WEBVTT
1
00:00:01.040 --> 00:00:02.070
As I mentioned earlier,

2
00:00:02.070 --> 00:00:05.810
we had our four basic categories inside of our application.

3
00:00:05.810 --> 00:00:08.900
We've done a bunch with our POM file already to begin with,

4
00:00:08.900 --> 00:00:11.710
and we really don't need to add any more dependencies in there right now,

5
00:00:11.710 --> 00:00:14.010
so we've got one of the four out of the way.

6
00:00:14.010 --> 00:00:16.430
The next one we'll go to is the view,

7
00:00:16.430 --> 00:00:20.270
and our views are usually served up from underneath our src main

8
00:00:20.270 --> 00:00:23.500
webapp directory in a traditional JSP application.

9
00:00:23.500 --> 00:00:27.160
So I'm going to right‑click on our webapp directory and say,

10
00:00:27.160 --> 00:00:35.140
New, Directory, WEB‑INF, hit Enter.

11
00:00:35.140 --> 00:00:41.310
And underneath that, I want to create another directory and call this jsp,

12
00:00:41.310 --> 00:00:49.540
Enter, and I want to create a new file underneath here and call it greeting.jsp.

13
00:00:49.540 --> 00:00:53.930
And there are some wizards and stuff you can use to create this.

14
00:00:53.930 --> 00:00:54.970
This is a simple page.

15
00:00:54.970 --> 00:00:58.930
I'm actually going to open up our index.html page,

16
00:00:58.930 --> 00:01:06.530
grab the body of this all out of here, and paste this into my greeting.jsp page.

17
00:01:06.530 --> 00:01:09.690
I'm going to change the index to greeting,

18
00:01:09.690 --> 00:01:11.820
and we're going to do something a little different now.

19
00:01:11.820 --> 00:01:16.240
I'll close that index.html just to make sure that we don't make a mistake there.

20
00:01:16.240 --> 00:01:20.530
I'm going to go to the h1 tag that we have up there

21
00:01:20.530 --> 00:01:26.870
and change that to ${message}, and save that.

22
00:01:26.870 --> 00:01:30.360
We're going to pull this out of a request that we're

23
00:01:30.360 --> 00:01:31.870
going to make to a controller.

24
00:01:31.870 --> 00:01:34.770
So now we have our view taken care of.

25
00:01:34.770 --> 00:01:40.540
We've created a JSP page that's going to go pull these attributes back out.

26
00:01:40.540 --> 00:01:45.660
Let's go ahead and change the configuration of our application.

27
00:01:45.660 --> 00:01:48.020
It's now a Spring Boot application.

28
00:01:48.020 --> 00:01:50.590
Let's make it so it launches our DispatcherServlet how we're

29
00:01:50.590 --> 00:01:54.210
normally used to in a Spring MVC application.

30
00:01:54.210 --> 00:01:58.000
If I go to my ConferenceApplication class,

31
00:01:58.000 --> 00:02:00.780
notice on line 8, it is our configuration class.

32
00:02:00.780 --> 00:02:03.950
We're going to continue to take advantage of that, but we're going to

33
00:02:03.950 --> 00:02:14.610
make this extends SpringBootServletInitializer. And what this will do

34
00:02:14.610 --> 00:02:18.690
is launch our application with the desired configurations we're used

35
00:02:18.690 --> 00:02:20.410
to using inside of a web app.

36
00:02:20.410 --> 00:02:23.540
So it's going to set up an internal view resource resolver. We're

37
00:02:23.540 --> 00:02:26.060
going to talk about all of that stuff later.

38
00:02:26.060 --> 00:02:30.190
It's going to resolve JSP pages, set up JSTL for us,

39
00:02:30.190 --> 00:02:31.990
basically launch stuff the way we want to.

40
00:02:31.990 --> 00:02:33.780
We'll break all of these pieces down.

41
00:02:33.780 --> 00:02:35.750
We've just got to get something out there for you to

42
00:02:35.750 --> 00:02:38.200
use so that we can talk about it.

43
00:02:38.200 --> 00:02:39.660
So let's save this.

44
00:02:39.660 --> 00:02:43.860
There's nothing else to do here, and then open up our

45
00:02:43.860 --> 00:02:48.670
application.properties file, and that's underneath src main resources. If

46
00:02:48.670 --> 00:02:53.660
you're using the ultimate version of IntelliJ or Spring STS,

47
00:02:53.660 --> 00:02:56.760
you actually get some context‑sensitive help inside of here. So

48
00:02:56.760 --> 00:03:02.230
I'm going to type spring.mvc.view.prefix.

49
00:03:02.230 --> 00:03:04.770
And we want to put in that directory we just created,

50
00:03:04.770 --> 00:03:12.410
WEB‑INF/jsp/, and don't forget that trailing slash. And then we

51
00:03:12.410 --> 00:03:21.400
want to do spring.mvc.view.suffix, and we want to have .jsp, and

52
00:03:21.400 --> 00:03:24.880
also don't forget the .jsp on that.

53
00:03:24.880 --> 00:03:30.140
So save this. Now this is the other part of our configuration

54
00:03:30.140 --> 00:03:34.660
that tells it where to one, look for JSP pages, and two, what

55
00:03:34.660 --> 00:03:36.960
the extension for those are.

56
00:03:36.960 --> 00:03:39.470
If we were using other templated tools or when we

57
00:03:39.470 --> 00:03:43.830
get into the Thymeleaf section, this will be a different configuration.

58
00:03:43.830 --> 00:03:45.420
So now that this is all set up,

59
00:03:45.420 --> 00:03:48.510
we can move to the Java portion of our application or where we

60
00:03:48.510 --> 00:03:51.840
start doing things inside of our Java code.

61
00:03:51.840 --> 00:03:55.470
Let's go up to our src main java directory and click on

62
00:03:55.470 --> 00:03:59.240
our com.pluralsight.conference package,

63
00:03:59.240 --> 00:04:06.980
right‑click and say New, Java Class. And the way IntelliJ works, we want to type

64
00:04:06.980 --> 00:04:13.250
in controller., so it's going to add a new package for us.

65
00:04:13.250 --> 00:04:18.710
I'm going to call this the GreetingController, and hit

66
00:04:18.710 --> 00:04:22.120
Enter. It will pull this class up for us.

67
00:04:22.120 --> 00:04:25.620
Now we're going to go through all of these pieces and explain what all of this

68
00:04:25.620 --> 00:04:33.570
does, but for now, we want to type @Controller and have it select that and

69
00:04:33.570 --> 00:04:38.810
import that class for us, and we can put a method signature down here that does

70
00:04:38.810 --> 00:04:40.650
what we want to do inside of our applications.

71
00:04:40.650 --> 00:04:44.440
We're going to start off by saying @GetMapping.

72
00:04:44.440 --> 00:04:49.240
And when we request the URL of greeting,

73
00:04:49.240 --> 00:04:53.230
we want it to go through and call this method.

74
00:04:53.230 --> 00:04:58.290
So we'll say public String greeting.

75
00:04:58.290 --> 00:05:00.520
This method name could be anything.

76
00:05:00.520 --> 00:05:04.890
I just chose greeting to keep it consistent, but it could be foo, it could

77
00:05:04.890 --> 00:05:07.830
be bar, it could be greeting, it could be say hello.

78
00:05:07.830 --> 00:05:11.510
It doesn't matter what the method name is. The GetMapping on

79
00:05:11.510 --> 00:05:14.640
line 9 matters. The method name does not.

80
00:05:14.640 --> 00:05:19.160
So, now we could pass in some parameters here, and we want to pass in a

81
00:05:19.160 --> 00:05:30.500
map, and that map we want to be a String Object pair,

82
00:05:30.500 --> 00:05:35.380
and we're going to give it the parameter name of model. Now inside

83
00:05:35.380 --> 00:05:39.710
of here, this is how we can pass attributes back through our model.

84
00:05:39.710 --> 00:05:47.620
So we'll say model.put. And for our key, because it's just a simple

85
00:05:47.620 --> 00:05:50.130
map, we'll say message.

86
00:05:50.130 --> 00:05:50.460
Remember,

87
00:05:50.460 --> 00:05:57.210
that was the variable name we had in our JSP page. And for the object, we're

88
00:05:57.210 --> 00:06:00.640
going to put a string, and I'm going to put in Hello Bryan.

89
00:06:00.640 --> 00:06:05.050
Feel free to replace that with your own name.

90
00:06:05.050 --> 00:06:13.040
And from here, we're going to return the string greeting.

91
00:06:13.040 --> 00:06:19.550
Now, what this does is when we ask for the URL/greeting.

92
00:06:19.550 --> 00:06:25.770
It's going to call this method, put this message into the model,

93
00:06:25.770 --> 00:06:29.350
and then that return line on line 14's going to go out

94
00:06:29.350 --> 00:06:31.910
and look for a JSP page named greeting.

95
00:06:31.910 --> 00:06:35.480
Those are the two variables we put in our application.properties.

96
00:06:35.480 --> 00:06:39.430
If this finds everything and executes correctly, it will then return

97
00:06:39.430 --> 00:06:44.490
that JSP page with these values rendered for us, so those four files

98
00:06:44.490 --> 00:06:49.280
we just worked with. Let's save this. I'll make this full screen so

99
00:06:49.280 --> 00:06:50.120
you can see everything.

100
00:06:50.120 --> 00:06:51.970
It actually fit in that one window.

101
00:06:51.970 --> 00:06:54.780
But this is everything that we needed to create our

102
00:06:54.780 --> 00:06:58.440
controller and return that value for us.

103
00:06:58.440 --> 00:07:05.740
Now that we have this in place, let's go ahead and start up our server.

104
00:07:05.740 --> 00:07:10.140
When this launches, it will take us to our index page that we have created.

105
00:07:10.140 --> 00:07:14.320
And then we can type in our greeting URL.

106
00:07:14.320 --> 00:07:23.540
So now we can go here and type in greeting and hit Enter. It'll say Hello Bryan.

107
00:07:23.540 --> 00:07:29.300
So we got all those pieces in place. To reiterate our packaging

108
00:07:29.300 --> 00:07:31.670
and the way we talked about our four areas,

109
00:07:31.670 --> 00:07:36.800
we had our Java code, which contained our controllers, our greeting controller,

110
00:07:36.800 --> 00:07:41.400
some configuration in our properties, our actual webapp configuration,

111
00:07:41.400 --> 00:07:44.010
which we're going to expand on all of this as we build out

112
00:07:44.010 --> 00:07:48.610
the course, and our JSP pages that contained our view. Pretty

113
00:07:48.610 --> 00:07:50.190
easy when we broke it all down.

114
00:07:50.190 --> 00:07:53.140
Now that we've gone through all of that configuration work, it

115
00:07:53.140 --> 00:07:59.000
literally just allows us to put in little pieces of our application and build it out as we go.

