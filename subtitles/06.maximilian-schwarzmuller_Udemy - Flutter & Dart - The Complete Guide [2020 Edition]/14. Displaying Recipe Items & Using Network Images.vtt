WEBVTT
1
00:00:02.210 --> 00:00:08.900
For presenting a single meal, I of course don't just want output the text, instead I think it makes sense

2
00:00:08.900 --> 00:00:16.250
to create a new widget for a single list item here because it'll be a more complex structure, a more

3
00:00:16.250 --> 00:00:23.480
complex widget composition of a couple of built-in widgets and therefore, I don't want to clutter this

4
00:00:23.780 --> 00:00:29.780
sub-widget tree here in the CategoryMealsScreen but instead create a new item or a new widget just

5
00:00:29.780 --> 00:00:35.270
as we did it for the category item where we also have a separate widget for displaying the categories

6
00:00:35.270 --> 00:00:37.110
in our grid of categories.

7
00:00:37.220 --> 00:00:44.720
So let's add a meal item here maybe and now, there is one thing which I want to improve about our folder

8
00:00:44.720 --> 00:00:45.200
structure

9
00:00:45.200 --> 00:00:49.410
before we continue. We have a couple of widgets which we use as screens,

10
00:00:49.430 --> 00:00:52.350
we have these two widgets to be precise,

11
00:00:52.430 --> 00:00:57.170
then we have widgets which we use as part of other widgets

12
00:00:57.200 --> 00:01:00.090
and that's of course a core difference, a

13
00:01:00.110 --> 00:01:02.050
totally different way of using widgets.

14
00:01:02.210 --> 00:01:08.540
Both are normal widgets, a screen widget also is just a class that extends stateless or a stateful

15
00:01:08.540 --> 00:01:09.200
widget

16
00:01:09.200 --> 00:01:12.400
but the way we use these widgets of course is totally different.

17
00:01:12.410 --> 00:01:18.500
So here, it would make sense to create more sub-folders to make it clear which widgets and which files

18
00:01:18.500 --> 00:01:20.570
contain which kind of widget.

19
00:01:20.570 --> 00:01:27.830
So here we could add widgets sub-folder for these normal widgets which we include into other widgets and

20
00:01:27.830 --> 00:01:34.430
then a screens sub-folder for the screen-like widgets and then we can move categories screen and category

21
00:01:34.430 --> 00:01:42.680
meals screen into the screens folder and category_item and meal_item.dart into the widgets folder and

22
00:01:42.710 --> 00:01:45.800
dummy_data.dart and the main.dart file will stay where they are,

23
00:01:45.830 --> 00:01:51.440
I think we can definitely keep those on the root level, though you could also create some data folder

24
00:01:51.500 --> 00:01:53.950
for the dummy data if you wanted to.

25
00:01:53.960 --> 00:02:01.970
Now we will need to fix a couple of imports, like here in main.dart, CategoryMealsScreen is now found

26
00:02:01.970 --> 00:02:08.660
in the screen folders so we need to update our import to screens folder to point at that folder and

27
00:02:08.660 --> 00:02:14.960
the same is of course true for the categories_screen.dart file and category_item.dart file, there

28
00:02:14.960 --> 00:02:18.210
we also point that the category_meals_screen.dart file,

29
00:02:18.260 --> 00:02:23.480
so there we first of all need to go up one level with two dots and then into the screens folder and

30
00:02:23.480 --> 00:02:30.010
then into the category_meals_screen.dart file and in our screens.dart file here, the dummy data is found

31
00:02:30.020 --> 00:02:30.890
one level above,

32
00:02:30.890 --> 00:02:34.880
so we need two dots here and the category item is also found one level above

33
00:02:34.880 --> 00:02:41.990
but then in the widgets folder and in the CategoryMealsScreen file, dummy data is found one level above.

34
00:02:41.990 --> 00:02:49.250
With all that fixed, now we can work on the meal item and a meal item is simply another stateless widget

35
00:02:49.250 --> 00:02:53.290
here in the end. I'll name it meal item

36
00:02:53.290 --> 00:02:58.270
and as always, you need to import material.dart from the Flutter package.

37
00:02:58.270 --> 00:03:01.420
Now how should a meal item look like?

38
00:03:01.420 --> 00:03:07.240
And remember, this is simply the widget we use as part of our list of meals we're outputting once we

39
00:03:07.240 --> 00:03:09.090
selected a category.

40
00:03:09.130 --> 00:03:11.290
So how should such a list item look like?

41
00:03:14.370 --> 00:03:19.630
Obviously, you can style and build this in whichever way you want.

42
00:03:19.650 --> 00:03:26.430
Here's just one suggestion which also will use a couple of new features, new widgets, new ways of configuring

43
00:03:26.430 --> 00:03:31.800
widgets which we haven't used before in the course because that's of course also the core goal or

44
00:03:31.800 --> 00:03:37.350
one core goal of this course, I want to give you many examples of how you can build Flutter apps and

45
00:03:37.350 --> 00:03:40.250
how you can work with the Flutter widgets.

46
00:03:40.320 --> 00:03:47.250
I'll start by adding an InkWell and we did the same for the category item to have a clickable item where

47
00:03:47.250 --> 00:03:49.140
we also have this ripple effect.

48
00:03:49.170 --> 00:03:52.970
I want to have that effect here too, so an InkWell makes a lot of sense.

49
00:03:54.550 --> 00:04:01.000
onTap, I want to make sure that we trigger some method which then actually shows us the detail page

50
00:04:01.150 --> 00:04:03.070
for the selected recipe.

51
00:04:03.070 --> 00:04:10.390
So here, I'll add a new method which doesn't return anything which I'll name select meal and for now,

52
00:04:10.750 --> 00:04:16.990
I don't do anything in here, we'll add the logic later, I'll just connect it to onTap for the moment.

53
00:04:17.120 --> 00:04:23.150
Now the InkWell will not just have a tap effect but should also have of course a child which is the

54
00:04:23.150 --> 00:04:26.830
actual widget that's wrapped by the InkWell and there,

55
00:04:26.840 --> 00:04:27.740
I'll use a card,

56
00:04:27.740 --> 00:04:33.700
so this built-in card widget Flutter offers. Now in that card or on that card,

57
00:04:33.810 --> 00:04:40.110
I want to override the default shape by setting the shape argument and with the shape argument, we can

58
00:04:40.110 --> 00:04:41.880
change the way this card looks.

59
00:04:41.880 --> 00:04:48.810
Instead of having a rectangle, we can get a rectangle with rounded corners where we can define how strong

60
00:04:48.810 --> 00:04:51.340
the rounding effect should be and so on

61
00:04:51.420 --> 00:04:53.030
and indeed, that's what I want here.

62
00:04:53.040 --> 00:05:02.430
So for the shape, I'll set a rounded rectangle border object because shape, if you check it, needs a shape

63
00:05:02.440 --> 00:05:08.590
border type and shape border actually is created by a rounded rectangle border,

64
00:05:08.590 --> 00:05:15.940
this gives you a shape border type as well and rounded rectangle border takes one important argument,

65
00:05:16.030 --> 00:05:19.150
the border radius you want to have for your corners.

66
00:05:19.150 --> 00:05:24.760
So this is a typical pattern of how you can assign rounded corners to certain widgets, like the card widget

67
00:05:24.790 --> 00:05:33.100
in this case and border radius in turn needs a border radius object but there, for border radius,

68
00:05:33.100 --> 00:05:39.610
I'll use the circular constructor and then set a radius of 15 and this will now give us rounded corners

69
00:05:39.790 --> 00:05:42.220
on this card with a radius of 15.

70
00:05:45.570 --> 00:05:51.420
So that's the shape of the card, besides the shape, I'll set the elevation to 4 to have a little bit more

71
00:05:51.480 --> 00:05:59.130
shadow behind the card and a margin with EdgeInsets.all of 10

72
00:05:59.130 --> 00:06:06.470
so that we have more margin around every element, around every meal here.

73
00:06:06.660 --> 00:06:07.970
With that we can add a child,

74
00:06:07.980 --> 00:06:14.070
so the content inside of the card and there, I want to have a column because I want to have multiple widgets

75
00:06:14.340 --> 00:06:16.280
above each other, on top of each other

76
00:06:16.290 --> 00:06:17.980
so to say. Now

77
00:06:18.030 --> 00:06:24.510
as you learned, column takes a children argument and there we provide a list of widgets that should be

78
00:06:24.510 --> 00:06:25.930
part of that column.

79
00:06:26.070 --> 00:06:32.280
The first widget I'll add is the stack widget, another built-in widget which allows us to add items

80
00:06:32.880 --> 00:06:39.240
on top of each other in a three dimensional space, so you can have an image with a title on top of the

81
00:06:39.240 --> 00:06:39.540
image,

82
00:06:39.600 --> 00:06:40.780
so as part of the image

83
00:06:40.800 --> 00:06:43.920
so to say and that's exactly the effect I want to have here

84
00:06:43.920 --> 00:06:44.280
by the way.

85
00:06:44.310 --> 00:06:46.320
I want to display the image of the recipe

86
00:06:46.410 --> 00:06:53.070
and on top of that image, I also want to show the title. Stack takes a couple of children, which are the

87
00:06:53.070 --> 00:06:55.920
child widgets that are placed on top of each other

88
00:06:56.040 --> 00:06:59.010
and the first child widget will be my image.

89
00:06:59.010 --> 00:07:01.550
Now I'll not create the image directly like this,

90
00:07:01.620 --> 00:07:04.580
instead I also want to have rounded corners on the image

91
00:07:04.680 --> 00:07:08.340
otherwise it will not look good in that rounded corners card

92
00:07:08.370 --> 00:07:14.640
because if you would put an image with normal corners, without rounded corners into that card with rounded

93
00:07:14.640 --> 00:07:20.640
corners, the image corners would basically overlap the card and you would not see the rounded corners

94
00:07:20.640 --> 00:07:28.260
effect on the card and therefore, you need to clip the image, which means you have to move it into a certain

95
00:07:28.350 --> 00:07:28.890
form,

96
00:07:28.890 --> 00:07:31.860
you want to add rounded corners there as well.

97
00:07:31.860 --> 00:07:35.520
Now you can't set rounded corners directly on an image,

98
00:07:35.550 --> 00:07:42.510
that's simply not supported but you can use another widget to wrap it around your image widget, to basically

99
00:07:42.660 --> 00:07:49.770
cut off or clip the corners off the image so that you have that feeling of having rounded corners because

100
00:07:49.770 --> 00:07:53.140
the image is simply forced into that form,

101
00:07:53.160 --> 00:07:55.740
you do this with ClipRRect.

102
00:07:55.760 --> 00:07:58.250
Now this is a widget which is also a part of Flutter,

103
00:07:58.260 --> 00:08:03.570
you don't use it that often and the name certainly looks a bit strange but this is a widget which you

104
00:08:03.570 --> 00:08:13.230
can use to basically use any other widget as a child and force it into a certain form, for example into

105
00:08:13.230 --> 00:08:18.440
a widget where the top corners are rounded. So ClipRRect

106
00:08:18.450 --> 00:08:23.280
indeed does take a border radius, just like rounded rectangle border did for the card,

107
00:08:23.400 --> 00:08:29.520
here we could use rounded rectangle border instead of ClipRRect because card supports this shape

108
00:08:29.580 --> 00:08:32.480
argument and then handles the rounding internally,

109
00:08:32.610 --> 00:08:38.130
here ClipRRect needs to be used as a helper widget because image does not support this internally.

110
00:08:38.130 --> 00:08:45.450
Now the value for border radius here however is also border radius but then not circular but only,

111
00:08:45.930 --> 00:08:52.350
only allows me to set the radius for each corners separately and I only want to round the corners on

112
00:08:52.350 --> 00:08:54.870
the top left and top right

113
00:08:54.870 --> 00:08:59.170
because these will be the corners that would overlap across our card corners.

114
00:08:59.310 --> 00:09:01.350
Why not the bottom corners as well?

115
00:09:01.440 --> 00:09:04.840
Because for our image, remember it's part of a column,

116
00:09:04.860 --> 00:09:10.320
we'll have another element below the image, to be precise I want to output information about the affordability

117
00:09:10.370 --> 00:09:11.790
and so on below the image.

118
00:09:11.790 --> 00:09:16.090
So the bottom corners of the image will not match the bottom corners of the card,

119
00:09:16.110 --> 00:09:23.010
the top borders will and therefore we have to round the top borders. So here, we can select the top left

120
00:09:23.010 --> 00:09:25.450
corner and set that to radius

121
00:09:25.500 --> 00:09:27.460
circular 15,

122
00:09:27.510 --> 00:09:30.100
so of course the same value I used up here

123
00:09:30.480 --> 00:09:35.010
and then do the same for top right, radius circular.

124
00:09:35.010 --> 00:09:38.590
15.

125
00:09:38.630 --> 00:09:40.880
So with that, we have that clipping setup,

126
00:09:40.880 --> 00:09:45.790
now we have to define the child which should be clipped and that's the image

127
00:09:45.930 --> 00:09:51.170
and there we can use the .network constructor to create an image widget which reaches out to the

128
00:09:51.170 --> 00:09:58.010
network to fetch the image. Before the course, we used image.assets to use a local image that's included

129
00:09:58.160 --> 00:09:59.000
in our app,

130
00:09:59.000 --> 00:10:00.760
now that's simply not the case here,

131
00:10:00.770 --> 00:10:08.470
every meal in our app has a URL that points at the image and therefore, we'll have to use that.

132
00:10:08.510 --> 00:10:14.510
Now of course the URL of the recipe, of the meal is something we need as an input to our widget here.

133
00:10:16.090 --> 00:10:19.370
So let's add a couple of properties in general,

134
00:10:19.390 --> 00:10:27.220
I'd say, all the properties we need to properly display a meal in our list of meals. That will be the

135
00:10:27.220 --> 00:10:37.070
title, that will also be the imageUrl of course but it will also be for example the duration which

136
00:10:37.070 --> 00:10:40.680
is an integer and you can check the meal here,

137
00:10:40.730 --> 00:10:45.840
the meal model to learn which property of our meals has which data type.

138
00:10:46.010 --> 00:10:50.870
Now what I also want to display here in the list already is information about the complexity.

139
00:10:51.020 --> 00:10:58.160
So the type here is complexity and for that, to use it in this file, you need to import it from the models

140
00:10:58.490 --> 00:11:00.450
folder and there, the meal.dart file,

141
00:11:00.470 --> 00:11:05.990
now we can accept or use complexity as a type here in the meal_item.dart file.

142
00:11:06.920 --> 00:11:14.170
I also want to use affordability, that's exported by the same file

143
00:11:14.240 --> 00:11:17.170
and with that, I'd say we have a solid set up.

144
00:11:17.210 --> 00:11:25.070
Now let's add the constructor for meal item and there, you can use named or positional arguments, I'll

145
00:11:25.070 --> 00:11:33.980
use named arguments here and I want to get the title, the imageUrl, the affordability, the complexity

146
00:11:33.980 --> 00:11:37.360
of course and the duration.

147
00:11:37.430 --> 00:11:42.580
Now just as before, we can also add @required in front of every argument here,

148
00:11:42.740 --> 00:11:47.510
this is available because we are already importing flutter/material.dart which unlocks the required

149
00:11:47.510 --> 00:11:50.970
decorator to make sure that meal items can't be created

150
00:11:51.050 --> 00:11:53.080
without these arguments.

151
00:11:53.270 --> 00:11:58.790
So now that we're getting this back down to the image network, we can of course simply use the imageUrl

152
00:11:58.830 --> 00:12:05.690
which we're now getting as an argument when this widget is created. Now the image should also be configured,

153
00:12:05.810 --> 00:12:11.840
I want to set a height for example, a fixed height of 250, so that the image never is

154
00:12:11.840 --> 00:12:15.080
bigger than that and we have the same image height on every recipe

155
00:12:15.590 --> 00:12:18.470
and for the width however, I want to set double infinity,

156
00:12:18.470 --> 00:12:19.900
so it should take all the width

157
00:12:19.970 --> 00:12:27.150
it can get. To fit the image nicely into that box which we create here,

158
00:12:27.170 --> 00:12:33.440
I'll also add the fit argument because of course by default, you might have an image that has the aspect

159
00:12:33.440 --> 00:12:39.680
ratio which would look distorted if you squeeze it into the dimensions you have here and to automatically

160
00:12:39.680 --> 00:12:43.870
resize it or crop it such that it nicely fits into this box,

161
00:12:43.970 --> 00:12:51.830
the fixed argument helps us and we can set this to BoxFit.cover and this will both resize and crop

162
00:12:51.830 --> 00:12:55.410
the image so that it fits nicely into this container.

163
00:12:55.610 --> 00:12:58.750
And now before we continue, let's have a look at this.

164
00:12:58.790 --> 00:13:07.550
Let's save this and let's now go to CategoryMealsScreen and there, replace the text here with our meal

165
00:13:07.910 --> 00:13:13.800
item widget which we worked on. For that, you need to add an import of course at the top,

166
00:13:14.030 --> 00:13:20.960
so an import pointing at the widgets folder and there, at the meal_item.dart file

167
00:13:20.960 --> 00:13:25.530
and with that, we can create our meal item down here and of course we now have to pass data to it,

168
00:13:25.610 --> 00:13:27.660
data about the selected meal.

169
00:13:28.100 --> 00:13:32.870
So the selected meal is of course category meals index

170
00:13:32.870 --> 00:13:35.660
and now here, we expect a title for example,

171
00:13:35.660 --> 00:13:41.720
so we should access category meals index title and pass this title. Besides the title, we also want the

172
00:13:41.720 --> 00:13:46.060
imageUrl, so let's pass category meals for the selected

173
00:13:46.250 --> 00:13:51.770
index.imageUrl. For the duration,

174
00:13:52.000 --> 00:13:58.540
we have to pass category meals for the selected index duration. For the affordability,

175
00:13:58.540 --> 00:14:02.750
unsurprisingly we use category meals for the selected index

176
00:14:02.860 --> 00:14:09.900
affordability and for the complexity, we use category meals for the selected index here in our item builder

177
00:14:10.030 --> 00:14:11.500
and then complexity.

178
00:14:12.470 --> 00:14:16.010
With that, we're creating a meal item here which we're outputting.

179
00:14:16.010 --> 00:14:22.790
Right now we're not using title, duration, affordability and complexity but we should be seeing images at least,

180
00:14:22.790 --> 00:14:24.440
so let's save this and have a look.

181
00:14:24.560 --> 00:14:31.580
If you go back to the application, you should now see some images there through which you can scroll

182
00:14:32.550 --> 00:14:34.530
in all the categories. In some categories,

183
00:14:34.530 --> 00:14:39.980
we only have one or two elements but in other categories, we have more elements and there, once they're

184
00:14:39.990 --> 00:14:40.560
loaded,

185
00:14:40.560 --> 00:14:47.160
you should see these images. And that's of course pretty nice already, looks quite delicious already in

186
00:14:47.160 --> 00:14:48.070
my opinion,

187
00:14:48.210 --> 00:14:53.430
the next step of course is to make sure that we also show the title, that we make these tappable and

188
00:14:53.430 --> 00:14:57.390
that we maybe also show some extra information regarding complexity and so on.
