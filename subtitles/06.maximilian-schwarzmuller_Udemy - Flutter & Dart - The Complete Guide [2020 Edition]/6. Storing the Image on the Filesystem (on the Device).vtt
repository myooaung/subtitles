WEBVTT
1
00:00:02.190 --> 00:00:08.340
Now storing that image in a variable is a nice first step but of course doesn't help us that much,

2
00:00:08.340 --> 00:00:08.580
right?

3
00:00:08.730 --> 00:00:14.820
So the first thing we can do though is of course we can call set state here, because we're in a stateful

4
00:00:14.820 --> 00:00:17.280
widget and set our stored image,

5
00:00:17.310 --> 00:00:23.120
so this property up there which is a file, equal to the image file we took from the camera.

6
00:00:23.190 --> 00:00:26.910
This should at least allow us to see it here in our preview right,

7
00:00:26.910 --> 00:00:32.520
because once stored image is set, we're trying to display that file here with the image widget which

8
00:00:32.520 --> 00:00:35.310
has a file provider basically.

9
00:00:35.310 --> 00:00:36.360
Let's give that a try

10
00:00:36.360 --> 00:00:38.820
before we continue with saving the image on the device.

11
00:00:39.060 --> 00:00:42.240
So if I save this and I go back to take a picture,

12
00:00:42.240 --> 00:00:50.780
let's take a picture here with that emulator camera preview and indeed, here is my picture.

13
00:00:50.780 --> 00:00:52.010
So that is looking good,

14
00:00:52.010 --> 00:00:56.840
that is working but still, it's of course not that useful

15
00:00:56.920 --> 00:01:04.540
if we can only manage our image here in a variable and in memory basically because that means that we're

16
00:01:04.540 --> 00:01:09.760
not adding a place here, when we go back it's lost and when we restart the app, it's also lost and

17
00:01:09.790 --> 00:01:11.500
that's of course not the idea,

18
00:01:11.890 --> 00:01:19.210
instead we want to store that file somewhere permanently on our device hard drive so that we can

19
00:01:19.210 --> 00:01:27.010
then work with this image whenever we restart the app and so on. Now to store it on our hard drive,

20
00:01:27.010 --> 00:01:33.730
we need more packages that help us with that because interacting with the hard drive can be challenging,

21
00:01:34.390 --> 00:01:35.530
to be precise

22
00:01:35.620 --> 00:01:39.720
actually, it starts in a pretty straightforward way.

23
00:01:39.970 --> 00:01:46.150
Maybe here after updating our preview image, you can use the image file which you got up there which

24
00:01:46.150 --> 00:01:52.960
is a file and on that, you can call copy to copy this file in a new location,

25
00:01:52.960 --> 00:01:54.070
so that's great.

26
00:01:54.070 --> 00:01:57.900
Now we need to enter a path on our device where we want to copy this to

27
00:01:57.940 --> 00:02:04.930
and this is the very tricky part because of course as you can imagine, on iOS and Android, you can't

28
00:02:04.990 --> 00:02:09.270
write files to any place on the hard drive, instead

29
00:02:09.400 --> 00:02:15.130
there are a lot of restrictions regarding where you can write data to, so that you don't clutter up the

30
00:02:15.280 --> 00:02:21.070
hard drive of the mobile device or start writing files into folders where you really shouldn't have

31
00:02:21.070 --> 00:02:22.270
access.

32
00:02:22.330 --> 00:02:28.250
So therefore both iOS and Android typically give you a certain path where you can store your app

33
00:02:28.250 --> 00:02:29.260
related data in

34
00:02:29.600 --> 00:02:35.440
and that's a good thing because since such a path is clearly defined by both operating systems, that

35
00:02:35.440 --> 00:02:40.720
means that whenever you delete your app, these operating systems can erase all the data from that

36
00:02:40.720 --> 00:02:47.200
path and they know that all your app specific data is gone together with the app and that keeps your

37
00:02:47.340 --> 00:02:51.690
device hard drive clean and avoids that you save files anywhere

38
00:02:51.730 --> 00:02:57.550
and when you uninstall the app, these files are still there and therefore your hard drive would

39
00:02:57.550 --> 00:03:00.100
reach its capacity at some point of time.

40
00:03:00.280 --> 00:03:05.560
So it's good that you have clearly defined paths where you can store your data

41
00:03:05.560 --> 00:03:09.340
but of course that also means that you need to find out which paths that are

42
00:03:09.340 --> 00:03:16.290
and for that we can use a certain package which we can search for on pub.dev and it's path_provider.

43
00:03:16.330 --> 00:03:19.390
Has nothing to do with the provider package,

44
00:03:19.720 --> 00:03:27.360
instead this is a package which helps you get access to the paths iOS and Android give you to store data in.

45
00:03:28.300 --> 00:03:34.870
So as always, let's go to the installing tab here and add this entry to the pubspec.yaml file below

46
00:03:34.870 --> 00:03:37.330
our image picker here, like this

47
00:03:37.420 --> 00:03:43.610
and before I hit save, I need yet another package and that's the path package, just path,

48
00:03:43.780 --> 00:03:46.240
this helps us with constructing paths.

49
00:03:46.270 --> 00:03:49.310
So one package helps us with finding paths,

50
00:03:49.330 --> 00:03:55.840
this package helps us with combining paths basically and you'll see why we need this in a second.

51
00:03:56.320 --> 00:04:02.540
So let's also install this, add this entry here to the pubspec.yaml file and now save this

52
00:04:02.650 --> 00:04:07.320
and again if it doesn't work, run Flutter packages get.

53
00:04:07.450 --> 00:04:14.200
So now with these two packages, back in the image input widget here, we can import them both, we can import

54
00:04:14.260 --> 00:04:24.190
our package path and there, the path.dart file and maybe give this a path prefix so that we can use all

55
00:04:24.190 --> 00:04:30.410
the methods it provides on the path thing here with path. and then the method name

56
00:04:30.760 --> 00:04:37.410
and let's also import a package, the path provider package and there, the path_provider.dart file

57
00:04:37.750 --> 00:04:42.810
and I'll give this a prefix of syspaths for system paths

58
00:04:42.880 --> 00:04:48.310
but you don't need to assign these prefixes, I just do this so that it's really clear which functionality

59
00:04:48.310 --> 00:04:50.500
is coming from which package.

60
00:04:50.500 --> 00:04:56.290
So now down there where I want to copy this, we need to find out where we're allowed to copy it

61
00:04:56.290 --> 00:05:04.420
to and therefore we first of all need to find our appDir, our app directory where we can store data and

62
00:05:04.420 --> 00:05:09.430
we can do this with the help of the syspaths object here,

63
00:05:09.620 --> 00:05:18.240
so in the end with the help of the path provider package and there

64
00:05:18.240 --> 00:05:23.850
we can use the get application documents directory method. You see, you have a couple of methods there,

65
00:05:24.330 --> 00:05:30.240
for example also for getting access to the external storage which only works on Android though, so not

66
00:05:30.240 --> 00:05:33.350
really an option if you build an app that should work for iOS too.

67
00:05:33.360 --> 00:05:38.910
This would give you access to an external SD card if available or the temporary directory

68
00:05:38.910 --> 00:05:45.900
but as the name suggests, this is a temporary directory and it will regularly be cleaned up by your operating

69
00:05:45.900 --> 00:05:46.590
system,

70
00:05:46.590 --> 00:05:52.170
so don't store anything in there which should be living a bit longer, at least as long as your app.

71
00:05:52.350 --> 00:05:58.020
The images we're taking right now with the camera for example also are stored in a temporary directory

72
00:05:58.380 --> 00:06:01.060
and therefore they get deleted at some point of time.

73
00:06:01.140 --> 00:06:07.530
So we need access to the applications documents directory, that's a directory on the device which is

74
00:06:07.530 --> 00:06:09.290
reserved for app data

75
00:06:09.750 --> 00:06:12.320
and that sounds just about right.

76
00:06:12.480 --> 00:06:16.680
Now this here actually gives us a future which then yields the directory,

77
00:06:16.680 --> 00:06:24.240
so I will await for this and therefore now, we'll have a handle to that directory stored in appDir.

78
00:06:24.270 --> 00:06:30.990
So that's one thing but here for copy, we need a path which is actually just a string, not a directory

79
00:06:30.990 --> 00:06:31.700
handle

80
00:06:32.250 --> 00:06:39.630
but the good thing is that our appDir directory has a path property which gives us the path as a string.

81
00:06:40.320 --> 00:06:43.320
But I don't want to copy my image like this,

82
00:06:43.320 --> 00:06:48.960
instead you also have to provide the name of the image it should have

83
00:06:48.960 --> 00:06:53.670
and for that, I'm fine with the name that was automatically assigned by the camera, by the image picker

84
00:06:54.030 --> 00:06:58.220
and to get that, we can use path

85
00:06:58.420 --> 00:07:06.310
and that's now using this prefix and therefore referring to the path package, path.base name which

86
00:07:06.310 --> 00:07:14.720
gives you the part of a path after the last separator which is a complex name for saying the file

87
00:07:14.720 --> 00:07:15.950
name.

88
00:07:15.980 --> 00:07:23.360
So here, we can enter imageFile.path, that's the file,

89
00:07:23.410 --> 00:07:26.800
that's the path to where our image file is currently stored,

90
00:07:26.800 --> 00:07:33.640
so this temporary directory I just mentioned and there, the path does not just contain the folders where

91
00:07:33.640 --> 00:07:40.930
it's stored in but also that includes the name of the file and with base name, we get that file name, including

92
00:07:40.930 --> 00:07:50.250
the file extension. So I'll store this in that file name variable or constant here and therefore now, we can

93
00:07:50.250 --> 00:07:56.820
copy this into this path and then also add the file name and therefore here, I'll enter a string and

94
00:07:56.820 --> 00:08:06.600
then use string interpolation to get my appDir.path here and then a slash, to basically tell Flutter

95
00:08:06.600 --> 00:08:10.110
or Dart that you want to navigate into this path

96
00:08:10.110 --> 00:08:18.790
so to say, into the folder here and then I'll use more string interpolation and output my file name here.

97
00:08:18.810 --> 00:08:23.550
So that means I basically copy the file into this path and I keep the file name,

98
00:08:23.550 --> 00:08:30.150
that's what we're doing here. Now copy also is returning a future because this can take a while, not too

99
00:08:30.150 --> 00:08:33.820
long of course but still you don't want to block your other code.

100
00:08:34.050 --> 00:08:39.640
So here I will await for this because we're using async await to work with these futures and here,

101
00:08:40.350 --> 00:08:48.950
I therefore have my saved image in the end and this is now the image as it's saved in its final destination.

102
00:08:48.970 --> 00:08:56.470
Now it's this saved image which we then can work with in other parts of our application, for example

103
00:08:56.470 --> 00:08:57.210
to store it

104
00:08:57.220 --> 00:09:05.470
to an on device database so that we can combine it with a title and have a permanent entry on our device

105
00:09:05.470 --> 00:09:10.030
but before we do that, let's make sure we work with this in memory first.
