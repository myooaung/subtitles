WEBVTT
1
00:00:02.570 --> 00:00:08.360
Wir haben das Token hier in unseren Off-CLOs oder in dem konkreten Objekt, das auf dieser Klausel basiert, hier

2
00:00:08.360 --> 00:00:13.100
in der Haupt-Dart-Datei, und wir verwenden dieses Token, um herauszufinden, dass wir authentifiziert sind.

3
00:00:13.100 --> 00:00:19.600
Das ist schön, aber wir brauchen dieses Token auch für alle Anfragen zum Senden an die Rückseite und zum Beispiel

4
00:00:19.870 --> 00:00:21.210
zum Abrufen unserer Produkte.

5
00:00:21.220 --> 00:00:24.190
Denn im Moment funktioniert das nicht.

6
00:00:24.190 --> 00:00:27.220
Wir müssen also zwei ausgehende Anforderungen an das Token anhängen.

7
00:00:27.220 --> 00:00:30.010
Gut, dass der Schritt zur Unterstützung der toten Feuerbasis ist.

8
00:00:30.010 --> 00:00:32.800
Es macht es ziemlich einfach, an Token anzuhängen.

9
00:00:32.800 --> 00:00:38.170
Alles, was wir zum Beispiel beim Produktstart tun müssen, folgt, wo wir unsere Methode zum Abrufen und Festlegen

10
00:00:38.410 --> 00:00:40.550
von Produkten haben, die hier fehlschlägt.

11
00:00:40.660 --> 00:00:43.370
Sie sind alles, was wir tun müssen, ist am Ende des.

12
00:00:43.410 --> 00:00:51.490
Sie l Wir müssen ein gleichwertiges Questzeichen hinzufügen und dann unseren Token hier als Argument hinzufügen.

13
00:00:51.490 --> 00:00:57.100
Da Sie jetzt in unserer API möglicherweise einen bestimmten Header hinzufügen müssen, der Ihr Token

14
00:00:57.100 --> 00:01:03.670
enthält, der bei der dort aufgerufenen HP-Methode natürlich immer möglich wäre, denken Sie bitte immer daran, dass Sie

15
00:01:03.670 --> 00:01:11.050
Ihre eigenen Header festlegen können, damit die Header hier zusätzliche Argumente enthalten Sie könnten eine Header-Map bereitstellen, um der ausgehenden

16
00:01:11.050 --> 00:01:16.840
Anforderung zusätzliche Header hinzuzufügen, aber firebase möchte nicht in einem speziellen Header token, sondern in

17
00:01:16.840 --> 00:01:22.690
diesem sogenannten Abfrageparameter hier am Ende des U oder L so oft am Fragezeichen erforderlich

18
00:01:22.900 --> 00:01:29.620
Sie können eine beliebige Anzahl von Schlüsselwertpaaren haben und firebase sucht nach einem Aus-Schlüssel und dann sollte der

19
00:01:29.620 --> 00:01:31.570
Wert Ihr Token sein.

20
00:01:31.570 --> 00:01:36.220
Jetzt können wir das Token hier natürlich nicht fest codieren, da das Token für jeden Benutzer und jede

21
00:01:36.250 --> 00:01:37.150
Anmeldung unterschiedlich ist.

22
00:01:37.180 --> 00:01:39.040
Es ist nie das gleiche Zeichen wie zuvor.

23
00:01:39.400 --> 00:01:46.150
Daher können wir es hier offensichtlich nicht in unseren Code schreiben, der die gesamte Protokollierungsidee ziemlich überflüssig machen würde.

24
00:01:46.450 --> 00:01:48.720
Wir können hier also nicht bearbeiten, wir müssen es abrufen.

25
00:01:48.730 --> 00:01:52.550
Das Problem ist jedoch, dass sich das Token in der Off-Dart-Datei befindet.

26
00:01:52.660 --> 00:01:57.020
Wie bekommen wir es in unsere Produktstartdatei?

27
00:01:57.040 --> 00:02:03.680
Nun, es gibt etwas, was wir tun können, was wir noch nicht getan haben, bevor Produkte hier eine normale Klasse sind.

28
00:02:03.680 --> 00:02:12.950
Wir könnten also natürlich sagen, dass wir dort tatsächlich eine Eigenschaft haben wollen, die endgültig ist, vielleicht ist dies

29
00:02:12.950 --> 00:02:14.120
unser Zeichen.

30
00:02:14.120 --> 00:02:22.560
Dort könnten wir also eine Federeigenschaft haben, die das große Token oder D des Tokens ist, um dies festzulegen.

31
00:02:22.570 --> 00:02:24.430
Wir können zum Konstruktor hinzufügen.

32
00:02:24.520 --> 00:02:30.110
Wir hatten hier noch keinen Konstruktor, weil wir hier immer Produkte und tatsächlich alle unsere

33
00:02:30.130 --> 00:02:32.310
Anbieterklassen ohne Argumente erstellt haben.

34
00:02:32.320 --> 00:02:34.030
Aber das sind natürlich normale Klassen.

35
00:02:34.030 --> 00:02:40.780
Natürlich können Sie Argumente für ihre Konstruktoren analysieren, damit wir zum Produktstart bei unserem Konstruktor

36
00:02:40.780 --> 00:02:45.850
gehen und hier beispielsweise das Off-Token als einzigen Wert erwarten können.

37
00:02:45.850 --> 00:02:52.060
Und natürlich können Sie mehr Werte erwarten. Wenn wir davon ausgehen, dass wir hier einen Token erhalten haben, ist es

38
00:02:52.570 --> 00:02:54.430
natürlich ziemlich einfach, ihn hinzuzufügen.

39
00:02:54.430 --> 00:02:56.280
Es ist jetzt eine Eigenschaft dieser Klasse.

40
00:02:56.350 --> 00:03:02.530
Hier können wir also einen Quest-Mark-Offset hinzufügen, der gleich ist, und dann die String-Interpolation verwenden, um auf unser

41
00:03:02.530 --> 00:03:03.590
Off-Token zu zeigen.

42
00:03:03.610 --> 00:03:09.010
Die einzige Anpassung, die wir neben dem Hinzufügen benötigen, ist, dass dies jetzt natürlich keine

43
00:03:09.010 --> 00:03:13.590
Kompilierungszeitkonstante mehr ist, sondern eine Laufzeitkonstante, da dieses Wertschöpfungstoken hier dynamisch ist.

44
00:03:13.840 --> 00:03:20.500
Also müssen wir dies in final ändern. Sie sind L statt const die Frage Gerechtigkeit, wie wir das konkrete

45
00:03:20.500 --> 00:03:26.660
Token tatsächlich in unsere Klasse bringen, weil wir hier Produkte erstellen und dies nun das Token erwartet, aber

46
00:03:26.660 --> 00:03:29.170
das Token ist in allem enthalten.

47
00:03:29.170 --> 00:03:36.100
Wie können wir das Token hier rausbringen? Sie könnten komplexe Lösungen finden, bei denen Sie es tatsächlich schaffen,

48
00:03:36.100 --> 00:03:43.390
das Token außerhalb der Off-Klasse hier im Widget zu platzieren und es dann an alle Ihre Objekte hier und alle

49
00:03:43.390 --> 00:03:47.320
an das Off weiterzugeben Konstruktor, um es dort zu verwenden.

50
00:03:47.500 --> 00:03:49.300
Und das wäre schrecklich.

51
00:03:49.300 --> 00:03:56.950
Zum Glück bietet das Provider-Paket eine einfache Lösung dafür. Anstatt hier den

52
00:03:56.950 --> 00:04:07.350
Anbieter für Änderungsbenachrichtigungen zu verwenden, können Sie eine andere Version verwenden, mit der Sie den Proxy-Anbieter ändern können.

53
00:04:07.360 --> 00:04:09.850
Dies hat keinen Wertekonstruktor.

54
00:04:09.850 --> 00:04:15.820
Stattdessen müssen Sie diesen normalen Konstruktor mit einem Builder verwenden, den ich Ihnen zuvor gezeigt habe und der

55
00:04:15.850 --> 00:04:19.930
wichtig ist, wenn Sie das Provider-Paket verwenden, während vier oder höher.

56
00:04:19.930 --> 00:04:27.220
Wenn Sie also keine Version kostenlos verwenden, wenn Sie vier oder höher verwenden, ist dies kein Builder, aber alle anderen

57
00:04:27.550 --> 00:04:30.160
Aktualisierungen, die ich zeige, funktionieren genauso.

58
00:04:30.250 --> 00:04:33.520
Dies ist jedoch ein Update anstelle eines Builders.

59
00:04:33.520 --> 00:04:39.980
Zuvor war es anstelle von Builder mit Version 4 erstellt, was für die normale Änderung zutraf.

60
00:04:39.990 --> 00:04:46.540
Benachrichtigen Sie unseren Anbieter über eine Änderung. Benachrichtigen Sie den Proxy-Anbieter, dass das Update anstelle von Builder erfolgt.

61
00:04:46.540 --> 00:04:52.060
Erstellen Sie also anstelle des Builders für die normale Änderung die Benachrichtigung des Anbieters anstelle des Builders für

62
00:04:52.060 --> 00:04:54.330
die Änderung, benachrichtigen Sie den Proxy-Anbieter.

63
00:04:54.490 --> 00:04:59.200
Und wenn Sie Wörter frei verwenden, können Sie natürlich einfach den Code verwenden, den ich in den Videos zeige.

64
00:04:59.200 --> 00:04:59.860
Das ist richtig.

65
00:04:59.890 --> 00:05:05.620
Wie auch immer, und es zwingt Sie aus gutem Grund in den Builder, weil dieser Builder Ihnen tatsächlich einen

66
00:05:05.620 --> 00:05:11.320
Kontext und dann einen dynamischen Wert gibt und dieser dynamische Wert der interessante Teil hier ist. Der Kontext ist

67
00:05:12.600 --> 00:05:18.330
einfach ein neuer Kontext, den er für Sie generiert Verwenden Sie hier auch den Unterstrich, aber wir können ihm

68
00:05:18.330 --> 00:05:20.220
auch nur einen Namen geben.

69
00:05:20.260 --> 00:05:25.840
Der dynamische Teil ist der interessante Teil, da die Änderungsbenachrichtigung, dass der Proxy-Anbieter tatsächlich eine generische Klasse

70
00:05:25.840 --> 00:05:31.060
ist, und Sie in den spitzen Klammern hier eine zusätzliche Information geben sollten, die für eine

71
00:05:31.060 --> 00:05:32.540
ordnungsgemäße Funktion erforderlich ist.

72
00:05:32.620 --> 00:05:40.510
Auf diese Weise können Sie einen Anbieter einrichten, der selbst von dem zuvor definierten Nummernanbieter

73
00:05:40.510 --> 00:05:41.330
abhängt.

74
00:05:41.380 --> 00:05:46.060
Sie müssen also sicherstellen, dass Ihr Off-Provider der erste in der Liste ist, und dann

75
00:05:46.060 --> 00:05:48.330
können sich die anderen Provider darauf verlassen.

76
00:05:48.340 --> 00:05:55.210
Hier können Sie also eine Off-is-Off-Klasse übergeben. Das Provider-Paket wird nun im Grunde genommen einen

77
00:05:55.210 --> 00:06:02.860
Blick auf Ihren Provider-Baum werfen und sehen, ob es einen Provider findet, der ein Off-Objekt vor dem Provider

78
00:06:02.890 --> 00:06:10.210
bereitstellt, den es anbietet tut hier und dann wird es das Objekt abnehmen und dir das hier

79
00:06:10.210 --> 00:06:10.990
geben.

80
00:06:10.990 --> 00:06:19.600
Jetzt erhält der Builder hier tatsächlich das Objekt und bei jeder Änderung wird auch dieser Provider

81
00:06:19.600 --> 00:06:21.550
hier neu erstellt.

82
00:06:21.550 --> 00:06:26.710
Nur dieses eine nicht das gesamte Widget, nicht die anderen Anbieter, sondern dieser Anbieter wird neu aufgebaut.

83
00:06:26.710 --> 00:06:32.440
Wenn sich dies ändert, weil dieses Jahr das Objekt deaktiviert ist, ist dies nun eine Abhängigkeit dieses Anbieters.

84
00:06:32.440 --> 00:06:34.970
Es ist also sinnvoll, diesen Anbieter neu zu erstellen.

85
00:06:35.020 --> 00:06:43.720
Daher wird hier ein neues Produktobjekt erstellt, wenn Änderungen deaktiviert sind. Sie müssen hier kein zweites Argument

86
00:06:43.990 --> 00:06:44.740
angeben.

87
00:06:44.740 --> 00:06:49.740
Die erste ist die Klasse, von der der Datentyp abhängt.

88
00:06:49.750 --> 00:06:56.140
Die zweite ist die Art der Daten, die Sie hier bereitstellen, und dies ist natürlich die Privatsphäre der

89
00:06:56.140 --> 00:06:57.970
Produkte für den Wertekonstruktor.

90
00:06:57.970 --> 00:07:03.600
Das mussten wir nicht tun, aber für diesen Proxy-Anbieter müssen Sie das tun.

91
00:07:03.790 --> 00:07:09.280
Jetzt gibt Ihnen der Builder hier auch ein drittes Argument und das ist Ihr vorheriger Zustand.

92
00:07:09.280 --> 00:07:16.600
Ihre alten Produkte widersprechen also sozusagen dem vorherigen Produkt, und das ist natürlich nützlich, um unseren

93
00:07:17.020 --> 00:07:18.230
Zustand aufrechtzuerhalten.

94
00:07:18.250 --> 00:07:25.380
Hier geben wir also ein neues Objekt vom Typ Produkte zurück und geben hier einen Off-Dot-Token ein.

95
00:07:25.390 --> 00:07:26.260
Jetzt müssen wir token.

96
00:07:26.260 --> 00:07:32.320
Aber jetzt müssen wir sicherstellen, dass wir beim Wiederherstellen und Erstellen einer neuen Produktinstanz natürlich nicht

97
00:07:32.320 --> 00:07:39.160
alle Daten verlieren, die wir zuvor dort hatten, denn bei Produkten dürfen Sie nicht vergessen, dass Sie eine

98
00:07:39.160 --> 00:07:41.150
Liste Ihrer Produkte hatten .

99
00:07:41.150 --> 00:07:43.570
Das war der Schlüssel, den wir dort verwaltet haben.

100
00:07:43.600 --> 00:07:45.460
Die Liste unserer Artikel.

101
00:07:45.460 --> 00:07:49.060
Jetzt wäre es natürlich ziemlich schlimm, wenn wir diese Liste verlieren würden.

102
00:07:49.060 --> 00:07:59.290
Eigentlich wollen wir hier also sicherstellen, dass wir diese Elemente sowie einen zweiten Wert initialisieren und jetzt wieder in der Haupt-Dart-Datei,

103
00:07:59.290 --> 00:08:05.190
in der Sie die vorherigen Elemente der vorherigen Produkte hier

104
00:08:08.110 --> 00:08:15.940
analysieren, bedenken Sie dies bitte Zuerst wird geladen, wir haben nicht, dass wir keine Artikel haben

105
00:08:15.940 --> 00:08:22.020
und vorherige Produkte sind null, wenn dies zum ersten Mal initiiert wird.

106
00:08:22.060 --> 00:08:27.120
Deshalb wollen wir prüfen, ob sein Produkt gesetzt ist und ob es gleich null ist.

107
00:08:27.130 --> 00:08:32.710
Wenn es sich also nicht um eine Möglichkeit handelt, möchte ich es tatsächlich mit einem

108
00:08:32.710 --> 00:08:38.900
leeren Array initialisieren. Nur wenn es nicht gleich null ist, kann ich hier auf frühere Produktelemente zugreifen.

109
00:08:38.910 --> 00:08:44.250
Dadurch wird nun das Produktobjekt mit meinem Token erstellt und dann entweder mit einer leeren Produktliste

110
00:08:44.400 --> 00:08:50.820
oder mit den vorherigen Elementen, die wir gekannt haben, falls Sie mehr als eine Abhängigkeit haben, haben wir hier nur

111
00:08:50.820 --> 00:08:51.500
eine.

112
00:08:51.510 --> 00:08:56.520
Wenn Sie jedoch mehr als eine hatten, gibt es andere Formulierungen dieses Konstruktors, die Sie

113
00:08:56.520 --> 00:09:02.580
geändert haben. Benachrichtigen Sie den Proxy-Anbieter, um bis zu sechs für bis zu sechs Abhängigkeiten freizugeben, die Sie angeben können.

114
00:09:02.580 --> 00:09:07.950
Aber hier haben wir nur eine Abhängigkeit, so dass wir die Basisversion mit Dad verwenden

115
00:09:07.950 --> 00:09:16.160
können, wenn wir diese speichern und eine Aktualisierung durchführen. Wir sollten uns jetzt anmelden und dieses Token hoffentlich verwenden können, wenn wir unsere Produkte abrufen.

116
00:09:16.170 --> 00:09:23.400
Geben wir also diesen Login-Take in diesen Bildschirm ein und wir laden unsere Produkte erfolgreich und sehen

117
00:09:23.400 --> 00:09:25.110
die Produkte hier wieder.

118
00:09:25.110 --> 00:09:30.210
Das ist ziemlich gut mit der Anzeige, mit der wir das Token verwenden können. Natürlich testen wir das

119
00:09:30.210 --> 00:09:37.080
nicht zum Abrufen der Produkte, aber das ist ein wichtiger erster Schritt. Sie können das Token auf jeden Fall zu allen anderen HDP-Anfragen hinzufügen,

120
00:09:37.080 --> 00:09:43.950
die von Anfang an gestellt werden, und wenn Sie dies tun Wir sind wirklich sehr daran interessiert, alle anderen Anbieter zu reparieren, bei

121
00:09:43.950 --> 00:09:45.720
denen wir ebenfalls Token benötigen.

122
00:09:45.760 --> 00:09:47.330
Nächstes Video machen wir das zusammen.
