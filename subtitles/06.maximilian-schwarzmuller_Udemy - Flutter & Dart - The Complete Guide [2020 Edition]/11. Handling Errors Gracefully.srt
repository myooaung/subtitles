1
00:00:02,200 --> 00:00:06,570
Also haben wir einen Lade-Spinner-Tod hinzugefügt, der für unsere Benutzer nett und sicherlich hilfreich ist.

2
00:00:06,640 --> 00:00:13,540
Aber was ist, wenn etwas schief geht, wenn etwas schief geht, zum Beispiel beim Hinzufügen eines Produkts, dann

3
00:00:13,540 --> 00:00:15,480
tun wir derzeit nichts.

4
00:00:15,640 --> 00:00:19,200
Hier in dieser Anwendung gibt es wenig, was ehrlich gesagt schief gehen könnte.

5
00:00:19,210 --> 00:00:23,030
Ich habe eine gute Internetverbindung. Ihre Firebase ist ein stabiler Dienst.

6
00:00:23,050 --> 00:00:26,740
Fehler sind unwahrscheinlich, aber in Wirklichkeit werden natürlich Fehler auftreten.

7
00:00:26,860 --> 00:00:29,350
Ihre Benutzer verlieren die Internetverbindung.

8
00:00:29,350 --> 00:00:33,930
Auf dem Server liegt ein Fehler vor oder es werden irgendwie ungültige Daten gesendet.

9
00:00:34,030 --> 00:00:39,430
Und hier kann ich einen Fehler simulieren, indem ich den Punkt J entferne, der gesendet wird. Die End-Firebase wird dies nicht mögen und

10
00:00:39,430 --> 00:00:40,570
tatsächlich einen Fehler auslösen.

11
00:00:40,570 --> 00:00:49,720
Lassen Sie mich dies jetzt demonstrieren, um Produkte zu verwalten, und ich versuche, einem neuen Produkt ein Buch für

12
00:00:49,750 --> 00:00:50,940
zwölfundneunzig hinzuzufügen.

13
00:00:50,950 --> 00:00:54,850
Dies ist ein großartiges Buch.

14
00:00:55,100 --> 00:01:03,240
Wenn ich jetzt versuchen würde, dies mit meinem Dummy-Bild hier hinzuzufügen, würde ich sagen, wenn wir einen Spinner sehen und jetzt wird

15
00:01:03,270 --> 00:01:09,320
der Spinner nicht einfach verschwinden, denn wenn wir zurückgehen, sehen wir, dass es einen Fehler gibt.

16
00:01:09,360 --> 00:01:15,360
Es gibt einen Fehler, der von Firebase ausgelöst oder von Firebase zurückgegeben wird, und dass Dan letztendlich vom H

17
00:01:15,390 --> 00:01:22,320
zu dem von uns verwendeten p-Paket abgefangen und als Fehler in unserer App und dem Fehler, den wir hier erhalten, ausgelöst wird.

18
00:01:22,320 --> 00:01:26,690
Am Ende gibt uns eine Fehlermeldung, die sehr hilfreich ist.

19
00:01:26,700 --> 00:01:29,370
Welches ist eigentlich schön und würde uns helfen, diesen Fehler zu beheben.

20
00:01:29,370 --> 00:01:36,120
Da dies natürlich ein Fehler ist, den ich als Entwickler eingeführt habe, sehen wir, dass es sich bei Dart um eine Ausnahme vom Zeitformat

21
00:01:36,120 --> 00:01:36,540
handelt.

22
00:01:36,540 --> 00:01:41,910
Es gibt verschiedene ausnahmebasierte Klassen, die in Dart integriert sind und Fehler beschreiben, die

23
00:01:41,910 --> 00:01:42,740
auftreten können.

24
00:01:42,840 --> 00:01:45,340
Und hier haben wir einen solchen Fehler.

25
00:01:45,420 --> 00:01:47,880
Diese Anfrage hier ist also nicht das Ende.

26
00:01:47,880 --> 00:01:54,210
Wenn Sie jetzt einen Fehler auslösen, sprudelt er und wird zu einem echten Fehler in unserer App, der hier in die Debug-Konsole

27
00:01:54,210 --> 00:01:58,660
geworfen wird und unsere App zum Absturz bringt, weil wir diesen Fehler nicht behandeln.

28
00:01:58,830 --> 00:02:05,850
Wir sollten solche Fehler nicht nur behandeln, weil die App eine Weile abgestürzt ist, sondern auch, weil dies natürlich

29
00:02:05,850 --> 00:02:11,370
keine großartige Benutzererfahrung ist, die zeigt, dass der Spinner dem Benutzer nichts sagt, was nicht

30
00:02:11,370 --> 00:02:12,870
so großartig ist.

31
00:02:12,930 --> 00:02:15,600
Wie können Sie mit Fehlern umgehen?

32
00:02:15,630 --> 00:02:21,810
Nun, wir haben dann hier in unserer Zukunft die Funktion für den Code definiert, die ausgeführt werden soll, wenn

33
00:02:21,810 --> 00:02:23,320
die Zukunft erfolgreich ist.

34
00:02:23,370 --> 00:02:29,970
In ähnlicher Weise können Sie jetzt auch eine Methode definieren, die ausgeführt werden soll, wenn dies fehlschlägt, und diese anschließend einfach

35
00:02:30,090 --> 00:02:30,670
hinzufügen.

36
00:02:30,690 --> 00:02:32,580
Dann können Sie hier nach hinzufügen.

37
00:02:32,600 --> 00:02:38,160
Dann, weil dann selbst eine neue Zukunft zurückgibt und daher, was auch immer ich nach dem Tod nenne.

38
00:02:38,190 --> 00:02:43,800
Mit einem Punkt auf dem Ergebnis von dann wird also effektiv die Zukunft aufgerufen, die bis dahin zurückgegeben wird.

39
00:02:43,800 --> 00:02:44,100
Recht.

40
00:02:44,100 --> 00:02:47,800
Also rufe ich dies für dieses zukünftige Objekt auf und kehre dann zurück.

41
00:02:47,850 --> 00:02:54,750
Ich könnte hier vor ihnen auch catch error aufrufen, und dann würde ich auch Ebenen durch diese Post-Methode werfen lassen, die

42
00:02:54,870 --> 00:02:58,860
die Methode ist, die D diesen Fehler hier am Ende ergibt.

43
00:02:58,860 --> 00:03:06,590
Wenn ich hier jedoch catch error aufrufe, bevor ich meinen Venn-Block habe, wird auch die Logik in diesem then-Block

44
00:03:06,620 --> 00:03:07,210
ausgeführt.

45
00:03:07,320 --> 00:03:11,610
Sobald meine Logik und mein Fangfehler fertig sind, will ich das nicht mehr.

46
00:03:11,610 --> 00:03:19,890
Stattdessen kann ich jetzt durch Hinzufügen eines Catch-Fehlers eine Funktion definieren, die aufgerufen wird, wenn ein Fehler auftritt,

47
00:03:19,890 --> 00:03:22,820
und zwar entweder hier oder hier.

48
00:03:23,010 --> 00:03:28,620
Und wenn hier beim Setzen der Post-Anfrage ein Fehler ausgegeben wird, wird der Blog übersprungen und

49
00:03:28,710 --> 00:03:31,930
wir erreichen diese Funktion hier sofort bei einem Fangfehler.

50
00:03:32,070 --> 00:03:37,590
Hier definieren Sie also eine Funktion, die die Fehlerdaten empfängt, das eingefrorene Fehlerobjekt, das

51
00:03:37,590 --> 00:03:44,100
den Fehler beschreibt, der hier in diesem Fall, wie bereits erwähnt, ein Objekt ist, das auf der

52
00:03:44,100 --> 00:03:50,430
eingebauten Formatausnahmeklasse basiert und den Fehler enthält Nachricht, die hier automatisch gedruckt wird und wir können

53
00:03:50,430 --> 00:03:54,960
jetzt mit diesem Fehler interagieren, zum Beispiel mit Druckfehler hier.

54
00:03:54,960 --> 00:03:57,180
Ich kann diese Fehlermeldung auch ausdrucken.

55
00:03:57,420 --> 00:04:00,090
Und jetzt könnten wir hier alle möglichen Dinge mit diesem Fehler machen.

56
00:04:00,120 --> 00:04:04,150
Wenn Sie das Kernstück tun wollen, ist, dass unser Apple jetzt nicht mehr abstürzt.

57
00:04:04,200 --> 00:04:09,020
Denn damit beschäftigen wir uns bereits mit D. R. Also sagen wir da, dass es in Ordnung ist.

58
00:04:09,060 --> 00:04:09,890
Ich habe dich gedeckt.

59
00:04:09,900 --> 00:04:15,900
Ich mache etwas gegen diesen Fehler und das ist bereits eine Verbesserung, da die App technisch

60
00:04:16,080 --> 00:04:17,800
keinen Müll mehr hat.

61
00:04:18,000 --> 00:04:23,730
Wie bereits erwähnt, wird der Code hier im Venn-Block übersprungen, wenn der Fehler anstelle unserer dortigen Post-Methode

62
00:04:23,730 --> 00:04:26,790
ausgelöst wird, was für diesen Fehler der Fall ist.

63
00:04:26,790 --> 00:04:30,640
Ich habe hier hinzugefügt und muss es gerade machen, um Fehler zu fangen.

64
00:04:30,720 --> 00:04:34,150
Jetzt könnten wir hier natürlich alle Arten von Fehlerbehandlungen durchführen.

65
00:04:34,150 --> 00:04:40,260
Senden Sie dies auch an unseren benutzerdefinierten Analyseserver, um diese Fehlermeldung dort zu speichern und über diesen Fehler in

66
00:04:40,260 --> 00:04:42,330
einer unserer Apps benachrichtigt zu werden.

67
00:04:42,510 --> 00:04:47,320
Oder protokollieren Sie es einfach hier, was nicht allzu nützlich ist, da der Benutzer dies nicht sieht.

68
00:04:47,340 --> 00:04:51,390
Was wir hier also tun möchten, ist, hier überhaupt keinen Fangfehler zu verwenden.

69
00:04:51,810 --> 00:04:58,430
Oder verwenden Sie einfach das vollständige Schlüsselwort, das in dart integriert ist, um den Fehler auszulösen, den wir hier erneut erhalten.

70
00:04:58,500 --> 00:05:04,820
Also her nimmt ein Fehlerobjekt und wir bekommen hier ein Fehlerobjekt und es wird jetzt einen neuen Fehler erzeugen.

71
00:05:05,010 --> 00:05:07,680
Wir behandeln den Fehler hier und jetzt erstelle ich einen neuen.

72
00:05:07,770 --> 00:05:12,600
Ich mache das nur, weil ich hier einen Fangfehler habe und in der Lage sein

73
00:05:12,840 --> 00:05:18,510
möchte, eine Fehlerklausel an einer anderen Stelle hinzuzufügen und niemals abzufangen, die ich als Bildschirm für hinzugefügte Produkte ersetze.

74
00:05:18,510 --> 00:05:21,900
Das ist natürlich der Bildschirm, auf dem wir diese Anfrage gesendet haben.

75
00:05:21,930 --> 00:05:24,560
Genau hier nennen wir Anzeigenprodukt.

76
00:05:24,660 --> 00:05:30,090
Wir haben einen Erfolgsfall bearbeitet und dort haben wir jetzt das Problem, dass wir keinen Erfolgsfall haben, aber

77
00:05:30,090 --> 00:05:31,620
dass wir einen Fehler haben.

78
00:05:31,620 --> 00:05:37,470
Was wir hier also tun können, ist, dass wir auch hier einen Fangfehler hinzufügen können, und jetzt wird er erreicht, weil

79
00:05:37,470 --> 00:05:39,330
ich meinen Fehler hier wieder wirf.

80
00:05:39,330 --> 00:05:44,460
Wenn wir hier den Fangfehler ganz weglassen würden, würden wir auch hier den Fangfehler erreichen,

81
00:05:44,820 --> 00:05:46,640
sodass der Fangfehler erreicht wird.

82
00:05:46,680 --> 00:05:51,750
Wenn ein Fehler vorliegt, aber nur der erste Fangfehler in der Zeile ausgeführt wird, wird

83
00:05:51,750 --> 00:05:52,850
der Fehler behandelt.

84
00:05:52,860 --> 00:05:56,220
Hier bekommen wir nun auch das Fehlerobjekt.

85
00:05:56,340 --> 00:05:58,830
Und hier können wir auch machen, was wir wollen.

86
00:05:59,320 --> 00:06:04,630
Das Tolle ist natürlich, dass wir jetzt im Wald sind, also können wir hier jetzt etwas tun, was der Benutzer

87
00:06:04,650 --> 00:06:07,350
sieht, um den Benutzer über den Fehler zu informieren.

88
00:06:07,360 --> 00:06:15,480
Hier könnten wir also einen Dialog mit Showdialog senden oder zeigen und Showdialog nimmt einen Kontext an.

89
00:06:15,670 --> 00:06:22,450
Und dort können wir die Kontexteigenschaft verwenden, die überall in Ihrem Statusobjekt oder in Ihrer Statusklasse verfügbar ist, und

90
00:06:22,450 --> 00:06:25,210
wir sind hier natürlich in der Statusklasse.

91
00:06:25,510 --> 00:06:31,430
Neben dem Kontext benötigt der Cho-Dialog auch einen Builder, mit dem dieser Dialog erstellt wird.

92
00:06:31,450 --> 00:06:35,380
Es nimmt eine Funktion an, die durch Flattern einen eigenen Kontext erzeugt.

93
00:06:35,380 --> 00:06:41,890
Und dann geben wir hier normalerweise einen Warnungsdialog zurück, mit dem wir ein solches Dialogfeld konfigurieren können, das

94
00:06:41,890 --> 00:06:47,030
dem Benutzer in diesem Dialogfeld angezeigt wird. Hier werde ich einen Titel festlegen.

95
00:06:47,080 --> 00:06:49,000
Ein Fehler ist aufgetreten.

96
00:06:49,000 --> 00:06:53,890
Klingt nach einem passenden Titel Lipstadt sollte ein Text-Widget sein, aber nicht nur einfacher Text.

97
00:06:56,140 --> 00:07:00,410
Und neben einem Titel möchten wir auch hier und da einen Inhalt

98
00:07:00,460 --> 00:07:09,310
haben. Ich werde ein Zahlen-Text-Widget auslösen lassen, das besagt, dass etwas schief gelaufen ist. Wenn wir jedoch unseren generischen Text hier haben möchten, können wir den

99
00:07:09,310 --> 00:07:11,110
Fehler auch einfach hier verwenden.

100
00:07:11,260 --> 00:07:19,480
Fehler ist ein Objekt, in dem sich eine Nachricht befindet, und es ist so konfiguriert, dass alle Ausnahmeklassen in der Kunst

101
00:07:19,480 --> 00:07:22,900
so konfiguriert sind, dass sie eine Zwei-Zeichenfolgen-Methode haben.

102
00:07:23,020 --> 00:07:29,200
Das ist eigentlich eine Methode, die jedes Objekt in Dart hat, so dass jedes benutzerdefinierte Objekt auch eine Zeichenfolge

103
00:07:29,380 --> 00:07:37,150
haben muss, da Dart Ihnen im Grunde genommen diese objektbasierte Klasse gibt, von der jede Klasse in Dart unsichtbar abhängt. Die Zeichenfolge ist

104
00:07:37,360 --> 00:07:44,800
also eine Möglichkeit, sich auf jeden Wert in der Kunst zu beziehen, außer auf Die Zeichenfolge für Fehlerobjekte ist speziell so konfiguriert,

105
00:07:45,070 --> 00:07:50,710
dass einfach eine lesbare Fehlermeldung gedruckt wird. Aus diesem Grund sehen Sie hier in unserem Fehlerprotokoll beispielsweise

106
00:07:50,710 --> 00:07:56,500
diese nette Nachricht, die von zwei Zeichenfolgen stammt, die für den Fehler aufgerufen werden, und geben dann

107
00:07:56,500 --> 00:08:02,890
die darin enthaltene Fehlermeldung aus Fall Firebase gab uns jetzt, wir könnten dies drucken, aber oft sind diese Fehlermeldungen

108
00:08:02,890 --> 00:08:08,020
wirklich technisch oder Sie möchten sie Ihren Benutzern nicht einmal zeigen, weil sie möglicherweise vertrauliche

109
00:08:08,020 --> 00:08:09,060
Informationen enthalten.

110
00:08:09,070 --> 00:08:12,940
Also hier werde ich mit etwas gehen, das für den Moment schief gelaufen ist.

111
00:08:12,940 --> 00:08:18,940
Später im Abschnitt zur Authentifizierung sehen wir eine detailliertere Fehlerbehandlung in Aktion.

112
00:08:19,030 --> 00:08:21,070
Damit baue ich diesen Dialog auf.

113
00:08:21,100 --> 00:08:23,490
Jetzt möchte ich auch eine Aktion hinzufügen, um sie zu schließen.

114
00:08:23,500 --> 00:08:30,340
Dazu füge ich hier eine Klappenschaltfläche hinzu, in der das Kind ein Text-Widget ist, in dem ich beim Drücken OK und höher sage.

115
00:08:30,340 --> 00:08:38,350
Ich möchte diesen Dialog nur schließen und wir können einen Dialog schließen, indem wir einfach den Navigator von Context Pop

116
00:08:38,630 --> 00:08:39,180
aufrufen.

117
00:08:39,220 --> 00:08:47,230
Wie Sie lernen, schließen wir Überlagerungen jeglicher Art und Dialoge sind solche Überlagerungen mit Pop und genau wie das Entfernen des

118
00:08:47,230 --> 00:08:49,150
aktuellen Bildschirms vom Stapel.

119
00:08:49,150 --> 00:08:54,990
Dadurch wird die aktuelle Überlagerung entfernt, die sich sozusagen auf demselben Stapel befindet, und hier können wir tatsächlich den Kontext

120
00:08:54,990 --> 00:08:56,590
verwenden, den wir hier erhalten.

121
00:08:56,610 --> 00:09:01,920
S. T. X Wenn ich also schließe, wurde mein Dialog angezeigt, wenn eine Fehlermeldung angezeigt wird.

122
00:09:01,920 --> 00:09:06,810
Das Fehlende ist jedoch, dass ich tatsächlich den Ladespinner entfernen und vielleicht auch die Seite

123
00:09:06,810 --> 00:09:09,230
schließen möchte, wenn wir fertig sind.

124
00:09:09,240 --> 00:09:14,640
Egal, ob wir einen Fehler erhalten haben oder nicht, denn selbst mit einem Fehler laden wir herunter und ich möchte

125
00:09:14,640 --> 00:09:16,060
dem Benutzer die Kontrolle zurückgeben.

126
00:09:16,080 --> 00:09:18,710
Ich möchte den Benutzer nur über diesen Fehler informieren.

127
00:09:18,840 --> 00:09:25,320
Nachdem wir den Benutzer wissen lassen, dass das Teil hier fertig ist, möchten wir jetzt auch sicherstellen, dass wir dann erreichen und

128
00:09:25,320 --> 00:09:26,230
das Gute ist.

129
00:09:26,260 --> 00:09:28,350
Das habe ich schon früh erwähnt.

130
00:09:28,350 --> 00:09:35,380
Catch Error fängt den Fehler ab, aber dann sehen Sie, dass Catch Error tatsächlich eine neue Zukunft zurückgibt.

131
00:09:35,430 --> 00:09:42,870
Also wird nach einem Catch-Fehler auch ausgeführt, weil wir dies für eine Zukunft aufrufen, die automatisch durch Catch-Fehler

132
00:09:42,870 --> 00:09:47,010
erstellt wird, und daher sind wir hier eigentlich in Ordnung.

133
00:09:47,010 --> 00:09:53,700
Wir werden diesen Code dort tatsächlich automatisch auslösen, da er nach einem Catch-Fehler ausgelöst

134
00:09:53,940 --> 00:09:57,150
wird, sobald dieser Fehler behandelt wird.

135
00:09:57,150 --> 00:10:05,010
Ich möchte nur warten, bis der Benutzer seine Wahl getroffen hat, und jetzt würden wir sofort auftauchen und diesen Status

136
00:10:05,430 --> 00:10:06,770
hier tatsächlich ändern.

137
00:10:06,780 --> 00:10:11,700
Stattdessen möchte ich warten, bis der Benutzer den Dialog beantwortet hat, und das Gute ist, dass der Dialog

138
00:10:11,700 --> 00:10:13,930
alle eine Zukunft von der Stange zurückgibt.

139
00:10:13,950 --> 00:10:16,130
So konfigurieren Sie stattdessen Schmeichler.

140
00:10:16,170 --> 00:10:21,990
Hier können wir also tatsächlich das Ergebnis des Show-Dialogs zurückgeben, das genau diese Zukunft ist, und diese Zukunft wird mit

141
00:10:21,990 --> 00:10:26,130
dem Wert aufgelöst, den wir hier ausgewählt haben, um den Dialog richtig zu platzieren.

142
00:10:26,160 --> 00:10:28,550
Das ist alles, was wir früher im Kurs gemacht haben.

143
00:10:28,590 --> 00:10:31,600
Also nur sobald der Benutzer auf die Schaltfläche klickt und diese platzt.

144
00:10:31,680 --> 00:10:33,390
Diese Zukunft wird gelöst.

145
00:10:33,480 --> 00:10:38,630
Da ich hier in dieser Funktion eine Zukunft zurückgegeben habe, wird Papa die Zukunft sein, die durch einen

146
00:10:38,630 --> 00:10:45,000
Fangfehler zurückgegeben wird, und daher wird der Block erst ausgeführt, wenn dieser Dialog geschlossen wurde, sobald diese Schaltfläche gedrückt wurde und wir

147
00:10:45,000 --> 00:10:46,410
den Dialog geöffnet haben.

148
00:10:47,190 --> 00:10:53,310
Damit haben wir jetzt eine Fehlerbehandlungslogik, die es uns ermöglichen sollte, diesen Fehler erfolgreich zu

149
00:10:53,310 --> 00:10:54,060
behandeln.

150
00:10:54,060 --> 00:10:54,540
Es ist nicht vorbei.

151
00:10:54,540 --> 00:11:04,050
Versuchen Sie dies noch einmal mit einigen Dummy-Daten hier. Vielleicht ist dies ein Test und ich füge meine unreifen hinzu.

152
00:11:04,270 --> 00:11:05,640
Jetzt siehst du diesen Spinner.

153
00:11:05,650 --> 00:11:07,990
Jetzt bekommen wir diese Überlagerung dieses Dialogs.

154
00:11:07,990 --> 00:11:11,750
Aber wenn ich OK drücke, schließen wir diese Seite tatsächlich noch.

155
00:11:11,870 --> 00:11:17,440
Und hier sehen wir nur diese kürzere Ausgabe anstelle dieser abstürzenden Fehlermeldung, weil unsere App jetzt nicht abgestürzt

156
00:11:17,440 --> 00:11:22,810
ist und diese Ausgabe hier nur gedruckt wird, weil ich den Fehler hier drucke und die

157
00:11:22,810 --> 00:11:24,850
Fehlermeldung druckt, die zufällig diese ist.

158
00:11:25,660 --> 00:11:29,950
So funktioniert das und wie wir mit Fehlern in Dart umgehen können.

159
00:11:29,950 --> 00:11:35,050
Ein sehr nützliches Tool, denn das hilft uns sicherzustellen, dass wir eine angenehme Benutzererfahrung

160
00:11:35,640 --> 00:11:39,420
bieten und damit bereits bei DOT wieder im Produktstart sind.

161
00:11:39,460 --> 00:11:46,570
Jason hier, weil ich hier natürlich sicherstellen möchte, dass wir wieder eine erfolgreiche Anfrage haben.

162
00:11:46,570 --> 00:11:52,600
Im Off-Bereich werde ich Ihnen übrigens auch einen anderen Weg oder eine Möglichkeit zeigen, Ihre eigenen

163
00:11:52,600 --> 00:11:58,270
benutzerdefinierten Ausnahmen auszulösen, falls Sie keinen technischen Fehler haben, falls Firebase keinen Fehler mit Fehlerstatuscode

164
00:11:58,270 --> 00:12:02,620
und zurückmeldet Sie sind immer noch nicht zufrieden mit dem Ergebnis.

165
00:12:02,650 --> 00:12:04,950
Im Off-Bereich habe ich ein gutes Beispiel dafür.

166
00:12:04,960 --> 00:12:06,840
Also werde ich dort auch darauf zurückkommen.

167
00:12:06,910 --> 00:12:09,190
Im Moment haben wir alle Fehlerbehandlungen, die wir brauchen.
