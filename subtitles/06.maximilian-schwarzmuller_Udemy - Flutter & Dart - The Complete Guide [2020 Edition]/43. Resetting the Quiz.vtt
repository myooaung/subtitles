WEBVTT
1
00:00:02.160 --> 00:00:07.330
Now to finish this up and make sure we can restart the quiz from inside that result screen,

2
00:00:07.500 --> 00:00:12.930
let's make sure that in the result screen, we also have a button we can press to reset our question progress

3
00:00:13.860 --> 00:00:16.340
and for that, we need to add a button below our text.

4
00:00:16.380 --> 00:00:17.240
How do we do that?

5
00:00:17.250 --> 00:00:23.040
How do we add things below other things, widgets below other widgets?

6
00:00:23.050 --> 00:00:27.460
Well, we need a column. So let's wrap our text in our column

7
00:00:27.460 --> 00:00:32.830
and previously I did this manually but actually with the Flutter extension installed in the IDE, we

8
00:00:32.830 --> 00:00:40.310
can do some automatic refactoring. For this, use the refactoring shortcut which can find in your key bindings

9
00:00:40.310 --> 00:00:48.340
if you're not sure which shortcut that was and position your cursor, so click on the text here and

10
00:00:48.340 --> 00:00:52.090
then press that shortcut and you should now get a couple of options here

11
00:00:52.090 --> 00:00:57.010
and normally, one of them is wrapped with column. If you don't have that, you can at least wrap it with a

12
00:00:57.010 --> 00:00:59.020
new widget and manually create a column.

13
00:00:59.680 --> 00:01:04.840
I do have it here however, so I will press enter and now we automatically have this wrapped in a column

14
00:01:04.840 --> 00:01:05.380
and text is

15
00:01:05.380 --> 00:01:13.180
now already in the children array here. If we save that, now we see the centering is lost,

16
00:01:13.180 --> 00:01:19.090
that is the default behavior because the column by default takes all the available height of the viewport,

17
00:01:19.090 --> 00:01:21.940
so of the screen and for the moment we'll ignore that,

18
00:01:21.940 --> 00:01:27.100
we'll dive deeper into the depths of columns and rows and layouting in a separate section,

19
00:01:27.100 --> 00:01:33.810
so for now let's live with that and let's instead focus on adding an extra button below the text.

20
00:01:33.970 --> 00:01:37.750
We could add another RaisedButton here but I will add a FlatButton,

21
00:01:37.960 --> 00:01:43.490
FlatButton is basically a button without a background color, other than that, it's a normal button.

22
00:01:43.750 --> 00:01:47.520
It needs a child which is basically the content displayed on the button

23
00:01:47.590 --> 00:01:48.940
and here, a text will do

24
00:01:48.970 --> 00:01:54.090
and I will say restart quiz and we also, just like on the RaisedButton,

25
00:01:54.110 --> 00:02:00.550
need an onPressed handler. Now you know that onPressed needs a function reference, the address of a function

26
00:02:02.020 --> 00:02:06.940
and restarting actually is some logic that probably has to be done in the main.dart file

27
00:02:06.940 --> 00:02:12.420
because that is where we manage our current question index and the total score and both needs to be

28
00:02:12.430 --> 00:02:15.430
reset to zero in order to restart.

29
00:02:15.460 --> 00:02:22.360
So in the main.dart file in the MyAppState class, we can add a new method, reset quiz or whatever you

30
00:02:22.360 --> 00:02:23.480
want to call it

31
00:02:23.530 --> 00:02:31.210
and the goal here is to set both question index as well as total score back to zero because if we do

32
00:02:31.240 --> 00:02:39.900
reset that to zero, especially when we reset the question index, when we do that inside of set state which

33
00:02:39.900 --> 00:02:41.340
we of course have to do,

34
00:02:41.370 --> 00:02:47.280
so inside of the function which we pass to set state, if we do that, then you know that the build method

35
00:02:47.580 --> 00:02:55.950
of this MyAppState class will be re-triggered, it will rebuild that tree and therefore also re-evaluate

36
00:02:55.980 --> 00:02:57.960
that condition and find out that

37
00:02:57.960 --> 00:03:04.620
now our question index is smaller than our question length again and hence not render the result anymore

38
00:03:04.740 --> 00:03:05.900
but the quiz and

39
00:03:06.010 --> 00:03:08.140
that's exactly what we want.

40
00:03:08.160 --> 00:03:10.980
So now we have a reset function that should do the trick,

41
00:03:10.980 --> 00:03:14.420
well we need it here in main.dart, in our MyAppState class

42
00:03:14.430 --> 00:03:20.250
but we want to trigger it from inside the result widget. However that is something we did before as

43
00:03:20.280 --> 00:03:20.920
well,

44
00:03:20.940 --> 00:03:28.500
we simply need to pass a pointer to that function, to the result widget. So I pass reset quiz without

45
00:03:28.500 --> 00:03:34.100
parentheses to the result widget and in the result widget, we now need to accept this.

46
00:03:34.150 --> 00:03:41.730
So I'll add another property, a function which is my reset handler or whatever you want to call it

47
00:03:42.030 --> 00:03:45.450
and I will accept this as a second argument,

48
00:03:45.540 --> 00:03:51.480
so here whatever I receive as a second argument is now stored in reset handler and that is now what

49
00:03:51.480 --> 00:03:53.430
I bind to onPressed.

50
00:03:53.430 --> 00:04:01.600
So here, we can bind reset handler and with that if we now save this, we see restart quiz,

51
00:04:01.610 --> 00:04:11.620
if I press that, indeed we restart. Now to make this stand out a little bit more, we can add some color,

52
00:04:11.620 --> 00:04:18.320
some text color here to the FlatButton and maybe use blue here, so that we can see that button a

53
00:04:18.320 --> 00:04:19.520
bit better,

54
00:04:19.520 --> 00:04:24.410
so now if I press that, we can dive in again. This is all looking good,

55
00:04:24.410 --> 00:04:26.030
we can now reset this.

56
00:04:26.060 --> 00:04:32.330
I won't argue, the user interface itself is not the most beautiful one I've ever seen but we'll learn

57
00:04:32.330 --> 00:04:38.870
more about building user interfaces, styling your applications and also layouting, so that we can also

58
00:04:38.870 --> 00:04:44.390
center vertically when we're using a column, something we lost for now. We'll dive into all that later

59
00:04:44.390 --> 00:04:46.620
throughout the course. For the moment,

60
00:04:46.760 --> 00:04:51.530
we had an extensive look at all the core basics you need to know about Flutter.
