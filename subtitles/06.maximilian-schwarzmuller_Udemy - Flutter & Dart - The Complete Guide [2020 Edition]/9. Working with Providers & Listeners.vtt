WEBVTT
1
00:00:02.440 --> 00:00:10.570
Wenn Sie nach einem Flatteranbieter suchen, sollten Sie auf dieser Seite hier über den aufgepumpten Tod mit dem Anbieterpaket

2
00:00:10.570 --> 00:00:14.500
landen. Dort finden Sie einige Dokumentationen zur Verwendung.

3
00:00:14.540 --> 00:00:18.150
Auf jeden Fall interessant, aber das ist natürlich nicht alles, was ich zusammen mit Ihnen tun werde.

4
00:00:18.160 --> 00:00:24.520
Wir werden es verwenden und dafür müssen Sie es zuerst installieren, indem Sie einfach

5
00:00:24.520 --> 00:00:28.990
den Eintrag hier kopieren und auf der Paketseite tippen.

6
00:00:29.030 --> 00:00:32.690
Kehren Sie nun zu Ihrem Projekt zurück und dann zum Pub-Aspekt Ihrer E-Mail-Datei.

7
00:00:32.720 --> 00:00:38.060
Fügen Sie diese Energie hier unterhalb Ihrer flacheren Abhängigkeit hinzu und stellen Sie sicher, dass die Einrückung korrekt ist,

8
00:00:38.060 --> 00:00:39.590
da die Einrückung wichtig ist.

9
00:00:39.920 --> 00:00:44.900
Sobald Sie dieses Dateiflattern gespeichert haben, sollten Sie diese Pakete automatisch abrufen, wenn dies nicht der

10
00:00:44.900 --> 00:00:45.840
Fall ist.

11
00:00:45.890 --> 00:00:53.630
Sie können flachere Pakete ausführen, indem Sie in Ihrem Terminal in diesen Projektordner navigieren, wobei die Anbieterpakete installiert

12
00:00:53.630 --> 00:00:55.960
sind und natürlich die Fragen.

13
00:00:55.970 --> 00:00:57.550
Wie verwenden wir es nun?

14
00:00:58.550 --> 00:01:04.970
Jetzt muss am Ende ein Anbieter mit Hilfe einer Klasse definiert werden, und Sie erstellen dann einen

15
00:01:04.970 --> 00:01:07.760
neuen Anbieter basierend auf dieser Klassendefinition.

16
00:01:07.770 --> 00:01:14.450
Der Anbieter oder diese Klasse, die Sie erstellen, wird häufig auch als Modell bezeichnet, da Sie alle Arten

17
00:01:14.450 --> 00:01:15.940
von Daten dort modellieren.

18
00:01:15.940 --> 00:01:18.610
Die Daten in Ihrer App, die sich dann ändern.

19
00:01:18.920 --> 00:01:26.480
Jetzt verwende ich hier jedoch bereits den Begriff Modell und verwende ihn hier, um meine Datenklasse und meine Datentypen zu definieren,

20
00:01:26.480 --> 00:01:29.260
die mir hier wie ein Produkt gefallen.

21
00:01:29.360 --> 00:01:35.650
Und Papa ist nicht wirklich etwas, das ich anbieten möchte, weil ein einzelnes Produkt nur ein einzelnes Objekt ist.

22
00:01:35.660 --> 00:01:42.470
Ich verwende das, was ich hier mit der State-Management-Lösung verwalten möchte, eine größere Liste aller meiner

23
00:01:42.470 --> 00:01:45.370
Produkte, nicht nur ein einziges Produkt.

24
00:01:45.380 --> 00:01:50.690
Daher werde ich jetzt hier einen neuen Unterordner erstellen und ihn als Anbieter benennen, um

25
00:01:50.690 --> 00:01:54.700
meine Klassen einzurichten, die diese größeren Definitionen für die Statusverwaltung definieren.

26
00:01:54.710 --> 00:02:01.370
Diese größeren Datendefinitionen für meine App sind sozusagen die Daten, die sich auch im Laufe der Zeit ändern

27
00:02:01.370 --> 00:02:04.650
und die ich hier bei Anbietern widerspiegeln möchte.

28
00:02:04.800 --> 00:02:05.970
Ich werde

29
00:02:08.820 --> 00:02:12.720
eine neue Datei hinzufügen und benennen, dass Produkte Punktpfeil.

30
00:02:12.720 --> 00:02:18.780
Sie können es auch als Produkt-Unterstrich-Anbieter bezeichnen, wenn Sie diese Unterscheidung wirklich deutlich machen möchten.

31
00:02:19.140 --> 00:02:27.430
Jetzt definieren Sie in der Produktpunkt-Dartdatei eine neue Klasse und ich werde diese Klassenprodukte benennen.

32
00:02:27.490 --> 00:02:31.240
Aber jetzt im Jahr haben Sie nicht nur eine Klasse wie diese.

33
00:02:31.300 --> 00:02:37.420
Stattdessen müssen Sie eine Mischung hinzufügen. Ich erwähnte, dass die Mischung zu Beginn des Kurses bereits hinzugefügt wurde. Dies ist

34
00:02:37.420 --> 00:02:44.730
sinnvoll, wenn Sie das Schlüsselwort width hinzufügen. Dann ist der Name der Mischung in einer Mischung ein bisschen so, als würde man niemals eine

35
00:02:44.730 --> 00:02:45.440
Klasse erweitern.

36
00:02:45.520 --> 00:02:51.430
Der Hauptunterschied besteht darin, dass Sie einfach einige Eigenschaften zusammenführen oder einige Methoden

37
00:02:51.430 --> 00:02:58.020
zu Ihrer vorhandenen Klasse hinzufügen, Ihre Klasse jedoch nicht in eine Instanz außerhalb einer Klasse zurückgeben.

38
00:02:58.030 --> 00:03:06.670
Es ist sozusagen ein bisschen wie Vererbungslite und die Klasse, die wir hier einmischen müssen, besteht darin, die Klasse zu benachrichtigen, die in

39
00:03:06.670 --> 00:03:12.020
flacher eingebaut ist und die Sie hinzufügen können, indem Sie das dunkelere Paket mit flacherem

40
00:03:12.040 --> 00:03:13.540
Material hier importieren.

41
00:03:13.660 --> 00:03:20.310
Change Notice Fire hängt im Wesentlichen mit dem geerbten Widget zusammen, das das Provider-Paket hinter den Kulissen verwendet

42
00:03:20.320 --> 00:03:25.780
und das Widget geerbt hat, obwohl wir nicht direkt damit arbeiten. Es ist einfach ein

43
00:03:25.780 --> 00:03:30.670
Widget und flacher, mit dem wir Kommunikationstunnel hinter den Kulissen einrichten können die

44
00:03:30.670 --> 00:03:34.360
Hilfe des Kontextobjekts, das wir in jedem Widget erhalten.

45
00:03:34.360 --> 00:03:42.460
Diese Produktklasse mischt nun die hier mitgeteilte Änderung ein und Sie werden gleich sehen, warum wir

46
00:03:42.460 --> 00:03:44.200
diese Mischung hinzufügen.

47
00:03:44.200 --> 00:03:47.270
Jetzt können Sie definieren, was Sie wollen, dass diese Klasse.

48
00:03:47.290 --> 00:03:52.230
Und hier möchte ich eine Liste von Produkten definieren.

49
00:03:52.510 --> 00:04:03.940
Also importiere zuerst meine Produktmodell-Peitschen nur mit einem Schrägstrich hier und ich werde eine Liste der Produkte hier in der Produktklasse speichern,

50
00:04:03.940 --> 00:04:11.410
damit ich eine Liste habe, die Produktdaten und das Ende enthält, und ich werde

51
00:04:11.410 --> 00:04:13.810
es tun Elemente unterstreichen.

52
00:04:13.810 --> 00:04:15.910
Sie können es auch einfach als Elemente bezeichnen.

53
00:04:16.000 --> 00:04:21.760
Ich möchte nur klarstellen, dass dieses Immobilienjahr niemals direkt von außen zugänglich sein sollte, und ich werde

54
00:04:21.760 --> 00:04:25.330
in einer Sekunde auch zeigen, warum dies so ist.

55
00:04:25.450 --> 00:04:32.360
Ich habe also meine Unterstriche darin und das ist keine endgültige Liste, da sie sich im Laufe der Zeit ändern wird.

56
00:04:32.740 --> 00:04:37.640
Und damit meine ich den Wert hier in der Elementeigenschaft, nicht nur die Elemente in der Liste, denn dann können Sie,

57
00:04:37.630 --> 00:04:40.840
wie Sie erfahren haben, auch Elemente in der Liste ändern, die endgültig sind.

58
00:04:40.840 --> 00:04:46.750
Aber hier möchte ich wirklich den Wert ändern, der in der Eigenschaft selbst gespeichert ist, bevor wir etwas ändern.

59
00:04:46.750 --> 00:04:50.590
Lassen Sie uns jedoch sicherstellen, dass wir diese Elemente abrufen können.

60
00:04:50.590 --> 00:04:56.080
Und da ich dies durch Hinzufügen des Unterstrichs in ein Privateigentum verwandelt habe, was bedeutet, dass

61
00:04:56.080 --> 00:05:03.580
von außen nicht darauf zugegriffen werden kann, füge ich hier einen Getter hinzu, der eine Liste von Produkten zurückgibt, und dann einen

62
00:05:03.580 --> 00:05:10.540
Getter durch Hinzufügen, um das benannte Schlüsselwort abzurufen Artikel ohne Unterstrich und dort gebe ich meine Artikel zurück, aber nicht

63
00:05:10.540 --> 00:05:10.990
so.

64
00:05:10.990 --> 00:05:17.530
Stattdessen gebe ich eine Kopie von ihnen zurück, indem ich Elemente hier in eckige Klammern einwickle und

65
00:05:17.530 --> 00:05:19.390
dann den Spread-Operator verwende.

66
00:05:19.390 --> 00:05:21.650
Warum mache ich das jetzt?

67
00:05:21.730 --> 00:05:27.370
Sie müssen sich daran erinnern, dass all diese Objekte und das Flattern oder der Pfeil Referenztypen sind.

68
00:05:27.400 --> 00:05:35.080
Wenn ich meine Artikelliste hier zurückgeben würde, würde ich einen Zeiger auf dieses Objekt und diesen Speicher zurückgeben.

69
00:05:35.080 --> 00:05:35.380
Richtig.

70
00:05:35.410 --> 00:05:37.300
Das haben Sie früher im Kurs gelernt.

71
00:05:37.870 --> 00:05:43.390
Und das bedeutet, dass ich überall im Code, wo ich hier Zugriff auf meine Produktklasse bekomme und wo

72
00:05:43.390 --> 00:05:50.680
ich dann Zugriff auf die Artikel bekomme, diese Adresse erhalte und daher direkten Zugriff auf diese Liste von Artikeln selbst im Speicher bekomme

73
00:05:50.890 --> 00:05:56.890
und daher mit der Bearbeitung beginnen kann Diese Liste der Artikel von einer anderen Stelle in der App, an

74
00:05:56.890 --> 00:05:59.080
der ich auf diese Produktklasse tippe.

75
00:05:59.080 --> 00:06:06.880
Ich möchte das nicht tun und ich möchte das auch nicht tun, denn wenn sich meine Produkte ändern, muss ich tatsächlich eine

76
00:06:06.880 --> 00:06:14.630
bestimmte Methode aufrufen, um allen Zuhörern dieses Anbieters mitzuteilen, dass Sie sich an die Folie erinnern, die Sie vom Anbieter haben, und

77
00:06:14.630 --> 00:06:17.800
dass Sie Zuhörer haben neue Daten sind verfügbar.

78
00:06:17.960 --> 00:06:24.020
Nehmen wir also an, wir hatten hier eine Anzeigenproduktmethode, die nichts zurückgibt und die im Moment

79
00:06:24.020 --> 00:06:25.660
nicht unsere Argumentation berücksichtigt.

80
00:06:25.700 --> 00:06:30.560
Und dann würden wir hier einfach etwas zu unseren Artikeln hinzufügen.

81
00:06:30.560 --> 00:06:35.990
Dann hätten wir natürlich normalerweise das Problem, dass wir, wenn wir die Daten hier in dieser

82
00:06:35.990 --> 00:06:40.280
Klasse ändern, alle unsere Widgets oder die interessierten Widgets darüber informieren würden.

83
00:06:40.280 --> 00:06:46.820
Und deshalb fügen wir diese Änderung notifiziert hinzu, weil Papa uns Zugriff auf eine Benachrichtigungs-Listener-Methode gewährt, da immer daran

84
00:06:47.240 --> 00:06:52.820
gedacht wird, dass diese Klasse bald vom Anbieterpaket verwendet wird, das das geerbte Widget hinter den

85
00:06:52.820 --> 00:06:58.760
Kulissen verwendet, und daher einen Kommunikationskanal zwischen diesen herstellt Klasse und die Widgets, die für uns interessiert

86
00:06:58.850 --> 00:07:04.160
sind, und wir müssen diese Widgets über Updates informieren, die wir durchgeführt haben, um die

87
00:07:04.160 --> 00:07:10.400
Listener nicht zu benachrichtigen, damit in diesen Widgets, die diese Klasse abhören, und Änderungen in dieser Klasse dann

88
00:07:10.400 --> 00:07:16.730
neu erstellt werden und tatsächlich abgerufen werden Die neuesten Daten, die wir dort haben, und deshalb eine Kopie

89
00:07:16.730 --> 00:07:21.830
zurücksenden, damit wir unsere Artikel hier von überall in der App direkt bearbeiten können.

90
00:07:21.920 --> 00:07:27.530
Denn wenn wir das tun würden, könnten wir keine Benachrichtigungs-Listener aufrufen, da wir dies nur innerhalb dieser Klasse tun

91
00:07:27.530 --> 00:07:33.650
können, weil wir dort diese Mischung hinzugefügt haben und daher unsere Widgets, die von den Daten abhängen und hier nicht korrekt

92
00:07:33.710 --> 00:07:37.450
neu erstellt werden, weil sie es nicht wissen würden über die Änderung.

93
00:07:37.550 --> 00:07:42.200
Wir müssen also sicherstellen, dass wir nur Daten innerhalb der Klasse ändern,

94
00:07:42.200 --> 00:07:50.570
da wir dann Listener auslösen oder benachrichtigen können und alle anderen Teile der App, die diese Klasse abhören, dann neu erstellt werden.

95
00:07:50.660 --> 00:07:56.180
Die Notiz ist vielleicht noch nicht ganz klar, weil wir noch nicht zuhören, aber das ist hier die allgemeine Idee,

96
00:07:56.420 --> 00:07:58.150
warum ich das so mache.

97
00:07:58.180 --> 00:08:02.690
Und im Moment werde ich dies kommentieren, weil wir im Moment nicht wirklich wissen, wie man Produkte hinzufügt, aber das

98
00:08:03.260 --> 00:08:08.240
ist die Idee, warum wir die Benachrichtigung geändert haben und warum wir sie einrichten müssen und warum ich hier eine Kopie zurückschicke, aber

99
00:08:08.780 --> 00:08:10.820
wir ' Ich habe gesagt, lass uns anfangen zuzuhören.

100
00:08:10.820 --> 00:08:14.330
Und bevor wir anfangen können zuzuhören, müssen wir dies zuerst bereitstellen.

101
00:08:14.420 --> 00:08:21.590
Bisher müssen wir klassifizieren, aber jetzt müssen wir diese Klasse hier in einen Datencontainer in einen Anbieter

102
00:08:21.590 --> 00:08:28.900
verwandeln, den wir in unserer App und in den verschiedenen Teilen unserer App verwenden können, und es wagen,

103
00:08:28.910 --> 00:08:36.180
dass die Produkte an einigen Stellen dieser App wichtig sind Natürlich sind sie für den Moment im Produktdetail

104
00:08:36.180 --> 00:08:38.300
und im Produktübersichtsbild wichtig.

105
00:08:38.340 --> 00:08:43.020
Das bedeutet, dass ich dies im Hauptpfeil bereitstellen möchte, da dies wichtig ist

106
00:08:43.020 --> 00:08:48.510
und Sie dies mit dem Anbieterpaket wissen müssen, das Sie benötigen, um eine Klasse bereitzustellen, die

107
00:08:48.510 --> 00:08:54.990
Sie nicht von verschiedenen Widgets in Ihrer App verwenden möchten Möglicher Punkt all dieser Widgets, die interessiert sein werden,

108
00:08:54.990 --> 00:09:00.060
was bedeutet, dass ich, wenn die Produktübersicht und der Produktdetailbildschirm an den Daten interessiert

109
00:09:00.060 --> 00:09:05.970
sind, die Klasse in einem Widget angeben muss, das über ihnen liegt, was in meinem Fall mein

110
00:09:05.970 --> 00:09:07.680
App-Widget mein ist Root-Widget.

111
00:09:07.980 --> 00:09:14.190
Wenn ich Daten habe, die nur für das Produktartikel-Widget wichtig sind, kann ich diese Daten

112
00:09:14.190 --> 00:09:19.860
im Produktübersichts-Widget bereitstellen, da Papa das Produktelement erstellt, ohne dass es dann im Hauptpfeilformular

113
00:09:19.860 --> 00:09:21.350
verwaltet werden muss.

114
00:09:21.600 --> 00:09:27.120
Da ich jedoch Widgets habe, die auf der Stammebene registriert sind, muss ich meine Daten auch auf

115
00:09:27.120 --> 00:09:32.580
der Stammebene bereitstellen, was nicht bedeutet, dass die gesamte App neu erstellt wird, wenn sich etwas an

116
00:09:32.580 --> 00:09:33.760
den Daten ändert.

117
00:09:33.780 --> 00:09:35.830
Aber dazu gleich mehr.

118
00:09:35.910 --> 00:09:42.360
Daher möchte ich meine Daten hier bereitstellen und daher unseren Anbieter oder diese Klasse, an der

119
00:09:42.360 --> 00:09:49.680
wir gerade gearbeitet haben, von Anbietern importieren. Sie stammen aus der Produktstartdatei. Jetzt können wir hier einen Anbieter einrichten.

120
00:09:49.680 --> 00:09:56.320
Wie registrieren wir nun einen Anbieter in unserer App, um dann einen Anbieter zu registrieren?

121
00:09:56.320 --> 00:10:00.820
Sie müssen etwas aus diesem Anbieterpaket importieren, da es einen Grund gibt, warum wir es hinzugefügt haben.

122
00:10:00.850 --> 00:10:02.180
Immerhin gut.

123
00:10:02.350 --> 00:10:09.850
Importieren Sie also Provider Dart aus dem Provider-Paket und jetzt hier in Ihrem App-Widget, anstatt Material-App zurückzugeben,

124
00:10:09.850 --> 00:10:17.960
wird dies tatsächlich in ein Never-Widget verpackt. Wrap also mit neuem Widget und Add New Widget ist jetzt ein

125
00:10:18.990 --> 00:10:24.030
Provider und da haben Sie ein paar von Anbietern weg Label.

126
00:10:24.060 --> 00:10:32.500
Der gebräuchlichste Anbieter, den ich empfehlen würde, ist das Ändern des Benachrichtigungs-Fire-Anbieters. Diese Klausel des von uns installierten

127
00:10:32.500 --> 00:10:39.340
Anbieterpakets ermöglicht es uns, eine Klasse zu registrieren, die Sie dann in untergeordneten Widgets abhören

128
00:10:39.340 --> 00:10:45.850
können und wann immer diese Klasse die Widgets aktualisiert die nur in

129
00:10:45.970 --> 00:10:52.570
diesen nicht allen untergeordneten Widgets abhören, werden nur untergeordnete Widgets, die abhören, neu erstellt.

130
00:10:52.570 --> 00:11:04.940
Hier müssen Sie also eine Builder-Methode angeben, damit die Builder-Methode einen erstellten Kontext erhält und eine neue

131
00:11:04.940 --> 00:11:11.020
Instanz Ihrer bereitgestellten Klasse zurückgibt, also kein Widget.

132
00:11:11.150 --> 00:11:13.010
Eine neue Instanz Ihrer Provider-Klasse.

133
00:11:13.010 --> 00:11:15.530
Also in unserem Fall der Produktklasse hier.

134
00:11:15.530 --> 00:11:18.980
Also gebe ich hier einfach solche Produkte zurück.

135
00:11:18.980 --> 00:11:25.940
Nun ein wichtiger Hinweis an dieser Stelle, obwohl die Builder-Methode hier die richtige Methode ist, um zu

136
00:11:25.970 --> 00:11:30.080
wählen, ob Sie verwenden, wo Sie das Provider-Paket freigeben können.

137
00:11:30.080 --> 00:11:37.850
Wenn Sie also beispielsweise diese Abhängigkeit in Ihrer oder der GVO-Datei haben, wenn Sie die neueste Version oder speziell

138
00:11:38.000 --> 00:11:41.300
ein Wort größer oder gleich 4 verwenden.

139
00:11:41.330 --> 00:11:48.590
Wenn Sie zum Beispiel diesen Eintrag in Ihrer mit Welpen gesprenkelten GVO-Datei haben, funktioniert dies nicht mit dem

140
00:11:48.750 --> 00:11:52.150
Builder, sondern wird erstellt und einfach so.

141
00:11:52.190 --> 00:11:54.530
Sie müssen einfach erstellen statt erstellen.

142
00:11:54.530 --> 00:11:59.510
In diesem Fall habe ich diesen Kurs jetzt mit freien Worten aufgenommen.

143
00:11:59.540 --> 00:12:06.410
Aus diesem Grund sehen wir in diesem und den nächsten Videos den Builder, und Sie können absolut Wörter verwenden, die

144
00:12:06.410 --> 00:12:07.790
frei vom Anbieterpaket sind.

145
00:12:07.790 --> 00:12:12.420
Alles was Sie tun müssen, ist dieses Einstiegsjahr in Ihrer Perspektive zu haben.

146
00:12:12.430 --> 00:12:18.800
Emily hat zum Beispiel eingereicht, wenn Sie dies haben, können Sie einfach zusammen mit dem Builder folgen, aber wenn Sie das neueste

147
00:12:18.800 --> 00:12:21.370
Wort verwenden möchten, müssen Sie hier create verwenden.

148
00:12:21.380 --> 00:12:25.650
Wenn Sie also einen zum Mieten haben, müssen Sie ihn hier erstellen.

149
00:12:25.730 --> 00:12:29.000
Seien Sie also nicht verwirrt, wenn Sie in den nächsten Vorlesungen etwas anderes sehen.

150
00:12:29.000 --> 00:12:31.100
Das liegt nur daran, dass ich ein anderes Wort verwendet habe.

151
00:12:31.400 --> 00:12:37.280
Eine Sache, die sich nicht ändert, ist die Funktionsweise des Provider-Pakets und so weiter.

152
00:12:37.280 --> 00:12:38.780
Das ist also alles das Gleiche.

153
00:12:38.900 --> 00:12:41.480
Nur dieser Teil hier muss angepasst werden.

154
00:12:41.480 --> 00:12:44.870
Ich wollte hier nur darauf hinweisen.

155
00:12:44.930 --> 00:12:51.140
Jetzt richten wir einen Anbieter ein, der allen untergeordneten Widgets eine Instanz und eine in derselben

156
00:12:51.320 --> 00:12:53.240
Instanz dieser Produktklasse bereitstellt.

157
00:12:53.300 --> 00:12:57.750
Also materielle App und all ihre Kinder, die interessiert sind.

158
00:12:57.860 --> 00:13:03.050
Alle untergeordneten Widgets können jetzt einen Listener für diese Instanz dieser Klasse für

159
00:13:03.050 --> 00:13:09.680
dieselbe Instanz und dasselbe Objekt dieser Klasse einrichten. Wenn wir etwas in eine Klasse ändern und dann

160
00:13:10.010 --> 00:13:15.570
Benachrichtigungs-Listener aufrufen, werden die Widgets, die abhören, neu erstellt, und das ist sehr wichtig.

161
00:13:15.580 --> 00:13:18.810
Nur die Widgets, die zuhören, halten keine Material-App.

162
00:13:18.850 --> 00:13:24.130
Nur weil sich hier etwas ändert, wird die Material-App nicht neu erstellt. Es

163
00:13:24.340 --> 00:13:31.020
werden nur Widgets neu erstellt, die gerade abhören. An einem Ort, an dem wir interessiert sein könnten, ist

164
00:13:32.020 --> 00:13:38.630
die Produktübersicht hier in der Produktübersicht. Ich habe meinen Grid View Builder, also brauche ich meine Produkte Hier.

165
00:13:38.740 --> 00:13:44.290
Jetzt könnte man sogar argumentieren, die App-Leiste, die keine von uns ausgelagerten Produktdaten benötigt,

166
00:13:44.290 --> 00:13:46.430
nicht unnötig neu zu erstellen.

167
00:13:46.430 --> 00:13:53.860
Wird der Builder für die Rasteransicht in ein separates Widget eingefügt, damit wir dieses zum Refactoring verwendete Tool einbinden und das Extrakt-Widget

168
00:13:53.860 --> 00:13:56.830
hier verwenden und uns einen Produktnamen geben können.

169
00:13:56.830 --> 00:13:58.270
Gitter vielleicht.

170
00:13:58.330 --> 00:14:03.900
Jetzt haben wir das neue Widget, das für uns erstellt wurde und das

171
00:14:03.930 --> 00:14:10.020
eigentlich kein Produkt als Argument erhalten sollte, sondern es selbst durch die Verwendung unseres Anbieters erhält.

172
00:14:10.250 --> 00:14:14.200
Jetzt werde ich zuerst meine hier mitgeführten Produkte in eine neue Datei verschieben.

173
00:14:14.510 --> 00:14:21.700
Technisch gesehen müssen Sie das nicht tun, aber ich, Robert, befolge diese Konvention, sodass Sie

174
00:14:21.730 --> 00:14:29.560
in der Raster-Doktordatei meines Produkts natürlich Ihren Materialpfeil aus dem Flattern importieren und auch das Produktmodell importieren

175
00:14:29.590 --> 00:14:36.380
müssen, da wir hier und darauf verweisen Das ist wichtig für das Produktmodell.

176
00:14:36.380 --> 00:14:42.140
Unser normales Modell im Modellordner ist also nicht die Produktdatei, an der wir gerade gearbeitet haben,

177
00:14:42.140 --> 00:14:44.020
sondern das normale Modell hier.

178
00:14:44.130 --> 00:14:47.930
Ich muss hier auch auf das Produkt verweisen, weil ich es verwende.

179
00:14:47.930 --> 00:14:56.320
Importieren wir also das Produktelement in den Produktübersichtsbildschirm.

180
00:14:56.330 --> 00:15:00.080
Wir brauchen diesen Produktartikelimport jetzt nicht mehr.

181
00:15:00.110 --> 00:15:07.310
Ich möchte auch die Dummy-Produkte, die wir hier haben, greifen und sie aus diesem Widget heraus in den

182
00:15:07.310 --> 00:15:13.850
Produktstartfehler im Ordner des Anbieters verschieben, da wir dort diese Produkte haben und ich vorerst mit

183
00:15:13.850 --> 00:15:15.920
einigen Dummy-Produkten beginnen möchte.

184
00:15:16.070 --> 00:15:18.070
Also der Papa Produktübersichtsbildschirm.

185
00:15:18.080 --> 00:15:20.000
Das brauchen wir nicht mehr.

186
00:15:20.000 --> 00:15:28.550
Wir brauchen den Produktmodellimport nicht mehr, daher müssen wir nur das Raster für neue

187
00:15:28.730 --> 00:15:41.010
Produkte aus dem Widgets-Ordner importieren, damit die Produkte rot starten, und wir brauchen kein neues Schlüsselwort, damit die Produkte Rasterprodukte

188
00:15:41.410 --> 00:15:43.660
rot importiert werden.

189
00:15:43.670 --> 00:15:50.880
Und jetzt wird das Produktraster hier im Produktraster-Widget erstellt. Sie benötigen nicht den Konstruktor oder

190
00:15:50.880 --> 00:15:56.960
irgendetwas, von dem ich alle meine Daten hier abrufen möchte, indem Sie

191
00:15:56.960 --> 00:16:04.730
einen solchen Listener einrichten. Für Dad und die Built-Methode können wir jetzt eine verwenden Anzahl der Features

192
00:16:06.170 --> 00:16:13.940
aus dem Provider-Paket und daher importieren wir den Provider-Provider-Dart hier und unser Feature ist der Kontext-Provider.

193
00:16:13.940 --> 00:16:18.890
Jetzt haben wir diese Sache außerhalb des Kontexts einige Male im Verlauf des Kurses bereits mit dem

194
00:16:18.890 --> 00:16:20.720
Thema mit dem Navigator usw. gesehen.

195
00:16:21.350 --> 00:16:26.600
Ich habe dort bereits erklärt, dass dies einen direkten Kommunikationskanal hinter den Kulissen schafft.

196
00:16:26.840 --> 00:16:34.010
In diesem Jahr können wir mit dem Provider-Paket eine Verbindung zu einer der bereitgestellten Klassen herstellen. Daher können Sie Provider

197
00:16:34.020 --> 00:16:40.970
Off nur in einem Widget verwenden, das über ein direktes oder indirektes übergeordnetes Widget verfügt, das einen Provider eingerichtet

198
00:16:41.120 --> 00:16:43.690
hat, den wir hier eingerichtet haben.

199
00:16:43.700 --> 00:16:49.100
Das muss also zuerst für diesen Anbieter eingerichtet werden, aber dann können wir sie mit dem Anbieter auflisten,

200
00:16:49.160 --> 00:16:54.050
um Änderungen an der bereitgestellten Klassenbewertung vorzunehmen, die das Objekt liefert, um genau zu sein.

201
00:16:54.050 --> 00:16:59.510
Und diese Erstellungsmethode dieses Widgets, bei der ich den Provider nur in dieser Erstellungsmethode verwende,

202
00:16:59.510 --> 00:17:08.030
und natürlich alle untergeordneten Widgets werden neu erstellt, wenn das Objekt, das ich höre, die Erstellungsmethode eines übergeordneten Widgets des Produktrasters wie das ändert

203
00:17:08.030 --> 00:17:13.760
Die Produktübersicht hier wird nicht erneut ausgeführt, da hier kein Listener eingerichtet wird. Dies ist natürlich

204
00:17:13.760 --> 00:17:19.130
wichtig, da nicht der gesamte Widget-Baum Daten neu erstellt und nur das Widget ändert,

205
00:17:19.490 --> 00:17:21.150
in dem ich zuhöre.

206
00:17:21.260 --> 00:17:25.780
Und da diese Erstellungsmethode ausgeführt wird, werden natürlich auch alle untergeordneten Widgets neu erstellt.

207
00:17:25.790 --> 00:17:28.020
Das ist das normale Verhalten.

208
00:17:28.040 --> 00:17:34.390
Die Frage ist jedoch, wie wir eine Verbindung zwischen diesem Widget und diesem bestimmten Anbieter herstellen.

209
00:17:34.400 --> 00:17:39.650
Im Moment haben wir nur einen Anbieter, aber wie Sie später sehen werden, können Sie auch mehr als

210
00:17:39.650 --> 00:17:41.400
einen Anbieter in Ihrer App haben.

211
00:17:41.570 --> 00:17:47.090
Daher möchte ich einen Listener für meinen Provider einrichten, der mir tatsächlich eine Instanz

212
00:17:47.090 --> 00:17:47.600
meiner

213
00:17:50.500 --> 00:17:56.710
Produktklasse bereitstellt. Sie teilen dem Flattern mit, wo das Provider-Paket, dass Sie an einer Instanz dieser

214
00:17:57.190 --> 00:18:03.430
Produktklasse interessiert sind, indem Sie die Tatsache nutzen, dass die Off-Methode Hier in der vom Provider-Paket

215
00:18:03.430 --> 00:18:09.940
bereitgestellten Provider-Klasse befindet sich eine generische Methode. Dies bedeutet, dass Sie diese eckigen Klammern hinzufügen können, um

216
00:18:09.940 --> 00:18:13.090
zu erfahren, welchen Datentyp Sie tatsächlich abhören möchten.

217
00:18:13.090 --> 00:18:19.260
Hier möchte ich also auf Veränderungen bei Produkten hören und darauf, welche Importschulden jetzt Produkte sein müssen.

218
00:18:19.270 --> 00:18:20.740
Hier importieren wir

219
00:18:24.140 --> 00:18:30.710
also aus dem dortigen Provider-Ordner aus der Produktstartdatei mit dieser Information, dass wir dem Provider-Paket

220
00:18:30.710 --> 00:18:37.520
mitteilen, dass wir einen direkten Kommunikationskanal zur bereitgestellten Instanz der Produktklasse einrichten möchten, und nun wird

221
00:18:37.790 --> 00:18:43.420
das Provider-Paket fortgesetzt Es sieht sich das Paragon der Produkte an, die den

222
00:18:43.690 --> 00:18:49.700
Produktübersichtsbildschirm bewerten, und dort findet es keinen Anbieter. Es geht weiter und schaut sich

223
00:18:49.700 --> 00:18:55.160
das übergeordnete Element des Produktübersichtsbildschirms an. Das ist natürlich mein App-Widget, da

224
00:18:55.160 --> 00:19:01.520
ich dort das instanziiere Produktübersichtsbildschirm und dort, wenn es in den Widget-Baum geht, findet es

225
00:19:01.520 --> 00:19:07.760
tatsächlich einen Anbieter und dann findet dieser Anbieter dankenswerterweise einen Anbieter, der dankenswerterweise eine Instanz

226
00:19:08.300 --> 00:19:13.730
von Typprodukten bereitstellt, wenn wir hier eine andere Klasse erstellen würden, und

227
00:19:13.730 --> 00:19:21.980
dann natürlich diesen Listener einrichten würde scheitern, aber da wir hier ein neues Produktobjekt bereitstellen, können wir es abrufen und

228
00:19:21.980 --> 00:19:30.140
hier mit dem Produktanbieter-Kontext anhören, sodass wir hier Zugriff haben zu diesem Produktobjekt, das als Produktdaten bezeichnet wird, und

229
00:19:30.140 --> 00:19:36.830
das ist nicht unsere Produktliste, sondern zu dem Objekt, das auf dieser Klasse basiert, und dies

230
00:19:36.830 --> 00:19:42.140
wird dann einen Element-Getter haben, da wir es hier hinzugefügt haben,

231
00:19:44.650 --> 00:19:52.330
damit die Produkte, mit denen wir tatsächlich arbeiten, einfach aus Produktdaten abgerufen werden durch Zugriff auf solche Elemente.

232
00:19:52.330 --> 00:19:57.120
Und dies gibt uns jetzt eine Liste von Produkten und Sinnesarten-Inferenz-Arbeiten hier.

233
00:19:57.220 --> 00:20:02.620
Wir brauchen den Produktmodellimport eigentlich nicht, weil wir die Produktklasse selbst hier im Produktskript

234
00:20:02.620 --> 00:20:08.680
mit Dad nicht brauchen. Wir bekommen jetzt unsere Produkte hier und können jetzt die Produkte hier verwenden,

235
00:20:08.680 --> 00:20:14.440
um die Länge zu bestimmen und diese dann tot weiterzuleiten Daten zum Produktartikel im Produktartikel.

236
00:20:14.440 --> 00:20:19.390
Wie ich zuvor in diesem Modul erklärt habe, kann ich den Status gut als Argument abrufen, da dies Daten

237
00:20:19.390 --> 00:20:24.370
sind, die das Widget selbst benötigt, die wir nicht nur weiterleiten können, sondern die wir in diesem Widget ausgeben

238
00:20:24.370 --> 00:20:27.340
möchten, und daher ist es in Ordnung es so zu akzeptieren.

239
00:20:27.340 --> 00:20:33.130
Es wird tatsächlich empfohlen, es so zu bekommen, da dann sehr klar ist, welche Konfiguration dieses Widget benötigt, um

240
00:20:33.220 --> 00:20:38.920
korrekt zu funktionieren, und Sie diesen WeChat überall in Ihrer App ablegen können, wo Sie wissen, dass Sie

241
00:20:38.920 --> 00:20:43.450
diese Daten erhalten, unabhängig davon, ob Sie einen Anbieter darüber haben oder nicht.

242
00:20:43.450 --> 00:20:47.560
Damit wurde viel geredet, aber sehr wichtig.

243
00:20:47.650 --> 00:20:56.110
Lassen Sie uns jetzt einen vollständigen Neustart durchführen und in unserer App sehen wir unsere Artikel jetzt noch hier, aber

244
00:20:56.110 --> 00:21:03.190
jetzt laden wir sie mithilfe unserer Provider-Klasse. Der Vorteil, wenn er nicht bereits erkennbar ist, wird

245
00:21:03.190 --> 00:21:06.790
umso deutlicher, je komplexer unsere Anwendung ist bekommt.
