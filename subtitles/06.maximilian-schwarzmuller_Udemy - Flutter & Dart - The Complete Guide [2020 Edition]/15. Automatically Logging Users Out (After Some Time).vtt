WEBVTT
1
00:00:02.220 --> 00:00:10.780
To automatically logout when the token expires, you can go back to the auth.dart file here and in there,

2
00:00:10.910 --> 00:00:15.670
let's add a new method and I'll name it auto logout.

3
00:00:15.680 --> 00:00:21.620
The goal here is to basically set a timer which will expire when the token expires and then to call

4
00:00:21.620 --> 00:00:26.280
logout for us. So for this, we need to set a timer.

5
00:00:27.580 --> 00:00:29.530
Timers are baked into Dart,

6
00:00:29.530 --> 00:00:35.560
we just need to import a specific Dart library and that's the dart:async library.

7
00:00:35.590 --> 00:00:42.190
It helps us with async code and gives us tools to run code asynchronously and one such tool is setting

8
00:00:42.190 --> 00:00:46.570
a timer which allows us to run some code in the future when the timer expired.

9
00:00:46.600 --> 00:00:52.870
So in here, I want to set a timer and I can now do this with the timer class which is made available by that

10
00:00:52.900 --> 00:01:00.000
just imported dart:async library, instantiate a timer and the timer takes a duration that configures

11
00:01:00.000 --> 00:01:01.910
when it should expire.

12
00:01:01.950 --> 00:01:07.500
Now that duration can be set in seconds and the seconds of course should be the difference between expiry

13
00:01:07.500 --> 00:01:11.580
date and current date or expiry time and current time.

14
00:01:11.580 --> 00:01:18.000
So here, I'll take my expiry date and now we can use the difference method to calculate a difference

15
00:01:18.200 --> 00:01:25.530
and I want to have the difference to now and I want to have that difference in seconds which conveniently

16
00:01:25.530 --> 00:01:28.740
is a property I have available on the difference result.

17
00:01:28.740 --> 00:01:31.050
So Dart really gives you a lot of helpers there,

18
00:01:31.140 --> 00:01:39.840
the difference method in seconds and then I'll store this in a variable, timeToExpiry.

19
00:01:40.030 --> 00:01:45.850
So this is the timeToExpiry in seconds because difference gives us the difference between two timestamps.

20
00:01:45.890 --> 00:01:50.870
Now we can pass this timeToExpiry here as a value

21
00:01:50.870 --> 00:01:55.340
and if you want to learn more about all the available methods, of course just typing a dot gives you

22
00:01:55.430 --> 00:01:59.800
this auto completion, the official docs on the datetime object are a great place to go

23
00:02:00.170 --> 00:02:06.830
and as always, just control or command clicking on this here also gets you into the code and lets you

24
00:02:06.830 --> 00:02:13.020
learn what is available and so on. Now setting the duration is one thing,

25
00:02:13.040 --> 00:02:17.630
the other thing is that we need to configure what should happen when this expired because the timer

26
00:02:17.630 --> 00:02:22.520
takes two arguments - the duration and then a function that should be executed

27
00:02:22.550 --> 00:02:28.470
when this timer is done and this is a function that takes no arguments and doesn't return anything. Now here,

28
00:02:28.510 --> 00:02:34.840
I want to point that my logout function, logout should be triggered when a timer expires. Now that's a

29
00:02:34.840 --> 00:02:35.680
simple setup

30
00:02:35.710 --> 00:02:37.630
but we also need to manage that timer,

31
00:02:37.630 --> 00:02:43.660
for example I want to make sure that if we already have an ongoing timer for some reason, I cancel the

32
00:02:43.660 --> 00:02:45.670
old timer before we set a new one

33
00:02:45.790 --> 00:02:52.830
and in logout, I also want to make sure that we cancel any ongoing timers in case the user chose logout

34
00:02:52.830 --> 00:02:53.590
in the drawer.

35
00:02:54.340 --> 00:02:57.210
So we need to manage the timer here in the auth class

36
00:02:57.220 --> 00:03:06.250
and for that, I'll add a new property here at the top of type timer and that's my authTimer.

37
00:03:06.270 --> 00:03:13.280
Now we can use that timer here at the bottom to store the timer we're creating here in it,

38
00:03:13.290 --> 00:03:18.750
so here we're storing the authTimer and that allows me to first of all check whether we have an authTimer

39
00:03:18.780 --> 00:03:20.060
before we do anything.

40
00:03:20.070 --> 00:03:22.440
So if we have an authTimer here,

41
00:03:22.470 --> 00:03:23.610
so if it's not null,

42
00:03:23.610 --> 00:03:25.750
so we already have an existing timer,

43
00:03:25.800 --> 00:03:31.410
then I want to call cancel on that existing timer before I set a new one,

44
00:03:31.440 --> 00:03:38.280
now that's just a tiny thing, cancel existing timers if available. Now in logout,

45
00:03:38.280 --> 00:03:43.140
I of course also want to cancel existing timers because logout is not just called by the timer which

46
00:03:43.140 --> 00:03:47.410
of course will be done when it's called but also when the user chooses logout in the drawer

47
00:03:47.460 --> 00:03:50.790
and in such case, an ongoing timer should be cancelled.

48
00:03:50.790 --> 00:03:54.280
So here I'll check if authTimer is not equal to null

49
00:03:54.420 --> 00:04:01.230
and if it is not equal to null, I'll set authTimer or I'll call authTimer.cancel and thereafter, I'll

50
00:04:01.230 --> 00:04:04.360
set authTimer to null.

51
00:04:04.370 --> 00:04:10.280
So now we have an authTimer and we manage that and to see whether it works, let's temporarily set a duration

52
00:04:10.280 --> 00:04:16.460
of only let's say three seconds here, so that we can see if we really are logged out automatically when

53
00:04:16.460 --> 00:04:17.840
this expires.

54
00:04:17.840 --> 00:04:24.540
However for that of course, we need to make sure that auto logout is called. The place to call it is

55
00:04:24.540 --> 00:04:27.440
of course the place where we actually login.

56
00:04:27.450 --> 00:04:34.210
So here in authenticate, I do in the end set my token expiry date and then notify listeners, here

57
00:04:34.290 --> 00:04:39.560
I also want to call auto logout because this is where the user is officially treated as logged in,

58
00:04:39.570 --> 00:04:43.400
that is where I want to set my timer of course.

59
00:04:43.430 --> 00:04:47.960
So now let's save this and because I hardcoded a value of three seconds here,

60
00:04:47.960 --> 00:04:55.340
we should now see that when I login, I should automatically logout after three seconds without me doing

61
00:04:55.340 --> 00:04:56.270
anything.

62
00:04:56.450 --> 00:05:00.170
So let's login and then wait for three seconds,

63
00:05:03.530 --> 00:05:04.050
yes

64
00:05:04.290 --> 00:05:06.090
we're back to the screen here.

65
00:05:06.090 --> 00:05:07.080
So this seems to work

66
00:05:07.170 --> 00:05:11.700
and with that, let's actually go back to the real timeToExpiry down there.

67
00:05:11.760 --> 00:05:13.320
So that's auto logout,

68
00:05:13.350 --> 00:05:14.400
very important.

69
00:05:14.430 --> 00:05:21.330
Now let's work on auto login so that when the user is logged in, closes the app and comes back later,

70
00:05:21.810 --> 00:05:23.460
we automatically log the user in.
