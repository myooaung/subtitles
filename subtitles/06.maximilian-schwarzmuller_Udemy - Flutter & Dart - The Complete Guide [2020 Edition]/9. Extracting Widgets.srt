1
00:00:02,430 --> 00:00:09,570
If we have a look at our application here, the code is generally well written but we have improvement

2
00:00:09,570 --> 00:00:15,550
potential. Regarding the performance, only a little bit with more const calls and so on,

3
00:00:15,600 --> 00:00:22,050
what we can't avoid here is that we basically always call build method in the main.dart file because

4
00:00:22,050 --> 00:00:28,980
we do use the media query in there and it impacts almost everything here and therefore there is

5
00:00:28,980 --> 00:00:32,600
little optimization potential. Though there is some

6
00:00:32,640 --> 00:00:38,510
to be honest, for example the appBar and the Cupertino navigation bar doesn't really use the media query.

7
00:00:38,550 --> 00:00:44,250
So what you could do is you could take all the content that does use the media query and put that into

8
00:00:44,250 --> 00:00:51,690
a separate widget which then only rebuilds when the media query changes and media query changes wouldn't

9
00:00:51,930 --> 00:00:53,040
trigger a rebuild

10
00:00:53,040 --> 00:00:59,100
overall here and hence, also rebuild our navigation bars even though these are not interested in the media

11
00:00:59,130 --> 00:01:06,240
query but that's such a tiny impact here that you could also ignore it but it would be one potential

12
00:01:06,240 --> 00:01:08,610
refactoring. Nonetheless,

13
00:01:08,610 --> 00:01:16,650
one thing you can do in this app however is for example in the transaction list. There, we have our list

14
00:01:16,680 --> 00:01:24,600
item, this card here with all its content and it would make sense to take this large chunk of this widget

15
00:01:24,600 --> 00:01:32,370
tree and put it into a separate widget, not really for performance reasons but to make this code more

16
00:01:32,370 --> 00:01:35,470
readable because it's a relatively large widget,

17
00:01:35,610 --> 00:01:39,530
you could certainly leave it that way but still, it's relatively large

18
00:01:39,660 --> 00:01:44,400
and since this makes such a nice individual widget, I mean a list item,

19
00:01:44,400 --> 00:01:46,750
isn't that a perfect separate widget?

20
00:01:46,860 --> 00:01:51,510
It would make sense to put this into a separate widget, so that when you come back to your code or a

21
00:01:51,510 --> 00:01:57,750
fellow developer looks at your code and wants to edit the list item, the developer doesn't have to go

22
00:01:57,750 --> 00:02:03,720
through the entire transaction list widget but can quickly go to the transaction item file here and

23
00:02:03,720 --> 00:02:07,500
start editing in there and can ignore the transaction list.

24
00:02:07,500 --> 00:02:11,070
Now creating a new widget thankfully is really simple,

25
00:02:11,220 --> 00:02:14,820
you can simply mark the content, which should go into the new widget,

26
00:02:14,820 --> 00:02:21,810
so in this case, it's this card here all the way up to the end of this card and then use the refactoring

27
00:02:21,810 --> 00:02:27,120
tool with that shortcut and then choose extract widget.

28
00:02:27,240 --> 00:02:33,990
You're then asked for a name here and I'll name this transaction item, following that pascal case notation

29
00:02:34,290 --> 00:02:39,500
with a capital character at the beginning and for every word inside of the word and then hit enter.

30
00:02:39,770 --> 00:02:46,260
And now in the same file, it will give you a new widget with your name and then the build method will

31
00:02:46,260 --> 00:02:48,930
contain the part you outsourced.

32
00:02:48,930 --> 00:02:54,240
Now in this case here, we still have to do some manual fixes to make sure that we get the right transaction

33
00:02:54,240 --> 00:03:00,200
data into this widget but it's definitely easier than building this from scratch.

34
00:03:00,240 --> 00:03:07,440
Now I will actually cut this widget and add it into a new file, transaction_item.dart

35
00:03:07,920 --> 00:03:10,120
and simply copy my code in here.

36
00:03:10,230 --> 00:03:15,140
Now in here, we then need to import a couple of things, we have first of all need the material.dart

37
00:03:15,150 --> 00:03:20,490
file, we also use the transaction model, so we will have to import that and

38
00:03:20,590 --> 00:03:26,250
for this I'll go to the models folder and then import transaction.dart and I also want to change the

39
00:03:26,250 --> 00:03:28,110
code that was generated here.

40
00:03:28,110 --> 00:03:30,660
I don't want to get my list of transactions here,

41
00:03:30,660 --> 00:03:35,640
instead I want to get a single transaction here because this is created for a single transaction.

42
00:03:35,850 --> 00:03:42,270
So I'll rename this to transaction and the type here will then also just be transaction, not a list of transactions

43
00:03:42,530 --> 00:03:43,520
and in the constructor,

44
00:03:43,530 --> 00:03:46,020
I of course say this transaction,

45
00:03:46,080 --> 00:03:47,880
this is where I want to store this at.

46
00:03:47,940 --> 00:03:50,430
By the way, this also created named arguments

47
00:03:50,550 --> 00:03:52,320
and it added two things,

48
00:03:52,350 --> 00:03:54,090
the key and this part

49
00:03:54,090 --> 00:03:58,220
after the constructor which we haven't learned about. For now let's ignore it,

50
00:03:58,230 --> 00:04:03,960
I'll come back to this key thing here later. Other than that, it's a normal constructor with named arguments.

51
00:04:04,860 --> 00:04:11,500
Down in the code here, we can now simply refer to transaction, which is this new property I just created,

52
00:04:14,020 --> 00:04:15,520
.amount and so on.

53
00:04:15,530 --> 00:04:22,670
So everywhere where we used the transaction index, we now use just transaction.

54
00:04:22,990 --> 00:04:29,260
I'm also using the date format class here and that means we also have to import the intl package and

55
00:04:29,260 --> 00:04:31,090
there, the intl.dart file and

56
00:04:31,090 --> 00:04:35,140
this unlocks the date format class. In the transaction_list.dart

57
00:04:35,150 --> 00:04:39,670
file, we can therefore get rid of that intl import because we're not using it here anymore

58
00:04:40,090 --> 00:04:46,360
and there where this transaction item gets created, in case Flutter or this plugin still did it

59
00:04:46,360 --> 00:04:46,740
for you,

60
00:04:46,730 --> 00:04:48,460
you can remove the new keyword,

61
00:04:48,460 --> 00:04:54,940
it's not required and the data we're forwarding of course is not transactions but transaction and the

62
00:04:54,940 --> 00:05:00,460
value for that is transactions index because we're still in the ListView.builder and hence we go through

63
00:05:00,460 --> 00:05:03,520
all the transactions with the help of their length

64
00:05:03,730 --> 00:05:08,630
and here for every item that is built, we forward the transaction at that index

65
00:05:08,650 --> 00:05:14,500
we're building the item for. Last but not least, since we outsource transaction item into a new file,

66
00:05:14,560 --> 00:05:20,440
you need to import that file here at the top by pointing at the transaction_item.dart.

67
00:05:20,440 --> 00:05:23,440
And with that, we have the exact same application as before,

68
00:05:23,540 --> 00:05:28,070
we'll also not have any performance gains but this code is more readable.

69
00:05:28,090 --> 00:05:33,790
We have a shorter transaction list widget and shorter generally always is better because if you have

70
00:05:33,790 --> 00:05:38,520
less content in a file, it's easier to grasp what's happening in the file

71
00:05:38,650 --> 00:05:43,240
and if you just want to edit the transaction item, you can simply go to the transaction_item.dart file

72
00:05:43,420 --> 00:05:45,650
and have all the relevant content there.

73
00:05:45,730 --> 00:05:50,500
With that, our application still of course should work as before,

74
00:05:50,500 --> 00:06:00,940
if I add a new value here, for today let's say, that still appears here and deleting it also still works.

75
00:06:00,980 --> 00:06:02,230
So that still works

76
00:06:02,240 --> 00:06:05,030
but this is now one possible improvement that makes sense.
