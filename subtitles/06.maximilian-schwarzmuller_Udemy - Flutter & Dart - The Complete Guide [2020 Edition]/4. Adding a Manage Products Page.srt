1
00:00:02,250 --> 00:00:04,490
Now that we added this user interaction,

2
00:00:04,700 --> 00:00:13,170
let's work on that new page which I wanted to add, a new page where we are able to manage our own products

3
00:00:13,170 --> 00:00:18,300
and that of course means that we can add, edit and delete them there. For that,

4
00:00:18,300 --> 00:00:27,420
we obviously need a brand new screen and that will be the user products screen, hence the file could be

5
00:00:27,420 --> 00:00:28,630
named user_products_screen.dart

6
00:00:28,660 --> 00:00:37,620
and it'll be a stateless widget with our user products screen widget in there or as

7
00:00:37,620 --> 00:00:38,400
a name

8
00:00:38,610 --> 00:00:42,540
and of course, we import material.dart from the Flutter package.

9
00:00:42,570 --> 00:00:48,390
Now the idea on the user products screen is to show a list of all the products of the user

10
00:00:48,390 --> 00:00:51,420
and for now, that will be all the products we have in this app.

11
00:00:51,420 --> 00:00:57,540
Later once we added authentication and users, we'll be able to differentiate between products by user,

12
00:00:57,540 --> 00:01:00,780
for now we only have one user who owns all the products

13
00:01:00,990 --> 00:01:05,530
and I want to show a list of the products here and on every product, we should be able to edit or delete

14
00:01:05,530 --> 00:01:05,760
it

15
00:01:06,000 --> 00:01:10,680
and of course, I also want to have an option of adding a brand new product.

16
00:01:10,680 --> 00:01:16,440
So since this will control the entire page, I'll add a scaffold here because I want to have

17
00:01:16,440 --> 00:01:22,980
an appBar and I want it for the background color and so on and here on the appBar argument, I add the app

18
00:01:22,980 --> 00:01:29,040
bar widget as we did it a couple of times already and we can add a title here which is a text widget

19
00:01:29,040 --> 00:01:32,580
where we say your products or anything like that.

20
00:01:32,610 --> 00:01:38,700
Now of course beside that, we also might want to have some actions here or namely at least one action,

21
00:01:38,850 --> 00:01:46,260
a plus button which allows us to go to a new screen where we are able to add a new product.

22
00:01:46,260 --> 00:01:55,080
So here, I will add an IconButton and that takes an icon as an argument, so an icon widget and the icon I want

23
00:01:55,080 --> 00:01:59,620
to use from the icons package is the add icon.

24
00:01:59,630 --> 00:02:05,210
Now of course, we also have to do something when this gets pressed and that something will be to navigate

25
00:02:05,480 --> 00:02:07,320
to the new product screen,

26
00:02:07,400 --> 00:02:09,220
we'll work on that in a second.

27
00:02:09,230 --> 00:02:15,610
First of all, let's continue working here on this page and therefore in the body of that scaffold,

28
00:02:15,620 --> 00:02:22,590
I now want to present that list of products in the end. I want to have a little bit of padding around

29
00:02:22,590 --> 00:02:22,880
that, so I'll

30
00:02:22,910 --> 00:02:32,400
first of all add a padding widget with a padding of EdgeInsets.all of 8 maybe,

31
00:02:32,400 --> 00:02:34,390
of course that's always up to you

32
00:02:34,470 --> 00:02:40,470
and then as a child in a padding, have a ListView. Now since we could theoretically have an infinite

33
00:02:40,470 --> 00:02:45,930
amount of products, I'll use the ListView.builder here to have possible performance improvements for

34
00:02:45,930 --> 00:02:47,210
longer lists

35
00:02:47,430 --> 00:02:52,380
and you know to use that, we need an item count and we need an item builder. Now the item count

36
00:02:52,380 --> 00:02:57,570
here of course should take the amount of products we have. Now for the moment, that simply are all the

37
00:02:57,570 --> 00:03:03,060
products we have and we get them from our products provider, from our provided products object to be

38
00:03:03,060 --> 00:03:04,320
precise.

39
00:03:04,320 --> 00:03:09,930
So here, I want to set up a listener and therefore first of all, we need the provider package and there,

40
00:03:09,930 --> 00:03:11,250
the provider.dart file

41
00:03:11,820 --> 00:03:17,580
and then of course we need to get access to the products class and we get that from the providers folder

42
00:03:17,730 --> 00:03:19,540
and there, products.dart.

43
00:03:19,540 --> 00:03:30,970
With these two imports added, we can set up a listener here and we can get our products data here with

44
00:03:30,970 --> 00:03:39,900
the help of provider of as we did it before in this course, where we then of course have to add this

45
00:03:40,020 --> 00:03:45,690
generic annotation with the angled brackets and let the provider package know that we want to tap into

46
00:03:45,690 --> 00:03:52,310
the products object, the nearest provided products object and get access to that.

47
00:03:52,310 --> 00:03:58,520
So now we're storing that in products data and here, I also do want to listen of course because if we

48
00:03:58,520 --> 00:04:03,830
for example delete a product, I want to rebuild that list and obviously of course, you could therefore

49
00:04:03,830 --> 00:04:09,740
also use consumer and only wrap the ListView with that, instead of the entire widget because wrapping

50
00:04:09,740 --> 00:04:16,730
the entire widget will rebuild the entire widget even if the appBar doesn't really depend on the products

51
00:04:16,820 --> 00:04:21,740
but of course for one, you can work around this with a couple of const improvements here like this, then

52
00:04:21,740 --> 00:04:27,790
these widgets will not get rebuilt because Flutter is able to detect that they can't have changed

53
00:04:27,890 --> 00:04:30,590
and in addition, this is not too bad,

54
00:04:30,600 --> 00:04:34,950
the majority of the page will rebuild, it won't hurt too much if that also rebuilds

55
00:04:35,030 --> 00:04:38,990
but you could use consumer down there if you wanted to.

56
00:04:38,990 --> 00:04:46,220
I'm using provider of here, get my product data and then with the product data, from there, the items

57
00:04:46,250 --> 00:04:48,260
is my list of products,

58
00:04:48,260 --> 00:04:55,300
so the length of that list determines how many items or how many list entries I want to render here.

59
00:04:55,520 --> 00:05:01,070
The rendering then as you learned is done with the item builder of course and that gets the context which

60
00:05:01,070 --> 00:05:01,970
I don't need here,

61
00:05:01,970 --> 00:05:08,600
hence I add a blank, an underscore and then the index for which it's building that entry.

62
00:05:08,600 --> 00:05:12,360
Now of course the question is, how should a single product look like?

63
00:05:12,440 --> 00:05:19,280
Now we have our product item widget of course but that's a grid item and not the list item I want to

64
00:05:19,280 --> 00:05:20,360
have here.

65
00:05:20,450 --> 00:05:25,760
So I'll add a new widget here which will be a user product item

66
00:05:29,060 --> 00:05:39,590
and that as so often will be a stateless widget, user product item and there, let's import material.dart

67
00:05:39,650 --> 00:05:44,720
and now here, we can determine how a single item should look like in our list of items.

68
00:05:44,810 --> 00:05:47,410
And as always, you are totally free to build this

69
00:05:47,450 --> 00:05:48,920
however you want, 

70
00:05:49,610 --> 00:05:56,600
I will use the ListTile widget which is built into Flutter and there, set a title which should display

71
00:05:56,720 --> 00:05:58,160
the name of the product.

72
00:05:58,160 --> 00:06:04,190
So for that, let's say first of all define which information we want to get here in this widget from

73
00:06:04,190 --> 00:06:12,470
outside and outside will be our user product screen here in the end. Well I definitely want the title,

74
00:06:12,570 --> 00:06:14,300
I also want to show the image,

75
00:06:14,310 --> 00:06:18,400
so I want to get the imageUrl here and that actually is already

76
00:06:18,450 --> 00:06:21,030
all I need here I think.

77
00:06:21,090 --> 00:06:28,140
So let's then add the constructor, user product item and set this either with positional or named arguments,

78
00:06:28,500 --> 00:06:29,520
up to you

79
00:06:29,520 --> 00:06:36,320
and then we can use the title down there in the title argument or in the title place on the ListTile

80
00:06:36,480 --> 00:06:41,150
and I also want to add a leading widget or a leading entry here to the ListTile

81
00:06:41,150 --> 00:06:41,850
and there

82
00:06:41,850 --> 00:06:48,780
I want to use the CircleAvatar but now not to show some text but actually, to add a background image,

83
00:06:48,850 --> 00:06:54,050
so an image that should be shown inside of that avatar and that will now be my 

84
00:06:54,060 --> 00:06:55,200
imageUrl.

85
00:06:55,230 --> 00:06:57,390
Now here's something which we haven't done before,

86
00:06:57,390 --> 00:07:02,040
background image does not take a widget but an image provider.

87
00:07:02,280 --> 00:07:09,750
So it does not take Image.network which would build a new widget but instead, a provider that yields

88
00:07:09,810 --> 00:07:10,960
a NetworkImage,

89
00:07:11,010 --> 00:07:18,120
sounds strange but such providers are built into Flutter as well. Instead of Image.network,

90
00:07:18,120 --> 00:07:22,570
you use NetworkImage, one name and one class.

91
00:07:22,570 --> 00:07:28,290
Now of course, there are equivalents for asset image for example in case you have an image which is included

92
00:07:28,290 --> 00:07:29,340
in your app.

93
00:07:29,340 --> 00:07:31,410
Here we use NetworkImage

94
00:07:31,530 --> 00:07:37,350
and that simply takes the URL as an input and the URL here of course is simply imageUrl.

95
00:07:40,350 --> 00:07:45,750
Now on the NetworkImage, you can't set up a fit or anything like that because it's not a widget, it's in the

96
00:07:45,750 --> 00:07:53,310
end just an object that does the fetching of the image and then forwards it to CircleAvatar through

97
00:07:53,310 --> 00:07:59,550
that background image argument and CircleAvatar will do the sizing and so on to size the image into

98
00:07:59,550 --> 00:08:01,010
itself.

99
00:08:01,020 --> 00:08:10,830
So with that, we also add the image here. The missing piece is a place for us to interact with that item,

100
00:08:10,870 --> 00:08:13,620
so edited or deleted

101
00:08:14,290 --> 00:08:22,330
and for that, I'll add the trailing argument, I in the end want to have a row here because I'll have two

102
00:08:22,330 --> 00:08:32,300
options and in that row, I'll add two icon buttons. The first button will show an icon which is an icon widget

103
00:08:32,690 --> 00:08:36,480
which should be added icon which is this pen icon here

104
00:08:36,640 --> 00:08:42,240
and when we press that, I in the end want to start editing this product.

105
00:08:42,530 --> 00:08:48,560
The second IconButton uses the delete icon, this trash icon

106
00:08:48,560 --> 00:08:53,570
and there of course unsurprisingly, I want to delete that product.

107
00:08:53,570 --> 00:09:00,500
Now we can also set some colors for these icons and on the delete IconButton, I'll use theme of context

108
00:09:00,530 --> 00:09:08,480
and then use my error color which is some red color and for the first button here, I'll use theme of

109
00:09:08,480 --> 00:09:13,540
context and then simply the primary color.

110
00:09:13,570 --> 00:09:21,910
Now let's use that user product item here in the user products screen widget.

111
00:09:21,930 --> 00:09:28,590
So there, we first of all need to add an import where we go to the widgets folder and then 

112
00:09:28,650 --> 00:09:30,140
user_product_item.dart

113
00:09:30,150 --> 00:09:35,580
and then here, let's create a user product item widget.

114
00:09:35,580 --> 00:09:40,290
Now here we need to forward the title and the imageUrl because these are the two arguments we expect

115
00:09:40,290 --> 00:09:43,000
here in our user product item widget

116
00:09:43,380 --> 00:09:49,980
and of course we get that from productsData.items which are our products for the index for which

117
00:09:49,980 --> 00:09:51,940
this list item is being built

118
00:09:52,020 --> 00:10:00,800
and then here, simply access the title and of course do the same here for the imageUrl

119
00:10:00,850 --> 00:10:04,020
and with that, we're building a user product item there.

120
00:10:04,020 --> 00:10:10,710
Now we just need to be able to go to that user products screen and I again want to use named routing

121
00:10:10,710 --> 00:10:11,430
for that,

122
00:10:11,430 --> 00:10:18,940
so I'll add the good old static const routeName here where I say or where I have user products, 

123
00:10:18,940 --> 00:10:21,970
/user-products as a name, as always this is totally up to you

124
00:10:22,120 --> 00:10:32,480
and we can now register this here in the main.dart file. For that, let's import screens/user_products_screen

125
00:10:33,880 --> 00:10:41,200
and let's then go down to the route table and use the user_products_screen.routeName as a key

126
00:10:41,200 --> 00:10:48,340
and then we have that builder created by Flutter or called by Flutter which builds a user products screen

127
00:10:48,340 --> 00:10:49,060
widget

128
00:10:49,120 --> 00:10:51,000
and now we can navigate to that

129
00:10:51,070 --> 00:10:54,700
and of course I want to add an entry in my drawer for that.

130
00:10:54,760 --> 00:11:01,940
So in the app drawer, I'll simply copy a ListTile with a divider above it and add it after the last ListTile

131
00:11:01,940 --> 00:11:07,330
here, after the orders ListTile. Here I'll say manage products

132
00:11:11,460 --> 00:11:13,390
and maybe use the added

133
00:11:13,410 --> 00:11:15,710
icon here as well next to it

134
00:11:15,870 --> 00:11:25,150
and then here, we of course don't go to the order screen but instead, we import the user product screen

135
00:11:25,150 --> 00:11:33,100
from screens here and then navigate to that by using user_product_screen.routeName, so not by instantiating

136
00:11:33,100 --> 00:11:34,630
it but by using the routeName

137
00:11:34,630 --> 00:11:42,980
constant here. Back in the application, now we see that new entry here in side drawer and if we tap it,

138
00:11:43,010 --> 00:11:46,760
then we're taken to that user product screen.

139
00:11:46,760 --> 00:11:51,970
Now what's obviously missing here however are our products and also a way to go back,

140
00:11:51,980 --> 00:11:56,680
so a side drawer. Now let's have a look, what's wrong about the products here.

141
00:11:57,730 --> 00:12:06,810
We're getting an error and the error I'm getting seems to be related to sizing, the sizing of something

142
00:12:07,500 --> 00:12:16,000
and actually that should be a problem here in the user products item widget, in that row of icon buttons,

143
00:12:16,050 --> 00:12:22,580
this row takes as much space as it can get and trailing the place where we insert this into the 

144
00:12:22,590 --> 00:12:26,040
ListTile doesn't restrict that size, so that should cause the error and

145
00:12:26,190 --> 00:12:33,030
we can simply get rid of that by wrapping this with a container where we set a fixed width here and a

146
00:12:33,030 --> 00:12:36,270
fixed width of 100 pixels should suffice.

147
00:12:36,360 --> 00:12:41,090
Now if we do that, now we have our items here and that looks now way better

148
00:12:41,100 --> 00:12:46,950
and you see on every item we have the pen and the trash icon. You also see that image and if you of

149
00:12:46,950 --> 00:12:52,970
course wanted to, you could add a card behind that ListTile to have a little bit of a background color

150
00:12:52,980 --> 00:12:55,890
and a drop shadow or anything like that.

151
00:12:56,340 --> 00:13:01,920
I rather will add a divider between these items and still add the drawer to go back.

152
00:13:02,220 --> 00:13:09,470
So to start with the divider in the user products screen where I render the user product items here,

153
00:13:10,130 --> 00:13:16,760
in the end I think it's nice to have a little divider after every item. So we can wrap this into a column

154
00:13:16,760 --> 00:13:17,290
here,

155
00:13:17,450 --> 00:13:28,300
the user product item, like this and have a divider after every user product item, like this.

156
00:13:28,300 --> 00:13:30,340
So that's a little optical thing here,

157
00:13:30,370 --> 00:13:32,220
nice little horizontal lines.

158
00:13:32,290 --> 00:13:36,400
Now to also add that drawer on the user products screen,

159
00:13:36,400 --> 00:13:41,950
we of course simply go to the scaffold widget there and anywhere on it, as the first, second or last

160
00:13:41,950 --> 00:13:44,800
argument, doesn't matter, you add drawer

161
00:13:44,800 --> 00:13:47,260
and now here I want to use my app drawer,

162
00:13:47,320 --> 00:13:54,520
so let's import that from the widgets folder, app_drawer.dart. With that import added, let's create our

163
00:13:54,700 --> 00:14:00,400
app drawer widget here and now with that, we also have a way of going back because now we can open the

164
00:14:00,400 --> 00:14:01,400
drawer here too,

165
00:14:01,510 --> 00:14:05,680
we can go back to the shop and then back to managed products and so on.

166
00:14:05,890 --> 00:14:07,580
With that, we have the products page,

167
00:14:07,600 --> 00:14:12,430
let's now work on the add and edit product page and of course make sure that the delete button also

168
00:14:12,430 --> 00:14:13,120
does something.
