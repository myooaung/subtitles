1
00:00:02,350 --> 00:00:04,000
So we're missing validation here,

2
00:00:04,060 --> 00:00:08,800
our form can be submitted with any kind of data, no matter whether it's valid,

3
00:00:08,800 --> 00:00:15,950
it fulfills our expectations or not and that is something we of course can change. Back in our widgets,

4
00:00:16,070 --> 00:00:24,590
on every text form field, you can add a validator argument. Now validator takes a function which takes a value

5
00:00:25,830 --> 00:00:33,180
and then returns something, to be precise, it returns a string.

6
00:00:33,280 --> 00:00:39,150
Now the value you get is the value that was currently entered into the text form field and the validator

7
00:00:39,540 --> 00:00:47,130
is executed when you call a specific validate method or when you set, on the form here, auto validate to

8
00:00:47,130 --> 00:00:49,470
true, it will execute on every keystroke,

9
00:00:49,470 --> 00:00:51,110
so that's up to you how you configure that.

10
00:00:51,180 --> 00:00:56,610
By default, it's not executed on every keystroke but when you call the validate method on your form state

11
00:00:56,640 --> 00:01:00,160
which I will show you in the second. So you then get what the user entered

12
00:01:00,180 --> 00:01:04,770
and now the idea here is that if you return null, this is treated as

13
00:01:04,770 --> 00:01:07,860
there is no error, the input is correct,

14
00:01:07,860 --> 00:01:10,410
so returning null means input is correct.

15
00:01:10,680 --> 00:01:17,350
If you return a text like this is wrong, the text is always treated as your error text,

16
00:01:17,490 --> 00:01:20,390
so as the message you want to show to the user.

17
00:01:20,790 --> 00:01:23,600
So therefore here, you want to show or you want to return a text

18
00:01:23,610 --> 00:01:27,790
if you have a validation error and you want to return null if you don't have one.

19
00:01:27,990 --> 00:01:33,690
Now it's up to you when you have an error and what not, you write your own validation logic

20
00:01:33,720 --> 00:01:36,420
and you can get as complex there as you want.

21
00:01:36,720 --> 00:01:41,400
In the end, of course it's all about comparing that value or checking that value to certain conditions

22
00:01:41,400 --> 00:01:42,630
you have,

23
00:01:42,630 --> 00:01:47,040
for example here I simply want to ensure that the value is not empty.

24
00:01:47,040 --> 00:01:52,290
So here I can add an if check and check if value is empty and if that's the case, then we have an error,

25
00:01:52,320 --> 00:01:58,920
so then I will return a text here, a string where I say please provide a value and you could of course

26
00:01:58,920 --> 00:02:03,730
return any text you want. Else or simply after this if statement,

27
00:02:03,730 --> 00:02:07,080
so if we don't make it into this if statement, execution will continue,

28
00:02:07,080 --> 00:02:12,900
execution will stop if we return here though. So after this if statement here, if we reach this return

29
00:02:12,900 --> 00:02:19,040
statement, I will return null because then we have no error. Now the good thing is such an error message

30
00:02:19,100 --> 00:02:20,870
will then be shown automatically,

31
00:02:20,870 --> 00:02:24,960
you can still configure it here in decoration. There,

32
00:02:25,070 --> 00:02:29,130
you can configure how long the error message may be that is displayed,

33
00:02:29,210 --> 00:02:35,870
you can set its general style by applying a text style here, so you can set the font weight, the font

34
00:02:35,870 --> 00:02:41,990
size, the font family, everything you can configure on the label and on normal text as well and you can

35
00:02:41,990 --> 00:02:48,230
also use a default error text which would be shown instead of the message you're returning. Here however,

36
00:02:48,230 --> 00:02:53,210
I'm fine with that message and therefore the question is how can we now trigger validation if we don't

37
00:02:53,210 --> 00:02:57,740
use auto validate on the form? We can trigger it through the form key.

38
00:02:57,740 --> 00:03:05,150
When we save the form, then we can also call form current state validate and this will trigger all the

39
00:03:05,150 --> 00:03:09,690
validators and this will return true if they all return

40
00:03:09,710 --> 00:03:11,270
that there is no error,

41
00:03:11,270 --> 00:03:16,730
so if they all return null and will return false if at least one validator returns a string and hence

42
00:03:16,730 --> 00:03:25,880
has an error. So here, I'll store the result in an isValid constant and only isValid is true,

43
00:03:25,930 --> 00:03:30,350
I want to save that or put in other words, if it's not true,

44
00:03:30,350 --> 00:03:33,890
hence the exclamation mark, if it's false, then I will return

45
00:03:33,890 --> 00:03:39,860
and since this cancels the function execution or stops the function execution at this point, this code

46
00:03:39,860 --> 00:03:41,470
will then not run,

47
00:03:41,480 --> 00:03:46,720
so now I'll only save the form and output my results if the form is valid.

48
00:03:47,120 --> 00:03:47,530
So hence

49
00:03:47,540 --> 00:03:53,180
now if I save this and I have an empty title and I hit save here, you see we get the error message,

50
00:03:53,180 --> 00:03:59,200
we get this nice error style and as soon as I enter this and it's valid, we get rid of that.

51
00:03:59,240 --> 00:04:05,300
So now, this is how you add validation and obviously, feel free to now add this on the other inputs on

52
00:04:05,300 --> 00:04:11,360
your own as well with any rules you want. In the next video, we'll add validation together for the remaining

53
00:04:11,360 --> 00:04:11,810
inputs.
