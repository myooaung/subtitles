WEBVTT
1
00:00:02.370 --> 00:00:08.400
So with the basics of routing covered, let's now make sure that we continue working on the app before

2
00:00:08.400 --> 00:00:13.770
we then dive into other navigation and routing features like tabs and working on the app of course means

3
00:00:14.130 --> 00:00:19.560
that when we for example select Italian as a category, it would be nice if we could display some

4
00:00:19.560 --> 00:00:21.000
recipes here.

5
00:00:21.060 --> 00:00:27.030
So that's the next thing I want to work on. In the CategoryMealsScreen here, instead of showing that

6
00:00:27.030 --> 00:00:27.840
center text,

7
00:00:27.840 --> 00:00:36.100
the goal of course has to be to show something else, to show a list of recipes. So for that, instead of

8
00:00:36.100 --> 00:00:44.330
having this centered widget here, we can add a ListView which we use to output the recipes.

9
00:00:44.410 --> 00:00:49.030
Now just as you learned it before in the course, you can build that ListView in two ways - you can

10
00:00:49.060 --> 00:00:56.440
either use the constructor here and add children or use the special builder constructor to have a list

11
00:00:56.440 --> 00:01:02.650
view where items are managed, such that items that are not on the screen are actually removed and only

12
00:01:02.650 --> 00:01:08.470
items that are on the screen are rendered which provides a better performance for very long lists.

13
00:01:08.470 --> 00:01:13.630
Now since we potentially have a lot of recipes, a lot of meals which we want to show in that category

14
00:01:13.900 --> 00:01:19.080
and we don't know in advance how many it will be, I will go for the builder approach here.

15
00:01:19.180 --> 00:01:24.940
Now when using the builder, you need your item builder argument where you provide a builder method,

16
00:01:25.000 --> 00:01:30.070
so the method this ListView builder will call for every item, for every list item it tries to add to

17
00:01:30.070 --> 00:01:30.860
the screen

18
00:01:31.090 --> 00:01:40.030
and there, you get a context and you get the index of the element which is getting rendered and then

19
00:01:40.030 --> 00:01:42.680
here in the body of that item builder function,

20
00:01:42.790 --> 00:01:49.030
you have to return a widget which is built as a single row here or as a single list item.

21
00:01:49.030 --> 00:01:54.280
Now besides that, you also need to tell the ListView.builder how many items you will have and that can

22
00:01:54.280 --> 00:01:56.410
be done with item count here.

23
00:01:56.440 --> 00:02:03.520
Now what's definitely missing here is of course a list of recipes. In the dummy_data.dart file which

24
00:02:03.520 --> 00:02:05.990
I simply use as a dummy data source here,

25
00:02:06.010 --> 00:02:08.090
thus far I only have categories,

26
00:02:08.110 --> 00:02:11.500
now it's time to also add recipes. For that,

27
00:02:11.500 --> 00:02:16.120
let's first of all define how a recipe or a meal should look like.

28
00:02:16.120 --> 00:02:21.820
So I'll add a meal.dart file which describes the model for a meal.

29
00:02:21.820 --> 00:02:23.820
So in there, I'll add a class, meal

30
00:02:24.370 --> 00:02:30.520
and now of course there are thousands of different ways of defining how a meal should look like.

31
00:02:30.580 --> 00:02:34.240
Here's my definition of it for this application - 

32
00:02:34.390 --> 00:02:38.560
every meal should have a unique ID by which we can identify it,

33
00:02:38.560 --> 00:02:44.050
in addition, every meal should have a list of categories ID to which it belongs

34
00:02:44.050 --> 00:02:49.060
because every category here in the dummy data has an ID to identify it

35
00:02:49.060 --> 00:02:53.140
and of course every meal should be part of one or more categories.

36
00:02:53.140 --> 00:03:00.310
So here, I want to have a list of strings which are my category IDs

37
00:03:02.930 --> 00:03:05.250
or categories simply.

38
00:03:05.330 --> 00:03:12.780
So that's another thing which we need in a meal so that we can map meals to categories. Besides that

39
00:03:12.780 --> 00:03:17.520
of course, every meal should have a title or a name, whatever you want to name it

40
00:03:17.520 --> 00:03:19.960
and it should also have an image and here,

41
00:03:19.970 --> 00:03:20.910
I'll use an imageUrl

42
00:03:20.940 --> 00:03:27.430
so that we use a network image. So we'll not store the image locally as part of our app bundle

43
00:03:27.480 --> 00:03:33.330
because in a real app, these meals would probably be created on some server and fetched dynamically by

44
00:03:33.330 --> 00:03:34.050
your app,

45
00:03:34.050 --> 00:03:39.450
you don't want to hardcode all the data into your app bundle and therefore, we will use a network image

46
00:03:39.450 --> 00:03:45.060
here so that the image doesn't have to be shipped with our app, hence we could also, if we would be fetching

47
00:03:45.060 --> 00:03:47.390
our recipes from a server which we are not here

48
00:03:47.400 --> 00:03:53.520
but if we would, then we could also of course fetch new recipes with new images which didn't exist when

49
00:03:53.520 --> 00:03:54.560
we created the app,

50
00:03:54.660 --> 00:04:03.390
hence this external image with the imageUrl. Now obviously, every meal also needs a list of strings

51
00:04:03.390 --> 00:04:05.920
that describe the ingredients

52
00:04:06.090 --> 00:04:09.170
and of course you could also have a more complex data model here,

53
00:04:09.180 --> 00:04:14.220
you could say every ingredient is not just a string, not just the name of the ingredient but it could

54
00:04:14.220 --> 00:04:16.890
also be a mixture of name and quantity

55
00:04:16.890 --> 00:04:22.380
but I don't want to make this too complicated here since the main focus of this app of course is navigation

56
00:04:22.560 --> 00:04:24.930
and therefore we'll just go with a list of strings,

57
00:04:24.930 --> 00:04:31.530
so just a list of ingredient names or names where the quantity is already involved, like three tablespoons

58
00:04:31.530 --> 00:04:33.360
of sugar, something like this.

59
00:04:33.780 --> 00:04:41.400
Then we also need steps and that's another list of strings, simply text steps that describe what you have to

60
00:04:41.400 --> 00:04:49.800
do to create that meal. We also might want a duration that gives viewers of our app an indication of

61
00:04:49.800 --> 00:04:57.150
how long this meal will take to create or to prepare and maybe we also want to say something about the

62
00:04:57.150 --> 00:05:03.150
complexity of that meal and maybe also about the affordability, just some extra information we have as

63
00:05:03.150 --> 00:05:11.430
part of this application. For this, we could add a complexity variable and now the question is, which

64
00:05:11.430 --> 00:05:13.260
type of data would that be?

65
00:05:13.260 --> 00:05:21.120
It could be a string so that we have for example a value like simple but then we have to remember these

66
00:05:21.120 --> 00:05:27.340
exact names when we work with them in our app, when we compare them or anything like that.

67
00:05:27.420 --> 00:05:32.820
Instead, we could use numbers which makes this a bit simpler and avoids typos when we use that name

68
00:05:32.820 --> 00:05:33.390
in the app.

69
00:05:33.540 --> 00:05:38.900
So we could say 0 is simple, 1 is medium and 2 is difficult.

70
00:05:38.970 --> 00:05:45.990
The problem with that is that we have to remember this mapping of numbers to meaning, so that zero means

71
00:05:46.050 --> 00:05:52.050
simple is something we as a developer have to remember and therefore, an int is a good but not the perfect

72
00:05:52.050 --> 00:05:53.100
type here.

73
00:05:53.310 --> 00:05:59.780
A better type is an enum and we used enums before, we just haven't created one ourselves.

74
00:05:59.790 --> 00:06:06.190
You do create a new enum by simply typing enum, which is a keyword in Dart and then curly braces and

75
00:06:06.200 --> 00:06:13.290
now between the curly braces, you add your different values or options this should provide because an enum

76
00:06:13.290 --> 00:06:19.390
is essentially a type that helps you create a choice amongst a couple of alternatives.

77
00:06:19.410 --> 00:06:25.350
So here, if we have an enum which we give a name of complexity and that's also important, you need to

78
00:06:25.350 --> 00:06:33.060
give your enum a name, then you add the values here, for example simple, challenging, hard.

79
00:06:33.150 --> 00:06:42.390
Now behind the scenes, what Dart does is it simply uses 0, 1 and 2 here, it maps these values here to normal

80
00:06:42.450 --> 00:06:48.240
integers but you as a developer can work with the labels which is of course simpler for us humans and

81
00:06:48.240 --> 00:06:55.010
for the computer again, numbers are used and then we can use our complexity enum as a type here because

82
00:06:55.010 --> 00:06:59.230
an enum, just like a class, also creates a type which you can use

83
00:06:59.400 --> 00:07:06.660
and now we can use this enum type here to describe the complexity of our meal and we always have a choice

84
00:07:06.960 --> 00:07:08.600
amongst these three options,

85
00:07:08.610 --> 00:07:14.760
we have to pick one of these three options otherwise Dart will give us an error and we can't miss type

86
00:07:14.790 --> 00:07:21.150
because the way we use an enum is like this. If we assign a value here, we do it by accessing our enum

87
00:07:21.420 --> 00:07:27.210
and then with a dot notation, we get autocompletion here and we use one of these available values

88
00:07:27.540 --> 00:07:34.040
and if we would add some other value like difficult, well then we would get an error here in Dart.

89
00:07:34.170 --> 00:07:36.950
So that's the amazing thing about enums

90
00:07:37.050 --> 00:07:42.690
and that's also why of course Flutter uses enums heavily and we used enums implicitly thus far already

91
00:07:42.930 --> 00:07:48.520
for some configuration values like alignment and so on which sometimes provided us enums.

92
00:07:48.540 --> 00:07:50.650
So here we have the complexity enum,

93
00:07:50.730 --> 00:07:58.470
I will create another enum here and that will be the affordability, to describe how affordable that meal

94
00:07:58.470 --> 00:08:07.690
is. The affordability could have values of affordable, pricey and luxurious

95
00:08:07.880 --> 00:08:14.690
and of course it's up to you how you build this and which values you want to use and that with that affordability

96
00:08:14.720 --> 00:08:20.670
enum added, we can of course add another variable or another property here to our meal class,

97
00:08:20.690 --> 00:08:29.890
we can use affordability as a type here for an affordability variable or property on the meal class.

98
00:08:29.910 --> 00:08:34.200
Now we're almost done but there are four more properties which I want to have here

99
00:08:34.200 --> 00:08:37.790
and these are properties which we'll later use for filtering.

100
00:08:37.830 --> 00:08:39.460
These will be boolean values

101
00:08:39.600 --> 00:08:48.230
and I want to use isGlutenFree here, another bool for isLactoseFree,

102
00:08:49.160 --> 00:08:50.100
another bool

103
00:08:50.100 --> 00:08:57.330
property, isVegan and another bool property, isVegetarian

104
00:08:57.480 --> 00:09:03.330
and again this is something we'll use later once we added this settings or this filterings screen

105
00:09:03.540 --> 00:09:09.720
where we can make sure that certain recipes, certain meals are not included in our app and for that and

106
00:09:09.720 --> 00:09:11.490
to exclude meals,

107
00:09:11.490 --> 00:09:17.580
we of course need to describe on every meal if it matches one of our filters. So that could be a dummy

108
00:09:17.580 --> 00:09:18.720
data model,

109
00:09:18.720 --> 00:09:24.480
now as always, I want to provide a constructor here so that we can create meal objects and populate all

110
00:09:24.480 --> 00:09:25.980
these properties

111
00:09:25.980 --> 00:09:31.230
and for that in the constructor, we essentially set all these properties. Since we have a lot of

112
00:09:31.230 --> 00:09:31.880
properties,

113
00:09:31.890 --> 00:09:36.990
I'm not the biggest fan of using positional arguments here because you then have to remember that the

114
00:09:36.990 --> 00:09:38.540
first argument is ID.

115
00:09:38.540 --> 00:09:40.440
the second argument is title and so on,

116
00:09:40.440 --> 00:09:46.980
so instead I'll use named arguments here and then assign values to this ID, these categories and so

117
00:09:46.980 --> 00:09:47.760
on.

118
00:09:47.790 --> 00:09:52.470
Now before I continue, it's important that I want to make sure that all these arguments are actually

119
00:09:52.710 --> 00:09:53.700
required,

120
00:09:53.790 --> 00:10:03.450
so that means that you must not leave an argument out here and therefore, we should import a package out

121
00:10:03.450 --> 00:10:08.190
there and that's the Flutter package and there, the foundation.dart file because this foundation.dart

122
00:10:08.190 --> 00:10:13.570
file unlocks one special decorator which we can use here in front of our arguments,

123
00:10:13.680 --> 00:10:20.310
the @required decorator which ensures that we get an error if we try to create a meal without one

124
00:10:20.310 --> 00:10:22.170
of the required arguments

125
00:10:22.350 --> 00:10:26.790
and now we can simply require all these properties we have here as arguments.

126
00:10:26.880 --> 00:10:38.070
So the title, the imageUrl, the ingredients of course, also the steps,

127
00:10:40.670 --> 00:10:48.760
also of course the duration, then of course also the complexity,

128
00:10:49.960 --> 00:10:54.130
then the affordability and so on.

129
00:10:54.160 --> 00:10:57.610
So I'm going through all my properties, isGlutenFree,

130
00:11:00.170 --> 00:11:12.290
then also isLactoseFree, then of course also required isVegan and required isVegetarian.

131
00:11:12.320 --> 00:11:13.200
and

132
00:11:16.900 --> 00:11:20.670
with that,

133
00:11:20.870 --> 00:11:27.220
let's see, which error am I getting here? isGlutenFree,

134
00:11:27.220 --> 00:11:28.940
yes I missed the

135
00:11:28.960 --> 00:11:33.940
this keyword here so let's add that here and with that, this is looking good.

136
00:11:33.940 --> 00:11:40.430
This is the finished meal class here which indeed now allows us to add meals.

137
00:11:40.480 --> 00:11:47.350
Now with that, we can add some dummy data to the dummy_data.dart file and you'll find an updated version

138
00:11:47.350 --> 00:11:52.480
of that file attached to this video which now does not only include the categories which we already

139
00:11:52.480 --> 00:12:00.730
had in there but which also contains a list of meals. So you can simply copy and paste that into your

140
00:12:00.850 --> 00:12:02.880
dummy_data.dart file,

141
00:12:02.920 --> 00:12:16.670
here it is and there we then have a long list of meals which you can add now. Now for meal to be available,

142
00:12:16.670 --> 00:12:22.070
you need to make sure that you also add an import to this file, if it's not there already, to the

143
00:12:22.070 --> 00:12:26.080
meal.dart file in the models folder

144
00:12:26.250 --> 00:12:33.300
and one thing I forgot is in the meal.dart file, of course our constructor here should be a const constructor

145
00:12:33.570 --> 00:12:40.060
so that we can create immutable values here and also add const in front of this list here,

146
00:12:40.080 --> 00:12:41.580
the dummy meals list.
