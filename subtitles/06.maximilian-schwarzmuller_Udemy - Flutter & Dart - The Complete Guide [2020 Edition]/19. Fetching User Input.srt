1
00:00:02,280 --> 00:00:06,930
So having the button is good but of course we want to actually add a new transaction when we press

2
00:00:06,930 --> 00:00:10,620
it and for that, we first of all need to collect the user input.

3
00:00:10,620 --> 00:00:16,110
It's good that we have these text fields but how can we get access to what the user entered?

4
00:00:16,110 --> 00:00:18,280
There are two ways of getting access,

5
00:00:18,450 --> 00:00:23,570
it's up to you which one you choose, it also depends on the complexity of the form you're building.

6
00:00:23,640 --> 00:00:29,400
The first way of getting access is that you simply save the user input with every keystroke, that you

7
00:00:29,400 --> 00:00:32,520
save it in a property.

8
00:00:32,520 --> 00:00:38,700
Now for that, we need a property in which we can save it and we can add it here to our widget

9
00:00:38,700 --> 00:00:43,580
but keep in mind that this is a stateless widget and what does this mean?

10
00:00:43,620 --> 00:00:49,350
It means that any data we have in there, like the transactions property, is immutable,

11
00:00:49,350 --> 00:00:50,520
we can't change it.

12
00:00:50,560 --> 00:00:58,260
Well technically we can change it but our changes will never be reflected on the user interface.

13
00:00:58,410 --> 00:01:04,310
Now actually here that wouldn't be a problem because with every keystroke, we could save the data

14
00:01:04,310 --> 00:01:09,510
the user entered and then only do something once we hit a button.

15
00:01:09,510 --> 00:01:15,870
So it's actually okay if we just save these changes without updating the user interface because there

16
00:01:15,870 --> 00:01:18,600
is no update we want to perform with every keystroke,

17
00:01:18,600 --> 00:01:24,330
we just want to save the data behind the scenes and we can do that because a stateless widget is still

18
00:01:24,330 --> 00:01:29,520
an object, still a normal class, so we can have properties in there which we can change, we just can't

19
00:01:29,610 --> 00:01:32,600
rerun the build method, we can't use set state here

20
00:01:32,640 --> 00:01:35,040
but again, that won't be needed.

21
00:01:35,060 --> 00:01:47,490
So what you can do therefore is you can add new properties here to your class, maybe a string title input

22
00:01:47,970 --> 00:01:57,240
and another string, amount input, that's by the way important, the input values are always strings by default,

23
00:01:57,270 --> 00:02:02,640
if you need a different value like a number here for the amount, then you need to convert it manually.

24
00:02:04,120 --> 00:02:06,310
So we have these two strings

25
00:02:06,310 --> 00:02:13,300
and now if we go down to our text fields, there you can add the onChanged listener. Now onChanged will

26
00:02:13,300 --> 00:02:19,750
fire with every keystroke. As you see, you have a couple of other listeners too, onEditingComplete is fired

27
00:02:19,750 --> 00:02:24,990
when the user presses the done, go or next or whatever it is button in the soft keyboard,

28
00:02:25,060 --> 00:02:29,540
so that would basically be that button on the bottom right corner, that can have a different look and

29
00:02:29,650 --> 00:02:33,940
meaning and you can configure that actually. By the way, you can ignore this here for now,

30
00:02:33,970 --> 00:02:40,420
this strange yellow thing here. So that is onEditingComplete and it's fired when that button is

31
00:02:40,420 --> 00:02:48,100
pressed. onSubmitted is kind of related but this fires whenever the done button is pressed, so not

32
00:02:48,100 --> 00:02:52,810
on every button in the bottom right corner basically but only for that done button and if you configured

33
00:02:52,810 --> 00:02:56,150
your text field to show a different button there, then it would not fire

34
00:02:56,320 --> 00:02:59,940
and onTap is fired whenever you tap into the text field.

35
00:02:59,950 --> 00:03:06,850
Now here, we need onChanged because onChanged fires for every keystroke. onChanged then requires us

36
00:03:06,850 --> 00:03:11,980
to pass reference, a pointer at a function which takes a string value,

37
00:03:11,980 --> 00:03:17,440
so not a function that has no arguments but a function that accepts exactly one argument which is of

38
00:03:17,440 --> 00:03:20,470
type string and that then returns nothing.

39
00:03:20,740 --> 00:03:25,450
You can use a named function here or you define an anonymous function,

40
00:03:25,450 --> 00:03:31,360
however as I just explained, it needs to be a function which takes a value.

41
00:03:31,360 --> 00:03:37,540
You don't need to add the type here because Dart is smart enough to infer this because onChanged expects

42
00:03:37,540 --> 00:03:43,540
a function that takes a string argument, Dart automatically understands that value here will be of type

43
00:03:43,540 --> 00:03:44,270
string.

44
00:03:44,290 --> 00:03:48,090
You also don't have to name this value, you can name it val, whatever you want.

45
00:03:48,100 --> 00:03:54,070
So now we get this, we have this function, it will be triggered for every keystroke and then in here since

46
00:03:54,070 --> 00:03:59,140
we're editing the title here, we can set title input equal to val.

47
00:03:59,200 --> 00:04:05,710
So that means we overwrite the current value of title input with the input the user chose here,

48
00:04:05,710 --> 00:04:12,660
so with the current input of that text input, of that text field. We can do the same for the amount, add

49
00:04:12,690 --> 00:04:19,290
onChanged, here get the value and then we can also use that shorter notation with the arrow because

50
00:04:19,290 --> 00:04:28,190
we have only one expression, there we can set amount input equal to val. With that, we have a setup where

51
00:04:28,190 --> 00:04:36,050
we register every keystroke and now we save that in our title input and in the amount input.

52
00:04:36,410 --> 00:04:41,810
Again, the UI won't be updated because we're not calling set state and we couldn't call it because we're

53
00:04:41,810 --> 00:04:48,090
in a stateless widget but that's not required here. To prove that it worked here when we press that

54
00:04:48,660 --> 00:04:56,190
add transaction button, I will print the title input, so the value we stored in there and also the amount

55
00:04:56,220 --> 00:05:04,700
input. Let's save all of that and again, you can't ignore this yellow black thing here at the bottom,

56
00:05:04,700 --> 00:05:07,240
I will explain what's up with that later

57
00:05:07,370 --> 00:05:14,180
and for the moment, we can enter some amount here, like 12.99

58
00:05:14,180 --> 00:05:20,690
and here, we can enter a title like test and you could use your physical keyboard for this too.

59
00:05:20,920 --> 00:05:28,260
If you then hit add transaction, you see test and 12.99 output here because these values were saved

60
00:05:28,270 --> 00:05:31,780
with every keystroke and therefore, we can also use them,

61
00:05:31,810 --> 00:05:39,010
the only thing we can't do right now is update our user interface based on that. Registering the input

62
00:05:39,010 --> 00:05:41,260
on every keystroke is perfectly fine,

63
00:05:41,260 --> 00:05:48,010
however here Flutter actually complains or gives us a warning that this MyHomePage class, which is

64
00:05:48,010 --> 00:05:49,630
marked as immutable,

65
00:05:49,630 --> 00:05:56,230
that's basically a flag the stateless widget sets, has a field, a property which changes or which is

66
00:05:56,230 --> 00:05:59,530
not final and that's true, title input and amount input are not final,

67
00:05:59,530 --> 00:06:04,250
they can change and actually the case we have here is a pretty niche case.

68
00:06:04,270 --> 00:06:10,090
Normally you don't have changeable properties in a stateless widget because you can't update the UI based

69
00:06:10,090 --> 00:06:11,800
on these changes anyways.

70
00:06:11,830 --> 00:06:16,630
This is one of the rare cases where we save some data and where we are perfectly fine with that having

71
00:06:16,630 --> 00:06:19,510
no direct impact on the user interface.

72
00:06:19,540 --> 00:06:25,630
Still, you might consider using a stateful widget here to get rid of that extra warning and to avoid

73
00:06:25,660 --> 00:06:28,330
using or writing suboptimal code,

74
00:06:28,330 --> 00:06:33,580
though technically this would work here and it also wouldn't be a horrible mistake.

75
00:06:33,700 --> 00:06:34,900
Now we'll have a problem

76
00:06:34,900 --> 00:06:38,560
anyways, I of course don't just want to print my results here,

77
00:06:38,590 --> 00:06:43,030
I want to create a new element or a new transaction

78
00:06:43,030 --> 00:06:49,510
and that in the end should then almost lead to some output on the screen because transactions, our list

79
00:06:49,510 --> 00:06:53,270
here should then actually change and hold that new transaction,

80
00:06:53,410 --> 00:07:00,940
so we'll have to switch to a stateful widget some point anyways. Before we do so

81
00:07:00,950 --> 00:07:06,470
however, let me first of all show you an alternative to registering this manually on every keystroke.

82
00:07:06,950 --> 00:07:08,150
Whilst you can do this

83
00:07:08,150 --> 00:07:13,040
and whilst this is especially useful if you have more complex logic that you maybe want to run on every

84
00:07:13,040 --> 00:07:18,830
keystroke, Flutter actually has a built-in mechanism that allows you to listen to every keystroke and

85
00:07:18,860 --> 00:07:21,590
then get the finished value once you're done.

86
00:07:21,620 --> 00:07:27,050
For that, I'll comment out the title input and amount input and I'll add two new properties which now are

87
00:07:27,050 --> 00:07:27,670
final

88
00:07:28,520 --> 00:07:37,550
and that is the title controller, which is created with a value of text editing controller and it's the

89
00:07:37,820 --> 00:07:44,570
amount controller which is also a text editing controller. Text editing controller is a class provided

90
00:07:44,570 --> 00:07:51,680
by Flutter and you can assign such a controller to your text fields with the help of the controller

91
00:07:51,740 --> 00:07:52,750
argument.

92
00:07:52,790 --> 00:08:00,920
So now to the title text field, I add my title controller and to the amount text field here, I'll add

93
00:08:00,950 --> 00:08:03,820
my amount controller.

94
00:08:03,860 --> 00:08:05,810
Now what do these controllers do?

95
00:08:07,320 --> 00:08:12,660
Flutter automatically connects the controllers with our text fields and these controllers in the end listen

96
00:08:12,660 --> 00:08:18,690
to the user input and save the user input and therefore here in onPressed, we can then print title

97
00:08:18,750 --> 00:08:23,490
controller.text to get access to that saved text. Hence

98
00:08:23,490 --> 00:08:31,490
now if I go back and I type something here and I hit done and I then add transaction, I see test here.

99
00:08:32,070 --> 00:08:36,780
So this is of course a more convenient way because you don't have to manually write a function that

100
00:08:36,780 --> 00:08:42,100
takes a value and just saves it in a property and in addition as an extra benefit, this is now also a

101
00:08:42,090 --> 00:08:48,240
solution because these properties are final and the heavy lifting of saving stuff is done by Flutter,

102
00:08:48,240 --> 00:08:51,600
this is now a solution Flutter also likes in a stateless widget.

103
00:08:55,380 --> 00:08:56,180
Nonetheless,

104
00:08:56,220 --> 00:09:02,460
the days of us using a stateless widgets or at least of only using stateless widgets are coming to

105
00:09:02,460 --> 00:09:08,400
an end because we will have to change this to a stateful widget in order to update our list of transactions

106
00:09:08,670 --> 00:09:15,210
and reflect that change on the user interface, where of course for every new transaction, a new transaction

107
00:09:15,210 --> 00:09:16,780
card should be output down there.
