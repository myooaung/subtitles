WEBVTT
1
00:00:02.280 --> 00:00:08.520
So with these widget and app lifecycles out of the way, let's turn towards something which we've seen

2
00:00:08.520 --> 00:00:14.590
a lot but which I haven't really had a closer look at. In your build methods,

3
00:00:14.640 --> 00:00:18.780
you always get this build context argument,

4
00:00:18.870 --> 00:00:22.530
now what's this build context all about in the end?

5
00:00:22.530 --> 00:00:30.150
We also use it for example in conjunction with media query or with theming with this of context method.

6
00:00:30.150 --> 00:00:37.650
What's the idea behind context? In Flutter, every widget has its own context,

7
00:00:37.650 --> 00:00:43.940
so every widget has its own context attached to it and that's the context to get in the build method.

8
00:00:44.080 --> 00:00:49.720
That's why also if you have certain builder methods, like for showModalBottomSheet, the function you

9
00:00:49.720 --> 00:00:56.070
pass there, like this one here, actually receives a context.

10
00:00:56.070 --> 00:01:01.800
So this function, we're not using it here but this function also receives a context automatically

11
00:01:01.800 --> 00:01:06.810
passed in by Flutter because builder functions like this also return a new widget in the end and

12
00:01:06.810 --> 00:01:08.880
that widget has its own context.

13
00:01:08.880 --> 00:01:13.610
So context is everywhere and every widget has its own context attached.

14
00:01:13.650 --> 00:01:20.460
Now the context in the end is the element of a widget in the element tree you could say. It's some meta

15
00:01:20.460 --> 00:01:23.890
information about the widget and its location in the widget tree.

16
00:01:23.970 --> 00:01:31.140
So context is used internally by Flutter to understand where this widget belongs and all the contexts

17
00:01:31.200 --> 00:01:32.820
of all the widgets

18
00:01:32.820 --> 00:01:37.890
as I said are basically the elements in the element trees and therefore these contexts you could say

19
00:01:38.130 --> 00:01:44.490
know about each other, they know how widgets are related, how they belong together. The contexts build a

20
00:01:44.490 --> 00:01:48.700
skeleton of your widget tree, that's how you could think about that.

21
00:01:48.780 --> 00:01:56.310
So that context gives you a direct communication channel across your entire widget tree because all

22
00:01:56.310 --> 00:02:01.980
contexts in the end know about each other, they know where in the widget tree they are and which other widgets

23
00:02:02.250 --> 00:02:03.270
exist around them

24
00:02:03.270 --> 00:02:10.380
so to say and that's why for example for accessing the theme or for navigation or for media queries,

25
00:02:10.500 --> 00:02:17.520
you use the context because Flutter has a very efficient communication channel behind the scenes for

26
00:02:17.520 --> 00:02:20.340
passing data between widgets.

27
00:02:20.340 --> 00:02:26.850
We right now always pass data between widgets by using their constructor, right, for example here when

28
00:02:26.850 --> 00:02:33.900
I create a chart, I pass a list of my recent transactions as an argument to the chart constructor and

29
00:02:33.900 --> 00:02:38.050
therefore in the chart widget, we have to define the constructor,

30
00:02:38.100 --> 00:02:44.890
accept this argument, store this argument in a property and then use this property here inside of the chart

31
00:02:44.910 --> 00:02:45.420
widget,

32
00:02:45.420 --> 00:02:47.990
that is how we pass data between widgets.

33
00:02:48.030 --> 00:02:54.720
Now it's important to know this is the default way of passing data but if you have a large widget tree,

34
00:02:54.840 --> 00:03:00.780
so with a widget that has another widget as a child which has yet another widget as a child and so on, then

35
00:03:00.780 --> 00:03:05.380
passing data between these widgets can get cumbersome.

36
00:03:05.400 --> 00:03:11.310
Here's an example and we'll learn about a feature called InheritedWidget that helps us with making that

37
00:03:11.310 --> 00:03:12.350
simpler.

38
00:03:12.420 --> 00:03:13.340
So here's our setup,

39
00:03:13.350 --> 00:03:19.380
we have a relatively large widget tree with our app widget, products widget, single product and product

40
00:03:19.380 --> 00:03:23.580
detail widget and also a card widget which is a sibling to the product widget,

41
00:03:23.670 --> 00:03:25.990
for example in a row or in a column.

42
00:03:26.070 --> 00:03:34.140
Now if we need some information that's managed in the state of my app in our product detail widget, then

43
00:03:34.140 --> 00:03:40.710
we in the end have to parse that data down through all the widgets all the way down to the product detail

44
00:03:40.710 --> 00:03:41.290
widget and

45
00:03:41.290 --> 00:03:43.400
that's what we're currently doing in the app.

46
00:03:43.560 --> 00:03:49.800
Now depending on the size of the app and the layers of widgets you have, this may or may not be a problem.

47
00:03:50.280 --> 00:03:56.430
For general data, like what's our core theme which is set up right at the start of our app or what are

48
00:03:56.430 --> 00:04:02.270
the device dimensions, what's the device orientation which also is managed by Flutter

49
00:04:02.370 --> 00:04:08.430
basically when we create the app, so therefore on the level of our root widget in the app, if we have

50
00:04:08.430 --> 00:04:13.920
such data that is possibly used by any widget in the tree and therefore would have to be passed down through

51
00:04:13.920 --> 00:04:15.550
many layers of widgets,

52
00:04:15.690 --> 00:04:21.570
then using arguments and manually passing down theme data and media query data would be really cumbersome,

53
00:04:22.530 --> 00:04:29.940
hence Flutter gives us a special widget, the InheritedWidget. We never used that but media query and

54
00:04:29.940 --> 00:04:36.690
theme uses that behind the scenes and you get a direct tunnel to the InheritedWidget and to data

55
00:04:36.690 --> 00:04:43.500
managed in there with the help of context because the context know about the general structure of your

56
00:04:43.500 --> 00:04:51.210
widget tree and therefore, they can directly access any other widget without passing data through arguments.

57
00:04:51.210 --> 00:04:58.140
That's what's happening here in the main.dart file for example when we use media query of context. In

58
00:04:58.140 --> 00:05:03.840
the end we tell Flutter we want to get access to our media query data, that MediaQueryData happens to

59
00:05:03.840 --> 00:05:08.460
be used at the top of our app in the end when we create the material app

60
00:05:08.460 --> 00:05:15.240
you could say, the same for the theme for example and instead of manually passing down our theme data

61
00:05:15.270 --> 00:05:22.110
object here with the constructor of MyHomePage app and so on and then to any other child widget as well

62
00:05:22.220 --> 00:05:26.820
and the same for MediaQueryData which is totally managed behind the scenes, instead of passing that

63
00:05:26.820 --> 00:05:34.110
through constructors, the context object has all the information Flutter needs to find out where our widget

64
00:05:34.110 --> 00:05:39.750
is positioned in the widget tree and how it gets to the topmost widget and then it uses this inherited

65
00:05:39.750 --> 00:05:46.110
widget feature which we won't dive too deep into right now to get that general theme or media query

66
00:05:46.110 --> 00:05:46.710
data.

67
00:05:47.040 --> 00:05:52.650
So context holds information about the position of the widget in the overall widget tree and it is really

68
00:05:52.650 --> 00:05:58.800
useful to Flutter because it allows Flutter to establish a direct communication channel behind the scenes,

69
00:05:59.040 --> 00:06:04.940
to exchange data between maybe at the top of our widget tree or in a certain widget,

70
00:06:04.940 --> 00:06:09.690
in general in our widget tree, in a totally different widget in our widget tree which might be a

71
00:06:09.690 --> 00:06:17.590
couple of layers of widgets down. We'll actually also take advantage of this idea of passing data behind

72
00:06:17.590 --> 00:06:23.380
the scenes in the state management section of this course, where I will show you a convenient alternative

73
00:06:23.380 --> 00:06:30.250
to passing data via constructors of widgets. For the moment, we'll stick to that, we pass data through constructor

74
00:06:30.250 --> 00:06:36.010
approach but later, as I said, I will show you an alternative which is really good for bigger apps with

75
00:06:36.010 --> 00:06:38.530
multiple pages which we don't really have yet.

76
00:06:38.530 --> 00:06:44.110
Hence for now, our approach is fine but it's important to understand what the general role of context

77
00:06:44.110 --> 00:06:44.410
is.
