1
00:00:02,310 --> 00:00:03,620
So we're taking an image,

2
00:00:03,620 --> 00:00:05,780
we're saving the file,

3
00:00:05,780 --> 00:00:10,510
now let's make sure we actually create a place which we add to great places here,

4
00:00:10,520 --> 00:00:15,250
for now only in memory, so only working with the features here without storing this in any database

5
00:00:15,260 --> 00:00:16,670
but we'll add this later as well.

6
00:00:17,300 --> 00:00:18,470
So here in add place,

7
00:00:18,470 --> 00:00:21,680
we of course have our text field with the title controller.

8
00:00:21,680 --> 00:00:25,950
Now we also want to get some information by the image input

9
00:00:25,950 --> 00:00:34,700
once an image was taken and for that, we can simply pass in a reference to a method which we have here

10
00:00:34,700 --> 00:00:39,740
in add place screen which should be triggered from inside image input when an image was taken.

11
00:00:40,280 --> 00:00:47,790
So I'll add a new method here to the add place screen widget which will not return anything which I'll

12
00:00:47,790 --> 00:00:54,300
just name _selectImage and there,

13
00:00:54,310 --> 00:01:03,730
I expect to get a file and therefore, we of course have to import dart:io up there to use that type of

14
00:01:03,730 --> 00:01:04,350
file,

15
00:01:04,390 --> 00:01:13,370
my picked image in the end. That's what I expect here and then we can store this in a property of this

16
00:01:13,630 --> 00:01:16,000
class here, of this state class.

17
00:01:16,000 --> 00:01:24,210
So here, we can have our file type property, picked image or whatever you can name it, _pickedImage

18
00:01:24,210 --> 00:01:24,810
here.

19
00:01:24,840 --> 00:01:35,100
It's undefined initially but here, I'll then set picked image equal to the picked image I get here as

20
00:01:35,100 --> 00:01:35,690
an argument,

21
00:01:35,700 --> 00:01:39,930
so picked image on the right without underscore is the argument, with the underscore it's referring to

22
00:01:39,930 --> 00:01:41,660
our property here.

23
00:01:41,670 --> 00:01:46,200
Now I'm not using set state here because I don't really need to re-render this widget here, I don't want

24
00:01:46,200 --> 00:01:51,870
to call build again just because we pick that image because regarding the preview of that image, we are

25
00:01:51,900 --> 00:01:55,080
managing this in the image input which is also a stateful widget,

26
00:01:55,080 --> 00:02:00,300
so we don't need to manage this in the add place screen and other than that, there is nothing in the add place screen

27
00:02:00,300 --> 00:02:04,070
that would need to update just because we picked an image.

28
00:02:04,110 --> 00:02:10,650
So now with picked image saved here, which we only need so that we can submit our form later, now we need

29
00:02:10,650 --> 00:02:15,360
to make sure that select image, this method, is triggered from inside image input and therefore, I'll simply

30
00:02:15,510 --> 00:02:22,140
pass a pointer to the select image method to image input and in the image input class in the widget

31
00:02:22,140 --> 00:02:26,130
there, we can now expect this function.

32
00:02:26,130 --> 00:02:38,010
So up there in the widget itself, I expect to get a function type data which I'll name onSelectImage

33
00:02:38,040 --> 00:02:45,840
maybe to follow the onPressed and so on naming the Flutter widgets use and add a constructor of course

34
00:02:45,840 --> 00:02:48,470
to accept a value for this

35
00:02:48,690 --> 00:02:51,840
and now we have our function which we expect to get,

36
00:02:51,840 --> 00:02:57,040
so a pointer at the function which we expect to get from outside, registered as a property, the image

37
00:02:57,040 --> 00:03:01,500
input widget, we can now use it in the state down there once an image was picked.

38
00:03:01,500 --> 00:03:03,630
So here I will refer to widget,

39
00:03:03,630 --> 00:03:09,360
this is the global property which is available in state objects, giving us access to our widget class

40
00:03:09,360 --> 00:03:15,810
here, widget.onSelectImage and now execute this function because onSelectImage is a pointer at

41
00:03:15,810 --> 00:03:22,710
a function, here I want to execute it and I want to forward that saved image because remember, in the

42
00:03:22,710 --> 00:03:27,220
end, we do expect an image here in the add place screen.

43
00:03:27,450 --> 00:03:32,520
With that, we get the image here, we're storing it in this property,

44
00:03:32,520 --> 00:03:39,480
now we can also add a method for submitting that form and therefore for adding a new place and I'll

45
00:03:39,490 --> 00:03:42,390
name this save place, the name is up to you,

46
00:03:42,440 --> 00:03:47,570
it's a new method, _savePlace, doesn't return anything and in there, first of all let's check

47
00:03:47,600 --> 00:03:57,730
if _titleController.text, if that is empty or if pickedImage

48
00:03:57,730 --> 00:04:03,790
is equal to null. If either of that is the case, then we have invalid input

49
00:04:03,790 --> 00:04:09,820
and even though I won't add super complex validation with error messages and so on, I'll at least return

50
00:04:09,820 --> 00:04:16,630
here to not continue execution so that we can't hit the add place button and add an invalid place but

51
00:04:16,630 --> 00:04:20,470
I'm also not showing any error messages, that of course would be an improvement

52
00:04:20,470 --> 00:04:25,270
you might want to add in your app or as I just said, use a form right from the start

53
00:04:25,270 --> 00:04:30,190
so that at least for the title, you can add a validator and show an error message. Here of course, you

54
00:04:30,190 --> 00:04:34,510
could show a dialogue and so on but I don't want to spend too much time on that,

55
00:04:34,510 --> 00:04:36,070
we worked with all of that before,

56
00:04:36,130 --> 00:04:43,300
let's instead continue with that place and for that, I want to add the place here to my list of items

57
00:04:43,450 --> 00:04:46,960
in the great places class which we then provide in the end.

58
00:04:46,960 --> 00:04:58,140
So here in great places, let's add a new method, add place which won't return anything which should store

59
00:04:58,140 --> 00:05:04,470
a place and there I expect to get a title which is a string of course and I expect to get a file which

60
00:05:04,710 --> 00:05:13,800
is my image and to use file in here, we have to import dart:io. So we get the file, the image and we

61
00:05:13,800 --> 00:05:14,790
get the title,

62
00:05:14,790 --> 00:05:16,670
later we'll also get the location data

63
00:05:16,670 --> 00:05:20,710
of course. In here, we can therefore

64
00:05:20,710 --> 00:05:31,570
now create a new place by using the place constructor provided from the place model we're importing and

65
00:05:31,570 --> 00:05:33,280
now a place needs a couple of things.

66
00:05:33,340 --> 00:05:34,210
It needs an ID

67
00:05:34,540 --> 00:05:39,010
and here since we're not using any web service, I'll just use the good old datetime

68
00:05:39,010 --> 00:05:42,700
now to string dummy ID here.

69
00:05:42,930 --> 00:05:46,210
We'll need to set an image and that should be the image we're getting here,

70
00:05:46,260 --> 00:05:49,130
the image we're getting here,

71
00:05:49,210 --> 00:05:53,170
can also name this here picked image to make it really clear what's what

72
00:05:53,170 --> 00:05:54,310
down there.

73
00:05:54,310 --> 00:06:01,600
So here we have the image which we store and then of course we also need to provide a location and a

74
00:06:01,600 --> 00:06:02,470
title.

75
00:06:02,470 --> 00:06:08,910
Now we're getting the title as an argument and you could of course also rename this here picked title to

76
00:06:08,910 --> 00:06:14,700
avoid confusion regarding the names down there and also the location and for now, I'll set this to

77
00:06:14,700 --> 00:06:21,210
null because for the moment, we have no location, we're not yet able to pick a location on the map or

78
00:06:21,210 --> 00:06:30,080
by getting the user location. With that, let's go to the items list up there, _items and call

79
00:06:30,200 --> 00:06:37,550
add and then add this new place to this list and thereafter call notifyListeners so that everyone

80
00:06:37,550 --> 00:06:42,350
listening will get informed about that changed data and will get the new data

81
00:06:42,350 --> 00:06:50,620
of course. That's add place in the great places class, back to the add place screen,

82
00:06:50,620 --> 00:06:58,070
I want to use that and therefore we need to import the provider package of course, the provider.dart

83
00:06:58,070 --> 00:07:04,890
file and we need to import our provided/great_places.dart file here.

84
00:07:05,030 --> 00:07:13,880
So with these two imports added, in save place, we can use provider of and then refer to great places to

85
00:07:13,880 --> 00:07:20,990
get access to the nearest provided data of that type which of course is provided here in the main.dart

86
00:07:21,090 --> 00:07:31,480
file of and pass the context and then call add place and there, forward the title which we can

87
00:07:31,480 --> 00:07:37,450
of course get from the titleController.text and the picked image which is of course stored here

88
00:07:37,450 --> 00:07:40,010
in the _pickedImage variable.

89
00:07:40,090 --> 00:07:46,390
So let's forward that to this add place method because these are the arguments this method needs and of

90
00:07:46,390 --> 00:07:50,740
course, make sure you don't listen here because we're not interested in updates in this place,

91
00:07:50,740 --> 00:07:56,430
I just want to dispatch this action here. With that, we're adding a new place,

92
00:07:56,610 --> 00:08:05,700
we can also go back thereafter with navigator of context pop to leave this page and now on the places

93
00:08:05,700 --> 00:08:06,590
list screen,

94
00:08:06,660 --> 00:08:13,730
I of course want to output the places now because that's something we're missing at the moment. So here

95
00:08:14,030 --> 00:08:22,310
instead of always showing this CircularProgressIndicator, now I instead want to rather show my places,

96
00:08:22,310 --> 00:08:28,540
so I'll replace this with a consumer here and consumer is a widget provided by the provider package

97
00:08:28,550 --> 00:08:35,750
as you learned to listen to a provider and then update this part of the widget tree when it changes,

98
00:08:36,290 --> 00:08:39,070
so import the provider package up there,

99
00:08:39,290 --> 00:08:41,270
have your consumer here,

100
00:08:41,420 --> 00:08:45,840
let the consumer know to which data should listen with that generic type here.

101
00:08:45,860 --> 00:08:48,110
So import providers/

102
00:08:48,110 --> 00:08:51,940
great_places.dart as well because we need the great places

103
00:08:51,980 --> 00:08:54,540
class down there, here

104
00:08:54,620 --> 00:09:02,450
great places and now the consumer as you learned gets a builder and the builder gets a context and then

105
00:09:02,480 --> 00:09:04,640
the data the provider gave us,

106
00:09:04,640 --> 00:09:07,430
so our great places data here in the end.

107
00:09:07,430 --> 00:09:14,790
In addition, we also get a static child here which we can also set up, maybe here before we add the builder

108
00:09:14,790 --> 00:09:19,810
and that's the part which can then be used inside of the built widget which is built with the help of

109
00:09:19,820 --> 00:09:28,370
the builder which will not update even if the data changes and here, I actually want to have some centered

110
00:09:29,060 --> 00:09:38,310
text where I say got no places yet, start adding some

111
00:09:38,320 --> 00:09:44,560
and then you could even use a column here and show a button right below it to navigate to the

112
00:09:44,560 --> 00:09:46,870
add place screen if you wanted to.

113
00:09:46,930 --> 00:09:49,250
I'll keep this simple,

114
00:09:49,310 --> 00:09:56,690
this is a text which I might want to show because here on the right side of this builder or as a return

115
00:09:56,690 --> 00:09:59,150
value for the builder to be precise,

116
00:09:59,160 --> 00:10:10,270
there I want to check whether great places.items length is smaller or equal than zero which means we

117
00:10:10,270 --> 00:10:15,190
have no places and if that is the case, then I want to output this child.

118
00:10:15,280 --> 00:10:24,100
So here, that's the child we defined up here, I want output that if we have no places, otherwise I want to

119
00:10:24,370 --> 00:10:27,010
render a list view of places.

120
00:10:27,030 --> 00:10:32,260
So this now our builder either showing the child we're getting here which is this child which won't

121
00:10:32,260 --> 00:10:36,340
be re-rendered if places change because there is nothing to re-render there

122
00:10:36,370 --> 00:10:43,720
and of course, you could even use a const constructor here and leverage even more optimizations if you

123
00:10:43,720 --> 00:10:44,460
want to

124
00:10:44,590 --> 00:10:50,710
but if we do have places, then I want to return a ListView, with the builder constructor though because

125
00:10:50,710 --> 00:10:52,750
we don't know how many places we'll have,

126
00:10:52,750 --> 00:10:58,870
so to get performance improvements, let's use ListView.builder here and there, we'll have a certain item

127
00:10:58,870 --> 00:11:09,440
count and that item count simply is greatPlaces.items.length of course and then

128
00:11:09,440 --> 00:11:15,890
we'll have our item builder which is a builder function which gets a context and the index or just i

129
00:11:16,100 --> 00:11:18,420
of the item we're currently building

130
00:11:18,530 --> 00:11:22,100
and then here, we have to return what should be built for each place

131
00:11:22,370 --> 00:11:28,370
and here, I'll simply build a ListTile widget for every place. And then in there for every place, I want

132
00:11:28,370 --> 00:11:36,810
to have a leading widget, a CircleAvatar which is that rounded element at the beginning of the ListTile

133
00:11:36,810 --> 00:11:44,550
here where I want to set a background, not color but a background image where we now can provide

134
00:11:44,640 --> 00:11:51,060
an image provider, so not an image widget but an image provider which is basically Flutter's way of resolving

135
00:11:51,060 --> 00:11:52,170
the pixels for an image

136
00:11:52,170 --> 00:11:58,020
so to say and here, I want to use a file image and you might remember that earlier in the course, we used

137
00:11:58,080 --> 00:12:00,570
asset image and network image,

138
00:12:00,570 --> 00:12:06,510
now we're using file image because we're working with a file stored in our device and here, I want to

139
00:12:06,510 --> 00:12:13,700
use the greatPlaces.items for the item we're working with,

140
00:12:13,720 --> 00:12:21,980
so for the index, we're rendering this ListTile and then there, the image which of course is such a file. So

141
00:12:21,980 --> 00:12:24,470
that's the leading element in the ListTile

142
00:12:24,470 --> 00:12:32,420
here, I also want to have a title and that of course should be greatPlaces.items for the item we're

143
00:12:32,420 --> 00:12:33,380
working with and there,

144
00:12:33,380 --> 00:12:38,680
the title and shouldn't just be a text but instead be a text widget

145
00:12:38,680 --> 00:12:48,560
of course. Upon a tap of this ListTile here, I later also want to go to the detail page, go to detail page

146
00:12:48,620 --> 00:12:51,070
but we'll implement this later.

147
00:12:51,110 --> 00:12:57,410
So for the moment, this should be all we need to render a list of places on the places lists screen, on

148
00:12:57,410 --> 00:12:58,700
the add place screen,

149
00:12:58,700 --> 00:13:01,970
we now have to make sure that we triggeer the save place method,

150
00:13:01,990 --> 00:13:04,130
the _savePlace method

151
00:13:04,130 --> 00:13:07,820
when we hit this button here at the bottom, this RaisedButton.

152
00:13:07,820 --> 00:13:14,030
So here for onPressed, I want to point at save place, without parentheses to not execute this immediately

153
00:13:14,180 --> 00:13:18,680
but to tell Flutter that this should be executed when the user presses the button.

154
00:13:20,610 --> 00:13:22,890
With that, we should have everything in place,

155
00:13:22,950 --> 00:13:24,390
let's enter a title, a

156
00:13:27,010 --> 00:13:32,470
test and then take a picture there with the emulator camera and on the emulator,

157
00:13:32,470 --> 00:13:33,540
this can be a bit slow,

158
00:13:33,550 --> 00:13:40,240
in reality, this will be fast, no worries and click add place and that didn't work.

159
00:13:40,390 --> 00:13:41,590
Why did it not work?

160
00:13:41,590 --> 00:13:42,820
We're getting an error here, yes

161
00:13:46,530 --> 00:13:50,880
path provider not found, it's the same issue as before, we're tapping into native device features

162
00:13:50,880 --> 00:13:51,430
here,

163
00:13:51,510 --> 00:13:57,300
so if you added a plugin that uses such features, you might want to restart your app entirely, restart

164
00:13:57,300 --> 00:13:58,350
the build process.

165
00:13:58,350 --> 00:14:04,100
So here, I'll quit my entire running process and do a full restart, a full rebuild of the app so that

166
00:14:04,140 --> 00:14:11,010
we can include all these plugins that tap into native device features. So let's wait for that to

167
00:14:11,010 --> 00:14:11,370
finish and

168
00:14:11,370 --> 00:14:15,450
let's then test it again. So the app restarted,

169
00:14:15,580 --> 00:14:20,230
let's go to the add place screen and again have a test here,

170
00:14:20,380 --> 00:14:24,420
then open that camera,

171
00:14:24,430 --> 00:14:25,140
here we go.

172
00:14:26,750 --> 00:14:34,100
Take this picture here, confirm it and then click add place and now this looks good.

173
00:14:34,100 --> 00:14:36,990
We're going back to the list and we're seeing our place here

174
00:14:37,100 --> 00:14:43,550
and if I add another place, obviously always with the same image here because that is what the emulator

175
00:14:43,550 --> 00:14:44,460
gives us here. So

176
00:14:45,200 --> 00:14:46,720
let's take this image here,

177
00:14:49,380 --> 00:14:54,280
confirm and click add place and we see that as well.

178
00:14:54,380 --> 00:14:55,930
So we have our places here,

179
00:14:55,940 --> 00:14:57,090
that is great.

180
00:14:57,110 --> 00:15:01,280
Feel free to fine tune the look of this list if you want to have a different look,

181
00:15:01,280 --> 00:15:04,220
my next step will be to test this on real devices,

182
00:15:04,220 --> 00:15:10,420
also on iOS device there and thereafter, we'll continue with storing the data we're getting here,

183
00:15:10,430 --> 00:15:17,590
so the path to the image, the title and so on in a database on the device, so that the data survives a restart

184
00:15:17,630 --> 00:15:23,180
because right now if I do a full refresh and therefore I restart my app, of course all our places will

185
00:15:23,180 --> 00:15:24,260
be lost,

186
00:15:24,260 --> 00:15:25,780
here they are, they're gone.

187
00:15:25,820 --> 00:15:29,660
So that's the next thing we'll work on after testing this on real devices.
