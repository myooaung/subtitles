1
00:00:02,200 --> 00:00:09,340
The app we built thus far works but there is one thing which we can change or which I at least want

2
00:00:09,340 --> 00:00:12,820
to have you think about. On the orders screen,

3
00:00:12,820 --> 00:00:18,610
we change this to be a stateful widget simply because I wanted to use initState here

4
00:00:18,610 --> 00:00:24,550
and by the way as I mentioned in a couple of annotations at the top of the video during the videos, if

5
00:00:24,550 --> 00:00:30,130
you are using listen: false as we're doing it here, you don't even need that hack and you would be

6
00:00:30,130 --> 00:00:36,520
fine running that code without that future delayed around it. So you could actually get rid of all of

7
00:00:36,520 --> 00:00:37,400
that,

8
00:00:37,540 --> 00:00:42,010
of course you then can't use await though because you're not in an async function and

9
00:00:42,010 --> 00:00:44,830
turning this into an async function is not what you should do

10
00:00:44,920 --> 00:00:51,790
but of course you could then use then here to run your code that should run once the future is complete,

11
00:00:52,060 --> 00:01:00,220
so you could move that set state call here into here and this first set state call is obsolete

12
00:01:00,550 --> 00:01:02,640
because we don't need that,

13
00:01:02,710 --> 00:01:06,390
this will run before build runs without that future delayed work around.

14
00:01:06,520 --> 00:01:11,110
So we can just set isLoading to true, then have this here and this will work as well

15
00:01:11,110 --> 00:01:18,700
if you use listen: false here and that's also the difference to ModalRoute.of and so on which didn't work

16
00:01:18,700 --> 00:01:22,610
here in initState, there we simply don't have such a listen option.

17
00:01:22,630 --> 00:01:28,150
The provider package simply internally gives you an option to opt out of certain functionalities that

18
00:01:28,150 --> 00:01:32,620
would normally be connected with the inherited widget and this tunnel which is established with the

19
00:01:32,620 --> 00:01:41,290
help of context and with these missing features which you deliberately opt out of with listen: false,

20
00:01:41,470 --> 00:01:49,060
you can use provider of context here because you basically use only a limited set of the features of

21
00:01:49,060 --> 00:01:54,160
that inherited widget thing behind the scenes. So you could do that here, you could do this in all places

22
00:01:54,160 --> 00:01:55,300
with provider of,

23
00:01:55,300 --> 00:02:01,240
you can't use listen: false on things like ModalRoute and so on, that's not supported there but that's

24
00:02:01,240 --> 00:02:05,500
not the main thing I wanted to focus on, it's just something I again wanted to mention here.

25
00:02:05,560 --> 00:02:11,020
The core thing I wanted to mention is that we are building a stateful widget here simply such that

26
00:02:11,050 --> 00:02:16,030
we can use initState to initialize our data and I think that makes sense because we want to have a

27
00:02:16,030 --> 00:02:22,600
place in our app where we can make that call which only runs once when this screen gets rendered.

28
00:02:22,600 --> 00:02:27,790
For example making that fetch in the build method would be horrible because that method runs way too

29
00:02:27,790 --> 00:02:28,540
often

30
00:02:28,540 --> 00:02:34,750
and actually, we would even enter an infinite loop if we start calling set state in there or if we then

31
00:02:34,750 --> 00:02:38,500
fetched our orders and build runs again and we start fetching again and so on,

32
00:02:38,560 --> 00:02:42,100
so making the fetch and build certainly is not an option.

33
00:02:42,100 --> 00:02:49,090
There is however an alternative to turning this into a stateful widget and using initState and

34
00:02:49,150 --> 00:02:52,330
it's that alternative which I now want to show you.

35
00:02:52,420 --> 00:02:57,310
So let me comment this out here in initState and therefore we have an empty initState method which

36
00:02:57,310 --> 00:02:58,680
we of course could also remove,

37
00:02:59,050 --> 00:03:05,410
now let me show you that alternative. Here in that body, in the end, the content we render depends on the

38
00:03:05,410 --> 00:03:11,040
question whether we're still fetching data or whether we already got a response, right?

39
00:03:11,080 --> 00:03:17,110
So what we can do here is we can use a special widget which is built into Flutter and that's the future

40
00:03:17,110 --> 00:03:24,340
builder widget. The FutureBuilder widget takes a future and then automatically starts listening to that,

41
00:03:24,340 --> 00:03:28,360
so it adds the then and the catch error methods for you

42
00:03:28,420 --> 00:03:36,040
you could say and it takes a builder which will get the current snapshot, the current state of your future,

43
00:03:36,310 --> 00:03:40,990
so that you can build different content based on what your future returned.

44
00:03:40,990 --> 00:03:49,660
So here, we can set up a future and our future of course is the future returned by provider of fetch

45
00:03:49,690 --> 00:03:58,360
and set orders. So we can copy that line here and then go down here and configure that as the future

46
00:03:58,450 --> 00:04:02,230
because fetch and set orders of course does return a future.

47
00:04:02,500 --> 00:04:05,240
So that's the future for our FutureBuilder,

48
00:04:05,260 --> 00:04:11,620
now with the future set up, we also have to define a builder and that's a builder as you generally already

49
00:04:11,620 --> 00:04:12,030
know it,

50
00:04:12,040 --> 00:04:18,220
it's a function which gets executed on your behalf. It receives the context and here, you also receive

51
00:04:18,220 --> 00:04:23,260
an extra argument and that's the data currently returned by your futures,

52
00:04:23,380 --> 00:04:25,090
so a data snapshot

53
00:04:25,090 --> 00:04:30,570
you could say. This should then return the widget you want to build and now the widget you want to build

54
00:04:30,580 --> 00:04:35,960
of course simply depends on the state of that future.

55
00:04:36,160 --> 00:04:42,100
So let's actually use the more complex or the longer function definition without that arrow so that

56
00:04:42,100 --> 00:04:44,780
we can write a multiline function body

57
00:04:44,800 --> 00:04:50,800
and here, we can first of all have a look at the data snapshot to find out what's in there.

58
00:04:51,870 --> 00:04:56,920
The data snapshot here is of type async snapshot

59
00:04:57,150 --> 00:05:04,370
and if you add a dot after it, you see that there you can find out if you have an error object or the

60
00:05:04,370 --> 00:05:10,050
data which you retrieved and also what the current connection state is and that tells you what the future

61
00:05:10,050 --> 00:05:12,580
is currently doing.

62
00:05:12,720 --> 00:05:18,930
You can compare this to connection state and for example there, you can find out whether it's currently waiting,

63
00:05:19,110 --> 00:05:26,160
so where the future hasn't resolved yet or whether it's done and when it's done, you will have to check

64
00:05:26,160 --> 00:05:28,650
whether you've got data or an error.

65
00:05:28,650 --> 00:05:34,680
So here, we can check if data snapshot connection state is currently equal to connection state waiting

66
00:05:34,680 --> 00:05:36,960
which means we're currently loading.

67
00:05:36,960 --> 00:05:43,880
So in that case, of course I want to return this centered widget here, so I will return this here,

68
00:05:46,000 --> 00:05:47,950
else I know we're done

69
00:05:48,010 --> 00:05:55,750
and then you could check if data snapshot error is equal to null, in which case you know you have no error

70
00:05:55,870 --> 00:06:01,360
or the other way around if it's not equal to null in which case you have an error and then you want to

71
00:06:01,960 --> 00:06:06,980
do error handling stuff here, which I'll not do here

72
00:06:07,000 --> 00:06:12,730
but which you could do. Alternatively, else you know you have no error

73
00:06:12,730 --> 00:06:17,550
and then here, I want to return that ListView.

74
00:06:17,620 --> 00:06:19,470
So let's get rid of that down there now,

75
00:06:19,480 --> 00:06:21,440
we don't need isLoading anymore.

76
00:06:21,580 --> 00:06:28,230
So here I'll just return the ListView.builder and in case we should have an error,

77
00:06:28,240 --> 00:06:35,650
I'll just return a centered widget with a child where I say text, an error occurred, just to have something

78
00:06:35,800 --> 00:06:37,510
on the screen and return some widget

79
00:06:37,510 --> 00:06:38,200
in that case

80
00:06:38,650 --> 00:06:41,730
but I focus on the success case and here we return our ListView

81
00:06:41,730 --> 00:06:48,200
builder with the order data which should now be available because we're done fetching our orders.

82
00:06:48,340 --> 00:06:54,910
Now one important note about this setup though, right now, we would enter an infinite loop here because

83
00:06:55,240 --> 00:06:59,450
when this is done fetching and setting the orders, it will notify listeners

84
00:06:59,470 --> 00:07:04,000
and since we set up a listener to orders here, our whole build method would run again,

85
00:07:04,030 --> 00:07:09,130
we would build a new FutureBuilder here and send a new request and that would keep on going.

86
00:07:09,880 --> 00:07:15,040
So the solution here is to not set up that listener up here for the order data because we don't need

87
00:07:15,040 --> 00:07:20,080
the order data up there but simply use a consumer of the order data in here,

88
00:07:20,080 --> 00:07:24,340
in that case here because only here, I'm interested in order data.

89
00:07:24,340 --> 00:07:34,510
So here we can set up a consumer of our orders where we in the end define a builder where we get the context

90
00:07:34,570 --> 00:07:41,680
and our order data then and now here it is where I actually want to render that ListView because that's

91
00:07:41,710 --> 00:07:51,190
now the place where we actually need our orders and where we want to set up a listener and

92
00:07:51,230 --> 00:07:52,910
important of course here, you have 

93
00:07:52,910 --> 00:07:57,790
the third argument, that static child which never changes which you could use.

94
00:07:58,130 --> 00:08:03,890
Now we should have a setup which actually works and fetches our orders without entering an infinite

95
00:08:03,890 --> 00:08:04,500
loop

96
00:08:04,580 --> 00:08:08,780
and just to check this, I'll also add a print statement here in the build method,

97
00:08:08,930 --> 00:08:10,460
building orders.

98
00:08:10,700 --> 00:08:13,860
So this should now not run all the time

99
00:08:13,860 --> 00:08:16,190
and let's now see whether that works.

100
00:08:16,190 --> 00:08:18,760
So here, I'll go to my orders,

101
00:08:18,800 --> 00:08:24,590
we see the spinner, we see the orders and back here, we see that this was only executed once and this

102
00:08:24,590 --> 00:08:31,850
is now the more elegant alternative to using a stateful widget just to fetch orders and show a loading

103
00:08:31,910 --> 00:08:32,900
spinner

104
00:08:32,900 --> 00:08:38,960
and the advantage is also that we don't just save that useless transformation to a stateful widget,

105
00:08:39,230 --> 00:08:44,090
we also don't have to manage the loading state on our own because we're letting the FutureBuilder do

106
00:08:44,090 --> 00:08:47,270
that by checking the connection state.

107
00:08:47,270 --> 00:08:54,410
So now what we can do here of course is we can get rid of initState and of this isLoading property,

108
00:08:54,620 --> 00:09:06,140
get rid of our state class and convert this here back to a stateless widget as it was before and now

109
00:09:06,140 --> 00:09:07,550
this is a very lean widget

110
00:09:07,550 --> 00:09:14,470
of course and we can do a hot refresh to have the same application as before

111
00:09:14,500 --> 00:09:20,960
but now with a more elegant setup for our orders. And obviously, you could use such a FutureBuilder as

112
00:09:20,960 --> 00:09:26,810
we're using it here in your other widgets too, either to turn them back into stateless widgets or if you

113
00:09:26,810 --> 00:09:32,690
had reasons for making them stateful widgets, even in such cases, to not manage the isLoading variable

114
00:09:32,690 --> 00:09:35,970
on your own but instead, let the FutureBuilder do that.

115
00:09:35,990 --> 00:09:41,390
I'll leave that here and I'll also leave the other approaches in this app, so that you can see and check

116
00:09:41,390 --> 00:09:46,820
both but using the FutureBuilder is definitely the approach I would recommend because it's so elegant

117
00:09:47,060 --> 00:09:51,780
and it utilizes the tools Flutter gives you. As a side note,

118
00:09:51,810 --> 00:09:57,000
it of course also avoids rebuilding this entire widget tree here just because the loading state changed,

119
00:09:57,240 --> 00:10:01,710
instead it will really just rebuild the parts that do need rebuilding,

120
00:10:01,710 --> 00:10:03,450
so that's another benefit we get here.
