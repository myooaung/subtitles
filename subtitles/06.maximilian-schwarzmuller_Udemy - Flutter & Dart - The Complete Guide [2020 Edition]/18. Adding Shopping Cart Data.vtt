WEBVTT
1
00:00:02.330 --> 00:00:08.650
So now we can mark items as favorites and we can filter for that which is pretty neat,

2
00:00:08.660 --> 00:00:09.950
what else can we do in this app?

3
00:00:10.340 --> 00:00:11.360
Well quite a lot,

4
00:00:11.360 --> 00:00:13.330
how about adding items to a cart?

5
00:00:13.340 --> 00:00:15.500
That's something we can't do right now,

6
00:00:15.500 --> 00:00:17.170
this button here doesn't do anything.

7
00:00:17.840 --> 00:00:19.430
So this is the next step or the

8
00:00:19.430 --> 00:00:25.790
next thing I want to focus on, I want to be able to click that add to cart item here in a product item

9
00:00:25.910 --> 00:00:29.840
and then actually add that item to a cart. For this,

10
00:00:29.840 --> 00:00:34.230
the first question of course is, how do we want to manage our cart?

11
00:00:34.280 --> 00:00:41.420
We could manage it here in our products provider, in this class but I rather want to manage my

12
00:00:41.420 --> 00:00:43.020
products in here

13
00:00:43.280 --> 00:00:48.380
and later for example, we'll also have ways of adding and editing and deleting products

14
00:00:48.380 --> 00:00:51.350
and I want to manage all of that in here but not really the cart.

15
00:00:52.100 --> 00:00:56.220
Hence it makes sense to add a new class and I'll add it in a new file, the 

16
00:00:56.220 --> 00:00:59.680
cart.dart file. In there, cart is the class

17
00:00:59.690 --> 00:01:06.050
and since I plan on using this with the provider package and I want to notify widgets that are listening

18
00:01:06.050 --> 00:01:13.200
about updates, we'll add the ChangeNotifier, mixin here which you can also import from widgets.dart,

19
00:01:13.220 --> 00:01:20.420
so from foundation/ material or widget.dart, that all works, simply because all these files also inherit

20
00:01:20.480 --> 00:01:21.710
or import from each other

21
00:01:21.710 --> 00:01:24.400
you could say. So now here,

22
00:01:24.400 --> 00:01:25.420
that's my cart

23
00:01:25.420 --> 00:01:30.880
and in that cart, I want to have a couple of cart items.

24
00:01:31.150 --> 00:01:34.100
I'll define it here next to my cart class

25
00:01:34.150 --> 00:01:41.390
but you could define it in a separate file too and I'll name this cart item.

26
00:01:41.450 --> 00:01:45.290
This is now just a class, not using ChangeNotifier

27
00:01:45.560 --> 00:01:49.930
and in here, I simply want to find how a cart item should look like in this application.

28
00:01:49.940 --> 00:01:52.340
Now as always, there are various ways of structuring this,

29
00:01:52.400 --> 00:01:54.840
I think every item should have an ID.

30
00:01:54.920 --> 00:01:59.530
It should probably have a title of the product which is stored in the cart,

31
00:01:59.630 --> 00:02:06.150
it should also have a quantity, so how many of these items, of these products do we have in there,

32
00:02:06.170 --> 00:02:09.280
is it one T-shirt or five?

33
00:02:09.290 --> 00:02:13.300
And also the price per product

34
00:02:13.460 --> 00:02:19.620
and we can then calculate the total price of course by multiplying it with the quantity.

35
00:02:19.760 --> 00:02:23.040
We need a constructor here for cart item

36
00:02:23.150 --> 00:02:29.300
and again, as always you can use named or unnamed positional arguments, I'll go for named ones here, get

37
00:02:29.300 --> 00:02:35.610
the ID, get the title, get the quantity and get the price

38
00:02:35.630 --> 00:02:36.200
and also

39
00:02:36.200 --> 00:02:44.280
as always, I actually will add required here because we need all that information, like this.

40
00:02:44.340 --> 00:02:47.760
Now the cart items can be managed here in the cart class.

41
00:02:48.630 --> 00:02:51.600
So in here, we could have a list of cart items

42
00:02:51.840 --> 00:02:59.340
but actually, I want to map every cart item to the ID of the product it belongs to. This ID here

43
00:02:59.460 --> 00:02:59.970
in the cart

44
00:02:59.970 --> 00:03:05.250
Items should be the ID of this cart item, that's not the same as the ID of the product because

45
00:03:05.250 --> 00:03:07.610
every cart item is not just a product,

46
00:03:07.620 --> 00:03:12.420
it is a new object which also contains information about the quantity for example.

47
00:03:12.420 --> 00:03:16.590
So this cart item object has a different ID than the product it belongs to.

48
00:03:17.310 --> 00:03:25.580
So here, I want to manage my cart items that I have in a cart in a map where the key is the product ID.

49
00:03:26.430 --> 00:03:31.860
This will also make it very simple for us to work with this cart later. So we can have a map where the

50
00:03:31.860 --> 00:03:42.370
keys are strings because product IDs in our product model are just strings and the value will be of

51
00:03:42.490 --> 00:03:44.440
type cart item

52
00:03:44.440 --> 00:03:48.260
and then we have our items or _items here to be precise

53
00:03:48.280 --> 00:03:52.960
and initially, that's nothing and that is a cart item with a capital I

54
00:03:53.980 --> 00:03:59.920
but now of course we want to be able to get our items that are in the cart, so I can add a getter where

55
00:03:59.920 --> 00:04:08.150
we get that same map, I'll name this items and there, I return a new map and we can also use the spread

56
00:04:08.150 --> 00:04:14.870
operator here on items to pull out the key-value pairs from this items map and add it to a new map

57
00:04:14.870 --> 00:04:21.950
to return a copy and add the get keyword in front of that. But besides a getter, I now also want have a way

58
00:04:21.950 --> 00:04:23.030
of adding an item.

59
00:04:23.720 --> 00:04:32.940
So here, I'll add a function, add item, where I expect to get some information about the product, namely

60
00:04:32.940 --> 00:04:42.630
the product ID, the price and the title and quantity will always be one, we can only add one item at

61
00:04:42.630 --> 00:04:48.740
a time let's say. So these are the three pieces of information which I need here - title, price

62
00:04:48.860 --> 00:04:51.930
and then the ID which I use as a key in the map

63
00:04:52.460 --> 00:04:58.220
and now the goal of course is to add that item to our cart items. For that, we first of all need to check

64
00:04:58.220 --> 00:05:03.410
whether we already have that item in the cart because if we do, we only need to increase the quantity,

65
00:05:03.680 --> 00:05:10.080
if we don't have it in there yet, we need to add a brand new entry to our cart items map. So here, I'll

66
00:05:10.080 --> 00:05:16.180
add an if check and check my _items which are already items in a cart with contains key whether

67
00:05:16.200 --> 00:05:18.580
they already have an entry for this product ID

68
00:05:18.660 --> 00:05:23.520
and that's the advantage of using the product ID as a key, we can conveniently check whether we have an

69
00:05:23.520 --> 00:05:29.070
entry for that ID and if yes, we know we already have a cart item for that product in there,

70
00:05:29.490 --> 00:05:32.450
we need to simply change the quantity.

71
00:05:32.610 --> 00:05:35.590
So here, product ID is the key for which I check

72
00:05:35.760 --> 00:05:42.330
and then in here we need to change the quantity of that existing entry, else we need to add a new entry

73
00:05:42.330 --> 00:05:50.670
and let's start with that else case. There, I of course want to access my items and then use put if absent

74
00:05:50.700 --> 00:05:57.880
to add a new entry to that map, where the key is the product ID of course and then the value which

75
00:05:57.880 --> 00:06:08.010
I'll want to add is my cart item, a new cart item which I instantiate here. Now that cart item needs

76
00:06:08.490 --> 00:06:18.230
to get an ID and here, I'll use datetime now to string to have a kind of unique ID, not perfect but

77
00:06:18.230 --> 00:06:19.930
will do for now.

78
00:06:20.150 --> 00:06:23.590
We then need to forward the title which we get as an argument of course

79
00:06:23.660 --> 00:06:33.980
here and we also need to forward the price, which we also get as an argument. Now important, put if absent

80
00:06:34.280 --> 00:06:39.680
actually does not just take a value here but a function that creates the value, so we can simply add

81
00:06:39.680 --> 00:06:45.800
an anonymous function here which returns that new cart item and price here of course should be a double,

82
00:06:45.800 --> 00:06:50.480
that's also important.

83
00:06:50.490 --> 00:06:56.070
So with that, we're creating a new cart item here and now we need to set the quantity and of course the

84
00:06:56.070 --> 00:06:57.830
quantity here is simply one,

85
00:06:57.840 --> 00:07:03.360
we added it for the first time. So this adds a new cart item to our map of cart items.

86
00:07:03.360 --> 00:07:08.550
Now what if we already contain that key? If we already have an entry for that cart item,

87
00:07:08.550 --> 00:07:16.770
then we just want to change the quantity and that means we can simply call items update and

88
00:07:16.790 --> 00:07:21.050
now we define the key for which we want to update the value and that's product ID

89
00:07:21.480 --> 00:07:29.370
and then here update also takes a function which should return the new cart item we want to store.

90
00:07:29.370 --> 00:07:36.670
So here, we have a new cart item instance and this function automatically gets the existing cart item,

91
00:07:36.680 --> 00:07:41.660
so the existing value it found for this key, which is of course great because that means we can update

92
00:07:41.660 --> 00:07:44.120
the new item based on the old item.

93
00:07:44.120 --> 00:07:47.720
So that's something we get automatically from the update method,

94
00:07:47.720 --> 00:07:53.800
it calls this function here and automatically gives us the existing item.

95
00:07:53.810 --> 00:08:00.290
So here, this new cart item which we built will therefore be based on the existing cart item

96
00:08:00.570 --> 00:08:04.620
and it will for example keep the ID of the existing cart item,

97
00:08:04.620 --> 00:08:10.770
it will keep what we stored as a title there and it will keep what we stored as a price there.

98
00:08:10.860 --> 00:08:15.390
That doesn't change but the quantity should change

99
00:08:15.400 --> 00:08:16.740
and that's our existing cart

100
00:08:16.750 --> 00:08:18.970
item quantity plus one.

101
00:08:18.970 --> 00:08:22.240
So we add one to the quantity,

102
00:08:22.350 --> 00:08:32.340
that's the core difference. So with that, we're updating our map of items, we're updating our map of cart

103
00:08:32.370 --> 00:08:33.520
items.

104
00:08:33.600 --> 00:08:37.470
Now we can start using that cart in our application.
