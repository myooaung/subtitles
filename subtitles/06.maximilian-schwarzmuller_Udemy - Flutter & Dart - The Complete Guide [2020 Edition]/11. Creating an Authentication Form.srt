1
00:00:02,330 --> 00:00:05,910
Also Zeit, hier mit unserem Off-Forum fortzufahren.

2
00:00:05,960 --> 00:00:08,540
Es gibt einige Orte, an denen Sie beginnen könnten.

3
00:00:08,630 --> 00:00:15,860
Ich beginne mit der Validierung und dem Sammeln aller Benutzereingaben. Beginnen wir hier

4
00:00:15,860 --> 00:00:20,920
mit dem allerersten Textformularfeld für die dortige E-Mail-Adresse.

5
00:00:20,960 --> 00:00:30,390
Ich werde das Validator-Argument hinzufügen, eine Funktion, die die Benutzereingabe validiert, wenn Sie dazu aufgefordert werden.

6
00:00:30,800 --> 00:00:36,860
Wir erhalten hier also den Wert, der vom Benutzer eingegeben wurde, und können eine Zeichenfolge zurückgeben, die

7
00:00:36,860 --> 00:00:38,700
dann als Fehlermeldung angezeigt wird.

8
00:00:38,720 --> 00:00:46,080
Wenn wir einen Fehler feststellen oder null zurückgeben, wenn wir keinen Fehler haben, ist die Validierungslogik der Anwendung

9
00:00:46,140 --> 00:00:49,590
hier sehr einfach. Ich werde prüfen, ob der

10
00:00:52,150 --> 00:00:57,220
Wert leer ist und eine sehr, sehr, sehr naive Validierung der E-Mail-Adresse.

11
00:00:57,220 --> 00:01:01,160
Ich werde prüfen, ob der Wert nicht enthält.

12
00:01:01,330 --> 00:01:06,810
Daher enthält das Ausrufezeichen am Anfang kein passendes Symbol.

13
00:01:06,940 --> 00:01:08,820
Wenn einer der beiden wahr ist.

14
00:01:08,890 --> 00:01:15,550
Wenn es also leer ist oder wenn es nicht im Wert enthalten ist, gebe

15
00:01:15,550 --> 00:01:22,900
ich einen Fehlertext zurück, in dem ich sage: Bitte geben Sie eine gültige E-Mail-Adresse wie diese ein.

16
00:01:23,000 --> 00:01:29,170
Andernfalls werde ich null zurückgeben, wenn wir diese if-Anweisung hier überwinden. Dann ist für

17
00:01:31,430 --> 00:01:33,660
das Passwort alles in Ordnung.

18
00:01:33,660 --> 00:01:35,330
Sie sind natürlich auf dem Passwort.

19
00:01:35,330 --> 00:01:43,190
Wir sollten auch eine Validierung hinzufügen, also lassen Sie uns hier und hier bei dieser Validierungsfunktion prüfen, ob der

20
00:01:43,190 --> 00:01:44,550
Wert leer ist.

21
00:01:44,570 --> 00:01:51,560
Dieselbe Prüfung, die zuvor gestellt wurde, und ich werde die gesamte Länge der Prüfung überprüfen, wenn die Länge des

22
00:01:51,560 --> 00:01:54,920
Passworts kleiner als sechs oder kleiner als sieben ist.

23
00:01:54,920 --> 00:01:58,490
Das ist übrigens die Mindestlänge von Firebase einmal.

24
00:01:58,700 --> 00:02:05,530
Wenn es also kleiner ist als sieben, kehren alle zurück und entschuldigen sich.

25
00:02:05,720 --> 00:02:10,650
Das ist der Benutzername, den ich wie auf dem Passwort überprüfen möchte, also werde ich ihn ausschneiden und dem Passwort hinzufügen.

26
00:02:10,730 --> 00:02:20,990
Wenn wir also kürzer als sieben sind, muss das Passwort mindestens sieben Zeichen lang sein.

27
00:02:20,990 --> 00:02:23,020
Ansonsten gebe ich hier null

28
00:02:26,290 --> 00:02:29,130
zurück und hier brauchen wir ein Semikolon.

29
00:02:29,150 --> 00:02:35,420
Nachdem wir nun zum Feld für den Benutzernamen zurückgekehrt sind, haben wir einen Validator, in dem wir auch den Wert

30
00:02:35,420 --> 00:02:41,270
erhalten, und es liegt an Ihnen, welche Validierungslogik Sie möchten. Ich werde auf Leere prüfen oder auch, ob die

31
00:02:41,300 --> 00:02:43,210
Wertelänge kürzer als 4 ist.

32
00:02:43,430 --> 00:02:53,150
Wenn wir also einen sehr kurzen Benutzernamen haben, gebe ich bitte mindestens vier Zeichen ein. Andernfalls wird genau wie bei den anderen

33
00:02:53,170 --> 00:02:59,130
Validatoren null zurückgegeben, sodass wir diese Validatoren erhalten, aber im Moment werden sie

34
00:02:59,130 --> 00:03:00,460
nie ausgelöst.

35
00:03:00,540 --> 00:03:08,740
Jetzt sollten sie ausgelöst werden, wenn der Benutzer diese Senden-Schaltfläche hier diese Renn-Schaltfläche drückt, und wir können sie

36
00:03:08,740 --> 00:03:11,620
alle gleichzeitig über dieses Forum auslösen.

37
00:03:11,620 --> 00:03:17,010
Das haben Sie auch schon früher im Kurs gelernt, denn wir brauchen einen solchen globalen Schlüssel.

38
00:03:17,020 --> 00:03:24,430
Vielleicht erinnern Sie sich daran aus dem Forummodul, für das wir einen Forumschlüssel erstellen, indem wir einen globalen Schlüssel

39
00:03:24,430 --> 00:03:27,710
instanziieren, der am Ende einen Formularstatus enthält.

40
00:03:27,760 --> 00:03:33,490
Und mit diesem generischen Typ können wir Dart signalisieren, dass irgendwann ein Formularstatus mit diesem Schlüssel verwaltet

41
00:03:33,490 --> 00:03:37,060
wird und wir diesen Schlüssel mit dem Formular verbinden müssen.

42
00:03:37,060 --> 00:03:45,380
Dazu gehen wir zum Forum-Widget und setzen das Schlüsselargument des Forums auf unseren Formularschlüssel. Wenn dieser Formularschlüssel hinzugefügt

43
00:03:45,380 --> 00:03:50,250
wird, können wir auch eine Übermittlungsfunktion hinzufügen, die ich benenne.

44
00:03:50,250 --> 00:03:56,880
Versuchen Sie, den Unterstrich zu übermitteln. Versuchen Sie, zu unterzeichnen, dass er privat ist und nur

45
00:03:56,880 --> 00:04:05,560
innerhalb dieser Klasse aufgerufen werden soll. Versuchen Sie, diesen Formularschlüssel zu verwenden, um das Forum zu validieren. Wir erhalten über die

46
00:04:05,560 --> 00:04:12,070
aktuelle Statuseigenschaft Zugriff auf das Forum. Anschließend können wir validate und aufrufen Düsterer Trigger aller Validatoren

47
00:04:12,070 --> 00:04:19,360
aller Textformularfelder im Formular. Dies gibt ein Ergebnis zurück, das uns sagt, ob das Formular gültig ist oder

48
00:04:19,360 --> 00:04:24,480
nicht. Ich werde dies in einer endgültigen Variablen oder Konstante speichern.

49
00:04:24,480 --> 00:04:30,200
Daher können wir dann prüfen, ob das Formular gültig ist und nur, ob es gültig ist.

50
00:04:30,230 --> 00:04:39,170
Wenn also alle Validatoren null zurückgeben, werden sie fortgesetzt und erhalten die Werte und senden das Formular jetzt, um die Werte

51
00:04:39,170 --> 00:04:45,570
zu erhalten. Wir können den aktuellen Status des Formularschlüssels erneut verwenden und safe aufrufen.

52
00:04:45,590 --> 00:04:52,100
Dies führt dazu, dass alle Textformularfelder aufgerufen werden und in jedem Textformularfeld

53
00:04:52,100 --> 00:04:56,620
D für die hier gespeicherte Funktion ausgelöst wird.

54
00:04:56,680 --> 00:05:02,320
Wir müssen dies also zu jedem Textformularfeld hinzufügen, um die Logik einzurichten, die ausgeführt werden soll, wenn

55
00:05:02,320 --> 00:05:04,170
das gesamte Formular gespeichert wird.

56
00:05:04,300 --> 00:05:10,540
Die ausgelöste Funktion erhält einen Wert, der der vom Benutzer eingegebene Wert ist.

57
00:05:10,540 --> 00:05:18,010
Dort müssen wir dann etwas mit diesem Wert tun, und ich werde den eingegebenen Wert

58
00:05:18,250 --> 00:05:22,900
in einer globalen oder einer klassenweiten Eigenschaft speichern.

59
00:05:22,900 --> 00:05:28,570
Deshalb werde ich hier neben dem endgültigen Formularschlüssel eine Zeichenfolge hinzufügen, die eine echte Variable ist,

60
00:05:28,570 --> 00:05:30,450
also nicht konstant, sondern variabel.

61
00:05:30,610 --> 00:05:40,750
Benutzer-E-Mail, die anfangs eine leere Zeichenfolge ist, sagen wir, und ich erhalte hier auch meinen Benutzernamen und

62
00:05:40,750 --> 00:05:42,850
auch das Benutzerpasswort.

63
00:05:42,850 --> 00:05:48,250
Wir haben diese kostenlosen Eigenschaften hier zu finden und diese Eigenschaften werden nun in den on

64
00:05:48,250 --> 00:05:49,150
safe-Methoden aktualisiert.

65
00:05:49,420 --> 00:05:53,290
So setzen beispielsweise alle Benutzer-E-Mails hier auf Wert, wir wissen, dass sie gültig sind.

66
00:05:53,290 --> 00:05:59,290
Andernfalls wäre dies nicht ausgeführt worden, da wir ein Formular nur gespeichert haben, wenn wir gültige Eingaben haben

67
00:05:59,290 --> 00:06:01,670
und daher sicher einen Wert eingeben können.

68
00:06:01,900 --> 00:06:07,390
Wir brauchen hier keinen festgelegten Status, da der festgelegte Status nur einen wichtigen Unterschied machen würde.

69
00:06:07,450 --> 00:06:13,990
Es würde das Widget neu bewerten und möglicherweise die gerenderte Benutzeroberfläche lesen, aber dies sind nur einige Daten hinter

70
00:06:13,990 --> 00:06:16,180
den Kulissen, die wir intern benötigen.

71
00:06:16,300 --> 00:06:19,430
Das Ändern dieser Daten hat keine Auswirkungen auf die Benutzeroberfläche.

72
00:06:19,450 --> 00:06:25,140
Es ist also nicht erforderlich, die Benutzeroberfläche neu zu bewerten und zu rendern, daher speichere ich sie einfach so.

73
00:06:27,140 --> 00:06:32,690
Das ist die Logik, die wir alle für den Benutzernamen in allen anderen Textformularfeldern benötigen.

74
00:06:32,690 --> 00:06:33,450
Alles bereit.

75
00:06:33,560 --> 00:06:34,520
Nutzername.

76
00:06:34,700 --> 00:06:36,450
Entspricht dem eingegebenen Wert.

77
00:06:36,530 --> 00:06:44,940
Und hier auf dem Passwort setzen wir nicht überraschend das Benutzerkennwort gleich dem eingegebenen Wert, so dass

78
00:06:44,940 --> 00:06:54,330
alle diese Eigenschaften aktualisiert werden, wenn der Safe hier aufgerufen wird und daher das Angebot von safe aufgerufen wurde. Wir

79
00:06:54,330 --> 00:07:01,070
können diese Werte verwenden, um unsere Off-Anfrage an Firebase oder ähnliches zu senden.

80
00:07:01,080 --> 00:07:04,110
Wir werden uns in einem nächsten Schritt darum kümmern.

81
00:07:04,110 --> 00:07:11,190
Nun noch eine Sache, die ich nach der Validierung tun möchte, bevor wir tatsächlich alles speichern.

82
00:07:11,190 --> 00:07:18,240
Ich werde Focus Scope verwenden, die von Flutter bereitgestellte Focus Scope-Klasse, die einen Kontext benötigt, den

83
00:07:18,240 --> 00:07:22,320
wir hier in der State-Klasse als unfokussiert bezeichnen können.

84
00:07:22,320 --> 00:07:27,900
Dadurch wird im Wesentlichen nur die Soft-Tastatur geschlossen, die möglicherweise noch geöffnet ist, sobald wir das

85
00:07:27,900 --> 00:07:34,110
Formular senden, sodass die Tastatur immer geschlossen wird, da dadurch der Fokus von einem Eingabefeld auf nichts verschoben

86
00:07:34,350 --> 00:07:34,940
wird.

87
00:07:34,950 --> 00:07:43,940
Grundsätzlich und mit all dem im Moment werde ich hier nur Benutzer-E-Mails drucken und alle dies für den Benutzernamen und hier für

88
00:07:44,000 --> 00:07:52,850
das Benutzerpasswort wiederholen, damit wir zumindest die Werte sehen und versuchen, dass ich sie abschicke, ist jetzt eine Methode, mit der

89
00:07:52,910 --> 00:07:55,980
verbunden werden sollte dieser Rennknopf hier.

90
00:07:56,000 --> 00:08:03,080
Also wird Prest jetzt auf try submit zeigen und wir haben dies ohne Klammern hinzugefügt, weil wir nur

91
00:08:03,080 --> 00:08:11,210
darauf zeigen wollen, damit es in unserem Namen ausgeführt wird, wenn der Benutzer die Schaltfläche drückt, wenn wir das speichern und wir

92
00:08:11,210 --> 00:08:18,380
zurückgehen und ich eintrete Hier eine E-Mail-Adresse und ich lasse den Benutzernamen weg, aber ich gebe ein zu kurzes

93
00:08:18,380 --> 00:08:20,940
Passwort ein und klicke auf Anmelden.

94
00:08:20,990 --> 00:08:22,820
Sie sehen diese Fehlermeldungen.

95
00:08:22,820 --> 00:08:24,330
Das funktioniert also.

96
00:08:24,530 --> 00:08:33,310
Und wenn ich dann alle diese Fehler hier behebe und auf Anmelden klicke, sieht es besser aus und ich klicke zweimal auf, was bedeutet, dass ich

97
00:08:33,310 --> 00:08:34,820
die Ausgaben zweimal sehe.

98
00:08:34,870 --> 00:08:39,890
Das Senden und Abrufen dieser Eingaben funktioniert also und das ist jetzt großartig.

99
00:08:39,910 --> 00:08:45,220
Natürlich möchten wir nicht nur all diese Eingaben erhalten und validieren, sondern auch zwischen dem

100
00:08:45,220 --> 00:08:47,200
Anmelde- und dem Anmeldemodus wechseln.

101
00:08:47,200 --> 00:08:54,610
Der Modus, in dem wir uns befinden, ändert die Beschriftungen auf den Schaltflächen, aber auch die Textformularfelder.

102
00:08:54,670 --> 00:08:58,540
Wir möchten den Benutzernamen nur abrufen, wenn wir uns anmelden.

103
00:08:58,600 --> 00:09:05,230
Nicht wenn wir uns anmelden, sollten wir daher in der Aus-Form auch einen Status verwalten.

104
00:09:05,320 --> 00:09:14,660
Daher werde ich hier eine neue Variable hinzufügen, bool oder tatsächlich einen Balken hier, weil wir darauf schließen können, wie wir dort unten können, da ich

105
00:09:14,660 --> 00:09:21,220
einen Anfangstyp so festgelegt habe, dass eine Variable, die ich benenne, angemeldet ist, was anfangs sagen wir, ist

106
00:09:21,220 --> 00:09:21,880
wahr.

107
00:09:22,000 --> 00:09:28,410
Und dies steuert, wer sich gerade im Anmeldemodus oder im Anmeldemodus befindet. Dies sollte geändert werden, wenn

108
00:09:28,440 --> 00:09:31,200
diese flache Taste unten gedrückt wird.

109
00:09:31,200 --> 00:09:34,500
Wann immer diese Klappentaste hier gedrückt wird, möchte ich wechseln.

110
00:09:34,500 --> 00:09:44,790
Hier in dieser anonymen Funktion können wir also festlegen, dass die Anmeldung dem entspricht, was derzeit nicht rückgängig gemacht werden soll. Dies sollte nun in einen

111
00:09:44,790 --> 00:09:51,390
festgelegten Status aufgerufen werden, damit die Benutzeroberfläche ebenfalls aktualisiert wird, da sie sich bei der Änderung

112
00:09:51,390 --> 00:09:52,920
im Anmeldemodus befindet.

113
00:09:52,920 --> 00:09:54,780
Dies wirkt sich auf die Benutzeroberfläche aus.

114
00:09:54,900 --> 00:10:05,210
Dies muss also in einen festgelegten Zustand versetzt werden, der jetzt "Anmelden" genannt wird. Dies wirkt sich beispielsweise auf diesen Text hier aus.

115
00:10:05,220 --> 00:10:12,600
Wir können überprüfen, ob die Anmeldung wahr ist, und mit einem ternären Ausdruck können wir einen anderen Wert zurückgeben, wenn er wahr ist,

116
00:10:12,600 --> 00:10:18,590
als wenn er nicht wahr ist, denn wenn er wahr ist, können wir in den Anmeldemodus wechseln.

117
00:10:18,660 --> 00:10:23,740
Dann möchten wir zeigen, dass Sie ein neues Konto erstellen, da dies die Alternative zum Anmelden ist.

118
00:10:23,790 --> 00:10:29,700
Andernfalls, wenn es falsch ist, befinden wir uns im Anmeldemodus und möchten dem Benutzer erlauben, in den Anmeldemodus zu wechseln.

119
00:10:29,790 --> 00:10:37,460
Vielleicht ist ein Text, wie ich ihn bereits habe, dann und auch hier für die Race-Schaltfläche geeignet, wenn wir uns im Anmeldemodus befinden.

120
00:10:38,000 --> 00:10:44,450
Ich möchte anzeigen, um mich anzumelden, aber ansonsten, wenn wir uns im Anmeldemodus befinden, möchte ich die Anmeldung anzeigen

121
00:10:44,450 --> 00:10:47,570
oder melden Sie sich so an und wenn

122
00:10:50,460 --> 00:10:55,330
wir jetzt sicher sind, können wir auf diese Schaltfläche klicken und diese Etiketten aktualisieren.

123
00:10:55,710 --> 00:11:00,950
Jetzt ist das von mir erwähnte Benutzernamenfeld auch nur erforderlich, wenn wir uns anmelden.

124
00:11:01,340 --> 00:11:07,760
Das gesamte Textformularfeld hier sollte also nur bedingt hinzugefügt werden, und wir können dies mit

125
00:11:07,910 --> 00:11:15,710
dieser hübschen Dart-Syntax tun, bei der wir in diesem Widget-Array für die Spalte eine unordentliche if-Anweisung hinzufügen und dieses

126
00:11:15,710 --> 00:11:22,340
Element dann dynamisch zu und von der hinzugefügt und entfernt wird Liste basierend auf der Bedingung in

127
00:11:22,340 --> 00:11:23,330
unserer if-Anweisung.

128
00:11:23,330 --> 00:11:33,960
Hier kann ich also überprüfen, ob wir uns nicht im Anmeldemodus befinden. Verwenden Sie die Anmeldung. Nur wenn wir nicht das Feld danach sind, werden

129
00:11:33,990 --> 00:11:35,850
wir dem Array hinzugefügt.

130
00:11:35,860 --> 00:11:38,230
Also werden wir abwerten, dass ihr Angebot dem Array hinzugefügt wird.

131
00:11:38,380 --> 00:11:40,560
Also nur, wenn das nicht stimmt.

132
00:11:40,600 --> 00:11:43,690
Diese Textformularfelder sind Teil des Spaltenarrays.

133
00:11:43,840 --> 00:11:48,420
Wenn dies wahr ist, ist die Anmeldung wahr und daher falsch.

134
00:11:48,460 --> 00:11:50,550
Dies wird nicht hinzugefügt.

135
00:11:50,620 --> 00:11:55,270
Jetzt sehen Sie hier einige blaue, schnörkellose Linien, da dies eine Dart-Funktion ist, die erst seit Version 2

136
00:11:55,270 --> 00:11:56,710
verfügbar ist. 0 frei.

137
00:11:56,710 --> 00:12:02,090
Möglicherweise haben Sie diese Zeilen nicht, wenn Sie sie haben. Sie können zum Pop-Aspekt von UML gehen und einfach das minimale SDK

138
00:12:02,090 --> 00:12:06,470
erhöhen, während und Sie möchten hier auf 2. 0 frei.

139
00:12:06,470 --> 00:12:08,190
Und damit geht das weg.

140
00:12:08,440 --> 00:12:12,880
Es wird neu aufgebaut und jetzt werden Sie sehen, dass wenn ich hier klicke, Sie auch sehen werden.

141
00:12:12,880 --> 00:12:16,710
Das hier eingegebene erscheint und verschwindet.

142
00:12:16,720 --> 00:12:18,220
Das ist also ziemlich schön.

143
00:12:18,220 --> 00:12:22,440
Sie werden aber auch einen Fehler bemerken, den Sie sehen, wenn ich mich im Protokollierungsmodus befinde.

144
00:12:22,570 --> 00:12:24,150
Wir haben ein Passwort eingegeben.

145
00:12:24,280 --> 00:12:27,860
Aber wenn ich auf Neues Konto erstellen klicke, wechselt es zum Benutzernamen.

146
00:12:28,000 --> 00:12:34,390
Tatsächlich wechselt der Wert im Benutzernamen jetzt zwischen dem Feld für den Benutzernamen und dem Feld

147
00:12:34,390 --> 00:12:40,420
für das Kennwort. Dies geschieht, weil wir dynamisch ein Textformularfeld hinzufügen und entfernen und anstelle

148
00:12:40,450 --> 00:12:47,660
dieser Array-Leiter nicht effizient zwischen diesen Feldern unterscheiden können, die immer die sind Das gleiche Widget habe ich alle

149
00:12:47,690 --> 00:12:49,620
früher im Kurs behandelt.

150
00:12:49,620 --> 00:12:56,340
Und Sie werden sich vielleicht daran erinnern, dass Tasten hier eine Lösung sind. Tasten ermöglichen es dem Flattern, ein Element eindeutig zu

151
00:12:56,670 --> 00:12:59,060
identifizieren, wenn Sie ähnliche Elemente nebeneinander haben.

152
00:12:59,820 --> 00:13:05,310
Daher können wir hier allen diesen Textformularfeldern einen Schlüssel hinzufügen und einen Werteschlüssel erstellen, mit

153
00:13:05,310 --> 00:13:08,590
dem wir unseren eigenen Bezeichner fest codieren können.

154
00:13:08,630 --> 00:13:14,250
Und hier könnten wir E-Mail in das Feld für das E-Mail-Textformular einfügen und in den

155
00:13:14,280 --> 00:13:22,650
Benutzernamen-Text aus dem Feld einen Benutzernamen-Wertschlüssel einfügen. In das Kennwortfeld einen Kennwortschlüssel einfügen und mit Dad sehen Sie, dass dieser Fehler nicht

156
00:13:22,950 --> 00:13:24,390
mehr auftritt Dort.

157
00:13:24,390 --> 00:13:31,470
Wenn ich jetzt Maximilian hier im Benutzernamen hinzufüge, wenn ich jetzt wechsle, werden Sie sehen, dass es im Anmeldemodus und

158
00:13:31,470 --> 00:13:36,690
auch hier verschwunden ist, weil wir das Widget in der Zwischenzeit entfernt haben, aber

159
00:13:36,900 --> 00:13:45,660
es nicht zwischen Passwort und Benutzername springt Fehler ist behoben und mit dieser festen Randnotiz werden Sie auch sehen, dass zum Beispiel das Passwort

160
00:13:45,660 --> 00:13:47,790
endet, wenn es bestehen bleibt.

161
00:13:47,790 --> 00:13:51,350
Wenn ich dies eingebe, werden Sie sehen, dass ich wechseln kann und wir behalten es.

162
00:13:51,360 --> 00:14:00,180
Nachdem dies behoben ist, können wir nun daran arbeiten, diese Daten wirklich zu übermitteln und einen tatsächlichen Benutzer mit Firebase zu erstellen.
