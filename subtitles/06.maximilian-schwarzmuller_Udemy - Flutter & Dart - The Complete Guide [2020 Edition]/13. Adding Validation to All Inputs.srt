1
00:00:02,400 --> 00:00:06,770
So let's move on to the price input an add validation there as well.

2
00:00:06,840 --> 00:00:08,900
For that, I'll add the validator, again

3
00:00:09,020 --> 00:00:15,180
here we have that function which gets a value and should return a string or null and now in here, we're

4
00:00:15,180 --> 00:00:16,750
validating the price.

5
00:00:16,790 --> 00:00:19,430
Now what should be true about the price?

6
00:00:19,440 --> 00:00:24,620
Well I want to check if it is empty, in which case it's certainly not valid.

7
00:00:24,630 --> 00:00:26,760
So in that case I would return

8
00:00:26,760 --> 00:00:34,710
please enter a price but if we make it past this if check, it is not empty but it still might be an invalid

9
00:00:34,740 --> 00:00:35,670
number.

10
00:00:35,670 --> 00:00:39,690
So here I want to check if double.parse succeeds,

11
00:00:39,690 --> 00:00:40,180
tryParse

12
00:00:40,190 --> 00:00:47,220
is the perfect solution for that because tryParse unlike parse does not throw an error if it fails

13
00:00:47,250 --> 00:00:52,740
but return null if it does fail and therefore, if we compare this to null and of course I try parsing

14
00:00:52,740 --> 00:00:58,560
my value, then we know that parsing failed because tryParse returns null if it fails.

15
00:00:58,650 --> 00:01:05,320
So then we could return please enter a valid number because now we know that the user did enter something

16
00:01:05,350 --> 00:01:13,490
but it was not a valid number. Now maybe parsing succeeded but the number is smaller or equal to zero

17
00:01:13,490 --> 00:01:17,940
and of course a valid price should be above zero or above any threshold you have.

18
00:01:18,470 --> 00:01:22,380
So then I want to parse this,

19
00:01:22,780 --> 00:01:28,450
I know now that parsing will succeed because we made it past this check which checks for invalid numbers

20
00:01:28,450 --> 00:01:32,400
but here I want to parse the value and check if it's smaller or equal to zero

21
00:01:32,410 --> 00:01:38,170
and of course your threshold could also be 1, 100, whatever your minimum price is, you should just tell

22
00:01:38,170 --> 00:01:41,680
the user about your minimum price at some point.

23
00:01:41,680 --> 00:01:50,290
So here, I would then return please enter a number greater than zero or anything like that

24
00:01:50,320 --> 00:01:54,780
and if we make it past all these checks, I return null because then we have a valid number.

25
00:01:54,820 --> 00:01:59,070
So with that, now here if I hit save, this succeeds.

26
00:01:59,110 --> 00:02:05,290
If I enter nothing here, I get please enter a price, if I enter zero, I get please enter a number greater

27
00:02:05,290 --> 00:02:09,490
than zero and if I enter hello, I get please enter a valid number,

28
00:02:09,580 --> 00:02:14,210
so we give the user various hints on what's wrong depending on what the user entered.

29
00:02:14,330 --> 00:02:22,770
Now let's move on to the description. There, it's a bit simpler, I'll also add my validator of course, get

30
00:02:22,770 --> 00:02:28,560
my value and you can name this argument however you want, of course it's passed in automatically

31
00:02:28,560 --> 00:02:31,660
but you're receiving it here, so you can name it however you want

32
00:02:31,830 --> 00:02:41,640
and here I want to check if value is empty, in which case I return please enter a description and that's

33
00:02:41,640 --> 00:02:44,100
just an arbitrary condition

34
00:02:44,100 --> 00:02:49,830
I also came up with. I want to make sure that if it's not empty, the length is greater than 10

35
00:02:49,830 --> 00:02:54,930
so that we have a description that is at least 10 characters long and therefore here, the check should

36
00:02:54,930 --> 00:03:03,040
be a bit smaller than 10 because if it's smaller than 10, then I return should be at least 10 characters

37
00:03:03,100 --> 00:03:04,960
long or anything like that

38
00:03:04,960 --> 00:03:10,730
and if we make it past these checks, I just return, I just return null I mean.

39
00:03:10,730 --> 00:03:16,460
So now with that, if we save this and we go back here, submitting this works.

40
00:03:16,550 --> 00:03:22,490
If I remove a couple of characters, now it's too short and if I remove all characters, we get please enter

41
00:03:22,490 --> 00:03:23,480
a description.

42
00:03:23,480 --> 00:03:32,000
This is long enough however, well is indeed long enough and we are able to submit it. Now last but the least

43
00:03:32,000 --> 00:03:37,040
for the imageUrl, you could come up with a complex validation using regular expressions

44
00:03:37,070 --> 00:03:42,560
and after this lecture, I'll have a text lecture with more information about regular expressions.

45
00:03:42,560 --> 00:03:46,070
They are a bit more advanced, a bit more niche but can be useful,

46
00:03:46,070 --> 00:03:52,400
therefore I have them in a separate lecture. Here we'll add a quite basic validation to that imageUrl

47
00:03:52,500 --> 00:03:53,450
input,

48
00:03:53,750 --> 00:03:59,070
we can also have validator argument and create our function here,

49
00:03:59,120 --> 00:04:01,050
again an anonymous function in my 

50
00:04:01,060 --> 00:04:08,060
case here and now in there, I'll have a relatively simple validation, I'll check if the value is

51
00:04:08,060 --> 00:04:18,580
empty and if it is empty, I return my good old please enter an imageUrl message here, if it's not

52
00:04:18,580 --> 00:04:23,650
empty, it might still be invalid because I want to check if the value starts with and that's a method

53
00:04:23,950 --> 00:04:35,820
Dart provides on strings, if it starts with http or if the value starts with https or to be

54
00:04:35,820 --> 00:04:38,060
precise, if it does not start with that.

55
00:04:38,130 --> 00:04:47,160
So if it does not start with HTTP and it does not start with https, so neither of the two is correct, then

56
00:04:47,160 --> 00:04:56,540
I know this can't be a URL so I'll return please enter a valid URL. if you make it past this,

57
00:04:56,540 --> 00:05:02,340
I return null and of course, you could still have a URL that does not yield the image, even if it is

58
00:05:02,340 --> 00:05:08,370
a valid URL, you could have a URL to google.com which is not an image but a webpage and in such

59
00:05:08,370 --> 00:05:14,170
cases, we still would have an invalid image, that's something we don't capture here. You could of course

60
00:05:14,220 --> 00:05:20,520
think about more elaborate rules where you also check whether the link ends with .jpg or

61
00:05:20,550 --> 00:05:25,890
.png to improve the likelihood of that being an image.

62
00:05:25,890 --> 00:05:27,450
So actually let's do that,

63
00:05:27,570 --> 00:05:42,930
so if the value does not end with .png and it also does not end with .jpg and also does not end

64
00:05:42,940 --> 00:05:46,990
with .jpeg with an e in there.

65
00:05:47,020 --> 00:05:49,030
So if we have neither of these,

66
00:05:49,030 --> 00:05:52,150
then let's say I know it's not a valid image,

67
00:05:52,180 --> 00:05:53,830
so then we could return

68
00:05:53,950 --> 00:05:57,800
please enter a valid imageUrl.

69
00:05:57,850 --> 00:06:02,950
Of course, that's still not the perfect check, it leaves out some formats which you might want to accept in

70
00:06:02,950 --> 00:06:04,250
your application

71
00:06:04,300 --> 00:06:08,660
and just because something ends with .jpg also doesn't ensure it's necessarily an image

72
00:06:08,890 --> 00:06:10,010
but it's good enough here,

73
00:06:10,030 --> 00:06:15,130
we have various checks now and with that, we have that validation in place too.

74
00:06:15,130 --> 00:06:24,030
Now one thing we could now also do is we could take these checks and bring them into our updateImageUrl

75
00:06:24,110 --> 00:06:26,190
function here

76
00:06:26,300 --> 00:06:34,520
and then when we have a changed focus here, we could add these checks and instead of value, we could use

77
00:06:34,520 --> 00:06:41,140
the imageUrlController text value which is the value the user entered

78
00:06:41,360 --> 00:06:51,770
and if this is empty or this value, so imageUrlController text does not start with

79
00:06:51,880 --> 00:06:52,510
https

80
00:06:55,950 --> 00:06:59,910
or concatenating these conditions as well,

81
00:07:00,030 --> 00:07:06,690
the value does not end with png or jpg or jpeg like this,

82
00:07:06,690 --> 00:07:13,650
then here we could just return and not continue because in the end what I have here is a long check

83
00:07:13,650 --> 00:07:23,790
where I check whether this is empty and if that's true, we return or if it does not start with http and not

84
00:07:23,880 --> 00:07:29,010
with https, so I'll wrap this into extra parentheses to make it clear that these two belong together.

85
00:07:29,010 --> 00:07:32,030
If this condition overall is true, we also return,

86
00:07:32,100 --> 00:07:40,610
so if it's not starting with that or here, these three are also making up one block altogether, so if

87
00:07:40,610 --> 00:07:47,630
that ends up being true, so if we don't end with one of these extensions here, then I also want to return and

88
00:07:47,810 --> 00:07:54,230
with that, I make sure that I don't show a preview if we have an incorrect URL. With that let's go

89
00:07:54,230 --> 00:07:54,560
there

90
00:07:57,220 --> 00:08:06,540
and if I now tap into a different input and I submit this, this seems to work, I get my output there.

91
00:08:06,570 --> 00:08:13,040
Now if I remove .jpg here at the end, like this,

92
00:08:13,340 --> 00:08:17,040
you see this preview doesn't update and we don't get an error,

93
00:08:17,080 --> 00:08:20,020
so our check here in _updateImageUrl seems to work

94
00:08:20,310 --> 00:08:22,930
and if I submit, I get an error message here

95
00:08:25,770 --> 00:08:31,400
Now if I re-add .jpg here and I tap somewhere else, then this is updated and I can now save this

96
00:08:31,450 --> 00:08:31,840
again.

97
00:08:34,210 --> 00:08:37,930
Now if we then go all the way to the left here

98
00:08:41,320 --> 00:08:45,760
and I remove https at the beginning, tap somewhere else,

99
00:08:48,730 --> 00:08:55,090
it's not updating the preview and I get an error if it try to submit it and if I now delete everything

100
00:08:55,090 --> 00:09:03,990
here, so select all the inputs there, so if I clear this entire input and I click somewhere else, again

101
00:09:04,040 --> 00:09:06,360
this is not updated which is good and

102
00:09:06,360 --> 00:09:12,660
of course you might say if it's empty, then maybe you want to clear this as well but I get this error

103
00:09:12,660 --> 00:09:19,590
message here and yes actually if it is empty, I'll remove this check, if it is empty,

104
00:09:22,350 --> 00:09:23,760
then I don't want to return,

105
00:09:23,760 --> 00:09:31,240
instead I want to call set state and indeed update this preview with the enter a URL text.

106
00:09:31,270 --> 00:09:38,100
So with that, we added validation to all these inputs which is great, which works as it should here now.

107
00:09:38,470 --> 00:09:43,780
The missing piece for adding a product now of course is that we do actually create a new product and

108
00:09:43,860 --> 00:09:46,510
add it to our product list which we can see here

109
00:09:46,510 --> 00:09:48,160
once we're done editing here.
