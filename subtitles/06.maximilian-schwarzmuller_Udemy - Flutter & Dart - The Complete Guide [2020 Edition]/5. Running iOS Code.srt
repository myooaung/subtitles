1
00:00:02,480 --> 00:00:05,370
So let's now do the same for iOS and

2
00:00:05,430 --> 00:00:09,560
for that, I'll go to the iOS folder which you only have if you're on a Mac,

3
00:00:09,560 --> 00:00:11,530
it's not possible to write

4
00:00:11,540 --> 00:00:15,070
iOS code, to develop iOS apps on Windows or Linux.

5
00:00:15,150 --> 00:00:17,270
In the iOS folder, in the runner folder,

6
00:00:17,270 --> 00:00:24,950
go to the AppDelegate.m file and in here, you find some Objective C code.

7
00:00:25,170 --> 00:00:31,110
Now just as before with Java and Android, you don't have to know Objective C, you might have found some

8
00:00:31,110 --> 00:00:38,790
snippet which you want to use or you do know Objective C or you have some knowledge from a blog

9
00:00:38,790 --> 00:00:40,590
post which you want to implement in your app,

10
00:00:40,590 --> 00:00:45,930
so there are ways how you could have gotten some Objective C code to which you want to connect from inside

11
00:00:45,930 --> 00:00:46,770
your Flutter app

12
00:00:46,770 --> 00:00:51,930
and here you can of course simply follow along and write this code together with me.

13
00:00:51,930 --> 00:01:00,130
So here in the AppDelegate.m file, we got to add some code above these lines of code that are already

14
00:01:00,130 --> 00:01:04,530
in there. This here in the end is a function,

15
00:01:04,840 --> 00:01:10,620
it's a function and application which will return a boolean, gets the application object and we'll set

16
00:01:10,680 --> 00:01:13,380
up our MethodChannel listener in here.

17
00:01:13,750 --> 00:01:19,300
To do that, you first of all need to add an import here at the top,

18
00:01:19,540 --> 00:01:29,900
make sure to import flutter/flutter.h between angled brackets like this. So add this import at the

19
00:01:29,900 --> 00:01:33,810
top of the file and with this added,

20
00:01:33,810 --> 00:01:42,730
let's now go down there and create a FlutterViewController with a star after it, name it controller,

21
00:01:42,780 --> 00:01:49,780
so that's essentially the type here in Objective C which we get with 

22
00:01:49,800 --> 00:01:50,520
self.window.rootViewController,

23
00:01:50,520 --> 00:01:57,550
this basically gives us access to the application shell here in the iOS app.

24
00:01:57,780 --> 00:02:05,120
We have to cast this to a FlutterViewController star by adding this type in brackets in front of our

25
00:02:05,120 --> 00:02:05,420
self

26
00:02:05,430 --> 00:02:10,640
window rootViewController call. Now with that controller fetched,

27
00:02:10,740 --> 00:02:13,050
we can set up a Flutter method

28
00:02:13,960 --> 00:02:20,170
channel, also with such a star here, named battery channel or whatever you want, this name is up to you

29
00:02:20,320 --> 00:02:22,780
and then you use square brackets here.

30
00:02:22,840 --> 00:02:32,280
This is in the end how you call a function there and you call FlutterMethodChannel, a method made available

31
00:02:32,460 --> 00:02:35,580
by Flutter, by importing this of course

32
00:02:35,580 --> 00:02:41,460
and then you simply add arguments by separating them with a whitespace or simply to make it more readable,

33
00:02:41,520 --> 00:02:42,360
in a new line,

34
00:02:42,360 --> 00:02:43,530
that's up to you,

35
00:02:43,530 --> 00:02:50,400
it also adds a whitespace in the end and then we have methodChannelWithName:, so that it's a named

36
00:02:50,430 --> 00:02:56,850
argument you could say where the value is @"" and then the identifier you're using in your

37
00:02:56,850 --> 00:02:57,570
Flutter app,

38
00:02:57,600 --> 00:03:00,210
so this MethodChannel identifier here,

39
00:03:00,270 --> 00:03:01,320
copy that and

40
00:03:01,560 --> 00:03:05,380
add it here between the double quotes

41
00:03:06,920 --> 00:03:15,120
and then another argument we have to specify here is the binary messenger argument which we set to controller

42
00:03:15,150 --> 00:03:21,380
so that the data is essentially passed with the help of that app shell you could say.

43
00:03:21,960 --> 00:03:29,520
So with that line added here, let's add another line of code here.

44
00:03:29,920 --> 00:03:37,490
There we now call again, between square brackets, Objective C simply has a quite different syntax than

45
00:03:37,500 --> 00:03:46,330
Dart has, we call battery channel and pass the set method call handler argument which is a named argument

46
00:03:46,960 --> 00:03:55,010
and there, you now use this symbol here and then a bit like in the Android example, you add an anonymous

47
00:03:55,010 --> 00:04:01,400
function here so to say with brackets and curly braces, as an argument here, you get the Flutter method

48
00:04:01,550 --> 00:04:08,660
call with a star, the call and a Flutter result and that's the same pair of arguments you got in the Android

49
00:04:08,660 --> 00:04:14,410
example, so you get the incoming call and then a result object which you can use to send back data

50
00:04:14,600 --> 00:04:20,150
and now here between the curly braces and we have to add a semicolon here, between the curly braces

51
00:04:20,150 --> 00:04:27,450
we can now run our code to identify the incoming method and get our battery level in this case.

52
00:04:27,560 --> 00:04:32,860
Let's now add a new function and we do that outside of this function here,

53
00:04:32,870 --> 00:04:34,210
so outside of these curly braces

54
00:04:34,220 --> 00:04:40,730
but before at end and you define a function in Objective C by adding a dash, then the return type in

55
00:04:40,730 --> 00:04:45,830
brackets and then right after that, the function name, getBatteryLevel for example, again

56
00:04:45,950 --> 00:04:51,800
that name is up to you, doesn't have to match the name you're sending in Flutter. Then you could accept

57
00:04:51,980 --> 00:04:52,450
arguments

58
00:04:52,460 --> 00:04:57,590
but here we don't get any, so we won't have a list of arguments and instead we continue right with the

59
00:04:57,680 --> 00:05:04,780
function body. In there, we now get access to the device which is of type UIDevice star here, store it

60
00:05:04,830 --> 00:05:13,220
in a device variable and we use UIDevice which is provided by iOS in the end, .currentDevice

61
00:05:13,220 --> 00:05:22,230
to get access to the device the app is running on and then we can access device.batteryMonitoringEnabled

62
00:05:22,740 --> 00:05:32,650
and set this to yes, so that we can tap into the device battery level and now add an if check and

63
00:05:32,650 --> 00:05:44,260
check if device.batteryState is equal to UIDevice.batteryStateUnknown, that means we can't fetch

64
00:05:44,260 --> 00:05:52,900
the battery level, then we'll return -1 here. Else if that is successful, we return a converted value,  

65
00:05:52,900 --> 00:06:01,470
convert it to an integer of device.batteryLevel * 100. So this returns the battery level

66
00:06:01,470 --> 00:06:09,170
and now we can call that up there in this application method here in the end by first of all adding

67
00:06:10,060 --> 00:06:20,020
a bit strange looking variable here with __weak typeOf self, weakSelf which is

68
00:06:20,020 --> 00:06:20,940
equal to self.

69
00:06:20,980 --> 00:06:26,680
This basically gives us a reference to the surrounding context here, so that we can use the weak self

70
00:06:26,680 --> 00:06:34,390
here inside of this method to call this method and again that's just some object c specific, has nothing

71
00:06:34,390 --> 00:06:41,620
to do with Flutter or Dart but now in here, we can check if in square brackets at and now you need that

72
00:06:41,620 --> 00:06:47,350
identifier you're using in Flutter for this method name, getBatteryLevel, so if that getBatteryLevel

73
00:06:47,350 --> 00:06:56,200
thing here is equal to a string and the string we want to compare it to is call.method.

74
00:06:56,200 --> 00:07:01,330
So we are basically comparing the incoming call method to this string, just the other way around here

75
00:07:01,750 --> 00:07:08,500
but this is just using some Objective C logic to compare these two strings and if this is equal, then

76
00:07:08,500 --> 00:07:12,850
we know that we're getting a call to getBatteryLevel.

77
00:07:12,850 --> 00:07:19,840
So in this case, we can derive our battery level and store it in the variable here by making a call with

78
00:07:19,840 --> 00:07:22,960
the help of weak self to getBatteryLevel,

79
00:07:22,960 --> 00:07:26,740
so to this method we defined down there,

80
00:07:26,890 --> 00:07:33,400
this method, this function and then we're storing this in the battery level variable here and now we can

81
00:07:33,400 --> 00:07:39,300
just check if battery level is equal to -1 which basically means it failed.

82
00:07:39,340 --> 00:07:45,700
If that's the case, then we return a result where we call or where we create a new Flutter error and we

83
00:07:45,700 --> 00:07:48,880
call error with code,

84
00:07:49,240 --> 00:07:53,150
the code then could be unavailable, it's up to you

85
00:07:53,370 --> 00:08:04,640
and another argument, maybe in a new line but that's totally up to you where the message could

86
00:08:04,640 --> 00:08:14,390
be @, so that's how you create strings in Objective C basically, could be battery info not available

87
00:08:15,910 --> 00:08:21,880
and third argument which you need to pass here, details nil, nil is like null,

88
00:08:21,880 --> 00:08:26,850
so we're not passing any detailed data along with that error.

89
00:08:27,250 --> 00:08:34,270
So we're using this result thing here to send back a result essentially with that configuration,

90
00:08:34,270 --> 00:08:38,590
else if we do have a battery level, then we use result again

91
00:08:38,590 --> 00:08:47,170
and here we simply pass at battery level to send this back here as a value through the result, so this

92
00:08:47,320 --> 00:08:49,340
sends a success result.

93
00:08:49,390 --> 00:08:59,380
Now on this outer if else check, we've sent back a result of Flutter method not implemented, in case some

94
00:08:59,470 --> 00:09:04,990
other identifier was coming in for which we have no logic to run. With all of that,

95
00:09:05,020 --> 00:09:08,610
we got the iOS code finished and we should be able to test this.

96
00:09:08,650 --> 00:09:14,220
Now testing on an emulator won't work because the iOS simulator doesn't give you access to the battery,

97
00:09:14,350 --> 00:09:19,030
so I'll actually connect my real device and test it on there. For that here in the terminal,

98
00:09:19,030 --> 00:09:25,780
I'll run flutter build iOS to build my iOS code and then again open this in Xcode to then run it through

99
00:09:25,780 --> 00:09:27,360
Xcode on my real device.

100
00:09:28,380 --> 00:09:35,600
Now here, I'm getting an error regarding my sign in, so I'll first open this in Xcode, open the entire

101
00:09:35,690 --> 00:09:36,820
iOS folder there

102
00:09:39,900 --> 00:09:46,560
and there select runner and set up my team here, so Maximillian Schwarzmuller in my case as a signing

103
00:09:46,560 --> 00:09:47,610
team.

104
00:09:47,610 --> 00:09:50,640
Now if we look further though, we also got another error here,

105
00:09:50,640 --> 00:09:53,300
so besides that team setup,

106
00:09:53,560 --> 00:10:00,740
I also forgot a semicolon here which we should add, so make sure to add this and then rerun this Flutter build

107
00:10:00,750 --> 00:10:06,980
iOS code here and now this was successful. Now back in Xcode,

108
00:10:06,980 --> 00:10:12,530
make sure your connected device is selected there and click play now to launch the app on this connected

109
00:10:12,530 --> 00:10:19,140
device and here, the app is launching and this battery level you're seeing here is correct, that's the

110
00:10:19,140 --> 00:10:22,920
current battery level I have and therefore this also works on iOS.
