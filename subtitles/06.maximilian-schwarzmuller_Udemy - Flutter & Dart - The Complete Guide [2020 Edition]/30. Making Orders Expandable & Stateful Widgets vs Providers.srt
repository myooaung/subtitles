1
00:00:02,160 --> 00:00:04,710
We're nearing the end of this module,

2
00:00:04,710 --> 00:00:08,430
the missing piece is that this order item here should be expandable.

3
00:00:08,430 --> 00:00:10,940
Now it's gone because I changed something on the screen

4
00:00:11,040 --> 00:00:17,410
but if I place an order here with order now and I go to orders, this button here should actually expand

5
00:00:17,440 --> 00:00:18,130
this order

6
00:00:18,160 --> 00:00:22,460
and show us detailed information about which products were part of that order.

7
00:00:23,720 --> 00:00:30,260
That means that in the order item which is that element we're rendering here in that list, I want to

8
00:00:30,260 --> 00:00:34,290
change what I display depending on whether that icon was clicked or not

9
00:00:34,340 --> 00:00:36,620
and that screams for a stateful widget

10
00:00:36,620 --> 00:00:42,920
and that's important for a stateful widget, not for something we want to manage inside of a class we

11
00:00:42,920 --> 00:00:47,570
provide with the provider package because we're again back to that slide

12
00:00:47,570 --> 00:00:53,780
and whereas orders and the cart and the products are all on the left side here, app-wide state or at

13
00:00:53,780 --> 00:00:56,900
least state that affects multiple widgets,

14
00:00:56,900 --> 00:01:03,380
the question whether we are viewing the details or not is definitely a local state thing.

15
00:01:03,380 --> 00:01:12,350
Our shop page, our cart page doesn't care a bit about whether we expanded the state or expanded the information

16
00:01:12,560 --> 00:01:14,710
for a single order or not.

17
00:01:14,720 --> 00:01:19,550
So that's something we want to manage inside of a single widget and therefore, we use the default widget

18
00:01:19,610 --> 00:01:23,280
state management tool which is using a stateful widget.

19
00:01:23,330 --> 00:01:29,270
So here in the order item, we can use the refactoring tool to convert this to a stateful widget and

20
00:01:29,270 --> 00:01:40,610
in the state class here, we can now manage or add a new property, expanded, which initially is false and

21
00:01:40,610 --> 00:01:43,580
which should be set true when we click this button here.

22
00:01:44,270 --> 00:01:50,720
So here we can call set state and in there, set expanded actually to what it's currently not, with the

23
00:01:50,720 --> 00:01:52,860
exclamation mark in front of that value.

24
00:01:52,880 --> 00:01:58,820
So if it's currently true, we set it to false, if it is false, we set it to true and set state of course

25
00:01:58,820 --> 00:02:03,370
so that the UI updates. That icon should also change based on it,

26
00:02:03,560 --> 00:02:11,920
here we can check expanded and if it is true, then I actually want to show the icons expand_less icon

27
00:02:11,930 --> 00:02:17,280
to shrink it again and only show the expand_more icon if we would see more details,

28
00:02:17,300 --> 00:02:23,330
so if we haven't expanded yet. And now we can use expanded here because remember, we're in a column.

29
00:02:23,480 --> 00:02:26,510
Thus far I only added one element to the column,

30
00:02:26,510 --> 00:02:31,670
well this is exactly the reason why I did this because now, I want to be able to show more details by

31
00:02:31,670 --> 00:02:36,440
simply adding another element below that ListTile. For that,

32
00:02:36,440 --> 00:02:43,700
I use this in list if statement which Dart 2.2.2 added, by using an if statement here right

33
00:02:43,710 --> 00:02:50,630
inside of my list, which either adds nothing to the list if it is false, if the condition yields false

34
00:02:50,750 --> 00:02:55,220
or which adds an item I have to return inside of the if statement to the outer list,

35
00:02:55,400 --> 00:03:01,370
so to the list of column widgets and the condition I want to check here is simply expanded. So if expanded

36
00:03:01,370 --> 00:03:05,460
is true, then it will add a new widget to that column list of widgets,

37
00:03:05,630 --> 00:03:13,670
otherwise it will not. The widget I want to add conditionally here is simply a container with a height that

38
00:03:13,670 --> 00:03:21,050
depends on the amount of items we have in the list, up to a certain point. For that, I'll first of all

39
00:03:21,050 --> 00:03:27,230
import another package that's actually built into Dart and that's dath:math because that gives us a

40
00:03:27,230 --> 00:03:36,500
min function which I can use here to use the minimum height out of two values - either widget.order,

41
00:03:36,550 --> 00:03:39,300
we have to use widget now because we're in the state object,

42
00:03:39,310 --> 00:03:45,970
this gives us access to the connected widget and in that connected widget, we have that order. So widget

43
00:03:46,000 --> 00:03:52,040
order gives me access to the order and there, I want to get the amount of products, which I get with products

44
00:03:52,040 --> 00:03:52,500
length.

45
00:03:52,610 --> 00:04:00,720
So the amount of products that were registered in there and then I multiply that with let's say 20 and

46
00:04:00,810 --> 00:04:12,700
add a base height of maybe 100, yes, maybe 100. So that's the first possible value, that ensures that we

47
00:04:12,700 --> 00:04:16,020
never add a too big container, a too high container

48
00:04:16,030 --> 00:04:21,250
if we only have one product for example but if we have 10 different products in there, I also don't want

49
00:04:21,250 --> 00:04:28,510
to expand this infinitely and have a super big container and therefore, the other value is let's say

50
00:04:29,220 --> 00:04:30,850
180.

51
00:04:30,880 --> 00:04:35,530
So now min will pick either of these two values here.

52
00:04:35,680 --> 00:04:41,020
It will calculate this and if this is smaller, then we'll take that or if that gets very large and this

53
00:04:41,020 --> 00:04:46,290
is smaller, it will take 180 as a height here for our container.

54
00:04:46,330 --> 00:04:55,090
Now important, min requires doubles here, so let's simply add .0 here after 20 which I multiply with

55
00:04:55,090 --> 00:04:56,070
the length.

56
00:04:56,110 --> 00:04:59,170
So this entire container will be attached

57
00:04:59,170 --> 00:05:04,120
if we're in the expanded mode. Of course I then also want to have something in the container.

58
00:05:04,120 --> 00:05:05,950
So let's add a child here

59
00:05:05,950 --> 00:05:08,620
and the part inside of the container.

60
00:05:08,620 --> 00:05:13,330
Well that will be a ListView because it should be scrollable in case we have many items and we take

61
00:05:13,420 --> 00:05:15,470
this value here as a height for the container,

62
00:05:15,520 --> 00:05:17,790
then not all items will fit into the container

63
00:05:17,890 --> 00:05:19,640
hence they need to be scrollable

64
00:05:19,750 --> 00:05:24,460
and since we don't know how many that are, I will use the builder here.

65
00:05:24,490 --> 00:05:27,270
However, we probably won't have that many,

66
00:05:27,400 --> 00:05:32,400
so using children would probably also be fine and to mix it up again,

67
00:05:32,500 --> 00:05:38,260
I will use ListView children here but you could definitely also use the builder. Here we need a list

68
00:05:38,260 --> 00:05:43,600
of widgets and actually what we have here of course is a list of products which I want to render but

69
00:05:43,600 --> 00:05:49,030
you learn that you can of course map the list of data here into a list of widgets.

70
00:05:49,030 --> 00:05:51,740
That's something we did a couple of times in this course already,

71
00:05:51,910 --> 00:05:57,760
just need to convert this to a list again with to list. Map takes a function that runs on every item

72
00:05:57,760 --> 00:06:00,780
in that list here, so on every product

73
00:06:00,940 --> 00:06:06,370
and now here, we need to return a widget which is then used in our ListView here, in that children list

74
00:06:06,370 --> 00:06:07,710
in the end.

75
00:06:07,740 --> 00:06:11,790
Now of course, it's up to you how you define a single product you want to render here,

76
00:06:11,960 --> 00:06:18,700
I will use a row there because I want to have two elements, two widgets side by side.

77
00:06:18,870 --> 00:06:21,870
I will add a text widget here which holds my title,

78
00:06:24,600 --> 00:06:32,280
so here on that product for which I'm rendering this, I get the title of the product and maybe also add

79
00:06:32,280 --> 00:06:43,660
a little bit of text style here and give this a font size of 18 and a font weight of FontWeight.bold, of

80
00:06:44,290 --> 00:06:46,080
course, this is always up to you

81
00:06:46,180 --> 00:06:52,960
and next to that, I'll add another text widget where I want to output the quantity and the price side by side.

82
00:06:52,980 --> 00:07:00,990
So here I'll use string interpolation, use prod quantity, then a times symbol, an X simply, then a dollar

83
00:07:00,990 --> 00:07:02,040
sign which I want to print

84
00:07:02,040 --> 00:07:11,170
hence we need to escape it and then more string interpolation where I output prod.price and there,

85
00:07:11,170 --> 00:07:12,760
I'll also assign some style,

86
00:07:12,760 --> 00:07:20,940
little bit of a different style however, set the font size to 18 and the color maybe to

87
00:07:20,970 --> 00:07:24,350
color.grey.

88
00:07:24,390 --> 00:07:25,790
Now these are the two text pieces

89
00:07:25,830 --> 00:07:31,500
and on that row, I want to add spaceBetween which we can do with main axis alignment and then 

90
00:07:31,500 --> 00:07:39,740
MainAxisAlignment.spaceBetween as you learned. This is how I want to output my list items or the

91
00:07:39,740 --> 00:07:47,310
data about the products if we expand that. So let's do a full restart here and now add a couple of items

92
00:07:47,400 --> 00:07:57,810
to the cart, here we should probably fix that now that I see it in the cart screen here where

93
00:07:57,810 --> 00:08:02,640
I output my total, total amount,

94
00:08:02,810 --> 00:08:09,200
we should use to string as fixed and use two fraction digits here to avoid

95
00:08:09,200 --> 00:08:10,470
issues like this.

96
00:08:10,480 --> 00:08:13,700
So now let's re-add cart items here

97
00:08:13,700 --> 00:08:21,580
and now if I click order now and I go to orders and I click this expand icon, this gets expanded,

98
00:08:21,740 --> 00:08:24,590
we see our data here and we can close this.

99
00:08:24,740 --> 00:08:32,300
We can improve the look of that a little bit. For one, in order item, I think that is a little bit too

100
00:08:32,300 --> 00:08:35,090
big here and one error was

101
00:08:35,090 --> 00:08:37,670
I don't want to add +100 here, just +10

102
00:08:41,800 --> 00:08:50,350
and actually also add some padding of course with EdgeInsets.symmetric and maybe have a horizontal

103
00:08:50,350 --> 00:09:04,330
padding of 15 and vertical of 4, horizontal 15, vertical 4. So that's one thing, that we add some padding

104
00:09:04,330 --> 00:09:11,180
here and the max size also should be just 100 maybe.

105
00:09:11,180 --> 00:09:20,010
So now let's give this one more try, add a couple of items here to our cart, click order now, go to the

106
00:09:20,110 --> 00:09:27,510
orders, go to the orders, expand this and now this looks better. You can see, we can scroll here if that gets

107
00:09:27,510 --> 00:09:32,030
cut off which is indeed what I want to have as an effect here

108
00:09:32,270 --> 00:09:34,320
and with that, that looks quite nice.

109
00:09:34,320 --> 00:09:36,450
We can see what we ordered here,

110
00:09:36,480 --> 00:09:40,090
we see the date and we can see more information if we want to.

111
00:09:40,920 --> 00:09:44,700
So that's always a nice feature we add to this application,

112
00:09:44,700 --> 00:09:50,880
it also emphasizes when you should use stateful widgets and when you should use provided classes and

113
00:09:50,880 --> 00:09:57,870
hopefully also makes it clear what the difference is and with that, I'd say we have a decent shop here.

114
00:09:57,870 --> 00:10:04,740
Definitely not finished, we can't add our own products yet, we'll do that in the next section once we also

115
00:10:04,890 --> 00:10:11,430
work more with user interaction, fetch user input, give users different feedback and so on and there are

116
00:10:11,460 --> 00:10:17,010
other nice features which we can add, like saving data in the Internet, on a server and these are all

117
00:10:17,010 --> 00:10:22,830
things we will add but hopefully with this module, it got a bit clearer how you may manage your state

118
00:10:22,830 --> 00:10:27,630
and bigger applications and why we're doing it like this and how it generally works.
