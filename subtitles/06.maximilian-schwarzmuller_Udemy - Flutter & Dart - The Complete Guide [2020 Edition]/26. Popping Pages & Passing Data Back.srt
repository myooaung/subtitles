1
00:00:02,740 --> 00:00:05,750
So we added our tabs in our drawers

2
00:00:05,750 --> 00:00:09,680
but what we mostly did thus far is we went forward.

3
00:00:09,680 --> 00:00:14,870
I showed you how to go to new pages, obviously because that is an important part

4
00:00:15,200 --> 00:00:21,050
but sometimes you also need to go back programmatically, so not just through that back button which is

5
00:00:21,050 --> 00:00:26,840
added automatically but because something happened and sometimes you also need to pass some data back

6
00:00:26,840 --> 00:00:28,680
to the previous page.

7
00:00:28,700 --> 00:00:35,960
Let's imagine here when we're on the recipe detail page, we want to have a button that actually allows

8
00:00:35,960 --> 00:00:43,700
us to delete this recipe, not permanently but only such that we go back and in that list of recipes, we

9
00:00:43,700 --> 00:00:45,070
don't see it anymore,

10
00:00:45,170 --> 00:00:49,850
maybe because we were in a list with a couple of recipes, we checked out this one,

11
00:00:49,850 --> 00:00:54,310
we didn't like it and we want to go back but we don't want to see this one for now.

12
00:00:54,320 --> 00:01:00,430
When we then go back and go back here, we would see it again but temporarily, I want to get rid of it.

13
00:01:00,710 --> 00:01:06,260
Of course that's a bit of a made up use case but it's a good use case for showing how you can go back

14
00:01:06,530 --> 00:01:10,690
manually in code and how you can pass data around.

15
00:01:10,790 --> 00:01:17,210
So for that on the recipe detail or on the meal_detail_screen here, let's make sure that we have some

16
00:01:17,210 --> 00:01:26,910
button to go back and delete this recipe and I think a floating action button is a good fit here.

17
00:01:26,920 --> 00:01:34,420
So I'dd a floating action button, a new floating action button widget therefore and as a child, I'll just

18
00:01:34,420 --> 00:01:34,730
set

19
00:01:34,780 --> 00:01:40,010
an icon here, the delete icon, this trash bin here

20
00:01:40,230 --> 00:01:46,400
and when we now press this button, so onPressed, that's the interesting part, there.

21
00:01:46,410 --> 00:01:48,540
I want to go back.

22
00:01:48,540 --> 00:01:55,810
Now you can go back with help of the navigator and there not with push but with pop.

23
00:01:55,910 --> 00:02:02,120
Now we also saw pop before in the course and of course you need to use of context here

24
00:02:02,120 --> 00:02:11,450
by the way, we saw pop before in the course to close our modal bottom sheet for example. Pop removes screens

25
00:02:11,630 --> 00:02:19,640
that are on top of the stack and things like dialogs or this modal bottom sheet are behind the scenes

26
00:02:19,710 --> 00:02:26,660
also managed as screens, only though they only make up a part of the overall device screen

27
00:02:26,750 --> 00:02:32,660
but still they are treated as overlays to the current page and therefore can be popped off to remove

28
00:02:32,660 --> 00:02:33,090
them

29
00:02:33,170 --> 00:02:36,290
and the same is true for entire screens, like we have them here.

30
00:02:36,710 --> 00:02:41,520
So pop removes a screen, if I just call it like this,

31
00:02:41,690 --> 00:02:46,880
watch what happens when I click this floating action button, I'm taken back, that happens.

32
00:02:46,910 --> 00:02:52,550
So it's the same as if the user would press this back button here or on Android, this back button down

33
00:02:52,550 --> 00:02:53,380
there.

34
00:02:53,870 --> 00:03:00,080
Pop can be very useful if you have something in your code that requires you to go back or to remove

35
00:03:00,080 --> 00:03:05,720
a dialog or some other overlay from the screen in code.

36
00:03:05,720 --> 00:03:11,970
Now besides pop here, you also have popAndPushNamed which does just what it says,

37
00:03:12,110 --> 00:03:17,440
it pops the current page off and thereafter, it pushes a new named page.

38
00:03:17,450 --> 00:03:23,910
You also can check with can pop whenever there actually is a page to pop, for example if you navigated

39
00:03:23,930 --> 00:03:29,150
to a page with push replacement, then you replaced the existing page in the stack

40
00:03:29,150 --> 00:03:34,800
and therefore popping the new page wouldn't be possible because there would be no page to go to,

41
00:03:34,860 --> 00:03:35,230
right 

42
00:03:35,240 --> 00:03:41,300
because you replaced the existing page. So running can pop to check whether you actually can go back

43
00:03:41,450 --> 00:03:46,940
before you do call pop might be a good idea if you're not sure whether you have another page in

44
00:03:46,940 --> 00:03:48,180
your app. Here,

45
00:03:48,200 --> 00:03:52,550
we of course can be sure and therefore we can call pop like that.

46
00:03:52,550 --> 00:04:00,170
So this takes us back but what if I now want to exclude that recipe we're coming from in my meals overview

47
00:04:00,170 --> 00:04:08,300
here after going back? For that, we can also pass some data to pop. Passing data is optional but here, you

48
00:04:08,300 --> 00:04:15,750
can pass any data you want, a map, a list, a string, a number, an object, whatever you want

49
00:04:15,800 --> 00:04:17,630
and here I want to pass my

50
00:04:20,400 --> 00:04:28,510
meal ID here. So down there, I will forward meal ID or backward

51
00:04:28,610 --> 00:04:33,260
so to say, meal ID to the page we're it coming from.

52
00:04:33,260 --> 00:04:39,900
Now on the page we're coming from, the question of course is how do I get that information?

53
00:04:39,920 --> 00:04:46,970
Well the place where we pushed this page, this MealDetailScreen, is the meal item. There we have

54
00:04:46,970 --> 00:04:55,340
select meal and there I have navigator of pushNamed. This pushNamed method led to the meal detail

55
00:04:55,340 --> 00:04:57,430
screen being displayed.

56
00:04:57,560 --> 00:05:06,130
Now this pushNamed method returns a so-called future, I mentioned futures earlier in the course already.

57
00:05:06,340 --> 00:05:12,340
Futures are objects that allow you to specify a function that should execute once they're done with

58
00:05:12,340 --> 00:05:19,720
a certain operation and one such possible operation, in this case it is the operation at hand, is displaying

59
00:05:19,810 --> 00:05:26,740
the page you're going to. So MealDetailScreen is the page that is displayed when pushNamed is done.

60
00:05:26,740 --> 00:05:34,520
Now once the user goes back from MealDetailScreen, pushNamed is fully done with its operation because

61
00:05:34,550 --> 00:05:39,820
then it has not just displayed that screen but the screen is now also not needed anymore.

62
00:05:40,030 --> 00:05:47,890
So the future return by pushNamed lets you know once the page that you push to is not displayed anymore.

63
00:05:48,550 --> 00:05:56,130
So you can add then here to get that result, this page you are coming from gives you.

64
00:05:56,200 --> 00:06:03,700
So if you're passing any result to the pop method as we are doing it here, then you get that result here

65
00:06:04,090 --> 00:06:09,250
in the function you pass to then and for now I'll just print it.

66
00:06:09,520 --> 00:06:15,820
And that's really important because it's easy to

67
00:06:15,820 --> 00:06:18,930
think that this function here is executed

68
00:06:19,090 --> 00:06:25,810
once you reached the new page right because you push a named page and then once this pushing is done

69
00:06:25,810 --> 00:06:30,160
and once you see the page, this function executes but that's wrong.

70
00:06:30,310 --> 00:06:37,900
Instead you push a page and when this page is popped, then this function here is executed and then therefore,

71
00:06:38,050 --> 00:06:45,240
you get the result that might have been passed to pop. So for now, I'm just printing that result, let's

72
00:06:45,240 --> 00:06:52,470
see whether that works. If I go here to my spaghetti and I click this trash icon, we're popping and indeed

73
00:06:52,470 --> 00:07:00,030
here I see m1 which was the ID of that meal. If I go to the spaghetti and I use this back button

74
00:07:00,030 --> 00:07:08,070
here, then I see null because that still trigger this function we did pop after all, using the back button

75
00:07:08,070 --> 00:07:14,370
does nothing else than use navigator of context pop but of course there, no data is passed along.

76
00:07:15,510 --> 00:07:22,590
So now here, we would have to find out whether we have a non-null value and if we do, then I want to remove

77
00:07:22,620 --> 00:07:26,080
that meal from the list of meals that is displayed.

78
00:07:26,310 --> 00:07:32,300
The problem with that of course is that I'm here in the meal item. The solution can be that in the meal

79
00:07:32,300 --> 00:07:41,000
item in the constructor, I get one extra argument which is required and I want to bind this to a variable,

80
00:07:41,130 --> 00:07:44,020
a property here which is of type function

81
00:07:44,180 --> 00:07:50,850
and that's the remove item function and I bind to remove item here

82
00:07:51,080 --> 00:07:57,000
and now I can call remove item down there if result is not null.

83
00:07:57,050 --> 00:08:04,140
So if result is not equal to null, then I know I have an ID of an item I want to remove

84
00:08:04,250 --> 00:08:10,880
and then we can call it remove item and forward result which will be that ID. Now remove item is a

85
00:08:10,880 --> 00:08:11,350
function

86
00:08:11,360 --> 00:08:13,640
I expect to get in the meal item,

87
00:08:13,760 --> 00:08:19,190
so in the category_meal_screen where we setup that meal item widget, we now have to pass such a function

88
00:08:19,420 --> 00:08:22,810
and that of course means we first of all have to create one.

89
00:08:22,850 --> 00:08:28,100
Now it's a stateless widget which will be a problem because now I suddenly want to change it's state,

90
00:08:28,340 --> 00:08:32,010
I want to change the meals which I display.

91
00:08:32,320 --> 00:08:37,960
So let's first of all convert this into a stateful widget with the refactoring tool here and then

92
00:08:37,960 --> 00:08:45,930
here in the state class, we can add a new function which returns nothing but which I'll name remove meal

93
00:08:46,590 --> 00:08:53,730
where I expect to get a meal ID and then here, I want to update my meals and remove a meal with that

94
00:08:53,730 --> 00:08:59,150
ID from the list. For that first of all, we have to make sure that we don't derive our meals here in

95
00:08:59,150 --> 00:09:04,880
the build method but actually a bit earlier and initState sounds like a great place for that.

96
00:09:04,890 --> 00:09:10,440
That's a perfect use case for initState because when this page gets loaded, when that state gets

97
00:09:10,440 --> 00:09:18,240
created, then we want to load all meals that are based on the ID of the category we're getting.

98
00:09:18,270 --> 00:09:24,960
So all that code here for deriving our meals can be cut out of the build method and be moved here into

99
00:09:24,960 --> 00:09:26,500
initState.

100
00:09:26,550 --> 00:09:35,010
One important thing however is of course that I now need to add a couple of properties here, a string

101
00:09:35,010 --> 00:09:49,990
property category title which is mutable, so which is not final and a list of meals which are my category

102
00:09:50,140 --> 00:09:53,530
or my displayedMeals here

103
00:09:56,710 --> 00:09:57,120
and for that,

104
00:09:57,120 --> 00:10:06,400
we need to import the meal model, so let's import meal.dart from the models folder. With these two

105
00:10:06,400 --> 00:10:14,290
properties added, here where I derive my category title, I do this without final so that we actually use

106
00:10:14,290 --> 00:10:21,670
this property and store the value there and here for category meals, instead here I'll set my displayed

107
00:10:22,000 --> 00:10:24,500
meals with the same logic as before.

108
00:10:24,550 --> 00:10:29,500
We don't need to call set state here because this will automatically run before build runs the first

109
00:10:29,500 --> 00:10:35,440
time and now we'll load data when this component or when this widget is created and we can therefore

110
00:10:35,500 --> 00:10:41,890
now also manipulate our data and update the user interface because we're in a stateful widget now.

111
00:10:41,980 --> 00:10:51,300
So here with remove meal, I'll call set state and I now want to remove an item from displayedMeals.

112
00:10:52,110 --> 00:10:59,400
So I'll reach out to the displayedMeals here and then use remove where which will remove all items that

113
00:11:00,060 --> 00:11:08,220
fit or match a certain criteria and that will get a function that runs on every item in displayedMeals

114
00:11:08,430 --> 00:11:12,760
and there I check if meal.id is equal to the meal ID I got

115
00:11:12,830 --> 00:11:15,120
and if it's equal, then this item will be removed,

116
00:11:16,270 --> 00:11:17,370
like this.

117
00:11:17,530 --> 00:11:23,280
It's in set state so displayedMeals will update or it will update but this will also update the view

118
00:11:23,380 --> 00:11:30,240
and now here instead of using category meals in all these places, we just use displayedMeals.

119
00:11:30,280 --> 00:11:38,140
Now we can also forward a reference of remove meal of that function we added here to meal item.

120
00:11:38,140 --> 00:11:45,670
So there, we have to add remove item argument it expects and there I pass a reference, a pointer at

121
00:11:45,670 --> 00:11:53,430
_removeMeal. If we do a full restart because we turned this into a stateful widget, that typically requires

122
00:11:53,430 --> 00:11:55,240
a full restart,

123
00:11:55,330 --> 00:11:58,200
let's go here and now we get a problem.

124
00:12:00,600 --> 00:12:08,550
The problem is that this call here which I'm doing here with modal route of is not liked in initState

125
00:12:08,760 --> 00:12:14,670
because this taps into this behind the scenes context setup with the inherited widget and so on, all this

126
00:12:14,670 --> 00:12:16,940
behind the scenes wire up work

127
00:12:17,130 --> 00:12:24,240
and this does not work here because context generally is thankfully a property that's globally available

128
00:12:24,240 --> 00:12:31,290
in our state object but not inside of initState because initState runs too early, it runs before

129
00:12:31,320 --> 00:12:34,560
our widget has been created or fully created

130
00:12:34,560 --> 00:12:37,280
and before we have a context for our widget.

131
00:12:37,320 --> 00:12:42,950
So at this point of time, I can't retrieve my route data unfortunately.

132
00:12:42,960 --> 00:12:48,140
Now what's the solution for that or how can we work around that?

133
00:12:48,230 --> 00:12:55,010
There is another lifecycle hook which I haven't mentioned before and that's didChangeDependencies.

134
00:12:55,010 --> 00:13:02,440
You don't reuse that that often but here it's really useful because this will be triggered essentially

135
00:13:02,440 --> 00:13:05,080
whenever the references of the state change,

136
00:13:05,080 --> 00:13:10,990
which also means it will be called when the widget that belongs to the state has been fully initialized

137
00:13:10,990 --> 00:13:13,160
and we can tap into context,

138
00:13:13,270 --> 00:13:16,000
this will still run before build runs.

139
00:13:16,000 --> 00:13:21,640
So in here, I can now put my code which I had in initState, initState would have been great if

140
00:13:21,640 --> 00:13:26,530
we wouldn't have required to use modal route of context in here,

141
00:13:26,530 --> 00:13:33,730
so any of context stuff which you need to do in here will unfortunately not work but in 

142
00:13:33,730 --> 00:13:35,050
didChangeDependencies, it should work.

143
00:13:35,080 --> 00:13:36,760
So now if we do a full restart,

144
00:13:39,370 --> 00:13:42,910
this looks way better and we go here into quick and easy,

145
00:13:42,910 --> 00:13:50,950
this looks better and now if I delete this here, still there. Reason for that is that

146
00:13:50,960 --> 00:13:56,470
didChangeDependencies runs a couple of times after the initialization of that state,

147
00:13:56,500 --> 00:13:58,720
that's the difference to initState of course.

148
00:13:58,720 --> 00:14:04,600
It runs whenever the dependencies of this state change and that's also the case when the attached widget

149
00:14:04,690 --> 00:14:08,900
changes, which unfortunately is the case when we call set state here.

150
00:14:08,920 --> 00:14:15,220
So the state we set here where we do delete a meal is basically overwritten when didChangeDependencies

151
00:14:15,220 --> 00:14:23,790
runs again and we basically load all meals again. A way around that is to simply leave a little mark

152
00:14:24,060 --> 00:14:26,810
that tells us that we are done initializing.

153
00:14:26,820 --> 00:14:34,530
So here we can add a bool, loadedInitData and initially that's false

154
00:14:34,560 --> 00:14:37,620
and of course therefore we don't have to use bool here, we can use var here

155
00:14:41,390 --> 00:14:42,770
and here at the end,

156
00:14:42,980 --> 00:14:52,930
I will set loadedInitData equal to true and now here before we run that code, I'll check if

157
00:14:52,930 --> 00:14:58,130
loadedInitData is equal to false or actually the shortcut for that,

158
00:14:58,160 --> 00:15:02,900
you could use that but the shortcut is that you simply add an exclamation mark in front of this.

159
00:15:02,950 --> 00:15:04,680
So if this is false,

160
00:15:04,720 --> 00:15:10,780
if we haven't loaded the initial data yet, then I will run this code so I'll move all of that, including

161
00:15:10,780 --> 00:15:16,810
my change here to true inside of this if statement and therefore this code will now really only run

162
00:15:17,020 --> 00:15:19,720
for the first time.

163
00:15:19,740 --> 00:15:24,560
So with that if we now do a full reload, we should have the behavior we want,

164
00:15:24,570 --> 00:15:31,120
this app reloads now and then here when we go to a recipe and we declare it,

165
00:15:31,120 --> 00:15:35,420
you see it's now gone from that list, if I do the same for toast hawaii,

166
00:15:35,530 --> 00:15:37,270
that's also gone.

167
00:15:37,270 --> 00:15:44,140
If I go back and then go again back to quick and easy, they are all back here because once we click

168
00:15:44,140 --> 00:15:49,990
the back button here on our list of meals, this page is totally dumped and removed and the state object

169
00:15:49,990 --> 00:15:50,600
is cleared

170
00:15:50,680 --> 00:15:56,230
therefore and hence the next time we click on a category and go back into that list of meals, a brand

171
00:15:56,230 --> 00:16:02,920
new page, a brand new widget and a brand new state object is created and therefore, we again start with

172
00:16:02,920 --> 00:16:05,300
loadedInitData set to false.

173
00:16:05,680 --> 00:16:12,370
So that whole loadedInitData part and didChangeDependencies is a little bit of overhead

174
00:16:12,370 --> 00:16:18,970
we had to add here for this specific use case where we depend on the ID we get through modal route

175
00:16:19,000 --> 00:16:20,700
of context.

176
00:16:20,710 --> 00:16:27,820
The core takeaway nonetheless is that you can pass data around when you're popping by passing the data

177
00:16:27,820 --> 00:16:34,300
you want to pass back to the pop method and then you can retrieve it with the then method on pushNamed

178
00:16:34,300 --> 00:16:38,060
or push or whatever you used and the function in here runs

179
00:16:38,060 --> 00:16:43,240
not when you're done pushing but when you're done with that page you pushed to,

180
00:16:43,270 --> 00:16:48,640
so when that page you pushed to is removed, that's really important.

181
00:16:48,640 --> 00:16:54,910
So a lot of work here but I find it important to also understand how you can pass data back and use

182
00:16:54,910 --> 00:17:01,420
that data and the additional knowledge of didChangeDependencies and how to initialize your data in

183
00:17:01,420 --> 00:17:04,180
a stateful widget, that also can't hurt.
