1
00:00:02,590 --> 00:00:03,770
You see in the end here,

2
00:00:03,790 --> 00:00:06,320
the decoded JSON gives us a map

3
00:00:06,520 --> 00:00:13,680
and in that map here, we have these IDs keys and as a value for the ID key, we have another nested

4
00:00:13,690 --> 00:00:14,420
map

5
00:00:14,420 --> 00:00:20,680
and then here is the other ID key with its nested map and the nested map has the actual product data

6
00:00:20,740 --> 00:00:27,220
where we have more key-value pairs, like description and its value or price and its value.

7
00:00:27,220 --> 00:00:33,730
So we have a map with another map inside of it and that's of course useful to know because that now

8
00:00:33,730 --> 00:00:36,040
allows us to transform that data.

9
00:00:36,040 --> 00:00:38,600
So here we have our extracted data

10
00:00:38,620 --> 00:00:47,800
so to say, you can name this however you want, which is equal to json.decode response

11
00:00:47,800 --> 00:00:51,220
body and that's that map with a map inside of it.

12
00:00:51,580 --> 00:00:55,160
So the type here is map, we will have string keys,

13
00:00:55,160 --> 00:01:00,680
right, these cryptic things here, these are strings and then the value is another map

14
00:01:00,700 --> 00:01:04,950
but actually, we can just say object or dynamic here,

15
00:01:05,110 --> 00:01:10,960
otherwise Dart will give us an error here because it's basically doesn't understand this nested map

16
00:01:10,960 --> 00:01:13,690
in a map structure here on that response

17
00:01:13,690 --> 00:01:14,920
body object.

18
00:01:14,980 --> 00:01:19,890
So this tells Dart that we have a map where the values are dynamic,

19
00:01:19,930 --> 00:01:25,770
we know that the values actually are also maps but Dart would give us an error if we tell it that

20
00:01:25,770 --> 00:01:27,100
this is a map.

21
00:01:27,100 --> 00:01:33,760
So let's just say dynamic here and with that, we have extracted data which is definitely a map, right

22
00:01:33,850 --> 00:01:34,210
here,

23
00:01:34,240 --> 00:01:40,270
it's a map and hence we can call forEach on it and forEach will now execute a function on every entry

24
00:01:40,270 --> 00:01:41,260
in that map,

25
00:01:41,260 --> 00:01:42,760
so on that outer map,

26
00:01:42,760 --> 00:01:51,850
so on every unique ID we have here. That function will get two arguments, a key and a value that's in

27
00:01:51,850 --> 00:01:52,800
that map.

28
00:01:52,930 --> 00:01:56,190
The key as we know is the ID of our products,

29
00:01:56,200 --> 00:02:00,520
so I can also name this prodID, you can name your arguments here however you want and I think that's

30
00:02:00,520 --> 00:02:01,200
clear

31
00:02:01,450 --> 00:02:05,380
and the value will be our prodData, our product data.

32
00:02:05,380 --> 00:02:12,700
Now I want to convert that data into product objects based on our product class because I need product

33
00:02:12,730 --> 00:02:15,440
objects for my items here.

34
00:02:15,580 --> 00:02:18,670
I will comment out all these dummy products here by the way

35
00:02:18,700 --> 00:02:22,570
so that we now really only work with the data we're loading from the server

36
00:02:22,750 --> 00:02:28,030
and with that down there, here in forEach, I want to build these product objects

37
00:02:28,030 --> 00:02:37,170
now . We'll also need a new list here, a temporary list and I'll name this loaded products and initially,

38
00:02:37,170 --> 00:02:38,140
it's an empty list

39
00:02:38,220 --> 00:02:42,710
and to tell Dart which kind of data will be in there eventually, I'll add a type annotation,

40
00:02:42,780 --> 00:02:47,230
this will be a list which eventually will hold a couple of product items,

41
00:02:47,250 --> 00:02:49,320
so single product elements.

42
00:02:49,590 --> 00:02:55,440
And now here in forEach, I want to add new elements to that list and I'll use add here,

43
00:02:55,440 --> 00:02:57,660
you could of course also use insert

44
00:03:01,280 --> 00:03:07,220
with index 0 to insert an element at the beginning instead of at the end, what add does but I'm fine

45
00:03:07,220 --> 00:03:13,790
with the end and here, I want to add a new product, so I'll create a new product object and now the ID for

46
00:03:13,790 --> 00:03:19,760
that product will be on prodID, right, because prodID is that key here in my map and that is just

47
00:03:19,820 --> 00:03:22,160
that ID Firebase generated.

48
00:03:22,460 --> 00:03:25,910
Now the other values can be taken from that inner map,

49
00:03:25,910 --> 00:03:32,270
so title can be taking from prodData and prodData is simply just that map inside of the map and

50
00:03:32,270 --> 00:03:40,550
there, we have a title key. So I can simply access prodData title like this to get the title and the same

51
00:03:40,550 --> 00:03:47,300
for the description. There we have prodData description and the same for the price, there we have

52
00:03:47,300 --> 00:03:53,030
prodData price and this should actually already be a double and not a string because we store that

53
00:03:53,240 --> 00:03:58,250
as a double on Firebase. As you can see, there are no quotes around it, so Firebase recognized that this

54
00:03:58,250 --> 00:04:01,500
is a number and stored it as such.

55
00:04:01,530 --> 00:04:09,030
Now I also of course want to get my favorite status, so I'll also access prodData isFavorite

56
00:04:09,040 --> 00:04:11,160
and of course also the imageUrl,

57
00:04:11,170 --> 00:04:16,040
so here we take prodData imageUrl.

58
00:04:16,310 --> 00:04:18,410
With that we're creating a brand new product,

59
00:04:18,410 --> 00:04:21,310
we're doing that for every product we have in our extracted data,

60
00:04:21,350 --> 00:04:23,290
we're adding that to loaded products,

61
00:04:23,300 --> 00:04:28,490
so the only thing that's left to do is that after this forEach loop here, where we go through all our

62
00:04:28,640 --> 00:04:34,150
extracted data, I set items equal to my loaded products

63
00:04:34,280 --> 00:04:42,260
and that's also why my items up there is not final because I'm now replacing it with my new products,

64
00:04:43,680 --> 00:04:51,400
so with the products I just fetched and of course important, I now call NotifyListeners to update all

65
00:04:51,400 --> 00:04:53,950
places in my app that are interested in that

66
00:04:54,010 --> 00:04:59,050
and one place that is definitely interested is the products overview because here, I'm kicking off the

67
00:04:59,050 --> 00:05:03,820
fetching of the products, down there in the build method,

68
00:05:03,880 --> 00:05:09,330
I of course listen to my products, in my products grid to be precise,

69
00:05:09,370 --> 00:05:12,280
I do listen to my products.

70
00:05:12,280 --> 00:05:16,600
So with that, we should have code that actually fetches our products when this loads,

71
00:05:16,600 --> 00:05:22,420
so let's do a hot refresh and this refreshes and after a while, we see the products and that's of course

72
00:05:22,420 --> 00:05:27,910
not too bad but it would be nice if we show some feedback to the user that tells the user that something

73
00:05:27,910 --> 00:05:33,300
is happening whilst we don't see the products and for that of course, we can show a loading spinner again.

74
00:05:33,340 --> 00:05:40,780
So in the products overview, we again might want to add a new property here to our state, isLoading, which

75
00:05:40,780 --> 00:05:44,950
initially is false and then when we're starting to load,

76
00:05:44,950 --> 00:05:52,300
so right here before we call fetch and set products, we set isLoading equal to true

77
00:05:52,300 --> 00:05:55,780
and now here we shouldn't use async await here

78
00:05:55,920 --> 00:06:01,600
for didChangeDependencies or for initState because these are not methods which return futures

79
00:06:01,630 --> 00:06:06,450
normally and since you override the built-in methods, you shouldn't change what they return.

80
00:06:06,460 --> 00:06:12,280
So using async here would change what they return because an async method always returns a future and

81
00:06:12,280 --> 00:06:17,950
therefore, don't use async await here but here, I will use the old approach with then and then I have

82
00:06:17,950 --> 00:06:23,520
a function which eventually executes where I don't care about the value this yields me because that

83
00:06:23,540 --> 00:06:26,550
will be empty, it will be void anyways

84
00:06:26,590 --> 00:06:32,860
and here I will set isLoading to false again now because here I know I'm done with fetching the products

85
00:06:33,070 --> 00:06:36,050
because fetch and set products returns a future once it's done

86
00:06:36,130 --> 00:06:38,760
and therefore here, I can set this back.

87
00:06:38,830 --> 00:06:45,190
Now obviously, this should be set inside of set state though, so that we also update the UI with that,

88
00:06:45,190 --> 00:06:49,900
otherwise we just change the property but we don't reflect that on the user interface

89
00:06:50,590 --> 00:06:56,260
and now that we do rebuild the UI when this changes, we can use isLoading in the build method to show

90
00:06:56,260 --> 00:06:57,790
something else.

91
00:06:57,820 --> 00:07:04,260
So there for our body, instead of showing the products grid, I want to show the loading spinner if we

92
00:07:04,260 --> 00:07:05,240
are loading.

93
00:07:05,370 --> 00:07:11,520
So here I'll check isLoading and if we are loading, I'll again use a centered widget with the built-in

94
00:07:11,520 --> 00:07:17,940
center widget and then use the built-in CircularProgressIndicator here to show that centered loading

95
00:07:17,940 --> 00:07:23,880
spinner whilst we are loading and only if we are not loading, I'll show a grid. With that if I do a full refresh

96
00:07:23,880 --> 00:07:24,270
here,

97
00:07:24,300 --> 00:07:26,190
this app will restart.

98
00:07:26,490 --> 00:07:31,260
Here it is, here's the spinner and after a while, the spinner disappears and we see the products and I

99
00:07:31,260 --> 00:07:36,210
think that is now a better user experience and that now allows us to load the products.
