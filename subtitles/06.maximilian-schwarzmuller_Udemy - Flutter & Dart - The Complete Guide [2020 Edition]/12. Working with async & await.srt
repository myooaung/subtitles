1
00:00:02,320 --> 00:00:08,530
Before we continue implementing features in this application, let's come back to that then

2
00:00:08,620 --> 00:00:14,320
catch error syntax. We're using then and catch error because these are methods defined on that future

3
00:00:14,320 --> 00:00:19,480
object based on that future class which is built into Dart and it's a very important class as you can

4
00:00:19,480 --> 00:00:20,720
probably already tell,

5
00:00:20,830 --> 00:00:27,880
it helps us deal with asynchronous code and asynchronous code is really just code that executes whilst

6
00:00:27,910 --> 00:00:33,100
other code doesn't wait for it to finish, as it would be the case here for our post request.

7
00:00:33,130 --> 00:00:40,090
You can absolutely work with futures like that but there is a more concise, a more readable syntax

8
00:00:40,090 --> 00:00:45,690
which I personally prefer and which I therefore want to use from now on and which I'll therefore introduce

9
00:00:45,700 --> 00:00:46,260
now

10
00:00:46,440 --> 00:00:49,100
and that's a syntax called async await.

11
00:00:49,150 --> 00:00:55,750
You'll also have that in JavaScript for example if you're familiar with that and you can simply handle

12
00:00:55,750 --> 00:01:03,280
futures with that in a more elegant way, technically behind the scenes, they work in exactly the same

13
00:01:03,280 --> 00:01:05,440
way as you learned it.

14
00:01:05,440 --> 00:01:11,890
You use that syntax by using the async keyword, by adding the async keyword after your parameter list

15
00:01:12,070 --> 00:01:15,670
before your curly brace on a function or a method,

16
00:01:15,670 --> 00:01:21,310
so you need to do that on a method or a function and then you add async here between arguments and curly

17
00:01:21,310 --> 00:01:22,250
braces.

18
00:01:22,360 --> 00:01:28,120
By doing that, one important thing happens, all the code you have in there automatically gets wrapped

19
00:01:28,180 --> 00:01:29,250
into a future,

20
00:01:29,500 --> 00:01:34,630
so when using async here, the function or the method on which you use it always returns a future and

21
00:01:34,630 --> 00:01:39,670
that future might then not yield anything in the end but it always returns a future because this now

22
00:01:39,670 --> 00:01:41,290
is all wrapped into a future.

23
00:01:41,410 --> 00:01:46,390
Therefore here, we don't have to return our future anymore because we automatically have this all wrapped

24
00:01:46,390 --> 00:01:49,840
into a future and that future will also be returned automatically,

25
00:01:49,840 --> 00:01:52,480
so that's some magic happening behind the scenes.

26
00:01:52,600 --> 00:01:59,960
Now the idea with the async keyword is that we can now get rid of then and catch error, instead

27
00:01:59,980 --> 00:02:01,630
we can now use another keyword here,

28
00:02:01,690 --> 00:02:06,850
the await keyword and that tells Dart that we want to wait for this operation to finish before we move

29
00:02:06,850 --> 00:02:09,580
on to the next line in our Dart code.

30
00:02:09,580 --> 00:02:15,400
Now important, with that we don't change the rules of how Dart works. Behind the scenes, it still transforms

31
00:02:15,400 --> 00:02:18,490
this to this future syntax with a then method,

32
00:02:18,550 --> 00:02:22,730
so it's still simply wraps the code which comes in the next line into a then block,

33
00:02:22,780 --> 00:02:28,390
it doesn't pause code execution but to us, it looks like it does and it simply turns this into a more readable

34
00:02:28,390 --> 00:02:34,090
code which is more similar to the code we wrote thus far where we also had the situation that line after

35
00:02:34,090 --> 00:02:35,590
line executed.

36
00:02:35,590 --> 00:02:41,650
So here with await, we're telling Dart that it should wait, in quotation marks, for this to finish or

37
00:02:41,740 --> 00:02:46,960
in other words, that it should wrap all the code that comes after this into the then block that it invisibly

38
00:02:46,960 --> 00:02:48,130
adds.

39
00:02:48,220 --> 00:02:54,070
It means however that we can get rid of then here and although we can get rid of catch error, like

40
00:02:54,250 --> 00:02:54,940
this here.

41
00:02:54,940 --> 00:02:56,160
So let's get rid of all of that,

42
00:02:56,200 --> 00:03:01,970
let's comment that out for the moment here and with that, of course the question is where do we now get

43
00:03:01,970 --> 00:03:02,930
our response from?

44
00:03:03,470 --> 00:03:09,080
Well we can now actually use this here as if this would be a synchronous method,

45
00:03:09,140 --> 00:03:14,330
so a method which finishes immediately, which doesn't continue in the future and eventually finishes

46
00:03:14,780 --> 00:03:21,560
and therefore, we can simply store the result in a variable or like here, in a constant. So we can now assign

47
00:03:21,560 --> 00:03:26,090
a result of this operation to a constant with the help of the await keyword which is available because

48
00:03:26,090 --> 00:03:27,480
we use async here.

49
00:03:27,520 --> 00:03:33,860
So with that, we're storing the response in the response constant and now the code, in the next line so here,

50
00:03:34,190 --> 00:03:39,260
will only execute once this is done because the code in the next line is invisibly wrapped in that then

51
00:03:39,260 --> 00:03:40,150
block.

52
00:03:40,190 --> 00:03:46,430
So in here, we have the response constant available of course due to this syntax here and now all that

53
00:03:46,430 --> 00:03:49,190
code runs just fine as before.

54
00:03:49,190 --> 00:03:55,580
Now with error handling, we of course have no catch error method anymore now but you can use an alternative

55
00:03:55,580 --> 00:03:56,480
approach,

56
00:03:56,480 --> 00:04:01,280
you can use an approach which is also built into Dart which we haven't used thus far but which you can

57
00:04:01,280 --> 00:04:03,770
use on any synchronous code,

58
00:04:03,830 --> 00:04:09,590
so normally on everything but futures and since this now is written like synchronous code, you could

59
00:04:09,590 --> 00:04:10,700
use it here as well,

60
00:04:10,850 --> 00:04:19,670
you can use try catch. With try catch, you add a try block with the try keyword and curly braces around

61
00:04:19,670 --> 00:04:21,060
the code which might fail.

62
00:04:21,140 --> 00:04:25,980
So I added try and then a curly brace and then before my closing curly brace here,

63
00:04:26,000 --> 00:04:29,820
so inside of the curly braces, I have all the code which might eventually fail

64
00:04:29,960 --> 00:04:35,390
and there, you should not put your code which could fail because you were lazy to properly test it but

65
00:04:35,390 --> 00:04:38,590
code where you can't rule out that it fails at runtime,

66
00:04:38,690 --> 00:04:44,360
for example code that depends on user input or that depends on an internet connection which might not

67
00:04:44,360 --> 00:04:50,480
be there, hence HTTP request is a great candidate for trying it because you can't guarantee that it

68
00:04:50,480 --> 00:04:54,470
will succeed because there are too many factors beyond your control.

69
00:04:54,470 --> 00:04:55,850
Now try doesn't work like that,

70
00:04:55,850 --> 00:05:01,130
instead you need to add something else, you need to add a catch class here with the catch keyword

71
00:05:01,550 --> 00:05:06,650
and then between parentheses, an error object which you catch and then you have another pair of curly

72
00:05:06,650 --> 00:05:12,470
braces and between that, you put the code which should run when this throws an error.

73
00:05:12,470 --> 00:05:20,510
So here, I can now actually take that code and move that into my catch block here and use that error

74
00:05:20,510 --> 00:05:24,910
which is passed as an argument so to say into this catch block.

75
00:05:25,100 --> 00:05:29,050
So this will now run if the code between try causes an error,

76
00:05:29,060 --> 00:05:32,840
now this code here of course also should only run if we have no error,

77
00:05:32,840 --> 00:05:39,740
so I'll also move that into the try block because all this code here depends on this succeeding so I'll

78
00:05:39,740 --> 00:05:42,020
move it into the same try block here.

79
00:05:42,550 --> 00:05:48,650
And with that, we have a setup where we can use this try catch feature which again is available in Dart

80
00:05:48,650 --> 00:05:54,710
in general and you can use it anywhere in your Dart code, not just when working with async await or when

81
00:05:54,710 --> 00:06:01,100
working with HTTP, you can use it on any code where you have reason to think that it might fail and

82
00:06:01,100 --> 00:06:06,200
you can't rule that out during development and then you can write code that should run when this fails

83
00:06:06,440 --> 00:06:11,180
and write code that should run when it succeeds or which you want to test whether it succeeds and that's

84
00:06:11,180 --> 00:06:14,840
similar to then and catch error of course.

85
00:06:14,840 --> 00:06:20,280
So with that, we have this set up here in add product and I'm using async await here.

86
00:06:20,390 --> 00:06:25,190
Now just because I'm using it here doesn't mean you also have to use it in edit product for example,

87
00:06:25,460 --> 00:06:30,900
there we're also using that add product future and remember, due to us using async here,

88
00:06:30,920 --> 00:06:36,500
this automatically returns a future here. So in edit product screen, we now get back that future and

89
00:06:36,500 --> 00:06:38,420
we can still work with catch error

90
00:06:38,420 --> 00:06:43,370
and then there if we want to but we can also use with async await there.

91
00:06:43,370 --> 00:06:51,020
So here, I can also add the async keyword after my parameter list before the curly brace, this therefore

92
00:06:51,080 --> 00:06:55,160
here also yields a future which eventually yields nothing

93
00:06:56,090 --> 00:06:58,230
which isn't a problem here for the rest of our code,

94
00:06:58,250 --> 00:06:59,450
that's fine

95
00:06:59,450 --> 00:07:03,130
and then here we have all that code, this here is still synchronous code,

96
00:07:03,140 --> 00:07:07,770
all good but here, we have async code because add product returns a future

97
00:07:07,880 --> 00:07:13,970
and here we can therefore also of course add await, instead of using then.

98
00:07:14,100 --> 00:07:20,180
Now we could store the result here in some variable or some constant but actually add product doesn't

99
00:07:20,180 --> 00:07:25,580
return a result, it returns a future which yields nothing and that nothing certainly is not something

100
00:07:25,850 --> 00:07:27,000
we wouldn't want to store.

101
00:07:27,290 --> 00:07:33,640
So I'm just awaiting here but of course, now I'm not using catch error anymore but I'll again wrap this

102
00:07:33,640 --> 00:07:43,850
into try catch here. So I'll take that code, move that into try, like that and then catch my error here,

103
00:07:44,630 --> 00:07:52,610
get rid of that catch error class there and instead now take that code, that dialog code here, cut that

104
00:07:53,090 --> 00:07:55,030
and move that into catch.

105
00:07:59,240 --> 00:08:06,670
So with that, I'm catching my error here now and then showing that dialog if an error should occur and

106
00:08:06,790 --> 00:08:14,480
we can also get rid of that closing parentheses here. Now this code here, setting the state and popping

107
00:08:14,780 --> 00:08:20,000
should always run no matter if we succeeded or if we then ended up in the error block and for that, on

108
00:08:20,000 --> 00:08:20,720
try catch,

109
00:08:20,720 --> 00:08:26,720
you can also add a finally block, another keyword, only works in conjunction with try and catch and

110
00:08:26,720 --> 00:08:32,800
that defines some code which should always run no matter if you succeeded or if you failed.

111
00:08:32,810 --> 00:08:39,950
So here, we can now move our code here which should always run into finally but important, show dialog

112
00:08:40,460 --> 00:08:47,180
returns a future which will resolve as soon as the user press this button or in other words, it will

113
00:08:47,180 --> 00:08:52,050
resolve as soon as this dialog is popped off the screen which happens when the user presses this button

114
00:08:52,190 --> 00:08:57,920
and therefore here, I actually also want to await for this result before we continue to finally.

115
00:08:57,950 --> 00:09:03,760
So with that, we're using async await and the app should work just as before and for that, I'll actually reintroduce

116
00:09:03,760 --> 00:09:07,760
that error here so that we can see whether that's the case.

117
00:09:07,790 --> 00:09:13,980
So let me refresh the app with that error, reintroduce that and let's see if it still fails,

118
00:09:18,270 --> 00:09:20,240
if we go to manage products here

119
00:09:22,870 --> 00:09:26,880
and we then try to add a new product,

120
00:09:26,980 --> 00:09:32,740
this should fail of course because I still added that error and hopefully, it should still be handled.

121
00:09:32,740 --> 00:09:36,030
So if we now press the save button here, we get the dialog,

122
00:09:36,040 --> 00:09:38,220
we don't navigate away until I click OK

123
00:09:38,230 --> 00:09:43,590
but then we do. So we have the same behavior as before but in my opinion, async await is more readable,

124
00:09:43,630 --> 00:09:48,460
you just have to be aware that behind the scenes, we're still working with a future and this still gets

125
00:09:48,460 --> 00:09:49,780
wrapped into then and so on.
