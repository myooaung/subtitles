WEBVTT
1
00:00:02.520 --> 00:00:07.290
So with that, we added our dummy meals, we added the meal model here,

2
00:00:07.290 --> 00:00:16.600
now let's go back to our meals page there and make sure that we output our meals. Now of course for outputting

3
00:00:16.610 --> 00:00:20.480
the meals, I only want to output the meals that match this category ID.

4
00:00:20.900 --> 00:00:25.130
So if we have a look at the dummy data, we see that every meal has a list of categories

5
00:00:25.160 --> 00:00:29.960
and here I'm referring to the IDs which are set up as IDs on the categories.

6
00:00:29.990 --> 00:00:36.740
So we'll have to check all meals and find the meals which include the category of the category we selected

7
00:00:37.070 --> 00:00:39.890
in the categories list.

8
00:00:39.890 --> 00:00:47.950
So for that, we first of all need to import our meals in here. So for that, let's add an import here in

9
00:00:47.950 --> 00:00:57.760
this file and let's import our dummy_data.dart file in the CategoryMealsScreen and

10
00:00:57.760 --> 00:01:03.760
now with the meals imported, we need to find the right meals here based on the category ID we selected.

11
00:01:04.330 --> 00:01:13.640
So we can add a new final property which we could name displayed or filtered or category meals,

12
00:01:13.640 --> 00:01:21.780
I think that name makes sense and then you can refer to our dummy meals and dummy meals is available

13
00:01:21.780 --> 00:01:27.730
here because we're importing the dummy_data.dart file where we expose this as a constant and the dummy

14
00:01:27.730 --> 00:01:34.060
meals can now be filtered with the where method. Where returns us a new iterable and we can convert

15
00:01:34.060 --> 00:01:39.670
it to a list with the to list method which only contains elements that satisfy a condition which we

16
00:01:39.670 --> 00:01:47.020
specify in an anonymous function we pass to where. This function receives every item it goes through,

17
00:01:47.020 --> 00:01:51.940
it goes through all elements in dummy meals, it receives each item that here is an input and we have

18
00:01:51.940 --> 00:01:56.980
to return true if we want to keep it in the new list which is generated or false if we don't want to

19
00:01:56.980 --> 00:01:58.960
include it in the new list.

20
00:01:58.990 --> 00:02:05.680
So here, we want to return true if the meal we're looking at has the category ID included in its categories

21
00:02:06.070 --> 00:02:13.180
and thankfully, categories is a list and there and on list, we not only have where But Dart also offers

22
00:02:13.180 --> 00:02:20.620
us a contains method and contains returns true if that list contains a specific value. The specific value

23
00:02:20.620 --> 00:02:25.990
we want to check for is the category ID of course. If that category ID is included in the categories

24
00:02:25.990 --> 00:02:32.470
of our meals, then this meal belongs to that category. So category meals now would be our filtered categories

25
00:02:32.950 --> 00:02:38.920
and hence here for the item count, we can now use category meals.length because that is the amount

26
00:02:38.920 --> 00:02:45.970
of items we have and now we can start building our list item and for a very simple start, just to see

27
00:02:45.970 --> 00:02:51.640
whether that works, I'll just return a text here that should output the name of the meal, so that

28
00:02:51.640 --> 00:02:58.410
we can simply see whether we're identifying different meals before we then start on styling and layouting

29
00:02:58.450 --> 00:03:01.630
the meals in an appropriate way.

30
00:03:01.630 --> 00:03:10.300
So here, we can access category meals and then for the index for which this list item is getting generated

31
00:03:10.930 --> 00:03:17.860
and then since this of course is of type meal, we have the title available here. And with that, we should

32
00:03:17.860 --> 00:03:24.610
be able to save this and do a full restart maybe and now hopefully have an application where we can

33
00:03:24.610 --> 00:03:32.290
indeed display the meals for this category we selected on the right screen. So now if I click on Italian,

34
00:03:32.700 --> 00:03:38.410
I see spaghetti with tomato sauce, that doesn't look too bad, looks pretty Italian to me and if I go to the

35
00:03:38.410 --> 00:03:45.520
dummy_data.dart file here, I indeed see spaghetti with tomato sauce is part of c1 which is the ID of

36
00:03:45.520 --> 00:03:53.490
Italian. Now let's see if something else is part of c1, no. We have a couple of values that would be

37
00:03:53.490 --> 00:04:00.450
part of c10 though which is summer, so let's see whether we also can display multiple recipes. If we scroll

38
00:04:00.450 --> 00:04:02.660
down to summer and click on that, yes,

39
00:04:02.700 --> 00:04:04.440
here we got three items.

40
00:04:04.440 --> 00:04:10.970
So this seems to work, filtering and selecting based on the ID seems to work, we get no hamburgers though,

41
00:04:10.980 --> 00:04:12.310
that's strange,

42
00:04:12.330 --> 00:04:23.080
let's quickly check that, pretty sure we should have a hamburger. Classic hamburger has c2 as a category,

43
00:04:23.080 --> 00:04:23.980
oh that's quick and easy,

44
00:04:23.980 --> 00:04:25.240
that should be c3.

45
00:04:30.300 --> 00:04:30.870
So

46
00:04:30.910 --> 00:04:37.260
for the classic hamburger, let's maybe add it to both c2 and c3, yes

47
00:04:37.300 --> 00:04:39.400
and now it's there.

48
00:04:39.430 --> 00:04:40.770
So this seems to work,

49
00:04:40.780 --> 00:04:46.220
now we can select different categories and display different meals based on the category we selected.

50
00:04:46.570 --> 00:04:51.670
The next step is to work on how this is presented because of course this is not really the way we

51
00:04:51.670 --> 00:04:54.100
would want to look at a meal.
