WEBVTT
1
00:00:02.380 --> 00:00:04.390
So we're almost there now.

2
00:00:04.390 --> 00:00:10.990
We added our launch screen, our icons, a name, optimized our code, made sure third-party packages are configured

3
00:00:10.990 --> 00:00:11.840
correctly,

4
00:00:11.860 --> 00:00:17.780
now it's really time to build this app for production and then deploy it to the app stores.

5
00:00:18.100 --> 00:00:21.870
For this, I now also want to point you at the official Flutter documentation again,

6
00:00:21.920 --> 00:00:27.730
there under deployment, you find detailed instructions on how to deploy for Android and iOS and

7
00:00:27.730 --> 00:00:32.600
I strongly recommended you read through these instructions as well to have all the details,

8
00:00:32.630 --> 00:00:36.980
further links and detailed configuration instructions.

9
00:00:37.060 --> 00:00:39.190
Now here, I'll start with Android.

10
00:00:39.190 --> 00:00:45.730
We already added a launcher icon, so I'll go straight ahead to signing the app and there, to publish

11
00:00:45.730 --> 00:00:50.050
the app, you first of all need to create a key store and for that, you should be able to simply run this

12
00:00:50.050 --> 00:00:56.970
command here. So back in my project folder, here in the terminal, I just paste in that command and execute

13
00:00:56.970 --> 00:00:57.120
it.

14
00:00:57.570 --> 00:01:01.370
Now enter a keystroke password which is totally up to you,

15
00:01:01.410 --> 00:01:05.860
just remember it and fill out information which you're getting asked here.

16
00:01:05.910 --> 00:01:10.740
It doesn't have to be valid in theory but all of this will be used to sign your application in the end

17
00:01:10.950 --> 00:01:12.900
and therefore prove that it's you

18
00:01:12.900 --> 00:01:17.400
and all this information will be considered in the signing algorithm in the end you could say and

19
00:01:17.400 --> 00:01:22.230
therefore even though users won't see that and you theoretically could sign with wrong information, you

20
00:01:22.230 --> 00:01:28.460
should really use your real information here to have a correctly signed application with correct information.

21
00:01:28.460 --> 00:01:33.030
Now once you're done with that, you create your key store here and you should not include that key

22
00:01:33.030 --> 00:01:36.260
store anywhere where you share your code with other people.

23
00:01:36.300 --> 00:01:39.810
You should keep that private to you because it can now be used for signing your app,

24
00:01:39.810 --> 00:01:45.270
so basically for saying hey I created this app and I take responsibility for its correctness,

25
00:01:45.270 --> 00:01:48.080
so you want to be the only one who does that.

26
00:01:48.210 --> 00:01:50.610
The next step is that you now reference this app,

27
00:01:50.700 --> 00:01:57.170
this key story from inside your app and for that, as it's mentioned here, you should create a new key.properties

28
00:01:57.170 --> 00:02:00.550
file in your Android folder,

29
00:02:00.680 --> 00:02:08.070
so let's go into Android and in there, create a new file, key.properties and copy in the content here.

30
00:02:08.090 --> 00:02:15.230
Now here, simply use the password you used for creating your key which you entered just a few seconds

31
00:02:15.230 --> 00:02:16.000
ago

32
00:02:16.370 --> 00:02:17.420
and then here,

33
00:02:17.570 --> 00:02:22.800
point at your key store and by default that should be in your users folder 

34
00:02:22.850 --> 00:02:25.410
if you just copy and pasted this command here.

35
00:02:25.520 --> 00:02:35.420
So in my case here, the path is /users/ my username because that path exists on my machine

36
00:02:35.420 --> 00:02:36.610
here and then key.jks

37
00:02:36.620 --> 00:02:42.710
and that should be the path to your key store. Now as it's mentioned here, you should also not

38
00:02:42.770 --> 00:02:44.820
check this file into source control,

39
00:02:44.840 --> 00:02:52.950
so if you're using source control make sure that you ignore your key file here, for example by going

40
00:02:52.950 --> 00:02:59.130
to the Android related sections here and then pointing at the Android folder and there, simply ignore

41
00:02:59.130 --> 00:03:05.070
your key.properties file like this, so that it's not checked into source control so that other people

42
00:03:05.070 --> 00:03:05.920
can't read it

43
00:03:05.970 --> 00:03:12.330
if you share your code. Now you need to consider signing in gradle, in the Android app build gradle file.

44
00:03:12.330 --> 00:03:15.590
So Android app and then in there, build gradle

45
00:03:19.180 --> 00:03:21.360
and there replace the Android entry

46
00:03:24.320 --> 00:03:28.040
with this entry here in the end. So let's search for that,

47
00:03:32.750 --> 00:03:34.280
here's Android,

48
00:03:34.310 --> 00:03:39.440
mark this line and only this line, not the code below it, only this line and replace it with the code

49
00:03:39.440 --> 00:03:41.820
you just copied.

50
00:03:41.990 --> 00:03:47.640
Let me fix the indentation and this is pointing at the key.properties file which then holds all the information

51
00:03:47.640 --> 00:03:48.540
about the key in the end.

52
00:03:51.480 --> 00:03:55.500
Also replace this code here with this code as it says,

53
00:03:55.530 --> 00:03:57.420
so go to build type,

54
00:03:59.900 --> 00:04:00.280
mark

55
00:04:00.300 --> 00:04:05.590
all of that as you can see and then replace all that marked code with this new code

56
00:04:09.080 --> 00:04:13.610
and now you should have everything set up to sign your apps for production and signing is an important

57
00:04:13.610 --> 00:04:19.880
part of publishing Android apps because by signing an app, you basically as I said prove that you are

58
00:04:19.880 --> 00:04:21.380
the author of the app,

59
00:04:21.380 --> 00:04:24.050
the app basically gets mapped to you,

60
00:04:24.050 --> 00:04:30.620
you are the responsible person for this app and this is basically one important step in the Android

61
00:04:30.680 --> 00:04:38.060
publishing process to ensure that you are publishing a valid app and that people can find out who owns

62
00:04:38.060 --> 00:04:42.450
this app in the end or that your app can really be mapped back to you.

63
00:04:43.500 --> 00:04:45.340
Now with that we're almost done,

64
00:04:45.540 --> 00:04:49.350
though you should also go to your pubspec.yaml file and there you find a version.

65
00:04:49.440 --> 00:04:51.160
Now this version is important,

66
00:04:51.210 --> 00:04:54.820
this is in the end the version that's displayed to your users,

67
00:04:54.930 --> 00:05:00.660
the thing in front of the plus and that you use internally. Whenever you update your app and you publish

68
00:05:00.660 --> 00:05:03.780
a new version, you want to change these versions.

69
00:05:03.810 --> 00:05:08.070
The version your users see should be updated such that it makes sense to the users,

70
00:05:08.070 --> 00:05:13.470
for example if you only have a minor bug fix, maybe you increment only the last number here.

71
00:05:13.470 --> 00:05:19.320
You have a bigger new feature which doesn't break everything though, maybe change the middle number or

72
00:05:19.320 --> 00:05:23.840
you have a brand new version of your app which really is quite different to the previous version,

73
00:05:23.850 --> 00:05:29.100
change the number in the front. In the end, that's up to you, it's just about how you communicate changes

74
00:05:29.100 --> 00:05:29.850
to users,

75
00:05:29.940 --> 00:05:34.950
something like 2.0 always looks bigger than 1.0.1.

76
00:05:35.040 --> 00:05:36.690
So that's simply how you can manage this,

77
00:05:36.690 --> 00:05:40.740
what do your users will see when you release a new updated version to the store.

78
00:05:40.740 --> 00:05:45.660
This interim number is something I would also recommend that you increment, simply to a new number like

79
00:05:45.660 --> 00:05:45.950
this,

80
00:05:45.940 --> 00:05:52.020
so not a dot number but simply just a new integer, that you increment this with every new version you released

81
00:05:52.020 --> 00:05:52.860
to the store.

82
00:05:52.860 --> 00:05:54.340
So initially we start with this,

83
00:05:54.420 --> 00:05:59.030
once we release the next version, we would change this to 2 and maybe here to 1.0.1.

84
00:05:59.070 --> 00:06:00.780
That's how you manage these numbers,

85
00:06:00.780 --> 00:06:05.270
these will automatically be included in the build project thereafter.

86
00:06:05.280 --> 00:06:09.870
So now with all of that out of the way, we can build our app for production and we do this by running

87
00:06:09.870 --> 00:06:14.150
Flutter build and then app bundle, not Android but app bundle,

88
00:06:14.160 --> 00:06:20.190
this will build an Android app but an app bundle version which is the version Google actually wants you

89
00:06:20.190 --> 00:06:22.530
to submit to the Google Play Store.

90
00:06:22.560 --> 00:06:23.330
So let's use that and

91
00:06:23.340 --> 00:06:25.330
let's wait for this build process to finish.

92
00:06:25.380 --> 00:06:31.230
This will now automatically build it for production mode and therefore shrink your code, optimize your

93
00:06:31.230 --> 00:06:33.070
code as much as possible

94
00:06:33.120 --> 00:06:38.760
and after a while, this should be done and then give you an app which you can deploy to the Google Play

95
00:06:38.760 --> 00:06:42.130
Store. So this here completed,

96
00:06:42.150 --> 00:06:43.660
now we have an app bundle,

97
00:06:43.680 --> 00:06:46.530
now we can ship that. For that

98
00:06:46.530 --> 00:06:52.380
you can search for play console or Google Play console and you should find a link that leads you to

99
00:06:52.380 --> 00:06:59.270
the Google Play console which you can use to publish your apps, click on launch play console therefore

100
00:06:59.870 --> 00:07:05.690
the first time you sign in here, you will have to pay a fee of $25 so that you can publish

101
00:07:05.690 --> 00:07:06.080
apps.

102
00:07:06.080 --> 00:07:07.320
It's a one time fee,

103
00:07:07.400 --> 00:07:12.350
it's basically in place so that you only publish an app if you're at least a bit serious about it

104
00:07:12.350 --> 00:07:18.010
and once you did that with your Google account, you paid that fee, you can upload your app.

105
00:07:18.080 --> 00:07:26.740
So here create a new application, choose your default language and give it a name like great places, create and now fill

106
00:07:26.740 --> 00:07:32.740
out the title, short description, full description, add images and make that shop screen look good because

107
00:07:32.740 --> 00:07:36.710
in the end, that is what should get users to download your app.

108
00:07:36.760 --> 00:07:38.530
I will not focus on this here however,

109
00:07:38.530 --> 00:07:42.430
these are all fields which should be pretty self-explanatory.

110
00:07:42.430 --> 00:07:45.130
Instead click on app releases here,

111
00:07:45.160 --> 00:07:47.890
there you can also set a beta,

112
00:07:47.890 --> 00:07:52.660
I will go to the production track, click manage and then here create a release,

113
00:07:57.000 --> 00:08:05.450
click continue here and then in the end, upload your app bundle here. For that you can click browse files

114
00:08:06.350 --> 00:08:14.090
and in your project folder, you should now find a build folder and in there, in the end, an app folder with

115
00:08:14.090 --> 00:08:20.090
an outputs folder, there a bundle folder with a release folder and that's your app bundle which you just

116
00:08:20.090 --> 00:08:23.710
created. Click open here and upload this and this is now your app

117
00:08:23.810 --> 00:08:28.910
and as soon as you configure the rest of this entire page and listing here, filled out all the details

118
00:08:28.910 --> 00:08:35.050
and so on, you can actually publish your app through the Google Play console here to the Google Play Store

119
00:08:35.150 --> 00:08:38.900
so that other users and people can download and use your app

120
00:08:38.900 --> 00:08:41.870
and that's the deployment process for Android.

121
00:08:41.870 --> 00:08:44.480
Let's now have a look at how this works on iOS.
