1
00:00:00,270 --> 00:00:01,100
All right my friends.

2
00:00:01,110 --> 00:00:01,980
I'm ready.

3
00:00:01,980 --> 00:00:07,530
Are you ready to build that dance program and use it to find the optimal number of clusters.

4
00:00:07,530 --> 00:00:08,260
Here we go.

5
00:00:08,390 --> 00:00:10,160
Us implement a solution together.

6
00:00:10,500 --> 00:00:13,180
So let's start by creating a new code cell.

7
00:00:13,200 --> 00:00:15,420
And now what will be the first step.

8
00:00:15,420 --> 00:00:18,840
Well as usual you know we want to implement this efficiently.

9
00:00:18,900 --> 00:00:26,260
So we're going to use a function but this time exceptionally this function won't be imported from psychedelia

10
00:00:26,290 --> 00:00:31,180
and it will actually be imported from another very popular library in data science.

11
00:00:31,200 --> 00:00:37,560
I would say you know it is in the top three most popular libraries I put Scotland first of course and

12
00:00:37,800 --> 00:00:44,910
tend to flow for deep learning but that other library is side by side by contains a lot of great tools

13
00:00:45,240 --> 00:00:50,910
when building machinery models and well for hierarchical clustering it indeed contains a function which

14
00:00:50,910 --> 00:00:54,910
is called Ten program and which will return the tangible gram itself.

15
00:00:54,920 --> 00:00:56,790
You know the plot of the DNA program.

16
00:00:56,910 --> 00:01:03,270
So let's do this let's directly import that you know module first that contains this function.

17
00:01:03,420 --> 00:01:12,270
And as we said this model is taken first from side by then from the module cluster and then from the

18
00:01:12,270 --> 00:01:14,770
sub module High are key.

19
00:01:14,940 --> 00:01:15,390
Right.

20
00:01:15,420 --> 00:01:20,670
Google collab guess guesses it perfectly the other way to write this is of course to say from side by

21
00:01:20,730 --> 00:01:23,300
import cluster that hierarchy.

22
00:01:23,310 --> 00:01:24,900
So that's just another writing.

23
00:01:24,900 --> 00:01:27,750
And then we're going to add of course a shortcut to this.

24
00:01:27,750 --> 00:01:34,980
Otherwise we need to call all of this again and the shortcut will be as S C H right for site by cluster

25
00:01:35,070 --> 00:01:35,670
hierarchy.

26
00:01:36,290 --> 00:01:36,570
Okay.

27
00:01:36,600 --> 00:01:42,480
So that's the module which contains the function we want to use in order to build our DNA program.

28
00:01:42,930 --> 00:01:44,360
So now next step.

29
00:01:44,460 --> 00:01:50,160
Well the next step is to use that function which we can now access from that hierarchy module which

30
00:01:50,160 --> 00:01:51,120
we just import it.

31
00:01:51,690 --> 00:01:55,620
And since this function returns directly the danger gram itself.

32
00:01:55,620 --> 00:02:02,310
Well we are going to create a new royal here which we're going to call then draw grab as simple as that.

33
00:02:02,310 --> 00:02:09,510
And this Daniel Graham variable will be the output of this Dan program function which we're about to

34
00:02:09,510 --> 00:02:14,940
use from the hierarchy sub module by the cluster module from the site by library.

35
00:02:14,940 --> 00:02:15,420
All right.

36
00:02:15,720 --> 00:02:16,770
So let's do this.

37
00:02:16,770 --> 00:02:20,830
Since this function belongs to all of this here you know the hierarchy module.

38
00:02:20,910 --> 00:02:24,960
Well we have to call first the shortcut leading to that module.

39
00:02:24,960 --> 00:02:31,580
SDH and from which now we can call this then draw Graham function.

40
00:02:31,590 --> 00:02:32,460
Perfect.

41
00:02:32,460 --> 00:02:34,120
Thank you so much Google collab.

42
00:02:34,260 --> 00:02:38,000
And now indeed in the parenthesis we have to input some arguments.

43
00:02:38,100 --> 00:02:43,530
And now you can't really guess what the arguments will be so I'm just going to write it and then I will

44
00:02:43,530 --> 00:02:44,640
explain what this means.

45
00:02:44,640 --> 00:02:48,020
So first we actually have to call s c h again.

46
00:02:48,030 --> 00:02:52,460
You know the hierarchy module from the cluster module from the site by library.

47
00:02:52,530 --> 00:03:00,270
So SDH from which this time we're gonna call another function which is the linkage function and this

48
00:03:00,270 --> 00:03:03,650
linkage function will take as input to arguments first.

49
00:03:03,660 --> 00:03:10,980
Well your matrix of features inside which you want to identify the clusters and that's of course X and

50
00:03:10,980 --> 00:03:18,600
then the second argument is the clustering technique and in hierarchical clustering the most recommended

51
00:03:18,600 --> 00:03:25,170
method and the one that brings the most relevant results and the most relevant clusters is the method

52
00:03:25,380 --> 00:03:32,460
of minimum variance which is a technique that will result in having clusters inside which you know the

53
00:03:32,610 --> 00:03:33,630
observation points.

54
00:03:33,630 --> 00:03:37,680
DONVAN Right too much you know half among all of them a low variance.

55
00:03:37,680 --> 00:03:43,440
And that's what it means you know the method of minimum variance consists of minimizing the variance

56
00:03:43,440 --> 00:03:47,870
in each of the clusters resulting from hierarchical clustering.

57
00:03:47,880 --> 00:03:50,220
And so this is really the method that I recommend.

58
00:03:50,250 --> 00:03:55,410
And speaking of this method that's exactly the next argument of this linkage function we have to input

59
00:03:55,410 --> 00:04:02,670
here and the name of that parameter is method and the name of that minimum variance method is not called

60
00:04:02,730 --> 00:04:05,590
minimum variance but ward Ward.

61
00:04:05,850 --> 00:04:07,820
You can actually check this on Wikipedia.

62
00:04:07,830 --> 00:04:13,920
There is a whole page on Ward and you will see that indeed and consists of minimizing the variance inside

63
00:04:14,040 --> 00:04:14,790
your clusters.

64
00:04:15,360 --> 00:04:15,710
All right.

65
00:04:15,720 --> 00:04:19,140
And that's it for the whole Daniel Graham function here.

66
00:04:19,140 --> 00:04:26,010
It only expects one argument which is basically the method you choose for your clustering that you link

67
00:04:26,070 --> 00:04:30,150
to your matrix of features X in which you want to identify the clusters.

68
00:04:30,150 --> 00:04:33,450
So that's all you need to input here in this Daniel Graham.

69
00:04:33,480 --> 00:04:34,370
And there you go.

70
00:04:34,410 --> 00:04:39,140
This will already return the danger gram itself you know the plot of the Daniel Graham.

71
00:04:39,210 --> 00:04:41,560
But as usual we want to make it nice.

72
00:04:41,610 --> 00:04:46,360
So we're just gonna add a title an X label and a Y label and then we will show it.

73
00:04:46,440 --> 00:04:52,440
And I will teach you how to read the Dan program to indeed find that optimal number of clusters.

74
00:04:52,440 --> 00:04:53,130
Are you ready.

75
00:04:53,130 --> 00:04:53,850
Let's do this.

76
00:04:53,850 --> 00:04:55,160
Let's do this quickly.

77
00:04:55,230 --> 00:05:01,860
We're going to first add a title you know with the title function by Matt pipelines and this time let's

78
00:05:01,860 --> 00:05:06,270
say you know we're just going to choose a simple title like Senator Graham.

79
00:05:06,330 --> 00:05:11,490
All right then let's add X label.

80
00:05:11,520 --> 00:05:13,260
There you go X label.

81
00:05:13,260 --> 00:05:14,970
And then in quotes.

82
00:05:15,090 --> 00:05:18,740
Well you tell me what is going to be on the x axis.

83
00:05:18,780 --> 00:05:25,440
Let's not fall into the trap of you know answering too quickly you know the x axis is neither annual

84
00:05:25,440 --> 00:05:32,790
income or the spending score you know it's none of the features the x axis in the Dan program is actually

85
00:05:33,200 --> 00:05:34,670
the customers.

86
00:05:34,680 --> 00:05:43,440
You know the observation points basically the x axis are not the columns as I just suggested but the

87
00:05:43,440 --> 00:05:50,370
rows because remember in this matrix X or even the state of set each row corresponds to a customer in

88
00:05:50,550 --> 00:05:53,270
this customer is actually an observation point.

89
00:05:53,460 --> 00:05:56,650
And that's what is on the x axis of Daniel gram.

90
00:05:56,730 --> 00:06:02,960
You have all the observation points you know just given by indexes from one to 200 because we have 200

91
00:06:03,060 --> 00:06:04,690
customers in this dataset.

92
00:06:04,740 --> 00:06:08,100
And then on the y axis What will you have.

93
00:06:08,100 --> 00:06:15,540
Well you will have the Euclidean distances between each pair of customers and then each pair of groups

94
00:06:15,540 --> 00:06:18,420
of customers where the groups get bigger and bigger.

95
00:06:18,480 --> 00:06:24,090
And then by considering bigger and bigger groups you get also the Euclidean distances between two of

96
00:06:24,090 --> 00:06:25,100
these bigger groups.

97
00:06:25,140 --> 00:06:25,480
Right.

98
00:06:25,500 --> 00:06:30,570
That's how the general gram works it will become more clear once we visualize this.

99
00:06:30,570 --> 00:06:31,140
So there you go.

100
00:06:31,140 --> 00:06:35,550
I just wanted to get you to think on what is the X label and the Y label.

101
00:06:35,550 --> 00:06:41,370
So now that we know well let's input here the X label which will be therefore you can either call it

102
00:06:41,490 --> 00:06:46,350
observation points if you want to generalize this or if you want to stay in the context of this case

103
00:06:46,350 --> 00:06:50,090
study well we can call it course Summers.

104
00:06:50,190 --> 00:06:50,750
All right.

105
00:06:50,750 --> 00:06:55,710
Customers that's for the X label and now for the Y label.

106
00:06:55,710 --> 00:07:00,780
Well that will be always the same you know independently of whether we want to stay in that case or

107
00:07:00,780 --> 00:07:06,560
not that's going to be always the you CLI D in distances.

108
00:07:06,600 --> 00:07:07,380
All right.

109
00:07:07,440 --> 00:07:10,550
That's always what is on the y axis in a danger gram.

110
00:07:11,010 --> 00:07:19,250
And finally we end up remember with P LTE that show to indeed display the graph in the output.

111
00:07:19,800 --> 00:07:21,010
All right so now let's check it out.

112
00:07:21,010 --> 00:07:27,740
Let's see that Daniel Graham and I will explain again what we have on the x axis and the y axis.

113
00:07:27,750 --> 00:07:28,780
All right let's do this.

114
00:07:28,800 --> 00:07:33,930
Let's play this cell and we're about to get the Dan program in a second.

115
00:07:33,930 --> 00:07:35,250
There we go.

116
00:07:35,250 --> 00:07:35,490
All right.

117
00:07:35,490 --> 00:07:37,460
So that's our beautiful Daniel gram.

118
00:07:37,470 --> 00:07:46,080
And as we said in the x axis we have the customers listed from 1 to 200 because they're 200 customers

119
00:07:46,080 --> 00:07:48,740
in the data set and on the y axis.

120
00:07:48,750 --> 00:07:50,220
Well we have indeed that.

121
00:07:50,460 --> 00:07:56,850
As you can see Euclidean distances first between each pair of customers that the little pairs you see

122
00:07:56,850 --> 00:07:57,500
here.

123
00:07:57,600 --> 00:08:02,310
And then as you see when you link to customers you know within a same group while this forms a group

124
00:08:02,310 --> 00:08:08,730
and then with the group next to it linking to other customers well you link these two groups within

125
00:08:08,730 --> 00:08:14,850
a new pair and you compute the Euclidean distance between these two groups by you know taking the root

126
00:08:14,970 --> 00:08:20,010
of the sum of the squared distances between the customers inside these groups.

127
00:08:20,010 --> 00:08:20,640
All right.

128
00:08:20,670 --> 00:08:26,700
And you do this for then each pair of bigger groups as we see for example the two biggest groups that

129
00:08:26,700 --> 00:08:29,110
we see on this General Graham are first.

130
00:08:29,170 --> 00:08:34,290
This one you know that first group containing lots of customers.

131
00:08:34,290 --> 00:08:41,160
And the second group is this one right which was linking these two subgroups and then all these sub

132
00:08:41,160 --> 00:08:42,770
subgroups inside.

133
00:08:42,810 --> 00:08:48,260
And so now the question is how do we figure out that optimal number of clusters.

134
00:08:48,270 --> 00:08:55,710
Well it's super simple and to show this I will actually click these three dots here to view the output

135
00:08:55,770 --> 00:09:02,980
in fullscreen but then it's still not enough where I would like to do is now save image as all right

136
00:09:03,220 --> 00:09:06,600
I'm gonna call this image then drew Graham.

137
00:09:06,790 --> 00:09:07,840
Gonna save it.

138
00:09:08,080 --> 00:09:12,190
And now we're gonna go on to my desktop which is right here.

139
00:09:12,370 --> 00:09:12,780
Yes.

140
00:09:12,820 --> 00:09:14,460
I'm recording at night.

141
00:09:14,620 --> 00:09:16,160
And here is the Daniel gram.

142
00:09:16,160 --> 00:09:18,730
So let's see if we can zoom better now.

143
00:09:19,160 --> 00:09:19,950
Whoops.

144
00:09:20,320 --> 00:09:22,000
Let's me let me just.

145
00:09:22,000 --> 00:09:25,970
There you go let me enlarge this.

146
00:09:25,980 --> 00:09:26,450
All right.

147
00:09:26,670 --> 00:09:31,950
Well still not that great but it's good because what I wanted to do is this horizontal line.

148
00:09:31,980 --> 00:09:35,020
That's exactly what I wanted to get which I couldn't get on cola.

149
00:09:35,520 --> 00:09:40,770
And the reason why I wanted to get this horizontal line is because it is what will help us figure out

150
00:09:40,920 --> 00:09:47,970
the optimal number of clusters because very simply on a Daniel gram the optimal number of clusters can

151
00:09:47,970 --> 00:09:58,110
be found where you have the largest distance you can move vertically without touching one of these horizontal

152
00:09:58,110 --> 00:09:58,400
bar.

153
00:09:58,410 --> 00:10:02,240
You know by horizontal bar this is a first horizontal bar.

154
00:10:02,400 --> 00:10:07,640
Then this is the second horizontal bar the third horizontal bar fourth horizontal bar.

155
00:10:07,800 --> 00:10:15,360
And then you know this one is the next one horizontal bar horizontal bar horizontal bar etc. and the

156
00:10:15,540 --> 00:10:22,860
optimal number of clusters can be found where you can move that horizontal line you know the ones that

157
00:10:22,860 --> 00:10:29,280
I'm creating with my mouth and then I'm gonna try to move that vertical bar inside the Daniel gram you

158
00:10:29,280 --> 00:10:35,130
know starting from the top and we'll see where I managed to move the most vertically before meeting

159
00:10:35,130 --> 00:10:36,590
one of these horizontal bar.

160
00:10:36,770 --> 00:10:42,510
So let's do this together and you know we will very easily find where we have the largest vertical move

161
00:10:42,540 --> 00:10:49,800
let's say and then the optimal number of clusters will actually be the number of vertical bars we have

162
00:10:49,920 --> 00:10:52,170
inside that vertical move.

163
00:10:52,170 --> 00:10:52,350
All right.

164
00:10:52,350 --> 00:10:53,340
So let's start from the top.

165
00:10:53,340 --> 00:10:54,760
We have to start from the top.

166
00:10:54,900 --> 00:10:57,500
And so from the top it goes this way we start from here.

167
00:10:57,540 --> 00:10:59,130
That's the first horizontal bar.

168
00:10:59,430 --> 00:11:02,290
And when I move down you know move down like that.

169
00:11:02,310 --> 00:11:03,060
There you go.

170
00:11:03,060 --> 00:11:05,580
That's when I meet the next horizontal bar.

171
00:11:05,580 --> 00:11:06,850
You know this one.

172
00:11:06,930 --> 00:11:13,260
So actually we made a very small vertical distance here which means that indeed the optimal number of

173
00:11:13,260 --> 00:11:15,930
clusters is definitely not too right.

174
00:11:15,930 --> 00:11:18,390
Because here we have two vertical bars.

175
00:11:18,510 --> 00:11:23,030
Then the next step is to start from this second horizontal bar.

176
00:11:23,100 --> 00:11:26,130
And so let's do this with our mouth.

177
00:11:26,130 --> 00:11:26,550
All right.

178
00:11:26,970 --> 00:11:28,080
We start from here.

179
00:11:28,080 --> 00:11:29,520
The second horizontal bar.

180
00:11:29,610 --> 00:11:35,820
And we're going to go down until we meet the next horizontal bar which is right here.

181
00:11:35,910 --> 00:11:36,850
This one right.

182
00:11:36,870 --> 00:11:38,250
That's the second horizontal bar.

183
00:11:38,250 --> 00:11:39,300
This was the first.

184
00:11:39,330 --> 00:11:43,940
And from this first to the second while we made that vertical distance.

185
00:11:44,040 --> 00:11:44,390
OK.

186
00:11:44,730 --> 00:11:45,900
So that's pretty big.

187
00:11:45,900 --> 00:11:50,060
Which means that maybe you know if it is the largest vertical move we can make.

188
00:11:50,340 --> 00:11:55,330
Well in that case the optimal number of clusters would be one two three.

189
00:11:55,380 --> 00:12:00,620
You know the number of vertical bars we have within this vertical move.

190
00:12:00,690 --> 00:12:04,620
This one this one and this one so that would go for three clusters.

191
00:12:04,620 --> 00:12:04,860
All right.

192
00:12:04,860 --> 00:12:06,840
So maybe that's the optimal number of clusters.

193
00:12:06,840 --> 00:12:09,960
But then let's continue let's continue from here.

194
00:12:09,960 --> 00:12:10,680
Right.

195
00:12:10,680 --> 00:12:12,170
So we're going to continue from here.

196
00:12:12,180 --> 00:12:15,300
That last horizontal bar we met.

197
00:12:15,480 --> 00:12:21,450
And now I'm going to expand over here and same we're going to go down until we meet the next horizontal

198
00:12:21,450 --> 00:12:21,770
bar.

199
00:12:21,800 --> 00:12:22,760
And there we go.

200
00:12:22,800 --> 00:12:24,750
That's the next horizontal bar.

201
00:12:24,750 --> 00:12:30,060
And here we made a small vertical distance of definitely it is shorter than the previous vertical distance

202
00:12:30,060 --> 00:12:31,430
we made just before.

203
00:12:31,560 --> 00:12:37,710
And therefore the optimal number of clusters is definitely not one two three and four.

204
00:12:37,710 --> 00:12:38,970
It's definitely not four.

205
00:12:39,280 --> 00:12:39,800
OK.

206
00:12:40,070 --> 00:12:40,400
Okay.

207
00:12:40,460 --> 00:12:45,770
Let's continue maybe there is a higher vertical move we can make in the next step.

208
00:12:45,810 --> 00:12:51,210
And you know exactly that this is going to be the case because we already did k means but there we go.

209
00:12:51,210 --> 00:12:52,080
That's next move.

210
00:12:52,080 --> 00:12:58,590
We start from here that last horizontal bar we met and I'm going to expand this in order to you know

211
00:12:58,620 --> 00:13:03,160
not miss any horizontal bar and actually I should even take the whole width.

212
00:13:03,210 --> 00:13:05,830
You know I should take exactly this.

213
00:13:05,850 --> 00:13:08,970
All right so that we can make sure we don't miss any horizontal bar.

214
00:13:09,360 --> 00:13:10,190
So we start from here.

215
00:13:10,200 --> 00:13:10,890
And here we go.

216
00:13:10,890 --> 00:13:14,180
Let's move down let's move down move down move down move down.

217
00:13:14,190 --> 00:13:19,710
Until we meet the next horizontal bar and here we go.

218
00:13:19,710 --> 00:13:26,050
Right you see that's the next horizontal bar we met the one from that last cluster here and.

219
00:13:26,370 --> 00:13:33,210
Well now the question is is that vertical move you know vertical distance which is made here bigger

220
00:13:33,420 --> 00:13:35,850
than the one we made in the second step.

221
00:13:35,860 --> 00:13:37,230
Meaning this one.

222
00:13:37,380 --> 00:13:40,170
Well it seems to be the case right.

223
00:13:40,170 --> 00:13:49,230
It seems to be that this vertical distance is actually larger than you know this vertical distance.

224
00:13:49,230 --> 00:13:51,660
How could we actually measure this you know to be exactly sure.

225
00:13:51,660 --> 00:13:56,520
Well have a look at you know the pixel here to 64 times 66.

226
00:13:56,520 --> 00:14:03,700
I don't know if you can see it well but if I move up you know remember there were 66.

227
00:14:03,780 --> 00:14:04,530
Well actually zero.

228
00:14:04,530 --> 00:14:04,680
OK.

229
00:14:04,710 --> 00:14:05,700
So that's very easy.

230
00:14:05,700 --> 00:14:08,390
So there are actually 66 pixels here.

231
00:14:08,400 --> 00:14:09,470
All right cool.

232
00:14:09,510 --> 00:14:17,040
And now let's do this again here from that horizontal bar and up to here and wow.

233
00:14:17,070 --> 00:14:17,340
OK.

234
00:14:17,370 --> 00:14:23,550
So that was very short actually because here the vertical distance is actually 67 pixel you see it in

235
00:14:23,550 --> 00:14:30,870
0 2 7 2 times 67 2 7 2 is actually the width of that rectangle I just made with my mouth and 67 is the

236
00:14:30,870 --> 00:14:35,550
height and that's the height where interesting because that corresponds to the distance of the vertical

237
00:14:35,550 --> 00:14:36,190
move.

238
00:14:36,210 --> 00:14:39,050
So actually 67 versus 66.

239
00:14:39,180 --> 00:14:39,590
So.

240
00:14:39,600 --> 00:14:44,130
Well you know three clusters is actually a good number of clusters.

241
00:14:44,130 --> 00:14:49,680
But you know since we already did it with K Means and on the Elbow Method we clearly identified that

242
00:14:50,040 --> 00:14:52,100
the optimal number of classes was five.

243
00:14:52,320 --> 00:14:55,610
Well we're going to take that one difference here.

244
00:14:55,690 --> 00:15:00,000
In order to still keep well five as the optimal number of clusters.

245
00:15:00,010 --> 00:15:03,040
But it's really interesting that we did this 10 program.

246
00:15:03,040 --> 00:15:09,640
I actually didn't notice before that we were so close from my vision I had the impression that this

247
00:15:09,640 --> 00:15:11,080
distance was larger.

248
00:15:11,110 --> 00:15:11,940
But there you go.

249
00:15:11,980 --> 00:15:13,810
This one was also very good.

250
00:15:13,810 --> 00:15:19,390
Let's check in again because I just want to make sure Yes 66 but even 67.

251
00:15:19,510 --> 00:15:20,230
Depends.

252
00:15:20,260 --> 00:15:25,210
Down to where you go exactly in that horizontal bar actually you know to make it super thorough we would

253
00:15:25,210 --> 00:15:32,230
need to start from here you know at the bottom of the horizontal bar up to the top of the next vertical

254
00:15:32,230 --> 00:15:32,500
bar.

255
00:15:32,500 --> 00:15:38,740
So here we have sixty five and here for that next distance.

256
00:15:38,740 --> 00:15:44,750
Well you know I'm starting from the bottom of the horizontal bar and going here sixty five.

257
00:15:44,740 --> 00:15:45,950
The same is the same.

258
00:15:45,970 --> 00:15:51,490
So actually three clusters of five clusters is very good and so feel free to you know continue this

259
00:15:51,520 --> 00:15:53,950
implementation with either three or five.

260
00:15:54,070 --> 00:15:59,440
But since with K Means We identified five clusters as the optimal number of clusters Well we're still

261
00:15:59,440 --> 00:16:01,630
gonna go with five here but there you go.

262
00:16:01,630 --> 00:16:07,750
That's a very good example because indeed in some situations we can have two optimal number of clusters.

263
00:16:08,380 --> 00:16:08,670
All right.

264
00:16:08,680 --> 00:16:14,380
So I'm really glad I showed you this and mostly this shows you the importance of trying several models

265
00:16:14,620 --> 00:16:19,930
whether it is for regression classification clustering because indeed having another Mauro can give

266
00:16:19,930 --> 00:16:25,800
you extra insights when doing your missionary's task and indeed with hierarchical clustering.

267
00:16:25,810 --> 00:16:31,860
That extra insight is that indeed three clusters actually makes a lot of sense as well.

268
00:16:31,870 --> 00:16:32,580
So there you go.

269
00:16:32,590 --> 00:16:38,170
Make sure to keep hierarchical clustering you took it in order to catch these extra insights in your

270
00:16:38,170 --> 00:16:42,130
future data sets for your future clustering problems.

271
00:16:42,160 --> 00:16:42,460
All right.

272
00:16:42,460 --> 00:16:42,880
Perfect.

273
00:16:42,880 --> 00:16:46,440
So let's close this and let's go back to our implementation.

274
00:16:46,600 --> 00:16:47,620
Here it is.

275
00:16:47,620 --> 00:16:47,890
All right.

276
00:16:47,890 --> 00:16:52,390
So to close this well I just pressed escape and there you go.

277
00:16:52,390 --> 00:16:53,530
We have our DNA program.

278
00:16:53,530 --> 00:16:54,800
Everything is perfect.

279
00:16:54,880 --> 00:17:01,180
And now for the next step we're going to train that Hari Aki cool classroom model with as we said five

280
00:17:01,180 --> 00:17:06,280
clusters which you can totally do it with three clusters if you want it will still bring amazing results.

281
00:17:06,400 --> 00:17:09,300
And so let's do this together in the next tutorial.

282
00:17:09,380 --> 00:17:12,220
And until then enjoy clustering and machine learning.
