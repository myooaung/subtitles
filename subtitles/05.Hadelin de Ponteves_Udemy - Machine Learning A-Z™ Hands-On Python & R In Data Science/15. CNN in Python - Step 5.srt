1
00:00:00,270 --> 00:00:05,430
Our friends were almost at the end of this implementation, congratulations again for implementing,

2
00:00:05,440 --> 00:00:10,740
you know, part one that was quite big technical and then, of course, part two and part three to build

3
00:00:10,770 --> 00:00:14,430
and train our new artificial neural network, CNN.

4
00:00:14,820 --> 00:00:21,810
And now we're going to tackle together Part four to make a single prediction, which I remind will consist

5
00:00:21,930 --> 00:00:26,070
of predicting what's inside these two images.

6
00:00:26,160 --> 00:00:28,290
So this one and that one.

7
00:00:28,590 --> 00:00:35,460
So basically, we will deploy our CNN on each of these single images and we'll hope that our CNN predicts

8
00:00:35,670 --> 00:00:36,390
a dog here.

9
00:00:36,480 --> 00:00:38,310
And, of course, a cat here.

10
00:00:38,520 --> 00:00:40,020
All right, let's do this.

11
00:00:40,140 --> 00:00:45,450
So you'll know how to basically deploy CNN in production on a single observation.

12
00:00:46,260 --> 00:00:46,460
All right.

13
00:00:46,520 --> 00:00:52,030
So let's create a new coat cell, and we're going to start by importing none.

14
00:00:52,710 --> 00:00:56,130
I should have actually left it as our essential library is.

15
00:00:56,220 --> 00:00:57,330
You know, that's what I mean.

16
00:00:57,330 --> 00:00:59,730
We always need non-pay, you know, most of the time.

17
00:01:00,090 --> 00:01:00,630
So there we go.

18
00:01:00,660 --> 00:01:01,090
No, I.

19
00:01:01,110 --> 00:01:01,680
As NPR.

20
00:01:01,740 --> 00:01:02,490
Yes, please.

21
00:01:02,750 --> 00:01:03,000
Please.

22
00:01:03,090 --> 00:01:04,320
At this work at NPR.

23
00:01:05,080 --> 00:01:10,830
Then we will import a new module, which is actually something we almost imported before.

24
00:01:10,830 --> 00:01:17,630
You know, at the beginning we imported the image data generated from the image submodular of the pre

25
00:01:17,630 --> 00:01:19,350
pricing module of the Keres Library.

26
00:01:19,620 --> 00:01:23,150
And in fact, what we would like to import now is that image module.

27
00:01:23,220 --> 00:01:28,110
But because we specifically imported something specific from that module, well, we need to import

28
00:01:28,110 --> 00:01:28,590
it again.

29
00:01:28,770 --> 00:01:30,330
So let's just do it quickly.

30
00:01:30,750 --> 00:01:38,400
So we're going to start from karez, from which we're gonna get access to the pre processing module.

31
00:01:38,430 --> 00:01:38,970
Perfect.

32
00:01:39,390 --> 00:01:44,040
From which we're going to import that image module.

33
00:01:44,400 --> 00:01:44,790
Great.

34
00:01:44,970 --> 00:01:45,190
All right.

35
00:01:45,190 --> 00:01:48,660
And now we have everything we need to make that single prediction.

36
00:01:49,350 --> 00:01:55,050
And now the next step will be, of course, to load that single image on which we want to deploy our

37
00:01:55,050 --> 00:01:58,080
moral to predict if there is a cat or dog inside.

38
00:01:58,530 --> 00:02:04,260
And therefore, I'm going to create here a new variable that will be exactly that image in which will

39
00:02:04,260 --> 00:02:06,720
be actually the input of the brick method.

40
00:02:07,290 --> 00:02:13,800
And we're gonna call it variable test, underscore image as the image you want to test our model on

41
00:02:14,000 --> 00:02:14,640
in production.

42
00:02:15,180 --> 00:02:19,800
And the first thing we'll do with that variable, you know, the way we're gonna initialize it is by

43
00:02:19,800 --> 00:02:26,340
simply lowering it from our folder or same single prediction folder that we have here.

44
00:02:26,910 --> 00:02:27,160
OK.

45
00:02:27,240 --> 00:02:33,990
So the way we're gonna do this is with a specific function of the image submodular module, which is

46
00:02:34,080 --> 00:02:42,270
the load I M.G. function in which we can actually find right here by scrolling down a bit, you know,

47
00:02:42,390 --> 00:02:44,610
or scrolling up actually.

48
00:02:44,950 --> 00:02:45,990
Whereas it exactly.

49
00:02:46,380 --> 00:02:48,600
It is exactly here.

50
00:02:48,690 --> 00:02:50,370
Load image function.

51
00:02:50,820 --> 00:02:54,840
So we're going to use that function to simply load an image into the P.

52
00:02:55,050 --> 00:02:55,770
L format.

53
00:02:55,820 --> 00:02:56,080
All right.

54
00:02:56,160 --> 00:02:57,720
That's the first format we'll get.

55
00:02:57,750 --> 00:03:04,440
But you're gonna see that we will need to adapt it a bit more to make it accepted by the predict method.

56
00:03:05,130 --> 00:03:05,390
OK.

57
00:03:05,490 --> 00:03:07,710
So let's go back to our implementation.

58
00:03:07,800 --> 00:03:08,730
And there we go.

59
00:03:08,760 --> 00:03:11,310
Let's go first that image.

60
00:03:11,640 --> 00:03:18,120
So module from which we're gonna call that lo underscore I m g function.

61
00:03:18,840 --> 00:03:22,320
And inside this function will very simply, we have to enter two arguments.

62
00:03:22,620 --> 00:03:25,070
The first one is the path in quotes.

63
00:03:25,350 --> 00:03:32,100
That starts from the root, which is, you know, are data set folder and then going to that single

64
00:03:32,100 --> 00:03:36,630
operation for there and then specifying which image we want to select.

65
00:03:36,750 --> 00:03:38,070
So we'll start with this one.

66
00:03:38,460 --> 00:03:45,410
And therefore, here we need to specify the path data set, slash single prediction slash GARRALDA one.

67
00:03:45,770 --> 00:03:46,110
All right.

68
00:03:46,140 --> 00:03:52,320
And that's exactly what is expected as the first argument of this load underscore HMG function.

69
00:03:52,680 --> 00:03:53,460
So let's do this.

70
00:03:53,490 --> 00:03:55,110
We have to enter it in quotes.

71
00:03:55,500 --> 00:03:58,920
So we start with the data set, then slash.

72
00:03:59,400 --> 00:04:04,530
Then we go into our single underscore prediction folder.

73
00:04:05,220 --> 00:04:09,810
And then we specify which image we want to select as this test image.

74
00:04:10,010 --> 00:04:10,250
OK.

75
00:04:10,320 --> 00:04:12,690
And that let's just do a copy paste.

76
00:04:12,720 --> 00:04:14,430
Make sure we don't make any mistake.

77
00:04:14,850 --> 00:04:15,360
So pressing.

78
00:04:15,360 --> 00:04:15,840
Enter.

79
00:04:16,110 --> 00:04:16,770
Copy that.

80
00:04:17,190 --> 00:04:22,110
And then let's based that back inside our implementation right here.

81
00:04:22,440 --> 00:04:22,740
All right.

82
00:04:22,770 --> 00:04:27,240
And this will lead us to that image, which will be that test image variable.

83
00:04:27,960 --> 00:04:30,700
And then let's not forget the extension that J.

84
00:04:30,930 --> 00:04:31,220
G.

85
00:04:31,760 --> 00:04:32,060
OK.

86
00:04:32,430 --> 00:04:34,500
So that will lead us to that image.

87
00:04:34,620 --> 00:04:38,430
So that this test image will become exactly that image elected.

88
00:04:38,910 --> 00:04:39,090
OK.

89
00:04:39,150 --> 00:04:40,740
So that's the first argument.

90
00:04:40,920 --> 00:04:43,500
And then let's add the second argument.

91
00:04:43,650 --> 00:04:45,300
A very, very important one.

92
00:04:45,330 --> 00:04:50,790
And actually compulsory that image, which, you know, will become the input of the predict method,

93
00:04:51,180 --> 00:04:56,640
has to have the same size as the one that was used during the training.

94
00:04:56,790 --> 00:04:59,880
And remember, we actually resized our.

95
00:05:00,050 --> 00:05:05,930
Images into, you know, this size target size of 64 by 64.

96
00:05:06,050 --> 00:05:08,930
You know, whether it was for the training set or the test set.

97
00:05:09,170 --> 00:05:13,340
And we specified this again when building the CNN right here with the input shape.

98
00:05:13,580 --> 00:05:19,640
So the size of any image we're going to work with, whether it is to train or CNN or to call the predict

99
00:05:19,640 --> 00:05:22,790
method has to be 64 by 64.

100
00:05:23,330 --> 00:05:23,830
Okay.

101
00:05:24,080 --> 00:05:30,530
And in order to specify this here, we need to enter as this new argument, the compulsory one target

102
00:05:31,220 --> 00:05:39,380
underscore size equals and in some parenthesis, 64, 64, 64 by 64.

103
00:05:39,830 --> 00:05:40,260
OK.

104
00:05:40,490 --> 00:05:41,030
Perfect.

105
00:05:41,150 --> 00:05:42,800
So now we have a first test image.

106
00:05:42,980 --> 00:05:48,950
But in order to be accepted by the predict method, which, you know, expect a certain format, we

107
00:05:48,950 --> 00:05:51,830
have to do some extra work here on that test image.

108
00:05:52,180 --> 00:05:56,000
And that first extra work is to convert that bill.

109
00:05:56,000 --> 00:05:56,660
You know, P I.

110
00:05:56,700 --> 00:06:01,370
L format, which is a format of images into an array.

111
00:06:01,670 --> 00:06:06,700
Remember that the Pyhrric method expect as its input to the array.

112
00:06:06,710 --> 00:06:12,080
You know, you remember these double pair of square brackets which we used to input in the predict methods

113
00:06:12,080 --> 00:06:16,520
of our previous Murrells, you know, when predicting the outcome of a single observation.

114
00:06:16,850 --> 00:06:22,400
Well, here we're about to do exactly the same by converting this test image into an array.

115
00:06:22,520 --> 00:06:28,760
And the way we're going to do this is with another function of this image date of preprocessing module,

116
00:06:28,970 --> 00:06:34,830
which is exactly this one image to array, which converts indeed a P.

117
00:06:35,030 --> 00:06:43,230
L image instance into a number by array, which is exactly the format of array expected by the print

118
00:06:43,250 --> 00:06:43,730
method.

119
00:06:44,060 --> 00:06:49,310
So we're going to use that function right away to convert our test image, which so far has the P.

120
00:06:49,520 --> 00:06:52,940
L format into this number by array format.

121
00:06:53,600 --> 00:06:53,870
All right.

122
00:06:53,900 --> 00:06:56,390
So we're going to update our test image again.

123
00:06:56,400 --> 00:07:01,330
So I'm calling it again and then updating it by sending it equal to a new value.

124
00:07:01,790 --> 00:07:07,130
And, well, as you understood it, we're going to use our image, some module again, from which we're

125
00:07:07,130 --> 00:07:13,830
going to call this time that I, M.G., underscore to underscore array function.

126
00:07:14,060 --> 00:07:14,990
And guess what?

127
00:07:14,990 --> 00:07:16,520
It has to take as input.

128
00:07:16,760 --> 00:07:20,870
Well, very simply, it just needs to take that image in the P.

129
00:07:21,050 --> 00:07:24,590
L format, which we want to convert into the non-pay array format.

130
00:07:24,950 --> 00:07:29,780
And therefore, well, the input will simply be that test image and nothing else.

131
00:07:29,810 --> 00:07:34,490
You know, we only need that image of which we want to convert the format.

132
00:07:35,060 --> 00:07:35,450
OK.

133
00:07:35,630 --> 00:07:36,620
So that the next step.

134
00:07:36,680 --> 00:07:41,450
But then we still have some extra work to do, which is still related to the fact that, you know,

135
00:07:41,450 --> 00:07:47,060
the British method has to be called on the exact same format that was used during the training.

136
00:07:47,450 --> 00:07:53,720
And well, remember that, you know, when preprocessing are training set in our test set right here

137
00:07:53,720 --> 00:07:55,280
in part one, they will be pressing.

138
00:07:55,610 --> 00:07:58,700
We actually created batches of images.

139
00:07:59,060 --> 00:08:05,000
Therefore, you know, our CNN was not trained on single images, you know, entering the network one

140
00:08:05,000 --> 00:08:05,660
after the other.

141
00:08:05,930 --> 00:08:08,660
But it was trained with batches of images.

142
00:08:09,200 --> 00:08:13,130
And therefore, we have this extra dimension corresponding to the batch.

143
00:08:13,160 --> 00:08:16,250
Now we have batch number one containing 32 images.

144
00:08:16,550 --> 00:08:21,100
Then batch number two, containing other 32 images, batch number three, et cetera.

145
00:08:21,500 --> 00:08:23,630
So we had this extra dimension of the batch.

146
00:08:23,960 --> 00:08:30,260
And even if now we're about to deploy our model on a single imit, well, that single image still has

147
00:08:30,260 --> 00:08:34,220
to be into a batch, even if we're gonna have one image in the bet.

148
00:08:34,400 --> 00:08:39,440
It needs to be into this batch so that the C and moral and more specifically the predict method of the

149
00:08:39,440 --> 00:08:43,610
CNN model can recognize the bat as that extra dimension.

150
00:08:44,090 --> 00:08:45,500
And so, you guessed it.

151
00:08:45,740 --> 00:08:52,370
What we're about to do now is just to add an extra dimension which will correspond to the batch and

152
00:08:52,550 --> 00:08:55,380
which will contain that image into a batch.

153
00:08:55,730 --> 00:09:01,080
And the way to do this is, once again, by you know, I just computed before so I can just based it

154
00:09:01,370 --> 00:09:04,880
once again, update our test image by adding to it.

155
00:09:05,060 --> 00:09:08,180
This extra dimension corresponding to the bat.

156
00:09:08,570 --> 00:09:10,840
And a way to do this is with non-pay.

157
00:09:11,270 --> 00:09:16,770
You know, that's how we can always easily manipulate and then by array now that, you know, test images.

158
00:09:16,800 --> 00:09:17,190
Indeed.

159
00:09:17,330 --> 00:09:18,170
And then by Ray.

160
00:09:18,530 --> 00:09:24,500
And so I'm gonna call nonpaid first, which has a Shoket M.P. from which I'm gonna call this function,

161
00:09:24,500 --> 00:09:29,360
which allows exactly you to add a fake dimension or, you know, a dimension corresponding to the back

162
00:09:29,630 --> 00:09:34,520
end, which is called the X-band underscore dims function.

163
00:09:35,000 --> 00:09:38,510
And now you guessed once again what we have to input inside this function.

164
00:09:38,630 --> 00:09:44,000
Well, we have to input the image to which we want to add this extra dimension corresponding to the

165
00:09:44,000 --> 00:09:44,390
batch.

166
00:09:44,630 --> 00:09:47,930
So first, I have to paste once again our test image.

167
00:09:48,560 --> 00:09:56,210
But we have to add one extra argument here, which is where we want to add that extra dimension and

168
00:09:56,270 --> 00:09:59,450
that dimension of the batch is actually always the first.

169
00:09:59,660 --> 00:10:05,080
I mention, you know, that makes sense, you give first the batch of images and then inside each batch

170
00:10:05,110 --> 00:10:06,790
you get the different images.

171
00:10:06,910 --> 00:10:11,330
So it seems natural to have the batch as the first dimension and to specify this.

172
00:10:11,350 --> 00:10:16,870
That's exactly what we need to enter here as this extra argument and that parameter to specify this

173
00:10:16,990 --> 00:10:20,680
is access, which we have to set equal to zero.

174
00:10:21,020 --> 00:10:26,800
OK, so that the dimension of the batch, which we're adding to our image will be the first dimension.

175
00:10:27,430 --> 00:10:28,060
OK.

176
00:10:28,300 --> 00:10:35,020
And now we're getting very close to the final result because now is the time we can call the predict

177
00:10:35,020 --> 00:10:41,890
method, because indeed that test image, which is not only in the right number by array, but also

178
00:10:41,890 --> 00:10:49,240
which has that extra dimension gurus point to the batch has exactly the right format expected by the

179
00:10:49,240 --> 00:10:50,110
predict method.

180
00:10:50,440 --> 00:10:56,410
And therefore, here we can create a new variable, which we're gonna call result, because it will

181
00:10:56,410 --> 00:11:00,790
actually be the prediction of our CNN called with our test image.

182
00:11:01,030 --> 00:11:04,960
But I'm not calling it prediction yet because it will only return zero or one.

183
00:11:05,200 --> 00:11:09,100
And then we'll have to do some encoding work to say what is zero and what is one.

184
00:11:09,100 --> 00:11:10,880
You know, zero will actually be kept.

185
00:11:10,990 --> 00:11:12,340
And one will actually be Doug.

186
00:11:12,400 --> 00:11:13,870
I'll explain why later.

187
00:11:14,080 --> 00:11:14,890
But there we go.

188
00:11:15,100 --> 00:11:20,500
We're just gonna call this first result variable, which will be, of course, the output of the British

189
00:11:20,530 --> 00:11:20,890
method.

190
00:11:20,890 --> 00:11:22,060
Call from our CNN.

191
00:11:22,390 --> 00:11:23,000
And so there we go.

192
00:11:23,020 --> 00:11:30,100
We need to take our CNN first, from which we're going to call, of course, to predict method, which

193
00:11:30,100 --> 00:11:31,540
will take as input, of course.

194
00:11:31,690 --> 00:11:38,290
Well, our test image, which now has the right format expected by that predict method.

195
00:11:38,410 --> 00:11:39,220
So nothing else.

196
00:11:39,490 --> 00:11:43,120
We simply need to input test image here and then.

197
00:11:43,430 --> 00:11:46,240
Now is the time to do that encoding work.

198
00:11:46,570 --> 00:11:52,870
So the way to figure out what is zero and what is one, you know, if zero is get a dog and one is Caradog.

199
00:11:53,230 --> 00:11:56,270
Well, the trick is to call the class in.

200
00:11:56,270 --> 00:11:59,930
This is attribute from our training set object.

201
00:12:00,430 --> 00:12:03,010
But since now, we can't run this code.

202
00:12:03,280 --> 00:12:08,320
I'm just going to write the code that allows us to know which in this is correspond to which classes.

203
00:12:08,560 --> 00:12:10,540
And then you can see that on Juber, a notebook.

204
00:12:10,810 --> 00:12:17,500
But I will just tell you that by using this, we actually know that one corresponds to Doug and zero

205
00:12:17,530 --> 00:12:19,000
corresponds to cut.

206
00:12:19,390 --> 00:12:24,280
So to get that information, we need to call our training set or actually the test set as you want.

207
00:12:24,640 --> 00:12:31,810
And then from which we call this attribute called class underscore in this is just like that.

208
00:12:32,440 --> 00:12:35,600
And by printing this, you will get the right class indices.

209
00:12:35,950 --> 00:12:40,720
And with this wind, you'd get that Durka response to one and get your response to zero.

210
00:12:41,050 --> 00:12:46,000
And therefore, our final step here, you know, to have a nice result displayed in the output in the

211
00:12:46,000 --> 00:12:49,420
end when we make that single prediction on these two single images.

212
00:12:49,750 --> 00:12:55,450
Well, we're gonna finish this with, you know, and if condition where we're gonna specify that if

213
00:12:55,810 --> 00:12:56,710
the result.

214
00:12:57,100 --> 00:12:57,370
All right.

215
00:12:57,400 --> 00:13:03,250
Now, remember, that result contains also actually the result into a batch because it was called on

216
00:13:03,250 --> 00:13:05,680
a test image that was into a batch.

217
00:13:05,950 --> 00:13:06,670
So results.

218
00:13:06,760 --> 00:13:12,340
Also has this batch dimension and therefore, we're gonna first get access to the batch.

219
00:13:12,370 --> 00:13:13,450
And there are only one.

220
00:13:13,690 --> 00:13:18,040
And it has, of course, index zero because index isn't Biton start from zero.

221
00:13:18,310 --> 00:13:19,750
So here we get access to the batch.

222
00:13:19,810 --> 00:13:26,530
And then inside the batch, we're gonna get access to, well, the first and only element of the bat,

223
00:13:26,890 --> 00:13:30,730
which corresponds to the prediction of that same cat or dog.

224
00:13:30,850 --> 00:13:31,930
One image.

225
00:13:32,070 --> 00:13:32,360
Right.

226
00:13:32,410 --> 00:13:35,590
We're dealing with a single image and therefore a single prediction.

227
00:13:35,920 --> 00:13:40,360
And to get that single prediction where we need to get inside this batch of index zero.

228
00:13:40,630 --> 00:13:46,150
Well, the first and only elements know the first and only prediction, which has once again, index

229
00:13:46,340 --> 00:13:46,780
zero.

230
00:13:47,170 --> 00:13:47,430
All right.

231
00:13:47,470 --> 00:13:53,680
That's how we get exactly the prediction we want by first accessing the batch and then accessing the

232
00:13:53,680 --> 00:13:55,270
single element of the batch.

233
00:13:55,660 --> 00:13:57,130
And that's exactly our prediction.

234
00:13:57,550 --> 00:14:00,430
And so if that prediction is equal.

235
00:14:00,540 --> 00:14:02,950
Notice w go here to one.

236
00:14:03,280 --> 00:14:08,860
Then since we know that one corresponds to Doug, then we'll create a new variable, which we're gonna

237
00:14:08,860 --> 00:14:14,800
call prediction and we'll set that prediction variable equal to Doug.

238
00:14:15,160 --> 00:14:19,540
And then I'm gonna copy this because then in an els condition.

239
00:14:19,820 --> 00:14:25,270
No meaning if the result you the prediction is equal to zero then.

240
00:14:25,480 --> 00:14:29,280
Well, prediction will be equal to cut.

241
00:14:29,770 --> 00:14:38,110
And then we simply finish this with a less code cell containing a simple print of the prediction.

242
00:14:38,420 --> 00:14:39,520
And that's it, my friends.

243
00:14:39,820 --> 00:14:45,040
This is how you make a single prediction with a convolutional neural network.

244
00:14:45,550 --> 00:14:47,800
So now now it is the show time.

245
00:14:47,950 --> 00:14:53,100
It is time for the exciting step, because we're all gonna sit comfortably in our chair and we're gonna

246
00:14:53,110 --> 00:14:55,660
shoot this code on Jubera notebook.
