WEBVTT
1

00:00:00.620  -->  00:00:01.860
OK we'll come back.

2

00:00:02.280  -->  00:00:07.100
So I want to briefly give you a little bit of an overview of what we're going to be doing with get and

3

00:00:07.100  -->  00:00:07.750
get help.

4

00:00:07.920  -->  00:00:10.110
I mentioned this a little bit in the last video.

5

00:00:10.110  -->  00:00:15.250
Basically our progression here is that we've already talked about conceptually what get and get have

6

00:00:15.250  -->  00:00:20.800
are we we we talked a little bit about why you would use it how it's useful what we'll do next is see

7

00:00:20.850  -->  00:00:22.710
the very very basics.

8

00:00:22.740  -->  00:00:28.020
So for the first two videos I guess the second and third video if you include the first intro we won't

9

00:00:28.020  -->  00:00:29.730
be dealing with get help at all.

10

00:00:29.730  -->  00:00:31.710
So we're not sharing code with anyone.

11

00:00:31.740  -->  00:00:33.340
We're not getting anyone else's code.

12

00:00:33.570  -->  00:00:39.900
We're just using it locally as a way to you know save our changes and revert back to old versions of

13

00:00:39.900  -->  00:00:40.830
code.

14

00:00:40.830  -->  00:00:44.540
So these two videos will cover some really important commands.

15

00:00:45.150  -->  00:00:50.580
And then we're going to talk about get home and we're going to talk about taking code down from get

16

00:00:50.580  -->  00:00:50.980
home.

17

00:00:51.180  -->  00:00:57.630
So I'll give you some code an app that you can then clone onto your machine and run on your machine

18

00:00:57.630  -->  00:00:58.010
.

19

00:00:58.170  -->  00:01:03.240
And then also you'll be able to push that code or push your own code up to get her to share with other

20

00:01:03.240  -->  00:01:05.640
people so that they can clone it down.

21

00:01:05.640  -->  00:01:07.270
So that will be what we finish up with.

22

00:01:07.380  -->  00:01:10.320
And there also be an exercise in there as well.

23

00:01:10.320  -->  00:01:11.630
For now we're starting right here.

24

00:01:11.730  -->  00:01:17.370
So three main commands going to talk about as I mentioned in the last video if you're using Cloud 9

25

00:01:17.370  -->  00:01:23.050
which everyone should be if you're not you're a little bit on your own as far as installing good.

26

00:01:23.190  -->  00:01:28.860
It's not terribly complicated but sometimes you run into problems if you're missing certain dependencies

27

00:01:28.860  -->  00:01:28.970
.

28

00:01:28.980  -->  00:01:35.520
If you've already installed it before it's a little bit it's not fun sometimes.

29

00:01:35.520  -->  00:01:40.410
So luckily using Cloud 9 we already have get installed as we saw here.

30

00:01:40.530  -->  00:01:45.960
Don't worry about the version as long as you see something here that isn't get not found or command

31

00:01:45.960  -->  00:01:47.250
not found.

32

00:01:47.250  -->  00:01:50.660
So the first thing we have to talk about is get in it.

33

00:01:50.850  -->  00:01:57.180
So right now I'm instead of a directory called Get that I created and I'm going to make another directory

34

00:01:57.180  -->  00:01:59.390
and just call it an intro.

35

00:01:59.740  -->  00:02:03.910
Let's call it get intro CD into that.

36

00:02:04.410  -->  00:02:08.280
And inside of this I'm going to create a really simple application.

37

00:02:08.280  -->  00:02:12.770
It's I wouldn't even call an application but I'm going to add some files and let's pretend that it's

38

00:02:12.780  -->  00:02:19.290
a gigantic application that I know I want to track I want to use it to track my changes and revert back

39

00:02:19.290  -->  00:02:20.610
if I make a mistake.

40

00:02:20.610  -->  00:02:26.520
I want to be able to step by step see the code that I wrote every day or every time a committed changes

41

00:02:27.090  -->  00:02:27.810
to do that.

42

00:02:27.900  -->  00:02:33.100
I first have to tell get that this good intro even exists and I want it to care about it.

43

00:02:33.240  -->  00:02:36.980
So it isn't just always watching every file on our computer.

44

00:02:37.110  -->  00:02:38.970
That would be pretty crazy.

45

00:02:38.970  -->  00:02:43.740
Instead we have to manually tell it initialized get in this directory.

46

00:02:43.980  -->  00:02:50.220
Basically get ready get I'm going to use you in this folder and it only works in that folder and any

47

00:02:50.220  -->  00:02:52.310
folders that are inside of that folder.

48

00:02:52.440  -->  00:02:56.260
So it won't work if I initialize get.

49

00:02:56.350  -->  00:02:58.680
Let me make sure this refreshes here.

50

00:02:58.680  -->  00:02:59.100
There we go.

51

00:02:59.100  -->  00:03:05.370
If I initialize it instead of get intro right here and I'm tracking all the code instead of get intro

52

00:03:05.580  -->  00:03:10.320
that works fine but it won't track any changes they make over here or over here.

53

00:03:10.470  -->  00:03:15.840
If I wanted to watch all of this together in one repository if I want to get to know about everything

54

00:03:15.840  -->  00:03:20.590
here then I would initialize get in this webdav boot camp folder.

55

00:03:20.700  -->  00:03:22.160
Usually you don't want to do that though.

56

00:03:22.260  -->  00:03:25.630
Usually you have one repository for one project.

57

00:03:26.160  -->  00:03:31.760
So one Ribault that's where a lot of people say repo rather than repository per project.

58

00:03:31.920  -->  00:03:38.450
So this is our demo project it's called Get intro and the first thing I'll do is just make a file.

59

00:03:38.670  -->  00:03:41.390
So I'll just call this app.

60

00:03:41.480  -->  00:03:46.650
J.S. Yes let's open that file up so nothing involving get yet.

61

00:03:47.040  -->  00:03:48.700
And let's add something in here.

62

00:03:48.870  -->  00:03:51.900
So just a single line count about log.

63

00:03:51.990  -->  00:03:58.950
This is my complex app just so we have something to work with.

64

00:03:58.950  -->  00:04:01.520
So pretend again this is a big app.

65

00:04:01.800  -->  00:04:02.740
OK.

66

00:04:03.240  -->  00:04:06.720
So the first command again is get in it and that's all we have to run.

67

00:04:07.110  -->  00:04:14.910
So we just want to make sure we're in the right directory get intro and then rerun get in it forget

68

00:04:14.910  -->  00:04:21.870
initialize and then you can see I get a little printout says initialized empty get repository in and

69

00:04:21.870  -->  00:04:24.690
then the name of the directory that I'm in get intro.

70

00:04:24.990  -->  00:04:28.490
Also notice that it added this dot get.

71

00:04:28.560  -->  00:04:35.910
We haven't really talked about this much but things begin with a dot dot get the I type ls.

72

00:04:36.090  -->  00:04:38.680
It looks like there's only x J s here.

73

00:04:39.060  -->  00:04:42.760
But if I talk type LS dash a.

74

00:04:43.260  -->  00:04:46.150
You can see there's actually a folder called does it.

75

00:04:46.350  -->  00:04:48.050
And those are hidden folders.

76

00:04:48.120  -->  00:04:50.420
In this case just one get.

77

00:04:50.580  -->  00:04:56.730
So when we run get in it what it actually does is it makes a directory it's hidden called Don't get

78

00:04:57.030  -->  00:05:01.320
wherever I run that get in that command and it's going to track all of our changes.

79

00:05:01.320  -->  00:05:05.100
That's basically the magic that's where all of it exists.

80

00:05:05.280  -->  00:05:11.490
So if if I'm working on a huge project with 20 different files and I have you know committed my code

81

00:05:11.550  -->  00:05:18.650
a bunch of times I've been working on it for years maybe and I delete that don't get folder I potentially

82

00:05:18.650  -->  00:05:23.650
have lost everything if I didn't have it backed up if I wasn't using get have I would lose all of the

83

00:05:23.660  -->  00:05:25.560
changes all my history.

84

00:05:25.790  -->  00:05:27.970
So it's important that you don't screw with that.

85

00:05:28.220  -->  00:05:32.680
But usually you won't even see it unless you're looking for it in the event that you do want to get

86

00:05:32.690  -->  00:05:33.330
rid of it.

87

00:05:33.530  -->  00:05:39.080
If you messed up and you accidentally initialized get repository on your whole computer you did it on

88

00:05:39.080  -->  00:05:44.660
the home directory or you did it you know up here on webdav boot camp or whatever your equivalent name

89

00:05:44.660  -->  00:05:48.760
is and you don't want to track every single file on your computer at once.

90

00:05:48.800  -->  00:05:54.940
Then you want to remove this and you would remove it just like any other directory Ahram dash Aref.

91

00:05:55.160  -->  00:05:55.450
OK.

92

00:05:55.490  -->  00:05:56.800
So that was a side note.

93

00:05:57.080  -->  00:06:04.760
The next command I'm going to show you actually have an added here going to add it now get status.

94

00:06:04.790  -->  00:06:06.360
So this is an important one.

95

00:06:06.380  -->  00:06:09.970
It's not really an action doesn't tell get to do anything.

96

00:06:09.980  -->  00:06:17.230
It basically asks for a status and it's a really common thing to type before you do anything else.

97

00:06:17.270  -->  00:06:19.080
So you usually check in with get.

98

00:06:19.100  -->  00:06:20.240
You say what's your status.

99

00:06:20.300  -->  00:06:23.770
And then it will tell you something and then you do something based off of that.

100

00:06:23.990  -->  00:06:30.290
So right now if I type get status all that it tells me there's going to be a lot of language here that

101

00:06:30.360  -->  00:06:32.330
it's pretty confusing at first.

102

00:06:32.780  -->  00:06:38.710
Says on Branch master you don't need to worry about what that is all that you should know here.

103

00:06:38.810  -->  00:06:45.570
See in parentheses I see M. That tells me that I'm on the master branch what are branches and I can

104

00:06:45.570  -->  00:06:49.090
talk about just yet initial commit.

105

00:06:49.490  -->  00:06:51.310
That means that I haven't really made a new commit.

106

00:06:51.320  -->  00:06:52.790
I haven't done anything yet.

107

00:06:53.240  -->  00:07:01.110
And untracked files app J.S. nothing added to commit but untracked files present.

108

00:07:01.700  -->  00:07:05.620
So the first thing that I want to do is show you what happens when I add a new file.

109

00:07:05.810  -->  00:07:10.290
So let's add a file called Cats genius.

110

00:07:11.180  -->  00:07:20.050
And if I type get status now it now tells me there's 2 untracked files actually and cats genius.

111

00:07:20.180  -->  00:07:24.440
And the reason that it says they're untracked this is this is actually really important to the way that

112

00:07:24.530  -->  00:07:25.560
it works.

113

00:07:25.750  -->  00:07:29.660
Is that just by initializing a repository in a folder.

114

00:07:29.720  -->  00:07:34.660
It doesn't automatically know about or doesn't automatically track every file and every change they

115

00:07:34.670  -->  00:07:35.570
make.

116

00:07:35.750  -->  00:07:38.440
The way that it works it's kind of a two step workflow.

117

00:07:38.720  -->  00:07:44.580
So I can have a bunch of files but maybe I only want get to know about two or three of them.

118

00:07:44.600  -->  00:07:50.540
So a common example is if you're working on a project that has some sensitive application codes or some

119

00:07:50.540  -->  00:07:56.160
secret codes that you need that you don't want to share and get hurt but you don't want to publish what

120

00:07:56.180  -->  00:08:05.000
you can do is tell get to watch the other files but ignore your secrets file or ignore your environment

121

00:08:05.000  -->  00:08:06.880
file whatever it's called.

122

00:08:06.880  -->  00:08:10.440
There might be some sensitive data that you don't want get to know about.

123

00:08:10.460  -->  00:08:13.220
So by just initializing it get tells us.

124

00:08:13.220  -->  00:08:16.930
I know there are these files but I'm not tracking them.

125

00:08:17.450  -->  00:08:23.470
So if we want get to track these files what we need to do is use the next command which is get ADD.

126

00:08:23.720  -->  00:08:25.850
So I mentioned it's a two step workflow.

127

00:08:25.850  -->  00:08:28.780
We add the files we target here the files.

128

00:08:28.790  -->  00:08:35.710
I want you to track and then we commit and commit is basically making a check point in time with the

129

00:08:35.720  -->  00:08:37.390
changes that you've added.

130

00:08:37.560  -->  00:08:39.870
It will make more sense once we get a little more practice.

131

00:08:39.910  -->  00:08:41.400
So let's start by using it.

132

00:08:41.400  -->  00:08:47.290
And so if I type get add I don't want to just hit enter yet.

133

00:08:47.450  -->  00:08:52.370
What I can do is either add one file at a time like this get add app.

134

00:08:52.400  -->  00:08:54.740
Yes.

135

00:08:54.740  -->  00:09:01.380
And now if I type good status you'll see something changes says untracked file.

136

00:09:01.490  -->  00:09:02.520
Still catch stuff.

137

00:09:02.540  -->  00:09:05.940
Yes but now it says change is to be committed.

138

00:09:06.080  -->  00:09:07.630
New File app.

139

00:09:07.660  -->  00:09:09.130
Yes.

140

00:09:09.130  -->  00:09:13.700
So what this means is that when I run get commit which I'll do in just a bit.

141

00:09:13.940  -->  00:09:16.180
This is what is going to be saved.

142

00:09:16.220  -->  00:09:18.660
The fact that we made a new file called apage.

143

00:09:18.710  -->  00:09:19.810
Yes.

144

00:09:20.450  -->  00:09:24.620
So let's try committing this when what that will look like is in the future.

145

00:09:24.670  -->  00:09:30.020
I could come back to this point in time where all I did was create app yes.

146

00:09:30.380  -->  00:09:34.310
I haven't added cad's so that change isn't going to be committed.

147

00:09:34.340  -->  00:09:41.010
So if I reverted back to this in the future when I had made a bunch of changes all I would see is actually

148

00:09:41.000  -->  00:09:47.210
yes with one line in it but catchiest wouldn't exist because it isn't tracking it it's not going to

149

00:09:47.210  -->  00:09:48.490
commit it right now.

150

00:09:49.070  -->  00:09:49.390
OK.

151

00:09:49.390  -->  00:09:55.000
So I'm going to type get commit dash em and dash em.

152

00:09:55.000  -->  00:09:57.420
I believe it's short for Dash message.

153

00:09:57.430  -->  00:10:02.450
It allows you to just type in a commit message right here and this is really important.

154

00:10:02.440  -->  00:10:07.870
Every commit needs to have a message that describes what what the committee is or what the thing is

155

00:10:07.880  -->  00:10:08.790
that you're saving.

156

00:10:08.920  -->  00:10:10.250
The checkpoint is.

157

00:10:10.250  -->  00:10:14.180
So if this was a novel you might have something like finished chapter 5.

158

00:10:14.500  -->  00:10:19.570
If this was an application you might have ADD user model or add authentication.

159

00:10:19.610  -->  00:10:29.970
In this case to add let's to add app file something like that and it's conventional to have your commit

160

00:10:29.970  -->  00:10:39.630
messages be in present tense so not added app file but add app file or change file remove x y whatever

161

00:10:39.630  -->  00:10:40.210
it is.

162

00:10:40.230  -->  00:10:43.510
OK so get commit dash em.

163

00:10:43.650  -->  00:10:46.890
You don't have to do it with Dash em if you just hit get commit.

164

00:10:46.890  -->  00:10:52.000
It will open up a text editor and then you can type something into the editor and hit enter or save

165

00:10:52.010  -->  00:10:52.270
.

166

00:10:52.440  -->  00:10:55.710
But let's just do it like this.

167

00:10:55.710  -->  00:11:04.010
Notice it says here after we committed one file changed and now our type get status.

168

00:11:04.020  -->  00:11:10.020
You'll see that the changes to be committed here new files object at dodgiest has gone away because

169

00:11:10.020  -->  00:11:14.440
we committed it and it doesn't have anything else to keep track of.

170

00:11:14.490  -->  00:11:16.470
There's no changes that we've made.

171

00:11:16.470  -->  00:11:20.610
The only thing that it's complaining about is not really complaining but it's saying that there is a

172

00:11:20.610  -->  00:11:24.500
file cache S that is not being tracked.

173

00:11:24.570  -->  00:11:28.550
So let's now add that get add cats.

174

00:11:28.590  -->  00:11:30.650
Yes.

175

00:11:30.750  -->  00:11:33.390
Let's commit again or let's do get status.

176

00:11:33.450  -->  00:11:35.580
You can see changes to be committed.

177

00:11:35.610  -->  00:11:38.420
The fact that we made a new file Catts genius.

178

00:11:38.620  -->  00:11:49.200
So will do get commit to Ascham add Catts file and accidently hit enter.

179

00:11:49.500  -->  00:11:51.570
Make sure I have that quote there.

180

00:11:51.570  -->  00:11:56.270
Now if we take a look at gets datus we get a new message.

181

00:11:56.430  -->  00:11:58.340
It says nothing to commit.

182

00:11:58.350  -->  00:11:59.880
Working directory clean.

183

00:11:59.970  -->  00:12:05.450
What that means and it says working directory clean basically means the repository it get knows about

184

00:12:05.460  -->  00:12:07.490
everything that we want to know about.

185

00:12:07.510  -->  00:12:10.680
There is no changes to be made there's nothing to be committed.

186

00:12:10.710  -->  00:12:12.660
There aren't any untracked files.

187

00:12:12.740  -->  00:12:16.350
It is one with our code at this point.

188

00:12:16.740  -->  00:12:23.060
All right so now let's say that I have my application I'm going to open up the cats file as well.

189

00:12:23.400  -->  00:12:28.220
And let's suppose that this is a obviously a larger application and I make some changes.

190

00:12:28.260  -->  00:12:30.220
So in here.

191

00:12:31.210  -->  00:12:35.990
Cancel that log now save.

192

00:12:36.660  -->  00:12:41.710
Now if I type good status I changed the cat's G-S file.

193

00:12:42.420  -->  00:12:49.310
You'll see that it tells me changes not staged for commit modified catch SJS.

194

00:12:49.470  -->  00:12:57.240
So gets telling me the catchiest file was modified before it was saying that cats genius was created

195

00:12:57.250  -->  00:13:02.670
it was a new file and if we removed cats us get would tell us.

196

00:13:02.670  -->  00:13:11.370
Here's a change that I know about cats J us was removed so modified catchiest lets add in a commit again

197

00:13:11.380  -->  00:13:11.690
.

198

00:13:12.020  -->  00:13:17.600
And if I try and commit right now I can write any message in here.

199

00:13:17.760  -->  00:13:24.750
It won't actually do what we want because notice that it's saying changes not Stage 4 commit and no

200

00:13:24.750  -->  00:13:27.140
change is added to commit.

201

00:13:27.180  -->  00:13:30.530
So if I commit right now I haven't actually told to.

202

00:13:30.630  -->  00:13:32.740
I want to commit any changes.

203

00:13:32.880  -->  00:13:37.020
Remember that it's a two step process so we don't just add a file one time.

204

00:13:37.020  -->  00:13:43.890
What we do is actually every time we commit we tell get which files to add to that commit.

205

00:13:43.950  -->  00:13:49.670
So that means that rather than having one blanket commit That's more like a traditional save.

206

00:13:49.710  -->  00:13:51.960
If I just hit Save it would save everything.

207

00:13:52.440  -->  00:13:53.950
Rather I can tell it.

208

00:13:54.150  -->  00:13:56.530
OK this is an express app with 20 files.

209

00:13:56.610  -->  00:14:03.780
Let's take the two model files and add them and commit that and we'll say we added in 2 new model files

210

00:14:03.780  -->  00:14:04.070
.

211

00:14:04.110  -->  00:14:11.190
Then let's take our 2 route files and add those together and commit them together and we could say we

212

00:14:11.610  -->  00:14:14.340
refactor middleware wherever we did.

213

00:14:14.340  -->  00:14:20.640
We can group files together and add them in pieces and commit them together but not have to commit everything

214

00:14:20.700  -->  00:14:21.750
all at once.

215

00:14:21.750  -->  00:14:32.000
So in this case I'm going to do is add that file again get add cats that genius that are going to do

216

00:14:32.010  -->  00:14:42.500
get commit and this time all that I did was add meow to cats.

217

00:14:42.630  -->  00:14:46.570
Now I type get status nothing to commit.

218

00:14:46.620  -->  00:14:48.200
Working directory clean.

219

00:14:48.770  -->  00:14:49.280
OK.

220

00:14:49.620  -->  00:14:53.290
So let's do one more thing let's add one file and so will do.

221

00:14:53.290  -->  00:14:54.780
Touch Dogstar.

222

00:14:54.810  -->  00:14:58.860
Yes and if I type get status again.

223

00:14:59.910  -->  00:15:10.270
When C is telling me that it's not even tracking dogs J s so I can add that it had dogs japes.

224

00:15:10.440  -->  00:15:11.900
I'm not going to commit yet.

225

00:15:12.120  -->  00:15:17.010
But now if you take a look is telling us all right when you do commit I'm going to commit.

226

00:15:17.010  -->  00:15:20.530
The fact that you made a new file called Dogs J Yes.

227

00:15:20.550  -->  00:15:26.220
Now let's go and change our apt J s a little bit and add a other council dot log

228

00:15:29.160  -->  00:15:32.790
just like that save.

229

00:15:32.910  -->  00:15:36.980
I do have to save in order for any of this to work and I get status.

230

00:15:37.110  -->  00:15:40.770
Now it tells me changes not state for commit.

231

00:15:40.800  -->  00:15:41.900
The fact that you modified.

232

00:15:41.910  -->  00:15:47.430
Actually yes let's also modify Katz J us counsil Dalt log.

233

00:15:47.800  -->  00:15:50.070
That's do per

234

00:15:53.400  -->  00:15:54.420
save.

235

00:15:54.420  -->  00:15:56.400
Type get status again.

236

00:15:57.400  -->  00:16:01.910
And now you can see tells me that I modified the address and then modified cats.

237

00:16:01.990  -->  00:16:06.870
Yes but I'm not staging them for committing they're not ready to be committed.

238

00:16:06.870  -->  00:16:11.410
The only thing that will be committed is the fact that I made a new file called called Dogstar.

239

00:16:11.460  -->  00:16:18.990
Yes so what I'm going to do is commit once now and then this commit I'm going to say add Doug's file

240

00:16:21.330  -->  00:16:29.160
type get status tells me no changes added to commit to changes are not stage for commit so let's add

241

00:16:29.160  -->  00:16:37.250
them together and what I could do is say Get add objects and then catch separately.

242

00:16:37.440  -->  00:16:38.570
Or I can do this.

243

00:16:38.570  -->  00:16:42.720
Get add dot and that will add all the changes.

244

00:16:42.730  -->  00:16:43.820
Not stage for commit.

245

00:16:43.830  -->  00:16:46.620
So in this case both files.

246

00:16:46.620  -->  00:16:54.960
Now if I get status again now it tells me change is to be committed after this and cast J.S. so I'll

247

00:16:54.960  -->  00:16:56.910
commit them together.

248

00:16:57.320  -->  00:17:03.150
And usually you would put some code here that talks about the feature that you did or what you added

249

00:17:03.210  -->  00:17:04.950
or updated or whatever you did.

250

00:17:04.950  -->  00:17:11.760
In this case it's kind of trivial but let's just say update files which is really not a great commit

251

00:17:11.760  -->  00:17:15.030
message if you're actually working on a substantial project.

252

00:17:15.530  -->  00:17:21.820
OK and then let's take that as one more time and it tells me nothing to commit.

253

00:17:21.870  -->  00:17:23.600
Working directory clean.

254

00:17:24.040  -->  00:17:30.060
OK so so far all that I've showed you how to do is basically adding checkpoints in time that we can

255

00:17:30.060  -->  00:17:32.760
go back to but I haven't shown you how to go back to that.

256

00:17:32.880  -->  00:17:34.230
And that's coming up next.

257

00:17:34.470  -->  00:17:36.470
But let's do a quick recap.

258

00:17:36.720  -->  00:17:42.470
So the very first thing we have to do if we want to get to we have to run get a net that will initialize

259

00:17:42.480  -->  00:17:45.780
get a new repository in a given directory.

260

00:17:46.020  -->  00:17:47.730
And you do want to be careful about that.

261

00:17:47.820  -->  00:17:49.980
You don't want to be making a repository.

262

00:17:49.980  -->  00:17:54.980
Usually don't want you making a repository in the very top level directory of your computer.

263

00:17:54.990  -->  00:17:57.650
Usually it's one project per repo.

264

00:17:57.900  -->  00:18:03.300
Technically you can use it however you want but that would be pretty crazy if you if you are watching

265

00:18:03.300  -->  00:18:09.810
your entire machine with one repository and then the next command resaw was get status and that doesn't

266

00:18:09.810  -->  00:18:10.900
really do anything.

267

00:18:10.950  -->  00:18:14.100
Doesn't tell get to do anything it just asks for an update.

268

00:18:14.100  -->  00:18:17.490
Basically we're asking get what's the current status.

269

00:18:17.490  -->  00:18:18.610
Has anything been added.

270

00:18:18.610  -->  00:18:20.430
It's ready to be committed.

271

00:18:20.430  -->  00:18:23.410
Are there any changes that sort of thing.

272

00:18:23.610  -->  00:18:25.290
And then these two are really important.

273

00:18:25.290  -->  00:18:26.930
These are the bread and butter of get.

274

00:18:27.060  -->  00:18:28.390
You'll type them all the time.

275

00:18:28.560  -->  00:18:30.000
So we add the changes.

276

00:18:30.000  -->  00:18:36.210
We basically select what we want to add to this check point in time and then we commit the changes to

277

00:18:36.300  -->  00:18:43.080
add that checkpoint and we give it a message so that in the next video when I show you how to view the

278

00:18:43.090  -->  00:18:49.050
commits we'll actually see those messages and future you will be very thankful that you hopefully wrote

279

00:18:49.050  -->  00:18:54.780
nice messages that are descriptive so that you know what each checkpoint what each commit does.

280

00:18:55.000  -->  00:18:58.790
OK so in the next video we're going to talk about get log in get check out
