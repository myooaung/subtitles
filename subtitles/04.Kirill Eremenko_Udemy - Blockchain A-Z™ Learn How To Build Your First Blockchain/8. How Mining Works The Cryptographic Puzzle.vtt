WEBVTT
1
00:00:05.070 --> 00:00:07.870
All right part two how mining works.

2
00:00:07.890 --> 00:00:08.740
Let's have a look.

3
00:00:08.970 --> 00:00:16.710
So we left off last summer here where we have this block and we now know that we can control or we can

4
00:00:16.710 --> 00:00:23.250
vary the hash of the block by varying the non-SS the number the actual field that we identified.

5
00:00:23.760 --> 00:00:26.600
OK so how does this tie in with money.

6
00:00:26.760 --> 00:00:28.060
Well let's have a look.

7
00:00:28.060 --> 00:00:31.650
The first thing that we're going to need to do is to make a statement.

8
00:00:31.680 --> 00:00:34.570
The statement is that a hash is a number.

9
00:00:34.770 --> 00:00:39.810
And if you already know this then this will just take like a minute if you don't and this will be very

10
00:00:39.810 --> 00:00:41.450
useful for us going forward.

11
00:00:41.460 --> 00:00:43.560
So here is an example of a hash.

12
00:00:43.560 --> 00:00:49.010
This is a proper shower 256 hash it takes up sixty four bits 64 digits.

13
00:00:49.050 --> 00:00:51.820
Sixty four is here sort of.

14
00:00:52.380 --> 00:00:57.390
And the statement is that this is actually a number it's not just a word it's just a combination of

15
00:00:57.390 --> 00:00:58.650
characters and just the label.

16
00:00:58.680 --> 00:01:00.040
It's an actual numbers.

17
00:01:00.060 --> 00:01:03.490
You can increment it you can do both medical operations with it.

18
00:01:03.540 --> 00:01:04.280
And why is that.

19
00:01:04.470 --> 00:01:09.190
Well a hash is actually a hexadecimal number.

20
00:01:09.190 --> 00:01:12.800
So here you can see digits from 0 to 9.

21
00:01:12.870 --> 00:01:16.970
And also you can see some letters but the letters are limited to f as a b c d e f.

22
00:01:17.190 --> 00:01:21.430
And what a hexadecimal number is is it's like a decimal number.

23
00:01:21.450 --> 00:01:27.890
But instead of just having digits from 0 to 9 it also has those six extra ones so a stands for 10 B

24
00:01:27.890 --> 00:01:28.890
stands for 11.

25
00:01:28.980 --> 00:01:34.510
C stands for 12 D stands for 13 E stands for 14 F stands for 15.

26
00:01:34.770 --> 00:01:36.520
And so that's all there is to it.

27
00:01:36.540 --> 00:01:42.360
And we can actually convert this hexadecimal number into a normal decimal number and it will look like

28
00:01:42.360 --> 00:01:43.470
this.

29
00:01:43.470 --> 00:01:51.480
So there's our decimal representation of our hexadecimal number as you can see the number is visually

30
00:01:51.480 --> 00:01:58.410
longer and that's because in the decimal system we only have 9 digits whereas in the hexadecimal system

31
00:01:58.410 --> 00:02:01.210
we have in the decimal system we have 10 digits.

32
00:02:01.470 --> 00:02:08.940
Funny but in the hexadecimal system we have 16 digits so therefore every digit can encode at a higher

33
00:02:08.940 --> 00:02:10.150
value.

34
00:02:10.220 --> 00:02:15.630
If you if you will if you want to call it that every digit will encode at a higher value and the hexadecimal

35
00:02:15.630 --> 00:02:18.160
system and therefore visually the number is shorter.

36
00:02:18.180 --> 00:02:24.330
But in essence the overall value of the number is actually exactly the same as just represented in a

37
00:02:24.330 --> 00:02:25.310
different system.

38
00:02:25.440 --> 00:02:30.740
It's like we can take a decimal number and convert it to a binary into ones and zeros will be very long

39
00:02:30.750 --> 00:02:33.980
but it'll still be the same number just represent indifferences system.

40
00:02:33.990 --> 00:02:37.970
Same thing with hexadecimal we can take the same decimal number to merge hexadecimal.

41
00:02:38.010 --> 00:02:43.950
We can convert to a system we like we can call it into system of the base of 57 if we if we wish but

42
00:02:43.950 --> 00:02:48.600
just that those are the commonly used ones the decimal one which we use in the real world binary which

43
00:02:48.600 --> 00:02:51.270
computers use hexadecimal is also used for some things.

44
00:02:51.270 --> 00:02:54.450
One of them is hash numbers.

45
00:02:54.480 --> 00:02:55.720
Then here's another example.

46
00:02:55.740 --> 00:02:57.260
There's another hash number.

47
00:02:57.270 --> 00:03:00.090
Also of course hexadecimal.

48
00:03:00.090 --> 00:03:05.260
This is another shot 256 hash as you can see at the start there is leading zeros.

49
00:03:05.310 --> 00:03:06.750
You don't have to write them out.

50
00:03:06.770 --> 00:03:11.580
I included them here just to illustrate that the visual length of this number is the same as the previous

51
00:03:11.580 --> 00:03:12.170
one.

52
00:03:12.180 --> 00:03:16.860
It is also 64 characters or digits in length.

53
00:03:16.860 --> 00:03:20.990
And if you convert this to a decimal number there we go.

54
00:03:21.060 --> 00:03:22.800
There is a decimal version as well.

55
00:03:22.830 --> 00:03:26.380
Don't have to write out the leadings there is just a smaller number.

56
00:03:26.380 --> 00:03:28.880
And here's another hash is also.

57
00:03:28.880 --> 00:03:31.830
This one is even smaller because it has so many more leading zeros.

58
00:03:31.830 --> 00:03:33.750
And this is representation and desk.

59
00:03:34.170 --> 00:03:34.410
OK.

60
00:03:34.410 --> 00:03:38.680
So we've identified that hashes a number what does that give us now.

61
00:03:38.790 --> 00:03:39.970
Why is that valuable.

62
00:03:40.110 --> 00:03:43.530
Well now we can actually illustrate this.

63
00:03:43.530 --> 00:03:48.210
We can draw hashes because we know that there are numbers so we know they are consecutive or some are

64
00:03:48.210 --> 00:03:49.340
smaller Some are bigger.

65
00:03:49.500 --> 00:03:51.120
So let's draw a pool of hash.

66
00:03:51.120 --> 00:03:57.120
We call this pool the pool of all possible hashes at the bottom we have the smallest ones top we have

67
00:03:57.120 --> 00:03:57.940
the largest one.

68
00:03:58.050 --> 00:04:05.880
And basically what this says is this is all possible variations of this hash value so starting from

69
00:04:05.880 --> 00:04:10.100
the smallest that 0 0 0 0 and then going all the way up like that.

70
00:04:10.180 --> 00:04:12.100
Doesn't matter like how exactly is structured.

71
00:04:12.120 --> 00:04:14.340
But like I say it goes like a snake all the way up.

72
00:04:14.360 --> 00:04:19.890
It increases increase increase increase increases until it gets the very top where that what will the

73
00:04:19.890 --> 00:04:20.750
highest one be.

74
00:04:20.880 --> 00:04:25.510
While that's when all of these digits are f f f f f all the way.

75
00:04:25.680 --> 00:04:26.490
So that's the highest.

76
00:04:26.490 --> 00:04:30.900
And so we got to order them like that and it's going to be like a map for us.

77
00:04:30.960 --> 00:04:35.040
And so now we're going to see where these hashes fall on the map.

78
00:04:35.040 --> 00:04:36.780
So we know that.

79
00:04:36.930 --> 00:04:39.970
Well let's say this top one for somewhere over there.

80
00:04:40.020 --> 00:04:42.980
This one is smaller so it has to fall lower.

81
00:04:43.020 --> 00:04:44.870
This was was as far as low.

82
00:04:45.270 --> 00:04:46.380
And so there we go.

83
00:04:46.380 --> 00:04:49.680
Those are our hashes there illustrated on the map.

84
00:04:49.680 --> 00:04:52.900
We can get rid of the decimal representations now.

85
00:04:53.130 --> 00:04:56.090
And this leads us up this is a very nice set up.

86
00:04:56.100 --> 00:04:59.070
This is in combination of the previous tutorial.

87
00:04:59.070 --> 00:05:02.250
Very nice set up for what is mining all about.

88
00:05:02.280 --> 00:05:06.460
Like why is what's this whole fuss about.

89
00:05:06.480 --> 00:05:09.110
How does it work in the start of how does it work.

90
00:05:09.120 --> 00:05:10.520
Will get to the US after that.

91
00:05:10.530 --> 00:05:19.600
So how mining works is in essence the blog Shanes system or the Bush algorithm will set a target so

92
00:05:19.600 --> 00:05:26.230
there's a target set for minors to accomplish a certain hash.

93
00:05:26.230 --> 00:05:29.200
So let's say the targets are here target.

94
00:05:29.260 --> 00:05:29.900
There we go.

95
00:05:29.920 --> 00:05:30.860
That's our target.

96
00:05:31.030 --> 00:05:33.400
And the way it works is any hash.

97
00:05:33.400 --> 00:05:35.500
Higher than Target doesn't count.

98
00:05:35.500 --> 00:05:41.670
So if you find a hash for your block that is above the target that doesn't count.

99
00:05:41.680 --> 00:05:43.600
That's not good enough for the blocking.

100
00:05:43.720 --> 00:05:46.080
It has to in order to be include in the blog.

101
00:05:46.090 --> 00:05:48.360
It has to be locked be below the target.

102
00:05:48.460 --> 00:05:51.910
And the important thing to know is this is completely arbitrary.

103
00:05:51.940 --> 00:05:56.530
There is no there is no economical reason for it.

104
00:05:56.530 --> 00:06:04.030
There is no like logical or computational mathematical cryptographically reason for it.

105
00:06:04.060 --> 00:06:11.740
It's just a way to put hurdles in the way of my mind has to create a challenge for them to solve.

106
00:06:11.770 --> 00:06:14.180
That's the only reason they're there is this started.

107
00:06:14.350 --> 00:06:15.150
No other is.

108
00:06:15.340 --> 00:06:20.710
And so in this case if a minor found this hash it wouldn't count to me not good enough there would not

109
00:06:20.710 --> 00:06:24.610
be allowed to create a block with this hash number.

110
00:06:24.610 --> 00:06:26.430
This hash is also not good enough.

111
00:06:26.440 --> 00:06:27.330
It's above the target.

112
00:06:27.580 --> 00:06:30.970
But if you found this hash you'd be welcome to create the blog.

113
00:06:30.970 --> 00:06:36.580
You'll be allowed to create a blog and that's that's when you will be considered the miner who actually

114
00:06:36.580 --> 00:06:41.850
mined the block because you found a hash like that and will like will.

115
00:06:41.920 --> 00:06:46.420
This is like just in a high level we will go into detail like in a second in this but before we do I

116
00:06:46.420 --> 00:06:55.580
wanted to give you guys a small tip that a good way of thinking about the target is actually in terms

117
00:06:55.580 --> 00:06:56.700
of leading zeroes.

118
00:06:56.780 --> 00:07:02.690
So as you can see the lower you are the smaller the number and the more leading zeros will be.

119
00:07:02.690 --> 00:07:08.270
So if you think of the target rather than as it like I remember trying to remember what the target is

120
00:07:08.270 --> 00:07:09.580
in terms of hashing.

121
00:07:09.590 --> 00:07:12.860
Just remember the number of leading zeros for instance for eating zero.

122
00:07:12.860 --> 00:07:18.950
So let's talk about that and it actually in the practical tutorials and will be showing you how to code

123
00:07:18.980 --> 00:07:22.360
a block chain and you will be using these for leading zeros.

124
00:07:22.360 --> 00:07:25.920
You'll see that in the practical side of things.

125
00:07:25.940 --> 00:07:27.800
So that's how we're going to think about the target.

126
00:07:27.810 --> 00:07:31.620
And now let's let's discuss what we just talked about the whole mining because I know it's right now.

127
00:07:31.660 --> 00:07:38.540
It's very vague very unclear so let's make it clear make it super clear after the story you walk away

128
00:07:38.540 --> 00:07:41.280
and your higher percent sure what mining is all about.

129
00:07:41.630 --> 00:07:45.400
So let's go back to our what we discussed in the Prius.

130
00:07:45.410 --> 00:07:53.480
So here we've got the block and we know that what we have inside this block is the block a number of

131
00:07:53.480 --> 00:07:59.920
the non-SS the data the previous hash and most of the fields here are you cannot touch.

132
00:08:00.050 --> 00:08:05.780
You cannot tamper with them you cannot change the block number because the block number.

133
00:08:05.900 --> 00:08:08.620
So we're trying to add forget about this part.

134
00:08:08.660 --> 00:08:10.280
It's not it's is.

135
00:08:10.400 --> 00:08:12.830
We only have the chain on the left there's no more chain on the right.

136
00:08:12.830 --> 00:08:13.040
Right.

137
00:08:13.040 --> 00:08:14.050
So this doesn't exist.

138
00:08:14.180 --> 00:08:18.260
So we want to add and you block so we know that block number we're going to be adding block number three.

139
00:08:18.290 --> 00:08:18.560
OK.

140
00:08:18.560 --> 00:08:21.530
So you can change that the data in the block.

141
00:08:21.680 --> 00:08:25.300
So as we discussed we don't want to change the data we can't change it.

142
00:08:25.400 --> 00:08:30.980
In reality it is a bit more to it like in module 2 of this course will understand how we can change

143
00:08:30.980 --> 00:08:33.370
or vary the transactions that go into the block.

144
00:08:33.380 --> 00:08:39.890
But for now for us to understand how mining works is good enough to agree that we have this set of transactions

145
00:08:39.890 --> 00:08:46.560
that needs to go into the block and we cannot change it because if we agree that the list of transactions

146
00:08:46.570 --> 00:08:50.720
that then we cannot change any details of each section because we don't want to tamper with the data.

147
00:08:50.850 --> 00:08:56.160
And that's the whole concept whole point of block chains that it's an immutable ledger.

148
00:08:56.660 --> 00:09:00.570
Then we can also change the hash of the previous block.

149
00:09:00.660 --> 00:09:05.180
Chant cannot change this value because it has to be cryptographically linked to the hash of the previous

150
00:09:05.210 --> 00:09:05.690
block.

151
00:09:05.900 --> 00:09:11.690
So the only thing that we can actually change in this whole block is the nots and the non-SS let's us

152
00:09:11.750 --> 00:09:14.770
allows us to vary the hash of the card block.

153
00:09:15.020 --> 00:09:17.110
So let's see what that means for mining.

154
00:09:17.240 --> 00:09:25.190
So if we plot this hash onto our map of hashes you'll see that it might be somewhere over there.

155
00:09:25.300 --> 00:09:27.270
It's hypothesized that it's over there.

156
00:09:27.410 --> 00:09:35.060
And that's that's the hash and this label is just to remind us that this hash was generated from this

157
00:09:35.060 --> 00:09:38.020
block when the non-SS was 23.

158
00:09:38.300 --> 00:09:41.960
So next let's change and wants 22.

159
00:09:41.990 --> 00:09:47.600
Now you can see the hash is over here it's the smaller hash and that was generated by non-SS 22.

160
00:09:47.750 --> 00:09:55.010
And so we could just keep going doing that because we will not be allowed to add this block into the

161
00:09:55.010 --> 00:09:57.940
block chain until the hash is below the target.

162
00:09:58.100 --> 00:10:04.580
So all we can do is just keep guessing different nonces as you can see there we go.

163
00:10:04.880 --> 00:10:07.120
And that's essentially what miners do.

164
00:10:07.130 --> 00:10:15.170
Miners just sit there and they change this field they changed the non-SS in order to try guess a value

165
00:10:15.170 --> 00:10:18.790
of the non said will generate a hash below the target.

166
00:10:18.800 --> 00:10:20.890
That's as simple as that.

167
00:10:21.020 --> 00:10:28.610
And once they do generate such value So for instance they find unknowns at some point at random by accident

168
00:10:29.300 --> 00:10:31.610
through brute forcing they find the non-SS.

169
00:10:31.700 --> 00:10:35.060
For instance 5000 12 that generates a hash below the value.

170
00:10:35.150 --> 00:10:37.140
Then they win that's it.

171
00:10:37.190 --> 00:10:41.890
They get this nonces commonly called among miners.

172
00:10:41.900 --> 00:10:47.180
It's called the golden knots and because it generated that has military as you can see as those four

173
00:10:47.180 --> 00:10:49.240
leading zeros is below the target.

174
00:10:49.580 --> 00:10:54.200
And that said so then once that's done they're allowed to add the block to the block chain and they

175
00:10:54.200 --> 00:10:56.810
get the reward which again will discuss much a lot better.

176
00:10:56.810 --> 00:11:03.050
But the whole point is that that's at that point that's when the block is accepted by the block chain

177
00:11:03.110 --> 00:11:06.080
only when the hatch is below the target.

178
00:11:06.080 --> 00:11:12.410
The rest of the time all these the the whole thing that these miners are doing is they're just sitting

179
00:11:12.410 --> 00:11:20.240
there or while there are these and knows these rigs of nodes and they're just churning away they just

180
00:11:20.360 --> 00:11:26.930
iterating this non-SS changing a changing and changing it to hopefully guess the right hash and whoever

181
00:11:26.930 --> 00:11:30.390
gets it first adds a block and then the whole thing starts again for the next one.

182
00:11:30.410 --> 00:11:33.460
So there's a couple of three important things to point out here.

183
00:11:33.530 --> 00:11:36.820
So very discussed about the transaction there.

184
00:11:36.820 --> 00:11:39.100
We'll talk more about that and module 2.

185
00:11:39.140 --> 00:11:45.980
The important thing about hushes is the avalanche effect so remember we discussed the avalanche effect

186
00:11:45.980 --> 00:11:53.560
that by changing the nons a tiny little bit the hash changes complete and why that's important for mining

187
00:11:53.710 --> 00:11:58.030
is to keep people from cheating the system.

188
00:11:58.030 --> 00:12:01.510
So here you can see that the non-SS 4:23.

189
00:12:01.690 --> 00:12:03.970
So the hasher 23 Let's go back.

190
00:12:04.030 --> 00:12:10.450
So here you can see that the hash 4:23 was up here then the hash 4:22 is down here.

191
00:12:10.630 --> 00:12:18.610
And if for instance if changing the notions a little bit would change the hash a little bit that would

192
00:12:18.700 --> 00:12:21.430
allow miners to predict that.

193
00:12:21.430 --> 00:12:21.880
OK.

194
00:12:21.880 --> 00:12:28.930
Looks like by changing by reducing the odds the hash is going down so we'll have to go is 21 2019 18

195
00:12:28.940 --> 00:12:30.910
17 and finally I'll get below the target.

196
00:12:30.910 --> 00:12:33.010
I'll get over here but that's not the case.

197
00:12:33.010 --> 00:12:41.470
As you can see at 21 it goes up here you know 76000 is here but 143 is here is this completely all over

198
00:12:41.470 --> 00:12:46.270
the place is completely unpredictable and that's a very important feature.

199
00:12:46.270 --> 00:12:50.710
Now we can see that why that's such an important feature of the hash why the avalanche effect is so

200
00:12:50.710 --> 00:12:56.500
important in the hash because we thought that this whole cryptographic puzzle this concept of finding

201
00:12:56.860 --> 00:13:00.280
the hash is called the right hash is called the cryptographic puzzle.

202
00:13:00.310 --> 00:13:06.430
This whole cryptographic puzzle would not even exist because you could just like find the way you find

203
00:13:06.430 --> 00:13:09.050
your way like a shortcut into getting a small astronaut.

204
00:13:09.880 --> 00:13:19.360
And that even further illustrates the importance of the hashing algorithm like the reason for us using

205
00:13:19.360 --> 00:13:23.220
a hashing algorithm is because you cannot reverse engineer it.

206
00:13:23.220 --> 00:13:29.440
You cannot crack it and predict what hash you will get based on the non-C input as soon as somebody

207
00:13:29.440 --> 00:13:30.370
is able to do that.

208
00:13:30.400 --> 00:13:36.610
The whole of this concept is going to fall apart because people will be just being able to predict the

209
00:13:36.630 --> 00:13:42.400
non-SS and then just put in and they'll know what hash they get so they won't have to put in the work

210
00:13:42.670 --> 00:13:48.340
in order you know put in like hours and hours and hours of machine time in order to crack unknowns in

211
00:13:48.340 --> 00:13:49.890
order to get the right hash below the target.

212
00:13:49.900 --> 00:13:54.310
They'll just put it in the know they'll calculate what mods they need to get a high below the target

213
00:13:54.340 --> 00:13:54.990
and that's it.

214
00:13:55.060 --> 00:13:56.160
They will put in the block.

215
00:13:56.290 --> 00:14:01.450
So that's what the 256 promise is that nobody's been able to crack it.

216
00:14:01.450 --> 00:14:07.810
There's been attempts lots and lots of attempts to do that people but people haven't gotten even close

217
00:14:07.810 --> 00:14:09.310
to cracking it.

218
00:14:09.310 --> 00:14:14.760
They were previous hash algorithms such as shall one M.D.

219
00:14:14.770 --> 00:14:18.010
I think Google and before him do D5 which have been cracked.

220
00:14:18.010 --> 00:14:21.890
But every time they've been updated into stronger ones.

221
00:14:21.950 --> 00:14:25.070
We've got shots of 56 there's also shot five 12.

222
00:14:25.090 --> 00:14:29.130
There's a shot three and so on that Algren's that was wrong.

223
00:14:29.140 --> 00:14:31.950
But for now plug chains use term and 56.

224
00:14:32.080 --> 00:14:38.620
So those are some important features to remember about or to know about the hashing algorithm why it's

225
00:14:38.620 --> 00:14:40.520
so important in Blodgett's.

226
00:14:40.650 --> 00:14:41.110
OK.

227
00:14:41.290 --> 00:14:45.950
So that's the second important thing that we needed to point out here.

228
00:14:45.970 --> 00:14:49.020
So there we go that's our golden Non's at the bottom.

229
00:14:49.050 --> 00:14:52.360
And yeah so that's in essence how mining works.

230
00:14:52.360 --> 00:14:59.200
You just need to keep iterating the notes until you get a hash below the target then you get to add

231
00:14:59.200 --> 00:15:03.460
that block or whoever gets there first guess at that block and then the whole thing starts again for

232
00:15:03.460 --> 00:15:06.460
the next for the next block.

233
00:15:06.910 --> 00:15:07.150
Yeah.

234
00:15:07.150 --> 00:15:13.540
And so finally I just wanted to ask you if you see there's an error on the slide and I was wondering

235
00:15:13.570 --> 00:15:19.360
if you were able to pick it up if you were able to see it.

236
00:15:19.630 --> 00:15:22.390
Actually I just noticed it myself just not so long ago.

237
00:15:22.450 --> 00:15:30.370
This previous hash is it couldn't be possibly correct because it has to start with four leading zeros

238
00:15:30.370 --> 00:15:30.720
right.

239
00:15:30.780 --> 00:15:35.290
Why the block number 2 would have not been accepted into the chain.

240
00:15:35.440 --> 00:15:41.790
If this hash started not before leadings or so that's that's an error on my part preparing the slides

241
00:15:42.160 --> 00:15:48.920
but it illustrates kind of like reinforces the concept that blocks would have to be below the target

242
00:15:48.940 --> 00:15:54.040
the hashes have to be below the target for blocks to be except So in the in the proper blotching this

243
00:15:54.220 --> 00:15:57.760
previous hash would have been also below the target.

244
00:15:57.760 --> 00:16:06.250
So there we go that's in a sense like this is how conceptually mining works of course there's lots more

245
00:16:06.250 --> 00:16:14.220
to it like for instance we talked about the fact that we can actually there's ways for us to control

246
00:16:14.220 --> 00:16:15.770
what transaction going into here.

247
00:16:15.770 --> 00:16:16.890
We'll talk about that and more.

248
00:16:16.930 --> 00:16:22.090
There's more to the non-SS there's more components or not there is actually more fields that go into

249
00:16:22.100 --> 00:16:24.840
my book and we'll talk about those things in modules too.

250
00:16:24.850 --> 00:16:29.680
But so if you're like if you already have some questions and some things that you know you might have

251
00:16:29.680 --> 00:16:37.210
read somewhere about blotching mining or you have some ideas already and some things for you right now

252
00:16:37.270 --> 00:16:40.980
like are you know like you've got more questions that haven't been answered yet.

253
00:16:40.990 --> 00:16:43.800
Don't worry we'll answer those in module two of the course.

254
00:16:43.810 --> 00:16:45.900
And going further into further details.

255
00:16:46.000 --> 00:16:48.100
But right now this is what we need.

256
00:16:48.100 --> 00:16:54.050
This is the foundation that we need order to progress with this part of the Course Mudgal one and one

257
00:16:54.060 --> 00:17:00.100
with the practical trials that are coming and after that we'll build on top and we'll increase our foundation

258
00:17:00.160 --> 00:17:04.590
and increase our knowledge like incrementally as we go through of course.

259
00:17:04.630 --> 00:17:06.210
On that note thank you so much.

260
00:17:06.210 --> 00:17:11.560
I hope that now it's clear how mining works and what this whole fuss is about what the cryptographic

261
00:17:11.560 --> 00:17:20.650
challenge is why people are racing to get to the best the golden non-SS and why there's so many miners

262
00:17:20.650 --> 00:17:25.990
around the world why they need the computation power and I can't wait to see how the next eternal until

263
00:17:25.990 --> 00:17:26.660
then.

264
00:17:26.890 --> 00:17:27.610
Dirk Lachance.
