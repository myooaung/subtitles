WEBVTT
﻿1
00:00:00.270 --> 00:00:06.420
‫In this lecture, we're going to draw the stacked bar using our scales, unlike other charts, we're

2
00:00:06.420 --> 00:00:09.230
‫going to take two steps for drawing the vase.

3
00:00:09.540 --> 00:00:12.360
‫First, we need to loop through the formatted data.

4
00:00:12.690 --> 00:00:16.820
‫The form metadata is an array of age groups on each iteration.

5
00:00:16.830 --> 00:00:21.090
‫We'll loop through the data inside the age group for each iteration.

6
00:00:21.120 --> 00:00:23.380
‫We'll draw a bar in total.

7
00:00:23.430 --> 00:00:28.710
‫There should be four hundred and sixty eight bars drawn on the image in the script file.

8
00:00:28.710 --> 00:00:30.990
‫Scroll to the bottom of the draw function.

9
00:00:31.170 --> 00:00:33.570
‫Add a comment that says Draw Barres.

10
00:00:35.940 --> 00:00:40.680
‫Next, we'll add a group to the container selection by calling the append function.

11
00:00:43.150 --> 00:00:45.730
‫We're adding a group to keep things organized.

12
00:00:45.880 --> 00:00:51.070
‫We're going to be drawing a lot of shapes for this example, it would be a good idea to group things

13
00:00:51.070 --> 00:00:53.310
‫together, to make it easier for debugging.

14
00:00:53.680 --> 00:00:55.870
‫We should assign this group to a variable.

15
00:00:56.140 --> 00:00:59.110
‫The name of the variable will be called age groups.

16
00:01:01.520 --> 00:01:08.090
‫To make it easier to identify or add a class to the group called age groups by using the class to function.

17
00:01:10.550 --> 00:01:15.770
‫The class doesn't come with any styles or adding it to help us find the group in the image with the

18
00:01:15.770 --> 00:01:22.490
‫developer tools after adding the class will make a selection for an empty group with deselect all function.

19
00:01:24.960 --> 00:01:30.060
‫We're going to join these stacked data array with the selection by calling the data function.

20
00:01:32.580 --> 00:01:38.370
‫Since there aren't elements for the data to be joined with, they'll be placed inside the entire selection,

21
00:01:38.730 --> 00:01:44.090
‫we can draw some shapes based on the data in the entire selection by calling the joint function.

22
00:01:44.430 --> 00:01:46.620
‫We're going to add another group element.

23
00:01:49.160 --> 00:01:55.910
‫We're attempting to draw the bars, however, the data for the bars are nested inside the array to access

24
00:01:55.910 --> 00:02:00.170
‫the bars, we'll need to join the first set of arrays with an element.

25
00:02:00.560 --> 00:02:06.110
‫Since the group element doesn't draw a shape, it's a viable element for joining our data, too.

26
00:02:06.500 --> 00:02:10.700
‫Also, it doesn't hurt to group our rectangles by age groups.

27
00:02:11.180 --> 00:02:16.190
‫Let's refresh the page to check if nine groups are being generated for each age group.

28
00:02:18.630 --> 00:02:25.110
‫And the developer tools under the Elements panel will find a group with class age groups, if we look

29
00:02:25.110 --> 00:02:32.050
‫inside, this group will find the nine age groups great, switched back to the editor on another line.

30
00:02:32.100 --> 00:02:37.530
‫We're going to begin the process of drawing the state population that can be found in each age group.

31
00:02:37.830 --> 00:02:42.480
‫We'll call the age group select all function for the rectangle element.

32
00:02:44.990 --> 00:02:50.570
‫We'll be working on a separate line to make things easier to read, it's not necessary to do so, but

33
00:02:50.570 --> 00:02:57.080
‫recommended we're going to start drawing the rectangles first, will join the data by calling the data

34
00:02:57.080 --> 00:02:57.650
‫function.

35
00:03:00.150 --> 00:03:06.060
‫Here's the tricky part, the data we need to draw can be found within the respective group, how do

36
00:03:06.060 --> 00:03:10.380
‫we grab the data from the corresponding group and pass it onto the data function?

37
00:03:10.650 --> 00:03:13.860
‫It turns out we have the option of passing in a function.

38
00:03:16.390 --> 00:03:22.120
‫The function we pass in will be provided, the data that's currently joined to the selection will accept

39
00:03:22.120 --> 00:03:23.830
‫it as D. and return it.

40
00:03:26.450 --> 00:03:31.280
‫The data we're returning are the 52 arrays that can be found in each age group.

41
00:03:31.610 --> 00:03:36.950
‫The next thing we'll do is change the join function to start drawing the rectangle elements.

42
00:03:39.430 --> 00:03:46.690
‫There are four attributes we're going to add to the bars there, x, y width and height attributes.

43
00:03:47.020 --> 00:03:50.590
‫Let's change the attribute function for each of these attributes.

44
00:03:53.010 --> 00:03:58.410
‫We'll start with the ex attribute, the value for this attribute will be a function that accepts the

45
00:03:58.740 --> 00:03:59.400
‫argument.

46
00:04:01.920 --> 00:04:09.060
‫The argument will contain the state data, the bar should be positioned evenly across the X-axis, we're

47
00:04:09.060 --> 00:04:12.890
‫going to use the X scale to help us distribute the bars evenly.

48
00:04:13.290 --> 00:04:17.850
‫We'll return the following X scale D data name.

49
00:04:20.350 --> 00:04:26.590
‫The X scale is expecting the name of the state, we can access the name through the data object, the

50
00:04:26.590 --> 00:04:32.750
‫stack function formatted our data so the original data can be found under the data object.

51
00:04:33.100 --> 00:04:38.110
‫The scale will return a coordinate that'll position the shape across the x axis.

52
00:04:39.390 --> 00:04:45.510
‫Let's work on the wine attribute will set the value to an arrow function that accepts the argument.

53
00:04:47.940 --> 00:04:51.990
‫The following will be returned widescale, Daewon.

54
00:04:54.600 --> 00:05:00.180
‫There are two numbers available in this state, OIRA's, there are these starting and end positions,

55
00:05:00.480 --> 00:05:04.790
‫the end position is stored at this one index, which is what we're using.

56
00:05:05.130 --> 00:05:08.220
‫We want the shapes to be positioned higher up the image.

57
00:05:08.670 --> 00:05:14.670
‫If we were to look at the wide scale function, the lower the domain, the higher the range, the higher

58
00:05:14.670 --> 00:05:16.610
‫the domain, the lower the range.

59
00:05:16.890 --> 00:05:20.340
‫We're reversing the values because of how coordinates work.

60
00:05:20.340 --> 00:05:24.240
‫In SVG, the y axis goes from top to bottom.

61
00:05:24.510 --> 00:05:28.260
‫A lower value will result in a shape being positioned higher.

62
00:05:28.740 --> 00:05:31.980
‫The next attribute we'll work on is the height attribute.

63
00:05:32.250 --> 00:05:40.590
‫The value will be the following d y scale D zero minus y scale D one.

64
00:05:43.820 --> 00:05:49.640
‫To get the height of the bar, we're subtracting the lower end by the higher end, this solution might

65
00:05:49.640 --> 00:05:50.660
‫seem confusing.

66
00:05:51.020 --> 00:05:56.930
‫However, keep in mind, after passing the values through the scales, the wide scale function will

67
00:05:56.930 --> 00:05:57.230
‫flip.

68
00:05:57.230 --> 00:06:01.920
‫The values, therefore, will receive an appropriate height for the chart.

69
00:06:02.480 --> 00:06:09.350
‫The last attribute we're going to set is the width attribute will set it to the X scale bandwidth function.

70
00:06:11.800 --> 00:06:18.010
‫The band scale produces additional values, it doesn't just transform your values, one of the values

71
00:06:18.010 --> 00:06:19.930
‫it produces is called the bandwidth.

72
00:06:20.260 --> 00:06:24.370
‫The bandwidth function holds how much space each bar should take.

73
00:06:24.700 --> 00:06:26.610
‫The width of each bar will be the same.

74
00:06:26.890 --> 00:06:28.720
‫We're finished with drawing the shapes.

75
00:06:28.900 --> 00:06:30.310
‫Let's refresh the page.

76
00:06:32.790 --> 00:06:34.330
‫The bars are coming out great.

77
00:06:34.530 --> 00:06:40.890
‫It looks like we only have 52 bars, if we were to zoom in, we'd find that each bar has a border.

78
00:06:41.190 --> 00:06:43.100
‫There is spacing between each bar.

79
00:06:43.440 --> 00:06:47.940
‫There are a total of four hundred and sixty eight bars, which is what we were aiming for.

80
00:06:48.270 --> 00:06:50.120
‫There is stacked on top of one another.

81
00:06:50.550 --> 00:06:55.290
‫The only problem is that we can't identify each bar since they're all the same color.

82
00:06:55.590 --> 00:06:57.640
‫Let's change the colors of the bars.

83
00:06:57.870 --> 00:07:02.190
‫I don't think it would be a good idea to assign a unique color to each bar.

84
00:07:02.460 --> 00:07:08.310
‫Instead will assign a color for each age group in total will need nine different colors.

85
00:07:08.460 --> 00:07:09.990
‫Switch back to the editor.

86
00:07:10.500 --> 00:07:15.180
‫We're going to define a scale for helping transform the age groups into colors.

87
00:07:15.390 --> 00:07:19.650
‫Under the scales section will create a scale called color scale.

88
00:07:20.040 --> 00:07:23.520
‫We'll use the D 3.0 scale ordinal function.

89
00:07:26.010 --> 00:07:31.630
‫The ordinal scale, as we've learned, will transform discrete data into discrete data.

90
00:07:31.980 --> 00:07:37.980
‫We're looking to transform nine age groups into nine colors will change the domain function.

91
00:07:40.470 --> 00:07:44.640
‫We're going to map the Steck data variable by calling the map function.

92
00:07:47.140 --> 00:07:52.480
‫The domain should be an array of age groups we'd like to map, we're going to return the following from

93
00:07:52.480 --> 00:07:55.240
‫the function we pass in Dokki.

94
00:07:57.740 --> 00:08:00.140
‫Next, we'll change the range function.

95
00:08:02.560 --> 00:08:09.520
‫The value for this function will be the following D3 scheme, spectral stack, data length.

96
00:08:12.770 --> 00:08:18.500
‫We're going to be using the predefine list of colors because there are only nine age groups, we don't

97
00:08:18.500 --> 00:08:20.040
‫need more than nine colors.

98
00:08:20.270 --> 00:08:23.210
‫There's one more function wolfsbane called unknown.

99
00:08:25.750 --> 00:08:32.290
‫In some cases, the ordinal scale may not be able to scale a group to a color, if that happens, we

100
00:08:32.290 --> 00:08:39.100
‫can shame the unknown function and set a fallback value will set the fall-back color to hash C.C.C..

101
00:08:41.640 --> 00:08:47.670
‫Let's use our scale on the age group selection, we're going to chain an attribute function to set the

102
00:08:47.670 --> 00:08:53.400
‫fill attribute will set it to the following D color scale D key.

103
00:08:55.990 --> 00:09:01.750
‫We're applying the Phil attribute to the group selection instead of the rectangles, because attributes

104
00:09:01.750 --> 00:09:07.840
‫applied to groups will apply to their children, it'll be much easier and faster to apply the colours

105
00:09:07.840 --> 00:09:10.390
‫to the group instead of the individual shapes.

106
00:09:10.660 --> 00:09:12.040
‫Let's refresh the page.

107
00:09:14.560 --> 00:09:21.540
‫We now have a colorful, stacked bar chart, it's easier to identify each age group in the next lecture,

108
00:09:21.640 --> 00:09:24.760
‫we'll begin adding an axis to help us read the data.

