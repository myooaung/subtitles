WEBVTT
﻿1
00:00:00.330 --> 00:00:05.580
‫In this lecture, we're going to spend some time improving the tooltip we developed in the past few

2
00:00:05.580 --> 00:00:06.270
‫lectures.

3
00:00:06.510 --> 00:00:08.860
‫It's sort of annoying to hover over a dot.

4
00:00:09.180 --> 00:00:11.790
‫We have to place our mouse directly over a dot.

5
00:00:12.000 --> 00:00:13.110
‫The dots are tiny.

6
00:00:13.290 --> 00:00:15.230
‫Some dots overlap with one another.

7
00:00:15.420 --> 00:00:18.560
‫We have to be very precise with where we point our mouse.

8
00:00:18.840 --> 00:00:22.610
‫Some of our readers may have difficulty viewing information about a DOT.

9
00:00:23.040 --> 00:00:25.600
‫One solution may be to make the dots bigger.

10
00:00:25.770 --> 00:00:28.560
‫However, that won't solve the overlap issue.

11
00:00:28.770 --> 00:00:32.470
‫Another solution may be to make the dimensions of the chart larger.

12
00:00:32.730 --> 00:00:34.060
‫This won't work either.

13
00:00:34.380 --> 00:00:37.250
‫Our readers may view this chart on a mobile device.

14
00:00:37.260 --> 00:00:39.780
‫If that's the case, we'll have limited room.

15
00:00:40.080 --> 00:00:42.000
‫There's a way we can fix this problem.

16
00:00:42.000 --> 00:00:44.850
‫We can use what's called a Voronoi diagram.

17
00:00:46.070 --> 00:00:52.010
‫What is a Voronoi diagram, it's a diagram that can tell you the shortest distance to reach a specific

18
00:00:52.010 --> 00:00:57.520
‫point, Voronoi diagrams can look intimidating, but very straightforward to understand.

19
00:00:57.860 --> 00:01:01.430
‫We're going to be using this diagram to help us fix our issue.

20
00:01:01.740 --> 00:01:06.550
‫Let's look at an example of the kinds of problems a Voronoi diagram can solve.

21
00:01:06.950 --> 00:01:13.130
‫In this example, we have a map that shows the location of multiple fire stations right in the middle

22
00:01:13.130 --> 00:01:14.570
‫of the map, there's a fire.

23
00:01:14.840 --> 00:01:18.380
‫Our job is to contact the station closest to the fire.

24
00:01:18.590 --> 00:01:24.380
‫By the looks of it, three stations seem to be the closest we can guess which is the closest.

25
00:01:24.380 --> 00:01:26.590
‫But that's probably not the best idea.

26
00:01:26.720 --> 00:01:28.030
‫Every second counts.

27
00:01:28.310 --> 00:01:31.550
‫We want the station that can arrive the fastest to the fire.

28
00:01:31.820 --> 00:01:34.520
‫Otherwise, the consequences may be dire.

29
00:01:34.970 --> 00:01:39.890
‫In a situation like this, it's difficult for the average human to pick the correct choice.

30
00:01:40.160 --> 00:01:43.580
‫Luckily, a Voronoi diagram solve this issue.

31
00:01:44.000 --> 00:01:46.550
‫Here's what a Voronoi diagram looks like.

32
00:01:46.700 --> 00:01:48.860
‫The diagram is placed above the map.

33
00:01:49.160 --> 00:01:51.980
‫It'll divide the image into weirdly drawn shapes.

34
00:01:52.190 --> 00:01:54.500
‫These shapes are what's called a partition.

35
00:01:54.770 --> 00:01:58.670
‫The partition tells us the areas closest to a specific point.

36
00:01:58.910 --> 00:02:02.290
‫And our example, the fire is inside the green partition.

37
00:02:02.570 --> 00:02:05.960
‫Therefore, this fire station is closest to the fire.

38
00:02:06.530 --> 00:02:12.170
‫If the fire were over in the brown partition, this fire station would be the closest to the fire.

39
00:02:12.500 --> 00:02:18.230
‫Voronoi diagrams are beneficial because they clearly tell us the closest distance to a point.

40
00:02:19.980 --> 00:02:26.020
‫In the resource section of this lecture, I provide a link to a library called Three Delaunay.

41
00:02:26.460 --> 00:02:29.920
‫This library will generate a Voronoi diagram for us.

42
00:02:30.120 --> 00:02:36.240
‫We don't have to worry about calculating the partitions all different needs as our data, and it'll

43
00:02:36.240 --> 00:02:37.410
‫take care of the rest.

44
00:02:37.890 --> 00:02:40.980
‫This library comes bundled with a core of D3.

45
00:02:41.220 --> 00:02:44.630
‫We don't need to do anything to make sure it's available to us.

46
00:02:45.000 --> 00:02:50.310
‫You may be thinking how are we going to use a Voronoi diagram to help us with our scatterplot issue?

47
00:02:50.520 --> 00:02:56.730
‫If you scroll to the description, you'll come across a link to an interactive example called the Delany's

48
00:02:56.730 --> 00:02:57.210
‫Deuel.

49
00:02:57.360 --> 00:02:58.410
‫Let's check it out.

50
00:03:00.820 --> 00:03:07.090
‫Immediately, we'll come across an example of a Voronoi diagram, if you think about it, this image

51
00:03:07.090 --> 00:03:09.070
‫sort of looks like our scatterplot.

52
00:03:09.310 --> 00:03:12.620
‫It's a 2D plane with dots scattered across the image.

53
00:03:12.910 --> 00:03:16.600
‫The only difference is that there's a Voronoi diagram layered above it.

54
00:03:17.110 --> 00:03:20.920
‫We're going to draw a Voronoi diagram above our scatterplot.

55
00:03:21.190 --> 00:03:23.020
‫It'll be similar to this image.

56
00:03:23.230 --> 00:03:28.990
‫We were going to use this diagram to help us detect what DOT is closest to the user's mouse.

57
00:03:29.350 --> 00:03:32.440
‫The closest dot will have the tooltip hovered over it.

58
00:03:32.770 --> 00:03:36.820
‫This way, the reader doesn't have to point their mouse directly above a dot.

59
00:03:37.030 --> 00:03:39.940
‫As long as they're close to it, the tooltip will appear.

60
00:03:40.420 --> 00:03:42.920
‫We will start writing the code in the next lecture.

61
00:03:43.060 --> 00:03:44.050
‫I'll see you there.

