WEBVTT
﻿1
00:00:00.430 --> 00:00:06.220
‫In this lecture, we are going to add color to the heat map at the moment, the rectangles are all the

2
00:00:06.220 --> 00:00:06.960
‫same color.

3
00:00:07.300 --> 00:00:11.200
‫We are going to be using a scale to calculate the color of the rectangle.

4
00:00:11.500 --> 00:00:13.310
‫This is where things can get tricky.

5
00:00:13.600 --> 00:00:18.010
‫Our data set contains values between zero and three hundred thousand dollars.

6
00:00:18.250 --> 00:00:20.630
‫How do we assign a color to an income?

7
00:00:21.160 --> 00:00:25.840
‫Luckily, most schools in these three are capable of working with colors.

8
00:00:26.050 --> 00:00:30.430
‫It's common practice to need to assign a color to a shape based on a value.

9
00:00:30.760 --> 00:00:34.730
‫The developers of D three have developed scales to work with colors.

10
00:00:35.020 --> 00:00:36.870
‫This includes the linear scale.

11
00:00:37.480 --> 00:00:40.750
‫Let's use the linear scale to paint the rectangles.

12
00:00:41.110 --> 00:00:44.680
‫Before we do, we are going to adjust the draw function.

13
00:00:45.050 --> 00:00:48.580
‫The heat map will be drawn multiple times with different scales.

14
00:00:48.880 --> 00:00:53.010
‫This will allow us to compare the different scales on how they handle colors.

15
00:00:53.350 --> 00:00:57.570
‫We need to be able to tell the draw function which scale it should use.

16
00:00:57.910 --> 00:01:03.450
‫We will add a parameter for the type of scale to use in the draw functions parameters.

17
00:01:03.490 --> 00:01:06.310
‫We will add a second parameter called scale.

18
00:01:08.830 --> 00:01:14.320
‫We will update the call to the draw function at the bottom of the script file, bypassing and destroying

19
00:01:14.620 --> 00:01:16.120
‫the value will be linear.

20
00:01:18.650 --> 00:01:24.590
‫The first heat map will be drawn with the linear scale back in the function, you will add a comment

21
00:01:24.590 --> 00:01:27.500
‫above the rectangles that says scale's.

22
00:01:30.020 --> 00:01:35.390
‫We will be writing our skills in this part of the function, we are going to declare a variable called

23
00:01:35.390 --> 00:01:38.810
‫color scale, it will not have a value assigned to it.

24
00:01:41.340 --> 00:01:47.390
‫We will assign a value to the variable once we know which skill to apply after the clearing the variable,

25
00:01:47.430 --> 00:01:53.580
‫we are going to create a conditional statement that will check if the scale parameter is equal to linear.

26
00:01:56.090 --> 00:02:02.830
‫If this is the case, we will set the color scale variable to the linear scale in the conditional block,

27
00:02:02.840 --> 00:02:08.570
‫we will assign the color scale variable to the D 3.0 scale linear function.

28
00:02:11.120 --> 00:02:14.070
‫Next, we need to add the domain and range.

29
00:02:14.240 --> 00:02:16.610
‫First, we'll change the domain function.

30
00:02:19.120 --> 00:02:20.900
‫Let's think about this for a moment.

31
00:02:21.100 --> 00:02:28.140
‫We are trying to transform income into a color, the scale will expect the income as a numeric value.

32
00:02:28.690 --> 00:02:33.040
‫The value outputted from the scale should be a valid success color code.

33
00:02:33.220 --> 00:02:37.600
‫We will pass in the D3 extent function with the data set.

34
00:02:40.160 --> 00:02:44.390
‫This function will return an array with the lowest and highest number in the array.

35
00:02:44.720 --> 00:02:47.210
‫The next thing will change is the range function.

36
00:02:49.720 --> 00:02:53.500
‫We are going to pass an array with the colors, white and red.

37
00:02:56.000 --> 00:03:02.180
‫It's completely allowed to pass in CSFs color names, D3 will take care of converting this into color

38
00:03:02.180 --> 00:03:03.420
‫codes for the shapes.

39
00:03:03.650 --> 00:03:06.520
‫Let's look at a graph to see how the scale will work.

40
00:03:09.020 --> 00:03:11.270
‫The lowest number in the array is zero.

41
00:03:11.570 --> 00:03:19.580
‫We told the scale to convert this value into the color white D3 uses RGB as its primary format for color

42
00:03:19.580 --> 00:03:20.150
‫codes.

43
00:03:20.630 --> 00:03:26.000
‫The color code for white is RGV to five five two five five to five five.

44
00:03:27.110 --> 00:03:34.070
‫On the other end, the highest number in the array is three hundred 577 This number will be transformed

45
00:03:34.070 --> 00:03:37.940
‫into the color code RGV two five five zero zero.

46
00:03:39.300 --> 00:03:46.470
‫The scale will also be able to transform values into other colors based on the colors we passed in D3,

47
00:03:46.470 --> 00:03:50.710
‫is capable of calculating the correct colors in between the two ranges.

48
00:03:50.970 --> 00:03:54.330
‫Keep in mind, the linear scale is a continuous scale.

49
00:03:54.660 --> 00:03:58.760
‫It converts a continuous dataset into another continuous data set.

50
00:03:59.160 --> 00:04:02.420
‫We will even get colors for numbers outside of the scale.

51
00:04:02.920 --> 00:04:05.560
‫Our data set contains one hundred numbers.

52
00:04:05.820 --> 00:04:10.230
‫This means we should receive one hundred unique colors for our rectangles.

53
00:04:10.500 --> 00:04:15.570
‫For example, the number one fifty two to eight is transformed into the color code.

54
00:04:15.650 --> 00:04:21.770
‫RGB two five five one two eight one two eight D three is pretty amazing so far, isn't it?

55
00:04:22.140 --> 00:04:25.230
‫We don't have to worry about figuring out what colors we need.

56
00:04:25.530 --> 00:04:28.920
‫D3 is capable of calculating colors on our behalf.

57
00:04:29.190 --> 00:04:34.740
‫All we need to provide are the two colors as the range D3 will take care of the rest.

58
00:04:37.200 --> 00:04:42.990
‫Let's try using the scale down in the function, we will chain another attribute method for the FIL

59
00:04:43.020 --> 00:04:43.770
‫attribute.

60
00:04:44.100 --> 00:04:48.630
‫The value will be an arrow function where we will accept the data argument.

61
00:04:51.140 --> 00:04:55.640
‫We will return the color scale function with the data argument passed in.

62
00:04:58.270 --> 00:05:01.420
‫This now you can be sure change to the color scale function.

63
00:05:03.890 --> 00:05:11.210
‫It's the exact same thing earlier in the chain we are setting the film attribute to Hash DTD, it's

64
00:05:11.210 --> 00:05:16.070
‫safe to remove this function from the chain since we're changing the rectangles colors later in the

65
00:05:16.070 --> 00:05:16.520
‫chain.

66
00:05:19.010 --> 00:05:26.060
‫We'll make one last change before viewing the chart switch over to the HTML file above the div tag with

67
00:05:26.060 --> 00:05:30.320
‫the ID of chart, we will add a heading inside the tags.

68
00:05:30.330 --> 00:05:35.660
‫We will output the name of the scale we're using to change the colors, which is the linear scale.

69
00:05:38.170 --> 00:05:42.870
‫We are adding a header to help us differentiate between the different heat maps will draw.

70
00:05:43.120 --> 00:05:45.160
‫Let's view the document in the browser.

71
00:05:47.660 --> 00:05:53.670
‫The heat map is now accurately representing the income of the one hundred individuals in our data set.

72
00:05:53.990 --> 00:05:56.600
‫There's just one problem it's difficult to read.

73
00:05:57.050 --> 00:06:03.410
‫One problem with this visualization is we don't know how many people are in the lower, middle and upper

74
00:06:03.410 --> 00:06:04.000
‫class.

75
00:06:04.430 --> 00:06:08.840
‫As I stated before, each rectangle will have a unique shade of red.

76
00:06:09.110 --> 00:06:10.920
‫But can we really tell the difference?

77
00:06:11.120 --> 00:06:15.890
‫We could probably find the rectangles with the darkest shade of red and the color white.

78
00:06:16.220 --> 00:06:18.690
‫Everything in between is difficult to figure out.

79
00:06:18.950 --> 00:06:21.340
‫One solution may be to sort the data.

80
00:06:21.380 --> 00:06:26.180
‫Let's try that back in the ED scroll to the top of the draw function.

81
00:06:26.450 --> 00:06:29.230
‫We are going to sort the data after requesting it.

82
00:06:29.480 --> 00:06:32.780
‫We will call these sort function on the data set array.

83
00:06:35.350 --> 00:06:41.800
‫We will pass in a callback function where we passed in two values for comparison and called A and B.

84
00:06:44.330 --> 00:06:47.750
‫Inside this function, we will subtract A from B.

85
00:06:50.310 --> 00:06:55.650
‫The function we're passing in, we'll sort the array in ascending order, let's refresh the page.

86
00:06:58.160 --> 00:07:03.350
‫The data is a little easier to read, however, it doesn't really solve our problem.

87
00:07:03.440 --> 00:07:05.030
‫It doesn't tell us anything.

88
00:07:05.330 --> 00:07:10.910
‫We don't know how many lower class individuals there are compared to upper class individuals.

89
00:07:11.150 --> 00:07:13.520
‫It's very difficult to make a comparison.

90
00:07:14.150 --> 00:07:19.210
‫We are facing a situation where the linear scale isn't the mass scale for this scenario.

91
00:07:19.430 --> 00:07:24.200
‫In the next lecture, we'll look at another possible scale for solving our issue.

92
00:07:24.350 --> 00:07:25.390
‫I'll see you there.

