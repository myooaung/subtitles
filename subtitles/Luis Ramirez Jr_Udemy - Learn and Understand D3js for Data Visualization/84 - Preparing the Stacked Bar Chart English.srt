1
00:00:00,510 --> 00:00:06,720
‫In this lecture, we're going to start drawing a stacked bar chart, bar charts are a popular type of

2
00:00:06,720 --> 00:00:07,800
‫visualization.

3
00:00:08,070 --> 00:00:10,480
‫They're not to be confused with histograms.

4
00:00:10,800 --> 00:00:12,510
‫There is a difference between the two.

5
00:00:12,810 --> 00:00:15,650
‫Both charts use bars to represent data.

6
00:00:15,870 --> 00:00:21,680
‫They both have an x axis and y axis histogram show a frequency of data.

7
00:00:22,020 --> 00:00:26,330
‫We saw an example of a histogram when we drew different types of weather data.

8
00:00:26,700 --> 00:00:29,550
‫Each bar didn't represent a single value.

9
00:00:29,750 --> 00:00:34,830
‫Instead, the bars represented the frequency of values within a given range.

10
00:00:35,310 --> 00:00:39,570
‫Bar charts are different because each bar represents one value.

11
00:00:39,810 --> 00:00:43,470
‫By representing one value, we can compare data easily.

12
00:00:45,000 --> 00:00:50,790
‫In this lecture's resource section, I provide a link to an article that breaks the differences between

13
00:00:50,790 --> 00:00:52,900
‫histograms and bar charts further.

14
00:00:53,220 --> 00:00:56,130
‫I recommend giving in a good read before proceeding.

15
00:00:56,670 --> 00:01:00,730
‫For this example, we're going to create a variation of a bar chart.

16
00:01:00,990 --> 00:01:03,420
‫We're going to draw a stacked bar chart.

17
00:01:03,810 --> 00:01:07,650
‫A stacked bar chart is when the bars are stacked over one another.

18
00:01:07,950 --> 00:01:11,960
‫They allow us to break down data further into multiple categories.

19
00:01:12,270 --> 00:01:14,790
‫Let's look at what will be drawing for this example.

20
00:01:15,330 --> 00:01:22,290
‫In the resource section of this lecture, I provide a zip file, download this file, unzip the contents

21
00:01:22,290 --> 00:01:24,590
‫and point your editor to those files.

22
00:01:24,600 --> 00:01:26,370
‫Pause the video if you need to.

23
00:01:26,820 --> 00:01:29,570
‫The contents of the zip file are nothing special.

24
00:01:29,760 --> 00:01:32,160
‫Let's jump straight into the script file.

25
00:01:32,520 --> 00:01:34,560
‫Three things are happening in this file.

26
00:01:34,740 --> 00:01:37,290
‫A request for a file is being performed.

27
00:01:37,410 --> 00:01:39,030
‫The dimensions are being set.

28
00:01:39,060 --> 00:01:42,500
‫And lastly, the image is being drawn with a container.

29
00:01:42,810 --> 00:01:46,380
‫Let's inspect the contents of the data that CSV file.

30
00:01:48,970 --> 00:01:55,060
‫The data will be working with will contain each state's population size in the U.S., including Washington,

31
00:01:55,060 --> 00:02:01,030
‫D.C. and Puerto Rico, the first column will hold the names of the states in alphabetical order.

32
00:02:01,180 --> 00:02:05,210
‫The population for each state is divided into different age groups.

33
00:02:05,680 --> 00:02:07,440
‫Here's how we'll draw this data.

34
00:02:07,600 --> 00:02:09,290
‫We're going to draw a bar chart.

35
00:02:09,580 --> 00:02:11,410
‫There will be a bar for each state.

36
00:02:11,770 --> 00:02:15,200
‫Each bar will be divided into more bars for each age group.

37
00:02:15,460 --> 00:02:17,890
‫The bars will be stacked on top of one another.

38
00:02:18,160 --> 00:02:21,130
‫We're going to draw the states across the x axis.

39
00:02:21,370 --> 00:02:26,510
‫The population will be measured on the Y axis before we start drawing the data.

40
00:02:26,560 --> 00:02:32,110
‫I have one problem with how D three stores our data switched back to the script file.

41
00:02:32,380 --> 00:02:38,200
‫The data is being requested with these csv function D three parses the file into an array.

42
00:02:38,500 --> 00:02:42,580
‫Let's lock the data set variable to inspect the contents of the array.

43
00:02:45,200 --> 00:02:47,030
‫Refresh the page in the browser.

44
00:02:49,550 --> 00:02:53,970
‫In the Council of the Developer, Tools will find the data has been logged.

45
00:02:54,260 --> 00:03:00,980
‫It's an array of objects and any of the objects will find the name of the state along with the age groups.

46
00:03:01,280 --> 00:03:03,860
‫The value for each age group is a string.

47
00:03:04,220 --> 00:03:08,480
‫By default, the CSC function will store every value as a string.

48
00:03:08,790 --> 00:03:11,240
‫The population should be stored as numbers.

49
00:03:11,510 --> 00:03:16,850
‫We need to tell three to store these values as numbers switch back to the editor.

50
00:03:19,390 --> 00:03:25,830
‫The CSP function has an optional second argument that allows us to configure how the data is stored,

51
00:03:26,080 --> 00:03:30,140
‫let's pass in an arrow function that accepts an argument called.

52
00:03:32,950 --> 00:03:39,170
‫D3 will loop through the data in our file, the argument will reference each object in the array.

53
00:03:39,400 --> 00:03:43,350
‫The function must return the data before we return the data.

54
00:03:43,360 --> 00:03:45,870
‫We can convert any of the properties types.

55
00:03:46,090 --> 00:03:49,390
‫For example, there's an age group called less than 10.

56
00:03:49,720 --> 00:03:53,980
‫We can update this properties tight by wrapping it with the parse function.

57
00:03:59,730 --> 00:04:05,520
‫We can perform type conversion for each property, however, there's a shorter way of performing this

58
00:04:05,520 --> 00:04:06,100
‫task.

59
00:04:06,390 --> 00:04:12,750
‫I'm going to replace this line with the D3 auto type function with the argument passed in.

60
00:04:15,410 --> 00:04:21,560
‫The auto type function will detect what types are appropriate for your data, it automates the process

61
00:04:21,560 --> 00:04:22,700
‫of assigning types.

62
00:04:22,970 --> 00:04:24,920
‫It's not the most reliable function.

63
00:04:25,220 --> 00:04:28,630
‫Sometimes it may set an incorrect type for your data.

64
00:04:28,910 --> 00:04:32,680
‫It's always good practice to log the data to inspect the new types.

65
00:04:32,870 --> 00:04:34,190
‫For our purposes.

66
00:04:34,230 --> 00:04:35,180
‫It'll work fine.

67
00:04:35,450 --> 00:04:37,400
‫Let's refresh the page in the browser.

68
00:04:40,020 --> 00:04:43,980
‫The console is showing us that the types for the age groups are numbers.

69
00:04:44,280 --> 00:04:47,380
‫This is indicated by the fact that the text color is blue.

70
00:04:47,730 --> 00:04:53,900
‫Previously, the text color was red, which is the color of the dev tools used for displaying strings.

71
00:04:54,120 --> 00:04:54,590
‫Great.

72
00:04:54,720 --> 00:04:56,840
‫We have converted the types to numbers.

73
00:04:57,240 --> 00:05:01,830
‫It's always important to work with the correct types for the most accurate results.

74
00:05:02,100 --> 00:05:07,470
‫Even though JavaScript is a dynamically typed language, there can be problems down the line.

75
00:05:07,470 --> 00:05:13,110
‫If we use the wrong types in the next lecture, we'll continue working on the stacked bar chart.

