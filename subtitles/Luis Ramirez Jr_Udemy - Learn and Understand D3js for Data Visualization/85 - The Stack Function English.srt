1
00:00:00,240 --> 00:00:06,260
‫In this lecture, we're going to look at another D3 function for formatting our data at the moment,

2
00:00:06,360 --> 00:00:08,340
‫our data isn't ready to be drawn.

3
00:00:08,640 --> 00:00:13,280
‫That may sound weird because at first glance it looks properly formatted.

4
00:00:13,560 --> 00:00:15,890
‫Let's check out the data file for a moment.

5
00:00:16,440 --> 00:00:19,310
‫There are a total of 53 rows in this file.

6
00:00:19,590 --> 00:00:21,870
‫The first row contains the column names.

7
00:00:22,050 --> 00:00:27,720
‫The other 52 rows are states in the U.S., including Washington, D.C. and Puerto Rico.

8
00:00:27,900 --> 00:00:30,330
‫In addition, there are nine age groups.

9
00:00:30,720 --> 00:00:33,290
‫Our goal is to draw a stacked bar chart.

10
00:00:33,600 --> 00:00:39,180
‫We should have a total of four hundred and sixty eight bars drawn on the chart because 52 multiplied

11
00:00:39,180 --> 00:00:40,880
‫by nine is four sixty eight.

12
00:00:41,220 --> 00:00:47,190
‫Keep in mind, we need to draw each age group for each state because the bars in a bar chart represent

13
00:00:47,190 --> 00:00:48,020
‫one value.

14
00:00:48,270 --> 00:00:50,430
‫However, there's a problem with this file.

15
00:00:50,910 --> 00:00:52,970
‫There are only fifty two rows.

16
00:00:53,190 --> 00:00:58,080
‫This will mean when we join the data with an empty selection, the data will only be looped through

17
00:00:58,080 --> 00:00:59,370
‫fifty two times.

18
00:00:59,640 --> 00:01:01,800
‫That won't be enough to draw the bars.

19
00:01:02,130 --> 00:01:07,830
‫Therefore we're going to need to format our data differently if we want to draw every piece of data.

20
00:01:08,460 --> 00:01:13,020
‫D3 comes with a function for format and your data for a situation like this.

21
00:01:13,230 --> 00:01:18,540
‫In the script file, we're going to remove the console statement for the data set variable.

22
00:01:20,960 --> 00:01:26,960
‫Scroll to these scales section of the file, we will define a variable called stack generator.

23
00:01:27,260 --> 00:01:30,350
‫Its value will be the D3 stack function.

24
00:01:32,910 --> 00:01:39,150
‫The stack function format, your data similar to the pie or bean functions, it'll organize your data

25
00:01:39,150 --> 00:01:41,960
‫based on a specific property key in your data.

26
00:01:42,270 --> 00:01:45,660
‫We can set the key by changing a function called keys.

27
00:01:48,180 --> 00:01:53,640
‫The Keys function has one argument, which is a function that has access to the data that gets passed

28
00:01:53,640 --> 00:01:54,190
‫on to it.

29
00:01:54,570 --> 00:01:57,810
‫These Steck function will return a function for a formating.

30
00:01:57,810 --> 00:02:02,070
‫Your data, when we call the stack function, will provide it with our data.

31
00:02:02,370 --> 00:02:04,380
‫The function we're passing in will be called.

32
00:02:04,380 --> 00:02:05,420
‫When that happens.

33
00:02:05,700 --> 00:02:08,930
‫This function must return an array of property names.

34
00:02:09,270 --> 00:02:12,840
‫D3 will format the data based on the list we pass in.

35
00:02:13,440 --> 00:02:16,430
‫We want to format our data based on the age groups.

36
00:02:16,650 --> 00:02:23,640
‫Luckily, by using these CSC function, D3 will store the column names under a property called columns.

37
00:02:23,970 --> 00:02:26,550
‫We'll be able to access the age group numbers.

38
00:02:26,550 --> 00:02:33,210
‫Under this property, the function will return the following data set columns dot slice one.

39
00:02:35,800 --> 00:02:41,620
‫These slice function will return a copy of the array, it's called on, we're calling the slice function

40
00:02:41,620 --> 00:02:45,060
‫because we don't want the first property in the columns property.

41
00:02:45,460 --> 00:02:49,600
‫The first property will hold the name of the state, which isn't what we want.

42
00:02:49,840 --> 00:02:51,460
‫We just want the age groups.

43
00:02:51,670 --> 00:02:55,720
‫Therefore, we're creating a new array where the state names are cut off.

44
00:02:56,050 --> 00:02:59,620
‫The slice function has one argument, which is the starting point.

45
00:03:00,130 --> 00:03:04,180
‫Let's use our new stack function for formatting our data below.

46
00:03:04,180 --> 00:03:06,870
‫We'll create a variable called stack data.

47
00:03:07,180 --> 00:03:11,920
‫Its value will be the static generator function with the data set variable passed in.

48
00:03:14,420 --> 00:03:17,180
‫Next, we will log these stacked data variable.

49
00:03:19,540 --> 00:03:21,820
‫Then refresh the page in the browser.

50
00:03:24,240 --> 00:03:29,940
‫And the developer tools, we can see that the data has been logged, the data is much different this

51
00:03:29,940 --> 00:03:30,360
‫time.

52
00:03:30,570 --> 00:03:36,950
‫Instead of an array of 52 objects, we'll find an array of nine days in each of the arrays.

53
00:03:36,990 --> 00:03:39,030
‫There are fifty two more arrays.

54
00:03:39,330 --> 00:03:43,830
‫The data has been formatted in a way will be able to draw a stacked bar chart.

55
00:03:44,070 --> 00:03:47,760
‫Overall, there will be a total of four hundred and sixty eight arrays.

56
00:03:50,170 --> 00:03:55,510
‫Let's look inside any of the areas, every array will have a property called key.

57
00:03:58,910 --> 00:04:05,060
‫The key property should be set to one of the nine age groups, the arrays are grouped by age group.

58
00:04:05,240 --> 00:04:11,220
‫As you can see, every array in the first array belongs to the age group that is under 10 years old.

59
00:04:11,750 --> 00:04:15,140
‫Next, let's look inside any of the 52 arrays.

60
00:04:15,350 --> 00:04:17,750
‫I'm going to open the first one in this group.

61
00:04:18,080 --> 00:04:21,200
‫The original data can be found under the data property.

62
00:04:23,730 --> 00:04:30,120
‫One of the most interesting things D3 has done is set the starting and end points for each array in

63
00:04:30,120 --> 00:04:30,910
‫this object.

64
00:04:30,990 --> 00:04:36,180
‫There are keys called zero and one the Zerok can be considered the starting point.

65
00:04:36,450 --> 00:04:38,960
‫The one key can be considered the endpoint.

66
00:04:39,270 --> 00:04:42,720
‫The one key for this object is set to about five million.

67
00:04:45,290 --> 00:04:47,330
‫Let's look at the second age group.

68
00:04:49,950 --> 00:04:56,580
‫The second age group is for people whose ages are between 11 and 19 in the first year of this group,

69
00:04:56,610 --> 00:05:00,540
‫the Zerok, he is set to the same value we saw in the first age.

70
00:05:00,540 --> 00:05:05,450
‫Group three has arranged the data so that they stack on top of one another.

71
00:05:05,790 --> 00:05:10,020
‫The starting point for this array is the endpoint for the last age group.

72
00:05:10,330 --> 00:05:13,110
‫The same will hold true for the rest of the arrays.

73
00:05:13,290 --> 00:05:18,170
‫As you can imagine, this will make it easy to make the data look stacked with a bar chart.

74
00:05:18,750 --> 00:05:21,180
‫There's one problem I have with this formatting.

75
00:05:21,420 --> 00:05:26,970
‫Even though the age group is stored under the key property in the parent arrays, I think it would be

76
00:05:26,970 --> 00:05:30,520
‫nice if the age group was also stored in the children arrays.

77
00:05:30,840 --> 00:05:35,040
‫Let's say for the age group and the children arrays switch back to the editor.

78
00:05:35,550 --> 00:05:39,690
‫We're going to chain a function called map to the stack generator function.

79
00:05:43,550 --> 00:05:48,600
‫The map function allows us to loop through an array, it'll return a copy of the array.

80
00:05:48,920 --> 00:05:54,240
‫We can modify the array by passing in a callback function that will be passed in each item.

81
00:05:54,260 --> 00:05:56,120
‫The map function iterates through.

82
00:05:58,730 --> 00:06:02,060
‫We'll refer to each item in the array as age group.

83
00:06:04,520 --> 00:06:10,370
‫Next, we'll need to loop through the children array's, we'll call the age group for each function

84
00:06:10,370 --> 00:06:11,780
‫to begin that process.

85
00:06:14,240 --> 00:06:19,070
‫Afterword will pass and an arrow function where each array will be called state.

86
00:06:21,580 --> 00:06:27,250
‫And this function will set these state Dorcy property to the age group Dorcy property.

87
00:06:29,810 --> 00:06:34,820
‫D three defined the age group Dorcy Property Ital Store the age group.

88
00:06:35,090 --> 00:06:40,670
‫What we're doing is adding the age group to each of the 52 children array's, which are the states.

89
00:06:40,910 --> 00:06:43,370
‫Lastly, we'll return the age group.

90
00:06:45,840 --> 00:06:51,220
‫This should generate a new array where each state will also have the age group attached to it.

91
00:06:51,480 --> 00:06:52,830
‫Let's refresh the page.

92
00:06:55,070 --> 00:07:01,730
‫In the console will find that a property called QI has been added to all the children array's, we now

93
00:07:01,730 --> 00:07:04,700
‫have access to the age group and any of the array's.

94
00:07:05,060 --> 00:07:10,730
‫It's time to move on to the next step will create skills based on our data in the next lecture.

