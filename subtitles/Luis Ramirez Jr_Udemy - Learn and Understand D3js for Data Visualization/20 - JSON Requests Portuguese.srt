1
00:00:00,360 --> 00:00:05,880
‫Nesta aula, aprenderemos como fazer solicitações com esses três, é o conceito fundamental final

2
00:00:05,880 --> 00:00:09,690
‫que aprenderemos antes de começar a criar gráficos.

3
00:00:09,990 --> 00:00:12,220
‫Os dados nem sempre estão disponíveis em nossos scripts.

4
00:00:12,450 --> 00:00:16,090
‫É possível que precisemos obter dados de um recurso externo.

5
00:00:16,560 --> 00:00:21,180
‫De modo geral, existem três locais possíveis de onde seus dados podem vir.

6
00:00:21,480 --> 00:00:24,050
‫Os dados podem ser codificados permanentemente em um arquivo JavaScript.

7
00:00:24,330 --> 00:00:28,470
‫Podemos armazenar dados em arquivos como JSON ou CSV.

8
00:00:28,710 --> 00:00:32,100
‫Por último, podemos obter dados de um recurso da API.

9
00:00:32,520 --> 00:00:35,630
‫O local mais comum para armazenar dados é um arquivo.

10
00:00:35,820 --> 00:00:40,770
‫Os dois formatos mais comuns de armazenamento de dados são arquivos JSON e CSV.

11
00:00:40,950 --> 00:00:44,190
‫Também podemos obter dados de um arquivo de texto ou XML.

12
00:00:44,520 --> 00:00:45,470
‫Para este curso.

13
00:00:45,510 --> 00:00:50,850
‫Vamos nos concentrar nos dois formatos mais populares JSON, NSV.

14
00:00:52,110 --> 00:00:57,570
‫Na seção de recursos desta palestra, forneço um link para uma biblioteca chamada D3 Fetch.

15
00:00:57,870 --> 00:01:04,290
‫Esta biblioteca contém um conjunto de funções para realizar solicitações HTP em segundo plano e usa

16
00:01:04,290 --> 00:01:06,000
‫a função Fetch JavaScript.

17
00:01:06,240 --> 00:01:09,690
‫Ele se baseia nessa função, fornecendo uma API mais simples.

18
00:01:09,990 --> 00:01:12,580
‫É capaz de analisar dados de uma solicitação.

19
00:01:12,840 --> 00:01:14,730
‫Isso torna nosso código mais legível.

20
00:01:15,060 --> 00:01:18,510
‫No entanto, você não precisa usar as três funções.

21
00:01:18,720 --> 00:01:20,160
‫Eles são totalmente opcionais.

22
00:01:20,370 --> 00:01:26,820
‫Se você tiver outra biblioteca de sua preferência para fazer solicitações, use-a por padrão.

23
00:01:27,030 --> 00:01:31,020
‫A biblioteca D three Fetch está incluída na versão completa do D3.

24
00:01:31,350 --> 00:01:33,440
‫Não precisamos fazer nada para instalá-lo.

25
00:01:33,900 --> 00:01:35,970
‫Vamos começar com esta biblioteca.

26
00:01:36,090 --> 00:01:41,100
‫Vamos ver como podemos fazer uma solicitação de um caso arquivado para esses exemplos.

27
00:01:41,100 --> 00:01:43,080
‫Estaremos trabalhando em um novo projeto.

28
00:01:43,380 --> 00:01:45,660
‫Aponte seu editor para um diretório vazio.

29
00:01:45,900 --> 00:01:50,490
‫Depois de mover os diretórios, adicione um novo arquivo chamado HTML indexado.

30
00:01:53,080 --> 00:01:58,720
‫Dentro deste arquivo, faremos o scaffold de um novo modelo digitando H. M. Dois pontos cinco.

31
00:02:01,210 --> 00:02:07,720
‫Precisaremos do D3 se quisermos realizar solicitações, podemos rapidamente pegar o CD e do site oficial, copiar o

32
00:02:08,020 --> 00:02:11,890
‫link e colá-lo na tag do corpo do arquivo HTML.

33
00:02:14,380 --> 00:02:18,700
‫Por fim, criaremos um arquivo chamado App Dot J. S ..

34
00:02:21,070 --> 00:02:25,330
‫Este arquivo deve ser carregado após o script D3 em nosso arquivo HTML.

35
00:02:30,760 --> 00:02:35,440
‫A próxima coisa de que precisaremos é um arquivo JSON, JSON como um formato para armazenar dados.

36
00:02:35,650 --> 00:02:40,590
‫Vou assumir que você sabe o que é JSON, já que está intimamente ligado ao JavaScript.

37
00:02:40,900 --> 00:02:45,580
‫A sintaxe para JSON é a mesma sintaxe para objetos e matrizes em JavaScript.

38
00:02:45,850 --> 00:02:50,440
‫Em nosso projeto, iremos criar um novo arquivo chamado Data JSON.

39
00:02:52,990 --> 00:02:59,050
‫Dentro desse arquivo, adicionaremos uma matriz com os números 10, 20, 30, 40, 50.

40
00:03:01,480 --> 00:03:03,110
‫É um exemplo muito básico.

41
00:03:03,280 --> 00:03:09,790
‫O objetivo é carregar este arquivo em nosso projeto, podemos utilizar D3 para realizar a solicitação deste arquivo em nosso

42
00:03:09,790 --> 00:03:10,820
‫arquivo de script.

43
00:03:10,840 --> 00:03:14,260
‫Vamos chamar uma função chamada D 3. 0 e Jason.

44
00:03:16,750 --> 00:03:20,200
‫A função Jason realizará uma solicitação em nosso nome.

45
00:03:20,440 --> 00:03:24,040
‫É projetado especificamente para Jason philes em El Paso.

46
00:03:24,040 --> 00:03:25,560
‫Jason, arquive para nós.

47
00:03:25,750 --> 00:03:28,480
‫Isso nos economiza tempo de termos que fazer isso nós mesmos.

48
00:03:28,930 --> 00:03:30,910
‫Esta função possui um argumento.

49
00:03:31,030 --> 00:03:34,960
‫É o caminho para o arquivo que passaremos no caminho para os dados.

50
00:03:35,230 --> 00:03:36,250
‫Arquivo Jason.

51
00:03:38,710 --> 00:03:41,780
‫O valor para isso deve ser um caminho HTP válido.

52
00:03:42,070 --> 00:03:48,070
‫Felizmente, graças à linha de extensão do servidor, nossos arquivos Jason podem ser servidos por HTP.

53
00:03:48,310 --> 00:03:51,520
‫Se não estivéssemos usando uma extensão, receberíamos um erro.

54
00:03:51,790 --> 00:03:56,170
‫A solicitação de JavaScript não pode ser feita no protocolo final.

55
00:03:56,710 --> 00:04:02,410
‫A função JSON retornará uma promessa de que só então podemos funcionar para lidar com sua resposta.

56
00:04:04,800 --> 00:04:06,660
‫Vamos passar uma função de seta.

57
00:04:09,100 --> 00:04:14,170
‫A resposta da promessa serão os dados recuperados do arquivo, podemos aceitar os dados como um

58
00:04:14,170 --> 00:04:14,770
‫argumento.

59
00:04:17,170 --> 00:04:21,020
‫Os dados já passaram, podemos começar a usá-los imediatamente.

60
00:04:21,250 --> 00:04:25,690
‫Vamos mantê-lo simples registrando os dados com a função de log do console.

61
00:04:28,490 --> 00:04:30,290
‫Vamos ver a página no navegador.

62
00:04:32,750 --> 00:04:34,370
‫Abra as ferramentas do desenvolvedor.

63
00:04:36,690 --> 00:04:42,540
‫No painel do console, encontraremos um array, esse array são os dados do arquivo JSON.

64
00:04:42,750 --> 00:04:46,910
‫Você pode esperar que o conteúdo verifique se foi solicitado com sucesso.

65
00:04:47,310 --> 00:04:48,930
‫A matriz está no mesmo formato.

66
00:04:48,930 --> 00:04:55,560
‫Nós o salvamos como JSON é o formato muito mais preferível, pois não precisamos fazer alterações nos dados

67
00:04:55,560 --> 00:04:56,340
‫após solicitá-los.

68
00:04:56,910 --> 00:05:00,240
‫Essa é uma forma de verificar o conteúdo da solicitação.

69
00:05:00,550 --> 00:05:04,400
‫Existe outro painel e as ferramentas do desenvolvedor chamados de painel de rede.

70
00:05:04,770 --> 00:05:08,550
‫Este painel exibirá a lista de solicitações feitas por nosso projeto.

71
00:05:08,830 --> 00:05:15,540
‫Ele pode nos dizer quanto tempo levou uma solicitação, o tipo de solicitação feita e a resposta que é benéfica para qualquer

72
00:05:15,540 --> 00:05:16,140
‫bug.

73
00:05:16,410 --> 00:05:19,530
‫Ele pode fornecer mais informações do que registrar os dados.

74
00:05:19,960 --> 00:05:24,930
‫Você pode não ver nada porque o painel de rede só exibirá solicitações depois que você abrir as

75
00:05:24,930 --> 00:05:26,010
‫ferramentas do desenvolvedor.

76
00:05:26,230 --> 00:05:29,190
‫Pode ser necessário atualizar a página para visualizar as solicitações.

77
00:05:29,640 --> 00:05:33,120
‫Por padrão, o painel de rede produzirá todas as solicitações.

78
00:05:33,240 --> 00:05:35,730
‫Mas só nos importamos com nossa solicitação JSON.

79
00:05:35,940 --> 00:05:38,430
‫Podemos filtrar a lista no topo do painel.

80
00:05:38,820 --> 00:05:45,660
‫Podemos selecionar o X H. R. opção para forçar as ferramentas do desenvolvedor a filtrar os resultados para solicitações de JavaScript.

81
00:05:46,140 --> 00:05:49,710
‫Encontraremos nossa solicitação para o arquivo JSON de dados.

82
00:05:49,890 --> 00:05:52,960
‫Se clicarmos nele, uma nova janela aparecerá à direita.

83
00:05:53,250 --> 00:05:56,580
‫Esta janela conterá informações detalhadas sobre as solicitações.

84
00:05:56,910 --> 00:05:58,920
‫Há um total de cinco seções.

85
00:05:59,070 --> 00:06:04,500
‫Existem cabeçalhos, visualizações, iniciador de resposta e seções de tempo.

86
00:06:04,860 --> 00:06:06,830
‫Não exploraremos todas as seções.

87
00:06:07,020 --> 00:06:10,860
‫As seções mais importantes são a seção de visualização e resposta.

88
00:06:11,130 --> 00:06:15,960
‫Se clicarmos em qualquer uma das seções, poderemos ver a resposta da solicitação.

89
00:06:16,410 --> 00:06:18,240
‫Há uma diferença entre os dois.

90
00:06:18,540 --> 00:06:22,730
‫A seção de visualização irá renderizar a resposta como se tivesse sido renderizada pelo seu navegador.

91
00:06:23,070 --> 00:06:26,700
‫A seção de resposta renderizará o texto bruto da resposta.

92
00:06:27,120 --> 00:06:30,390
‫Se clicarmos na seção de visualização, o código é formatado.

93
00:06:30,630 --> 00:06:32,100
‫Podemos até interagir com ele.

94
00:06:32,370 --> 00:06:37,200
‫A seção de visualização terá destaque de sintaxe, o que pode tornar a resposta mais legível.

95
00:06:37,680 --> 00:06:40,910
‫Na seção de resposta, a interatividade se foi.

96
00:06:41,100 --> 00:06:43,080
‫Esta é a resposta em texto bruto.

97
00:06:43,230 --> 00:06:48,990
‫Eu prefiro a seção de visualização em vez da seção de resposta porque é muito mais fácil de ler a resposta.

98
00:06:49,440 --> 00:06:54,240
‫Fizemos com sucesso uma solicitação para nosso arquivo adjacente antes de iniciarmos esta aula.

99
00:06:54,330 --> 00:06:57,420
‫Há um último ajuste que desejo fazer em nosso código.

100
00:06:57,990 --> 00:07:00,570
‫De volta ao script, estamos usando promessas.

101
00:07:00,720 --> 00:07:01,770
‫Na minha opinião.

102
00:07:01,770 --> 00:07:06,030
‫Acho que a sintaxe de espera assíncrona é muito mais fácil de ler e escrever.

103
00:07:06,270 --> 00:07:07,590
‫Você pode preferir.

104
00:07:07,830 --> 00:07:12,960
‫Vamos ver como podemos converter nossa implementação atual para usar a sintaxe de espera assíncrona.

105
00:07:13,230 --> 00:07:16,860
‫Primeiro, envolveremos nosso código com uma função chamada Get Data.

106
00:07:20,600 --> 00:07:24,380
‫A seguir, adicionaremos a palavra-chave assíncrona antes do nome da função.

107
00:07:26,840 --> 00:07:29,430
‫Esta palavra-chave tornará nossa função assíncrona.

108
00:07:29,580 --> 00:07:32,730
‫Posteriormente, criaremos uma variável chamada dados.

109
00:07:33,050 --> 00:07:37,400
‫Seu valor será a função D3 Jason que temos e nossa função.

110
00:07:39,850 --> 00:07:42,880
‫Precisamos adicionar a palavra-chave await antes da função.

111
00:07:45,280 --> 00:07:49,390
‫Em seguida, moveremos nossa instrução de console para fora de você e, em seguida, funcionaremos.

112
00:07:51,800 --> 00:07:54,140
‫A função then pode ser totalmente removida.

113
00:07:56,500 --> 00:08:00,610
‫Por último, podemos chamar a função get data para iniciar a solicitação.

114
00:08:03,040 --> 00:08:07,870
‫Ótimo, experimentaremos o mesmo comportamento de antes no restante deste curso.

115
00:08:07,900 --> 00:08:14,140
‫Vou usar a sintaxe de espera assíncrona se você preferir alterar a função then.

116
00:08:14,170 --> 00:08:15,190
‫Isso também está bom.

117
00:08:15,370 --> 00:08:20,410
‫Na próxima aula, exploraremos outro tipo de arquivo que podemos solicitar com esses três.

