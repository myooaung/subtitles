WEBVTT
﻿1
00:00:00.530 --> 00:00:05.250
‫Nesta palestra, aprenderemos como realizar uma solicitação de arquivo CSV.

2
00:00:05.420 --> 00:00:08.450
‫É um processo semelhante à solicitação de arquivos JSON.

3
00:00:08.630 --> 00:00:14.720
‫No entanto, existem algumas discrepâncias das quais devemos estar cientes ao trabalhar com arquivos CSC antes de entrarmos

4
00:00:14.720 --> 00:00:15.510
‫no código.

5
00:00:15.620 --> 00:00:18.050
‫Vamos falar sobre o que é um arquivo C é V.

6
00:00:18.230 --> 00:00:21.180
‫CACP significa valores separados por vírgula.

7
00:00:21.380 --> 00:00:23.300
‫É um arquivo de texto com valores.

8
00:00:23.480 --> 00:00:25.700
‫Cada valor é separado por uma vírgula.

9
00:00:25.910 --> 00:00:26.540
‫É isso aí.

10
00:00:26.750 --> 00:00:30.830
‫Os arquivos CSV são comumente usados por softwares de planilhas como o Excel.

11
00:00:31.250 --> 00:00:34.260
‫Temos duas opções para trabalhar com arquivos CSC.

12
00:00:34.310 --> 00:00:38.280
‫Podemos abri-los em um editor de texto ou podemos usar um programa de planilha.

13
00:00:38.540 --> 00:00:44.810
‫Existem dois programas que recomendo para trabalhar com arquivos C ASV: Planilhas Google e Microsoft Excel.

14
00:00:45.320 --> 00:00:50.990
‫Para este curso, não precisaremos usar um programa de planilha porque criar arquivos CSV é simples.

15
00:00:50.990 --> 00:00:55.970
‫Depois de ver como eles se parecem, esses programas podem ser úteis ao lidar com grandes quantidades de

16
00:00:55.970 --> 00:00:56.360
‫dados.

17
00:00:56.600 --> 00:00:58.790
‫Vamos começar nosso projeto.

18
00:00:58.820 --> 00:01:02.240
‫Vamos criar um arquivo chamado Data ESV.

19
00:01:04.800 --> 00:01:09.850
‫A extensão de um arquivo não é CSFI em nosso arquivo CSV.

20
00:01:09.900 --> 00:01:14.190
‫Podemos adicionar nossos dados digitando cada valor com uma vírgula para separá-los.

21
00:01:14.500 --> 00:01:17.540
‫Vamos criar os mesmos dados que tínhamos no arquivo JSON.

22
00:01:17.790 --> 00:01:19.680
‫Nós adicionaremos os seguintes números.

23
00:01:19.980 --> 00:01:23.280
‫10, 20, 30, 40, 50.

24
00:01:25.820 --> 00:01:29.880
‫O arquivo ARCC está pronto, o próximo passo é carregá-lo em nosso arquivo.

25
00:01:30.080 --> 00:01:35.990
‫Mude para o script, arquivo em nossa função get data, vamos comentar sobre a variável de dados.

26
00:01:38.540 --> 00:01:41.820
‫Em seu lugar, criaremos uma variável chamada dados.

27
00:01:42.140 --> 00:01:46.850
‫Seu valor será a função de três CSC com a palavra-chave await.

28
00:01:49.450 --> 00:01:55.860
‫A função CSB retorna uma promessa com os dados, ela tem um argumento, que é o caminho para o arquivo que

29
00:01:56.080 --> 00:01:59.080
‫passaremos nos dados mais idiotas o nome do arquivo.

30
00:02:01.570 --> 00:02:04.120
‫Vamos usar o conselho e as ferramentas do desenvolvedor.

31
00:02:06.470 --> 00:02:12.580
‫No console, encontraremos um array, naturalmente, a linguagem JavaScript não entende C como arquivos

32
00:02:12.590 --> 00:02:13.370
‫V.

33
00:02:13.700 --> 00:02:19.890
‫D3 demorou para analisar e formatar nosso arquivo CSC antes de retorná-lo na matriz.

34
00:02:20.000 --> 00:02:22.280
‫Encontraremos um array chamado colunas.

35
00:02:22.520 --> 00:02:24.720
‫A matriz de colunas conterá nossos dados.

36
00:02:24.950 --> 00:02:29.330
‫É muito misterioso saber por que D3 formatou nossos dados dessa forma.

37
00:02:30.140 --> 00:02:32.670
‫Podemos criar tabelas em outra guia.

38
00:02:32.690 --> 00:02:34.280
‫Tenho o Google Sheets aberto.

39
00:02:34.670 --> 00:02:37.280
‫As planilhas são basicamente compostas por uma tabela.

40
00:02:37.490 --> 00:02:39.220
‫As tabelas possuem colunas e linhas.

41
00:02:39.380 --> 00:02:43.930
‫Acredite ou não, as tabelas podem ser exportadas para arquivos CSV e vice-versa.

42
00:02:44.480 --> 00:02:48.230
‫Para entender melhor, vou adicionar alguns dados a esta planilha.

43
00:02:50.570 --> 00:02:56.900
‫Na primeira linha, tenho duas colunas chamadas Nome e Idade, na segunda linha estão alguns valores do

44
00:02:56.900 --> 00:02:57.410
‫menu.

45
00:02:57.440 --> 00:03:01.430
‫Podemos baixar esses dados acessando o arquivo de download CCSVI.

46
00:03:03.880 --> 00:03:06.580
‫Vou abrir esse arquivo no meu editor rapidamente.

47
00:03:08.340 --> 00:03:15.090
‫O arquivo CSP contém mydata, as colunas de nome e idade estão na primeira linha, os valores estão na

48
00:03:15.090 --> 00:03:15.830
‫segunda linha.

49
00:03:16.020 --> 00:03:21.870
‫Se você pensar bem, parece uma espécie de mesa ou pelo menos você pode ver como pode ser transformado em

50
00:03:21.870 --> 00:03:22.740
‫uma mesa.

51
00:03:23.100 --> 00:03:25.020
‫Cada nova linha representa uma linha.

52
00:03:25.260 --> 00:03:28.130
‫O primeiro valor em cada linha pode ser agrupado como uma coluna.

53
00:03:28.410 --> 00:03:30.990
‫O mesmo vale para o segundo valor em cada linha.

54
00:03:31.500 --> 00:03:33.840
‫O D3 três examinará nosso arquivo CSC.

55
00:03:33.990 --> 00:03:37.200
‫Os valores da primeira linha são considerados os nomes das colunas.

56
00:03:37.440 --> 00:03:40.670
‫Ele criará uma matriz chamada colunas com esses valores.

57
00:03:40.830 --> 00:03:42.460
‫Mas e as outras linhas?

58
00:03:42.510 --> 00:03:43.470
‫Vamos descobrir.

59
00:03:43.740 --> 00:03:48.270
‫Vou copiar este código e colá-lo no arquivo csv de dados.

60
00:03:50.730 --> 00:03:53.250
‫Vamos atualizar a página para ver o conteúdo.

61
00:03:55.560 --> 00:03:57.340
‫As coisas são diferentes desta vez.

62
00:03:57.510 --> 00:04:00.610
‫Ainda temos as colunas de exibição no console.

63
00:04:00.840 --> 00:04:06.010
‫Além disso, temos um objeto para cada linha subsequente no arquivo CSC.

64
00:04:06.030 --> 00:04:08.000
‫Esses três criarão um objeto.

65
00:04:08.280 --> 00:04:12.110
‫O objeto será preenchido com os valores separados por vírgulas nessa linha.

66
00:04:12.360 --> 00:04:16.430
‫Se olharmos dentro deste objeto, encontraremos os valores da segunda linha.

67
00:04:16.950 --> 00:04:20.400
‫Os nomes das propriedades para cada valor correspondem à coluna.

68
00:04:20.400 --> 00:04:25.440
‫O valor pode ser encontrado em todo este array foi formatado para nós por esses três.

69
00:04:25.650 --> 00:04:29.600
‫Ele organizou nossos dados com base no conteúdo do arquivo CSV.

70
00:04:29.760 --> 00:04:33.450
‫Como você pode ver, a função CSP é extremamente útil.

71
00:04:33.990 --> 00:04:36.870
‫Terminamos de cobrir a biblioteca D três.

72
00:04:37.060 --> 00:04:42.110
‫Ele pode fazer muito mais, mas trabalharemos principalmente com arquivos Jason NCSA.

73
00:04:42.360 --> 00:04:45.000
‫É possível realizar solicitações brutas.

74
00:04:45.270 --> 00:04:47.550
‫Isso não é algo que veremos nesta seção.

75
00:04:47.760 --> 00:04:50.130
‫Eu recomendo principalmente o uso da função de defesa.

76
00:04:50.130 --> 00:04:56.820
‫Se você precisar realizar uma solicitação a uma API que conclua esta seção na próxima, vamos começar

77
00:04:56.820 --> 00:04:58.790
‫a criar alguns gráficos.

78
00:04:58.950 --> 00:05:00.060
‫Eu espero que você esteja animado.

79
00:05:00.210 --> 00:05:01.110
‫Eu te vejo lá.

