WEBVTT
﻿1
00:00:00.360 --> 00:00:05.970
‫In this lecture, we're going to update the tooltip with information about the dump the reader is hovering

2
00:00:05.970 --> 00:00:06.370
‫over.

3
00:00:06.660 --> 00:00:11.010
‫We will be working on the callback function we've written for the mouse enter event.

4
00:00:11.340 --> 00:00:15.050
‫In our function, we're provided an argument called datum.

5
00:00:15.390 --> 00:00:17.850
‫There are three things we need to grab there.

6
00:00:17.850 --> 00:00:20.330
‫The date, humidity and temperature.

7
00:00:20.640 --> 00:00:23.400
‫These properties are available in this argument.

8
00:00:24.030 --> 00:00:27.960
‫Let's load these properties with the appropriate location in the tooltip.

9
00:00:28.200 --> 00:00:34.950
‫After moving the tooltip, we will use the tooltip selection to select a child element called Metrick

10
00:00:34.950 --> 00:00:36.090
‫Humidity Spane.

11
00:00:40.860 --> 00:00:44.110
‫The stand element is where will insert the humidity.

12
00:00:44.520 --> 00:00:47.830
‫We will change the text function to set the entire text.

13
00:00:48.240 --> 00:00:53.100
‫We have an accessor function to help us access the correct property in our object.

14
00:00:53.430 --> 00:00:57.390
‫We will pass and the X accessor function with the datum argument.

15
00:00:59.870 --> 00:01:06.020
‫Next, we will update the tooltip with the temperature, the techs will be inserted into the tooltip

16
00:01:06.350 --> 00:01:09.080
‫select Metrick temp spane selection.

17
00:01:12.780 --> 00:01:15.360
‫Next, we will change the text function.

18
00:01:17.940 --> 00:01:23.250
‫The temperature can be accessed with the Y axis function, with the datum argument passed in.

19
00:01:25.830 --> 00:01:31.740
‫The last piece of data we need to display is the date, the element that will hold the data is the metric

20
00:01:31.740 --> 00:01:32.610
‫date element.

21
00:01:32.940 --> 00:01:36.480
‫We will use the tooltip select function to select it.

22
00:01:40.690 --> 00:01:48.280
‫Next, we will change the text function, the date can be accessed via the datums currently time property.

23
00:01:50.740 --> 00:01:52.070
‫All right, we're finished.

24
00:01:52.210 --> 00:01:54.280
‫Let's review the results in the browser.

25
00:01:56.760 --> 00:02:02.580
‫The tooltip is displaying information relative to the dot were hovering over, we have given the reader

26
00:02:02.580 --> 00:02:04.060
‫a way to view the data.

27
00:02:04.220 --> 00:02:06.620
‫However, there's just one slight issue.

28
00:02:06.810 --> 00:02:09.090
‫I'm not a fan of how the data is formatted.

29
00:02:09.330 --> 00:02:13.490
‫For example, the humidity can have one or two decimal values.

30
00:02:13.770 --> 00:02:16.020
‫This inconsistency isn't appealing.

31
00:02:16.290 --> 00:02:20.520
‫I think it would be better if we had a precision of two decimal values.

32
00:02:20.790 --> 00:02:24.660
‫The other problem is the date the data is being stored in seconds.

33
00:02:24.840 --> 00:02:27.690
‫We should format the date to something human readable.

34
00:02:28.230 --> 00:02:34.860
‫In this lecture's resource section, I provide a link to the D three format and time format libraries.

35
00:02:35.100 --> 00:02:40.530
‫The format library was introduced to help with formatting numbers, and three by default.

36
00:02:40.530 --> 00:02:41.700
‫It's part of the core.

37
00:02:41.940 --> 00:02:44.330
‫We don't need to do anything to install it.

38
00:02:44.580 --> 00:02:48.800
‫The other library time format can help us with formatting dates.

39
00:02:49.020 --> 00:02:51.420
‫It's also part of the core of D three.

40
00:02:51.690 --> 00:02:55.980
‫We'll be using both libraries to help us with the issues I mentioned earlier.

41
00:02:56.160 --> 00:03:00.570
‫Switch back to the editor above the code where we updated the text.

42
00:03:00.600 --> 00:03:04.530
‫We're going to add the formatters formatters need to be generated.

43
00:03:04.860 --> 00:03:08.820
‫D three will generate custom functions for formatting our numbers.

44
00:03:09.060 --> 00:03:12.960
‫First, we need to tell D three how to format our numbers.

45
00:03:13.200 --> 00:03:15.810
‫We will create a variable called formatter.

46
00:03:16.080 --> 00:03:19.410
‫Its value will be the D 3.0 format function.

47
00:03:21.890 --> 00:03:28.250
‫We must pass in the format as an argument to the function we will pass in the following dot to F.

48
00:03:30.740 --> 00:03:36.140
‫You can check out the documentation I provided in this lecture's resource section to learn about the

49
00:03:36.140 --> 00:03:37.860
‫various formats you can use.

50
00:03:38.060 --> 00:03:43.910
‫Generally, we can format the whole No part of a number or the decimal part of the number.

51
00:03:44.240 --> 00:03:48.500
‫Anything we typed to the left of the dot will be instructions for formatting.

52
00:03:48.500 --> 00:03:53.660
‫The whole number to the right of the dot will be instructions for formatting the decimal.

53
00:03:54.110 --> 00:03:58.820
‫We're telling these three the whole number portion of a number is fine, as is.

54
00:03:59.030 --> 00:04:02.150
‫It's the decimal portion of the number we want to format.

55
00:04:02.420 --> 00:04:05.750
‫The number in the format will tell the formatter, the precision.

56
00:04:06.020 --> 00:04:10.940
‫If we have a number with three decimals, the format function will cut off the last number.

57
00:04:11.450 --> 00:04:14.480
‫The F in the format will tell the format function.

58
00:04:14.480 --> 00:04:16.640
‫We want a fixed point notation.

59
00:04:16.940 --> 00:04:23.320
‫If we have a number with one decimal, D3 will force the number to have two decimals by adding a zero.

60
00:04:23.690 --> 00:04:26.180
‫This formatting makes it much more consistent.

61
00:04:26.180 --> 00:04:32.690
‫Regardless of what number D3 will return a function that will format any value we pass into it.

62
00:04:32.900 --> 00:04:36.440
‫We're going to use this function for the humidity and temperature.

63
00:04:36.680 --> 00:04:41.840
‫We're going to have the value we passed into both text functions with the formatter function.

64
00:04:49.050 --> 00:04:55.260
‫Next, let's start working on formatting the date below, the formatter variable will define another

65
00:04:55.260 --> 00:04:57.540
‫variable called date formatter.

66
00:04:57.780 --> 00:05:01.560
‫Its value will be the three time format function.

67
00:05:04.060 --> 00:05:11.350
‫This function requires we pass in the format as an argument will pass in the following percent B percent

68
00:05:11.350 --> 00:05:14.320
‫minus D, comma percent Y.

69
00:05:16.790 --> 00:05:22.910
‫The format will contain placeholders, you can refer to the documentation to find out the various placeholders

70
00:05:22.910 --> 00:05:27.830
‫available, the percent B placeholder will be replaced with the name of the month.

71
00:05:28.100 --> 00:05:31.750
‫The percent minus D placeholder will be replaced the day.

72
00:05:32.120 --> 00:05:39.140
‫Lastly, the percent y placeholder will be replaced with a year D three will return a function we can

73
00:05:39.140 --> 00:05:40.610
‫use to format our dates.

74
00:05:40.610 --> 00:05:42.740
‫With the format we passed into the function.

75
00:05:43.070 --> 00:05:47.360
‫We're going to wrap the value we passed into the text function with this function.

76
00:05:49.870 --> 00:05:51.340
‫Let's refresh the page.

77
00:05:53.720 --> 00:06:00.010
‫If we were to inspect any of the dots, the tooltip will show us the format and data, it's almost perfect.

78
00:06:00.140 --> 00:06:03.770
‫The date is in the correct format, but the actual date is wrong.

79
00:06:04.070 --> 00:06:07.610
‫The data from the file will contain weather data from twenty twenty.

80
00:06:07.940 --> 00:06:10.720
‫D3 is displaying the year 1970.

81
00:06:11.240 --> 00:06:16.130
‫The reason we're getting the wrong year is because the formatting function expects the time to be in

82
00:06:16.130 --> 00:06:17.000
‫milliseconds.

83
00:06:17.270 --> 00:06:20.300
‫The data in the file contains the time in seconds.

84
00:06:20.600 --> 00:06:23.870
‫We need to convert the time from seconds to milliseconds.

85
00:06:24.110 --> 00:06:25.550
‫Switch back to the editor.

86
00:06:25.790 --> 00:06:30.590
‫We're going to multiply the time property by one thousand to perform the conversion.

87
00:06:33.050 --> 00:06:39.230
‫If we go back to the browser, the date will be fixed, each dot should be from the year 20, 19 or

88
00:06:39.410 --> 00:06:40.870
‫20 twenty perfect.

89
00:06:41.060 --> 00:06:44.930
‫We have a tooltip that displays more information about each dot.

90
00:06:45.140 --> 00:06:51.140
‫In the next lecture, we'll look at how we can further improve this chart for a better user experience.

