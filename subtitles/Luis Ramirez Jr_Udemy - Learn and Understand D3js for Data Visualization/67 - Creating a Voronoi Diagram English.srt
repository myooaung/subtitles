1
00:00:00,390 --> 00:00:07,560
‫In this lecture, we're going to create a Voronoi diagram, we will be using the three DeLuna library

2
00:00:07,560 --> 00:00:11,170
‫to help us generate a Voronoi diagram by default.

3
00:00:11,220 --> 00:00:13,930
‫It's already included with our D three project.

4
00:00:14,130 --> 00:00:17,980
‫We can begin using it immediately in the script file.

5
00:00:18,030 --> 00:00:21,560
‫We're going to be writing our code at the bottom of the draw function.

6
00:00:21,840 --> 00:00:23,760
‫We're adding an interactive feature.

7
00:00:23,970 --> 00:00:27,410
‫Therefore, it'll be one of the last steps for drawing a graph.

8
00:00:27,660 --> 00:00:31,030
‫We can set up interactions after everything else has been drawn.

9
00:00:31,590 --> 00:00:34,770
‫We are going to define a variable called DeLuna.

10
00:00:36,970 --> 00:00:41,440
‫Its value will be the D3 DeLuna from function.

11
00:00:44,870 --> 00:00:50,570
‫The from function will loop through an array of data for each item in the array, it'll calculate the

12
00:00:50,570 --> 00:00:52,240
‫triangulation of each point.

13
00:00:52,550 --> 00:00:57,760
‫In other words, it'll tell us the coordinates for a drawing, a partition for a specific point.

14
00:00:58,190 --> 00:01:00,500
‫The from function has three arguments.

15
00:01:00,800 --> 00:01:05,480
‫The first argument is the array of data we will pass and the data set variable.

16
00:01:07,920 --> 00:01:13,920
‫Next, it needs to know which property in our data will be used for the X coordinate we are going to

17
00:01:13,920 --> 00:01:17,250
‫pass in an arrow function that accepts an argument called.

18
00:01:20,050 --> 00:01:26,770
‫The argument will reference the items in the array, as I said earlier, the front function loop through

19
00:01:26,770 --> 00:01:27,390
‫the array.

20
00:01:27,760 --> 00:01:30,790
‫We can use the argument to grab the object.

21
00:01:30,790 --> 00:01:35,200
‫In the current iteration, this function needs to return an X coordinate.

22
00:01:35,530 --> 00:01:40,810
‫We can use the X scale and X accessor functions to help us grab this value.

23
00:01:43,360 --> 00:01:49,270
‫The third argument is for the Y coordinate, we are going to pass another arrow function that accepts

24
00:01:49,270 --> 00:01:50,350
‫the argument.

25
00:01:52,790 --> 00:01:58,880
‫We were going to use the wide scale and why accessor function is to help us get the coordinate, the

26
00:01:58,880 --> 00:02:04,070
‫from function will return an object with coordinates for a drawing Voronoi diagram.

27
00:02:04,400 --> 00:02:08,330
‫Let's log the navaira able to check out what's been generated.

28
00:02:10,780 --> 00:02:14,110
‫Then we will refresh the page with the console opened.

29
00:02:16,490 --> 00:02:19,950
‫In the console, we will find an object called DeLuna.

30
00:02:20,270 --> 00:02:22,380
‫It'll contain arrays of coordinates.

31
00:02:22,640 --> 00:02:26,460
‫This information will be helpful for drawing the Voronoi diagram.

32
00:02:26,750 --> 00:02:28,010
‫There's just one problem.

33
00:02:28,250 --> 00:02:33,860
‫There's an overwhelming amount of information and properties attempting to draw this data would take

34
00:02:33,860 --> 00:02:34,890
‫up a lot of time.

35
00:02:35,180 --> 00:02:39,980
‫Luckily, D3 can draw the Voronoi diagram for us based on this data.

36
00:02:40,220 --> 00:02:45,730
‫Let's go back to the ED we will comments about the long statement for the money variable.

37
00:02:45,890 --> 00:02:47,210
‫We don't need it anymore.

38
00:02:49,690 --> 00:02:56,680
‫Next, we will create a variable called Voronoi, its value will be the DeLuna Voronoi function.

39
00:02:59,160 --> 00:03:04,710
‫The Voronoi functioning will return an object with methods for drawing the diagram, we must make a

40
00:03:04,710 --> 00:03:06,840
‫distinction between the two objects.

41
00:03:07,140 --> 00:03:14,070
‫The Deloney from function returns, an object with coordinates we can use to draw the Voronoi diagram.

42
00:03:14,400 --> 00:03:17,310
‫We have the option of drawing the diagram ourselves.

43
00:03:17,490 --> 00:03:19,650
‫However, that would be a lot of work.

44
00:03:20,130 --> 00:03:23,650
‫Alternatively, we can let D3 draw it for us.

45
00:03:23,820 --> 00:03:30,380
‫We can tell D3 to generate some functions for a drawing the Voronoi diagram by calling the Voronoi function.

46
00:03:30,840 --> 00:03:35,660
‫This function will draw their diagram based on the coordinates for only Delaunay object.

47
00:03:36,180 --> 00:03:37,680
‫Let's long list variable.

48
00:03:39,920 --> 00:03:42,170
‫In the browser, refresh the page.

49
00:03:44,510 --> 00:03:46,850
‫The console will output an object.

50
00:03:47,090 --> 00:03:51,500
‫It will contain additional information to help it generate the Voronoi diagram.

51
00:03:51,770 --> 00:03:57,550
‫As for the functions for drawing the Voronoi diagram, they can be found under the Proteau object.

52
00:03:57,830 --> 00:04:01,670
‫We will be using one of these functions to draw the Voronoi diagram.

53
00:04:01,910 --> 00:04:03,530
‫Let's switch back to the editor.

54
00:04:06,000 --> 00:04:08,890
‫We can begin to draw the Voronoi diagram.

55
00:04:08,910 --> 00:04:12,270
‫There are a couple of things we'll be doing to accomplish this task.

56
00:04:12,570 --> 00:04:19,350
‫First, we're going to create a group to contain the Voronoi diagram, not required, but recommended

57
00:04:19,350 --> 00:04:20,970
‫to keep things organized.

58
00:04:21,090 --> 00:04:26,970
‫Second, we are going to draw the partitions of the Voronoi diagram as a reminder.

59
00:04:27,090 --> 00:04:30,300
‫A partition is the shapes that make up the diagram.

60
00:04:30,570 --> 00:04:36,030
‫In total, we are going to be drawing three hundred and sixty five partitions because they are three

61
00:04:36,030 --> 00:04:38,010
‫hundred and sixty five items in the data.

62
00:04:38,010 --> 00:04:40,850
‫Set a partition for each item in the data.

63
00:04:41,190 --> 00:04:46,060
‫Once all partitions are drawn, we should see a Voronoi diagram in the document.

64
00:04:46,530 --> 00:04:51,830
‫Another reason we're going to be drawing each partition is to listen for events on that partition.

65
00:04:52,110 --> 00:04:57,500
‫The whole purpose of drawing a Voronoi diagram is to improve the user experience.

66
00:04:57,780 --> 00:05:04,440
‫We're going to show the tooltip if a reader is hovering over a partition, the tooltip will appear above

67
00:05:04,440 --> 00:05:07,120
‫the dot that's inside the respective partition.

68
00:05:07,680 --> 00:05:08,740
‫Let's get started.

69
00:05:08,940 --> 00:05:12,630
‫We are going to draw partitions inside the container selection.

70
00:05:12,960 --> 00:05:16,080
‫We will call the append function to create a group.

71
00:05:18,570 --> 00:05:24,120
‫Next, we will call the select all function to select the path elements in this group.

72
00:05:26,590 --> 00:05:30,760
‫Afterward, we will change the data function with the data passed in.

73
00:05:33,240 --> 00:05:39,590
‫Since there aren't path elements inside the group, the entire data will be put into the entire selection,

74
00:05:39,900 --> 00:05:44,100
‫we will begin inserting them into the document by calling the joint function.

75
00:05:44,400 --> 00:05:47,550
‫The name of the element will be drawing is called path.

76
00:05:50,090 --> 00:05:56,570
‫The reason we're using the half element is because it's the element D3 recommends, the coordinates

77
00:05:56,570 --> 00:05:59,040
‫it generates are meant for the path element.

78
00:05:59,390 --> 00:06:03,740
‫We can begin to add the coordinates and attributes to the path element.

79
00:06:04,190 --> 00:06:07,640
‫The first attribute will add is the stroke attribute.

80
00:06:07,910 --> 00:06:09,470
‫Its value will be black.

81
00:06:11,890 --> 00:06:17,770
‫We are adding the stroke attribute to be able to view the diagram once we can confirm the diagram is

82
00:06:17,770 --> 00:06:18,560
‫being drawn.

83
00:06:18,700 --> 00:06:20,530
‫We will want to hide it from the reader.

84
00:06:20,840 --> 00:06:24,670
‫Next, we are going to set the film property to transparence.

85
00:06:27,250 --> 00:06:33,910
‫By default, the feel of the path element will be black, this will make it difficult to view the diagram.

86
00:06:34,300 --> 00:06:36,370
‫We are going to make these feel opaque.

87
00:06:36,370 --> 00:06:43,360
‫To be able to view the diagram clearly afterward will set the D attribute to an arrow function that

88
00:06:43,360 --> 00:06:45,460
‫accepts the data and index.

89
00:06:47,880 --> 00:06:53,130
‫We are going to return the Voronoi render cell function with the index passed in.

90
00:06:56,680 --> 00:07:02,710
‫We are calling the render cell function to return the coordinates that the path element needs to draw

91
00:07:02,710 --> 00:07:03,520
‫the partition.

92
00:07:03,910 --> 00:07:08,680
‫This function has one argument, which is the index of the partition it should draw.

93
00:07:09,100 --> 00:07:12,490
‫These three already has the data for drawing the partition.

94
00:07:12,770 --> 00:07:15,680
‫It just needs to know which partition it should draw.

95
00:07:15,940 --> 00:07:17,940
‫We are providing that to the function.

96
00:07:18,460 --> 00:07:19,930
‫Let's refresh the page.

97
00:07:22,370 --> 00:07:28,470
‫The Voronoi diagram is appearing on the page, but it does not have the correct dimensions.

98
00:07:28,730 --> 00:07:34,290
‫That's to be expected since we didn't provide it with the dimensions of the chart in the console.

99
00:07:34,400 --> 00:07:37,350
‫Let's inspect the Voronoi object for a moment.

100
00:07:37,790 --> 00:07:41,560
‫There are two properties called X, Max and WiMAX.

101
00:07:41,780 --> 00:07:44,540
‫They don't contain the correct dimensions of our charge.

102
00:07:44,870 --> 00:07:48,440
‫We'll need to update these two properties before drawing the cells.

103
00:07:48,620 --> 00:07:53,300
‫Switch back to the ED below the Voronoi variable declaration.

104
00:07:53,330 --> 00:07:58,550
‫We will set the X max property to the dimensions container with property.

105
00:08:01,150 --> 00:08:06,070
‫The WiMAX property will be set to the dimensions, container, height, property.

106
00:08:08,570 --> 00:08:14,780
‫That should fix our issue, let's refresh the page again this time the overall anois diagram has the

107
00:08:14,780 --> 00:08:15,920
‫correct dimensions.

108
00:08:16,040 --> 00:08:19,170
‫As you can see, the partitions are covering each dot.

109
00:08:19,550 --> 00:08:23,210
‫This gives us an idea of how much room each dot can take.

110
00:08:23,480 --> 00:08:27,080
‫We can move on to updating the partitions with the hover events.

111
00:08:27,320 --> 00:08:29,570
‫Go back to the ED below.

112
00:08:29,600 --> 00:08:32,270
‫We are going to comment about the stroke attribute.

113
00:08:32,450 --> 00:08:35,330
‫We don't need to see the Voronoi diagram anymore.

114
00:08:35,450 --> 00:08:37,240
‫It's too distracting to the reader.

115
00:08:37,280 --> 00:08:38,930
‫We wanted to be invisible.

116
00:08:39,320 --> 00:08:44,810
‫After commenting out the stroke attribute, the Voronoi diagram will be invisible to the reader.

117
00:08:45,090 --> 00:08:50,780
‫Let's move on to moving the events over from the circle selection to the path selection.

118
00:08:51,140 --> 00:08:54,440
‫Grab both the mouse enter and mouse live events.

119
00:09:09,140 --> 00:09:13,250
‫We don't need to make any further changes, the code will continue to work.

120
00:09:13,490 --> 00:09:16,780
‫It's because the data is joined to the half elements.

121
00:09:16,970 --> 00:09:19,730
‫It's the same data we joins to the circles.

122
00:09:19,970 --> 00:09:22,750
‫Therefore, our code should continue to work.

123
00:09:23,030 --> 00:09:24,410
‫Let's refresh the page.

124
00:09:24,830 --> 00:09:28,300
‫The Voronoi diagram is not viewable, but it is there.

125
00:09:28,490 --> 00:09:32,840
‫If I were to hover my mouse over any of the dots, the tooltip will appear.

126
00:09:33,140 --> 00:09:35,210
‫We can move the mouse around the dots.

127
00:09:35,510 --> 00:09:40,040
‫The tooltip will appear as long as the mouse is within the dots proximity.

128
00:09:40,340 --> 00:09:45,620
‫With the help of a Voronoi diagram, we were able to enhance the user experience.

129
00:09:45,630 --> 00:09:51,830
‫The reader doesn't have to be precise with their mouse hovers in the next lecture will make one final

130
00:09:51,830 --> 00:09:55,280
‫adjustment to the scatterplot before considering it complete.

