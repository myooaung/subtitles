1
00:00:00,270 --> 00:00:05,520
‫In this lecture, we're going to need to figure out where to display the tooltip at the moment, we

2
00:00:05,520 --> 00:00:07,540
‫know where the reader is covering their mouths.

3
00:00:07,710 --> 00:00:10,730
‫However, we don't know where to display the tooltip.

4
00:00:10,980 --> 00:00:13,540
‫We don't even know which point the reader wants to view.

5
00:00:13,830 --> 00:00:19,890
‫The only information we have at our disposal is the X and Y coordinates of the mouse we're going to

6
00:00:19,890 --> 00:00:23,780
‫use by sector to help us figure out where to display the tooltip.

7
00:00:24,090 --> 00:00:30,570
‫A bi sector is a function that allows us to locate where to insert an element into an array to maintain

8
00:00:30,570 --> 00:00:32,310
‫a sordid array there.

9
00:00:32,310 --> 00:00:33,990
‫An incredibly useful feature.

10
00:00:34,230 --> 00:00:37,030
‫Before we discuss how a BI sector will help us.

11
00:00:37,140 --> 00:00:40,210
‫Let's look at an example of how a BI sector works.

12
00:00:40,650 --> 00:00:42,990
‫Let's say we had an array of five numbers.

13
00:00:43,200 --> 00:00:46,140
‫The numbers in this array range from 10 to 50.

14
00:00:46,440 --> 00:00:48,960
‫We may want to push a new number into the array.

15
00:00:49,290 --> 00:00:53,560
‫For example, we may want to push the number thirty five into the array.

16
00:00:53,880 --> 00:00:56,610
‫One solution would be to call the push function.

17
00:00:56,940 --> 00:01:00,000
‫The number would get inserted onto the end of the array.

18
00:01:00,420 --> 00:01:04,770
‫JavaScript will create a new array with our number inserted at the end.

19
00:01:05,250 --> 00:01:08,700
‫This solution works, but it leaves our array unsorted.

20
00:01:08,910 --> 00:01:12,030
‫The number thirty five should be between 30 and 40.

21
00:01:12,330 --> 00:01:14,870
‫We can fix this problem by sorting the array.

22
00:01:15,150 --> 00:01:18,090
‫That's a completely valid and acceptable solution.

23
00:01:18,670 --> 00:01:20,370
‫There is an alternative solution.

24
00:01:20,550 --> 00:01:26,310
‫Instead of inserting the number at the end of the array, we can insert the number at the correct position.

25
00:01:26,610 --> 00:01:31,830
‫JavaScript has a function for inserting element at a specific index called Splice.

26
00:01:32,160 --> 00:01:37,520
‫However, the splice function does not automatically insert the element in the correct location.

27
00:01:37,830 --> 00:01:40,950
‫We need to tell this function where to insert the element.

28
00:01:41,400 --> 00:01:46,060
‫Before we do, we need to figure out where the number of thirty five fits into this array.

29
00:01:46,440 --> 00:01:50,250
‫This is where the D3 bisect function comes into play.

30
00:01:50,580 --> 00:01:54,930
‫The basic function has two arguments the array and the element.

31
00:01:55,230 --> 00:02:00,810
‫D3 will attempt to search for an index where the number can be inserted while keeping the array sorted.

32
00:02:01,110 --> 00:02:04,200
‫The return value by this function will be the index.

33
00:02:04,560 --> 00:02:07,110
‫In this example, the index will be three.

34
00:02:07,440 --> 00:02:12,900
‫After storing the index, we're inserting the number into the array by calling the spliffs function

35
00:02:13,230 --> 00:02:19,020
‫will be returned to an array where the number of thirty five is inserted after thirty, but before 40

36
00:02:19,440 --> 00:02:20,810
‫the array is still sorted.

37
00:02:20,880 --> 00:02:22,530
‫We don't need to sort the array.

38
00:02:24,050 --> 00:02:30,620
‫Currently, I'm in the console of the developer tools for our project inside the console I've pasted

39
00:02:30,620 --> 00:02:35,640
‫in the code I had written in this line, if I run this code, an array will be returned.

40
00:02:35,810 --> 00:02:36,830
‫It's not relevant.

41
00:02:36,980 --> 00:02:38,990
‫I'm going to log the numbers array.

42
00:02:41,500 --> 00:02:47,470
‫After logging this array, it's clear that the number was inserted at the correct location, the array

43
00:02:47,470 --> 00:02:50,280
‫asserted in ascending order, fantastic.

44
00:02:50,470 --> 00:02:53,950
‫So you may be thinking, how will this function solve our issue?

45
00:02:54,100 --> 00:02:55,200
‫That's a great question.

46
00:02:55,630 --> 00:02:58,350
‫We need to figure out where to insert the tooltip.

47
00:02:58,600 --> 00:03:01,450
‫The only information we have are the coordinates.

48
00:03:01,600 --> 00:03:07,050
‫However, we do have scales that convert the values in our data into coordinate values.

49
00:03:07,300 --> 00:03:11,770
‫We can reverse engineer our scales to help us find where to display the tooltip.

50
00:03:12,070 --> 00:03:16,210
‫It's going to be a bit complex, but we will walk through it step by step.

51
00:03:16,870 --> 00:03:20,830
‫Firstly, we need to decide what coordinates the tooltip will need.

52
00:03:21,130 --> 00:03:24,340
‫We want to position the tool tip directly over the line.

53
00:03:24,640 --> 00:03:29,790
‫If I hover my mouse on the chart, the mouse's X and Y coordinates are logged.

54
00:03:30,040 --> 00:03:36,220
‫If we think about it, we already have the X coordinate for the tooltip as we move the mouse over the

55
00:03:36,220 --> 00:03:37,800
‫x axis of the chart.

56
00:03:37,930 --> 00:03:39,310
‫So should the tool tip.

57
00:03:39,640 --> 00:03:41,950
‫The tooltip should be aligned with the mouse.

58
00:03:42,460 --> 00:03:49,120
‫The coordinate we don't have is the Y coordinate the tool tips y coordinate should be set to a value

59
00:03:49,120 --> 00:03:51,610
‫that positions the tooltip above the line.

60
00:03:51,940 --> 00:03:52,920
‫That's what we need.

61
00:03:53,230 --> 00:03:58,050
‫Let's switch over to the editor to begin figuring out how we can get the Y coordinate.

62
00:03:58,630 --> 00:04:00,970
‫We will be working in the mouse move event.

63
00:04:00,970 --> 00:04:04,570
‫We applied to the transparent rectangle in the function.

64
00:04:04,600 --> 00:04:06,760
‫We're going to remove the console statement.

65
00:04:09,280 --> 00:04:15,490
‫Here's how we'll get the Y coordinate the line chart is based on two values, the date and the closing

66
00:04:15,490 --> 00:04:16,010
‫price.

67
00:04:16,300 --> 00:04:19,390
‫These two values are grouped as objects in the array.

68
00:04:19,720 --> 00:04:22,690
‫We know that the date is drawn across the x axis.

69
00:04:22,900 --> 00:04:28,660
‫If we can reverse the X coordinate of the mouse position to the date, we will find the object in the

70
00:04:28,660 --> 00:04:30,200
‫array that has the same date.

71
00:04:30,550 --> 00:04:35,800
‫We will then grab the closing price, which we can run through the Windscale function to help find the

72
00:04:35,800 --> 00:04:40,790
‫Y coordinate for the tooltip after creating the mouse position variable.

73
00:04:40,870 --> 00:04:43,270
‫We will define a variable called date.

74
00:04:43,630 --> 00:04:46,990
‫Its value will be the X scale invert function.

75
00:04:49,550 --> 00:04:56,480
‫These scale functions don't have to be used as functions, we can use them as objects to scales, transform

76
00:04:56,480 --> 00:04:59,090
‫values in our data, set into coordinates.

77
00:04:59,270 --> 00:05:04,910
‫In some cases, we may need to reverse the coordinate into their original values in the data set.

78
00:05:05,270 --> 00:05:07,390
‫The inverse function allows you to do that.

79
00:05:07,580 --> 00:05:09,320
‫It's available on every scale.

80
00:05:10,290 --> 00:05:13,650
‫We can pass in the following mouse position zero.

81
00:05:16,110 --> 00:05:22,290
‫The invert function accepts the value we want to reverse, we're passing in the first value in the array

82
00:05:22,290 --> 00:05:25,340
‫because that's where the mouse's XCOR and stored.

83
00:05:25,590 --> 00:05:26,880
‫Let's long the value.

84
00:05:29,200 --> 00:05:31,330
‫In the browser, refresh the page.

85
00:05:33,690 --> 00:05:39,570
‫If we were to position our mouses on the left side of the charge, the console will log dates that start

86
00:05:39,570 --> 00:05:40,720
‫in two thousand seven.

87
00:05:41,040 --> 00:05:41,950
‫That's perfect.

88
00:05:42,180 --> 00:05:44,880
‫The data set also starts in two thousand seven.

89
00:05:45,090 --> 00:05:51,470
‫As we drag our mouses over the x axis, the dates slowly increment up to twenty twelve.

90
00:05:51,810 --> 00:05:56,970
‫It doesn't matter where we drag the mouse, we will always get the correct date that corresponds to

91
00:05:56,970 --> 00:05:58,260
‫the point on the line.

92
00:05:58,770 --> 00:06:04,500
‫The next step is to search through our data set array to find the date that matches the date we reversed

93
00:06:04,500 --> 00:06:06,120
‫from the mouse's coordinates.

94
00:06:06,420 --> 00:06:09,090
‫This is where the bisect function comes into play.

95
00:06:09,420 --> 00:06:12,720
‫Back in the ed, we're going to remove the console statement.

96
00:06:15,150 --> 00:06:18,310
‫Next, we will create a variable called index.

97
00:06:18,510 --> 00:06:21,780
‫Its value will be the three bisect function.

98
00:06:24,290 --> 00:06:30,350
‫The bisect function has two arguments, the array and the element we want to insert, we're going to

99
00:06:30,350 --> 00:06:33,290
‫pass in the data set array and date variable.

100
00:06:35,700 --> 00:06:39,420
‫Let's lock the index in the browser, refresh the page.

101
00:06:41,800 --> 00:06:43,990
‫Let's hover our mouse over the chart.

102
00:06:44,290 --> 00:06:50,020
‫The council is logging the same value, it doesn't matter where we drag the mouse, the value remains

103
00:06:50,020 --> 00:06:50,560
‫the same.

104
00:06:50,830 --> 00:06:51,850
‫That's a problem.

105
00:06:51,850 --> 00:06:57,820
‫We should be getting a unique index every time we're getting the same index because D3 doesn't know

106
00:06:57,820 --> 00:07:00,040
‫how to compare the objects in the array.

107
00:07:00,580 --> 00:07:03,180
‫Previously, we worked with a simple array.

108
00:07:03,400 --> 00:07:04,960
‫It was an array of numbers.

109
00:07:05,140 --> 00:07:07,480
‫Comparing an array of numbers is easy.

110
00:07:07,750 --> 00:07:11,260
‫On the other hand, comparing objects requires some work.

111
00:07:11,500 --> 00:07:15,640
‫We need to tell D3 three which properties it should be comparing the date with.

112
00:07:16,060 --> 00:07:22,270
‫Unfortunately, the bisect function doesn't allow us to customize the comparison we're going to need

113
00:07:22,270 --> 00:07:24,660
‫to create a custom by sector function.

114
00:07:25,120 --> 00:07:29,470
‫We'll look at how we can define a custom biosecure function in the next lecture.

