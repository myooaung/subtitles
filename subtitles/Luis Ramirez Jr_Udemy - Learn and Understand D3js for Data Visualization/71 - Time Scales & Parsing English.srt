1
00:00:00,510 --> 00:00:06,120
‫In this lecture, we're going to draw the line chart in the script file, most of the code has been

2
00:00:06,120 --> 00:00:07,950
‫prepared at the bottom.

3
00:00:07,980 --> 00:00:12,210
‫We're creating a scale for the y axis, but not for the x axis.

4
00:00:12,480 --> 00:00:15,050
‫It's because the X axis will measure the date.

5
00:00:15,420 --> 00:00:18,990
‫We haven't had the opportunity to discuss how to scale time.

6
00:00:19,290 --> 00:00:22,740
‫D3 introduces two scales for scaling time.

7
00:00:23,040 --> 00:00:25,440
‫We'll be looking at both scales in this lecture.

8
00:00:26,040 --> 00:00:28,560
‫Both scales are based on the linear scale.

9
00:00:28,740 --> 00:00:32,430
‫They can transform continuous data into continuous data.

10
00:00:32,640 --> 00:00:35,360
‫In general, time is considered continuous.

11
00:00:35,610 --> 00:00:39,250
‫Therefore, we'll need a scale that can work with continuous data.

12
00:00:39,570 --> 00:00:44,730
‫What makes the scales special is that they can work with dates instead of regular numbers.

13
00:00:46,810 --> 00:00:52,930
‫We are going to create the skill for the x axis, we will be working in this script file at the bottom

14
00:00:52,930 --> 00:00:56,740
‫of the draw function to find a variable called X scale.

15
00:01:00,560 --> 00:01:04,190
‫Its value will be the three dot scale time function.

16
00:01:06,610 --> 00:01:12,220
‫The scale and function will generate a scale that can transform dates into numbers, the don't mean

17
00:01:12,220 --> 00:01:14,350
‫must be the range of dates it should expect.

18
00:01:14,650 --> 00:01:19,540
‫We will change the domain function with the D3 extent function past in.

19
00:01:22,040 --> 00:01:27,800
‫And the first argument of the extend function we will pass and the data as for the second argument,

20
00:01:27,800 --> 00:01:30,200
‫we will pass and the accessor function.

21
00:01:32,630 --> 00:01:38,930
‫The accessor function will return the date, we can use the extent function to find the oldest and latest

22
00:01:38,930 --> 00:01:41,230
‫dates, it's flexible in that regard.

23
00:01:41,480 --> 00:01:44,060
‫It's not exclusively for working with numbers.

24
00:01:44,210 --> 00:01:45,850
‫It can work with dates easily.

25
00:01:46,130 --> 00:01:49,340
‫Let's change the range function with an array past in.

26
00:01:51,810 --> 00:01:55,990
‫The line will be drawn across the entire width of the container in our image.

27
00:01:56,160 --> 00:01:59,690
‫We want the starting point for the line to start on the left side.

28
00:01:59,970 --> 00:02:05,430
‫The ending point for the line should be on the right side of the container, therefore will pass in

29
00:02:05,430 --> 00:02:08,700
‫zero and the dimensions container with property.

30
00:02:11,140 --> 00:02:17,150
‫Our scale is ready, or so it seems, there's one problem with our scale to find out the problem.

31
00:02:17,230 --> 00:02:21,930
‫Let's log a value that has been transformed from this scale below.

32
00:02:21,970 --> 00:02:23,920
‫We will create a log statement.

33
00:02:26,370 --> 00:02:34,350
‫The first value will log as a return value by the scale function we will pass in the following X accessor

34
00:02:34,350 --> 00:02:35,610
‫data set zero.

35
00:02:38,020 --> 00:02:40,730
‫We are accessing the first object in the array.

36
00:02:40,930 --> 00:02:43,760
‫We want to test if it's able to scale this stage.

37
00:02:44,110 --> 00:02:48,190
‫We are also going to log the property without passing it through the scale.

38
00:02:50,630 --> 00:02:56,450
‫We want to compare the values side by side, let's refresh the page in the browser with the console

39
00:02:56,450 --> 00:02:56,990
‫opens.

40
00:02:59,390 --> 00:03:05,630
‫In the console, we'll find that the scale has transformed the property into an undefined value, it

41
00:03:05,630 --> 00:03:10,640
‫may be possible that we're passing in the wrong value, but that doesn't seem to be the case because

42
00:03:10,640 --> 00:03:12,720
‫the date is being logged next to it.

43
00:03:12,950 --> 00:03:14,250
‫So what's the problem?

44
00:03:14,390 --> 00:03:20,660
‫The problem was with our date in JavaScript, there's an official date object for storing dates.

45
00:03:20,960 --> 00:03:24,880
‫D3 expects the dates in our data to date objects.

46
00:03:25,040 --> 00:03:28,160
‫However, the dates are being stored as strings.

47
00:03:28,410 --> 00:03:34,550
‫If we want to be able to transform dates into numbers, we'll need to transform the dates from strings

48
00:03:34,550 --> 00:03:35,930
‫into date objects.

49
00:03:36,200 --> 00:03:41,590
‫In the resource section of this lecture, I provide a link to a package called Time Format.

50
00:03:42,050 --> 00:03:44,030
‫I've talked about this package before.

51
00:03:44,180 --> 00:03:47,300
‫It's capable of formatting the date from a date object.

52
00:03:47,570 --> 00:03:51,200
‫Another feature of this package is being able to parse strings.

53
00:03:51,590 --> 00:03:55,090
‫It can convert a value from a string to a date object.

54
00:03:55,250 --> 00:03:58,550
‫We were going to be using this feature to help us solve our issue.

55
00:03:58,760 --> 00:04:00,200
‫Switch back to the editor.

56
00:04:02,570 --> 00:04:08,870
‫Scroll to the top of the function, we're going to update our accessor functions by updating the accessor

57
00:04:08,870 --> 00:04:09,590
‫functions.

58
00:04:09,650 --> 00:04:14,360
‫Everything else will get updated since the scales depend on the access or functions.

59
00:04:14,660 --> 00:04:19,900
‫We need to pass the date from a string into an object about the access or functions.

60
00:04:20,000 --> 00:04:22,790
‫We will define a variable called pass date.

61
00:04:25,290 --> 00:04:28,860
‫Its value will be the three time parse function.

62
00:04:31,450 --> 00:04:37,390
‫The time parties function will return a function that can pass a string, it'll return a date object

63
00:04:37,390 --> 00:04:43,270
‫based on the string, we need to tell this function the format it should expect the date to be in will

64
00:04:43,270 --> 00:04:50,050
‫pass in the following as a string percent Y minus percent M minus %s d.

65
00:04:52,610 --> 00:04:59,240
‫The string we passed in is the format our dates are formatted in the characters, we're using our placeholders.

66
00:04:59,480 --> 00:05:04,240
‫D3 will interpret this as the year, followed by the month, followed by the day.

67
00:05:04,550 --> 00:05:09,470
‫You can view the different placeholders on the documentation page I linked to earlier.

68
00:05:10,010 --> 00:05:11,210
‫The parser is ready.

69
00:05:11,360 --> 00:05:17,330
‫We're going to update the x axis or function by wrapping the argument with the PA state function.

70
00:05:19,810 --> 00:05:26,110
‫In addition, we're going to update the wine accessor function by wrapping the argument with the president

71
00:05:26,230 --> 00:05:26,860
‫function.

72
00:05:29,360 --> 00:05:34,940
‫We're wrapping the argument with the parsing function because we want to perform a type conversion,

73
00:05:35,270 --> 00:05:37,240
‫the price will be stored as a string.

74
00:05:37,520 --> 00:05:40,040
‫We want to make sure it's parsed as a number.

75
00:05:40,340 --> 00:05:42,830
‫The percent function will help us with that.

76
00:05:43,070 --> 00:05:45,470
‫Let's refresh the page to view the results.

77
00:05:47,940 --> 00:05:54,670
‫D3 is outputting zero, the reason it outputs zero is because the data is already in chronological order.

78
00:05:54,990 --> 00:05:57,750
‫The first item in the array is the oldest date.

79
00:05:58,080 --> 00:06:00,780
‫Therefore, it'll be transformed to zero.

80
00:06:00,960 --> 00:06:03,300
‫It's the expected value that's great.

81
00:06:03,430 --> 00:06:06,120
‫Our scale works thanks to D three.

82
00:06:06,150 --> 00:06:08,100
‫We can efficiently work with dates.

83
00:06:08,370 --> 00:06:10,590
‫We didn't have to do much to get this working.

84
00:06:10,590 --> 00:06:12,260
‫Besides swapping scales.

85
00:06:12,540 --> 00:06:15,780
‫I did mention there are two scales for working with dates.

86
00:06:15,990 --> 00:06:17,550
‫The time scale is one of them.

87
00:06:17,730 --> 00:06:19,680
‫Let's look at the other scale quickly.

88
00:06:19,830 --> 00:06:21,390
‫Switch back to the editor.

89
00:06:21,900 --> 00:06:28,770
‫We are going to update the X scale function replaces scale time function with these scale UTC function.

90
00:06:31,220 --> 00:06:37,250
‫The UTC scale does the same thing as the time scale, it will transform a date into a number.

91
00:06:37,490 --> 00:06:40,550
‫The difference is that it can work with UTC dates.

92
00:06:40,760 --> 00:06:45,170
‫The time scale will assume the dates are related to the user's local time zone.

93
00:06:45,560 --> 00:06:48,190
‫Stocks can be bought and sold all over the world.

94
00:06:48,380 --> 00:06:51,260
‫We may have users who are in different time zones.

95
00:06:51,380 --> 00:06:57,320
‫If that's the case, we should try to stick to one specific time zone instead of using the user's time

96
00:06:57,320 --> 00:07:02,710
‫zone for consistency, the UTC scale is much more suitable for our case.

97
00:07:02,960 --> 00:07:09,500
‫We are going to stick with the UTC scale in the next lecture will begin drawing the line with our scales.

98
00:07:09,710 --> 00:07:11,370
‫Before ending this lecture.

99
00:07:11,390 --> 00:07:13,970
‫I'm going to comment about the console statement.

