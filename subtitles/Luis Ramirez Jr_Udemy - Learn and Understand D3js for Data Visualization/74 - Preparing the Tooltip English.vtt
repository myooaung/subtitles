WEBVTT
﻿1
00:00:00.300 --> 00:00:06.030
‫In this lecture, we're going to create the tooltip for the line chart, it's difficult to determine

2
00:00:06.030 --> 00:00:08.070
‫the prices for individual dates.

3
00:00:08.280 --> 00:00:11.360
‫The axes help, but they don't paint the full picture.

4
00:00:11.670 --> 00:00:15.900
‫Our readers may want to see the price of a stock sold on a specific date.

5
00:00:16.230 --> 00:00:20.030
‫Creating a tooltip for a line chart will come with some challenges.

6
00:00:20.280 --> 00:00:22.860
‫We'll discuss those challenges as they arise.

7
00:00:23.280 --> 00:00:25.280
‫There are a few things we're going to need.

8
00:00:25.500 --> 00:00:31.020
‫First, we need to add some UI elements that will change based on where the reader is hovering.

9
00:00:31.290 --> 00:00:36.960
‫We're going to need an element for the tooltip will also add a dot that will be positioned over the

10
00:00:36.960 --> 00:00:39.740
‫line to show the reader where they are on the line.

11
00:00:39.960 --> 00:00:41.430
‫Let's add these elements.

12
00:00:41.760 --> 00:00:43.470
‫We'll start with the tooltip.

13
00:00:43.800 --> 00:00:46.350
‫Open the index HTML file.

14
00:00:46.440 --> 00:00:51.810
‫We're going to create the tooltip with plain XML inside the chart element.

15
00:00:51.810 --> 00:00:54.990
‫Create a div tag with the ID of tooltip.

16
00:00:57.400 --> 00:01:03.640
‫Next, create two div tags inside the tooltip element with the classes, price and date.

17
00:01:06.160 --> 00:01:12.620
‫The elements have already been styled, I've provided some default styles in these style access file.

18
00:01:12.910 --> 00:01:18.280
‫We can move on to selecting these elements with these three, switch over to the script file.

19
00:01:20.700 --> 00:01:26.880
‫Scroll to the section of code where we create the SFG and container selections, we're going to add

20
00:01:26.880 --> 00:01:28.800
‫another selection for the tooltip.

21
00:01:29.130 --> 00:01:31.830
‫We'll store it in a variable called Tooltip.

22
00:01:32.100 --> 00:01:35.220
‫Its value will be the three select function.

23
00:01:37.850 --> 00:01:41.000
‫The selector for the element is hash tooltip.

24
00:01:43.510 --> 00:01:48.970
‫We're going to create another selection for the dots, the name of the variable will be called Tooltip

25
00:01:48.970 --> 00:01:49.430
‫Dot.

26
00:01:49.720 --> 00:01:52.940
‫Its value will be the container append function.

27
00:01:53.170 --> 00:01:54.790
‫We're going to open the circle.

28
00:01:57.410 --> 00:02:02.870
‫There are three attributes we're going to set, the radius attribute will be set to five.

29
00:02:05.360 --> 00:02:09.950
‫The film attribute will be set to hash F.C. eight, seven, eight, one.

30
00:02:12.370 --> 00:02:17.830
‫We'll add a stroke to help the circle stand out more, the stroke attribute will be set to black.

31
00:02:20.240 --> 00:02:23.580
‫Then the stroke with property will be set to two.

32
00:02:26.120 --> 00:02:29.280
‫The opacity versus property will be set to zero.

33
00:02:29.540 --> 00:02:31.640
‫We'll use the style function this time.

34
00:02:34.020 --> 00:02:37.500
‫Lastly, we'll set the point your events property to none.

35
00:02:42.310 --> 00:02:47.730
‫We don't want the DOT to cancel the event if we hover over it, our UI elements are ready.

36
00:02:47.950 --> 00:02:52.030
‫We don't need to preview the document because the elements are hidden from view.

37
00:02:52.360 --> 00:02:55.230
‫The tooltip selection is hidden with access.

38
00:02:55.510 --> 00:02:56.990
‫The same goes for the dots.

39
00:02:57.220 --> 00:02:59.080
‫Let's move on to making them appear.

40
00:02:59.290 --> 00:03:00.520
‫We want them to appear.

41
00:03:00.520 --> 00:03:04.870
‫If the mouse is hovered over the chart, scroll to where we draw the line.

42
00:03:05.080 --> 00:03:08.110
‫We're going to add the event listeners to this function.

43
00:03:08.380 --> 00:03:11.890
‫We're going to change to event listeners with the on function.

44
00:03:14.400 --> 00:03:18.810
‫The first on function will listen for the touch mouse and mouse move events.

45
00:03:21.180 --> 00:03:24.660
‫The second on function will listen for the mouse leave event.

46
00:03:27.170 --> 00:03:32.960
‫The first on function will help us detect when the mouse is hovering over the line, there are two things

47
00:03:32.960 --> 00:03:34.640
‫worth noting about this function.

48
00:03:34.940 --> 00:03:38.840
‫We can listen to multiple events by separating them with spaces.

49
00:03:39.140 --> 00:03:43.030
‫The touch mouse event will help us detect movement on touch screens.

50
00:03:43.370 --> 00:03:45.290
‫We want to enable the tool tip.

51
00:03:45.290 --> 00:03:50.480
‫If a reader is on a mobile device, it's a common feature in most stock trading apps.

52
00:03:50.900 --> 00:03:55.070
‫The seconds on function will help us detect when the mouse leaves the line.

53
00:03:55.340 --> 00:03:56.840
‫We want to hide the elements.

54
00:03:56.840 --> 00:04:02.720
‫When the reader is moving away from the line, we're going to pass in function handlers to both events.

55
00:04:02.960 --> 00:04:05.600
‫We will also accept the event object.

56
00:04:10.680 --> 00:04:16.620
‫We'll start with the first event the tooltip should appear above the point the reader is hovering over

57
00:04:16.890 --> 00:04:17.580
‫the event.

58
00:04:17.580 --> 00:04:20.480
‫Object will give us information about the mouse event.

59
00:04:20.820 --> 00:04:21.810
‫We're going to need it.

60
00:04:21.810 --> 00:04:26.630
‫If we want to grab the exact location of the mouse, we could look for it ourselves.

61
00:04:26.820 --> 00:04:31.520
‫However, D3 comes with a function for capturing this information for us.

62
00:04:31.860 --> 00:04:35.190
‫We are going to define a variable called mouse position.

63
00:04:35.520 --> 00:04:38.730
‫Its value will be the three pointer function.

64
00:04:41.280 --> 00:04:46.950
‫The point your function will return the coordinates of the mouse's current position, we need to provide

65
00:04:46.950 --> 00:04:48.820
‫it with information about the event.

66
00:04:49.110 --> 00:04:51.510
‫We're going to pass in the event object.

67
00:04:54.030 --> 00:04:59.710
‫D3 will search for the coordinates within this object, for us, it will return them as an array.

68
00:05:00.030 --> 00:05:02.000
‫There is an optional second argument.

69
00:05:02.280 --> 00:05:04.250
‫We can tell these three the target.

70
00:05:04.500 --> 00:05:10.290
‫This argument is incredibly helpful because these three will return the coordinates relative to the

71
00:05:10.290 --> 00:05:12.010
‫target element we pass in.

72
00:05:12.510 --> 00:05:14.000
‫I'll explain more in a moment.

73
00:05:14.220 --> 00:05:16.290
‫Let's pass on the this keyword.

74
00:05:18.720 --> 00:05:20.760
‫Next, we'll log the values.

75
00:05:23.090 --> 00:05:26.600
‫In the browser, refresh the page with the console opens.

76
00:05:29.080 --> 00:05:33.390
‫If I were to hover my mouse over the line, the console would output an array.

77
00:05:33.700 --> 00:05:37.540
‫The array contains two values the X and Y coordinates.

78
00:05:37.810 --> 00:05:41.650
‫The coordinates are relative to the container, not the image.

79
00:05:41.950 --> 00:05:48.400
‫For example, if I hover over the point closest to the left side, the console outputs a value near

80
00:05:48.400 --> 00:05:48.940
‫zero.

81
00:05:51.370 --> 00:05:57.130
‫Keep in mind, the line is being drawn inside the container, the container is smaller than the SVG

82
00:05:57.130 --> 00:05:57.700
‫image.

83
00:05:57.880 --> 00:06:00.040
‫We've applied margins on all sides.

84
00:06:00.160 --> 00:06:06.490
‫If we were to switch over to the elements panel, we can use this tool to view the space occupied by

85
00:06:06.490 --> 00:06:08.620
‫the SPG image and container.

86
00:06:11.240 --> 00:06:18.020
‫The container occupies a different space than the image the coordinates we're receiving from D3 are

87
00:06:18.020 --> 00:06:19.450
‫relative to the container.

88
00:06:19.790 --> 00:06:23.340
‫It's not relative to the image nor the document.

89
00:06:23.630 --> 00:06:26.650
‫That's why we're receiving values that are closer to zero.

90
00:06:26.960 --> 00:06:32.630
‫That's perfect because it'll help us position the tooltip above the point the reader is hovering over.

91
00:06:33.140 --> 00:06:34.790
‫There's one issue with the event.

92
00:06:35.030 --> 00:06:37.670
‫The line is very small with hundreds of points.

93
00:06:37.910 --> 00:06:41.730
‫The event is limited only when the mouse is hovered over the line.

94
00:06:42.110 --> 00:06:43.810
‫This precision is tedious.

95
00:06:43.910 --> 00:06:47.080
‫If we were on a mobile device, this would be even harder.

96
00:06:47.360 --> 00:06:52.340
‫I think it would be better if the reader could hover anywhere on the chart to trigger the tool tip for

97
00:06:52.340 --> 00:06:53.860
‫a better user experience.

98
00:06:54.290 --> 00:07:00.440
‫We can resolve our issue by adding an invisible element over the chart will add the event listeners

99
00:07:00.440 --> 00:07:01.710
‫to this hidden element.

100
00:07:02.030 --> 00:07:04.220
‫Let's try implementing this solution.

101
00:07:04.340 --> 00:07:08.300
‫Switch back to the editor at the bottom of the draw function.

102
00:07:08.300 --> 00:07:10.280
‫Add a comment that says tooltip.

103
00:07:12.700 --> 00:07:19.150
‫We will create a new element by calling the container a pen function, the name of the element is called

104
00:07:19.150 --> 00:07:19.930
‫Rectangle.

105
00:07:22.440 --> 00:07:28.050
‫We're going to set the width and height attributes to their respective values and the dimensions object.

106
00:07:35.970 --> 00:07:42.090
‫We want the rectangle to occupy the same space as the container, we don't need to move the shape because

107
00:07:42.090 --> 00:07:44.150
‫it's being drawn inside the container.

108
00:07:44.430 --> 00:07:46.830
‫It'll inherit the coordinates of the group.

109
00:07:47.090 --> 00:07:52.560
‫Next, we're going to set the opacity, says property to zero with the style function.

110
00:07:55.130 --> 00:07:57.390
‫The shape will be drawn over the container.

111
00:07:57.560 --> 00:08:03.500
‫We don't want it to be visible, otherwise the reader won't be able to view the line after setting the

112
00:08:03.500 --> 00:08:09.890
‫opacity, will add the events, scroll to where we added the events, cut both event listeners from

113
00:08:09.890 --> 00:08:11.750
‫the line over to the rectangle.

114
00:08:18.340 --> 00:08:25.100
‫Switch back to the page this time we can hover our mouse anywhere on the chart, the events get emitted.

115
00:08:25.390 --> 00:08:29.320
‫This is proven by the fact that the console is logging the coordinates.

116
00:08:29.590 --> 00:08:35.140
‫The coordinates are the same as last time because the rectangle is being drawn inside the container

117
00:08:35.140 --> 00:08:36.340
‫similar to the line.

118
00:08:36.790 --> 00:08:41.560
‫Grainge in the next lecture will begin positioning the tool tip over the line.

119
00:08:41.800 --> 00:08:45.820
‫It's going to be a bit tricky, but as always, I'll guide you through it all.

120
00:08:45.940 --> 00:08:47.380
‫See you in the next lecture.

