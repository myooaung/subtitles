WEBVTT
﻿1
00:00:00.240 --> 00:00:06.120
‫In this lecture, we are going to learn about margins, margins are a great way to add spacing to a

2
00:00:06.130 --> 00:00:06.600
‫chart.

3
00:00:06.840 --> 00:00:11.580
‫It gives our chart breathing room to better understand why margins may be necessary.

4
00:00:11.700 --> 00:00:18.050
‫Let's look at how margins are used in documents, newsletter, articles, books, contracts.

5
00:00:18.060 --> 00:00:21.480
‫Almost any kind of document you can think of have margins.

6
00:00:21.720 --> 00:00:25.120
‫Margins are the space between the text and the edge of the paper.

7
00:00:25.440 --> 00:00:28.640
‫This image shows an example of what margins look like.

8
00:00:28.920 --> 00:00:32.150
‫There are several reasons why margins are added to documents.

9
00:00:32.550 --> 00:00:36.660
‫One of the reasons for adding margins is to prevent text from sitting on the edge.

10
00:00:36.810 --> 00:00:39.030
‫It looks weird and can be difficult to read.

11
00:00:39.300 --> 00:00:43.800
‫Spacing helps a lot with making text readable for similar reasons.

12
00:00:43.800 --> 00:00:50.040
‫We will want to add spacing to our chart as we've learned shapes drawn outside of an image or hidden

13
00:00:50.040 --> 00:00:50.670
‫from view.

14
00:00:50.940 --> 00:00:52.350
‫We don't want that to happen.

15
00:00:52.620 --> 00:00:57.140
‫One way of preventing a shape from being cut off is by adding margins to our chart.

16
00:00:57.420 --> 00:01:00.800
‫So even if a shape is on the edge, it won't be cut off.

17
00:01:02.370 --> 00:01:08.490
‫Let's look at an example in the app file, we will draw a circle at the bottom of the function called

18
00:01:08.490 --> 00:01:10.710
‫the SFG append method.

19
00:01:13.210 --> 00:01:16.420
‫The name of the element for drawing a circle is called Circle.

20
00:01:18.890 --> 00:01:24.620
‫The dimensions of this circle can be added by defining the radius attribute, we will change the attribute

21
00:01:24.620 --> 00:01:25.070
‫method.

22
00:01:25.430 --> 00:01:28.520
‫The value for the radius attribute will be 15.

23
00:01:31.030 --> 00:01:34.210
‫Without making further changes, let's view the page.

24
00:01:36.640 --> 00:01:42.230
‫The circle appears in the top left corner because the default coordinates for shape's are zero zero.

25
00:01:42.520 --> 00:01:44.200
‫It's not being completely shown.

26
00:01:44.440 --> 00:01:47.690
‫It's because the shape is drawn outside the bounds of the image.

27
00:01:48.220 --> 00:01:49.910
‫That's not what we want to happen.

28
00:01:50.320 --> 00:01:52.910
‫We can prevent this issue by adding margins.

29
00:01:52.960 --> 00:01:54.850
‫Let's work on adding margins.

30
00:01:54.850 --> 00:02:00.370
‫And our editor, we are going to write the values for the images in the dimensions variable in this

31
00:02:00.370 --> 00:02:02.710
‫object at a property called margin.

32
00:02:05.180 --> 00:02:11.030
‫We will add margins for each side of the chart, this property will be an object with four properties,

33
00:02:11.180 --> 00:02:13.580
‫top, bottom, left and right.

34
00:02:13.940 --> 00:02:16.070
‫Each side will have a margin of 50.

35
00:02:18.620 --> 00:02:20.310
‫The margin doesn't need to be high.

36
00:02:20.510 --> 00:02:24.140
‫We are using 50 because our scatterplot will have small circles.

37
00:02:24.410 --> 00:02:27.860
‫We don't need a lot of margin space to prevent sheeps from being cut off.

38
00:02:28.040 --> 00:02:30.200
‫I think 50 will work for our chart.

39
00:02:30.740 --> 00:02:34.170
‫The next thing we need to do is apply these margins to our charge.

40
00:02:34.460 --> 00:02:36.110
‫The question is how?

41
00:02:37.630 --> 00:02:44.020
‫The dimensions of the image is 800 by 800, we can't resize the image with the margins because we would

42
00:02:44.020 --> 00:02:45.890
‫still encounter the same problem.

43
00:02:46.330 --> 00:02:49.110
‫Instead, we need to create another container.

44
00:02:49.450 --> 00:02:52.420
‫The container will be smaller than the SVG image.

45
00:02:52.540 --> 00:02:54.880
‫It will also need to be centered in the image.

46
00:02:55.300 --> 00:03:01.590
‫The containers dimensions are based on the original dimensions, minus the margins by creating a container,

47
00:03:01.720 --> 00:03:04.340
‫if we draw a shape inside this container.

48
00:03:04.510 --> 00:03:10.480
‫These shapes will stay within the bounds of the container if a shape happens to a partially appear outside

49
00:03:10.480 --> 00:03:12.130
‫the bounds of the inner container.

50
00:03:12.310 --> 00:03:16.000
‫It won't get cut off because it's still in the SVG image.

51
00:03:16.360 --> 00:03:19.300
‫The only exception is if the shape is very large.

52
00:03:21.560 --> 00:03:29.750
‫There is an element in SFG called G g, a short for group, the G element does not draw a shape unlike

53
00:03:29.750 --> 00:03:31.300
‫other SVG elements.

54
00:03:31.550 --> 00:03:35.030
‫The purpose of the G element is to group the shapes together.

55
00:03:35.360 --> 00:03:41.160
‫One of the interesting features of the G element is being able to apply properties directly to the G

56
00:03:41.180 --> 00:03:41.770
‫elements.

57
00:03:42.140 --> 00:03:45.390
‫The children of the G element will inherit its properties.

58
00:03:45.680 --> 00:03:48.830
‫Let's look at how that works in the app file.

59
00:03:48.860 --> 00:03:52.840
‫We are going to create a new selection after the SVG selection.

60
00:03:53.150 --> 00:03:56.210
‫We will call the SPG append method.

61
00:03:56.510 --> 00:03:59.660
‫The name of the element we want to insert is called G.

62
00:04:02.350 --> 00:04:09.850
‫The element will act as a container whenever we draw shapes, we will inserted into this container similar

63
00:04:09.850 --> 00:04:15.030
‫to other shapes, the G element will be positioned at the coordinates zero zero.

64
00:04:15.400 --> 00:04:18.390
‫We are going to move the container by using the margins.

65
00:04:18.850 --> 00:04:20.200
‫There's just one problem.

66
00:04:20.350 --> 00:04:24.280
‫The G element does not support the X and Y attributes.

67
00:04:24.460 --> 00:04:30.190
‫If we were to apply these attributes to this element, they will not be passed down to shape's drawn

68
00:04:30.190 --> 00:04:31.400
‫inside the container.

69
00:04:31.810 --> 00:04:36.480
‫Luckily, there is an alternative attribute we can use to move the G element.

70
00:04:36.880 --> 00:04:42.730
‫We will change the attribute method, the name of the attribute we are going to use that is called transform.

71
00:04:45.180 --> 00:04:49.870
‫The transform attribute works similar to the excess transform property.

72
00:04:50.190 --> 00:04:53.630
‫It allows us to manipulate an element with a set of functions.

73
00:04:53.880 --> 00:04:59.700
‫You should be familiar with the transform property for success, since it's a prerequisite for taking

74
00:04:59.700 --> 00:05:00.420
‫this course.

75
00:05:00.810 --> 00:05:03.600
‫One of the functions we can use is called translate.

76
00:05:03.930 --> 00:05:07.650
‫The translate function will move a shape from its original spot.

77
00:05:07.920 --> 00:05:12.930
‫In the second argument, we will pass in the translate function with template strings.

78
00:05:15.420 --> 00:05:21.630
‫The translate function has two arguments, there are the X and Y coordinates to move the shape we will

79
00:05:21.630 --> 00:05:29.580
‫pass in the dimension margin left and dimension margin top properties, respectively.

80
00:05:32.160 --> 00:05:38.790
‫It's optional to apply this as an attribute they transform property, can be applied as excess property.

81
00:05:39.150 --> 00:05:44.890
‫In some examples you may find developers use the style method instead of the attribute method.

82
00:05:45.210 --> 00:05:46.490
‫There isn't a difference.

83
00:05:46.500 --> 00:05:47.820
‫It's whatever you prefer.

84
00:05:48.450 --> 00:05:53.060
‫We are going to store this selection by assigning it to a variable called container.

85
00:05:53.310 --> 00:05:55.470
‫I will use Setara for short.

86
00:05:58.000 --> 00:06:03.340
‫Lastly, let's update our circle by replacing the selection with the container selection.

87
00:06:05.860 --> 00:06:07.360
‫Switched back to the browser.

88
00:06:09.880 --> 00:06:13.240
‫The circle is fully visible, do you understand what's happening?

89
00:06:13.270 --> 00:06:16.510
‫We will check the elements panel and the developer tools.

90
00:06:16.990 --> 00:06:19.770
‫D3 was able to generate a rogue element.

91
00:06:19.990 --> 00:06:23.110
‫It has the transform attribute applied to it.

92
00:06:23.500 --> 00:06:28.270
‫The properties from the G element will be passed onto the children placed inside it.

93
00:06:28.660 --> 00:06:32.080
‫The circle element will be moved from its original position.

94
00:06:32.660 --> 00:06:37.450
‫We don't have to worry about the shape appearing out of bounds on the left and top edges.

95
00:06:37.450 --> 00:06:44.020
‫Unless the shape is larger than a 50 pixels for this project, we won't be drawing a shape larger than

96
00:06:44.020 --> 00:06:44.890
‫this size.

97
00:06:45.130 --> 00:06:46.150
‫We should be safe.

98
00:06:46.420 --> 00:06:51.490
‫If you are drawing shapes larger than the margins, you should consider increasing the margins.

99
00:06:52.030 --> 00:06:53.980
‫This solution isn't complete yet.

100
00:06:54.220 --> 00:06:58.480
‫It's still possible for elements to get cut off on the right and bottom edges.

101
00:06:58.810 --> 00:07:01.660
‫This is a problem we will address in future lectures.

102
00:07:01.930 --> 00:07:03.910
‫For now, this solution works.

