WEBVTT
﻿1
00:00:00.530 --> 00:00:05.250
‫In this lecture, we are going to learn how to perform a request for a CSV file.

2
00:00:05.420 --> 00:00:08.450
‫It's a similar process to requesting JSON files.

3
00:00:08.630 --> 00:00:14.720
‫However, there are some discrepancies we should be aware of when working with CSC files before we get

4
00:00:14.720 --> 00:00:15.510
‫into the code.

5
00:00:15.620 --> 00:00:18.050
‫Let's talk about what a C is V file is.

6
00:00:18.230 --> 00:00:21.180
‫CACP stands for comma separated values.

7
00:00:21.380 --> 00:00:23.300
‫It's a text file with values.

8
00:00:23.480 --> 00:00:25.700
‫Each value is separated with a comma.

9
00:00:25.910 --> 00:00:26.540
‫That's it.

10
00:00:26.750 --> 00:00:30.830
‫CSV files are commonly used by spreadsheet software like Excel.

11
00:00:31.250 --> 00:00:34.260
‫We have two options for working with CSC files.

12
00:00:34.310 --> 00:00:38.280
‫We can open them in a text editor or we can use a spreadsheet program.

13
00:00:38.540 --> 00:00:44.810
‫There are two programs I recommend for working with C ASV files, Google Sheets and Microsoft Excel.

14
00:00:45.320 --> 00:00:50.990
‫For this course, we won't need to use a spreadsheet program because creating CSV files is simple.

15
00:00:50.990 --> 00:00:55.970
‫Once you see what they look like, these programs can be helpful when dealing with large amounts of

16
00:00:55.970 --> 00:00:56.360
‫data.

17
00:00:56.600 --> 00:00:58.790
‫Let's get started in our project.

18
00:00:58.820 --> 00:01:02.240
‫We are going to create a file called Data ESV.

19
00:01:04.800 --> 00:01:09.850
‫The extension for a file is not CSFI in our CSV file.

20
00:01:09.900 --> 00:01:14.190
‫We can add our data by typing in each value with a comma to separate them.

21
00:01:14.500 --> 00:01:17.540
‫Let's create the same data we had in the JSON file.

22
00:01:17.790 --> 00:01:19.680
‫We will add the following numbers.

23
00:01:19.980 --> 00:01:23.280
‫10, 20, 30, 40, 50.

24
00:01:25.820 --> 00:01:29.880
‫ARCC file is ready, the next step is to load it in our file.

25
00:01:30.080 --> 00:01:35.990
‫Switch over to the script, file in our get data function, we will comment about the data variable.

26
00:01:38.540 --> 00:01:41.820
‫In its place, we will create a variable called data.

27
00:01:42.140 --> 00:01:46.850
‫Its value will be the three CSC function with the await keyword.

28
00:01:49.450 --> 00:01:55.860
‫The CSB function returns a promise with the data, it has one argument, which is the path to the file

29
00:01:56.080 --> 00:01:59.080
‫we will pass in the data dorkiest the file name.

30
00:02:01.570 --> 00:02:04.120
‫Let's use the council and the developer tools.

31
00:02:06.470 --> 00:02:12.580
‫In the console, we will find an array, naturally, the JavaScript language doesn't understand C as

32
00:02:12.590 --> 00:02:13.370
‫V files.

33
00:02:13.700 --> 00:02:19.890
‫D3 has taken the time to parse and format our CSC file before returning it in the array.

34
00:02:20.000 --> 00:02:22.280
‫We will find an array called columns.

35
00:02:22.520 --> 00:02:24.720
‫The columns array will contain our data.

36
00:02:24.950 --> 00:02:29.330
‫It's very mysterious as to why D three has formatted our data like this.

37
00:02:30.140 --> 00:02:32.670
‫We can create tables in another tab.

38
00:02:32.690 --> 00:02:34.280
‫I have Google Sheets opened.

39
00:02:34.670 --> 00:02:37.280
‫Spreadsheets are basically made up of a table.

40
00:02:37.490 --> 00:02:39.220
‫Tables have columns and rows.

41
00:02:39.380 --> 00:02:43.930
‫Believe it or not, tables can be exported to CSV files and vice versa.

42
00:02:44.480 --> 00:02:48.230
‫To better understand, I'm going to add some data to this spreadsheet.

43
00:02:50.570 --> 00:02:56.900
‫In the first row, I have two columns called Name and Age, on the second row are some values on the

44
00:02:56.900 --> 00:02:57.410
‫menu.

45
00:02:57.440 --> 00:03:01.430
‫We can download this data by going to file download CCSVI.

46
00:03:03.880 --> 00:03:06.580
‫I'm going to open this file in my editor quickly.

47
00:03:08.340 --> 00:03:15.090
‫The CSP file contains mydata, the name and age columns are on the first line, the values are on the

48
00:03:15.090 --> 00:03:15.830
‫second line.

49
00:03:16.020 --> 00:03:21.870
‫If you think about it, it sort of looks like a table or at least you can see how it can be transformed

50
00:03:21.870 --> 00:03:22.740
‫into a table.

51
00:03:23.100 --> 00:03:25.020
‫Every new line represents a row.

52
00:03:25.260 --> 00:03:28.130
‫The first value in each row can be grouped as a column.

53
00:03:28.410 --> 00:03:30.990
‫The same goes for the second value in each line.

54
00:03:31.500 --> 00:03:33.840
‫D3 three will look at our CSC file.

55
00:03:33.990 --> 00:03:37.200
‫The values on the first row are considered the column names.

56
00:03:37.440 --> 00:03:40.670
‫It'll create an array called columns with these values.

57
00:03:40.830 --> 00:03:42.460
‫But what about the other lines?

58
00:03:42.510 --> 00:03:43.470
‫Let's find out.

59
00:03:43.740 --> 00:03:48.270
‫I'm going to copy this code and paste it into the data csv file.

60
00:03:50.730 --> 00:03:53.250
‫Let's refresh the page to view the contents.

61
00:03:55.560 --> 00:03:57.340
‫Things are different this time around.

62
00:03:57.510 --> 00:04:00.610
‫We still have the columns of appearing in the console.

63
00:04:00.840 --> 00:04:06.010
‫In addition, we have an object for each subsequent row in the CSC file.

64
00:04:06.030 --> 00:04:08.000
‫These three will create an object.

65
00:04:08.280 --> 00:04:12.110
‫The object will be filled with the comma separated values on that line.

66
00:04:12.360 --> 00:04:16.430
‫If we look inside this object, we will find the values from the second row.

67
00:04:16.950 --> 00:04:20.400
‫The property names for each value corresponds with the column.

68
00:04:20.400 --> 00:04:25.440
‫The value can be found under this entire array was formatted for us by these three.

69
00:04:25.650 --> 00:04:29.600
‫It organized our data based on the contents of the CSV file.

70
00:04:29.760 --> 00:04:33.450
‫As you can see, the CSP function is extremely helpful.

71
00:04:33.990 --> 00:04:36.870
‫We're finished covering the D three library.

72
00:04:37.060 --> 00:04:42.110
‫It can do so much more, but we will mainly be working with Jason NCSA files.

73
00:04:42.360 --> 00:04:45.000
‫It is possible to perform raw requests.

74
00:04:45.270 --> 00:04:47.550
‫That's not something we'll look at in this section.

75
00:04:47.760 --> 00:04:50.130
‫I mostly recommend using defense function.

76
00:04:50.130 --> 00:04:56.820
‫If you ever need to perform a request to an API that concludes this section in the next one, we're

77
00:04:56.820 --> 00:04:58.790
‫going to start creating some charts.

78
00:04:58.950 --> 00:05:00.060
‫I hope you're excited.

79
00:05:00.210 --> 00:05:01.110
‫I'll see you there.

