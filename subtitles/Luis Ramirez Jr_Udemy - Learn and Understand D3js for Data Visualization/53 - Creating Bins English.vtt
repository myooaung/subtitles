WEBVTT
﻿1
00:00:00.330 --> 00:00:07.110
‫In this lecture, we are going to create Binz with the D3 bean function, it's going to help us format

2
00:00:07.110 --> 00:00:07.750
‫our data.

3
00:00:08.040 --> 00:00:09.930
‫Let's pick up where we left off.

4
00:00:10.110 --> 00:00:15.430
‫We are going to write the code for the bins below the X scale variable in each script file.

5
00:00:15.960 --> 00:00:19.320
‫First, we are going to create a variable called Binn.

6
00:00:19.950 --> 00:00:23.160
‫Its value will be the D3 bin function.

7
00:00:25.670 --> 00:00:30.090
‫The three Dobbyn function will return a function that can format data.

8
00:00:30.290 --> 00:00:36.740
‫This allows us to reduce the function for more than one data set before we pass our data onto the function,

9
00:00:36.860 --> 00:00:40.190
‫the function will need to know more information about our data.

10
00:00:40.490 --> 00:00:43.700
‫First, we are going to change a function called domain.

11
00:00:46.280 --> 00:00:52.400
‫The bin function needs to know the smallest and largest values in our data set, a.k.a. the domain,

12
00:00:52.760 --> 00:00:58.850
‫we already provided the domain to the X scale function we can pass in the same code repass into the

13
00:00:58.850 --> 00:01:01.260
‫domain function of the X scale function.

14
00:01:01.550 --> 00:01:04.670
‫However, there's an alternative solution available.

15
00:01:04.850 --> 00:01:08.180
‫We will pass in the X scale domain function.

16
00:01:10.690 --> 00:01:17.230
‫The scale function doesn't have to be used as a function, it's also an object where we can grab information

17
00:01:17.230 --> 00:01:24.310
‫about the current scale rather than recalculating the domain we can call the domain function to return

18
00:01:24.310 --> 00:01:26.170
‫the domain used for the scale.

19
00:01:26.470 --> 00:01:32.140
‫We're using the same domain because the bin function will help us spread the rectangles across the x

20
00:01:32.140 --> 00:01:32.810
‫axis.

21
00:01:33.250 --> 00:01:37.300
‫Therefore, we should provide it with the domain for the X axis.

22
00:01:37.780 --> 00:01:43.450
‫The domain function will return an array where the first item is the lowest number and the second item

23
00:01:43.450 --> 00:01:44.530
‫is the highest number.

24
00:01:44.770 --> 00:01:47.320
‫The next function will chain is called value.

25
00:01:49.950 --> 00:01:55.800
‫The value function will tell these three which property it should group the data with, the metric we're

26
00:01:55.800 --> 00:01:58.110
‫drawing with this chart is the humidity.

27
00:01:58.410 --> 00:02:02.650
‫We should tell these three how it should access the humidity within our data.

28
00:02:02.940 --> 00:02:08.520
‫Luckily, we already have a function that does that we will pass and the X accessor function.

29
00:02:10.760 --> 00:02:12.780
‫There's one last function we will change.

30
00:02:12.890 --> 00:02:14.180
‫It's called threshold.

31
00:02:16.600 --> 00:02:23.440
‫The threshold function allows us to specify how many bins or groups D3 should return, this function

32
00:02:23.440 --> 00:02:24.390
‫expects a number.

33
00:02:24.610 --> 00:02:25.660
‫Let's try 10.

34
00:02:25.960 --> 00:02:31.620
‫One thing to keep in mind is that the value for the threshold function is taken in as a recommendation.

35
00:02:31.960 --> 00:02:35.080
‫We may not see the data distributed into ten groups.

36
00:02:35.410 --> 00:02:40.500
‫These three will try its best to create as many groups close to our value as possible.

37
00:02:41.140 --> 00:02:42.280
‫The function is ready.

38
00:02:42.460 --> 00:02:47.160
‫We can run our data through it to format the data below the bin variable.

39
00:02:47.200 --> 00:02:50.620
‫We will create a new variable called New Data Set.

40
00:02:53.010 --> 00:02:57.240
‫Its value will be the bin function with the data set variable passed in.

41
00:02:59.820 --> 00:03:06.000
‫We will be returned a new data set, let's long the data set, along with the original data set in a

42
00:03:06.000 --> 00:03:11.850
‫console statement we will pass in an object with two properties called original and new.

43
00:03:12.210 --> 00:03:15.510
‫Their values will be set to their respective data sets.

44
00:03:17.970 --> 00:03:20.360
‫Let's use the browser to check out the results.

45
00:03:22.840 --> 00:03:29.860
‫We will find ways to erase the array under the original property is our original data set the array

46
00:03:29.860 --> 00:03:32.750
‫under the new property is the formatted data set.

47
00:03:33.310 --> 00:03:36.490
‫One thing you'll notice immediately is the length of the array.

48
00:03:36.730 --> 00:03:42.040
‫The length of the array is eight, which is around the value we passed into the threshold function.

49
00:03:42.310 --> 00:03:44.500
‫Let's check out the formatted data set.

50
00:03:45.010 --> 00:03:47.400
‫Each item in the array is another array.

51
00:03:47.650 --> 00:03:50.380
‫D3 three refers to these arrays as bins.

52
00:03:50.560 --> 00:03:55.300
‫The bins contain a list of objects if we were to inspect any of the objects.

53
00:03:55.330 --> 00:04:01.240
‫It doesn't matter which we'll find the weather data we previously had, the property names and their

54
00:04:01.240 --> 00:04:03.110
‫values remain unchanged.

55
00:04:03.220 --> 00:04:07.240
‫It's important to understand that D3 didn't transform our data.

56
00:04:07.460 --> 00:04:12.120
‫It formatted the original data into an array more suitable for a histogram.

57
00:04:12.610 --> 00:04:16.060
‫We don't have to worry about losing any of our original data.

58
00:04:16.330 --> 00:04:18.990
‫The data has been grouped based on the humidity.

59
00:04:19.270 --> 00:04:24.640
‫The question is how does D three determine which objects should be placed into which group?

60
00:04:24.940 --> 00:04:28.630
‫Let's minimize the object for a moment, but keep the array opened.

61
00:04:31.160 --> 00:04:37.070
‫The two objects are not the only thing that can be found in the arrays, there are two properties called

62
00:04:37.160 --> 00:04:38.930
‫zero and X one.

63
00:04:39.290 --> 00:04:45.450
‫These properties will show us the range for the corresponding group, for example, in the first array.

64
00:04:45.590 --> 00:04:52.370
‫The zero property is set to zero point two five and the X one property is set to zero point three.

65
00:04:52.790 --> 00:04:58.610
‫This means the data found inside the array will have a humidity between zero point to five and zero

66
00:04:58.610 --> 00:04:59.290
‫point three.

67
00:04:59.690 --> 00:05:03.680
‫We can look inside any of the objects in this array to confirm this.

68
00:05:06.180 --> 00:05:10.680
‫The first object in the array has a humidity of zero point to five.

69
00:05:13.070 --> 00:05:19.460
‫It's within the range specified by the group, thanks to G three, we were able to format our data into

70
00:05:19.460 --> 00:05:20.120
‫groups.

71
00:05:20.450 --> 00:05:23.220
‫We can use this new data set to draw up a chart.

72
00:05:23.510 --> 00:05:27.110
‫Let's try using this new data switch back to the ED.

73
00:05:29.510 --> 00:05:32.080
‫I'm going to comment about the long statement.

74
00:05:34.470 --> 00:05:40.200
‫First, we are going to update the data we're joining to the selection instead of passing in the data

75
00:05:40.200 --> 00:05:43.920
‫set variable will pass him the new data set variable.

76
00:05:46.350 --> 00:05:51.800
‫We're swapping the data set because we want the rectangles to be drawn based on the formatted data set,

77
00:05:52.110 --> 00:05:55.010
‫we should have fewer rectangles than what we had before.

78
00:05:55.350 --> 00:06:00.900
‫We will encounter errors because the attributes are accessing properties that aren't in the same location

79
00:06:00.900 --> 00:06:01.500
‫anymore.

80
00:06:01.800 --> 00:06:04.790
‫We'll need to update the x and width attributes.

81
00:06:05.280 --> 00:06:08.330
‫We will focus on the other attributes in another lecture.

82
00:06:08.580 --> 00:06:10.680
‫We'll start with the X attribute.

83
00:06:10.920 --> 00:06:18.780
‫We're going to replace the return value of the X attribute with the following X scale d x zero.

84
00:06:22.130 --> 00:06:28.550
‫We're using the X scale function to transform the value we're transforming the zero property that can

85
00:06:28.550 --> 00:06:33.950
‫be found in each bean, we aren't using the values that can be found in any of the objects.

86
00:06:34.130 --> 00:06:40.310
‫Keep in mind, the X zero and X one properties are based on the values for the humidity.

87
00:06:40.670 --> 00:06:46.070
‫The X zero property represents the lowest possible value that can be found within the bin.

88
00:06:46.650 --> 00:06:50.360
‫We're going to use it to position the rectangle on the x axis.

89
00:06:50.540 --> 00:06:53.780
‫Before we do, we're running it through the X scale function.

90
00:06:54.080 --> 00:06:58.390
‫The X scale function we created will transform any human as you value.

91
00:06:58.940 --> 00:07:00.350
‫Let's move on to the whip.

92
00:07:00.620 --> 00:07:09.430
‫We will update the return value for the width attribute to the following D three max zero x scale D

93
00:07:09.560 --> 00:07:14.390
‫dot x one minus X scale d x zero.

94
00:07:16.940 --> 00:07:19.790
‫We're trying to calculate the width of each rectangle.

95
00:07:19.970 --> 00:07:24.020
‫The calculation is being wrapped with the D3 max function.

96
00:07:24.380 --> 00:07:30.200
‫The calculation we have may return a number lower than zero, which is an invalid value for a width.

97
00:07:30.470 --> 00:07:37.250
‫To prevent that, we're using the D3 max function to return the highest value in this array, in this

98
00:07:37.250 --> 00:07:37.680
‫array.

99
00:07:37.760 --> 00:07:39.680
‫There are two possible values.

100
00:07:39.800 --> 00:07:43.960
‫It can either be zero or the value calculated from our calculation.

101
00:07:44.300 --> 00:07:47.690
‫This prevents the whip from being set to a value below zero.

102
00:07:47.960 --> 00:07:50.440
‫Let's take a closer look at our calculation.

103
00:07:50.690 --> 00:07:57.530
‫We're trying to calculate an appropriate width or using the X1 and zero properties by subtracting them.

104
00:07:57.890 --> 00:08:00.510
‫This will give us an appropriate width for the vase.

105
00:08:00.650 --> 00:08:02.120
‫Let's refresh the page.

106
00:08:04.560 --> 00:08:09.840
‫Here's what we'll have, it's great, but I think we should give the rectangle some room to breathe,

107
00:08:10.020 --> 00:08:12.250
‫in my opinion, they're too close together.

108
00:08:12.450 --> 00:08:14.070
‫Let's go back to the ED.

109
00:08:16.540 --> 00:08:22.990
‫Below, where we created the new data set, we will create a new variable called padding, its value

110
00:08:22.990 --> 00:08:23.740
‫will be one.

111
00:08:26.200 --> 00:08:30.730
‫Next, we will update the whip by subtracting the padding from the calculation.

112
00:08:33.220 --> 00:08:38.890
‫We are giving each bar one pixel of space, if you want to provide more breathing room to each bar,

113
00:08:39.010 --> 00:08:40.710
‫feel free to adjust the padding.

114
00:08:40.900 --> 00:08:42.340
‫Let's refresh the page.

115
00:08:44.680 --> 00:08:45.590
‫Fantastic.

116
00:08:45.640 --> 00:08:51.460
‫We've got a histogram, we will wrap things up in the next lecturer's by updating the other attributes

117
00:08:51.460 --> 00:08:52.780
‫and adding an axis.

