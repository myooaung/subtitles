1
00:00:00,360 --> 00:00:05,880
‫In this lecture, we are going to learn about how to make requests with these three, it's the final

2
00:00:05,880 --> 00:00:09,690
‫fundamental concept we'll learn before jumping into creating graphs.

3
00:00:09,990 --> 00:00:12,220
‫Data isn't always available in our scripts.

4
00:00:12,450 --> 00:00:16,090
‫It's possible we may need to grab data from an external resource.

5
00:00:16,560 --> 00:00:21,180
‫Generally speaking, there are three possible locations where your data can come from.

6
00:00:21,480 --> 00:00:24,050
‫Data can be hard coded in a JavaScript file.

7
00:00:24,330 --> 00:00:28,470
‫We can store data in files such as JSON or CSV files.

8
00:00:28,710 --> 00:00:32,100
‫Lastly, we can grab data from an API resource.

9
00:00:32,520 --> 00:00:35,630
‫The most common location to store data is in a file.

10
00:00:35,820 --> 00:00:40,770
‫The two most common formats for storing data are JSON and CSV files.

11
00:00:40,950 --> 00:00:44,190
‫We can also grab data from a text or XML file.

12
00:00:44,520 --> 00:00:45,470
‫For this course.

13
00:00:45,510 --> 00:00:50,850
‫We are going to be focusing on the two most popular formats JSON, NSV.

14
00:00:52,110 --> 00:00:57,570
‫In the resource section of this lecture, I provide a link to a library called D3 Fetch.

15
00:00:57,870 --> 00:01:04,290
‫This library contains a set of functions for performing HTP requests under the hood, and it uses the

16
00:01:04,290 --> 00:01:06,000
‫Fetch JavaScript function.

17
00:01:06,240 --> 00:01:09,690
‫It builds upon this function by providing a simpler API.

18
00:01:09,990 --> 00:01:12,580
‫It's capable of parsing data from a request.

19
00:01:12,840 --> 00:01:14,730
‫This makes our code more readable.

20
00:01:15,060 --> 00:01:18,510
‫However, you don't need to use the three functions.

21
00:01:18,720 --> 00:01:20,160
‫They're entirely optional.

22
00:01:20,370 --> 00:01:26,820
‫If you have another library you prefer for making requests, then by all means use it by default.

23
00:01:27,030 --> 00:01:31,020
‫D three Fetch library is included with the full version of D3.

24
00:01:31,350 --> 00:01:33,440
‫We don't need to do anything to install it.

25
00:01:33,900 --> 00:01:35,970
‫Let's get started with this library.

26
00:01:36,090 --> 00:01:41,100
‫We're going to look at how we can make a request for a case on file for these examples.

27
00:01:41,100 --> 00:01:43,080
‫We will be working in a new project.

28
00:01:43,380 --> 00:01:45,660
‫Point your editor to an empty directory.

29
00:01:45,900 --> 00:01:50,490
‫After moving directories, add a new file called Indexed HTML.

30
00:01:53,080 --> 00:01:58,720
‫Inside this file, we will scaffold a new template by typing H.M. Colon five.

31
00:02:01,210 --> 00:02:07,720
‫We will need D3 if we want to perform requests, we can quickly grab the CD and from the official site,

32
00:02:08,020 --> 00:02:11,890
‫copy the link and paste it into the body tag of the HTML file.

33
00:02:14,380 --> 00:02:18,700
‫Lastly, we will create a file called App Dot J.S..

34
00:02:21,070 --> 00:02:25,330
‫This file should be loaded after the D3 script in our HTML file.

35
00:02:30,760 --> 00:02:35,440
‫The next thing we'll need is a JSON file, JSON as a format for storing data.

36
00:02:35,650 --> 00:02:40,590
‫I'm going to assume you know what JSON is since it's closely tied with JavaScript.

37
00:02:40,900 --> 00:02:45,580
‫The syntax for JSON is the same syntax for objects and arrays in JavaScript.

38
00:02:45,850 --> 00:02:50,440
‫In our project, we will create a new file called Data JSON.

39
00:02:52,990 --> 00:02:59,050
‫Inside this file, we will add an array with the numbers 10, 20, 30, 40, 50.

40
00:03:01,480 --> 00:03:03,110
‫It's a very basic example.

41
00:03:03,280 --> 00:03:09,790
‫The goal is to load this file on our project, we can use D3 to perform the request for this file in

42
00:03:09,790 --> 00:03:10,820
‫our script file.

43
00:03:10,840 --> 00:03:14,260
‫We are going to call a function called D 3.0 and Jason.

44
00:03:16,750 --> 00:03:20,200
‫The Jason function will perform a request on our behalf.

45
00:03:20,440 --> 00:03:24,040
‫It's specifically designed for Jason philes in El Paso.

46
00:03:24,040 --> 00:03:25,560
‫Jason, file for us.

47
00:03:25,750 --> 00:03:28,480
‫That saves us time from having to do it ourselves.

48
00:03:28,930 --> 00:03:30,910
‫This function has one argument.

49
00:03:31,030 --> 00:03:34,960
‫It's the path to the file we will pass in the path to the data.

50
00:03:35,230 --> 00:03:36,250
‫Jason file.

51
00:03:38,710 --> 00:03:41,780
‫The value for this must be a valid HTP path.

52
00:03:42,070 --> 00:03:48,070
‫Luckily, thanks to the line of server extension, our Jason files can be served over HTP.

53
00:03:48,310 --> 00:03:51,520
‫If we weren't using an extension, we would receive an error.

54
00:03:51,790 --> 00:03:56,170
‫JavaScript request can't be made over the final protocol.

55
00:03:56,710 --> 00:04:02,410
‫The JSON function will return a promise we can only then function to handle their response.

56
00:04:04,800 --> 00:04:06,660
‫We will pass in an arrow function.

57
00:04:09,100 --> 00:04:14,170
‫The response from the promise will be the data retrieved from the file, we can accept the data as an

58
00:04:14,170 --> 00:04:14,770
‫argument.

59
00:04:17,170 --> 00:04:21,020
‫The data is already past, we can begin using it immediately.

60
00:04:21,250 --> 00:04:25,690
‫We will keep it simple by logging the data with the console log function.

61
00:04:28,490 --> 00:04:30,290
‫Let's view the page in the browser.

62
00:04:32,750 --> 00:04:34,370
‫Open the developer tools.

63
00:04:36,690 --> 00:04:42,540
‫Under the console panel, we will find an array, this array is the data from the JSON file.

64
00:04:42,750 --> 00:04:46,910
‫You can expect the contents to verify if it was requested successfully.

65
00:04:47,310 --> 00:04:48,930
‫The array is in the same format.

66
00:04:48,930 --> 00:04:55,560
‫We saved it as JSON is much more preferable format since we don't need to make changes to the data after

67
00:04:55,560 --> 00:04:56,340
‫requesting it.

68
00:04:56,910 --> 00:05:00,240
‫This is one way of verifying the contents of the request.

69
00:05:00,550 --> 00:05:04,400
‫There is another panel and the developer tools called the network panel.

70
00:05:04,770 --> 00:05:08,550
‫This panel will display the list of requests made by our project.

71
00:05:08,830 --> 00:05:15,540
‫It can tell us how long a request took, the type of request made and the response it's beneficial for

72
00:05:15,540 --> 00:05:16,140
‫any bugging.

73
00:05:16,410 --> 00:05:19,530
‫It can provide more information than logging the data.

74
00:05:19,960 --> 00:05:24,930
‫You may not see anything because the network panel will only display requests after you've opened the

75
00:05:24,930 --> 00:05:26,010
‫developer tools.

76
00:05:26,230 --> 00:05:29,190
‫You may need to refresh the page to view the requests.

77
00:05:29,640 --> 00:05:33,120
‫By default, the network panel will output every request.

78
00:05:33,240 --> 00:05:35,730
‫But we only care about our JSON request.

79
00:05:35,940 --> 00:05:38,430
‫We can filter the list at the top of the panel.

80
00:05:38,820 --> 00:05:45,660
‫We can select the X H.R. option to force the developer tools to filter the results for JavaScript requests.

81
00:05:46,140 --> 00:05:49,710
‫We will find our request for the data JSON file.

82
00:05:49,890 --> 00:05:52,960
‫If we click on it, a new window will appear on the right.

83
00:05:53,250 --> 00:05:56,580
‫This window will contain detailed information about the requests.

84
00:05:56,910 --> 00:05:58,920
‫There are a total of five sections.

85
00:05:59,070 --> 00:06:04,500
‫There are the headers, previews, response initiator and timing sections.

86
00:06:04,860 --> 00:06:06,830
‫We won't be exploring every section.

87
00:06:07,020 --> 00:06:10,860
‫The most important sections are the preview and response section.

88
00:06:11,130 --> 00:06:15,960
‫If we click on either section, we will be able to view the response from the request.

89
00:06:16,410 --> 00:06:18,240
‫There is a difference between the two.

90
00:06:18,540 --> 00:06:22,730
‫The preview section will render the response as if it was rendered by your browser.

91
00:06:23,070 --> 00:06:26,700
‫The response section will render the raw text of the response.

92
00:06:27,120 --> 00:06:30,390
‫If we click on the preview section, the code is formatted.

93
00:06:30,630 --> 00:06:32,100
‫We can even interact with it.

94
00:06:32,370 --> 00:06:37,200
‫The preview section will have syntax highlighting, which can make the response more readable.

95
00:06:37,680 --> 00:06:40,910
‫Under the response section, the interactivity is gone.

96
00:06:41,100 --> 00:06:43,080
‫This is the response in raw text.

97
00:06:43,230 --> 00:06:48,990
‫I prefer the preview section over the response section because it's much easier to read the response.

98
00:06:49,440 --> 00:06:54,240
‫We successfully made a request for our adjacent file before we in this lecture.

99
00:06:54,330 --> 00:06:57,420
‫There's one last adjustment I want to make to our code.

100
00:06:57,990 --> 00:07:00,570
‫Back in the script, we are using promises.

101
00:07:00,720 --> 00:07:01,770
‫In my opinion.

102
00:07:01,770 --> 00:07:06,030
‫I think async await syntax is much easier to read and write.

103
00:07:06,270 --> 00:07:07,590
‫You may prefer it to.

104
00:07:07,830 --> 00:07:12,960
‫Let's look at how we can convert our current implementation to use async await syntax.

105
00:07:13,230 --> 00:07:16,860
‫First, we will wrap our code with a function called Get Data.

106
00:07:20,600 --> 00:07:24,380
‫Next, we will add the async key word before the function name.

107
00:07:26,840 --> 00:07:29,430
‫This key word will make our function asynchronous.

108
00:07:29,580 --> 00:07:32,730
‫Afterward, we will create a variable called data.

109
00:07:33,050 --> 00:07:37,400
‫Its value will be the D3 Jason function we have and our function.

110
00:07:39,850 --> 00:07:42,880
‫We need to add the await key word before the function.

111
00:07:45,280 --> 00:07:49,390
‫Then we will move our console statement outside of you, then function.

112
00:07:51,800 --> 00:07:54,140
‫The then function can be removed entirely.

113
00:07:56,500 --> 00:08:00,610
‫Lastly, we can call the get data function to initiate the request.

114
00:08:03,040 --> 00:08:07,870
‫Great, we will experience the same behavior as before for the rest of this course.

115
00:08:07,900 --> 00:08:14,140
‫I am going to be using async await syntax if you prefer to change the then function.

116
00:08:14,170 --> 00:08:15,190
‫That's fine, too.

117
00:08:15,370 --> 00:08:20,410
‫In the next lecture, we will explore another type of file we can request with these three.

