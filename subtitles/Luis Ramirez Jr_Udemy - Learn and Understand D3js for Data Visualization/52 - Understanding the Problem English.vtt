WEBVTT
﻿1
00:00:00.560 --> 00:00:05.990
‫In this lecture, we're going to talk about the issue with our charge presently, there are three hundred

2
00:00:05.990 --> 00:00:07.870
‫and sixty five bars in the chart.

3
00:00:08.090 --> 00:00:09.990
‫Some of them overlap one another.

4
00:00:10.250 --> 00:00:12.250
‫That's not necessarily the problem.

5
00:00:12.410 --> 00:00:15.740
‫The problem is that each bar represents one value.

6
00:00:15.920 --> 00:00:19.280
‫Histograms are not charged that display a single value.

7
00:00:19.550 --> 00:00:23.300
‫The goal of a histogram is to show frequency within a data set.

8
00:00:25.370 --> 00:00:31.490
‫Let's look at our dummy example to understand how a histogram works again, in this example, we have

9
00:00:31.490 --> 00:00:34.880
‫an array of 10 numbers ranging from ten to one hundred.

10
00:00:35.330 --> 00:00:39.440
‫A histogram will show how many times a number appears with and arrange.

11
00:00:39.650 --> 00:00:42.140
‫The ranges are written on the x axis.

12
00:00:42.440 --> 00:00:45.410
‫The first bar is for the range of 10 to 30.

13
00:00:45.740 --> 00:00:49.820
‫The Y axis tells us how many numbers appear within a given range.

14
00:00:49.970 --> 00:00:54.080
‫According to the chart, five numbers appear between 10 and 30.

15
00:00:54.590 --> 00:00:59.750
‫A histogram is essentially showing us how frequent a value appears for each bucket.

16
00:01:00.140 --> 00:01:02.870
‫One thing you'll notice is how many buckets there are.

17
00:01:03.170 --> 00:01:07.530
‫There are a total of five buckets, despite there being 10 numbers in the array.

18
00:01:07.880 --> 00:01:12.260
‫Typically, there will always be less buckets than there are items in an array.

19
00:01:12.680 --> 00:01:14.900
‫So our problem becomes clear.

20
00:01:15.200 --> 00:01:16.760
‫The data is formatted.

21
00:01:16.880 --> 00:01:19.010
‫It's not that the data is incomplete.

22
00:01:19.250 --> 00:01:20.570
‫This is a common problem.

23
00:01:20.570 --> 00:01:21.560
‫You'll come across.

24
00:01:21.830 --> 00:01:27.030
‫The data you have can be complete, but it may not be formatted in the way you'd want it to.

25
00:01:27.590 --> 00:01:31.650
‫We're attempting to loop through three hundred and sixty five items in an array.

26
00:01:31.860 --> 00:01:34.740
‫However, that's not what we should be looping through.

27
00:01:34.990 --> 00:01:38.570
‫Instead, the data should be grouped based on frequencies.

28
00:01:38.840 --> 00:01:41.780
‫Then we want to be able to loop through the groups.

29
00:01:42.140 --> 00:01:47.550
‫That leads us to the question what is the preferred format for data when we draw histograms?

30
00:01:47.840 --> 00:01:50.210
‫Here is an example of what the data looks like.

31
00:01:50.210 --> 00:01:55.160
‫If it was correctly formatted on the left, we have the original data set.

32
00:01:55.490 --> 00:02:00.020
‫It's not formatted properly to be drawn as a histogram on the right.

33
00:02:00.050 --> 00:02:03.870
‫We have the same data formatted to be drawn as a histogram.

34
00:02:04.250 --> 00:02:06.710
‫Notice how the data remains unchanged.

35
00:02:06.890 --> 00:02:09.870
‫We still have the same numbers in the formatted version.

36
00:02:10.160 --> 00:02:12.170
‫This is important to understand.

37
00:02:12.650 --> 00:02:15.920
‫We're attempting to format the data, not transform it.

38
00:02:16.490 --> 00:02:20.420
‫The array of numbers has been formatted into an array of arrays.

39
00:02:20.600 --> 00:02:22.520
‫Each array contains the numbers.

40
00:02:22.700 --> 00:02:27.570
‫I've added comments to show the range of values you can expect to find in each array.

41
00:02:27.950 --> 00:02:31.520
‫The first array will contain numbers between 10 and 30.

42
00:02:31.880 --> 00:02:37.250
‫The second jury will contain numbers between 30 and 50, so on and so forth.

43
00:02:37.760 --> 00:02:41.150
‫Here's the formatted data and histogram side by side.

44
00:02:41.450 --> 00:02:45.430
‫Hopefully you can see the importance of having to format your data.

45
00:02:45.740 --> 00:02:48.710
‫If data comes in the desired format, that's great.

46
00:02:48.920 --> 00:02:51.310
‫It's completely optional to format data.

47
00:02:51.650 --> 00:02:55.130
‫However, things don't always work out the way we want them to.

48
00:02:55.400 --> 00:03:00.230
‫If data comes in an incorrect format, we'll need to format it before drawing it.

49
00:03:01.490 --> 00:03:08.090
‫As I said before, this is a common problem, it's so common that D3 provides a set of functions for

50
00:03:08.090 --> 00:03:10.640
‫formatting your data for specific charts.

51
00:03:10.880 --> 00:03:16.280
‫In the resource section of this lecture, I provide a link to the D3 array package.

52
00:03:16.580 --> 00:03:19.730
‫I've linked to a specific section called Binz.

53
00:03:20.180 --> 00:03:27.440
‫The D3 Behn function is a function that will format your data in two buckets D three calls it Binz instead

54
00:03:27.440 --> 00:03:31.830
‫of buckets, a bean will contain the number of items within a given range.

55
00:03:32.030 --> 00:03:38.720
‫Let's read the description together in groups discrete samples into a smaller number of consecutive

56
00:03:38.720 --> 00:03:40.600
‫non overlapping intervals.

57
00:03:40.880 --> 00:03:46.340
‫They are often used to visualize the distribution of numerical data as histograms.

58
00:03:46.790 --> 00:03:51.410
‫The three Dobbyn function was introduced specifically for histograms.

59
00:03:51.980 --> 00:03:57.890
‫It'll help us format our data into the desired format that will be perfect for drawing a histogram.

60
00:03:58.070 --> 00:04:01.610
‫In the next lecture, we will explore how this function works.

