WEBVTT
1
00:00:01.520 --> 00:00:04.490
Hello and welcome to another tutorial.

2
00:00:04.490 --> 00:00:10.700
We're going to continue our discussion on the Hello World application in Java and then compiling it

3
00:00:10.700 --> 00:00:14.990
with native image to Native Executable binary.

4
00:00:14.990 --> 00:00:21.290
We saw how to just quickly write the Hello World Application macros and I'm just going to quickly go

5
00:00:21.290 --> 00:00:23.210
through the output that you will see.

6
00:00:23.210 --> 00:00:26.570
And again, as you see, this output in the terminal is colorful.

7
00:00:26.570 --> 00:00:32.780
That's because I'm using fish, which is a friendly, intelligent or interactive shell and it allows

8
00:00:32.780 --> 00:00:33.230
coloring.

9
00:00:33.230 --> 00:00:36.680
So some terminals don't have the capability of coloring.

10
00:00:36.680 --> 00:00:42.110
But some other terminals, if it's if they're intelligent enough, they can allow coloring.

11
00:00:42.110 --> 00:00:48.650
So I recommend you use either a terminal that supports coloring like for example, the default terminal

12
00:00:48.650 --> 00:00:56.510
in Linux supports coloring if you're using Mac OS in a in a starfish and then it allows very nice coloring,

13
00:00:56.510 --> 00:00:58.700
you see very colorful text, right?

14
00:00:58.820 --> 00:01:03.380
So the very first thing is starting a compilation process called VM Native Image.

15
00:01:03.380 --> 00:01:10.370
And we saw that in the most recent version, which was 20 2.1.0, it actually shows more information

16
00:01:10.370 --> 00:01:16.130
about which toolchain it's using to compile your application to native binary and then it tells you

17
00:01:16.130 --> 00:01:18.260
the version information graph VM.

18
00:01:19.040 --> 00:01:22.660
And then performing analysis information about classes.

19
00:01:22.670 --> 00:01:28.460
It tells you which classes your application requires, how many classes your application requires to

20
00:01:28.460 --> 00:01:29.990
actually be successfully launched.

21
00:01:29.990 --> 00:01:35.720
And we know that most of these classes are from the JDC because chances are your application in our

22
00:01:35.720 --> 00:01:38.650
case was just one simple class file, which was a hero award.

23
00:01:38.660 --> 00:01:46.070
So if it says that your application requires like 3205, it means all of them come from the JDC, right?

24
00:01:46.070 --> 00:01:47.480
How many use reflexion?

25
00:01:47.480 --> 00:01:48.560
How many use janai?

26
00:01:48.590 --> 00:01:55.760
We will touch upon these topics later on because we know that Jehovah, by its nature, it's a dynamically

27
00:01:56.150 --> 00:02:03.590
it has a dynamic class loading feature or JVM is lazy loading, which means JVM only searches for a

28
00:02:03.590 --> 00:02:07.090
type like a class if your application requires it, right.

29
00:02:07.490 --> 00:02:13.490
And then reflection means at runtime you can reflect upon the features that the class has, which attributes

30
00:02:13.490 --> 00:02:18.680
has, and these, as I mentioned, reflections or even joy access, native access.

31
00:02:18.680 --> 00:02:22.670
These are not very friendly with aesthetic compilation.

32
00:02:22.670 --> 00:02:26.180
Aesthetic compilation means you have a compiler compiler.

33
00:02:26.210 --> 00:02:31.640
It analyzes your source code and compiles everything to native executable binary.

34
00:02:31.640 --> 00:02:34.940
So reflection becomes some sort of tricky thing, right?

35
00:02:34.940 --> 00:02:37.220
Because it's not a dynamic.

36
00:02:37.370 --> 00:02:38.570
There is no runtime, right?

37
00:02:38.570 --> 00:02:44.600
There is no JVM when you compile a statically compiled to a native executable, binary is just the operating

38
00:02:44.600 --> 00:02:47.390
system telling the hardware what to do, right?

39
00:02:47.480 --> 00:02:54.830
And then building universe performing aesthetic analysis of classes including JDK classes, parsing

40
00:02:54.830 --> 00:02:57.210
methods, parsing just means it.

41
00:02:57.350 --> 00:03:03.260
It's, it's tokenizing and understanding the methods in lining methods in lining is some sort of compiler

42
00:03:03.260 --> 00:03:09.530
optimization, which means whenever instead of calling the runtime, which is the basic operating system

43
00:03:09.530 --> 00:03:15.710
to go to this particular address, to invoke this functional method, it just copies the entire code

44
00:03:15.740 --> 00:03:17.960
into where the method was invoked.

45
00:03:17.960 --> 00:03:19.250
That's called in lining, right?

46
00:03:19.250 --> 00:03:22.430
That's a very old like compiler optimization.

47
00:03:22.430 --> 00:03:27.890
Usually if your methods are small or functions are small, enlightening works best.

48
00:03:27.920 --> 00:03:33.020
If your methods are very long, then usually in enlightening doesn't really work that well.

49
00:03:33.020 --> 00:03:33.380
Right.

50
00:03:33.380 --> 00:03:39.020
So the trick here is that actually it's one of the best practices in Java or in any programming language.

51
00:03:39.020 --> 00:03:44.660
When you're doing object oriented programming, try to keep your methods as small as possible.

52
00:03:45.050 --> 00:03:46.190
Compiling methods.

53
00:03:46.190 --> 00:03:52.730
Now the methods of the code inside the methods is compiled to native files or hardware instructions

54
00:03:52.730 --> 00:03:53.900
or the assembly code.

55
00:03:53.900 --> 00:03:55.220
And then creating image.

56
00:03:55.220 --> 00:03:57.860
Image just means the actual native binary.

57
00:03:58.730 --> 00:04:03.020
So what happens is that the compiler, the native image, compiles all the classes and then there is

58
00:04:03.020 --> 00:04:08.510
a link here is invoked and the linker puts all the binaries, combines all the binaries together and

59
00:04:08.510 --> 00:04:11.150
creates one image, one native executable.

60
00:04:11.150 --> 00:04:11.620
Right.

61
00:04:11.630 --> 00:04:13.850
And it also tells you the size of the file.

62
00:04:13.850 --> 00:04:19.010
And we saw that when you compile your job application to native executable binary, the size is relatively

63
00:04:19.010 --> 00:04:19.370
large.

64
00:04:19.370 --> 00:04:21.200
It's like 11 megabytes or so.

65
00:04:21.200 --> 00:04:26.480
And the reason is that there's a lot of stuff that has to be compiled from the JDK itself, and it tells

66
00:04:26.480 --> 00:04:35.600
you, for example, the code area required 3.96 megabyte, almost four megabyte, which basically includes

67
00:04:35.600 --> 00:04:44.240
or basically consists of 33% of the final size of the image file or the executable file is just the

68
00:04:44.240 --> 00:04:45.200
code area.

69
00:04:45.230 --> 00:04:50.840
About seven megabyte or 60% is for the image heap, that actual Java heap.

70
00:04:50.840 --> 00:04:51.080
Right.

71
00:04:51.080 --> 00:04:58.400
We said that native image actually kind of compiles a dense or a compact version of the gvm and we know

72
00:04:58.400 --> 00:05:00.350
that JVM requires the heap area.

73
00:05:00.350 --> 00:05:00.680
Right.

74
00:05:00.980 --> 00:05:09.770
And then the 7% or 847 kilobyte for the other data, we know that JVM when you launch it right, it

75
00:05:09.770 --> 00:05:12.200
has a heap and it has a metal space.

76
00:05:12.950 --> 00:05:20.480
Metal space holding information about a fields, for example, of classes and other stuff like metal

77
00:05:20.480 --> 00:05:24.440
information, all the stuff that can be used for reflection.

78
00:05:24.440 --> 00:05:28.670
And then in total, the size of the image is 11.7 megabyte.

79
00:05:28.850 --> 00:05:31.970
So top ten packages in code area, code area.

80
00:05:31.970 --> 00:05:39.170
Again, this is basically where the classes are compiled to optimize native binary and they all come

81
00:05:39.170 --> 00:05:40.250
from the JDK.

82
00:05:40.280 --> 00:05:46.070
Not surprisingly, java util java lang java takes java util regex com oracle svg.

83
00:05:46.070 --> 00:05:48.950
And so this is a substrate VMM.

84
00:05:49.700 --> 00:05:57.170
So this is related only to Google VM like the typical Oracle JDK or open JDK, they don't have this

85
00:05:57.170 --> 00:06:02.540
substrate VM Java util concurrent java math com oracle svn core reflect.

86
00:06:02.540 --> 00:06:11.310
So again, this is part of the substrate VM which which is only particular to a specific to the VM Java

87
00:06:11.330 --> 00:06:14.840
duty logging sign your local provider, etc..

88
00:06:14.840 --> 00:06:18.230
And then top ten object types in image here one.

89
00:06:18.340 --> 00:06:22.420
Only 75 megabyte of byte array for general heap data.

90
00:06:22.420 --> 00:06:23.020
Right.

91
00:06:23.050 --> 00:06:25.990
Obviously we hold the data into bytes.

92
00:06:25.990 --> 00:06:29.380
789 kilobyte java lang string.

93
00:06:29.410 --> 00:06:31.690
581 Java Lang Class.

94
00:06:31.930 --> 00:06:35.320
484 Byte array for Java Lang string.

95
00:06:36.560 --> 00:06:43.510
And etc. Java concurrent concurrent hash map dollar node node is an inner class.

96
00:06:43.520 --> 00:06:47.610
We know that the name of the inner classes is outer class in a class.

97
00:06:47.630 --> 00:06:53.120
Java lang is string l caroli and then a lot of stuff.

98
00:06:53.120 --> 00:06:53.390
Right.

99
00:06:53.390 --> 00:07:00.170
And then it tells you it took basically 0.9 seconds to do the entire things.

100
00:07:00.170 --> 00:07:07.520
And then product artifacts is hello world which is executable and it tells it also gives you a build

101
00:07:07.520 --> 00:07:14.480
artifact which the text takes the file which tells you what kind of artifact was generated.

102
00:07:14.480 --> 00:07:21.020
We said that the main use case of the native image to create executable files right to compile java

103
00:07:21.050 --> 00:07:23.570
application to executable file, but that's not necessary.

104
00:07:23.570 --> 00:07:29.330
You can also compile your job application to a static library or dynamic library and we will see it

105
00:07:29.330 --> 00:07:30.740
in the future lectures.

106
00:07:30.740 --> 00:07:38.150
And again it finally says finish generating hello world in 27 seconds and then because we compiled in

107
00:07:38.150 --> 00:07:44.960
our current working directory and then the native image was put in the executing the executable file

108
00:07:44.960 --> 00:07:50.540
was put in the current working directory we just say dot forward slash hello world and we said that

109
00:07:50.540 --> 00:07:56.630
in Windows operating system you don't need to use dart forward or backward slash because in Windows

110
00:07:56.630 --> 00:08:00.680
the current working directory is automatically added to the path environment variables.

111
00:08:00.680 --> 00:08:06.140
So you just say hello world on Mac OS and Linux you have to use DOT because the current working directory

112
00:08:06.140 --> 00:08:07.490
is not searchable.

113
00:08:07.490 --> 00:08:11.150
It's not by default added to the path environment variable.

114
00:08:11.150 --> 00:08:12.980
Now we can actually do this.

115
00:08:14.210 --> 00:08:16.070
So let's go back to our eclipse.

116
00:08:16.070 --> 00:08:20.120
So we had this, my app, let's say, and then let's open a terminal here.

117
00:08:22.850 --> 00:08:29.150
So if I say my underscore app, it's not going to work because the current working directory is not

118
00:08:29.390 --> 00:08:32.300
by default added to the path environment variable.

119
00:08:32.420 --> 00:08:39.530
What this means is that whenever we type a name my app and then hit a space, the terminal and the operating

120
00:08:39.530 --> 00:08:43.040
system, they assume that this is an executable application.

121
00:08:43.040 --> 00:08:51.320
And if you don't specify a relative path or an absolute path, then the terminal and or operating system,

122
00:08:51.320 --> 00:08:55.130
they search into the directories that are on the path environment variable.

123
00:08:55.130 --> 00:08:55.520
Right.

124
00:08:55.520 --> 00:09:01.160
And we know that the current working directory is not added to the path environment variable by default.

125
00:09:01.170 --> 00:09:04.640
That's why we give a relative path or an absolute path.

126
00:09:04.640 --> 00:09:05.090
Right.

127
00:09:06.230 --> 00:09:11.690
You can drag and drop these and this is the full absolute path to this executable file and then we do

128
00:09:11.690 --> 00:09:12.200
it right.

129
00:09:12.200 --> 00:09:18.620
So again, the reason in macOS and Linux we use dot my app because we are giving a relative path.

130
00:09:18.650 --> 00:09:21.560
Otherwise the terminal cannot find it.

131
00:09:21.560 --> 00:09:30.650
But if I open up a terminal at my home directory and then open up the bash RC.

132
00:09:31.530 --> 00:09:31.910
Uh.

133
00:09:31.920 --> 00:09:32.790
Let's see.

134
00:09:33.970 --> 00:09:40.180
So what I'm going to do actually in the past environment variable, right, what I'm going to do, I'm

135
00:09:40.180 --> 00:09:47.290
actually going so here I'm adding the Java JDK being directory.

136
00:09:47.500 --> 00:09:51.070
Let's also add the current working directory.

137
00:09:51.070 --> 00:09:56.350
So we want to tell the terminal that hey, the current working directory is always added to the path

138
00:09:56.350 --> 00:09:56.830
environment.

139
00:09:56.830 --> 00:09:58.960
Well, I mean that's not what I recommend.

140
00:09:58.960 --> 00:10:03.040
I recommend you don't do that, but that's something that you can always do.

141
00:10:03.040 --> 00:10:03.460
Right?

142
00:10:03.610 --> 00:10:09.730
And then we go back to our terminal, maybe let's close it and then open it, or you can source the

143
00:10:09.730 --> 00:10:10.540
bash RC again.

144
00:10:10.540 --> 00:10:13.330
But here I'm just going to open it and close it again.

145
00:10:13.660 --> 00:10:20.800
So, so if we echo our path environment variable and now you see the dot, which means the current working

146
00:10:20.800 --> 00:10:22.150
directory is added, right?

147
00:10:22.480 --> 00:10:29.260
So now if I say my underscore app, now you see the fish makes it blue, which means this is found,

148
00:10:29.260 --> 00:10:29.710
right.

149
00:10:29.710 --> 00:10:32.140
I don't need to say forward slash my app.

150
00:10:32.140 --> 00:10:33.280
It is still works fine.

151
00:10:33.310 --> 00:10:37.450
The fish shell makes it blue, which means this is valid.

152
00:10:37.450 --> 00:10:40.600
But I don't need to do that because the current working directly.

153
00:10:40.600 --> 00:10:46.930
I instructed the terminal to always add the current working directory to the path environment variable.

154
00:10:46.930 --> 00:10:51.130
So again in Windows, this happens by default in macros and Linux.

155
00:10:51.130 --> 00:10:54.550
This doesn't happen by default, but you can always do it.

156
00:10:55.330 --> 00:10:59.860
So I'm going to comment this out because that's not one of the best practices.

157
00:10:59.860 --> 00:11:05.850
It's best to avoid this kind of it's best to avoid adding the current working directory to the path

158
00:11:05.890 --> 00:11:06.910
environment variable.

159
00:11:07.000 --> 00:11:13.780
I mean in general, whenever you launch a application, you want to always know which directory you're

160
00:11:13.780 --> 00:11:16.480
launching it from, right where the application is.

161
00:11:16.480 --> 00:11:21.820
Now for some applications like Java, Java, see, obviously it's easier to just type the name instead

162
00:11:21.820 --> 00:11:23.320
of give the full path.

163
00:11:24.100 --> 00:11:30.550
That's why we add this to the being directory of the JDK to the path environment variable.

164
00:11:30.550 --> 00:11:35.080
But again, the best practice is to define the Java home, right?

165
00:11:35.380 --> 00:11:37.570
And then add the Bing.

166
00:11:37.570 --> 00:11:43.810
So now this is very explicit that I'm running the JDK from whatever the Java home is defined.

167
00:11:43.810 --> 00:11:48.800
And later on if you want to switch to another JDK instead of changing the path environment variable,

168
00:11:48.820 --> 00:11:53.320
you just change the Java home environment variable, which is easier, right?

169
00:11:53.320 --> 00:12:00.760
So and then for example, if I want to quickly run the Java from the VM JDK, I just say Google Home,

170
00:12:01.120 --> 00:12:01.600
right?

171
00:12:01.600 --> 00:12:04.410
And then Bean and then Java hyphen hyphen version.

172
00:12:04.450 --> 00:12:10.780
So it's best to be more explicit and then define this kind of environment variables so that they can

173
00:12:10.780 --> 00:12:12.580
always quickly use them.

174
00:12:13.180 --> 00:12:13.690
All right.

175
00:12:13.690 --> 00:12:21.820
Now, what we want to discuss now is the Linux again, Linux and Mac OS, very similar syntax in terms

176
00:12:21.820 --> 00:12:28.360
of how to invoke the native image, how to how to basically compile your job application.

177
00:12:28.660 --> 00:12:35.200
One thing that is the reason I'm separating the Mac OS and Linux is that now when in Mac OS, when you

178
00:12:35.200 --> 00:12:40.720
install the Xcode app, all the required dependencies for the native image are installed.

179
00:12:40.720 --> 00:12:45.610
The order you don't need to do anything else, but in Linux you kind of need to install a little bit

180
00:12:45.610 --> 00:12:52.470
of more dependencies and native image depends on these static library libs.

181
00:12:52.630 --> 00:12:54.070
So you want to.

182
00:12:54.310 --> 00:12:59.110
So the first time using native image I want to may fail due to the missing library.

183
00:12:59.110 --> 00:13:00.430
So here's an example.

184
00:13:02.170 --> 00:13:05.410
I installed ubuntu, i installed a native image.

185
00:13:05.410 --> 00:13:07.360
I created this hello world.

186
00:13:07.480 --> 00:13:09.100
Very simple java application.

187
00:13:09.100 --> 00:13:15.190
I use the java compiler to compile it to a class file and then I use the native image tool with the

188
00:13:15.190 --> 00:13:19.390
Google VM to compile the class file to the native executable.

189
00:13:19.420 --> 00:13:25.660
As you can see, the first time I ran it, it was successful until creating image and it gave me a fatal

190
00:13:25.660 --> 00:13:26.200
error.

191
00:13:26.230 --> 00:13:28.120
Java Erlang Runtime Exception.

192
00:13:28.120 --> 00:13:35.560
There was an error linking the native image linker command exited with one and so the compilation was

193
00:13:35.560 --> 00:13:36.190
successful.

194
00:13:36.190 --> 00:13:44.650
Linking failed and the reason linking failed because linker link not only combines your application

195
00:13:44.650 --> 00:13:48.880
the bindings, but it also tries to grab all the dependencies.

196
00:13:48.880 --> 00:13:54.190
And one of the dependencies of the native image on Linux is the libs, right?

197
00:13:54.370 --> 00:14:00.760
So you have to and you see based on the linker command output, possible reasons for this include it

198
00:14:00.760 --> 00:14:06.850
appears as though libs dot a is missing please installing and the way you install it on linux you say

199
00:14:06.850 --> 00:14:07.960
sudo apt.

200
00:14:07.990 --> 00:14:12.220
This is the application manager install z lib one g.

201
00:14:12.370 --> 00:14:14.620
So this is dynamic libraries for runtime.

202
00:14:14.620 --> 00:14:18.580
So but we are doing compilation which is this is a development time.

203
00:14:18.580 --> 00:14:25.540
So you have to use the also install the sudo apt install zlib one g hyphen dev.

204
00:14:25.870 --> 00:14:33.130
So if you just install zlib one g, this is for the runtime only dynamically base to if an app.

205
00:14:33.210 --> 00:14:35.690
I guess it requires this library at runtime.

206
00:14:35.690 --> 00:14:36.250
Right?

207
00:14:36.260 --> 00:14:38.360
Then this installation is enough.

208
00:14:38.360 --> 00:14:46.880
But we need to zlib for the development time when we want to actually grab the code from the dynamic

209
00:14:46.880 --> 00:14:47.210
library.

210
00:14:47.240 --> 00:14:50.810
That's why you also need to install the dev version, right?

211
00:14:50.840 --> 00:14:57.470
Sudo apt install zlib one g hyphen dev a static library for compile time and then linking happens after

212
00:14:57.470 --> 00:14:58.840
the compilation is finished.

213
00:14:58.850 --> 00:14:59.210
Right.

214
00:14:59.210 --> 00:15:01.330
So the compiler here was successful.

215
00:15:01.340 --> 00:15:07.670
But once we are creating image, which means we are combining all the binaries to create a native executable

216
00:15:07.670 --> 00:15:09.020
file, the linker failed.

217
00:15:09.260 --> 00:15:09.830
All right.

218
00:15:10.220 --> 00:15:16.700
But once you basically install this dependency, rerun your application and it's going to be successful.

219
00:15:16.730 --> 00:15:25.390
So let's head to our Ubuntu and then I am going to create a new directory.

220
00:15:25.400 --> 00:15:28.600
Let's call this test on my desktop.

221
00:15:28.610 --> 00:15:29.780
Let's open this up.

222
00:15:31.580 --> 00:15:34.670
Let's see if we can open in terminal.

223
00:15:35.240 --> 00:15:35.720
All right.

224
00:15:35.720 --> 00:15:41.420
So I've also installed fish on top of my shell command in Linux.

225
00:15:41.420 --> 00:15:45.560
So again, my recommendation is to install the fish, which is very nice.

226
00:15:45.560 --> 00:15:50.630
So we're going to touch hello, world Java is going to create an empty file and then we're going to

227
00:15:50.630 --> 00:15:52.280
open it with the text editor.

228
00:15:53.080 --> 00:15:58.490
And then, let's say a public class.

229
00:15:58.510 --> 00:15:59.560
Hello world.

230
00:16:00.460 --> 00:16:01.300
And then.

231
00:16:01.690 --> 00:16:06.820
And then we're going to say public static void main string args.

232
00:16:06.850 --> 00:16:07.480
Right.

233
00:16:07.990 --> 00:16:12.940
And then system that out that print line.

234
00:16:13.060 --> 00:16:13.570
Hello.

235
00:16:13.570 --> 00:16:25.750
World from Java in Linux Ubuntu and then exclamation mark and then close the brackets or close the double

236
00:16:25.750 --> 00:16:27.730
code brackets and then semicolon.

237
00:16:27.760 --> 00:16:29.710
All right, so this is all we need.

238
00:16:29.710 --> 00:16:37.150
And then I'm going to say that Google Home being and then Java C hyphen C P here.

239
00:16:37.180 --> 00:16:37.570
Right.

240
00:16:37.810 --> 00:16:40.570
We only have one class and then.

241
00:16:42.550 --> 00:16:43.870
Hello, Java.

242
00:16:44.380 --> 00:16:47.440
So actually, we should have saved these first.

243
00:16:49.600 --> 00:16:49.970
Oh, yeah.

244
00:16:49.990 --> 00:16:52.350
It failed because we didn't say we.

245
00:16:52.660 --> 00:16:56.470
So now again, we have a typo.

246
00:16:58.350 --> 00:17:00.900
A string, so save again.

247
00:17:04.280 --> 00:17:08.630
Okay, let's pull up the directory, let's clear this one and then run this.

248
00:17:09.050 --> 00:17:15.890
So I'm compiling with the graph LLVM Java C and let's check to see which version we're using.

249
00:17:15.890 --> 00:17:17.390
Hyphen hyphen version.

250
00:17:17.900 --> 00:17:24.920
So 17.3, let's see what native image we're using.

251
00:17:27.280 --> 00:17:27.520
Okay.

252
00:17:27.550 --> 00:17:32.010
Actually, let's see what Java, Java and we're using Java hyphen, hyphen version.

253
00:17:32.020 --> 00:17:35.480
So it's 2020 2.1.0.

254
00:17:35.500 --> 00:17:42.430
This is the most recent version of The Beam as of the time of recording this tutorial.

255
00:17:42.430 --> 00:17:44.110
Now we have the class file.

256
00:17:44.140 --> 00:17:46.810
Now, obviously, the very first thing that we should always do.

257
00:17:48.550 --> 00:17:54.350
Run our Java application using the Java, using the Java command to make sure everything works fine.

258
00:17:54.370 --> 00:17:55.690
Now it works fine.

259
00:17:55.720 --> 00:18:03.400
Obviously, the last thing is to go ahead and compile our Java application to native executable binary

260
00:18:03.400 --> 00:18:06.610
hyphen CPP here and then helloworld.

261
00:18:06.610 --> 00:18:10.330
We don't specify the date class and then the name of the output.

262
00:18:10.330 --> 00:18:11.260
My app.

263
00:18:12.920 --> 00:18:13.280
All right.

264
00:18:13.280 --> 00:18:17.360
So it's going to take a little bit of time because I'm running on a virtual machine.

265
00:18:23.560 --> 00:18:30.910
So grow generating my app executable and it also tells you if you click on this this terminal is very

266
00:18:30.910 --> 00:18:39.250
intelligent it takes you to the opens, the Firefox and then it takes you to these websites to give

267
00:18:39.250 --> 00:18:45.820
you more information about what does it mean that this application executable this this global VM native

268
00:18:45.820 --> 00:18:53.590
image takes you to, for example, the native image home directory for the documentation virgin info

269
00:18:53.590 --> 00:18:57.820
girl VM 20 2.1.0 as C compiler DCC.

270
00:18:57.850 --> 00:19:02.830
This is a Linux compiler, this is the default toolchain and garbage collector serial GC Right.

271
00:19:02.830 --> 00:19:10.660
So when our application is compiled, there is a serial GC that does the memory management for our executable

272
00:19:10.660 --> 00:19:11.080
binary.

273
00:19:11.080 --> 00:19:11.590
Right.

274
00:19:11.590 --> 00:19:16.060
Remember, even when you write a C++ application, you have to do the manual.

275
00:19:16.540 --> 00:19:19.740
Your application is responsible for memory management, right?

276
00:19:19.780 --> 00:19:24.430
Operating system is not operating system only manages the stack memory.

277
00:19:24.430 --> 00:19:30.160
It doesn't care about managing the heap memory or anything that is not allocated on the stack.

278
00:19:30.670 --> 00:19:34.240
So code area, everything succeeded.

279
00:19:34.240 --> 00:19:36.850
They set up my app and then build artifact.

280
00:19:38.500 --> 00:19:38.950
Let's.

281
00:19:39.550 --> 00:19:40.900
Let's wait a little bit.

282
00:19:41.290 --> 00:19:42.070
Okay.

283
00:19:44.430 --> 00:19:51.570
Now we have the my app here, my app build artifact and then what we're going to do, let's kill it

284
00:19:51.570 --> 00:20:00.690
up and then dot forward slash my app and hello world from Java in Linux Ubuntu let's go to the test

285
00:20:01.230 --> 00:20:02.490
come back up here.

286
00:20:04.190 --> 00:20:10.850
It's about 12 point megabyte, so it's a pretty large site life size compared to your class file, which

287
00:20:10.850 --> 00:20:16.910
was only 400 bytes, not even one kilobyte, half a kilobyte versus 12.5 megabyte.

288
00:20:17.090 --> 00:20:21.380
But by today's standards, 12.5 megabyte is pretty much nothing.

289
00:20:21.380 --> 00:20:28.130
So if we open this text file, it just tells you what kind of artifact we generated, which is.

290
00:20:30.770 --> 00:20:31.340
Let's see.

291
00:20:31.340 --> 00:20:32.480
So executable.

292
00:20:32.480 --> 00:20:34.340
And what was the name of the artifact?

293
00:20:34.360 --> 00:20:35.060
My app.

294
00:20:35.300 --> 00:20:38.000
All right, now I want to show you.

295
00:20:39.890 --> 00:20:46.730
So even if we don't specify this hyphen CP, it still works fine because we are in the current working

296
00:20:46.730 --> 00:20:47.450
directory.

297
00:20:47.450 --> 00:20:47.950
Right?

298
00:20:47.960 --> 00:20:53.270
So again, the class path here has the same meaning as the Java class path that we always use.

299
00:20:54.350 --> 00:20:54.620
All right.

300
00:20:54.620 --> 00:20:55.970
So back to PowerPoint.

301
00:20:55.970 --> 00:20:56.930
Let's look at again.

302
00:20:56.930 --> 00:21:00.320
This is the output of the graph in Linux.

303
00:21:00.320 --> 00:21:06.290
I'm running in the fish terminal, which is a very colorful terminal, a starting compilation process

304
00:21:06.290 --> 00:21:12.410
called VMware Zen Information about classes very similar in macOS Linux, and you will see that later

305
00:21:12.410 --> 00:21:13.160
in Windows.

306
00:21:13.190 --> 00:21:14.810
The output is more or less the same.

307
00:21:15.020 --> 00:21:21.470
Performing a static analysis which classes packages require the most static analysis and compilation.

308
00:21:21.470 --> 00:21:27.270
The path to the generated native image executable binary and eventually we say that dot forward slash

309
00:21:27.290 --> 00:21:28.670
the name of the executable.

310
00:21:28.700 --> 00:21:35.600
Now if you don't specify the name of your executable, it's going to be the name of your class and all

311
00:21:35.600 --> 00:21:37.220
letters are lowercase.

312
00:21:37.430 --> 00:21:43.160
In my example, I actually specified the name of the output file, which was my underscore app here.

313
00:21:43.160 --> 00:21:49.010
I'm not specifying the name of the output file, so by default it's going to be in the name of the class,

314
00:21:49.010 --> 00:21:50.540
all letters lowercase.

315
00:21:50.720 --> 00:21:54.890
So I hope you enjoy this lecture and now have a better understanding of the native image.

316
00:21:55.340 --> 00:21:57.800
Please stay tuned and I'll see the next one.
