WEBVTT
1
00:00:01.300 --> 00:00:03.550
Hello and welcome to another tutorial.

2
00:00:03.550 --> 00:00:11.590
We're going to continue on the discussion of tracing agent that is part of the gvm that comes with Beam.

3
00:00:11.590 --> 00:00:18.550
And we said that this is very important topic because sometimes you want to tell the aesthetic analyzer

4
00:00:18.550 --> 00:00:22.920
and the aesthetic compiler of native image extra information, right?

5
00:00:22.930 --> 00:00:25.990
That helps to figure out what's going on.

6
00:00:25.990 --> 00:00:34.030
And these are mostly the information that are somehow have a dynamic nature, for example, Java reflections.

7
00:00:34.030 --> 00:00:39.820
So these are more like about the runtime or for example, Java Native interface Jrny which you have

8
00:00:39.820 --> 00:00:40.630
to add runtime.

9
00:00:40.630 --> 00:00:47.500
JVM finds the the binary library, the dynamic library loads it into memory and then calls those C or

10
00:00:47.500 --> 00:00:48.520
C++ functions.

11
00:00:48.520 --> 00:00:48.910
Right.

12
00:00:49.150 --> 00:00:54.700
And we said that in order to do this, we have to use the EVM that comes with the Google home and it

13
00:00:54.700 --> 00:00:58.120
has additional functionality, which is the agent lib.

14
00:00:58.120 --> 00:01:05.980
So you tell the JV team that run my Java application, but activate a particular agent and in this case

15
00:01:05.980 --> 00:01:08.230
we are interested in the native image agent.

16
00:01:08.230 --> 00:01:13.930
So basically the job of the agent is to monitor the calls and all the resources that your application

17
00:01:13.930 --> 00:01:21.300
uses during its lifetime, as long as it's running and then eventually creates a configuration files

18
00:01:21.310 --> 00:01:29.110
or dump all those information to some directory, and then later on those configuration files are fed

19
00:01:29.110 --> 00:01:33.700
to the native image compiler so that it gets more information.

20
00:01:34.360 --> 00:01:41.110
And we said that during execution, the agent interfaces with the Java VM.

21
00:01:41.110 --> 00:01:45.490
And remember this only works for the JVM that comes with the VM.

22
00:01:45.490 --> 00:01:52.510
That's an additional functionality that they have added to the GVM that comes with the idea to intercept

23
00:01:52.510 --> 00:01:54.670
all calls that look up classes.

24
00:01:54.670 --> 00:02:01.390
These are dynamic class loading methods, reflection reflectively calling methods or accessing fields,

25
00:02:01.390 --> 00:02:03.970
or somehow looking up their resources.

26
00:02:03.970 --> 00:02:10.690
And for example, if you're using a if you want to load a or locate a particular resource, you have

27
00:02:10.690 --> 00:02:16.270
to use, for example, a class loader that looks up all the resources on the class path and then is

28
00:02:16.270 --> 00:02:25.330
able to load them into memory as byte streams or basically binary streams or request proxy accesses.

29
00:02:26.350 --> 00:02:28.360
The agent then generates the files.

30
00:02:28.600 --> 00:02:32.390
These are the configuration files in the format of json jni config.

31
00:02:32.410 --> 00:02:38.350
If you have any native library access reflection config and obviously that's the reflection calls proxy

32
00:02:38.350 --> 00:02:40.480
configuration and resource config, right.

33
00:02:40.510 --> 00:02:45.580
If you're accessing a resource on the class path, if something that you are asking a class loader to

34
00:02:45.580 --> 00:02:51.790
a specific load into memory in the specified output directory and we said that it's best to stick with

35
00:02:51.790 --> 00:02:58.060
the default directory name which is meta inf slash native image.

36
00:02:58.090 --> 00:03:04.780
That's because the native image compiler by default looks for such a directory name, which is the path

37
00:03:04.780 --> 00:03:07.450
to the config dear in this command.

38
00:03:07.450 --> 00:03:10.960
So you activate utility JVM activated agent What is that?

39
00:03:10.960 --> 00:03:12.490
Agent It's the native image.

40
00:03:12.490 --> 00:03:13.810
Agent What configuration?

41
00:03:13.840 --> 00:03:19.270
What is the parameter that we're passing to native image is the config output directory and then it's

42
00:03:19.270 --> 00:03:25.780
going to be set to whatever path and the default is meta inf slash native and note all these equality

43
00:03:25.780 --> 00:03:28.780
signs that's there.

44
00:03:28.780 --> 00:03:34.420
So in order to set a particular property of this agent, we use the equality sign.

45
00:03:34.450 --> 00:03:34.930
Yeah.

46
00:03:36.780 --> 00:03:40.320
Um which is path to conflict there in the example.

47
00:03:40.650 --> 00:03:47.040
The generated files are stand alone configuration files in JSON format which contain all the intercepted

48
00:03:47.040 --> 00:03:48.420
dynamic accesses.

49
00:03:48.420 --> 00:03:53.040
And sometimes you have to run the JVM multiple times to intercept old cards.

50
00:03:53.040 --> 00:03:59.910
I mean, this mainly applies to the case when JVM is waiting for user input to decide what to do, right.

51
00:04:00.150 --> 00:04:06.580
We had in our previous example, the user was telling the application which class to look up for and

52
00:04:06.580 --> 00:04:08.880
then which class to load into memory.

53
00:04:08.880 --> 00:04:12.930
So obviously those inputs can change and based on that.

54
00:04:15.310 --> 00:04:22.400
Basically the calls or the path that your application takes is different, right?

55
00:04:22.420 --> 00:04:25.180
So and the compiler needs to know all those information.

56
00:04:25.240 --> 00:04:29.890
It can be necessary to run target application more than once with different inputs.

57
00:04:29.890 --> 00:04:36.910
So this is the important part to trigger separate execution paths for a better coverage of dynamic accesses.

58
00:04:36.910 --> 00:04:43.390
The agent supports this with the config merge deer option, which adds the intercepted access to an

59
00:04:43.390 --> 00:04:45.430
existing set of configuration files.

60
00:04:45.430 --> 00:04:47.530
So JVM activates an agent.

61
00:04:47.530 --> 00:04:49.660
Which agent is the native image agent?

62
00:04:49.660 --> 00:04:54.140
Which parameter that we're going to set for this native image or which property is the config merge

63
00:04:54.160 --> 00:04:54.520
here?

64
00:04:54.550 --> 00:05:01.990
Instead of saying config output there, instead of saying config output deal, we still say config merged

65
00:05:01.990 --> 00:05:02.440
here.

66
00:05:02.440 --> 00:05:09.940
So what this does is it looks if the this path already exists, if it exists and the JSON files already

67
00:05:09.940 --> 00:05:14.050
are there, it just appends the output to those files.

68
00:05:14.050 --> 00:05:15.340
It doesn't overwrite them.

69
00:05:15.340 --> 00:05:15.520
Right.

70
00:05:15.520 --> 00:05:18.430
The default mode is overwrite the JSON files.

71
00:05:18.430 --> 00:05:25.390
But if instead of saying config output, did you say config merge there, it appends them to the existing

72
00:05:25.390 --> 00:05:31.990
JSON files if they specify target directory or configuration files in it are missing when using config

73
00:05:31.990 --> 00:05:34.720
merge the agent creates them and prints a warning.

74
00:05:34.720 --> 00:05:35.160
Right.

75
00:05:35.170 --> 00:05:42.430
So merge assumes that they have they should be there and it's just opens those files in the append mode

76
00:05:42.430 --> 00:05:44.650
instead of overwriting them or truncating them.

77
00:05:44.650 --> 00:05:48.550
Right now, let's head to Eclipse and try to see a quick example.

78
00:05:48.580 --> 00:05:53.440
We saw that we had this example of the reflection, direct access, no problem.

79
00:05:53.440 --> 00:05:57.190
But this part that was asking user for which class to load.

80
00:05:57.220 --> 00:06:02.020
This was something that obviously the aesthetic analyzer of the native image cannot predict because

81
00:06:02.020 --> 00:06:03.070
that's impossible.

82
00:06:03.100 --> 00:06:09.730
So you have to create the configuration files that have the information of, for example, what class

83
00:06:09.730 --> 00:06:10.540
the user chose.

84
00:06:10.540 --> 00:06:14.560
And now what we're going to do is

85
00:06:17.680 --> 00:06:25.780
basically what I'm going to do is try to explore the idea of running the JVM multiple times and then

86
00:06:25.960 --> 00:06:28.450
getting the JSON files for multiple inputs.

87
00:06:28.450 --> 00:06:36.730
Right now here, this second line, which is the call to the method, is specifically tied to the fact

88
00:06:36.730 --> 00:06:45.420
that, of course, the class is going to be one part class which was util for a select complex, complex

89
00:06:45.420 --> 00:06:45.660
set.

90
00:06:45.730 --> 00:06:53.620
But let's just comment this out and do a CSS out, let's say just a class.

91
00:06:54.820 --> 00:07:01.510
And if I run this, if you recall in the run configuration of this reflection demo, I already supplied

92
00:07:01.510 --> 00:07:04.900
this argument util forge complex, complex class.

93
00:07:05.140 --> 00:07:05.770
Right.

94
00:07:05.770 --> 00:07:07.210
So if you run this.

95
00:07:08.910 --> 00:07:09.890
It works fine.

96
00:07:09.900 --> 00:07:10.370
Right?

97
00:07:10.380 --> 00:07:15.740
But then let's let's delete the previous, uh, uh, meta inf.

98
00:07:17.670 --> 00:07:18.330
All right.

99
00:07:18.330 --> 00:07:22.080
And let's run our class again inside Eclipse.

100
00:07:22.110 --> 00:07:23.040
It works fine.

101
00:07:23.040 --> 00:07:26.010
And then I'm going to go ahead.

102
00:07:26.010 --> 00:07:35.010
And right now I use the the Oracle JDK or GRE system, but I want to run this with with the tracing

103
00:07:35.010 --> 00:07:35.400
agent.

104
00:07:35.400 --> 00:07:37.790
So I use my external application.

105
00:07:37.800 --> 00:07:44.070
Let's look at, let's look back at the Java Trace, which is from the JVM from the Graph VM Project

106
00:07:44.070 --> 00:07:45.330
Directory is the working directory.

107
00:07:45.330 --> 00:07:51.060
And then we are activating the agent, which is the native image and config output directory in the

108
00:07:51.060 --> 00:07:53.820
current working directory, which is the project location.

109
00:07:53.850 --> 00:07:59.580
It puts it I use the default naming which is meta in native image.

110
00:07:59.580 --> 00:08:04.480
So all the configuration files will be put in this native image inside the meta inf.

111
00:08:04.500 --> 00:08:09.180
And remember I said that then when you run the native image, you have to make sure that this meta inf

112
00:08:09.180 --> 00:08:14.070
directory is on the class path and then hyphen CP the class path.

113
00:08:14.070 --> 00:08:20.430
We use the obviously the eclipse's internal variable so that everything is correctly on the class path

114
00:08:20.430 --> 00:08:21.240
Java type name.

115
00:08:21.240 --> 00:08:26.220
This is the fully qualified name of the class and whatever comes next is the command line arguments

116
00:08:26.220 --> 00:08:28.020
that we pass to our application, right?

117
00:08:29.380 --> 00:08:31.650
And I believe we can even break this.

118
00:08:31.660 --> 00:08:37.300
So if you do a backwards slash something like this, you can break the line and go and put, for example,

119
00:08:37.300 --> 00:08:39.680
the arguments here.

120
00:08:39.700 --> 00:08:40.240
Right.

121
00:08:41.200 --> 00:08:44.620
So let's apply this and then let's run this.

122
00:08:49.390 --> 00:08:52.000
So let's let's delete these.

123
00:08:54.440 --> 00:08:55.110
Um.

124
00:08:55.160 --> 00:08:55.790
It says.

125
00:08:56.060 --> 00:08:57.590
Could not find a load, so.

126
00:08:57.710 --> 00:08:58.040
Okay.

127
00:08:58.040 --> 00:08:59.810
So we cannot break those lines.

128
00:08:59.810 --> 00:09:01.010
Let's go back.

129
00:09:01.190 --> 00:09:01.610
Yeah.

130
00:09:01.610 --> 00:09:02.450
So.

131
00:09:05.710 --> 00:09:07.540
And let's apply run again.

132
00:09:08.670 --> 00:09:14.340
Let's select our Java class and then run our Java trace and now it works fine, right.

133
00:09:14.340 --> 00:09:15.900
And it creates the meta env.

134
00:09:15.900 --> 00:09:21.600
And we saw that the main thing here is the reflect config, which intercepts the call that, hey, we

135
00:09:21.600 --> 00:09:24.870
are dynamically accessing this complex class.

136
00:09:24.870 --> 00:09:25.110
Right.

137
00:09:25.110 --> 00:09:30.720
And this, this interception happens at this line of code based on the user input.

138
00:09:30.720 --> 00:09:32.910
The command line argument is zero, right?

139
00:09:33.120 --> 00:09:38.190
Now, notice what happens if we try to pass another class.

140
00:09:39.950 --> 00:09:45.560
So here, instead of saying util forge complex, complex class, I can use another class, for example,

141
00:09:45.560 --> 00:09:48.740
a real number apply or and then run.

142
00:09:49.670 --> 00:09:55.940
We have to select our Java class and Java trace and this work and you see now this was overwritten,

143
00:09:56.120 --> 00:10:02.210
but let's say I don't want to override the previous, I want to run my application with multiple inputs

144
00:10:02.210 --> 00:10:07.730
and I want all of them to be intercepted and they were all be in this reflect config.

145
00:10:07.790 --> 00:10:17.030
And in order to do that instead of saying basically config output there, we're going to say config

146
00:10:17.030 --> 00:10:17.830
merge there.

147
00:10:17.870 --> 00:10:25.700
So I'm going to actually duplicate this Java trace, I'm going to say Java trace, underscore merge.

148
00:10:26.420 --> 00:10:34.190
And then in the merge instead of saying config output directory, I'm going to say config merge directory.

149
00:10:34.670 --> 00:10:36.560
And I really love this.

150
00:10:37.970 --> 00:10:45.440
I really love the fact that you can whatever you create as an external tool, you can quickly duplicate

151
00:10:45.440 --> 00:10:45.560
it.

152
00:10:45.560 --> 00:10:48.140
So you don't need to again set all this up.

153
00:10:48.140 --> 00:10:54.890
It's very nice feature that this external tool provides and in my view, this external tool of eclipse

154
00:10:54.890 --> 00:10:59.390
is one of the most important and most powerful features of Eclipse.

155
00:10:59.390 --> 00:10:59.840
Right?

156
00:11:00.200 --> 00:11:01.310
So let's close this.

157
00:11:01.700 --> 00:11:02.720
Let's now.

158
00:11:04.390 --> 00:11:12.640
Run our Java trace message and instead of saying real, I'm going to now go back to the complex, write

159
00:11:12.640 --> 00:11:14.560
this command line arguments.

160
00:11:14.920 --> 00:11:16.780
So let's apply, run it.

161
00:11:16.780 --> 00:11:17.890
And now let's see.

162
00:11:18.340 --> 00:11:21.670
Not only the previous one, which was the real is already there.

163
00:11:22.240 --> 00:11:25.090
The new one, which is the complex, is also there.

164
00:11:25.090 --> 00:11:35.530
So both of these calls are now part of the part of the the configuration that we're will be fed to the

165
00:11:35.530 --> 00:11:37.780
native, which we can try different things.

166
00:11:38.230 --> 00:11:44.890
For example, instead of saying util forge complex, complex, I can say java dot lang dot string.

167
00:11:45.700 --> 00:11:48.610
Again, I'm still running the java trace merge.

168
00:11:49.660 --> 00:11:50.040
Uh.

169
00:11:50.050 --> 00:11:53.800
Okay, uh, let's see, let's run this Java Trace message.

170
00:11:54.040 --> 00:12:00.750
And now not only the previous ones real complex and are there a string is also there.

171
00:12:00.760 --> 00:12:04.870
Now let's quickly compile this so we are running.

172
00:12:06.320 --> 00:12:11.490
Native in May 17, the second version, which not only has the class path.

173
00:12:11.510 --> 00:12:15.460
It also appends the current working directive, which is the project location.

174
00:12:15.470 --> 00:12:20.900
And again, I mentioned that the reason I'm doing this because this meta inf directory, I put it directly

175
00:12:20.900 --> 00:12:27.380
inside this project directory and therefore I appended to the class path so that the native image by

176
00:12:27.380 --> 00:12:30.830
default picks up on this matter inf and all these configuration files.

177
00:12:30.830 --> 00:12:31.330
Right?

178
00:12:31.340 --> 00:12:39.500
So if we run our native image to this JSON file, which is reflect config will be fed to our native

179
00:12:39.500 --> 00:12:45.470
image so that it realizes that we're using three types of three classes reflectively.

180
00:12:46.340 --> 00:12:48.650
We ran our job application three times.

181
00:12:48.650 --> 00:12:55.220
We did with the agent, native agent on the JV team that is provided by the VM.

182
00:12:55.220 --> 00:13:05.150
And then we that agent intercepted our inputs, write this reflective call for different inputs that

183
00:13:05.150 --> 00:13:08.990
all four different possible inputs that the user might provide right now.

184
00:13:08.990 --> 00:13:14.660
Obviously in this our example, the number of inputs that the user might provide are infinite.

185
00:13:14.660 --> 00:13:16.580
So eventually we cannot have all of them.

186
00:13:16.580 --> 00:13:23.870
But maybe sometimes you have an application that asks user for a particular set of inputs like input

187
00:13:23.870 --> 00:13:25.460
number one, two, three, four.

188
00:13:25.490 --> 00:13:32.000
Therefore, you can run your application four times and create these JSON files, use the merge output,

189
00:13:32.000 --> 00:13:37.970
right, and then save all those possible paths and now the native image is exceeded.

190
00:13:37.970 --> 00:13:39.200
Let's run this.

191
00:13:40.450 --> 00:13:45.070
Application and make sure that all these three inputs work fine.

192
00:13:45.280 --> 00:13:49.150
So I'm going to say a reflection demo.

193
00:13:49.180 --> 00:13:50.440
Util Forge complex.

194
00:13:50.440 --> 00:13:50.890
Complex.

195
00:13:50.890 --> 00:13:55.390
This is one of the possible inputs that we provide and it works fine, right?

196
00:13:55.630 --> 00:14:01.120
And if you recall in the previous example, when I replace this input with a Java Lang string, the

197
00:14:01.120 --> 00:14:02.440
application failed.

198
00:14:02.650 --> 00:14:08.470
But now that this class was also in the configuration file, it succeeds.

199
00:14:08.650 --> 00:14:15.650
And obviously the other one which is util forge complex and then this also succeeds.

200
00:14:15.670 --> 00:14:16.150
Right.

201
00:14:16.150 --> 00:14:24.460
So this mainly is important when the number of inputs that your user might provide is, is basically

202
00:14:26.380 --> 00:14:27.130
limited, right.

203
00:14:27.130 --> 00:14:28.510
Which is usually the case.

204
00:14:28.510 --> 00:14:37.360
You don't want the user to provide like put in, have the capability or have the freedom to put infinite

205
00:14:37.360 --> 00:14:43.390
number of arguments because then there is no way that you can statically compile and then have all the

206
00:14:43.390 --> 00:14:46.450
cases for all these dynamic class loading.

207
00:14:47.050 --> 00:14:48.610
So I hope you enjoyed this lecture.

208
00:14:48.610 --> 00:14:54.010
We will continue in the next lecture, so please stay tuned and I'll sing the next one.
