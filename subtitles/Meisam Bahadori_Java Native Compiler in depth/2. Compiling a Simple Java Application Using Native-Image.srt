1
00:00:02,810 --> 00:00:05,210
Hello and welcome to another tutorial.

2
00:00:05,210 --> 00:00:12,590
We saw how to download Growl VM native image and now let's look at more details about VM native image.

3
00:00:12,590 --> 00:00:17,660
Now we saw that native image doesn't by default come with the growl VM and we saw that growl beam is

4
00:00:17,660 --> 00:00:20,780
built on top of a JDK, usually open JDK.

5
00:00:20,960 --> 00:00:26,720
And what it means is that it has the JDK, all the command line tools that come with the JDK also built

6
00:00:26,720 --> 00:00:33,800
in the graph VM, but then it has some extra command line tools like Juju, which was the growl updater,

7
00:00:33,800 --> 00:00:38,300
and we use that with the install command to install the native image.

8
00:00:38,690 --> 00:00:45,470
And the native image is an executable binary from being a folder inside lib kvm.

9
00:00:45,470 --> 00:00:51,680
So when you install Java VM here, I installed for example, VM Community Edition version 11.

10
00:00:51,680 --> 00:00:53,420
The most recent version is 17.

11
00:00:53,420 --> 00:00:56,210
So I recommend you install VM 17.

12
00:00:56,480 --> 00:01:01,790
And then in the contents home there is a lib directory and inside that there is a SVM which is called

13
00:01:01,790 --> 00:01:02,930
the substrate VM.

14
00:01:03,020 --> 00:01:06,890
And then inside there is a bing directory and then native image is there.

15
00:01:07,690 --> 00:01:12,640
Now we saw that in the actual being directory, which is inside the home directory, there is a symbolic

16
00:01:12,640 --> 00:01:19,990
link to the actual executable file which is native image and to the operating system or to the terminal,

17
00:01:20,020 --> 00:01:24,250
the executable binary and it's symbolic links their equivalent, right?

18
00:01:24,250 --> 00:01:32,530
So usually you create you put your executable file somewhere and you can create a symbolic links to

19
00:01:32,530 --> 00:01:35,410
them and put them in, put them in different directories.

20
00:01:35,770 --> 00:01:40,660
So the native image compiles your executable class, a class that has the main method and we have already

21
00:01:40,660 --> 00:01:42,280
seen this in the previous lectures.

22
00:01:42,280 --> 00:01:46,690
It can also compile the required Java modules and also the garbage collector.

23
00:01:46,690 --> 00:01:53,050
So basically when it compiles your Java application to a native executable binary, it actually there

24
00:01:53,050 --> 00:01:59,800
is a JVM already compiled to native binary and also it has all the necessary components like garbage

25
00:01:59,800 --> 00:02:00,940
collectors, etc..

26
00:02:00,940 --> 00:02:07,000
So you are still sure that if your Java application that was running on top of the JVM didn't have any

27
00:02:07,000 --> 00:02:15,460
memory leak or resource leak, once you compile it to native binaries, it will not have a memory leak

28
00:02:15,460 --> 00:02:15,940
as well.

29
00:02:15,970 --> 00:02:23,020
However, I will show you what happens when you compile to native binary and the memory usage of your

30
00:02:23,020 --> 00:02:24,760
native binary after you compile.

31
00:02:24,760 --> 00:02:30,280
Your application is much smaller than when you run your application on a JVM.

32
00:02:30,280 --> 00:02:35,140
That's just because how JVM requests memory from the operating system, right?

33
00:02:35,140 --> 00:02:43,030
So the memory footprint becomes a small error, but and then the execution time or the start time becomes

34
00:02:43,030 --> 00:02:43,990
much faster.

35
00:02:43,990 --> 00:02:46,810
But then the question is, what's the benefit of the JVM?

36
00:02:46,810 --> 00:02:53,950
And we saw that previously there are some benefits on running your Java application on top of a JVM,

37
00:02:53,950 --> 00:02:54,220
right?

38
00:02:54,220 --> 00:03:00,940
When you when you compare it with the with the native execution.

39
00:03:00,940 --> 00:03:06,250
And the main benefit is the JIT compilation, which means first of all, JVM is lazy loading.

40
00:03:06,250 --> 00:03:07,480
It does lazy loading.

41
00:03:07,480 --> 00:03:14,260
If you if you have lots of classes on your class path but you never use them, JVM doesn't load them

42
00:03:14,260 --> 00:03:14,920
into memory.

43
00:03:14,920 --> 00:03:15,940
That's one thing.

44
00:03:17,110 --> 00:03:23,920
And then the Git compilation, which is a dynamic compilation, happens at runtime, and it only happens

45
00:03:23,920 --> 00:03:27,850
for the methods that you mostly use, you mostly call, right?

46
00:03:27,850 --> 00:03:34,990
So a lot of methods in reality, they don't need to be compiled to exit to native code.

47
00:03:34,990 --> 00:03:40,840
But then when you compile your entire application to native code, obviously everything has to be aesthetically

48
00:03:40,840 --> 00:03:41,590
compiled.

49
00:03:41,950 --> 00:03:47,050
So at the end it can create a native executable binary which has a much faster startup time.

50
00:03:47,050 --> 00:03:48,460
So it's very cool, right?

51
00:03:49,330 --> 00:03:51,340
Clearly it has some limitations.

52
00:03:52,210 --> 00:03:54,520
One of the there are a couple of limitations.

53
00:03:54,790 --> 00:03:58,870
We know that currently Gravel VM supports Java 17, which is very good.

54
00:03:58,870 --> 00:04:04,870
It works great for simple Java applications, especially the Java applications that you develop based

55
00:04:04,870 --> 00:04:07,360
on like trying to develop a command line tool.

56
00:04:07,360 --> 00:04:12,220
The final executable binary is much larger than a jar file, which we already know that because the

57
00:04:12,220 --> 00:04:15,700
jar file is just the class files from your source code.

58
00:04:16,300 --> 00:04:24,460
The JDK class files are not included in your Java, but when the VM native image compiles your application,

59
00:04:24,490 --> 00:04:29,830
it also includes everything all the class files from the JDK and even a JVM itself.

60
00:04:29,830 --> 00:04:30,040
Right?

61
00:04:30,040 --> 00:04:32,800
A very compact version of the Gvm and Garbage Collector.

62
00:04:32,800 --> 00:04:37,180
So when you compile your application, your native image could be 11 megabytes.

63
00:04:37,180 --> 00:04:43,630
Whereas if you just package your Java application as a jar or executable jar, it could be just a few

64
00:04:43,630 --> 00:04:44,530
kilobytes, right?

65
00:04:44,530 --> 00:04:46,030
So the size is different.

66
00:04:46,270 --> 00:04:53,230
But then the fact that even ten megabytes of a size these days is very small file size, you really

67
00:04:53,230 --> 00:04:58,630
don't need to worry about the fact that native compilation causes a larger size.

68
00:04:58,630 --> 00:05:06,130
And in general, the native image at the moment has a very weak support or kind of non-existing support

69
00:05:06,130 --> 00:05:11,680
for the graphical tools that the Java provides, like the swing or Java effects.

70
00:05:11,980 --> 00:05:18,340
So pretty much all the Java frameworks at the moment are not supported, which means if you develop

71
00:05:18,340 --> 00:05:25,030
a swing application, there is a high chance that it's not going to work after you compile it to native

72
00:05:25,030 --> 00:05:25,330
image.

73
00:05:25,330 --> 00:05:29,500
But again, for the command line applications, it works very well.

74
00:05:29,500 --> 00:05:35,680
If your Java application has a main method and take some arguments from the user and then it does some

75
00:05:35,740 --> 00:05:41,470
stuff, you can definitely compile it to native binary and it's going to work much better, much faster

76
00:05:41,500 --> 00:05:47,830
with consuming less memory for our simple Java projects, Native Image is a good tool for creating a

77
00:05:47,830 --> 00:05:49,090
native executable.

78
00:05:49,960 --> 00:05:54,460
Make sure that your file has a declaration of the main class inside its manifest.

79
00:05:54,460 --> 00:05:55,420
That file.

80
00:05:55,450 --> 00:05:56,710
So this is a topic.

81
00:05:56,710 --> 00:05:58,630
We will come back and later look at it.

82
00:05:58,630 --> 00:06:05,590
But the idea is that so far we've tried to basically give the native image, the class path and then

83
00:06:05,590 --> 00:06:06,910
also specify the main.

84
00:06:07,380 --> 00:06:09,300
That declares that has the main method, right?

85
00:06:09,300 --> 00:06:15,360
So we run the native image on the main class, but you can also run the native image on a jar file.

86
00:06:15,360 --> 00:06:20,910
So you package your project as a jar file and then run the native image on the jar file.

87
00:06:21,270 --> 00:06:26,610
And in order to make it executable, you want to make sure that the jar file actually has a manifest

88
00:06:26,610 --> 00:06:27,870
file inside of it.

89
00:06:27,870 --> 00:06:34,920
And usually in the manifest file there is a line that tells the whatever runtime that's running this

90
00:06:34,920 --> 00:06:40,710
jar file, which class is the has the main method or where is the entry point to the Java application?

91
00:06:40,710 --> 00:06:41,130
Right.

92
00:06:41,130 --> 00:06:48,390
So jar is like an archive file, but then there is a file manifest that MF inside of it that tells the

93
00:06:48,990 --> 00:06:51,210
that says which class has the main method.

94
00:06:51,210 --> 00:06:51,690
Right.

95
00:06:52,630 --> 00:06:58,450
So you can also run native image on a jar file that has a main, has a manifest that points to the main

96
00:06:58,450 --> 00:07:04,150
class or main method, and then it can be compiled to a native executable binary.

97
00:07:05,640 --> 00:07:06,000
All right.

98
00:07:06,000 --> 00:07:11,460
So we saw that how to install the default toolchain for Mac OS and other platforms.

99
00:07:11,460 --> 00:07:17,130
And then after that we saw that you go ahead and download and install Crawl VM on Mac OS.

100
00:07:17,130 --> 00:07:22,620
You have to make sure that in the recent version of the macOS Catalina and the later versions, you

101
00:07:22,620 --> 00:07:30,090
need to make sure that you tell the operating system to not quarantine these global VM directories.

102
00:07:30,090 --> 00:07:37,620
So you have to remove that by removing the attributes recursively and in this home directory of the

103
00:07:37,920 --> 00:07:38,130
VM.

104
00:07:38,130 --> 00:07:42,630
Right, just execute this command and give it the path to the VM directory.

105
00:07:44,190 --> 00:07:50,490
And then after that you run the Google Updater juju with the install command and tell it native dash

106
00:07:50,490 --> 00:07:56,660
image saw this and if you have already installed and there is no newer version available, they grow

107
00:07:56,730 --> 00:07:57,990
vm or gio update.

108
00:07:58,020 --> 00:08:03,360
Juju just tells you that you already have installed the latest version and then you can add the being

109
00:08:03,360 --> 00:08:06,150
director of VM to the past environment variable.

110
00:08:06,240 --> 00:08:10,440
And remember that the Bing directory already includes a JDK open JDK itself.

111
00:08:10,440 --> 00:08:10,800
Right.

112
00:08:10,800 --> 00:08:16,320
But my recommendation is that you always create a environment variable for the home directories.

113
00:08:16,320 --> 00:08:19,830
Like I have created an environment variable called Google home.

114
00:08:19,830 --> 00:08:25,110
So you say export Google home equals the path to the home directory of the VM.

115
00:08:25,110 --> 00:08:29,010
And also I've created another environment variable Java home.

116
00:08:30,000 --> 00:08:33,550
Which points to the JDK 17, for example, Home Directory.

117
00:08:33,590 --> 00:08:34,070
Right.

118
00:08:34,080 --> 00:08:41,130
And then after that, what you can do, you can access the native image from Google Home for where it's

119
00:08:41,400 --> 00:08:41,610
been.

120
00:08:41,610 --> 00:08:43,530
So let me just quickly show you that.

121
00:08:45,160 --> 00:08:53,590
So if I open up a terminal and tell it echo Google home, it tells me that it's set for the terminal

122
00:08:53,590 --> 00:08:54,490
to this path.

123
00:08:54,490 --> 00:08:54,760
Right?

124
00:08:54,760 --> 00:08:58,300
The home directory of the album JDK 17.

125
00:08:58,540 --> 00:09:07,750
And if I say Echo Java Home, it tells me that it's set to the home directory at JDK 17.

126
00:09:08,080 --> 00:09:19,500
If I want to run Java or Java compiler or Java from JDK 17, I say Java Home slash bean slash Java,

127
00:09:19,510 --> 00:09:19,870
right?

128
00:09:19,870 --> 00:09:23,680
And then I can look at the version and it tells me that it's Oracle Hot Spot.

129
00:09:23,950 --> 00:09:31,270
If I look at if I want to launch my job application with the JVM that comes with the VM instead of telling

130
00:09:31,270 --> 00:09:37,630
your Java home slash bean slash Java, I tell it Google home, slash bean slash Java.

131
00:09:37,630 --> 00:09:44,920
And you will see that this is the JVM that that is built based on the open JDK 17 instead of Hotspot.

132
00:09:44,920 --> 00:09:45,370
Right.

133
00:09:46,350 --> 00:09:47,160
So what is?

134
00:09:47,160 --> 00:09:48,810
What is the Oracle LLVM?

135
00:09:48,840 --> 00:09:52,350
Open JDK is the community version of this.

136
00:09:52,770 --> 00:09:53,940
The open source version.

137
00:09:54,510 --> 00:09:55,080
And then.

138
00:09:55,860 --> 00:10:02,460
But again, in the past environment variable, if I obviously if I type java hyphen hyphen version,

139
00:10:02,700 --> 00:10:04,760
my terminal can also find a Java.

140
00:10:04,770 --> 00:10:12,450
And if you look at my path environment variable, you see that, um, basically the JDK 17 is the first

141
00:10:12,450 --> 00:10:18,660
that comes in the path, which means if I just type Java, it's going to pick up on this version Java

142
00:10:18,660 --> 00:10:21,780
Home, which is JDK 17 being Java, right?

143
00:10:22,170 --> 00:10:26,140
So you can decide which JDK you want to use that.

144
00:10:26,270 --> 00:10:31,400
The open JDK 17 is basically compatible with Oracle JDK 17.

145
00:10:31,410 --> 00:10:38,400
So if you compile your Java application with the Java compiler that comes with the Oracle JDK, then

146
00:10:38,400 --> 00:10:46,140
you can compile that application to the Native Image tool that comes with with the LLVM JDK, right?

147
00:10:46,140 --> 00:10:53,220
So these are compatible as long as for both of them you use 17, for example, which is my recommendation.

148
00:10:54,360 --> 00:10:59,400
Now finally we can also look at how we can execute.

149
00:10:59,910 --> 00:11:05,100
LLVM So you say Galois home a slash bean and then a native hyphen image.

150
00:11:05,100 --> 00:11:12,480
That's the and then we can say hyphen, hyphen version and it is able to execute this native image from

151
00:11:12,480 --> 00:11:14,220
the bean directory of the Google home.

152
00:11:14,220 --> 00:11:23,760
And then it tells me that LLVM Java 17 Community Edition and then everything works fine.

153
00:11:23,760 --> 00:11:31,740
Right now if you want to compile you have to tell it basically native image and here you're going to

154
00:11:31,740 --> 00:11:38,700
tell native image the class path, right that your application needs in order to date the native.

155
00:11:38,700 --> 00:11:43,050
So native image also needs to know where all the classifiers are for your application.

156
00:11:43,050 --> 00:11:50,940
So you also specify the class path and then after that you specify the main class of your application.

157
00:11:50,940 --> 00:11:55,470
And after that you can give it the name of.

158
00:11:55,590 --> 00:11:59,400
So you see the class name and then the image name so I can tell it.

159
00:12:00,390 --> 00:12:08,130
Let's actually go back to our eclipse and then try to compile our native image again.

160
00:12:08,130 --> 00:12:11,310
So let's terminate this, go back to our eclipse.

161
00:12:11,310 --> 00:12:17,520
So we previously compiled our hello class, but we put it we run it from this directory.

162
00:12:21,230 --> 00:12:23,920
So right now we are in this test directory.

163
00:12:23,930 --> 00:12:31,040
If I just run the native image on the hello vault without giving it the name for the output image it's

164
00:12:31,040 --> 00:12:33,680
going to create hello world and put it in the same directory.

165
00:12:33,680 --> 00:12:34,790
But I'm not going to do it.

166
00:12:34,790 --> 00:12:37,580
So let's go one level up.

167
00:12:37,940 --> 00:12:42,470
All right, now we are in the super directory, so or directory.

168
00:12:42,470 --> 00:12:44,930
So I'm going to run the native image.

169
00:12:45,080 --> 00:12:50,900
So I growl home native image and then hyphen CP which is the class path, right.

170
00:12:51,110 --> 00:12:52,880
And then the name of the main class.

171
00:12:52,880 --> 00:12:58,160
But then you can specify the name of the output file and actually you give it the full name.

172
00:12:58,160 --> 00:12:58,610
Right.

173
00:12:58,760 --> 00:13:04,790
So right now this hello world class is going to be found by the native image because a native image

174
00:13:04,790 --> 00:13:10,190
searches the class path right now that this helloworld that class is not inside the current working

175
00:13:10,190 --> 00:13:14,720
directory that I have in a terminal, but it doesn't matter because it searches all the directories

176
00:13:14,720 --> 00:13:16,100
or specify in the class path.

177
00:13:16,340 --> 00:13:18,200
And after that I'm going to tell it.

178
00:13:19,610 --> 00:13:28,610
For example, go to test two and create an image called my app or my Java app or my underscore Java

179
00:13:28,820 --> 00:13:30,380
underscore app, right?

180
00:13:30,380 --> 00:13:37,040
What it does, it compiles your Java application and then puts the native image or the native binary

181
00:13:37,040 --> 00:13:37,850
inside the test.

182
00:13:37,850 --> 00:13:43,130
Two And the name of the executable binary is going to be my Java underscore app.

183
00:13:43,250 --> 00:13:45,860
But then there are also other parameters like the options.

184
00:13:45,860 --> 00:13:52,310
So there are options that come in between your native image and the main class and those are the options

185
00:13:52,310 --> 00:13:59,630
that you pass to the native image tool, namely just mainly it's just the class path right after your

186
00:13:59,630 --> 00:14:05,180
main class and the name of the output executable, you have some other options and these options are

187
00:14:05,180 --> 00:14:08,170
the ones that usually are passed to the JV team.

188
00:14:08,210 --> 00:14:09,590
So we can also try that.

189
00:14:09,800 --> 00:14:15,860
For example, at the moment our hello world class accepts some system arguments, right?

190
00:14:15,860 --> 00:14:21,220
So we can see if we can set them here so we can say hyphen DX Name equals Bob.

191
00:14:21,230 --> 00:14:21,680
Right?

192
00:14:21,680 --> 00:14:23,030
So let's see if this works.

193
00:14:23,840 --> 00:14:30,800
So we are passing some parameters or options to the native image and then we are passing some parameters

194
00:14:30,800 --> 00:14:33,140
that to our hello world class, right?

195
00:14:33,140 --> 00:14:35,120
The main method of our Java application.

196
00:14:35,330 --> 00:14:43,280
And if this works, then every time we run our native executable application, these parameters are

197
00:14:43,280 --> 00:14:46,490
going to be by default passed to that application.

198
00:14:46,490 --> 00:14:46,670
Right?

199
00:14:46,670 --> 00:14:53,120
So if you know that you always run your job, your native executable binary you and you require that

200
00:14:53,120 --> 00:15:00,470
some system properties are be set by default all the time, then you can give them at the time of compilation.

201
00:15:00,470 --> 00:15:02,570
At the moment it didn't work right.

202
00:15:02,570 --> 00:15:07,910
So there was an error linking the native image and let's see what the error was.

203
00:15:08,940 --> 00:15:09,690
Uh.

204
00:15:10,230 --> 00:15:11,430
Let's see.

205
00:15:13,840 --> 00:15:17,170
So let's try to remove that and then see if this works.

206
00:15:17,410 --> 00:15:21,280
So let's see if this works.

207
00:15:23,080 --> 00:15:25,670
So right now we're not specifying any options.

208
00:15:25,780 --> 00:15:31,420
And in the future lectures, I will show you what options are allowed here and what options are allowed

209
00:15:31,420 --> 00:15:31,750
here.

210
00:15:31,750 --> 00:15:37,330
So these are all in the documentations of the native image, and we will look at all the options and

211
00:15:37,330 --> 00:15:38,320
all the details.

212
00:15:38,530 --> 00:15:41,290
For now, we're trying to make sure that everything works fine.

213
00:15:41,290 --> 00:15:49,060
We can compile our application or Java application, and then we can also specify where to put the result

214
00:15:49,060 --> 00:15:52,450
of the compilation and what the name of the output file is going to be.

215
00:15:52,450 --> 00:15:52,880
Right.

216
00:15:53,280 --> 00:15:54,730
And it worked fine.

217
00:15:54,730 --> 00:16:01,330
And I just can see the compilation is pretty fast just because it, it uses multithreading, therefore

218
00:16:01,360 --> 00:16:04,510
it uses all the CPU power that your computer provides.

219
00:16:04,510 --> 00:16:05,200
So it's very fast.

220
00:16:05,200 --> 00:16:15,460
So right now if I say LS Test two OC so we actually put it in test three I believe.

221
00:16:15,730 --> 00:16:16,030
No.

222
00:16:16,030 --> 00:16:17,920
So let's, let's refresh.

223
00:16:21,850 --> 00:16:22,600
All right, so?

224
00:16:23,020 --> 00:16:24,660
So it created a directory.

225
00:16:24,670 --> 00:16:26,530
Okay, so we made a typo here.

226
00:16:26,530 --> 00:16:26,800
Yeah.

227
00:16:26,800 --> 00:16:28,300
So let's go back.

228
00:16:28,300 --> 00:16:30,070
Let's delete this.

229
00:16:31,870 --> 00:16:32,320
Yeah.

230
00:16:32,320 --> 00:16:34,660
Test two.

231
00:16:34,690 --> 00:16:36,910
So, yeah, so we made a typo here.

232
00:16:36,910 --> 00:16:42,520
That's why if this directory doesn't exist, native image actually creates the directory and puts the

233
00:16:42,520 --> 00:16:45,190
compiled the result of the compilation there.

234
00:16:45,190 --> 00:16:45,670
Right.

235
00:16:45,850 --> 00:16:47,140
So it's good.

236
00:16:47,140 --> 00:16:51,550
And then right now we're telling it, hey, compile this class, file this Java application that has

237
00:16:51,550 --> 00:16:54,820
this main class and then put it inside this directory.

238
00:16:54,820 --> 00:16:57,880
And the name of the executable is going to be my Java app.

239
00:16:58,270 --> 00:17:02,470
And again, it's using all the CPU power of my computer, all the cores.

240
00:17:02,620 --> 00:17:10,930
That's why the compilation goes pretty fast because so basically it mostly compiles the JDK and because

241
00:17:10,930 --> 00:17:13,990
my application only has three class files, so it's pretty fast.

242
00:17:14,200 --> 00:17:23,320
Now if we try to say LS test two and as you can see, I have my native executable and it's already named

243
00:17:23,320 --> 00:17:24,220
my Java app.

244
00:17:24,220 --> 00:17:30,010
So if I say test two and then my Java app, it's going to work fine.

245
00:17:30,010 --> 00:17:37,120
And again, we saw that in the past that we can pass parameters, the command line arguments, let's

246
00:17:37,120 --> 00:17:39,370
say hyphen, the name equals bob.

247
00:17:39,370 --> 00:17:44,680
And as you can see, this system property said, we're not passing any command line arguments, but

248
00:17:44,680 --> 00:17:46,510
we can do that as well.

249
00:17:46,540 --> 00:17:47,590
Hello.

250
00:17:47,920 --> 00:17:50,440
And then we have one command line arguments.

251
00:17:50,440 --> 00:17:50,830
Hello.

252
00:17:50,830 --> 00:17:52,450
And then one system property.

253
00:17:52,450 --> 00:17:55,450
And these are some other stuff that our Java application runs.

254
00:17:55,450 --> 00:18:02,230
So I hope you enjoy this lecture in the future lectures we will look at all the details of the native

255
00:18:02,230 --> 00:18:05,440
image, so please stay tuned and I'll see the next one.
