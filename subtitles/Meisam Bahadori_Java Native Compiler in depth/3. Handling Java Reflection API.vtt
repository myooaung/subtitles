WEBVTT
1
00:00:01.880 --> 00:00:04.580
Hello and welcome to another tutorial.

2
00:00:04.580 --> 00:00:11.930
We're going to continue our discussion on Native Image and we're going to look at a more advanced topics

3
00:00:12.590 --> 00:00:13.520
on the native image.

4
00:00:13.520 --> 00:00:19.910
So far we've looked at the platform tool chains and why we need them to use the native image and then

5
00:00:19.970 --> 00:00:21.890
how the native image works.

6
00:00:21.890 --> 00:00:27.920
And then we have to point in native image to the class path and then point it to the main class, the

7
00:00:27.920 --> 00:00:30.470
class file that has the main method.

8
00:00:30.470 --> 00:00:35.030
We discussed the powerful external tool that the Eclipse ID provides.

9
00:00:35.030 --> 00:00:38.990
I highly recommend that if you're using Eclipse, definitely take advantage of them.

10
00:00:39.350 --> 00:00:40.490
External tools.

11
00:00:40.490 --> 00:00:47.600
We talked about the importance of the class path and then we talked about jar dependencies and then

12
00:00:47.600 --> 00:00:54.590
we talked about how to export an executable jar from eclipse or whatever your ID you use and then directly

13
00:00:54.590 --> 00:00:58.910
compile the jar using the native image tool.

14
00:00:59.300 --> 00:01:02.990
And now we're going to look at this topic about reflection.

15
00:01:02.990 --> 00:01:10.640
And if your your if you're familiar with Java, you know that Java is power is the managed runtime environment

16
00:01:10.640 --> 00:01:12.740
that it provides and obviously it's called Java.

17
00:01:12.770 --> 00:01:13.820
Now, what does it mean?

18
00:01:13.850 --> 00:01:20.060
It means at runtime, you as a programmer, as a developer, when you write your source code, you don't

19
00:01:20.060 --> 00:01:23.360
care about memory management to some good extent, right?

20
00:01:23.660 --> 00:01:30.320
In Java, ideally, you shouldn't be also caring about resource management, but unfortunately that's

21
00:01:30.320 --> 00:01:32.660
usually in most cases that's the case.

22
00:01:32.660 --> 00:01:38.540
But most times if you really want to go into the details, resource management is not really automatically

23
00:01:38.540 --> 00:01:39.800
done by the JVM.

24
00:01:39.800 --> 00:01:46.370
The idea of the finalizes was a it was not a good idea at the end and they removing them.

25
00:01:46.370 --> 00:01:50.660
So resource management again is different.

26
00:01:50.660 --> 00:01:57.020
But here we're talking about the managed runtime and whenever JVM, whenever you use a type in your

27
00:01:57.530 --> 00:02:02.780
in your code, let's say you have a type called a complex, which represents a complex number that has

28
00:02:02.780 --> 00:02:09.380
two attributes, two double numbers, one real numbers, one of them for the real part of this complex

29
00:02:09.380 --> 00:02:09.710
number.

30
00:02:09.710 --> 00:02:11.870
The other one is for the imagine part, right?

31
00:02:12.200 --> 00:02:16.640
So whenever you want to create a complex number, for example, in this case, the JVM first needs to

32
00:02:16.640 --> 00:02:18.230
understand what is this type.

33
00:02:18.230 --> 00:02:23.570
So it searches the class path to find a class.

34
00:02:23.570 --> 00:02:28.850
If it belongs obviously to a package, then JVM says is the fully qualified name of that type.

35
00:02:28.850 --> 00:02:29.270
Right.

36
00:02:29.660 --> 00:02:32.060
And then it loads the class file into memory.

37
00:02:32.060 --> 00:02:37.970
Class file is the blueprint of your type, which attributes it has, how much memory the JVM has to

38
00:02:37.970 --> 00:02:45.050
allocate based on the attributes, etc. If what kind of constructors it has, what's the accessibility

39
00:02:45.050 --> 00:02:50.420
of those constructors, whether they're public or private, what kind of static non static method it

40
00:02:50.420 --> 00:02:51.290
has, etc.?

41
00:02:51.290 --> 00:02:51.680
Right.

42
00:02:51.680 --> 00:02:57.320
So a class file JVM has to first load the class file into memory to understand what is the type that

43
00:02:57.320 --> 00:02:58.220
you're talking about.

44
00:02:58.670 --> 00:03:03.950
Now, obviously when you write the source file, in order to be able to compile your source file, you

45
00:03:03.950 --> 00:03:06.890
have to have this class file, this class, this.

46
00:03:06.890 --> 00:03:12.530
For example, if I want if this part of the code is part of a source file in the main method of a class,

47
00:03:12.740 --> 00:03:16.970
then I should have a complex Java source code somewhere else.

48
00:03:16.970 --> 00:03:22.070
And then first I have to compile this to the class file and then have it available on the class path

49
00:03:22.070 --> 00:03:24.140
when I compile this entire code.

50
00:03:24.140 --> 00:03:24.560
Right.

51
00:03:24.890 --> 00:03:29.750
So at compile time, java compiler looks at the types that you're using and make sure that everything

52
00:03:29.750 --> 00:03:30.590
is available.

53
00:03:30.620 --> 00:03:34.820
Otherwise it's going it's going to refuse compiling your source file.

54
00:03:35.090 --> 00:03:37.550
However, this is not always the case.

55
00:03:37.550 --> 00:03:44.810
Java, because of its managed runtime, allows the flexibility to do some dynamic capabilities or basically

56
00:03:44.810 --> 00:03:47.750
to dynamically load the classes at runtime.

57
00:03:48.200 --> 00:03:57.080
And a class object which is defined in the JDK is just a object that models the attributes of a type,

58
00:03:57.080 --> 00:03:59.060
for example, a complex class.

59
00:03:59.060 --> 00:04:01.760
Obviously it has a structure, right?

60
00:04:01.760 --> 00:04:05.420
It has some fields and the type of the fields are known.

61
00:04:05.420 --> 00:04:13.790
It has some methods, some constructors, static methods, etc. And whenever you get a class that object

62
00:04:13.790 --> 00:04:20.900
that represents that type, it means you all have you have an object of type class which holds the meta

63
00:04:20.900 --> 00:04:26.510
information or all the attributes types about your particular type that you're talking about, for example,

64
00:04:26.510 --> 00:04:27.110
complex.

65
00:04:27.110 --> 00:04:30.200
So a class has a state, right?

66
00:04:30.200 --> 00:04:39.170
Or information attributes like a type, let's say a type has a information about it, has a blueprint,

67
00:04:39.170 --> 00:04:39.590
right?

68
00:04:39.860 --> 00:04:42.740
A class is by itself is a type.

69
00:04:42.740 --> 00:04:48.980
It's an object that holds the meta information or the information about the basically the attributes

70
00:04:48.980 --> 00:04:50.900
of the other types that you're talking about.

71
00:04:50.900 --> 00:04:51.280
Right.

72
00:04:51.290 --> 00:04:55.010
And JVM, whenever it loads a class file, it saves all the attributes.

73
00:04:55.010 --> 00:05:00.080
It restores them in a particular piece of the memory in the Java heap called Meta Space.

74
00:05:01.240 --> 00:05:06.820
So one of the things that Gene provides, and sometimes that's a very nice feature to have.

75
00:05:06.820 --> 00:05:08.610
It's called the dynamic class loading.

76
00:05:08.620 --> 00:05:13.900
You say class four name and you provide a string which represents the fully qualified name of the type.

77
00:05:14.260 --> 00:05:21.910
And then once you hold this object class, which has the meta information, you can reflectively create

78
00:05:21.910 --> 00:05:28.690
an object of that type, call a constructor, call a method of that type or get a field, etc..

79
00:05:28.690 --> 00:05:29.140
Right.

80
00:05:29.140 --> 00:05:33.520
So part of this dynamic class loading is related to the reflection API.

81
00:05:33.520 --> 00:05:41.140
Reflection means that instead of directly accessing a type and calling a method on it, you can first

82
00:05:41.140 --> 00:05:52.660
access its meta information in the Java heap and then use those to to basically call a method or access

83
00:05:52.660 --> 00:05:53.560
a field, etc..

84
00:05:53.560 --> 00:05:56.380
Right now you might think, what is this important?

85
00:05:56.380 --> 00:05:58.030
And there are very few.

86
00:05:58.060 --> 00:05:59.770
There are very important use cases.

87
00:05:59.770 --> 00:06:06.850
One of them is sometimes the classes are not available on the class path at compile time.

88
00:06:06.850 --> 00:06:11.920
Sometimes, for example, you compile your application on your computer, but then you deploy it on

89
00:06:11.920 --> 00:06:12.400
a server.

90
00:06:12.400 --> 00:06:19.210
So on the server there are some extra libraries that are available which are not available on your on

91
00:06:19.210 --> 00:06:21.370
your local machine when you're compiling Java application.

92
00:06:21.370 --> 00:06:25.840
And the most famous example is the JDB Java database connector.

93
00:06:25.870 --> 00:06:26.650
Jtbc.

94
00:06:26.830 --> 00:06:31.270
You just have to dynamically load that library using class for name.

95
00:06:32.450 --> 00:06:38.510
So as long as the source code has all the details hardcoded aesthetic compiler from native image or

96
00:06:38.510 --> 00:06:42.470
the static analyzer will succeed in predicting reflection branches.

97
00:06:42.500 --> 00:06:43.640
Now what does it mean?

98
00:06:43.670 --> 00:06:49.880
Obviously Native Image wants to compile your source code or basically your classifies to a native executable

99
00:06:49.880 --> 00:06:50.710
binary.

100
00:06:50.720 --> 00:06:59.240
And then once that happens and you run that executable binary, it's the operating system that is running

101
00:06:59.240 --> 00:07:00.090
your application.

102
00:07:00.110 --> 00:07:01.640
There is no JVM, right?

103
00:07:01.790 --> 00:07:03.860
So there is no managed runtime environment.

104
00:07:03.860 --> 00:07:10.790
There is no reflection or meta space in the in the in the way that we talk about it when we talk about

105
00:07:10.790 --> 00:07:11.390
JVM.

106
00:07:12.380 --> 00:07:17.180
It's just a basically a instructions for the CPU.

107
00:07:17.210 --> 00:07:24.260
Then the question is, is the job of the native image analyzer, the aesthetic analyzer and the compiler

108
00:07:24.260 --> 00:07:32.870
to figure out what you're trying to do in your Java code so that it succeeds in generating the executable

109
00:07:32.870 --> 00:07:33.260
file.

110
00:07:33.470 --> 00:07:39.950
Now, if you directly access your type, again, this complex number class is my example here.

111
00:07:39.980 --> 00:07:42.980
Let's say I have a static factory method of rate.

112
00:07:42.980 --> 00:07:46.810
I give it to double numbers and it returns an object of type complex.

113
00:07:46.820 --> 00:07:49.220
I can print it, I can look at the class.

114
00:07:49.250 --> 00:07:55.310
Get class is just returns a class object again that holds the meta information of this type of this

115
00:07:55.310 --> 00:07:56.150
complex type.

116
00:07:56.720 --> 00:07:57.050
Right.

117
00:07:57.050 --> 00:08:00.800
This always succeeds native image aesthetic analyzer compiler.

118
00:08:00.800 --> 00:08:05.870
It doesn't have any problem because there is nothing unknown in these three lines of code.

119
00:08:05.870 --> 00:08:06.920
Everything is known.

120
00:08:07.160 --> 00:08:10.760
When you run the native image, obviously you have to give it a class path.

121
00:08:10.760 --> 00:08:15.440
This complex number has to be on the class path so that the native image can also compile the class

122
00:08:15.440 --> 00:08:18.470
file that is associated with this complex number.

123
00:08:19.380 --> 00:08:25.510
So this, this, this always is the direct creation of the types directly accessing them.

124
00:08:25.530 --> 00:08:28.190
But now we want to do reflective access.

125
00:08:28.200 --> 00:08:33.330
For example, I want to reflectively create a complex number and call it twisting methionine.

126
00:08:33.360 --> 00:08:38.640
So reflection version one is the static loading and this always succeeds with the native image.

127
00:08:38.940 --> 00:08:39.780
What do we mean?

128
00:08:40.150 --> 00:08:43.740
I want to call this a static factory method in the complex class.

129
00:08:43.740 --> 00:08:44.880
So I hold.

130
00:08:44.880 --> 00:08:52.320
First of all, static attributes don't are not associated with the state of a particular object of that

131
00:08:52.320 --> 00:08:52.650
type.

132
00:08:52.650 --> 00:08:57.210
Therefore you don't need to create an object first and then access that method.

133
00:08:57.210 --> 00:08:57.660
Right?

134
00:08:57.750 --> 00:09:01.170
Static methods are associated with the estate of the class itself.

135
00:09:01.320 --> 00:09:07.230
That's why I request this a built in feature that the Java has called class on any type.

136
00:09:07.380 --> 00:09:13.920
This returns a class file the class object, but it only holds the attributes of the class itself.

137
00:09:13.920 --> 00:09:16.080
Right, because we haven't created any instance.

138
00:09:16.080 --> 00:09:21.390
And because I want to access a static method, I just call the complex class.

139
00:09:21.780 --> 00:09:24.180
And then you say get declared method.

140
00:09:24.180 --> 00:09:29.520
So this is where the reflection happens because we are first accessing the meta information of this

141
00:09:29.520 --> 00:09:36.810
type complex and now we are reflectively accessing or creating something, some object that represents

142
00:09:37.280 --> 00:09:38.100
a method.

143
00:09:38.430 --> 00:09:43.800
So get declared method, you have to hard code the name of the method and give it the parameter names.

144
00:09:43.800 --> 00:09:46.740
So why do we have to provide the type of parameters?

145
00:09:46.920 --> 00:09:52.500
So the type of parameters is important because just the name of a method itself is not enough to.

146
00:09:52.500 --> 00:09:59.670
You can uniquely determine which method because java allows method overloading, which means in the

147
00:09:59.670 --> 00:10:05.280
same class you might have multiple methods with the same name, but they have different parameter types.

148
00:10:05.280 --> 00:10:09.150
So the order of parameters here matters, the type of parameters manage.

149
00:10:09.150 --> 00:10:16.140
And again, whenever we talk about meta informations, whenever you talk about reflection, you don't

150
00:10:16.140 --> 00:10:21.030
say, for example, double, double, you have to say double dot class, which means you're accessing

151
00:10:21.030 --> 00:10:23.520
the meta information of the type of this parameter.

152
00:10:23.520 --> 00:10:28.050
So the type of parameters are double, double, but we're seeing double class, double dot class.

153
00:10:28.050 --> 00:10:31.470
And again, yes, even the primitive types, these are keywords.

154
00:10:31.470 --> 00:10:37.050
But again, the dot class file is still works on these even primitive types.

155
00:10:38.190 --> 00:10:40.950
And then I want to invoke this static method.

156
00:10:40.950 --> 00:10:46.050
Note that we never mentioned that this is a static method, but it's implied because I'm using the class

157
00:10:46.050 --> 00:10:50.640
object that is associated with the type, not any particular instance of that type.

158
00:10:50.640 --> 00:10:53.550
So when you invoke it, you have to invoke a method on a type.

159
00:10:53.550 --> 00:11:00.570
If you pass null, it means again, it's more like a a static method where you pass the parameters and

160
00:11:00.570 --> 00:11:10.740
then it returns a basically obviously the method is it this returns a object here and we can typecast

161
00:11:10.740 --> 00:11:14.010
it to complex if you want to really do it.

162
00:11:14.010 --> 00:11:15.750
But here I'm just calling the twist string.

163
00:11:15.750 --> 00:11:19.110
Obviously any object has it to a string method, so no problem here.

164
00:11:19.110 --> 00:11:25.860
And then I'm also looking at the gate class and this returns a class object which is not only has the

165
00:11:25.860 --> 00:11:31.740
information information about the type, but it also has meta information about the estate because this

166
00:11:31.980 --> 00:11:38.040
class returns an object that is associated with one instance of this complex, which means now I can

167
00:11:38.040 --> 00:11:41.880
access the values that the fields, the real and imaginary parts.

168
00:11:41.880 --> 00:11:42.060
Right.

169
00:11:42.060 --> 00:11:43.170
These parameters hold.

170
00:11:44.600 --> 00:11:51.650
So this always succeeds if you write this code reflectively and then compile it using native image because

171
00:11:52.400 --> 00:11:53.570
everything is hard coded.

172
00:11:53.600 --> 00:11:58.940
Obviously this type complex type has to be available on the class path at the time that you run the

173
00:11:58.940 --> 00:12:04.490
native image and then native image aesthetic analyzer looks at this string of rect and obviously it

174
00:12:04.490 --> 00:12:10.700
also understands the types and looks at this type complex and sees if it has a method called of rake

175
00:12:10.700 --> 00:12:13.490
that has takes two parameters, double and double.

176
00:12:13.970 --> 00:12:17.210
So again, there is nothing unknown in this code.

177
00:12:17.210 --> 00:12:23.450
So Native Image Aesthetic analysis succeeds even though we're using reflection now reflection version

178
00:12:23.450 --> 00:12:23.840
two.

179
00:12:23.840 --> 00:12:25.770
As I mentioned here, it also succeeds.

180
00:12:25.790 --> 00:12:26.840
What does it mean?

181
00:12:28.360 --> 00:12:31.660
Reflection version two is dynamic loading hardcoded class.

182
00:12:31.660 --> 00:12:32.650
These are also sixes.

183
00:12:32.680 --> 00:12:38.170
Note that here we didn't dynamically search for this type complex in the class path.

184
00:12:38.170 --> 00:12:39.640
We just access it directly.

185
00:12:39.640 --> 00:12:45.280
So this is direct access to the type, but it's a reflective access or reflective invocation of the

186
00:12:45.280 --> 00:12:45.790
method.

187
00:12:46.090 --> 00:12:52.630
Here in the third example, which is the reflection version to I'm also dynamically searching for that

188
00:12:52.630 --> 00:12:54.100
class on the class path.

189
00:12:54.100 --> 00:12:55.700
So class four name.

190
00:12:55.720 --> 00:13:01.960
So the only difference between version two and version one is the first line, which how we get a class

191
00:13:01.960 --> 00:13:10.720
object which has the meta information about this complex type here, direct access here we are dynamically

192
00:13:10.720 --> 00:13:12.820
searching for that complex class.

193
00:13:12.820 --> 00:13:14.800
Add the class at runtime.

194
00:13:14.800 --> 00:13:21.010
What this means is that at compile time, if this complex class doesn't exist on our class path, the

195
00:13:21.010 --> 00:13:25.050
Java compiler will still compile these lines of code.

196
00:13:25.060 --> 00:13:25.900
It's all fine.

197
00:13:25.900 --> 00:13:34.330
Obviously this class four name throws some checked exceptions, which means obviously at runtime there

198
00:13:34.330 --> 00:13:38.530
might be a chance that this class is not available on a class path.

199
00:13:38.530 --> 00:13:45.310
So the Java compiler enforces the handling of those exceptions, but this line by itself compiles.

200
00:13:45.310 --> 00:13:51.340
Whereas if at compile time this complex class is not available on the class path, Java compiler will

201
00:13:51.340 --> 00:13:53.410
refuse to compile your source file.

202
00:13:53.410 --> 00:13:58.750
This line will not compile because when you are directly accessing a type that has to be available on

203
00:13:58.750 --> 00:14:02.350
the class path, whereas when you are dynamically accessing a type.

204
00:14:03.210 --> 00:14:10.980
And the only way to dynamically access a type is all the mechanism that the JDK or JVM provides is via

205
00:14:10.980 --> 00:14:15.210
the metal objects or the metal classes, this class object.

206
00:14:15.480 --> 00:14:21.300
So it's only reflection that you can dynamically search for a class on the class path at runtime.

207
00:14:21.600 --> 00:14:24.600
So get the so the rest is exactly the same.

208
00:14:24.600 --> 00:14:26.230
Like example version one.

209
00:14:26.250 --> 00:14:29.320
The only difference is the first line and this succeeds.

210
00:14:29.340 --> 00:14:36.690
So even though we defer the checking of whether this complex class exists or not to runtime, the aesthetic

211
00:14:36.690 --> 00:14:43.860
analyzer of the native image still looks at this string and understands that this is a package hierarchy

212
00:14:43.860 --> 00:14:44.880
and the name of the class.

213
00:14:44.880 --> 00:14:49.520
And because it's already at the when you run the native image, you give it the class path.

214
00:14:49.530 --> 00:14:53.940
So at the compile time, native image knows which directory is on the class path.

215
00:14:53.940 --> 00:15:01.080
So the aesthetic analyzer searches into all the directories on the class path and then searches for

216
00:15:01.080 --> 00:15:05.160
this type it if it's available and then it searches for this method.

217
00:15:05.160 --> 00:15:11.760
And then if everything is available, the static compilation succeeds because again there is nothing

218
00:15:11.760 --> 00:15:16.860
unknown at compile time for the aesthetic analyzer of the native image.

219
00:15:17.910 --> 00:15:25.720
This is different for again Java compiler because this string, the Java compiler doesn't care what

220
00:15:25.720 --> 00:15:28.590
this basically a string is.

221
00:15:28.590 --> 00:15:28.850
Right?

222
00:15:28.860 --> 00:15:35.310
It doesn't check if this this is a valid string pointing to a fully qualified name of a type at compile

223
00:15:35.310 --> 00:15:35.670
time.

224
00:15:35.700 --> 00:15:40.050
Java compiler doesn't care, but it enforces you to handle the exception.

225
00:15:40.050 --> 00:15:47.400
If this type this is not a valid string or it's not available on the class path at runtime, not compile

226
00:15:47.400 --> 00:15:47.770
time.

227
00:15:47.790 --> 00:15:52.020
So again, I want to really make sure you understand these two differences, right?

228
00:15:52.050 --> 00:15:56.580
Java compiler doesn't care what the contents of this string is.

229
00:15:56.580 --> 00:15:58.470
It just tells you, okay, I don't care.

230
00:15:58.470 --> 00:16:03.960
But if something happens at runtime when you launch your application, I just force you to handle the

231
00:16:03.960 --> 00:16:04.650
exceptions.

232
00:16:04.740 --> 00:16:09.870
Whereas the native image static analyzer, it completely cares about what this is.

233
00:16:09.870 --> 00:16:10.290
Right?

234
00:16:10.800 --> 00:16:15.420
Even if this is not a valid string, native image is still compiles your application.

235
00:16:15.420 --> 00:16:20.190
But obviously when you launch your binary it's going to fail because it tells you I cannot find this

236
00:16:20.190 --> 00:16:21.210
class complex.

237
00:16:21.660 --> 00:16:23.610
Now the last reflection version.

238
00:16:23.760 --> 00:16:26.160
Version three Dynamic loading.

239
00:16:26.910 --> 00:16:31.320
But the class is not hardcoded.

240
00:16:32.010 --> 00:16:39.420
Let's call this soft coded, soft coded class, which means we're not providing a hardcoded string for

241
00:16:39.420 --> 00:16:42.630
the type, but we are even deferring that to runtime.

242
00:16:42.720 --> 00:16:48.690
We're telling the EVM, Hey, at runtime somebody passes the fully qualified name of a class as the

243
00:16:48.690 --> 00:16:50.850
command line argument to our application.

244
00:16:50.850 --> 00:16:58.830
And after you get that, go ahead and search for it on a class path and then create this and then we're

245
00:16:58.830 --> 00:17:00.570
going to call this object, etc..

246
00:17:00.570 --> 00:17:01.000
Right.

247
00:17:01.020 --> 00:17:06.770
Obviously this Java compiler is still enforces you to handle the exception, but this is still compiles

248
00:17:06.780 --> 00:17:08.010
with the Java compiler.

249
00:17:08.010 --> 00:17:13.980
But as you can probably guess, there is no way for the static analyzer of the native image to understand

250
00:17:13.980 --> 00:17:14.870
what this are.

251
00:17:14.880 --> 00:17:15.630
Zero, right?

252
00:17:15.630 --> 00:17:20.700
This is the first command line argument to your job application is going to be there is no way for a

253
00:17:20.700 --> 00:17:25.130
static analyzer to understand what's going on because the string is not hardcoded.

254
00:17:25.140 --> 00:17:30.540
We're saying that it's even even this string is provided at runtime, not only if we're telling the

255
00:17:30.540 --> 00:17:37.800
JVM or the Native Image compiler that this class, this type is available, just look for it at runtime.

256
00:17:37.800 --> 00:17:42.660
We're also think that which class it is, even that question is deferred to runtime.

257
00:17:42.930 --> 00:17:47.850
So this will so this version three is going to fail.

258
00:17:47.880 --> 00:17:51.990
So if the class name is not hardcoded, the static compiler will fail.

259
00:17:52.020 --> 00:17:57.870
What this means is that the Native Image compiler will tell you, I don't know, but I'm going to fall

260
00:17:57.870 --> 00:18:03.570
back to a to creating a binary that is backed by JDK.

261
00:18:03.600 --> 00:18:09.390
You need a JDK and executable file that native image generates is just a launcher for Java.

262
00:18:09.390 --> 00:18:09.780
Right.

263
00:18:14.110 --> 00:18:14.500
Okay.

264
00:18:14.500 --> 00:18:19.720
Now let's head to Eclipse and try to compile these four versions.

265
00:18:19.720 --> 00:18:27.010
Direct version one of reflection, version two, version three, and see to make sure that the three

266
00:18:27.220 --> 00:18:34.570
cases, the first three cases succeed, the last case fails, and then figure out what kind of obviously

267
00:18:34.570 --> 00:18:37.780
reflection is a big part of the gvm right Java ecosystem.

268
00:18:37.780 --> 00:18:43.900
So Native Image should provide some tools to also to some extent handle these cases.

269
00:18:43.900 --> 00:18:44.380
Right.

270
00:18:44.950 --> 00:18:47.770
So let's head to Eclipse here.

271
00:18:47.770 --> 00:18:54.940
I have my code, I have this reflection demo and I have I'm using this complex number class which is

272
00:18:54.940 --> 00:18:56.940
a dependency from a jar.

273
00:18:56.950 --> 00:19:03.070
So in eclipse ID you just right click on your jar file wherever it is build path and add it to the build

274
00:19:03.070 --> 00:19:03.310
path.

275
00:19:03.310 --> 00:19:10.720
I've already added it and Eclipse has this very nice graphical view of which jar files are already on

276
00:19:10.720 --> 00:19:13.860
your class path and obviously you can also add them to your module path.

277
00:19:13.870 --> 00:19:20.440
I've added them in my class path and there is a top level package util for j.

278
00:19:20.440 --> 00:19:24.340
And then there is complex and then complex class.

279
00:19:24.340 --> 00:19:24.790
Right.

280
00:19:27.710 --> 00:19:28.310
All right.

281
00:19:29.030 --> 00:19:30.770
So direct access.

282
00:19:31.700 --> 00:19:37.100
I am directly calling this aesthetic factory method and then creating a complex type and calling the

283
00:19:37.100 --> 00:19:37.580
twist string.

284
00:19:37.580 --> 00:19:39.380
And also looking at the class object.

285
00:19:39.380 --> 00:19:39.980
And then.

286
00:19:42.790 --> 00:19:49.850
And reflection version one is a static loading, which means I call the meta information of the type

287
00:19:49.850 --> 00:19:51.800
by directly accessing the type.

288
00:19:52.770 --> 00:19:55.350
Get a method handler we call this.

289
00:19:55.350 --> 00:20:00.480
And so this method, this returns a method object, which I like to call it a method handler.

290
00:20:00.540 --> 00:20:05.910
A method handler is a object that handles invocation of that method.

291
00:20:05.910 --> 00:20:06.090
Right?

292
00:20:06.120 --> 00:20:10.710
That's how the reflection model works, or the way the JDK provides reflective access.

293
00:20:10.830 --> 00:20:16.500
And then with the method handler you call invoke, obviously this is a static method, so no reference

294
00:20:16.500 --> 00:20:17.520
object, right?

295
00:20:17.520 --> 00:20:21.660
So you just pass the parameters and then it returns an object.

296
00:20:21.660 --> 00:20:28.380
So you cast it to a complex if you want to be more precise and then you call it string on it.

297
00:20:28.620 --> 00:20:30.840
So if I run this, this is going to succeed.

298
00:20:32.110 --> 00:20:32.680
Yeah.

299
00:20:32.980 --> 00:20:34.960
And everything works fine.

300
00:20:34.960 --> 00:20:39.190
And we can also make sure that if we compile, this is going to work fine.

301
00:20:39.190 --> 00:20:46.030
So I'm going to select my reflection demo and we've already set up our native image compiler external

302
00:20:46.060 --> 00:20:49.060
tool to refresh your memory working directory.

303
00:20:49.060 --> 00:20:52.990
We set it to project location, hyphen, class path we pass.

304
00:20:53.110 --> 00:20:58.360
We definitely use the internal environment variable of the eclipse, which is project class path eclipse

305
00:20:58.390 --> 00:21:03.730
is already full of all the jar files, everything that is on the class path and then Java type name.

306
00:21:03.730 --> 00:21:09.310
This is the fully qualified name of the class file which is associated with the Java file that we select

307
00:21:09.310 --> 00:21:11.740
in this we in this tree view.

308
00:21:11.920 --> 00:21:18.640
And then I'm telling it from the working directory, go inside the native image folder which is in the

309
00:21:18.640 --> 00:21:24.730
project location and then create a binary executable file which has the name, which has the name,

310
00:21:24.910 --> 00:21:29.140
which has the same name as the fully qualified name of my class.

311
00:21:29.500 --> 00:21:29.950
Right?

312
00:21:29.950 --> 00:21:36.760
So that's how we said we should set it up and then we just run it and we will see that this is going

313
00:21:36.760 --> 00:21:37.630
to succeed.

314
00:21:37.630 --> 00:21:41.170
So it starts generating the native image.

315
00:21:43.330 --> 00:21:49.180
And let's wait to to finish compiling.

316
00:21:49.180 --> 00:21:56.650
I'm using the most recent version at the time of recording this tutorial, which is 20 2.1.0, which

317
00:21:56.650 --> 00:21:58.720
comes with the JDK 17.

318
00:21:59.110 --> 00:22:01.210
Obviously, I'm on the macOS platform.

319
00:22:01.210 --> 00:22:04.720
We're using the native toolchain of Apple Klang.

320
00:22:05.700 --> 00:22:07.620
So everything so far, so good.

321
00:22:07.620 --> 00:22:08.160
And.

322
00:22:10.300 --> 00:22:17.280
It figured out all the methods in Lightning compilation is the final stage, and after that, linking

323
00:22:17.280 --> 00:22:18.180
and everything worked fine.

324
00:22:18.210 --> 00:22:21.510
It took us about 40 seconds inside this native.

325
00:22:22.200 --> 00:22:24.900
If you refresh this, we get our application.

326
00:22:24.900 --> 00:22:29.640
And again, I've set it up so that the name of the binary is the fully qualified name.

327
00:22:30.560 --> 00:22:33.810
Which means the package that the class.

328
00:22:33.830 --> 00:22:40.370
So if I open up a terminal here, I should be able to execute this binary and get the results.

329
00:22:45.960 --> 00:22:47.310
So.

330
00:22:47.310 --> 00:22:48.450
Yeah, so.

331
00:22:49.340 --> 00:22:51.610
Java native image that reflection demo.

332
00:22:51.620 --> 00:22:53.540
If we run it, everything works fine.

333
00:22:53.540 --> 00:22:55.690
So Native Image compiler works.

334
00:22:55.700 --> 00:23:04.430
There was no complaint and and in the execution succeeds even though we are using a reflective axis.

335
00:23:04.610 --> 00:23:10.580
That's still fine because native image and knows everything about this is able to compile.

336
00:23:10.640 --> 00:23:12.170
What about version two?

337
00:23:15.030 --> 00:23:22.710
So in version two, I tell the if I run this, basically I'm telling the JV team, hey, at runtime.

338
00:23:22.710 --> 00:23:28.740
So the compiler, Java compiler doesn't care about what this string is and obviously it asks.

339
00:23:28.740 --> 00:23:31.080
I'm just throwing out all the exceptions.

340
00:23:31.080 --> 00:23:35.280
Remember, reflective access requires lots of check exceptions to be handled.

341
00:23:36.600 --> 00:23:39.840
For example, for class, for name this throws.

342
00:23:40.050 --> 00:23:41.910
Let's look at the documentation.

343
00:23:43.050 --> 00:23:47.880
Throws linkage error exception in initialize error class not found exception.

344
00:23:47.880 --> 00:23:48.110
Right.

345
00:23:48.120 --> 00:23:54.060
If this string is not a valid string or if it's a valid fully qualified name but it's not available

346
00:23:54.060 --> 00:23:57.270
on a class path at runtime you get these kind of exceptions.

347
00:23:57.960 --> 00:24:03.390
So but if everything works fine, we should be able to run and get exactly the same result.

348
00:24:03.390 --> 00:24:07.470
If I change this name, obviously this complex one doesn't exist on the class path.

349
00:24:07.470 --> 00:24:11.460
So if I run this, I get class not found exception at runtime.

350
00:24:11.460 --> 00:24:11.760
Right.

351
00:24:11.760 --> 00:24:14.220
But the compiler java compiler doesn't care.

352
00:24:14.670 --> 00:24:17.250
Whereas previously here.

353
00:24:18.470 --> 00:24:20.000
Let's quickly go back.

354
00:24:22.870 --> 00:24:25.330
Java compiler doesn't care about this line.

355
00:24:25.330 --> 00:24:30.820
So if I say complex one, obviously this is not going to compile because it says that it's not available

356
00:24:30.820 --> 00:24:31.830
on the class path.

357
00:24:31.840 --> 00:24:32.470
Right.

358
00:24:34.060 --> 00:24:39.190
So always prefer to directly access the types, which means they they should be available on the class

359
00:24:39.190 --> 00:24:40.540
path at compile time.

360
00:24:40.900 --> 00:24:44.680
But sometimes you really want to go for reflective access.

361
00:24:45.450 --> 00:24:47.910
So this one works.

362
00:24:49.350 --> 00:24:55.240
And let's make sure that we can compile with the native image and this reflective axis still work.

363
00:24:55.260 --> 00:25:01.260
So select our Java file, run the external tool and we wait until the compilation finishes.

364
00:25:10.930 --> 00:25:16.160
And after this, we will run the third version and you will see that this is going to fail.

365
00:25:16.180 --> 00:25:21.730
Native image will give us a message that, hey, I wasn't able to figure out what's going on here on

366
00:25:21.730 --> 00:25:23.800
this line class for name org zero.

367
00:25:24.160 --> 00:25:29.350
Because when you say our zero, you don't hardcoded the string again, it means somebody is going to

368
00:25:29.350 --> 00:25:34.660
provide the name of this type to be searched by the runtime add at the runtime itself.

369
00:25:34.660 --> 00:25:40.000
And this is impossible for a static analyzer to figure out what it's going to be, right?

370
00:25:40.810 --> 00:25:47.380
So if we go back to our terminal and launch this again, this is still works fine, right?

371
00:25:47.410 --> 00:25:50.230
No complaints, no errors, nothing.

372
00:25:50.260 --> 00:25:55.150
This reflective axis, the native image, was able to do this perfectly.

373
00:25:56.020 --> 00:26:00.550
Now, finally, the third example is this one.

374
00:26:01.540 --> 00:26:07.870
And obviously, if we run this in eclipse, it's going to fail because we're telling it somebody is

375
00:26:07.870 --> 00:26:09.520
going to provide this.

376
00:26:12.010 --> 00:26:13.330
This argument.

377
00:26:13.330 --> 00:26:17.500
So Eclipse creates a launch configuration so we can go.

378
00:26:17.500 --> 00:26:25.690
And in the arguments provide the program arguments you tell forge complex complex in eclipse ID program

379
00:26:25.690 --> 00:26:30.220
arguments or is that a string array that is going to be passed to the main method?

380
00:26:30.220 --> 00:26:35.770
So apply close and run this again and now this succeeds, right?

381
00:26:35.770 --> 00:26:40.960
So everything works fine because we are providing this argument which is essentially the same as string

382
00:26:40.960 --> 00:26:41.410
here.

383
00:26:41.560 --> 00:26:46.990
Now let's see what happens when we try to compile this version using the native image.

384
00:26:46.990 --> 00:26:50.140
So select our Java run native image.

385
00:26:52.390 --> 00:26:52.840
Now.

386
00:26:52.840 --> 00:26:58.750
This time you will see that the native image warns us about the fact that it couldn't figure out that

387
00:26:58.760 --> 00:27:01.420
reflection part of the code.

388
00:27:01.420 --> 00:27:09.970
And it's going to tell us I'm actually failing the compilation, but I'm going to do a fallback on the

389
00:27:10.480 --> 00:27:16.230
and then create a fallback version, which means it requires a JVM or JDK to be launched.

390
00:27:16.240 --> 00:27:22.210
So warning reflection method Java Land class get declared method invoked at Java Native Image Main Method

391
00:27:22.240 --> 00:27:29.260
Line 34 Aborting a standalone image belt due to reflection use without configuration.

392
00:27:29.260 --> 00:27:35.200
Now in the next lecture I will discuss what this configuration is because you have to now give the Native

393
00:27:35.200 --> 00:27:41.200
Image compiler more information about what's going on and you will see that native image actually provides

394
00:27:41.200 --> 00:27:44.710
a tool to automatically generate these kind of configuration files.

395
00:27:47.140 --> 00:27:53.830
So basically here the the compilation failed in the in building the universe so fail generating but

396
00:27:53.830 --> 00:28:01.150
you see the the native image runs one more time but this time the compilation it looks like it succeeds.

397
00:28:01.150 --> 00:28:07.990
But there is a warning at the end that this image or native executable file is a fallback image that

398
00:28:07.990 --> 00:28:10.060
requires a JDK for execution.

399
00:28:10.060 --> 00:28:16.270
What this means is that this binary that it generated, it's just a launcher for Java, right?

400
00:28:16.270 --> 00:28:24.130
And it says if you use hyphen, hyphen, no fallback argument, I won't do this kind of fallback generation

401
00:28:24.130 --> 00:28:24.880
automatically.

402
00:28:24.890 --> 00:28:25.330
Right?

403
00:28:25.840 --> 00:28:29.560
So right now we got a executable file, which is a fallback.

404
00:28:29.560 --> 00:28:36.330
And if we try to go ahead and run it, it's going to could not find or load main class reflection demo

405
00:28:36.400 --> 00:28:38.260
so this basically fail.

406
00:28:42.130 --> 00:28:52.660
So in the next lecture, I will show you how to actually fix this problem by providing more information

407
00:28:52.750 --> 00:28:54.400
to the Native Image compiler.

408
00:28:54.400 --> 00:28:57.010
So please stay tuned and I'll see the next one.
