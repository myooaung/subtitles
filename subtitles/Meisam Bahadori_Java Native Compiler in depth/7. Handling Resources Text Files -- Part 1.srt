1
00:00:00,780 --> 00:00:03,480
Hello and welcome to another tutorial.

2
00:00:03,480 --> 00:00:08,790
We're going to continue our discussion on Native Image and compiling the Java applications to Native

3
00:00:08,790 --> 00:00:10,080
Executable Files.

4
00:00:10,080 --> 00:00:17,190
And I'm going to discuss a very important and also very interesting topic of how to handle Java resources

5
00:00:17,190 --> 00:00:21,120
when we are compiling a Java application to native executable binary.

6
00:00:21,360 --> 00:00:28,470
Now sometimes at compile time, we need to our source file, it needs to have a load some resources

7
00:00:28,470 --> 00:00:34,740
and then when we run our job applications, obviously JVM handles those kind of resources, but then

8
00:00:34,740 --> 00:00:40,710
how does it work when we actually want to statically compile the application to executable file?

9
00:00:40,890 --> 00:00:46,920
How do we ensure that those resources are correctly taken care of?

10
00:00:46,920 --> 00:00:51,180
So a resource is data, images, audio, text and so on.

11
00:00:51,180 --> 00:00:56,040
And this in this particular lecture, I'm going to focus on the text resources, basically text files

12
00:00:56,430 --> 00:00:58,650
that a Java program needs to access.

13
00:00:58,800 --> 00:01:02,730
Resources can be included in Java Archives Jar as well.

14
00:01:03,150 --> 00:01:07,950
Basically, when you package your application, if there is, let's say a text file or some sort of

15
00:01:07,980 --> 00:01:13,740
CSV file that has some data and your application really requires those to be available.

16
00:01:13,740 --> 00:01:13,950
Right?

17
00:01:13,950 --> 00:01:19,170
When you launch your application, it has to read some stuff from a text file or a CSV file.

18
00:01:19,170 --> 00:01:23,910
You can always also include them in the Java archives or jar because when you write, when you work

19
00:01:23,910 --> 00:01:30,240
on your Java project, eventually the goal is to package it in some format like Java and then distributed

20
00:01:30,240 --> 00:01:31,740
as the binaries like Jar.

21
00:01:31,740 --> 00:01:37,350
So JAR has all the binaries of your job application, which are all the class files, but then you want

22
00:01:37,350 --> 00:01:44,790
to also bundle all the resources, all the files that your application also needs into that Jar Archive.

23
00:01:45,060 --> 00:01:50,550
And obviously, in order for the packaging to successfully bundle them, these resources should be on

24
00:01:50,550 --> 00:01:51,930
the class path at compile time.

25
00:01:51,930 --> 00:01:52,350
Right?

26
00:01:52,650 --> 00:01:55,560
And maybe not.

27
00:01:55,560 --> 00:02:00,690
It's obvious it's not the Java job of the compiler to handle resources.

28
00:02:01,290 --> 00:02:04,740
There is a tool called the jar that comes with the JDK.

29
00:02:04,740 --> 00:02:10,050
It's a command line tool and that can handle packaging your Java, right?

30
00:02:10,050 --> 00:02:12,420
And again, you have to specify the class path for that.

31
00:02:12,420 --> 00:02:15,120
And on the class path those resources should be available.

32
00:02:15,120 --> 00:02:22,440
So if I open up a new terminal here, I have JDK 17 from Oracle on my path.

33
00:02:22,440 --> 00:02:29,340
So Java, hyphen, hyphen, Virgin, we have the JDK 17, and one of the tools is Jar Hyphen, hyphen

34
00:02:29,340 --> 00:02:30,090
version.

35
00:02:30,270 --> 00:02:32,640
It's Java 17 for JDK 17.

36
00:02:32,640 --> 00:02:41,190
And if we just look at the help menu, hyphen, hyphen help, and then as you can see, it has.

37
00:02:41,190 --> 00:02:47,460
So the job of the jar is you give it your application to class path and then it bundles them into a

38
00:02:47,460 --> 00:02:48,330
Java archive.

39
00:02:48,480 --> 00:02:57,960
So Jar hyphen hyphen create is for creating a archive and then you can specify the name of the jar and

40
00:02:57,960 --> 00:03:02,610
then all the classes that you want to bundle and then you want to also specify a manifest.

41
00:03:03,060 --> 00:03:07,380
Again, if you're not familiar, manifest usually has extra information for runtime.

42
00:03:07,560 --> 00:03:13,260
For example, what is the class path when the JVM tries to load the jar?

43
00:03:13,260 --> 00:03:19,260
How the class path should look like for the all the files and packages that are inside the jar jar hyphen

44
00:03:19,260 --> 00:03:19,590
hyphen.

45
00:03:19,590 --> 00:03:22,980
Create a hafen for a file, a food judge.

46
00:03:23,070 --> 00:03:24,270
So this is the US.

47
00:03:24,270 --> 00:03:30,720
Specify the name of the output hyphen, hyphen, main class if you are creating a executable jar and

48
00:03:30,720 --> 00:03:34,020
then if you want to also add module information, you can do that.

49
00:03:34,290 --> 00:03:40,470
And then you see after the classes you can also specify the resources that can be bundled into the jar

50
00:03:40,470 --> 00:03:40,890
file.

51
00:03:41,520 --> 00:03:48,060
And so if you already have created a jar and then you just want to update it with more classes, you

52
00:03:48,060 --> 00:03:49,560
can use the hyphen, hyphen, update.

53
00:03:49,560 --> 00:03:55,230
So you are if you're working on a very large project and you don't want to run the jar on all the classes

54
00:03:55,230 --> 00:03:57,480
all the time, some classes might not change.

55
00:03:57,480 --> 00:04:03,330
Maybe later on you just want to add basically one more class.

56
00:04:03,330 --> 00:04:12,170
Then you can just update the currently available jar and then you see there are some also options hyphen

57
00:04:12,180 --> 00:04:20,280
C or hyphen hyphen create creates the jar a hyphen I or generate index creates index about which classes

58
00:04:20,280 --> 00:04:21,300
packages are there.

59
00:04:21,300 --> 00:04:23,220
Hyphen Lee's List Table of Contents.

60
00:04:23,220 --> 00:04:30,870
Hyphen Update If you want to an archive a jar file, you can use hyphen hyphen extract and it just extracts

61
00:04:30,870 --> 00:04:33,000
the I believe it.

62
00:04:33,460 --> 00:04:39,870
There's only like a class files binary files this exact that hyphen hyphen describe module hyphen hyphen

63
00:04:39,870 --> 00:04:40,680
validate.

64
00:04:41,130 --> 00:04:50,940
And so as you can see in basically not only you can package classes, you can also add manifest and

65
00:04:50,940 --> 00:04:59,910
then you can also add resources so resources can be bundled with your application if you your application.

66
00:05:00,050 --> 00:05:02,630
Really requires some resources to be available.

67
00:05:03,230 --> 00:05:08,770
So about the text file, we cannot directly access resources in a jar file using the file class.

68
00:05:08,780 --> 00:05:14,570
Now, obviously when we say resource and accessing a file, your first thought should go to the file

69
00:05:14,570 --> 00:05:16,670
class that comes with the Java IO package.

70
00:05:16,670 --> 00:05:17,090
Right.

71
00:05:17,450 --> 00:05:21,320
And file is an abstraction of the operating system.

72
00:05:21,320 --> 00:05:27,680
Remember operating system terminals, they understand files, write file paths, file permissions.

73
00:05:27,680 --> 00:05:33,260
We discussed all of these concepts before, but then Java is all about abstraction.

74
00:05:33,260 --> 00:05:41,270
Java wants to everybody to on any possible platform like Windows, Mac OS, Intel, CPU, AMD, CPU,

75
00:05:41,270 --> 00:05:47,300
arm, CPU, Java wants everybody to use the same API for handling this kind of stuff.

76
00:05:47,300 --> 00:05:52,610
That's why file is more like an abstraction of the underlying operating system file system.

77
00:05:52,700 --> 00:05:56,210
Different operating systems have managed the files differently.

78
00:05:56,210 --> 00:06:01,160
Remember a file or data on a permanent storage device like a hard disk.

79
00:06:01,280 --> 00:06:03,620
It's just to a computer, to a machine.

80
00:06:03,620 --> 00:06:05,300
It's just zeros and ones, right?

81
00:06:05,510 --> 00:06:11,480
The way that the operating system interprets them, gives them actual meaning that the humans understand.

82
00:06:11,480 --> 00:06:11,720
Right?

83
00:06:11,720 --> 00:06:15,020
But under the hood it's just zeros and ones, a sequence of bytes.

84
00:06:15,020 --> 00:06:20,900
And you might be already familiar that Java provides byte streams, write a stream's input stream and

85
00:06:20,900 --> 00:06:21,770
output string.

86
00:06:21,800 --> 00:06:23,900
Same with even C++ APIs.

87
00:06:23,900 --> 00:06:24,130
Right.

88
00:06:24,140 --> 00:06:27,170
They all handle files in a stream of bytes.

89
00:06:27,920 --> 00:06:29,750
More like sequential access.

90
00:06:29,750 --> 00:06:30,410
I believe you.

91
00:06:30,590 --> 00:06:36,560
You can't really access a file in a parallel way because it's just the limitations that the operating

92
00:06:36,560 --> 00:06:38,960
system have on how to access the files.

93
00:06:39,530 --> 00:06:48,260
So a file class that the Java provides in the Java IO package, so I'm going to write it a Java IO package

94
00:06:50,210 --> 00:06:55,130
file class is an abstraction of the underlying operating system OS file system you don't care about.

95
00:06:55,130 --> 00:06:59,060
If you're using Linux, it uses its own file system.

96
00:06:59,390 --> 00:07:03,110
Mac OS uses its own file system, Windows and TFS right.

97
00:07:03,110 --> 00:07:07,820
It uses its own file system, different operating system used their own file system.

98
00:07:08,120 --> 00:07:12,890
Let's focus on a file that has textual context or content or characters.

99
00:07:12,890 --> 00:07:16,730
Again, characters don't have any meaning to a machine, to the hardware, right?

100
00:07:17,180 --> 00:07:21,080
Characters are just a sequences of zeros and ones like any other data.

101
00:07:21,770 --> 00:07:23,120
What gives them meaning?

102
00:07:23,120 --> 00:07:27,350
The way the applications that we write interpret those sequences of bytes.

103
00:07:27,350 --> 00:07:31,880
That's why we have encoding like UTF eight, UTF 16, etc..

104
00:07:31,880 --> 00:07:36,980
What this means again, if you're not familiar, I'm going to give you a quick explanation.

105
00:07:37,130 --> 00:07:41,490
Encoding means you look at the context content of a text file, right?

106
00:07:42,440 --> 00:07:43,820
Or any file doesn't matter.

107
00:07:43,820 --> 00:07:47,450
It doesn't have to end with a text file or any kind of file.

108
00:07:47,450 --> 00:07:47,870
Right.

109
00:07:49,180 --> 00:07:55,390
And then what happens is that you start reading all the contents in the sequence of bytes, and then

110
00:07:55,540 --> 00:08:01,810
if this the contents represent text, then based on the encoding you choose, let's say you choose UTF

111
00:08:01,810 --> 00:08:07,450
eight, which means every eight beats or every one byte translates or maps to a character.

112
00:08:07,570 --> 00:08:14,260
And then the applications, the softwares that we use, read those bytes and on the display they show

113
00:08:14,260 --> 00:08:15,250
those characters, right?

114
00:08:15,580 --> 00:08:18,610
Really literally the concept of fonts.

115
00:08:19,150 --> 00:08:25,150
Every operating system has a font library and then based on the characters, it can display like every

116
00:08:25,150 --> 00:08:29,260
pixel and pixel on their screen so that that character is shown right.

117
00:08:29,260 --> 00:08:35,800
So eventually the job of the applications and the operating system together is read those bytes, translate

118
00:08:35,800 --> 00:08:43,300
them or map them to characters and lighter pixels on the screen based on the font library that you choose,

119
00:08:43,300 --> 00:08:46,870
that the application chooses, so that you see the correct actors.

120
00:08:46,870 --> 00:08:53,080
And Java, I believe, uses UTF 16 internally for managing for translating

121
00:08:55,570 --> 00:08:59,200
basically characters or streams of bytes into characters.

122
00:09:00,870 --> 00:09:04,050
All right, so we can use the scanner class to read the text file.

123
00:09:04,050 --> 00:09:07,450
Again, if you're not familiar with the scanner, I highly recommend that you get to know it.

124
00:09:07,470 --> 00:09:12,630
It's a very, very versatile class, which, especially in the most recent versions of the JDK, it's

125
00:09:12,630 --> 00:09:13,890
very handy, very useful.

126
00:09:13,890 --> 00:09:19,650
Whenever basically whenever you want to read some text, not just from the file, you will see that

127
00:09:19,650 --> 00:09:23,700
I will show you examples from anywhere, even from the terminal, right?

128
00:09:23,700 --> 00:09:28,980
If your application wants to get some inputs from the user in the format of text I mentioned before,

129
00:09:29,010 --> 00:09:32,400
that terminal is just a textual application.

130
00:09:32,400 --> 00:09:35,400
It's a great graphical interface that only works as a text.

131
00:09:35,400 --> 00:09:37,830
Write everything that the user inputs to a terminal.

132
00:09:37,890 --> 00:09:39,780
It's just a string, right?

133
00:09:40,590 --> 00:09:42,660
So a scanner is a very versatile class.

134
00:09:42,660 --> 00:09:47,760
Let's say we have a text file and we want to read its contents and then bring those content into our

135
00:09:47,760 --> 00:09:48,480
application.

136
00:09:48,480 --> 00:09:52,740
Then we use a scanner class and it's in the Java Util, right.

137
00:09:52,740 --> 00:09:54,540
It's from Java util package.

138
00:09:55,590 --> 00:10:01,020
And then it's a very powerful class for dealing with reading and tokenizing text.

139
00:10:01,020 --> 00:10:07,350
So a scanner reads the text, which means it reads a file, you give it a file and then it reads it

140
00:10:07,350 --> 00:10:11,460
byte by byte or based on the default character encoding of the platform.

141
00:10:11,460 --> 00:10:11,730
Right.

142
00:10:11,730 --> 00:10:19,050
So when you install Java, JVM knows the default encoding platform and then it reads and tokenize is

143
00:10:19,050 --> 00:10:26,910
tokenizing means if you have like a stream of characters, there's always a whitespace that it's delimiting,

144
00:10:26,910 --> 00:10:31,440
it's a delimiter or indicator of where a word is stars and where a word ends.

145
00:10:31,440 --> 00:10:31,890
Right.

146
00:10:32,220 --> 00:10:36,420
Obviously, if we have a word that has multiple parts, we usually use hyphens.

147
00:10:36,420 --> 00:10:40,260
So we don't have a space to say that it's a two it's a one word.

148
00:10:40,260 --> 00:10:44,160
Whenever you have white space, it means you definitely have two words.

149
00:10:44,280 --> 00:10:46,950
So the scanner organizes them based on the white spaces.

150
00:10:46,950 --> 00:10:53,700
And then and then you can ask a scanner to print them to the console, etc..

151
00:10:54,180 --> 00:10:59,070
So the path relative or absolute should be passed to a scanner class as a file.

152
00:10:59,070 --> 00:11:03,810
So if you look at the constructor of the scanner, it has a huge number of constructors.

153
00:11:03,810 --> 00:11:09,150
You can give it a file so that tell it, hey, it's going to go access the contents of this file, read

154
00:11:09,150 --> 00:11:11,400
them and then encode them as characters.

155
00:11:11,400 --> 00:11:11,640
Right?

156
00:11:11,640 --> 00:11:16,800
Remember, a scanner is all about text or you can tell it input a stream instead of telling the scanner,

157
00:11:16,800 --> 00:11:17,430
hey, go.

158
00:11:17,670 --> 00:11:19,680
Instead of giving it a file, give it an input.

159
00:11:19,680 --> 00:11:24,990
A stream again, a stream means it's a sequence of bytes, and then a scanner again reads those bytes.

160
00:11:24,990 --> 00:11:32,070
And based on the encoding, the character encoding, it translates them into characters.

161
00:11:32,310 --> 00:11:33,230
Path pass.

162
00:11:33,240 --> 00:11:40,710
I believe it's a more, more recent concept than the file, but it's more or less the same story.

163
00:11:40,710 --> 00:11:46,890
Path means, hey, there is a text there, text file and in this path and then go access it readable.

164
00:11:46,890 --> 00:11:53,070
Anything that readable in anything that can be read, you can also do that readable by channel.

165
00:11:53,070 --> 00:11:57,420
Again, we're a scanner, we feed a scanner bytes or a string.

166
00:11:57,420 --> 00:12:05,760
And in the old versions of the JDK, if this string was actually a path to a file, then a scanner could

167
00:12:05,760 --> 00:12:06,270
access it.

168
00:12:06,270 --> 00:12:08,550
But they actually remove that functionality.

169
00:12:08,550 --> 00:12:15,060
So when you give a scanner, the constructor of the scanner, a string, it actually tokenize that exactly

170
00:12:15,060 --> 00:12:15,780
that a string.

171
00:12:15,780 --> 00:12:19,740
So it's not accessing the file based on this string as a file path.

172
00:12:19,980 --> 00:12:25,770
So if you want to a scanner to access a file, you have to use a file object and the other parts are

173
00:12:25,770 --> 00:12:27,270
the same, the other construct the same.

174
00:12:27,270 --> 00:12:34,590
But then you can also provide a character set, how a scanner translates those bytes that it reads to

175
00:12:34,590 --> 00:12:37,320
characters so you can provide, I believe by default.

176
00:12:37,320 --> 00:12:42,870
Obviously the constructors that don't have this character said they use the default platform character

177
00:12:42,870 --> 00:12:49,170
encoding, which most likely is going to be UTF eight, or you can provide the name of the character

178
00:12:49,170 --> 00:12:56,160
set or character encoding as a string, cursed, cursed and all the ones, right?

179
00:12:56,160 --> 00:13:01,950
So the construct is that don't take a cast and the construct is that also take a character set or the

180
00:13:01,950 --> 00:13:02,790
encoding.

181
00:13:04,020 --> 00:13:10,860
All right, so let's head to Eclipse and try to, first of all, access a text file and read the contacts

182
00:13:11,010 --> 00:13:12,210
using a scanner.

183
00:13:12,570 --> 00:13:18,360
And then and then we come back, look at the next slide to see how we're going to handle Java resources

184
00:13:18,360 --> 00:13:23,640
like a text file, how to embed it actually in the native image that we compile and built.

185
00:13:24,330 --> 00:13:27,630
So inside this eclipse, I created this class resource demo.

186
00:13:27,870 --> 00:13:30,930
I have this very simple run me that is edge again.

187
00:13:30,930 --> 00:13:33,210
Extensions don't have that much meaning.

188
00:13:33,210 --> 00:13:37,350
It's just because any file, regardless of its extension, is a binary file.

189
00:13:37,380 --> 00:13:42,600
The contents on the hard disk are saved as zeros and ones.

190
00:13:42,600 --> 00:13:46,140
So when I double click on this, the this tab pops up.

191
00:13:46,140 --> 00:13:47,280
This is a plugin, right?

192
00:13:47,280 --> 00:13:53,600
That eclipse has that reads the context and then if it tries to display them as text file, right.

193
00:13:53,610 --> 00:13:59,280
Tries to use the UTF eight encoding or whatever default encoding that eclipse uses to.

194
00:13:59,480 --> 00:14:01,430
Convert those binaries into text file.

195
00:14:02,600 --> 00:14:05,630
So let's say I want to read the contents of this file.

196
00:14:05,630 --> 00:14:07,700
So again, it's something that I want to read.

197
00:14:07,700 --> 00:14:16,760
So I immediately go and create a scanner, a scanner, a scanner, a new scanner, and then I want to

198
00:14:16,760 --> 00:14:17,510
read from a file.

199
00:14:17,510 --> 00:14:23,300
So if I use the A string and tell it the path to this file relative fast.

200
00:14:23,300 --> 00:14:29,480
So when I want when I run my job application using Eclipse, it sets the working directory to the project

201
00:14:29,480 --> 00:14:33,140
route and my file run me that is in the project route.

202
00:14:33,140 --> 00:14:38,380
So I can say from wherever you run your application, run me that search.

203
00:14:38,390 --> 00:14:38,990
All right.

204
00:14:39,320 --> 00:14:49,670
And then as kind of follows the iterator iterator pattern so we can say while a scanner has next, we're

205
00:14:49,670 --> 00:14:57,410
going to print out a scanner dot next, which whenever a scanner reads, obviously it's kind of also

206
00:14:57,410 --> 00:15:05,120
provide some buffering, which is good because buffering helps speeding up the process because usually

207
00:15:05,120 --> 00:15:11,030
accessing the file, accessing a data on a hard disk is the bottleneck, right?

208
00:15:11,030 --> 00:15:16,010
If the data is already in the RAM random access memory, the access is going to be fast.

209
00:15:16,010 --> 00:15:21,080
The fastest access is obviously when the data is actually in the cache of the CPU.

210
00:15:21,110 --> 00:15:22,280
It's very close, right?

211
00:15:22,700 --> 00:15:28,040
So from the cache to the ram to the hard disk, these are where the bottlenecks start to show up.

212
00:15:28,610 --> 00:15:34,910
But here we are when a scanner reads the this text is going to tokenize it.

213
00:15:34,910 --> 00:15:40,940
So if we run this, you might be surprised that you were hoping to access the contents of this file,

214
00:15:40,940 --> 00:15:42,350
but it's not the case anymore.

215
00:15:42,350 --> 00:15:46,820
So when you pass a string, it's can actually tokenize the string itself.

216
00:15:46,820 --> 00:15:50,660
That string becomes the source of the textual content.

217
00:15:51,080 --> 00:15:54,950
For example, if I say Hello, how are you doing?

218
00:15:54,950 --> 00:15:55,340
Right.

219
00:15:55,340 --> 00:16:01,040
And if I run it, you actually see that a scanner tokenize this string itself, right?

220
00:16:01,040 --> 00:16:02,480
So you cannot pass a string.

221
00:16:02,480 --> 00:16:06,710
That content contains a path to a file and a scanner won't work.

222
00:16:06,710 --> 00:16:12,890
So you have to pacify a new file and then a string path to the file class, which is an abstraction

223
00:16:12,890 --> 00:16:16,400
of the underlying file system of the operating system.

224
00:16:16,400 --> 00:16:18,690
Now you can tell it run me that asset.

225
00:16:18,890 --> 00:16:23,120
Obviously, when you're accessing the file, the file might not exist, the name might be wrong.

226
00:16:23,120 --> 00:16:26,210
So you have to enter handle that file not found exception.

227
00:16:27,680 --> 00:16:29,240
All right, so let's run this.

228
00:16:29,720 --> 00:16:37,130
Now we are accessing the contents of this file word by word, because this next method goes more by

229
00:16:37,130 --> 00:16:37,370
word.

230
00:16:37,370 --> 00:16:39,140
We can also read line by line.

231
00:16:39,140 --> 00:16:41,090
So has next line.

232
00:16:41,090 --> 00:16:44,390
Again, a scanner is a very powerful iterator.

233
00:16:44,390 --> 00:16:49,340
So next line you can also directly read numbers integers that will float.

234
00:16:49,520 --> 00:16:53,510
So if I run this is just reads the first line and then terminates, right?

235
00:16:53,510 --> 00:16:56,540
So that's how we are accessing textual contents.

236
00:16:56,540 --> 00:17:06,710
And so if we use another constructor that is scanner that asks us for the character encoding, so we

237
00:17:06,710 --> 00:17:12,020
have file and then we can say a car set which comes from Java now dot.

238
00:17:16,820 --> 00:17:20,990
Default for name, class available car sets, it creates a map.

239
00:17:20,990 --> 00:17:25,370
So let's look at the first look at the available car sets.

240
00:17:25,370 --> 00:17:25,940
Right.

241
00:17:26,030 --> 00:17:27,530
Or character encoding.

242
00:17:30,520 --> 00:17:41,950
Lets available, can search and then it's a sorted map so we can say available car sets for each and

243
00:17:41,950 --> 00:17:48,250
then for key and value pairs we're going to do a see out.

244
00:17:50,190 --> 00:17:55,680
Basically he goes to value and then dart formatted K and V.

245
00:17:57,490 --> 00:17:59,230
Let's see what we get here.

246
00:18:00,490 --> 00:18:04,390
So you see there are lots of lots of different character in Coatings.

247
00:18:05,500 --> 00:18:08,080
One of them should be UTF eight.

248
00:18:08,260 --> 00:18:20,050
Obviously, one of them is going to be UTF 16, UTF 16, basically B and L, a little Indian, something

249
00:18:20,050 --> 00:18:21,130
like that, I believe.

250
00:18:21,130 --> 00:18:21,940
Or these are something.

251
00:18:22,040 --> 00:18:31,180
So these are extensions of UTF 16, UTF 32 and Windows encoding and then other encoding.

252
00:18:31,180 --> 00:18:33,910
So Java supports lots of lots of different encoding.

253
00:18:34,120 --> 00:18:39,520
So let's see what happens if we run out a scanner.

254
00:18:42,300 --> 00:18:48,960
But then we're going to use the available car sets and then get it's a map.

255
00:18:48,960 --> 00:18:55,470
And then we're going to say UTF eight, which I believe it's going to be.

256
00:18:57,520 --> 00:19:01,180
So it has the IO exceptions.

257
00:19:01,180 --> 00:19:03,580
Let's see what exception we're going to handle.

258
00:19:03,580 --> 00:19:04,900
It's just IO exception.

259
00:19:04,900 --> 00:19:11,290
So when you pass the file, it uses file not for an exception, but this constructor throws IO exception,

260
00:19:11,290 --> 00:19:13,450
so it's not justified.

261
00:19:13,930 --> 00:19:15,130
So let's run this.

262
00:19:16,480 --> 00:19:20,770
Cannot enjoy Cassatt nude because Cassatt is null.

263
00:19:21,280 --> 00:19:22,240
That's interesting.

264
00:19:22,240 --> 00:19:23,380
So let's see.

265
00:19:23,710 --> 00:19:25,120
UTF eight.

266
00:19:25,810 --> 00:19:27,340
Do we have a dash here?

267
00:19:27,340 --> 00:19:28,900
UTF?

268
00:19:29,260 --> 00:19:29,620
Yeah.

269
00:19:29,620 --> 00:19:30,640
Yeah, we have to use a dash.

270
00:19:30,640 --> 00:19:33,580
So, UTF dash eight.

271
00:19:37,230 --> 00:19:39,690
So let's also come in this print.

272
00:19:40,780 --> 00:19:41,110
Yeah.

273
00:19:41,110 --> 00:19:41,830
We are still doing.

274
00:19:41,830 --> 00:19:45,520
What if we changed the character encoding to UTF 16?

275
00:19:46,420 --> 00:19:48,460
Now we're kind of not seeing anything.

276
00:19:48,730 --> 00:19:52,690
What if UTF eight UTF 32?

277
00:19:54,480 --> 00:20:02,580
Still nothing so UTF eight works because that takes while was created with UTF X encoding right.

278
00:20:02,600 --> 00:20:07,700
Which is, I believe, the default encoding of the MAC OS operating system.

279
00:20:09,140 --> 00:20:11,420
But if we print this more.

280
00:20:13,460 --> 00:20:13,960
Let's see.

281
00:20:13,970 --> 00:20:15,410
Let's try another thing.

282
00:20:18,740 --> 00:20:22,340
ISO 8859 something like this.

283
00:20:22,460 --> 00:20:28,530
Let's see what we get now we this is still works fine interestingly.

284
00:20:29,280 --> 00:20:31,280
Yeah java hyphen version.

285
00:20:31,580 --> 00:20:39,260
So I mean if you know that your particular text file has a very specific encoding, you can directly

286
00:20:39,260 --> 00:20:40,490
use it in the scanner class.

287
00:20:40,490 --> 00:20:40,940
Right.

288
00:20:43,040 --> 00:20:49,280
And then you can also access as I mentioned before, you can also access, for example, in scanner

289
00:20:49,280 --> 00:20:56,330
is very versatile in the sense that it's you can hook it up not only to files or feed it directly a

290
00:20:56,340 --> 00:20:56,570
string.

291
00:20:56,570 --> 00:21:03,200
You can also hook it up to a streams for example system that in and we've used this before.

292
00:21:03,890 --> 00:21:10,400
Oh by the way, eclipse compiler complains that a scanner is consuming a resource so it has to be closed.

293
00:21:11,390 --> 00:21:16,550
And I've mentioned this before that whenever you hook up the scanner to the system input, you don't

294
00:21:16,550 --> 00:21:22,790
really need to close it because system as soon as you run your job application, the system is always

295
00:21:22,790 --> 00:21:23,300
open.

296
00:21:23,300 --> 00:21:29,300
That's the input system that is always open and it doesn't close up until you terminate your job application.

297
00:21:29,960 --> 00:21:38,870
So basically we can read something and then so let's run this.

298
00:21:39,560 --> 00:21:42,020
So we feed some information.

299
00:21:42,050 --> 00:21:44,020
Hello, how are you doing?

300
00:21:44,030 --> 00:21:49,160
And then it prints it to the console and then we can say something else.

301
00:21:49,340 --> 00:21:52,880
So the system is always open and it's always listening.

302
00:21:53,870 --> 00:21:55,280
New input.

303
00:21:55,280 --> 00:21:57,980
And then a scanner is also always reasoning.

304
00:21:57,980 --> 00:22:00,290
It's kind of listens to this input stream.

305
00:22:00,290 --> 00:22:05,210
Whenever there are some bytes available, it reads them and then translate them into character.

306
00:22:05,210 --> 00:22:05,750
All right.

307
00:22:05,750 --> 00:22:08,690
So this was the introduction to this string.

308
00:22:09,620 --> 00:22:11,210
Now what I would like to.

309
00:22:11,930 --> 00:22:12,690
This was inside.

310
00:22:12,740 --> 00:22:14,540
This was the introduction to the scanner.

311
00:22:14,870 --> 00:22:21,740
What I would like to quickly show before ending this lecture is that we're going to give the new file.

312
00:22:21,740 --> 00:22:23,120
And it was run me.

313
00:22:23,120 --> 00:22:24,110
That s h.

314
00:22:25,310 --> 00:22:27,740
Let's also remove the unnecessary imports.

315
00:22:27,770 --> 00:22:29,660
If you run this, this is going to work.

316
00:22:29,660 --> 00:22:30,020
Fine.

317
00:22:30,020 --> 00:22:38,720
And then if I select my this class and try to compile it to the native executable, what you will see

318
00:22:38,720 --> 00:22:44,180
that obviously the compiler succeeds because the static compiler of the native image doesn't care what

319
00:22:44,180 --> 00:22:44,570
this is.

320
00:22:44,570 --> 00:22:44,840
Right?

321
00:22:44,840 --> 00:22:46,070
This is string, it doesn't care.

322
00:22:46,070 --> 00:22:48,140
It just cares that you're accessing a file.

323
00:22:48,320 --> 00:22:49,670
So that's fine.

324
00:22:50,090 --> 00:22:55,130
It says, okay, that voice should be available at runtime after the compilation succeeds.

325
00:22:55,130 --> 00:22:57,050
So you will see that the compilation succeeds.

326
00:22:57,050 --> 00:23:04,280
But obviously when we run the file, things are not going to work that well because first of all, in

327
00:23:04,280 --> 00:23:10,040
our source code we're using a relative path and this relative path will cause some problem.

328
00:23:10,070 --> 00:23:16,310
The other thing is that even if we use an absolute path to this file run media search, if when I compile

329
00:23:16,310 --> 00:23:23,210
that absolute path is hardcoded in the source file, if I give it to some other person on some other

330
00:23:23,210 --> 00:23:25,220
computer, if they run it, they will not.

331
00:23:25,280 --> 00:23:31,850
The application will crash because that hardcoded file is specific to my directories.

332
00:23:31,850 --> 00:23:32,340
Right.

333
00:23:32,360 --> 00:23:35,150
So we have this compiled file if I run this.

334
00:23:38,160 --> 00:23:42,900
I say resource demo, it's going to fail because find not found exception, right?

335
00:23:43,740 --> 00:23:49,470
Because I said you're running your job application and in the binary of this application there is this

336
00:23:49,470 --> 00:23:51,180
dot run dot asset.

337
00:23:52,440 --> 00:23:54,990
What this means is that we're using a relative path.

338
00:23:55,230 --> 00:24:04,530
So if I try to go one level up, I'm in the route of my project and try to say Native Job, and if I

339
00:24:04,530 --> 00:24:05,990
run this, this works fine.

340
00:24:06,000 --> 00:24:06,690
Why?

341
00:24:06,720 --> 00:24:13,440
Because now in this binary, it tries to search from the current working directory, which is now here

342
00:24:13,800 --> 00:24:19,330
because we use dot in this string and tries to find a file that called the run me search.

343
00:24:19,350 --> 00:24:22,710
And that void now exists in this working directory.

344
00:24:25,390 --> 00:24:27,570
It is run me dataset.

345
00:24:27,570 --> 00:24:27,960
Right?

346
00:24:27,960 --> 00:24:34,770
So now the application six is and you see the problem here we we use Java to be platform independent

347
00:24:34,770 --> 00:24:42,180
but now that when we compile to the native executable file that that hardcoded name of file is is problematic

348
00:24:42,180 --> 00:24:45,390
because first of all, it depends where we run it from, right?

349
00:24:45,390 --> 00:24:51,120
If we use a relative path in our source file, then you have to run your job application really from

350
00:24:51,120 --> 00:24:55,700
a from a specific working directory to make it work.

351
00:24:55,710 --> 00:25:02,670
If I go anywhere else, let's say go into a this app directory and then try to say that, okay, go

352
00:25:02,670 --> 00:25:05,880
one level up, go into the native directory and run this.

353
00:25:06,450 --> 00:25:11,760
This is going to fail because again, this dot is like astronomy dot search means from wherever you

354
00:25:11,760 --> 00:25:17,970
run this binary executable binary, there should be a file in the same working directory called Run

355
00:25:17,970 --> 00:25:18,630
Me Dataset.

356
00:25:18,630 --> 00:25:21,960
And obviously in this app directory there is no such file.

357
00:25:21,960 --> 00:25:22,440
Right?

358
00:25:22,680 --> 00:25:29,610
So we want to write a Java code that is platform independent, which means we don't want to tie ourself

359
00:25:29,610 --> 00:25:32,370
to a particular hardcoded file name.

360
00:25:32,370 --> 00:25:38,370
Instead, we want the JV team to somehow locate that resource when we run our Java application, because

361
00:25:38,370 --> 00:25:42,270
once that happens, the native image has a compact version of the JVM inside.

362
00:25:42,270 --> 00:25:52,710
So once our Java code is independent of how to, it's not directly tied to the file system of the platform

363
00:25:52,710 --> 00:25:55,440
and it somehow can dynamically locate the resources.

364
00:25:55,440 --> 00:26:01,380
Then when we compile to the native executable file, then there shouldn't be any problem.

365
00:26:01,380 --> 00:26:02,040
All right.

366
00:26:02,040 --> 00:26:04,260
So this is a topic of the next lecture.

367
00:26:04,470 --> 00:26:05,610
I hope you enjoyed this one.

368
00:26:05,610 --> 00:26:08,040
Please stay tuned and I'll see the next one.
