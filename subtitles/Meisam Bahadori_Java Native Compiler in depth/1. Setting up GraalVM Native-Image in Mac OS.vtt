WEBVTT
1
00:00:01.750 --> 00:00:05.200
Hello and welcome to another tutorial.

2
00:00:05.230 --> 00:00:12.760
We are now going to start looking at the VM native image, which as I mentioned before, it relies on

3
00:00:12.760 --> 00:00:20.020
the default platform toolchain to compile your Java application into native executable binary.

4
00:00:20.050 --> 00:00:24.400
In that way, the startup of your application becomes very fast.

5
00:00:24.430 --> 00:00:29.770
The performance of your application of your Java application after compilation becomes very similar

6
00:00:29.770 --> 00:00:36.010
to a C++ application, but we know that the developer developing a job application is much faster than

7
00:00:36.010 --> 00:00:42.610
developing a C++ application because you don't need to worry about memory management, garbage collection,

8
00:00:42.610 --> 00:00:43.480
this kind of stuff.

9
00:00:44.590 --> 00:00:46.570
All right, gravel, VM, native image.

10
00:00:46.660 --> 00:00:52.540
We can use VM to convert our Java code into a command line executable binary.

11
00:00:52.540 --> 00:00:56.140
And when I say Java code, it means the class files, right?

12
00:00:56.260 --> 00:00:59.110
Third class files because the VM.

13
00:01:02.040 --> 00:01:10.110
Basically LLVM works on the class file, so you write your Java source code and then you use the Java

14
00:01:10.110 --> 00:01:12.930
compiler to convert your application into the class file.

15
00:01:12.990 --> 00:01:13.320
Right.

16
00:01:13.320 --> 00:01:15.990
That's and then you can test it by running the JV.

17
00:01:16.320 --> 00:01:19.860
And once your application is done, you've you finished testing.

18
00:01:19.860 --> 00:01:28.050
Now you can invoke the native image from LLVM to compile your class files into an executable binary

19
00:01:28.680 --> 00:01:30.510
album has the native image tool.

20
00:01:30.510 --> 00:01:33.000
When you download it, you have to.

21
00:01:33.870 --> 00:01:37.710
It doesn't come as a standard part of the VM.

22
00:01:38.490 --> 00:01:40.020
You have to go ahead and download it.

23
00:01:40.060 --> 00:01:48.750
Grohl VM provides a command line tools, so you have to manually install it in a starlet using a Google

24
00:01:48.750 --> 00:01:49.620
Updater.

25
00:01:49.620 --> 00:01:52.920
So Google Updater command line or juju.

26
00:01:53.070 --> 00:01:56.340
So GEO is a command line tool that comes with the growl.

27
00:01:56.340 --> 00:02:02.670
And again, the VM is essentially a JDK, which means it has a home directory and then a directory that

28
00:02:02.670 --> 00:02:09.960
has all the Java or Java or C, etc., but it just has more extra development tools like the Google

29
00:02:09.960 --> 00:02:12.420
Updater and then you can install Native Image.

30
00:02:12.420 --> 00:02:16.620
So it's essentially something that is built on top of a JDK, right?

31
00:02:16.620 --> 00:02:20.850
And I believe it comes with the open JDK version of the Java.

32
00:02:21.120 --> 00:02:23.790
So you can download the free VM community edition.

33
00:02:23.790 --> 00:02:28.710
So it has a free edition, which is Community Edition and then Enterprise Edition, which has a little

34
00:02:28.710 --> 00:02:31.470
bit more features for our use cases.

35
00:02:31.470 --> 00:02:37.200
In terms of just compiling our Java application to Native binaries, the community edition is definitely

36
00:02:37.200 --> 00:02:42.030
enough, so you can just go to Google VMs, org forward slash downloads.

37
00:02:42.030 --> 00:02:45.810
So let me just open it up here.

38
00:02:45.810 --> 00:02:51.840
And as you can see, we have this community edition and then you want to click on the downloads and

39
00:02:51.840 --> 00:03:03.000
gradle VM has binaries for any platform, Linux, Mac OS and Windows and for Linux X 64 architecture

40
00:03:03.000 --> 00:03:06.480
and an ARM architecture is available for macOS.

41
00:03:06.480 --> 00:03:15.330
Both x 64 and ARM is available because Apple switched to M1 processor, which are based on ARM architecture

42
00:03:15.330 --> 00:03:23.190
for Windows only x 64, meaning Intel and CPU Intel and AMD architectures are available.

43
00:03:23.400 --> 00:03:29.970
So you can click on download, but it says that if you are on Mac OS after you download it in the recent

44
00:03:29.970 --> 00:03:36.690
version of the Mac OS like from Catalina and later you have to remove the quarantine attributes that

45
00:03:37.620 --> 00:03:40.530
basically the Mac OS sets for untrusted files.

46
00:03:40.530 --> 00:03:46.920
So when you download this, you want to copy and paste this to the terminal, basically pass to the

47
00:03:46.920 --> 00:03:55.050
general VM folder, you have to substitute this and then sudo x attribute hyphen or hyphen dx compute

48
00:03:55.050 --> 00:03:58.230
apple quarantine and then there all the VM folder.

49
00:03:58.230 --> 00:03:58.620
Right?

50
00:03:58.800 --> 00:04:03.600
So this is a little bit of so Mac OS in the recent version, it adds more security to the files, make

51
00:04:03.600 --> 00:04:06.840
sure that the files are not malicious, etc..

52
00:04:07.020 --> 00:04:13.800
So for example, let's say we want to download the and I recommend you basically download the JDK 17

53
00:04:13.800 --> 00:04:16.050
version, which is like temp support.

54
00:04:16.050 --> 00:04:17.580
It has a nice job of features.

55
00:04:17.580 --> 00:04:22.170
So we're going to look at the macros AMD 64 and then click on the download.

56
00:04:22.200 --> 00:04:30.660
It goes ahead and downloads it and then you just basically it's a zip folder, right?

57
00:04:30.660 --> 00:04:32.910
And it's about 500 megabytes.

58
00:04:32.910 --> 00:04:41.190
And then after that you unzip it and move it to your forward slash library, Java, Java, virtual machines.

59
00:04:41.190 --> 00:04:41.580
Right.

60
00:04:41.580 --> 00:04:44.370
So I'm going to wait for this to finish up.

61
00:04:44.400 --> 00:04:49.050
So it's just a zip, zip file and you unzip it and move it there.

62
00:04:49.050 --> 00:04:55.350
But before using it, you have to run this command line in macros if you are using Catalina or later

63
00:04:55.350 --> 00:05:00.660
to make sure that the operating system doesn't flag these files as malicious.

64
00:05:00.660 --> 00:05:00.900
Right.

65
00:05:00.900 --> 00:05:01.520
You have to.

66
00:05:01.620 --> 00:05:07.080
So I've already previously installed this, so I'm going to go to folder library, Java, Java, virtual

67
00:05:07.080 --> 00:05:07.800
machines.

68
00:05:07.950 --> 00:05:17.010
And as you can see, I have grabbed VM, Java 11 and VM Community Edition C Java 17 and it's very similar

69
00:05:17.010 --> 00:05:25.230
to how the JDK so it starts with contents and then home and then it has a bean directory and then J

70
00:05:25.230 --> 00:05:31.110
mod, these are obviously JDK modules, Java base, etc. So it's built on top of a JDK.

71
00:05:31.110 --> 00:05:41.670
If you go to the bean, you see it just has extra, extra command line executables that are in addition

72
00:05:41.670 --> 00:05:42.840
to the standard JDK.

73
00:05:42.840 --> 00:05:49.680
So all these are a standard JDK, for example, Java, Java, Java, see, Java Dark, Java P, for

74
00:05:49.680 --> 00:05:56.490
example, JSP cmd Java Command for Java Flight Recorder, GDB, Java Debugger, etc. But then we have

75
00:05:56.490 --> 00:06:00.270
juju which is crawl, updater and base.

76
00:06:01.040 --> 00:06:07.100
Using this geo, you can actually install more modules that are specific to VM, like the native image

77
00:06:07.100 --> 00:06:07.790
oil.

78
00:06:08.240 --> 00:06:16.070
For example, Python, you can use VMM, which is a Java virtual machine to execute Python scripts right

79
00:06:16.070 --> 00:06:16.340
now.

80
00:06:16.340 --> 00:06:21.650
Obviously, it's going to be a slower than if you just actually install the Python.

81
00:06:21.650 --> 00:06:28.550
VM Remember, Python is also something that launches a virtual machine and executes your python code,

82
00:06:28.550 --> 00:06:33.770
but then you can also interpret the Python scripts using VM.

83
00:06:34.430 --> 00:06:42.890
And I believe it can benefit from the Git compilation that the VM provides because it's a JVM Java virtual

84
00:06:42.890 --> 00:06:48.500
machine does come with the Git compiler, whereas Python virtual machine by default doesn't come with

85
00:06:48.500 --> 00:06:49.730
any Git compiler.

86
00:06:50.000 --> 00:06:51.380
It's always interpreted.

87
00:06:52.520 --> 00:06:58.010
All right, so I'm going to go ahead and basically open up a terminal.

88
00:06:59.120 --> 00:06:59.750
All right.

89
00:06:59.750 --> 00:07:07.340
And then what we what you want to do is actually just like the Java home environment variable that we

90
00:07:07.340 --> 00:07:11.130
set to this home directory, you can define a Google home environment variable.

91
00:07:11.150 --> 00:07:19.010
So if I say echo Google home, draw, underscore home, it says library, Java, Java, virtual machines

92
00:07:19.220 --> 00:07:23.330
grow VMS, community addition, Java 17 contents home.

93
00:07:23.330 --> 00:07:24.700
So this directory, right.

94
00:07:24.710 --> 00:07:27.350
And inside the directory, we know that there is a Bing directory.

95
00:07:27.350 --> 00:07:37.400
So if I want to see which version of the JDK this home is from, I can say Google Home Crawl, underscore

96
00:07:37.400 --> 00:07:41.600
home forward slash being forward slash, java hyphen, hyphen version.

97
00:07:42.410 --> 00:07:50.480
And it tells me that the crawl VM, this version 17 Community Edition is built on top of the open JDK

98
00:07:50.480 --> 00:07:52.670
17 So it's not the Oracle JDK, right?

99
00:07:52.670 --> 00:07:58.490
So if I type Java hyphen, hyphen version, it tells me that it's the Java hot spot, which is the Oracle

100
00:07:58.490 --> 00:07:58.970
VM.

101
00:08:00.140 --> 00:08:04.850
And as I mentioned before, I've also defined the job of home.

102
00:08:05.420 --> 00:08:11.750
So I've pointed my Java home environment variable to JDK 17, which is Oracle JDK and the Google home

103
00:08:11.750 --> 00:08:14.630
is pointing to the LLVM Home Directory, right.

104
00:08:15.260 --> 00:08:22.390
And then so basically and then I said that inside the Bean we have this crawl update here.

105
00:08:22.400 --> 00:08:29.870
So what happens here is that if I say crawl home a slash being a slash juju hyphen hyphen version and

106
00:08:29.870 --> 00:08:37.550
then it tells me that crawl VM updated and if you want to install native image you want to say go hyphen

107
00:08:37.550 --> 00:08:44.000
install or hyphen hyphen install native dash image.

108
00:08:44.870 --> 00:08:49.330
And so I think it doesn't have.

109
00:08:49.340 --> 00:08:51.250
Yeah, let's see.

110
00:08:51.260 --> 00:08:58.070
So okay, so we shouldn't add this hyphen hyphen and it tells me that.

111
00:08:58.070 --> 00:09:02.660
So once you run this command, so you run the first time you download this, you have to install the

112
00:09:02.660 --> 00:09:10.640
native image using the Google Updater and then the the to the action is install native image and then

113
00:09:11.370 --> 00:09:13.520
it reaches the git repository.

114
00:09:14.520 --> 00:09:21.810
Uh, it tells me that, uh, native image is already in style, so it knows that I have installed native

115
00:09:21.810 --> 00:09:23.850
image, and it's already up to date.

116
00:09:23.850 --> 00:09:26.250
So there is no, uh, no action.

117
00:09:26.250 --> 00:09:27.590
No further action is required.

118
00:09:27.600 --> 00:09:27.990
Right.

119
00:09:28.020 --> 00:09:32.370
And then after that, obviously, the native image is put in the bin.

120
00:09:32.370 --> 00:09:35.940
And in fact, if you look at these, these are not the actual files.

121
00:09:35.940 --> 00:09:39.300
These are aliases or symbolic links, right?

122
00:09:39.330 --> 00:09:42.120
In macros, we call them aliases in Windows.

123
00:09:42.120 --> 00:09:44.820
We call them shortcut right to the operating system.

124
00:09:44.820 --> 00:09:46.950
There is no difference between these.

125
00:09:47.220 --> 00:09:49.920
Actually, we have two.

126
00:09:50.130 --> 00:09:53.190
There is no to the operating system or to the terminal.

127
00:09:53.190 --> 00:09:57.900
There is no difference between a symbolic link or a shortcut to a file and the file itself.

128
00:09:58.080 --> 00:10:04.620
Because when if I drag and drop this, it tells me native image, right?

129
00:10:04.620 --> 00:10:05.910
But this is a shortcut.

130
00:10:05.910 --> 00:10:12.630
And if I say hyphen, hyphen version, basically the operating system on the terminal realizes that

131
00:10:12.630 --> 00:10:14.790
this is a shortcut and it knows how to find it.

132
00:10:14.790 --> 00:10:15.090
Right?

133
00:10:15.090 --> 00:10:22.350
So if I right click show original, it tells me that the actual executable binary of the native image

134
00:10:22.350 --> 00:10:24.510
is inside the VM contents home.

135
00:10:24.510 --> 00:10:26.680
It's inside the lib and SVM.

136
00:10:26.700 --> 00:10:32.310
SVM means sub VM or substrate VM substrate virtual machine and bean.

137
00:10:32.310 --> 00:10:33.690
So it's there, right?

138
00:10:33.690 --> 00:10:37.260
So I can drag and drop this and then hyphen hyphen version.

139
00:10:37.890 --> 00:10:43.140
So the one, the native image, one that is inside the Bing directory or even global updated, right?

140
00:10:43.140 --> 00:10:49.110
These are symbolic links or shortcuts, but to the operating system shortcuts and actual files, they're

141
00:10:49.110 --> 00:10:50.130
the same thing, right?

142
00:10:50.130 --> 00:10:53.460
That's the meaning of the symbolic link or an alias.

143
00:10:54.030 --> 00:10:59.310
But for example, this Java one is actually the actual file right now.

144
00:10:59.310 --> 00:11:06.810
What you can do, you can actually create aliases, for example, make alias, you can create an alias

145
00:11:06.810 --> 00:11:11.130
or shortcut for this java and put it, for example, on the desktop on somewhere else.

146
00:11:11.130 --> 00:11:17.730
And whenever I execute from there, it's going to basically use this one.

147
00:11:17.730 --> 00:11:19.950
So I'm going to make an alias here.

148
00:11:20.820 --> 00:11:23.760
Let's call it Java, underscore alias.

149
00:11:23.760 --> 00:11:24.330
All right.

150
00:11:24.540 --> 00:11:27.180
And then I'm going to drag it to my home directory.

151
00:11:27.180 --> 00:11:27.720
All right.

152
00:11:27.720 --> 00:11:29.670
So note that I didn't copy the file.

153
00:11:29.670 --> 00:11:33.540
I basically created a alias.

154
00:11:33.540 --> 00:11:34.830
This is a shortcut, right?

155
00:11:35.760 --> 00:11:42.840
Then if I say Java alias, hyphen, hyphen, virgin, unknown command, java, underscore alias.

156
00:11:42.840 --> 00:11:44.640
That's because I'm in the same directory.

157
00:11:44.640 --> 00:11:50.340
So I have to use the dot java alias and is not executable by this user.

158
00:11:50.340 --> 00:11:59.220
So C mod c mod plus x and in java underscore alias.

159
00:11:59.250 --> 00:11:59.790
All right.

160
00:11:59.790 --> 00:12:03.960
And now it's executable and I can say dot java alias.

161
00:12:04.260 --> 00:12:06.300
A failure to execute process.

162
00:12:06.300 --> 00:12:11.340
The file could not be run by the operating system, so you have to do a little bit more for this kind

163
00:12:11.340 --> 00:12:12.780
of executable shortcuts.

164
00:12:12.780 --> 00:12:18.180
But in general, you can create a symbolic link.

165
00:12:18.180 --> 00:12:25.440
So I guess the mistake here is that using right click and making Alias, it only works mainly for directories

166
00:12:25.440 --> 00:12:26.070
for files.

167
00:12:26.070 --> 00:12:28.650
You kind of need to create a symbolic link, right?

168
00:12:28.890 --> 00:12:31.710
And, and then use those.

169
00:12:31.710 --> 00:12:31.980
Right.

170
00:12:31.980 --> 00:12:38.430
So there is a difference between a symbolic link and the alias in macros.

171
00:12:38.430 --> 00:12:38.720
Right.

172
00:12:38.760 --> 00:12:40.410
Or the shortcut in Windows.

173
00:12:41.790 --> 00:12:42.150
All right.

174
00:12:42.150 --> 00:12:47.610
So, so now we have installed VM in macros in the future lectures.

175
00:12:47.610 --> 00:12:55.080
I'll show you how to install VM and a native image in a in Windows and Linux.

176
00:12:55.080 --> 00:12:55.560
Right.

177
00:12:55.890 --> 00:12:58.230
So the idea here is that.

178
00:13:00.480 --> 00:13:01.290
Um.

179
00:13:02.190 --> 00:13:10.380
So we have this native image and then what we want to do is we're going to say that again, growl VM

180
00:13:10.980 --> 00:13:20.790
and in a growl home slash been a slash native image and then hyphen hyphen version to make sure that

181
00:13:20.790 --> 00:13:21.660
everything works fine.

182
00:13:21.660 --> 00:13:23.390
We have the native image in stock.

183
00:13:23.400 --> 00:13:28.560
All right, so back to PowerPoint, we installed the native image using the Google Updater.

184
00:13:28.560 --> 00:13:31.020
The command is Google juju.

185
00:13:31.820 --> 00:13:38.450
An install native dash image and it downloads the native image and puts their create a main class in

186
00:13:38.450 --> 00:13:44.690
the Java project reads and passes the command line which we already created a project run native image

187
00:13:44.690 --> 00:13:50.660
and domain class because we said that a class that has a main method is the entry point to the Java

188
00:13:50.660 --> 00:13:57.290
application and then the native image tool can compile that class to an executable binary.

189
00:13:57.290 --> 00:14:00.530
At the moment, Java eight, Java 11 are fully supported.

190
00:14:00.530 --> 00:14:05.840
Actually, we have to say Java 11 and Java 17 are fully supported.

191
00:14:05.840 --> 00:14:09.380
We can use Java 11 or Java 17 version of VM.

192
00:14:09.650 --> 00:14:12.050
The suggestion is to use Java 17.

193
00:14:12.050 --> 00:14:18.830
If Native image is not installed first, try to install it and there is the documentation or the reference

194
00:14:18.830 --> 00:14:22.880
manual for the native image is here.

195
00:14:23.990 --> 00:14:28.760
So native image, it has a very, very nice and detailed documentation.

196
00:14:28.760 --> 00:14:34.760
Obviously in the course of these lectures I will walk you through all these documentation, point to

197
00:14:34.940 --> 00:14:37.340
point out all the important topics, right?

198
00:14:37.340 --> 00:14:43.940
So the native image builder or native image is a utility that processes all classes of an application

199
00:14:43.940 --> 00:14:47.150
and their dependencies, including those from JDK.

200
00:14:47.180 --> 00:14:54.320
It is static statically analyzes these data to determine which classes and methods are reachable during

201
00:14:54.320 --> 00:14:59.690
the application execution, then it ahead of time compiles that reachable code.

202
00:14:59.690 --> 00:15:05.780
This is the static compilation that I mentioned before and data to a native executable for a specific

203
00:15:05.780 --> 00:15:07.670
operating system and architecture.

204
00:15:08.090 --> 00:15:14.750
This entire process is called building an image or the image build time to clearly distinguish it from

205
00:15:14.750 --> 00:15:19.400
the compilation of Java source code to bytecode, which creates the class files.

206
00:15:19.400 --> 00:15:19.880
Right.

207
00:15:20.770 --> 00:15:25.150
Using using a java compiler.

208
00:15:25.150 --> 00:15:27.010
So install native image.

209
00:15:27.350 --> 00:15:33.400
Native image can be added to the VM with the VM Updater or the geo command line tool and we set that

210
00:15:33.400 --> 00:15:33.970
by default.

211
00:15:33.970 --> 00:15:40.630
Native image is not included in Bing directory, but you can say you install native dash image and this

212
00:15:40.640 --> 00:15:41.010
geo.

213
00:15:41.020 --> 00:15:44.170
There is a symbolic link in the bing directory of the VM.

214
00:15:44.410 --> 00:15:50.230
After this additional step, the native image executable will become available in the Java home slash

215
00:15:50.230 --> 00:15:50.950
Bing directory.

216
00:15:51.130 --> 00:15:56.680
And basically this Java home assumes that you're pointing your Java home also to the Bing director of

217
00:15:56.680 --> 00:16:04.870
Google via my recommendation is that to additionally define this Google home slash mean so always use

218
00:16:04.870 --> 00:16:08.530
Google home a slash bean so that you always indicate that.

219
00:16:10.390 --> 00:16:16.630
You always indicate that this native image is actually part of the VM, not the actual JDK, for example,

220
00:16:16.630 --> 00:16:17.740
Oracle JDK.

221
00:16:17.740 --> 00:16:21.790
So hyphen hyphen version prerequisites.

222
00:16:21.790 --> 00:16:24.010
So later I will show you.

223
00:16:24.010 --> 00:16:31.450
And for example, if you try to install this on Linux, you kind of need to install a few extra libraries

224
00:16:31.630 --> 00:16:35.900
that the native image requires to compile your Java application on OS.

225
00:16:35.920 --> 00:16:39.400
Once you install the command line tools, everything comes by default.

226
00:16:39.400 --> 00:16:41.800
So there is no additional thing is required.

227
00:16:42.970 --> 00:16:46.120
So let's let's close this terminal.

228
00:16:47.240 --> 00:16:48.910
Let's head back to our eclipse.

229
00:16:48.920 --> 00:16:52.370
If you recall, we had this hello world application.

230
00:16:53.010 --> 00:16:59.160
And then this had a dependency on the car and then a dependency on this machine.

231
00:16:59.190 --> 00:17:04.020
These were in different directories, but none of these classes is part of a package.

232
00:17:04.320 --> 00:17:07.200
And we said that if we open a terminal here.

233
00:17:08.700 --> 00:17:17.070
And in my batch RC file, I've already, uh, defined a class path, right, for this project.

234
00:17:17.790 --> 00:17:20.790
Test three directory test directory and test two.

235
00:17:20.820 --> 00:17:27.990
So, and then let's just compile a Java application or Java application to make sure that it's up to

236
00:17:27.990 --> 00:17:28.320
date.

237
00:17:28.320 --> 00:17:28.740
Yes.

238
00:17:28.740 --> 00:17:32.100
And it can find all the dependencies, car and in machine.

239
00:17:32.100 --> 00:17:34.860
That's because Java looks at the class path.

240
00:17:34.860 --> 00:17:39.420
And then we can also run the hell of all the class.

241
00:17:39.420 --> 00:17:42.300
All the dependencies can be found.

242
00:17:44.380 --> 00:17:49.900
Using the basically the class path, the environment variable for this particle application.

243
00:17:49.900 --> 00:17:51.100
So everything is said.

244
00:17:51.100 --> 00:17:56.500
Now I'm just going to quickly compile this application, note that I'm going to invoke the native image

245
00:17:56.500 --> 00:17:58.990
on the hello world that has the main method, right?

246
00:17:58.990 --> 00:18:02.140
So let's see, let's spread this.

247
00:18:02.350 --> 00:18:11.110
So we're going to say growl home and then a slash being a slash native image and then we're going to

248
00:18:11.110 --> 00:18:16.570
say hyphen C.P and then pass the environment variable class path.

249
00:18:16.570 --> 00:18:17.110
Right.

250
00:18:17.560 --> 00:18:18.670
And then hello world.

251
00:18:18.670 --> 00:18:18.970
Right.

252
00:18:18.970 --> 00:18:24.430
So and then terminal replaces this with all those directories and therefore native image, remember

253
00:18:24.430 --> 00:18:28.090
native image is also on top of the JV team, right?

254
00:18:28.090 --> 00:18:29.440
So it's associated with JVM.

255
00:18:29.440 --> 00:18:35.980
So it has to know where to find the classes that your Java application needs to be to successfully run.

256
00:18:35.980 --> 00:18:36.400
Right.

257
00:18:36.400 --> 00:18:38.950
So it still works with the class path, right?

258
00:18:40.000 --> 00:18:42.910
And then we run this, it starts the compilation.

259
00:18:42.910 --> 00:18:45.610
The compilation has a couple of phases in the future.

260
00:18:45.610 --> 00:18:50.560
Lectures I will show you and walk you through all the phases, all the details here.

261
00:18:50.560 --> 00:18:57.610
But the first one is just gives you the information that it is able to successfully run the VM native

262
00:18:57.610 --> 00:18:58.750
image command line tool.

263
00:18:58.750 --> 00:19:06.100
And then it also gives you the version called VM 17 and then it tells you how many classes it needs

264
00:19:06.100 --> 00:19:10.030
to successfully compile so that your application can run.

265
00:19:10.390 --> 00:19:13.960
Building Universe Parsing Methods in Lightning Method.

266
00:19:13.960 --> 00:19:19.240
This means the static compiler of the native which is trying to optimize method calls.

267
00:19:19.240 --> 00:19:19.450
Right?

268
00:19:19.450 --> 00:19:24.880
You know that in learning is easier and as you can see, it was pretty quick and it tells me that where

269
00:19:24.880 --> 00:19:27.430
it actually puts the final executable.

270
00:19:27.430 --> 00:19:27.910
Right.

271
00:19:29.140 --> 00:19:34.420
So basically the idea here is that now we have this hello world and we know that in Mac and Linux we

272
00:19:34.420 --> 00:19:40.280
have to say that because Hello World was put in our current working directory and it works.

273
00:19:40.300 --> 00:19:46.960
As you can see this name which was based on the system property is null so we can say hello world and

274
00:19:46.960 --> 00:19:52.900
then hyphen dx and name equals Bob and now name is Bob.

275
00:19:52.900 --> 00:19:59.440
So once you compile your Java application to native executable binary, you can still use hyphen DX

276
00:19:59.470 --> 00:20:05.170
system properties and your application still works fine because your application has a JVM embedded

277
00:20:05.170 --> 00:20:05.470
in it.

278
00:20:05.470 --> 00:20:05.890
Right?

279
00:20:06.400 --> 00:20:09.190
But that doesn't mean that JVM is separate.

280
00:20:09.490 --> 00:20:12.490
Everything has been compiled to a native executable binary.

281
00:20:12.490 --> 00:20:12.910
Right.

282
00:20:13.120 --> 00:20:18.580
And then the other thing is that we can also add command line arguments and all of them are going to

283
00:20:18.580 --> 00:20:19.540
be here.

284
00:20:19.660 --> 00:20:26.920
So all of these are command line arguments and your native executable binary differentiates between

285
00:20:26.920 --> 00:20:32.590
the system parameters, the ones that start with hyphen DX and then the ones that don't start with high

286
00:20:32.680 --> 00:20:38.230
end, which is very nice because then it gives you a degree of freedom so that you can quickly take

287
00:20:38.230 --> 00:20:46.240
advantage of system that get property and then use these to configure your application and then the

288
00:20:46.240 --> 00:20:47.350
command line arguments.

289
00:20:47.350 --> 00:20:49.510
The rest are passed as this string array.

290
00:20:49.510 --> 00:20:50.140
All right.

291
00:20:51.100 --> 00:20:58.870
So I just want to again mention that if one of the strings that comes after your native executable binary,

292
00:20:58.870 --> 00:21:00.830
right, it starts with hyphen de.

293
00:21:00.910 --> 00:21:04.510
It's not going to be passed to this string array of the main method.

294
00:21:04.510 --> 00:21:04.810
Right.

295
00:21:04.810 --> 00:21:11.470
It's going to be passed to the system properties here and you have to access them using get property

296
00:21:11.470 --> 00:21:15.100
and it already knows that it has to be a key value pair.

297
00:21:15.220 --> 00:21:19.510
You specify the key equals value and it returns a string, which is value.

298
00:21:19.540 --> 00:21:26.230
If the string comes out as null, it means that this value is not set for this key in the terminal right

299
00:21:26.230 --> 00:21:29.170
at the time where we run our Java application.

300
00:21:30.130 --> 00:21:35.050
So I hope you enjoyed this lecture and have an introduction to a native image in the future lectures.

301
00:21:35.050 --> 00:21:39.940
I will give you more details, so please stay tuned and I'll see the next one.
