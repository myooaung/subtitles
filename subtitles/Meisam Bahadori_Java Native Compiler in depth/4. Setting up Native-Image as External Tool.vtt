WEBVTT
1
00:00:01.540 --> 00:00:04.600
Hello and welcome to another Java tutorial.

2
00:00:04.600 --> 00:00:10.300
We're going to continue our discussion on Eclipse IDE External Tool and how to set up the native image

3
00:00:10.300 --> 00:00:14.200
compiler for our Java application as an external to eclipse.

4
00:00:14.200 --> 00:00:20.200
So we said that you go here and click on this new button and then you create give it a name here.

5
00:00:20.200 --> 00:00:28.330
I'm just giving it Native Image 17 to remind myself that this is from VMs 17 and then there are a few

6
00:00:28.330 --> 00:00:31.720
tabs here main refresh, build environment and common right.

7
00:00:31.720 --> 00:00:36.010
So main means basically main is the execution.

8
00:00:36.010 --> 00:00:42.100
First of all, what binary what native application or external application are we going to execute?

9
00:00:42.100 --> 00:00:48.610
And we say that we want to point these to the native image binary which is inside the home lieb svn

10
00:00:48.640 --> 00:00:51.640
sub vm being and then native image.

11
00:00:51.790 --> 00:00:56.410
And obviously you can click on the browse file system to look for it.

12
00:00:56.500 --> 00:01:01.330
And then working directory, this is where we said that the way this works is that eclipse.

13
00:01:01.330 --> 00:01:07.690
When you run an external tool, eclipse creates a shell process behind the scenes in the background

14
00:01:07.690 --> 00:01:08.650
and then runs that.

15
00:01:08.650 --> 00:01:14.530
And we know that any terminal process or a shell process has to be has to happen in a working directory,

16
00:01:14.530 --> 00:01:14.830
right?

17
00:01:14.880 --> 00:01:20.140
Whenever you run something in a terminal, you are always inside a working directory and that's where

18
00:01:20.140 --> 00:01:20.890
you are.

19
00:01:21.550 --> 00:01:30.670
So we said that Eclipse IDE organizes the class files inside the beam directory in your project folder.

20
00:01:30.670 --> 00:01:31.120
Right.

21
00:01:31.330 --> 00:01:38.440
If you're using Maven, which I will show you an example, Maven actually sets up or puts the compiled

22
00:01:38.440 --> 00:01:41.890
classes inside a directory called Target.

23
00:01:41.890 --> 00:01:44.860
And then inside that there is a directory called classes, right?

24
00:01:44.860 --> 00:01:49.690
So all the eclipse puts in Bean and then Maven is target classes.

25
00:01:51.460 --> 00:01:57.760
And the reason we point this, working directly to the bean because Native Image basically operates

26
00:01:57.760 --> 00:02:02.800
on the class file that has the basically that has the main method, right?

27
00:02:02.800 --> 00:02:05.980
So it doesn't operate on the source file, it operates on the class file.

28
00:02:06.400 --> 00:02:12.790
And then and then in order to specify the classifier, you have to give it a fully qualified name and

29
00:02:12.790 --> 00:02:13.630
a native image.

30
00:02:13.630 --> 00:02:20.530
Consider that from the either you have to specify manually the class path or from the working directory

31
00:02:20.800 --> 00:02:21.850
java type name.

32
00:02:21.850 --> 00:02:27.550
We looked at the eclipse as environment variables and we said that Java type name, it returns the fully

33
00:02:27.550 --> 00:02:29.080
qualified name of the class file.

34
00:02:29.110 --> 00:02:35.200
Right, which is very important because if your main class is inside the package, then you have to

35
00:02:35.200 --> 00:02:37.420
give the native image, the fully qualified name.

36
00:02:37.420 --> 00:02:44.140
And then and then after that we've seen that previously after the native image.

37
00:02:44.140 --> 00:02:51.580
You have to also specify the hyphen, keep the class pass, and we will do it if our project has dependencies.

38
00:02:51.640 --> 00:02:57.400
Because when you point a native image, the bean directory, it only sees the class files that are inside

39
00:02:57.400 --> 00:03:02.110
the current project it is not aware of basically.

40
00:03:03.920 --> 00:03:08.900
Basically the class fires that come from the dependencies, like a jar file or other projects inside

41
00:03:08.900 --> 00:03:10.790
your eclipse's workspace.

42
00:03:10.880 --> 00:03:17.360
Now if you don't specify the hyphen p parameter for the native image, obviously by default it assumes

43
00:03:17.360 --> 00:03:20.340
that the hyphen CP dot, which means the current directory.

44
00:03:20.360 --> 00:03:25.820
That's why we are pointing this working directly to the bean directory because that's the where all

45
00:03:25.820 --> 00:03:27.740
the classes are in Eclipse project.

46
00:03:27.750 --> 00:03:28.970
So that's the class path.

47
00:03:29.480 --> 00:03:32.330
But that only works for the classes of the current project.

48
00:03:32.330 --> 00:03:38.780
Again, if we have dependencies, we have to specify them for with the hyphen, CPP, flag or argument

49
00:03:38.780 --> 00:03:39.620
for a native image.

50
00:03:39.620 --> 00:03:40.790
And then you can give it.

51
00:03:40.790 --> 00:03:45.470
Tell the native edge where to put the compiled file and what to name it.

52
00:03:45.470 --> 00:03:45.710
Right.

53
00:03:45.710 --> 00:03:53.240
If you if you don't specify any output name by default, native image uses the name of the type, whatever

54
00:03:53.240 --> 00:03:54.710
you put for the name of the class.

55
00:03:54.860 --> 00:03:58.280
But all the letters are lowercase if you.

56
00:03:58.280 --> 00:04:06.290
But you can manually specify the name of the output file as well and then puts the binary in the working

57
00:04:06.290 --> 00:04:06.880
directory.

58
00:04:06.890 --> 00:04:09.890
Remember when the native image compiles your file?

59
00:04:10.340 --> 00:04:15.980
The result is going to put back in the working directory, which is the bean right, i.e. assumes way

60
00:04:15.980 --> 00:04:16.550
too bad.

61
00:04:16.550 --> 00:04:18.950
You can specify absolute path to right.

62
00:04:18.950 --> 00:04:23.150
So here I'm I'm telling it the output.

63
00:04:23.180 --> 00:04:25.850
Give it this name, put it in this directory.

64
00:04:25.850 --> 00:04:26.240
Right.

65
00:04:26.380 --> 00:04:29.960
Actually, I'm not sure if this works for the most recent version of the native image.

66
00:04:29.960 --> 00:04:35.570
We can try that if it compiles the Java project and puts the output in the native directory here.

67
00:04:35.570 --> 00:04:41.540
Because I'm telling it from the working directory which is bean go one level up, dot dot go inside

68
00:04:41.540 --> 00:04:45.320
the native directory and then create this executable file.

69
00:04:45.320 --> 00:04:46.790
Right, a file that has this name.

70
00:04:46.970 --> 00:04:51.880
I mean we will try this to see if this is still works in the older versions of the native images.

71
00:04:52.220 --> 00:04:56.870
This used to work, I'm not sure in the most recent version also works or not.

72
00:04:56.960 --> 00:04:58.640
So let's head to Eclipse.

73
00:04:59.770 --> 00:05:00.560
Now this is.

74
00:05:00.940 --> 00:05:02.350
This is our Java native image.

75
00:05:02.650 --> 00:05:10.720
So far we've been creating a directories that are not part of our Java project CRC and packages and

76
00:05:10.720 --> 00:05:13.930
we manually compiled our application to native executable binary.

77
00:05:13.930 --> 00:05:21.220
But now we want to make things much simpler and we want to basically use an eclipse.

78
00:05:21.220 --> 00:05:21.700
Right.

79
00:05:23.110 --> 00:05:33.670
And basically, let's see, we want to use set up an external tool, let's say hello world from Java

80
00:05:33.670 --> 00:05:39.610
in and external tool in Eclipse IDE.

81
00:05:39.640 --> 00:05:44.890
All right, so we do this and obviously now this is part of our Java project.

82
00:05:44.890 --> 00:05:50.410
So Eclipse already compiled this puts the compiled file in the Bing directory which is a mirror mirror

83
00:05:50.410 --> 00:05:51.400
of the Z.

84
00:05:52.030 --> 00:05:52.420
Right.

85
00:05:52.420 --> 00:06:00.190
And we can also run this right so we can go and say run as Java application and we get the result,

86
00:06:00.190 --> 00:06:00.590
right?

87
00:06:00.610 --> 00:06:06.280
So Java development Java compilation is very fast because Eclipse IDE compiler is very fast.

88
00:06:06.280 --> 00:06:13.750
But now after we develop our Java application, we want we want to compile this and then we want to

89
00:06:13.750 --> 00:06:20.500
select a and again in your Java project, you might have multiple classes that have the main method.

90
00:06:20.500 --> 00:06:27.520
So any of these classes can be selected as the entry point to your job application, which is very neat.

91
00:06:27.520 --> 00:06:33.910
And what we want to do, we want to create a native, an external tool that we just select which class

92
00:06:33.940 --> 00:06:35.170
is our main method, right?

93
00:06:35.170 --> 00:06:40.570
We select it in this visual view, in this tree view, and then the native image puts or selects this

94
00:06:40.570 --> 00:06:43.090
class as the main class.

95
00:06:43.090 --> 00:06:45.630
Right, for the entry point of the application.

96
00:06:45.640 --> 00:06:51.040
That's why we're trying to use a set of external tool using the internal environment variables of the

97
00:06:51.040 --> 00:06:51.460
eclipse.

98
00:06:51.460 --> 00:06:58.570
Then if we select different files that command that runs the native image changes because the internal

99
00:06:58.570 --> 00:07:05.650
environment variables of the eclipse are evaluated based on what you select, for example, in this

100
00:07:05.650 --> 00:07:06.280
preview.

101
00:07:06.460 --> 00:07:17.060
So let's say hello from a test class to a main method that data.

102
00:07:17.140 --> 00:07:17.740
Right?

103
00:07:18.460 --> 00:07:24.760
All right, so let's create a new directory, which I'm not going to select it as part of my Java project.

104
00:07:24.760 --> 00:07:26.830
That's why I'm not selecting it to be a package.

105
00:07:26.830 --> 00:07:27.030
Right.

106
00:07:27.040 --> 00:07:33.130
Java package means it's it's a it's supposed to have a source file and it's going to be on the class

107
00:07:33.130 --> 00:07:38.890
path and the Eclipse compiler will compile and put the results in the Bing directory, which is a mirror.

108
00:07:38.890 --> 00:07:40.090
But here I don't want that.

109
00:07:40.090 --> 00:07:43.090
So I just want to create a directory that is not a Java package.

110
00:07:43.090 --> 00:07:44.530
So let's call this native.

111
00:07:45.850 --> 00:07:47.190
And right now it's empty.

112
00:07:47.200 --> 00:07:51.910
So I'm going to select my test class and I want to set up an external tool.

113
00:07:51.910 --> 00:07:55.090
So external tool configuration, I have already set it up.

114
00:07:55.360 --> 00:07:59.590
This is pointing to the bin directory of my Java project.

115
00:08:03.130 --> 00:08:06.490
And it's pointing to the native image.

116
00:08:07.540 --> 00:08:15.130
So note that this is the older version of the native image and I'm going to browse the file system and

117
00:08:15.760 --> 00:08:17.110
Java virtual machines.

118
00:08:17.500 --> 00:08:22.120
VM The most recent version as of today is 22.1, right?

119
00:08:22.330 --> 00:08:31.300
And then contents home and in lib and then svn substrate, VMM and then bean and then native image.

120
00:08:31.540 --> 00:08:36.490
This is the executable and this is the most recent version of the graph where I'm pointing it to the

121
00:08:36.490 --> 00:08:43.240
Bing directory and then I'm telling it compile the Java application.

122
00:08:43.540 --> 00:08:49.600
So again, note that this we're using an internal variable of the Eclipse Project location.

123
00:08:49.600 --> 00:08:55.630
What this means is that when I select a Java a source file here, let's say test class this will replace

124
00:08:55.630 --> 00:09:01.600
this project location will be replaced by the absolute path of the project that this source file belongs

125
00:09:01.600 --> 00:09:01.960
to.

126
00:09:01.990 --> 00:09:07.630
So if I have multiple projects, I select any class from any Java file or any class from any of those

127
00:09:07.630 --> 00:09:08.330
projects.

128
00:09:08.350 --> 00:09:12.850
This external tool will automatically recognize which project it's belonging to.

129
00:09:12.850 --> 00:09:13.090
Right?

130
00:09:13.090 --> 00:09:16.330
So it points there working directory to the correct Bing directory.

131
00:09:16.660 --> 00:09:17.830
And then I'm telling it.

132
00:09:19.780 --> 00:09:26.290
First of all, we can also manually tell it, see hyphen cpp dot because the working directory is where

133
00:09:26.290 --> 00:09:27.070
the classes are.

134
00:09:27.070 --> 00:09:27.370
Right?

135
00:09:27.370 --> 00:09:31.420
So the class path by default is going to be dot java type name.

136
00:09:31.420 --> 00:09:34.810
That's the fully qualified name of the class file that has the main method.

137
00:09:34.810 --> 00:09:38.440
Remember, that's not the name of the source file, that's the name of the class file and that's the

138
00:09:38.440 --> 00:09:39.820
fully qualified name.

139
00:09:40.240 --> 00:09:41.420
So it's not just test.

140
00:09:41.440 --> 00:09:44.170
And right now we are we belying this.

141
00:09:44.170 --> 00:09:46.960
Our main class belongs to a package java native image.

142
00:09:46.960 --> 00:09:47.430
Right.

143
00:09:47.440 --> 00:09:55.030
So this this at runtime when I execute this external tool, this string java type name will be replaced

144
00:09:55.030 --> 00:10:03.940
by Java underscore native underscore image dot test class and I'm specifying the output file and again

145
00:10:03.940 --> 00:10:05.890
the same the name of the executable.

146
00:10:05.890 --> 00:10:11.050
I'm setting it to be the name of the fully qualified name and obviously it's going to be lowercase and

147
00:10:11.440 --> 00:10:18.340
I'm telling you to go one level up, go inside the native, because once we go one level up from the

148
00:10:18.340 --> 00:10:24.520
bean directory, remember all these relative paths, dot or dot dot R with respect to the working directory,

149
00:10:25.360 --> 00:10:33.670
once we go one level up from the bean directory, we are back in the Project Root, which is Java Native

150
00:10:33.670 --> 00:10:35.590
Image and I want to go into the native image.

151
00:10:35.590 --> 00:10:36.010
Right.

152
00:10:36.010 --> 00:10:38.160
So we can also look at the show command.

153
00:10:38.170 --> 00:10:44.230
I've already selected this class that Java, so you can tell me what command is going to be executed

154
00:10:44.230 --> 00:10:46.900
when eclipse creates a shell process.

155
00:10:46.900 --> 00:10:53.560
So library georgia virtual machine all the way to native image executable hyphen zip dot and this is

156
00:10:53.560 --> 00:11:00.070
with respect to the beam director of the project and in the fully qualified name of the class Java name

157
00:11:00.070 --> 00:11:02.170
image native image test class.

158
00:11:02.170 --> 00:11:07.060
This is the fully qualified name of the class that has the main method and that's the one I selected

159
00:11:07.060 --> 00:11:07.840
in this preview.

160
00:11:07.840 --> 00:11:08.140
Right?

161
00:11:08.140 --> 00:11:14.080
So if I select different source files here that have a public class, this will automatically change.

162
00:11:14.080 --> 00:11:20.890
And then we're telling it to put it in the output, go one level up, go into native directory and create

163
00:11:20.890 --> 00:11:25.000
a executable file that has this name, Java Native Image Test Class.

164
00:11:25.000 --> 00:11:25.510
All right.

165
00:11:25.690 --> 00:11:30.250
So this can quickly tell you whether this your substitution works or not.

166
00:11:30.490 --> 00:11:32.470
So just close this.

167
00:11:33.310 --> 00:11:33.640
All right.

168
00:11:33.640 --> 00:11:34.810
That's the moment of truth.

169
00:11:34.810 --> 00:11:38.680
We're going to run our native image 17 on this test class.

170
00:11:38.680 --> 00:11:39.970
So let's run these.

171
00:11:42.720 --> 00:11:43.270
Let's see.

172
00:11:43.290 --> 00:11:50.640
Or I googled VM native image generating the next dot native java native image test class so it's generating

173
00:11:50.640 --> 00:11:55.680
the executable initializing version info crawl VM 22.1.

174
00:11:56.010 --> 00:11:58.320
So this is the latest version we're using.

175
00:11:58.350 --> 00:12:07.140
So it's starting to compile and okay, it's compiling building universe parsing methods in lining methods.

176
00:12:09.670 --> 00:12:11.800
Let's see if this succeeds or not.

177
00:12:14.200 --> 00:12:15.700
Compiling methods.

178
00:12:17.510 --> 00:12:18.470
And finished.

179
00:12:18.470 --> 00:12:20.120
And if we refresh.

180
00:12:21.360 --> 00:12:27.750
Now you see inside the native, we have this executable and a build artifact which tells us we that

181
00:12:27.750 --> 00:12:32.450
it created an executable and it puts it basically the relative path.

182
00:12:32.460 --> 00:12:39.840
So basically in this build artifact, THC, it tells you from the working directory that the native

183
00:12:39.840 --> 00:12:46.560
image was run and we know that the native to the working directory was the bean directory of our Java

184
00:12:46.560 --> 00:12:53.970
application or the Java project tells me that I created an executable and put it here, which is one

185
00:12:53.970 --> 00:12:56.670
level up inside the native directory inside the Java native.

186
00:12:56.940 --> 00:12:58.680
Now I can show that obviously this works.

187
00:12:58.680 --> 00:13:03.810
So let's open up a terminal right inside our eclipse ID in this native directory.

188
00:13:04.650 --> 00:13:08.580
And obviously my fish shell is running on top of the terminal.

189
00:13:08.700 --> 00:13:12.150
So I'm right now the terminal is inside this native, right?

190
00:13:12.150 --> 00:13:17.610
So all I have to say I have to I can't tell dot forward slash job on native image test class and this

191
00:13:17.610 --> 00:13:25.110
is my executable file and hello world from Java and external to the eclipse ID all right now the power

192
00:13:25.110 --> 00:13:31.680
of basically this external tool and the fact that we were using the environment variables of the eclipse

193
00:13:31.680 --> 00:13:37.140
IDs that now I can quickly select another class that has the main method right in this tree view and

194
00:13:37.140 --> 00:13:38.550
run my external tool.

195
00:13:39.060 --> 00:13:45.000
And I don't need to do anything else because eclipse idea automatically changes that shell command based

196
00:13:45.000 --> 00:13:45.840
on which file.

197
00:13:45.870 --> 00:13:49.410
Now it's telling me I'm actually compiling the test class to.

198
00:13:50.110 --> 00:13:51.250
So it's very quick.

199
00:13:51.310 --> 00:13:51.760
Quick.

200
00:13:51.760 --> 00:13:54.610
So you just select what which one you want to compile.

201
00:13:54.610 --> 00:14:01.180
And again, a single Java project can have multiple executable and multiple classes that have the main

202
00:14:01.180 --> 00:14:01.690
method.

203
00:14:02.020 --> 00:14:08.080
And you can run your native image on any of those and create multiple executable outputs.

204
00:14:08.080 --> 00:14:08.590
Right.

205
00:14:09.310 --> 00:14:18.250
And that makes your development very powerful because see, we took only one for like a few seconds,

206
00:14:18.250 --> 00:14:20.890
2 seconds, and now we get another executable.

207
00:14:21.100 --> 00:14:27.160
Let's go back to our terminal and now we're going to say Java, native class test class two and it says

208
00:14:27.160 --> 00:14:29.620
hello from test class two, main method.

209
00:14:29.620 --> 00:14:34.060
So we, we developed one Java application very quickly.

210
00:14:34.300 --> 00:14:41.950
That Java project has two classes that have main methods and we told the native image which when it

211
00:14:41.950 --> 00:14:47.140
compiles which class has the main method or basically which class is the entry point to the application.

212
00:14:47.140 --> 00:14:47.560
Right.

213
00:14:47.800 --> 00:14:54.160
And again, we are taking advantage of the powerful external tool features that Eclipse provides because

214
00:14:54.310 --> 00:15:04.120
then we can write a relative or basically agnostic strings that when we run the external tool, the

215
00:15:04.120 --> 00:15:09.400
eclipse substitutes this environment variables with the correct values right, which is very powerful.

216
00:15:10.420 --> 00:15:16.270
Now this works and the next thing that we want to do is look at the dependencies.

217
00:15:16.270 --> 00:15:17.020
So far

218
00:15:19.840 --> 00:15:23.440
the idea is that we set the working directory to been.

219
00:15:24.280 --> 00:15:24.790
Right.

220
00:15:25.570 --> 00:15:27.010
But we don't need to do that.

221
00:15:27.010 --> 00:15:29.200
So I'm going to let's duplicate this.

222
00:15:29.200 --> 00:15:31.030
So the duplication works.

223
00:15:31.300 --> 00:15:32.950
Every every setting is the same.

224
00:15:32.950 --> 00:15:35.720
But instead of a working directory, I'm going to tell it.

225
00:15:35.740 --> 00:15:37.030
Project location.

226
00:15:37.390 --> 00:15:37.960
All right.

227
00:15:38.320 --> 00:15:38.980
And then.

228
00:15:40.600 --> 00:15:42.670
But if I run this, this is going to fail.

229
00:15:42.670 --> 00:15:44.530
Because the class path is not set.

230
00:15:44.530 --> 00:15:50.560
Because when the fully qualified name of this class is returned, it's it should be a relative to the

231
00:15:50.560 --> 00:15:51.070
class path.

232
00:15:51.070 --> 00:15:54.190
Whereas, whereas the project location is not the class path.

233
00:15:54.190 --> 00:15:56.530
Right, the classes are inside the being directory.

234
00:15:56.710 --> 00:16:02.230
So what we can do, we can actually use one of the environment variables that we previously see, and

235
00:16:02.230 --> 00:16:04.000
that's the project class path.

236
00:16:05.020 --> 00:16:05.590
All right.

237
00:16:06.660 --> 00:16:09.870
And then we give it the selected file.

238
00:16:09.870 --> 00:16:15.270
And then now we know that the native directory is inside the project location.

239
00:16:15.270 --> 00:16:19.140
So we use one dot from the current directory instead of right.

240
00:16:19.140 --> 00:16:20.640
So apply show command.

241
00:16:20.640 --> 00:16:22.470
Everything looks works fine.

242
00:16:22.470 --> 00:16:25.230
As you can see, hyphen CPP already works fine.

243
00:16:28.340 --> 00:16:31.640
So hyphen CP works fine.

244
00:16:31.640 --> 00:16:32.830
So no problem there.

245
00:16:32.840 --> 00:16:33.940
So close.

246
00:16:34.110 --> 00:16:34.760
Close.

247
00:16:34.790 --> 00:16:35.720
Now let's.

248
00:16:36.020 --> 00:16:38.570
Let's delete the previously compiled files.

249
00:16:41.690 --> 00:16:42.050
Select.

250
00:16:42.050 --> 00:16:43.370
Select one of these.

251
00:16:43.370 --> 00:16:44.330
Go back here.

252
00:16:44.330 --> 00:16:49.970
I'm going to select the second one and run and hopefully this also works fine.

253
00:16:50.270 --> 00:16:57.170
So native image compiling the Java native image test class so everything seems to look fine.

254
00:16:57.530 --> 00:16:59.330
Virgin Food 22.1.

255
00:16:59.330 --> 00:17:01.190
Garbage Collector Serial GC.

256
00:17:02.520 --> 00:17:05.220
So is going to quietly compile our application.

257
00:17:08.280 --> 00:17:10.920
Building universe, parsing and lining.

258
00:17:17.370 --> 00:17:18.660
Now what I'm going to do.

259
00:17:18.660 --> 00:17:19.980
I am going to.

260
00:17:21.970 --> 00:17:22.510
Uh.

261
00:17:22.510 --> 00:17:23.680
So this works fine.

262
00:17:23.680 --> 00:17:24.430
This finished?

263
00:17:24.670 --> 00:17:26.300
Let's look at our native directory.

264
00:17:26.320 --> 00:17:34.660
Let's refresh these and we have our executable file, and then that Java test class is still works fine,

265
00:17:35.020 --> 00:17:40.000
but we change the external to right external tool now is in the project directory.

266
00:17:40.450 --> 00:17:48.960
And then we explicitly told the native image what is the class path, which is the recommended way.

267
00:17:48.970 --> 00:17:55.000
The reason is that now if we have the dependency, the first approach would not work.

268
00:17:55.000 --> 00:18:02.080
So if you look at the native image 17 here, we pointing to the Bing directory and then we say that

269
00:18:02.080 --> 00:18:05.380
the class path is here dot which means the bean which is correct.

270
00:18:05.380 --> 00:18:09.370
But if we our project has dependencies, this approach is not going to work.

271
00:18:09.370 --> 00:18:15.820
Whereas this approach that we pointed to project location and explicitly give it the project class path

272
00:18:15.820 --> 00:18:22.540
will always work because this class path adds all the directories and Eclipse is aware of what are the

273
00:18:22.540 --> 00:18:24.640
dependencies of your Java project.

274
00:18:25.450 --> 00:18:30.340
Now we can put this to the test, so let's delete these.

275
00:18:30.340 --> 00:18:34.660
And what I'm going to do, I'm going to edit my working set.

276
00:18:36.670 --> 00:18:37.180
All right.

277
00:18:37.180 --> 00:18:41.890
And then I'm going to bring another project, let's say this one Dev Java.

278
00:18:41.890 --> 00:18:45.400
And inside this I have a let's say class, right?

279
00:18:45.400 --> 00:18:49.390
Let's say let's say inside I have this core class.

280
00:18:49.390 --> 00:18:49.930
Right?

281
00:18:50.020 --> 00:18:59.230
So it has something and I can go ahead and in test class, let's create a car, car, car, new car.

282
00:18:59.980 --> 00:19:04.270
Now, obviously at the moment is probably not going to recognize this.

283
00:19:04.600 --> 00:19:10.090
So what we're going to do, we're going to right click on our project Build Path.

284
00:19:10.120 --> 00:19:11.590
Configure Build Path.

285
00:19:12.660 --> 00:19:15.540
Now on the class path, there is this dev, that Java, right?

286
00:19:15.540 --> 00:19:24.570
So if I go back to the build path, configure build path and we can go to this projects tab in the Java

287
00:19:24.570 --> 00:19:25.380
build path.

288
00:19:27.190 --> 00:19:30.900
Or you can go to project references and give it a dependency.

289
00:19:30.910 --> 00:19:36.310
So projects may refer to other projects in the workspace space, so you can just go to project references,

290
00:19:36.310 --> 00:19:43.780
dev, Java and what this does, it actually puts that project reference to the build path or the class

291
00:19:43.780 --> 00:19:44.800
path, right?

292
00:19:44.950 --> 00:19:54.190
And then when Eclipse runs, the runs, the run, anything, it automatically puts the beam directory

293
00:19:54.190 --> 00:19:57.580
of this other Java project on the class path.

294
00:19:57.580 --> 00:20:02.200
So let's see if I go back and look at my external tool.

295
00:20:02.710 --> 00:20:04.870
This one, look at the show command line.

296
00:20:05.140 --> 00:20:06.370
You see there is this.

297
00:20:08.010 --> 00:20:08.850
Uh.

298
00:20:09.920 --> 00:20:10.640
Let's see.

299
00:20:11.330 --> 00:20:14.240
So Java native image being.

300
00:20:15.860 --> 00:20:19.850
Well, it's not only class, so let's try to see if we can compile.

301
00:20:22.210 --> 00:20:22.480
All right.

302
00:20:22.480 --> 00:20:23.950
So in order to put this on.

303
00:20:24.190 --> 00:20:26.170
So I think let's let's try this.

304
00:20:26.170 --> 00:20:31.930
So right now it's the being director of the other projects is not on the class path, but we gave it

305
00:20:31.930 --> 00:20:32.860
a reference.

306
00:20:32.860 --> 00:20:33.160
Right.

307
00:20:33.160 --> 00:20:33.760
So

308
00:20:36.400 --> 00:20:41.350
all right, I'm going to actually cancel it because so when we when you use a project reference, you

309
00:20:41.350 --> 00:20:46.030
can then quickly use the other types.

310
00:20:48.280 --> 00:20:49.630
All right, let's see.

311
00:20:50.830 --> 00:20:52.750
So it doesn't recognize that.

312
00:20:54.810 --> 00:20:55.560
Uh.

313
00:20:57.730 --> 00:21:01.250
All right, so let's go back to Java Build Path and the class path.

314
00:21:01.270 --> 00:21:03.840
We add a project from Workspace, this one.

315
00:21:03.870 --> 00:21:05.020
Okay, okay.

316
00:21:05.410 --> 00:21:10.290
And now we're going we can import this car type from dev java.

317
00:21:10.300 --> 00:21:10.850
Right.

318
00:21:10.870 --> 00:21:18.430
So instead of project references, you want to put them on the class path or module path here we just

319
00:21:18.430 --> 00:21:24.370
put it on the class path in the Java build, go to the projects and then you can select the class path,

320
00:21:24.400 --> 00:21:31.540
click add and then you can select any project that you have in the workspace as a dependency.

321
00:21:32.450 --> 00:21:32.990
All right.

322
00:21:32.990 --> 00:21:34.280
In the project references.

323
00:21:34.280 --> 00:21:35.370
This is empty for now.

324
00:21:35.390 --> 00:21:35.960
All right.

325
00:21:36.710 --> 00:21:39.260
And then if we say car.

326
00:21:39.590 --> 00:21:40.190
Car.

327
00:21:40.220 --> 00:21:41.420
New car.

328
00:21:41.450 --> 00:21:42.380
It's going to.

329
00:21:42.410 --> 00:21:45.830
Yeah, we're going to say that the price is, let's say, 100.

330
00:21:47.000 --> 00:21:49.550
And then see out car.

331
00:21:49.850 --> 00:21:53.090
So this car is coming from the other Eclipse project.

332
00:21:54.160 --> 00:21:54.820
Run.

333
00:21:56.750 --> 00:21:59.660
Uh, so we had some static initializes, they're called.

334
00:21:59.660 --> 00:22:03.080
And this is just the default twisting of the car, right?

335
00:22:03.080 --> 00:22:04.520
So we have a dependency.

336
00:22:04.520 --> 00:22:13.640
Now, if we select this and run our first native image, which specifies the class path only as being

337
00:22:13.640 --> 00:22:14.150
directory.

338
00:22:14.240 --> 00:22:15.470
Let's see if this works.

339
00:22:20.470 --> 00:22:23.330
So this class is going.

340
00:22:24.790 --> 00:22:31.420
This is most likely is going to fail because because the class pass doesn't include this dependency.

341
00:22:31.420 --> 00:22:32.620
So let's see what happens.

342
00:22:34.450 --> 00:22:35.100
All right.

343
00:22:35.110 --> 00:22:38.980
Building universe parsing methods in lining methods.

344
00:22:44.150 --> 00:22:44.360
So.

345
00:22:44.360 --> 00:22:45.650
So far it's going well.

346
00:22:45.680 --> 00:22:46.880
Let's see what happens.

347
00:22:50.170 --> 00:22:53.190
And it looks like it works.

348
00:22:53.200 --> 00:22:54.400
That's very interesting.

349
00:22:55.630 --> 00:22:55.960
All right.

350
00:22:55.960 --> 00:22:58.210
So let's go ahead and try to run this.

351
00:23:01.270 --> 00:23:01.600
All right.

352
00:23:01.600 --> 00:23:03.070
We get an exception.

353
00:23:03.220 --> 00:23:04.420
Java Lang, no class.

354
00:23:04.420 --> 00:23:05.320
They found error.

355
00:23:05.320 --> 00:23:10.150
So it looks like in the most recent version of LLVM.

356
00:23:10.180 --> 00:23:12.280
It goes ahead and compiles.

357
00:23:12.460 --> 00:23:14.530
But, um.

358
00:23:15.970 --> 00:23:21.280
But then at runtime you get an exception, which is really not that.

359
00:23:21.280 --> 00:23:27.790
I think there's probably an option that you tell it that if you don't find any class at compile time,

360
00:23:27.790 --> 00:23:29.230
then fail.

361
00:23:29.740 --> 00:23:32.470
We will look at this, but for now it succeeds.

362
00:23:32.470 --> 00:23:38.260
But then the runtime throws an exception that I can't find this class at runtime.

363
00:23:38.290 --> 00:23:38.800
Right.

364
00:23:38.980 --> 00:23:49.240
So what we want to do is to go back and run our second configuration, which is explicitly a specifies

365
00:23:49.240 --> 00:23:55.450
the project class path and it clips already is aware of all the dependencies of this Java project,

366
00:23:55.450 --> 00:23:57.250
which is very nice thing to have.

367
00:23:57.250 --> 00:23:59.950
So we don't really need to care about.

368
00:24:01.300 --> 00:24:07.300
We don't really need to care about or worry about figuring out which are the dependencies of the Java

369
00:24:07.300 --> 00:24:09.300
project, especially if you're using Maven.

370
00:24:09.310 --> 00:24:11.920
You might have lots of lots of dependencies.

371
00:24:12.160 --> 00:24:14.950
That's something that I will show you in the future lectures.

372
00:24:15.460 --> 00:24:20.380
So this is going to recompile and then hopefully this time it's going to work fine.

373
00:24:22.700 --> 00:24:27.020
Because right now we explicitly give the native image, the dependencies.

374
00:24:28.890 --> 00:24:31.050
All right, this the compilation finish.

375
00:24:31.050 --> 00:24:31.890
Let's refresh.

376
00:24:31.920 --> 00:24:35.100
Go to our terminal and let's execute the last command.

377
00:24:35.100 --> 00:24:36.560
And now it works, right?

378
00:24:36.570 --> 00:24:44.190
So again, the idea is that Eclipse is already aware of all the dependencies of the class path of your

379
00:24:44.190 --> 00:24:44.910
Java project.

380
00:24:44.910 --> 00:24:52.200
So definitely take advantage of this internal variable project class path and obviously also this Java

381
00:24:52.200 --> 00:24:54.300
type name that returns the fully qualified name.

382
00:24:54.690 --> 00:25:01.620
I believe this is the most important part of using Native Image because once you set this up one time,

383
00:25:01.620 --> 00:25:10.650
it's very easy to use it a lot because you just select whatever class that has a main method and run

384
00:25:10.650 --> 00:25:13.800
your native image and everything should work just fine.

385
00:25:13.950 --> 00:25:15.780
So I hope you really enjoy this lecture.

386
00:25:15.780 --> 00:25:18.150
Please stay tuned and I've seen the next one.
