WEBVTT
1
00:00:01.740 --> 00:00:04.740
Hello and welcome to another tutorial.

2
00:00:04.740 --> 00:00:10.950
We are going to continue our discussion on the Eclipse IDE external tool and we were talking about the

3
00:00:10.950 --> 00:00:17.310
internal variables that Eclipse IDE has and we mentioned that what the way this works is that you put

4
00:00:17.310 --> 00:00:20.190
the name in the braces with the dollar sign, right.

5
00:00:20.670 --> 00:00:26.040
Reminds you of environment variables and these are like internal environment variables that Eclipse

6
00:00:26.040 --> 00:00:31.860
understands and these are exactly these are work based on exact string substitution.

7
00:00:32.040 --> 00:00:36.750
So for example, if I say dialer and then curly braces, the name of the environment variable and then

8
00:00:36.750 --> 00:00:38.880
forward is like some other string.

9
00:00:38.970 --> 00:00:44.460
This part that has this environment variable at runtime will be substituted with the actual value,

10
00:00:44.460 --> 00:00:45.000
right?

11
00:00:45.360 --> 00:00:51.600
And the main benefit is that these are the value of these environment variables can change based on

12
00:00:52.020 --> 00:00:53.940
what, for example, what happens.

13
00:00:54.240 --> 00:01:00.450
And one of the things that I showed you in the previous lecture was, for example, resource location.

14
00:01:00.450 --> 00:01:07.020
We said that if you want to have an environment variable something, an expression that changes the

15
00:01:07.020 --> 00:01:14.550
value based on the files that you select in the tree view of the eclipse, then you can use this environment

16
00:01:14.790 --> 00:01:17.250
which is resource location or resource name, right?

17
00:01:17.250 --> 00:01:19.410
So these are the most important variables.

18
00:01:19.410 --> 00:01:22.710
I want to just quickly go through them Java type name.

19
00:01:22.710 --> 00:01:24.450
This is very, very important.

20
00:01:24.750 --> 00:01:34.500
Most of the tools that for example, Java, Java or the Java Java Java Command or the Native Image Command,

21
00:01:34.500 --> 00:01:39.430
any tool that works on the class files, which is the fully qualified name of the class, if it's inside

22
00:01:39.430 --> 00:01:42.960
the package, the you have to use the Java type name.

23
00:01:43.140 --> 00:01:49.290
So Java type name returns the fully qualified Java type name of the primary type in the selected resource.

24
00:01:49.290 --> 00:01:54.630
I'm going to change this actually Java class name of the primary type in the selected resource.

25
00:01:54.630 --> 00:02:02.880
And we know that when Eclipse IDE compiles your application, the way it organizes your Java project

26
00:02:02.880 --> 00:02:10.320
is that it has a source directory as RC and then a bean directory and the bean is a mirror of your RC.

27
00:02:11.250 --> 00:02:17.700
RC has all the Java files or source files and then Bean is a mirror which has all the compiled file

28
00:02:17.730 --> 00:02:20.850
which is the dart class.

29
00:02:20.850 --> 00:02:21.390
Right.

30
00:02:21.390 --> 00:02:28.110
And then Eclipse internally is aware of the class path, all the all the dependencies of your Java project.

31
00:02:28.110 --> 00:02:34.110
And we know that dependencies have to be on the class path at the compile time if they are explicit

32
00:02:34.110 --> 00:02:39.120
dependency because Java compiler requires that all the dependencies be declared.

33
00:02:39.150 --> 00:02:43.020
The only exception is that Java also allows dynamic class loading.

34
00:02:43.020 --> 00:02:47.010
You use the class for name for example, and then you pass the string.

35
00:02:47.040 --> 00:02:54.030
Those things, those dependencies, those dynamic class loading, they are not checked by the Java compiler

36
00:02:54.030 --> 00:02:56.880
at compile time because it doesn't know how to do it right.

37
00:02:57.030 --> 00:03:02.460
So those dependencies that check for them are deferred to runtime.

38
00:03:02.460 --> 00:03:08.040
And if JVM at runtime cannot find those specific dependencies, then it throws something like class

39
00:03:08.050 --> 00:03:10.710
not found error or class def error or something like that.

40
00:03:10.770 --> 00:03:19.470
So Java type name is very important because any tool that works on the basically class files that requires

41
00:03:19.470 --> 00:03:23.250
that you feed it a class, file it, you have to use a Java type name.

42
00:03:23.250 --> 00:03:29.580
So let's head to eclipse here in our Java projects, I am going to create now a new package, let's

43
00:03:29.580 --> 00:03:34.770
say a Java native image, the name of the project, and we're going to create a class file.

44
00:03:34.800 --> 00:03:38.700
So test class, right.

45
00:03:38.700 --> 00:03:40.050
And let's have a main method here.

46
00:03:40.050 --> 00:03:40.770
That's fine.

47
00:03:41.100 --> 00:03:45.610
And then Eclipse gives us these and then see out and then hello.

48
00:03:45.610 --> 00:03:54.540
All right, so if I run this, remember, as soon as you save this Java source eclipse compiler actually

49
00:03:54.540 --> 00:03:56.640
compiles and creates a class file.

50
00:03:56.640 --> 00:04:02.700
So in the package explorer you don't see the bean directory.

51
00:04:02.700 --> 00:04:07.440
So the bean is hidden, you only see the Java files and the resource files, any other directory.

52
00:04:07.440 --> 00:04:10.440
That is not a package that is not in the Z.

53
00:04:10.770 --> 00:04:18.660
And then just remember how we distinguish between a package, which means a package means it contains

54
00:04:18.660 --> 00:04:21.120
files that are part of the class path.

55
00:04:21.120 --> 00:04:24.990
So and then the Java source files in the package get compiled.

56
00:04:25.140 --> 00:04:30.450
That's a way of telling the Java compiler, hey, compile this file because it's inside this package,

57
00:04:30.450 --> 00:04:30.870
right?

58
00:04:31.110 --> 00:04:36.570
But if you have a regular directory that is not a package, then a Java compiler eclipse is compiler

59
00:04:36.570 --> 00:04:40.560
doesn't really consider them for compilation.

60
00:04:40.560 --> 00:04:42.150
They are not part of the class path.

61
00:04:42.150 --> 00:04:42.660
Right.

62
00:04:42.660 --> 00:04:45.660
So that's how we distinguish packages and etc..

63
00:04:45.660 --> 00:04:53.100
Now if we look at the go to a navigator and look at our being directory, you see there is a bean directory

64
00:04:53.160 --> 00:04:57.120
that mirrors the hierarchy of the Z or source directory.

65
00:04:57.360 --> 00:04:59.810
It also has a directory which is a.

66
00:05:00.190 --> 00:05:01.810
Which corresponds to our package.

67
00:05:02.260 --> 00:05:09.010
And then inside it, it has the compiled version of the source file right in the package here in the

68
00:05:09.010 --> 00:05:12.400
Z, we have the source file and here we have the class one.

69
00:05:12.430 --> 00:05:14.980
And again, Eclipse compiler is very fast right now.

70
00:05:14.980 --> 00:05:19.450
If I drag and drop this class file into the editor, I've configured it to decompile it.

71
00:05:19.480 --> 00:05:25.420
We can operate with a class file viewer to just see the basically the byte codes.

72
00:05:26.500 --> 00:05:31.720
And as you can see, the, the name of the type is the fully qualified name because this class is inside

73
00:05:31.720 --> 00:05:32.440
the package.

74
00:05:32.440 --> 00:05:37.830
And it also has a comment of basically which version of the JDK was used.

75
00:05:37.840 --> 00:05:42.670
As you can see, I've set up my Java project to use JDK 17.

76
00:05:43.960 --> 00:05:44.590
All right.

77
00:05:45.910 --> 00:05:47.440
Now we want to see.

78
00:05:47.980 --> 00:05:52.180
I want to select a resource, a source file in the tree, remember?

79
00:05:52.180 --> 00:05:52.750
Source file.

80
00:05:52.780 --> 00:05:59.020
But then I want to I want to use the environment variable of the eclipse that returns the fully qualified

81
00:05:59.020 --> 00:05:59.910
name of the class file.

82
00:05:59.920 --> 00:06:04.210
So in the previous lecture we create this dummy external tool, which is just the LS.

83
00:06:04.210 --> 00:06:12.640
For example, we set the working directory to the project location and then actually I'm going to change

84
00:06:12.640 --> 00:06:12.840
this.

85
00:06:12.850 --> 00:06:18.010
Let's see if we can change this to echo.

86
00:06:18.700 --> 00:06:19.390
Let's see.

87
00:06:19.390 --> 00:06:22.960
Actually, this gives an error, I believe.

88
00:06:24.250 --> 00:06:31.810
Let's go back quickly to the terminal, which echo I think Echo is in the bean or let's get the bean.

89
00:06:33.480 --> 00:06:33.930
All right.

90
00:06:33.930 --> 00:06:37.260
And then a working directory doesn't matter.

91
00:06:37.260 --> 00:06:38.670
Project location.

92
00:06:38.700 --> 00:06:45.060
Now, if you want to access the bin, we know that all the packages are in the bean folder.

93
00:06:45.150 --> 00:06:49.860
There are all the classes and all the packages translate or mapped in a directory, right.

94
00:06:49.860 --> 00:06:55.110
So the working directory you set it to, you can set it different ways.

95
00:06:55.110 --> 00:06:59.970
You have to say to the bean directory of your Java project.

96
00:06:59.970 --> 00:07:00.480
Right.

97
00:07:00.480 --> 00:07:05.820
So we want to say that for example, we can use the project, location or work.

98
00:07:05.970 --> 00:07:10.530
You can start either from the workspace or the project location.

99
00:07:10.530 --> 00:07:11.190
Right.

100
00:07:11.190 --> 00:07:13.920
And this returns the absolute file system path.

101
00:07:14.160 --> 00:07:17.400
And then here I can say forward slash bean.

102
00:07:18.120 --> 00:07:24.090
So at this points the this runs this command in the bean and then arguments we're going to say that

103
00:07:25.500 --> 00:07:32.940
Java type name, right, Java type name and this returns the fully qualified the class file the name

104
00:07:32.940 --> 00:07:39.090
of the class even though you select, for example, the source file test class, the Java E returns

105
00:07:39.090 --> 00:07:45.390
a fully qualified and we can also see the command line here being echo Java native image.

106
00:07:45.390 --> 00:07:53.460
So right now I selected these test class that Java, so it has been echo and then a Java type name gets

107
00:07:53.460 --> 00:07:59.100
translated into the fully qualified name of this class, which is the package dot the class name.

108
00:07:59.100 --> 00:07:59.600
Right.

109
00:07:59.610 --> 00:08:01.020
Again, this is very important.

110
00:08:01.020 --> 00:08:06.480
Java type name is very important and whenever you want to use it, because the fully qualified name

111
00:08:06.480 --> 00:08:10.290
is with respect to the top level of your class path, which is the bean directory.

112
00:08:10.290 --> 00:08:14.790
That's how Eclipse organizes your class files when it compiles them later on.

113
00:08:14.790 --> 00:08:19.860
When when we use Maven, for example, you will said you have to point it to the directory.

114
00:08:19.860 --> 00:08:24.690
That Maven after compilation puts all the class files so close.

115
00:08:24.900 --> 00:08:29.040
Let's run this and it just prints the java native image test class.

116
00:08:29.040 --> 00:08:29.550
Right.

117
00:08:30.750 --> 00:08:38.340
So whatever class file did I select, let's say test class two for example, let's have a main method.

118
00:08:38.340 --> 00:08:42.480
It doesn't matter if I select this as soon as it basically is already saved.

119
00:08:42.480 --> 00:08:45.960
So Eclipse already compiled the source file and the class file is there.

120
00:08:45.960 --> 00:08:52.440
If I select this one and run my external tool, it's going to print a fully qualified name of this class.

121
00:08:52.440 --> 00:08:52.830
Right?

122
00:08:52.890 --> 00:08:55.710
I'm running an external tool, which is the echo tool.

123
00:08:55.740 --> 00:08:58.950
Now, if I don't set this to the bean directory, let's see what happens.

124
00:09:00.930 --> 00:09:02.640
And now it cannot find it, right.

125
00:09:02.640 --> 00:09:06.060
So variable reference, empty selection, something like that.

126
00:09:07.470 --> 00:09:09.650
Let's try to run this again.

127
00:09:09.660 --> 00:09:10.560
How it still works.

128
00:09:10.560 --> 00:09:10.950
Yeah.

129
00:09:14.270 --> 00:09:15.740
So the Java type name works.

130
00:09:15.740 --> 00:09:20.780
I mean, you don't need to really point this echo command to the Bing directory, right?

131
00:09:20.780 --> 00:09:24.700
But let's say now you actually want to use an external tool.

132
00:09:24.710 --> 00:09:27.740
Let's say you want to use a different JVM, right?

133
00:09:27.740 --> 00:09:32.660
So let's go to I think it's a library.

134
00:09:33.890 --> 00:09:34.680
Library.

135
00:09:34.700 --> 00:09:38.060
Java Java Virtual machines.

136
00:09:38.060 --> 00:09:40.520
We can browse the file system.

137
00:09:41.670 --> 00:09:49.950
So let's go to a library and then a Java Java virtual machines.

138
00:09:49.950 --> 00:09:53.520
And then let's say we were running with JDK 17.

139
00:09:54.090 --> 00:09:59.880
One way to run with a different JVM is to use an external tool which is not recommended.

140
00:09:59.880 --> 00:10:05.160
I mean, there are better ways to do it in Eclipse ID, so let's say we want to run with JDC 18.

141
00:10:05.160 --> 00:10:05.520
Right?

142
00:10:05.520 --> 00:10:10.770
Contents home and then bean and our JVM is the Java Command.

143
00:10:11.250 --> 00:10:11.760
Right?

144
00:10:12.060 --> 00:10:14.520
So we are running with the JDK 18.

145
00:10:14.520 --> 00:10:17.550
We have to point it to the bean directory and the Java type name.

146
00:10:17.550 --> 00:10:18.090
Right.

147
00:10:18.090 --> 00:10:21.960
And the Java type name is supposed to have the main method.

148
00:10:21.960 --> 00:10:22.470
Right?

149
00:10:23.190 --> 00:10:26.370
So if we apply clause, let's say we run this.

150
00:10:26.370 --> 00:10:29.430
So if I run my external tool.

151
00:10:30.450 --> 00:10:32.400
And could not find our main class.

152
00:10:33.630 --> 00:10:34.540
Let's see.

153
00:10:34.560 --> 00:10:35.700
Why is that?

154
00:10:38.930 --> 00:10:43.340
So we're running Java and then a working directory is being.

155
00:10:43.340 --> 00:10:44.930
So we are running from being.

156
00:10:44.960 --> 00:10:47.810
Now again the problem is we the class path right.

157
00:10:47.810 --> 00:10:48.380
So.

158
00:10:50.460 --> 00:10:53.220
Uh, hyphen CP here, for example.

159
00:10:53.220 --> 00:10:54.530
Let's see if this works.

160
00:10:54.540 --> 00:10:55.680
Yes, now it works.

161
00:10:55.680 --> 00:11:00.900
So we had to tell it manually to set the class path to the working directory.

162
00:11:00.900 --> 00:11:07.710
This dot and then this dot now points to the working directory when you run this JDK 18 JVM and the

163
00:11:07.710 --> 00:11:13.860
working directive we already set it to been, which is correct because class files are the class path.

164
00:11:13.860 --> 00:11:20.130
The way Eclipse organizes your project is that the top level directory in your class path is being directory

165
00:11:20.130 --> 00:11:24.630
and all the packages fully qualified name are with respect to this bin directory.

166
00:11:24.900 --> 00:11:32.550
So this is one way to run basically with a different gvm, right?

167
00:11:33.420 --> 00:11:37.560
Right now if I run with Eclipse Run Command, it runs with the.

168
00:11:39.420 --> 00:11:41.610
Let's select this test class.

169
00:11:42.830 --> 00:11:43.460
Ron.

170
00:11:44.210 --> 00:11:45.030
Hello world.

171
00:11:45.050 --> 00:11:45.380
Yeah.

172
00:11:45.380 --> 00:11:51.740
So it runs with the internal configuration here in Eclipse, which is JDK or Gvm 17 or Java runtime

173
00:11:51.740 --> 00:11:52.540
17.

174
00:11:52.550 --> 00:11:58.370
If I run this way, the external tool is going to run with the JDK 18.

175
00:11:58.370 --> 00:11:59.450
Right, you see here.

176
00:11:59.450 --> 00:12:05.900
Now I can actually prove it to you because we already know that the Java has the runtime so we can check

177
00:12:05.900 --> 00:12:12.380
the runtime version inside our Java source file.

178
00:12:13.280 --> 00:12:23.420
So what we can do, we can say runtime runtime is runtime get runtime, right?

179
00:12:23.420 --> 00:12:26.840
So basically this is a single turn, right?

180
00:12:26.840 --> 00:12:32.330
And then we can do a C out runtime.

181
00:12:32.330 --> 00:12:33.530
That's

182
00:12:35.900 --> 00:12:38.840
basically version.

183
00:12:38.840 --> 00:12:40.220
Let's see, runtime.

184
00:12:40.220 --> 00:12:42.260
That version is a static method.

185
00:12:42.380 --> 00:12:45.920
So we could just run it actually under runtime class itself.

186
00:12:46.550 --> 00:12:51.680
So if you run this with the internal of JVM, it says that it's 17, right?

187
00:12:51.770 --> 00:13:03.860
Ltz So we are running with a Java or Java runtime 17 actually, let's, let's do a string, a Java or

188
00:13:03.860 --> 00:13:08.840
JVM runtime percent SW or we can just add it.

189
00:13:08.840 --> 00:13:12.640
So plus runtime dot kid version or version.

190
00:13:13.370 --> 00:13:21.200
So if you run this, we're running with Java 17, if we use the internal run of the eclipse because

191
00:13:21.320 --> 00:13:26.540
Eclipse looks at the configuration for this project and right now it's JDK 17, right?

192
00:13:26.540 --> 00:13:30.620
So the system library that we assign to this project is 70.

193
00:13:30.620 --> 00:13:38.300
But now if I select this class or source file and then run my external tool, it's going to run with

194
00:13:38.300 --> 00:13:40.150
the Java 18 OC.

195
00:13:40.220 --> 00:13:45.020
So again, I want to understand one way which is not recommended, but that's one way to run.

196
00:13:45.020 --> 00:13:52.580
With different VMs, you can define external tools and JVM command.

197
00:13:52.580 --> 00:13:54.590
The external tool obviously is the Java tool.

198
00:13:54.590 --> 00:13:55.400
We've seen this.

199
00:13:55.400 --> 00:13:59.750
Java is the external tool in the being directory of the JDK.

200
00:13:59.750 --> 00:14:03.650
And then the way you configure it, first of all, you have to set the working directly to the bean

201
00:14:03.650 --> 00:14:10.280
directory of the Eclipse project because that's how Eclipse organizes your class files after compilation

202
00:14:10.280 --> 00:14:11.390
Inside the Bean Directory.

203
00:14:11.390 --> 00:14:15.680
There are also all the directories that point to the packages.

204
00:14:15.680 --> 00:14:23.570
And inside the packages there are all the basically all the class files and then you have to tell the

205
00:14:23.570 --> 00:14:26.600
Java hey, the class file hyphen CPP is here.

206
00:14:27.620 --> 00:14:34.580
Or you can manually actually set it also to you can manually copy and paste this value project your

207
00:14:34.580 --> 00:14:36.720
location being to here.

208
00:14:36.740 --> 00:14:37.010
Right.

209
00:14:37.010 --> 00:14:44.270
You have to tell the job, the class path is the being directory and then a Java type name and this

210
00:14:44.270 --> 00:14:49.550
returns the fully qualified name of the class file because we know that JVM operates on the class files,

211
00:14:49.550 --> 00:14:50.660
not the source files.

212
00:14:51.620 --> 00:14:52.100
All right.

213
00:14:52.100 --> 00:14:54.570
So this works this one way.

214
00:14:54.590 --> 00:15:01.760
Now, one interesting thing is that if you create any file, anything inside a package, it clips actually

215
00:15:01.760 --> 00:15:07.910
copies that file also in the being directory in the same folder, because now this file is considered

216
00:15:07.910 --> 00:15:08.640
a resource, right?

217
00:15:08.660 --> 00:15:10.670
Let's call it resource txt.

218
00:15:11.030 --> 00:15:18.380
And then if I go and look at my being directory, you see that was copied also in the bin directory.

219
00:15:18.380 --> 00:15:25.330
Again, anything that is in the packages in the Z will be mirrored in the will be mirrored in the bin

220
00:15:25.340 --> 00:15:31.130
directory as well, just because anything in a package is considered a resource for your Java project.

221
00:15:31.130 --> 00:15:31.670
Right.

222
00:15:31.790 --> 00:15:37.010
Whereas anything in this directory is you see none of these directories that are not packaged or copied

223
00:15:37.010 --> 00:15:40.070
to my to my bin directory.

224
00:15:41.930 --> 00:15:42.320
All right.

225
00:15:42.320 --> 00:15:43.520
So that's one thing.

226
00:15:44.060 --> 00:15:50.060
Let's go back and look at the other basically environment variables.

227
00:15:50.060 --> 00:15:53.300
So the Java type name, again, it's a class named class file, right?

228
00:15:53.300 --> 00:15:56.480
Fully qualified name of the class project class path.

229
00:15:56.480 --> 00:15:59.450
This is the second most important thing, right?

230
00:15:59.450 --> 00:16:02.510
Returns the resolved class path of a project.

231
00:16:02.540 --> 00:16:08.390
A project name can be provided as an argument if no argument is provided, the target project is the

232
00:16:08.390 --> 00:16:10.520
project of the selected resource.

233
00:16:10.520 --> 00:16:17.630
So what this means is if I go back to Eclipse, we can look at the class path.

234
00:16:17.630 --> 00:16:22.400
Let's say I want to know what is the class path for any resource that I select.

235
00:16:22.400 --> 00:16:27.860
Obviously those resources have to be in the RC and that is RC is inside some Java project.

236
00:16:27.860 --> 00:16:28.310
Right.

237
00:16:28.310 --> 00:16:31.700
So what I'm going to do, I'm going to say forward slash bean echo.

238
00:16:31.730 --> 00:16:36.770
It's just echoes to the terminal, echoes whatever the string is back working directory doesn't really

239
00:16:36.770 --> 00:16:37.190
matter.

240
00:16:37.190 --> 00:16:42.350
And then I'm going to say that the project class path.

241
00:16:43.570 --> 00:16:46.180
All right, so apply and then close.

242
00:16:46.200 --> 00:16:53.880
Now, if I use any of these source files, anything here, even anything that is not inside a RC, inside

243
00:16:53.880 --> 00:17:00.660
a package because price class path looks what kind of directory or file you select and then figures

244
00:17:00.660 --> 00:17:03.690
out what is the Java project for that?

245
00:17:03.690 --> 00:17:08.000
And then it prints the class path of that Java project.

246
00:17:08.010 --> 00:17:16.440
So if I run my dummy, it's going to tell me that basically the class path is being directory of the

247
00:17:16.440 --> 00:17:20.100
Java native image and then the being directory of another project.

248
00:17:20.100 --> 00:17:26.220
The reason is that if I look at the actually if if you right click and then build path configure build

249
00:17:26.220 --> 00:17:26.730
path.

250
00:17:27.060 --> 00:17:29.280
I have given a.

251
00:17:31.020 --> 00:17:31.980
Let's see.

252
00:17:38.070 --> 00:17:45.300
Java build path and in project references I have the or basically let's see.

253
00:17:46.690 --> 00:17:52.920
So the project nature is project references is a dev job.

254
00:17:52.930 --> 00:17:59.260
So I have given this a Java native image, a dependency, right?

255
00:17:59.260 --> 00:18:04.240
So in Eclipse one project can depend on the other projects and Eclipse knows that.

256
00:18:04.240 --> 00:18:10.090
What it means is that Eclipse adds the being directory of the other project to the class path of this

257
00:18:10.090 --> 00:18:10.960
current project.

258
00:18:10.990 --> 00:18:17.860
So if I uncheck this so I don't have any dependency on the other project, if I select anything here,

259
00:18:17.890 --> 00:18:24.640
any file, and then run my external tool, it tells me where it still shows the.

260
00:18:27.090 --> 00:18:28.560
So let's see.

261
00:18:28.560 --> 00:18:30.600
Why is it that still showing the.

262
00:18:35.290 --> 00:18:39.700
Joe Editor Java compiler java.

263
00:18:40.030 --> 00:18:40.930
Okay.

264
00:18:40.960 --> 00:18:41.260
Yeah.

265
00:18:41.260 --> 00:18:42.400
So it still shows that.

266
00:18:42.400 --> 00:18:46.330
But now we're looking at the full class path of the.

267
00:18:47.240 --> 00:18:53.010
Of our Java project right now we know that even in the source file we can look at the class path of

268
00:18:53.010 --> 00:18:53.610
our project.

269
00:18:53.610 --> 00:18:55.150
So let's do a count.

270
00:18:56.610 --> 00:19:06.450
Let's add some separator and then a string, as is a system that get property.

271
00:19:06.690 --> 00:19:16.150
And the property for the class path is java class path and then see out s.

272
00:19:17.760 --> 00:19:19.230
So if we run this.

273
00:19:20.970 --> 00:19:25.680
It tells me that there are two directories on the class path.

274
00:19:25.680 --> 00:19:26.080
Right.

275
00:19:26.100 --> 00:19:28.230
If I run my external tool.

276
00:19:29.770 --> 00:19:31.480
It tells me the same thing, right?

277
00:19:31.480 --> 00:19:37.270
So that project class path eclipse again inside the eclipse, it's smart enough to know that whatever

278
00:19:37.270 --> 00:19:42.430
file you select, which belongs to a Java project, Eclipse, is already aware of what the class path

279
00:19:42.430 --> 00:19:44.290
configuration is for that project.

280
00:19:44.290 --> 00:19:50.920
And this will come very handy when we try to configure and extend our tool to run native image and compile

281
00:19:50.920 --> 00:19:54.360
our Java applications to native executable binaries.

282
00:19:54.370 --> 00:19:58.870
Now, I mean, I guess you at the moment you have a good idea of where I'm going with this, right?

283
00:19:58.870 --> 00:20:04.360
For the native image, when we run from the terminal, we need a two very, very important piece of

284
00:20:04.360 --> 00:20:05.200
information.

285
00:20:05.350 --> 00:20:11.290
One is which class we want to compile, which basically a class that has the main method, right?

286
00:20:11.290 --> 00:20:13.210
That's the entry point to our application.

287
00:20:13.210 --> 00:20:18.040
And inside a Java project, you can have multiple classes that have main method, right?

288
00:20:18.040 --> 00:20:25.270
So if I want to configure a single external tool that tells a native image, Hey, this class is the

289
00:20:25.270 --> 00:20:31.120
one that has the main method I can, I want to either I want to select a class and then they figure

290
00:20:31.330 --> 00:20:38.080
and let the external tool to automatically figure out that that class is the one that has the main method.

291
00:20:38.080 --> 00:20:40.690
So we use the Java type name for that.

292
00:20:41.410 --> 00:20:47.260
The other important piece of information that we have to give to the native image is the class path

293
00:20:47.260 --> 00:20:55.540
of the project, because native image also needs to know all the dependencies of that your Java project,

294
00:20:55.540 --> 00:21:01.300
right Java application so that it compiles all those class files to native executable binary and these

295
00:21:01.300 --> 00:21:03.910
two pieces of information we've already seen.

296
00:21:03.910 --> 00:21:06.190
And then the next one is the working directory.

297
00:21:06.190 --> 00:21:06.520
Right.

298
00:21:06.520 --> 00:21:14.740
And again, you have to tell the, give the native image class files and in order to do that you have

299
00:21:14.740 --> 00:21:17.530
to set working directory in eclipse to the beam directory.

300
00:21:17.530 --> 00:21:18.040
Right.

301
00:21:19.670 --> 00:21:24.290
All right, so let's go back and quickly go through the other ones project name this returns if you

302
00:21:24.290 --> 00:21:30.440
select any file in the tree project name returns the name of the Java project that that file belongs

303
00:21:30.440 --> 00:21:37.310
to project location returns the absolute file system path to the project that whatever file you select

304
00:21:37.310 --> 00:21:39.980
in the tree, the project location project path.

305
00:21:39.980 --> 00:21:42.320
Okay, so there is a difference between location and path.

306
00:21:42.320 --> 00:21:45.020
Path means relative to the workspace.

307
00:21:45.020 --> 00:21:50.750
Workspace relative path of resource project location means the absolute filesystem path.

308
00:21:50.750 --> 00:21:50.990
Right?

309
00:21:50.990 --> 00:21:57.410
So they distinguish between these two in the in the in environment values of the eclipse because that's

310
00:21:57.410 --> 00:22:03.530
sometimes you want to only look at the relative path to the workspace or sometimes you want to get the

311
00:22:03.530 --> 00:22:05.150
absolute path right again.

312
00:22:05.150 --> 00:22:05.810
Same thing here.

313
00:22:05.810 --> 00:22:13.100
Resource location is the absolute path to whatever file you select in the tree view resource name.

314
00:22:13.100 --> 00:22:15.380
It just returns the name of the file that you select.

315
00:22:15.380 --> 00:22:21.290
Resource Path returns the relative path of the file that you select in the tree.

316
00:22:21.440 --> 00:22:28.130
With respect to the workspace and workspace location, obviously this returns the absolute file system

317
00:22:28.130 --> 00:22:29.780
path of the workspace, right?

318
00:22:29.780 --> 00:22:35.330
Again, eclipse, whenever you want to run Eclipse, you have to select a directory which is your workspace.

319
00:22:35.330 --> 00:22:39.770
All the jobs, all the projects, Java projects are organized inside that directory.

320
00:22:39.890 --> 00:22:43.490
So I hope you enjoy this lecture and please stay tuned.

321
00:22:43.490 --> 00:22:44.540
I'll see in the next one.
