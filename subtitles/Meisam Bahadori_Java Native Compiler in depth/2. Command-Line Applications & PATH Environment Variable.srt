1
00:00:00,480 --> 00:00:02,520
Hello and welcome to another tutorial.

2
00:00:02,520 --> 00:00:08,580
We're going to continue our discussion on VM Native Image and how to compile our job application to

3
00:00:08,580 --> 00:00:10,800
Native Executable binaries.

4
00:00:10,950 --> 00:00:16,860
And I mentioned that in the first step, we're just going to look at how generally we launch a Java

5
00:00:16,860 --> 00:00:17,970
application, right?

6
00:00:17,970 --> 00:00:25,710
And if you're using IDE, most of the details are hidden from you, but then it's good, it's a good

7
00:00:25,710 --> 00:00:27,630
practice to really know how to do it.

8
00:00:27,630 --> 00:00:34,110
And we know that in general it's the terminal or the command line of the operating system that is the

9
00:00:34,110 --> 00:00:37,200
interface between the user, the human and the hardware.

10
00:00:37,200 --> 00:00:37,590
Right.

11
00:00:37,590 --> 00:00:43,320
You talk to the operating system through the terminal, through the command line, and then operating

12
00:00:43,320 --> 00:00:47,910
system understands what you're trying to do and then it instructs the hardware to do it.

13
00:00:47,910 --> 00:00:52,470
And then the CPU does, for example, some calculations and returns the result back to the operating

14
00:00:52,470 --> 00:00:54,930
system and then the operating system returns.

15
00:00:54,930 --> 00:01:02,130
The result back to you and terminal is available in all platforms Linux, Linux, Mac, OS and Windows.

16
00:01:02,910 --> 00:01:09,600
Although I personally prefer Mac OS and Linux terminals that Windows is the command line that comes

17
00:01:09,600 --> 00:01:11,370
by default is not that great.

18
00:01:11,490 --> 00:01:17,670
From Windows ten, I believe they introduced a new shell which is called PowerShell and there are also

19
00:01:17,670 --> 00:01:20,730
some standalone applications that you can install in Windows.

20
00:01:20,730 --> 00:01:27,000
They provide their own terminals, same with Mac OS, for example, the default terminal that comes

21
00:01:27,000 --> 00:01:27,690
with Mac OS.

22
00:01:27,690 --> 00:01:28,920
I'm going to open it up.

23
00:01:29,070 --> 00:01:31,260
You can add the customization to it.

24
00:01:31,260 --> 00:01:37,110
Right now I'm running an application on top of the terminal called Fish.

25
00:01:37,110 --> 00:01:41,070
Fish is a basically friendly interactive shell.

26
00:01:41,070 --> 00:01:47,670
So if you want to install it, which I highly recommend, you just go to Internet and search for fish.

27
00:01:47,940 --> 00:01:55,080
Let's say let's go to Google, for example, and then search for download fish and then it's the fish

28
00:01:55,080 --> 00:01:55,530
shell.

29
00:01:55,530 --> 00:01:59,070
So finally a command line shell for the night.

30
00:01:59,070 --> 00:02:01,110
So this is a very nice interactive shell.

31
00:02:01,110 --> 00:02:08,280
It has a lot of nice features like Autocomplete, and then it has highlighting.

32
00:02:08,280 --> 00:02:14,190
For example, if I want to see which version of fish you use, it already has nice intelligence suggestions.

33
00:02:14,190 --> 00:02:15,690
I just hit tab.

34
00:02:15,720 --> 00:02:18,480
It tells me what options are available.

35
00:02:18,480 --> 00:02:23,220
You can use the arrow up and down to switch between them.

36
00:02:23,220 --> 00:02:27,810
I'm going to just say hit fish, dash dash and then hit tab.

37
00:02:27,810 --> 00:02:30,210
It gives me lots of new suggestions.

38
00:02:30,420 --> 00:02:37,020
I can, for example, just select version and it tells me which version of fish I use, right?

39
00:02:37,230 --> 00:02:41,580
So fish basically a command line application or a basically

40
00:02:43,920 --> 00:02:46,050
basically an executable binary.

41
00:02:46,050 --> 00:02:51,870
And if you want to know where an application is, so basically whenever you type the name of an application,

42
00:02:51,870 --> 00:02:58,170
let's say Java, write what you want to do this the operating system tries to understand this and when

43
00:02:58,170 --> 00:03:01,290
you say Java, it means you're telling the operating system.

44
00:03:01,320 --> 00:03:09,540
Remember, you talk to the operating system via the terminal and terminal is a fully text based interface,

45
00:03:09,540 --> 00:03:09,810
right?

46
00:03:10,020 --> 00:03:13,260
There is no like other applications like this PowerPoint.

47
00:03:13,290 --> 00:03:18,750
It has a lot of nice interactive features, but terminals, usually they're just text based, right.

48
00:03:18,750 --> 00:03:25,440
So so you might think that terminals are actually not an easy thing to use, but then once you get accustomed

49
00:03:25,440 --> 00:03:30,570
to them, you realize that using terminals is very good for automating stuff.

50
00:03:30,570 --> 00:03:35,580
So because terminals also understand scripts, right?

51
00:03:35,610 --> 00:03:37,290
You can write shell scripts.

52
00:03:37,740 --> 00:03:44,460
They're sometimes called shell script and they usually have that as edge extension on Mac OS and Linux.

53
00:03:44,670 --> 00:03:50,250
And then you can write very long shell scripts and execute them to automate a lot of stuff.

54
00:03:50,250 --> 00:03:55,290
So a lot of boring stuff terminals, if you just manually want to enter them in terminals, they're

55
00:03:55,290 --> 00:03:56,370
very tedious.

56
00:03:56,550 --> 00:04:02,580
But then because terminals or command lines also understand scripts, you can have a very large script

57
00:04:02,580 --> 00:04:04,710
and then run it and terminal.

58
00:04:04,710 --> 00:04:06,420
It spends a lot of time executing them.

59
00:04:06,420 --> 00:04:09,600
You don't need to manually enter every line of code, right?

60
00:04:10,500 --> 00:04:16,320
So again, Java, when you type Java, it means you're telling the operating system to launch this binary,

61
00:04:16,320 --> 00:04:22,080
this executable application in Java, which we know that it comes from the bean folder of the Java JDK.

62
00:04:22,080 --> 00:04:22,560
Right.

63
00:04:22,860 --> 00:04:27,540
And then in order for the operating system to understand these, it has to first be able to locate a

64
00:04:27,540 --> 00:04:31,140
binary somewhere on your hard disk called Java.

65
00:04:31,170 --> 00:04:31,770
Right.

66
00:04:31,770 --> 00:04:33,450
And we know that this exists, right?

67
00:04:33,540 --> 00:04:40,050
If you want to know if the operating system or the terminal is able to locate a binary and executable

68
00:04:40,050 --> 00:04:49,110
application, there is a command called which and it comes, I believe, by default with with macOS

69
00:04:49,110 --> 00:04:51,300
Terminal and Linux for Windows.

70
00:04:51,300 --> 00:04:55,680
Again, these commands are very different because Windows is not Unix based.

71
00:04:55,680 --> 00:04:59,940
We know that Mac OS and Linux are UNIX based, so they follow the same pattern.

72
00:05:00,230 --> 00:05:07,150
It's the same commands so which Java and it tells me that it can find an application and executable

73
00:05:07,150 --> 00:05:12,270
binary called Java which is in my from the root of my hard disk.

74
00:05:12,280 --> 00:05:13,660
It goes to library folder.

75
00:05:13,690 --> 00:05:14,410
Java folder.

76
00:05:14,440 --> 00:05:18,640
Java Virtual Machine JDK 17 Contents Home Being Java.

77
00:05:18,670 --> 00:05:24,430
So it says that basically when you type Java, the operating system or the terminal, when it tells

78
00:05:24,430 --> 00:05:29,670
the operating system what to do, it actually replace this Java with this line, right?

79
00:05:29,680 --> 00:05:36,040
Because operating system only understands the fully qualified full name of the application there is.

80
00:05:36,040 --> 00:05:41,920
A and the reason that you are able to do this simplification, remember, this is just a simplification

81
00:05:41,920 --> 00:05:47,410
for the human eye because it's very tedious to every time you have to type these, let's say I want

82
00:05:47,410 --> 00:05:49,120
to know which version of the Java I'm using.

83
00:05:49,120 --> 00:05:51,790
You have to type this whole name library.

84
00:05:51,790 --> 00:05:58,000
You give it the full path and then on hyphen, hyphen version and it tells me that I'm using Java 17

85
00:05:58,000 --> 00:06:01,870
Ltz, which is the Oracle hot spot, right?

86
00:06:01,960 --> 00:06:07,120
This is not the open JDK version, for example, but because this is very tedious, especially if you

87
00:06:07,120 --> 00:06:13,630
have lots of directories and then your binary application is there, what the operating systems allow

88
00:06:13,630 --> 00:06:16,630
you to do is predefined these paths.

89
00:06:16,630 --> 00:06:21,850
So this this library, home being all this, this is called a path, right?

90
00:06:21,850 --> 00:06:27,910
Or a directory that some executable binaries can be found in this Bing directory.

91
00:06:28,120 --> 00:06:34,090
And the operating systems provide a feature called the environment variable.

92
00:06:34,270 --> 00:06:40,030
So environment variables and every terminal you can define environment variables for them.

93
00:06:40,030 --> 00:06:44,170
In macros and Linux, you can define environment variables for the terminal.

94
00:06:44,500 --> 00:06:49,060
In Windows, you kind of need to define the global environment variables for the operating system.

95
00:06:49,060 --> 00:06:54,340
And again, you talk to the operating system through the terminal or the command line, but my emphasis

96
00:06:54,340 --> 00:07:00,340
for these lectures is mostly on macros and Linux because they're more friendly in terms of interacting

97
00:07:00,340 --> 00:07:01,030
with the terminals.

98
00:07:01,030 --> 00:07:06,490
Their support for the terminals and interaction with the humans is more friendly.

99
00:07:06,490 --> 00:07:09,990
But I will have lectures about windows and how to use the terminal there.

100
00:07:11,050 --> 00:07:19,330
So there is a command called Echo and then this allows you to see or see the value of the global environment

101
00:07:19,330 --> 00:07:22,690
variables that your terminal or currently understands.

102
00:07:22,690 --> 00:07:24,460
And one of them is called PATH.

103
00:07:24,730 --> 00:07:32,230
Now if I type echo path, this echo means whatever it takes that comes after these, just echo it back

104
00:07:32,230 --> 00:07:33,040
to the terminal.

105
00:07:33,040 --> 00:07:33,880
So it just path.

106
00:07:33,880 --> 00:07:38,680
So it doesn't understand that this is not a text, I mean an environment variable.

107
00:07:38,680 --> 00:07:45,160
So to differentiate between a text and a variable, you have to use a dollar sign the other path in

108
00:07:45,220 --> 00:07:48,910
macOS and Linux in Windows, I believe it's a double person.

109
00:07:48,910 --> 00:07:54,400
So in Windows, for example, you type these here, it doesn't understand in macOS and Linux you have

110
00:07:54,400 --> 00:07:55,690
to use a dollar.

111
00:07:56,230 --> 00:08:02,920
Now, as you can see now it gives me a list of directories, user locale bin and one of them is Library

112
00:08:02,920 --> 00:08:06,850
Java Java Virtual Machine, JDK 17 Contents Home Bin.

113
00:08:07,000 --> 00:08:12,340
What this means is that I've already added this directory to the my to my path environment variable.

114
00:08:12,580 --> 00:08:18,610
And with this whenever I type Java, basically what happens is that because the terminal realizes that

115
00:08:18,610 --> 00:08:24,760
this is not a path, any path it starts with either forward slash, which means from the root of the

116
00:08:24,760 --> 00:08:27,130
hard disk or dot slash.

117
00:08:27,130 --> 00:08:36,820
So whenever you declare a path, a path in terminal, you either start from absolute path, which means

118
00:08:36,820 --> 00:08:42,100
from the root which is forward slash in macOS and Linux or dot forward.

119
00:08:42,130 --> 00:08:46,750
This means this is a relative path from the current working directly, which is this folder mesa.

120
00:08:46,780 --> 00:08:47,230
Right.

121
00:08:47,230 --> 00:08:51,340
So this is my current if you want to know what directory you are in.

122
00:08:51,340 --> 00:08:55,270
And again, this is another feature of the terminals or command line.

123
00:08:55,270 --> 00:09:01,630
Whenever you talk to the operating system, it means you are running or executing an application or

124
00:09:01,630 --> 00:09:03,100
a command in the terminal.

125
00:09:03,100 --> 00:09:03,550
Right.

126
00:09:03,730 --> 00:09:07,990
And in order to be able to do that, you have to be inside some working directory.

127
00:09:07,990 --> 00:09:13,330
So there is a command called P, W de or print working directory and it tells you where you are.

128
00:09:13,330 --> 00:09:20,290
For example, I can go from the current directory, I can go into my desktop folder and now I'm now

129
00:09:20,290 --> 00:09:23,680
inside the desktop now usually for the home directory.

130
00:09:23,680 --> 00:09:31,330
So this usually when you log into your operating system, the terminal by default is inside your home

131
00:09:31,330 --> 00:09:32,440
directory, right?

132
00:09:32,560 --> 00:09:37,300
And there is actually a and different users of the same computer.

133
00:09:37,300 --> 00:09:39,820
They get different home directory, right?

134
00:09:39,850 --> 00:09:40,900
They have separate home.

135
00:09:40,900 --> 00:09:46,870
And inside the home you usually have a desktop folder, documents folder, downloads folder.

136
00:09:46,870 --> 00:09:53,860
So if I go back up to my home directory and do a LS SMS list, all the files and directories see every

137
00:09:53,860 --> 00:09:56,770
user gets its own library folder.

138
00:09:56,890 --> 00:09:58,180
Music, movies.

139
00:09:58,330 --> 00:09:59,020
I don't know.

140
00:10:00,030 --> 00:10:02,730
Whatever documents, downloads, desktop, right?

141
00:10:02,730 --> 00:10:08,460
So every user gets its own copy of these folders under hard disk, right?

142
00:10:08,460 --> 00:10:15,510
So whenever some user logs in with their username and password, then these folders are basically the

143
00:10:15,510 --> 00:10:18,090
operating system knows which folders to present.

144
00:10:18,090 --> 00:10:22,310
Different folders have different home directories, right?

145
00:10:22,320 --> 00:10:23,490
That's completely separate.

146
00:10:23,490 --> 00:10:26,970
But the root directories are the same.

147
00:10:26,970 --> 00:10:29,190
For example, forward slash library.

148
00:10:29,190 --> 00:10:30,270
This is a root directory.

149
00:10:31,050 --> 00:10:37,470
There is no dot here, which means this is an absolute path from the root of the hard disk, which is

150
00:10:37,470 --> 00:10:42,780
the forward slash right now in obviously in windows, I believe we have to say the name of the drive,

151
00:10:42,780 --> 00:10:45,960
something like this drive C or drive the in Mac OS and Linux.

152
00:10:45,960 --> 00:10:50,820
Usually we don't have many partitions, there's only there's usually one partition and that's the root,

153
00:10:50,820 --> 00:10:51,180
right?

154
00:10:51,180 --> 00:10:57,240
And you always start from so for example all the users, they get different directories, home directories,

155
00:10:57,240 --> 00:10:57,540
right?

156
00:10:57,540 --> 00:11:05,850
So their files, whatever one user puts on their own desktop is different from the files that others

157
00:11:05,850 --> 00:11:07,290
put on their own desktops.

158
00:11:07,290 --> 00:11:12,300
But everybody sees the same, for example, root directory, the same library directory, etc..

159
00:11:13,260 --> 00:11:20,130
Now, the point I'm trying to make here is that whenever you type a basically whenever you type an application,

160
00:11:20,130 --> 00:11:23,250
the terminal realizes that you're not specifying a path.

161
00:11:23,250 --> 00:11:24,720
This is just a name, right?

162
00:11:24,720 --> 00:11:32,790
So it tries to search for the name of that application in all the directories that are in the path directory.

163
00:11:32,790 --> 00:11:34,890
And it always starts from the first one.

164
00:11:34,920 --> 00:11:39,360
And usually applications come with a Bing directory, which is short for binary.

165
00:11:39,360 --> 00:11:42,630
Binary means all the command line executable applications.

166
00:11:42,630 --> 00:11:49,710
In the JDK we know that there is a bean that has Jar, Java, Java, C, etc. So whenever I type Java,

167
00:11:50,130 --> 00:11:56,340
the operating system or the terminal, it starts from the first directory that is in the path and you

168
00:11:56,340 --> 00:12:02,220
can have multiple directories in the past environment variable and then it realizes that there is no

169
00:12:02,220 --> 00:12:04,830
application called Java in the Bing directory here.

170
00:12:04,830 --> 00:12:06,540
So it goes to the next one.

171
00:12:06,540 --> 00:12:07,140
Right.

172
00:12:07,140 --> 00:12:12,540
And then it doesn't find it, it goes to the next one user, local bean, it doesn't find a Java application,

173
00:12:12,540 --> 00:12:18,810
so it goes to the next one library Java Virtual Machine, JDK 17 Contents Home Bin and then it finds

174
00:12:18,810 --> 00:12:23,100
a Java here and then it is sub searching and assumes that this is what you mean.

175
00:12:23,100 --> 00:12:31,140
So basically if you have multiple directories so I can have JDK 17 and 16 both on my path environment

176
00:12:31,140 --> 00:12:31,680
very well.

177
00:12:31,830 --> 00:12:38,910
But when the terminal tries to search for this application, it starts from the first directory and

178
00:12:38,910 --> 00:12:43,380
the first instance of this application that it finds it stops searching.

179
00:12:43,380 --> 00:12:51,630
So if I have JDK 17 and after that it comes JDK 16, the Java that we execute or the terminal finds

180
00:12:51,630 --> 00:12:52,770
is the JDK 17.

181
00:12:52,770 --> 00:12:54,990
So it's first come first, right?

182
00:12:54,990 --> 00:13:00,540
The very first directory that the terminal finds this application, it stops searching and assumes that

183
00:13:00,540 --> 00:13:01,320
that's what you want.

184
00:13:01,320 --> 00:13:06,150
So my recommendation is that whenever you try to launch Java from terminal, always check the version

185
00:13:06,150 --> 00:13:10,290
first hyphen, hyphen, version, and these are hyphen hyphen stuff.

186
00:13:10,290 --> 00:13:12,540
They are called the command line arguments.

187
00:13:12,540 --> 00:13:19,170
We will come back to these concepts later when we try to develop a full version of a command line application

188
00:13:19,170 --> 00:13:21,360
in Java and then compile it to native binary.

189
00:13:21,360 --> 00:13:23,340
All the native binary applications.

190
00:13:23,340 --> 00:13:26,520
The convention is that they accept command line arguments.

191
00:13:26,520 --> 00:13:29,340
Usually it's either one hyphen or two hyphen.

192
00:13:29,340 --> 00:13:33,690
So you can say Java hyphen version and it also works.

193
00:13:33,690 --> 00:13:38,070
So this application understands both hyphen hyphen version and hyphen version.

194
00:13:38,070 --> 00:13:42,450
Sometimes you don't need to write the full name, hyphen V, for example.

195
00:13:42,450 --> 00:13:44,490
Now it says it doesn't recognize that.

196
00:13:44,490 --> 00:13:46,440
So this is not a valid argument.

197
00:13:46,740 --> 00:13:48,600
We can try hyphen hyphen v.

198
00:13:48,600 --> 00:13:49,710
It also does not understand.

199
00:13:49,710 --> 00:13:54,820
So you either use hyphen version or hyphen hyphen version with this particular application.

200
00:13:54,840 --> 00:13:55,650
Java, right.

201
00:13:56,700 --> 00:14:02,310
So that's mainly the concept of environment variables, right?

202
00:14:02,310 --> 00:14:03,180
Especially path.

203
00:14:03,180 --> 00:14:04,710
Path is very important.

204
00:14:04,740 --> 00:14:10,500
There are two environment variables that we typically need to set up.

205
00:14:10,530 --> 00:14:14,070
One is Java home, Java underscore home.

206
00:14:14,190 --> 00:14:16,530
And you see all these names.

207
00:14:16,740 --> 00:14:21,240
These are very similar to how we define global constants in Java applications.

208
00:14:21,240 --> 00:14:21,660
Right.

209
00:14:21,660 --> 00:14:25,350
All caps the names are separated with underscore the same here.

210
00:14:25,350 --> 00:14:28,830
Whenever you see this kind of thing, this is a global environment variable.

211
00:14:28,830 --> 00:14:35,280
So every instance of the terminal that you run, they all understand this one and this is you define

212
00:14:35,280 --> 00:14:36,540
in a file called Bash.

213
00:14:36,540 --> 00:14:45,660
RC So so there is a, if I say in my home directory, if I say ls hyphen a to show all the hidden files,

214
00:14:45,660 --> 00:14:53,190
there is one called the bash profile, dot bash profile and then there is one called bash.

215
00:14:53,190 --> 00:14:54,330
RC Right.

216
00:14:54,640 --> 00:14:59,490
And then usually what happens is bash is the same the name of this terminal.

217
00:14:59,640 --> 00:15:00,060
Right.

218
00:15:00,330 --> 00:15:01,560
A born again shell.

219
00:15:02,400 --> 00:15:10,590
So if you want to see and then usually you put define these global variables like Java home in the bash

220
00:15:10,590 --> 00:15:12,180
RC or bash profile.

221
00:15:12,180 --> 00:15:16,950
So for example, I've manually defined this global variable in this, right?

222
00:15:17,790 --> 00:15:19,800
So we can look at the contents of the bash.

223
00:15:19,800 --> 00:15:24,720
RC We're going to say less.

224
00:15:24,720 --> 00:15:30,150
For example, less is a command line that prints the contents of a text file is a it's an application

225
00:15:30,150 --> 00:15:32,970
that prints the context of a text file to the terminal.

226
00:15:33,120 --> 00:15:35,550
So that bash.

227
00:15:35,550 --> 00:15:41,790
RC for example, and you see I've defined this environment variable called the Google Home.

228
00:15:41,790 --> 00:15:43,980
I have a Java home, for example.

229
00:15:43,980 --> 00:15:49,530
If you want to comment a line in your bash RC, you can use the pound sign or hash sign.

230
00:15:49,620 --> 00:15:52,200
So these are commented this Java home.

231
00:15:52,380 --> 00:16:01,290
You see, previously I had JDK 15 as my Java and then JDK 14 and now I have JDK 17 as my Java home.

232
00:16:01,290 --> 00:16:05,610
And then you can append this to the path environment variable.

233
00:16:05,610 --> 00:16:13,440
And usually what you do is a Java home is the home directory and you want to add the directory that

234
00:16:13,440 --> 00:16:16,230
has all the executable binaries to the path.

235
00:16:16,230 --> 00:16:19,800
Right path is used to search for the name of the applications.

236
00:16:19,800 --> 00:16:23,890
So it's not just Java home, Java home slash being the being directory of Java Home.

237
00:16:24,270 --> 00:16:32,040
So Java Home is a convention that people use when you install JDK, Java Home points to the home directory.

238
00:16:32,040 --> 00:16:35,580
Inside the home directory of the JDK, there is a bean directory, right?

239
00:16:35,580 --> 00:16:36,300
You set it up.

240
00:16:36,360 --> 00:16:37,860
Same with Google Home.

241
00:16:38,040 --> 00:16:46,200
Once you want to download and install VM, you want to add the home directory to define it as a global

242
00:16:46,200 --> 00:16:47,120
variable, right?

243
00:16:47,160 --> 00:16:54,240
It's not necessary, but it's easier because instead of writing this line path down, you can just tell

244
00:16:54,240 --> 00:16:56,970
the terminal crawl home and it understands what you're talking about.

245
00:16:56,970 --> 00:17:02,730
So I'm going to hit queue to exit the last application and if you want to see that.

246
00:17:02,730 --> 00:17:10,860
So if I type, if I want to see if Java home instead I can tell the terminal, see if there is an environment

247
00:17:10,860 --> 00:17:14,970
where we call Java home which we declare with dollars on echo means.

248
00:17:14,970 --> 00:17:18,810
Read the contents of these and print it to the terminal.

249
00:17:19,140 --> 00:17:24,300
If you don't have an environment variable, right that's let's say Java underscore home two.

250
00:17:24,570 --> 00:17:30,560
It doesn't print anything because it means there is no global environment variable called Java home

251
00:17:30,870 --> 00:17:36,450
Java underscore home two, but there is a global environment variable called Java home.

252
00:17:37,320 --> 00:17:43,230
And the usefulness of this is that then if you want to launch Java application and you haven't added

253
00:17:43,230 --> 00:17:49,890
that to the path, you can say Java home a slash being a slash java, this works fine.

254
00:17:49,890 --> 00:17:52,680
The terminal understands that you're using a dollar sign.

255
00:17:52,680 --> 00:17:58,430
So you are trying to reach a the contents of a global environment where called Java home.

256
00:17:58,440 --> 00:18:04,050
So the terminal actually behind the scenes replace this line of code with the contents of this environment

257
00:18:04,050 --> 00:18:06,300
variable hyphen, hyphen version.

258
00:18:06,780 --> 00:18:09,630
So it's the same story right now.

259
00:18:09,630 --> 00:18:17,190
Google VM also comes with a its own version of the JDK, which is very similar to the, let's say,

260
00:18:17,190 --> 00:18:17,640
Oracle.

261
00:18:17,640 --> 00:18:19,890
So it also has a Java.

262
00:18:20,250 --> 00:18:24,450
So now this tells me that this JDK is based on the open JDK.

263
00:18:24,450 --> 00:18:28,770
It's not the hottest spot from Oracle Open JDK Crawl VM Community Edition.

264
00:18:28,770 --> 00:18:29,190
Right?

265
00:18:29,730 --> 00:18:35,490
So again, these environment variables are very easy, basically very convenient, because then you

266
00:18:35,490 --> 00:18:42,580
can quickly differentiate between a Java that comes from the this JDK and one that comes from the crawl

267
00:18:42,660 --> 00:18:43,320
VM Right.

268
00:18:43,320 --> 00:18:50,280
So if I just type Java, the operating even, I have both.

269
00:18:50,460 --> 00:18:56,100
Even if I have both the Google home being and the Java home being on my path environment variable.

270
00:18:56,220 --> 00:19:01,890
The terminal only finds the Java the first instance that it finds.

271
00:19:02,780 --> 00:19:08,210
Which is that the Java from the Java home being directory then it is stop searching.

272
00:19:08,210 --> 00:19:08,480
Right.

273
00:19:08,480 --> 00:19:10,010
So it assumes that that's what you mean.

274
00:19:10,940 --> 00:19:18,530
That's why even if you have both this Java's on your path, you cannot use them with the Java world.

275
00:19:18,530 --> 00:19:19,890
You have to differentiate them.

276
00:19:19,910 --> 00:19:21,180
So the easiest thing to do.

277
00:19:21,200 --> 00:19:27,800
Have the global environment values for the home directories and then use those which shortens this long

278
00:19:27,800 --> 00:19:33,860
path that instead of using writing this, every time you just write Java Home with the dollar sign and

279
00:19:33,860 --> 00:19:36,110
then the terminal understands what you're talking about.

280
00:19:36,500 --> 00:19:37,070
All right.

281
00:19:37,550 --> 00:19:43,340
So depending on which one of these Java home buying or Google home being are on your path environment,

282
00:19:43,340 --> 00:19:51,190
whether which one comes first then then the term if you just type Java, the terminal finds one of them.

283
00:19:51,200 --> 00:19:58,210
Now you can change the path environment variable using the export command in the terminal itself.

284
00:19:58,220 --> 00:20:04,000
This is a life change and this only applies to the current session of terminal.

285
00:20:04,010 --> 00:20:14,300
So if I say path export path equals, let's say we apply this beam from the Google home and then call

286
00:20:14,300 --> 00:20:18,290
in, which is called the path separator in macOS and Linux.

287
00:20:18,290 --> 00:20:23,750
You separate different directory paths in the past environment variable with call it and so we tell

288
00:20:23,750 --> 00:20:30,770
it hey replace path with its old content but then put the bing directory of the Google home at the beginning.

289
00:20:30,770 --> 00:20:33,410
So this comes first and this works.

290
00:20:33,410 --> 00:20:40,190
And now if we go echo path, you see general VM being directory comes first.

291
00:20:40,700 --> 00:20:41,330
All right.

292
00:20:43,330 --> 00:20:53,230
And then what happens here is that so what happens here is that now what we do, let's clear the.

293
00:20:57,200 --> 00:20:57,530
All right.

294
00:20:57,530 --> 00:20:58,400
So.

295
00:21:02,340 --> 00:21:05,520
So I guess now if we say rich java.

296
00:21:06,030 --> 00:21:07,950
All right, so something went wrong.

297
00:21:07,950 --> 00:21:11,250
Let's go back here and open the terminal again.

298
00:21:14,010 --> 00:21:18,210
So echo path.

299
00:21:19,260 --> 00:21:20,960
That's the that's the path.

300
00:21:20,970 --> 00:21:21,390
Right.

301
00:21:21,390 --> 00:21:25,050
And I think what we let's see.

302
00:21:25,410 --> 00:21:29,100
So we put this command had a problem.

303
00:21:29,100 --> 00:21:30,900
So let's echo path again.

304
00:21:33,240 --> 00:21:34,610
Okay.

305
00:21:34,620 --> 00:21:34,950
Yeah.

306
00:21:34,950 --> 00:21:43,950
So I guess there is a problem with this approach and that's probably because of the this fish application

307
00:21:43,950 --> 00:21:44,640
that we're using.

308
00:21:44,640 --> 00:21:47,120
Let's see if we can exit it and go back to the.

309
00:21:47,130 --> 00:21:47,430
Yeah.

310
00:21:47,430 --> 00:21:53,820
So this is the original terminal that so the path is there.

311
00:21:53,820 --> 00:21:54,420
Right.

312
00:21:54,420 --> 00:22:07,680
And then if we say export path equals crawl home a slash being colon and then path itself and then echo

313
00:22:07,920 --> 00:22:10,470
path and now it works, right?

314
00:22:10,470 --> 00:22:17,310
So now you see the beam comes first, the being directory of the so if I now say Java hyphen hyphen

315
00:22:17,310 --> 00:22:23,700
version, it says that that Java application that the terminal finds the first instance comes from the

316
00:22:23,700 --> 00:22:28,440
first directory in the path which is now the LLVM Java, right, it's the JVM.

317
00:22:29,610 --> 00:22:33,690
But then if I close the terminal, go back up again.

318
00:22:34,680 --> 00:22:41,040
When you do the export command in the terminal itself, it only applies to the current terminal shell,

319
00:22:41,040 --> 00:22:41,310
right?

320
00:22:41,310 --> 00:22:45,380
If you close it and open a new window, those exports are gone.

321
00:22:45,390 --> 00:22:54,300
If you want every terminal session to have read all the basically all the global variables, then you

322
00:22:54,300 --> 00:22:55,650
have to define them in the bash.

323
00:22:55,650 --> 00:22:57,030
RC file, right.

324
00:22:57,030 --> 00:23:00,060
So in the home directory you have the bash.

325
00:23:00,060 --> 00:23:06,150
RC And you see whenever you launch a terminal it loads the contents of this bash.

326
00:23:06,150 --> 00:23:14,160
RC So it exports this environment variable defines them, appends these to the bash at the path and

327
00:23:14,160 --> 00:23:20,280
then it also I've set it to also run the fish command line application, which is a nice interactive

328
00:23:20,280 --> 00:23:20,700
terminal.

329
00:23:20,700 --> 00:23:21,180
Right?

330
00:23:21,600 --> 00:23:27,150
So I'm just going through these concepts so that you are aware of what we're trying to do.

331
00:23:27,150 --> 00:23:27,720
All right.

332
00:23:28,050 --> 00:23:30,090
Now, I hope you enjoyed this lecture.

333
00:23:30,090 --> 00:23:36,540
And from the next lecture, we are going to continue to see how we actually run a Java application from

334
00:23:36,540 --> 00:23:40,080
the command line to concepts such as class path.

335
00:23:40,080 --> 00:23:45,210
And then we're going to see, for example, what's the difference between launching running the Java

336
00:23:45,210 --> 00:23:52,620
application, using the GM or the Java Command and how we can use the Native Image compiler to compile

337
00:23:52,620 --> 00:23:55,740
to the native binary and then how to execute that one, right?

338
00:23:55,740 --> 00:23:58,920
Especially if your application accepts command line arguments.

339
00:23:58,920 --> 00:24:01,170
We will discuss the difference between the two.

340
00:24:01,200 --> 00:24:02,520
I hope you enjoyed this lecture.

341
00:24:02,520 --> 00:24:04,860
Please stay tuned and I'll see the next one.
