1
00:00:01,680 --> 00:00:04,110
Hello and welcome to another tutorial.

2
00:00:04,110 --> 00:00:06,540
We're going to continue our discussion on Native Image.

3
00:00:06,780 --> 00:00:13,740
So far we've learned how to set it up, how to compile a simple application, how to take advantage

4
00:00:13,740 --> 00:00:17,700
of the power that the Eclipse external tool provides.

5
00:00:17,700 --> 00:00:27,870
And now let's look at the details of most most important flags or options that the native image has.

6
00:00:27,870 --> 00:00:32,070
And we saw that previously some of the important options.

7
00:00:32,070 --> 00:00:37,650
And we said that generally if you want to run the native image from terminal, this is the general usage,

8
00:00:37,650 --> 00:00:38,510
native image.

9
00:00:38,520 --> 00:00:46,110
Obviously you have to point it to the being directory of the VM and then the options that Native image

10
00:00:46,110 --> 00:00:50,670
accepts and then the name of the class or and then we will also discuss that.

11
00:00:50,670 --> 00:00:56,100
You can also give it a jar file, a jar that has a is basically executable.

12
00:00:56,100 --> 00:01:02,790
And then the image name, the name of the output file that will be generated, the native executable

13
00:01:02,790 --> 00:01:04,290
binary and then the options here.

14
00:01:04,290 --> 00:01:04,680
Right.

15
00:01:04,680 --> 00:01:07,770
And I believe these are mostly for the JVM itself.

16
00:01:09,030 --> 00:01:14,550
And we said that the most important one is hyphen CLASSPASS Hyphen oh is also important.

17
00:01:14,700 --> 00:01:15,960
No optimisation.

18
00:01:16,410 --> 00:01:18,540
One is basic optimization.

19
00:01:18,660 --> 00:01:26,400
And in the most recent version of when they actually added hyphen or B, so zero one and B and you can

20
00:01:26,400 --> 00:01:33,330
probably guess that if we turn off the optimisation, then the compilation goes faster, right?

21
00:01:33,450 --> 00:01:38,460
And then not only this, they also added this hyphen or B, right, zero one.

22
00:01:38,670 --> 00:01:45,390
So basically the lowercase B, which basically does doesn't do a deep optimization.

23
00:01:45,390 --> 00:01:48,390
So hyphen or B is more or less something between zero and one.

24
00:01:48,390 --> 00:01:48,680
Right?

25
00:01:48,690 --> 00:01:49,620
Full optimisation.

26
00:01:49,620 --> 00:01:50,760
No optimisation.

27
00:01:52,100 --> 00:01:52,370
All right.

28
00:01:52,370 --> 00:01:54,190
So let's look at the class path.

29
00:01:54,200 --> 00:01:59,720
If the main class has dependencies, we need to provide the path for native image tool.

30
00:01:59,720 --> 00:02:03,680
And we see that it's very similar to how you set it up for JVM.

31
00:02:03,680 --> 00:02:08,360
And again, the way the native image works is that actually VM comes with the JDK.

32
00:02:08,360 --> 00:02:14,870
So first when you try to compile an application, it actually runs your Java application background

33
00:02:14,960 --> 00:02:20,990
and runs, for example, garbage collection a few times because it has to figure out the optimized size

34
00:02:20,990 --> 00:02:23,810
of your Java heap when your application is running.

35
00:02:23,810 --> 00:02:24,320
And then.

36
00:02:26,700 --> 00:02:35,040
And then basically try to come up with a very small size heap when it compiles because it creates a

37
00:02:35,040 --> 00:02:36,600
static image of your heap.

38
00:02:36,600 --> 00:02:37,080
Right.

39
00:02:37,440 --> 00:02:42,450
So you can either use hyphen, CP, hyphen class path or hyphen hyphen class hyphen path.

40
00:02:42,450 --> 00:02:47,400
And obviously because there is a dash here between class and path, you have to use two hyphens here.

41
00:02:47,670 --> 00:02:51,870
And the class path operator is always calling on all operating systems.

42
00:02:51,870 --> 00:02:56,940
We already know that on Mac OS and Linux, the path separator right is also call it.

43
00:02:56,940 --> 00:03:00,230
But on Windows, the path separator is semicolon.

44
00:03:00,240 --> 00:03:06,030
But don't confuse it with the class path separator for Java because Java is independent of the operating

45
00:03:06,030 --> 00:03:10,440
systems, it always follows the same convention in an all operating system.

46
00:03:10,440 --> 00:03:16,080
That's why the class path separator is the same on all platform and it's just calling, right?

47
00:03:16,110 --> 00:03:18,300
Even if you're on windows, you use call it.

48
00:03:18,450 --> 00:03:27,030
So Native Image Tool operates on class files and we said that you give it a again, you give it a fully

49
00:03:27,030 --> 00:03:28,590
qualified name of the class.

50
00:03:28,620 --> 00:03:33,120
It needs to find all all of the necessary class files at the compile time.

51
00:03:33,120 --> 00:03:38,220
In fact, in the most recent I mean previously in the older versions, it would fail the compilation

52
00:03:39,060 --> 00:03:41,910
if some of the classes were not available.

53
00:03:41,910 --> 00:03:46,830
But but now it can compile.

54
00:03:46,830 --> 00:03:50,490
But then at runtime it throws a class not found error or something like that.

55
00:03:50,490 --> 00:03:51,030
Right.

56
00:03:52,250 --> 00:03:57,630
We there is an option actually one of the flags that we will see later that you can tell the native

57
00:03:57,630 --> 00:04:03,750
image to fail on in the compile phase if some of the classes are not found on a class path, said the

58
00:04:03,750 --> 00:04:06,690
working directory to the bean folder of your Eclipse project.

59
00:04:06,690 --> 00:04:14,700
Or we discussed that, for example, every ID compiles the application has its own build tool and we

60
00:04:14,700 --> 00:04:16,200
said that we can.

61
00:04:16,350 --> 00:04:20,910
People prefer Maven build tool because it's the same for everything.

62
00:04:20,910 --> 00:04:29,340
And IDs usually have support for Maven and it ensures that all the IDs, if they build the MAVEN project,

63
00:04:29,370 --> 00:04:34,740
the basically the directory hierarchy where the class files are there all the same.

64
00:04:34,740 --> 00:04:42,660
Right, said the hyphen hyphen class path I prefer to always use hyphen CPP is much easier to use hyphen

65
00:04:42,660 --> 00:04:44,970
class path argument of native image to like this.

66
00:04:44,970 --> 00:04:50,880
So usually if you are already in your working directory, it's already where your main classes.

67
00:04:50,880 --> 00:04:54,750
So we append a dot which is the current working directory, right.

68
00:04:54,750 --> 00:05:00,600
And usually this is if you're in, if you are inside eclipse IDE, this is usually the being directory

69
00:05:00,600 --> 00:05:05,460
of your current project and then path, the other being directories that have the class files.

70
00:05:05,460 --> 00:05:09,300
And remember, when we say class files, it means the package hierarchy.

71
00:05:09,300 --> 00:05:14,640
If your class belongs to a package, it means on the hard disk there is a directory with the name of

72
00:05:14,640 --> 00:05:21,180
that package and your compiled class file is inside that directory pass to another being directory.

73
00:05:21,180 --> 00:05:26,640
If there is a jar file or zip file, then you give the path to that jar file.

74
00:05:26,670 --> 00:05:27,000
Right.

75
00:05:27,000 --> 00:05:30,390
The name of the jar file or the zip file should also be included.

76
00:05:32,640 --> 00:05:36,660
The next one is how to find all the dependence of the Java class main class.

77
00:05:36,660 --> 00:05:39,960
Let's say you are inside your ID and you have a main method.

78
00:05:39,960 --> 00:05:41,760
So you have a class that has a main method.

79
00:05:41,760 --> 00:05:44,970
You want to run it and you can successfully run it in ID.

80
00:05:44,970 --> 00:05:50,010
Right now, let's say you have a lot of dependencies, you've added them, your ID is managing the dependencies,

81
00:05:50,010 --> 00:05:56,250
but now you want to run the native image on your terminal to compile your main class into executable

82
00:05:56,250 --> 00:05:56,610
binary.

83
00:05:56,610 --> 00:06:00,810
And you want to figure out what are all the dependencies that are on the class path.

84
00:06:00,810 --> 00:06:08,910
In fact, in your main class, in your main method, you can ask JVM to tell you what directories are

85
00:06:08,910 --> 00:06:09,390
on a class.

86
00:06:09,390 --> 00:06:14,340
But because remember, if you are in the ID and you can successfully run your Java application, it

87
00:06:14,340 --> 00:06:21,080
means the class path is correctly set up and you can use a system property called gate property, java

88
00:06:21,090 --> 00:06:22,650
dot class dot path.

89
00:06:23,730 --> 00:06:28,440
So the class path operator is calling and this returns a string, a single string.

90
00:06:28,440 --> 00:06:30,780
Remember it doesn't return a string array.

91
00:06:30,780 --> 00:06:36,540
Right, but then you can split it from the, based on the token column to get all the directories or

92
00:06:36,540 --> 00:06:41,400
you can directly print it right and then you can print it to the terminal and after that you can copy

93
00:06:41,400 --> 00:06:46,650
and paste the entire string using the hyphen CP or hyphen hyphen class hyphen path.

94
00:06:46,650 --> 00:06:47,070
Right?

95
00:06:47,160 --> 00:06:53,040
The result is a string containing a column separated list of the path that include all of the class

96
00:06:53,040 --> 00:06:56,160
files necessary to your to run your job application.

97
00:06:56,450 --> 00:07:03,150
In Eclipse ID we saw that eclipse has internal environment variables which are very powerful.

98
00:07:03,150 --> 00:07:08,220
One of them is project hyphen class path because when you run your job application inside the eclipse

99
00:07:08,220 --> 00:07:11,730
ID it, it is already aware of what's going on, right?

100
00:07:11,730 --> 00:07:17,310
If you can successfully run your application, run the main method, it means the class path is correctly

101
00:07:17,310 --> 00:07:17,790
set up.

102
00:07:19,200 --> 00:07:24,960
Use this string to set the hyphen CP or hyphen hyphen class hyphen path of the native image.

103
00:07:24,960 --> 00:07:25,410
So here's an.

104
00:07:25,570 --> 00:07:26,110
Dampen.

105
00:07:26,200 --> 00:07:27,430
Let me zoom in a little bit.

106
00:07:28,480 --> 00:07:34,450
So I ran this code in my eclipse ID and then it tells it prints a string, which is the class path of

107
00:07:34,450 --> 00:07:40,810
my main method, my main class, and then grow a home being native image, hyphen or hyphen, hyphen,

108
00:07:40,810 --> 00:07:41,890
class, hyphen path.

109
00:07:41,920 --> 00:07:48,130
I copy and paste that string, make sure I put it in the double code because there might be a string,

110
00:07:48,130 --> 00:07:53,620
a spaces or something between and in the fully qualified name of the class, which is the package hierarchy

111
00:07:53,620 --> 00:07:55,630
and in the class name, fully qualified name.

112
00:07:55,900 --> 00:07:59,800
And then where I'm right now, I'm this in this test one directory.

113
00:07:59,800 --> 00:08:01,120
That's my working directory, right?

114
00:08:01,120 --> 00:08:03,250
That's where I'm launching the native image from.

115
00:08:03,250 --> 00:08:06,100
And I can tell you where to put the output file.

116
00:08:06,130 --> 00:08:12,460
I'm telling you, go one level up, another level up, go to the native directory and create a executable

117
00:08:12,460 --> 00:08:14,860
file called my app and it starts compiling.

118
00:08:14,860 --> 00:08:22,950
Right now in this case because we are giving the native image the full class path, the working directory

119
00:08:22,960 --> 00:08:27,670
doesn't have to be like being directory of your Eclipse project or any other specific directory.

120
00:08:27,670 --> 00:08:32,860
You can be anywhere because native image searches in the class path or the directory that are on the

121
00:08:32,860 --> 00:08:33,670
class path.

122
00:08:33,670 --> 00:08:36,420
And remember that the class path separator is calling.

123
00:08:36,430 --> 00:08:36,850
All right.

124
00:08:36,850 --> 00:08:39,460
So let's head to Eclipse and try to have a quick look.

125
00:08:41,680 --> 00:08:45,160
So let's say let's see.

126
00:08:45,160 --> 00:08:47,770
We have this hello world and.

127
00:08:48,310 --> 00:08:49,330
Okay.

128
00:08:50,140 --> 00:08:52,210
Uh, native.

129
00:08:53,840 --> 00:08:55,340
Let's see this one.

130
00:08:55,730 --> 00:08:57,200
So this is the old one that we had.

131
00:08:57,200 --> 00:08:58,250
So let's look at this.

132
00:08:59,210 --> 00:09:01,070
This is a simple class, right?

133
00:09:01,070 --> 00:09:01,670
So.

134
00:09:02,000 --> 00:09:05,570
And then what we're going to do, let's remove these.

135
00:09:05,570 --> 00:09:11,150
Yeah, it's just print something to the console and obviously I can actually run this, right?

136
00:09:11,150 --> 00:09:12,560
So this is successfully run.

137
00:09:12,560 --> 00:09:20,690
And then what I can do, I can say a string class path is system dot get property.

138
00:09:20,690 --> 00:09:26,840
And just one thing to note that the reason I can successfully run this because this is configured as

139
00:09:26,840 --> 00:09:28,040
an Eclipse project, right?

140
00:09:28,040 --> 00:09:34,880
So previously we were having like Java files inside directories, but they were not part of the Eclipse

141
00:09:34,880 --> 00:09:37,910
project, so we were manually compile them with the Java Sea.

142
00:09:37,910 --> 00:09:40,340
But now I have a CRC directory.

143
00:09:40,730 --> 00:09:41,240
Right?

144
00:09:41,240 --> 00:09:46,650
I create a Java image as RC, create a eclipse package and then create my source files.

145
00:09:46,670 --> 00:09:52,850
Eclipse compiles them and puts them in a bing directory which is a mirror of CRC and it has all the

146
00:09:52,850 --> 00:09:53,810
dot class wise.

147
00:09:53,810 --> 00:09:59,180
So Eclipse, if you set up a Eclipse project, put your stuff packages and classes in this CRC.

148
00:09:59,210 --> 00:10:06,290
Eclipse is aware of all the dependencies and now you can run it successfully in your right.

149
00:10:06,290 --> 00:10:07,820
Now we're getting an error here.

150
00:10:07,820 --> 00:10:13,700
So let's say java dot class dot path and then cis out class path, right?

151
00:10:14,030 --> 00:10:16,760
So this tells me what's going on.

152
00:10:17,060 --> 00:10:22,280
So right now there is only one directory on my project which is the being directory of the current project.

153
00:10:22,280 --> 00:10:27,860
There's one directory in my class path because my application doesn't have any dependencies.

154
00:10:27,860 --> 00:10:28,280
Right.

155
00:10:28,550 --> 00:10:31,790
So I can just run this so I can.

156
00:10:32,450 --> 00:10:34,580
This is my class file and then.

157
00:10:36,490 --> 00:10:41,720
Basically what I can do, I can actually open up a terminal here.

158
00:10:41,740 --> 00:10:46,660
Right now we don't see the beam directory here, but then we can go in there and then there is really

159
00:10:46,660 --> 00:10:49,090
no reason to go in into being directory.

160
00:10:49,090 --> 00:10:49,330
Right.

161
00:10:49,330 --> 00:10:51,640
So let me just close this or let's open this.

162
00:10:51,640 --> 00:10:54,280
We are at the top level directory of our Java project.

163
00:10:54,610 --> 00:10:59,530
Now let's go to the native directory and clean up these previous bills.

164
00:11:00,380 --> 00:11:00,890
All right.

165
00:11:01,160 --> 00:11:03,560
So what we're going to do, I'm going to copy this.

166
00:11:03,560 --> 00:11:04,790
This is my class path.

167
00:11:05,700 --> 00:11:06,180
Right.

168
00:11:06,450 --> 00:11:07,200
And then.

169
00:11:09,530 --> 00:11:11,390
I'm going to open up a terminal.

170
00:11:11,750 --> 00:11:17,690
We already opened up the terminal here at the top level and I'm going to try to compile this.

171
00:11:18,440 --> 00:11:24,290
So we're going to say growl home, forward, slash being forward, slash native image and then hyphen

172
00:11:24,320 --> 00:11:27,820
CP double coat and then copy and paste our class path.

173
00:11:27,830 --> 00:11:28,430
Right.

174
00:11:28,520 --> 00:11:37,380
And after that, we're going to give it the name of our binary, which is a Java underscore native image.

175
00:11:37,400 --> 00:11:41,240
This is our top level package, the test class, right?

176
00:11:41,420 --> 00:11:43,340
And this is the name of the class file.

177
00:11:43,340 --> 00:11:45,350
And again, we're not in the directory.

178
00:11:45,350 --> 00:11:48,880
This class file doesn't exist in this directory, but doesn't matter.

179
00:11:48,890 --> 00:11:53,260
Native image searches in the class path that you provide.

180
00:11:53,270 --> 00:11:57,790
And then we're going to say that go to native directory and create my app.

181
00:11:57,800 --> 00:11:59,000
So let's run this.

182
00:12:02,120 --> 00:12:05,000
So generating the alternative my app.

183
00:12:07,250 --> 00:12:12,740
Initializing and then Virgin Info Group album 22.1 C compiler.

184
00:12:12,740 --> 00:12:16,130
It's the Apple Clang Garbage Collector Serial GC.

185
00:12:17,320 --> 00:12:21,510
So it's trying to perform analysis and then go ahead and compile.

186
00:12:21,520 --> 00:12:27,550
So the analysis is done, parsing methods in lining methods and the final step is compiling methods.

187
00:12:27,550 --> 00:12:34,870
And after the compilation the linker kicks in and then puts everything together and creates a one native

188
00:12:34,870 --> 00:12:35,800
executable file.

189
00:12:35,800 --> 00:12:37,050
So that's it, that's done.

190
00:12:37,060 --> 00:12:39,400
So it took us about 35 seconds.

191
00:12:39,970 --> 00:12:43,090
So if I go to the native and then my app.

192
00:12:43,990 --> 00:12:48,760
So hello world from Java and external to an eclipse ID and you see the second one which is printing

193
00:12:48,760 --> 00:12:50,380
out the class path is gone.

194
00:12:50,380 --> 00:12:53,860
Right it's empty because this is a native executable.

195
00:12:53,860 --> 00:12:56,740
So there is no concept of class path there anymore.

196
00:12:56,740 --> 00:12:57,220
Right.

197
00:12:58,030 --> 00:12:59,440
But it still works fine.

198
00:12:59,440 --> 00:13:01,270
Now let's make it more complicated.

199
00:13:01,270 --> 00:13:03,520
For example, I have a jar file here

200
00:13:06,100 --> 00:13:12,070
or before that in eclipse ID you may have multiple projects right now in a working set.

201
00:13:12,070 --> 00:13:15,250
If I deselect working said you see I have also other projects.

202
00:13:15,250 --> 00:13:17,260
For example, this dev underscore Java.

203
00:13:17,290 --> 00:13:25,240
There are some classes there now in Eclipse you can actually your one project can depend on the other

204
00:13:25,240 --> 00:13:32,860
classes in other projects inside your Eclipse ID, which is a very nice feature that allows you to build

205
00:13:32,860 --> 00:13:37,150
separate projects and basically build a project on top of another project, right?

206
00:13:37,150 --> 00:13:43,450
Eventually each project you package them as a jar or something, but before going to packaging, you

207
00:13:43,450 --> 00:13:48,220
can just directly give a dependency of a Java project on another project.

208
00:13:48,220 --> 00:13:53,890
And basically what happens is that because Eclipse knows for every project where the classifiers are,

209
00:13:53,890 --> 00:13:56,530
the compile files are there in the being directory.

210
00:13:56,530 --> 00:14:02,230
So when you tell this project that it has a dependency on another Eclipse project or project, it just

211
00:14:02,230 --> 00:14:04,150
adds the beam directory to the class path.

212
00:14:04,450 --> 00:14:10,300
So we can go ahead and build path, configure, build path and then select the class path and add one

213
00:14:10,300 --> 00:14:12,970
of the projects in the workspace which is Dev Java.

214
00:14:12,970 --> 00:14:17,200
So yeah, now if I run this again, again the run is going to be successful.

215
00:14:17,200 --> 00:14:20,860
And you see now I have two directories on my class path.

216
00:14:22,180 --> 00:14:23,260
What I can do now.

217
00:14:23,260 --> 00:14:24,400
I can, actually.

218
00:14:24,490 --> 00:14:25,240
Let's see.

219
00:14:26,440 --> 00:14:29,610
There is a class called Car in that project.

220
00:14:29,640 --> 00:14:29,950
Right.

221
00:14:29,950 --> 00:14:31,270
I can import a car.

222
00:14:31,270 --> 00:14:32,560
Car, a new car.

223
00:14:32,740 --> 00:14:35,170
And then we give it a price.

224
00:14:35,170 --> 00:14:38,470
Let's say 1000 and then see out car.

225
00:14:41,620 --> 00:14:51,760
So the two string method is not overloaded or overridden, but the car has class, has some aesthetic,

226
00:14:51,760 --> 00:14:56,440
initialize it and instance initially which are called and in the class path right now if I go ahead

227
00:14:56,440 --> 00:15:04,600
and try to compile my this class file again now the compilation is probably not going to fail.

228
00:15:07,690 --> 00:15:10,420
The reason is that I believe they.

229
00:15:14,620 --> 00:15:21,760
So the native image in the most recent version doesn't fail on the compile phase if some of the classes

230
00:15:21,760 --> 00:15:27,160
are not found, but then it probably is going to fail on at runtime so we can see.

231
00:15:33,550 --> 00:15:34,570
So let's see.

232
00:15:34,810 --> 00:15:36,910
I believe the compilation is going to succeed.

233
00:15:36,910 --> 00:15:39,160
But then at runtime, yeah, it's succeeded.

234
00:15:39,160 --> 00:15:40,450
It's trying to create the image.

235
00:15:40,450 --> 00:15:40,940
Let's see it.

236
00:15:40,960 --> 00:15:42,010
So it worked fine.

237
00:15:42,250 --> 00:15:47,980
But now if we go ahead and try to run the app, it says exceptional thread main no class.

238
00:15:47,980 --> 00:15:48,880
They found error.

239
00:15:48,880 --> 00:15:50,890
So it says I cannot find this car class.

240
00:15:51,100 --> 00:15:55,690
I mean some people I personally doesn't prefer this because I want to make sure that when I compile

241
00:15:56,230 --> 00:15:58,570
my project it's going to run

242
00:16:01,750 --> 00:16:02,410
fine.

243
00:16:02,410 --> 00:16:05,410
So everything so and I believe there is an option there.

244
00:16:05,410 --> 00:16:06,610
So let's see.

245
00:16:07,600 --> 00:16:08,980
Crawl VM a.

246
00:16:11,700 --> 00:16:13,350
It's clean this up.

247
00:16:21,400 --> 00:16:25,870
So if I say hyphen help, hyphen, hyphen help.

248
00:16:30,210 --> 00:16:32,820
And in native compiler option.

249
00:16:33,120 --> 00:16:35,880
Let's see how to file back.

250
00:16:36,700 --> 00:16:37,710
Okay.

251
00:16:42,400 --> 00:16:47,890
Class path module, path, FLAC version or the fallback.

252
00:16:49,190 --> 00:16:51,680
Features force fallback.

253
00:16:55,260 --> 00:16:59,850
Uh, native compiler path shared a static target.

254
00:17:04,940 --> 00:17:09,790
I believe there is a, uh, uh, flag that allows you.

255
00:17:09,800 --> 00:17:10,920
So let's see.

256
00:17:10,940 --> 00:17:11,330
Help.

257
00:17:11,330 --> 00:17:12,180
Extra.

258
00:17:13,600 --> 00:17:14,090
Okay.

259
00:17:14,120 --> 00:17:16,770
And then what I'm going to do.

260
00:17:16,790 --> 00:17:17,720
Let's see.

261
00:17:18,080 --> 00:17:20,120
GREP fail.

262
00:17:20,150 --> 00:17:20,990
Let's see.

263
00:17:23,090 --> 00:17:23,720
Or.

264
00:17:26,730 --> 00:17:27,450
Let's see.

265
00:17:27,810 --> 00:17:28,530
No.

266
00:17:34,530 --> 00:17:35,670
Fall back.

267
00:17:39,710 --> 00:17:40,010
All right.

268
00:17:40,010 --> 00:17:41,090
For now, we're going to.

269
00:17:41,120 --> 00:17:46,040
So right now, the default behavior is that it's going to succeed in the compilation phase.

270
00:17:46,040 --> 00:17:54,650
But then at runtime, you get a runtime exception for not being able to find these, um, this, this

271
00:17:54,650 --> 00:17:55,220
class.

272
00:17:55,220 --> 00:18:01,820
So if all I have to do is now copy this class path, which now also has a dependency on another Java

273
00:18:01,820 --> 00:18:07,610
project, and then go back here and update my class path.

274
00:18:07,610 --> 00:18:13,850
And again, the beauty of this approach to manually setting up the class path is that then you really

275
00:18:13,850 --> 00:18:22,520
don't care about where you launch your job application from because native image searches, searches

276
00:18:22,520 --> 00:18:31,130
inside the let's see, searches inside all the directors of the class path to find your main class and

277
00:18:31,130 --> 00:18:33,620
then also all the dependencies.

278
00:18:33,620 --> 00:18:35,390
So hopefully this should work fine.

279
00:18:35,390 --> 00:18:41,210
So we have two dependencies on our class path and then there is a column that separates them.

280
00:18:43,060 --> 00:18:43,870
Let's see.

281
00:18:44,290 --> 00:18:45,520
This should succeed.

282
00:18:52,460 --> 00:18:53,870
Performing analysis.

283
00:18:53,870 --> 00:18:56,180
Parsing methods in lining methods.

284
00:18:56,180 --> 00:18:57,620
Compiling methods.

285
00:19:02,040 --> 00:19:04,790
As I mentioned before, the compilation is very smart.

286
00:19:04,800 --> 00:19:10,320
It only compiles the classes that your application absolutely needs to run, right?

287
00:19:11,400 --> 00:19:15,420
So if I say native, my app and now our car class works fine.

288
00:19:15,570 --> 00:19:17,690
You can see even the default to a string.

289
00:19:17,700 --> 00:19:18,330
It works fine.

290
00:19:18,570 --> 00:19:24,180
But we don't have the Java class path system property anymore because it doesn't make sense.

291
00:19:24,180 --> 00:19:25,300
This is the native image.

292
00:19:25,320 --> 00:19:29,450
The last thing the last thing that I want to show you is the flag hyphen.

293
00:19:29,460 --> 00:19:30,030
Oh.

294
00:19:31,140 --> 00:19:35,520
So if you want to quickly just compile, you're in the development phase so you don't care about the

295
00:19:35,520 --> 00:19:39,600
optimization that the aesthetic compiler does from the native image.

296
00:19:39,600 --> 00:19:43,410
You just want to check the compilation is fast enough.

297
00:19:43,410 --> 00:19:46,200
So hyphen or B, let's see if this works.

298
00:19:46,590 --> 00:19:48,890
You enable hyphen obi for this image build.

299
00:19:48,900 --> 00:19:54,210
This will configure some optimization to reduce image build time so it means that it reduces the amount

300
00:19:54,210 --> 00:19:56,990
of aesthetic optimization.

301
00:19:57,000 --> 00:20:00,780
This feature should only be used during development and never for deployment.

302
00:20:00,780 --> 00:20:01,230
Right?

303
00:20:01,320 --> 00:20:04,740
Because once you want to deploy, you want to compile with the.

304
00:20:05,780 --> 00:20:10,910
With the fast with the most optimize case.

305
00:20:10,910 --> 00:20:11,450
Right.

306
00:20:11,690 --> 00:20:13,510
But then it takes more time to compile.

307
00:20:13,520 --> 00:20:17,780
Right now, the compilation was relatively fast and it took us about 29.

308
00:20:17,780 --> 00:20:19,260
I mean, not much difference.

309
00:20:19,280 --> 00:20:24,320
Previously we were having like 35 or 32 and this is now 29, right?

310
00:20:24,650 --> 00:20:28,790
And again, if I run this, it's going to run just fine, right.

311
00:20:30,050 --> 00:20:35,270
The last thing that I want to show you, obviously, we can also have other types of dependencies in

312
00:20:35,270 --> 00:20:36,050
our eclipse.

313
00:20:36,050 --> 00:20:40,010
So let me go back and activate my working set.

314
00:20:40,280 --> 00:20:41,900
So I have a jar here.

315
00:20:41,930 --> 00:20:44,390
Let's call it my and actually not this one.

316
00:20:45,230 --> 00:20:49,760
Let's say in the app, in the lib there is one is util for j.

317
00:20:49,790 --> 00:20:51,260
I want to right click again.

318
00:20:51,260 --> 00:20:56,990
We are in the Eclipse project so I can just right click go to build path and add to Build Path and eclipse

319
00:20:56,990 --> 00:20:59,450
automatically creates these reference libraries.

320
00:20:59,870 --> 00:21:06,800
And now if I look at the class path again, again as long as I can successfully run my main method in

321
00:21:06,800 --> 00:21:10,550
eclipse ID, it means the class path is set up correctly.

322
00:21:10,550 --> 00:21:13,730
And now I have three directories.

323
00:21:13,730 --> 00:21:14,220
Right.

324
00:21:14,240 --> 00:21:17,690
So remember jar is a compressed or zipped directory.

325
00:21:17,690 --> 00:21:22,850
So you have to also include the name of the jar file in the in the class path.

326
00:21:22,860 --> 00:21:25,640
So my class path now has three dependencies.

327
00:21:25,640 --> 00:21:33,050
And again, what, what I can do now is, for example this util for j in the it has, for example,

328
00:21:33,050 --> 00:21:40,580
in the let's say math class, it has a or in the complex class it has complex numbers.

329
00:21:40,580 --> 00:21:45,290
So I can say complex and eclipse knows where it is on the class path.

330
00:21:46,040 --> 00:21:55,610
Z One is a complex of or of rect 1.1 and 2.2, and I can do az1.

331
00:21:56,720 --> 00:21:58,940
So if I run this, this is going to succeed.

332
00:21:58,940 --> 00:21:59,630
Yes.

333
00:21:59,630 --> 00:22:08,420
And now I can copy this class path which I enquired in my Java source code and then yeah, I can go

334
00:22:08,420 --> 00:22:11,670
back and run my native image.

335
00:22:11,780 --> 00:22:15,260
Let's remove these hyphen o b option four.

336
00:22:15,260 --> 00:22:18,620
Now and then we're going to.

337
00:22:20,540 --> 00:22:27,650
Delete this old class path and give it a new class path, which now has three dependencies.

338
00:22:28,340 --> 00:22:31,850
All right, so double code and then copy paste.

339
00:22:32,510 --> 00:22:33,920
Yeah, it looks good.

340
00:22:33,950 --> 00:22:36,440
We're going to run this.

341
00:22:41,880 --> 00:22:42,500
Okay.

342
00:22:42,510 --> 00:22:43,560
It's running.

343
00:22:49,880 --> 00:22:55,070
Performing analysis done building universe parsing method in learning methods.

344
00:22:55,070 --> 00:22:56,450
Compiling methods.

345
00:23:04,360 --> 00:23:05,320
Creating image.

346
00:23:05,320 --> 00:23:06,460
That's the final step.

347
00:23:06,460 --> 00:23:10,600
And okay, so let's clear and run my app.

348
00:23:10,600 --> 00:23:16,330
And now as you can see, the dependency, this complex number that we had from that jar file is now

349
00:23:16,960 --> 00:23:22,420
compiled to the native binary and our native application has no problem running it.

350
00:23:22,420 --> 00:23:22,930
Right.

351
00:23:22,930 --> 00:23:24,340
So I hope you enjoy this lecture.

352
00:23:24,340 --> 00:23:26,740
Please stay tuned and I'll see the next one.
