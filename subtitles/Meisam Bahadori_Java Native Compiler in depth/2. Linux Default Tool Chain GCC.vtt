WEBVTT
1
00:00:00.850 --> 00:00:03.430
Hello and welcome to another tutorial.

2
00:00:03.430 --> 00:00:09.130
We're going to continue our discussion on how to work with the platform default toolchain.

3
00:00:09.130 --> 00:00:12.220
And previously we looked at the macros default toolchain.

4
00:00:12.220 --> 00:00:20.200
We said that it's an apple clang, it's a proprietary compiler that Apple company Apple provides and

5
00:00:20.200 --> 00:00:29.350
then all the aliases on the terminal, which is C++ or C++ or Clang or GCC, they all point to the same

6
00:00:29.350 --> 00:00:37.840
being directory, which is basically the apple clang and then that's the C++ compiler, right?

7
00:00:38.260 --> 00:00:43.390
And then next we're going to look at the Linux Ubuntu, which is my favorite Linux distro.

8
00:00:43.390 --> 00:00:49.060
It's very easy to work with and it has a very nice terminal and the platform toolchain, obviously Linux

9
00:00:49.060 --> 00:00:54.310
is open source and you expect that the tool chains that come with it are also open source and I believe

10
00:00:54.340 --> 00:01:02.050
open to by default comes with a toolchain which is its default toolchain, which is the GCC new compiler

11
00:01:02.050 --> 00:01:02.680
collection.

12
00:01:02.680 --> 00:01:03.190
Right.

13
00:01:04.090 --> 00:01:05.230
And it's open source.

14
00:01:05.230 --> 00:01:10.150
You can install it, customize it and the easy way is to install it.

15
00:01:10.150 --> 00:01:14.680
I believe ubuntu comes by default with GCC the new compiler collection.

16
00:01:14.680 --> 00:01:19.570
If it doesn't you have to install the build essentials for Linux.

17
00:01:19.570 --> 00:01:26.590
And so in order to basically install the command line tools in terminal or basically install GCC, you

18
00:01:26.590 --> 00:01:34.510
first update your application repository, cash and then sudo apt install build essentials.

19
00:01:34.510 --> 00:01:36.520
You have to run it in the super superuser mode.

20
00:01:36.520 --> 00:01:39.910
So you need to have superuser privileges.

21
00:01:40.450 --> 00:01:44.710
If you're not familiar with Linux terminal, basically whenever you run a sudo command, you have to

22
00:01:44.710 --> 00:01:46.720
provide administrative password.

23
00:01:46.720 --> 00:01:49.420
So these are more like administrative privileges.

24
00:01:49.420 --> 00:01:50.470
You have to have that.

25
00:01:50.650 --> 00:01:57.610
And then apt is the command line executable binary application in Linux that manages your basically

26
00:01:58.060 --> 00:02:01.090
application cache from the remote repositories.

27
00:02:01.090 --> 00:02:08.470
And again, just like Mac OS that has an online app store, Linux also has repositories that the operating

28
00:02:08.470 --> 00:02:16.750
system can connect to them and download the applications and then install them on your operating system,

29
00:02:16.750 --> 00:02:17.530
on your computer.

30
00:02:17.530 --> 00:02:23.560
And this app is basically the application that manages that install is a command line argument for this

31
00:02:23.560 --> 00:02:24.190
app.

32
00:02:24.190 --> 00:02:27.630
And then you tell it which what you want to install and build essentials.

33
00:02:27.640 --> 00:02:34.750
Now if you want to learn more about build essentials, you can go to to this basically internet address

34
00:02:34.750 --> 00:02:41.020
it's FOSS dot com build essentials or and that gives you a lot of information about what these build

35
00:02:41.020 --> 00:02:43.150
essentials are and how to install them.

36
00:02:43.150 --> 00:02:44.050
It's very easy.

37
00:02:44.050 --> 00:02:45.280
As you can see, I have it here.

38
00:02:45.280 --> 00:02:49.270
You just say sudo apt install build hyphen essential.

39
00:02:49.270 --> 00:02:49.780
Right.

40
00:02:50.170 --> 00:02:54.130
So check if build essentials install and the first time you run it.

41
00:02:55.070 --> 00:02:59.270
And the way the app works, it always updates your repository list.

42
00:02:59.270 --> 00:03:05.690
First the packages and then reading a state information bill essentially is already the newest version.

43
00:03:05.690 --> 00:03:10.910
And basically when you run this install command, if you haven't install it, if your Linux distribution

44
00:03:10.910 --> 00:03:17.210
doesn't come with this build essentials, then APT goes and grabs the files and download them and install

45
00:03:17.210 --> 00:03:24.440
them on your computer if basically you've already installed them apt checks if you have the latest version.

46
00:03:24.440 --> 00:03:26.720
If not, it tries to update your version.

47
00:03:26.750 --> 00:03:29.720
Mine says Bill essentially is already the newest version.

48
00:03:30.110 --> 00:03:34.790
The following packages were automatically in and no longer requests, so it also tells you which packages

49
00:03:34.790 --> 00:03:41.690
are deprecated or they don't have any other application that rely on them use to to apt or to remove

50
00:03:41.690 --> 00:03:42.440
to remove them.

51
00:03:42.440 --> 00:03:48.560
So you can tell apt application with the command line argument or to remove and apt goes through all

52
00:03:48.560 --> 00:03:55.220
the caches and then of your application and see which ones don't have any other applications, rely

53
00:03:55.220 --> 00:03:56.630
on them and then you can delete them.

54
00:03:57.580 --> 00:03:58.120
All right.

55
00:03:58.120 --> 00:04:03.850
And then after you do this and install this bill, essentially you can check whether you have GKE or

56
00:04:03.910 --> 00:04:05.740
C++ arguments there.

57
00:04:05.740 --> 00:04:06.160
Right.

58
00:04:06.160 --> 00:04:09.490
So which GCSE and it says its user being GCSE.

59
00:04:09.490 --> 00:04:09.910
Right.

60
00:04:10.450 --> 00:04:16.960
And which means it's the terminal is able to locate the compiler, the C compiler, GCSE, if you type

61
00:04:17.020 --> 00:04:19.180
C++, it's a C++ compiler.

62
00:04:19.180 --> 00:04:24.130
So you have to check that and then you can also type JK hyphen, hyphen version.

63
00:04:24.610 --> 00:04:31.450
So first of all, you should be able to check whether the terminal can locate the GCSE executable and

64
00:04:31.450 --> 00:04:39.730
it's usually in the user being GCSE and the the files or the references in the user B are usually basically

65
00:04:39.730 --> 00:04:46.660
symbolic references or shortcuts to the actual where the actual file result resides.

66
00:04:46.660 --> 00:04:51.400
I mean, to the operating system or terminal, there is no really difference between symbolic reference

67
00:04:51.400 --> 00:04:53.410
and actual executable.

68
00:04:54.520 --> 00:04:58.150
And then you can also check which version of the GCC you are using.

69
00:04:58.900 --> 00:05:01.300
You just say GCSE hyphen, hyphen version.

70
00:05:01.330 --> 00:05:04.210
GCSE is compiling C source files by default.

71
00:05:04.330 --> 00:05:09.280
C++ is compiling C++ or CP source files by default.

72
00:05:09.280 --> 00:05:15.010
And again, these days we don't really care that much about C, we only care about modern C++.

73
00:05:15.010 --> 00:05:17.650
So I'm going to head to Linux and quickly show you this.

74
00:05:18.370 --> 00:05:19.900
So here's my Linux.

75
00:05:19.900 --> 00:05:21.490
Let me just log in.

76
00:05:21.490 --> 00:05:28.000
I'm running it in a virtual machine open to it's very easy and here's my terminal and as you can see,

77
00:05:28.000 --> 00:05:34.570
just like Mac OS, I'm very fond of this fish application which stands for friendly Interactive Shell.

78
00:05:34.570 --> 00:05:40.690
You can if you don't know how to install it, you just can say probably sudo apt install fish for example

79
00:05:40.960 --> 00:05:42.250
that should be easily installed.

80
00:05:42.250 --> 00:05:48.010
And I've if you right now I'm in my home directory if you if I look at my bash.

81
00:05:48.010 --> 00:05:51.250
RC You see that at the end of my bash?

82
00:05:51.250 --> 00:05:55.150
RC I have this command to run the fish.

83
00:05:55.150 --> 00:06:00.970
So whenever you launch the terminal it executes or loads the batch profile file.

84
00:06:00.970 --> 00:06:04.150
And then in the bash profile you can source your bash.

85
00:06:04.150 --> 00:06:06.400
RC And in the bash RC.

86
00:06:06.400 --> 00:06:11.530
I usually want at the end to define all the global environment variables, and eventually I want to

87
00:06:11.530 --> 00:06:16.330
run the fish friendly, interactive shell on top of my original terminal.

88
00:06:16.360 --> 00:06:24.550
So if you if you look at the bash profile, let's see if we have a bash profile file so we don't have

89
00:06:24.550 --> 00:06:24.670
it.

90
00:06:24.670 --> 00:06:25.690
So right now.

91
00:06:27.110 --> 00:06:29.210
We're just loading the batch RC directly.

92
00:06:30.020 --> 00:06:35.360
In my case I think it loads batch profile and then you can source special RC here.

93
00:06:35.360 --> 00:06:37.970
I guess it just loads batch RC directly.

94
00:06:38.210 --> 00:06:38.600
All right.

95
00:06:38.600 --> 00:06:49.640
So we are there in my virtualbox linux ubuntu and then sudo apt basically install a build essential

96
00:06:50.180 --> 00:06:56.510
and you want to run it in a superuser mode so that you do have administrative privileges because it

97
00:06:56.510 --> 00:06:58.340
has to access the root directory.

98
00:06:58.340 --> 00:07:03.020
So let's put the password and it says essentially is already the new version.

99
00:07:03.020 --> 00:07:08.720
Zero Upgrades zero newly installed zero to remove 546 not upgraded.

100
00:07:08.720 --> 00:07:10.460
So it says me that you've already installed it.

101
00:07:10.460 --> 00:07:14.090
If you haven't installed, you just type these and the magically grabs it.

102
00:07:14.360 --> 00:07:19.700
And then what we want to do, we want to check whether we have access to the compilers, which is the

103
00:07:19.700 --> 00:07:22.820
build default toolchain for building applications.

104
00:07:22.820 --> 00:07:22.990
Right.

105
00:07:23.000 --> 00:07:25.010
You have to compile to the native binaries.

106
00:07:25.040 --> 00:07:27.020
Native binaries depend on.

107
00:07:27.900 --> 00:07:32.610
The operating system and then the CPU architecture instruction sets.

108
00:07:32.610 --> 00:07:39.150
And when you run VirtualBox what you can do a virtual machine also basically you mimic the same CPU

109
00:07:39.150 --> 00:07:40.060
architecture, right?

110
00:07:40.080 --> 00:07:45.780
The processors that this sees is kind of like a virtual processor, but they have for example, my computer

111
00:07:45.780 --> 00:07:48.170
has a 64 bit intel CPU.

112
00:07:48.180 --> 00:07:53.250
So the virtual box also assumes that it has the same instruction set.

113
00:07:53.340 --> 00:08:00.030
So I'm going to say that which GTC, it tells me it's in the user being GTC and in which G plus plus

114
00:08:00.030 --> 00:08:02.520
it tells me it's in the user being C++.

115
00:08:02.520 --> 00:08:10.980
And then I can say GTC, a hyphen hyphen version and it tells me that it's a basically it's available.

116
00:08:10.980 --> 00:08:16.470
This is the version that comes with Ubuntu and then je plus plus hyphen hyphen version and it tells

117
00:08:16.470 --> 00:08:19.530
me that this is a G plus plus compiler, etc..

118
00:08:20.310 --> 00:08:26.430
Now the last thing that we want to do to make sure that all of the build tool chains are fully installed

119
00:08:26.430 --> 00:08:33.060
and ready to go, for us to basically compile a job application to native binary is to just write a

120
00:08:33.060 --> 00:08:38.790
simple C++ hello word and then try to compile it, make sure everything works fine.

121
00:08:38.790 --> 00:08:44.610
So I'm going to seed in my desktop and then let's create a CPP file.

122
00:08:46.240 --> 00:08:47.410
So we can say touch.

123
00:08:47.440 --> 00:08:50.140
Touch is a command that just creates an empty file.

124
00:08:51.820 --> 00:08:53.950
Hello, Dot CBP.

125
00:08:54.250 --> 00:08:56.620
And as you can see, it's here on my desktop.

126
00:08:56.620 --> 00:09:01.030
I'm going to open it with a probably text editor.

127
00:09:01.060 --> 00:09:02.260
Let's see what we have.

128
00:09:02.260 --> 00:09:04.150
We have this text editor here.

129
00:09:04.420 --> 00:09:07.360
So I'm going to open a on my desktop.

130
00:09:07.360 --> 00:09:09.220
I'm going to open up this Helloworld Dot.

131
00:09:09.260 --> 00:09:13.600
CP Let's see if we can zoom in a little bit.

132
00:09:14.930 --> 00:09:20.270
Uh, so let's write some, uh, the typical hello world.

133
00:09:20.270 --> 00:09:25.850
So we're going to include basically i0a stream, all right.

134
00:09:26.060 --> 00:09:31.430
And then we're going to say that in the main, we saw that right now my application is not going to

135
00:09:31.430 --> 00:09:35.540
request any take any command line argument so you can leave it.

136
00:09:35.720 --> 00:09:40.280
You don't need to pass the RC and arg v because we don't care about them.

137
00:09:40.280 --> 00:09:51.260
And then we're going to say that stdc out hello world from a C++ application and then we push a backslash

138
00:09:51.260 --> 00:09:52.640
n and then semicolon.

139
00:09:52.670 --> 00:09:54.650
We don't need to type return zero.

140
00:09:54.650 --> 00:09:55.460
That's fine.

141
00:09:55.460 --> 00:10:03.320
So we save these and here we're going to clear and then say C++, hello dot cp and let's call the output

142
00:10:03.530 --> 00:10:10.280
file name or the compiled file as my app and it tries to compile.

143
00:10:10.280 --> 00:10:12.170
Let's see if and then there is no error.

144
00:10:12.170 --> 00:10:20.990
All the compilation is successful and we have a native executable binary called my app and again similar

145
00:10:20.990 --> 00:10:25.850
to macros, if you want to execute it and the application, you have to give the relative path or the

146
00:10:25.850 --> 00:10:28.580
full path to this executable file in terminal.

147
00:10:28.610 --> 00:10:35.030
Right now I'm in the same directory desktop so I say from current directory, execute my app and we

148
00:10:35.030 --> 00:10:39.410
can pass basically command line arguments.

149
00:10:39.410 --> 00:10:44.240
But it's they're going to be ignored because we're not capturing any RC or ARG v here.

150
00:10:44.870 --> 00:10:47.660
So hello, you are.

151
00:10:47.660 --> 00:10:52.640
And then it just runs the application, whatever is inside the main method and then it terminates and

152
00:10:52.640 --> 00:10:58.070
it disregards any strings that come after the name of the application because we're not capturing any

153
00:10:58.070 --> 00:10:58.960
ask or are we?

154
00:10:58.970 --> 00:11:06.860
Right now we see we can do that if we say into RC and then char array, arg, v array, right?

155
00:11:07.160 --> 00:11:08.660
And then we can go through them.

156
00:11:08.660 --> 00:11:15.950
Just print the exactly like what we did in C++ in macros, just make sure that everything works fine.

157
00:11:16.130 --> 00:11:29.450
Print command line arguments to the terminal again so we know that what we do is basically for int or

158
00:11:29.450 --> 00:11:37.400
size t both works fine size t i equals zero is less an c plus plus.

159
00:11:38.270 --> 00:11:49.970
We're going to say that std c out arg v at index i it's it returns a character or basically a string

160
00:11:49.970 --> 00:11:55.670
and see out this overload insertion operator is overloaded so it knows how to handle the character and

161
00:11:55.670 --> 00:12:04.460
then we're going to do a backslash n new line to the terminal right so save we have to obviously compile

162
00:12:04.460 --> 00:12:14.300
again everything works fine and now we run our application and now we we know that in C++ in in for

163
00:12:14.300 --> 00:12:21.620
the C++ application, the number of arguments are like you have the command line arguments and also

164
00:12:21.620 --> 00:12:24.530
the name of the application relative or absolute path.

165
00:12:24.530 --> 00:12:27.710
We saw that in MapQuest, the same story here in Linux.

166
00:12:27.830 --> 00:12:34.880
So the first argument that the first argument or the first string in this string area is always the

167
00:12:34.880 --> 00:12:40.610
name of the application, whatever exactly what you type here and then hello, you are.

168
00:12:40.610 --> 00:12:42.440
So basically these are the command line arguments.

169
00:12:42.440 --> 00:12:44.210
All right, so everything works fine.

170
00:12:44.210 --> 00:12:46.250
Our toolchain is successful.

171
00:12:47.060 --> 00:12:50.810
Now note that if you try to compile with GCC

172
00:12:53.540 --> 00:13:00.230
try so it it basically what it does is that it now.

173
00:13:02.920 --> 00:13:04.390
Basically what it does.

174
00:13:04.450 --> 00:13:09.680
It now complains because DCC considers C SourceForge not C++.

175
00:13:09.680 --> 00:13:10.060
So it says.

176
00:13:10.180 --> 00:13:13.090
I don't know why this stdc out is these are undefined.

177
00:13:13.090 --> 00:13:22.270
So because when you run GC it uses the header files that are associated with the basically C, not C++.

178
00:13:22.270 --> 00:13:26.890
And in C you don't have any objects, any STD or any namespace.

179
00:13:26.890 --> 00:13:30.670
But when you say G plus plus hello dot CP hyphen.

180
00:13:30.670 --> 00:13:32.830
Oh try it works fine.

181
00:13:32.830 --> 00:13:33.340
Right.

182
00:13:34.390 --> 00:13:40.180
And if we now say try, it also works fine.

183
00:13:40.180 --> 00:13:42.440
Now we only have one argument as the command line.

184
00:13:42.460 --> 00:13:42.850
All right.

185
00:13:42.850 --> 00:13:44.110
I hope you enjoy this lecture.

186
00:13:44.110 --> 00:13:50.740
And basically, next, we're going to look at the windows and I quickly show you how to set up the default

187
00:13:50.740 --> 00:13:51.890
tool change in Windows.

188
00:13:51.910 --> 00:13:56.260
Now, window is a little bit more complicated because you have to go and download the it's not really

189
00:13:56.260 --> 00:13:57.070
about the terminal.

190
00:13:57.070 --> 00:14:05.770
You have to basically download the Microsoft Visual C compiler separately, install it now in whenever

191
00:14:05.770 --> 00:14:11.500
you install something in Mac OS and Linux using the terminal, especially in Linux, they already basically

192
00:14:11.620 --> 00:14:18.460
set up the path environment variable so that all these, for example, compilers are already available

193
00:14:18.460 --> 00:14:19.090
on the terminal.

194
00:14:19.090 --> 00:14:20.050
You don't need to write.

195
00:14:20.050 --> 00:14:25.600
For example, the absolute path to those executable binary now in windows is not the case, so we have

196
00:14:25.600 --> 00:14:28.780
to do some extra work to set it up.

197
00:14:28.870 --> 00:14:30.100
So yeah.

198
00:14:30.100 --> 00:14:31.570
So next we look at windows.
