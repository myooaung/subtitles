1
00:00:01,380 --> 00:00:03,900
Hello and welcome to another tutorial.

2
00:00:03,900 --> 00:00:07,530
We're going to continue our discussion on Native Image.

3
00:00:07,890 --> 00:00:15,750
We looked at the build output, basically all the details of the outputs that the native image prints

4
00:00:15,750 --> 00:00:21,060
to the console as part of the compilation and generating the native executable binary.

5
00:00:21,180 --> 00:00:27,330
But the build output also has some options and you can look at the documentations again VM dot org.

6
00:00:27,330 --> 00:00:34,140
The version, the latest version is 22.1 I believe, and then reference manual native image build output

7
00:00:34,140 --> 00:00:35,760
and then build output options.

8
00:00:35,760 --> 00:00:42,120
So I'm going to quickly open this up in a browser and we can have a look.

9
00:00:42,720 --> 00:00:51,900
And then also so Google VM, build output options, run native image, hyphen, hyphen, expert options

10
00:00:51,900 --> 00:00:52,290
all.

11
00:00:52,290 --> 00:01:01,320
So it shows not only the regular options that the native image can accept, also all the extra options

12
00:01:01,320 --> 00:01:04,770
or flags that are considered as expert options.

13
00:01:04,770 --> 00:01:06,060
And then we are pipeline.

14
00:01:06,180 --> 00:01:10,410
The output of this command to the grep grep is just for filtering.

15
00:01:10,410 --> 00:01:17,190
It just means a search for this particular string which is build output and only show the lines in the

16
00:01:17,190 --> 00:01:21,240
output of this command that has this particular string in them.

17
00:01:21,240 --> 00:01:23,970
So grep is just for filtering strings, right.

18
00:01:24,480 --> 00:01:29,640
And the pipeline thing we've seen in the past, I mentioned that.

19
00:01:31,000 --> 00:01:31,450
Let's see.

20
00:01:31,450 --> 00:01:32,650
Where was that?

21
00:01:33,310 --> 00:01:33,790
This one.

22
00:01:33,790 --> 00:01:36,130
So actually, let's.

23
00:01:37,840 --> 00:01:39,550
Uh, let's see.

24
00:01:39,550 --> 00:01:43,870
Where was, uh, when we talked about the AI terminal.

25
00:01:45,590 --> 00:01:46,620
Let's see.

26
00:01:46,640 --> 00:01:48,140
Terminal, this one.

27
00:01:48,140 --> 00:01:50,720
So we said that there are arrows, right?

28
00:01:51,230 --> 00:01:58,460
Like the greater than sine which indicate the IO streams of the console input stream output, extremes

29
00:01:58,460 --> 00:01:59,210
or error.

30
00:01:59,210 --> 00:02:01,640
And these are four streams to the files.

31
00:02:02,030 --> 00:02:02,600
But then.

32
00:02:02,600 --> 00:02:10,000
And then the pipe lining is the streams from the output of one application directly to another application.

33
00:02:10,010 --> 00:02:20,420
So if you're again not familiar with the basically with the bash terminal, so pipeline so basically

34
00:02:20,420 --> 00:02:29,900
arrow operator means we are streaming the output of a particular application to a file, whereas the

35
00:02:29,900 --> 00:02:37,610
pipeline or the pipe operator means we are streaming the output of one application to another application

36
00:02:37,610 --> 00:02:41,680
so you can have a multiple of this pipeline and the.

37
00:02:43,820 --> 00:02:49,910
So basically the idea is that, as I mentioned before, terminal is a text based application which or

38
00:02:49,910 --> 00:02:50,780
a string based.

39
00:02:50,780 --> 00:02:58,550
So the output of, for example, a application whatever you execute in terminal is always going to be

40
00:02:58,550 --> 00:02:59,510
some sort of text.

41
00:02:59,540 --> 00:03:05,870
Now obviously you can stream this, for example, to, to a file.

42
00:03:05,870 --> 00:03:12,440
So if I just type the name, so let's clear and say here, but for example, stream it to a file.

43
00:03:12,470 --> 00:03:15,740
So my file dot text.

44
00:03:15,770 --> 00:03:22,430
So this output is stream streams the output which is just a text textual output, right?

45
00:03:22,430 --> 00:03:30,050
The strings that are supposed to go to the terminal instead it redirects the output to a file, whereas

46
00:03:30,050 --> 00:03:40,640
I can say pipeline the output to another application, let's say grep anything, I don't know, desktop.

47
00:03:40,640 --> 00:03:41,000
Right.

48
00:03:41,000 --> 00:03:46,970
I want to see if when I list all the directors in my home directory which one has a desktop.

49
00:03:46,970 --> 00:03:48,290
This one has a desktop, right.

50
00:03:48,290 --> 00:03:54,500
So there's only one directory, one line in the output of this command that has this word desktop in

51
00:03:54,500 --> 00:03:54,650
it.

52
00:03:54,650 --> 00:03:55,130
Right.

53
00:03:56,660 --> 00:03:58,670
So that's how the pipeline works.

54
00:03:58,670 --> 00:04:00,410
And now it tells you that.

55
00:04:02,600 --> 00:04:11,150
You can look at the build output options using this by first, you can look at the native image export

56
00:04:11,150 --> 00:04:11,900
options.

57
00:04:11,900 --> 00:04:18,800
So let's see Google home being being a native image

58
00:04:21,800 --> 00:04:26,150
and then let's first of all look at the version.

59
00:04:28,100 --> 00:04:30,080
So let's see.

60
00:04:34,700 --> 00:04:35,930
Google home.

61
00:04:36,530 --> 00:04:40,940
Google home being a native image hyphen, hyphen version.

62
00:04:41,300 --> 00:04:44,570
And we're using the 22.1 version.

63
00:04:44,570 --> 00:04:46,700
And then we want to look at the output.

64
00:04:46,700 --> 00:04:48,530
So let me just open up these.

65
00:04:48,860 --> 00:04:53,890
Now we want to look at all the options, hyphen, hyphen, expert options.

66
00:04:53,900 --> 00:04:54,770
All right.

67
00:04:54,770 --> 00:05:01,460
So if I don't grab it or just look at the all the output of this command, you see, there's lots and

68
00:05:01,460 --> 00:05:02,480
lots of options.

69
00:05:02,480 --> 00:05:02,990
Right?

70
00:05:03,680 --> 00:05:04,580
There's a huge amount.

71
00:05:04,610 --> 00:05:06,920
Now, you can save these options to a file.

72
00:05:06,920 --> 00:05:08,300
And later, look at them.

73
00:05:08,420 --> 00:05:14,120
For example, let's redirect the output instead of to the terminal.

74
00:05:14,120 --> 00:05:21,110
I'm going to redirect it to VMM expert options dot txt.

75
00:05:21,110 --> 00:05:26,900
So I'm taking this redirection or the output is streaming means instead of printing the output of this

76
00:05:26,900 --> 00:05:35,330
application to the terminal, redirect it to a file and now I can go ahead and go to my home directory

77
00:05:35,330 --> 00:05:37,250
and open up this text file.

78
00:05:37,250 --> 00:05:38,090
So let's look at it.

79
00:05:38,090 --> 00:05:41,240
So you see this text file now exists.

80
00:05:41,420 --> 00:05:48,320
I can open it with a text editor and you see, we redirected the output of this application using the

81
00:05:48,320 --> 00:05:51,530
output stream of the terminal.

82
00:05:52,410 --> 00:05:55,830
To a file instead of printing to the terminal.

83
00:05:55,840 --> 00:05:56,100
Right.

84
00:05:56,100 --> 00:05:58,950
So this this arrow operator means redirection.

85
00:05:59,220 --> 00:06:00,120
And you see.

86
00:06:00,780 --> 00:06:05,210
Let's bring back this text where you see there are lots of options.

87
00:06:05,330 --> 00:06:08,430
The native image has lots and lots of options.

88
00:06:08,610 --> 00:06:11,250
Literally like 1000 different options.

89
00:06:11,520 --> 00:06:18,390
And obviously in the I cannot in one course, you cannot really go through all these expert options

90
00:06:18,390 --> 00:06:20,610
because that takes a huge amount of time.

91
00:06:20,760 --> 00:06:24,570
But I will show you some of the most useful options.

92
00:06:24,570 --> 00:06:25,440
And what do they mean?

93
00:06:25,440 --> 00:06:34,920
So for the build output, there are some build outputs that basically like change the behavior of what's

94
00:06:34,920 --> 00:06:42,240
printing to the terminal as the native image goes, goes through the build process and creates the executable

95
00:06:42,240 --> 00:06:42,840
file.

96
00:06:44,580 --> 00:06:50,610
For example, build output breakdowns, show code and heap breakdowns as part of the build output.

97
00:06:50,610 --> 00:07:00,000
And this is, if you recall, we said that this this part of the this extra information is in the performing

98
00:07:00,000 --> 00:07:02,300
analysis and creating image.

99
00:07:02,310 --> 00:07:09,720
It tells you like what size what percentage of the total size is for the code area image heap other

100
00:07:09,720 --> 00:07:16,110
data, how many classes were actually compiled, how many fields and methods were actually needed for

101
00:07:16,110 --> 00:07:23,370
your job application, etc. So build output breakdowns, you can set it to false and the way you do

102
00:07:23,370 --> 00:07:27,060
it for the boolean or options usually you use plus minus.

103
00:07:27,450 --> 00:07:31,290
So all these expert options start with hyphen edge.

104
00:07:31,290 --> 00:07:32,880
So let's go back to the test.

105
00:07:33,900 --> 00:07:37,710
Let's actually go back and open up this text file.

106
00:07:37,710 --> 00:07:40,740
And you see there are different categories of these options.

107
00:07:40,740 --> 00:07:42,780
One, it starts with hyphen edge.

108
00:07:42,810 --> 00:07:43,710
Let me zoom in.

109
00:07:43,740 --> 00:07:44,400
Right.

110
00:07:44,400 --> 00:07:48,030
So these start with hyphen edge, the other ones.

111
00:07:48,180 --> 00:07:49,890
So let me zoom back.

112
00:07:51,000 --> 00:07:51,480
Yeah.

113
00:07:51,480 --> 00:07:54,990
So these ones start with hyphen edge column.

114
00:07:55,020 --> 00:07:58,020
The other ones start with the hyphen are.

115
00:07:59,380 --> 00:08:03,460
So if I scroll down now they are hyphen R, right?

116
00:08:03,460 --> 00:08:06,550
So there is a difference for the build stage.

117
00:08:06,550 --> 00:08:11,320
Most flags are, most flags start with hyphen, edge and then colon.

118
00:08:11,320 --> 00:08:16,540
And if it's a boolean flag, you can turn it on and off with plus or minus sign, right?

119
00:08:16,540 --> 00:08:22,420
So these build output options, these are all Boolean flags because they start with a plus or minus

120
00:08:22,420 --> 00:08:24,010
and then build output breakdown.

121
00:08:24,010 --> 00:08:31,000
So if I tell it hyphen edge plus build output breakdowns, it shows the code and he breakdowns as part

122
00:08:31,000 --> 00:08:31,780
of the build output.

123
00:08:31,780 --> 00:08:38,560
And the default is plus, which means by default this is enable hyphen edge colon plus or minus build

124
00:08:38,560 --> 00:08:44,020
output, colorful colorize build output and by default it's on.

125
00:08:44,020 --> 00:08:48,640
But know that your terminal has to support a colorful messaging.

126
00:08:48,640 --> 00:08:56,920
And we saw that, for example, if you run the fish application on top of your shell in macros or Linux,

127
00:08:56,920 --> 00:09:00,190
then fish supports the colorful output.

128
00:09:00,220 --> 00:09:02,710
This is the output in MapQuest, for example.

129
00:09:02,800 --> 00:09:05,890
This is the output of Linux and we saw that in Windows.

130
00:09:05,890 --> 00:09:07,540
It's really not that colorful.

131
00:09:07,540 --> 00:09:10,120
So it doesn't matter if you turn it on or off.

132
00:09:10,120 --> 00:09:16,690
If your terminal doesn't support the colorful output, then you're not going to see it right now.

133
00:09:16,690 --> 00:09:20,890
For example, I can go back to my eclipse and let's delete this.

134
00:09:21,550 --> 00:09:22,630
My app.

135
00:09:23,080 --> 00:09:29,080
We already created this simple hello world application and so I'm going to open up a terminal here.

136
00:09:29,870 --> 00:09:34,710
And then so we pass these flags to the native image.

137
00:09:34,710 --> 00:09:42,130
So girl home and then bean and then native image and then a hyphen H minus.

138
00:09:43,130 --> 00:09:45,160
Let's look at the flag again.

139
00:09:45,170 --> 00:09:46,790
It's below the output.

140
00:09:46,790 --> 00:09:47,420
Colorful.

141
00:09:47,420 --> 00:09:54,350
So I'm going to copy it and then go back to my terminal and then paste this here.

142
00:09:54,830 --> 00:10:02,300
So now I'm basically turning this flag off and then hyphen CP here and then the name of the main main

143
00:10:02,300 --> 00:10:07,910
class is Hello World without the dot class extension and I want to generate the my app output.

144
00:10:08,660 --> 00:10:10,400
So let's see what happens to the output.

145
00:10:10,400 --> 00:10:12,620
And now you see the output is not colorful.

146
00:10:12,650 --> 00:10:14,240
Previously it was colorful.

147
00:10:14,240 --> 00:10:20,510
The first row was if you look at the previously, the first logo was colourful.

148
00:10:20,510 --> 00:10:22,850
This was like a purple thing.

149
00:10:22,850 --> 00:10:26,630
And then these lines are a yellow colour in Linux.

150
00:10:26,960 --> 00:10:29,300
They were also the yellow colour.

151
00:10:29,300 --> 00:10:35,150
But now in my case I turn this boolean flag off telling it Hey, don't print colourful.

152
00:10:37,500 --> 00:10:40,860
Don't print colorful information.

153
00:10:40,860 --> 00:10:43,830
So you see, it's just a just black and white.

154
00:10:43,830 --> 00:10:51,180
There is no color because I passed this boolean flag to my native image compiler and then it turned

155
00:10:51,180 --> 00:10:52,560
this flag off.

156
00:10:52,560 --> 00:10:58,620
So if a boolean flag for the compilation or the build, it starts with hyphen, edge, colon and then

157
00:10:58,620 --> 00:11:02,790
plus means enable this boolean flag minus means disabled boolean flag.

158
00:11:02,790 --> 00:11:03,150
Right?

159
00:11:03,150 --> 00:11:05,160
So the output is not colorful at all.

160
00:11:05,190 --> 00:11:11,850
Now, obviously, as I mentioned, you can redirect the output to a to a text file.

161
00:11:11,850 --> 00:11:15,120
So let me just delete this.

162
00:11:15,240 --> 00:11:19,470
And that has nothing to do with the Native Image tool.

163
00:11:19,470 --> 00:11:21,870
It's just the property of the bash terminal.

164
00:11:21,870 --> 00:11:27,690
So instead of printing to the console, I want to say that, hey, run this, build, create my app,

165
00:11:27,690 --> 00:11:34,570
but then also redirect a save the output that the native image generates to let's call it build the

166
00:11:34,830 --> 00:11:37,230
underscore output dot txt.

167
00:11:37,710 --> 00:11:38,190
Right?

168
00:11:38,190 --> 00:11:43,050
So it's not going to print anything to the terminal, it's going to create this text file right in the

169
00:11:43,050 --> 00:11:47,250
same directory here and you will see that this text file gets updated.

170
00:11:47,250 --> 00:11:50,850
So if I continue refreshing.

171
00:11:52,560 --> 00:11:54,720
Or maybe close it and open it again.

172
00:11:54,930 --> 00:12:02,490
This will get updated over and over again because the terminal you see now it gets updated because as

173
00:12:02,490 --> 00:12:09,960
the build progresses, the output stream of this application from native image is redirected from the

174
00:12:09,960 --> 00:12:12,480
terminal to this output text file.

175
00:12:12,510 --> 00:12:14,880
So we are seeing the output instead of terminal.

176
00:12:14,880 --> 00:12:17,940
We are seeing it kind of live in this text file.

177
00:12:17,940 --> 00:12:18,420
Right.

178
00:12:18,450 --> 00:12:26,610
And this is good if you want to as scripted and kind of do the compilation automatic or you are running

179
00:12:26,760 --> 00:12:32,940
this kind of compilation and builds on a server and you don't want the terminal to be busy with your

180
00:12:32,940 --> 00:12:36,600
compilation, you just want to redirect and then save the output.

181
00:12:36,600 --> 00:12:41,010
So if something goes wrong in one of the bills, you can also look at the outputs, right?

182
00:12:41,010 --> 00:12:49,110
So we saw that it it redirects the output to a text file and and then our build is successful and we

183
00:12:49,110 --> 00:12:51,950
can actually run my app, my underscore app.

184
00:12:51,960 --> 00:12:53,130
Obviously, it works fine.

185
00:12:53,130 --> 00:12:59,340
But then the other thing that we notice is that when you redirect the application like this, the terminal

186
00:12:59,340 --> 00:13:00,600
is still busy.

187
00:13:00,600 --> 00:13:04,920
So, so let me just delete this build again.

188
00:13:07,100 --> 00:13:12,110
If I look at the terminal, when I ran this previously, the terminal was busy, right?

189
00:13:12,110 --> 00:13:17,690
So it doesn't release the shell, it redirects the output to the text file.

190
00:13:17,690 --> 00:13:21,560
But the process is still makes it keeps the shell busy.

191
00:13:21,890 --> 00:13:22,610
So.

192
00:13:24,550 --> 00:13:33,430
Basically if we pass a ampersand, you see now it immediately releases the terminal so I can go ahead

193
00:13:33,430 --> 00:13:34,660
and do other commands.

194
00:13:34,660 --> 00:13:37,630
It's fine, but that process is still running.

195
00:13:37,630 --> 00:13:43,870
You see this build output is still running and we are building, but the terminal is not busy and this

196
00:13:43,870 --> 00:13:44,650
is good.

197
00:13:44,650 --> 00:13:50,830
If you're trying to run multiple bills simultaneously in the terminal, obviously your processor, you

198
00:13:50,830 --> 00:13:53,800
should have enough processing power to handle that.

199
00:13:53,800 --> 00:13:55,240
But then the terminal is free.

200
00:13:55,240 --> 00:14:01,180
You can go ahead and do other stuff and then your process is running in background.

201
00:14:01,180 --> 00:14:04,030
So basically this ampersand whenever you tell.

202
00:14:06,470 --> 00:14:11,900
Now it's also fish is informing that there was one job running in the background.

203
00:14:11,900 --> 00:14:15,770
This has ended and everything is done right.

204
00:14:15,770 --> 00:14:21,920
So if you want to run a command in terminal and you know that it's going to take a long time and you

205
00:14:21,920 --> 00:14:26,540
don't want the terminal to be busy, you want to also run other commands, you can run the commands

206
00:14:26,540 --> 00:14:27,200
in background.

207
00:14:27,200 --> 00:14:34,010
So in order to run a terminal command in background, you ended with ampersand.

208
00:14:34,010 --> 00:14:38,630
Ampersand means, hey, run this command, but run it in background and release the terminal.

209
00:14:38,630 --> 00:14:39,890
Don't make the terminal busy.

210
00:14:39,890 --> 00:14:41,720
I want to enter other commands.

211
00:14:41,720 --> 00:14:42,140
Right.

212
00:14:42,260 --> 00:14:49,280
And that also includes, for example, this my app, I can run it and the terminal has to wait for the

213
00:14:49,280 --> 00:14:49,580
app.

214
00:14:49,580 --> 00:14:50,120
Right.

215
00:14:50,120 --> 00:14:52,960
But then I can tell it.

216
00:14:53,540 --> 00:14:55,790
Run my app, but release the terminal.

217
00:14:55,790 --> 00:14:57,170
So run this in the background.

218
00:14:57,170 --> 00:15:04,100
As you can see, it immediately returns but then it is still prints the output to the console because

219
00:15:04,100 --> 00:15:12,080
my application also it releases the terminal but it it is still generates some output to the terminal.

220
00:15:12,080 --> 00:15:14,450
So the terminal has to go back and print it.

221
00:15:14,450 --> 00:15:14,990
Right.

222
00:15:14,990 --> 00:15:20,210
And then the fish is intelligent in the sense that it tells me, hey, there was one job running in

223
00:15:20,210 --> 00:15:24,710
the background and it was this command and now it's ended, it's finished, right?

224
00:15:24,710 --> 00:15:31,010
So again, I recommend that on macOS or Linux you run fish on top of your current terminal because it

225
00:15:31,010 --> 00:15:32,270
adds more features, right?

226
00:15:32,600 --> 00:15:40,130
So the build output, again, we redirected the native image output to a text file and then we can also

227
00:15:40,130 --> 00:15:44,750
use the ampersand command so that we run it, we run the build in the background.

228
00:15:44,840 --> 00:15:51,470
Usually when you have a build server, a server that you use, let's say a server has 64 CPU cores,

229
00:15:51,470 --> 00:15:57,350
so you can run multiple bells simultaneously because your server has enough compute power or CPU power

230
00:15:57,350 --> 00:15:58,100
to handle.

231
00:15:58,400 --> 00:15:59,300
And then a.

232
00:16:01,250 --> 00:16:11,510
Basically you can when you run one build in the terminal, you want to run it with the ampersand so

233
00:16:11,510 --> 00:16:14,810
that the build is run in the background.

234
00:16:14,810 --> 00:16:21,950
And then you also want to redirect the output of the native image to a text file so that if something

235
00:16:21,950 --> 00:16:26,060
goes wrong, you go back and look at what went wrong, right?

236
00:16:26,060 --> 00:16:30,650
If Native Image encounter an error, the output is still going to be in the text file.

237
00:16:30,650 --> 00:16:31,130
Right?

238
00:16:31,130 --> 00:16:34,370
So that's the thing.

239
00:16:34,370 --> 00:16:41,030
Later I will show you that in macOS and Linux we can run, we can write Shell commands that automates

240
00:16:41,030 --> 00:16:43,040
this kind of build processes.

241
00:16:43,040 --> 00:16:49,610
And then in the Shell command, obviously we redirect the output to a text file so that we log the build

242
00:16:49,610 --> 00:16:50,420
process.

243
00:16:50,420 --> 00:16:52,130
So that's one of the things, right?

244
00:16:52,130 --> 00:16:57,110
But the point here was to show you that there are two types of flag for the native image.

245
00:16:57,110 --> 00:16:59,480
One of them is hyphen edge colon.

246
00:16:59,480 --> 00:17:02,360
The other one is hyphen are colon.

247
00:17:02,360 --> 00:17:02,750
Right.

248
00:17:02,750 --> 00:17:05,930
So there are two types of commands.

249
00:17:06,990 --> 00:17:14,010
And most of these are booleans so you can enable them with plus sign disabled them with minus sign.

250
00:17:14,130 --> 00:17:21,330
So hyphen edge colon plus or minus build output breakdowns build output colourful build output GC warnings

251
00:17:21,330 --> 00:17:24,600
build output links show links in build output.

252
00:17:24,600 --> 00:17:27,900
Again, default all of these build output options.

253
00:17:27,900 --> 00:17:35,910
The default is plus except for this one build output prefix prefix build output with the PDP ID is the

254
00:17:35,910 --> 00:17:39,090
process ID and then the image name.

255
00:17:39,180 --> 00:17:40,950
The default is negative.

256
00:17:40,980 --> 00:17:47,910
So if you again run multiple bills simultaneously on a computer, each run each build is a separate

257
00:17:47,910 --> 00:17:48,630
process.

258
00:17:48,630 --> 00:17:49,260
Right.

259
00:17:49,260 --> 00:17:56,740
And then you can if you want to distinguish which builds have finished, you can also pass the PID and

260
00:17:56,760 --> 00:17:56,880
in.

261
00:17:57,000 --> 00:18:03,360
If you enable this, the native image is going to add the process ID that was used to launch the native

262
00:18:03,360 --> 00:18:06,210
image so we can go ahead and actually test this again.

263
00:18:08,970 --> 00:18:10,560
So let's delete this.

264
00:18:11,290 --> 00:18:13,750
And let's go back to our terminal.

265
00:18:15,070 --> 00:18:15,550
All right.

266
00:18:15,550 --> 00:18:17,970
So I'm not going to redirect to output.

267
00:18:17,980 --> 00:18:21,280
Let's just keep to the terminal, but let's keep the bell.

268
00:18:21,280 --> 00:18:22,450
The colorful.

269
00:18:25,110 --> 00:18:33,910
So we plus and again you can always add the multiple flags hyphen edge plus and what flag do we want?

270
00:18:33,930 --> 00:18:38,700
We want to build output prefix with a plus sign so that we enable it.

271
00:18:40,240 --> 00:18:40,660
All right.

272
00:18:40,660 --> 00:18:42,930
And in hyphen classpass here and this.

273
00:18:42,940 --> 00:18:44,170
So let's run these.

274
00:18:44,890 --> 00:18:52,060
So now it's obviously it's a colorful and now it's actually giving the process information.

275
00:18:52,060 --> 00:18:58,420
And the reason is that sometimes something goes wrong in the process, CPU or operating system decides

276
00:18:58,420 --> 00:19:00,730
to terminate the process unexpectedly.

277
00:19:00,730 --> 00:19:06,790
But all operating systems keep a background log of all the processes that are running, how long it

278
00:19:06,790 --> 00:19:08,380
took and other stuff.

279
00:19:08,380 --> 00:19:08,860
Right?

280
00:19:09,040 --> 00:19:17,800
So, so if you know the process ID, you can later go back and check on the OS level the logs that the

281
00:19:17,800 --> 00:19:24,220
operating system does of what was wrong in the process or if something happens right now, everything

282
00:19:24,220 --> 00:19:25,000
worked fine.

283
00:19:25,030 --> 00:19:28,870
This process terminated, my application was generated, right?

284
00:19:28,990 --> 00:19:34,630
But then in the terminal, in the output of the native image, it also logs the which application,

285
00:19:34,630 --> 00:19:41,170
which native executable was generated and what was the process like for launching this native image

286
00:19:41,380 --> 00:19:41,980
application?

287
00:19:41,980 --> 00:19:42,430
Right.

288
00:19:42,430 --> 00:19:47,260
So when you run a native image, you're running an application which is native image, you feed it your

289
00:19:47,260 --> 00:19:49,060
class file and it generates something.

290
00:19:49,060 --> 00:19:50,920
So it's a process that is running.

291
00:19:50,920 --> 00:19:56,860
And again, right now it's running in the foreground of my terminal because I didn't use ampersand.

292
00:19:56,890 --> 00:20:00,700
Ampersand means run it in the background, don't print anything to the console.

293
00:20:00,700 --> 00:20:06,400
Actually, it prints to the console as it is still allowed to print to the console, but it kind of

294
00:20:06,400 --> 00:20:08,900
relinquishes the control of the console.

295
00:20:09,190 --> 00:20:09,840
The shell, right.

296
00:20:09,850 --> 00:20:10,900
The shell is not busy.

297
00:20:12,730 --> 00:20:13,120
All right.

298
00:20:13,120 --> 00:20:19,390
And let's go back to our PowerPoint and finish up on this.

299
00:20:22,210 --> 00:20:31,720
So belt output progress report progress in belt output enabled plus by default and then build output

300
00:20:31,720 --> 00:20:35,920
use new style use new build output style default is plus.

301
00:20:35,920 --> 00:20:36,280
Right.

302
00:20:36,280 --> 00:20:37,240
So again.

303
00:20:39,170 --> 00:20:49,070
If I think that there was some old style of the output that the native image prints to the console and

304
00:20:49,070 --> 00:20:58,130
now they switch to the new style and it's a basically by default enabled, we can actually go back and

305
00:20:58,130 --> 00:20:58,640
test this.

306
00:20:58,640 --> 00:21:06,890
So let's copy this, build output, new style and then go back to our terminal to the next one here

307
00:21:06,890 --> 00:21:10,760
and then we are going to run our application.

308
00:21:10,760 --> 00:21:16,880
Let's remove the previous two flags that we passed to a native image and then we're going to say hyphen

309
00:21:16,880 --> 00:21:20,390
edge, minus, build output, new style.

310
00:21:20,390 --> 00:21:21,950
Again, a belt flag.

311
00:21:21,950 --> 00:21:27,020
It starts with hyphen colon and then minus means this is a Boolean flag, we're going to turn it off

312
00:21:27,020 --> 00:21:28,160
or set it to false.

313
00:21:28,160 --> 00:21:32,810
So which means don't use new style output and then we run it.

314
00:21:34,900 --> 00:21:37,750
Oh, actually, we made a mistake.

315
00:21:37,750 --> 00:21:39,970
So I'm going to terminate this process.

316
00:21:41,560 --> 00:21:45,880
So let's delete this output again and then go back to our terminal.

317
00:21:48,290 --> 00:21:50,690
So yeah.

318
00:21:50,690 --> 00:21:54,890
So hyphen edge colon hyphen build output, new style.

319
00:21:54,890 --> 00:21:55,730
And now here.

320
00:21:56,270 --> 00:21:58,010
So warning option build output.

321
00:21:58,010 --> 00:22:01,880
New style is deprecated and might be removed from future versions.

322
00:22:01,880 --> 00:22:03,620
So this is the old style.

323
00:22:04,610 --> 00:22:10,820
It shows the likes, the name of the app, the process ID class list caps set up.

324
00:22:10,820 --> 00:22:19,190
So for example, in the native VM version, JDK 11, this was the style that it used to print to the

325
00:22:19,190 --> 00:22:20,030
console, right?

326
00:22:20,030 --> 00:22:25,820
And now they in the 17 they switched to the new style, which is colourful, nice.

327
00:22:25,820 --> 00:22:27,260
It gives you more information.

328
00:22:27,260 --> 00:22:34,640
It walks you through all the steps and also tells you that okay, I also print build artifact to here.

329
00:22:34,640 --> 00:22:38,450
So it just tells you that I created an executable file called to my app.

330
00:22:39,230 --> 00:22:39,590
All right.

331
00:22:39,590 --> 00:22:44,120
So this is the concept of build flags in the future lectures.

332
00:22:44,360 --> 00:22:48,830
If there are some important flags, I will definitely walk you through them.

333
00:22:48,860 --> 00:22:52,070
Most of these, again, are Boolean flags.

334
00:22:52,070 --> 00:22:54,500
You turn them on and off with plus minus.

335
00:22:54,500 --> 00:22:59,300
And there are two categories of the flags either hyphen, edge or hyphen.

336
00:22:59,300 --> 00:23:01,240
Ah, I hope you enjoyed this one.

337
00:23:01,250 --> 00:23:03,950
Please stay tuned and I'll see the next one.
