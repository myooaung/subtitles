1
00:00:00,900 --> 00:00:03,870
Hello and welcome to another tutorial.

2
00:00:03,870 --> 00:00:09,660
We're going to continue our discussion on how to set up the Native Image tool as an external tool in

3
00:00:09,660 --> 00:00:10,140
Eclipse.

4
00:00:10,140 --> 00:00:15,600
And so far we've seen how to do it for Eclipse projects, right?

5
00:00:15,600 --> 00:00:20,760
The projects, the Java projects that you create inside the Eclipse ID and we said that the way Eclipse

6
00:00:20,760 --> 00:00:26,910
manages its projects is that it compiles the Java source files and put them in the Bing directory so

7
00:00:26,910 --> 00:00:34,410
you can set the being the being directory of your current project to the basically as the workspace

8
00:00:34,800 --> 00:00:37,320
working directory when you run the native image.

9
00:00:37,320 --> 00:00:42,660
And we said that a better approach is actually to set the working directory to the project location

10
00:00:42,660 --> 00:00:49,860
and explicitly provide the hyphen f argument for the native image, the class path.

11
00:00:49,860 --> 00:00:57,570
And then we said that you have to use the project class path environment variable, which is very important

12
00:00:59,100 --> 00:01:05,910
and the eclipse already is aware of all the dependencies on your for your Java project, every directory

13
00:01:05,910 --> 00:01:07,290
that is inside the class path.

14
00:01:07,890 --> 00:01:08,190
All right.

15
00:01:08,190 --> 00:01:10,230
Now with Maven, similar thing.

16
00:01:10,230 --> 00:01:14,910
You go you open an external tool configuration, you click on this new button, you give it a name,

17
00:01:14,910 --> 00:01:22,440
let's say native image maven and you point it to again contents home lieb svn substrate vm being directory

18
00:01:22,440 --> 00:01:29,160
and in native image remember native image doesn't come by default with the crawl VM, you have to install

19
00:01:29,160 --> 00:01:32,280
it separately and then the working directory.

20
00:01:32,280 --> 00:01:37,800
So Maven compiles and then puts the stuff all the classes into the target classes.

21
00:01:37,800 --> 00:01:45,090
So instead of the being directory you can point it to the classes directory, target classes inside

22
00:01:45,090 --> 00:01:45,720
the project.

23
00:01:45,720 --> 00:01:49,080
So what I'm doing here, there are different ways obviously to set this up.

24
00:01:49,380 --> 00:01:50,280
Let's go back here.

25
00:01:50,280 --> 00:01:51,120
Let's zoom in.

26
00:01:51,120 --> 00:01:58,290
One is to use the workspace, location, environment variable, internal variable and give it an argument,

27
00:01:58,290 --> 00:02:00,990
a relative path, which is project name.

28
00:02:00,990 --> 00:02:03,720
And then for a slash target for slash classes.

29
00:02:03,720 --> 00:02:09,090
And we know that if you use call in and some argument, it's actually the argument for this internal

30
00:02:09,090 --> 00:02:12,390
variables and workspace location can accept arguments.

31
00:02:12,390 --> 00:02:18,180
And what it does is you provide a relative path to the workspace and this whole string will be substituted.

32
00:02:18,180 --> 00:02:24,480
So we saw it here, workspace, location, this internal variable can accept an argument, right?

33
00:02:24,480 --> 00:02:32,910
And this argument is the relative path to your directory from the workspace, the root of your workspace,

34
00:02:32,910 --> 00:02:33,660
right from the worker.

35
00:02:33,660 --> 00:02:41,070
So you can just look at the tree view in the eclipse ID and then figure out quickly what this relative

36
00:02:41,070 --> 00:02:41,640
passes.

37
00:02:41,640 --> 00:02:45,330
And then the workspace location eclipse already knows that, right?

38
00:02:47,070 --> 00:02:52,050
And so you can put the work in directly to the class's target classes.

39
00:02:52,050 --> 00:02:54,060
And then the same thing Java type name.

40
00:02:54,060 --> 00:02:59,490
This returns the fully qualified name of the class file and then the output, the name of the binary.

41
00:02:59,490 --> 00:03:04,080
And then you can it can only be a name or a path to a file, right?

42
00:03:04,650 --> 00:03:11,160
Previously we said the dot, dot forward slash and 84 slash project name, which means after you compile

43
00:03:11,160 --> 00:03:14,220
it, go one level up from the working directory.

44
00:03:14,310 --> 00:03:18,360
Basically it goes in the project location and then goes into the native directory.

45
00:03:18,390 --> 00:03:23,490
This directory called Native, which is in the project location and then creates a executable file called

46
00:03:23,490 --> 00:03:28,770
Project Name, whatever the name of the project is or the name of the class Java type name, etc..

47
00:03:29,520 --> 00:03:30,920
So the same story here.

48
00:03:30,930 --> 00:03:37,710
So again with Maven, it compiles it and it puts the classes, all the packages and all the classifiers

49
00:03:37,710 --> 00:03:39,900
inside a directory called target classes.

50
00:03:39,900 --> 00:03:42,000
It clips, it puts them in the Bing directory.

51
00:03:42,210 --> 00:03:50,310
And then basically when you specify an output file name or an output path to a file, it puts the binary

52
00:03:50,310 --> 00:03:51,150
into working direct.

53
00:03:51,150 --> 00:03:58,950
So if you don't specify this output, it just puts the working directory, basically the executable

54
00:03:58,950 --> 00:04:01,950
file after compiler and puts it inside the working directory.

55
00:04:02,880 --> 00:04:09,900
You can specify absolute path through here to some file and then after the compilation, that file is

56
00:04:09,900 --> 00:04:13,020
generated inside whatever path that you give it.

57
00:04:13,200 --> 00:04:15,930
So let's head to a list and try to create a Maven project.

58
00:04:16,890 --> 00:04:20,070
So this is our previous Java project.

59
00:04:20,070 --> 00:04:25,920
This is an Eclipse project, this is not a Maven project, which means the build system is the internal

60
00:04:25,920 --> 00:04:27,870
build system of eclipse.

61
00:04:27,870 --> 00:04:28,410
Right.

62
00:04:28,590 --> 00:04:34,020
And we know that what it means is that eclipse creates a bean directory inside your the root of your

63
00:04:34,020 --> 00:04:38,790
Java project and then mirrors whatever you have in the Z in the being directory.

64
00:04:38,790 --> 00:04:45,030
Right, all the packages etc. and we select any directory that is not marked as a package is not recognized

65
00:04:45,030 --> 00:04:46,590
by eclipse IDE as a package.

66
00:04:46,590 --> 00:04:48,900
It's not going to be inside the being directory.

67
00:04:50,000 --> 00:04:53,030
Now what we want to do, we want to create a maven directory.

68
00:04:53,030 --> 00:04:55,370
So we're going to go to order.

69
00:04:55,370 --> 00:05:00,830
And then inside the maven we're going to say a MAVEN project.

70
00:05:01,700 --> 00:05:06,650
And we're going to tell it, create a simple project and put it in there.

71
00:05:06,650 --> 00:05:13,480
Whatever the workspace location is, let's add it to the working set, our working sets.

72
00:05:13,880 --> 00:05:19,280
I believe it's called Native Image Advanced Resolved Workspace Projects.

73
00:05:19,280 --> 00:05:20,870
For now, we're going to ignore it.

74
00:05:20,900 --> 00:05:36,380
Group ID, Java Dot Native dot image and in artifact ID Native Image Demo Versioning.

75
00:05:36,380 --> 00:05:39,470
Let's start with 1.0 as snapshot packaging.

76
00:05:39,470 --> 00:05:42,740
We're going to add jar the name description.

77
00:05:42,740 --> 00:05:44,660
Let's leave this open.

78
00:05:44,960 --> 00:05:48,380
We don't want and resolve resolved workspace projects.

79
00:05:48,380 --> 00:05:50,660
We don't need to worry about that now and finish.

80
00:05:51,740 --> 00:05:57,800
So this is going to create a maven and you see the difference between obviously there are some differences

81
00:05:57,800 --> 00:06:01,970
between a Java project, a project that is managed by Eclipse, right?

82
00:06:01,970 --> 00:06:08,120
The build system is Eclipse and whatever is managed by Maven, obviously the directory hierarchy is

83
00:06:08,120 --> 00:06:08,600
different.

84
00:06:08,600 --> 00:06:15,110
Here we have a CRC and your packages, here we have CRC, main Java and then you add your packages here.

85
00:06:15,200 --> 00:06:19,070
So it's the main resources CRC test, Java Z test resources.

86
00:06:19,370 --> 00:06:25,190
And then it also shows you the obviously the Z directory here and this is target and target for now

87
00:06:25,190 --> 00:06:26,090
it's empty.

88
00:06:26,090 --> 00:06:35,150
And in the route of your Maven project, you have this pom pom file which basically tells the maven

89
00:06:35,810 --> 00:06:36,500
what to do.

90
00:06:36,680 --> 00:06:42,200
So if you're not familiar with Maven, I recommend just try to maybe Google it and understand what Maven

91
00:06:42,200 --> 00:06:42,350
is.

92
00:06:42,350 --> 00:06:48,410
And basically Maven is a build system and it doesn't have a Java compiler or anything, right?

93
00:06:48,410 --> 00:06:53,510
It relies on whatever Java or Java C you have on your path.

94
00:06:53,510 --> 00:07:00,890
So which Java C basically it relies on the JDK that comes with your that is installed and recognized

95
00:07:00,890 --> 00:07:02,120
by your operating system.

96
00:07:02,150 --> 00:07:11,330
MAVEN is just a tool that uses the JDK to build your application, and the beauty of Maven is that it's

97
00:07:11,330 --> 00:07:13,790
independent of which IDE you use.

98
00:07:14,540 --> 00:07:21,650
Now the problem with the internal build system of the is like Eclipse or other IDs is that each IDE

99
00:07:21,680 --> 00:07:27,380
has its own build system like the directory hierarchy, the class path entries and how they manage.

100
00:07:27,380 --> 00:07:33,050
We know that for example, Eclipse creates a dot project dot setting.

101
00:07:33,050 --> 00:07:38,960
So if I open up a directory here, you see we have this dot setting.

102
00:07:38,960 --> 00:07:43,130
These are the settings that are related to the eclipse dot class path.

103
00:07:43,130 --> 00:07:45,860
This is only something that Eclipse IDE understands.

104
00:07:45,860 --> 00:07:51,770
If you try to open this Eclipse project in another IDE, they probably won't understand it.

105
00:07:51,770 --> 00:07:52,940
Same with the DOT project.

106
00:07:52,940 --> 00:07:56,030
This is something that only Eclipse IDE understands.

107
00:07:56,030 --> 00:07:57,440
So transforming.

108
00:07:57,440 --> 00:08:04,490
Or if you create a java project with one IDE and give the source code to another one, if they try to

109
00:08:04,490 --> 00:08:09,860
import it in another IDE, they most likely are not going to be successful in the first try.

110
00:08:10,070 --> 00:08:14,240
But that's not true with Maven because MAVEN is an external build system.

111
00:08:14,960 --> 00:08:21,230
Now IDs have support for it, which means IDs can figure out which MAVEN is installed on your computer,

112
00:08:21,230 --> 00:08:27,980
and then they just can use that maven to build your application, write your Java project and the beauty

113
00:08:27,980 --> 00:08:29,930
said Maven is independent of IDs.

114
00:08:29,930 --> 00:08:36,170
Maven is something that you separately install on your computer and IDs can use that, right?

115
00:08:36,170 --> 00:08:41,180
So if you have a Maven project, you can always import it in any ID and your ID.

116
00:08:41,210 --> 00:08:44,330
Obviously, most of the IDs these days, they have support with MAVEN.

117
00:08:44,330 --> 00:08:49,880
They have built in support so they can use Maven to build your project and therefore you don't get any

118
00:08:49,910 --> 00:08:55,370
headache of the fact that one project from one IDE is not compatible with another.

119
00:08:55,370 --> 00:09:01,430
Now Maven has obviously one more advantage, which is the main advantage, and that's dependency management.

120
00:09:01,670 --> 00:09:03,860
MAVEN has online repositories.

121
00:09:03,860 --> 00:09:09,290
You can specify a dependency on a JAR file, and Maven can go and search into online repositories.

122
00:09:09,290 --> 00:09:16,220
And if it finds it, then it can download the jar file and add it to your class path fully, automatically.

123
00:09:16,220 --> 00:09:22,190
And usually IDs like Eclipse have a nice graphical view of what's going on, what Maven is doing.

124
00:09:23,150 --> 00:09:27,590
So I have installed Maven on my computer, Apache Maven 385.

125
00:09:27,590 --> 00:09:34,040
Let's quickly open up a browser and see what is the latest version of Maven.

126
00:09:34,040 --> 00:09:39,170
So let's say download Maven download Apache Maven.

127
00:09:39,170 --> 00:09:48,770
Maven is a project organized by maintained by Apache organization and the latest version is 385, which

128
00:09:48,770 --> 00:09:49,790
I have it here.

129
00:09:50,030 --> 00:09:58,160
And as you can see, my maven home is user local maven 3856 because I'm using the home brew to manage

130
00:09:58,160 --> 00:09:59,060
my maven.

131
00:09:59,150 --> 00:10:01,160
Whenever there is an update, I use Brute.

132
00:10:01,240 --> 00:10:07,750
To update my maven and just and then the JDK, you see Maven doesn't come with the JDK, but when you

133
00:10:07,750 --> 00:10:14,170
look at the hyphen hyphen version, it also picks up on whatever JDK that is on your path environment

134
00:10:14,170 --> 00:10:14,560
variable.

135
00:10:14,560 --> 00:10:22,020
So and it also recognizes Java home environment variable, which I have already set up Java home.

136
00:10:22,780 --> 00:10:28,090
So basically it also searches and you can also define another variable called Maven home.

137
00:10:28,450 --> 00:10:31,840
So Maven underscore home.

138
00:10:31,870 --> 00:10:36,070
You can also define that, basically pass it to this address.

139
00:10:36,850 --> 00:10:37,420
All right.

140
00:10:38,350 --> 00:10:42,550
And yeah, so again, Maven is a Bell tool.

141
00:10:42,580 --> 00:10:44,890
Maven understands how to build your system.

142
00:10:44,890 --> 00:10:50,050
You put your source files in the directory that Maven understands or expects, and then Maven calls

143
00:10:50,050 --> 00:10:52,330
the cause the.

144
00:10:53,880 --> 00:11:00,600
Basically Java C, the java compiler manages your dependencies, make sure everything is on the class

145
00:11:00,600 --> 00:11:00,930
path.

146
00:11:00,930 --> 00:11:02,610
All the dependencies are available.

147
00:11:02,640 --> 00:11:04,290
So let's create a new package.

148
00:11:05,460 --> 00:11:06,960
It's called Java.

149
00:11:07,050 --> 00:11:07,740
Underscore.

150
00:11:07,740 --> 00:11:08,620
Native, underscore.

151
00:11:08,640 --> 00:11:09,270
Image.

152
00:11:09,810 --> 00:11:13,980
And I'm just going to copy and paste that test class that we had.

153
00:11:14,810 --> 00:11:15,410
All right.

154
00:11:18,230 --> 00:11:22,910
So we're getting an error because we don't have that dependency on the other projects.

155
00:11:22,910 --> 00:11:24,980
So for now, I'm going to leave it.

156
00:11:24,980 --> 00:11:30,830
I will show you how to add dependencies, internal dependencies, but for now we're just printing something

157
00:11:30,830 --> 00:11:31,490
to the console.

158
00:11:31,490 --> 00:11:38,480
Hello from Java and external tool in a MAVEN project.

159
00:11:38,480 --> 00:11:39,020
Right.

160
00:11:39,980 --> 00:11:40,610
All right.

161
00:11:40,610 --> 00:11:41,720
So everything is said.

162
00:11:41,720 --> 00:11:48,620
So we develop our Java code, we put our packages and all the Java classes, source files inside the

163
00:11:48,650 --> 00:11:56,330
SRC, main Java, if we have any resources, extra files, something like a text file or anything CSV

164
00:11:56,330 --> 00:12:00,620
file that our Java project requires, we put them in the Z main resources.

165
00:12:01,620 --> 00:12:05,310
And then what we want to do right now, the target directory is empty, right?

166
00:12:05,310 --> 00:12:11,940
So if I open it up because actually what happens this integration or actually it's not empty.

167
00:12:11,940 --> 00:12:21,990
So the reason is that the way that Eclipse ID supports MAVEN projects is that it uses Eclipse compiler

168
00:12:22,080 --> 00:12:29,460
to compile the Java files, but it recognizes that Maven in MAVEN, all the class files has to be in

169
00:12:29,460 --> 00:12:30,210
the target.

170
00:12:30,450 --> 00:12:36,930
So right now this let me hide up the hidden files.

171
00:12:36,930 --> 00:12:45,660
We have this target eclipse compiled this class file using its internal compiler and then it creates

172
00:12:45,660 --> 00:12:47,640
the package hierarchy inside the classes.

173
00:12:47,640 --> 00:12:47,940
Right.

174
00:12:47,940 --> 00:12:50,970
That's how this ID eclipse supports MAVEN projects.

175
00:12:50,970 --> 00:12:56,640
It recognizes where to put the packages and then the the class files.

176
00:12:56,640 --> 00:12:57,150
Right.

177
00:12:57,150 --> 00:12:59,280
But in general, you don't need to do that.

178
00:12:59,280 --> 00:13:04,320
Some IDs don't use their internal compiler to compile the MAVEN project.

179
00:13:04,500 --> 00:13:11,220
So what you can do when you have a MAVEN project, if you right click go to the run as not only we have

180
00:13:11,220 --> 00:13:13,980
Java application, but we have Maven build, right?

181
00:13:15,070 --> 00:13:21,130
So and then now you can execute MAVEN commands and those commands are passed to the MAVEN tool that

182
00:13:21,130 --> 00:13:23,170
is installed on your computer right now.

183
00:13:23,170 --> 00:13:25,570
It says embedded 3.8.1.

184
00:13:25,570 --> 00:13:27,940
I don't want to use the embedded that comes with eclipse.

185
00:13:27,940 --> 00:13:29,320
I want to use my external.

186
00:13:29,830 --> 00:13:36,970
And the external is let's edit is 385 is the latest version.

187
00:13:38,620 --> 00:13:40,090
All right, finish, apply.

188
00:13:40,090 --> 00:13:41,890
And now it works fine.

189
00:13:41,890 --> 00:13:47,500
So we want to by default, we want to use the external maven tool that I have separately installed my

190
00:13:47,500 --> 00:13:49,630
on my computer because that's the latest version.

191
00:13:50,830 --> 00:13:52,530
And let's hit apply.

192
00:13:52,540 --> 00:13:53,710
Let's say we want to clean it.

193
00:13:53,710 --> 00:14:00,160
When you execute Maven Clean Command, it's going to clean delete all everything that is inside the

194
00:14:00,160 --> 00:14:01,090
target directory.

195
00:14:01,090 --> 00:14:03,130
So let's run this and.

196
00:14:05,140 --> 00:14:15,010
And what you see here is that it's running the native image demo maven clean plugin, deleting everything

197
00:14:15,010 --> 00:14:15,850
inside the target.

198
00:14:15,850 --> 00:14:17,890
So if I open up the target again.

199
00:14:19,980 --> 00:14:21,670
Now these classes is empty.

200
00:14:21,690 --> 00:14:25,700
We deleted the automatic compilation that Eclipse had done.

201
00:14:25,710 --> 00:14:26,190
Right.

202
00:14:26,340 --> 00:14:27,810
So if I run this.

203
00:14:29,130 --> 00:14:30,360
It's not going to.

204
00:14:30,450 --> 00:14:32,310
There is no class in here.

205
00:14:32,310 --> 00:14:35,520
So therefore there is no eclipse.

206
00:14:35,520 --> 00:14:37,830
Cannot execute it.

207
00:14:37,830 --> 00:14:42,870
If I make some changes and save it, Eclipse is most likely is going to recompile.

208
00:14:43,200 --> 00:14:46,620
So classes now eclipse it quickly recompiled.

209
00:14:46,620 --> 00:14:49,230
And then the test class is available.

210
00:14:49,230 --> 00:14:53,670
And now if I right click and run it, it works, right?

211
00:14:53,670 --> 00:14:57,180
So basically eclipse every idea has its own internal compiler.

212
00:14:57,180 --> 00:15:03,750
I mean some ideas might not but most modern ideas like Eclipse or intelligent, they have their own

213
00:15:03,750 --> 00:15:06,360
internal compiler, at least Eclipse does.

214
00:15:06,720 --> 00:15:15,090
And when they support a Maven project, basically Eclipse by default uses its own internal build but

215
00:15:15,090 --> 00:15:18,000
puts it in where it's compatible with the maven.

216
00:15:18,000 --> 00:15:18,270
Right.

217
00:15:18,270 --> 00:15:21,570
It understands that this project has a maven nature.

218
00:15:22,020 --> 00:15:29,430
And one thing here is that if you see it right now, the compatibility it sets up, it's using JDK 17,

219
00:15:29,430 --> 00:15:37,830
but the competitive compatibility is sets up to JDK five, which means I cannot say war as is Hello.

220
00:15:38,490 --> 00:15:47,310
Now Eclipse says that remember the JDK is JDK 17, but the compatibility is by default with MAVEN projects

221
00:15:47,310 --> 00:15:49,310
inside Eclipse is set to JDK five.

222
00:15:49,560 --> 00:15:52,770
That's why Eclipse is giving giving us a warning, right?

223
00:15:53,250 --> 00:15:58,380
So it says change project compliance, compliance and go to ten so we can do that.

224
00:16:01,600 --> 00:16:06,610
And now the compliance is set to JDK ten, but I want to set it to JDK 17.

225
00:16:06,610 --> 00:16:07,630
So how do we do that?

226
00:16:08,320 --> 00:16:13,090
So we just go here and select JDK 17, and now this works.

227
00:16:14,940 --> 00:16:16,230
She sold eggs.

228
00:16:17,640 --> 00:16:19,050
And let's run this.

229
00:16:20,220 --> 00:16:21,390
It works fine, right?

230
00:16:21,390 --> 00:16:28,180
And if we do a six out run time dot version, remember, Virgin is a static method.

231
00:16:28,200 --> 00:16:30,600
It tells me which JVM it's running on.

232
00:16:30,600 --> 00:16:31,910
It's running on 17.

233
00:16:31,920 --> 00:16:32,430
All right.

234
00:16:32,670 --> 00:16:41,460
But now let's say instead of using Eclipse, I want to use Maven to build my project.

235
00:16:41,460 --> 00:16:46,200
So what I'm going to do, I'm going to right click on my project, run as Maven Build, and I'm going

236
00:16:46,200 --> 00:16:52,530
to tell you to clean and then compile supply run.

237
00:16:55,720 --> 00:16:56,620
So it failed.

238
00:16:56,620 --> 00:17:02,460
So I cleaned up, empty this directory and it failed.

239
00:17:02,470 --> 00:17:05,240
So why did it fail?

240
00:17:05,260 --> 00:17:06,370
Because.

241
00:17:07,240 --> 00:17:08,160
So it cleaned.

242
00:17:08,170 --> 00:17:18,730
It used a clean plugin, and then it used the compiler plugin and then compiling this one source file.

243
00:17:18,730 --> 00:17:22,810
And then source option five is no longer supported.

244
00:17:22,810 --> 00:17:31,270
Use seven or later build failed failed to execute the compiler on project is it says use seven or later.

245
00:17:31,270 --> 00:17:34,270
So why is it that we already set the compliance to 17?

246
00:17:34,270 --> 00:17:38,440
That's because MAVEN doesn't care, doesn't understand Eclipse projects.

247
00:17:38,440 --> 00:17:44,800
Maven only understands pom or pom file, so you have to give it properties a

248
00:17:47,020 --> 00:17:48,310
compiler,

249
00:17:51,520 --> 00:17:56,890
I guess it's maven dot compiler, dot source, let's say 17.

250
00:17:59,670 --> 00:18:03,270
And in May when the compiler target 17.

251
00:18:04,380 --> 00:18:09,750
If we save these and then try to rerun that command again.

252
00:18:10,560 --> 00:18:14,220
Maven build, clean, compile.

253
00:18:14,250 --> 00:18:15,600
Let's see if this works.

254
00:18:17,630 --> 00:18:19,080
Now build successful.

255
00:18:19,100 --> 00:18:26,000
So basically again, Maven, when you run the build your Maven projects inside Eclipse with the external

256
00:18:26,000 --> 00:18:31,580
maven build, it doesn't understand the Eclipse project or anything.

257
00:18:31,580 --> 00:18:36,740
It just looks at the point file, looks at the configurations and then executes those.

258
00:18:37,040 --> 00:18:38,630
There are some dependencies here.

259
00:18:38,630 --> 00:18:42,740
We will talk about them later and then you can also look at the file.

260
00:18:42,740 --> 00:18:43,220
Right?

261
00:18:43,220 --> 00:18:45,050
So these properties.

262
00:18:45,290 --> 00:18:46,310
Maven compiler.

263
00:18:46,310 --> 00:18:46,790
Source.

264
00:18:46,790 --> 00:18:47,600
Maven compiler.

265
00:18:47,600 --> 00:18:48,140
Target.

266
00:18:49,360 --> 00:18:49,660
Again.

267
00:18:49,660 --> 00:18:54,730
These are a quick tutorial about Maven and how it works.

268
00:18:54,730 --> 00:18:56,920
And inside the Eclipse idea.

269
00:18:56,950 --> 00:19:02,830
Again, Eclipse uses its own internal compiler but puts the classifiers at the correct location.

270
00:19:03,190 --> 00:19:08,260
Now let's say we want to build an external tool for Maven, and I've already set something up here.

271
00:19:08,740 --> 00:19:17,530
Let's go back and use the most recent version of the LLVM 22.1 contents home.

272
00:19:18,600 --> 00:19:19,570
Uh lib.

273
00:19:19,710 --> 00:19:23,520
SVM and then being directory native image.

274
00:19:23,520 --> 00:19:29,910
This is the most latest version 20 2.1.0 and I'm setting this to project location target classes.

275
00:19:30,690 --> 00:19:30,960
All right.

276
00:19:30,960 --> 00:19:36,810
Working directory and I want to select a Java file in my.

277
00:19:39,130 --> 00:19:42,070
In my tree view inside eclipse.

278
00:19:42,070 --> 00:19:48,610
And then I want the native image to basically or the eclipse to pass the classified fully qualified

279
00:19:48,610 --> 00:19:50,230
name of the class file to that.

280
00:19:50,410 --> 00:19:56,500
And then I'm telling you to remember we are inside the working classes, so I want to go back up to

281
00:19:56,500 --> 00:19:57,400
the project location.

282
00:19:57,400 --> 00:20:03,850
So to level up dot, dot, dot, dot and I want to go inside a native directory and then create the

283
00:20:03,850 --> 00:20:05,320
executable file there.

284
00:20:06,680 --> 00:20:09,350
So let's apply and let's close.

285
00:20:09,350 --> 00:20:17,330
So we want to create a directory which is not part of the MAVEN project, let's call it native, and

286
00:20:17,330 --> 00:20:19,730
then we're going to select our source file.

287
00:20:20,650 --> 00:20:25,450
And we're going to select our native MH 17 maven and running.

288
00:20:27,550 --> 00:20:28,570
Let's see if this works.

289
00:20:28,570 --> 00:20:28,890
Fine.

290
00:20:28,900 --> 00:20:36,470
So right now, a native image tells us, hey, I'm a, I'm building this, uh, java native image test

291
00:20:36,490 --> 00:20:37,300
class.

292
00:20:39,120 --> 00:20:40,680
So initializing.

293
00:20:46,260 --> 00:20:49,770
Building universe parsing methods in lining methods.

294
00:20:57,710 --> 00:20:59,210
Compiling methods.

295
00:21:00,920 --> 00:21:03,140
And success, right?

296
00:21:03,140 --> 00:21:07,970
So it puts it in the native image demo, native Java and Native Image.

297
00:21:07,970 --> 00:21:11,320
And if you look at our native, we do have a.

298
00:21:13,130 --> 00:21:15,500
We do have a target.

299
00:21:15,500 --> 00:21:16,310
So.

300
00:21:18,560 --> 00:21:25,820
So if you open up a terminal here in this native and if we say Java native test class, it's going to

301
00:21:25,820 --> 00:21:26,150
work.

302
00:21:26,150 --> 00:21:28,610
Hello world from Java.

303
00:21:28,640 --> 00:21:31,970
A Hello World from Java an external tool in Maven project.

304
00:21:31,970 --> 00:21:32,690
Hello.

305
00:21:32,990 --> 00:21:34,220
Is this a string.

306
00:21:34,220 --> 00:21:37,820
And then 11 three JVM psi.

307
00:21:37,850 --> 00:21:47,540
So this is running on top of the compact JVM that has been compiled to native binaries.

308
00:21:47,540 --> 00:21:48,050
Right.

309
00:21:49,430 --> 00:21:57,980
So right now our external tool is successful for running basically maven compiling and MAVEN prices.

310
00:21:57,980 --> 00:21:59,600
You have to point it to the classes.

311
00:21:59,600 --> 00:22:07,820
Now, alternatively, as we mentioned, we can duplicate these and set it to project location and then

312
00:22:08,330 --> 00:22:14,090
manually provide the hyphen P and then a project class path.

313
00:22:14,840 --> 00:22:19,590
Because even though this is a Maven, Project Eclipse is aware this is inside Eclipse.

314
00:22:19,590 --> 00:22:22,040
So Eclipse is aware of the project class path.

315
00:22:23,760 --> 00:22:29,190
All right, so let's rename this or maybe let's copy and paste this to another name.

316
00:22:31,160 --> 00:22:31,390
Um.

317
00:22:31,550 --> 00:22:34,190
Uh, demo class.

318
00:22:36,310 --> 00:22:36,700
All right.

319
00:22:36,700 --> 00:22:39,150
So and then we're going to select this.

320
00:22:39,160 --> 00:22:43,130
We're going to run our external tool, which we just duplicated.

321
00:22:43,150 --> 00:22:48,490
Now the class path is explicitly set, so let's run these, see if this is successful or not.

322
00:22:49,950 --> 00:22:50,610
Google VM.

323
00:22:50,610 --> 00:22:52,920
Native Image generating java.

324
00:22:52,920 --> 00:22:53,610
Native Image.

325
00:22:53,730 --> 00:22:54,990
Demo class.

326
00:22:55,110 --> 00:22:56,640
Initializing.

327
00:23:03,010 --> 00:23:04,320
So let's wait a little bit.

328
00:23:04,330 --> 00:23:06,330
Let's see if everything goes fine.

329
00:23:06,340 --> 00:23:08,350
Performance analysis done.

330
00:23:09,370 --> 00:23:10,990
Building universes.

331
00:23:15,310 --> 00:23:16,690
In lining methods.

332
00:23:19,210 --> 00:23:20,650
Compiling methods.

333
00:23:21,570 --> 00:23:22,860
And it failed.

334
00:23:25,740 --> 00:23:28,170
So there was an arrow linking the native image.

335
00:23:28,170 --> 00:23:29,070
So it says.

336
00:23:30,700 --> 00:23:33,220
There was some error going on.

337
00:23:35,500 --> 00:23:36,400
Oh, that's okay.

338
00:23:36,430 --> 00:23:37,990
That's because.

339
00:23:37,990 --> 00:23:39,090
So we made a mistake.

340
00:23:39,100 --> 00:23:43,180
The mistake we made was we actually changed the working directory.

341
00:23:43,180 --> 00:23:48,370
And the problem is that when it was in the linking phase is when after compilation it tries to build

342
00:23:48,370 --> 00:23:49,420
the final binary.

343
00:23:49,420 --> 00:23:52,240
But this path was not correct so it couldn't find this native.

344
00:23:52,570 --> 00:23:58,060
So in the project location we just have to tell it dot from the current working directory which is project

345
00:23:58,060 --> 00:24:01,270
location and go inside the native and create a binary.

346
00:24:02,560 --> 00:24:04,360
You know, that was a mistake.

347
00:24:04,690 --> 00:24:06,790
So let's run this one more time.

348
00:24:13,950 --> 00:24:21,150
So this directory exists because the Native Image Command is running from the root directory of the

349
00:24:21,150 --> 00:24:23,960
Java of this Maven project native image demo.

350
00:24:23,970 --> 00:24:26,070
So the native directory is directly there.

351
00:24:26,070 --> 00:24:32,730
So when the linker creates the executable, it's able to find this native directory and puts the executable

352
00:24:32,730 --> 00:24:33,360
file there.

353
00:24:37,010 --> 00:24:40,820
All right in lining methods, it's almost done compiling.

354
00:24:40,820 --> 00:24:46,340
And after that, the linker creates the executable file and everything went well.

355
00:24:47,470 --> 00:24:49,000
So we have this.

356
00:24:49,180 --> 00:24:51,550
We already had a terminal open here.

357
00:24:51,550 --> 00:24:57,190
So let's see Java, native image and then demo class and it works fine.

358
00:24:57,190 --> 00:24:57,670
All right.

359
00:24:57,670 --> 00:25:02,380
So we were able to successfully create an external tool for MAVEN project.

360
00:25:02,560 --> 00:25:10,450
Just note that the the most important thing about MAVEN is dependency management.

361
00:25:10,450 --> 00:25:14,590
And Maven provides a very nice and easy way to manage all your dependencies.

362
00:25:14,590 --> 00:25:23,740
And then and then the eclipse ID when you have this maven project inside the eclipse ID, it already

363
00:25:23,740 --> 00:25:27,190
is aware of all the dependencies.

364
00:25:27,250 --> 00:25:33,640
Therefore, it's very easy to set up this shell command so that all the dependencies are there, right?

365
00:25:33,640 --> 00:25:39,220
So in the in the next lecture, I will actually use Maven to add dependencies to this project and then

366
00:25:39,220 --> 00:25:40,480
we will see what happens.

367
00:25:40,480 --> 00:25:44,470
And the nice thing about this configuration of the external tool.

368
00:25:45,360 --> 00:25:54,540
Which we manually ask the eclipse ID to provide, basically substitute this variable project class but

369
00:25:54,570 --> 00:25:56,940
with all actual class path entries.

370
00:25:56,940 --> 00:26:02,970
And therefore we don't really need to change anything even if we add lots of dependencies to this project.

371
00:26:03,150 --> 00:26:05,910
So please stay tuned and I'll see in the next one.
