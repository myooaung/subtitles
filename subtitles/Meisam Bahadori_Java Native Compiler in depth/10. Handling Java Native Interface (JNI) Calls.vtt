WEBVTT
1
00:00:01.260 --> 00:00:04.620
Hello and welcome to another Java tutorial.

2
00:00:04.620 --> 00:00:10.620
We're going to continue our discussion on the native image and then we're going to look at the most

3
00:00:10.620 --> 00:00:15.210
important topic about native image, which is generally Java, Native interface.

4
00:00:15.210 --> 00:00:23.010
How do we if we are going to compile a job application to native executable binaries so that we gain

5
00:00:23.010 --> 00:00:29.670
the convenience of Java development, but then we gained speed of C++ applications.

6
00:00:29.670 --> 00:00:34.800
How do we what do we do when we have some native cards in our Java application?

7
00:00:34.800 --> 00:00:40.350
You know that classes in Java, they can have methods that are declared as native.

8
00:00:40.350 --> 00:00:42.300
So native is a keyword in Java.

9
00:00:42.300 --> 00:00:48.870
When you use it on a method, it means you're not going to define any body for that particular method.

10
00:00:48.870 --> 00:00:55.920
And at runtime, JVM realizes that it has to look for the code that is associated with that native method

11
00:00:55.920 --> 00:01:00.770
in a C++ or a basically a binary file, a dynamic file, right?

12
00:01:00.780 --> 00:01:07.890
And JVM has a method or a mechanism to load the extra binaries that are code that can be associated

13
00:01:07.890 --> 00:01:11.400
with the native method in Java and they are from the system again.

14
00:01:11.400 --> 00:01:15.240
Remember, whenever we talk about JVM in Java, it means system.

15
00:01:15.240 --> 00:01:24.570
So JVM is equivalent is equivalent to system class.

16
00:01:24.570 --> 00:01:27.150
Or there is another one called runtime, right?

17
00:01:27.180 --> 00:01:32.550
Runtime class and for example, system that load is more or less a delegates.

18
00:01:32.550 --> 00:01:34.710
These call to the runtime, right?

19
00:01:34.710 --> 00:01:39.870
So system load you give it an absolute path to a dynamic library obviously.

20
00:01:39.870 --> 00:01:42.540
Then that dynamic library is platform dependent.

21
00:01:42.540 --> 00:01:50.940
You could compile that binary for the Mac OS Intel CPU or another arm CPU on a different platform,

22
00:01:50.940 --> 00:01:52.080
let's say Linux, etc..

23
00:01:52.080 --> 00:01:52.560
Right.

24
00:01:52.560 --> 00:01:57.210
So you lose whenever you have JNI calls or native calls in a Java application.

25
00:01:57.210 --> 00:02:04.560
AVC You you use you lose some of the platform independence benefits that Java provides.

26
00:02:04.560 --> 00:02:09.090
However, there are ways to ensure that your code works on various platforms.

27
00:02:09.090 --> 00:02:14.970
And the way you do it is you write your native part of your job application, compile it on different

28
00:02:14.970 --> 00:02:19.350
platforms, and then embed all the binaries in your jar file.

29
00:02:19.350 --> 00:02:25.020
If you want to distribute your application as a Java file and then whoever runs it at runtime, you

30
00:02:25.680 --> 00:02:27.150
check what the platform is.

31
00:02:27.150 --> 00:02:34.710
And again, Java provides mechanisms or classes that you can use to check the operating system.

32
00:02:34.710 --> 00:02:35.220
Right.

33
00:02:37.470 --> 00:02:43.050
And at runtime you can decide which dynamic library, which native library to load.

34
00:02:43.350 --> 00:02:46.680
So our Java application may require calls to native libraries.

35
00:02:46.890 --> 00:02:51.030
We can use JNI Java Native interface to call C++ libraries.

36
00:02:51.060 --> 00:02:56.790
Obviously JNI was very or is very old in the sense that it was developed early on.

37
00:02:56.790 --> 00:03:00.870
I think it was developed for JDK four or something like that.

38
00:03:00.900 --> 00:03:06.810
If you're not familiar with what JNI is and how powerful it is, I have a full course called Java Native

39
00:03:07.710 --> 00:03:09.260
Interface in depth.

40
00:03:09.270 --> 00:03:13.260
I definitely highly recommend you go and check it out on Udemy.

41
00:03:14.250 --> 00:03:21.900
I also have all the lectures as free videos or tutorials on YouTube so you can watch them.

42
00:03:22.830 --> 00:03:27.720
So the idea is that let's say let's start with a very simple example, right?

43
00:03:27.720 --> 00:03:33.930
We have a hello world class and then it has a native method called say hi.

44
00:03:33.930 --> 00:03:37.980
And then again this say hi is let's say a static method.

45
00:03:37.980 --> 00:03:43.530
It's what we declared as native, which means just like an abstract method, you don't provide anybody,

46
00:03:43.530 --> 00:03:45.120
not even an empty body, right?

47
00:03:45.120 --> 00:03:48.240
So just no body terminated immediately with semicolon.

48
00:03:48.240 --> 00:03:59.130
And then at runtime, JVM tries to look for a basically a binary file, a dynamic file so that it has

49
00:03:59.130 --> 00:04:02.310
the actual implementation of this method in that binary file.

50
00:04:02.310 --> 00:04:09.360
And obviously there is a mechanism that associated this method to a binary in C++ and that's what the

51
00:04:09.360 --> 00:04:11.310
G interface is doing, right?

52
00:04:11.310 --> 00:04:16.710
It's a foreign function interface, FFI, which Java calls JNI, Java Native interface.

53
00:04:17.070 --> 00:04:22.980
So you have your class, it has a native method, you compile it, and then you can pass a hyphen edge

54
00:04:23.040 --> 00:04:28.080
flag to your Java compiler so that it generates the header file that is associated.

55
00:04:28.080 --> 00:04:29.460
You don't really need to do that.

56
00:04:29.460 --> 00:04:36.060
You can write the header file by hand, but then you have to know the conventions that JNI uses for

57
00:04:36.060 --> 00:04:39.930
binding a Java method to a particular C++ implementation.

58
00:04:39.930 --> 00:04:44.970
And again, those bindings are related to the package hierarchy, the name of the class, the name of

59
00:04:44.970 --> 00:04:45.780
the method.

60
00:04:45.780 --> 00:04:50.190
If the method is overloaded, then you have to use some special syntax.

61
00:04:50.190 --> 00:04:55.890
And again, if you want to learn an in-depth understanding about JNI, I highly recommend you follow

62
00:04:55.890 --> 00:04:56.610
my lectures.

63
00:04:56.610 --> 00:05:05.850
I have more than 50 hour 30 hours of lectures on JNI, so let's go ahead and try to implement this class

64
00:05:05.850 --> 00:05:06.600
and then.

65
00:05:08.460 --> 00:05:17.010
And then get the compiler, compile the C++ part, and then we will come back and see now how do we

66
00:05:17.010 --> 00:05:26.460
embed that or how to correctly use this dynamic library when we go to the VM and try to compile our

67
00:05:26.460 --> 00:05:28.560
Java application to native executable file.

68
00:05:28.590 --> 00:05:33.300
So the problem is that system that load you have to or system that load library.

69
00:05:33.300 --> 00:05:39.390
So JVM has to at runtime look for dynamic library and dynamic library means it has to be a file which

70
00:05:39.390 --> 00:05:43.020
is available on the file system of your hardware.

71
00:05:43.020 --> 00:05:44.400
Right, of your operating system.

72
00:05:44.400 --> 00:05:44.850
Right.

73
00:05:44.880 --> 00:05:50.190
It cannot be inside a jar file or something of that kind has to be a file that JVM can load it.

74
00:05:50.550 --> 00:05:56.940
Now, we've seen in the past that we can actually treat these files any file as a resource when we use

75
00:05:56.940 --> 00:05:58.110
Native Image, right.

76
00:05:58.110 --> 00:06:04.050
And what the Native Image compiler does, it actually embeds all the binaries of that resource into

77
00:06:04.050 --> 00:06:05.490
the native executable file.

78
00:06:05.640 --> 00:06:12.210
So if even if we have a dynamic library, we can in fact embed all the binary of that file into our

79
00:06:12.210 --> 00:06:14.140
native image into final file, right?

80
00:06:14.160 --> 00:06:15.360
So all the binary are there.

81
00:06:15.360 --> 00:06:21.600
But then the problem is that at runtime we cannot pass that binary into the system load method.

82
00:06:21.600 --> 00:06:21.790
Right.

83
00:06:21.810 --> 00:06:26.190
You have to give it a file so and I will show you how to do that.

84
00:06:26.190 --> 00:06:28.260
We saw for the text file how to do it.

85
00:06:28.260 --> 00:06:35.220
For example, there was a particle class called a scanner which you can pass a resource, the binaries

86
00:06:35.220 --> 00:06:40.650
of a resource there, and a scanner can read them byte by byte and then interpret them as character

87
00:06:40.650 --> 00:06:42.240
based on the encoding that you provide.

88
00:06:42.240 --> 00:06:48.480
And this was a very ideal case for us when we are compiling a native Java application to a native executable

89
00:06:48.480 --> 00:06:54.120
file, which has some text file as a resource, then we embed all the binaries of that text file in

90
00:06:54.120 --> 00:06:59.520
our application, in our binary file, executable file, and then a scanner helps us to read all those

91
00:06:59.520 --> 00:07:01.590
binaries and then convert them to text.

92
00:07:01.590 --> 00:07:05.160
We want to do the same thing with JNI, which means dynamic libraries.

93
00:07:05.160 --> 00:07:10.320
Dynamic libraries are compiled, C++ are applications which are not executable, right?

94
00:07:10.320 --> 00:07:17.520
You compile to a library, which means it just has binaries of some C++ functions that can be loaded

95
00:07:17.520 --> 00:07:18.780
and execute it.

96
00:07:19.080 --> 00:07:24.570
And then we want to first create those binaries in a simple example.

97
00:07:24.570 --> 00:07:30.720
And then we wanted to look at how to embedded into our native executable file, which we already know

98
00:07:30.720 --> 00:07:31.290
how to do it.

99
00:07:31.290 --> 00:07:38.130
We have to declare it as a resource and ask JVM to do it using the class loader system resource.

100
00:07:38.190 --> 00:07:43.620
What that means is that we have to put the directory that contains this dynamic library and class path

101
00:07:43.620 --> 00:07:44.850
right as resource.

102
00:07:45.060 --> 00:07:51.780
Anything that is on the class path is considered a system resource and can be searched for at runtime

103
00:07:51.780 --> 00:07:58.380
by the JVM itself, which means you don't you are not tied to a specific file directory hierarchy or

104
00:07:58.380 --> 00:07:59.280
file system, anything.

105
00:07:59.280 --> 00:08:06.240
You can package everything in a jar file and JVM knows how to search for files in a jar file, for example.

106
00:08:06.240 --> 00:08:12.030
Because as long as everything is on the class path, JVM knows how to search for them and grab the binaries.

107
00:08:12.030 --> 00:08:17.640
So once you have the binary, then we have to convert it somehow to a file again so that this system,

108
00:08:17.640 --> 00:08:18.600
that load can work.

109
00:08:18.600 --> 00:08:23.070
Unfortunately, the system, that load or system, that load library, they don't accept an input,

110
00:08:23.070 --> 00:08:24.090
a stream of bytes.

111
00:08:24.090 --> 00:08:24.450
Right.

112
00:08:24.450 --> 00:08:25.200
That's the problem.

113
00:08:25.200 --> 00:08:28.730
So we have to do some extra work here to make it compatible.

114
00:08:28.830 --> 00:08:30.240
So let's head to Eclipse.

115
00:08:30.990 --> 00:08:36.240
I have created a Class Jenny demo and we have this public static native voice say hi.

116
00:08:36.240 --> 00:08:39.480
And in the main method we're just saying that Jenny demo say hi.

117
00:08:39.600 --> 00:08:46.550
So if I run this, we're going to say get unsatisfied linker or void Java, native image and item.

118
00:08:46.590 --> 00:08:51.810
First of all, if again I just want to quickly mention how Jenny works.

119
00:08:51.840 --> 00:08:57.090
This say hi method will be binded to a C++ function.

120
00:08:57.090 --> 00:09:05.640
So binding happens in a C++ function with this particular a signature is a package hierarchy.

121
00:09:05.640 --> 00:09:08.280
Our class is in a particular package.

122
00:09:08.280 --> 00:09:11.640
It's called the Java native image.

123
00:09:11.670 --> 00:09:12.210
Right.

124
00:09:12.330 --> 00:09:22.910
And in the class file Jenny demo and then underscore the method name and we're not having any overloading

125
00:09:22.920 --> 00:09:23.340
anything.

126
00:09:23.340 --> 00:09:23.940
So that's it.

127
00:09:23.940 --> 00:09:30.540
But however this there is a difference between this underscore that separates the method name, class

128
00:09:30.540 --> 00:09:31.410
name and the package name.

129
00:09:31.410 --> 00:09:34.290
And these underscore which is in the package name itself.

130
00:09:34.290 --> 00:09:38.640
So underscore in the package and it becomes underscore one, right?

131
00:09:39.090 --> 00:09:46.260
And then this class is going to it's going to get a JNI environment pointer, right?

132
00:09:46.380 --> 00:09:51.720
And then this static method is going to have a pointer class to j class or the meta information and

133
00:09:51.720 --> 00:09:53.100
it's not taking any parameters.

134
00:09:53.100 --> 00:09:55.020
So this is the main signature, right?

135
00:09:55.020 --> 00:10:00.570
And you can create a header file include the edge, which comes with the JDK and then manually write

136
00:10:00.570 --> 00:10:03.570
the signature and then eventually create your application.

137
00:10:03.570 --> 00:10:06.570
But obviously we want to Java C to do it for us.

138
00:10:06.570 --> 00:10:07.350
So we select.

139
00:10:08.560 --> 00:10:12.790
If we look at Java C hyphen H, I already have set up an external tool.

140
00:10:13.990 --> 00:10:19.780
I call it Java C, hyphen H, which points to the JDK Java compiler that comes.

141
00:10:19.780 --> 00:10:27.100
You can point it to either Java 17 compiler, which comes with the LLVM or Java 17 compiler that comes

142
00:10:27.100 --> 00:10:28.270
with the Oracle JDK.

143
00:10:28.540 --> 00:10:30.900
All the Java compilers are compatible, right?

144
00:10:30.910 --> 00:10:34.300
Obviously they compile to the same bytecode and working directory.

145
00:10:34.300 --> 00:10:35.890
You can set it to wherever you want.

146
00:10:35.890 --> 00:10:43.600
I see it to work in space location so you pass the hyphen H to your Java C so that it realizes that

147
00:10:43.600 --> 00:10:47.170
you're asking to also generate the header file for the particular resource.

148
00:10:48.400 --> 00:10:52.750
And I'm asking you to put it in inside a C++ project.

149
00:10:52.780 --> 00:10:59.560
Native Image Underscore Underscore C in a directory called header and I'm asking to run Java C hyphen

150
00:10:59.560 --> 00:11:01.210
edge on the resource location.

151
00:11:01.210 --> 00:11:02.650
This is actual source file.

152
00:11:02.650 --> 00:11:09.100
Remember, you're not running it on a class file in JDK eight, we had another tool called Java H,

153
00:11:09.100 --> 00:11:12.910
which you could run it on a class file, but then it was deprecated and removed.

154
00:11:12.910 --> 00:11:17.200
So now you have to run Java C hyphen edge on a Java file and a source file.

155
00:11:17.200 --> 00:11:24.490
And in terms of eclipse terminology, it's a resource location, a source file, it is a Java file is

156
00:11:24.490 --> 00:11:25.270
a resource.

157
00:11:25.570 --> 00:11:27.250
A class file is a type.

158
00:11:27.250 --> 00:11:27.550
Right?

159
00:11:27.550 --> 00:11:32.740
So, so what I need to do, I need to go ahead and first create a C++ project.

160
00:11:32.740 --> 00:11:35.470
So I'm going to switch to my C++ perspective.

161
00:11:35.470 --> 00:11:43.820
If you have not installed it, just go to eclipse markets, help eclipse marketplace and install install

162
00:11:43.900 --> 00:11:49.780
c, t c development environment for your eclipse.

163
00:11:49.780 --> 00:11:58.150
And if you are using or macros just like what I am using, then just go ahead and install Xcode or Xcode

164
00:11:58.150 --> 00:12:02.740
command line tools so that you have all the compiler tools ready.

165
00:12:02.740 --> 00:12:08.440
And you can always check if you have the compiler or the bell tools ready for your macros, just open

166
00:12:08.440 --> 00:12:13.480
up a terminal and say je plus plus hyphen hyphen version.

167
00:12:13.510 --> 00:12:15.430
It should point to apple clang.

168
00:12:15.550 --> 00:12:20.290
Remember G plus pass is an alias that basically comes with a new.

169
00:12:20.290 --> 00:12:28.840
But when you use install the Xcode command line tools, it maps all these naming C++, everything to

170
00:12:28.840 --> 00:12:29.920
Apple clang, right?

171
00:12:30.310 --> 00:12:32.470
So it goes to the apple clang.

172
00:12:32.470 --> 00:12:38.230
Same with the C++ or Clang Plus plus C++ iPhone version.

173
00:12:38.260 --> 00:12:40.360
It also maps it directly to the Apple client.

174
00:12:40.360 --> 00:12:45.520
So all these aliases are created and the road map to the same build tool, which is apple clang, right?

175
00:12:45.970 --> 00:12:49.030
So I have everything installed in terms of build tools.

176
00:12:49.030 --> 00:12:55.240
Now I have the CD in the Eclipse also available and remember it doesn't provide any compiler unlike

177
00:12:55.260 --> 00:13:02.080
GCT Java development environment is by default comes with Eclipse and Eclipse has its own Java compiler.

178
00:13:02.080 --> 00:13:05.230
You don't rely on other like external compiler, right?

179
00:13:05.230 --> 00:13:09.460
I mean, you can define your own Java build tool in Eclipse, but it's not recommended.

180
00:13:09.460 --> 00:13:16.060
It's better to use the the build tool that is embedded in Eclipse, which is the Java compiler that

181
00:13:16.060 --> 00:13:21.370
comes with Eclipse, but it doesn't come with its own build tool, it doesn't come with own, it comes

182
00:13:21.370 --> 00:13:21.970
with a mate.

183
00:13:21.970 --> 00:13:28.600
So it kind of has something in terms of managing the build, but it doesn't come with the compiler.

184
00:13:28.600 --> 00:13:41.020
So it has tools to manage the build, let's say make or internal, internal CTT manage, but then it

185
00:13:41.020 --> 00:13:44.830
doesn't have so CTT does not have a compiler.

186
00:13:44.830 --> 00:13:46.270
It doesn't come with a compiler, right?

187
00:13:46.270 --> 00:13:48.040
Because compiler is platform dependent.

188
00:13:48.040 --> 00:13:54.520
So they can't embed all the compilers for different platforms because Eclipse you can it's Java based,

189
00:13:54.520 --> 00:13:58.210
you can download, install it on any platform.

190
00:13:58.360 --> 00:14:03.940
It makes sense that it comes with its own Java compiler, but for CD or C++ development, it doesn't

191
00:14:03.940 --> 00:14:08.980
make sense to compile all the or embed all the compilers for all the platforms there.

192
00:14:09.190 --> 00:14:14.860
So I'm in my C++ perspective, I'm right clicking and create a new C++ project.

193
00:14:15.010 --> 00:14:17.560
I'm going to use the C++ managed build.

194
00:14:18.830 --> 00:14:22.580
And then let's go with the executable file helloworld C++.

195
00:14:22.580 --> 00:14:27.440
And it automatically recognizes the tool change of my platform, which is macro as GCC.

196
00:14:27.470 --> 00:14:34.700
Obviously it's not GC, it's Apple Clang, but G plus plus command is mapped to Apple Clang by default.

197
00:14:34.700 --> 00:14:35.900
So that's fine.

198
00:14:36.140 --> 00:14:40.000
And then I'm going to call it Java and Native Image underscore C.

199
00:14:40.010 --> 00:14:46.350
Whenever I have a Java project that has a particular name and it has some binding to JNI or C++.

200
00:14:46.370 --> 00:14:52.670
I just named the C++ project the same name as Java, but give it underscore C or you can give it underscore

201
00:14:52.700 --> 00:14:53.240
CP.

202
00:14:53.270 --> 00:14:53.750
Right.

203
00:14:54.620 --> 00:15:03.890
So I'm asking to create a default executable, HELLOWORLD, C++, and then Source Z and then let's just

204
00:15:03.890 --> 00:15:04.790
go with the release.

205
00:15:04.790 --> 00:15:09.170
We don't want to spend time debugging and now everything is ready.

206
00:15:09.170 --> 00:15:14.600
And what I would like to do normally after the project is created.

207
00:15:15.470 --> 00:15:23.030
So what I need to do, let's save these and then I'm going to edit my active working set and bring it

208
00:15:23.030 --> 00:15:24.250
to the current view.

209
00:15:24.260 --> 00:15:24.650
Right?

210
00:15:24.650 --> 00:15:26.390
So this is my C project.

211
00:15:26.660 --> 00:15:28.250
All the headers are recognized.

212
00:15:28.250 --> 00:15:30.530
It means everything is correctly set up.

213
00:15:30.530 --> 00:15:36.950
The Eclipse ADT was able to correctly find all the build tools that are installed using Xcode and user

214
00:15:36.950 --> 00:15:37.730
locale included.

215
00:15:37.730 --> 00:15:44.570
These are the extra libraries that I have as a user installed and it goes into user locale include.

216
00:15:44.570 --> 00:15:48.890
These are all for example, I have installed Boost, which is a huge C++ library.

217
00:15:48.890 --> 00:15:51.680
I have installed GSL Guinness Scientific Library.

218
00:15:51.680 --> 00:15:59.450
So anything that you as a user in Mac OS which goes into user user locale include Eclipse, CBT also

219
00:15:59.450 --> 00:16:01.490
picks up on them, which is a very nice feature.

220
00:16:01.910 --> 00:16:09.140
So CRC right now we get the CP and then I would I like to always do a quick hello of all to make sure

221
00:16:09.140 --> 00:16:11.660
that everything is set up, the compiler is ready.

222
00:16:11.660 --> 00:16:13.700
So this hammer you just build it.

223
00:16:14.060 --> 00:16:20.880
It uses make so make sure that you have installed mag C++ so it compiles hyphen C means just create

224
00:16:20.880 --> 00:16:29.240
the object for compile and then without hyphen C means now you're invoking the linker right first compiler

225
00:16:29.240 --> 00:16:31.580
and then the linker and then you get the executable.

226
00:16:31.580 --> 00:16:35.420
So if we now run it, it says hello.

227
00:16:35.600 --> 00:16:38.810
So everything is set up right now.

228
00:16:38.810 --> 00:16:43.310
I need first of all, I'm going to clean up and delete the binary release directory.

229
00:16:43.910 --> 00:16:52.850
And then the other thing that I'm going to do, I'm going to go to the properties C, C++, build the

230
00:16:53.330 --> 00:17:01.010
settings, and I am going to set this dialog to let's say C++ 17.

231
00:17:01.010 --> 00:17:01.760
That's fine.

232
00:17:01.760 --> 00:17:06.830
But then in the build artifact, I don't want to create an executable, I want to create a shared library

233
00:17:06.830 --> 00:17:08.810
which is in macros is dileep.

234
00:17:08.840 --> 00:17:10.040
So apply and close.

235
00:17:10.430 --> 00:17:12.500
So we're going to delete these.

236
00:17:12.500 --> 00:17:14.140
So right now we have TCP.

237
00:17:14.150 --> 00:17:15.230
So what are we going to do?

238
00:17:15.230 --> 00:17:19.580
We have a JNI demo class that has a.

239
00:17:21.480 --> 00:17:23.970
That has a native method, right?

240
00:17:25.700 --> 00:17:32.660
So now I'm going to select our resource file or the source file Java and then run our Java C hyphen

241
00:17:32.660 --> 00:17:33.200
H.

242
00:17:34.460 --> 00:17:36.470
And it's going to compile.

243
00:17:36.470 --> 00:17:41.930
And as you can see, it automatically puts it in our C project, C++ project, Java and Native Image

244
00:17:41.930 --> 00:17:43.450
underscore C in the header file.

245
00:17:43.460 --> 00:17:50.060
That's how we basically created Instructor Java C, that hyphen S, right.

246
00:17:50.210 --> 00:17:56.990
So the header files generated and as you can see, it automatically adds an edge and it assumes that

247
00:17:56.990 --> 00:18:02.060
it's in diamond brackets, which means as soon as that generated edge is on the compiler path, which

248
00:18:02.060 --> 00:18:06.740
means all these include directories that Eclipse CD automatically recognizes.

249
00:18:06.740 --> 00:18:12.620
These are the ones that usually we use the diamond notation instead of double code for include, which

250
00:18:12.620 --> 00:18:14.510
means these are in the compiler path.

251
00:18:14.630 --> 00:18:23.480
So what we need to do is we're going to go out C, C++, build settings in the tools for the C++ compiler.

252
00:18:23.480 --> 00:18:33.410
We're going to include TAB and then add the include include pass and we're going to say go to file system.

253
00:18:33.950 --> 00:18:43.610
And in the Java virtual machines, let's say IBM, all of them come in this Mac basically home and then

254
00:18:43.820 --> 00:18:49.400
include and then you add this so that you include the joint edge, but then you have to also go ahead

255
00:18:49.400 --> 00:18:53.660
and include the machine dependency and I underscore empty the directory, right?

256
00:18:54.020 --> 00:18:56.990
And now these arrows should go away.

257
00:18:56.990 --> 00:19:01.730
If we hit command or control and open this header, we should be able to access it.

258
00:19:01.760 --> 00:19:03.680
It means everything is set up correctly.

259
00:19:03.680 --> 00:19:09.970
We don't need to set up anything for the link here because JDK is automatically this generated edge

260
00:19:10.010 --> 00:19:11.600
is more like header stuff.

261
00:19:12.290 --> 00:19:19.190
You don't need to add any extra C++ or any binary file, you just add this, include a C and you can

262
00:19:19.190 --> 00:19:21.080
see it automatically generated that.

263
00:19:21.080 --> 00:19:26.420
And one thing that I forgot is that there is always a Java underscore as the at the beginning, which

264
00:19:26.420 --> 00:19:33.920
means this C++ function binds to a Java method and then Java underscore one native, underscore one

265
00:19:33.920 --> 00:19:34.400
image.

266
00:19:34.400 --> 00:19:39.470
This is our package name and you see that the underscore in the package are translate to underscore

267
00:19:39.470 --> 00:19:44.420
one and then underscore class name, underscore method name and it takes general environment pointer

268
00:19:44.420 --> 00:19:45.740
and J class, right?

269
00:19:45.980 --> 00:19:50.810
And then what we do, we copy these in our CPP.

270
00:19:50.810 --> 00:19:56.750
The very first thing that we do, we include that header file using a double code so that we, we say

271
00:19:56.750 --> 00:20:00.710
that it's not a compiler path, but it's something that the user is defining.

272
00:20:00.710 --> 00:20:08.120
So go one level up, go into the header and then a Java native image demo edge and then we paste the

273
00:20:08.900 --> 00:20:09.910
function generally.

274
00:20:09.950 --> 00:20:16.970
One point is our JVM and J class is J and I demo underscore class and what are we going to do in the

275
00:20:16.970 --> 00:20:23.210
say we're going to just print something to the console, so we're going to say include IO stream and

276
00:20:23.210 --> 00:20:33.590
then stdc out CDK out hello world from C++, hello world from C++ and backslash.

277
00:20:33.590 --> 00:20:35.630
N That's it.

278
00:20:36.170 --> 00:20:43.100
The next thing that we're going to do, we're going to basically compile or build.

279
00:20:43.400 --> 00:20:50.150
So let's build everything looks okay and we got the binary and now you see that it's a dynamic library

280
00:20:50.150 --> 00:20:57.800
lib, this lib gets added and then that di lib on macros gets added in Linux is usually that.

281
00:20:57.800 --> 00:20:59.720
So which means it's a shared object.

282
00:20:59.720 --> 00:21:00.230
All right.

283
00:21:00.620 --> 00:21:10.280
So the final step is to basically let's copy this to our Java project in our we can put it in our RC

284
00:21:10.280 --> 00:21:11.870
or create a separate.

285
00:21:13.490 --> 00:21:19.760
So it says that you had some changes, everything looks good and then java lib, java native MHC delete.

286
00:21:20.030 --> 00:21:25.580
And the first thing that we're going to do, we're going to go back to our Java project and then we're

287
00:21:25.580 --> 00:21:27.410
going to make sure that everything went well.

288
00:21:27.410 --> 00:21:32.030
So in order to use if I run this again, it's going to give us error.

289
00:21:32.030 --> 00:21:36.800
So what we're going to do, we're going to define a static library and in strike the JVM, which is

290
00:21:36.800 --> 00:21:41.000
our system class to load this library.

291
00:21:41.000 --> 00:21:41.540
Right.

292
00:21:41.630 --> 00:21:49.460
And so what we're going to do, we're going to get the absolute path, copy full path and then paste

293
00:21:49.460 --> 00:21:54.200
it here, know that the only load function that we have here, it takes a string.

294
00:21:54.200 --> 00:21:57.680
So you cannot give it an input, a stream or a stream of binaries.

295
00:21:57.680 --> 00:21:58.910
So these are absolute paths.

296
00:21:58.940 --> 00:22:00.380
Now if I run this.

297
00:22:01.440 --> 00:22:02.100
It works fine.

298
00:22:02.100 --> 00:22:09.420
So it goes and finds a file at this location and then loads it gets all the binaries.

299
00:22:09.420 --> 00:22:16.620
And then when you call this JVM realizes that this is a native method, so it looks for a binary file,

300
00:22:16.620 --> 00:22:19.620
one of these dynamic libraries that has a binding to this.

301
00:22:19.620 --> 00:22:24.840
And in order to find for that, it looks for this symbol Java underscore the package name, the class

302
00:22:24.840 --> 00:22:26.070
name and the method name.

303
00:22:26.070 --> 00:22:34.350
So when JVM finds this symbol in one of these libraries, it executes the binary code that is associated

304
00:22:34.350 --> 00:22:35.820
with those that function.

305
00:22:35.820 --> 00:22:36.120
Right?

306
00:22:36.120 --> 00:22:39.480
Remember, functions are symbols that map to memory addresses, right?

307
00:22:39.480 --> 00:22:45.720
Every function in C++ has a memory address that has a block that's pointing to a block of code that

308
00:22:45.720 --> 00:22:48.120
is associated with executing dysfunction.

309
00:22:48.210 --> 00:22:51.180
So right now, our Jini development went very well.

310
00:22:51.210 --> 00:22:54.180
Very simple thing, we can just run it.

311
00:22:54.180 --> 00:23:03.090
JVM successfully loads these, but then if I use my native image, this is going to fail because this

312
00:23:03.270 --> 00:23:10.320
obviously this is string, even though it's hardcoded when we embed this dynamically into the native

313
00:23:10.320 --> 00:23:12.270
image, the system that load cannot.

314
00:23:12.270 --> 00:23:14.550
This file path is not valid anymore.

315
00:23:14.550 --> 00:23:14.790
Right.

316
00:23:14.790 --> 00:23:16.710
If we only have one executable file.

317
00:23:16.740 --> 00:23:20.190
So in, in the next lecture I will show you how to deal with that.

318
00:23:20.190 --> 00:23:21.690
So I hope you enjoy this one.

319
00:23:21.690 --> 00:23:24.240
Please stay tuned and I'll see the next one.
