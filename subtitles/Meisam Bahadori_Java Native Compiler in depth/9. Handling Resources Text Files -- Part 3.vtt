WEBVTT
1
00:00:01.170 --> 00:00:03.630
Hello and welcome to another tutorial.

2
00:00:03.630 --> 00:00:07.890
We're going to continue our discussion with the native image handling Java resources.

3
00:00:07.890 --> 00:00:15.780
And we said that the idea is to use the class loader and basically tail Java at runtime that our resource

4
00:00:15.780 --> 00:00:17.130
is somewhere on the class path.

5
00:00:17.130 --> 00:00:23.610
So it becomes a platform independent way of locating the resources because class path, obviously when

6
00:00:23.610 --> 00:00:30.120
you run your job application on any platform, it's mandatory to provide the class path and then class

7
00:00:30.120 --> 00:00:31.410
loader gets system resource.

8
00:00:31.410 --> 00:00:40.260
Then this is an internal JVM thing that knows how to locate and load the binaries of a of a resource

9
00:00:41.280 --> 00:00:41.910
at runtime.

10
00:00:41.910 --> 00:00:42.360
Right.

11
00:00:42.360 --> 00:00:44.010
And we had this example.

12
00:00:45.650 --> 00:00:54.230
Where we look at this resource demo and we loaded this run media search, we put it on the SR in the

13
00:00:54.230 --> 00:00:56.900
Z directory, or we can put it in any package.

14
00:00:56.900 --> 00:00:57.950
That's fine too.

15
00:00:57.950 --> 00:01:04.100
But when you put it on run in the Z, obviously that's directly available on class path because Eclipse

16
00:01:04.100 --> 00:01:11.120
ID copies it into the being directory of the project and then then it's and beam directory is where

17
00:01:11.120 --> 00:01:13.710
the class path is going to be set in eclipse ID.

18
00:01:13.730 --> 00:01:14.120
Right.

19
00:01:14.390 --> 00:01:15.740
So this worked.

20
00:01:17.370 --> 00:01:24.810
And we saw that when Wendy's works and we get you URL, obviously if the class loader was or Jim was

21
00:01:24.810 --> 00:01:29.820
not able to find this underclass, but at runtime it returns a null objects we have to check for null

22
00:01:30.000 --> 00:01:33.360
and then after that we say that how do we get the contents of this?

23
00:01:33.360 --> 00:01:40.170
Because from the URL, basically what happens is that you can either get the file and then load it into

24
00:01:40.170 --> 00:01:40.980
a scan as a file.

25
00:01:40.980 --> 00:01:46.740
And we said that this is a bad idea because using the file means we tie ourselves to the underlying

26
00:01:46.770 --> 00:01:48.210
operating system directory.

27
00:01:48.210 --> 00:01:48.710
Right.

28
00:01:48.750 --> 00:01:50.580
And that's not a good idea.

29
00:01:50.580 --> 00:01:55.320
So and we saw that when we compile to native executable using file, it didn't work.

30
00:01:55.320 --> 00:01:55.740
Right.

31
00:01:55.920 --> 00:02:01.530
But if you use the open stream, what happens is that basically when you use use the class loader to

32
00:02:01.530 --> 00:02:08.070
load the this file, the native compiler, the native image compiler actually at compile time because

33
00:02:08.070 --> 00:02:12.180
it looks at this resource, it's able to find it on the class path at compile time.

34
00:02:12.180 --> 00:02:12.630
Right.

35
00:02:12.750 --> 00:02:16.650
It actually copies the entire binary content of this file.

36
00:02:16.650 --> 00:02:18.240
Whatever it is is a text file.

37
00:02:18.240 --> 00:02:19.350
Image file doesn't matter.

38
00:02:19.350 --> 00:02:23.130
It copies it into the final native file.

39
00:02:23.130 --> 00:02:23.520
Right.

40
00:02:23.520 --> 00:02:25.620
So the binaries of this is already copied.

41
00:02:25.620 --> 00:02:28.410
The question is how do we access those binaries?

42
00:02:28.410 --> 00:02:28.620
Right.

43
00:02:28.620 --> 00:02:29.490
Those bytes.

44
00:02:29.490 --> 00:02:33.930
And we said that a scanner has a construct that accepts an input, a stream.

45
00:02:33.930 --> 00:02:39.900
So in order to access the binary contents of a file of a resource, anything in Java, you use an input

46
00:02:39.960 --> 00:02:43.140
stream, you open a stream of bytes that are fed to the Java.

47
00:02:43.140 --> 00:02:48.750
And when we say it's input stream, it means it's a stream of bytes that are going into the gvm into

48
00:02:48.750 --> 00:02:49.260
your runtime.

49
00:02:49.260 --> 00:02:49.500
Right?

50
00:02:49.500 --> 00:02:54.810
Output stream means it's a stream of bytes that go out of your JVM from JVM, from your application

51
00:02:54.810 --> 00:02:57.360
to let's say to terminal to operating system, etc..

52
00:02:57.660 --> 00:03:03.060
So with this URL, if we can locate it successfully and it's not null, we're going to obviously open

53
00:03:03.060 --> 00:03:09.990
it up as a input stream and a scanner knows how to read the contents of a byte stream and convert it

54
00:03:09.990 --> 00:03:11.430
to characterize.

55
00:03:11.430 --> 00:03:17.070
And if you look at the constructor, this part constructor that accepts an input, a stream constructs

56
00:03:17.070 --> 00:03:21.540
a new scanner that produces values, is scanned from a specified input is stream.

57
00:03:21.570 --> 00:03:27.610
Bytes from the stream are converted into a characters using the underlying platform's default cache

58
00:03:27.630 --> 00:03:27.900
set.

59
00:03:27.900 --> 00:03:28.380
Right.

60
00:03:28.380 --> 00:03:35.550
And we saw that as Canada actually has a another constructor that accepts the input stream and then

61
00:03:35.550 --> 00:03:40.710
you can tell it what cache set you you're going to use, right?

62
00:03:40.710 --> 00:03:45.120
So you can say that for name and then do something.

63
00:03:45.120 --> 00:03:49.080
And actually I believe it accepts a string or you can also pass it.

64
00:03:49.080 --> 00:03:51.980
So let's say UTF eight, right?

65
00:03:52.290 --> 00:03:55.830
So if we run this, this is still going to work.

66
00:03:55.830 --> 00:04:04.200
Nothing changes because there might platform default cache that is UTF eight, which is mostly on UNIX

67
00:04:04.200 --> 00:04:05.340
based operating system.

68
00:04:05.340 --> 00:04:09.030
I believe Windows uses a different default encoding.

69
00:04:09.060 --> 00:04:09.390
Right.

70
00:04:09.390 --> 00:04:10.470
So you have to be careful.

71
00:04:10.470 --> 00:04:16.860
But again, when you don't specify, JVM is already aware of the underlying platforms cache set.

72
00:04:16.860 --> 00:04:17.280
Right.

73
00:04:17.280 --> 00:04:25.140
So that's the way that we we managed to make this code reading the contents of a resource and then interpret

74
00:04:25.140 --> 00:04:28.560
it as characters completely platform independent.

75
00:04:28.560 --> 00:04:34.290
This code will run and it never has any dependency on the underlying file system.

76
00:04:34.290 --> 00:04:40.170
The directory names doesn't matter because at runtime, even if I bundle this as a jar, this code is

77
00:04:40.170 --> 00:04:42.060
still going to work fine and I can show you.

78
00:04:42.060 --> 00:04:43.530
So let's actually do this.

79
00:04:44.700 --> 00:04:49.110
Let's right click and then export a jar.

80
00:04:49.110 --> 00:04:53.550
We have a main method, so we want to export as a bell jar and then a resource demo.

81
00:04:53.580 --> 00:04:57.330
That's the wrong configuration for this particular class resource demo.

82
00:04:57.330 --> 00:05:02.760
And then we're going to put it remember the export destination is relative to your workspace, so the

83
00:05:02.760 --> 00:05:09.180
project directory is Java on a Vmanage and we're going to put it inside the native directory and then

84
00:05:09.180 --> 00:05:15.180
resource demo jar and copy record libraries into a subfolder next to generate a jar.

85
00:05:15.180 --> 00:05:16.350
Let's go with this.

86
00:05:16.350 --> 00:05:22.770
If in case you don't know if you have the license for the libraries or dependencies, just copy them

87
00:05:22.770 --> 00:05:25.920
in a separate directory and it says that you have some compiler warning.

88
00:05:25.920 --> 00:05:27.210
That's fine, no problem.

89
00:05:27.210 --> 00:05:29.790
We have some warnings about unused.

90
00:05:31.290 --> 00:05:33.860
So you see we have this resource demo lib util forge.

91
00:05:33.900 --> 00:05:39.090
This is a dependency actually for another class which is on our class path, but this is our jar.

92
00:05:39.090 --> 00:05:45.000
And so let's open a terminal here and we're going to see that.

93
00:05:45.000 --> 00:05:50.370
So Java hyphen jar and then a resource demo that jar and it works fine.

94
00:05:50.370 --> 00:05:50.970
Why?

95
00:05:50.970 --> 00:05:55.980
Because if I look inside my jar, you see this run search is on the class path.

96
00:05:55.980 --> 00:06:02.760
So if I look at the manifest, manifest provides the class path, one is the dot because when you reset

97
00:06:02.760 --> 00:06:12.570
that, when you say java hyphen jar, actually what happens it's hyphen C P basically here a resource

98
00:06:12.570 --> 00:06:14.640
demo, that jar, that's what happens, right?

99
00:06:14.640 --> 00:06:16.350
The Java is a compressed.

100
00:06:16.470 --> 00:06:17.130
Directory.

101
00:06:17.130 --> 00:06:20.310
The gym knows how to read the contents inside the java, so you tell it.

102
00:06:20.310 --> 00:06:22.320
The class path is my job directory.

103
00:06:22.320 --> 00:06:27.300
This is just a compressed directory and then you give it domain class and in the manifest the main class

104
00:06:27.300 --> 00:06:27.930
is already there.

105
00:06:27.930 --> 00:06:28.470
Right?

106
00:06:31.670 --> 00:06:36.560
So going back to the terminal and this is still works fine, right.

107
00:06:36.560 --> 00:06:40.430
So because inside the manifest it says the current directory.

108
00:06:40.430 --> 00:06:47.480
So we put the class path, the jar file and inside the manifest the JVM loads the manifest and configures

109
00:06:47.480 --> 00:06:48.530
the class path again.

110
00:06:48.530 --> 00:06:53.600
DOT means whatever the jar directory is and then resource demo lib util forge.

111
00:06:53.630 --> 00:06:54.170
Right.

112
00:06:54.170 --> 00:06:59.030
So obviously because this path is relative resource demo lib.

113
00:07:00.850 --> 00:07:10.210
Then if we go to another directory and try to run our Java application from it, we probably won't succeed.

114
00:07:10.240 --> 00:07:11.200
Let's try this.

115
00:07:11.200 --> 00:07:12.940
So native.

116
00:07:13.480 --> 00:07:14.350
It still works, right?

117
00:07:14.350 --> 00:07:17.110
So nothing goes wrong here and again.

118
00:07:17.110 --> 00:07:23.620
Java hyphen jar is a syntactic sugar for saying java hyphen class path the jar directory.

119
00:07:23.620 --> 00:07:23.830
Right.

120
00:07:23.860 --> 00:07:25.510
Jar file is just a directory.

121
00:07:25.510 --> 00:07:26.630
It's a compressed directory.

122
00:07:26.650 --> 00:07:27.190
All right.

123
00:07:28.420 --> 00:07:33.850
And JVM just reads the manifest to see what's the main class and what's going to be the class path when

124
00:07:33.850 --> 00:07:35.400
it loads the contents of the jar.

125
00:07:35.410 --> 00:07:42.430
And this run MCT search is there at the top level of the class path because manifest says dot dot means

126
00:07:42.430 --> 00:07:45.400
whatever is inside the jar directory right jar file.

127
00:07:45.700 --> 00:07:47.620
So run mixture is there.

128
00:07:47.740 --> 00:07:57.430
And remember if when we got this and you cannot load the contents of a file, a resource that is inside

129
00:07:57.430 --> 00:08:10.180
the jar using the basically the file class and then let's pass it the you are so resource get file.

130
00:08:10.270 --> 00:08:11.710
This is going to fail.

131
00:08:12.100 --> 00:08:18.100
The reason is that right now it succeeds because it's not inside the jar.

132
00:08:18.100 --> 00:08:22.030
When I run this from my eclipse ID, obviously it looks at the class path.

133
00:08:22.030 --> 00:08:27.400
The file exists on my file system, but now if I export this again.

134
00:08:30.710 --> 00:08:31.790
Everything is the same.

135
00:08:31.790 --> 00:08:32.600
The file exists.

136
00:08:32.600 --> 00:08:33.640
We want to overwrite it.

137
00:08:33.650 --> 00:08:34.060
Okay.

138
00:08:34.100 --> 00:08:41.000
And now let's go back to our directory native.

139
00:08:42.140 --> 00:08:44.780
So we have the jar file.

140
00:08:44.780 --> 00:08:47.570
So let's say Java hyphen jar resource demo.

141
00:08:47.570 --> 00:08:53.240
The jar is going to file file not for an exception because if you look at the path, what happens to

142
00:08:53.240 --> 00:08:56.570
the jar is this one resource demo the jar, exclamation mark.

143
00:08:56.570 --> 00:09:01.910
And this is not a correct directory name for the underlying operating system.

144
00:09:01.910 --> 00:09:04.670
That's why the terminal doesn't understand it.

145
00:09:04.700 --> 00:09:11.330
Basically, when you delegate to file class, it tries to delegate to whatever file system is for the

146
00:09:11.330 --> 00:09:11.960
operating system.

147
00:09:11.960 --> 00:09:14.260
That's not a platform independent way.

148
00:09:14.270 --> 00:09:20.180
So I recommend that you always get the always make your resources available on the class path and always

149
00:09:20.360 --> 00:09:22.550
open up a input stream to them.

150
00:09:22.550 --> 00:09:25.430
So resource open string.

151
00:09:27.170 --> 00:09:30.350
This is still works fine it's completely platform independent.

152
00:09:30.530 --> 00:09:38.540
EVM can load the binaries from jar directly and then a scanner understands the textual content of that

153
00:09:38.540 --> 00:09:39.020
binary.

154
00:09:39.020 --> 00:09:46.280
So again we right click export reasonable jar, everything is okay, let's overwrite and then okay and

155
00:09:46.280 --> 00:09:49.970
now go back and java hyphen jar works fine.

156
00:09:49.970 --> 00:09:50.480
Right.

157
00:09:51.620 --> 00:09:59.990
And you see the the actual operating system path is this resource demo that your exclamation mark and

158
00:09:59.990 --> 00:10:03.560
this is not correct this is something that the terminal doesn't understand it.

159
00:10:03.590 --> 00:10:13.640
So for example, if I tell you to basically run me that message, it says that unknown command can I

160
00:10:13.640 --> 00:10:16.340
seed into this exclamation mark directory?

161
00:10:16.340 --> 00:10:19.460
And the answer is no, I cannot.

162
00:10:19.460 --> 00:10:21.560
So exclamation mark doesn't work.

163
00:10:24.320 --> 00:10:24.650
All right.

164
00:10:24.650 --> 00:10:26.210
So and then we saw.

165
00:10:26.210 --> 00:10:28.100
So let's delete this jar file.

166
00:10:29.610 --> 00:10:33.810
And now we saw that when we compile this, let's open this binary.

167
00:10:34.200 --> 00:10:36.030
Actually we're in the same directory.

168
00:10:36.030 --> 00:10:37.590
So Java

169
00:10:39.840 --> 00:10:41.490
Java Native Resource Demo.

170
00:10:41.520 --> 00:10:43.950
This works fine, but the path is now different.

171
00:10:43.980 --> 00:10:44.520
Why?

172
00:10:44.550 --> 00:10:51.000
Because Native Image Compiler grabbed all the binary content of this file regardless of what the extension

173
00:10:51.000 --> 00:10:57.120
is and copy them into the this executable file.

174
00:10:58.110 --> 00:11:00.040
And now it says that from where?

175
00:11:00.060 --> 00:11:01.860
Whatever the file is the root.

176
00:11:02.160 --> 00:11:09.390
Basically this root for y slash means all the contents are inside the resource demo itself and the scanner

177
00:11:09.390 --> 00:11:16.440
can open up a binary stream to them because those bytes are available in this right there is it doesn't

178
00:11:16.440 --> 00:11:23.010
this native application doesn't require an extra file or something and it's kind of always can access

179
00:11:23.010 --> 00:11:25.620
them and reinterpret them as characters.

180
00:11:25.620 --> 00:11:26.430
So this works.

181
00:11:26.850 --> 00:11:34.800
Now, if I open up a finder here and look at the size, this is 12.1 megabyte, right?

182
00:11:34.920 --> 00:11:39.810
Obviously, the contents of this run me search file is pretty much zero byte.

183
00:11:39.810 --> 00:11:41.880
I mean, probably if you buy it, so it doesn't matter.

184
00:11:41.880 --> 00:11:46.290
So this 12.1 megabyte is completely coming from the JDK stuff.

185
00:11:46.560 --> 00:11:51.330
Now notice what happens if I have a very large file.

186
00:11:51.450 --> 00:11:54.370
Let's say I have this large file, the text.

187
00:11:54.720 --> 00:11:58.590
I just grabbed some text and copied and pasted it many times.

188
00:11:58.590 --> 00:12:05.640
It has about 200 lines of code, a text file, so I'm going to copy it into the Z.

189
00:12:06.680 --> 00:12:10.580
And now it's available on the class path and I can load it right.

190
00:12:10.820 --> 00:12:13.100
Large file dot txt.

191
00:12:13.130 --> 00:12:16.160
Again, the rest of the code exactly works the same.

192
00:12:16.160 --> 00:12:21.140
So if I run this, this is going to just print all the contents of this file and it's going to take

193
00:12:21.140 --> 00:12:21.830
quite some time.

194
00:12:21.830 --> 00:12:22.320
Right.

195
00:12:22.340 --> 00:12:25.220
So I can permanent basically terminated.

196
00:12:26.490 --> 00:12:28.350
Uh, but this code is still works.

197
00:12:28.350 --> 00:12:28.620
Fine.

198
00:12:28.620 --> 00:12:33.420
We're accessing the contents of these, and then the scanner reads all those bytes and interpret them

199
00:12:33.420 --> 00:12:35.820
as as characters.

200
00:12:36.210 --> 00:12:40.740
So notice now what happens if I compile this application?

201
00:12:41.130 --> 00:12:43.680
First of all, the size of this text file is going.

202
00:12:43.680 --> 00:12:47.310
So let's look at the size of this text file.

203
00:12:47.340 --> 00:12:50.970
So the size of this large text file is 13.3 megabyte.

204
00:12:51.240 --> 00:12:58.080
And we know that if we just compile a simple application like a hello world, the size is going to be

205
00:12:58.080 --> 00:12:59.280
around 12 megabytes.

206
00:12:59.520 --> 00:13:05.430
So why do we expect that when we actually compile this application that loads the contents of this large

207
00:13:05.430 --> 00:13:06.210
text file?

208
00:13:06.240 --> 00:13:10.230
The total size of the binary is going to be somewhere around 25 megabytes.

209
00:13:10.260 --> 00:13:10.650
Why?

210
00:13:10.650 --> 00:13:14.700
Because the native image realizes that you're loading a resource.

211
00:13:14.700 --> 00:13:20.280
So we actually grabs the entire binary contents of this resource, this text file, and copies it into

212
00:13:20.520 --> 00:13:24.210
the native image, the application, and I can prove it to you.

213
00:13:24.210 --> 00:13:28.530
So first of all, we need to run because we are accessing a resource.

214
00:13:28.530 --> 00:13:30.720
We have to run our Java Trace again.

215
00:13:30.900 --> 00:13:32.490
So resource demo.

216
00:13:32.490 --> 00:13:34.260
Let's run our Java Trace.

217
00:13:35.500 --> 00:13:40.150
And we can just terminate it manually and then it creates the metal in native image.

218
00:13:40.150 --> 00:13:43.450
And inside the resource config we're accessing this large file.

219
00:13:43.600 --> 00:13:50.260
So and then this will be fed to the, um, basically the native compiler.

220
00:13:50.260 --> 00:13:58.330
So just to, again, to, to reiterate, so right now the size of the compilation was 12.1 megabyte.

221
00:13:58.330 --> 00:14:00.760
So let's see what happens after we.

222
00:14:01.920 --> 00:14:05.730
Compile this application that loads a large resource file.

223
00:14:05.730 --> 00:14:11.070
So let's select our resource demo and then run a native image.

224
00:14:14.610 --> 00:14:19.590
So if everything goes well, we will see that there is a binary file generated which is huge.

225
00:14:19.590 --> 00:14:26.970
It's now about 25 megabytes because 12 megabytes comes from the JDK stuff when you compile it to binaries

226
00:14:26.970 --> 00:14:32.160
and then 13 megabyte comes just from the binaries of this large text file resource.

227
00:14:32.160 --> 00:14:32.550
Right?

228
00:14:32.550 --> 00:14:39.990
And all those binaries are copied into the native file, the executable file.

229
00:14:40.410 --> 00:14:46.650
That's how you create a you compile a Java application that has external resource dependencies into

230
00:14:46.650 --> 00:14:53.040
a single executable file that is completely it doesn't require any dependency.

231
00:14:53.040 --> 00:14:53.310
Right.

232
00:14:53.310 --> 00:14:55.410
So let's open up our terminal here.

233
00:14:55.410 --> 00:14:57.600
First of all, let's make sure that we can run this.

234
00:14:58.140 --> 00:14:59.790
Yes, everything works fine.

235
00:14:59.790 --> 00:15:05.340
And you see, when you run it with JVM, it takes much more time to load all these tags.

236
00:15:05.340 --> 00:15:11.250
But when you compile to native executable file, you see it ran much faster.

237
00:15:11.250 --> 00:15:15.030
So that's another reason that you might consider compiling your application.

238
00:15:15.030 --> 00:15:18.780
But now let's look at the size of this text file.

239
00:15:18.810 --> 00:15:23.190
It's 25.4 megabyte, so 12.1 megabyte.

240
00:15:23.370 --> 00:15:24.540
Let's write it down here.

241
00:15:25.530 --> 00:15:28.710
12.1 megabyte was from JDK stuff.

242
00:15:28.710 --> 00:15:31.920
And then this large text file.

243
00:15:32.940 --> 00:15:35.060
Is 13.3 megabyte.

244
00:15:35.070 --> 00:15:35.670
All right.

245
00:15:35.670 --> 00:15:40.290
So 13.3 megabyte comes from the resource file.

246
00:15:41.220 --> 00:15:44.790
So the total of this is 25.4 megabyte.

247
00:15:44.820 --> 00:15:47.970
How much is the size of our native binary now?

248
00:15:48.210 --> 00:15:50.190
It's 25.4 megabyte.

249
00:15:50.190 --> 00:15:51.140
Exactly that.

250
00:15:51.150 --> 00:15:59.310
So what this proves is that the native compiler actually grabs all the binaries of your resources and

251
00:15:59.310 --> 00:16:03.960
copies them somehow into the final binary.

252
00:16:03.960 --> 00:16:12.030
And then once you work with these open streams which read the binaries bytes by bytes, then your application

253
00:16:12.030 --> 00:16:12.900
works just fine.

254
00:16:12.900 --> 00:16:17.370
The final executable file is completely resource independent.

255
00:16:17.370 --> 00:16:21.810
It has all the information that it needs and then it just runs just fine.

256
00:16:21.810 --> 00:16:29.750
You don't need to provide these external resources as dependencies in addition to your binary.

257
00:16:29.760 --> 00:16:36.900
So I believe this is a very nice feature that this provides for, for example, for C++ applications.

258
00:16:36.900 --> 00:16:43.740
I don't think there is an easy way to implement this kind of behavior, which means all the resources

259
00:16:43.740 --> 00:16:47.840
get copied into the final executable file for C++ application.

260
00:16:47.910 --> 00:16:53.670
You always see that there is a executable file, but there are a lot of resources, images, etc. But

261
00:16:53.670 --> 00:16:59.460
here you see that for a job application, the Native Image compiler provides a way which actually relies

262
00:16:59.460 --> 00:17:01.700
on the features that the GVM provides, right?

263
00:17:01.710 --> 00:17:07.770
This class loader feature which loads binaries of any resource at runtime, and then the other classes

264
00:17:07.770 --> 00:17:13.530
that can work with input, a stream which means a stream of bytes, and then they can read it and then

265
00:17:15.780 --> 00:17:16.920
basically

266
00:17:19.350 --> 00:17:21.120
interpret those bytes in any way.

267
00:17:21.120 --> 00:17:21.510
Right?

268
00:17:21.660 --> 00:17:24.360
For example, an image file is also a stream of bytes.

269
00:17:24.360 --> 00:17:26.130
Then you interpret it differently.

270
00:17:26.130 --> 00:17:26.610
Right.

271
00:17:27.660 --> 00:17:32.640
And this is a very nice feature that I believe the native image has.

272
00:17:32.640 --> 00:17:36.990
And again, I want you to look at the difference in the time.

273
00:17:36.990 --> 00:17:42.750
So if I run this within the eclipse using the Java, you see it takes some time, right?

274
00:17:42.750 --> 00:17:46.620
It's not very fast, but it ends on the terminal.

275
00:17:46.620 --> 00:17:50.580
If I run the compiler version, it's much faster.

276
00:17:51.540 --> 00:17:56.190
It's I would say it's at least a5x faster, like five times faster.

277
00:17:57.210 --> 00:18:04.500
So I hope you enjoyed this lecture and now have a solid understanding of how to include or embed all

278
00:18:04.500 --> 00:18:08.280
the resources that your Java application needs in the final executable file.

279
00:18:08.280 --> 00:18:10.710
I recommend that you always try this way.

280
00:18:10.740 --> 00:18:15.630
It makes the size of your binary larger, but then everything is self-contained.

281
00:18:15.630 --> 00:18:21.480
You don't worry about if somebody else runs this application on another computer, things might break

282
00:18:21.480 --> 00:18:22.140
or not work.

283
00:18:22.140 --> 00:18:27.840
Every all the contents, everything that your application needs is already inside the final binary file.

284
00:18:28.140 --> 00:18:29.310
So I hope you enjoyed this one.

285
00:18:29.310 --> 00:18:31.590
Please stay tuned and I'll see you the next one.
