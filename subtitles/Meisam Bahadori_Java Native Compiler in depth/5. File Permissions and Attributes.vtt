WEBVTT
1
00:00:03.130 --> 00:00:06.490
Hello and welcome to another tutorial in this material.

2
00:00:06.490 --> 00:00:10.720
I'm going to continue our discussion on executable binaries.

3
00:00:10.720 --> 00:00:16.270
We looked at the terminal, we said that it's a very important topic and then I recommended that if

4
00:00:16.270 --> 00:00:23.110
you're using macOS or Linux, try to use the fish application, which is a shell that runs on top of

5
00:00:23.110 --> 00:00:24.280
your current terminal.

6
00:00:25.210 --> 00:00:31.000
It's a very nice interactive and it has a color highlighting and very nice features like other completion

7
00:00:31.000 --> 00:00:36.910
and suggestions for which flags to use for known command line binaries.

8
00:00:36.910 --> 00:00:37.360
Right.

9
00:00:37.360 --> 00:00:43.840
So the executable binary, let's have a quick look at this because this topic is important for understanding

10
00:00:44.200 --> 00:00:47.740
what happens when we go into the VM native image, right?

11
00:00:47.740 --> 00:00:55.480
So first of all, in any operating system, handles your data through files, right?

12
00:00:55.480 --> 00:01:04.690
So files or directories, remember, a directory is just say file that is has a an attribute that tells

13
00:01:04.690 --> 00:01:06.680
the operating system to treat these differently.

14
00:01:06.700 --> 00:01:07.180
Right.

15
00:01:07.180 --> 00:01:13.090
So files are the actual binaries that are stored on your permanent storage right here.

16
00:01:13.090 --> 00:01:19.330
Obviously, if something is in the in the RAM, which is a non permanent storage, we don't call it

17
00:01:19.330 --> 00:01:22.660
file, we, we call it some data that is in the memory.

18
00:01:22.660 --> 00:01:23.050
Right.

19
00:01:23.050 --> 00:01:26.650
So when we say file it means some data that are on permanent storage.

20
00:01:26.650 --> 00:01:33.100
And the way operating systems handle files is that they kind of organize it in the way that the operating

21
00:01:33.100 --> 00:01:34.000
system understands.

22
00:01:34.000 --> 00:01:39.400
That's why the concept of the file system for the operating system comes into play windows, the old

23
00:01:39.400 --> 00:01:42.040
system's fat, 32 fat.

24
00:01:42.040 --> 00:01:47.500
And then Windows switch to NTFS, which was the newer version.

25
00:01:47.500 --> 00:01:55.690
Mac OS used to use the extended file system and now they switch to Apple file system or AP AFS.

26
00:01:55.720 --> 00:01:58.750
Linux also uses its own file system, right?

27
00:01:58.750 --> 00:02:02.200
So file system changes from operating system to operating system.

28
00:02:02.200 --> 00:02:10.810
And that's how basically the operating system organizes the files or your data on the permanent storage,

29
00:02:10.810 --> 00:02:11.290
right?

30
00:02:11.380 --> 00:02:18.280
So every operating system organizes this data and knows how to access and reads the data or store right

31
00:02:18.280 --> 00:02:20.530
to the hard disk in its own way.

32
00:02:20.530 --> 00:02:22.750
And it changes from one operating system to another.

33
00:02:23.530 --> 00:02:28.750
So if you are inside, when you open up terminal, as I mentioned before, you're inside some working

34
00:02:28.750 --> 00:02:29.650
directory, right?

35
00:02:29.650 --> 00:02:33.520
Usually the default working directory is the home directory of the user.

36
00:02:33.520 --> 00:02:40.900
And I mentioned that previously that a computer can have or when you install operating system, you

37
00:02:40.900 --> 00:02:43.570
can define multiple users for that computer.

38
00:02:43.570 --> 00:02:44.020
Right?

39
00:02:44.530 --> 00:02:49.180
And then operating system creates a home directory for every user.

40
00:02:49.180 --> 00:02:56.470
So when some user logs in with their credentials, they are directed to their own home directory and

41
00:02:56.470 --> 00:03:04.000
then they most likely don't have access to other users home directory unless some super user or the

42
00:03:04.000 --> 00:03:11.440
administrator logs in with the administrative privileges and then enables access of one user to the

43
00:03:11.440 --> 00:03:12.730
home directory of another user.

44
00:03:12.730 --> 00:03:13.040
Right.

45
00:03:13.060 --> 00:03:17.410
But by default, one user doesn't have access to other users.

46
00:03:17.410 --> 00:03:19.510
Home directory and home inside the home.

47
00:03:19.510 --> 00:03:24.380
Usually you have the desktops directory, application documents, downloads, etc., right?

48
00:03:24.400 --> 00:03:26.020
Movies, pictures.

49
00:03:26.290 --> 00:03:33.040
So and usually when you install an application as a user, that application usually takes advantage

50
00:03:33.040 --> 00:03:36.070
only or only sees the user's home directory.

51
00:03:36.070 --> 00:03:38.260
It doesn't see the entire computer.

52
00:03:38.260 --> 00:03:38.710
Right.

53
00:03:39.460 --> 00:03:46.720
And if you if you open up terminal and you want to list all the everything that is inside that directory

54
00:03:46.720 --> 00:03:55.210
you use ls in mac OS and Linux in Windows you use die or d r which means the directory ls is the shorthand

55
00:03:55.210 --> 00:03:56.110
for list.

56
00:03:57.200 --> 00:03:59.210
And in hyphen l is a flag.

57
00:03:59.210 --> 00:04:04.850
And I mentioned before that whenever you have a executable binary in the terminal, you type it.

58
00:04:04.880 --> 00:04:06.680
It means it's the name of the application.

59
00:04:06.680 --> 00:04:11.120
And using the path environment variable, the terminal and the operating system can search for that

60
00:04:11.120 --> 00:04:11.570
binary.

61
00:04:11.570 --> 00:04:18.860
In this case it's ls and then hyphen l is a command line argument that we pass to the LS application

62
00:04:19.340 --> 00:04:23.180
and then a hyphen l means they create a long list.

63
00:04:23.180 --> 00:04:23.450
Right?

64
00:04:23.450 --> 00:04:25.880
So format the results in a long version.

65
00:04:27.410 --> 00:04:33.740
If you want to see hidden files, you can say for example, hyphen A, which means all a small a show

66
00:04:33.740 --> 00:04:35.810
hidden entries right here in the fish.

67
00:04:35.810 --> 00:04:39.920
Fish shows you all the flags that are available for a command.

68
00:04:41.010 --> 00:04:48.240
And what you see is that if I run LZ hyphen L inside home directory, the blue is all the stuff that

69
00:04:48.240 --> 00:04:48.750
are here.

70
00:04:48.750 --> 00:04:51.420
And right now they are all directories.

71
00:04:51.420 --> 00:04:57.880
And you see the file permissions or file attributes and the format is, again, this is a format for

72
00:04:57.880 --> 00:05:00.630
a unique space operating system like Mac OS and Linux.

73
00:05:01.230 --> 00:05:08.670
And there are basically ten characters that and one extended character at the right side.

74
00:05:08.670 --> 00:05:13.920
In this case, you see some of them have plus some of them have ADD, some of them don't have any.

75
00:05:13.920 --> 00:05:18.060
So for now, let's focus on this default ten character from left to right.

76
00:05:18.060 --> 00:05:24.840
The first character sets the attribute whether this is a directory or a file.

77
00:05:24.840 --> 00:05:28.380
And again, file and directories are more or less the same thing.

78
00:05:28.380 --> 00:05:33.700
And the only the main difference is that directories have the executable attribute.

79
00:05:33.720 --> 00:05:42.810
What this means is that if you recall, we said when we talked about the terminal, we said that you

80
00:05:42.810 --> 00:05:50.970
can change the behavior of a file from non executable to executable by using the mod command.

81
00:05:50.970 --> 00:05:51.450
Right.

82
00:05:51.450 --> 00:05:59.220
And then it just sets the attribute, this X attribute and you can probably guess that each three,

83
00:05:59.250 --> 00:06:06.750
each group of three characters, you can probably guess what R, W and x are right R is read attribute

84
00:06:07.110 --> 00:06:11.010
w is the right attribute and x is the executable attribute.

85
00:06:11.010 --> 00:06:20.910
And again, because on a computer we have multiple users and some users together can form a group therefore

86
00:06:21.090 --> 00:06:26.280
and therefore we have three types of categories for permissions.

87
00:06:26.280 --> 00:06:28.200
One is the user or the owner.

88
00:06:28.200 --> 00:06:35.340
If I create a file, if I log in with my user credentials and my operating system, let's say I go to

89
00:06:35.340 --> 00:06:39.840
my home directory or desktop or somewhere else and then create a file.

90
00:06:39.870 --> 00:06:45.000
I'm the owner of that file and that file exists on my user account, right?

91
00:06:45.000 --> 00:06:47.370
It doesn't exist on some other user's desktop.

92
00:06:47.370 --> 00:06:52.590
It only exists on my desktop and operating system, organizes and manages this behavior.

93
00:06:53.550 --> 00:07:00.720
But then usually operating systems like Linux, Mac OS, they have from the root directory, they have

94
00:07:00.720 --> 00:07:06.690
a shared directory, which means every user can put a file there and everybody can have permissions

95
00:07:06.690 --> 00:07:09.240
to access, read those files, or maybe write them.

96
00:07:10.080 --> 00:07:17.430
But by default, one user doesn't have access to to the home directory of another user.

97
00:07:17.610 --> 00:07:19.680
Now if I create a file, I'm the owner.

98
00:07:19.680 --> 00:07:24.720
So the first three characters, obviously the first character means it's not a directory.

99
00:07:24.720 --> 00:07:26.730
If I create a text file, it's not a directory.

100
00:07:26.730 --> 00:07:29.700
So instead of having D, I get a dash.

101
00:07:29.700 --> 00:07:33.840
Dash means that attribute is not said or doesn't exist, right?

102
00:07:35.190 --> 00:07:43.380
So basically when you have the means, the attribute that this file or this, uh, for example, applications

103
00:07:43.380 --> 00:07:50.580
is a directory and that attribute is set if and then if it's a hyphen or a dash for the first character

104
00:07:50.580 --> 00:07:52.980
means this is not a directory, it's a file.

105
00:07:54.020 --> 00:07:55.880
Because the attribute for a director is not set.

106
00:07:55.880 --> 00:08:04.250
And as I mentioned, files by default are executable, which means that you can this attribute directory

107
00:08:04.250 --> 00:08:05.210
or file, right?

108
00:08:05.210 --> 00:08:11.750
This first character determines what happens when you double click on a something that operating system

109
00:08:11.750 --> 00:08:12.590
shows you, right?

110
00:08:12.590 --> 00:08:18.260
If it's a directory means it is executable, which means if you double click, some application will

111
00:08:18.260 --> 00:08:19.940
get executed in macros.

112
00:08:19.940 --> 00:08:25.760
We know that if I double click, if I open a window or directory and then double click, what happens

113
00:08:25.760 --> 00:08:31.340
is that the finder application opens up and shows me the inside that directory.

114
00:08:31.340 --> 00:08:36.230
So it means when I double click on that, an application gets executed.

115
00:08:36.230 --> 00:08:43.760
That's why directories always have this x permission, which means directories are executable.

116
00:08:43.760 --> 00:08:48.920
Which executable means what happens in the graphical interface of your operating system?

117
00:08:48.920 --> 00:08:53.870
What happens if you double click on that on that file right now?

118
00:08:53.870 --> 00:09:00.110
If you remove if if there is a directory and then you remove this D permission, right?

119
00:09:00.110 --> 00:09:02.990
And then it's no longer going to be a directory.

120
00:09:02.990 --> 00:09:05.780
So let's head to, for example, eclipse here.

121
00:09:05.780 --> 00:09:13.520
This is our previous example and I am going to first of all, let's open up terminal here in this root

122
00:09:13.520 --> 00:09:16.280
directory of our project, right?

123
00:09:16.370 --> 00:09:17.570
So let's see what happens.

124
00:09:17.570 --> 00:09:25.190
This is our current working directory and if I say LS is just shows me that I have these kind of things

125
00:09:25.190 --> 00:09:30.710
and this coloring applies to directories and by default my very nice fee shell.

126
00:09:30.740 --> 00:09:34.580
It tells me that a directory is distinguished with a file.

127
00:09:34.640 --> 00:09:39.590
If there is a forward slash here, which means this test tree is definitely a directory in the file.

128
00:09:39.590 --> 00:09:40.040
Right?

129
00:09:40.280 --> 00:09:44.390
If I say ls hyphen a it shows me also the hidden files.

130
00:09:44.390 --> 00:09:52.280
So current directory the parent directory dot class path dot project dot settings which is a directory

131
00:09:52.280 --> 00:09:53.210
as you can see.

132
00:09:54.230 --> 00:09:57.020
So this coloring very nice distinguishes them.

133
00:09:57.020 --> 00:10:04.820
The other way to distinguish a directory with a file is that this feature adds a forward slash to the

134
00:10:04.820 --> 00:10:12.170
end of the the names that are directories, whereas these two dot class path and dot d store or dot

135
00:10:12.170 --> 00:10:16.670
project, these don't end with forward slash, which means these are files, right.

136
00:10:16.670 --> 00:10:21.320
And obviously we know that every directory in every operating system has two hidden directories.

137
00:10:21.560 --> 00:10:26.270
One is the current directory and the other one is dot dot, which is the parent directory.

138
00:10:26.270 --> 00:10:32.450
And then you can use the CD or change directory, command, dot, dot forward slash and then you go

139
00:10:32.450 --> 00:10:34.460
to the parent directory, right.

140
00:10:34.460 --> 00:10:40.490
And then I can go back to the directory itself.

141
00:10:40.490 --> 00:10:40.970
Right.

142
00:10:41.660 --> 00:10:46.190
But then the idea here is that for directories, if you're just changing the directory, you don't need,

143
00:10:46.190 --> 00:10:49.130
for example, to type the forward slash.

144
00:10:49.220 --> 00:10:56.300
I mean, it's recommended to always type the forward slash so that you explicitly distinguish between

145
00:10:56.300 --> 00:10:57.470
a file and a directory.

146
00:10:57.470 --> 00:11:04.370
But even if you don't type it, the terminal has no problem understanding that because of the file attributes

147
00:11:04.370 --> 00:11:05.270
or for permission.

148
00:11:05.270 --> 00:11:07.730
So if I say a CD, let's go up.

149
00:11:08.000 --> 00:11:10.700
So instead of using the forward slash, I'm not going to use it.

150
00:11:10.700 --> 00:11:11.780
It still works fine.

151
00:11:11.780 --> 00:11:13.370
It goes to the parent directory.

152
00:11:13.790 --> 00:11:14.510
Let's kill it up.

153
00:11:14.540 --> 00:11:17.360
Say ls hyphen l line long list.

154
00:11:17.390 --> 00:11:19.220
Now you see what happens here is that.

155
00:11:21.300 --> 00:11:28.890
But as you can see, all these attributes and let's also combine the A hyphen L with hyphen L, hyphen

156
00:11:28.890 --> 00:11:32.250
a, hyphen l or you can combine them hyphen a l.

157
00:11:32.580 --> 00:11:38.340
So it shows me the current directory, parent directory, some files and then some directories, right?

158
00:11:38.340 --> 00:11:40.380
And again, this forward slash is there.

159
00:11:40.380 --> 00:11:41.490
So it shows me that.

160
00:11:41.700 --> 00:11:49.410
But besides that, it also tells me that directories have the directory attribute to set, whereas the

161
00:11:49.410 --> 00:11:53.460
files don't have this character set to it's hyphen.

162
00:11:53.460 --> 00:11:56.010
Hyphen means this attribute is not set.

163
00:11:56.160 --> 00:11:56.730
All right.

164
00:11:56.850 --> 00:12:05.880
And you see every directory has a executable attribute set, whereas a file a by default it doesn't

165
00:12:05.880 --> 00:12:10.470
have it's a executable attribute set.

166
00:12:10.470 --> 00:12:20.250
So a directory is executable in the sense that basically if I open up a finder window, which is the

167
00:12:20.250 --> 00:12:24.740
way the operating system provides file management to the user, this is a directory.

168
00:12:24.750 --> 00:12:27.150
It means it's a file that is executable.

169
00:12:27.150 --> 00:12:33.240
So if I double click on it, something happens, some application gets executed, and that application

170
00:12:33.240 --> 00:12:38.430
is the actual finder itself on Windows, it's file explorer, for example, right?

171
00:12:38.640 --> 00:12:44.640
Because then it gets executed and it loads the contents of that directory.

172
00:12:44.760 --> 00:12:49.380
That's why when you see when you look at the file attributes of a directory, you see that it's directory,

173
00:12:49.380 --> 00:12:53.100
but it's always executable, which could sound a little bit odd.

174
00:12:53.100 --> 00:12:56.830
Why do why do directories have an executable attribute?

175
00:12:56.850 --> 00:13:01.620
That's because when you double click on them, some application gets executed, which is actually the

176
00:13:01.620 --> 00:13:06.240
finder or whatever file explorer that the operating system provides.

177
00:13:06.240 --> 00:13:06.690
Right.

178
00:13:07.020 --> 00:13:08.910
That's why directories are executable.

179
00:13:09.810 --> 00:13:21.300
Now, if I if I show my hidden files in Mac OS, right, so if I go to, uh, here and then uh, so

180
00:13:21.480 --> 00:13:22.500
let's see.

181
00:13:24.650 --> 00:13:27.410
So we go into the job and this is our project.

182
00:13:27.410 --> 00:13:28.940
That's what we're looking at in Eclipse.

183
00:13:28.940 --> 00:13:30.490
There is a file here, right?

184
00:13:30.500 --> 00:13:36.950
If I double click on this, nothing that happens because this extension dot project is not unknown to

185
00:13:36.950 --> 00:13:38.090
the operating system.

186
00:13:38.090 --> 00:13:41.300
That's why these don't have an executable attribute.

187
00:13:42.580 --> 00:13:51.220
And we said that you can actually a script, write a script, shell scripts and they usually end with

188
00:13:51.220 --> 00:13:52.100
that set.

189
00:13:52.120 --> 00:14:00.170
So let's let's say a touch, let's create a file in this Java native image directory called run media

190
00:14:00.190 --> 00:14:00.630
search.

191
00:14:00.640 --> 00:14:02.770
So touch means just create a file.

192
00:14:03.160 --> 00:14:09.310
So you see run media SSH is created and then we're going to put some text here.

193
00:14:09.880 --> 00:14:16.390
So the way you can do it in terminal, you can for example run VM or I'm just going to say concatenate

194
00:14:16.390 --> 00:14:26.200
with the cat command ls hyphen le and then I'm going to redirect this to run media search.

195
00:14:26.630 --> 00:14:27.790
Let's allow these.

196
00:14:29.640 --> 00:14:32.130
Uh, so, uh, let's.

197
00:14:32.130 --> 00:14:34.890
Let's look at the contents of these in the editor.

198
00:14:34.930 --> 00:14:35.730
Nothing went there.

199
00:14:35.730 --> 00:14:37.890
So I think what we need to do.

200
00:14:38.500 --> 00:14:39.810
Uh, let's see.

201
00:14:41.040 --> 00:14:48.390
Oh, so what we need to do, we actually need to, I guess, equate so echo this text say ls hyphen

202
00:14:48.390 --> 00:14:54.720
l a but then instead of redirecting to the terminal, we redirect the output of this echo command to

203
00:14:54.720 --> 00:14:55.050
a file.

204
00:14:55.050 --> 00:14:55.500
Right?

205
00:14:55.860 --> 00:15:02.070
And then if I say less, run me that it is less is a command line application that shows the contents.

206
00:15:02.070 --> 00:15:07.830
It says ls hyphen la and we hit Q We go, All right now if I do ls hyphen le.

207
00:15:07.860 --> 00:15:12.480
It tells me that this ran me right now it's not a directory, right?

208
00:15:12.990 --> 00:15:22.290
And then what happens if we change its mod change mod c mod plus directory run meta search it says invalid

209
00:15:22.290 --> 00:15:24.120
file mod plus d, right?

210
00:15:24.120 --> 00:15:29.880
So you cannot really convert the attribute of the directory to non directory.

211
00:15:29.880 --> 00:15:32.100
I mean that's something that the operating system determines.

212
00:15:32.100 --> 00:15:32.550
Right.

213
00:15:33.210 --> 00:15:38.070
But for the rest of our attributes, read, write executable, you can change that.

214
00:15:38.850 --> 00:15:40.620
So that's the first thing we want to do, right?

215
00:15:40.620 --> 00:15:48.630
If I say from current way to run me that search, it says the file run meta search is not executable

216
00:15:48.630 --> 00:15:53.970
by this user because if you look at the attributes, the first three characters after the first character,

217
00:15:54.000 --> 00:15:57.360
it's our W and executable for the user.

218
00:15:57.360 --> 00:16:01.320
I'm the owner of this file because I just created it in my user account.

219
00:16:01.590 --> 00:16:10.680
So we're going to say see mod change the mod of this file to plus x at the plus x and then run me that

220
00:16:10.770 --> 00:16:11.390
search.

221
00:16:11.400 --> 00:16:20.100
And now if we clear and look at ls hyphen le, it tells me that again now the user has x attribute and

222
00:16:20.100 --> 00:16:24.270
then everybody, even the group has x attribute, everybody else has x attributes.

223
00:16:24.270 --> 00:16:34.650
So when you say mod plus x, everybody gets a attributes in terms of executing and the fish shell also

224
00:16:34.650 --> 00:16:40.830
changes the color to red and puts an asterisk here, which means this is executable.

225
00:16:41.580 --> 00:16:48.750
Basically, it means this is an executable file and you as you have the basically rights or the permissions

226
00:16:48.750 --> 00:16:52.680
to execute it, this asterisk means you have the permission to execute it.

227
00:16:52.680 --> 00:16:59.940
So if I say run me dot search, it's basically runs the command that is inside here ls hyphen la right.

228
00:17:00.750 --> 00:17:03.300
And that's how this works.

229
00:17:03.300 --> 00:17:06.240
So you can create shell commands, for example.

230
00:17:06.240 --> 00:17:17.070
Here I can also after this I'm going to create another one seed and then saying that ls hyphen le and

231
00:17:17.070 --> 00:17:21.390
then seed go to basically the name again.

232
00:17:22.140 --> 00:17:23.270
So join ATP.

233
00:17:23.490 --> 00:17:28.230
So we want to this shell command a script has four commands, so let's see what happens.

234
00:17:28.440 --> 00:17:33.930
Now we change its content, but it's still executable so we can just run it.

235
00:17:34.020 --> 00:17:38.580
So if you modify it, the attribute of the executable is still set.

236
00:17:38.580 --> 00:17:40.320
So you can just say, run me.

237
00:17:40.590 --> 00:17:50.550
And as you can see, this is the output of the first command ls hyphen le and then we are going to the

238
00:17:50.550 --> 00:17:54.480
one level up and then running the second command.

239
00:17:54.480 --> 00:18:02.040
The third command ls hyphen le but then we change the directory back again to the um to the void where

240
00:18:02.040 --> 00:18:03.000
we started.

241
00:18:03.000 --> 00:18:03.330
Right.

242
00:18:03.330 --> 00:18:09.240
So you can change these commands and then every line gets executed, the output, the terminal shows

243
00:18:09.240 --> 00:18:11.610
your output and then you can.

244
00:18:12.330 --> 00:18:12.560
Yeah.

245
00:18:12.630 --> 00:18:12.900
Yeah.

246
00:18:12.900 --> 00:18:20.850
So in macros and Linux you can use the dot as such a script to write terminal scripts and then in order

247
00:18:20.850 --> 00:18:30.300
to make them executable, you can basically use the command and change their set, their executable

248
00:18:30.300 --> 00:18:30.810
permission.

249
00:18:30.810 --> 00:18:38.580
For example, you can just type Java, hyphen, hyphen, virgin and I'm going to just run this again

250
00:18:38.580 --> 00:18:45.840
and it tells me Java seven so it exactly runs this command write Java and you see you will see that

251
00:18:45.840 --> 00:18:52.260
later on when we get actually to the compiling our Java application using a native image we can we will

252
00:18:52.260 --> 00:18:58.500
write a shell commands shell script to automate the process and makes it much easier.

253
00:18:58.500 --> 00:19:01.560
And when you write the shell script, you can make it executable.
