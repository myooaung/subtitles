WEBVTT
1
00:00:01.090 --> 00:00:03.870
Hello and welcome to another tutorial.

2
00:00:03.880 --> 00:00:10.600
We are going to continue our discussion on how to set up a default compiler toolchain on different platforms.

3
00:00:10.810 --> 00:00:15.250
We looked at macros and Linux and now let's look at Windows and we said that Windows is a little bit

4
00:00:15.250 --> 00:00:22.570
different because obviously Windows doesn't come by default with its platform toolchain and by toolchain

5
00:00:22.570 --> 00:00:29.410
we mean the compiler that people who develop the windows, Microsoft, they also develop their own compiler,

6
00:00:29.410 --> 00:00:33.190
which is called MSK, Microsoft visual compiler.

7
00:00:33.550 --> 00:00:35.740
So you have to kind of go there and install it.

8
00:00:35.740 --> 00:00:39.670
And when you install it, it basically it's a very big application.

9
00:00:39.670 --> 00:00:45.820
It has a very nice IDE, a lot of features built into that ID, but it also provides the it also comes

10
00:00:45.820 --> 00:00:50.890
with the command line tools, which means you can just call the compiler in the terminal, in the command

11
00:00:50.890 --> 00:00:53.740
line in Windows and manually compile a CPP file.

12
00:00:53.770 --> 00:00:55.660
Obviously, Microsoft doesn't recommend that.

13
00:00:55.660 --> 00:01:03.160
So Microsoft recommends that you open up the Microsoft Visual Studio ID and then and then just use the

14
00:01:03.160 --> 00:01:10.090
ID because ID does a lot of stuff behind the scenes to make the compilation much easier and it's free.

15
00:01:10.360 --> 00:01:16.450
The community edition is free, so you can just download it and use it free of charge.

16
00:01:16.450 --> 00:01:25.660
And then if you want to basically use the command line tools that come with the Microsoft Visual Studio,

17
00:01:25.660 --> 00:01:31.000
which is the compiler that is available on the terminal to compile a C++ application, you have to make

18
00:01:31.000 --> 00:01:37.330
sure that you add the the corresponding directories that you need to add to the past environment very

19
00:01:37.330 --> 00:01:37.930
well in Windows.

20
00:01:37.930 --> 00:01:45.070
And we say that in Windows, the environment variables are are in between double percent in Mac OS and

21
00:01:45.070 --> 00:01:45.430
Linux.

22
00:01:45.430 --> 00:01:47.050
They just start with dollar sign.

23
00:01:47.320 --> 00:01:51.970
And then the problem is that with RMS, we see there are a lot of directories that you have to add to

24
00:01:51.970 --> 00:01:56.740
the path and I believe when you install it by default, it doesn't add them to the path environment

25
00:01:56.740 --> 00:01:57.070
variable.

26
00:01:57.070 --> 00:02:00.880
So this ends up something that you have to manually do.

27
00:02:00.880 --> 00:02:08.440
Now the good thing is that they actually provide a shell executable, a script that you can just run

28
00:02:08.440 --> 00:02:14.080
in the terminal, in the command line, in Windows, and that automatically appends a lot of stuff,

29
00:02:14.080 --> 00:02:16.150
all the necessary directories to the path.

30
00:02:16.150 --> 00:02:21.850
And in the past I've shown you how to append more directories to the path environment variable on mac

31
00:02:21.850 --> 00:02:22.720
os and Linux.

32
00:02:22.720 --> 00:02:25.150
Same story can be applied to Windows.

33
00:02:25.150 --> 00:02:30.640
Just know that in Windows the path separator is semicolon instead of column.

34
00:02:30.640 --> 00:02:37.720
So in in windows it's a semicolon, the path separator, right?

35
00:02:39.370 --> 00:02:48.070
So the path separator is a semicolon instead of colon or so it's a dot and then a comma, right semicolon.

36
00:02:49.090 --> 00:02:56.440
So in order to download the Visual Studio, you have to go to Visual Studio, Microsoft.com slash downloads

37
00:02:56.440 --> 00:03:00.340
and then choose the obviously the community edition, which is free.

38
00:03:00.340 --> 00:03:07.600
And then there you download the a very small application which is the actual installer.

39
00:03:07.600 --> 00:03:14.530
So it's not the actual application, it's the installer you download it and when you run it, it installs

40
00:03:14.530 --> 00:03:21.740
the installer for Visual Studio and then after that it asks you which components you want to install.

41
00:03:21.910 --> 00:03:27.160
So Visual Studio has a core, which is the idea, but then a lot of let's say plug ins or components,

42
00:03:27.160 --> 00:03:31.840
a lot of extra or additional components that you can install.

43
00:03:31.840 --> 00:03:37.480
And after that it just goes to Microsoft Repository and downloads the files that need to be installed.

44
00:03:37.480 --> 00:03:42.040
So the this file that you download is very small file because it's the installer.

45
00:03:42.040 --> 00:03:50.110
And then then after you select the items in the installer, then it downloads the entire thing.

46
00:03:50.110 --> 00:03:54.840
So and that big download is like it takes a lot of time, right?

47
00:03:54.850 --> 00:03:56.410
It's a couple of gigabytes.

48
00:03:57.460 --> 00:04:03.190
And so the build tool in Windows, again it's the Microsoft visual compiler.

49
00:04:03.190 --> 00:04:08.920
And then on the terminal, once you add the proper directories after installing the RMS, we see if

50
00:04:08.920 --> 00:04:14.560
you add the proper directories to the PATH environment variables, then the compiler, the name of the

51
00:04:14.560 --> 00:04:17.740
compiler or the executable is CL or CL exit.

52
00:04:17.770 --> 00:04:23.200
We know that in Mac OS and Linux, the executable files don't have any extension.

53
00:04:23.200 --> 00:04:29.380
In Windows they have dot XY, but in the terminal on the command line, it doesn't matter if you just

54
00:04:29.380 --> 00:04:35.290
name the type, the name or with or without the dot x extension to the command line in windows.

55
00:04:35.290 --> 00:04:36.100
It doesn't matter.

56
00:04:36.100 --> 00:04:39.970
So I recommend don't use the dot exit, just type the CL.

57
00:04:39.970 --> 00:04:46.900
So CL is the command line and you see the directory in Microsoft Visual Studio is called CLI or command

58
00:04:46.900 --> 00:04:47.890
line interface.

59
00:04:47.890 --> 00:04:50.590
And CL is the command line or the compiler.

60
00:04:50.590 --> 00:04:51.070
Right?

61
00:04:51.280 --> 00:04:56.410
So you pass the CP file to the CL and then you compile.

62
00:04:56.410 --> 00:05:00.430
And again in Mac OS and Linux, usually we type C++, for example.

63
00:05:00.590 --> 00:05:04.620
Use there to use the compiler or the toolchain in windows.

64
00:05:04.800 --> 00:05:07.650
On the command line you type CL or CL exit.

65
00:05:09.380 --> 00:05:15.440
MSC provides a script that can be easily run to set up all the necessary directories, and these scripts

66
00:05:15.440 --> 00:05:16.310
are very important.

67
00:05:16.310 --> 00:05:18.100
I'm going to show you how to actually do it.

68
00:05:18.110 --> 00:05:22.130
So you go to after you install the MSC, which I recommend.

69
00:05:22.280 --> 00:05:24.710
Choose the default location for installation.

70
00:05:24.710 --> 00:05:29.600
Let's say your root directory is C and then program is Microsoft Visual Studio.

71
00:05:29.630 --> 00:05:31.460
This is the version the year, right?

72
00:05:31.460 --> 00:05:37.100
I'm using 2022 community we see which is the visual compiler auxiliary.

73
00:05:37.100 --> 00:05:43.700
So there is an auxiliary directory there and which means this directory has some helper files or files

74
00:05:43.700 --> 00:05:44.540
that are help.

75
00:05:44.540 --> 00:05:49.600
Just help you set up the environment, development environment and there is a build which means that

76
00:05:49.640 --> 00:05:55.460
this build folder has the files that help you set up the build environment variable.

77
00:05:56.420 --> 00:06:03.440
And then the Microsoft compiler allows you to select whether 32 bit or 64 bit compilation mode.

78
00:06:03.860 --> 00:06:05.720
I believe in Mac OS or Linux.

79
00:06:05.720 --> 00:06:11.510
You don't have the option because they only come with a 64 bit version, at least I'm sure about Max.

80
00:06:11.510 --> 00:06:12.020
I'm not sure.

81
00:06:12.020 --> 00:06:18.980
Maybe there is also some versions of the Linux that are still 32 bit, but Max is now fully 64 bit.

82
00:06:18.980 --> 00:06:22.760
And then after that, these days they switch to the ARM architecture.

83
00:06:22.760 --> 00:06:24.230
So it's a different story.

84
00:06:24.230 --> 00:06:30.650
So here you can select this file we see, which means visual compiler VARs, which means environment

85
00:06:30.650 --> 00:06:31.460
variables.

86
00:06:32.330 --> 00:06:34.700
And then you say set it up for 64 bit.

87
00:06:34.700 --> 00:06:35.240
Right?

88
00:06:35.990 --> 00:06:41.990
The bad means it's a basically executable script for the command line.

89
00:06:41.990 --> 00:06:43.700
So you kind of drag this file.

90
00:06:43.700 --> 00:06:47.690
V C was 64 dot path to the command line and hit enter.

91
00:06:47.690 --> 00:06:53.180
It runs, it executes and then sets up the path environment variable correctly.

92
00:06:53.390 --> 00:06:58.850
So this sets up the directory for the 64 bit Microsoft compiler to the path environment variable.

93
00:06:58.850 --> 00:07:05.710
And after that you can type KL hyphen hyphen version to check that command line terminal can find a

94
00:07:06.380 --> 00:07:08.360
microsoft compiler correctly or not.

95
00:07:08.360 --> 00:07:16.910
After that you are set that now the terminal is ready and it can the default toolchain is correctly

96
00:07:16.910 --> 00:07:24.080
recognized by the terminal and then we can just create a simple helloworld dhcp and compile it and then

97
00:07:24.170 --> 00:07:28.370
using the CL command and then hello, all that cpp and then we can execute it.

98
00:07:28.370 --> 00:07:28.940
All right.

99
00:07:30.000 --> 00:07:36.720
Now to show you again after you run the receiver, 64 at bat.

100
00:07:36.720 --> 00:07:41.070
So here I just dragged the file here to the terminal and then hit enter.

101
00:07:41.070 --> 00:07:48.480
It says Visual Studio 22 Developer Command Prompt and then environment initialize for x 64.

102
00:07:48.480 --> 00:07:56.250
Again, if you want to compile in a 32 bit mode, you drag the VC vars 32 if you want to compile in

103
00:07:56.250 --> 00:08:03.360
a 64 beat mode, which is the default compilation these days, you drag the VC for 64 and after everything

104
00:08:03.360 --> 00:08:09.870
is successful it says that environment initialized for X 64 and then after that you can create a helloworld

105
00:08:09.870 --> 00:08:10.460
anchor part.

106
00:08:10.470 --> 00:08:18.240
And just to show you after you do this and if you look at the path environment variable in the terminal,

107
00:08:18.240 --> 00:08:23.640
you see a lot of directories from Microsoft Visual Studio have been added to the past, a few directories

108
00:08:23.640 --> 00:08:31.560
from the system 32, for example, Windows key to dot net.

109
00:08:31.830 --> 00:08:37.170
So and also some of the system 32 bit kernel directories for compilation.

110
00:08:37.170 --> 00:08:40.080
But you see, I mean manually setting these up is very tedious.

111
00:08:40.290 --> 00:08:42.690
There are a lot of directories involved.

112
00:08:42.690 --> 00:08:46.470
So let's head to Windows and I will actually show you how to do this.

113
00:08:46.470 --> 00:08:53.880
So I've already installed the Microsoft Microsoft Visual Studio, but in general, you go to let's see,

114
00:08:53.880 --> 00:08:57.180
what was the name of the directory.

115
00:08:57.180 --> 00:09:01.050
So Visual Studio dot microsoft.com slash download.

116
00:09:01.050 --> 00:09:08.400
So let's copy this, go to windows and paste this here Visual Studio dot microsoft.com downloads.

117
00:09:08.400 --> 00:09:08.910
Right?

118
00:09:09.240 --> 00:09:17.310
And then you click on this community edition which is free and then basically download Visual Studio

119
00:09:17.310 --> 00:09:19.710
and the file should pop up here.

120
00:09:19.710 --> 00:09:21.450
Yeah, let's open the directory.

121
00:09:21.810 --> 00:09:24.630
And I already downloaded this installer.

122
00:09:24.630 --> 00:09:30.210
Remember, this is not the entire basically installation file, right?

123
00:09:30.210 --> 00:09:32.010
This is only 1.6 megabytes.

124
00:09:32.010 --> 00:09:39.540
So this is just a small size file which actually is called the installer, Visual Studio Installer.

125
00:09:39.540 --> 00:09:39.990
Right.

126
00:09:41.060 --> 00:09:42.230
So let's close this.

127
00:09:42.230 --> 00:09:49.730
So this takes some time to set up and after that it shows you a interface agree that tells you what

128
00:09:49.730 --> 00:09:51.920
you want to do, like which items to select.

129
00:09:51.920 --> 00:09:57.220
And after that it goes and downloads those items and installs the Microsoft visual.

130
00:09:57.230 --> 00:10:04.220
So then it takes a lot of time, but here I'm just going to show you the steps so that you're familiar.

131
00:10:04.220 --> 00:10:12.800
And here when this installer runs, it already checks your operating system to see if a Visual Studio

132
00:10:12.800 --> 00:10:14.000
has been already installed.

133
00:10:14.000 --> 00:10:23.270
Let's say previously you've installed or basically other versions of Visual Studio and now you have

134
00:10:23.270 --> 00:10:25.910
the option to upgrade the current version, right?

135
00:10:27.230 --> 00:10:32.600
So let's wait for these to bring up the installer and see what happens.

136
00:10:34.420 --> 00:10:36.010
And what I'm going to do.

137
00:10:36.010 --> 00:10:42.160
I'm going to also open a command prompt, which is a steel comes with windows.

138
00:10:42.160 --> 00:10:44.620
There is a newer version of PowerShell which is a little bit different.

139
00:10:44.620 --> 00:10:48.940
But for the sake of these tutorials, I'm going to work with the command prompt.

140
00:10:48.970 --> 00:10:57.220
If I say class, hyphen, hyphen, virgin, hyphen, hyphen, virgin and hit enter, it's not going

141
00:10:57.220 --> 00:10:58.720
to recognize the command prompt.

142
00:10:58.720 --> 00:11:01.390
And if I say echo percent path.

143
00:11:03.750 --> 00:11:04.050
Okay.

144
00:11:04.050 --> 00:11:09.630
So this is liking that if I say path A, you see none of the visual.

145
00:11:09.810 --> 00:11:12.950
None of the Visual Studio directories are included.

146
00:11:12.960 --> 00:11:14.370
So we have to fix this.

147
00:11:14.370 --> 00:11:24.420
And the way we fix this is by running that basically a shell script or command prompt script.

148
00:11:24.570 --> 00:11:29.550
So it tells me that you've already installed this visual is to do committee 2022.

149
00:11:29.550 --> 00:11:36.300
If you haven't installed it, then you select it and you select like C++ libraries or DOT net frameworks,

150
00:11:36.300 --> 00:11:41.100
etc. and then it goes and downloads them and then install, install them and it takes a long time.

151
00:11:41.610 --> 00:11:46.050
So it tells me that enterprise or professional editions are also available.

152
00:11:46.050 --> 00:11:52.380
Obviously I'm just interested in the free version, which is the community and there is an update available,

153
00:11:52.380 --> 00:11:54.540
but I'm not going to do any updates.

154
00:11:54.540 --> 00:11:54.990
Right.

155
00:11:56.130 --> 00:11:56.670
All right.

156
00:11:56.670 --> 00:12:03.240
So at the moment, our terminal doesn't understand cannot find the default toolchain, which is SVC.

157
00:12:03.270 --> 00:12:09.660
What we're going to do is we're going to open up a directory and then go to the root directory, which

158
00:12:09.660 --> 00:12:17.850
is our C directory and then a program files and then Microsoft Visual Studio 2022 Community Edition.

159
00:12:17.850 --> 00:12:23.310
And then we see visual compiler auxiliary and then build.

160
00:12:23.520 --> 00:12:29.640
And here there is a script called we see VARs 64.

161
00:12:29.640 --> 00:12:38.250
I'm going to drag it here and hit enter and this is going to execute this and append the correct directory

162
00:12:38.250 --> 00:12:47.250
to my path environment variable so that the terminal now can find the executable compiler which is KL

163
00:12:47.280 --> 00:12:48.780
hyphen hyphen Virgin.

164
00:12:48.780 --> 00:12:55.710
And now it says that the terminal can find the C++ compiler for 64 bit compilation mode.

165
00:12:56.250 --> 00:12:56.970
And then

166
00:13:00.120 --> 00:13:06.030
so you can also say, for example, CL exit in Windows, it doesn't matter, right?

167
00:13:07.940 --> 00:13:08.300
All right.

168
00:13:08.300 --> 00:13:12.470
So what we're going to do next is that now we're going to I created this.

169
00:13:12.830 --> 00:13:16.490
So let's go to desktop, desktop.

170
00:13:16.490 --> 00:13:19.430
And in this test directory, I've created this.

171
00:13:19.430 --> 00:13:23.780
And then here I'm going to create a text file called Helloworld Dot CP.

172
00:13:23.810 --> 00:13:29.840
Just want to make sure that we can compile hello world dot CP.

173
00:13:29.840 --> 00:13:32.720
We're going to change the extension and we accept that.

174
00:13:33.710 --> 00:13:38.030
And then I'm going to basically open it with a text editor.

175
00:13:39.660 --> 00:13:40.110
Here.

176
00:13:40.110 --> 00:13:47.640
We're just going to do a quick hello world so we're going to say that include IO Extreme and then into

177
00:13:47.640 --> 00:13:48.390
main.

178
00:13:48.690 --> 00:13:53.940
We're not going to take any command line arguments at the moment and then we're going to that we're

179
00:13:53.940 --> 00:14:08.130
going to say that stdc out hello world from C++ in Windows and then we push a and line character backslash

180
00:14:08.130 --> 00:14:11.310
and also right and then we save this.

181
00:14:12.060 --> 00:14:21.180
And now we're going to compile we say HCL and then hello world dot CP hyphen out and name the output

182
00:14:21.180 --> 00:14:28.170
file my app and then o has been deprecated and will be removed in future release.

183
00:14:28.170 --> 00:14:28.980
But.

184
00:14:31.160 --> 00:14:32.120
Let's see.

185
00:14:32.950 --> 00:14:33.080
See?

186
00:14:33.350 --> 00:14:33.670
Plus.

187
00:14:33.890 --> 00:14:37.450
So, yeah, I mean, the compilation worked fine.

188
00:14:37.460 --> 00:14:44.480
It says it gives us some warnings, but still it tells me that it created the my app dot.

189
00:14:45.230 --> 00:14:52.970
So if we go back to this test directory, you see we have this my app, that exam and here's one of

190
00:14:52.970 --> 00:15:00.620
the main differences between executing an application in a Windows versus Linux and Mac in Windows.

191
00:15:00.620 --> 00:15:07.370
The current working directory is already added to the past environment variable in Mac OS.

192
00:15:07.730 --> 00:15:10.070
So right now we have this my app hello world.

193
00:15:10.070 --> 00:15:10.640
Right.

194
00:15:10.790 --> 00:15:17.210
And I can directly type if you have an executable in Mac OS or Linux, you have to tell it from the

195
00:15:17.210 --> 00:15:18.560
current working directory.

196
00:15:18.560 --> 00:15:20.450
Execute my app dot exit.

197
00:15:20.750 --> 00:15:26.360
But in windows you don't do that because dot or the current working directory is already added to the

198
00:15:26.360 --> 00:15:27.910
path environment variable.

199
00:15:27.920 --> 00:15:28.400
Right.

200
00:15:28.730 --> 00:15:34.430
And the other thing is that just like Mac OS and Linux, you don't need to type the DOT exe extension

201
00:15:34.430 --> 00:15:35.210
by default.

202
00:15:35.210 --> 00:15:40.040
Whenever you type the name of an application to the terminal or command line, it assumes that it's

203
00:15:40.040 --> 00:15:41.330
an executable.

204
00:15:41.780 --> 00:15:45.950
So if I hit enter here it is still works.

205
00:15:45.950 --> 00:15:46.150
Fine.

206
00:15:46.160 --> 00:15:48.200
Hello, volt from C++ in Windows.

207
00:15:48.200 --> 00:15:55.490
All right, so you don't need to say dot forward slash or backward slash my app because the current

208
00:15:55.490 --> 00:16:01.910
working directory is already appended to the path that's only specific to Windows in macOS and Linux.

209
00:16:01.910 --> 00:16:06.050
The current working directory is not appended to the path.

210
00:16:06.050 --> 00:16:10.580
That's why you always type dot forward slash the name of the executable.

211
00:16:11.510 --> 00:16:15.560
Now if I echoed the path environment variable again, you see that a lot.

212
00:16:15.620 --> 00:16:23.120
All the necessary directories for the CLI or command line interface of the Microsoft Visual Studio have

213
00:16:23.120 --> 00:16:25.850
been appended to the PATH environment variable.

214
00:16:25.850 --> 00:16:32.990
That's why we can just type the CL and it can find a C++ compiler for the 64 bit mode.

215
00:16:32.990 --> 00:16:33.530
All right.

216
00:16:34.610 --> 00:16:42.350
Now, the other thing that I want to point out now, let's try to get some basically command line arguments,

217
00:16:42.350 --> 00:16:47.720
which is the same idea in Windows compared to Mac OS or Linux.

218
00:16:47.720 --> 00:16:56.120
So we say end RC and then character or array of strings or V, which is an area of strings.

219
00:16:56.480 --> 00:17:05.780
And then we're going to therefore size T equals zero ie less than arch C++.

220
00:17:05.810 --> 00:17:15.710
We're going to just push these command line arguments to the ARG, to the console output.

221
00:17:15.710 --> 00:17:16.220
Right?

222
00:17:17.270 --> 00:17:19.760
And then we also push a backslash.

223
00:17:19.760 --> 00:17:22.580
N So we save this.

224
00:17:23.550 --> 00:17:37.830
And then we say CL and then hello world CP hyphen or my app and it creates the my app that exist, right?

225
00:17:37.830 --> 00:17:45.240
So if I say my app or my app that exists now, it also prints out.

226
00:17:45.240 --> 00:17:53.310
So we know that in C++ the first argument it always is always the name of the app is always the name

227
00:17:53.310 --> 00:17:58.830
of the application, exactly the way you type it on the terminal so I can say my app.

228
00:17:59.370 --> 00:18:04.860
Hello, how are you doing?

229
00:18:04.860 --> 00:18:05.460
Right.

230
00:18:05.580 --> 00:18:07.500
And it tells me my app.

231
00:18:07.500 --> 00:18:09.030
Hello, how are you doing?

232
00:18:09.030 --> 00:18:16.290
So we can successfully grab the command line arguments in our C++ in Windows, and later we will see

233
00:18:16.290 --> 00:18:18.420
that the same applies to Java.

234
00:18:18.420 --> 00:18:20.730
Obviously Java is platform independent.

235
00:18:20.730 --> 00:18:27.420
That's why you are basically more familiar with the Java applications in Windows.

236
00:18:27.600 --> 00:18:36.420
But again, the idea is that if I close this terminal and open it again, now I have to run that direct

237
00:18:36.420 --> 00:18:45.420
that file from the receiver 64 again, you just drag it and then hit enter to set up the directories

238
00:18:45.420 --> 00:18:47.280
in the path environment variable again.

239
00:18:47.280 --> 00:18:47.730
Right.

240
00:18:47.730 --> 00:18:54.930
So I mean you can go ahead and run this and then look at the path environment variable to see which

241
00:18:54.930 --> 00:18:56.100
directories are added.

242
00:18:56.100 --> 00:19:01.230
And I've already done this, so you can then go ahead and manually add this to your path environment

243
00:19:01.230 --> 00:19:06.600
variable, which is a little bit tedious, but you can do it so that you don't have to like every time

244
00:19:06.870 --> 00:19:10.770
execute this so that the path environment variable is set up correctly.

245
00:19:10.770 --> 00:19:11.190
Right?

246
00:19:11.610 --> 00:19:19.230
So I hope you enjoy this lecture and have a understanding on how to set up this default toolchain,

247
00:19:19.230 --> 00:19:24.270
which is the Microsoft visual compiler for for the Windows operating system.

248
00:19:24.270 --> 00:19:26.700
Please stay tuned and I'll see the next one.
