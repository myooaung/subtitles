WEBVTT
1
00:00:00.540 --> 00:00:03.600
Hello and welcome to another Java tutorial.

2
00:00:03.600 --> 00:00:09.780
We're going to continue our discussion on Java Native Image and how to compile our Java application

3
00:00:09.780 --> 00:00:10.860
to Native binaries.

4
00:00:10.860 --> 00:00:17.490
And one important thing for this process to understand is the command line argument, because we saw

5
00:00:17.490 --> 00:00:24.150
that native executable binaries, the only way that you interact with them is through the command line,

6
00:00:24.150 --> 00:00:24.480
right?

7
00:00:24.480 --> 00:00:30.330
You execute them through the command line and then they're the only way you can pass information to

8
00:00:30.330 --> 00:00:32.910
the application is using the command line arguments.

9
00:00:32.910 --> 00:00:39.660
And I showed you how to pass the command line arguments to a C++ application.

10
00:00:40.320 --> 00:00:46.980
And as I mentioned, most compilers enforce the fact that the main method must be the entry point or

11
00:00:46.980 --> 00:00:48.540
executable application.

12
00:00:48.540 --> 00:00:55.500
If you don't add the main method, then the compiler refuses to compile, but then you can still compile

13
00:00:55.500 --> 00:00:57.090
your application to libraries.

14
00:00:57.090 --> 00:01:01.740
So library means it's something it's a collection of functions or methods, right?

15
00:01:01.740 --> 00:01:03.990
That don't need to be executed.

16
00:01:03.990 --> 00:01:08.550
But you can use these functions in other programs or in other applications.

17
00:01:08.550 --> 00:01:16.710
And we saw that if you don't provide any RC or RTV to your main function in C++, the compiler assumes

18
00:01:16.710 --> 00:01:23.340
that you're not taking any you're not your application is not going to ask for any command line arguments

19
00:01:23.340 --> 00:01:24.210
from the user.

20
00:01:24.210 --> 00:01:30.480
So you are allowed to remove this signature and you can say int main empty round brackets and then put

21
00:01:30.480 --> 00:01:31.380
your applications.

22
00:01:31.380 --> 00:01:36.450
And we said that in modern C++ you don't even you are even not required to return zero.

23
00:01:36.450 --> 00:01:36.750
Right.

24
00:01:36.750 --> 00:01:42.090
We know that the return code or the exit code of your application, if it successfully terminates,

25
00:01:42.090 --> 00:01:44.310
it's zero, but you're not required to do that.

26
00:01:44.820 --> 00:01:47.130
So modern C++ relaxes a lot of things.

27
00:01:47.130 --> 00:01:53.130
And we said that if you want to ask the user for arguments or information, you have to provide two

28
00:01:53.940 --> 00:01:54.330
things.

29
00:01:54.330 --> 00:02:00.510
That's because arrays, you have to provide an array of strings, which is very similar to Jehovah main

30
00:02:00.510 --> 00:02:01.110
method.

31
00:02:01.110 --> 00:02:09.150
But then the problem with built in arrays in C++ or C basically is that you don't know the length of

32
00:02:09.150 --> 00:02:14.910
the array, so you have to provide also into RC and remember these two, the user doesn't provide this.

33
00:02:14.910 --> 00:02:20.190
The operating system or the terminal provides this to the, to the application.

34
00:02:20.190 --> 00:02:27.720
So basically operating system and knows some extra stuff or it does some extra stuff when you run your

35
00:02:27.720 --> 00:02:29.550
native application in the terminal.

36
00:02:30.540 --> 00:02:33.510
And we saw that the same story happens in Java.

37
00:02:33.510 --> 00:02:36.930
Java makes some stuff easier.

38
00:02:36.930 --> 00:02:42.360
First of all, the main method returns void because it doesn't make sense to return zero if it's not

39
00:02:42.360 --> 00:02:44.250
mandatory to return it anyways.

40
00:02:44.250 --> 00:02:50.340
And then you don't need to provide the number of arguments because we know that built in arrays in Java

41
00:02:50.340 --> 00:02:52.770
they actually have a final field called length.

42
00:02:52.770 --> 00:02:55.680
So you are always aware that how many elements are there.

43
00:02:56.070 --> 00:03:05.580
So again, the main method is a public so that the JV team has to be able to access the type that encloses

44
00:03:05.580 --> 00:03:07.770
this main or the class that has this main.

45
00:03:07.770 --> 00:03:13.170
And it should be a static because the JVM has to be able to invoke the main method without even being

46
00:03:13.170 --> 00:03:15.930
a without any need to create an instance.

47
00:03:15.930 --> 00:03:21.060
And it has to be void because the main is not retaining anything.

48
00:03:21.060 --> 00:03:28.140
And we say that in C++, the first string in this ARG, we or we can say it's ARG V array, right?

49
00:03:28.140 --> 00:03:35.670
An array of array of characters and array of characters means it's a string and then an array of strings.

50
00:03:35.670 --> 00:03:37.560
A string is a star, right?

51
00:03:37.560 --> 00:03:39.630
So an array of a strings.

52
00:03:40.230 --> 00:03:47.220
So in C++, the count is actually if you pass one argument, the count is actually two.

53
00:03:47.220 --> 00:03:48.780
And this array has two elements.

54
00:03:48.780 --> 00:03:52.830
The first element in this string array is always the name of the application.

55
00:03:52.830 --> 00:03:58.530
Actually, the exact thing that you type in the terminal to execute, you can type a relative path to

56
00:03:58.540 --> 00:04:03.120
your native binary or a full path to where your executable file is.

57
00:04:03.120 --> 00:04:03.600
Right?

58
00:04:03.600 --> 00:04:06.630
And that arg v that arg v.

59
00:04:06.630 --> 00:04:12.390
The first argument is always the exact thing that you type in the command line for the name of the application.

60
00:04:12.510 --> 00:04:18.090
We enjoy what we said that this is not what it happens because you launch your Java application using

61
00:04:18.090 --> 00:04:23.850
JVM in a slightly different way because you have to invoke the Java application, which is your Java

62
00:04:23.850 --> 00:04:26.460
and then set the class path and after that.

63
00:04:27.720 --> 00:04:33.840
So basically you're using your invoking or executing your Java binary, which is your Java, and you

64
00:04:33.840 --> 00:04:38.460
specify the class path, all the directories that your job application is, and then you specify the

65
00:04:38.460 --> 00:04:42.120
fully qualified path of the class that has the main method.

66
00:04:43.170 --> 00:04:46.680
Now multiple classes can have the same method.

67
00:04:46.680 --> 00:04:53.310
It can have a main method in your application, but then you can choose at runtime which main method

68
00:04:53.340 --> 00:04:55.170
is the entry point to your application.

69
00:04:55.180 --> 00:04:55.610
Right?

70
00:04:55.740 --> 00:05:03.360
And then after this, after the name of the class that has the main method, you specify the command

71
00:05:03.360 --> 00:05:08.520
line arguments, write anything that comes after the name of the class that has the main method is going

72
00:05:08.520 --> 00:05:10.890
to be considered the command line arguments.

73
00:05:10.890 --> 00:05:11.280
Right.

74
00:05:11.280 --> 00:05:13.410
But we saw that in Java.

75
00:05:13.440 --> 00:05:19.740
You actually have another option when you're using JVM and that is you you can pass some parameters

76
00:05:19.740 --> 00:05:21.930
to the Java application or the Java.

77
00:05:22.140 --> 00:05:27.420
So you pass parameters to JVM instead of passing parameters to your Java application to your main method.

78
00:05:27.420 --> 00:05:30.930
And this adds an extra degree of freedom.

79
00:05:30.930 --> 00:05:31.350
Right?

80
00:05:31.680 --> 00:05:34.200
So let's and we saw an example of this.

81
00:05:34.200 --> 00:05:36.540
I will go back, but before that, let's finish up this.

82
00:05:36.990 --> 00:05:40.770
First of all, you can package your binaries in your Java application, right?

83
00:05:40.770 --> 00:05:45.480
All the class was into an archive which is called a Java archive or Java.

84
00:05:45.690 --> 00:05:49.230
So Java archive jar.

85
00:05:49.590 --> 00:05:58.050
And then a jar file can be executable, but you have to specify a provide a manifest file, manifest

86
00:05:58.050 --> 00:05:59.670
a dot mf.

87
00:05:59.730 --> 00:06:00.180
Right.

88
00:06:00.390 --> 00:06:04.170
And then inside that you have to tell it what the main method is, right?

89
00:06:04.170 --> 00:06:05.520
Which class has the main method?

90
00:06:05.520 --> 00:06:08.100
You have to provide a fully qualified name.

91
00:06:08.850 --> 00:06:11.070
You don't really need to do that in general.

92
00:06:11.190 --> 00:06:16.110
So if you provide the manifest file, then you can directly execute the Java or the Java file, Java

93
00:06:16.110 --> 00:06:18.360
hyphen Java and then pass through the jar file.

94
00:06:18.390 --> 00:06:26.400
Or you can still do this because even in the class path you can specify a zip file or a jar file and

95
00:06:26.400 --> 00:06:31.800
the JVM knows how to go into those files and then access the class files or the binaries.

96
00:06:31.800 --> 00:06:37.470
So even on the class pass, it doesn't have to be a just a directory, it can be a jar file or so.

97
00:06:37.470 --> 00:06:37.950
Right.

98
00:06:38.250 --> 00:06:42.450
And then provide the main class.

99
00:06:42.450 --> 00:06:44.550
The class has the main method inside of Java.

100
00:06:44.550 --> 00:06:51.000
So if you provide the manifest at MF, you can directly execute the jar using the Java hyphen jar command.

101
00:06:51.030 --> 00:06:55.050
Otherwise you have to launch the Java in a similar way right now.

102
00:06:55.050 --> 00:07:00.660
Later you will see that we can even grab the jar file and then compile it to native binary.

103
00:07:00.660 --> 00:07:08.160
But then you have to then provide this manifest at MFW so that the compiler knows which class has the

104
00:07:08.160 --> 00:07:08.610
main method.

105
00:07:08.610 --> 00:07:17.850
Right now what we want to see is let's head back to our eclipse and we saw that previously we can provide

106
00:07:18.150 --> 00:07:19.410
C and ARG, v, right?

107
00:07:19.410 --> 00:07:22.050
Or we can check the name of the arguments that we pass.

108
00:07:22.050 --> 00:07:24.840
And these are called again command line arguments, right?

109
00:07:24.960 --> 00:07:26.490
RC and then arg.

110
00:07:26.490 --> 00:07:34.710
V and we saw that any name that comes after the so let's look at our terminal here.

111
00:07:34.710 --> 00:07:41.610
And if you recall previously we said that you specify the class path, in this case our main class.

112
00:07:41.610 --> 00:07:48.090
Hello, all that class is inside the current directory and then we have to specify or add two more directories

113
00:07:48.090 --> 00:07:54.780
to the class path because our hello world class, which is the main the main method or the entry point

114
00:07:54.780 --> 00:07:58.740
depends on two other class files called class and machine class.

115
00:07:58.740 --> 00:08:01.080
So we have to tell JVM where to find those.

116
00:08:01.080 --> 00:08:07.290
And then you provide the name of the class file that has the main method and then you provide some command

117
00:08:07.290 --> 00:08:08.280
line arguments, right?

118
00:08:08.280 --> 00:08:14.040
Anything that comes after the name of the class file is considered the command line arguments.

119
00:08:14.040 --> 00:08:21.440
But then we said that you can also pass parameters in the format of key equals value to the JV team

120
00:08:21.480 --> 00:08:24.420
to Java application, but you have to specify them with hyphen DX.

121
00:08:24.450 --> 00:08:24.990
All right.

122
00:08:25.320 --> 00:08:30.760
And then these are not passed as inside this string array args, right?

123
00:08:30.810 --> 00:08:34.020
These are not passed to your main application or main method.

124
00:08:34.020 --> 00:08:36.810
These are passed to the Java or Java, right.

125
00:08:36.810 --> 00:08:39.000
But we said that you can actually access these.

126
00:08:39.000 --> 00:08:40.680
So let's run these.

127
00:08:40.860 --> 00:08:43.650
You see, we still have five command line arguments.

128
00:08:43.650 --> 00:08:52.530
Anything, all these strings that come after the name of the main class are considered the basic command

129
00:08:52.530 --> 00:08:53.400
line arguments.

130
00:08:53.400 --> 00:08:59.580
But then you see that we can also access this key value pair, which is the property that is passed

131
00:08:59.580 --> 00:09:05.190
to JVM, and you access them using the system, class system that get property.

132
00:09:05.190 --> 00:09:09.630
And again, so you specified them with hyphen key equals value.

133
00:09:10.140 --> 00:09:18.510
And then when you say hyphen DX and then you pass it to the you write this in between your Java application

134
00:09:18.510 --> 00:09:19.930
and the main class, right?

135
00:09:19.950 --> 00:09:21.000
You have to pass them.

136
00:09:21.000 --> 00:09:27.270
So this is called this is a command line arguments for the JVM, for the job application, not for your

137
00:09:27.390 --> 00:09:29.820
basically main class.

138
00:09:29.820 --> 00:09:30.360
Right.

139
00:09:30.990 --> 00:09:36.780
And then we said that you specify a string, which is the name, which is the key value, right?

140
00:09:36.960 --> 00:09:41.700
And then get property and this returns a string and that's the value.

141
00:09:41.700 --> 00:09:42.270
And then.

142
00:09:42.490 --> 00:09:49.060
You can look at the property and in general there are some predefined system properties and there is

143
00:09:49.060 --> 00:09:54.340
a class called property which extends the hash map properties.

144
00:09:55.810 --> 00:09:58.150
It's just a hash table, right?

145
00:09:58.150 --> 00:10:03.730
So properties can hold any object object and it mainly holds basically a string string.

146
00:10:03.730 --> 00:10:07.900
So both the key and values are strings and.

147
00:10:09.730 --> 00:10:16.910
Basically you can pass parameters as a property to your JV team, but then you can also access them.

148
00:10:16.930 --> 00:10:26.230
So one of the basically one of the important properties are is the basically the path environment variable.

149
00:10:27.760 --> 00:10:34.570
Now, not only you can pass the parameters to your Java application, we saw that when you launch your

150
00:10:34.570 --> 00:10:37.780
application from the terminal, the terminal is aware.

151
00:10:37.780 --> 00:10:40.180
So I'm going to write it here.

152
00:10:40.180 --> 00:10:49.420
So basically terminal is aware of environment variables that you globally define, right path, etc.

153
00:10:49.420 --> 00:10:51.880
But then we want to check.

154
00:10:52.240 --> 00:10:57.820
Sometimes you want to check to see if inside your Java source code right inside your job application,

155
00:10:57.820 --> 00:11:00.880
you can also check for environment variables.

156
00:11:02.980 --> 00:11:11.740
So inside your Java application, you can also check for environment variables.

157
00:11:11.740 --> 00:11:15.460
And again, that's because you're launching your job application from the terminal.

158
00:11:15.490 --> 00:11:18.490
The terminal is aware of those environment variables.

159
00:11:18.490 --> 00:11:24.940
So whenever you launch a executable binary, those environment variables are also available to your

160
00:11:24.940 --> 00:11:26.200
executable binary.

161
00:11:26.380 --> 00:11:33.430
Now the way Java provides it, again, you can still guess that because we are dealing with the Java,

162
00:11:33.430 --> 00:11:37.380
we want to inquire from the Java, we have to use the system class, right?

163
00:11:37.390 --> 00:11:44.980
The system class represents the GM internals as long as as much as they are being, they have been available

164
00:11:44.980 --> 00:11:45.550
to the user.

165
00:11:45.550 --> 00:11:45.980
Right.

166
00:11:46.000 --> 00:11:51.550
Obviously, GM has a lot of internals that developers shouldn't be concerned with, but for example,

167
00:11:51.550 --> 00:11:56.960
a developer should be concerned with whether a particular environment variable is available or not.

168
00:11:56.980 --> 00:12:02.980
For example, I have, for example, latex on my path environment variables.

169
00:12:02.980 --> 00:12:08.860
So if I say which pdf latex, it tells me that it's in the library, take mine.

170
00:12:08.860 --> 00:12:17.440
And the reason is that if I check my path environment variable, I have this library take take being

171
00:12:17.440 --> 00:12:19.750
added to my path environment variable, right?

172
00:12:19.750 --> 00:12:27.520
So if I run Java Command, which means launching a Java application using the Java, then I want to

173
00:12:27.520 --> 00:12:33.490
see inside that if for example, a pdf latex is accessible or not.

174
00:12:33.490 --> 00:12:33.940
Right?

175
00:12:33.940 --> 00:12:36.910
So what I can do, I can inquire the path.

176
00:12:36.910 --> 00:12:44.800
So let's let's see which directories are in path environment variables.

177
00:12:46.260 --> 00:12:46.470
Right.

178
00:12:46.500 --> 00:12:47.580
So we can enquire that.

179
00:12:47.580 --> 00:12:52.170
And in order to do that, you say system get environment envy.

180
00:12:52.170 --> 00:12:58.560
So as you can see, we were getting properties get property is for the extra parameters that you pass

181
00:12:58.560 --> 00:13:01.440
to your JVM as system properties.

182
00:13:01.440 --> 00:13:09.000
But then there is also get environment which returns a map or you can directly get a check for a key

183
00:13:09.000 --> 00:13:09.630
value pair.

184
00:13:09.630 --> 00:13:10.080
Right?

185
00:13:10.080 --> 00:13:16.920
So get environment returns all the environment variables get in there, you give it a specify, you

186
00:13:17.010 --> 00:13:21.900
specify a name and then it checks it returns a string.

187
00:13:21.900 --> 00:13:28.620
And if the string is null, it means that environment variable was not available to the Java application,

188
00:13:28.620 --> 00:13:31.440
your JVM when you launch your JVM from terminal.

189
00:13:31.470 --> 00:13:32.880
So let's go with this.

190
00:13:32.880 --> 00:13:38.130
Let's see if we can find PATH now because the Java API is independent.

191
00:13:38.130 --> 00:13:42.000
So Java API is independent

192
00:13:43.890 --> 00:13:51.810
of the operating system and we know that in Linux and Mac, the environment variables are specified

193
00:13:51.810 --> 00:13:52.530
with dollar.

194
00:13:52.530 --> 00:13:58.710
In Windows, the environment variables are specified with the double percent.

195
00:13:58.710 --> 00:13:59.160
Right?

196
00:13:59.160 --> 00:14:05.100
And in Java you just type the name so you don't care whether it's dollar sign or a percent the Java

197
00:14:05.100 --> 00:14:07.810
because on different platforms you use different JVM, right.

198
00:14:07.830 --> 00:14:13.500
The jobs that are specific to platform it already aware of how to translate this string into the correct

199
00:14:13.500 --> 00:14:14.910
name for the environment variables.

200
00:14:14.910 --> 00:14:16.770
Now this returns a string, right?

201
00:14:16.770 --> 00:14:26.730
So we can say a string path and then we have to check whether this is null or whether it is null or

202
00:14:26.730 --> 00:14:27.000
not.

203
00:14:27.000 --> 00:14:27.270
Right.

204
00:14:27.270 --> 00:14:41.490
So if path equals null, which means a out no environment variable called let's actually bring it so

205
00:14:41.490 --> 00:14:50.610
a string env there or end variable is and then we're going to give it the name path, right?

206
00:14:50.790 --> 00:14:54.000
And then we're going to pass this environment.

207
00:14:54.000 --> 00:14:58.110
Variable name here percent is found.

208
00:15:01.880 --> 00:15:05.990
And in that formatted and in environment variables, right.

209
00:15:05.990 --> 00:15:14.000
So if the JV team or the system class returns a null for this name of this environment, it means it

210
00:15:14.000 --> 00:15:15.170
hasn't been set.

211
00:15:15.170 --> 00:15:20.690
It's not available for to the terminal when you launch your Java application with that terminal because

212
00:15:20.690 --> 00:15:25.190
any environment variable that is available to a terminal will be available to your binary application

213
00:15:25.190 --> 00:15:26.090
as well as well.

214
00:15:26.090 --> 00:15:26.510
Right.

215
00:15:26.870 --> 00:15:28.160
So we're going to say that.

216
00:15:30.530 --> 00:15:31.250
Found.

217
00:15:31.520 --> 00:15:41.300
Environment variable called percent s and in that formatted environment variable.

218
00:15:41.300 --> 00:15:51.560
And then we're going to also print the value print the value out in, right, because this returns a

219
00:15:51.560 --> 00:15:52.070
string.

220
00:15:52.190 --> 00:15:59.240
So what we're going to do, we're going to back here, Java and then here and what we need to do, obviously

221
00:15:59.240 --> 00:16:00.560
we need to compile this first.

222
00:16:00.560 --> 00:16:07.910
So Java C hyphen, remember that we have to specify all the requirements to compile this Java file and

223
00:16:07.910 --> 00:16:09.020
the class path.

224
00:16:09.200 --> 00:16:14.990
Obviously, we have to provide those dependencies called class and machine class on the class path.

225
00:16:14.990 --> 00:16:21.350
So now we recompile and in Java, let's type this again.

226
00:16:22.390 --> 00:16:29.830
Java hyphen CPP and let's run our application and it says name Bob.

227
00:16:29.950 --> 00:16:36.640
So these these are these five are the command line arguments to our Java application name Bob is the

228
00:16:36.640 --> 00:16:37.930
system property.

229
00:16:37.930 --> 00:16:47.350
So the property that we set for the Java and then this one is basically the basically the the environment

230
00:16:47.350 --> 00:16:56.500
variable it says that found environment variable called path and actually we should have a basically

231
00:16:57.250 --> 00:17:01.060
not we instead of printing the name, we have to print a value.

232
00:17:01.210 --> 00:17:01.660
All right.

233
00:17:01.660 --> 00:17:07.690
So let's quickly compile again, Java C, it works and then Java.

234
00:17:07.690 --> 00:17:08.110
All right.

235
00:17:08.230 --> 00:17:11.260
And now it says that found environment variable called path.

236
00:17:11.260 --> 00:17:12.640
And here are the values.

237
00:17:12.640 --> 00:17:13.480
And that's correct.

238
00:17:13.480 --> 00:17:13.900
Right.

239
00:17:13.900 --> 00:17:20.260
So basically what happens here is that we are inquiring in inside our source file, right, what environment

240
00:17:20.260 --> 00:17:25.150
variables are available when we launch or when the job application was launched through the terminal.

241
00:17:25.150 --> 00:17:31.750
Any environment variable that is available to the terminal will be available to your binary application

242
00:17:31.750 --> 00:17:32.170
as well.

243
00:17:32.170 --> 00:17:32.680
Right.

244
00:17:32.680 --> 00:17:35.200
So, so you can use them.

245
00:17:37.780 --> 00:17:44.860
So for example, instead of path, let's say class path, we want to see if somebody has set an environment

246
00:17:44.860 --> 00:17:47.740
variable called class path or not.

247
00:17:47.740 --> 00:17:52.090
So let's see, let's compile this and then let's run.

248
00:17:52.240 --> 00:17:56.080
And it says no environment variable called class path found.

249
00:17:56.080 --> 00:17:56.440
Why?

250
00:17:56.440 --> 00:17:59.950
Because I actually basically.

251
00:18:02.740 --> 00:18:05.140
Remove the commented out this class path.

252
00:18:05.140 --> 00:18:08.770
So let's open up a directory here in my home directory.

253
00:18:08.770 --> 00:18:15.400
If you recall, we have this bash RC and then we can just open it with a text editor.

254
00:18:15.610 --> 00:18:16.330
All right.

255
00:18:16.570 --> 00:18:20.860
And you see, I commented out these lines that have the class path.

256
00:18:20.890 --> 00:18:22.900
Let's uncomment these.

257
00:18:24.610 --> 00:18:25.000
All right.

258
00:18:25.000 --> 00:18:26.170
And let's save this.

259
00:18:26.170 --> 00:18:30.160
And then we need to do a source of bash RC.

260
00:18:31.330 --> 00:18:31.870
All right.

261
00:18:31.870 --> 00:18:35.410
And then let's run our job application again.

262
00:18:35.410 --> 00:18:39.070
And now it says found environment variable called class path.

263
00:18:39.070 --> 00:18:44.080
And it has my test three and then test two here, for example.

264
00:18:44.080 --> 00:18:44.560
Right.

265
00:18:45.280 --> 00:18:53.060
So basically what happens here is that in your inside your source file, you can enquire not only for

266
00:18:53.080 --> 00:18:57.490
there our command line arguments that were passed to your main method.

267
00:18:57.490 --> 00:18:58.060
Right?

268
00:18:58.090 --> 00:19:03.160
You can also inquire for the system properties that were set for the Gvm.

269
00:19:03.490 --> 00:19:12.670
So these are set for Gvm at lunchtime in in in the terminal.

270
00:19:13.690 --> 00:19:19.570
And then you can also enquire for the environment variables, the operating system, environment variables

271
00:19:19.570 --> 00:19:26.250
that are available to your terminal at the time the JVM or your job application was launched.

272
00:19:26.260 --> 00:19:26.630
Right.

273
00:19:26.650 --> 00:19:28.330
Again, three different topics.

274
00:19:28.330 --> 00:19:35.260
One, the command line arguments that past your application, the system properties that were set for

275
00:19:35.260 --> 00:19:43.390
your application and then they basically the environment variables that are a property of the operating

276
00:19:43.390 --> 00:19:44.680
system and they were set.

277
00:19:44.710 --> 00:19:50.110
Now there are some reasons that you want to check for the environment variables.

278
00:19:50.590 --> 00:19:57.310
For example, sometimes your application, you are assuming that some other application is installed

279
00:19:57.310 --> 00:20:01.930
on the host operating system, that when your job application is launched, in order to do that, you

280
00:20:01.930 --> 00:20:03.000
can check for it.

281
00:20:03.010 --> 00:20:10.870
For example, let's say I want to check if a basically later.

282
00:20:12.280 --> 00:20:17.320
Basically, we want to make sure that our let's say our application depends on later, right?

283
00:20:17.320 --> 00:20:23.320
Depends on the fact that we want to be able to use latex in our basically be able to run later from

284
00:20:23.320 --> 00:20:25.690
our from within our source file or Java file.

285
00:20:26.020 --> 00:20:39.970
So what we can do is we can enforce the fact that the user must must have a basically a latex underscore

286
00:20:39.970 --> 00:20:41.710
home environment variable.

287
00:20:43.180 --> 00:20:45.040
So we want to enforce that.

288
00:20:45.040 --> 00:20:52.120
If somebody runs our Java application, the Java application must be able to find the.

289
00:20:54.310 --> 00:21:01.690
A late take home and inside that there is a bin directory and then inside that there is a executable

290
00:21:01.690 --> 00:21:03.220
for latex, for example.

291
00:21:03.220 --> 00:21:11.500
So if I bring back the terminal, if I echo my path environment variables you see I have this take bin.

292
00:21:13.800 --> 00:21:18.040
Export Logitech home equals this one.

293
00:21:18.060 --> 00:21:28.530
All right, so we can save these and then we can say Echo Logitech, underscore home nothing.

294
00:21:28.530 --> 00:21:34.440
And then if we source the Bashar see again and then equate.

295
00:21:34.440 --> 00:21:42.000
Now it's set right now this Logitech home sets and then we go back here and check for this Logitech

296
00:21:42.000 --> 00:21:48.360
home and then let's compile our Java application again.

297
00:21:50.280 --> 00:21:55.740
And then let's run and then found environment variable called later home.

298
00:21:55.740 --> 00:22:04.950
And now if this application is run, we can, for example, launch one of the latest executables, for

299
00:22:04.950 --> 00:22:08.640
example, PDF run a PDF Latex, for example.

300
00:22:09.840 --> 00:22:17.520
And the way we run it is we get the value for this path and then we join it with the, with the name

301
00:22:17.520 --> 00:22:18.390
of the application.

302
00:22:18.390 --> 00:22:30.750
So the application, so a string app is basically this path plus file dot or path dot separator.

303
00:22:33.240 --> 00:22:34.200
Pass dart.

304
00:22:35.580 --> 00:22:36.840
File dart.

305
00:22:38.070 --> 00:22:38.880
Let's see.

306
00:22:41.130 --> 00:22:47.940
Pass separator write in macros and Linux is the forward slash plus the name of the application pdf later.

307
00:22:48.180 --> 00:22:52.170
And then we can execute some command with this application.

308
00:22:52.170 --> 00:22:52.430
Right.

309
00:22:52.440 --> 00:22:57.030
If you're familiar with how we use latex, you execute on a tech file.

310
00:22:57.060 --> 00:23:00.330
But I'm going to run this command to just see which version.

311
00:23:01.440 --> 00:23:04.930
So I'm going to say a PDF later hyphen hyphen version.

312
00:23:04.950 --> 00:23:12.150
If I launch it in the terminal, so pdf later hyphen hyphen version and it gives me this feedback,

313
00:23:12.150 --> 00:23:12.630
right?

314
00:23:13.740 --> 00:23:16.940
So I want to inquire for that within my Java application.

315
00:23:16.950 --> 00:23:18.360
So we say that

316
00:23:20.910 --> 00:23:27.960
basically we have to use the runtime which emulates access to the terminal, get runtime, it's a single

317
00:23:27.960 --> 00:23:34.770
tone and then let's create a variable out of it and then runtime dot execute.

318
00:23:34.800 --> 00:23:41.640
This is equivalent to executing and a command line in the terminal from the Java application.

319
00:23:41.640 --> 00:23:51.270
And then the command is going to be an app plus a hyphen space, hyphen, hyphen version and this returns

320
00:23:51.270 --> 00:23:52.320
a process.

321
00:23:52.320 --> 00:23:59.700
So process is because when you launch a binary application in terminal, the operating system creates

322
00:23:59.700 --> 00:24:00.870
a process for you.

323
00:24:01.020 --> 00:24:03.750
And this API emulates that.

324
00:24:03.750 --> 00:24:10.470
And now with the process, we can hook up the output that this application gives the terminal to our

325
00:24:10.620 --> 00:24:16.110
back to our JVM using an input stream so we can create a scanner.

326
00:24:16.230 --> 00:24:16.740
A scanner.

327
00:24:16.740 --> 00:24:21.150
Remember, a scanner is just an easy API for reading input streams.

328
00:24:21.150 --> 00:24:23.730
So new scanner.

329
00:24:23.730 --> 00:24:27.210
And when you create the scanner you can specify which input stream.

330
00:24:27.210 --> 00:24:34.360
So as you say p dot get input stream and this means input stream means input to the JV.

331
00:24:34.860 --> 00:24:40.980
What this means is that whatever output of the execution of this application is that goes to the terminal,

332
00:24:40.980 --> 00:24:41.430
right?

333
00:24:41.430 --> 00:24:45.930
And then and that's an property of this process.

334
00:24:45.930 --> 00:24:48.990
Hooked that up to the input to the JVM.

335
00:24:48.990 --> 00:24:49.440
Right.

336
00:24:50.280 --> 00:24:59.370
And then we're going to say while a scanner has next, it uses the Iterable interface has next or has

337
00:24:59.390 --> 00:25:00.000
next line.

338
00:25:00.000 --> 00:25:01.530
We're going to read it line by line.

339
00:25:01.530 --> 00:25:04.410
So has next line.

340
00:25:04.410 --> 00:25:06.390
We're going to say that six out.

341
00:25:08.390 --> 00:25:10.040
As candidate next line.

342
00:25:11.630 --> 00:25:12.230
All right.

343
00:25:12.230 --> 00:25:15.980
So we go back here and now we're going to say Java Sea.

344
00:25:17.120 --> 00:25:17.900
We compile.

345
00:25:17.900 --> 00:25:20.300
So P is already defined.

346
00:25:20.300 --> 00:25:21.770
Where did we define P?

347
00:25:24.180 --> 00:25:25.020
Oh, a string.

348
00:25:25.260 --> 00:25:28.500
Okay, so let's call this just process.

349
00:25:31.930 --> 00:25:35.740
All right, so go back here and then compile.

350
00:25:36.190 --> 00:25:38.110
It's successful.

351
00:25:38.110 --> 00:25:39.580
Must be okay.

352
00:25:39.580 --> 00:25:47.290
So this we have to provide try cache because this can throw exceptions.

353
00:25:50.110 --> 00:25:56.110
So and then if we're going to catch any exception and we're not going to do anything for now, we're

354
00:25:56.110 --> 00:25:57.330
going to leave it empty.

355
00:25:57.340 --> 00:26:04.390
So let's go back here and then compile compilation is successful and then we're going to run Java application

356
00:26:04.840 --> 00:26:07.900
and now it says found in one take bin and then.

357
00:26:10.030 --> 00:26:12.130
So let's see.

358
00:26:14.620 --> 00:26:17.350
What we see right now is that.

359
00:26:23.430 --> 00:26:30.180
So the question is, why is this not so see out?

360
00:26:32.440 --> 00:26:32.920
App.

361
00:26:32.920 --> 00:26:36.490
Let's also see what arguments we're getting here.

362
00:26:38.140 --> 00:26:40.960
Let's compile again and then let's run.

363
00:26:42.400 --> 00:26:42.970
Oh, okay.

364
00:26:42.970 --> 00:26:44.770
So that's because.

365
00:26:47.930 --> 00:26:48.950
For pasta.

366
00:26:49.460 --> 00:26:53.420
Pasta potato is calling so we should use the file separator.

367
00:26:53.840 --> 00:26:55.550
File separator.

368
00:26:55.550 --> 00:27:01.970
Right because we want to pass separator means it's separator that use in the past environment.

369
00:27:02.040 --> 00:27:07.100
But here we want to use the construct, the directory name.

370
00:27:07.100 --> 00:27:11.180
Right, which is whatever that was a slash the PDF later.

371
00:27:11.300 --> 00:27:11.750
Right.

372
00:27:11.750 --> 00:27:13.970
So zip file separator.

373
00:27:15.560 --> 00:27:21.800
So we go back here, let's just quickly compile, works fine and then launch our Java application.

374
00:27:21.800 --> 00:27:29.540
And now we were able to find the later home and then we were able to execute that PDF later which is

375
00:27:29.540 --> 00:27:31.970
this is the full path hyphen hyphen version.

376
00:27:32.000 --> 00:27:35.270
This was the output that the terminal gave to our JVM.

377
00:27:35.270 --> 00:27:42.260
And JVM used this process API to read the results back and into our Java application, and we just print

378
00:27:42.260 --> 00:27:43.460
them back to the terminal.

379
00:27:43.460 --> 00:27:43.910
All right.

380
00:27:44.060 --> 00:27:50.720
So I hope you now have a very solid understanding of the flexibility that your job application provides.

381
00:27:50.720 --> 00:27:55.790
You have the command line arguments, you can inquire the system properties for the JV team, and then

382
00:27:55.790 --> 00:28:03.830
you also can inquire for the environment variables for the terminal and whether DOH is which environment

383
00:28:03.830 --> 00:28:06.800
variables are available to your Java application.

384
00:28:07.490 --> 00:28:14.030
Now once we compile our job application to native binary, we will lose these arguments.

385
00:28:14.030 --> 00:28:17.750
Hyphen DX key value because there is no JVM anymore, right?

386
00:28:17.750 --> 00:28:22.100
Once you compile to native binary, it's just the application itself.

387
00:28:22.100 --> 00:28:28.940
You still have access to these command line arguments and you can still inquire for the environment

388
00:28:28.940 --> 00:28:30.500
variables that your application sees.

389
00:28:30.500 --> 00:28:30.890
Right?

390
00:28:31.190 --> 00:28:34.220
But then the question is, if we lose access, how can we use this?

391
00:28:34.370 --> 00:28:38.600
You set these values hyphen DX key equals value at the compile time.

392
00:28:38.600 --> 00:28:46.700
So you tell the compiler, the LLVM native compiler that compiled Java application and set these flags

393
00:28:46.700 --> 00:28:47.660
for the Java.

394
00:28:48.110 --> 00:28:51.470
And these are already written in your executable binary.

395
00:28:52.190 --> 00:28:54.020
So I hope, I hope you enjoy this lecture.

396
00:28:54.020 --> 00:28:57.140
Please stay tuned and I will see you the next one.
