1
00:00:01,200 --> 00:00:04,070
Hello and welcome to another tutorial.

2
00:00:04,080 --> 00:00:09,300
I'm going to continue our discussion on the native image build output options and we saw that there

3
00:00:09,300 --> 00:00:15,570
are two types of options and you can look at the very comprehensive list with the hyphen, hyphen,

4
00:00:15,570 --> 00:00:16,950
expert options all.

5
00:00:17,160 --> 00:00:20,580
And one of the categories is the build output options.

6
00:00:20,580 --> 00:00:26,340
And again, the two types of options are either hyphen edge Colin or hyphen or Colin.

7
00:00:26,340 --> 00:00:34,230
As I mentioned in the future lectures, I will go into more details of these if any of the options are

8
00:00:34,230 --> 00:00:35,040
very important.

9
00:00:35,040 --> 00:00:41,310
For example, we saw that the build output options, they are hyphen edge and it and all of them are

10
00:00:41,310 --> 00:00:48,060
boolean and you enable or disable them with plus or minus plus means enable them and then minus means

11
00:00:48,060 --> 00:00:50,070
disable them or set them to false.

12
00:00:50,070 --> 00:00:56,520
And then we also look at the default values like pretty much everything by default is enabled except

13
00:00:56,520 --> 00:01:03,630
for this one build output prefix this we saw that it prefixes the output name of the native binary and

14
00:01:03,630 --> 00:01:11,130
also the PID or the process ID that was run PID image name and it's disabled because we don't care that

15
00:01:11,130 --> 00:01:11,940
much about it.

16
00:01:11,940 --> 00:01:18,030
And I mentioned also about this pipeline thing and the bash terminal and we saw that there are two types

17
00:01:18,030 --> 00:01:18,840
of pipelines.

18
00:01:18,990 --> 00:01:22,590
One is this operator, which is called Pipeline.

19
00:01:22,920 --> 00:01:29,610
The other one is the like the greater than symbol or the arrow operator, which redirects the output

20
00:01:29,760 --> 00:01:32,640
of the application to basically a file.

21
00:01:32,640 --> 00:01:33,240
Right?

22
00:01:33,450 --> 00:01:38,550
This pipeline operator redirects the output of the application to another application.

23
00:01:38,550 --> 00:01:39,990
That's how you can change it.

24
00:01:39,990 --> 00:01:40,440
Right.

25
00:01:41,400 --> 00:01:47,370
And if you just want to look at all the expert options all and then filter only the ones that have this

26
00:01:47,370 --> 00:01:52,140
build output stringing them, you can pipeline the output of this command, right?

27
00:01:52,170 --> 00:01:58,380
Native image, hyphen, hyphen, expert options all and then pipeline the output and use the grep a

28
00:01:58,380 --> 00:02:05,760
binary like it's an application that its job is to filter out all the lines of a text or whatever is

29
00:02:05,760 --> 00:02:10,170
the output of another application is using the string that you provide.

30
00:02:10,170 --> 00:02:13,380
So we only filters out and the fish terminal is very intelligent.

31
00:02:13,380 --> 00:02:18,270
It shows you this string in a red, which is very easy to see what's going on.

32
00:02:18,300 --> 00:02:24,480
So if I execute this command and say pipeline great build output, it only filters out and shows me

33
00:02:24,480 --> 00:02:30,890
the outputs that the options that have this built output is stringing them breakdowns, colorful GC

34
00:02:30,930 --> 00:02:33,930
warnings, links, prefix progress using USD.

35
00:02:33,960 --> 00:02:34,500
All right.

36
00:02:34,830 --> 00:02:39,930
And now I want to basically show you the same pipeline with a application.

37
00:02:39,930 --> 00:02:44,610
We write a Java application and then we compile it to native executable binary.

38
00:02:44,610 --> 00:02:51,690
And then you can, for example, feed to inputs if your application needs some input using this pipeline

39
00:02:52,110 --> 00:02:56,640
a basically operator in terminal.

40
00:02:56,670 --> 00:02:58,290
So let's head to our eclipse.

41
00:02:59,220 --> 00:03:05,880
Now previously I had this test test two and test three directories and I actually added them to my class

42
00:03:05,880 --> 00:03:06,120
path.

43
00:03:06,120 --> 00:03:10,650
So let me open up a terminal at the root of my Java project.

44
00:03:10,680 --> 00:03:16,920
If you look at my class path environment variable, which my terminal understands that because I define

45
00:03:16,920 --> 00:03:17,640
this in my bash.

46
00:03:17,640 --> 00:03:24,600
RC So that every terminal session that I open, they are available for this class path and test three

47
00:03:24,630 --> 00:03:26,010
test and test two.

48
00:03:26,010 --> 00:03:26,520
Right?

49
00:03:26,640 --> 00:03:33,570
So any Java class, the Java source file that I put on any of these and I just run Java on it, I don't

50
00:03:33,570 --> 00:03:40,290
need to specify the class path because if you don't explicitly, explicitly provide the hyphen CPP or

51
00:03:40,290 --> 00:03:46,290
hyphen hyphen class path, then the Java Sea and also the JVM, they just search for the class path

52
00:03:46,290 --> 00:03:47,340
environment variable.

53
00:03:48,360 --> 00:03:53,280
So what I'm going to do, let's delete these previous artifacts that we created.

54
00:03:53,280 --> 00:03:57,150
I'm going to create a new or maybe let's just copy and paste this Java file.

55
00:03:58,060 --> 00:03:59,220
Spades pasties.

56
00:03:59,230 --> 00:04:03,580
Let's call this a command line or terminal pipeline.

57
00:04:03,940 --> 00:04:07,720
Terminal pipeline.

58
00:04:09,990 --> 00:04:13,950
So obviously the name of the class should be the same as the source file.

59
00:04:14,220 --> 00:04:17,850
If it's a public class terminal pipeline.

60
00:04:18,180 --> 00:04:18,570
All right.

61
00:04:18,570 --> 00:04:24,870
What we are going to do, we are going to ask the user to let me also clean up everything here.

62
00:04:25,350 --> 00:04:32,790
Now, we saw that the command line arguments actually get passed as this a string array, but we don't

63
00:04:32,790 --> 00:04:34,110
need to really do that.

64
00:04:34,110 --> 00:04:34,370
Right.

65
00:04:34,380 --> 00:04:37,250
The other way of getting information.

66
00:04:37,260 --> 00:04:41,700
So so one way is to use the string arcs, right?

67
00:04:41,700 --> 00:04:45,900
And these are past when you launch your application.

68
00:04:45,900 --> 00:04:53,480
But besides that, you can use you can also use the standard input.

69
00:04:53,910 --> 00:04:56,760
So the way we do it, we use the scanner class.

70
00:04:57,060 --> 00:04:59,340
A scanner is new scanner.

71
00:04:59,340 --> 00:05:06,180
And then here you want to specify an input, a stream, and for that you provide a standard input to

72
00:05:06,180 --> 00:05:07,140
your KVM.

73
00:05:07,290 --> 00:05:08,670
So system.

74
00:05:08,700 --> 00:05:14,820
Remember when we in the Java source file when we want to talk about JVM, it's the system class dot

75
00:05:14,850 --> 00:05:20,100
in it is a input stream which is an abstract class, right?

76
00:05:20,640 --> 00:05:28,230
A static final, an input abstract class and a standard input stream which means input to your JVM.

77
00:05:28,230 --> 00:05:30,560
And now you can see what's going to happen, right?

78
00:05:30,570 --> 00:05:40,950
I can I can have some other application that outputs some text and then when I pipeline it to the input

79
00:05:40,950 --> 00:05:41,910
to my JVM.

80
00:05:41,910 --> 00:05:46,500
So system dot in means something that feeds information or a byte array, right.

81
00:05:46,500 --> 00:05:48,750
Or array to my JVM.

82
00:05:48,750 --> 00:05:52,380
And the JVM can read them one byte by byte.

83
00:05:52,380 --> 00:05:52,620
Right.

84
00:05:52,650 --> 00:05:54,360
Obviously, that's an inefficient way.

85
00:05:54,360 --> 00:05:57,000
That's why we have a scanner that provides buffering.

86
00:05:57,120 --> 00:05:58,740
So the standard input is stream.

87
00:05:58,740 --> 00:06:00,000
This stream is already open.

88
00:06:00,000 --> 00:06:05,460
We know that as long as soon as you run your job application, there is a dedicated stream to it.

89
00:06:06,480 --> 00:06:17,610
And then while for example, we know that a scanner follows the basically a iterator pattern.

90
00:06:17,610 --> 00:06:21,720
So it has has has next, next and has next line, etc..

91
00:06:21,840 --> 00:06:30,060
I want to has next goes through the output or basically whatever is fed to the scanner word by word,

92
00:06:30,060 --> 00:06:30,360
right?

93
00:06:30,360 --> 00:06:32,730
Returns to if this scan has another token.

94
00:06:32,730 --> 00:06:40,320
Token is just a word means that some non whitespace characters, it reads them until it hits the first

95
00:06:40,320 --> 00:06:41,400
whitespace character.

96
00:06:41,400 --> 00:06:41,850
Right.

97
00:06:42,300 --> 00:06:46,980
So when has next we're going to do a cis out or system out?

98
00:06:46,980 --> 00:06:53,700
Now we're using the standard output of our JVM, which is by default is hooked to the terminal.

99
00:06:53,700 --> 00:06:59,370
Whatever shell or command, prompt or terminal, you're running your Java application in it, right?

100
00:06:59,490 --> 00:07:04,920
So we're using the terminal, the input stream, a standard input to our JVM and we're using the standard

101
00:07:04,920 --> 00:07:09,630
output of our JVM to print line and scanner next.

102
00:07:09,630 --> 00:07:14,910
Right, scanner dot next.

103
00:07:14,910 --> 00:07:16,560
I think this is going to work.

104
00:07:17,460 --> 00:07:19,410
I believe a scanner has a next method.

105
00:07:19,410 --> 00:07:20,700
Let's just check on that.

106
00:07:20,700 --> 00:07:21,030
Yes.

107
00:07:21,030 --> 00:07:22,170
So it returns a string.

108
00:07:22,170 --> 00:07:30,210
So it reads next token token means a non as basically it starts from some point in your byte stream

109
00:07:30,210 --> 00:07:31,280
or carriage character.

110
00:07:31,290 --> 00:07:40,590
A stream starts from a character that is not a whitespace and reads until it hits the first basically

111
00:07:40,590 --> 00:07:42,930
a first whitespace.

112
00:07:42,930 --> 00:07:43,380
Right.

113
00:07:45,240 --> 00:07:48,180
So next reads word by word.

114
00:07:48,360 --> 00:07:53,450
And obviously a scanner is it or in general it's rebels something like this.

115
00:07:53,460 --> 00:07:59,340
These are one time use so once you because these are kind of like the iterator pattern, right?

116
00:07:59,340 --> 00:08:02,910
So once you consume the iterator, you cannot reuse it again.

117
00:08:02,910 --> 00:08:06,840
So once you hit the next, you kind of need to create a new scanner, right?

118
00:08:08,070 --> 00:08:15,420
So so what we do, obviously, we first need to scan, compile this and note that I'm not even in this

119
00:08:15,420 --> 00:08:17,250
test directory in my terminal.

120
00:08:17,250 --> 00:08:20,520
I'm inside the Java native image, which is the project but doesn't matter.

121
00:08:20,520 --> 00:08:23,550
I have my class path ready.

122
00:08:23,550 --> 00:08:23,850
Right?

123
00:08:23,850 --> 00:08:24,480
It's set up.

124
00:08:24,480 --> 00:08:25,470
It's already inside.

125
00:08:25,740 --> 00:08:32,220
So the Java Sea already is aware of this basically test directory.

126
00:08:32,220 --> 00:08:37,710
So I just tell you the terminal pipeline dot Java.

127
00:08:38,310 --> 00:08:43,350
Now it's not going to obviously find it because when you use Java C, you kind of need to give it the

128
00:08:43,350 --> 00:08:50,940
full path to to the file test terminal pipeline.

129
00:08:51,690 --> 00:08:52,170
All right.

130
00:08:52,170 --> 00:09:01,980
And this class note that I did not basically import the so basically we already had imported the scanner.

131
00:09:01,980 --> 00:09:02,490
Right.

132
00:09:02,490 --> 00:09:09,720
So if we didn't import the scanner because a scanner is in the Java util java duty and we know that

133
00:09:09,720 --> 00:09:12,990
Java util by default is not imported.

134
00:09:12,990 --> 00:09:13,560
Right.

135
00:09:13,890 --> 00:09:21,990
So once you run this without importing that, it tells you a error saying that I don't know this type,

136
00:09:21,990 --> 00:09:22,680
this scanner.

137
00:09:22,680 --> 00:09:32,670
So that's why you kind of need to say that import java dot you tilde scanner now import remember import

138
00:09:32,670 --> 00:09:39,510
is just a basically another way alternative way of just using the fully qualified name.

139
00:09:39,780 --> 00:09:44,880
I could just use the fully qualified name and I don't need any import statement, but usually fully

140
00:09:44,880 --> 00:09:46,920
qualified name makes your code a little bit ugly.

141
00:09:46,920 --> 00:09:52,020
So we prefer to do the import, the type or the class itself.

142
00:09:52,020 --> 00:09:57,420
And then interesting thing, if you look at the byte code, there is no import a statement.

143
00:09:57,420 --> 00:10:03,570
Import statement has absolutely no effect on your byte code on your class file because the compiler

144
00:10:03,570 --> 00:10:09,630
actually replaces this scanner, this line with the fully qualified name and I will show you.

145
00:10:09,630 --> 00:10:12,120
So import statements have no effect.

146
00:10:12,150 --> 00:10:14,640
Now this is different from C++ application.

147
00:10:14,640 --> 00:10:21,270
Whenever you include another header file in your C++ source file, the the preprocessor actually copies

148
00:10:21,270 --> 00:10:26,640
the entire content of that header file into your CP and the compiler goes through them.

149
00:10:26,640 --> 00:10:32,070
So if you include iOS stream in many different CP files, the compiler has to go through them and compile

150
00:10:32,070 --> 00:10:34,320
them again and that could be time consuming.

151
00:10:34,320 --> 00:10:39,600
That's why there are other things like compiled headers, so the headers that are already compiled to

152
00:10:39,600 --> 00:10:42,630
binaries and so the compiler doesn't have to do that usually.

153
00:10:42,630 --> 00:10:45,660
I mean the compilers are pretty fast these days and the computers are fast.

154
00:10:45,660 --> 00:10:52,740
So people don't really notice the fact that if you include iOS Stream, which is a pretty very huge

155
00:10:52,740 --> 00:10:53,880
header file, right?

156
00:10:54,570 --> 00:10:59,670
If you include, for example, I assume in many different CP files, then the compiler has to compile

157
00:10:59,670 --> 00:11:02,250
it over and over again in Java.

158
00:11:02,250 --> 00:11:03,690
It's not like that in Java.

159
00:11:03,690 --> 00:11:06,120
The import statement doesn't do anything.

160
00:11:06,120 --> 00:11:08,820
It really doesn't change the class file at all.

161
00:11:08,820 --> 00:11:13,590
It has zero effect because at the compile time the compiler removes this line.

162
00:11:13,590 --> 00:11:18,420
It's like this line doesn't exist and it rewrites the type with the fully qualified name.

163
00:11:18,490 --> 00:11:24,540
And at runtime the JVM looks at the type which is the fully qualified name, and it starts from all

164
00:11:24,540 --> 00:11:30,600
and searches in all the directories that are on the class path and sees if it can find a type with that

165
00:11:30,600 --> 00:11:31,470
fully qualified name.

166
00:11:31,470 --> 00:11:37,770
And as I mentioned in my my past lectures, fully qualified name means JVM expects a directory hierarchy.

167
00:11:37,770 --> 00:11:45,540
So from the class path when Jvc's Java utility scanner searches in all the directories that are on the

168
00:11:45,540 --> 00:11:51,330
class path to see if there is a directory called Java and then if there is a directory, it searches

169
00:11:51,330 --> 00:11:54,660
inside that to see if there is a directory called util.

170
00:11:54,690 --> 00:12:01,050
If there is a directory called util, then it searches inside that to see if there is a class file called

171
00:12:01,050 --> 00:12:02,340
a scanner class.

172
00:12:02,550 --> 00:12:07,980
If it cannot find it, it says a class not found error or class def error or something like that.

173
00:12:09,150 --> 00:12:15,030
Again, I repeat these concepts because these are very important and these happen behind the scenes

174
00:12:15,030 --> 00:12:21,120
and something that most Java developers, people who don't have much experience with what happens behind

175
00:12:21,120 --> 00:12:24,810
the scene, they might not notice that these are very important concepts again.

176
00:12:24,810 --> 00:12:31,110
So to summarize in Java, import statements have absolutely no effect on your class file.

177
00:12:31,110 --> 00:12:38,070
So let's rewrite these and then let's open this class file with a class file viewer.

178
00:12:38,070 --> 00:12:39,510
I don't want to decompile it.

179
00:12:39,510 --> 00:12:43,530
And as you can see, there is absolutely no mention of.

180
00:12:43,670 --> 00:12:44,030
Report.

181
00:12:44,030 --> 00:12:47,460
The statement write The class has a fully qualified name right now.

182
00:12:47,480 --> 00:12:53,150
I didn't put it in a basically, I didn't put it in the package.

183
00:12:53,150 --> 00:12:55,310
So it's just the name of the class.

184
00:12:55,310 --> 00:13:01,730
And then the compiler provided a default, no argument constructor, which is public, which just calls

185
00:13:01,730 --> 00:13:03,320
the constructor the superclass.

186
00:13:03,320 --> 00:13:04,610
And then we have a main method.

187
00:13:04,610 --> 00:13:11,580
And as you can see, we are creating a scanner and the scanner in the source code was replaced with

188
00:13:11,580 --> 00:13:12,740
the fully qualified name.

189
00:13:12,740 --> 00:13:15,350
So this is the effect of the import statement.

190
00:13:15,530 --> 00:13:23,720
So you can either directly in your source file type java util scanner or you can just type a just the

191
00:13:23,720 --> 00:13:26,980
input, type the import the statement wants and then use a scanner.

192
00:13:26,990 --> 00:13:32,780
This word is kind of multiple times and then the compiler replaces all those words with the Java utils

193
00:13:32,780 --> 00:13:33,140
scanner.

194
00:13:33,140 --> 00:13:35,720
So that's that's just the meaning of the import statement.

195
00:13:36,470 --> 00:13:37,070
All right.

196
00:13:37,280 --> 00:13:37,640
All right.

197
00:13:37,640 --> 00:13:41,840
So we compile this and obviously we can also run this again.

198
00:13:41,840 --> 00:13:49,580
I'm not going to explicitly specify the class path here because this directory test where my class file

199
00:13:49,580 --> 00:13:52,850
is is already on my environment variable class path.

200
00:13:52,850 --> 00:13:56,840
So I'm just going to say that terminal pipeline.

201
00:14:00,270 --> 00:14:02,820
OC class not found exception.

202
00:14:05,250 --> 00:14:06,780
So let's see.

203
00:14:09,340 --> 00:14:09,490
Okay.

204
00:14:09,610 --> 00:14:13,780
So the reason is that now by default.

205
00:14:15,160 --> 00:14:17,530
So I think what we should do.

206
00:14:17,830 --> 00:14:21,910
Hyphen C p let's try to give the class path.

207
00:14:24,130 --> 00:14:35,610
So, so java, hyphen c p from wherever we are going to test and then terminal pipeline.

208
00:14:35,620 --> 00:14:36,090
Oh, okay.

209
00:14:36,100 --> 00:14:38,650
So I was typing the name wrong.

210
00:14:39,010 --> 00:14:44,120
So Java terminal, let's make sure we do in line ning.

211
00:14:44,170 --> 00:14:44,680
All right.

212
00:14:44,680 --> 00:14:45,760
Now it works fine.

213
00:14:45,760 --> 00:14:47,920
We don't specify the class path, but.

214
00:14:50,690 --> 00:14:54,020
But then a GM search is also in the directory.

215
00:14:54,230 --> 00:14:59,540
If the class path environment variable is defined now, it's waiting for us to type something to the

216
00:14:59,540 --> 00:15:00,020
console.

217
00:15:00,020 --> 00:15:01,640
So hello.

218
00:15:01,640 --> 00:15:03,320
How are you doing?

219
00:15:07,180 --> 00:15:07,940
Doing.

220
00:15:08,170 --> 00:15:09,850
And then we hit enter, right?

221
00:15:09,850 --> 00:15:16,450
So the scanner system in a scanner waits until you hit the enter.

222
00:15:16,450 --> 00:15:19,180
Whenever you hit enter, it means that you finished up.

223
00:15:19,180 --> 00:15:24,880
And then now it prints them to the console.

224
00:15:24,880 --> 00:15:26,380
It is still waiting for us.

225
00:15:26,590 --> 00:15:29,530
So more text hit, enter more text.

226
00:15:29,530 --> 00:15:30,040
Right.

227
00:15:30,040 --> 00:15:37,630
So basically when you hook this up to the standard input of your console, now you can add text here,

228
00:15:37,630 --> 00:15:38,170
right?

229
00:15:38,440 --> 00:15:42,970
And then if we print enter now it's waiting indefinitely.

230
00:15:42,970 --> 00:15:43,240
Right?

231
00:15:43,240 --> 00:15:49,810
So this application doesn't terminate because it's hooked directly to the standard input.

232
00:15:49,810 --> 00:15:50,320
Right?

233
00:15:50,320 --> 00:15:59,200
So I'm going to hit the control key to give the terminal or the operating system a signal that, hey,

234
00:15:59,200 --> 00:16:01,630
I want to terminate this application.

235
00:16:01,630 --> 00:16:07,960
So Control C is a signal to your operating system that to kill this process, right.

236
00:16:10,570 --> 00:16:17,980
So so that's it has next what we're going to do in order to not go into an indefinite loop we're going

237
00:16:17,980 --> 00:16:23,110
to say has next line so line then is kind of searches for backslash.

238
00:16:23,110 --> 00:16:24,220
N Right.

239
00:16:24,220 --> 00:16:27,880
And then we're going to print a line by line and next line.

240
00:16:28,660 --> 00:16:32,620
So this way we are, we should be fine.

241
00:16:32,620 --> 00:16:37,360
So let's compile and then let's run.

242
00:16:38,050 --> 00:16:39,600
Now it's waiting for us.

243
00:16:39,610 --> 00:16:41,440
Hello, how are you?

244
00:16:41,440 --> 00:16:46,150
And then as soon as we hit enter, it's still the same thing.

245
00:16:46,150 --> 00:16:50,470
Now it's print the entire line instead of printing word by word.

246
00:16:50,470 --> 00:16:50,950
Right?

247
00:16:50,950 --> 00:16:54,910
So again, command C, we terminate this.

248
00:16:56,240 --> 00:16:59,780
So what we're going to do first, we're going to put something to the console.

249
00:16:59,780 --> 00:17:05,210
So we're going to say that see out.

250
00:17:05,840 --> 00:17:10,310
Enter, for example, enter your name or your.

251
00:17:10,460 --> 00:17:13,730
Enter your first name and then.

252
00:17:16,580 --> 00:17:17,420
Let's see.

253
00:17:19,100 --> 00:17:20,690
And let's use print.

254
00:17:20,690 --> 00:17:22,820
So we don't want to go to the next line.

255
00:17:22,820 --> 00:17:31,160
And then after that, we create an scanner and then we're going to say that a string name is a scanner

256
00:17:31,580 --> 00:17:32,210
next.

257
00:17:32,570 --> 00:17:40,610
So this scanner is hooked up to the system in so we can call it any time we want and try to read something.

258
00:17:40,610 --> 00:17:45,050
So right now we're saying next next means next a string, right.

259
00:17:45,050 --> 00:17:46,970
Which comes from the terminal itself.

260
00:17:47,210 --> 00:17:49,310
And then we're going to see out.

261
00:17:50,690 --> 00:17:55,310
Your name is percent is dot formatted and in name.

262
00:17:56,120 --> 00:17:56,780
All right.

263
00:17:56,780 --> 00:17:58,280
So let's go ahead.

264
00:17:58,280 --> 00:18:06,140
We're going to compile and then run and enter your first name, let's say Sam, and then your name is

265
00:18:06,140 --> 00:18:06,430
Sam.

266
00:18:06,440 --> 00:18:07,010
Right?

267
00:18:07,010 --> 00:18:11,990
So it's it's working properly and then the application terminates.

268
00:18:12,620 --> 00:18:13,160
All right.

269
00:18:13,370 --> 00:18:15,460
Now, the thing here is that the.

270
00:18:16,550 --> 00:18:18,770
What if I don't want to?

271
00:18:19,670 --> 00:18:21,610
What if I want to automate this process?

272
00:18:21,620 --> 00:18:27,050
Let's say I want to have some sort of I have a job application, I want to test it on terminal, but

273
00:18:27,050 --> 00:18:31,550
I don't each time I don't want to basically type the inputs manually.

274
00:18:31,550 --> 00:18:35,870
Let's say my application experts expects lots of inputs.

275
00:18:35,870 --> 00:18:38,030
Right, so we can use this pipeline.

276
00:18:38,180 --> 00:18:38,780
So.

277
00:18:40,350 --> 00:18:45,010
Let's say if I echo use echo.

278
00:18:45,030 --> 00:18:50,790
Sam it's just we know that the output of this command, remember, echo is also an application, and

279
00:18:50,790 --> 00:18:52,350
you feed it some something.

280
00:18:52,350 --> 00:18:53,850
It just prints it to the terminal.

281
00:18:54,120 --> 00:18:59,400
Right now, I can say echo Sam and then pipe it to something.

282
00:18:59,400 --> 00:19:07,020
And that's something is just my Java application terminal pipeline and it says enter your first name,

283
00:19:07,140 --> 00:19:16,200
but it doesn't wait for you because when you pipeline the output of this application goes to your goes

284
00:19:16,440 --> 00:19:23,280
is redirected to the input of your second application and it so it inputs it to the redirects it to

285
00:19:23,280 --> 00:19:30,540
the input of the JVM and the input of our JVM is hooked up to our scanner, which is expecting to read

286
00:19:30,540 --> 00:19:32,580
a string and then print it to the console.

287
00:19:32,580 --> 00:19:33,000
Right.

288
00:19:33,000 --> 00:19:34,170
So this way.

289
00:19:35,100 --> 00:19:42,360
It actually didn't wait for us to print something because the system in is now has some character at

290
00:19:42,570 --> 00:19:46,350
that is being fed to it using this pipeline operator right.

291
00:19:46,350 --> 00:19:51,690
So it just says that your name is Sam and then it didn't wait for us to hit enter for example, here.

292
00:19:52,110 --> 00:19:55,290
Now we could basically say backslash n here.

293
00:19:56,130 --> 00:20:04,350
So if we go ahead and compile again and then run and now it doesn't wait for us to type anything, it

294
00:20:04,350 --> 00:20:10,590
just immediately reads whatever a stream that comes from the pipeline operator from the previous application.

295
00:20:10,590 --> 00:20:16,110
And obviously because we are just reading from a scanner, we are reading next word or next token.

296
00:20:16,110 --> 00:20:21,570
If I have a two words here, it only reads the first word.

297
00:20:21,810 --> 00:20:26,280
So what we can do, we can read it.

298
00:20:26,280 --> 00:20:32,910
And then so let's also say enter your last name.

299
00:20:32,910 --> 00:20:35,400
So this name becomes first name.

300
00:20:35,730 --> 00:20:38,880
And then we're going to say that

301
00:20:42,210 --> 00:20:43,860
last name again.

302
00:20:43,860 --> 00:20:51,780
We use the scanner and then your name is percent as percent as first name and then last name.

303
00:20:53,160 --> 00:20:58,290
And then what we're going to do, we're going to compile and then run.

304
00:20:58,290 --> 00:21:07,710
And now you see it doesn't wait for you to enter anything because it has already an character, a stream

305
00:21:07,710 --> 00:21:08,520
in the pipeline.

306
00:21:09,180 --> 00:21:17,010
So the input of the JVM already has is being fed some characters and then it says, your name is Samba,

307
00:21:17,040 --> 00:21:17,370
right?

308
00:21:17,370 --> 00:21:18,270
First name, last name.

309
00:21:18,270 --> 00:21:24,870
So it reads the output of these and then basically works fine.

310
00:21:24,870 --> 00:21:32,400
Now this is now we're running on Java to test our application, but now I can also basically compile

311
00:21:32,400 --> 00:21:38,160
it, write native image and then say Hyphen c.P.

312
00:21:38,700 --> 00:21:42,990
I'm going to feed it just the class path, right?

313
00:21:48,140 --> 00:21:50,750
Or maybe let's go inside the.

314
00:21:51,900 --> 00:22:00,870
The test, by the way, in the fish terminal, if you just say to execute a directory, it is.

315
00:22:00,900 --> 00:22:06,780
Remember in the past when I reviewed the concept of terminal, I said that directories have executable

316
00:22:06,780 --> 00:22:07,560
permissions.

317
00:22:07,560 --> 00:22:14,030
So if I just try to execute a directory, the fish terminal is very intelligent to realize that, okay,

318
00:22:14,070 --> 00:22:16,440
this is a directory, so it just goes into it.

319
00:22:16,660 --> 00:22:26,160
Now if I exit the fish terminal, the terminal that by default comes with the Mac OS is not that intelligent.

320
00:22:26,160 --> 00:22:31,200
If I say test, it says that test is it's not executable.

321
00:22:31,200 --> 00:22:33,690
But the fish terminal is very intelligent.

322
00:22:33,690 --> 00:22:38,610
It knows that when you are executing a directory, it means you want to jump into it.

323
00:22:39,660 --> 00:22:40,590
So actually.

324
00:22:42,920 --> 00:22:43,360
Okay.

325
00:22:43,360 --> 00:22:45,150
So where are we?

326
00:22:45,460 --> 00:22:46,880
So this test doesn't exist.

327
00:22:46,880 --> 00:22:50,670
So let's go to this directory so I can use CD.

328
00:22:50,680 --> 00:22:54,610
I can just type the name and the terminal.

329
00:22:54,610 --> 00:23:00,130
The fish shell is very intelligent to know that you want to see the OR change directory into it.

330
00:23:00,130 --> 00:23:06,490
So that's the shortcut in Fish Shell is, instead of using the CD command, just type to just try to

331
00:23:06,490 --> 00:23:11,080
execute that directory, dot forward, slash the name of the directory and it's going to work fine.

332
00:23:12,280 --> 00:23:16,030
So test note that this doesn't work.

333
00:23:16,030 --> 00:23:21,070
You have to in the Mac OS or Linux, you have to use DOT and the name of the application.

334
00:23:21,070 --> 00:23:23,260
In this case it's a directory, right?

335
00:23:23,380 --> 00:23:32,650
And now I jump into test and now I call my native image and then hyphen CP.

336
00:23:32,680 --> 00:23:37,480
Let's just use here, we don't need to use the class path and then the terminal

337
00:23:40,480 --> 00:23:45,610
pipe lining and then terminal underscore pipeline.

338
00:23:47,350 --> 00:23:53,920
So we are compiling this class file the output of the executable file, the name is Terminal Pipeline.

339
00:23:54,070 --> 00:23:55,600
It's going to quickly compile.

340
00:23:55,630 --> 00:23:57,040
It's going to be pretty fast.

341
00:23:57,460 --> 00:24:00,250
Probably takes one minute or less than one minute.

342
00:24:00,250 --> 00:24:06,460
All of my CPU cores are fully maxed out because by default the native image uses all the threads available

343
00:24:06,460 --> 00:24:10,240
on your CPU so that it reduces the compilation time.

344
00:24:12,240 --> 00:24:17,130
So what I want to show you is that not only we can pipeline to the JV team, which runs our classifier

345
00:24:17,130 --> 00:24:25,410
application, we can also pipeline to the native executable binary that comes from compiling our job

346
00:24:25,410 --> 00:24:25,980
application.

347
00:24:25,980 --> 00:24:30,210
So if I say terminal pipeline, this is my Java application.

348
00:24:30,210 --> 00:24:31,770
Enter your first name, Sam.

349
00:24:31,770 --> 00:24:33,960
Enter your last name Bob Samba.

350
00:24:33,990 --> 00:24:41,400
Right now we can say Echo Sam Bob but instead of running the Java, which is our JVM, we're just going

351
00:24:41,400 --> 00:24:46,650
to just run our Java application which was compiled to native executable binary.

352
00:24:46,650 --> 00:24:56,220
And you see that first the output streams are printed and then it reads the input to our to input the

353
00:24:56,220 --> 00:25:01,890
input stream that comes to the application and then it prints the correct output.

354
00:25:01,890 --> 00:25:10,290
So pipeline is okay if you want to, for example, basically automate automatically provide inputs to

355
00:25:10,290 --> 00:25:11,280
some application.

356
00:25:11,910 --> 00:25:14,430
It could be a job application running on top of JVM.

357
00:25:14,430 --> 00:25:18,330
It could be a Java application that has been executed to native executable binary.

358
00:25:18,330 --> 00:25:21,270
So what I'm saying is that pipeline is not a feature of the Java, right?

359
00:25:21,270 --> 00:25:24,540
It's a feature of the operating system and the terminal, the shell.

360
00:25:24,690 --> 00:25:29,280
Now another feature right now we're using the command line or terminal pipeline.

361
00:25:29,550 --> 00:25:37,950
But what I can do, I can create a text file, let's call this input the text, and then I am going

362
00:25:37,950 --> 00:25:40,620
to put Sam and Bob here, for example.

363
00:25:40,620 --> 00:25:41,190
All right.

364
00:25:41,970 --> 00:25:43,920
Now let's see what happens here.

365
00:25:44,460 --> 00:25:51,420
I'm if I if I want to print the context, the content of a text file to the terminal, I can use the

366
00:25:51,420 --> 00:25:54,090
cat command, cat input the text.

367
00:25:54,240 --> 00:25:58,500
And now you see that what, where I'm going with is instead of using the echo.

368
00:25:58,500 --> 00:26:03,870
So remember if you say Echo, the name of the file, echo assumes that everything is a string and you

369
00:26:03,870 --> 00:26:06,660
just want to print it to the terminal, which is not correct.

370
00:26:06,660 --> 00:26:06,870
Right.

371
00:26:06,870 --> 00:26:15,180
What I want is to basically read the input of this text file and cat reads the input of a text file

372
00:26:15,180 --> 00:26:17,340
and then also prints it to the console.

373
00:26:17,340 --> 00:26:25,360
So what I can do, I can say cat input the text, but instead of printing to the console pipeline it

374
00:26:25,410 --> 00:26:28,710
or feed it to another application, which is my terminal pipeline.

375
00:26:29,040 --> 00:26:33,360
So it reads the input and the input is fed to my application.

376
00:26:33,360 --> 00:26:35,400
So it says Your name is samba, right?

377
00:26:35,400 --> 00:26:36,750
So that's another way.

378
00:26:36,750 --> 00:26:38,730
So we've also seen that.

379
00:26:40,290 --> 00:26:44,430
We've also seen that we can redirect the output of an application to a file.

380
00:26:44,430 --> 00:26:44,820
Right?

381
00:26:44,820 --> 00:26:52,290
So I can say execute this, but then redirect the output to terminal text.

382
00:26:52,320 --> 00:26:52,980
Right.

383
00:26:53,070 --> 00:26:53,910
So.

384
00:26:55,970 --> 00:26:59,360
Uh, so let's see, Sam, Bob.

385
00:26:59,360 --> 00:27:00,530
And then it finishes.

386
00:27:00,530 --> 00:27:03,800
So it waits for your input in the terminal.

387
00:27:03,800 --> 00:27:09,200
But then the output of this application, whatever you use to, let's say, whatever you feed to the

388
00:27:09,200 --> 00:27:11,900
system, dot out it's not going.

389
00:27:11,900 --> 00:27:16,580
So if you look at the terminal that it says, enter your first name, enter your last name, and then

390
00:27:16,580 --> 00:27:22,700
we provide this input in terminal and then the output of the application again was redirected to the

391
00:27:22,700 --> 00:27:26,090
standard to the file instead of the terminal, which is the standard output.

392
00:27:26,090 --> 00:27:30,860
So I hope you enjoyed this lecture and now I have a very solid understanding of this redirection and

393
00:27:30,860 --> 00:27:31,680
pipeline thing.

394
00:27:31,700 --> 00:27:37,850
Sometimes, especially when you're running an application in the background, what you want to do,

395
00:27:37,880 --> 00:27:44,300
you want to redirect the output to a text file or something to a log file so that you can track those

396
00:27:44,300 --> 00:27:46,940
applications in the background to see what's going on with them.

397
00:27:46,940 --> 00:27:47,360
Right.

398
00:27:47,990 --> 00:27:50,540
So please stay tuned and I'll see the next one.
