1
00:00:01,190 --> 00:00:04,040
Hello and welcome to another tutorial.

2
00:00:04,040 --> 00:00:10,280
We're going to continue our discussion with the Eclipse ID's external tool, which is a very powerful

3
00:00:10,280 --> 00:00:17,900
thing to have in an ID and it allows us to run external applications and our Java files or any other

4
00:00:17,900 --> 00:00:19,190
thing that you want to do.

5
00:00:19,340 --> 00:00:26,420
And the goal here is to learn about these environment variables that are part of the reason that the

6
00:00:26,420 --> 00:00:34,430
external tool is very basically powerful because when you run an external application through the Eclipse

7
00:00:34,430 --> 00:00:41,570
ID, Eclipse ID knows a lot about the organization of your Java project and then it provides this internal

8
00:00:42,590 --> 00:00:50,750
environment variables that are specific to the Eclipse ID and it allows you to write basically commands

9
00:00:50,750 --> 00:00:56,870
in the external tool that change based on which files, for example, are selected in your tree view,

10
00:00:56,870 --> 00:00:58,700
in the project view, for example.

11
00:00:59,030 --> 00:01:05,240
Now we so far we've seen some of the most important internal variables that the Eclipse ID provides,

12
00:01:05,240 --> 00:01:11,570
and some of them actually can accept arguments and you add arguments using colon.

13
00:01:11,570 --> 00:01:16,520
So you still have the duller curly braces and the name of the variable.

14
00:01:16,670 --> 00:01:22,520
But then if you want to add a particular argument to this specific parameter or variable you add, call

15
00:01:22,520 --> 00:01:23,210
it right.

16
00:01:23,390 --> 00:01:30,740
For example, project class path, we saw that if you just use it by itself, it eclipse substitutes

17
00:01:30,740 --> 00:01:35,240
this variable with all the directories that are on the class path of your Java project.

18
00:01:35,240 --> 00:01:38,030
And then obviously the class path separator is colon.

19
00:01:38,030 --> 00:01:45,140
But if we want to just select a particular project, we can give the name of that project in Eclipse

20
00:01:45,140 --> 00:01:49,790
as the as the argument to this project class path environment variable.

21
00:01:50,180 --> 00:01:54,620
So you can add a project name, I believe you can only specify one particular name.

22
00:01:54,620 --> 00:02:01,220
You cannot specify like two names, but if you want to select a particular project that is on the class

23
00:02:01,220 --> 00:02:04,550
path, you can just provide the name of that project as argument.

24
00:02:04,580 --> 00:02:08,450
If all projects are desired, you don't need to pass any arguments, right?

25
00:02:08,450 --> 00:02:11,090
You just use the project class path here.

26
00:02:11,090 --> 00:02:11,330
Right?

27
00:02:11,330 --> 00:02:14,420
So let's go back to Eclipse ID again.

28
00:02:14,420 --> 00:02:15,440
We created this project.

29
00:02:15,440 --> 00:02:22,520
There are two class files here and then what we want to do, we go back and external tool I set it up

30
00:02:22,520 --> 00:02:29,330
to this dummy external tool is set to just echo whatever a string that we write to the console itself

31
00:02:29,330 --> 00:02:31,880
so that we actually see how this substitution works.

32
00:02:31,880 --> 00:02:36,680
And we say that any external tool has to be run inside some sort of directory that's called the working

33
00:02:36,680 --> 00:02:44,030
directory, because this external tool actually mimics basically the behavior of the terminal, right?

34
00:02:44,030 --> 00:02:48,380
Whenever you write a call here, it means that you are running this command.

35
00:02:48,380 --> 00:02:51,980
It is a binary application inside some working directory.

36
00:02:51,980 --> 00:02:52,670
Right.

37
00:02:52,670 --> 00:02:58,010
And then any command that you execute in terminal has to be inside some sort of working directory.

38
00:02:58,430 --> 00:03:03,320
And we said that if you want to point to the class files, you have to set the working directory to

39
00:03:03,320 --> 00:03:10,760
the beam of the Java project because Eclipse compiler organizes the compile the class file Snoopy now

40
00:03:10,760 --> 00:03:11,690
project class path.

41
00:03:11,690 --> 00:03:18,140
If we run this right now, it looks at which file is selected and it looks at the project that this

42
00:03:18,140 --> 00:03:21,590
file belongs to, and then it prints the class path of that project.

43
00:03:21,590 --> 00:03:26,990
All right, now let's go back and give it a an argument.

44
00:03:26,990 --> 00:03:34,460
So project class path, I want to tell you, just print the path to the particular project and you specify

45
00:03:34,460 --> 00:03:35,180
the name.

46
00:03:35,210 --> 00:03:40,040
Let's say this, our own project, Java native image, right?

47
00:03:40,040 --> 00:03:45,650
So we tell it the project class path, but we give it a name of the parameter.

48
00:03:47,030 --> 00:03:48,260
So apply, right?

49
00:03:49,820 --> 00:03:52,430
So let's see.

50
00:03:53,860 --> 00:03:57,610
If we select these and then dummy external tool.

51
00:03:57,640 --> 00:04:01,350
Yeah what's interesting that it is still prints a.

52
00:04:03,270 --> 00:04:04,680
Is it okay?

53
00:04:04,710 --> 00:04:06,870
No, I think it still prints the.

54
00:04:09,070 --> 00:04:10,060
Yeah, that's interesting.

55
00:04:10,060 --> 00:04:15,280
So let's go back here, Joe.

56
00:04:17,270 --> 00:04:20,540
So that's interesting that it is still a.

57
00:04:23,070 --> 00:04:28,690
Not sure if this is the SO project class path and in Java.

58
00:04:29,320 --> 00:04:32,620
So let's write something that doesn't exist.

59
00:04:33,640 --> 00:04:37,030
So command line could not be retrieved because this doesn't exist.

60
00:04:37,060 --> 00:04:44,140
Let's go back to our one at Image Show Command OC being echo.

61
00:04:45,110 --> 00:04:46,120
Oh, okay.

62
00:04:46,120 --> 00:04:47,530
So that's because.

63
00:04:49,240 --> 00:04:49,990
Let's see.

64
00:04:52,630 --> 00:04:54,820
So it points to the being directory.

65
00:04:56,580 --> 00:04:57,120
Uh.

66
00:04:57,120 --> 00:04:57,780
Okay.

67
00:04:59,510 --> 00:05:00,560
Let's see.

68
00:05:03,890 --> 00:05:05,180
Okay.

69
00:05:06,460 --> 00:05:07,720
So this one works.

70
00:05:07,720 --> 00:05:14,860
So so I think you cannot filter only the current project, but you can filter other projects that are

71
00:05:15,670 --> 00:05:20,980
on your class path because obviously your current projects should always be there.

72
00:05:20,980 --> 00:05:25,290
So I think it doesn't work on the current project, right?

73
00:05:25,300 --> 00:05:30,190
The project that you're selecting applies show command line.

74
00:05:30,190 --> 00:05:31,020
Now it doesn't.

75
00:05:31,030 --> 00:05:38,620
So if you want to select some of the projects that are dependencies on your class path, you can basically

76
00:05:40,150 --> 00:05:45,610
you can specify them as the parameter to your project class path, but you cannot just select the current

77
00:05:45,610 --> 00:05:46,360
project.

78
00:05:46,930 --> 00:05:47,770
It doesn't work, right?

79
00:05:47,770 --> 00:05:55,630
So the argument can be basically other projects that are on your class path, not the current project.

80
00:05:55,630 --> 00:05:56,200
All right.

81
00:05:56,200 --> 00:05:58,750
So back here, system property.

82
00:05:58,750 --> 00:06:03,490
So we know that when we run Eclipse ID, it actually runs on a gvm itself.

83
00:06:03,490 --> 00:06:03,970
Right.

84
00:06:03,970 --> 00:06:10,720
And if you want to see the properties of that JV team that Eclipse runs, you can use the system property

85
00:06:10,720 --> 00:06:14,310
and give it some parameters like Java Home.

86
00:06:14,350 --> 00:06:14,560
Right.

87
00:06:14,560 --> 00:06:19,240
We know that the system properties are hyphen DX something, right?

88
00:06:19,240 --> 00:06:21,130
And so let's go back to Eclipse.

89
00:06:21,130 --> 00:06:25,420
So this java home shows what jr e used for running Eclipse.

90
00:06:25,420 --> 00:06:31,810
I'd remember eclipse id runs on java and you can actually investigate that if you go to Eclipse.

91
00:06:33,140 --> 00:06:36,830
About Eclipse and then installation details.

92
00:06:38,280 --> 00:06:40,440
And then configuration.

93
00:06:40,950 --> 00:06:48,120
So basically this retrieves all the information about the gvm that Eclipse ID is running on, right?

94
00:06:48,120 --> 00:06:57,660
So Mac OS, hyphen OS and then Architecture 64, it has a splash show, a splash eclipse, lawnchair,

95
00:06:57,930 --> 00:07:01,800
eclipse plugin, etc. and then hyphen VM.

96
00:07:01,800 --> 00:07:07,890
Hyphen VM is the virtual machine and it's using an open JDK hot spot.

97
00:07:07,910 --> 00:07:08,550
Jerry Fool.

98
00:07:08,550 --> 00:07:13,860
So right now Eclipse ID is not running on any of the ADCs that I manually installed.

99
00:07:14,370 --> 00:07:18,090
It's running on the Java that comes by default with Eclipse ID.

100
00:07:18,090 --> 00:07:30,710
So I think from a few older versions like 2019, the late versions in 2019, they included a full JRI

101
00:07:30,750 --> 00:07:36,840
from open JDK into so that the eclipse also comes by default with that.

102
00:07:36,840 --> 00:07:42,630
But you can put it to the lib July of any JDK so you can change this.

103
00:07:43,320 --> 00:07:50,780
Just you have to point these replace this argument with the lib July dot dynamically or if you're on

104
00:07:50,850 --> 00:08:00,330
Linux for example, dot so on Windows it's that DLL for example and then the the the eclipse IDE runs

105
00:08:00,330 --> 00:08:03,030
that particular Java eclipse home location.

106
00:08:03,030 --> 00:08:09,330
Again, these are the system properties and then hyphen X used g1 GC.

107
00:08:09,330 --> 00:08:13,410
So the JV that eclipse is running on is using G and GC.

108
00:08:13,440 --> 00:08:20,280
Use a string deduplication at module x start on first thread or eclipse is stability.

109
00:08:20,280 --> 00:08:22,440
Internal carbon is small phones, for example.

110
00:08:22,440 --> 00:08:30,810
So these are all the system properties, java dot vmw, dot info, mixed mode, etc. but then in the

111
00:08:30,810 --> 00:08:33,600
environment variables that the eclipse provides.

112
00:08:34,780 --> 00:08:40,540
Here, for example, it has this system properties, system property.

113
00:08:41,440 --> 00:08:47,590
And if you look at the description, returns the value of a system property from the Eclipse runtime.

114
00:08:47,590 --> 00:08:50,770
What it means is that the Eclipse runtime is the gvm.

115
00:08:50,770 --> 00:08:52,870
That eclipse is running on a system.

116
00:08:52,870 --> 00:08:55,270
Property name must be specified as an argument.

117
00:08:55,270 --> 00:08:58,330
So you cannot just use the system property by itself.

118
00:08:58,330 --> 00:09:00,070
You have to give it an argument.

119
00:09:00,160 --> 00:09:06,310
And if you look at the configure so arguments, if you don't know which arguments the system property

120
00:09:06,310 --> 00:09:13,060
uses, you can select configure and it shows you all the arguments that system property of the eclipse

121
00:09:13,060 --> 00:09:20,140
ID uses and we already saw those in the configuration tab in the in the about eclipse ID for example,

122
00:09:20,140 --> 00:09:26,050
eclipse commands eclipse application, eclipse VM, Eclipse VM asks, for example.

123
00:09:26,050 --> 00:09:30,370
So let's look at the Java Java class path.

124
00:09:30,370 --> 00:09:38,770
Let's say let's, let's look at the class path that the eclipse ID uses to run the application.

125
00:09:38,770 --> 00:09:40,450
And the class path is this one.

126
00:09:40,450 --> 00:09:43,150
This Java file is on the class path.

127
00:09:43,390 --> 00:09:46,450
Org eclipse equinox lawnchair dot jar.

128
00:09:46,450 --> 00:09:47,020
Right.

129
00:09:47,020 --> 00:09:50,080
And it's inside the eclipse ide application.

130
00:09:50,080 --> 00:09:55,150
So that's on the class path and we can look at other configuration.

131
00:09:55,150 --> 00:10:05,530
So, so let's go back to our external tool system, property system property and then let's look at

132
00:10:05,530 --> 00:10:07,780
other arguments that we can pass.

133
00:10:08,830 --> 00:10:16,570
For example, eclipse VM, let's say we want a new we want to know which JVM, where is the path to

134
00:10:16,570 --> 00:10:19,540
the JDM that Eclipse is using for launching.

135
00:10:20,080 --> 00:10:20,920
So okay.

136
00:10:20,920 --> 00:10:21,910
And then apply.

137
00:10:21,910 --> 00:10:24,580
Let's run it and it tells me it's an application.

138
00:10:24,580 --> 00:10:26,950
Eclipse Dot App Contents.

139
00:10:26,950 --> 00:10:35,710
Eclipse Plugins Open JDK Hotspot Jerry Fool Mac os dot lib July dot daily right.

140
00:10:35,800 --> 00:10:44,560
So it tells me eclipse is right now it's running on its own internal Gerri not it's not using a J.D.

141
00:10:44,560 --> 00:10:52,780
from the J.D. case that I have in star right and other things but as you can see some of the it's very

142
00:10:52,780 --> 00:10:58,960
nice because not only you can use these variables list to tell you which variables you use, some of

143
00:10:58,960 --> 00:11:01,000
them if they accept arguments.

144
00:11:01,000 --> 00:11:06,760
There is a configure button here that is enabled, for example, workspace, location, configure.

145
00:11:07,300 --> 00:11:08,620
Right now it doesn't have anything.

146
00:11:08,620 --> 00:11:13,360
But let's look at the project class path.

147
00:11:13,360 --> 00:11:19,570
Let's see, you can select all the projects in the directory and then they are passed as an argument.

148
00:11:19,570 --> 00:11:23,290
So project class, path dev, java, right.

149
00:11:23,290 --> 00:11:28,390
And what you're going to notice here is that if I select project class path.

150
00:11:29,510 --> 00:11:31,220
And then he'd configure.

151
00:11:32,030 --> 00:11:40,490
We can also select the current project Java, native image, etc. So if you don't know what arguments

152
00:11:40,490 --> 00:11:47,360
you can pass, you can select and click on the configure and see which options are available, right?

153
00:11:47,360 --> 00:11:49,760
And for example, environment variable.

154
00:11:50,030 --> 00:11:54,470
And then let's say you want to actually this is something that it's good to talk about.

155
00:11:54,500 --> 00:12:01,430
Now we know that the the terminal or applications, when you run a executable binary in a terminal,

156
00:12:01,460 --> 00:12:08,060
you have your application is aware of the environment variables that are basically defined for your

157
00:12:08,060 --> 00:12:08,480
terminal.

158
00:12:08,480 --> 00:12:09,980
So let's say we want to print path.

159
00:12:09,980 --> 00:12:12,350
Let's see if this works and.

160
00:12:14,180 --> 00:12:16,820
It doesn't work and basically it's a string substitution.

161
00:12:16,820 --> 00:12:24,950
Whereas in the terminal, if I tell it echo path, it's going to print the path environment variable,

162
00:12:24,950 --> 00:12:25,220
right?

163
00:12:25,220 --> 00:12:30,230
So the question is, is it possible to define these?

164
00:12:30,800 --> 00:12:38,270
So let's see if we go to the variable and select environment where so returns the value of an environment

165
00:12:38,270 --> 00:12:41,930
variable and environment variable name must be specified as an argument, right?

166
00:12:41,930 --> 00:12:47,720
So environment where and then we give it an argument, call in, let's say we call it path.

167
00:12:47,750 --> 00:12:52,850
So we want to do look at the value of the environment, which is path.

168
00:12:53,780 --> 00:12:54,440
Uh.

169
00:12:56,140 --> 00:12:58,810
Let's see, let's run this again.

170
00:12:58,810 --> 00:13:01,990
And now it correctly returns the past environment variable.

171
00:13:01,990 --> 00:13:02,460
Right.

172
00:13:02,470 --> 00:13:05,630
So again if you want to also use a.

173
00:13:07,350 --> 00:13:13,140
If you want to also use the any of the global environment variables that are defined for your operating

174
00:13:13,140 --> 00:13:19,740
system, for your terminal, you use this internal eclipse environment well and then path if you just

175
00:13:19,740 --> 00:13:21,090
sell it, tell it the path.

176
00:13:21,090 --> 00:13:26,070
Eclipse doesn't recognize this because duller on the terminal it refers to environment variables.

177
00:13:26,070 --> 00:13:28,920
But for eclipse, this dollar doesn't mean anything.

178
00:13:31,080 --> 00:13:37,020
So again, and if you recall in our terminal, we define this class path environment variable, right?

179
00:13:37,350 --> 00:13:42,840
And if I apply and run, I have to select something and then tell it, run it.

180
00:13:42,840 --> 00:13:47,040
And you see the class path, that environment is still set, right?

181
00:13:47,040 --> 00:13:53,370
So if you want to use any of those environment variables that you use in your terminal, you can use

182
00:13:53,370 --> 00:13:59,130
this duller curly braces environment where and you pass the name of the environment variable variable

183
00:13:59,130 --> 00:14:04,980
as an argument to this environment where basically internal eclipse, IDs, variables, right?

184
00:14:04,980 --> 00:14:09,900
And in order to specify an argument for a parameter, you give it this colon.

185
00:14:09,900 --> 00:14:12,240
Right after the colon you pass the arguments.

186
00:14:14,100 --> 00:14:18,690
If you look at variables, again, an environment where right now it doesn't show anything because it

187
00:14:18,690 --> 00:14:21,710
clips doesn't really know which environment variables you've defined.

188
00:14:21,720 --> 00:14:25,500
But it's it's good to understand this.

189
00:14:26,650 --> 00:14:27,010
Again.

190
00:14:27,010 --> 00:14:33,880
I have to select something first and then run my eclipse ID and it correctly shows all the directories

191
00:14:33,880 --> 00:14:36,610
that are that are on my path environment variable.

192
00:14:37,150 --> 00:14:43,240
So arguments call in and then the argument and the most important ones are obviously environment.

193
00:14:43,240 --> 00:14:48,910
There is also important project class path system property and then workspace location.

194
00:14:49,120 --> 00:14:54,820
So let's say we want to specify a relative path to the workspace.

195
00:14:54,820 --> 00:14:58,300
We can tell you the workspace location.

196
00:14:59,840 --> 00:15:01,250
Right in the configure.

197
00:15:01,250 --> 00:15:02,750
It's empty, but that's fine.

198
00:15:02,750 --> 00:15:04,970
But from here we can pass.

199
00:15:04,970 --> 00:15:12,740
Colin Which means we're passing an argument and let's say the name of the project Java Native Image,

200
00:15:13,670 --> 00:15:14,720
some project, right?

201
00:15:14,720 --> 00:15:20,930
What it does, it tells whatever the value, the string value of the workspace location is append the

202
00:15:20,930 --> 00:15:21,470
rest.

203
00:15:21,470 --> 00:15:27,530
So when you pass an arguments to the to this workspace location, it appends the rest to that.

204
00:15:27,530 --> 00:15:30,680
So if we apply, we run.

205
00:15:30,680 --> 00:15:37,190
And right now this is my workspace location and then the rest that I specified the name of the project

206
00:15:37,190 --> 00:15:38,060
was appended.

207
00:15:38,060 --> 00:15:44,480
So when you pass an argument to work a space location adds the relative path of the directory inside

208
00:15:44,480 --> 00:15:45,140
workspace.

209
00:15:45,140 --> 00:15:45,680
Right?

210
00:15:45,680 --> 00:15:49,820
So you don't need to remember what the value of the workspace is.

211
00:15:51,020 --> 00:15:56,630
You just use this internal environment variable, you pass it an argument which is a path, relative

212
00:15:56,630 --> 00:16:01,220
path with respect to the workspace and eclipse automatically appends that.

213
00:16:01,460 --> 00:16:05,870
So returns the full or absolute path to the being directory of some project.

214
00:16:06,050 --> 00:16:11,420
We can specify this project being directory as an argument to the workspace location.

215
00:16:11,540 --> 00:16:17,720
And again, if you want to use the global environment variables of the system, you use the env underscore

216
00:16:17,720 --> 00:16:19,250
var environment variable.

217
00:16:20,390 --> 00:16:24,980
I think it's it's also here so env environment variable.

218
00:16:24,980 --> 00:16:30,530
But then you have to specify the name of that environment variable as a argument, as a parameter.

219
00:16:30,800 --> 00:16:31,400
All right.

220
00:16:32,540 --> 00:16:34,790
So finally, let's quickly also have a look.

221
00:16:34,940 --> 00:16:37,520
We've seen this now.

222
00:16:37,520 --> 00:16:44,780
Let's see again, have a quick look at the window for the environment external tool.

223
00:16:44,870 --> 00:16:51,350
So you go and select on this new button and you create a new external tool.

224
00:16:51,500 --> 00:16:55,280
You give it a name, whatever name you want, and then you location.

225
00:16:55,520 --> 00:17:03,170
And this location has to be the absolute location, absolute path to the the executable file that represents

226
00:17:03,170 --> 00:17:04,070
this application.

227
00:17:04,070 --> 00:17:04,510
Right?

228
00:17:04,550 --> 00:17:11,570
For example, native image for google vm is inside the home lieb svn substrate vm being native image.

229
00:17:11,570 --> 00:17:16,370
And we know that in the bean directory, the inside home there is also being directory.

230
00:17:16,370 --> 00:17:21,620
But in there there is a native image that is a symbolic link to the actual executable file which is

231
00:17:21,620 --> 00:17:24,560
inside lieb svn being native image.

232
00:17:25,520 --> 00:17:30,500
And when we want to configure native image, obviously you have to point it to the where the class files

233
00:17:30,500 --> 00:17:34,970
is and the class files in Eclipse projects is inside the BIM directory.

234
00:17:34,970 --> 00:17:40,700
So the project location, I'm using an internal environment variable and then forward slash P, right.

235
00:17:41,000 --> 00:17:43,430
And then you have to give it the class path.

236
00:17:43,460 --> 00:17:48,110
Right now I'm not specifying the class path, but in general you have to specify the class path.

237
00:17:48,110 --> 00:17:50,690
And we already know that the project underscore class path.

238
00:17:50,690 --> 00:17:51,650
That's what we do.

239
00:17:51,680 --> 00:17:59,180
Java type name, native image X on X on basically a class file.

240
00:17:59,180 --> 00:18:03,410
So you have to use the Java type name which returns the fully qualified name of the class file.

241
00:18:03,440 --> 00:18:04,010
Right?

242
00:18:04,010 --> 00:18:09,380
Even though we select a source file in the in the tree view of the eclipse ID, it returns the fully

243
00:18:09,380 --> 00:18:14,510
qualified name of the class file and then you can tell it what is going to be the output name of the

244
00:18:14,510 --> 00:18:16,040
project and where to put it right?

245
00:18:16,040 --> 00:18:20,420
The name of the binary typically project name, right?

246
00:18:20,420 --> 00:18:26,300
Or you can select it to choose, for example, the class name, etc., right?

247
00:18:27,110 --> 00:18:28,370
So I hope you enjoy this lecture.

248
00:18:28,370 --> 00:18:33,650
In the next lecture I'm going to finish up on this and actually give you a demo.

249
00:18:33,650 --> 00:18:38,450
And next, we're going to also have to set it up for the Maven build tool, because when you use Maven

250
00:18:38,450 --> 00:18:41,780
to build your Java project, the directory hierarchy is a little bit different.

251
00:18:41,780 --> 00:18:45,770
So Maven doesn't put the compiled class files in the Bing directory.

252
00:18:45,770 --> 00:18:49,220
So we will see how to also use the native image.

253
00:18:49,220 --> 00:18:56,570
Build a external tool that works is compatible with the MAVEN builds, so please stay tuned and I'll

254
00:18:56,570 --> 00:18:57,410
see the next one.
