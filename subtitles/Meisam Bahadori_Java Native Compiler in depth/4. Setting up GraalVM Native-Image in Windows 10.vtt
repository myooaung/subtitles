WEBVTT
1
00:00:00.300 --> 00:00:02.640
Hello and welcome to another tutorial.

2
00:00:02.760 --> 00:00:08.520
We're going to continue our discussion on how to download, install and set up the Native Image tool.

3
00:00:08.520 --> 00:00:13.800
We looked at the Mac OS and Linux and now we're going to look at the last one, which is Windows.

4
00:00:13.800 --> 00:00:18.810
Windows is always a little bit different than Mac OS and Linux because Mac OS and Linux they share the

5
00:00:18.810 --> 00:00:23.910
same core, which is Unix operating system, whereas Windows things are a little bit different, right?

6
00:00:24.090 --> 00:00:28.500
So first of all, Windows doesn't really use the bash terminal.

7
00:00:28.500 --> 00:00:30.120
So born again shell terminal.

8
00:00:30.120 --> 00:00:34.080
So Windows uses its own command prompt or in the Windows ten.

9
00:00:34.080 --> 00:00:39.240
Basically the recent versions of Windows, they introduced this PowerShell you can install Bash Terminal

10
00:00:39.390 --> 00:00:45.960
in Windows ten or the most recent versions by installing the Linux subsystem for Windows.

11
00:00:45.960 --> 00:00:50.430
Or you can just download the install some bash terminal emulator.

12
00:00:50.430 --> 00:00:51.780
So these are emulators.

13
00:00:51.780 --> 00:00:58.410
So you type the bash commands or UNIX commands in that emulator and that behind the scenes it translates

14
00:00:58.410 --> 00:01:00.180
to the Windows commands, right?

15
00:01:00.180 --> 00:01:07.290
For example, in a bash terminal you say ls and it lists all the files in the Windows Command prompt.

16
00:01:07.290 --> 00:01:10.830
You have to say dear or directory it lists or the directory.

17
00:01:10.830 --> 00:01:16.350
So this kind of emulators, you don't install an actual bash terminal, you just it just emulates that.

18
00:01:16.350 --> 00:01:19.320
So behind the scenes it translates the command back and forth.

19
00:01:20.430 --> 00:01:28.080
Now I have conditions that you install emc2 and what it does, it not only provides a terminal, a bash

20
00:01:28.110 --> 00:01:31.350
terminal emulator for you, it also allows you to install.

21
00:01:31.380 --> 00:01:36.660
Basically, it has git repositories, online repositories that allow you to install, for example,

22
00:01:36.960 --> 00:01:40.620
GCC for Windows, which is open source build tool.

23
00:01:40.620 --> 00:01:47.970
But for our use case, as we saw before, Native Image mainly works with the default toolchain of your

24
00:01:47.970 --> 00:01:49.140
platform in Windows.

25
00:01:49.140 --> 00:01:53.340
It's a microsoft visual compiler, so you pretty much have no option.

26
00:01:53.340 --> 00:01:57.690
If you want to use Native Image to compile your Java application to native executable binary, you have

27
00:01:57.690 --> 00:02:00.240
to install Microsoft visual compiler.

28
00:02:00.240 --> 00:02:00.450
Right?

29
00:02:00.450 --> 00:02:06.390
So and the most straightforward way is to download the Microsoft Visual Studio installer and then select

30
00:02:06.390 --> 00:02:10.950
only C++ stuff and then done right C and C++ and stuff.

31
00:02:10.950 --> 00:02:15.660
And then you install it, it installs the IDE, all the necessary build tools.

32
00:02:16.440 --> 00:02:17.130
We saw that.

33
00:02:17.130 --> 00:02:23.610
The complication here is that when you install that, it doesn't add the all the command line directories

34
00:02:23.610 --> 00:02:28.110
that you need for the compiler to run in the terminal to the path.

35
00:02:28.110 --> 00:02:29.780
So you have to manually set them up.

36
00:02:29.790 --> 00:02:30.240
Right.

37
00:02:31.140 --> 00:02:31.440
All right.

38
00:02:31.440 --> 00:02:37.470
So we're going to download it, install LLVM, the latest version, I believe the latest version at

39
00:02:37.470 --> 00:02:41.430
the time of recording this video is 20 2.1.0.

40
00:02:41.580 --> 00:02:47.730
And then after that a native image doesn't come by default with the downloaded file.

41
00:02:47.730 --> 00:02:51.300
Then you have to use the global update to install a native image.

42
00:02:51.660 --> 00:02:57.300
And the main difference here is that in the Mac OS and UNIX, we saw that in the Bing directory.

43
00:02:57.300 --> 00:03:04.050
In addition to the executable binaries that are from the JDK, there are also extra executable binaries

44
00:03:04.050 --> 00:03:05.940
like juju, right?

45
00:03:06.090 --> 00:03:10.800
But in Windows, juju is not an executable file, it's a command line script.

46
00:03:10.800 --> 00:03:17.640
And when you run it in terminal, it actually runs all the lines in that terminal, right in that command

47
00:03:17.640 --> 00:03:18.390
line script.

48
00:03:18.390 --> 00:03:20.340
So this is one of the main differences.

49
00:03:20.340 --> 00:03:26.880
And so you have to keep this dot cmd because if you type the name of a application without any extension

50
00:03:26.880 --> 00:03:34.890
in the command prompt in Windows, it assumes that it's a dot x dot x or basically it's an executable

51
00:03:34.890 --> 00:03:40.920
application, which is the default assumption even in Mac OS and Linux bash terminal is right.

52
00:03:40.920 --> 00:03:47.010
Whenever you type something without some DOT something without any extension, the terminal assumes

53
00:03:47.010 --> 00:03:49.140
that it's supposed to be an executable.

54
00:03:49.830 --> 00:03:58.170
So you have to execute CMD, which is a command prompt, a script and know that this is not compatible

55
00:03:58.170 --> 00:03:59.730
with the Bash Terminal emulator.

56
00:03:59.730 --> 00:04:05.670
So you kind of need to run this in the default command prompt and then install native image.

57
00:04:05.670 --> 00:04:10.440
It reaches out to the git repository and then downloads a native image and installs it.

58
00:04:10.440 --> 00:04:17.160
And then you can add the Bing director of the VM to pass and therefore you can both use the JDK that

59
00:04:17.160 --> 00:04:23.490
comes with the Google VM and also the native image directly is available and the same thing happens

60
00:04:23.490 --> 00:04:24.300
to Native Image.

61
00:04:24.300 --> 00:04:28.440
It's not an executable file, it's a command line script.

62
00:04:28.500 --> 00:04:33.480
So again, if you type native dash image, the terminal doesn't recognize it.

63
00:04:33.480 --> 00:04:38.850
You have to say native dash, image, dot, cmd, which, and then you pass some arguments and then

64
00:04:38.850 --> 00:04:43.230
this script reads the arguments and execute some commands.

65
00:04:43.500 --> 00:04:43.950
All right.

66
00:04:43.950 --> 00:04:49.170
So in the windows, the G view, the Global Updater and the native image, these are command line scripts.

67
00:04:50.790 --> 00:04:51.110
Okay.

68
00:04:51.150 --> 00:04:57.660
After we install the download the native image we test, we try to run the native image script that

69
00:04:57.660 --> 00:05:01.020
cmd hyphen, hyphen version and see if it works fine here.

70
00:05:01.020 --> 00:05:06.600
I've just dragged and dropped the native image at cmd file directly to the terminal hyphen hyphen version

71
00:05:06.600 --> 00:05:11.550
and it tells me that it's the album Java 17 edition, so everything works fine.

72
00:05:11.550 --> 00:05:15.390
You can do the same thing in Windows PowerShell.

73
00:05:15.390 --> 00:05:21.270
So in the Windows PowerShell, you can type, you can go to the Bing directory of the Grand VM and then

74
00:05:21.270 --> 00:05:24.780
say you cmd install native image, right?

75
00:05:24.900 --> 00:05:29.490
So run cmd, which is a command line script from the Bing directory.

76
00:05:29.760 --> 00:05:32.220
So let's head to Windows and see what we can.

77
00:05:33.340 --> 00:05:37.640
So search for download Google Vim and then click on the first link.

78
00:05:37.660 --> 00:05:41.140
It takes you to the home page and then we want to download the community edition.

79
00:05:41.170 --> 00:05:43.960
The latest version is 22.1.

80
00:05:43.960 --> 00:05:45.100
So let's see download.

81
00:05:45.100 --> 00:05:53.590
It takes us to the to the git repository and then we want to select windows and at the moment Linux

82
00:05:53.590 --> 00:06:01.390
and Mac OS, they are available both for X 64 bit platform which is AMD, Intel and ARM, but then Windows

83
00:06:01.600 --> 00:06:08.800
apparently only is available for the Intel and AMD, which is the x 64 architecture.

84
00:06:08.800 --> 00:06:16.030
So let's go with JDK 17, let's hit the download and then it's going to basically start downloading.

85
00:06:16.150 --> 00:06:19.720
The size of the file is about 350 megabyte.

86
00:06:20.800 --> 00:06:22.320
But it's going to take some time.

87
00:06:22.320 --> 00:06:28.980
And after that, we're going to unzipped and then moving to a movie, to our program files where we

88
00:06:29.550 --> 00:06:32.480
where we installed our other ADCs.

89
00:06:32.490 --> 00:06:36.420
So I'm going to open the directory and then extract it here.

90
00:06:36.450 --> 00:06:39.690
So right click seven Z extract here.

91
00:06:42.340 --> 00:06:47.830
And then I'm going to open up my file explorer.

92
00:06:49.980 --> 00:06:52.770
And go to the program files.

93
00:06:53.430 --> 00:07:00.420
So this PC, the root directory of my operating system program files and in Java.

94
00:07:00.420 --> 00:07:08.160
And then so far I've installed the JDK 17, JDK eight, I've installed an older version which of LLVM

95
00:07:08.160 --> 00:07:14.970
17, which is 22.02, and now the most recent version is 20 2.1.0.

96
00:07:14.970 --> 00:07:16.950
So we just we can't copy or cut it.

97
00:07:16.950 --> 00:07:19.350
I'm going to copy and then paste this here.

98
00:07:20.270 --> 00:07:23.270
And then it asks us for administrative permission.

99
00:07:23.270 --> 00:07:24.200
We say yes.

100
00:07:24.380 --> 00:07:26.330
You don't really need to enter any password.

101
00:07:26.360 --> 00:07:33.170
It's going to just copy and paste to the root of our C folder program files and then in the Java directory.

102
00:07:34.970 --> 00:07:41.000
After this is done, we're going to run our terminal, which I already have it here.

103
00:07:41.000 --> 00:07:41.660
And then

104
00:07:44.540 --> 00:07:45.410
we can.

105
00:07:49.880 --> 00:07:50.720
Let's go.

106
00:07:50.720 --> 00:07:51.200
And.

107
00:07:52.990 --> 00:07:57.280
Let's wait for this to finish and then we can run the from the bin directory.

108
00:07:57.280 --> 00:08:00.520
We can run the Google Updater and.

109
00:08:06.020 --> 00:08:08.120
And then install the native image.

110
00:08:08.120 --> 00:08:09.590
So it's almost done.

111
00:08:09.620 --> 00:08:14.600
I'm running in a virtual machine, so it's a little bit slow, but again, almost done.

112
00:08:16.300 --> 00:08:18.770
And we can, uh, close this, uh, window.

113
00:08:18.790 --> 00:08:24.100
We can also minimize our explorer, the Microsoft Edge.

114
00:08:33.030 --> 00:08:34.610
So almost down.

115
00:08:34.620 --> 00:08:36.600
Let's wait again to finish.

116
00:08:37.830 --> 00:08:40.830
And Windows ten also comes with the PowerShell.

117
00:08:40.830 --> 00:08:50.340
So the PowerShell, I believe you can try like the bash command here, for example.

118
00:08:50.340 --> 00:08:52.710
Liz It works fine, right?

119
00:08:52.710 --> 00:08:56.880
So it kind of is closer to the bash terminal in macOS and Linux.

120
00:08:56.880 --> 00:09:03.690
So I have the CMD here and also the the PowerShell.

121
00:09:03.690 --> 00:09:05.700
So let's put these side by side.

122
00:09:11.770 --> 00:09:12.420
Okay.

123
00:09:12.430 --> 00:09:17.470
And then we can work with PowerShell or Command prompt.

124
00:09:17.470 --> 00:09:19.120
So this one is almost done.

125
00:09:19.120 --> 00:09:20.410
Let's wait a little bit more.

126
00:09:29.130 --> 00:09:33.920
So for example, in the command prompt if you type let's it's not going to probably work.

127
00:09:33.930 --> 00:09:36.420
It actually works nicely, which is interesting.

128
00:09:37.650 --> 00:09:44.920
So you type the air and it shows you the list in a basically.

129
00:09:46.790 --> 00:09:48.360
Okay, so this is done.

130
00:09:49.920 --> 00:09:51.210
What we can do now.

131
00:09:51.210 --> 00:09:58.140
For example, go here, go to the bin directory and actually so we can copy this path and then say a

132
00:09:58.170 --> 00:10:02.940
CD and then use a double code.

133
00:10:02.940 --> 00:10:10.050
And then we are now in the LLVM 17 version, 22 .1.0 and then the bin directory.

134
00:10:11.100 --> 00:10:17.940
And now if I use if I type go hyphen, hyphen version, it's not going to find it.

135
00:10:20.700 --> 00:10:21.300
Let's see.

136
00:10:21.300 --> 00:10:25.080
And then if we say, gee, you seemed hyphen, hyphen, version.

137
00:10:26.320 --> 00:10:28.100
Uh, let's see.

138
00:10:28.410 --> 00:10:32.150
So we have to say dot.

139
00:10:32.820 --> 00:10:36.000
For example, you dot, cmd, hyphen, hyphen, virgin.

140
00:10:36.150 --> 00:10:37.590
Now it works fine.

141
00:10:37.890 --> 00:10:41.220
I guess backslash also works fine in the PowerShell.

142
00:10:41.310 --> 00:10:42.060
Yes.

143
00:10:42.330 --> 00:10:45.700
So if we don't add the current directory here, you.

144
00:10:45.720 --> 00:10:47.010
It's not going to work.

145
00:10:47.370 --> 00:10:49.080
We can try with the command prompt.

146
00:10:49.080 --> 00:10:56.250
So let's copy this path again and then yes, let's use double code because of the space in the program

147
00:10:56.250 --> 00:10:56.880
files.

148
00:10:57.330 --> 00:11:01.800
And now let's say geo hyphen hyphen version.

149
00:11:02.280 --> 00:11:04.140
It works interestingly.

150
00:11:04.140 --> 00:11:08.000
And then Duda cmd, hyphen, hyphen version.

151
00:11:08.010 --> 00:11:09.120
It also works, right?

152
00:11:09.360 --> 00:11:12.750
So let's stick a state with the command prompt.

153
00:11:12.750 --> 00:11:21.600
And if I typed you here, you see juju is a cmd command line script so we can open with the text editor

154
00:11:21.810 --> 00:11:25.140
and it has some scripts that get run.

155
00:11:25.290 --> 00:11:25.820
Right.

156
00:11:25.830 --> 00:11:29.460
So this is not a native executable file, it's a script.

157
00:11:29.910 --> 00:11:35.640
So what we can say is a dot cmd install native image.

158
00:11:35.970 --> 00:11:39.760
So insufficient privileges for administration of VM.

159
00:11:39.780 --> 00:11:46.100
You need become an administrator user to perform administrative tasks on global VM.

160
00:11:46.350 --> 00:11:49.560
Depending on sim, you may need to use OS tools or.

161
00:11:49.840 --> 00:11:50.130
Okay.

162
00:11:50.130 --> 00:11:51.750
So let's try this here.

163
00:11:51.960 --> 00:11:57.990
So go cmd install native image.

164
00:11:58.770 --> 00:12:01.530
So insufficient privileges for administration.

165
00:12:03.060 --> 00:12:04.380
So let's see.

166
00:12:04.380 --> 00:12:09.780
Sudo and indu dot cmd.

167
00:12:10.200 --> 00:12:11.550
Let's see if this works.

168
00:12:12.360 --> 00:12:14.940
Install native image.

169
00:12:15.810 --> 00:12:16.110
All right.

170
00:12:16.110 --> 00:12:21.330
So what we're going to do actually what we need to do, we need to run the terminal with the administrative

171
00:12:21.330 --> 00:12:26.640
privileges, let's say type CMD and then right click run as administrator.

172
00:12:26.970 --> 00:12:34.980
Now we are an administrator, so let's change back to the Bing directory of the VM CD and note that

173
00:12:35.020 --> 00:12:40.020
use that double code so that because program files unfortunately has a space in it.

174
00:12:40.650 --> 00:12:50.730
And then let's go back here and then say you dot cmd install native image and now it's downloading the

175
00:12:50.730 --> 00:12:58.740
native image from a LLVM repositories from Git Hub and then installing new components.

176
00:12:58.770 --> 00:13:03.630
It's going to put a native dash image cmd file in the Bing directory.

177
00:13:03.630 --> 00:13:05.670
So let's wait this for this to finish.

178
00:13:10.290 --> 00:13:16.560
It's installing the new component and after it's finished, we are ready to quickly check whether the

179
00:13:16.560 --> 00:13:17.880
native image works fine.

180
00:13:19.390 --> 00:13:25.810
So I'm going to open up this test directory and create a new text file.

181
00:13:25.810 --> 00:13:30.040
Let's call it our Hello World dot Java.

182
00:13:30.190 --> 00:13:37.230
I want to quickly update basically write a simple Hello World Java application and then compile it with

183
00:13:37.230 --> 00:13:46.810
the native image public class hello world and then US public static

184
00:13:49.060 --> 00:14:00.970
static void main and then a string args and then system dot out the print line.

185
00:14:01.330 --> 00:14:10.300
Hello world from Java application in windows and semicolon.

186
00:14:10.300 --> 00:14:12.400
So this is our Java application.

187
00:14:14.390 --> 00:14:16.700
So apparently so this is done.

188
00:14:16.700 --> 00:14:22.940
And then let's say if we have the native image that cmd hyphen hyphen version and it works fine, so,

189
00:14:23.030 --> 00:14:25.580
so native image is ready to go.

190
00:14:26.300 --> 00:14:31.550
All right, so we are in the Bing directory, what we can do.

191
00:14:32.600 --> 00:14:36.460
First of all, we can go ahead and define a Google home environment variable.

192
00:14:36.470 --> 00:14:38.260
So let's do that.

193
00:14:38.270 --> 00:14:40.760
Let's go one directory up.

194
00:14:42.200 --> 00:14:44.720
Here and then copy this.

195
00:14:45.560 --> 00:14:55.220
And then we are going to go back to our file explorer and then these PC system properties and then advanced

196
00:14:55.220 --> 00:14:58.400
system settings, environment variables.

197
00:14:58.400 --> 00:15:05.120
And then we're going to in the user variable for this particular user, I'm going to create a new one.

198
00:15:05.120 --> 00:15:07.970
I'm going to call it growl home.

199
00:15:07.970 --> 00:15:14.930
And the value it's going, I'm going to put it actually in double quotes because of this space in program

200
00:15:14.930 --> 00:15:16.190
voice and hit.

201
00:15:16.190 --> 00:15:22.130
Okay, okay, let's close the terminal or command prompt and then open it up again.

202
00:15:22.370 --> 00:15:30.740
And we are going to say that echo percent growl home and C program files.

203
00:15:30.740 --> 00:15:31.170
Okay.

204
00:15:31.220 --> 00:15:35.600
And then we're going to say that percent crawl home.

205
00:15:35.600 --> 00:15:42.950
We're accessing an environment variable slash being a slash native dash image and dot cmd hyphen hyphen

206
00:15:42.950 --> 00:15:48.080
version is not as an internal or external command.

207
00:15:48.080 --> 00:15:52.490
So the problem here is that we have to put it in.

208
00:15:54.380 --> 00:15:56.540
Do we need to put it in the double codes?

209
00:15:57.770 --> 00:15:58.340
No.

210
00:15:58.340 --> 00:16:05.270
So I guess we need to go back to the system settings, environment variables, edit this and remove

211
00:16:05.270 --> 00:16:08.150
that double code that we had here.

212
00:16:09.260 --> 00:16:10.550
Let's see if this works.

213
00:16:10.580 --> 00:16:13.100
Let's close this and open this up again.

214
00:16:14.820 --> 00:16:15.570
All right.

215
00:16:15.570 --> 00:16:16.320
And then.

216
00:16:17.050 --> 00:16:18.480
Echo percent.

217
00:16:18.690 --> 00:16:19.800
Growl home.

218
00:16:22.730 --> 00:16:23.240
All right.

219
00:16:23.240 --> 00:16:26.090
And then go all home.

220
00:16:27.740 --> 00:16:33.920
Percent been or for what is like oh actually we should probably use backward slash being and then native

221
00:16:33.920 --> 00:16:37.160
dash image that cmd hyphen hyphen version.

222
00:16:37.730 --> 00:16:40.820
All right so that is space in the program files.

223
00:16:40.820 --> 00:16:47.090
Word is going to cause a problem so let's put the growl home in a double code here and now this works.

224
00:16:47.090 --> 00:16:49.010
So make sure that there is.

225
00:16:49.010 --> 00:16:54.380
Unfortunately in Windows the program files directory has a space in it and terminals command prompts.

226
00:16:54.380 --> 00:16:57.140
They're not really that friendly to a space.

227
00:16:57.210 --> 00:17:02.810
So you kind of need to put them in double code to tell the terminal to treat them as raw as string.

228
00:17:02.810 --> 00:17:03.290
Right.

229
00:17:04.670 --> 00:17:05.000
All right.

230
00:17:05.000 --> 00:17:14.360
So our crawl home is basically a nicely defined actually.

231
00:17:14.360 --> 00:17:22.000
We can also define a non standard environment variable in Windows for simplicity, which is called the

232
00:17:22.010 --> 00:17:23.840
growl growl bean.

233
00:17:23.840 --> 00:17:31.580
So let's go back here and then open up our environment variables, new environment variables, growl

234
00:17:31.580 --> 00:17:35.840
underscore bin all caps and then paste the bing directory.

235
00:17:35.840 --> 00:17:36.490
Okay.

236
00:17:38.660 --> 00:17:39.110
All right.

237
00:17:39.110 --> 00:17:43.040
And then let's quickly close up and open up our terminal.

238
00:17:44.160 --> 00:17:55.020
And if I say basically growl underscore bing directory and then forward slash native image dot cmd hyphen,

239
00:17:55.020 --> 00:17:56.250
hyphen version.

240
00:17:56.690 --> 00:17:56.910
Okay.

241
00:17:56.940 --> 00:18:03.210
So again, we have to put this in double codes describing because of the space in program files.

242
00:18:07.440 --> 00:18:12.660
We need to use a backward slash here so we use a backward slash in the command prompt.

243
00:18:12.660 --> 00:18:13.620
Everything works fine.

244
00:18:13.620 --> 00:18:18.420
Make sure that you put this crawl bin or crawl home in the double code so that it works.

245
00:18:18.660 --> 00:18:21.030
All right, so we have access to our native image.

246
00:18:21.030 --> 00:18:23.070
Everything seems to be set properly.

247
00:18:23.070 --> 00:18:27.250
And then I'm going to use the JDK that comes with the.

248
00:18:28.550 --> 00:18:34.310
So that comes with the um we DeGraw VM to compile my job application.

249
00:18:34.310 --> 00:18:41.360
So I'm going to seed into the test directory or actually in the desktop and then this test directory.

250
00:18:42.950 --> 00:18:43.370
All right.

251
00:18:43.370 --> 00:18:53.240
So I have hello world I'm going to say double code growl a bean directory, double code and then backward

252
00:18:53.300 --> 00:18:58.640
slash java C hyphen c p here and then a hello world java.

253
00:18:59.390 --> 00:19:01.150
So let's see, everything compiles fine.

254
00:19:01.160 --> 00:19:07.160
We're using the Java compiler from the Grail VM and now we have the Hello vocal class.

255
00:19:07.580 --> 00:19:13.550
And we're going to say that instead of Java C, we're going to use the JVM and give it the name of the

256
00:19:13.550 --> 00:19:16.310
class, which is Hello World and it works fine.

257
00:19:16.580 --> 00:19:23.870
So right now we were able to quickly compile and now we're going to say that growl bean and then instead

258
00:19:23.870 --> 00:19:30.260
of using the JDK or JVM, we're going to use the native image dart CMD and you give it the class path,

259
00:19:30.470 --> 00:19:34.130
which we only have one class and that's in the current working directory.

260
00:19:34.400 --> 00:19:39.440
So class path is the DOT or the current working directory and then the name of the class file which

261
00:19:39.440 --> 00:19:40.190
is Helloworld.

262
00:19:40.220 --> 00:19:41.540
So let's run this.

263
00:19:42.110 --> 00:19:50.570
So it's going to fail because Native Image tries to search for the default toolchain, which is the

264
00:19:50.570 --> 00:19:55.190
Microsoft visual compiler and I believe Microsoft visual compiler.

265
00:19:55.190 --> 00:19:55.940
Let's see.

266
00:19:56.270 --> 00:19:56.570
Yeah.

267
00:19:56.570 --> 00:20:01.310
So default native compiler executable cl codecs not found.

268
00:20:01.310 --> 00:20:07.580
So CL exit is the command line tool for the Microsoft visual compiler.

269
00:20:09.110 --> 00:20:11.090
It was not found on the path.

270
00:20:11.900 --> 00:20:19.640
And what we said before, you have to so you have to go to the where you install the Microsoft visual

271
00:20:19.640 --> 00:20:20.330
compiler.

272
00:20:20.330 --> 00:20:29.270
So this PC C Drive program files Microsoft Visual Studio, the Virgin community, and then there is

273
00:20:29.270 --> 00:20:36.200
a VCC visual compiler auxiliary build and they have a command line as scripts for setting up the environment

274
00:20:36.200 --> 00:20:38.810
variable if you want to do a 64 bit compiler.

275
00:20:39.170 --> 00:20:43.970
So you just drag this and then basically execute it.

276
00:20:44.060 --> 00:20:46.610
It's a command line script that sets the.

277
00:20:48.450 --> 00:20:50.640
So it's the value.

278
00:20:50.640 --> 00:20:56.400
And now actually what we can do, we can actually define a global environment variable.

279
00:20:56.400 --> 00:20:57.450
So let's also do that.

280
00:20:57.450 --> 00:21:00.990
That's, that's very good to have makes life much easier.

281
00:21:01.470 --> 00:21:09.690
So let's go to the PC system properties and then advanced system settings and then environment variable.

282
00:21:09.690 --> 00:21:15.690
I'm going to say that RMS V C was 64 bit.

283
00:21:16.470 --> 00:21:22.710
I mean, I'm going to only use the 64 bit, so it's not going to be and then backwards slash and then

284
00:21:22.710 --> 00:21:33.900
the name of this the name of this application which is we see visual compiler was variable 64 bit.

285
00:21:35.550 --> 00:21:36.750
Let's paste this here.

286
00:21:36.780 --> 00:21:37.360
Okay.

287
00:21:37.380 --> 00:21:38.020
Okay.

288
00:21:38.040 --> 00:21:38.670
Okay.

289
00:21:39.300 --> 00:21:46.800
Now what I'm going to do if I close this and open this up again, if I say select Excel, it's not going

290
00:21:46.800 --> 00:21:50.210
to find it because the path is not correctly said.

291
00:21:50.220 --> 00:21:59.130
But if I say MZ V.C. or basically I'm accessing an environment variable RMS, we see rms v c underscore

292
00:21:59.130 --> 00:21:59.940
vars.

293
00:22:02.430 --> 00:22:03.570
Yeah, we have to do it.

294
00:22:03.570 --> 00:22:05.340
Use it in the double code.

295
00:22:07.470 --> 00:22:11.670
And now it automatically runs the 64 bit and the path is set.

296
00:22:11.670 --> 00:22:21.210
So if I say echo percent path and now all the Microsoft visual compiler directories that I need to compile

297
00:22:21.210 --> 00:22:26.430
an application from terminal are added to the path and they are set up for the 64 bit compiler.

298
00:22:26.430 --> 00:22:30.030
So I recommend you define these environment variables so that it's very easy.

299
00:22:30.030 --> 00:22:31.740
Now my path is set up.

300
00:22:31.980 --> 00:22:35.790
So let's go back to our desktop for a slice test.

301
00:22:35.790 --> 00:22:38.400
We are have we have this hello world class.

302
00:22:39.390 --> 00:22:42.960
So let's go now run our native image.

303
00:22:42.960 --> 00:22:46.650
So we're going to say that crawl.

304
00:22:49.410 --> 00:22:55.020
Let's actually go, let's, let's run this with the double code later I'll, we'll check whether we

305
00:22:55.020 --> 00:22:59.280
can somehow get rid of this double code because it's a little bit annoying.

306
00:22:59.280 --> 00:23:03.810
So grabbing environment variable in the double code because program files has a space.

307
00:23:03.810 --> 00:23:11.370
So we want to get rid of that and then backwards slash native dash image dot cmd and then hyphen CP

308
00:23:11.400 --> 00:23:11.940
here.

309
00:23:11.940 --> 00:23:18.150
Right, the class path is here and then the name of the class hello world and then the output.

310
00:23:18.150 --> 00:23:21.780
We want to put it here, let's call it my Java app.

311
00:23:22.680 --> 00:23:28.860
So it's going to be able to find a cloud exit, which is the Microsoft Visual Studio compiler.

312
00:23:28.860 --> 00:23:36.330
So VM native image creating creating this my app Java in the current working directory, everything

313
00:23:36.330 --> 00:23:38.370
seems to be going well.

314
00:23:38.370 --> 00:23:39.210
There is no error.

315
00:23:39.210 --> 00:23:45.300
So it was able to find a default toolchain of the Windows, which is the Microsoft visual compiler.

316
00:23:46.200 --> 00:23:54.330
And again, the trick is to go to the auxiliary directory in the bean and then run v c var 64 dot bat.

317
00:23:54.330 --> 00:24:00.180
And the easiest thing is to define a global environment variable that points to this file and then just

318
00:24:00.180 --> 00:24:03.690
quickly run it in a in your command prompt.

319
00:24:05.340 --> 00:24:05.640
All right.

320
00:24:05.640 --> 00:24:07.590
So let's wait this to finish.

321
00:24:08.250 --> 00:24:10.890
Usually the compilation of a class is relatively fast.

322
00:24:10.890 --> 00:24:16.350
I'm running in a virtual machine, so it takes a little bit of more time, but it's going to eventually

323
00:24:16.350 --> 00:24:24.900
finish up and then we can quickly execute the output next executable file, which is my Java app, and

324
00:24:24.900 --> 00:24:29.280
make sure that it prints the the right thing to the console.

325
00:24:29.280 --> 00:24:29.730
Right.

326
00:24:29.730 --> 00:24:34.560
So this is a quick test that our native image is quick correctly installed.

327
00:24:35.400 --> 00:24:46.380
The default toolchain of the platform is set and then we can also compile a Java application to the

328
00:24:46.380 --> 00:24:47.850
native executable binary.

329
00:24:47.850 --> 00:24:51.030
So this is just a quick demo in the future lecture.

330
00:24:51.030 --> 00:25:01.080
I will go into all the details and we'll show you how to basically I will show you what command line

331
00:25:01.080 --> 00:25:06.060
parameters that you can use with the native image and more details in Java.

332
00:25:08.250 --> 00:25:11.370
So it's still compiling.

333
00:25:15.560 --> 00:25:20.270
So it's using the C compiler called X, which is Microsoft X 64.

334
00:25:20.300 --> 00:25:23.600
This is the same version of the Microsoft visual compiler.

335
00:25:23.600 --> 00:25:25.040
So no problem.

336
00:25:25.040 --> 00:25:30.020
Which finally we're finding with finding the default toolchain of Windows.

337
00:25:30.020 --> 00:25:37.510
By default it uses the serial GC for the garbage collector and then it's compiling building universe

338
00:25:37.520 --> 00:25:38.810
parsing methods.

339
00:25:39.780 --> 00:25:40.950
Enlightening methods.

340
00:25:40.950 --> 00:25:43.470
So everything is going as expected.

341
00:25:43.470 --> 00:25:47.160
So we will at the end get our executable file.

342
00:25:48.750 --> 00:25:50.400
It's probably no problem.

343
00:25:50.400 --> 00:25:51.750
We're not going to encounter any.

344
00:25:51.780 --> 00:25:58.680
Usually you encounter a problem at the beginning if the native image cannot dictate your default platform

345
00:25:58.680 --> 00:26:03.120
compiler, but once it detects that, everything else should go smoothly.

346
00:26:05.140 --> 00:26:06.850
So compiling methods.

347
00:26:09.950 --> 00:26:11.980
And now everything is done.

348
00:26:11.990 --> 00:26:13.880
Our executable file is there.

349
00:26:13.880 --> 00:26:19.550
And as you can see, the extension is that exa we know that in macros linux executable files don't have

350
00:26:19.850 --> 00:26:20.780
any extensions.

351
00:26:20.780 --> 00:26:25.780
So you can either run it with my java app dot xa.

352
00:26:28.570 --> 00:26:29.470
And it works.

353
00:26:29.470 --> 00:26:32.860
And you don't need to add the current working directory.

354
00:26:33.340 --> 00:26:37.480
You don't say you don't need to say dot and then my Java app,

355
00:26:40.510 --> 00:26:41.290
you can do that.

356
00:26:41.290 --> 00:26:46.060
But that's not necessary because the current in Windows, the current working directory is automatically

357
00:26:46.900 --> 00:26:47.950
appended to the path.

358
00:26:47.950 --> 00:26:50.440
But you can also drop the extension, right?

359
00:26:50.440 --> 00:26:55.900
Because when you type some name with some space and something else, the terminal always assumes that

360
00:26:55.900 --> 00:27:02.440
the first string until it hits a space is the name of the executable application and the other strings

361
00:27:02.440 --> 00:27:04.750
are the command line arguments that are passed.

362
00:27:05.020 --> 00:27:05.530
Right?

363
00:27:05.620 --> 00:27:10.000
So it doesn't matter if I say my Java app or my Java app not exist.

364
00:27:10.150 --> 00:27:14.760
So we were able to compile our job application to a native executable.

365
00:27:14.770 --> 00:27:15.700
The size is large.

366
00:27:15.700 --> 00:27:23.320
12 megabytes mostly comes from the Java and the JDK and the garbage collector stuff, and our native

367
00:27:23.320 --> 00:27:24.790
image is fully set up on windows.

368
00:27:24.790 --> 00:27:29.380
Again, setting up the native image windows is a little bit more complicated than macOS and Linux,

369
00:27:29.380 --> 00:27:32.770
but I hope you now have a good understanding how to set it up.

370
00:27:32.770 --> 00:27:39.370
And from the next lecture we're going to see how to actually use the native image.

371
00:27:39.490 --> 00:27:41.920
So please stay tuned and I'll see the next one.
