1
00:00:01,140 --> 00:00:03,510
Hello and welcome to another tutorial.

2
00:00:03,510 --> 00:00:11,640
We're going to continue our discussion on external tools for running the native image with a MAVEN project

3
00:00:11,640 --> 00:00:13,030
inside Eclipse IDE.

4
00:00:13,080 --> 00:00:18,430
And we saw how to set up a MAVEN project in Eclipse ID, how to set the run configuration, how to set

5
00:00:18,430 --> 00:00:25,350
the compiler version properties for source and target to, let's say, JDK 17.

6
00:00:25,440 --> 00:00:29,040
And then we saw how to run Maven build.

7
00:00:29,190 --> 00:00:30,510
We set that by default.

8
00:00:30,510 --> 00:00:36,000
Eclipse uses its internal compiler to compile these, and it knows that it has to put the classifiers

9
00:00:36,000 --> 00:00:37,380
inside its target directory.

10
00:00:37,380 --> 00:00:39,720
That's how MAVEN applications work.

11
00:00:39,720 --> 00:00:40,320
Right.

12
00:00:40,320 --> 00:00:48,450
And but then let's do a thing here is that we said that the reason people use MAVEN is twofold.

13
00:00:48,450 --> 00:00:54,030
One is if I share this project, the source file, this whole project with some other person, maybe

14
00:00:54,030 --> 00:00:55,260
they use different IDs.

15
00:00:55,260 --> 00:00:55,470
Right?

16
00:00:55,470 --> 00:01:02,100
And we said that if the project build of that project is managed by the ID, then importing this Eclipse

17
00:01:02,100 --> 00:01:08,190
project into another ID like a IntelliJ is probably not that easy, but with Maven people don't care,

18
00:01:08,190 --> 00:01:08,460
right?

19
00:01:08,460 --> 00:01:12,520
So first of all, most of the IDs have support for Maven.

20
00:01:12,520 --> 00:01:18,480
And the other thing is that you don't really need to rely on ID to build this MAVEN project and create

21
00:01:18,480 --> 00:01:19,110
the artifact.

22
00:01:19,110 --> 00:01:24,180
Let's say eventually this project will be a jar file, will be compiled and packaged as a jar file and

23
00:01:24,180 --> 00:01:27,390
other people can use it as a dependency.

24
00:01:27,390 --> 00:01:27,870
Right?

25
00:01:28,410 --> 00:01:30,120
So Maven only understands poem.

26
00:01:30,120 --> 00:01:37,770
So I can actually let's I can actually open the root here actually in a terminal.

27
00:01:37,770 --> 00:01:39,480
Let's open it in a terminal.

28
00:01:40,740 --> 00:01:45,960
As I mentioned, after I installed Maven, it's added to the path environment variable.

29
00:01:45,960 --> 00:01:52,860
So mv vn which is the MAVEN command is available and I have this poem directory maven tool only understands

30
00:01:52,860 --> 00:01:53,250
poem.

31
00:01:53,250 --> 00:01:53,850
Right?

32
00:01:53,850 --> 00:01:59,820
So if I say ambient clean, it looks at the poem, understands that this directory has a poem.

33
00:01:59,820 --> 00:02:04,650
So it's a maven project and it tells me that I'm cleaning everything and it was successful.

34
00:02:04,680 --> 00:02:09,900
If now we look at this target directory, it's fully empty, right?

35
00:02:09,900 --> 00:02:11,820
The classes is fully empty, right?

36
00:02:11,820 --> 00:02:14,910
So the maven clean actually doesn't clean up the target.

37
00:02:14,910 --> 00:02:19,260
It cleans up the classes because this classes is where all the class files are.

38
00:02:19,260 --> 00:02:22,380
This is the root of our class path for the Java project.

39
00:02:22,410 --> 00:02:28,140
Now obviously now if I try to run this in, Eclipse is going to give us an error because I removed all

40
00:02:28,140 --> 00:02:28,980
the class files.

41
00:02:28,980 --> 00:02:33,390
So the main class, this demo class is no longer available, the compiled version of it.

42
00:02:33,780 --> 00:02:40,800
But then I can go ahead and if somebody gives me this Maven project, I can go inside this root directory

43
00:02:40,860 --> 00:02:46,140
that has the file and I tell my machine to just compile this application.

44
00:02:46,350 --> 00:02:50,040
And again, Maven looks at the poem, understands all the configurations.

45
00:02:50,040 --> 00:02:55,260
Remember, all the configurations are in the poem, for example, the compiler target, etc. And it

46
00:02:55,260 --> 00:02:59,730
tells me that I'm compiling two source files and putting them in the target classes.

47
00:02:59,730 --> 00:03:09,030
So if we say LS Target and in classes, now we have this job on native image and inside that it's going

48
00:03:09,030 --> 00:03:10,650
to be our

49
00:03:13,650 --> 00:03:18,810
inside, that it's going to be our two classes that are on the class path, demo class, test class,

50
00:03:18,810 --> 00:03:19,260
right?

51
00:03:19,260 --> 00:03:26,040
And now if I go back to Eclipse and try to run it, it's going to work because I use Maven Build Tool

52
00:03:26,040 --> 00:03:28,230
to compile with JDK 17.

53
00:03:28,500 --> 00:03:35,520
And then Eclipse knows that in order to run a Java application, which is part of the MAVEN, it has

54
00:03:35,520 --> 00:03:40,680
to search inside the target class's right target directory and inside that there is a classes set.

55
00:03:40,680 --> 00:03:47,040
So Eclipse Eclipse is very well aware and that's the beauty of having a Maven project inside Eclipse.

56
00:03:47,190 --> 00:03:50,250
Now if you are more familiar with Maven, you know that you can't.

57
00:03:50,250 --> 00:03:53,160
You don't even need to create a Maven project inside an ID.

58
00:03:53,190 --> 00:04:00,210
You can just create a directory, use maven, basically use the MAVEN machine and then archetype, for

59
00:04:00,210 --> 00:04:07,410
example, and then give it and it creates a directory, creates this hierarchy, assuming Java is our

60
00:04:07,500 --> 00:04:08,820
main resources, etc..

61
00:04:09,000 --> 00:04:15,720
So the beauty of MAVEN projects is that the build system is independent really of the IDE and almost

62
00:04:15,720 --> 00:04:18,030
all ides have support for MAVEN projects.

63
00:04:18,030 --> 00:04:22,620
You can't just import them into the ID and IDs, recognize what's going on.

64
00:04:23,610 --> 00:04:24,090
Now.

65
00:04:24,090 --> 00:04:33,390
Another important benefit which is the most important benefit or the strength of using MAVEN in an ID

66
00:04:33,420 --> 00:04:39,900
basically, or instead of using a built in Project Eclipse build, we use MAVEN build is dependency

67
00:04:39,900 --> 00:04:44,010
management, dependency management.

68
00:04:44,010 --> 00:04:45,510
What does it mean now?

69
00:04:45,510 --> 00:04:50,910
Obviously when you're developing a code, you don't want to write everything from scratch, right?

70
00:04:50,910 --> 00:04:56,040
So let's say I want I have two integers, 250 and 75.

71
00:04:56,070 --> 00:04:59,710
I want to find to find the greatest.

72
00:05:00,450 --> 00:05:01,860
Common divisor.

73
00:05:03,390 --> 00:05:04,570
What is the maximum?

74
00:05:04,590 --> 00:05:06,120
What is the greatest integer?

75
00:05:06,120 --> 00:05:09,620
The largest integer that these two numbers can be divided by?

76
00:05:09,630 --> 00:05:12,420
And there are algorithms for finding these.

77
00:05:12,750 --> 00:05:14,140
And you probably can.

78
00:05:14,160 --> 00:05:15,360
This is a very simple case.

79
00:05:15,360 --> 00:05:21,660
So you can probably get a guess that the answer GCD the greatest common divide is going to be 25 because

80
00:05:21,660 --> 00:05:28,370
25 times three is 75, 25 times ten is 250.

81
00:05:28,380 --> 00:05:28,980
Right.

82
00:05:28,980 --> 00:05:35,940
And so here I guess that but I want to have a I want to use I want to have a code or a library to write

83
00:05:35,940 --> 00:05:36,030
it.

84
00:05:36,030 --> 00:05:41,880
So obviously, I don't want to spend my time to write a code from scratch to implement algorithm because

85
00:05:41,880 --> 00:05:44,490
this obviously is a very fundamental concept.

86
00:05:44,490 --> 00:05:49,950
And somebody has to have somebody has already written a function for this.

87
00:05:50,020 --> 00:05:51,750
There is it's definite, right?

88
00:05:51,750 --> 00:05:58,170
So I just want to find a library to find a library to do this.

89
00:05:58,170 --> 00:06:07,050
And I happen to know that Google Guava has a int math class that has a function GCD.

90
00:06:07,080 --> 00:06:13,410
So this kind of comes down to you can either Google it to find a function in Java that calculates this

91
00:06:13,410 --> 00:06:14,790
or implements this algorithm.

92
00:06:14,790 --> 00:06:19,140
I happen to know that Google Guava already has a class that do this.

93
00:06:19,140 --> 00:06:24,960
So what I want to do, I want to add this Google duo Guava as a dependency to my MAVEN project.

94
00:06:25,050 --> 00:06:31,410
So let's open up a internet browser and search for Google Guava.

95
00:06:31,410 --> 00:06:40,080
Or maybe we can go just to Maven Central, which is the main online repository that Maven uses for searching

96
00:06:40,080 --> 00:06:41,040
for dependencies.

97
00:06:41,040 --> 00:06:41,310
Right.

98
00:06:41,310 --> 00:06:47,430
So it's a very huge dependency and let's say search for Google Guava.

99
00:06:48,170 --> 00:06:53,030
And so Google Guava is the Google core libraries for Java.

100
00:06:53,060 --> 00:06:57,750
Every basically every Java developer has already heard about Google Go.

101
00:06:57,860 --> 00:07:01,610
It's a very important library and we want to use the latest version.

102
00:07:01,610 --> 00:07:04,340
And another benefit of MAVEN is versioning.

103
00:07:04,340 --> 00:07:11,390
So sometimes an upgrade when a library goes from one version to another, some backwards compatibility

104
00:07:11,390 --> 00:07:12,140
is broken.

105
00:07:12,140 --> 00:07:16,060
So you can actually tell Maven which version of this library to use.

106
00:07:16,070 --> 00:07:19,220
I want to use the latest version and I want to use Maven.

107
00:07:19,220 --> 00:07:19,430
Right.

108
00:07:19,430 --> 00:07:26,810
So you you can if your build system is great IV and other things that you can select, I wanna build

109
00:07:26,810 --> 00:07:29,750
with Maven, so I want to choose this Maven.

110
00:07:30,590 --> 00:07:32,500
So how do we add dependencies?

111
00:07:32,510 --> 00:07:34,240
You open up the file.

112
00:07:34,250 --> 00:07:37,100
Remember Maven only understands poem and eclipse.

113
00:07:37,100 --> 00:07:39,910
IDE happens to also interpret the poem.

114
00:07:39,950 --> 00:07:43,070
Eclipse provides this nice graphical view.

115
00:07:43,100 --> 00:07:49,430
You can go to the purely text version of the poem, which is an XML file and what the way this works

116
00:07:49,430 --> 00:07:51,590
is you create a dependency tag.

117
00:07:51,590 --> 00:07:58,070
So I'm going to hit autocomplete, control a space and create a dependencies tag, right?

118
00:07:58,070 --> 00:08:05,900
And then I'm going to copy and paste this dependency code that we just basically copied from the MAVEN

119
00:08:05,900 --> 00:08:09,530
Center and let's say command F to do auto format.

120
00:08:11,730 --> 00:08:15,130
All right, so now our application has one dependency as.

121
00:08:15,150 --> 00:08:23,100
As soon as I hit save you see Maven goes and searches in your local maven repository dot MB to inside

122
00:08:23,100 --> 00:08:24,120
your home directory.

123
00:08:24,150 --> 00:08:29,270
If the jar file is guava 31.1 was not available.

124
00:08:29,280 --> 00:08:32,640
Maven goes to Maven Central and downloads this jar file.

125
00:08:33,540 --> 00:08:42,370
And after that eclipse, Eclipse understands that and then it adds it to your basically class path.

126
00:08:42,390 --> 00:08:48,060
Now what's interesting is that not only this grow was added, a lot of other jars were also added,

127
00:08:48,060 --> 00:08:49,560
these three and these three.

128
00:08:49,560 --> 00:08:52,770
That's because this guava also has dependencies.

129
00:08:52,770 --> 00:09:01,620
So this is the main strength of Maven or MAVEN projects is that if the dependency also has dependencies

130
00:09:01,620 --> 00:09:05,940
of its own, Maven understands that it's able to handle everything right.

131
00:09:05,940 --> 00:09:08,460
And again, this project in Eclipse.

132
00:09:08,460 --> 00:09:11,490
Eclipse understands that this project has a maven nature.

133
00:09:11,490 --> 00:09:19,110
So it understands that not only it has to create, it shows this nice maven dependencies view and it

134
00:09:19,110 --> 00:09:25,980
shows you Google go on is now on the class path but also all the dependencies of this are also on the

135
00:09:25,980 --> 00:09:31,530
class path because I mean, you cannot have this dependency and not have its own dependencies on the

136
00:09:31,530 --> 00:09:32,220
class path, right?

137
00:09:32,220 --> 00:09:34,020
Everything has to be on the class path.

138
00:09:34,980 --> 00:09:38,250
So now that this is inside the Google guava.

139
00:09:39,950 --> 00:09:46,850
Com Google comment and then there is a mass package and inside that there is this int math.

140
00:09:48,110 --> 00:09:53,140
And inside this inch math, there is a GCD, greater common divisor.

141
00:09:53,150 --> 00:10:00,920
So basically it says returns the greatest common divisor of A and B, so that's exactly the functionality

142
00:10:00,920 --> 00:10:03,470
that we want and it's a static method, so it's very easy to use.

143
00:10:03,980 --> 00:10:11,780
So all I have to say, I have to say var, let's say y equals int math.

144
00:10:11,780 --> 00:10:17,360
It's the name of the class from google comma common math, int math and it keeps automatically as the

145
00:10:17,360 --> 00:10:17,780
import.

146
00:10:17,780 --> 00:10:22,580
And then GCD 250 and 75 and six out

147
00:10:24,890 --> 00:10:33,740
GCD of 2250 and 70 is plus y.

148
00:10:34,910 --> 00:10:36,920
Let's make sure that this works.

149
00:10:36,920 --> 00:10:42,500
Let's run it as soon as I save this eclipse, compiles this and puts it in the target classes so I don't

150
00:10:42,500 --> 00:10:49,970
need to really run Maven build when this MAVEN project is inside eclipse id.

151
00:10:50,240 --> 00:10:55,580
So if I run this it tells me that the GCD of 250 and 70 is 25 as I expected.

152
00:10:56,720 --> 00:10:58,730
Now what I want to do.

153
00:10:58,730 --> 00:11:01,970
I want to what I want to do.

154
00:11:01,970 --> 00:11:10,010
I want to actually ask the user to input two numbers so I can either do this or use a scanner.

155
00:11:10,010 --> 00:11:19,910
So instead of doing this, I'm going to say that six out enter two integer numbers with a space and

156
00:11:19,910 --> 00:11:28,820
I'm going, I'm not going to add a print and then I'm going to create a scanner, a scanner, a new

157
00:11:28,880 --> 00:11:34,980
scanner, and I'm going to hook it up to the, the to the system dot in right.

158
00:11:35,000 --> 00:11:37,190
The input stream is system in.

159
00:11:38,090 --> 00:11:48,500
And then I'm going to say that a a is a or int a or number one is a scanner.

160
00:11:48,500 --> 00:11:57,020
That's next int and then int number two is as candidate next int.

161
00:11:57,680 --> 00:12:07,370
And then what we want to do, we want to say int y is int mass dot gcd of non one and number two.

162
00:12:07,940 --> 00:12:15,380
And then if we're going to print so percent d percent D percent dx.

163
00:12:15,400 --> 00:12:20,780
So I usually prefer instead of just breaking this string and using the plus operator, I'm going to

164
00:12:21,050 --> 00:12:22,400
use the formatted string.

165
00:12:22,400 --> 00:12:26,150
So now I'm one num two and why it's much easier.

166
00:12:26,150 --> 00:12:27,980
So let's test this in java.

167
00:12:30,020 --> 00:12:36,320
Enter to integers to 5075 and then the GCD of 250 and 75 is 25.

168
00:12:38,040 --> 00:12:44,880
172 and then the GCD of 172 is four.

169
00:12:45,090 --> 00:12:51,480
All right, so everything looks fine and we have to it says that this scanner is a resource.

170
00:12:51,480 --> 00:12:54,930
There is a resource leak, so we kind of need to close it.

171
00:12:56,460 --> 00:13:00,240
Usually, this is this doesn't is not required if you don't.

172
00:13:00,240 --> 00:13:06,600
So if the scanner is hooked up to the system in because the system in is never closed as long as your

173
00:13:06,600 --> 00:13:08,280
Java application is running, right.

174
00:13:08,280 --> 00:13:14,040
So if your scanner is hooked up to the system in the input, a standard input is stream to JVM.

175
00:13:14,040 --> 00:13:18,480
You don't really need to close it because this is going to be open unless there is a particular reason

176
00:13:18,480 --> 00:13:20,400
that you need to close the scanner.

177
00:13:21,710 --> 00:13:22,180
All right.

178
00:13:22,190 --> 00:13:29,420
The reason that eclipse marks as auto a resource leak is because the scanner implements the general

179
00:13:30,080 --> 00:13:31,460
interface of clothes.

180
00:13:31,910 --> 00:13:37,460
And that's why the clothes bill extends out clothes over.

181
00:13:37,490 --> 00:13:43,370
So any article possible is basically eclipse can flag it as resource leak.

182
00:13:43,400 --> 00:13:44,300
That's the only reason.

183
00:13:44,300 --> 00:13:44,810
Right?

184
00:13:44,960 --> 00:13:47,270
So right now, there is nothing especial about this.

185
00:13:47,270 --> 00:13:54,500
But now when it comes to actually compile this application, this job application to native executable

186
00:13:54,500 --> 00:13:57,310
binary, right, that's the power of Java and the VM.

187
00:13:57,320 --> 00:14:01,460
You can quickly develop an application which has huge amount of dependencies.

188
00:14:01,460 --> 00:14:03,320
We just added Google Guava.

189
00:14:03,410 --> 00:14:07,640
It also has huge number of other dependencies and MAVEN has no problem.

190
00:14:08,790 --> 00:14:12,510
And now I want to compile this class, which is a demo class.

191
00:14:12,510 --> 00:14:13,650
This is my job application.

192
00:14:13,650 --> 00:14:14,640
It has a main method.

193
00:14:14,640 --> 00:14:16,590
It's the entry point to my job application.

194
00:14:16,620 --> 00:14:18,750
I want to compile it to native executable binary.

195
00:14:18,750 --> 00:14:23,280
Right now this native directory is empty and we already set up an external tool.

196
00:14:23,310 --> 00:14:30,300
What I want you to appreciate right now with this last setup that we did is that we are asking Eclipse

197
00:14:30,300 --> 00:14:33,570
to provide the project class path for the native image.

198
00:14:33,570 --> 00:14:39,600
We're not explicitly adding it, providing the class path eclipse, we're just providing this placeholder

199
00:14:39,600 --> 00:14:42,990
which if which is an internal environment file for eclipse.

200
00:14:42,990 --> 00:14:45,510
Now note what happens when I look at the command.

201
00:14:45,510 --> 00:14:46,140
Wow.

202
00:14:47,680 --> 00:14:48,140
Hyphen friend.

203
00:14:49,240 --> 00:14:51,580
All the way to here.

204
00:14:51,940 --> 00:14:57,760
These are all the dependencies that now we have on our class path in order for us to successfully run

205
00:14:57,760 --> 00:14:59,060
our job application.

206
00:14:59,080 --> 00:15:06,100
And again, Eclipse is replacing that environment variable project class path with automatically with

207
00:15:06,100 --> 00:15:06,580
all these.

208
00:15:06,580 --> 00:15:09,920
So native image hyphen cpp eclipse provides world class.

209
00:15:09,940 --> 00:15:16,990
Now there is really no way for us to manually figure out what directories to add to the class path to

210
00:15:16,990 --> 00:15:17,980
run this native image.

211
00:15:17,980 --> 00:15:19,400
That's almost impossible.

212
00:15:19,420 --> 00:15:20,500
There's so many.

213
00:15:20,530 --> 00:15:28,690
If you add a jar from your from Maven and that jar already has lots of other dependencies, it's it's

214
00:15:28,690 --> 00:15:29,590
almost impossible.

215
00:15:29,590 --> 00:15:30,040
Right.

216
00:15:30,250 --> 00:15:35,860
But that's the beauty of this external tool in the Eclipse IDE because eclipse always tracks down what's

217
00:15:35,860 --> 00:15:36,370
going on.

218
00:15:36,400 --> 00:15:38,360
Eclipse is aware of the class path.

219
00:15:38,380 --> 00:15:47,740
That's why you can run this job application, which is a MAVEN application in your in your in your eclipse

220
00:15:47,740 --> 00:15:48,070
ID.

221
00:15:48,070 --> 00:15:48,250
Right?

222
00:15:48,280 --> 00:15:51,460
Eclipse understands what's going on, on the class path, etc..

223
00:15:51,460 --> 00:15:57,160
So all we have to do, we don't really need to change anything, even if we have a huge number of dependencies,

224
00:15:57,170 --> 00:16:00,400
doesn't matter as long as you provide this hyphen.

225
00:16:00,430 --> 00:16:08,110
CP as as, as long as you ask Eclipse to provide the class path for the native image, we are going

226
00:16:08,110 --> 00:16:09,090
to be golden.

227
00:16:09,100 --> 00:16:09,460
Right.

228
00:16:09,460 --> 00:16:12,220
So I want to really understand the power of this.

229
00:16:12,370 --> 00:16:20,410
So here we created a quickly use an external library, Google Hour, and then if we're using that external

230
00:16:20,410 --> 00:16:27,910
library and then we're calculating this GCD and now we're compiling this entire application to a native

231
00:16:27,910 --> 00:16:29,200
executable binary.

232
00:16:29,200 --> 00:16:35,140
So a native image is running eclipse provides all the dependencies, all the class path stuff.

233
00:16:35,260 --> 00:16:42,490
Right now, so far there is no problem in aligning methods and hopefully after after this the compilation

234
00:16:42,490 --> 00:16:46,330
finishes and we get a native executable binary.

235
00:16:51,030 --> 00:16:51,630
Done.

236
00:16:51,840 --> 00:16:53,700
Everything was successful.

237
00:16:54,300 --> 00:16:55,530
There was no error.

238
00:16:55,530 --> 00:16:57,570
So in the native image we have this.

239
00:16:57,570 --> 00:17:04,680
So let's open up a terminal here so we can use the internal terminal of eclipse.

240
00:17:07,510 --> 00:17:16,420
So the Java native image demo class enter two numbers two 5075 GCD of 250 and 75 is 25.

241
00:17:17,350 --> 00:17:24,260
Again, we use an external library and we use Maven because MAVEN is amazing for dependency management

242
00:17:24,280 --> 00:17:33,520
and then Eclipse ID is amazing for keeping or basically tracking the project class path because with

243
00:17:33,520 --> 00:17:39,850
Maven, if you add a jar for suddenly there might be lots of other jars that added to the class path

244
00:17:39,850 --> 00:17:43,630
because of the dependencies that this jar file this discoverer has.

245
00:17:44,350 --> 00:17:48,250
And it's really impossible for us to manually track those dependencies.

246
00:17:48,250 --> 00:17:56,050
But then once the Eclipse ID tracks those, it enables us to write a job application very quickly.

247
00:17:56,050 --> 00:18:03,280
Like in 2 minutes I wrote this and then now a native image compiler to the native executable binary.

248
00:18:03,280 --> 00:18:12,250
So I can quickly say demo class, run it, enter two integer numbers 100 101.

249
00:18:12,250 --> 00:18:13,900
Obviously the GCD is one.

250
00:18:13,900 --> 00:18:15,400
We can rerun it again.

251
00:18:15,400 --> 00:18:22,210
Enter two integer numbers 21 and 63.

252
00:18:22,210 --> 00:18:29,710
Obviously it's 21, etc. So I hope you really understand this that Java and Maven has this huge library

253
00:18:30,520 --> 00:18:36,820
maven central and then you can use Maven inside Eclipse ID to manage your dependencies.

254
00:18:36,850 --> 00:18:46,090
Eclipse ID always tracks your class path and once you set the external tool to to use the class path

255
00:18:46,090 --> 00:18:49,570
from eclipse ID, you are golden.

256
00:18:49,570 --> 00:18:55,210
You you can quickly write a very complicated application, java application with lots of dependencies

257
00:18:55,210 --> 00:18:58,210
and then you compile it to a native executable binary.

258
00:18:59,170 --> 00:19:00,670
I hope you really enjoyed this lecture.

259
00:19:00,700 --> 00:19:03,490
Please stay tuned and I'll see the next one.
