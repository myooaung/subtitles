1
00:00:01,400 --> 00:00:04,550
Hello and welcome to another tutorial.

2
00:00:04,550 --> 00:00:11,810
We are going to continue our discussion on compiling Java applications using a VM native image.

3
00:00:11,810 --> 00:00:16,940
And so far we've looked at the fundamentals of Java applications, how we launch them.

4
00:00:17,540 --> 00:00:20,180
Using the Java runtime, which is a Java command.

5
00:00:20,180 --> 00:00:25,490
A prerequisite is that you have to compile your source files into the class files because those are

6
00:00:25,490 --> 00:00:29,060
the binary files that the Java or the Java tool understands.

7
00:00:29,060 --> 00:00:36,140
And then we said we said that eventually the goal is with the native image to transition from launching

8
00:00:36,140 --> 00:00:42,350
our Java application on top of a JVM, which is a virtual machine to directly compile it to the native

9
00:00:42,350 --> 00:00:45,140
executable that runs by the operating system.

10
00:00:45,140 --> 00:00:52,790
And then we discuss a very important topic which was command line arguments and we said that there is

11
00:00:52,790 --> 00:00:59,870
a subtle difference between command and command line arguments for C++ binary applications when you

12
00:00:59,870 --> 00:01:03,530
write your application in C++ and the Java.

13
00:01:03,530 --> 00:01:09,650
And we said that the similarities are both require a main method in C++ or C by convention.

14
00:01:09,650 --> 00:01:12,080
The return type of A main is INT.

15
00:01:12,080 --> 00:01:17,330
But in C++ or in modern C++, you are not really required to return zero.

16
00:01:17,540 --> 00:01:25,070
But then in Java it's void because it doesn't make sense to basically return anything from Main.

17
00:01:25,070 --> 00:01:30,860
And then we said that the main difference is the command line arguments that you pass to a C++ application

18
00:01:30,860 --> 00:01:38,510
or a binary or executable binary that has been compiled that had a C++ source and compile to Native

19
00:01:38,780 --> 00:01:39,260
and Java.

20
00:01:39,260 --> 00:01:45,290
And we said that the main difference here is that Java, when you launch your application with the JVM

21
00:01:45,380 --> 00:01:51,440
or the Java Command Line tool, right, there are three types of arguments that you can pass.

22
00:01:51,440 --> 00:01:55,220
One is your application arguments is this string array.

23
00:01:55,430 --> 00:01:57,770
The other one is system applications.

24
00:01:57,770 --> 00:02:01,160
Those are the parameters that you pass to the JVM.

25
00:02:01,160 --> 00:02:04,340
We're using hyphen de key equals value, right?

26
00:02:04,580 --> 00:02:10,250
And then the third one is just the global environment variables that are available for your terminal.

27
00:02:10,700 --> 00:02:14,360
Basically, you launch your Java application inside a terminal, right?

28
00:02:14,390 --> 00:02:22,490
Terminal is the application you use is what's what you use to communicate with the operating system.

29
00:02:23,240 --> 00:02:24,650
Now let's head back here.

30
00:02:24,650 --> 00:02:28,010
And previously we saw that we developed this application.

31
00:02:28,010 --> 00:02:36,050
It has a hello it's a hello world class has two dependencies and inside our bash RC basically we defined

32
00:02:36,050 --> 00:02:39,560
a class path and added all these to the class path.

33
00:02:39,590 --> 00:02:40,010
Test.

34
00:02:40,010 --> 00:02:40,550
Test two.

35
00:02:40,550 --> 00:02:41,210
Test three.

36
00:02:41,210 --> 00:02:46,100
So that we don't need to specify the class path each time, each time that we want to recompile the

37
00:02:46,100 --> 00:02:46,970
application.

38
00:02:46,970 --> 00:02:51,980
And we said that when you launch your application in the terminal, if this global environment variable

39
00:02:51,980 --> 00:02:58,190
called class path and all caps, remember these global environment variables are all caps.

40
00:02:58,220 --> 00:03:05,390
If these is defined for your terminal, the Java compiler and the Gvm or the Java command line tool,

41
00:03:05,420 --> 00:03:11,990
both can pick it up and also add these to the list of directories that they can search into.

42
00:03:12,350 --> 00:03:14,030
And then we said that.

43
00:03:16,230 --> 00:03:16,860
One.

44
00:03:16,860 --> 00:03:23,850
One point that I didn't directly mention is that when everything is available on your path or class

45
00:03:23,850 --> 00:03:30,180
path, then if you need to compile this helloworld java, which has a dependency on car and machine,

46
00:03:30,210 --> 00:03:36,930
then if you just run the Java Sea Command on this helloworld Java, the Java compiler tries to basically

47
00:03:36,930 --> 00:03:39,600
compile all the dependencies first.

48
00:03:39,600 --> 00:03:47,390
So what I mean is that if I delete this car, that class and this machine class and then this helloworld

49
00:03:47,400 --> 00:03:48,390
class, right?

50
00:03:48,390 --> 00:03:54,260
Right now I only have the source files and let's make sure that we have access to this class path.

51
00:03:54,270 --> 00:03:55,260
Yes, it is.

52
00:03:55,260 --> 00:03:59,580
And now we are inside this test directory, let's say Java C and then.

53
00:04:01,560 --> 00:04:10,830
Hello World Java and it's able to compile this because it also is aware of the class path environment

54
00:04:10,830 --> 00:04:17,220
variable and not only it compiles the Helloworld Java, but before that it also searches for the dependencies

55
00:04:17,220 --> 00:04:20,100
which are the car type and the machine type.

56
00:04:20,100 --> 00:04:22,830
And those are also available on the class path, right?

57
00:04:22,830 --> 00:04:28,740
Those source files are available so that the Java compiler automatically compiles them first and then

58
00:04:28,920 --> 00:04:31,680
compile the the main Java class.

59
00:04:31,680 --> 00:04:38,580
So basically what I'm trying to say is that it's not actually you don't need to go one by one and compile

60
00:04:38,580 --> 00:04:42,870
your Java files and then eventually get to the class that has the main method.

61
00:04:42,900 --> 00:04:48,750
You just make all those Java files available on the class path and then once you run the Java compiler

62
00:04:48,750 --> 00:04:55,530
Java Command on your on your main class, the class that has the main method, it automatically picks

63
00:04:55,530 --> 00:05:02,160
up or searches for the types, the dependencies of your particular class and then compiles all the dependencies

64
00:05:02,160 --> 00:05:04,860
first and then comes back and compiles the main class.

65
00:05:04,860 --> 00:05:05,910
So it's relatively easy.

66
00:05:05,910 --> 00:05:07,440
It's not that complicated, right?

67
00:05:07,470 --> 00:05:12,510
Obviously, you can go ahead and individually compile the car and machine and that's what we do.

68
00:05:12,510 --> 00:05:14,610
We did previously, but it's not necessary.

69
00:05:14,610 --> 00:05:22,350
The Java compiler has become very smart in terms of automatically picking up on all your dependencies

70
00:05:22,350 --> 00:05:28,490
and then and then compiling all the dependencies first.

71
00:05:28,500 --> 00:05:34,560
Now, now that we have this, we saw that we have three types of arguments.

72
00:05:34,560 --> 00:05:42,090
So a string args and then a system properties which is hyphen D key call value.

73
00:05:42,090 --> 00:05:50,310
And then you pass these application arguments after typing, writing the name of the main class.

74
00:05:50,640 --> 00:05:55,380
These hyphen dx key call value are passed to the Java application or the JVM.

75
00:05:55,380 --> 00:06:01,440
So these are the you type these before typing the name of the main class.

76
00:06:01,440 --> 00:06:03,960
And then there are global environment variables.

77
00:06:03,960 --> 00:06:09,480
These are the global environment variables that are available to the terminal at the time that you run

78
00:06:09,480 --> 00:06:14,940
your basically a Java application.

79
00:06:14,940 --> 00:06:22,830
Now if I say Java and then Hello World, it's going to work fine because I don't need to specify the

80
00:06:22,830 --> 00:06:29,670
class path because I've already specified the directories that my application needs inside this class

81
00:06:29,670 --> 00:06:32,550
path environment variable and Java is aware of that.

82
00:06:32,550 --> 00:06:35,190
So it picks up any and note that.

83
00:06:36,240 --> 00:06:45,510
So let's do this one more time and we're going to pass ARG one, ARG two and then as you can see, basically

84
00:06:45,510 --> 00:06:51,300
it says that our count is two anything that you type after the name of the main class and there is a

85
00:06:51,300 --> 00:06:58,740
space there, then it counts as an argument to your job application part of this string array.

86
00:07:00,160 --> 00:07:02,080
And basically.

87
00:07:02,860 --> 00:07:06,730
But then anything that comes.

88
00:07:07,060 --> 00:07:10,450
But then you can also pass a system environment.

89
00:07:10,730 --> 00:07:17,400
So know that here in the source code we're trying to find if a system property called name is said.

90
00:07:17,410 --> 00:07:19,630
And because right now we didn't set it.

91
00:07:19,900 --> 00:07:21,600
Therefore it comes as null.

92
00:07:21,610 --> 00:07:27,940
But then we also check for an environment where we're called later home and if we find it, then we

93
00:07:27,940 --> 00:07:34,750
try to look at the version of this PDF later, which resides inside the later home directory.

94
00:07:34,750 --> 00:07:35,200
Right?

95
00:07:35,200 --> 00:07:38,890
And we get the execute that command in terminal.

96
00:07:38,890 --> 00:07:43,890
We hook it up back to basically the JV team and in JVM can print it back to Gemini.

97
00:07:44,260 --> 00:07:45,940
So let's look at this.

98
00:07:46,120 --> 00:07:54,160
So Java hyphen D name equals a bob and then the name of the main class.

99
00:07:54,160 --> 00:07:54,850
Hello world.

100
00:07:54,850 --> 00:07:56,890
And then arg one, arg two.

101
00:07:57,340 --> 00:08:00,380
And as you can see now, the name is System Property.

102
00:08:00,380 --> 00:08:01,390
Is that all right?

103
00:08:01,630 --> 00:08:03,940
Now, previously I mentioned that what happens?

104
00:08:03,940 --> 00:08:09,790
The question is what happens to these system properties when you compile your Java application to native

105
00:08:09,820 --> 00:08:10,690
binaries, right?

106
00:08:10,840 --> 00:08:15,760
Because when you compile your application, then you don't use the Java application anymore, you just

107
00:08:15,760 --> 00:08:17,740
directly launch it.

108
00:08:17,740 --> 00:08:18,940
And I've already done this.

109
00:08:18,940 --> 00:08:25,090
I've already compiled the this application to a binary native executable binary called Hello Helloworld.

110
00:08:25,120 --> 00:08:27,850
Obviously in the future lectures we will see how to do it.

111
00:08:28,330 --> 00:08:30,580
But then right now I'm in this test directory.

112
00:08:30,580 --> 00:08:37,450
So if I say hello world arg one or two and as you see it still works.

113
00:08:37,450 --> 00:08:41,830
It tells me that these command line arguments, we have two command line arguments.

114
00:08:41,830 --> 00:08:44,560
The first one is ARG one, the second one is ARG two.

115
00:08:44,560 --> 00:08:47,440
But this name comes out as null, right?

116
00:08:47,740 --> 00:08:52,070
And then it is still searches for this global environment variable later home.

117
00:08:52,090 --> 00:08:55,690
It finds it and then it looks at the version of the PDF later.

118
00:08:55,810 --> 00:08:56,860
Everything works fine.

119
00:08:56,860 --> 00:09:01,210
So our Java application now it's a native executable binary.

120
00:09:01,210 --> 00:09:03,310
We can directly launch this application.

121
00:09:03,340 --> 00:09:09,610
The question is what happens to those system argument hyphen D key value.

122
00:09:09,610 --> 00:09:17,530
Now we can test it if I say hello world and then pass a command line argument that starts with hyphen

123
00:09:17,530 --> 00:09:19,870
de name equals bar.

124
00:09:20,560 --> 00:09:26,320
And as you can see now, this is very interesting that the way this native executable binary works,

125
00:09:26,320 --> 00:09:31,510
that it actually differentiates between the command line arguments that start with hyphen DX and the

126
00:09:31,510 --> 00:09:34,180
other ones, then don't start with hyphen de.

127
00:09:34,210 --> 00:09:39,490
As you can see, it is still tells me that I have two command line arguments or basically two arguments

128
00:09:39,490 --> 00:09:43,060
inside this string array, which are the arguments to my Java application.

129
00:09:44,080 --> 00:09:49,890
But the interesting name was Bob, which means now this, this is passed as the system property.

130
00:09:49,900 --> 00:09:55,510
So even if you compile your Java application to native executable binary, it is still recognized as

131
00:09:55,510 --> 00:10:02,200
system properties and you can specify them directly as command line arguments when you launch this executable

132
00:10:02,200 --> 00:10:07,660
binary, but then it automatically differentiates between these system properties that start with hyphen

133
00:10:07,660 --> 00:10:10,630
DX and the others that don't start with hyphen dx.

134
00:10:10,960 --> 00:10:11,470
Right?

135
00:10:11,470 --> 00:10:13,780
So it automatically understands this.

136
00:10:13,780 --> 00:10:22,630
So nothing gets messed up in your process of compiling your job application into native executable binary.

137
00:10:22,630 --> 00:10:29,350
You can still see it set this system properties and they will behave as system properties that you pass

138
00:10:29,350 --> 00:10:30,280
to your JVM.

139
00:10:30,280 --> 00:10:31,060
Right now.

140
00:10:31,060 --> 00:10:35,440
This is obviously different from a C++ application in C++.

141
00:10:35,440 --> 00:10:36,940
They don't understand this hyphen.

142
00:10:36,940 --> 00:10:40,450
DX So it just means you have three command line arguments.

143
00:10:40,450 --> 00:10:48,790
But here, because your native executable binary inside of it, it has a compact version of Java.

144
00:10:48,880 --> 00:10:55,810
So it can differentiate between hyphen DX parameters and then regular parameters that you pass your

145
00:10:55,810 --> 00:10:56,410
application.

146
00:10:56,410 --> 00:10:56,920
All right.

147
00:10:58,060 --> 00:11:04,180
Now finally, we want to now start with the default tool.

148
00:11:04,480 --> 00:11:11,200
And obviously, in order to compile a Java application to native binary, we have to have a compiler

149
00:11:11,200 --> 00:11:15,760
and that's a platform compiler or which is called a default toolchain.

150
00:11:15,790 --> 00:11:21,790
Every operating system comes with its own compiler vendors usually.

151
00:11:21,910 --> 00:11:27,640
So these compilers are either proprietary, which means that people who develop the operating system

152
00:11:27,640 --> 00:11:31,600
provide these compilers, or this could be open source.

153
00:11:32,080 --> 00:11:38,440
For example, in case of an open source operating system like Linux, there are open source compilers

154
00:11:38,440 --> 00:11:41,860
that can compile applications for the Linux operating system.

155
00:11:41,980 --> 00:11:44,410
So let's start with Mac OS default toolchain.

156
00:11:45,640 --> 00:11:51,940
So Platform Toolchain are compilers that compile source code to binaries for CPU and usually they're

157
00:11:51,940 --> 00:11:54,430
developed for C or C++ application.

158
00:11:54,430 --> 00:12:02,950
Obviously, older programming languages like Pascal or those ones also have their own compilers.

159
00:12:02,950 --> 00:12:08,500
In general, there is no restriction on what kind of programming language you use as long as there is

160
00:12:08,500 --> 00:12:14,140
a compiler for that programming language that can compile to native binaries for the CPU.

161
00:12:14,140 --> 00:12:19,420
So not only the operating system is important, but the architecture of the CPU is important because

162
00:12:19,420 --> 00:12:26,590
different CPUs use different basically instruction sets, right?

163
00:12:26,890 --> 00:12:34,390
For example, arm CPUs have a different architecture than x86 or x 64 Intel or AMD CPUs.

164
00:12:34,420 --> 00:12:39,340
Therefore, the kind of instruction sets that they use is also different.

165
00:12:39,340 --> 00:12:48,850
For example, you might have heard that x 64 CPUs like AMD and Intel, they use a six card architecture,

166
00:12:48,850 --> 00:12:57,850
which is a complex instruction set, whereas arm CPUs use a simplified version of the instruction sets

167
00:12:57,850 --> 00:13:04,420
called the risk or reduced instruction set, which means arm instruction sets are much easier, but

168
00:13:04,870 --> 00:13:10,780
complex instruction sets in the Intel or AMD CPUs means we want instructions.

169
00:13:10,870 --> 00:13:16,780
You can execute more complicated tasks, but it requires more complicated circuitry.

170
00:13:16,780 --> 00:13:18,280
So more power consumption.

171
00:13:18,280 --> 00:13:23,890
That's why arm CPUs have basically much lower power consumption, for example.

172
00:13:23,890 --> 00:13:24,340
Right?

173
00:13:25,270 --> 00:13:29,260
So right now we're just not we don't focus on the hardware for now.

174
00:13:29,260 --> 00:13:34,900
Let's just assume you typically have a CPU, which is X 64 architecture.

175
00:13:34,900 --> 00:13:40,630
If you have any other CPU like ARM, then you have to find a compiler that allows you to compile your

176
00:13:40,630 --> 00:13:42,130
source code to native binary.

177
00:13:42,130 --> 00:13:48,070
And every platform, every operating system has to provide some sort of default tool change so that

178
00:13:48,070 --> 00:13:52,660
people can develop applications for that platform, for that operating system.

179
00:13:52,810 --> 00:13:57,730
And the reason that different operating systems have different compilers because the kernel that they

180
00:13:57,730 --> 00:14:06,460
use are different kernels, are basically a very a group of files.

181
00:14:07,510 --> 00:14:14,590
So let's say operating system, they all also developed with C or C++ and they provide an API for others

182
00:14:14,980 --> 00:14:20,980
some functions, right, for the developers so that the developers can use those functions to call some

183
00:14:21,730 --> 00:14:26,020
basically to perform some hardware operations, reading from the disk, for example.

184
00:14:26,020 --> 00:14:33,420
So for example, in C++, if you just use a file input, a stream or FS stream or output file stream,

185
00:14:33,430 --> 00:14:39,580
something like that, those have calls to the kernel files right in Windows or MAC OS.

186
00:14:39,580 --> 00:14:41,170
The kernel API is different.

187
00:14:41,170 --> 00:14:42,970
Therefore you cannot when you come.

188
00:14:43,030 --> 00:14:46,470
While your application on different operating systems, the binaries are different.

189
00:14:46,480 --> 00:14:48,730
That's why the binaries are not compatible.

190
00:14:49,060 --> 00:14:52,920
So Mac OS, you can just go ahead into App Store, install Xcode.

191
00:14:52,930 --> 00:14:54,730
It's a very big application.

192
00:14:54,730 --> 00:14:57,130
I think it's about 12 gigabytes or so.

193
00:14:57,130 --> 00:15:03,520
But in fact for just trying to compile applications, you don't need to install the entire Xcode because

194
00:15:03,520 --> 00:15:10,240
part, part of the code is just gooey that comes with it and it provides a lot of tools for developing

195
00:15:10,240 --> 00:15:16,570
applications for different hardware like iPhone, iPad, etc. But we're just interested in getting the

196
00:15:16,570 --> 00:15:20,020
compiler that allows us to compile for Mac OS.

197
00:15:20,020 --> 00:15:20,500
Right?

198
00:15:21,280 --> 00:15:27,070
So you can just use the toolchain that comes with the Xcode and it's called command line tools, right?

199
00:15:27,070 --> 00:15:33,730
So either go ahead and install the Xcode app from App Store or just open up a terminal and type Xcode

200
00:15:33,730 --> 00:15:35,940
hyphen select hyphen hyphen install.

201
00:15:35,950 --> 00:15:40,840
So if we go, let's go back to the PowerPoint, let's open up a new terminal.

202
00:15:41,470 --> 00:15:49,270
And if we just say Xcode, select, hyphen, hyphen, install, it gives me an error saying that the

203
00:15:49,270 --> 00:15:53,890
command line tools are already installed so there is no update for it.

204
00:15:53,890 --> 00:15:57,370
If you want to update something, go to the software update to install updates.

205
00:15:57,370 --> 00:16:05,530
But right now I've obviously I've already installed the command line tools and therefore there is basically

206
00:16:07,120 --> 00:16:09,970
no reason to install it the first time.

207
00:16:09,970 --> 00:16:15,550
If you have not installed it, you can either use this command or just open up a terminal in macOS and

208
00:16:15,550 --> 00:16:17,950
type, for example, C++.

209
00:16:18,280 --> 00:16:24,580
If you haven't install it again, the terminal recognizes that you're trying to use the command line

210
00:16:24,580 --> 00:16:26,980
tools, a compiler, the platform compiler.

211
00:16:26,980 --> 00:16:32,110
So it opens up a prompt and asks you whether you want to install the command line tools and you just

212
00:16:32,110 --> 00:16:34,000
say, yes, it downloads some stuff.

213
00:16:34,300 --> 00:16:34,660
All right.

214
00:16:34,660 --> 00:16:40,720
So by default, this command line tools comes with Apple Clang compiler and then when you install it,

215
00:16:40,720 --> 00:16:42,550
it actually creates aliases.

216
00:16:43,390 --> 00:16:50,110
So we know some people prefer a C++ command on the terminal to compile their applications.

217
00:16:50,710 --> 00:16:55,670
Some people prefer C++ to compile their C++ application.

218
00:16:55,690 --> 00:17:08,410
Some people prefer GC to type GC to basically compile their C applications or clang to basically compile

219
00:17:08,410 --> 00:17:09,520
their C applications.

220
00:17:09,520 --> 00:17:15,160
And you see all of these commands when you install it, all of these commands become a symbolic reference

221
00:17:15,160 --> 00:17:24,190
to the same thing, to the same X code, ab contents, developer, user, and then basically the same

222
00:17:24,190 --> 00:17:24,430
thing.

223
00:17:24,430 --> 00:17:27,250
So these are not different things.

224
00:17:27,250 --> 00:17:29,290
You're just using the apple clang.

225
00:17:29,890 --> 00:17:33,040
These are just aliases depending on what you want to do, right?

226
00:17:33,280 --> 00:17:41,680
So and G plus, plus, as you can see, it goes to library developer command line tools SDK, Mac OS

227
00:17:41,680 --> 00:17:43,330
user includes C++.

228
00:17:43,420 --> 00:17:49,660
So this is the directory that has all the header files for the C++ compiler that comes with Apple Clang.

229
00:17:49,660 --> 00:17:56,590
And this is a proprietary, so it's not open source and then it's in the being directory of the Xcode,

230
00:17:56,590 --> 00:17:56,840
right?

231
00:17:56,860 --> 00:18:03,100
Xcode app contents, developer tool chains and then XY toolchain user bean.

232
00:18:03,250 --> 00:18:10,480
So if you run C++, it just points to the same directory being directory and same header files.

233
00:18:10,480 --> 00:18:10,900
Right.

234
00:18:10,900 --> 00:18:11,860
So the same thing.

235
00:18:12,010 --> 00:18:13,660
JCC and then.

236
00:18:15,830 --> 00:18:16,880
Same thing.

237
00:18:17,180 --> 00:18:21,520
And then Klang also same thing points the same day.

238
00:18:21,530 --> 00:18:22,790
So all of these are the same.

239
00:18:22,790 --> 00:18:28,010
And these aliases get generated when you are when you install your application.

240
00:18:28,010 --> 00:18:32,240
And if you want to check that your application is successfully installed, right?

241
00:18:32,270 --> 00:18:34,550
Command line tools are installing applications.

242
00:18:34,550 --> 00:18:41,030
Xcode App Contents Developer And there is the inside the developer there is a tool change and then Xcode

243
00:18:41,030 --> 00:18:42,800
default dot xy toolchain.

244
00:18:42,800 --> 00:18:48,890
This is a directory you can open it right click view the package contents and then there is a directory

245
00:18:48,890 --> 00:18:50,900
there that you can check.

246
00:18:50,900 --> 00:18:55,910
So if you install it and you want to double check, you just type for example, G plus plus hyphen,

247
00:18:55,910 --> 00:18:57,020
hyphen virgin.

248
00:18:57,020 --> 00:19:03,230
And if it shows you that G plus plus is available, the directory is being directory of the code.

249
00:19:03,230 --> 00:19:04,700
Everything is set up correctly.

250
00:19:05,750 --> 00:19:14,060
And previously we also actually we wrote a C++ application which prints something to the command line

251
00:19:14,060 --> 00:19:19,790
and also picks up on the basically on the command line arguments.

252
00:19:19,790 --> 00:19:23,090
We also had a class a user defined type called car.

253
00:19:23,090 --> 00:19:27,800
We overloaded the output stream operator so that we can push it directly to the console.

254
00:19:27,860 --> 00:19:33,590
And this was equivalent to basically overwriting the two string method in Java, right?

255
00:19:33,590 --> 00:19:40,940
We said that in C++ classes don't implicitly inherit from a master class like object or something.

256
00:19:40,940 --> 00:19:46,880
So they by default they don't have any insertion operator or to a string operator.

257
00:19:46,880 --> 00:19:49,790
So you have to overload them as global functions.

258
00:19:50,750 --> 00:19:57,140
And then we saw that basically let's go back here, let's go one level up.

259
00:19:58,430 --> 00:20:01,640
So one level up and then go into the example.

260
00:20:01,670 --> 00:20:09,200
And then we saw that if we say G plus plus example, dot CP and then we want to name the output file

261
00:20:09,200 --> 00:20:09,970
something else.

262
00:20:09,970 --> 00:20:12,080
So hyphen oh and then my app.

263
00:20:12,080 --> 00:20:18,860
And if this doesn't give us any error, it means the compiler is compiling fine all the included header

264
00:20:18,860 --> 00:20:22,490
files like our iOS HTML is available to us and then we are able to.

265
00:20:22,820 --> 00:20:27,920
And then my app and then we saw that you can pass command line arguments.

266
00:20:28,130 --> 00:20:30,740
Everything works fine for a C++ application.

267
00:20:30,740 --> 00:20:37,190
It doesn't matter if your command line argument starts with hyphen DX, it just treats it as a regular

268
00:20:37,190 --> 00:20:37,730
argument.

269
00:20:37,730 --> 00:20:38,210
Right?

270
00:20:38,330 --> 00:20:44,150
Whereas we saw that for the Java application, this will get treated differently because there is an

271
00:20:44,150 --> 00:20:51,290
underlying JVM that also accepts the system properties instead of command line properties.

272
00:20:52,460 --> 00:20:52,820
All right.

273
00:20:52,820 --> 00:20:56,570
So this was the introduction to the macros default toolchain.

274
00:20:56,570 --> 00:21:04,640
In the next lecture, I will show you the basically the Linux and Windows default tool change.

275
00:21:04,790 --> 00:21:09,080
I'll show you how to install them, especially Windows, Mac, OS and Linux are much easier to deal

276
00:21:09,080 --> 00:21:15,860
with in terms of developing applications because they either by default come with their compilers or

277
00:21:15,860 --> 00:21:17,900
it's very easy to install the Mac OS.

278
00:21:17,900 --> 00:21:18,920
It's very easy.

279
00:21:19,700 --> 00:21:27,230
Linux usually comes by default with the compiler, especially if you install a popular distribution

280
00:21:27,230 --> 00:21:30,350
like Ubuntu, which is also my favorite.

281
00:21:30,350 --> 00:21:34,220
It definitely comes with the GCC, which is default toolchain for Linux.

282
00:21:35,060 --> 00:21:41,240
You can also for example, install clang on Linux because it's open source, but you cannot install

283
00:21:41,240 --> 00:21:45,740
for example, Apple clang for Linux because Apple clang, first of all, it's not compatible.

284
00:21:45,860 --> 00:21:47,570
Second of all, it's not open source.

285
00:21:47,570 --> 00:21:48,980
So I hope you enjoyed this lecture.

286
00:21:48,980 --> 00:21:51,320
Please stay tuned and I'll see you in the next one.
