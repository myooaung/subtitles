WEBVTT
1
00:00:01.100 --> 00:00:03.700
Hello and welcome to another tutorial.

2
00:00:03.710 --> 00:00:09.110
I'm going to continue our discussion on compiling Java applications to Native Executable Binary.

3
00:00:09.110 --> 00:00:14.840
So far we've been using terminal and the problem with terminal and calling the native image tool is

4
00:00:14.840 --> 00:00:22.010
that you have to manually feed that native image the arguments that it needs, for example, the class

5
00:00:22.010 --> 00:00:27.410
path of your Java application so that it knows all the dependencies, all the class files that have

6
00:00:27.410 --> 00:00:29.780
to be compiled to a native executable binary.

7
00:00:30.730 --> 00:00:31.880
And that could be tedious.

8
00:00:31.900 --> 00:00:38.860
So what we want to do, we want to use an ID like Eclipse ID so that the IDs, the job IDs, the way

9
00:00:38.860 --> 00:00:45.970
they do it is they organize your Java source files and then they compile the files in a manner that

10
00:00:45.970 --> 00:00:47.290
is known to the ID.

11
00:00:47.290 --> 00:00:49.150
It knows where all your class files is.

12
00:00:49.150 --> 00:00:52.360
So internally, IDs know your class path, right?

13
00:00:52.360 --> 00:00:59.140
The dependencies of your Java project and now IDs such as Eclipse ID have a powerful tool called external

14
00:00:59.140 --> 00:01:05.710
tool, which means it allows you to configure using external applications like the native image tool.

15
00:01:05.740 --> 00:01:06.220
Right.

16
00:01:06.490 --> 00:01:12.820
And then because we are in the ID environment, we are in the Eclipse ID, we can take advantage of

17
00:01:12.820 --> 00:01:19.510
the fact that Eclipse knows the class path, it knows which directories are have the class files that

18
00:01:19.510 --> 00:01:21.580
are used for your application.

19
00:01:21.580 --> 00:01:24.880
It also knows all the dependencies of your class file.

20
00:01:24.910 --> 00:01:27.610
Remember that the IDs have their own java compiler.

21
00:01:27.610 --> 00:01:31.090
Usually they use the Java runtime that comes with the JDK.

22
00:01:31.090 --> 00:01:37.060
Now these days, even Eclipse ID comes with its own integrated Java runtime, so it doesn't have to.

23
00:01:37.090 --> 00:01:40.990
You don't need to install a JDK to run your job application.

24
00:01:41.020 --> 00:01:47.020
Eclipse has always had its own Java compiler, so whenever you install it it comes with the Java compiler.

25
00:01:47.020 --> 00:01:50.050
But it used to not have any Java runtime.

26
00:01:50.050 --> 00:01:54.160
It has to rely on the Java runtime that is configured on your operating system.

27
00:01:54.940 --> 00:02:00.100
But these days Eclipse IDE even comes with its own Java runtime, so when you download it, it's ready

28
00:02:00.100 --> 00:02:00.400
to go.

29
00:02:00.400 --> 00:02:02.650
You don't need to install any JDK or anything.

30
00:02:02.650 --> 00:02:07.630
Obviously I'm a Java enthusiast and then I've installed lots of JDK.

31
00:02:07.630 --> 00:02:12.790
Jeffreys and Eclipse allows you to configure the Java runtime inside the ID so that you tell it.

32
00:02:12.790 --> 00:02:17.110
Hey, use JDK 18 for this Java project or JDK 17 or whatever.

33
00:02:17.110 --> 00:02:23.440
You don't have to use only the Java runtime that comes with the Eclipse ID in the recent versions.

34
00:02:23.830 --> 00:02:26.830
But here I'm just going to focus on the external tool.

35
00:02:26.830 --> 00:02:30.970
And again, external tool allows the user to run external applications.

36
00:02:31.810 --> 00:02:38.950
For example, native image tool, write native image, let's say, for example, native image.

37
00:02:38.950 --> 00:02:40.360
And that's our goal here.

38
00:02:42.160 --> 00:02:48.160
So in the tool bar of the eclipse ID, when you are in the Java perspective, which means you have configured

39
00:02:48.160 --> 00:02:54.220
Eclipse ID to develop Java applications, now we know that Eclipse has the concept of perspective and

40
00:02:54.370 --> 00:02:58.510
you can install or go into a C++ perspective.

41
00:02:58.510 --> 00:03:02.680
So it allows you to develop C++ applications or Python perspective.

42
00:03:02.680 --> 00:03:05.200
So it allows you to develop Python applications.

43
00:03:05.200 --> 00:03:11.410
But when you select the Java runtime or Java perspective, these buttons at the toolbar are configured

44
00:03:11.410 --> 00:03:14.470
to run, for example, Java application.

45
00:03:14.470 --> 00:03:20.170
So this green button, the play button is whenever you run a job application eclipse, it creates a

46
00:03:20.170 --> 00:03:26.500
run configuration which passes the flags to your JVM or even to your job application.

47
00:03:26.500 --> 00:03:33.340
Those string array asks for your job application, and then there is a button that has a red suitcase

48
00:03:33.340 --> 00:03:35.440
here, and it's called the external tool.

49
00:03:35.440 --> 00:03:41.110
And what you want to do, you want to click on this arrow that next to it, it opens this menu and then

50
00:03:41.110 --> 00:03:43.390
you go to external tool configurations.

51
00:03:43.390 --> 00:03:49.630
Right now, if you have already created a few external tools and have used them on inside the eclipse

52
00:03:49.630 --> 00:03:55.090
side, it shows you the most recent external tools that you have created and run.

53
00:03:55.090 --> 00:04:01.840
I mean, here I have native image with the LLVM 17 and I also duplicated it and perform some experiments.

54
00:04:01.840 --> 00:04:09.580
But if you it's the first time you click on this right arrow next to the external tool button, it's

55
00:04:09.580 --> 00:04:15.310
the list here is empty and you click on the external tool configurations to go and create a new external

56
00:04:15.310 --> 00:04:17.200
tool configuration for the native image.

57
00:04:17.380 --> 00:04:20.170
So why use external tool in Eclipse ID?

58
00:04:20.170 --> 00:04:23.530
Clearly you can run the external application from terminal.

59
00:04:23.530 --> 00:04:24.280
For example.

60
00:04:24.820 --> 00:04:30.850
So far we've been using native image from the terminal to compile our Java application.

61
00:04:30.880 --> 00:04:36.790
The problem is that once your job application becomes very complicated, very large, it has a lot of

62
00:04:36.790 --> 00:04:44.650
classifiers, lots of packages, lots of dependencies, dependencies on other projects or Java files.

63
00:04:44.650 --> 00:04:49.960
Then specifying the dependencies of your job application for native image becomes difficult.

64
00:04:50.080 --> 00:04:54.430
External tool allows you to access eclipses internal environment variables.

65
00:04:54.430 --> 00:04:59.350
So Eclipse has some internal variables that only Eclipse understands.

66
00:04:59.350 --> 00:05:06.070
And when you use those names at runtime, Eclipse actually replaces those names, those variables with

67
00:05:06.070 --> 00:05:08.830
the actual string representation of those variables.

68
00:05:08.890 --> 00:05:14.830
So it's a string substitution and you can even define your own internal environment variables for eclipse.

69
00:05:15.100 --> 00:05:18.250
So Eclipse ID is available of the.

70
00:05:19.310 --> 00:05:23.600
Of the past two work in space or the selected file in the tree.

71
00:05:24.110 --> 00:05:24.680
So.

72
00:05:24.950 --> 00:05:25.940
So for example.

73
00:05:26.120 --> 00:05:29.420
The for example.

74
00:05:30.170 --> 00:05:35.970
Basically the path to work in space or selected file in the tree view.

75
00:05:35.990 --> 00:05:36.320
Right.

76
00:05:36.320 --> 00:05:40.790
So if you want to basically.

77
00:05:40.790 --> 00:05:47.180
So you'll say you have multiple directories on your operating system that you have defined as eclipse

78
00:05:47.180 --> 00:05:48.170
workspaces.

79
00:05:48.200 --> 00:05:52.700
Obviously, you can open up Eclipse ID and tell them, okay, use this directory, I want to work on

80
00:05:52.700 --> 00:05:54.290
this workspace or the other one.

81
00:05:54.350 --> 00:06:00.350
But then once you change workspaces, the actual path to that workspace changes.

82
00:06:00.350 --> 00:06:06.800
But as long as you define your use a environment variable that represents the workspace, you don't

83
00:06:06.800 --> 00:06:12.290
need to change anything because eclipse internally is where the path to the workspace, right?

84
00:06:12.290 --> 00:06:19.310
And there is an environment where we call the workspace underscore lock or location, which means whenever

85
00:06:19.310 --> 00:06:24.890
you use that environment where in eclipse, eclipse is aware of what the actual value of that variable

86
00:06:24.890 --> 00:06:25.220
is.

87
00:06:25.250 --> 00:06:26.510
Same with the tree view.

88
00:06:26.510 --> 00:06:34.130
So Eclipse has a package explorer or file explorer and whenever you select something there is an environment

89
00:06:34.130 --> 00:06:39.710
variable that has the full path to that selected resource or selected file.

90
00:06:39.710 --> 00:06:40.160
Right.

91
00:06:40.490 --> 00:06:47.270
So eclipses internal variables, access these variables using dollar sign and then braces and the name

92
00:06:47.270 --> 00:06:48.620
of the environment variable.

93
00:06:49.550 --> 00:06:56.060
The entire expression will be substituted by eclipse ID at runtime and this will be executed in a separate

94
00:06:56.060 --> 00:06:57.230
shared process process.

95
00:06:57.230 --> 00:07:04.190
So for the external tool, if you you want to pass some arguments or flags to your external tool, let's

96
00:07:04.190 --> 00:07:07.970
say native image, we want to specify the class path or the working directory.

97
00:07:07.970 --> 00:07:17.300
Remember in terminal, even in terminal, when we every time we launch the native image Google home

98
00:07:17.300 --> 00:07:22.490
being directory in native image, we are inside some working directory and I will show you that the

99
00:07:22.490 --> 00:07:26.140
same concept applies to this external tool configuration.

100
00:07:26.150 --> 00:07:30.110
You want to tell Eclipse where to run this external tool from.

101
00:07:30.110 --> 00:07:32.510
So which directory is the working directory?

102
00:07:32.630 --> 00:07:35.210
And working directory is basically the current directory.

103
00:07:35.210 --> 00:07:40.970
The dot right dot means if I tell it hyphen CP dot, it means the current working directory.

104
00:07:40.970 --> 00:07:46.130
So that's the first thing that you, you have to tell to the external application, right.

105
00:07:46.130 --> 00:07:48.950
What is the working directory and eclipse takes care of it.

106
00:07:49.730 --> 00:07:51.770
And then some flags, for example, hyphen.

107
00:07:51.800 --> 00:07:59.570
CP You want to tell it, put all the dependencies to these arguments so you want to tell eclipse hey,

108
00:07:59.600 --> 00:08:05.900
take care of adding all the let's say I have lots of jars as dependencies to my job application and

109
00:08:05.900 --> 00:08:10.100
I want to tell Native Image that all of those jars have to be on this class path argument.

110
00:08:10.550 --> 00:08:17.240
Obviously going trying to manually write them down, let's say directory one colon directory to remember

111
00:08:17.240 --> 00:08:18.080
the class path.

112
00:08:18.090 --> 00:08:20.240
A separator is colon.

113
00:08:20.240 --> 00:08:27.140
It's very tedious, whereas inside the eclipse ID Eclipse is already aware of all the dependencies of

114
00:08:27.140 --> 00:08:29.390
your Java application, so there is no problem with that.

115
00:08:29.390 --> 00:08:36.500
All you have to do, you have to use something like an environment variable in eclipse that has that

116
00:08:36.500 --> 00:08:42.470
says for example, project underscore class path and at runtime when you run this external tool on your

117
00:08:42.470 --> 00:08:48.770
Java project, eclipse replaces this environment variable, which is an eclipse variable internal variable

118
00:08:48.800 --> 00:08:52.370
with the correct string representation which has all the.

119
00:08:54.040 --> 00:08:58.150
Basically all the dependencies of your class path, right?

120
00:08:58.150 --> 00:09:01.930
So this is the power of this external tool in eclipse ID, right?

121
00:09:02.680 --> 00:09:07.870
So here I have listed all the internal environment variables.

122
00:09:08.140 --> 00:09:14.320
So here is a few important of them that you probably end up using most of the time.

123
00:09:16.180 --> 00:09:17.890
So first of all, let's look at this list.

124
00:09:17.890 --> 00:09:19.600
I'm going to go through this quickly.

125
00:09:19.600 --> 00:09:25.120
Active, underscore, core, underscore, build, dear, build files, build, project, build, type,

126
00:09:25.120 --> 00:09:27.880
bundle, location, CTT path, entry bar.

127
00:09:27.880 --> 00:09:35.680
This is the C++ for the C++ plugin and config description config name container location container name

128
00:09:35.680 --> 00:09:39.700
container path current date easy shell eclipse home.

129
00:09:39.700 --> 00:09:43.590
Remember when you launch Eclipse, Eclipse also runs on top of a gvm.

130
00:09:43.630 --> 00:09:48.490
So it also has this environment variable eclipse home that tells you where is the home directory of

131
00:09:48.490 --> 00:09:49.300
the eclipse right.

132
00:09:49.450 --> 00:09:57.580
E home env var environment well file prompt file you or I let me zoom out.

133
00:09:58.840 --> 00:09:59.950
Let's zoom back in.

134
00:10:00.070 --> 00:10:03.130
So file your IE folder prompt git branch.

135
00:10:03.130 --> 00:10:11.080
So if one of your Java projects is actually a git repository, you can you can basically inquire some

136
00:10:11.080 --> 00:10:16.690
of the environment variables that are associated with git inside eclipse git directory, git repo relative

137
00:10:16.690 --> 00:10:21.310
path git work tree java extensions, regex java type name.

138
00:10:21.310 --> 00:10:22.660
This is the most important one.

139
00:10:22.660 --> 00:10:28.720
This returns the fully qualified name of a class file password prompt project class path.

140
00:10:28.720 --> 00:10:35.350
This is very, very important when we configure an external tool to run a native image because we have

141
00:10:35.350 --> 00:10:40.780
to tell it all the directories are on the class path, all the dependencies, our Java project and all

142
00:10:40.780 --> 00:10:46.510
you have to do is use this environment variable inside eclipse project location project name project

143
00:10:46.510 --> 00:10:53.050
path resource location resource name resource path selected resource location selected resource name

144
00:10:53.050 --> 00:10:54.370
selected resource path.

145
00:10:54.400 --> 00:11:00.460
Now the difference between resource and this Java type name here is that resource is the actual file.

146
00:11:00.460 --> 00:11:07.420
So if you click on the file in the source file in the package Explorer, it's been considered a resource.

147
00:11:07.420 --> 00:11:13.540
But if you select that Java file and use the Java type name, Eclipse actually returns the fully qualified

148
00:11:13.540 --> 00:11:14.890
name of the class file.

149
00:11:14.920 --> 00:11:19.300
Remember native image runs or operates on the class files, not java source files.

150
00:11:20.050 --> 00:11:28.390
Select the text source lookup java agent s string prompt sys system path system property and these are

151
00:11:28.390 --> 00:11:34.600
used if you want to inquire some of the Java system properties like JVM properties when you launch Eclipse,

152
00:11:34.600 --> 00:11:39.220
obviously it runs on top of Java that JVM has been already configured.

153
00:11:39.220 --> 00:11:43.120
So it has some system properties, workspace, location.

154
00:11:43.120 --> 00:11:50.200
This is very important that returns the full path to your workspace workspace underscore project, underscore

155
00:11:50.200 --> 00:11:51.070
locations.

156
00:11:51.980 --> 00:11:55.400
And this is all the locations that are associated with your work, especially.

157
00:11:55.400 --> 00:12:00.320
And again, the ones that I have highlighted in a box here work is this location, project, location,

158
00:12:00.320 --> 00:12:04.130
name, class path, resource name, path, java type name.

159
00:12:04.130 --> 00:12:06.680
These are the most important ones, right?

160
00:12:06.680 --> 00:12:14.330
So before going into the details, what I'm going to do, I'm going to jump into Eclipse ID and quickly

161
00:12:14.330 --> 00:12:17.750
show you the meaning of these environment variables.

162
00:12:17.750 --> 00:12:18.320
So.

163
00:12:19.180 --> 00:12:20.290
Let's head to Eclipse.

164
00:12:20.320 --> 00:12:21.820
This is my package explorer.

165
00:12:21.820 --> 00:12:22.330
Right.

166
00:12:22.330 --> 00:12:30.580
And if I click on the any file in the package Explorer, remember you can have packages, Java packages

167
00:12:30.820 --> 00:12:34.510
or you can have a non package directories in your Java project.

168
00:12:34.510 --> 00:12:37.090
So to the eclipse IDE, this is not a package.

169
00:12:37.090 --> 00:12:40.060
For example, this test directory is not a package, right?

170
00:12:40.330 --> 00:12:46.030
It's just some directory that is not and anything that is not a package is not going to be added on

171
00:12:46.030 --> 00:12:52.870
the class path of your Java file, but nevertheless inside a directory you can have a Java file, classifies

172
00:12:52.870 --> 00:12:54.460
text file, any type of file.

173
00:12:54.610 --> 00:12:59.530
And in the package Explorer, when you click on any of these, these are called a resource.

174
00:13:00.520 --> 00:13:06.760
Now what this means is that if I go to external tool configuration right now I have created a native

175
00:13:06.760 --> 00:13:10.330
image 17 and I will walk you through this in the next lecture.

176
00:13:10.330 --> 00:13:11.380
But let's look at this.

177
00:13:11.380 --> 00:13:13.150
Let's call it a dummy.

178
00:13:13.330 --> 00:13:13.960
Right.

179
00:13:15.460 --> 00:13:15.760
All right.

180
00:13:15.760 --> 00:13:17.200
So we shouldn't run this.

181
00:13:17.200 --> 00:13:21.490
So let's go back to this arrow and let's look at the dummy, right?

182
00:13:21.490 --> 00:13:23.230
So the way you do it.

183
00:13:24.580 --> 00:13:28.120
All right, let's actually delete all of the old ones.

184
00:13:30.010 --> 00:13:30.450
Yeah.

185
00:13:30.460 --> 00:13:36.870
So the way you do it, you go to this external tool configuration and then click the program, right?

186
00:13:36.880 --> 00:13:44.260
You want to run a program as an external tool and you press on this, press the new configuration button

187
00:13:44.260 --> 00:13:46.330
to create a configuration of the selected type.

188
00:13:46.450 --> 00:13:49.720
So you click on this, you are creating a new configuration.

189
00:13:49.720 --> 00:13:54.790
Now, obviously you can delete it, you can duplicate it if you want to quickly change something.

190
00:13:55.420 --> 00:14:03.820
This button is for running and there you can filter them or you can expand or not expand.

191
00:14:03.820 --> 00:14:05.380
So let's delete the previous one.

192
00:14:05.980 --> 00:14:14.320
So export launch configuration, you can, for example, export these or filter them, filter, configuration,

193
00:14:14.320 --> 00:14:17.530
type, etc. But right now we just created a new configuration.

194
00:14:17.530 --> 00:14:18.640
You can give it a name.

195
00:14:18.640 --> 00:14:27.180
This name is just something that you can easily distinguish, let's say dummy external tool, right?

196
00:14:27.400 --> 00:14:33.280
And what kind of application do I want to run as external tool?

197
00:14:34.270 --> 00:14:43.960
Let's say let's go back here to our terminal and we know that if I type ls it's going to it's a command

198
00:14:43.960 --> 00:14:46.570
line application and it lists all the files and directories.

199
00:14:46.570 --> 00:14:47.860
But where is this list?

200
00:14:47.890 --> 00:14:49.540
It's in bean ls right.

201
00:14:49.960 --> 00:14:54.250
So instead of typing ls you can say being ls and it is still works.

202
00:14:54.520 --> 00:14:56.980
So I'm going to copy this.

203
00:14:58.240 --> 00:15:01.360
Go back to eclipse ID and then being LLS.

204
00:15:01.750 --> 00:15:06.820
So I want to tell you to run the LLS tool and then working directory.

205
00:15:06.850 --> 00:15:10.270
This application is going to be run, but just like terminal.

206
00:15:10.600 --> 00:15:14.340
When we run it, you have to be inside some working directory, right?

207
00:15:14.350 --> 00:15:15.970
So let's tell the eclipse.

208
00:15:15.970 --> 00:15:19.570
You want to run it in our Java Java native image.

209
00:15:19.570 --> 00:15:20.750
So there are different ways.

210
00:15:20.770 --> 00:15:22.600
First of all, there is this variable.

211
00:15:22.600 --> 00:15:28.240
That list immediately lists all the internal variables of Eclipse and you can quickly search for something,

212
00:15:28.240 --> 00:15:35.920
let's say project basically path or project location.

213
00:15:36.840 --> 00:15:38.630
Retains the absolute file system.

214
00:15:38.630 --> 00:15:44.540
So there is a description that immediately tells you what's going on, returns the absolute filesystem

215
00:15:44.540 --> 00:15:46.760
path of the resources project.

216
00:15:47.000 --> 00:15:53.150
So remember I create a Java project, whatever file that I select and whatever file and select this

217
00:15:53.150 --> 00:16:00.470
project location returns the the path to the project Java project that this file belongs to.

218
00:16:00.500 --> 00:16:01.460
So let's select this.

219
00:16:01.460 --> 00:16:06.920
And you see Eclipse replaces it with the internal representation of the environment, variable dollar

220
00:16:06.920 --> 00:16:11.450
sign, curly braces and then the name of the variable at runtime.

221
00:16:11.450 --> 00:16:15.680
This will be replaced by the string representation of this project location.

222
00:16:15.860 --> 00:16:19.490
And again, if you select different files in different projects, this will work.

223
00:16:19.610 --> 00:16:24.950
So Eclipse automatically substitutes this variable with the correct a string representation.

224
00:16:25.990 --> 00:16:29.620
And for the argument, we're not going to pass anything, right?

225
00:16:29.620 --> 00:16:33.220
So let's apply and let's run this right now.

226
00:16:33.220 --> 00:16:34.780
I selected this terminal.

227
00:16:38.070 --> 00:16:40.320
All right, so what I forgot to do.

228
00:16:41.520 --> 00:16:43.230
Let's go back to our external tool.

229
00:16:43.230 --> 00:16:48.960
And you see there are other stuff that again I will show you in the future lectures.

230
00:16:48.960 --> 00:16:51.720
But for now there is a build build before launch.

231
00:16:51.720 --> 00:16:53.310
I'm going to select it.

232
00:16:53.310 --> 00:16:57.000
Build means if there are also other projects in the workspace, what to do?

233
00:16:57.030 --> 00:16:59.100
Do you want to recompile all the files?

234
00:16:59.100 --> 00:17:00.600
For now, we're just running, LZ.

235
00:17:00.630 --> 00:17:04.860
We want to list the directories or all the files inside the project directory.

236
00:17:04.860 --> 00:17:06.960
So I don't want to build refresh.

237
00:17:06.960 --> 00:17:08.730
We don't want to refresh anything, build.

238
00:17:08.910 --> 00:17:09.990
We cancel the build.

239
00:17:09.990 --> 00:17:17.040
We're not defining any environment variables and the common we can allocate console so that see the

240
00:17:17.040 --> 00:17:20.460
output when we run these achievements.

241
00:17:20.460 --> 00:17:28.860
And as you can see I select a file I run my external to dummy external tool and it actually runs the

242
00:17:28.860 --> 00:17:35.430
command being ls right ls is the command line tool and it runs it under the working directory and I

243
00:17:35.430 --> 00:17:41.610
told it to run it on basically the project location, right.

244
00:17:41.610 --> 00:17:43.650
The project that this file belongs to.

245
00:17:44.430 --> 00:17:50.910
So regardless of which file or which resource, any directory or any file is a resource.

246
00:17:50.910 --> 00:17:59.640
If I run it, it's going to run the external tool being ls inside this directory.

247
00:17:59.640 --> 00:18:07.740
So it's equivalent to open a terminal here in the disk, the directory and say hyphen forward slash

248
00:18:08.640 --> 00:18:10.760
bean ls or just say ls.

249
00:18:10.770 --> 00:18:11.280
All right.

250
00:18:12.300 --> 00:18:15.120
So this was the quick introduction to this external tool.

251
00:18:15.120 --> 00:18:21.090
In the future lectures, I will go in more depth about how to actually configure this external tool

252
00:18:21.090 --> 00:18:21.810
further.

253
00:18:21.810 --> 00:18:25.110
What is the build or tab?

254
00:18:25.140 --> 00:18:26.730
There was a build tab here.

255
00:18:28.180 --> 00:18:29.290
What does it mean?

256
00:18:29.290 --> 00:18:31.200
There is a refreshed environment.

257
00:18:31.210 --> 00:18:32.280
There is a common here.

258
00:18:32.290 --> 00:18:33.940
What can we do about it?

259
00:18:33.940 --> 00:18:40.930
And again, in the arguments, basically what arguments we can pass to our external tool.

260
00:18:40.930 --> 00:18:48.130
So when you again to summarize, when you launch a Java application, let's say when you launch an an

261
00:18:48.130 --> 00:18:54.880
application in the terminal, you write the full path or the relative path or just the name of the application.

262
00:18:54.880 --> 00:18:59.770
And we saw that if you just typed the name of the application, the terminal and the operating system,

263
00:18:59.770 --> 00:19:01.990
they search into the path environment variables.

264
00:19:01.990 --> 00:19:02.440
Right?

265
00:19:02.440 --> 00:19:05.260
Well, let's say we type the foo name being lls, right?

266
00:19:05.650 --> 00:19:08.950
And then you want to tell the external tool.

267
00:19:08.950 --> 00:19:13.090
And when you run a application the terminal, you always run it inside some working directory.

268
00:19:13.090 --> 00:19:18.550
So this working directory represents the current directory that I'm inside, which is this directory

269
00:19:18.550 --> 00:19:19.330
Java native image.

270
00:19:19.330 --> 00:19:25.390
Right when I launch this application which is ls to list all the files and then LS can take arguments,

271
00:19:25.390 --> 00:19:28.060
hyphen l, hyphen a etc. right.

272
00:19:28.780 --> 00:19:30.970
So these arguments actually represent those.

273
00:19:30.970 --> 00:19:35.380
I can say hyphen la apply and then run.

274
00:19:36.070 --> 00:19:42.640
And as you can see, any resource, any file, anything that I select and run my external tool, it's

275
00:19:42.640 --> 00:19:49.960
going to run it on run the ls hyphen le in inside this working day which is Java native image.

276
00:19:49.960 --> 00:19:56.140
So it tells me client directory ideas, class path, these are the eclipses and these are all the directories

277
00:19:56.140 --> 00:19:58.210
inside the project directory.

278
00:19:58.210 --> 00:19:58.660
Right.

279
00:19:58.870 --> 00:20:02.420
I've been example run as a run me Z test.

280
00:20:02.420 --> 00:20:03.130
That's right.

281
00:20:03.130 --> 00:20:05.290
So I hope you understand this.

282
00:20:05.290 --> 00:20:10.720
In the next lecture I will go into more detail, so please stay tuned and I'll see in the next one.
