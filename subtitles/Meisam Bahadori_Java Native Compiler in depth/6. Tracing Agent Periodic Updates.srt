1
00:00:01,510 --> 00:00:04,000
Hello and welcome to another tutorial.

2
00:00:04,000 --> 00:00:09,550
We're going to continue our discussion on the tracing agent that comes with the VMD CVM.

3
00:00:09,550 --> 00:00:15,520
And we said that by default the agent will write the configuration files after the JVM process terminates.

4
00:00:15,520 --> 00:00:23,020
But sometimes even during the sometimes you want to make sure that everything gets regularly saved and

5
00:00:23,020 --> 00:00:24,970
dumped to the configuration file.

6
00:00:24,970 --> 00:00:31,270
So in addition, the agent provides the following flags to write configuration files on a periodic basis.

7
00:00:31,270 --> 00:00:31,630
Right?

8
00:00:31,630 --> 00:00:33,340
Sometimes, maybe.

9
00:00:33,760 --> 00:00:34,180
I don't know.

10
00:00:34,180 --> 00:00:38,140
If JVM somehow crashes, then nothing is written as the configuration file.

11
00:00:38,140 --> 00:00:44,380
So you want to make sure that you practically write the configuration files, all the calls that have

12
00:00:44,380 --> 00:00:50,020
been intercepted by the native, by the agent, you want to make sure that it periodically dumps the

13
00:00:50,020 --> 00:00:53,560
intercept, all those interceptions to two files.

14
00:00:53,560 --> 00:01:00,320
So config write period period seconds right executes a periodic write every number of seconds as is

15
00:01:00,340 --> 00:01:07,450
specified in this configuration supports only integer values greater than zero config write initial

16
00:01:07,450 --> 00:01:08,200
delay seconds.

17
00:01:08,200 --> 00:01:11,530
So this is the initial delay from the.

18
00:01:11,530 --> 00:01:17,800
So how long will it take from the time you run the JVM run application until the first time that the

19
00:01:17,820 --> 00:01:23,230
GVM, the agent dumps all the configurations, all the calls that have been intercepted to a configuration

20
00:01:23,230 --> 00:01:29,770
files the number of seconds before the first write is scheduled for execution supports only integer

21
00:01:29,770 --> 00:01:31,720
values greater than or equal to zero.

22
00:01:31,750 --> 00:01:34,540
Obviously the delay can be zero, which means as soon as.

23
00:01:37,490 --> 00:01:46,880
As soon as we we run eight schedules a dump of the interceptions enabled only if config right period

24
00:01:46,880 --> 00:01:48,290
seconds is greater than zero.

25
00:01:48,290 --> 00:01:48,830
Right?

26
00:01:48,830 --> 00:01:53,510
So if config right period period seconds is not zero.

27
00:01:54,440 --> 00:01:59,360
Or basically if it's zero, which is a default value, which means we don't want to write periodically.

28
00:01:59,360 --> 00:02:05,990
So and then there is no point in having a delay because the only way that if we're not writing periodically,

29
00:02:05,990 --> 00:02:09,860
so the only option is to dump everything after JVM 10 minutes.

30
00:02:10,070 --> 00:02:16,130
So the example, the way you do it, we saw that we run the JVM from the VM and then we tell it that

31
00:02:16,130 --> 00:02:23,060
we want to activate an agent that's the dash or hyphen agent lib and then call in which type of agent

32
00:02:23,060 --> 00:02:23,510
it is.

33
00:02:23,510 --> 00:02:29,420
It's the native image agent and which property of this native image we're going to set.

34
00:02:29,450 --> 00:02:35,240
We're going to say that config output directory and we saw that there is also an option for config message

35
00:02:35,240 --> 00:02:36,020
directory.

36
00:02:37,340 --> 00:02:44,720
So but that config managed for mostly for use cases when you want to run application multiple times

37
00:02:44,720 --> 00:02:51,170
with different inputs right here, we tell it, we periodically run this and then maybe during the execution

38
00:02:51,170 --> 00:02:54,740
we give it multiple, um, basically inputs.

39
00:02:54,950 --> 00:02:56,570
So config output directory.

40
00:02:56,570 --> 00:03:01,670
And we said that it's best to put it in the meta inf and then native image inside the meta.

41
00:03:02,000 --> 00:03:03,060
That's the default.

42
00:03:03,080 --> 00:03:09,320
And then now if I want to add additional parameters or properties to this native image agent, we separate

43
00:03:09,320 --> 00:03:10,280
them with comma.

44
00:03:10,280 --> 00:03:14,300
So comma config right period seconds is 300.

45
00:03:14,300 --> 00:03:17,150
So every 300 seconds, every 5 minutes.

46
00:03:18,110 --> 00:03:19,040
Config, right.

47
00:03:19,040 --> 00:03:20,690
Initial delay, seconds, five.

48
00:03:20,690 --> 00:03:21,140
Right.

49
00:03:21,140 --> 00:03:23,600
So wait until 5 seconds to schedule the net.

50
00:03:23,600 --> 00:03:23,870
Right.

51
00:03:23,870 --> 00:03:32,420
Which means 5 minutes and 5 seconds after the in the JVM runs, the first dump of the configuration

52
00:03:32,420 --> 00:03:33,110
happens.

53
00:03:33,140 --> 00:03:37,360
It is advisable to manually review the generated configuration files.

54
00:03:37,370 --> 00:03:46,490
I mean, usually they are the most the most the two mostly important configuration files are the reflection

55
00:03:46,820 --> 00:03:48,130
and agenda.

56
00:03:48,140 --> 00:03:54,590
I mean, resources are also sometimes also, I would say reflect and generally are the most important

57
00:03:54,590 --> 00:03:54,830
ones.

58
00:03:54,830 --> 00:04:01,520
But resource config is also in the second most important files, right?

59
00:04:03,460 --> 00:04:09,890
Uh, because the agent observes only code that was executed, the resulting configurations can be missing

60
00:04:09,890 --> 00:04:12,290
elements that are used in other code paths.

61
00:04:12,320 --> 00:04:12,680
Right.

62
00:04:12,680 --> 00:04:15,800
That's why we also have that config merge directory.

63
00:04:15,830 --> 00:04:21,680
It could also make sense to simplify the generated configurations to make any future manual maintenance

64
00:04:21,680 --> 00:04:22,340
easier.

65
00:04:23,910 --> 00:04:28,770
And as I mentioned, the generated configuration files can be supplied to the Native Image Compiler

66
00:04:28,770 --> 00:04:33,750
tool by placing them in a meta inf slash native image.

67
00:04:33,750 --> 00:04:37,890
So this is a directory native image inside another directly called meta inf.

68
00:04:38,070 --> 00:04:43,710
And all the configuration files are inside this native image directory on the class path.

69
00:04:43,710 --> 00:04:47,790
So you want to make sure that when you run the native image, you obviously have to specify the class

70
00:04:47,790 --> 00:04:50,100
path for the native image tool.

71
00:04:50,100 --> 00:04:55,500
And also you want to make sure that this method in native image directories are on the class path.

72
00:04:55,500 --> 00:05:00,660
And then when you do that, you don't need to explicitly tell the native image that, hey, I have some

73
00:05:00,660 --> 00:05:04,020
configuration files, native image by default searches.

74
00:05:04,020 --> 00:05:06,570
The class path for this naming matter.

75
00:05:06,570 --> 00:05:12,270
If Native Image, if it finds this directory hierarchy, it automatically realizes that hey, you are

76
00:05:12,270 --> 00:05:17,490
feeding it some configuration files, for example, in a jar file using the image.

77
00:05:17,640 --> 00:05:20,550
And we already know that inside any jar file there is a meta inf.

78
00:05:20,550 --> 00:05:29,130
So you can configure your build tool to make sure that there is a directory inside of it called Native

79
00:05:29,130 --> 00:05:34,140
Image and then basically all the configuration files are there.

80
00:05:34,410 --> 00:05:40,410
This directory or any of its subdirectories is searched for files with the names JNI config, the JSON

81
00:05:40,410 --> 00:05:47,280
reflect config json proxy config that JSON and resource config dot JSON which are then automatically

82
00:05:47,280 --> 00:05:48,510
included in the build.

83
00:05:48,540 --> 00:05:52,710
Not all of those files must be present, so you don't need to have four of them.

84
00:05:52,710 --> 00:05:54,090
Any of them that is present.

85
00:05:54,120 --> 00:06:01,350
Native image by default picks them up from this default naming convention method slash native image.

86
00:06:01,980 --> 00:06:06,840
When multiple files with the same name are found, all of them are included.

87
00:06:07,830 --> 00:06:08,820
Now what does it mean?

88
00:06:09,000 --> 00:06:14,430
Obviously you cannot have files with the same name in the same directory, but you can instruct the

89
00:06:14,430 --> 00:06:19,410
native image that hey, I have configuration for us in multiple directories, you see.

90
00:06:19,620 --> 00:06:26,310
And then obviously configuration files should always have the same name, but we can have multiple files,

91
00:06:26,340 --> 00:06:31,470
multiple configuration files with the same name in different directory directories, and we can include

92
00:06:31,470 --> 00:06:35,730
all of those directories as directories that native image can search.

93
00:06:35,730 --> 00:06:40,020
In order to do that, obviously you have to enable a explicit flag for the native image.

94
00:06:41,100 --> 00:06:44,700
Important cases where we need to use VMM tracing agent.

95
00:06:44,700 --> 00:06:47,520
If you have JNI calls, I will show you an example.

96
00:06:47,580 --> 00:06:53,460
Reflection we've already seen this reflection is important because sometimes loading a class dynamic,

97
00:06:53,980 --> 00:06:57,450
loading a class is deferred completely to runtime.

98
00:06:57,450 --> 00:07:02,190
No, nothing is hardcoded in the source code, so there is no way for the native image to understand

99
00:07:02,190 --> 00:07:02,550
it.

100
00:07:02,640 --> 00:07:03,690
And resources.

101
00:07:03,690 --> 00:07:09,240
Our application requires some external resources such as images, data, files, and whenever you build

102
00:07:09,240 --> 00:07:12,720
your application you want to and let's say you package them as a jar, right?

103
00:07:12,960 --> 00:07:15,540
You want to make sure that you use some sort of.

104
00:07:17,380 --> 00:07:23,920
Class loaded because the job of class loader to load classes on a class path at runtime and load them.

105
00:07:23,920 --> 00:07:27,460
They can also search for resources that are on a class path.

106
00:07:27,910 --> 00:07:33,880
We can take advantage of the external tool in eclipse ID to set up cores to grow VM tracing again for

107
00:07:33,880 --> 00:07:36,460
different scenarios and.

108
00:07:38,960 --> 00:07:42,970
And we've already seen this in the previous lecture.

109
00:07:42,980 --> 00:07:44,330
So let's head to Eclipse.

110
00:07:45,700 --> 00:07:53,650
And try to, first of all, look at these two ideas that we want to not only save the configuration

111
00:07:53,650 --> 00:07:58,330
for us, we want to actually periodically update them if there is any particular change.

112
00:07:58,330 --> 00:08:05,380
Because remember, the most successful thing, the ultimate goal is to be able to predict all the configurations

113
00:08:05,380 --> 00:08:09,580
that are associated with all the paths that the code can take.

114
00:08:09,580 --> 00:08:09,750
Right.

115
00:08:09,760 --> 00:08:11,560
Our Java application can take.

116
00:08:11,830 --> 00:08:13,240
So let's head to Eclipse.

117
00:08:14,510 --> 00:08:24,500
So we had this, uh, basically, uh, file, uh, reflection demo and what I'm going to do actually.

118
00:08:25,250 --> 00:08:26,230
Let's copy these.

119
00:08:26,240 --> 00:08:35,570
I'm going to say that we're creating a reflection version for and instead of basically supplying this

120
00:08:35,820 --> 00:08:36,500
zero.

121
00:08:36,530 --> 00:08:43,220
The name of the class as a command line arguments, I'm going to ask you there to provide a, uh, um,

122
00:08:43,550 --> 00:08:44,210
an input.

123
00:08:44,210 --> 00:08:44,410
Right.

124
00:08:44,420 --> 00:08:50,390
Instead of command line arguments at the time that we launched JVM, I want to ask, use it.

125
00:08:50,390 --> 00:08:55,280
And the way we read the input from the standard user is using the standard input.

126
00:08:55,280 --> 00:09:01,370
So scanner scanner, new scanner, and then we hook it up to the input stream, which is the system

127
00:09:01,370 --> 00:09:02,120
that in.

128
00:09:02,120 --> 00:09:08,510
And this is always open until you explicitly close it, which really there is no need.

129
00:09:08,660 --> 00:09:17,840
The only reason that Eclipse, uh, complains about this resource not being closed is that a scanner

130
00:09:18,500 --> 00:09:21,910
implements the general interface of order closure.

131
00:09:21,920 --> 00:09:23,960
So next a string.

132
00:09:25,880 --> 00:09:36,260
So we're going to say that code and enter the name of the class and then we're going to do a print,

133
00:09:36,260 --> 00:09:42,140
for example, here and then and then we're going to say that

134
00:09:44,600 --> 00:09:50,360
out class loaded or backslash?

135
00:09:50,360 --> 00:09:51,590
Double code backslash.

136
00:09:51,590 --> 00:09:57,500
Double code percent is was successfully loaded.

137
00:09:57,950 --> 00:10:02,540
Successfully loaded and then a dot formatted.

138
00:10:02,540 --> 00:10:05,840
And then we're going to say class.

139
00:10:08,440 --> 00:10:09,040
Dot.

140
00:10:09,730 --> 00:10:13,000
Get name, for example, get canonical name.

141
00:10:13,840 --> 00:10:14,930
We can say good name.

142
00:10:14,950 --> 00:10:15,430
Right.

143
00:10:15,910 --> 00:10:19,510
And then you see eclipse complaints about the scanner saying that there is a resource leak.

144
00:10:19,510 --> 00:10:24,850
But in reality, when you hook the scanner up to the system input because the system is always open,

145
00:10:24,850 --> 00:10:28,570
it's not supposed to be closed until the JV ten terminates.

146
00:10:28,570 --> 00:10:35,290
But we're going to be a more precise here and saying that, okay, we're closing this so eclipse compiler

147
00:10:35,290 --> 00:10:37,330
doesn't complain, so let's delete this.

148
00:10:38,890 --> 00:10:41,560
Let's select our reflection demo.

149
00:10:41,560 --> 00:10:47,530
And if I go back to the last run configuration that we had, we.

150
00:10:48,490 --> 00:10:53,780
We were supplying these arguments to the program, but then now we don't need it.

151
00:10:53,800 --> 00:10:55,810
So it says, Enter the name of the class.

152
00:10:55,810 --> 00:11:02,680
Let's say you tell forge a complex, complex and say class successfully load it, right.

153
00:11:04,420 --> 00:11:14,110
Um, so basically actually what we want to do is class not found exception.

154
00:11:14,110 --> 00:11:18,760
I'm going to remove these and then we want to handle.

155
00:11:20,380 --> 00:11:26,470
So first of all, what happens when we can either put this in private resources or through the declaration

156
00:11:26,470 --> 00:11:28,540
out class not found exception?

157
00:11:28,540 --> 00:11:38,530
And then let's see what happens when we don't put a um, basically and let's say we want to ask these

158
00:11:38,530 --> 00:11:47,680
three times so four int equals zero less than a three plus plus.

159
00:11:47,680 --> 00:11:51,430
We're going to say that we want to ask user to load some classes.

160
00:11:52,270 --> 00:11:58,000
Again, this is something that there is no way for the static analyzer to understand it because we are

161
00:11:58,240 --> 00:11:59,620
the name of the class.

162
00:11:59,620 --> 00:12:07,000
The name of the class that that has to be loaded is deferred completely to runtime right in the source

163
00:12:07,000 --> 00:12:07,180
code.

164
00:12:07,180 --> 00:12:12,100
There is no way, there is no hardcoded string, there is no information about which class is going

165
00:12:12,100 --> 00:12:12,520
to be.

166
00:12:12,760 --> 00:12:14,110
So let's run this again.

167
00:12:15,220 --> 00:12:25,060
So we're going to say that util for j dot complex, dot complex class and class successfully loaded.

168
00:12:25,510 --> 00:12:30,640
Okay, so maybe let's terminate this and also put this print out here.

169
00:12:33,700 --> 00:12:34,270
All right?

170
00:12:34,270 --> 00:12:36,160
So let's run this one more time.

171
00:12:37,090 --> 00:12:45,910
So you tell for dot complex, dot complex, successfully loaded, let's say some something and then

172
00:12:45,910 --> 00:12:47,950
we get a class not found exception.

173
00:12:47,950 --> 00:12:48,400
Right?

174
00:12:48,400 --> 00:12:51,130
So this throws an exception and our program terminated.

175
00:12:51,130 --> 00:12:56,770
So I guess the best practice here is going to be to remove this, not throw this out of the main and

176
00:12:56,770 --> 00:12:58,720
then try to handle it again.

177
00:12:58,720 --> 00:12:59,260
So

178
00:13:02,020 --> 00:13:08,860
we're going to say that try we're going to make sure that this handles this.

179
00:13:10,770 --> 00:13:11,400
All right.

180
00:13:11,850 --> 00:13:18,570
And then we're going to do a catch here catch.

181
00:13:18,570 --> 00:13:23,190
And then we're going to say that class not found exception.

182
00:13:23,190 --> 00:13:25,360
And then we're going to say that.

183
00:13:25,380 --> 00:13:26,610
Or basically

184
00:13:29,550 --> 00:13:30,690
was not found.

185
00:13:30,690 --> 00:13:31,950
Was not.

186
00:13:35,200 --> 00:13:36,550
Found so.

187
00:13:39,930 --> 00:13:48,600
And then obviously what we need to do, we're going to say that a string class a name is let's get the

188
00:13:48,600 --> 00:13:50,100
name as the string.

189
00:13:52,100 --> 00:13:57,140
From the input and then pass it to here.

190
00:13:57,560 --> 00:14:01,130
And then we're going to basically.

191
00:14:01,930 --> 00:14:04,040
Pass these to this formatting.

192
00:14:04,060 --> 00:14:04,510
Yeah.

193
00:14:06,770 --> 00:14:09,980
So let's add a semicolon here.

194
00:14:10,950 --> 00:14:15,180
And actually we should put this outside the try.

195
00:14:20,910 --> 00:14:22,990
And, um.

196
00:14:25,190 --> 00:14:25,540
Yeah.

197
00:14:25,550 --> 00:14:28,910
Let's use the class name here, the actual name.

198
00:14:28,910 --> 00:14:33,740
And then if it's not found, we just tell it, hey, whatever string that you put it, it didn't, we

199
00:14:33,740 --> 00:14:34,460
couldn't find it.

200
00:14:34,460 --> 00:14:35,900
So let's run this again.

201
00:14:36,470 --> 00:14:44,600
Util forge dot complex, dot complex class successfully loaded, blah blah blah.

202
00:14:44,600 --> 00:14:52,400
It was not found and in java dot lang dot a string and loaded and then the JVM terminates.

203
00:14:52,400 --> 00:14:52,760
Right.

204
00:14:52,760 --> 00:14:54,890
And we can go this indefinitely.

205
00:14:54,890 --> 00:14:56,660
Let's say we want to try ten times.

206
00:14:58,910 --> 00:14:59,270
All right.

207
00:14:59,270 --> 00:15:04,760
So the point here is that now let's also delete our previous compilation.

208
00:15:05,900 --> 00:15:06,970
What we want to do.

209
00:15:06,980 --> 00:15:11,000
We want to go here and then run our tracing agent.

210
00:15:11,000 --> 00:15:11,750
So.

211
00:15:14,520 --> 00:15:20,970
And then we want basically to tell it to.

212
00:15:21,000 --> 00:15:24,650
So Java Trace, let's duplicate it.

213
00:15:24,660 --> 00:15:29,640
Java Trace underscore let's say periodic periodic.

214
00:15:30,060 --> 00:15:39,060
And then what we're going to do here, we're telling that agent this is our directory and then config.

215
00:15:40,980 --> 00:15:42,480
Let's zoom out.

216
00:15:44,030 --> 00:15:45,320
Let's go back to PowerPoint.

217
00:15:45,320 --> 00:15:47,750
So config right period seconds.

218
00:15:50,770 --> 00:15:52,720
So let's go back to Eclipse.

219
00:15:54,680 --> 00:15:58,670
And let's say we want to save every 2 seconds, right?

220
00:15:58,700 --> 00:16:02,060
Apply and then run our Java application.

221
00:16:02,750 --> 00:16:04,430
Enter name of class.

222
00:16:05,270 --> 00:16:11,200
So native image agent warning file or directory has been modified by another process.

223
00:16:11,210 --> 00:16:14,750
All output files remain in the temporary directory.

224
00:16:15,290 --> 00:16:15,680
Okay.

225
00:16:15,680 --> 00:16:18,920
It's interesting that it's giving us this warning.

226
00:16:26,510 --> 00:16:27,050
So.

227
00:16:27,050 --> 00:16:27,800
Let's see.

228
00:16:27,800 --> 00:16:28,430
Um.

229
00:16:29,530 --> 00:16:38,450
Can you tell for Jada to complex that complex and then enter another class, blah, blah, blah.

230
00:16:38,490 --> 00:16:45,240
So it's says saving a lot of temporary things and then enter the name of the class java lang string

231
00:16:46,050 --> 00:16:48,420
and then enter the name of a class.

232
00:16:48,600 --> 00:16:49,980
Some other stuff.

233
00:16:50,280 --> 00:16:52,350
And let's say we want to terminate.

234
00:16:53,100 --> 00:16:55,530
And let's look at what we're getting.

235
00:16:56,630 --> 00:16:58,490
So reflect config.

236
00:16:58,490 --> 00:17:00,020
We're not getting anything.

237
00:17:01,260 --> 00:17:02,460
Uh, reflect config.

238
00:17:02,470 --> 00:17:09,030
So basically I believe each one of these have a timestamp of what time it was.

239
00:17:10,230 --> 00:17:17,460
So we were trying every basically 5 seconds or every one second.

240
00:17:17,460 --> 00:17:18,000
Right.

241
00:17:20,100 --> 00:17:22,920
So towards the end.

242
00:17:23,550 --> 00:17:27,170
So at the end we had these to a string and complex.

243
00:17:27,180 --> 00:17:32,490
So basically it creates a temporary directories and every second it saves them.

244
00:17:32,490 --> 00:17:39,690
So you get lots of configuration files and the native image again includes all these in the configuration.

245
00:17:39,690 --> 00:17:42,450
At the end, all these directories will be added, right?

246
00:17:42,810 --> 00:17:48,840
So in the upper level, which was exactly at the run, it didn't save anything, right?

247
00:17:48,930 --> 00:17:58,650
So again, this might not be that much of a useful feature, but it's good to have again, again, this

248
00:17:58,650 --> 00:18:04,020
is one of the cases that you really need the configuration files because there is no way for the static

249
00:18:04,020 --> 00:18:08,160
analyzer of native image to understand which class we are dynamically loading.

250
00:18:08,160 --> 00:18:14,610
Right, because this is a string that is completely its value is completely deferred to runtime of the

251
00:18:14,610 --> 00:18:15,540
job application.

252
00:18:15,540 --> 00:18:16,980
So I hope you enjoy this lecture.

253
00:18:16,980 --> 00:18:19,230
Please stay tuned and I'll see you the next one.
