1
00:00:01,210 --> 00:00:04,000
Hello and welcome to another tutorial.

2
00:00:04,000 --> 00:00:10,270
We are going to continue our discussion on how to download and install and correctly set up the global

3
00:00:10,270 --> 00:00:11,290
VM native image.

4
00:00:11,290 --> 00:00:14,770
We said that in macOS, you download it right now.

5
00:00:14,770 --> 00:00:21,310
The latest version supports JDK 17, and then if you're using macOS, Catalina and later you have to

6
00:00:21,310 --> 00:00:29,590
make sure that the the quarantine attribute of these files that you download for VM is not set.

7
00:00:29,590 --> 00:00:34,630
So you have to remove that and then you use the updater to install the native image.

8
00:00:34,630 --> 00:00:37,390
And I recommended that on macOS and Linux.

9
00:00:37,390 --> 00:00:40,150
You go ahead and set up the home environment variable.

10
00:00:40,150 --> 00:00:48,470
And on the Mac OS, we also looked at just quickly compiling a Helloworld Java application using Native

11
00:00:48,470 --> 00:00:50,410
Image to make sure that everything works fine.

12
00:00:50,560 --> 00:00:56,230
Obviously, to refresh your memory, the prerequisite is that you should have installed and correctly

13
00:00:56,230 --> 00:01:00,100
set up the default toolchain of your operating system of your platform.

14
00:01:00,310 --> 00:01:03,280
We saw about Mac OS, Windows and Linux.

15
00:01:04,030 --> 00:01:08,170
Now in this lecture I'm going to show you how to set up the native image and make sure that it works

16
00:01:08,170 --> 00:01:09,130
fine in Linux.

17
00:01:09,310 --> 00:01:16,240
So again, Mac OS, we said the Google home environment variable and here's a screenshot of my backyard.

18
00:01:16,240 --> 00:01:22,390
See for example, I've set up my Java home environment variable to JDK 17 Home Directory and the Google

19
00:01:22,390 --> 00:01:25,510
home is pointing to the home directory of the VM 17.

20
00:01:25,510 --> 00:01:25,900
Right.

21
00:01:25,900 --> 00:01:29,410
And then if on Mac OS, usually the terminal loads the batch profile.

22
00:01:29,410 --> 00:01:36,060
So if your terminal doesn't directly load bash RC instead of uses bash profile in your bash for point,

23
00:01:36,100 --> 00:01:37,840
you can just source the bash.

24
00:01:37,840 --> 00:01:42,730
RC source just means you're telling the terminal to reload the contents of this file.

25
00:01:42,760 --> 00:01:48,670
Therefore, if some environment variables are defined in the bash RC when you do the source, the terminal

26
00:01:48,670 --> 00:01:57,580
also goes through all the lines of code and remember that in the backyard c file the hash sign or pound

27
00:01:57,580 --> 00:02:02,620
sign, it's a comment so they're not going to be read by the terminal when you run the source command,

28
00:02:02,620 --> 00:02:05,500
only the lines that don't have the hash sign.

29
00:02:06,070 --> 00:02:08,770
So they're pound signs or hash signs are comments.

30
00:02:08,770 --> 00:02:09,160
Right.

31
00:02:09,430 --> 00:02:10,120
And.

32
00:02:11,440 --> 00:02:16,780
So define global environment whereas in bash or see if your terminal uses bash profile just source the

33
00:02:16,780 --> 00:02:24,550
bash or in the bash bash provide which is these days Mac OS does that and the Linux the terminal directly

34
00:02:24,680 --> 00:02:25,300
loads the bash.

35
00:02:25,300 --> 00:02:32,800
RC So usually you don't see a bash profile and I believe in Linux what you are going to do, obviously

36
00:02:32,950 --> 00:02:34,030
we saw that previously.

37
00:02:34,030 --> 00:02:39,820
You have to download and install the default toolchain of the operating system for Linux.

38
00:02:39,820 --> 00:02:42,790
Is GCC a new compiler collection?

39
00:02:42,790 --> 00:02:49,060
And if you my recommendation is that you use Linux or Punto, obviously Linux has a lot of flavors and

40
00:02:49,060 --> 00:02:50,230
various distributions.

41
00:02:50,230 --> 00:02:53,980
You can choose anyone, any one of those because that's your choice.

42
00:02:54,250 --> 00:03:00,520
My preference is always Linux or Ubuntu and it will come by default with the GCC, but you can go ahead

43
00:03:00,520 --> 00:03:03,640
and try to see if there are any updates available for GCC.

44
00:03:04,030 --> 00:03:06,910
And so let's head to my Linux.

45
00:03:08,320 --> 00:03:15,460
Machine and then I'm going to open up a terminal and I am going to check whether DCC is installed and

46
00:03:15,550 --> 00:03:18,430
if its installed I'll check to see which version.

47
00:03:18,430 --> 00:03:21,550
So I'm going to say G Plus, Plus, Hyphen, Hyphen and Virgin.

48
00:03:21,580 --> 00:03:26,980
It tells me that remember G Plus Plus is the command line tool for compiling C++ applications.

49
00:03:26,980 --> 00:03:31,180
So it triggers the C++ compiler and C++ linker.

50
00:03:31,180 --> 00:03:40,030
If you want to compile a C application, you have to use DCC, which triggers the C compiler and C basically

51
00:03:40,030 --> 00:03:40,630
linker.

52
00:03:40,630 --> 00:03:49,090
And again, as you see, I've already installed the fish tool which is sits on top of the normal terminal

53
00:03:49,090 --> 00:03:51,070
and it's a very nice interactive shell.

54
00:03:51,100 --> 00:03:52,510
I highly recommend you use it.

55
00:03:52,510 --> 00:03:58,090
And in March, let's see whether the terminal is using bash profile or bash RC.

56
00:03:58,120 --> 00:04:03,520
In my home directory, as you can see, I have a bash story and bash RC so there is no bash profile.

57
00:04:03,760 --> 00:04:11,260
If you open this with editor, if you look at my SO, I have installed Anaconda for managing my python

58
00:04:11,260 --> 00:04:11,770
packages.

59
00:04:11,770 --> 00:04:20,410
That's why there is this line of code, this one Conda and then I have I have defined a growl home.

60
00:04:20,530 --> 00:04:28,810
We will see that in the in Linux, the JVs or the JDK that you install are inside the lib directory

61
00:04:28,810 --> 00:04:34,210
from the root directory, lib JVM, Java virtual machine and whatever JDK you have installed.

62
00:04:34,210 --> 00:04:37,090
So in macros, it's in the library.

63
00:04:37,090 --> 00:04:40,870
Java Java virtual machines in Linux is in the lib java.

64
00:04:40,870 --> 00:04:48,340
So again, the naming is very similar, but in macros, it's the full name library in Linux is lib in

65
00:04:49,450 --> 00:04:50,080
macros.

66
00:04:50,080 --> 00:04:56,030
After lib, you go inside Java and in Java, virtual machine in Linux you go into Lib and then JVM,

67
00:04:56,050 --> 00:04:58,930
Java, virtual machines and then whatever JDK you've installed.

68
00:04:58,930 --> 00:05:05,420
And now I've said my Java home to actually grow all home, so I'm using the open JDK that comes with

69
00:05:05,420 --> 00:05:06,490
the Agrale VM.

70
00:05:06,490 --> 00:05:06,970
Right?

71
00:05:06,970 --> 00:05:14,740
And then in the path I attached or I append the being directory of the Google Home or Java, remember

72
00:05:14,740 --> 00:05:17,530
Java Home and Google Home are the same thing.

73
00:05:17,530 --> 00:05:18,580
It's not necessary.

74
00:05:18,580 --> 00:05:19,780
It doesn't have to be the case.

75
00:05:19,780 --> 00:05:27,640
So I can just set it to Google Home slash pin, which explicitly says that I am using the Google Home

76
00:05:27,640 --> 00:05:34,300
Bing directory, which means my Java executable or JVM or the Java compiler is also from the Google

77
00:05:35,410 --> 00:05:35,860
JDK.

78
00:05:35,860 --> 00:05:37,120
So let's save these.

79
00:05:38,370 --> 00:05:48,540
And as I mentioned, if you are already inside the home director, you can just source the bash or C.

80
00:05:51,720 --> 00:05:54,000
So there is a.

81
00:05:57,890 --> 00:06:04,430
So the reason here is that basically the reason we saw an error was because it's because of the fish.

82
00:06:04,730 --> 00:06:11,420
So when you load it, it first runs the loads, the batch RC and then runs the fish command, right?

83
00:06:11,420 --> 00:06:17,120
Again, if you look at the batch of RC, as you can see, actually we can also look it at the terminal.

84
00:06:17,130 --> 00:06:26,000
So if we say less batch RC you see at the end I have returned to run the fish and fish.

85
00:06:26,990 --> 00:06:31,220
It it's better not to load the batch RC Or source the batch.

86
00:06:31,220 --> 00:06:32,710
RC When you're running the fish, right?

87
00:06:32,720 --> 00:06:35,240
So it's best to load the batch.

88
00:06:35,240 --> 00:06:40,940
RC And then at the end run the fish and then your terminal switches to the fish, which is very nice.

89
00:06:40,940 --> 00:06:42,200
I really enjoy the fish.

90
00:06:42,980 --> 00:06:43,400
All right.

91
00:06:43,400 --> 00:06:52,870
So again, what we want to do, everything sets up which C++ is going to tell us it's in user being

92
00:06:52,870 --> 00:06:53,660
G plus plus.

93
00:06:53,660 --> 00:07:03,620
And then we can say sudo apt update for example, I don't know GTC actually it's not the command we

94
00:07:03,620 --> 00:07:04,730
saw previously.

95
00:07:04,730 --> 00:07:10,460
What the command is for installing the essential tools for Linux build essentials.

96
00:07:10,460 --> 00:07:10,760
Right.

97
00:07:10,760 --> 00:07:17,720
Sudo apt install build essentials so we can copy this and go back and run it under Linux to make sure

98
00:07:17,720 --> 00:07:21,140
that it's up to date.

99
00:07:22,770 --> 00:07:23,460
All right.

100
00:07:23,460 --> 00:07:24,840
So let's run this.

101
00:07:24,840 --> 00:07:30,660
And Bill essentially is already the newest version, a zero upgrade, zero newly installed, zero to

102
00:07:30,660 --> 00:07:31,080
remove.

103
00:07:31,080 --> 00:07:31,620
All right.

104
00:07:32,010 --> 00:07:33,480
So everything is up to date.

105
00:07:33,480 --> 00:07:36,030
Our default toolchain is fully up to date.

106
00:07:36,030 --> 00:07:36,660
Ready to go.

107
00:07:36,660 --> 00:07:38,790
We can compile c C++ applications.

108
00:07:38,790 --> 00:07:41,640
The next step is to go ahead and download the VM.

109
00:07:42,830 --> 00:07:44,990
So download and install Google Vim.

110
00:07:45,350 --> 00:07:50,870
And then in order to install something, you kind of need to run the Nautilus in pseudo mode.

111
00:07:51,110 --> 00:07:56,570
What I mean is that basically you say pseudo and then Nautilus, right?

112
00:07:56,570 --> 00:08:04,700
That's the name of the graph file manager that comes with Linux on Mac OS is, for example, finder

113
00:08:04,700 --> 00:08:06,290
and Windows is file explorer.

114
00:08:06,290 --> 00:08:13,370
But in order to move, remember we want to download the VM files and then unpack it or unzip it and

115
00:08:13,370 --> 00:08:17,090
then move those files to the Lib JVM, which is a root directory.

116
00:08:17,090 --> 00:08:19,610
So it's not related to our home directory, right?

117
00:08:19,910 --> 00:08:24,020
We are really trying to manipulate the files from the root directory.

118
00:08:24,050 --> 00:08:27,290
That's why we have to have administrative privileges.

119
00:08:27,290 --> 00:08:32,030
And in order to do that, we run the Netflix or the file manager in the administrative mode.

120
00:08:32,420 --> 00:08:39,560
Otherwise, we won't be able to change anything in the in the root directory.

121
00:08:39,560 --> 00:08:39,980
Right.

122
00:08:40,010 --> 00:08:46,940
Remember, when you log in with your user credentials, you are free to change anything from your home

123
00:08:46,940 --> 00:08:47,720
directory, right.

124
00:08:47,720 --> 00:08:54,170
So if you are basically if I open up a new window right now, I didn't open the file explorer in the

125
00:08:54,170 --> 00:08:55,250
administrative mode.

126
00:08:55,250 --> 00:08:56,530
So it's a regular mode.

127
00:08:56,540 --> 00:08:58,010
It opens my home directory.

128
00:08:58,010 --> 00:09:04,580
I'm allowed to change anything I want, but if I want to do other location and go to the root of my

129
00:09:04,880 --> 00:09:08,180
file system, I'm not allowed to change anything.

130
00:09:08,180 --> 00:09:08,450
Right?

131
00:09:08,450 --> 00:09:15,140
So unless I run my file explorer in the sudo mode right now, obviously you can always copy files using

132
00:09:15,140 --> 00:09:20,420
the pseudo mode directly in terminal, but here I'm just running the file explorer in the pseudo mode,

133
00:09:20,420 --> 00:09:23,990
so I'm allowed to do any changes and we want to go to Lib.

134
00:09:25,090 --> 00:09:27,130
And then GM.

135
00:09:27,130 --> 00:09:27,670
Right.

136
00:09:28,370 --> 00:09:38,690
JVD So right now I've installed open JDK, JDK 14 JDK, JDK 1101 JDK, Java 11, open JDK, Java eight,

137
00:09:38,690 --> 00:09:41,600
open JDK VM 17 Right.

138
00:09:41,600 --> 00:09:45,230
So again, the what you do is very similar.

139
00:09:45,230 --> 00:09:54,200
You go to the git repository of the VM and then download the version that is for your macros or basic

140
00:09:54,200 --> 00:10:00,890
for your Linux and then your platform, whether you're using an Intel AMD CPU or you're using a, for

141
00:10:00,890 --> 00:10:05,810
example, arm CPU, right, download VM.

142
00:10:10,640 --> 00:10:11,000
All right.

143
00:10:11,000 --> 00:10:12,920
So this is the game dot org.

144
00:10:12,920 --> 00:10:18,080
We want to download the community edition, which is free and it takes us to the repository.

145
00:10:18,080 --> 00:10:21,290
And we saw previously we looked at the Linux.

146
00:10:21,500 --> 00:10:26,390
So AMD 64 this is Intel amd x 64 platform.

147
00:10:26,390 --> 00:10:32,270
If you're using Linux on a arm based CPU, then you have to download this one.

148
00:10:32,270 --> 00:10:39,560
So we want to download right now I'm using an Intel 64 bit platform, so I downloaded JDK 17 version

149
00:10:39,680 --> 00:10:41,840
and then there is nothing else.

150
00:10:41,840 --> 00:10:47,120
You just download the file Linux AMD 64.

151
00:10:48,420 --> 00:10:51,480
And we're going to save it to our downloads.

152
00:10:51,480 --> 00:10:56,340
And then it's a it's about 430, so it's half a gigabyte.

153
00:10:56,340 --> 00:10:57,780
So it takes some time to download.

154
00:10:57,780 --> 00:11:05,460
And after that you just unpack it or unzip it or extract the files from the this is a tarball or a compressed

155
00:11:05,460 --> 00:11:06,030
file.

156
00:11:07,200 --> 00:11:19,560
And then since I ran an atlas in the basically pseudo mode or administrative mode, I can directly basically

157
00:11:19,650 --> 00:11:24,390
move the files to my lib JVM folder.

158
00:11:24,390 --> 00:11:24,630
Right?

159
00:11:24,630 --> 00:11:33,360
So let's open a new window in a non administrative mode or basically a the user mode and then we go

160
00:11:33,360 --> 00:11:38,040
into downloads and we just download it gradle VM 17.

161
00:11:38,040 --> 00:11:38,580
Right.

162
00:11:39,240 --> 00:11:52,200
And this is what we downloaded now the version I installed, let's go back to Lib and then JVM.

163
00:11:52,200 --> 00:11:55,980
So the version I install is 22.02.

164
00:11:56,010 --> 00:11:58,500
This newer version is 22.1.

165
00:11:58,500 --> 00:11:59,640
So this is a new version.

166
00:11:59,640 --> 00:12:03,180
So I'm going to let say extract two.

167
00:12:04,010 --> 00:12:06,260
Or we can just extract it.

168
00:12:06,260 --> 00:12:07,310
Extract here.

169
00:12:09,570 --> 00:12:14,940
So the version I installed before and now the newer version has a little bit updates because it's went

170
00:12:14,940 --> 00:12:17,670
from O2 to one zero.

171
00:12:18,490 --> 00:12:21,430
So right now it's on zipping.

172
00:12:25,080 --> 00:12:26,310
So it's a.

173
00:12:27,990 --> 00:12:29,610
So I'm running this on a virtual machine.

174
00:12:29,610 --> 00:12:32,280
That's why the extraction takes a little bit of time.

175
00:12:32,280 --> 00:12:39,480
But after that, since this Nautilus windows is this Nautilus window is in the administrative mode,

176
00:12:39,480 --> 00:12:42,720
I opened it using the pseudo command in terminal.

177
00:12:42,750 --> 00:12:45,960
I should be able to drag and drop this directory to this.

178
00:12:45,960 --> 00:12:51,810
And then, which means I have successfully installed the newest version of the VM Community Edition

179
00:12:51,810 --> 00:12:53,700
based on the open JDK 17.

180
00:12:53,910 --> 00:13:00,960
And after that I'll go to my bash RC and change the graph home environment variable.

181
00:13:02,320 --> 00:13:05,890
To basically to point to the US version.

182
00:13:05,890 --> 00:13:06,320
Right.

183
00:13:06,340 --> 00:13:07,930
So I believe this is done.

184
00:13:08,080 --> 00:13:08,590
All right.

185
00:13:08,590 --> 00:13:17,020
So if we look at the inside, this global VM community edition, everything said, and then we're going

186
00:13:17,020 --> 00:13:19,930
to we can either copy it or drag and drop it.

187
00:13:19,930 --> 00:13:22,720
Let's copy these and then paste this here.

188
00:13:23,230 --> 00:13:28,900
And I'm allowed to do that because this Nautilus window is in the pseudo mode or administrative mode,

189
00:13:28,900 --> 00:13:35,110
and we are manipulating the file system not from our user account or home directory, but directly from

190
00:13:35,110 --> 00:13:36,490
the root of the file system.

191
00:13:36,640 --> 00:13:41,860
You are only allowed to do it if you had administrative rights or privileges, which means you have

192
00:13:41,860 --> 00:13:45,430
to use the event file explorer in the administrative mode.

193
00:13:45,430 --> 00:13:45,910
Right.

194
00:13:47,230 --> 00:13:47,830
All right.

195
00:13:47,830 --> 00:13:56,650
And now I'm going to go back to my home directory and then let's look at the hidden files and then let's

196
00:13:56,650 --> 00:13:58,330
look at our bash, RC.

197
00:13:59,260 --> 00:14:01,450
And open with a text editor.

198
00:14:02,920 --> 00:14:07,720
And I'm going to modify my bachelor RC.

199
00:14:10,710 --> 00:14:11,850
So where is that?

200
00:14:11,880 --> 00:14:13,290
Here's the batch, RC.

201
00:14:18,580 --> 00:14:21,580
And what I'm going to do.

202
00:14:21,610 --> 00:14:25,930
This has my virtual machine has frozen.

203
00:14:27,220 --> 00:14:28,400
I'm not sure why.

204
00:14:30,090 --> 00:14:31,440
This works fine.

205
00:14:32,590 --> 00:14:32,860
All right.

206
00:14:32,860 --> 00:14:36,730
Now it's on Frozen, so 22.1.

207
00:14:36,850 --> 00:14:38,950
So we're going to say 22.2.

208
00:14:38,950 --> 00:14:39,970
1.0.

209
00:14:40,000 --> 00:14:40,600
Right.

210
00:14:41,080 --> 00:14:42,490
So grab LLVM.

211
00:14:42,490 --> 00:14:48,370
So live JVM grab VMC Java 1720 2.1.0.

212
00:14:48,370 --> 00:14:48,820
Right.

213
00:14:48,910 --> 00:14:51,880
So we save this and enclose.

214
00:14:51,880 --> 00:14:54,400
We don't need this administrative net loss anymore.

215
00:14:54,400 --> 00:14:58,360
We can close the terminal again and then we're going to open it again.

216
00:15:00,350 --> 00:15:03,050
And then I check if everything's set up correctly.

217
00:15:03,050 --> 00:15:06,230
Remember, our JDC is now set to grow.

218
00:15:06,240 --> 00:15:08,150
LLVM JDC which should be open.

219
00:15:08,150 --> 00:15:09,740
JDC And we can check.

220
00:15:09,770 --> 00:15:18,740
So Java, hyphen, hyphen, virgin and Open JDK 17 and then open JDK Runtime VM Community Edition 20

221
00:15:18,740 --> 00:15:19,520
210.

222
00:15:19,520 --> 00:15:22,460
So this is the newest version that we just installed.

223
00:15:22,640 --> 00:15:28,380
Previously I had 22.01 and now it's 20 2.1.0.

224
00:15:28,400 --> 00:15:28,850
Right?

225
00:15:28,850 --> 00:15:30,930
So this is the new version of LLVM.

226
00:15:30,950 --> 00:15:37,730
Same with Java C hyphen, hyphen version, and it's JDK 17.

227
00:15:37,730 --> 00:15:44,300
And we can say because we added the being directory of the environment variable or the Google home,

228
00:15:44,450 --> 00:15:47,870
then we should directly have access to Google Updater, right?

229
00:15:47,870 --> 00:15:50,390
So go hyphen, hyphen version.

230
00:15:52,330 --> 00:15:56,330
And it's updated 20 210, which is the correct version.

231
00:15:56,350 --> 00:16:04,000
If I say native dot dash image, it's not going to find it because or I could say Google Home is slash

232
00:16:04,000 --> 00:16:06,040
being a slash native image.

233
00:16:06,460 --> 00:16:09,610
It's not going to basically command not found.

234
00:16:09,610 --> 00:16:10,000
Right.

235
00:16:10,000 --> 00:16:15,000
So what we need to do because the native image tool doesn't come by default with the Google VM.

236
00:16:15,010 --> 00:16:23,230
So we have to basically say Google home, a slash been a slash g, you use the Google Updater, but

237
00:16:23,230 --> 00:16:29,470
because this being directory from Google home is already under path, we could just directly type juju

238
00:16:29,470 --> 00:16:30,370
or Google updated.

239
00:16:30,370 --> 00:16:34,900
But here I'm going to be explicit so that you know that we're using the Google updated from the Bing

240
00:16:34,900 --> 00:16:38,860
directory and then we say install and then native dash image.

241
00:16:39,190 --> 00:16:39,730
Right.

242
00:16:40,750 --> 00:16:42,550
And it says insufficient privileges.

243
00:16:42,550 --> 00:16:48,700
The reason is that this being directory of the Google Home is not in related to my home directory.

244
00:16:48,700 --> 00:16:49,180
Right.

245
00:16:49,180 --> 00:16:52,960
It's related to the root file system which is in the Lib JVM.

246
00:16:52,960 --> 00:16:55,540
So we kind of need to run it in pseudo mode.

247
00:16:55,540 --> 00:17:02,320
Sudo and then Google home a slash being a slash juju.

248
00:17:02,320 --> 00:17:02,830
Right.

249
00:17:02,830 --> 00:17:08,650
I'm putting in double code to make sure that nothing goes wrong and then install a native image.

250
00:17:08,650 --> 00:17:15,220
We give it the password and it's going to reach out to the git repository, download the native image

251
00:17:15,220 --> 00:17:16,870
tool and then install it.

252
00:17:16,870 --> 00:17:24,190
So installing new component and native image from for the version 22.106 is fully installed and now

253
00:17:24,190 --> 00:17:32,620
we can check it using Google home being four slash native image hyphen hyphen version and grow LLVM

254
00:17:32,620 --> 00:17:39,850
22.10 Java 17 So the native image has been successfully installed and again note that I could also directly

255
00:17:39,850 --> 00:17:47,650
type native image a hyphen hyphen version because the being directory of the Google home is on my path,

256
00:17:47,650 --> 00:17:48,100
right?

257
00:17:48,100 --> 00:17:56,860
So let's quickly create a new basically Java file hello world and then compile it to native executable

258
00:17:56,860 --> 00:17:58,990
binary to make sure that everything works fine.

259
00:18:00,740 --> 00:18:03,860
So we could.

260
00:18:03,980 --> 00:18:05,930
Let's go into the desktop.

261
00:18:06,200 --> 00:18:08,270
And then we have this text.

262
00:18:08,540 --> 00:18:09,680
Actually, we don't need.

263
00:18:09,890 --> 00:18:10,520
Let's just.

264
00:18:11,840 --> 00:18:13,070
Let's say touch.

265
00:18:14,810 --> 00:18:16,500
Hello, world dot java.

266
00:18:16,520 --> 00:18:22,940
So we're going to create a empty file here and then open it with the text editor.

267
00:18:23,760 --> 00:18:32,250
Um, let's open this text editor here and open the file from our desktop, which is Java HELLOWORLD

268
00:18:32,370 --> 00:18:33,060
Java.

269
00:18:33,810 --> 00:18:38,220
And I'm going to try to increase the font size.

270
00:18:38,220 --> 00:18:39,390
Let's see.

271
00:18:39,990 --> 00:18:43,350
Preferences and then editor font.

272
00:18:44,460 --> 00:18:46,140
Use the system.

273
00:18:46,140 --> 00:18:47,280
Let's go.

274
00:18:47,280 --> 00:18:48,210
15.

275
00:18:49,050 --> 00:18:49,740
Okay.

276
00:18:50,850 --> 00:18:53,310
And then we're not going to put it in any package.

277
00:18:53,310 --> 00:18:55,800
So we're just going to say public class.

278
00:18:56,310 --> 00:18:57,760
Public class.

279
00:18:57,870 --> 00:18:59,070
Hello, world.

280
00:18:59,550 --> 00:19:00,260
All right.

281
00:19:00,270 --> 00:19:06,620
And then here we're going to say that public static void man a string array args.

282
00:19:06,630 --> 00:19:07,230
Right.

283
00:19:07,410 --> 00:19:13,230
And then here we're going to just say that system dot out dot print line.

284
00:19:13,260 --> 00:19:16,950
Hello world from Java in Linux.

285
00:19:16,950 --> 00:19:20,310
All right, so semicolon, everything looks good.

286
00:19:20,310 --> 00:19:22,320
And then right now we are in the desktop.

287
00:19:22,320 --> 00:19:28,140
So obviously first need we need to compile Java C and in the class path, we don't need to specify the

288
00:19:28,140 --> 00:19:32,940
class path because our this class doesn't have any dependency and it's just one file.

289
00:19:32,940 --> 00:19:38,010
So by default this class pass is the current working directory and we are already in the desktop.

290
00:19:38,010 --> 00:19:48,000
So writing hyphen, CP dot is optional and then we're going to say hello World Java and it's going to

291
00:19:48,090 --> 00:19:51,780
hopefully successfully compile and then we get the hello of all that class.

292
00:19:51,780 --> 00:20:00,930
And after that the only thing that remains is that first of all, we can make sure that our Hello World

293
00:20:01,050 --> 00:20:02,370
application works fine.

294
00:20:02,370 --> 00:20:03,810
So let's see.

295
00:20:03,840 --> 00:20:11,250
Hello World from Java in Linux so the JVM can successfully launch and now we type native image hyphen

296
00:20:11,280 --> 00:20:13,710
cpp, hyphen CPP current directory.

297
00:20:13,710 --> 00:20:18,630
And then what's the name of the class that we want to compile?

298
00:20:18,630 --> 00:20:18,900
Hello.

299
00:20:18,990 --> 00:20:24,180
All right, remember, you don't give the name of the Java file name, you give the name of the class.

300
00:20:24,180 --> 00:20:24,630
Right.

301
00:20:24,780 --> 00:20:26,550
And then we launch this.

302
00:20:27,000 --> 00:20:32,370
And by default, if you don't specify the name for the output application or output executable, it's

303
00:20:32,370 --> 00:20:36,780
going to have the name of the class in lowercase letters.

304
00:20:36,780 --> 00:20:39,300
So it's trying to compile again, it's virtual machine.

305
00:20:39,300 --> 00:20:44,820
So it's going to be a little bit slow, but this is a very simple application, so hopefully it's going

306
00:20:44,820 --> 00:20:45,330
to.

307
00:20:47,250 --> 00:20:49,140
Compile soon.

308
00:20:50,950 --> 00:20:51,760
At See?

309
00:20:53,070 --> 00:20:56,100
So great beam native image generating Halo Vault.

310
00:20:56,130 --> 00:20:59,010
This is the name of the application, which is the name of the class.

311
00:20:59,010 --> 00:21:01,860
All in lower letters and it's executable.

312
00:21:01,890 --> 00:21:02,490
Right.

313
00:21:02,920 --> 00:21:08,170
And and it also you can click on this.

314
00:21:08,190 --> 00:21:13,580
It takes you to the address that gives you more build output that.

315
00:21:13,890 --> 00:21:17,370
So it gives you all the details necessary that what this means.

316
00:21:17,460 --> 00:21:24,790
C compiler so virgin LLVM 22 C Compiler gcc garbage collector serial GCC.

317
00:21:24,810 --> 00:21:32,340
Now I will show you the in the future lectures that basically how to change this option.

318
00:21:32,340 --> 00:21:37,250
Let's say you want to compile your application to use a different garbage collector, maybe.

319
00:21:37,440 --> 00:21:43,350
GC Right, but note that in my case when I compiled this, it didn't show these lines just because these

320
00:21:43,350 --> 00:21:48,240
lines like Virgin Info C Compiler Garbage Collector were added in the most recent version, which is

321
00:21:48,240 --> 00:21:50,030
20 2.1.0.

322
00:21:50,190 --> 00:21:58,610
So if I go to my Mac OS library, Java, Java virtual machines, I was using 22.02.

323
00:21:58,620 --> 00:21:59,790
So I will go ahead.

324
00:21:59,790 --> 00:22:05,220
And also in macros, install the latest version which is 20 2.1.0.

325
00:22:05,250 --> 00:22:08,630
Later after after we are finished here.

326
00:22:08,640 --> 00:22:13,260
So as you can see again, it's going slow just because it's in a virtual machine.

327
00:22:14,550 --> 00:22:21,840
But the fact that in the initialization stage, it's showing me that it was able to find a graph VM

328
00:22:21,840 --> 00:22:25,050
application, all the necessary tools from the global VM.

329
00:22:25,890 --> 00:22:26,370
All right.

330
00:22:26,370 --> 00:22:28,260
Why do we have this software update?

331
00:22:28,290 --> 00:22:31,080
No, let's let's cancel that.

332
00:22:31,170 --> 00:22:33,210
So it performed the analysis.

333
00:22:33,210 --> 00:22:38,550
It found all the classes necessary to successfully launch our Java application, and most of them are

334
00:22:38,550 --> 00:22:42,780
from four 3845 classes.

335
00:22:42,780 --> 00:22:46,530
Almost all of them are from from JDK.

336
00:22:46,530 --> 00:22:46,820
Right.

337
00:22:46,830 --> 00:22:50,370
Our application only has one user defined class.

338
00:22:50,520 --> 00:22:54,690
So building universe done parsing methods done in lining method.

339
00:22:54,690 --> 00:23:01,560
So as I mentioned before, in lining is a compiler optimization and then compiling methods.

340
00:23:01,560 --> 00:23:03,000
So it's compiling them.

341
00:23:03,000 --> 00:23:05,970
So this is the main phase, I believe for the compilation.

342
00:23:05,970 --> 00:23:12,180
And after this we are basically done and our application is going to be ready to be launched.

343
00:23:12,180 --> 00:23:12,660
Right.

344
00:23:15,110 --> 00:23:20,000
So again, on the Vision Machine, the compilation is taking some time.

345
00:23:20,960 --> 00:23:26,030
It also depends on how many how much resources you allocate to your virtual machine, like how many

346
00:23:26,030 --> 00:23:27,790
CPU cores, how much RAM.

347
00:23:27,800 --> 00:23:32,780
But previously we saw that on my main operating system, right on macOS.

348
00:23:32,780 --> 00:23:34,450
The compilation was very fast.

349
00:23:34,460 --> 00:23:36,400
If your application is small, right?

350
00:23:36,410 --> 00:23:38,930
If you have a couple of classes, it's very fast.

351
00:23:41,280 --> 00:23:43,500
So let's wait for these to finish.

352
00:23:43,530 --> 00:23:45,790
I am going to go back to our PowerPoints.

353
00:23:45,810 --> 00:23:50,110
And again, to recap, we define the girl home live JVM girl home.

354
00:23:50,130 --> 00:23:50,710
See?

355
00:23:50,730 --> 00:23:55,290
So in Linux, you have to go to the root directory, you go to Lib and then JVM.

356
00:23:55,830 --> 00:24:04,380
And again, the most recent version of the VM at the time of recording this lecture is 22.2 1.0.

357
00:24:04,830 --> 00:24:10,650
And then the recommendation is to add the Google home as a global environment variable.

358
00:24:11,400 --> 00:24:16,860
Now if you want to add the Bing directory of the Google home and then the native image is also available,

359
00:24:16,860 --> 00:24:19,500
and again, you have to use the Google Updater.

360
00:24:19,500 --> 00:24:25,950
After you download the Google VM, you have to use the Google updated command line tool with the install

361
00:24:25,950 --> 00:24:28,710
option and separately install the native image.

362
00:24:28,710 --> 00:24:29,040
Right?

363
00:24:29,040 --> 00:24:35,370
And then you are all set up and as you can see, we are done with compilation here and it tells me that

364
00:24:35,370 --> 00:24:40,710
it created a executable called Hello World in my desktop.

365
00:24:41,040 --> 00:24:47,340
So and we are already in the desktop so we can say dot forward slash hello world.

366
00:24:47,370 --> 00:24:53,370
As I mentioned before in Unix based operating system like Mac OS and Linux, the current directory is

367
00:24:53,370 --> 00:24:57,720
not added to the path environment variable by default.

368
00:24:57,720 --> 00:25:02,700
So if you have a executable application in the current directory, you should always tell it dot forward

369
00:25:02,700 --> 00:25:03,000
slash.

370
00:25:03,000 --> 00:25:03,450
Right.

371
00:25:03,480 --> 00:25:09,270
So if I if you don't specify that as I mentioned, the rule in terminal inside when you type the name

372
00:25:09,630 --> 00:25:15,720
the terminal assumes that this is the name of an executable binary that it has to find.

373
00:25:15,720 --> 00:25:17,490
And right now it doesn't find it.

374
00:25:17,490 --> 00:25:19,800
And fish is actually very intelligent.

375
00:25:19,830 --> 00:25:22,920
It highlights it in red saying that I couldn't find it right.

376
00:25:23,190 --> 00:25:27,480
When it can fish, when it can't find an application, it highlights in blue.

377
00:25:27,510 --> 00:25:32,940
So if I say forward slash hello world fish tells me that this is OC and if I run it it says Hello World

378
00:25:32,940 --> 00:25:39,600
from Java in Linux and we fully compiled our simple class file into a native executable binary for the

379
00:25:39,600 --> 00:25:44,430
Linux operating system and the Intel 64 bit.

380
00:25:44,430 --> 00:25:44,880
Right.

381
00:25:45,090 --> 00:25:51,990
And one last thing, obviously, we can also accept a command line arguments, but I'm not going to

382
00:25:51,990 --> 00:25:55,740
do it because that requires re compilation and that probably takes some time.

383
00:25:55,740 --> 00:26:01,500
But you will see the idea and as I mentioned, the information is kind of is highlighted.

384
00:26:01,500 --> 00:26:07,530
So for example, if we say garbage collector and click on it, let's see what happens.

385
00:26:09,260 --> 00:26:10,970
Open hyperlink.

386
00:26:11,960 --> 00:26:20,570
Is it going to open it in Firefox or we could just copy that hyperlink and go ahead and open that link.

387
00:26:21,590 --> 00:26:25,940
I believe my virtual machine is a little bit slow, but you see the idea, you can click on this and

388
00:26:25,940 --> 00:26:30,800
it's interesting that in the recent version they added this information to tell you which compiler it's

389
00:26:30,800 --> 00:26:37,970
actually using to to to compile your application to Java application and which garbage collector it's

390
00:26:37,970 --> 00:26:38,300
using.

391
00:26:38,300 --> 00:26:38,750
Right.

392
00:26:40,080 --> 00:26:45,390
So the firefights just opened up and still not that much responsive.

393
00:26:45,390 --> 00:26:47,610
And that's because of my virtual machine.

394
00:26:47,610 --> 00:26:49,650
So I hope you really enjoy this lecture.

395
00:26:50,250 --> 00:26:52,950
Please stay tuned and I'll see the next one.
