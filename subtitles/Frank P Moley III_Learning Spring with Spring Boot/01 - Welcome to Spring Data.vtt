WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Usually one of the first projects

2
00:00:02.004 --> 00:00:05.002
Spring developers touch is Spring Data.

3
00:00:05.002 --> 00:00:09.002
And for a good reason, one of the biggest boilerplate areas

4
00:00:09.002 --> 00:00:13.005
of software is in data access and Spring Data

5
00:00:13.005 --> 00:00:18.003
makes data access very easy in most cases.

6
00:00:18.003 --> 00:00:22.001
So what is Spring Data at its core?

7
00:00:22.001 --> 00:00:27.009
It provides a common set of interfaces based on JPA.

8
00:00:27.009 --> 00:00:30.008
These interfaces leverage convention

9
00:00:30.008 --> 00:00:34.004
around method naming to derive data access behavior

10
00:00:34.004 --> 00:00:39.003
using JPA and the Hibernate implementation of it.

11
00:00:39.003 --> 00:00:42.006
This behavior is aspected, which in practice results

12
00:00:42.006 --> 00:00:45.007
in you simply writing an interface

13
00:00:45.007 --> 00:00:47.005
and allowing the code to be handled

14
00:00:47.005 --> 00:00:51.002
by Spring through the use of aspects.

15
00:00:51.002 --> 00:00:55.000
Yes, you write just an interface.

16
00:00:55.000 --> 00:00:57.007
If you have ever written JDBC access code

17
00:00:57.007 --> 00:00:59.007
this is a game changer.

18
00:00:59.007 --> 00:01:03.003
Now, you can still use raw JDBC code

19
00:01:03.003 --> 00:01:05.005
with Spring when it comes to queries

20
00:01:05.005 --> 00:01:08.003
and results set mappings, if you want.

21
00:01:08.003 --> 00:01:13.000
But Spring will handle the connection and tear down for you.

22
00:01:13.000 --> 00:01:14.008
I tend to be in a minority, however,

23
00:01:14.008 --> 00:01:18.003
when it comes to liking raw data access code.

24
00:01:18.003 --> 00:01:22.002
So most developers stop at the interface.

25
00:01:22.002 --> 00:01:25.007
Just know if you need it, it is there.

26
00:01:25.007 --> 00:01:27.007
I have a whole course on JDBC

27
00:01:27.007 --> 00:01:29.004
in the LinkedIn learning library,

28
00:01:29.004 --> 00:01:33.009
if you're feeling adventurous about digging into it.

29
00:01:33.009 --> 00:01:36.008
Now, in addition to behavior, Spring Data provides

30
00:01:36.008 --> 00:01:39.003
the repository pattern natively

31
00:01:39.003 --> 00:01:41.005
and includes data mapping conventions

32
00:01:41.005 --> 00:01:45.003
to translate results sets to entity objects,

33
00:01:45.003 --> 00:01:49.002
much as you would see with JPA and Hibernate.

34
00:01:49.002 --> 00:01:52.000
There are several key benefits of Spring Data,

35
00:01:52.000 --> 00:01:55.003
and I've touched on some of these in the course already,

36
00:01:55.003 --> 00:01:58.000
but before we really get into the code

37
00:01:58.000 --> 00:02:01.001
I think it's worth mentioning them again.

38
00:02:01.001 --> 00:02:04.005
Spring Data removes a lot of the boilerplate code.

39
00:02:04.005 --> 00:02:07.006
I encourage you to do a quick Google search

40
00:02:07.006 --> 00:02:13.007
on how to make a JDBC call using raw Java, I'll wait.

41
00:02:13.007 --> 00:02:17.005
Now, do that before we get deep into the code

42
00:02:17.005 --> 00:02:20.007
because you will immediately see it's reduction

43
00:02:20.007 --> 00:02:25.000
in boilerplate code if you have a reference point.

44
00:02:25.000 --> 00:02:26.009
One cool aspect of Spring Data,

45
00:02:26.009 --> 00:02:29.002
at least for me as an architect,

46
00:02:29.002 --> 00:02:32.005
is that I can use local or embedded data sources

47
00:02:32.005 --> 00:02:36.007
while working on a POC and very easily swap it

48
00:02:36.007 --> 00:02:40.001
to a production data source without much work.

49
00:02:40.001 --> 00:02:42.001
This ability to swap data sources

50
00:02:42.001 --> 00:02:47.001
also makes data migration significantly easier.

51
00:02:47.001 --> 00:02:49.002
All of this, as you have heard already,

52
00:02:49.002 --> 00:02:52.001
allows you to focus on the business logic.

53
00:02:52.001 --> 00:02:54.008
And that is what is, most likely,

54
00:02:54.008 --> 00:02:59.006
the most important thing to you and your boss.

55
00:02:59.006 --> 00:03:02.001
Now, there are only a couple of key components

56
00:03:02.001 --> 00:03:04.005
that you need to understand with Spring Data,

57
00:03:04.005 --> 00:03:07.006
again, adding to its value proposition.

58
00:03:07.006 --> 00:03:10.001
The repository interface is, by far,

59
00:03:10.001 --> 00:03:12.006
the one you will leverage the most.

60
00:03:12.006 --> 00:03:16.005
A Spring Data repository, regardless of if it's based

61
00:03:16.005 --> 00:03:21.003
on an RDBMS system or a NoSQL system provides

62
00:03:21.003 --> 00:03:24.007
the methods needed to access the data.

63
00:03:24.007 --> 00:03:26.006
It is built using an extension

64
00:03:26.006 --> 00:03:30.000
of a Spring class and generics.

65
00:03:30.000 --> 00:03:32.001
We will get into the details here in a bit

66
00:03:32.001 --> 00:03:34.005
but, for now, just understand it is

67
00:03:34.005 --> 00:03:37.001
an interface that leverages proxies

68
00:03:37.001 --> 00:03:40.007
to build the actual base CRUD methods.

69
00:03:40.007 --> 00:03:42.008
Now, you can decorate this interface

70
00:03:42.008 --> 00:03:45.002
with conventionally named methods

71
00:03:45.002 --> 00:03:48.000
to drive different queries for your data,

72
00:03:48.000 --> 00:03:53.003
again, without any SQL, or data access code.

73
00:03:53.003 --> 00:03:57.005
The entity object is the DTO for the data layer.

74
00:03:57.005 --> 00:04:00.007
It is mapped using JPA to the table structure

75
00:04:00.007 --> 00:04:02.009
of the underlying data source.

76
00:04:02.009 --> 00:04:05.004
You can leverage joins through entities,

77
00:04:05.004 --> 00:04:09.002
if you are using RDBMS.

78
00:04:09.002 --> 00:04:12.006
The data source itself is not usually accessed

79
00:04:12.006 --> 00:04:14.009
in code with Spring Data unless

80
00:04:14.009 --> 00:04:17.005
you are using JDBC templates.

81
00:04:17.005 --> 00:04:22.001
But it is what you configure through your properties

82
00:04:22.001 --> 00:04:24.008
or allow to be auto configured by Spring Boot,

83
00:04:24.008 --> 00:04:28.001
if that is the case so even though you may not interact

84
00:04:28.001 --> 00:04:32.000
with it you are using it consistently throughout your code.

