WEBVTT
1
00:00:00.000 --> 00:00:01.000
- [Instructor] We have built

2
00:00:01.000 --> 00:00:02.007
some data access code to leverage

3
00:00:02.007 --> 00:00:05.004
the power of Spring in accessing data.

4
00:00:05.004 --> 00:00:07.000
Now it's time to start leveraging

5
00:00:07.000 --> 00:00:10.003
the IoC container to actually use it.

6
00:00:10.003 --> 00:00:13.009
Now our little Util program is already using it,

7
00:00:13.009 --> 00:00:17.009
but let's talk about the details of IoC.

8
00:00:17.009 --> 00:00:20.002
So other than answering because Spring does,

9
00:00:20.002 --> 00:00:21.004
I want to talk about

10
00:00:21.004 --> 00:00:24.005
why we should use IoC in general,

11
00:00:24.005 --> 00:00:25.008
and then specifically,

12
00:00:25.008 --> 00:00:28.003
why we should use it with Spring.

13
00:00:28.003 --> 00:00:29.004
So first and foremost,

14
00:00:29.004 --> 00:00:32.000
the IoC container allows you to focus

15
00:00:32.000 --> 00:00:35.005
on the contracts of the interfaces you consume

16
00:00:35.005 --> 00:00:37.005
instead of dealing with the construction,

17
00:00:37.005 --> 00:00:40.004
and management of objects.

18
00:00:40.004 --> 00:00:44.001
It allows you to develop business code only.

19
00:00:44.001 --> 00:00:46.001
Leaving all object construction

20
00:00:46.001 --> 00:00:49.004
to the container itself.

21
00:00:49.004 --> 00:00:52.001
You build intermediate abstractions

22
00:00:52.001 --> 00:00:54.008
in the layers in order to do business,

23
00:00:54.008 --> 00:00:56.009
and share code as appropriate,

24
00:00:56.009 --> 00:00:59.004
and the IoC handles those

25
00:00:59.004 --> 00:01:02.005
intermediate abstractions being dependencies

26
00:01:02.005 --> 00:01:04.008
where necessary.

27
00:01:04.008 --> 00:01:06.001
This will allow you to produce

28
00:01:06.001 --> 00:01:08.004
very, very clean code.

29
00:01:08.004 --> 00:01:09.009
The dependency comes in,

30
00:01:09.009 --> 00:01:12.003
we utilize the dependency in the business method

31
00:01:12.003 --> 00:01:15.000
as it is needed.

32
00:01:15.000 --> 00:01:16.007
So if you haven't picked up yet,

33
00:01:16.007 --> 00:01:19.000
Spring leverages IoC and all that it does.

34
00:01:19.000 --> 00:01:20.008
So let's talk a little bit

35
00:01:20.008 --> 00:01:23.002
about how it works now.

36
00:01:23.002 --> 00:01:24.001
Now first of all,

37
00:01:24.001 --> 00:01:28.004
the IoC container is configured by the developer.

38
00:01:28.004 --> 00:01:31.002
You may have a Legacy XML configuration.

39
00:01:31.002 --> 00:01:34.002
You may see newer Java configuration

40
00:01:34.002 --> 00:01:36.004
with or without component scanning,

41
00:01:36.004 --> 00:01:39.008
and we also have auto configuration.

42
00:01:39.008 --> 00:01:41.009
As the BeanFactory starts up,

43
00:01:41.009 --> 00:01:46.002
Spring skins every bean that will be configured,

44
00:01:46.002 --> 00:01:49.003
and creates an initialization,

45
00:01:49.003 --> 00:01:51.003
and handled to that initialization

46
00:01:51.003 --> 00:01:54.003
in the BeanFactory itself.

47
00:01:54.003 --> 00:01:57.000
Spring then builds a graph of the order

48
00:01:57.000 --> 00:01:59.003
beans must be constructed.

49
00:01:59.003 --> 00:02:01.007
It then goes through a multi-step process

50
00:02:01.007 --> 00:02:05.002
to construct the objects themselves.

51
00:02:05.002 --> 00:02:07.002
Now, during this process,

52
00:02:07.002 --> 00:02:09.002
Singleton instances of the objects

53
00:02:09.002 --> 00:02:12.006
are created and injected as needed

54
00:02:12.006 --> 00:02:14.007
during object construction,

55
00:02:14.007 --> 00:02:16.000
or immediately after,

56
00:02:16.000 --> 00:02:17.005
depending on how dependencies

57
00:02:17.005 --> 00:02:21.007
were defined specifically via setters.

58
00:02:21.007 --> 00:02:24.003
Now Spring maintains the life cycle

59
00:02:24.003 --> 00:02:26.005
of the beans from start to finish,

60
00:02:26.005 --> 00:02:29.004
unless they are scoped not to be.

61
00:02:29.004 --> 00:02:31.006
Now scope isn't something that we will discuss

62
00:02:31.006 --> 00:02:33.001
in this course,

63
00:02:33.001 --> 00:02:36.003
but we do a lot in Spring framework in-depth,

64
00:02:36.003 --> 00:02:38.001
as well as the actual start-up

65
00:02:38.001 --> 00:02:40.004
of the IoC container

66
00:02:40.004 --> 00:02:43.006
in significantly more detail.

67
00:02:43.006 --> 00:02:44.006
But in this course,

68
00:02:44.006 --> 00:02:47.004
just know that everything that we are using

69
00:02:47.004 --> 00:02:48.007
is a Singleton,

70
00:02:48.007 --> 00:02:53.000
meaning thread safety is very important.

71
00:02:53.000 --> 00:02:55.000
And remember that the developer

72
00:02:55.000 --> 00:02:58.008
only has access to the application context,

73
00:02:58.008 --> 00:03:01.000
not the raw BeanFactory.

