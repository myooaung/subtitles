WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] As promised in the last video,

2
00:00:02.000 --> 00:00:04.004
now it's time to use Thymeleaf.

3
00:00:04.004 --> 00:00:05.007
Now we're going to touch

4
00:00:05.007 --> 00:00:09.005
just a very, very small part of Thymeleaf.

5
00:00:09.005 --> 00:00:12.002
I encourage you to read the documentation,

6
00:00:12.002 --> 00:00:14.000
it's actually fantastic,

7
00:00:14.000 --> 00:00:17.004
on how to use Thymeleaf most effectively.

8
00:00:17.004 --> 00:00:20.008
I'm also going to warn you before we jump into the UI here

9
00:00:20.008 --> 00:00:24.004
that I am not a UI developer, I am not a designer.

10
00:00:24.004 --> 00:00:26.007
This is not going to be pretty.

11
00:00:26.007 --> 00:00:28.006
This will get the job done,

12
00:00:28.006 --> 00:00:30.001
but I don't want to make any qualms

13
00:00:30.001 --> 00:00:32.007
that this is a production ready page

14
00:00:32.007 --> 00:00:33.009
by any sense of the work,

15
00:00:33.009 --> 00:00:37.004
because I am not very good at designing web pages.

16
00:00:37.004 --> 00:00:40.001
I'm good at designing web services.

17
00:00:40.001 --> 00:00:44.001
So with that being said, time to hit the IDE.

18
00:00:44.001 --> 00:00:47.007
The first thing that we need to do is open up our pom file,

19
00:00:47.007 --> 00:00:50.007
and we're going to create a new dependency

20
00:00:50.007 --> 00:00:55.004
and that dependency is spring-boot-starter-thymeleaf

21
00:00:55.004 --> 00:00:59.001
from org.springframework.boot.

22
00:00:59.001 --> 00:01:03.003
We will run Maven.

23
00:01:03.003 --> 00:01:06.005
Now with Thymeleaf back in the day before Spring Boot,

24
00:01:06.005 --> 00:01:08.006
we used to have to do a lot of configuration

25
00:01:08.006 --> 00:01:10.008
to tell it where the templates were,

26
00:01:10.008 --> 00:01:14.002
what file extensions to strip off of the names,

27
00:01:14.002 --> 00:01:15.008
things like that.

28
00:01:15.008 --> 00:01:18.008
With Spring Boot, we have to do none of that.

29
00:01:18.008 --> 00:01:22.001
We simply have to go to source main resources

30
00:01:22.001 --> 00:01:23.006
and in our template folder,

31
00:01:23.006 --> 00:01:25.007
we're going to create a new file.

32
00:01:25.007 --> 00:01:28.003
And I'm going to cheat a little bit and use the HTML file

33
00:01:28.003 --> 00:01:30.005
that I get from my IDE.

34
00:01:30.005 --> 00:01:32.006
You can do this with a plain file.

35
00:01:32.006 --> 00:01:36.003
Ultimately, we're going to create a file called roomrez,

36
00:01:36.003 --> 00:01:39.003
which is the string that we returned from our controller,

37
00:01:39.003 --> 00:01:42.004
that is an HTML file.

38
00:01:42.004 --> 00:01:43.007
All right, so the first thing we need to do

39
00:01:43.007 --> 00:01:49.005
is go to the HTML tag and we need to put an XML namespace.

40
00:01:49.005 --> 00:01:52.004
We're going to call it TH

41
00:01:52.004 --> 00:02:01.005
and it is at HTTP://www.thymeleaf.org.

42
00:02:01.005 --> 00:02:06.004
I put one too many double quotes there, let me fix that.

43
00:02:06.004 --> 00:02:09.004
Now we are going to create a title

44
00:02:09.004 --> 00:02:17.000
and the title is going to be Landon hotel room reservations.

45
00:02:17.000 --> 00:02:21.000
We will put an H1 tag in here

46
00:02:21.000 --> 00:02:27.001
and just say, welcome to the reservations page.

47
00:02:27.001 --> 00:02:29.004
And now we're going to put a table

48
00:02:29.004 --> 00:02:31.006
and this is where we're going to really get into the Thymeleaf.

49
00:02:31.006 --> 00:02:35.002
So be sure you pay attention to what we're doing,

50
00:02:35.002 --> 00:02:41.000
but before we get there, let's put in a few headers.

51
00:02:41.000 --> 00:02:46.005
So we're going to spit out a room, a room number

52
00:02:46.005 --> 00:02:49.007
and a guest.

53
00:02:49.007 --> 00:02:51.006
We'll create another row.

54
00:02:51.006 --> 00:02:55.009
But this time we're going to do a Thymeleaf each

55
00:02:55.009 --> 00:03:00.001
and this is how you iterate over items in Thymeleaf.

56
00:03:00.001 --> 00:03:05.006
So we're going to get an instance of a room reservation

57
00:03:05.006 --> 00:03:08.006
and notice these are strings and not objects.

58
00:03:08.006 --> 00:03:12.002
So it doesn't really know what a room reservation is.

59
00:03:12.002 --> 00:03:14.008
It just is expecting that there will be an element

60
00:03:14.008 --> 00:03:18.003
that is a room reservation that we're going to do work with.

61
00:03:18.003 --> 00:03:21.005
So we will get a room reservation,

62
00:03:21.005 --> 00:03:25.004
and we're going to get that from some element

63
00:03:25.004 --> 00:03:31.000
called room reservations that comes from the model.

64
00:03:31.000 --> 00:03:32.007
Pretty straightforward.

65
00:03:32.007 --> 00:03:35.008
It says, create an instance of some object from the model,

66
00:03:35.008 --> 00:03:38.009
call it room reservation, and then do something with it.

67
00:03:38.009 --> 00:03:40.007
And that thing that we're going to do

68
00:03:40.007 --> 00:03:44.001
is we're going to populate our actual cells

69
00:03:44.001 --> 00:03:46.004
and we're going to do it with text.

70
00:03:46.004 --> 00:03:49.000
So we will do TH text

71
00:03:49.000 --> 00:03:51.008
and this is going to come from our model,

72
00:03:51.008 --> 00:03:56.000
but this time it's the iteration from within there.

73
00:03:56.000 --> 00:04:06.000
So we are going to do room reservation in curly braces.

74
00:04:06.000 --> 00:04:11.004
And then we will do room name as the actual element name.

75
00:04:11.004 --> 00:04:14.003
And I'll get to explain that here in just a moment.

76
00:04:14.003 --> 00:04:17.004
For the meantime, let's go through

77
00:04:17.004 --> 00:04:19.004
and finish up the rest of this.

78
00:04:19.004 --> 00:04:30.004
So roomReservation.roomNumber.

79
00:04:30.004 --> 00:04:32.009
And the final one is a little bit more complex.

80
00:04:32.009 --> 00:04:35.008
One of the cool things about Thymeleaf

81
00:04:35.008 --> 00:04:40.007
is that we can actually put into our Thymeleaf, logic.

82
00:04:40.007 --> 00:04:47.003
So we're going to say roomReservation.lastName.

83
00:04:47.003 --> 00:04:52.008
So if our last name does not equal null,

84
00:04:52.008 --> 00:04:55.009
and we'll put it in a ternary operator here.

85
00:04:55.009 --> 00:04:58.002
So if it does not equal null,

86
00:04:58.002 --> 00:05:06.000
the value is roomReservation.lastName,

87
00:05:06.000 --> 00:05:14.003
plus we'll do a single tick, a comma, a space, another plus.

88
00:05:14.003 --> 00:05:16.001
And in this element,

89
00:05:16.001 --> 00:05:23.000
we will put roomReservation.firstName.

90
00:05:23.000 --> 00:05:28.002
So if we are not null, put in last name, comma, first name.

91
00:05:28.002 --> 00:05:34.005
Otherwise, simply print the word vacant.

92
00:05:34.005 --> 00:05:37.002
And now we will just put a tag of guests here.

93
00:05:37.002 --> 00:05:40.007
Now you'll notice that we put these elements in ourselves,

94
00:05:40.007 --> 00:05:43.000
even though we know we've got dynamic data.

95
00:05:43.000 --> 00:05:45.008
The reason that we do that is if you open this page up

96
00:05:45.008 --> 00:05:49.008
in a browser without the website actually running,

97
00:05:49.008 --> 00:05:54.002
it renders in the browser as fully qualified HTML.

98
00:05:54.002 --> 00:05:56.007
So your designers could take this page and design it

99
00:05:56.007 --> 00:05:58.009
while you finish up the rest of the work,

100
00:05:58.009 --> 00:06:00.000
hand it back to you,

101
00:06:00.000 --> 00:06:03.000
drop it into source control, and you're good to go.

102
00:06:03.000 --> 00:06:05.002
But with this site,

103
00:06:05.002 --> 00:06:08.005
we're going to go ahead and run this.

104
00:06:08.005 --> 00:06:13.002
Allow spring to come up, refresh our page,

105
00:06:13.002 --> 00:06:15.007
go to room reservations, and you will see,

106
00:06:15.007 --> 00:06:18.006
we now populate all of our data

107
00:06:18.006 --> 00:06:23.000
and everything came out as vacant on today's date.

108
00:06:23.000 --> 00:06:25.009
Now, if we go back up to the URL

109
00:06:25.009 --> 00:06:32.006
and we put in a date element of 2022, 01, 01,

110
00:06:32.006 --> 00:06:34.007
you will see now we populate a name

111
00:06:34.007 --> 00:06:37.004
because we have a room reservation record

112
00:06:37.004 --> 00:06:41.000
in Cambridge C2 for Judith Young.

