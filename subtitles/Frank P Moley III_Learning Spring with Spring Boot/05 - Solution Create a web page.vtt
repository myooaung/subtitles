WEBVTT
1
00:00:00.000 --> 00:00:05.002
(upbeat music)

2
00:00:05.002 --> 00:00:06.002
- [Instructor] So now it's time to take a look

3
00:00:06.002 --> 00:00:10.006
at my solution for this challenge exercise.

4
00:00:10.006 --> 00:00:14.007
I impacted four files when I created this solution.

5
00:00:14.007 --> 00:00:18.000
So in my index.html static page,

6
00:00:18.000 --> 00:00:22.006
I added an anchor to go to our guests page.

7
00:00:22.006 --> 00:00:25.006
I then went into the reservations service

8
00:00:25.006 --> 00:00:30.001
and I added a method to list the hotel guests,

9
00:00:30.001 --> 00:00:32.004
and I did it very similar to the way

10
00:00:32.004 --> 00:00:33.006
that we have done it before.

11
00:00:33.006 --> 00:00:36.002
So I got a list of iterable guests,

12
00:00:36.002 --> 00:00:38.006
created an array list from that,

13
00:00:38.006 --> 00:00:42.006
and then sorted those guests based on their last name,

14
00:00:42.006 --> 00:00:47.001
and then returned that guest list to the caller.

15
00:00:47.001 --> 00:00:49.009
I then created a guest controller

16
00:00:49.009 --> 00:00:53.009
and the guest controller responds and slash guests.

17
00:00:53.009 --> 00:00:57.001
It has a reservation service injected into it.

18
00:00:57.001 --> 00:01:01.006
It then has a get method with a get guests method signature

19
00:01:01.006 --> 00:01:04.001
that also takes in a model,

20
00:01:04.001 --> 00:01:06.007
and I simply populate the guests

21
00:01:06.007 --> 00:01:09.008
with the call from the reservation service.

22
00:01:09.008 --> 00:01:13.009
Now you'll notice that I return hotel hyphen guests.

23
00:01:13.009 --> 00:01:16.002
If you return just guests here,

24
00:01:16.002 --> 00:01:18.003
you may get a circular reference,

25
00:01:18.003 --> 00:01:21.000
and some of you may have struggled with that,

26
00:01:21.000 --> 00:01:21.008
and I didn't tell you

27
00:01:21.008 --> 00:01:23.000
because I wanted you to fight through it,

28
00:01:23.000 --> 00:01:24.003
because it's one of those things

29
00:01:24.003 --> 00:01:26.008
that you will remember down the road,

30
00:01:26.008 --> 00:01:29.000
having experienced it once.

31
00:01:29.000 --> 00:01:31.002
But if you didn't experience it,

32
00:01:31.002 --> 00:01:35.001
then most likely you didn't name your request URL the same

33
00:01:35.001 --> 00:01:38.004
as your response page itself.

34
00:01:38.004 --> 00:01:41.004
So now let's go into that page.

35
00:01:41.004 --> 00:01:43.004
So I imported Thymeleaf.

36
00:01:43.004 --> 00:01:46.009
I called this "Landon Hotel: Guests" as the title.

37
00:01:46.009 --> 00:01:49.009
I created all of the elements from the requirements,

38
00:01:49.009 --> 00:01:54.000
simply from an iteration across guests.

39
00:01:54.000 --> 00:01:58.004
So now it's time to run our application

40
00:01:58.004 --> 00:02:00.004
and we'll jump into a web browser,

41
00:02:00.004 --> 00:02:03.002
and I'm going to go ahead and refresh this page.

42
00:02:03.002 --> 00:02:05.002
You'll see that I have room reservations,

43
00:02:05.002 --> 00:02:07.009
which still functionally works.

44
00:02:07.009 --> 00:02:11.007
I have guests that are now sorted by last name

45
00:02:11.007 --> 00:02:14.003
and it goes through the entire list.

46
00:02:14.003 --> 00:02:16.008
And that's how I solved this challenge

47
00:02:16.008 --> 00:02:19.000
on building web pages.

