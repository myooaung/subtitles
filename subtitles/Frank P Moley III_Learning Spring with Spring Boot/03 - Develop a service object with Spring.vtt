WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] We are now going to build

2
00:00:01.007 --> 00:00:03.009
our service abstraction.

3
00:00:03.009 --> 00:00:06.004
I'm going to encourage you to grab the exercise files

4
00:00:06.004 --> 00:00:08.000
for this video.

5
00:00:08.000 --> 00:00:10.009
I've gone ahead and coated the meat of the business logic

6
00:00:10.009 --> 00:00:12.006
into a few classes,

7
00:00:12.006 --> 00:00:15.004
so we can focus on the IOC portion

8
00:00:15.004 --> 00:00:17.001
of the service abstraction,

9
00:00:17.001 --> 00:00:20.006
which is much more specific to the Spring Framework.

10
00:00:20.006 --> 00:00:23.007
So let's jump into the ID.

11
00:00:23.007 --> 00:00:26.006
Let's start by jumping into source main Java,

12
00:00:26.006 --> 00:00:29.003
our base package, and then business.

13
00:00:29.003 --> 00:00:31.009
We're going to start with the room reservation.

14
00:00:31.009 --> 00:00:35.007
Now room reservation is nothing more than a DTO

15
00:00:35.007 --> 00:00:40.007
that is an amalgamation of the three data entities below,

16
00:00:40.007 --> 00:00:43.001
specifically relating to the view

17
00:00:43.001 --> 00:00:48.001
that we will ultimately build for this web application.

18
00:00:48.001 --> 00:00:50.006
Go ahead and open up Reservation Service.

19
00:00:50.006 --> 00:00:55.007
Now this class, as it's written right now, will not run.

20
00:00:55.007 --> 00:00:59.003
And the reason is, is that we have three attributes

21
00:00:59.003 --> 00:01:01.005
that are never set,

22
00:01:01.005 --> 00:01:03.006
and we're going to talk about different ways

23
00:01:03.006 --> 00:01:08.003
to set these attributes using the Spring Framework.

24
00:01:08.003 --> 00:01:09.006
So, first and foremost,

25
00:01:09.006 --> 00:01:14.005
we need to annotate this class with some form of stereotype

26
00:01:14.005 --> 00:01:18.009
of @Component, so that Spring will recognize this class,

27
00:01:18.009 --> 00:01:22.008
and we're going to do that with the @Service annotation.

28
00:01:22.008 --> 00:01:26.006
Now, the reason I like to use @Service on business services

29
00:01:26.006 --> 00:01:29.003
is that gives me a great place to write

30
00:01:29.003 --> 00:01:31.006
abstract oriented programming

31
00:01:31.006 --> 00:01:34.008
that responds to service and vocations.

32
00:01:34.008 --> 00:01:38.002
And I do this because a lot of my systemic logic,

33
00:01:38.002 --> 00:01:41.005
the technical logic that I have to do around logging

34
00:01:41.005 --> 00:01:44.008
and tracing and recording and auditing,

35
00:01:44.008 --> 00:01:47.006
usually end up in my business layer

36
00:01:47.006 --> 00:01:49.006
in some way, shape or form.

37
00:01:49.006 --> 00:01:53.009
And by using AOP, I can write that code once

38
00:01:53.009 --> 00:01:57.007
and apply it to every one of my service abstractions.

39
00:01:57.007 --> 00:02:01.008
So now let's take a look at these three private attributes.

40
00:02:01.008 --> 00:02:04.008
Now, the first thing that you may be encouraged to do,

41
00:02:04.008 --> 00:02:07.001
because you've seen it somewhere,

42
00:02:07.001 --> 00:02:12.005
is to simply do an @Autowired on each one of these elements.

43
00:02:12.005 --> 00:02:14.008
And that will work.

44
00:02:14.008 --> 00:02:18.003
In reality, doing @Autowired on each of these attributes

45
00:02:18.003 --> 00:02:19.007
works just fine.

46
00:02:19.007 --> 00:02:22.005
In fact, if we ran into our Util right now

47
00:02:22.005 --> 00:02:24.009
and went to our AppStartupEvent

48
00:02:24.009 --> 00:02:30.007
and did the same thing on these two attributes,

49
00:02:30.007 --> 00:02:37.005
and we ran our class,

50
00:02:37.005 --> 00:02:41.008
we would see that we get out a list of room reservations

51
00:02:41.008 --> 00:02:43.009
for a given day.

52
00:02:43.009 --> 00:02:46.001
Seems good, right?

53
00:02:46.001 --> 00:02:49.009
The problem with this is that we have just written code

54
00:02:49.009 --> 00:02:52.005
that is not very easy to test.

55
00:02:52.005 --> 00:02:56.008
There is no way that I can inject a reservation service

56
00:02:56.008 --> 00:03:01.001
into this AppStartupEvent through a mock test.

57
00:03:01.001 --> 00:03:04.001
There is no way that I can inject a room repository

58
00:03:04.001 --> 00:03:09.002
into this reservation service for the exact same reason.

59
00:03:09.002 --> 00:03:12.006
So the next option that you might be tempted to do,

60
00:03:12.006 --> 00:03:16.001
and it is a valid option as well with Spring,

61
00:03:16.001 --> 00:03:18.009
is you might be tempted to simply create

62
00:03:18.009 --> 00:03:21.000
some setters on here.

63
00:03:21.000 --> 00:03:22.007
And if we went through and did a Setter

64
00:03:22.007 --> 00:03:25.006
on each one of these elements,

65
00:03:25.006 --> 00:03:31.008
and then once again, ran our class,

66
00:03:31.008 --> 00:03:36.003
wait a minute, we just set up a Setter on these.

67
00:03:36.003 --> 00:03:38.003
Why is that not working?

68
00:03:38.003 --> 00:03:41.003
The reason it's not working is Spring can construct

69
00:03:41.003 --> 00:03:44.007
this object with no indication

70
00:03:44.007 --> 00:03:48.005
that it needs to also set a dependency.

71
00:03:48.005 --> 00:03:51.003
In order to fix that with center-based injection,

72
00:03:51.003 --> 00:03:56.002
we can do things like auto-wiring our setters.

73
00:03:56.002 --> 00:03:58.001
So if we go ahead and do that

74
00:03:58.001 --> 00:04:03.004
and then run our class once again,

75
00:04:03.004 --> 00:04:06.003
you will see we get data back out.

76
00:04:06.003 --> 00:04:07.008
That's great.

77
00:04:07.008 --> 00:04:10.005
The problem with this is we've now deviated

78
00:04:10.005 --> 00:04:14.004
from good object oriented programming practices.

79
00:04:14.004 --> 00:04:17.007
Let's take a look at the business logic here in this method,

80
00:04:17.007 --> 00:04:21.003
getRoomReservationsForDate.

81
00:04:21.003 --> 00:04:24.007
You will see that we are expecting that when this class

82
00:04:24.007 --> 00:04:28.006
is constructed, we have a room repository.

83
00:04:28.006 --> 00:04:31.001
That makes that a hard requirement

84
00:04:31.001 --> 00:04:34.000
on this classes operation.

85
00:04:34.000 --> 00:04:37.006
By using setters, there is no hard requirement

86
00:04:37.006 --> 00:04:39.002
other than Spring runs it,

87
00:04:39.002 --> 00:04:42.001
and we saw that if we removed Spring from the picture,

88
00:04:42.001 --> 00:04:44.001
this class failed.

89
00:04:44.001 --> 00:04:48.002
There is also nothing in here that says that I can't change

90
00:04:48.002 --> 00:04:50.000
what one of these things are,

91
00:04:50.000 --> 00:04:53.009
and most likely that's not the behavior that we want.

92
00:04:53.009 --> 00:04:58.001
So while auto-wiring attributes or auto-wiring setters

93
00:04:58.001 --> 00:05:00.008
may make sense and may work,

94
00:05:00.008 --> 00:05:04.004
it is not the most correct way to do this.

95
00:05:04.004 --> 00:05:06.006
Now I'm going to show you what that correct way is,

96
00:05:06.006 --> 00:05:08.008
and you've actually seen it already.

97
00:05:08.008 --> 00:05:11.006
And if you don't believe me,

98
00:05:11.006 --> 00:05:15.000
I encourage you to go read some of the Spring contributors

99
00:05:15.000 --> 00:05:17.008
blog articles on this very topic

100
00:05:17.008 --> 00:05:21.000
and the proper way to do injection.

101
00:05:21.000 --> 00:05:23.007
Now, the most proper way to do that

102
00:05:23.007 --> 00:05:26.007
is to make each of these elements final.

103
00:05:26.007 --> 00:05:29.000
We don't want these dependencies to change.

104
00:05:29.000 --> 00:05:33.005
They're all singletons in the IOC container.

105
00:05:33.005 --> 00:05:35.004
We will make them all final,

106
00:05:35.004 --> 00:05:38.005
and then we will very simply create a constructor

107
00:05:38.005 --> 00:05:41.007
that adds all of those in.

108
00:05:41.007 --> 00:05:44.006
Now I can run this class as it is right now,

109
00:05:44.006 --> 00:05:48.009
and I'm going to go ahead and do that.

110
00:05:48.009 --> 00:05:51.003
And everything runs fine.

111
00:05:51.003 --> 00:05:54.008
You may ask why didn't I auto wire this?

112
00:05:54.008 --> 00:05:57.008
Well, let's take a look at how Java works.

113
00:05:57.008 --> 00:06:02.002
Java looks at a class that has a single constructor

114
00:06:02.002 --> 00:06:04.006
as the only constructor.

115
00:06:04.006 --> 00:06:07.009
If you don't put a constructor, you get the default one,

116
00:06:07.009 --> 00:06:11.001
but once you define that first constructor,

117
00:06:11.001 --> 00:06:14.007
you now have the only way to construct this object.

118
00:06:14.007 --> 00:06:17.007
Spring will automatically use it.

119
00:06:17.007 --> 00:06:21.005
Let's say however that we wrote another constructor

120
00:06:21.005 --> 00:06:27.007
on this class, and we only did two of our elements,

121
00:06:27.007 --> 00:06:29.005
and then just so it'll compile,

122
00:06:29.005 --> 00:06:34.002
we will set reservationRepository equal to null.

123
00:06:34.002 --> 00:06:37.008
Now the class itself won't run, but the reality is,

124
00:06:37.008 --> 00:06:39.001
is it's not going to start,

125
00:06:39.001 --> 00:06:41.008
and you'll see that the IDE that I'm using

126
00:06:41.008 --> 00:06:43.008
actually already knows that.

127
00:06:43.008 --> 00:06:46.008
It doesn't have a way to know which constructor to use.

128
00:06:46.008 --> 00:06:50.003
So if I restart this application,

129
00:06:50.003 --> 00:06:52.005
that compiler warning gets ignored

130
00:06:52.005 --> 00:06:55.001
because that's what it is, but you'll see

131
00:06:55.001 --> 00:06:58.001
when we look at the stack trace,

132
00:06:58.001 --> 00:07:02.000
error creating bean with name reservationService

133
00:07:02.000 --> 00:07:03.006
where it's defined,

134
00:07:03.006 --> 00:07:07.003
and it'll tell you, instantiation of bean failed.

135
00:07:07.003 --> 00:07:13.003
And as you keep going through, no default constructor found.

136
00:07:13.003 --> 00:07:15.000
Okay, we don't have a default constructor,

137
00:07:15.000 --> 00:07:18.001
but we just ran it without one a moment ago.

138
00:07:18.001 --> 00:07:22.007
We can solve that in this case by auto-wiring it.

139
00:07:22.007 --> 00:07:28.002
Now, if we start it up once again, it'll run just fine.

140
00:07:28.002 --> 00:07:30.007
So if you need more than one constructor,

141
00:07:30.007 --> 00:07:33.002
you need to define an auto wire.

142
00:07:33.002 --> 00:07:35.005
If you don't define more than one,

143
00:07:35.005 --> 00:07:38.002
you don't need to auto wire the constructor.

144
00:07:38.002 --> 00:07:42.000
Of course you can, nothing will break if we do that.

145
00:07:42.000 --> 00:07:42.009
But at this point,

146
00:07:42.009 --> 00:07:47.008
we have a very valid service that does work for us

147
00:07:47.008 --> 00:07:50.006
and if we jump back to our AppStartupEvents,

148
00:07:50.006 --> 00:07:53.008
we can actually fix this as well,

149
00:07:53.008 --> 00:07:58.003
so that it is good object oriented programming.

150
00:07:58.003 --> 00:08:06.000
We'll make these final and we will create a constructor,

151
00:08:06.000 --> 00:08:08.001
and now everything's good to go.

152
00:08:08.001 --> 00:08:13.001
I do want you to notice that we've got in this class

153
00:08:13.001 --> 00:08:16.002
a DateUtils and that's another class that I wrote for you,

154
00:08:16.002 --> 00:08:18.004
and it's a very simple way of converting

155
00:08:18.004 --> 00:08:21.004
a date format string in the format

156
00:08:21.004 --> 00:08:25.000
of year, year, year, year, month, month, day, day,

157
00:08:25.000 --> 00:08:27.007
to convert that into a Java.util date.

158
00:08:27.007 --> 00:08:29.003
And we're going to use that both for the UI

159
00:08:29.003 --> 00:08:33.003
and the web services, so I went ahead and included that now.

160
00:08:33.003 --> 00:08:37.001
But that's all there really is to know about auto-wiring

161
00:08:37.001 --> 00:08:39.006
and using the IOC container.

162
00:08:39.006 --> 00:08:42.007
It really comes to good programming practices

163
00:08:42.007 --> 00:08:46.000
and make sure that everything is well-defined.

