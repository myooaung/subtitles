WEBVTT
1
00:00:00.002 --> 00:00:05.003
(upbeat music)

2
00:00:05.003 --> 00:00:07.003
- [Instructor] So now it's time for my Solution

3
00:00:07.003 --> 00:00:10.004
to the RESTful Web Service.

4
00:00:10.004 --> 00:00:13.005
Let's start in our Web Service Controller.

5
00:00:13.005 --> 00:00:16.008
So you'll see that I added three methods to this,

6
00:00:16.008 --> 00:00:18.004
a GetMapping.

7
00:00:18.004 --> 00:00:20.002
And I didn't talk about GetMapping before,

8
00:00:20.002 --> 00:00:22.000
I only talked about Request Mapping.

9
00:00:22.000 --> 00:00:25.005
Within Spring and some of the later versions of Spring Boot,

10
00:00:25.005 --> 00:00:28.004
they introduced these stereotypes of GetMapping,

11
00:00:28.004 --> 00:00:31.004
Post mapping, PutMapping, and Delete Mapping.

12
00:00:31.004 --> 00:00:33.003
So you didn't have to put a method

13
00:00:33.003 --> 00:00:36.002
in the Request Mapping annotation itself.

14
00:00:36.002 --> 00:00:38.001
So essentially it's doing the same thing.

15
00:00:38.001 --> 00:00:39.003
And I wanted to show that to you.

16
00:00:39.003 --> 00:00:43.001
So I used the GetMapping at /guests,

17
00:00:43.001 --> 00:00:45.008
and I simply returned in that service,

18
00:00:45.008 --> 00:00:50.000
a list of hotel guests from the reservation service.

19
00:00:50.000 --> 00:00:52.009
I did the same to add a guest,

20
00:00:52.009 --> 00:00:55.007
doing a PostMapping at /guests.

21
00:00:55.007 --> 00:00:57.009
I then have a response status have created,

22
00:00:57.009 --> 00:01:00.007
because anytime you create an element in REST,

23
00:01:00.007 --> 00:01:04.003
you should return it to a one instead of a 200.

24
00:01:04.003 --> 00:01:06.002
Now, technically you should also populate

25
00:01:06.002 --> 00:01:07.006
the location header,

26
00:01:07.006 --> 00:01:10.001
which I did not do for this purposes,

27
00:01:10.001 --> 00:01:11.006
but I could have.

28
00:01:11.006 --> 00:01:14.000
It would have been as simple as returning the guests

29
00:01:14.000 --> 00:01:15.004
from the add guest method,

30
00:01:15.004 --> 00:01:18.002
getting that and then populating the location header

31
00:01:18.002 --> 00:01:19.005
before I responded out.

32
00:01:19.005 --> 00:01:21.008
But for this demo, this is fine.

33
00:01:21.008 --> 00:01:25.001
I take the guest in, I simply call a reservationService,

34
00:01:25.001 --> 00:01:26.003
addGuest method,

35
00:01:26.003 --> 00:01:29.001
which then saves it to the underlying database.

36
00:01:29.001 --> 00:01:31.007
And I did the same getRooms,

37
00:01:31.007 --> 00:01:33.004
responding at /rooms,

38
00:01:33.004 --> 00:01:36.006
and then returning the element from the reservation service.

39
00:01:36.006 --> 00:01:39.007
So let's take a look at that.

40
00:01:39.007 --> 00:01:41.004
We already had the get hotel guests

41
00:01:41.004 --> 00:01:42.007
from a previous exercise.

42
00:01:42.007 --> 00:01:46.005
So I simply added the addGuest here on 83.

43
00:01:46.005 --> 00:01:47.006
You'll see that I validate

44
00:01:47.006 --> 00:01:49.008
that the object comes in is actually populated.

45
00:01:49.008 --> 00:01:52.009
If it's not, I throw a runtime exception,

46
00:01:52.009 --> 00:01:55.004
which will turn itself into a 500.

47
00:01:55.004 --> 00:01:57.006
If I really wanted to go all the way into this,

48
00:01:57.006 --> 00:01:59.009
I would actually return a custom exception

49
00:01:59.009 --> 00:02:03.007
that is mapped to a specific response code.

50
00:02:03.007 --> 00:02:05.002
Again, for demo purposes,

51
00:02:05.002 --> 00:02:07.007
just throwing a runtime exception is fine.

52
00:02:07.007 --> 00:02:11.004
It gets us a 500 to tell us there's a problem.

53
00:02:11.004 --> 00:02:13.008
I then simply take that guest element

54
00:02:13.008 --> 00:02:16.000
and call the underlying Save.

55
00:02:16.000 --> 00:02:17.008
You'll notice that this is a void method

56
00:02:17.008 --> 00:02:19.009
because I'm not returning anything.

57
00:02:19.009 --> 00:02:22.002
Again, if I wanted that location header,

58
00:02:22.002 --> 00:02:25.004
this Save method will return the object that is just saved,

59
00:02:25.004 --> 00:02:27.002
including its ID.

60
00:02:27.002 --> 00:02:30.009
I could take that ID and populate the location header.

61
00:02:30.009 --> 00:02:33.002
And then on getRooms here on line 90,

62
00:02:33.002 --> 00:02:37.003
I did the same thing that I had done before on getGuests.

63
00:02:37.003 --> 00:02:40.002
I simply get them all, converted into array list,

64
00:02:40.002 --> 00:02:43.001
sort that, this time I'm sorting by room number,

65
00:02:43.001 --> 00:02:45.002
and then return that list.

66
00:02:45.002 --> 00:02:47.001
Now, one problem that you may have had

67
00:02:47.001 --> 00:02:49.000
with the addGuest method,

68
00:02:49.000 --> 00:02:52.000
actually is how we defined our entities.

69
00:02:52.000 --> 00:02:53.005
So originally I had said,

70
00:02:53.005 --> 00:02:56.000
just use a generated value of auto,

71
00:02:56.000 --> 00:02:56.008
and that's fine,

72
00:02:56.008 --> 00:02:58.007
because we were only doing gets

73
00:02:58.007 --> 00:03:00.006
with of our credit operations.

74
00:03:00.006 --> 00:03:03.000
So the sequence in our database didn't really matter,

75
00:03:03.000 --> 00:03:04.007
and Auto worked fine.

76
00:03:04.007 --> 00:03:06.005
But since we are adding,

77
00:03:06.005 --> 00:03:10.005
we need to have some way to generate the ID.

78
00:03:10.005 --> 00:03:11.008
And we're going to use identity

79
00:03:11.008 --> 00:03:13.008
because that works with H2.

80
00:03:13.008 --> 00:03:15.009
If this was an Oracle database,

81
00:03:15.009 --> 00:03:17.005
we would have to use a sequence.

82
00:03:17.005 --> 00:03:18.006
And then we would have to point

83
00:03:18.006 --> 00:03:20.006
to the name of that sequence.

84
00:03:20.006 --> 00:03:23.006
So that value tends to be database specific.

85
00:03:23.006 --> 00:03:26.003
And I'm hoping that this didn't catch you up too much

86
00:03:26.003 --> 00:03:29.001
because simply looking at some dark on the error message

87
00:03:29.001 --> 00:03:30.003
that popped out,

88
00:03:30.003 --> 00:03:33.008
saying that there was not a sequence strategy for that,

89
00:03:33.008 --> 00:03:35.007
should have pointed you to identity.

90
00:03:35.007 --> 00:03:39.000
But regardless, that is the change that I've made to guests.

91
00:03:39.000 --> 00:03:44.001
So if I run this service, as it's written now,

92
00:03:44.001 --> 00:03:45.000
once this runs,

93
00:03:45.000 --> 00:03:46.007
we're going to jump into a terminal,

94
00:03:46.007 --> 00:03:49.008
and we're going to execute a few curl commands.

95
00:03:49.008 --> 00:03:52.006
Then, normally I use a different tool.

96
00:03:52.006 --> 00:03:54.005
I use a tool called HTTPie,

97
00:03:54.005 --> 00:03:57.004
which I find significantly better.

98
00:03:57.004 --> 00:03:58.005
But for this purposes,

99
00:03:58.005 --> 00:04:01.003
because almost everybody has curl on their machine,

100
00:04:01.003 --> 00:04:03.007
it's easier to just show it with curl.

101
00:04:03.007 --> 00:04:08.003
So we will do a curl on reservations,

102
00:04:08.003 --> 00:04:10.003
just like we got before.

103
00:04:10.003 --> 00:04:14.000
We will do a curl on guests.

104
00:04:14.000 --> 00:04:16.005
Get a nice body of guests out.

105
00:04:16.005 --> 00:04:18.004
Now let's go ahead and add a guest here

106
00:04:18.004 --> 00:04:20.003
so that we can show what that will look like.

107
00:04:20.003 --> 00:04:23.001
So let's do a curl -x.

108
00:04:23.001 --> 00:04:28.002
It's going to be a POST at http://localhost:

109
00:04:28.002 --> 00:04:31.008
8080/api/guests.

110
00:04:31.008 --> 00:04:35.006
We were passing the content header.

111
00:04:35.006 --> 00:04:43.000
So Content-Type: application/json.

112
00:04:43.000 --> 00:04:44.004
And then we're going to do a -d.

113
00:04:44.004 --> 00:04:46.006
So we've got some data.

114
00:04:46.006 --> 00:04:48.007
And now we will structure some JSON.

115
00:04:48.007 --> 00:04:55.009
So curl brace, quote, lastName:.

116
00:04:55.009 --> 00:04:59.003
We will call the Zenith because it starts with Z.

117
00:04:59.003 --> 00:05:02.002
So to show up at the bottom of our list.

118
00:05:02.002 --> 00:05:04.009
And then we're only going to add the first name

119
00:05:04.009 --> 00:05:07.008
because we don't need the whole element.

120
00:05:07.008 --> 00:05:10.006
This gentleman's name will be Adam.

121
00:05:10.006 --> 00:05:14.006
We will end with the curly brace and a single tick.

122
00:05:14.006 --> 00:05:15.008
And now we've added that.

123
00:05:15.008 --> 00:05:19.001
So let me clear this real quick

124
00:05:19.001 --> 00:05:21.002
and go back to the API guests.

125
00:05:21.002 --> 00:05:22.007
And you'll see that the last element,

126
00:05:22.007 --> 00:05:24.007
guest 201 in this case,

127
00:05:24.007 --> 00:05:27.006
has a first name of Adam, a last name of Zenith.

128
00:05:27.006 --> 00:05:29.003
The rest of its(indistinct) and populated.

129
00:05:29.003 --> 00:05:33.007
So that definitely worked to do the add.

130
00:05:33.007 --> 00:05:35.001
And the last one that I want to do,

131
00:05:35.001 --> 00:05:38.001
is I want to take a look at our rooms

132
00:05:38.001 --> 00:05:40.001
and we get all of our rooms back.

133
00:05:40.001 --> 00:05:42.007
The one thing I didn't tell you that is important to know,

134
00:05:42.007 --> 00:05:44.006
because this is an embedded database,

135
00:05:44.006 --> 00:05:46.003
if we restart our application

136
00:05:46.003 --> 00:05:49.008
after adding Mr. Adam Zenith to our database,

137
00:05:49.008 --> 00:05:51.006
Adam Zenith won't show up anymore

138
00:05:51.006 --> 00:05:54.001
because he's not in our data file.

139
00:05:54.001 --> 00:05:56.004
It's actually something we added at runtime.

140
00:05:56.004 --> 00:05:57.003
Again, this you back

141
00:05:57.003 --> 00:05:59.004
to some of the power of embedded databases,

142
00:05:59.004 --> 00:06:01.009
'cause we can now use them for tests scenarios,

143
00:06:01.009 --> 00:06:05.002
as long as everything is compatible with our database,

144
00:06:05.002 --> 00:06:06.009
we can test using it,

145
00:06:06.009 --> 00:06:08.009
actually execute queries against the database

146
00:06:08.009 --> 00:06:12.000
and not worry about resetting the state of the database

147
00:06:12.000 --> 00:06:14.006
between application runs.

148
00:06:14.006 --> 00:06:16.001
So that's all there is for this challenge.

149
00:06:16.001 --> 00:06:18.003
I hope that it stretched you just a little bit

150
00:06:18.003 --> 00:06:21.002
and made you think about the entire stack

151
00:06:21.002 --> 00:06:22.008
that we've been playing with,

152
00:06:22.008 --> 00:06:24.002
looking at some IOC,

153
00:06:24.002 --> 00:06:26.005
looking at some actual data queries

154
00:06:26.005 --> 00:06:27.009
so that you can get a feel

155
00:06:27.009 --> 00:06:30.003
for what Spring is top to bottom

156
00:06:30.003 --> 00:06:32.000
through this simple challenge.

