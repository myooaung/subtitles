WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] One of the most interesting changes

2
00:00:02.003 --> 00:00:06.004
to the Spring framework, was the Spring Boot project.

3
00:00:06.004 --> 00:00:08.003
I would even go so far to argue

4
00:00:08.003 --> 00:00:11.000
that no other aspect of Spring,

5
00:00:11.000 --> 00:00:12.007
other than the framework itself

6
00:00:12.007 --> 00:00:17.009
has contributed to its popularity more than Spring Boot.

7
00:00:17.009 --> 00:00:20.000
Now, this is a pretty bold statement for me to make,

8
00:00:20.000 --> 00:00:21.006
but I truly believe it.

9
00:00:21.006 --> 00:00:25.006
Mainly because of what Spring Boot provides.

10
00:00:25.006 --> 00:00:27.005
Spring Boot at its core,

11
00:00:27.005 --> 00:00:30.007
is all about rapid application development.

12
00:00:30.007 --> 00:00:35.002
But it starts at the initial setup phase of the application

13
00:00:35.002 --> 00:00:38.000
as well as common configuration.

14
00:00:38.000 --> 00:00:40.001
Enhancing existing applications

15
00:00:40.001 --> 00:00:44.005
also see speed increases with Spring Boot.

16
00:00:44.005 --> 00:00:46.004
Now because of how it is structured,

17
00:00:46.004 --> 00:00:50.004
Spring Boot removes much of the boilerplate actions

18
00:00:50.004 --> 00:00:54.007
that are associated with just the application creation

19
00:00:54.007 --> 00:00:56.008
and initial setup.

20
00:00:56.008 --> 00:00:59.008
Spring Boot also has many uses.

21
00:00:59.008 --> 00:01:02.000
While we will focus on web application

22
00:01:02.000 --> 00:01:04.007
and web service development in this course,

23
00:01:04.007 --> 00:01:09.001
it can be used for many types of applications using Spring,

24
00:01:09.001 --> 00:01:12.005
including things like Cron jobs, ETL type applications,

25
00:01:12.005 --> 00:01:16.005
and maintenance processes that run in your system.

26
00:01:16.005 --> 00:01:19.008
Again, the use cases are unlimited,

27
00:01:19.008 --> 00:01:22.005
if it needs to be run on the JVM,

28
00:01:22.005 --> 00:01:26.008
Spring Boot most likely will save you time.

29
00:01:26.008 --> 00:01:30.009
Spring Boot was designed with a cloud native world in mind,

30
00:01:30.009 --> 00:01:32.005
and many of the constructs

31
00:01:32.005 --> 00:01:35.005
are for cloud native applications,

32
00:01:35.005 --> 00:01:39.007
but there is no reason traditional enterprise applications,

33
00:01:39.007 --> 00:01:44.002
even monolithic ones cannot leverage effectively Spring Boot

34
00:01:44.002 --> 00:01:47.006
and yield many of its benefits.

35
00:01:47.006 --> 00:01:49.004
The list of features of Spring Boot

36
00:01:49.004 --> 00:01:53.001
that makes it so attractive in the Spring world is long,

37
00:01:53.001 --> 00:01:55.008
but, there are some key components

38
00:01:55.008 --> 00:02:00.001
that drive our use of it for this course.

39
00:02:00.001 --> 00:02:02.007
First on the list for most developers,

40
00:02:02.007 --> 00:02:06.005
is the embedded application server support.

41
00:02:06.005 --> 00:02:10.007
Spring Boot with the web packages brings in a pre-configured

42
00:02:10.007 --> 00:02:14.001
Tomcat instance to the application.

43
00:02:14.001 --> 00:02:16.009
You can change the application server,

44
00:02:16.009 --> 00:02:18.006
but this is very different

45
00:02:18.006 --> 00:02:22.001
in traditional JVM based applications,

46
00:02:22.001 --> 00:02:23.008
where you would build a WAR file

47
00:02:23.008 --> 00:02:26.008
and drop it into the application server.

48
00:02:26.008 --> 00:02:30.005
With Spring Boot, the application server exists

49
00:02:30.005 --> 00:02:33.002
within the Spring Boot JAR file.

50
00:02:33.002 --> 00:02:36.004
Now Josh long, the developer advocate for Spring

51
00:02:36.004 --> 00:02:41.007
often will be seen using the phrase, make jar not war.

52
00:02:41.007 --> 00:02:45.007
Auto-configuration is at the heart of Spring Boot.

53
00:02:45.007 --> 00:02:48.005
In traditional Spring development, much of your time

54
00:02:48.005 --> 00:02:52.002
was spent configuring the application context

55
00:02:52.002 --> 00:02:55.005
often through copy and paste operations.

56
00:02:55.005 --> 00:02:59.005
With Spring Boot, much of the configuration is done for you

57
00:02:59.005 --> 00:03:03.006
in many cases with a logical set of defaults

58
00:03:03.006 --> 00:03:05.008
and with the ability to add properties,

59
00:03:05.008 --> 00:03:10.000
to modify those defaults, as you need to.

60
00:03:10.000 --> 00:03:12.005
Another real powerful construct

61
00:03:12.005 --> 00:03:15.004
is the automatic servlet mappings.

62
00:03:15.004 --> 00:03:18.000
Now this goes hand in hand with embedded application

63
00:03:18.000 --> 00:03:22.001
servers, as well as the way that the application context

64
00:03:22.001 --> 00:03:24.001
is auto configured.

65
00:03:24.001 --> 00:03:27.005
You get a default and effective servlet mapping

66
00:03:27.005 --> 00:03:31.009
without having to write any XML or any Java configuration

67
00:03:31.009 --> 00:03:36.007
to the core servlet container of your application.

68
00:03:36.007 --> 00:03:39.008
Another very powerful aspect of Spring Boot

69
00:03:39.008 --> 00:03:44.004
is raw database support and configuration for both embedded

70
00:03:44.004 --> 00:03:47.006
and remote databases with hibernate mappings,

71
00:03:47.006 --> 00:03:51.003
as the default implementation of JPA.

72
00:03:51.003 --> 00:03:54.004
With Spring Boot, a few key properties

73
00:03:54.004 --> 00:03:57.004
allow you to connect to remote databases

74
00:03:57.004 --> 00:04:01.000
or leverage embedded files with default schema

75
00:04:01.000 --> 00:04:04.003
and default data provided by CQL files

76
00:04:04.003 --> 00:04:07.002
that are embedded in your application.

77
00:04:07.002 --> 00:04:11.007
The embedded case is fantastic for POC type solutions

78
00:04:11.007 --> 00:04:14.009
or demos, not as much in the real world,

79
00:04:14.009 --> 00:04:17.006
but I use them a lot when I do POCs

80
00:04:17.006 --> 00:04:19.009
that I can hand to a developer to modify,

81
00:04:19.009 --> 00:04:22.008
to connect to a remote database.

82
00:04:22.008 --> 00:04:25.003
Now you also get automatic controller mappings

83
00:04:25.003 --> 00:04:28.000
for MVC based applications.

84
00:04:28.000 --> 00:04:29.006
With the Raul Spring framework,

85
00:04:29.006 --> 00:04:31.005
we used to have to configure these mappings

86
00:04:31.005 --> 00:04:33.007
earlier in the frameworks life cycle

87
00:04:33.007 --> 00:04:36.002
and it was rather tedious.

88
00:04:36.002 --> 00:04:40.004
New Spring developers don't have to deal with any of that.

89
00:04:40.004 --> 00:04:44.001
A few simple annotations handle everything

90
00:04:44.001 --> 00:04:47.002
for wiring web requests to appropriate classes

91
00:04:47.002 --> 00:04:51.007
and methods via the servlet context.

92
00:04:51.007 --> 00:04:53.008
Now I've spoken a bit about auto configuration

93
00:04:53.008 --> 00:04:56.008
of the application context a few times now.

94
00:04:56.008 --> 00:05:01.000
So I'd like to spell it out just a little bit more.

95
00:05:01.000 --> 00:05:05.006
Auto configuration refers to the application context

96
00:05:05.006 --> 00:05:08.007
or more specifically the inversion of control container,

97
00:05:08.007 --> 00:05:11.001
which is the BeanFactory.

98
00:05:11.001 --> 00:05:13.004
We will spend some time in a couple of more videos,

99
00:05:13.004 --> 00:05:16.004
really explaining IOC, but for now,

100
00:05:16.004 --> 00:05:20.005
just understand that Spring Boot provides a default

101
00:05:20.005 --> 00:05:25.001
and opinionated configuration of common constructs.

102
00:05:25.001 --> 00:05:27.008
The opinionated defaults are very common

103
00:05:27.008 --> 00:05:30.009
and oftentimes you don't need to change them,

104
00:05:30.009 --> 00:05:34.007
but they are very easy to override,

105
00:05:34.007 --> 00:05:40.000
usually through very simple properties for the environment.

106
00:05:40.000 --> 00:05:42.007
Now, one of the key aspects of auto configuration

107
00:05:42.007 --> 00:05:46.002
is the ability to configure when a class,

108
00:05:46.002 --> 00:05:49.000
property or component is present

109
00:05:49.000 --> 00:05:52.005
and to bypass that configuration when it isn't.

110
00:05:52.005 --> 00:05:55.008
This configuration allows a simple set of defaults

111
00:05:55.008 --> 00:05:59.001
that only get added to the application context

112
00:05:59.001 --> 00:06:04.000
when the associated projects or JAR files are included.

