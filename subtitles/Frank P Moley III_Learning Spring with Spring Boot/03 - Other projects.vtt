WEBVTT
1
00:00:00.002 --> 00:00:02.002
- [Instructor] There are a few other components

2
00:00:02.002 --> 00:00:06.000
and projects that I would like to at least make you aware of

3
00:00:06.000 --> 00:00:08.002
within the Spring ecosystem.

4
00:00:08.002 --> 00:00:12.007
Some of these are their own complete domain area.

5
00:00:12.007 --> 00:00:14.006
Let's start with some of the constructs

6
00:00:14.006 --> 00:00:17.005
from the core Spring framework itself

7
00:00:17.005 --> 00:00:20.005
that we haven't touched in this course.

8
00:00:20.005 --> 00:00:24.001
The first one is SpEL or Spring Expression Language

9
00:00:24.001 --> 00:00:27.002
that can be used to modify properties

10
00:00:27.002 --> 00:00:29.009
based on the presence of some value.

11
00:00:29.009 --> 00:00:33.003
This is really popular when dealing with the injection

12
00:00:33.003 --> 00:00:36.008
of values that differ based on environment,

13
00:00:36.008 --> 00:00:41.005
when you have more than just a simple property to go off of.

14
00:00:41.005 --> 00:00:43.001
Now, we've mentioned AOP,

15
00:00:43.001 --> 00:00:46.002
but we haven't written any aspects.

16
00:00:46.002 --> 00:00:48.004
I have a core Spring framework in depth

17
00:00:48.004 --> 00:00:51.007
in which you actually will write aspects themselves.

18
00:00:51.007 --> 00:00:55.004
But AOP in general allows you the capability

19
00:00:55.004 --> 00:00:57.009
to aspect anything inside your code,

20
00:00:57.009 --> 00:01:01.008
and to use it for repeatable behavior.

21
00:01:01.008 --> 00:01:05.002
Transaction management is something that is very common,

22
00:01:05.002 --> 00:01:08.005
especially in enterprise data applications.

23
00:01:08.005 --> 00:01:11.005
Spring has a rich transaction framework.

24
00:01:11.005 --> 00:01:13.007
Again, based on an aspect

25
00:01:13.007 --> 00:01:16.003
that I encourage you to read deeply about

26
00:01:16.003 --> 00:01:19.000
if you are working on backend systems,

27
00:01:19.000 --> 00:01:23.008
specifically in the enterprise based on RDBMS.

28
00:01:23.008 --> 00:01:27.007
Spring web itself has rich internationalization support

29
00:01:27.007 --> 00:01:30.007
built in such that you can provide bundles

30
00:01:30.007 --> 00:01:33.006
with different translations of the values

31
00:01:33.006 --> 00:01:36.002
in your application, specifically,

32
00:01:36.002 --> 00:01:40.001
those static elements on the page that need to be translated

33
00:01:40.001 --> 00:01:43.006
before making your application available globally.

34
00:01:43.006 --> 00:01:46.005
Spring also has rich support for WebSockets

35
00:01:46.005 --> 00:01:48.009
built into the web.

36
00:01:48.009 --> 00:01:53.005
We've been dealing with traditional web-based requests,

37
00:01:53.005 --> 00:01:57.004
but Spring itself has a very powerful, reactive web model

38
00:01:57.004 --> 00:01:59.000
based on flux.

39
00:01:59.000 --> 00:02:02.002
And if you want to write reactive web services,

40
00:02:02.002 --> 00:02:05.007
I highly suggest you take a look at everything contained

41
00:02:05.007 --> 00:02:08.007
within Spring WebFlux.

42
00:02:08.007 --> 00:02:11.005
JMS is something that is near and dear to my heart

43
00:02:11.005 --> 00:02:14.000
that I've used a lot throughout my career.

44
00:02:14.000 --> 00:02:17.007
And Spring has a JMS template that you can use

45
00:02:17.007 --> 00:02:22.003
to build both producers and consumers of messages.

46
00:02:22.003 --> 00:02:24.008
Spring also allows you to execute tasks

47
00:02:24.008 --> 00:02:28.008
and to schedule those tasks within the framework.

48
00:02:28.008 --> 00:02:30.007
And of course, caching.

49
00:02:30.007 --> 00:02:33.004
Caching is anything that we want to be backed

50
00:02:33.004 --> 00:02:37.002
by a cache store so that our application can save hits

51
00:02:37.002 --> 00:02:40.004
to an underlying database or remote service.

52
00:02:40.004 --> 00:02:43.005
And Spring has a very simple annotation based

53
00:02:43.005 --> 00:02:45.007
caching mechanism.

54
00:02:45.007 --> 00:02:49.005
Now Spring Boot itself also comes with some rich support

55
00:02:49.005 --> 00:02:51.009
for tooling that we haven't touched.

56
00:02:51.009 --> 00:02:54.005
And actuator is one of my favorites.

57
00:02:54.005 --> 00:02:57.003
I've got a course Spring Boot essential training

58
00:02:57.003 --> 00:03:01.000
that will go deep into actuator and how to configure it,

59
00:03:01.000 --> 00:03:04.006
utilize it for operations and ultimately extended

60
00:03:04.006 --> 00:03:09.002
to meet your needs as an operator of an application.

61
00:03:09.002 --> 00:03:11.005
We also haven't really touched much on logging

62
00:03:11.005 --> 00:03:15.000
and logging is something that comes from the core framework,

63
00:03:15.000 --> 00:03:19.000
but more specifically, it's wired for you with Spring Boot.

64
00:03:19.000 --> 00:03:21.000
And traditionally in a microservices,

65
00:03:21.000 --> 00:03:24.009
cloud native environment, we're going to log to standard out.

66
00:03:24.009 --> 00:03:28.002
So we need to have structured logs that can be picked up

67
00:03:28.002 --> 00:03:30.005
and sent to our log aggregation.

68
00:03:30.005 --> 00:03:33.003
And Spring Boot provides that out of the box

69
00:03:33.003 --> 00:03:36.005
with additional customization that you can do

70
00:03:36.005 --> 00:03:40.007
such as logging output and behavior of those logs.

71
00:03:40.007 --> 00:03:43.007
There's also a great CLI that you can use

72
00:03:43.007 --> 00:03:45.007
to build applications.

73
00:03:45.007 --> 00:03:47.002
And it's something that I've used

74
00:03:47.002 --> 00:03:49.003
when I've tried to automate the creation

75
00:03:49.003 --> 00:03:52.002
of new applications, using both the combination

76
00:03:52.002 --> 00:03:55.006
of the Spring Initializr web service in the CLI.

77
00:03:55.006 --> 00:03:58.007
It can be very easy to start a new application

78
00:03:58.007 --> 00:04:02.008
without using things like an IDE or a web page.

79
00:04:02.008 --> 00:04:05.000
And finally, I want to touch on some of those

80
00:04:05.000 --> 00:04:07.007
additional projects within the Spring ecosystem

81
00:04:07.007 --> 00:04:09.007
that we haven't looked at.

82
00:04:09.007 --> 00:04:13.008
AMQP is a very rich message protocol that you can use

83
00:04:13.008 --> 00:04:19.004
for a wide variety of AMQP based solutions like Rabbit.

84
00:04:19.004 --> 00:04:23.001
Spring Batch allows you to do batch operations within Spring

85
00:04:23.001 --> 00:04:27.005
and provides a run time to manage those batches themselves.

86
00:04:27.005 --> 00:04:30.000
And if you find yourself doing a lot of batch work

87
00:04:30.000 --> 00:04:31.004
in your enterprise,

88
00:04:31.004 --> 00:04:34.000
you might take a look at Spring Batch as the management,

89
00:04:34.000 --> 00:04:38.006
as well as the structure of building those batch jobs.

90
00:04:38.006 --> 00:04:41.000
I have an entire course on Spring Cloud,

91
00:04:41.000 --> 00:04:45.000
which encompasses many of Netflix open source offerings

92
00:04:45.000 --> 00:04:46.003
wrapped into Spring

93
00:04:46.003 --> 00:04:50.006
because Netflix is a very active user of Spring.

94
00:04:50.006 --> 00:04:53.002
And they contributed a lot of their cloud-based

95
00:04:53.002 --> 00:04:56.006
and cloud native based systems to the community

96
00:04:56.006 --> 00:04:58.003
for us to use.

97
00:04:58.003 --> 00:05:00.005
Again, that core Spring, Spring Cloud

98
00:05:00.005 --> 00:05:03.002
will dig into some of those elements,

99
00:05:03.002 --> 00:05:06.002
but Spring Cloud itself is very rich

100
00:05:06.002 --> 00:05:09.006
for all different kinds of environments.

101
00:05:09.006 --> 00:05:12.008
GraphQL is a relatively new player in the market,

102
00:05:12.008 --> 00:05:16.002
but Spring allows you to use Java GraphQL

103
00:05:16.002 --> 00:05:22.002
and expose GraphQL resources and mutations out to the world

104
00:05:22.002 --> 00:05:24.006
through the use of Spring.

105
00:05:24.006 --> 00:05:26.004
Spring Session allows you

106
00:05:26.004 --> 00:05:31.001
to manage the session of a web user with robust support

107
00:05:31.001 --> 00:05:34.004
for backing those with data stores.

108
00:05:34.004 --> 00:05:37.006
And Spring Integration is a project that allows you

109
00:05:37.006 --> 00:05:41.008
to use basic enterprise integration strategies

110
00:05:41.008 --> 00:05:45.002
within Spring, such as channels.

111
00:05:45.002 --> 00:05:47.000
This is a very deep topic.

112
00:05:47.000 --> 00:05:49.003
And if you find yourself doing a lot of ETL

113
00:05:49.003 --> 00:05:51.003
and integration type work,

114
00:05:51.003 --> 00:05:54.008
you might find Spring Integration to be a very valuable tool

115
00:05:54.008 --> 00:05:56.009
in your tool suite.

116
00:05:56.009 --> 00:06:00.002
And finally Spring Shell allows you to write

117
00:06:00.002 --> 00:06:04.000
your own command line application using Spring

118
00:06:04.000 --> 00:06:06.006
so that you can distribute it to either your users

119
00:06:06.006 --> 00:06:07.009
or your customers,

120
00:06:07.009 --> 00:06:11.000
or just keep it for yourself for operational needs,

121
00:06:11.000 --> 00:06:13.006
where you want to write a simple shell application

122
00:06:13.006 --> 00:06:17.000
that you can use for various topics.

