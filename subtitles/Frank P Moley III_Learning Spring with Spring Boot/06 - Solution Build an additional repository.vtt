WEBVTT
1
00:00:00.000 --> 00:00:05.002
(cheerful music)

2
00:00:05.002 --> 00:00:06.001
- [Teacher] So now it's time

3
00:00:06.001 --> 00:00:09.005
for my solution to this exercise.

4
00:00:09.005 --> 00:00:11.003
So, the first things that I did

5
00:00:11.003 --> 00:00:15.008
was I went into source main Java into our base package,

6
00:00:15.008 --> 00:00:18.007
and then the data package within there.

7
00:00:18.007 --> 00:00:20.009
And I created four classes.

8
00:00:20.009 --> 00:00:24.000
Well, technically two interfaces and two classes.

9
00:00:24.000 --> 00:00:26.006
The first class is my guest at Java.

10
00:00:26.006 --> 00:00:30.008
I put in all of the values that we needed,

11
00:00:30.008 --> 00:00:32.006
as well as the two string method,

12
00:00:32.006 --> 00:00:35.000
getters and setters for everything.

13
00:00:35.000 --> 00:00:37.006
I then created the reservation at Java,

14
00:00:37.006 --> 00:00:38.008
and very much the same thing,

15
00:00:38.008 --> 00:00:41.005
I created the entity and the table and the columns

16
00:00:41.005 --> 00:00:42.008
for all of our fields.

17
00:00:42.008 --> 00:00:45.005
And then I did a two string on that.

18
00:00:45.005 --> 00:00:50.003
Now for guests repository, I extended JPA repository,

19
00:00:50.003 --> 00:00:53.006
very similar to the crowd repository we used before.

20
00:00:53.006 --> 00:00:55.003
I only did this so that we could show

21
00:00:55.003 --> 00:00:57.006
that there are various implementations

22
00:00:57.006 --> 00:00:59.006
of the repository itself.

23
00:00:59.006 --> 00:01:01.006
And for the purposes of this course,

24
00:01:01.006 --> 00:01:04.008
either one of them would do just fine.

25
00:01:04.008 --> 00:01:08.000
Now in the reservation repository, when I created that,

26
00:01:08.000 --> 00:01:11.000
I, again, extended JPA repository,

27
00:01:11.000 --> 00:01:14.006
but I also created a method that returns an

28
00:01:14.006 --> 00:01:16.003
enterable reservation.

29
00:01:16.003 --> 00:01:21.004
You'll notice the name, find reservation by reservation date

30
00:01:21.004 --> 00:01:24.005
and the find reservation by reservation date

31
00:01:24.005 --> 00:01:28.004
is the consistent way that you would write a name

32
00:01:28.004 --> 00:01:31.002
to do a select star from reservation

33
00:01:31.002 --> 00:01:34.001
where reservation date equals some value.

34
00:01:34.001 --> 00:01:38.001
And you'll notice that I brought in java.cql.Date

35
00:01:38.001 --> 00:01:41.000
as an import, and that's because we're working with SQLs.

36
00:01:41.000 --> 00:01:42.009
So I need a SQL date.

37
00:01:42.009 --> 00:01:45.005
So we're probably going to need to convert that later on

38
00:01:45.005 --> 00:01:49.004
in the course from a Java.udl date into a SQL date,

39
00:01:49.004 --> 00:01:51.004
and then back the other way.

40
00:01:51.004 --> 00:01:55.008
But for now, that's what I did to the actual core classes.

41
00:01:55.008 --> 00:01:57.008
Now, just to show that this is working,

42
00:01:57.008 --> 00:02:00.004
I went into the app startup event,

43
00:02:00.004 --> 00:02:02.006
and I injected a guest repository

44
00:02:02.006 --> 00:02:05.007
and a reservation repository into our event.

45
00:02:05.007 --> 00:02:07.008
And then on application event method,

46
00:02:07.008 --> 00:02:09.009
you'll see that much like I did with rooms,

47
00:02:09.009 --> 00:02:11.007
I now spit out all of the guests,

48
00:02:11.007 --> 00:02:14.009
and then all of the reservations.

49
00:02:14.009 --> 00:02:18.001
So now we'll start up our application,

50
00:02:18.001 --> 00:02:22.004
and we will expand out our console.

51
00:02:22.004 --> 00:02:24.002
And you'll see that once again,

52
00:02:24.002 --> 00:02:25.008
I've returned to the embedded database

53
00:02:25.008 --> 00:02:28.007
because our script utils are running.

54
00:02:28.007 --> 00:02:30.006
And then after the application starts,

55
00:02:30.006 --> 00:02:31.009
I spit out all of the rooms.

56
00:02:31.009 --> 00:02:35.006
I'm also spitting out all of the guests,

57
00:02:35.006 --> 00:02:38.003
and then at the very end, our loan reservation.

58
00:02:38.003 --> 00:02:40.008
Take note of that date because we are going to need that

59
00:02:40.008 --> 00:02:41.007
later on in the course.

60
00:02:41.007 --> 00:02:45.001
But for now, you can see that we've used our database.

61
00:02:45.001 --> 00:02:48.002
We've built a couple repositories on our own,

62
00:02:48.002 --> 00:02:50.001
as well as the one that we did together.

63
00:02:50.001 --> 00:02:53.006
And we've got proof now that the database itself is working

64
00:02:53.006 --> 00:02:55.007
and our repositories are working.

65
00:02:55.007 --> 00:02:56.005
Now in the real world,

66
00:02:56.005 --> 00:02:57.009
we'd probably do this with some tests,

67
00:02:57.009 --> 00:03:00.009
but for the purposes of this course right now,

68
00:03:00.009 --> 00:03:03.005
this is good enough before we jump into our next chapter

69
00:03:03.005 --> 00:03:05.000
on dependency injection.

