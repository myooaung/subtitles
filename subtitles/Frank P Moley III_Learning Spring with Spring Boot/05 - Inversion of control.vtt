WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Now, we've talked a little bit about Spring

2
00:00:01.008 --> 00:00:05.007
and Spring boot, and we've created our initial project.

3
00:00:05.007 --> 00:00:08.002
But before we get into the meat of the code portion

4
00:00:08.002 --> 00:00:09.005
of this course,

5
00:00:09.005 --> 00:00:11.004
I really want to spend a bit of time talking

6
00:00:11.004 --> 00:00:14.001
about two very important topics.

7
00:00:14.001 --> 00:00:16.003
The first of which is Inversion of Control,

8
00:00:16.003 --> 00:00:19.005
and how does it leverage in Spring.

9
00:00:19.005 --> 00:00:22.001
So let's start our discussion of Inversion of Control

10
00:00:22.001 --> 00:00:24.005
with the pattern itself.

11
00:00:24.005 --> 00:00:27.008
In IoC, the container itself maintains

12
00:00:27.008 --> 00:00:31.007
your clash dependencies for the entire life cycle

13
00:00:31.007 --> 00:00:34.001
of those dependencies.

14
00:00:34.001 --> 00:00:35.009
From the IoC container,

15
00:00:35.009 --> 00:00:38.004
objects can be injected as dependencies

16
00:00:38.004 --> 00:00:42.006
into other classes at either startup time or runtime,

17
00:00:42.006 --> 00:00:46.005
depending on how the dependencies are defined in the class

18
00:00:46.005 --> 00:00:49.000
and how the container manages them.

19
00:00:49.000 --> 00:00:51.000
For the most part with Spring,

20
00:00:51.000 --> 00:00:55.003
the dependencies are injected at startup of the application

21
00:00:55.003 --> 00:00:58.002
as they're added to the BeanFactory.

22
00:00:58.002 --> 00:01:00.001
My course, Spring: Framework in Depth,

23
00:01:00.001 --> 00:01:02.003
here in the LinkedIn Learning Catalog

24
00:01:02.003 --> 00:01:06.009
goes into this process in very specific detail.

25
00:01:06.009 --> 00:01:10.006
One of the key aspects of IoC that is similar

26
00:01:10.006 --> 00:01:13.000
with dependency injection is that objects

27
00:01:13.000 --> 00:01:15.007
don't create dependent objects

28
00:01:15.007 --> 00:01:18.002
in their constructors or methods.

29
00:01:18.002 --> 00:01:22.005
Instead, the container manages them and injects them

30
00:01:22.005 --> 00:01:24.004
in as needed.

31
00:01:24.004 --> 00:01:29.002
Through this course, you will see various examples of this.

32
00:01:29.002 --> 00:01:32.001
Now, I want to walk through real quick, visually,

33
00:01:32.001 --> 00:01:35.009
a traditional dependency management system.

34
00:01:35.009 --> 00:01:40.006
So we start with a class that contains our main method.

35
00:01:40.006 --> 00:01:43.002
Now it is going to create two classes

36
00:01:43.002 --> 00:01:46.000
that it needs to do work.

37
00:01:46.000 --> 00:01:49.003
Now within the second class, during its construction,

38
00:01:49.003 --> 00:01:53.007
it needs to also create a third class to do work.

39
00:01:53.007 --> 00:01:58.001
That class has two more classes that it needs to do work.

40
00:01:58.001 --> 00:02:00.005
So with that, in that main method

41
00:02:00.005 --> 00:02:02.005
when we created our first two classes,

42
00:02:02.005 --> 00:02:04.002
we ended up getting five classes

43
00:02:04.002 --> 00:02:07.009
that all had to be managed at their creation

44
00:02:07.009 --> 00:02:10.000
from that simple main method.

45
00:02:10.000 --> 00:02:12.005
Now, if you think about configuring those classes

46
00:02:12.005 --> 00:02:14.002
as you're creating them,

47
00:02:14.002 --> 00:02:16.008
I now need to know things three levels deep

48
00:02:16.008 --> 00:02:20.001
and how to properly create them for the life cycle

49
00:02:20.001 --> 00:02:21.008
of my application.

50
00:02:21.008 --> 00:02:24.007
And as you might imagine, that can cause a lot of pain

51
00:02:24.007 --> 00:02:28.002
when you get into really large applications.

52
00:02:28.002 --> 00:02:33.000
Now enter into the picture IoC-based dependency management.

53
00:02:33.000 --> 00:02:35.003
With IoC-based dependency management,

54
00:02:35.003 --> 00:02:38.004
we start with an IoC container,

55
00:02:38.004 --> 00:02:41.001
and that IoC container is usually triggered

56
00:02:41.001 --> 00:02:43.005
from the main class.

57
00:02:43.005 --> 00:02:46.001
Now that IoC container

58
00:02:46.001 --> 00:02:50.003
builds itself specific objects that are needed,

59
00:02:50.003 --> 00:02:52.005
that are referenced in main.

60
00:02:52.005 --> 00:02:55.008
And then, those classes again get their dependencies,

61
00:02:55.008 --> 00:02:59.003
but everything is coming from main itself.

62
00:02:59.003 --> 00:03:02.002
So what you will see is is that those become

63
00:03:02.002 --> 00:03:05.000
just simply pointers in those classes.

64
00:03:05.000 --> 00:03:08.007
And the IoC container is doing the injection

65
00:03:08.007 --> 00:03:12.008
of those specific classes into the parent class.

66
00:03:12.008 --> 00:03:15.001
This is much easier to manage because now,

67
00:03:15.001 --> 00:03:18.000
I don't need to know about how to construct things

68
00:03:18.000 --> 00:03:19.002
three layers deep.

69
00:03:19.002 --> 00:03:21.006
They're simply configured in the way that I write

70
00:03:21.006 --> 00:03:23.006
my application to begin with.

71
00:03:23.006 --> 00:03:27.000
And then the IoC container manages the life cycle

72
00:03:27.000 --> 00:03:29.007
of those dependencies.

73
00:03:29.007 --> 00:03:31.008
Now, I want to get a little bit more specific

74
00:03:31.008 --> 00:03:35.003
about how Spring uses the IoC.

75
00:03:35.003 --> 00:03:39.005
Once again, the BeanFactory is the IoC container.

76
00:03:39.005 --> 00:03:41.004
You usually, if ever,

77
00:03:41.004 --> 00:03:45.005
do not interact with the BeanFactory directly.

78
00:03:45.005 --> 00:03:47.005
If for some reason, you find yourself needing

79
00:03:47.005 --> 00:03:51.001
to impact the behavior of the BeanFactory,

80
00:03:51.001 --> 00:03:55.008
you can utilize various hooks in the Spring bean life cycle,

81
00:03:55.008 --> 00:03:58.004
things like a BeanFactory post processor

82
00:03:58.004 --> 00:04:00.005
or a bean processor.

83
00:04:00.005 --> 00:04:02.009
Again, I talk about these a lot in my course,

84
00:04:02.009 --> 00:04:06.001
"Spring: Framework in Depth".

85
00:04:06.001 --> 00:04:10.007
The application context is what you interact with,

86
00:04:10.007 --> 00:04:15.003
even if you don't do it yourself by writing code.

87
00:04:15.003 --> 00:04:17.004
In our example, we never interacted

88
00:04:17.004 --> 00:04:19.005
with the application context,

89
00:04:19.005 --> 00:04:21.005
but because it's a Spring Boot application,

90
00:04:21.005 --> 00:04:23.009
that context was started for us

91
00:04:23.009 --> 00:04:27.002
and triggered the application life cycle.

92
00:04:27.002 --> 00:04:30.005
Many times, this isn't even needed because of the way

93
00:04:30.005 --> 00:04:33.000
that Spring Boot does its thing.

94
00:04:33.000 --> 00:04:36.001
But the application context is a wrapper

95
00:04:36.001 --> 00:04:37.006
around the BeanFactory,

96
00:04:37.006 --> 00:04:40.006
and they share some common interfaces.

97
00:04:40.006 --> 00:04:43.008
And you can any Spring Boot application

98
00:04:43.008 --> 00:04:45.009
or any Spring application,

99
00:04:45.009 --> 00:04:50.000
interact with the application context if you need to.

100
00:04:50.000 --> 00:04:52.003
You can even create beans that are aware

101
00:04:52.003 --> 00:04:55.003
of the application context.

102
00:04:55.003 --> 00:04:58.005
Now that BeanFactory maintains references

103
00:04:58.005 --> 00:05:01.008
to the Spring beans that either you configure,

104
00:05:01.008 --> 00:05:05.004
or Spring Boot auto-configures for you.

105
00:05:05.004 --> 00:05:09.000
References are not added to the BeanFactory.

106
00:05:09.000 --> 00:05:10.002
They're configured,

107
00:05:10.002 --> 00:05:13.006
and Spring handles object initialization,

108
00:05:13.006 --> 00:05:18.007
as well as the instantiation of those objects.

109
00:05:18.007 --> 00:05:21.006
Now, once beans have been initialized,

110
00:05:21.006 --> 00:05:25.001
an order of operations for construction is created

111
00:05:25.001 --> 00:05:27.001
based on the dependencies,

112
00:05:27.001 --> 00:05:31.005
and the beans are that instantiated in proper order

113
00:05:31.005 --> 00:05:33.006
by the BeanFactory.

114
00:05:33.006 --> 00:05:35.008
If you ever create a circular dependency

115
00:05:35.008 --> 00:05:38.009
where two beans rely on each other,

116
00:05:38.009 --> 00:05:42.001
you will get warnings of such a circular dependency

117
00:05:42.001 --> 00:05:46.000
when you try to start or compile your application.

118
00:05:46.000 --> 00:05:49.005
Spring manages these beans for the most part from startup

119
00:05:49.005 --> 00:05:51.001
to shut down.

120
00:05:51.001 --> 00:05:52.009
Now, there are a couple of exceptions,

121
00:05:52.009 --> 00:05:56.000
and we'll talk about those cases later on,

122
00:05:56.000 --> 00:05:59.000
but for the most part, they're always managed by Spring.

