WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Instructor] So now it's time

2
00:00:01.003 --> 00:00:04.004
to run our first snippet of code for this course.

3
00:00:04.004 --> 00:00:08.006
We will be implementing our first spring data repository

4
00:00:08.006 --> 00:00:11.009
and using our embedded databases as a data store.

5
00:00:11.009 --> 00:00:14.009
So let's jump into the IDE.

6
00:00:14.009 --> 00:00:16.009
So the first thing I want to do is go into source, main,

7
00:00:16.009 --> 00:00:20.006
resources, and we're going to open up the schema file.

8
00:00:20.006 --> 00:00:24.005
'Cause we're going to use this schema file to do work

9
00:00:24.005 --> 00:00:25.009
when we're building things.

10
00:00:25.009 --> 00:00:28.008
It makes it easier to have it up in front of us.

11
00:00:28.008 --> 00:00:30.009
So now let's go to source, main, Java.

12
00:00:30.009 --> 00:00:33.002
And in our main package,

13
00:00:33.002 --> 00:00:38.007
let's add a new package called data.

14
00:00:38.007 --> 00:00:40.004
Now in our data package,

15
00:00:40.004 --> 00:00:43.000
we will create a Java class

16
00:00:43.000 --> 00:00:47.009
and we are going to call this class, Room.

17
00:00:47.009 --> 00:00:49.006
Now there's a few things that we need to do

18
00:00:49.006 --> 00:00:52.004
to our Room class. The first thing that we're going to do

19
00:00:52.004 --> 00:00:53.002
is we're going to

20
00:00:53.002 --> 00:00:58.009
annotate it with @Entity from javax.persistence.

21
00:00:58.009 --> 00:01:02.005
Then we are going to annotate it with @Table,

22
00:01:02.005 --> 00:01:05.005
and I'm going to specify the name of the Table

23
00:01:05.005 --> 00:01:07.004
like it is in the schema.

24
00:01:07.004 --> 00:01:11.000
With some databases this is not a requirement,

25
00:01:11.000 --> 00:01:11.009
but with this,

26
00:01:11.009 --> 00:01:14.003
I find it removes confusion

27
00:01:14.003 --> 00:01:16.005
in case you're not able to use H2

28
00:01:16.005 --> 00:01:19.001
and you've got to use another embedded database.

29
00:01:19.001 --> 00:01:23.000
So let's just define our Table name based on the schema,

30
00:01:23.000 --> 00:01:26.001
which if we look at the schema file is ROOM in all caps.

31
00:01:26.001 --> 00:01:26.009
And again,

32
00:01:26.009 --> 00:01:30.008
we're going to import this from javax.persistence.

33
00:01:30.008 --> 00:01:32.007
Now, if we go look at our Room class, once again,

34
00:01:32.007 --> 00:01:35.009
you'll see that we have four values in here

35
00:01:35.009 --> 00:01:40.000
and I'm simply going to copy those schema definitions

36
00:01:40.000 --> 00:01:41.009
and paste them into my code.

37
00:01:41.009 --> 00:01:44.001
And I know that this is not going to compile,

38
00:01:44.001 --> 00:01:44.009
but that's fine.

39
00:01:44.009 --> 00:01:47.005
It gives me something heads up to look at.

40
00:01:47.005 --> 00:01:49.002
So we're going to start with our Room ID.

41
00:01:49.002 --> 00:01:53.006
So we're going to call this @Id from javax.persistence,

42
00:01:53.006 --> 00:01:56.002
@GeneratedValue, and the GeneratedValue

43
00:01:56.002 --> 00:02:00.006
that we will use is a strategy of auto.

44
00:02:00.006 --> 00:02:02.004
Now this is the default strategy,

45
00:02:02.004 --> 00:02:07.004
but I still prefer to go ahead and specify it.

46
00:02:07.004 --> 00:02:09.008
Now there's one more annotation that we need to specify.

47
00:02:09.008 --> 00:02:13.001
And this is Column, and much like Table,

48
00:02:13.001 --> 00:02:16.000
there are defaults that oftentimes will work,

49
00:02:16.000 --> 00:02:18.003
but I prefer to go ahead and specify them

50
00:02:18.003 --> 00:02:20.000
just to be very clear.

51
00:02:20.000 --> 00:02:23.006
Then I don't have to deal with issues across databases.

52
00:02:23.006 --> 00:02:27.002
Now this is going to be a long and an id

53
00:02:27.002 --> 00:02:31.000
and BIGSERIAL and SQL will translate to a long.

54
00:02:31.000 --> 00:02:33.006
So now we're going to do the same, put a Column,

55
00:02:33.006 --> 00:02:38.000
and then define our variable for the next three entries.

56
00:02:38.000 --> 00:02:40.002
Now that we've typed all of our values in,

57
00:02:40.002 --> 00:02:42.006
the only thing left on this class is to generate

58
00:02:42.006 --> 00:02:44.003
some Getters and Setters.

59
00:02:44.003 --> 00:02:45.009
And I'm going to go ahead and do that

60
00:02:45.009 --> 00:02:48.004
using my IDE with a plugin

61
00:02:48.004 --> 00:02:51.009
that allows me to do generating of Getters and Setters.

62
00:02:51.009 --> 00:02:53.004
Now you can do a few things.

63
00:02:53.004 --> 00:02:55.001
You could make this a Lombok class

64
00:02:55.001 --> 00:02:57.009
by adding Lombok to your spring config.

65
00:02:57.009 --> 00:03:00.007
Great, it'll do the Getters and Setters for you.

66
00:03:00.007 --> 00:03:04.000
Or you can go ahead and use the plugin in your id

67
00:03:04.000 --> 00:03:10.000
like I'm doing so that we get Getters and Setters.

68
00:03:10.000 --> 00:03:11.002
Now, there's one other thing

69
00:03:11.002 --> 00:03:14.008
that I like to do on these classes, just for demo.

70
00:03:14.008 --> 00:03:21.007
And that is, I am going to override the toString method.

71
00:03:21.007 --> 00:03:25.002
Now that that is done, we are done with our Room class.

72
00:03:25.002 --> 00:03:29.001
So now we're going to create a new file.

73
00:03:29.001 --> 00:03:31.000
And this time we are going to create

74
00:03:31.000 --> 00:03:34.001
an Interface instead of a class.

75
00:03:34.001 --> 00:03:36.003
We will call it RoomRepository.

76
00:03:36.003 --> 00:03:38.007
I'm going to select Interface.

77
00:03:38.007 --> 00:03:40.009
So the first thing we're going to do to our Room

78
00:03:40.009 --> 00:03:44.009
is extend CrudRepository.

79
00:03:44.009 --> 00:03:47.004
This is a templative value that takes two things.

80
00:03:47.004 --> 00:03:50.000
First of all, it takes the entity.

81
00:03:50.000 --> 00:03:53.003
Then it takes the class type of the id.

82
00:03:53.003 --> 00:03:55.009
And in our case, it is a little L long,

83
00:03:55.009 --> 00:03:59.008
which means we need to put the class type of big L Long.

84
00:03:59.008 --> 00:04:02.005
Now, at this point we are done.

85
00:04:02.005 --> 00:04:05.009
We have create, get all, get by id.

86
00:04:05.009 --> 00:04:07.008
We've got everything that we need,

87
00:04:07.008 --> 00:04:09.005
but there's one other thing that I add.

88
00:04:09.005 --> 00:04:11.008
It is not required,

89
00:04:11.008 --> 00:04:15.008
but I find that it makes it clearer when reading code.

90
00:04:15.008 --> 00:04:18.001
There's a stereotype of @Repository.

91
00:04:18.001 --> 00:04:20.008
Now this is already on the CrudRepository,

92
00:04:20.008 --> 00:04:21.009
but by putting this here,

93
00:04:21.009 --> 00:04:24.009
it makes it very clear to anybody looking at your code,

94
00:04:24.009 --> 00:04:27.008
that this is a data repository.

95
00:04:27.008 --> 00:04:30.000
So now we're going to add one more thing,

96
00:04:30.000 --> 00:04:33.005
just so we can visualize our data access working.

97
00:04:33.005 --> 00:04:38.000
We're going to create a new package called util.

98
00:04:38.000 --> 00:04:42.005
And in that package, we are going to create a new Class.

99
00:04:42.005 --> 00:04:48.008
And that Class is going to be AppStartupEvent.

100
00:04:48.008 --> 00:04:51.002
We're going to annotate this with @Component

101
00:04:51.002 --> 00:04:54.002
so that spring will pick it up.

102
00:04:54.002 --> 00:04:59.003
This Class is going to implement our ApplicationListener.

103
00:04:59.003 --> 00:05:00.005
And specifically,

104
00:05:00.005 --> 00:05:05.005
we're going to look for the ApplicationReadyEvent.

105
00:05:05.005 --> 00:05:06.008
Now, the reason we're doing this

106
00:05:06.008 --> 00:05:08.006
is so that we can wait until spring

107
00:05:08.006 --> 00:05:12.007
is actually done building and ready to do work

108
00:05:12.007 --> 00:05:14.007
before we go and query the database,

109
00:05:14.007 --> 00:05:16.001
because that's very important,

110
00:05:16.001 --> 00:05:18.007
that the database is all set up

111
00:05:18.007 --> 00:05:22.002
by the time we run this code.

112
00:05:22.002 --> 00:05:27.000
So in here, we're going to add a few values.

113
00:05:27.000 --> 00:05:28.002
First thing we're going to do

114
00:05:28.002 --> 00:05:34.003
is do a private final RoomRepository.

115
00:05:34.003 --> 00:05:36.002
And then because I've made that final,

116
00:05:36.002 --> 00:05:39.000
we need to add it to a constructor.

117
00:05:39.000 --> 00:05:40.006
Now in our override method,

118
00:05:40.006 --> 00:05:44.006
we are going to do an Iterable Room.

119
00:05:44.006 --> 00:05:50.001
We will call it rooms=this.roomRepository.

120
00:05:50.001 --> 00:05:52.006
notice all of these methods that we never coded.

121
00:05:52.006 --> 00:05:56.004
We got all of those for free and they actually will do work.

122
00:05:56.004 --> 00:05:58.008
So we're going to go get all of the Rooms

123
00:05:58.008 --> 00:06:02.001
and then we will do a Rooms for each.

124
00:06:02.001 --> 00:06:09.000
And in here, we're simply going to do System.out::println.

125
00:06:09.000 --> 00:06:10.004
And that's all there is to it.

126
00:06:10.004 --> 00:06:16.004
Let's go ahead and start up our application.

127
00:06:16.004 --> 00:06:20.005
And what you see is after the application started,

128
00:06:20.005 --> 00:06:22.008
we now have standard output being written

129
00:06:22.008 --> 00:06:25.004
that is listing each of our Rooms

130
00:06:25.004 --> 00:06:29.001
based on our toString method that came from the database.

131
00:06:29.001 --> 00:06:30.005
We never loaded those in,

132
00:06:30.005 --> 00:06:32.002
that literally was a database call

133
00:06:32.002 --> 00:06:36.004
to the embedded database with zero data access code.

134
00:06:36.004 --> 00:06:39.002
All we did was code an Interface and an entity

135
00:06:39.002 --> 00:06:41.000
that represented the Table.

