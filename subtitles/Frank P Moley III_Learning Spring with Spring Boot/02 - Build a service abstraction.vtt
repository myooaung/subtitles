WEBVTT
1
00:00:00.004 --> 00:00:02.002
- [Instructor] One often overlooked part

2
00:00:02.002 --> 00:00:07.002
of application design is service abstractions.

3
00:00:07.002 --> 00:00:09.001
One of the first things we need to discuss

4
00:00:09.001 --> 00:00:12.005
is why even build service abstractions.

5
00:00:12.005 --> 00:00:15.007
One of the primary cases is to encapsulate

6
00:00:15.007 --> 00:00:17.009
layers of your code.

7
00:00:17.009 --> 00:00:20.009
Often, you want to separate your view layer

8
00:00:20.009 --> 00:00:24.002
from your data layer, and building service abstractions

9
00:00:24.002 --> 00:00:27.007
between them allow you to build business logic

10
00:00:27.007 --> 00:00:31.002
into a layer that isn't your front end.

11
00:00:31.002 --> 00:00:36.001
They can also be used to extract third-party APIs.

12
00:00:36.001 --> 00:00:38.006
This is very powerful since those vendors

13
00:00:38.006 --> 00:00:41.002
tend to change over time.

14
00:00:41.002 --> 00:00:42.009
By building an abstraction,

15
00:00:42.009 --> 00:00:48.006
you can isolate the impacted code if something does change.

16
00:00:48.006 --> 00:00:52.005
You can also use them to simplify implementations.

17
00:00:52.005 --> 00:00:56.003
Say that you have a data layer for multiple use cases.

18
00:00:56.003 --> 00:00:59.008
You can expose only those implementations necessary

19
00:00:59.008 --> 00:01:02.006
for a given use case in code,

20
00:01:02.006 --> 00:01:06.009
avoiding the noise of those use cases that don't pertain

21
00:01:06.009 --> 00:01:11.001
to your specific business case that you're working on.

22
00:01:11.001 --> 00:01:14.003
They can also be built with multiple implementations,

23
00:01:14.003 --> 00:01:18.005
if needed, such as swapping an SMS provider

24
00:01:18.005 --> 00:01:24.006
based on geolocation, a task I have done just as such.

25
00:01:24.006 --> 00:01:26.008
This is similar to a factory pattern,

26
00:01:26.008 --> 00:01:29.008
and often we use a factory to serve

27
00:01:29.008 --> 00:01:33.003
the proper implementation when needed.

28
00:01:33.003 --> 00:01:36.002
So, now, it's time to talk about how we build one

29
00:01:36.002 --> 00:01:40.001
and, specifically, focusing on the Spring Framework.

30
00:01:40.001 --> 00:01:42.006
So, first of all, we define our interface

31
00:01:42.006 --> 00:01:46.002
or our class if we're not using interfaces,

32
00:01:46.002 --> 00:01:48.003
although at the surface boundary level,

33
00:01:48.003 --> 00:01:52.005
interfaces really are something that you want to focus on.

34
00:01:52.005 --> 00:01:57.009
We then create the API of our interface or class.

35
00:01:57.009 --> 00:02:01.004
Now we get to the point of injecting dependencies,

36
00:02:01.004 --> 00:02:05.007
and this is really where we dig into the IoC container.

37
00:02:05.007 --> 00:02:08.000
If we have multiple implementations

38
00:02:08.000 --> 00:02:11.005
and each of those has multiple dependencies,

39
00:02:11.005 --> 00:02:14.005
we now have to build a whole bunch of code

40
00:02:14.005 --> 00:02:16.006
to create those dependencies

41
00:02:16.006 --> 00:02:19.004
when we create those implementations.

42
00:02:19.004 --> 00:02:23.000
By allowing Spring to manage these dependencies,

43
00:02:23.000 --> 00:02:26.001
they will be injected in at the right time

44
00:02:26.001 --> 00:02:28.008
and they can more effectively be shared,

45
00:02:28.008 --> 00:02:33.000
for instance, if a person data service needs to be shared

46
00:02:33.000 --> 00:02:35.000
across both your accounting services

47
00:02:35.000 --> 00:02:37.005
and your reservation services.

48
00:02:37.005 --> 00:02:41.003
By using dependency injection, we create one instance

49
00:02:41.003 --> 00:02:45.003
of the person service and use it everywhere.

50
00:02:45.003 --> 00:02:47.005
Once we have our service implementation

51
00:02:47.005 --> 00:02:51.000
and the dependencies in it, along with the API,

52
00:02:51.000 --> 00:02:55.000
we can now annotate or configure our class

53
00:02:55.000 --> 00:02:57.005
to be managed by Spring itself

54
00:02:57.005 --> 00:03:01.004
so that it too can be injected where needed.

55
00:03:01.004 --> 00:03:05.003
And then, finally, you will code your implementation

56
00:03:05.003 --> 00:03:08.008
so that it is specific to the use cases at hand.

57
00:03:08.008 --> 00:03:11.003
Now, of course, these can be swapped in order,

58
00:03:11.003 --> 00:03:14.007
but this is generally the direction that I use

59
00:03:14.007 --> 00:03:17.004
when I'm building out a service

60
00:03:17.004 --> 00:03:20.005
because I use a lot of test-driven development.

61
00:03:20.005 --> 00:03:23.007
By creating the class, and the API,

62
00:03:23.007 --> 00:03:27.006
and defining my dependencies, I can now mock it

63
00:03:27.006 --> 00:03:31.007
and test it before the implementation is written.

64
00:03:31.007 --> 00:03:35.003
That way I know that the implementation passing

65
00:03:35.003 --> 00:03:37.004
means that the tests are passing,

66
00:03:37.004 --> 00:03:41.000
which is a very fundamental concept with TDD.

