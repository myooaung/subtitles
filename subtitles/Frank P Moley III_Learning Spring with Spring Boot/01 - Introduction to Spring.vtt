WEBVTT
1
00:00:00.005 --> 00:00:03.001
- [Instructor] Spring is by far the single most popular

2
00:00:03.001 --> 00:00:06.000
and arguably the most powerful framework

3
00:00:06.000 --> 00:00:08.006
for the JVM available today.

4
00:00:08.006 --> 00:00:11.002
We will begin this course with an introduction

5
00:00:11.002 --> 00:00:13.008
to the framework itself.

6
00:00:13.008 --> 00:00:15.009
Now, let's start our journey with Spring

7
00:00:15.009 --> 00:00:17.004
by talking about the purpose,

8
00:00:17.004 --> 00:00:20.007
and some of the benefits of the framework itself.

9
00:00:20.007 --> 00:00:22.006
The Spring framework is built and designed

10
00:00:22.006 --> 00:00:25.001
such that it provides comprehensive support

11
00:00:25.001 --> 00:00:28.008
for developing applications for the JVM,

12
00:00:28.008 --> 00:00:31.006
including abstractions for some of the most powerful

13
00:00:31.006 --> 00:00:34.006
and common enterprise systems integrations,

14
00:00:34.006 --> 00:00:38.005
specifically around common infrastructure.

15
00:00:38.005 --> 00:00:41.000
Spring essentially is designed to provide

16
00:00:41.000 --> 00:00:44.004
the plumbing for using these enterprise offerings

17
00:00:44.004 --> 00:00:47.005
and common components used in both internet

18
00:00:47.005 --> 00:00:50.005
and enterprise application development.

19
00:00:50.005 --> 00:00:53.000
This plumbing allows you to easily consume

20
00:00:53.000 --> 00:00:57.002
these offerings while focusing on your business logic,

21
00:00:57.002 --> 00:01:00.005
instead of the copy paste scaffolding code

22
00:01:00.005 --> 00:01:04.008
to use these integrations that many developers rely on.

23
00:01:04.008 --> 00:01:08.002
Spring is designed using solid Object Oriented

24
00:01:08.002 --> 00:01:11.008
Programming practices and its style promotes you

25
00:01:11.008 --> 00:01:16.002
to do the same thing when consuming the framework.

26
00:01:16.002 --> 00:01:18.008
Things like coding to an interface,

27
00:01:18.008 --> 00:01:23.003
instead of an implementation are paramount in Spring.

28
00:01:23.003 --> 00:01:25.003
Now, back to the plumbing idea,

29
00:01:25.003 --> 00:01:30.002
Spring promotes Don't Repeat Yourself or DRY principles

30
00:01:30.002 --> 00:01:33.003
by leveraging the powerful abstractions of the framework

31
00:01:33.003 --> 00:01:38.000
instead of rebuilding the scaffolding over and over again,

32
00:01:38.000 --> 00:01:41.002
you reduce your risk of copy paste errors,

33
00:01:41.002 --> 00:01:47.000
and instead focus on the actual needs of your application.

34
00:01:47.000 --> 00:01:50.003
Now, before I get too deep into the heart of Spring,

35
00:01:50.003 --> 00:01:52.000
I want to share some definitions

36
00:01:52.000 --> 00:01:55.009
and how they are utilized when talking about Spring.

37
00:01:55.009 --> 00:01:58.004
If you are a seasoned Java developer,

38
00:01:58.004 --> 00:02:01.004
please pay attention because in the Spring world

39
00:02:01.004 --> 00:02:04.005
these terms have somewhat different meanings.

40
00:02:04.005 --> 00:02:06.009
Although, I believe that they're more correct

41
00:02:06.009 --> 00:02:09.005
to the original meanings.

42
00:02:09.005 --> 00:02:13.003
The first is POJO or Plain old Java Object.

43
00:02:13.003 --> 00:02:15.009
In Spring, this is any class file

44
00:02:15.009 --> 00:02:18.006
that contains both attributes and methods.

45
00:02:18.006 --> 00:02:22.004
And those methods are not just getters and setters.

46
00:02:22.004 --> 00:02:25.007
This is a common deviation for many Java developers

47
00:02:25.007 --> 00:02:30.003
who often concern the concept of POJO with Java Beans.

48
00:02:30.003 --> 00:02:32.003
In the Spring world we take

49
00:02:32.003 --> 00:02:35.009
the more correct definition of a POJO.

50
00:02:35.009 --> 00:02:38.004
Now, this brings us to Java Beans.

51
00:02:38.004 --> 00:02:41.000
These two are POJOs in practice,

52
00:02:41.000 --> 00:02:44.002
but they're only methods are accessor methods,

53
00:02:44.002 --> 00:02:46.007
often called getters and setters.

54
00:02:46.007 --> 00:02:48.008
This definition is heavily used

55
00:02:48.008 --> 00:02:51.008
when using EJBs, for instance.

56
00:02:51.008 --> 00:02:55.008
Spring Beans, however, are POJOs that are configured

57
00:02:55.008 --> 00:02:59.008
and managed by the application context.

58
00:02:59.008 --> 00:03:01.005
Now, we will spend a significant amount

59
00:03:01.005 --> 00:03:04.007
of time talking about the application context.

60
00:03:04.007 --> 00:03:06.008
But for, right now, just consider

61
00:03:06.008 --> 00:03:09.001
this anything that Spring manages

62
00:03:09.001 --> 00:03:12.007
during the life cycle of your application.

63
00:03:12.007 --> 00:03:16.005
DTOs, or Data Transfer Objects are Java Beans

64
00:03:16.005 --> 00:03:19.004
with the specific purpose of moving state

65
00:03:19.004 --> 00:03:22.009
between logical layers of your application.

66
00:03:22.009 --> 00:03:25.001
There are times when you don't want to expose

67
00:03:25.001 --> 00:03:27.006
the details of your working classes

68
00:03:27.006 --> 00:03:30.006
and instead translate to a DTO,

69
00:03:30.006 --> 00:03:33.003
which often is written as an immutable object

70
00:03:33.003 --> 00:03:37.006
before setting the state data out of the logical layer.

71
00:03:37.006 --> 00:03:40.003
Now, Inversion of Control is a central pattern

72
00:03:40.003 --> 00:03:42.006
to the Spring framework and, in fact,

73
00:03:42.006 --> 00:03:46.009
much of Spring is built around the central design pattern.

74
00:03:46.009 --> 00:03:49.001
It can be said that if you fully understand

75
00:03:49.001 --> 00:03:54.008
how Spring utilizes IoC, you understand Spring fully.

76
00:03:54.008 --> 00:03:57.002
Inversion of Control provides a mechanism

77
00:03:57.002 --> 00:03:59.006
for dependency injection, however,

78
00:03:59.006 --> 00:04:02.001
it's more than just dependency injection

79
00:04:02.001 --> 00:04:05.002
because with Spring's use of Inversion of Control,

80
00:04:05.002 --> 00:04:07.009
the framework itself controls all operations

81
00:04:07.009 --> 00:04:11.003
of the lifecycle of those dependencies,

82
00:04:11.003 --> 00:04:14.003
not just the injection.

83
00:04:14.003 --> 00:04:17.008
The Application Context wraps the Bean Factory,

84
00:04:17.008 --> 00:04:21.003
which is the Inversion of Control container itself.

85
00:04:21.003 --> 00:04:23.003
The Bean Factory serves the Beans

86
00:04:23.003 --> 00:04:26.004
during runtime of your application.

87
00:04:26.004 --> 00:04:29.001
Now we, as users and developers, never really interact

88
00:04:29.001 --> 00:04:32.000
with the IoC container itself.

89
00:04:32.000 --> 00:04:34.003
Instead we interact with its wrapper

90
00:04:34.003 --> 00:04:37.005
or the application context.

91
00:04:37.005 --> 00:04:39.001
There are several implementations

92
00:04:39.001 --> 00:04:41.005
of the application context itself,

93
00:04:41.005 --> 00:04:42.009
and we're going to be talking a bit

94
00:04:42.009 --> 00:04:46.002
about that in this course, but I have a course

95
00:04:46.002 --> 00:04:48.003
in the LinkedIn Learning Library called

96
00:04:48.003 --> 00:04:51.001
"Spring: Framework in Depth," where we really go

97
00:04:51.001 --> 00:04:53.006
into the details of the application context

98
00:04:53.006 --> 00:04:57.000
in the IoC container and I highly recommend it

99
00:04:57.000 --> 00:05:00.009
if you really want to dig into the framework.

100
00:05:00.009 --> 00:05:03.004
Now, one of the most powerful aspects of Spring Boot

101
00:05:03.004 --> 00:05:05.004
is that it provides auto-configuration

102
00:05:05.004 --> 00:05:08.003
of the application context so that you,

103
00:05:08.003 --> 00:05:11.004
as the developer, can leverage simple properties

104
00:05:11.004 --> 00:05:14.008
and conventions to configure the Beans loaded

105
00:05:14.008 --> 00:05:19.004
into the Bean Factory and used by the IoC container.

106
00:05:19.004 --> 00:05:22.000
Now, I know this was a lot for an introductory chapter,

107
00:05:22.000 --> 00:05:23.007
but don't worry we're going to dig

108
00:05:23.007 --> 00:05:26.003
into these topics throughout the course.

109
00:05:26.003 --> 00:05:29.009
This is just to give you a solid foundation of Spring

110
00:05:29.009 --> 00:05:33.000
and we had to start with some high-level concepts.

