WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] To this point in this course,

2
00:00:01.006 --> 00:00:03.007
we've looked at data access with Spring

3
00:00:03.007 --> 00:00:07.003
and building service abstractions using IOC.

4
00:00:07.003 --> 00:00:10.006
But so far we have been leveraging console messages

5
00:00:10.006 --> 00:00:14.000
to validate our application code is working.

6
00:00:14.000 --> 00:00:16.006
Now, however, it's time to start putting a face

7
00:00:16.006 --> 00:00:18.007
on our application.

8
00:00:18.007 --> 00:00:21.009
Enter into the picture, the controller.

9
00:00:21.009 --> 00:00:24.000
Before we can get into the controller,

10
00:00:24.000 --> 00:00:27.000
we need to talk about the pattern it's based on.

11
00:00:27.000 --> 00:00:29.009
And that pattern is the model view controller

12
00:00:29.009 --> 00:00:34.007
or MVC pattern for web application UI development.

13
00:00:34.007 --> 00:00:37.003
This is a fundamental and common pattern

14
00:00:37.003 --> 00:00:40.003
for web application development.

15
00:00:40.003 --> 00:00:43.002
The model is your data.

16
00:00:43.002 --> 00:00:48.000
No matter its source, it gets loaded into a model object

17
00:00:48.000 --> 00:00:52.006
that contains all of the dynamic data for the page.

18
00:00:52.006 --> 00:00:57.006
The view is the visual display that is populated,

19
00:00:57.006 --> 00:01:00.000
ultimately from the model.

20
00:01:00.000 --> 00:01:04.003
It often contains placeholders for the dynamic data

21
00:01:04.003 --> 00:01:09.002
mixed with static content as well as the HTML tags.

22
00:01:09.002 --> 00:01:13.007
The controller is the logic portion of this picture.

23
00:01:13.007 --> 00:01:17.008
First and foremost, it wires the view with the model.

24
00:01:17.008 --> 00:01:20.000
But it does more than that.

25
00:01:20.000 --> 00:01:23.000
It also takes the initial web request

26
00:01:23.000 --> 00:01:27.004
based on a defined pattern and then uses various

27
00:01:27.004 --> 00:01:30.008
business logic calls to assemble the model,

28
00:01:30.008 --> 00:01:34.000
then present it with the view.

29
00:01:34.000 --> 00:01:38.003
The controller method can be isolated or abstracted

30
00:01:38.003 --> 00:01:43.002
but it is the entry point for the web call itself

31
00:01:43.002 --> 00:01:47.000
as far as the code that you write.

32
00:01:47.000 --> 00:01:49.001
So let's take a real quick look

33
00:01:49.001 --> 00:01:54.001
at a visual representation of the MVC pattern.

34
00:01:54.001 --> 00:01:56.009
Now, we are going to start with our controller

35
00:01:56.009 --> 00:02:00.005
with a defined web URL, a method with the verb

36
00:02:00.005 --> 00:02:03.001
to respond to.

37
00:02:03.001 --> 00:02:06.002
A web request will come into our application

38
00:02:06.002 --> 00:02:10.004
and the MVC framework as part of whatever technology,

39
00:02:10.004 --> 00:02:15.007
in our case Spring, will pick the controller and the method

40
00:02:15.007 --> 00:02:20.007
on that controller that this web request should respond to.

41
00:02:20.007 --> 00:02:25.001
The controller will then build a model or have one passed

42
00:02:25.001 --> 00:02:29.006
from the framework, as often happens with Spring.

43
00:02:29.006 --> 00:02:33.001
The controller will go about and assemble the data

44
00:02:33.001 --> 00:02:37.005
for the model using various bits of application code,

45
00:02:37.005 --> 00:02:41.001
services, data access, or remote services

46
00:02:41.001 --> 00:02:43.007
that it needs to use.

47
00:02:43.007 --> 00:02:45.009
The controller will then identify

48
00:02:45.009 --> 00:02:49.004
which view we are going to use.

49
00:02:49.004 --> 00:02:52.007
Now, usually both of these are then passed

50
00:02:52.007 --> 00:02:56.009
by the MVC framework to the templating engine,

51
00:02:56.009 --> 00:02:59.009
which merges the model's data elements

52
00:02:59.009 --> 00:03:03.005
with the placeholders in the view.

53
00:03:03.005 --> 00:03:09.005
Finally, the rendered view is returned to the requester.

54
00:03:09.005 --> 00:03:12.002
So now let's discuss the Spring controller

55
00:03:12.002 --> 00:03:15.008
building off of our knowledge of MVC.

56
00:03:15.008 --> 00:03:20.000
A Spring controller is nothing more than a Spring bean

57
00:03:20.000 --> 00:03:25.002
that defines the methods that will handle web requests.

58
00:03:25.002 --> 00:03:28.009
We then annotate this POJO for the servlet mapping,

59
00:03:28.009 --> 00:03:33.005
which defines the URL that this controller responds on.

60
00:03:33.005 --> 00:03:39.001
It can be specific, dynamic, or parental in nature.

61
00:03:39.001 --> 00:03:44.005
I usually stick with a single controller per specific URL

62
00:03:44.005 --> 00:03:49.001
and then utilize dynamic elements in the methods.

63
00:03:49.001 --> 00:03:53.008
The controller itself will respond with a specific method

64
00:03:53.008 --> 00:04:00.000
based on the annotation of the HTTP method and execute.

65
00:04:00.000 --> 00:04:06.004
The controller can then output a view or raw data.

66
00:04:06.004 --> 00:04:10.002
Usually we are dealing with views for web applications

67
00:04:10.002 --> 00:04:15.008
but you could return raw data if your use case requires it.

68
00:04:15.008 --> 00:04:19.002
Spring does not provide a template engine for you

69
00:04:19.002 --> 00:04:21.008
as a default selection.

70
00:04:21.008 --> 00:04:26.001
Spring does however support several template engines,

71
00:04:26.001 --> 00:04:29.000
many of which have starters for auto-configuration

72
00:04:29.000 --> 00:04:33.001
of the application context with Spring Boot.

73
00:04:33.001 --> 00:04:35.008
Thymeleaf is still the most popular

74
00:04:35.008 --> 00:04:38.005
templating engine for Spring.

75
00:04:38.005 --> 00:04:42.000
Thymeleaf provides a DSL for HTML,

76
00:04:42.000 --> 00:04:45.001
leaving raw HTML documents.

77
00:04:45.001 --> 00:04:49.000
These documents are then much easier to style

78
00:04:49.000 --> 00:04:52.006
because your designers can do so asynchronously

79
00:04:52.006 --> 00:04:56.002
to your application development and can do so

80
00:04:56.002 --> 00:05:00.007
without mocking data or running your application itself.

81
00:05:00.007 --> 00:05:03.002
And finally, they leverage those placeholders

82
00:05:03.002 --> 00:05:07.004
for dynamic data such that you can populate them.

83
00:05:07.004 --> 00:05:11.007
But in the template itself, you put in a static value

84
00:05:11.007 --> 00:05:14.003
that needs to be replaced.

85
00:05:14.003 --> 00:05:17.005
Now, the rendering engine then allows for the final product

86
00:05:17.005 --> 00:05:18.009
that is served to you.

87
00:05:18.009 --> 00:05:20.005
So now let's jump in and take a look

88
00:05:20.005 --> 00:05:22.000
at what this looks like.

