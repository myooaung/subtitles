WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] So as promised now, it's time to see how

2
00:00:02.006 --> 00:00:08.007
similar it is to expose a ReSTful web service using Spring.

3
00:00:08.007 --> 00:00:12.009
So we are going to expose our room reservations via JSON

4
00:00:12.009 --> 00:00:15.000
using a ReSTful web service.

5
00:00:15.000 --> 00:00:19.006
I'd like you to open up your IDE and go to source main Java,

6
00:00:19.006 --> 00:00:22.002
go into our base package, and within there,

7
00:00:22.002 --> 00:00:27.002
create a new package that we will call webservice.

8
00:00:27.002 --> 00:00:28.006
Now, within that webservice,

9
00:00:28.006 --> 00:00:32.006
we are going to create a new class, and this class,

10
00:00:32.006 --> 00:00:36.006
we will simply call WebserviceController.

11
00:00:36.006 --> 00:00:40.005
Now, I tend to do web services in the same way

12
00:00:40.005 --> 00:00:44.005
that I do web pages, in that each controller responds

13
00:00:44.005 --> 00:00:48.006
to a single URL with the given methods underneath them.

14
00:00:48.006 --> 00:00:51.000
For the purposes of this demo, however,

15
00:00:51.000 --> 00:00:54.002
we're going to put all of our web services in one class,

16
00:00:54.002 --> 00:00:57.006
just to make it a little bit easier, and also so that

17
00:00:57.006 --> 00:01:01.003
I can show you how to extend request mapping

18
00:01:01.003 --> 00:01:03.002
a little bit easier.

19
00:01:03.002 --> 00:01:05.009
So within this class, we're going to annotate this

20
00:01:05.009 --> 00:01:09.006
with @RestController, and this is going to tell Spring

21
00:01:09.006 --> 00:01:13.001
to put an app response body on each of our methods,

22
00:01:13.001 --> 00:01:15.009
and that response body will take the data object

23
00:01:15.009 --> 00:01:19.002
that we return converted into a JSON payload,

24
00:01:19.002 --> 00:01:23.005
and return that JSON payload out through our web interface.

25
00:01:23.005 --> 00:01:28.007
We're also going to annotate this with @RequestMapping,

26
00:01:28.007 --> 00:01:32.008
and we're going to respond /api.

27
00:01:32.008 --> 00:01:35.007
Go ahead and import that in.

28
00:01:35.007 --> 00:01:37.004
And now we're going to go through a few things

29
00:01:37.004 --> 00:01:38.002
that we've done before.

30
00:01:38.002 --> 00:01:42.004
So we're going to do private final DateUtils

31
00:01:42.004 --> 00:01:44.008
and bring in an instance of that,

32
00:01:44.008 --> 00:01:52.000
and private final ReservationService.

33
00:01:52.000 --> 00:01:56.006
And now we will create a constructor for that.

34
00:01:56.006 --> 00:02:00.001
And now we will do an @RequestMapping,

35
00:02:00.001 --> 00:02:05.009
and we are going to respond on a path of /reservations.

36
00:02:05.009 --> 00:02:07.003
Now, this is going to look very similar,

37
00:02:07.003 --> 00:02:11.000
because our webpage responded at /reservations.

38
00:02:11.000 --> 00:02:15.008
However, because this class is annotated with /api,

39
00:02:15.008 --> 00:02:18.001
and then we are going to annotate this method

40
00:02:18.001 --> 00:02:23.000
with /reservations, the actual URL that this web service

41
00:02:23.000 --> 00:02:28.005
will respond on is /api/reservations, so request mapping

42
00:02:28.005 --> 00:02:31.009
is additive as you go through.

43
00:02:31.009 --> 00:02:38.005
We are also going to take and do this at a get method.

44
00:02:38.005 --> 00:02:40.004
So now we need to do our method signature.

45
00:02:40.004 --> 00:02:46.002
So we would do public list of RoomReservation,

46
00:02:46.002 --> 00:02:50.007
getReservations, and to that,

47
00:02:50.007 --> 00:02:54.007
we're going to do an @RequestParam.

48
00:02:54.007 --> 00:03:01.005
It's going to have a value of date, a required of false,

49
00:03:01.005 --> 00:03:03.001
and this will be of type string,

50
00:03:03.001 --> 00:03:07.004
and we will call this DateString.

51
00:03:07.004 --> 00:03:09.001
So now, just like we did on our webpage,

52
00:03:09.001 --> 00:03:11.004
we will get an instance of date

53
00:03:11.004 --> 00:03:16.007
from our dateUtils.createDateFrom string.

54
00:03:16.007 --> 00:03:19.004
So remember, if this comes in as null

55
00:03:19.004 --> 00:03:23.002
and we made it required equal false in our parameter,

56
00:03:23.002 --> 00:03:25.003
we will convert the date into now,

57
00:03:25.003 --> 00:03:28.005
so that way it will always respond with at least a date,

58
00:03:28.005 --> 00:03:31.005
so we are null safe here.

59
00:03:31.005 --> 00:03:35.009
And now we can simply return the output

60
00:03:35.009 --> 00:03:40.009
from the reservation service at getRoomReservation for date,

61
00:03:40.009 --> 00:03:42.009
passing in our new date.

62
00:03:42.009 --> 00:03:45.004
So we have no model to deal with, we simply return

63
00:03:45.004 --> 00:03:49.008
the object and Spring will take care of the rest of it.

64
00:03:49.008 --> 00:03:52.003
Now, what I'm going to do is I'm going to going to and run

65
00:03:52.003 --> 00:03:58.005
this application, allow it to come up.

66
00:03:58.005 --> 00:04:02.000
Now I'm going to open up a browser and I'm going to navigate

67
00:04:02.000 --> 00:04:08.008
to localhost:8080/api/reservations,

68
00:04:08.008 --> 00:04:11.003
and you'll see that I get a JSON body out.

69
00:04:11.003 --> 00:04:13.008
Now, I've got a little bit of a JSON formatter here.

70
00:04:13.008 --> 00:04:16.008
It doesn't work for every web browser for you to see this

71
00:04:16.008 --> 00:04:20.005
in formatted JSON, but you can always copy and paste this

72
00:04:20.005 --> 00:04:24.008
into a document, or you could just use curl or HTTPie,

73
00:04:24.008 --> 00:04:27.008
depending on what tool you use from the command line.

74
00:04:27.008 --> 00:04:31.001
The important thing here is that we're responding at an API

75
00:04:31.001 --> 00:04:34.007
and getting a JSON payload out, and much like we did before,

76
00:04:34.007 --> 00:04:39.004
we can set our date equal to 2022-01-01,

77
00:04:39.004 --> 00:04:42.000
and you'll see in our second element here,

78
00:04:42.000 --> 00:04:44.002
we actually did get a reservation,

79
00:04:44.002 --> 00:04:47.004
because that's what the payload allows to come out.

80
00:04:47.004 --> 00:04:50.006
All of that marshaling was handled for us

81
00:04:50.006 --> 00:04:53.007
by the Spring framework using Jackson.

82
00:04:53.007 --> 00:04:55.006
Now, you could extend this.

83
00:04:55.006 --> 00:04:58.006
You could pass an object in on, say, a post method

84
00:04:58.006 --> 00:05:01.009
or a put method and allow it to do its work,

85
00:05:01.009 --> 00:05:03.006
and we're going to go into our challenge next

86
00:05:03.006 --> 00:05:06.000
and you're going to get to do just that.

