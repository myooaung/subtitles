WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] There are several projects

2
00:00:01.008 --> 00:00:04.004
that you should spend a little time reading about

3
00:00:04.004 --> 00:00:07.007
as you start to get yourself immersed into Spring.

4
00:00:07.007 --> 00:00:09.009
The first is testing.

5
00:00:09.009 --> 00:00:11.000
In my opinion,

6
00:00:11.000 --> 00:00:13.009
one of the coolest aspects of Spring Boot

7
00:00:13.009 --> 00:00:15.006
and Spring in general

8
00:00:15.006 --> 00:00:19.002
is the emphasis on inherent testing.

9
00:00:19.002 --> 00:00:20.002
In fact,

10
00:00:20.002 --> 00:00:22.008
you've actually been testing your application

11
00:00:22.008 --> 00:00:24.003
with the Spring framework

12
00:00:24.003 --> 00:00:27.007
every single time you have built it in this course

13
00:00:27.007 --> 00:00:29.005
before you ran it.

14
00:00:29.005 --> 00:00:30.009
And it's a default test

15
00:00:30.009 --> 00:00:34.001
that exists in your source test resources

16
00:00:34.001 --> 00:00:35.008
that specifically validating

17
00:00:35.008 --> 00:00:38.004
that the application context itself

18
00:00:38.004 --> 00:00:41.005
has been configured correctly.

19
00:00:41.005 --> 00:00:44.005
Unit testing in Spring should be very familiar to you,

20
00:00:44.005 --> 00:00:46.003
if you have written Java,

21
00:00:46.003 --> 00:00:48.005
because unit testing with Spring

22
00:00:48.005 --> 00:00:52.009
should be done agnostic of the Spring framework.

23
00:00:52.009 --> 00:00:55.007
Spring is not needed in most cases

24
00:00:55.007 --> 00:00:58.004
to unit test your application.

25
00:00:58.004 --> 00:01:01.004
Dependencies should be injected as mock objects

26
00:01:01.004 --> 00:01:03.001
into your class.

27
00:01:03.001 --> 00:01:07.002
If you have written your classes with good OOP practices,

28
00:01:07.002 --> 00:01:10.008
you simply use the mocks in the constructor, if required,

29
00:01:10.008 --> 00:01:13.009
or through setters, if optional or dynamic,

30
00:01:13.009 --> 00:01:16.006
to test your application.

31
00:01:16.006 --> 00:01:21.001
If one of your dependencies is J2EE or OS constructs

32
00:01:21.001 --> 00:01:23.006
like environment or JNDI,

33
00:01:23.006 --> 00:01:25.008
Spring provides mocked objects

34
00:01:25.008 --> 00:01:28.006
within the Spring framework library

35
00:01:28.006 --> 00:01:29.008
that you can work with

36
00:01:29.008 --> 00:01:31.003
so that you don't have to worry about

37
00:01:31.003 --> 00:01:35.000
how to mock those standard dependencies.

38
00:01:35.000 --> 00:01:39.000
Ultimately, your strategies should be very simple

39
00:01:39.000 --> 00:01:42.007
and leverage a proper testing framework like JUnit,

40
00:01:42.007 --> 00:01:47.003
which is default from the Spring Boot test starter.

41
00:01:47.003 --> 00:01:50.002
Now, one addition to basic unit testing

42
00:01:50.002 --> 00:01:53.003
comes in the form of controllers.

43
00:01:53.003 --> 00:01:55.009
Like JNDI or environment,

44
00:01:55.009 --> 00:02:00.003
Spring provides a construct to mock the servlet API.

45
00:02:00.003 --> 00:02:03.004
These mocks allow you to leverage servlet behavior

46
00:02:03.004 --> 00:02:08.001
in the unit tests of your controller classes.

47
00:02:08.001 --> 00:02:11.007
For those methods that rely on ModelAndView,

48
00:02:11.007 --> 00:02:13.002
there's an assert library

49
00:02:13.002 --> 00:02:15.004
that can be used to validate the model

50
00:02:15.004 --> 00:02:17.003
as populated correctly.

51
00:02:17.003 --> 00:02:19.003
And the view is as well

52
00:02:19.003 --> 00:02:23.006
when using that signature for your controller method.

53
00:02:23.006 --> 00:02:24.005
Now, in this course,

54
00:02:24.005 --> 00:02:26.007
we just simply put the model in

55
00:02:26.007 --> 00:02:29.002
and we returned our view as a string,

56
00:02:29.002 --> 00:02:32.002
which is a valid way to do webpages.

57
00:02:32.002 --> 00:02:35.001
But with this model that we used, if we were to test this,

58
00:02:35.001 --> 00:02:38.000
we would just simply use normal assert language

59
00:02:38.000 --> 00:02:40.006
because the model is part of the signature,

60
00:02:40.006 --> 00:02:43.005
but we'll return the view name.

61
00:02:43.005 --> 00:02:45.008
Now, if you've done anything in Spring

62
00:02:45.008 --> 00:02:49.001
or watched other courses that I have done with Spring,

63
00:02:49.001 --> 00:02:52.000
you may have heard about MockMVC.

64
00:02:52.000 --> 00:02:55.006
It's a super powerful library for testing controllers,

65
00:02:55.006 --> 00:02:59.000
but Spring considers this to be an integration test.

66
00:02:59.000 --> 00:03:02.003
So we'll discuss this one in just a bit.

67
00:03:02.003 --> 00:03:05.008
Now integration testing is based on four main goals

68
00:03:05.008 --> 00:03:09.002
and these goals are provided directly by Spring.

69
00:03:09.002 --> 00:03:13.003
First of all is to manage the Spring IoC container caching

70
00:03:13.003 --> 00:03:15.004
between tests.

71
00:03:15.004 --> 00:03:18.001
It's also to provide dependency injection

72
00:03:18.001 --> 00:03:21.003
of test fixture instances.

73
00:03:21.003 --> 00:03:23.004
It is to provide transaction management

74
00:03:23.004 --> 00:03:27.001
appropriate to integration testing.

75
00:03:27.001 --> 00:03:30.006
And it is to supply Spring-specific base classes

76
00:03:30.006 --> 00:03:36.001
that assist developers in writing these integration tests.

77
00:03:36.001 --> 00:03:37.008
Now, there are several key areas

78
00:03:37.008 --> 00:03:40.006
where using Spring as part of your integration tests

79
00:03:40.006 --> 00:03:45.001
dramatically improved performance and coverage.

80
00:03:45.001 --> 00:03:48.003
JDBC testing is dramatically simplified

81
00:03:48.003 --> 00:03:53.002
with the addition of JDBC TestUtils.

82
00:03:53.002 --> 00:03:55.009
Annotations are a big part of the Spring framework

83
00:03:55.009 --> 00:03:58.000
and testing is no different.

84
00:03:58.000 --> 00:04:01.006
There are many annotations that come with Spring test,

85
00:04:01.006 --> 00:04:04.002
things that are used to set the active profile

86
00:04:04.002 --> 00:04:05.008
or the web context,

87
00:04:05.008 --> 00:04:08.002
or provide transaction support,

88
00:04:08.002 --> 00:04:11.000
dynamic property sources based on your tests,

89
00:04:11.000 --> 00:04:12.005
and many more.

90
00:04:12.005 --> 00:04:15.001
I encourage you to learn about these

91
00:04:15.001 --> 00:04:18.003
and to use them to your advantage as necessary.

92
00:04:18.003 --> 00:04:21.000
And that documentation can be found

93
00:04:21.000 --> 00:04:25.003
in the learning section for the Spring framework.

94
00:04:25.003 --> 00:04:29.006
Spring test also allows you to leverage a TestContext

95
00:04:29.006 --> 00:04:31.000
so that you can control

96
00:04:31.000 --> 00:04:34.002
aspects of the application context itself

97
00:04:34.002 --> 00:04:36.001
while testing.

98
00:04:36.001 --> 00:04:37.004
With this model,

99
00:04:37.004 --> 00:04:40.003
you can do things like record and fire events,

100
00:04:40.003 --> 00:04:42.006
manage the context itself,

101
00:04:42.006 --> 00:04:44.008
inject test fixtures and marks,

102
00:04:44.008 --> 00:04:49.000
and evaluate beans like session and request.

103
00:04:49.000 --> 00:04:52.009
The MockMVC framework is probably the most known

104
00:04:52.009 --> 00:04:55.000
and for good reason.

105
00:04:55.000 --> 00:04:57.006
This is one area I would encourage you

106
00:04:57.006 --> 00:04:59.009
to take our existing program

107
00:04:59.009 --> 00:05:04.002
and learn how to test the web services and web pages

108
00:05:04.002 --> 00:05:08.008
using MockMVC with a TestContext.

109
00:05:08.008 --> 00:05:10.009
This will really give you a headstart

110
00:05:10.009 --> 00:05:13.008
on testing Spring based applications

111
00:05:13.008 --> 00:05:17.004
earlier on in your journey of learning Spring.

112
00:05:17.004 --> 00:05:20.004
I do have a core Spring Boot Essential Training

113
00:05:20.004 --> 00:05:24.000
that goes into MockMVC in some detail.

