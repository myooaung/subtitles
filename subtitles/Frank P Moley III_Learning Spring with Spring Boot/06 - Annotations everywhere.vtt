WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] We have one more housekeeping thing

2
00:00:02.000 --> 00:00:03.005
to talk about

3
00:00:03.005 --> 00:00:05.009
because it's one of the biggest learning challenges

4
00:00:05.009 --> 00:00:07.005
for new Spring developers,

5
00:00:07.005 --> 00:00:10.006
and that is understanding annotations,

6
00:00:10.006 --> 00:00:12.000
why they're important,

7
00:00:12.000 --> 00:00:14.000
and what do we do with them

8
00:00:14.000 --> 00:00:16.007
when we're writing a Spring Boot application

9
00:00:16.007 --> 00:00:19.004
or any Spring application for that fact.

10
00:00:19.004 --> 00:00:22.008
We've already seen one such annotation.

11
00:00:22.008 --> 00:00:26.000
So let's start with the concept of annotations

12
00:00:26.000 --> 00:00:28.001
and what they really are.

13
00:00:28.001 --> 00:00:31.003
Annotations first and foremost are a core component

14
00:00:31.003 --> 00:00:33.002
of the Java language.

15
00:00:33.002 --> 00:00:37.007
They are not a Spring-specific abstract.

16
00:00:37.007 --> 00:00:39.002
Now, traditionally in Java,

17
00:00:39.002 --> 00:00:43.009
they provide a way to define metadata for your code.

18
00:00:43.009 --> 00:00:46.008
This metadata is often used for compiler

19
00:00:46.008 --> 00:00:49.000
or runtime instructions.

20
00:00:49.000 --> 00:00:50.004
So think about an annotation

21
00:00:50.004 --> 00:00:52.008
that I can almost guarantee you have used

22
00:00:52.008 --> 00:00:54.007
if you're a Java developer.

23
00:00:54.007 --> 00:00:57.009
And that is things like the @test annotation,

24
00:00:57.009 --> 00:01:00.005
that is a runtime instruction for the test framework

25
00:01:00.005 --> 00:01:05.000
to know that that specific method is a test.

26
00:01:05.000 --> 00:01:09.006
Now, Spring, with its aspect-oriented programming model,

27
00:01:09.006 --> 00:01:14.004
uses them as a leverage point for pointcuts in the code.

28
00:01:14.004 --> 00:01:18.001
Now, this is key to how Spring uses these constructs

29
00:01:18.001 --> 00:01:21.005
to add functionality to the code that you write.

30
00:01:21.005 --> 00:01:24.004
So-called proxies.

31
00:01:24.004 --> 00:01:28.005
Proxies are a very important concept in Spring.

32
00:01:28.005 --> 00:01:32.004
Much of the power of Spring comes during operations

33
00:01:32.004 --> 00:01:37.006
from proxy classes driven by abstract behavior.

34
00:01:37.006 --> 00:01:40.009
Beans in the bean factory are proxied,

35
00:01:40.009 --> 00:01:45.004
usually by one or more abstracts from Spring.

36
00:01:45.004 --> 00:01:47.007
This is where the added behavior

37
00:01:47.007 --> 00:01:52.008
is providing much of the plumbing of Spring itself.

38
00:01:52.008 --> 00:01:56.009
Annotations tend to be a very easy extension point

39
00:01:56.009 --> 00:01:58.000
for the framework,

40
00:01:58.000 --> 00:02:00.001
specifically AspectJ,

41
00:02:00.001 --> 00:02:03.008
and many of them drive not only behavior,

42
00:02:03.008 --> 00:02:06.005
but component scanning as part of the definition

43
00:02:06.005 --> 00:02:09.000
of the application context.

44
00:02:09.000 --> 00:02:12.009
This same power that Spring gets from annotations

45
00:02:12.009 --> 00:02:16.000
are available to you as a developer,

46
00:02:16.000 --> 00:02:18.007
either through aspect-oriented programming

47
00:02:18.007 --> 00:02:23.008
or extending the Spring framework to meet your needs.

48
00:02:23.008 --> 00:02:27.002
Now, one caveat that you need to be aware of,

49
00:02:27.002 --> 00:02:30.001
and that is that proxy classes have to be called

50
00:02:30.001 --> 00:02:32.003
through the proxy itself

51
00:02:32.003 --> 00:02:34.008
for the behavior to be added.

52
00:02:34.008 --> 00:02:36.000
Now, this is important

53
00:02:36.000 --> 00:02:38.002
when dealing with private method calls

54
00:02:38.002 --> 00:02:41.001
or class local method calls.

55
00:02:41.001 --> 00:02:42.007
Data access, for instance,

56
00:02:42.007 --> 00:02:45.002
with transaction management systems

57
00:02:45.002 --> 00:02:48.000
seem to be a common error location

58
00:02:48.000 --> 00:02:51.007
because internal methods are not proxied.

59
00:02:51.007 --> 00:02:55.003
I've answered a lot of questions on this on stack overflow,

60
00:02:55.003 --> 00:02:57.006
because it is so common.

61
00:02:57.006 --> 00:02:59.003
The situation is this.

62
00:02:59.003 --> 00:03:00.008
I have a method A

63
00:03:00.008 --> 00:03:03.005
that has transactional boundaries around it.

64
00:03:03.005 --> 00:03:04.007
There's a method B

65
00:03:04.007 --> 00:03:07.008
that also has transaction boundaries around it.

66
00:03:07.008 --> 00:03:11.005
I want to call A and have A call B

67
00:03:11.005 --> 00:03:14.006
and I'm expecting the transaction boundaries to be separate

68
00:03:14.006 --> 00:03:17.000
because there is a new transaction.

69
00:03:17.000 --> 00:03:20.004
The problem is that method A calls method B

70
00:03:20.004 --> 00:03:22.009
internally or class locally.

71
00:03:22.009 --> 00:03:27.008
Therefore, the proxy behavior only gets applied to method A

72
00:03:27.008 --> 00:03:30.001
and doesn't get reapplied for method B

73
00:03:30.001 --> 00:03:34.002
because it doesn't go back through the proxy interface.

74
00:03:34.002 --> 00:03:36.007
Now, as we go through the rest of this course,

75
00:03:36.007 --> 00:03:40.000
we're going to be using annotations a lot.

76
00:03:40.000 --> 00:03:43.009
And I will explain those annotations as I introduce them

77
00:03:43.009 --> 00:03:47.004
and what it's going to do from a behavior perspective.

78
00:03:47.004 --> 00:03:50.007
But I encourage you to dig deeper

79
00:03:50.007 --> 00:03:53.004
and evaluate how they actually work

80
00:03:53.004 --> 00:03:55.004
so that you better understand

81
00:03:55.004 --> 00:03:58.004
when I annotate a class or annotate a method,

82
00:03:58.004 --> 00:04:02.000
why I'm doing it and what purpose it's serving

83
00:04:02.000 --> 00:04:04.004
to make sure that you fully understand it

84
00:04:04.004 --> 00:04:07.000
because it is core to using Spring.

