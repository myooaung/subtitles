WEBVTT
1
00:00:01.000 --> 00:00:03.000
- [Instructor] To take advantage of Spring support

2
00:00:03.000 --> 00:00:06.060
for adding service side WebSocket capabilities to our app

3
00:00:06.060 --> 00:00:09.000
we will need to create and configure what is called

4
00:00:09.000 --> 00:00:11.000
a message broker component.

5
00:00:11.000 --> 00:00:13.020
The message broker is responsible for bridging

6
00:00:13.020 --> 00:00:15.040
the data flow between the client code,

7
00:00:15.040 --> 00:00:17.080
which is typically your java script code,

8
00:00:17.080 --> 00:00:20.080
and your Spring MVC components.

9
00:00:20.080 --> 00:00:24.080
Also, remember the WebSocket protocol is bidirectional,

10
00:00:24.080 --> 00:00:27.030
which means a client can subscribe to a topic

11
00:00:27.030 --> 00:00:30.060
and a service can publish topic updates to clients

12
00:00:30.060 --> 00:00:34.020
based on whatever logic is implemented in the server.

13
00:00:34.020 --> 00:00:37.000
Once a WebSocket connection is established,

14
00:00:37.000 --> 00:00:38.090
both the client and the server can exchange

15
00:00:38.090 --> 00:00:42.030
information endlessly until the connection is closed

16
00:00:42.030 --> 00:00:44.030
by any one of the parties.

17
00:00:44.030 --> 00:00:46.040
For this reason, a WebSocket connection

18
00:00:46.040 --> 00:00:49.080
is typically preferred over A2DP when the client

19
00:00:49.080 --> 00:00:53.050
and server need to exchange information at high frequency

20
00:00:53.050 --> 00:00:57.090
and with low latency because A2DP connections are closed

21
00:00:57.090 --> 00:01:00.080
once a request is served by the server.

22
00:01:00.080 --> 00:01:02.000
And there's a time constraint

23
00:01:02.000 --> 00:01:05.010
to open a A2DP connection again.

24
00:01:05.010 --> 00:01:08.000
Let's get started created our message broker.

25
00:01:08.000 --> 00:01:13.050
To begin this exercise I'm going into our chat package

26
00:01:13.050 --> 00:01:17.020
I'll open the WebSocket config class.

27
00:01:17.020 --> 00:01:18.080
And then, for better readability,

28
00:01:18.080 --> 00:01:20.090
I'm going to double-click on that editor window

29
00:01:20.090 --> 00:01:26.040
and maximize so we can get started.

30
00:01:26.040 --> 00:01:28.090
Spring already has built-in support

31
00:01:28.090 --> 00:01:32.050
for creating a Stomp WebSocket server.

32
00:01:32.050 --> 00:01:36.000
The conventionists began with a Spring config class.

33
00:01:36.000 --> 00:01:38.040
I've already gotten a class started for us.

34
00:01:38.040 --> 00:01:41.020
I've called it WebSocket Config.

35
00:01:41.020 --> 00:01:42.050
And to being taking advantage

36
00:01:42.050 --> 00:01:44.070
of all that Spring has to offer

37
00:01:44.070 --> 00:01:46.070
I simply have to implement

38
00:01:46.070 --> 00:01:50.020
the WebSocket Message Broker Configurer.

39
00:01:50.020 --> 00:01:52.080
Now that I've implemented this configurer

40
00:01:52.080 --> 00:01:55.020
I have to start overwriting some of the methods

41
00:01:55.020 --> 00:01:58.050
that are a part of a message broker configurer.

42
00:01:58.050 --> 00:02:03.080
First, let's register our stomp endpoints.

43
00:02:03.080 --> 00:02:05.060
Our message broker keeps a registry

44
00:02:05.060 --> 00:02:11.030
of endpoints or URI's that our server responds to.

45
00:02:11.030 --> 00:02:15.020
So, to begin that I'm going to create registry

46
00:02:15.020 --> 00:02:21.030
I'm going to add an endpoint.

47
00:02:21.030 --> 00:02:25.000
And for the endpoint this is generally the name,

48
00:02:25.000 --> 00:02:28.040
or the root name for your application.

49
00:02:28.040 --> 00:02:34.030
So I'm going to call ours the Landon Chat App.

50
00:02:34.030 --> 00:02:36.080
The next thing I want to do,

51
00:02:36.080 --> 00:02:38.020
because we know that we're going to be

52
00:02:38.020 --> 00:02:41.070
working with a framework called SockJS,

53
00:02:41.070 --> 00:02:44.020
we'll get to details on that later.

54
00:02:44.020 --> 00:02:47.040
But this is to give us some fallback safety.

55
00:02:47.040 --> 00:02:50.070
For now, I'm just going to create withSockJS

56
00:02:50.070 --> 00:02:54.000
and we'll explain what that fallback safety is later.

57
00:02:54.000 --> 00:02:56.090
That's it, we've registered out endpoint.

58
00:02:56.090 --> 00:02:59.000
There's only one more step.

59
00:02:59.000 --> 00:03:02.020
To configure out message broker

60
00:03:02.020 --> 00:03:08.060
we have to call our config class that Spring gives us

61
00:03:08.060 --> 00:03:12.030
and we need to setup the prefixes

62
00:03:12.030 --> 00:03:15.050
that we're gonna use for our topics.

63
00:03:15.050 --> 00:03:21.010
So we have to call config enable Simple Broker

64
00:03:21.010 --> 00:03:26.020
and specify what all of our topic prefixes will be.

65
00:03:26.020 --> 00:03:31.020
Again, it's a convention to use topic

66
00:03:31.020 --> 00:03:33.040
as you mature this app you may find

67
00:03:33.040 --> 00:03:36.030
that something else makes more sense for you.

68
00:03:36.030 --> 00:03:38.030
The next thing we need to do

69
00:03:38.030 --> 00:03:43.000
is set our application destination prefixes.

70
00:03:43.000 --> 00:03:46.040
These are the URI's that all of our application codes,

71
00:03:46.040 --> 00:03:52.000
such as our controllers will be prefixed with.

72
00:03:52.000 --> 00:03:55.000
I'm gonna call the config.set

73
00:03:55.000 --> 00:04:01.010
application destination prefixes.

74
00:04:01.010 --> 00:04:05.090
And for simplicity I'm just gonna call this app.

75
00:04:05.090 --> 00:04:08.080
The last thing we need to do,

76
00:04:08.080 --> 00:04:12.050
as with any important Spring component,

77
00:04:12.050 --> 00:04:16.000
is supply these annotations that lets

78
00:04:16.000 --> 00:04:18.040
the Spring framework know just exactly

79
00:04:18.040 --> 00:04:23.000
what kind of config bing this is.

80
00:04:23.000 --> 00:04:26.030
And for configuring our WebSocket application

81
00:04:26.030 --> 00:04:29.010
we just need to add an annotation called

82
00:04:29.010 --> 00:04:35.030
Enable WebSocket Message Broker.

83
00:04:35.030 --> 00:04:39.050
And by doing so, we have now told Spring

84
00:04:39.050 --> 00:04:42.000
that this is the component that's going to broker

85
00:04:42.000 --> 00:04:44.030
all of our messages that come from our client

86
00:04:44.030 --> 00:04:48.020
and need to pass through to our controllers.

87
00:04:48.020 --> 00:04:50.050
So another quick review here.

88
00:04:50.050 --> 00:04:52.050
We just created a message broker

89
00:04:52.050 --> 00:04:55.040
and simply what we needed to do was register

90
00:04:55.040 --> 00:04:58.090
some endpoints to let the message broker know

91
00:04:58.090 --> 00:05:01.080
what our application prefix is.

92
00:05:01.080 --> 00:05:06.080
Then we had to specify what all of our topic prefixes are.

93
00:05:06.080 --> 00:05:10.080
And lastly, we had to specify any prefix

94
00:05:10.080 --> 00:05:14.030
for URI's that are mapped to our controllers.

95
00:05:14.030 --> 00:05:16.030
And that's enough to get started

96
00:05:16.030 --> 00:05:18.000
with implementing your message broker.

