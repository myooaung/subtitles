WEBVTT
1
00:00:01.000 --> 00:00:02.050
- [Instructor] To demonstrate the work involved

2
00:00:02.050 --> 00:00:05.040
in creating a Spring-based real-time app,

3
00:00:05.040 --> 00:00:07.050
we're gonna develop a simple chat app

4
00:00:07.050 --> 00:00:10.040
for our fictitious Landon Hotel.

5
00:00:10.040 --> 00:00:13.060
The event services staff at the Landon Hotel

6
00:00:13.060 --> 00:00:15.070
wants to give event planners and guests

7
00:00:15.070 --> 00:00:18.010
a better way to communicate with each other.

8
00:00:18.010 --> 00:00:20.010
For example, event planners want a quick way

9
00:00:20.010 --> 00:00:23.050
to request help from the hotel staff during setup

10
00:00:23.050 --> 00:00:25.050
or imagine being able to contact

11
00:00:25.050 --> 00:00:28.090
the hotel staff person as a guest

12
00:00:28.090 --> 00:00:31.020
and having an event-specific chat tool

13
00:00:31.020 --> 00:00:34.030
that allows you to communicate with other guests.

14
00:00:34.030 --> 00:00:35.050
We're gonna begin setting up

15
00:00:35.050 --> 00:00:39.000
for our example chat app's design and development.

16
00:00:39.000 --> 00:00:41.010
Our overall development goals

17
00:00:41.010 --> 00:00:45.030
involve developing the server-side and the client-side code.

18
00:00:45.030 --> 00:00:47.070
We'll begin developing and unit testing

19
00:00:47.070 --> 00:00:49.050
our server-side code first,

20
00:00:49.050 --> 00:00:51.080
then we'll move on to creating the HTML

21
00:00:51.080 --> 00:00:55.080
and JavaScript assets needed for our client-side code.

22
00:00:55.080 --> 00:00:57.020
For server-side development,

23
00:00:57.020 --> 00:00:59.000
we will be using components

24
00:00:59.000 --> 00:01:00.030
that should be familiar to you

25
00:01:00.030 --> 00:01:01.060
if you've done any development

26
00:01:01.060 --> 00:01:04.040
using the Spring MVC framework.

27
00:01:04.040 --> 00:01:06.000
We won't go into too much depth

28
00:01:06.000 --> 00:01:09.010
about MVC-related components because if you need it,

29
00:01:09.010 --> 00:01:10.060
there is another course you can take

30
00:01:10.060 --> 00:01:14.010
that provides everything you need to know about Spring MVC.

31
00:01:14.010 --> 00:01:17.000
However, what is most relevant for this course

32
00:01:17.000 --> 00:01:20.060
is the need for a component called a message broker.

33
00:01:20.060 --> 00:01:23.060
An understanding of message-oriented middleware concepts

34
00:01:23.060 --> 00:01:26.050
is definitely useful when configuring and coding up

35
00:01:26.050 --> 00:01:28.020
our message broker.

36
00:01:28.020 --> 00:01:30.020
The message broker must be configured

37
00:01:30.020 --> 00:01:34.030
to listen on a particular endpoint or server address

38
00:01:34.030 --> 00:01:38.080
and it manages the registry of topic or destinations.

39
00:01:38.080 --> 00:01:41.020
All of the messages flow through the broker

40
00:01:41.020 --> 00:01:44.000
and eventually onto whatever controller is configured

41
00:01:44.000 --> 00:01:46.090
to handle any ongoing business logic

42
00:01:46.090 --> 00:01:49.000
for processing messages.

43
00:01:49.000 --> 00:01:53.070
So, let's get started and review our project in the IDE.

44
00:01:53.070 --> 00:01:56.000
So, I wanna review some of our packaging

45
00:01:56.000 --> 00:01:58.080
and naming conventions that we're gonna use for our app,

46
00:01:58.080 --> 00:02:01.090
just so you know ahead of time where everything will be.

47
00:02:01.090 --> 00:02:06.050
Notice we have in our main package com.landon.chat.

48
00:02:06.050 --> 00:02:07.050
This is where we'll keep

49
00:02:07.050 --> 00:02:12.030
any application-level configuration classes.

50
00:02:12.030 --> 00:02:15.020
Our next package, our controller package,

51
00:02:15.020 --> 00:02:16.040
and as the name suggests,

52
00:02:16.040 --> 00:02:20.070
this is where all of our controllers will be kept.

53
00:02:20.070 --> 00:02:23.070
Finally, our model package,

54
00:02:23.070 --> 00:02:25.060
in this package is where we'll keep

55
00:02:25.060 --> 00:02:27.000
all the classes that we need

56
00:02:27.000 --> 00:02:30.010
to represent the different types of messages

57
00:02:30.010 --> 00:02:32.060
or model behavior.

58
00:02:32.060 --> 00:02:36.000
We'll talk more about that later.

59
00:02:36.000 --> 00:02:39.010
Finally, we won't write tests for this course,

60
00:02:39.010 --> 00:02:41.020
but we will be running them.

61
00:02:41.020 --> 00:02:43.080
There is a course on Spring: Test-Driven Development

62
00:02:43.080 --> 00:02:46.060
that you can take to learn about how to write these tests,

63
00:02:46.060 --> 00:02:48.050
but just so you know,

64
00:02:48.050 --> 00:02:51.070
as a convention, we will be keeping all of our test code

65
00:02:51.070 --> 00:02:54.070
in the src/test/java tree

66
00:02:54.070 --> 00:02:56.090
and we will package them to match

67
00:02:56.090 --> 00:02:59.000
the classes that they are testing.

