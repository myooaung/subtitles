WEBVTT
1
00:00:01.010 --> 00:00:02.070
- [Instructor] After we've started our webpage,

2
00:00:02.070 --> 00:00:05.000
and imported the necessary JavaScript libraries

3
00:00:05.000 --> 00:00:08.020
to support web socket, client side development,

4
00:00:08.020 --> 00:00:10.040
we can then create our JavaScript file,

5
00:00:10.040 --> 00:00:13.070
and begin writing our own app specific code

6
00:00:13.070 --> 00:00:16.080
to handle sending messages, broadcasting messages,

7
00:00:16.080 --> 00:00:19.070
and all the other features that we want in our app.

8
00:00:19.070 --> 00:00:21.010
For this video, we're gonna highlight some

9
00:00:21.010 --> 00:00:22.060
of the main things you need to consider

10
00:00:22.060 --> 00:00:24.070
when writing your JavaScript code

11
00:00:24.070 --> 00:00:27.040
for a real-time app client.

12
00:00:27.040 --> 00:00:28.050
So some of our goals are,

13
00:00:28.050 --> 00:00:31.030
we're gonna setup our SockJS object,

14
00:00:31.030 --> 00:00:34.010
we're gonna walk through what's required for doing that.

15
00:00:34.010 --> 00:00:35.070
I'll also show you the code that's needed

16
00:00:35.070 --> 00:00:38.090
to establish a connection, and what you can do in your code

17
00:00:38.090 --> 00:00:40.080
after that connection is established,

18
00:00:40.080 --> 00:00:44.090
such as, setting up all your topic subscriptions.

19
00:00:44.090 --> 00:00:49.060
So lets get started looking at some code.

20
00:00:49.060 --> 00:00:51.030
Before we begin this exercise,

21
00:00:51.030 --> 00:00:53.070
I want to point out where we are.

22
00:00:53.070 --> 00:00:56.060
We're in our src/main/resources tree,

23
00:00:56.060 --> 00:00:59.020
and in there, there's a sub-directory called static,

24
00:00:59.020 --> 00:01:01.050
where all of our static resources are kept.

25
00:01:01.050 --> 00:01:05.090
That includes our HTML, CSS, and JavaScript.

26
00:01:05.090 --> 00:01:09.010
I'm gonna open our app.js file,

27
00:01:09.010 --> 00:01:11.040
next I'm gonna double-click on the Editor pane,

28
00:01:11.040 --> 00:01:14.070
so that we can maximize it.

29
00:01:14.070 --> 00:01:16.060
Walking through some of this code

30
00:01:16.060 --> 00:01:17.090
will definitely be helpful.

31
00:01:17.090 --> 00:01:20.060
It's out of scope to show you how to write all of it,

32
00:01:20.060 --> 00:01:24.060
but I do want to point out a few important things.

33
00:01:24.060 --> 00:01:27.080
We're focused in this exercise on the code we want

34
00:01:27.080 --> 00:01:30.010
to implement for what happens

35
00:01:30.010 --> 00:01:33.010
when a client connects to a server.

36
00:01:33.010 --> 00:01:36.010
Notice, in our connect function, one of the first things

37
00:01:36.010 --> 00:01:40.060
that happens, is we have to create our SockJS object,

38
00:01:40.060 --> 00:01:43.060
and give it our application's root URI,

39
00:01:43.060 --> 00:01:47.050
which is landon-stomp-chat.

40
00:01:47.050 --> 00:01:50.040
Once the client has a connection,

41
00:01:50.040 --> 00:01:51.050
the next thing we want to do

42
00:01:51.050 --> 00:01:54.030
is implement all of the callback code,

43
00:01:54.030 --> 00:01:57.070
what happens, as soon as that connection's established.

44
00:01:57.070 --> 00:02:01.080
Well you'll see here, once we call connect on the client,

45
00:02:01.080 --> 00:02:04.000
we can begin in this callback function

46
00:02:04.000 --> 00:02:06.030
to implement the behavior we want.

47
00:02:06.030 --> 00:02:09.060
The most notable thing we want to happen here,

48
00:02:09.060 --> 00:02:14.080
is on our client, start subscribing to topics we care about

49
00:02:14.080 --> 00:02:16.060
for the features that we need to implement

50
00:02:16.060 --> 00:02:18.040
for this exercise.

51
00:02:18.040 --> 00:02:21.050
Right now, the one feature I want to implement,

52
00:02:21.050 --> 00:02:24.060
has to do with being able to broadcast guest names

53
00:02:24.060 --> 00:02:26.000
as they join.

54
00:02:26.000 --> 00:02:27.090
So, we've already setup server side

55
00:02:27.090 --> 00:02:30.080
a topic called guestnames.

56
00:02:30.080 --> 00:02:34.000
So I'm gonna enter that topic now,

57
00:02:34.000 --> 00:02:39.090
and I've already created a function called showJoinedName,

58
00:02:39.090 --> 00:02:43.020
which is gonna take care of all the behavior that's needed,

59
00:02:43.020 --> 00:02:47.040
after we subscribe to this topic, and someone joins.

60
00:02:47.040 --> 00:02:50.080
We pretty much just want to use our JSON utility,

61
00:02:50.080 --> 00:02:53.080
parse out the name that comes back from the server,

62
00:02:53.080 --> 00:02:57.060
and then, put that on the GUI somewhere.

63
00:02:57.060 --> 00:03:00.090
The next thing I want to point out to you,

64
00:03:00.090 --> 00:03:03.040
when a user enters a group, they type their name

65
00:03:03.040 --> 00:03:07.070
into a form field, and we have to call the send method

66
00:03:07.070 --> 00:03:10.090
on our client, to send that name over to the server,

67
00:03:10.090 --> 00:03:13.040
so that it can broadcast out to the rest of the group

68
00:03:13.040 --> 00:03:16.000
that someone has joined.

69
00:03:16.000 --> 00:03:20.030
To do that, we have to supply our app URI,

70
00:03:20.030 --> 00:03:22.000
so that the controller that's listening

71
00:03:22.000 --> 00:03:25.080
for this particular call, can pick up and handle

72
00:03:25.080 --> 00:03:29.000
whatever server side logic we need.

73
00:03:29.000 --> 00:03:31.000
So, the path that we need to enter here,

74
00:03:31.000 --> 00:03:39.090
is app/guestjoin, again, this was something

75
00:03:39.090 --> 00:03:42.020
we've already established server side,

76
00:03:42.020 --> 00:03:45.070
in an earlier exercise, and while we're at it,

77
00:03:45.070 --> 00:03:49.000
let's just take a brief look at showJoinedName,

78
00:03:49.000 --> 00:03:50.080
which I've already written.

79
00:03:50.080 --> 00:03:55.020
To show a name, what we're doing, is manipulating the HTML,

80
00:03:55.020 --> 00:03:57.090
we add a table row, which has a message

81
00:03:57.090 --> 00:03:59.080
containing the person's name,

82
00:03:59.080 --> 00:04:03.000
and then the string after that, just joined.

83
00:04:03.000 --> 00:04:06.040
So lets run this, and see what this looks like in a browser.

84
00:04:06.040 --> 00:04:08.090
So, one cool way to really see all this in action,

85
00:04:08.090 --> 00:04:11.030
is to have two browser windows open,

86
00:04:11.030 --> 00:04:14.030
and mimic two people in a conversation.

87
00:04:14.030 --> 00:04:20.080
So on one browser window, I'll join as myself, Shonna,

88
00:04:20.080 --> 00:04:23.050
and you'll see the server received the fact

89
00:04:23.050 --> 00:04:27.010
that I joined and then broadcast out to the GUI

90
00:04:27.010 --> 00:04:29.050
that I just joined.

91
00:04:29.050 --> 00:04:35.020
So now, in my next browser window, think I'll be Susan.

92
00:04:35.020 --> 00:04:38.090
Susan's going to join, and you'll also see over

93
00:04:38.090 --> 00:04:42.050
in the other browser window, instantaneously,

94
00:04:42.050 --> 00:04:46.050
the GUI was updated to let me know Susan just joined.

95
00:04:46.050 --> 00:04:48.020
We're done with this exercise.

96
00:04:48.020 --> 00:04:51.000
Now lets move on to actually sending messages.

