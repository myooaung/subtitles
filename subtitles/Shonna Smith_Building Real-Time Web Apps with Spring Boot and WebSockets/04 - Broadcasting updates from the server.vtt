WEBVTT
1
00:00:01.000 --> 00:00:03.040
- [Instructor] For our last exercise, we're gonna

2
00:00:03.040 --> 00:00:05.050
show what is probably considered the hallmark

3
00:00:05.050 --> 00:00:07.050
feature of a real-time chat app.

4
00:00:07.050 --> 00:00:09.030
We wanna make sure that the user interface

5
00:00:09.030 --> 00:00:12.060
gives some type of visual indicator or cue

6
00:00:12.060 --> 00:00:15.050
whenever another user is typing.

7
00:00:15.050 --> 00:00:17.040
We're gonna show what's involved in setting up

8
00:00:17.040 --> 00:00:20.060
that JavaScript code so that users can get

9
00:00:20.060 --> 00:00:22.050
that visual cue that they want.

10
00:00:22.050 --> 00:00:25.000
Let's look at some JavaScript for that now.

11
00:00:25.000 --> 00:00:27.000
Again for this exercise, we're still

12
00:00:27.000 --> 00:00:29.050
in the src/main/resources tree,

13
00:00:29.050 --> 00:00:32.030
in the static subdirectory, and I'm gonna open

14
00:00:32.030 --> 00:00:34.090
the app.js file.

15
00:00:34.090 --> 00:00:37.050
And in my editor, I'm gonna maximize so that we

16
00:00:37.050 --> 00:00:41.000
have more space and I'm gonna walk through

17
00:00:41.000 --> 00:00:45.020
what we have to do.

18
00:00:45.020 --> 00:00:48.060
Just like every other update that has to happen,

19
00:00:48.060 --> 00:00:51.070
we need to subscribe to a topic for those updates.

20
00:00:51.070 --> 00:00:54.090
So I've already gotten some code started here.

21
00:00:54.090 --> 00:00:57.060
On our client, we're gonna subscribe,

22
00:00:57.060 --> 00:01:02.070
and I have to type in, just as before, a topic name.

23
00:01:02.070 --> 00:01:05.090
So we've already set up these topics server-side,

24
00:01:05.090 --> 00:01:08.040
so this name should look pretty familiar.

25
00:01:08.040 --> 00:01:13.010
I have one called guestupdates already in place,

26
00:01:13.010 --> 00:01:14.090
and we have a showTyping function

27
00:01:14.090 --> 00:01:18.010
that's implementing what our callback behavior should be.

28
00:01:18.010 --> 00:01:24.050
So let's scroll down and look at that function now.

29
00:01:24.050 --> 00:01:26.080
Right now, the implementation for showTyping

30
00:01:26.080 --> 00:01:28.070
is pretty simplistic.

31
00:01:28.070 --> 00:01:31.040
I'm sure you could do way more with this,

32
00:01:31.040 --> 00:01:33.050
but all it's doing right now is simply

33
00:01:33.050 --> 00:01:36.080
manipulating the HTML, adding a table row

34
00:01:36.080 --> 00:01:41.030
with a message that simply states, "Someone is typing."

35
00:01:41.030 --> 00:01:43.030
I'm sure you could challenge yourself to figure

36
00:01:43.030 --> 00:01:46.060
out how to get their actual name into this message.

37
00:01:46.060 --> 00:01:54.050
But let's scroll down and let me show you one more thing.

38
00:01:54.050 --> 00:01:56.080
The way that the user is typing indicator

39
00:01:56.080 --> 00:02:00.090
happens, it's just looking at keystrokes,

40
00:02:00.090 --> 00:02:04.040
so there's a JavaScript event happening, keyup,

41
00:02:04.040 --> 00:02:07.040
and we're looking for that event, and when

42
00:02:07.040 --> 00:02:10.000
that event happens on our client, we're gonna

43
00:02:10.000 --> 00:02:13.060
send a message to our queue.

44
00:02:13.060 --> 00:02:16.040
Now again, for here we have to enter the root

45
00:02:16.040 --> 00:02:20.090
URI that our controller is mapped to.

46
00:02:20.090 --> 00:02:31.010
So in this particular case, this would be /app/guestupdate.

47
00:02:31.010 --> 00:02:33.010
And what we're doing is we're sending in

48
00:02:33.010 --> 00:02:35.080
a message that you can then challenge yourself

49
00:02:35.080 --> 00:02:38.050
to do something more useful with that message later.

50
00:02:38.050 --> 00:02:41.090
But let's stop here, and let's look at this in a browser.

51
00:02:41.090 --> 00:02:43.070
So again, I'm mimicking two users

52
00:02:43.070 --> 00:02:47.010
in a conversation, so I have two browser windows open.

53
00:02:47.010 --> 00:02:50.080
In one window, I'm gonna join as Shonna.

54
00:02:50.080 --> 00:02:55.010
In another window, I'm gonna join as Susan.

55
00:02:55.010 --> 00:02:58.000
And now, let's see what happens if Shonna

56
00:02:58.000 --> 00:03:01.030
starts typing a message to Susan.

57
00:03:01.030 --> 00:03:04.040
You see, our indicator shows up on the screen

58
00:03:04.040 --> 00:03:07.010
instantly, "Someone is typing."

59
00:03:07.010 --> 00:03:11.060
So let me finish my message to Susan,

60
00:03:11.060 --> 00:03:13.060
and just for completeness, let's have

61
00:03:13.060 --> 00:03:17.010
Susan respond, because Susan's not rude.

62
00:03:17.010 --> 00:03:21.030
"Hey to you too, Shonna."

63
00:03:21.030 --> 00:03:25.000
And look, as Susan is typing, we get that visual cue.

64
00:03:25.000 --> 00:03:28.010
Shonna knows that Susan is typing a response.

65
00:03:28.010 --> 00:03:29.070
And that's a complete experience

66
00:03:29.070 --> 00:03:32.060
for a chat application, sending messages

67
00:03:32.060 --> 00:03:34.080
and giving that visual indicator that people

68
00:03:34.080 --> 00:03:37.060
have become accustomed to whenever someone

69
00:03:37.060 --> 00:03:40.020
starts typing a response back.

70
00:03:40.020 --> 00:03:41.070
A quick review.

71
00:03:41.070 --> 00:03:44.050
We can now tell when someone is typing a response

72
00:03:44.050 --> 00:03:47.000
in our chat app before they send it.

73
00:03:47.000 --> 00:03:49.030
What we've done here in this exercise is we've

74
00:03:49.030 --> 00:03:51.090
laid the groundwork for other visual cue work

75
00:03:51.090 --> 00:03:53.040
that you may want to implement

76
00:03:53.040 --> 00:03:56.000
as you mature this application.

