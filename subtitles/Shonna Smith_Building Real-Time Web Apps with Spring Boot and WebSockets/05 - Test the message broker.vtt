WEBVTT
1
00:00:01.000 --> 00:00:02.040
- [Instructor] While creating and configuring

2
00:00:02.040 --> 00:00:04.070
our Chat App server-side components

3
00:00:04.070 --> 00:00:05.090
we should be practicing some

4
00:00:05.090 --> 00:00:08.070
test-driven development along the way.

5
00:00:08.070 --> 00:00:11.070
In this video we will walk through a J unit integration test

6
00:00:11.070 --> 00:00:13.040
that has already been written

7
00:00:13.040 --> 00:00:15.060
to simulate a client sending messages

8
00:00:15.060 --> 00:00:17.060
to the chat server and the major

9
00:00:17.060 --> 00:00:21.040
server-side components responding appropriately.

10
00:00:21.040 --> 00:00:23.010
Writing an integration test at this point

11
00:00:23.010 --> 00:00:25.030
is gonna help us get instant feedback that all of

12
00:00:25.030 --> 00:00:29.020
our configuration implementation is working as expected.

13
00:00:29.020 --> 00:00:32.010
So let's get started on that test.

14
00:00:32.010 --> 00:00:35.070
To begin, I'll point out that our test already exists

15
00:00:35.070 --> 00:00:40.000
and it's located in the src/test/Java directory tree.

16
00:00:40.000 --> 00:00:43.020
And in the chat package.

17
00:00:43.020 --> 00:00:44.060
So what I'm going to do is open up

18
00:00:44.060 --> 00:00:48.040
the chat server integration test and then

19
00:00:48.040 --> 00:00:52.030
double-click on the editor so that we can maximize

20
00:00:52.030 --> 00:00:55.030
and walk through a few things that are already done for you.

21
00:00:55.030 --> 00:00:57.090
But I just wanna point these out so you're aware.

22
00:00:57.090 --> 00:00:59.080
For the purposes of this exercise

23
00:00:59.080 --> 00:01:01.070
we won't go into too much depth on

24
00:01:01.070 --> 00:01:04.010
how to write this J unit test.

25
00:01:04.010 --> 00:01:06.010
But what we will do is walk through

26
00:01:06.010 --> 00:01:10.000
a done-for-you integration test that is using J unit.

27
00:01:10.000 --> 00:01:13.020
And show you how to test that your WebSocket

28
00:01:13.020 --> 00:01:18.080
server-side components actually work well together.

29
00:01:18.080 --> 00:01:22.020
First, let's point out what's happening in setup.

30
00:01:22.020 --> 00:01:24.030
The most significant things are

31
00:01:24.030 --> 00:01:28.030
one, we're creating a WebSocketStompClient.

32
00:01:28.030 --> 00:01:31.020
Spring provides us this convenience class

33
00:01:31.020 --> 00:01:35.010
to let us emulate the Java script client.

34
00:01:35.010 --> 00:01:37.050
The next thing to point out is on that client

35
00:01:37.050 --> 00:01:40.030
we want to make sure we set up our message converter.

36
00:01:40.030 --> 00:01:45.000
This allows us to convert our Json notation data payloads

37
00:01:45.000 --> 00:01:47.060
into Java objects and vice versa.

38
00:01:47.060 --> 00:01:49.010
Next let's look at our test case

39
00:01:49.010 --> 00:01:52.090
we have here for getChatMessage.

40
00:01:52.090 --> 00:01:54.030
I'm gonna scroll down to the bottom

41
00:01:54.030 --> 00:01:56.060
so I can walk you through a few more things

42
00:01:56.060 --> 00:01:58.070
you might want to be aware of.

43
00:01:58.070 --> 00:01:59.090
And let's walk through things

44
00:01:59.090 --> 00:02:03.040
in the order of execution flow.

45
00:02:03.040 --> 00:02:07.010
The first thing the client will do is connect.

46
00:02:07.010 --> 00:02:09.050
So here you can see the code where the client

47
00:02:09.050 --> 00:02:14.020
is establishing a connection by providing the URL.

48
00:02:14.020 --> 00:02:16.070
Part of this URL should be very familiar

49
00:02:16.070 --> 00:02:18.010
because it was one of the things

50
00:02:18.010 --> 00:02:23.060
that we had to register in our message broker.

51
00:02:23.060 --> 00:02:25.070
Step two in our execution flow

52
00:02:25.070 --> 00:02:29.020
the code for that is up a little further.

53
00:02:29.020 --> 00:02:33.030
Once a user is connected or the client is connected

54
00:02:33.030 --> 00:02:35.000
the first thing that they're going to wanna do is

55
00:02:35.000 --> 00:02:38.000
subscribe to a topic or two.

56
00:02:38.000 --> 00:02:41.010
For this test we're gonna subscribe to just one topic

57
00:02:41.010 --> 00:02:44.010
and we have to specify what that is.

58
00:02:44.010 --> 00:02:47.050
So how 'bout for this test we're gonna test out

59
00:02:47.050 --> 00:02:51.090
that we can subscribe to our guest chats topic

60
00:02:51.090 --> 00:02:56.090
and get back an expected response.

61
00:02:56.090 --> 00:02:58.020
The next thing we would do in

62
00:02:58.020 --> 00:03:02.040
order of execution is send in a message.

63
00:03:02.040 --> 00:03:05.030
And if you recall we do have a model class

64
00:03:05.030 --> 00:03:07.090
that we use for sending in messages.

65
00:03:07.090 --> 00:03:11.010
It's called the ChatInMessage.

66
00:03:11.010 --> 00:03:15.090
So I'm gonna create one of those right now.

67
00:03:15.090 --> 00:03:19.040
Create my new ChatInMessage

68
00:03:19.040 --> 00:03:23.000
and I can supply my message right here in my constructor.

69
00:03:23.000 --> 00:03:27.000
And why not the obligatory hello message?

70
00:03:27.000 --> 00:03:31.000
Hello Spring, so I've created my message

71
00:03:31.000 --> 00:03:33.090
now what I have to do is send it.

72
00:03:33.090 --> 00:03:37.070
So I'm gonna get my session object here

73
00:03:37.070 --> 00:03:41.050
and simply call the send method on that object.

74
00:03:41.050 --> 00:03:44.070
There's two arguments that are needed.

75
00:03:44.070 --> 00:03:49.010
One I have to send in my application end point.

76
00:03:49.010 --> 00:03:52.000
This prefect should also look very familiar

77
00:03:52.000 --> 00:03:57.080
because we had to configure this in our message broker.

78
00:03:57.080 --> 00:04:02.080
Second argument we need to send in is myMessage.

79
00:04:02.080 --> 00:04:05.010
And we're done.

80
00:04:05.010 --> 00:04:08.010
Now we're sending a message.

81
00:04:08.010 --> 00:04:12.030
Let's go finish this test off for validating

82
00:04:12.030 --> 00:04:15.090
or in J unit terminology asserting.

83
00:04:15.090 --> 00:04:19.080
What's gonna happen when a response comes back?

84
00:04:19.080 --> 00:04:26.010
So, I'm just gonna add a simple assertEquals statement here.

85
00:04:26.010 --> 00:04:31.030
I expect Hello Spring to come back out

86
00:04:31.030 --> 00:04:37.030
for my ChatOutMessage that the server has sent back.

87
00:04:37.030 --> 00:04:45.060
So I'm gonna call getContent on my greeting.

88
00:04:45.060 --> 00:04:49.060
And there we go, simple test is completed.

89
00:04:49.060 --> 00:04:56.020
Now let's run it.

90
00:04:56.020 --> 00:04:59.090
Now that we see the green bar we can be assured that

91
00:04:59.090 --> 00:05:02.000
all of the plumbing between the client,

92
00:05:02.000 --> 00:05:06.050
the message broker, and a controller is as it should be.

93
00:05:06.050 --> 00:05:08.080
So let's do a quick review.

94
00:05:08.080 --> 00:05:11.090
We were able to show in an already-done-for-you

95
00:05:11.090 --> 00:05:14.050
integration test how to use the

96
00:05:14.050 --> 00:05:18.030
Spring provided WebSocketStompClient class.

97
00:05:18.030 --> 00:05:20.020
We were able to simulate subscribing to

98
00:05:20.020 --> 00:05:22.060
the topic we were interested in,

99
00:05:22.060 --> 00:05:25.010
sending a message to that topic,

100
00:05:25.010 --> 00:05:28.040
and asserting or verifying that the response

101
00:05:28.040 --> 00:05:31.020
that came back is exactly what we expected.

102
00:05:31.020 --> 00:05:33.070
The benefit of practicing test-driven development

103
00:05:33.070 --> 00:05:36.030
at this step is it helps us stay in flow

104
00:05:36.030 --> 00:05:38.020
for server-side development.

105
00:05:38.020 --> 00:05:39.050
Remember in a real application

106
00:05:39.050 --> 00:05:42.000
we would have more controllers to do

107
00:05:42.000 --> 00:05:44.080
and staying in flow is very important.

108
00:05:44.080 --> 00:05:46.070
For more lessons and more specifics

109
00:05:46.070 --> 00:05:49.040
on practicing test-driven development with Spring

110
00:05:49.040 --> 00:05:51.040
there is another course in the library

111
00:05:51.040 --> 00:05:53.040
that specifically goes into depth

112
00:05:53.040 --> 00:05:56.000
on Spring and test-driven development.

