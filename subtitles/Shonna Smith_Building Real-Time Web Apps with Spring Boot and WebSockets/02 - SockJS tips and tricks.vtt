WEBVTT
1
00:00:01.010 --> 00:00:02.080
- [Instructor] So, we finished laying the groundwork

2
00:00:02.080 --> 00:00:05.040
for a pretty decent chat application,

3
00:00:05.040 --> 00:00:07.050
both client and server.

4
00:00:07.050 --> 00:00:11.040
On the client side, we are using the SockJS client library.

5
00:00:11.040 --> 00:00:12.060
So, now might be a good time to

6
00:00:12.060 --> 00:00:15.010
just go over a few tips and tricks.

7
00:00:15.010 --> 00:00:18.010
One, when you're using the sock JS library,

8
00:00:18.010 --> 00:00:19.070
you should know that you can only have

9
00:00:19.070 --> 00:00:21.080
one connection at a time established

10
00:00:21.080 --> 00:00:24.060
with a server on a single domain.

11
00:00:24.060 --> 00:00:27.030
This limitation is caused by an in browser limit

12
00:00:27.030 --> 00:00:29.040
of outgoing connections.

13
00:00:29.040 --> 00:00:32.000
A single SockJS session uses up

14
00:00:32.000 --> 00:00:33.080
the two outgoing connections that

15
00:00:33.080 --> 00:00:36.020
a browser typically allows.

16
00:00:36.020 --> 00:00:38.080
Remember because this is duplex communication,

17
00:00:38.080 --> 00:00:40.050
we need a connection for incoming

18
00:00:40.050 --> 00:00:42.070
as well as outgoing data.

19
00:00:42.070 --> 00:00:44.080
Secondly, remember that a WebSocket

20
00:00:44.080 --> 00:00:46.090
is just an HTTP connection

21
00:00:46.090 --> 00:00:49.090
that gets upgraded after that initial handshake

22
00:00:49.090 --> 00:00:52.020
between the client and the server.

23
00:00:52.020 --> 00:00:54.010
But rest assured there's no difference

24
00:00:54.010 --> 00:00:58.000
between using SockJS with encrypted HTTP

25
00:00:58.000 --> 00:00:59.060
or unencrypted HTTP.

26
00:00:59.060 --> 00:01:01.060
They both should work just fine.

27
00:01:01.060 --> 00:01:03.070
In fact, some developers have said

28
00:01:03.070 --> 00:01:05.080
you might see a little bit more stability

29
00:01:05.080 --> 00:01:08.010
when connecting over SSL

30
00:01:08.010 --> 00:01:11.020
due to the interference of HTTP proxies

31
00:01:11.020 --> 00:01:13.070
with unencrypted data traffic.

32
00:01:13.070 --> 00:01:16.090
Also, there were alternatives to SockJS.

33
00:01:16.090 --> 00:01:18.060
It's been compared to other popular

34
00:01:18.060 --> 00:01:22.090
libraries like Socket.io or Engine.io.

35
00:01:22.090 --> 00:01:25.070
However, I chose to use SockJS

36
00:01:25.070 --> 00:01:27.080
because some of the benefits are,

37
00:01:27.080 --> 00:01:30.070
unlike Engine.io, it's geared more towards

38
00:01:30.070 --> 00:01:34.040
a low level extraction of the WebSocket API.

39
00:01:34.040 --> 00:01:36.000
Which means it's useful if you're

40
00:01:36.000 --> 00:01:39.090
developing a framework on top of WebSockets.

41
00:01:39.090 --> 00:01:42.040
However, we want an application level extraction

42
00:01:42.040 --> 00:01:43.060
which is a higher level.

43
00:01:43.060 --> 00:01:45.060
That means we get to just focus on

44
00:01:45.060 --> 00:01:47.080
writing application features.

45
00:01:47.080 --> 00:01:52.010
Some other benefits, SockJS is actively maintained,

46
00:01:52.010 --> 00:01:54.050
it's already designed for scalability,

47
00:01:54.050 --> 00:01:56.000
and as we've mentioned before,

48
00:01:56.000 --> 00:01:58.030
it provides that fallback support

49
00:01:58.030 --> 00:02:00.060
in the event that a client is using a browser

50
00:02:00.060 --> 00:02:03.050
that doesn't support the WebSocket API.

51
00:02:03.050 --> 00:02:05.070
In those cases, the fallback plan

52
00:02:05.070 --> 00:02:08.090
will go to some type of coding technique.

53
00:02:08.090 --> 00:02:11.060
There's way more details than I can cover.

54
00:02:11.060 --> 00:02:14.060
But you can visit the sockjs.org website

55
00:02:14.060 --> 00:02:16.020
to get more tips and tricks

56
00:02:16.020 --> 00:02:19.000
and understand how to use this library even better.

