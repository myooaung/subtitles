WEBVTT
1
00:00:01.020 --> 00:00:02.090
- [Instructor] Because errors are pretty common

2
00:00:02.090 --> 00:00:05.020
in any app development, we should spend a little

3
00:00:05.020 --> 00:00:06.090
time talking about some common errors that

4
00:00:06.090 --> 00:00:09.010
you will encounter while working on your

5
00:00:09.010 --> 00:00:11.080
server side WebSocket code.

6
00:00:11.080 --> 00:00:13.050
In our lesson about configuring the message

7
00:00:13.050 --> 00:00:16.000
broker component, I promise to come back later

8
00:00:16.000 --> 00:00:18.030
and explain why you'd want to specify with

9
00:00:18.030 --> 00:00:23.040
SockJS as part of registering your endpoints.

10
00:00:23.040 --> 00:00:26.080
It will help to first know what SockJS is though.

11
00:00:26.080 --> 00:00:30.090
SockJS is a cross-browser JavaScript library.

12
00:00:30.090 --> 00:00:33.050
We're gonna be using the SockJS library to get

13
00:00:33.050 --> 00:00:36.030
us the use of a WebSocket like object

14
00:00:36.030 --> 00:00:38.060
in our JavaScript code.

15
00:00:38.060 --> 00:00:41.030
One of the big benefits to using this library

16
00:00:41.030 --> 00:00:43.070
is it's cross-browser implementation.

17
00:00:43.070 --> 00:00:46.040
Meaning, it provides for the polling style

18
00:00:46.040 --> 00:00:49.010
communications in the event that a users

19
00:00:49.010 --> 00:00:52.050
browser does not support the WebSocket protocol.

20
00:00:52.050 --> 00:00:55.010
It's helpful to let our server side code know

21
00:00:55.010 --> 00:00:58.090
to anticipate and also support the fallback plan.

22
00:00:58.090 --> 00:01:00.050
There's also some other common error

23
00:01:00.050 --> 00:01:02.000
handling you should be aware of.

24
00:01:02.000 --> 00:01:03.070
So let's turn our attention to that now

25
00:01:03.070 --> 00:01:05.060
for our next exercise.

26
00:01:05.060 --> 00:01:08.000
So to begin this exercise, we're gonna

27
00:01:08.000 --> 00:01:10.090
start in the controller package.

28
00:01:10.090 --> 00:01:14.050
I'm gonna open up the chat controller class.

29
00:01:14.050 --> 00:01:17.060
Next, gonna double click on the editor tab

30
00:01:17.060 --> 00:01:20.040
to maximize our editor window.

31
00:01:20.040 --> 00:01:25.040
And now I'm gonna show you how to start simply

32
00:01:25.040 --> 00:01:29.020
with adding some error handling to your controllers.

33
00:01:29.020 --> 00:01:33.010
First thing I'm gonna do, is create a method

34
00:01:33.010 --> 00:01:36.000
that's gonna send a chat out, message object

35
00:01:36.000 --> 00:01:38.070
whenever an exception happens and

36
00:01:38.070 --> 00:01:45.020
I'm just gonna call this method handle exception.

37
00:01:45.020 --> 00:01:47.040
And in terms of the method argument I'm

38
00:01:47.040 --> 00:01:50.050
just gonna use throwable.

39
00:01:50.050 --> 00:01:52.040
Just to get us started with some pretty

40
00:01:52.040 --> 00:01:55.030
generic exception handling here.

41
00:01:55.030 --> 00:01:58.090
The next thing I want to do

42
00:01:58.090 --> 00:02:04.030
is just create a chat out message object,

43
00:02:04.030 --> 00:02:10.010
and call it my error.

44
00:02:10.010 --> 00:02:13.000
And, I'm just gonna create a simple error

45
00:02:13.000 --> 00:02:17.070
message, an error happened.

46
00:02:17.070 --> 00:02:19.060
I'm sure once we make this app more

47
00:02:19.060 --> 00:02:21.060
bullet proof you'll do something more

48
00:02:21.060 --> 00:02:23.090
useful with that error.

49
00:02:23.090 --> 00:02:26.080
The last thing I wanna do is return

50
00:02:26.080 --> 00:02:30.080
my variable name here, my error.

51
00:02:30.080 --> 00:02:32.080
So, I've gotten you started with

52
00:02:32.080 --> 00:02:34.060
some simple error handling.

53
00:02:34.060 --> 00:02:36.090
I created chat out message object,

54
00:02:36.090 --> 00:02:39.030
I added a stream with an error message.

55
00:02:39.030 --> 00:02:44.020
Now the last thing to do, like in most spring components,

56
00:02:44.020 --> 00:02:47.090
we have to add some annotations here.

57
00:02:47.090 --> 00:02:50.030
In particular, we need to add a message

58
00:02:50.030 --> 00:02:54.090
exception handle annotation.

59
00:02:54.090 --> 00:02:58.010
That way, this is gonna map this controllers

60
00:02:58.010 --> 00:03:01.020
method handle exception

61
00:03:01.020 --> 00:03:04.010
to handle, to return, to the message queue

62
00:03:04.010 --> 00:03:07.020
the error message that we just created.

63
00:03:07.020 --> 00:03:10.010
And, we also have to set up which queue

64
00:03:10.010 --> 00:03:14.000
we want that message to go to.

65
00:03:14.000 --> 00:03:19.000
And, I'm gonna use an error queue,

66
00:03:19.000 --> 00:03:21.070
that way all messages can go to a queue

67
00:03:21.070 --> 00:03:24.080
that's just for that.

68
00:03:24.080 --> 00:03:26.070
And the last thing I need to do is

69
00:03:26.070 --> 00:03:30.040
make the compiler happy by importing the message

70
00:03:30.040 --> 00:03:32.010
exception handler.

71
00:03:32.010 --> 00:03:34.060
I'm gonna use my keyboard short cut

72
00:03:34.060 --> 00:03:37.090
of command, shift, o for me.

73
00:03:37.090 --> 00:03:39.030
If you're on a PC that might be

74
00:03:39.030 --> 00:03:41.050
control, shift, o.

75
00:03:41.050 --> 00:03:48.060
That's gonna organize all of my imports.

76
00:03:48.060 --> 00:03:51.030
And now the compiler is happy again.

77
00:03:51.030 --> 00:03:53.060
Later, once we get to working on the GUI,

78
00:03:53.060 --> 00:03:55.050
we're gonna look at how to trigger that

79
00:03:55.050 --> 00:03:58.020
handle exception behavior.

80
00:03:58.020 --> 00:04:01.050
So for our review, I added a simple exception

81
00:04:01.050 --> 00:04:05.000
handling method that just sends back

82
00:04:05.000 --> 00:04:08.080
a single line message of what the exception was.

83
00:04:08.080 --> 00:04:11.070
Obviously, you'll want to mature that approach

84
00:04:11.070 --> 00:04:14.080
and do some more bullet proof exception handling.

85
00:04:14.080 --> 00:04:16.060
But that method right there is enough

86
00:04:16.060 --> 00:04:17.080
to get you started.

87
00:04:17.080 --> 00:04:20.020
We also showed why it's important to configure

88
00:04:20.020 --> 00:04:24.040
your message brokers for the SockJS fallback plan.

89
00:04:24.040 --> 00:04:26.040
That way in the event that a user is using

90
00:04:26.040 --> 00:04:29.020
a browser that does not support WebSockets,

91
00:04:29.020 --> 00:04:31.000
it'll fall back to more of the

92
00:04:31.000 --> 00:04:33.000
polling style communications.

