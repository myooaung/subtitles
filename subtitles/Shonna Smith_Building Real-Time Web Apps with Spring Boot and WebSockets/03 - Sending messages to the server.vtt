WEBVTT
1
00:00:01.010 --> 00:00:03.010
- So we just saw what it was like to establish

2
00:00:03.010 --> 00:00:06.090
a connection and start subscribing to the topics

3
00:00:06.090 --> 00:00:09.020
that we care about in our chat app client.

4
00:00:09.020 --> 00:00:12.040
Now for the most exciting part, sending messages.

5
00:00:12.040 --> 00:00:14.030
For this exercise, we're gonna share exactly

6
00:00:14.030 --> 00:00:16.000
what code you need to have to make sure

7
00:00:16.000 --> 00:00:18.020
that messages are sent to the server,

8
00:00:18.020 --> 00:00:20.000
and then that the server can then broadcast

9
00:00:20.000 --> 00:00:23.030
those messages back to all of the chat participants.

10
00:00:23.030 --> 00:00:25.050
So let's take a look at some JavaScript.

11
00:00:25.050 --> 00:00:27.030
Again for this exercise, we're gonna open up

12
00:00:27.030 --> 00:00:30.040
our our app.js file, which is located in our

13
00:00:30.040 --> 00:00:36.070
src/main/resources tree in the static subdirectory.

14
00:00:36.070 --> 00:00:38.080
I'm gonna double click on the editor

15
00:00:38.080 --> 00:00:42.050
so we can maximize, get a little more space,

16
00:00:42.050 --> 00:00:45.080
and much like our last subscription for topic

17
00:00:45.080 --> 00:00:48.050
guest names, the code here is pretty much

18
00:00:48.050 --> 00:00:53.000
the same, the only difference being a different topic name.

19
00:00:53.000 --> 00:00:56.020
So for our guests to chat with each other,

20
00:00:56.020 --> 00:00:59.050
we've set up a topic called guestchats.

21
00:00:59.050 --> 00:01:02.090
And I already have a message ready to go

22
00:01:02.090 --> 00:01:05.060
to implement what should happen when guests

23
00:01:05.060 --> 00:01:06.070
chat with each other.

24
00:01:06.070 --> 00:01:10.070
So let's look at that showMessage function.

25
00:01:10.070 --> 00:01:14.040
Before we can show a message though, we have to send it.

26
00:01:14.040 --> 00:01:18.060
So our client has to call the send function.

27
00:01:18.060 --> 00:01:22.090
We have to send to the application's end point.

28
00:01:22.090 --> 00:01:25.050
The controller has been configured to listen

29
00:01:25.050 --> 00:01:29.020
for that messages on this particular end point,

30
00:01:29.020 --> 00:01:31.020
and you should remember that we set these all up

31
00:01:31.020 --> 00:01:33.020
in our server-side code already.

32
00:01:33.020 --> 00:01:39.080
So the end point needs to be app/guestchat.

33
00:01:39.080 --> 00:01:43.080
Once I type that, this message can now be sent

34
00:01:43.080 --> 00:01:48.070
and handled by the correct controller.

35
00:01:48.070 --> 00:01:50.060
What happens when a message comes back

36
00:01:50.060 --> 00:01:54.000
is the function showMessage gets called.

37
00:01:54.000 --> 00:01:56.010
Again, similar things are happening in here

38
00:01:56.010 --> 00:01:58.050
as we saw in the previous exercise.

39
00:01:58.050 --> 00:02:01.030
We'll write manipulate what's in the HTML,

40
00:02:01.030 --> 00:02:04.020
we add a table row to then broadcast out

41
00:02:04.020 --> 00:02:06.010
the message on the UI.

42
00:02:06.010 --> 00:02:08.020
We make sure that the user interface gets updated

43
00:02:08.020 --> 00:02:11.020
instantaneously for all connected clients.

44
00:02:11.020 --> 00:02:14.070
So let's run that and see what it looks like in a browser.

45
00:02:14.070 --> 00:02:19.060
Once again, I wanna mimic two users having a conversation.

46
00:02:19.060 --> 00:02:21.080
So I have two browser windows open.

47
00:02:21.080 --> 00:02:25.020
In one, I'm gonna join as Shonna.

48
00:02:25.020 --> 00:02:29.020
In another window, I'll join as Susan.

49
00:02:29.020 --> 00:02:31.040
Now that we've both joined, we can start chatting

50
00:02:31.040 --> 00:02:32.060
with each other.

51
00:02:32.060 --> 00:02:40.010
So Shonna is just gonna say hello to Susan.

52
00:02:40.010 --> 00:02:42.050
And as you can see, both browser windows

53
00:02:42.050 --> 00:02:44.030
were instantly updated.

54
00:02:44.030 --> 00:02:46.060
Now, just for completeness, let's have Susan

55
00:02:46.060 --> 00:02:47.050
say hello back.

56
00:02:47.050 --> 00:02:53.080
We don't want her to be rude.

57
00:02:53.080 --> 00:02:55.000
And there we go.

58
00:02:55.000 --> 00:02:56.070
We've just implemented how to make sure

59
00:02:56.070 --> 00:02:59.050
that messages get sent and get broadcast back

60
00:02:59.050 --> 00:03:01.010
to all connected clients.

61
00:03:01.010 --> 00:03:04.010
So we finally just saw what it took to send

62
00:03:04.010 --> 00:03:06.030
messages back and forth to the server

63
00:03:06.030 --> 00:03:09.000
and broadcast to all chat clients.

64
00:03:09.000 --> 00:03:12.000
So let's do a quick review of what we just accomplished.

65
00:03:12.000 --> 00:03:14.040
We just showed what it takes to set up

66
00:03:14.040 --> 00:03:17.030
a different topic so that chat messages can go

67
00:03:17.030 --> 00:03:20.000
back and forth between clients and the server.

68
00:03:20.000 --> 00:03:21.090
Then we brought up two browsers and emulated

69
00:03:21.090 --> 00:03:23.000
two users chatting.

70
00:03:23.000 --> 00:03:25.050
We were able to see how the user interface

71
00:03:25.050 --> 00:03:28.090
was instantly updated each time one user

72
00:03:28.090 --> 00:03:30.080
sent a message to another.

73
00:03:30.080 --> 00:03:34.060
But we still can't tell when someone is typing a response.

74
00:03:34.060 --> 00:03:37.070
That's what we all wanna see in real-time apps, right?

75
00:03:37.070 --> 00:03:40.000
So let's get ready to do our next exercise

76
00:03:40.000 --> 00:03:42.000
where we'll show you just that.

