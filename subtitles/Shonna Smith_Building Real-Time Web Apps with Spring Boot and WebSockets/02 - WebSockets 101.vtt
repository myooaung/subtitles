WEBVTT
1
00:00:01.000 --> 00:00:02.020
- [Instructor] Real-time apps are powered

2
00:00:02.020 --> 00:00:03.090
by the WebSockets API

3
00:00:03.090 --> 00:00:08.030
which was introduced to HTML at around the year 2011.

4
00:00:08.030 --> 00:00:10.080
It alleviated some challenges of prior solutions

5
00:00:10.080 --> 00:00:12.040
that were employed to give users

6
00:00:12.040 --> 00:00:15.090
a field of real-time interactivity with the web server.

7
00:00:15.090 --> 00:00:18.020
This video provides some useful context

8
00:00:18.020 --> 00:00:20.050
around the technology behind real-time apps

9
00:00:20.050 --> 00:00:23.020
that you may find helpful before you get started.

10
00:00:23.020 --> 00:00:26.050
To best understand how real-time apps are developed today,

11
00:00:26.050 --> 00:00:29.090
it's useful to pause and look at the major technology shifts

12
00:00:29.090 --> 00:00:31.010
that have happened,

13
00:00:31.010 --> 00:00:35.020
all in an effort to improve user experiences and wait times.

14
00:00:35.020 --> 00:00:36.020
For a long time,

15
00:00:36.020 --> 00:00:37.070
developers have been relying heavily

16
00:00:37.070 --> 00:00:42.050
on asynchronous HTTP or XHR for short

17
00:00:42.050 --> 00:00:45.070
for creating user interfaces that are much more responsive,

18
00:00:45.070 --> 00:00:49.010
but XHR can make developing web applications

19
00:00:49.010 --> 00:00:51.020
unnecessarily complex

20
00:00:51.020 --> 00:00:54.010
because you need to use tricky polling techniques

21
00:00:54.010 --> 00:00:55.070
to send data back and forth

22
00:00:55.070 --> 00:00:57.080
between the browser and the server.

23
00:00:57.080 --> 00:00:59.070
In addition to the complexity,

24
00:00:59.070 --> 00:01:03.030
there's also the overhead involved with XHR development.

25
00:01:03.030 --> 00:01:06.040
Each request has to send not only the request

26
00:01:06.040 --> 00:01:08.090
but the HTTP header back and forth

27
00:01:08.090 --> 00:01:10.070
between the browser and server

28
00:01:10.070 --> 00:01:13.020
and there's often request retries

29
00:01:13.020 --> 00:01:15.060
when a desired response isn't received

30
00:01:15.060 --> 00:01:18.010
within an allowed connection timeframe.

31
00:01:18.010 --> 00:01:20.010
With the introduction of WebSockets,

32
00:01:20.010 --> 00:01:23.070
web browsers can now establish a persistent connection,

33
00:01:23.070 --> 00:01:26.090
plus engage in a bidirectional conversation

34
00:01:26.090 --> 00:01:30.090
wherein the web browser can send messages to the web server,

35
00:01:30.090 --> 00:01:33.080
but also the web server can initiate a conversation

36
00:01:33.080 --> 00:01:36.040
and send messages to the web browser.

37
00:01:36.040 --> 00:01:39.010
Another improvement that WebSockets brings

38
00:01:39.010 --> 00:01:41.080
is the reduced messaging overhead.

39
00:01:41.080 --> 00:01:43.060
A message that used to be kilobytes

40
00:01:43.060 --> 00:01:45.050
because of the necessary headers

41
00:01:45.050 --> 00:01:48.010
can now be reduced down to mere bytes.

42
00:01:48.010 --> 00:01:52.000
This is because of a frame-based data exchange approach.

43
00:01:52.000 --> 00:01:53.090
One other notable difference,

44
00:01:53.090 --> 00:01:56.000
some may call this a drawback,

45
00:01:56.000 --> 00:01:57.080
but when using WebSockets,

46
00:01:57.080 --> 00:02:00.090
message order is not guaranteed.

47
00:02:00.090 --> 00:02:02.050
It may not be sequential

48
00:02:02.050 --> 00:02:05.020
unlike with XHR style development

49
00:02:05.020 --> 00:02:07.050
where you know that responses will be received

50
00:02:07.050 --> 00:02:10.010
in the same order as the request.

51
00:02:10.010 --> 00:02:13.000
This should be noted so that you know when it may be best

52
00:02:13.000 --> 00:02:17.010
to rely on XHR and polling versus WebSockets.

53
00:02:17.010 --> 00:02:20.060
Because WebSockets is a very low-level protocol

54
00:02:20.060 --> 00:02:22.080
and more about the communications rules

55
00:02:22.080 --> 00:02:24.070
between the browser and the server,

56
00:02:24.070 --> 00:02:26.080
an application-level subprotocol

57
00:02:26.080 --> 00:02:29.060
is most likely what you'll be using as a developer.

58
00:02:29.060 --> 00:02:34.000
STOMP or Simple Text-Oriented Messaging Protocol

59
00:02:34.000 --> 00:02:37.020
is what we'll be using for our sample chat app.

60
00:02:37.020 --> 00:02:40.020
STOMP provides the messaging semantics

61
00:02:40.020 --> 00:02:44.010
and defines a handful of useful frame types

62
00:02:44.010 --> 00:02:46.030
that are mapped onto WebSockets.

63
00:02:46.030 --> 00:02:49.030
It gives us the ability to do the simple tasks

64
00:02:49.030 --> 00:02:52.010
like connecting, subscribing,

65
00:02:52.010 --> 00:02:53.090
sending messages to the server,

66
00:02:53.090 --> 00:02:56.080
or when a message is received from the server

67
00:02:56.080 --> 00:02:59.040
triggering the onmessage event handler.

68
00:02:59.040 --> 00:03:02.040
STOMP is a lightweight messaging protocol.

69
00:03:02.040 --> 00:03:04.010
It assures that developers

70
00:03:04.010 --> 00:03:06.030
can create client-side and server-side code

71
00:03:06.030 --> 00:03:09.000
that is both language and platform agnostic.

