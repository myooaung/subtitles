WEBVTT
1
00:00:01.000 --> 00:00:02.050
- [Narrator] Our real-time spring app

2
00:00:02.050 --> 00:00:06.090
is built using the spring MVC application design pattern.

3
00:00:06.090 --> 00:00:09.020
Therefore controller components will definitely

4
00:00:09.020 --> 00:00:10.050
be needed.

5
00:00:10.050 --> 00:00:12.080
For our next coding exercise,

6
00:00:12.080 --> 00:00:15.040
we will create a controller for our chat app

7
00:00:15.040 --> 00:00:17.030
and walk through how to implement the method

8
00:00:17.030 --> 00:00:20.010
for handling chat messages that come in.

9
00:00:20.010 --> 00:00:23.090
Remember, in our app the controller's main responsibility

10
00:00:23.090 --> 00:00:25.090
is to map a handler method,

11
00:00:25.090 --> 00:00:28.080
to particular message destinations,

12
00:00:28.080 --> 00:00:31.060
and application URIs.

13
00:00:31.060 --> 00:00:34.060
We will complete a simple controller for our exercise,

14
00:00:34.060 --> 00:00:36.040
but in a more mature app,

15
00:00:36.040 --> 00:00:39.020
you would likely develop multiple controllers

16
00:00:39.020 --> 00:00:41.000
to handle the different responsibilities

17
00:00:41.000 --> 00:00:44.050
and logic for a variety of topic subscriptions.

18
00:00:44.050 --> 00:00:46.080
Imagine fully implementing the scenarios

19
00:00:46.080 --> 00:00:49.020
for our landing events management app.

20
00:00:49.020 --> 00:00:50.090
Remember that ultimately,

21
00:00:50.090 --> 00:00:53.070
this app should handle guest to guest chat,

22
00:00:53.070 --> 00:00:55.050
guest to host chats,

23
00:00:55.050 --> 00:00:57.060
and hosts to venue chats

24
00:00:57.060 --> 00:00:59.060
that could require multiple controllers

25
00:00:59.060 --> 00:01:01.050
to really implement that.

26
00:01:01.050 --> 00:01:03.080
So for our next exercise we're gonna implement

27
00:01:03.080 --> 00:01:06.030
our simple controller to get us started.

28
00:01:06.030 --> 00:01:08.040
To begin our exercise, I'm gonna go

29
00:01:08.040 --> 00:01:12.050
into our controller package.

30
00:01:12.050 --> 00:01:16.000
Open our chat controller class.

31
00:01:16.000 --> 00:01:19.070
And I'm also gonna double click on this class editor window

32
00:01:19.070 --> 00:01:22.050
just so we have more space.

33
00:01:22.050 --> 00:01:24.050
To get us started, I've already created

34
00:01:24.050 --> 00:01:27.020
a handleMessaging method.

35
00:01:27.020 --> 00:01:30.090
This is the method that I want called whenever a chat comes

36
00:01:30.090 --> 00:01:36.030
in and I want to send back a response from the server.

37
00:01:36.030 --> 00:01:39.020
So to get started implementing, the first thing I want

38
00:01:39.020 --> 00:01:46.060
to add is a little bit of a delay.

39
00:01:46.060 --> 00:01:48.060
And the reason why I wanna do this is

40
00:01:48.060 --> 00:01:54.000
to simulate actual server behavior.

41
00:01:54.000 --> 00:01:56.010
So that's step one.

42
00:01:56.010 --> 00:01:58.030
Step two is simply returning

43
00:01:58.030 --> 00:02:00.070
the response you wanna send back.

44
00:02:00.070 --> 00:02:04.040
For our behavior it's okay to just broadcast back out

45
00:02:04.040 --> 00:02:05.090
the message that came in.

46
00:02:05.090 --> 00:02:08.050
Remember someone chats a message

47
00:02:08.050 --> 00:02:11.010
and it's the server's responsibility to broadcast

48
00:02:11.010 --> 00:02:13.080
that response out to anyone subscribing

49
00:02:13.080 --> 00:02:15.090
to the topic for those messages.

50
00:02:15.090 --> 00:02:21.090
So, what I'll do is take the message that came in

51
00:02:21.090 --> 00:02:28.010
and simply echo that back out on the ChatOutMessage option.

52
00:02:28.010 --> 00:02:29.050
So for the incoming message,

53
00:02:29.050 --> 00:02:34.060
I'm gonna call the getMessage method.

54
00:02:34.060 --> 00:02:39.010
Pass that message into the ChatOutMessage option.

55
00:02:39.010 --> 00:02:42.020
And that's what we're sending out.

56
00:02:42.020 --> 00:02:44.040
But we have a few more steps to do

57
00:02:44.040 --> 00:02:48.060
before this is really a complete controller

58
00:02:48.060 --> 00:02:53.040
that's gonna work with our web socket.

59
00:02:53.040 --> 00:02:55.080
For one, we need to finish up by adding some

60
00:02:55.080 --> 00:02:58.040
of the spring annotations,

61
00:02:58.040 --> 00:03:01.010
one the controller annotation,

62
00:03:01.010 --> 00:03:02.080
so that our spring container knows

63
00:03:02.080 --> 00:03:06.040
that this is a controller component.

64
00:03:06.040 --> 00:03:09.040
Second, and one of the most important

65
00:03:09.040 --> 00:03:11.000
for what we're trying to accomplish

66
00:03:11.000 --> 00:03:14.020
is we have to add a spring annotation

67
00:03:14.020 --> 00:03:16.080
called MessageMapping.

68
00:03:16.080 --> 00:03:21.020
This is what maps a URI to this controller.

69
00:03:21.020 --> 00:03:23.030
So we're gonna give it a logical name

70
00:03:23.030 --> 00:03:26.000
given the responsibility of this controller.

71
00:03:26.000 --> 00:03:30.020
And I'm gonna call the guest chat URI.

72
00:03:30.020 --> 00:03:34.040
Lastly, in addition to a URI our controller

73
00:03:34.040 --> 00:03:38.020
also needs to know which topic destinations

74
00:03:38.020 --> 00:03:42.010
that it should be sending and receiving messages from.

75
00:03:42.010 --> 00:03:47.000
We specify that with the SendTo annotation.

76
00:03:47.000 --> 00:03:50.040
And again I'm gonna choose a pretty simple,

77
00:03:50.040 --> 00:03:52.060
yet logical name.

78
00:03:52.060 --> 00:03:56.090
It's customary to prefix these names with topic

79
00:03:56.090 --> 00:03:58.090
and then follow it with something that makes sense

80
00:03:58.090 --> 00:03:59.080
for your app.

81
00:03:59.080 --> 00:04:04.060
So I'm gonna use guest chats.

82
00:04:04.060 --> 00:04:06.090
Now that I've added my annotations,

83
00:04:06.090 --> 00:04:09.040
I've simulated my server delay,

84
00:04:09.040 --> 00:04:11.070
and I've broadcast out my message.

85
00:04:11.070 --> 00:04:14.010
I have a simple controller started

86
00:04:14.010 --> 00:04:16.050
to handle the simplest scenario

87
00:04:16.050 --> 00:04:18.050
of making sure that chats come in

88
00:04:18.050 --> 00:04:20.000
and responses go out.

89
00:04:20.000 --> 00:04:22.010
So let's review real quick.

90
00:04:22.010 --> 00:04:25.070
We did something really simple in a few lines of code,

91
00:04:25.070 --> 00:04:27.090
but that's all it takes to get you started

92
00:04:27.090 --> 00:04:31.040
with creating your first real-time chat application.

93
00:04:31.040 --> 00:04:34.090
We simply had to create a handle messaging method.

94
00:04:34.090 --> 00:04:38.030
We had to create the proper annotations,

95
00:04:38.030 --> 00:04:40.050
one a MessageMapping annotation

96
00:04:40.050 --> 00:04:45.050
so the controller knows which URI it maps to.

97
00:04:45.050 --> 00:04:48.090
We also had to add the SendTo annotation.

98
00:04:48.090 --> 00:04:51.070
This is what maps a handler method

99
00:04:51.070 --> 00:04:54.080
to the message queue or topic.

100
00:04:54.080 --> 00:04:56.060
Next, we're gonna extend this controller

101
00:04:56.060 --> 00:04:59.000
to add even more behavior.

