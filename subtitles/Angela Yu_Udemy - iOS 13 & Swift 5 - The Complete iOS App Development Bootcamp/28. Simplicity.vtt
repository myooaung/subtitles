WEBVTT
0
1
00:00:00.810 --> 00:00:03.880
Question number 4 is can I make it simpler?
1

2
00:00:03.900 --> 00:00:05.760
And the answer is usually yes.
2

3
00:00:05.760 --> 00:00:12.630
Now this is an example of when bad user experience or bad design can kill.
3

4
00:00:12.630 --> 00:00:13.500
Now why is that?
4

5
00:00:13.500 --> 00:00:16.210
This is a piece of software called Power Shot.
5

6
00:00:16.470 --> 00:00:22.560
And in the UK it's used up and down the country by doctors, nurses and health professionals in order
6

7
00:00:22.560 --> 00:00:24.970
to manage patients in hospital.
7

8
00:00:25.080 --> 00:00:31.710
Now it allows you to do a number of things such as look at which investigations the patients had, what
8

9
00:00:31.710 --> 00:00:35.710
are the results, what diagnoses have they had better etc..
9

10
00:00:35.760 --> 00:00:39.900
Now it is such a horrendously complicated piece of software.
10

11
00:00:39.900 --> 00:00:46.620
Just look up here at the three rows of buttons. You know even Microsoft doesn't do this anymore in their
11

12
00:00:46.620 --> 00:00:48.420
latest Office software.
12

13
00:00:48.450 --> 00:00:51.960
This is a horrendously designed piece of enterprise software.
13

14
00:00:51.960 --> 00:00:58.320
Now the story goes that the nurses were being introduced to this new computer system and they were looking
14

15
00:00:58.320 --> 00:01:00.660
after a little girl who was on chemotherapy.
15

16
00:01:00.870 --> 00:01:06.840
And when you're on chemotherapy, you tend to need regular fluid flushes through your veins so that the
16

17
00:01:06.840 --> 00:01:09.470
chemicals don't destroy your kidneys.
17

18
00:01:09.660 --> 00:01:15.810
And the nurses were so confused by this piece of software that they ended up forgetting about the little
18

19
00:01:15.810 --> 00:01:21.620
girl who needed the IV flushes and she almost went into kidney failure.
19

20
00:01:21.840 --> 00:01:28.110
So even though we think that, you know, the job of a designer is just purely for vanity is all about appearance,
20

21
00:01:28.170 --> 00:01:33.690
but actually it's so much more than that and you should always keep in mind to keep things as simple
21

22
00:01:33.720 --> 00:01:34.800
as possible.
22

23
00:01:34.860 --> 00:01:41.400
And this is one of the reasons why hardware and software from Apple is so delightful to use because
23

24
00:01:41.400 --> 00:01:43.850
in most cases it's just very simple.
24

25
00:01:43.850 --> 00:01:48.120
It's something that you can give to your grandmother. So you should think always you know is your tech,
25

26
00:01:48.150 --> 00:01:50.870
is your app, is your website grandma proof.
26

27
00:01:50.880 --> 00:01:56.550
You know if you took it to her, would she know how to use it or would she get confused by all the buttons?
27

28
00:01:56.990 --> 00:01:57.310
Now
28

29
00:01:57.330 --> 00:02:04.830
the app equivalent of this program is something like this where you have rows upon rows of buttons a
29

30
00:02:04.830 --> 00:02:06.830
million different colors,
30

31
00:02:07.140 --> 00:02:09.510
tightly packed user interface.
31

32
00:02:09.510 --> 00:02:15.150
I mean whenever you find yourself making two rows of buttons, then you should probably smack yourself
32

33
00:02:15.150 --> 00:02:18.270
on the wrist because this will never ever work
33

34
00:02:18.270 --> 00:02:24.840
well. Most of us have thumbs that are way too big to be able to differentiate between whether he pressed
34

35
00:02:24.930 --> 00:02:31.890
this button or whether if you press this button. And you will frustrate users to no end if you implement
35

36
00:02:31.920 --> 00:02:35.280
two rows of buttons and they keep pressing on the wrong thing.
36

37
00:02:35.280 --> 00:02:36.910
So think about simplicity.
37

38
00:02:36.930 --> 00:02:39.490
Always always try to make things simpler.
38

39
00:02:39.510 --> 00:02:44.040
Now this is an example of the onboarding screen of an app called Ness.
39

40
00:02:44.040 --> 00:02:51.720
Now the core objective of this app is to allow users to discover dishes that are around them and things
40

41
00:02:51.720 --> 00:02:52.940
that they might enjoy.
41

42
00:02:53.010 --> 00:02:59.970
But when you first download the app, they give you this long tutorial with things that should be pretty
42

43
00:02:59.970 --> 00:03:00.720
intuitive.
43

44
00:03:00.720 --> 00:03:07.650
For example, most of us know that this symbol means probably something to do with changing the time or
44

45
00:03:07.650 --> 00:03:11.670
the symbol probably means something to do with changing the location.
45

46
00:03:11.700 --> 00:03:17.280
You don't have to explicitly tell people about it. And it can feel really condescending
46

47
00:03:17.280 --> 00:03:21.030
as a user to be told what every little button does
47

48
00:03:21.060 --> 00:03:23.510
even though it seems quite intuitive.
48

49
00:03:23.520 --> 00:03:30.210
Now this is an app called Food spotting and they have the same goal and objective as Ness. Essentially
49

50
00:03:30.210 --> 00:03:37.200
helps users discover good dishes near them and all it does is that as soon as you open up the app, it
50

51
00:03:37.200 --> 00:03:42.620
tries to find your location and then immediately shows you the dishes that are close by.
51

52
00:03:42.870 --> 00:03:50.100
So remember when we said earlier that you have to identify the core objective of the users for using
52

53
00:03:50.100 --> 00:03:54.930
your app and then try to minimize the number of steps that it takes to achieve that,
53

54
00:03:54.930 --> 00:04:01.680
it cut down three or four taps to essentially zero because everything is loaded up automatically.
54

55
00:04:01.680 --> 00:04:03.450
So Simplicity is key.
55

56
00:04:03.450 --> 00:04:05.670
You can always make things simpler.
56

57
00:04:05.700 --> 00:04:12.180
Scrap everything until you're left with the very basic and then add features and add things onto it
57

58
00:04:12.300 --> 00:04:17.460
as and when users demand it because you can always keep things simpler.
