1
00:00:00,490 --> 00:00:01,420
Welcome back.

2
00:00:01,720 --> 00:00:06,970
We're now into the tree data structure section right over here.

3
00:00:07,930 --> 00:00:14,380
And as you can see, trees or length lists are a type of a tree that we've already talked about.

4
00:00:14,380 --> 00:00:17,980
But there's a few others over here that we have yet to talk about.

5
00:00:18,640 --> 00:00:25,840
So we're going to cover that and get familiar with the main different types by starting off with binary

6
00:00:25,840 --> 00:00:26,440
tree.

7
00:00:26,950 --> 00:00:27,940
Let's get into it.

8
00:00:29,660 --> 00:00:37,520
A binary tree is something you've likely seen before, and it's a type of tree with a few rules that

9
00:00:37,520 --> 00:00:40,700
are applied to it, but they're quite straightforward.

10
00:00:41,540 --> 00:00:50,510
Each node can only have either zero one or two nodes, and each child can only have one parent.

11
00:00:50,900 --> 00:00:52,910
This is a binary tree.

12
00:00:52,940 --> 00:01:00,050
However, this is not a binary tree because it has three children, or at least one of the nodes has

13
00:01:00,050 --> 00:01:01,160
three children.

14
00:01:02,150 --> 00:01:05,960
And each node represents a certain state.

15
00:01:06,320 --> 00:01:10,520
And this is very similar to what we've done in the past, especially with link lists.

16
00:01:11,630 --> 00:01:19,610
If we take a look at an example here, in order for me to create a binary tree, well, I can just create

17
00:01:19,610 --> 00:01:20,450
a function.

18
00:01:20,450 --> 00:01:23,330
Say, binary tree.

19
00:01:24,350 --> 00:01:28,040
And this binary tree perhaps will get a value.

20
00:01:29,800 --> 00:01:39,250
And the binary tree, or in our case, let's just do a binary tree node will simply have a this dot

21
00:01:39,280 --> 00:01:44,170
value associated with it, which is the value that we give it inside of the function.

22
00:01:44,560 --> 00:01:51,610
And then we have two other properties, which is a pointer to the left side of the tree, which for

23
00:01:51,610 --> 00:01:55,030
now will be null and a pointer to the right side of the tree.

24
00:01:55,030 --> 00:01:58,750
That is this dot right equals.

25
00:01:59,660 --> 00:02:00,260
No.

26
00:02:02,120 --> 00:02:02,820
And that's it.

27
00:02:02,840 --> 00:02:09,560
We can represent a binary tree node as simply having a value and then a left and or right property,

28
00:02:09,680 --> 00:02:14,780
very similar to what we did, or a very similar principle to what we did with link lists.

29
00:02:15,640 --> 00:02:22,360
Now we're going to actually code a tree and create a tree data structure, just like we have for past

30
00:02:22,360 --> 00:02:23,290
data structures.

31
00:02:23,870 --> 00:02:29,750
But I want to also point out a few terminology that we might come across and that are important.

32
00:02:30,890 --> 00:02:36,290
In this case, we're looking at something called a tree that is completely full.

33
00:02:36,890 --> 00:02:40,250
That means there are no gaps in the tree.

34
00:02:40,730 --> 00:02:42,050
Let me show you what I mean.

35
00:02:42,940 --> 00:02:47,460
A perfect binary tree has everything filled in.

36
00:02:47,470 --> 00:02:55,300
That means all the leaf nodes are full and there's no node that only has one child.

37
00:02:55,660 --> 00:03:05,020
A node either has zero children or two children, and also the bottom layer of the tree is completely

38
00:03:05,020 --> 00:03:05,540
filled.

39
00:03:05,560 --> 00:03:14,890
Nothing's missing versus a full binary tree, which simply says that a node has either zero or two children,

40
00:03:14,890 --> 00:03:16,630
but never one child.

41
00:03:16,900 --> 00:03:18,790
Now, why is this important?

42
00:03:19,090 --> 00:03:27,700
Because this type of binary tree, especially a perfect binary tree, is really, really efficient and

43
00:03:27,700 --> 00:03:29,590
something that is desirable.

44
00:03:29,590 --> 00:03:35,410
When binary trees are perfect like this, they have two really interesting properties.

45
00:03:35,410 --> 00:03:43,000
One is that the number of total nodes on each level doubles as we move down the tree.

46
00:03:43,510 --> 00:03:47,650
For example, here we have one node and the next level we have two.

47
00:03:48,010 --> 00:03:49,840
So we've just doubled the nodes.

48
00:03:49,840 --> 00:03:53,290
And the next level we have one, two, three, four.

49
00:03:53,320 --> 00:03:55,900
So we've doubled 2 to 4.

50
00:03:56,200 --> 00:04:02,170
If we had another level, that's a perfect binary tree, we'd have one, two, three, four, five,

51
00:04:02,170 --> 00:04:03,460
six, seven, eight.

52
00:04:03,460 --> 00:04:05,560
So we were doubling every time.

53
00:04:06,540 --> 00:04:13,650
The second important property is that the number of nodes on the last level is equal to the sum of the

54
00:04:13,650 --> 00:04:17,850
number of nodes on all the other levels plus one.

55
00:04:18,329 --> 00:04:18,690
All right.

56
00:04:18,690 --> 00:04:19,410
That was confusing.

57
00:04:19,410 --> 00:04:20,250
What do I mean?

58
00:04:20,250 --> 00:04:21,810
Well, here.

59
00:04:21,959 --> 00:04:26,430
If I take the bottom level, that is one, two, three, four.

60
00:04:26,460 --> 00:04:33,900
The second property states that all the nodes above it plus one is going to equal the bottom level.

61
00:04:33,900 --> 00:04:37,770
So one, two, three plus one equals four.

62
00:04:37,800 --> 00:04:44,550
That is what we had on the bottom, which means, in other words, that about half of our nodes are

63
00:04:44,550 --> 00:04:46,260
on the last level.

64
00:04:46,740 --> 00:04:49,770
And this brings up a really interesting point.

65
00:04:49,950 --> 00:04:52,840
By organizing our data in this way.

66
00:04:52,860 --> 00:04:56,760
We have half of this data in the bottom level.

67
00:04:56,760 --> 00:05:03,810
If somehow we can avoid visiting every node, even if the node we're looking for is at the very bottom.

68
00:05:04,320 --> 00:05:07,230
Perhaps there is some efficiencies that we can have.

69
00:05:08,220 --> 00:05:09,180
And you'd be right.

70
00:05:09,860 --> 00:05:17,450
Because of this type of structure, you're going to see a new notation of big O, something that we've

71
00:05:17,450 --> 00:05:20,360
been waiting for a long time o log.

72
00:05:20,360 --> 00:05:26,030
N And when we start talking about something called binary search trees, you're going to start seeing

73
00:05:26,030 --> 00:05:27,170
this notation.

74
00:05:27,380 --> 00:05:30,680
Yes, we finally got into another big notation.

75
00:05:30,680 --> 00:05:32,510
But what does it mean?

76
00:05:32,870 --> 00:05:39,500
In the next video I want to talk about O, log n and why trees allow us to have something like this

77
00:05:39,500 --> 00:05:41,510
and what the implications are.

78
00:05:42,410 --> 00:05:43,400
I'll see you the next one.

79
00:05:44,060 --> 00:05:44,630
Bye bye.

