WEBVTT
1
00:00:00.610 --> 00:00:01.510
Welcome back.

2
00:00:01.810 --> 00:00:03.940
How did it go with the remove method?

3
00:00:05.370 --> 00:00:09.480
It should be fairly easy since we got the insert method right.

4
00:00:10.340 --> 00:00:19.700
All we need to do is first check the parameters and we might want to check whether the index is a positive

5
00:00:19.700 --> 00:00:22.880
number, whether the index is higher than the length.

6
00:00:22.880 --> 00:00:25.100
But that's something we've already talked about.

7
00:00:25.100 --> 00:00:28.070
So let's get to the meat and potatoes.

8
00:00:28.070 --> 00:00:29.450
The main part of remove.

9
00:00:30.110 --> 00:00:34.880
All we need to do is once again get the reference to our leader.

10
00:00:35.900 --> 00:00:39.650
So that is if we want to remove, let's say 99.

11
00:00:40.280 --> 00:00:43.190
So that is index of 012.

12
00:00:44.560 --> 00:00:54.790
In that case, we want to make sure that we remove the 10 to 99 pointer and instead point 10 to 5.

13
00:00:55.630 --> 00:01:01.540
And because of how memory works in garbage collected languages like JavaScript, as soon as we remove

14
00:01:01.540 --> 00:01:04.810
that reference, 99 is going to get deleted.

15
00:01:05.470 --> 00:01:10.000
So all we're saying now is remove this pointer.

16
00:01:11.440 --> 00:01:13.840
And then just update this.

17
00:01:15.010 --> 00:01:16.150
To point to the.

18
00:01:16.880 --> 00:01:19.250
This list and this gets deleted.

19
00:01:19.760 --> 00:01:22.310
I hope that my little diagram there makes sense.

20
00:01:22.340 --> 00:01:23.330
Let's code this out.

21
00:01:23.780 --> 00:01:32.030
Well, we first find the leader just like we did in our insert function by using this traverse to index.

22
00:01:32.480 --> 00:01:38.450
So I'm going to say this dot traverse to index, index minus one.

23
00:01:39.150 --> 00:01:40.620
And we have the leader.

24
00:01:41.580 --> 00:01:52.800
Now we have the leader and we can point ten to now point to five, but we need a reference to this five.

25
00:01:53.370 --> 00:02:02.610
And the way we get that reference is to say const on wanted node, that is the node we want to delete

26
00:02:03.660 --> 00:02:12.840
is going to have leader dot next that is the I want to node is going to equal later next which is 99

27
00:02:13.410 --> 00:02:17.490
and we got that variable so we can do leader.

28
00:02:19.510 --> 00:02:24.070
Dot next to equal unwanted node.

29
00:02:25.320 --> 00:02:26.580
Dot next.

30
00:02:26.670 --> 00:02:34.110
So we grab the leader and then we said, this node that I don't want, I want to grab it here by using

31
00:02:34.110 --> 00:02:42.210
liters next and then make sure that we get the pointer that is 99 to 5, which is on one to node next,

32
00:02:42.210 --> 00:02:43.760
which equals to five.

33
00:02:43.770 --> 00:02:48.990
The five node to now be pointed from leader dot next.

34
00:02:49.960 --> 00:02:57.130
And of course, so we don't forget we have to decrease the length because we're removing a node by doing

35
00:02:57.130 --> 00:03:00.340
minus, minus, and we can just return.

36
00:03:01.160 --> 00:03:02.390
This dot.

37
00:03:03.130 --> 00:03:04.030
Print list here.

38
00:03:05.810 --> 00:03:07.130
That wasn't too bad, was it?

39
00:03:07.370 --> 00:03:10.310
Let's go down here and make sure this works.

40
00:03:10.730 --> 00:03:13.430
I'm going to say that we want to.

41
00:03:14.710 --> 00:03:19.410
My link list dot remove to index of two.

42
00:03:19.420 --> 00:03:21.110
So let's remove the 99.

43
00:03:21.130 --> 00:03:22.420
I'm going to run this.

44
00:03:23.430 --> 00:03:24.030
Look at that.

45
00:03:24.030 --> 00:03:25.800
We removed 99.

46
00:03:25.860 --> 00:03:30.720
If I run, remove again to index of two.

47
00:03:31.830 --> 00:03:33.660
That is to remove five.

48
00:03:35.270 --> 00:03:36.560
Oh, now print list.

49
00:03:36.590 --> 00:03:39.320
Remove and we click run.

50
00:03:39.710 --> 00:03:41.060
Five gets deleted.

51
00:03:41.450 --> 00:03:43.220
Very, very cool.

52
00:03:44.000 --> 00:03:45.560
And once again, we know why.

53
00:03:45.560 --> 00:03:47.990
Delete is an operation of O of n.

54
00:03:47.990 --> 00:03:51.320
Because we have to traverse to index.

55
00:03:52.590 --> 00:03:59.400
And going back here, we now have a better understanding of how this diagram works.

56
00:04:00.310 --> 00:04:07.120
If I remove the tail, we have to traverse through everything one by one, one by one, until we hit

57
00:04:07.120 --> 00:04:09.310
the tail and then just remove it.

58
00:04:09.460 --> 00:04:10.540
And there we have it.

59
00:04:11.350 --> 00:04:18.250
And I encourage you to play around with this animation a little bit more, having our link list implemented.

60
00:04:19.019 --> 00:04:24.780
There are other methods that we can add to it, but these are the main ones of linked list that you

61
00:04:24.780 --> 00:04:25.410
can see.

62
00:04:25.740 --> 00:04:31.560
And this should give you a better idea of how we calculate big notation with link lists and where some

63
00:04:31.560 --> 00:04:32.640
of the drawbacks are.

64
00:04:33.650 --> 00:04:39.590
I mean, you can explain data structures for a long time, but without actually coding it yourself,

65
00:04:39.590 --> 00:04:44.000
it's hard to see why some operations take longer than others.

66
00:04:46.320 --> 00:04:49.170
And link lists are very popular and interview questions.

67
00:04:49.170 --> 00:04:56.070
And now you have the tools to build your own link list in a language that doesn't even have it natively,

68
00:04:56.070 --> 00:04:56.910
like JavaScript.

69
00:04:57.660 --> 00:04:59.850
Well done getting this far.

70
00:05:00.980 --> 00:05:06.740
In the next video, we're going to introduce you to the second type of link list that I mentioned at

71
00:05:06.740 --> 00:05:07.370
the beginning.

72
00:05:08.380 --> 00:05:15.400
Up until now, we've created singly linked lists, but there's also a doubly linked list.

73
00:05:15.850 --> 00:05:16.840
What does that mean?

74
00:05:17.050 --> 00:05:19.330
For that, I'll see you in the next video.

75
00:05:19.990 --> 00:05:20.500
Bye bye.

