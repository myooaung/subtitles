WEBVTT
1
00:00:00.830 --> 00:00:01.640
Welcome back.

2
00:00:01.670 --> 00:00:03.590
It's time to sort some arrays.

3
00:00:03.800 --> 00:00:07.310
Let's grab this function.

4
00:00:08.029 --> 00:00:13.190
Put it at the very end because hopefully it will work at the very end and.

5
00:00:15.560 --> 00:00:17.210
Start writing our code.

6
00:00:19.180 --> 00:00:24.490
We'll start off by first defining the function called merge sorted arrays.

7
00:00:24.940 --> 00:00:30.970
It's going to take the first parameter, which is the first array, then the second parameter which

8
00:00:30.970 --> 00:00:32.350
is the second array.

9
00:00:33.740 --> 00:00:37.880
I'm going to first define some variables that we're going to use throughout the function.

10
00:00:38.420 --> 00:00:44.720
The first one will be a constant, which is merged array.

11
00:00:46.250 --> 00:00:48.230
Which will be our answer for now.

12
00:00:48.230 --> 00:00:49.850
It's going to be an empty array.

13
00:00:51.110 --> 00:00:56.370
And we might as well just make sure that we return this merged array at the end.

14
00:00:56.390 --> 00:01:01.940
Hopefully it all works and we can populate this with these two arrays.

15
00:01:03.040 --> 00:01:04.360
Now in here.

16
00:01:05.019 --> 00:01:06.880
I want to grab the.

17
00:01:07.940 --> 00:01:10.430
Array one item.

18
00:01:11.360 --> 00:01:15.770
Just for reference, and this is going to be our very first array item.

19
00:01:18.570 --> 00:01:24.330
So this simply has the zero item here and our first array.

20
00:01:27.590 --> 00:01:29.600
And then we'll do the same thing.

21
00:01:30.200 --> 00:01:31.550
Array two item.

22
00:01:36.210 --> 00:01:39.270
Which is going to grab the number four from here.

23
00:01:40.410 --> 00:01:47.040
Now the very first thing I like doing in a function is checking for some sort of an input, making sure

24
00:01:47.040 --> 00:01:48.060
that everything.

25
00:01:50.590 --> 00:01:51.430
Works.

26
00:01:51.910 --> 00:01:58.210
I'm going to spare you the time of me doing this because you should have an idea of how to check whether

27
00:01:58.210 --> 00:02:02.200
it's an array, whether you have two parameters.

28
00:02:03.320 --> 00:02:10.729
But the one input that I think is worth checking is what if we have something like this?

29
00:02:11.470 --> 00:02:15.730
Where the second array is just an empty array.

30
00:02:16.060 --> 00:02:20.800
In our case, we can just return the first array because, well, it's already sorted.

31
00:02:20.800 --> 00:02:24.250
We're still merging the two arrays, but the other array doesn't have anything.

32
00:02:24.340 --> 00:02:29.620
And that's the same if this first array was just empty as well.

33
00:02:30.510 --> 00:02:39.150
So to avoid any extra work, let's check for those conditions so that right away we can give out the

34
00:02:39.150 --> 00:02:43.350
answer and make our function more efficient in those cases.

35
00:02:43.800 --> 00:02:47.790
So I can just do an if statement, I'll say array one length.

36
00:02:48.830 --> 00:02:51.740
If that is equals to zero.

37
00:02:52.900 --> 00:02:57.910
So if first array is empty, just simply return the secondary.

38
00:03:01.120 --> 00:03:04.030
And we can do the same for the other case.

39
00:03:05.620 --> 00:03:11.290
If array to length is empty, then we can just return the first array.

40
00:03:12.990 --> 00:03:13.980
Nice and simple.

41
00:03:14.580 --> 00:03:20.340
But now let's get into the harder topic, which is what happens if both of these arrays are full like

42
00:03:20.340 --> 00:03:20.940
they are now?

43
00:03:22.260 --> 00:03:27.090
Well, just to change things up, because I've been using the for loops for a while.

44
00:03:28.410 --> 00:03:35.820
I'll use the while loop in JavaScript and this simply says loop through the items while a condition

45
00:03:35.820 --> 00:03:36.660
is met.

46
00:03:36.840 --> 00:03:42.390
In our case, I'm going to say while there is an array, one item.

47
00:03:44.320 --> 00:03:48.730
Or there is an array to item.

48
00:03:51.210 --> 00:03:52.140
Do something.

49
00:03:52.560 --> 00:03:56.040
And remember, these variables are simply for now.

50
00:03:56.070 --> 00:03:59.340
The first item in each one of the arrays.

51
00:03:59.610 --> 00:04:04.980
And by the way, if you're wondering why sometimes I use cost, sometimes I use lit.

52
00:04:05.100 --> 00:04:12.570
Well, cost means that once I assign this variable to this array, I can't modify it.

53
00:04:12.570 --> 00:04:15.930
I can't say merged array equals to two.

54
00:04:15.960 --> 00:04:19.470
It's going to give me a warning because it's a constant.

55
00:04:19.470 --> 00:04:24.000
I can add things to the array, but I can change this reference to the array.

56
00:04:24.480 --> 00:04:27.660
On the other hand, let allows me to do that.

57
00:04:27.660 --> 00:04:35.640
So later on I can say array one item equals to something new like array one and the index of one.

58
00:04:36.150 --> 00:04:39.210
So that is why we're using this syntax.

59
00:04:39.210 --> 00:04:41.430
It's a new ES6 syntax in JavaScript.

60
00:04:42.700 --> 00:04:43.270
All right.

61
00:04:43.750 --> 00:04:47.230
So while we have things in the arrays.

62
00:04:48.110 --> 00:04:49.760
We want to first.

63
00:04:50.400 --> 00:04:51.730
Do a bit of a check.

64
00:04:51.750 --> 00:04:53.010
Let's say if.

65
00:04:57.000 --> 00:05:00.660
One item is less than.

66
00:05:03.970 --> 00:05:09.670
To item that is if zero is less than four.

67
00:05:10.330 --> 00:05:11.530
We want to.

68
00:05:12.360 --> 00:05:15.460
Add to the merged array, empty array.

69
00:05:15.480 --> 00:05:20.850
We want to say push and we'll push the first item in the array.

70
00:05:20.850 --> 00:05:23.070
So we're going to push zero.

71
00:05:24.360 --> 00:05:27.870
And because we've now pushed the zero item.

72
00:05:29.190 --> 00:05:30.780
Into this array.

73
00:05:31.200 --> 00:05:38.430
We don't really need to worry about zero anymore, so we can just simply say array one.

74
00:05:39.200 --> 00:05:43.820
Item is now going to equal array one at.

75
00:05:45.070 --> 00:05:46.480
Index of.

76
00:05:47.130 --> 00:05:47.760
One.

77
00:05:49.170 --> 00:05:49.560
Right.

78
00:05:49.560 --> 00:05:57.240
Because now we want to move to array item that's over here at index of one, which is three so that

79
00:05:57.240 --> 00:05:59.370
we can compare three with four.

80
00:06:00.000 --> 00:06:02.430
Now we want to increment this every time.

81
00:06:02.430 --> 00:06:11.160
And because we're doing a loop here, let's convert this into an index that is ie and increment it ie

82
00:06:11.190 --> 00:06:12.090
plus plus.

83
00:06:12.780 --> 00:06:17.580
And at the top over here, we can just say for the beginning that I.

84
00:06:19.120 --> 00:06:21.700
Is going to equal one.

85
00:06:22.800 --> 00:06:27.420
So that way as we loop through this, this is going to increment with A-plus plus.

86
00:06:27.510 --> 00:06:32.220
So that is increment by one so that we can go 034 31.

87
00:06:33.500 --> 00:06:35.970
And by the way, I just noticed that I can't spell.

88
00:06:35.990 --> 00:06:38.030
This should be a ray over here.

89
00:06:38.450 --> 00:06:39.110
All right.

90
00:06:40.380 --> 00:06:44.910
Now that's the case when a ray one item is less than array two.

91
00:06:44.910 --> 00:06:46.290
But let's do the other side.

92
00:06:46.320 --> 00:06:50.610
If array two, item is less than array one.

93
00:06:51.600 --> 00:06:52.650
We now?

94
00:06:53.810 --> 00:06:55.310
Merge into the array.

95
00:06:57.920 --> 00:06:59.600
Hurray to item.

96
00:07:01.070 --> 00:07:07.310
Because if a ray one item is not less than a ray two item, we don't even need to add a condition here.

97
00:07:07.310 --> 00:07:09.890
We know that a ray one item is greater than a ray.

98
00:07:09.890 --> 00:07:11.630
Two items, in which case we can just.

99
00:07:13.490 --> 00:07:15.950
Add the second item.

100
00:07:16.220 --> 00:07:19.520
So that is we add this item instead.

101
00:07:20.680 --> 00:07:25.900
And again, we want to do the exact same thing that we did with the first item or the first array.

102
00:07:25.930 --> 00:07:31.240
That is the array two item is now going to equal a way to.

103
00:07:31.980 --> 00:07:34.980
And we need a different index of this.

104
00:07:34.980 --> 00:07:36.690
We can't use the same one rate.

105
00:07:36.690 --> 00:07:39.810
So we can just say this is going to be J.

106
00:07:41.240 --> 00:07:45.860
And up here we simply do the same thing.

107
00:07:45.860 --> 00:07:48.770
Jay is going to equal to one.

108
00:07:49.190 --> 00:07:57.350
So once we figured out the zero index items, we can then move on to index of one, then index of two,

109
00:07:57.380 --> 00:07:59.420
index of three, so on and so forth.

110
00:08:00.080 --> 00:08:02.280
Now let's check this code and see if it works.

111
00:08:02.300 --> 00:08:03.560
If I run this.

112
00:08:04.540 --> 00:08:08.560
Oh, you'll see that my browser just crashed.

113
00:08:08.560 --> 00:08:15.220
And that's because I have a setting on Ripple which allows for well, for this to happen.

114
00:08:15.220 --> 00:08:19.480
Most likely if you're using the default settings here, it will give you a warning.

115
00:08:19.570 --> 00:08:20.590
But let's go back.

116
00:08:25.330 --> 00:08:26.680
Why did that happen?

117
00:08:27.660 --> 00:08:33.179
This is why it's always a good idea to go step by step and make sure things work.

118
00:08:33.630 --> 00:08:39.090
We did a lot of coding here without actually testing if any of this works.

119
00:08:39.720 --> 00:08:45.120
So a good note here is to pause every once in a while and just test your assumptions.

120
00:08:45.120 --> 00:08:46.320
Log out the answers.

121
00:08:47.230 --> 00:08:52.990
In this case, we missed a critical point that is in this check over here.

122
00:08:55.290 --> 00:09:02.760
We do the while loop as long as array, one item or array two items are populated and we check here

123
00:09:03.030 --> 00:09:05.700
if array one item is less than array two item.

124
00:09:06.620 --> 00:09:14.690
But the problem here is that we could have a case where one of these because we're using or could be

125
00:09:14.690 --> 00:09:19.400
undefined or we reach the end of the line in order to account for that.

126
00:09:19.580 --> 00:09:25.450
The critical thing to do here is to always know how your code is running.

127
00:09:25.460 --> 00:09:27.770
So let's do a console.log here.

128
00:09:27.920 --> 00:09:29.600
Say array one item.

129
00:09:31.400 --> 00:09:33.590
And then array two item.

130
00:09:34.520 --> 00:09:37.820
Let's see what we get throughout the loop.

131
00:09:38.540 --> 00:09:44.450
If I run this, it's going to crash again and we won't be able to see our logs.

132
00:09:44.450 --> 00:09:45.620
So I'm just going to.

133
00:09:46.400 --> 00:09:50.210
Write down the correct phrasing here and then explain why we did what we did.

134
00:09:50.570 --> 00:09:52.070
I'm going to just say if.

135
00:09:52.910 --> 00:09:53.690
Array.

136
00:09:55.340 --> 00:09:56.450
Two item.

137
00:09:59.690 --> 00:10:02.090
If the array two item doesn't exist.

138
00:10:02.090 --> 00:10:03.710
So if we have undefined.

139
00:10:04.560 --> 00:10:06.560
It's going to turn this into true.

140
00:10:06.570 --> 00:10:07.770
So we run through this.

141
00:10:08.070 --> 00:10:08.310
Hmm.

142
00:10:08.640 --> 00:10:09.980
What is that?

143
00:10:09.990 --> 00:10:10.860
Let's have a look.

144
00:10:13.000 --> 00:10:15.220
Notice what we just logged here.

145
00:10:15.250 --> 00:10:18.730
We've logged array one item, then array two item.

146
00:10:18.730 --> 00:10:21.370
So this is where we're comparing throughout our loops.

147
00:10:21.400 --> 00:10:29.410
Zero and four, then three and four, then form four, then four and six, then 31 and six, 31 and

148
00:10:29.410 --> 00:10:31.990
30 and then 31 and on undefined.

149
00:10:32.620 --> 00:10:38.080
You see here how the second array item becomes undefined.

150
00:10:38.680 --> 00:10:40.780
And in order for us to.

151
00:10:41.630 --> 00:10:48.050
Bypass this undefined which becomes on define here.

152
00:10:48.810 --> 00:10:54.570
And we use the exclamation mark in JavaScript to turn this into a true statement.

153
00:10:54.570 --> 00:11:04.620
So it turns into this so that we can add the 31 in array, one into the final slot of the array.

154
00:11:05.960 --> 00:11:08.990
Now, if this was like this and I run.

155
00:11:11.580 --> 00:11:14.700
We get undefined for the.

156
00:11:15.350 --> 00:11:16.430
First array.

157
00:11:17.350 --> 00:11:25.060
However, because we're doing this second check, which is is a ray one item less than a ray two item.

158
00:11:25.920 --> 00:11:29.880
And in our case, if we do undefined.

159
00:11:31.780 --> 00:11:36.530
Less than six, which is what we're doing here in this comparison.

160
00:11:36.560 --> 00:11:38.050
If I run this.

161
00:11:39.360 --> 00:11:41.880
And let's console.log this.

162
00:11:42.600 --> 00:11:44.970
See what the answer is.

163
00:11:47.000 --> 00:11:48.440
I get false.

164
00:11:48.560 --> 00:11:57.200
So even though in this time around array one is undefined because we've gone through it because this

165
00:11:57.200 --> 00:12:02.330
statement is false, we go to the loss statement.

166
00:12:03.150 --> 00:12:09.810
And fill their rest of the array with six and 13 or 30 which come form array to.

167
00:12:10.780 --> 00:12:11.440
Now.

168
00:12:12.710 --> 00:12:18.410
I wanted to point this out to you, because this may not be the cleanest solution.

169
00:12:18.410 --> 00:12:18.860
Right?

170
00:12:19.280 --> 00:12:26.570
I mean, looking at this code, just think about what I had to explain and draw out for you to fully

171
00:12:26.570 --> 00:12:29.270
understand how this works.

172
00:12:29.390 --> 00:12:32.510
And I did this for a specific reason.

173
00:12:32.810 --> 00:12:38.990
During the interview, if you have to explain things in detail like this and write things out, well,

174
00:12:38.990 --> 00:12:41.360
perhaps there's a better way of writing it.

175
00:12:42.890 --> 00:12:49.040
Because an interviewer is going to get confused as to what this means then what this means.

176
00:12:49.040 --> 00:12:52.220
And it doesn't really read like English, does it?

177
00:12:52.250 --> 00:12:56.510
Ideally, these functions are really, really nice to just read.

178
00:12:57.440 --> 00:13:06.500
So perhaps I can take this part of the function and convert it into its own function and just name this

179
00:13:06.500 --> 00:13:16.940
as should push first array item and this should be should push array to item and by extracting out these

180
00:13:16.940 --> 00:13:20.150
pieces of code into their own little function.

181
00:13:21.090 --> 00:13:25.530
You can clean out this answer and make it more readable.

182
00:13:25.920 --> 00:13:27.780
And interviewers are going to like that.

183
00:13:28.530 --> 00:13:33.810
Now, during an interview, you may not have time to do so, but you can let the interviewer know how

184
00:13:33.810 --> 00:13:35.010
you wrote the solution.

185
00:13:35.010 --> 00:13:41.670
And you understand that this is probably not the most readable solution and this is what you would do

186
00:13:41.670 --> 00:13:42.730
to clean it up.

187
00:13:42.750 --> 00:13:47.580
You don't have to actually code it as long as you tell them and you understand where you would improve

188
00:13:47.580 --> 00:13:48.120
things.

189
00:13:48.720 --> 00:13:54.180
That in an interviewer XYZ is just as good as you actually coding it that way.

190
00:13:54.780 --> 00:13:55.370
All right.

191
00:13:55.380 --> 00:13:57.230
Looks like this is working.

192
00:13:57.240 --> 00:14:01.800
If I do an empty array here, I see that it's still working.

193
00:14:02.630 --> 00:14:04.460
Our answer is.

194
00:14:05.470 --> 00:14:06.220
Looking good.

195
00:14:07.450 --> 00:14:08.680
Hope you got this far.

196
00:14:08.920 --> 00:14:10.540
I'll see you in the next video.

197
00:14:10.900 --> 00:14:11.470
Bye bye.

