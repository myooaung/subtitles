1
00:00:00,920 --> 00:00:01,819
Welcome back.

2
00:00:01,850 --> 00:00:04,550
Let's talk about depth for a search now.

3
00:00:05,090 --> 00:00:09,110
We've implemented our breath for search and we feel comfortable for that.

4
00:00:09,120 --> 00:00:17,300
But what about depth for a search going down our tree and exploring the deepest part of that tree before

5
00:00:17,300 --> 00:00:18,950
we come back up?

6
00:00:19,850 --> 00:00:22,550
And explore the right side of the tree as well.

7
00:00:23,290 --> 00:00:30,400
And when it comes to depth first search, we have to be aware that there's three ways that we can actually

8
00:00:30,400 --> 00:00:31,330
implement it.

9
00:00:32,159 --> 00:00:35,940
It's called In Order, pre-order and post order.

10
00:00:36,910 --> 00:00:38,470
Remember how we had.

11
00:00:39,200 --> 00:00:42,410
The list that we got with breath for search.

12
00:00:42,800 --> 00:00:48,560
Well, there's three different orders that we can return this list with depth for search.

13
00:00:49,610 --> 00:00:54,250
The first one is called in order and it looks something like this.

14
00:00:54,260 --> 00:00:59,000
We go with 30 3101105.

15
00:00:59,570 --> 00:01:05,000
It's called an order because in a binary search tree, it gives everything in order.

16
00:01:06,340 --> 00:01:09,070
If we take a look at this list.

17
00:01:09,860 --> 00:01:14,960
Or this tree ideally in a in order traversal.

18
00:01:16,250 --> 00:01:18,140
Using depth first search.

19
00:01:18,440 --> 00:01:21,140
We would get something like this.

20
00:01:21,140 --> 00:01:22,730
We would get one.

21
00:01:23,590 --> 00:01:24,580
Then for.

22
00:01:26,340 --> 00:01:31,140
Then six because we go one for six.

23
00:01:32,220 --> 00:01:33,870
And then we go nine.

24
00:01:35,310 --> 00:01:38,430
And then we go all the way down to 15.

25
00:01:40,540 --> 00:01:42,520
And then we come back up to 20.

26
00:01:43,540 --> 00:01:47,710
And then to 170, it's in order because well, look at that.

27
00:01:47,710 --> 00:01:49,690
Everything is in order.

28
00:01:50,080 --> 00:01:55,060
So this is really useful if you have a binary search tree like this.

29
00:01:55,480 --> 00:01:59,800
And now the way that you can return it is called pre order.

30
00:02:01,220 --> 00:02:08,259
And pre order starts off from the parent node down to 33 and then down to 105.

31
00:02:08,270 --> 00:02:14,030
So we start off with the parent and then grab the child nodes left to right.

32
00:02:15,860 --> 00:02:19,280
In our case, it would look something like this.

33
00:02:19,580 --> 00:02:26,600
We would start off with nine because it's the parent one and then we grab four.

34
00:02:28,020 --> 00:02:30,480
Because it's the next one in the list.

35
00:02:30,630 --> 00:02:32,280
And then we go one.

36
00:02:34,410 --> 00:02:36,540
As we're traversing all the way down.

37
00:02:36,540 --> 00:02:39,450
Remember, we're doing depth for search, so all the way down.

38
00:02:39,690 --> 00:02:46,530
And because we got to the very bottom, we now go back up and down to six.

39
00:02:47,480 --> 00:02:50,870
So we see here we did 416.

40
00:02:52,100 --> 00:02:59,270
And then we go to the right side to 20 and then grab 15, then 170.

41
00:03:00,270 --> 00:03:05,000
And you're asking yourself, this seems kind of useless.

42
00:03:05,010 --> 00:03:07,410
Why would we ever want to use pre-order?

43
00:03:07,410 --> 00:03:11,620
I mean, in order we had everything in order, why would we ever need this?

44
00:03:11,640 --> 00:03:16,550
And pre-order is really useful if you want to, for example, recreate a tree.

45
00:03:16,560 --> 00:03:17,160
Right?

46
00:03:17,580 --> 00:03:22,120
Because with preorder, I can just go nine is the root node.

47
00:03:22,140 --> 00:03:27,660
Then we have four as the left hand side, one as the left hand side.

48
00:03:27,660 --> 00:03:30,690
And then from there we have six.

49
00:03:31,710 --> 00:03:32,580
On the right.

50
00:03:32,610 --> 00:03:38,070
20 to the right of 915 and then 170.

51
00:03:38,430 --> 00:03:47,550
We can recreate a tree really easily because it's ordered for us versus the in order method that didn't

52
00:03:47,550 --> 00:03:52,860
have that order that we wanted if we wanted to recreate a tree another way.

53
00:03:53,370 --> 00:03:56,640
And the last way to do this is called post order.

54
00:03:58,180 --> 00:04:07,120
And post order is the last option that is going all the way down, grabbing 33 and 105, then going

55
00:04:07,120 --> 00:04:08,770
to the top to the parent.

56
00:04:09,190 --> 00:04:10,930
So 33, 105.

57
00:04:10,930 --> 00:04:11,770
101.

58
00:04:13,220 --> 00:04:19,760
So in our case, a post ordered depth first search would look like one.

59
00:04:20,880 --> 00:04:22,380
Then six.

60
00:04:23,510 --> 00:04:24,440
Then for.

61
00:04:25,420 --> 00:04:37,450
And then going back up all the way down to 15, then 170, then 20, and then finally nine.

62
00:04:38,050 --> 00:04:40,030
We searched the left hand side first.

63
00:04:40,030 --> 00:04:45,430
The children come before the parent, and then we search the right hand side first, and the children

64
00:04:45,430 --> 00:04:46,750
come before the parent.

65
00:04:47,440 --> 00:04:55,510
Now, these three types of ordering are really specific, and although it may look confusing right now.

66
00:04:56,360 --> 00:04:58,570
You'll see that when we write it in code.

67
00:04:58,580 --> 00:05:01,110
It's not that difficult.

68
00:05:01,130 --> 00:05:07,970
You just need to know that when it comes to depth for a search, you have these three types of reversals

69
00:05:07,970 --> 00:05:12,860
that you can do that you may want to implement depending on your needs.

70
00:05:13,550 --> 00:05:18,950
But the easiest way to show you how this works is well, to actually do it, encode it.

71
00:05:18,980 --> 00:05:20,750
So let's do that in the next video.

