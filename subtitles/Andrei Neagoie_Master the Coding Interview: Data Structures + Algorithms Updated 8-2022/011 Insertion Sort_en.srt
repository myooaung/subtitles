1
00:00:01,080 --> 00:00:01,980
Welcome back.

2
00:00:02,490 --> 00:00:09,810
Up until this point, we've talked about sorting algorithms that weren't very efficient and aren't that

3
00:00:09,810 --> 00:00:10,890
commonly used.

4
00:00:11,220 --> 00:00:20,130
Now, insertion sort is not the most efficient algorithm either, but there's cases where it's actually

5
00:00:20,130 --> 00:00:22,580
extremely fast, which we're going to talk about.

6
00:00:22,590 --> 00:00:26,700
So pay attention because this one starts to get important.

7
00:00:26,730 --> 00:00:33,630
You see, insertion sort is useful for times when you're pretty sure the list is almost sorted.

8
00:00:34,500 --> 00:00:41,400
Or it's already sorted, which sounds silly, but sometimes this is important in computer science and

9
00:00:41,400 --> 00:00:47,880
in a best case scenario you can get o of n or linear time when the list is almost sorted.

10
00:00:48,360 --> 00:00:49,650
Let's see how it works.

11
00:00:49,650 --> 00:00:53,130
We have a list and we look at six.

12
00:00:53,400 --> 00:00:56,250
We look at the first item and just leave it where it is.

13
00:00:56,250 --> 00:00:58,560
We now look at the next item five.

14
00:00:59,560 --> 00:01:04,780
And because five is less than six, we switch it over.

15
00:01:05,650 --> 00:01:07,330
And then we go next into the list.

16
00:01:07,330 --> 00:01:11,590
We say, Hey, three, where are you in relation to five and six?

17
00:01:12,430 --> 00:01:12,940
Ball.

18
00:01:12,940 --> 00:01:13,900
It's less.

19
00:01:14,650 --> 00:01:15,420
Then those two.

20
00:01:15,430 --> 00:01:19,570
So we shift those over and three gets placed in the front.

21
00:01:20,270 --> 00:01:23,200
So we now have this list of three, five, six.

22
00:01:23,210 --> 00:01:26,120
We look at one and say, Oh, yeah, that's the first item.

23
00:01:26,120 --> 00:01:30,020
We want to shift everything, put one to the left.

24
00:01:30,260 --> 00:01:31,610
We then look at eight.

25
00:01:31,640 --> 00:01:36,980
Well, eight is larger than all those items, so let's just attach it to the end of that list.

26
00:01:37,730 --> 00:01:38,510
Seven.

27
00:01:38,630 --> 00:01:41,750
Well, it goes between six and eight, so place it in there.

28
00:01:42,290 --> 00:01:44,360
Two between one and three.

29
00:01:45,460 --> 00:01:46,510
Place it in there.

30
00:01:46,510 --> 00:01:47,530
And four.

31
00:01:47,950 --> 00:01:49,270
Place it between.

32
00:01:49,910 --> 00:01:52,430
Five or three and five.

33
00:01:55,160 --> 00:01:55,880
And that's it.

34
00:01:56,240 --> 00:01:59,120
This is probably the way that your brain works.

35
00:01:59,120 --> 00:02:03,770
If you physically had Lego blocks with these numbers and you would move things around.

36
00:02:04,860 --> 00:02:11,490
And this type of sorting performs really, really well when it comes to small data sets, which we'll

37
00:02:11,490 --> 00:02:14,100
get into later on with our exercises.

38
00:02:14,100 --> 00:02:17,130
But can you do this type of sorting in code?

39
00:02:18,170 --> 00:02:21,350
See if you can implement your own insertion sort.

40
00:02:22,190 --> 00:02:23,540
Same thing as before.

41
00:02:23,570 --> 00:02:31,370
This time we have the insertion sort algorithm based on the video and the YouTube dancers that link

42
00:02:31,370 --> 00:02:35,000
to can you implement your own insertion algorithm?

43
00:02:35,540 --> 00:02:37,640
And the next video, I'll show you the answer.

