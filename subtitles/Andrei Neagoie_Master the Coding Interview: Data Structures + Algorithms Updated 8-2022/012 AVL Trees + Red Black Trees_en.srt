1
00:00:01,160 --> 00:00:02,090
Welcome back.

2
00:00:02,390 --> 00:00:07,850
Now that we've implemented our binary search tree, I want to talk a little bit about balancing our

3
00:00:07,850 --> 00:00:08,330
tree.

4
00:00:08,660 --> 00:00:13,130
Usually in production, you want to have a balanced search tree.

5
00:00:13,580 --> 00:00:16,940
There are two types of trees that are very popular when it comes to this.

6
00:00:16,940 --> 00:00:23,090
Although we built our own binary search tree, you'd most likely in production use something like an

7
00:00:23,090 --> 00:00:31,490
AVL tree or a red black tree that automatically rebalances itself so that we don't have those edge cases

8
00:00:31,490 --> 00:00:36,110
where our balanced tree turns into a linear, unbalanced tree.

9
00:00:36,140 --> 00:00:42,620
Now these topics, we don't need to code ourselves because they are a little bit complex and most of

10
00:00:42,620 --> 00:00:46,340
the time you're using some sort of a library that implements it.

11
00:00:46,640 --> 00:00:49,220
But I do want you to understand how it works.

12
00:00:49,220 --> 00:00:56,570
So I'll leave resources for you for both read Black Tree as well as AVL Trees where if you click here,

13
00:00:56,570 --> 00:01:01,310
you see that visual go also has it to demonstrate for you how it works.

14
00:01:01,310 --> 00:01:03,410
If I want to insert, let's say.

15
00:01:04,680 --> 00:01:09,240
77 and to my evil three.

16
00:01:09,970 --> 00:01:10,990
Nothing's different.

17
00:01:10,990 --> 00:01:13,870
We're adding 77 to the tree.

18
00:01:14,990 --> 00:01:21,800
But if I now add, let's say 80, which will make our tree a little bit unbalanced.

19
00:01:22,650 --> 00:01:24,000
If I hit go.

20
00:01:28,190 --> 00:01:30,980
You'll see that I'm traversing down.

21
00:01:30,980 --> 00:01:32,140
Traversing down.

22
00:01:32,150 --> 00:01:33,800
I add 80.

23
00:01:33,980 --> 00:01:36,620
And then all of a sudden, oh, it's on balanced.

24
00:01:36,650 --> 00:01:38,510
It's going to go back.

25
00:01:39,860 --> 00:01:48,350
And do a little bit of a switch or rotation to balance out the tree to make sure that the levels that

26
00:01:48,350 --> 00:01:51,830
we have in a tree are always balanced.

27
00:01:53,340 --> 00:02:00,420
And then we have rep black trees as well, which does things a little bit differently if let's say we

28
00:02:00,420 --> 00:02:02,280
inserted nine here.

29
00:02:03,440 --> 00:02:06,020
Then let's say we insert ten.

30
00:02:08,370 --> 00:02:11,009
And then finally, let's insert 11.

31
00:02:14,980 --> 00:02:16,000
You'll notice that.

32
00:02:16,000 --> 00:02:17,660
Oh, it's not balanced.

33
00:02:17,680 --> 00:02:19,780
We need to balance it out.

34
00:02:20,650 --> 00:02:28,300
And once again automatically make sure that our tree does get balanced with something called red black

35
00:02:28,300 --> 00:02:28,840
tree.

36
00:02:28,870 --> 00:02:33,460
As you can see, the nodes are red and black here, and that's something that we use to keep track of

37
00:02:33,460 --> 00:02:35,440
when we need to rebalance.

38
00:02:35,920 --> 00:02:38,980
I'll leave resources for you if you want to learn more about them.

39
00:02:39,010 --> 00:02:45,100
Just keep in mind that these two are usually the most popular for balancing binary search trees, and

40
00:02:45,100 --> 00:02:47,590
in interviews you won't have to implement them.

41
00:02:47,590 --> 00:02:51,280
You just need to be able to talk about them and why they are useful.

42
00:02:51,280 --> 00:02:53,140
Something that we should know by now.

43
00:02:53,770 --> 00:02:54,910
I'll see you in the next one.

44
00:02:55,330 --> 00:02:55,900
Bye bye.

