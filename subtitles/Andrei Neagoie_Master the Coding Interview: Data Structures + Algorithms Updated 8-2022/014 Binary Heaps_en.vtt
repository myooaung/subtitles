WEBVTT
1
00:00:00.390 --> 00:00:01.260
Welcome back.

2
00:00:01.680 --> 00:00:05.010
We've talked about binary trees, binary search trees.

3
00:00:05.010 --> 00:00:12.150
And then we learned about how to balance those trees and some of the time complexities involved with

4
00:00:12.150 --> 00:00:13.170
a beast.

5
00:00:13.800 --> 00:00:17.730
And I want to talk to you about two other common type of trees.

6
00:00:18.440 --> 00:00:22.490
One is a heap and the other one is a tree or tree.

7
00:00:23.780 --> 00:00:24.530
In this video.

8
00:00:24.530 --> 00:00:26.780
Let's get talking about Heap.

9
00:00:27.560 --> 00:00:34.160
Now when it comes to heap, we're most likely going to talk about binary heaps just like we had with

10
00:00:34.160 --> 00:00:35.210
binary trees.

11
00:00:35.240 --> 00:00:39.920
That means there's only going to be two children to a node.

12
00:00:40.960 --> 00:00:45.580
Now why are these useful and how are they different from binary trees?

13
00:00:46.180 --> 00:00:47.140
Let's go have a look.

14
00:00:48.520 --> 00:00:49.690
A binary tree.

15
00:00:50.080 --> 00:00:56.380
Every child belongs to a parent node that has a greater priority or value.

16
00:00:56.590 --> 00:01:03.790
If you look over here, every child that is 72 and 33 is lower than one on one.

17
00:01:04.750 --> 00:01:10.810
72 is higher than two and 45 and 33 is higher than five and one.

18
00:01:12.300 --> 00:01:15.660
This is actually called a max heap.

19
00:01:16.230 --> 00:01:21.690
There's also something called a min heap, which is the exact opposite, where the root node is the

20
00:01:21.690 --> 00:01:22.470
smallest.

21
00:01:23.450 --> 00:01:25.660
Now this value can be anything you want.

22
00:01:25.670 --> 00:01:29.240
It can be a person's name, it can be a number.

23
00:01:29.240 --> 00:01:31.670
It can really be anything because it's a note.

24
00:01:32.060 --> 00:01:33.350
But as you can see.

25
00:01:34.050 --> 00:01:42.570
All we're dealing with is that in a binary heap, every node on the top level has a greater value than

26
00:01:42.570 --> 00:01:51.000
every node on the next level down and a heap can be used in any algorithm where ordering is important.

27
00:01:51.000 --> 00:01:56.580
And as we're going to discuss, it's commonly used when it comes to priority queues.

28
00:01:57.580 --> 00:02:00.460
Now with the race, we had random access.

29
00:02:00.490 --> 00:02:07.390
It allowed us to randomly access any element within them using an index in a link list.

30
00:02:07.570 --> 00:02:15.340
We can change things dynamically unlike an array, but finding something within them is o of nw linear

31
00:02:15.340 --> 00:02:17.770
time because we had to go through the link list.

32
00:02:18.530 --> 00:02:20.180
Heaps are a little bit different.

33
00:02:20.780 --> 00:02:26.750
You can't do all of one random access like we did with arrays or hash tables.

34
00:02:27.440 --> 00:02:30.620
As we know about trees, we have to do some sort of traversal.

35
00:02:31.520 --> 00:02:42.200
Now compared to a binary search tree we see that well lookup is o of n, it's not o of log n because

36
00:02:42.200 --> 00:02:45.320
it's less ordered than a binary search tree.

37
00:02:45.320 --> 00:02:45.770
Right.

38
00:02:45.800 --> 00:02:49.760
A binary search tree actually had meaning between left and right child.

39
00:02:49.760 --> 00:02:53.180
The left was always less than the right in a binary heap.

40
00:02:53.180 --> 00:02:54.320
That doesn't matter.

41
00:02:54.350 --> 00:02:58.970
Left and right can be any value as long as it's less than the top value.

42
00:02:59.510 --> 00:03:05.510
So if we're looking for, let's say, one, we have to check the parent node, then we have to check

43
00:03:05.510 --> 00:03:09.470
because one on one or because one is less than one on one.

44
00:03:09.470 --> 00:03:12.260
We have to check both nodes underneath it.

45
00:03:12.260 --> 00:03:19.010
And then because one is less than 72 and 33, we have to once again check every single node and looking

46
00:03:19.010 --> 00:03:22.460
for one becomes o of log n.

47
00:03:23.340 --> 00:03:29.280
So pretty much turned into searching through a link list or iterating through an array.

48
00:03:29.940 --> 00:03:33.600
So why would we ever want to use a binary heap?

49
00:03:34.210 --> 00:03:41.320
Well, it turns out that binary heaps are really, really great at doing comparative operations, just

50
00:03:41.320 --> 00:03:50.290
like saying I want people that have a value over 33 because in that case we can just grab these items

51
00:03:50.290 --> 00:03:53.860
quite easily instead of going all the way down through the notes.

52
00:03:57.390 --> 00:04:02.820
Heaps are actually used a lot in data storage priority cuz sorting algorithms.

53
00:04:03.490 --> 00:04:08.920
So let's have a look at how a binary heap is implemented visually.

54
00:04:09.940 --> 00:04:13.030
We have a binary heap here using visual go.

55
00:04:13.090 --> 00:04:18.880
And if we wanted to add, let's say insert 26, we hit go.

56
00:04:19.860 --> 00:04:20.250
All right.

57
00:04:20.250 --> 00:04:21.810
That was really fast.

58
00:04:22.079 --> 00:04:27.540
But what if we wanted to insert, let's say, 51?

59
00:04:30.350 --> 00:04:31.760
If I insert 51.

60
00:04:34.690 --> 00:04:36.760
I had to do a bit of a switch.

61
00:04:37.210 --> 00:04:44.500
You see heaps add value on the tree in order from left to right and then bubbles up.

62
00:04:44.860 --> 00:04:50.570
If it's not in the same order or the priority order, that is once kind of like we did here.

63
00:04:50.590 --> 00:04:54.970
So if I add, let's say 70.

64
00:04:56.200 --> 00:04:56.800
Or you know what?

65
00:04:56.800 --> 00:04:58.730
Let's add 100.

66
00:04:58.750 --> 00:05:00.100
What do you think will happen?

67
00:05:01.100 --> 00:05:03.620
Well, if I hit go, you'll see.

68
00:05:03.620 --> 00:05:06.110
I had 100 and then it bubbles up.

69
00:05:07.380 --> 00:05:13.350
So as you can see inserts although it looks fast can still take log and.

70
00:05:16.550 --> 00:05:19.340
And this is the same case with Deletes as well.

71
00:05:19.340 --> 00:05:21.200
It's o of log n.

72
00:05:21.740 --> 00:05:27.680
Now, in order to truly understand why we need something like a binary heap, why they're so useful,

73
00:05:27.710 --> 00:05:29.840
how they're different from binary history.

74
00:05:30.380 --> 00:05:35.390
We need to talk about priority queues, so let's talk about priority Qs.

