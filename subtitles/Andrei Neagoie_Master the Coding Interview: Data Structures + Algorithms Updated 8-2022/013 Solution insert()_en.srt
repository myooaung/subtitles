1
00:00:00,740 --> 00:00:01,550
Welcome back.

2
00:00:02,060 --> 00:00:05,360
Let's see how we can implement the insert method.

3
00:00:06,190 --> 00:00:08,630
And this was a tough one, so hopefully you got it.

4
00:00:08,650 --> 00:00:14,080
If not, at least you tried so that we can see how we want to implement the insert method properly.

5
00:00:15,090 --> 00:00:21,540
The very first thing I want to do is, well, first of all, check my parameters.

6
00:00:22,080 --> 00:00:25,290
And this is something that you usually want to do with all methods.

7
00:00:25,290 --> 00:00:30,690
I know we simplify things, and when we looked at pre-event and append, we never checked whether the

8
00:00:30,690 --> 00:00:33,090
value was something that we wanted.

9
00:00:33,860 --> 00:00:39,200
But when it comes to inserting something, we want to make sure, especially that the index is a value

10
00:00:39,200 --> 00:00:40,010
that we understand.

11
00:00:40,010 --> 00:00:47,570
So our program doesn't give any errors and there's many things that we can do for a check.

12
00:00:48,330 --> 00:00:51,780
And I'll leave it up to you to really implement really good checking.

13
00:00:51,780 --> 00:01:00,270
But the one important check that I think we should have is if index is greater than or equal to this

14
00:01:00,270 --> 00:01:01,530
dot length.

15
00:01:01,950 --> 00:01:09,690
So if I give an insert of, let's say index at 200 and our list is only three items long, I want to

16
00:01:09,690 --> 00:01:11,550
be able to handle that properly.

17
00:01:11,640 --> 00:01:20,730
In this case, I'm saying as long as the index is greater or equal to this dominant, then in that case,

18
00:01:20,730 --> 00:01:24,120
just add it to the end of the list.

19
00:01:24,300 --> 00:01:32,370
So if I say insert 200 value of 99, I'm just going to add the 99 to the end of the list.

20
00:01:32,640 --> 00:01:34,980
And you can implement different variations of this.

21
00:01:34,980 --> 00:01:37,470
Maybe you can return an error if you want.

22
00:01:38,130 --> 00:01:45,570
But to simplify things, I think this is good enough and we can just say return this dot append, which

23
00:01:45,570 --> 00:01:46,230
you already have.

24
00:01:46,230 --> 00:01:50,520
We have to say this a pen because we're referencing a method in this class.

25
00:01:50,520 --> 00:01:52,650
So let's say this dot pen.

26
00:01:54,180 --> 00:01:56,190
And we'll just add the value.

27
00:01:57,270 --> 00:01:57,990
There we go.

28
00:01:58,350 --> 00:02:05,640
So if I do 299 over here, let's and let's add the print list at the bottom here.

29
00:02:06,180 --> 00:02:07,680
And then if I click Run.

30
00:02:08,330 --> 00:02:11,540
I get 99 added to the end of the list.

31
00:02:12,410 --> 00:02:14,540
But what if index was to.

32
00:02:15,990 --> 00:02:20,580
Well, this now is the hard part.

33
00:02:20,610 --> 00:02:23,070
We want to first create the new node.

34
00:02:24,990 --> 00:02:29,730
And remember, we can create a new class instance if we wanted to, but in our case, we'll just create

35
00:02:29,730 --> 00:02:33,120
a new object that has a value of value.

36
00:02:34,660 --> 00:02:36,670
And next of no.

37
00:02:38,390 --> 00:02:39,410
Nothing new here.

38
00:02:39,410 --> 00:02:40,610
We've seen this before.

39
00:02:42,820 --> 00:02:48,340
Comes the tricky part, and I like to comment this out, or at least visualize it so we understand what

40
00:02:48,340 --> 00:02:49,030
we're doing.

41
00:02:49,090 --> 00:02:52,450
We have two nodes that are.

42
00:02:53,590 --> 00:02:54,280
Connected.

43
00:02:54,610 --> 00:02:59,980
And then we have a new node that comes along and says, Hey, I want you to insert me right in between

44
00:02:59,980 --> 00:03:00,430
here.

45
00:03:00,730 --> 00:03:02,680
What should the steps be?

46
00:03:03,820 --> 00:03:10,660
Well, the first thing we need to do is to actually figure out which node the first one is, because

47
00:03:10,660 --> 00:03:14,750
remember to insert something, we can pick whatever index we want.

48
00:03:14,770 --> 00:03:21,580
So if we want to insert an index of two, we want to grab whatever is that index of two.

49
00:03:21,640 --> 00:03:22,930
So we need to.

50
00:03:22,960 --> 00:03:30,730
So we need to traverse our list and say 012 to find this node and get a reference to it.

51
00:03:30,910 --> 00:03:33,310
Otherwise, we don't really have a reference to it.

52
00:03:33,340 --> 00:03:38,620
Remember, a link list only has reference to this head and this tail.

53
00:03:40,410 --> 00:03:46,200
So the very first thing we want to do is to actually get to that node and we're going to call.

54
00:03:46,840 --> 00:03:53,320
This first node, the leader, because that's going to be the first one, first node that we're going

55
00:03:53,320 --> 00:03:54,130
to connect.

56
00:03:54,880 --> 00:03:56,320
This new node, too.

57
00:03:56,710 --> 00:04:04,480
And this new node is now going to point next to the old node or the node that was initially connected

58
00:04:04,480 --> 00:04:05,320
to the first node.

59
00:04:05,740 --> 00:04:12,520
So I'm going to say that this leader node is going to be well.

60
00:04:12,550 --> 00:04:13,870
How can we get that?

61
00:04:14,350 --> 00:04:22,330
We need to somehow traverse one by one until we find the index we're looking for and to keep the code

62
00:04:22,330 --> 00:04:22,690
clean.

63
00:04:22,690 --> 00:04:24,240
I'm going to create a new method.

64
00:04:24,250 --> 00:04:33,820
I'm going to say this dot traverse two index is going to be a new method that's simply going to get

65
00:04:33,820 --> 00:04:39,070
the index that is 012.

66
00:04:39,250 --> 00:04:41,200
And I want to grab the leader.

67
00:04:41,200 --> 00:04:49,690
So if I want to insert the number 99 in here, I have to make sure that ten points to 99.

68
00:04:50,790 --> 00:04:52,950
And 99 points to five.

69
00:04:53,400 --> 00:04:59,490
So that means I need to grab the index, not here and point it to the leader.

70
00:04:59,490 --> 00:05:03,210
That is the ten the leader that we want of the list.

71
00:05:03,420 --> 00:05:05,550
So all I'm going to do is minus one.

72
00:05:06,630 --> 00:05:10,760
So point to the leader and this traverse to index.

73
00:05:10,770 --> 00:05:12,630
Well, we're going to have to create it.

74
00:05:13,620 --> 00:05:18,810
And I have the this keyword here because again, it's a method onto this class.

75
00:05:19,140 --> 00:05:23,760
I'm going to say traverse to index that's going to get an index.

76
00:05:23,790 --> 00:05:27,300
And this is where we do our traversal or looping.

77
00:05:27,900 --> 00:05:33,420
You might want to check for parameters here and make sure that it's a valid index, and that's something

78
00:05:33,420 --> 00:05:34,660
that you can do on your own.

79
00:05:34,680 --> 00:05:36,990
It's not very important for this example.

80
00:05:38,180 --> 00:05:43,280
We can assume that the index is going to be a valid number, a valid index.

81
00:05:43,550 --> 00:05:47,450
And in here we're going to first have to do something like a counter.

82
00:05:48,380 --> 00:05:50,060
That's going to equal to zero.

83
00:05:51,440 --> 00:05:57,330
And we're going to say that the current node and this is something we did similar to the print list.

84
00:05:57,350 --> 00:05:59,930
We're going to keep the current node as.

85
00:06:01,050 --> 00:06:02,970
This head.

86
00:06:04,290 --> 00:06:05,940
And while.

87
00:06:06,720 --> 00:06:17,700
The current or the while the counter doesn't equal the index because we're saying keep traversing,

88
00:06:17,700 --> 00:06:25,770
go from the beginning, from the head all the way until the counter is equal to the index.

89
00:06:25,770 --> 00:06:31,650
So keep going through the while loop as long as the counter doesn't equal the index, but as soon as

90
00:06:31,650 --> 00:06:33,040
the counter becomes the index.

91
00:06:33,040 --> 00:06:38,730
So while we reach the point that we want in our case traverse to index minus one, that means as soon

92
00:06:38,730 --> 00:06:41,070
as we get to ten, then stop.

93
00:06:41,220 --> 00:06:45,570
But until then, I want you to traverse through this.

94
00:06:45,570 --> 00:06:48,570
So current node is going to equal.

95
00:06:51,250 --> 00:06:53,770
Current node dot next.

96
00:06:53,770 --> 00:06:57,910
So we're going to keep moving the current node over to the right.

97
00:06:58,670 --> 00:07:01,520
And we're going to increment the counter one by one.

98
00:07:01,970 --> 00:07:02,600
That's it.

99
00:07:02,990 --> 00:07:04,430
That's our traversal.

100
00:07:05,490 --> 00:07:11,700
All we need to do at the end because we want to return something from this method is to return the current

101
00:07:12,210 --> 00:07:12,720
node.

102
00:07:13,890 --> 00:07:15,030
And there we have it.

103
00:07:16,040 --> 00:07:16,730
We say.

104
00:07:16,760 --> 00:07:18,230
Traverse to the index.

105
00:07:18,650 --> 00:07:26,420
In our case, if we do insert to 99, it's going to receive to 99 here.

106
00:07:27,150 --> 00:07:33,660
It's going to create the new node and it's going to traverse to index to minus one is one.

107
00:07:33,660 --> 00:07:40,140
So it's going to say zero and one and counter is going to equal index.

108
00:07:40,140 --> 00:07:47,100
So it's going to exit out of this loop and it's going to return the current node, which is ten.

109
00:07:47,430 --> 00:07:50,250
We grabbed a reference to the leader.

110
00:07:50,280 --> 00:07:52,320
Congrats, but we're not done yet.

111
00:07:52,320 --> 00:07:52,770
Right?

112
00:07:53,400 --> 00:07:57,030
Once we grab the reference to the leader, what do we do next?

113
00:07:58,070 --> 00:08:05,180
Well, the next thing is we want to make sure that we grab the next item in this original list.

114
00:08:05,180 --> 00:08:09,950
That is, we want to hold a pointer to number five.

115
00:08:10,460 --> 00:08:12,150
Again, we don't want to break this list.

116
00:08:12,170 --> 00:08:19,460
We want to make sure that the connections are working properly and that 99 comes after ten and after

117
00:08:19,460 --> 00:08:20,840
99 comes five.

118
00:08:21,290 --> 00:08:25,100
So the next step we want to do in our insert method.

119
00:08:25,820 --> 00:08:29,720
Is to what I call hold.

120
00:08:31,200 --> 00:08:33,030
Or let's just call it holding pointer.

121
00:08:33,059 --> 00:08:38,850
I could probably name that better, but holding pointer is nice and we'll say Leader Dot next.

122
00:08:39,860 --> 00:08:43,400
Leader done next is five.

123
00:08:44,169 --> 00:08:45,670
And this five.

124
00:08:46,310 --> 00:08:51,740
We now have it referenced in this variable that will have temporarily.

125
00:08:52,500 --> 00:09:02,160
Next because we have five saved to this variable referenced in this variable we can now update the.

126
00:09:03,210 --> 00:09:03,810
Leader.

127
00:09:04,050 --> 00:09:06,200
Next to point to our new node.

128
00:09:06,210 --> 00:09:08,250
So I can say leader.

129
00:09:09,060 --> 00:09:13,470
Don next is going to now point to new node.

130
00:09:14,460 --> 00:09:21,540
And remember, because of how references work, we've deleted the reference of five here.

131
00:09:21,540 --> 00:09:29,220
So ten no longer points to five, but we've saved the reference to it in here in this variable.

132
00:09:30,300 --> 00:09:38,190
So right now, if we go back to our example here, we've removed the reference to this and now ten.

133
00:09:40,170 --> 00:09:41,340
Points to.

134
00:09:42,260 --> 00:09:43,070
This note.

135
00:09:46,550 --> 00:09:47,360
That's better spacing.

136
00:09:47,360 --> 00:09:47,960
There you go.

137
00:09:49,100 --> 00:09:50,390
What do we do next?

138
00:09:51,500 --> 00:09:55,310
Well, we now need this node, this new node, to point to this one.

139
00:09:56,690 --> 00:09:57,320
Like this.

140
00:09:57,870 --> 00:09:59,140
And that's pretty simple, right?

141
00:09:59,160 --> 00:10:00,690
We simply say.

142
00:10:01,690 --> 00:10:10,210
New node dot next is going to equal the holding pointer, the five that we are keeping in memory.

143
00:10:11,380 --> 00:10:16,840
And then finally we say this dot length plus plus because we've added to the list.

144
00:10:17,690 --> 00:10:22,940
And we can return this or just so we know we did it properly.

145
00:10:22,940 --> 00:10:25,370
I'm going to say this dot print list.

146
00:10:27,240 --> 00:10:31,260
Once we entrench something, insert something, we're going to just print the list.

147
00:10:31,770 --> 00:10:33,770
Let's see if that works.

148
00:10:33,780 --> 00:10:35,190
I'm going to remove this.

149
00:10:36,180 --> 00:10:39,060
So the code works, and we don't need the print list.

150
00:10:39,540 --> 00:10:41,070
Let's run this command.

151
00:10:42,910 --> 00:10:43,970
Hey, look at that.

152
00:10:43,990 --> 00:10:45,190
So before.

153
00:10:46,150 --> 00:10:47,020
We had.

154
00:10:47,740 --> 00:10:48,730
This list.

155
00:10:49,600 --> 00:10:56,950
And let's actually print this here so we can see it in my print or my link list dot.

156
00:10:57,860 --> 00:10:58,820
Print list.

157
00:10:59,930 --> 00:11:01,310
This is what we had before.

158
00:11:01,310 --> 00:11:04,370
And we added 99 in here.

159
00:11:05,920 --> 00:11:06,910
Just like that.

160
00:11:07,450 --> 00:11:13,000
And just to test that out one more time, if I do my link list dot insert again and this time we'll

161
00:11:13,000 --> 00:11:17,520
give it 20, which doesn't exist index of 20 and add 88.

162
00:11:17,530 --> 00:11:19,600
That should be added to the end of the list.

163
00:11:22,040 --> 00:11:29,450
And because with this insert where when we do the check, we're just adding the this dot append which

164
00:11:29,450 --> 00:11:31,160
isn't printing the list.

165
00:11:31,610 --> 00:11:36,620
Let's just add a print list at the bottom here to make sure that that is working.

166
00:11:37,220 --> 00:11:38,000
There you go.

167
00:11:38,330 --> 00:11:39,830
88 at the end.

168
00:11:41,390 --> 00:11:42,950
Very, very nice.

169
00:11:43,370 --> 00:11:50,540
I know that was challenging and insert is probably the toughest function to implement or method to implement

170
00:11:50,540 --> 00:11:51,560
in a linked list.

171
00:11:51,710 --> 00:11:54,220
But practice this a couple of times.

172
00:11:54,230 --> 00:11:56,690
Really understand what each step is doing.

173
00:11:56,690 --> 00:11:58,580
Draw it out if you need to.

174
00:11:59,000 --> 00:12:00,380
But congratulations.

175
00:12:00,380 --> 00:12:07,070
We just implemented an insert function into our list linked list and you might notice here that we had

176
00:12:07,070 --> 00:12:09,770
to traverse where we had a while loop.

177
00:12:10,460 --> 00:12:12,440
And this might make sense now, right?

178
00:12:13,630 --> 00:12:17,590
Why we had the insert as o of n.

179
00:12:18,360 --> 00:12:25,830
Because we had to loop through our list and look up, which can also be called traversal was also an

180
00:12:25,830 --> 00:12:28,360
event that was our traverse to index, right?

181
00:12:28,380 --> 00:12:33,510
If we're looking for an item at index of ten, for example, we'd have to look up.

182
00:12:33,510 --> 00:12:37,340
And the worst case is that we had to go through the entire list.

183
00:12:37,350 --> 00:12:38,400
Same with Insert.

184
00:12:39,190 --> 00:12:39,850
All right.

185
00:12:39,880 --> 00:12:44,880
Now that we've done the insert, you should be able to do the next one on your own.

186
00:12:44,890 --> 00:12:46,300
That is, delete.

187
00:12:47,000 --> 00:12:49,880
Using something very similar to what we did with insert.

188
00:12:50,540 --> 00:12:52,490
Let's add a delete.

189
00:12:53,670 --> 00:12:55,380
Or I'd like to call this remove.

190
00:12:56,750 --> 00:12:59,210
Let's have a remove that has.

191
00:13:00,020 --> 00:13:02,900
The parameter index of what you want to remove.

192
00:13:03,410 --> 00:13:06,560
Good luck coding this and I'll see you in the solution video.

