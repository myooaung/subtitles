1
00:00:00,780 --> 00:00:01,650
Welcome back.

2
00:00:02,040 --> 00:00:06,990
Let's start off with the iterative approach that is no recursion.

3
00:00:07,500 --> 00:00:13,380
If we want to run the function, let's say find factorial iterative five.

4
00:00:14,200 --> 00:00:18,490
Well, we can create a variable, let's say answer.

5
00:00:19,620 --> 00:00:22,320
And for now this answer will be one.

6
00:00:22,920 --> 00:00:25,590
And all we're going to do is do a four loop.

7
00:00:26,410 --> 00:00:27,580
We'll say let I.

8
00:00:27,610 --> 00:00:29,140
Equals zero.

9
00:00:30,040 --> 00:00:33,390
Or in our case, to simplify things.

10
00:00:33,400 --> 00:00:35,500
Let's start at two.

11
00:00:36,230 --> 00:00:39,380
And I'm going to explain in a second why we want to start a two.

12
00:00:41,130 --> 00:00:44,310
I'm going to say I is less than the number.

13
00:00:44,640 --> 00:00:45,960
And then we're going to.

14
00:00:47,020 --> 00:00:49,030
Increment by one.

15
00:00:50,460 --> 00:00:51,060
Now.

16
00:00:51,060 --> 00:00:53,130
Why are we starting at two?

17
00:00:55,500 --> 00:00:57,510
You might notice a shortcut here.

18
00:00:58,170 --> 00:01:01,260
One factorial is just one.

19
00:01:02,550 --> 00:01:07,620
Two factorial is two times one, which is just two.

20
00:01:08,390 --> 00:01:17,060
So these last two bits, if somebody says one factorial or two factorial, we can just simply return

21
00:01:17,630 --> 00:01:22,190
the number that they've entered because there's no real calculation that we need to do.

22
00:01:22,820 --> 00:01:24,500
So this is a little shortcut.

23
00:01:24,500 --> 00:01:26,540
So we avoid extra loops.

24
00:01:27,420 --> 00:01:37,710
We're just saying that if the number that the user enters is, let's say two, so that is two is not

25
00:01:37,710 --> 00:01:39,720
greater than number two.

26
00:01:41,000 --> 00:01:42,260
The way we have it now.

27
00:01:42,260 --> 00:01:48,710
If somebody enters find factorial iterative two, we're going to return one.

28
00:01:48,980 --> 00:01:57,320
But instead we can just say maybe a simple conditional check saying that if number equals to two.

29
00:01:58,270 --> 00:01:59,200
We'll just.

30
00:01:59,920 --> 00:02:02,950
Say that answer equals to two.

31
00:02:04,490 --> 00:02:07,460
So that if I run this function and just say to.

32
00:02:08,479 --> 00:02:11,030
I get two if I say one.

33
00:02:11,660 --> 00:02:12,980
I get one.

34
00:02:12,980 --> 00:02:16,640
And there's other checks that we can do, obviously.

35
00:02:17,000 --> 00:02:19,520
But for our case, this is good enough.

36
00:02:19,520 --> 00:02:22,280
Let's look at what we can do inside of here.

37
00:02:23,120 --> 00:02:29,060
Well, the way factorial works is to simply say answer is going to equal answer.

38
00:02:30,730 --> 00:02:31,480
Times.

39
00:02:33,760 --> 00:02:36,760
So that if I click run here and let's do five.

40
00:02:38,250 --> 00:02:48,390
I get 24, which is actually not the right answer because five times four is 20 times three is well,

41
00:02:48,390 --> 00:02:50,700
clearly higher than 24.

42
00:02:51,180 --> 00:02:53,400
And that's because of a little mistake here.

43
00:02:53,400 --> 00:02:58,800
We want to make sure that this is equals because we want to include the number five.

44
00:02:59,070 --> 00:03:00,840
So if I run this again.

45
00:03:02,150 --> 00:03:05,310
I get 120, which is the right answer?

46
00:03:05,330 --> 00:03:16,490
Five times four is 20 times times three is 60 times two is one.

47
00:03:16,490 --> 00:03:19,670
20 times one is just 120.

48
00:03:20,180 --> 00:03:20,840
Perfect.

49
00:03:21,080 --> 00:03:24,560
So hopefully you got that answer correct.

50
00:03:25,430 --> 00:03:27,530
What about the recursive approach?

51
00:03:29,610 --> 00:03:34,590
In the recursive version, we'll just do a simple check saying if.

52
00:03:35,640 --> 00:03:42,510
The number is equals to two and we can do other checks as well.

53
00:03:42,520 --> 00:03:46,240
But that should be enough for now for us to create a base case.

54
00:03:46,360 --> 00:03:51,970
So if the number gets to two, we'll just return to.

55
00:03:54,240 --> 00:03:55,530
There's our base case.

56
00:03:55,530 --> 00:03:56,610
That's how we stop.

57
00:03:57,000 --> 00:04:04,560
Next, we're going to return our recursive version, which will simply be number.

58
00:04:05,710 --> 00:04:06,610
Times.

59
00:04:07,590 --> 00:04:08,340
The function.

60
00:04:09,310 --> 00:04:15,730
And in this function, we're just going to say number minus one.

61
00:04:16,269 --> 00:04:17,680
And that's the key here.

62
00:04:17,769 --> 00:04:24,820
We want to always get lower and lower until we hit the base case.

63
00:04:25,330 --> 00:04:30,040
So if I hit run here, let's do recursive this time.

64
00:04:32,970 --> 00:04:34,230
I'm going to move this up.

65
00:04:35,530 --> 00:04:36,400
Over here.

66
00:04:36,400 --> 00:04:40,480
And if I had run, I also get 120.

67
00:04:41,590 --> 00:04:47,470
And this is a little hard to wrap your mind around, so you might want to copy this code and open up

68
00:04:47,470 --> 00:04:51,910
Google Chrome developer tools like I showed you and go step by step.

69
00:04:52,060 --> 00:05:00,880
But if we start with the number five here, well, this five equal to nope, then we'll say five times.

70
00:05:02,130 --> 00:05:03,510
Fine factorial.

71
00:05:04,180 --> 00:05:04,960
For.

72
00:05:06,670 --> 00:05:10,990
Should be our answer, just like the diagram that I showed you.

73
00:05:11,530 --> 00:05:20,470
And we keep going and keep going until we hit the base case of does the number equal to.

74
00:05:22,760 --> 00:05:24,740
Now one last bit.

75
00:05:25,580 --> 00:05:29,390
What do you think the time complexity of these two functions are?

76
00:05:30,420 --> 00:05:33,510
While one uses a four loop.

77
00:05:34,500 --> 00:05:41,100
With the loop being the number associated with it, and we're doing a bit of a shortcut here, so it's

78
00:05:41,100 --> 00:05:42,610
technically less than zero.

79
00:05:42,720 --> 00:05:48,690
NW But because of our big old rules, this is still going to be O of NW.

80
00:05:51,370 --> 00:05:52,750
The recursive function.

81
00:05:52,750 --> 00:05:56,440
If we look at this, we are looping how many times?

82
00:05:56,920 --> 00:06:03,670
Well, we're calling the function function find factorial recursive recursive the same number of times

83
00:06:03,670 --> 00:06:05,140
as the number itself.

84
00:06:05,560 --> 00:06:09,940
So this also becomes o of n.

85
00:06:11,040 --> 00:06:13,080
If you've got this question, good job.

86
00:06:13,080 --> 00:06:14,880
It's a tough one if you didn't.

87
00:06:14,910 --> 00:06:15,690
Don't worry.

88
00:06:15,690 --> 00:06:17,190
We have another one coming up.

89
00:06:17,370 --> 00:06:18,450
I'll see you in the next one.

90
00:06:18,780 --> 00:06:19,380
Bye bye.

