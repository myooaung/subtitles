1
00:00:00,870 --> 00:00:01,859
Welcome back.

2
00:00:02,040 --> 00:00:10,170
Let's use dynamic programming and memorization to improve this function, just like we did when we learned

3
00:00:10,170 --> 00:00:11,430
about memorization.

4
00:00:11,760 --> 00:00:13,440
This is fairly simple.

5
00:00:14,070 --> 00:00:15,990
Let's remove this for now.

6
00:00:16,470 --> 00:00:19,230
I'll keep this at the top and in here.

7
00:00:19,230 --> 00:00:20,520
Create a new function.

8
00:00:20,790 --> 00:00:25,110
We'll call it Fibonacci Master.

9
00:00:26,280 --> 00:00:28,830
This function will have a cash.

10
00:00:30,000 --> 00:00:35,730
Hash table or an object to store our pre calculated answers.

11
00:00:37,340 --> 00:00:43,910
And if you remember, because we want to make sure that we don't reset this every time we run this function,

12
00:00:43,910 --> 00:00:47,240
we're going to return another function inside here.

13
00:00:47,240 --> 00:00:53,180
Again, using closures in JavaScript and in other languages, you might have to use different techniques.

14
00:00:53,810 --> 00:00:57,980
And in here we can just have a function, we can name it whatever.

15
00:00:57,980 --> 00:01:03,650
Let's call it fib that takes NW, that is the number we give it.

16
00:01:04,099 --> 00:01:10,790
And inside here what we do something very similar to the above, except we're going to check the cache

17
00:01:10,790 --> 00:01:11,360
first.

18
00:01:11,870 --> 00:01:15,710
We're going to say if NW is in cash.

19
00:01:19,560 --> 00:01:22,380
Just like we did in the memorization videos.

20
00:01:22,500 --> 00:01:24,960
And we're going to check if the cache exists.

21
00:01:26,010 --> 00:01:29,220
And if it does, we're going to return cash.

22
00:01:30,230 --> 00:01:33,440
And the first time around, this is going to be empty.

23
00:01:33,440 --> 00:01:34,940
So it's not going to work.

24
00:01:34,940 --> 00:01:37,940
It's going to go into the else condition.

25
00:01:39,900 --> 00:01:44,010
And in here we have two conditions, just like we do up here.

26
00:01:44,910 --> 00:01:45,600
If.

27
00:01:46,200 --> 00:01:48,660
NW is less than two.

28
00:01:49,600 --> 00:01:51,790
Then we need to return.

29
00:01:51,790 --> 00:01:53,980
And just like we did above.

30
00:01:53,980 --> 00:01:54,670
Over here.

31
00:01:55,790 --> 00:01:56,630
Otherwise.

32
00:01:58,200 --> 00:02:04,230
We run our sequence, so we do fib of NW minus one.

33
00:02:05,110 --> 00:02:09,100
Plus fib of an minus two.

34
00:02:10,070 --> 00:02:13,300
But we want to store this value in our cash.

35
00:02:13,310 --> 00:02:15,800
So we're going to say cash.

36
00:02:17,030 --> 00:02:22,130
NW is going to equal the result of this.

37
00:02:23,950 --> 00:02:27,550
And finally, we want to return this value because.

38
00:02:28,910 --> 00:02:35,750
We are using recursion here and return cache of n which we've just set.

39
00:02:37,140 --> 00:02:38,700
And that's it.

40
00:02:39,120 --> 00:02:41,280
That wasn't that hard, right?

41
00:02:41,310 --> 00:02:50,850
I mean, we have a few extra steps, but all we did was just add the result to our hash table so that

42
00:02:50,850 --> 00:03:00,360
now if I do cost, let's say faster fib is going to equal to Fibonacci master.

43
00:03:01,500 --> 00:03:08,100
Remember the first time around when we're going to run this function and create the cache variable?

44
00:03:08,130 --> 00:03:08,800
Whoops.

45
00:03:08,820 --> 00:03:16,530
Let's try that again and create the cash variable and it's going to just return this function.

46
00:03:16,830 --> 00:03:23,950
So it's similar to just saying like that faster fib equals this function now.

47
00:03:26,330 --> 00:03:34,760
Except that now we have access to the cash variable so that now I can console the log.

48
00:03:35,850 --> 00:03:43,140
And let's call this DP for dynamic programming and we'll say faster fib and give it, let's say.

49
00:03:46,010 --> 00:03:47,330
If I run this.

50
00:03:49,010 --> 00:03:50,600
I get 55.

51
00:03:51,540 --> 00:03:56,100
0123456789

52
00:03:56,100 --> 00:03:58,020
1055.

53
00:03:58,810 --> 00:03:59,800
That's pretty good.

54
00:04:00,820 --> 00:04:03,880
But let's do something fun here to see if it works.

55
00:04:04,120 --> 00:04:08,470
This calculations tally that we used in Fibonacci number.

56
00:04:08,770 --> 00:04:10,540
Let's move it.

57
00:04:11,320 --> 00:04:14,470
To the Fibonacci master.

58
00:04:15,590 --> 00:04:22,220
Or instead of here down in this function, because this is the one that we were cursing over.

59
00:04:23,500 --> 00:04:28,900
And let's see how many times this calculation happens if I run this.

60
00:04:29,560 --> 00:04:32,320
Oh, and we need to console.log these calculations.

61
00:04:32,320 --> 00:04:35,980
So the bottom over here, let's have a console.log.

62
00:04:38,780 --> 00:04:40,910
And we'll say we did.

63
00:04:44,730 --> 00:04:46,320
Calculations.

64
00:04:47,990 --> 00:04:48,920
Just like that.

65
00:04:49,900 --> 00:04:51,520
So that if I run this.

66
00:04:52,850 --> 00:05:04,130
We see that we did 19 calculations with the Fibonacci master when we entered ten versus if we move back

67
00:05:04,160 --> 00:05:09,080
calculations up to here to our old version.

68
00:05:09,570 --> 00:05:12,020
Oh, and we actually have to run this function.

69
00:05:12,020 --> 00:05:18,590
So in here let's just have console.log so we can have everything clean.

70
00:05:18,590 --> 00:05:20,060
We'll say console.log.

71
00:05:20,600 --> 00:05:28,060
This will be this will be called slow and it will be called what was it, Fibonacci.

72
00:05:28,070 --> 00:05:33,110
So we'll just do our original function, Fibonacci with ten.

73
00:05:34,090 --> 00:05:35,500
So let's see and run.

74
00:05:36,760 --> 00:05:38,590
We got the same answers.

75
00:05:38,590 --> 00:05:45,580
55 But it took us 177 calculations to get to ten.

76
00:05:47,070 --> 00:05:47,950
Holy moly.

77
00:05:47,970 --> 00:05:51,690
So 19 versus 177 calculations.

78
00:05:52,020 --> 00:05:54,060
And if we do 20 here.

79
00:05:56,710 --> 00:05:59,800
Well, we have that many calculations.

80
00:05:59,800 --> 00:06:01,840
And actually, let's just do 35.

81
00:06:01,870 --> 00:06:03,370
See if that's possible.

82
00:06:03,370 --> 00:06:03,790
Let's see.

83
00:06:03,790 --> 00:06:04,600
35.

84
00:06:06,430 --> 00:06:07,100
There you go.

85
00:06:07,120 --> 00:06:15,690
Look how many calculations we had to do versus if I do 35 with our memorised function.

86
00:06:15,700 --> 00:06:18,490
Move the calculations in here.

87
00:06:23,660 --> 00:06:25,130
And we run this.

88
00:06:27,280 --> 00:06:29,230
69 calculations.

89
00:06:29,230 --> 00:06:29,950
That's it.

90
00:06:30,580 --> 00:06:36,250
Instead of before where if I entered Fibonacci 50 here, it would actually crash the browser because

91
00:06:36,250 --> 00:06:39,700
we would do so many calculations.

92
00:06:40,000 --> 00:06:45,870
With this one, I can do Fibonacci 100 and I have no problem.

93
00:06:45,880 --> 00:06:47,830
Look how fast they calculated that.

94
00:06:47,860 --> 00:06:48,970
That's pretty amazing.

95
00:06:48,970 --> 00:06:51,760
It only did 199 calculation.

96
00:06:52,270 --> 00:06:57,280
I hope you see the power of dynamic programming and it's not that hard, right?

97
00:06:57,610 --> 00:07:00,070
All you need is to remember this pattern.

98
00:07:00,070 --> 00:07:08,620
And if there's any repeated calculation to just memorize the result of a function so that if the parameter

99
00:07:08,620 --> 00:07:13,030
is the same, we check in the cash first for the result.

100
00:07:13,730 --> 00:07:17,480
But let's talk about space and time complexity here.

101
00:07:17,660 --> 00:07:22,880
This well, because we're only doing the necessary calculation.

102
00:07:24,280 --> 00:07:25,360
In this case.

103
00:07:26,790 --> 00:07:28,440
All our calculations.

104
00:07:28,800 --> 00:07:30,720
Well, are n right?

105
00:07:30,720 --> 00:07:31,160
We do.

106
00:07:31,170 --> 00:07:38,430
One, two, three, four, five, six, seven calculations versus all the ones that we did before.

107
00:07:39,130 --> 00:07:44,350
So that our time complexity for this one is o of an.

108
00:07:45,370 --> 00:07:50,170
Versus with this one that was of two to the power of MN.

109
00:07:50,470 --> 00:07:53,680
Just like that we made huge, huge savings.

110
00:07:55,350 --> 00:08:02,430
The one drawback is that, well, we increased the space complexity, right?

111
00:08:02,820 --> 00:08:09,840
I mean, with the first Fibonacci number, we had to add functions to the stack.

112
00:08:11,020 --> 00:08:16,240
And these functions, the deeper it is, we add it to the stack, but once we got to the bottom, we

113
00:08:16,240 --> 00:08:21,760
popped off the stack so that the stack was as deep as the tree.

114
00:08:22,300 --> 00:08:28,690
But with the Memrise version, we also have this new variable, this cache hash table that we have to

115
00:08:28,690 --> 00:08:30,430
store our memory in.

116
00:08:30,850 --> 00:08:37,210
But as we know, we sometimes need to trade off space complexity for better time complexity.

117
00:08:37,210 --> 00:08:39,130
And this is what we're doing in this case.

118
00:08:39,130 --> 00:08:43,990
And in this case, the time complexity savings are very, very large.

119
00:08:44,380 --> 00:08:44,980
All right.

120
00:08:44,980 --> 00:08:47,830
I hope I got you excited about dynamic programming.

121
00:08:47,830 --> 00:08:51,910
It's very interesting and not as overwhelming as you think.

122
00:08:51,910 --> 00:08:52,540
Right.

123
00:08:53,320 --> 00:09:00,100
I'll leave a couple of problems for you to do to get used to dynamic programming, but I recommend that

124
00:09:00,100 --> 00:09:07,240
you take the code that I'll leave here for you, and you can just grab it from resources and play around

125
00:09:07,240 --> 00:09:07,750
with it.

126
00:09:08,480 --> 00:09:09,290
Otherwise.

127
00:09:09,410 --> 00:09:10,610
I'll see you in the next video.

128
00:09:11,250 --> 00:09:11,820
Bye bye.

