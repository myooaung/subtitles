1
00:00:00,850 --> 00:00:01,960
Woo hoo!

2
00:00:01,990 --> 00:00:09,670
It's finally time to learn our very first data structure and one that most likely you're very familiar

3
00:00:09,670 --> 00:00:10,090
with.

4
00:00:11,230 --> 00:00:11,920
Arrays.

5
00:00:12,460 --> 00:00:16,090
Arrays which are sometimes called lists.

6
00:00:16,690 --> 00:00:19,450
Organizes items sequentially.

7
00:00:19,930 --> 00:00:22,960
That means one after another in memory.

8
00:00:23,170 --> 00:00:24,970
Kind of like we have here.

9
00:00:25,720 --> 00:00:31,360
We have some sort of data to index zero, let's say juice.

10
00:00:31,750 --> 00:00:35,650
And then right after at index one, we have something else.

11
00:00:35,650 --> 00:00:36,380
Maybe apple.

12
00:00:36,400 --> 00:00:40,660
Maybe this is a grocery list in our computers memory.

13
00:00:40,690 --> 00:00:42,610
It'll be one after another.

14
00:00:42,730 --> 00:00:47,530
Because, remember, our RAM is a lot bigger than just seven slots.

15
00:00:48,180 --> 00:00:52,860
And the Rays are probably the simplest and most widely used data structures.

16
00:00:53,610 --> 00:00:59,520
And luckily for us, we're starting with this because arrays have the least amount of rules and because

17
00:00:59,520 --> 00:01:03,750
they're stored in contiguous memory, that is in order.

18
00:01:04,050 --> 00:01:07,740
They also have the smallest footprint of any data structure.

19
00:01:08,510 --> 00:01:15,350
So if all you need is to store some data and iterate over it, that is go one by one, step by step.

20
00:01:15,710 --> 00:01:17,960
Arrays are the best choice.

21
00:01:19,050 --> 00:01:24,390
Especially if, you know the indices that is here on the left of the items you're storing.

22
00:01:25,180 --> 00:01:30,100
And just as a quick glance and we'll go over this in more detail in later videos.

23
00:01:30,840 --> 00:01:37,080
But lookup or access with arrays are constant time of one.

24
00:01:37,080 --> 00:01:38,700
It's super, super fast.

25
00:01:39,330 --> 00:01:45,000
Other actions or methods that we're going to go over such as push, are also fast, but then inserts

26
00:01:45,000 --> 00:01:48,780
and deletes are o of n or linear time.

27
00:01:49,810 --> 00:01:55,030
But in order to demonstrate arrays, let's actually use code to show you an example.

28
00:01:56,560 --> 00:01:58,690
We have our little playground over here.

29
00:01:59,020 --> 00:02:01,670
And again, you can use whichever language you prefer.

30
00:02:01,690 --> 00:02:04,210
I'm just going to demonstrate this in JavaScript.

31
00:02:05,400 --> 00:02:06,570
We can create.

32
00:02:07,400 --> 00:02:08,600
A simple.

33
00:02:09,580 --> 00:02:11,560
Array, let's call it strings.

34
00:02:11,560 --> 00:02:15,700
And this array again using the square bracket notation.

35
00:02:15,700 --> 00:02:18,490
We'll have a then be.

36
00:02:19,640 --> 00:02:23,450
Then C and D.

37
00:02:24,930 --> 00:02:28,800
And we just we've just created an array in JavaScript.

38
00:02:29,730 --> 00:02:35,790
Now looking at this and based on what we've learned so far, we can make a couple of assumptions.

39
00:02:36,620 --> 00:02:45,440
For example, to store the letter A, letter B, letter C, letter D, that's one, two, three, four,

40
00:02:45,440 --> 00:02:46,490
four items.

41
00:02:47,030 --> 00:02:57,290
If we were on a 32 bit system, that is we have one, two, three, four shelves to store the letter

42
00:02:57,290 --> 00:02:59,360
A in zeros and ones.

43
00:02:59,840 --> 00:03:04,370
Well, if that's the case, we just multiply four times four.

44
00:03:05,090 --> 00:03:10,850
So four items and each item taking up for shelves in our memory.

45
00:03:10,850 --> 00:03:14,930
That means we're using up 20 or 16.

46
00:03:15,590 --> 00:03:16,430
Bites.

47
00:03:17,480 --> 00:03:18,800
Of storage.

48
00:03:19,820 --> 00:03:28,430
If we remember in our little example here that with a 32 bit system, we have one, two, three, four

49
00:03:28,430 --> 00:03:30,470
shelves to store this.

50
00:03:31,480 --> 00:03:32,230
This number.

51
00:03:33,940 --> 00:03:40,300
Again, this is a bit of a simplified version of looking at it, but I hope you see what we're doing

52
00:03:40,300 --> 00:03:40,510
here.

53
00:03:40,510 --> 00:03:47,920
We're simply storing a BCD in sequential order in our RAM, our random access memory.

54
00:03:48,560 --> 00:03:52,460
So the computer now knows where to find these items.

55
00:03:53,150 --> 00:03:58,490
Therefore, when I do strings to.

56
00:03:59,800 --> 00:04:04,420
I'm telling the computer, hey, go to the array called strings.

57
00:04:04,450 --> 00:04:08,350
You should know where that is, because underneath the hood, you stored it for me.

58
00:04:09,140 --> 00:04:12,200
And grab the third item.

59
00:04:12,200 --> 00:04:16,220
Remember, the indexes are 012.

60
00:04:16,430 --> 00:04:22,820
So grab the third item from where the array is stored on your memory.

61
00:04:23,530 --> 00:04:27,340
And if I run this, I'll get C.

62
00:04:28,190 --> 00:04:34,340
The computer is going to grab that information for me because here it stored it for me and here it's

63
00:04:34,340 --> 00:04:35,390
grabbing it for me.

64
00:04:36,080 --> 00:04:36,410
All right.

65
00:04:36,410 --> 00:04:41,480
So let's do a few more operations with arrays and see what the pros and cons are.

66
00:04:42,650 --> 00:04:47,090
Well in JavaScript we have a few methods that we can use with the race.

67
00:04:48,000 --> 00:04:54,450
One is push, which simply allows us to add something at the end of the array.

68
00:04:54,630 --> 00:04:56,610
So strings dot.

69
00:04:57,470 --> 00:04:58,250
Push.

70
00:04:59,320 --> 00:04:59,980
E.

71
00:05:01,650 --> 00:05:08,850
And if we just remove this and let's have a console log of strings.

72
00:05:09,810 --> 00:05:13,440
If I run this, I get a, b, c, d, e.

73
00:05:14,150 --> 00:05:21,110
This string push operation because it just adds it at the end of the array.

74
00:05:22,770 --> 00:05:25,830
Is an oh one operation.

75
00:05:27,910 --> 00:05:31,260
All we're doing is adding whatever item we want at the end.

76
00:05:31,270 --> 00:05:34,840
We're not looping through anything, so hopefully that makes sense.

77
00:05:34,840 --> 00:05:35,320
Why?

78
00:05:35,320 --> 00:05:37,690
That would be one that's very convenient.

79
00:05:38,080 --> 00:05:39,730
What's another method that we get?

80
00:05:40,030 --> 00:05:42,130
We can also use Pop.

81
00:05:43,490 --> 00:05:46,640
And pop is the opposite of push.

82
00:05:47,600 --> 00:05:52,850
Pop will simply mean to remove the last item.

83
00:05:53,520 --> 00:05:55,460
From the strengths from the array.

84
00:05:55,470 --> 00:06:01,620
If I click run here, you see that the E was moved if I do strings dot pop.

85
00:06:02,900 --> 00:06:03,590
Again.

86
00:06:05,400 --> 00:06:06,630
And Hit Run.

87
00:06:07,360 --> 00:06:14,680
We see that this time around we've added E, then we removed E, and then finally D to be left with

88
00:06:14,680 --> 00:06:16,090
A, B and C.

89
00:06:16,890 --> 00:06:20,580
What do you think the time complexity of this operation is?

90
00:06:22,220 --> 00:06:26,750
Once again, it's zero of one because we're not looping through anything.

91
00:06:26,750 --> 00:06:28,610
We're just removing the last item.

92
00:06:28,820 --> 00:06:33,980
And remember, our computer knows where last item is stored.

93
00:06:34,990 --> 00:06:36,430
We're simply saying.

94
00:06:37,100 --> 00:06:42,620
Go to index of, let's say, seven, the very last item and remove the bread.

95
00:06:44,780 --> 00:06:47,030
Well, let's do something interesting here now.

96
00:06:47,940 --> 00:06:51,810
What if we want to add an item at the beginning of the array?

97
00:06:52,170 --> 00:06:56,070
Maybe in here we want to add the letter X.

98
00:06:57,600 --> 00:07:02,640
Well, we have something called on shift in JavaScript.

99
00:07:03,300 --> 00:07:06,950
And depending on your language, you'll have perhaps something different.

100
00:07:06,960 --> 00:07:11,700
But the idea here is we simply do strings dot on shift.

101
00:07:12,620 --> 00:07:15,940
And by the way, you see here how Ripple died.

102
00:07:16,010 --> 00:07:19,670
It actually gives you the parameters that you can enter.

103
00:07:20,790 --> 00:07:25,050
In this case, it just says what items, which is a string should I enter?

104
00:07:25,200 --> 00:07:31,440
In our case I'll say I want to shift x, which is saying just add x at the beginning of the array.

105
00:07:31,980 --> 00:07:38,250
If I click run here we see that X has been added at the beginning of our array.

106
00:07:38,340 --> 00:07:41,670
What do you think the time complexity of this operation is?

107
00:07:41,940 --> 00:07:49,410
And by the way, as we go through data structures and because we know big o notation, isn't it pretty

108
00:07:49,410 --> 00:07:54,000
cool that we're able to think about code beyond just, Oh, I'm just doing this.

109
00:07:54,000 --> 00:07:57,630
We can think deeply about what's happening underneath the hood.

110
00:07:57,930 --> 00:08:01,530
Why might this operation be longer than this operation?

111
00:08:01,920 --> 00:08:03,360
I find that fascinating.

112
00:08:03,360 --> 00:08:08,010
And when I first understood this point, it really made me a better engineer.

113
00:08:08,010 --> 00:08:12,570
And I hope you're starting to get this aha moment for you as well, especially if this is your first

114
00:08:12,570 --> 00:08:13,860
time with data structures.

115
00:08:14,430 --> 00:08:16,030
Now on shift.

116
00:08:16,050 --> 00:08:17,520
What are we doing here?

117
00:08:17,850 --> 00:08:22,920
Well, remember, strings are essentially stored.

118
00:08:23,070 --> 00:08:25,170
If I move this to a new line.

119
00:08:26,390 --> 00:08:28,790
The computer knows that this is a zero.

120
00:08:30,420 --> 00:08:32,850
This is at index of one.

121
00:08:35,630 --> 00:08:37,400
This is an index of two.

122
00:08:38,870 --> 00:08:44,990
And this is at index of three when I add X with the on shift.

123
00:08:45,740 --> 00:08:49,280
I'm all of a sudden adding X into our array.

124
00:08:51,430 --> 00:08:55,540
But we now have to shift these numbers.

125
00:08:57,740 --> 00:09:00,560
Because the indexes are still like this.

126
00:09:00,860 --> 00:09:14,210
But this time around we have to say, okay, zero is now at X, A is now one, B is now two and C is

127
00:09:14,210 --> 00:09:18,170
that index three and DX is that index for.

128
00:09:19,970 --> 00:09:23,720
And just by me doing this, you might have seen something.

129
00:09:23,720 --> 00:09:29,480
We just iterated loop through everything and reassigned the indexes.

130
00:09:30,110 --> 00:09:38,030
And I did one, two, three, four, five moves or five operations to realign the indexes.

131
00:09:38,330 --> 00:09:42,980
And this should give you a hint that is, this operation is over.

132
00:09:43,010 --> 00:09:45,290
And depending on the size of the array.

133
00:09:46,070 --> 00:09:50,240
That's how long it's going to take to do that operation we're looping.

134
00:09:50,780 --> 00:09:59,450
So right away, we know that with the race, maybe it's not the best data structure for adding items

135
00:09:59,480 --> 00:10:00,830
at the beginning of the array.

136
00:10:01,460 --> 00:10:08,450
What if we wanted to add something in the middle of the array so we can use the method splice here?

137
00:10:08,480 --> 00:10:14,780
Let me scroll down a bit and with splice I can say strings, dot, splice.

138
00:10:15,380 --> 00:10:16,310
And again.

139
00:10:17,420 --> 00:10:19,310
I get a hint of what I can do.

140
00:10:20,110 --> 00:10:22,270
The first is the start number.

141
00:10:22,270 --> 00:10:30,400
So I want to start at index of two and remember we have this array here X, A, B, C, so we're starting

142
00:10:30,400 --> 00:10:31,540
at B.

143
00:10:33,450 --> 00:10:36,800
And the second parameter is the delete count.

144
00:10:37,870 --> 00:10:42,400
What do we want to delete or how many things from this index do we want to delete?

145
00:10:42,760 --> 00:10:44,500
In our case, we don't want to delete anything.

146
00:10:44,500 --> 00:10:45,520
We just want to add.

147
00:10:45,520 --> 00:10:49,180
So I'll say zero and then the items that we want to add.

148
00:10:49,180 --> 00:10:52,300
So let's just add a string that says Alien.

149
00:10:54,180 --> 00:10:57,960
Oh, and let's remove this X from our original array.

150
00:10:59,680 --> 00:11:00,310
That's better.

151
00:11:00,340 --> 00:11:01,450
Let's hit, run.

152
00:11:01,450 --> 00:11:02,930
And there we go.

153
00:11:02,950 --> 00:11:10,240
We have X because we've shifted A, then alien b c.

154
00:11:10,630 --> 00:11:22,420
So Splice told us go to index of 2012 where B was initially and ad alien instead of B and just shift

155
00:11:22,420 --> 00:11:23,260
things over.

156
00:11:23,680 --> 00:11:27,370
So what we've done here is if we go back to our example.

157
00:11:29,180 --> 00:11:31,430
We have the.

158
00:11:32,260 --> 00:11:32,980
X.

159
00:11:34,330 --> 00:11:35,350
In Ray.

160
00:11:36,680 --> 00:11:40,760
And we shift it these indexes of X.

161
00:11:42,010 --> 00:11:51,580
And A are still the same, but we shifted B over and said, in here I want you to add Alien.

162
00:11:54,150 --> 00:12:04,350
And we now have to go over everything and say to four alien, we want three for B, four for C and five

163
00:12:04,350 --> 00:12:05,070
for D.

164
00:12:05,460 --> 00:12:07,110
So what's our big O here?

165
00:12:07,360 --> 00:12:08,460
We don't need this comma.

166
00:12:09,880 --> 00:12:16,600
Well, our big O in this case, we did half of the operations because we changed.

167
00:12:17,490 --> 00:12:18,330
Half the array.

168
00:12:18,330 --> 00:12:24,480
We loop through half the array, so it would be zero of and divided by two.

169
00:12:24,900 --> 00:12:33,690
But remember our rules when it comes to big o, we remove constants and simplify to just oh n worst

170
00:12:33,690 --> 00:12:36,750
case it's going to be o of an operation.

171
00:12:37,700 --> 00:12:38,330
All right.

172
00:12:38,510 --> 00:12:45,080
I'm going to leave this for you so I can play around and try different methods on a race.

173
00:12:45,470 --> 00:12:53,750
But I hope you understand how they work and how there's some good things that we can do, such as accessing

174
00:12:53,750 --> 00:12:56,030
the array that is.

175
00:12:56,910 --> 00:13:00,780
Of one because it's, well, extremely fast.

176
00:13:00,780 --> 00:13:04,730
We know exactly where it is in memory.

177
00:13:04,740 --> 00:13:11,010
We can push and pop, but when it comes to shifting or splicing or even deleting because with Splice

178
00:13:11,010 --> 00:13:14,340
we can even do deletes, that's going to be zero even.

179
00:13:14,910 --> 00:13:16,680
And if we go back to our chart.

180
00:13:18,170 --> 00:13:23,750
We should now have a better understanding of why Erased lookups are extremely fast.

181
00:13:23,750 --> 00:13:24,860
We know where they are.

182
00:13:24,890 --> 00:13:25,730
We know why.

183
00:13:25,730 --> 00:13:30,920
Push adding at the end of the array is extremely fast, but why?

184
00:13:30,920 --> 00:13:36,710
Inserting and deleting might not be the best or the fastest when it comes to erase.

185
00:13:37,590 --> 00:13:39,180
But here's the thing.

186
00:13:40,190 --> 00:13:42,520
There's actually two types of arrays.

187
00:13:42,530 --> 00:13:46,880
And in the next video, we're going to talk about these two types.

188
00:13:48,140 --> 00:13:49,040
I'll see you in that one.

