1
00:00:01,130 --> 00:00:01,670
All right.

2
00:00:01,670 --> 00:00:06,950
Let's do a fun exercise to show you that you've actually just become a better engineer.

3
00:00:07,370 --> 00:00:09,170
Let's have a situation.

4
00:00:09,170 --> 00:00:13,730
Let's say you're working at Twitter and I hope everybody knows Twitter here.

5
00:00:16,830 --> 00:00:18,330
If you're working at Twitter.

6
00:00:19,190 --> 00:00:28,640
And your boss asked you to build a feature, perhaps a feature that allows anybody to click a button

7
00:00:28,640 --> 00:00:36,010
next to their name and retrieve their most recent tweet and their oldest tweet.

8
00:00:36,020 --> 00:00:42,650
So that is their very first tweet and their very latest tweet based on big notation.

9
00:00:43,490 --> 00:00:45,620
And what we know about big o notation.

10
00:00:45,890 --> 00:00:48,440
What can we assume about this problem?

11
00:00:49,830 --> 00:01:02,190
Well, without coding anything, we know that we have to find first and then find and or whatever the

12
00:01:02,190 --> 00:01:03,420
last item is.

13
00:01:03,450 --> 00:01:11,940
Now, we don't know how the tweets are stored in our database or whichever way Twitter organizes these

14
00:01:11,940 --> 00:01:12,360
things.

15
00:01:12,360 --> 00:01:20,460
But based on how they are stored, we might be able to just grab, let's say the tweets were in an array,

16
00:01:20,460 --> 00:01:25,440
so let's say cost array, and we'll have an array of tweets.

17
00:01:25,560 --> 00:01:28,380
And let's just say we have three tweets here.

18
00:01:31,190 --> 00:01:31,880
There you go.

19
00:01:31,910 --> 00:01:33,460
Just three simple tweets.

20
00:01:33,470 --> 00:01:39,500
We'll say that this one is the oldest and this one is the most recent.

21
00:01:40,010 --> 00:01:43,970
If we have an array here, we know that it's going to take us.

22
00:01:44,510 --> 00:01:46,940
If the tweets are stored in an array.

23
00:01:46,970 --> 00:01:48,860
It's going to take us well.

24
00:01:49,010 --> 00:01:54,470
If we go array zero, we get the the oldest tweet.

25
00:01:55,040 --> 00:02:00,710
And if we go array, array, dot length.

26
00:02:02,060 --> 00:02:04,790
Minus one, we get the.

27
00:02:05,660 --> 00:02:06,620
Three minus one.

28
00:02:06,620 --> 00:02:08,300
So that is two.

29
00:02:08,300 --> 00:02:10,050
That is zero one, two.

30
00:02:10,070 --> 00:02:11,180
This is going to be.

31
00:02:12,000 --> 00:02:12,810
Two.

32
00:02:13,380 --> 00:02:17,010
We're going to get Teddi, the most recent tweet.

33
00:02:17,800 --> 00:02:22,630
And because of the way our raise work, we know that both of these operations will be.

34
00:02:22,630 --> 00:02:23,260
Oh.

35
00:02:24,400 --> 00:02:25,480
One time.

36
00:02:27,840 --> 00:02:29,610
And this one will also be.

37
00:02:29,760 --> 00:02:30,360
Oh.

38
00:02:31,790 --> 00:02:36,410
One or constant time, so a total of zero two operation.

39
00:02:36,410 --> 00:02:41,900
But we again use our rulebook and simplify it to constant time.

40
00:02:42,860 --> 00:02:43,550
So that's great.

41
00:02:43,550 --> 00:02:50,270
We build a nice little simple Twitter application and we can get that information very easily.

42
00:02:50,510 --> 00:02:57,440
But now our boss comes back to us and say, Hey, I want you to compare the dates of tweets.

43
00:02:58,010 --> 00:03:00,890
So I want you to look at every tweet.

44
00:03:01,610 --> 00:03:07,250
Now, within each array, there's an object.

45
00:03:08,370 --> 00:03:10,470
With each tweet.

46
00:03:21,010 --> 00:03:27,880
Now we have and this person does not tweet a lot to three tweets in in six years.

47
00:03:28,120 --> 00:03:28,810
But.

48
00:03:29,650 --> 00:03:31,990
Now we have to compare.

49
00:03:33,010 --> 00:03:37,390
Each tweet with all the other tweets and compare their dates.

50
00:03:37,870 --> 00:03:40,630
What is the big o of this operation?

51
00:03:42,950 --> 00:03:48,980
Well, because we're comparing each item in the array with the other.

52
00:03:49,520 --> 00:03:50,980
This should sound familiar.

53
00:03:50,990 --> 00:03:59,540
We're doing nested loops, so this is going to take o and square time, at least with what we know right

54
00:03:59,540 --> 00:04:00,050
now.

55
00:04:00,860 --> 00:04:03,110
So we know that this is going to take a lot.

56
00:04:03,110 --> 00:04:08,780
And it's a person that has a lot of tweets, a lot of inputs in the array.

57
00:04:09,080 --> 00:04:12,170
This operation might cost us a lot of money at Twitter.

58
00:04:12,380 --> 00:04:16,070
So you might want to tell your boss, hmm, we might have an issue here.

59
00:04:16,070 --> 00:04:23,450
We might need to do something else, perhaps store this information in a better format or do something

60
00:04:23,450 --> 00:04:29,990
different with our program in order to avoid something that might be inefficient.

61
00:04:29,990 --> 00:04:32,420
It might be expensive for the company.

62
00:04:33,160 --> 00:04:40,000
And just by thinking like this, now you have this ability to think long term, think scalable code.

63
00:04:40,820 --> 00:04:42,740
By the way, as a fun one.

64
00:04:42,980 --> 00:04:51,850
What happens if I ask you what is the what is the operation and what's going to cost us?

65
00:04:51,860 --> 00:04:59,120
If I have a string and I do dot length here in JavaScript, that just means what is the length of our

66
00:04:59,120 --> 00:04:59,840
string?

67
00:05:00,560 --> 00:05:01,400
That is 20.

68
00:05:01,400 --> 00:05:04,910
That means we have 20 items in the string.

69
00:05:05,390 --> 00:05:09,050
What do you think the big notation of this is?

70
00:05:10,270 --> 00:05:15,730
And this is a bit of a trick question and something that you might get asked in an interview, because

71
00:05:15,730 --> 00:05:18,460
the answer to this is depends.

72
00:05:18,970 --> 00:05:21,460
It depends on the language that you're working with.

73
00:05:22,230 --> 00:05:31,500
We need to know how the method works on the string here and that's built into JavaScript and you'll

74
00:05:31,500 --> 00:05:36,940
have a different built in method for your language based on how the language is built.

75
00:05:36,960 --> 00:05:47,240
This length might go one by one and iterate over each letter and count 0123456789 ten.

76
00:05:47,250 --> 00:05:48,450
All the way until 20.

77
00:05:49,910 --> 00:05:57,530
JavaScript actually has a dot length property built in to each string.

78
00:05:57,800 --> 00:06:04,580
So for JavaScript, this length property is just a simple lookup.

79
00:06:05,320 --> 00:06:07,930
It's not a function.

80
00:06:07,930 --> 00:06:10,660
We're not running this function to calculate things.

81
00:06:10,690 --> 00:06:14,950
Instead, it's simply a property of an object.

82
00:06:15,250 --> 00:06:20,650
And because of that and again, if you're not super familiar with JavaScript, this may be a little

83
00:06:20,650 --> 00:06:28,480
bit confusing, but don't stress out the idea is that this operation in JavaScript is o constant time.

84
00:06:29,210 --> 00:06:36,680
But without knowing how your language works, you don't know how this property might work.

85
00:06:37,470 --> 00:06:40,800
How perhaps if you had a method, how that might work.

86
00:06:41,340 --> 00:06:49,470
But now you have a powerful foundation, powerful pillar to start thinking about code in a different

87
00:06:49,470 --> 00:06:49,980
way.

88
00:06:50,100 --> 00:06:57,030
Start looking at space and time as something that are valuable to us as engineers, as resources, that

89
00:06:57,030 --> 00:06:58,560
we must be careful.

90
00:06:58,560 --> 00:07:01,040
We don't have infinite amount of resources.

91
00:07:01,050 --> 00:07:06,200
We have to be careful when we code how we use up these resources.

92
00:07:06,210 --> 00:07:09,480
And that alone makes you a better engineer.

93
00:07:10,750 --> 00:07:11,860
I'll see you in the next video.

