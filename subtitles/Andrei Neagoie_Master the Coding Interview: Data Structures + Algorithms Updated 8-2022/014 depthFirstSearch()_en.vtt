WEBVTT
1
00:00:00.700 --> 00:00:01.690
Welcome back.

2
00:00:01.720 --> 00:00:07.990
Let's implement def for search using in order, pre-order and post order.

3
00:00:08.720 --> 00:00:13.220
And we're going to start off with in order first.

4
00:00:16.680 --> 00:00:18.750
Now let's name this.

5
00:00:18.750 --> 00:00:21.600
Let's call it depth first.

6
00:00:22.710 --> 00:00:27.660
Traversal or search in this case and we'll say in order.

7
00:00:28.600 --> 00:00:34.270
Now within here, we're going to use a recursion because, well, most of the time depth first search

8
00:00:34.270 --> 00:00:39.970
is implemented using recursion because it's quite simple to do so, as you'll see.

9
00:00:40.710 --> 00:00:46.470
But if you remember from implementing breath for search with recursion because we're going to be calling

10
00:00:46.470 --> 00:00:52.350
this function over and over, we can't just declare variables inside of it because they'll be reset.

11
00:00:52.590 --> 00:00:55.260
So we're going to do the same thing as we did here.

12
00:00:56.460 --> 00:01:04.110
But to keep things clean and to also show you how different ordered deaf research is work because we're

13
00:01:04.110 --> 00:01:08.550
going to have three of them we're going to have in order.

14
00:01:10.330 --> 00:01:14.020
Post order and pre order.

15
00:01:14.470 --> 00:01:19.360
I'm going to create three separate functions down here describing these.

16
00:01:20.340 --> 00:01:29.160
So all I'm going to say in here is we're going to have return to reverse in order to function.

17
00:01:29.190 --> 00:01:32.400
This will be our recursive function.

18
00:01:33.410 --> 00:01:40.070
And DFES in order method simply returns whatever gives us this result.

19
00:01:40.280 --> 00:01:47.240
So in our case we're going to add this dot root start off with our root node and we're going to give

20
00:01:47.240 --> 00:01:51.050
it a list where our answers will be entered.

21
00:01:52.460 --> 00:01:57.530
And we're going to do the same thing for post order and pre-order.

22
00:01:58.010 --> 00:02:02.300
Just naming them there are appropriate ways.

23
00:02:05.440 --> 00:02:07.540
So let's write the first function.

24
00:02:07.540 --> 00:02:08.669
Chivas.

25
00:02:08.680 --> 00:02:13.420
Oh, if I can spell traverse, post order and preorder.

26
00:02:13.470 --> 00:02:13.990
There you go.

27
00:02:14.500 --> 00:02:16.300
Let's start off with the first one.

28
00:02:16.420 --> 00:02:21.790
It's going to be a function called Traverse in order that we created up above.

29
00:02:21.820 --> 00:02:24.970
That's going to get a node.

30
00:02:26.110 --> 00:02:31.600
And some sort of data or we can call it list in this case.

31
00:02:33.650 --> 00:02:40.580
Now remember that in order is going to give us the list of nodes in order, in sorted order.

32
00:02:40.940 --> 00:02:49.100
If we look at our tree, we want to ideally have one, four, six, nine, 15, 20, one, 70.

33
00:02:49.640 --> 00:02:55.400
And the way we go about doing that is, well, first of all, we're going to check, hey, does the.

34
00:02:56.200 --> 00:02:59.830
Node have a left child if it does.

35
00:03:00.640 --> 00:03:09.520
Well, then we're going to traverse all the way down using recursion to node dot left.

36
00:03:10.490 --> 00:03:12.260
And pass data.

37
00:03:14.330 --> 00:03:14.870
Again.

38
00:03:14.870 --> 00:03:22.340
I know recursion can be tough to grasp at first, but all we're saying here is that if the node, especially

39
00:03:22.340 --> 00:03:28.850
the root node, when we first start off, if it has a left child, which nine does then.

40
00:03:29.710 --> 00:03:31.800
Traverse all the way down.

41
00:03:31.810 --> 00:03:32.740
Keep going left.

42
00:03:32.740 --> 00:03:40.000
It's going to call this function and it's going to keep going left until the node has no more children

43
00:03:40.000 --> 00:03:41.560
and we end up at one.

44
00:03:42.290 --> 00:03:51.980
When we end up at one I want you to well list dot push our answer node dot value.

45
00:03:52.840 --> 00:03:57.760
So once there's no more node left, that is, we're at one.

46
00:03:57.790 --> 00:04:03.610
Then go to the next step, which is to push this value one to the list.

47
00:04:04.000 --> 00:04:08.650
After that, we're going to do the same thing we did up here to the right.

48
00:04:09.040 --> 00:04:15.460
That is, we want to go to check the right now and say, hey, go all the way to the right until there's

49
00:04:15.460 --> 00:04:16.450
no more children.

50
00:04:17.510 --> 00:04:20.120
And now we have six.

51
00:04:20.890 --> 00:04:28.180
And we go through this function once again when we have six, there's no left child.

52
00:04:28.810 --> 00:04:35.410
And it's going to push the current node value, which is six to the rate.

53
00:04:36.290 --> 00:04:39.270
So let's actually console.log this.

54
00:04:39.290 --> 00:04:41.420
And by the way, we want to return.

55
00:04:41.420 --> 00:04:44.930
Remember, we want to return the list at the end.

56
00:04:45.980 --> 00:04:48.080
So I'm going to console.log.

57
00:04:49.470 --> 00:04:51.330
Node dot value.

58
00:04:52.500 --> 00:04:57.990
And if I click run here or they make sure this works, so I'm going to say Traverse in order.

59
00:05:00.990 --> 00:05:04.170
I'm going to comment out these two.

60
00:05:05.950 --> 00:05:10.300
And say three dot DH FS in order.

61
00:05:10.600 --> 00:05:13.210
And we're just going to run this.

62
00:05:15.570 --> 00:05:16.500
If I were on this.

63
00:05:18.610 --> 00:05:22.390
Who I get data is not defined because.

64
00:05:22.390 --> 00:05:25.240
Well, this has to be list over here.

65
00:05:25.970 --> 00:05:26.990
Pass the list.

66
00:05:27.200 --> 00:05:27.560
There you go.

67
00:05:27.590 --> 00:05:28.310
Let's run.

68
00:05:29.100 --> 00:05:29.820
And look at that.

69
00:05:29.820 --> 00:05:38.160
We have 1469, 15, 2170 and we see here the path that we took because I console locked here.

70
00:05:38.160 --> 00:05:38.640
Right.

71
00:05:38.970 --> 00:05:43.290
We have nine for one, then six.

72
00:05:44.030 --> 00:05:49.430
Then we go back to 2015, then 170.

73
00:05:50.220 --> 00:05:56.340
But because we're pushing our answers to the list after we've verified the left nodes and traversed

74
00:05:56.340 --> 00:06:01.050
all the way down, the lowest numbers get put into the list.

75
00:06:01.350 --> 00:06:10.530
Now, the beauty of this is that implementing the other two now becomes extremely easy because they're

76
00:06:10.530 --> 00:06:11.860
very similar.

77
00:06:11.880 --> 00:06:13.680
Just the order changes.

78
00:06:14.070 --> 00:06:17.970
So the next one, which is Traverse, let's say.

79
00:06:20.120 --> 00:06:21.110
Pre-order.

80
00:06:22.670 --> 00:06:29.720
The only difference now is that, well, we've got to make sure that we recursively call the right name.

81
00:06:30.810 --> 00:06:39.600
The only difference is that with pre order we want to push at the very beginning.

82
00:06:40.440 --> 00:06:53.790
Before we get to the very left note because remember in a pre order traversal we go 9416 then 2015 170.

83
00:06:54.120 --> 00:06:56.940
We start with the parent first and that's the order.

84
00:06:57.450 --> 00:07:05.820
So we push the parent first, which is nine, then we grab four, then one, then we get six, then

85
00:07:05.820 --> 00:07:07.740
20 and 15, then 170.

86
00:07:08.490 --> 00:07:09.840
Let's see if that works.

87
00:07:09.930 --> 00:07:12.930
I'm going to change this to pre order.

88
00:07:14.560 --> 00:07:16.240
Make sure I spell that right.

89
00:07:16.980 --> 00:07:17.670
Pre-order.

90
00:07:17.670 --> 00:07:18.180
Perfect.

91
00:07:18.180 --> 00:07:19.380
And then I could run.

92
00:07:20.360 --> 00:07:21.350
And look at that.

93
00:07:22.370 --> 00:07:30.800
We went 9416 2015 170 in that order and the list.

94
00:07:32.650 --> 00:07:37.270
Now here you can pause the video and see if you can implement the last one yourself.

95
00:07:37.300 --> 00:07:39.610
It should be fairly simple, right?

96
00:07:40.150 --> 00:07:40.480
All right.

97
00:07:40.480 --> 00:07:41.470
I'm going to get going.

98
00:07:42.190 --> 00:07:45.700
The post order is going to be very similar.

99
00:07:46.800 --> 00:07:48.720
Well, say Traverse.

100
00:07:49.580 --> 00:07:57.320
Post order will have the list push at the very end.

101
00:07:59.150 --> 00:08:00.740
And why is that?

102
00:08:01.040 --> 00:08:05.120
Because we check one six.

103
00:08:05.270 --> 00:08:06.650
The left and the right.

104
00:08:07.810 --> 00:08:12.980
And then the top four, then 15, one, 17, 20, then nine.

105
00:08:14.160 --> 00:08:18.210
So the order, as the name suggests, is post is at the end.

106
00:08:18.750 --> 00:08:21.810
So if I change this to post order now.

107
00:08:24.180 --> 00:08:25.530
And I hit run.

108
00:08:26.010 --> 00:08:30.840
We have the wrong order because I need to make sure I change the names.

109
00:08:30.840 --> 00:08:31.870
So it's recursive.

110
00:08:31.890 --> 00:08:37.950
So we say traverse horse oder, post order, post order, not pre order.

111
00:08:37.950 --> 00:08:40.679
And if I had run, that's much better.

112
00:08:40.679 --> 00:08:44.670
We go 941.

113
00:08:45.410 --> 00:08:47.170
And we start adding this to the list.

114
00:08:47.180 --> 00:08:55.940
I go 164, then 15, 170, 20, and then nine.

115
00:08:57.550 --> 00:08:59.710
And if we print all of these out.

116
00:09:00.650 --> 00:09:01.580
I click run.

117
00:09:02.620 --> 00:09:06.040
Well, let's remove the console logs from here.

118
00:09:09.780 --> 00:09:12.420
And just console.log each one of these.

119
00:09:17.570 --> 00:09:18.500
If I had run.

120
00:09:19.670 --> 00:09:20.660
There's our logs.

121
00:09:20.660 --> 00:09:21.650
We have the.

122
00:09:22.660 --> 00:09:23.920
Post order.

123
00:09:24.590 --> 00:09:29.720
We have the pre order and then we have the in order.

124
00:09:30.290 --> 00:09:35.000
All of them are depth for searches just on in different orders.

125
00:09:36.330 --> 00:09:41.280
Now I'll leave the show for you to explore here because it is recursion.

126
00:09:41.880 --> 00:09:48.210
It might take a bit of time to get your mind wrapped around it, but you see here that it wasn't that

127
00:09:48.210 --> 00:09:49.110
difficult.

128
00:09:49.940 --> 00:09:56.960
We implemented breath for search both iteratively and recursively, and we also use depth for a search

129
00:09:56.960 --> 00:09:58.910
in order, post order and pre-order.

130
00:10:00.930 --> 00:10:06.000
And if you think about it, it starts to become more and more clear, especially when it comes to death

131
00:10:06.110 --> 00:10:06.810
research.

132
00:10:06.840 --> 00:10:13.050
All we're doing is we're checking the left element and the right element or the right note.

133
00:10:13.050 --> 00:10:16.620
So that is the left reference and right reference of each note.

134
00:10:17.100 --> 00:10:23.610
And sure, we're doing these actions in different order sometimes depending on which ordering strategy

135
00:10:23.610 --> 00:10:24.360
we choose.

136
00:10:25.330 --> 00:10:28.280
But we're still doing the same three things.

137
00:10:28.300 --> 00:10:35.050
We're checking the left, checking the right, or we're just pushing a node to our list, to our answer.

138
00:10:35.590 --> 00:10:40.930
And for those of you that may have realized, we're using a stack data structure right here with the

139
00:10:40.930 --> 00:10:49.870
recursion, each of these functions are added to our call stack and we'll start to return as they reach

140
00:10:49.870 --> 00:10:50.590
the end.

141
00:10:51.790 --> 00:10:55.780
That is, there's no more left and right children.

142
00:10:56.380 --> 00:11:02.500
And this is important to understand, because it shows the space, complexity of depth for search,

143
00:11:02.830 --> 00:11:09.820
the amount of space that we need in terms of memory, unlike breath for search, which used the Q.

144
00:11:10.990 --> 00:11:17.680
The height of the tree will tell us how much memory we'll need because the height of the tree will match

145
00:11:17.680 --> 00:11:23.560
the deepest recursive function, and that's what's going to be added to the stack as memory.

146
00:11:23.560 --> 00:11:27.220
So our memory consumption is o of height of the tree.

147
00:11:28.040 --> 00:11:33.290
Which will give us the worst case scenario when using depth for a search.

148
00:11:34.510 --> 00:11:38.230
So now that you understand better how these.

149
00:11:39.190 --> 00:11:41.380
Searches or traversal work.

150
00:11:41.950 --> 00:11:46.930
I encourage you to go step by step code your own.

151
00:11:46.960 --> 00:11:50.440
See if you can add this to your tree data structure as well.

152
00:11:50.590 --> 00:11:53.920
Because the beauty is once you know how this works.

153
00:11:53.950 --> 00:11:57.280
You also just learn how to traverse through a graph.

154
00:11:59.490 --> 00:12:00.540
Congratulations.

155
00:12:00.540 --> 00:12:02.190
And I'll see you in the next video.

