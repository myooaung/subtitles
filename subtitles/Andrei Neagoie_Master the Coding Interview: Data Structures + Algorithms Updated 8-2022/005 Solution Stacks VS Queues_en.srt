1
00:00:00,500 --> 00:00:01,370
Welcome back.

2
00:00:01,890 --> 00:00:03,690
How did you do in that exercise?

3
00:00:04,420 --> 00:00:06,040
Let's have a look at the solution.

4
00:00:06,860 --> 00:00:08,600
Let's start off with stacks.

5
00:00:09,610 --> 00:00:14,410
I said that with stacks they can be implemented using arrays or linked lists.

6
00:00:14,620 --> 00:00:19,510
In this case, both arrays and link lists are going to work fairly well.

7
00:00:19,900 --> 00:00:24,400
In the end, it depends on what you prefer and what your priorities are.

8
00:00:24,430 --> 00:00:30,790
And by this point, you should understand the pros and cons of arrays and pros and cons of linked lists.

9
00:00:30,790 --> 00:00:35,410
So we don't need to go into much detail since we've talked about it before.

10
00:00:35,410 --> 00:00:42,970
But one major thing is that arrays allow something called cache locality, which makes them technically

11
00:00:42,970 --> 00:00:50,260
faster when accessing its items in memory because they're right next to each other versus a linked list

12
00:00:50,260 --> 00:00:53,740
that has them scattered all over memory.

13
00:00:54,100 --> 00:01:01,720
And also link lists have extra memory associated with them because we have to hold on to those pointers.

14
00:01:01,780 --> 00:01:06,850
But on the other hand, they have more dynamic memory, right?

15
00:01:07,180 --> 00:01:15,400
And we can keep adding things to the list versus an array where you have either a static array or dynamic

16
00:01:15,400 --> 00:01:17,050
array that has certain amount of memory.

17
00:01:17,050 --> 00:01:22,930
And as soon as it it's about to reach its limit, it's going to have to double up that memory and create

18
00:01:22,930 --> 00:01:25,060
new space for it somewhere in memory.

19
00:01:25,420 --> 00:01:31,960
So you have to think about what sort of operations you're going to do and why your priorities are to

20
00:01:31,960 --> 00:01:33,250
decide which one you want.

21
00:01:33,250 --> 00:01:34,810
But they could both work.

22
00:01:35,200 --> 00:01:40,150
And we're going to build a stack data structure with both of these coming up.

23
00:01:41,220 --> 00:01:44,940
Choose, on the other hand, is a very simple answer.

24
00:01:45,060 --> 00:01:51,930
You would never want to build it with an array, or if you do well, that's not necessarily a good idea.

25
00:01:51,930 --> 00:01:55,410
And ideally you want to implement them with linked lists.

26
00:01:55,500 --> 00:01:56,550
Why is that?

27
00:01:57,170 --> 00:02:02,140
Well, if you remember, arrays have indexes associated with them.

28
00:02:02,150 --> 00:02:11,420
So if we had Matt here, then we have joy, then we have Samir, then we have Pavel that are in queue.

29
00:02:11,450 --> 00:02:19,010
If this was in an array data structure and Matt was the first in line and we need to remove Matt from

30
00:02:19,010 --> 00:02:19,610
the queue.

31
00:02:19,610 --> 00:02:22,100
Well once we remove Matt.

32
00:02:23,410 --> 00:02:27,190
We now need to shift the indexes over.

33
00:02:27,190 --> 00:02:34,900
So we have to go one by one and say, all right, Joy is now here.

34
00:02:37,300 --> 00:02:38,410
At Index of zero.

35
00:02:38,410 --> 00:02:44,860
Samier is at the index of one and Pavel is at index of two and there's nothing at index of three.

36
00:02:44,890 --> 00:02:47,050
We just shifted those arrays.

37
00:02:47,050 --> 00:02:56,650
It's an o of NN operation, a linear type versus something like a linked list where all we have is a

38
00:02:56,650 --> 00:03:02,710
pointer to the head and then perhaps we have a pointer to the tail.

39
00:03:03,510 --> 00:03:07,960
And all we need to do is say head well is Matt.

40
00:03:07,980 --> 00:03:15,780
We want to remove Matt and joy is going to be the head and nothing else changes.

41
00:03:16,620 --> 00:03:19,650
And that's an O of one operation or constant time.

42
00:03:20,160 --> 00:03:25,800
I hope you are able to get the answer otherwise, at least now you know, and this is a very common

43
00:03:25,800 --> 00:03:30,210
interview question that you might get asked that hopefully you have an answer to now.

44
00:03:31,030 --> 00:03:32,080
But enough talking.

45
00:03:32,080 --> 00:03:35,590
I think it's time for us to build these data structures from the ground up.

46
00:03:36,350 --> 00:03:37,460
I'll see in the next video.

