1
00:00:00,740 --> 00:00:08,029
Now we learned about binary heaps and we mentioned that unlike a binary search tree, there is no order

2
00:00:08,029 --> 00:00:09,740
from left to right.

3
00:00:09,770 --> 00:00:15,230
This 33 and 77, we can swap them and it will still be a binary heap.

4
00:00:16,750 --> 00:00:22,870
The beauty of binary heaps is that they take up the least amount of space possible because it's always

5
00:00:22,870 --> 00:00:25,480
left to right insertion, as we just saw.

6
00:00:26,020 --> 00:00:29,670
So there's no concept of an unbalanced binary heap.

7
00:00:29,680 --> 00:00:35,680
We don't have to rebalance it like a binary search tree because of this, because they do left to right

8
00:00:35,680 --> 00:00:42,250
insertion, as we saw in the previous video, they preserve this order of insertion.

9
00:00:43,010 --> 00:00:44,670
Which is pretty amazing, right?

10
00:00:44,690 --> 00:00:51,950
And you can actually implement binary heaps using arrays versus what we did before with binary search

11
00:00:51,950 --> 00:00:53,720
trees where we used nodes.

12
00:00:54,560 --> 00:00:59,330
So the only guarantee that binary heap gives us is what I mentioned.

13
00:00:59,330 --> 00:01:02,330
The parent is always greater than the children.

14
00:01:03,050 --> 00:01:10,760
Now, besides being memory efficient and just compact because it's always a complete binary tree.

15
00:01:11,180 --> 00:01:16,130
Binary heaps are really, really useful for things such as priority queues.

16
00:01:16,850 --> 00:01:19,070
And you might be asking yourself priority.

17
00:01:19,070 --> 00:01:21,230
Q Didn't we just learn about cues?

18
00:01:21,230 --> 00:01:23,120
And isn't that the same data structure?

19
00:01:23,630 --> 00:01:30,160
Well, no, because with Q's we just assume that it was first in first up.

20
00:01:30,170 --> 00:01:31,790
You were the first person in line.

21
00:01:31,790 --> 00:01:36,710
You should get to go first into the roller coaster or the movies priority.

22
00:01:36,710 --> 00:01:38,210
Q Is something different?

23
00:01:38,240 --> 00:01:42,380
It is a type of data where each element has a priority.

24
00:01:43,250 --> 00:01:49,130
And elements with a higher priority are served before elements with lower priorities.

25
00:01:49,820 --> 00:01:52,130
You can think of this as a club.

26
00:01:52,130 --> 00:01:59,780
Let's say we have a nightclub that is very, very popular and there's a long lineup and we let some

27
00:01:59,780 --> 00:02:00,530
people in.

28
00:02:01,130 --> 00:02:02,330
Everybody's happy.

29
00:02:02,330 --> 00:02:06,250
But then all of a sudden, Oh, we have some VIPs that showed up.

30
00:02:06,260 --> 00:02:11,210
Well, they pay a lot more money than the other customers, so we're going to let them in first.

31
00:02:11,210 --> 00:02:18,140
So now we have a different priority where even though they arrived later, they get to go in.

32
00:02:18,260 --> 00:02:19,970
They have higher priority.

33
00:02:20,790 --> 00:02:23,610
Another good example is an emergency room.

34
00:02:24,120 --> 00:02:31,170
You want to treat the patients that have the most severe symptoms or conditions, right.

35
00:02:31,680 --> 00:02:37,470
Another way to think about it is let's say we're lining up to get into an airplane.

36
00:02:38,150 --> 00:02:45,140
We have the first person coming in, lining up, and then all of a sudden the captain shows up.

37
00:02:45,140 --> 00:02:50,630
And because the captain should get on the airplane before a normal passenger.

38
00:02:52,130 --> 00:02:59,930
The Captain gets now put as priority as the root note because the value is higher, or at least in this

39
00:02:59,930 --> 00:03:02,240
case, the value is higher than the passenger.

40
00:03:02,480 --> 00:03:07,640
So let's say A now their passenger comes on because we're doing left to right insertion.

41
00:03:07,640 --> 00:03:10,330
We put the passenger to the right.

42
00:03:10,340 --> 00:03:13,720
So now we know we're going to let the captain go in.

43
00:03:13,730 --> 00:03:16,730
Then the first passenger, then the second passenger.

44
00:03:17,000 --> 00:03:21,100
Next we have a stewardess that came in.

45
00:03:21,110 --> 00:03:26,210
He or she should get to go before the passengers, but not before the captain.

46
00:03:26,690 --> 00:03:35,930
Well, in that case, once again, we place the stewardess below the captain, but to the right or to

47
00:03:35,930 --> 00:03:37,370
the left of the passenger.

48
00:03:38,100 --> 00:03:40,560
And then we have another passenger that comes.

49
00:03:40,560 --> 00:03:42,600
We do left to right insertion.

50
00:03:42,600 --> 00:03:44,580
We see a right spot down here.

51
00:03:44,580 --> 00:03:46,920
So we place them down here.

52
00:03:48,020 --> 00:03:55,280
So we see how everything gets balanced, which is nice, but it's also really, really easy for us to

53
00:03:55,280 --> 00:03:58,580
now let people into the airplane because we know the order.

54
00:03:58,580 --> 00:04:04,340
We go from the top, then left, then right, then left, then right, left, right.

55
00:04:04,340 --> 00:04:06,830
And we just keep going, keep going, keep going.

56
00:04:07,400 --> 00:04:10,100
We know the priority very easily.

57
00:04:10,310 --> 00:04:13,790
I'm sure you see where this might be useful in a lot of situation.

58
00:04:14,810 --> 00:04:18,320
To review, we learned what binary search trees are.

59
00:04:18,350 --> 00:04:24,740
They're great, but sometimes binary heaps or priority queues are even better.

60
00:04:24,920 --> 00:04:31,700
Although searching through a binary heap is a lot slower than a binary search tree, you have an idea

61
00:04:31,700 --> 00:04:36,530
of priority because insertion is done in order.

62
00:04:37,100 --> 00:04:39,170
So you know who should be first?

63
00:04:39,200 --> 00:04:40,130
Who should be second?

64
00:04:40,130 --> 00:04:41,150
Who should be third?

65
00:04:42,000 --> 00:04:48,420
And although we might have to bubble up inserts every once in a while if there's somebody that is has

66
00:04:48,420 --> 00:04:49,600
really high priority.

67
00:04:49,620 --> 00:04:53,640
Most of the time you get really fast answers with binary heaps.

68
00:04:54,270 --> 00:05:00,210
And as we mentioned, lookups are slow, but you want to use binary heaps when you're just interested

69
00:05:00,210 --> 00:05:06,840
in finding the max or finding the minimum if it's a min heap and a lot of the times in binary heaps

70
00:05:06,840 --> 00:05:14,490
and priority, cuz you have a method called find max or find min that is o of one because you know right

71
00:05:14,490 --> 00:05:18,720
away that the top root node is the max or the minimum.

72
00:05:18,840 --> 00:05:22,320
So for those operations it's really, really fast and great.

73
00:05:23,180 --> 00:05:24,170
And there you have it.

74
00:05:24,650 --> 00:05:25,910
I'll see you in the next video.

75
00:05:26,360 --> 00:05:26,990
Bye bye.

