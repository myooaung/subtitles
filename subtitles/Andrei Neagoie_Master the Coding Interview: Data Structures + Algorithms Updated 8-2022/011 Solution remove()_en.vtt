WEBVTT
1
00:00:00.720 --> 00:00:01.620
Welcome back.

2
00:00:01.920 --> 00:00:04.350
How was the remove method?

3
00:00:04.590 --> 00:00:06.060
It was pretty tough, wasn't it?

4
00:00:06.300 --> 00:00:09.290
Now, I don't expect you to be able to get this.

5
00:00:09.300 --> 00:00:13.320
Even for me, it took quite a lot of time to get this working.

6
00:00:13.530 --> 00:00:16.420
And I'm going to give you another chance to finish it if you want.

7
00:00:16.440 --> 00:00:22.890
I have my code minimized here just to show you the if statements and the steps that I'm taking.

8
00:00:22.890 --> 00:00:25.190
So you could always pause this video.

9
00:00:25.200 --> 00:00:28.620
But let me just go over the steps I'm going to take.

10
00:00:28.980 --> 00:00:37.770
And usually I like coding step by step, but when it comes to this function, it's really, really hard

11
00:00:37.770 --> 00:00:44.160
to go step by step when you're not coding yourself or you don't have a diagram to point to and show.

12
00:00:44.160 --> 00:00:48.150
So I'm going to leave the code for you so you can implement it on your own.

13
00:00:48.150 --> 00:00:53.970
And actually, like I always recommend, draw it out with a piece of paper to understand what's going

14
00:00:53.970 --> 00:00:54.360
on.

15
00:00:54.930 --> 00:01:01.110
Otherwise, if I just coded this along, it would be a 30 minute video of you getting bored and then

16
00:01:01.110 --> 00:01:03.180
you're not going to have fun with data structures anymore.

17
00:01:03.180 --> 00:01:04.500
And we don't want that.

18
00:01:05.660 --> 00:01:12.140
So all we're doing is, well, if we remove, we're going to check if there's anything in the root.

19
00:01:12.560 --> 00:01:13.720
If there isn't.

20
00:01:13.730 --> 00:01:15.020
Well, the trees empty.

21
00:01:15.020 --> 00:01:16.400
There's nothing to remove.

22
00:01:16.430 --> 00:01:17.210
We're going to return.

23
00:01:17.210 --> 00:01:17.810
False.

24
00:01:19.110 --> 00:01:25.560
Otherwise we're going to grab the current node as this route first and then we do something new here

25
00:01:25.560 --> 00:01:26.970
that we haven't seen before.

26
00:01:27.540 --> 00:01:34.380
We declare a new variable called Parent Node, and this is something you may have realized as you coded

27
00:01:34.380 --> 00:01:35.180
this along.

28
00:01:35.190 --> 00:01:45.000
We need a reference to the parent because if we remove something from here such as 14, well, we need

29
00:01:45.000 --> 00:01:52.770
to before we get to one, get a reference of 14 so that when we get to one, we have access to 30 so

30
00:01:52.770 --> 00:01:55.170
that we can link 30 to 1.

31
00:01:56.100 --> 00:02:04.140
So if we go back here now that I have paranoid variable and I do my loop to check if the value is less

32
00:02:04.140 --> 00:02:07.890
than the current node, in which case I'll go left.

33
00:02:08.740 --> 00:02:14.350
And this should be familiar, but this time I'm also keeping track of the parent node.

34
00:02:15.330 --> 00:02:21.840
And otherwise, if we need to go to the right, well, then we go to the right, but also keep track

35
00:02:21.840 --> 00:02:23.190
of the parent node.

36
00:02:23.340 --> 00:02:26.520
Now, this is the interesting part.

37
00:02:27.540 --> 00:02:33.150
We're looping through everything here, and nothing's too crazy until we get to a match.

38
00:02:33.630 --> 00:02:39.240
Once we get to a match and we find the current node that we want to delete.

39
00:02:40.140 --> 00:02:42.600
We have a match, we need to get to work.

40
00:02:42.600 --> 00:02:44.670
And we have three options here.

41
00:02:45.380 --> 00:02:51.890
The first option is that the current node has no right child.

42
00:02:53.690 --> 00:02:56.300
If the current node has no right child.

43
00:02:56.300 --> 00:03:01.070
Let's have 55 as an example or let's do 14 as an example.

44
00:03:01.430 --> 00:03:03.650
If I remove 14.

45
00:03:10.570 --> 00:03:11.440
You saw that?

46
00:03:11.440 --> 00:03:19.720
All we did was we remove 14, but we kept a reference to the parent node and just moved one up.

47
00:03:20.450 --> 00:03:21.980
That was a nice and easy.

48
00:03:23.110 --> 00:03:26.920
And in here with option one, that's really all we do.

49
00:03:27.310 --> 00:03:29.980
We first make sure that the parent node.

50
00:03:30.950 --> 00:03:32.330
Doesn't equal to no.

51
00:03:32.360 --> 00:03:35.180
That means we're modifying the root node.

52
00:03:35.210 --> 00:03:39.140
Otherwise, the root valuable variable gets updated to our current node.

53
00:03:39.830 --> 00:03:43.910
Otherwise, if parent is greater than the current value.

54
00:03:45.150 --> 00:03:49.080
Then make current left child a child or the parent.

55
00:03:49.290 --> 00:03:55.110
If parent is less than the current value, make left child or right child of the parent.

56
00:03:55.320 --> 00:04:00.870
Again, I know this is confusing and like I said, this is something that you might have to go on your

57
00:04:00.870 --> 00:04:01.120
own.

58
00:04:01.140 --> 00:04:06.300
I'll leave comments out here for you so you can actually play around with it and play around with visual.

59
00:04:06.300 --> 00:04:08.130
Go so you understand what's happening.

60
00:04:09.370 --> 00:04:10.720
So that's the first option.

61
00:04:10.720 --> 00:04:14.390
If that's the case, then do that.

62
00:04:14.410 --> 00:04:18.310
If the right child if we have a right child.

63
00:04:18.310 --> 00:04:21.459
But that right child doesn't have a left child.

64
00:04:22.390 --> 00:04:27.790
Let's find an example that has a so we have a right child that doesn't have a left child.

65
00:04:27.790 --> 00:04:29.210
So that is 54.

66
00:04:29.230 --> 00:04:31.960
What happens when we remove 54?

67
00:04:35.160 --> 00:04:36.270
If I click on this.

68
00:04:39.190 --> 00:04:39.860
54.

69
00:04:39.880 --> 00:04:40.930
Gets removed.

70
00:04:42.130 --> 00:04:46.180
And we just place 55 instead of 54 now.

71
00:04:48.640 --> 00:04:55.720
So in that case we go again check of the parent node is non null so that we have to replace the root

72
00:04:55.720 --> 00:04:56.260
node.

73
00:04:56.290 --> 00:05:01.720
Otherwise we go through similar steps to reassign the node.

74
00:05:05.090 --> 00:05:07.490
What about the last option?

75
00:05:07.520 --> 00:05:07.970
Right.

76
00:05:07.970 --> 00:05:09.890
Child that has a left child.

77
00:05:09.950 --> 00:05:13.310
So if we go here, we have a right child.

78
00:05:13.430 --> 00:05:17.240
Let's say if we want to delete 30, that has a left child, 38.

79
00:05:17.270 --> 00:05:19.640
So if we want to delete 30.

80
00:05:22.920 --> 00:05:23.850
And hit go.

81
00:05:26.980 --> 00:05:30.610
We still traverse until we get to the left.

82
00:05:30.610 --> 00:05:33.880
And then, oh, boy, we do a bit of a magic.

83
00:05:34.760 --> 00:05:35.570
This.

84
00:05:36.280 --> 00:05:42.040
We'll require you to read through the code and I've left some nice comments for you so that it makes

85
00:05:42.040 --> 00:05:42.430
sense.

86
00:05:42.430 --> 00:05:50.470
But we're essentially finding the right child's leftmost child and looping through this, changing the

87
00:05:50.470 --> 00:05:52.390
sub trees of the tree.

88
00:05:52.570 --> 00:05:58.780
Like I said, this is quite a bit advanced and really hard to explain just on the screen.

89
00:05:58.780 --> 00:06:05.030
So I do recommend if you weren't able to get the remove function to go through this step by step.

90
00:06:05.050 --> 00:06:11.050
I'll link to the code right in the resources so you can play around with this and see that it works.

91
00:06:11.050 --> 00:06:14.730
But to check that remove does in fact work.

92
00:06:14.740 --> 00:06:19.000
Let's say I'll remove zero from this list.

93
00:06:19.000 --> 00:06:23.710
If I click run I get undefined because there's nothing to remove.

94
00:06:23.710 --> 00:06:27.430
But if I remove, let's say 170 and I click run.

95
00:06:28.700 --> 00:06:29.630
I get true.

96
00:06:29.630 --> 00:06:30.710
And if I.

97
00:06:32.880 --> 00:06:36.000
Traverse our list and try and grab our tree now.

98
00:06:37.800 --> 00:06:39.480
Let's open up developer tools.

99
00:06:45.370 --> 00:06:47.350
Pace this press center.

100
00:06:47.500 --> 00:06:50.590
And now if we go to nine.

101
00:06:52.120 --> 00:06:52.930
20.

102
00:06:53.230 --> 00:06:58.890
And we see that the right node is now empty where 170 should have been.

103
00:06:58.900 --> 00:07:02.830
So we're able to delete the node successfully.

104
00:07:03.920 --> 00:07:05.150
That's enough for now.

105
00:07:05.180 --> 00:07:08.200
You can play around with the remove method if you want.

106
00:07:08.210 --> 00:07:10.440
You can try and code it yourself.

107
00:07:10.460 --> 00:07:11.960
It will take a bit of time.

108
00:07:12.500 --> 00:07:13.670
I know I keep saying this.

109
00:07:13.670 --> 00:07:19.520
I do encourage you not to get disappointed if the remove method was really difficult.

110
00:07:20.280 --> 00:07:24.870
I didn't really want to include it in the course because it is overly complex and not something you

111
00:07:24.870 --> 00:07:27.690
want to get too worried about when it comes to an interview.

112
00:07:27.750 --> 00:07:30.270
But I thought some of you might be interested in it.

113
00:07:30.270 --> 00:07:36.060
Just make sure that it's not something that discourages you as long as you can do the inserts and lookups.

114
00:07:36.060 --> 00:07:39.540
That's what matters for interviews in the next one.

115
00:07:39.930 --> 00:07:40.530
Bye bye.

