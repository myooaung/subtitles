WEBVTT
1
00:00:00.730 --> 00:00:01.630
Welcome back.

2
00:00:01.990 --> 00:00:05.950
Let's try and implement the lookup function or the search function.

3
00:00:05.950 --> 00:00:11.290
We want to check if an item or a node exists in our tree.

4
00:00:12.360 --> 00:00:14.220
Let's see how we would go about this.

5
00:00:14.850 --> 00:00:19.910
The first thing I would want to do is to check if there is such a thing as a root node.

6
00:00:19.920 --> 00:00:20.940
If it's.

7
00:00:21.660 --> 00:00:22.460
Empty.

8
00:00:22.470 --> 00:00:23.490
So I'm using.

9
00:00:23.490 --> 00:00:25.240
I could have done this route.

10
00:00:25.290 --> 00:00:29.460
Equals equals equals null to check if the route is empty.

11
00:00:29.460 --> 00:00:32.070
Or I can use the exclamation mark in JavaScript.

12
00:00:33.880 --> 00:00:40.460
And we'll just say return false, because if the root doesn't exist, then it doesn't really matter.

13
00:00:40.480 --> 00:00:43.480
We're not going to find that node.

14
00:00:44.630 --> 00:00:45.470
Otherwise.

15
00:00:46.530 --> 00:00:49.470
We're going to say once again, let current node.

16
00:00:50.890 --> 00:00:53.290
Equal to this route.

17
00:00:53.890 --> 00:00:56.050
Very similar to what we did above.

18
00:00:56.290 --> 00:00:57.370
Remember over here?

19
00:00:58.710 --> 00:01:03.660
And you'll notice some similarities with what we did when we did the insert.

20
00:01:03.690 --> 00:01:12.420
We still need to traverse through our tree, but instead our wild loop is going to stop whenever the

21
00:01:12.420 --> 00:01:19.560
current node no longer exists or we no longer have a node to go through.

22
00:01:19.560 --> 00:01:25.350
Because once we've gone through our binary search tree and it's null, that means we didn't find what

23
00:01:25.350 --> 00:01:26.220
we're looking for.

24
00:01:27.030 --> 00:01:30.030
So in this case, I'm simply going to say if.

25
00:01:31.080 --> 00:01:36.330
The value that we're looking for is less than the current node value.

26
00:01:39.660 --> 00:01:40.870
In that case.

27
00:01:40.920 --> 00:01:50.370
Current node is going to equal current node dot left because we now want to go left.

28
00:01:50.370 --> 00:01:54.300
If the value is less than the current node value, that means it's not the same.

29
00:01:54.300 --> 00:01:55.880
It's not the node we're looking for.

30
00:01:55.890 --> 00:02:02.310
So go left because that's where I can find something that might be less than the current node otherwise.

31
00:02:02.310 --> 00:02:06.990
And we'll use an else if statement here which says another condition.

32
00:02:06.990 --> 00:02:16.680
So if that doesn't match, if the current if the value is greater than the current node dot value.

33
00:02:17.250 --> 00:02:18.640
What do you think we do here?

34
00:02:18.660 --> 00:02:20.670
Well, we go to the right.

35
00:02:20.670 --> 00:02:25.440
So we're going to say current node is now going to be current node dot.

36
00:02:25.440 --> 00:02:26.010
Right.

37
00:02:26.400 --> 00:02:28.680
So we can keep checking to the right of us.

38
00:02:29.970 --> 00:02:32.550
And then finally else if.

39
00:02:33.840 --> 00:02:36.060
That is another condition.

40
00:02:36.060 --> 00:02:44.970
And we can say if current node is value equals the actual value that we're looking for.

41
00:02:45.330 --> 00:02:46.680
That means we got a match.

42
00:02:46.680 --> 00:02:48.600
That means that node exists.

43
00:02:48.600 --> 00:02:51.870
So we're just going to return the current node.

44
00:02:52.460 --> 00:02:53.450
Nice and simple.

45
00:02:53.810 --> 00:03:00.020
And then finally, because we're not returning anything, we're just looping through the wild loop until

46
00:03:00.020 --> 00:03:01.310
we find the current node.

47
00:03:02.180 --> 00:03:07.820
Where we return the current node or occur node becomes null because we cannot find anything.

48
00:03:08.630 --> 00:03:11.990
If we don't find anything, just return false.

49
00:03:12.380 --> 00:03:19.670
The only way we return something other than false is when we find our note with the matching value.

50
00:03:20.090 --> 00:03:21.320
So let's see this.

51
00:03:21.350 --> 00:03:27.380
If I now run tree dot, look up.

52
00:03:28.330 --> 00:03:34.130
Nine and I'm going to comment this out because we don't need to check that our tree is being made.

53
00:03:34.150 --> 00:03:35.230
If I click Run.

54
00:03:35.980 --> 00:03:36.660
There you go.

55
00:03:36.670 --> 00:03:42.280
I get the nine node that has reference to all the other nodes beneath it.

56
00:03:42.760 --> 00:03:47.080
If I look up 90, I'll get false because it doesn't exist.

57
00:03:47.110 --> 00:03:47.980
What about 20?

58
00:03:47.980 --> 00:03:48.940
Which exists?

59
00:03:49.650 --> 00:03:50.040
Yep.

60
00:03:50.040 --> 00:03:50.970
We found 20.

61
00:03:51.000 --> 00:03:53.130
What about 170?

62
00:03:54.480 --> 00:03:54.840
Yeah.

63
00:03:54.840 --> 00:03:56.190
We found 170.

64
00:03:56.190 --> 00:04:01.110
It's a node, but has no left and right references because it's a leaf node.

65
00:04:01.110 --> 00:04:06.060
And then finally, 171 is false because it doesn't exist.

66
00:04:07.110 --> 00:04:08.790
Well done getting this far.

67
00:04:08.820 --> 00:04:12.270
Hope you're able to implement your own binary search tree.

68
00:04:12.750 --> 00:04:14.200
Once you get the hang of it.

69
00:04:14.220 --> 00:04:16.170
It's really not that bad.

70
00:04:17.560 --> 00:04:23.470
At the end of the day, each line should make sense and traversing a tree should make sense to you by

71
00:04:23.470 --> 00:04:23.950
now.

72
00:04:24.040 --> 00:04:32.920
We also understand why we have big o of log n, although we have loops here, like while loops, we're

73
00:04:32.920 --> 00:04:35.650
not actually iterating through every single node.

74
00:04:35.740 --> 00:04:41.020
We're only iterating, using divide and conquer something that you'll hear a lot of.

75
00:04:41.050 --> 00:04:46.900
Divide and conquer simply means we're dividing up so that we don't visit all the nodes.

76
00:04:46.900 --> 00:04:51.130
Each node that we visit, we make a decision to go left or right.

77
00:04:52.220 --> 00:04:53.270
I'll see in the next one.

78
00:04:53.690 --> 00:04:54.320
Bye bye.

