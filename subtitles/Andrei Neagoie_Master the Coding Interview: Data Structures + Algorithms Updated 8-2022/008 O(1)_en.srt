1
00:00:01,400 --> 00:00:02,300
Welcome back.

2
00:00:02,480 --> 00:00:05,150
We just learned our first notation.

3
00:00:05,810 --> 00:00:06,160
O.

4
00:00:06,250 --> 00:00:07,070
O n.

5
00:00:08,060 --> 00:00:09,650
Or linear time.

6
00:00:09,650 --> 00:00:13,550
And we see here that we have a few others remaining.

7
00:00:14,090 --> 00:00:16,129
So let's talk about the next one.

8
00:00:16,520 --> 00:00:22,640
Another very common big o notation that you're going to see what happens if we have a function like

9
00:00:22,640 --> 00:00:23,150
this.

10
00:00:24,630 --> 00:00:30,900
A function that says compressed first box that receives an array of boxes.

11
00:00:32,049 --> 00:00:39,000
And this function simply has console.log boxes zero.

12
00:00:39,010 --> 00:00:44,740
So that is it's logging out just the first item in the box.

13
00:00:45,310 --> 00:00:49,210
What would you say the big o of this function is?

14
00:00:50,240 --> 00:00:54,650
How many steps or operations does this function take?

15
00:00:54,650 --> 00:01:01,820
If the box is increased from zero to maybe ten to maybe 100 to 100000?

16
00:01:02,970 --> 00:01:04,140
What would happen here?

17
00:01:04,650 --> 00:01:05,760
You ready for the answer?

18
00:01:06,480 --> 00:01:07,770
Well, this.

19
00:01:09,140 --> 00:01:11,570
Is what we call constant time.

20
00:01:11,690 --> 00:01:13,910
It's an O of one.

21
00:01:14,690 --> 00:01:21,110
That is, no matter how many times the boxes increase here or however many boxes we have, were always

22
00:01:21,110 --> 00:01:24,440
just grabbing the first item in the array.

23
00:01:25,420 --> 00:01:33,070
If we look at this with an example, if we had an array of boxes here and we run it through the function,

24
00:01:33,070 --> 00:01:36,820
that just takes the first item in the array.

25
00:01:37,580 --> 00:01:40,350
Well, the number of operations is one.

26
00:01:40,370 --> 00:01:43,400
No matter how big this the number of boxes are.

27
00:01:43,430 --> 00:01:45,530
We're only doing one thing.

28
00:01:46,380 --> 00:01:48,510
So it's a constant time.

29
00:01:49,890 --> 00:01:52,980
If we look at this on a graph, if we have.

30
00:01:54,140 --> 00:01:54,920
One.

31
00:01:55,890 --> 00:01:57,240
Element or one box.

32
00:01:57,240 --> 00:01:59,510
We do one operation.

33
00:01:59,520 --> 00:02:05,080
If we have three again, we still do just one because we're just grabbing the first item in the array.

34
00:02:05,100 --> 00:02:08,100
If we have, let's say five.

35
00:02:08,130 --> 00:02:09,060
Same thing.

36
00:02:09,419 --> 00:02:10,199
Seven.

37
00:02:10,199 --> 00:02:11,190
Same thing.

38
00:02:11,310 --> 00:02:13,350
And what about nine?

39
00:02:13,350 --> 00:02:16,050
Again, same number of operation.

40
00:02:16,440 --> 00:02:20,700
And this is I don't know if you can see the line, but this is just constant time.

41
00:02:20,790 --> 00:02:26,220
It's not linear time like it was where it increases and increases with the number of operations.

42
00:02:26,370 --> 00:02:29,790
The number of operations just stays flat.

43
00:02:32,690 --> 00:02:34,310
But I have a question here.

44
00:02:34,310 --> 00:02:36,180
What if we do something different?

45
00:02:36,200 --> 00:02:37,910
What if we do something like this?

46
00:02:39,230 --> 00:02:42,320
What if we have a function that says function?

47
00:02:43,750 --> 00:02:44,620
Grab.

48
00:02:45,400 --> 00:02:47,950
Or log first.

49
00:02:51,000 --> 00:02:52,440
Two boxes.

50
00:02:53,280 --> 00:03:00,120
And this takes an array of boxes and it's going to console the log.

51
00:03:01,220 --> 00:03:02,840
The first.

52
00:03:03,810 --> 00:03:04,890
Vitamin D array.

53
00:03:05,930 --> 00:03:09,080
And it's going to console.log also.

54
00:03:09,110 --> 00:03:12,050
The second item in the array.

55
00:03:15,240 --> 00:03:17,730
How do we measure the big o of this function?

56
00:03:18,660 --> 00:03:25,800
Well, let me just comment this out for a second, because we don't need this right now and just create

57
00:03:25,800 --> 00:03:30,150
an array called boxes.

58
00:03:30,330 --> 00:03:36,000
And this boxes has, let's just say zero, one, two, three, four and five.

59
00:03:36,000 --> 00:03:39,780
So five items or six in this case because we include zero.

60
00:03:41,680 --> 00:03:43,540
And if we run this function.

61
00:03:45,070 --> 00:03:45,550
Log.

62
00:03:45,550 --> 00:03:49,060
First two boxes and we give it the boxes array.

63
00:03:49,850 --> 00:03:54,500
And we click run here we have a zero and one.

64
00:03:54,650 --> 00:03:57,860
So we've logged this one and then this one.

65
00:03:58,520 --> 00:04:00,440
What's the number of operations here?

66
00:04:01,320 --> 00:04:02,790
Well, we have.

67
00:04:04,840 --> 00:04:06,500
Oh of one.

68
00:04:06,520 --> 00:04:08,560
That is one operation here.

69
00:04:08,770 --> 00:04:11,050
And then we have over here.

70
00:04:12,060 --> 00:04:14,310
Oh of one again.

71
00:04:15,520 --> 00:04:19,450
Each time this function runs to operations.

72
00:04:20,810 --> 00:04:31,010
So this function in total is actually running o of two operations every time.

73
00:04:31,520 --> 00:04:38,240
So no matter how big the boxes get, the number of operations here is going to be two.

74
00:04:38,540 --> 00:04:40,340
If we look at this on a graph.

75
00:04:41,410 --> 00:04:47,890
Instead of having o of one like we had before, we have o of two.

76
00:04:48,160 --> 00:04:51,880
And then if we have three operations, it'll just be of three.

77
00:04:52,120 --> 00:04:55,570
But overall, it's still a flat line.

78
00:04:56,320 --> 00:04:58,990
And this is something we're going to get into later on.

79
00:04:59,470 --> 00:05:04,450
But when it comes to cost and time, we don't care about the nitty gritty.

80
00:05:04,540 --> 00:05:09,760
Oh of one oh of two o of three o of even 100.

81
00:05:10,030 --> 00:05:14,350
We round this down to just simply saying, oh of one.

82
00:05:16,120 --> 00:05:18,790
That is, we have constant time.

83
00:05:18,790 --> 00:05:21,870
It's a flat line in terms of scalability.

84
00:05:21,880 --> 00:05:28,120
It doesn't matter how big our inputs are, we're always going to do the constant amount of time on a

85
00:05:28,120 --> 00:05:28,720
function.

86
00:05:30,760 --> 00:05:37,690
And if we look at this on a graph, we see that all of one over here is the dark green area.

87
00:05:37,690 --> 00:05:38,890
It's excellent.

88
00:05:38,890 --> 00:05:42,390
We love O of one because it's very scalable, right?

89
00:05:42,400 --> 00:05:45,670
It doesn't matter how many elements we have, it's always going to run.

90
00:05:45,670 --> 00:05:53,560
The same predictability when it comes to computing is very, very nice and all of one is definitely

91
00:05:53,560 --> 00:05:54,340
excellent.

92
00:05:55,660 --> 00:05:55,970
Okay.

93
00:05:56,050 --> 00:06:03,550
So we've learned about linear time o of n and then constant time o of one.

94
00:06:04,850 --> 00:06:08,900
Let's do a bit of a fun exercise to really solidify our knowledge here.

