1
00:00:01,310 --> 00:00:02,210
Welcome back.

2
00:00:02,570 --> 00:00:06,050
We've learned about singly and doubly linked lists.

3
00:00:06,850 --> 00:00:10,240
So let's talk about when you should use one over the other.

4
00:00:10,390 --> 00:00:13,360
Let's start with the singly linked list.

5
00:00:14,090 --> 00:00:20,930
The pro of a singly linked list is that it's a fairly simple implementation, especially compared to

6
00:00:20,930 --> 00:00:21,770
the one.

7
00:00:22,730 --> 00:00:29,720
It requires lesser memory, as we can see here, less block And because there's less memory when we

8
00:00:29,720 --> 00:00:35,600
do things like delete and insert, because there is technically less operation, we don't have to move

9
00:00:35,600 --> 00:00:38,930
around the previous property, it's a little bit faster.

10
00:00:39,410 --> 00:00:48,080
Now the downside with a singly linked list is that it cannot be iterated in reverse or traverse from

11
00:00:48,080 --> 00:00:49,160
back to front.

12
00:00:49,280 --> 00:00:56,750
If we ever lose the reference to this dot head node of the list, the list can actually be lost in memory

13
00:00:56,750 --> 00:00:57,350
forever.

14
00:00:57,920 --> 00:01:04,220
So singly list is appropriate to use when you have less memory or memory is really expensive and you

15
00:01:04,220 --> 00:01:06,170
want to be careful of how much you use.

16
00:01:06,560 --> 00:01:13,730
And your main goal is that you want to do fast insertion and deletion and you don't really have that

17
00:01:13,730 --> 00:01:19,580
much searching, especially when you have insertion at the beginning of a list.

18
00:01:20,470 --> 00:01:21,600
A doubly linked list.

19
00:01:21,610 --> 00:01:28,960
Well, the good side of it is that it can be iterated or traversed both from the front or from the back.

20
00:01:29,290 --> 00:01:35,890
Another beauty is that if you need to delete a previous node, you don't need to traverse from the head

21
00:01:35,890 --> 00:01:41,560
node and find what the previous node is which a singly list linked list has no concept of.

22
00:01:41,830 --> 00:01:45,610
You can do that fairly easily with a doubly link list.

23
00:01:46,330 --> 00:01:53,710
Now the downside is that it is fairly complex as we saw to implement and it requires more memory and

24
00:01:53,710 --> 00:01:56,470
storage because of this extra property.

25
00:01:57,110 --> 00:02:02,900
And there are some extra operations that we need to perform to make sure that we when we do insert and

26
00:02:02,900 --> 00:02:06,380
delete that the previous property is updated as well.

27
00:02:06,680 --> 00:02:12,020
So doubly link lists are really good when you don't have that much limitation on memory.

28
00:02:12,670 --> 00:02:19,480
And when you want good operation for searching for elements such as searching backwards instead of just

29
00:02:19,480 --> 00:02:20,050
forwards.

30
00:02:21,200 --> 00:02:25,680
Most of the time in interview situations, you're going to see singly linked list.

31
00:02:25,700 --> 00:02:32,900
You may be asked a theoretical or broad question about the difference between singly and W linked list,

32
00:02:32,900 --> 00:02:35,510
but most of the time this is what you're going to see.

33
00:02:36,400 --> 00:02:36,940
All right.

34
00:02:37,390 --> 00:02:38,590
I'll see you in the next video.

35
00:02:39,130 --> 00:02:39,670
Bye bye.

