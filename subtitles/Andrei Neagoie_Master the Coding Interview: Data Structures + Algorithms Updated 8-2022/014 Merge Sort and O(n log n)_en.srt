1
00:00:01,410 --> 00:00:02,370
Welcome back.

2
00:00:03,030 --> 00:00:09,720
Up until this point, we talked about sorting algorithm, bubble sort, insertion sort, selection sort

3
00:00:09,810 --> 00:00:12,760
that were called elementary sorts.

4
00:00:12,780 --> 00:00:21,210
They were OC, but they have those nested for loops and most of the time it was O of n squared, which

5
00:00:21,210 --> 00:00:23,610
was a little bit slow.

6
00:00:23,640 --> 00:00:25,320
Can we do better?

7
00:00:25,470 --> 00:00:27,000
Well, yes, we can.

8
00:00:27,060 --> 00:00:34,020
We're going to encounter our last big O on our list o of n log n.

9
00:00:35,080 --> 00:00:42,100
Now in order to understand what o of n log n means, we have to talk about our next sorting algorithm.

10
00:00:42,580 --> 00:00:44,920
Merge, sort and quicksort.

11
00:00:45,840 --> 00:00:50,310
You see, unlike bubble sort and insertion sort and selection sort.

12
00:00:50,340 --> 00:00:55,380
They use the technique that we've heard of before, divide and conquer.

13
00:00:55,410 --> 00:00:57,960
We learned about this when learning about trees.

14
00:00:58,230 --> 00:01:04,019
Remember, when looking through a phone book, we open up that book not from the first page, but from

15
00:01:04,019 --> 00:01:08,880
the middle page, and we keep breaking up the pages until we find the name we're looking for.

16
00:01:09,600 --> 00:01:17,790
And merge sort and quicksort use this concept of divide and conquer and the idea of recursion which

17
00:01:17,790 --> 00:01:18,690
we've talked about.

18
00:01:18,960 --> 00:01:25,530
To divide the problem down, to do work on each subset and then combining the solutions.

19
00:01:26,160 --> 00:01:29,130
Now we're going to see how this actually works.

20
00:01:29,860 --> 00:01:35,980
But I want to remind you that any time we see something like divide and conquer, it usually gives you

21
00:01:35,980 --> 00:01:38,020
a log of an advantage.

22
00:01:38,230 --> 00:01:46,630
And as you can see here, it is the last piece of the puzzle o of an log in that actually improves is

23
00:01:46,630 --> 00:01:48,610
better than all of N squared.

24
00:01:49,090 --> 00:01:55,750
The next couple of sorting algorithms we're going to look at are now going to have nested for loops

25
00:01:55,750 --> 00:01:57,870
and have over and squared.

26
00:01:57,880 --> 00:02:05,080
Instead they're going to have this time complexity, which makes things a lot better and saves companies

27
00:02:05,080 --> 00:02:06,130
a lot of time.

28
00:02:06,670 --> 00:02:10,479
In order to understand what this means.

29
00:02:10,509 --> 00:02:13,630
We have to start off with looking at merge sort.

30
00:02:14,620 --> 00:02:18,940
Let's have a look at how it works and then I'm going to explain what the benefits are.

31
00:02:20,140 --> 00:02:22,060
We have the same list as before.

32
00:02:22,510 --> 00:02:26,680
We're going to take this list and actually divide it in half.

33
00:02:28,140 --> 00:02:33,030
And then we're going to divide each of these subsets into half again.

34
00:02:33,970 --> 00:02:41,260
And then we're going to divide those sub lists into half again until we have one item.

35
00:02:42,590 --> 00:02:51,500
And once we have that divided up, we're going to take the first item and second item and say, Hey,

36
00:02:51,500 --> 00:02:53,330
which one should I put first?

37
00:02:53,480 --> 00:02:56,630
Let's put 5/1 and then six right after.

38
00:02:58,520 --> 00:03:02,870
And notice here how we're building a reverse tree, in a sense.

39
00:03:03,320 --> 00:03:07,160
Then we look at three in one and say, one and three.

40
00:03:08,450 --> 00:03:11,300
So we're getting closer and closer to that root node.

41
00:03:11,600 --> 00:03:13,580
We're comparing eight and seven.

42
00:03:13,760 --> 00:03:18,220
Seven comes before eight to in four to before four.

43
00:03:18,230 --> 00:03:26,540
And now we again combine those lists in that reverse tree saying five and one, which one comes first?

44
00:03:26,540 --> 00:03:28,190
One comes first.

45
00:03:28,310 --> 00:03:30,380
And then let's compare five and three.

46
00:03:30,890 --> 00:03:34,580
Three comes first, then five, then six.

47
00:03:35,270 --> 00:03:36,770
Then we look on the right side.

48
00:03:36,950 --> 00:03:38,360
We say seven and two.

49
00:03:38,390 --> 00:03:39,890
Two comes before seven.

50
00:03:40,250 --> 00:03:41,510
What about seven and four?

51
00:03:41,510 --> 00:03:43,610
Four becomes before seven.

52
00:03:43,610 --> 00:03:50,450
And because we know that seven and eight are already sorted, we just place seven and eight right next

53
00:03:50,450 --> 00:03:51,080
to each other.

54
00:03:51,410 --> 00:03:58,310
And then finally we combine these last two lists into our root node to combine the list and make it

55
00:03:58,490 --> 00:04:00,260
sorted one and two.

56
00:04:01,840 --> 00:04:03,220
Three and four.

57
00:04:05,360 --> 00:04:09,980
Five and then six, seven and eight.

58
00:04:11,030 --> 00:04:13,370
And we have our sorted list.

59
00:04:14,320 --> 00:04:17,410
Now, that looked extremely complicated.

60
00:04:17,410 --> 00:04:21,070
A lot more complicated than the other sorting algorithms.

61
00:04:21,070 --> 00:04:21,640
Right.

62
00:04:22,460 --> 00:04:29,930
Mercer is one of the most efficient ways you can sort a list of things and typically is going to perform

63
00:04:29,930 --> 00:04:32,990
better than most other sorting algorithms.

64
00:04:32,990 --> 00:04:34,760
And in terms of complexity.

65
00:04:34,760 --> 00:04:37,520
Well, it's definitely a lot more complex, isn't it?

66
00:04:37,550 --> 00:04:43,760
We're using divide and conquer approach, which should tip you off that it's going to use some sort

67
00:04:43,760 --> 00:04:44,630
of recursion.

68
00:04:45,020 --> 00:04:52,310
The first part of n log n that is N comes from the fact that we're still comparing everything.

69
00:04:52,310 --> 00:04:58,150
We have to look at each one of the numbers and compare them in order to sort it.

70
00:04:58,490 --> 00:05:03,290
Now, once we divide the list into one.

71
00:05:05,200 --> 00:05:10,610
Which finding the middle index of these things are actually overdone.

72
00:05:10,610 --> 00:05:13,170
One, because it's an easy mathematical operation.

73
00:05:13,210 --> 00:05:16,000
Get the length of the list and find the middle.

74
00:05:16,990 --> 00:05:22,890
But once we divide the array, we need to sort the items which is going to take o of n.

75
00:05:22,900 --> 00:05:29,500
We have to look at every single item and actually sort them and we're able to create the list.

76
00:05:30,260 --> 00:05:38,450
But unlike bubble sort, for example, although we have to compare everything at least once, we don't

77
00:05:38,450 --> 00:05:42,590
have to compare everything to everything like we did with Bubble Start.

78
00:05:42,920 --> 00:05:47,480
All we have to do is compare their local lists to each other.

79
00:05:47,810 --> 00:05:52,370
Remember, with something like bubble sort or insertion sort.

80
00:05:52,490 --> 00:05:59,210
Once we went through the list, once we then compared the next item to the rest of the list.

81
00:06:00,100 --> 00:06:07,150
Mercer is also helpful because it's what we call stable, which just means that if you have equivalent

82
00:06:07,150 --> 00:06:13,000
elements that is, let's say six and six or a name, that is the same.

83
00:06:13,800 --> 00:06:16,710
It will keep the original order in the array.

84
00:06:18,130 --> 00:06:21,580
And this can sometimes be important depending on the type of data.

85
00:06:21,820 --> 00:06:23,710
Let's have a look at its big go.

86
00:06:24,250 --> 00:06:25,330
We see that in Mercer.

87
00:06:25,330 --> 00:06:32,230
It has o of n log n with a space complexity of of n.

88
00:06:33,280 --> 00:06:40,060
Unlike bubble sort insertion sword and selection sword, we have a bit of a bigger space complexity

89
00:06:40,300 --> 00:06:44,790
because we have to hold on to that divided up list and memory.

90
00:06:44,830 --> 00:06:52,420
So that is one downside of merge sort, but we've now managed to make our sorting algorithm a lot faster.

91
00:06:53,370 --> 00:06:56,680
Now how do we implement March Sort?

92
00:06:58,890 --> 00:07:01,110
I have here for you an exercise.

93
00:07:01,800 --> 00:07:05,160
I want to warn you, this is really difficult.

94
00:07:05,190 --> 00:07:09,990
Merge sort is really hard to implement and wrap your mind around.

95
00:07:10,170 --> 00:07:15,180
If you don't feel comfortable with recursion, it's going to be a little bit tough.

96
00:07:15,420 --> 00:07:21,420
Keep in mind that I'm showing you here how to do it just for your own interest, but most likely in

97
00:07:21,420 --> 00:07:26,280
an interview, you're never going to be asked to implement your own merge sort.

98
00:07:26,610 --> 00:07:29,250
You're just going to be asked maybe how it's implemented.

99
00:07:29,280 --> 00:07:32,610
And I've created a little skeleton to help you out here.

100
00:07:32,790 --> 00:07:38,970
We have the merge sort that is going to have a function that takes an array.

101
00:07:39,330 --> 00:07:46,320
We have the base case because we're going to use recursion here saying that when array length is one,

102
00:07:46,320 --> 00:07:48,630
remember there's only one item in the list.

103
00:07:48,630 --> 00:07:53,340
That is when each one of this is up to the top and its own list.

104
00:07:54,010 --> 00:07:56,230
We're going to just return the array.

105
00:07:57,250 --> 00:08:06,010
Now in here, we're going to return and we're going to merge, sort the left hand side and the right

106
00:08:06,040 --> 00:08:06,760
hand side.

107
00:08:07,660 --> 00:08:13,690
And we're going to use this function merge that is going to merge the left hand.

108
00:08:14,510 --> 00:08:15,860
And the right hand side.

109
00:08:16,340 --> 00:08:24,200
So the first step is for you to split the array down the middle, in the left hand and right hand side

110
00:08:24,200 --> 00:08:25,040
and here.

111
00:08:25,860 --> 00:08:27,690
Then run it.

112
00:08:28,360 --> 00:08:30,280
With the Mercer algorithm.

113
00:08:30,520 --> 00:08:36,039
And in the search function, I want you to actually do the comparison.

114
00:08:36,520 --> 00:08:40,030
I don't expect you to get this right away.

115
00:08:40,919 --> 00:08:44,520
There's very few people that can do this off of the top of their head.

116
00:08:45,160 --> 00:08:51,730
But see if you can use all your resources available, our discord community or even Google to figure

117
00:08:51,730 --> 00:08:55,290
out how to create your own merge sort algorithm.

118
00:08:55,300 --> 00:08:57,550
And I'll see you in the solution video.

119
00:08:58,120 --> 00:08:58,720
Bye bye.

