1
00:00:01,350 --> 00:00:02,220
Welcome back.

2
00:00:02,710 --> 00:00:10,870
In the last video, we asked the question, is there a better way to find a number in a sorted list?

3
00:00:11,380 --> 00:00:15,340
And just for this example, let's add an extra number to our list.

4
00:00:18,530 --> 00:00:19,310
That's better.

5
00:00:19,520 --> 00:00:25,820
Let's say I was looking for 34 and I knew that my list, let's say array was sorted.

6
00:00:26,240 --> 00:00:33,350
What's a better way to go about it instead of checking every single item one by one from left to right?

7
00:00:34,060 --> 00:00:41,150
Well, we can use something called binary search because we know the list is sorted.

8
00:00:41,170 --> 00:00:45,880
We can discard half the items instead of one at a time.

9
00:00:46,660 --> 00:00:47,560
Let me show you.

10
00:00:47,620 --> 00:00:54,940
We can start in the middle of the list and say, is nine higher or lower than 34?

11
00:00:55,700 --> 00:00:57,260
While 34 is higher than nine.

12
00:00:57,260 --> 00:00:59,510
So let's discard everything to the left of it.

13
00:01:00,840 --> 00:01:03,630
And then we go to the middle index again.

14
00:01:03,720 --> 00:01:08,010
In this case, there's no technically a medium, so let's just choose 12.

15
00:01:08,100 --> 00:01:09,570
Go to the left of the media.

16
00:01:10,110 --> 00:01:12,630
It's 12 higher, lower than 34.

17
00:01:13,360 --> 00:01:17,920
Well, it's definitely lower, so let's remove everything to the left of it.

18
00:01:18,960 --> 00:01:26,520
And then let's find the middle index and oh, we just found 34 instead of going through the item one

19
00:01:26,520 --> 00:01:29,760
by one, we did that in three operations.

20
00:01:29,970 --> 00:01:32,580
And this looks familiar, right?

21
00:01:34,050 --> 00:01:40,320
And it's something we learned about when we talked about trees, specifically binary search trees.

22
00:01:41,140 --> 00:01:50,380
Because if our data is sorted, we can do better than O of NW or linear time because this sorted list

23
00:01:50,380 --> 00:01:51,880
might remind you of something.

24
00:01:54,210 --> 00:01:58,110
We're essentially creating a binary search tree.

25
00:01:58,830 --> 00:02:04,380
Unlike linear search, we can discard half the items instead of one at a time.

26
00:02:05,100 --> 00:02:10,509
And you might be thinking, well, that's ridiculous, Andre, because in order for us to even search

27
00:02:10,509 --> 00:02:12,660
this, we had to sort the list first.

28
00:02:12,660 --> 00:02:14,800
And that takes computational power.

29
00:02:14,820 --> 00:02:15,330
Right.

30
00:02:15,660 --> 00:02:24,240
But storing data in a data structure like a tree instead of a linear data structure, like an array,

31
00:02:24,900 --> 00:02:27,240
is actually more efficient.

32
00:02:27,300 --> 00:02:30,810
And this is something we've already discussed with tree data structures.

33
00:02:31,590 --> 00:02:38,790
As we insert items, if we sort them, it actually gives us better performance than adding it to an

34
00:02:38,790 --> 00:02:41,610
unsorted list that we have to search through one day.

35
00:02:42,700 --> 00:02:48,180
And because in a tree where we make a decision, should we go left or right?

36
00:02:48,190 --> 00:02:49,600
Should we go left or right?

37
00:02:49,600 --> 00:02:52,690
And we discard half the items every step.

38
00:02:52,870 --> 00:02:58,420
This should trigger something in your brain that's saying, Oh, this is a divide and conquer approach,

39
00:02:58,420 --> 00:03:05,320
which gives us a log of in time, because log of DN comes from the fact that we're not visiting all

40
00:03:05,320 --> 00:03:10,000
nodes each step down the tree, we're eliminating nodes.

41
00:03:10,510 --> 00:03:12,970
So this is the deal with binary search.

42
00:03:13,480 --> 00:03:19,990
You split a list of a sorted item and decide from there whether item you're looking for is in the left

43
00:03:19,990 --> 00:03:21,280
or the right of the list.

44
00:03:22,270 --> 00:03:28,090
And because the list is sorted, you can make that decision very easily by just comparing things and

45
00:03:28,090 --> 00:03:30,910
we just keep going until we find what we want.

46
00:03:31,420 --> 00:03:36,670
In this case, number 34, we make one, two, three decisions.

47
00:03:40,170 --> 00:03:48,450
And this makes sense because if you're a teacher that's looking at a stack of essays and papers by students,

48
00:03:48,780 --> 00:03:55,290
if that stack of paper is not organized, then you have to go through it one by one to find, let's

49
00:03:55,290 --> 00:03:56,250
say, Timmy.

50
00:03:56,550 --> 00:04:04,200
But if the stack of paper is sorted alphabetically, then you can find Timmy by dividing the papers

51
00:04:04,200 --> 00:04:06,570
half each time until you get to Timmy.

52
00:04:06,600 --> 00:04:07,950
Just like a phonebook.

53
00:04:09,360 --> 00:04:12,030
We start with an element.

54
00:04:12,690 --> 00:04:19,829
Then when we step down, we have an divided by two elements remaining, and as we step down, we have

55
00:04:19,829 --> 00:04:22,530
an divided by four elements remaining.

56
00:04:22,530 --> 00:04:27,330
And we keep going, keep going, keep going until we find our element.

57
00:04:27,600 --> 00:04:33,150
And in the sorting section we learn that merge, sort and quicksort are doing the same thing.

58
00:04:34,180 --> 00:04:40,510
And we also learned how to actually search through this tree in our data structure section, right?

59
00:04:40,690 --> 00:04:46,420
With linear search, we had four loops with a binary search tree like this one.

60
00:04:46,540 --> 00:04:54,520
Well, we had our lookup method where we checked the left node and the right node and divided up the

61
00:04:54,520 --> 00:04:58,210
list using a while loop in half each time.

62
00:04:58,600 --> 00:05:02,860
So we know how to do linear search and binary search.

63
00:05:03,280 --> 00:05:10,780
We know that binary search is going to be log of dn time complexity versus linear search, which is

64
00:05:10,960 --> 00:05:12,130
o of n.

65
00:05:13,230 --> 00:05:15,060
But what are these two?

66
00:05:15,810 --> 00:05:23,730
Well, up until this point, we've talked about when we're searching for an item where we know that

67
00:05:23,730 --> 00:05:30,330
34 exists, are listed sorted in a binary search tree and we know where to go left or right.

68
00:05:31,440 --> 00:05:37,740
But sometimes we have to do something called traversal and traversal simply means.

69
00:05:38,160 --> 00:05:45,660
Well, going from node to node, either finding a specific thing or making sure that you touch every

70
00:05:45,660 --> 00:05:46,590
single node.

71
00:05:47,460 --> 00:05:52,980
Perhaps we want to add a color attribute to each node here.

72
00:05:53,190 --> 00:05:57,120
Perhaps we want to update these numbers and multiply them by two.

73
00:05:57,150 --> 00:06:00,750
In that case, we have to visit every single node.

74
00:06:01,320 --> 00:06:02,400
How do we do that?

75
00:06:02,910 --> 00:06:04,650
Let's find out in the next video.

