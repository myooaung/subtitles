WEBVTT
1
00:00:01.150 --> 00:00:02.080
Welcome back.

2
00:00:02.880 --> 00:00:05.070
How was this exercise?

3
00:00:05.100 --> 00:00:07.050
Hopefully it wasn't too difficult.

4
00:00:08.570 --> 00:00:14.390
If you're able to answer these questions, you're most likely going to be okay in an interview if you

5
00:00:14.390 --> 00:00:18.080
ever get asked about death for search or breath for a search.

6
00:00:18.170 --> 00:00:19.760
So let's go over the answers.

7
00:00:20.670 --> 00:00:24.640
If you know a solution is not far from the root of the tree.

8
00:00:24.660 --> 00:00:26.430
Well, we talked about this.

9
00:00:26.430 --> 00:00:34.680
We want to use breath for search because it starts it starts searching the closest nodes to the parent

10
00:00:34.680 --> 00:00:35.280
first.

11
00:00:36.450 --> 00:00:40.650
If the tree is very deep and solutions are rare.

12
00:00:41.280 --> 00:00:46.650
Well, this is a bit of a tougher question, but we would use breath for search.

13
00:00:47.630 --> 00:00:54.620
And the reason we would do that over something like death research is that depth for search will take

14
00:00:54.620 --> 00:01:00.050
a really long time with this type of a tree because the tree is really deep.

15
00:01:00.050 --> 00:01:04.430
It's going to go one by one going really, really down below.

16
00:01:04.700 --> 00:01:10.370
And because solutions are rare, it's most likely going to just repeat that step over and over and over.

17
00:01:10.370 --> 00:01:13.250
And as you'll see with death, first search.

18
00:01:14.080 --> 00:01:20.740
We use recursive functions and with def for search that can take a really, really long time.

19
00:01:21.070 --> 00:01:25.270
Although with this one we also have some memory concerns with breath for search.

20
00:01:25.510 --> 00:01:28.780
So your answers may vary, but this is what I would use.

21
00:01:29.860 --> 00:01:33.210
As long as you can explain that to the interviewer, you're fine, though.

22
00:01:34.320 --> 00:01:36.570
What if the tree is very wide?

23
00:01:36.750 --> 00:01:39.090
That is there's a lot of notes.

24
00:01:39.360 --> 00:01:40.740
It's not a binary tree.

25
00:01:40.740 --> 00:01:44.790
It just has a ton of notes underneath each parent.

26
00:01:45.240 --> 00:01:52.080
Again, this is a bit of a tougher one, but we want to use depth for a search because a Beth first

27
00:01:52.080 --> 00:01:55.230
search and I'm going to say BFS from now is.

28
00:01:55.230 --> 00:01:56.760
Well it's going to need.

29
00:01:57.630 --> 00:01:58.650
Too much.

30
00:02:01.470 --> 00:02:02.910
Too much memory.

31
00:02:03.240 --> 00:02:10.830
The way breath first search works is that it has to keep track of the nodes in the current level in

32
00:02:10.830 --> 00:02:13.350
something called a queue that we will see.

33
00:02:14.290 --> 00:02:18.370
So because of that, it might take up too much memory.

34
00:02:19.080 --> 00:02:20.040
What about the next one?

35
00:02:20.040 --> 00:02:24.000
If the solutions are frequent by located deep in the tree?

36
00:02:24.570 --> 00:02:30.570
Well, in that case, we use depth for search, so hopefully we'll be able to find an answer quicker

37
00:02:30.570 --> 00:02:31.830
than breath for a search.

38
00:02:32.620 --> 00:02:33.660
What about the next one?

39
00:02:33.670 --> 00:02:36.850
Determining whether a path exists between two notes?

40
00:02:37.270 --> 00:02:45.340
That is what deaf first search is built for or about finding the shortest path that is for breadth first

41
00:02:45.340 --> 00:02:46.030
search.

42
00:02:47.970 --> 00:02:55.650
Now keep this document in mind and revisit it as we learn more and more about these two algorithms,

43
00:02:55.650 --> 00:02:59.220
because things are going to start making sense more and more.

44
00:02:59.580 --> 00:03:05.580
But this is a good sheet to keep in mind before you go to an interview, in case you get asked these

45
00:03:05.580 --> 00:03:06.210
questions.

46
00:03:08.000 --> 00:03:12.890
Enough talking for now, I think it's time for us to start coding these algorithms.

47
00:03:12.920 --> 00:03:14.090
I'll see you in the next one.

48
00:03:14.690 --> 00:03:15.230
Bye bye.

