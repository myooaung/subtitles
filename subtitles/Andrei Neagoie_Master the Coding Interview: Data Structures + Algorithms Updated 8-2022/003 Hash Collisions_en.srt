1
00:00:01,550 --> 00:00:08,630
Looking at hash functions, we can start to think about what actions they perform and how fast it can

2
00:00:08,630 --> 00:00:09,170
be done.

3
00:00:10,680 --> 00:00:15,450
When it comes to inserting something in our memory space?

4
00:00:15,690 --> 00:00:17,850
Well, it's going to be o of one.

5
00:00:17,910 --> 00:00:26,550
We hash the key such as grapes through the hash function and places it automatically into the address

6
00:00:26,550 --> 00:00:28,650
space that it comes up with.

7
00:00:29,540 --> 00:00:31,790
Look up is the exact same.

8
00:00:32,240 --> 00:00:35,060
We accessed the property.

9
00:00:35,720 --> 00:00:41,150
That property is going to get hashed and direct us exactly to the address to find the values.

10
00:00:41,890 --> 00:00:43,120
What about Deletes?

11
00:00:43,570 --> 00:00:44,500
Same thing.

12
00:00:44,590 --> 00:00:48,220
We simply use the key right away.

13
00:00:48,220 --> 00:00:56,680
We know where to delete the item from and because it isn't ordered, we don't have to shift indexes

14
00:00:56,680 --> 00:00:58,430
like we did with arrays.

15
00:00:58,450 --> 00:01:00,610
Everything is just nice and simple.

16
00:01:01,460 --> 00:01:02,540
What about searching?

17
00:01:02,780 --> 00:01:07,650
If we want to find something in our basket like apples.

18
00:01:07,670 --> 00:01:09,500
Well, that's easy, too.

19
00:01:09,530 --> 00:01:12,710
We simply use hash functions.

20
00:01:14,140 --> 00:01:18,460
If we go to our playground in JavaScript, I can create an object.

21
00:01:18,460 --> 00:01:25,000
Let's say let user and this user will have property of H 54.

22
00:01:26,170 --> 00:01:28,780
Let's say that the name is going to be.

23
00:01:30,620 --> 00:01:31,370
Kylie.

24
00:01:33,740 --> 00:01:34,790
Magic.

25
00:01:34,880 --> 00:01:39,680
Well, let's say Kylie does have magic skills, so we'll set it to true.

26
00:01:39,740 --> 00:01:44,720
And for fun, let's say that the scream is a function.

27
00:01:45,970 --> 00:01:48,370
That will just console.log.

28
00:01:50,300 --> 00:01:55,190
A scream that was not the strongest of screams.

29
00:01:55,190 --> 00:01:59,540
But I don't want to scare people around me when I run this.

30
00:02:00,810 --> 00:02:11,820
I've created a user object and the age 54 name Kylie Magic True Scream and this function are all going

31
00:02:11,820 --> 00:02:16,020
to get placed somewhere in memory at different addresses.

32
00:02:16,820 --> 00:02:19,010
But I can access this really, really fast.

33
00:02:19,010 --> 00:02:24,380
I can say user h which is going to give me 54 at.

34
00:02:26,160 --> 00:02:27,090
A one time.

35
00:02:28,510 --> 00:02:30,280
Perhaps adding a new property.

36
00:02:30,280 --> 00:02:38,440
I can just simply say user dot spell is going to equal abracadabra.

37
00:02:39,400 --> 00:02:48,190
And if I run this and let's just check out what the user object gives us, we see that we now have.

38
00:02:49,180 --> 00:02:52,360
The spell abracadabra added.

39
00:02:52,750 --> 00:02:58,510
This again is access of o one is O of one.

40
00:02:59,240 --> 00:03:06,860
Because we take it through the hash functions and the computer decides where to put both spell and abracadabra

41
00:03:06,860 --> 00:03:07,550
in memory.

42
00:03:09,190 --> 00:03:12,370
And a firearm user scream.

43
00:03:13,760 --> 00:03:14,750
Same thing.

44
00:03:15,250 --> 00:03:16,790
Oh, I cannot spell scream.

45
00:03:17,680 --> 00:03:25,510
Same thing I get are I get to access this function in memory really, really fast at zero of one.

46
00:03:27,850 --> 00:03:29,200
How amazing is that?

47
00:03:29,620 --> 00:03:31,030
And I know what you're thinking.

48
00:03:31,450 --> 00:03:33,010
Hash tables are amazing.

49
00:03:33,010 --> 00:03:34,990
We should be using them all the time.

50
00:03:35,440 --> 00:03:38,770
And you're right, we should be using them in a lot of cases.

51
00:03:38,770 --> 00:03:41,620
But as we know, there's always pros and cons.

52
00:03:42,160 --> 00:03:48,280
Now, let me talk to you about one of the main problems with hash tables.

53
00:03:49,150 --> 00:03:51,790
And I have a nice visual to demonstrate this for you.

54
00:03:51,820 --> 00:03:56,680
I'll link to this and this video so you can play around with it later.

55
00:03:57,160 --> 00:04:02,020
I have a little animation here where we have 12 memory spaces.

56
00:04:02,800 --> 00:04:11,710
Remember, our computer has limited space and when we create an object or a hash table, the computer

57
00:04:11,710 --> 00:04:14,890
decides how much space to allocate.

58
00:04:14,890 --> 00:04:18,160
It's not going to allocate all the space to the hash table.

59
00:04:18,160 --> 00:04:20,529
It's going to allocate a bit of it.

60
00:04:20,680 --> 00:04:26,500
And I'll show you later on when we implement our own hash table how we can adjust the size.

61
00:04:27,240 --> 00:04:34,170
But seeing that there's only 12 spaces, you can imagine if I insert here, let's say one.

62
00:04:35,880 --> 00:04:37,140
See if I can make this bigger.

63
00:04:37,140 --> 00:04:37,680
So you can see it.

64
00:04:37,710 --> 00:04:38,030
Yeah.

65
00:04:38,040 --> 00:04:38,640
There you go.

66
00:04:39,360 --> 00:04:44,310
I'm going to insert let's say the number three gets inserted here.

67
00:04:44,340 --> 00:04:46,770
Let's do 55.

68
00:04:47,250 --> 00:04:48,050
Insert it.

69
00:04:48,060 --> 00:04:49,530
Oh, what happened there?

70
00:04:50,640 --> 00:04:51,450
Did you see that?

71
00:04:52,770 --> 00:04:59,100
The hash function randomly assigned a space and memory and put it in three.

72
00:04:59,800 --> 00:05:00,270
Oh.

73
00:05:01,640 --> 00:05:02,360
Remember.

74
00:05:03,070 --> 00:05:08,860
There's nothing telling the hash function to evenly distribute until everything is full.

75
00:05:09,460 --> 00:05:15,310
Although hash functions are optimized to try to distribute this data all over.

76
00:05:15,670 --> 00:05:17,860
It also matters what we put into it.

77
00:05:17,860 --> 00:05:26,920
So when 55 gets hashed, well, this hash function generates the address location of three to put it

78
00:05:26,920 --> 00:05:27,250
in.

79
00:05:27,520 --> 00:05:31,540
And because we already have three there, it does something funny here.

80
00:05:31,660 --> 00:05:33,670
Let's keep adding here and see what happens.

81
00:05:33,820 --> 00:05:38,620
I'll add to maybe add 12.

82
00:05:39,840 --> 00:05:41,940
And finally add 14.

83
00:05:43,480 --> 00:05:45,310
Oh, it did the same thing again.

84
00:05:46,180 --> 00:05:50,260
And what we just notice here is something called collision.

85
00:05:53,150 --> 00:05:55,880
And a collision looks something like this.

86
00:05:56,540 --> 00:05:58,280
We have the keys.

87
00:05:58,430 --> 00:06:06,290
Let's say we're inserting the name and the phone number of a user.

88
00:06:07,980 --> 00:06:15,630
And we initially place John Smith this key gets hashed, gets placed in the address space of 152 and

89
00:06:15,630 --> 00:06:16,620
gets stored.

90
00:06:16,830 --> 00:06:20,780
Remember how I said it actually stores both keys and values.

91
00:06:20,790 --> 00:06:23,050
It stores in something called buckets.

92
00:06:23,070 --> 00:06:27,450
John Smith With the value that is its phone number right here.

93
00:06:28,130 --> 00:06:35,920
And then we keep going with Lisa Smith, then Sam Doe, then Sandra Oh no.

94
00:06:35,930 --> 00:06:43,040
As soon as we pass Sandra Dee, it becomes the same address space as John Smith.

95
00:06:43,190 --> 00:06:44,810
And we have a collision.

96
00:06:45,430 --> 00:06:52,880
And because of this collision, we need a way to store both users somehow in this address space.

97
00:06:52,900 --> 00:07:01,900
And something funky is going on here with this little circle and then a point and Sandra d and just

98
00:07:01,900 --> 00:07:02,850
a hint here.

99
00:07:02,860 --> 00:07:09,520
This is actually a new data structure that we're going to learn about called link lists coming up.

100
00:07:10,060 --> 00:07:17,470
You see with hash tables, we can't avoid these collisions with enough data, with limited memory,

101
00:07:17,470 --> 00:07:20,290
we're always going to have this collision.

102
00:07:20,380 --> 00:07:24,460
So there is a possibility if we go back to our example.

103
00:07:25,400 --> 00:07:29,090
And I refresh year to start from scratch that.

104
00:07:30,740 --> 00:07:33,560
We constantly just add.

105
00:07:34,190 --> 00:07:35,570
Despite our hash table.

106
00:07:35,570 --> 00:07:37,040
That's really, really fast.

107
00:07:38,080 --> 00:07:42,040
Constantly just keep adding to the same memory space.

108
00:07:42,790 --> 00:07:52,150
Which slows down our ability to access or insert information, because now if I want to check what's

109
00:07:52,150 --> 00:07:53,860
in this address space, I have to go.

110
00:07:53,860 --> 00:07:57,820
One, two, three, four, five and so on and so forth.

111
00:07:58,420 --> 00:07:59,590
Theoretically.

112
00:08:00,980 --> 00:08:02,690
When you have a collision.

113
00:08:03,700 --> 00:08:10,390
It slows down reading and writing with a hash table with o.

114
00:08:10,780 --> 00:08:13,390
N divided by k.

115
00:08:14,650 --> 00:08:17,620
Where K is the size of your hash table.

116
00:08:18,220 --> 00:08:21,430
And remember, because we remove constants.

117
00:08:22,370 --> 00:08:26,150
And simplify things, it becomes an own operation.

118
00:08:26,510 --> 00:08:31,040
Now, collision will likely happen in any hash table implementation.

119
00:08:31,250 --> 00:08:35,990
And luckily for you, you're never going to have to really implement it yourself.

120
00:08:36,200 --> 00:08:39,289
And it's not a very common interview question.

121
00:08:39,289 --> 00:08:42,169
But you do want to know about it so you can talk about it.

122
00:08:42,890 --> 00:08:46,920
There's two common ways to deal with these collisions.

123
00:08:46,940 --> 00:08:52,220
I showed you one of them with something called Link List, which we'll talk about later on.

124
00:08:52,760 --> 00:09:01,760
But if we go to the hash table Wikipedia page and look at collision resolution, you can see that there's

125
00:09:01,760 --> 00:09:06,710
a ton of different ways to solve collisions.

126
00:09:07,590 --> 00:09:10,470
The way that I showed you is called separate chaining.

127
00:09:10,860 --> 00:09:18,240
But there's different methods like open addressing and Robin Hood hashing that you can read about if

128
00:09:18,240 --> 00:09:20,010
you're really interested in the topic.

129
00:09:20,460 --> 00:09:25,200
The point I wanted to make is that there is a bit of a of a downside.

130
00:09:26,310 --> 00:09:35,160
When we talk about fast lookups and hash tables, occasionally, depending on the hash function, it

131
00:09:35,160 --> 00:09:37,140
might take O of NW.

132
00:09:38,070 --> 00:09:38,610
All right.

133
00:09:38,610 --> 00:09:43,320
Let's keep going and expand our knowledge of hash tables in the next video.

