WEBVTT
1
00:00:00.410 --> 00:00:01.460
Welcome back.

2
00:00:01.490 --> 00:00:06.140
Let's learn how to build our own graph graphs.

3
00:00:06.140 --> 00:00:09.170
When you look at them, look very intimidating.

4
00:00:09.790 --> 00:00:11.530
But here's the thing.

5
00:00:11.980 --> 00:00:20.590
We've actually learned the tools necessary to build graphs because graphs are built on top of other

6
00:00:20.590 --> 00:00:21.670
data structures.

7
00:00:22.960 --> 00:00:26.320
Remember this diagram of the directed acyclic graph?

8
00:00:27.140 --> 00:00:33.080
Well, many of the data structures that we've been playing with up until now can create something like

9
00:00:33.080 --> 00:00:37.400
this using trees and link lists.

10
00:00:37.490 --> 00:00:39.650
I mean, it looks pretty similar, right?

11
00:00:39.680 --> 00:00:44.660
You have a node with children and different pointers.

12
00:00:47.130 --> 00:00:48.270
Using that knowledge.

13
00:00:48.270 --> 00:00:55.260
Let's talk about how to start thinking about graphs, or at least how to think about building them.

14
00:00:56.360 --> 00:00:58.280
There's three ways they can think about it.

15
00:00:58.310 --> 00:01:05.750
The first is called an edge list, and I have an example for you that we can use to build something

16
00:01:05.750 --> 00:01:06.380
like this.

17
00:01:07.030 --> 00:01:09.790
Let's say we want to build this graph.

18
00:01:10.510 --> 00:01:12.490
How would we go about doing this?

19
00:01:14.420 --> 00:01:22.490
With an edge list, we can say cost graph equals to something like this.

20
00:01:24.680 --> 00:01:24.950
Now.

21
00:01:24.950 --> 00:01:25.940
Let's see what I did here.

22
00:01:27.560 --> 00:01:29.210
I have an array.

23
00:01:29.920 --> 00:01:37.390
And within this array I have one, two, three, four items that itself they are arrays.

24
00:01:38.050 --> 00:01:43.510
But if we look at the graph, the array simply states the connections.

25
00:01:43.630 --> 00:01:48.550
That is, we have zero and two as the first item in the array.

26
00:01:49.240 --> 00:01:58.150
We have two and three as the second array inside of the array and then two in one and one and three.

27
00:01:58.180 --> 00:02:04.930
An edge list simply shows the connection that zero is connected to two and two is connected to zero.

28
00:02:06.810 --> 00:02:08.490
Two's connected to three threes.

29
00:02:08.490 --> 00:02:09.360
Connected to two.

30
00:02:09.389 --> 00:02:10.080
2 to 1.

31
00:02:10.080 --> 00:02:10.800
1 to 3.

32
00:02:10.800 --> 00:02:12.080
So on and so forth.

33
00:02:13.130 --> 00:02:14.030
Quite simple.

34
00:02:14.690 --> 00:02:16.550
There's another way called.

35
00:02:17.430 --> 00:02:20.640
Adjacency or adjacent list.

36
00:02:22.840 --> 00:02:32.950
And in this case, we can create a graph where the index is the node and the value is the nodes neighbors.

37
00:02:33.820 --> 00:02:34.990
What I mean by that?

38
00:02:35.140 --> 00:02:40.960
Well, in here, we can use arrays, we can use objects, we can use link lists.

39
00:02:41.410 --> 00:02:47.740
But let's say that in the index of zero, the first item zero is connected to two.

40
00:02:48.810 --> 00:02:49.440
The.

41
00:02:50.470 --> 00:02:55.330
Index of one that is node one is connected to two and three.

42
00:02:56.440 --> 00:03:03.280
Index of two is connected to zero one and three.

43
00:03:04.120 --> 00:03:07.030
And then finally, index of three or no.

44
00:03:07.030 --> 00:03:10.090
Three is connected to one and two.

45
00:03:10.090 --> 00:03:15.400
And you can also do the above with an object where it might even be clearer.

46
00:03:15.400 --> 00:03:21.540
And if a node value is something other than a number, you can actually give it a value.

47
00:03:21.550 --> 00:03:28.240
So a key and a value and this is extremely useful with the object if you have, like I said, not a

48
00:03:28.240 --> 00:03:30.880
sequential number as we do in this example.

49
00:03:30.880 --> 00:03:36.130
And when we implement our own graph, we're going to use an adjacent list using an object and you'll

50
00:03:36.130 --> 00:03:36.940
see what I mean.

51
00:03:37.570 --> 00:03:41.290
Finally, I want to show you the last method to represent graphs.

52
00:03:42.920 --> 00:03:46.310
It's called adjacent matrix.

53
00:03:48.160 --> 00:03:51.850
And an adjacent matrix is going to look something like this.

54
00:03:53.140 --> 00:04:00.070
This matrix is simply going to have zeros and ones indicating whether the Node X has a connection to

55
00:04:00.070 --> 00:04:01.090
node Y.

56
00:04:01.120 --> 00:04:02.860
Zero means no.

57
00:04:02.860 --> 00:04:04.360
One means yes.

58
00:04:04.480 --> 00:04:10.150
And if you have a way to graph, you can actually add a weights here instead of one and zero so they

59
00:04:10.150 --> 00:04:11.590
can actually be numbers.

60
00:04:12.100 --> 00:04:14.860
I'm not going to type this out because I'm going to bore you to death.

61
00:04:14.860 --> 00:04:20.980
But here is the same representation that we've done with edge list and adjacent list, this time with

62
00:04:21.010 --> 00:04:22.450
adjacent matrix.

63
00:04:22.960 --> 00:04:24.070
What does it mean?

64
00:04:24.490 --> 00:04:33.540
Well, index of zero has a connection with 012, so zero is connected to two.

65
00:04:33.550 --> 00:04:39.370
Then Node one is connected to two and three.

66
00:04:41.080 --> 00:04:47.440
Node two is connected to zero one and three.

67
00:04:47.440 --> 00:04:49.600
And you can see how it's very similar to here.

68
00:04:49.600 --> 00:04:57.040
And Node four is connected to one and two, just like over here.

69
00:04:57.310 --> 00:05:05.320
And once again, instead of arrays, you can use objects here and actually give it a key and a value.

70
00:05:06.030 --> 00:05:12.120
So that this, if it was an object, would be zero.

71
00:05:13.310 --> 00:05:15.230
One, two.

72
00:05:16.010 --> 00:05:17.360
And three.

73
00:05:17.480 --> 00:05:23.240
And if we go to visual go, you'll actually see that they have these three.

74
00:05:24.100 --> 00:05:29.320
Ways to describe graphs, the adjacency matrix and because it's weighted, you see that there's numbers

75
00:05:29.320 --> 00:05:30.910
here instead of zero and one.

76
00:05:31.860 --> 00:05:39.240
We have the adjacency list where it looks like here they have a hash table with the values and also

77
00:05:39.240 --> 00:05:46.140
an edge list with an extra property of the weights because this is a weighted graph and you can see

78
00:05:46.140 --> 00:05:48.570
the weights as well in the adjacency list.

79
00:05:48.720 --> 00:05:51.090
But we've just taken a look at a lot of numbers.

80
00:05:51.090 --> 00:05:55.740
I think it's time for us to build our own graph, to finalize our understanding.

81
00:05:56.160 --> 00:05:57.270
I'll see you in the next one.

82
00:05:57.750 --> 00:05:58.320
Bye bye.

