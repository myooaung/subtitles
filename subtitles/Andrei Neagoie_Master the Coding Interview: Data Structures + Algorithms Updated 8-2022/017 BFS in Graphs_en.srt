1
00:00:01,500 --> 00:00:02,400
Welcome back.

2
00:00:02,730 --> 00:00:09,180
I encourage you to play with Visual Algo and create your own graph as I talk throughout these videos

3
00:00:09,180 --> 00:00:11,760
about death for search and breath first search.

4
00:00:11,770 --> 00:00:18,120
When it comes to graph traversal, the way you can create a graph is to just simply say, draw a graph

5
00:00:18,330 --> 00:00:21,600
and you'll be able to create something like this yourself.

6
00:00:21,600 --> 00:00:25,470
And then you can explore both depth first and breadth for searches.

7
00:00:26,460 --> 00:00:32,640
Now I'm going to have this animation running while I'm talking, but we'll start off with zero and do

8
00:00:32,640 --> 00:00:34,080
a breath for search.

9
00:00:35,330 --> 00:00:42,830
The unique thing about breadth for search is that it lends itself really nicely to determining the shortest

10
00:00:42,830 --> 00:00:44,690
path between any note.

11
00:00:46,950 --> 00:00:52,200
Especially when it comes to saying, hey, what's the closest node to zero?

12
00:00:52,410 --> 00:00:56,520
That's a really easy question to ask when it comes to breadth for search.

13
00:00:56,970 --> 00:01:02,850
And we've already talked about how that is used in recommendation engines, peer to peer networks,

14
00:01:02,850 --> 00:01:05,069
even Google Maps, right?

15
00:01:05,340 --> 00:01:08,910
Facebook friend requests and Instagram recommendations.

16
00:01:09,060 --> 00:01:17,040
Breadth first search or BFS allows us to convert a graph essentially into a tree because we know who

17
00:01:17,040 --> 00:01:23,400
the children of the pair notice and then the grandchildren and then so on and so forth.

18
00:01:24,000 --> 00:01:29,940
So if we remember this diagram over here, we now understand that breath first search.

19
00:01:29,940 --> 00:01:37,470
Yes, it uses more memory to keep track of the parent nodes and the children nodes of that level.

20
00:01:38,010 --> 00:01:41,010
But it also helps us determine the shortest path.

21
00:01:41,010 --> 00:01:47,820
And it's better if we know that a node we're looking for is close to us because it's going to look at

22
00:01:47,820 --> 00:01:54,660
the closer nodes first so that when you get asked this in an interview, you know this algorithm is

23
00:01:54,660 --> 00:01:57,270
going to work well for these types of questions.

24
00:01:57,990 --> 00:02:05,460
Because Breath First search is crafted to help us determine the shortest path between two nodes in a

25
00:02:05,460 --> 00:02:06,020
graph.

