WEBVTT
1
00:00:00.920 --> 00:00:02.120
Welcome back.

2
00:00:02.360 --> 00:00:05.030
Let's talk about some new data structures.

3
00:00:05.060 --> 00:00:09.050
Over here we have stacks and Qs.

4
00:00:09.320 --> 00:00:13.220
Qs with probably the most confusing spelling of all time.

5
00:00:13.280 --> 00:00:18.800
Don't worry, even I who am fluent in English, have a really difficult time spelling this.

6
00:00:18.800 --> 00:00:21.110
But it's Qs anyway.

7
00:00:21.140 --> 00:00:26.900
Don't worry, the data structure itself is not as confusing as the spelling of this data structure.

8
00:00:27.640 --> 00:00:30.400
We're going to learn, too, at the same time.

9
00:00:30.790 --> 00:00:34.360
Stacks and Q's, because they're very similar.

10
00:00:34.720 --> 00:00:37.780
They are both what we call linear data structures.

11
00:00:38.080 --> 00:00:42.160
And linear data structures allow us to traverse.

12
00:00:42.160 --> 00:00:46.000
That is, go through data elements sequentially one by one.

13
00:00:46.680 --> 00:00:51.300
In which only one data element can be directly reached.

14
00:00:51.480 --> 00:00:57.420
And this will become more clear to you as we talk more about Stacks and Qs throughout the next couple

15
00:00:57.420 --> 00:00:58.140
of videos.

16
00:00:58.920 --> 00:01:06.000
Now the reason that these are very similar is that they can be implemented in similar ways.

17
00:01:06.000 --> 00:01:12.330
And the main difference is only how items get removed from this data structure.

18
00:01:12.480 --> 00:01:18.450
You see, unlike an array in stacks and Qs, there's no random access operation.

19
00:01:18.660 --> 00:01:27.480
You mainly use stacks and Qs to run commands like push, peak pop, all of which deal exclusively with

20
00:01:27.480 --> 00:01:30.840
the element at the beginning or the end of the data structure.

21
00:01:31.290 --> 00:01:35.250
Now, after I said that, what was your first thought?

22
00:01:35.460 --> 00:01:42.930
Does it kind of sound limiting that with Stacks and Qs, we usually only can access the first or the

23
00:01:42.930 --> 00:01:45.150
last element in the data structure.

24
00:01:45.390 --> 00:01:47.970
Why would we ever want to use something like this?

25
00:01:48.800 --> 00:01:51.480
And this is an important topic in computer science.

26
00:01:51.500 --> 00:01:58.550
You will see that we can build things like Stacks and Qs, which are using arrays or linked lists.

27
00:01:58.880 --> 00:02:07.700
Except unlike arrays and link lists, we have less methods or less actions that we can perform on stacks

28
00:02:07.700 --> 00:02:08.360
and Qs.

29
00:02:09.060 --> 00:02:15.210
And sometimes it's good to have these higher level data structures that are built on top of lower level

30
00:02:15.210 --> 00:02:19.710
ones like link lists and arrays to limit the operations you can do on them.

31
00:02:20.310 --> 00:02:23.520
That's actually a benefit in computer science.

32
00:02:23.520 --> 00:02:30.330
Having this limited ability on a data structure is an advantage because you can control that.

33
00:02:30.330 --> 00:02:36.550
Whoever uses this data structure performs only the right operations that are efficient.

34
00:02:36.570 --> 00:02:39.990
If you give somebody all the tools in the world.

35
00:02:40.680 --> 00:02:46.260
It's a lot harder for them to operate than if you just give them two or three so that they know exactly

36
00:02:46.290 --> 00:02:47.280
what they need to do.

37
00:02:48.170 --> 00:02:53.360
Now let's talk about Stacks and Qs throughout the next couple of videos to really understand how they

38
00:02:53.360 --> 00:02:53.720
work.

39
00:02:53.720 --> 00:02:55.730
And then finally code our own.

40
00:02:56.000 --> 00:02:57.110
I'll see you in the next one.

