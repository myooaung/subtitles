WEBVTT
1
00:00:00.880 --> 00:00:01.780
Welcome back.

2
00:00:02.050 --> 00:00:05.080
Let's talk about our fifth sorting algorithm.

3
00:00:05.110 --> 00:00:09.170
QuickSort even just from the name you're thinking, huh?

4
00:00:09.190 --> 00:00:10.510
This is going to be quick.

5
00:00:11.140 --> 00:00:12.070
QuickSort.

6
00:00:12.160 --> 00:00:15.820
Just like merge sort is a divide and conquer algorithm.

7
00:00:16.830 --> 00:00:23.820
Which means and should ring a bell in your head saying that there's probably going to be o of n log

8
00:00:23.820 --> 00:00:24.270
n.

9
00:00:24.540 --> 00:00:26.880
And if you're thinking that, you're right.

10
00:00:27.760 --> 00:00:34.060
You see, QuickSort uses something called a pivoting technique to break the main list into smaller lists.

11
00:00:34.420 --> 00:00:39.430
And these smaller lists use the pivoting technique until they are sorted.

12
00:00:39.940 --> 00:00:42.310
But let me show you an animation of quicksort.

13
00:00:43.280 --> 00:00:46.190
QuickSort works like this.

14
00:00:46.980 --> 00:00:51.960
And if you're looking at this diagram like I am and you're completely confused as to what is happening,

15
00:00:52.110 --> 00:00:54.690
this describes quicksort fairly well.

16
00:00:55.140 --> 00:00:58.110
It's pretty complex to understand.

17
00:00:58.910 --> 00:01:01.400
So let me show you a better demonstration.

18
00:01:03.740 --> 00:01:05.570
I have a little diagram here.

19
00:01:05.660 --> 00:01:09.350
Let's say we have a list that looks like this.

20
00:01:09.860 --> 00:01:13.520
We have 3789521954.

21
00:01:15.730 --> 00:01:19.310
What we do here is we pick a random pivot.

22
00:01:19.330 --> 00:01:22.540
Let's say that four is going to be our pivot.

23
00:01:23.400 --> 00:01:30.930
Once we pick this pivot item, we're going to say, all right, I want all numbers that are less than

24
00:01:30.930 --> 00:01:37.440
four to come to its left and all numbers that are greater than four to come to its right.

25
00:01:39.320 --> 00:01:40.460
So what do we do?

26
00:01:40.490 --> 00:01:43.310
Well, we start comparing the numbers.

27
00:01:43.310 --> 00:01:45.440
We look at three and four.

28
00:01:45.470 --> 00:01:45.980
All right.

29
00:01:45.980 --> 00:01:47.240
Three is to the left of four.

30
00:01:47.270 --> 00:01:47.890
That's fine.

31
00:01:47.900 --> 00:01:49.820
What about seven and four?

32
00:01:50.090 --> 00:01:50.380
Hmm?

33
00:01:50.390 --> 00:01:54.350
Seven is higher than four, so it should be to its right.

34
00:01:54.380 --> 00:02:00.920
We're going to move four to the left position to make space for seven.

35
00:02:01.900 --> 00:02:10.960
Seven jumps over to the right and we swap the five that four came into into the seven position.

36
00:02:12.020 --> 00:02:13.970
And now we check five and four.

37
00:02:14.180 --> 00:02:15.860
Oh, we've got to do the same thing.

38
00:02:15.860 --> 00:02:19.880
We put five to the right of four and swap nine in there.

39
00:02:19.910 --> 00:02:22.010
Once again, nine is higher than four.

40
00:02:22.010 --> 00:02:23.780
So nine comes to the right of four.

41
00:02:24.570 --> 00:02:26.000
Then we look at it.

42
00:02:26.010 --> 00:02:27.270
Same thing with eight.

43
00:02:27.270 --> 00:02:29.900
And then finally five and four.

44
00:02:29.910 --> 00:02:33.450
Well, four and five switch places.

45
00:02:34.670 --> 00:02:39.080
And now we have a list that has four as the pivot.

46
00:02:39.200 --> 00:02:46.250
And we know that four is going to be in that position in the array and everything else to the left of

47
00:02:46.250 --> 00:02:51.830
it and to the right of it still needs to get sorted, but at least we know where four stands.

48
00:02:52.590 --> 00:02:58.950
From there, using divide and conquer, we now split the list and we do the same thing.

49
00:02:58.950 --> 00:03:06.150
We get a pivot on the left list, which will be two, and we say everything to the right of to should

50
00:03:06.150 --> 00:03:06.810
be higher.

51
00:03:06.810 --> 00:03:08.940
Everything to the left of two should be lower.

52
00:03:08.940 --> 00:03:11.910
And we have this left list sorted.

53
00:03:12.850 --> 00:03:13.600
On the right.

54
00:03:13.600 --> 00:03:17.620
We do the same thing until we split the list with seven in the middle.

55
00:03:17.620 --> 00:03:19.330
And we keep breaking things down.

56
00:03:19.330 --> 00:03:22.060
Keep breaking things down like a tree.

57
00:03:22.060 --> 00:03:24.200
And this is where divide and conquer comes from.

58
00:03:24.220 --> 00:03:29.650
Until we have all the individual lists sorted and we combine them.

59
00:03:30.040 --> 00:03:34.960
Now, you might have two questions for me looking at this.

60
00:03:35.440 --> 00:03:39.580
One is how do we even pick this pivot point?

61
00:03:40.180 --> 00:03:42.000
And that is kind of random.

62
00:03:42.010 --> 00:03:44.170
It really, really depends on the situation.

63
00:03:44.170 --> 00:03:47.740
But as you see here, we just happen to pick the pivot point.

64
00:03:47.740 --> 00:03:50.590
As always, the last item in the array.

65
00:03:51.040 --> 00:03:56.200
The second is, how am I ever going to code this?

66
00:03:56.800 --> 00:04:00.160
And this is pretty challenging and I don't expect you to get it.

67
00:04:00.160 --> 00:04:03.370
I'll leave code for you and you can try it out if you want.

68
00:04:03.850 --> 00:04:12.040
But the best way to understand QuickSort is my favorite Hungarian dance ever.

69
00:04:12.810 --> 00:04:14.380
I'm not going to play this for you.

70
00:04:14.400 --> 00:04:15.900
You can play it on your own.

71
00:04:15.900 --> 00:04:18.540
But I swear I could watch this all day.

72
00:04:18.570 --> 00:04:20.209
I think the dancing is awesome.

73
00:04:20.220 --> 00:04:21.630
The music is awesome.

74
00:04:21.630 --> 00:04:25.380
And well, if you speed it up to two times, it's even better.

75
00:04:26.580 --> 00:04:27.810
Here in this video.

76
00:04:27.810 --> 00:04:28.890
Let me mute this.

77
00:04:29.430 --> 00:04:36.510
You'll see that this person in the black hat is going to be the pivot and everybody is comparing.

78
00:04:36.510 --> 00:04:43.920
The person in the red hat is the pointer, I guess, or the item that's being compared to the pivot.

79
00:04:45.020 --> 00:04:50.750
And you'll see here that as soon as we get to two, this person is number three, they're going to say,

80
00:04:50.750 --> 00:04:52.790
oh, you should be to the left of me.

81
00:04:52.910 --> 00:04:54.940
So they're going to dance.

82
00:04:54.950 --> 00:04:56.800
By the way, great dancing moves.

83
00:04:56.810 --> 00:04:58.190
I need to learn these steps.

84
00:04:58.280 --> 00:05:00.470
And two and three.

85
00:05:01.370 --> 00:05:03.710
Are now in different locations.

86
00:05:05.770 --> 00:05:08.260
And now we compare zero and three.

87
00:05:08.920 --> 00:05:16.450
Now this implementation and the visual that I just showed you is a little bit different, but the idea

88
00:05:16.450 --> 00:05:16.960
is the same.

89
00:05:16.960 --> 00:05:22.130
QuickSort can be implemented in different ways, but the idea of a pivot is the same.

90
00:05:22.150 --> 00:05:29.270
I encourage you to watch this video to fully understand how how it works underneath the hood.

91
00:05:29.290 --> 00:05:31.510
But let's go over the main concepts.

92
00:05:32.420 --> 00:05:35.630
QuickSort is really, really useful.

93
00:05:36.170 --> 00:05:42.110
And between QuickSort and Mercer, I would say those are the most used sorting algorithms.

94
00:05:43.070 --> 00:05:45.080
You'll notice here two things.

95
00:05:45.440 --> 00:05:51.180
One is that quick sorts space complexity is really, really good.

96
00:05:51.200 --> 00:05:57.200
I mean, not as good as bubble sort or insertion sort or selection sort, but it's still better than

97
00:05:57.200 --> 00:05:57.950
merge sort.

98
00:05:58.220 --> 00:06:01.430
It's worst case is O of n squared.

99
00:06:02.270 --> 00:06:08.900
That is because it can be over and squared when the pivot is the smallest or the largest item in the

100
00:06:08.900 --> 00:06:13.370
list, because then you're not really splitting the list in half.

101
00:06:13.790 --> 00:06:19.220
And because of this, you really want to make sure that you pick a good pivot for quicksort.

102
00:06:19.400 --> 00:06:21.890
You'll get the better space complexity.

103
00:06:21.890 --> 00:06:24.320
But the worst case could be bad.

104
00:06:24.890 --> 00:06:27.770
So in those cases, merge sort might be better.

105
00:06:28.220 --> 00:06:31.420
If your list was pre sorted for whatever reason.

106
00:06:31.430 --> 00:06:37.340
And in that list, if we pick the pivot to be the first item or the last item, then our sorting routine

107
00:06:37.340 --> 00:06:42.680
here would take a very, very long time because again, the list will not really be split in half.

108
00:06:42.980 --> 00:06:44.930
And ideally in a quicksort.

109
00:06:45.020 --> 00:06:48.410
You're picking the pivot intelligently based on your list.

110
00:06:48.680 --> 00:06:54.410
Now quicksort, there's a lot of variance to it and there's different implementations.

111
00:06:55.340 --> 00:06:58.220
But I want you to take this away from this video.

112
00:06:58.250 --> 00:07:05.510
QuickSort is usually the fastest on average, but the one downside is that it has some pretty nasty

113
00:07:05.510 --> 00:07:07.340
worst case behaviors.

114
00:07:07.400 --> 00:07:13.730
So if you have to guarantee no bad data or you can't guarantee that the pivot is going to be good,

115
00:07:14.270 --> 00:07:16.410
then you should be avoiding quicksort.

116
00:07:16.430 --> 00:07:19.850
But on average, it's usually the best sorting algorithm.

117
00:07:21.960 --> 00:07:22.470
All right.

118
00:07:22.470 --> 00:07:30.480
So we've learned five different sorting algorithms, but the most important part is when should I use

119
00:07:30.480 --> 00:07:31.140
what?

120
00:07:31.830 --> 00:07:37.770
In the next video, we're going to go over exactly that, followed by a fun little exercise.

121
00:07:37.890 --> 00:07:38.940
I'll see you in that one.

