WEBVTT
1
00:00:01.210 --> 00:00:02.080
Welcome back.

2
00:00:02.540 --> 00:00:09.020
Up until this point, we talked about singly linked list and we should have a good idea of how they

3
00:00:09.020 --> 00:00:09.500
work.

4
00:00:09.800 --> 00:00:13.250
But what is a doubly linked list?

5
00:00:14.310 --> 00:00:19.470
Doubly link list is similar, except that it links to the node before it.

6
00:00:19.500 --> 00:00:21.750
Let's have a look at a little animation here.

7
00:00:22.460 --> 00:00:26.840
We have a head node, let's say we just have one node.

8
00:00:26.840 --> 00:00:28.660
You see that we have an extra block here.

9
00:00:28.670 --> 00:00:30.660
We are not really sure what this does yet.

10
00:00:30.680 --> 00:00:38.090
Now, if we wanted to add a new block to this list, a doubly linked list, and we wanted to add a node

11
00:00:38.090 --> 00:00:46.040
that contains the value ten, well, we would now have a pointer to the next node.

12
00:00:46.430 --> 00:00:48.350
We'd also have a pointer.

13
00:00:48.350 --> 00:00:51.590
This is the new part to the previous node.

14
00:00:52.040 --> 00:00:55.010
And the new node is going to point to no.

15
00:00:56.160 --> 00:00:58.860
And this now becomes the tale.

16
00:00:59.650 --> 00:01:08.530
If we added a another node, well, we'd have the ten node point to the new node.

17
00:01:08.830 --> 00:01:10.570
We'd also have the new node.

18
00:01:11.990 --> 00:01:19.250
Point to the previous node, and then finally that becomes a tail, which means it points to no.

19
00:01:20.130 --> 00:01:22.630
And that's what a doubly linked list is.

20
00:01:22.650 --> 00:01:29.940
It has an extra little block here, an extra piece of data that also links to the previous node.

21
00:01:31.040 --> 00:01:31.760
Now.

22
00:01:31.760 --> 00:01:34.010
Why do you think that's important?

23
00:01:34.370 --> 00:01:39.440
Doubly link lists allow us to traverse our list backwards.

24
00:01:39.800 --> 00:01:46.010
So up until now, we were only able to go from the beginning all the way to the end with a doubly linked

25
00:01:46.010 --> 00:01:46.340
list.

26
00:01:46.340 --> 00:01:49.790
I can start from the end and go backwards.

27
00:01:50.660 --> 00:01:52.250
In a singly linked list.

28
00:01:52.250 --> 00:01:59.840
There is no way for me to know what comes before ten, what comes before this node in a doubly linked

29
00:01:59.840 --> 00:02:00.200
list?

30
00:02:00.200 --> 00:02:01.340
That is no problem.

31
00:02:01.580 --> 00:02:09.139
It's exactly the same as the singly linked list, but contains this additional pointer to the previous

32
00:02:09.139 --> 00:02:16.130
node and searching through a doubly linked list can actually be a little bit more efficient.

33
00:02:16.790 --> 00:02:23.150
And lookup can technically be o of n divided by two because we can start at both ends.

34
00:02:23.150 --> 00:02:32.240
And if we know in which half of the list what we're looking for is, we can pick the optimum place to

35
00:02:32.240 --> 00:02:32.810
start.

36
00:02:33.490 --> 00:02:41.950
Now the lookup here is still o of NW because if you remember with our rule book with o o of NW divided

37
00:02:41.950 --> 00:02:47.470
by two is still of NW, but it's still technically a little bit faster.

38
00:02:47.650 --> 00:02:53.650
Now the downside to a double link list, as you can see, is that we might have to hold a little bit

39
00:02:53.650 --> 00:02:56.980
more memory, an additional block of memory.

40
00:02:57.370 --> 00:03:03.280
And we have a video talking about when to use doubly link list and a singly linked list later on.

41
00:03:04.180 --> 00:03:09.550
But to understand this properly, I think we should convert our singly linked list that we created in

42
00:03:09.550 --> 00:03:12.610
the previous videos to a doubly link list.

43
00:03:13.060 --> 00:03:15.430
So let's go have a look at how to do that.

44
00:03:15.520 --> 00:03:16.690
I'll see you in the next one.

45
00:03:16.990 --> 00:03:17.590
Bye bye.

