WEBVTT
1
00:00:01.020 --> 00:00:02.820
Depth first search.

2
00:00:02.820 --> 00:00:06.810
Unlike a breadth first search is a little bit different.

3
00:00:07.900 --> 00:00:16.600
The search follows one branch of the tree down as many levels as possible until the target node is found

4
00:00:16.600 --> 00:00:18.580
or the end is reached.

5
00:00:19.400 --> 00:00:27.710
When the search can't go on any further, it continues at the nearest ancestor with an unexplored child.

6
00:00:27.740 --> 00:00:28.640
Let me show you.

7
00:00:28.910 --> 00:00:30.620
We start off with nine.

8
00:00:30.740 --> 00:00:32.600
Then we go to six.

9
00:00:32.990 --> 00:00:34.730
Then we go to one.

10
00:00:34.730 --> 00:00:36.510
And we've reached a leaf node.

11
00:00:36.530 --> 00:00:37.790
There's no more children.

12
00:00:37.790 --> 00:00:44.240
So we go back up to six to our ancestor and then see if there's any more unexplored children.

13
00:00:44.240 --> 00:00:45.990
In this case, we haven't gone to four.

14
00:00:46.010 --> 00:00:48.020
So let's go back up to four.

15
00:00:48.290 --> 00:00:53.600
And now we go up because there's no more children all the way up to nine and say, all right, let's

16
00:00:53.600 --> 00:00:54.560
go to the right now.

17
00:00:54.590 --> 00:01:01.370
We go to 12, then 34, and then come back up and then search 45 as well.

18
00:01:03.350 --> 00:01:11.150
Now depth for search has a lower memory requirement than breadth for search because it's not necessary

19
00:01:11.150 --> 00:01:16.880
to store all the child pointers at each level, something that we'll see when we actually code it.

20
00:01:18.040 --> 00:01:24.250
The idea with that first search is that we want to go as deep as possible into a graph, usually starting

21
00:01:24.250 --> 00:01:30.880
from the left side and then start going to the right until the traversal of the tree is done.

22
00:01:31.180 --> 00:01:34.270
As the name suggests, we go depth first.

23
00:01:34.270 --> 00:01:40.840
That is deep first versus breath depth research looks something like this.

24
00:01:40.840 --> 00:01:47.140
Once again, we go all the way down Come back up all the way down Come back up all the way down Come

25
00:01:47.140 --> 00:01:50.080
back up all the way down as you can see.

26
00:01:50.080 --> 00:01:51.280
Going deep first.

27
00:01:51.280 --> 00:01:54.100
Then keep going to the right.

28
00:01:55.410 --> 00:02:00.640
And I like to think of depth for search as like walking through a maze.

29
00:02:00.660 --> 00:02:01.300
Right.

30
00:02:01.320 --> 00:02:03.120
We're going as far as we can.

31
00:02:03.120 --> 00:02:08.729
And when we hit a dead end, well, you turn back around and go to the next point where you can make

32
00:02:08.729 --> 00:02:13.800
perhaps a left or right turn until you get to the end of the maze or the maze ends.

33
00:02:14.670 --> 00:02:24.570
So if we go back to our code and we look at breadth for search we did here for search, what about depth

34
00:02:24.570 --> 00:02:25.450
for search?

35
00:02:25.470 --> 00:02:26.580
How would that look?

36
00:02:28.240 --> 00:02:30.700
Well, from what we know.

37
00:02:31.150 --> 00:02:35.370
And hint, hint, there's going to be different variations of deaf research coming up.

38
00:02:35.380 --> 00:02:38.740
But from what we know, we would start off with nine.

39
00:02:39.590 --> 00:02:42.380
Then four, then one.

40
00:02:42.710 --> 00:02:44.390
Then go back up to four.

41
00:02:44.390 --> 00:02:45.950
And then find six.

42
00:02:46.130 --> 00:02:47.090
Go back up.

43
00:02:47.090 --> 00:02:48.290
Find 20.

44
00:02:48.740 --> 00:02:50.630
Go to the left 15.

45
00:02:50.930 --> 00:02:53.480
And go to the right 170.

46
00:02:54.050 --> 00:02:59.580
So our list is a little bit different than breadth for search.

47
00:02:59.600 --> 00:03:06.470
We have different orders, but why do we have these two ways of exploring a tree or a graph?

48
00:03:06.680 --> 00:03:08.630
What's the pros and cons?

49
00:03:08.630 --> 00:03:10.760
And up until now I've just been talking.

50
00:03:10.760 --> 00:03:15.260
But you might not understand why one is better than the other.

51
00:03:15.860 --> 00:03:20.350
And before we implement this into code, I want to go over the pros and cons of each.

52
00:03:20.360 --> 00:03:22.190
So let's do that in the next video.

