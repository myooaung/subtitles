WEBVTT
1
00:00:01.020 --> 00:00:08.340
In order to understand how dynamic programming works, we need to understand what caching means.

2
00:00:08.880 --> 00:00:13.770
Caching is a way to store values so you can use them later on.

3
00:00:14.130 --> 00:00:20.340
Ideally, you can think of caching as a backpack they take to school.

4
00:00:21.080 --> 00:00:23.270
Instead of going all the way home.

5
00:00:23.270 --> 00:00:30.950
When you need something like a pencil, you have a small box on your back that holds items that you

6
00:00:30.950 --> 00:00:37.550
need so that when you go to school, you can just reuse them fast over and over.

7
00:00:38.160 --> 00:00:40.530
Now that's a bit of a silly example.

8
00:00:40.560 --> 00:00:48.690
Caching is just a way for us to speed up programs and hold some piece of data in an easily accessible

9
00:00:48.690 --> 00:00:49.320
box.

10
00:00:49.770 --> 00:00:55.680
And memorization is a specific form of caching that we're going to be talking about, because we use

11
00:00:55.680 --> 00:00:57.420
it a lot in dynamic programming.

12
00:00:57.960 --> 00:01:02.340
But instead of just talking about it, let's actually demonstrate it in code.

13
00:01:04.269 --> 00:01:06.130
The way we can catch things.

14
00:01:06.370 --> 00:01:12.880
Well, let's imagine we have a function that says we want to add to 80.

15
00:01:13.270 --> 00:01:15.130
And this function takes the number.

16
00:01:15.820 --> 00:01:25.900
And all it does is return the value of an that is a parameter we give it and adds 80 to it.

17
00:01:26.690 --> 00:01:30.230
So that when we run the function add to 80.

18
00:01:30.950 --> 00:01:35.420
And let's say we put in five, we get 85.

19
00:01:36.080 --> 00:01:37.670
Nice and simple, right?

20
00:01:37.850 --> 00:01:40.520
But if I run this function again.

21
00:01:42.650 --> 00:01:46.820
I'll have to go through this step again and add a D to that answer.

22
00:01:46.820 --> 00:01:50.020
And if I do this again, again, do the same thing.

23
00:01:50.030 --> 00:01:52.910
I've ran the calculation three times.

24
00:01:53.750 --> 00:01:58.970
But what if this operation took a really, really long time?

25
00:01:59.420 --> 00:02:06.440
What if I had a console log here and we can imagine that this operation takes multiple seconds?

26
00:02:06.650 --> 00:02:07.970
It takes a long time.

27
00:02:08.630 --> 00:02:15.890
Every time we run this function, we'll have to run long time, three times and go through the step

28
00:02:16.340 --> 00:02:17.450
one by one.

29
00:02:17.480 --> 00:02:23.960
Even though we've done the exact same calculation three times, is there a way that we can optimize

30
00:02:23.960 --> 00:02:24.440
this?

31
00:02:25.100 --> 00:02:30.530
And this is where we can use caching and memorization?

32
00:02:31.010 --> 00:02:34.730
Let's improve the above function by doing something different.

33
00:02:35.090 --> 00:02:41.120
I'm going to create a new object called Cache that's going to hold an empty object.

34
00:02:42.330 --> 00:02:44.160
We're also going to have a function.

35
00:02:45.090 --> 00:02:48.030
That is now going to be called memorized.

36
00:02:48.850 --> 00:02:49.810
Not memorized.

37
00:02:49.810 --> 00:02:50.740
Memorized.

38
00:02:52.100 --> 00:02:55.400
Add to 80, that takes a number.

39
00:02:56.030 --> 00:03:01.480
And inside here, we're going to do something a little bit different than the above.

40
00:03:01.490 --> 00:03:06.500
We're still going to add to 80, but we're going to do it in a special way.

41
00:03:06.890 --> 00:03:18.230
I'm going to say that if NW is in cash and this is a way to check if a property exists in an object

42
00:03:18.230 --> 00:03:19.130
in JavaScript.

43
00:03:19.130 --> 00:03:24.770
So it's similar to me doing cash dot NW to check for the property.

44
00:03:25.550 --> 00:03:27.680
This one just reads better, so I'm going to keep it like that.

45
00:03:27.680 --> 00:03:37.100
So if NW exists in cash, so if we've cashed it before, then simply return the cash dot and.

46
00:03:38.670 --> 00:03:39.870
Or cash and.

47
00:03:41.580 --> 00:03:43.530
So return the cast value.

48
00:03:43.860 --> 00:03:46.680
But obviously it's empty the first time around.

49
00:03:46.680 --> 00:03:48.840
So this is not going to work.

50
00:03:49.640 --> 00:03:53.330
If there's nothing in the cache, which is the case the first time around.

51
00:03:53.330 --> 00:03:57.110
Well, we have an LSE statement and in here.

52
00:03:58.690 --> 00:04:01.990
We're going to have our cash.

53
00:04:02.810 --> 00:04:03.500
An.

54
00:04:04.660 --> 00:04:10.480
Which doesn't exist yet and assign it and plus 80.

55
00:04:11.860 --> 00:04:16.000
So that after this, if we do something like.

56
00:04:16.920 --> 00:04:17.940
Memorized.

57
00:04:17.940 --> 00:04:19.860
Add to 85.

58
00:04:20.850 --> 00:04:23.850
It's going to say five plus 80.

59
00:04:24.150 --> 00:04:24.900
So.

60
00:04:26.130 --> 00:04:34.590
And here we're going to cash the property five to have a value of 85, which is what we're doing here,

61
00:04:34.950 --> 00:04:43.410
so that the next time around we're doing something like this, we go through the if statement, find

62
00:04:43.410 --> 00:04:50.520
the fact that we've already calculated five and just do simple property access, which as we know is

63
00:04:50.520 --> 00:04:54.720
over one time is super fast with a hash table like this.

64
00:04:55.970 --> 00:04:58.760
Let's complete this example to show you how it works.

65
00:04:59.180 --> 00:05:01.280
I'm just simply going to.

66
00:05:02.800 --> 00:05:03.550
Return.

67
00:05:07.880 --> 00:05:08.420
And.

68
00:05:10.040 --> 00:05:11.690
Since we just filled it up here.

69
00:05:11.930 --> 00:05:19.130
And let's just have a console log here that does long time to see that we're doing the calculation.

70
00:05:19.130 --> 00:05:20.420
That takes a long time.

71
00:05:21.230 --> 00:05:23.690
The first time I run this function.

72
00:05:24.970 --> 00:05:28.900
I get 85 and oops, I have the cash prefilled.

73
00:05:28.900 --> 00:05:30.910
So it didn't calculate the long time.

74
00:05:30.910 --> 00:05:31.960
Let's try that again.

75
00:05:32.230 --> 00:05:33.010
Click Run.

76
00:05:33.820 --> 00:05:34.810
Long time.

77
00:05:34.810 --> 00:05:40.960
The first pass through it went through here and did this calculation that hypothetically is going to

78
00:05:40.960 --> 00:05:42.260
take a really long time.

79
00:05:42.280 --> 00:05:47.440
Again, we're using a nice easy example here, but you can imagine this being a calculation that takes

80
00:05:47.440 --> 00:05:49.000
a long time, many seconds.

81
00:05:50.020 --> 00:05:51.880
What if we do this again?

82
00:05:52.390 --> 00:05:54.640
We can console.log here.

83
00:05:57.880 --> 00:06:01.330
To make sure that we capture these values.

84
00:06:04.480 --> 00:06:07.270
And we'll label them one.

85
00:06:08.530 --> 00:06:12.130
And two, just so we can distinguish them.

86
00:06:12.490 --> 00:06:16.210
So the first call and the second call, if I hit run.

87
00:06:17.930 --> 00:06:20.090
Look at that first time around.

88
00:06:20.090 --> 00:06:23.410
We call long time and we calculate to 85.

89
00:06:23.420 --> 00:06:31.370
But the second time around, because this value was in the cash, we didn't have to do this long calculation

90
00:06:31.370 --> 00:06:33.770
and we just returned it immediately.

91
00:06:35.180 --> 00:06:38.510
So what is memorisation exactly?

92
00:06:39.300 --> 00:06:45.210
Well, memorization is a specific form of caching that involves caching the return value.

93
00:06:46.270 --> 00:06:47.260
Okay function.

94
00:06:47.260 --> 00:06:53.410
That is the return value of this function based on its parameters.

95
00:06:53.710 --> 00:07:03.130
And if the parameter of this function doesn't change like it is here, then it's memorized.

96
00:07:03.130 --> 00:07:09.780
That is, it uses the cash because it's calculated the same thing before with the same parameter, and

97
00:07:09.790 --> 00:07:18.700
it will return a cached version of the function it's memorized if the parameter changes.

98
00:07:19.120 --> 00:07:20.980
Well, it's a different.

99
00:07:21.710 --> 00:07:23.570
Parameter that it's never seen before.

100
00:07:23.570 --> 00:07:26.240
So it's going to calculate both times.

101
00:07:26.980 --> 00:07:27.970
Different things.

102
00:07:28.030 --> 00:07:30.340
And I just noticed here that this shouldn't be five.

103
00:07:30.340 --> 00:07:31.060
It should be.

104
00:07:31.060 --> 00:07:31.870
And over here.

105
00:07:31.870 --> 00:07:33.020
So it's dynamic.

106
00:07:33.040 --> 00:07:33.730
There you go.

107
00:07:33.730 --> 00:07:34.480
That's better.

108
00:07:35.470 --> 00:07:42.790
So remember, this memorization is simply a way to remember a solution to a problem.

109
00:07:42.790 --> 00:07:45.790
So you don't have to calculate it again.

