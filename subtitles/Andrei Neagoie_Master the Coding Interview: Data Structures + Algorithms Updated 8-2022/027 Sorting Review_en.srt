1
00:00:00,940 --> 00:00:01,430
Whoo!

2
00:00:01,540 --> 00:00:03,550
Another section done.

3
00:00:03,610 --> 00:00:09,130
And we covered sorting, specifically sorting algorithm in this section.

4
00:00:09,250 --> 00:00:15,310
Most of the time, when talking about sorting algorithms, we're going to be talking about o of n log

5
00:00:15,310 --> 00:00:15,820
n.

6
00:00:16,270 --> 00:00:21,550
We learned that there is a ton of sorting algorithms and we covered the main ones that get used more

7
00:00:21,550 --> 00:00:22,120
often.

8
00:00:22,210 --> 00:00:28,120
If you're really excited about the topic and you find this interesting, then well, good for you.

9
00:00:28,120 --> 00:00:29,270
You're one of few.

10
00:00:29,290 --> 00:00:32,920
I encourage you to search different sorting algorithms.

11
00:00:33,130 --> 00:00:40,540
But to review quicksort you want to use when your average case performance matters more than the worst

12
00:00:40,540 --> 00:00:41,740
case performance.

13
00:00:42,010 --> 00:00:49,720
Because QuickSort allows us to sort in own log n, but in worst case in o of n squared.

14
00:00:50,720 --> 00:00:52,520
Mercer, on the other hand.

15
00:00:53,280 --> 00:01:01,080
Is great because it's always o of n log n, it's also stable, which means that it always gives the

16
00:01:01,080 --> 00:01:02,980
same results in order.

17
00:01:03,000 --> 00:01:05,040
If two items are the same.

18
00:01:05,430 --> 00:01:12,210
Although the space complexity is a little bit higher than quicksort, it's definitely a useful sort.

19
00:01:12,840 --> 00:01:18,960
We also talked about insertion sort, selection sort and bubble sort.

20
00:01:19,590 --> 00:01:24,240
Those are fun when you're doing something quick and dirty and you want to just experiment around with

21
00:01:24,240 --> 00:01:27,630
sorting, but in real life you're not going to use them.

22
00:01:27,780 --> 00:01:34,560
And most likely in real life you're using the framework or languages or libraries sorting algorithm.

23
00:01:35,390 --> 00:01:39,140
Their advantage is that they're fairly easy to implement in code.

24
00:01:40,950 --> 00:01:44,250
And during the interview you might say something like this.

25
00:01:44,250 --> 00:01:50,250
In those rare cases that they ask you to implement a sorting algorithm, you'll say, Well, because

26
00:01:50,250 --> 00:01:55,980
we have a time constraint, I would like to use something naive and not efficient, like bubble sort,

27
00:01:55,980 --> 00:01:57,880
which is slow in real life.

28
00:01:57,900 --> 00:02:03,450
Instead of implementing something like merge sort, if it's okay with you because because we can assume

29
00:02:03,450 --> 00:02:09,360
that merge sort is something that we can implement with a library or fairly easily with documentation.

30
00:02:09,960 --> 00:02:15,420
Or you can say something like we can just use Mercer to divide and conquer the code to make it more

31
00:02:15,420 --> 00:02:16,110
efficient.

32
00:02:16,110 --> 00:02:21,360
And this way you show the interviewer that yes, you can implement sorting like bubble sort, but you

33
00:02:21,360 --> 00:02:26,700
also know about things like Mercer to make it more efficient without having to actually implement it.

34
00:02:28,130 --> 00:02:34,880
So by the end of this all, I hope you now understand the trade offs where you can look at sorting algorithms

35
00:02:34,880 --> 00:02:42,920
and decide based on their speed, stability and their readability whether the input is already sorted

36
00:02:42,920 --> 00:02:43,940
or nearly sorted.

37
00:02:43,940 --> 00:02:45,440
How large is the input?

38
00:02:45,680 --> 00:02:48,320
You can make the right decision on sorting.

39
00:02:50,230 --> 00:02:51,280
I'll see you in the next one.

40
00:02:51,820 --> 00:02:52,360
Bye bye.

