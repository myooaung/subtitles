1
00:00:01,200 --> 00:00:03,240
It's time for another exercise.

2
00:00:03,810 --> 00:00:07,370
We've learned how to create a stack data structure.

3
00:00:07,380 --> 00:00:10,200
But what about a Q data structure?

4
00:00:10,890 --> 00:00:15,180
Luckily for us, a lot of the principles are going to be the same.

5
00:00:15,180 --> 00:00:21,390
And if you are able to understand how the stack data structure works, then you should have no problem

6
00:00:21,390 --> 00:00:23,370
building a Q data structure.

7
00:00:24,590 --> 00:00:32,299
I've created a template to start us off here, and your job is to create these three methods peak,

8
00:00:32,299 --> 00:00:34,300
which we're familiar with.

9
00:00:34,310 --> 00:00:41,840
We want to peak and get the very first item in our queue or our line, as I like to call it.

10
00:00:42,950 --> 00:00:49,220
And in our constructor, instead of having top and bottom like we did with a stack, we have first and

11
00:00:49,220 --> 00:00:52,420
last, whose first in line, whose last in line.

12
00:00:52,430 --> 00:00:54,770
And obviously a length of zero.

13
00:00:56,540 --> 00:01:01,220
And your job is to create and fill out these methods.

14
00:01:01,940 --> 00:01:08,780
On cue, remember is to add to the Q and dx q is to remove from the Q.

15
00:01:09,550 --> 00:01:16,660
Remember that the difference between a stack that uses pop is that DQ removes from the front of the

16
00:01:16,660 --> 00:01:18,820
list whatever is first.

17
00:01:19,800 --> 00:01:26,040
And again, if you want, you can create another method called is empty and your goal is to create this

18
00:01:26,040 --> 00:01:31,860
queue so that you can create a waitlist app where joy gets in line.

19
00:01:31,860 --> 00:01:39,120
Then Matt gets in line, then Pavel gets in line, then Samir gets in line, and then you're queuing

20
00:01:39,120 --> 00:01:43,380
them one by one with first come, first serve basis.

21
00:01:44,880 --> 00:01:47,370
Good luck and I'll see you in The Solution video.

