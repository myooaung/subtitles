1
00:00:00,570 --> 00:00:01,470
Welcome back.

2
00:00:02,060 --> 00:00:04,730
I'm about to show you my favorite animation of the course.

3
00:00:05,030 --> 00:00:06,110
I'm very proud of it.

4
00:00:06,110 --> 00:00:08,450
So don't laugh at me if you think it's silly.

5
00:00:08,900 --> 00:00:17,660
I like to think of recursion as this scenario where you have this tap pouring water into a glass for

6
00:00:17,660 --> 00:00:21,500
this little man that's sitting on the couch watching TV.

7
00:00:22,040 --> 00:00:27,500
And when I think about it, recursion, I like to think that they have two big problems.

8
00:00:28,620 --> 00:00:33,780
One is that, well, they're kind of difficult to understand at first.

9
00:00:34,020 --> 00:00:39,990
The second is that we can have a case like this where I'm pouring water into a glass, I'm pouring water

10
00:00:39,990 --> 00:00:42,240
into a glass and pouring water into a glass.

11
00:00:42,240 --> 00:00:47,970
And that is me calling the function over and over and over.

12
00:00:48,330 --> 00:00:53,130
And as we keep going, as we keep going, it fills up the cup past its limit.

13
00:00:53,130 --> 00:00:54,060
It keeps going.

14
00:00:54,060 --> 00:00:54,900
It doesn't stop.

15
00:00:54,900 --> 00:01:00,960
It keeps calling the function keeps calling the function until, oh, boy, the man has drowned.

16
00:01:01,830 --> 00:01:03,210
What just happened here.

17
00:01:03,510 --> 00:01:06,780
This is called Stack Overflow.

18
00:01:07,020 --> 00:01:08,370
Let's go back to some code.

19
00:01:09,860 --> 00:01:12,830
Remember the function inception that we created.

20
00:01:13,900 --> 00:01:15,820
If I run this function.

21
00:01:18,090 --> 00:01:20,070
And I say Inception.

22
00:01:22,540 --> 00:01:26,500
And simply run this function, I'll get an error.

23
00:01:27,130 --> 00:01:29,380
Let's make this a little bit bigger to see.

24
00:01:30,260 --> 00:01:36,720
I get an error saying maximum call stack size exceeded my browser in this case.

25
00:01:36,740 --> 00:01:42,550
Google Chrome is smart enough to say, All right, you've got to stop this madness.

26
00:01:42,560 --> 00:01:49,370
I'm just calling this interception function over and over and over and over because remember, our function

27
00:01:49,370 --> 00:01:55,120
just calls itself and eventually, if Google Chrome doesn't stop this, it's going to crash.

28
00:01:55,130 --> 00:01:58,490
And in the past, that's what would happen if I run this function.

29
00:01:58,490 --> 00:02:01,520
The browser will crash and I would have to restart it.

30
00:02:01,520 --> 00:02:08,330
But they've added a safeguard here saying, Hey, you've called the maximum call stack size, you've

31
00:02:08,330 --> 00:02:09,560
got to stop what you're doing.

32
00:02:10,100 --> 00:02:13,250
Now, this is called Stack Overflow.

33
00:02:14,160 --> 00:02:15,270
Why is that?

34
00:02:16,050 --> 00:02:17,940
Let's dive deeper into this topic.

35
00:02:18,770 --> 00:02:23,690
Just going to clear the console here and write our inception function.

36
00:02:23,690 --> 00:02:28,610
But this time I'm going to add a keyword called Debugger.

37
00:02:29,420 --> 00:02:36,200
That the Chrome browser is going to detect and pause the function when it sees this word.

38
00:02:36,930 --> 00:02:38,790
So I'm going to.

39
00:02:39,790 --> 00:02:40,990
Run this function.

40
00:02:43,220 --> 00:02:49,010
And you'll notice that as soon as I hit Enter, it's going to stop and give me a little panel here where

41
00:02:49,010 --> 00:02:50,390
I can control the function.

42
00:02:50,660 --> 00:02:51,650
Let's hit enter.

43
00:02:52,820 --> 00:02:53,760
And there you go.

44
00:02:53,780 --> 00:02:56,270
I'm in now the debugger mode.

45
00:02:57,490 --> 00:02:58,930
And you'll see here a few things.

46
00:02:58,930 --> 00:02:59,510
One.

47
00:02:59,530 --> 00:03:04,390
It'll show me where I am in the function and also show me.

48
00:03:05,110 --> 00:03:07,780
Let's change this around just so it's a little bit cleaner.

49
00:03:07,780 --> 00:03:09,460
I'm going to make this a little smaller.

50
00:03:09,460 --> 00:03:10,210
There you go.

51
00:03:10,660 --> 00:03:13,330
You see here something called the call stack.

52
00:03:13,780 --> 00:03:18,550
Now, from the name Stack Overflow, this might give you a bit of a hint.

53
00:03:19,260 --> 00:03:23,430
Right now, we've called the inception function right here.

54
00:03:23,490 --> 00:03:24,540
We haven't.

55
00:03:25,260 --> 00:03:27,380
Called it the second time around.

56
00:03:27,390 --> 00:03:33,090
If I click on the step over icon over here, it's going to go to the next line of the code.

57
00:03:33,090 --> 00:03:38,280
It's going to go to the next and now it's going to call the next inception function.

58
00:03:39,200 --> 00:03:41,420
Have a look over here at the call stack.

59
00:03:42,830 --> 00:03:45,050
As to what's going to happen next.

60
00:03:47,480 --> 00:03:48,380
Do you see that?

61
00:03:48,380 --> 00:03:51,920
I just added another function on the call stack.

62
00:03:52,640 --> 00:04:00,110
And as we know about stack data structure, we're just adding the function call on top of the older

63
00:04:00,110 --> 00:04:00,530
one.

64
00:04:00,530 --> 00:04:06,110
And if I step over here and go again, that's a third function call.

65
00:04:06,110 --> 00:04:12,110
And if I keep going, keep going, keep going, you'll see that I'm just adding more and more and more

66
00:04:12,110 --> 00:04:13,640
things to the stack.

67
00:04:14,120 --> 00:04:15,950
But there's a problem here, right?

68
00:04:16,040 --> 00:04:19,700
Nothing's getting popped from the stack.

69
00:04:20,089 --> 00:04:25,460
Instead, the function just keeps running, keeps running, keeps running, keeps running, keeps running

70
00:04:25,460 --> 00:04:29,720
until we run out of memory here.

71
00:04:29,840 --> 00:04:37,130
Remember, a stack in this case is grabbing a piece of memory from our computer and adding inception

72
00:04:37,130 --> 00:04:38,090
to this stack.

73
00:04:38,330 --> 00:04:40,310
And as you know, memory is limited.

74
00:04:40,310 --> 00:04:41,960
We don't have infinite amount.

75
00:04:41,960 --> 00:04:47,120
So as we keep going, as we keep going, it's going to Stack Overflow.

76
00:04:47,860 --> 00:04:49,000
And throw in air.

77
00:04:49,540 --> 00:04:55,810
And this is one of the biggest problems with recursion that we're going to get into later on.

78
00:04:56,230 --> 00:05:03,040
As you see here, though, it can be very, very dangerous because we can run programs that overflow,

79
00:05:03,040 --> 00:05:09,220
that never stop, that have infinite loops, essentially that crash our programs.

80
00:05:09,610 --> 00:05:13,360
You'll also see here that this costs memory.

81
00:05:13,540 --> 00:05:18,940
A stack is holding these function calls and recursion.

82
00:05:18,940 --> 00:05:26,230
One of its downside is that we have to hold on to these calls and remember them one by one, which can

83
00:05:26,230 --> 00:05:27,700
get really expensive.

84
00:05:28,090 --> 00:05:34,450
So if you ever get asked this question in an interview about recursion, maybe a possible problem with

85
00:05:34,450 --> 00:05:41,860
recursion, you can simply say, well, the computer needs to allocate memory to remember things.

86
00:05:42,160 --> 00:05:49,450
Stack Overflow can occur when we have recursion, and there's no way to stop this recursive call.

87
00:05:49,720 --> 00:05:55,120
It's simply the computer saying, whoa, whoa, whoa, whoa, okay, this is getting silly.

88
00:05:55,120 --> 00:05:56,980
I'm not remembering any more things.

89
00:05:56,980 --> 00:05:58,210
I'm out of memory.

90
00:05:58,480 --> 00:06:00,580
I'm going to just error out.

91
00:06:01,830 --> 00:06:06,660
In the next video, we're going to try and solve this problem and learn about something called a base

92
00:06:06,660 --> 00:06:13,950
case, a thing that you have to have in a recursive function to stop it from doing this.

93
00:06:14,580 --> 00:06:15,690
I'll see you in the next one.

94
00:06:16,210 --> 00:06:16,780
Bye bye.

