1
00:00:01,630 --> 00:00:02,500
Welcome back.

2
00:00:02,900 --> 00:00:10,550
Now hash tables are implemented differently in different languages, but most of the time the key and

3
00:00:10,550 --> 00:00:14,510
the value can be any type of data structure.

4
00:00:15,050 --> 00:00:19,580
We saw here that we can have a function as a value.

5
00:00:19,610 --> 00:00:22,100
We can have another object if we want.

6
00:00:22,100 --> 00:00:27,310
As a value, we can have an array as a value if we want.

7
00:00:27,320 --> 00:00:29,990
And I mean, you can do this in arrays as well.

8
00:00:30,600 --> 00:00:33,840
We don't just have numbers and strings in a race.

9
00:00:33,840 --> 00:00:42,540
We can have arrays of objects, but you can also sometimes have keys that are more than just strings.

10
00:00:42,960 --> 00:00:47,160
You could potentially have functions as keys.

11
00:00:47,970 --> 00:00:55,470
And a value that is also a function or perhaps a number or an array, whatever you want.

12
00:00:56,450 --> 00:01:04,879
Now in JavaScript, in an object like this, if you pass a key that is a number or a function, it actually

13
00:01:04,879 --> 00:01:09,950
gets stratified and it only allows string keys.

14
00:01:10,280 --> 00:01:20,600
But with the new version of JavaScript and ES6, you actually have something called map and sets, which

15
00:01:20,600 --> 00:01:23,090
also may be familiar in other languages.

16
00:01:23,390 --> 00:01:26,180
A map is created.

17
00:01:27,750 --> 00:01:28,650
Like this.

18
00:01:29,580 --> 00:01:38,340
And the difference between a map and an object is the fact that a map allows you to save any data type

19
00:01:38,760 --> 00:01:39,900
as the key.

20
00:01:40,150 --> 00:01:45,300
Remember, with an object you can only save the key as a string.

21
00:01:45,810 --> 00:01:53,430
With the map it allows us if we want to even have functions as keys or erase as keys.

22
00:01:53,550 --> 00:01:59,950
And another benefit of map is that it maintains insertion order.

23
00:01:59,970 --> 00:02:01,020
What does that mean?

24
00:02:01,930 --> 00:02:03,840
Well with an object.

25
00:02:03,880 --> 00:02:06,580
There is no order, is there?

26
00:02:06,970 --> 00:02:08,680
If we go back to our diagram.

27
00:02:09,400 --> 00:02:14,740
Our data is inserted randomly in different places.

28
00:02:15,670 --> 00:02:22,720
If we go back to our users example, we see that there is definitely no order.

29
00:02:23,230 --> 00:02:31,300
When we grab all the values of an object, we start with, let's say Lisa Smith, which was entered

30
00:02:31,300 --> 00:02:38,790
second, then John Smith, then perhaps Sandra de Sam Doe gets selected last.

31
00:02:38,800 --> 00:02:42,850
There is no order like there was with Erase.

32
00:02:43,740 --> 00:02:51,960
But there are some versions of hash tables like maps and JavaScript that maintains this order of insertion,

33
00:02:51,960 --> 00:02:58,380
so that when we loop through items in an object, we have this maintained order.

34
00:02:59,440 --> 00:03:04,550
Sets is another feature very similar to MAP.

35
00:03:04,570 --> 00:03:09,840
The only difference is that it only stores the keys, no values.

36
00:03:09,850 --> 00:03:17,350
So you see here each language, as we mentioned, comes with its own prebuilt versions of data structures.

37
00:03:17,770 --> 00:03:20,950
But at the end of the day, all of them are hash tables.

38
00:03:21,040 --> 00:03:27,460
But in order to truly understand how hash tables work, I think we should build one.

39
00:03:27,940 --> 00:03:30,190
In the next video, we're going to do just that.

