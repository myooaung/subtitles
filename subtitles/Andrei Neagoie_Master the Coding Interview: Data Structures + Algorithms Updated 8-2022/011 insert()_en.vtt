WEBVTT
1
00:00:01.380 --> 00:00:02.250
Welcome back.

2
00:00:02.710 --> 00:00:10.090
We've just implemented Prevent and append, and it should be clear to you why that is an oh one operation

3
00:00:10.090 --> 00:00:11.170
for both of these.

4
00:00:11.440 --> 00:00:13.720
We didn't really have to loop through anything.

5
00:00:14.570 --> 00:00:17.120
We just had a reference to the tail and the head.

6
00:00:17.120 --> 00:00:19.550
And we reassign some values.

7
00:00:20.270 --> 00:00:21.380
Nice and easy.

8
00:00:21.740 --> 00:00:23.660
But now comes the hard part.

9
00:00:23.690 --> 00:00:24.860
What about these ones?

10
00:00:24.890 --> 00:00:28.940
What about lookups, traversal, reversals, inserts, deletes?

11
00:00:29.630 --> 00:00:33.860
I think we should code those as well to fully understand how length lists work.

12
00:00:35.820 --> 00:00:39.030
This exercise is going to be a little bit tougher.

13
00:00:39.030 --> 00:00:43.710
But I'm going to give you a heads up that there's going to be some looping involved.

14
00:00:43.800 --> 00:00:54.000
We want to create a insert method, and this insert method is going to have an index and a value parameter

15
00:00:54.660 --> 00:01:03.060
because we're going to want to be able to say insert at this location, this value into the list.

16
00:01:04.110 --> 00:01:10.320
For example, if I wanted to say my link to list dot insert.

17
00:01:11.120 --> 00:01:16.580
And let's say I wanted to insert an index of to the value 99.

18
00:01:18.060 --> 00:01:18.690
Well.

19
00:01:19.540 --> 00:01:26.770
That would mean that if we go back to our example, index of two would mean 012.

20
00:01:26.860 --> 00:01:32.830
Right here, I want to insert 99 and have that 0.25.

21
00:01:34.010 --> 00:01:36.500
How would we go about doing that?

22
00:01:37.160 --> 00:01:45.320
I want to warn you, this can get a little tricky, and the best way to really think about it is to

23
00:01:45.350 --> 00:01:50.720
grab a piece of paper and a pen and draw out the steps that you should do.

24
00:01:51.950 --> 00:01:59.870
A good way to practice this and make sure you get it right is to use the visual go website and practice

25
00:01:59.870 --> 00:02:06.860
inserting and see what happens when you do index of two, let's say 99, I hit go.

26
00:02:07.660 --> 00:02:08.979
See what happens here.

27
00:02:09.009 --> 00:02:10.690
You're going to have to code that action.

28
00:02:12.300 --> 00:02:13.230
Did you get that?

29
00:02:13.650 --> 00:02:19.080
Play around with this as you try and code the insert function.

30
00:02:19.970 --> 00:02:23.480
Like I said, a little hint that there's going to be some looping in VoLTE.

31
00:02:23.510 --> 00:02:27.380
You saw that in the demonstration or in the animation.

32
00:02:27.380 --> 00:02:29.120
There was some sort of traversal.

33
00:02:29.120 --> 00:02:33.440
So we're going to have to do some sort of traversal to find the index.

34
00:02:34.170 --> 00:02:39.360
And I also just want to code a quick print list function.

35
00:02:40.630 --> 00:02:47.650
So that instead of using this way of printing our list, which as it gets deeper and deeper, it gets

36
00:02:47.650 --> 00:02:54.130
harder and harder to understand, I'm going to just create a print list function that you should have

37
00:02:54.130 --> 00:02:57.730
access to to make sure that your insert method is working.

38
00:02:58.630 --> 00:03:04.600
And this print list is simply going to just list our link list.

39
00:03:04.600 --> 00:03:10.140
But instead of having this ugly printout, I'm just going to print it out in an array.

40
00:03:10.150 --> 00:03:13.720
So this is just going to be printed out in an array.

41
00:03:15.020 --> 00:03:18.500
All we're going to do is say, all right.

42
00:03:20.180 --> 00:03:22.160
And this is going to be an empty array.

43
00:03:23.590 --> 00:03:26.260
We'll have a current.

44
00:03:27.230 --> 00:03:27.980
Node.

45
00:03:28.950 --> 00:03:31.760
Variable that will have this head.

46
00:03:32.370 --> 00:03:37.290
So the first item in the list and all we going to do is do a wild loop.

47
00:03:37.320 --> 00:03:40.200
Remember, this is similar to a for loop.

48
00:03:40.200 --> 00:03:45.210
We're looping, but instead we're saying while this is happening, while a condition is happening,

49
00:03:45.420 --> 00:03:47.320
run the below commands.

50
00:03:47.340 --> 00:03:52.980
So I'm going to say while current node doesn't equal to null.

51
00:03:53.460 --> 00:04:00.330
As long as there is a current node and we're not pointing to a null terminator.

52
00:04:01.660 --> 00:04:10.060
In that case, just simply add to the array array to push the current node value.

53
00:04:10.660 --> 00:04:11.070
That's it.

54
00:04:11.080 --> 00:04:13.000
We don't care about the pointers or anything.

55
00:04:13.000 --> 00:04:15.130
We just want to push to the array, the value.

56
00:04:15.860 --> 00:04:23.630
And we want to then update the current node to equal current node dot next.

57
00:04:23.870 --> 00:04:28.850
So we're going to keep going, keep going, keep going until the current node is going to be null,

58
00:04:28.940 --> 00:04:30.860
at which case we're going to stop.

59
00:04:32.200 --> 00:04:32.620
Again.

60
00:04:32.620 --> 00:04:37.810
While loops are really, really good, if we don't really know the length of our link list or we just

61
00:04:37.810 --> 00:04:40.840
want to do something while a condition is met.

62
00:04:41.770 --> 00:04:45.010
So we can just simply return the array here.

63
00:04:46.940 --> 00:04:48.200
Let's see how that would work.

64
00:04:49.200 --> 00:04:53.790
If I do and I'm going to comment out the insert here because we're not going to do that yet.

65
00:04:53.820 --> 00:04:58.260
I'm going to just say my linked list, dot print list.

66
00:04:59.610 --> 00:05:02.340
If I run this, there's our list.

67
00:05:02.980 --> 00:05:08.830
So using the parentless command to check your work, see if you can create this method.

68
00:05:09.660 --> 00:05:12.120
Good luck and I'll see you in The Solution video.

