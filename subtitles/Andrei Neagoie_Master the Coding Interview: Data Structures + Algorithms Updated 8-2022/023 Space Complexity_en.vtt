WEBVTT
1
00:00:01.040 --> 00:00:06.770
When a program executes, it has two ways to remember things.

2
00:00:07.400 --> 00:00:10.580
The heap and the stack.

3
00:00:11.120 --> 00:00:20.960
The heap is usually where we store variables that we assign values to, and the stack is usually where

4
00:00:20.960 --> 00:00:23.750
we keep track of our function calls.

5
00:00:24.700 --> 00:00:30.520
Sometimes we want to optimize for using less memory instead of using less time.

6
00:00:31.310 --> 00:00:37.280
Talking about memory or space complexity is very similar to talking about the time cost.

7
00:00:37.370 --> 00:00:44.570
We simply look at the total size relative to the size of the input and see how many new variables or

8
00:00:44.570 --> 00:00:49.400
new memory we're allocating, how much memory is being used.

9
00:00:49.550 --> 00:00:51.620
So let's look at an example.

10
00:00:52.070 --> 00:00:57.890
Up to this point, we've talked about time, complexity and how, if we want to compress, let's say

11
00:00:57.890 --> 00:01:03.380
some boxes we just talked about how fast and how many operations this would take.

12
00:01:03.740 --> 00:01:07.580
But in real life, there's this other factor of memory.

13
00:01:07.850 --> 00:01:16.940
And we have this pink little box of how much this function can take, how much input it's able to take.

14
00:01:17.330 --> 00:01:25.790
For example, if we had a ton of boxes that we have to create to run this function well, it has limited

15
00:01:25.790 --> 00:01:28.760
capacity and it might overflow.

16
00:01:29.270 --> 00:01:35.240
By the way, things like Stack Overflow is something we're going to be talking about and how it's an

17
00:01:35.240 --> 00:01:40.310
issue when it comes to memory, something we'll cover when we get into recursion.

18
00:01:41.210 --> 00:01:44.840
What causes this space complexity?

19
00:01:45.080 --> 00:01:49.310
Well, luckily for you, I added this to our cheat sheet.

20
00:01:50.080 --> 00:01:52.630
What causes space complexity?

21
00:01:52.720 --> 00:02:00.040
Well, adding variables, adding data structures like arrays, objects, hash tables.

22
00:02:00.250 --> 00:02:05.200
Again, things we'll talk about function calls and allocations.

23
00:02:06.400 --> 00:02:07.480
You don't need this period.

24
00:02:08.310 --> 00:02:12.300
But let's actually code something and show you an example.

25
00:02:13.100 --> 00:02:19.730
In the next video, we'll go through some space complexity exercises and figure out how we can give

26
00:02:19.730 --> 00:02:21.710
big notation to the subject.

