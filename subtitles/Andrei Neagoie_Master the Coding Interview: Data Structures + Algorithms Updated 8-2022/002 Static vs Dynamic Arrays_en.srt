1
00:00:00,820 --> 00:00:01,660
Welcome back.

2
00:00:02,440 --> 00:00:07,000
As I mentioned in the previous video, there are actually two types of arrays.

3
00:00:07,600 --> 00:00:12,790
One is called static and the other dynamic arrays.

4
00:00:13,630 --> 00:00:16,210
Now, what is the difference between the two?

5
00:00:16,750 --> 00:00:20,890
Well, the one limitation of static arrays.

6
00:00:21,720 --> 00:00:29,760
Is that they're fixed in size, meaning you need to specify the number of elements your array will hold

7
00:00:30,030 --> 00:00:30,960
ahead of time.

8
00:00:31,630 --> 00:00:39,580
So in this case, if this was a static array, I would say create an array of seven items knowing beforehand

9
00:00:39,580 --> 00:00:45,280
that in my grocery list I'm only going to have max seven.

10
00:00:46,120 --> 00:00:46,840
Items.

11
00:00:47,540 --> 00:00:53,210
Because arrays are allocated in adjacent blocks of memory when they're created.

12
00:00:53,450 --> 00:01:01,550
There's no guarantee that after we've allocated seven shelves of memory that you can keep adding things

13
00:01:01,550 --> 00:01:03,830
on, especially in order.

14
00:01:04,980 --> 00:01:12,750
We solve this problem with static arrays that require us to say ahead of time, Hey, I only want seven

15
00:01:12,750 --> 00:01:16,320
shelves of memory with dynamic arrays.

16
00:01:16,620 --> 00:01:26,640
And dynamic arrays allow us to copy and rebuild an array at a new location, which with more memory

17
00:01:26,640 --> 00:01:28,200
if we wanted more memory.

18
00:01:29,310 --> 00:01:35,340
So for example, with our static array, if we realize that we forgot another item on our list and we

19
00:01:35,340 --> 00:01:41,550
need eight items, what happens is we copy this entire array.

20
00:01:41,940 --> 00:01:45,870
We allocate 14 blocks of memory.

21
00:01:46,490 --> 00:01:52,850
And paste this list, plus the eighth item into that new location.

22
00:01:53,270 --> 00:01:55,580
Let me show you how this works with code.

23
00:01:56,910 --> 00:02:00,030
You see in languages like C++.

24
00:02:00,060 --> 00:02:08,080
Let me scroll down over here in C++, which has static arrays to create an array.

25
00:02:08,100 --> 00:02:09,810
You do something like this.

26
00:02:11,340 --> 00:02:12,720
You'd say it.

27
00:02:13,770 --> 00:02:14,430
A.

28
00:02:18,380 --> 00:02:24,770
And this says, I want an array that has space of 20 items.

29
00:02:26,630 --> 00:02:29,960
Or you can do something like Aunt Be.

30
00:02:31,460 --> 00:02:32,240
Five.

31
00:02:33,090 --> 00:02:40,710
And then fill up the array of five items with one, two, three, four, five integers.

32
00:02:40,710 --> 00:02:42,720
That's what stands for numbers.

33
00:02:43,590 --> 00:02:50,850
And because of this and because this is a static array, in order for us to add a six item on here,

34
00:02:50,850 --> 00:03:00,360
well, we would need to copy this entire array and move it over to completely different area of memory

35
00:03:01,050 --> 00:03:03,060
in order to create the space for it.

36
00:03:03,600 --> 00:03:08,580
Now, luckily for us, when I showed you with JavaScript how to do this.

37
00:03:09,340 --> 00:03:12,430
Well, we never had to worry about it, did we?

38
00:03:13,160 --> 00:03:16,370
In our JavaScript example, we never really allocate a memory.

39
00:03:16,370 --> 00:03:23,870
And that's because in JavaScript and other languages like Python, where you have lists and ArrayList

40
00:03:23,870 --> 00:03:27,770
in Java, they work like dynamic arrays.

41
00:03:27,890 --> 00:03:30,860
They automatically allocate memory.

42
00:03:31,670 --> 00:03:34,790
According to the increase in size of the array.

43
00:03:35,360 --> 00:03:40,430
So right off the bat, you're thinking dynamic arrays are way better, easier.

44
00:03:40,430 --> 00:03:44,060
I don't have to think about memory because of automatic resizing.

45
00:03:44,700 --> 00:03:52,230
And that gets into a discussion of managing memory which low level languages like C++ allow, while

46
00:03:52,230 --> 00:03:58,230
higher level languages like JavaScript allow us to not think about memory and let the machine take care

47
00:03:58,230 --> 00:03:59,310
of it for you.

48
00:03:59,580 --> 00:04:06,720
There's times where maybe you do want to manage your memory and times where you don't need to based

49
00:04:06,720 --> 00:04:07,800
on your needs.

50
00:04:08,190 --> 00:04:13,740
Obviously, having more control over memory allows you to really tweak things and make things faster.

51
00:04:13,740 --> 00:04:19,680
And that's why languages like C++ can be much faster than higher languages, higher level languages

52
00:04:19,680 --> 00:04:20,790
like JavaScript.

53
00:04:21,690 --> 00:04:23,670
But we don't need to get into that.

54
00:04:23,970 --> 00:04:29,490
What we want to get out of this lesson is that dynamic array expands as you add more elements, so you

55
00:04:29,490 --> 00:04:31,860
don't need to determine the size ahead of time.

56
00:04:32,250 --> 00:04:36,240
But you may have noticed something with dynamic arrays.

57
00:04:37,670 --> 00:04:45,320
You see over here how I have a pent at of one that is the same as the push command that we did in the

58
00:04:45,320 --> 00:04:46,250
previous lesson.

59
00:04:46,730 --> 00:04:50,600
But I have a star here that says it can be o n.

60
00:04:51,450 --> 00:04:52,530
Why is that?

61
00:04:52,800 --> 00:04:53,580
Well.

62
00:04:54,410 --> 00:04:59,840
If we remember our array and let's remove the extra items here that we don't need.

63
00:05:00,540 --> 00:05:02,670
So just say ABCD.

64
00:05:04,530 --> 00:05:15,930
If underneath the hood JavaScript and our machine only created four blocks of memory for this array

65
00:05:15,930 --> 00:05:17,850
and we add another.

66
00:05:18,990 --> 00:05:23,110
Letter underneath the hood because this is a dynamic array.

67
00:05:23,130 --> 00:05:33,510
It's going to loop over these items, copy them and move it to a different location with now eight blocks

68
00:05:33,510 --> 00:05:34,230
of space.

69
00:05:35,000 --> 00:05:37,610
So that we can keep adding onto here.

70
00:05:39,370 --> 00:05:45,040
And you see here because we did this looping the operation becomes of an.

71
00:05:46,240 --> 00:05:52,810
So that's something to keep in mind, although it's a minor detail, it's good to know how things work

72
00:05:52,810 --> 00:05:58,270
underneath the hood and most of the time with the languages that you're working and during interviews,

73
00:05:58,690 --> 00:06:05,860
you will be talking about dynamic arrays and you won't have to worry about allocating memory and thinking

74
00:06:05,860 --> 00:06:09,940
about the possibility that you might have to copy the array.

75
00:06:09,970 --> 00:06:16,510
That's really low level, but I wanted to show you how they work so that you have those fundamentals

76
00:06:16,510 --> 00:06:17,410
going forward.

77
00:06:17,440 --> 00:06:24,160
And I understand that when it comes to arrays, just because you're adding at the end using the push

78
00:06:24,160 --> 00:06:30,160
command, you can assume that it's o of one most of the times or constant time.

79
00:06:30,160 --> 00:06:36,010
But every once in a while you might encounter a situation where it's of n linear time.

80
00:06:37,200 --> 00:06:38,460
I'll see you in the next video.

