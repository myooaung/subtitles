WEBVTT
1
00:00:01.250 --> 00:00:02.120
Welcome back.

2
00:00:02.300 --> 00:00:06.350
It's time to create our very first link list data structure.

3
00:00:06.920 --> 00:00:13.010
And let's say I wanted to create a link list that has ten pointing to five pointing to 16.

4
00:00:13.280 --> 00:00:14.750
A nice little simple one.

5
00:00:15.320 --> 00:00:22.340
First off, how will we go about visualizing this in a language like JavaScript that doesn't have linked

6
00:00:22.340 --> 00:00:23.000
lists?

7
00:00:24.120 --> 00:00:29.490
Well, we can simply say that we have a new link list.

8
00:00:29.490 --> 00:00:36.810
Let's just use let here my linked list and this is going to equal to an object.

9
00:00:37.710 --> 00:00:40.560
That has a head property remember?

10
00:00:40.560 --> 00:00:43.830
Because the very first item in a link list.

11
00:00:44.580 --> 00:00:45.600
Is the head.

12
00:00:46.440 --> 00:00:48.960
And we're going to have a node.

13
00:00:49.170 --> 00:00:53.970
The point of the node is to say, Hey, anything can be in the snow.

14
00:00:53.970 --> 00:00:55.500
Just put anything you want.

15
00:00:55.500 --> 00:00:59.010
And it's a container around this data.

16
00:01:00.120 --> 00:01:03.990
So think of Node as a bucket of data.

17
00:01:04.080 --> 00:01:08.100
And in this case, we can just use an object to put our data in.

18
00:01:08.160 --> 00:01:16.920
All this node needs to have in a link list is a value property of what the value of the node is, plus

19
00:01:16.920 --> 00:01:22.650
a next property, which is the pointer to the next node.

20
00:01:23.040 --> 00:01:33.690
Now, this value can be anything we want and the next property has to be a pointer or a reference to

21
00:01:33.690 --> 00:01:36.720
the next node, in which case will be an object.

22
00:01:36.720 --> 00:01:39.420
So it'll be another object.

23
00:01:40.090 --> 00:01:43.210
That we're going to reference in memory this way.

24
00:01:43.210 --> 00:01:48.100
The value of the node can always change, but the pointers are always going to be pointing to that.

25
00:01:48.100 --> 00:01:51.840
So we can change items and nothing else will change.

26
00:01:51.850 --> 00:01:55.120
It will still point to that changed and updated value.

27
00:01:55.570 --> 00:01:56.740
Let me show you what I mean.

28
00:01:56.890 --> 00:02:00.580
We have the head here, in which case it's ten.

29
00:02:00.580 --> 00:02:03.640
So we want to set ten as our value.

30
00:02:04.500 --> 00:02:11.250
And this head is going to reference point to the next node, which will have a value.

31
00:02:12.390 --> 00:02:13.110
Five.

32
00:02:13.530 --> 00:02:15.510
Make sure I add the commas in here.

33
00:02:16.820 --> 00:02:20.120
And the next volley of what do you think?

34
00:02:20.390 --> 00:02:25.460
Well, the next node in the list, which is value of 16.

35
00:02:26.270 --> 00:02:29.750
And next, referencing what?

36
00:02:29.750 --> 00:02:34.400
Well, 16 is the tale of our link list.

37
00:02:34.400 --> 00:02:37.040
So that means it has to point to no.

38
00:02:37.490 --> 00:02:39.650
Or what we call null terminated.

39
00:02:39.650 --> 00:02:41.660
That means it's the end of the list.

40
00:02:42.580 --> 00:02:43.090
Perfect.

41
00:02:43.090 --> 00:02:47.680
So this is what we want to create a linked list.

42
00:02:47.710 --> 00:02:54.820
Using this as our structure, we're going to create a class called.

43
00:02:56.880 --> 00:03:01.650
Class linked list and this class.

44
00:03:01.650 --> 00:03:04.110
And we should be familiar with the syntax by now.

45
00:03:04.140 --> 00:03:10.200
We'll have a constructor, which is the function that gets run at the very beginning when we create

46
00:03:10.200 --> 00:03:11.040
the link list.

47
00:03:11.070 --> 00:03:13.200
That's going to take a value.

48
00:03:14.360 --> 00:03:15.330
What does that mean?

49
00:03:15.350 --> 00:03:26.300
Well, when we finally say that we're creating a mai linked list, remember, we want to create this.

50
00:03:27.280 --> 00:03:35.320
When I create my link list, I'm going to instantiate the class that is run the class function here,

51
00:03:35.320 --> 00:03:38.140
run the constructor and create the link list.

52
00:03:38.830 --> 00:03:44.650
I'm going to say linked list and then give it a value to start off the list because, well, the list

53
00:03:44.650 --> 00:03:45.340
can be empty.

54
00:03:45.340 --> 00:03:46.520
It has to have something.

55
00:03:46.540 --> 00:03:48.370
It has to start with the head.

56
00:03:48.790 --> 00:03:52.060
So in our case, we want to start it with ten.

57
00:03:54.330 --> 00:04:00.780
And ideally by running this command, we've created the first part of our link list, just the ten.

58
00:04:02.460 --> 00:04:05.310
Let me comment this out since we won't need it for now.

59
00:04:07.590 --> 00:04:16.230
Now within this constructor we have well the this dot head reference because well we need to keep track

60
00:04:16.230 --> 00:04:20.910
of the head and this head is going to simply have a value.

61
00:04:21.910 --> 00:04:24.800
That equals to the value that we passed in.

62
00:04:24.820 --> 00:04:26.320
That is the ten here.

63
00:04:27.070 --> 00:04:29.530
And then finally the next.

64
00:04:29.770 --> 00:04:33.520
And what should the next be when we first create this list?

65
00:04:33.880 --> 00:04:41.320
Well, since ten is the only thing that we'll have, or one node next is going to equal no.

66
00:04:41.350 --> 00:04:42.280
To begin with.

67
00:04:42.990 --> 00:04:48.240
Remember constructor is all about creating the very first link list node.

68
00:04:48.270 --> 00:04:52.200
What happens when we instantiate a class?

69
00:04:52.470 --> 00:04:54.990
To start off my link list.

70
00:04:55.500 --> 00:05:00.150
And then finally, we have two other pieces of information that we need to track.

71
00:05:00.240 --> 00:05:03.750
One is this dot tail.

72
00:05:05.170 --> 00:05:06.240
I remember the word.

73
00:05:06.330 --> 00:05:10.740
This just refers to the link list, so it's just referring to the link list that we create.

74
00:05:11.380 --> 00:05:13.180
What is the tale going to be?

75
00:05:13.900 --> 00:05:16.870
Well, because we only have one item.

76
00:05:17.140 --> 00:05:19.330
The head is also the tail.

77
00:05:19.360 --> 00:05:22.060
So we simply say this dot head.

78
00:05:22.720 --> 00:05:25.720
And by the way, I know this can get a little bit confusing.

79
00:05:25.900 --> 00:05:32.980
And as we go through this video series on link lists, it is a bit hard to wrap your mind around.

80
00:05:32.980 --> 00:05:39.430
So I really recommend that you code along here and do the exercises because just watching me talk about

81
00:05:39.430 --> 00:05:42.310
link lists is not going to solidify your information.

82
00:05:42.670 --> 00:05:45.460
It is hard to really visualize things.

83
00:05:45.550 --> 00:05:50.230
So you may need to build link lists a couple of times to really get the hang of it.

84
00:05:50.500 --> 00:05:57.280
But this will become second nature once you get used to the syntax and also the idea of having this

85
00:05:57.280 --> 00:05:59.860
head and tail and referencing them.

86
00:06:00.730 --> 00:06:08.560
Anyway, the final piece of the puzzle is if we want, we can keep track of the length of the link list.

87
00:06:08.920 --> 00:06:11.410
This is optional, but I think it's good to keep track.

88
00:06:11.410 --> 00:06:17.260
And because we have one item when we create this link list, because we give it a value, we'll give

89
00:06:17.260 --> 00:06:18.880
it a length of one.

90
00:06:20.000 --> 00:06:20.780
There we go.

91
00:06:20.810 --> 00:06:22.370
If I run this.

92
00:06:24.280 --> 00:06:29.500
I get an error because, well, I have this code that's not really JavaScript.

93
00:06:29.500 --> 00:06:32.680
So let's comment that out and click run again.

94
00:06:33.640 --> 00:06:36.740
I get undefined while because we haven't logged anything.

95
00:06:36.740 --> 00:06:40.820
But if I console log.

96
00:06:42.270 --> 00:06:45.780
My linked list and I run this.

97
00:06:46.530 --> 00:06:47.300
Look at that.

98
00:06:47.310 --> 00:06:51.060
I have a link list with a head that is value of ten.

99
00:06:51.120 --> 00:06:58.350
Next is null because well, there's only one node and a tail, which is the exact same thing, pointing

100
00:06:58.350 --> 00:07:00.540
to null and a length of one.

101
00:07:00.900 --> 00:07:02.130
Congratulations.

102
00:07:02.130 --> 00:07:06.120
We just built our very first link list.

103
00:07:06.330 --> 00:07:09.750
However, it's time for a little bit of an exercise.

104
00:07:09.780 --> 00:07:11.340
Our list is not complete.

105
00:07:11.340 --> 00:07:11.850
Right?

106
00:07:11.880 --> 00:07:18.120
We need to create this link list, so we need to be able to add five and then 16.

107
00:07:18.720 --> 00:07:21.570
So my challenge to you is this.

108
00:07:22.350 --> 00:07:24.480
We want to create an append.

109
00:07:25.890 --> 00:07:30.090
Method and this append method is going to take a value.

110
00:07:30.720 --> 00:07:31.920
And in here.

111
00:07:33.980 --> 00:07:39.020
We want to write a piece of code that allows us to.

112
00:07:39.770 --> 00:07:52.550
Say Konst or my link list dot append and give it a value if we look at our list of five.

113
00:07:52.580 --> 00:07:55.640
To append to our current list.

114
00:07:56.090 --> 00:08:00.020
So I want to be able to say append five and then.

115
00:08:01.250 --> 00:08:02.000
Append.

116
00:08:02.900 --> 00:08:03.920
16.

117
00:08:04.340 --> 00:08:09.440
To create our completed list of ten, five and 16.

118
00:08:10.270 --> 00:08:13.000
How would you go about doing that?

119
00:08:13.850 --> 00:08:17.030
And I'm going to leave this for you to try out.

120
00:08:19.990 --> 00:08:24.610
Remember, this may be a little bit hard and I'll provide the solution video and we'll code along.

121
00:08:24.610 --> 00:08:29.950
But I do encourage you to challenge yourself and just think about what's happening and what we've done

122
00:08:29.950 --> 00:08:33.700
in the constructor to create this append method.

123
00:08:34.320 --> 00:08:36.570
Good luck and I'll see you in the solution.

124
00:08:36.570 --> 00:08:38.100
VIDEO Bye bye.

