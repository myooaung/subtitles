WEBVTT
1
00:00:00.420 --> 00:00:01.290
Welcome back.

2
00:00:01.320 --> 00:00:05.040
I want to improve this function just a little bit.

3
00:00:05.520 --> 00:00:13.740
You see, ideally, we don't want to fill the cache in what we call the global scope, that is to be

4
00:00:13.740 --> 00:00:15.600
living outside of this function.

5
00:00:16.870 --> 00:00:26.320
Ideally it's good practice to have memory or in this case, the cash to live inside of this function,

6
00:00:26.320 --> 00:00:28.810
not polluting the global scope.

7
00:00:29.170 --> 00:00:32.680
And there's many ways to do this based on the language in JavaScript.

8
00:00:32.740 --> 00:00:35.290
We can use something called closures.

9
00:00:35.800 --> 00:00:37.630
And this is what it would look like.

10
00:00:37.660 --> 00:00:42.160
And I'm showing you this because when we get to dynamic programming, you're going to see this pattern

11
00:00:42.160 --> 00:00:42.730
a lot.

12
00:00:42.970 --> 00:00:47.980
Luckily, with dynamic programming, the pattern is usually always the same.

13
00:00:47.980 --> 00:00:51.430
So once you learn this, then it becomes easier and easier.

14
00:00:51.850 --> 00:00:59.860
So the way we bring this inside of the function is to, well, bring it in like that.

15
00:01:01.520 --> 00:01:04.610
But the problem is now that every time we run this.

16
00:01:05.420 --> 00:01:13.250
We get long time each time because the cash gets reset every time the function gets called.

17
00:01:13.250 --> 00:01:15.890
So the cash becomes an empty object.

18
00:01:16.890 --> 00:01:23.370
To get around this, we can use closures and JavaScript and we can return another function.

19
00:01:23.370 --> 00:01:26.880
So a function that returns another function.

20
00:01:28.600 --> 00:01:31.990
And in here we'll pass the parameter and.

21
00:01:36.030 --> 00:01:38.160
And we'll have the.

22
00:01:40.190 --> 00:01:42.830
Logic inside of this function.

23
00:01:43.670 --> 00:01:44.390
That's it.

24
00:01:44.870 --> 00:01:53.180
And because of something called closure, we're able to access this cash inside of this child function.

25
00:01:53.360 --> 00:01:57.920
Now, this isn't a course about JavaScript, so you can read up on closure on your own.

26
00:01:57.920 --> 00:02:05.750
But this is just a way for us to avoid that global scope so that this time around we can do something

27
00:02:05.750 --> 00:02:06.480
like this.

28
00:02:06.500 --> 00:02:11.720
We can simply say cost memorized equals.

29
00:02:12.790 --> 00:02:13.840
Memorized.

30
00:02:13.840 --> 00:02:14.890
Add to 80.

31
00:02:15.670 --> 00:02:18.310
And we'll run this function.

32
00:02:18.840 --> 00:02:22.290
And we can actually even remove the parameter from here.

33
00:02:23.630 --> 00:02:25.430
So that we have flexibility.

34
00:02:25.610 --> 00:02:26.390
Let me show you.

35
00:02:26.780 --> 00:02:33.200
We have the memo here, which hopefully I can spell memorized so that now.

36
00:02:34.080 --> 00:02:38.070
This function because I ran it is going to return for me.

37
00:02:38.070 --> 00:02:42.930
This function memorized equals this function.

38
00:02:43.110 --> 00:02:46.860
That's literally what memorized add to 80 returns.

39
00:02:47.560 --> 00:02:57.790
And I have access to this cache variable so that in here I can just say memorized five and memorized.

40
00:02:58.650 --> 00:02:59.550
Six.

41
00:03:00.030 --> 00:03:01.020
If I had run.

42
00:03:02.540 --> 00:03:04.160
I still get the same thing.

43
00:03:04.160 --> 00:03:08.180
But if I do five and five and I hit run.

44
00:03:08.880 --> 00:03:09.730
Look at that.

45
00:03:09.750 --> 00:03:11.360
It's memorized.

46
00:03:11.880 --> 00:03:17.870
This function remembers that the parameter has not changed.

47
00:03:17.880 --> 00:03:23.880
It's the same parameter and it's going to check the cache and say, I don't need to do all that silly

48
00:03:23.880 --> 00:03:24.540
calculation.

49
00:03:24.540 --> 00:03:25.370
I already have it.

50
00:03:25.380 --> 00:03:26.130
Here you go.

51
00:03:26.130 --> 00:03:27.680
Just using a hash table.

52
00:03:27.690 --> 00:03:28.590
Here it is.

53
00:03:29.160 --> 00:03:38.430
And what we just learned here is really powerful because it allows us to be very efficient with our

54
00:03:38.430 --> 00:03:43.290
code, something that we know interviewers love, companies love.

55
00:03:44.010 --> 00:03:52.590
And dynamic programming allows us to use what we know now about memorization to optimize our code.

56
00:03:52.980 --> 00:03:55.020
Let's find out more in the next video.

