WEBVTT
1
00:00:01.720 --> 00:00:02.620
Welcome back.

2
00:00:03.040 --> 00:00:10.000
We have our list over here and we want to be able to run my link list.

3
00:00:10.000 --> 00:00:11.380
Dot reverse.

4
00:00:12.190 --> 00:00:15.490
That will reverse this list for us.

5
00:00:15.760 --> 00:00:17.260
Let's figure out the code here.

6
00:00:19.120 --> 00:00:23.650
The first thing we want to do is to do a bit of a check.

7
00:00:24.070 --> 00:00:28.540
Imagine if we only had one item in the list.

8
00:00:29.120 --> 00:00:34.580
If there's one node or item in the list, then well, we don't need to really reverse it.

9
00:00:34.580 --> 00:00:35.450
It's already there.

10
00:00:35.450 --> 00:00:40.580
So if this list only contained one, just return whatever we have for now.

11
00:00:40.700 --> 00:00:48.950
So let's do that check here and we can just say if this dot head dot next and this exclamation mark

12
00:00:48.950 --> 00:00:56.300
means doesn't exist, that means if this had gone next, if one is only one and it's null.

13
00:00:56.950 --> 00:01:03.100
This exclamation mark is going to turn this into the opposite, which the way JavaScript works will

14
00:01:03.100 --> 00:01:04.280
turn this into true.

15
00:01:04.300 --> 00:01:07.040
I know it's a little bit confusing, but hopefully you're with me on that one.

16
00:01:07.060 --> 00:01:11.680
All we're saying is if this is the only node and there's only a head node here.

17
00:01:12.510 --> 00:01:18.060
I could also do this by checking the length and we have the length property so I could do something

18
00:01:18.060 --> 00:01:25.080
like if this dot length is equal to one, but let's just keep it the way it is for now.

19
00:01:25.110 --> 00:01:34.290
If there is only one end element, just simply return this dot head the node or we can just return this

20
00:01:34.290 --> 00:01:34.800
as well.

21
00:01:35.480 --> 00:01:36.410
Otherwise.

22
00:01:36.410 --> 00:01:38.150
Let's get into the fun coding part.

23
00:01:38.270 --> 00:01:47.420
The first thing we want to do is say we want to have the first item equals to this dot head and we're

24
00:01:47.420 --> 00:01:49.010
just keeping track of it here.

25
00:01:49.220 --> 00:01:52.550
So we're going to say that we now have a reference to this dot head.

26
00:01:53.660 --> 00:01:59.690
And we also have a reference now to the second item in the list.

27
00:02:00.170 --> 00:02:03.260
So this is going to be first dot next.

28
00:02:04.050 --> 00:02:07.980
So now that we have first and second, we can do some looping.

29
00:02:08.550 --> 00:02:13.140
We can say while the second node.

30
00:02:14.670 --> 00:02:15.510
Exists.

31
00:02:15.510 --> 00:02:20.280
That is as long as second is not null.

32
00:02:21.800 --> 00:02:29.680
So as long as that's happening, we're going to create a temporary variable that holds second spot next.

33
00:02:29.960 --> 00:02:32.270
So we can actually call this third if we want.

34
00:02:32.270 --> 00:02:35.990
But I'm choosing temp because this is going to change.

35
00:02:36.800 --> 00:02:39.860
So we have a reference to first, second and third.

36
00:02:39.860 --> 00:02:42.200
So one, ten and 16.

37
00:02:43.090 --> 00:02:43.930
From here.

38
00:02:44.380 --> 00:02:51.010
We can now say second dot next is going to equal the.

39
00:02:52.520 --> 00:02:54.170
First element.

40
00:02:55.980 --> 00:02:59.310
First is going to equal the second.

41
00:03:01.050 --> 00:03:01.740
Element.

42
00:03:02.710 --> 00:03:09.010
And second is going to equal the temp element.

43
00:03:10.070 --> 00:03:10.430
Oh, boy.

44
00:03:10.430 --> 00:03:11.570
What just happened here?

45
00:03:11.810 --> 00:03:16.460
I know that was a lot of code without a lot of explanation, but let's go through it line by line.

46
00:03:16.940 --> 00:03:22.730
We're looping here after we've grabbed one and we've grabbed ten.

47
00:03:23.820 --> 00:03:28.410
And now I'm going to say as long as this second variable.

48
00:03:29.170 --> 00:03:31.450
Has a value and it's not null.

49
00:03:32.230 --> 00:03:39.340
If that node exists, then I want you to create a temp variable that holds 16.

50
00:03:39.670 --> 00:03:47.350
From there, I'm going to grab that second next, which is the property inside of ten.

51
00:03:47.800 --> 00:03:51.550
And I'm going to say that ten is now going to point.

52
00:03:51.550 --> 00:03:54.160
So second on next is going to point to the first.

53
00:03:54.160 --> 00:04:04.270
So ten has an arrow pointing to one and the first variable which was the head now becomes ten and the

54
00:04:04.270 --> 00:04:07.300
second item becomes 16.

55
00:04:08.000 --> 00:04:16.700
We've switched the pointers, 1 to 10 now goes 10 to 1 and we switch to variables first and second to

56
00:04:16.700 --> 00:04:25.610
now have ten and 16 and we loop through and do the same thing where we have the pointer 10 to 16 reversed.

57
00:04:25.610 --> 00:04:31.130
So that's 16 points to ten and we change the variable so that it's 16 and 18.

58
00:04:31.700 --> 00:04:34.670
So we loop through this, we loop through this, we loop through this.

59
00:04:35.150 --> 00:04:40.700
And then the final thing we need to do is to say that this dot head.

60
00:04:41.640 --> 00:04:45.870
Because this thought had still has the value of one in it.

61
00:04:46.140 --> 00:04:50.910
We're going to say that dot next is going to equal to no.

62
00:04:51.090 --> 00:04:52.320
We're going to have.

63
00:04:53.480 --> 00:04:55.340
1.2 null.

64
00:04:57.540 --> 00:05:04.980
And this head now is instead going to be the first.

65
00:05:05.940 --> 00:05:15.300
And remember, by the time we loop through, everything first becomes 88 and second becomes null.

66
00:05:15.600 --> 00:05:20.730
So we are now changing at the very end, 88 to be equal to the head.

67
00:05:21.180 --> 00:05:26.040
And we also want to make sure that the tail is now one.

68
00:05:26.040 --> 00:05:33.480
And the way we do that, we have to go before the while loop and see here that this dot head, this

69
00:05:33.480 --> 00:05:36.090
first item should be the tail now.

70
00:05:36.120 --> 00:05:40.380
So at the beginning, before we do the loop, the tail.

71
00:05:42.790 --> 00:05:44.680
Become this dot head.

72
00:05:46.910 --> 00:05:47.480
All right.

73
00:05:47.480 --> 00:05:51.230
I know that was confusing, but let's see if that works.

74
00:05:51.680 --> 00:05:55.610
This is one of those problems that you really have to draw it out.

75
00:05:55.610 --> 00:06:00.440
And just by looking at this code, it's really hard for you to understand what's going on.

76
00:06:00.470 --> 00:06:06.380
I recommend that you code this along and step by step, perhaps console.log to understand what's going

77
00:06:06.380 --> 00:06:06.800
on.

78
00:06:07.490 --> 00:06:09.980
If I reverse this list and click Run.

79
00:06:11.160 --> 00:06:13.740
I get undefined because we have to return something.

80
00:06:13.740 --> 00:06:15.000
So let's return.

81
00:06:15.990 --> 00:06:18.870
Return this dot print list.

82
00:06:19.710 --> 00:06:20.910
Want to run this.

83
00:06:22.100 --> 00:06:22.670
All right.

84
00:06:22.670 --> 00:06:24.380
Let me just make sure that we're reversing.

85
00:06:24.380 --> 00:06:25.670
I'm going to comment it out.

86
00:06:26.120 --> 00:06:30.110
So we have the original list, 110 1688.

87
00:06:30.320 --> 00:06:35.450
If we reverse it, we have 88, 16, ten and one.

88
00:06:36.320 --> 00:06:40.310
And just for good measure, instead of printing lists, let's just return this here.

89
00:06:41.450 --> 00:06:46.370
So we get the entire length list to make sure everything is working properly.

90
00:06:47.770 --> 00:06:55.300
I have a link list that has a head value of 88 and a tail value of one.

91
00:06:55.630 --> 00:06:58.150
Looks like it's working.

92
00:06:58.570 --> 00:06:59.230
Awesome.

93
00:06:59.680 --> 00:07:01.210
Good job getting this far.

94
00:07:01.210 --> 00:07:08.950
And if you're able to understand this, I think this is probably the most difficult concept to understand

95
00:07:08.950 --> 00:07:11.410
in this entire course.

96
00:07:11.650 --> 00:07:16.630
So if you're able to get this good job, if not, you might have to watch this video a couple of times

97
00:07:16.990 --> 00:07:17.740
in the end.

98
00:07:17.740 --> 00:07:19.630
And this is the beauty of programming.

99
00:07:19.660 --> 00:07:22.570
All we're doing is logical steps.

100
00:07:22.660 --> 00:07:28.120
And no matter what language you use, whether it's JavaScript like we did in this case, the steps to

101
00:07:28.120 --> 00:07:30.160
create a link list are the exact same.

102
00:07:30.730 --> 00:07:34.570
Syntax may differ, but the logic is the same.

103
00:07:35.700 --> 00:07:36.720
I'll see in the next one.

104
00:07:37.390 --> 00:07:38.050
Bye bye.

