WEBVTT
1
00:00:01.540 --> 00:00:04.150
Let's implement our CU data structure.

2
00:00:04.970 --> 00:00:11.600
The very first thing we're going to do is the nice and simple peek, which simply tells us what is the

3
00:00:11.600 --> 00:00:14.840
very first item in our queue.

4
00:00:15.140 --> 00:00:20.720
So this dot first is what we want to peak into.

5
00:00:21.260 --> 00:00:25.430
If I run my queue dot peak.

6
00:00:26.690 --> 00:00:27.800
I should get.

7
00:00:28.130 --> 00:00:29.390
No, because.

8
00:00:29.390 --> 00:00:33.440
Well, there's absolutely nothing in our queue.

9
00:00:34.380 --> 00:00:36.630
What about on Q or Q?

10
00:00:36.660 --> 00:00:37.920
I'm not sure how to pronounce that.

11
00:00:37.920 --> 00:00:38.320
Let's go with.

12
00:00:38.320 --> 00:00:38.880
Thank you.

13
00:00:39.780 --> 00:00:43.230
In there we want to add to our waitlist.

14
00:00:44.550 --> 00:00:47.010
Again, similar to what we did with Stax.

15
00:00:47.010 --> 00:00:53.750
We're going to create a new node, and we're going to instantiate this new node with a value.

16
00:00:53.760 --> 00:00:55.950
Remember, we have the class here.

17
00:00:57.580 --> 00:01:03.520
And this value is going to get added to a node that has this dot value and this dot next.

18
00:01:04.410 --> 00:01:15.750
We then want to check and say, hey, if this dot length is equal to zero, that means there is nothing

19
00:01:15.750 --> 00:01:16.560
in our queue.

20
00:01:17.370 --> 00:01:23.310
Then simply say this first is going to equal the new node.

21
00:01:25.080 --> 00:01:31.900
And same with this last, because there's only one node in our list.

22
00:01:31.920 --> 00:01:35.730
This is very similar to what we implemented in the stack.

23
00:01:38.290 --> 00:01:39.190
Otherwise.

24
00:01:42.370 --> 00:01:47.140
We can say that this dot last.

25
00:01:48.050 --> 00:01:49.490
Dot next.

26
00:01:50.000 --> 00:01:57.830
So that is whatever is at the very last of the line and whatever the next value is, which initially

27
00:01:57.830 --> 00:01:59.420
whatever is last is pointing to.

28
00:01:59.420 --> 00:02:06.620
No, but we want to update that to say this time instead of pointing to null point the new node as the

29
00:02:06.620 --> 00:02:14.840
last in line and we want to update this last to now equal the new node.

30
00:02:16.830 --> 00:02:22.920
So that whatever was last in line is now pointing to the new node, and the new node is now last, which

31
00:02:22.950 --> 00:02:27.540
is going to make sure that this last points to no.

32
00:02:29.440 --> 00:02:33.490
Finally, we can't forget to increase the length by one.

33
00:02:34.660 --> 00:02:37.150
And then we can just simply return.

34
00:02:38.250 --> 00:02:40.020
This our data structure.

35
00:02:40.350 --> 00:02:41.420
So let's have a look.

36
00:02:41.430 --> 00:02:43.800
We want to create this line.

37
00:02:45.270 --> 00:02:49.740
Q So all we're going to do is say we want to on Q.

38
00:02:51.440 --> 00:02:52.130
Joy.

39
00:02:53.030 --> 00:02:54.110
If I click Run.

40
00:02:54.910 --> 00:03:02.290
First note I get joy with next null and last node is again joy with next null and length of one.

41
00:03:02.380 --> 00:03:03.770
So far so good.

42
00:03:03.790 --> 00:03:07.630
What if Matt comes and gets in line as well?

43
00:03:08.230 --> 00:03:11.200
If we add Matt, we now have first node.

44
00:03:11.200 --> 00:03:14.010
That is joy and last node that is Matt.

45
00:03:14.020 --> 00:03:18.210
And you can see here that the first node of joy is pointing to the next node.

46
00:03:18.220 --> 00:03:19.270
That is Matt.

47
00:03:21.290 --> 00:03:22.760
All right, let's add a few more.

48
00:03:22.760 --> 00:03:23.570
We'll add.

49
00:03:25.980 --> 00:03:32.220
Pavel who just got in line, and then finally Samir a little bit late, but he got in line as well.

50
00:03:32.250 --> 00:03:33.210
If I click Run.

51
00:03:34.200 --> 00:03:34.890
Perfect.

52
00:03:34.890 --> 00:03:36.620
Our last note is Samir.

53
00:03:36.630 --> 00:03:43.920
We have a length of four and we have the joy node, which is the very first item in our queue.

54
00:03:44.730 --> 00:03:48.310
Now let's say we open the door and we start letting people in.

55
00:03:48.330 --> 00:03:55.620
We want to cue this list and go from the very first, first in, first out, all the way till the end.

56
00:03:56.350 --> 00:04:03.400
Once again, it's very similar to a stack, except that we grab the node from the beginning instead

57
00:04:03.400 --> 00:04:04.090
of at the end.

58
00:04:04.330 --> 00:04:13.240
So we're first going to say if there's no this stuff first, if there's no first item, we can also

59
00:04:13.240 --> 00:04:14.650
check the length here if we want.

60
00:04:14.650 --> 00:04:17.070
So the list is empty.

61
00:04:17.079 --> 00:04:19.120
In that case, just return.

62
00:04:19.120 --> 00:04:19.660
No.

63
00:04:20.350 --> 00:04:22.390
And by list I mean the queue.

64
00:04:22.420 --> 00:04:24.670
If the queue is empty, then return.

65
00:04:24.670 --> 00:04:25.210
No.

66
00:04:26.180 --> 00:04:33.950
We also want to check if this is the last node in our queue so we can do something similar with what

67
00:04:33.950 --> 00:04:34.880
we did in stacks.

68
00:04:34.880 --> 00:04:40.700
We can say if this dot first equals this dot last.

69
00:04:42.460 --> 00:04:45.080
Again, we can just check length here as well if we want.

70
00:04:45.100 --> 00:04:47.110
But for now, that should be fine.

71
00:04:47.230 --> 00:04:52.300
If that's the case, I want this last to equal.

72
00:04:53.570 --> 00:04:54.280
NULL.

73
00:04:54.800 --> 00:04:58.490
Remember, we make sure that now last points to null.

74
00:04:59.350 --> 00:05:01.660
And regardless, as soon as we.

75
00:05:01.870 --> 00:05:06.460
Q We want to say this dot first.

76
00:05:07.320 --> 00:05:12.030
Equals this dot first dot next.

77
00:05:12.840 --> 00:05:15.090
That is whoever is first.

78
00:05:15.090 --> 00:05:21.870
Now, because we're going to remove joy we want who is ever after joy that is Matt to be in.

79
00:05:22.910 --> 00:05:30.860
First priority now and then we simply say this length minus minus to decrease the length and we can

80
00:05:30.860 --> 00:05:31.760
return.

81
00:05:33.410 --> 00:05:34.010
This.

82
00:05:35.230 --> 00:05:40.270
If I run this well, it's the same thing because we haven't run it here.

83
00:05:40.270 --> 00:05:41.860
So let's go ahead and do that.

84
00:05:42.370 --> 00:05:50.170
Let's first of all, run my cue dot peek to see who should be coming out of the queue.

85
00:05:50.170 --> 00:05:51.430
And that is joy.

86
00:05:52.610 --> 00:05:58.910
So if I do my cue, dot D cue and I click Run.

87
00:06:00.060 --> 00:06:01.200
We see that now.

88
00:06:01.200 --> 00:06:02.970
Matt is first in line.

89
00:06:02.970 --> 00:06:06.150
Joye has been removed and length is of three.

90
00:06:07.160 --> 00:06:16.430
And one thing to point out here, once we run DCPS here, we've completely lost the joy node from our

91
00:06:16.430 --> 00:06:20.560
memory because we have no more reference to it.

92
00:06:20.570 --> 00:06:25.010
Nothing is pointing to that memory space and JavaScript.

93
00:06:25.010 --> 00:06:29.000
The way it works is going to garbage, collect and remove joy.

94
00:06:30.200 --> 00:06:36.740
If we wanted to hold a pointer to Joy, then we could say Konst holding.

95
00:06:39.150 --> 00:06:50.790
Pointer and say this dot first so that before we update whoever is first, we can reference it with

96
00:06:50.790 --> 00:06:57.090
this variable so that we could potentially, if we still want to use joy, for example, in a waiting

97
00:06:57.090 --> 00:07:00.600
list app, maybe we still want to do something to the user.

98
00:07:00.960 --> 00:07:05.670
We can do this and still have access to the joy node.

99
00:07:07.060 --> 00:07:08.320
All right, let's finish this queue.

100
00:07:08.320 --> 00:07:10.930
Let's queue everybody from here.

101
00:07:10.930 --> 00:07:16.150
If I do queue and let's return this back to this so we see what's happening.

102
00:07:16.720 --> 00:07:17.590
If I run.

103
00:07:18.310 --> 00:07:25.870
Now, Pavel is first in line and Samir is last in line if I click or if I had the queue again.

104
00:07:28.080 --> 00:07:29.340
And I click Run.

105
00:07:29.430 --> 00:07:34.770
Samir is the last person on the list, but then we can finally let him in as well.

106
00:07:35.550 --> 00:07:36.450
There we go.

107
00:07:36.840 --> 00:07:43.380
Now we have an empty queue and we've just implemented our own queue data structure.

108
00:07:44.450 --> 00:07:45.350
Well done.

109
00:07:45.500 --> 00:07:46.610
Hope you had fun.

110
00:07:47.090 --> 00:07:48.320
I'll see you in the next video.

