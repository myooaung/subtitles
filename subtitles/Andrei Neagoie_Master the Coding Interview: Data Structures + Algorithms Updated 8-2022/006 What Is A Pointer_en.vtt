WEBVTT
1
00:00:01.150 --> 00:00:02.050
Welcome back.

2
00:00:02.380 --> 00:00:07.420
Let's quickly talk about pointers, something that you'll hear a lot in computer science topics.

3
00:00:08.370 --> 00:00:10.860
A pointer is simply this.

4
00:00:11.100 --> 00:00:17.910
It's a reference to another place in memory or another object or another node.

5
00:00:18.210 --> 00:00:23.670
And in JavaScript, we can demonstrate it with something like this.

6
00:00:24.520 --> 00:00:28.240
If I have an object, let's call it object one.

7
00:00:28.390 --> 00:00:34.570
That is a simple object that has a as true.

8
00:00:36.740 --> 00:00:38.480
And I'm going to comment this out.

9
00:00:40.890 --> 00:00:48.420
And now we do something like cost object two equals object one.

10
00:00:48.630 --> 00:00:57.030
We've just created a pointer, a reference to an object, and that is what a pointer is.

11
00:00:57.030 --> 00:00:58.890
It's simply a reference.

12
00:00:59.100 --> 00:01:02.220
Here, I'm not copying the object.

13
00:01:02.790 --> 00:01:11.460
I'm not saying object one equals a equals true, and also creating another location in memory that says

14
00:01:11.460 --> 00:01:14.250
A equals true in memory.

15
00:01:14.370 --> 00:01:18.150
When we look at our RAM, there's only one entry.

16
00:01:18.180 --> 00:01:19.980
A equals to true.

17
00:01:20.720 --> 00:01:27.530
And both object one and object two point to the same location in memory.

18
00:01:28.650 --> 00:01:30.060
To show you that is the case.

19
00:01:30.060 --> 00:01:32.310
Let's just console.log.

20
00:01:35.560 --> 00:01:36.940
Object one.

21
00:01:37.620 --> 00:01:39.510
And then console.log.

22
00:01:41.020 --> 00:01:42.340
Object to.

23
00:01:43.210 --> 00:01:51.490
And just so we're clear on this, I'm going to say one here and this is going to be two, so that if

24
00:01:51.490 --> 00:01:54.610
I run this, I have both a equals to true.

25
00:01:55.870 --> 00:01:58.540
But if I change object.

26
00:01:58.780 --> 00:02:02.980
A So accessing property a in object one.

27
00:02:03.820 --> 00:02:09.190
And I say that is going to equal booyah and I run this.

28
00:02:09.430 --> 00:02:10.270
Look at that.

29
00:02:10.419 --> 00:02:18.790
Both object one and object two changed because I've created a pointer here saying Object two is going

30
00:02:18.790 --> 00:02:21.400
to reference object one like so.

31
00:02:22.550 --> 00:02:26.420
And they both point to the same location in memory.

32
00:02:27.460 --> 00:02:28.990
And that's what a pointer is.

33
00:02:29.560 --> 00:02:33.160
It's simply saying, hey, this is where it is in memory.

34
00:02:34.440 --> 00:02:36.870
And when we look at our link list example.

35
00:02:38.130 --> 00:02:39.780
When we remove.

36
00:02:40.980 --> 00:02:45.180
Let's say a node at index of two and I hit go.

37
00:02:46.170 --> 00:02:48.000
One, two.

38
00:02:48.060 --> 00:02:52.020
We remove that and that just disappears from memory.

39
00:02:52.970 --> 00:02:53.990
How does that work?

40
00:02:54.290 --> 00:02:57.050
Well, if we go back to our example.

41
00:02:58.310 --> 00:03:00.590
I can just delete object.

42
00:03:01.270 --> 00:03:02.080
One.

43
00:03:02.740 --> 00:03:08.800
And I'm going to change these into let because we are going to change the values here.

44
00:03:09.400 --> 00:03:09.820
Five.

45
00:03:09.850 --> 00:03:11.080
Click Run.

46
00:03:11.890 --> 00:03:13.080
I get reference here.

47
00:03:13.090 --> 00:03:17.040
Object one is not defined at line 14.

48
00:03:17.050 --> 00:03:19.120
That's right over here.

49
00:03:19.810 --> 00:03:23.740
So let's just comment this out because object one doesn't exist anymore.

50
00:03:23.770 --> 00:03:24.850
If I click Run.

51
00:03:26.370 --> 00:03:30.660
I still have object to as booyah.

52
00:03:30.690 --> 00:03:33.210
Even though we deleted object one.

53
00:03:34.680 --> 00:03:34.890
Hmm.

54
00:03:34.920 --> 00:03:36.120
What's happening here?

55
00:03:37.380 --> 00:03:41.640
Well, the way it works in most programming languages is that.

56
00:03:42.590 --> 00:03:52.040
Our computers are going to delete the memory that is unused and because it sees that object to is still

57
00:03:52.040 --> 00:03:59.000
referencing this location in memory, this value in memory, it's not going to delete it.

58
00:03:59.650 --> 00:04:09.100
Because there's still a pointer to this location in memory and this is how things get deleted in languages

59
00:04:09.100 --> 00:04:10.330
like JavaScript.

60
00:04:10.810 --> 00:04:13.750
This is what you might call garbage collection.

61
00:04:14.460 --> 00:04:16.589
Where as soon as we say.

62
00:04:17.500 --> 00:04:25.720
Object to dot or object two equals hello now and I click run.

63
00:04:26.670 --> 00:04:36.570
Now object to which referenced the memory space that had a equals to true is now just simply a string.

64
00:04:36.630 --> 00:04:43.560
So because JavaScript is garbage collected, that is memory is managed automatically.

65
00:04:43.950 --> 00:04:50.010
This gets automatically garbage collected and deleted because nothing is pointing to it.

66
00:04:51.440 --> 00:04:59.090
However, there's low level languages where you have to manage your own memory and you have to manually

67
00:04:59.090 --> 00:05:03.080
delete this on referenced item in memory.

68
00:05:03.620 --> 00:05:11.660
And this can cause a lot of possible issues where you leave a memory that's not being used in memory,

69
00:05:11.660 --> 00:05:13.790
which is a valuable resource.

70
00:05:13.790 --> 00:05:20.000
But then there's also benefits with non garbage collected languages where you get to manage your own

71
00:05:20.000 --> 00:05:23.210
memory so you can make things really, really fast and efficient.

72
00:05:23.870 --> 00:05:24.410
All right.

73
00:05:24.680 --> 00:05:26.780
I think that's enough for pointers.

74
00:05:28.240 --> 00:05:34.330
A pointer is simply a reference to something else in memory.

75
00:05:34.450 --> 00:05:41.470
And we're going to use this knowledge in our next video to create our very first link list data structure.

76
00:05:42.190 --> 00:05:43.240
I'll see you in the next one.

