WEBVTT
1
00:00:00.500 --> 00:00:01.400
Welcome back.

2
00:00:02.020 --> 00:00:05.920
Let's convert our stack data structure to use a race.

3
00:00:06.790 --> 00:00:08.770
And this is going to be fairly simple.

4
00:00:09.310 --> 00:00:18.010
All we're going to do is remove all of this in the constructor and have this dot array equal to an empty

5
00:00:18.010 --> 00:00:18.490
array.

6
00:00:19.030 --> 00:00:25.300
We don't need the length property because that comes built in with arrays and JavaScript.

7
00:00:25.660 --> 00:00:31.150
Obviously this may be different for different programming languages, but for now we have this available

8
00:00:31.150 --> 00:00:34.270
to us in our language that we're using right now.

9
00:00:34.270 --> 00:00:35.790
So there you have it.

10
00:00:35.800 --> 00:00:37.060
That's our constructor.

11
00:00:37.860 --> 00:00:39.000
What about peak?

12
00:00:39.570 --> 00:00:43.710
Well, peak simply means that we want to see the very end of the array.

13
00:00:43.860 --> 00:00:47.750
Remember, with stacks, it's last in, first out.

14
00:00:47.760 --> 00:00:51.990
So when we do a peak, we want to see the very top thing, the latest thing that we've added.

15
00:00:52.470 --> 00:00:57.900
In our case, we can just simply say this dot array.

16
00:00:58.720 --> 00:01:01.360
And we're going to access that array with broken notation.

17
00:01:01.360 --> 00:01:10.780
And it's going to say this dot array, dot length, which is the length of the array minus one, because

18
00:01:10.780 --> 00:01:18.370
we do minus one because our index starts from 0 to 1 versus the length that starts from 1 to 2.

19
00:01:20.720 --> 00:01:21.330
That's it.

20
00:01:21.350 --> 00:01:23.430
We have peak implemented.

21
00:01:23.450 --> 00:01:29.330
Let's just comment this out and make sure that peak works.

22
00:01:30.310 --> 00:01:31.210
If I run this.

23
00:01:32.080 --> 00:01:33.640
We get undefined.

24
00:01:34.060 --> 00:01:39.910
Well, because there's nothing in the array and we can probably give better errors if we wanted to here.

25
00:01:39.910 --> 00:01:41.980
But for now I think this is fine.

26
00:01:43.220 --> 00:01:44.630
What about push?

27
00:01:45.860 --> 00:01:53.870
Well, with push, we get to delete all this code and simply say this dot array.

28
00:01:55.450 --> 00:01:58.300
Dot push value.

29
00:01:59.400 --> 00:02:00.570
How nice is that?

30
00:02:00.600 --> 00:02:01.760
That was nice and clean.

31
00:02:01.770 --> 00:02:03.420
Comes prebuilt with arrays.

32
00:02:03.420 --> 00:02:04.830
We can just use push.

33
00:02:05.500 --> 00:02:06.640
So if I do.

34
00:02:07.390 --> 00:02:10.210
My stack dot push and I click Run.

35
00:02:11.220 --> 00:02:16.270
Well, Peake here is giving me Google, but let's just run push only.

36
00:02:16.290 --> 00:02:20.610
I get a stack that has an array with Google in it.

37
00:02:20.640 --> 00:02:22.800
If I push to Udemy.

38
00:02:24.770 --> 00:02:25.950
I've added Udemy.

39
00:02:25.970 --> 00:02:27.950
If I do push discord.

40
00:02:28.610 --> 00:02:30.080
I've added discord.

41
00:02:30.080 --> 00:02:32.720
And if I do peak here, I should get discord back.

42
00:02:32.720 --> 00:02:35.360
Because it's the latest entry.

43
00:02:36.340 --> 00:02:37.120
There you go.

44
00:02:37.360 --> 00:02:38.590
How simple is that?

45
00:02:39.480 --> 00:02:43.470
That means that pop is also going to be very simple, right?

46
00:02:44.330 --> 00:02:45.290
Absolutely.

47
00:02:45.870 --> 00:02:47.720
Feels good deleting code, doesn't it?

48
00:02:47.840 --> 00:02:48.510
I hope we do.

49
00:02:48.530 --> 00:02:55.280
Is this dot dot pop that comes already in JavaScript?

50
00:02:55.460 --> 00:02:57.800
We can just return this if we want.

51
00:03:00.030 --> 00:03:03.400
If I click run, we'll have to run the pop here.

52
00:03:03.420 --> 00:03:04.890
Let's run, Pop.

53
00:03:06.340 --> 00:03:09.310
Which removes discord from the list.

54
00:03:09.730 --> 00:03:11.380
If I run, pop again.

55
00:03:12.420 --> 00:03:19.530
I get Google and if I pop this and I click run, we have an empty array.

56
00:03:20.360 --> 00:03:20.900
Look at that.

57
00:03:20.900 --> 00:03:22.330
Nice and simple.

58
00:03:22.340 --> 00:03:24.440
We didn't even have to use the note class.

59
00:03:24.440 --> 00:03:26.930
And that's pretty nice, right?

60
00:03:27.720 --> 00:03:32.090
So you can just use arrays as stacks quite easily.

61
00:03:32.100 --> 00:03:37.830
And we've already discussed the pros and cons and using linked lists versus arrays.

62
00:03:37.920 --> 00:03:43.950
One of the nice things about using an array is, well, arrays, at least in JavaScript already act

63
00:03:43.950 --> 00:03:47.160
like stacks, and it makes things very simple for us.

64
00:03:48.260 --> 00:03:49.790
But enough about stocks.

65
00:03:50.030 --> 00:03:52.910
Let's implement our own cue this time around.

66
00:03:53.420 --> 00:03:54.470
I'll see you in the next one.

67
00:03:55.010 --> 00:03:55.580
Bye bye.

