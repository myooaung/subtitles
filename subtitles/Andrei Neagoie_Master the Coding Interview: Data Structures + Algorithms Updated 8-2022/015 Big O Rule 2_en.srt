1
00:00:01,750 --> 00:00:02,680
Welcome back.

2
00:00:02,770 --> 00:00:04,650
Let's look at rule number two.

3
00:00:04,660 --> 00:00:07,390
That is, remove constants.

4
00:00:07,750 --> 00:00:08,770
Let's see what I mean.

5
00:00:10,250 --> 00:00:13,750
I have written here the most ridiculous function ever.

6
00:00:14,260 --> 00:00:20,800
The function is print, first item, then first half, then say hi 100 times.

7
00:00:21,520 --> 00:00:28,660
Probably not the best named function ever, but as the name describes, all we're doing is we're going

8
00:00:28,660 --> 00:00:33,760
to console.log the first item in the array.

9
00:00:34,510 --> 00:00:40,240
And then we're going to print the first half of the items.

10
00:00:40,240 --> 00:00:44,260
So I'm finding the middle index of the items.

11
00:00:44,260 --> 00:00:52,810
So I'm saying items length divided by two and I use math floor here in JavaScript as a way for us to

12
00:00:52,810 --> 00:00:58,660
make sure that we get a whole number and we're going to say variable index is zero.

13
00:00:58,960 --> 00:01:02,860
I'm using a wide loop here instead of a four loop.

14
00:01:02,860 --> 00:01:12,730
And I'm saying as long as middle index is greater than zero, I want you to console.log the items.

15
00:01:12,730 --> 00:01:15,010
So that means console.log.

16
00:01:16,050 --> 00:01:17,910
The first half of the item.

17
00:01:17,910 --> 00:01:19,080
So we had ten items.

18
00:01:19,080 --> 00:01:22,230
I'm going to console.log the first five items.

19
00:01:23,430 --> 00:01:30,120
And then I'm going to do another four loop and say I'm console logging high 100 times.

20
00:01:31,260 --> 00:01:31,860
Pretty.

21
00:01:32,400 --> 00:01:33,740
Pretty useless, I would say.

22
00:01:33,750 --> 00:01:35,340
Not a very useful function.

23
00:01:36,270 --> 00:01:38,880
What is the big o of this function?

24
00:01:39,060 --> 00:01:45,930
Well, looking over here, it's going to be big o of.

25
00:01:47,060 --> 00:01:48,590
One over here.

26
00:01:48,770 --> 00:01:54,170
So we have one for just logging the first items.

27
00:01:55,450 --> 00:02:00,370
Then we have half of whatever the items is.

28
00:02:00,370 --> 00:02:06,790
So in that case is n divided by two, because even though we have a for loop or a while loop, we're

29
00:02:06,790 --> 00:02:12,250
only logging half the items every time so we can just do MN divided by two.

30
00:02:13,080 --> 00:02:16,320
And then finally we're doing a for loop.

31
00:02:16,320 --> 00:02:18,170
But again, this is a bit of a trick.

32
00:02:18,180 --> 00:02:20,990
We're not looping over the items array.

33
00:02:21,000 --> 00:02:22,530
We just have 100.

34
00:02:22,530 --> 00:02:27,060
No matter how big the items array is, this is going to be always 100.

35
00:02:27,060 --> 00:02:29,250
So I just say plus 100.

36
00:02:29,280 --> 00:02:30,510
It's another step.

37
00:02:32,020 --> 00:02:37,030
Because again, we're just adding each of the steps that we see here.

38
00:02:37,540 --> 00:02:40,480
So this is our big O for this function.

39
00:02:41,160 --> 00:02:45,780
But rule number two states, we want to drop the constants.

40
00:02:46,500 --> 00:02:52,800
We simply are saying that we don't really care that this big O is actually.

41
00:02:53,310 --> 00:02:56,130
And divide it by two plus 101.

42
00:02:57,810 --> 00:02:59,220
Remember in an interview.

43
00:02:59,250 --> 00:03:02,580
We only care about the things that we saw on the chart.

44
00:03:02,910 --> 00:03:04,610
Nothing specific like this.

45
00:03:04,620 --> 00:03:07,140
So this turns into one.

46
00:03:07,350 --> 00:03:10,860
And this even though it's divided by half.

47
00:03:11,070 --> 00:03:18,810
In the grand scheme of things, we only care about when it scales, when the inputs are getting larger

48
00:03:18,810 --> 00:03:19,590
and larger.

49
00:03:19,740 --> 00:03:27,120
So as NW gets bigger and bigger, we don't care about adding an extra 100 because if NW is a million

50
00:03:27,120 --> 00:03:31,590
adding an extra 100 on there, another 100 steps doesn't really matter.

51
00:03:31,590 --> 00:03:33,600
And same with dividing by two.

52
00:03:34,710 --> 00:03:36,900
As and gets larger and larger.

53
00:03:37,350 --> 00:03:40,830
Dividing by two has a decreasingly significant effect.

54
00:03:40,830 --> 00:03:42,690
So we drop the constants.

55
00:03:43,760 --> 00:03:44,540
Like this.

56
00:03:44,840 --> 00:03:48,230
So this becomes o of NW plus one.

57
00:03:49,280 --> 00:03:49,780
Okay.

58
00:03:49,790 --> 00:03:57,980
And because one if and was a million is very insignificant we can just drop this as well.

59
00:03:58,040 --> 00:04:00,740
This function just becomes o of n.

60
00:04:01,370 --> 00:04:07,010
What if we had another function that had, let's say, of a plus 50?

61
00:04:08,510 --> 00:04:12,470
Or a of 50 with a ton of zeros.

62
00:04:12,860 --> 00:04:13,940
It doesn't really matter.

63
00:04:13,940 --> 00:04:15,980
We drop the constants.

64
00:04:17,360 --> 00:04:19,010
It's going to be okay.

65
00:04:19,829 --> 00:04:21,480
What about this other situation?

66
00:04:23,010 --> 00:04:24,930
What if we have this function here?

67
00:04:24,960 --> 00:04:27,330
Compress boxes twice.

68
00:04:28,020 --> 00:04:34,290
Where this function actually has to four loops, where it does the same thing, but it's two for loops.

69
00:04:34,680 --> 00:04:41,660
So we have o n in this for loop and then ov and in this for loop.

70
00:04:41,670 --> 00:04:52,410
And because these are two separate steps, well we add them together so it becomes ov and plus of n

71
00:04:52,440 --> 00:04:54,390
equals ov to n.

72
00:04:54,870 --> 00:05:00,720
But again, in an interview, this doesn't really matter because we drop the constants.

73
00:05:00,990 --> 00:05:05,370
And if we drop the constants, what does this function equate to?

74
00:05:05,400 --> 00:05:08,250
Well, it's just o of n.

75
00:05:09,310 --> 00:05:11,020
To prove that I'm not lying to you.

76
00:05:11,020 --> 00:05:19,540
If we look at this function on our graph, we see that the elements as the elements increase.

77
00:05:19,780 --> 00:05:23,560
We have two operations because we have two for loops.

78
00:05:23,890 --> 00:05:29,350
If we have two elements, in that case, we do four operations.

79
00:05:30,080 --> 00:05:37,310
If we have three, then we do one, two, three, four, five, six, and you see how it increases.

80
00:05:37,310 --> 00:05:43,580
But at the end of the day, even though the line is steeper, we have a lot more operations to do.

81
00:05:43,940 --> 00:05:48,440
The way the line increases is still linear.

82
00:05:49,950 --> 00:05:51,780
And that's the key here with Big O.

83
00:05:51,780 --> 00:05:55,800
We don't really care about how steep the line is.

84
00:05:55,800 --> 00:06:01,080
We care about how the line moves as our inputs increase.

85
00:06:02,130 --> 00:06:04,980
Makes our lives a whole lot simpler, doesn't it?

86
00:06:05,650 --> 00:06:08,020
So remember, drop the constants.

87
00:06:08,050 --> 00:06:12,670
You're never going to really see numbers in big o notation.

88
00:06:12,700 --> 00:06:17,680
Most likely the notations that we've seen in the past before on our graph.

89
00:06:19,140 --> 00:06:23,970
Usually these and the only time you see numbers is when you have.

90
00:06:24,930 --> 00:06:29,940
Of one of and squared or oh of two to the power of n.

91
00:06:31,230 --> 00:06:32,670
Which we'll get to later.

92
00:06:32,670 --> 00:06:33,270
Don't worry.

93
00:06:33,900 --> 00:06:35,070
I'll see you in the next video.

94
00:06:35,370 --> 00:06:35,910
Bye bye.

