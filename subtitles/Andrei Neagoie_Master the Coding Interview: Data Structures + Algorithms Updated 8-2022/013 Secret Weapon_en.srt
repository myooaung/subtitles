1
00:00:00,890 --> 00:00:03,500
So you've nailed your interview up until now.

2
00:00:03,740 --> 00:00:05,190
Everything is going well.

3
00:00:05,210 --> 00:00:06,680
The coding went well.

4
00:00:06,680 --> 00:00:11,590
Some of the questions that they asked you were prepared for, you told your hero stories.

5
00:00:11,600 --> 00:00:17,660
Everything feels good, or sometimes things don't work out as expected.

6
00:00:17,660 --> 00:00:23,750
And maybe you didn't do that well in your coding questions, or they asked you a question that you weren't

7
00:00:23,750 --> 00:00:26,390
expecting in the non technical questions.

8
00:00:27,140 --> 00:00:34,100
Well, never give up, first of all, because it's very rare that you have a perfect interview.

9
00:00:34,900 --> 00:00:39,730
Remember, you're not competing against 100% test score.

10
00:00:40,450 --> 00:00:42,490
You're competing against other candidates.

11
00:00:42,520 --> 00:00:45,130
Other candidates get asked questions, too.

12
00:00:45,670 --> 00:00:53,140
There are ways that you can improve those odds and make sure that you still stand out, even if perhaps

13
00:00:53,140 --> 00:00:54,820
you didn't ace everything.

14
00:00:55,210 --> 00:00:58,900
And here I want to list out some of my what I call secret weapons.

15
00:00:58,900 --> 00:01:01,540
Yes, a bit of an exaggerated name.

16
00:01:01,540 --> 00:01:08,350
But I think if you're able to work these into conversations, into questions, I think it will improve

17
00:01:08,350 --> 00:01:10,990
your chances of landing that job.

18
00:01:11,760 --> 00:01:17,910
Because what I'm about to show you are problems that I've noticed a lot in the workplace when it comes

19
00:01:17,910 --> 00:01:18,900
to programmers.

20
00:01:19,290 --> 00:01:22,410
There are a ton of really great programmers.

21
00:01:22,680 --> 00:01:30,270
But amongst them, there's always things that are common, that are problematic, perhaps not for us

22
00:01:30,270 --> 00:01:34,780
programmers, but for managers, bosses, CEOs.

23
00:01:34,800 --> 00:01:42,330
And by avoiding these common pitfalls, you can stand out and show that you're not a typical developer.

24
00:01:43,080 --> 00:01:44,830
So let's go over some of them.

25
00:01:45,790 --> 00:01:49,660
The first one is simplicity over complexity.

26
00:01:49,810 --> 00:01:56,500
It's very easy as a programmer to get into our own heads and complicate things and come up with really

27
00:01:56,500 --> 00:02:04,600
interesting solutions to problems that perhaps only we understand, or perhaps that only few smart coders

28
00:02:04,600 --> 00:02:05,770
might understand.

29
00:02:06,380 --> 00:02:11,150
But remember, code and problem solving is about solving problems for others.

30
00:02:11,720 --> 00:02:15,860
And as we know, code has to be maintainable, readable.

31
00:02:16,040 --> 00:02:22,160
You want to demonstrate that you're the type of programmer that emphasizes simplicity over complexity.

32
00:02:22,190 --> 00:02:23,900
Work that into your conversation.

33
00:02:23,900 --> 00:02:24,500
Work how?

34
00:02:24,500 --> 00:02:30,620
When you worked on a project with team members, you wanted to make sure that the code was readable,

35
00:02:30,620 --> 00:02:36,080
that you didn't overcomplicate the problem just to appear smart or clever.

36
00:02:36,080 --> 00:02:43,820
Instead, you focused on readable code because you understood that working in a team means making sure

37
00:02:43,820 --> 00:02:48,470
that the code is readable and maintainable long after you've written it.

38
00:02:49,280 --> 00:02:55,700
This is a great thing to point out in an interview because it's rare for somebody to understand this

39
00:02:55,700 --> 00:02:57,640
with only a few years of experience.

40
00:02:57,650 --> 00:03:02,600
This is something that a lot of senior developers know or senior programmers know.

41
00:03:03,020 --> 00:03:07,410
The next one is a famous quote that a lot of people must have heard by now.

42
00:03:07,430 --> 00:03:11,000
Premature optimization is the root of all evil.

43
00:03:11,640 --> 00:03:16,980
We always try to optimize our code, optimize performance, see what we can do better.

44
00:03:17,460 --> 00:03:21,120
But you have to work with your limited time.

45
00:03:21,300 --> 00:03:29,280
That is based on how much time I have now, how many resources I have now is making a 1% improvement

46
00:03:29,280 --> 00:03:30,560
in performance.

47
00:03:30,570 --> 00:03:31,340
Worth it?

48
00:03:31,350 --> 00:03:36,480
If you're able to demonstrate to the interviewer that you're the type of person that understands the

49
00:03:36,480 --> 00:03:43,650
value of time and resources and money and how you're able to work on things that matter, such as performance,

50
00:03:43,650 --> 00:03:47,610
which is a big one without getting too obsessed with it.

51
00:03:47,610 --> 00:03:49,260
That's a good thing.

52
00:03:49,260 --> 00:03:52,440
And again, something that a lot of senior developers and programmers know.

53
00:03:53,420 --> 00:03:55,340
The next one is kind of related.

54
00:03:55,370 --> 00:03:59,450
You want to focus on overall goal and not be myopic.

55
00:03:59,480 --> 00:04:01,160
Now, what does myopic mean?

56
00:04:01,250 --> 00:04:05,720
Myopic means you're just very narrowly focused on one thing.

57
00:04:06,310 --> 00:04:14,920
So we get tasked with a problem and all we care about is solving that problem and we start to ignore

58
00:04:14,920 --> 00:04:17,800
some other things that might be important to the project.

59
00:04:18,040 --> 00:04:26,770
For example, a client might have a deadline that needs a product out the door and finished in a week.

60
00:04:27,130 --> 00:04:32,440
But you as a programmer focus on really good code, a really good performance.

61
00:04:32,470 --> 00:04:40,470
You ignore that request for one week and instead focus on really, really good code.

62
00:04:40,480 --> 00:04:42,640
And that's not necessarily a bad thing.

63
00:04:42,640 --> 00:04:46,900
But you have to understand the business consequences of what we do.

64
00:04:46,900 --> 00:04:51,610
And when you're working at a company or for yourself or freelancing, you want to look at the overall

65
00:04:51,610 --> 00:04:55,570
goal and not just focus on what you think is important.

66
00:04:55,930 --> 00:05:00,280
You have to understand what the needs are of the project and work with them.

67
00:05:00,280 --> 00:05:04,960
And again, if you're able to demonstrate this and work this into the conversation, such as saying

68
00:05:04,960 --> 00:05:12,400
something like a client requested that we deliver a product before their big conference, I knew that

69
00:05:12,400 --> 00:05:13,960
that was a very important thing.

70
00:05:13,960 --> 00:05:21,190
So I set up a meeting with my team to make sure that that was our number one priority and that we could

71
00:05:21,190 --> 00:05:22,510
always refactor code.

72
00:05:22,510 --> 00:05:27,250
And we actually dedicated time after the conference for a week where we refactor our code.

73
00:05:27,250 --> 00:05:33,370
But we made sure that the very first thing we did was to make sure that we're able to meet the deadline

74
00:05:33,370 --> 00:05:39,220
that the client wants because the client provides the overall goal of a project, and a happy client

75
00:05:39,220 --> 00:05:45,580
means that we're able to continue working with them again, showing that you're not a typical developer

76
00:05:45,580 --> 00:05:50,620
that just gets given a task and that's all you focus on that you understand the overall needs of your

77
00:05:50,620 --> 00:05:51,250
tasks.

78
00:05:52,170 --> 00:05:58,260
This is another very common one, especially amongst programmers like us, where we tend to like to

79
00:05:58,260 --> 00:06:04,040
complain about clients ugly code, maybe coworkers that can get frustrating.

80
00:06:04,050 --> 00:06:07,140
First of all, that usually never helps.

81
00:06:07,470 --> 00:06:11,490
But it also creates a very toxic environment at the workplace.

82
00:06:11,520 --> 00:06:15,990
Nobody wants to work with somebody that complains all the time that creates this negative energy.

83
00:06:16,110 --> 00:06:21,660
And if you're able to talk to your interviewer and how you're the type of person that is comfortable

84
00:06:21,660 --> 00:06:27,900
working with clients and that you don't like complaining or being negative about coworkers or bosses,

85
00:06:28,050 --> 00:06:33,210
well, that immediately makes you stand out because you're a pleasant person to work with, and that's

86
00:06:33,210 --> 00:06:37,420
a hard thing to put into a conversation in an interview.

87
00:06:37,440 --> 00:06:43,080
But there are ways of doing it, such as your past experiences where you may have demonstrated these

88
00:06:43,080 --> 00:06:43,770
values.

89
00:06:44,160 --> 00:06:46,280
And then finally, this is a big one.

90
00:06:46,290 --> 00:06:47,370
No ego.

91
00:06:47,400 --> 00:06:53,370
When we write code or when we program, when we solve problems, we take pride in our work.

92
00:06:53,370 --> 00:06:59,460
And when we submit something like a pull request or somebody checks our code and they make comments

93
00:06:59,460 --> 00:07:04,650
to it, we might feel a little bit hurt by these comments because we feel that we're not perfect, that

94
00:07:04,650 --> 00:07:10,500
we made mistakes and a lot of tension can form in workplaces when this happens.

95
00:07:10,530 --> 00:07:15,990
It is a big problem for companies, but if you're the type of coder that likes getting feedback, that

96
00:07:15,990 --> 00:07:20,430
takes constructive criticism and understands that there's no ego here.

97
00:07:20,430 --> 00:07:26,670
We work as a team, there's no individual, and that the overall goal of the company or project is what

98
00:07:26,670 --> 00:07:27,300
matters.

99
00:07:27,300 --> 00:07:34,920
And you're able to demonstrate that that immediately is a big sell or it makes you a very valuable developer.

100
00:07:34,920 --> 00:07:41,940
And if you're able to do these things all over here, that makes you really stand out.

101
00:07:41,970 --> 00:07:48,360
I can speak from experience when hiring developers and working at some big companies that these are

102
00:07:48,360 --> 00:07:49,320
really rare.

103
00:07:49,500 --> 00:07:57,330
Having a developer that understands these and is comfortable with these points is very, very valuable.

104
00:07:57,330 --> 00:08:00,840
And you mostly only see these with senior developers.

105
00:08:01,080 --> 00:08:02,790
So this is your secret weapon.

106
00:08:02,790 --> 00:08:07,740
If you're able to work these into conversation, it's going to really give you those extra points with

107
00:08:07,740 --> 00:08:08,460
the interviewer.

108
00:08:09,210 --> 00:08:10,350
I'll see you in the next one.

109
00:08:10,620 --> 00:08:11,160
Bye bye.

