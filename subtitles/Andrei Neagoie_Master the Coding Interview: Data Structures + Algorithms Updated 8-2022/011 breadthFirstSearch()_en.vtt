WEBVTT
1
00:00:01.770 --> 00:00:02.760
Welcome back.

2
00:00:02.790 --> 00:00:06.630
Let's start to code our very first algorithm with breadth.

3
00:00:06.630 --> 00:00:08.039
First search.

4
00:00:08.740 --> 00:00:15.460
If you remember with breadth first search, we have to go from the top, then to the left, and then

5
00:00:15.460 --> 00:00:17.830
visit all the nodes in that level.

6
00:00:18.340 --> 00:00:26.560
And when I said that it uses a lot of memory, is that when it visits six and 12, from there it's going

7
00:00:26.560 --> 00:00:29.740
to go back to one, four, then 34, then 45.

8
00:00:29.860 --> 00:00:38.410
So as it goes through this level, we need to keep a reference to all the children nodes of every node

9
00:00:38.410 --> 00:00:43.090
that we visit so that we can go back to them and visit one and four.

10
00:00:43.270 --> 00:00:50.170
That's where the memory is coming from, because we have to keep track of those children of the level

11
00:00:50.170 --> 00:00:50.950
that we're on.

12
00:00:51.940 --> 00:00:58.930
And you'll also notice this path that we're taking from 9 to 6 to 12 to 1 to 4 to 30 4 to 45.

13
00:00:59.990 --> 00:01:05.810
We're going to be using a Q data structure which allows us to keep a reference to the nodes that we

14
00:01:05.810 --> 00:01:10.350
want to come back to because we know six is in front of 12.

15
00:01:10.370 --> 00:01:14.720
We can go back to it and discover it's child nodes.

16
00:01:15.200 --> 00:01:18.590
So let's get coding with our breath first search algorithm.

17
00:01:19.830 --> 00:01:24.870
We have over here our binary search tree from our tree data structure section.

18
00:01:25.650 --> 00:01:32.580
You've already implemented the insert lookup, remove methods, and we've created this binary search

19
00:01:32.580 --> 00:01:35.670
tree that gives us this type of tree.

20
00:01:36.240 --> 00:01:44.940
Let's remove these for now and start coding our own breadth for search implementation.

21
00:01:45.180 --> 00:01:53.310
And ideally, by calling this function, we get a list of all these items in the order of breadth first

22
00:01:53.310 --> 00:01:54.090
search.

23
00:01:54.810 --> 00:01:58.230
That is nine 421 615 170.

24
00:01:59.780 --> 00:02:00.770
Let's call this.

25
00:02:02.090 --> 00:02:02.720
Breath.

26
00:02:03.720 --> 00:02:05.220
First search.

27
00:02:08.520 --> 00:02:11.700
And within here, we need three things.

28
00:02:11.850 --> 00:02:19.680
One is the current node, which will start with the root node.

29
00:02:23.300 --> 00:02:25.370
And we need two other things.

30
00:02:25.370 --> 00:02:28.040
One is the actual list.

31
00:02:28.040 --> 00:02:29.690
That will be our answer.

32
00:02:30.320 --> 00:02:36.320
We'll have an array here where we insert these numbers into in the order of breadth for search.

33
00:02:36.680 --> 00:02:43.790
And we also need a Q data structure, which we'll use an array for this example.

34
00:02:44.560 --> 00:02:50.560
To keep track of the level we're at so that we can access the children.

35
00:02:51.040 --> 00:02:52.300
Once we go through it.

36
00:02:53.290 --> 00:02:58.290
Remember, we're going to keep track of nine, then we're going to keep track of six and 12.

37
00:02:58.300 --> 00:03:01.650
And when we get to six and 12, and that's going to be in our queue.

38
00:03:01.660 --> 00:03:09.070
But we have to go back once we're at the end of that level to six so that we can discover one and four.

39
00:03:10.420 --> 00:03:12.580
So that's what the Q will be used for.

40
00:03:13.560 --> 00:03:20.340
Now the very first thing we're going to do is to add to the queue the very first item, the root node.

41
00:03:20.460 --> 00:03:26.220
So we're going to say queue dot, push, current node.

42
00:03:28.910 --> 00:03:35.990
Now what we need to do here is go from the current node down to our children node and again go from

43
00:03:35.990 --> 00:03:40.700
left to right and then go to their children node and go from left to right.

44
00:03:41.480 --> 00:03:44.210
And the way we're going to do that is to use a while loop.

45
00:03:44.300 --> 00:03:51.770
And we'll say that as long as queue length is going to be greater than zero, that is, we have nothing

46
00:03:51.770 --> 00:03:52.850
left in the queue.

47
00:03:53.870 --> 00:03:56.660
In that case we'll say that the current node.

48
00:03:58.080 --> 00:04:01.200
We'll be cue dot shift.

49
00:04:03.670 --> 00:04:10.210
And shift simply means that we take the very first item in the queue.

50
00:04:10.240 --> 00:04:15.730
Remember, a queue is just a line up to the rollercoaster and the first person that comes in gets to

51
00:04:15.730 --> 00:04:18.040
go first on the roller coaster and shift.

52
00:04:18.040 --> 00:04:21.970
Simply returns and removes the first item in the queue.

53
00:04:24.140 --> 00:04:33.470
In our case, we'll have nine as the first item in the queue, the nine node, and we're going to shift

54
00:04:33.470 --> 00:04:37.610
that and assign it to the current node.

55
00:04:38.560 --> 00:04:47.470
And because this is the root node, we want to start off in our answer that the list will have the number

56
00:04:47.470 --> 00:04:48.970
nine at the top.

57
00:04:49.030 --> 00:04:51.340
Let's move this up here just so you can see better.

58
00:04:54.330 --> 00:04:59.880
So the first thing we're going to do is say list dot, push the current.

59
00:05:00.840 --> 00:05:02.130
Node dot.

60
00:05:04.030 --> 00:05:06.250
Value, which will be not.

61
00:05:06.280 --> 00:05:09.430
So we have the first answer in our list, which is nine.

62
00:05:10.220 --> 00:05:15.320
From there, we're going to say, hey, does the nine node?

63
00:05:16.010 --> 00:05:18.620
Have a left child.

64
00:05:19.470 --> 00:05:27.480
Because if it does, let's add it to the queue saying that you need to check out that node and we'll

65
00:05:27.480 --> 00:05:29.640
push it to the queue.

66
00:05:30.990 --> 00:05:33.750
Current node dot left.

67
00:05:34.600 --> 00:05:39.790
So what we just did here is we've added four to the Q.

68
00:05:41.000 --> 00:05:43.790
And then we also want to add 20 to the.

69
00:05:43.790 --> 00:05:50.240
Q So I'm going to say if after you've added four to the Q, I'm going to say, hey, does a current

70
00:05:50.240 --> 00:05:53.540
node have a right node, child node?

71
00:05:54.420 --> 00:06:02.910
In that case, we'll add it to the queue again as the second item in the queue and the current dot right

72
00:06:03.090 --> 00:06:05.040
will be pushed to the queue.

73
00:06:07.120 --> 00:06:09.790
And this is the amazing thing of what we just did.

74
00:06:09.820 --> 00:06:16.900
Now that the Q has two items as it passes through, it will have four and 20.

75
00:06:17.690 --> 00:06:26.450
It's going to loop through, come to this line and say queue shift is going to grab four and say push

76
00:06:26.450 --> 00:06:29.750
four to the current to the list.

77
00:06:30.610 --> 00:06:35.970
And then it's going to say, hey, does four have a left child?

78
00:06:35.980 --> 00:06:36.670
Yes, it does.

79
00:06:36.670 --> 00:06:37.570
It has one.

80
00:06:37.600 --> 00:06:45.100
Well, then add it to the queue so one gets added to the queue that has for 20 and now one.

81
00:06:45.220 --> 00:06:48.160
And then we say, hey, does four have a right child?

82
00:06:48.610 --> 00:06:49.930
Yes, we have six.

83
00:06:49.930 --> 00:06:52.030
Well, we're going to add that to the queue again.

84
00:06:52.030 --> 00:06:58.560
So we're going to have for 21 six and then we go back to the top and say what's next in line?

85
00:06:58.570 --> 00:07:07.390
Well, we have 20, so let's shift 20, grab that, remove that from our queue and go through it again.

86
00:07:07.390 --> 00:07:11.560
Again, left child would be 15 and right child will be 170.

87
00:07:12.380 --> 00:07:19.010
If we consult our log here are current node dot value.

88
00:07:20.070 --> 00:07:22.530
And actually, let's just log it.

89
00:07:26.240 --> 00:07:27.110
Down here.

90
00:07:28.450 --> 00:07:30.370
Which will be the shifted node.

91
00:07:30.370 --> 00:07:35.500
That is the node that we're going to be operating on and checking and we'll have to actually call that.

92
00:07:35.500 --> 00:07:38.080
So let's do tree dot.

93
00:07:38.900 --> 00:07:42.260
Breath for a search and I click run.

94
00:07:43.020 --> 00:07:48.750
We see that I'm checking nine, then I'm checking four, then I'm checking 20, then I'm checking one,

95
00:07:48.750 --> 00:07:51.420
then six, then 15, then one, 17.

96
00:07:52.200 --> 00:07:53.520
Very, very cool.

97
00:07:53.520 --> 00:07:56.070
And we're pushing that to the list every time.

98
00:07:56.370 --> 00:08:00.930
So all we need to do at the end is just say return list.

99
00:08:02.060 --> 00:08:03.860
So that if I run this.

100
00:08:04.950 --> 00:08:05.760
Look at that.

101
00:08:05.940 --> 00:08:07.370
I have my breath.

102
00:08:07.380 --> 00:08:16.530
First search that returns nine, then four, then 20, then one, 615 and 170.

103
00:08:18.550 --> 00:08:20.230
That wasn't too bad, was it?

104
00:08:20.410 --> 00:08:28.450
We see from this code here that it's quite simple and the only issue that we have is that this queue

105
00:08:28.480 --> 00:08:36.400
can get pretty large because we have to keep reference to our child nodes.

106
00:08:36.429 --> 00:08:43.539
The memory consumption that can really hurt us is this queue that we keep adding to, we keep popping

107
00:08:43.539 --> 00:08:52.270
things, but we also add to the queue so that if we have a really wide tree instead of a binary tree

108
00:08:52.270 --> 00:08:57.880
where we just have a left and a right and maybe we have ten child nodes, this queue can get pretty

109
00:08:57.880 --> 00:09:03.010
big and depending on the data, that memory consumption might be big.

110
00:09:03.010 --> 00:09:06.040
And that's one of the main downsides with breadth for search.

111
00:09:06.490 --> 00:09:10.960
But hopefully you see the simplicity of breadth for search wasn't too bad, was it?

112
00:09:11.830 --> 00:09:12.430
All right.

113
00:09:12.640 --> 00:09:13.990
I'll see you in the next video.

114
00:09:14.200 --> 00:09:14.800
Bye bye.

