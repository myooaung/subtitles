WEBVTT
1
00:00:00.860 --> 00:00:01.790
Welcome back.

2
00:00:02.210 --> 00:00:05.540
It's time for us to implement our own hash table.

3
00:00:05.570 --> 00:00:12.890
But let's do a bit of an exercise and this may be difficult, so don't get upset if you are not able

4
00:00:12.890 --> 00:00:13.790
to finish it.

5
00:00:14.530 --> 00:00:17.790
After this, I'll provide a solution video and we'll walk through it.

6
00:00:17.800 --> 00:00:22.660
But as an extra challenge, I have created a template for you.

7
00:00:23.470 --> 00:00:25.990
A new hash table that we're going to create.

8
00:00:26.020 --> 00:00:32.820
Yes, I know JavaScript already has objects and we can just simply create one like we've seen before.

9
00:00:32.830 --> 00:00:34.270
But what's the fun in that?

10
00:00:34.270 --> 00:00:35.650
Let's create our own.

11
00:00:36.250 --> 00:00:41.770
Now, this hash table has a constructor that will receive a size.

12
00:00:42.760 --> 00:00:47.890
So when we create this hash table, we're going to give it a memory space size of 50.

13
00:00:47.920 --> 00:00:51.430
Let's say that we only want 50 shelves of memory.

14
00:00:51.580 --> 00:00:58.420
We're going to create this data where our data will live and within it, it's going to create a new

15
00:00:58.420 --> 00:00:59.080
array.

16
00:00:59.800 --> 00:01:03.400
And this array is going to hold our information for us.

17
00:01:03.940 --> 00:01:06.940
So we would have something like.

18
00:01:08.690 --> 00:01:09.590
Grapes.

19
00:01:11.930 --> 00:01:16.940
And 10,000 as our bucket.

20
00:01:18.480 --> 00:01:24.800
So the first item in the array will be an array that is grapes.

21
00:01:24.810 --> 00:01:25.860
10,000.

22
00:01:26.250 --> 00:01:29.250
Remember if we looked at the diagram.

23
00:01:30.000 --> 00:01:34.470
We have these buckets that our data lives in.

24
00:01:35.780 --> 00:01:41.390
And because right now we're implementing our own hash tables, we're using array instead of objects.

25
00:01:42.020 --> 00:01:51.050
But the idea is that using a new method that you'll have to create, which will be called set, you're

26
00:01:51.050 --> 00:01:59.270
going to be able to set grapes as the first index in the array and the number of grapes as the second

27
00:01:59.690 --> 00:02:00.860
index in the array.

28
00:02:01.370 --> 00:02:09.440
And from there we can have a another method get which retrieves the grapes and returns.

29
00:02:09.680 --> 00:02:10.520
10,000.

30
00:02:10.820 --> 00:02:11.510
Now.

31
00:02:12.300 --> 00:02:17.820
You're probably wondering, oh, boy, what is this gibberish?

32
00:02:18.270 --> 00:02:23.910
And I wrote this ahead of time for you because it's not really important as part of the course.

33
00:02:24.210 --> 00:02:29.670
But remember, we need a hash function in order to create a hash table.

34
00:02:29.670 --> 00:02:36.330
And I've created here the smallest, tiniest hash function you can think of.

35
00:02:37.350 --> 00:02:42.270
We're going to talk about what this actually does in the solution video.

36
00:02:42.750 --> 00:02:48.840
For now, all you have to know is that it's going to just generate a hash for us.

37
00:02:49.470 --> 00:02:56.210
For example, if I do underscore hash here and give it a key.

38
00:02:56.220 --> 00:03:01.410
So let's say that I want to insert grapes and I click run.

39
00:03:01.410 --> 00:03:02.570
I get 23.

40
00:03:02.580 --> 00:03:05.480
If I click Run again, I always get 23.

41
00:03:05.490 --> 00:03:10.200
If I change grapes to two S's, I get a different memory space.

42
00:03:10.920 --> 00:03:18.570
If I just type in randomly here again, I get different memory spaces all from 0 to 50.

43
00:03:19.620 --> 00:03:23.040
So your challenge here is to create.

44
00:03:23.930 --> 00:03:31.490
These two new methods set and get that adds to this data.

45
00:03:32.170 --> 00:03:35.290
And retrieves from this data.

46
00:03:36.360 --> 00:03:44.010
Again, if you're not super familiar with JavaScript, this may be hard, but give it a try.

47
00:03:44.010 --> 00:03:47.100
And in the next video we'll walk through step by step.

48
00:03:48.150 --> 00:03:49.080
I'll see you on that one.

49
00:03:49.620 --> 00:03:50.190
Bye bye.

