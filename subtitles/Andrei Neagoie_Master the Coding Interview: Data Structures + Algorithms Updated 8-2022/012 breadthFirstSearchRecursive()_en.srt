1
00:00:01,770 --> 00:00:02,210
All right.

2
00:00:02,220 --> 00:00:03,930
We're going to do this just for fun.

3
00:00:03,960 --> 00:00:11,250
Usually breath research is implemented the way we saw it, just using a iterative approach.

4
00:00:11,310 --> 00:00:16,590
But for fun, I want to see if we can do a recursive breath for search.

5
00:00:17,130 --> 00:00:23,400
And in order for us to do a recursive breath for search, we can create a new function.

6
00:00:23,400 --> 00:00:25,650
We'll have R here for recursive.

7
00:00:26,540 --> 00:00:33,530
And in here we need to create a base case when to stop and we will stop.

8
00:00:33,650 --> 00:00:34,430
If.

9
00:00:34,970 --> 00:00:39,650
Q dot length is.

10
00:00:40,620 --> 00:00:41,220
Zero.

11
00:00:41,730 --> 00:00:47,130
Or we can just say when queue length is zero like this.

12
00:00:47,640 --> 00:00:53,010
If that's the case, we want to have our base case and return the list.

13
00:00:54,690 --> 00:01:01,470
But you'll notice here that I haven't defined what Q and list is like I did with our iterative approach.

14
00:01:01,890 --> 00:01:11,190
And that's because if I go to the top year and declare these variables like I did, because in a recursive

15
00:01:11,190 --> 00:01:16,800
function, this function will be called over and over, we're going to be resetting these variables

16
00:01:16,800 --> 00:01:19,740
and lists over and over to an empty array.

17
00:01:20,220 --> 00:01:26,670
So the way we would do this in a recursive function is that we need to actually pass.

18
00:01:27,570 --> 00:01:38,100
Q and list as a parameter so that when we call it down here, instead of doing it this way, we'd have

19
00:01:38,100 --> 00:01:38,910
to say.

20
00:01:40,070 --> 00:01:44,900
That the Q will have the this dot root node.

21
00:01:45,440 --> 00:01:47,600
But remember the Q has to be an array.

22
00:01:47,600 --> 00:01:53,150
So we just wrap this in curly brackets and in JavaScript this shows that we have an array with item

23
00:01:53,150 --> 00:01:58,580
of this root, kind of like we did with breath for search the first time around.

24
00:01:58,580 --> 00:01:59,060
Right?

25
00:01:59,150 --> 00:02:05,390
The initial Q had the current node which was this dot root, our root node.

26
00:02:07,630 --> 00:02:10,360
And then the second parameter would be the list.

27
00:02:10,360 --> 00:02:14,050
Our answer, which will start off with an empty array.

28
00:02:15,060 --> 00:02:22,080
So now that we have these and that's a bit of a gotcha when it comes to recursive functions.

29
00:02:22,920 --> 00:02:28,080
We can now do something similar to what we did the first time around with our iterative approach.

30
00:02:28,940 --> 00:02:31,610
We'll say that our current node.

31
00:02:32,890 --> 00:02:39,490
Use let here let cur node equal to this dot q dot shift.

32
00:02:40,440 --> 00:02:40,920
Again.

33
00:02:40,920 --> 00:02:44,370
Same thing as we did up above over here.

34
00:02:48,400 --> 00:02:49,960
To grab the current node.

35
00:02:51,230 --> 00:02:55,100
And then we can actually just copy what we did over here.

36
00:02:55,130 --> 00:02:58,850
If current no left to push the left node.

37
00:02:58,880 --> 00:03:02,810
If current node has a right child, then push it to the queue as well.

38
00:03:02,810 --> 00:03:04,640
So I'm just going to copy this.

39
00:03:05,690 --> 00:03:08,060
And add it over here.

40
00:03:08,720 --> 00:03:12,350
Make sure the indentation is working.

41
00:03:13,800 --> 00:03:14,570
That's better.

42
00:03:15,900 --> 00:03:21,420
And finally, because this is a recursive function, we want to return the.

43
00:03:22,210 --> 00:03:23,110
Function.

44
00:03:23,920 --> 00:03:28,060
So that it goes through again and this time giving it.

45
00:03:29,220 --> 00:03:31,800
The Q and the list.

46
00:03:33,250 --> 00:03:35,440
And I know this can get a little bit confusing.

47
00:03:35,440 --> 00:03:40,750
You might have to look at it, but going through it step by step in your head, you might want to grab

48
00:03:40,750 --> 00:03:43,570
this code after this video to see how it works.

49
00:03:44,640 --> 00:03:47,340
It's not that much different from the iterative approach.

50
00:03:47,850 --> 00:03:55,020
And because this is referring to a method inside of a class, the way it works in JavaScript is we have

51
00:03:55,020 --> 00:03:59,490
to say this dot breath for a search which refers to the class.

52
00:03:59,490 --> 00:04:06,600
Use the method within this class and I notice here that we don't need this for the queue because queue

53
00:04:06,600 --> 00:04:08,190
is just a parameter.

54
00:04:08,610 --> 00:04:14,580
Now we also want to make sure that we push to the list when we're in here.

55
00:04:14,580 --> 00:04:24,750
So just like we did above, we're going to say list dot, push the current node dot value again, exactly

56
00:04:24,750 --> 00:04:27,150
like we've done above here we want to.

57
00:04:28,460 --> 00:04:30,200
Push the list.

58
00:04:31,050 --> 00:04:34,320
The Valley to the list because the list is our answer.

59
00:04:35,300 --> 00:04:39,020
Now if I click run here, I'm going to get an error.

60
00:04:39,020 --> 00:04:42,500
And this is a bit of a gotcha, a little bit JavaScript specific.

61
00:04:42,500 --> 00:04:50,360
And one of the reasons that get frustrating with JavaScript is that this this keyword only works when

62
00:04:50,360 --> 00:04:58,160
we're inside of the class, the binary search tree class outside of this, remember that we have the

63
00:04:58,160 --> 00:05:01,370
tree class that we instantiated.

64
00:05:01,370 --> 00:05:04,700
So this is tree dot root.

65
00:05:05,150 --> 00:05:06,170
And if we.

66
00:05:07,550 --> 00:05:08,390
Ron this.

67
00:05:09,410 --> 00:05:13,700
We now have our list this time done recursively.

68
00:05:15,310 --> 00:05:17,740
I'll leave this for you to play around with.

69
00:05:18,440 --> 00:05:20,620
And see which one you like better.

70
00:05:20,630 --> 00:05:24,140
But both of these now give us the same results.

71
00:05:24,170 --> 00:05:29,270
949 421 615 170.

72
00:05:30,570 --> 00:05:31,740
I'll see you in the next video.

