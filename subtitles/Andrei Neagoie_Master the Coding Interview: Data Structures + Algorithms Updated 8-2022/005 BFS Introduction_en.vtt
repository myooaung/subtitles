WEBVTT
1
00:00:01.110 --> 00:00:02.100
Welcome back.

2
00:00:02.130 --> 00:00:08.880
Let's look at the first of the two types of searching or traversing a tree or a graph.

3
00:00:09.390 --> 00:00:12.600
It's called breadth first search.

4
00:00:12.630 --> 00:00:14.670
Try saying that five times really fast.

5
00:00:15.690 --> 00:00:23.010
The way breath first search works is that you start with the root node and move left to right across

6
00:00:23.010 --> 00:00:24.060
the second level.

7
00:00:25.570 --> 00:00:28.600
Then move left to right across the third level.

8
00:00:29.350 --> 00:00:32.350
And so on and so forth.

9
00:00:33.170 --> 00:00:35.840
You just keep going from left.

10
00:00:37.270 --> 00:00:41.080
To right, left to right, level by level.

11
00:00:41.650 --> 00:00:47.110
And you keep going until you find the node you're looking for or the tree ends.

12
00:00:48.010 --> 00:00:49.570
Let's have a look at another visual.

13
00:00:51.270 --> 00:00:51.720
Breath.

14
00:00:51.720 --> 00:00:53.360
Research works like this.

15
00:00:53.370 --> 00:00:54.780
We go to the root node.

16
00:00:57.080 --> 00:01:00.990
Then the second level, the third level, and then finally the fourth level.

17
00:01:01.010 --> 00:01:05.660
And you can see here how they're numbered going one by one, one by one.

18
00:01:07.070 --> 00:01:10.820
Now we're going to code breadth for search and understand how it works.

19
00:01:10.820 --> 00:01:17.960
But I want to mention that breadth first search uses additional memory because it is necessary to track

20
00:01:17.960 --> 00:01:25.250
the child nodes of all the nodes on a given level while searching that level, this means that we need

21
00:01:25.250 --> 00:01:28.760
to track every node and its children in order.

22
00:01:28.970 --> 00:01:34.400
And we're going to talk about some of those implications when we code breadth for search and also look

23
00:01:34.400 --> 00:01:36.770
at the pros and cons compared to the other kind.

24
00:01:36.800 --> 00:01:37.940
Dapp First Search.

25
00:01:38.690 --> 00:01:41.360
But let's go to our code for a quick example.

26
00:01:42.790 --> 00:01:48.730
We have here the tree that we created in our tree data structure section.

27
00:01:48.760 --> 00:01:50.440
A binary search tree.

28
00:01:51.120 --> 00:01:54.540
That creates a tree for us that looks like this.

29
00:01:54.690 --> 00:01:56.010
Nine is the root node.

30
00:01:56.010 --> 00:02:00.270
We have four and 21, six, 15 and 170.

31
00:02:01.090 --> 00:02:03.640
If we did breath for a search.

32
00:02:04.270 --> 00:02:09.310
What would you think the order would be if we wanted to convert that into a list?

33
00:02:10.690 --> 00:02:19.120
Well, we'd first visit nine, then we'd visit the second level for then 20, and then we visited the

34
00:02:19.120 --> 00:02:21.590
third level again, going from left to right.

35
00:02:21.610 --> 00:02:27.280
We'd visit one, then six, then 15, then 170.

36
00:02:28.430 --> 00:02:33.710
And using breadth first search, we're able to create this list.

37
00:02:34.800 --> 00:02:43.110
Let's have a look at the second way of traversing a tree or a graph, and that is depth first search.

38
00:02:43.590 --> 00:02:44.340
Let's have a look.

