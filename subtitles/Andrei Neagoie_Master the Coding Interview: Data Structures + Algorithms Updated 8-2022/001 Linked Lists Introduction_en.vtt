WEBVTT
1
00:00:01.609 --> 00:00:05.600
It's time to talk about our third data structure.

2
00:00:05.840 --> 00:00:14.630
And we're going to be talking about two types of link lists in the next coming videos, singly and doubly

3
00:00:14.630 --> 00:00:15.620
linked lists.

4
00:00:16.750 --> 00:00:19.540
What problem do we encounter with a race?

5
00:00:20.380 --> 00:00:28.000
Well with static arrays, we only had a certain amount of data or memory that can be allocated next

6
00:00:28.000 --> 00:00:29.230
to each other in memory.

7
00:00:29.900 --> 00:00:37.790
But then both dynamic arrays and static arrays can increase their memory once it hits a certain limit

8
00:00:37.790 --> 00:00:40.910
and double up that memory in another location.

9
00:00:41.590 --> 00:00:49.330
But that operation every once in a while of doubling up the array in order to create more memory, had

10
00:00:49.330 --> 00:00:53.320
a performance implication and it cost us o of n.

11
00:00:54.330 --> 00:01:02.340
Additionally, arrays also had bad performance for any sort of operations like insert and delete that

12
00:01:02.340 --> 00:01:07.400
had to shift indexes over, especially when you inserted or deleted anywhere.

13
00:01:07.410 --> 00:01:09.330
That wasn't the end of the array.

14
00:01:10.490 --> 00:01:12.290
And then came hash tables.

15
00:01:12.410 --> 00:01:13.400
They were great.

16
00:01:13.430 --> 00:01:19.340
We pretty much store things wherever we wanted and memory and hash tables would just take care of it

17
00:01:19.340 --> 00:01:21.470
for us and know where to place it in memory.

18
00:01:22.220 --> 00:01:25.310
We didn't have to worry about some problems that came with the race.

19
00:01:25.430 --> 00:01:29.780
Life was good, but unfortunately they weren't really ordered.

20
00:01:30.670 --> 00:01:32.800
So how can we solve this problem?

21
00:01:33.280 --> 00:01:35.320
Link lists to the rescue.

22
00:01:35.620 --> 00:01:41.920
So does this mean we all should just be using link lists all the time and disregard arrays and hash

23
00:01:41.920 --> 00:01:45.130
tables because link lists are the best data structures?

24
00:01:45.670 --> 00:01:46.240
Nope.

25
00:01:46.600 --> 00:01:50.170
As always, there are trade offs when it comes to data structures.

26
00:01:50.290 --> 00:01:56.410
So in the next coming videos, let's learn more about them so we can get a clearer picture.

27
00:01:57.690 --> 00:02:02.550
By the way, remember this diagram that I showed you in the hash tables videos?

28
00:02:03.590 --> 00:02:10.130
And I said that when we had a collision, one way to solve it was using something like this.

29
00:02:11.550 --> 00:02:14.530
And we had no idea what this data structure was.

30
00:02:14.550 --> 00:02:21.420
Well, this John Smith to Sandra D and this little arrow pointing, that's a linked list.

31
00:02:22.130 --> 00:02:25.400
So let's get started and learn what link lists are.

