1
00:00:00,980 --> 00:00:01,940
Welcome back.

2
00:00:02,240 --> 00:00:08,930
In this section, we finalize our understanding of algorithms with dynamic programming.

3
00:00:10,000 --> 00:00:12,940
And we've completed all of this.

4
00:00:12,940 --> 00:00:21,010
And now the very last piece of the puzzle is complete dynamic programming and specifically using memorization

5
00:00:21,010 --> 00:00:29,500
to optimize our problems completes our entire diagram, our mind map of how to master the interview.

6
00:00:30,170 --> 00:00:31,400
So what do we learn?

7
00:00:32,479 --> 00:00:38,450
We learned that with dynamic programming, we can indentify these types of problems by first saying,

8
00:00:38,450 --> 00:00:47,330
Hey, is there a problem that can be divided into sub problems of smaller pieces where most likely you're

9
00:00:47,330 --> 00:00:48,650
using recursion?

10
00:00:48,890 --> 00:00:55,760
If you're using recursion, then ask yourself, are there any repetitive sub problems or tasks that

11
00:00:55,760 --> 00:00:57,770
I'm doing over and over?

12
00:00:57,830 --> 00:01:05,480
In that case, we can memorize the sub problems so we don't constantly recalculate things and use this

13
00:01:05,480 --> 00:01:11,930
idea of dynamic programming so that we get a nice raise from our boss because we just made the code

14
00:01:11,930 --> 00:01:12,860
so efficient.

15
00:01:13,310 --> 00:01:19,490
Now, memorization is a common strategy for dynamic programming problems, which are problems that I

16
00:01:19,490 --> 00:01:23,060
just described here, such as the Fibonacci problem.

17
00:01:23,420 --> 00:01:30,980
There is one other way of incorporating dynamic programming, and it's called bottom up approach, and

18
00:01:30,980 --> 00:01:32,780
we won't focus too much on it.

19
00:01:32,780 --> 00:01:35,480
But I want to show you quickly how it might look like.

20
00:01:36,660 --> 00:01:40,170
In our case, there's actually a third way to solve this problem.

21
00:01:40,590 --> 00:01:44,460
And the way to do it is, well, it's actually fairly simple.

22
00:01:44,460 --> 00:01:46,710
We can do Fibonacci Master to.

23
00:01:49,560 --> 00:02:00,180
And in this function we'll have the answer, which will be the list of our Fibonacci sequence, which

24
00:02:00,180 --> 00:02:04,500
is right up here, and we're going to pre fill it with zero and one.

25
00:02:06,190 --> 00:02:14,290
And then from there all we do is a for loop and say, let I equal to two because we're now starting

26
00:02:14,290 --> 00:02:15,490
at the second index.

27
00:02:16,060 --> 00:02:19,630
IE is less than or equal to the number and.

28
00:02:20,930 --> 00:02:22,520
And we'll increment I.

29
00:02:23,150 --> 00:02:26,010
And then finally we will say answer.

30
00:02:26,030 --> 00:02:27,080
Dot push.

31
00:02:27,380 --> 00:02:33,500
And we'll push to the next item in this stack.

32
00:02:34,050 --> 00:02:36,660
The results of the first and the second.

33
00:02:37,610 --> 00:02:41,360
So I minus two plus answer.

34
00:02:42,790 --> 00:02:43,990
I minus one.

35
00:02:44,530 --> 00:02:46,990
And then we can just return answer.

36
00:02:47,940 --> 00:02:55,290
Dot Pop, which will give us the very last item in the list according to what index we're looking for.

37
00:02:56,620 --> 00:02:59,260
So that if I run this.

38
00:03:04,920 --> 00:03:06,630
And call it dpi to.

39
00:03:12,570 --> 00:03:13,770
I should still get.

40
00:03:15,280 --> 00:03:19,520
Oh, and I have to make sure that I pass in, let's say, 100.

41
00:03:21,690 --> 00:03:22,710
If I run this.

42
00:03:23,900 --> 00:03:24,720
There you go.

43
00:03:24,740 --> 00:03:27,080
We get both of the same results.

44
00:03:27,820 --> 00:03:35,770
And this type of approach avoids recursion, some would say is not as clean, not as easy to understand,

45
00:03:35,770 --> 00:03:38,660
while others will say, no, this makes a lot more sense.

46
00:03:38,680 --> 00:03:40,570
It really depends on your preference.

47
00:03:40,690 --> 00:03:48,400
And this type of solution is called bottom up because you start from the simplest solution from the

48
00:03:48,400 --> 00:03:54,370
bottom and slowly work your way up higher and higher towards more complex problems.

49
00:03:54,490 --> 00:04:00,070
But these types of problems, although easier to see, are harder to figure out when to use.

50
00:04:00,220 --> 00:04:01,900
So I prefer the.

51
00:04:02,890 --> 00:04:07,720
The top down memorization approach of using this.

52
00:04:08,630 --> 00:04:12,230
But I just wanted to show you that there is another way of doing things.

53
00:04:13,080 --> 00:04:19,709
And in an interview, it's very rare that you're going to be asked to implement both methods, but at

54
00:04:19,709 --> 00:04:20,730
the end of it all.

55
00:04:21,910 --> 00:04:28,990
I hope you see the power of dynamic programming, the simple concept of saving ourselves a lot of trouble,

56
00:04:28,990 --> 00:04:36,400
thinking about how our programs run and how we can optimize it so that we don't do any repeated tasks.

57
00:04:37,310 --> 00:04:42,230
If you're able to notice these things, then you are a great engineer.

58
00:04:43,140 --> 00:04:44,130
I'll see you in the next one.

59
00:04:44,870 --> 00:04:45,200
Bye bye.

