WEBVTT
1
00:00:01.050 --> 00:00:02.190
Welcome back.

2
00:00:02.220 --> 00:00:06.160
We're going to talk about some advanced objects concepts.

3
00:00:06.180 --> 00:00:12.110
Now, as I said, with both arrays and functions, these are advanced concepts.

4
00:00:12.120 --> 00:00:17.310
You're probably not going to just get it 100% the first time around.

5
00:00:17.310 --> 00:00:22.920
But use these videos as a reference to come back as you progress through your career.

6
00:00:24.000 --> 00:00:28.950
Now in this video, I'm going to talk about three things that are important with objects.

7
00:00:30.000 --> 00:00:31.260
We're going to talk about.

8
00:00:32.240 --> 00:00:33.290
Reference type.

9
00:00:35.220 --> 00:00:37.740
We're going to talk about context.

10
00:00:38.460 --> 00:00:41.490
And finally, we're going to talk about instantiation.

11
00:00:44.770 --> 00:00:46.450
So let's get started with the first one.

12
00:00:46.600 --> 00:00:47.560
Reference type.

13
00:00:48.600 --> 00:00:50.640
What I mean when I say reference type.

14
00:00:50.820 --> 00:00:58.550
Well, I want you to see if you can guess what's going to happen when I do array equals array.

15
00:00:58.560 --> 00:01:00.330
What do you think the answer is going to be?

16
00:01:00.330 --> 00:01:01.050
Let's see.

17
00:01:02.690 --> 00:01:03.080
Hmm.

18
00:01:03.560 --> 00:01:04.370
Interesting.

19
00:01:05.610 --> 00:01:05.850
Okay.

20
00:01:05.850 --> 00:01:09.660
What if I do array one equals array one?

21
00:01:11.860 --> 00:01:12.640
Interesting.

22
00:01:13.650 --> 00:01:14.080
Okay.

23
00:01:14.100 --> 00:01:15.220
One more question.

24
00:01:15.240 --> 00:01:18.180
What about something like this?

25
00:01:19.510 --> 00:01:22.000
Object one equals.

26
00:01:23.610 --> 00:01:25.200
Value of ten.

27
00:01:29.010 --> 00:01:31.200
And we'll say object.

28
00:01:33.160 --> 00:01:37.180
Two equals object one.

29
00:01:38.890 --> 00:01:43.060
And we'll finally say variable object three.

30
00:01:44.450 --> 00:01:45.380
Equals.

31
00:01:46.700 --> 00:01:48.560
Value ten.

32
00:01:49.230 --> 00:01:50.640
So looking at these.

33
00:01:51.660 --> 00:01:54.600
And I'm actually going to copy it on here so you can see it as well.

34
00:01:59.070 --> 00:02:00.090
Looking at this.

35
00:02:00.090 --> 00:02:06.870
What happens if I do object one equals object two?

36
00:02:07.200 --> 00:02:08.400
What do you think will happen?

37
00:02:09.360 --> 00:02:10.050
True.

38
00:02:10.199 --> 00:02:10.650
Okay.

39
00:02:10.680 --> 00:02:11.490
That makes sense.

40
00:02:11.490 --> 00:02:14.640
I mean, object to is object one.

41
00:02:15.500 --> 00:02:17.570
But what if I do object?

42
00:02:18.320 --> 00:02:20.750
One equals.

43
00:02:21.640 --> 00:02:23.800
Object three here I get.

44
00:02:24.790 --> 00:02:25.570
False.

45
00:02:25.630 --> 00:02:27.280
But why is that?

46
00:02:27.280 --> 00:02:28.500
We have value ten.

47
00:02:28.510 --> 00:02:29.090
Value ten.

48
00:02:29.110 --> 00:02:30.820
They're both the same thing.

49
00:02:31.000 --> 00:02:31.690
Right.

50
00:02:32.350 --> 00:02:33.120
Let's check something else.

51
00:02:33.130 --> 00:02:36.970
What if I do object one value?

52
00:02:38.120 --> 00:02:39.890
Equals 15.

53
00:02:41.810 --> 00:02:42.340
Okay.

54
00:02:42.350 --> 00:02:45.500
And now I do object to value.

55
00:02:48.450 --> 00:02:49.860
It equals 15.

56
00:02:49.860 --> 00:02:53.400
But if I do object three dot value.

57
00:02:54.160 --> 00:02:55.690
I get ten?

58
00:02:57.450 --> 00:02:59.310
Well, that was confusing, right?

59
00:02:59.760 --> 00:03:02.100
Let's look at what's actually going on.

60
00:03:02.100 --> 00:03:06.630
And this is the first topic we're talking about, which is reference type.

61
00:03:06.990 --> 00:03:08.190
Let's look at a diagram.

62
00:03:10.890 --> 00:03:16.470
Objects are what's called the reference types and JavaScript.

63
00:03:16.710 --> 00:03:23.250
Up until this point, all the other JavaScript types that we've learned, including numbers null.

64
00:03:24.150 --> 00:03:25.080
We have.

65
00:03:27.390 --> 00:03:28.470
Undefined.

66
00:03:29.510 --> 00:03:32.660
Booleans strings, even symbols.

67
00:03:33.590 --> 00:03:39.350
They're all defined by the programming language.

68
00:03:39.350 --> 00:03:40.580
So JavaScript.

69
00:03:40.610 --> 00:03:45.950
The person who wrote JavaScript and to script the standard says.

70
00:03:46.130 --> 00:03:48.080
These are primitive types.

71
00:03:48.080 --> 00:03:51.440
We tell you what they are now.

72
00:03:52.040 --> 00:03:59.180
A reference type, which is a non primitive type, are not defined by the programming languages.

73
00:03:59.690 --> 00:04:05.210
What that means is that they are created by the programmer.

74
00:04:06.260 --> 00:04:08.690
So let's look over here as an example.

75
00:04:09.510 --> 00:04:12.510
When I say variable number one equals one.

76
00:04:13.140 --> 00:04:15.060
JavaScript knows what one is.

77
00:04:15.060 --> 00:04:17.430
It's a number and it's a primitive type.

78
00:04:17.430 --> 00:04:19.230
It's always the same thing.

79
00:04:19.440 --> 00:04:24.480
It's immutable every time it uses a one that's the same one that JavaScript knows about.

80
00:04:25.200 --> 00:04:27.060
When I do variable number two.

81
00:04:27.060 --> 00:04:31.380
Yeah, it's using the same number one that JavaScript knows about.

82
00:04:33.050 --> 00:04:39.440
However, when we created Object one equals value ten, an object two equals object one.

83
00:04:39.440 --> 00:04:41.840
An object three equals a value ten.

84
00:04:42.680 --> 00:04:45.490
Well, those are created by the programmer.

85
00:04:45.500 --> 00:04:46.760
There are reference types.

86
00:04:46.910 --> 00:04:50.120
So what we said was, I want.

87
00:04:50.150 --> 00:04:52.620
Object one, create a new object.

88
00:04:52.640 --> 00:04:55.370
We'll say this box over here, this filing cabinet.

89
00:04:56.360 --> 00:05:00.200
And in it put value ten into this box.

90
00:05:01.010 --> 00:05:05.930
Object to says I want you to just reference.

91
00:05:05.930 --> 00:05:07.460
And that's where the word comes from.

92
00:05:07.460 --> 00:05:14.720
Reference object one saying, hey, I want whatever's inside this box.

93
00:05:15.970 --> 00:05:22.600
When Object three gets created, it's a new object because we have the new brackets.

94
00:05:23.470 --> 00:05:27.590
And it's saying put value ten in this box.

95
00:05:27.610 --> 00:05:35.260
Essentially what we're doing is saying when we create variable object one, we're storing just a reference,

96
00:05:35.260 --> 00:05:40.420
an address to where we're storing the value ten, which is box one.

97
00:05:40.420 --> 00:05:42.940
So we're saying object one.

98
00:05:43.810 --> 00:05:49.360
I'm just letting you know that this is the address of all the contents that you want, and that's in

99
00:05:49.360 --> 00:05:50.080
box one.

100
00:05:51.060 --> 00:05:57.030
Object to is saying I want whatever is an object one and we look an object one.

101
00:05:57.030 --> 00:06:01.200
An object one just has the information of box one.

102
00:06:01.200 --> 00:06:04.020
So it references that.

103
00:06:05.030 --> 00:06:07.970
An object three creates a new object.

104
00:06:07.970 --> 00:06:14.450
So it's saying, I'm going to put my contents in box three and I'm just going to have the address of

105
00:06:14.450 --> 00:06:16.400
the box saying box three.

106
00:06:16.760 --> 00:06:17.840
That's right over here.

107
00:06:19.320 --> 00:06:21.210
So going back to our example.

108
00:06:24.060 --> 00:06:25.050
This makes sense.

109
00:06:25.050 --> 00:06:31.050
When we change object one value to 15, we change the contents of box one.

110
00:06:31.050 --> 00:06:37.670
So when we do object to value, which is referencing the same box as object one, that's 15.

111
00:06:37.680 --> 00:06:44.790
But object three value doesn't change because that's, that's interested in a completely different box.

112
00:06:44.790 --> 00:06:48.630
It's box three and going back to the first example.

113
00:06:50.790 --> 00:06:51.440
Arrays?

114
00:06:51.600 --> 00:06:58.820
Well, as I mentioned in previous videos, arrays are just objects at the end of the day.

115
00:06:58.830 --> 00:07:04.770
So when you create an array, it's the same thing, creating a box, a data structure.

116
00:07:05.220 --> 00:07:08.250
And this is creating a second data structure.

117
00:07:08.940 --> 00:07:09.560
All right.

118
00:07:09.570 --> 00:07:12.330
So that is reference type.

119
00:07:12.750 --> 00:07:14.100
A very important concept.

120
00:07:14.100 --> 00:07:16.800
But I think I think you get it right.

121
00:07:17.490 --> 00:07:18.730
Let's get to the next one.

122
00:07:18.750 --> 00:07:20.280
This gets a little trickier.

123
00:07:20.850 --> 00:07:23.220
This one's called context.

124
00:07:23.760 --> 00:07:28.710
And context gets confused a lot with scope.

125
00:07:29.950 --> 00:07:36.360
If you remember, we said that scope is created when it sees curly brackets.

126
00:07:36.370 --> 00:07:36.970
Right.

127
00:07:37.000 --> 00:07:44.980
We said that if we create a function, as soon as we create that function, there is a new scope that's

128
00:07:44.980 --> 00:07:45.670
created.

129
00:07:46.180 --> 00:07:47.260
So we can have.

130
00:07:48.530 --> 00:07:49.670
Let a.

131
00:07:51.310 --> 00:07:57.440
Equals A and that lives within this universe.

132
00:07:57.460 --> 00:08:02.050
It doesn't know anything about the root scope which is over here.

133
00:08:02.050 --> 00:08:06.580
So if I do console.log a well, it's not going to work.

134
00:08:06.760 --> 00:08:10.780
Oh, and we need to actually assign something and we need to name it.

135
00:08:10.780 --> 00:08:13.510
So let's just say B so if I do this.

136
00:08:14.350 --> 00:08:16.450
Well console.log.

137
00:08:16.480 --> 00:08:20.620
A We'll just return reference there because it doesn't exist.

138
00:08:20.620 --> 00:08:22.150
So that's scope.

139
00:08:22.180 --> 00:08:24.640
Now how is context different?

140
00:08:25.090 --> 00:08:30.940
Context tells you where we are within the object.

141
00:08:31.270 --> 00:08:32.380
Let me explain.

142
00:08:32.740 --> 00:08:38.409
If we say console.log this.

143
00:08:38.919 --> 00:08:44.890
Well, you see, I guess I'm highlighting and this is the first time we're seeing this and it's a special

144
00:08:44.890 --> 00:08:50.840
word in JavaScript, probably the most confusing word that a lot of people have trouble in.

145
00:08:50.860 --> 00:08:55.290
Even people that have been in the industry for years still have a difficult time with this.

146
00:08:55.300 --> 00:08:56.620
But let's see what it is.

147
00:08:57.400 --> 00:09:01.990
This is, as you can see, the window object.

148
00:09:03.790 --> 00:09:09.940
So just to double check if I do console.log, this equals window.

149
00:09:11.140 --> 00:09:12.850
I get true.

150
00:09:14.610 --> 00:09:18.510
And I can access this dot alert.

151
00:09:20.410 --> 00:09:21.130
Hello.

152
00:09:23.870 --> 00:09:27.230
So what this means is.

153
00:09:28.600 --> 00:09:33.580
What is the object environment that we're in right now?

154
00:09:34.210 --> 00:09:41.950
The best way to think about it is what is to the left of the dot.

155
00:09:42.190 --> 00:09:49.720
So right now I'm able to do alert because I'm inside the window object.

156
00:09:49.870 --> 00:09:53.590
So doing window or doing this is the same thing.

157
00:09:53.920 --> 00:09:54.700
Now.

158
00:09:55.530 --> 00:09:57.090
Why is that important?

159
00:09:57.120 --> 00:10:01.710
Well, when we get to instantiation, I'll show you why it is.

160
00:10:02.280 --> 00:10:05.340
But it's a very important concept that you'll see again and again.

161
00:10:05.340 --> 00:10:11.670
But remember, this just refers to what object it's inside of.

162
00:10:12.570 --> 00:10:14.670
Two more examples to demonstrate this.

163
00:10:15.210 --> 00:10:23.580
One is, if I do function A within function A will say console.log.

164
00:10:26.150 --> 00:10:26.870
This.

165
00:10:28.920 --> 00:10:30.780
So if I call a what do you think happens?

166
00:10:30.780 --> 00:10:31.350
Let's see.

167
00:10:33.460 --> 00:10:35.560
Still the window object.

168
00:10:35.560 --> 00:10:39.130
This still refers to the function.

169
00:10:39.130 --> 00:10:46.480
And if you remember, that's because I said it has to be what object we're inside of right now.

170
00:10:46.480 --> 00:10:54.820
Technically function a I can go window dot a and run the function so to the left of the dot.

171
00:10:56.100 --> 00:10:57.600
Well, that's the window.

172
00:10:58.880 --> 00:11:04.730
In order to create a new value for this, you have to do something.

173
00:11:05.580 --> 00:11:06.420
Like this.

174
00:11:10.300 --> 00:11:11.110
Object.

175
00:11:11.530 --> 00:11:12.650
A function.

176
00:11:12.670 --> 00:11:13.240
A.

177
00:11:13.330 --> 00:11:15.070
Now, if I do function.

178
00:11:19.720 --> 00:11:22.320
And within here I do console.log.

179
00:11:23.050 --> 00:11:23.950
This.

180
00:11:25.970 --> 00:11:32.690
Well, in that case, if I copy this and run object for a.

181
00:11:35.410 --> 00:11:40.300
Well, now this is the object.

182
00:11:41.540 --> 00:11:42.740
Which is object for.

183
00:11:45.650 --> 00:11:49.790
So why is that important to us?

184
00:11:49.820 --> 00:11:53.300
Well, first of all, you'll see it in other bases.

185
00:11:53.300 --> 00:11:58.510
So it's good to know, but it's really important when we do instantiation.

186
00:11:58.520 --> 00:12:04.730
Instantiation is when you make a copy of an object and reuse the code.

187
00:12:05.150 --> 00:12:11.870
Imagine you're building a big multiplayer game online and this game is going to have many, many players.

188
00:12:11.870 --> 00:12:16.820
You can have wizards, you can have trolls, warlocks, else.

189
00:12:16.940 --> 00:12:23.810
Now, if you had to create an object for every single player, that's a lot of repeated code, that's

190
00:12:23.810 --> 00:12:28.010
a lot of hassle and that's a lot of your time and it's not very efficient.

191
00:12:29.210 --> 00:12:30.020
To solve that.

192
00:12:30.020 --> 00:12:31.980
You can do something called instantiation.

193
00:12:32.000 --> 00:12:36.350
You're making instances or multiple copies of an object.

194
00:12:37.250 --> 00:12:41.510
So let me show you how we do instantiation in JavaScript.

195
00:12:42.880 --> 00:12:49.270
Again, this is going to look a little bit weird at first, just like for loops did, just like functions

196
00:12:49.270 --> 00:12:53.710
did at the beginning, but it's just the syntax and you'll get used to it.

197
00:12:54.100 --> 00:12:57.910
So let's say we have a player class.

198
00:12:59.220 --> 00:13:04.530
Now you see the new syntax already and I capitalize a class.

199
00:13:05.330 --> 00:13:09.800
Now think of a class as something that I want to make a copy of.

200
00:13:09.920 --> 00:13:17.000
If I ever want to make a copy of an object, it's a good idea to do something like this so that.

201
00:13:17.000 --> 00:13:20.360
Well, you'll see how easy it is to copy this now.

202
00:13:21.180 --> 00:13:23.640
So we do class player.

203
00:13:25.450 --> 00:13:28.750
And within here, we'll say constructor.

204
00:13:31.150 --> 00:13:34.780
And I know this looks weird, but again, it's just syntax.

205
00:13:35.380 --> 00:13:36.520
Let's give it.

206
00:13:36.520 --> 00:13:38.920
This player can have a name and a type.

207
00:13:40.700 --> 00:13:42.350
And within the constructor.

208
00:13:43.210 --> 00:13:46.360
This star name equals name.

209
00:13:47.710 --> 00:13:49.570
And this type.

210
00:13:50.620 --> 00:13:51.490
Equals.

211
00:13:52.520 --> 00:13:53.120
Type.

212
00:13:54.380 --> 00:13:55.040
Oh, boy.

213
00:13:55.790 --> 00:13:56.990
What this happened here.

214
00:13:57.020 --> 00:14:04.460
Constructor When you create a class, a player class says every time I'm making a copy of a player,

215
00:14:04.490 --> 00:14:07.640
the first thing that gets run is the constructor function.

216
00:14:07.910 --> 00:14:14.670
And this constructor function is going to create these properties on the player object.

217
00:14:14.690 --> 00:14:16.610
So a name and a type.

218
00:14:17.500 --> 00:14:21.410
And now I can create anything that I want for the player.

219
00:14:21.430 --> 00:14:26.500
Let's say we want to create a method such as introduce.

220
00:14:27.500 --> 00:14:28.430
That.

221
00:14:29.180 --> 00:14:30.860
Console DOD logs.

222
00:14:33.460 --> 00:14:34.720
With tactics.

223
00:14:36.200 --> 00:14:37.010
Hi.

224
00:14:37.400 --> 00:14:38.270
I am.

225
00:14:39.670 --> 00:14:44.470
And again, we remember this syntax template strings, this dot name.

226
00:14:45.070 --> 00:14:48.100
I'm a this dot type.

227
00:14:54.090 --> 00:15:01.800
So now I'm saying this player class, any player that I create will always be able to introduce themselves.

228
00:15:01.830 --> 00:15:05.160
And they'll also have this.

229
00:15:05.870 --> 00:15:07.700
Name and this type.

230
00:15:07.700 --> 00:15:14.720
And the reason we use this here is that when we create a player, we can access the name and type property.

231
00:15:14.750 --> 00:15:17.060
I'll show you later on how that works.

232
00:15:17.060 --> 00:15:24.500
But this is just a syntax you're going to get used to in order to access the player and make copies

233
00:15:24.500 --> 00:15:24.900
of it.

234
00:15:24.920 --> 00:15:29.120
You'll have to run a constructor, which is all the properties and methods that you want the player

235
00:15:29.120 --> 00:15:29.840
to have.

236
00:15:29.960 --> 00:15:38.630
You can also create methods that players can have, and any time you want to access a property within

237
00:15:38.630 --> 00:15:42.260
the constructor, we'll use this name.

238
00:15:42.260 --> 00:15:44.510
If I want to use introduce, I'll have to do this.

239
00:15:44.780 --> 00:15:45.530
Introduce.

240
00:15:47.070 --> 00:15:53.490
Okay, so we have a player, but when we're building our multiplayer game, we want to now copy this,

241
00:15:53.490 --> 00:15:54.530
but add on to it.

242
00:15:54.540 --> 00:15:57.540
Let's say we have what we want to create a wizard player.

243
00:15:57.570 --> 00:15:58.860
A player that's a wizard.

244
00:15:59.250 --> 00:16:02.970
In that case, we would do class wizard again.

245
00:16:02.970 --> 00:16:03.960
Capital letter.

246
00:16:04.920 --> 00:16:10.740
Extends and again is just the JavaScript keyword player.

247
00:16:13.200 --> 00:16:14.940
So what is this thing I'm saying?

248
00:16:14.940 --> 00:16:19.230
I want Wizard to extend whatever player has.

249
00:16:19.230 --> 00:16:22.290
So I want to add on top of whatever player has.

250
00:16:23.340 --> 00:16:24.810
Again because it's a class.

251
00:16:24.810 --> 00:16:26.460
We'll have to do a constructor.

252
00:16:28.160 --> 00:16:32.000
And this wizard is going to accept name and type.

253
00:16:32.480 --> 00:16:35.330
And within here, this is the tricky part.

254
00:16:35.390 --> 00:16:45.140
Any time we extend something, we need to also call the constructor function of the player.

255
00:16:45.320 --> 00:16:52.100
We have to do something called super with the properties that we want to pass to the constructor in

256
00:16:52.100 --> 00:16:54.650
this case, name and type.

257
00:16:56.510 --> 00:16:58.230
I know this is confusing.

258
00:16:58.250 --> 00:17:02.150
It's just something you have to do whenever you extend a class.

259
00:17:02.390 --> 00:17:08.150
You want to use super so that you essentially have access to these.

260
00:17:09.349 --> 00:17:09.560
Okay.

261
00:17:09.560 --> 00:17:15.859
So let's say that with the wizard, we also want to have a play function and the play function will

262
00:17:15.859 --> 00:17:17.960
just console.log.

263
00:17:18.859 --> 00:17:22.760
We I'm a this type.

264
00:17:23.579 --> 00:17:24.690
And now.

265
00:17:25.569 --> 00:17:27.069
That we have our wizard.

266
00:17:28.130 --> 00:17:29.010
What's the power?

267
00:17:29.030 --> 00:17:31.070
What's the reason that we just did this?

268
00:17:31.100 --> 00:17:37.370
Now we can do this instead of constantly creating players and then saying that they have they are wizards

269
00:17:37.370 --> 00:17:38.570
and they can play.

270
00:17:38.600 --> 00:17:41.420
Now I can say Wizard one.

271
00:17:42.810 --> 00:17:49.290
Equals new wizard and we'll call the first wizard again.

272
00:17:49.290 --> 00:17:52.080
We get name and type, so we'll say.

273
00:17:53.370 --> 00:17:54.240
Shelly.

274
00:17:55.800 --> 00:17:58.200
And she'll be a healer.

275
00:18:00.020 --> 00:18:04.880
And if I want to create a new wizard, I'll just say wizard.

276
00:18:04.880 --> 00:18:07.280
Two equals new wizard.

277
00:18:08.880 --> 00:18:14.430
Sean and he is dark magic.

278
00:18:15.530 --> 00:18:15.880
Well.

279
00:18:16.160 --> 00:18:19.070
That was a lot of new syntax.

280
00:18:19.070 --> 00:18:24.250
So let's go through it and make sure we understand everything as we've learned.

281
00:18:24.260 --> 00:18:28.370
Let's use console log to really understand what we're doing.

282
00:18:28.790 --> 00:18:34.130
I'm going to add a console log right of the top over here.

283
00:18:36.040 --> 00:18:37.480
And we'll say this.

284
00:18:37.480 --> 00:18:38.530
What is this?

285
00:18:39.770 --> 00:18:40.790
I'm going to save.

286
00:18:41.700 --> 00:18:45.450
And actually I'm going to copy this into the console.

287
00:18:46.970 --> 00:18:47.990
Let's copy it.

288
00:18:48.980 --> 00:18:50.900
And see what the console.log gives us.

289
00:18:51.320 --> 00:18:53.240
We see that we get wizard.

290
00:18:54.430 --> 00:18:56.140
All right, let's go through everything here.

291
00:18:57.380 --> 00:19:04.970
I say we have a class player, then a class wizard that extends player, and then we have two variables

292
00:19:04.970 --> 00:19:07.070
that we create Wizard one and Wizard two.

293
00:19:07.190 --> 00:19:14.000
Now the program is going to see the new keyword, and any time a sees a new keyword, it says, Oh,

294
00:19:14.000 --> 00:19:17.930
we're creating a new wizard.

295
00:19:18.320 --> 00:19:23.550
And this wizard is going to have two parameters, Shelley and healer.

296
00:19:23.570 --> 00:19:25.310
So it's going to go to.

297
00:19:26.200 --> 00:19:30.150
The Wizard class again because it has this new word.

298
00:19:30.160 --> 00:19:31.750
It goes to the Wizard class.

299
00:19:32.660 --> 00:19:33.770
And it says.

300
00:19:34.980 --> 00:19:37.660
Hey, Wizard, I want you to extend.

301
00:19:37.680 --> 00:19:43.440
Player So it's going to go to the constructor and it's going to see this super.

302
00:19:44.410 --> 00:19:55.600
And what this does is it takes us up to the constructor of the player and it runs this and now it attaches

303
00:19:55.600 --> 00:19:56.440
this.

304
00:19:57.120 --> 00:20:03.840
As the wizard, and then it introduces the new function and then adds the play function.

305
00:20:03.840 --> 00:20:07.680
Now, if I go to Wizard One.

306
00:20:08.850 --> 00:20:10.770
And I say play.

307
00:20:12.930 --> 00:20:16.290
I get we I'm a healer because Shelly's a healer.

308
00:20:16.500 --> 00:20:19.890
But I also have access to the wizard one.

309
00:20:20.580 --> 00:20:22.440
Dot introduce.

310
00:20:23.510 --> 00:20:24.050
Hi.

311
00:20:24.050 --> 00:20:24.910
I am Shelly.

312
00:20:24.920 --> 00:20:25.760
I'm a healer.

313
00:20:27.000 --> 00:20:29.070
And we also have access.

314
00:20:30.130 --> 00:20:31.300
To Wizard to.

315
00:20:32.660 --> 00:20:34.340
Oh, I have to run this again.

316
00:20:34.580 --> 00:20:35.810
Let's run this again.

317
00:20:38.790 --> 00:20:42.540
And I don't think I copied the second wizard last time.

318
00:20:42.540 --> 00:20:44.430
So now I have Wizard.

319
00:20:46.010 --> 00:20:47.330
To introduce.

320
00:20:47.330 --> 00:20:48.220
Hi, I'm Sean.

321
00:20:48.290 --> 00:20:48.710
I'm.

322
00:20:49.060 --> 00:20:50.720
I'm a dark magic.

323
00:20:50.750 --> 00:20:53.990
That sentence doesn't make sense, Sean, but that's okay for now.

324
00:20:54.760 --> 00:20:56.320
Let's just try something.

325
00:20:56.350 --> 00:20:58.360
If I do console.log.

326
00:21:01.110 --> 00:21:01.860
Here.

327
00:21:02.500 --> 00:21:03.850
And we'll just say.

328
00:21:04.890 --> 00:21:05.640
Wizard.

329
00:21:07.950 --> 00:21:11.100
And here we'll say player, just so we can distinguish between them.

330
00:21:12.490 --> 00:21:19.750
And I'm only going to copy the first wizard so that we don't get two of these running again because

331
00:21:19.750 --> 00:21:20.920
we're creating two wizards.

332
00:21:20.920 --> 00:21:22.390
We're going to have this run twice.

333
00:21:22.390 --> 00:21:25.540
But just for our sanity, we'll run.

334
00:21:25.540 --> 00:21:26.440
Shelley.

335
00:21:27.840 --> 00:21:30.120
So I'm going to refresh and add here.

336
00:21:30.720 --> 00:21:32.220
I forgot to add a comma.

337
00:21:35.110 --> 00:21:36.790
And let's refresh.

338
00:21:37.450 --> 00:21:38.710
And I get an error.

339
00:21:38.710 --> 00:21:39.560
Reference error.

340
00:21:39.580 --> 00:21:44.680
Musk calls Super Constructor and derived class before accessing this.

341
00:21:45.340 --> 00:21:53.680
What that's saying is that in order for me to access this and get this type, I have to call super,

342
00:21:53.680 --> 00:21:57.390
which runs a construction function in player.

343
00:21:57.400 --> 00:21:59.120
So that's what super is doing.

344
00:21:59.140 --> 00:22:01.930
It sounds kind of weird, but it's just something that you need.

345
00:22:02.800 --> 00:22:05.620
I'm just going to put this at the bottom after we call super.

346
00:22:05.620 --> 00:22:08.680
And now it should work.

347
00:22:08.710 --> 00:22:09.310
Let's see.

348
00:22:14.070 --> 00:22:14.880
I get.

349
00:22:16.070 --> 00:22:18.320
The first player wizard.

350
00:22:19.020 --> 00:22:20.490
So we call super.

351
00:22:21.730 --> 00:22:27.160
As soon as we say new wizard Shelley Healer, I go to the wizard extends player.

352
00:22:27.220 --> 00:22:33.670
I run the constructor function which says Super, hey, run the constructor function and the player

353
00:22:33.670 --> 00:22:38.920
and I run that and that's why we log console.log player first and then.

354
00:22:39.630 --> 00:22:43.020
We go to console.log wizard.

355
00:22:43.790 --> 00:22:47.300
And then run the rest of the class a very cool.

356
00:22:48.190 --> 00:22:55.510
Now, just to show you something, this is actually new syntax that you'll see in React, and it was

357
00:22:55.510 --> 00:22:57.070
part of ES6.

358
00:22:57.730 --> 00:23:02.260
But back in the day, this is how we used to do it.

359
00:23:02.500 --> 00:23:04.450
The exact same code I have.

360
00:23:06.420 --> 00:23:07.230
Up there.

361
00:23:11.520 --> 00:23:12.480
Is right here.

362
00:23:14.480 --> 00:23:18.290
It's called classical inheritance, and it doesn't look too too bad.

363
00:23:18.290 --> 00:23:23.780
But you see that there's a prototype, which it's another thing that you'll see in JavaScript.

364
00:23:23.780 --> 00:23:26.920
And to be honest with you, you shouldn't really use it.

365
00:23:26.930 --> 00:23:28.460
It doesn't look very nice.

366
00:23:28.520 --> 00:23:34.430
And you see that we have to attach play to both Wizard one and Wizard two and.

367
00:23:35.510 --> 00:23:39.110
It just doesn't look as nice as this.

368
00:23:39.110 --> 00:23:43.130
And once you get used to everything, it's not too bad.

369
00:23:43.730 --> 00:23:49.340
All we're saying is, as soon as we say class, we say, Hey, we're probably going to make a copy of

370
00:23:49.340 --> 00:23:50.180
this object.

371
00:23:51.080 --> 00:23:53.020
So we want to make copies of player.

372
00:23:53.030 --> 00:23:56.210
We want to make copies of Wizard, and that's called instantiation.

373
00:23:56.540 --> 00:24:05.960
When I do the new keyword, I say make an instance of wizard, and wizard uses some functionality from

374
00:24:05.960 --> 00:24:10.670
the player and adds its own little play function as well.

375
00:24:11.150 --> 00:24:14.000
Holy moly, that was a lot.

376
00:24:14.000 --> 00:24:19.700
Like I said, this is something that you'll have to come back to and you won't get it right away.

377
00:24:19.730 --> 00:24:26.060
It's really, really hard to fully understand the topic without actually having to use it in real life.

378
00:24:26.180 --> 00:24:27.410
Just keep this in mind.

379
00:24:27.410 --> 00:24:35.150
Every time you hear somebody talk about reference, type or context or even scope or instantiating something,

380
00:24:35.600 --> 00:24:38.570
well, these are the things that they're talking about.

381
00:24:38.870 --> 00:24:40.850
Objects are really, really complicated.

382
00:24:40.850 --> 00:24:42.320
They're really hard.

383
00:24:42.380 --> 00:24:45.680
But with that, it gives us a lot of power.

384
00:24:46.860 --> 00:24:47.700
So with that.

385
00:24:47.730 --> 00:24:49.170
Good luck with the exercises.

386
00:24:49.170 --> 00:24:50.310
I'll see you in the next one.

387
00:24:50.770 --> 00:24:51.390
Bye bye.

