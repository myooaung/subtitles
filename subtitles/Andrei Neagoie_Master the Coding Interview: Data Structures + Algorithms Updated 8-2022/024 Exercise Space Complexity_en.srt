1
00:00:00,300 --> 00:00:01,200
Welcome back.

2
00:00:01,350 --> 00:00:03,510
Let's talk about space complexity.

3
00:00:04,050 --> 00:00:12,060
What if I have a function that has the name of BU and all it does is it takes.

4
00:00:13,130 --> 00:00:16,219
An input and within this input.

5
00:00:17,040 --> 00:00:23,820
It's going to simply have a loop that we've seen before.

6
00:00:25,450 --> 00:00:27,280
And this loop.

7
00:00:28,240 --> 00:00:31,090
Let's make sure that I do this properly.

8
00:00:31,120 --> 00:00:34,390
Let's say that and at length.

9
00:00:35,900 --> 00:00:38,630
And we'll say I plus.

10
00:00:38,630 --> 00:00:39,170
Plus.

11
00:00:40,330 --> 00:00:47,150
And this function is a really useless function that just simply logs out console.log.

12
00:00:48,260 --> 00:00:48,820
Boo.

13
00:00:49,800 --> 00:00:50,700
Scary function.

14
00:00:51,770 --> 00:00:55,310
So now in here, if we just run the function.

15
00:00:57,590 --> 00:01:06,140
And just give it an input of, let's say one, two, three, four, five and run it.

16
00:01:06,900 --> 00:01:10,560
Well, we have been running five times.

17
00:01:12,370 --> 00:01:18,970
And we know that the space complexity of this function or time complexity of this function is own.

18
00:01:19,090 --> 00:01:22,240
But when it comes to space, complexity.

19
00:01:23,200 --> 00:01:24,340
Let's think about this.

20
00:01:24,670 --> 00:01:26,920
What is the space complexity of this?

21
00:01:27,220 --> 00:01:30,310
Now try to guess before I go into the topic.

22
00:01:35,290 --> 00:01:43,180
The one gotcha when it comes to space complexity is that when we talk about space complexity, we're

23
00:01:43,180 --> 00:01:45,600
talking about additional space.

24
00:01:45,640 --> 00:01:49,510
So we don't include space taken up by the inputs.

25
00:01:49,510 --> 00:01:54,160
So we don't really care how big the input is.

26
00:01:54,820 --> 00:02:01,180
I mean, we do care, but when it comes to this function, we don't really have a control over what

27
00:02:01,180 --> 00:02:02,790
sort of input it receives.

28
00:02:02,800 --> 00:02:06,470
We only have control of what happens inside of this function.

29
00:02:06,490 --> 00:02:11,140
So within this function, are we adding any space?

30
00:02:12,200 --> 00:02:13,690
Well, not really.

31
00:02:13,700 --> 00:02:21,830
The only thing we're really doing is we're creating this lette i equals zero variable and.

32
00:02:22,690 --> 00:02:23,470
That's it.

33
00:02:23,950 --> 00:02:27,070
Other than that, we're not really adding any more memory.

34
00:02:27,220 --> 00:02:32,800
So this function has a space complexity of oh one.

35
00:02:33,650 --> 00:02:34,670
Nice and simple.

36
00:02:35,570 --> 00:02:37,730
But what if we have a different function?

37
00:02:37,790 --> 00:02:40,490
What if we have something like this?

38
00:02:42,140 --> 00:02:46,460
This time we'll have a function that says array of.

39
00:02:47,240 --> 00:02:51,740
I'm going to give it another terrible name high and times.

40
00:02:52,490 --> 00:02:53,630
God, that's a terrible name.

41
00:02:53,630 --> 00:02:57,680
But let's say that this function takes, again, an input.

42
00:02:58,040 --> 00:03:01,060
And within here, we're going to create a new variable.

43
00:03:01,070 --> 00:03:06,830
We're going to say let high array is going to equal an empty array.

44
00:03:07,720 --> 00:03:10,650
And within here, we're going to have a loop.

45
00:03:10,660 --> 00:03:14,800
I'm just going to copy this for now so I don't have to bore you with my typing.

46
00:03:15,570 --> 00:03:22,800
And in here I'm going to simply say hi array.

47
00:03:24,550 --> 00:03:25,600
In the index.

48
00:03:25,600 --> 00:03:33,910
So as we're looping, we're going to fill it up with high and we're going to return this array high.

49
00:03:37,200 --> 00:03:37,670
Ray.

50
00:03:39,820 --> 00:03:48,040
All we're doing is we're creating a new array and for the number of items in our input, we're going

51
00:03:48,040 --> 00:03:54,160
to just fill up high array with repeatedly high, high, high, high string.

52
00:03:54,730 --> 00:04:03,550
So if I do this again and I say array of high end times and I give it, let's say we'll give it.

53
00:04:03,910 --> 00:04:07,780
And you know what, instead of lengthier, let's just leave it as a number.

54
00:04:07,780 --> 00:04:10,990
So I'm going to say n and I'll say.

55
00:04:12,260 --> 00:04:13,160
Six times.

56
00:04:14,170 --> 00:04:15,670
So if I run this code.

57
00:04:16,470 --> 00:04:23,520
We see that even though we have the boo boo boo over here from the beginning, the other function array

58
00:04:23,520 --> 00:04:33,600
of high end times returns us a new array with six items, and each item just simply says hi.

59
00:04:34,490 --> 00:04:36,920
What is the space complexity of this?

60
00:04:38,760 --> 00:04:40,200
Well, this should give you a hint.

61
00:04:40,200 --> 00:04:41,490
Remember our cheat sheet?

62
00:04:43,480 --> 00:04:47,410
Variables, data structures, function calls, allocations.

63
00:04:47,410 --> 00:04:49,330
Those things take space.

64
00:04:49,900 --> 00:04:55,240
And in our case, we created variables in our loop.

65
00:04:55,270 --> 00:04:57,070
Variable I equals zero.

66
00:04:57,340 --> 00:05:00,090
But we've also created data structures, right?

67
00:05:00,100 --> 00:05:01,930
We created a new array.

68
00:05:02,020 --> 00:05:10,660
So now if we go back, we see that in here, we've created a new array and we fill this array with an

69
00:05:10,870 --> 00:05:11,710
loops.

70
00:05:12,930 --> 00:05:18,540
And again, because of our rules when it comes to bingo, we ignore the constant time.

71
00:05:18,540 --> 00:05:30,000
Let I equal zero space and instead this becomes O of n because we're creating a new data structure and

72
00:05:30,000 --> 00:05:30,750
adding memory.

73
00:05:30,750 --> 00:05:37,170
So each item is an additional memory space on our computers and times.

74
00:05:38,510 --> 00:05:39,920
And you know what?

75
00:05:39,950 --> 00:05:43,280
That's pretty much it when it comes to space complexity.

76
00:05:43,760 --> 00:05:48,530
I think you're getting the idea and we'll get a little bit more into when we talk about recursion.

77
00:05:48,710 --> 00:05:55,520
But when it comes to space complexity, you're either adding additional memory that you need to use.

78
00:05:55,520 --> 00:06:00,470
And that's sometimes a big concern and sometimes there isn't.

79
00:06:01,130 --> 00:06:06,050
And something that comes up a lot in interviews and something that we'll talk about in the next section,

80
00:06:06,410 --> 00:06:11,060
that is sometimes there's a tradeoff between saving time and saving space.

81
00:06:11,540 --> 00:06:15,740
So you have to decide which one you're optimizing for.

82
00:06:16,130 --> 00:06:20,480
Let's get into some fun examples based on what we've just learned in the next video.

83
00:06:21,710 --> 00:06:22,430
See you on that one.

