1
00:00:00,960 --> 00:00:01,920
Welcome back.

2
00:00:02,100 --> 00:00:04,740
We've learned our sorting algorithms.

3
00:00:05,130 --> 00:00:11,610
But you might be asking yourself, Andre, I'm still kind of confused about when to use what.

4
00:00:11,640 --> 00:00:17,460
What about if I get asked in an interview a question about which sorting algorithm will be best?

5
00:00:17,460 --> 00:00:23,520
If I had a users data of 100 million names that need to be sorted.

6
00:00:24,260 --> 00:00:26,630
Well, let's go over some rules.

7
00:00:27,220 --> 00:00:28,000
One.

8
00:00:28,120 --> 00:00:30,520
When should you use insertion?

9
00:00:30,520 --> 00:00:31,120
Sort.

10
00:00:31,600 --> 00:00:32,229
Well.

11
00:00:33,010 --> 00:00:41,410
Insertion sort should be used with only a few items if your input is small or items are mostly sorted.

12
00:00:41,500 --> 00:00:43,900
It's really, really fast.

13
00:00:44,770 --> 00:00:51,850
It uses very little space, and most importantly, it's really easy to implement in code.

14
00:00:52,120 --> 00:00:56,580
So remember this only a few items and mostly sorted data.

15
00:00:56,590 --> 00:00:59,020
You should use insertion sort.

16
00:00:59,590 --> 00:01:01,090
What about bubble sort?

17
00:01:01,930 --> 00:01:04,690
To be honest, you're never going to use bubble sort.

18
00:01:05,330 --> 00:01:10,700
It's only really used for educational purposes as a way to teach sorting.

19
00:01:10,700 --> 00:01:17,510
But it's very rare that you'll find this in real life because it's just not very efficient.

20
00:01:18,270 --> 00:01:19,890
What about selection sword?

21
00:01:20,240 --> 00:01:22,950
Again, same thing with selection sort.

22
00:01:23,130 --> 00:01:28,560
As you can see, its numbers aren't very good, so most likely you won't be using it.

23
00:01:28,590 --> 00:01:32,040
Mostly it's being used as a teaching mechanism, which I did.

24
00:01:32,070 --> 00:01:32,790
Sorry.

25
00:01:32,820 --> 00:01:38,550
Didn't mean to waste your time with learning selection sword, but it is important to build the foundation.

26
00:01:39,580 --> 00:01:41,410
What about merge sort?

27
00:01:41,950 --> 00:01:43,630
And this one's my favorite.

28
00:01:44,200 --> 00:01:44,890
Why?

29
00:01:45,800 --> 00:01:49,930
Well, Mercer is really, really good because of divide and conquer.

30
00:01:49,940 --> 00:02:00,710
We have o of n log n it's fast and because best average and worst case is always o of n log n, we always

31
00:02:00,710 --> 00:02:02,780
divide up the list evenly.

32
00:02:03,110 --> 00:02:10,400
You can always guarantee that this is going to be the case, which is not the case for most other algorithms.

33
00:02:10,490 --> 00:02:14,840
So if you're worried about worst case scenarios, you should use merge sort.

34
00:02:15,170 --> 00:02:22,670
But if you want to sort in memory on your machine and you're worried about space complexity, merge

35
00:02:22,670 --> 00:02:25,940
sort is going to be really expensive to use this space.

36
00:02:25,940 --> 00:02:27,180
Complexity of o.

37
00:02:27,200 --> 00:02:27,800
Of n.

38
00:02:28,550 --> 00:02:35,930
However, if you had huge files that can be sorted in memory, so you have external sorting that you

39
00:02:35,930 --> 00:02:41,990
need, maybe like a process outside of memory, it's suitable for external sorting.

40
00:02:41,990 --> 00:02:48,800
Then merge sort is good because we won't care much as much about space complexity then.

41
00:02:49,540 --> 00:02:50,710
What about QuickSort?

42
00:02:51,610 --> 00:02:59,160
QuickSort is actually better than Mercer rate, average case and space complexity.

43
00:02:59,170 --> 00:03:04,890
I mean, it has the same speed as time as merge sort but less space complexity.

44
00:03:04,900 --> 00:03:12,700
It's probably one of the most popular sorting algorithms, but the one downside is this worst case if

45
00:03:12,700 --> 00:03:18,160
you don't pick the pivot properly, you could have a really, really slow sorting.

46
00:03:18,160 --> 00:03:19,600
So you have to be careful.

47
00:03:19,600 --> 00:03:22,450
And if you're really worried about worst case.

48
00:03:23,110 --> 00:03:26,350
Then you'd rather pick something else.

49
00:03:27,310 --> 00:03:29,800
Now you might be asking yourself.

50
00:03:29,830 --> 00:03:32,140
Andre, what about help sort?

51
00:03:32,170 --> 00:03:34,180
You haven't really talked about that.

52
00:03:34,810 --> 00:03:38,080
I'm going to leave resources for you so you can learn about help.

53
00:03:38,130 --> 00:03:38,950
Sort as well.

54
00:03:39,430 --> 00:03:42,130
It's very similar to quicksort and merge sort.

55
00:03:42,220 --> 00:03:46,270
But you see here that it has a space complexity of of one.

56
00:03:46,300 --> 00:03:49,030
Isn't this better than all of the above?

57
00:03:49,420 --> 00:03:56,470
Well, heaps can sort in place and doesn't have the worst case quadratic behavior that QuickSort has

58
00:03:56,470 --> 00:03:59,230
or the memory usage that merge sort has.

59
00:03:59,380 --> 00:04:04,420
But on average, it's actually slower than quicksort in most cases.

60
00:04:04,780 --> 00:04:08,410
It's one of those things where with heap sort.

61
00:04:08,960 --> 00:04:14,170
Unless you're really, really worried about worst case and memory, then you might use it.

62
00:04:14,170 --> 00:04:18,370
But most of the time I would say you're using quicksort or or merge sort.

63
00:04:19,910 --> 00:04:20,390
Okay.

64
00:04:20,390 --> 00:04:21,459
But you're saying.

65
00:04:21,470 --> 00:04:24,030
What about these ones down here?

66
00:04:24,050 --> 00:04:25,190
Bucket sort.

67
00:04:25,190 --> 00:04:26,750
Radical sort or radical?

68
00:04:26,750 --> 00:04:28,400
Sort and counting sort.

69
00:04:29,270 --> 00:04:30,970
How come you're not talking about these ones?

70
00:04:30,980 --> 00:04:32,170
Why can we just use these?

71
00:04:32,180 --> 00:04:36,980
They look a lot better than all the other ones, especially when it comes to time complexity.

72
00:04:37,870 --> 00:04:38,660
Good question.

73
00:04:38,680 --> 00:04:40,420
Let's talk about that in the next video.

