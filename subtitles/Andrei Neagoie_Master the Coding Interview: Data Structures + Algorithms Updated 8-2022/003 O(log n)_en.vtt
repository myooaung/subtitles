WEBVTT
1
00:00:00.770 --> 00:00:01.700
Welcome back.

2
00:00:01.790 --> 00:00:08.150
In the previous video, we talked about a special characteristic or properties of binary trees.

3
00:00:08.930 --> 00:00:14.810
And because of the way binary trees are structured, there is a certain way for us to calculate the

4
00:00:14.810 --> 00:00:16.370
number of nodes that they have.

5
00:00:16.400 --> 00:00:24.080
For example, on level zero of a binary tree, that is the very top level where we only have one root

6
00:00:24.080 --> 00:00:24.590
node.

7
00:00:24.590 --> 00:00:30.860
We can calculate how many nodes there are by doing two to the power of the level which is zero.

8
00:00:30.860 --> 00:00:34.280
So if I do two to the power of zero, it's going to equal one.

9
00:00:34.280 --> 00:00:36.050
That is, we have one node.

10
00:00:37.110 --> 00:00:40.350
If we go a level down and say, what about level one?

11
00:00:40.350 --> 00:00:41.820
How many levels do we have?

12
00:00:41.850 --> 00:00:48.060
Well, we have two to the power of one, which equals two.

13
00:00:49.410 --> 00:00:50.300
All right, let's keep going.

14
00:00:50.310 --> 00:00:51.660
What about level two?

15
00:00:51.840 --> 00:00:54.600
How many nodes in total do we have on that level?

16
00:00:54.630 --> 00:00:59.580
Well, we have two to the power of two, which is equal to four.

17
00:01:00.210 --> 00:01:02.940
And then one last level, let's say level three.

18
00:01:03.270 --> 00:01:09.810
How many nodes are we going to have in level three in a perfectly balanced binary tree?

19
00:01:09.840 --> 00:01:14.550
Well, two to the power of three is going to equal eight.

20
00:01:15.340 --> 00:01:15.940
Oh, boy.

21
00:01:16.150 --> 00:01:20.110
We just did some math here, and I promised that this course is going to be that mathy.

22
00:01:20.110 --> 00:01:22.090
But bear with me here.

23
00:01:22.090 --> 00:01:25.660
I want to explain to you what o log n means.

24
00:01:26.770 --> 00:01:31.810
Knowing what we just did now and knowing that these are the total number of notes.

25
00:01:31.810 --> 00:01:38.230
If we imagine that this data was in an array, that means that we have eight places that we need to

26
00:01:38.260 --> 00:01:43.840
iterate through eight nodes that we need to check, perhaps to search for something.

27
00:01:45.210 --> 00:01:54.210
Well, based on this formula here, that means that we can find out the number of nodes in a tree by

28
00:01:54.210 --> 00:01:54.870
doing.

29
00:01:56.140 --> 00:02:00.340
Two to the power of H or the height.

30
00:02:00.340 --> 00:02:01.870
That is the level.

31
00:02:01.900 --> 00:02:09.400
If we know how many levels R binary tree is, we can find out how many total nodes there are.

32
00:02:10.710 --> 00:02:13.920
Two to the power of H minus one.

33
00:02:15.380 --> 00:02:17.600
Now, why this minus one?

34
00:02:17.960 --> 00:02:25.790
Well, if we go back to our diagram, this binary tree, we have one, two, three, four, five, six,

35
00:02:25.790 --> 00:02:26.570
seven.

36
00:02:26.630 --> 00:02:32.960
We have seven total nodes and the tree is one, two, three.

37
00:02:33.560 --> 00:02:36.830
The height of the tree, well, it's three levels deep.

38
00:02:38.060 --> 00:02:42.650
So to to the power of three minus one is seven nodes.

39
00:02:43.560 --> 00:02:51.510
Now, if we actually simplify this, we can just simply say that the log of nodes is going to equal

40
00:02:51.510 --> 00:02:54.330
the height or the steps.

41
00:02:54.930 --> 00:03:02.250
And I use log here just in case you're wondering, log simply means that log 100 is equal to two.

42
00:03:03.070 --> 00:03:09.160
Because ten to the power of two equals 100.

43
00:03:11.180 --> 00:03:13.670
So all I did was using this.

44
00:03:13.670 --> 00:03:23.660
I simplified and said that log nodes is equal to the height and we've dropped negative one here because

45
00:03:23.660 --> 00:03:25.250
it's insignificant.

46
00:03:25.760 --> 00:03:31.040
But log notes is the number of steps or height.

47
00:03:31.040 --> 00:03:34.760
And let's change this to steps that we would use in a tree.

48
00:03:35.810 --> 00:03:37.760
Let me show you again in our diagram.

49
00:03:39.530 --> 00:03:46.520
Log n simply means that based on the height, the maximum number of decisions.

50
00:03:46.670 --> 00:03:52.940
Let's say we're looking for a specific node that we're going to take is going to be log n.

51
00:03:52.970 --> 00:03:55.750
That means, is this the node we're looking for?

52
00:03:55.760 --> 00:03:56.300
Nope.

53
00:03:56.300 --> 00:03:58.370
Then we either go left or right.

54
00:03:58.370 --> 00:04:02.420
And let's say we go left and say, Is this the node that we're looking for?

55
00:04:02.630 --> 00:04:04.820
And that's our second step.

56
00:04:05.330 --> 00:04:10.830
If the answer is no, then we either go left or right and we say, Is this the node we're looking for?

57
00:04:10.850 --> 00:04:11.590
Yep.

58
00:04:11.600 --> 00:04:19.130
So we have maximum three steps here instead of if you went one, two, three, four, five, six, seven

59
00:04:19.130 --> 00:04:23.150
steps, you see that there's some sort of efficiency here.

60
00:04:23.540 --> 00:04:29.090
And coming up, we're going to learn about binary search trees, where we're able to minimize those

61
00:04:29.090 --> 00:04:32.630
steps instead of visiting every single node.

62
00:04:33.050 --> 00:04:37.850
So when you see the notation of O log n.

63
00:04:38.690 --> 00:04:39.770
Don't get startled.

64
00:04:40.480 --> 00:04:46.870
All that's saying is that the choice of the next element on which to perform some sort of action is

65
00:04:46.870 --> 00:04:51.860
one of several possibilities, and only one needs to be chosen.

66
00:04:51.880 --> 00:04:54.550
We don't have to check both.

67
00:04:54.820 --> 00:05:00.010
And a good way to think about log n is when you're looking through a phone.

68
00:05:00.850 --> 00:05:04.750
You don't actually check every single person in a phonebook, do you?

69
00:05:05.290 --> 00:05:13.240
Instead, you can simply do what's called divide and conquer by looking based on where their names alphabetically

70
00:05:13.240 --> 00:05:14.080
begin.

71
00:05:14.200 --> 00:05:19.870
You would open up the book to where you think the letter will start with the name we'll start with,

72
00:05:20.200 --> 00:05:24.160
and then keep dividing and conquering until you get to that person.

73
00:05:25.140 --> 00:05:32.010
You only need to explore a subset of each section before you eventually find someone's phone number.

74
00:05:32.970 --> 00:05:35.310
So just think of that old log.

75
00:05:35.310 --> 00:05:38.370
N is just like looking through a phonebook.

76
00:05:39.520 --> 00:05:45.880
And the reason that I just talked about o log n in such detail is because it's an important concept.

77
00:05:45.880 --> 00:05:49.350
It's really, really fast, as you can see here.

78
00:05:49.360 --> 00:05:58.540
O log n is this like green good area that's even better than o of n linear time because we don't need

79
00:05:58.540 --> 00:06:00.580
to check every single element.

80
00:06:00.880 --> 00:06:05.590
And in the next video, we're going to talk about the most common tree that you're going to see in a

81
00:06:05.590 --> 00:06:08.830
lot of places called binary search tree.

82
00:06:09.700 --> 00:06:14.050
And as the name suggests, it allows us to search really efficiently.

83
00:06:14.440 --> 00:06:21.670
And just by looking at this graph, you might be able to think about how a place like Google and Google

84
00:06:21.670 --> 00:06:25.660
Search might find this extremely useful, right?

85
00:06:25.660 --> 00:06:32.890
When we search through Google, they have a ton of websites, a ton of nodes to search through.

86
00:06:32.920 --> 00:06:38.530
How are they able to give us an answer to our searches so fast?

87
00:06:38.650 --> 00:06:42.370
If they used o of n time complexity?

88
00:06:42.370 --> 00:06:46.210
It's going to take a lot of time and it's going to be really expensive for them.

89
00:06:46.750 --> 00:06:54.250
So instead they use a tree structure or a tree data structure so that our searches can be a lot faster

90
00:06:54.250 --> 00:06:56.500
with something like o log n.

91
00:06:57.270 --> 00:06:58.440
I'll see in the next video.

92
00:06:59.280 --> 00:06:59.820
Bye bye.

