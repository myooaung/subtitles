1
00:00:00,910 --> 00:00:01,839
Welcome back.

2
00:00:02,050 --> 00:00:09,550
Cues are our next data structure and the best way to think about them is like an entrance to a roller

3
00:00:09,550 --> 00:00:10,180
coaster.

4
00:00:10,890 --> 00:00:16,440
The first person that arrives in line gets to go first on the roller coaster, and then the second person

5
00:00:16,440 --> 00:00:18,960
gets to go, and then the third person gets to go.

6
00:00:18,990 --> 00:00:23,760
Then the fourth, the fifth, and the sixth finally gets to go.

7
00:00:24,060 --> 00:00:33,990
So it's the opposite of Stack's in that we access first in, first out, the first item in the queue

8
00:00:34,020 --> 00:00:35,990
gets access first.

9
00:00:36,000 --> 00:00:38,760
That is first out, we call that FIFO.

10
00:00:39,540 --> 00:00:45,540
And cues are used again a lot in programming problems and interview questions.

11
00:00:45,540 --> 00:00:53,870
For example, if you had any sort of waitlist app to perhaps buy tickets for a concert that uses cues,

12
00:00:53,880 --> 00:01:01,710
what about a restaurant app where you check into the restaurant to see if you can get a table that uses

13
00:01:01,710 --> 00:01:02,280
cues?

14
00:01:02,520 --> 00:01:08,190
What about Uber or Lyft when you want to grab a ride?

15
00:01:08,520 --> 00:01:14,280
Well, the person that requested the ride first will get priority and then you'll get second.

16
00:01:14,370 --> 00:01:18,890
And then finally, the most common example of cues is a printer, right?

17
00:01:18,900 --> 00:01:24,240
If you had a printer at home and you had three people on three different computers at your home, let's

18
00:01:24,240 --> 00:01:29,670
say your family members and you press print and each person prints different items.

19
00:01:29,760 --> 00:01:37,050
The person that clicks print first should have their first printout and same for the second person that

20
00:01:37,050 --> 00:01:37,590
goes next.

21
00:01:37,590 --> 00:01:38,850
And then the third person.

22
00:01:39,390 --> 00:01:45,480
Now on the right here, I have a couple of words that are different than push and pop.

23
00:01:45,480 --> 00:01:47,850
And I'm using a bit of standard here.

24
00:01:47,850 --> 00:01:52,560
You can use Push for Anki, which means add to the queue.

25
00:01:52,560 --> 00:01:59,730
That is, add a person in line, which is a one and DX, which you can think of as pop, which is remove

26
00:01:59,730 --> 00:02:02,060
person from line.

27
00:02:02,070 --> 00:02:08,729
However dx q unlike pop doesn't take the last person in line takes the first person.

28
00:02:08,880 --> 00:02:11,850
So that's where stacks and queues differ.

29
00:02:11,850 --> 00:02:16,320
And we have these names to make sure that we understand the differences.

30
00:02:16,320 --> 00:02:23,130
But we have peak, which once again tells us what's the first item that's going to come out that is

31
00:02:23,130 --> 00:02:25,680
the first person in the list versus a queue.

32
00:02:25,680 --> 00:02:30,390
That is the last plate, which was the last in, first out.

33
00:02:30,870 --> 00:02:33,120
And once again, look up in a queue.

34
00:02:33,150 --> 00:02:38,220
You usually don't do because you're only interested in queuing and queuing.

35
00:02:39,040 --> 00:02:42,220
You can see here that our big old notation is quite fast.

36
00:02:42,800 --> 00:02:44,990
We're actually going to demonstrate this in code.

37
00:02:44,990 --> 00:02:47,930
But I want you to try and answer this question.

38
00:02:48,260 --> 00:02:54,290
Why would you not want to use an array to build a queue?

39
00:02:54,530 --> 00:02:56,840
Pause the video if you want to think about it.

40
00:02:57,660 --> 00:03:01,260
Well, the answer is that it's very inefficient.

41
00:03:02,010 --> 00:03:05,500
Because we're removing the first item from the list.

42
00:03:05,520 --> 00:03:12,540
If you remember a raise, if you on shift something, you remove the first item, you're going to have

43
00:03:12,540 --> 00:03:14,250
to shift all those indexes.

44
00:03:14,250 --> 00:03:20,430
So creating a queue from arrays, although you can do it, is really, really bad.

45
00:03:21,160 --> 00:03:24,580
And that's something we'll talk a little bit more about when we actually code it.

46
00:03:25,350 --> 00:03:25,920
Okay.

47
00:03:26,040 --> 00:03:27,570
That's enough for Q's.

48
00:03:27,930 --> 00:03:29,850
Let's go on to our first exercise.

