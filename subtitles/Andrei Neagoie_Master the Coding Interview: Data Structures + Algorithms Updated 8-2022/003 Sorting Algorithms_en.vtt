WEBVTT
1
00:00:00.460 --> 00:00:01.330
Welcome back.

2
00:00:02.040 --> 00:00:09.660
You see in our mind map here that we're now in the sorting section and this big o of n log n something

3
00:00:09.660 --> 00:00:12.570
we haven't talked about is showing up.

4
00:00:12.810 --> 00:00:15.270
We'll get to that in this section.

5
00:00:15.840 --> 00:00:17.670
But I want to add a quick note here.

6
00:00:17.700 --> 00:00:22.000
Looking at all these sorting algorithms and there's a lot more.

7
00:00:22.020 --> 00:00:29.160
It's important to note that you don't need to write a sorting algorithm from scratch, most likely ever

8
00:00:29.160 --> 00:00:30.030
in your career.

9
00:00:30.420 --> 00:00:32.880
Frameworks usually do that for us.

10
00:00:33.600 --> 00:00:39.180
But you do, however, need to know how they work because while one, you're most likely going to get

11
00:00:39.180 --> 00:00:44.250
asked in an interview, and two, because it makes you a better engineer.

12
00:00:44.370 --> 00:00:47.430
But this section is also about being efficient.

13
00:00:47.460 --> 00:00:53.010
You see, you can spend a lot of time on each one of these sections implementing your own and talking

14
00:00:53.010 --> 00:00:54.570
about it deeply.

15
00:00:54.750 --> 00:01:01.180
Because I don't think I've ever heard of anybody actually having to implement ENCODE manually.

16
00:01:01.200 --> 00:01:06.600
These sorting algorithms, most of the time you can just talk about it or the interviewer tells you

17
00:01:06.600 --> 00:01:10.520
that the array is sorted and you need to know what to do with it.

18
00:01:10.530 --> 00:01:14.160
But implementing it from scratch, that doesn't really happen.

19
00:01:14.160 --> 00:01:19.110
But I've included it in this section because it's good to know how they work.

20
00:01:19.880 --> 00:01:21.140
And I'm not going to lie.

21
00:01:21.170 --> 00:01:25.280
Coding sorting algorithms is not my favorite either.

22
00:01:25.310 --> 00:01:26.870
Don't let that deter you.

23
00:01:27.710 --> 00:01:34.460
I encourage you to watch the next couple of videos and even practice coding your own sorting algorithms

24
00:01:34.460 --> 00:01:36.560
because it will help your learning.

25
00:01:36.740 --> 00:01:42.260
But the main thing that we're going to get from this section is not how to implement these.

26
00:01:42.260 --> 00:01:46.430
I mean, we will do that, but the key is the trade off.

27
00:01:46.700 --> 00:01:50.750
You see, we have the big cheat here, here that we definitely know about.

28
00:01:50.750 --> 00:01:51.270
Right.

29
00:01:51.290 --> 00:01:54.320
We talked about data structures and how there's trade offs.

30
00:01:54.890 --> 00:01:59.480
Well, when it comes to sorting, there's trade offs as well.

31
00:02:00.160 --> 00:02:06.040
You see how there are some time complexity trade offs, space complexity trade offs, and it's important

32
00:02:06.040 --> 00:02:09.580
to know when to use what algorithm.

33
00:02:09.759 --> 00:02:11.740
That's our goal of this section.

34
00:02:11.920 --> 00:02:18.820
And before we get into our first sorting algorithm, I want to show you this nifty little tool that

35
00:02:18.820 --> 00:02:19.960
I'm going to link to.

36
00:02:19.990 --> 00:02:22.600
We have a few sorting algorithms.

37
00:02:22.600 --> 00:02:28.780
We have insertion, sort, selection, sword, bubble, sort, shell, merge heap, and then two different

38
00:02:28.780 --> 00:02:30.490
variations of quicksort.

39
00:02:31.750 --> 00:02:34.630
And we also have different data sets.

40
00:02:35.050 --> 00:02:37.090
This is a random data set.

41
00:02:37.090 --> 00:02:39.640
See how they perform when I click here.

42
00:02:40.510 --> 00:02:42.670
Based on different sorting algorithm.

43
00:02:43.770 --> 00:02:46.110
See that they're all working and.

44
00:02:47.410 --> 00:02:50.000
All of them finish at different times.

45
00:02:50.020 --> 00:02:53.080
One is a lot slower than the other.

46
00:02:53.800 --> 00:02:55.570
What about nearly sorted?

47
00:02:56.540 --> 00:03:02.210
Again, one such as insertion sort is really, really fast, while others are slower.

48
00:03:03.440 --> 00:03:10.610
Reversed if the items are reversed and we need to sort a completely reversed list, again, different

49
00:03:10.610 --> 00:03:11.630
algorithms.

50
00:03:12.740 --> 00:03:14.320
Perform differently.

51
00:03:14.330 --> 00:03:18.670
It's never one that wins out over the other, depending on the inputs.

52
00:03:18.680 --> 00:03:20.930
What we need to do there.

53
00:03:22.290 --> 00:03:23.760
Different abilities.

54
00:03:25.520 --> 00:03:31.220
Let's start to learn about these different types of sorting algorithms so that by the end of these videos,

55
00:03:31.220 --> 00:03:34.460
we can make the right decision when to use what.

56
00:03:34.880 --> 00:03:35.900
I'll see you in the next one.

