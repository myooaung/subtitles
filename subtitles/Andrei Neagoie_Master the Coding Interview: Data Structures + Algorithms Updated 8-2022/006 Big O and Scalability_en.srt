1
00:00:01,400 --> 00:00:02,210
Welcome back.

2
00:00:02,540 --> 00:00:07,640
Let's continue our discussion of what this scalable idea means.

3
00:00:07,820 --> 00:00:11,990
You remember that we talked about the kitchen and how similar to a kitchen.

4
00:00:11,990 --> 00:00:16,880
We have to give instructions to our machines to produce a result.

5
00:00:16,940 --> 00:00:20,390
And in the previous video, we talked about this function, Finding Nemo.

6
00:00:20,420 --> 00:00:23,930
Let's measure the performance of this function.

7
00:00:25,120 --> 00:00:33,940
Well, JavaScript gives us a nifty little tool that comes built in to the browser, which is where we're

8
00:00:33,940 --> 00:00:34,930
running this code.

9
00:00:34,930 --> 00:00:39,580
So depending on your language, you might not have this option, but you will have different ways of

10
00:00:39,580 --> 00:00:40,420
measuring this.

11
00:00:40,780 --> 00:00:42,100
Don't get too hung up on this.

12
00:00:42,130 --> 00:00:46,750
We want to use this as an example to measure how long it takes for this function to run.

13
00:00:47,350 --> 00:00:53,320
We can do this in JavaScript by saying, let's say time zero is going to equal.

14
00:00:55,160 --> 00:00:58,700
Performance that comes built in to the browser.

15
00:00:59,120 --> 00:01:00,740
And we just say now.

16
00:01:02,370 --> 00:01:08,580
And this two zero is going to start this timer before the loop happens.

17
00:01:09,590 --> 00:01:16,910
And then when the loop ends, I'm going to have another timer called PT one and this is going to equal

18
00:01:17,000 --> 00:01:19,580
performance dot now.

19
00:01:20,150 --> 00:01:25,400
So we have two timers, one at the beginning, one at the end after the function goes through the loop

20
00:01:25,400 --> 00:01:34,310
to find Nemo and then at the end we'll just do a fun little console dialog and we'll say that the call

21
00:01:34,310 --> 00:01:37,790
to Find Nemo took.

22
00:01:39,410 --> 00:01:41,240
And we can just do a simple.

23
00:01:42,860 --> 00:01:45,380
RT one minus RT zero.

24
00:01:45,800 --> 00:01:53,360
And then we'll say milliseconds because it's going to give us the results and milliseconds.

25
00:01:55,560 --> 00:01:56,670
Let's see if this works.

26
00:01:56,700 --> 00:01:58,110
I'm going to run this code.

27
00:02:00,350 --> 00:02:02,300
And let me add a space in here.

28
00:02:02,300 --> 00:02:07,020
And we see that it took zero milliseconds for this code to run.

29
00:02:07,040 --> 00:02:08,240
Let me run that again.

30
00:02:08,870 --> 00:02:12,290
0 seconds again, 0 seconds, 0 seconds.

31
00:02:12,620 --> 00:02:17,120
And if I keep clicking it, I see that, oh, now it takes a little bit longer.

32
00:02:17,210 --> 00:02:19,910
And that's because this is really fast, right?

33
00:02:20,090 --> 00:02:23,780
Our computers, machines are extremely fast in this day and age.

34
00:02:23,780 --> 00:02:30,260
And because we're only looping through this once, well, it takes almost zero milliseconds.

35
00:02:30,260 --> 00:02:32,930
And the display just rounds this down.

36
00:02:33,880 --> 00:02:36,670
But what if we had a bigger array?

37
00:02:37,090 --> 00:02:43,390
Let's say that we have an array over here that has cost everyone and it has all the characters, or

38
00:02:43,390 --> 00:02:48,430
at least a lot of the characters from the movie Finding Nemo, which if you haven't watched it, amazing

39
00:02:48,430 --> 00:02:49,750
movie, highly recommend it.

40
00:02:50,200 --> 00:02:54,370
Anyway, we see that we have a lot more characters now.

41
00:02:54,520 --> 00:02:59,260
So instead of just having a single array, let's have the array.

42
00:02:59,260 --> 00:03:00,700
Everyone in here.

43
00:03:02,390 --> 00:03:05,770
And this array now has a lot more items.

44
00:03:05,780 --> 00:03:09,710
It has one, two, three, four, five, six, seven, eight, nine, ten.

45
00:03:09,710 --> 00:03:12,230
That's ten loops in here that we're going to do.

46
00:03:13,190 --> 00:03:14,360
If we run this.

47
00:03:15,490 --> 00:03:15,800
Hmm.

48
00:03:15,820 --> 00:03:18,610
We see that the time is still the same.

49
00:03:19,210 --> 00:03:22,920
Pretty much zero milliseconds, sometimes a little bit more.

50
00:03:22,930 --> 00:03:25,180
And the time changes all the time.

51
00:03:26,110 --> 00:03:29,380
But we don't see that much of a difference, do we?

52
00:03:29,410 --> 00:03:35,760
I mean, we went from one loop to now ten loops, but it's still super, super fast.

53
00:03:35,770 --> 00:03:39,760
And again, that's because our computers in this day and age are quite fast.

54
00:03:39,910 --> 00:03:44,620
The difference between one loop and ten loops is not that big.

55
00:03:45,470 --> 00:03:47,810
But let's do a little fun trick here.

56
00:03:48,230 --> 00:03:51,700
In JavaScript we can create a large array.

57
00:03:51,710 --> 00:04:01,400
Let's just call it large, and we can create a massive array by just saying new array and we'll give

58
00:04:01,400 --> 00:04:09,350
it 100 items and this 100 items in the array we can fill it with, let's say Nemo.

59
00:04:10,810 --> 00:04:15,700
And this is just going to create an array that has Nemo 100 times.

60
00:04:19,100 --> 00:04:24,920
So instead of everyone, let's do a large and hit run.

61
00:04:26,990 --> 00:04:27,440
All right.

62
00:04:27,440 --> 00:04:33,460
We see here that it's Found Nemo 100 times because, well, we just filled it with Nemo.

63
00:04:33,470 --> 00:04:37,700
And at the bottom, we see that it took 2.5 milliseconds.

64
00:04:37,700 --> 00:04:38,720
That took a lot longer.

65
00:04:38,720 --> 00:04:39,260
Didn't.

66
00:04:40,170 --> 00:04:41,640
Let's do even bigger.

67
00:04:41,640 --> 00:04:42,720
Let's do 1000.

68
00:04:43,690 --> 00:04:44,410
Hit run.

69
00:04:45,220 --> 00:04:47,560
It took seven milliseconds now.

70
00:04:47,590 --> 00:04:49,540
What if we do even bigger?

71
00:04:49,570 --> 00:04:52,150
What if we had a massive array of 10,000?

72
00:04:52,270 --> 00:04:57,200
If we had run 46 milliseconds, it's still pretty fast.

73
00:04:57,220 --> 00:04:58,420
And then, just for fun.

74
00:04:58,420 --> 00:04:59,110
One more.

75
00:04:59,140 --> 00:05:00,250
If I had run.

76
00:05:02,150 --> 00:05:04,220
You saw that delay and how long that took?

77
00:05:04,220 --> 00:05:09,560
That took 343 milliseconds or 3.4 seconds.

78
00:05:10,330 --> 00:05:13,810
Now, what do we just see here?

79
00:05:14,050 --> 00:05:23,860
Well, we see that as our input grew, our function Find Nemo became slower and slower and slower.

80
00:05:24,160 --> 00:05:29,500
Our runtime, how long it takes to run a certain problem through a function, increased.

81
00:05:30,310 --> 00:05:32,590
But here's the problem here.

82
00:05:32,620 --> 00:05:39,940
If you take this code and run it on your computer, well, your time is going to be different than mine.

83
00:05:40,390 --> 00:05:43,960
And I'll leave this code at the end of this video so you can play around with it.

84
00:05:44,050 --> 00:05:49,690
You're going to get frustrated because every time you run, this code is going to be different than

85
00:05:49,690 --> 00:05:50,500
my number.

86
00:05:51,070 --> 00:05:53,620
It might be a lot faster or a lot slower.

87
00:05:53,770 --> 00:06:00,700
You see, this all depends on how powerful the CPU in the computer is and what other programs are running

88
00:06:00,700 --> 00:06:05,920
on your computer, what programming languages you're using, and many other factors.

89
00:06:06,430 --> 00:06:10,390
So there's all these factors that play here in our runtime.

90
00:06:11,210 --> 00:06:15,120
Therefore, if I speak to my friend across the world, let's call them Johnny.

91
00:06:15,140 --> 00:06:18,770
And if I tell them, Hey, Johnny, my code is so amazing.

92
00:06:19,130 --> 00:06:27,260
I've created this fine Nemo function and it runs in 3 seconds, 3.2 seconds with 100,000 inputs.

93
00:06:27,650 --> 00:06:29,240
How good of a coder am I?

94
00:06:29,600 --> 00:06:32,420
And then Johnny says, Ha, that's really awesome.

95
00:06:32,420 --> 00:06:33,500
But you know what?

96
00:06:33,530 --> 00:06:34,860
Mine runs a lot faster.

97
00:06:34,860 --> 00:06:37,910
It runs in 1.5 seconds, so I win haha.

98
00:06:38,030 --> 00:06:39,050
What do you think?

99
00:06:39,110 --> 00:06:40,580
Do you think Johnny wins?

100
00:06:41,280 --> 00:06:44,520
Does Johnny have better code than I do?

101
00:06:45,420 --> 00:06:46,950
Well, here's the thing.

102
00:06:47,430 --> 00:06:48,630
Not necessarily.

103
00:06:49,250 --> 00:06:51,350
This doesn't really mean much.

104
00:06:52,010 --> 00:06:54,750
Because it matters what type of computer Johnny has.

105
00:06:54,770 --> 00:06:56,290
What other factors.

106
00:06:56,300 --> 00:06:59,000
As I mentioned before, the code is running it.

107
00:07:00,310 --> 00:07:02,350
So how can we determine who wins?

108
00:07:02,380 --> 00:07:04,160
Do I win or does Johnny win?

109
00:07:04,180 --> 00:07:05,350
Who has better coat?

110
00:07:06,100 --> 00:07:09,070
And this is very common in the computing world.

111
00:07:09,430 --> 00:07:15,550
We code on our laptops, our computers, but that code doesn't necessarily run on those devices.

112
00:07:16,120 --> 00:07:22,690
If we have something like a server, we may have that code run somewhere else on a different computer

113
00:07:22,690 --> 00:07:23,620
around the world.

114
00:07:23,950 --> 00:07:32,320
So how can we make sure that there is a way for us to measure in terms of efficiency, what is good

115
00:07:32,320 --> 00:07:40,780
code and what is that code and what is code that can scale that as the number of arrays or inputs increases,

116
00:07:41,110 --> 00:07:44,350
it doesn't constantly slow down more and more.

117
00:07:44,890 --> 00:07:51,220
Big notation is the language we use for talking about how long an algorithm takes to run.

118
00:07:51,790 --> 00:07:59,680
We can compare it to different algorithms or in this case, functions using big O and say which one

119
00:07:59,680 --> 00:08:02,300
is better than the other when it comes to scale.

120
00:08:02,320 --> 00:08:04,720
Regardless of our computer differences.

121
00:08:05,200 --> 00:08:07,840
And we can measure a big go like this.

122
00:08:09,650 --> 00:08:14,930
I'm going to warn you that this will look really confusing at first, and this is the first time we're

123
00:08:14,930 --> 00:08:16,040
seeing this diagram.

124
00:08:16,550 --> 00:08:21,740
And don't worry, by the end of this section, this is going to make sense and you're going to be completely

125
00:08:21,740 --> 00:08:22,550
fluent in this.

126
00:08:22,550 --> 00:08:24,240
So just trust me in this.

127
00:08:24,260 --> 00:08:25,520
Keep following these videos.

128
00:08:25,520 --> 00:08:30,680
I know I'm kind of circling around the topic and not being direct as to what it means.

129
00:08:30,680 --> 00:08:35,360
But I promise you, by the end of this, this is all going to make sense and you're going to be a big

130
00:08:35,570 --> 00:08:36,200
ninja.

131
00:08:37,240 --> 00:08:44,470
When we talk about Big O and scalability of code, we simply mean when we grow bigger and bigger with

132
00:08:44,470 --> 00:08:45,310
our input.

133
00:08:45,340 --> 00:08:48,430
How much does the algorithm or function?

134
00:08:48,430 --> 00:08:49,450
Slow down.

135
00:08:50,320 --> 00:08:53,860
If the list of characters, let's say, elements here.

136
00:08:53,860 --> 00:08:55,150
So that is Nemo.

137
00:08:55,150 --> 00:09:01,240
So characters in Finding Nemo in our array as that increases.

138
00:09:02,320 --> 00:09:05,710
How many more operations do we have to do?

139
00:09:05,740 --> 00:09:07,150
That's all it is.

140
00:09:07,860 --> 00:09:10,830
This is what we call algorithmic efficiency.

141
00:09:11,800 --> 00:09:14,890
Big O allows us to explain this concept.

142
00:09:15,340 --> 00:09:21,590
Remember how in our function we initially had an array of just one, which was Nemo?

143
00:09:21,610 --> 00:09:26,110
So that is the number of elements, number of inputs in a function.

144
00:09:26,230 --> 00:09:27,250
It was right here.

145
00:09:27,250 --> 00:09:33,580
But then as we increase that array to have more characters and then we created that massive array of

146
00:09:33,580 --> 00:09:34,710
100,000.

147
00:09:34,720 --> 00:09:41,710
So as that increases, you saw that the number of operations or the number of things we do in the loop

148
00:09:41,830 --> 00:09:43,810
increased over and over.

149
00:09:44,600 --> 00:09:48,860
And different functions have different bigo complexities.

150
00:09:48,860 --> 00:09:55,490
That is, these number of operations can increase really, really fast like this one, which is not

151
00:09:55,490 --> 00:09:55,770
good.

152
00:09:55,800 --> 00:10:02,030
You can see here that it's horrible and things that are quite good actually, and don't increase as

153
00:10:02,030 --> 00:10:02,570
much.

154
00:10:02,630 --> 00:10:07,340
And we're going to look at examples of different ones and how to actually measure this and what this

155
00:10:07,340 --> 00:10:09,020
entire notation means.

156
00:10:09,680 --> 00:10:15,290
But to end this video so we can dive deeper into the topic.

157
00:10:15,880 --> 00:10:23,050
Just remember at this point, when we talk about big O and scalability of code, we simply mean when

158
00:10:23,050 --> 00:10:29,050
we grow bigger and bigger with our input, how much does the algorithm slow down?

159
00:10:29,230 --> 00:10:35,590
The less it slows down or the slower it slows down, the better it is.

160
00:10:36,640 --> 00:10:45,670
So instead of using performance now and using time to measure the efficiency of our function, we can

161
00:10:45,670 --> 00:10:52,660
just calculate how many operations a computer has to perform because each operation takes time on a

162
00:10:52,660 --> 00:10:53,320
computer.

163
00:10:53,710 --> 00:11:01,180
So big O allows us and concerns us with how many steps it takes in a function.

164
00:11:01,910 --> 00:11:02,450
All right.

165
00:11:02,450 --> 00:11:05,510
Let's dig in deeper and deeper into this topic.

166
00:11:05,660 --> 00:11:06,890
I'll see you in the next video.

167
00:11:07,010 --> 00:11:07,640
Bye bye.

