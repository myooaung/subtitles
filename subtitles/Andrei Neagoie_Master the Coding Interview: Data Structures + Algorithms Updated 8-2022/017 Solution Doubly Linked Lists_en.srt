1
00:00:01,130 --> 00:00:02,060
Welcome back.

2
00:00:02,150 --> 00:00:12,260
We have our original length list and we just found out that our link list is actually a singly linked

3
00:00:12,260 --> 00:00:18,110
list, but we want to convert this now into a doubly linked list.

4
00:00:18,910 --> 00:00:23,590
So that we add that extra feature of an extra pointer.

5
00:00:25,360 --> 00:00:27,430
How will we go about doing that?

6
00:00:27,910 --> 00:00:29,500
Well, let's go line by line.

7
00:00:29,650 --> 00:00:33,190
And luckily for us, it's not that difficult.

8
00:00:34,720 --> 00:00:35,860
As you can imagine.

9
00:00:36,610 --> 00:00:42,310
If we go line by line and go into the constructor, the one extra piece of information that we need

10
00:00:42,310 --> 00:00:50,080
to add now is that we also have a previous pointer now, and this previous pointer will be null to begin

11
00:00:50,080 --> 00:00:50,440
with.

12
00:00:50,440 --> 00:00:55,990
So the head is going to point to null and everything else stays the same.

13
00:00:56,750 --> 00:00:59,360
But what happens when we append something?

14
00:01:00,150 --> 00:01:07,950
Well, once again, we're going to add a new node that also has previous property, a new property that

15
00:01:07,950 --> 00:01:08,820
points to null.

16
00:01:09,550 --> 00:01:14,170
And we're still going to have the tail next equal to the new node.

17
00:01:14,320 --> 00:01:16,310
And this doesn't change.

18
00:01:16,330 --> 00:01:24,850
But the only line that changes is that we need to add a previous property because remember, append

19
00:01:24,880 --> 00:01:27,780
is adding at the end of the list.

20
00:01:27,790 --> 00:01:35,350
We want to add the previous property to equal whatever was at the end of the original list before we

21
00:01:35,350 --> 00:01:36,130
did the append.

22
00:01:36,520 --> 00:01:45,910
So all we would need to do is say new node dot previous is going to equal this dot tail, the very last

23
00:01:45,910 --> 00:01:50,590
item before it gets updated over here to the new node.

24
00:01:51,550 --> 00:01:54,070
Let's see if append works the way we have it.

25
00:01:54,610 --> 00:01:59,020
I'm going to scroll down here and just comment out.

26
00:02:00,720 --> 00:02:04,530
All of this code except for the first two lines.

27
00:02:05,310 --> 00:02:07,120
A pen five and a pen 16.

28
00:02:07,140 --> 00:02:17,940
If I click Run here, I get a doubly linked list that has a head of value ten that points to next,

29
00:02:18,390 --> 00:02:19,650
which is the next node.

30
00:02:19,650 --> 00:02:27,480
We see value five that points to an object that we don't really know yet and also points to a previous

31
00:02:27,480 --> 00:02:28,170
object.

32
00:02:30,230 --> 00:02:38,120
And within this ten node we see that previous points to null because there's nothing before the head.

33
00:02:39,030 --> 00:02:40,980
If we look at the tail.

34
00:02:42,010 --> 00:02:45,760
We see that the tail now has a value of 16.

35
00:02:46,600 --> 00:02:49,480
Next is not because it is the tale, it's the end.

36
00:02:49,480 --> 00:02:56,500
But the previous node is also pointing to this node five.

37
00:02:57,260 --> 00:03:01,490
And the doubly link list has a length of three.

38
00:03:02,670 --> 00:03:03,200
Very cool.

39
00:03:03,210 --> 00:03:06,510
So all we've added is this previous reference.

40
00:03:07,230 --> 00:03:09,000
Let's do the same for Prep.

41
00:03:09,000 --> 00:03:13,050
And that is to add at the beginning of the list if we scroll up.

42
00:03:14,510 --> 00:03:15,800
To prevent.

43
00:03:16,750 --> 00:03:23,320
We once again want to add a new property, which will be the previous that will equal to No.

44
00:03:23,320 --> 00:03:23,950
Four now.

45
00:03:24,340 --> 00:03:27,500
And we want to keep everything the same.

46
00:03:27,520 --> 00:03:35,500
We want to make sure that the new node next is going to point to whatever the head is currently.

47
00:03:36,290 --> 00:03:44,690
But we also want to say that this had dot previous the previous should now point to our new node because

48
00:03:44,690 --> 00:03:50,270
it's no longer the head and then we can update the head to be our new node.

49
00:03:50,270 --> 00:03:54,710
And this length is going to increase and we're going to return this.

50
00:03:55,280 --> 00:03:58,100
If I click run here, remember where?

51
00:03:59,110 --> 00:04:00,190
Pretending one.

52
00:04:00,190 --> 00:04:02,380
So we're adding one to the beginning of the list.

53
00:04:03,090 --> 00:04:10,380
We see that our doubly linked list now has a head with the one value that's pointing to the next value,

54
00:04:10,380 --> 00:04:11,850
which is the ten.

55
00:04:12,450 --> 00:04:15,000
And our tail is still the same.

56
00:04:15,390 --> 00:04:16,920
Tail is 16.

57
00:04:16,950 --> 00:04:20,010
That points to the value of five.

58
00:04:20,579 --> 00:04:23,010
So if we print list here.

59
00:04:24,080 --> 00:04:28,310
Again, 110, 516, as we expected.

60
00:04:28,990 --> 00:04:31,210
What about the insert?

61
00:04:31,630 --> 00:04:32,770
How would that work?

62
00:04:33,570 --> 00:04:41,670
If we go to insert method here and go line by line, this first part, everything's okay.

63
00:04:41,820 --> 00:04:42,960
We have a new node.

64
00:04:42,960 --> 00:04:46,920
So again, we'll add a previous property that will be null for now.

65
00:04:48,140 --> 00:04:52,190
We're still grabbing the leader and traversing to the index.

66
00:04:52,960 --> 00:04:56,020
But now we have to do things a bit differently.

67
00:04:56,560 --> 00:04:59,170
We need to grab the leader.

68
00:05:00,230 --> 00:05:02,100
As well as the follower.

69
00:05:02,120 --> 00:05:05,000
So if we wanted to add 99 here.

70
00:05:05,770 --> 00:05:07,960
We need to grab a reference to.

71
00:05:08,630 --> 00:05:09,350
Ten.

72
00:05:09,440 --> 00:05:11,700
The leader and also the follower.

73
00:05:11,720 --> 00:05:12,440
Five.

74
00:05:12,980 --> 00:05:16,070
So I'm going to change the name of leader next.

75
00:05:16,070 --> 00:05:17,210
That is five.

76
00:05:17,210 --> 00:05:19,610
Over here to say.

77
00:05:21,470 --> 00:05:22,160
Follow her.

78
00:05:22,640 --> 00:05:29,900
So the leader of our new node and the follower of our new node now follower, is now going to be the

79
00:05:29,900 --> 00:05:30,650
five.

80
00:05:31,310 --> 00:05:33,780
We're going to update later on next.

81
00:05:33,800 --> 00:05:42,020
So that is five or leaders next, which is what comes after ten to be the new node are 99.

82
00:05:42,750 --> 00:05:47,550
And then, you know, next is going to equal the follower.

83
00:05:48,120 --> 00:05:49,650
That is five.

84
00:05:50,440 --> 00:05:59,650
But we also want to make sure that our new node dot previous is going to equal the leader.

85
00:06:00,130 --> 00:06:01,450
That is the ten.

86
00:06:02,380 --> 00:06:13,630
And also make sure that the follower that is the five has a previous value that points to our new node.

87
00:06:14,950 --> 00:06:18,490
So if I print list here with our insert.

88
00:06:19,490 --> 00:06:25,850
I've inserted the value, but just to check that everything is working, I'm going to console dot.

89
00:06:27,510 --> 00:06:31,580
Log this, which is our link list.

90
00:06:31,590 --> 00:06:32,610
If I click Run.

91
00:06:33,850 --> 00:06:40,510
I see that our link list has a length of five and I'm going to change this to index of one so we can

92
00:06:40,510 --> 00:06:42,360
see it in our output here.

93
00:06:42,370 --> 00:06:44,050
I'm going to say index of one.

94
00:06:44,200 --> 00:06:47,980
If I click run, I see that head is now value of one.

95
00:06:48,010 --> 00:06:55,720
The next in the item is value of 99 as we expect it, and it has both next and previous properties.

96
00:06:57,160 --> 00:06:58,570
And that's not too bad, right?

97
00:06:58,930 --> 00:07:03,980
As long as you visualize the steps and draw all your diagrams.

98
00:07:04,000 --> 00:07:10,000
All we're doing is saying add the new node or get the leader to point to the new node.

99
00:07:10,330 --> 00:07:18,280
The new node should now point to the leader and the new node should point after it next to the follower.

100
00:07:18,340 --> 00:07:22,930
And the follower is now going to point back to the new node.

101
00:07:24,360 --> 00:07:29,280
You might have to go through this in your head or draw it out on a paper, but it should make sense

102
00:07:29,280 --> 00:07:29,670
now.

103
00:07:30,270 --> 00:07:36,190
And at the end of the day, singly linked lists and doubly linked lists aren't that different.

104
00:07:36,210 --> 00:07:41,670
As you see, all we're doing is just managing another pointer that points to the previous node.

105
00:07:42,360 --> 00:07:52,470
I'm going to leave the Remove Link list up to you to implement your own and the link list as you've

106
00:07:52,470 --> 00:07:53,730
learned up until now.

107
00:07:54,180 --> 00:07:57,510
It shouldn't be very different from what we did in the.

108
00:07:58,670 --> 00:08:04,280
Insert, but I hope you have an understanding of how linguists work now.

109
00:08:05,400 --> 00:08:11,460
Interviewers love asking questions about length lists because it requires a lot of information to be

110
00:08:11,460 --> 00:08:12,530
held in your head.

111
00:08:12,540 --> 00:08:17,820
And as you can see, they can be really complicated if you're not the type of person that thinks clearly

112
00:08:17,820 --> 00:08:22,620
through their steps and understand what they're doing one by one.

113
00:08:23,220 --> 00:08:25,050
And the steps are really important.

114
00:08:25,470 --> 00:08:29,940
That's why interviewers love this question, because they really get to see how you think.

115
00:08:31,070 --> 00:08:32,270
And with linked lists.

116
00:08:32,270 --> 00:08:38,360
As long as you draw out what you're doing step by step, it becomes really, really easy, as long as

117
00:08:38,360 --> 00:08:41,750
you don't just start coding it out from memory.

118
00:08:42,020 --> 00:08:43,549
Just draw out the steps.

119
00:08:43,580 --> 00:08:44,930
Think about your steps.

120
00:08:44,930 --> 00:08:46,940
And the interviewer will be impressed.

121
00:08:47,720 --> 00:08:48,770
I'll see you in the next one.

