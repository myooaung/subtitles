WEBVTT
1
00:00:00.900 --> 00:00:01.859
Welcome back.

2
00:00:02.009 --> 00:00:08.580
I wanted to talk about one last piece of the puzzle, especially when it comes to graphs.

3
00:00:08.970 --> 00:00:12.570
Although we've talked about graph traversal up until now.

4
00:00:13.190 --> 00:00:17.650
And also tree traversal they use BFS and DFS.

5
00:00:18.140 --> 00:00:23.810
There's also another thing that you should consider now in an interview.

6
00:00:23.840 --> 00:00:29.300
You're most likely not going to implement these algorithms because they're extremely complicated and

7
00:00:29.300 --> 00:00:30.650
they take a long time.

8
00:00:30.950 --> 00:00:37.670
However, an interviewer might expect you to know about them and know that you'd use Bellman, Ford

9
00:00:37.670 --> 00:00:43.370
or Dijkstra's algorithm to figure out a shortest path problem.

10
00:00:44.180 --> 00:00:50.000
But you might be asking yourself, whoa, whoa, whoa, Andre, you just told me that breath first search

11
00:00:50.030 --> 00:00:52.910
is used for the shortest path problems.

12
00:00:52.910 --> 00:00:55.160
Why do we need these extra algorithms?

13
00:00:55.160 --> 00:00:56.510
I already know how to do that.

14
00:00:56.750 --> 00:00:59.720
And this is actually a special case.

15
00:00:59.990 --> 00:01:06.230
You see, breath first search is great for the shortest path problem, but there's one thing that it

16
00:01:06.230 --> 00:01:06.980
can't do.

17
00:01:07.800 --> 00:01:17.280
It assumes that each jump to another node in a graph, if we go back here, it assumes that each path

18
00:01:17.310 --> 00:01:23.130
has the same weight with a depth for a search and a breadth for search.

19
00:01:23.790 --> 00:01:28.200
We don't really care what kind of weight an edge has.

20
00:01:29.610 --> 00:01:30.690
For example.

21
00:01:31.550 --> 00:01:34.370
In real life, such as Google Maps.

22
00:01:34.460 --> 00:01:37.610
Some roads are faster than the others.

23
00:01:37.610 --> 00:01:38.330
Right?

24
00:01:38.660 --> 00:01:42.200
We have perhaps more traffic on one road.

25
00:01:42.230 --> 00:01:44.720
Maybe the distance from one node to another.

26
00:01:44.720 --> 00:01:46.310
It's shorter than the other.

27
00:01:46.490 --> 00:01:53.350
And these weighted graphs which we've talked about, have a number associated to their edges.

28
00:01:53.360 --> 00:01:59.570
Remember, a node is called a vertex in a graph, and the connection between two nodes is an edge.

29
00:02:00.240 --> 00:02:06.540
And depth first search doesn't really allow us to take into account these weights.

30
00:02:07.830 --> 00:02:09.600
We need something else.

31
00:02:09.960 --> 00:02:16.170
And in an interview is somebody asked you this, your answer should either be Bellman Ford or Dijkstra's

32
00:02:16.170 --> 00:02:24.050
algorithm that allow us to find the shortest path between two nodes of a weighted graph.

33
00:02:25.900 --> 00:02:26.410
Now.

34
00:02:26.410 --> 00:02:33.760
Belmont and Dexter are two real people that are academics, very, very smart academics that came up

35
00:02:33.760 --> 00:02:40.810
with their own algorithm to solve the shortest path problem of a weighted graph such as Google Maps,

36
00:02:40.810 --> 00:02:45.880
trying to figure out what's the closest way for you to get your burrito, for example.

37
00:02:45.880 --> 00:02:48.340
And just the side note, fun fact.

38
00:02:48.520 --> 00:02:56.890
This is Richard Belmont, and it's the same person that wrote about dynamic programming, which is an

39
00:02:56.890 --> 00:02:58.570
upcoming section in our course.

40
00:02:58.720 --> 00:03:02.050
Let's just say that both of these people are very, very smart.

41
00:03:03.240 --> 00:03:10.770
Now both of these algorithms are quite complex and it takes a lot of time to really get it, encode

42
00:03:10.770 --> 00:03:11.070
it.

43
00:03:11.100 --> 00:03:17.310
So I will leave resources for you if you want to learn more about these algorithms, because in an interview

44
00:03:17.310 --> 00:03:22.260
it's very, very rare that you'd ever have to code these algorithms.

45
00:03:22.260 --> 00:03:25.980
Most of the time you just have to know that they exist and when to use them.

46
00:03:26.340 --> 00:03:27.690
So let's go over that.

47
00:03:28.420 --> 00:03:37.570
Bellman Ford algorithm is a very effective at solving the shortest path over Dijkstra's algorithm because

48
00:03:37.570 --> 00:03:40.020
it can accommodate negative weights.

49
00:03:40.030 --> 00:03:48.970
So if a weighted graph has negative weights or negative number, Bellman Ford algorithm is going to

50
00:03:48.970 --> 00:03:53.230
be able to solve the shortest path problem while Dexter won't be able to.

51
00:03:53.950 --> 00:03:54.760
Now.

52
00:03:55.030 --> 00:03:59.380
Why would you ever use Dijkstra's then if Bellman Ford algorithm can do better?

53
00:04:00.460 --> 00:04:06.670
Well, we won't get into the math of it all, but Bellman Ford algorithm can take a long time to run

54
00:04:06.670 --> 00:04:08.200
in terms of complexity.

55
00:04:08.620 --> 00:04:11.590
And it's not the most efficient algorithm.

56
00:04:12.100 --> 00:04:20.079
The worst case for Bellman Ford algorithm is usually a time complexity of zero of an squared, so it's

57
00:04:20.079 --> 00:04:21.430
not very efficient.

58
00:04:21.550 --> 00:04:29.140
Dijkstra's algorithm, on the other hand, is a little bit faster than that and a little bit more efficient

59
00:04:29.140 --> 00:04:33.520
with the downside that it can accommodate for negative weights between nodes.

60
00:04:35.480 --> 00:04:43.730
If an interviewer shows you this diagram and tells you I want to find the shortest path from 0 to 4

61
00:04:43.760 --> 00:04:48.170
on this weighted graph, you now know what you should say, right?

62
00:04:48.530 --> 00:04:50.660
What algorithm are you going to use?

63
00:04:50.690 --> 00:04:57.470
Are you going to use that breadth first search bellman Ford algorithm or Dijkstra's algorithm?

64
00:04:58.310 --> 00:04:59.150
The answer.

65
00:05:00.180 --> 00:05:02.910
Well, it should be Dijkstra's algorithm.

66
00:05:02.910 --> 00:05:05.480
There's no negative weights on this graph.

67
00:05:05.490 --> 00:05:06.570
It's a weighted graph.

68
00:05:06.570 --> 00:05:09.900
So Dijkstra's algorithm is going to solve that problem.

