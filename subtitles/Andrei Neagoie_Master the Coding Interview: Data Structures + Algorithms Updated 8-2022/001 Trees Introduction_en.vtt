WEBVTT
1
00:00:00.860 --> 00:00:01.910
Welcome back.

2
00:00:01.940 --> 00:00:04.850
It's time to learn another data structure.

3
00:00:05.270 --> 00:00:11.900
This is a big one and an exciting one at that because it's going to introduce a lot of new topics,

4
00:00:11.900 --> 00:00:14.420
especially when we get into algorithms as well.

5
00:00:14.930 --> 00:00:17.270
They're called trees and.

6
00:00:17.270 --> 00:00:19.520
No, no, no, not these kind of trees.

7
00:00:19.520 --> 00:00:21.230
More like this.

8
00:00:22.960 --> 00:00:31.330
Trees are a data structure that have what we call a hierarchical structure as opposed to something like

9
00:00:31.330 --> 00:00:35.110
link lists or arrays which are linear.

10
00:00:35.380 --> 00:00:38.920
Trees can have zero or more child nodes.

11
00:00:39.520 --> 00:00:48.250
You see, a tree usually starts with a single root node or a parent node, and every child of the tree

12
00:00:48.280 --> 00:00:50.710
descends from this root node.

13
00:00:50.890 --> 00:00:53.830
So it's kind of like an inverse tree, really.

14
00:00:54.710 --> 00:01:01.010
And every child of a node descends from only one parent.

15
00:01:02.030 --> 00:01:07.550
So you have a parent child relationship that you see is unidirectional.

16
00:01:07.550 --> 00:01:09.260
That is it's going one way.

17
00:01:10.170 --> 00:01:15.720
And you also have leaf notes, which are the very end of a tree data structure.

18
00:01:16.320 --> 00:01:23.730
Finally, within a tree you can have things like sub trees, such as the area over here circled in red.

19
00:01:24.400 --> 00:01:26.260
36748.

20
00:01:26.290 --> 00:01:32.020
Subtree and tree data structures are very important because you work with them every day.

21
00:01:34.300 --> 00:01:40.060
If we go to Twitter.com or any website for that matter, and we open the developer tools.

22
00:01:43.920 --> 00:01:45.240
Just like I did here.

23
00:01:45.270 --> 00:01:47.820
If I go to the Elements tab.

24
00:01:48.720 --> 00:01:55.110
You see, our web pages are created by something called the DOM or the document object model.

25
00:01:55.110 --> 00:01:57.810
And this is a tree data structure.

26
00:01:58.290 --> 00:02:03.540
It doesn't look like a tree that I just showed you, but the browser is just making it look nice.

27
00:02:03.540 --> 00:02:09.720
But underneath it we have head and body that are children of the HTML tag.

28
00:02:09.750 --> 00:02:13.380
Inside the body we have all these children.

29
00:02:14.660 --> 00:02:21.470
And inside these children, we have more children and more children, and they're all connected hierarchically

30
00:02:21.470 --> 00:02:22.550
to one another.

31
00:02:24.430 --> 00:02:28.150
I'm sure everybody has tried to play chess online versus a computer.

32
00:02:28.450 --> 00:02:36.010
Well, a computer in a chess game, at least back in the day before, we had things like machine learning,

33
00:02:36.670 --> 00:02:43.990
used a tree data structure to make a decision, should I make this move or should I make that move or

34
00:02:43.990 --> 00:02:45.460
should I make that move?

35
00:02:45.460 --> 00:02:50.950
And it would pick moves based on which move had the better outcome.

36
00:02:51.400 --> 00:02:57.400
Facebook comments, for example, are a tree data structure where I can comment on a friend's photo

37
00:02:57.400 --> 00:03:00.070
and that friend can comment on my comment.

38
00:03:00.670 --> 00:03:08.080
Family trees can be represented in a tree data structure, and for us engineers and programmers, you

39
00:03:08.080 --> 00:03:11.380
might have heard of the abstract syntax tree.

40
00:03:13.420 --> 00:03:15.910
If I Google abstract syntax tree here.

41
00:03:16.030 --> 00:03:18.460
Well, this is how programs are.

42
00:03:18.700 --> 00:03:21.190
Code is usually being run.

43
00:03:21.850 --> 00:03:30.190
Usually we write code and then it gets broken down by the machine into this abstract syntax tree so

44
00:03:30.190 --> 00:03:33.400
that it understands what we wrote down.

45
00:03:33.400 --> 00:03:37.390
And this, as you can see, uses a tree data structure.

46
00:03:38.600 --> 00:03:44.140
The beauty of trees is that we use the same principle as we did in length lists.

47
00:03:44.150 --> 00:03:50.090
That is, we have nodes, and these nodes can contain any type of information that we want.

48
00:03:50.510 --> 00:03:52.100
We can have user information.

49
00:03:52.100 --> 00:03:57.140
We can just have numbers like we have here, anything we want, we can contain within a node.

50
00:03:57.560 --> 00:04:02.240
Now, you might be thinking this kind of reminds me of a linked list.

51
00:04:02.960 --> 00:04:04.010
And you'd be right.

52
00:04:04.040 --> 00:04:11.780
Link list is technically a type of tree, but with just one single path.

53
00:04:12.460 --> 00:04:13.900
And it's linear.

54
00:04:13.930 --> 00:04:20.230
There's only one way to go from top to bottom versus what we've seen before in a normal tree like this

55
00:04:20.230 --> 00:04:20.589
one.

56
00:04:21.730 --> 00:04:27.100
Now, a thing to keep in mind here that might be different than a linked list is that a node can only

57
00:04:27.100 --> 00:04:28.450
point to a child.

58
00:04:28.930 --> 00:04:31.390
As you can see, all the arrows point down.

59
00:04:32.490 --> 00:04:39.600
There's always one entry point, which is the route, but nodes don't really have to reference their

60
00:04:39.600 --> 00:04:40.230
parent.

61
00:04:40.890 --> 00:04:47.750
Now, just like in real life, there are many types of tree data structures that we can have.

62
00:04:47.760 --> 00:04:49.740
And if you go to Wikipedia.

63
00:04:51.860 --> 00:04:56.030
And you look for all the tree data structures.

64
00:04:56.180 --> 00:05:02.870
It's going to, well, intimidate you, that's for sure, because look how many different types of trees

65
00:05:02.870 --> 00:05:03.800
we have.

66
00:05:05.100 --> 00:05:08.760
Just like in real life, how we have all these different types of trees.

67
00:05:08.760 --> 00:05:13.350
There's different types of trees that we can have for a specific use case.

68
00:05:13.830 --> 00:05:15.240
But don't get overwhelmed.

69
00:05:15.990 --> 00:05:22.200
In this course, we're going to go over the main ones that get used, I would say, 90% of the time

70
00:05:22.560 --> 00:05:27.180
and the ones that you're most likely going to encounter during an interview, because at the end of

71
00:05:27.180 --> 00:05:33.450
the day, once you understand what a tree data structure is like, how to create it, how to perhaps

72
00:05:33.450 --> 00:05:40.590
use some actions on it, then all the other trees that you saw are just minor alterations to what we

73
00:05:40.590 --> 00:05:41.040
know.

74
00:05:42.000 --> 00:05:43.620
Now I want to warn you.

75
00:05:43.860 --> 00:05:47.310
Back in the day when I took a class on data structures.

76
00:05:48.220 --> 00:05:55.540
This part, especially trees, really, really dragged on and made me not interested in data structures

77
00:05:55.540 --> 00:05:59.320
because there's so many things you can talk about when it comes to trees.

78
00:05:59.560 --> 00:06:06.400
I'm going to try and keep you engaged to the best of my ability and try and be efficient through the

79
00:06:06.400 --> 00:06:12.160
section and show you the important aspects that you need to know for an interview and to lay the foundation

80
00:06:12.760 --> 00:06:17.230
not to teach you every single tree that there is, which is not going to benefit you.

81
00:06:18.610 --> 00:06:19.720
With that in mind.

82
00:06:20.200 --> 00:06:21.820
I'll see you in the next video.

83
00:06:22.150 --> 00:06:22.840
Bye bye.

