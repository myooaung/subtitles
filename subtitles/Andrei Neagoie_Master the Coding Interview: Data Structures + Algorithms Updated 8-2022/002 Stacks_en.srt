1
00:00:01,150 --> 00:00:03,340
Let's talk about stacks.

2
00:00:04,210 --> 00:00:10,780
Stacks is a type of data structure that, well, you can think of them as plates.

3
00:00:11,490 --> 00:00:18,960
That is, we have one piece of data and then another piece of data comes along and gets stacked on top

4
00:00:18,960 --> 00:00:19,860
of that piece of data.

5
00:00:19,860 --> 00:00:23,790
And it keeps going, keeps going, keeps going and keeps going.

6
00:00:23,820 --> 00:00:30,750
You can think of it as these plates stacked on top of each other vertically, and you can only touch

7
00:00:30,840 --> 00:00:32,820
the top plate.

8
00:00:32,850 --> 00:00:36,170
You can't really access anything from the bottom over here.

9
00:00:36,180 --> 00:00:44,220
The way you can access data from a stack is to grab the first plate, then the second plate, then the

10
00:00:44,220 --> 00:00:50,100
third, and you keep going and keep going and keep going until you've gone through all the stack.

11
00:00:50,800 --> 00:00:58,630
And this is called lethal or last in, first out, because the last item that comes in is the first

12
00:00:58,630 --> 00:01:04,180
one that comes out and you're thinking to yourself, why is this useful?

13
00:01:04,180 --> 00:01:06,850
When would we actually use something like a stack?

14
00:01:06,970 --> 00:01:09,880
They're actually useful in quite a surprising number of ways.

15
00:01:10,390 --> 00:01:11,500
They're very good.

16
00:01:11,500 --> 00:01:16,360
Obviously, when you need to know the very last value that was seen or added.

17
00:01:16,360 --> 00:01:21,400
And stacks are very important in language specific engines.

18
00:01:21,730 --> 00:01:28,060
You might have heard of something called Stack Overflow, a website that a lot of engineers visit.

19
00:01:28,390 --> 00:01:34,660
And I'll actually include a bonus video after we talk about queues of how the JavaScript engine works

20
00:01:34,660 --> 00:01:40,090
using stacks and queues and how you might get Stack Overflow when you write that code.

21
00:01:40,800 --> 00:01:48,240
Now most programming languages are modeled with the stack architecture in mind, and when functions

22
00:01:48,240 --> 00:01:55,860
get called in a programming language, usually they follow this model of last in, first out, a function

23
00:01:55,860 --> 00:02:02,430
within a function within a function gets called, and then we start popping those functions until we

24
00:02:02,430 --> 00:02:03,720
get to the very beginning.

25
00:02:04,020 --> 00:02:08,970
And don't worry, this is going to be a little bit more clear when we actually code our own stack.

26
00:02:09,539 --> 00:02:15,290
Another useful way that we might use stacks is such as browser history, right?

27
00:02:15,300 --> 00:02:20,850
When you go back and forth from one website to another and then you hit the back button or the front

28
00:02:20,850 --> 00:02:28,170
button that's using stacks, or maybe you're writing a piece of text and you want to undo something

29
00:02:28,170 --> 00:02:32,580
so you can click the undo option to go back or forward to redo.

30
00:02:33,600 --> 00:02:35,100
Ever wonder how that works?

31
00:02:35,130 --> 00:02:37,860
Well, the idea comes from stacks.

32
00:02:38,160 --> 00:02:44,100
That is, you store the previous state of your work in the memory in such an order that the last one

33
00:02:44,100 --> 00:02:45,210
appears first.

34
00:02:45,540 --> 00:02:47,880
This is something that we can do with stacks.

35
00:02:48,450 --> 00:02:49,860
As you can see over here.

36
00:02:49,890 --> 00:02:54,900
Stacks usually come with three types of methods.

37
00:02:54,930 --> 00:03:00,840
There's a few others, but these are the main ones pop, push and peek peak pop is removed.

38
00:03:00,840 --> 00:03:03,720
The last item that is remove the plate.

39
00:03:03,720 --> 00:03:09,390
Push is at a plate and peak is simply view the top most plate.

40
00:03:10,230 --> 00:03:16,290
I've added look up in here just to show you that it's big O of NW because you usually don't want to

41
00:03:16,290 --> 00:03:19,080
traverse through an entire stack.

42
00:03:19,080 --> 00:03:24,150
But just so you know, if we wanted to do that, it's going to be a heavy operation.

43
00:03:24,890 --> 00:03:26,990
Let's talk about cuz in the next video.

44
00:03:27,560 --> 00:03:28,130
Bye bye.

