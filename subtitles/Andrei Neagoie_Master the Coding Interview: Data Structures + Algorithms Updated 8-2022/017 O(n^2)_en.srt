1
00:00:01,190 --> 00:00:09,770
One common interview question that you might get is something along the lines of log all pairs of array.

2
00:00:10,940 --> 00:00:13,220
Now, what does that actually mean?

3
00:00:13,250 --> 00:00:17,120
Well, if we had an array, we'll just say boxes.

4
00:00:17,690 --> 00:00:20,360
And this array is just.

5
00:00:22,150 --> 00:00:25,210
Contains boxes numbered one through five.

6
00:00:26,560 --> 00:00:31,180
Now this array if I want to log all pairs.

7
00:00:32,049 --> 00:00:38,200
It means that I want to log one, two, then one, three, then one, four, then one, five, then

8
00:00:38,200 --> 00:00:42,820
two, one, then 2 to 2, three to 4 to 5.

9
00:00:42,820 --> 00:00:44,250
So on and so forth.

10
00:00:45,230 --> 00:00:47,550
How will we go about doing that?

11
00:00:47,570 --> 00:00:51,920
And if you want, you can pause the video and try to attempt this problem yourself.

12
00:00:54,580 --> 00:01:06,190
Now in this case, what we want to do is, well, we create a function and we'll say log all pairs of

13
00:01:06,370 --> 00:01:10,210
array that receives an array.

14
00:01:10,510 --> 00:01:11,710
Let's just say array.

15
00:01:11,710 --> 00:01:16,210
So we're descriptive here and in here.

16
00:01:16,920 --> 00:01:18,750
We will do a four loop.

17
00:01:19,230 --> 00:01:20,280
So for.

18
00:01:21,410 --> 00:01:22,940
Let I.

19
00:01:23,800 --> 00:01:24,760
Equals zero.

20
00:01:25,150 --> 00:01:26,380
And we've done this before.

21
00:01:26,380 --> 00:01:34,330
So if I is less than the array length and we'll increment I.

22
00:01:37,900 --> 00:01:40,450
Now in here we want to loop.

23
00:01:40,450 --> 00:01:47,410
So now in the first iteration of the for loop, we'll grab one, but then we want to loop through the

24
00:01:47,410 --> 00:01:52,660
boxes again and log 111, two, one, three, 1415.

25
00:01:52,810 --> 00:01:54,730
So we have another for loop.

26
00:01:56,470 --> 00:02:01,630
And this time we'll say Let J equals zero.

27
00:02:01,660 --> 00:02:08,259
If we want to loop from the beginning, or I could even say one if we want to start off with one, two,

28
00:02:08,259 --> 00:02:12,970
because we're starting off at index of one right here.

29
00:02:13,630 --> 00:02:19,030
For now, we can just leave it at zero, and we'll say that as long as J.

30
00:02:19,850 --> 00:02:23,000
Is less than a dot length.

31
00:02:24,190 --> 00:02:25,570
And we'll increment.

32
00:02:26,020 --> 00:02:26,890
JJ.

33
00:02:28,330 --> 00:02:32,890
And now finally in here I can just say console.log.

34
00:02:35,870 --> 00:02:37,730
I and J.

35
00:02:38,690 --> 00:02:40,610
Let's run this function and see what happens.

36
00:02:43,440 --> 00:02:47,160
Oh, I have to actually call this function, so let's do that log.

37
00:02:48,290 --> 00:02:52,610
All pairs of a ray and I'll give it the boxes array.

38
00:02:52,910 --> 00:02:53,060
Oh.

39
00:02:53,120 --> 00:02:59,900
And we want to make sure here that we're logging out the actual items and not the index of the array.

40
00:03:00,200 --> 00:03:01,820
So we'll just say.

41
00:03:02,790 --> 00:03:03,470
Ray.

42
00:03:04,440 --> 00:03:07,530
I hear and the array.

43
00:03:09,220 --> 00:03:09,940
Jay here.

44
00:03:10,620 --> 00:03:13,620
And just so you don't get confused with the numbers.

45
00:03:13,770 --> 00:03:20,640
Maybe we'll change these into letters so that it's more obvious what we're doing.

46
00:03:22,280 --> 00:03:23,090
See.

47
00:03:24,280 --> 00:03:28,450
D That's not D, that's D And we'll say.

48
00:03:28,480 --> 00:03:30,820
E So if I click run here.

49
00:03:31,760 --> 00:03:33,770
We see that we're logging all pears.

50
00:03:34,490 --> 00:03:35,570
Aye, aye, aye.

51
00:03:35,600 --> 00:03:36,050
Be a.

52
00:03:37,190 --> 00:03:37,760
Keeps going.

53
00:03:37,760 --> 00:03:41,660
Keeps going until e you can see the log over here.

54
00:03:42,860 --> 00:03:45,290
What is the big o of this?

55
00:03:46,520 --> 00:03:50,620
And this is something that you're going to see a lot of in interviews.

56
00:03:50,630 --> 00:03:59,330
And a good rule of thumb is if you see nested loops, that means instead of having to for loops one

57
00:03:59,330 --> 00:04:08,090
after another where we use addition, when you see loops that are nested, we use multiplication.

58
00:04:08,660 --> 00:04:11,210
So this becomes o.

59
00:04:11,240 --> 00:04:13,340
Of n times o.

60
00:04:13,370 --> 00:04:14,150
Of n.

61
00:04:15,280 --> 00:04:19,450
Which when we multiply them, becomes o of n.

62
00:04:20,209 --> 00:04:20,870
Squared.

63
00:04:22,150 --> 00:04:22,620
Oh.

64
00:04:22,750 --> 00:04:23,770
To the end.

65
00:04:23,890 --> 00:04:25,240
To the power of two.

66
00:04:26,590 --> 00:04:29,050
And that's a good rule of thumb.

67
00:04:29,780 --> 00:04:36,620
And if we go back to our graph, this function that we just created and I'm using the S five syntax

68
00:04:36,620 --> 00:04:43,790
here instead of the four loops we did this over and squared is what we call quadratic time.

69
00:04:44,270 --> 00:04:48,410
That means every time the number of elements increase.

70
00:04:48,410 --> 00:04:50,270
So let's say we have two elements.

71
00:04:50,270 --> 00:04:53,060
We have four operations that we do.

72
00:04:53,660 --> 00:04:58,350
If we have three elements, this actually increases quadratic.

73
00:04:58,460 --> 00:05:05,180
B That means instead of four operations, we now have one, two, three, four, five, six, seven,

74
00:05:05,180 --> 00:05:06,260
eight, nine.

75
00:05:06,950 --> 00:05:10,970
Because we have three elements to the power of two.

76
00:05:12,790 --> 00:05:19,630
And you see here how the line is now bent and it increases, well, quite fast.

77
00:05:20,340 --> 00:05:27,850
If we go back to our big old notation or big o graph, we see that O of n squared.

78
00:05:27,870 --> 00:05:29,490
Well, it's horrible.

79
00:05:29,490 --> 00:05:37,560
As in it's pretty slow as the number of elements increases, the number of operations increases significantly.

80
00:05:38,360 --> 00:05:46,480
And a lot of interview questions are questions that ask you to solve a problem that initially is over

81
00:05:46,490 --> 00:05:52,550
and squared and make it faster by perhaps making it into something that is a bit lower over here that

82
00:05:52,550 --> 00:05:54,500
is is bad, fair, good.

83
00:05:54,500 --> 00:05:57,200
Excellent, but definitely not horrible.

84
00:05:58,330 --> 00:06:02,440
If we go back to our rule number three that we were discussing.

85
00:06:03,790 --> 00:06:06,640
Different terms for inputs.

86
00:06:07,090 --> 00:06:10,840
Well, going back to that example we had in the previous video.

87
00:06:11,680 --> 00:06:13,120
Remember this?

88
00:06:13,390 --> 00:06:21,370
Well, we said O of A plus B because we had two different arrays or inputs.

89
00:06:22,030 --> 00:06:28,090
Now, if these loops were actually nested and they're not one after another.

90
00:06:29,510 --> 00:06:34,040
The big o would have been o of a times b.

91
00:06:34,860 --> 00:06:41,880
And that is rule number three, making sure to know that we have different arrays.

92
00:06:41,880 --> 00:06:46,500
That means different notation for each array because we don't know the lengths.

93
00:06:46,800 --> 00:06:52,440
And an easy rule of thumb is any step that happens in the same indentation.

94
00:06:52,620 --> 00:06:55,440
So one after another you add.

95
00:06:57,520 --> 00:07:02,320
And anything that happens with indentation that is nested.

96
00:07:03,830 --> 00:07:05,330
You multiply.

97
00:07:05,960 --> 00:07:09,620
So, again, different inputs should have different variables.

98
00:07:10,340 --> 00:07:12,950
Let's move on to the last rule in the next video.

