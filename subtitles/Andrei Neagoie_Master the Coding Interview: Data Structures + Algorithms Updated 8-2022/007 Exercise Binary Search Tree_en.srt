1
00:00:01,110 --> 00:00:02,070
Welcome back.

2
00:00:02,100 --> 00:00:05,970
It's time to write our own binary search tree.

3
00:00:07,390 --> 00:00:14,080
And in this exercise, I'm going to challenge you to write your own before you watch My Solution video.

4
00:00:15,100 --> 00:00:23,050
Now keep in mind that just like with linked lists, it's going to require us to keep track of the nodes

5
00:00:23,050 --> 00:00:27,180
to the left and to the right of the current node.

6
00:00:27,190 --> 00:00:31,060
And also we have a value associated with a node.

7
00:00:31,660 --> 00:00:37,360
I recommend you actually draw this out on a piece of paper to understand, because keeping everything

8
00:00:37,360 --> 00:00:41,530
in your head and the calculations might be a little bit difficult.

9
00:00:41,770 --> 00:00:45,520
But I have started here with all the essentials you need.

10
00:00:45,700 --> 00:00:48,630
We've created a binary search tree class.

11
00:00:48,640 --> 00:00:50,940
We have a node class that we can use.

12
00:00:50,950 --> 00:00:58,600
We start our binary search tree with the start root of null because we don't have anything yet.

13
00:00:59,140 --> 00:01:05,950
But remember, we have the root, which is our topmost node, which currently is empty.

14
00:01:06,250 --> 00:01:13,090
We're going to initialize our binary search tree and hopefully we're able to create two methods.

15
00:01:13,090 --> 00:01:16,270
One is insert and one is lookup.

16
00:01:16,630 --> 00:01:18,910
And our goal is to create.

17
00:01:19,880 --> 00:01:27,740
This tree over here nine as the root node, then four and 20 as its children, and then four has one

18
00:01:27,740 --> 00:01:28,940
and six as children.

19
00:01:28,940 --> 00:01:30,740
And 20 has 15 and one.

20
00:01:30,740 --> 00:01:33,050
70 as its children.

21
00:01:33,940 --> 00:01:38,380
So ideally if we implement insert correctly.

22
00:01:39,140 --> 00:01:42,080
We can say tree dot insert.

23
00:01:43,450 --> 00:01:44,200
Nine.

24
00:01:45,260 --> 00:01:47,720
Then insert for.

25
00:01:49,630 --> 00:01:52,120
Then insert six.

26
00:01:53,430 --> 00:01:56,220
Then insert, let's say 20.

27
00:01:56,880 --> 00:01:59,400
Well, insert 170.

28
00:02:00,180 --> 00:02:04,320
Last two, we'll insert 15 and we see we have one left here.

29
00:02:04,320 --> 00:02:06,090
So let's do insert.

30
00:02:07,190 --> 00:02:07,880
One.

31
00:02:09,610 --> 00:02:17,350
And ideally, after running these commands, you're able to create this tree data structure.

32
00:02:18,330 --> 00:02:23,310
Now, at the bottom here, I created a small little function for you.

33
00:02:23,460 --> 00:02:30,300
And for now, I want you to just ignore it, because we're using something called recursion here, which

34
00:02:30,300 --> 00:02:31,680
we haven't gotten to yet.

35
00:02:31,920 --> 00:02:38,850
But I only created this function for you to be able to test out your code to make sure that it actually

36
00:02:38,850 --> 00:02:39,450
works.

37
00:02:41,150 --> 00:02:42,440
All you need to do.

38
00:02:43,750 --> 00:02:53,650
In order for you to verify that this is working is to say Jason Dot String Ify, which is a JavaScript

39
00:02:53,650 --> 00:02:57,340
specific way to create a JSON string.

40
00:02:57,880 --> 00:03:00,100
And we're going to say Traverse.

41
00:03:03,490 --> 00:03:05,320
Tree dot root.

42
00:03:05,320 --> 00:03:13,750
We just give it the root node of our tree and it's going to traverse and print out everything into a

43
00:03:13,750 --> 00:03:19,840
string so that you can check in the console that your tree actually is working.

44
00:03:20,720 --> 00:03:22,400
And in the solution video.

45
00:03:22,700 --> 00:03:28,670
I'm going to demonstrate how this works, but I've added this as a little helper for you in case you

46
00:03:28,670 --> 00:03:31,850
want to double check your work to make sure that it's correct.

47
00:03:32,910 --> 00:03:40,260
And by the way, the lookup method should simply return the node that we're looking for.

48
00:03:40,260 --> 00:03:45,480
And if it doesn't find the node, then we can return null or false, whichever you want.

49
00:03:45,750 --> 00:03:50,460
And I've added the remove method here, which we're going to talk about later because it's a little

50
00:03:50,460 --> 00:03:51,110
bit difficult.

51
00:03:51,120 --> 00:03:55,650
So for now, just worry about insert and lookup and I'll see you in the solution video.

