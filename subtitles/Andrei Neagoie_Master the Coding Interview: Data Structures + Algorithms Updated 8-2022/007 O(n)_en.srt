1
00:00:00,810 --> 00:00:05,820
What would you say if I asked you what is the big o of the function?

2
00:00:05,820 --> 00:00:07,290
Finding Nemo?

3
00:00:07,800 --> 00:00:13,740
Well, to make this a little bit cleaner, let's just remove performance done now, because we've learned

4
00:00:13,740 --> 00:00:18,930
that it's not very, very important and we can remove the console log as well.

5
00:00:20,270 --> 00:00:24,650
And looking at this and this loop, what would you say the big O is?

6
00:00:26,240 --> 00:00:30,260
In this video, we're going to learn about our very first big notation.

7
00:00:30,440 --> 00:00:34,510
As we said, a runtime is simply how long something takes to run.

8
00:00:34,520 --> 00:00:37,280
How does this function?

9
00:00:38,100 --> 00:00:45,120
And its runtime grow as our input increases, as our input goes from just a single item in an array

10
00:00:45,150 --> 00:00:49,140
Nemo to ten items in array to 100,000.

11
00:00:49,170 --> 00:00:52,350
How does the efficiency of this function increase?

12
00:00:53,840 --> 00:01:00,440
If we look at this graph and we say we have four items in the array, well, the number of operations

13
00:01:00,440 --> 00:01:01,790
is going to be.

14
00:01:02,440 --> 00:01:03,760
For, right?

15
00:01:03,760 --> 00:01:08,830
Because we're going to loop through each item and say, is this Nnimmo?

16
00:01:09,070 --> 00:01:10,210
Is this Nnimmo?

17
00:01:10,360 --> 00:01:11,440
Is this Nnimmo?

18
00:01:11,680 --> 00:01:12,670
Is this Nnimmo?

19
00:01:12,700 --> 00:01:13,780
Four times.

20
00:01:13,930 --> 00:01:18,700
No matter what, we're looping four times, at least with the way that we have this code set up.

21
00:01:18,850 --> 00:01:25,450
If we have five items in the array, it's going to be five operations, five loops.

22
00:01:25,690 --> 00:01:27,430
Six is the same.

23
00:01:27,430 --> 00:01:29,770
Six items is six operations.

24
00:01:29,770 --> 00:01:34,840
Seven is seven operations and eight is eight operations.

25
00:01:35,710 --> 00:01:38,050
Do we see a little bit of a pattern here?

26
00:01:38,380 --> 00:01:40,420
Well, we can draw a line through it.

27
00:01:41,950 --> 00:01:51,580
This is linear rate as our number of inputs increase, the number of operations increase as well.

28
00:01:51,610 --> 00:01:57,610
And here, ladies and gentlemen, we've learned our very first big notation.

29
00:01:57,820 --> 00:02:00,760
We say that the Finding Nemo function.

30
00:02:01,930 --> 00:02:05,200
Has a big o notation of.

31
00:02:05,930 --> 00:02:06,530
Oh.

32
00:02:07,510 --> 00:02:08,080
And.

33
00:02:09,100 --> 00:02:09,430
Hmm.

34
00:02:10,000 --> 00:02:11,370
That's a little bit strange.

35
00:02:11,380 --> 00:02:13,830
This is just a notation that you have to get used to.

36
00:02:13,840 --> 00:02:22,210
But we say big o of n, or what we call linear linear time.

37
00:02:22,750 --> 00:02:26,380
It takes linear time to find Nemo.

38
00:02:27,170 --> 00:02:29,960
Now, where does this end come from?

39
00:02:30,620 --> 00:02:33,080
This end can be anything really.

40
00:02:33,080 --> 00:02:38,120
I could put X, I could put fish in here if I want.

41
00:02:38,150 --> 00:02:42,650
It's just an arbitrary letter and we usually give.

42
00:02:42,650 --> 00:02:47,930
And when it comes to bingo, this is just a standard that you'll see across the board.

43
00:02:48,730 --> 00:02:55,900
And simply means the big O depends on the number of inputs, the number of fish.

44
00:02:56,620 --> 00:03:01,990
So if we just had the Nemo array, this would just be.

45
00:03:02,690 --> 00:03:03,410
One.

46
00:03:03,410 --> 00:03:06,830
If we had the everyone array, this would be ten.

47
00:03:06,830 --> 00:03:11,180
And if we had the large array it will be 100,000.

48
00:03:12,210 --> 00:03:20,430
But as the inputs increase, you see that the number of operations increase linearly with it.

49
00:03:22,420 --> 00:03:26,770
Owen is probably the most common big old notation you'll find.

50
00:03:27,470 --> 00:03:34,460
If we go back to the graph, you can see that Owen is right here in the yellow region that says fare

51
00:03:34,760 --> 00:03:37,610
as the number of elements increase.

52
00:03:37,760 --> 00:03:40,200
You see, that is just a straight line.

53
00:03:40,220 --> 00:03:44,240
The number of operations increases by the same amount.

54
00:03:45,020 --> 00:03:49,130
Because keep this in mind, Big O doesn't measure things in seconds.

55
00:03:49,160 --> 00:03:53,750
Instead, we're focusing on how quickly our runtime grows.

56
00:03:53,930 --> 00:04:00,010
We simply do this by using the size of the input, which we call N or anything else that we want.

57
00:04:00,020 --> 00:04:00,590
Really.

58
00:04:00,680 --> 00:04:04,640
And compare it to the number of operations that increase.

59
00:04:04,670 --> 00:04:06,650
That's what scalability means.

60
00:04:06,740 --> 00:04:10,190
As things grow larger and larger, does it scale?

61
00:04:11,200 --> 00:04:16,180
So the Find Nemo function is o of nw linear time.

62
00:04:16,240 --> 00:04:23,470
Another way to think about it is this if we had a compression algorithm, let's say this function is

63
00:04:23,470 --> 00:04:28,090
this little compression and the input is this little box.

64
00:04:28,450 --> 00:04:31,620
What's the big o notation of this function?

65
00:04:31,630 --> 00:04:35,770
Well, if we had one element, it will just compress.

66
00:04:38,500 --> 00:04:46,480
One item if we had multiple elements, again, we still have to run each box through the compression

67
00:04:46,480 --> 00:04:49,000
algorithm to compress the box.

68
00:04:50,310 --> 00:04:58,320
If we look at the function for the compress boxes, well, we're using the S five and six syntax here,

69
00:04:58,320 --> 00:05:04,110
but we're essentially looping through each box and in our case we're just console logging it.

70
00:05:04,110 --> 00:05:11,850
But you can see here that all of these all we're doing as the input increases, the boxes, the number

71
00:05:11,850 --> 00:05:15,660
of boxes increases, the number of operations increase.

72
00:05:15,660 --> 00:05:18,000
And that is own linear time.

73
00:05:19,400 --> 00:05:20,480
Congratulations.

74
00:05:20,480 --> 00:05:26,960
You just learned your first bingo notation, and this is probably the most common, but there's a few

75
00:05:26,960 --> 00:05:27,590
others.

76
00:05:28,010 --> 00:05:33,170
So what other big notations do we have other than linear time?

77
00:05:33,970 --> 00:05:36,130
For that, you're going to have to keep watching.

78
00:05:36,340 --> 00:05:37,630
I'll see you in the next video.

79
00:05:37,930 --> 00:05:38,530
Bye bye.

