1
00:00:01,020 --> 00:00:08,400
Every recursive function needs to have something called a base case or a stop point.

2
00:00:09,370 --> 00:00:16,570
Remember my example at the beginning where I showed you how to recursively check out all the folders

3
00:00:16,840 --> 00:00:19,480
in one of our projects?

4
00:00:20,510 --> 00:00:28,060
We have to tell the program, hey, if the subfolder we're going to no longer has any more folders,

5
00:00:28,070 --> 00:00:29,030
stop.

6
00:00:29,210 --> 00:00:33,410
If this stop wasn't there, the function would just keep running.

7
00:00:33,740 --> 00:00:36,470
So recursive functions have two paths.

8
00:00:37,370 --> 00:00:39,740
One is the recursive case.

9
00:00:39,740 --> 00:00:43,490
That is call the function again and run it.

10
00:00:43,850 --> 00:00:47,320
And then the base case that is stop calling the function.

11
00:00:47,330 --> 00:00:49,160
There's nothing more to search.

12
00:00:49,830 --> 00:00:53,820
So how can we add this feature of telling the function?

13
00:00:53,820 --> 00:00:54,750
Hey, quit it.

14
00:00:54,750 --> 00:00:56,190
You're being ridiculous right now.

15
00:00:56,190 --> 00:00:57,240
You need to stop.

16
00:00:57,690 --> 00:01:00,570
Well, we can do something like this.

17
00:01:00,810 --> 00:01:04,530
We can create a counter, and we'll say, this counter is zero.

18
00:01:06,840 --> 00:01:09,240
And we can add a conditional statement.

19
00:01:09,540 --> 00:01:14,220
We'll say that if counter is.

20
00:01:15,450 --> 00:01:17,100
Greater than three.

21
00:01:18,020 --> 00:01:20,030
In that case, just return.

22
00:01:20,780 --> 00:01:21,410
Done.

23
00:01:24,370 --> 00:01:27,040
Otherwise we'll call Inception.

24
00:01:27,040 --> 00:01:30,070
But we also want to increment the counter by one.

25
00:01:31,230 --> 00:01:38,010
So if I click run here, well, I have to call the function first, let's say Inception.

26
00:01:38,830 --> 00:01:42,190
If I call this function right now.

27
00:01:43,020 --> 00:01:44,370
What do you think will happen?

28
00:01:45,130 --> 00:01:46,240
Pause the video.

29
00:01:46,270 --> 00:01:51,250
Think about it, because I'm about to click Run in 3 to 1.

30
00:01:54,430 --> 00:01:56,290
I get undefined.

31
00:01:56,710 --> 00:01:58,750
Is that what you expected?

32
00:02:00,200 --> 00:02:07,430
Just to show you something, if I comment this code out and we just do this interception where we just

33
00:02:07,430 --> 00:02:15,260
keep calling Inception, Inception and perhaps do a console log here saying hello.

34
00:02:16,270 --> 00:02:17,260
And I click Run.

35
00:02:19,320 --> 00:02:22,500
I get maximum coal sack size exceeded.

36
00:02:23,940 --> 00:02:30,030
OC We know by looking at this function, this version of the function, that it's never going to get

37
00:02:30,030 --> 00:02:36,240
to console.log because as soon as it hits the first line of the function, it's going to go back and

38
00:02:36,240 --> 00:02:38,760
say, Oh, I'm calling this and then it's going to go here.

39
00:02:38,790 --> 00:02:43,230
It's just going to bounce back and forth, back and forth, never getting to console.log.

40
00:02:43,350 --> 00:02:49,820
But if we go back to what we have before, well, our function clearly has ended.

41
00:02:49,830 --> 00:02:52,920
It hasn't done StackOverflow.

42
00:02:53,680 --> 00:02:57,610
And at one point its ended because we increment the counter.

43
00:02:58,720 --> 00:03:05,500
So let me console dialogue here our counter and make sure that this works.

44
00:03:06,010 --> 00:03:12,550
If I click run, I get zero one, two, three, four when it gets to four.

45
00:03:12,580 --> 00:03:15,100
Counter is greater than three.

46
00:03:15,190 --> 00:03:16,630
So we're returning.

47
00:03:16,630 --> 00:03:17,200
Done.

48
00:03:17,470 --> 00:03:20,710
But why is there no done here?

49
00:03:22,060 --> 00:03:26,080
And this is a great illustration of how recursion works.

50
00:03:26,470 --> 00:03:28,360
I'm going to copy this code.

51
00:03:31,100 --> 00:03:33,020
And go back to our browser.

52
00:03:33,050 --> 00:03:33,830
Over here.

53
00:03:34,640 --> 00:03:37,820
Let me refresh this page to make sure that.

54
00:03:38,700 --> 00:03:45,660
We have a clear global variable and I'm going to copy and paste Inception this time around.

55
00:03:45,660 --> 00:03:53,700
I'm going to add the debugger keyword so that we can debug our code and go step by step through it.

56
00:03:55,210 --> 00:03:57,190
Let's run Inception.

57
00:03:58,830 --> 00:04:00,030
And see what happens.

58
00:04:00,630 --> 00:04:01,310
All right.

59
00:04:01,320 --> 00:04:03,600
We're back to our debugger.

60
00:04:04,540 --> 00:04:06,760
We see that we have the whole stack here.

61
00:04:06,760 --> 00:04:09,610
Inception has just been called by me.

62
00:04:10,460 --> 00:04:14,720
And I also opened up this little tab called Scope for our case.

63
00:04:14,720 --> 00:04:18,079
We want to just open up the script scope.

64
00:04:19,890 --> 00:04:23,940
It shows us what variables we have available to us.

65
00:04:24,600 --> 00:04:27,450
In this case we have counter, which is zero.

66
00:04:28,490 --> 00:04:30,560
So I'm going to click step over.

67
00:04:31,400 --> 00:04:36,330
And it's going to say, hey, we have a counter is equal to zero.

68
00:04:36,350 --> 00:04:37,790
Is that greater than three?

69
00:04:37,970 --> 00:04:38,470
No.

70
00:04:38,480 --> 00:04:42,410
I'm going to skip over increment counter and run inception.

71
00:04:43,720 --> 00:04:45,220
We see that that happened.

72
00:04:45,920 --> 00:04:51,680
Counter has now been incremented because we've gone through this line and now we go to Inception.

73
00:04:51,680 --> 00:04:53,300
We're going to run the function again.

74
00:04:53,300 --> 00:04:56,660
And you'll notice that the call stack, when I click this, it's going to increase.

75
00:04:59,350 --> 00:05:00,550
And we're going to go one more time.

76
00:05:00,550 --> 00:05:01,670
Counter is not one.

77
00:05:01,690 --> 00:05:02,290
Nope.

78
00:05:02,620 --> 00:05:04,220
Don't return anything yet.

79
00:05:04,240 --> 00:05:05,530
Increment the counter.

80
00:05:05,560 --> 00:05:06,040
You'll see.

81
00:05:06,040 --> 00:05:09,460
Counter goes to two and we're going to run Inception again.

82
00:05:10,460 --> 00:05:12,260
And we keep going once more.

83
00:05:13,240 --> 00:05:15,760
Passing through counter becomes three.

84
00:05:15,970 --> 00:05:17,830
Adding inception to the stack.

85
00:05:18,280 --> 00:05:20,350
And then one more time.

86
00:05:21,190 --> 00:05:23,140
Three is not greater than three.

87
00:05:23,140 --> 00:05:27,370
So we go one more time calling a session, adding it to the stack.

88
00:05:27,370 --> 00:05:33,040
We now have these many stacks counters at four, and then we step over here.

89
00:05:33,880 --> 00:05:37,710
Counter is now four, which is greater than three.

90
00:05:37,720 --> 00:05:43,120
We're finally going to enter the if condition that's going to return done for us.

91
00:05:43,150 --> 00:05:44,380
Let's see what happens here.

92
00:05:44,470 --> 00:05:46,510
I'm going to click next.

93
00:05:48,470 --> 00:05:50,570
And I click next again.

94
00:05:52,210 --> 00:05:52,960
Look at that.

95
00:05:53,260 --> 00:05:58,330
We have a local variable now that has return value done.

96
00:06:00,330 --> 00:06:02,070
We've now returned.

97
00:06:02,340 --> 00:06:03,120
Done.

98
00:06:04,440 --> 00:06:07,140
And we're no longer going to call Inception.

99
00:06:07,880 --> 00:06:14,840
The call stack is now going to start popping off these functions because it's going to say, oh, we

100
00:06:14,840 --> 00:06:16,960
have a return keyword.

101
00:06:16,970 --> 00:06:21,890
I'm going to stop whatever I'm doing at the bottom here and return from this function.

102
00:06:21,890 --> 00:06:25,610
So this inception function is going to get return done.

103
00:06:26,330 --> 00:06:28,010
But notice what happens next.

104
00:06:31,080 --> 00:06:38,850
Oh I get return value undefined as we popped off the top item from inception from the call stack and

105
00:06:38,850 --> 00:06:42,300
if I keep popping things from the call stack.

106
00:06:43,550 --> 00:06:47,150
The return value is undefined and that's what we get.

107
00:06:48,650 --> 00:06:49,160
Now.

108
00:06:49,160 --> 00:06:50,540
Why is that?

109
00:06:51,020 --> 00:06:57,410
Well, if we go back to our function, what you just saw was us essentially doing this.

110
00:06:57,890 --> 00:07:01,310
We called Inception once.

111
00:07:02,670 --> 00:07:03,570
Twice.

112
00:07:05,020 --> 00:07:05,980
Three times.

113
00:07:06,850 --> 00:07:08,170
And then four times.

114
00:07:11,520 --> 00:07:15,880
And within here, when we finally got here, we said, Oh, return done.

115
00:07:15,900 --> 00:07:20,580
So this inception function turns into done.

116
00:07:22,870 --> 00:07:25,540
And then we go to this function.

117
00:07:27,200 --> 00:07:34,250
Now, the problem with this and I know this can get confusing is that once we've returned, once we've

118
00:07:34,250 --> 00:07:41,600
popped off the stack and we're now at this part of inception, but this inception never returns anything.

119
00:07:41,810 --> 00:07:45,980
When a function doesn't return anything, it just returns undefined.

120
00:07:46,040 --> 00:07:53,270
So we need to keep telling it to return this done and and bubble it up towards the very end.

121
00:07:53,600 --> 00:07:57,290
And this is something that you have to keep in mind with recursion.

122
00:07:58,310 --> 00:08:06,650
There's usually a base case and you always want to make sure you return so that the value that you want

123
00:08:06,680 --> 00:08:09,530
gets bubbled up all the way to the top.

124
00:08:09,620 --> 00:08:15,080
In our case, all we need to do is say Return inception.

125
00:08:15,440 --> 00:08:21,380
This way, this inception knows to return whatever its result was, which was done.

126
00:08:21,380 --> 00:08:27,560
And this inception knows to result, to return whatever this result was, which again is done, and

127
00:08:27,560 --> 00:08:30,830
so on and so forth until we get done back.

128
00:08:31,470 --> 00:08:33,150
Let's run this again.

129
00:08:34,909 --> 00:08:36,900
Or and I have to call the function.

130
00:08:36,919 --> 00:08:37,909
Let's do that again.

131
00:08:37,909 --> 00:08:38,840
Inception.

132
00:08:39,890 --> 00:08:40,880
And run.

133
00:08:41,990 --> 00:08:43,580
And we're done.

134
00:08:44,059 --> 00:08:45,620
Very, very nice.

135
00:08:45,830 --> 00:08:47,180
If I go back here.

136
00:08:48,160 --> 00:08:49,540
And go back to the console.

137
00:08:49,570 --> 00:08:56,740
I encourage you to try this out this time adding the return keyword to inception and running through

138
00:08:56,740 --> 00:08:58,780
the debugger to see what happens.

139
00:08:59,790 --> 00:09:04,890
But what I just showed you is all you need to build recursive functions.

140
00:09:04,900 --> 00:09:06,880
You have three rules.

141
00:09:06,900 --> 00:09:11,880
One is to identify the base case.

142
00:09:13,350 --> 00:09:19,590
Two is to identify the recursive case.

143
00:09:21,320 --> 00:09:26,450
So we've identified the base case went to stop the recursive case.

144
00:09:26,450 --> 00:09:29,300
That is when counter is less than three.

145
00:09:30,020 --> 00:09:36,530
And then finally, our third step is to get closer and closer.

146
00:09:37,690 --> 00:09:41,260
And return when needed.

147
00:09:42,010 --> 00:09:43,690
And that usually.

148
00:09:45,160 --> 00:09:48,940
You have to returns.

149
00:09:52,510 --> 00:09:57,670
For the base case and the recursive case because you want to return something at the end of the function.

150
00:09:58,300 --> 00:10:00,310
So let's comment this out.

151
00:10:00,760 --> 00:10:03,370
We have an idea of how recursion works.

152
00:10:03,880 --> 00:10:10,870
The function simply gets closer and closer and closer to the base case, and once it gets to the base

153
00:10:10,870 --> 00:10:15,940
case, it finally returns and pops functions off the stack.

154
00:10:16,420 --> 00:10:18,150
But that's enough talking for me.

155
00:10:18,160 --> 00:10:24,190
I think it's time for us to do some coding exercises to get really familiar with this topic.

156
00:10:24,400 --> 00:10:25,540
I'll see you in the next one.

157
00:10:25,990 --> 00:10:26,620
Bye bye.

