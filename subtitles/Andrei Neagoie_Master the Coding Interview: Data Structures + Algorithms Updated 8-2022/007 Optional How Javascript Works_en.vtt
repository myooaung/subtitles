WEBVTT
1
00:00:01.589 --> 00:00:04.500
How does JavaScript actually work?

2
00:00:04.680 --> 00:00:07.030
Imagine getting this question during an interview.

3
00:00:07.050 --> 00:00:08.220
Or how about this?

4
00:00:08.250 --> 00:00:12.510
Explain the difference between asynchronous and synchronous in JavaScript.

5
00:00:13.140 --> 00:00:15.830
Or maybe they ask you to explain the statement.

6
00:00:15.840 --> 00:00:19.470
JavaScript is a single threaded language that can be non blocking.

7
00:00:20.530 --> 00:00:21.190
Oh, boy.

8
00:00:21.220 --> 00:00:24.460
In this video, we're going to help you answer those questions.

9
00:00:24.820 --> 00:00:29.460
This is a video you may need to visit a few times as you progress to really get it.

10
00:00:29.470 --> 00:00:30.790
So don't feel discouraged.

11
00:00:30.790 --> 00:00:34.810
If you don't feel 100% confident, just keep watching it and you'll get it.

12
00:00:35.350 --> 00:00:41.800
Now, we don't need to know how JavaScript works internally to write a program, but it is important

13
00:00:41.800 --> 00:00:42.430
to learn.

14
00:00:42.730 --> 00:00:46.990
I see a lot of people who have been developers for years and not know this.

15
00:00:47.020 --> 00:00:50.860
It's like being a pilot and not knowing how to an airplane can fly.

16
00:00:51.940 --> 00:00:55.000
That's a little bit dramatic there, but you get my point.

17
00:00:55.030 --> 00:00:57.730
So let's start first.

18
00:00:57.970 --> 00:01:00.100
What is a program?

19
00:01:00.310 --> 00:01:03.310
Well, a program has to do some simple things.

20
00:01:03.340 --> 00:01:05.379
It has to allocate memory.

21
00:01:05.410 --> 00:01:10.840
Otherwise, we wouldn't be able to have variables or even have a file on our computer.

22
00:01:10.870 --> 00:01:16.510
It also has to parse and execute scripts, which means read and run commands.

23
00:01:17.740 --> 00:01:25.660
Now, we also know that from our previous discussion, there's the JavaScript engine that each browser

24
00:01:25.660 --> 00:01:33.040
implements and Chrome, it's the V8 and the V8 engine reads the JavaScript that we write and changes

25
00:01:33.040 --> 00:01:36.490
into machine executable instructions for the browser.

26
00:01:37.270 --> 00:01:43.000
Now the engine consists of two parts a memory heap and a call stack.

27
00:01:43.180 --> 00:01:45.060
Now the memory heap.

28
00:01:45.070 --> 00:01:48.610
This is where the memory allocation happens.

29
00:01:48.610 --> 00:01:52.110
And don't worry, we're going to talk about this and then the call stack.

30
00:01:52.120 --> 00:01:54.840
This is where your code is read and executed.

31
00:01:54.850 --> 00:01:57.640
It tells you where you are in the program.

32
00:01:58.870 --> 00:02:01.990
So let's simplify this and show you what I mean.

33
00:02:04.240 --> 00:02:10.710
I have sublime text over here and for us to allocate memory and the memory heap.

34
00:02:10.720 --> 00:02:16.720
Well, it's as simple as doing cost a equals to one.

35
00:02:16.810 --> 00:02:21.160
We've just allocated memory now when we assign this.

36
00:02:21.490 --> 00:02:24.190
The JavaScript engine is going to remember that.

37
00:02:24.400 --> 00:02:25.030
Oh yeah.

38
00:02:25.060 --> 00:02:27.990
A has a value of one.

39
00:02:28.000 --> 00:02:34.090
We've just used up the memory heap and I can keep going on, on and on like this.

40
00:02:34.090 --> 00:02:34.540
Right.

41
00:02:34.540 --> 00:02:41.590
I can keep copying and pasting and changing these variables to B and C and I can change the values to

42
00:02:41.590 --> 00:02:44.470
100 and maybe here will be ten.

43
00:02:45.420 --> 00:02:45.940
Cool.

44
00:02:45.960 --> 00:02:48.780
Now, what's an issue that we see with this?

45
00:02:50.000 --> 00:02:55.520
There's something called a memory leak that you're going to hear as you become a developer.

46
00:02:55.880 --> 00:03:01.880
And what we've done here is we've created all these variables, these global variables that are in the

47
00:03:01.880 --> 00:03:02.810
memory heap.

48
00:03:03.080 --> 00:03:05.250
But you see this box, right?

49
00:03:05.270 --> 00:03:10.860
And with all memory, we have limited amount that we can actually have.

50
00:03:10.880 --> 00:03:17.960
So by increasing the number of variables that we have, imagine if I had just this page full of variables

51
00:03:17.960 --> 00:03:21.500
and instead of just numbers, they're like very, very big arrays.

52
00:03:21.830 --> 00:03:28.460
Well, memory leaks happen when you have unused memory, such as, let's say we're not using the variable

53
00:03:28.460 --> 00:03:29.930
A, but it's still there.

54
00:03:30.020 --> 00:03:36.020
Well, by having unused memory, just laying around, it fills up this memory heap.

55
00:03:36.350 --> 00:03:40.040
And that's why you might hear why global variables are bad.

56
00:03:40.040 --> 00:03:46.100
Global variables are bad because if we don't forget to clean up after ourselves, we fill up this memory

57
00:03:46.100 --> 00:03:50.210
heap and eventually the browser will not be able to work.

58
00:03:51.200 --> 00:03:53.920
All right, so that's memory.

59
00:03:53.930 --> 00:03:56.060
Let's talk about the call stack.

60
00:03:56.060 --> 00:03:57.020
What is that?

61
00:03:58.050 --> 00:04:02.580
Well again with a cul sac.

62
00:04:03.710 --> 00:04:04.790
We can have.

63
00:04:05.960 --> 00:04:07.220
Something like this.

64
00:04:08.210 --> 00:04:08.720
Console.

65
00:04:09.440 --> 00:04:11.120
We'll go one.

66
00:04:13.100 --> 00:04:14.330
Console log.

67
00:04:15.220 --> 00:04:15.970
To.

68
00:04:17.350 --> 00:04:20.470
And then finally console.log.

69
00:04:21.399 --> 00:04:22.060
Three.

70
00:04:23.280 --> 00:04:32.610
If I run this code in my browser terminal, well, I get one, two, three.

71
00:04:33.760 --> 00:04:39.610
So the coal stack, if you remember, that's what reads and executes our scripts.

72
00:04:40.030 --> 00:04:45.820
So what the coal stack does, it reads the first line console.log.

73
00:04:45.910 --> 00:04:48.580
It gets put in this call stack.

74
00:04:48.670 --> 00:04:52.510
So the JavaScript engine says console.log has been added.

75
00:04:52.510 --> 00:04:55.270
Let's pop it onto this call stack.

76
00:04:56.550 --> 00:05:00.580
And then it runs it and creates one.

77
00:05:00.600 --> 00:05:05.560
Then it says, okay, I'm removing the first console lock because I just finished running it.

78
00:05:05.580 --> 00:05:09.930
I'm going to place the second console log into my call.

79
00:05:09.930 --> 00:05:19.620
Stack adds it on here and says, Yep, execute two and then it removes that it pops it and then gets

80
00:05:19.620 --> 00:05:25.980
console log three and logs console.log three and then finally removes it.

81
00:05:26.800 --> 00:05:31.420
But let's have a bit more of a complex example here to demonstrate this point.

82
00:05:32.110 --> 00:05:34.750
Imagine I have something like this.

83
00:05:37.360 --> 00:05:39.760
I have a function concert one.

84
00:05:44.270 --> 00:05:48.200
And inside this function, we have another function calls to.

85
00:05:50.650 --> 00:05:56.470
And for now it's not really going to do much is going to console dot log.

86
00:05:57.940 --> 00:05:58.600
Four.

87
00:05:59.080 --> 00:06:02.980
And then in here we'll just say we run the two function.

88
00:06:04.240 --> 00:06:14.380
So if I copy and paste this and place it into our console and I run one, I get four and ignore this

89
00:06:14.380 --> 00:06:15.040
error here.

90
00:06:15.040 --> 00:06:18.880
It just related to my app in the browser, but you see that we get four.

91
00:06:18.880 --> 00:06:21.700
So what happened here according to the call stack?

92
00:06:22.090 --> 00:06:29.860
Well, if we have the call stack here, we first ran the one function.

93
00:06:29.860 --> 00:06:34.510
So on top of the call stack, the one function gets run.

94
00:06:34.510 --> 00:06:40.000
And as we enter into this call stack, we see that we run another function too.

95
00:06:40.000 --> 00:06:50.170
So two goes on top of the call stack and now we run the two function which is console.log.

96
00:06:50.350 --> 00:06:54.580
So we have console log.

97
00:06:55.370 --> 00:06:56.270
For.

98
00:06:57.870 --> 00:06:59.870
That's run inside of the two function.

99
00:06:59.880 --> 00:07:06.420
So now that we've read this, the call stack is going to say there's nothing else inside of this I'm

100
00:07:06.420 --> 00:07:08.270
going to run console.log for.

101
00:07:08.280 --> 00:07:11.190
So it's going to print out number four here.

102
00:07:11.190 --> 00:07:17.790
It's going to remove that from the call stack and then remove the two.

103
00:07:19.620 --> 00:07:23.550
And then remove the one because it's just been called.

104
00:07:25.890 --> 00:07:28.590
And because Stack is now empty.

105
00:07:29.160 --> 00:07:30.540
All right, awesome.

106
00:07:30.540 --> 00:07:34.590
Now let's revisit the statement from the beginning of the video.

107
00:07:34.740 --> 00:07:39.450
JavaScript is a single threaded language that can be non blocking.

108
00:07:39.810 --> 00:07:43.680
Single threaded means that it has only one call stack.

109
00:07:44.440 --> 00:07:46.480
And one stack only.

110
00:07:46.480 --> 00:07:48.250
It can only do one thing at a time.

111
00:07:48.250 --> 00:07:52.780
And as you saw, Carl Stack is first in, last out.

112
00:07:52.870 --> 00:07:58.660
So whatever is at the top of the call, stack gets run first, then below that, below that, below

113
00:07:58.660 --> 00:08:01.090
that delta call stack is empty.

114
00:08:02.310 --> 00:08:07.980
Now other languages can have multiple stacks and these are called multithreaded.

115
00:08:08.850 --> 00:08:14.010
You can also see how that might be beneficial to have multiple contacts so that we don't keep waiting

116
00:08:14.010 --> 00:08:14.940
around for stuff.

117
00:08:15.240 --> 00:08:18.270
Why was JavaScript designed to be single threaded?

118
00:08:18.960 --> 00:08:24.540
Well, running code on a single thread can be quite easy since you don't have to deal with complicated

119
00:08:24.540 --> 00:08:27.840
scenarios that arise in multi threaded environment.

120
00:08:27.840 --> 00:08:29.660
You just have one thing to worry about.

121
00:08:29.670 --> 00:08:36.360
And when I say issues well with multithreaded environment, you can have such things as deadlocks.

122
00:08:37.950 --> 00:08:39.840
Now guess what?

123
00:08:40.020 --> 00:08:44.220
You just learned what synchronous programming means.

124
00:08:44.820 --> 00:08:51.720
Synchronous programming simply means line one gets executed, then line two gets executed, and then

125
00:08:51.720 --> 00:08:53.730
line three gets executed.

126
00:08:54.940 --> 00:08:59.260
The latter can start before the first finishes.

127
00:08:59.260 --> 00:09:06.100
So this console log too doesn't start until console log finishes and console log three doesn't start

128
00:09:06.100 --> 00:09:12.040
until the above two finish because well, we've looked at the call stack because of the call stack.

129
00:09:12.190 --> 00:09:16.550
Now, you may have heard of the site Stack Overflow.

130
00:09:16.570 --> 00:09:19.570
If you're a developer, you use it on a daily.

131
00:09:19.810 --> 00:09:24.700
And have you ever wondered what Stack Overflow means?

132
00:09:25.840 --> 00:09:34.990
Well, Stack Overflow is this when a stack is overflowing, kind of like we talked about memory leaks

133
00:09:34.990 --> 00:09:42.760
and how the memory heap of a JavaScript engine can overflow well with Stack Overflow.

134
00:09:43.180 --> 00:09:48.040
This happens when the call stack just gets bigger and bigger and bigger until it just doesn't have enough

135
00:09:48.040 --> 00:09:48.940
space anymore.

136
00:09:49.210 --> 00:09:51.610
How can we do that?

137
00:09:52.090 --> 00:09:54.250
Can we recreate a Stack Overflow?

138
00:09:54.760 --> 00:10:02.140
Yeah, I can show you quickly that to create a Stack Overflow, all you have to do is function.

139
00:10:03.570 --> 00:10:06.120
Flu like we have in here.

140
00:10:07.560 --> 00:10:11.070
And this function we'll just have foo.

141
00:10:13.080 --> 00:10:16.290
And we're just going to run our flu function.

142
00:10:17.270 --> 00:10:17.830
All right.

143
00:10:17.840 --> 00:10:19.060
That looks confusing.

144
00:10:19.070 --> 00:10:21.620
What is happening here?

145
00:10:21.920 --> 00:10:24.770
This is something called recursion.

146
00:10:27.150 --> 00:10:30.270
And recursion means a function that calls itself.

147
00:10:30.480 --> 00:10:35.980
So if you look at what this function does, we run foo and foo gets executed.

148
00:10:36.000 --> 00:10:39.540
What foo does is, well, we run through again.

149
00:10:39.540 --> 00:10:44.850
So it just keeps looping over and over and over having a recursion.

150
00:10:44.850 --> 00:10:46.560
But there's no end in sight.

151
00:10:46.560 --> 00:10:46.870
Right?

152
00:10:46.890 --> 00:10:50.430
We keep adding foo to the call stack.

153
00:10:50.430 --> 00:10:56.920
We keep adding it over and over and over and over and over and over and over and over.

154
00:10:56.940 --> 00:10:59.520
And we have a Stack Overflow.

155
00:10:59.850 --> 00:11:06.480
So if you want to have fun, go into your browser, go into your console and run something like this

156
00:11:06.480 --> 00:11:07.920
and see what happens.

157
00:11:07.920 --> 00:11:10.110
You're going to get a Stack Overflow.

158
00:11:11.120 --> 00:11:11.720
All right.

159
00:11:11.720 --> 00:11:14.240
So hopefully this now makes sense.

160
00:11:14.240 --> 00:11:19.430
The JavaScript engine, which is the V8 engine in Chrome, has a memory heap and a call stack.

161
00:11:20.200 --> 00:11:20.830
Now.

162
00:11:23.070 --> 00:11:25.620
JavaScript is single threaded.

163
00:11:25.800 --> 00:11:29.250
Only one statement is executed at a time.

164
00:11:29.990 --> 00:11:31.730
But there is a problem now, isn't it?

165
00:11:32.000 --> 00:11:38.120
What if line two was a big, big task we needed to do?

166
00:11:38.150 --> 00:11:41.900
Maybe loop through an array that had millions of items.

167
00:11:43.180 --> 00:11:44.290
What would happen there.

168
00:11:44.320 --> 00:11:48.630
Well, we would have this console.log execute.

169
00:11:48.640 --> 00:11:51.760
Then the second line that is a massive, massive job.

170
00:11:51.760 --> 00:11:54.520
We'll just work there and console.log.

171
00:11:54.520 --> 00:11:57.150
Three will take a really long time to get locked.

172
00:11:57.160 --> 00:12:00.310
And in our small example, that doesn't mean much.

173
00:12:00.310 --> 00:12:05.440
But if you had this on a website, well, the user wouldn't be able to do anything.

174
00:12:05.440 --> 00:12:11.150
The website would pretty much freeze until that task is done and the user just waits there.

175
00:12:11.170 --> 00:12:13.220
That's not very good, is it?

176
00:12:13.240 --> 00:12:19.540
Well, with synchronous task, if we have one function that takes up a lot of time, it's going to hold

177
00:12:19.540 --> 00:12:20.260
up the line.

178
00:12:20.680 --> 00:12:22.980
Imagine a buffet restaurant, right?

179
00:12:22.990 --> 00:12:24.910
If all the people want to eat.

180
00:12:24.910 --> 00:12:29.550
But Bobby says, Hold on, guys, I have to keep eating and putting bacon on my plate.

181
00:12:29.560 --> 00:12:34.990
Well, everybody has to wait in line, so it sounds like we need something non blocking.

182
00:12:35.530 --> 00:12:38.650
Remember our first statement that we made in this video?

183
00:12:38.650 --> 00:12:43.210
JavaScript is a single threaded language that can be non blocking.

184
00:12:43.570 --> 00:12:46.840
Ideally, we don't wait around for things that take time.

185
00:12:47.410 --> 00:12:49.030
So how do we do this?

186
00:12:49.950 --> 00:12:52.310
Well, asynchronous to the rescue.

187
00:12:52.860 --> 00:12:55.140
Think of asynchronous like a behavior.

188
00:12:55.170 --> 00:12:59.340
Synchronous execution is great because it's predictable.

189
00:12:59.910 --> 00:13:02.460
We know what happens first, then what happens next?

190
00:13:02.460 --> 00:13:03.570
What happens third?

191
00:13:03.870 --> 00:13:05.430
But it can get slow.

192
00:13:05.460 --> 00:13:12.150
So when we have to do things like image processing or making requests over the network, like API calls

193
00:13:12.150 --> 00:13:15.000
and don't worry, we're going to talk about this in future videos.

194
00:13:15.000 --> 00:13:18.240
We need something more than just synchronous tasks.

195
00:13:18.660 --> 00:13:19.020
All right.

196
00:13:19.020 --> 00:13:23.370
So you're thinking to yourself, Andre, how do we do asynchronous programming then?

197
00:13:23.940 --> 00:13:27.060
Well, let me remove some of this clutter.

198
00:13:27.960 --> 00:13:31.950
We can do asynchronous programming by doing something like this.

199
00:13:32.850 --> 00:13:40.410
Set timeout, which we're going to talk about, is a function that comes within our browsers and it

200
00:13:40.410 --> 00:13:42.900
allows us to create a timeout.

201
00:13:43.820 --> 00:13:47.660
And we can just give it the first parameter is the function that we want to run.

202
00:13:47.660 --> 00:13:50.790
And then the second parameter is how many seconds we want to wait.

203
00:13:50.810 --> 00:13:53.240
So let's say I want to wait 2 seconds.

204
00:13:53.240 --> 00:13:55.520
So 200, 2000 milliseconds.

205
00:13:56.150 --> 00:14:00.710
If I do this now, let's run into the console and see what happens.

206
00:14:07.540 --> 00:14:09.880
Well, what just happened?

207
00:14:10.360 --> 00:14:13.390
We have console log one.

208
00:14:14.460 --> 00:14:20.280
Then console log three and then console log two, 2 seconds later.

209
00:14:20.940 --> 00:14:28.380
It looks like we just skipped this whole step and then put this at the very end.

210
00:14:29.580 --> 00:14:33.460
Well, you've just witnessed asynchronous programming.

211
00:14:33.480 --> 00:14:36.720
In order to understand this and what just happened.

212
00:14:36.750 --> 00:14:39.300
I need to take you to the next part.

213
00:14:39.450 --> 00:14:40.650
And that is.

214
00:14:42.240 --> 00:14:48.540
In order for JavaScript as we know it, to run for the JavaScript engine with memory heap and call stack.

215
00:14:48.540 --> 00:14:52.320
To run, we need more than just the JavaScript engine.

216
00:14:52.410 --> 00:14:56.310
We need what we call a JavaScript runtime environment.

217
00:14:57.290 --> 00:15:01.520
And JavaScript runtime environment is again part of the browser.

218
00:15:01.520 --> 00:15:03.380
It's included in the browsers.

219
00:15:03.560 --> 00:15:06.620
They have extra things on top of the engine.

220
00:15:06.620 --> 00:15:12.350
They have something called web APIs, callback queue and an event loop.

221
00:15:12.890 --> 00:15:18.970
And as you can see here, set timeout is part of the web API.

222
00:15:18.980 --> 00:15:22.280
It's not technically part of JavaScript, is it?

223
00:15:22.880 --> 00:15:28.340
It's what the browsers give us to use so we can do asynchronous programming.

224
00:15:28.770 --> 00:15:29.020
Okay.

225
00:15:29.060 --> 00:15:34.940
So looking at this diagram, let's see if we can figure out what our code was doing.

226
00:15:36.530 --> 00:15:38.930
We can create here our own.

227
00:15:40.370 --> 00:15:41.430
Call Sak.

228
00:15:41.850 --> 00:15:53.720
We'll have web API and then we'll have a callback queue and then loop.

229
00:15:55.280 --> 00:15:59.030
Just like we have in our JavaScript runtime environment.

230
00:15:59.210 --> 00:16:00.450
So what's happening here?

231
00:16:00.470 --> 00:16:03.920
Well, first we have console.log.

232
00:16:04.280 --> 00:16:07.400
That goes into the call stack.

233
00:16:08.210 --> 00:16:10.580
And that gets run.

234
00:16:10.730 --> 00:16:17.690
So we log console, log to the browser, we then get set timeout.

235
00:16:18.690 --> 00:16:21.690
Into our call stack because we finish this first task.

236
00:16:21.690 --> 00:16:23.010
We're going to the second one.

237
00:16:23.490 --> 00:16:24.700
And what's that timeout?

238
00:16:24.720 --> 00:16:30.210
What's going to happen is, well, the call stack is going to say, Kay, I have set timeout.

239
00:16:30.660 --> 00:16:37.760
And because set timeout is not part of JavaScript but part of the Web API, it has this special characteristic.

240
00:16:37.770 --> 00:16:42.600
What's going to happen is it triggers the web API.

241
00:16:43.790 --> 00:16:48.590
And says, Hey, set time out has just been called.

242
00:16:50.170 --> 00:16:56.240
And because we notify the web API, we can pop it out of the call stack.

243
00:16:56.260 --> 00:17:02.290
Now the web API starts a timer here, a timer of 2 seconds.

244
00:17:02.320 --> 00:17:04.900
It's going to know that in 2 seconds.

245
00:17:05.109 --> 00:17:06.490
You have to do something.

246
00:17:07.339 --> 00:17:17.599
And because the call stack is empty, the JavaScript engine now goes to console log three and executes

247
00:17:17.599 --> 00:17:18.140
this.

248
00:17:18.990 --> 00:17:20.130
So that makes sense.

249
00:17:20.130 --> 00:17:27.660
Right now we've done one and three, but we still have set timeout 2 seconds in the Web API.

250
00:17:27.720 --> 00:17:36.750
Now after 2 seconds when our time limit is up, the Web API is going to say set, timeout should be

251
00:17:36.750 --> 00:17:37.170
run.

252
00:17:37.170 --> 00:17:38.550
Let's see what's inside of it.

253
00:17:38.550 --> 00:17:40.740
Well, we have console log two.

254
00:17:40.740 --> 00:17:45.180
So what's going to happen is it's going to say, hey, set, timeout is done.

255
00:17:46.490 --> 00:17:48.020
We have a callback.

256
00:17:49.310 --> 00:17:57.140
And this callback of set timeout we added to the callback queue saying that, hey, we have to run something,

257
00:17:57.140 --> 00:17:58.430
we're ready to run it.

258
00:18:00.600 --> 00:18:08.580
Now the last part, the event loop, the event loop over here checks and says, hey, is the call stack

259
00:18:08.580 --> 00:18:09.090
empty?

260
00:18:09.090 --> 00:18:13.920
And it keeps checking all the time if the stack is empty and if the call stack is empty and there's

261
00:18:13.920 --> 00:18:19.920
nothing running right now in the JavaScript engine, it's going to say, Hey, do we have any callbacks?

262
00:18:19.920 --> 00:18:24.930
It's going to check the callback queue and say, Hmm, is anything in there because the call stack is

263
00:18:24.930 --> 00:18:27.960
empty, we can throw something in there and make it do some work.

264
00:18:28.320 --> 00:18:31.170
In our case, we say, Oh, yeah, I do.

265
00:18:31.200 --> 00:18:34.380
Let me put this into the call stack.

266
00:18:34.380 --> 00:18:42.240
So now we move the callback into the call stack and then the callback we run it.

267
00:18:42.240 --> 00:18:45.510
And by running it we see that we have console.log too.

268
00:18:45.600 --> 00:18:50.010
So it's going to say console log to.

269
00:18:51.590 --> 00:18:56.780
It's going to run this function and once it's done, it's going to pop it out of the cul sac.

270
00:18:56.780 --> 00:19:03.560
And again, we're done with the callback, so we remove it and there you go, we're done.

271
00:19:03.560 --> 00:19:08.540
Everything is empty and we've just run this one three.

272
00:19:09.110 --> 00:19:14.540
It's going to go through the entire web API callback queue, event loop, and then it's going to run

273
00:19:14.540 --> 00:19:15.590
console.log.

274
00:19:15.590 --> 00:19:22.970
To do that was a lot of information, so you might need to watch that a few times, but hopefully that

275
00:19:22.970 --> 00:19:26.300
makes sense to you of why we notice this behavior.

276
00:19:27.260 --> 00:19:34.130
And I want to challenge your understanding here, knowing what you know and what I just tell you.

277
00:19:34.130 --> 00:19:37.040
What happens if I change this to zero?

278
00:19:37.220 --> 00:19:39.320
That means 0 seconds.

279
00:19:40.150 --> 00:19:45.070
I'm going to give you a second to think about what will happen, and then we're going to try this out.

280
00:19:45.790 --> 00:19:49.480
And then I clear the console, copy and paste this and run it.

281
00:19:51.570 --> 00:19:54.270
Well, one, three and two.

282
00:19:54.300 --> 00:19:54.870
Did you guess?

283
00:19:54.870 --> 00:19:55.380
Right.

284
00:19:56.240 --> 00:19:59.110
Now think about why that happened.

285
00:19:59.120 --> 00:20:04.460
Even though this is 0 seconds, it still went through the process.

286
00:20:04.460 --> 00:20:11.900
It still got entered into the Web APIs and then the callback queue and then the event loop.

287
00:20:11.900 --> 00:20:19.880
And by the time that was happening, the call stack had already moved on to the console log three and

288
00:20:19.880 --> 00:20:23.480
only after console log three was done and the call stack was empty.

289
00:20:23.480 --> 00:20:28.130
The event loop said, oh yeah, we can call console log to.

290
00:20:29.590 --> 00:20:31.360
Hopefully that makes sense for you.

291
00:20:31.360 --> 00:20:36.550
And if you're able to understand that, you'll actually have a lot of people that hire for JavaScript

292
00:20:36.550 --> 00:20:41.680
roles, ask questions like this on an interview, and you have to explain why that is.

293
00:20:41.680 --> 00:20:47.740
So I hope that makes sense to you and you can use that to your advantage at the next interview.

294
00:20:47.740 --> 00:20:49.750
So let's recap.

295
00:20:53.870 --> 00:21:00.350
If you wanted to load your latest tweets onto a Web page and you do this synchronously, then visitors

296
00:21:00.350 --> 00:21:04.310
to your site won't be able to do anything until those tweets are loaded.

297
00:21:04.370 --> 00:21:08.620
This could cause a long delay before they even get to see the content of your site.

298
00:21:08.630 --> 00:21:12.470
They may not be able to click anywhere and the page will feel like it's frozen.

299
00:21:12.560 --> 00:21:14.580
Not a very good user experience is.

300
00:21:15.320 --> 00:21:19.100
Another way to think about this is calling your teacher with a question.

301
00:21:20.140 --> 00:21:27.640
Synchronous way is you call the teacher, you wait on the phone until the teacher answers the phone

302
00:21:27.640 --> 00:21:31.090
and ask him the question and hopefully you get an answer.

303
00:21:31.090 --> 00:21:36.370
So you let the phone ring until he picks up, but you're not doing anything else.

304
00:21:36.370 --> 00:21:42.670
In the meantime, asynchronous means you send a text to a teacher with a question, and then when the

305
00:21:42.670 --> 00:21:49.000
teacher he or she has the time, will respond to you and call you with the answer so you can do other

306
00:21:49.000 --> 00:21:49.900
stuff in between.

307
00:21:50.740 --> 00:21:58.480
So JavaScript is asynchronous when you can leave it a message and a callback tells you, Hey, Mr. Teacher

308
00:21:58.480 --> 00:22:00.460
has a message for you when you're not too busy.

309
00:22:01.900 --> 00:22:06.040
And that's why we call it a callback function and a callback queue.

310
00:22:06.070 --> 00:22:10.090
We're calling back to let them know that, hey, there's some stuff waiting for you.

311
00:22:10.840 --> 00:22:16.990
Now we see over here that we have Dom, Ajax and Timeout and there's a few other things, but you also

312
00:22:16.990 --> 00:22:20.320
see in the callback queue that we have on click on load on done.

313
00:22:20.470 --> 00:22:23.020
Do you remember the event listeners?

314
00:22:23.410 --> 00:22:28.090
Well, with an event listener we had something like an element.

315
00:22:28.980 --> 00:22:32.280
And we added event listener.

316
00:22:33.120 --> 00:22:40.470
And in this scenario we could say, listen for a click and it will have a function that perhaps just

317
00:22:40.470 --> 00:22:42.000
console.log.

318
00:22:42.750 --> 00:22:43.350
Click.

319
00:22:44.340 --> 00:22:50.790
Well, similar to an asynchronous way of programming, we've created this click function and now we're

320
00:22:50.790 --> 00:22:51.990
just listening to it.

321
00:22:51.990 --> 00:22:55.230
And every time a click happens on the web page.

322
00:22:55.230 --> 00:23:00.930
So on the DOM, well, we run the callback function.

323
00:23:01.990 --> 00:23:04.660
Which console logs click.

324
00:23:05.410 --> 00:23:06.010
All right.

325
00:23:06.370 --> 00:23:11.280
So to finish things up, when is asynchronous happening?

326
00:23:11.290 --> 00:23:17.560
It happens a lot when you try and talk between machines, like speaking to a database, making network

327
00:23:17.560 --> 00:23:20.740
requests, image processing, reading files.

328
00:23:20.740 --> 00:23:23.260
And don't worry, we'll go through this in future videos.

329
00:23:23.500 --> 00:23:31.150
But to recap what we just learned, JavaScript is a single threaded language that can be non blocking.

330
00:23:31.390 --> 00:23:39.280
It has one call stack and it does one thing at a time in order to not block the single thread.

331
00:23:39.280 --> 00:23:48.130
It can be asynchronous with callback functions and these callback functions gets run in the background

332
00:23:48.400 --> 00:23:52.750
through the callback queue and then the event loop to bring it back into the call stack.

333
00:23:53.600 --> 00:24:01.100
So next time you get asked what is the difference between asynchronous or a synchronous program, or

334
00:24:01.100 --> 00:24:02.630
How does JavaScript work?

335
00:24:02.660 --> 00:24:08.270
You should have a little bit more confidence to answer that question, and I hope that this was helpful.

336
00:24:09.200 --> 00:24:10.460
I'll see in the next video.

337
00:24:10.790 --> 00:24:11.450
Bye bye.

