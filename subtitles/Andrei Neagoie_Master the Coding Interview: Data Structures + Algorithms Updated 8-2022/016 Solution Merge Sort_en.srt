1
00:00:01,450 --> 00:00:02,790
How was Mercer Short?

2
00:00:02,830 --> 00:00:04,870
Pretty difficult, right?

3
00:00:05,170 --> 00:00:07,480
I have the answer for you here.

4
00:00:07,480 --> 00:00:15,520
And I'm not going to coat along because, well, this is one of those pieces of code that me just writing

5
00:00:15,520 --> 00:00:20,040
in and typing it in a 30 minute video isn't really going to help your understanding.

6
00:00:20,050 --> 00:00:24,280
I recommend that you go through this code line by line to fully understand it.

7
00:00:25,020 --> 00:00:33,540
But if we take a look here, all we're doing in the first pass in the merge sort function is we're going

8
00:00:33,540 --> 00:00:40,860
to get the length of the array, find the middle of the array, and then we're going to slice the array

9
00:00:40,860 --> 00:00:44,910
into the left hand side and the right hand side.

10
00:00:46,440 --> 00:00:49,050
So that if I console.log here.

11
00:00:49,860 --> 00:00:51,030
And I click Run.

12
00:00:51,420 --> 00:00:53,520
We see that the first time around.

13
00:00:53,940 --> 00:01:01,980
We're just splitting the item right down the middle where we have 99 all the way up to one in the left

14
00:01:01,980 --> 00:01:05,930
hand side and 5 to 0 in the right hand side.

15
00:01:07,080 --> 00:01:08,760
In the next pass.

16
00:01:09,800 --> 00:01:13,580
Because remember, we're doing recursion and this is being called again.

17
00:01:14,430 --> 00:01:24,690
When we get to here, we're now dividing up 99 and 44 and 6 to 1 into its own past, and then 99 and

18
00:01:24,690 --> 00:01:31,140
44 into individual items, six and two, one into left and right until we have.

19
00:01:31,970 --> 00:01:33,710
Everything into one item.

20
00:01:35,200 --> 00:01:38,350
And then we start splitting off this inside as well.

21
00:01:39,040 --> 00:01:41,200
Now what about the merge function?

22
00:01:43,980 --> 00:01:46,890
The merge function is going to be a little bit hard to read.

23
00:01:47,460 --> 00:01:55,050
But if we take a look here, all we're saying is we have a results array that we're going to fill everything

24
00:01:55,050 --> 00:01:58,680
with and we're going to have a left index and a right index.

25
00:01:58,890 --> 00:02:03,060
And we're going to compare here is the left index.

26
00:02:04,720 --> 00:02:14,620
Less than the length of the left array and the right index, less than their right array length, which

27
00:02:14,620 --> 00:02:18,280
may make sure that we have items in our array.

28
00:02:18,610 --> 00:02:24,460
If that's the case, then let's compare our left item to the right item.

29
00:02:25,450 --> 00:02:28,690
And push into a new ray into our results.

30
00:02:28,840 --> 00:02:36,400
Ray The item that is less in this case, it will be the left hand item and then we increment.

31
00:02:36,850 --> 00:02:44,020
Otherwise, if the left item is higher than the right item, we do the opposite and the right item goes

32
00:02:44,020 --> 00:02:45,070
into our results.

33
00:02:47,460 --> 00:02:52,260
Remember this merge function is doing what we saw in the animation.

34
00:02:53,860 --> 00:03:01,060
We're splitting the function down in the first part of the function and then in the merge we're going

35
00:03:01,060 --> 00:03:03,070
to take the left and right.

36
00:03:04,070 --> 00:03:07,700
Compare it and place it into the results array.

37
00:03:08,430 --> 00:03:09,900
And then go to the next.

38
00:03:11,200 --> 00:03:16,330
And keep doing this over and over and creating our results array.

39
00:03:17,450 --> 00:03:21,590
If I console.log here left and right and I click run.

40
00:03:22,850 --> 00:03:24,830
We see exactly what we're doing.

41
00:03:25,010 --> 00:03:30,680
We have 99 and 44 and then two and one.

42
00:03:31,190 --> 00:03:39,830
So on the left hand side and right hand side, 99 and 44 get compared becomes 44 and 99.

43
00:03:41,090 --> 00:03:49,790
And then we compare two and one, which becomes one and two, then six and one and two, which becomes

44
00:03:49,790 --> 00:03:50,990
1 to 6.

45
00:03:50,990 --> 00:03:58,430
And we keep going, keep going, keep going until the very last step where we have two lists here and

46
00:03:58,430 --> 00:04:02,060
we compare them zero and one, we place zero.

47
00:04:02,060 --> 00:04:03,170
And the results are a.

48
00:04:03,900 --> 00:04:07,710
And then we place one, two and just keeps going and keeps going.

49
00:04:07,740 --> 00:04:09,840
Exactly like our animation.

50
00:04:10,470 --> 00:04:15,450
Now, I encourage you to play around with this and perhaps go step by step.

51
00:04:16,320 --> 00:04:19,350
It is a really hard algorithm to get.

52
00:04:19,380 --> 00:04:23,370
The bad news is that the next algorithm is even more complicated.

53
00:04:24,140 --> 00:04:29,720
But luckily for you, as I said, you won't have to ever do this in an interview.

54
00:04:29,900 --> 00:04:38,330
You just need to know that Merge sort is a great algorithm to use because we get o of n log n.

55
00:04:38,330 --> 00:04:39,110
Big o.

56
00:04:40,810 --> 00:04:43,450
Let's take a look at another sorting algorithm.

