WEBVTT
1
00:00:00.790 --> 00:00:05.750
Hello and welcome to the next part of the algorithm section.

2
00:00:05.770 --> 00:00:11.530
Yes, I'm still excited despite the next topic, which is probably my least favorite.

3
00:00:11.680 --> 00:00:17.860
You see, in the past when I learned about sorting, it involved a lot of math, a lot of different

4
00:00:17.860 --> 00:00:26.020
algorithms, and I just never really enjoyed it because I didn't understand why we needed to know sorting.

5
00:00:26.020 --> 00:00:31.840
I mean, you just have a sort function usually in a programming language and that's it, right?

6
00:00:32.259 --> 00:00:34.900
I just never understood the point of it.

7
00:00:35.080 --> 00:00:37.150
And you're probably thinking the same thing.

8
00:00:37.720 --> 00:00:39.940
All right, Andre, there's nothing to learn here.

9
00:00:39.940 --> 00:00:41.710
I'm going to skip over these sections.

10
00:00:42.670 --> 00:00:43.480
Great lesson.

11
00:00:43.510 --> 00:00:44.360
See you later.

12
00:00:44.380 --> 00:00:45.040
Right.

13
00:00:45.550 --> 00:00:47.560
Well, not really.

14
00:00:48.010 --> 00:00:49.120
Let me explain.

15
00:00:49.480 --> 00:00:53.560
In an interview, sorting is really important.

16
00:00:53.650 --> 00:00:59.920
You hear questions like take an array of numbers and sort them, or the interviewer wants you to do

17
00:00:59.920 --> 00:01:04.900
something to some input and they tell you that this input is sorted.

18
00:01:05.440 --> 00:01:09.180
And you're wondering, why did they just tell us that?

19
00:01:09.190 --> 00:01:11.140
Why does it matter if it's sorted or not?

20
00:01:11.500 --> 00:01:14.830
And why do companies care so much about sorting?

21
00:01:14.830 --> 00:01:19.750
If I can just use the built in sort method in my own language.

22
00:01:20.930 --> 00:01:22.730
Well, here's the thing.

23
00:01:23.240 --> 00:01:28.070
Sorting is not a big deal when it comes to small input data.

24
00:01:28.580 --> 00:01:29.430
You'd be right.

25
00:01:29.450 --> 00:01:31.220
You can just do something like this.

26
00:01:31.610 --> 00:01:34.940
We'd have an array of letters.

27
00:01:36.580 --> 00:01:40.540
And this array simply has a.

28
00:01:43.270 --> 00:01:46.290
DX say it z.

29
00:01:46.300 --> 00:01:47.410
Let's add a few more.

30
00:01:47.440 --> 00:01:48.070
E.

31
00:01:49.560 --> 00:01:50.190
R.

32
00:01:50.190 --> 00:01:52.350
And finally B.

33
00:01:53.640 --> 00:02:00.240
And if somebody asks us to sort this, well, we can just use something like a sword method that comes

34
00:02:00.240 --> 00:02:01.650
with most languages.

35
00:02:02.490 --> 00:02:08.759
And if I run this, look that nice and easy, just sorted everything.

36
00:02:08.759 --> 00:02:10.289
I'm a genius, right?

37
00:02:11.340 --> 00:02:14.850
Why would companies ever ask such a simple question of us?

38
00:02:15.000 --> 00:02:19.980
You see, the problem is when inputs get larger and larger.

39
00:02:20.810 --> 00:02:22.870
Kind of like when we talked about Big O.

40
00:02:22.910 --> 00:02:25.370
We don't care about small inputs.

41
00:02:26.070 --> 00:02:29.880
That's easy to do, especially with our modern fast computers.

42
00:02:30.390 --> 00:02:37.290
It starts costing companies a lot of money when we have to perform operations on larger and larger data

43
00:02:37.290 --> 00:02:37.860
sets.

44
00:02:38.530 --> 00:02:43.000
That's when things become a little bit crazy and expensive.

45
00:02:43.330 --> 00:02:47.620
For example, Google has a ton of websites that are indexed.

46
00:02:48.270 --> 00:02:55.980
What if they need to sort those websites in a way, perhaps sorting a news article based on the time

47
00:02:55.980 --> 00:02:57.060
that it was released.

48
00:02:57.360 --> 00:03:00.630
And because we're talking about Google here, we're not talking about ten articles.

49
00:03:00.630 --> 00:03:05.250
We're talking about thousands, millions and more articles sorted based on date.

50
00:03:05.610 --> 00:03:07.350
What about Amazon?

51
00:03:08.310 --> 00:03:10.290
Amazon is all about sorting.

52
00:03:10.290 --> 00:03:16.980
They sort their products based on category, based on price, based on rating, and they have millions

53
00:03:16.980 --> 00:03:17.760
of products.

54
00:03:19.000 --> 00:03:20.080
What about Apple?

55
00:03:20.110 --> 00:03:25.960
Well, Apple has the Apple store and they list all their apps in some form.

56
00:03:25.960 --> 00:03:27.370
More of a sorted order.

57
00:03:27.640 --> 00:03:30.790
Podcasts in a sorted order.

58
00:03:31.120 --> 00:03:32.320
What about Microsoft?

59
00:03:32.350 --> 00:03:33.400
Well, Microsoft.

60
00:03:33.430 --> 00:03:39.190
They need to sort all their logs of, let's say, their their data centers around the world so that

61
00:03:39.190 --> 00:03:42.520
if an incident happens, they know where it's coming from.

62
00:03:43.000 --> 00:03:44.320
And then Netflix.

63
00:03:44.620 --> 00:03:49.340
Well, they need to sort their shows, their movies, their TV shows somehow.

64
00:03:49.360 --> 00:03:49.960
Right.

65
00:03:51.080 --> 00:03:57.710
And they can't usually just use a built in sword method that comes with the language, and they usually

66
00:03:57.710 --> 00:04:05.510
need custom sorted methods based on the data so that they can lower their costs and lower the operations

67
00:04:05.510 --> 00:04:07.490
that their computers need to do.

68
00:04:08.130 --> 00:04:11.100
Most places sought their data or pre process it.

69
00:04:11.310 --> 00:04:18.540
And all these companies, including small ones, usually sort data to make sure that it's meaningful.

70
00:04:18.540 --> 00:04:23.190
If it's random data that is not sorted, it's really, really hard to access.

71
00:04:23.190 --> 00:04:26.700
So most of the time we sort data or pre process it.

72
00:04:27.460 --> 00:04:30.070
Now, the examples that I just talked about.

73
00:04:30.800 --> 00:04:35.480
They are a little bit silly, but it does prove my point for these companies.

74
00:04:35.480 --> 00:04:41.150
If they do something wrong or they do it in an inefficient way, it means losing a lot of money.

75
00:04:41.150 --> 00:04:43.640
That's why they asked these questions in an interview.

76
00:04:43.670 --> 00:04:49.100
They want to make sure you understand how important the topic is and that you can make the right decision

77
00:04:49.100 --> 00:04:50.420
as your employee.

78
00:04:50.450 --> 00:04:54.500
What sorting algorithm should you use based on the problem?

79
00:04:55.150 --> 00:04:56.940
So that's the goal of this section.

80
00:04:56.950 --> 00:05:01.570
I'm going to show you how to implement sorting on your own if you want.

81
00:05:01.780 --> 00:05:07.930
But most importantly, we're going to talk about the different sorting algorithms available to you and

82
00:05:07.930 --> 00:05:10.390
how you can make the right decisions for your company.

83
00:05:10.690 --> 00:05:13.090
And obviously to a coding interview.

84
00:05:13.960 --> 00:05:21.640
Now, the reason that most sorting algorithm lessons get really boring is that there's so many sorting

85
00:05:21.640 --> 00:05:22.450
algorithms.

86
00:05:24.120 --> 00:05:27.150
If we search sorting algorithms on Wikipedia.

87
00:05:28.860 --> 00:05:37.200
You get a pretty large list and implementing these sorts one by one yourself takes a lot of time, but

88
00:05:37.200 --> 00:05:43.860
most likely you will never implement your own sorting algorithm in your life except for maybe a simple

89
00:05:43.860 --> 00:05:44.970
one in an interview.

90
00:05:45.150 --> 00:05:51.810
Because most of these, especially the advanced ones that are really fast, are done by academics that

91
00:05:51.810 --> 00:05:56.580
spend years figuring out what the best, most optimal way of sorting is.

92
00:05:56.730 --> 00:06:01.440
And interviewers don't expect you to be able to implement every single sorting algorithm.

93
00:06:02.540 --> 00:06:09.470
My goal in this section is to teach you the high level what you need to know to become a better engineer

94
00:06:09.470 --> 00:06:11.240
and also ace the coding interview.

95
00:06:11.420 --> 00:06:16.880
I'll show you how to implement some of the poor sorting algorithms, but more importantly, we're going

96
00:06:16.880 --> 00:06:23.540
to talk about the tradeoffs between them so that you're able to talk about them intelligently during

97
00:06:23.540 --> 00:06:24.200
an interview.

98
00:06:24.930 --> 00:06:32.370
For the next few videos, we're going to talk about these sorting algorithms and also a couple of bonus

99
00:06:32.370 --> 00:06:33.600
ones towards the end.

100
00:06:33.840 --> 00:06:40.860
But the key thing to remember is that as more and more data is handled by our computers, which is a

101
00:06:40.860 --> 00:06:46.770
big trend in computing, sorting and searching are two of the biggest computer science problems in the

102
00:06:46.770 --> 00:06:48.150
software world.

103
00:06:48.660 --> 00:06:54.810
Searching we're going to get into in the next section, but sorting is something we'll hopefully master

104
00:06:55.200 --> 00:06:56.610
at the end of these videos.

105
00:06:57.030 --> 00:07:00.840
So let's go learn how to make good decisions when it comes to sorting.

