WEBVTT
1
00:00:00.970 --> 00:00:01.870
Welcome back.

2
00:00:02.080 --> 00:00:05.290
How much did you hate me after doing this challenge?

3
00:00:05.830 --> 00:00:12.910
Now, this was specifically supposed to be hard and difficult and frustrating, and most likely you're

4
00:00:12.910 --> 00:00:14.890
not going to get right the first time around.

5
00:00:15.040 --> 00:00:18.040
This was done on purpose to illustrate a point.

6
00:00:18.070 --> 00:00:24.370
What we're actually doing here, well, you won't be asked to do in an interview, but I wanted to show

7
00:00:24.370 --> 00:00:30.430
you how to think about things, because later on I'll show you how it's actually a lot simpler than

8
00:00:30.430 --> 00:00:36.460
thinking about each individual step in a function to calculate things.

9
00:00:36.940 --> 00:00:42.760
There's not much math involved, and this is as mathy as we're going to get in this course.

10
00:00:42.760 --> 00:00:48.730
But again, I just want to show you the nitty gritty details so that you can think about it and have

11
00:00:48.730 --> 00:00:53.770
a nice foundation so that moving forward, we can simplify things a lot better.

12
00:00:54.720 --> 00:00:56.910
Now let's look at this function.

13
00:00:57.000 --> 00:01:01.410
It's the fun challenge function that takes some sort of an input.

14
00:01:01.620 --> 00:01:07.680
The very first thing is within this function, when we run the fun challenge, let's just say we'll

15
00:01:07.680 --> 00:01:15.100
have fun challenge and we run this function and the input doesn't really matter.

16
00:01:15.120 --> 00:01:16.800
It could be an array.

17
00:01:16.800 --> 00:01:18.490
It could be an object.

18
00:01:18.510 --> 00:01:20.570
For now, let's just keep things simple.

19
00:01:20.580 --> 00:01:21.990
Say it's an array of five.

20
00:01:22.650 --> 00:01:28.320
Now, when we run this function, the first thing we're going to do is an assignment.

21
00:01:28.440 --> 00:01:36.210
We're going to assign variable A as ten now based on convention.

22
00:01:36.210 --> 00:01:42.630
And this is why you won't encounter this in an interview, because a lot of people interpret this differently.

23
00:01:42.630 --> 00:01:46.350
Some people say that assignment you shouldn't count towards bingo.

24
00:01:46.440 --> 00:01:48.300
And some people say that you should.

25
00:01:48.660 --> 00:01:53.580
In our case, just to simplify things, let's count every single step and what the function is doing.

26
00:01:53.880 --> 00:02:03.150
Let a equals ten is just zero of one because this is only running once when we run font challenge.

27
00:02:03.150 --> 00:02:03.700
That's it.

28
00:02:03.720 --> 00:02:06.150
It doesn't matter how big the input is.

29
00:02:06.150 --> 00:02:10.259
This just runs once and then 50 plus three.

30
00:02:10.560 --> 00:02:17.070
We're reassigning a this once again is over one.

31
00:02:18.870 --> 00:02:20.580
And then we get into a loop.

32
00:02:21.590 --> 00:02:29.150
We know that with the loop it looks like we're looking at the length of the input and looping over depending

33
00:02:29.150 --> 00:02:30.770
on whatever the input is.

34
00:02:31.190 --> 00:02:35.270
In our case, this is going to be an O of MN.

35
00:02:35.570 --> 00:02:40.790
Let's add that comment over here and this MN is the input.

36
00:02:40.790 --> 00:02:43.030
Remember that I can change this to input.

37
00:02:43.040 --> 00:02:44.210
I can change this to X.

38
00:02:44.210 --> 00:02:45.400
It doesn't really matter.

39
00:02:45.410 --> 00:02:47.600
It just reflects how big the input is.

40
00:02:47.600 --> 00:02:49.820
That's how long this for loops going to take.

41
00:02:50.030 --> 00:02:54.860
And we know this by now that loops are linear time.

42
00:02:56.280 --> 00:02:58.890
And then within here another function.

43
00:02:58.890 --> 00:03:04.560
We don't know what this function is, but it's calling to another function outside of the font challenge

44
00:03:04.560 --> 00:03:05.340
function.

45
00:03:05.610 --> 00:03:08.620
This is also being called how many times?

46
00:03:08.640 --> 00:03:12.030
Well, it depends on how big our input is.

47
00:03:12.090 --> 00:03:14.790
So once again, it's ov an.

48
00:03:15.970 --> 00:03:20.320
What about this let variable stranger equal to true?

49
00:03:21.530 --> 00:03:29.570
Again, another random assignment here, but this runs as many times as this loop happens.

50
00:03:29.590 --> 00:03:32.220
If input was five, this will run five times.

51
00:03:32.230 --> 00:03:35.350
So again, this will be o of n.

52
00:03:36.670 --> 00:03:42.940
And then over here we have a plus plus, which in JavaScript simply means a plus one.

53
00:03:43.660 --> 00:03:48.040
So we're just incrementing the whatever the number A is at this time.

54
00:03:48.040 --> 00:03:50.710
So 53 will.

55
00:03:51.560 --> 00:03:53.030
Become 54.

56
00:03:53.060 --> 00:03:58.280
And then as we loop through it, it'll keep increasing by 154, 55, 56.

57
00:03:58.790 --> 00:04:01.920
This once again runs o of n times.

58
00:04:01.940 --> 00:04:03.920
It depends how many times they runs.

59
00:04:04.790 --> 00:04:07.430
By the input because again, we're looping through it.

60
00:04:08.170 --> 00:04:13.720
And then finally, another thing that some people don't count, but just to keep it consistent, every

61
00:04:13.720 --> 00:04:21.130
single step that we do return a this runs just once every time fun challenge gets run.

62
00:04:21.279 --> 00:04:24.310
The return statement only runs once.

63
00:04:25.610 --> 00:04:26.150
All right.

64
00:04:26.150 --> 00:04:32.030
So we have all these big old notations and now we're starting to think about how a function runs and

65
00:04:32.030 --> 00:04:34.010
how efficient a function is.

66
00:04:34.250 --> 00:04:41.630
If we actually calculate all of these, if we total all these up, we see that we have one, two, three.

67
00:04:41.630 --> 00:04:43.940
So we have three steps.

68
00:04:45.140 --> 00:04:46.280
Plus.

69
00:04:48.050 --> 00:04:50.950
Of one of an oven oven.

70
00:04:50.960 --> 00:04:52.280
So that means we have.

71
00:04:52.520 --> 00:04:54.500
And plus.

72
00:04:54.500 --> 00:04:56.990
And plus and.

73
00:04:58.870 --> 00:05:07.330
So that means we are running the calculation and plus and plus and plus n, which turns out to be four

74
00:05:07.330 --> 00:05:07.780
n.

75
00:05:08.230 --> 00:05:14.080
So three plus four n is our big O notation.

76
00:05:15.870 --> 00:05:16.860
There it is.

77
00:05:16.890 --> 00:05:23.910
Like I said before, when it comes to Big O, don't get too hung up on did I get this right?

78
00:05:23.910 --> 00:05:30.390
Because in an interview you're not going to need to know this, but you are able to now think about

79
00:05:30.390 --> 00:05:34.770
how a function runs more deeply than just simply writing the code.

80
00:05:35.340 --> 00:05:41.670
As we progress through the videos, you're going to find out that this actually, at the end of the

81
00:05:41.670 --> 00:05:46.320
day, gets simplified to just o of an.

82
00:05:47.200 --> 00:05:49.540
And we're going to go through that and why that is.

