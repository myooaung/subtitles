WEBVTT
1
00:00:00.870 --> 00:00:01.800
Welcome back.

2
00:00:02.310 --> 00:00:07.340
Let's continue our discussion with the most common tree data structure.

3
00:00:07.350 --> 00:00:14.970
That is the binary search tree, which is a subset of binary tree, which we talked about.

4
00:00:16.040 --> 00:00:18.470
What is a binary search tree?

5
00:00:22.060 --> 00:00:28.450
A binary search tree are really, really good, as the name suggests at searching.

6
00:00:29.620 --> 00:00:31.750
They're great for comparing things.

7
00:00:31.900 --> 00:00:37.300
Now, why would this be better than, let's say, a hash table where we can just give it a key and get

8
00:00:37.300 --> 00:00:38.560
the item right away?

9
00:00:38.920 --> 00:00:43.870
Well, this data structure preserves relationships.

10
00:00:44.740 --> 00:00:45.410
Just like you.

11
00:00:45.570 --> 00:00:52.480
I want your folders on your computer to be in a hash table data structure because there is no sort of

12
00:00:52.480 --> 00:00:53.470
relationship.

13
00:00:53.500 --> 00:01:00.580
Instead, you want your folders to have relationships, to have a parent folder and a sub folder and

14
00:01:00.630 --> 00:01:01.870
a sub folder.

15
00:01:02.860 --> 00:01:07.150
A thing like binary search tree allows us to preserve these relationships.

16
00:01:08.370 --> 00:01:11.700
When it comes to binary search trees, these are the rules.

17
00:01:12.330 --> 00:01:13.050
One.

18
00:01:13.470 --> 00:01:23.160
All child nodes in the tree to the right of the root node must be greater than the current node.

19
00:01:23.550 --> 00:01:29.710
That means if I keep going to the right, the number or the value of the node constantly increases.

20
00:01:29.730 --> 00:01:33.390
You see over here I go from 101, 105, 144.

21
00:01:33.420 --> 00:01:39.280
If I keep going to the right, let's say here, 33 to 37, that is increasing.

22
00:01:39.300 --> 00:01:45.410
If I go to the left, 101 33 nine, that's always decreasing.

23
00:01:45.420 --> 00:01:46.380
Same with here.

24
00:01:47.160 --> 00:01:48.900
105 to 54.

25
00:01:49.080 --> 00:01:51.330
If I go to the left, it decreases.

26
00:01:51.330 --> 00:01:53.190
To the right, it increases.

27
00:01:54.460 --> 00:02:01.480
And then the second rule is that a node can only have up to two children because it's a binary tree.

28
00:02:02.110 --> 00:02:09.310
The advantage of a binary search tree is that, well, it should be obvious with the name, right?

29
00:02:09.490 --> 00:02:13.480
Searching and lookup is very easy to find what you're looking for.

30
00:02:13.510 --> 00:02:21.730
Because if I'm looking for, let's say, number 37, I can start at 101 and say, is 37 less than one

31
00:02:21.760 --> 00:02:22.120
on one?

32
00:02:22.120 --> 00:02:22.540
Yes.

33
00:02:22.780 --> 00:02:23.890
Then go to the left.

34
00:02:23.980 --> 00:02:27.490
Is 33 less than 37?

35
00:02:27.490 --> 00:02:27.980
No.

36
00:02:28.000 --> 00:02:30.660
Then go to the right and I find 37.

37
00:02:30.670 --> 00:02:35.890
I don't have to iterate in a linear fashion through each node.

38
00:02:36.550 --> 00:02:38.940
And that is what lookup means.

39
00:02:38.980 --> 00:02:46.570
Look up simply means that I can search for an item a lot faster than, let's say, an array where I

40
00:02:46.570 --> 00:02:49.150
have to iterate and loop through every single item.

41
00:02:49.450 --> 00:02:53.620
But what about insert and delete in a hash table?

42
00:02:53.620 --> 00:03:00.370
I can do insert and delete really fast at oh one or constant time, but with a binary search tree it

43
00:03:00.370 --> 00:03:03.130
looks like I can only do o log n.

44
00:03:04.260 --> 00:03:06.340
And that should be obvious, right?

45
00:03:06.360 --> 00:03:13.230
Because in order for us to insert or delete something in a binary search tree, we need to figure out

46
00:03:13.230 --> 00:03:19.260
where to insert the item or where the item is before we delete it.

47
00:03:20.270 --> 00:03:26.860
For example, with 105, let's say that we want to delete 105.

48
00:03:26.870 --> 00:03:35.210
Well, we have to first from the root node get to 105 and then we have to decide which node is going

49
00:03:35.210 --> 00:03:36.320
to take its place.

50
00:03:36.710 --> 00:03:43.610
In this case, because 54 is less than 144, 144 is going to come up over here.

51
00:03:44.290 --> 00:03:50.590
But as you can imagine, this operation, although seems simple right now, if we had a lot of children

52
00:03:50.590 --> 00:03:59.170
and a lot of nested nodes, a lot of reordering needs to happen and shift our nodes around.

53
00:03:59.440 --> 00:04:03.550
And don't worry, we're actually going to code this so you understand this just like we have in previous

54
00:04:03.550 --> 00:04:04.540
data structures.

55
00:04:04.720 --> 00:04:11.470
But I want to demonstrate instead of me just using my cursor here, a nifty little tool to visualize

56
00:04:11.470 --> 00:04:15.520
how binary search trees work and how their operations are.

57
00:04:15.520 --> 00:04:17.010
All log of in.

58
00:04:18.420 --> 00:04:24.720
We're going to use visual go again and I'll link this and I highly recommend that you all play around

59
00:04:24.720 --> 00:04:26.070
with binary search trees.

60
00:04:26.250 --> 00:04:28.650
But let's do a couple of operations here.

61
00:04:29.070 --> 00:04:32.970
See that it generated a random binary search tree for me.

62
00:04:33.060 --> 00:04:40.710
Let's say I wanted to do an insert and I want to insert, let's say the number one.

63
00:04:40.710 --> 00:04:47.520
If I click go, it's going to traverse, figure out where it wants to insert and it's going to insert

64
00:04:47.520 --> 00:04:48.030
one.

65
00:04:48.760 --> 00:04:53.410
What if I want to insert perhaps number 44 this time around?

66
00:04:54.560 --> 00:04:55.550
If I had go.

67
00:04:56.750 --> 00:04:59.660
It traverses figures out where 44 should go.

68
00:05:01.210 --> 00:05:03.280
And places it down here.

69
00:05:03.280 --> 00:05:10.600
So we're always traversing and figuring out using oh login where we should place the item.

70
00:05:11.430 --> 00:05:12.750
What about removing?

71
00:05:13.140 --> 00:05:14.330
Let's add one more.

72
00:05:14.340 --> 00:05:17.490
I'm going to insert 51 this time.

73
00:05:21.180 --> 00:05:24.120
So that it places it right over here.

74
00:05:24.360 --> 00:05:25.210
Perfect.

75
00:05:25.230 --> 00:05:28.470
Now, let's say we want to delete 50 now.

76
00:05:28.840 --> 00:05:29.280
Five.

77
00:05:29.280 --> 00:05:30.720
Remove 50.

78
00:05:33.240 --> 00:05:34.200
I hate go.

79
00:05:37.170 --> 00:05:44.160
I find 50, remove it and then I have to replace with 51 and go up.

80
00:05:44.430 --> 00:05:50.910
So there's a bit of a tough little logic happening there that we're going to have to incorporate and

81
00:05:50.910 --> 00:05:51.960
we're going to get to that.

82
00:05:52.530 --> 00:05:58.590
But for now, as I end this video, I recommend that you go to visual, go and play around with binary

83
00:05:58.590 --> 00:06:02.310
search three so that you get accustomed to it.

84
00:06:02.310 --> 00:06:08.490
And as you play with it, see if you notice a problem that we might encounter with Binary Search three

85
00:06:08.490 --> 00:06:11.250
because we're going to discuss it in the next video.

