WEBVTT
1
00:00:00.610 --> 00:00:01.569
Welcome back.

2
00:00:01.600 --> 00:00:04.120
It's time to create our own graph.

3
00:00:04.390 --> 00:00:07.840
And I've created the template here for you.

4
00:00:07.870 --> 00:00:14.200
You can also create your own if you want, but I've only included things that let you focus on the critical

5
00:00:14.200 --> 00:00:14.650
part.

6
00:00:15.040 --> 00:00:19.330
We have a graph class and a few methods that we're going to have to add.

7
00:00:19.510 --> 00:00:27.670
Now we're going to recreate a graph right here, a undirected, unweighted graph.

8
00:00:28.450 --> 00:00:32.020
Like this using adjacency list.

9
00:00:32.020 --> 00:00:37.060
And for the adjacency list, we're going to use a hash table.

10
00:00:37.330 --> 00:00:39.880
So how are we going to go about doing this?

11
00:00:40.180 --> 00:00:40.930
Well.

12
00:00:42.010 --> 00:00:44.080
I have a few things that I've set up for you.

13
00:00:44.720 --> 00:00:50.990
One is that in the constructor we have simply number of nodes that will have to increment just to keep

14
00:00:50.990 --> 00:00:56.420
track of how many nodes or vertex is or vertices we have in our graph.

15
00:00:57.260 --> 00:01:02.360
And also I've created the adjacent list for you, which is an object.

16
00:01:03.280 --> 00:01:10.030
And as you do this exercise, you're going to realize why we want to use, let's say, an object versus

17
00:01:10.030 --> 00:01:10.780
an array.

18
00:01:10.810 --> 00:01:18.160
Because if we start removing things from the graph or placing things in the graph, that's out of order.

19
00:01:18.160 --> 00:01:19.890
It's going to cost us a lot.

20
00:01:19.900 --> 00:01:23.410
Remember, a raise on shifting and shifting is expensive.

21
00:01:23.740 --> 00:01:28.030
With objects, we can quickly find items and see their connections.

22
00:01:29.080 --> 00:01:36.400
So that ideally in this case where we have three or let's look at zero, in this case we'll have zero

23
00:01:36.430 --> 00:01:41.560
is going to be connected to an array of its connections, which will be.

24
00:01:42.310 --> 00:01:43.530
One and two.

25
00:01:43.540 --> 00:01:46.360
So we'll have something like this.

26
00:01:48.720 --> 00:01:55.830
Your task is to add a new method called Add Vertex that adds a new node or a vertex.

27
00:01:55.860 --> 00:02:01.050
The naming here kind of goes back and forth and then also add edge.

28
00:02:01.140 --> 00:02:04.110
That is to add a connection between Node one and No.

29
00:02:04.110 --> 00:02:04.490
Two.

30
00:02:04.500 --> 00:02:08.669
And keep in mind that this is un directed.

31
00:02:08.669 --> 00:02:09.539
If I could spell.

32
00:02:09.990 --> 00:02:12.660
It's an undirected graph, so both node one and No.

33
00:02:12.660 --> 00:02:14.310
Two point to each other.

34
00:02:14.820 --> 00:02:20.670
And if you scroll down here, I've actually created the calls, the function calls that we're going

35
00:02:20.670 --> 00:02:21.150
to do.

36
00:02:21.180 --> 00:02:27.840
We've created the graph, and then I'm creating zero all the way through six, just like we have on

37
00:02:27.840 --> 00:02:28.680
the graph here.

38
00:02:29.100 --> 00:02:32.070
And then we're going to add the edges.

39
00:02:32.070 --> 00:02:34.740
That is the connection between everything.

40
00:02:34.800 --> 00:02:37.650
One is connected, zero zero is connected to two.

41
00:02:37.650 --> 00:02:39.450
Six is connected to five.

42
00:02:41.210 --> 00:02:43.340
Simply just saying this.

43
00:02:43.550 --> 00:02:45.080
I'm never repeating myself.

44
00:02:45.080 --> 00:02:49.480
That means I'm never saying add three and one and then saying Add edge one and three.

45
00:02:49.490 --> 00:02:51.020
I only say this once.

46
00:02:51.870 --> 00:02:52.950
And that's the key.

47
00:02:53.580 --> 00:02:59.610
And also the order doesn't matter if I switch the order of these calls around, it should still give

48
00:02:59.610 --> 00:03:01.080
me this graph.

49
00:03:02.040 --> 00:03:02.460
All right.

50
00:03:02.460 --> 00:03:08.250
I know you're excited to get coding, but the final thing, and this is only optional if you want to

51
00:03:08.250 --> 00:03:10.440
do this yourself, you can also code it yourself.

52
00:03:10.440 --> 00:03:14.370
But it's not really that important for this video.

53
00:03:14.700 --> 00:03:18.750
I've created a small helper function called Show Connections.

54
00:03:19.500 --> 00:03:23.370
And you can look through this function if you want.

55
00:03:24.230 --> 00:03:26.390
It's not really important to the core of the course.

56
00:03:26.390 --> 00:03:28.570
But I've made this so you can check your work.

57
00:03:28.580 --> 00:03:30.950
Because if I run this.

58
00:03:31.920 --> 00:03:35.580
Using at the end my graph show connections.

59
00:03:35.610 --> 00:03:39.030
It's going to print out the answer like this.

60
00:03:40.660 --> 00:03:44.460
And it's going to show all the connections of the graphs that you've created.

61
00:03:44.470 --> 00:03:50.410
And this way you can check that these connections, that is Node four, is connected to three, two

62
00:03:50.410 --> 00:03:51.070
and five.

63
00:03:51.880 --> 00:03:55.960
Node four is connected to three, two and five.

64
00:03:55.990 --> 00:03:57.730
Just like we have here.

65
00:03:59.280 --> 00:04:01.110
All right, that's enough for me.

66
00:04:01.140 --> 00:04:04.650
Good luck in this exercise, and I'll see you in the solution video.

67
00:04:04.920 --> 00:04:05.550
Bye bye.

