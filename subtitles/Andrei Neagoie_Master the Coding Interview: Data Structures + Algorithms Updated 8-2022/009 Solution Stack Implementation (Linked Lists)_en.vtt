WEBVTT
1
00:00:00.820 --> 00:00:01.720
Welcome back.

2
00:00:01.810 --> 00:00:06.790
Let's have a look at how we would want to solve this question.

3
00:00:06.790 --> 00:00:13.090
That is, how do we create a stack data structure that has peak push and pop?

4
00:00:14.600 --> 00:00:17.750
Now peak should be fairly easy, right?

5
00:00:17.780 --> 00:00:22.160
We just want to see the very top item on the stack.

6
00:00:22.370 --> 00:00:29.780
So I can just say Peak is going to return this dot top.

7
00:00:30.320 --> 00:00:30.940
That's it.

8
00:00:30.950 --> 00:00:37.220
Nice and simple so that if we run my stack dot peak.

9
00:00:38.270 --> 00:00:39.970
It's going to return?

10
00:00:39.980 --> 00:00:40.910
No, because.

11
00:00:40.910 --> 00:00:43.190
Well, there's nothing in our stack.

12
00:00:43.190 --> 00:00:46.610
This top is null that is empty.

13
00:00:46.640 --> 00:00:49.490
Let's go to the interesting one that is push.

14
00:00:49.490 --> 00:00:51.740
How do we add things to the stack?

15
00:00:52.480 --> 00:00:56.800
Well, the very first thing we want to do is to create a new node.

16
00:00:57.960 --> 00:01:01.290
And like I said, we can create a new object here if we want.

17
00:01:01.440 --> 00:01:05.340
Or we can just use the node class that I provided for you here.

18
00:01:06.420 --> 00:01:13.620
We can use the class by saying new node, which instantiate the class and gives it the value that we're

19
00:01:13.620 --> 00:01:14.940
going to push with.

20
00:01:15.770 --> 00:01:16.490
Next.

21
00:01:16.490 --> 00:01:24.050
We want to check if this is the very first item, because if the stack is empty and this is the very

22
00:01:24.050 --> 00:01:29.840
first item, well, top and bottom are both going to point to the same node.

23
00:01:30.910 --> 00:01:38.890
So in that case, we can check for if this dot length is equal to zero.

24
00:01:39.700 --> 00:01:44.140
In that case, we can just say this dot top is going to equal the new node.

25
00:01:45.500 --> 00:01:49.820
And also this dot bottom is going to equal the new node.

26
00:01:52.080 --> 00:01:52.980
Otherwise.

27
00:01:55.170 --> 00:02:01.470
We have to do something a little bit different, but not that different because we've seen it in the

28
00:02:01.470 --> 00:02:03.030
link list example.

29
00:02:03.390 --> 00:02:05.940
We just have to change some pointers around.

30
00:02:06.420 --> 00:02:14.400
In our case we want to say const holding pointer to the very top node.

31
00:02:16.660 --> 00:02:21.950
Because whatever on top now is going to get replaced by whatever we're going to add to it.

32
00:02:21.970 --> 00:02:26.860
So we're going to hold the reference to what was top originally.

33
00:02:28.060 --> 00:02:33.010
And then we're going to say that this top is now going to equal the new node.

34
00:02:33.760 --> 00:02:43.000
And this dot top dot next, which is now the new node, is going to point to what was top beforehand

35
00:02:43.000 --> 00:02:45.130
but now is below it.

36
00:02:45.580 --> 00:02:48.130
So we just say holding pointer.

37
00:02:48.130 --> 00:02:52.990
So that is the alt top is now going to be right after our new node.

38
00:02:53.930 --> 00:03:00.650
And then finally we do the this dot length plus plus to increment the length by one.

39
00:03:01.520 --> 00:03:03.990
And then finally, we want to return.

40
00:03:04.010 --> 00:03:07.880
Let's just return this, which will return us to the link list.

41
00:03:08.540 --> 00:03:09.710
Let's see if that worked.

42
00:03:11.190 --> 00:03:12.660
I'm going to say peak first.

43
00:03:12.660 --> 00:03:14.400
Well, there's nothing here.

44
00:03:14.550 --> 00:03:21.990
But if I want to push to my stack, I'm going to say push and we'll push Google first because we're

45
00:03:21.990 --> 00:03:23.640
visiting Google first.

46
00:03:24.820 --> 00:03:31.840
And if I run this, I get a data structure that has top that has the node value of Google.

47
00:03:33.330 --> 00:03:39.060
Next is not because we only have one item and the bottom is also the same.

48
00:03:39.060 --> 00:03:43.410
Google with next null and our stack has a length of one.

49
00:03:43.920 --> 00:03:45.320
What if we keep adding here?

50
00:03:45.330 --> 00:03:47.970
Let's go to Udemy next.

51
00:03:49.410 --> 00:03:50.460
If I click Run.

52
00:03:51.560 --> 00:03:59.690
I now have a length of two stack that has top node as you demi and bottom node as Google because remember

53
00:03:59.690 --> 00:04:11.420
with a stack we stack plates on top that is Udemy came in last so Udemy is on top remember life last

54
00:04:11.420 --> 00:04:12.290
in first out.

55
00:04:12.890 --> 00:04:13.910
Let's add one more.

56
00:04:13.910 --> 00:04:17.390
Let's say that we next visit our discord community.

57
00:04:17.779 --> 00:04:19.970
So let's say push.

58
00:04:21.390 --> 00:04:22.140
Discord.

59
00:04:24.020 --> 00:04:26.440
And I click run and there you go.

60
00:04:26.450 --> 00:04:30.380
We have our discord community at the top.

61
00:04:30.470 --> 00:04:31.940
At the bottom is Node.

62
00:04:31.940 --> 00:04:36.470
And just to make sure that our peak is working, if I do peak, we should get.

63
00:04:38.040 --> 00:04:43.740
Discord because it was the last in and the very top of our stack.

64
00:04:44.500 --> 00:04:45.330
Very nice.

65
00:04:45.340 --> 00:04:46.480
I hope you got that.

66
00:04:46.990 --> 00:04:48.610
Let's continue with pop.

67
00:04:48.620 --> 00:04:52.300
That is to remove whatever's on the top of the stack.

68
00:04:52.690 --> 00:05:00.070
Well, let's first check to make sure that there is an item, because if there isn't and we just have

69
00:05:00.070 --> 00:05:02.500
null, well, we just return null.

70
00:05:03.800 --> 00:05:13.100
So in this case, we can just say if this top if it doesn't exist in that case, we'll just return.

71
00:05:13.100 --> 00:05:13.550
No.

72
00:05:15.360 --> 00:05:19.320
The next, we can just do our cost holding pointer.

73
00:05:20.510 --> 00:05:22.520
To this dot top.

74
00:05:22.760 --> 00:05:26.240
So what is currently at the top, which is discord?

75
00:05:26.750 --> 00:05:33.080
And we'll say that this dot top is no longer what it currently is because we want to remove it.

76
00:05:33.080 --> 00:05:38.600
It's going to equal this dot, top dot next, which is underneath discord.

77
00:05:39.320 --> 00:05:45.800
And then finally we say this dot length minus minus, because we want to decrease the length by one.

78
00:05:45.800 --> 00:05:48.620
And then finally we can say, return this.

79
00:05:49.400 --> 00:05:53.840
Now remember, because JavaScript is a garbage, collected language.

80
00:05:53.870 --> 00:06:00.890
If I didn't do this and said holding pointer to this dot top.

81
00:06:01.970 --> 00:06:04.180
Well, discord.

82
00:06:04.190 --> 00:06:11.210
This node that contains discord wouldn't be referenced by anything and not used by anything, which

83
00:06:11.210 --> 00:06:17.390
means in a garbage collected language like JavaScript, that it will get automatically removed from

84
00:06:17.390 --> 00:06:19.580
memory during garbage collection.

85
00:06:20.360 --> 00:06:22.190
So if I run this.

86
00:06:23.560 --> 00:06:31.570
Well, I haven't done anything yet, but right now for Pop, let's just return the holding pointer.

87
00:06:31.630 --> 00:06:37.210
If I click Run or let's first do my stack dot pop.

88
00:06:37.940 --> 00:06:40.220
To remove discord from the list.

89
00:06:40.220 --> 00:06:41.450
If I click Run.

90
00:06:42.310 --> 00:06:45.310
I get back the discord node.

91
00:06:46.600 --> 00:06:49.120
Which is the holding pointer.

92
00:06:50.240 --> 00:06:52.400
In case we still want to have access to it.

93
00:06:53.030 --> 00:06:58.400
Otherwise, if we just want it to disappear and we don't need it anymore, we can just return.

94
00:06:59.460 --> 00:07:00.060
This.

95
00:07:00.060 --> 00:07:04.350
We can even comment out the holding pointer and if I click run.

96
00:07:05.220 --> 00:07:12.750
We now have just Udemy at the top and Google at the bottom, and discord is disappeared from memory.

97
00:07:13.320 --> 00:07:14.440
So let's keep going here.

98
00:07:14.460 --> 00:07:16.080
Let's say I want to.

99
00:07:16.860 --> 00:07:17.400
Pop.

100
00:07:17.400 --> 00:07:18.210
One more.

101
00:07:21.140 --> 00:07:22.280
And if I run this.

102
00:07:24.060 --> 00:07:30.690
I now only have one thing, the Google, which was original item on the stack.

103
00:07:30.690 --> 00:07:37.590
So what we just did was we went to Google, then we went to Udemy, then we went to Discord, and then

104
00:07:37.590 --> 00:07:44.430
we popped whatever's on the top, and then we popped Udemy and now we're just left with Google.

105
00:07:45.120 --> 00:07:46.830
If I do one last pop here.

106
00:07:48.060 --> 00:07:49.290
And I click Run.

107
00:07:49.970 --> 00:07:59.450
We have top which is null, but oh, we have a bottom node still having google because we never removed

108
00:07:59.450 --> 00:08:00.440
in the pop.

109
00:08:00.470 --> 00:08:05.480
Ah, bottom node all we did was replace the top.

110
00:08:06.330 --> 00:08:17.940
So we just need to add one conditional here, which is if this dot top equals this dot bottom, that

111
00:08:17.940 --> 00:08:20.670
means there's only one item on the list.

112
00:08:20.670 --> 00:08:23.880
I could have also done this dot length equals zero.

113
00:08:24.850 --> 00:08:30.850
If both of them are equal, which means there is just one node left.

114
00:08:30.850 --> 00:08:38.620
In that case, we want to say that this dot bottom is going to equal no because after we remove the

115
00:08:38.620 --> 00:08:41.710
only node left, we want bottom to equal null.

116
00:08:42.070 --> 00:08:43.780
So if I do this and click run.

117
00:08:44.640 --> 00:08:45.310
There you go.

118
00:08:45.330 --> 00:08:48.540
We're back to our original empty stack.

119
00:08:49.410 --> 00:08:50.370
I hope you got that.

120
00:08:50.370 --> 00:08:52.050
And we're able to make sense of it.

121
00:08:52.590 --> 00:08:55.530
We have another exciting exercise in the next video.

122
00:08:55.620 --> 00:08:56.610
I'll see you in that one.

123
00:08:57.060 --> 00:08:57.540
Bye bye.

