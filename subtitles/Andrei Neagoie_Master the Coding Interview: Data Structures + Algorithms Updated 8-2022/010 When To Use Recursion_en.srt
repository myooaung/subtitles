1
00:00:01,670 --> 00:00:04,040
When should we use recursion?

2
00:00:05,510 --> 00:00:07,610
This is the role that I like to use.

3
00:00:08,330 --> 00:00:14,750
When it gets to complicated problems like traversing or searching through trees or graphs, something

4
00:00:14,750 --> 00:00:21,080
that we're going to talk about with breakfast, search and depth for search recursion is really, really

5
00:00:21,080 --> 00:00:24,890
useful and better than iterative approaches.

6
00:00:25,010 --> 00:00:31,760
And with sorting through items, there's also cases that we will see that recursion is preferred.

7
00:00:32,000 --> 00:00:38,510
And when it comes to recursion, these are the rules that I like to follow.

8
00:00:39,140 --> 00:00:44,840
Every time we're using a tree or converting something into a tree, consider recursion.

9
00:00:45,510 --> 00:00:52,710
And there's three key things in an interview question that might trigger a recursive solution.

10
00:00:53,360 --> 00:00:54,080
One.

11
00:00:54,910 --> 00:01:03,700
Is that a problem can be divided into a number of sub problems that are smaller instances of that same

12
00:01:03,700 --> 00:01:09,370
problem, such as the exercises we've done with Fibonacci numbers or factorial.

13
00:01:09,370 --> 00:01:14,470
We can break those down into little trees that break down to smaller and smaller pieces.

14
00:01:14,470 --> 00:01:17,290
Those are inherently recursive problems.

15
00:01:18,860 --> 00:01:25,380
Another factor is that each of these instances of sub problem is identical in nature.

16
00:01:25,400 --> 00:01:29,960
That is, the calculations that we need to do are pretty much the same.

17
00:01:30,050 --> 00:01:36,560
They may be smaller values, but the actual calculations underneath it is all the same over and over

18
00:01:36,560 --> 00:01:37,190
and over.

19
00:01:38,030 --> 00:01:45,350
And then finally, the third point is that those solutions, if you solve the smaller problems, the

20
00:01:45,350 --> 00:01:53,090
leaf nodes of that tree and you combine them, that solves the problem at hand, then that is a recursive

21
00:01:53,090 --> 00:01:59,570
solution that you can use and you'll see a lot of divide and conquer using recursion.

22
00:01:59,990 --> 00:02:05,210
Remember divide and conquer, which we mentioned when we got to the tree data structure lessons.

23
00:02:05,960 --> 00:02:11,810
It's kind of like looking through a phone book when you're looking for Bill in the phone book.

24
00:02:12,140 --> 00:02:19,070
You're not going to start from a and simply go one page at a time from left to right.

25
00:02:19,100 --> 00:02:25,340
No, you usually split the phone book in the middle or try to go to the B section of the phone book

26
00:02:25,340 --> 00:02:30,140
and start dividing up the problem page by page until you get closer and closer.

27
00:02:31,930 --> 00:02:37,380
This divide and conquer type of questions usually have recursion in them.

28
00:02:37,560 --> 00:02:46,080
And as we know, the one thing that recursion can do, that looping can't, is that they can make tasks

29
00:02:46,080 --> 00:02:50,130
super, super easy, such as these types of problems.

30
00:02:50,550 --> 00:02:51,690
As a matter of fact.

31
00:02:53,020 --> 00:03:00,000
I encourage you to write your own traverse function that we use in our tree data structure.

32
00:03:00,010 --> 00:03:05,320
This is something that we're going to get to when we get to searching and the algorithm section.

33
00:03:05,320 --> 00:03:10,450
But if you want to challenge yourself, see if you can write a traverse function like I did over here

34
00:03:10,450 --> 00:03:11,950
using recursion.

35
00:03:12,680 --> 00:03:16,430
And then also try to write it with loops.

36
00:03:16,460 --> 00:03:17,990
You'll see that with loops.

37
00:03:17,990 --> 00:03:20,960
Things like tree traversal is a headache.

38
00:03:21,200 --> 00:03:23,390
I can even do it from the top of my head.

39
00:03:23,510 --> 00:03:26,960
With recursion, it's pretty straightforward.

40
00:03:27,530 --> 00:03:34,160
With loops, you usually have to maintain some sort of a stack to keep track of things, and it really

41
00:03:34,160 --> 00:03:35,630
adds a lot of complexity.

42
00:03:37,120 --> 00:03:44,170
So use the rules below to notice when a recursive problem presents itself during an interview.

43
00:03:44,770 --> 00:03:50,650
I'll leave a few more exercises for you after this video, but as we'll see, we'll come back to this

44
00:03:50,650 --> 00:03:57,010
topic when we get into other algorithm sections and things will start to get clearer and clearer.

45
00:03:57,490 --> 00:03:58,570
I'll see you in the next one.

46
00:03:59,080 --> 00:03:59,680
Bye bye.

