1
00:00:00,760 --> 00:00:01,660
Welcome back.

2
00:00:02,080 --> 00:00:08,260
If we take a look at our Fibonacci function that we created, this is what we're doing.

3
00:00:08,800 --> 00:00:17,650
If I was looking for Fibonacci number of seven using recursion, well, we'd have to run all these calculations

4
00:00:17,650 --> 00:00:20,770
recursively and all of these as well.

5
00:00:21,130 --> 00:00:24,330
And you can see here what's happening, right?

6
00:00:24,910 --> 00:00:28,180
Look where we're calculating Fibonacci of one.

7
00:00:28,450 --> 00:00:30,040
We have this function running.

8
00:00:30,040 --> 00:00:33,010
One, two, three, four, five times.

9
00:00:33,040 --> 00:00:34,840
Calculating the same thing.

10
00:00:34,930 --> 00:00:36,580
What about Fibonacci of two?

11
00:00:37,330 --> 00:00:42,130
Again, look at all these calculations that are being repeated.

12
00:00:42,250 --> 00:00:43,450
What about three?

13
00:00:44,460 --> 00:00:51,900
And you see here where the triangles are overlapping, where we're calculating three over where we calculated

14
00:00:51,900 --> 00:00:54,450
fib two and Fibonacci of one as well.

15
00:00:54,630 --> 00:01:01,800
And then if we keep going to if you Bonacci number of four there again repeated tasks.

16
00:01:03,110 --> 00:01:04,640
Triangles over triangles.

17
00:01:04,640 --> 00:01:07,840
And then finally Fibonacci of six or five.

18
00:01:07,850 --> 00:01:13,820
We see that once again, we just have more repeated calculations.

19
00:01:14,240 --> 00:01:16,610
This does not look efficient, does it?

20
00:01:16,610 --> 00:01:18,530
And that's what we saw in the previous video.

21
00:01:18,560 --> 00:01:21,050
This is what we're doing with our calculations.

22
00:01:21,740 --> 00:01:29,720
But if you notice here with dynamic programming, we can optimize this and use memorization to say,

23
00:01:29,720 --> 00:01:30,410
hey.

24
00:01:31,490 --> 00:01:33,470
Calculate Fibonacci of seven.

25
00:01:33,500 --> 00:01:39,500
Go recursively down to six to 5 to 4 to 3 to 2.

26
00:01:39,500 --> 00:01:41,240
And also to one.

27
00:01:42,250 --> 00:01:51,010
And now as we go back, remember, as we start to return the statements and we go to fib of two or fib

28
00:01:51,010 --> 00:01:55,750
of three or fib before, because we've already calculated these numbers.

29
00:01:56,830 --> 00:02:04,030
We can actually return a memorised version so that all these calculations.

30
00:02:05,940 --> 00:02:07,980
Are no longer needed.

31
00:02:09,110 --> 00:02:09,919
Why?

32
00:02:10,009 --> 00:02:11,030
Because.

33
00:02:11,800 --> 00:02:14,320
Two, three, four and five.

34
00:02:14,350 --> 00:02:15,940
Every time we ask for it.

35
00:02:15,940 --> 00:02:22,540
In this case, we've already calculated on the left hand side, so we can use the cached or memorized

36
00:02:22,540 --> 00:02:29,130
version so that these we can just ask the memorized function to just get for us.

37
00:02:29,140 --> 00:02:31,450
We avoid all these calculations.

38
00:02:31,690 --> 00:02:33,970
Look how simple that looks.

39
00:02:34,510 --> 00:02:40,270
And I'm going to show you in the next video how we actually implement this with the Fibonacci sequence.

40
00:02:40,660 --> 00:02:46,840
But to demonstrate to you that this is not only just this problem that we can use dynamic programming

41
00:02:46,840 --> 00:02:49,720
on, I have a set of rules.

42
00:02:50,200 --> 00:02:57,060
One is that you can think of dynamic programming as combining divide and conquer.

43
00:02:57,070 --> 00:03:06,160
What we did with the tree like structure of Fibonacci number, where we use recursion and using reuse,

44
00:03:06,160 --> 00:03:14,560
that is caching memorization with recursion to get savings in performance and use dynamic programming.

45
00:03:15,470 --> 00:03:23,840
And these are the steps that I like to follow to see if a problem can use dynamic programming to optimize

46
00:03:23,840 --> 00:03:24,140
it.

47
00:03:24,620 --> 00:03:30,830
We first ask, can the problem be divided into sub problems?

48
00:03:31,730 --> 00:03:38,390
That is, is it a tree like structure where each problem is broken down into smaller problems, into

49
00:03:38,390 --> 00:03:44,390
smaller problems, into small problems, which usually indicates a recursive solution?

50
00:03:44,870 --> 00:03:48,560
Again, something that we're very familiar with from our previous videos.

51
00:03:49,530 --> 00:03:55,860
And now the third question is really important because you can have tree like structures that don't

52
00:03:55,860 --> 00:03:58,200
have repetitive sub problems.

53
00:03:58,200 --> 00:04:05,490
But if these sub problems are repetitive, that is we're doing the same calculation over and over and

54
00:04:05,490 --> 00:04:06,580
the SAP problems.

55
00:04:06,600 --> 00:04:12,450
Well, if the answer is yes, then we can memorize these SAP problems.

56
00:04:12,990 --> 00:04:17,100
And once we do that, we see tremendous benefits.

57
00:04:17,670 --> 00:04:24,150
And these benefits are used all over computer science to improve performance so that the fifth step

58
00:04:24,150 --> 00:04:26,280
should be to demand a raise from your boss.

59
00:04:26,280 --> 00:04:32,340
If you've implemented this because you've just saved so many calculations, so much time, complexity.

60
00:04:33,870 --> 00:04:42,210
I want you to think like this instead of being intimidated by the confusing name that is dynamic programming.

61
00:04:42,750 --> 00:04:47,310
You just need to know when a problem can use this technique.

62
00:04:47,310 --> 00:04:51,090
And I'll leave some problems for you after this section to practice on.

63
00:04:51,630 --> 00:04:53,640
But you want to just follow this pattern.

64
00:04:54,390 --> 00:05:01,110
When a problem has solutions composed of solutions to the same problem with smaller and smaller inputs,

65
00:05:01,500 --> 00:05:09,060
each problem is solved only once, and the result of each sub problem is stored in a table like a cache

66
00:05:09,660 --> 00:05:12,660
such as a hash table like we've done in the previous video.

67
00:05:12,750 --> 00:05:21,090
For future reference, we can use this table to obtain the original solution of a repeated problem.

68
00:05:21,600 --> 00:05:22,530
Enough talk.

69
00:05:22,530 --> 00:05:28,620
I think it's time for us to implement our own memorization with Fibonacci number.

70
00:05:29,650 --> 00:05:34,650
If you want to challenge yourself, go ahead and see if you can encode it yourself.

71
00:05:34,660 --> 00:05:41,800
Otherwise, in the next video, I'm going to show you how to improve our terrible performing Fibonacci

72
00:05:41,800 --> 00:05:42,370
function.

73
00:05:42,370 --> 00:05:43,150
And to.

74
00:05:43,320 --> 00:05:44,290
Oh then.

75
00:05:44,960 --> 00:05:45,890
I'll see you on that one.

76
00:05:46,580 --> 00:05:47,150
Bye bye.

