1
00:00:00,980 --> 00:00:01,340
Och.

2
00:00:01,370 --> 00:00:04,880
Och, I'm actually starting with a bit of a trick here.

3
00:00:05,800 --> 00:00:13,210
Recursion, which we're going to talk about in the next couple of videos, isn't technically an algorithm.

4
00:00:13,880 --> 00:00:19,820
It's more of a concept that we are going to use throughout this section of the course to write some

5
00:00:19,820 --> 00:00:22,100
really interesting algorithms.

6
00:00:23,210 --> 00:00:29,240
When we get into sorting and searching through our binary search tree, we're going to be using recursion

7
00:00:29,240 --> 00:00:29,800
a lot.

8
00:00:29,810 --> 00:00:31,460
So I want to prepare you.

9
00:00:32,220 --> 00:00:36,600
And obviously it's also a common topic in interviews.

10
00:00:36,810 --> 00:00:41,250
Actually, this is one of the most popular topics, I would say, when it comes to interviewing.

11
00:00:41,730 --> 00:00:45,150
Now, what is recursion really?

12
00:00:45,850 --> 00:00:51,580
When you're searching for files on a computer, for example, if you're on your desktop and you want

13
00:00:51,580 --> 00:00:57,760
to find all your music files, your M.P. three files on your computer, you can't do it by just looking

14
00:00:57,760 --> 00:00:58,720
at one folder.

15
00:00:58,750 --> 00:01:03,400
You want to look at folders recursively to find all your music.

16
00:01:03,970 --> 00:01:05,050
Let me show you what I mean.

17
00:01:06,640 --> 00:01:13,930
I have the projects here that we've used for one of my other courses and it's a back end API in Docker.

18
00:01:14,200 --> 00:01:18,700
Now I've cloned this repository and I have it right here on my desktop.

19
00:01:19,600 --> 00:01:20,080
Now.

20
00:01:20,080 --> 00:01:27,280
If I wanted to search through all the files in this project, I can simply type in RLS to show me the

21
00:01:27,280 --> 00:01:27,970
files.

22
00:01:28,330 --> 00:01:34,600
But as you see in blue here, we also have folders that inside of them also have files.

23
00:01:35,380 --> 00:01:38,530
How can I also see the files in this folder?

24
00:01:39,070 --> 00:01:42,190
Well, I can do something called LZ Dash.

25
00:01:42,370 --> 00:01:42,940
Ah.

26
00:01:43,270 --> 00:01:46,930
And ah, guess what stands for recursively?

27
00:01:47,530 --> 00:01:49,840
If I do this and I press enter.

28
00:01:50,740 --> 00:01:51,580
Look at that.

29
00:01:51,790 --> 00:01:55,660
I get also the files inside of the folders.

30
00:01:55,960 --> 00:01:56,590
You see that?

31
00:01:56,590 --> 00:01:59,020
I have a controller's folder with JavaScript files.

32
00:01:59,020 --> 00:02:06,550
I have PostgreSQL folder with some Docker files, some SQL files, and within those I also have another

33
00:02:06,550 --> 00:02:09,610
folder that has different files.

34
00:02:09,789 --> 00:02:14,410
But because I was able to list items recursively.

35
00:02:15,280 --> 00:02:19,150
My computer went inside of each folder and printed out the files.

36
00:02:19,630 --> 00:02:21,880
So what is recursion?

37
00:02:22,510 --> 00:02:30,550
Well, recursion is when you define something in terms of itself, simply it's a function that refers

38
00:02:30,550 --> 00:02:33,550
to itself inside of the function.

39
00:02:34,590 --> 00:02:34,980
All right.

40
00:02:34,980 --> 00:02:36,900
There's no way you got that right.

41
00:02:36,990 --> 00:02:39,450
That's probably the most confusing definition ever.

42
00:02:39,870 --> 00:02:41,880
Again, let me show you an example.

43
00:02:43,480 --> 00:02:45,100
If I open up the console here.

44
00:02:46,860 --> 00:02:50,880
A recursive function is a function that refers to itself.

45
00:02:51,210 --> 00:02:54,540
So I can create a function called, let's say, Inception.

46
00:02:57,620 --> 00:03:02,600
And this function is recursive if I refer to itself inside of it.

47
00:03:03,670 --> 00:03:04,080
Oops.

48
00:03:04,090 --> 00:03:05,450
Let's try that again.

49
00:03:05,470 --> 00:03:07,030
If I say.

50
00:03:08,660 --> 00:03:09,890
Inception here.

51
00:03:10,740 --> 00:03:19,770
This is a recursive function because when this function runs, it's going to call itself and run again.

52
00:03:20,100 --> 00:03:26,400
The problem with recursion and why people find it so difficult is that it's an intimidating topic when

53
00:03:26,400 --> 00:03:29,790
people start talking about math and theoretical applications.

54
00:03:30,180 --> 00:03:36,000
Instead, let's focus here on how recursion helps us solve problems.

55
00:03:36,180 --> 00:03:42,660
Recursion is really good for tasks that have repeated subtasks to do.

56
00:03:43,050 --> 00:03:43,850
That's it.

57
00:03:43,860 --> 00:03:47,580
Kind of like when we looked at the folders inside of this project.

58
00:03:47,940 --> 00:03:53,910
And the reason recursion is so important, and the reason that I talk about it first in this section

59
00:03:53,910 --> 00:04:01,140
before we dive into all the other algorithms, is that this concept is going to be used in searching

60
00:04:01,140 --> 00:04:07,000
and sorting algorithms that we're going to be talking about, for example, traversing a tree.

61
00:04:07,020 --> 00:04:12,660
If you think about it, are simply same tasks that we do over and over again.

62
00:04:13,320 --> 00:04:20,850
Remember, when we build our own tree data structure, our binary search tree, and I gave for you a

63
00:04:20,850 --> 00:04:22,350
little function at the end.

64
00:04:23,060 --> 00:04:29,900
Called Traverse that allowed us to print our trees so we can verify our answer.

65
00:04:30,780 --> 00:04:35,070
If we look at this closer, we see that we're using recursion here.

66
00:04:35,100 --> 00:04:39,660
I have a traverse function that calls itself.

67
00:04:40,110 --> 00:04:40,980
Within here.

68
00:04:42,150 --> 00:04:46,410
And this is something that we're going to demonstrate a lot of when we talk about searching and sorting

69
00:04:46,410 --> 00:04:48,000
in the upcoming sections.

70
00:04:48,360 --> 00:04:53,650
Recursion is everywhere when we do dom traversal on a website.

71
00:04:53,670 --> 00:05:00,450
If we go to elements here, when we do this traversal on an HTML document object model.

72
00:05:01,210 --> 00:05:02,560
We're using recursion.

73
00:05:04,370 --> 00:05:07,370
In JavaScript when we have a nested objects.

74
00:05:07,370 --> 00:05:14,720
So an object inside of an object, well, we use recursion, but the key to getting recursion is to

75
00:05:14,720 --> 00:05:19,880
understand that it's not that complex as long as you practice it a little bit.

76
00:05:20,680 --> 00:05:25,910
Once you get it and get over the initial hump, then it becomes second nature.

77
00:05:25,930 --> 00:05:30,810
And my goal is by the end of these videos that you're going to get recursion.

78
00:05:31,750 --> 00:05:32,830
So let's get started.

79
00:05:33,630 --> 00:05:34,650
I'll see you in the next one.

