WEBVTT
1
00:00:01.010 --> 00:00:02.060
Welcome back.

2
00:00:02.300 --> 00:00:09.260
Let's do a quick exercise before we actually create our own stacks and Qs, because JavaScript doesn't

3
00:00:09.260 --> 00:00:12.980
have its own stack or queues data structure.

4
00:00:13.640 --> 00:00:17.900
Now I mentioned that there's two ways that we can build Stacks and Qs.

5
00:00:19.030 --> 00:00:23.840
If we talk about Stax, we can think of it as our browser history.

6
00:00:23.860 --> 00:00:33.610
Let's say we visit Google first, then we visit Udemy Dotcom, and then we visit, let's say, YouTube.

7
00:00:34.770 --> 00:00:42.690
In a stack because Google was the first item it would actually be placed on the stack like this.

8
00:00:43.020 --> 00:00:50.190
Then we go to Udemy, so we'd be placed on this stack on top, and then we go to YouTube.

9
00:00:52.080 --> 00:00:57.750
Now, if we want to go to a new website, let's say we go to Twitter.

10
00:00:57.990 --> 00:01:00.630
But then we decided, no, no, no, that's not what I want to do.

11
00:01:00.630 --> 00:01:01.530
I want to go back.

12
00:01:01.530 --> 00:01:03.910
Well, we remove Twitter.

13
00:01:03.930 --> 00:01:06.900
Press back button on our browser and we get to YouTube.

14
00:01:06.900 --> 00:01:11.910
If we press back again, we get to Udemy and then back again.

15
00:01:11.910 --> 00:01:13.650
We go back to Google.

16
00:01:14.800 --> 00:01:21.610
So Stacks has a top and a bottom and we can build it with either arrays.

17
00:01:22.430 --> 00:01:25.160
Or linked lists.

18
00:01:26.200 --> 00:01:32.710
My question to you is, why would we want to build stacks with arrays?

19
00:01:33.130 --> 00:01:41.560
That is, we'll create a class of Stax that has the data being held in arrays versus using link lists

20
00:01:41.770 --> 00:01:43.090
and vice versa.

21
00:01:43.870 --> 00:01:44.770
Think about that.

22
00:01:45.370 --> 00:01:46.930
What about cues?

23
00:01:48.670 --> 00:01:50.490
Let's say we have a queue.

24
00:01:50.500 --> 00:01:57.970
I'm creating a waitlist app and in here we have a couple of people that want to get on the waitlist.

25
00:01:58.000 --> 00:02:01.030
The first person that shows up is Tim.

26
00:02:01.720 --> 00:02:10.330
And then after Tim or you know what, let's use our names, let's use Matt and then Matt shows up.

27
00:02:10.419 --> 00:02:20.860
But all of a sudden joy comes and lines up and then perhaps we have Samir that comes and waits in line.

28
00:02:20.860 --> 00:02:23.260
And then we have Pavel.

29
00:02:25.290 --> 00:02:26.130
In this case.

30
00:02:26.130 --> 00:02:30.780
We want Matt to be first, then Joy, then Samir, then Pavel.

31
00:02:31.020 --> 00:02:35.220
And with Qs, we can once again use a phrase.

32
00:02:36.520 --> 00:02:40.180
And link lists to implement it.

33
00:02:41.530 --> 00:02:44.380
Which one do you think would be better for Kyuss?

34
00:02:44.800 --> 00:02:46.960
Is there one better or are they both equal?

35
00:02:47.320 --> 00:02:50.130
I want you to think about this in the next video.

36
00:02:50.140 --> 00:02:56.170
I'm going to answer this for you, but I recommend taking time to think about what you know about arrays

37
00:02:56.170 --> 00:03:01.390
and link lists and how they might benefit or might not benefit.

38
00:03:01.390 --> 00:03:02.470
Stacks and Qs.

39
00:03:03.440 --> 00:03:04.550
I'll see in the next video.

