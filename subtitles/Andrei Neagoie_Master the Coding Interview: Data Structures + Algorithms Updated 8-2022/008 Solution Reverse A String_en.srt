1
00:00:00,560 --> 00:00:01,430
Welcome back.

2
00:00:02,050 --> 00:00:09,100
Now I'm not going to go over all of our steps that we used in the section where we talked about how

3
00:00:09,100 --> 00:00:15,460
to solve problems and how to talk through your problems in front of an interviewer.

4
00:00:15,820 --> 00:00:21,310
And we even watched that Google video of all the things you need to do, because that's going to take

5
00:00:21,310 --> 00:00:22,670
way too long of a time.

6
00:00:22,690 --> 00:00:28,420
I'm going to speed things up and just talk about the key points of how you would solve this problem.

7
00:00:28,570 --> 00:00:36,940
Well, in order to reverse a string, the first thing we want to do is some sort of a check of our input.

8
00:00:37,570 --> 00:00:41,290
We can't just assume that we're going to always receive a string.

9
00:00:41,560 --> 00:00:44,890
What if somebody calls the reverse function with.

10
00:00:45,370 --> 00:00:48,790
Well, undefined or with a number?

11
00:00:48,820 --> 00:00:49,870
What happens then?

12
00:00:50,290 --> 00:00:53,470
And a good thing to always start off with is to check the input.

13
00:00:53,500 --> 00:00:56,270
In my case, I'm going to do a simple check.

14
00:00:56,290 --> 00:01:00,880
Let's say that if there's no string.

15
00:01:01,710 --> 00:01:03,360
So that is undefined.

16
00:01:03,750 --> 00:01:11,310
Or perhaps that the string at length is less than two.

17
00:01:11,790 --> 00:01:19,710
That means, well, if string length is less than two, that means I'm just receiving one letter.

18
00:01:20,320 --> 00:01:24,990
Or no letters, in which case we don't really need to do any operations.

19
00:01:25,000 --> 00:01:26,590
It's already kind of reversed.

20
00:01:27,670 --> 00:01:34,300
And we can add different input validation here, such as using the type of keyword and JavaScript to

21
00:01:34,300 --> 00:01:35,980
check if it's a string type.

22
00:01:36,220 --> 00:01:38,530
But that's something you can just do on your own.

23
00:01:38,920 --> 00:01:44,530
Actually, let's implement it since we're here anyway, just to show you so I can say type of.

24
00:01:45,300 --> 00:01:48,900
String if it doesn't equal.

25
00:01:49,880 --> 00:01:56,000
Straight type of SDR, which is the parameter we receive as an equal, the string type.

26
00:01:56,030 --> 00:01:58,700
Well, in that case, we can just.

27
00:02:00,370 --> 00:02:01,300
Return.

28
00:02:02,690 --> 00:02:03,470
Hmm.

29
00:02:04,100 --> 00:02:05,150
That's not good.

30
00:02:09,990 --> 00:02:11,910
Otherwise, let's do some operation.

31
00:02:13,010 --> 00:02:14,540
To reverse the strain.

32
00:02:15,110 --> 00:02:17,270
Well, let's think about this.

33
00:02:17,270 --> 00:02:20,730
We want to convert it into an array.

34
00:02:20,750 --> 00:02:25,130
So I'm going to create a backwards array.

35
00:02:26,160 --> 00:02:29,170
And this is what we're going to return from the function.

36
00:02:29,190 --> 00:02:31,770
I'm going to return the array.

37
00:02:32,490 --> 00:02:34,560
That is reversed.

38
00:02:35,070 --> 00:02:37,980
But we want to return a string, right?

39
00:02:37,980 --> 00:02:40,860
A reverses a string that should return a string.

40
00:02:41,910 --> 00:02:47,700
Even though we're going to convert whatever we receive into an array at the end, we want to turn it

41
00:02:47,700 --> 00:02:48,990
back into a string.

42
00:02:49,290 --> 00:02:55,170
So in JavaScript we can do the two string method or.

43
00:02:56,260 --> 00:02:58,450
The Joint method.

44
00:02:59,780 --> 00:03:03,740
And we just say, join all the items in the array.

45
00:03:03,890 --> 00:03:08,930
Now in here, we're going to grab the length.

46
00:03:10,900 --> 00:03:17,620
Of the array or the string, because we're going to be using it a lot and we don't want to have repeated

47
00:03:17,620 --> 00:03:18,150
code.

48
00:03:18,160 --> 00:03:25,080
So I'm going to say length minus one is how many items we have in the string.

49
00:03:25,090 --> 00:03:27,160
Or maybe we should name this items.

50
00:03:28,770 --> 00:03:29,340
Number.

51
00:03:30,780 --> 00:03:33,210
Or actually total items.

52
00:03:33,210 --> 00:03:34,050
That's a better name.

53
00:03:34,750 --> 00:03:36,550
Now these total items.

54
00:03:36,730 --> 00:03:41,470
So we're going to loop through our string.

55
00:03:42,390 --> 00:03:47,220
Will say let I equals to the total items.

56
00:03:49,960 --> 00:03:53,920
So I is going to equal however many characters we have in our string.

57
00:03:54,880 --> 00:03:59,770
And we're going to keep going until I is equals to zero.

58
00:04:03,330 --> 00:04:06,120
And all we're going to do because we want to go from.

59
00:04:07,510 --> 00:04:09,760
Back to front.

60
00:04:10,150 --> 00:04:11,410
We're going to.

61
00:04:12,650 --> 00:04:13,550
Decrement this.

62
00:04:13,550 --> 00:04:18,110
So we're going to go from the length of the string all the way back.

63
00:04:18,110 --> 00:04:26,240
So we're going to start off with I, e, r, d and a and insert those into an array that we've created

64
00:04:26,240 --> 00:04:28,280
the backwards array one by one.

65
00:04:29,670 --> 00:04:31,110
So in this loop.

66
00:04:31,980 --> 00:04:35,430
All we're going to do is say backwards.

67
00:04:37,470 --> 00:04:38,610
Dot push.

68
00:04:39,270 --> 00:04:42,090
Each item that we're going to create so str.

69
00:04:44,620 --> 00:04:46,180
And I know what you're thinking.

70
00:04:46,660 --> 00:04:47,470
Whoa, whoa, whoa.

71
00:04:47,500 --> 00:04:50,810
Why don't we just convert the string into an array?

72
00:04:50,830 --> 00:04:56,410
You told me all about converting strings into an array, and we didn't really do that.

73
00:04:56,500 --> 00:05:00,940
And JavaScript actually has the string split.

74
00:05:01,450 --> 00:05:07,480
Or we can run the split command to split things into an array.

75
00:05:08,050 --> 00:05:16,390
But with JavaScript, we can actually just use strings as arrays and access each property like this

76
00:05:16,390 --> 00:05:21,250
with bracket notation so that they essentially are arrays.

77
00:05:21,610 --> 00:05:24,130
So we don't have to run any split commands.

78
00:05:24,160 --> 00:05:26,500
This also works.

79
00:05:27,040 --> 00:05:35,410
And all we're doing is we're going backwards one by one and pushing each item of our given string into

80
00:05:35,410 --> 00:05:37,270
our array.

81
00:05:37,870 --> 00:05:44,410
So if I console.log here before we run the joint command, the backwards array.

82
00:05:45,750 --> 00:05:48,750
And I run reverse.

83
00:05:51,430 --> 00:05:52,930
And let's reverse.

84
00:05:53,910 --> 00:05:54,900
The string.

85
00:05:58,900 --> 00:06:00,190
Let's run this.

86
00:06:01,080 --> 00:06:07,650
Oh, and you may have noticed that this length didn't really come from anywhere.

87
00:06:07,660 --> 00:06:09,150
It should be total items.

88
00:06:09,240 --> 00:06:11,940
So this is the total.

89
00:06:11,970 --> 00:06:12,540
Oops.

90
00:06:13,630 --> 00:06:15,190
Total items.

91
00:06:15,370 --> 00:06:17,410
This is the problem with live coding.

92
00:06:17,410 --> 00:06:20,940
I tried to show that everybody makes mistakes, even myself.

93
00:06:20,950 --> 00:06:26,290
And it's good because this way you think through the problem and these total items.

94
00:06:26,290 --> 00:06:31,060
Remember, we want to keep going as long as I is.

95
00:06:31,760 --> 00:06:34,460
Greater than or equal to zero.

96
00:06:35,140 --> 00:06:36,760
So if I now run this.

97
00:06:37,710 --> 00:06:38,540
Hey, look at that.

98
00:06:38,550 --> 00:06:43,410
We have an array with all of our backwards items right in here.

99
00:06:44,070 --> 00:06:46,500
And you see here that the return value.

100
00:06:47,320 --> 00:06:50,860
That we get is the backwards.

101
00:06:52,450 --> 00:06:56,140
String that we received because we join it at the end.

102
00:06:56,870 --> 00:06:57,680
Very cool.

103
00:06:57,710 --> 00:06:59,600
I hope you got that answer.

104
00:07:00,470 --> 00:07:08,600
Or maybe you have a better answer than me, because what I did here is not necessarily the cleanest

105
00:07:08,600 --> 00:07:09,020
way.

106
00:07:09,290 --> 00:07:15,560
And depending on which programming language you use, you might have built in methods that simplify

107
00:07:15,560 --> 00:07:16,250
this step.

108
00:07:17,770 --> 00:07:18,820
Let me show you what I mean.

109
00:07:19,730 --> 00:07:26,450
In JavaScript, for example, we can use some built in methods that come with the race to just simplify

110
00:07:26,450 --> 00:07:29,360
this whole thing and make our code a lot more readable.

111
00:07:29,750 --> 00:07:32,900
Let's create a new function, and I'm going to call this.

112
00:07:36,120 --> 00:07:44,370
Reverse two, and this reverse two is going to once again receive some sort of an input.

113
00:07:44,460 --> 00:07:47,850
I won't do any input validation for this one.

114
00:07:48,030 --> 00:07:51,210
You can just assume that we can just copy and paste it here.

115
00:07:51,880 --> 00:07:55,800
But in here, we can do a simple return statement.

116
00:07:55,810 --> 00:07:57,310
Grab the string.

117
00:07:57,640 --> 00:07:59,980
Run the split command.

118
00:08:00,460 --> 00:08:06,500
Because this time around, we're not going to access the eye like we did up here.

119
00:08:06,520 --> 00:08:14,710
We're going to convert it into an array so that we can use a built in method that comes in JavaScript

120
00:08:14,710 --> 00:08:16,690
arrays called reverse.

121
00:08:17,230 --> 00:08:24,670
And this reverse does what we just did here for us, and now we just join it at the end.

122
00:08:25,640 --> 00:08:33,890
So by using a built in method called reverse, I avoided all this work.

123
00:08:34,130 --> 00:08:35,250
How nice is that?

124
00:08:35,270 --> 00:08:36,289
Let's see if that works.

125
00:08:36,289 --> 00:08:41,240
I'm going to say reverse to going to run and look at that.

126
00:08:41,240 --> 00:08:42,289
It's still working.

127
00:08:43,030 --> 00:08:44,650
What about another solution?

128
00:08:45,190 --> 00:08:47,200
Again, many different ways.

129
00:08:47,200 --> 00:08:55,390
And let's say the interviewer says, is there a more modern, cleaner way that you can make this function?

130
00:08:56,420 --> 00:09:01,520
And because in JavaScript there is the new ES6 syntax.

131
00:09:01,790 --> 00:09:04,610
You can even create a one line function.

132
00:09:05,000 --> 00:09:07,490
Call it reverse three.

133
00:09:09,030 --> 00:09:16,020
That's going to take a string and it's going to do string dot split.

134
00:09:19,580 --> 00:09:24,080
And again do the exact same thing using arrow function this time around.

135
00:09:25,100 --> 00:09:29,090
And this should still work the exact same.

136
00:09:29,360 --> 00:09:30,080
Look at that.

137
00:09:30,830 --> 00:09:37,850
And if you want to get fancy, you can again use a new feature of JavaScript, which is the structuring

138
00:09:38,120 --> 00:09:39,320
or not the structure.

139
00:09:39,470 --> 00:09:40,970
This is the spread operator.

140
00:09:41,240 --> 00:09:45,740
If I run this, we no longer need the split.

141
00:09:46,430 --> 00:09:49,910
I can run this and I get the same thing.

142
00:09:51,020 --> 00:09:57,020
Again, I just want to demonstrate to you that there are many different ways to solve a problem and

143
00:09:57,020 --> 00:10:05,360
an interviewer is not going to reject you for a job just because you implemented it this way versus

144
00:10:05,660 --> 00:10:06,500
this way.

145
00:10:06,920 --> 00:10:09,860
It depends on how you deliver your solution.

146
00:10:10,280 --> 00:10:13,910
And this is something that we talked about in our how to solve problem section.

147
00:10:14,890 --> 00:10:17,050
How you want to talk through the problem.

148
00:10:17,140 --> 00:10:19,570
Explain to the interviewer why you did.

149
00:10:19,750 --> 00:10:26,770
And as long as you understand the pros and cons of each solution, that's what makes a great engineer.

150
00:10:27,870 --> 00:10:28,980
I'll see you in the next one.

