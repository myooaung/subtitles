1
00:00:01,630 --> 00:00:02,440
Welcome back.

2
00:00:03,250 --> 00:00:09,820
I want to show you one last example, and this is probably the best example of why dynamic programming

3
00:00:09,820 --> 00:00:12,280
is so important.

4
00:00:12,550 --> 00:00:18,850
And as you remember, when I say dynamic programming, which sounds kind of confusing, just think of

5
00:00:18,850 --> 00:00:23,380
caching, of optimizing something using a cache.

6
00:00:23,680 --> 00:00:31,660
One of the best examples of why dynamic programming is so good is our good old friend Fibonacci sequence.

7
00:00:32,140 --> 00:00:37,990
We learned about this in our recursion section of the course where the previous two numbers add up to

8
00:00:37,990 --> 00:00:38,890
the next number.

9
00:00:39,460 --> 00:00:48,310
So that 13 is five plus eight, 34 is 13 plus 21, and it keeps going, keeps growing, keeps growing.

10
00:00:48,610 --> 00:00:50,890
And we learn how to calculate that, right.

11
00:00:51,610 --> 00:00:55,540
We were able to calculate the Fibonacci number quite easily.

12
00:00:55,960 --> 00:00:57,880
We had a function.

13
00:00:59,980 --> 00:01:03,330
Fibonacci, which is a really hard name to spell.

14
00:01:03,370 --> 00:01:04,540
I believe it's this way.

15
00:01:05,370 --> 00:01:12,670
And all we did was we said using recursion, we had a base case of MN is less than two.

16
00:01:12,690 --> 00:01:15,720
In that case we'll return an.

17
00:01:17,530 --> 00:01:19,810
Otherwise we did some fun recursion.

18
00:01:19,810 --> 00:01:23,800
We return Fibonacci and minus one.

19
00:01:25,230 --> 00:01:27,300
Plus Fibonacci.

20
00:01:28,130 --> 00:01:37,820
And minus two, so that if I want to find the Fibonacci number at index of, let's say six.

21
00:01:38,820 --> 00:01:39,930
And I run this.

22
00:01:41,210 --> 00:01:43,460
Oh and V no, this should be.

23
00:01:43,460 --> 00:01:46,000
And as in number let's run that again.

24
00:01:46,010 --> 00:01:52,790
I get eight because zero one, two, three, four, five, six is eight.

25
00:01:52,850 --> 00:01:55,310
If I do seven, I should get 13.

26
00:01:56,850 --> 00:01:57,450
Awesome.

27
00:01:57,540 --> 00:01:59,670
This is something that we should be familiar with.

28
00:01:59,820 --> 00:02:01,530
But let me ask you a question.

29
00:02:01,530 --> 00:02:04,530
How efficient is this function?

30
00:02:05,770 --> 00:02:07,130
And we've talked about it before.

31
00:02:07,150 --> 00:02:07,610
Right.

32
00:02:07,630 --> 00:02:09,090
It's not very efficient.

33
00:02:09,100 --> 00:02:13,090
If I have a variable here that says let's call the calculations.

34
00:02:15,310 --> 00:02:17,170
Which will equal to zero.

35
00:02:17,170 --> 00:02:20,140
And we're just going to increment this.

36
00:02:21,630 --> 00:02:24,180
Every time this function gets called.

37
00:02:24,180 --> 00:02:27,780
And because it's recursive, we know that it gets called a lot of times.

38
00:02:28,080 --> 00:02:31,560
If I do Fibonacci seven, how many calculations is that?

39
00:02:31,710 --> 00:02:33,840
That's 13 calculations.

40
00:02:33,840 --> 00:02:37,980
So 13 times that we ran through the Fibonacci function.

41
00:02:38,490 --> 00:02:40,470
What if I increase that to eight?

42
00:02:41,560 --> 00:02:42,700
21.

43
00:02:43,270 --> 00:02:45,700
What about 934?

44
00:02:45,730 --> 00:02:46,810
What about ten?

45
00:02:47,920 --> 00:02:48,700
55.

46
00:02:48,700 --> 00:02:49,030
All right.

47
00:02:49,030 --> 00:02:50,580
It's increasing pretty fast.

48
00:02:50,590 --> 00:02:51,760
What if I do 12?

49
00:02:52,870 --> 00:02:57,410
144 calculations just to get the 12th index.

50
00:02:57,430 --> 00:02:58,120
Wow.

51
00:02:58,390 --> 00:03:00,520
What if I do 15?

52
00:03:01,770 --> 00:03:04,500
610 calculations.

53
00:03:04,860 --> 00:03:06,030
What about 20?

54
00:03:07,630 --> 00:03:09,060
Holy moly.

55
00:03:09,070 --> 00:03:11,110
Over 6000 calculations.

56
00:03:11,500 --> 00:03:14,470
And just for fun, what if I do 25?

57
00:03:15,220 --> 00:03:16,000
Oh, boy.

58
00:03:16,030 --> 00:03:16,400
All right.

59
00:03:16,420 --> 00:03:17,050
One last time.

60
00:03:17,050 --> 00:03:18,040
Just because we're having fun.

61
00:03:18,040 --> 00:03:18,610
30.

62
00:03:19,730 --> 00:03:20,120
All right.

63
00:03:20,120 --> 00:03:21,860
That's a lot of calculations.

64
00:03:21,950 --> 00:03:28,700
And by the way, if you want your browser to crash, just type in 50 or 60 and see what happens there.

65
00:03:29,980 --> 00:03:35,520
Regardless if we look at this, this well is pretty terrible.

66
00:03:35,530 --> 00:03:44,140
Just to calculate the 30th number or index of a Fibonacci sequence takes that many steps, that many

67
00:03:44,140 --> 00:03:45,100
calculations.

68
00:03:45,800 --> 00:03:47,540
That is a lot.

69
00:03:47,570 --> 00:03:48,920
It's not very efficient.

70
00:03:49,190 --> 00:03:51,080
And we know this, right?

71
00:03:52,040 --> 00:03:58,160
Because in our recursion section we talked about how that Fibonacci sequence and the way we're running

72
00:03:58,160 --> 00:04:01,220
the function is o of two to the power of PN.

73
00:04:01,250 --> 00:04:04,670
Really really bad time complexity.

74
00:04:05,490 --> 00:04:10,150
As we saw just doing 30 calculations takes a lot of steps.

75
00:04:10,170 --> 00:04:18,959
And remember, with recursion we're adding every nested function call adds to the stack, which increases

76
00:04:18,959 --> 00:04:20,370
our memory complexity.

77
00:04:20,730 --> 00:04:26,070
And we would never want to do an operation that costs this much in real life.

78
00:04:26,190 --> 00:04:28,770
So how can we make it more efficient?

79
00:04:28,890 --> 00:04:30,990
Can we make it more efficient?

80
00:04:31,350 --> 00:04:37,680
I mean, if our function if you wrote that function, is your boss going to fire you because it scales

81
00:04:37,680 --> 00:04:38,650
so horribly?

82
00:04:38,670 --> 00:04:41,010
I mean, if your boss is horrible, maybe.

83
00:04:41,010 --> 00:04:44,310
But if, you know, dynamic programming, you can avoid this.

84
00:04:44,310 --> 00:04:49,980
Because what if I told you that we can do o n with this function?

85
00:04:50,610 --> 00:04:53,910
Because with dynamic programming, we can.

86
00:04:54,420 --> 00:04:55,170
That's right.

87
00:04:55,200 --> 00:05:01,380
We can go from o of two to the power of n all the way down to o of n.

88
00:05:01,410 --> 00:05:03,420
Sounds like magic, doesn't it?

89
00:05:03,660 --> 00:05:07,260
And this is where we get to the next step of our dynamic programming.

90
00:05:07,260 --> 00:05:13,020
We can reduce the time and space complexity of our algorithm by using memorization.

91
00:05:14,160 --> 00:05:20,220
And we can do this because the solution to each sub problem is what we call optimal.

92
00:05:20,250 --> 00:05:24,870
That means we do a lot of problems repeatedly that are the same.

93
00:05:25,260 --> 00:05:30,090
In the next video, we're going to explain this concept and see how we can use memorization.

94
00:05:30,540 --> 00:05:31,500
I'll see you on that one.

95
00:05:32,100 --> 00:05:32,730
Bye bye.

