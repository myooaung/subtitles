WEBVTT
1
00:00:01.580 --> 00:00:02.340
Welcome back.

2
00:00:02.360 --> 00:00:04.330
Let's talk about rule number three.

3
00:00:04.340 --> 00:00:07.870
That is different terms for inputs.

4
00:00:07.880 --> 00:00:12.770
And this is one of the trickiest parts of an interview that a lot of people make mistakes on.

5
00:00:13.160 --> 00:00:16.670
But once you understand it, it becomes really easy to spot.

6
00:00:16.700 --> 00:00:18.230
So let's look at an example.

7
00:00:19.270 --> 00:00:24.960
I have the exact same function we saw in the last video compress boxes twice.

8
00:00:24.970 --> 00:00:30.710
We have the boxes array and we just have two loops here.

9
00:00:30.730 --> 00:00:37.690
I'm using the for each syntax in JavaScript, but we're just looping twice over the same array.

10
00:00:37.840 --> 00:00:42.250
And as I said before, the big o of this is going to be two and.

11
00:00:43.240 --> 00:00:47.110
But because we drop the constants, it becomes o of n.

12
00:00:47.930 --> 00:00:52.130
But the third rule states that different terms for inputs.

13
00:00:52.810 --> 00:00:54.790
And what that means is.

14
00:00:54.790 --> 00:00:56.980
Well, first of all, let me ask you a question.

15
00:00:57.250 --> 00:01:02.200
What if here I have boxes as the first parameter?

16
00:01:03.170 --> 00:01:10.340
And then we have boxes too as the second parameter and maybe this second for loop.

17
00:01:11.360 --> 00:01:15.410
Actually loops over the second boxes.

18
00:01:16.530 --> 00:01:17.820
What happens here?

19
00:01:17.850 --> 00:01:20.070
What is the big O?

20
00:01:21.580 --> 00:01:28.000
And during an interview, a lot of people trip up and say that this is well still oh when it's going

21
00:01:28.000 --> 00:01:30.610
to be oh two nw.

22
00:01:30.640 --> 00:01:31.690
Drop the consonants.

23
00:01:31.690 --> 00:01:32.380
O n.

24
00:01:33.040 --> 00:01:35.050
Now is this right?

25
00:01:36.550 --> 00:01:44.710
No, because the third rule states that different terms for inputs and remember boxes.

26
00:01:44.710 --> 00:01:49.120
The first one and then the second one are two different inputs.

27
00:01:49.630 --> 00:01:52.350
One could be 100 items long.

28
00:01:52.430 --> 00:01:55.450
Another one can be just one item.

29
00:01:55.570 --> 00:02:00.160
So this first for loop is going to depend on how big the first.

30
00:02:01.040 --> 00:02:07.970
Item or first input is, and then the second for loop depends on how big this one is.

31
00:02:09.000 --> 00:02:14.940
And NW is just an arbitrary letter that we decided on in this case.

32
00:02:14.940 --> 00:02:19.560
The big O of this function would be something like a.

33
00:02:20.650 --> 00:02:24.580
For the first for loop, which is the first input.

34
00:02:25.980 --> 00:02:27.270
Plus be.

35
00:02:28.590 --> 00:02:38.460
The big o of this function is actually a plus B or an plus M or boxes, one plus boxes too.

36
00:02:39.120 --> 00:02:45.780
So keep that in mind just because you see two for loops, one after another doesn't mean that they're

37
00:02:45.780 --> 00:02:47.640
looping over the same items.

38
00:02:47.970 --> 00:02:55.500
Now, you might be asking yourself, Andre, what happens if these loops are nested?

39
00:02:55.920 --> 00:02:59.520
So far we've only worked with loops that are one after another.

40
00:02:59.670 --> 00:03:04.440
What if this loop was inside of this loop?

41
00:03:05.720 --> 00:03:11.090
Well, let's get into the next video and talk about another common pattern we see with they go.

42
00:03:11.120 --> 00:03:12.620
That is nested loops.

