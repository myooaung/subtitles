1
00:00:01,120 --> 00:00:06,790
There are two main things we talk about when we say this is good code.

2
00:00:06,820 --> 00:00:10,450
But before I show you, what do you think good code is?

3
00:00:10,780 --> 00:00:11,730
Think about that.

4
00:00:11,740 --> 00:00:15,640
What would you tell somebody if you're asking them to write good code?

5
00:00:16,460 --> 00:00:18,080
All right, I'll just give you the answer.

6
00:00:18,620 --> 00:00:23,660
You see, good code can be described in two things or two points.

7
00:00:24,200 --> 00:00:27,170
One is readability.

8
00:00:28,330 --> 00:00:31,620
Is your code just generally clean?

9
00:00:31,630 --> 00:00:33,790
Can others understand your code?

10
00:00:33,910 --> 00:00:37,420
And then we have scalable code.

11
00:00:37,510 --> 00:00:38,650
What does that mean?

12
00:00:38,920 --> 00:00:49,900
Well, bingo notation is what allows us to measure this idea of scalable code that can scale something

13
00:00:49,900 --> 00:00:54,670
that we're going to get into and you're going to become more familiar with as we go through this section.

14
00:00:55,300 --> 00:01:00,520
We're also going to talk about readable code throughout this entire course, but touch upon it a little

15
00:01:00,520 --> 00:01:02,890
bit more in the next section.

16
00:01:03,070 --> 00:01:09,160
But for now, because this is the big section, we're focusing on this idea of scalable code.

17
00:01:09,470 --> 00:01:09,790
Okay.

18
00:01:09,820 --> 00:01:12,280
What does this really mean, though?

19
00:01:12,730 --> 00:01:17,440
Well, I want you to imagine we have a task where we want to bake a cake.

20
00:01:17,770 --> 00:01:20,620
We have a recipe over here.

21
00:01:20,890 --> 00:01:26,530
And this recipe we're going to use in our kitchen to bake a cake.

22
00:01:27,010 --> 00:01:30,910
And there's a good way of baking a cake and a bad way.

23
00:01:30,910 --> 00:01:31,570
Right.

24
00:01:32,530 --> 00:01:35,650
We give it the instructions, that is the recipe.

25
00:01:35,650 --> 00:01:43,930
And hopefully this recipe and instructions work well with our kitchen so that we can bake a cake quickly

26
00:01:44,260 --> 00:01:46,210
and a good cake at that.

27
00:01:46,480 --> 00:01:49,180
Well, computers are machines.

28
00:01:49,820 --> 00:01:53,870
And these machines need to work in order to produce something for us.

29
00:01:54,230 --> 00:01:56,210
And computers work in the same way.

30
00:01:56,510 --> 00:02:04,130
We have these instructions that we give it through code and these instructions that we give to our machines,

31
00:02:04,130 --> 00:02:11,900
our computers, give these instructions that provide for us some sort of an output, for example, to

32
00:02:11,900 --> 00:02:12,920
turn on the light.

33
00:02:13,490 --> 00:02:18,380
We give the computer instruction to say, Hey, turn on the light in our room.

34
00:02:18,800 --> 00:02:24,680
A coder is someone that gives these instructions, just like there are many ways to take a cake into

35
00:02:24,680 --> 00:02:25,280
a kitchen.

36
00:02:25,280 --> 00:02:32,950
Or just like there are many ways to bake a cake in the kitchen with many recipes, ingredients and instructions.

37
00:02:32,960 --> 00:02:36,320
There are many ways to solve a problem through code.

38
00:02:36,800 --> 00:02:40,450
There are efficient and inefficient ways to give instructions.

39
00:02:40,460 --> 00:02:42,500
So let's go to a coding example.

40
00:02:42,920 --> 00:02:45,080
I'm going to use Replicated.

41
00:02:45,110 --> 00:02:50,690
And if you're not familiar with this, make sure you check out the video that I've listed down below

42
00:02:50,690 --> 00:02:54,410
here, which explains how you can run your code in this course.

43
00:02:54,890 --> 00:02:56,300
I'm going to just log in.

44
00:02:58,140 --> 00:03:02,640
And I already have my JavaScript environments set up over here.

45
00:03:03,690 --> 00:03:06,870
And I prefer having the dark theme.

46
00:03:06,900 --> 00:03:09,930
I think that looks better on your eyes for you.

47
00:03:09,930 --> 00:03:12,630
At least I hope you don't mind the darkness.

48
00:03:12,810 --> 00:03:16,140
But how can I demonstrate this idea of code?

49
00:03:16,830 --> 00:03:18,150
Let's do something fun here.

50
00:03:18,720 --> 00:03:22,680
Using JavaScript, I'm going to say const Nemo.

51
00:03:23,560 --> 00:03:29,140
We have an array that contains the String Nemo.

52
00:03:30,820 --> 00:03:38,620
And we want to create a function here that is called Find Nemo.

53
00:03:39,280 --> 00:03:42,760
And this function is going to receive an array.

54
00:03:43,900 --> 00:03:46,600
And it's going to be a very simple function.

55
00:03:46,840 --> 00:03:52,840
We're going to create a loop that you'll see in most languages in JavaScript.

56
00:03:52,900 --> 00:03:55,570
We can do that easily by saying four.

57
00:03:56,110 --> 00:03:59,200
And we'll give let I equals.

58
00:04:00,400 --> 00:04:01,060
Zero.

59
00:04:01,630 --> 00:04:10,990
And as long as AI is smaller than the array length, that is the length of our array.

60
00:04:10,990 --> 00:04:12,850
And then we're going to increment.

61
00:04:14,010 --> 00:04:15,240
I every time.

62
00:04:16,700 --> 00:04:22,640
Again, this isn't a JavaScript course, so hopefully this is familiar to you any sort of loop that

63
00:04:22,640 --> 00:04:24,050
you want in your language.

64
00:04:24,110 --> 00:04:26,600
And we're just going to simply say that if.

65
00:04:26,990 --> 00:04:29,150
Array I.

66
00:04:30,140 --> 00:04:32,240
Equals Nemo.

67
00:04:33,410 --> 00:04:37,280
So if we find Nemo, we're just going to console dot.

68
00:04:38,550 --> 00:04:39,300
Log.

69
00:04:40,540 --> 00:04:42,250
Found Nemo.

70
00:04:42,760 --> 00:04:43,480
We're very excited.

71
00:04:43,480 --> 00:04:44,080
We found.

72
00:04:45,780 --> 00:04:47,250
All right, that's it.

73
00:04:47,400 --> 00:04:55,320
And if I just simply run the function now, find Nemo, and we'll just give it the array.

74
00:04:55,350 --> 00:04:56,550
Nemo, over here.

75
00:04:57,630 --> 00:05:03,900
And make sure that I spell lent properly and we click run here.

76
00:05:05,170 --> 00:05:07,750
We have found Nemo on the right.

77
00:05:07,780 --> 00:05:09,790
Let me make this a little bit bigger so you can see.

78
00:05:10,580 --> 00:05:12,770
So we found Nemo.

79
00:05:13,130 --> 00:05:15,650
This is the instruction that we gave the computer.

80
00:05:15,920 --> 00:05:22,190
We told it that we have an array and we have a function, an action that we want to perform called Find

81
00:05:22,190 --> 00:05:22,730
Nemo.

82
00:05:22,760 --> 00:05:24,950
That takes an array, which is Nemo.

83
00:05:25,960 --> 00:05:28,870
It's going to receive this array.

84
00:05:29,610 --> 00:05:31,830
Then it's going to loop over the array.

85
00:05:32,340 --> 00:05:39,450
We're going to say that AI is going to equal zero and because I is zero right now and the array length

86
00:05:39,480 --> 00:05:44,370
of Nemo is one, we're going to go through the loop.

87
00:05:45,290 --> 00:05:51,440
We're going to check if array index of zero, which is NIM over here.

88
00:05:51,440 --> 00:05:55,760
So this is going to turn into Nemo.

89
00:05:56,120 --> 00:06:00,860
And because this is true, we're going to console.log found Nemo.

90
00:06:02,200 --> 00:06:05,020
Now, why did I just show you this example?

91
00:06:05,050 --> 00:06:08,260
Let me just bring this back to the way it was.

92
00:06:09,290 --> 00:06:16,940
I showed you this example because this is an instruction that we're giving our computer to find Nemo.

93
00:06:17,090 --> 00:06:19,700
You see, we call this the runtime.

94
00:06:19,820 --> 00:06:25,910
How long does it take to run a certain problem through a function or a task?

95
00:06:26,150 --> 00:06:33,290
How can we measure the big o of something like this or the efficiency of this code?

96
00:06:34,790 --> 00:06:37,580
In the next video, we're going to get a little bit deeper.

97
00:06:37,610 --> 00:06:43,250
We're going to try and measure the performance of this code and see what happens when the array gets

98
00:06:43,250 --> 00:06:44,570
larger and larger.

99
00:06:45,230 --> 00:06:52,310
And we're going to tie things together as to what scalable means and how big O allows us to measure

100
00:06:52,310 --> 00:06:53,420
the scalability.

101
00:06:54,380 --> 00:06:55,430
See you in the next video.

102
00:06:55,760 --> 00:06:56,270
Bye bye.

