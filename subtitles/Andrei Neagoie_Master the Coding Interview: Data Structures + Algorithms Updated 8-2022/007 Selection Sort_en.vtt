WEBVTT
1
00:00:01.080 --> 00:00:01.930
Welcome back.

2
00:00:01.950 --> 00:00:07.650
Let's talk about our second sorting algorithm and it's called selection sort.

3
00:00:08.970 --> 00:00:15.000
Now selection sort is again one of the simpler possible ways to sort a list.

4
00:00:16.079 --> 00:00:22.380
And the algorithm works by scanning a list of items for the smallest element and then swapping that

5
00:00:22.380 --> 00:00:25.260
element for the one in the first position.

6
00:00:26.060 --> 00:00:28.400
Let me show you with this animation here.

7
00:00:28.940 --> 00:00:31.850
We start with the first item and then the second item.

8
00:00:32.299 --> 00:00:37.130
The red here signifies that it's the smallest item that it's seen.

9
00:00:37.640 --> 00:00:41.920
And the blue is scanning ahead to find the smallest item.

10
00:00:41.930 --> 00:00:45.240
So right now, eight is the smallest item, but we encounter five.

11
00:00:45.260 --> 00:00:47.870
So five switches to the smallest item.

12
00:00:47.870 --> 00:00:49.070
We encounter two.

13
00:00:49.100 --> 00:00:51.410
So two becomes a smallest item.

14
00:00:52.570 --> 00:00:53.590
We keep going.

15
00:00:53.590 --> 00:00:56.020
Six is not smaller than two.

16
00:00:56.110 --> 00:00:57.280
Nine isn't.

17
00:00:57.280 --> 00:00:58.190
Three isn't.

18
00:00:58.210 --> 00:00:59.410
We encounter one.

19
00:00:59.440 --> 00:01:01.330
One becomes the smallest item.

20
00:01:01.330 --> 00:01:02.320
We keep going.

21
00:01:02.320 --> 00:01:03.250
We find zero.

22
00:01:03.250 --> 00:01:05.410
So zero becomes the smallest item.

23
00:01:05.410 --> 00:01:07.840
And we've just finished the list.

24
00:01:08.520 --> 00:01:14.280
So now we move zero to the first index in our list.

25
00:01:14.580 --> 00:01:16.680
So we swap it out.

26
00:01:17.640 --> 00:01:23.910
And then we keep going back to the beginning, finding the smallest item.

27
00:01:24.710 --> 00:01:26.990
Through the list, which is one.

28
00:01:27.720 --> 00:01:32.520
And then placing that in the second index and we keep going like this.

29
00:01:33.830 --> 00:01:36.320
Until we find the smallest item.

30
00:01:36.320 --> 00:01:37.730
Place it next in the list.

31
00:01:37.730 --> 00:01:38.870
Next in the list.

32
00:01:38.870 --> 00:01:44.510
Next in the list until we have our list completely sorted.

33
00:01:45.820 --> 00:01:53.020
As you can see with selection sought, we're still going to see a time complexity of o of MN squared.

34
00:01:53.680 --> 00:02:00.310
If we look at the time complexity chart, we see that selection sort is not very fast.

35
00:02:00.340 --> 00:02:09.759
Similar to bubble sort, we have those nested for loops but uses a space complexity of of one.

36
00:02:09.789 --> 00:02:13.600
It doesn't really add any additional data besides the input.

37
00:02:14.050 --> 00:02:21.430
Now, using the animation that you just saw, can you implement your own selection sword?

38
00:02:21.760 --> 00:02:27.400
I'm going to leave this for you as an exercise using what you know from the bubble sort and what you

39
00:02:27.400 --> 00:02:28.840
just saw for selection sword.

40
00:02:28.870 --> 00:02:34.600
How you can use that information to sort the list using this algorithm.

41
00:02:35.020 --> 00:02:37.420
And I'll show you the solution in the next video.

