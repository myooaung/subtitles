WEBVTT
1
00:00:00.920 --> 00:00:01.910
Welcome back.

2
00:00:01.940 --> 00:00:05.450
Let's implement one last feature in our hash table over here.

3
00:00:05.840 --> 00:00:09.350
I want to create something called keys.

4
00:00:11.130 --> 00:00:20.640
And Keys allows us to iterate or loop through all the keys of our hash table, in this case, grapes

5
00:00:20.640 --> 00:00:21.390
and apples.

6
00:00:21.390 --> 00:00:23.910
And let's add a few more just for fun.

7
00:00:23.910 --> 00:00:26.520
So we see what's going on.

8
00:00:27.150 --> 00:00:31.020
We'll add oranges and we don't like them too much, so we're only going to add two of them.

9
00:00:32.270 --> 00:00:34.940
Now if we run keys.

10
00:00:36.110 --> 00:00:38.390
Ideally it's going to.

11
00:00:39.940 --> 00:00:46.540
Iterate and spit out grapes, apples and oranges for us to see what we need to go shopping for.

12
00:00:47.480 --> 00:00:49.670
How would we go about building this?

13
00:00:50.090 --> 00:00:53.130
Well, because we're going to do some sort of looping.

14
00:00:53.150 --> 00:00:59.120
I'm going to start off by creating a constant let's call it keys array.

15
00:00:59.810 --> 00:01:01.670
And this is going to be an empty array.

16
00:01:02.990 --> 00:01:03.920
Within here.

17
00:01:03.920 --> 00:01:05.450
We're going to loop.

18
00:01:06.060 --> 00:01:06.510
So.

19
00:01:06.510 --> 00:01:08.490
For let.

20
00:01:08.730 --> 00:01:09.420
I.

21
00:01:09.840 --> 00:01:10.980
Equals zero.

22
00:01:13.630 --> 00:01:18.070
And as long as AI is going to be less than this datapoint length.

23
00:01:20.840 --> 00:01:22.690
We're going to increment I.

24
00:01:24.120 --> 00:01:24.960
In here.

25
00:01:24.960 --> 00:01:31.590
We're saying we want to loop through all 50 item spaces, all the shelves, one by one, we're going

26
00:01:31.590 --> 00:01:32.480
to loop through them.

27
00:01:32.490 --> 00:01:32.940
Yep.

28
00:01:32.940 --> 00:01:34.620
That's a lot of iterations.

29
00:01:34.890 --> 00:01:36.420
And if.

30
00:01:37.230 --> 00:01:38.370
In the shelf.

31
00:01:38.370 --> 00:01:46.650
There is some sort of data if it's not undefined, completely empty, and there is something valuable

32
00:01:46.650 --> 00:01:48.540
for us that we want to look.

33
00:01:48.540 --> 00:01:56.400
Because remember, we allocate 50 spaces on the shelf, but we've only placed three items or three data

34
00:01:56.400 --> 00:01:57.210
points on that.

35
00:01:57.860 --> 00:02:07.010
So if there is something in that memory space, in that case we can just say keys are a dot, push this

36
00:02:07.010 --> 00:02:13.190
dot data and we grab the index.

37
00:02:13.190 --> 00:02:20.030
So the first or the array that we're at right here and then we want to grab apples, right.

38
00:02:20.630 --> 00:02:24.590
Well, if I do zero here and now.

39
00:02:24.590 --> 00:02:25.490
Hit, run.

40
00:02:26.090 --> 00:02:27.710
Well, we have to return something.

41
00:02:28.860 --> 00:02:33.030
Let's return here the key story at the end of all this.

42
00:02:33.180 --> 00:02:39.690
So after all the loops, we're going to simply say return keys, array.

43
00:02:39.870 --> 00:02:41.130
If I run this.

44
00:02:42.450 --> 00:02:45.270
I get grapes, apples and oranges.

45
00:02:45.570 --> 00:02:46.710
That's fantastic.

46
00:02:46.710 --> 00:02:53.310
But oh, I just wanted grapes, apples and oranges to see what's going on here.

47
00:02:53.340 --> 00:02:57.810
Let's console.log this dot data.

48
00:02:59.620 --> 00:03:00.280
I.

49
00:03:02.360 --> 00:03:05.360
Which is what we're doing here, what we're pushing.

50
00:03:06.040 --> 00:03:09.490
And if I run this, we see that we get.

51
00:03:10.970 --> 00:03:13.940
Arrays within the array.

52
00:03:14.360 --> 00:03:16.070
Because remember.

53
00:03:16.790 --> 00:03:25.010
We have one massive array and each time we create a new shelf space, we have to have a new array that

54
00:03:25.010 --> 00:03:26.870
we create and we push into that.

55
00:03:27.260 --> 00:03:31.640
So a little bit of a gotcha here, we have to say.

56
00:03:34.830 --> 00:03:38.310
Zero, which removes the outer array.

57
00:03:39.160 --> 00:03:46.210
And now another zero to grab the first index of this array.

58
00:03:47.510 --> 00:03:48.440
Just like that.

59
00:03:50.070 --> 00:03:52.110
So if we add another.

60
00:03:53.970 --> 00:03:57.390
Zero in there to access the first index of the array.

61
00:03:57.420 --> 00:03:58.920
We click run.

62
00:03:58.950 --> 00:03:59.730
Look at that.

63
00:03:59.730 --> 00:04:02.400
We get grapes, apples and oranges.

64
00:04:02.760 --> 00:04:03.480
Well done.

65
00:04:03.480 --> 00:04:06.240
We've just implemented a hash table.

66
00:04:07.030 --> 00:04:13.840
And you may have noticed something a downside of hash tables we had to loop here.

67
00:04:13.840 --> 00:04:14.500
Right.

68
00:04:14.530 --> 00:04:21.279
We had a four loop looping through the entire memory space in order to find our keys.

69
00:04:21.459 --> 00:04:23.740
That was so much easier with the raise.

70
00:04:23.740 --> 00:04:28.810
With the raise, we would have had just three items and we would have looped over three times.

71
00:04:28.840 --> 00:04:32.470
Instead, here we looped over 50 times.

72
00:04:32.500 --> 00:04:34.630
Imagine if we had 500.

73
00:04:34.930 --> 00:04:36.370
That's even more.

74
00:04:36.610 --> 00:04:38.060
How exciting is this?

75
00:04:38.080 --> 00:04:46.540
We're starting to learn how things work underneath the hood so that now we have an idea of, hmm, maybe

76
00:04:46.540 --> 00:04:51.040
if we're using this type of method, objects might not be the best idea.

77
00:04:53.170 --> 00:04:56.140
And that's one drawback of objects or hash tables.

78
00:04:56.230 --> 00:05:05.170
In JavaScript, we can use something like four and loops to loop over items in an object.

79
00:05:06.040 --> 00:05:08.470
Which again is very, very slow.

80
00:05:09.040 --> 00:05:12.910
And as you might realize, there's no guaranteed order.

81
00:05:14.000 --> 00:05:14.810
Every time.

82
00:05:14.810 --> 00:05:15.590
We're just.

83
00:05:16.640 --> 00:05:17.690
Adding something.

84
00:05:19.160 --> 00:05:20.930
To our address.

85
00:05:20.990 --> 00:05:29.300
But when we grab items from the address, we just go from 0 to 50, even though the items are just randomly

86
00:05:29.300 --> 00:05:30.790
placed in different shelves.

87
00:05:30.800 --> 00:05:34.310
But I hope now you actually get to see how it works.

88
00:05:34.310 --> 00:05:39.200
We're putting items randomly in a shelf, but when we retrieve them, they're all unordered.

89
00:05:41.120 --> 00:05:48.380
And that's why coding things out, even though you most likely won't get this asked in an interview.

90
00:05:48.410 --> 00:05:52.970
Knowing how things work allows you to talk about them intelligently.

91
00:05:53.480 --> 00:05:56.390
And I hope this exercise has done that for you.

92
00:05:56.840 --> 00:06:03.770
I'll leave this for you to play around with and perhaps add different methods like values that grabs

93
00:06:03.770 --> 00:06:05.900
the values instead of the keys.

94
00:06:06.440 --> 00:06:11.180
But for now, let's finalize our talk of hash tables by comparing them to arrays.

