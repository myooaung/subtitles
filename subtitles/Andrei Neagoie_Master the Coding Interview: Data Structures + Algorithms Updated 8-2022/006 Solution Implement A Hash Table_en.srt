1
00:00:00,730 --> 00:00:01,750
Welcome back.

2
00:00:01,810 --> 00:00:05,770
It's time to walk through our own implementation of Hash Table.

3
00:00:06,400 --> 00:00:11,530
Now, before we get started, I do want to mention something that you may be wondering about that is

4
00:00:11,530 --> 00:00:13,640
this underscore over here.

5
00:00:13,660 --> 00:00:18,820
What does that mean in most other languages like Java?

6
00:00:19,560 --> 00:00:23,910
When you create a class, you can have private properties.

7
00:00:24,090 --> 00:00:28,080
That is properties that I can't access outside of this class.

8
00:00:28,080 --> 00:00:37,260
So I wouldn't be able to do my hash table, underscore hash and access this property or method.

9
00:00:38,810 --> 00:00:41,750
Now with JavaScript is six.

10
00:00:42,110 --> 00:00:43,640
That's not really possible.

11
00:00:43,820 --> 00:00:52,340
And there is a common standard, which is to put underscore here and the JavaScript world, which says

12
00:00:52,340 --> 00:00:54,170
this is a private property.

13
00:00:54,710 --> 00:00:56,480
Now this is just.

14
00:00:57,340 --> 00:00:58,030
Meaningless.

15
00:00:58,030 --> 00:00:58,360
Really.

16
00:00:58,360 --> 00:01:07,390
I can still access the hash method, but it is a developer standard in the JavaScript community to let

17
00:01:07,390 --> 00:01:12,520
other developers know that, hey, you shouldn't be accessing this even though you technically can.

18
00:01:14,010 --> 00:01:19,950
And there are ways to make it work and have private properties, but it requires things like closure

19
00:01:19,950 --> 00:01:25,930
symbols or weak maps, which again is beyond the scope of this course, and we don't need to worry about

20
00:01:25,930 --> 00:01:26,070
it.

21
00:01:26,370 --> 00:01:28,700
So that's where the underscore is coming from.

22
00:01:28,710 --> 00:01:31,890
We're not usually going to access hash function like this.

23
00:01:32,520 --> 00:01:33,000
All right.

24
00:01:33,000 --> 00:01:37,050
Now that we got that out of the way, let's talk a little bit about what this does.

25
00:01:37,170 --> 00:01:45,390
If I enter in here grapes, we first create a new variable that is hash that is equal to zero.

26
00:01:45,510 --> 00:01:50,430
And then this key, we're going to grab the length of grapes.

27
00:01:50,430 --> 00:01:53,610
So that is one, two, three, four, five, six.

28
00:01:54,380 --> 00:01:58,460
And we're going to add zero.

29
00:01:59,590 --> 00:02:00,920
Which comes from the hash.

30
00:02:00,940 --> 00:02:04,150
Plus key character code at.

31
00:02:04,210 --> 00:02:13,450
And character code at in JavaScript simply gives us an integer between zero and this number representing

32
00:02:13,450 --> 00:02:15,010
the UTF 16 code.

33
00:02:15,010 --> 00:02:16,450
So that's just an encoding.

34
00:02:17,170 --> 00:02:20,560
It's pretty much saying, give me a character code.

35
00:02:21,280 --> 00:02:28,390
Because remember in memory, a string or a letter is represented as a number.

36
00:02:28,720 --> 00:02:35,080
So this method allows us to say at index, whatever we put in the parameter.

37
00:02:35,770 --> 00:02:39,040
So let's say we're looking at index of I.

38
00:02:39,070 --> 00:02:40,870
The very first one will be G.

39
00:02:41,410 --> 00:02:44,770
We're going to get the character code for G.

40
00:02:44,860 --> 00:02:46,000
That is a number.

41
00:02:47,570 --> 00:02:53,750
We multiply that by the index again just to make sure it's makes a unique.

42
00:02:53,750 --> 00:03:03,110
And then we use what's called the modulo operator to make sure that this stays within the length of

43
00:03:03,110 --> 00:03:03,890
50.

44
00:03:04,960 --> 00:03:08,380
The size of our data.

45
00:03:08,890 --> 00:03:10,540
And then we return the hash.

46
00:03:10,570 --> 00:03:20,140
An easy way to see what's happening here is to simply cancel the log hash.

47
00:03:20,320 --> 00:03:22,840
If I run this, we see that.

48
00:03:24,080 --> 00:03:25,700
It's going to loop.

49
00:03:26,480 --> 00:03:28,700
Through our grapes.

50
00:03:29,830 --> 00:03:33,730
Character by character is going to generate some sort of a hash.

51
00:03:35,060 --> 00:03:39,140
And because this hash gets constantly looped over.

52
00:03:40,390 --> 00:03:43,300
We include whatever the generated.

53
00:03:43,300 --> 00:03:44,980
Let's see, the first one is zero.

54
00:03:45,100 --> 00:03:49,000
It's going to say zero plus whatever this is.

55
00:03:49,090 --> 00:03:54,970
Then the next duration hash is going to equal 14 and generate something else, which is eight and keeps

56
00:03:54,970 --> 00:03:57,880
going, keeps going, keeps going until we get 23.

57
00:03:59,060 --> 00:04:02,240
You can take your time and go through this code if you really want to.

58
00:04:02,270 --> 00:04:05,330
Again, this is not the focus of this video, so let's move on.

59
00:04:07,430 --> 00:04:08,930
Using our hash function.

60
00:04:08,930 --> 00:04:12,200
Let's do our very first method.

61
00:04:13,190 --> 00:04:16,790
Let's create the set method.

62
00:04:17,959 --> 00:04:20,779
This set method is going to receive a key.

63
00:04:22,340 --> 00:04:23,780
And a value.

64
00:04:25,730 --> 00:04:27,380
And just so we can see this.

65
00:04:28,440 --> 00:04:29,960
And what's going to happen.

66
00:04:29,970 --> 00:04:38,010
We'll run this method here saying we want grapes to equal 10,000 lots of grapes because they are delicious.

67
00:04:38,250 --> 00:04:39,540
If I run this.

68
00:04:40,460 --> 00:04:44,210
I get undefined because, well, this isn't really doing anything.

69
00:04:44,480 --> 00:04:51,830
The first thing we want to do is to create a variable called address, which will represent where we

70
00:04:51,830 --> 00:04:53,480
want to store this information.

71
00:04:55,220 --> 00:04:57,230
And we'll say this dot.

72
00:05:00,640 --> 00:05:01,120
Key.

73
00:05:02,470 --> 00:05:04,090
So all we're saying is.

74
00:05:05,200 --> 00:05:06,070
Store.

75
00:05:07,140 --> 00:05:07,920
This.

76
00:05:08,660 --> 00:05:17,240
Data that we're going to insert the key and value in this address space that is created by our hash

77
00:05:17,240 --> 00:05:20,930
function and we give it the key of grapes.

78
00:05:21,080 --> 00:05:28,190
Remember our little animation we're sending the grapes to into that magic little box that is the hash

79
00:05:28,190 --> 00:05:28,760
function.

80
00:05:29,240 --> 00:05:32,240
From there, we simply say if.

81
00:05:33,120 --> 00:05:35,100
This DOT data.

82
00:05:37,640 --> 00:05:38,270
Address.

83
00:05:40,210 --> 00:05:49,240
If it doesn't exist and there's nothing there, because remember, in a hash table, we can have collisions.

84
00:05:49,240 --> 00:05:55,870
And because we only have 50 spaces, 50 shelves here, we might have these collisions with enough data.

85
00:05:56,230 --> 00:06:00,040
So we're going to check if there is nothing there.

86
00:06:01,020 --> 00:06:02,080
In that case.

87
00:06:02,100 --> 00:06:04,020
Well, just simply add that data.

88
00:06:04,020 --> 00:06:06,300
We're going to say this data.

89
00:06:08,890 --> 00:06:11,920
Address is going to be.

90
00:06:13,070 --> 00:06:13,910
An array.

91
00:06:14,990 --> 00:06:17,600
And in this new.

92
00:06:18,250 --> 00:06:20,240
Space, new address space.

93
00:06:20,260 --> 00:06:22,180
We're simply going to.

94
00:06:24,070 --> 00:06:24,760
Had.

95
00:06:30,170 --> 00:06:34,460
By doing push key value.

96
00:06:36,350 --> 00:06:38,360
So let's run this and see what happens.

97
00:06:39,270 --> 00:06:41,760
Oh, and I have a misspelt address here.

98
00:06:41,790 --> 00:06:42,810
Let's run that again.

99
00:06:43,290 --> 00:06:52,290
I get undefined, but let's see what happens if I just console.log this dot data here.

100
00:06:55,580 --> 00:06:56,840
Well, check that out.

101
00:06:57,380 --> 00:07:00,650
We have 23 empty items.

102
00:07:02,190 --> 00:07:05,610
On the 24th item, we have grapes.

103
00:07:06,580 --> 00:07:07,580
10,000.

104
00:07:07,600 --> 00:07:11,380
An array here and then 26 empty items after that.

105
00:07:11,470 --> 00:07:18,990
Remember, we have 50 shelves in our memory and we have 23, 24 plus 26.

106
00:07:19,000 --> 00:07:23,270
That's 50, except our grapes was inserted somewhere in 50.

107
00:07:23,290 --> 00:07:25,000
It looks like the 24 spot.

108
00:07:25,910 --> 00:07:26,720
Very cool.

109
00:07:27,750 --> 00:07:32,220
But what happens if this already exists?

110
00:07:33,940 --> 00:07:42,280
If I change the hash table to just have, let's say, two memory spaces and I click run here, I get

111
00:07:42,280 --> 00:07:43,420
one empty and grapes.

112
00:07:43,420 --> 00:07:48,130
And if I change this around, oh, do you see that?

113
00:07:49,650 --> 00:07:57,330
If I click again and let's say go back to just grapes, check out what happens to my hash table.

114
00:07:57,780 --> 00:08:02,640
I click run and it just deleted my previous.

115
00:08:03,690 --> 00:08:04,440
Entry.

116
00:08:04,680 --> 00:08:10,010
We have a collision, but we're not doing anything about it and we've just deleted our data.

117
00:08:10,020 --> 00:08:13,760
That could have been really important user data.

118
00:08:13,770 --> 00:08:15,390
We definitely don't want that.

119
00:08:15,390 --> 00:08:20,250
So in order to solve that, we simply say if.

120
00:08:21,110 --> 00:08:28,760
Because we're checking here if there is nothing in that address space, do this otherwise.

121
00:08:31,510 --> 00:08:37,270
Simply add on to that array so we can actually just.

122
00:08:39,880 --> 00:08:41,950
We're on the same command here.

123
00:08:42,980 --> 00:08:47,900
A nicer and cleaner way of doing this is to actually just take out the else.

124
00:08:48,680 --> 00:08:53,050
Because regardless, we're always going to be pushing key and value.

125
00:08:53,060 --> 00:08:58,250
We're always going to be adding the key and value that we set, we add to the data.

126
00:08:58,760 --> 00:09:02,480
So all we do is just remove this.

127
00:09:03,550 --> 00:09:08,980
So that when I run this and just so we know what's happening, let's.

128
00:09:10,020 --> 00:09:12,410
Return this dot data here.

129
00:09:12,420 --> 00:09:13,680
I'm going to hit run.

130
00:09:14,340 --> 00:09:19,860
And if we add here, let's say another item this time we'll say.

131
00:09:21,210 --> 00:09:25,350
Apples and just 54 apples if I run this.

132
00:09:25,860 --> 00:09:27,240
Did you see what happened here?

133
00:09:28,730 --> 00:09:34,280
If you look closely, we have one empty item and then an array.

134
00:09:35,070 --> 00:09:45,240
That contains inside of it the first index that is an array and a second index that is another array

135
00:09:45,480 --> 00:09:51,960
because we've just pushed onto our existing array because our memory space is only two.

136
00:09:53,070 --> 00:09:53,910
Very cool.

137
00:09:54,180 --> 00:09:55,470
That wasn't too bad.

138
00:09:55,920 --> 00:09:56,880
Let's keep going.

139
00:09:56,910 --> 00:09:57,960
The next one is.

140
00:09:57,960 --> 00:10:01,740
Well, I want to grab be able to grab grapes and apples.

141
00:10:01,830 --> 00:10:07,050
We can use the get method here, which will receive a key.

142
00:10:08,620 --> 00:10:11,230
And this method is going to work.

143
00:10:13,880 --> 00:10:19,550
Very nicely by just saying get and then what we want to grab, which will be grapes.

144
00:10:20,350 --> 00:10:26,800
We're going to do the exact same thing in that we run it through that black box where we're going to

145
00:10:26,800 --> 00:10:27,520
create.

146
00:10:28,200 --> 00:10:33,300
Or we're going to use the hash function to get the address of where we want to go.

147
00:10:33,990 --> 00:10:39,600
And now we have the address to where we want to grab our information from.

148
00:10:41,110 --> 00:10:48,390
However, remember that we stored this information in a bucket so we have grapes and 10,000.

149
00:10:48,400 --> 00:10:49,510
How do we grab that?

150
00:10:49,510 --> 00:10:50,770
We know where to get it from.

151
00:10:50,770 --> 00:10:55,780
Now we have the address, but we now need to loop over and grab grapes.

152
00:10:55,990 --> 00:11:00,280
And then 10,000 or apples and then 54.

153
00:11:00,550 --> 00:11:01,690
Let me show you what I mean.

154
00:11:01,900 --> 00:11:11,590
Well, first, create a variable says saying current bucket that will just be this data dot or address

155
00:11:11,590 --> 00:11:13,270
just so we don't repeat ourself.

156
00:11:13,270 --> 00:11:14,560
And we have a reference.

157
00:11:15,660 --> 00:11:20,730
To this address or to the address and the data value.

158
00:11:20,730 --> 00:11:24,390
So this means if we console.log.

159
00:11:25,460 --> 00:11:28,580
Current bucket and I run this.

160
00:11:29,180 --> 00:11:33,920
You see that I have the current bucket, even though this has two items.

161
00:11:33,950 --> 00:11:37,820
Remember that it is technically just within its own bucket.

162
00:11:38,540 --> 00:11:40,080
Within one array.

163
00:11:40,100 --> 00:11:47,480
If we increase this memory space to, let's say, 50, we see that this bucket contains grapes.

164
00:11:47,930 --> 00:11:49,850
So we're grabbing this information.

165
00:11:49,850 --> 00:11:53,130
But all we want to do is have 10,000 being returned.

166
00:11:53,150 --> 00:11:56,900
That's how hash tables work or the get in hash function works.

167
00:11:57,200 --> 00:11:58,580
Well, all we need to do.

168
00:11:59,610 --> 00:12:00,480
Is to say if.

169
00:12:02,660 --> 00:12:03,680
Current bucket.

170
00:12:05,890 --> 00:12:13,120
And we'll say what length that is if this current bucket has something in it in that case.

171
00:12:13,980 --> 00:12:15,690
We are going to do something.

172
00:12:16,460 --> 00:12:21,560
Otherwise we're going to just return undefined because there's nothing in the bucket.

173
00:12:22,040 --> 00:12:24,440
We're checking if this actually exists.

174
00:12:25,390 --> 00:12:29,620
So if there's nothing in the array, if the length is zero and the array is empty.

175
00:12:30,470 --> 00:12:32,510
Well, then we're not interested in it.

176
00:12:32,930 --> 00:12:37,850
As a matter of fact, we actually don't even need the length here because remember initially.

177
00:12:38,870 --> 00:12:44,900
It's just going to be an empty array with undefined and we add an array.

178
00:12:45,600 --> 00:12:46,490
Two.

179
00:12:46,620 --> 00:12:47,730
Each slot.

180
00:12:48,520 --> 00:12:55,900
Whenever we set something and it's an empty address so we can just leave it like that, because if it's

181
00:12:55,900 --> 00:12:59,110
undefined, it'll skip over and return undefined.

182
00:13:00,710 --> 00:13:04,250
Now in here, we will do a four loop.

183
00:13:05,650 --> 00:13:12,790
Because remember, we might have multiple items in this bucket like we saw when we had to.

184
00:13:13,550 --> 00:13:14,660
Memory spaces.

185
00:13:16,340 --> 00:13:18,950
In which case let me actually demonstrate that.

186
00:13:19,670 --> 00:13:21,050
So we can see it.

187
00:13:22,250 --> 00:13:25,670
Say run and current bucket against Paul.

188
00:13:25,670 --> 00:13:26,660
Let's run that again.

189
00:13:27,140 --> 00:13:27,740
All right.

190
00:13:28,540 --> 00:13:35,350
If we console dialog current bucket and run this, we see that we have two items in that bucket.

191
00:13:36,620 --> 00:13:45,170
So we will need to loop over using our favorite for loop, which we've done a ton by now.

192
00:13:46,340 --> 00:13:51,290
We're going to say as long as AI is less than the current bucket length.

193
00:13:53,310 --> 00:13:55,770
Just increment high.

194
00:13:57,580 --> 00:14:00,310
And within here, this is a little bit tricky.

195
00:14:00,310 --> 00:14:01,390
So hopefully you follow.

196
00:14:01,390 --> 00:14:02,800
I'm going to say if.

197
00:14:03,740 --> 00:14:07,490
Current bucket I which is the index.

198
00:14:07,490 --> 00:14:15,920
So remember is going to say zero which is going to grab this then one which is going to grab this.

199
00:14:16,840 --> 00:14:21,280
If bucket the grapes.

200
00:14:21,280 --> 00:14:25,930
So if I do zero here that means grab the first.

201
00:14:27,610 --> 00:14:28,540
In our case, the eye.

202
00:14:28,570 --> 00:14:29,740
So it's going to be zero.

203
00:14:29,740 --> 00:14:38,260
First grab this first array, then grab the zero index within this array, which will be grapes.

204
00:14:39,430 --> 00:14:44,590
And then once it loops the next time around and I is one, it's going to be apples.

205
00:14:45,160 --> 00:14:46,150
Check that.

206
00:14:47,340 --> 00:14:49,680
Against the key.

207
00:14:49,710 --> 00:14:53,460
Remember the key that we receive here that we are looking for.

208
00:14:53,970 --> 00:14:58,470
So if grapes, which is the key matches with this item.

209
00:15:00,060 --> 00:15:04,530
In that case, just return the current bucket.

210
00:15:05,040 --> 00:15:10,950
The I and one because we want to return 10,000.

211
00:15:11,250 --> 00:15:16,740
Hopefully you follow here because if I run this, I get 10,000.

212
00:15:17,420 --> 00:15:20,050
The get grapes is 10,000.

213
00:15:20,060 --> 00:15:24,020
If I do apples, here it is 54.

214
00:15:24,860 --> 00:15:25,970
How cool is that?

215
00:15:26,620 --> 00:15:33,760
And looking at this, I hope you understand on a deeper level the time, complexity, implications of

216
00:15:33,760 --> 00:15:34,630
hash tables.

217
00:15:35,140 --> 00:15:42,130
Even though we're doing a loop here within the hash function, remember that hash functions are really,

218
00:15:42,130 --> 00:15:43,090
really fast.

219
00:15:43,330 --> 00:15:48,160
We're just looping over the key so we don't consider this to be a event.

220
00:15:48,190 --> 00:15:49,840
This is very, very fast.

221
00:15:49,840 --> 00:15:51,130
It's o of one.

222
00:15:52,060 --> 00:15:55,450
When we set something, there's no loops here.

223
00:15:55,450 --> 00:15:57,900
We're just adding it to our data.

224
00:15:57,910 --> 00:15:59,530
We're just pushing it.

225
00:15:59,980 --> 00:16:01,900
So that is OV one.

226
00:16:02,920 --> 00:16:05,080
And if we go to get.

227
00:16:06,010 --> 00:16:07,240
Most of the time.

228
00:16:08,310 --> 00:16:12,690
If there's no collisions, it's going to be.

229
00:16:14,010 --> 00:16:15,240
Oh of one.

230
00:16:16,140 --> 00:16:20,040
And in real life, most of the time you can consider that it is overdone.

231
00:16:20,130 --> 00:16:27,300
But in our really bad example, with just two memory spaces and not a very good hash function, well,

232
00:16:27,600 --> 00:16:29,700
this can become o of n.

233
00:16:31,550 --> 00:16:36,560
But for now, because we're good programmers, that won't happen, right?

234
00:16:36,620 --> 00:16:37,960
Everything will be good.

235
00:16:37,970 --> 00:16:40,850
We have o of one get.

236
00:16:42,250 --> 00:16:48,880
We have the for loop here that might create that list we saw in our example.

237
00:16:50,350 --> 00:16:52,430
See this list that we have here.

238
00:16:52,450 --> 00:16:53,950
This is what we created.

239
00:16:53,960 --> 00:16:59,170
And it would be oh ven if this list just kept going and kept growing and kept growing.

240
00:17:01,150 --> 00:17:07,030
But there is one other method that I want us to build and to showcase to you.

241
00:17:07,119 --> 00:17:10,180
One other downside of hash tables.

242
00:17:11,069 --> 00:17:16,920
What if we wanted to go through all the keys of the hash table?

243
00:17:17,599 --> 00:17:18,800
How will we do that?

244
00:17:19,530 --> 00:17:21,839
We're going to try and implement that in the next video.

245
00:17:22,690 --> 00:17:23,140
Bye bye.

