WEBVTT
1
00:00:01.300 --> 00:00:02.170
Welcome back.

2
00:00:02.969 --> 00:00:09.300
By this point, you should be familiar with how a typical successful coding interview should look like,

3
00:00:09.810 --> 00:00:13.770
especially how to solve a problem in front of an interviewer.

4
00:00:14.340 --> 00:00:16.620
And we're going to do a fun little exercise here.

5
00:00:17.070 --> 00:00:22.530
An interviewer just asked us a question, and this is the question right here.

6
00:00:23.610 --> 00:00:32.159
Given two arrays create a function that lets a user know true or false whether these two arrays contain

7
00:00:32.159 --> 00:00:33.630
any common items.

8
00:00:34.050 --> 00:00:42.480
For example, if we add two arrays here, one containing ABC X and the other one Z, Y and I, it would

9
00:00:42.480 --> 00:00:47.880
return false because there's nothing common between these two arrays.

10
00:00:48.450 --> 00:00:50.910
However, in this example.

11
00:00:51.910 --> 00:00:52.240
Array.

12
00:00:52.240 --> 00:00:53.080
One in an array.

13
00:00:53.080 --> 00:00:55.630
Two both contain x.

14
00:00:56.540 --> 00:01:00.140
And because they have a common item, it should return.

15
00:01:00.140 --> 00:01:00.830
True.

16
00:01:02.060 --> 00:01:07.580
So an interviewer just asked you this question, how will we go about solving it?

17
00:01:07.610 --> 00:01:12.710
Well, let's go step by step through our little guide.

18
00:01:13.400 --> 00:01:17.900
When the interviewer says the question, write down the key points at the top.

19
00:01:19.480 --> 00:01:23.710
Make sure you have all the details, show how organized you are.

20
00:01:24.190 --> 00:01:28.240
Well, in this case, I've kind of done this for you over here.

21
00:01:28.270 --> 00:01:36.850
Ideally, you would write this out as you are coding and make sure that you show the interviewer.

22
00:01:37.660 --> 00:01:41.450
If I had this example, it should return false.

23
00:01:41.470 --> 00:01:44.140
If I had this example.

24
00:01:44.200 --> 00:01:45.760
It should return true.

25
00:01:46.210 --> 00:01:51.580
Now, let's say the interviewer only gave you these points and no other information.

26
00:01:51.970 --> 00:01:57.820
At least now you have an idea of what our problem is going to look at and whether we want to return

27
00:01:57.820 --> 00:01:58.840
false or true.

28
00:01:59.940 --> 00:02:03.330
But we have two things that we want to do with our function.

29
00:02:03.330 --> 00:02:07.260
One is we have two parameters.

30
00:02:10.570 --> 00:02:13.270
And this function is going to return.

31
00:02:13.360 --> 00:02:15.400
True or false?

32
00:02:17.070 --> 00:02:20.180
Now in the second point, make sure you double check.

33
00:02:20.190 --> 00:02:21.710
What are the inputs?

34
00:02:21.720 --> 00:02:23.200
What are the outputs?

35
00:02:23.220 --> 00:02:24.720
Well, we've kind of already done that.

36
00:02:24.720 --> 00:02:31.040
And we've confirmed with our interviewer that we have two inputs which are arrays.

37
00:02:31.050 --> 00:02:34.460
We can even ask the interviewer that are they always going to be arrays?

38
00:02:34.470 --> 00:02:40.770
Is it possible that the input might not be arrays, maybe an object, maybe a string, and we can confirm

39
00:02:40.770 --> 00:02:42.600
with the interior what those cases are.

40
00:02:42.630 --> 00:02:47.940
In our case, let's say that the interviewer says that these two parameters are always going to be arrays.

41
00:02:48.660 --> 00:02:51.240
And we always want to return, true or false.

42
00:02:51.750 --> 00:02:56.670
And number two is really important here, because we don't ever want to jump straight into coding,

43
00:02:56.910 --> 00:03:01.080
even if you think you know the answer or you've seen this problem before, you know exactly what to

44
00:03:01.080 --> 00:03:01.500
do.

45
00:03:01.800 --> 00:03:03.330
Don't jump straight into coding.

46
00:03:03.330 --> 00:03:10.350
First, explain your approach like I'm doing here, talking it out, because if there are any problems

47
00:03:10.350 --> 00:03:16.170
with your approach or with your understanding of the question, your interviewer is going to often point

48
00:03:16.170 --> 00:03:21.990
them out to you here before jumping straight in and looking at your code and saying that, no, this

49
00:03:21.990 --> 00:03:27.660
is wrong this way both you and the interviewer know exactly what the steps are that you need to follow.

50
00:03:28.050 --> 00:03:30.000
Now, let's look at point number three here.

51
00:03:30.090 --> 00:03:32.820
What is the most important value or the problem?

52
00:03:32.850 --> 00:03:36.600
Do you have time, space and memory to run this function?

53
00:03:36.960 --> 00:03:39.330
What is the main goal now?

54
00:03:39.330 --> 00:03:41.580
Because this is a simple question.

55
00:03:41.580 --> 00:03:46.020
We might want to ask the interviewer how large this array is going to get.

56
00:03:47.150 --> 00:03:48.950
Because if.

57
00:03:49.900 --> 00:03:53.650
The interviewer says the array is never going to be more than five items.

58
00:03:53.680 --> 00:04:00.220
Well then maybe we don't have to worry about bingo or time complexity or space complexity as much.

59
00:04:00.960 --> 00:04:07.910
And then you can ask the interviewer, is our goal here to be as efficient as possible with our function?

60
00:04:07.920 --> 00:04:09.180
What's more important to us?

61
00:04:09.180 --> 00:04:10.170
Is time.

62
00:04:10.170 --> 00:04:14.640
Complexity more important, or is space complexity more important?

63
00:04:14.670 --> 00:04:20.160
Maybe the interviewer might tell you that we just want the most efficient function they can come up

64
00:04:20.160 --> 00:04:24.680
with, assuming that the array can get very, very large.

65
00:04:24.720 --> 00:04:30.480
So let's say in here we have two parameters arrays that have no size limit.

66
00:04:30.630 --> 00:04:33.330
So these arrays can get really, really big.

67
00:04:34.270 --> 00:04:36.990
And in terms of returning true or false, that's all we want.

68
00:04:37.000 --> 00:04:38.650
We just want a Boolean return.

69
00:04:39.070 --> 00:04:45.220
Now number four, don't be annoying when asking too many questions and we're kind of getting to that

70
00:04:45.220 --> 00:04:51.490
territory where we've asked a lot of question to the interviewer and we kind of have an idea of what

71
00:04:51.490 --> 00:04:52.600
we want to do.

72
00:04:52.630 --> 00:04:56.530
We can keep asking them question but remember, you usually have a time limit.

73
00:04:56.530 --> 00:05:04.180
You don't want to keep bothering them and knowing them and just asking them all these small little questions

74
00:05:04.270 --> 00:05:06.850
before we start coding, keep time in mind.

75
00:05:06.850 --> 00:05:12.760
And I think at this point we have an information that we can move on with our assumption to start solving

76
00:05:12.760 --> 00:05:13.390
the problem.

77
00:05:14.000 --> 00:05:20.540
So number five, start with the naive brute force approach.

78
00:05:20.570 --> 00:05:26.690
First thing that comes into mind, it shows that you're able to think well and critically and you don't

79
00:05:26.690 --> 00:05:28.070
even need to write this code.

80
00:05:28.070 --> 00:05:29.780
Just speak about it.

81
00:05:30.350 --> 00:05:34.580
This is always a case when an interviewer ask you a question.

82
00:05:34.580 --> 00:05:41.420
They usually have an easy solution that we call the brute force, which is not the most efficient but

83
00:05:41.420 --> 00:05:45.140
usually is the easiest one or the first one that comes up in mind.

84
00:05:45.880 --> 00:05:54.520
So in our case, if we look at this during an interview with a time limit, you might say this looks

85
00:05:54.520 --> 00:06:04.030
like a nested loop where we're comparing A with Z and then A with Y, then A with AI, and then we go

86
00:06:04.030 --> 00:06:09.300
to B with Z, B, with Y, B with I, and then so on and so forth.

87
00:06:09.310 --> 00:06:16.720
So immediately this looks like we're comparing two different arrays and we're going to have two for

88
00:06:16.720 --> 00:06:20.350
loops, one nested on top of each other.

89
00:06:20.350 --> 00:06:23.650
And right away we know that that's a big o.

90
00:06:24.370 --> 00:06:33.340
We've talked about of O and squared most likely during an interview nested for loops is something that

91
00:06:33.340 --> 00:06:34.390
we want to avoid.

92
00:06:34.600 --> 00:06:40.900
Just telling the interviewer this solution, even though it's not the best solution, already shows

93
00:06:40.900 --> 00:06:43.330
that you're thinking clearly about the problem.

94
00:06:43.450 --> 00:06:46.330
And it also gives you a point from where to improve from.

95
00:06:46.660 --> 00:06:51.910
Now, you don't necessarily have to code this part, and it's usually enough just to describe how it

96
00:06:51.910 --> 00:06:52.270
works.

97
00:06:52.270 --> 00:06:53.860
Kind of like I just did now.

98
00:06:53.860 --> 00:06:58.750
But depending on your time, you may or may not want to code this as well.

99
00:06:58.750 --> 00:07:04.450
The important thing is that you let the interviewer know that this is the brute force or the easy,

100
00:07:04.450 --> 00:07:07.870
naive solution that may not be the most efficient.

101
00:07:08.560 --> 00:07:13.540
At least this way you have the right answer, then running out of time and not even having an answer.

102
00:07:15.410 --> 00:07:16.280
Number six.

103
00:07:16.280 --> 00:07:17.640
Here is tell me.

104
00:07:17.660 --> 00:07:20.180
Tell them why this approach is not the best.

105
00:07:20.180 --> 00:07:28.250
So in our case, we said that the code might be not efficient or we might have not readable, or a code

106
00:07:28.250 --> 00:07:34.100
that is going to be really complicated and hard to read for other developers.

107
00:07:34.870 --> 00:07:41.380
With my demonstration because I just want you to think about this so I can be more clear of why this

108
00:07:41.380 --> 00:07:42.570
is on squared.

109
00:07:42.580 --> 00:07:44.170
I'm going to just code.

110
00:07:44.170 --> 00:07:46.450
And most likely you wouldn't do this in an interview.

111
00:07:46.450 --> 00:07:50.140
I'm just going to code the brute force solution so you can see what I mean.

112
00:07:50.650 --> 00:07:53.140
I'm going to have a function.

113
00:07:53.470 --> 00:07:56.800
And this function is going to say contains.

114
00:07:58.300 --> 00:08:00.370
Common item.

115
00:08:01.300 --> 00:08:06.460
And it's going to receive two arrays array one and array two.

116
00:08:08.960 --> 00:08:13.760
Now we are going to take the first array and do a four loop.

117
00:08:13.910 --> 00:08:15.350
So I'm going to say four.

118
00:08:15.380 --> 00:08:16.760
Let I whoops.

119
00:08:16.760 --> 00:08:20.300
Let I equals zero.

120
00:08:21.480 --> 00:08:27.030
And we'll say that as long as AI is less than the array, one length.

121
00:08:27.030 --> 00:08:34.080
So that's the length of the first array we're going to increment I and within this loop we're going

122
00:08:34.080 --> 00:08:35.940
to have another for loop.

123
00:08:35.940 --> 00:08:41.610
So in the first time around we're going to grab a from the first array.

124
00:08:42.340 --> 00:08:46.600
And we're going to compare it to the second array, Z, Y and X.

125
00:08:46.600 --> 00:08:51.820
So we're going to have a four loop here and we'll say that we'll have the same thing.

126
00:08:51.820 --> 00:08:54.520
Let this time instead of, I will say, J.

127
00:08:55.340 --> 00:08:57.080
Equals zero.

128
00:08:57.860 --> 00:08:59.030
And this J.

129
00:08:59.060 --> 00:09:03.170
As long as it's smaller than array two dot length.

130
00:09:05.130 --> 00:09:09.660
It's going to increment every time we loop through it.

131
00:09:09.720 --> 00:09:13.950
And finally within here, we're going to do a bit of a comparison.

132
00:09:13.950 --> 00:09:20.430
We're going to compare A to Z, then A to Y, then A to X.

133
00:09:20.880 --> 00:09:26.400
So if I go over here and say if array one.

134
00:09:28.330 --> 00:09:31.900
Index of I so array one at index of I.

135
00:09:31.930 --> 00:09:35.020
So the first time around I is going to be zero.

136
00:09:35.050 --> 00:09:42.250
So that means array one is going to contain a let's actually grab this.

137
00:09:44.250 --> 00:09:46.440
So we can see it better at the top over here.

138
00:09:46.440 --> 00:09:47.280
I'm going to.

139
00:09:49.400 --> 00:09:50.690
Have to race here.

140
00:09:51.290 --> 00:09:59.360
And we're going to say that array at 0/1 time around is going to grab a and if that equals.

141
00:10:00.720 --> 00:10:09.520
Array two at whatever j is, j is the index of array two.

142
00:10:09.540 --> 00:10:13.170
So first time around is going to compare it to Z, so A and Z.

143
00:10:13.170 --> 00:10:19.140
And then as this increments, it's going to compare to A and Y and then this is going to increment compare

144
00:10:19.140 --> 00:10:26.880
A to X and then we go to the top loop again, gets incremented, so it becomes one now.

145
00:10:26.880 --> 00:10:33.720
So we're going to start comparing B to Z, B to Y, B to X and then C to z, c to y, c to X and so

146
00:10:33.720 --> 00:10:34.080
on.

147
00:10:34.380 --> 00:10:39.900
If that's the case and if this is true, we just want to return true.

148
00:10:40.930 --> 00:10:49.510
Otherwise, if we loop through this and this never matches well, in that case, we can just return

149
00:10:50.440 --> 00:10:51.070
false here.

150
00:10:52.840 --> 00:10:53.440
Now.

151
00:10:53.440 --> 00:10:55.120
Let's see if this works.

152
00:10:56.390 --> 00:10:58.700
I'm going to just say contains.

153
00:11:00.110 --> 00:11:00.950
Common item.

154
00:11:01.890 --> 00:11:07.770
And we're going to give it the two arrays array one and array two.

155
00:11:10.210 --> 00:11:14.710
If we run this and let's make this a little bit smaller so you can see if I run this.

156
00:11:17.360 --> 00:11:22.500
I get true because there is a common item of x.

157
00:11:22.520 --> 00:11:28.790
If I change this to now have R and I click run, I get false.

158
00:11:29.790 --> 00:11:36.150
Again, if we change this to a and click run we get true because a and a match up.

159
00:11:37.060 --> 00:11:40.900
Looking at this and we look at number six over here.

160
00:11:40.900 --> 00:11:46.510
That is, let's make this screen a little bit more organized so we can read this.

161
00:11:47.450 --> 00:11:51.050
Number six is tell them why this approach is not the best.

162
00:11:51.350 --> 00:11:59.210
Now, again, you might not have time to even code this, but we can right away see that we have two

163
00:11:59.360 --> 00:12:02.870
four loops, one nested after another.

164
00:12:02.960 --> 00:12:10.010
And because we've already talked about this in the big O section, we know that we have a big O when

165
00:12:10.010 --> 00:12:18.620
it comes to time complexity here of well, we have an array, a and another array.

166
00:12:18.920 --> 00:12:21.110
So that means multiply by B.

167
00:12:21.560 --> 00:12:26.780
Again, this is a bit of a trick because these two arrays can be different sizes.

168
00:12:26.780 --> 00:12:30.170
We can just say O and squared.

169
00:12:31.000 --> 00:12:36.370
Because these two arrays can have, again, like I said, different sizes.

170
00:12:36.370 --> 00:12:42.460
So this is a bit of a trick and it's a good thing that we wrote it out because now we see that instead

171
00:12:42.460 --> 00:12:47.800
of O and squared, this is more like o a times b.

172
00:12:47.800 --> 00:12:52.300
If the array sizes are the same, it will be the same as o n squared.

173
00:12:52.300 --> 00:12:53.530
So that's pretty slow.

174
00:12:55.050 --> 00:13:01.050
So number seven, walk through your approach common things and see where you may be able to break things.

175
00:13:01.320 --> 00:13:07.980
Any repetition bottlenecks like own squared or unnecessary work.

176
00:13:08.250 --> 00:13:13.140
Did you use all the information the interviewer gave you and so on and so forth?

177
00:13:13.170 --> 00:13:18.510
Now, looking at this, I can say that we could probably do better.

178
00:13:18.810 --> 00:13:24.060
You might not see a solution right away, and that is because you need to practice a few of these problems

179
00:13:24.060 --> 00:13:25.800
to understand a common pattern.

180
00:13:25.800 --> 00:13:32.190
But one of the most common patterns when it comes to nested for loops is that you might be able to use

181
00:13:32.190 --> 00:13:35.730
something called hash tables, which will get through in JavaScript.

182
00:13:35.730 --> 00:13:39.330
They're called objects in order to speed things up.

183
00:13:39.630 --> 00:13:47.070
Is there a way to turn this oh a times B time complexity into something faster.

184
00:13:48.110 --> 00:13:55.730
We are doing a bit of unnecessary work where we just keep looping a z, a, y, a, a, and then we

185
00:13:55.730 --> 00:14:02.210
go B, Z by B, A, and we're doing this comparison in the same work over and over.

186
00:14:02.940 --> 00:14:04.740
What if we have a better solution?

187
00:14:05.010 --> 00:14:07.140
I'm going to comment this out for now.

188
00:14:08.790 --> 00:14:10.860
And scroll all the way to the bottom.

189
00:14:11.460 --> 00:14:12.990
And we don't need this anymore.

190
00:14:13.830 --> 00:14:15.440
And try a different solution.

191
00:14:15.450 --> 00:14:18.090
I'm going to bring the array down here just so we can see it.

192
00:14:23.000 --> 00:14:27.860
Now, before we start actually coding, let's think about what steps we want to take.

193
00:14:28.740 --> 00:14:33.680
Well, what if we had a function that takes the first array?

194
00:14:33.690 --> 00:14:43.860
So let's say array one is going to be converted to an object and this object is going to contain something

195
00:14:43.860 --> 00:14:44.640
like this.

196
00:14:45.530 --> 00:14:46.590
Will contain.

197
00:14:46.590 --> 00:14:48.570
And let's make sure we comment this out.

198
00:14:50.820 --> 00:14:53.430
It's going to contain a equals.

199
00:14:53.430 --> 00:14:54.330
True.

200
00:14:55.300 --> 00:14:58.930
Then be equals to true.

201
00:14:59.790 --> 00:15:00.680
See?

202
00:15:01.330 --> 00:15:02.430
COSTA True.

203
00:15:02.520 --> 00:15:06.060
And then finally, it's going to have x equals to true.

204
00:15:09.940 --> 00:15:17.080
Now, if we create an object like this, we can now use this object with our array to.

205
00:15:18.350 --> 00:15:20.870
To just say array two.

206
00:15:20.900 --> 00:15:27.000
Can we check each item in an array to to this object and see if a property exists?

207
00:15:27.020 --> 00:15:32.660
Ideally we can do something like array to index.

208
00:15:33.370 --> 00:15:38.080
And see if this equals any of the object dot properties.

209
00:15:38.890 --> 00:15:41.110
Okay, let's let's walk through this one more time.

210
00:15:41.380 --> 00:15:46.960
This is a common pattern that you're going to see a lot when it comes to improving time complexity.

211
00:15:46.960 --> 00:15:51.160
So if you don't get this right away, don't stress out.

212
00:15:51.490 --> 00:15:55.720
This is something that will become more and more familiar to you as we do more problems.

213
00:15:56.200 --> 00:15:59.560
But if I'm able to convert the first array.

214
00:16:00.330 --> 00:16:03.180
Into an object that looks like this.

215
00:16:03.630 --> 00:16:11.550
Now, instead of having to loop over both arrays, I can just loop through the second array and just

216
00:16:11.550 --> 00:16:17.100
simply check if the property Z exists on this object that we created.

217
00:16:17.130 --> 00:16:18.360
No, it doesn't.

218
00:16:18.600 --> 00:16:21.570
Does the property Y exist on this array?

219
00:16:21.600 --> 00:16:22.270
No, it doesn't.

220
00:16:22.290 --> 00:16:26.910
Does the property a exist on this object?

221
00:16:26.940 --> 00:16:28.080
Yes, it does.

222
00:16:28.170 --> 00:16:29.970
That means we have a common item.

223
00:16:30.360 --> 00:16:36.720
Now to show you how this actually works and why this solution would be better than the first one.

224
00:16:37.110 --> 00:16:39.030
I need to actually start coding it.

225
00:16:39.030 --> 00:16:43.950
But as we go through number eight, we see that before you start coding, we want to walk through your

226
00:16:43.950 --> 00:16:46.770
code and write down the steps you're going to do.

227
00:16:48.530 --> 00:16:51.360
So let's start doing that.

228
00:16:51.380 --> 00:16:58.010
I'm going to say that we're going to create a new function contains common item and this one I'm going

229
00:16:58.010 --> 00:17:04.550
to add to because as our second function, it's going to take in an array of one and array two.

230
00:17:06.319 --> 00:17:08.150
And now this function.

231
00:17:09.050 --> 00:17:12.020
Let's make this a little bit smaller so it looks nicer.

232
00:17:12.050 --> 00:17:12.800
There you go.

233
00:17:13.130 --> 00:17:28.460
This function is going to say, first, I want you to loop through first array and create object where

234
00:17:29.180 --> 00:17:31.790
properties equal.

235
00:17:33.330 --> 00:17:36.570
Items in the array.

236
00:17:39.300 --> 00:17:47.310
And then the second thing will be to loop through secondary.

237
00:17:49.430 --> 00:18:00.350
And check if item in second array exists on created object.

238
00:18:02.400 --> 00:18:10.530
Now before we even start coding this, I can right away sense that we're going to have a better performance

239
00:18:10.530 --> 00:18:17.820
than the first array that was O eight times B, because what we're going to do is have two loops.

240
00:18:18.660 --> 00:18:21.690
But these two loops aren't going to be nested.

241
00:18:21.930 --> 00:18:23.760
Remember in the first solution?

242
00:18:24.570 --> 00:18:26.880
We had nested for loops.

243
00:18:28.410 --> 00:18:29.760
In this solution.

244
00:18:30.120 --> 00:18:34.710
And our second solution, we're going to have to separate for loops.

245
00:18:35.280 --> 00:18:44.190
And if you remember our big O analysis when we have steps one after another instead of nested.

246
00:18:45.120 --> 00:18:48.720
The big O becomes.

247
00:18:49.670 --> 00:18:51.890
A plus B.

248
00:18:53.090 --> 00:19:01.790
We have a potential solution here, have a time complexity of A plus B instead of A, times B, those

249
00:19:01.790 --> 00:19:02.960
are big savings.

250
00:19:03.170 --> 00:19:07.700
We need to start actually writing this code to see if we can solve this problem.

251
00:19:07.820 --> 00:19:11.480
And because this video is getting long, we're going to do this in the next video.

252
00:19:11.570 --> 00:19:14.690
But I want to show you right here what we've just done.

253
00:19:14.690 --> 00:19:21.530
And that is, although we haven't given a clear solution, we've been talking about how we solve the

254
00:19:21.530 --> 00:19:22.100
problem.

255
00:19:22.100 --> 00:19:31.190
The interviewer sees how we think, sees what steps we take, and sees that we're making smart, critical

256
00:19:31.190 --> 00:19:39.050
decisions to go from understanding the problem to solving the problem in a naive way, understanding

257
00:19:39.050 --> 00:19:44.690
why this might not be the best way, and then start to think about possible solutions.

258
00:19:45.200 --> 00:19:52.340
And the beauty of this approach is that no matter whether we get this part correct, maybe our assumptions

259
00:19:52.340 --> 00:19:54.350
are wrong and we can't do this.

260
00:19:54.350 --> 00:20:01.220
We're showing the interviewer that we're thinking through a problem and we're making small, logical

261
00:20:01.220 --> 00:20:03.110
steps towards a solution.

262
00:20:04.240 --> 00:20:10.390
And this is a lot better than just coding right away, trying a solution and see if you get it right

263
00:20:10.390 --> 00:20:11.040
or wrong.

264
00:20:11.050 --> 00:20:16.510
An interviewer is going to have a good understanding of your abilities and your thought process this

265
00:20:16.510 --> 00:20:20.020
way, and these are the type of people that they want to hire.

266
00:20:20.170 --> 00:20:22.840
So in the next video, let's finish out this problem.

267
00:20:22.840 --> 00:20:29.590
Let's code it and see if we can make this solution more efficient by converting it to A plus b.

268
00:20:30.280 --> 00:20:31.300
I'll see you in the next one.

