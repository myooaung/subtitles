WEBVTT
1
00:00:01.290 --> 00:00:06.210
Now that we know how to use arrays where they're fast, where they're slow.

2
00:00:06.910 --> 00:00:13.090
We're going to get into a part that is not crucial for interviews, but it's good to understand how

3
00:00:13.090 --> 00:00:16.239
they work and how to build an array.

4
00:00:16.840 --> 00:00:22.120
Most likely in an interview you won't get asked Hey, build an array from the beginning.

5
00:00:22.180 --> 00:00:30.700
But I do want to build those foundations for you so that we understand a race from a fundamental level.

6
00:00:31.570 --> 00:00:34.180
So let's build an array ourselves.

7
00:00:35.630 --> 00:00:40.310
Now in this video, we're going to be using the class syntax in JavaScript.

8
00:00:40.310 --> 00:00:46.580
So we're going to create an array class, even though with JavaScript and many other languages we can

9
00:00:46.580 --> 00:00:49.550
just do this and we've created an array.

10
00:00:50.150 --> 00:00:56.450
Let's see if we can build one of our own, because as you'll find out as we go through this course,

11
00:00:56.990 --> 00:01:01.820
data structures are simply things that we can build from scratch.

12
00:01:01.820 --> 00:01:04.099
We can create whatever data structure we want.

13
00:01:04.099 --> 00:01:06.590
We can create our own data structure.

14
00:01:07.100 --> 00:01:13.580
The most common data structures are well known and are already implemented in most languages because

15
00:01:13.580 --> 00:01:14.690
they are so useful.

16
00:01:15.380 --> 00:01:20.330
But you are able to build any data structure you want from scratch.

17
00:01:20.510 --> 00:01:27.020
And as you'll find out, most data structures are built on top of other data structures.

18
00:01:27.730 --> 00:01:34.750
Now to get started, we're going to create an array in JavaScript, but just the heads up JavaScript

19
00:01:34.750 --> 00:01:36.910
is a bit of an interesting case.

20
00:01:37.090 --> 00:01:44.530
Arrays in JavaScript are just objects with integer based keys that act like indexes, and that's why

21
00:01:44.530 --> 00:01:48.760
we're going to build different languages, will have this implementation differently.

22
00:01:48.880 --> 00:01:56.230
But what we're going to learn here is still going to be applicable to how arrays work in other languages.

23
00:01:56.860 --> 00:02:00.190
So we're going to start off with creating a class.

24
00:02:01.160 --> 00:02:05.810
Let's start off with creating a class and we'll call this.

25
00:02:07.920 --> 00:02:09.660
My array.

26
00:02:11.560 --> 00:02:14.530
And within the mirror, we'll have a constructor.

27
00:02:15.480 --> 00:02:21.810
Which is the initial function that will be run when we create this mirror.

28
00:02:22.680 --> 00:02:26.820
And this constructor is going to have two data points.

29
00:02:27.000 --> 00:02:34.890
One is the length property, because with an array, we're able to determine the length of the array,

30
00:02:35.310 --> 00:02:38.330
and the initial length will be zero.

31
00:02:38.340 --> 00:02:40.830
That is how many items the array has.

32
00:02:41.610 --> 00:02:45.060
And then we'll obviously have the data within the array.

33
00:02:45.390 --> 00:02:47.640
And this is going to be an object.

34
00:02:48.540 --> 00:02:53.520
Now, what's the most common action that we have in array?

35
00:02:53.580 --> 00:02:56.340
Well, it's the access to access the data.

36
00:02:56.370 --> 00:02:59.220
So let's create a get method.

37
00:02:59.220 --> 00:03:01.890
And this get method is going to take an index.

38
00:03:02.680 --> 00:03:05.170
To actually grab the data from memory.

39
00:03:05.440 --> 00:03:08.860
So I'm going to just say return this.

40
00:03:09.570 --> 00:03:11.510
DOT data.

41
00:03:11.520 --> 00:03:18.380
And if this keyword is confusing to you, make sure you watch the previous video.

42
00:03:18.480 --> 00:03:24.690
This DOT data is just referring to this data that we've created in the constructor and we're just going

43
00:03:24.690 --> 00:03:25.590
to return.

44
00:03:26.480 --> 00:03:31.010
The data at the index that we are requiring.

45
00:03:32.160 --> 00:03:35.160
Let's see how this would work in action.

46
00:03:36.460 --> 00:03:38.980
To create a new mirror.

47
00:03:39.730 --> 00:03:44.680
All we need to do is say cost new array.

48
00:03:47.350 --> 00:03:56.050
And we use the new keyword in JavaScript to instantiate this or create a copy of this class.

49
00:03:58.200 --> 00:03:59.040
Like this.

50
00:03:59.550 --> 00:04:03.060
So now if I do console.log new.

51
00:04:03.910 --> 00:04:04.600
Array.

52
00:04:05.500 --> 00:04:07.060
And I click Run.

53
00:04:08.170 --> 00:04:14.740
I get my array that has property length of zero and data that is empty.

54
00:04:15.700 --> 00:04:17.920
If I do new array.

55
00:04:17.959 --> 00:04:19.420
Dot get.

56
00:04:20.420 --> 00:04:21.140
Zero.

57
00:04:21.260 --> 00:04:22.460
Index of zero.

58
00:04:23.400 --> 00:04:24.990
I get undefined.

59
00:04:25.140 --> 00:04:30.060
Well, because there's nothing in this object.

60
00:04:30.680 --> 00:04:39.320
We have no items and JavaScript automatically has the type on defined when while there's nothing.

61
00:04:39.650 --> 00:04:41.150
Let's add our next method.

62
00:04:41.150 --> 00:04:46.360
That is the push method to add something at the end of the array.

63
00:04:46.370 --> 00:04:52.610
So I'm going to create a push method and this method we'll take in an item that we will give it.

64
00:04:53.730 --> 00:05:00.060
And within here, we'll simply add this to the data of our object.

65
00:05:00.910 --> 00:05:05.560
It's going to add it to the length of our item.

66
00:05:05.560 --> 00:05:15.130
So because we have zero items and the length is zero, this is going to add the data at this data zero

67
00:05:15.130 --> 00:05:15.850
index.

68
00:05:16.660 --> 00:05:21.520
And the zero index will simply now contain the item.

69
00:05:22.650 --> 00:05:29.610
And because we want to keep adding items if we wanted to, we will say this dot.

70
00:05:30.400 --> 00:05:31.060
Length.

71
00:05:31.960 --> 00:05:41.800
Plus plus, because now our array has a length of one instead of zero, so that next time we run the

72
00:05:41.800 --> 00:05:48.910
push method, this length will be one and the new item will be added at index of one.

73
00:05:49.720 --> 00:05:55.210
And let's just return this dot length for now.

74
00:05:56.390 --> 00:06:01.820
Because the typical push method in JavaScript will usually return the length of the array.

75
00:06:02.750 --> 00:06:04.910
Let's run this and see what happens.

76
00:06:05.000 --> 00:06:06.410
I'm going to say.

77
00:06:08.350 --> 00:06:09.430
That down here.

78
00:06:09.430 --> 00:06:11.230
We'll we'll have new.

79
00:06:12.100 --> 00:06:13.900
A red dot push.

80
00:06:14.830 --> 00:06:16.000
And we're going to push.

81
00:06:16.270 --> 00:06:17.020
Hi.

82
00:06:17.590 --> 00:06:19.330
If I run this, I see.

83
00:06:19.330 --> 00:06:21.940
I have my array length one.

84
00:06:22.650 --> 00:06:27.990
Data is going to have a property zero of hi.

85
00:06:28.020 --> 00:06:28.760
Nice.

86
00:06:28.770 --> 00:06:32.730
What if we add another thing let's do new array dot push.

87
00:06:34.420 --> 00:06:43.090
And we'll say to you if I run this I have length of to now with index of zero at high or index of zero

88
00:06:43.090 --> 00:06:46.120
has high and the index of one has you.

89
00:06:46.600 --> 00:06:47.500
Very cool.

90
00:06:48.260 --> 00:06:49.160
What else can we do?

91
00:06:49.190 --> 00:06:54.590
Well, let's add the pop command to remove the last item of the array.

92
00:06:55.320 --> 00:07:01.080
Once again, we have the pop method that doesn't receive anything.

93
00:07:01.080 --> 00:07:02.850
We don't need to pass that a parameter.

94
00:07:03.000 --> 00:07:06.660
All we need to do is delete the last item in the array.

95
00:07:07.080 --> 00:07:17.310
We can simply have a variable, let's say last item that grabs the last item in our data object.

96
00:07:17.460 --> 00:07:23.580
So this is going to just simply be this data at index of length.

97
00:07:24.290 --> 00:07:25.640
Minus one.

98
00:07:25.820 --> 00:07:32.000
Remember, we want the index of one, even though the length is two, because we're counting zero one.

99
00:07:32.330 --> 00:07:36.290
We want the last item in the data.

100
00:07:37.280 --> 00:07:44.870
And from here we can just use the delete keyword in JavaScript and say this dot data.

101
00:07:45.860 --> 00:07:49.160
At this dot length minus one.

102
00:07:49.370 --> 00:07:50.750
Just delete that item.

103
00:07:51.230 --> 00:07:53.240
And obviously we need to.

104
00:07:55.200 --> 00:07:56.140
Decrease.

105
00:07:56.160 --> 00:08:03.570
So just shorthand here in JavaScript to decrease the length of our data by one.

106
00:08:04.260 --> 00:08:08.430
And then finally, we can just return the item that we deleted.

107
00:08:09.850 --> 00:08:11.740
So now if I.

108
00:08:12.720 --> 00:08:13.950
Run another command.

109
00:08:14.580 --> 00:08:18.030
And by the way, you might see here that I've missed the semicolons in JavaScript.

110
00:08:18.030 --> 00:08:20.820
Most of the time you can get away with not adding semicolons.

111
00:08:20.820 --> 00:08:23.970
And some people don't use semicolons all in JavaScript.

112
00:08:24.600 --> 00:08:26.220
Don't get too distracted by that.

113
00:08:26.220 --> 00:08:30.090
Sometimes I forget, and it's not really important, at least for our purposes.

114
00:08:30.360 --> 00:08:35.130
Let's add a new item to the array.

115
00:08:35.159 --> 00:08:41.820
That's going to be the exclamation point and I'm going to say my or new.

116
00:08:43.370 --> 00:08:45.470
A red dot pop.

117
00:08:47.890 --> 00:08:49.180
If I run this.

118
00:08:50.340 --> 00:08:54.870
Oh, I get an error saying item because this should be last item.

119
00:08:55.780 --> 00:08:56.090
Here you go.

120
00:08:56.110 --> 00:08:57.190
Let's run that again.

121
00:08:57.310 --> 00:08:59.620
And we see that it's high.

122
00:08:59.660 --> 00:09:00.520
You.

123
00:09:00.580 --> 00:09:02.920
Because the exclamation mark has been deleted.

124
00:09:03.490 --> 00:09:05.680
If I run pop again.

125
00:09:08.240 --> 00:09:12.290
I see that I have length of one and only high remaining.

126
00:09:12.710 --> 00:09:13.550
Very cool.

127
00:09:15.310 --> 00:09:22.030
All right, let's add one last one and to show you why some operations in a race are o of.

128
00:09:22.030 --> 00:09:25.960
Then we're going to add the delete method.

129
00:09:28.830 --> 00:09:31.590
And the delete method is going to take an index.

130
00:09:31.800 --> 00:09:33.600
Which item we want to delete?

131
00:09:35.740 --> 00:09:39.400
And in here we will have to do a cost item.

132
00:09:39.400 --> 00:09:46.990
So we're going to create a reference to this DOT data index, which is the item we want to delete.

133
00:09:48.730 --> 00:09:51.760
And Hmm, how are we going to delete this?

134
00:09:51.760 --> 00:10:00.010
Because remember in an array, we'll have to delete the item, then shift the index of all the other

135
00:10:00.010 --> 00:10:01.630
data types by one.

136
00:10:03.180 --> 00:10:10.900
Well, because we want to follow good coding practices using the idea of single responsibility principle.

137
00:10:10.920 --> 00:10:17.280
Let's add another function that does this for us that does the shifting of data for us.

138
00:10:17.730 --> 00:10:23.910
I'm going to create a new method and we do this in JavaScript using the this syntax shift.

139
00:10:25.330 --> 00:10:26.080
Items.

140
00:10:26.850 --> 00:10:32.010
And this method is going to take the index that we received here and the delete.

141
00:10:33.710 --> 00:10:41.690
Now this shift items we can create it here and say that shift items method.

142
00:10:42.910 --> 00:10:46.450
And by the way, I use the words function and methods interchangeably.

143
00:10:46.450 --> 00:10:53.310
Sometimes method simply means is a function within a class.

144
00:10:53.320 --> 00:10:59.710
So this this shift items will be a method of my array.

145
00:11:00.430 --> 00:11:01.720
But it is a function.

146
00:11:01.720 --> 00:11:03.040
So this function.

147
00:11:03.670 --> 00:11:10.630
Which is a method of Myra will have the index parameter passed into it.

148
00:11:10.990 --> 00:11:13.030
And this is where we do some fun things.

149
00:11:13.030 --> 00:11:15.340
We're going to have to loop through the items.

150
00:11:15.760 --> 00:11:22.540
So that's a four loop, which right away should ring the bell and say, Oh, this is an o of an operation,

151
00:11:23.050 --> 00:11:27.340
we're going to have an index of zero or I of zero.

152
00:11:28.120 --> 00:11:33.610
Actually instead of zero, remember, because we want to shift items, not all of them, just wherever

153
00:11:33.610 --> 00:11:35.470
the index starts from.

154
00:11:37.100 --> 00:11:48.740
We say index and now I will have to be this length so I is less than this length minus one.

155
00:11:50.750 --> 00:11:54.560
And we're going to increment I by one each time through the loop.

156
00:11:55.630 --> 00:11:56.950
Within this loop.

157
00:11:57.070 --> 00:12:02.020
All we're going to do is say this dot data our data at.

158
00:12:03.320 --> 00:12:05.060
Each index that we loop through.

159
00:12:06.070 --> 00:12:08.830
Is going to equal this DOT data.

160
00:12:09.590 --> 00:12:12.530
At I plus one.

161
00:12:13.190 --> 00:12:13.460
Hmm.

162
00:12:13.640 --> 00:12:14.930
What just happened here?

163
00:12:15.840 --> 00:12:24.540
Well, we're saying start at the index that we want to start the delete from and iterate through it

164
00:12:24.540 --> 00:12:26.400
all the way until the end.

165
00:12:26.700 --> 00:12:35.580
And within this loop, I want you to take each item in the data that we have and instead of what it

166
00:12:35.580 --> 00:12:41.100
had before, I want you to add the data that is right next to it to plus one.

167
00:12:41.400 --> 00:12:52.140
So if we had an array that is zero and two, I'm saying from the index of zero over here, I want you

168
00:12:52.140 --> 00:12:56.850
to now instead make zero equal to two.

169
00:12:57.000 --> 00:12:59.070
So index of I plus one.

170
00:12:59.340 --> 00:13:01.500
So we're shifting the.

171
00:13:02.240 --> 00:13:06.140
Items to the left by one.

172
00:13:07.000 --> 00:13:09.220
So we have shifted here.

173
00:13:09.250 --> 00:13:10.630
All the items.

174
00:13:10.900 --> 00:13:12.370
One to the left.

175
00:13:13.750 --> 00:13:21.580
And because we did that, the index that we gave it for the delete automatically gets replaced because

176
00:13:21.580 --> 00:13:25.360
that AI is going to get replaced.

177
00:13:26.330 --> 00:13:28.220
Now there's an issue here, right?

178
00:13:28.400 --> 00:13:33.050
Because now the very last item in the array.

179
00:13:33.890 --> 00:13:42.830
That is this dot data at this dot length minus one, which is the last item in the array.

180
00:13:42.890 --> 00:13:44.930
Well, still exists.

181
00:13:45.200 --> 00:13:54.560
We've shifted everything over by one, but we've never touched the very last item because we stopped

182
00:13:54.560 --> 00:13:55.910
when I.

183
00:13:55.940 --> 00:13:58.850
Is less than this length minus one.

184
00:13:59.120 --> 00:14:03.470
So this is still full.

185
00:14:03.470 --> 00:14:09.170
So I'm going to comment this out and just show you what happens if we just leave it like this.

186
00:14:09.740 --> 00:14:11.690
I'm going to run the new.

187
00:14:14.350 --> 00:14:15.070
Array.

188
00:14:15.670 --> 00:14:16.930
Dot delete.

189
00:14:17.260 --> 00:14:20.410
And I'm going to remove the pop commands for now.

190
00:14:21.170 --> 00:14:27.410
And in the delete I'm going to say I want to delete the you item.

191
00:14:27.410 --> 00:14:29.480
So that's index of one.

192
00:14:29.840 --> 00:14:30.920
If I run this.

193
00:14:32.810 --> 00:14:36.800
I get high, you is deleted.

194
00:14:37.280 --> 00:14:40.730
But then I have exclamation mark at index of one.

195
00:14:40.730 --> 00:14:47.870
So the shifting is working, but at index of two I still have the exclamation mark because, well,

196
00:14:47.870 --> 00:14:48.940
we never deleted it.

197
00:14:48.950 --> 00:14:52.760
We've shifted everything once over, but we never touched index of two.

198
00:14:53.060 --> 00:14:58.400
So all we need to do to get rid of that is the delete keyword.

199
00:15:00.150 --> 00:15:04.050
To delete the last item and obviously to.

200
00:15:05.250 --> 00:15:13.020
Decrement are length because we just delete an item, we can do this length, minus, minus.

201
00:15:13.930 --> 00:15:15.340
If we run this now.

202
00:15:16.270 --> 00:15:19.990
Hey, look at that length of too high exclamation mark.

203
00:15:21.520 --> 00:15:24.880
Let's play a little round to make sure everything is working here.

204
00:15:25.210 --> 00:15:33.720
If let's say I add a couple more push commands here and we'll say Here are high, you are.

205
00:15:33.730 --> 00:15:36.130
And then let's say nice.

206
00:15:37.720 --> 00:15:41.470
If I run this, I get high exclamation mark.

207
00:15:41.650 --> 00:15:42.130
Ah.

208
00:15:42.130 --> 00:15:42.790
Nice.

209
00:15:43.330 --> 00:15:44.290
That doesn't make sense.

210
00:15:44.290 --> 00:15:45.820
Let's change this to zero.

211
00:15:45.820 --> 00:15:48.880
To remove the high.

212
00:15:48.910 --> 00:15:52.690
If I run this, I get you exclamation mark.

213
00:15:52.720 --> 00:15:53.260
Ah.

214
00:15:53.260 --> 00:15:53.980
Nice.

215
00:15:54.650 --> 00:15:54.940
Hmm.

216
00:15:55.060 --> 00:15:56.530
That still doesn't make sense.

217
00:15:56.530 --> 00:15:59.260
Let's remove the exclamation mark so that we only have.

218
00:15:59.260 --> 00:16:00.340
You are nice.

219
00:16:00.640 --> 00:16:03.850
I'm going to run the new array.

220
00:16:04.590 --> 00:16:12.300
And we can delete index of one, which is the exclamation mark, and let's see what we get then.

221
00:16:14.100 --> 00:16:16.330
If I run this, I get.

222
00:16:16.350 --> 00:16:18.000
You are nice.

223
00:16:18.720 --> 00:16:19.350
Awesome.

224
00:16:20.600 --> 00:16:24.470
Now you might look at this and want to add your own methods.

225
00:16:24.530 --> 00:16:33.590
You might want to, let's say in here, return the last item just as a reference, which is how it works

226
00:16:33.590 --> 00:16:35.210
in JavaScript.

227
00:16:36.170 --> 00:16:43.340
But I think for now you have an understanding of how arrays work and how they're implemented underneath

228
00:16:43.340 --> 00:16:43.910
the hood.

229
00:16:43.970 --> 00:16:51.710
We have simple of one commands which are really, really nice, but as soon as we have to start shifting.

230
00:16:52.510 --> 00:16:54.550
Indexes and changing things around.

231
00:16:54.550 --> 00:16:59.620
We have to loop over things which makes it o of n or linear time.

232
00:17:00.810 --> 00:17:06.599
I'm going to leave this for you as a playground after this lesson so you can add your own things.

233
00:17:06.599 --> 00:17:12.030
Maybe you write it in different languages and explore a little bit more into a race.

234
00:17:12.030 --> 00:17:14.079
But this video is already getting long.

235
00:17:14.099 --> 00:17:17.550
I don't want you to get too bored now, so I'll see you in the next video.

236
00:17:17.790 --> 00:17:18.480
Bye bye.

