WEBVTT
1
00:00:01.230 --> 00:00:02.100
Welcome back.

2
00:00:02.400 --> 00:00:07.410
Let's talk about sorting when it comes to specific languages.

3
00:00:07.890 --> 00:00:09.630
And I'm going to use JavaScript here.

4
00:00:09.930 --> 00:00:15.600
I'm going to be showing you different sorting algorithms that can be used with any type of data.

5
00:00:15.630 --> 00:00:19.190
It doesn't just have to be strings, doesn't just have to be numbers.

6
00:00:19.200 --> 00:00:21.000
It can be any type of data.

7
00:00:21.210 --> 00:00:22.560
But I also want to show you why.

8
00:00:22.590 --> 00:00:28.260
Sometimes you want to be careful when it comes to sorting and just don't trust that your built in method

9
00:00:28.260 --> 00:00:31.710
and your own language sorts data correctly.

10
00:00:31.920 --> 00:00:33.990
Let me demonstrate this with JavaScript.

11
00:00:34.020 --> 00:00:41.820
Let's say we have another array here, and this array will call it basket, and this basket will have

12
00:00:41.820 --> 00:00:43.830
instead of letters, we'll have some numbers.

13
00:00:43.830 --> 00:00:47.520
They'll have two 6534.

14
00:00:48.460 --> 00:00:51.610
Two one and let's say seven.

15
00:00:52.120 --> 00:00:52.790
And one more.

16
00:00:52.810 --> 00:00:53.260
Eight.

17
00:00:53.970 --> 00:00:54.360
Now.

18
00:00:54.360 --> 00:00:58.020
We saw that when we sorted the letters, everything looked good.

19
00:00:58.440 --> 00:01:02.010
What happens if I sort the basket here of numbers?

20
00:01:02.130 --> 00:01:03.450
What do you think will happen?

21
00:01:03.870 --> 00:01:10.530
And I encourage you to try this with your own language as well and see what kind of results you get.

22
00:01:11.520 --> 00:01:12.930
Let me click run here.

23
00:01:15.600 --> 00:01:17.190
That's the result.

24
00:01:18.780 --> 00:01:20.730
Is that what you expected?

25
00:01:21.120 --> 00:01:22.860
That doesn't look sorted, does it?

26
00:01:23.100 --> 00:01:29.310
Now, this is a silly example, but it's important to demonstrate that when it comes to sorting, you

27
00:01:29.310 --> 00:01:33.240
want to make sure if you're not implementing it, you know how it works.

28
00:01:33.540 --> 00:01:40.680
For example, when it comes to JavaScript, the way it sorts numbers is that it actually converts them

29
00:01:40.680 --> 00:01:41.760
to string.

30
00:01:41.820 --> 00:01:43.780
At least that's how the source method works.

31
00:01:43.800 --> 00:01:49.140
So what happens underneath the hood is instead of just comparing numbers, it does something along the

32
00:01:49.140 --> 00:01:56.580
lines of if it gets to 65, 65, and then it's going to grab the character code in the first index so

33
00:01:56.580 --> 00:02:00.180
we can use the method care char code at.

34
00:02:00.990 --> 00:02:02.730
And give it zero.

35
00:02:04.260 --> 00:02:08.580
So it's going to measure the character code at 65.

36
00:02:08.610 --> 00:02:11.610
If I run this, I get 54.

37
00:02:12.210 --> 00:02:14.460
Now 54 is Unicode.

38
00:02:14.460 --> 00:02:20.860
And if I go to Unicode table, this is how characters are encoded in our computers.

39
00:02:20.880 --> 00:02:24.420
Now, if I go to six, I see that.

40
00:02:24.420 --> 00:02:31.680
Yeah, we see when we hover over that it says the HTML code for it is 54.

41
00:02:32.040 --> 00:02:34.530
The character representation is 54.

42
00:02:35.560 --> 00:02:38.500
So that's what's happening here if I do.

43
00:02:39.490 --> 00:02:41.380
Let's say to here.

44
00:02:43.150 --> 00:02:44.470
And we'll do one more.

45
00:02:44.470 --> 00:02:45.340
34.

46
00:02:47.060 --> 00:02:50.150
And let's just console.log these so we know what's happening.

47
00:02:53.370 --> 00:02:54.540
And I click run.

48
00:02:54.600 --> 00:02:57.960
We see that too is 50.

49
00:02:59.630 --> 00:03:05.630
65 or six is 54 and 34 is 51.

50
00:03:05.630 --> 00:03:09.860
But if I do something like seven, it's going to grab the.

51
00:03:12.040 --> 00:03:14.680
Number and it's going to be 55.

52
00:03:14.680 --> 00:03:20.110
So a lot of people get confused when they use a saw method like this and they don't get the response

53
00:03:20.110 --> 00:03:21.310
that they wanted.

54
00:03:21.310 --> 00:03:26.830
And that's why it's good to read the documentation of whatever you're using, such as a saw method and

55
00:03:26.830 --> 00:03:29.560
understand how it works in a language.

56
00:03:29.770 --> 00:03:36.970
And to add even more confusion, you see here that the time and space complexity of sort cannot be guaranteed

57
00:03:37.000 --> 00:03:39.280
as it is implementation dependent.

58
00:03:39.280 --> 00:03:43.300
Remember, JavaScript has a standard called schema script.

59
00:03:43.330 --> 00:03:47.110
A governing body suggests what it should look like.

60
00:03:47.110 --> 00:03:52.270
However, how you implement it is really dependent on different engines.

61
00:03:52.270 --> 00:03:59.800
So the Chrome browser would use a different JavaScript implementation then let's say Firefox or Safari,

62
00:03:59.800 --> 00:04:05.950
and what kind of sorte algorithm they use underneath the hood is dependent on the browser.

63
00:04:05.950 --> 00:04:09.640
And that's something we're actually going to talk about later on in the videos.

64
00:04:09.730 --> 00:04:15.850
But to finish off this section about the weirdness of sorting, let me show you one more example.

65
00:04:16.000 --> 00:04:22.570
Let's say I have an array of Spanish words here when you go out a ball Costa's football.

66
00:04:23.720 --> 00:04:25.250
And we want to sort these.

67
00:04:25.550 --> 00:04:27.020
What do you think will happen?

68
00:04:28.220 --> 00:04:29.450
Let me remove this.

69
00:04:30.890 --> 00:04:32.510
And do this here.

70
00:04:33.080 --> 00:04:34.700
If I click Run.

71
00:04:36.180 --> 00:04:42.050
I guess cos football are bowl monico again because of the unicode characters.

72
00:04:42.060 --> 00:04:52.920
The A with the accent on it is not the actual A that would come before something like C as you can see

73
00:04:52.920 --> 00:04:53.430
here.

74
00:04:53.760 --> 00:04:59.580
So in this case, to solve this problem, we would have to do something along the lines of creating

75
00:04:59.580 --> 00:05:06.630
a function inside of sort that takes A and B, which is the first and second item and it's going to

76
00:05:06.630 --> 00:05:10.800
return A plus locale.

77
00:05:10.800 --> 00:05:11.580
Compare.

78
00:05:12.680 --> 00:05:13.310
Be.

79
00:05:14.240 --> 00:05:18.940
Which allows us to compare these even if there were different languages.

80
00:05:18.950 --> 00:05:23.540
So if I run this, you see that it's now fixed and everything is working.

81
00:05:23.900 --> 00:05:29.480
And again, local compare is something that you can check out and I'll link to over here.

82
00:05:30.420 --> 00:05:36.610
Now, the reason I'm showing you this is not because we want to become JavaScript experts.

83
00:05:36.630 --> 00:05:39.180
Well, everybody has their own language.

84
00:05:39.270 --> 00:05:43.380
But to show you that there's many ways that we can sort things.

85
00:05:43.380 --> 00:05:49.140
And even with small little differences like this one, there's a lot of considerations that need to

86
00:05:49.140 --> 00:05:49.830
be had.

87
00:05:50.220 --> 00:05:57.420
And underneath this sort method is actually one of the algorithms that we're going to learn about in

88
00:05:57.420 --> 00:05:58.140
this course.

89
00:05:58.590 --> 00:06:05.310
And I also recommend you checking out the MDM page, which I'll link to that shows you how you can compare

90
00:06:05.310 --> 00:06:13.050
different things such as numbers, such as objects and items in an object using the short method.

91
00:06:15.010 --> 00:06:21.340
You see, in order to sort this properly, we'd have to do something like this where we have a function

92
00:06:21.340 --> 00:06:28.480
inside of the saw method that will take A and B, which is the first and second item.

93
00:06:29.080 --> 00:06:34.270
And we'll simply say return A minus B.

94
00:06:35.630 --> 00:06:40.610
And if we run this, we see that our numbers are now sorted.

95
00:06:41.250 --> 00:06:42.510
But that's enough for now.

96
00:06:42.540 --> 00:06:48.000
Let's talk about the sorting algorithms that are being used in computer science in the next video.

97
00:06:48.480 --> 00:06:49.380
I'll see you in that one.

98
00:06:49.860 --> 00:06:50.490
Bye bye.

