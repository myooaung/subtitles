WEBVTT
1
00:00:00.620 --> 00:00:01.520
Welcome back.

2
00:00:01.790 --> 00:00:04.340
Hopefully that wasn't too bad.

3
00:00:04.370 --> 00:00:09.590
Keep in mind that when it comes to interviewing, interviewers want you to know that you understand

4
00:00:09.590 --> 00:00:10.640
the concepts.

5
00:00:10.730 --> 00:00:17.060
You won't necessarily have to code a binary society from scratch most of the time, at least because

6
00:00:17.060 --> 00:00:24.530
in real life you have things like this library that somebody else created that allows you to use tree

7
00:00:24.530 --> 00:00:27.170
traversal and manipulation techniques.

8
00:00:27.740 --> 00:00:33.920
Because this has already been done before, and you can see by using a library like this that you can

9
00:00:33.920 --> 00:00:37.790
just use it and create the tree that you want.

10
00:00:38.060 --> 00:00:42.320
Most likely you're not going to implement it from scratch by yourself.

11
00:00:42.740 --> 00:00:46.550
But we do want to understand the fundamentals and how it works.

12
00:00:47.120 --> 00:00:50.540
So if this was challenging to you, don't get frustrated.

13
00:00:50.540 --> 00:00:53.840
This doesn't make you a bad engineer or a bad coder.

14
00:00:54.380 --> 00:01:00.740
You're just working towards building those fundamentals so that you can use tools like this in the future

15
00:01:00.740 --> 00:01:03.020
and still understand how they work.

16
00:01:04.580 --> 00:01:05.630
But enough talk.

17
00:01:05.660 --> 00:01:06.980
Let's get to the answer.

18
00:01:07.430 --> 00:01:11.390
I want to create a tree that looks something like this.

19
00:01:12.580 --> 00:01:16.390
So the first thing I'm going to do is work on the insert function.

20
00:01:17.760 --> 00:01:23.970
Now within this insert function, the very first thing I want to do is to say, well, we want to create

21
00:01:23.970 --> 00:01:24.810
the new node.

22
00:01:27.750 --> 00:01:32.670
And we'll say new node will be the value.

23
00:01:32.820 --> 00:01:38.640
So we're just creating the new node class, instantiating it with the value, and that's our new node

24
00:01:38.640 --> 00:01:39.150
now.

25
00:01:39.420 --> 00:01:41.010
So we have a reference to it.

26
00:01:41.160 --> 00:01:47.400
The first thing we want to check, well, if the tree is empty and there's no root node, well, we

27
00:01:47.400 --> 00:01:49.800
should add this as our root node.

28
00:01:49.800 --> 00:01:53.230
So I'm going to say this dot root equals null.

29
00:01:53.310 --> 00:02:03.030
If that's the case, then simply make the root node our current node that we inserted nice and easy.

30
00:02:03.930 --> 00:02:08.100
And just to check that this is working, if I comment all of this out.

31
00:02:09.039 --> 00:02:10.330
And Click Run.

32
00:02:11.150 --> 00:02:12.050
There you go.

33
00:02:12.230 --> 00:02:15.710
Our roon node has a value of nine.

34
00:02:15.710 --> 00:02:19.490
Left is null, right is null because it's the only node.

35
00:02:20.150 --> 00:02:26.270
And by the way, to show you how this string EFI works, it's really, really useful because if I copy

36
00:02:26.270 --> 00:02:33.860
this and just point out here that I'm not copying the quotation marks, which makes it a string, and

37
00:02:33.860 --> 00:02:35.930
if I open up developer tools.

38
00:02:39.480 --> 00:02:40.860
And Google Chrome.

39
00:02:41.630 --> 00:02:44.000
And I go to my console tab.

40
00:02:45.390 --> 00:02:47.340
I can copy and paste this.

41
00:02:47.400 --> 00:02:48.780
Press enter.

42
00:02:48.870 --> 00:02:50.760
And now I have access.

43
00:02:51.560 --> 00:02:54.970
To this tree and it's a lot easier for me to view.

44
00:02:54.980 --> 00:03:01.430
And once we insert other nodes, you'll see that it's very easy to traverse this tree this way and check

45
00:03:01.430 --> 00:03:02.030
your work.

46
00:03:02.700 --> 00:03:04.530
Which is why I added this function.

47
00:03:05.040 --> 00:03:07.500
So we'll come back to that for now.

48
00:03:07.530 --> 00:03:13.050
We see that our insert is working, at least for if the root node is null.

49
00:03:13.050 --> 00:03:15.570
But let's continue if that's not the case.

50
00:03:17.780 --> 00:03:19.100
We'll say else.

51
00:03:20.420 --> 00:03:29.180
If the node is already filled, we'll say that the current node will be the star route.

52
00:03:29.830 --> 00:03:32.440
Because we're going to have to traverse this node.

53
00:03:34.330 --> 00:03:38.290
And we won't know how long we're going to traverse this note for.

54
00:03:38.530 --> 00:03:43.300
We just want to keep traversing until we find a place to insert this.

55
00:03:43.540 --> 00:03:48.310
And this is a bit tricky, but something you'll get used to when you're building trees.

56
00:03:48.490 --> 00:03:54.250
We want to use a while loop and the condition we're going to use is true.

57
00:03:54.580 --> 00:04:00.340
That means just keep looping every time because true is always going to equal the true.

58
00:04:00.910 --> 00:04:02.580
And we have to be careful here.

59
00:04:02.590 --> 00:04:07.810
If we do this, we want to make sure that there is a way for us to exit out of this loop.

60
00:04:07.810 --> 00:04:12.550
Otherwise we're going to have an infinite loop and we'll crash our little patch here.

61
00:04:13.120 --> 00:04:15.400
So what are the conditions that we're going to loop through?

62
00:04:15.430 --> 00:04:17.620
We want to traverse through the tree.

63
00:04:18.700 --> 00:04:25.620
Well, the first check we're going to do is say if value is remember, value is what we insert.

64
00:04:25.630 --> 00:04:30.450
If that is less than the current node dot value.

65
00:04:30.460 --> 00:04:35.590
So we'll start from the root node and say, hey, is the value that we're entering less than the current

66
00:04:35.590 --> 00:04:36.340
node value?

67
00:04:36.640 --> 00:04:39.190
If that's the case, we know the rules.

68
00:04:39.190 --> 00:04:46.720
So we're going to go left if if the value is less than the current node now in here.

69
00:04:47.750 --> 00:04:51.920
We want to check, first of all, if there is no current.

70
00:04:53.330 --> 00:04:56.120
Node dot left.

71
00:04:57.770 --> 00:05:01.660
Is there an element already to the left of the root node?

72
00:05:01.670 --> 00:05:12.590
Because if there isn't, in that case we can just assign the current node dot left to our new node that

73
00:05:12.590 --> 00:05:15.410
we want to enter because there's nothing there.

74
00:05:16.370 --> 00:05:22.640
And we can just return out of this loop and just return our this, which is the binary search tree.

75
00:05:23.300 --> 00:05:28.940
However, if there is something to the left of our node, let's say in this case not.

76
00:05:29.730 --> 00:05:36.810
In that case, we'll say current node is going to equal current node dot left.

77
00:05:37.050 --> 00:05:41.870
So we're going to update and shift over so that the current node is no longer nine.

78
00:05:41.880 --> 00:05:44.550
It's whatever is to the left of nine.

79
00:05:46.010 --> 00:05:49.420
And that's going to keep us looping.

80
00:05:49.430 --> 00:05:54.710
So we're just going to keep looping, keep looping, keep looping until we hit a node that that doesn't

81
00:05:54.710 --> 00:06:03.320
have a left hand side so that we can place the current node or our new node into this place.

82
00:06:04.170 --> 00:06:07.560
But that's for the left side if the value is less than the current node.

83
00:06:08.130 --> 00:06:16.500
If the value is greater, or in this case equal to our current node, and we can decide here where we

84
00:06:16.500 --> 00:06:21.080
want to place values that are equal, that's up to us and how we want to implement it.

85
00:06:21.090 --> 00:06:28.020
We'll say that we'll go right if value is greater or equal to current node.

86
00:06:28.900 --> 00:06:29.770
In that case?

87
00:06:29.770 --> 00:06:35.440
Well, we want to do the first check first, which is if current node dot right.

88
00:06:35.440 --> 00:06:36.730
There's nothing to it.

89
00:06:36.730 --> 00:06:38.290
There's nothing next to it.

90
00:06:38.350 --> 00:06:39.580
To the right of it.

91
00:06:39.580 --> 00:06:45.670
In that case, just like above, we can say current node dot right equals the new node.

92
00:06:48.920 --> 00:06:54.620
And we're also going to return this because we want to stop looping.

93
00:06:57.700 --> 00:07:05.380
Remember, as soon as we have a pointer to null, that's when we want to exit out of this wild loop

94
00:07:05.380 --> 00:07:06.970
that's going to loop forever.

95
00:07:08.070 --> 00:07:15.000
Otherwise we simply say current node is going to equal current node dot.

96
00:07:15.030 --> 00:07:15.630
Right.

97
00:07:19.630 --> 00:07:20.710
And there you go.

98
00:07:21.280 --> 00:07:23.380
Hopefully this works.

99
00:07:24.370 --> 00:07:30.970
But before we test this out and see if we made any minor mistakes, I do want to warn you, if you are

100
00:07:30.970 --> 00:07:38.200
just coding along, I encourage you to pause the video and think through line by line, maybe even drawing

101
00:07:38.200 --> 00:07:40.480
things out, maybe using visual.

102
00:07:40.480 --> 00:07:45.790
Go to see what we're doing because it's really hard to keep this in your head.

103
00:07:45.820 --> 00:07:48.510
Even myself, I can't code this from scratch.

104
00:07:48.520 --> 00:07:54.820
It takes me a bit of time to think things through and see how we want to structure the code.

105
00:07:55.060 --> 00:07:56.560
So don't feel frustrated.

106
00:07:56.560 --> 00:08:02.080
If this is a bit overwhelming, I encourage you to pause the video, try to code along and understand

107
00:08:02.080 --> 00:08:03.820
what's happening step by step.

108
00:08:04.720 --> 00:08:05.380
All right.

109
00:08:05.410 --> 00:08:06.910
Let's test this out.

110
00:08:07.730 --> 00:08:09.320
I have an insert of nine here.

111
00:08:09.320 --> 00:08:11.350
If I click this run that's working.

112
00:08:11.360 --> 00:08:13.190
If I answer it for.

113
00:08:14.550 --> 00:08:14.940
All right.

114
00:08:14.940 --> 00:08:17.880
Looks like four got inserted to, what, about six?

115
00:08:18.810 --> 00:08:19.110
All right.

116
00:08:19.110 --> 00:08:23.580
I'm just going to comment all of this out and see if that works.

117
00:08:23.580 --> 00:08:24.810
I'm going to click Run.

118
00:08:26.150 --> 00:08:26.770
All right.

119
00:08:26.780 --> 00:08:28.880
Looks like we've logged out everything.

120
00:08:28.880 --> 00:08:34.370
But I want to test make sure that everything is working as expected.

121
00:08:34.760 --> 00:08:40.130
So what I'm going to do is I'm going to copy and paste this, remember, without the quotes at the end,

122
00:08:40.130 --> 00:08:42.020
because I don't want to copy the string.

123
00:08:42.080 --> 00:08:44.540
I want to copy the object.

124
00:08:44.540 --> 00:08:47.630
And I'm going to again open my developer tools.

125
00:08:49.940 --> 00:08:51.050
Go to console.

126
00:08:51.530 --> 00:08:54.170
Clear my code and then just copy and paste.

127
00:08:54.260 --> 00:08:58.250
Hit enter and now we can test our tree.

128
00:08:58.880 --> 00:09:00.320
Let me scroll down here.

129
00:09:00.350 --> 00:09:02.120
This is the tree that we want.

130
00:09:02.150 --> 00:09:03.800
We have nine at the top.

131
00:09:04.610 --> 00:09:07.190
To the left and to the right, we have four and 20.

132
00:09:07.220 --> 00:09:07.790
Look at that.

133
00:09:07.790 --> 00:09:08.510
That's good.

134
00:09:08.780 --> 00:09:14.810
And to when we go to the four, we have left is one, right is six.

135
00:09:14.840 --> 00:09:15.560
Awesome.

136
00:09:15.560 --> 00:09:19.340
And one should have no null to the right and left.

137
00:09:19.340 --> 00:09:19.790
Perfect.

138
00:09:19.790 --> 00:09:22.220
Same with six perfect.

139
00:09:22.400 --> 00:09:24.800
And if we scroll down, let's look at 20.

140
00:09:24.830 --> 00:09:29.450
It should have nine or it should have 15 and 170 as it's children.

141
00:09:30.520 --> 00:09:35.860
We have 15 and 170 and both of those pointing to no.

142
00:09:36.740 --> 00:09:36.980
Hey.

143
00:09:36.980 --> 00:09:37.730
Not bad.

144
00:09:38.210 --> 00:09:39.260
Not bad at all.

145
00:09:39.950 --> 00:09:40.970
It wasn't too bad.

146
00:09:40.970 --> 00:09:46.820
Once you get a hang of it and code this on your own, you'll see that it makes sense.

147
00:09:46.820 --> 00:09:54.380
It's all just logic and something that we've learned when working with linked lists and the next video

148
00:09:54.380 --> 00:09:55.910
we're going to try and tackle.

149
00:09:55.910 --> 00:09:56.600
Look up.

150
00:09:56.930 --> 00:10:03.080
If you weren't able to implement insert, please try and do that now before we get to lookup.

151
00:10:03.080 --> 00:10:08.480
Otherwise try to implement lookup on your own and I'll see you in the solution.

152
00:10:08.480 --> 00:10:10.160
Video Bye bye.

