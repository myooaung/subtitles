1
00:00:00,880 --> 00:00:01,780
Welcome back.

2
00:00:02,300 --> 00:00:07,130
I hope you are able to think about why link lists might be good or bad.

3
00:00:08,250 --> 00:00:09,030
In this video.

4
00:00:09,030 --> 00:00:10,560
Let's discuss the answer.

5
00:00:11,160 --> 00:00:18,990
One key thing that you may have seen is that length lists have a sort of loose structure that allows

6
00:00:18,990 --> 00:00:23,010
you to insert a value into the middle of the list.

7
00:00:23,860 --> 00:00:28,720
By simply resetting a few pointers, just like we saw in the animation.

8
00:00:30,710 --> 00:00:33,230
I can insert anything that I want.

9
00:00:33,230 --> 00:00:36,620
And the only changes that happen is.

10
00:00:37,830 --> 00:00:39,510
Somewhere in the middle here.

11
00:00:41,830 --> 00:00:45,610
And this is the same for deleting node in a linked list.

12
00:00:46,210 --> 00:00:52,450
And we remember with an array data structure how when we wanted to insert something that wasn't at the

13
00:00:52,450 --> 00:01:01,810
end of the array, we had to add the item, let's say in memory space one into here and then shift all

14
00:01:01,810 --> 00:01:06,130
the items down and index it down, which costs us a lot of time.

15
00:01:06,130 --> 00:01:07,840
It costs us o of n.

16
00:01:09,150 --> 00:01:17,070
The main difference between a race and linked lists is that in an array, an element or elements are

17
00:01:17,070 --> 00:01:17,790
indexed.

18
00:01:18,210 --> 00:01:24,840
So if I wanted to go to item at index five, I can do that easily in a link list.

19
00:01:24,870 --> 00:01:34,440
You start at the head and traverse the list until you get to item five, which is O of RN.

20
00:01:34,770 --> 00:01:41,760
And this idea of traversal is the same as iteration that we did with the race where we go zero one,

21
00:01:41,760 --> 00:01:42,900
two, three, four, five.

22
00:01:43,880 --> 00:01:49,670
Except we like to call this traversal because you don't really know when the length list will end.

23
00:01:49,700 --> 00:01:53,120
You start from the head and you keep going until you hit null.

24
00:01:53,720 --> 00:01:58,880
And as you'll see in our coding example, we're going to have to use something like a while loop when

25
00:01:58,880 --> 00:02:04,670
we implement our own length lists because we don't usually know how long the list is going to be.

26
00:02:05,690 --> 00:02:12,710
Another advantage that an array might have is that most computers have caching systems that make reading

27
00:02:12,710 --> 00:02:14,300
from sequential memory.

28
00:02:14,300 --> 00:02:20,540
That is memory right next to each other, shelves right next to each other, faster than reading scattered

29
00:02:20,540 --> 00:02:21,350
addresses.

30
00:02:21,350 --> 00:02:23,450
And that's something that we've talked about already.

31
00:02:24,710 --> 00:02:29,060
Array items are always located right next to each other in computer memory.

32
00:02:30,010 --> 00:02:37,090
Linked lists and nodes instead are actually scattered all over memory, kind of like hash tables.

33
00:02:37,860 --> 00:02:45,330
So iterating through a link list or traversing through a link list is usually quite a bit slower than

34
00:02:45,330 --> 00:02:50,610
iterating through items like an array, even though they're technically both o of n.

35
00:02:51,430 --> 00:02:59,350
However, these inserts that we can do in the middle of a link list is a lot better than an array.

36
00:02:59,500 --> 00:03:00,910
What about hash tables?

37
00:03:01,000 --> 00:03:04,270
Remember this when we talked about hash tables?

38
00:03:05,010 --> 00:03:07,200
Well, just like hash tables.

39
00:03:07,200 --> 00:03:13,740
When we insert something into a link list, we just scatter it all over our memory and we can just keep

40
00:03:13,740 --> 00:03:14,190
adding it.

41
00:03:14,220 --> 00:03:14,970
Keep adding it.

42
00:03:15,000 --> 00:03:15,900
Keep adding it.

43
00:03:16,730 --> 00:03:22,760
And we don't have to do any of the on shifting or shifting on the indexes that we did with the race,

44
00:03:23,030 --> 00:03:25,160
which is really, really nice.

45
00:03:26,180 --> 00:03:31,490
You can also delete notes very easily versus with an array.

46
00:03:32,330 --> 00:03:38,960
But the one advantage that it has over hash tables is that there is some sort of order to link list.

47
00:03:39,140 --> 00:03:44,990
Each node points to the next node so you can have sorted data unlike a hash table.

48
00:03:46,190 --> 00:03:54,680
So if we look at our big go of link list, we can see that pre spent, which is a common language we

49
00:03:54,680 --> 00:03:57,890
say to add to the beginning of a link list.

50
00:03:57,950 --> 00:04:03,290
Present is o of one append which is at the end of the list.

51
00:04:03,290 --> 00:04:10,130
To add a new item is of one lookup, which we can also call traversal.

52
00:04:10,130 --> 00:04:11,180
To look for an item.

53
00:04:11,180 --> 00:04:17,600
Let's say we want to find ten is of PN because we have to go from the head all the way until we find

54
00:04:17,600 --> 00:04:18,740
what we're looking for.

55
00:04:19,790 --> 00:04:28,940
Insert is also often because we have to go one by one, find the index so we don't know how long our

56
00:04:28,940 --> 00:04:29,810
link list is.

57
00:04:29,810 --> 00:04:34,700
We find the index and then insert there, which technically could take over again and again.

58
00:04:34,700 --> 00:04:41,360
Something that we're going to implement in code and have a better understanding of and delete is also

59
00:04:41,360 --> 00:04:44,780
all event because we have to find the items.

60
00:04:44,930 --> 00:04:50,420
Now you're thinking to yourself hold on, insert and delete and erase are also event.

61
00:04:50,420 --> 00:04:52,040
So how is that better?

62
00:04:52,880 --> 00:04:56,990
And that's something that we're going to get into when we actually take a look at the code.

63
00:04:57,260 --> 00:05:04,310
Remember, this is the worst case, in which case we insert or delete the very last item.

64
00:05:04,400 --> 00:05:07,180
And most of the times that won't be the case in link list.

65
00:05:07,190 --> 00:05:11,570
Again, something that we're going to talk about a little bit when we code our own link list.

66
00:05:12,370 --> 00:05:18,190
But looking at a diagram like this, it's really hard to truly understand how they work and what length

67
00:05:18,190 --> 00:05:18,910
lists are.

68
00:05:18,940 --> 00:05:20,440
So we're going to code our own.

69
00:05:20,830 --> 00:05:25,840
And the next video we're going to talk about this final piece of the puzzle, what a pointer is, and

70
00:05:25,840 --> 00:05:27,610
then finally code our own link list.

71
00:05:27,610 --> 00:05:31,750
So we understand the big implications a little bit better.

72
00:05:33,250 --> 00:05:34,180
I'll see you on that one.

73
00:05:34,540 --> 00:05:35,140
Bye bye.

