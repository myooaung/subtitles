1
00:00:00,860 --> 00:00:03,590
What is a hash function?

2
00:00:04,010 --> 00:00:07,760
It's something that's used all across computer science.

3
00:00:08,750 --> 00:00:18,320
A hash function is simply a function that generates a value of fixed length for each input that it gets.

4
00:00:19,070 --> 00:00:19,550
All right.

5
00:00:19,550 --> 00:00:20,630
What does that mean?

6
00:00:21,050 --> 00:00:24,860
Well, I have here a MD5 hash generator.

7
00:00:24,860 --> 00:00:32,600
MD5 is the type of hash function and there's many, many types you might have heard of SHA one, SHA

8
00:00:32,600 --> 00:00:34,850
256 and many others.

9
00:00:35,570 --> 00:00:37,400
Using this hash function.

10
00:00:37,400 --> 00:00:39,740
Let's see what happens if I do.

11
00:00:40,280 --> 00:00:41,000
Hello.

12
00:00:42,460 --> 00:00:44,320
You see that right away.

13
00:00:44,350 --> 00:00:52,120
MD5 hashes this string and turns it into this gibberish.

14
00:00:53,220 --> 00:00:54,960
That's what a hash function does.

15
00:00:55,350 --> 00:01:02,790
We give it an input and the function generates some random pattern.

16
00:01:03,240 --> 00:01:06,900
Now there's some key aspects of hash functions.

17
00:01:07,380 --> 00:01:09,540
First is that it's one way.

18
00:01:10,500 --> 00:01:17,220
In the sense that if I give somebody this, they have no idea what the input was.

19
00:01:17,790 --> 00:01:24,330
And it's practically impossible for me to have any clue as to what the input is.

20
00:01:24,630 --> 00:01:31,530
The second is that no matter how many times I put hello in there, it's going to be the same.

21
00:01:31,650 --> 00:01:38,070
But I as soon as I change one thing, it's going to completely change the output.

22
00:01:38,730 --> 00:01:41,070
If I go back to hello and.

23
00:01:41,860 --> 00:01:46,180
Watch me just changed to capital H, even a capital letter.

24
00:01:46,180 --> 00:01:53,560
So it starts with five D for if I do capital H, it's completely different again.

25
00:01:54,440 --> 00:01:57,980
And looking at this, we can at least say that.

26
00:01:58,310 --> 00:01:58,700
Hmm.

27
00:01:58,940 --> 00:02:05,060
I don't know what this is useful for, but the one thing that I know is that no matter what, if I give

28
00:02:05,060 --> 00:02:07,640
it the same input, it's going to give me the same result.

29
00:02:07,640 --> 00:02:11,810
But I have no idea how to convert this back into.

30
00:02:11,810 --> 00:02:12,350
Hello.

31
00:02:13,540 --> 00:02:17,980
This is what we call independent or independent.

32
00:02:18,070 --> 00:02:20,050
There's different pronunciations.

33
00:02:20,050 --> 00:02:26,380
I'm not really sure which one is which, but it is a fancy way of saying that a function given an input

34
00:02:26,380 --> 00:02:28,720
always outputs the same output.

35
00:02:29,670 --> 00:02:37,740
Now, the one benefit and why we would want to use this in a data structure is that we get really fast

36
00:02:37,740 --> 00:02:51,210
data access because all I have to do to find grapes or basket dot grapes is to pass grapes into something

37
00:02:51,210 --> 00:02:52,620
like an MD5 hash.

38
00:02:52,620 --> 00:02:59,760
It generates this number for me and I immediately know where it is in my memory on our computer.

39
00:03:00,460 --> 00:03:03,160
But this doesn't look like an address, does it?

40
00:03:04,510 --> 00:03:11,830
Technically a hash function that we use for hash tables is going to take grapes, generate some sort

41
00:03:11,830 --> 00:03:20,740
of gibberish, and then convert it to an index space or an address space that it has based on this number.

42
00:03:22,270 --> 00:03:32,140
You see, unlike a race where we just had ordered indexes with hash tables, all we need to do is give

43
00:03:32,140 --> 00:03:36,460
it a key and we know exactly where that item is in our memory.

44
00:03:37,140 --> 00:03:43,070
But you might be wondering, this black box hash function, doesn't it slow things down?

45
00:03:43,080 --> 00:03:46,590
Because every time we want to add a property.

46
00:03:47,310 --> 00:03:52,410
And a value grapes and 10,000 to a hash table.

47
00:03:52,440 --> 00:03:57,930
We have to run it through the hash function so we can decide where to put it in memory.

48
00:03:58,410 --> 00:04:03,120
And if you've noticed that good job, that is a big factor.

49
00:04:03,240 --> 00:04:10,620
You don't want this to take a very long time because, well, every time you add a property to memory

50
00:04:10,620 --> 00:04:18,300
or retrieve a property to memory, because, again, we both times we're sending the key grapes into

51
00:04:18,300 --> 00:04:20,760
the hash function to find where to get it from.

52
00:04:21,269 --> 00:04:23,610
We need this to be really, really fast.

53
00:04:24,400 --> 00:04:31,300
And underneath the hood, remember, because hash tables exist in all languages, they're implemented

54
00:04:31,300 --> 00:04:35,440
with an optimum hashing function that's really, really fast.

55
00:04:36,970 --> 00:04:38,110
As a side note.

56
00:04:38,750 --> 00:04:45,620
Hash functions like SHA 256 take a really long time to generate a hash.

57
00:04:46,550 --> 00:04:54,740
And it is an overly complex hashing function that is used a lot in places like cryptography where you

58
00:04:54,740 --> 00:05:00,800
want this to take longer, but that is outside the scope of this course.

59
00:05:00,980 --> 00:05:05,930
If you're interested, I do recommend that you check out the differences between these two.

60
00:05:07,710 --> 00:05:08,610
To review.

61
00:05:08,640 --> 00:05:11,510
We have a key that is grapes.

62
00:05:11,520 --> 00:05:17,760
We send it through a hash function that is going to hash something really, really fast and then map

63
00:05:17,760 --> 00:05:25,170
whatever the hash came out to be into a memory address where we want to store our.

64
00:05:25,880 --> 00:05:28,400
Data are grapes 10,000.

65
00:05:29,270 --> 00:05:34,670
And when it comes to hashing functions, you typically leave this to whatever framework or language

66
00:05:34,670 --> 00:05:35,630
you're using.

67
00:05:35,900 --> 00:05:43,430
And we usually assume a time complexity or big old notation of oh one, because this happens really

68
00:05:43,430 --> 00:05:44,000
fast.

69
00:05:44,630 --> 00:05:45,160
All right.

70
00:05:45,170 --> 00:05:51,380
Now that we understand what this black box does, let's talk a little bit more about hash tables, why

71
00:05:51,380 --> 00:05:55,580
they're useful and why in some cases are better than arrays.

