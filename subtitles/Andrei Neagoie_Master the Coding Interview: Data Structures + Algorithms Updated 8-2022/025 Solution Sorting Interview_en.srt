1
00:00:00,960 --> 00:00:01,890
Welcome back.

2
00:00:01,920 --> 00:00:03,330
How was this exercise?

3
00:00:04,340 --> 00:00:08,570
Let's go step by step and see how your answers match up.

4
00:00:09,140 --> 00:00:13,580
First one sought ten schools around your house by distance.

5
00:00:14,120 --> 00:00:16,219
So the input is only ten.

6
00:00:16,250 --> 00:00:18,140
It's fairly small.

7
00:00:18,170 --> 00:00:20,250
We need something simple.

8
00:00:20,270 --> 00:00:23,810
In this case, I'll probably use insertion sort.

9
00:00:25,390 --> 00:00:28,690
It's really fast on small sorts.

10
00:00:28,720 --> 00:00:35,770
It's easy to code and it has space complexity of of one.

11
00:00:37,240 --> 00:00:44,740
It also could be that these ten schools are already pre sorted or are nearly sorted on our list.

12
00:00:44,740 --> 00:00:48,380
So insertion is just the simplest for this type of small data.

13
00:00:48,400 --> 00:00:51,070
I like insertion sort for this type of things.

14
00:00:52,040 --> 00:00:52,970
What about this one?

15
00:00:53,000 --> 00:00:54,110
This one's a tough one.

16
00:00:55,300 --> 00:01:00,730
eBay sorts listings on their website by the current bid amount.

17
00:01:01,790 --> 00:01:03,620
So what would you use for this?

18
00:01:04,629 --> 00:01:09,760
Well, for this I would actually use something like rat x or counting sort.

19
00:01:10,510 --> 00:01:22,660
Because, well, a bid is usually a number between, let's say, $1 to let's say 50,000, probably even

20
00:01:22,660 --> 00:01:25,340
less when it comes to payment on eBay.

21
00:01:25,360 --> 00:01:27,550
Let's say $1 to $100.

22
00:01:27,850 --> 00:01:31,080
These are numbers that need to be sorted.

23
00:01:31,090 --> 00:01:31,690
Right.

24
00:01:31,690 --> 00:01:40,480
And because it's a fixed length of integers, integers are most likely not going to be 100 million because,

25
00:01:40,480 --> 00:01:42,910
well, hopefully nobody's bidding that much on eBay.

26
00:01:43,030 --> 00:01:50,980
So I would use radix or counting sort to beat that o of n log in time knowing that the bids are always

27
00:01:50,980 --> 00:01:53,170
going to be number within a certain range.

28
00:01:55,160 --> 00:01:59,660
What about not sort sports scores on ESPN?

29
00:02:00,260 --> 00:02:02,180
Well, sports scores can vary.

30
00:02:02,180 --> 00:02:09,560
There's decimal places sometimes there's there's different formats such as tennis and soccer and different

31
00:02:09,560 --> 00:02:09,860
things.

32
00:02:09,860 --> 00:02:13,190
And there's definitely lots of sports and lots of scores to handle.

33
00:02:14,760 --> 00:02:17,640
In this case, I'm going to use quicksort.

34
00:02:18,680 --> 00:02:21,290
It's going to be the most efficient.

35
00:02:21,380 --> 00:02:27,110
And although we might have the worst case, I doubt that the scores are going to be sorted because there's

36
00:02:27,110 --> 00:02:28,580
just so many different kinds.

37
00:02:28,580 --> 00:02:33,020
But I'm also worried about in memory sorting.

38
00:02:33,110 --> 00:02:40,970
So if I use merge sort, it might be a little too much for this because of our increased space complexity

39
00:02:41,270 --> 00:02:46,520
versus quicksort, which if we remember, has better space complexity.

40
00:02:47,470 --> 00:02:50,250
And by the way, you might have your own answer for this.

41
00:02:50,260 --> 00:02:56,140
Maybe you thought that the sports scores on ESPN will be the inputs would be a little bit different.

42
00:02:56,170 --> 00:02:58,740
You could you can have your different types of answers.

43
00:02:58,750 --> 00:03:03,040
The idea here in an interview situation is to explain yourself.

44
00:03:03,040 --> 00:03:07,720
And if you know the principles, then the interviewer is going to say, oh, he or she knows what they're

45
00:03:07,720 --> 00:03:08,440
talking about.

46
00:03:08,920 --> 00:03:11,350
Number four, massive database.

47
00:03:11,350 --> 00:03:14,800
So we can't fill all this data into memory to sort it.

48
00:03:14,830 --> 00:03:22,360
So we probably need to sort it externally and let's say we need to sort through past years user data.

49
00:03:22,360 --> 00:03:27,790
So it's a ton of data and we need to sort it somehow, let's say, by some sort of a date.

50
00:03:28,390 --> 00:03:33,280
Well, based on the information that I got here, it sounds like I need to do something called.

51
00:03:35,890 --> 00:03:36,670
Mozart.

52
00:03:36,940 --> 00:03:38,380
My favorite type of sorting.

53
00:03:39,820 --> 00:03:46,990
And the reason I would pick this is because, well, it sounds that we're not going to be sorting really

54
00:03:46,990 --> 00:03:52,270
in memory because the data is so big, but because the data is so big, I'm really worried about the

55
00:03:52,270 --> 00:03:53,100
performance.

56
00:03:53,110 --> 00:03:56,850
I don't want the worst case of quicksort of oh and squared.

57
00:03:56,860 --> 00:04:01,210
I want to make sure that no matter what I'm going to get o of n log n.

58
00:04:01,900 --> 00:04:02,980
What about the fifth one?

59
00:04:03,550 --> 00:04:10,320
There's an almost sorted Udemy review data that needs to update and add to new reviews.

60
00:04:10,330 --> 00:04:13,330
So we have a massive list of Udemy reviews.

61
00:04:13,810 --> 00:04:21,640
Let's say that you rated the course and this course that you're taking has 500 reviews and you've added

62
00:04:21,640 --> 00:04:24,490
you and your friend just added two new reviews to this course.

63
00:04:25,090 --> 00:04:29,050
In this case, I'm going to use insertion sort.

64
00:04:29,920 --> 00:04:31,540
And why is that?

65
00:04:32,480 --> 00:04:37,880
Well, although this data might be huge and maybe I have a lot of reviews.

66
00:04:38,910 --> 00:04:42,810
I'm assuming that most of the previous data is already sorted.

67
00:04:44,370 --> 00:04:48,510
And all I'm doing is adding two new reviews to this data.

68
00:04:49,420 --> 00:04:55,390
Insertion sort for pre ordered lists is going to work better than any other type of sorting.

69
00:04:56,680 --> 00:05:01,540
Number six temperature records for the past 50 years in Canada.

70
00:05:01,840 --> 00:05:02,380
Oh, boy.

71
00:05:02,410 --> 00:05:03,730
What should we do with this one?

72
00:05:04,120 --> 00:05:05,680
And this is a little tricky.

73
00:05:06,220 --> 00:05:10,480
I would say that first I would use something like raddix or counting sort.

74
00:05:11,940 --> 00:05:21,450
If the temperatures have no decimal places, if we're saying, you know, it's -32, let's say 40 degrees.

75
00:05:21,570 --> 00:05:26,010
That's a integer number between a small range.

76
00:05:26,010 --> 00:05:27,330
That might work well.

77
00:05:27,360 --> 00:05:33,120
But if I want to sort through data that also has maybe temperatures that are really accurate and have

78
00:05:33,120 --> 00:05:40,080
decimal places, which you can't do with raddix or counting sword, then I'm probably going to use quick

79
00:05:40,110 --> 00:05:44,670
sort again just so we can do some in memory sorting.

80
00:05:45,630 --> 00:05:48,150
And hopefully save on that space complexity.

81
00:05:48,780 --> 00:05:49,230
All right.

82
00:05:49,230 --> 00:05:54,570
Last two larger user name database or large user name database needs to be sorted.

83
00:05:54,990 --> 00:05:57,870
Data is very, very random.

84
00:05:59,120 --> 00:06:02,720
All right, so we have a username database that needs to be sorted.

85
00:06:02,960 --> 00:06:04,070
I'm not really sure.

86
00:06:04,070 --> 00:06:06,960
I don't have enough information to make a decision here.

87
00:06:06,980 --> 00:06:16,430
Maybe I would use merge sort if we have enough memory and memory isn't too expensive on the machine.

88
00:06:16,940 --> 00:06:25,040
Or maybe I'll use quicksort if I'm not too worried about worst case and that the username databases

89
00:06:25,040 --> 00:06:26,090
and that large.

90
00:06:26,600 --> 00:06:28,610
Maybe I'll just use quicksort.

91
00:06:29,320 --> 00:06:31,330
Just to save on that memory space.

92
00:06:31,690 --> 00:06:36,490
And then finally, number eight, you want to teach sorting for the first time.

93
00:06:36,790 --> 00:06:38,330
This is a little fun question.

94
00:06:38,350 --> 00:06:43,810
I said bubble sort just so I can add bubble sort to this list and selection sort.

95
00:06:45,700 --> 00:06:46,300
All right.

96
00:06:46,570 --> 00:06:48,880
Hopefully you had fun with these questions.

97
00:06:49,450 --> 00:06:50,890
Sorting algorithms.

98
00:06:50,890 --> 00:06:53,050
This is probably the finest I can get it, actually.

99
00:06:53,050 --> 00:06:54,610
No, I like the Hungarian.

100
00:06:54,610 --> 00:07:00,160
Dancing to sorting is the funnest you can have with sorting, but I hope you have a good idea of how

101
00:07:00,160 --> 00:07:03,460
to answer these questions when they come to the interview.

102
00:07:04,220 --> 00:07:05,420
I'll see you in the next video.

103
00:07:06,020 --> 00:07:06,590
Bye bye.

