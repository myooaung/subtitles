1
00:00:00,470 --> 00:00:01,310
Welcome back.

2
00:00:02,910 --> 00:00:08,460
Let's get back to where we where we want to start actually writing our code, keeping in mind that the

3
00:00:08,460 --> 00:00:13,440
more you prepare and understand what you need to code, the better the whiteboard will go.

4
00:00:13,440 --> 00:00:17,970
So never start a whiteboard interview, not being sure of how things are going to work out.

5
00:00:18,850 --> 00:00:21,240
So we've talked it out.

6
00:00:21,250 --> 00:00:23,470
We have a plan in mind.

7
00:00:23,470 --> 00:00:24,640
Let's start to code this.

8
00:00:24,640 --> 00:00:26,560
Let's do the first loop over here.

9
00:00:27,490 --> 00:00:31,210
That is, we want to loop through the first array and let's.

10
00:00:32,140 --> 00:00:34,540
Remove this code just so it's a little bit cleaner.

11
00:00:34,690 --> 00:00:40,360
We want to loop through the first array, create an object where properties are going to match the items

12
00:00:40,360 --> 00:00:41,140
in the array.

13
00:00:42,000 --> 00:00:43,620
I'm going to create an object.

14
00:00:43,620 --> 00:00:47,310
Let's just call this map.

15
00:00:51,580 --> 00:00:53,530
And this map.

16
00:00:53,950 --> 00:00:57,570
We've created it, but we want to loop through our array.

17
00:00:57,580 --> 00:01:02,530
So I'm going to say let I equals zero.

18
00:01:02,560 --> 00:01:04,030
And we've done this before.

19
00:01:04,060 --> 00:01:05,530
I is.

20
00:01:07,830 --> 00:01:12,150
Less than a ray dot or a ray one dot length.

21
00:01:12,330 --> 00:01:13,770
We're going to increment I.

22
00:01:15,610 --> 00:01:23,950
Now within here, we're first going to say if there is no property.

23
00:01:24,400 --> 00:01:34,390
So we want to check whether a map, dot A exists map dot B exists, map dot C exists, map dot x exists.

24
00:01:34,810 --> 00:01:39,610
So if that doesn't exist in JavaScript, we can just use this syntax.

25
00:01:39,610 --> 00:01:42,610
We can say if no map.

26
00:01:44,090 --> 00:01:44,690
I.

27
00:01:45,020 --> 00:01:46,790
So again, if.

28
00:01:47,610 --> 00:01:57,270
Map I which the first time around is going to be a so if map dot a is the opposite.

29
00:01:57,270 --> 00:02:00,840
So this exclamation mark in JavaScript means the opposite.

30
00:02:00,840 --> 00:02:04,380
If map A exists, it's going to return.

31
00:02:05,770 --> 00:02:06,460
True.

32
00:02:06,910 --> 00:02:10,750
If it doesn't exist, it's going to say false.

33
00:02:11,700 --> 00:02:17,490
So this is this might be a little bit confusing, but we want to say if this doesn't exist.

34
00:02:18,310 --> 00:02:21,400
In that case, we want to do something now.

35
00:02:21,400 --> 00:02:28,630
The way if statements work in JavaScript, it needs to be true in order to execute whatever is in here.

36
00:02:28,660 --> 00:02:35,900
So we add the exclamation mark here to turn false into true.

37
00:02:35,920 --> 00:02:37,710
I know that can be a little bit confusing.

38
00:02:37,720 --> 00:02:43,630
You can read up on it, but essentially what we're doing is we're just checking for the property if

39
00:02:43,630 --> 00:02:44,530
it exists or not.

40
00:02:44,860 --> 00:02:48,670
If it doesn't exist, then we're going to add it.

41
00:02:48,670 --> 00:02:56,380
So I'm going to say cost item equals array one I.

42
00:02:56,410 --> 00:02:58,300
So that is a.

43
00:02:59,210 --> 00:03:04,190
And this item is going to have map item.

44
00:03:05,280 --> 00:03:07,350
Equal to true.

45
00:03:09,600 --> 00:03:10,950
What did we just do here?

46
00:03:11,070 --> 00:03:21,690
Well, we said if map A doesn't exist in that case, let's make a ray one eye, which is a equal to

47
00:03:21,690 --> 00:03:22,230
item.

48
00:03:23,000 --> 00:03:25,760
So map item is going to equal to two.

49
00:03:25,790 --> 00:03:28,460
All we're saying is map a.

50
00:03:29,290 --> 00:03:31,530
In this case equal to true.

51
00:03:31,540 --> 00:03:41,680
So by the end of this, we're going to have an object that is going to have property a true and we're

52
00:03:41,680 --> 00:03:50,180
going to keep looping through it until we have an object called map that has all these items.

53
00:03:50,200 --> 00:03:54,280
Map A, map B, map C, map x equals to true.

54
00:03:55,580 --> 00:03:56,240
All right.

55
00:03:56,270 --> 00:04:03,050
It looks like we're able to achieve this and we can just console dialogue here just to check what we

56
00:04:03,050 --> 00:04:03,440
have.

57
00:04:03,440 --> 00:04:06,710
I'm going to say console dialogue, map.

58
00:04:07,570 --> 00:04:10,300
If I run this function.

59
00:04:10,510 --> 00:04:12,190
Let's do contains.

60
00:04:13,570 --> 00:04:14,770
Common item two.

61
00:04:14,920 --> 00:04:15,880
Array one.

62
00:04:17,410 --> 00:04:18,730
Array two.

63
00:04:20,620 --> 00:04:23,410
And let's minimize this a little bit so we can see.

64
00:04:23,530 --> 00:04:24,880
And if I run this.

65
00:04:26,590 --> 00:04:29,290
Oh, I'm going to make sure I spell that right array too.

66
00:04:29,440 --> 00:04:30,220
Let's run.

67
00:04:30,990 --> 00:04:35,040
We see that we have a true be true c true x true.

68
00:04:35,460 --> 00:04:36,050
Awesome.

69
00:04:36,060 --> 00:04:37,890
So now we have that working.

70
00:04:38,040 --> 00:04:40,920
Let's go through the second step.

71
00:04:42,090 --> 00:04:50,040
And actually, I just notice here that this is the way it is right now, is checking I which is zero

72
00:04:50,160 --> 00:04:52,290
one, two, three.

73
00:04:52,440 --> 00:05:04,470
But instead we want to check A, B, C, X, so instead of I here, it should be array one bracket notation

74
00:05:04,470 --> 00:05:04,950
i.

75
00:05:06,240 --> 00:05:08,130
So that is a.

76
00:05:08,160 --> 00:05:09,840
B, c, x.

77
00:05:11,050 --> 00:05:12,610
As the property of the map.

78
00:05:13,630 --> 00:05:15,850
Lots of brackets here, but I hope that makes sense.

79
00:05:16,150 --> 00:05:18,830
So if I run this, we should still get the same answer.

80
00:05:18,850 --> 00:05:19,390
Perfect.

81
00:05:19,840 --> 00:05:22,100
Now, let's look at the second part here.

82
00:05:22,120 --> 00:05:28,540
We want to loop through the second array and check if the item in the second array exists on the created

83
00:05:28,540 --> 00:05:29,320
object.

84
00:05:30,040 --> 00:05:31,690
This should be fairly simple.

85
00:05:31,720 --> 00:05:35,410
All we need to do and let's remove the console.log map here.

86
00:05:36,560 --> 00:05:39,650
All we need to do is to loop over the second array.

87
00:05:42,620 --> 00:05:51,500
Let J equals zero j should be less than array two dot length.

88
00:05:52,910 --> 00:05:54,830
And then we're going to increment J.

89
00:05:56,830 --> 00:06:00,470
And all we're going to say is if map.

90
00:06:00,850 --> 00:06:01,950
What do we want to check?

91
00:06:01,960 --> 00:06:10,150
What we want to check if it contains the first item in the second array that is Z as part of its properties.

92
00:06:11,150 --> 00:06:15,910
Remember, our map object contains these properties.

93
00:06:15,920 --> 00:06:21,140
So all we're going to say is we're going to check the array to.

94
00:06:22,730 --> 00:06:25,160
And we're going to check the index.

95
00:06:25,160 --> 00:06:33,680
So the first index, zero over 82 is going to be Z, then Y, then A, and if that's true, if it does

96
00:06:33,680 --> 00:06:39,980
contain those things, because remember, when we evaluate this, it's going to return true if it exists.

97
00:06:40,310 --> 00:06:42,830
If not, we're just going to get undefined.

98
00:06:43,940 --> 00:06:45,530
We're going to say return.

99
00:06:45,830 --> 00:06:46,490
True.

100
00:06:47,520 --> 00:06:51,480
Otherwise, at the very end, we can just say return false.

101
00:06:53,140 --> 00:06:53,440
Okay.

102
00:06:53,530 --> 00:06:55,270
Let's see if this actually works.

103
00:06:56,090 --> 00:06:57,470
Want to just click Run.

104
00:07:00,730 --> 00:07:03,420
And I get true OC.

105
00:07:03,460 --> 00:07:06,100
So I see that a and a match.

106
00:07:06,220 --> 00:07:09,190
What if I change this to something that doesn't exist?

107
00:07:09,190 --> 00:07:10,420
Like are.

108
00:07:11,700 --> 00:07:12,750
If I click Run.

109
00:07:13,610 --> 00:07:14,630
I get false.

110
00:07:15,390 --> 00:07:18,870
What if I change this to see?

111
00:07:19,790 --> 00:07:20,720
I get true.

112
00:07:21,660 --> 00:07:23,990
If I get this to X, I get true.

113
00:07:24,000 --> 00:07:27,780
If I change this to W, I get false.

114
00:07:28,890 --> 00:07:29,520
Awesome.

115
00:07:30,170 --> 00:07:41,090
So we've just coded something new, a new function that if we look at, makes things possibly better,

116
00:07:41,090 --> 00:07:41,770
right?

117
00:07:41,780 --> 00:07:52,880
Because we have to for loops one after another, which is O A plus B versus before where we had nested

118
00:07:52,880 --> 00:07:55,400
for loops, which was O A times B.

119
00:07:56,150 --> 00:07:57,950
At this point we can tell the interfere.

120
00:07:57,950 --> 00:08:05,330
If the arrays are substantially large and we can get really large arrays, then this solution when it

121
00:08:05,330 --> 00:08:07,610
comes to time complexity.

122
00:08:11,160 --> 00:08:11,880
Is better.

123
00:08:12,490 --> 00:08:13,480
How cool is that?

124
00:08:14,140 --> 00:08:19,030
Now let's go through the next steps because we're not actually done yet.

125
00:08:20,400 --> 00:08:22,500
Let's make this a little bit bigger.

126
00:08:22,740 --> 00:08:26,820
Number 11 is think about air checks and how you can break this code.

127
00:08:26,910 --> 00:08:30,240
Never make assumptions about the input.

128
00:08:30,280 --> 00:08:34,900
Assume people are trying to break your code and that Darth Vader is using your function.

129
00:08:34,919 --> 00:08:36,600
How will you safeguard it?

130
00:08:37,200 --> 00:08:40,440
So always check for false inputs that you don't want.

131
00:08:41,309 --> 00:08:45,930
But essentially I now look at this code and say, how can I break this?

132
00:08:46,440 --> 00:08:48,120
Well, let's think this through.

133
00:08:52,300 --> 00:08:58,370
If I go through this code and let's say, what if I have two A's here and I run?

134
00:08:58,390 --> 00:08:59,620
Does this still work?

135
00:09:00,310 --> 00:09:04,090
What if I have a and a here?

136
00:09:04,120 --> 00:09:05,290
What happens?

137
00:09:05,320 --> 00:09:06,540
All right, I get true.

138
00:09:06,550 --> 00:09:07,300
That's good.

139
00:09:08,080 --> 00:09:14,260
But what if I have a number here instead of a string?

140
00:09:14,260 --> 00:09:17,080
We just assume that the array is going to contain strings.

141
00:09:18,470 --> 00:09:20,000
I get false.

142
00:09:20,300 --> 00:09:22,370
What if I do one here?

143
00:09:24,250 --> 00:09:24,760
I get true.

144
00:09:24,760 --> 00:09:26,430
Okay, so that works.

145
00:09:26,440 --> 00:09:29,260
What if I do an empty array here?

146
00:09:31,970 --> 00:09:32,480
I get false.

147
00:09:32,480 --> 00:09:34,010
What if I do another array here?

148
00:09:35,070 --> 00:09:35,310
Okay.

149
00:09:35,310 --> 00:09:36,420
I get true.

150
00:09:41,370 --> 00:09:45,150
What if I do null here and JavaScript, which is a little tricky.

151
00:09:46,420 --> 00:09:46,530
Okay.

152
00:09:46,620 --> 00:09:47,440
I get false.

153
00:09:47,440 --> 00:09:49,180
What if I do null?

154
00:09:50,960 --> 00:09:51,680
I get true.

155
00:09:51,680 --> 00:09:53,360
Och, that works.

156
00:09:53,630 --> 00:09:59,450
If we go back to what we had before, we want to now tell the interviewer how we might be able to break

157
00:09:59,450 --> 00:10:00,020
this code.

158
00:10:01,060 --> 00:10:04,610
For example, what if we don't receive a second array?

159
00:10:04,630 --> 00:10:08,710
What if this function is called with just one array?

160
00:10:08,740 --> 00:10:09,660
What happens?

161
00:10:09,670 --> 00:10:11,860
Oh, we get an error.

162
00:10:12,370 --> 00:10:16,560
We want to start thinking about how errors might arise.

163
00:10:16,570 --> 00:10:19,870
We want to make these functions as error free as possible.

164
00:10:19,870 --> 00:10:25,570
And during an interview, you usually won't have time to do all the checks that you want, but you might

165
00:10:25,570 --> 00:10:31,320
want to tell the interviewer possible solutions or possible ways to go around this.

166
00:10:31,330 --> 00:10:34,630
Such as can we assume?

167
00:10:36,110 --> 00:10:45,920
Always to parameters in the function is what happens if in the second parameter I pass zero.

168
00:10:47,320 --> 00:10:47,480
Okay.

169
00:10:47,620 --> 00:10:48,780
I still get false.

170
00:10:48,790 --> 00:10:50,140
What if I pass?

171
00:10:50,680 --> 00:10:51,370
No.

172
00:10:52,730 --> 00:10:56,900
Oh I get an error that says I can't read length of no.

173
00:10:57,380 --> 00:11:03,830
So you want to start thinking about and maybe discussing with the interviewer how you may break this

174
00:11:03,830 --> 00:11:10,130
function and how you may improve it, such as doing checks, such as if statements to make sure that

175
00:11:10,130 --> 00:11:14,660
what the inputs you are getting are what you are expecting.

176
00:11:14,690 --> 00:11:20,000
Now, this is when testing comes in and testing your code comes in during most interview.

177
00:11:20,000 --> 00:11:22,490
That's usually beyond the scope of the interview.

178
00:11:22,490 --> 00:11:27,860
And it's you have limited time, so you can't do this, but it's good to tell the interviewer what you

179
00:11:27,860 --> 00:11:28,460
would do.

180
00:11:28,730 --> 00:11:33,920
This is one of those things that it's simple enough that you can just tell the interviewer this is what

181
00:11:33,920 --> 00:11:38,840
you would do versus coding it, and they will essentially give you full marks for it.

182
00:11:41,050 --> 00:11:42,190
Let's look at the next step.

183
00:11:43,240 --> 00:11:46,370
Don't use bad confusing names like I and J.

184
00:11:46,430 --> 00:11:48,370
Oh, write code that reads well.

185
00:11:48,700 --> 00:11:53,430
Now, when I look at this function, it's OC.

186
00:11:53,710 --> 00:12:04,120
Now I say don't use variables like I and J, and although I'm using I and J exactly here, this is being

187
00:12:04,120 --> 00:12:07,180
used for for loops and for loops.

188
00:12:07,300 --> 00:12:13,390
Using I here is OC because it is a bit of a standard, especially in JavaScript, and these are just

189
00:12:13,390 --> 00:12:14,680
simply indexes.

190
00:12:15,680 --> 00:12:25,010
But perhaps if these parameters had meanings such as maybe this was the user array and this was the

191
00:12:25,010 --> 00:12:33,870
items array, naming these as more useful, more meaningful variables or parameters might be better.

192
00:12:33,890 --> 00:12:41,480
Maybe this map variable can be called tally or something more meaningful specific for the code.

193
00:12:42,170 --> 00:12:46,640
Again, this is one of those things that you can talk to the interviewer about and let them know that

194
00:12:46,640 --> 00:12:48,170
you're thinking about these things.

195
00:12:48,170 --> 00:12:50,990
And that's very, very important.

196
00:12:51,080 --> 00:12:56,360
Again, as long as you're thinking about that and you're telling the interviewer that you're considering

197
00:12:56,360 --> 00:12:58,430
these things, you're getting full marks for it.

198
00:12:59,150 --> 00:12:59,990
Let's keep going.

199
00:13:00,470 --> 00:13:07,910
Test your code checks for no params, zero undefined null, massive arrays, async code, so on and

200
00:13:07,910 --> 00:13:08,630
so forth.

201
00:13:08,750 --> 00:13:13,280
And we kind of cover this in the previous step, but you want to just check with the interviewer that

202
00:13:13,280 --> 00:13:16,340
we're making some assumptions here, but let them know that you're thinking about it.

203
00:13:16,340 --> 00:13:20,900
You're thinking about the fact that this function might not always be run with two arrays.

204
00:13:21,320 --> 00:13:26,120
How can we test this function, and how would you test this function to make sure that it gives the

205
00:13:26,120 --> 00:13:28,880
expected result that we always return?

206
00:13:28,880 --> 00:13:30,290
True or false?

207
00:13:30,290 --> 00:13:34,880
And this is where you might say that you're going to test your code and run some unit tests.

208
00:13:35,180 --> 00:13:40,790
Finally, even though I say finally here, there is another point, but finally talk to the interviewer

209
00:13:40,790 --> 00:13:42,830
where you would improve the code.

210
00:13:42,890 --> 00:13:43,800
Does it work?

211
00:13:43,820 --> 00:13:45,570
Are there different approaches?

212
00:13:45,590 --> 00:13:46,910
Is it readable?

213
00:13:46,940 --> 00:13:49,940
What would you do or what would you Google to improve?

214
00:13:50,450 --> 00:13:52,280
How can performance be improved?

215
00:13:52,640 --> 00:13:56,720
Well, looking at this code, I can start telling the interviewer that.

216
00:13:57,020 --> 00:13:57,360
Hmm.

217
00:13:58,010 --> 00:14:05,780
The downside to this solution is that, well, only numbers and strings and booleans can be used correctly

218
00:14:05,780 --> 00:14:12,410
because we're using an object, especially in JavaScript and adding properties.

219
00:14:13,740 --> 00:14:16,230
A, B, C and X to this object.

220
00:14:16,410 --> 00:14:24,150
Now, object properties, especially the way we're using a JavaScript object right now, might not work

221
00:14:24,150 --> 00:14:30,030
if we're using non literal values, maybe not strings, maybe a JavaScript expression.

222
00:14:30,450 --> 00:14:36,630
And you might also argue that this code could be a little bit more readable.

223
00:14:36,840 --> 00:14:44,550
For example, although this code is better in terms of time complexity when it comes to JavaScript,

224
00:14:44,550 --> 00:14:48,030
there's actually a more readable, cleaner way of doing this.

225
00:14:48,390 --> 00:14:49,440
Let me show you.

226
00:14:49,530 --> 00:14:52,650
This is something that is language specific.

227
00:14:52,650 --> 00:14:58,350
That means depending on how much you know about the language that you're working with, you might be

228
00:14:58,350 --> 00:15:05,100
able to use methods to simplify this process so you can tell the interviewer I would Google specific

229
00:15:05,250 --> 00:15:10,980
methods on let's say erase to see if I can just clean up the code and make it readable.

230
00:15:11,010 --> 00:15:14,640
For example, I can do this exact same function.

231
00:15:18,150 --> 00:15:24,390
And we'll call a contains common item three that takes in array one array to.

232
00:15:26,800 --> 00:15:30,220
And in one line I can just return

233
00:15:32,980 --> 00:15:42,910
array one dot some, which is a new feature I think is six with JavaScript and I can say item using

234
00:15:42,910 --> 00:15:50,740
arrow functions which come with the six and I can say loop through array two dot includes and check

235
00:15:50,740 --> 00:15:53,500
if it includes the item.

236
00:15:55,310 --> 00:15:55,770
Oops.

237
00:15:55,880 --> 00:15:56,810
Not that item.

238
00:15:58,960 --> 00:15:59,620
Now.

239
00:15:59,620 --> 00:16:00,970
What do we just do here?

240
00:16:02,290 --> 00:16:08,410
Well, we're using some built in JavaScript methods to do essentially what we've done above, which

241
00:16:08,410 --> 00:16:16,570
is check the first array, iterate through each item in the array, and if some of them include the

242
00:16:16,570 --> 00:16:22,390
items in our array to just return true or false if we actually check this.

243
00:16:25,640 --> 00:16:26,720
With our array.

244
00:16:32,070 --> 00:16:39,360
And I run this and let's comment out the first one if I hit play here.

245
00:16:40,460 --> 00:16:47,660
Oh I've got to make sure that this is includes not include I get false because our array doesn't have

246
00:16:47,660 --> 00:16:48,350
any matches.

247
00:16:48,350 --> 00:16:53,090
If it does have a and a match, I get true.

248
00:16:53,420 --> 00:16:53,960
Look at that.

249
00:16:53,960 --> 00:16:57,710
I just create a nice little function using JavaScript here.

250
00:16:57,740 --> 00:16:58,780
How cool is that?

251
00:16:58,790 --> 00:17:02,510
This is what we talk about when we say there's different solutions to a problem.

252
00:17:02,960 --> 00:17:08,510
We now have a way to measure different solutions to a problem.

253
00:17:09,369 --> 00:17:14,589
We can say that there's actually another solution using some of the built in methods that comes with

254
00:17:14,589 --> 00:17:15,130
JavaScript.

255
00:17:15,130 --> 00:17:18,710
That is, some would say, more readable, more concise.

256
00:17:18,730 --> 00:17:26,109
If you're working on a team that really knows their JavaScript, this is a lot easier to read than this,

257
00:17:26,109 --> 00:17:26,790
right?

258
00:17:26,800 --> 00:17:29,680
So maybe readability is more important.

259
00:17:31,020 --> 00:17:33,300
You might say that this is a better solution.

260
00:17:33,940 --> 00:17:38,550
And now the thing you may have noticed is that we've talked about time complexity here.

261
00:17:40,280 --> 00:17:43,280
And we haven't really talked about space complexity.

262
00:17:43,280 --> 00:17:45,650
And this goes into a final point.

263
00:17:45,680 --> 00:17:50,600
If your interviewer is happy with your solution, the interviewer usually ends here.

264
00:17:50,630 --> 00:17:56,030
It is also common, though, that the interviewer asks you extending questions such as how would you

265
00:17:56,030 --> 00:17:59,900
handle problem if the whole input is too large to fit into memory?

266
00:18:00,560 --> 00:18:07,790
Well, if we talk about space complexity here, we can see that in the first solution that we had.

267
00:18:07,790 --> 00:18:09,380
Let me comment this out.

268
00:18:10,540 --> 00:18:12,880
We have space complexity of.

269
00:18:14,920 --> 00:18:15,490
Oh.

270
00:18:17,090 --> 00:18:17,720
One.

271
00:18:21,850 --> 00:18:24,370
Because we're not creating any new variables.

272
00:18:24,370 --> 00:18:26,860
We're just using the inputs arrays.

273
00:18:28,050 --> 00:18:32,730
Technically additional space complexity for our function is a one.

274
00:18:32,730 --> 00:18:33,660
It's constant.

275
00:18:34,050 --> 00:18:36,810
But if we scroll down to this one.

276
00:18:37,550 --> 00:18:44,030
Well, we're creating a new object here, and we're adding the first array.

277
00:18:45,120 --> 00:18:48,220
Into an object which takes up memory.

278
00:18:48,240 --> 00:18:50,970
So this solution actually has.

279
00:18:51,780 --> 00:18:56,940
Space complexity of zero A, which is the first ray space complexity.

280
00:18:58,050 --> 00:19:04,500
So if an interviewer says if there's limited memory or memories expensive, you can just tell him or

281
00:19:04,500 --> 00:19:12,090
her, well, this solution, although faster in terms of time complexity, is more heavy in terms of

282
00:19:12,090 --> 00:19:13,290
space complexity.

283
00:19:14,140 --> 00:19:14,860
Now.

284
00:19:15,710 --> 00:19:21,470
This point here that we forgot to mention is something that, again, is really good to mention during

285
00:19:21,470 --> 00:19:22,200
your interview.

286
00:19:22,220 --> 00:19:24,740
Modularized your code from the very beginning.

287
00:19:24,740 --> 00:19:27,560
Break up your code into beautiful small pieces.

288
00:19:27,560 --> 00:19:29,690
And that just comments if you need to.

289
00:19:30,200 --> 00:19:31,280
What does that mean?

290
00:19:31,400 --> 00:19:37,240
Well, we have the solution over here that we've worked on and we've commented it out.

291
00:19:37,250 --> 00:19:43,610
We've modularized saying that this first block of code is going to do something, then this block of

292
00:19:43,610 --> 00:19:45,260
code is going to do something else.

293
00:19:45,260 --> 00:19:51,980
But as code gets more and more complex, it becomes increasingly important to write in a modular way.

294
00:19:52,010 --> 00:19:56,390
That is, small bits and pieces that read like English.

295
00:19:56,390 --> 00:20:02,780
You see long, really hard to read code cost companies a lot of money.

296
00:20:03,760 --> 00:20:11,080
Because it's not just you working on a code base, it's most likely tens of hundreds, if not thousands

297
00:20:11,080 --> 00:20:12,820
of developers and engineers.

298
00:20:13,670 --> 00:20:20,570
So companies want to hire somebody that is able to write clean code that is readable, that is easy

299
00:20:20,570 --> 00:20:23,840
for anyone to pick up and code along with.

300
00:20:24,170 --> 00:20:31,160
For example, here, what we might want to do is actually separate these out into different functions,

301
00:20:31,160 --> 00:20:36,710
maybe creating a function in here that perhaps says map.

302
00:20:37,420 --> 00:20:39,340
Array to.

303
00:20:40,310 --> 00:20:41,120
Object.

304
00:20:41,990 --> 00:20:45,170
That receives an the first array item.

305
00:20:46,240 --> 00:20:55,840
And then maybe hear a nother function to the outside world that says Compare array to object.

306
00:20:56,260 --> 00:21:01,870
Now, you don't really have to do this during an interview, but it's good to mention it and talk about

307
00:21:01,870 --> 00:21:04,550
the idea of modularized your code.

308
00:21:04,570 --> 00:21:09,520
If a function is doing too many things, that's not ideal.

309
00:21:09,550 --> 00:21:14,680
When we say modular, we want to build small pieces of the code that do one thing and one thing really

310
00:21:14,680 --> 00:21:15,160
well.

311
00:21:15,190 --> 00:21:18,070
Ideally, a function takes an input.

312
00:21:18,740 --> 00:21:20,390
And returns an output.

313
00:21:20,390 --> 00:21:24,380
And inside of that block does just one thing.

314
00:21:24,380 --> 00:21:32,840
If it has to do any extra actions, well, perhaps you have another function that lives on the outside

315
00:21:32,840 --> 00:21:33,290
world.

316
00:21:33,290 --> 00:21:39,590
And this function also does one thing really well, and this creates really testable, clean code that

317
00:21:39,590 --> 00:21:40,730
is modular.

318
00:21:41,150 --> 00:21:46,420
Again, something that is really good to mention and talk about in your interview who.

319
00:21:46,610 --> 00:21:47,240
All right.

320
00:21:47,660 --> 00:21:53,870
I know this is a lot and it's a lot to think about because now you start thinking, hmm, am I going

321
00:21:53,870 --> 00:22:01,370
to have to worry about each code that I write and analyze it this deeply know in your day to day life

322
00:22:01,370 --> 00:22:02,570
you're not going to do that.

323
00:22:02,570 --> 00:22:08,120
But I wanted to demonstrate to you that this is the kind of thought process that really good developers

324
00:22:08,120 --> 00:22:11,360
have and what companies are interviewing for.

325
00:22:11,540 --> 00:22:17,930
If you're able to think clearly through these steps like I have outlined for you and you're able to

326
00:22:17,930 --> 00:22:25,310
solve problems this way, you see how much more impressive it is than if I just wrote down this solution

327
00:22:25,310 --> 00:22:26,900
without any explanation.

328
00:22:27,620 --> 00:22:34,370
Even if you don't get to this part and time runs out during your interview, you've demonstrated to

329
00:22:34,370 --> 00:22:37,130
your interviewer that you're able to think clearly.

330
00:22:37,130 --> 00:22:45,230
You have the fundamentals to think like an engineer, and these are great qualities that companies love

331
00:22:45,230 --> 00:22:47,570
to hire for and skills that are very rare.

332
00:22:48,930 --> 00:22:50,740
I hope you had fun with this exercise.

333
00:22:50,760 --> 00:22:54,270
You might have to come back to these videos later on.

334
00:22:54,600 --> 00:22:57,210
But for now, I'll see you in the next one.

335
00:22:57,720 --> 00:22:58,320
Bye bye.

