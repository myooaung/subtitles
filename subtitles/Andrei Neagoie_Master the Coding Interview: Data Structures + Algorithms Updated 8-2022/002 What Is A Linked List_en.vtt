WEBVTT
1
00:00:01.480 --> 00:00:03.940
What is a linked list?

2
00:00:04.850 --> 00:00:08.900
As the name suggests, it's a list that is linked.

3
00:00:09.790 --> 00:00:11.770
All right, Andre, that's not very helpful.

4
00:00:11.770 --> 00:00:13.420
Can you actually explain it to us?

5
00:00:13.840 --> 00:00:14.320
All right.

6
00:00:14.320 --> 00:00:17.050
Well, I have a little diagram here for you.

7
00:00:18.000 --> 00:00:23.970
A list or in this case, as we'll find out soon, a singly linked list.

8
00:00:24.820 --> 00:00:30.340
Contains a set of notes and think of nodes as these blocks.

9
00:00:31.150 --> 00:00:34.330
Both red and green block together is a note.

10
00:00:35.160 --> 00:00:42.810
These notes have two elements the value of the data you want to store, in this case, the number five

11
00:00:43.230 --> 00:00:47.100
and a pointer to the next node in line.

12
00:00:47.340 --> 00:00:51.630
So you can see the green block here points to the next node.

13
00:00:52.580 --> 00:00:55.760
The first node is called the head.

14
00:00:56.570 --> 00:00:59.900
And the last node is called the tail.

15
00:01:01.160 --> 00:01:03.290
Now, depending on some people.

16
00:01:03.290 --> 00:01:06.680
Some people like to call the tail anything that is after the head.

17
00:01:06.680 --> 00:01:08.600
So including this block over here.

18
00:01:09.590 --> 00:01:15.320
But I prefer the term tail referring to the very last note.

19
00:01:16.800 --> 00:01:25.950
Finally, link lists are what we call null terminated, which signifies that it's the end of the list.

20
00:01:26.190 --> 00:01:33.360
So we know that this is the tail node because it points to no, there's nothing coming after it.

21
00:01:34.060 --> 00:01:40.390
Now pointer is a term that you hear a lot in programming and computer science.

22
00:01:40.390 --> 00:01:46.870
And we have a video coming up discussing what a pointer actually is, but to focus just on length lists

23
00:01:46.870 --> 00:01:47.470
for now.

24
00:01:48.570 --> 00:01:52.080
You can see that it's a very simple data structure.

25
00:01:52.930 --> 00:01:58.420
It's simply an element that links to the next element that links to the next element.

26
00:01:58.420 --> 00:02:03.490
And it keeps going, keeps going, keeps going until the last element that points to no.

27
00:02:04.920 --> 00:02:10.949
You can have them sorted, you can have them unsorted and you can have notes pretty much contain any

28
00:02:10.949 --> 00:02:12.000
sort of data type.

29
00:02:12.980 --> 00:02:14.960
But let's take a look at some pseudocode.

30
00:02:17.430 --> 00:02:19.760
Up until now, we learned how arrays work.

31
00:02:19.770 --> 00:02:25.110
And here I can just create a simple array, let's say a basket that contains our grocery list.

32
00:02:25.120 --> 00:02:29.250
We have apples, we have grapes.

33
00:02:29.940 --> 00:02:33.600
The most delicious of the fruits, and we have pears.

34
00:02:34.920 --> 00:02:41.460
Now, how can we have a basket that's not an array, but a linked list?

35
00:02:42.600 --> 00:02:48.570
Well, we can just say that our link list and this is not actual code, just pseudocode.

36
00:02:48.870 --> 00:02:55.260
I can say that our link list will contain apples that then points to grapes.

37
00:02:55.350 --> 00:02:58.590
That then points to pears.

38
00:03:00.540 --> 00:03:06.570
And these little arrows are essentially pointers saying apples to grapes, to pears.

39
00:03:06.600 --> 00:03:08.270
Remember, this isn't actually code.

40
00:03:08.280 --> 00:03:10.380
I'm just creating a nice diagram for you.

41
00:03:12.000 --> 00:03:20.220
A more accurate diagram might be something like this where we have apples in memory of memory space

42
00:03:20.220 --> 00:03:27.090
of, let's say a nine, four, seven, and this node points to the next node, which is grapes that

43
00:03:27.090 --> 00:03:29.190
is at this location in memory.

44
00:03:29.190 --> 00:03:34.590
And then that node points to pears that is at this location in memory.

45
00:03:34.590 --> 00:03:38.610
And because this is the end of the list, the tale it points to, no.

46
00:03:39.350 --> 00:03:43.670
Now you're thinking to yourself, Andre, how come you're not just coding this in JavaScript?

47
00:03:43.670 --> 00:03:49.010
Just show us how link lists work in JavaScript and stop with this pseudocode gibberish.

48
00:03:49.690 --> 00:03:55.000
Well, JavaScript doesn't actually come with link lists built in.

49
00:03:55.450 --> 00:03:56.620
Remember what I said?

50
00:03:57.340 --> 00:04:00.610
Different languages have different tools available to them.

51
00:04:01.150 --> 00:04:10.000
Languages like Java have linked lists, while JavaScript doesn't come prebuilt with link lists.

52
00:04:10.790 --> 00:04:13.100
But luckily for us, we can build one.

53
00:04:13.520 --> 00:04:16.760
And this is why you typically do in programming.

54
00:04:16.760 --> 00:04:18.800
When you don't have something, you build it.

55
00:04:18.800 --> 00:04:24.500
And we have the building blocks to be able to build a link list, and that's what we're going to do

56
00:04:24.530 --> 00:04:26.420
as part of an exercise coming up.

57
00:04:27.430 --> 00:04:33.400
But before we code our own link list and create our own linked list data structure.

58
00:04:33.850 --> 00:04:35.770
Let's do a fun little exercise.

