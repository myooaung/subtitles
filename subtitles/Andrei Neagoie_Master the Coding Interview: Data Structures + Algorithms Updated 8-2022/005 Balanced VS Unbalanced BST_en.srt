1
00:00:00,790 --> 00:00:01,660
Welcome back.

2
00:00:02,240 --> 00:00:04,059
While playing with visual go.

3
00:00:04,070 --> 00:00:07,040
Did you notice a problem with binary search trees?

4
00:00:08,000 --> 00:00:10,460
If not, let me demonstrate something to you.

5
00:00:10,730 --> 00:00:13,400
Let's say I keep inserting here.

6
00:00:14,670 --> 00:00:16,170
Let's say 86.

7
00:00:20,700 --> 00:00:24,240
And then while that's going and I'll also insert 90.

8
00:00:28,250 --> 00:00:31,400
And finally, I'll insert 99.

9
00:00:37,280 --> 00:00:38,000
All right.

10
00:00:38,000 --> 00:00:40,820
What is the problem with this?

11
00:00:40,940 --> 00:00:49,610
Well, you can imagine a situation where we have this really unbalanced binary search tree where all

12
00:00:49,610 --> 00:00:53,420
the nodes just keep getting added to the right, to the right, to the right, to the right.

13
00:00:54,050 --> 00:00:59,960
If we imagine that we'd even have this section, this all of a sudden turns into a link list where we're

14
00:00:59,960 --> 00:01:03,590
just looping through every single node.

15
00:01:04,920 --> 00:01:08,090
This is a big problem that comes with binary search trees.

16
00:01:08,100 --> 00:01:17,130
That is, you can have balanced search trees like the one right here that gives us this log n performance,

17
00:01:17,130 --> 00:01:25,350
but then also have unbalanced ones where it sort of turns into a long length list where instead of being

18
00:01:25,350 --> 00:01:34,680
able to do the log and operations, you now have to loop through every single node and lookup and searches

19
00:01:34,680 --> 00:01:37,320
become o of n or linear time.

20
00:01:37,920 --> 00:01:44,160
And you even saw in our visual go demonstration how slow it took to insert items because it had to loop

21
00:01:44,160 --> 00:01:45,330
through so many things.

22
00:01:45,510 --> 00:01:51,030
One of the keys that you'll have to remember, and this is a question that you might get asked in interviews,

23
00:01:51,030 --> 00:01:55,770
is why an unbalanced binary search tree is bad?

24
00:01:55,830 --> 00:01:59,160
And I hope this demonstrates why it's not a good idea.

25
00:01:59,610 --> 00:02:06,480
Ideally, we want to balance our search trees so that we can have this performance optimization.

26
00:02:07,720 --> 00:02:17,920
If we go to our big cheat sheet, we see that with binary searches that we have o log of DN for most

27
00:02:17,920 --> 00:02:19,630
things, which is average.

28
00:02:19,630 --> 00:02:26,080
But when it comes to worst case, when we have an unbalanced tree that all operations are o of n or

29
00:02:26,080 --> 00:02:26,860
linear time.

30
00:02:27,100 --> 00:02:31,060
So you might be asking yourself, how do you balance a tree?

31
00:02:32,030 --> 00:02:35,720
And luckily for us, there's algorithms that help us do that.

32
00:02:36,080 --> 00:02:42,230
It is really advanced and we will talk about it after we build our own tree and some of the options

33
00:02:42,230 --> 00:02:43,040
that we have.

34
00:02:43,280 --> 00:02:50,120
For example, we have things like AVL trees and red black trees that allow us to make sure that our

35
00:02:50,120 --> 00:02:52,430
binary search tree is going to be balanced.

36
00:02:53,090 --> 00:02:59,030
Luckily for us, they're are built in most programming languages and in interview questions.

37
00:02:59,030 --> 00:03:05,960
They won't really ask you to balance a binary search tree because, well, it can get pretty complicated

38
00:03:05,960 --> 00:03:11,120
and time consuming and interviews usually don't have enough time to get you to do that.

39
00:03:11,150 --> 00:03:17,510
The idea is to be able to talk about it and know that there are ways to balance a search tree and be

40
00:03:17,510 --> 00:03:20,240
able to talk about the trade offs, just like we did.

41
00:03:20,570 --> 00:03:26,000
Now we're going to talk about these two ways of balancing the search tree in an upcoming video.

42
00:03:26,540 --> 00:03:29,210
But for now, let's just focus on the basics.

43
00:03:30,550 --> 00:03:36,190
In the next video, I want to talk about the pros and cons of using something like a binary search tree

44
00:03:36,190 --> 00:03:38,650
and then finally implement our own.

45
00:03:39,400 --> 00:03:40,510
I'll see you in the next one.

46
00:03:41,140 --> 00:03:41,650
Bye bye.

