WEBVTT
1
00:00:00.580 --> 00:00:01.510
Welcome back.

2
00:00:01.540 --> 00:00:04.450
Let's code our own bubble sort algorithm.

3
00:00:04.750 --> 00:00:07.960
I'm going to create a function called bubble sort.

4
00:00:09.280 --> 00:00:11.680
That's going to take in an array.

5
00:00:12.530 --> 00:00:16.640
And I have an array up here for us of these numbers.

6
00:00:17.060 --> 00:00:23.270
And ideally, when we enter this array into this function, it spits out a sorted array.

7
00:00:24.150 --> 00:00:31.500
And based on the animation that we saw, we ideally start from the beginning, compare first and second

8
00:00:31.500 --> 00:00:34.200
item, swap out the items.

9
00:00:34.230 --> 00:00:40.260
If the left one is larger than the right and keep going, keep going, keep going until the largest

10
00:00:40.260 --> 00:00:45.750
item ends up in the last index and then we loop over things again.

11
00:00:46.530 --> 00:00:51.840
The first thing I want to do is say that I'll just create a variable so I don't have to keep repeating

12
00:00:51.840 --> 00:00:52.350
myself.

13
00:00:52.350 --> 00:01:00.060
I'll get array dot length here, which will be the length of this item, which should be ten I believe.

14
00:01:00.060 --> 00:01:04.379
One, two, three, four, five, six, seven, eight, nine, ten, 11.

15
00:01:04.650 --> 00:01:05.850
Never mind, it's 11.

16
00:01:07.080 --> 00:01:08.970
And in here, we'll do a four loop.

17
00:01:10.570 --> 00:01:16.090
And we'll say Let I equals to zero, which will be the first index of the array.

18
00:01:17.880 --> 00:01:20.160
I is less than length.

19
00:01:22.030 --> 00:01:22.360
I.

20
00:01:22.360 --> 00:01:22.660
Plus.

21
00:01:22.660 --> 00:01:23.380
Plus.

22
00:01:24.480 --> 00:01:26.820
And within here we grab the first item.

23
00:01:26.820 --> 00:01:31.020
We now want to compare it to 44 and so on and so forth.

24
00:01:31.260 --> 00:01:32.940
We should know this by now.

25
00:01:33.360 --> 00:01:35.340
We want to add another for loop.

26
00:01:35.610 --> 00:01:38.280
J is going to equal zero.

27
00:01:39.860 --> 00:01:42.200
Jay is going to be less than a month.

28
00:01:44.070 --> 00:01:46.020
And we'll say J plus.

29
00:01:46.020 --> 00:01:46.620
Plus.

30
00:01:48.290 --> 00:01:49.550
Now in here.

31
00:01:50.440 --> 00:01:53.890
We'll say that if Ray.

32
00:01:55.220 --> 00:01:57.670
J at index of zero.

33
00:01:57.680 --> 00:02:02.390
So that is 99 is greater than array.

34
00:02:03.670 --> 00:02:06.850
J plus one that is 44.

35
00:02:06.850 --> 00:02:11.260
So if 99 is greater than 44 and the first loop.

36
00:02:12.400 --> 00:02:13.360
We'll say.

37
00:02:14.800 --> 00:02:15.430
Let's.

38
00:02:16.550 --> 00:02:17.660
Soft numbers.

39
00:02:19.440 --> 00:02:29.730
So we can simply do that by saying creating a temporary variable that holds array a j which the first

40
00:02:29.730 --> 00:02:31.470
pass will be 99.

41
00:02:32.670 --> 00:02:39.480
And give the first index of zero to array.

42
00:02:40.480 --> 00:02:46.420
J plus 44 or plus one, which is 44.

43
00:02:47.890 --> 00:02:50.650
And 99 now goes into the second index.

44
00:02:50.650 --> 00:02:58.990
So that means a ray j plus one is going to equal a ray J.

45
00:03:00.770 --> 00:03:05.570
You might need to pause the video to really understand this, but all we're doing is just swapping numbers.

46
00:03:05.570 --> 00:03:08.750
If the left hand side is bigger than the right hand side.

47
00:03:10.060 --> 00:03:11.890
And once that is done.

48
00:03:12.660 --> 00:03:20.040
We increment J to one so that we compare index of one and two, and then we compare index of two and

49
00:03:20.040 --> 00:03:20.490
three.

50
00:03:21.370 --> 00:03:24.400
Three and four, four and five until we bubble things up.

51
00:03:24.400 --> 00:03:26.530
And then we go to the top.

52
00:03:27.580 --> 00:03:30.700
And compared the items again in the outer for loop.

53
00:03:31.360 --> 00:03:32.680
Let's see if this works.

54
00:03:33.530 --> 00:03:35.050
Oh, and I just realized.

55
00:03:35.870 --> 00:03:37.760
This a ray J.

56
00:03:39.060 --> 00:03:40.980
Should be temp here.

57
00:03:41.970 --> 00:03:46.380
So remember 99, we placed it into a temporary variable.

58
00:03:47.420 --> 00:03:50.720
And assigning it to the index to the right.

59
00:03:51.470 --> 00:03:59.480
So if we run bubble sort now we'll say numbers and we'll console.log numbers to see if it's sorted.

60
00:04:01.500 --> 00:04:02.610
If I had run.

61
00:04:04.660 --> 00:04:07.650
Oh console.log numbers make sure I can spell.

62
00:04:07.660 --> 00:04:08.140
Let's hit.

63
00:04:08.140 --> 00:04:08.620
Run.

64
00:04:10.110 --> 00:04:10.920
And look at that.

65
00:04:11.280 --> 00:04:13.440
Our list is now sorted.

66
00:04:14.330 --> 00:04:16.670
That was bubble sort.

67
00:04:18.100 --> 00:04:21.610
And as you can hear, we have two nested four loops.

68
00:04:22.520 --> 00:04:30.590
Giving us all of WN squared, but we're not really holding variables to another data structure or holding

69
00:04:30.590 --> 00:04:32.930
the numbers into other data structures.

70
00:04:32.930 --> 00:04:36.440
So the space complexity is all of one.

71
00:04:37.840 --> 00:04:44.890
As we can see in our big cheat sheet, bubble sort is probably not the best algorithm, although it

72
00:04:44.890 --> 00:04:46.990
has good space complexity.

73
00:04:48.660 --> 00:04:53.190
You can use the code that I'll leave for you in this lesson to play around with.

74
00:04:54.040 --> 00:04:57.850
But for now, let's go on to our next sorting algorithm.

75
00:04:57.880 --> 00:04:58.900
Congratulations.

76
00:04:58.900 --> 00:05:03.310
You've just completed your first sorting algorithm, but we have more to go.

77
00:05:03.580 --> 00:05:05.740
So let's go to the next one.

