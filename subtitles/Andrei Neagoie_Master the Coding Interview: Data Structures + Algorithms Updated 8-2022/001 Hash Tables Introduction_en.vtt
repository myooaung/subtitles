WEBVTT
1
00:00:00.760 --> 00:00:03.550
It's time for our next data structure.

2
00:00:03.910 --> 00:00:05.020
Hash tables.

3
00:00:06.700 --> 00:00:09.920
Hash tables or hash maps?

4
00:00:09.940 --> 00:00:10.900
Maps.

5
00:00:10.900 --> 00:00:12.220
Unordered maps.

6
00:00:12.220 --> 00:00:14.560
Dictionaries, objects.

7
00:00:14.650 --> 00:00:18.100
There are many ways to call this data structure.

8
00:00:18.750 --> 00:00:25.500
And different languages have different names for it and slight variations on the hash tables.

9
00:00:25.770 --> 00:00:30.570
Objects, for example, in JavaScript, are a type of hash table.

10
00:00:31.830 --> 00:00:38.010
The reason I'm starting the course with the raise in objects or hash tables is because these two are

11
00:00:38.010 --> 00:00:40.690
the most common interview questions.

12
00:00:40.710 --> 00:00:44.640
You're going to use them in any coding question.

13
00:00:45.210 --> 00:00:50.580
Me personally, I have yet to be part of an interview that you didn't have to know these.

14
00:00:50.610 --> 00:00:53.340
They are an absolute must.

15
00:00:53.580 --> 00:00:57.900
Now, luckily for us, pretty much every language has a built in hash table.

16
00:00:58.350 --> 00:01:01.060
Just like a race in Python.

17
00:01:01.080 --> 00:01:02.730
They're called dictionaries.

18
00:01:03.120 --> 00:01:05.519
JavaScript, as we said, are objects.

19
00:01:05.940 --> 00:01:10.110
Java has maps and Ruby has hashes.

20
00:01:10.560 --> 00:01:14.130
And hash tables are very important all across computer science.

21
00:01:14.340 --> 00:01:20.850
You see them a lot in databases and caches, and they're extremely useful.

22
00:01:21.860 --> 00:01:22.970
So what are they?

23
00:01:23.360 --> 00:01:28.490
And also, you may be wondering, what does the name hash table mean?

24
00:01:28.520 --> 00:01:30.080
Where did this name come from?

25
00:01:31.260 --> 00:01:32.880
Well, let's look at an example.

26
00:01:33.540 --> 00:01:41.940
Imagine you're going grocery shopping and you have an object here basket and you want to add grapes

27
00:01:41.970 --> 00:01:45.180
as the property of the basket object.

28
00:01:45.330 --> 00:01:48.960
Again, we're using JavaScript syntax, but this should look familiar to you.

29
00:01:49.080 --> 00:01:51.990
So we want to set that basket.

30
00:01:52.320 --> 00:01:55.410
Grapes is going to equal 10,000.

31
00:01:55.440 --> 00:01:59.460
We're buying 10,000 grapes because you can never have too many grapes.

32
00:02:00.400 --> 00:02:06.460
Now, first off, thinking about how we would store this with a race, it would be a little bit more

33
00:02:06.460 --> 00:02:07.660
difficult, right?

34
00:02:08.259 --> 00:02:12.880
In Intrade, we have a index that's numbered and a value.

35
00:02:13.720 --> 00:02:20.590
With a hash table or an object, we get to set a key, which is grapes and a value.

36
00:02:20.590 --> 00:02:23.140
So we get to set a key value pair.

37
00:02:23.910 --> 00:02:26.400
So right away we see some benefits in here.

38
00:02:27.470 --> 00:02:34.190
Now a way a hash table works is we have the key, which is grapes.

39
00:02:35.300 --> 00:02:41.930
And this key is used as the index of where to find the value in memory.

40
00:02:42.740 --> 00:02:48.950
Remember with the raise we had the index, which was the number, but with hash tables, we use grapes

41
00:02:48.950 --> 00:02:52.640
as a way to find it in our memory shelf.

42
00:02:53.520 --> 00:02:57.660
This is done this way with something called a hash function.

43
00:02:57.660 --> 00:03:00.540
But for now, we'll just assume this is a black box.

44
00:03:00.540 --> 00:03:02.100
We don't know what's going on here.

45
00:03:02.910 --> 00:03:07.470
All that's going to happen is we're going to pass grapes into this black box.

46
00:03:07.950 --> 00:03:11.460
This black box is going to do some magic.

47
00:03:11.850 --> 00:03:19.800
And out of it comes a key into an index where we want to store this value.

48
00:03:20.450 --> 00:03:25.880
So now our 1000 grapes can be stored in this memory address.

49
00:03:25.970 --> 00:03:27.320
711.

50
00:03:28.350 --> 00:03:36.010
And technically it actually stores both grapes the key and the value of 10,000.

51
00:03:36.030 --> 00:03:40.110
Here, I've just simplified it to 10,000 just so it's a little bit cleaner.

52
00:03:40.410 --> 00:03:45.570
But keep in mind that it's going to store both key and value, and I'll show you a diagram showing this

53
00:03:45.570 --> 00:03:46.260
later on.

54
00:03:46.860 --> 00:03:57.210
So this black box over here gets to decide where to put the data on our memory in our computers.

55
00:03:57.990 --> 00:04:05.220
But you might be wondering, what is this thing and why does it get to decide where to put all this

56
00:04:05.220 --> 00:04:05.970
information?

57
00:04:06.240 --> 00:04:08.580
For that, I'll see you in the next video.

58
00:04:09.120 --> 00:04:09.720
Bye bye.

