WEBVTT
1
00:00:00.720 --> 00:00:01.620
Welcome back.

2
00:00:01.830 --> 00:00:04.620
Let's talk about the very first type of search.

3
00:00:04.740 --> 00:00:06.150
Linear search.

4
00:00:06.910 --> 00:00:15.520
In computer science, linear search or sequential search is a method of finding a target value within

5
00:00:15.520 --> 00:00:16.450
a list.

6
00:00:16.750 --> 00:00:21.970
And we should be familiar with this before because throughout the course we've looped through a race

7
00:00:21.970 --> 00:00:23.140
to find items.

8
00:00:23.590 --> 00:00:30.760
It sequentially checks each element of the list for the target value until a match is found or until

9
00:00:30.760 --> 00:00:32.650
all the elements have been searched.

10
00:00:33.310 --> 00:00:34.780
Let's take a look at a visual.

11
00:00:35.990 --> 00:00:38.500
Linear search is simply this.

12
00:00:38.510 --> 00:00:43.970
We have items that can be nodes that can be numbers that can be anything.

13
00:00:44.670 --> 00:00:48.810
And we go one by one looking through the list.

14
00:00:49.450 --> 00:00:52.410
We checked the first item, then the second item.

15
00:00:52.420 --> 00:00:53.290
The third.

16
00:00:53.290 --> 00:00:54.190
The fourth.

17
00:00:54.190 --> 00:00:56.230
The fifth and the sixth.

18
00:00:56.890 --> 00:01:05.110
In the best case scenario, we find what we're looking for in of one time because it's at the very beginning

19
00:01:05.110 --> 00:01:08.050
of the list, such as if we're looking for six over here.

20
00:01:08.740 --> 00:01:14.500
However, in worst case, we have to go through the entire list if we're looking for nine and check

21
00:01:14.500 --> 00:01:19.300
every single note or if we're looking for something that doesn't exist, we still have to check through

22
00:01:19.300 --> 00:01:20.410
every single item.

23
00:01:20.860 --> 00:01:23.680
And this type of sorting is very familiar to us.

24
00:01:24.710 --> 00:01:26.990
For example, if we take a look at JavaScript.

25
00:01:27.970 --> 00:01:30.580
I have a list over here of beasts.

26
00:01:31.090 --> 00:01:33.100
And let's say we're looking for a Godzilla.

27
00:01:33.370 --> 00:01:39.320
There's many ways that I could search for this item, Godzilla in this list.

28
00:01:39.340 --> 00:01:47.170
One way of doing it in JavaScript is using index, of which gives me the index where I can find Godzilla.

29
00:01:47.440 --> 00:01:51.490
And this uses linear search to try and find the item.

30
00:01:52.180 --> 00:02:02.140
Another way is to use find index that takes a function with a condition that the item must equal Godzilla

31
00:02:02.260 --> 00:02:04.720
and it's going to return true when it finds something.

32
00:02:05.200 --> 00:02:08.139
Again, if I run this, I get one.

33
00:02:08.840 --> 00:02:16.570
Another way is to use the find function, giving it the same function as we did above.

34
00:02:16.580 --> 00:02:21.140
But this time it's going to return the actual item instead of the index.

35
00:02:21.350 --> 00:02:22.070
Godzilla.

36
00:02:22.900 --> 00:02:26.530
And then also finally, we also have this way of searching.

37
00:02:27.040 --> 00:02:28.300
That includes.

38
00:02:29.130 --> 00:02:34.080
Method that simply says, Does beasts include Godzilla?

39
00:02:34.320 --> 00:02:36.500
And it's going to give me true or false.

40
00:02:36.510 --> 00:02:38.220
In this case, it's true.

41
00:02:38.860 --> 00:02:43.210
And your language will have different ways to implement this type of search.

42
00:02:43.890 --> 00:02:47.660
But all of these searches are linear searches.

43
00:02:47.670 --> 00:02:49.340
That is worst case.

44
00:02:49.350 --> 00:02:51.470
We're going through the entire list.

45
00:02:51.480 --> 00:02:57.840
And as you know, our inputs or our lists can get really, really large and linear time.

46
00:02:57.840 --> 00:03:01.500
O n is oc, but it's not the fastest.

47
00:03:01.500 --> 00:03:09.750
We can't use linear search to index websites like Google or search for friends like in Facebook because

48
00:03:09.750 --> 00:03:11.790
it's going to cost us a lot of time.

49
00:03:14.230 --> 00:03:16.270
Is there a better way?

50
00:03:17.330 --> 00:03:23.540
Well, what if the list of our data here was perhaps sorted?

51
00:03:24.510 --> 00:03:26.760
Would that help us in any way?

52
00:03:26.790 --> 00:03:28.800
Would we be able to improve?

53
00:03:28.830 --> 00:03:33.870
Let's say we're looking for nine now and we knew that the list was sorted.

54
00:03:34.200 --> 00:03:36.720
Let's answer that question in the next video.

