WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.260
before we get into the asserts,

00:00:04.260 --> 00:00:07.400
let's just run it and put a break point here and make sure that I actually get some users

00:00:07.400 --> 00:00:09.230
back just testing this method.

00:00:09.230 --> 00:00:10.390
It could test all the methods,

00:00:10.390 --> 00:00:13.730
but I just want to test this method rather run this method.

00:00:13.730 --> 00:00:14.310
Sorry,

00:00:14.310 --> 00:00:14.860
I'll try again.

00:00:14.860 --> 00:00:16.300
Rather deep of this method.

00:00:16.300 --> 00:00:17.090
So right,

00:00:17.090 --> 00:00:18.550
click de book.

00:00:18.550 --> 00:00:22.950
And then when we get Snow break point there at this point,

00:00:22.950 --> 00:00:24.690
we should see that.

00:00:24.690 --> 00:00:24.840
Yes,

00:00:24.840 --> 00:00:25.200
indeed.

00:00:25.200 --> 00:00:26.430
We've got the user look up service.

00:00:26.430 --> 00:00:27.700
We could use a repository,

00:00:27.700 --> 00:00:28.450
which is a mock.

00:00:28.450 --> 00:00:30.700
And here we have the user list,

00:00:30.700 --> 00:00:35.580
which is the full set of uses which was returned back from the book.

00:00:35.580 --> 00:00:39.440
So that's our A list of users we had We could see.

00:00:39.440 --> 00:00:40.050
Here we go.

00:00:40.050 --> 00:00:41.840
And Donald,

00:00:41.840 --> 00:00:44.850
which both regular users and then we've got bebop.

00:00:44.850 --> 00:00:46.350
He was an admin user.

00:00:46.350 --> 00:00:47.980
Yeah.

00:00:47.980 --> 00:00:49.680
Then we have the actual uses themselves,

00:00:49.680 --> 00:00:53.100
which have been filtered through as they've been returned from the production method we

00:00:53.100 --> 00:00:53.770
actually invoked.

00:00:53.770 --> 00:00:54.810
Which is this method here?

00:00:54.810 --> 00:00:58.630
This user local service get regular uses so we can have a look in here.

00:00:58.630 --> 00:00:59.520
We can have a sneak peek.

00:00:59.520 --> 00:01:01.820
It's what I normally do when I'm writing test is well,

00:01:01.820 --> 00:01:02.480
it could be nice.

00:01:02.480 --> 00:01:05.270
Now we conceive a regular user regular user.

00:01:05.270 --> 00:01:07.950
They're both what we expect so to me.

00:01:07.950 --> 00:01:09.450
But at first glance,

00:01:09.450 --> 00:01:10.650
just in debug mode,

00:01:10.650 --> 00:01:16.810
we've got enough data here to test the production code that we're invoking the method we're

00:01:16.810 --> 00:01:17.370
testing.

00:01:17.370 --> 00:01:20.670
We've tested the method and as a curious developer,

00:01:20.670 --> 00:01:21.750
um,

00:01:21.750 --> 00:01:27.280
I've said a break point and I can see here that I'm getting back the data that I think I

00:01:27.280 --> 00:01:27.880
should get back.

00:01:27.880 --> 00:01:32.540
So at this point now is a developer got kind of confidence that the FBI seems to work,

00:01:32.540 --> 00:01:34.590
at least for a happy path the way it's supposed to.

00:01:34.590 --> 00:01:35.680
That's kind of nice.

00:01:35.680 --> 00:01:36.780
It's always nice to do that,

00:01:36.780 --> 00:01:37.220
to be honest,

00:01:37.220 --> 00:01:37.700
because,

00:01:37.700 --> 00:01:38.230
you know,

00:01:38.230 --> 00:01:40.850
rather than like churning out a ton of assertions or whatever,

00:01:40.850 --> 00:01:43.150
it might be all right Now all of you notice First of all,

00:01:43.150 --> 00:01:43.540
you know,

00:01:43.540 --> 00:01:44.600
give yourself that reward,

00:01:44.600 --> 00:01:44.880
right?

00:01:44.880 --> 00:01:45.850
Be a production code.

00:01:45.850 --> 00:01:49.560
Might a little bit of Tesco to invoke eight check you getting back what you expect,

00:01:49.560 --> 00:01:53.400
and it gives you that little bit of a bit of a buzz Teoh to move on because you're you're a

00:01:53.400 --> 00:01:54.990
little bit happier that you can enclose it.

00:01:54.990 --> 00:01:55.850
Urine solution.

00:01:55.850 --> 00:01:56.950
What's your end goal?

00:01:56.950 --> 00:02:00.770
Rather See if he happened to be in writing tests at the same time you're developing your

00:02:00.770 --> 00:02:01.550
production code.

00:02:01.550 --> 00:02:03.560
I don't always give yourself a little boost.

00:02:03.560 --> 00:02:04.850
Just keep you motivated.

