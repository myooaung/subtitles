WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.780
in this video.

00:00:02.780 --> 00:00:05.930
We're going to use Mosquito to test the logging controller.

00:00:05.930 --> 00:00:07.060
In the previous videos,

00:00:07.060 --> 00:00:09.370
we coded up this nice lady architecture.

00:00:09.370 --> 00:00:10.870
Now we've got that done.

00:00:10.870 --> 00:00:11.960
Let's create a test.

00:00:11.960 --> 00:00:14.520
So I suppose I wanted to test this logging controller.

00:00:14.520 --> 00:00:15.230
OK,

00:00:15.230 --> 00:00:19.950
so when I tested logging controller So we're after testing this service method here,

00:00:19.950 --> 00:00:22.550
So let's start by testing that.

00:00:22.550 --> 00:00:24.790
See if we create a new job class.

00:00:24.790 --> 00:00:26.100
You won't do that.

00:00:26.100 --> 00:00:29.200
Just you shift command t what you've seen before.

00:00:29.200 --> 00:00:36.640
Sahagun's along Controller Shift command t create new test and we're just gonna have this

00:00:36.640 --> 00:00:38.450
service effort here.

00:00:38.450 --> 00:00:42.550
And let's put a set of methadone as well.

00:00:42.550 --> 00:00:46.200
It's not gonna test this service.

00:00:46.200 --> 00:00:49.920
Mother lectures put prefix that we've test test service.

00:00:49.920 --> 00:00:52.500
So in order to test,

00:00:52.500 --> 00:00:54.390
if we go back to the test class,

00:00:54.390 --> 00:00:55.450
would shift command T.

00:00:55.450 --> 00:00:57.800
In order to test this logging controller,

00:00:57.800 --> 00:01:03.510
we need to win number one crane Instance of it a number to make sure that my instance also

00:01:03.510 --> 00:01:05.210
has an authentication service as well.

00:01:05.210 --> 00:01:06.720
So this authentication service,

00:01:06.720 --> 00:01:07.450
which is here,

00:01:07.450 --> 00:01:09.950
we're not going to set the real authentication service.

00:01:09.950 --> 00:01:10.650
Instead,

00:01:10.650 --> 00:01:12.790
we're going to set a mock authentication service.

00:01:12.790 --> 00:01:13.840
So therefore,

00:01:13.840 --> 00:01:15.050
going back to our test,

00:01:15.050 --> 00:01:23.150
you wanna have to fields the controller itself,

00:01:23.150 --> 00:01:25.400
which is the system on the test.

00:01:25.400 --> 00:01:26.950
That's the thing we're actually testing.

00:01:26.950 --> 00:01:35.010
And we also want to have the authentication service.

00:01:35.010 --> 00:01:36.850
Just call it service now,

00:01:36.850 --> 00:01:39.650
and this is will be a mark.

00:01:39.650 --> 00:01:43.110
So we're gonna set these up in the set of method.

00:01:43.110 --> 00:01:48.920
So they stopped Controller equals new looking controller.

00:01:48.920 --> 00:02:01.250
This thought service mosquito don't look authentication service.

00:02:01.250 --> 00:02:02.580
That's great.

00:02:02.580 --> 00:02:08.510
That means that every time we had a test method to this class by using the test annotation

00:02:08.510 --> 00:02:09.060
on the method,

00:02:09.060 --> 00:02:14.640
we're gonna get a new brand new logging controller on a brand new Mach two signs of the

00:02:14.640 --> 00:02:15.350
Logan controller,

00:02:15.350 --> 00:02:18.550
which we can set up and code so acting the women want.

00:02:18.550 --> 00:02:20.450
So we're going to do this assignment.

00:02:20.450 --> 00:02:21.070
So let's do that now.

00:02:21.070 --> 00:02:21.710
So to do this,

00:02:21.710 --> 00:02:22.990
that's going to long controller.

00:02:22.990 --> 00:02:26.100
And let's add a constructor,

00:02:26.100 --> 00:02:29.190
which takes the authentication service.

00:02:29.190 --> 00:02:33.660
It's a public looking controller authentication service.

00:02:33.660 --> 00:02:42.680
Then we can do this dot authentication service equals authentication service.

00:02:42.680 --> 00:02:50.760
So now we should be able to just create the mark before the controller.

00:02:50.760 --> 00:02:54.060
Now,

00:02:54.060 --> 00:02:54.480
this is good.

00:02:54.480 --> 00:02:58.550
It means along controller has been set up with a mock authentication service.

00:02:58.550 --> 00:02:59.540
Now,

00:02:59.540 --> 00:03:00.210
you might be thinking,

00:03:00.210 --> 00:03:00.410
Well,

00:03:00.410 --> 00:03:04.050
we could just just as easily take this here.

00:03:04.050 --> 00:03:07.170
Delete that and just,

00:03:07.170 --> 00:03:07.730
you know,

00:03:07.730 --> 00:03:10.890
pass it into the constructor on Forget about this.

00:03:10.890 --> 00:03:11.910
Well,

00:03:11.910 --> 00:03:12.070
yeah,

00:03:12.070 --> 00:03:12.680
but if we did that,

00:03:12.680 --> 00:03:13.180
of course,

00:03:13.180 --> 00:03:17.060
we wouldn't then be able to access the mark to be able to set it up tight.

00:03:17.060 --> 00:03:20.150
So we wanted to act inside each individual test method.

00:03:20.150 --> 00:03:23.790
So that's why we need it in a separate member reference on the controller.

00:03:23.790 --> 00:03:30.360
Let's put that back and then we're ready to go just to prove this.

00:03:30.360 --> 00:03:35.920
If I said a break point here and then if I but the debug test service,

00:03:35.920 --> 00:03:40.790
I expect that I've got that test fixture set up correctly before that quickly.

00:03:40.790 --> 00:03:42.700
Just said it to Jenny Kate.

00:03:42.700 --> 00:03:43.250
Seven.

00:03:43.250 --> 00:03:57.510
Good to hear preferences Travel compiler target by conversion.

00:03:57.510 --> 00:04:00.190
I just change this to seven.

00:04:00.190 --> 00:04:04.900
And re broom weed control are so greedy.

00:04:04.900 --> 00:04:09.260
But we've controlled the then we had the break point.

00:04:09.260 --> 00:04:10.420
So we're looking now.

00:04:10.420 --> 00:04:16.670
This is the instance of our longing control test inside here we expect to see the logging

00:04:16.670 --> 00:04:17.650
controller itself,

00:04:17.650 --> 00:04:19.680
plus the service,

00:04:19.680 --> 00:04:22.150
which is set on that controller.

00:04:22.150 --> 00:04:24.250
Just that we'll check that with long controller.

00:04:24.250 --> 00:04:24.650
Here.

00:04:24.650 --> 00:04:26.730
You can see we've got the service also,

00:04:26.730 --> 00:04:30.060
which is a mock on inside the controller,

00:04:30.060 --> 00:04:32.360
we expect with that market assigned and you can see here,

00:04:32.360 --> 00:04:34.620
it's assigned to the authentication service.

00:04:34.620 --> 00:04:35.860
That's good.

00:04:35.860 --> 00:04:37.060
So it's stopping that.

00:04:37.060 --> 00:04:38.750
Give her to that.

00:04:38.750 --> 00:04:40.290
Remember,

00:04:40.290 --> 00:04:48.450
we have arrange fact and a set up sooner arrange.

00:04:48.450 --> 00:04:52.150
This is where we have an opportunity to set about Mark.

00:04:52.150 --> 00:04:54.010
You said it because we wanted to act.

00:04:54.010 --> 00:04:54.520
So,

00:04:54.520 --> 00:04:55.110
for example,

00:04:55.110 --> 00:05:06.000
I can do this dot service like a new mosquito when this is a static method on mosquito

00:05:06.000 --> 00:05:08.770
which enables us to plug in behavior to this mark.

00:05:08.770 --> 00:05:12.750
So we just do it on demand static import for that.

00:05:12.750 --> 00:05:17.080
That should be the whole mosquito Libra,

00:05:17.080 --> 00:05:17.740
which we want.

00:05:17.740 --> 00:05:21.150
So if we just do mosquito star,

00:05:21.150 --> 00:05:24.600
then we should have access to all of these methods.

00:05:24.600 --> 00:05:24.790
Here,

00:05:24.790 --> 00:05:29.310
basically on the ones were really after are the mocha method,

00:05:29.310 --> 00:05:35.320
so you can take that away because it's a static important now the wind method under then

00:05:35.320 --> 00:05:35.750
method.

00:05:35.750 --> 00:05:37.760
So how,

00:05:37.760 --> 00:05:42.520
when and then works is basically we say when and then we pass in the mark and then invoke

00:05:42.520 --> 00:05:45.050
the actual method on the object.

00:05:45.050 --> 00:05:47.850
And we're just going to say any string.

00:05:47.850 --> 00:05:55.510
So whenever any string it's past for the use of them in any string is passed for the

00:05:55.510 --> 00:05:56.150
password,

00:05:56.150 --> 00:05:58.000
regardless of what's past,

00:05:58.000 --> 00:06:00.410
because now this isn't a data test.

00:06:00.410 --> 00:06:03.130
We're not testing a function as we've seen before.

00:06:03.130 --> 00:06:03.970
More testing.

00:06:03.970 --> 00:06:05.060
There was actual behaviour,

00:06:05.060 --> 00:06:06.050
which is a difference,

00:06:06.050 --> 00:06:08.950
say,

00:06:08.950 --> 00:06:09.880
then return.

00:06:09.880 --> 00:06:14.620
And it wants to return something of type Boolean.

00:06:14.620 --> 00:06:15.710
So we said Return True.

00:06:15.710 --> 00:06:17.190
So what we're doing here,

00:06:17.190 --> 00:06:21.340
basically is we're setting up the mock to act as if the authenticate method always returns

00:06:21.340 --> 00:06:21.620
true.

00:06:21.620 --> 00:06:24.810
Let's go back to authentication method in authentication service.

00:06:24.810 --> 00:06:26.050
This method here,

00:06:26.050 --> 00:06:30.000
usually delegates to the user repository,

00:06:30.000 --> 00:06:32.100
finds to use about the user name,

00:06:32.100 --> 00:06:34.050
get to use the object,

00:06:34.050 --> 00:06:37.320
then looks the password on the object and see if equals the password.

00:06:37.320 --> 00:06:42.450
That's what it usually does Over what we're doing with the mark is we're basically

00:06:42.450 --> 00:06:45.750
effectively commenting all out.

00:06:45.750 --> 00:06:51.670
I'm replacing with a custom implementation because of implementation effectively,

00:06:51.670 --> 00:06:53.600
he's returned true.

00:06:53.600 --> 00:06:56.360
I won't do that now.

00:06:56.360 --> 00:06:57.900
That was just for illustration purposes,

00:06:57.900 --> 00:06:59.260
but you get what I mean.

00:06:59.260 --> 00:07:04.460
Let's go back to the logging control.

00:07:04.460 --> 00:07:09.660
The test yet was saying whenever we call authenticate with any string,

00:07:09.660 --> 00:07:14.000
but used them any string for password that it's gonna return true on this sets us up in a

00:07:14.000 --> 00:07:15.040
happy path scenario.

00:07:15.040 --> 00:07:18.770
We're really testing happy path here where the use is going to be logged in.

00:07:18.770 --> 00:07:19.250
Okay,

00:07:19.250 --> 00:07:20.380
So what happens when the U.

00:07:20.380 --> 00:07:22.420
S is gonna be logged in from a production code?

00:07:22.420 --> 00:07:22.930
Point of view?

00:07:22.930 --> 00:07:23.200
Well,

00:07:23.200 --> 00:07:28.650
let's look back of the locking control on Look of the logic there if this method here.

00:07:28.650 --> 00:07:33.910
So if authentication service to authenticate passing in the user name password,

00:07:33.910 --> 00:07:41.620
if it does equal true my then we're gonna return the path to the harm page.

00:07:41.620 --> 00:07:41.980
Yeah,

00:07:41.980 --> 00:07:43.050
and if it's not true,

00:07:43.050 --> 00:07:45.120
we return the pact of logging page.

00:07:45.120 --> 00:07:48.510
But we're looking with the fact that it is true now because that's how we've set up our

00:07:48.510 --> 00:07:49.950
mock for this specific test.

00:07:49.950 --> 00:07:51.980
So when it is true,

00:07:51.980 --> 00:07:55.430
we expect that the user will be effectively sense of the homepage.

00:07:55.430 --> 00:07:56.010
Okay,

00:07:56.010 --> 00:07:57.490
So how do we communicate in the test,

00:07:57.490 --> 00:07:58.280
Jim?

00:07:58.280 --> 00:08:01.010
Back to the test shift command to you again?

00:08:01.010 --> 00:08:02.190
Not in control a test.

00:08:02.190 --> 00:08:04.070
We basically do the action.

00:08:04.070 --> 00:08:07.550
So this is where we're gonna call the controller.

00:08:07.550 --> 00:08:09.630
We can prefix that with this dot also,

00:08:09.630 --> 00:08:10.850
but we don't necessarily have to.

00:08:10.850 --> 00:08:12.650
In fact,

00:08:12.650 --> 00:08:13.490
I prefer not to.

00:08:13.490 --> 00:08:21.780
So we'll also taking out from here as well say the action now is controller don't in

00:08:21.780 --> 00:08:23.830
service and we can pass in any old thing.

00:08:23.830 --> 00:08:24.690
Now it doesn't really matter,

00:08:24.690 --> 00:08:30.210
Tom Password 123 But the key point here,

00:08:30.210 --> 00:08:30.570
of course,

00:08:30.570 --> 00:08:32.490
is that we get back the view,

00:08:32.490 --> 00:08:33.830
name or view path.

00:08:33.830 --> 00:08:34.750
It's going few path.

00:08:34.750 --> 00:08:37.590
So in this case,

00:08:37.590 --> 00:08:39.050
when we get the view path back,

00:08:39.050 --> 00:08:43.760
we expect now that it's equal to slash home so we could do the assert assert,

00:08:43.760 --> 00:08:50.060
Don't certainly no view path.

00:08:50.060 --> 00:08:51.850
We don't want to get back a Northview path.

00:08:51.850 --> 00:08:52.590
They will be wrong.

00:08:52.590 --> 00:08:53.730
Next,

00:08:53.730 --> 00:08:59.750
Assert don't equals expected an actual.

00:08:59.750 --> 00:09:01.550
So we expect,

00:09:01.550 --> 00:09:09.970
um on the actual is view path so that we run this.

00:09:09.970 --> 00:09:17.230
We can see that that test is passed on.

00:09:17.230 --> 00:09:19.780
We probably want to give it a more descriptive test them as well.

00:09:19.780 --> 00:09:20.630
For example,

00:09:20.630 --> 00:09:23.670
test service well,

00:09:23.670 --> 00:09:31.110
the Jews name and password logs in user,

00:09:31.110 --> 00:09:31.830
for example,

00:09:31.830 --> 00:09:32.700
because That's nice.

00:09:32.700 --> 00:09:33.480
It means we're better.

00:09:33.480 --> 00:09:34.640
Got a test method now,

00:09:34.640 --> 00:09:38.250
which is named descriptively to describe what the test is actually testing.

00:09:38.250 --> 00:09:39.360
So that's nice.

00:09:39.360 --> 00:09:43.980
We've now seen firsthand how we can use mosquito to test the locking controller jumping.

00:09:43.980 --> 00:09:44.990
Now I would do another one,

00:09:44.990 --> 00:09:47.450
and we'll explore how to test the authentication service.

