WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.690
So now in the assert block weakened.

00:00:03.690 --> 00:00:04.010
Oops.

00:00:04.010 --> 00:00:04.110
Um,

00:00:04.110 --> 00:00:04.740
assertions.

00:00:04.740 --> 00:00:06.890
So if we were testing this with Jean,

00:00:06.890 --> 00:00:07.970
its assertions FBI,

00:00:07.970 --> 00:00:14.200
our assertions would look like this the certain dot I don't know certain,

00:00:14.200 --> 00:00:18.430
not know on the collection has returned back to us.

00:00:18.430 --> 00:00:23.850
Shift command A making an on demand static import makes it nicer you'll see up here.

00:00:23.850 --> 00:00:29.050
But you also title that with control Option.

00:00:29.050 --> 00:00:32.500
Oh remembers imports,

00:00:32.500 --> 00:00:33.520
but we also see here.

00:00:33.520 --> 00:00:37.240
Then we got like the assert from the mosquito static method imports.

00:00:37.240 --> 00:00:40.270
If we put star here and start here,

00:00:40.270 --> 00:00:42.090
that is the trick we saw earlier on that.

00:00:42.090 --> 00:00:49.280
It means you've got access to all off the social methods in the old Gina Circus on

00:00:49.280 --> 00:00:49.860
disability.

00:00:49.860 --> 00:00:52.500
We've got access to all of the,

00:00:52.500 --> 00:00:56.330
um Marquita methods in the Monkey took last.

00:00:56.330 --> 00:00:57.270
That's a nice thing to do,

00:00:57.270 --> 00:00:59.430
so you know,

00:00:59.430 --> 00:01:01.150
we're so that they don't know which is fine.

00:01:01.150 --> 00:01:02.310
We can also assert,

00:01:02.310 --> 00:01:03.050
for example,

00:01:03.050 --> 00:01:08.550
that the number of user objects would get back in that list is equal to what we expect.

00:01:08.550 --> 00:01:11.410
So with the Jamie assertions,

00:01:11.410 --> 00:01:11.890
FBI,

00:01:11.890 --> 00:01:14.390
the expected value is the first parameter.

00:01:14.390 --> 00:01:18.200
But we're not including a descriptive message that is on the actual value is the second

00:01:18.200 --> 00:01:18.770
parameter.

00:01:18.770 --> 00:01:21.430
So it was expected comma actual.

00:01:21.430 --> 00:01:24.250
When we look at hand pressed essentially the opposite way around,

00:01:24.250 --> 00:01:26.020
its actual common expected,

00:01:26.020 --> 00:01:27.530
so we'll see that in a second.

00:01:27.530 --> 00:01:28.220
But for now,

00:01:28.220 --> 00:01:29.250
assert equals.

00:01:29.250 --> 00:01:33.200
Have this actual users list dot size,

00:01:33.200 --> 00:01:35.550
and we said that is equal to two.

00:01:35.550 --> 00:01:36.780
So if you run that,

00:01:36.780 --> 00:01:38.850
that should pass because it means we've got to,

00:01:38.850 --> 00:01:40.420
Fisher says.

00:01:40.420 --> 00:01:43.290
Do we have to users in a nominal collection on We do.

00:01:43.290 --> 00:01:43.780
That's fine.

00:01:43.780 --> 00:01:45.170
However,

00:01:45.170 --> 00:01:49.620
that's not good enough because we're not saying anything about the type of users on this is

00:01:49.620 --> 00:01:51.280
testing the regular users method.

00:01:51.280 --> 00:01:52.950
And when we going here,

00:01:52.950 --> 00:01:57.650
we see that it's gonna attempt to filter on this regular user user type.

00:01:57.650 --> 00:01:59.860
So let's build that in a swell.

00:01:59.860 --> 00:02:00.590
So at this point,

00:02:00.590 --> 00:02:01.750
it can kind of get clunky.

00:02:01.750 --> 00:02:07.480
Were the Jane assertions AP I because either I could do things in a loop to say for all the

00:02:07.480 --> 00:02:15.150
on actual uses in the collection,

00:02:15.150 --> 00:02:22.990
so not know of the actual user to make sure we've at least got something in there in that

00:02:22.990 --> 00:02:23.550
object,

00:02:23.550 --> 00:02:27.800
and that I could do a certain equals actual user.

00:02:27.800 --> 00:02:35.520
Don't use the toilet is a regular user at least in this way of extending the assertions

00:02:35.520 --> 00:02:37.880
towards Also make sure that these users are regular users,

00:02:37.880 --> 00:02:38.580
so yeah.

00:02:38.580 --> 00:02:38.810
Okay,

00:02:38.810 --> 00:02:39.850
that's kind of okay.

00:02:39.850 --> 00:02:40.180
Again,

00:02:40.180 --> 00:02:41.150
I could run that.

00:02:41.150 --> 00:02:44.690
That's kind of fine.

00:02:44.690 --> 00:02:47.580
But I'm not chicken that the user names that I get back are actually what I expect.

00:02:47.580 --> 00:02:48.260
What happens?

00:02:48.260 --> 00:02:48.700
For example,

00:02:48.700 --> 00:02:50.090
if there's some random,

00:02:50.090 --> 00:02:55.210
strange logic bug where you know the user name is always bebop instead of Allan Donald back

00:02:55.210 --> 00:02:55.210
,

00:02:55.210 --> 00:02:58.760
anything that really depends how far you want to go With each test,

00:02:58.760 --> 00:03:02.810
you might have other tests which check that assignment of the using them.

00:03:02.810 --> 00:03:02.980
Well,

00:03:02.980 --> 00:03:04.670
you might want to cut in here if you couldn't hear.

00:03:04.670 --> 00:03:04.960
Of course,

00:03:04.960 --> 00:03:05.920
you can't use a for loop,

00:03:05.920 --> 00:03:07.960
then unless you're gonna start getting into messy,

00:03:07.960 --> 00:03:08.290
You know,

00:03:08.290 --> 00:03:10.150
if it's the actual user index,

00:03:10.150 --> 00:03:11.990
what in the zero Check this.

00:03:11.990 --> 00:03:13.680
If it's actually used in next one,

00:03:13.680 --> 00:03:14.230
check that,

00:03:14.230 --> 00:03:15.300
not ideal service.

00:03:15.300 --> 00:03:16.650
If we take this out,

00:03:16.650 --> 00:03:19.050
this four method Foley brother,

00:03:19.050 --> 00:03:21.020
I mean,

00:03:21.020 --> 00:03:22.010
give a bit of space.

00:03:22.010 --> 00:03:31.450
We could basically say use the one equals use the least,

00:03:31.450 --> 00:03:34.280
don't get zero.

00:03:34.280 --> 00:03:40.190
That you could actually use the one probably better.

00:03:40.190 --> 00:03:46.650
Sounds better actually use the one a certain no love actually using one.

00:03:46.650 --> 00:03:50.460
The search will use the one get used.

00:03:50.460 --> 00:03:51.660
A type is a regular user.

00:03:51.660 --> 00:04:06.240
Get using them is on get password B C.

00:04:06.240 --> 00:04:09.010
123 all.

00:04:09.010 --> 00:04:13.890
I could think that you pick it this block as well to get a second user.

00:04:13.890 --> 00:04:20.480
No,

00:04:20.480 --> 00:04:22.850
it's not on Now.

00:04:22.850 --> 00:04:24.780
It's Donald D B.

00:04:24.780 --> 00:04:25.190
C,

00:04:25.190 --> 00:04:26.850
which is surprisingly difficult to type.

00:04:26.850 --> 00:04:45.330
321 that probably put comment here as well to say Good on the general collections check.

00:04:45.330 --> 00:04:48.790
He was the one check used to Maybe,

00:04:48.790 --> 00:04:49.250
maybe not.

00:04:49.250 --> 00:04:50.040
Is that useful?

00:04:50.040 --> 00:04:50.490
Possibly?

00:04:50.490 --> 00:04:50.850
Possibly?

00:04:50.850 --> 00:04:51.200
No.

00:04:51.200 --> 00:04:56.380
I think it leads to give you a visual break when you have these comments and that these

00:04:56.380 --> 00:04:57.650
lines are related to each other.

00:04:57.650 --> 00:04:58.780
Um,

00:04:58.780 --> 00:05:00.910
it is debatable whether it's that useful or not,

00:05:00.910 --> 00:05:02.790
But that's kind of want to do.

00:05:02.790 --> 00:05:03.210
I guess,

00:05:03.210 --> 00:05:04.930
on that I could rerun this test now,

00:05:04.930 --> 00:05:07.550
so my click run get regular uses.

00:05:07.550 --> 00:05:11.060
That's pretty good for this positive of the happy path.

00:05:11.060 --> 00:05:13.750
Forget regular users is tested pretty well,

00:05:13.750 --> 00:05:17.520
and it's a good first step into testing this particular class

