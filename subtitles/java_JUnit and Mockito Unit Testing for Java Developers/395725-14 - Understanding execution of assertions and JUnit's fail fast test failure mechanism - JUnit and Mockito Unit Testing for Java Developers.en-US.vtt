WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.630
in this video,

00:00:02.630 --> 00:00:04.950
we're going to explore the execution of assertions.

00:00:04.950 --> 00:00:09.070
So looking back to the previous card and thinking about the execution of unit tests when

00:00:09.070 --> 00:00:13.770
we're in the assert block and we have multiple assertions,

00:00:13.770 --> 00:00:24.330
let's just put some assertions in now these assertions of meaningless I have no real

00:00:24.330 --> 00:00:24.930
context.

00:00:24.930 --> 00:00:29.960
But I just want to demonstrate the floor of assertion testing NJ and it very briefly see

00:00:29.960 --> 00:00:30.320
assert.

00:00:30.320 --> 00:00:30.850
True,

00:00:30.850 --> 00:00:45.550
10 equals 10 by the way.

00:00:45.550 --> 00:00:50.950
Another tip as well is that if you do shift command in a have you type static,

00:00:50.950 --> 00:00:54.050
you can add an on demand static import for all Junior cert,

00:00:54.050 --> 00:00:57.890
which basically means then you can write them as methods which have bean statically

00:00:57.890 --> 00:01:01.450
imported off of the assert class just means you don't have to keep prefix in them with a

00:01:01.450 --> 00:01:02.570
certain dot assert.

00:01:02.570 --> 00:01:04.800
Sadat makes it a bit more readable,

00:01:04.800 --> 00:01:06.700
but if I step through this card,

00:01:06.700 --> 00:01:07.040
that was good.

00:01:07.040 --> 00:01:08.150
Put a break point here.

00:01:08.150 --> 00:01:12.480
I'm going to right click this test method on Just do debug just weaken,

00:01:12.480 --> 00:01:13.150
step through.

00:01:13.150 --> 00:01:15.790
So when I stepped through these assertions,

00:01:15.790 --> 00:01:22.780
then you can see that freed assertion like a lover as long as the condition is true,

00:01:22.780 --> 00:01:25.200
then it falls through an excuse the next line,

00:01:25.200 --> 00:01:29.340
which also happens to be another assertion in this case here because all of these

00:01:29.340 --> 00:01:30.240
assertions are true.

00:01:30.240 --> 00:01:31.780
The overall test itself.

00:01:31.780 --> 00:01:33.980
We got console pass.

00:01:33.980 --> 00:01:34.720
It's you can see here.

00:01:34.720 --> 00:01:35.490
We've got the green,

00:01:35.490 --> 00:01:36.720
the green tick again,

00:01:36.720 --> 00:01:37.850
However,

00:01:37.850 --> 00:01:40.750
if one of these assertions is not true,

00:01:40.750 --> 00:01:42.340
so,

00:01:42.340 --> 00:01:42.800
for example,

00:01:42.800 --> 00:01:43.150
here,

00:01:43.150 --> 00:01:44.450
let's see,

00:01:44.450 --> 00:01:46.160
this one isn't true.

00:01:46.160 --> 00:01:49.940
10 is not equal to 11 again if I debug,

00:01:49.940 --> 00:01:54.420
so I step over the first assertion.

00:01:54.420 --> 00:01:55.890
That's fine now,

00:01:55.890 --> 00:02:00.050
when June it comes to run this line here because this isn't true,

00:02:00.050 --> 00:02:02.850
you'll find that immediately.

00:02:02.850 --> 00:02:04.000
If I play that to the end,

00:02:04.000 --> 00:02:07.520
the test failed there.

00:02:07.520 --> 00:02:10.940
So now if I click into this stack trace,

00:02:10.940 --> 00:02:13.970
you can see here we go exactly to test that job alone 18.

00:02:13.970 --> 00:02:17.970
It takes me to the exact assertion that caused the test to fail.

00:02:17.970 --> 00:02:19.070
That's nice,

00:02:19.070 --> 00:02:22.010
because I now know that there's something wrong with either.

00:02:22.010 --> 00:02:25.300
The logic of this assertion are probably more accurately.

00:02:25.300 --> 00:02:27.580
There's something that's changed in the production code,

00:02:27.580 --> 00:02:29.180
which has now caused this assertion,

00:02:29.180 --> 00:02:31.670
which when we originally create the tests,

00:02:31.670 --> 00:02:35.840
we carefully crafted these assertions to be well thought out and actually test the logic of

00:02:35.840 --> 00:02:38.520
what we're what we're testing for whatever reason.

00:02:38.520 --> 00:02:40.280
Now this is ocean is now failing,

00:02:40.280 --> 00:02:40.980
and so therefore,

00:02:40.980 --> 00:02:43.590
this enables us to investigate the production code.

00:02:43.590 --> 00:02:44.310
Of course,

00:02:44.310 --> 00:02:44.980
at that stage,

00:02:44.980 --> 00:02:48.850
thes wouldn't be actual literal zit wouldn't be like a literal 10 Electoral 11.

00:02:48.850 --> 00:02:50.720
This will probably be more likely to be,

00:02:50.720 --> 00:02:51.210
for example,

00:02:51.210 --> 00:02:51.870
Data members,

00:02:51.870 --> 00:02:55.230
which come back off of the class that I've been testing,

00:02:55.230 --> 00:02:57.190
and so that would give us some indication,

00:02:57.190 --> 00:02:57.910
appoints or,

00:02:57.910 --> 00:02:58.450
if you like,

00:02:58.450 --> 00:03:02.750
back into the test code to be able to hunt down exactly where this book came from.

00:03:02.750 --> 00:03:04.390
That's getting a little bit of topic,

00:03:04.390 --> 00:03:06.790
but it's useful to just think about things in that kind of way.

00:03:06.790 --> 00:03:09.180
The men point I want to get across here,

00:03:09.180 --> 00:03:09.400
though,

00:03:09.400 --> 00:03:11.580
is that Jay and it has a fail fast mechanism.

00:03:11.580 --> 00:03:14.280
So as soon as it hits an assertion which fails,

00:03:14.280 --> 00:03:15.240
which isn't true,

00:03:15.240 --> 00:03:16.790
then it fails the whole test.

00:03:16.790 --> 00:03:20.830
But at least you get a point of back to the assertion that didn't pass.

00:03:20.830 --> 00:03:23.560
So then you can start your investigation as to what went wrong.

00:03:23.560 --> 00:03:24.620
Okay,

00:03:24.620 --> 00:03:27.850
so those are assertions and that we've seen those let's move onto the next thing

