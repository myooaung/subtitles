WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.750
So now we've come quite a long way in our test journey.

00:00:02.750 --> 00:00:05.120
Recovered core concepts of unit testing.

00:00:05.120 --> 00:00:07.230
Those foundations we saw in the first section.

00:00:07.230 --> 00:00:09.230
We also created a project to work with,

00:00:09.230 --> 00:00:11.420
which could use unit on Learned All About Julian.

00:00:11.420 --> 00:00:12.750
It's a appear an operation,

00:00:12.750 --> 00:00:15.270
so let's take it to the next level now an explosive,

00:00:15.270 --> 00:00:18.820
more advanced concepts First up against Look at Ham Crest.

00:00:18.820 --> 00:00:21.910
This is a powerful assertions library that comes shipped with Joe Unit.

00:00:21.910 --> 00:00:25.850
It allows you to write very easy to read assertions to step your assertions up to second

00:00:25.850 --> 00:00:26.170
gear.

00:00:26.170 --> 00:00:30.490
We're also going to introduce it to mock objects thing and take a look at mosquito,

00:00:30.490 --> 00:00:32.360
the most popular framework on the job of seen.

00:00:32.360 --> 00:00:32.850
Currently.

00:00:32.850 --> 00:00:34.120
Up to now,

00:00:34.120 --> 00:00:35.650
we've just seen basic tests,

00:00:35.650 --> 00:00:37.250
which will test things in a functional way.

00:00:37.250 --> 00:00:39.420
So here's a method or test object.

00:00:39.420 --> 00:00:42.750
Give it some input parameters of fields invoca test method,

00:00:42.750 --> 00:00:44.220
and then check the results.

00:00:44.220 --> 00:00:44.910
Now,

00:00:44.910 --> 00:00:46.860
if you have objects which interact with each other,

00:00:46.860 --> 00:00:47.160
though,

00:00:47.160 --> 00:00:47.470
so,

00:00:47.470 --> 00:00:48.010
for example,

00:00:48.010 --> 00:00:49.600
objects a cause out to object,

00:00:49.600 --> 00:00:52.800
be then you're going to want a controlled way of testing this on.

00:00:52.800 --> 00:00:57.580
This is what Mark objects of all about that's going to be fun finally will touch upon code

00:00:57.580 --> 00:01:01.730
coverage to It's an important benchmark the Dev teams like to use as a measure of code

00:01:01.730 --> 00:01:02.220
quality,

00:01:02.220 --> 00:01:05.830
so it's useful to have a run through of that and see it in action so you can pass those

00:01:05.830 --> 00:01:07.890
quality gets at the end of your development pieces.

00:01:07.890 --> 00:01:11.800
So let's jump in now and dig into the more advanced side of the unit testing.

