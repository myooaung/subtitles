WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.500
So in this video we're going to see how we can replace the equal two matches which we had

00:00:05.500 --> 00:00:06.030
before.

00:00:06.030 --> 00:00:10.240
And we're gonna replace them by demonstrating how we can compose matches together using the

00:00:10.240 --> 00:00:11.240
all off matches from him.

00:00:11.240 --> 00:00:11.680
Crist.

00:00:11.680 --> 00:00:14.200
And also we're gonna take a look at property matches as well,

00:00:14.200 --> 00:00:18.350
which will allow us to remove the court of that factor method to create the user objects.

00:00:18.350 --> 00:00:19.570
So let's jump in.

00:00:19.570 --> 00:00:22.460
So let's replace this one here.

00:00:22.460 --> 00:00:23.580
First of all,

00:00:23.580 --> 00:00:25.150
let's write this in a different way.

00:00:25.150 --> 00:00:30.430
So the essence of this assertion is basically that we've got a user objects whose user name

00:00:30.430 --> 00:00:32.620
is an it was password is a B C.

00:00:32.620 --> 00:00:37.870
123 Some of the words there are two properties here are using in property in a password

00:00:37.870 --> 00:00:38.450
property,

00:00:38.450 --> 00:00:40.680
assuming user sticks to Java,

00:00:40.680 --> 00:00:42.990
bean naming conventions like a poacher where you have,

00:00:42.990 --> 00:00:46.020
like a get using them property and get password property,

00:00:46.020 --> 00:00:46.760
which it does.

00:00:46.760 --> 00:00:50.370
If we just quickly pop into here Now we can see in side user.

00:00:50.370 --> 00:00:52.640
We've got private string use name,

00:00:52.640 --> 00:00:53.150
private string,

00:00:53.150 --> 00:00:55.390
password and then we've got corresponding.

00:00:55.390 --> 00:00:56.280
Get it's for this.

00:00:56.280 --> 00:00:59.190
So I gotta get used them on to get past would here,

00:00:59.190 --> 00:01:01.910
So that's good.

00:01:01.910 --> 00:01:03.100
So because of this,

00:01:03.100 --> 00:01:12.950
we can change this t was a composing Macha called all of.

00:01:12.950 --> 00:01:16.300
And if we see the signature for this,

00:01:16.300 --> 00:01:21.070
this is a matchup which takes a set of different matches on the semantics of this other.

00:01:21.070 --> 00:01:24.430
Each match er that you supply to all of needs to evaluate to,

00:01:24.430 --> 00:01:24.850
True,

00:01:24.850 --> 00:01:26.080
for the all of matter,

00:01:26.080 --> 00:01:29.530
to evaluate the truth so we'll see what this means in a second.

00:01:29.530 --> 00:01:31.980
It'll become clearer as we cut the example.

00:01:31.980 --> 00:01:36.950
Booking your matches has property.

00:01:36.950 --> 00:01:41.520
It's to using them property.

00:01:41.520 --> 00:01:46.680
We're gonna look up Andi when a person a matchup which is going to be equal to.

00:01:46.680 --> 00:01:52.720
And that's to the import.

00:01:52.720 --> 00:01:59.180
Starting import for that and the other thing through the property we need to test is the

00:01:59.180 --> 00:02:00.050
password property.

00:02:00.050 --> 00:02:10.310
So password needs to ABC 123 It's not be rerun this with control how it should still pass

00:02:10.310 --> 00:02:11.310
the test or pass.

00:02:11.310 --> 00:02:12.350
But as you can see,

00:02:12.350 --> 00:02:15.690
we've done it in a different way instead of unequal to match,

00:02:15.690 --> 00:02:18.990
which is an equals comparison into objects.

00:02:18.990 --> 00:02:20.070
Instead,

00:02:20.070 --> 00:02:21.820
we're using a composition,

00:02:21.820 --> 00:02:27.240
has property matches which match the properties on the object on because we're using all

00:02:27.240 --> 00:02:27.500
off.

00:02:27.500 --> 00:02:31.650
It's gonna evaluate all of those at the same time to ensure they're all true.

00:02:31.650 --> 00:02:33.520
So we could do the same.

00:02:33.520 --> 00:02:38.150
And substitute is Donald DBC 321 Let's just do this.

00:02:38.150 --> 00:02:53.050
Don't old BBC 321 I'm run that but it once again.

00:02:53.050 --> 00:02:57.750
So this is a much nicer because it also enables us to do more fine grained testing.

00:02:57.750 --> 00:03:03.450
So whereas before when we saw the equal to match ER which takes the expected in the actual

00:03:03.450 --> 00:03:05.830
object instances cycle too much.

00:03:05.830 --> 00:03:08.910
It is a full eagles comparison with both those objects,

00:03:08.910 --> 00:03:14.220
which means that every single field in those objects needs to be equal in accordance with

00:03:14.220 --> 00:03:15.050
the equals method.

00:03:15.050 --> 00:03:15.810
Otherwise,

00:03:15.810 --> 00:03:17.230
the match won't evaluate True.

00:03:17.230 --> 00:03:21.400
This is nicer because we can should be more fine grained about things.

00:03:21.400 --> 00:03:24.770
So what I mean by that is we're not taking into account.

00:03:24.770 --> 00:03:28.800
All of the different properties in here were just interested in using them and password.

00:03:28.800 --> 00:03:35.160
So you'll know that on the user class we have extra fields who have got this Boolean live.

00:03:35.160 --> 00:03:37.050
We've also gotta use a type as well,

00:03:37.050 --> 00:03:40.250
but because we're using these composed matches.

00:03:40.250 --> 00:03:44.940
We can arbitrarily bia's fine or coarse grained as we want without being at the mercy of

00:03:44.940 --> 00:03:47.690
the evaluation of the equals method between the two objects.

00:03:47.690 --> 00:03:48.330
Zeke,

00:03:48.330 --> 00:03:51.720
ability of that ham crest gives you a really powerful way to be able to do assertions.

00:03:51.720 --> 00:03:54.370
And there are lots more matches as well in the library itself.

00:03:54.370 --> 00:03:57.350
Encourage it to have a look at those in the documentation with the library.

00:03:57.350 --> 00:04:01.300
But this gave you a good look at the matches in action and I can compose them.

00:04:01.300 --> 00:04:05.950
And you can really see now how much of a powerful assertions library ham Crist really is.

00:04:05.950 --> 00:04:08.750
The more you go on in your unit testing journey,

00:04:08.750 --> 00:04:12.330
the more you're gonna learn about how Christ we're gonna use it on the nicely a test

00:04:12.330 --> 00:04:12.960
they're gonna become.

00:04:12.960 --> 00:04:13.940
So yeah,

00:04:13.940 --> 00:04:14.700
I'm Crist.

00:04:14.700 --> 00:04:15.790
Awesome assertions.

00:04:15.790 --> 00:04:16.340
Library.

00:04:16.340 --> 00:04:19.390
Use it wherever you can Is much better than the June assertions.

00:04:19.390 --> 00:04:19.950
A p I.

00:04:19.950 --> 00:04:25.150
But just make sure you swapping the full library as opposed to the stripped down version

00:04:25.150 --> 00:04:25.640
which day,

00:04:25.640 --> 00:04:26.660
and it gives you out of the box.

00:04:26.660 --> 00:04:29.040
But there is a good overview off hammock.

00:04:29.040 --> 00:04:30.300
Rest matches on them.

00:04:30.300 --> 00:04:32.050
Crest assertions library in action

