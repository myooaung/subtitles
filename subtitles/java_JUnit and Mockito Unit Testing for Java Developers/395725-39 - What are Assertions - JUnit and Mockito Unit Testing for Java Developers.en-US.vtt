WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.710
in this video,

00:00:02.710 --> 00:00:06.620
we're gonna get a feel for what assertions are on what role the plane unit tests now.

00:00:06.620 --> 00:00:08.800
There are pretty foundational aspect of unit tests.

00:00:08.800 --> 00:00:09.110
In fact,

00:00:09.110 --> 00:00:11.260
you can't really write unit tests without assertions,

00:00:11.260 --> 00:00:13.400
so it's good to understand exactly what they are.

00:00:13.400 --> 00:00:16.260
So that's taken together now and explore exactly what assertions are.

00:00:16.260 --> 00:00:18.850
So let's start with the definition of an assertion.

00:00:18.850 --> 00:00:22.280
Assertion is a statement of fact.

00:00:22.280 --> 00:00:26.790
It's basically a truth that we hold to be true at a particular time in the execution of a

00:00:26.790 --> 00:00:28.370
program or in a unit test.

00:00:28.370 --> 00:00:31.530
You can actually use assertions in normal job programs through the assert,

00:00:31.530 --> 00:00:33.340
FBI on the ideas kind of the same.

00:00:33.340 --> 00:00:36.890
But what we're focusing on here is the idea of assertions in unit tests.

00:00:36.890 --> 00:00:39.900
So what we're saying is really an assertion is the truth,

00:00:39.900 --> 00:00:40.810
or it's a fact.

00:00:40.810 --> 00:00:43.450
The West stating at a particular point in the unit test,

00:00:43.450 --> 00:00:46.110
which describes what we believe to be true on The idea of this,

00:00:46.110 --> 00:00:48.820
basically is that if the assertion is true on the unit,

00:00:48.820 --> 00:00:51.250
says Framework evaluates the expression for the assertion.

00:00:51.250 --> 00:00:52.150
If it is true,

00:00:52.150 --> 00:00:54.620
then all good on the test continues.

00:00:54.620 --> 00:00:56.670
But if the assertion isn't true,

00:00:56.670 --> 00:00:57.330
in other words,

00:00:57.330 --> 00:00:58.730
that expression when it's evaluated,

00:00:58.730 --> 00:01:00.140
if it's evaluated to false,

00:01:00.140 --> 00:01:02.180
then at that point the unit test will fail.

00:01:02.180 --> 00:01:02.880
Basically,

00:01:02.880 --> 00:01:04.710
it's saying something up with the code,

00:01:04.710 --> 00:01:05.780
and it's gonna be fixed.

00:01:05.780 --> 00:01:07.840
That's pretty much what assertions are in a nutshell,

00:01:07.840 --> 00:01:08.220
anyway.

00:01:08.220 --> 00:01:08.770
So yeah,

00:01:08.770 --> 00:01:11.190
an assertion stating something as a fact.

00:01:11.190 --> 00:01:12.310
And we can see this here.

00:01:12.310 --> 00:01:14.550
This is the dictionary definition of the word assertion,

00:01:14.550 --> 00:01:16.610
and you can see here it says the action,

00:01:16.610 --> 00:01:20.390
offsetting something or exercising authority confidently and forcefully.

00:01:20.390 --> 00:01:21.080
And that's true,

00:01:21.080 --> 00:01:21.320
really,

00:01:21.320 --> 00:01:22.020
in an assertion.

00:01:22.020 --> 00:01:23.460
When you're writing that down in the unit test,

00:01:23.460 --> 00:01:26.510
you're saying this is what I believe to be true of the world,

00:01:26.510 --> 00:01:27.560
this stage in time.

00:01:27.560 --> 00:01:30.560
It's an absolute belief that you hold It's a conviction.

00:01:30.560 --> 00:01:31.550
I believe this history.

00:01:31.550 --> 00:01:33.060
So that's what assertions are really.

00:01:33.060 --> 00:01:37.440
So let's have a quick look now and think about some assertions that weaken formulate in

00:01:37.440 --> 00:01:37.740
general,

00:01:37.740 --> 00:01:38.190
in real life,

00:01:38.190 --> 00:01:40.140
let's not worry about code too much for now.

00:01:40.140 --> 00:01:43.350
Let's just think about how to use assertions in language,

00:01:43.350 --> 00:01:45.620
because that's typically what you do when you're writing unit tests.

00:01:45.620 --> 00:01:48.900
You think first of all about what you believe to be true about the code,

00:01:48.900 --> 00:01:53.410
and then you translate that you formulate that into assertions programmatically throw the

00:01:53.410 --> 00:01:56.740
jail unit or ham Crist or on assertions library that you might use.

00:01:56.740 --> 00:02:00.530
But it all starts with basically thinking about the assertions themselves on what you want

00:02:00.530 --> 00:02:03.350
to translate into code before you can actually write those assertions down.

00:02:03.350 --> 00:02:04.870
Just think about it for a second.

00:02:04.870 --> 00:02:07.740
A simple assertion could be I am English and that's true.

00:02:07.740 --> 00:02:08.660
That happens to be true.

00:02:08.660 --> 00:02:10.400
So I would make that assertion.

00:02:10.400 --> 00:02:11.140
I am English,

00:02:11.140 --> 00:02:12.970
another assertion as well,

00:02:12.970 --> 00:02:14.590
which we could have based on May.

00:02:14.590 --> 00:02:17.310
Just thinking aloud now is I am a man.

00:02:17.310 --> 00:02:18.380
That's also true.

00:02:18.380 --> 00:02:20.630
I happened to be a man of male gender,

00:02:20.630 --> 00:02:22.200
so that's an assertion as well.

00:02:22.200 --> 00:02:25.120
So those two assertions are facts about me.

00:02:25.120 --> 00:02:26.430
I am English and I am a man.

00:02:26.430 --> 00:02:26.960
Okay,

00:02:26.960 --> 00:02:28.010
does the recessions,

00:02:28.010 --> 00:02:29.360
but similarly as well.

00:02:29.360 --> 00:02:32.100
You could also have an assertion which doesn't happen to be true.

00:02:32.100 --> 00:02:32.890
For example,

00:02:32.890 --> 00:02:35.380
I could assert I am an American woman now.

00:02:35.380 --> 00:02:35.860
Obviously,

00:02:35.860 --> 00:02:36.990
I'm not an American woman,

00:02:36.990 --> 00:02:37.800
but nevertheless,

00:02:37.800 --> 00:02:39.150
that could still be an assertion.

00:02:39.150 --> 00:02:40.840
So you really gotta decouple in your mind.

00:02:40.840 --> 00:02:46.280
The idea off asserting something on of something being true and especially is a belief that

00:02:46.280 --> 00:02:47.060
something is true.

00:02:47.060 --> 00:02:51.300
It's not necessarily the case that something is true on whether something is true or know

00:02:51.300 --> 00:02:53.770
whether that assertion evaluates to true or false.

00:02:53.770 --> 00:02:56.130
That's what happens when the unit says it's actually run on.

00:02:56.130 --> 00:02:57.330
The assertions evaluated.

00:02:57.330 --> 00:02:58.890
So what are assertions useful?

00:02:58.890 --> 00:03:01.830
What the sessions air used for passing or failing a test.

00:03:01.830 --> 00:03:02.210
In other words,

00:03:02.210 --> 00:03:03.150
when you write your tests,

00:03:03.150 --> 00:03:04.080
you write tests,

00:03:04.080 --> 00:03:07.470
which include a collection of assertions of what you believe to be true.

00:03:07.470 --> 00:03:11.880
And if all the assertions in a test the true that test passes on and if just one of the

00:03:11.880 --> 00:03:14.550
assertions is false when he evaluates divorced,

00:03:14.550 --> 00:03:15.790
then that's it's fails.

00:03:15.790 --> 00:03:18.010
So Sessions really used to evaluate,

00:03:18.010 --> 00:03:18.290
Let's say,

00:03:18.290 --> 00:03:20.960
in the state of the world at a particular point in your unit test,

00:03:20.960 --> 00:03:24.390
and that's usually after you've executed the method that you're testing.

00:03:24.390 --> 00:03:25.960
So that's ever run through this idea.

00:03:25.960 --> 00:03:28.540
Now let's supposing we have a simple test case,

00:03:28.540 --> 00:03:29.240
Andi,

00:03:29.240 --> 00:03:30.580
In that simple test case,

00:03:30.580 --> 00:03:32.030
I have these assertions.

00:03:32.030 --> 00:03:34.220
So the first assertion I am English.

00:03:34.220 --> 00:03:35.760
Let's say that evaluates to true.

00:03:35.760 --> 00:03:36.540
That's fine.

00:03:36.540 --> 00:03:37.070
Second,

00:03:37.070 --> 00:03:37.680
this ocean.

00:03:37.680 --> 00:03:38.560
I am a man,

00:03:38.560 --> 00:03:38.840
it said.

00:03:38.840 --> 00:03:39.940
That also evaluates to true.

00:03:39.940 --> 00:03:41.020
That's fine At this point.

00:03:41.020 --> 00:03:43.440
The test case is still running because the world's a happy,

00:03:43.440 --> 00:03:45.630
shiny place and everything is going well.

00:03:45.630 --> 00:03:46.380
Everything's green,

00:03:46.380 --> 00:03:46.910
as it were,

00:03:46.910 --> 00:03:48.410
and then it hits the third assertion.

00:03:48.410 --> 00:03:49.590
I am an American woman,

00:03:49.590 --> 00:03:54.140
and at that point that evaluates to false and so because it evaluates to false that would

00:03:54.140 --> 00:03:56.980
cause that particular test case to fail on.

00:03:56.980 --> 00:04:01.260
It would fail with an assertion error on the assertion error would say something that would

00:04:01.260 --> 00:04:01.260
.

00:04:01.260 --> 00:04:04.890
It gives an indication that that particular assertion was the one that caused the test to

00:04:04.890 --> 00:04:05.280
fail.

00:04:05.280 --> 00:04:08.980
It would say something along the lines of expected that Matt was an American woman,

00:04:08.980 --> 00:04:10.570
but that wasn't an American woman.

00:04:10.570 --> 00:04:11.750
Something notional like that.

00:04:11.750 --> 00:04:13.000
It isn't exactly like that,

00:04:13.000 --> 00:04:17.590
but you get the idea now we can put a sociales at different places in our test case on

00:04:17.590 --> 00:04:19.290
depending on where we put the assertions,

00:04:19.290 --> 00:04:23.170
this determines the type of role Those assertions play on assertions,

00:04:23.170 --> 00:04:25.350
basically a categorized into two different types,

00:04:25.350 --> 00:04:29.660
depending upon whether they come before or after the method that's being tested.

00:04:29.660 --> 00:04:31.740
If they're going before the method that's been tested,

00:04:31.740 --> 00:04:33.420
then owners preconditions.

00:04:33.420 --> 00:04:38.290
So preconditions basically test the state of the world before we execute the test method.

00:04:38.290 --> 00:04:40.760
And if the assertions come after the test method,

00:04:40.760 --> 00:04:42.570
these another's post conditions.

00:04:42.570 --> 00:04:46.400
So post conditions test the state of the world after the test method has been invoked.

00:04:46.400 --> 00:04:49.030
Now pass conditions and usually the main category of assertions.

00:04:49.030 --> 00:04:50.920
We think about what we're writing unit tests,

00:04:50.920 --> 00:04:55.460
because in general you do some set up to prepare for the test that could be preparing some

00:04:55.460 --> 00:04:58.590
test data or setting up some objects to behave in a particular way,

00:04:58.590 --> 00:05:00.410
depending on how you're writing the unit test,

00:05:00.410 --> 00:05:02.570
then you invoke the method that's being tested.

00:05:02.570 --> 00:05:07.040
And then afterwards there's an assertions block where you basically make assertions about

00:05:07.040 --> 00:05:08.260
what you expect to be true,

00:05:08.260 --> 00:05:10.650
and that's typically the former of most unit tests.

00:05:10.650 --> 00:05:11.620
So really,

00:05:11.620 --> 00:05:14.890
the category of assertions you're gonna come across our post conditions,

00:05:14.890 --> 00:05:17.070
I notice find those referred to US assertions,

00:05:17.070 --> 00:05:19.730
but nevertheless it's useful to distinguish the two types on.

00:05:19.730 --> 00:05:19.930
Also,

00:05:19.930 --> 00:05:20.370
of course,

00:05:20.370 --> 00:05:24.370
if you put preconditions in this can also make your test code mole Robustas.

00:05:24.370 --> 00:05:24.690
Well,

00:05:24.690 --> 00:05:27.020
because that way you could fail a test if this,

00:05:27.020 --> 00:05:27.320
um,

00:05:27.320 --> 00:05:31.030
set up for the test that isn't done in accordance with the way you expect it to be done.

00:05:31.030 --> 00:05:32.830
But I get to go down without for now.

00:05:32.830 --> 00:05:37.040
Just remember the fact that assertions or a statement of facts that you're making in the

00:05:37.040 --> 00:05:41.610
code and you'd only use post conditions to assert the state of the world after you've

00:05:41.610 --> 00:05:42.630
involved your test method,

00:05:42.630 --> 00:05:44.150
and that's really what assertions about.

00:05:44.150 --> 00:05:47.350
So now we know what assertions are in terms of language,

00:05:47.350 --> 00:05:48.120
linguistically,

00:05:48.120 --> 00:05:50.210
how how the on how we describe them,

00:05:50.210 --> 00:05:51.950
what kind of things can you assert them?

00:05:51.950 --> 00:05:52.280
Well,

00:05:52.280 --> 00:05:53.700
you can assert things being true.

00:05:53.700 --> 00:05:55.050
So in the assert method,

00:05:55.050 --> 00:05:56.880
you can pass an expression to be evaluated.

00:05:56.880 --> 00:05:58.160
And if the expression is true,

00:05:58.160 --> 00:06:01.040
or rather if evaluates to true than the assertion passes.

00:06:01.040 --> 00:06:02.760
If the expression evaluates to false,

00:06:02.760 --> 00:06:03.870
then the assertion fails.

00:06:03.870 --> 00:06:08.760
You can also set things being equal so you can have two objects for examples or two

00:06:08.760 --> 00:06:11.570
instances of the same object on you can compare them with it.

00:06:11.570 --> 00:06:17.590
Dog equals comparison to say if a equals B so you can assert that they're logically equal

00:06:17.590 --> 00:06:19.150
in accordance with their equals method.

00:06:19.150 --> 00:06:21.260
You can also assert that things at the same.

00:06:21.260 --> 00:06:21.820
In other words,

00:06:21.820 --> 00:06:22.630
they're identical,

00:06:22.630 --> 00:06:22.840
though,

00:06:22.840 --> 00:06:24.650
that they're physically the same reference.

00:06:24.650 --> 00:06:25.600
So that could be useful.

00:06:25.600 --> 00:06:26.080
For example,

00:06:26.080 --> 00:06:29.250
if you put something into a map and then let's run you retreat album app,

00:06:29.250 --> 00:06:33.020
you might want to check that those two references you have physically point to the same

00:06:33.020 --> 00:06:33.580
object,

00:06:33.580 --> 00:06:35.010
and in addition to these,

00:06:35.010 --> 00:06:37.100
you can also do negations of those things.

00:06:37.100 --> 00:06:37.450
So,

00:06:37.450 --> 00:06:37.910
for example,

00:06:37.910 --> 00:06:39.570
you can assert that something is false,

00:06:39.570 --> 00:06:41.840
bypassing any expression or set the things air.

00:06:41.840 --> 00:06:43.410
No equal or not the same.

00:06:43.410 --> 00:06:46.400
No one of those assertion times to have just seen those are available.

00:06:46.400 --> 00:06:48.290
Viaje units asserts class,

00:06:48.290 --> 00:06:50.580
and it has a range off a certain methods,

00:06:50.580 --> 00:06:52.930
which you can use to test those particular scenarios.

00:06:52.930 --> 00:06:53.520
So J.

00:06:53.520 --> 00:06:57.640
And it really through this assert class gives you a basic foundational kit.

00:06:57.640 --> 00:07:02.780
If you like off assertion methods that you can use just basically like the foundational

00:07:02.780 --> 00:07:04.470
sets off assertion types,

00:07:04.470 --> 00:07:05.490
if you will now,

00:07:05.490 --> 00:07:06.190
in addition to J,

00:07:06.190 --> 00:07:07.110
and it's a certain referred.

00:07:07.110 --> 00:07:09.150
We also have a session library,

00:07:09.150 --> 00:07:11.200
which is bundled with Jamie as well,

00:07:11.200 --> 00:07:13.130
but leaves a subset of that library on.

00:07:13.130 --> 00:07:13.520
That's a lie.

00:07:13.520 --> 00:07:16.180
Brianna's hammock rest now have address is very nice,

00:07:16.180 --> 00:07:18.330
and you'll find yourself using ham Chris quite a lot in June.

00:07:18.330 --> 00:07:20.350
It tests while Ham Quest lets you do,

00:07:20.350 --> 00:07:23.310
is to create more complex assertion expressions.

00:07:23.310 --> 00:07:27.060
And it does so using a very readable syntax based on so called matches.

00:07:27.060 --> 00:07:29.050
But let's not jump ahead of ourselves for now.

00:07:29.050 --> 00:07:30.400
We'll see that later in the course.

00:07:30.400 --> 00:07:34.580
But just know that you have a very rich library off assertion methods and ways of a certain

00:07:34.580 --> 00:07:38.820
things on formulating assertion expressions that you can use which air delivered through

00:07:38.820 --> 00:07:39.080
Jane.

00:07:39.080 --> 00:07:41.460
It's a sir class on Daham Crest Library.

00:07:41.460 --> 00:07:45.040
So now you know what assertions are on the role they play in unit tests.

00:07:45.040 --> 00:07:45.590
In the next,

00:07:45.590 --> 00:07:50.020
videos will dig in and see how we can right around assertions using jamon and ham twist in

00:07:50.020 --> 00:07:50.250
the I.

00:07:50.250 --> 00:07:50.590
D.

