WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.750
in this video,

00:00:02.750 --> 00:00:04.200
we're going to explore J units.

00:00:04.200 --> 00:00:05.730
That's before annotation,

00:00:05.730 --> 00:00:08.250
which lets us keep our unit tests set up good.

00:00:08.250 --> 00:00:10.730
Dry that sense for don't repeat yourself.

00:00:10.730 --> 00:00:11.080
In other words,

00:00:11.080 --> 00:00:13.170
we don't have to duplication of the sets of method,

00:00:13.170 --> 00:00:15.050
and we'll see how to do that right now.

00:00:15.050 --> 00:00:19.580
So let's think back now and look at the unit test on and assess the kind of unit tested.

00:00:19.580 --> 00:00:21.890
It is so thinking about that test we've written.

00:00:21.890 --> 00:00:23.440
That's obviously a very simple test,

00:00:23.440 --> 00:00:25.280
and we don't usually have methods,

00:00:25.280 --> 00:00:27.610
which is so simple that just a simple function,

00:00:27.610 --> 00:00:30.330
which is defined as a static method taking two interviews.

00:00:30.330 --> 00:00:30.850
Normally,

00:00:30.850 --> 00:00:32.320
we have state on objects.

00:00:32.320 --> 00:00:36.650
So let's rework this production class just for the sake of our example.

00:00:36.650 --> 00:00:38.030
Unless assumed,

00:00:38.030 --> 00:00:39.250
that isn't a static method.

00:00:39.250 --> 00:00:40.300
In other words,

00:00:40.300 --> 00:00:42.050
we have to create some instance of calculator.

00:00:42.050 --> 00:00:42.550
First,

00:00:42.550 --> 00:00:50.950
it's not to go back to here.

00:00:50.950 --> 00:00:52.870
We can see this is highlighted in red.

00:00:52.870 --> 00:00:54.800
This is now a compilation era.

00:00:54.800 --> 00:00:56.550
It can't reference from a static context,

00:00:56.550 --> 00:00:59.650
so we could fix it by doing this new calculator.

00:00:59.650 --> 00:01:00.300
However,

00:01:00.300 --> 00:01:06.170
that violates our arrange act in a certain sections because the test object the object

00:01:06.170 --> 00:01:07.280
which were testing them.

00:01:07.280 --> 00:01:10.810
That is the system on the test that needs to go into the arrange phase.

00:01:10.810 --> 00:01:24.710
So let's just put it in the arrange face instead just to keep things nice and consistent

00:01:24.710 --> 00:01:25.610
with the methodology.

00:01:25.610 --> 00:01:30.980
So now I just need one that just to make sure everything still works,

00:01:30.980 --> 00:01:32.280
which he does,

00:01:32.280 --> 00:01:33.920
Let's find on.

00:01:33.920 --> 00:01:35.850
Let's suppose we had another test.

00:01:35.850 --> 00:01:38.820
She's copy this one.

00:01:38.820 --> 00:01:39.350
For now,

00:01:39.350 --> 00:01:43.250
he's going test at zero.

00:01:43.250 --> 00:01:48.250
So a test from Wana see what happens when we had zero to something.

00:01:48.250 --> 00:01:49.950
Not the most interesting test.

00:01:49.950 --> 00:01:51.880
But we don't care about that.

00:01:51.880 --> 00:01:52.380
For now.

00:01:52.380 --> 00:01:55.750
We just care about learning about how Jay and it works,

00:01:55.750 --> 00:01:58.020
so they should be the answer here.

00:01:58.020 --> 00:01:59.550
At least admit it's a bit more descriptive.

00:01:59.550 --> 00:02:14.190
Test positive numbers test on zero to positive on.

00:02:14.190 --> 00:02:14.800
Rerun this.

00:02:14.800 --> 00:02:15.070
Now,

00:02:15.070 --> 00:02:19.690
If I do run calculated test you now see there,

00:02:19.690 --> 00:02:20.150
too.

00:02:20.150 --> 00:02:22.560
Test what?

00:02:22.560 --> 00:02:23.350
You're being run here.

00:02:23.350 --> 00:02:24.020
So Nabarro,

00:02:24.020 --> 00:02:26.600
too test cases on this test class,

00:02:26.600 --> 00:02:29.330
and every time you click a test method,

00:02:29.330 --> 00:02:33.370
any output related to that test method will appear here or any test.

00:02:33.370 --> 00:02:33.910
Ophelia,

00:02:33.910 --> 00:02:34.510
for example,

00:02:34.510 --> 00:02:36.960
assertions not passing that kind of thing would also appear here.

00:02:36.960 --> 00:02:39.070
You had a full set of test methods,

00:02:39.070 --> 00:02:41.950
said 20 test methods here and say like three of them failed.

00:02:41.950 --> 00:02:47.710
Then you'll be able to click on the individual failures and see what happened in the right

00:02:47.710 --> 00:02:48.390
hand pain here.

00:02:48.390 --> 00:02:51.210
But what I want to show you now and highlight is the father.

00:02:51.210 --> 00:02:52.380
We have some duplication,

00:02:52.380 --> 00:02:58.320
so you can see when we're arranging either of these tests.

00:02:58.320 --> 00:02:59.900
We do instance,

00:02:59.900 --> 00:03:03.350
creation of the system in the test in the method each time.

00:03:03.350 --> 00:03:08.510
So we can re factor this slightly and we can use another one of Joe units annotations,

00:03:08.510 --> 00:03:16.160
which is called out before so finally used at before you came from or achieving it and have

00:03:16.160 --> 00:03:18.150
a method public void set up.

00:03:18.150 --> 00:03:22.680
This will enable me to put this said zip code.

00:03:22.680 --> 00:03:25.450
In that method,

00:03:25.450 --> 00:03:34.910
I believe this one and this method will be executed before each test to set up the circled

00:03:34.910 --> 00:03:39.050
test fixture for the test on that basically means thesis objects all the state,

00:03:39.050 --> 00:03:42.350
if you like off the test class before each individual test is run.

00:03:42.350 --> 00:03:48.540
Now you can see here this is in right his cock in here and here And that's because we need

00:03:48.540 --> 00:03:50.950
to actually push this state.

00:03:50.950 --> 00:03:57.380
Is the system on the test that we're going to be running a test fall into the test class

00:03:57.380 --> 00:03:57.830
itself?

00:03:57.830 --> 00:04:00.100
So we give it a private member variable here,

00:04:00.100 --> 00:04:02.440
which we can call Kilcher.

00:04:02.440 --> 00:04:04.590
Now,

00:04:04.590 --> 00:04:08.330
if we rerun all the tests again,

00:04:08.330 --> 00:04:09.050
they should be green.

00:04:09.050 --> 00:04:12.160
So this is nice.

00:04:12.160 --> 00:04:17.160
This basically means that we've got commonality to set up our test fixture in the set up

00:04:17.160 --> 00:04:17.650
method.

00:04:17.650 --> 00:04:24.610
It was not duplicated across all of the tests and we have individual arrange sections which

00:04:24.610 --> 00:04:25.970
are very specific to reach test.

00:04:25.970 --> 00:04:30.150
So this is going into being a very nice kind of well structured test.

00:04:30.150 --> 00:04:31.780
Now,

00:04:31.780 --> 00:04:35.650
it doesn't look like much of this stage because this is a very trivial example.

00:04:35.650 --> 00:04:40.460
But if you imagine you had a class which maybe takes a few different collaborators to a few

00:04:40.460 --> 00:04:42.900
different objects which needs to interact with,

00:04:42.900 --> 00:04:46.760
maybe they need to be set up in a specific way,

00:04:46.760 --> 00:04:49.250
which is common across all these tests than you can imagine.

00:04:49.250 --> 00:04:51.450
This this method would be quite useful.

00:04:51.450 --> 00:04:55.850
And that's how we keep set up Tesco dry using the out before politician

