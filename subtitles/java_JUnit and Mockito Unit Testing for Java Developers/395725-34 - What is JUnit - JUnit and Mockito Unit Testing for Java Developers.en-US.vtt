WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.000
in this video,

00:00:03.000 --> 00:00:05.000
we're gonna have a look at what Germany is on.

00:00:05.000 --> 00:00:05.950
Give a bit of another view,

00:00:05.950 --> 00:00:08.630
so it's not so unfamiliar as we go through the rest of the course.

00:00:08.630 --> 00:00:09.810
So what is J.

00:00:09.810 --> 00:00:10.110
Unit?

00:00:10.110 --> 00:00:10.840
Well,

00:00:10.840 --> 00:00:11.110
Jane,

00:00:11.110 --> 00:00:13.470
it's a framework for writing unit tests,

00:00:13.470 --> 00:00:14.860
so that sounds all well and good.

00:00:14.860 --> 00:00:16.070
But what does that really mean?

00:00:16.070 --> 00:00:17.480
What is this framework idea really mean?

00:00:17.480 --> 00:00:18.670
And what does it give us?

00:00:18.670 --> 00:00:20.290
Let's just break that down for a second.

00:00:20.290 --> 00:00:20.450
Well,

00:00:20.450 --> 00:00:23.730
the framework is really a structured and well defined way to do things.

00:00:23.730 --> 00:00:24.940
The same is true in life.

00:00:24.940 --> 00:00:25.340
For example,

00:00:25.340 --> 00:00:28.730
we might have a legal framework which describes how we can do various things in the legal

00:00:28.730 --> 00:00:29.060
system,

00:00:29.060 --> 00:00:30.220
like an appeals process.

00:00:30.220 --> 00:00:31.430
I might get a game of football,

00:00:31.430 --> 00:00:31.940
for example.

00:00:31.940 --> 00:00:33.680
That's gonna from what to of remark,

00:00:33.680 --> 00:00:37.510
which is a set of rules and regulations which needs to be out here to play football.

00:00:37.510 --> 00:00:40.440
So we're really looking a structured way of doing things,

00:00:40.440 --> 00:00:41.640
which is what a framework is.

00:00:41.640 --> 00:00:43.110
So how do we do this in Java,

00:00:43.110 --> 00:00:44.030
then we'll in job,

00:00:44.030 --> 00:00:45.850
but we don't have rules and regulations.

00:00:45.850 --> 00:00:46.250
Instead,

00:00:46.250 --> 00:00:50.580
we have to use the times that Java gives us to work with on these air basically interfaces

00:00:50.580 --> 00:00:50.580
,

00:00:50.580 --> 00:00:52.510
classes and annotations.

00:00:52.510 --> 00:00:53.700
So in a Java framework,

00:00:53.700 --> 00:00:57.520
we typically have interfaces which we other must still have the option to implement.

00:00:57.520 --> 00:01:00.700
We have classes which were the must have the option to extend.

00:01:00.700 --> 00:01:01.950
Those are abstract classes,

00:01:01.950 --> 00:01:04.290
and we also might have classes that we can just use.

00:01:04.290 --> 00:01:04.940
So in other words,

00:01:04.940 --> 00:01:05.320
they will give us,

00:01:05.320 --> 00:01:05.480
like,

00:01:05.480 --> 00:01:09.540
helping methods or somehow help us along the way in using the framework itself and

00:01:09.540 --> 00:01:10.410
sometimes in frameworks.

00:01:10.410 --> 00:01:12.020
We also have annotations as well.

00:01:12.020 --> 00:01:14.330
So with annotations Week another place these on classes,

00:01:14.330 --> 00:01:18.580
methods and sometimes fields to be able to sing the find to the framework something special

00:01:18.580 --> 00:01:19.470
about those classes,

00:01:19.470 --> 00:01:20.480
methods or fields.

00:01:20.480 --> 00:01:20.710
Now,

00:01:20.710 --> 00:01:21.660
putting all these things together,

00:01:21.660 --> 00:01:23.700
we have what's usually referred to as an A p I,

00:01:23.700 --> 00:01:26.250
which stands for application programming interface.

00:01:26.250 --> 00:01:28.390
That's basically the collection of interfaces,

00:01:28.390 --> 00:01:30.690
classes and annotations that are available to it.

00:01:30.690 --> 00:01:31.880
So they're available publicly.

00:01:31.880 --> 00:01:32.630
The public,

00:01:32.630 --> 00:01:36.800
in the sense that we can see them in our I D and then we can use those types on this FBI,

00:01:36.800 --> 00:01:41.500
is what a library or framework provider gives us to be able to work with that framework a

00:01:41.500 --> 00:01:41.920
library.

00:01:41.920 --> 00:01:43.020
So overall,

00:01:43.020 --> 00:01:44.370
the reason we have epi eyes,

00:01:44.370 --> 00:01:44.870
therefore,

00:01:44.870 --> 00:01:48.440
is to enable us to work with the library or framework and use its functionality.

00:01:48.440 --> 00:01:51.960
That's one of the FBI really gives us the ability to use the framework itself.

00:01:51.960 --> 00:01:53.420
So now we know what an MP I is.

00:01:53.420 --> 00:01:55.270
What does the J minute from would give us?

00:01:55.270 --> 00:01:58.860
It provides well defined coal backs on life cycle with its for us to use,

00:01:58.860 --> 00:01:59.050
you know,

00:01:59.050 --> 00:01:59.650
test could.

00:01:59.650 --> 00:02:04.760
That's the opioid that we use as clients of the library that's offensive for seducing users

00:02:04.760 --> 00:02:05.420
of the library.

00:02:05.420 --> 00:02:10.400
The framework also allows Janet to be integrated with other tools and frameworks as well.

00:02:10.400 --> 00:02:10.630
So,

00:02:10.630 --> 00:02:11.250
for example,

00:02:11.250 --> 00:02:16.200
it can integrate into ideas such as intelligent and eclipse to enable us to run the tests

00:02:16.200 --> 00:02:17.870
within the ideas themselves.

00:02:17.870 --> 00:02:20.050
When it does so through a service provider interface,

00:02:20.050 --> 00:02:21.570
which enables other integrations,

00:02:21.570 --> 00:02:22.110
for example,

00:02:22.110 --> 00:02:26.490
we build tools such as methanol cradle so we can run tests from the build of the command

00:02:26.490 --> 00:02:28.050
line now through continuous bill process,

00:02:28.050 --> 00:02:29.270
like Jenkins now,

00:02:29.270 --> 00:02:32.830
just to give you a sneak peek as to what's in the J Unit library itself in terms of

00:02:32.830 --> 00:02:33.440
interfaces,

00:02:33.440 --> 00:02:34.690
classes and annotations.

00:02:34.690 --> 00:02:36.690
Here are some of the times that J and it provides.

00:02:36.690 --> 00:02:37.420
Now,

00:02:37.420 --> 00:02:37.840
in General,

00:02:37.840 --> 00:02:39.950
Janet uses classes and annotations,

00:02:39.950 --> 00:02:42.070
so we won't really see interfaces to be honest,

00:02:42.070 --> 00:02:42.290
which is,

00:02:42.290 --> 00:02:42.540
well,

00:02:42.540 --> 00:02:44.320
credit out there in the child that you can see.

00:02:44.320 --> 00:02:47.920
So we have classes such as Assert and J Unit Test Runner on.

00:02:47.920 --> 00:02:48.890
We have annotations as well,

00:02:48.890 --> 00:02:51.600
such as at Test that Run with On that before.

00:02:51.600 --> 00:02:54.040
There are lots of other classes and annotations to,

00:02:54.040 --> 00:02:55.590
and we'll see these as we go through the course.

00:02:55.590 --> 00:02:56.010
But for now,

00:02:56.010 --> 00:02:58.020
this just gives you an idea off A few of the time,

00:02:58.020 --> 00:02:59.670
stir in the framework as it were.

00:02:59.670 --> 00:03:01.160
So with this Julian employ,

00:03:01.160 --> 00:03:02.810
what can we do then what we can write?

00:03:02.810 --> 00:03:03.560
Test cases.

00:03:03.560 --> 00:03:05.850
That's what the test and attention is used for,

00:03:05.850 --> 00:03:10.080
which enables us to mark methods that your unit will then pick up and recognize those test

00:03:10.080 --> 00:03:11.230
cases to be executed.

00:03:11.230 --> 00:03:13.830
We can also check values in our test cases as well.

00:03:13.830 --> 00:03:14.130
So,

00:03:14.130 --> 00:03:14.830
for example,

00:03:14.830 --> 00:03:18.250
check that we're getting the right values back from a method coal and that we don't have no

00:03:18.250 --> 00:03:21.990
values that kind of thing and those are done through assertions on we make assertions,

00:03:21.990 --> 00:03:23.570
really assert Class G unit.

00:03:23.570 --> 00:03:24.300
And finally,

00:03:24.300 --> 00:03:24.650
we couldn't,

00:03:24.650 --> 00:03:24.990
of course,

00:03:24.990 --> 00:03:29.210
run tests on view test results on those who don't have so called test runners in J in it.

00:03:29.210 --> 00:03:32.240
That should give you a nice introduction as to what Julian is.

00:03:32.240 --> 00:03:34.630
What's inside the box on what it can do for us.

00:03:34.630 --> 00:03:38.290
I'm going to see more about what we can do with Jay Unit on how to use it itself to write

00:03:38.290 --> 00:03:40.150
all test cases as we go through the course.

