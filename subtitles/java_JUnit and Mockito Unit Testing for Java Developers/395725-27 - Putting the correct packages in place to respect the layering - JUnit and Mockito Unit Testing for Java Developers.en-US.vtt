WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.490
in this video,

00:00:02.490 --> 00:00:06.710
working to tidy things up a little bit by separating out our classes into packages

00:00:06.710 --> 00:00:08.210
corresponding to the different layers.

00:00:08.210 --> 00:00:09.670
Just keep things nice and tidy.

00:00:09.670 --> 00:00:11.050
Let's explore that now,

00:00:11.050 --> 00:00:12.170
someone here.

00:00:12.170 --> 00:00:16.480
Now we've got a reasonably fair representation of a simple piece of a Web application,

00:00:16.480 --> 00:00:18.180
which we might have in production.

00:00:18.180 --> 00:00:19.220
So quick recap,

00:00:19.220 --> 00:00:19.550
then,

00:00:19.550 --> 00:00:20.310
don't you?

00:00:20.310 --> 00:00:23.480
Let's split them into the proper packages as well,

00:00:23.480 --> 00:00:24.010
well running.

00:00:24.010 --> 00:00:27.550
So there's gonna be a Web package.

00:00:27.550 --> 00:00:41.670
There's gonna be a of this package on a data package.

00:00:41.670 --> 00:00:47.550
So inside the Web package is a little bit the presentation layer.

00:00:47.550 --> 00:00:49.060
So I look in control.

00:00:49.060 --> 00:00:49.750
It goes in there.

00:00:49.750 --> 00:00:53.950
There it is,

00:00:53.950 --> 00:00:57.770
inside our service layer,

00:00:57.770 --> 00:00:58.690
which is unbelief.

00:00:58.690 --> 00:00:59.890
The presentation there,

00:00:59.890 --> 00:01:02.350
authentication services going to exist.

00:01:02.350 --> 00:01:04.450
Let's put that in there.

00:01:04.450 --> 00:01:06.220
Finally,

00:01:06.220 --> 00:01:08.850
underneath that we have our data layer,

00:01:08.850 --> 00:01:13.750
and that's where our repository class is going to exist.

00:01:13.750 --> 00:01:19.900
So Web Request will come into the logging controller and the presentation layer.

00:01:19.900 --> 00:01:23.890
That control will then delegate to the authentication service in this service layer that's

00:01:23.890 --> 00:01:28.330
responsible for influence in the business logic of the application on the business logic.

00:01:28.330 --> 00:01:28.750
Here,

00:01:28.750 --> 00:01:29.870
in this case,

00:01:29.870 --> 00:01:34.950
is knowing how to authenticate the user by expecting that the password of the user is equal

00:01:34.950 --> 00:01:36.950
to the password ended by user.

00:01:36.950 --> 00:01:38.950
That's the business logic there.

00:01:38.950 --> 00:01:39.680
And that,

00:01:39.680 --> 00:01:40.200
in turn,

00:01:40.200 --> 00:01:44.270
because this service class shouldn't know anything about the database or the persistence

00:01:44.270 --> 00:01:45.810
aspect of the application,

00:01:45.810 --> 00:01:46.430
they'll be.

00:01:46.430 --> 00:01:47.890
It will be a user repository,

00:01:47.890 --> 00:01:49.480
object or class rather,

00:01:49.480 --> 00:01:55.290
which is in the data layer on that specializes in knowing how to retrieve users from

00:01:55.290 --> 00:01:57.710
whatever persistent store that happens to be in the application.

00:01:57.710 --> 00:01:59.050
So here we're just using a map,

00:01:59.050 --> 00:02:00.550
and that's fine for demo purposes.

00:02:00.550 --> 00:02:01.410
But in general,

00:02:01.410 --> 00:02:04.480
you'd have some form of relational database system there.

00:02:04.480 --> 00:02:05.680
So,

00:02:05.680 --> 00:02:06.120
for example,

00:02:06.120 --> 00:02:11.970
some jelly BC logic to access my sequel or hedge do or a spring based chippy,

00:02:11.970 --> 00:02:12.530
a repository,

00:02:12.530 --> 00:02:13.200
that kind of thing.

00:02:13.200 --> 00:02:15.460
But let's not get into that now over.

00:02:15.460 --> 00:02:20.850
Concerned with is the fact that we've got these three classes in separate layers,

00:02:20.850 --> 00:02:24.650
each one doing their little bit to be able to kill.

00:02:24.650 --> 00:02:28.080
This particular scenario is particularly use case of logging and use in.

00:02:28.080 --> 00:02:31.990
So now we've got that set up and thanks for bearing with us when we did that.

00:02:31.990 --> 00:02:35.460
But I think it's important to go through the classes that we have and how they're related,

00:02:35.460 --> 00:02:38.610
because this relates to how will interact with them from one Marquita upon a view.

00:02:38.610 --> 00:02:39.620
Now we've got that set up.

00:02:39.620 --> 00:02:41.570
We're gonna look at how we can actually start writing.

00:02:41.570 --> 00:02:43.220
Unit tests were lucky to itself,

00:02:43.220 --> 00:02:44.460
which would in the next videos.

