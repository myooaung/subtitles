WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.390
So in this video we're going to see an example of where we might want to ignore a test

00:00:06.390 --> 00:00:08.710
which instructs to unit not to run that test.

00:00:08.710 --> 00:00:11.850
And we'll see where we might want to do this that continue from before.

00:00:11.850 --> 00:00:12.900
Okay,

00:00:12.900 --> 00:00:17.380
so let's just make sure that we can still run all the tests under the test break,

00:00:17.380 --> 00:00:20.460
which is a good habit to get into having to source test Java.

00:00:20.460 --> 00:00:21.750
And if you right click that folder,

00:00:21.750 --> 00:00:22.970
not the folder above,

00:00:22.970 --> 00:00:24.610
you'll see these running all tests.

00:00:24.610 --> 00:00:28.130
There was always a good idea to get into the habit of running all the tests whenever you

00:00:28.130 --> 00:00:30.610
make changes just to make sure that you haven't broken anything,

00:00:30.610 --> 00:00:32.590
Andi also probably just did it mindlessly.

00:00:32.590 --> 00:00:32.880
You know,

00:00:32.880 --> 00:00:36.370
don't try and think about whether you've tested this particular production class,

00:00:36.370 --> 00:00:37.170
and that might affect,

00:00:37.170 --> 00:00:37.450
you know,

00:00:37.450 --> 00:00:38.520
test classes,

00:00:38.520 --> 00:00:38.780
A,

00:00:38.780 --> 00:00:39.350
B and C.

00:00:39.350 --> 00:00:40.260
Don't think like that.

00:00:40.260 --> 00:00:42.950
Just run them because these tests should be very quick to execute.

00:00:42.950 --> 00:00:45.270
It should be a matter of seconds to get feedback.

00:00:45.270 --> 00:00:45.520
Another,

00:00:45.520 --> 00:00:47.200
everything's still working as it was before,

00:00:47.200 --> 00:00:50.000
made a change and has no regression which has been introduced.

00:00:50.000 --> 00:00:52.970
Regression being determined to mean that we've moved backwards.

00:00:52.970 --> 00:00:53.560
In other words,

00:00:53.560 --> 00:00:54.590
we've broken something.

00:00:54.590 --> 00:00:54.900
Yes,

00:00:54.900 --> 00:00:58.040
that's when you get regression in tests on this and then we're looking to avoid,

00:00:58.040 --> 00:00:59.920
which is why we always run these tests repeatedly.

00:00:59.920 --> 00:01:00.950
So run all the tests there,

00:01:00.950 --> 00:01:08.900
and I can see that in doing this have actually broken something.

00:01:08.900 --> 00:01:10.040
Because at this point,

00:01:10.040 --> 00:01:12.140
I got a stack tress when this particular test,

00:01:12.140 --> 00:01:13.170
which is test authenticate,

00:01:13.170 --> 00:01:13.890
executed,

00:01:13.890 --> 00:01:18.390
that this means either that the production code has changed in somewhere which has broken

00:01:18.390 --> 00:01:23.660
some kind of in variance or troops have held to be true about the system in the assertions

00:01:23.660 --> 00:01:25.890
off that test was a test has been executed.

00:01:25.890 --> 00:01:30.910
Our alternatives just broken the test itself by when the methods being invoked that methods

00:01:30.910 --> 00:01:31.760
one exception.

00:01:31.760 --> 00:01:32.590
Or alternatively,

00:01:32.590 --> 00:01:36.290
it can also be an indicator that our assertions no need to change.

00:01:36.290 --> 00:01:40.750
We need to become somehow different or maybe broader with the new production change we've

00:01:40.750 --> 00:01:41.070
made.

00:01:41.070 --> 00:01:41.780
No,

00:01:41.780 --> 00:01:43.390
obviously here I'm just creating,

00:01:43.390 --> 00:01:43.790
you know,

00:01:43.790 --> 00:01:44.900
pretty much ecstatic,

00:01:44.900 --> 00:01:47.950
least not literally statically said Yasmina List isn't changing.

00:01:47.950 --> 00:01:48.970
It's not dynamic.

00:01:48.970 --> 00:01:50.100
It's not starting the database,

00:01:50.100 --> 00:01:55.460
but I'm just creating a static list here off some users to represent what the persistence

00:01:55.460 --> 00:01:56.180
layer would do.

00:01:56.180 --> 00:01:58.800
But this implementation of facts could be representative of,

00:01:58.800 --> 00:01:59.490
for example,

00:01:59.490 --> 00:02:02.950
when in the persistence layer we've changed a sequel statement.

00:02:02.950 --> 00:02:07.280
Imagine changes sequel statement and now you're opening the floodgates to also that these

00:02:07.280 --> 00:02:09.160
different times off user through.

00:02:09.160 --> 00:02:10.200
So maybe you've extended,

00:02:10.200 --> 00:02:10.670
for example,

00:02:10.670 --> 00:02:11.250
a table.

00:02:11.250 --> 00:02:13.040
You've added these extra attributes,

00:02:13.040 --> 00:02:17.230
which are for whether the uses live on what the type of user is on when you've changed.

00:02:17.230 --> 00:02:17.840
That query.

00:02:17.840 --> 00:02:21.690
The call to this year's a repository method is now letting those different types of objects

00:02:21.690 --> 00:02:21.960
through.

00:02:21.960 --> 00:02:26.140
So let's look at why the test failed and then we can fix it,

00:02:26.140 --> 00:02:27.030
or more specifically.

00:02:27.030 --> 00:02:32.570
Then we can evaluate what was wrong and then work out how to fix it so I can see here.

00:02:32.570 --> 00:02:36.960
This is the test method that was cold authentication service test.

00:02:36.960 --> 00:02:40.250
So if I click this and then click the method it cold,

00:02:40.250 --> 00:02:42.650
I'm gonna this fine by using them call.

00:02:42.650 --> 00:02:44.690
At this point,

00:02:44.690 --> 00:02:45.270
I might be thinking,

00:02:45.270 --> 00:02:45.520
Well,

00:02:45.520 --> 00:02:46.650
what's happened there because,

00:02:46.650 --> 00:02:47.590
you know,

00:02:47.590 --> 00:02:49.600
it's authentication service test that looks OK.

00:02:49.600 --> 00:02:51.550
It's all things get in front of his no assertions,

00:02:51.550 --> 00:02:53.130
but it's calling it,

00:02:53.130 --> 00:02:54.650
and then something that looks OK.

00:02:54.650 --> 00:02:55.400
There's nothing wrong there.

00:02:55.400 --> 00:02:56.850
But if I go back to your test,

00:02:56.850 --> 00:02:59.120
you can see here that what we're expecting,

00:02:59.120 --> 00:03:00.700
or rather what we've arranged,

00:03:00.700 --> 00:03:03.860
is that the use repository is going to throw on illegal argument exception.

00:03:03.860 --> 00:03:07.500
And that's results from a demonstration from a previous unit where we spoke about how

00:03:07.500 --> 00:03:10.350
writing unit tests will enable us to rethink about designs and everything.

00:03:10.350 --> 00:03:10.610
What,

00:03:10.610 --> 00:03:11.590
I'm going to dress that here.

00:03:11.590 --> 00:03:12.210
So for now,

00:03:12.210 --> 00:03:16.110
we'll just show you how you can avoid dealing with those issues immediately and only ever

00:03:16.110 --> 00:03:16.960
do that for good reason,

00:03:16.960 --> 00:03:17.500
by the way.

00:03:17.500 --> 00:03:18.570
But we could do that now,

00:03:18.570 --> 00:03:20.670
just by putting on that's ignore.

00:03:20.670 --> 00:03:27.890
It's not because I can't to run and then run it all in my app,

00:03:27.890 --> 00:03:29.060
which means we're all the test again.

00:03:29.060 --> 00:03:30.710
Everything should be okay,

00:03:30.710 --> 00:03:32.850
and it is.

00:03:32.850 --> 00:03:36.770
But we do also get a notice here that one test was ignored on.

00:03:36.770 --> 00:03:38.650
There were two tests in the test suite,

00:03:38.650 --> 00:03:41.060
and it's okay to do this in this example,

00:03:41.060 --> 00:03:43.390
because I'm not addressing this here,

00:03:43.390 --> 00:03:45.370
will address this another time,

00:03:45.370 --> 00:03:48.850
and I want to move on to do something else until this is a useful thing to do.

00:03:48.850 --> 00:03:53.560
It's useful to be able to have this ignore to enable you to post bond fixing up the tests

00:03:53.560 --> 00:03:54.620
while you make changes,

00:03:54.620 --> 00:03:54.800
which,

00:03:54.800 --> 00:03:55.260
for example,

00:03:55.260 --> 00:03:57.940
might temporarily break things but again,

00:03:57.940 --> 00:03:59.060
use it judiciously.

00:03:59.060 --> 00:04:00.720
And don't let it be a good to thing,

00:04:00.720 --> 00:04:03.150
which you always use just to never fix anything up.

00:04:03.150 --> 00:04:04.490
Because inevitably,

00:04:04.490 --> 00:04:08.030
the longer you leave things that the more difficult it's gonna become to fix it that test

00:04:08.030 --> 00:04:09.600
up as the implementation changes,

00:04:09.600 --> 00:04:10.160
well,

00:04:10.160 --> 00:04:11.460
that's effectively being on pause.

00:04:11.460 --> 00:04:11.820
Through this,

00:04:11.820 --> 00:04:12.850
I ignore imitation.

00:04:12.850 --> 00:04:13.580
It's up there.

00:04:13.580 --> 00:04:15.290
It is the attic nor imitation.

00:04:15.290 --> 00:04:17.450
Just remember to always use it judiciously.

