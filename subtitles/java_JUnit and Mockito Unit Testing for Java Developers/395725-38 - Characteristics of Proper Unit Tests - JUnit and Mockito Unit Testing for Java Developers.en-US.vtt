WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.640
so once we have a pretty clear understanding of the coding side of unit tests.

00:00:06.640 --> 00:00:07.280
In other words,

00:00:07.280 --> 00:00:09.300
no one appreciate the elements of cutting them.

00:00:09.300 --> 00:00:13.350
So this is knowing how to create a test class that we have to write test methods within

00:00:13.350 --> 00:00:13.770
that class,

00:00:13.770 --> 00:00:14.320
etcetera.

00:00:14.320 --> 00:00:16.100
Now that we have that under our belts,

00:00:16.100 --> 00:00:18.860
it's time to look at some general guidelines for unit tests.

00:00:18.860 --> 00:00:21.850
So here we'll look at the most important characteristics of unit tests.

00:00:21.850 --> 00:00:24.960
I got an appreciation of some fundamental rules we need to stick to.

00:00:24.960 --> 00:00:29.850
Probably the most important point is that a unit test a bit isolated from anything external

00:00:29.850 --> 00:00:30.190
to it.

00:00:30.190 --> 00:00:33.360
We need to have isolation away from any external factors.

00:00:33.360 --> 00:00:37.220
So the class being tested shouldn't connect to anything which is usually in its operational

00:00:37.220 --> 00:00:39.780
environment by external women.

00:00:39.780 --> 00:00:41.020
Excel in a heavy sense.

00:00:41.020 --> 00:00:42.810
So a different process or system,

00:00:42.810 --> 00:00:43.520
for example.

00:00:43.520 --> 00:00:47.920
So this means no database access to perform queries or insert or update data.

00:00:47.920 --> 00:00:50.020
No accessing messaging systems toe.

00:00:50.020 --> 00:00:53.300
Either send or receive a message on non network connections,

00:00:53.300 --> 00:00:56.910
so we don't want to read from a socket or open a connection to anything external on,

00:00:56.910 --> 00:00:57.490
By the way,

00:00:57.490 --> 00:00:58.380
this includes Hey,

00:00:58.380 --> 00:00:58.900
http,

00:00:58.900 --> 00:01:02.370
request to So don't try and invoke any rest based NPR's either.

00:01:02.370 --> 00:01:04.530
There are a few ideas behind this,

00:01:04.530 --> 00:01:07.390
but the main one being that we're minimizing the moving parts,

00:01:07.390 --> 00:01:08.800
the less stuff we have involved.

00:01:08.800 --> 00:01:09.700
When we invoked the method,

00:01:09.700 --> 00:01:12.680
we're testing the better because if something goes wrong,

00:01:12.680 --> 00:01:14.920
it should be clear what that something is on.

00:01:14.920 --> 00:01:16.440
If we have too many moving parts,

00:01:16.440 --> 00:01:17.690
too many things involved.

00:01:17.690 --> 00:01:20.850
It just won't be clear to us when something does go wrong on a test fails.

00:01:20.850 --> 00:01:25.270
If we have our class in the test interacting with different systems involving different

00:01:25.270 --> 00:01:27.050
code on possibly different technologies,

00:01:27.050 --> 00:01:27.580
etcetera,

00:01:27.580 --> 00:01:31.000
we lose that scientific method quality we need in unit tests.

00:01:31.000 --> 00:01:34.420
We just want to set up the unit test class with the minimum we need to put it into a

00:01:34.420 --> 00:01:35.300
testable state,

00:01:35.300 --> 00:01:38.340
invoked the method we're testing and then observed the results.

00:01:38.340 --> 00:01:39.340
Ultimately,

00:01:39.340 --> 00:01:41.100
when we switch hats from being a developer,

00:01:41.100 --> 00:01:44.390
what's in production code to being a tester writing test code?

00:01:44.390 --> 00:01:48.780
We should approach that role very scientifically set up the minimum you need for the test

00:01:48.780 --> 00:01:50.240
with the minimum moving parts.

00:01:50.240 --> 00:01:54.080
Effectively isolate your class in the test from the things that interacts with externally,

00:01:54.080 --> 00:01:57.380
and then you can observe how the class will behave under different conditions.

00:01:57.380 --> 00:01:58.500
Of course,

00:01:58.500 --> 00:02:01.730
the class and a test still needs to work with its circle collaborators,

00:02:01.730 --> 00:02:04.910
so it's not isolated in the sense that it doesn't interact with anything at all.

00:02:04.910 --> 00:02:05.860
That would be impossible.

00:02:05.860 --> 00:02:07.720
It just means that it's isolated,

00:02:07.720 --> 00:02:10.550
and this is the key part from the rial thing.

00:02:10.550 --> 00:02:13.380
This is where our mock objects come into the picture.

00:02:13.380 --> 00:02:17.040
Using mark objects lets us provide substitutes for the real thing.

00:02:17.040 --> 00:02:21.960
For those so called collaborators on its through these substitutes these mock objects that

00:02:21.960 --> 00:02:24.160
we can start to get scientific about our testing,

00:02:24.160 --> 00:02:28.390
we can control how we want the mark objects to behave during our tests.

00:02:28.390 --> 00:02:29.130
We could,

00:02:29.130 --> 00:02:29.660
for example,

00:02:29.660 --> 00:02:34.450
provide a mock object to simulate a database probably more likely a GOP a repository being

00:02:34.450 --> 00:02:35.250
in Spring World,

00:02:35.250 --> 00:02:35.600
say,

00:02:35.600 --> 00:02:37.660
And she was that for a particular test,

00:02:37.660 --> 00:02:40.580
that Mark object will throw a sequel exception when it's accessed.

00:02:40.580 --> 00:02:43.080
This allows us to test execution path.

00:02:43.080 --> 00:02:45.700
That is the flow of our application logic in the class in the test,

00:02:45.700 --> 00:02:47.600
when we encounter that kind of exception,

00:02:47.600 --> 00:02:49.260
In another test case,

00:02:49.260 --> 00:02:51.310
we might decide that we want to test a happy flow.

00:02:51.310 --> 00:02:53.000
So we set up the mock repository,

00:02:53.000 --> 00:02:55.970
object to play nicely in that one and return some can.

00:02:55.970 --> 00:02:58.880
Results were happy for the class and attest to work within that test.

00:02:58.880 --> 00:03:04.540
So the isolation angle is really that the only code that Israel when the test is executing

00:03:04.540 --> 00:03:06.060
is the class under test.

00:03:06.060 --> 00:03:07.960
This is the real code will be running.

00:03:07.960 --> 00:03:09.210
But the collaborators,

00:03:09.210 --> 00:03:11.630
it interacts with those collaborators around it.

00:03:11.630 --> 00:03:12.770
These will be fake,

00:03:12.770 --> 00:03:13.800
our standings,

00:03:13.800 --> 00:03:16.320
those mock objects we've been talking about on.

00:03:16.320 --> 00:03:17.800
By controlling these mark objects,

00:03:17.800 --> 00:03:22.080
we can start to build up a suite of tests where we just change one thing at a time on

00:03:22.080 --> 00:03:26.150
observe the results as we're doing so and testing those different flows through our code,

00:03:26.150 --> 00:03:28.150
making sure we're getting the right results.

00:03:28.150 --> 00:03:31.570
Now that we have this notion of isolation in our heads,

00:03:31.570 --> 00:03:33.570
let's see what further benefits this brings.

00:03:33.570 --> 00:03:34.390
Well,

00:03:34.390 --> 00:03:36.480
because we're detached from anything external,

00:03:36.480 --> 00:03:38.600
it means that our tests execute quickly.

00:03:38.600 --> 00:03:40.160
That's another key aspect.

00:03:40.160 --> 00:03:41.450
Speed of execution.

00:03:41.450 --> 00:03:46.050
We want our unit tests to run as quickly as possible because when we do that will be

00:03:46.050 --> 00:03:48.200
continually running them as we changed the code based.

00:03:48.200 --> 00:03:50.250
Why the implement the feature or fix the defect?

00:03:50.250 --> 00:03:51.540
If they're quick,

00:03:51.540 --> 00:03:53.450
this is the benefit will actually be run.

00:03:53.450 --> 00:03:57.850
We want to be running our tests not as an afterthought just before we commit our code,

00:03:57.850 --> 00:04:02.020
but continually as we develop run unit tests should be part of your developer.

00:04:02.020 --> 00:04:04.510
Workflow on that could be either through running them in the i.

00:04:04.510 --> 00:04:04.760
D.

00:04:04.760 --> 00:04:05.460
When you choose,

00:04:05.460 --> 00:04:07.650
or in them from the Maven or Gretel build.

00:04:07.650 --> 00:04:08.340
Now,

00:04:08.340 --> 00:04:12.650
when others extreme is watching for source file changes to trigger unit test execution,

00:04:12.650 --> 00:04:13.940
although you can do that,

00:04:13.940 --> 00:04:18.150
but we need to be judicious and run them as much as possible when developing its another

00:04:18.150 --> 00:04:19.020
tool in our developer.

00:04:19.020 --> 00:04:20.050
Talk it to each other.

00:04:20.050 --> 00:04:23.390
We stay on track and can move fast without breaking things in the process.

00:04:23.390 --> 00:04:27.490
Also related to isolation is that test runs should be consistent.

00:04:27.490 --> 00:04:29.610
No matter whether we run a particular test.

00:04:29.610 --> 00:04:32.000
Once 10,000 or a 1,000,000 times,

00:04:32.000 --> 00:04:37.400
we should get the same results each time Fission depend on when it's run where it's run or

00:04:37.400 --> 00:04:40.810
on which operating system it's room don't do anything in your Tesco,

00:04:40.810 --> 00:04:42.580
which is specific to certain times of day,

00:04:42.580 --> 00:04:43.290
for example,

00:04:43.290 --> 00:04:45.650
or specific to which type of machine it's on.

00:04:45.650 --> 00:04:46.390
So,

00:04:46.390 --> 00:04:47.050
for example,

00:04:47.050 --> 00:04:49.930
your local workstation are running this part of a continuous bill process.

00:04:49.930 --> 00:04:53.760
An assistant like Jenkins now keep things simple and repeatable.

00:04:53.760 --> 00:04:54.570
After all,

00:04:54.570 --> 00:04:57.370
if you can't predict how your test will react based on external factors,

00:04:57.370 --> 00:05:00.050
it's not that much uses It Also,

00:05:00.050 --> 00:05:00.500
Unit says,

00:05:00.500 --> 00:05:03.730
should be reliable to this is related to consistency.

00:05:03.730 --> 00:05:08.700
But this session only pass if one in a certain order or when run together or be a release

00:05:08.700 --> 00:05:09.230
one first,

00:05:09.230 --> 00:05:11.090
and this other test will work type scenario.

00:05:11.090 --> 00:05:13.570
There should be no concern for ordering on.

00:05:13.570 --> 00:05:14.150
Moreover,

00:05:14.150 --> 00:05:15.950
the dependencies between tests.

00:05:15.950 --> 00:05:16.440
That's the key.

00:05:16.440 --> 00:05:17.500
Take away for this one.

00:05:17.500 --> 00:05:18.710
Finally,

00:05:18.710 --> 00:05:21.540
if you put all these things together thes special ingredients,

00:05:21.540 --> 00:05:22.050
if you will,

00:05:22.050 --> 00:05:23.790
they'll make sure that you're actually in the rooming.

00:05:23.790 --> 00:05:25.990
The tests regularly in this weather,

00:05:25.990 --> 00:05:28.550
an early warning mechanism If you ring them regularly,

00:05:28.550 --> 00:05:31.450
you can correct your steps as soon as some Tesco starts failing,

00:05:31.450 --> 00:05:33.830
whereas if you run them at the end,

00:05:33.830 --> 00:05:37.630
you'll have a batch of test which don't work and then it will be difficult to find out

00:05:37.630 --> 00:05:38.700
which changes broke,

00:05:38.700 --> 00:05:41.120
which tests when you test regularly,

00:05:41.120 --> 00:05:43.540
card quickly and backtrack swiftly when needed.

00:05:43.540 --> 00:05:44.490
In this way,

00:05:44.490 --> 00:05:48.100
your unit tests at the compass to keep your coding direction going the right way.

