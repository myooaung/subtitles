WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.610
in this video,

00:00:02.610 --> 00:00:05.550
we're going to review the project structure that was created for us by the quick start

00:00:05.550 --> 00:00:06.800
archetype in the previous video.

00:00:06.800 --> 00:00:08.360
I just have a bit of another view of it,

00:00:08.360 --> 00:00:09.420
so we know what goes where.

00:00:09.420 --> 00:00:12.170
So in the my app generated project,

00:00:12.170 --> 00:00:16.360
you can see here we have the source folder on directly underneath the source folder.

00:00:16.360 --> 00:00:18.090
We have two subdirectories.

00:00:18.090 --> 00:00:19.650
We have men and test.

00:00:19.650 --> 00:00:21.960
So in source Main Java.

00:00:21.960 --> 00:00:24.550
This is where the production code for the application would live.

00:00:24.550 --> 00:00:25.260
Source.

00:00:25.260 --> 00:00:27.720
Hman resources would hold any class the resources it needs,

00:00:27.720 --> 00:00:28.890
the use and production.

00:00:28.890 --> 00:00:32.250
And it's a sibling folder tonight into the words on the same level.

00:00:32.250 --> 00:00:35.620
We have these tests of directory on a game.

00:00:35.620 --> 00:00:37.360
We have job underneath there.

00:00:37.360 --> 00:00:40.650
So we've got source Main Java,

00:00:40.650 --> 00:00:44.150
which which is where our production source codes gonna live.

00:00:44.150 --> 00:00:47.750
And then we have source test java,

00:00:47.750 --> 00:00:50.980
which is where our test source code is gonna live.

00:00:50.980 --> 00:00:54.690
You'll notice as well Intel Aji color curtsies for us.

00:00:54.690 --> 00:00:56.840
You can see here we've got the blue directory,

00:00:56.840 --> 00:00:59.880
which means a production source code folder on Dhere.

00:00:59.880 --> 00:01:01.540
We can see we've got the green directory,

00:01:01.540 --> 00:01:03.180
which means test source folder.

00:01:03.180 --> 00:01:08.110
Now it's important that we separate these two sauce trees apart from each other so the

00:01:08.110 --> 00:01:11.940
production source can live separately from the test cells Could this is so but it makes it

00:01:11.940 --> 00:01:15.650
easy to compile and bundle the different source sets that is needed.

00:01:15.650 --> 00:01:16.630
But also,

00:01:16.630 --> 00:01:18.150
while we're on the subject of separation,

00:01:18.150 --> 00:01:22.050
we also need to ensure that the J only dependency which were brought in here is a test

00:01:22.050 --> 00:01:23.180
sculpt dependency.

00:01:23.180 --> 00:01:25.150
So if we just put this in here,

00:01:25.150 --> 00:01:31.130
I've got for external tag.

00:01:31.130 --> 00:01:31.600
We can see here.

00:01:31.600 --> 00:01:36.950
We've got skop and then we can just go down on insert test.

00:01:36.950 --> 00:01:38.690
Now,

00:01:38.690 --> 00:01:43.310
you won't see anything change here because this is a list of the complete set of libraries

00:01:43.310 --> 00:01:46.390
to this project references regardless of the class path type.

00:01:46.390 --> 00:01:47.240
However,

00:01:47.240 --> 00:01:49.650
by putting this skirt test tag in here,

00:01:49.650 --> 00:01:53.240
we're ensuring the June it will only ever be used and accessible to code,

00:01:53.240 --> 00:01:54.640
which is in this toss test job.

00:01:54.640 --> 00:01:55.090
A folder,

00:01:55.090 --> 00:01:55.560
in other words,

00:01:55.560 --> 00:01:57.800
will never be bundled with our production applications.

00:01:57.800 --> 00:01:58.260
That one,

00:01:58.260 --> 00:01:59.010
for example,

00:01:59.010 --> 00:02:02.320
exist in a Web in lib directory Inside a war file.

00:02:02.320 --> 00:02:04.820
If you were creating Web applications to take one example.

00:02:04.820 --> 00:02:08.990
So this skirt up test really means that it's only ever used for the test source.

00:02:08.990 --> 00:02:09.230
Good.

00:02:09.230 --> 00:02:10.980
And that's exactly what we want as well.

00:02:10.980 --> 00:02:14.970
Similar when we introduce Mosquito later in the course would also put this in as a test

00:02:14.970 --> 00:02:16.270
sculpt dependency as well.

00:02:16.270 --> 00:02:17.140
And finally,

00:02:17.140 --> 00:02:21.080
because Jay and it depends on Ham Crest to be able to function than ham,

00:02:21.080 --> 00:02:22.480
Chris is also sculptures.

00:02:22.480 --> 00:02:24.970
The test dependencies so inherits the same scope.

00:02:24.970 --> 00:02:26.550
That's the dependency that's pulling it in.

00:02:26.550 --> 00:02:30.520
So while this stuff about dependency scopes might not seem that interesting at this current

00:02:30.520 --> 00:02:30.970
time,

00:02:30.970 --> 00:02:34.600
it's really important that you get the right scope whenever you're importing test libraries

00:02:34.600 --> 00:02:37.770
to make sure that you don't accidentally include those test libraries in your production

00:02:37.770 --> 00:02:38.020
source.

00:02:38.020 --> 00:02:38.270
Good.

00:02:38.270 --> 00:02:39.210
Anyway,

00:02:39.210 --> 00:02:41.830
that was a nice overview of the generated project structure,

00:02:41.830 --> 00:02:45.300
and now we've got a good idea where we can find things so it's move forward of this and

00:02:45.300 --> 00:02:47.060
start using your unit in the next videos

