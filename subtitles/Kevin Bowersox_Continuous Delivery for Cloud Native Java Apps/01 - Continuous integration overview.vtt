WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Continuous integration or CI,

2
00:00:02.008 --> 00:00:05.008
helps teams increase the quality of their code and keeps

3
00:00:05.008 --> 00:00:10.006
their code base in a working state that's always deployable.

4
00:00:10.006 --> 00:00:13.001
Within our continuous delivery process,

5
00:00:13.001 --> 00:00:16.004
the CI phase is triggered each time code is merged

6
00:00:16.004 --> 00:00:18.005
into the repository.

7
00:00:18.005 --> 00:00:21.000
For teams experienced with the practice,

8
00:00:21.000 --> 00:00:24.002
this might occur many times per day or several times

9
00:00:24.002 --> 00:00:26.002
each hour.

10
00:00:26.002 --> 00:00:28.004
By merging their code this frequently,

11
00:00:28.004 --> 00:00:31.003
teams avoid the integration of large change sets

12
00:00:31.003 --> 00:00:33.007
towards the end of the project.

13
00:00:33.007 --> 00:00:36.005
That's because they're always integrating their code.

14
00:00:36.005 --> 00:00:39.006
So they never encounter this situation.

15
00:00:39.006 --> 00:00:43.000
The continuous integration process is often modeled

16
00:00:43.000 --> 00:00:45.006
as a separate pipeline that has the goal

17
00:00:45.006 --> 00:00:48.001
of producing an artifact.

18
00:00:48.001 --> 00:00:50.000
For modern Java applications,

19
00:00:50.000 --> 00:00:53.006
this is a container image that gets stored within a registry

20
00:00:53.006 --> 00:00:57.003
where it can be retrieved for deployment.

21
00:00:57.003 --> 00:01:00.005
The CI pipeline is executed by a platform

22
00:01:00.005 --> 00:01:02.008
known as a continuous integration server,

23
00:01:02.008 --> 00:01:05.006
but sometimes you'll hear it referred to as a build server

24
00:01:05.006 --> 00:01:07.007
or an automation server.

25
00:01:07.007 --> 00:01:10.002
In our course, we'll be using Jenkins.

26
00:01:10.002 --> 00:01:13.006
It automates and orchestrates the execution of a pipeline

27
00:01:13.006 --> 00:01:16.007
script that declares the tasks necessary to build,

28
00:01:16.007 --> 00:01:19.006
verify, and package our software.

29
00:01:19.006 --> 00:01:22.003
These tasks often use third-party plugins

30
00:01:22.003 --> 00:01:24.000
to perform their work.

31
00:01:24.000 --> 00:01:27.002
So, you'll typically find plugins that integrate build tools

32
00:01:27.002 --> 00:01:30.006
like Maven or that perform specialized tasks

33
00:01:30.006 --> 00:01:35.000
like checking that code coverage meets certain standards.

34
00:01:35.000 --> 00:01:38.002
Let's take a look at some steps you might find declared

35
00:01:38.002 --> 00:01:40.009
in a simple CI pipeline.

36
00:01:40.009 --> 00:01:43.005
When a CI server detects a code change,

37
00:01:43.005 --> 00:01:46.005
it pulls an exact copy of the repository code

38
00:01:46.005 --> 00:01:48.007
onto a clean environment.

39
00:01:48.007 --> 00:01:52.001
Here, a build tool like Maven compiles and packages

40
00:01:52.001 --> 00:01:53.006
the software.

41
00:01:53.006 --> 00:01:56.007
There's two really important points to highlight here.

42
00:01:56.007 --> 00:01:59.000
The source code used to perform the build

43
00:01:59.000 --> 00:02:02.008
matches exactly what's in the code repository and the build

44
00:02:02.008 --> 00:02:06.000
is performed on a clean server.

45
00:02:06.000 --> 00:02:08.007
Since the build occurs on a neutral server,

46
00:02:08.007 --> 00:02:11.004
it can detect any problems that might not appear

47
00:02:11.004 --> 00:02:13.005
on a local workstation.

48
00:02:13.005 --> 00:02:16.000
So if you forget to check a file into Git,

49
00:02:16.000 --> 00:02:18.006
it's going to break your build.

50
00:02:18.006 --> 00:02:19.009
After the code is built,

51
00:02:19.009 --> 00:02:22.009
automated tests are executed against the binaries

52
00:02:22.009 --> 00:02:25.007
to ensure they function as expected.

53
00:02:25.007 --> 00:02:29.005
If those tests pass, the code is then analyzed

54
00:02:29.005 --> 00:02:32.009
using static analysis tools like SonarQube.

55
00:02:32.009 --> 00:02:35.008
It can provide reports that help us measure and enforce

56
00:02:35.008 --> 00:02:37.006
code quality.

57
00:02:37.006 --> 00:02:40.003
If the software meets the quality standards,

58
00:02:40.003 --> 00:02:42.009
it's then packaged into a container image,

59
00:02:42.009 --> 00:02:45.009
which is stored in a container registry where it waits

60
00:02:45.009 --> 00:02:48.002
deployment to an environment.

61
00:02:48.002 --> 00:02:51.003
Through automation, the CI pipeline standardizes

62
00:02:51.003 --> 00:02:54.002
the repeatable process which builds, verifies,

63
00:02:54.002 --> 00:02:56.008
and packages our software.

64
00:02:56.008 --> 00:03:00.001
This is what enables the software team to perform so many

65
00:03:00.001 --> 00:03:02.006
frequent builds and keeps the flow of changes

66
00:03:02.006 --> 00:03:05.000
to our software constant.

