WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Presenter] Continuous delivery is closely related

2
00:00:03.000 --> 00:00:05.006
to the practices of continuous integration

3
00:00:05.006 --> 00:00:07.008
and continuous deployment.

4
00:00:07.008 --> 00:00:10.004
These three concepts commonly fall under

5
00:00:10.004 --> 00:00:13.005
the umbrella of the term CICD.

6
00:00:13.005 --> 00:00:14.008
It gets a little bit confusing

7
00:00:14.008 --> 00:00:18.004
because continuous delivery and continuous deployment

8
00:00:18.004 --> 00:00:22.004
are often used interchangeably and have the same acronym.

9
00:00:22.004 --> 00:00:25.001
So let's first unpack these terms

10
00:00:25.001 --> 00:00:27.002
then we'll talk about the different ways

11
00:00:27.002 --> 00:00:29.005
that people use them.

12
00:00:29.005 --> 00:00:32.001
When teams practice continuous integration,

13
00:00:32.001 --> 00:00:33.007
they develop small changes

14
00:00:33.007 --> 00:00:35.000
that are frequently merged

15
00:00:35.000 --> 00:00:38.005
into a shared branch in their code repository.

16
00:00:38.005 --> 00:00:41.004
The goal is for developers to commit to this branch

17
00:00:41.004 --> 00:00:43.001
at least once per day,

18
00:00:43.001 --> 00:00:47.002
but ideally they're checking in multiple times each day.

19
00:00:47.002 --> 00:00:51.002
Each of these small commits triggers the automated pipeline,

20
00:00:51.002 --> 00:00:54.001
which pulls the source code from the repository

21
00:00:54.001 --> 00:00:58.001
onto a separate server where it's compiled and tested.

22
00:00:58.001 --> 00:01:01.005
If an issue is detected by the automated tests

23
00:01:01.005 --> 00:01:03.008
or the automated build breaks,

24
00:01:03.008 --> 00:01:07.007
the developer is notified immediately by the pipeline.

25
00:01:07.007 --> 00:01:10.003
At this point, getting the code base back

26
00:01:10.003 --> 00:01:12.008
to a working state becomes the top priority

27
00:01:12.008 --> 00:01:16.003
and they stop everything they're working on to fix it.

28
00:01:16.003 --> 00:01:18.001
If the test pass,

29
00:01:18.001 --> 00:01:20.006
the software's packaged into an artifact

30
00:01:20.006 --> 00:01:23.007
and placed into a repository.

31
00:01:23.007 --> 00:01:27.000
After the CI process builds this artifact,

32
00:01:27.000 --> 00:01:29.006
continuous delivery and continuous deployment

33
00:01:29.006 --> 00:01:30.008
enter the picture.

34
00:01:30.008 --> 00:01:32.004
However, these practices

35
00:01:32.004 --> 00:01:34.005
are a little bit less straightforward.

36
00:01:34.005 --> 00:01:37.003
In general, both concepts relate

37
00:01:37.003 --> 00:01:39.008
to the automated steps within a pipeline

38
00:01:39.008 --> 00:01:42.003
that deliver the packaged artifact

39
00:01:42.003 --> 00:01:44.000
produced by the CI process

40
00:01:44.000 --> 00:01:46.009
into the production environment.

41
00:01:46.009 --> 00:01:48.004
The difference between the two

42
00:01:48.004 --> 00:01:52.003
is how much automation is built into the pipeline.

43
00:01:52.003 --> 00:01:54.006
Teams practicing continuous delivery

44
00:01:54.006 --> 00:01:58.001
will automate everything but the last step in the process

45
00:01:58.001 --> 00:02:01.007
that deploys the artifact into production.

46
00:02:01.007 --> 00:02:03.001
With continuous delivery,

47
00:02:03.001 --> 00:02:05.004
this step must be manually triggered,

48
00:02:05.004 --> 00:02:08.007
typically by pushing a button or merging a branch,

49
00:02:08.007 --> 00:02:12.008
which causes the release of the new version into production.

50
00:02:12.008 --> 00:02:15.002
Continuous deployment is very similar.

51
00:02:15.002 --> 00:02:16.007
However, that last step

52
00:02:16.007 --> 00:02:19.002
which deploys the software into production,

53
00:02:19.002 --> 00:02:21.007
it's fully automated.

54
00:02:21.007 --> 00:02:24.004
One way to picture it is to think of each practice

55
00:02:24.004 --> 00:02:26.003
taking the automation further

56
00:02:26.003 --> 00:02:30.004
or extending it further into the delivery process.

57
00:02:30.004 --> 00:02:33.001
There's a lot of ways we can think about it

58
00:02:33.001 --> 00:02:35.002
and often there's a bit of confusion

59
00:02:35.002 --> 00:02:38.004
between continuous delivery and continuous deployment,

60
00:02:38.004 --> 00:02:40.003
because the two terms are used

61
00:02:40.003 --> 00:02:42.008
in a variety of different ways.

62
00:02:42.008 --> 00:02:45.007
Sometimes you'll hear continuous integration,

63
00:02:45.007 --> 00:02:47.005
delivery and deployment referred to

64
00:02:47.005 --> 00:02:49.009
as separate steps or processes

65
00:02:49.009 --> 00:02:53.007
that execute sequentially, one after the other.

66
00:02:53.007 --> 00:02:56.002
Other times, you'll hear continuous delivery

67
00:02:56.002 --> 00:02:59.004
and deployment referred to as interchangeable processes

68
00:02:59.004 --> 00:03:01.007
where we can select one or the other

69
00:03:01.007 --> 00:03:05.004
to perform after continuous integration.

70
00:03:05.004 --> 00:03:07.000
To add to the confusion,

71
00:03:07.000 --> 00:03:09.005
continuous delivery is sometimes referred to

72
00:03:09.005 --> 00:03:11.007
as an overarching process

73
00:03:11.007 --> 00:03:14.002
where continuous integration and deployment

74
00:03:14.002 --> 00:03:17.005
are executed as sub-processes within it.

75
00:03:17.005 --> 00:03:20.005
In discussions regarding CICD,

76
00:03:20.005 --> 00:03:23.002
it's important to be flexible with the terminology,

77
00:03:23.002 --> 00:03:26.001
because these processes have unique meanings

78
00:03:26.001 --> 00:03:29.002
for different teams and organizations.

79
00:03:29.002 --> 00:03:32.006
It's tempting to look for one official CICD pattern

80
00:03:32.006 --> 00:03:34.008
that applies in every scenario,

81
00:03:34.008 --> 00:03:38.002
but it's just a path that leads to frustration

82
00:03:38.002 --> 00:03:40.000
because it doesn't exist.

