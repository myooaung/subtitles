WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] Before diving into the techniques

2
00:00:02.006 --> 00:00:06.004
and technologies used to deliver Java applications,

3
00:00:06.004 --> 00:00:08.004
let's discuss the big picture

4
00:00:08.004 --> 00:00:09.009
of what we're trying to achieve

5
00:00:09.009 --> 00:00:13.002
by practicing continuous delivery.

6
00:00:13.002 --> 00:00:16.000
Continuous delivery is a bit of a mindset shift

7
00:00:16.000 --> 00:00:17.002
from what you might've learned

8
00:00:17.002 --> 00:00:21.000
about delivering software early in your career.

9
00:00:21.000 --> 00:00:22.006
In my college coursework,

10
00:00:22.006 --> 00:00:24.009
I was taught the five sequential phases

11
00:00:24.009 --> 00:00:27.007
of the software development lifecycle.

12
00:00:27.007 --> 00:00:30.003
The first three phases focused on building

13
00:00:30.003 --> 00:00:31.009
the entire product

14
00:00:31.009 --> 00:00:34.002
and then the final two phases would test

15
00:00:34.002 --> 00:00:36.008
and deploy everything that was built.

16
00:00:36.008 --> 00:00:38.009
This approach worked in the past,

17
00:00:38.009 --> 00:00:41.003
but in today's fast-paced environment,

18
00:00:41.003 --> 00:00:43.007
it has some drawbacks.

19
00:00:43.007 --> 00:00:46.008
First, towards the end of the development phase,

20
00:00:46.008 --> 00:00:48.008
all the code was merged together

21
00:00:48.008 --> 00:00:51.003
in one big integration effort.

22
00:00:51.003 --> 00:00:53.004
This could take weeks or months

23
00:00:53.004 --> 00:00:57.004
until you actually had a working piece of software.

24
00:00:57.004 --> 00:01:00.002
Second, most of the feedback on the product

25
00:01:00.002 --> 00:01:03.004
came later in the process during the testing phase

26
00:01:03.004 --> 00:01:05.008
where it takes longer and costs more

27
00:01:05.008 --> 00:01:08.006
to fix an issue with the code.

28
00:01:08.006 --> 00:01:11.005
Continuous delivery challenges this idea

29
00:01:11.005 --> 00:01:14.001
that software should be developed, tested

30
00:01:14.001 --> 00:01:18.000
and delivered sequentially in large chunks.

31
00:01:18.000 --> 00:01:21.003
It introduces a set of practices that teams use

32
00:01:21.003 --> 00:01:23.008
to evolve their software gradually

33
00:01:23.008 --> 00:01:28.006
through the frequent delivery of small incremental changes.

34
00:01:28.006 --> 00:01:31.007
That means you'll be performing releases more often,

35
00:01:31.007 --> 00:01:33.009
which can sound a bit scary,

36
00:01:33.009 --> 00:01:38.004
but automation can help you safely repeat the practice.

37
00:01:38.004 --> 00:01:41.005
All of these changes are routinely delivered using

38
00:01:41.005 --> 00:01:45.005
an automated pipeline that builds, tests and deploys

39
00:01:45.005 --> 00:01:48.000
each new version of the software.

40
00:01:48.000 --> 00:01:50.009
That part about testing is important

41
00:01:50.009 --> 00:01:55.001
because it validates every change we make to the software.

42
00:01:55.001 --> 00:01:57.001
This helps ensure that the pipeline

43
00:01:57.001 --> 00:02:02.001
only delivers working software that's ready for release.

44
00:02:02.001 --> 00:02:04.003
When teams follow these practices,

45
00:02:04.003 --> 00:02:07.000
it changes their delivery cadence.

46
00:02:07.000 --> 00:02:09.007
Here, you see a typical quarterly cadence,

47
00:02:09.007 --> 00:02:11.008
which has some drawbacks.

48
00:02:11.008 --> 00:02:13.009
The cycle time is extended,

49
00:02:13.009 --> 00:02:16.006
so we're tempted to cram a bunch of changes

50
00:02:16.006 --> 00:02:20.007
into the iteration and release them all at once.

51
00:02:20.007 --> 00:02:22.003
This increases the probability

52
00:02:22.003 --> 00:02:26.001
that something will go wrong at deployment time.

53
00:02:26.001 --> 00:02:29.001
Also, the feedback that we receive about the software

54
00:02:29.001 --> 00:02:32.005
from acceptance testers and users is limited

55
00:02:32.005 --> 00:02:35.005
because the changes only become visible towards

56
00:02:35.005 --> 00:02:39.008
the end of the cycle right before we release everything.

57
00:02:39.008 --> 00:02:41.005
With continuous delivery,

58
00:02:41.005 --> 00:02:45.002
teams fall into a cadence where releasing software changes

59
00:02:45.002 --> 00:02:47.007
becomes a frequent part of their routine.

60
00:02:47.007 --> 00:02:51.007
It's not this big event that everybody gets stressed over.

61
00:02:51.007 --> 00:02:54.005
Each change can be released independently

62
00:02:54.005 --> 00:02:57.001
or as part of a small batch.

63
00:02:57.001 --> 00:03:00.001
This helps reduce the potential for things to go wrong

64
00:03:00.001 --> 00:03:02.008
when we deploy the software.

65
00:03:02.008 --> 00:03:04.002
The shorter cycle times

66
00:03:04.002 --> 00:03:07.007
and introduction of automation creates tremendous benefits

67
00:03:07.007 --> 00:03:10.007
for teams and businesses.

68
00:03:10.007 --> 00:03:13.008
It increases the speed at which we deliver software

69
00:03:13.008 --> 00:03:17.009
and allows new features to come to market faster.

70
00:03:17.009 --> 00:03:21.006
It also improves quality because automated testing

71
00:03:21.006 --> 00:03:24.000
and increased visibility of the software

72
00:03:24.000 --> 00:03:27.003
creates feedback loops that provide information

73
00:03:27.003 --> 00:03:31.005
we can use to improve the product constantly.

74
00:03:31.005 --> 00:03:33.006
By automating deployment procedures

75
00:03:33.006 --> 00:03:36.004
and exercising them more frequently,

76
00:03:36.004 --> 00:03:39.008
teams become comfortable performing releases.

77
00:03:39.008 --> 00:03:44.005
This helps increase the overall stability of the system.

78
00:03:44.005 --> 00:03:47.001
When applied carefully, continuous delivery

79
00:03:47.001 --> 00:03:49.003
is an approach for delivering software

80
00:03:49.003 --> 00:03:51.009
that will help your team more quickly

81
00:03:51.009 --> 00:03:55.006
and safely provide value to your business.

82
00:03:55.006 --> 00:03:59.002
Adopting the approach starts with shifting your mindset.

83
00:03:59.002 --> 00:04:00.007
So in our next lesson,

84
00:04:00.007 --> 00:04:03.001
we'll explore the underlying principles

85
00:04:03.001 --> 00:04:05.000
of continuous delivery.

