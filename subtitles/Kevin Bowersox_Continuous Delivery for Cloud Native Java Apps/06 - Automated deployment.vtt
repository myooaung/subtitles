WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Narrator] To automate deployments

2
00:00:01.008 --> 00:00:05.007
to our Kubernetes cluster, we're going to use Argo CD.

3
00:00:05.007 --> 00:00:08.007
It's a continuous deployment tool built for Kubernetes

4
00:00:08.007 --> 00:00:11.001
that uses a GitOps approach.

5
00:00:11.001 --> 00:00:12.008
To perform deployments,

6
00:00:12.008 --> 00:00:16.005
Argo CD places a controller inside the cluster.

7
00:00:16.005 --> 00:00:18.009
The controller continuously monitors

8
00:00:18.009 --> 00:00:21.001
a set of Kubernetes manifests

9
00:00:21.001 --> 00:00:24.001
stored inside of a Git repository.

10
00:00:24.001 --> 00:00:26.004
So, in a manifest, inside of Git,

11
00:00:26.004 --> 00:00:28.003
we might identify a container image

12
00:00:28.003 --> 00:00:30.005
that contains our microservice

13
00:00:30.005 --> 00:00:33.003
inside the specification for a pod.

14
00:00:33.003 --> 00:00:36.003
The controller reads that information

15
00:00:36.003 --> 00:00:38.008
and then communicates any new resources

16
00:00:38.008 --> 00:00:41.003
that need to be created inside the cluster

17
00:00:41.003 --> 00:00:43.005
to the control plane.

18
00:00:43.005 --> 00:00:46.001
The control plane sends those instructions

19
00:00:46.001 --> 00:00:50.006
to the nodes in the cluster so they can apply the resources.

20
00:00:50.006 --> 00:00:54.000
This causes any images specified in the resources

21
00:00:54.000 --> 00:00:55.006
to be pulled from the registry

22
00:00:55.006 --> 00:00:59.004
and spun up as containers on the worker nodes.

23
00:00:59.004 --> 00:01:02.009
In a nutshell, that's how Argo CD can automate

24
00:01:02.009 --> 00:01:05.006
the deployment of our containerized applications

25
00:01:05.006 --> 00:01:07.007
to Kubernetes.

26
00:01:07.007 --> 00:01:11.006
Within our lab environment, we have two Kubernetes clusters

27
00:01:11.006 --> 00:01:13.008
running with Argo CD installed.

28
00:01:13.008 --> 00:01:17.000
One for staging and one for production.

29
00:01:17.000 --> 00:01:20.007
We'll configure Argo CD to monitor the deploy repository

30
00:01:20.007 --> 00:01:23.002
that was created earlier in the course

31
00:01:23.002 --> 00:01:26.008
when we established our GitHub organization.

32
00:01:26.008 --> 00:01:28.009
During the setup for Argo CD,

33
00:01:28.009 --> 00:01:32.001
we'll configure it to monitor specific Git branches

34
00:01:32.001 --> 00:01:36.003
and the respect of customize overlay for each cluster.

35
00:01:36.003 --> 00:01:39.001
The staging cluster will monitor the main branch

36
00:01:39.001 --> 00:01:40.004
and the production cluster

37
00:01:40.004 --> 00:01:43.007
will monitor a branch named release.

38
00:01:43.007 --> 00:01:46.009
When we build a new container image, our deployment pipeline

39
00:01:46.009 --> 00:01:50.001
is configured to update the base customization

40
00:01:50.001 --> 00:01:53.009
in the main branch with the new container version.

41
00:01:53.009 --> 00:01:58.006
This will cause Argo CD to deploy it to the staging cluster.

42
00:01:58.006 --> 00:02:02.001
To deploy and promote new container images to production,

43
00:02:02.001 --> 00:02:05.009
we'll then merge the main branch into the release branch.

44
00:02:05.009 --> 00:02:09.003
We can manually perform this merge using a poll request

45
00:02:09.003 --> 00:02:12.001
or the pipeline can do the merge for us

46
00:02:12.001 --> 00:02:14.005
and automate the production deployment.

47
00:02:14.005 --> 00:02:17.006
Either way, Argo CD will detect the changes

48
00:02:17.006 --> 00:02:20.005
and release them to the production cluster.

49
00:02:20.005 --> 00:02:21.008
As you've probably noticed,

50
00:02:21.008 --> 00:02:24.003
running microservices within containers

51
00:02:24.003 --> 00:02:26.004
introduces quite a bit of complexity

52
00:02:26.004 --> 00:02:28.009
into our continuous delivery process.

53
00:02:28.009 --> 00:02:31.007
There certainly a lot of work upfront,

54
00:02:31.007 --> 00:02:33.008
but once you've established your pipeline,

55
00:02:33.008 --> 00:02:36.006
it significantly increases the velocity

56
00:02:36.006 --> 00:02:38.001
at which you can deliver changes

57
00:02:38.001 --> 00:02:41.000
to your modern Java applications.

