WEBVTT
1
00:00:00.001 --> 00:00:02.004
- [Instructor] The dependency management system

2
00:00:02.004 --> 00:00:05.004
is one of Mavens, most powerful features.

3
00:00:05.004 --> 00:00:08.009
By default, it pulls dependencies from Maven Central.

4
00:00:08.009 --> 00:00:10.006
So it's a great place to look

5
00:00:10.006 --> 00:00:13.002
when you need to include a library in your project,

6
00:00:13.002 --> 00:00:15.003
like Apache Commons.

7
00:00:15.003 --> 00:00:17.007
Let's go ahead and we'll add that dependency

8
00:00:17.007 --> 00:00:20.004
into our Maven project.

9
00:00:20.004 --> 00:00:23.009
To do that, we can copy this snippet of XML.

10
00:00:23.009 --> 00:00:25.007
Now let's first talk about it.

11
00:00:25.007 --> 00:00:28.006
You'll notice it starts with the dependency tag

12
00:00:28.006 --> 00:00:33.000
and then it includes the Maven coordinates within it.

13
00:00:33.000 --> 00:00:35.009
This is how Maven identifies the dependency

14
00:00:35.009 --> 00:00:38.001
it needs to pull from Maven Central.

15
00:00:38.001 --> 00:00:41.002
So let's go ahead, we'll copy that XML.

16
00:00:41.002 --> 00:00:43.008
And then we'll navigate over to Eclipse.

17
00:00:43.008 --> 00:00:47.008
Now, before we just drop that XML inside of our palm,

18
00:00:47.008 --> 00:00:51.003
we need to add a dependencies tag

19
00:00:51.003 --> 00:00:53.009
and then inside the dependencies tag,

20
00:00:53.009 --> 00:00:57.003
we can add the dependencies for our Maven project.

21
00:00:57.003 --> 00:01:01.009
Okay, now our project will include Apache Commons.

22
00:01:01.009 --> 00:01:05.005
Let's talk about one common scenario.

23
00:01:05.005 --> 00:01:09.001
Often an organization will set up their own

24
00:01:09.001 --> 00:01:12.009
artifact repository, so you'll need to configure

25
00:01:12.009 --> 00:01:16.003
your project to pull dependencies from it.

26
00:01:16.003 --> 00:01:18.001
And here's how that's done.

27
00:01:18.001 --> 00:01:21.003
You add a repositories tag and then inside of that,

28
00:01:21.003 --> 00:01:23.002
you add a repository.

29
00:01:23.002 --> 00:01:26.000
Then you'll need to give an ID for the repository.

30
00:01:26.000 --> 00:01:29.005
Let's say something like corporate.

31
00:01:29.005 --> 00:01:32.003
Then you'll need to provide a URL that points

32
00:01:32.003 --> 00:01:37.001
to your organization's internal artifact repository.

33
00:01:37.001 --> 00:01:39.008
Now we're going to stick with Maven Central.

34
00:01:39.008 --> 00:01:44.000
So I'm going to go ahead and remove this XML from our palm.

35
00:01:44.000 --> 00:01:47.008
And then I'll just go ahead and save it.

36
00:01:47.008 --> 00:01:51.006
Okay, so now we got the dependency within our project

37
00:01:51.006 --> 00:01:54.003
and if we expand the Maven dependencies

38
00:01:54.003 --> 00:01:56.005
within the package Explorer,

39
00:01:56.005 --> 00:02:00.005
you'll notice there's the jar file, that includes the code.

40
00:02:00.005 --> 00:02:02.009
Let's go ahead and we'll create a class

41
00:02:02.009 --> 00:02:07.002
that uses some of the code found within Apache Commons.

42
00:02:07.002 --> 00:02:09.005
So here in the new class dialogue,

43
00:02:09.005 --> 00:02:11.009
I'm going to package the class

44
00:02:11.009 --> 00:02:17.000
within the com.linkedin.JavaCD package.

45
00:02:17.000 --> 00:02:21.004
And then I'll just keep it simple and name it application.

46
00:02:21.004 --> 00:02:23.005
All right, so there's our new class.

47
00:02:23.005 --> 00:02:25.008
I can go ahead, add a main method.

48
00:02:25.008 --> 00:02:27.007
And then inside of that main method,

49
00:02:27.007 --> 00:02:30.007
I'm going to print some output to the console

50
00:02:30.007 --> 00:02:34.001
and to do that, I'm going to use the string utils class

51
00:02:34.001 --> 00:02:35.008
from Apache Commons.

52
00:02:35.008 --> 00:02:37.006
It has a capitalized method

53
00:02:37.006 --> 00:02:40.007
that we can use to capitalize a string.

54
00:02:40.007 --> 00:02:44.006
So here I'll just say hello learner, okay.

55
00:02:44.006 --> 00:02:48.006
And that should be capitalized when our application runs.

56
00:02:48.006 --> 00:02:51.000
So now let's head over to the terminal

57
00:02:51.000 --> 00:02:52.009
and here I'll use the Maven wrapper

58
00:02:52.009 --> 00:02:56.005
to package the application.

59
00:02:56.005 --> 00:02:59.008
And there we can see the jar file that our build produced.

60
00:02:59.008 --> 00:03:03.003
You'll notice it's placed in this directory target.

61
00:03:03.003 --> 00:03:07.000
Let's go take a look at that.

62
00:03:07.000 --> 00:03:10.003
The target directory is where by default Maven places,

63
00:03:10.003 --> 00:03:12.008
all of the output from our build.

64
00:03:12.008 --> 00:03:16.003
So there, you can see the compiled application class,

65
00:03:16.003 --> 00:03:19.005
and then down here in the root of the target directory,

66
00:03:19.005 --> 00:03:22.009
we have our jar file that was created.

67
00:03:22.009 --> 00:03:25.006
Let's just hop into the target directory

68
00:03:25.006 --> 00:03:28.001
and we can run our application.

69
00:03:28.001 --> 00:03:29.006
So to do this,

70
00:03:29.006 --> 00:03:33.002
we're going to have to specify the class path

71
00:03:33.002 --> 00:03:37.002
and I've already prepared that so we can run quite easily.

72
00:03:37.002 --> 00:03:39.002
It's a really long command.

73
00:03:39.002 --> 00:03:41.000
Let's go ahead, we'll execute that.

74
00:03:41.000 --> 00:03:43.000
And there we can see hello learner.

75
00:03:43.000 --> 00:03:47.002
And the H in hello is capitalized.

76
00:03:47.002 --> 00:03:51.001
So Mavens dependency management system made it fairly easy

77
00:03:51.001 --> 00:03:53.006
to pull in an external library.

78
00:03:53.006 --> 00:03:57.001
However, just packaging our code in a regular jar

79
00:03:57.001 --> 00:03:59.004
made running an application very tricky

80
00:03:59.004 --> 00:04:03.003
because we needed all of this to handle the classpath.

81
00:04:03.003 --> 00:04:04.006
Spring Boot can help us

82
00:04:04.006 --> 00:04:07.004
by packaging those application dependencies

83
00:04:07.004 --> 00:04:10.001
inside of an executable jar.

84
00:04:10.001 --> 00:04:12.000
Let's move on to our next lesson

85
00:04:12.000 --> 00:04:14.000
and I'll show you how with Maven.

