WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Let's set up our labs so that we can do

2
00:00:02.004 --> 00:00:05.003
some development on the Landon Hotel app.

3
00:00:05.003 --> 00:00:08.001
We'll be doing all of our work within the virtual machine

4
00:00:08.001 --> 00:00:10.002
that we provisioned with Vagrant.

5
00:00:10.002 --> 00:00:12.006
To log in, just click on the Vagrant user

6
00:00:12.006 --> 00:00:15.008
and then, use the password Vagrant.

7
00:00:15.008 --> 00:00:18.008
Inside of the lab, you'll find that the exercise files

8
00:00:18.008 --> 00:00:22.001
for the course have been placed on the desktop.

9
00:00:22.001 --> 00:00:25.001
This directory contains the source code for each of the

10
00:00:25.001 --> 00:00:29.006
microservices that we'll use within the Landon Hotel app.

11
00:00:29.006 --> 00:00:33.006
Let's go ahead and import these projects into Eclipse,

12
00:00:33.006 --> 00:00:36.008
which is also included on the desktop.

13
00:00:36.008 --> 00:00:38.009
Just double-click on the Eclipse folder,

14
00:00:38.009 --> 00:00:44.001
and then, click on this icon to launch the IDE.

15
00:00:44.001 --> 00:00:47.002
Once Eclipse launches, you can import the projects

16
00:00:47.002 --> 00:00:50.004
by going to File, then Import,

17
00:00:50.004 --> 00:00:53.006
and scrolling down within this dialog where you'll find

18
00:00:53.006 --> 00:00:57.001
the Import existing Maven projects option.

19
00:00:57.001 --> 00:00:59.009
Select that and hit Next.

20
00:00:59.009 --> 00:01:02.002
This will open another dialogue where we can

21
00:01:02.002 --> 00:01:05.004
navigate to our exercise files directory.

22
00:01:05.004 --> 00:01:07.004
So click on Browse,

23
00:01:07.004 --> 00:01:10.007
and then, locate the exercise files directory.

24
00:01:10.007 --> 00:01:12.006
You'll notice it already took me there.

25
00:01:12.006 --> 00:01:15.008
Once you've found it, just go ahead and click on Open,

26
00:01:15.008 --> 00:01:17.006
and then, you'll notice that Eclipse

27
00:01:17.006 --> 00:01:20.006
pulls in our different Maven projects that it found

28
00:01:20.006 --> 00:01:22.009
within this directory.

29
00:01:22.009 --> 00:01:26.003
That includes the booking service and the hotel web app.

30
00:01:26.003 --> 00:01:28.001
You'll see that the guest service

31
00:01:28.001 --> 00:01:30.002
and the room service are missing.

32
00:01:30.002 --> 00:01:32.002
That's because they're works in progress

33
00:01:32.002 --> 00:01:34.009
that we'll build and deliver throughout the course.

34
00:01:34.009 --> 00:01:37.004
So for now, just go ahead and click on Finish

35
00:01:37.004 --> 00:01:40.003
to import these two projects.

36
00:01:40.003 --> 00:01:42.007
If we look at the structure of these two projects,

37
00:01:42.007 --> 00:01:45.000
we can tell that they're built with Maven.

38
00:01:45.000 --> 00:01:47.005
That's because they have a pom.xml file

39
00:01:47.005 --> 00:01:49.009
right within their root directory.

40
00:01:49.009 --> 00:01:51.008
Let's take a peek at their configuration

41
00:01:51.008 --> 00:01:55.000
and open up the POM.

42
00:01:55.000 --> 00:01:57.008
The first thing I'll point out about the project

43
00:01:57.008 --> 00:02:00.000
is that it uses Spring,

44
00:02:00.000 --> 00:02:03.009
and I can tell that by the Spring Boot starter parent POM,

45
00:02:03.009 --> 00:02:07.002
which is used by Spring Boot to quickly get us

46
00:02:07.002 --> 00:02:10.002
up and running with the Spring framework.

47
00:02:10.002 --> 00:02:13.004
If we navigate to the dependency hierarchy,

48
00:02:13.004 --> 00:02:16.000
we can see some of the other Spring projects

49
00:02:16.000 --> 00:02:18.004
that are included in this project.

50
00:02:18.004 --> 00:02:22.003
So there you see Spring Data and Spring Webflux.

51
00:02:22.003 --> 00:02:23.009
You'll also notice that

52
00:02:23.009 --> 00:02:27.004
an embedded Tomcat servlet container is included.

53
00:02:27.004 --> 00:02:30.009
We'll use this to run our web application.

54
00:02:30.009 --> 00:02:32.003
Now I want to call your attention

55
00:02:32.003 --> 00:02:34.009
to one more important dependency.

56
00:02:34.009 --> 00:02:38.009
That's the Spring Boot auto configure dependency.

57
00:02:38.009 --> 00:02:42.003
It's used by Spring Boot to automatically provide

58
00:02:42.003 --> 00:02:45.005
some default configuration for the projects

59
00:02:45.005 --> 00:02:49.000
that it detects on our class path.

60
00:02:49.000 --> 00:02:52.001
If we want to see a little bit more about how this works,

61
00:02:52.001 --> 00:02:55.005
let's click on the Overview tab, and from here,

62
00:02:55.005 --> 00:02:59.000
we can see the Spring Boot starter parent POM

63
00:02:59.000 --> 00:03:02.004
by clicking on this button.

64
00:03:02.004 --> 00:03:06.001
You'll notice that the Spring Boot starter parent POM

65
00:03:06.001 --> 00:03:09.002
includes its own parent POM.

66
00:03:09.002 --> 00:03:12.004
And if we want to see the full configuration of both POMs,

67
00:03:12.004 --> 00:03:17.004
we can click on the Effective POM tab.

68
00:03:17.004 --> 00:03:20.002
Now, as we scroll down in this file,

69
00:03:20.002 --> 00:03:23.004
you'll start to notice all these different versions

70
00:03:23.004 --> 00:03:25.009
for different libraries that we might include

71
00:03:25.009 --> 00:03:28.001
within a Spring project.

72
00:03:28.001 --> 00:03:32.003
Let's talk a little bit about what this does for us.

73
00:03:32.003 --> 00:03:36.002
So let's say that you wanted to use Spring Data.

74
00:03:36.002 --> 00:03:40.003
By default, Spring Boot is going to provide the version

75
00:03:40.003 --> 00:03:44.001
that is compatible with the other libraries

76
00:03:44.001 --> 00:03:45.006
that it specifies.

77
00:03:45.006 --> 00:03:49.003
So you don't have to worry exactly about what version

78
00:03:49.003 --> 00:03:52.000
of Hibernate to include in your project.

79
00:03:52.000 --> 00:03:55.003
Spring Boot resolves those compatibility issues

80
00:03:55.003 --> 00:04:02.003
between the versions for you.

81
00:04:02.003 --> 00:04:05.005
By default, Spring Boot packages our applications

82
00:04:05.005 --> 00:04:10.001
into an executable JAR that uses an embedded server.

83
00:04:10.001 --> 00:04:13.007
If we take a look at our hotel web app application class,

84
00:04:13.007 --> 00:04:17.004
located in the com.linkedin.javacd package,

85
00:04:17.004 --> 00:04:20.003
we can see a little bit about how this works.

86
00:04:20.003 --> 00:04:23.004
You'll notice the Spring Boot application annotation

87
00:04:23.004 --> 00:04:25.003
on this class.

88
00:04:25.003 --> 00:04:27.002
This indicates the Spring Boot.

89
00:04:27.002 --> 00:04:29.006
It's where the main method is located

90
00:04:29.006 --> 00:04:31.006
that will launch our application.

91
00:04:31.006 --> 00:04:34.001
And this spins up the web server.

92
00:04:34.001 --> 00:04:36.000
It's just a plain old Java class,

93
00:04:36.000 --> 00:04:39.000
so we can right click on it, go to Run as,

94
00:04:39.000 --> 00:04:42.009
and then, Java application to start it.

95
00:04:42.009 --> 00:04:48.004
This will cause Eclipse to start to launch the app.

96
00:04:48.004 --> 00:04:51.008
Now the application will have a problem initially.

97
00:04:51.008 --> 00:04:54.007
It's going to attempt to bind to Port 8080,

98
00:04:54.007 --> 00:04:56.006
and something else on the virtual machine

99
00:04:56.006 --> 00:05:00.008
is already bound there, so we have a port conflict.

100
00:05:00.008 --> 00:05:04.004
Within Spring Boot, we can use a local profile

101
00:05:04.004 --> 00:05:06.000
to resolve this problem.

102
00:05:06.000 --> 00:05:09.003
So inside of the source main resources directory,

103
00:05:09.003 --> 00:05:11.002
you'll notice these two files,

104
00:05:11.002 --> 00:05:16.007
application.properties and application-local.properties.

105
00:05:16.007 --> 00:05:20.001
The application.properties file is where we specify

106
00:05:20.001 --> 00:05:23.007
different configuration properties for our app.

107
00:05:23.007 --> 00:05:26.005
If we want to add a different configuration profile,

108
00:05:26.005 --> 00:05:30.001
we just add a suffix and here it's dash local.

109
00:05:30.001 --> 00:05:32.002
Let's open that up.

110
00:05:32.002 --> 00:05:35.008
Inside of this file you'll see that I've provided

111
00:05:35.008 --> 00:05:40.002
a different port configuration for our local profile.

112
00:05:40.002 --> 00:05:43.005
If we want to apply this profile when we run the app,

113
00:05:43.005 --> 00:05:46.007
we can go into the run configurations for Eclipse.

114
00:05:46.007 --> 00:05:50.003
Just click on Run, then go to Run configurations,

115
00:05:50.003 --> 00:05:52.004
and this dialog will open.

116
00:05:52.004 --> 00:05:56.002
Here we see the run configuration for the application.

117
00:05:56.002 --> 00:05:58.006
We can adjust the profile it uses

118
00:05:58.006 --> 00:06:01.001
by clicking on the Arguments tab.

119
00:06:01.001 --> 00:06:03.005
Here I'm going to provide a VM argument.

120
00:06:03.005 --> 00:06:06.005
To do this, we specified dash D

121
00:06:06.005 --> 00:06:07.009
then the name of the argument,

122
00:06:07.009 --> 00:06:12.005
which is going to be spring.profiles.active,

123
00:06:12.005 --> 00:06:14.004
then just use the equal sign

124
00:06:14.004 --> 00:06:16.002
and provide the name of the profile,

125
00:06:16.002 --> 00:06:18.008
which in this case is local.

126
00:06:18.008 --> 00:06:20.000
Once you have that in place,

127
00:06:20.000 --> 00:06:23.008
go ahead and run the application.

128
00:06:23.008 --> 00:06:25.009
There we see the app spinning up,

129
00:06:25.009 --> 00:06:27.008
and I'm going to start to open up a browser

130
00:06:27.008 --> 00:06:30.008
so that we can hit it once it's launched.

131
00:06:30.008 --> 00:06:33.008
Inside the browser, just specify the local host

132
00:06:33.008 --> 00:06:39.004
in the URL bar and hit it on Port 8884.

133
00:06:39.004 --> 00:06:41.003
There we see the web application.

134
00:06:41.003 --> 00:06:45.005
Okay, let's go ahead and we'll run the booking service.

135
00:06:45.005 --> 00:06:48.009
So I'll just navigate into the directory.

136
00:06:48.009 --> 00:06:53.003
And then, within the com.linkedin.javacd package,

137
00:06:53.003 --> 00:06:57.006
I'm going to go ahead and run this application

138
00:06:57.006 --> 00:07:00.009
as a Java app.

139
00:07:00.009 --> 00:07:03.004
This will build the initial run configuration,

140
00:07:03.004 --> 00:07:06.009
and then, I'll need to adjust it.

141
00:07:06.009 --> 00:07:09.006
Okay, here we can see we got the problem.

142
00:07:09.006 --> 00:07:14.001
Now let's go to the Run configurations.

143
00:07:14.001 --> 00:07:15.002
Then, I'm going to select

144
00:07:15.002 --> 00:07:18.004
the Booking service application run configuration,

145
00:07:18.004 --> 00:07:20.007
click on the Arguments tab,

146
00:07:20.007 --> 00:07:26.004
and then, provide the argument to specify our profile.

147
00:07:26.004 --> 00:07:27.007
Okay, that should do it.

148
00:07:27.007 --> 00:07:30.007
Let's go ahead and run the app.

149
00:07:30.007 --> 00:07:33.002
Now the service is spinning up,

150
00:07:33.002 --> 00:07:37.007
and if we refresh the application within the browser,

151
00:07:37.007 --> 00:07:40.002
we start to see information come in from

152
00:07:40.002 --> 00:07:42.005
the booking service.

153
00:07:42.005 --> 00:07:45.005
So it was much easier to get this app up and running

154
00:07:45.005 --> 00:07:48.006
compared to how we might have done it 10 years ago.

155
00:07:48.006 --> 00:07:51.005
The key ingredients that made our developer workflow

156
00:07:51.005 --> 00:07:55.000
such a nice experience were Spring Boot and Maven.

