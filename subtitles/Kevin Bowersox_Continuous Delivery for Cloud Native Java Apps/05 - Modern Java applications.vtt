WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Since the inception of Java,

2
00:00:02.003 --> 00:00:04.001
a number of shifts in technology

3
00:00:04.001 --> 00:00:06.007
have influenced the way that we build, deliver,

4
00:00:06.007 --> 00:00:10.001
and operate modern Java applications.

5
00:00:10.001 --> 00:00:13.007
These shifts are best summarized by the term "cloud native",

6
00:00:13.007 --> 00:00:15.007
which is used to describe software

7
00:00:15.007 --> 00:00:19.007
that is highly distributed, modular, and resilient.

8
00:00:19.007 --> 00:00:21.006
Let's quickly walk through the changes

9
00:00:21.006 --> 00:00:23.004
that caused Java applications

10
00:00:23.004 --> 00:00:26.004
to evolve towards this approach.

11
00:00:26.004 --> 00:00:28.001
As we've briefly discussed,

12
00:00:28.001 --> 00:00:29.006
a waterfall methodology

13
00:00:29.006 --> 00:00:33.004
was once the standard used to deliver an app.

14
00:00:33.004 --> 00:00:34.008
This approach was painful,

15
00:00:34.008 --> 00:00:37.003
especially towards the end of the project

16
00:00:37.003 --> 00:00:40.001
when all of the code needed to be integrated together

17
00:00:40.001 --> 00:00:42.007
in one big messy merge.

18
00:00:42.007 --> 00:00:46.000
If the project actually survived that phase,

19
00:00:46.000 --> 00:00:47.009
major problems would then occur

20
00:00:47.009 --> 00:00:50.001
when the software was thrown over the wall

21
00:00:50.001 --> 00:00:53.001
to the testing and operations teams.

22
00:00:53.001 --> 00:00:55.001
It also wasn't very flexible.

23
00:00:55.001 --> 00:00:58.004
If the customer's needs changed in the middle of a project,

24
00:00:58.004 --> 00:00:59.007
you just kept on building

25
00:00:59.007 --> 00:01:02.004
what you agreed to a few quarters ago.

26
00:01:02.004 --> 00:01:04.002
So at the end of the project

27
00:01:04.002 --> 00:01:08.000
you ran the risk of delivering the wrong product.

28
00:01:08.000 --> 00:01:11.004
This led teams to adopt new ways of delivering software

29
00:01:11.004 --> 00:01:13.007
like Agile and DevOps.

30
00:01:13.007 --> 00:01:16.008
Agile complements continuous delivery very well

31
00:01:16.008 --> 00:01:20.000
because the idea is to develop in iterations

32
00:01:20.000 --> 00:01:23.005
where work is broken down into smaller pieces.

33
00:01:23.005 --> 00:01:26.005
So it naturally produces the small changes

34
00:01:26.005 --> 00:01:30.007
that we want to deliver through a CI/CD pipeline.

35
00:01:30.007 --> 00:01:34.005
DevOps also emerged slightly after Agile.

36
00:01:34.005 --> 00:01:36.006
It advocated for best practices

37
00:01:36.006 --> 00:01:39.003
like early collaboration between development,

38
00:01:39.003 --> 00:01:42.006
quality assurance, and operations teams.

39
00:01:42.006 --> 00:01:43.004
In fact,

40
00:01:43.004 --> 00:01:46.002
one of the key practices in a DevOps approach

41
00:01:46.002 --> 00:01:49.006
is to automate common testing and operations tasks

42
00:01:49.006 --> 00:01:53.009
into a CI/CD pipeline so you can deliver faster.

43
00:01:53.009 --> 00:01:57.005
One of the historical barriers to delivering faster

44
00:01:57.005 --> 00:01:59.000
was the amount of time it took

45
00:01:59.000 --> 00:02:01.001
to provision or change infrastructure

46
00:02:01.001 --> 00:02:03.000
in a corporate data center.

47
00:02:03.000 --> 00:02:06.007
Getting a new virtual machine or changing a network firewall

48
00:02:06.007 --> 00:02:10.004
could easily delay a project schedule for weeks or months

49
00:02:10.004 --> 00:02:14.002
until the changes were approved and manually performed.

50
00:02:14.002 --> 00:02:18.001
The emergence of cloud platforms changed this equation.

51
00:02:18.001 --> 00:02:21.004
Now virtual machines can be provisioned in seconds

52
00:02:21.004 --> 00:02:25.006
and easily scaled up if they require more resources.

53
00:02:25.006 --> 00:02:28.000
The cloud also made many capabilities

54
00:02:28.000 --> 00:02:30.007
like networking and security available

55
00:02:30.007 --> 00:02:35.002
as easy to use services that operate at a global scale.

56
00:02:35.002 --> 00:02:37.009
New technologies also emerged

57
00:02:37.009 --> 00:02:42.000
that changed how applications were packaged and deployed.

58
00:02:42.000 --> 00:02:42.009
Traditionally,

59
00:02:42.009 --> 00:02:45.002
Java applications in the enterprise

60
00:02:45.002 --> 00:02:47.006
were deployed to application servers

61
00:02:47.006 --> 00:02:50.008
that were bundled within bloated middleware platforms

62
00:02:50.008 --> 00:02:54.007
that were expensive proprietary technologies.

63
00:02:54.007 --> 00:02:57.006
Often these platforms were not configured the same

64
00:02:57.006 --> 00:02:59.000
in different environments

65
00:02:59.000 --> 00:03:00.008
and the one-off configurations

66
00:03:00.008 --> 00:03:03.008
could cause a release to fail.

67
00:03:03.008 --> 00:03:06.003
The introduction of container-based technologies

68
00:03:06.003 --> 00:03:08.000
like Docker and Kubernetes

69
00:03:08.000 --> 00:03:11.004
changed how we package Java applications.

70
00:03:11.004 --> 00:03:12.005
Using containers,

71
00:03:12.005 --> 00:03:16.002
we can package applications and their environments together,

72
00:03:16.002 --> 00:03:19.005
which simplifies how we deploy and run them.

73
00:03:19.005 --> 00:03:22.009
This made it more feasible to build distributed systems

74
00:03:22.009 --> 00:03:25.002
and engineers now had another option

75
00:03:25.002 --> 00:03:28.005
besides the traditional monolith.

76
00:03:28.005 --> 00:03:32.009
Monoliths are still a valid architecture in many scenarios,

77
00:03:32.009 --> 00:03:34.008
but their bulkiness doesn't promote

78
00:03:34.008 --> 00:03:37.006
the rapid delivery of changes that we hope to achieve

79
00:03:37.006 --> 00:03:40.007
with continuous delivery.

80
00:03:40.007 --> 00:03:43.005
Highly de-coupled microservices have emerged

81
00:03:43.005 --> 00:03:46.002
as the best approach for teams that want to deploy

82
00:03:46.002 --> 00:03:49.004
small portions of their system frequently.

83
00:03:49.004 --> 00:03:53.001
Microservice architectures consists of small services

84
00:03:53.001 --> 00:03:55.001
that can be developed and deployed

85
00:03:55.001 --> 00:03:57.002
independently of one another,

86
00:03:57.002 --> 00:04:01.004
which allows our systems to be changed more easily.

87
00:04:01.004 --> 00:04:02.006
These evolutions,

88
00:04:02.006 --> 00:04:05.004
which we'll refer to as the cloud native approach,

89
00:04:05.004 --> 00:04:07.002
have caused fundamental changes

90
00:04:07.002 --> 00:04:11.005
for how we build and deliver modern Java applications.

91
00:04:11.005 --> 00:04:13.006
As we walk through the different phases

92
00:04:13.006 --> 00:04:16.007
in the delivery process throughout our course project,

93
00:04:16.007 --> 00:04:18.009
I'll highlight where the cloud native approach

94
00:04:18.009 --> 00:04:22.000
has influenced delivery practices.

