WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] Now that we have a basic pipeline script,

2
00:00:03.002 --> 00:00:07.002
let's see how it gets executed within Jenkins.

3
00:00:07.002 --> 00:00:09.002
In Jenkins, we have the option

4
00:00:09.002 --> 00:00:12.003
to create a GitHub organization project

5
00:00:12.003 --> 00:00:14.003
thanks to the Branch Source plugin

6
00:00:14.003 --> 00:00:16.003
that we talked about earlier.

7
00:00:16.003 --> 00:00:19.008
This project type will scan the repositories in our

8
00:00:19.008 --> 00:00:23.000
GitHub organization and create a new pipeline job

9
00:00:23.000 --> 00:00:25.005
for each branch within the repository

10
00:00:25.005 --> 00:00:28.001
where it finds a Jenkins file.

11
00:00:28.001 --> 00:00:30.005
It's a perfect fit for when your microservices

12
00:00:30.005 --> 00:00:32.006
are stored in a poly repo,

13
00:00:32.006 --> 00:00:34.008
but there's a bit of configuration first.

14
00:00:34.008 --> 00:00:37.001
So let's go put that in place.

15
00:00:37.001 --> 00:00:40.000
So just navigate back to the Dashboard,

16
00:00:40.000 --> 00:00:43.003
and then, click on this option to manage Jenkins.

17
00:00:43.003 --> 00:00:46.008
From there, we'll want to go into the system settings.

18
00:00:46.008 --> 00:00:49.009
So click on Configure system.

19
00:00:49.009 --> 00:00:52.002
And then, if we scroll down within this page,

20
00:00:52.002 --> 00:00:58.000
we'll find the GitHub Enterprise Server section.

21
00:00:58.000 --> 00:00:59.004
There it is.

22
00:00:59.004 --> 00:01:01.003
So go ahead and click on Add,

23
00:01:01.003 --> 00:01:04.006
and then here we'll need to provide the end point

24
00:01:04.006 --> 00:01:06.007
of our GitHub instance.

25
00:01:06.007 --> 00:01:10.003
In this case, we're using the public GitHub API

26
00:01:10.003 --> 00:01:18.002
and that's located at https://api.github.com.

27
00:01:18.002 --> 00:01:20.007
Okay, then we just need to provide a name

28
00:01:20.007 --> 00:01:22.004
for this enterprise server.

29
00:01:22.004 --> 00:01:24.008
I'll just call it GitHub.

30
00:01:24.008 --> 00:01:26.002
Now that we have that in place,

31
00:01:26.002 --> 00:01:29.000
let's go ahead and we'll save our configuration.

32
00:01:29.000 --> 00:01:30.006
And then, on the Dashboard,

33
00:01:30.006 --> 00:01:34.006
we can begin to set up our GitHub organization project.

34
00:01:34.006 --> 00:01:37.002
To do that, just click on New item,

35
00:01:37.002 --> 00:01:40.006
and then, we'll need to provide a name for the project.

36
00:01:40.006 --> 00:01:45.006
I'm going to call it Landon dash hotel dash application.

37
00:01:45.006 --> 00:01:47.006
All right, once that name is in place,

38
00:01:47.006 --> 00:01:49.009
go ahead and click on the Organization folder,

39
00:01:49.009 --> 00:01:52.009
and then, hit Okay to create it.

40
00:01:52.009 --> 00:01:54.004
This will bring up a form

41
00:01:54.004 --> 00:01:57.003
where we can begin to configure the project.

42
00:01:57.003 --> 00:01:58.009
The first thing that we'll need to do

43
00:01:58.009 --> 00:02:02.003
is connect it to our GitHub organization.

44
00:02:02.003 --> 00:02:04.008
So here under Repository sources,

45
00:02:04.008 --> 00:02:09.004
click on the Add drop down and select GitHub organization.

46
00:02:09.004 --> 00:02:12.003
Then, you'll want to select your GitHub credentials.

47
00:02:12.003 --> 00:02:14.002
There's our personal access token,

48
00:02:14.002 --> 00:02:16.005
let's select that.

49
00:02:16.005 --> 00:02:18.005
Next, we'll need to provide a value

50
00:02:18.005 --> 00:02:20.000
for the owner field.

51
00:02:20.000 --> 00:02:23.002
This is the name of your GitHub organization.

52
00:02:23.002 --> 00:02:26.006
Mine is hotel dash landing dash KB.

53
00:02:26.006 --> 00:02:32.003
Now make sure you enter your organization name here.

54
00:02:32.003 --> 00:02:34.002
Next, we're going to scroll down

55
00:02:34.002 --> 00:02:38.006
and adjust some of the scanning behaviors of this project.

56
00:02:38.006 --> 00:02:41.001
So the first thing I'm going to do is just remove

57
00:02:41.001 --> 00:02:45.000
this option to Discover poll requests from forks.

58
00:02:45.000 --> 00:02:46.007
And then, I'm going to get ahead a little bit

59
00:02:46.007 --> 00:02:49.003
on setting up our automated deployment.

60
00:02:49.003 --> 00:02:52.000
So here I'm going to click on the Add button,

61
00:02:52.000 --> 00:02:56.006
and then, if we scroll down you'll see within Repository

62
00:02:56.006 --> 00:02:58.008
and here we'll want to select

63
00:02:58.008 --> 00:03:02.007
Filter by name with wild cards.

64
00:03:02.007 --> 00:03:04.000
You'll see this option

65
00:03:04.000 --> 00:03:07.000
where we can Exclude different branches.

66
00:03:07.000 --> 00:03:10.007
I'm going to tell our pipeline to ignore the release branch.

67
00:03:10.007 --> 00:03:13.004
So if it finds a branch named Release,

68
00:03:13.004 --> 00:03:15.006
it's going to ignore any Jenkins files

69
00:03:15.006 --> 00:03:18.004
that it finds within it.

70
00:03:18.004 --> 00:03:19.008
Okay, with that in place,

71
00:03:19.008 --> 00:03:21.009
let's scroll down a little bit more,

72
00:03:21.009 --> 00:03:23.007
and there's some other configuration

73
00:03:23.007 --> 00:03:25.008
we'll need to put in place.

74
00:03:25.008 --> 00:03:30.002
Here within this section, Scan organization folder triggers,

75
00:03:30.002 --> 00:03:33.007
we're going to adjust how frequently our project

76
00:03:33.007 --> 00:03:37.008
polls the organization to discover new Jenkins files.

77
00:03:37.008 --> 00:03:39.008
It's currently set up for one day,

78
00:03:39.008 --> 00:03:42.003
which isn't going to be very great for our lab.

79
00:03:42.003 --> 00:03:44.005
I'm just going to reduce this down to one minute

80
00:03:44.005 --> 00:03:46.003
to speed things up.

81
00:03:46.003 --> 00:03:48.001
Now in an enterprise environment,

82
00:03:48.001 --> 00:03:51.003
you might want to scale this back just a tad.

83
00:03:51.003 --> 00:03:54.004
Okay, with that in place, let's keep scrolling down

84
00:03:54.004 --> 00:03:57.009
and here, you'll see the Child scan triggers.

85
00:03:57.009 --> 00:04:00.002
We're going to adjust this polling frequency

86
00:04:00.002 --> 00:04:02.002
as well to one minute,

87
00:04:02.002 --> 00:04:06.004
and this will determine how frequently the project polls

88
00:04:06.004 --> 00:04:09.005
the individual repositories that it discovers.

89
00:04:09.005 --> 00:04:12.000
So these are going to be the repositories

90
00:04:12.000 --> 00:04:16.009
containing our microservices and the actual source code.

91
00:04:16.009 --> 00:04:19.000
Okay, with that configuration in place,

92
00:04:19.000 --> 00:04:21.003
let's go ahead and we'll click on Save

93
00:04:21.003 --> 00:04:23.008
in order to create the project.

94
00:04:23.008 --> 00:04:27.003
Now you'll notice that instantly it begins scanning

95
00:04:27.003 --> 00:04:29.004
our GitHub organization,

96
00:04:29.004 --> 00:04:34.003
but it's not finding any Jenkins files within our projects.

97
00:04:34.003 --> 00:04:36.003
So let's change that.

98
00:04:36.003 --> 00:04:39.000
We can go ahead and push our Jenkins file

99
00:04:39.000 --> 00:04:42.005
for the room service to the GitHub organization.

100
00:04:42.005 --> 00:04:45.000
So I'm going to hop over to the terminal,

101
00:04:45.000 --> 00:04:48.005
and within the Room service folder,

102
00:04:48.005 --> 00:04:52.000
I'm just going to perform a commit

103
00:04:52.000 --> 00:04:57.008
and then, we're going to push these changes over to GitHub.

104
00:04:57.008 --> 00:05:00.000
So first I'll set up my commit,

105
00:05:00.000 --> 00:05:03.005
I'll just say we're pushing the Jenkins file,

106
00:05:03.005 --> 00:05:06.008
and then, we'll go ahead and push the changes.

107
00:05:06.008 --> 00:05:09.002
Okay, they should be over in GitHub,

108
00:05:09.002 --> 00:05:12.000
and if we navigate back to Jenkins,

109
00:05:12.000 --> 00:05:15.004
we should see it pick up the changes to the repository.

110
00:05:15.004 --> 00:05:19.005
So there we see our GitHub organization project,

111
00:05:19.005 --> 00:05:23.005
and pretty soon we should see a build queue up.

112
00:05:23.005 --> 00:05:24.009
There we can see the scan

113
00:05:24.009 --> 00:05:28.005
of the GitHub organization taking place.

114
00:05:28.005 --> 00:05:30.004
Let's go back to our project.

115
00:05:30.004 --> 00:05:33.003
There you can see it picked up the room service

116
00:05:33.003 --> 00:05:36.005
and the Jenkins file within the main branch,

117
00:05:36.005 --> 00:05:39.009
and now it's starting to perform a build.

118
00:05:39.009 --> 00:05:42.003
Okay, it looks like our build was successful.

119
00:05:42.003 --> 00:05:45.001
Let's go ahead and we'll click on the build,

120
00:05:45.001 --> 00:05:46.005
and then, inside of it,

121
00:05:46.005 --> 00:05:50.009
we can see all the output that was written to the console

122
00:05:50.009 --> 00:05:54.000
when our build was performed.

123
00:05:54.000 --> 00:05:56.006
So there we start to see some of the steps

124
00:05:56.006 --> 00:06:01.001
that we included within the stages of our pipeline.

125
00:06:01.001 --> 00:06:05.003
There's the output for our step to build the application.

126
00:06:05.003 --> 00:06:07.002
Here's the output for when we want to create

127
00:06:07.002 --> 00:06:08.006
the container image.

128
00:06:08.006 --> 00:06:11.002
And then, finally, the output from the stage

129
00:06:11.002 --> 00:06:14.004
that publishes the container image.

130
00:06:14.004 --> 00:06:17.009
Excellent, so we executed our first pipeline,

131
00:06:17.009 --> 00:06:19.007
but we will need to do some more work

132
00:06:19.007 --> 00:06:22.002
to actually build the application

133
00:06:22.002 --> 00:06:24.009
as part of our continuous integration process,

134
00:06:24.009 --> 00:06:28.000
and to get those containers built and published.

