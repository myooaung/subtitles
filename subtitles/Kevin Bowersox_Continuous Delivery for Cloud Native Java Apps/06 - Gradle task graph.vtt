WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] There's a little bit more

2
00:00:01.006 --> 00:00:03.001
that you need to understand

3
00:00:03.001 --> 00:00:06.005
about how the tasks in a Gradle build work.

4
00:00:06.005 --> 00:00:10.006
I'll use our new task info plugin to help explain it.

5
00:00:10.006 --> 00:00:14.000
The plug-in contains the TI tree task.

6
00:00:14.000 --> 00:00:18.006
When we execute it, we provide it another task like build.

7
00:00:18.006 --> 00:00:21.004
Then it evaluates the relationships

8
00:00:21.004 --> 00:00:25.003
between all the tasks that will be executed by Gradle

9
00:00:25.003 --> 00:00:27.009
when we perform the build task.

10
00:00:27.009 --> 00:00:31.006
Here, let me show you how it works.

11
00:00:31.006 --> 00:00:34.004
So here's the output from the plugin.

12
00:00:34.004 --> 00:00:37.005
This is known as the task graph.

13
00:00:37.005 --> 00:00:39.003
At the base of the task graph,

14
00:00:39.003 --> 00:00:44.001
we have the build task that we asked the plugin to analyze.

15
00:00:44.001 --> 00:00:48.009
The build task is a standard life cycle task within Gradle.

16
00:00:48.009 --> 00:00:50.007
Standard life cycle tasks,

17
00:00:50.007 --> 00:00:53.005
like build, assemble and check,

18
00:00:53.005 --> 00:00:57.001
don't really do any work within our builds.

19
00:00:57.001 --> 00:01:00.009
Instead, they rely upon tasks provided by plugins

20
00:01:00.009 --> 00:01:04.003
to do the actual work inside of the build.

21
00:01:04.003 --> 00:01:06.008
That doesn't mean they're not important

22
00:01:06.008 --> 00:01:10.004
because we can still link the plugin task to them

23
00:01:10.004 --> 00:01:15.002
to help determine when they will be executed in the build.

24
00:01:15.002 --> 00:01:18.003
This process of linking the task together

25
00:01:18.003 --> 00:01:21.003
and determining the sequence they'll be run in

26
00:01:21.003 --> 00:01:23.000
is performed by Gradle

27
00:01:23.000 --> 00:01:25.006
in the early stages of the build process

28
00:01:25.006 --> 00:01:28.009
when it's creating the task graph.

29
00:01:28.009 --> 00:01:31.004
This all occurs behind the scenes,

30
00:01:31.004 --> 00:01:34.002
and it's really hard to see just by adding a plugin

31
00:01:34.002 --> 00:01:35.007
to our build script.

32
00:01:35.007 --> 00:01:40.000
So let's create our own task to see how it works.

33
00:01:40.000 --> 00:01:43.002
To do that, we're going to register a task

34
00:01:43.002 --> 00:01:45.007
on the task property.

35
00:01:45.007 --> 00:01:47.009
So once we call register,

36
00:01:47.009 --> 00:01:50.008
we provide the name of our task

37
00:01:50.008 --> 00:01:54.004
and then it will be created within our project.

38
00:01:54.004 --> 00:01:57.005
Now, the task property is actually found

39
00:01:57.005 --> 00:01:59.009
on the project object.

40
00:01:59.009 --> 00:02:03.008
Typically we don't specify it, it's normally implicit,

41
00:02:03.008 --> 00:02:05.009
but here I'm going to be really verbose

42
00:02:05.009 --> 00:02:09.003
and put it in place so you can see how it works.

43
00:02:09.003 --> 00:02:11.003
All right, now that we have our task,

44
00:02:11.003 --> 00:02:13.009
let's go ahead and within the closure,

45
00:02:13.009 --> 00:02:17.000
we're going to add some actions to it.

46
00:02:17.000 --> 00:02:20.006
The first action we'll add is do first.

47
00:02:20.006 --> 00:02:22.006
Inside of this action,

48
00:02:22.006 --> 00:02:26.008
I'm going to go ahead and print out some console output.

49
00:02:26.008 --> 00:02:30.001
Here, I'll just say hello LinkedIn learning.

50
00:02:30.001 --> 00:02:33.009
Then I'm going to go ahead and copy this action

51
00:02:33.009 --> 00:02:37.003
and then I'll just paste it right below the first one.

52
00:02:37.003 --> 00:02:41.005
And our next action, we're going to name do last.

53
00:02:41.005 --> 00:02:43.004
And within the output,

54
00:02:43.004 --> 00:02:47.001
I'm just going to say hello learner.

55
00:02:47.001 --> 00:02:48.005
Okay, there we go.

56
00:02:48.005 --> 00:02:49.005
So let's go ahead.

57
00:02:49.005 --> 00:02:51.007
We'll save the build.gradle file

58
00:02:51.007 --> 00:02:55.000
and then we'll head over to the terminal

59
00:02:55.000 --> 00:02:57.007
where we can use the Gradle wrapper

60
00:02:57.007 --> 00:03:02.001
to execute the new task we just created.

61
00:03:02.001 --> 00:03:04.007
There we can see the task is executed

62
00:03:04.007 --> 00:03:06.003
and the output we specified

63
00:03:06.003 --> 00:03:09.005
was printed to our terminal.

64
00:03:09.005 --> 00:03:12.000
Okay, now that we have our new task,

65
00:03:12.000 --> 00:03:13.005
let's return to Eclipse,

66
00:03:13.005 --> 00:03:15.007
and I'm going to do one more thing

67
00:03:15.007 --> 00:03:18.005
that's going to change up our task graph.

68
00:03:18.005 --> 00:03:20.004
So inside of our build script,

69
00:03:20.004 --> 00:03:22.008
I'm going to make the build task

70
00:03:22.008 --> 00:03:26.002
depend on our new task.

71
00:03:26.002 --> 00:03:29.004
So there I'll just say build.depends on simple task,

72
00:03:29.004 --> 00:03:32.001
and that's going to change up our task graph.

73
00:03:32.001 --> 00:03:32.009
Let me show you.

74
00:03:32.009 --> 00:03:35.004
We'll go over to the terminal

75
00:03:35.004 --> 00:03:40.002
and then we'll execute the TI tree task again.

76
00:03:40.002 --> 00:03:43.002
And here you'll see that our new task

77
00:03:43.002 --> 00:03:45.007
has been added to the task graph

78
00:03:45.007 --> 00:03:51.000
and that's because the build task depends on it.

79
00:03:51.000 --> 00:03:53.007
That means if we were to execute a build

80
00:03:53.007 --> 00:03:55.005
using the Gradle wrapper,

81
00:03:55.005 --> 00:04:00.003
it's going to include the execution of our new task,

82
00:04:00.003 --> 00:04:03.003
and there we can see the output printed to the console

83
00:04:03.003 --> 00:04:05.007
from the task we created.

84
00:04:05.007 --> 00:04:09.003
Most often, we'll use tasks that come from plugins,

85
00:04:09.003 --> 00:04:12.001
but understanding how the task graph is assembled

86
00:04:12.001 --> 00:04:15.000
will be a big help when you're working with Gradle.

