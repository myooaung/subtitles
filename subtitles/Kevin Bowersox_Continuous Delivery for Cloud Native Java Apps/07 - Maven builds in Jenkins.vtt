WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] One of the best practices

2
00:00:02.001 --> 00:00:04.000
for continuous integration

3
00:00:04.000 --> 00:00:07.003
is to build your software on a neutral server.

4
00:00:07.003 --> 00:00:09.008
So we're going to update our Jenkinsfile

5
00:00:09.008 --> 00:00:12.002
to include a Maven build,

6
00:00:12.002 --> 00:00:14.009
kind of like what we did on our local workstation,

7
00:00:14.009 --> 00:00:17.006
except this time it's going to be automated,

8
00:00:17.006 --> 00:00:20.001
and performed on a cleaned server.

9
00:00:20.001 --> 00:00:22.008
To build our Java application with Maven

10
00:00:22.008 --> 00:00:24.003
inside of our Pipeline,

11
00:00:24.003 --> 00:00:26.001
we're going to add a new step

12
00:00:26.001 --> 00:00:28.004
into the Build Application stage.

13
00:00:28.004 --> 00:00:30.004
So inside the steps block,

14
00:00:30.004 --> 00:00:32.009
I'm going to add a new shell step,

15
00:00:32.009 --> 00:00:35.000
and here I'll use the Maven Wrapper

16
00:00:35.000 --> 00:00:37.009
to execute the clean and verify phases

17
00:00:37.009 --> 00:00:40.002
of the Maven lifecycle.

18
00:00:40.002 --> 00:00:41.008
Now, you might be asking,

19
00:00:41.008 --> 00:00:44.008
where did the Maven Wrapper come from?

20
00:00:44.008 --> 00:00:47.008
Well, when Jenkins executes a Pipeline,

21
00:00:47.008 --> 00:00:49.007
it pulls all the source code

22
00:00:49.007 --> 00:00:53.002
from the repository containing the Jenkinsfile.

23
00:00:53.002 --> 00:00:56.003
And you'll remember that we added the Maven Wrapper

24
00:00:56.003 --> 00:00:58.006
to our room-service project.

25
00:00:58.006 --> 00:01:01.001
So that makes it available to our Pipeline

26
00:01:01.001 --> 00:01:04.004
to execute Maven commands.

27
00:01:04.004 --> 00:01:06.000
Now, the next thing we'll do,

28
00:01:06.000 --> 00:01:08.001
we'll make our Pipeline generic enough

29
00:01:08.001 --> 00:01:12.001
so we can reuse it across different microservices.

30
00:01:12.001 --> 00:01:15.002
The change starts in the pom.xml file.

31
00:01:15.002 --> 00:01:16.007
So inside the file,

32
00:01:16.007 --> 00:01:19.009
I'm going to scroll down to the build section.

33
00:01:19.009 --> 00:01:24.002
Here, I'm going to add the final name tag.

34
00:01:24.002 --> 00:01:28.000
This tag allows us to specify the name of the jar

35
00:01:28.000 --> 00:01:31.009
that Maven will produce when we build our app.

36
00:01:31.009 --> 00:01:35.007
Now, I'm not just going to hard-code any old jar name here.

37
00:01:35.007 --> 00:01:38.003
I'm going to use an argument.

38
00:01:38.003 --> 00:01:40.008
To add an argument inside of a pom,

39
00:01:40.008 --> 00:01:44.002
we just use a dollar sign, then a set of curly braces,

40
00:01:44.002 --> 00:01:46.003
and then the name of our argument.

41
00:01:46.003 --> 00:01:50.002
In this case, it's going to be jarName.

42
00:01:50.002 --> 00:01:54.001
This allows the argument to be passed into the pom

43
00:01:54.001 --> 00:01:56.009
when we execute a Maven build.

44
00:01:56.009 --> 00:01:59.005
Let me go ahead, I'll copy the name of our argument,

45
00:01:59.005 --> 00:02:02.006
and then I'll show you how we pass it.

46
00:02:02.006 --> 00:02:04.001
Back in our Jenkinsfile,

47
00:02:04.001 --> 00:02:05.007
where we use the Maven Wrapper

48
00:02:05.007 --> 00:02:08.005
to execute the clean and verify phases,

49
00:02:08.005 --> 00:02:12.005
we can just add a -D, then the argument name,

50
00:02:12.005 --> 00:02:14.000
then an equal sign.

51
00:02:14.000 --> 00:02:17.004
And here we provide the value for the argument.

52
00:02:17.004 --> 00:02:18.005
Now, you'll remember,

53
00:02:18.005 --> 00:02:21.009
we already have a jar name environment variable

54
00:02:21.009 --> 00:02:24.005
that stores the name of our jar.

55
00:02:24.005 --> 00:02:26.007
Let's go ahead, we'll copy that,

56
00:02:26.007 --> 00:02:29.001
and then we'll add a placeholder here

57
00:02:29.001 --> 00:02:32.000
for the value of the argument.

58
00:02:32.000 --> 00:02:34.004
Okay, now our Pipeline is set up

59
00:02:34.004 --> 00:02:37.008
to build an executable jar with Maven.

60
00:02:37.008 --> 00:02:39.008
Let's do one more thing though.

61
00:02:39.008 --> 00:02:42.008
We're going to use the Docker Pipeline plugin

62
00:02:42.008 --> 00:02:47.003
to execute this stage inside of a Docker container.

63
00:02:47.003 --> 00:02:48.007
If we do a lot of builds,

64
00:02:48.007 --> 00:02:52.006
this can help increase the efficiency of our Pipeline.

65
00:02:52.006 --> 00:02:55.006
To run this stage inside of a Docker container,

66
00:02:55.006 --> 00:02:58.002
we need to override the configuration

67
00:02:58.002 --> 00:03:00.009
of the agent used to execute it.

68
00:03:00.009 --> 00:03:03.008
So I'm going to go ahead and add an agent block

69
00:03:03.008 --> 00:03:05.004
inside of the stage,

70
00:03:05.004 --> 00:03:06.007
and then inside of that,

71
00:03:06.007 --> 00:03:09.005
we're going to add a Docker block.

72
00:03:09.005 --> 00:03:12.008
And here we can use the Docker Pipeline plugin

73
00:03:12.008 --> 00:03:16.007
to set up the Docker container that will run the stage.

74
00:03:16.007 --> 00:03:20.000
The first thing we do is provide an image parameter,

75
00:03:20.000 --> 00:03:23.002
and this is the name of the container image

76
00:03:23.002 --> 00:03:26.000
that we would like to use to run the stage.

77
00:03:26.000 --> 00:03:28.004
Now, we're going to need a JDK.

78
00:03:28.004 --> 00:03:33.005
So I'm going to use the open jdk:11 image here.

79
00:03:33.005 --> 00:03:36.000
Then we're going to add one more parameter.

80
00:03:36.000 --> 00:03:38.006
It's going to be the reuseNode parameter,

81
00:03:38.006 --> 00:03:40.008
and I'm going to set it to true.

82
00:03:40.008 --> 00:03:42.000
Now what this does,

83
00:03:42.000 --> 00:03:45.009
it makes the workspace that's used in this stage

84
00:03:45.009 --> 00:03:49.004
available for later stages in the Pipeline.

85
00:03:49.004 --> 00:03:53.000
So, since we're going to be building our executable jar,

86
00:03:53.000 --> 00:03:55.004
we'll need that in later stages

87
00:03:55.004 --> 00:03:59.000
when we do something like build a container image.

88
00:03:59.000 --> 00:04:01.000
With this configuration in place,

89
00:04:01.000 --> 00:04:05.001
our Pipeline will execute this stage on a Docker container.

90
00:04:05.001 --> 00:04:07.008
So that means the node we run it on

91
00:04:07.008 --> 00:04:11.002
has to have a container runtime installed.

92
00:04:11.002 --> 00:04:13.003
Now, (indistinct) Lab already has Docker,

93
00:04:13.003 --> 00:04:15.007
so we're set up there.

94
00:04:15.007 --> 00:04:19.003
Okay, let's go ahead, we'll save all of our changes,

95
00:04:19.003 --> 00:04:21.008
then we'll head over to the terminal,

96
00:04:21.008 --> 00:04:25.001
and we can start to push these over to GitHub.

97
00:04:25.001 --> 00:04:28.008
So first, I'll add the changes to the stage,

98
00:04:28.008 --> 00:04:31.008
then we'll go ahead and we'll create a new commit,

99
00:04:31.008 --> 00:04:35.009
here, I'll say adding Maven and Docker,

100
00:04:35.009 --> 00:04:38.008
and then we'll push these changes over to GitHub,

101
00:04:38.008 --> 00:04:43.009
to trigger Jenkins to start executing our Pipeline.

102
00:04:43.009 --> 00:04:46.006
Now that they're pushed, let's go to Jenkins,

103
00:04:46.006 --> 00:04:49.006
and we can watch this Pipeline execute.

104
00:04:49.006 --> 00:04:53.003
So I'll navigate inside of our room-service Pipeline

105
00:04:53.003 --> 00:04:55.000
into the main branch,

106
00:04:55.000 --> 00:04:58.002
and then we'll wait for the Pipeline.

107
00:04:58.002 --> 00:05:01.008
And right there we see the build queuing up,

108
00:05:01.008 --> 00:05:04.000
there it's starting to execute.

109
00:05:04.000 --> 00:05:08.006
Let's go check out the console output.

110
00:05:08.006 --> 00:05:11.006
Okay, it looks like the Pipeline was successful.

111
00:05:11.006 --> 00:05:15.007
We can also see we performed a successful Maven build.

112
00:05:15.007 --> 00:05:18.003
So let's scroll up a little bit further,

113
00:05:18.003 --> 00:05:20.009
and here we can check out the stage

114
00:05:20.009 --> 00:05:24.004
that ran inside of a Docker container.

115
00:05:24.004 --> 00:05:28.003
There we see the container image that we ran the stage with,

116
00:05:28.003 --> 00:05:31.007
and here you can actually see the Docker run command

117
00:05:31.007 --> 00:05:34.006
that executed the stage.

118
00:05:34.006 --> 00:05:38.000
Now our Pipeline is able to build the application with Maven

119
00:05:38.000 --> 00:05:41.004
and package it inside of an executable jar.

120
00:05:41.004 --> 00:05:42.002
That's great,

121
00:05:42.002 --> 00:05:44.005
but there's a little bit more work to do from here

122
00:05:44.005 --> 00:05:48.000
to run the application inside of a container.

