WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Once you become comfortable

2
00:00:02.000 --> 00:00:03.005
with continuous delivery,

3
00:00:03.005 --> 00:00:07.001
you might decide to automate production deployments.

4
00:00:07.001 --> 00:00:09.001
To switch to continuous deployment,

5
00:00:09.001 --> 00:00:12.002
we'll need to extend the automation a bit in the script

6
00:00:12.002 --> 00:00:14.003
for our deployment pipeline.

7
00:00:14.003 --> 00:00:16.005
So let's get started.

8
00:00:16.005 --> 00:00:18.004
The first thing that we'll need to do,

9
00:00:18.004 --> 00:00:21.007
is copy the stage that deploys our application

10
00:00:21.007 --> 00:00:25.001
to the staging environment.

11
00:00:25.001 --> 00:00:27.002
I'm going to go ahead and I'll place it here,

12
00:00:27.002 --> 00:00:31.002
as the last stage within our pipeline.

13
00:00:31.002 --> 00:00:32.003
Once it's in place,

14
00:00:32.003 --> 00:00:34.006
I'm going to then switch its name over to,

15
00:00:34.006 --> 00:00:37.005
Deploy to Production.

16
00:00:37.005 --> 00:00:38.004
All right.

17
00:00:38.004 --> 00:00:40.004
Now it's just going to take a few tweaks

18
00:00:40.004 --> 00:00:43.003
to automate our production deployments.

19
00:00:43.003 --> 00:00:44.005
In this first step,

20
00:00:44.005 --> 00:00:47.002
which uses git to pull the manifests

21
00:00:47.002 --> 00:00:50.001
from the main branch into the workspace,

22
00:00:50.001 --> 00:00:53.006
we'll need to change the branch that it pulls from.

23
00:00:53.006 --> 00:00:54.004
Instead,

24
00:00:54.004 --> 00:00:57.001
we're going to pull from the release branch

25
00:00:57.001 --> 00:00:58.004
and those are the manifests

26
00:00:58.004 --> 00:01:02.002
that will get applied on our production cluster.

27
00:01:02.002 --> 00:01:03.003
Now you'll recall,

28
00:01:03.003 --> 00:01:07.004
when we promoted our changes to production manually,

29
00:01:07.004 --> 00:01:10.000
all we did was merge the main branch

30
00:01:10.000 --> 00:01:11.007
into the release branch,

31
00:01:11.007 --> 00:01:13.005
and that's all we need to do here.

32
00:01:13.005 --> 00:01:15.006
We're just going to automate it.

33
00:01:15.006 --> 00:01:16.009
So let's go ahead,

34
00:01:16.009 --> 00:01:20.007
and we'll remove this step that uses customize.

35
00:01:20.007 --> 00:01:23.003
And then we're going to switch this command,

36
00:01:23.003 --> 00:01:26.009
which performs a commit over to perform a merge.

37
00:01:26.009 --> 00:01:29.004
So we'll say, git merge main.

38
00:01:29.004 --> 00:01:32.001
And this will cause the changes in the main branch,

39
00:01:32.001 --> 00:01:35.005
which are currently applied to the staging environment,

40
00:01:35.005 --> 00:01:37.009
to be merged into the release branch

41
00:01:37.009 --> 00:01:41.002
where Argo CD will build the production overlay

42
00:01:41.002 --> 00:01:45.001
and apply the changes to the production cluster.

43
00:01:45.001 --> 00:01:45.009
Okay.

44
00:01:45.009 --> 00:01:47.000
There's one last thing.

45
00:01:47.000 --> 00:01:48.003
Here, you can see

46
00:01:48.003 --> 00:01:52.008
that we're pushing the changes to the main branch to GitHub.

47
00:01:52.008 --> 00:01:53.006
Instead,

48
00:01:53.006 --> 00:01:58.005
we need to push the changes in the release branch to GitHub.

49
00:01:58.005 --> 00:01:59.003
Okay.

50
00:01:59.003 --> 00:02:00.006
Now everything's in place

51
00:02:00.006 --> 00:02:03.001
to automate our production deployments.

52
00:02:03.001 --> 00:02:06.002
I have to point out one more thing here though.

53
00:02:06.002 --> 00:02:08.003
Before we would push to production,

54
00:02:08.003 --> 00:02:09.008
we should do a lot of testing,

55
00:02:09.008 --> 00:02:12.001
and verification of these changes

56
00:02:12.001 --> 00:02:14.004
to make sure they're production worthy.

57
00:02:14.004 --> 00:02:17.002
But we're focused on the mechanics of the pipeline,

58
00:02:17.002 --> 00:02:20.003
so we're going to head over to the terminal,

59
00:02:20.003 --> 00:02:23.006
and here, I'm going to go ahead and stage these changes

60
00:02:23.006 --> 00:02:26.001
inside the deploy repo.

61
00:02:26.001 --> 00:02:28.005
Then I'll make a commit.

62
00:02:28.005 --> 00:02:34.002
We can say that we're adding continuous deployment.

63
00:02:34.002 --> 00:02:37.002
Then we'll push those changes over to GitHub.

64
00:02:37.002 --> 00:02:39.006
And that will cause Jenkins to pick them up.

65
00:02:39.006 --> 00:02:41.000
And our deployment pipeline

66
00:02:41.000 --> 00:02:43.006
will have the final stage within it

67
00:02:43.006 --> 00:02:47.005
that automates the deployment to production.

68
00:02:47.005 --> 00:02:48.004
All right.

69
00:02:48.004 --> 00:02:49.008
Now that that's being put in place,

70
00:02:49.008 --> 00:02:52.004
let's go make a change to our application

71
00:02:52.004 --> 00:02:55.007
so that we can run it through our pipeline.

72
00:02:55.007 --> 00:02:56.009
So back in Eclipse,

73
00:02:56.009 --> 00:02:59.009
you'll notice I have three other files open.

74
00:02:59.009 --> 00:03:03.007
These are part of the hotel-webapp project,

75
00:03:03.007 --> 00:03:07.003
and we've seen the bookings.html file before,

76
00:03:07.003 --> 00:03:11.002
but there's also two other pages, guests and rooms.

77
00:03:11.002 --> 00:03:12.008
And these provide information

78
00:03:12.008 --> 00:03:15.000
about the different guests staying at the hotel

79
00:03:15.000 --> 00:03:17.004
and the rooms that are available.

80
00:03:17.004 --> 00:03:20.008
We're going to update our bookings.html page

81
00:03:20.008 --> 00:03:24.004
to add links to these pages within its menu.

82
00:03:24.004 --> 00:03:26.008
You can see that here.

83
00:03:26.008 --> 00:03:30.006
Let's just go ahead and we'll add in the links.

84
00:03:30.006 --> 00:03:32.008
And then these pages will be available

85
00:03:32.008 --> 00:03:35.009
within the web application.

86
00:03:35.009 --> 00:03:38.005
Now that we've made the updates to our app,

87
00:03:38.005 --> 00:03:40.008
let's head over to the terminal,

88
00:03:40.008 --> 00:03:45.002
and we can commit them to the hotel-webapp repository.

89
00:03:45.002 --> 00:03:47.009
Once again, I'll stage our changes,

90
00:03:47.009 --> 00:03:49.003
then I'll create the commit.

91
00:03:49.003 --> 00:03:53.008
I'll say we're updating the nav links.

92
00:03:53.008 --> 00:03:57.000
We'll go ahead and push these changes over to GitHub,

93
00:03:57.000 --> 00:04:00.000
to trigger our pipeline.

94
00:04:00.000 --> 00:04:00.008
All right.

95
00:04:00.008 --> 00:04:02.003
Now let's navigate to Jenkins,

96
00:04:02.003 --> 00:04:06.002
so that we can watch the pipeline execute.

97
00:04:06.002 --> 00:04:07.000
Okay.

98
00:04:07.000 --> 00:04:08.006
Jenkins is queuing up the build.

99
00:04:08.006 --> 00:04:12.003
So let's head into the hotel-webapp pipeline.

100
00:04:12.003 --> 00:04:17.002
And we can see it's already executing.

101
00:04:17.002 --> 00:04:20.007
And it's getting ready to trigger the deploy pipeline.

102
00:04:20.007 --> 00:04:21.007
Let's head over there,

103
00:04:21.007 --> 00:04:29.001
and we can watch the automated deployments.

104
00:04:29.001 --> 00:04:29.009
Okay.

105
00:04:29.009 --> 00:04:32.000
It just triggered the production deployments.

106
00:04:32.000 --> 00:04:33.004
Let's wait a few minutes,

107
00:04:33.004 --> 00:04:37.002
and then we'll check the status of our apps.

108
00:04:37.002 --> 00:04:38.001
All right.

109
00:04:38.001 --> 00:04:39.004
Let's see if the changes were deployed

110
00:04:39.004 --> 00:04:43.001
to the staging environment.

111
00:04:43.001 --> 00:04:44.000
Okay.

112
00:04:44.000 --> 00:04:46.006
There, we can see the links to the new pages

113
00:04:46.006 --> 00:04:47.009
and we can hit them,

114
00:04:47.009 --> 00:04:50.006
which we'll call back to the different microservices

115
00:04:50.006 --> 00:04:54.005
that provide the information displayed on the page.

116
00:04:54.005 --> 00:04:55.004
Now, let's see,

117
00:04:55.004 --> 00:04:59.003
how the automated deployment to production is doing

118
00:04:59.003 --> 00:05:00.004
There we see the links,

119
00:05:00.004 --> 00:05:01.007
and it looks like the release

120
00:05:01.007 --> 00:05:05.001
has been performed to production.

121
00:05:05.001 --> 00:05:08.001
So now we've built an end-to-end delivery pipeline

122
00:05:08.001 --> 00:05:10.000
for a modern Java application

123
00:05:10.000 --> 00:05:13.002
that is architected to use microservices.

124
00:05:13.002 --> 00:05:16.004
The mechanics of our delivery process are now automated,

125
00:05:16.004 --> 00:05:19.008
and we can consistently and safely repeat them.

126
00:05:19.008 --> 00:05:22.005
When developing software this is a game changer

127
00:05:22.005 --> 00:05:25.008
that will accelerate the pace and tempo of your project,

128
00:05:25.008 --> 00:05:28.000
your team, and your organization.

