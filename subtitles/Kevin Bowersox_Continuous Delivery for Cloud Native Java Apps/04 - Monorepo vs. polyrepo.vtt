WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] The source code repository

2
00:00:02.001 --> 00:00:05.009
is a key component within our continuous delivery process

3
00:00:05.009 --> 00:00:08.003
because it's where team members integrate code

4
00:00:08.003 --> 00:00:12.002
that the pipeline retrieves when it kicks off the build.

5
00:00:12.002 --> 00:00:13.009
To function well in a pipeline,

6
00:00:13.009 --> 00:00:17.005
the code repository must be hosted in a central location

7
00:00:17.005 --> 00:00:19.009
that provides other features like security,

8
00:00:19.009 --> 00:00:23.000
pull requests, and code reviews.

9
00:00:23.000 --> 00:00:26.002
These features are commonly found in hosting platforms

10
00:00:26.002 --> 00:00:28.000
like GitHub, which we'll be using

11
00:00:28.000 --> 00:00:30.007
to manage our course project.

12
00:00:30.007 --> 00:00:33.004
Since we're using a microservice architecture,

13
00:00:33.004 --> 00:00:35.007
we now have four separate code bases,

14
00:00:35.007 --> 00:00:38.002
one for each of the services.

15
00:00:38.002 --> 00:00:40.005
So the choice isn't as straightforward

16
00:00:40.005 --> 00:00:42.006
as storing the code for a monolith,

17
00:00:42.006 --> 00:00:45.007
which by default would be stored in a single repository

18
00:00:45.007 --> 00:00:48.007
that contains the entire code base.

19
00:00:48.007 --> 00:00:50.005
Instead, we'll need to choose

20
00:00:50.005 --> 00:00:52.002
between storing our service code

21
00:00:52.002 --> 00:00:55.008
in a monorepo or a polyrepo.

22
00:00:55.008 --> 00:00:58.000
Let's talk about these two options,

23
00:00:58.000 --> 00:01:00.005
starting with the monorepo.

24
00:01:00.005 --> 00:01:04.003
A monorepo stores the code for every service in the system

25
00:01:04.003 --> 00:01:06.006
in one large repository.

26
00:01:06.006 --> 00:01:08.009
This helps make the code base more accessible

27
00:01:08.009 --> 00:01:10.008
to the entire development team,

28
00:01:10.008 --> 00:01:14.002
since it's easy to pull all the code at once.

29
00:01:14.002 --> 00:01:18.000
Developers can easily review the code in other services,

30
00:01:18.000 --> 00:01:20.001
and if there's shared code, they can change it

31
00:01:20.001 --> 00:01:22.008
directly inside the code base.

32
00:01:22.008 --> 00:01:25.007
There are drawbacks to a monorepo.

33
00:01:25.007 --> 00:01:28.001
Changing shared code in the repository

34
00:01:28.001 --> 00:01:30.001
can impact multiple services

35
00:01:30.001 --> 00:01:33.008
and trigger large refactoring efforts across the code.

36
00:01:33.008 --> 00:01:36.009
Also, depending upon the CI platform you use,

37
00:01:36.009 --> 00:01:39.008
it may need a special plugin or customization

38
00:01:39.008 --> 00:01:42.004
to handle the monorepo.

39
00:01:42.004 --> 00:01:45.007
The alternative to a monorepo is a polyrepo,

40
00:01:45.007 --> 00:01:49.007
which stores each service in its own repository.

41
00:01:49.007 --> 00:01:52.005
Having a separate repository for each service

42
00:01:52.005 --> 00:01:55.001
enforces decoupling between them.

43
00:01:55.001 --> 00:01:57.008
It also helps keep the services independent

44
00:01:57.008 --> 00:01:59.009
and can eliminate some of the problems caused

45
00:01:59.009 --> 00:02:01.009
by sharing code.

46
00:02:01.009 --> 00:02:04.004
Unfortunately, when using multirepos,

47
00:02:04.004 --> 00:02:06.007
it becomes harder to access and evaluate

48
00:02:06.007 --> 00:02:08.005
the entire code base.

49
00:02:08.005 --> 00:02:11.003
That's because it's stored across many repositories,

50
00:02:11.003 --> 00:02:14.007
which might require permissions to access.

51
00:02:14.007 --> 00:02:17.009
In our project, we'll be using the multirepo approach

52
00:02:17.009 --> 00:02:19.004
because it's more straightforward

53
00:02:19.004 --> 00:02:22.006
to work with our CI tool, Jenkins.

54
00:02:22.006 --> 00:02:24.007
So let's dive into our next lesson

55
00:02:24.007 --> 00:02:29.000
to set up our repos for each service inside of GitHub.

