WEBVTT
1
00:00:00.002 --> 00:00:01.008
- [Instructor] Without automation,

2
00:00:01.008 --> 00:00:03.006
the end to end process for releasing

3
00:00:03.006 --> 00:00:07.000
a new feature can be drawn out and cumbersome,

4
00:00:07.000 --> 00:00:08.004
which can get pretty frustrating

5
00:00:08.004 --> 00:00:10.001
for everybody involved.

6
00:00:10.001 --> 00:00:12.001
Within a large enterprise,

7
00:00:12.001 --> 00:00:13.009
it typically includes multiple handoffs

8
00:00:13.009 --> 00:00:16.004
between the development, testing,

9
00:00:16.004 --> 00:00:19.000
security and operations teams,

10
00:00:19.000 --> 00:00:22.002
which each have a step to complete in the process.

11
00:00:22.002 --> 00:00:26.002
These handoffs can spill over into lengthy email chains

12
00:00:26.002 --> 00:00:27.001
about who's on vacation

13
00:00:27.001 --> 00:00:30.006
or when a particular task will be completed.

14
00:00:30.006 --> 00:00:34.002
This tedious process prolongs the delivery of new features,

15
00:00:34.002 --> 00:00:36.004
and it becomes a scramble to make

16
00:00:36.004 --> 00:00:37.009
the release state.

17
00:00:37.009 --> 00:00:39.006
In continuous delivery,

18
00:00:39.006 --> 00:00:41.000
a pipeline is used to accelerate

19
00:00:41.000 --> 00:00:43.005
and remove waste from the process

20
00:00:43.005 --> 00:00:46.001
that takes new code from version control

21
00:00:46.001 --> 00:00:49.007
and makes it available as a new feature for end users.

22
00:00:49.007 --> 00:00:53.002
The pipeline models each step in the delivery process

23
00:00:53.002 --> 00:00:55.009
and automates them to create a rapid,

24
00:00:55.009 --> 00:00:58.001
repeatable and reliable mechanism

25
00:00:58.001 --> 00:01:00.004
for releasing changes to software.

26
00:01:00.004 --> 00:01:03.008
It's designed to identify quality issues and fail quickly

27
00:01:03.008 --> 00:01:06.000
once they're discovered.

28
00:01:06.000 --> 00:01:07.003
This gives us more confidence

29
00:01:07.003 --> 00:01:10.004
in the software that's delivered by the pipeline.

30
00:01:10.004 --> 00:01:12.002
It's important to point out

31
00:01:12.002 --> 00:01:14.007
that every organization's pipeline will look different

32
00:01:14.007 --> 00:01:16.003
because it will be tailored

33
00:01:16.003 --> 00:01:18.007
for their organizational processes.

34
00:01:18.007 --> 00:01:22.002
So let's take a look at a very basic delivery process

35
00:01:22.002 --> 00:01:25.005
and examine where the pipeline fits in.

36
00:01:25.005 --> 00:01:28.004
In this process, we have three phases.

37
00:01:28.004 --> 00:01:29.008
One for the developer workflow,

38
00:01:29.008 --> 00:01:33.002
another for continuous integration, and finally,

39
00:01:33.002 --> 00:01:36.001
one for continuous delivery or deployment.

40
00:01:36.001 --> 00:01:38.001
A change enters the pipeline after

41
00:01:38.001 --> 00:01:40.005
a developer has written and committed

42
00:01:40.005 --> 00:01:44.000
the code for a new feature into the source code repository.

43
00:01:44.000 --> 00:01:45.009
From there, the pipeline advances

44
00:01:45.009 --> 00:01:48.001
to the new version of the source code

45
00:01:48.001 --> 00:01:50.008
through the steps in the continuous integration process,

46
00:01:50.008 --> 00:01:53.002
which outputs an artifact that packages

47
00:01:53.002 --> 00:01:55.008
the new version of the software.

48
00:01:55.008 --> 00:01:57.008
Next, the pipeline progresses

49
00:01:57.008 --> 00:02:00.001
through the steps in the continuous delivery

50
00:02:00.001 --> 00:02:02.004
or deployment stage.

51
00:02:02.004 --> 00:02:05.007
This makes the new software available to end users.

52
00:02:05.007 --> 00:02:08.005
If a step anywhere in the pipeline fails,

53
00:02:08.005 --> 00:02:11.001
the change stops advancing through it,

54
00:02:11.001 --> 00:02:12.008
and feedback is delivered

55
00:02:12.008 --> 00:02:16.009
to the developer regarding the issue with their new feature.

56
00:02:16.009 --> 00:02:19.000
These feedback mechanisms are built

57
00:02:19.000 --> 00:02:21.000
in throughout the pipeline,

58
00:02:21.000 --> 00:02:23.002
so developers quickly get information

59
00:02:23.002 --> 00:02:25.005
about the quality of their software.

60
00:02:25.005 --> 00:02:28.006
As we complete each step in the process,

61
00:02:28.006 --> 00:02:31.002
more confidence in the artifact builds

62
00:02:31.002 --> 00:02:34.004
as we get closer to releasing it to production.

63
00:02:34.004 --> 00:02:37.000
So that's the pipeline at a high level.

64
00:02:37.000 --> 00:02:40.002
Basically, it models the end-to-end process

65
00:02:40.002 --> 00:02:42.000
for releasing a software change

66
00:02:42.000 --> 00:02:44.001
and facilitates its execution through

67
00:02:44.001 --> 00:02:47.000
a heavy dose of automation.

