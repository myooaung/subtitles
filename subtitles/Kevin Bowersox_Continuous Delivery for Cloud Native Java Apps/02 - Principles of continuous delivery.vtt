WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Presenter] There are several principles

2
00:00:01.009 --> 00:00:04.003
that a successful continuous delivery approach

3
00:00:04.003 --> 00:00:05.006
is built upon.

4
00:00:05.006 --> 00:00:09.000
Let's explore them to learn how they influence the practices

5
00:00:09.000 --> 00:00:12.002
teams use to deliver software.

6
00:00:12.002 --> 00:00:15.004
The first principle requires that a repeatable process

7
00:00:15.004 --> 00:00:18.005
has been engineered for how we develop, build

8
00:00:18.005 --> 00:00:20.009
and release our software.

9
00:00:20.009 --> 00:00:24.001
So each time we develop and release a new feature,

10
00:00:24.001 --> 00:00:28.006
the same set of steps are repeated without any variation.

11
00:00:28.006 --> 00:00:32.005
This establishes consistency within our release procedures

12
00:00:32.005 --> 00:00:36.006
that allows the steps to be translated into code.

13
00:00:36.006 --> 00:00:40.006
So repetitive tasks like builds, tests and deployments

14
00:00:40.006 --> 00:00:43.002
are codified so they can be executed

15
00:00:43.002 --> 00:00:47.004
by automated processes running on computers.

16
00:00:47.004 --> 00:00:51.000
This takes the burden of executing them off of people,

17
00:00:51.000 --> 00:00:53.005
but it doesn't mean the people will be replaced.

18
00:00:53.005 --> 00:00:57.005
It just frees them up to focus on more valuable work.

19
00:00:57.005 --> 00:00:59.006
That takes us to version control,

20
00:00:59.006 --> 00:01:02.008
which is the single source of truth for project artifacts

21
00:01:02.008 --> 00:01:07.003
like source code, scripts and configuration files.

22
00:01:07.003 --> 00:01:10.000
Placing these artifacts in diversion control

23
00:01:10.000 --> 00:01:13.005
allows the team and automation to collaborate better

24
00:01:13.005 --> 00:01:15.006
because everything related to the project

25
00:01:15.006 --> 00:01:20.003
is in one managed location that is accessible to everyone.

26
00:01:20.003 --> 00:01:22.003
It's also the point where developers

27
00:01:22.003 --> 00:01:24.001
commit many small changes,

28
00:01:24.001 --> 00:01:27.002
and that event of committing triggers their delivery

29
00:01:27.002 --> 00:01:30.000
through the automated pipeline.

30
00:01:30.000 --> 00:01:32.007
Keeping changes small in size and numbers

31
00:01:32.007 --> 00:01:35.001
does two important things.

32
00:01:35.001 --> 00:01:38.001
First, releases become more frequent, stable

33
00:01:38.001 --> 00:01:39.005
and less stressful

34
00:01:39.005 --> 00:01:43.004
because we exercise the practice more often.

35
00:01:43.004 --> 00:01:46.001
Second, risk actually decreases

36
00:01:46.001 --> 00:01:49.002
because we're not releasing multiple large change sets

37
00:01:49.002 --> 00:01:50.006
all at once.

38
00:01:50.006 --> 00:01:52.002
This means there's a lot less

39
00:01:52.002 --> 00:01:55.005
that can go wrong with a release.

40
00:01:55.005 --> 00:01:57.003
If a problem does arise,

41
00:01:57.003 --> 00:01:59.004
it's easier to restore the system

42
00:01:59.004 --> 00:02:02.000
because we can easily identify the problem

43
00:02:02.000 --> 00:02:05.001
amongst the smaller batch and resolve it.

44
00:02:05.001 --> 00:02:07.007
This leads us to our final three principles,

45
00:02:07.007 --> 00:02:10.000
which help us avoid those types of problems

46
00:02:10.000 --> 00:02:12.002
in the first place.

47
00:02:12.002 --> 00:02:16.001
To do this, we engineer quality into the delivery process

48
00:02:16.001 --> 00:02:19.000
to verify each change that flows through it

49
00:02:19.000 --> 00:02:21.002
is production-worthy.

50
00:02:21.002 --> 00:02:23.006
This is achieved by shifting practices

51
00:02:23.006 --> 00:02:25.007
like linting and automated testing

52
00:02:25.007 --> 00:02:27.003
to the front of the process,

53
00:02:27.003 --> 00:02:30.008
where we can identify and fix problems earlier.

54
00:02:30.008 --> 00:02:33.004
So we'll no longer discover a bunch of issues

55
00:02:33.004 --> 00:02:35.005
in the final days before release,

56
00:02:35.005 --> 00:02:39.001
when it's too late to actually fix them.

57
00:02:39.001 --> 00:02:41.003
Continuous delivery also focuses

58
00:02:41.003 --> 00:02:44.006
on the quality of the team's delivery processes,

59
00:02:44.006 --> 00:02:48.006
which are constantly re-engineered and improved upon.

60
00:02:48.006 --> 00:02:51.005
If something does go wrong within the process,

61
00:02:51.005 --> 00:02:53.004
the situation is evaluated,

62
00:02:53.004 --> 00:02:57.000
and ideas from across the organization are collected

63
00:02:57.000 --> 00:02:59.000
to introduce better practices

64
00:02:59.000 --> 00:03:01.003
that fix the problem in the long term

65
00:03:01.003 --> 00:03:04.006
and prevent it from ever happening again.

66
00:03:04.006 --> 00:03:07.005
The release process is constantly evolving

67
00:03:07.005 --> 00:03:09.004
to optimize its stability

68
00:03:09.004 --> 00:03:13.007
and ultimately the quality of the software it delivers.

69
00:03:13.007 --> 00:03:15.006
That doesn't happen in a vacuum.

70
00:03:15.006 --> 00:03:18.004
It requires collaboration from everyone involved

71
00:03:18.004 --> 00:03:22.005
with developing, testing and releasing the software.

72
00:03:22.005 --> 00:03:25.009
So regardless of whether you work on a development, testing

73
00:03:25.009 --> 00:03:29.001
or operations team, in continuous delivery,

74
00:03:29.001 --> 00:03:32.003
you have a common goal to release higher quality software

75
00:03:32.003 --> 00:03:35.000
faster and more reliably.

