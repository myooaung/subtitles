WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Now, that we've explored

2
00:00:01.008 --> 00:00:03.003
how Maven builds work,

3
00:00:03.003 --> 00:00:05.001
let's package our guest service

4
00:00:05.001 --> 00:00:10.000
for the land and hotel application into a Maven project.

5
00:00:10.000 --> 00:00:12.003
At the moment the source code for the project

6
00:00:12.003 --> 00:00:15.005
is placed inside the Maven standard directories,

7
00:00:15.005 --> 00:00:18.003
but it's missing some key ingredients like a POM

8
00:00:18.003 --> 00:00:20.007
and the Maven Wrapper.

9
00:00:20.007 --> 00:00:22.007
Let's use the Spring Initializer

10
00:00:22.007 --> 00:00:25.003
to get those things in place.

11
00:00:25.003 --> 00:00:27.001
So, on the Maven Initializer,

12
00:00:27.001 --> 00:00:30.003
I'm going to indicate that we're using a Maven project,

13
00:00:30.003 --> 00:00:32.006
then we'll need to provide a package name,

14
00:00:32.006 --> 00:00:37.001
which will once again, become .linkedin.javacd.

15
00:00:37.001 --> 00:00:38.008
Then for the name of the artifact,

16
00:00:38.008 --> 00:00:42.002
I'm going to use guest dash service.

17
00:00:42.002 --> 00:00:44.006
And we can come down here once again

18
00:00:44.006 --> 00:00:48.007
and remove that suffix from our package name.

19
00:00:48.007 --> 00:00:50.003
Okay, now let's go ahead,

20
00:00:50.003 --> 00:00:52.006
we'll add the dependencies in.

21
00:00:52.006 --> 00:00:57.008
We need Spring Web, we also need Spring Data JPA.

22
00:00:57.008 --> 00:01:00.002
Then we're going to include the actuator

23
00:01:00.002 --> 00:01:02.003
and then finally H2.

24
00:01:02.003 --> 00:01:04.002
Okay, once all that's in place

25
00:01:04.002 --> 00:01:05.000
just go ahead

26
00:01:05.000 --> 00:01:06.009
and click on this button to download

27
00:01:06.009 --> 00:01:10.004
the zip file with the Maven project.

28
00:01:10.004 --> 00:01:13.006
From there, we can navigate over to our download directory

29
00:01:13.006 --> 00:01:15.001
where we'll find the zip file.

30
00:01:15.001 --> 00:01:17.004
I'm just going to extract it here

31
00:01:17.004 --> 00:01:22.006
and then I'll copy the extracted folder named guest service.

32
00:01:22.006 --> 00:01:24.003
Then I'm going to take that over

33
00:01:24.003 --> 00:01:26.008
to our exercise files directory

34
00:01:26.008 --> 00:01:30.009
and I'm going to overlay our existing guest service folder.

35
00:01:30.009 --> 00:01:34.002
So, here I'll merge so that we get the new files,

36
00:01:34.002 --> 00:01:36.005
then I'll overwrite our Git ignore file,

37
00:01:36.005 --> 00:01:39.000
and then I'll skip overriding the source

38
00:01:39.000 --> 00:01:41.003
since we already have it.

39
00:01:41.003 --> 00:01:43.003
Okay, let's head to the terminal

40
00:01:43.003 --> 00:01:47.005
and we can see what's within that directory.

41
00:01:47.005 --> 00:01:50.003
There's the Maven Wrapper that Spring provided.

42
00:01:50.003 --> 00:01:52.005
And you'll also notice a pom.xml

43
00:01:52.005 --> 00:01:54.008
that was provided by Spring.

44
00:01:54.008 --> 00:01:57.008
Let's take a look at that POM.

45
00:01:57.008 --> 00:02:00.002
If you look closely at this POM,

46
00:02:00.002 --> 00:02:01.009
you'll recall that it's very similar

47
00:02:01.009 --> 00:02:04.005
to what we saw earlier in the course.

48
00:02:04.005 --> 00:02:07.006
There's the Spring Boot Starter parent POM,

49
00:02:07.006 --> 00:02:10.002
there's some of the Starter dependencies we talked about

50
00:02:10.002 --> 00:02:11.002
for quickly getting up

51
00:02:11.002 --> 00:02:13.004
and running with Spring projects.

52
00:02:13.004 --> 00:02:14.009
And here at the bottom

53
00:02:14.009 --> 00:02:18.001
you'll see the Spring Boot Maven plugin.

54
00:02:18.001 --> 00:02:20.009
So it's going to provide some additional goals

55
00:02:20.009 --> 00:02:25.006
that we can include within our build.

56
00:02:25.006 --> 00:02:26.006
Let's go ahead

57
00:02:26.006 --> 00:02:28.009
and we'll use the build plan plugin

58
00:02:28.009 --> 00:02:31.003
to take a look at some of those.

59
00:02:31.003 --> 00:02:34.007
So, here we can see how our build will execute

60
00:02:34.007 --> 00:02:36.009
in all the plugin bindings.

61
00:02:36.009 --> 00:02:40.007
It looks very similar to when we packaged a jar.

62
00:02:40.007 --> 00:02:43.004
But you will notice one difference,

63
00:02:43.004 --> 00:02:45.009
within the package phase

64
00:02:45.009 --> 00:02:48.008
we're going to execute the repackage goal

65
00:02:48.008 --> 00:02:51.006
on the Spring Boot Maven plugin.

66
00:02:51.006 --> 00:02:55.001
And this is what's going to build that executable jar

67
00:02:55.001 --> 00:02:58.001
that includes all of our different dependencies

68
00:02:58.001 --> 00:03:03.000
in our embedded server.

69
00:03:03.000 --> 00:03:04.002
So let's go ahead

70
00:03:04.002 --> 00:03:12.002
and we'll package the application into that executable jar.

71
00:03:12.002 --> 00:03:14.008
Okay, there we can see that the jar was placed

72
00:03:14.008 --> 00:03:17.009
within our target directory.

73
00:03:17.009 --> 00:03:18.007
I'm going to go ahead

74
00:03:18.007 --> 00:03:21.007
and I'll navigate into the target directory.

75
00:03:21.007 --> 00:03:22.007
And from here,

76
00:03:22.007 --> 00:03:25.006
we're going to launch our executable jar

77
00:03:25.006 --> 00:03:26.009
using plain old Java.

78
00:03:26.009 --> 00:03:29.006
So I'll use the Java jar command,

79
00:03:29.006 --> 00:03:34.006
then I'll add the profile for Spring.

80
00:03:34.006 --> 00:03:37.000
That's going to be our local profile

81
00:03:37.000 --> 00:03:40.005
and then I just need to provide the name of the jar,

82
00:03:40.005 --> 00:03:41.006
there it is.

83
00:03:41.006 --> 00:03:42.008
Okay, let's go ahead,

84
00:03:42.008 --> 00:03:47.000
we can launch the application.

85
00:03:47.000 --> 00:03:49.001
And there we see that the service is up

86
00:03:49.001 --> 00:03:52.002
and accepting traffic.

87
00:03:52.002 --> 00:03:53.009
If we'd like we can go ahead

88
00:03:53.009 --> 00:03:55.001
and open a browser

89
00:03:55.001 --> 00:03:56.008
and hit that service.

90
00:03:56.008 --> 00:04:01.005
It's running on local host at port 8,882.

91
00:04:01.005 --> 00:04:02.005
And then the end point

92
00:04:02.005 --> 00:04:07.001
is API forward slash guest dash service

93
00:04:07.001 --> 00:04:09.005
and then guest.

94
00:04:09.005 --> 00:04:12.001
All right, so, there we see some Jason served up

95
00:04:12.001 --> 00:04:15.001
by our microservice.

96
00:04:15.001 --> 00:04:16.008
So, that's the last build

97
00:04:16.008 --> 00:04:19.006
that we needed to establish for the services

98
00:04:19.006 --> 00:04:21.007
in our land and hotel application.

99
00:04:21.007 --> 00:04:23.006
This time we use Maven.

100
00:04:23.006 --> 00:04:26.005
So, at this point we should probably standardize

101
00:04:26.005 --> 00:04:27.008
on a single build tool

102
00:04:27.008 --> 00:04:31.002
for all the microservices within our application.

103
00:04:31.002 --> 00:04:33.002
So, let's go forward using Maven

104
00:04:33.002 --> 00:04:35.008
throughout the rest of the course.

105
00:04:35.008 --> 00:04:37.004
If you would like go back

106
00:04:37.004 --> 00:04:39.004
and try to switch over the room service

107
00:04:39.004 --> 00:04:41.001
from Gradle to Maven,

108
00:04:41.001 --> 00:04:43.009
or you can just pick up with the exercise files

109
00:04:43.009 --> 00:04:45.000
in our next lesson.

