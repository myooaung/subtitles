WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] Now that we've covered

2
00:00:01.006 --> 00:00:04.001
some of the main concepts behind Gradle,

3
00:00:04.001 --> 00:00:06.009
let's use it to build the room service project

4
00:00:06.009 --> 00:00:10.000
in our land and hotel application.

5
00:00:10.000 --> 00:00:12.009
We currently have the source code for the project,

6
00:00:12.009 --> 00:00:16.006
but it's not set up to build with a tool like Gradle.

7
00:00:16.006 --> 00:00:20.001
To help us with that, we can use the Spring Initializer

8
00:00:20.001 --> 00:00:23.002
found at start.spring.io.

9
00:00:23.002 --> 00:00:26.000
It's a web-based tool that can help us quickly launch

10
00:00:26.000 --> 00:00:30.004
a new spring project that builds with Gradle or Maven.

11
00:00:30.004 --> 00:00:33.001
All we need to do is provide a bit of information

12
00:00:33.001 --> 00:00:34.007
about our project.

13
00:00:34.007 --> 00:00:37.007
So I'm going to indicate that we'll be using Gradle

14
00:00:37.007 --> 00:00:39.005
to build our project.

15
00:00:39.005 --> 00:00:41.009
And then I'm going to provide a group ID

16
00:00:41.009 --> 00:00:45.007
of com.linkedin.javacd.

17
00:00:45.007 --> 00:00:47.009
Next, for the artifact ID,

18
00:00:47.009 --> 00:00:51.006
I'm going to type room-service,

19
00:00:51.006 --> 00:00:53.002
and then I'm going to go down here

20
00:00:53.002 --> 00:00:55.000
and adjust the package name

21
00:00:55.000 --> 00:00:57.008
to remove the room service suffix,

22
00:00:57.008 --> 00:01:02.001
so it will just be com.linkedin.javacd.

23
00:01:02.001 --> 00:01:04.005
Next, let's add some dependencies

24
00:01:04.005 --> 00:01:06.004
that our project will require.

25
00:01:06.004 --> 00:01:08.004
So, just click on this button

26
00:01:08.004 --> 00:01:10.004
and then type Spring Web,

27
00:01:10.004 --> 00:01:13.005
that's our first dependency we'll need.

28
00:01:13.005 --> 00:01:15.005
We'll also need the actuator,

29
00:01:15.005 --> 00:01:19.000
which will provide us some metrics about our project.

30
00:01:19.000 --> 00:01:22.006
And then we can include Spring Data JPA.

31
00:01:22.006 --> 00:01:27.002
And then finally, the H2 embedded database.

32
00:01:27.002 --> 00:01:29.001
Once you've provided this information

33
00:01:29.001 --> 00:01:31.008
to the Spring Initializer, click on this button

34
00:01:31.008 --> 00:01:35.007
to download a zip file that contains all the files

35
00:01:35.007 --> 00:01:38.001
for the project.

36
00:01:38.001 --> 00:01:40.005
So I'll just go ahead, click on OK,

37
00:01:40.005 --> 00:01:45.002
and then I'm going to navigate to our downloads directory

38
00:01:45.002 --> 00:01:47.004
where I'll find that zip file.

39
00:01:47.004 --> 00:01:49.009
Here I'm just going to extract it

40
00:01:49.009 --> 00:01:52.009
and then I'll copy the room service folder.

41
00:01:52.009 --> 00:01:54.008
Now I'm going to navigate back

42
00:01:54.008 --> 00:01:57.006
to our exercise files directory,

43
00:01:57.006 --> 00:02:00.002
where I'm going to overlay the folder

44
00:02:00.002 --> 00:02:04.002
on top of the existing room service directory.

45
00:02:04.002 --> 00:02:07.007
So here I'll merge in the new files,

46
00:02:07.007 --> 00:02:10.009
then I'm going to overwrite the get ignore file.

47
00:02:10.009 --> 00:02:13.003
And then finally, I'm going to skip

48
00:02:13.003 --> 00:02:15.004
overriding the source directory

49
00:02:15.004 --> 00:02:17.006
because we already have the code

50
00:02:17.006 --> 00:02:21.002
for the microservice within our project.

51
00:02:21.002 --> 00:02:23.007
Okay, let's head over to the terminal

52
00:02:23.007 --> 00:02:26.007
and take a peek at our project now.

53
00:02:26.007 --> 00:02:29.001
You'll notice that inside the project,

54
00:02:29.001 --> 00:02:33.003
there's the Gradle wrapper, so we can use that to build.

55
00:02:33.003 --> 00:02:36.002
Spring also provided the build script.

56
00:02:36.002 --> 00:02:40.004
We see the build.gradle file there.

57
00:02:40.004 --> 00:02:44.004
Let's take a peak at the build script they provided.

58
00:02:44.004 --> 00:02:48.001
You'll notice that the build script includes a few plugins.

59
00:02:48.001 --> 00:02:50.004
The first is the spring boot plugin,

60
00:02:50.004 --> 00:02:52.000
which will provide some tasks

61
00:02:52.000 --> 00:02:55.008
for packaging our spring application.

62
00:02:55.008 --> 00:02:58.008
The dependency management plugin will help us

63
00:02:58.008 --> 00:03:00.006
get the right versions of our library

64
00:03:00.006 --> 00:03:02.008
so we can keep them all aligned.

65
00:03:02.008 --> 00:03:04.008
And then finally, the Java plugin

66
00:03:04.008 --> 00:03:06.003
is going to help us with things

67
00:03:06.003 --> 00:03:10.002
like compiling our source code for the project.

68
00:03:10.002 --> 00:03:12.001
Within the dependency section,

69
00:03:12.001 --> 00:03:15.007
you'll also notice that some starter dependencies were added

70
00:03:15.007 --> 00:03:19.006
that aligned to those we entered on the Spring Initializer.

71
00:03:19.006 --> 00:03:22.006
These will help us quickly add the new projects

72
00:03:22.006 --> 00:03:26.009
into our application and provide some default configurations

73
00:03:26.009 --> 00:03:31.008
that get us up and running quickly.

74
00:03:31.008 --> 00:03:33.008
Let's take a look at this another way

75
00:03:33.008 --> 00:03:36.004
by using the task, task.

76
00:03:36.004 --> 00:03:39.000
This is going to show us some of the tasks

77
00:03:39.000 --> 00:03:45.000
that were added into our project by the spring boot plugin.

78
00:03:45.000 --> 00:03:48.001
If we scroll up, you can see a few of them.

79
00:03:48.001 --> 00:03:49.005
There they are.

80
00:03:49.005 --> 00:03:54.000
The most important of these tasks is the bootJar task.

81
00:03:54.000 --> 00:03:58.000
It's what's going to help build the executable jar

82
00:03:58.000 --> 00:04:00.008
that contains the embedded web server.

83
00:04:00.008 --> 00:04:04.006
So it's going to package everything into that one archive

84
00:04:04.006 --> 00:04:08.009
that we can use to launch our application.

85
00:04:08.009 --> 00:04:11.009
Okay, let's go ahead and we'll use the Gradle wrapper

86
00:04:11.009 --> 00:04:14.000
to build our project.

87
00:04:14.000 --> 00:04:17.000
There we can see Gradle pulling down the dependencies

88
00:04:17.000 --> 00:04:19.001
required for our build.

89
00:04:19.001 --> 00:04:22.008
Looks like it's starting to do some compilation,

90
00:04:22.008 --> 00:04:26.003
and there we can see the build completed successfully.

91
00:04:26.003 --> 00:04:28.004
Let's take a look at what was built.

92
00:04:28.004 --> 00:04:34.000
So I'm going to write out the structure of our build folder.

93
00:04:34.000 --> 00:04:36.006
And there you see our executable jar

94
00:04:36.006 --> 00:04:40.005
was placed inside the libs directory.

95
00:04:40.005 --> 00:04:43.008
The executable jar contains everything we need

96
00:04:43.008 --> 00:04:46.002
to launch the application.

97
00:04:46.002 --> 00:04:52.002
So if we navigate into that directory,

98
00:04:52.002 --> 00:04:55.001
we can just go ahead and use plain old Java

99
00:04:55.001 --> 00:04:57.001
to launch the application.

100
00:04:57.001 --> 00:04:59.009
So I'll type java -jar,

101
00:04:59.009 --> 00:05:02.008
then I'm going to set our spring profile

102
00:05:02.008 --> 00:05:04.009
to the local profile,

103
00:05:04.009 --> 00:05:08.000
and then we just need to provide the name of the jar file.

104
00:05:08.000 --> 00:05:10.002
There's our executable jar.

105
00:05:10.002 --> 00:05:12.004
All right, let's go ahead, we'll kick off this command

106
00:05:12.004 --> 00:05:18.006
and that will launch our microservice.

107
00:05:18.006 --> 00:05:22.007
There we can see it's up and running and accepting traffic.

108
00:05:22.007 --> 00:05:25.008
So now we've seen how to build an executable jar

109
00:05:25.008 --> 00:05:29.000
for a spring boot application with Gradle.

110
00:05:29.000 --> 00:05:33.000
You'll notice how easy it is to get up and running

111
00:05:33.000 --> 00:05:37.003
when we package our modern Java applications in this format.

112
00:05:37.003 --> 00:05:39.006
So let's move on to the next chapter

113
00:05:39.006 --> 00:05:42.000
to see how it's done with Maven.

