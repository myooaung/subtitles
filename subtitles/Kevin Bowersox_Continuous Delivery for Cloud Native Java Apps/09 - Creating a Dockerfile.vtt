WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] To package our application within a container

2
00:00:03.000 --> 00:00:04.003
that runs on Docker,

3
00:00:04.003 --> 00:00:07.001
we'll first need to create a Docker file.

4
00:00:07.001 --> 00:00:09.009
A Docker file contains all of the commands necessary

5
00:00:09.009 --> 00:00:11.006
to assemble the container image

6
00:00:11.006 --> 00:00:15.005
that we'll package our Java application into.

7
00:00:15.005 --> 00:00:18.000
Within Eclipse, we can begin to create the file

8
00:00:18.000 --> 00:00:20.009
by right clicking on our project, going to new,

9
00:00:20.009 --> 00:00:23.005
and then coming down here to file.

10
00:00:23.005 --> 00:00:27.001
Within this dialog, we'll just type the name Docker file.

11
00:00:27.001 --> 00:00:29.005
Make sure that the F is lowercase.

12
00:00:29.005 --> 00:00:31.000
Once you have the name in place,

13
00:00:31.000 --> 00:00:32.005
then just go ahead and hit finish

14
00:00:32.005 --> 00:00:36.000
and the Docker file will get added to our project.

15
00:00:36.000 --> 00:00:37.008
All right, now we can add some commands

16
00:00:37.008 --> 00:00:39.005
into the Docker file.

17
00:00:39.005 --> 00:00:42.007
The first line in a Docker file indicates the base image

18
00:00:42.007 --> 00:00:45.007
that we'll be creating our image from.

19
00:00:45.007 --> 00:00:49.006
To specify the base image, just type the instruction from,

20
00:00:49.006 --> 00:00:52.005
and then provide the tag of an image

21
00:00:52.005 --> 00:00:55.004
that we would like to base our new image on.

22
00:00:55.004 --> 00:01:00.003
So here I'm going to use an open JDK version 11 image.

23
00:01:00.003 --> 00:01:03.002
It's going to contain a JDK that we can use

24
00:01:03.002 --> 00:01:07.001
to run our application inside the container.

25
00:01:07.001 --> 00:01:09.004
Next we'll set the work directory.

26
00:01:09.004 --> 00:01:12.007
It's going to cause all of the instructions after this point

27
00:01:12.007 --> 00:01:16.001
to be executed within the directory that we specify.

28
00:01:16.001 --> 00:01:19.006
Here it's going to be the app directory inside the root

29
00:01:19.006 --> 00:01:22.007
of the containers file system.

30
00:01:22.007 --> 00:01:26.004
After that, we're going to add an argument named JAR_FILE

31
00:01:26.004 --> 00:01:28.001
to the container.

32
00:01:28.001 --> 00:01:31.000
This is a variable that we can provide the value of

33
00:01:31.000 --> 00:01:34.001
when we execute our Docker build command.

34
00:01:34.001 --> 00:01:37.000
This helps to make our container image more flexible

35
00:01:37.000 --> 00:01:39.004
and we'll be able to reuse this Docker file

36
00:01:39.004 --> 00:01:43.000
for all of the services in our application.

37
00:01:43.000 --> 00:01:47.000
We're going to use this argument to copy our JAR_FILE

38
00:01:47.000 --> 00:01:48.007
into the container.

39
00:01:48.007 --> 00:01:51.002
So we'll use the copy instruction

40
00:01:51.002 --> 00:01:54.005
and then we'll point to the jar file argument

41
00:01:54.005 --> 00:01:56.005
and then we'll copy that jar file

42
00:01:56.005 --> 00:02:01.006
that's provided to the Docker build into the app.jar file

43
00:02:01.006 --> 00:02:03.003
located within the container.

44
00:02:03.003 --> 00:02:06.009
So this is going to be our executable jar.

45
00:02:06.009 --> 00:02:11.005
Then we're going to expose port 8080 on the container.

46
00:02:11.005 --> 00:02:15.001
So this is where the container will listen for TCP traffic.

47
00:02:15.001 --> 00:02:17.004
And you'll remember that our apps are set up

48
00:02:17.004 --> 00:02:19.004
to be bound to port 8080.

49
00:02:19.004 --> 00:02:23.000
So all the traffic will be forwarded into the app.

50
00:02:23.000 --> 00:02:25.003
Finally, we'll add an entry point.

51
00:02:25.003 --> 00:02:27.008
This specifies the command that will be run

52
00:02:27.008 --> 00:02:29.009
when the container starts up.

53
00:02:29.009 --> 00:02:32.005
We just need to place each segment of the command

54
00:02:32.005 --> 00:02:34.004
within square brackets.

55
00:02:34.004 --> 00:02:37.004
The command we'll use for our entry point is going

56
00:02:37.004 --> 00:02:39.008
to launch the application with Java.

57
00:02:39.008 --> 00:02:43.003
So first I'll type Java, then I'll put a comma

58
00:02:43.003 --> 00:02:47.003
and then the next segment of the command, which is -jar

59
00:02:47.003 --> 00:02:50.004
and then we just need to provide the path

60
00:02:50.004 --> 00:02:51.009
to our application.

61
00:02:51.009 --> 00:02:54.006
So it's located in the app directory.

62
00:02:54.006 --> 00:03:00.000
And then the file we want to launch is app.jar.

63
00:03:00.000 --> 00:03:02.009
Okay, that's everything we need for the Docker file,

64
00:03:02.009 --> 00:03:05.003
which will be used to build our container image

65
00:03:05.003 --> 00:03:07.000
that runs our microservices.

