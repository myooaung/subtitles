WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Narrator] In the next two chapters of the course,

2
00:00:02.005 --> 00:00:05.000
we're going to explore Maven and Gradle,

3
00:00:05.000 --> 00:00:08.007
which are two popular build tools used with Java.

4
00:00:08.007 --> 00:00:11.006
Before diving in to those specific technologies,

5
00:00:11.006 --> 00:00:14.002
let's take a high-level look at what we can expect

6
00:00:14.002 --> 00:00:17.003
from a build tool and how they're used.

7
00:00:17.003 --> 00:00:20.000
At a high level, build tools allow us to define

8
00:00:20.000 --> 00:00:23.006
how our software project is converted into an artifact

9
00:00:23.006 --> 00:00:27.008
that we can distribute and run on other platforms.

10
00:00:27.008 --> 00:00:30.007
It makes this process repeatable by allowing us

11
00:00:30.007 --> 00:00:34.002
to define a configuration file or a build script

12
00:00:34.002 --> 00:00:36.008
that contains information about our project

13
00:00:36.008 --> 00:00:39.009
and the tasks necessary to turn its source code

14
00:00:39.009 --> 00:00:42.001
into an artifact.

15
00:00:42.001 --> 00:00:45.000
Using the configuration file, the build tool can then

16
00:00:45.000 --> 00:00:47.004
automate the execution of those tasks

17
00:00:47.004 --> 00:00:50.002
to ensure that every time we perform a build,

18
00:00:50.002 --> 00:00:53.002
it's executed consistently.

19
00:00:53.002 --> 00:00:56.002
Most build tools have an ecosystem of plugins

20
00:00:56.002 --> 00:00:58.009
that can be included within our configuration file

21
00:00:58.009 --> 00:01:01.003
to easily perform different actions

22
00:01:01.003 --> 00:01:03.008
during our build lifecycle.

23
00:01:03.008 --> 00:01:06.001
Another great feature of some build tools,

24
00:01:06.001 --> 00:01:07.005
like Gradle and Maven,

25
00:01:07.005 --> 00:01:10.001
is their dependency management systems.

26
00:01:10.001 --> 00:01:13.003
These make it much easier to include external libraries

27
00:01:13.003 --> 00:01:16.000
within our projects.

28
00:01:16.000 --> 00:01:19.005
Here's how dependency management works at a high level.

29
00:01:19.005 --> 00:01:21.006
Imagine that we wanted to use Selenium

30
00:01:21.006 --> 00:01:23.009
for some testing within our project.

31
00:01:23.009 --> 00:01:26.005
We would just add its dependency information

32
00:01:26.005 --> 00:01:30.002
within the configuration file for our build tool.

33
00:01:30.002 --> 00:01:34.002
Selenium itself might have a dependency on another library,

34
00:01:34.002 --> 00:01:37.001
let's say, the Selenium IE driver,

35
00:01:37.001 --> 00:01:41.003
which in turn might use another library, like Guava.

36
00:01:41.003 --> 00:01:43.009
When one module depends on another like this,

37
00:01:43.009 --> 00:01:47.004
it's known as a transitive dependency.

38
00:01:47.004 --> 00:01:50.002
All of these libraries need to find their way

39
00:01:50.002 --> 00:01:53.005
onto the class path when we run our application,

40
00:01:53.005 --> 00:01:56.009
and it can be painful to manually manage this graph,

41
00:01:56.009 --> 00:02:00.008
especially to get all the versions lined up just right.

42
00:02:00.008 --> 00:02:03.004
A build tool makes that easy.

43
00:02:03.004 --> 00:02:05.007
It walks the dependency graph for you

44
00:02:05.007 --> 00:02:09.003
and automatically pulls in the transitive dependencies

45
00:02:09.003 --> 00:02:12.006
based on metadata each dependency declares

46
00:02:12.006 --> 00:02:15.004
in its own configuration.

47
00:02:15.004 --> 00:02:18.009
So at a high level, it kind of looks like this.

48
00:02:18.009 --> 00:02:21.007
We define a configuration file for the build tool

49
00:02:21.007 --> 00:02:24.003
that describes our project,

50
00:02:24.003 --> 00:02:27.001
things like what dependencies the project needs,

51
00:02:27.001 --> 00:02:29.008
what tasks to complete when building the source,

52
00:02:29.008 --> 00:02:33.006
and what plugins we use in those tasks.

53
00:02:33.006 --> 00:02:36.003
The build tool takes this configuration file

54
00:02:36.003 --> 00:02:38.008
and all of the resources within our project

55
00:02:38.008 --> 00:02:41.006
and starts executing the build.

56
00:02:41.006 --> 00:02:43.002
If it needs dependencies,

57
00:02:43.002 --> 00:02:45.006
it reaches out to an artifact repository

58
00:02:45.006 --> 00:02:49.000
and pulls them in during the build process.

59
00:02:49.000 --> 00:02:50.004
Once the build is complete,

60
00:02:50.004 --> 00:02:55.003
it produces an artifact that packages our compiled software.

61
00:02:55.003 --> 00:02:58.006
There are two primary ways a build tool is used.

62
00:02:58.006 --> 00:03:00.006
First, developers typically use them

63
00:03:00.006 --> 00:03:02.002
during the development workflow

64
00:03:02.002 --> 00:03:05.008
to build and assemble their software locally.

65
00:03:05.008 --> 00:03:09.005
This is normally performed via integration with their IDE,

66
00:03:09.005 --> 00:03:11.002
and they might not even be fully aware

67
00:03:11.002 --> 00:03:14.008
they're using a build tool in the background.

68
00:03:14.008 --> 00:03:18.008
Build tools also play an important role in the CI process,

69
00:03:18.008 --> 00:03:21.004
where they compile and package our source code

70
00:03:21.004 --> 00:03:24.009
for each check-in on an isolated server.

71
00:03:24.009 --> 00:03:27.004
This is typically triggered by an automation server,

72
00:03:27.004 --> 00:03:29.004
like Jenkins.

73
00:03:29.004 --> 00:03:32.005
The isolated server provides us a clean environment

74
00:03:32.005 --> 00:03:33.009
to build the software

75
00:03:33.009 --> 00:03:36.007
without any influence from one-off configurations

76
00:03:36.007 --> 00:03:40.006
that might exist on a developer workstation.

77
00:03:40.006 --> 00:03:43.003
These high-level concepts will apply to our work

78
00:03:43.003 --> 00:03:45.003
with both Maven and Gradle,

79
00:03:45.003 --> 00:03:48.000
so keep them in mind during the upcoming lessons.

