WEBVTT
1
00:00:00.006 --> 00:00:02.002
- [Instructor] Cradle isn't the only choice

2
00:00:02.002 --> 00:00:04.006
for building Java applications.

3
00:00:04.006 --> 00:00:08.008
Many Java developers prefer to use Maven instead.

4
00:00:08.008 --> 00:00:10.008
Both tools are great choices,

5
00:00:10.008 --> 00:00:13.009
and you'll actually find many similarities between them,

6
00:00:13.009 --> 00:00:15.009
but there are some differences.

7
00:00:15.009 --> 00:00:19.005
So let's take a closer look at Maven.

8
00:00:19.005 --> 00:00:22.003
Ubuntu makes it very simple to install Maven

9
00:00:22.003 --> 00:00:26.001
on a Linux workstation through the package manager.

10
00:00:26.001 --> 00:00:30.002
Just type the command sudo apt install,

11
00:00:30.002 --> 00:00:31.000
then Maven.

12
00:00:31.000 --> 00:00:34.001
Now, if this were a Maven installation on windows,

13
00:00:34.001 --> 00:00:38.005
we would need to follow the instructions at the link below.

14
00:00:38.005 --> 00:00:40.001
Once we execute the command,

15
00:00:40.001 --> 00:00:42.008
it will begin to download and install Maven

16
00:00:42.008 --> 00:00:44.003
on our workstations.

17
00:00:44.003 --> 00:00:47.000
There, it looks like it finished.

18
00:00:47.000 --> 00:00:49.003
Let's go ahead and verify the installation

19
00:00:49.003 --> 00:00:53.000
by typing mvn - - version.

20
00:00:53.000 --> 00:00:57.004
And there we can see Maven 3.6.3's installed.

21
00:00:57.004 --> 00:00:59.009
Anytime we want to execute a command with Maven,

22
00:00:59.009 --> 00:01:02.009
we would just type mvn.

23
00:01:02.009 --> 00:01:05.008
Eclipse also has great support for Maven,

24
00:01:05.008 --> 00:01:10.000
and by default Eclipse ships with m2e plugin.

25
00:01:10.000 --> 00:01:14.002
We can use it to create a Maven project inside of eclipse.

26
00:01:14.002 --> 00:01:15.001
To do that,

27
00:01:15.001 --> 00:01:20.004
just go to file then new and then select Maven project.

28
00:01:20.004 --> 00:01:22.005
Here, we'll want to check the box

29
00:01:22.005 --> 00:01:24.009
to create a simple project.

30
00:01:24.009 --> 00:01:28.007
This will allow us to create a bare bones Maven project.

31
00:01:28.007 --> 00:01:31.006
Once you've checked that, go ahead and hit next.

32
00:01:31.006 --> 00:01:34.005
And then here we'll need to provide some information

33
00:01:34.005 --> 00:01:36.002
about our project.

34
00:01:36.002 --> 00:01:39.003
The first thing we'll need to specify is the group ID.

35
00:01:39.003 --> 00:01:43.004
So I'm going to use com.linkedin.javacd.

36
00:01:43.004 --> 00:01:45.003
Then for the artifact ID,

37
00:01:45.003 --> 00:01:49.000
I'm just going to call our project "Playground,"

38
00:01:49.000 --> 00:01:51.007
and we'll leave the version as is.

39
00:01:51.007 --> 00:01:55.007
Now these three fields, the group ID, the artifact ID

40
00:01:55.007 --> 00:01:59.008
and the version, make up the Maven coordinates.

41
00:01:59.008 --> 00:02:03.000
Maven coordinates are used to identify exactly

42
00:02:03.000 --> 00:02:05.009
which project we're working on at which point

43
00:02:05.009 --> 00:02:07.004
in its history.

44
00:02:07.004 --> 00:02:09.008
It's important to understand the Maven coordinates

45
00:02:09.008 --> 00:02:12.002
because they're used for other purposes

46
00:02:12.002 --> 00:02:16.001
like identifying dependencies and plugins.

47
00:02:16.001 --> 00:02:18.007
With the information for our project in place,

48
00:02:18.007 --> 00:02:22.005
Let's go ahead and hit the finish button to create it.

49
00:02:22.005 --> 00:02:26.002
There you can see that Eclipse builds out our new project,

50
00:02:26.002 --> 00:02:29.002
and we can expand it to see its structure.

51
00:02:29.002 --> 00:02:30.008
Here you'll see some directories

52
00:02:30.008 --> 00:02:32.008
that probably look familiar.

53
00:02:32.008 --> 00:02:36.000
Directories like src/main/java, src/main/resources,

54
00:02:36.000 --> 00:02:38.009
src/test/java, and so on.

55
00:02:38.009 --> 00:02:43.002
We saw these in Gradle, and actually this is something

56
00:02:43.002 --> 00:02:45.002
Gradle borrowed from Maven.

57
00:02:45.002 --> 00:02:48.004
By default, Maven defines these directories

58
00:02:48.004 --> 00:02:51.004
as the conventional locations where it expects

59
00:02:51.004 --> 00:02:54.003
to find things like our tests or our source code

60
00:02:54.003 --> 00:02:57.003
or different configuration files.

61
00:02:57.003 --> 00:02:59.005
So then when Maven's performing a build,

62
00:02:59.005 --> 00:03:02.004
it knows it can just look in these directories,

63
00:03:02.004 --> 00:03:07.004
and there, it will find the resources that it expects.

64
00:03:07.004 --> 00:03:09.003
Now within the root of our project.

65
00:03:09.003 --> 00:03:12.002
You'll also notice the pom.xml file.

66
00:03:12.002 --> 00:03:14.007
It's where we specify all of the information

67
00:03:14.007 --> 00:03:19.001
and configuration for our Maven project.

68
00:03:19.001 --> 00:03:22.000
Like Gradle, Maven also has a wrapper,

69
00:03:22.000 --> 00:03:25.003
which is provided through a popular third-party plugin.

70
00:03:25.003 --> 00:03:28.001
It's supposed to be included in Maven four

71
00:03:28.001 --> 00:03:30.004
once it's released.

72
00:03:30.004 --> 00:03:31.009
So in the future, if you are using Maven four,

73
00:03:31.009 --> 00:03:34.001
the installation we're about to walk through

74
00:03:34.001 --> 00:03:35.009
wouldn't be necessary.

75
00:03:35.009 --> 00:03:38.009
Here's the github page for that plugin.

76
00:03:38.009 --> 00:03:40.006
If we scroll down on it,

77
00:03:40.006 --> 00:03:41.007
we'll find the command

78
00:03:41.007 --> 00:03:44.000
that we can use to install the wrapper

79
00:03:44.000 --> 00:03:47.002
within our Maven project.

80
00:03:47.002 --> 00:03:49.008
Let's go ahead and we'll copy that command.

81
00:03:49.008 --> 00:03:52.009
And then we'll navigate to a terminal

82
00:03:52.009 --> 00:03:55.002
and inside of the terminal,

83
00:03:55.002 --> 00:04:00.003
I'm just going to head into our new playground project.

84
00:04:00.003 --> 00:04:03.001
And here, I'm going to go ahead and execute the command.

85
00:04:03.001 --> 00:04:06.006
This will begin to install the rapper in our project.

86
00:04:06.006 --> 00:04:08.005
Let's take a look here.

87
00:04:08.005 --> 00:04:10.004
There you'll see the Maven wrapper.

88
00:04:10.004 --> 00:04:13.006
The script is named mvnw.

89
00:04:13.006 --> 00:04:16.009
So anytime that we want to execute a goal or a phase

90
00:04:16.009 --> 00:04:17.009
with Maven,

91
00:04:17.009 --> 00:04:20.005
we can use the rapper to do that.

92
00:04:20.005 --> 00:04:22.008
Let's try it out.

93
00:04:22.008 --> 00:04:25.008
So using the wrapper within the project,

94
00:04:25.008 --> 00:04:30.000
I'm going to execute the package phase within Maven.

95
00:04:30.000 --> 00:04:33.002
This is going to build our software and package it

96
00:04:33.002 --> 00:04:35.004
into an archive.

97
00:04:35.004 --> 00:04:38.008
There we can see that our project was placed into a jar,

98
00:04:38.008 --> 00:04:42.001
and that our build completed successfully.

99
00:04:42.001 --> 00:04:44.002
So now we're up and running with Maven,

100
00:04:44.002 --> 00:04:46.003
and we've performed our first build.

101
00:04:46.003 --> 00:04:48.007
However, it didn't really do too much.

102
00:04:48.007 --> 00:04:52.000
Let's fix that over the next few lessons.

