WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] Large organizations may run hundreds

2
00:00:03.000 --> 00:00:06.001
or even thousands of containers.

3
00:00:06.001 --> 00:00:09.007
This is a scale that's impossible to manage without the help

4
00:00:09.007 --> 00:00:14.003
of a container orchestration platform like Kubernetes.

5
00:00:14.003 --> 00:00:18.003
A container orchestration platform manages a group of hosts

6
00:00:18.003 --> 00:00:21.005
known as nodes that form a cluster.

7
00:00:21.005 --> 00:00:24.002
When we want to run a container on the cluster,

8
00:00:24.002 --> 00:00:26.006
we wrap them inside of a pod.

9
00:00:26.006 --> 00:00:29.006
Then the orchestrator deploys them as a workload

10
00:00:29.006 --> 00:00:32.003
to one of the available nodes within the cluster

11
00:00:32.003 --> 00:00:35.006
where a container runtime is installed.

12
00:00:35.006 --> 00:00:38.003
The container runtime is then used to spin up

13
00:00:38.003 --> 00:00:40.007
and run our container.

14
00:00:40.007 --> 00:00:43.008
Let's talk a little bit about how an orchestrator,

15
00:00:43.008 --> 00:00:47.003
like Kubernetes, works at a high level.

16
00:00:47.003 --> 00:00:49.007
In Kubernetes, the control plane acts

17
00:00:49.007 --> 00:00:52.004
as the manager of the cluster.

18
00:00:52.004 --> 00:00:55.003
When we want to run a containerized application

19
00:00:55.003 --> 00:00:58.005
on Kubernetes, we send a call to its API

20
00:00:58.005 --> 00:01:02.005
using a command line tool named Kube CTL.

21
00:01:02.005 --> 00:01:05.009
We might tell it that we want to run four copies of a pod

22
00:01:05.009 --> 00:01:10.009
that contains a specific container image on the cluster.

23
00:01:10.009 --> 00:01:13.006
Once the API receives the request,

24
00:01:13.006 --> 00:01:16.000
it determines which nodes in the cluster

25
00:01:16.000 --> 00:01:18.000
should run the pods.

26
00:01:18.000 --> 00:01:21.000
Then it issues the command to deploy the containers

27
00:01:21.000 --> 00:01:24.008
to them through the Kubelet that runs on each node.

28
00:01:24.008 --> 00:01:27.003
The pods are then deployed on the node

29
00:01:27.003 --> 00:01:30.005
and the control plane constantly monitors their state

30
00:01:30.005 --> 00:01:33.003
to ensure that we always have our four copies

31
00:01:33.003 --> 00:01:37.007
known as replicas running inside the cluster.

32
00:01:37.007 --> 00:01:39.008
Pods are just one of the resources

33
00:01:39.008 --> 00:01:42.002
that run on a Kubernetes cluster.

34
00:01:42.002 --> 00:01:45.004
We normally specify them within the configuration

35
00:01:45.004 --> 00:01:49.000
of another resource known as a deployment.

36
00:01:49.000 --> 00:01:51.008
Other objects like services and ingresses

37
00:01:51.008 --> 00:01:55.006
can be created using the Kubernetes API to deploy them

38
00:01:55.006 --> 00:01:58.002
as part of our application's architecture running

39
00:01:58.002 --> 00:02:00.003
on the cluster.

40
00:02:00.003 --> 00:02:03.004
Kubernetes resources are declaratively described

41
00:02:03.004 --> 00:02:07.008
within a YAML file, referred to as a manifest.

42
00:02:07.008 --> 00:02:10.007
Just think of the manifest as a configuration file

43
00:02:10.007 --> 00:02:12.003
that describes a resource

44
00:02:12.003 --> 00:02:15.002
that we want to run on the cluster.

45
00:02:15.002 --> 00:02:17.009
Managing these YAML resource definitions

46
00:02:17.009 --> 00:02:20.002
can become quite the task when you consider

47
00:02:20.002 --> 00:02:23.008
how many microservices an application might have,

48
00:02:23.008 --> 00:02:25.004
and then add on top of that,

49
00:02:25.004 --> 00:02:28.008
the different environments you might want to deploy to.

50
00:02:28.008 --> 00:02:29.009
In our next lesson,

51
00:02:29.009 --> 00:02:31.004
I'll show you how Kustomize

52
00:02:31.004 --> 00:02:34.000
can help us manage this complexity.

