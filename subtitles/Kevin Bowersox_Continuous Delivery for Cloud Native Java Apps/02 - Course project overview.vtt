WEBVTT
1
00:00:00.000 --> 00:00:01.005
- [Instructor] Throughout the course,

2
00:00:01.005 --> 00:00:03.005
we'll be taking a small application

3
00:00:03.005 --> 00:00:04.007
for the Landon Hotel

4
00:00:04.007 --> 00:00:06.004
through the end-to-end continuous

5
00:00:06.004 --> 00:00:08.002
delivery process.

6
00:00:08.002 --> 00:00:10.007
Landon Hotel is a fictional hotel,

7
00:00:10.007 --> 00:00:12.004
and the application will be used

8
00:00:12.004 --> 00:00:14.004
by the hotel to view bookings

9
00:00:14.004 --> 00:00:17.003
that guests make for rooms.

10
00:00:17.003 --> 00:00:19.002
The application is designed

11
00:00:19.002 --> 00:00:20.003
with several features

12
00:00:20.003 --> 00:00:22.006
used in modern Java applications

13
00:00:22.006 --> 00:00:25.008
that you should be aware of when working with it.

14
00:00:25.008 --> 00:00:27.009
First, it's a distributed system

15
00:00:27.009 --> 00:00:30.001
built with a microservice architecture.

16
00:00:30.001 --> 00:00:30.009
And to be honest,

17
00:00:30.009 --> 00:00:33.005
it's a little bit overboard for this app,

18
00:00:33.005 --> 00:00:35.004
but it will allow us to focus

19
00:00:35.004 --> 00:00:37.007
on the mechanics of the delivery process

20
00:00:37.007 --> 00:00:40.004
for this style of application.

21
00:00:40.004 --> 00:00:43.003
Microservice architectures break systems down

22
00:00:43.003 --> 00:00:44.006
into small services

23
00:00:44.006 --> 00:00:47.000
that run in separate processes,

24
00:00:47.000 --> 00:00:49.000
but they're able to communicate with each other

25
00:00:49.000 --> 00:00:52.003
through API calls over a network.

26
00:00:52.003 --> 00:00:54.009
This network of loosely coupled services

27
00:00:54.009 --> 00:00:57.002
forms the larger system.

28
00:00:57.002 --> 00:00:59.008
Since the services run independently,

29
00:00:59.008 --> 00:01:02.001
we can develop and release them separately

30
00:01:02.001 --> 00:01:03.000
from each other,

31
00:01:03.000 --> 00:01:04.002
which is very helpful

32
00:01:04.002 --> 00:01:07.002
for decoupling delivery times.

33
00:01:07.002 --> 00:01:09.005
So here's kind of what our app would look like

34
00:01:09.005 --> 00:01:10.006
as a monolith.

35
00:01:10.006 --> 00:01:11.006
And then you can see it

36
00:01:11.006 --> 00:01:13.009
in a microservice architecture.

37
00:01:13.009 --> 00:01:15.008
The big thing to keep in mind here

38
00:01:15.008 --> 00:01:17.005
is that each of our services

39
00:01:17.005 --> 00:01:19.002
is a separate code base

40
00:01:19.002 --> 00:01:21.004
that is built and released independently

41
00:01:21.004 --> 00:01:23.004
from the others.

42
00:01:23.004 --> 00:01:25.005
Here's another view of the architecture

43
00:01:25.005 --> 00:01:27.001
that shows the communication

44
00:01:27.001 --> 00:01:29.002
between the services.

45
00:01:29.002 --> 00:01:31.000
There's a small web application

46
00:01:31.000 --> 00:01:32.005
that serves as a front-end,

47
00:01:32.005 --> 00:01:34.006
and it makes calls to three services

48
00:01:34.006 --> 00:01:36.009
for information about guests, rooms,

49
00:01:36.009 --> 00:01:38.006
and bookings.

50
00:01:38.006 --> 00:01:40.000
Between these services,

51
00:01:40.000 --> 00:01:42.000
there's a little bit of east-west traffic

52
00:01:42.000 --> 00:01:43.009
because the booking API fetches

53
00:01:43.009 --> 00:01:45.004
some information about rooms,

54
00:01:45.004 --> 00:01:49.000
and guess from those other services.

55
00:01:49.000 --> 00:01:50.009
Each microservice is a separate

56
00:01:50.009 --> 00:01:53.000
Spring Boot project that uses either

57
00:01:53.000 --> 00:01:54.003
Spring's web flux

58
00:01:54.003 --> 00:01:58.000
or web framework to build a restful API.

59
00:01:58.000 --> 00:02:00.007
Spring Boot makes it much easier to include

60
00:02:00.007 --> 00:02:02.009
Spring projects and their dependencies

61
00:02:02.009 --> 00:02:04.007
within an application

62
00:02:04.007 --> 00:02:07.005
by using starter dependencies.

63
00:02:07.005 --> 00:02:09.007
These help pull all of the libraries

64
00:02:09.007 --> 00:02:11.005
that you'll need through build tools

65
00:02:11.005 --> 00:02:13.007
like Maven or Gradle.

66
00:02:13.007 --> 00:02:16.006
Spring Boot also automatically configures

67
00:02:16.006 --> 00:02:18.005
different spring components for you

68
00:02:18.005 --> 00:02:20.001
right out of the box.

69
00:02:20.001 --> 00:02:22.008
But if you need to overwrite that configuration,

70
00:02:22.008 --> 00:02:24.003
you can't.

71
00:02:24.003 --> 00:02:27.002
By default, Spring Boot packages applications

72
00:02:27.002 --> 00:02:29.005
into an executable jar,

73
00:02:29.005 --> 00:02:31.001
and for web applications,

74
00:02:31.001 --> 00:02:33.001
it automatically includes support

75
00:02:33.001 --> 00:02:37.000
for embedded servers like Tomcat or Jetty.

76
00:02:37.000 --> 00:02:39.002
Let's talk about executable jars

77
00:02:39.002 --> 00:02:40.007
in a little bit more detail

78
00:02:40.007 --> 00:02:42.001
because it's how we package

79
00:02:42.001 --> 00:02:44.005
modern Java applications.

80
00:02:44.005 --> 00:02:45.003
In the past,

81
00:02:45.003 --> 00:02:47.005
Java web applications were packaged

82
00:02:47.005 --> 00:02:50.003
within a WAR file that contained resources

83
00:02:50.003 --> 00:02:52.000
like Servlets, JSPs,

84
00:02:52.000 --> 00:02:54.005
and other configuration that was necessary

85
00:02:54.005 --> 00:02:56.002
to run the app.

86
00:02:56.002 --> 00:02:59.009
Once an application was packaged into a WAR file,

87
00:02:59.009 --> 00:03:00.009
it could be deployed,

88
00:03:00.009 --> 00:03:02.006
and run on a Servlet Container

89
00:03:02.006 --> 00:03:06.004
or a full-blown Java EE Application Server.

90
00:03:06.004 --> 00:03:08.000
This server was installed

91
00:03:08.000 --> 00:03:11.001
as a separate piece of software on the host.

92
00:03:11.001 --> 00:03:13.007
For years it was common to package, deploy,

93
00:03:13.007 --> 00:03:17.000
and run Java applications this way,

94
00:03:17.000 --> 00:03:18.004
but then things shifted,

95
00:03:18.004 --> 00:03:19.008
and it became more common

96
00:03:19.008 --> 00:03:21.005
to use an embedded web server

97
00:03:21.005 --> 00:03:23.006
or Servlet Container instead of running

98
00:03:23.006 --> 00:03:26.008
everything on a standalone application server.

99
00:03:26.008 --> 00:03:29.003
An embedded server makes a Servlet Container

100
00:03:29.003 --> 00:03:32.002
like Tomcat or a web server like Neti

101
00:03:32.002 --> 00:03:34.004
another part of the application

102
00:03:34.004 --> 00:03:36.005
because it's packaged as a jar

103
00:03:36.005 --> 00:03:38.002
within the app.

104
00:03:38.002 --> 00:03:40.006
Using the servers programmatic API

105
00:03:40.006 --> 00:03:42.001
allows you to start it up

106
00:03:42.001 --> 00:03:44.009
right within your source code.

107
00:03:44.009 --> 00:03:47.001
These changes required a new way

108
00:03:47.001 --> 00:03:49.004
of packaging, Java web applications,

109
00:03:49.004 --> 00:03:51.008
the executable jar.

110
00:03:51.008 --> 00:03:53.001
An executable jar

111
00:03:53.001 --> 00:03:55.000
also known as a fat jar,

112
00:03:55.000 --> 00:03:57.004
allows an application to package libraries

113
00:03:57.004 --> 00:03:59.004
like Spring in the same package

114
00:03:59.004 --> 00:04:02.003
as the applications classes.

115
00:04:02.003 --> 00:04:03.005
The embedded web server

116
00:04:03.005 --> 00:04:06.004
can also be included in this package,

117
00:04:06.004 --> 00:04:08.007
which gives the jar everything it needs

118
00:04:08.007 --> 00:04:12.000
to run the web application on its own.

119
00:04:12.000 --> 00:04:13.006
Running an executable jar

120
00:04:13.006 --> 00:04:15.007
is a simple one-line command,

121
00:04:15.007 --> 00:04:19.000
which makes it easy to start, scale and deploy,

122
00:04:19.000 --> 00:04:20.007
especially when it's packaged

123
00:04:20.007 --> 00:04:22.008
in a Docker container.

124
00:04:22.008 --> 00:04:23.006
By default,

125
00:04:23.006 --> 00:04:25.007
Spring Boot will package applications

126
00:04:25.007 --> 00:04:27.007
as an executable jar.

127
00:04:27.007 --> 00:04:30.002
It does this through a plugin that you include

128
00:04:30.002 --> 00:04:33.004
in either your Maven or Gradle build.

129
00:04:33.004 --> 00:04:36.000
We'll cover Maven and Gradle in separate chapters

130
00:04:36.000 --> 00:04:38.005
so I won't go into the details now,

131
00:04:38.005 --> 00:04:40.003
but they will be an important part

132
00:04:40.003 --> 00:04:42.006
of our local workflow as we develop

133
00:04:42.006 --> 00:04:45.000
the application for the course project.

