WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Now that we've established

2
00:00:01.008 --> 00:00:03.009
an end-to-end delivery pipeline,

3
00:00:03.009 --> 00:00:08.001
let's use it to deliver a change to our application.

4
00:00:08.001 --> 00:00:10.009
We're going to make a pretty small change to start out.

5
00:00:10.009 --> 00:00:13.002
We're just going to update this bookings header

6
00:00:13.002 --> 00:00:15.004
to say recent bookings.

7
00:00:15.004 --> 00:00:17.008
So let's head over to Eclipse,

8
00:00:17.008 --> 00:00:20.003
and within the hotel web app project,

9
00:00:20.003 --> 00:00:23.006
we can open the booking.HTML file.

10
00:00:23.006 --> 00:00:26.001
And here's where we can make the change.

11
00:00:26.001 --> 00:00:28.007
So inside of the file, if we scroll down,

12
00:00:28.007 --> 00:00:30.001
we'll find our header.

13
00:00:30.001 --> 00:00:32.001
And here we can go ahead and update it

14
00:00:32.001 --> 00:00:34.005
to say recent bookings.

15
00:00:34.005 --> 00:00:36.003
Now, with that change in place,

16
00:00:36.003 --> 00:00:38.001
let's go over to the terminal

17
00:00:38.001 --> 00:00:41.000
and inside the hotel web app directory,

18
00:00:41.000 --> 00:00:43.003
I'm going to stage the changes,

19
00:00:43.003 --> 00:00:46.000
then I'll go ahead and add a commit, we'll say,

20
00:00:46.000 --> 00:00:49.007
updating the header.

21
00:00:49.007 --> 00:00:53.005
And then we'll go ahead and push this over to GitHub.

22
00:00:53.005 --> 00:00:55.009
That push is going to kick off

23
00:00:55.009 --> 00:00:58.005
our continuous delivery pipeline.

24
00:00:58.005 --> 00:01:00.005
So once we issue the command,

25
00:01:00.005 --> 00:01:02.005
let's go over to Jenkins,

26
00:01:02.005 --> 00:01:06.007
and we can start to watch it execute.

27
00:01:06.007 --> 00:01:09.005
Okay, Jenkins just picked up the change,

28
00:01:09.005 --> 00:01:11.000
and that's going to kick off

29
00:01:11.000 --> 00:01:14.009
our continuous integration pipeline for the web app.

30
00:01:14.009 --> 00:01:16.008
Let's go check it out.

31
00:01:16.008 --> 00:01:20.009
There we can see it's already running.

32
00:01:20.009 --> 00:01:23.002
Now we've built our executable jar

33
00:01:23.002 --> 00:01:25.006
and we're starting to create our container image

34
00:01:25.006 --> 00:01:29.007
and publish it to GitHub container registry.

35
00:01:29.007 --> 00:01:33.002
Okay, we're about ready to kick off our deployment pipeline.

36
00:01:33.002 --> 00:01:39.004
Let's go navigate into it to watch it execute.

37
00:01:39.004 --> 00:01:41.004
There it's starting to execute,

38
00:01:41.004 --> 00:01:44.007
and this is going to update our manifests within GitHub

39
00:01:44.007 --> 00:01:47.007
using customize.

40
00:01:47.007 --> 00:01:50.002
All right, it looks like the changes are in place.

41
00:01:50.002 --> 00:01:53.005
Now let's go over to Argo CD.

42
00:01:53.005 --> 00:01:55.005
Then we'll head into our application

43
00:01:55.005 --> 00:02:01.000
and we can wait for it to pick up the change.

44
00:02:01.000 --> 00:02:04.005
Okay, Argo CD just realized it's out of sync

45
00:02:04.005 --> 00:02:06.008
and now it's reading our manifests

46
00:02:06.008 --> 00:02:12.005
and applying those changes to our Kubernetes cluster.

47
00:02:12.005 --> 00:02:15.004
All right, it's all synced up, and our new container image

48
00:02:15.004 --> 00:02:18.003
is deployed and running on Kubernetes.

49
00:02:18.003 --> 00:02:21.000
Let's go back to our staging application

50
00:02:21.000 --> 00:02:23.005
and here I'm going to refresh the page,

51
00:02:23.005 --> 00:02:26.003
and there we can see the changes applied.

52
00:02:26.003 --> 00:02:29.004
Now because we're only practicing continuous delivery,

53
00:02:29.004 --> 00:02:31.005
we stopped the automated deployments

54
00:02:31.005 --> 00:02:33.006
at the staging environment.

55
00:02:33.006 --> 00:02:35.008
To promote these changes to production,

56
00:02:35.008 --> 00:02:38.007
we'll need to manually trigger the deployment.

57
00:02:38.007 --> 00:02:41.009
So let's head over to our GitHub organization,

58
00:02:41.009 --> 00:02:46.000
and here we can navigate into the deploy repository.

59
00:02:46.000 --> 00:02:48.006
Then I'm going to click on the Pull request tab,

60
00:02:48.006 --> 00:02:50.000
and we can click on this button

61
00:02:50.000 --> 00:02:52.009
to start creating our pull request.

62
00:02:52.009 --> 00:02:56.002
To set up the pull request, we'll merge the main branch

63
00:02:56.002 --> 00:02:58.004
into the release branch.

64
00:02:58.004 --> 00:03:02.005
The main branch contains the changes in our staging cluster,

65
00:03:02.005 --> 00:03:04.006
and by merging them into release,

66
00:03:04.006 --> 00:03:08.005
we're going to promote them to our production cluster.

67
00:03:08.005 --> 00:03:09.009
Now, if we scroll down,

68
00:03:09.009 --> 00:03:13.005
we can see the changes to our customization.eml file.

69
00:03:13.005 --> 00:03:18.005
It simply updates the container image for the hotel web app.

70
00:03:18.005 --> 00:03:21.006
When Argo CD builds the customization

71
00:03:21.006 --> 00:03:23.007
for the production overlay,

72
00:03:23.007 --> 00:03:26.004
it's going to cause this new container image

73
00:03:26.004 --> 00:03:28.000
to be in that manifest,

74
00:03:28.000 --> 00:03:31.003
which will be applied to the production cluster.

75
00:03:31.003 --> 00:03:32.009
All right, that looks good to me,

76
00:03:32.009 --> 00:03:36.003
so I'll go ahead and start building the pull request.

77
00:03:36.003 --> 00:03:39.001
There we can see we have a simple title that'll work,

78
00:03:39.001 --> 00:03:42.001
I'll click on the pull request button.

79
00:03:42.001 --> 00:03:44.002
Once the pull request is created,

80
00:03:44.002 --> 00:03:47.008
I can then go ahead and merge it after I confirm.

81
00:03:47.008 --> 00:03:50.003
And this will cause the changes to be released

82
00:03:50.003 --> 00:03:52.008
over to our production cluster.

83
00:03:52.008 --> 00:03:55.008
Let's head into our Argo CD production instance

84
00:03:55.008 --> 00:03:59.002
to watch the changes be applied.

85
00:03:59.002 --> 00:04:03.001
So here I'll go ahead and log into Argo CD,

86
00:04:03.001 --> 00:04:07.009
and then we'll navigate into our application.

87
00:04:07.009 --> 00:04:10.000
There Argo CD just realized

88
00:04:10.000 --> 00:04:12.001
the production cluster was out of sync,

89
00:04:12.001 --> 00:04:15.004
and now it's applying the changes in our manifests,

90
00:04:15.004 --> 00:04:18.005
and we see it spinning up a new pod.

91
00:04:18.005 --> 00:04:20.005
All right, it looks like everything is synced,

92
00:04:20.005 --> 00:04:24.001
let's go hit the production application.

93
00:04:24.001 --> 00:04:26.007
Okay, and there we can see the changes were released

94
00:04:26.007 --> 00:04:29.001
to the production cluster.

95
00:04:29.001 --> 00:04:31.006
So you can start to see how the automation

96
00:04:31.006 --> 00:04:33.008
in our continuous delivery process

97
00:04:33.008 --> 00:04:36.004
allows teams to increase the velocity

98
00:04:36.004 --> 00:04:38.005
at which they deliver changes.

99
00:04:38.005 --> 00:04:40.004
But we can take it a step further

100
00:04:40.004 --> 00:04:44.000
by adopting the practice of continuous deployment.

