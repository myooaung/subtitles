WEBVTT
1
00:00:00.001 --> 00:00:01.007
- [Instructor] Continuous delivery

2
00:00:01.007 --> 00:00:04.000
and continuous deployment are the last pieces

3
00:00:04.000 --> 00:00:07.000
of the end-to-end delivery process.

4
00:00:07.000 --> 00:00:08.004
At a basic level,

5
00:00:08.004 --> 00:00:10.002
these are a set of automated steps

6
00:00:10.002 --> 00:00:14.004
that takes packaged software from an artifact repository,

7
00:00:14.004 --> 00:00:16.000
deploys it for testing,

8
00:00:16.000 --> 00:00:18.002
and then releases it to the environment

9
00:00:18.002 --> 00:00:20.005
where it runs live for end-users

10
00:00:20.005 --> 00:00:22.002
to access.

11
00:00:22.002 --> 00:00:24.005
Continuous deployment pipelines

12
00:00:24.005 --> 00:00:27.000
vary widely across different organizations

13
00:00:27.000 --> 00:00:29.007
and are influenced by many factors.

14
00:00:29.007 --> 00:00:30.009
For example,

15
00:00:30.009 --> 00:00:33.004
how far you decide to take the automation

16
00:00:33.004 --> 00:00:36.006
will determine whether you're practicing continuous delivery

17
00:00:36.006 --> 00:00:39.002
or continuous deployment.

18
00:00:39.002 --> 00:00:40.000
In our process,

19
00:00:40.000 --> 00:00:42.009
initially, we'll manually trigger deployments

20
00:00:42.009 --> 00:00:44.008
to the production environment.

21
00:00:44.008 --> 00:00:47.000
So when I refer to the CD pipeline over

22
00:00:47.000 --> 00:00:48.008
the next few lessons,

23
00:00:48.008 --> 00:00:52.002
just know that I'm talking about continuous delivery.

24
00:00:52.002 --> 00:00:54.009
The technology stack will also heavily influence

25
00:00:54.009 --> 00:00:58.009
the tools and steps within a CD pipeline.

26
00:00:58.009 --> 00:01:02.000
For modern Java applications like ours,

27
00:01:02.000 --> 00:01:04.009
our pipeline will leverage specialized tools

28
00:01:04.009 --> 00:01:06.009
for working with Kubernetes.

29
00:01:06.009 --> 00:01:10.003
That's the platform where we'll run our containers.

30
00:01:10.003 --> 00:01:12.008
Execution of the pipeline is triggered

31
00:01:12.008 --> 00:01:15.004
when a new container image has been built

32
00:01:15.004 --> 00:01:17.001
and published.

33
00:01:17.001 --> 00:01:18.007
In our process,

34
00:01:18.007 --> 00:01:20.009
we'll trigger the pipeline by including some code

35
00:01:20.009 --> 00:01:23.006
in the CI pipeline that is executed

36
00:01:23.006 --> 00:01:27.002
after it publishes a new image.

37
00:01:27.002 --> 00:01:29.006
Once triggered, the CD pipeline

38
00:01:29.006 --> 00:01:32.008
will automatically deploy the container image

39
00:01:32.008 --> 00:01:35.001
into a non-production environment,

40
00:01:35.001 --> 00:01:37.006
which in our case is a Kubernetes cluster.

41
00:01:37.006 --> 00:01:39.005
To automate deployments into both

42
00:01:39.005 --> 00:01:42.005
the non-production and production environments,

43
00:01:42.005 --> 00:01:43.009
we'll be using two tools,

44
00:01:43.009 --> 00:01:46.009
Argo CD and Customize.

45
00:01:46.009 --> 00:01:48.007
Once the container is running

46
00:01:48.007 --> 00:01:51.001
in the non-production environment,

47
00:01:51.001 --> 00:01:55.001
additional tests can be ran against the deployed container.

48
00:01:55.001 --> 00:01:56.009
These tests are typically more expensive

49
00:01:56.009 --> 00:01:59.004
to create and to perform.

50
00:01:59.004 --> 00:02:02.006
That's why we run them later in our delivery process.

51
00:02:02.006 --> 00:02:05.009
This might include tests like manual acceptance testing,

52
00:02:05.009 --> 00:02:09.002
performance testing, or end to end tests.

53
00:02:09.002 --> 00:02:12.003
If everything passes this round of tests,

54
00:02:12.003 --> 00:02:13.009
the pipeline waits for someone

55
00:02:13.009 --> 00:02:16.001
to approve the production deployment.

56
00:02:16.001 --> 00:02:19.001
The approval is usually given by a business

57
00:02:19.001 --> 00:02:20.005
or operations team member

58
00:02:20.005 --> 00:02:22.002
who approves a poll request

59
00:02:22.002 --> 00:02:24.002
or clicks a button that allows

60
00:02:24.002 --> 00:02:26.001
the software to be deployed.

61
00:02:26.001 --> 00:02:27.001
Now, once again,

62
00:02:27.001 --> 00:02:30.000
here, we're talking about continuous delivery.

63
00:02:30.000 --> 00:02:31.001
In continuous deployment,

64
00:02:31.001 --> 00:02:33.003
this would be automatic and we would move right

65
00:02:33.003 --> 00:02:35.003
to the next step.

66
00:02:35.003 --> 00:02:37.006
This step deploys the container image

67
00:02:37.006 --> 00:02:39.009
into the production environment.

68
00:02:39.009 --> 00:02:41.009
For continuous delivery,

69
00:02:41.009 --> 00:02:45.006
it's going to be based upon receiving that manual approval,

70
00:02:45.006 --> 00:02:47.006
but ultimately for both practices,

71
00:02:47.006 --> 00:02:50.001
the deployment will release the changes

72
00:02:50.001 --> 00:02:52.003
for the end users to access.

73
00:02:52.003 --> 00:02:55.001
So that's a high level look at the basic steps

74
00:02:55.001 --> 00:02:58.006
that might be found within a simple CD pipeline.

75
00:02:58.006 --> 00:03:01.008
However, they can get much more complex.

76
00:03:01.008 --> 00:03:02.009
For our purposes,

77
00:03:02.009 --> 00:03:05.000
we'll keep it simple by sticking to a pipeline

78
00:03:05.000 --> 00:03:07.001
that uses Jenkins, Customize,

79
00:03:07.001 --> 00:03:10.000
Argo CD, and a little bit of Bash.

