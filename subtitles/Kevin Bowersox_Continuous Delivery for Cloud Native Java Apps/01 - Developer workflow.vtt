WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] Let's walk through the steps

2
00:00:01.009 --> 00:00:04.004
in the development workflow to better understand

3
00:00:04.004 --> 00:00:08.004
how it fits into an end-to-end delivery process.

4
00:00:08.004 --> 00:00:11.008
To do this, we'll return back to the basic delivery process

5
00:00:11.008 --> 00:00:14.004
that we explored in the last lesson.

6
00:00:14.004 --> 00:00:16.009
Although it's technically not part of the pipeline,

7
00:00:16.009 --> 00:00:19.007
a developer's workflow plays an important role

8
00:00:19.007 --> 00:00:22.008
in the delivery process because within it,

9
00:00:22.008 --> 00:00:25.002
we can build in some practices that improve

10
00:00:25.002 --> 00:00:30.002
the quality of code before it ever enters the pipeline.

11
00:00:30.002 --> 00:00:33.003
The changes a developer introduces into the pipeline

12
00:00:33.003 --> 00:00:36.001
start off as small stories for new features,

13
00:00:36.001 --> 00:00:39.001
which are planned with Agile project management tools

14
00:00:39.001 --> 00:00:42.000
like Jira or Version One.

15
00:00:42.000 --> 00:00:43.006
After being assigned a story,

16
00:00:43.006 --> 00:00:45.009
a developer begins writing the code for it

17
00:00:45.009 --> 00:00:49.004
in an IDE like Eclipse or IntelliJ.

18
00:00:49.004 --> 00:00:52.008
IDEs make writing code more efficient by providing features

19
00:00:52.008 --> 00:00:56.000
like auto-complete and tools for refactoring.

20
00:00:56.000 --> 00:00:57.008
At this point in the process,

21
00:00:57.008 --> 00:01:00.002
developers are frequently compiling

22
00:01:00.002 --> 00:01:02.006
and running the application locally

23
00:01:02.006 --> 00:01:05.006
as they perform their work with the help of build tools

24
00:01:05.006 --> 00:01:08.000
like Gradle or Maven.

25
00:01:08.000 --> 00:01:10.003
Here, the dependency management features

26
00:01:10.003 --> 00:01:11.008
within these build tools

27
00:01:11.008 --> 00:01:14.000
are used to pull in other libraries

28
00:01:14.000 --> 00:01:17.003
through their integration with the IDE.

29
00:01:17.003 --> 00:01:21.000
Within their IDE, developers can also add plugins

30
00:01:21.000 --> 00:01:24.003
to analyze their source code as it's being written.

31
00:01:24.003 --> 00:01:26.009
These tools can enforce style guidelines

32
00:01:26.009 --> 00:01:28.008
or detect common programming errors,

33
00:01:28.008 --> 00:01:31.008
which help improve code quality.

34
00:01:31.008 --> 00:01:35.006
Most Java IDEs will also provide support for JUnit,

35
00:01:35.006 --> 00:01:38.007
which is a unit testing framework that developers can use

36
00:01:38.007 --> 00:01:42.004
to ensure their new code functions properly.

37
00:01:42.004 --> 00:01:44.003
Before checking into source control,

38
00:01:44.003 --> 00:01:46.000
developers should scan their code

39
00:01:46.000 --> 00:01:48.008
and run the unit test suite to prevent any problems

40
00:01:48.008 --> 00:01:52.005
from making their way into the repository.

41
00:01:52.005 --> 00:01:54.002
After validating their changes,

42
00:01:54.002 --> 00:01:56.004
developers should submit a pull request

43
00:01:56.004 --> 00:01:58.006
so that it can be reviewed by their team

44
00:01:58.006 --> 00:02:03.002
before it's merged into a shared branch in the repository.

45
00:02:03.002 --> 00:02:05.004
When practicing continuous delivery,

46
00:02:05.004 --> 00:02:07.008
developers are cycling through this workflow

47
00:02:07.008 --> 00:02:10.006
multiple times per day to deliver small changes

48
00:02:10.006 --> 00:02:14.001
to the code base, which helps avoid complicated merges

49
00:02:14.001 --> 00:02:16.005
towards the end of a project.

50
00:02:16.005 --> 00:02:20.000
By following these best practices in their workflow,

51
00:02:20.000 --> 00:02:22.006
developers can improve the quality of their code

52
00:02:22.006 --> 00:02:25.000
before it ever enters the pipeline.

