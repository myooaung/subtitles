1
00:00:00,000 --> 00:00:01,917
Let's review what we learned in this module.

2
00:00:01,917 --> 00:00:02,220
First,

3
00:00:02,220 --> 00:00:05,895
we have a simple microservice that persists data to and from a

4
00:00:05,895 --> 00:00:08,616
relational database using hand-written SQL.

5
00:00:08,616 --> 00:00:12,587
It's comprised of a controller that handles web requests and responses

6
00:00:12,587 --> 00:00:15,660
and delegates its business functionality to a service.

7
00:00:15,660 --> 00:00:19,965
The business service is mostly a pass through to the underlying repository,

8
00:00:19,965 --> 00:00:21,475
but in your own microservices,

9
00:00:21,475 --> 00:00:24,296
the business service is responsible for any business logic

10
00:00:24,296 --> 00:00:26,555
that your microservice may need to perform.

11
00:00:26,555 --> 00:00:30,188
The important behavior of our service is that it knows what

12
00:00:30,188 --> 00:00:33,010
repository methods to call for what functionality.

13
00:00:33,010 --> 00:00:33,318
Finally,

14
00:00:33,318 --> 00:00:37,233
we have a repository that uses Spring's JdbcTemplate and

15
00:00:37,233 --> 00:00:40,986
simpleJdbcInsert classes to execute hand-written SQL.

16
00:00:40,986 --> 00:00:45,385
The benefit to using the JdbcTemplate is that it implements the template

17
00:00:45,385 --> 00:00:48,617
design pattern to remove all the boilerplate JDBC code,

18
00:00:48,617 --> 00:00:52,291
which allows us to focus on our business functionality,

19
00:00:52,291 --> 00:00:52,649
namely,

20
00:00:52,649 --> 00:00:55,119
specifying the SQL statement to execute and

21
00:00:55,119 --> 00:00:57,268
building objects from the result set.

22
00:00:57,268 --> 00:01:02,333
This microservice uses Spring Boot 5, which simplifies our Spring configuration.

23
00:01:02,333 --> 00:01:05,662
The Spring Boot 5 application automatically scans our

24
00:01:05,662 --> 00:01:07,881
class path and identifies our controller,

25
00:01:07,881 --> 00:01:11,661
service, and repository, and it scans our dependencies,

26
00:01:11,661 --> 00:01:14,804
which includes both the H2 database and Tomcat.

27
00:01:14,804 --> 00:01:17,425
So it creates an H2 database and creates an

28
00:01:17,425 --> 00:01:20,149
executable JAR file that embeds Tomcat.

29
00:01:20,149 --> 00:01:20,436
Next,

30
00:01:20,436 --> 00:01:23,499
we walked through creating unit tests using JUnit 5

31
00:01:23,499 --> 00:01:25,733
for our three Spring components.

32
00:01:25,733 --> 00:01:27,340
We started with the controller,

33
00:01:27,340 --> 00:01:30,451
we leveraged Spring's MockMvc class to execute full

34
00:01:30,451 --> 00:01:34,839
HTTP requests against our controller, and to validate the response.

35
00:01:34,839 --> 00:01:37,601
In this test, we used Spring's MockBean annotation,

36
00:01:37,601 --> 00:01:39,642
which uses Mockito under the hood,

37
00:01:39,642 --> 00:01:42,974
to create a mock implementation of our service and return

38
00:01:42,974 --> 00:01:45,014
the conditions that we wanted to test.

39
00:01:45,014 --> 00:01:48,923
Then we tested the service, which was probably the easiest of our tests.

40
00:01:48,923 --> 00:01:49,804
In this case,

41
00:01:49,804 --> 00:01:53,515
we injected the service into our test class and created a mock

42
00:01:53,515 --> 00:01:56,086
repository to simulate different scenarios.

43
00:01:56,086 --> 00:02:00,698
Finally, we tested the repository using DbUnit and DBUnitExtension.

44
00:02:00,698 --> 00:02:04,649
DbUnit allows us to populate our database with a known set of data,

45
00:02:04,649 --> 00:02:07,457
and then write tests against that set of data.

46
00:02:07,457 --> 00:02:09,345
In order to do this effectively,

47
00:02:09,345 --> 00:02:12,568
we created a test Spring configuration using Spring

48
00:02:12,568 --> 00:02:15,191
profiles that created a test database.

49
00:02:15,191 --> 00:02:19,826
At this point, you should feel comfortable testing controllers using MockMvc,

50
00:02:19,826 --> 00:02:23,846
creating Mockito versions of Spring beans using the MockBean annotation,

51
00:02:23,846 --> 00:02:28,867
testing services, and writing tests against a SQL database using DbUnit.

52
00:02:28,867 --> 00:02:31,413
In the next module, we'll review another microservice,

53
00:02:31,413 --> 00:02:39,000
but this time, one that persists data to a MongoDB NoSQL database using Spring Data.

