WEBVTT
1
00:00:00.790 --> 00:00:01.384
In this section,

2
00:00:01.384 --> 00:00:04.957
we're going to write integration tests for the inventory service.

3
00:00:04.957 --> 00:00:07.995
The inventory service makes API calls to a third-party API,

4
00:00:07.995 --> 00:00:09.959
so in order to test it,

5
00:00:09.959 --> 00:00:13.252
we're going to use MockMvc to send requests to the inventory

6
00:00:13.252 --> 00:00:15.971
service and leverage WireMock to stub the responses from the

7
00:00:15.971 --> 00:00:18.760
third-party API with a known set of data.

8
00:00:18.760 --> 00:00:21.269
We'll override the inventory service's inventory

9
00:00:21.269 --> 00:00:24.074
manager.baseUrl property to point to WireMock,

10
00:00:24.074 --> 00:00:27.556
and then we'll define mapping files and JSON payloads to control

11
00:00:27.556 --> 00:00:30.429
the responses that are returned for each request.

12
00:00:30.429 --> 00:00:31.391
From a coding perspective,

13
00:00:31.391 --> 00:00:35.361
we're going to include the ExtendWith annotation with the SpringExtension class,

14
00:00:35.361 --> 00:00:38.817
as well as the SpringBootTest annotation to load our

15
00:00:38.817 --> 00:00:41.051
full Spring application context.

16
00:00:41.051 --> 00:00:43.417
We include the testPropertySource annotation,

17
00:00:43.417 --> 00:00:45.973
specifying our test.properties file,

18
00:00:45.973 --> 00:00:49.381
which overrides the baseUrl to which the inventory service will

19
00:00:49.381 --> 00:00:53.032
execute its RESTful API calls to point to WireMock.

20
00:00:53.032 --> 00:00:53.501
Finally,

21
00:00:53.501 --> 00:00:56.156
we add the AutoConfigureMockMvc annotation to tell

22
00:00:56.156 --> 00:00:58.062
Spring to create a MockMvc instance.

23
00:00:58.062 --> 00:01:02.794
Inside our test class, we'll define a WireMock server variable,

24
00:01:02.794 --> 00:01:04.901
create and start the WireMock server in the BeforeEach method,

25
00:01:04.901 --> 00:01:07.670
and stop it in the AfterEach method.

26
00:01:07.670 --> 00:01:09.118
Let's review the source code for the

27
00:01:09.118 --> 00:01:13.195
InventoryServiceIntegrationTest class and see how it works.

28
00:01:13.195 --> 00:01:14.208
As I just described,

29
00:01:14.208 --> 00:01:18.598
the InventoryServiceIntegrationTest is annotated with the ExtendWith

30
00:01:18.598 --> 00:01:21.669
annotation with the SpringExtension class and the SpringBootTest annotation

31
00:01:21.669 --> 00:01:25.401
so that Spring will load the full application context.

32
00:01:25.401 --> 00:01:29.226
It includes the TestPropertySource annotation with the test.properties file

33
00:01:29.226 --> 00:01:32.732
to override the inventory service's baseUrl property,

34
00:01:32.732 --> 00:01:36.083
and it includes the AutoConfigureMockMvc annotation so that

35
00:01:36.083 --> 00:01:38.656
Spring will create a MockMvc instance.

36
00:01:38.656 --> 00:01:41.905
We have a MockMvc instance autowired into the class,

37
00:01:41.905 --> 00:01:44.168
and we define a WireMockServer variable.

38
00:01:44.168 --> 00:01:48.156
The BeforeEach method creates an instance of the WireMockServer and starts it,

39
00:01:48.156 --> 00:01:50.288
and the AfterEach method stops it.

40
00:01:50.288 --> 00:01:51.582
When the WireMock server starts,

41
00:01:51.582 --> 00:01:55.905
it will discover the mappings directory and configure our three mapping files.

42
00:01:55.905 --> 00:01:59.808
The first mapping file handles a GET request to /inventory/1 and

43
00:01:59.808 --> 00:02:04.932
returns a 200 OK HTTP response code and the payload loaded from

44
00:02:04.932 --> 00:02:07.213
the inventory- response.json file.

45
00:02:07.213 --> 00:02:11.146
The inventory- response.json file contains an inventory record for

46
00:02:11.146 --> 00:02:14.046
product 1 with an available quantity of 500,

47
00:02:14.046 --> 00:02:18.884
a productName of Super Great Product, and a productCategory of Great Products.

48
00:02:18.884 --> 00:02:23.910
The second mapping file handles a get request to /inventory/2,

49
00:02:23.910 --> 00:02:26.041
and returns 404 Not Found.

50
00:02:26.041 --> 00:02:31.455
The final mapping file handles a POST request to /inventory/1/purchaseRecord,

51
00:02:31.455 --> 00:02:34.327
returns a 200 OK HTTP response code,

52
00:02:34.327 --> 00:02:38.481
and the contents of the inventory-response-after- post.json file.

53
00:02:38.481 --> 00:02:41.199
This JSON file is the same as the previous JSON file,

54
00:02:41.199 --> 00:02:45.147
but its available quantity has been reduced to 495.

55
00:02:45.147 --> 00:02:48.543
With this setup complete, we can start looking at our test methods.

56
00:02:48.543 --> 00:02:52.753
The first test method is testGetInventoryByIdSuccess,

57
00:02:52.753 --> 00:02:55.596
which tests the successful retrieval of an inventory record.

58
00:02:55.596 --> 00:03:00.623
It uses MockMvc to perform a get request to /inventory/1,

59
00:03:00.623 --> 00:03:03.542
which we just saw will be returned to the inventory service by WireMock,

60
00:03:03.542 --> 00:03:08.322
so we expect a 200 OK HTTP response code and a JSON content type.

61
00:03:08.322 --> 00:03:12.761
We validate that the location header is set to /inventory/1,

62
00:03:12.761 --> 00:03:16.407
and then we compare the JSON response field to those in

63
00:03:16.407 --> 00:03:18.318
our inventory- response.json file.

64
00:03:18.318 --> 00:03:20.297
The next test method is testGetInventoryByIdNotFound,

65
00:03:20.297 --> 00:03:24.357
which tests a request for an inventory record that's

66
00:03:24.357 --> 00:03:26.334
not known by the third-party API.

67
00:03:26.334 --> 00:03:29.367
We use MockMvc to perform a GET request to /inventory/99,

68
00:03:29.367 --> 00:03:35.272
and then verify that we receive a 404 Not Found HTTP response code.

69
00:03:35.272 --> 00:03:37.127
The final test method is testCreatePurchaseRecord,

70
00:03:37.127 --> 00:03:41.655
which posts a new purchase record to the inventory service to

71
00:03:41.655 --> 00:03:43.604
decrement the inventory quantity for a product,

72
00:03:43.604 --> 00:03:45.967
as the result of an online purchase.

73
00:03:45.967 --> 00:03:50.770
It uses MockMvc to perform a POST request to /inventory/purchaseRecord,

74
00:03:50.770 --> 00:03:55.228
passing it the JSON representation of a new purchase record for productid 1,

75
00:03:55.228 --> 00:03:59.931
with a quantity purchased of 5, and a contentType of APPLICATION_JSON.

76
00:03:59.931 --> 00:04:03.841
It then validates that we receive a 200 OK HTTP response code,

77
00:04:03.841 --> 00:04:05.211
a JSON contentType,

78
00:04:05.211 --> 00:04:09.246
and a LOCATION header referencing the correct inventory record,

79
00:04:09.246 --> 00:04:10.790
namely, /inventory/1.

80
00:04:10.790 --> 00:04:11.007
Finally,

81
00:04:11.007 --> 00:04:14.103
we compare the fields in the JSON response body to those in the

82
00:04:14.103 --> 00:04:16.772
inventory-response-after- post.json file,

83
00:04:16.772 --> 00:04:21.039
which now has a quantity of 495 to account for the 5 that were just purchased.

84
00:04:21.039 --> 00:04:24.866
Again, this integration test looks similar to its controller test counterpart,

85
00:04:24.866 --> 00:04:27.603
but a request is passing through the entire technology stack,

86
00:04:27.603 --> 00:04:35.000
from the inventory controller to the inventory service, and then to a mocked version of our third-party API.

