WEBVTT
1
00:00:00.232 --> 00:00:03.525
Now let's review our service test by looking at the source

2
00:00:03.525 --> 00:00:06.642
code for the reviewServiceTest class.

3
00:00:06.642 --> 00:00:09.957
The reviewServiceTest follows the same pattern we explored

4
00:00:09.957 --> 00:00:12.789
when building the productServiceTest class.

5
00:00:12.789 --> 00:00:15.460
It's annotated with the ExtendWith SpringExtension

6
00:00:15.460 --> 00:00:17.876
annotation and the SpringBootTest annotation,

7
00:00:17.876 --> 00:00:21.882
so Spring will load our Spring-managed resources for us.

8
00:00:21.882 --> 00:00:25.711
Spring autowires in a ReviewService instance for us to test us,

9
00:00:25.711 --> 00:00:30.683
and we create a mock ReviewRepository using the MockBean annotation.

10
00:00:30.683 --> 00:00:34.194
Each test mocks the responses we expect from the repository,

11
00:00:34.194 --> 00:00:37.645
and then tests that our service behaves correctly.

12
00:00:37.645 --> 00:00:42.929
The test's findById Success method creates a new mockReview with a single entry,

13
00:00:42.929 --> 00:00:46.176
configures the mock repository to return that review

14
00:00:46.176 --> 00:00:48.441
when its findById method is called,

15
00:00:48.441 --> 00:00:51.185
executes the review service's findById method,

16
00:00:51.185 --> 00:00:54.891
and then validates both that the returned value is present and

17
00:00:54.891 --> 00:00:58.285
that it matches the mockReview created above.

18
00:00:58.285 --> 00:01:01.884
The testFindByIdNotFound method performs the same process,

19
00:01:01.884 --> 00:01:04.990
but configures the mock repository to return an

20
00:01:04.990 --> 00:01:08.117
Optional.empty when its findById method is called.

21
00:01:08.117 --> 00:01:11.204
It then executes the service's findById method and validates

22
00:01:11.204 --> 00:01:14.119
that the returnedReview is not present.

23
00:01:14.119 --> 00:01:17.277
The testFindAll method creates two reviews and configures

24
00:01:17.277 --> 00:01:20.365
the mock repository to return these reviews as a list when

25
00:01:20.365 --> 00:01:22.227
its findAll method is called.

26
00:01:22.227 --> 00:01:24.990
It then invokes the review service's findAll method and

27
00:01:24.990 --> 00:01:27.474
validates that both reviews are returned.

28
00:01:27.474 --> 00:01:27.820
Finally,

29
00:01:27.820 --> 00:01:31.462
the testSave method creates a mockReview and configures the mock

30
00:01:31.462 --> 00:01:34.267
repository's save method to return that review.

31
00:01:34.267 --> 00:01:37.968
It then executes the review service's save method and validate that it

32
00:01:37.968 --> 00:01:41.456
returns the same review that the repository returns.

33
00:01:41.456 --> 00:01:48.000
Because the review service is mostly a pass through service, it's the simplest component in this project to test.

