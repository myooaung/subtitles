WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.830 --> 00:00:08.610
Hey, in this video we're going
to talk about positioning.

00:00:08.610 --> 00:00:12.120
Basically we have six different
kinds of positioning.

00:00:12.120 --> 00:00:15.254
We have static,
we have relative,

00:00:15.254 --> 00:00:17.865
we have absolute, fixed,

00:00:17.865 --> 00:00:21.055
sticky, and finally
we have float.

00:00:21.055 --> 00:00:22.800
In this video, we're going to

00:00:22.800 --> 00:00:24.720
dive into each of
them and I'm going to

00:00:24.720 --> 00:00:26.490
show you how they
differ from each

00:00:26.490 --> 00:00:29.490
other and how you can
use them properly.

00:00:29.490 --> 00:00:30.600
Are you ready?

00:00:30.600 --> 00:00:31.740
Let's begin.

00:00:31.740 --> 00:00:33.540
I'm going to start with static.

00:00:33.540 --> 00:00:36.985
Any element by default
has a static position.

00:00:36.985 --> 00:00:38.225
What does that mean?

00:00:38.225 --> 00:00:40.670
It means that they are
part of the document flow,

00:00:40.670 --> 00:00:43.250
so they take up space
on our page and

00:00:43.250 --> 00:00:46.415
also they appear in the
order that they are stacked.

00:00:46.415 --> 00:00:48.800
So e.g. here I have a heading,

00:00:48.800 --> 00:00:51.109
its position is set to static.

00:00:51.109 --> 00:00:54.350
Then I have a paragraph,
again static.

00:00:54.350 --> 00:00:58.654
Then I have this image
wrapper, again, static.

00:00:58.654 --> 00:01:00.680
Then I have these images,

00:01:00.680 --> 00:01:04.654
these div blocks, they
are all set to static.

00:01:04.654 --> 00:01:07.999
Most of the time we use
the position static.

00:01:07.999 --> 00:01:10.520
And we change the
positioning using

00:01:10.520 --> 00:01:13.355
the display settings that
we talked about before.

00:01:13.355 --> 00:01:16.715
But sometimes for some
specific reasons,

00:01:16.715 --> 00:01:19.475
we might need to change
the positioning.

00:01:19.475 --> 00:01:22.730
So let's see how they
differ from each other.

00:01:22.730 --> 00:01:24.605
I'm going to select this image,

00:01:24.605 --> 00:01:26.645
the third one, this d block.

00:01:26.645 --> 00:01:28.700
And I'm going to
change its position

00:01:28.700 --> 00:01:30.830
from static to relative.

00:01:30.830 --> 00:01:32.795
Let's see what happens.

00:01:32.795 --> 00:01:35.270
Nothing, but it's
not true because

00:01:35.270 --> 00:01:38.435
now it's position is
relative to itself.

00:01:38.435 --> 00:01:39.680
Here, as you can see,

00:01:39.680 --> 00:01:42.650
it says relative to
and then it indicates

00:01:42.650 --> 00:01:44.450
that the position
of this disk block

00:01:44.450 --> 00:01:45.935
is relative to itself.

00:01:45.935 --> 00:01:47.960
What does it mean when we set

00:01:47.960 --> 00:01:50.255
the position of any
element to relative?

00:01:50.255 --> 00:01:51.860
We have two positions,

00:01:51.860 --> 00:01:54.395
the old position and
the new position.

00:01:54.395 --> 00:01:56.870
The new position
of this element is

00:01:56.870 --> 00:01:59.885
relative to the old
position of this element.

00:01:59.885 --> 00:02:02.885
It sounds complicated and
complex at first glance,

00:02:02.885 --> 00:02:04.445
but believe me, it's so simple.

00:02:04.445 --> 00:02:06.155
Let me show you here.

00:02:06.155 --> 00:02:09.095
Once I set this
position to relative,

00:02:09.095 --> 00:02:12.860
I have access to these
positioning settings.

00:02:12.860 --> 00:02:16.565
If I try to change its
position just like that.

00:02:16.565 --> 00:02:18.680
Now, this new position

00:02:18.680 --> 00:02:21.065
is relative to its
previous position.

00:02:21.065 --> 00:02:23.420
So we moved it by 92 pixels to

00:02:23.420 --> 00:02:26.360
the left from its
original position.

00:02:26.360 --> 00:02:29.630
And when we set the position
of an element to relative,

00:02:29.630 --> 00:02:32.420
it's still part of
the document flow,

00:02:32.420 --> 00:02:34.834
so it still takes up space.

00:02:34.834 --> 00:02:38.945
So this is basically how the
relative positioning works.

00:02:38.945 --> 00:02:41.900
One thing to mention
is that when we have

00:02:41.900 --> 00:02:44.000
different elements that we

00:02:44.000 --> 00:02:46.145
want to put on top
of each other,

00:02:46.145 --> 00:02:48.590
we can't do that using static.

00:02:48.590 --> 00:02:50.285
Let me show you what I mean.

00:02:50.285 --> 00:02:53.405
If I set it to static
and if I want these

00:02:53.405 --> 00:02:56.555
images to overlap each
other, I can do that.

00:02:56.555 --> 00:02:59.525
Of course, I can change
the padding and margin and

00:02:59.525 --> 00:03:02.840
I can give them some
negative margin and padding.

00:03:02.840 --> 00:03:04.610
However, that's not a good way.

00:03:04.610 --> 00:03:05.285
Why?

00:03:05.285 --> 00:03:07.865
Because when we change
the margin and padding,

00:03:07.865 --> 00:03:10.880
we are actually changing
the actual position of

00:03:10.880 --> 00:03:13.790
that element and we're
changing the document flow.

00:03:13.790 --> 00:03:15.290
This is not what we want.

00:03:15.290 --> 00:03:17.300
If you want these images to

00:03:17.300 --> 00:03:20.375
overlap each other for
a specific layout,

00:03:20.375 --> 00:03:23.465
we can set these
elements to relative.

00:03:23.465 --> 00:03:25.250
If I select this div block,

00:03:25.250 --> 00:03:28.099
the last one, and I set
its position to relative.

00:03:28.099 --> 00:03:29.615
It's relative to itself.

00:03:29.615 --> 00:03:34.715
And here we have a new property
which is called z-index.

00:03:34.715 --> 00:03:37.805
The z-index lets us control

00:03:37.805 --> 00:03:41.075
how our elements should
stack on top of each other.

00:03:41.075 --> 00:03:42.710
So if I want the second image to

00:03:42.710 --> 00:03:44.855
appear on top of this image,

00:03:44.855 --> 00:03:46.310
I can select it.

00:03:46.310 --> 00:03:48.035
I can set it to relative.

00:03:48.035 --> 00:03:50.179
And as soon as I
set it to relative,

00:03:50.179 --> 00:03:52.790
I can change its z-index.

00:03:52.790 --> 00:03:55.010
Let's set it to one.

00:03:55.010 --> 00:03:59.480
There we go. Now this image
has a higher z-index,

00:03:59.480 --> 00:04:02.915
therefore, it will be on
top of our previous image.

00:04:02.915 --> 00:04:05.630
If I select this image

00:04:05.630 --> 00:04:08.224
and I set its
position to relative,

00:04:08.224 --> 00:04:11.600
I can move it to the right
side just like that,

00:04:11.600 --> 00:04:14.540
and it's behind
our middle image.

00:04:14.540 --> 00:04:16.940
Why? Because our middle image,

00:04:16.940 --> 00:04:20.015
the second image, has
a higher z-index.

00:04:20.015 --> 00:04:21.950
If I want this first image to

00:04:21.950 --> 00:04:24.305
be on top of our middle image,

00:04:24.305 --> 00:04:27.515
I can set a higher z-index
for that e.g. two.

00:04:27.515 --> 00:04:28.550
There we go.

00:04:28.550 --> 00:04:33.169
If I want the third one to be
on top of all these images,

00:04:33.169 --> 00:04:36.320
I can set its the
index to three.

00:04:36.320 --> 00:04:38.165
If I move it around,

00:04:38.165 --> 00:04:40.130
you can clearly see that it's on

00:04:40.130 --> 00:04:42.620
top of the other two images.

00:04:42.620 --> 00:04:46.475
This is basically how the
relative positioning works.

00:04:46.475 --> 00:04:49.325
We create a new position
for our element,

00:04:49.325 --> 00:04:51.755
which is relative to
its old position.

00:04:51.755 --> 00:04:54.455
And we can also
control the z-index.

00:04:54.455 --> 00:04:56.660
Alright, now let's
set the position of

00:04:56.660 --> 00:04:59.480
these images back to
static for a second.

00:04:59.480 --> 00:05:01.280
Okay, So let's talk about

00:05:01.280 --> 00:05:04.865
the other positioning
option, which is absolute.

00:05:04.865 --> 00:05:08.240
If I set an element
to position absolute,

00:05:08.240 --> 00:05:09.935
Let's see what happens.

00:05:09.935 --> 00:05:12.815
As you can see, everything
is disorganized.

00:05:12.815 --> 00:05:15.740
I can get access to
these alignment options.

00:05:15.740 --> 00:05:17.570
And if I click on that e.g.

00:05:17.570 --> 00:05:19.490
top-left, you can
see that it will be

00:05:19.490 --> 00:05:21.740
positioned to the top left.

00:05:21.740 --> 00:05:24.950
And here it says that
it's relative to body.

00:05:24.950 --> 00:05:27.590
The position absolute
works like this.

00:05:27.590 --> 00:05:29.330
It always looks for

00:05:29.330 --> 00:05:31.520
the first parent element that

00:05:31.520 --> 00:05:34.579
has the positioning of relative.

00:05:34.579 --> 00:05:37.700
So here I have this
image wrapper and

00:05:37.700 --> 00:05:40.955
this image rapper has
a static positioning.

00:05:40.955 --> 00:05:44.270
Therefore, when I change
the position of this div,

00:05:44.270 --> 00:05:46.385
like this image to absolute,

00:05:46.385 --> 00:05:47.960
it's relative to body.

00:05:47.960 --> 00:05:48.710
Okay?

00:05:48.710 --> 00:05:50.240
So what if I want

00:05:50.240 --> 00:05:53.615
this image to be relative
to this image wrapper?

00:05:53.615 --> 00:05:54.875
Well, it's simple.

00:05:54.875 --> 00:05:57.380
I can select the image
wrapper and I can

00:05:57.380 --> 00:05:59.929
change its position to relative.

00:05:59.929 --> 00:06:00.830
There we go.

00:06:00.830 --> 00:06:03.320
Now this image is relative

00:06:03.320 --> 00:06:06.020
to the image wrapper
boundary, okay?

00:06:06.020 --> 00:06:08.240
Now it founds a
parent's elements,

00:06:08.240 --> 00:06:09.980
which is this image wrapper that

00:06:09.980 --> 00:06:12.335
has a relative positioning.

00:06:12.335 --> 00:06:14.360
You need to understand and learn

00:06:14.360 --> 00:06:16.340
these concepts very well

00:06:16.340 --> 00:06:18.815
because when it comes
to web development,

00:06:18.815 --> 00:06:22.940
these positioning options could
really help you to create

00:06:22.940 --> 00:06:24.590
some stunning layouts and

00:06:24.590 --> 00:06:27.395
some stunning web
pages are right.

00:06:27.395 --> 00:06:30.140
Now, I can select
this div blog and I

00:06:30.140 --> 00:06:32.975
can modify its position
however I want.

00:06:32.975 --> 00:06:35.824
And it's now relative
to its parent,

00:06:35.824 --> 00:06:38.285
which has the
relative positioning.

00:06:38.285 --> 00:06:41.960
So when can be used the
absolute positioning, e.g.

00:06:41.960 --> 00:06:44.660
let's suppose you want
to create a pop-up,

00:06:44.660 --> 00:06:46.940
a pop-up window,
which is so popular.

00:06:46.940 --> 00:06:49.175
Nowadays, most websites use

00:06:49.175 --> 00:06:52.460
a pop-up to let the user
register for something.

00:06:52.460 --> 00:06:55.745
So in that case, we can
use the position absolute.

00:06:55.745 --> 00:06:56.840
Of course we will talk about

00:06:56.840 --> 00:07:00.170
the position absolute and
different use cases later on.

00:07:00.170 --> 00:07:03.830
But for now, you just need
to understand how it works.

00:07:03.830 --> 00:07:05.390
And just like the relative,

00:07:05.390 --> 00:07:09.215
we can still work with
the Z index here.

00:07:09.215 --> 00:07:12.305
One thing to mention about
position absolute is that

00:07:12.305 --> 00:07:15.455
when you set an element
to position absolute,

00:07:15.455 --> 00:07:18.230
it's no longer part
of the document flow.

00:07:18.230 --> 00:07:19.565
What do I mean by that?

00:07:19.565 --> 00:07:21.950
It means that it
doesn't take space.

00:07:21.950 --> 00:07:24.260
So if I try to move it around,

00:07:24.260 --> 00:07:26.030
it doesn't take any space here.

00:07:26.030 --> 00:07:27.545
It's not like relative.

00:07:27.545 --> 00:07:29.180
This is the main
difference between

00:07:29.180 --> 00:07:31.610
position, absolute and relative.

00:07:31.610 --> 00:07:33.545
So you need to
keep that in mind.

00:07:33.545 --> 00:07:35.585
It doesn't take any space.

00:07:35.585 --> 00:07:37.400
Alright, let's set it to static.

00:07:37.400 --> 00:07:38.780
Now, I'm going to talk about

00:07:38.780 --> 00:07:41.675
the next positioning
option which is fixed.

00:07:41.675 --> 00:07:43.505
Let me show you another example.

00:07:43.505 --> 00:07:45.140
I'm going to go
ahead and drag and

00:07:45.140 --> 00:07:47.705
drop and navigation bar here.

00:07:47.705 --> 00:07:52.100
I'm going to put it right
below my body are right here.

00:07:52.100 --> 00:07:53.855
Then let's give it a class.

00:07:53.855 --> 00:07:56.465
I'm going to write nav.

00:07:56.465 --> 00:08:00.605
Cool. And also I'm going
to modify its height.

00:08:00.605 --> 00:08:04.835
Let's set its height to
something like 200 pixels.

00:08:04.835 --> 00:08:08.405
It's too much, maybe 150 pixels.

00:08:08.405 --> 00:08:09.380
All right, Cool.

00:08:09.380 --> 00:08:10.610
I said it's height to

00:08:10.610 --> 00:08:12.950
150 pixels because I'm

00:08:12.950 --> 00:08:14.795
going to show you
something in a second.

00:08:14.795 --> 00:08:17.270
So let's preview our
project for a second.

00:08:17.270 --> 00:08:19.190
This navigation bar is part of

00:08:19.190 --> 00:08:21.455
the document flow and
it takes up space.

00:08:21.455 --> 00:08:22.880
If I scroll down,

00:08:22.880 --> 00:08:25.550
you can see that
everything works as

00:08:25.550 --> 00:08:30.485
expected and it disappears
as soon as I scroll down,

00:08:30.485 --> 00:08:34.580
what if I wanted to stick to
the top while I'm scrolling?

00:08:34.580 --> 00:08:36.830
Well, we can use
the fixed option.

00:08:36.830 --> 00:08:39.830
Okay. If I use position fixed,

00:08:39.830 --> 00:08:41.780
let's see what happens first.

00:08:41.780 --> 00:08:43.445
Everything will be disorganized

00:08:43.445 --> 00:08:45.740
because when we set
something to fixed,

00:08:45.740 --> 00:08:48.785
we need to specify
its alignment, okay?

00:08:48.785 --> 00:08:50.540
We need to define that it

00:08:50.540 --> 00:08:53.510
should be fixed at the top, e.g.

00:08:53.510 --> 00:08:55.490
and now it's fixed.

00:08:55.490 --> 00:08:58.745
However, this is not part of
the document flow anymore.

00:08:58.745 --> 00:08:59.885
How do I know that?

00:08:59.885 --> 00:09:01.520
Because now you can see that

00:09:01.520 --> 00:09:04.235
this container pushed
up a little bit.

00:09:04.235 --> 00:09:04.805
Why?

00:09:04.805 --> 00:09:07.685
Because there is
no navigation bar

00:09:07.685 --> 00:09:09.755
anymore taking up space.

00:09:09.755 --> 00:09:11.015
If I preview that,

00:09:11.015 --> 00:09:14.375
you can see that it sticks
to the top, just like that.

00:09:14.375 --> 00:09:16.654
However, we've got this problem.

00:09:16.654 --> 00:09:17.795
So to fix that,

00:09:17.795 --> 00:09:20.210
we can use another positioning.

00:09:20.210 --> 00:09:21.425
But before doing that,

00:09:21.425 --> 00:09:24.515
let me show you another
example of fixed positioning.

00:09:24.515 --> 00:09:26.435
If I select this image,

00:09:26.435 --> 00:09:31.700
this div blood and I set its
position to fixed, okay?

00:09:31.700 --> 00:09:33.965
I can change its alignment to

00:09:33.965 --> 00:09:37.625
bottom right corner and
it's relative to the body.

00:09:37.625 --> 00:09:40.205
Actually, it's relative
to the viewport.

00:09:40.205 --> 00:09:42.860
It's not relative to
its parents anymore.

00:09:42.860 --> 00:09:45.170
It's relative to
the browser window.

00:09:45.170 --> 00:09:46.760
So if I preview that,

00:09:46.760 --> 00:09:50.015
you can see that it's fixed
to the bottom right corner.

00:09:50.015 --> 00:09:51.485
And if I scroll down,

00:09:51.485 --> 00:09:53.510
it's still fix there

00:09:53.510 --> 00:09:56.150
because it's relative
to the viewport,

00:09:56.150 --> 00:09:58.295
to the browser window or right?

00:09:58.295 --> 00:10:00.725
And if I want to
change the dimension,

00:10:00.725 --> 00:10:02.749
let me show you how it works.

00:10:02.749 --> 00:10:03.755
Just like that.

00:10:03.755 --> 00:10:04.955
It's still there.

00:10:04.955 --> 00:10:05.495
Okay?

00:10:05.495 --> 00:10:09.530
Alright, let me set its
position back to static and I'm

00:10:09.530 --> 00:10:11.570
going to show you how we can fix

00:10:11.570 --> 00:10:13.880
the problem with
this navbar, okay?

00:10:13.880 --> 00:10:17.375
Because we don't want to mess
up with our document flow,

00:10:17.375 --> 00:10:19.550
we can use the Sticky option.

00:10:19.550 --> 00:10:23.465
If I select this navbar and
set its positioned to sticky,

00:10:23.465 --> 00:10:25.370
you can see that
it's still part of

00:10:25.370 --> 00:10:28.865
the document flow because this
container didn't push up.

00:10:28.865 --> 00:10:31.280
However, we can
specify that it should

00:10:31.280 --> 00:10:34.295
stick to the top if
it's set to auto,

00:10:34.295 --> 00:10:39.485
if all these edges are set
to auto, see what happens.

00:10:39.485 --> 00:10:40.775
It doesn't work.

00:10:40.775 --> 00:10:42.740
The thing with sticky
is that you need to

00:10:42.740 --> 00:10:45.455
define where this
element should stick to.

00:10:45.455 --> 00:10:49.250
So I'm going to set
the top here to zero.

00:10:49.250 --> 00:10:50.960
It means that it should stick to

00:10:50.960 --> 00:10:53.300
the top edge of our browser.

00:10:53.300 --> 00:10:56.210
And one thing to
mention is that sticky.

00:10:56.210 --> 00:10:59.000
Is also relative
to the viewport.

00:10:59.000 --> 00:11:00.875
It's not relative
to its parents.

00:11:00.875 --> 00:11:04.265
So now if I preview
that, there we go,

00:11:04.265 --> 00:11:07.385
it sticks to the top and
it's not messing with

00:11:07.385 --> 00:11:09.260
our document flow because it's

00:11:09.260 --> 00:11:11.195
still part of the document flow.

00:11:11.195 --> 00:11:13.055
We can use this position for

00:11:13.055 --> 00:11:15.305
our navigation bar
for the footer,

00:11:15.305 --> 00:11:16.550
we will talk about them.

00:11:16.550 --> 00:11:19.295
But I prepared another
example for you,

00:11:19.295 --> 00:11:21.455
which is so popular nowadays.

00:11:21.455 --> 00:11:25.805
Here I have a section and
inside I have a container,

00:11:25.805 --> 00:11:27.380
which is a flexbox.

00:11:27.380 --> 00:11:29.030
And inside this container I

00:11:29.030 --> 00:11:31.070
have two different div blocks,

00:11:31.070 --> 00:11:33.770
the content div block
on the left side,

00:11:33.770 --> 00:11:36.950
this newsletter div
block on the right side.

00:11:36.950 --> 00:11:38.780
Okay, nothing complicated.

00:11:38.780 --> 00:11:41.675
I'm going to select
this newsletter div,

00:11:41.675 --> 00:11:45.320
and I'm going to change
its position to sticky.

00:11:45.320 --> 00:11:46.775
Let's see what happens.

00:11:46.775 --> 00:11:47.255
First.

00:11:47.255 --> 00:11:49.910
I'm gonna go ahead and
remove this navbar.

00:11:49.910 --> 00:11:51.650
We don't need it anymore.

00:11:51.650 --> 00:11:54.470
Now, I'm going to preview that.

00:11:54.470 --> 00:11:57.140
As you can see,
nothing happens. Why?

00:11:57.140 --> 00:11:58.700
Because as you remember when we

00:11:58.700 --> 00:12:00.380
work with Sticky position,

00:12:00.380 --> 00:12:03.500
we need to specify where
it should stick to.

00:12:03.500 --> 00:12:05.765
So here I'm going to set

00:12:05.765 --> 00:12:09.964
the top to zero and let
me show you what happens.

00:12:09.964 --> 00:12:11.585
I'm going to preview that.

00:12:11.585 --> 00:12:14.000
If I scroll down as soon as it

00:12:14.000 --> 00:12:17.074
touches the top
edge of my browser,

00:12:17.074 --> 00:12:18.935
which is the top
of the viewport,

00:12:18.935 --> 00:12:22.520
you can see that it
starts sticking just like

00:12:22.520 --> 00:12:27.920
that until it reaches the
end of its parent element,

00:12:27.920 --> 00:12:29.270
which is the container.

00:12:29.270 --> 00:12:31.385
Alright, let me show
you once again.

00:12:31.385 --> 00:12:33.845
Since we set the top
position to zero,

00:12:33.845 --> 00:12:36.170
once it touches the top edge,

00:12:36.170 --> 00:12:39.124
it starts sticking until

00:12:39.124 --> 00:12:42.260
it reaches the end of
its parent element,

00:12:42.260 --> 00:12:45.455
which is in this case
the container, okay?

00:12:45.455 --> 00:12:48.245
Then it behaves normally,
as you can see.

00:12:48.245 --> 00:12:52.460
Now, we can even add
more spacing here, e.g.

00:12:52.460 --> 00:12:54.590
I'm going to set it to 100.

00:12:54.590 --> 00:12:56.330
And let's see what happens.

00:12:56.330 --> 00:12:59.570
Now when there is 100
pixels at the top,

00:12:59.570 --> 00:13:02.975
it starts sticking
just like that.

00:13:02.975 --> 00:13:04.670
How cool is that?

00:13:04.670 --> 00:13:08.180
You can see these kind of
behavior on many websites like

00:13:08.180 --> 00:13:11.675
Medium or other different
blogging websites.

00:13:11.675 --> 00:13:14.225
Now let's talk about
another option which is

00:13:14.225 --> 00:13:18.035
the last type of positioning
and it's called float.

00:13:18.035 --> 00:13:21.305
Well nowadays we don't use
float and clear that as much.

00:13:21.305 --> 00:13:23.810
However, for some use cases,

00:13:23.810 --> 00:13:27.470
it's still very practical
and we can use floats.

00:13:27.470 --> 00:13:29.015
So let me show you how it works.

00:13:29.015 --> 00:13:30.620
First of all, I'd
like to mention

00:13:30.620 --> 00:13:32.315
that float and clear don't

00:13:32.315 --> 00:13:36.080
work with Flexbox as
the child of a flexbox.

00:13:36.080 --> 00:13:40.715
So here I have a container
which is not a flexbox.

00:13:40.715 --> 00:13:43.025
The display setting
is set to block.

00:13:43.025 --> 00:13:46.655
And inside I have a
simple image div block.

00:13:46.655 --> 00:13:48.455
And then I have the paragraph.

00:13:48.455 --> 00:13:51.020
If I select this
image diblock and I

00:13:51.020 --> 00:13:53.989
change its position
to float, e.g.

00:13:53.989 --> 00:13:55.325
float left.

00:13:55.325 --> 00:13:59.180
You can see that the contents
wraps around this image.

00:13:59.180 --> 00:14:01.925
Now if I change
the flow to right,

00:14:01.925 --> 00:14:03.020
you can see that now

00:14:03.020 --> 00:14:05.705
the content is wrapping
from the left side,

00:14:05.705 --> 00:14:07.805
okay, just the opposite sign.

00:14:07.805 --> 00:14:09.425
But what is clear?

00:14:09.425 --> 00:14:13.730
Let's suppose we have this
image set to float left.

00:14:13.730 --> 00:14:15.725
And I'm going to
select this paragraph.

00:14:15.725 --> 00:14:19.715
And I wanted not to wrap
around this specific image.

00:14:19.715 --> 00:14:23.210
In this case, I can
set clear to left,

00:14:23.210 --> 00:14:25.820
right, or both sides.

00:14:25.820 --> 00:14:28.145
Most of the time
we use both sides.

00:14:28.145 --> 00:14:31.505
Since our image is
here on the left side,

00:14:31.505 --> 00:14:33.665
now only the left side works.

00:14:33.665 --> 00:14:35.030
If I set it to left,

00:14:35.030 --> 00:14:37.745
you can see that it's not
wrapping around it anymore.

00:14:37.745 --> 00:14:39.425
But if I set it to right,

00:14:39.425 --> 00:14:42.665
it doesn't work because
our element here,

00:14:42.665 --> 00:14:44.420
which is set to float,

00:14:44.420 --> 00:14:46.190
is not on the right side.

00:14:46.190 --> 00:14:47.975
If I set clear both,

00:14:47.975 --> 00:14:50.405
you can make sure that
it will be cleared.

00:14:50.405 --> 00:14:53.225
Our right guys, that's
all for this video.

00:14:53.225 --> 00:14:56.675
We talked about a lot of
different things and I hope

00:14:56.675 --> 00:15:00.245
you could understand different
kinds of positioning.

00:15:00.245 --> 00:15:02.975
If you do have any questions,
please let me know.

00:15:02.975 --> 00:15:05.000
Make sure to practice all of

00:15:05.000 --> 00:15:07.550
these positioning
options because

00:15:07.550 --> 00:15:10.655
we're going to work with
them in real-world projects.

00:15:10.655 --> 00:15:13.740
So I'll see you in
the next video.
