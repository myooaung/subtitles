WEBVTT
1
00:00:04.640 --> 00:00:08.910
Hello and welcome to another fiscal simulation lecture where we're going to be talking about how in

2
00:00:08.920 --> 00:00:11.540
setting up this movement component for our car.

3
00:00:11.690 --> 00:00:16.400
Now I just want to show you that previously you were able to run straight through the wall and in the

4
00:00:16.400 --> 00:00:20.930
subjects This lecturer is making sure that we can stop when we hit the wall but also that we can reverse

5
00:00:20.930 --> 00:00:22.080
back away from it.

6
00:00:22.190 --> 00:00:24.080
Without that taking an age.

7
00:00:24.110 --> 00:00:29.720
So going to be talking about how that's achieved how we can figure out that we're actually going to

8
00:00:29.720 --> 00:00:35.420
hit something and that we can update velocity's based on that so let's dive in and see that in action.

9
00:00:35.450 --> 00:00:42.440
So in the last lecture we did get our car to the point where it was accelerating with a physically based

10
00:00:42.440 --> 00:00:43.280
force.

11
00:00:43.280 --> 00:00:49.540
But we also noticed the problem where if we run into a wall we do not stop.

12
00:00:49.550 --> 00:00:57.950
Now we want to set it up so that we can stop if we hit the wall and we know that the first step of that

13
00:00:57.950 --> 00:01:01.420
process is setting up some collision volumes or misspell that.

14
00:01:01.420 --> 00:01:03.480
Let me correct that.

15
00:01:03.480 --> 00:01:04.140
There we go.

16
00:01:04.430 --> 00:01:07.110
So setting up a collision volumes how do we do it.

17
00:01:07.160 --> 00:01:08.310
Let's have some quick revision.

18
00:01:08.330 --> 00:01:10.790
I'm going to go and do this in blueprint.

19
00:01:10.790 --> 00:01:16.010
Now obviously you can do this or with default subcomponents and setting up all that stuff in C++.

20
00:01:16.010 --> 00:01:20.540
But let's be realistic this the kind of work that a designer would do and they're more likely to do

21
00:01:20.540 --> 00:01:26.390
it in blueprint so let's just take the easy route this time I'm going to go to the ADD component button

22
00:01:26.420 --> 00:01:34.190
on AB BP go cart and I am going to go ahead and search for collision and I'm going to look for the box

23
00:01:34.190 --> 00:01:38.770
collision because that's what I think most accurately fits around this car.

24
00:01:39.080 --> 00:01:41.420
So I'll add in a box Collider.

25
00:01:41.510 --> 00:01:47.630
And in fact what I'm going to do is I'm going to rip parent the scuttle mesh to the box and I'm going

26
00:01:47.630 --> 00:01:53.390
to try and replace these seen Roots with the box just by clicking and dragging the box on to the scene

27
00:01:53.390 --> 00:01:53.580
room.

28
00:01:53.590 --> 00:01:59.240
And that has worked successfully So I've now got a box which is too small as we can see so I'm going

29
00:01:59.240 --> 00:02:05.390
I need to scale it up in the details paint so in the details pain we've got our box extent we can use

30
00:02:05.390 --> 00:02:07.490
that to scale the x axis.

31
00:02:07.490 --> 00:02:11.660
We can use it to scale the y axis to do that.

32
00:02:12.610 --> 00:02:13.810
Try attempt to do that.

33
00:02:13.810 --> 00:02:19.840
They go scaled the y axis too and we can scale the z axis.

34
00:02:19.840 --> 00:02:24.610
Now you'll notice that the car is not in the centre of this box so we're actually at a fix that because

35
00:02:24.610 --> 00:02:30.880
we can't change the route object in the component hierarchy but we can change the position of the skeletal

36
00:02:30.880 --> 00:02:31.290
mash.

37
00:02:31.300 --> 00:02:37.090
So we're going to move the whole thing down a notch to the scuttle mash and then you can see that the

38
00:02:37.090 --> 00:02:43.600
box isn't quite tall enough so we need to scale it in z a little bit more so that it encompasses fully

39
00:02:43.610 --> 00:02:46.960
or at least more or less the whole car angle the wing mirrors.

40
00:02:46.960 --> 00:02:51.730
But that shouldn't matter too much if the wing mirrors pass through something so we got ourselves a

41
00:02:51.730 --> 00:02:52.390
collision set.

42
00:02:52.390 --> 00:02:57.970
I'm going to save and compile and go ahead and play and let's see whether that has done anything to

43
00:02:57.970 --> 00:03:00.450
prevent us from going through the wall.

44
00:03:02.900 --> 00:03:03.410
No.

45
00:03:03.650 --> 00:03:04.250
No it hasn't.

46
00:03:04.250 --> 00:03:05.730
And I wasn't expecting it to.

47
00:03:05.750 --> 00:03:11.870
So one thing we have to check first is go on to that collision component and we're going to go down

48
00:03:11.870 --> 00:03:12.740
in the details.

49
00:03:12.740 --> 00:03:20.750
Payne to the section on collision and one thing that we do want to do here is select a different collision

50
00:03:20.750 --> 00:03:26.350
preset the moment we have overlap all dynamic which is clearly not what we want to do.

51
00:03:26.420 --> 00:03:35.780
We want to block all dynamic and commands save and go ahead and hit play and let's see whether it works.

52
00:03:35.780 --> 00:03:38.730
I'm still not expecting it to work but I might be wrong.

53
00:03:39.520 --> 00:03:40.320
Let's see.

54
00:03:42.180 --> 00:03:43.980
Sure enough it doesn't work.

55
00:03:43.980 --> 00:03:50.010
And the reason for this is that when we're moving our car we're not actually checking anything about

56
00:03:50.010 --> 00:03:50.520
collision.

57
00:03:50.520 --> 00:03:51.400
We're doing this.

58
00:03:51.410 --> 00:03:54.390
And actor offset translation.

59
00:03:54.600 --> 00:04:00.380
And okay that's all well and good but we do want to check for collision.

60
00:04:00.390 --> 00:04:01.000
We're moving it.

61
00:04:01.020 --> 00:04:05.970
And fortunately this is built right into in real with a concept known as sweeping.

62
00:04:05.970 --> 00:04:13.520
If we go and have a look at the definition of ADD actor offset at an actor her world offset and go and

63
00:04:13.530 --> 00:04:18.150
follow that you'll see that it takes a Delta location which we understand now.

64
00:04:18.770 --> 00:04:22.910
But it also takes a boolean that says be sweep.

65
00:04:22.910 --> 00:04:29.040
In fact if we go over to the head a file of this actor cvp go to the actor H.

66
00:04:29.060 --> 00:04:33.530
And look for ADD actor world offset.

67
00:04:33.650 --> 00:04:38.270
You can see we've got the Delta location and will XYZ you show me any default parameters.

68
00:04:38.270 --> 00:04:42.650
That's because this is a k-2 function for some reason it's like I think it's the blueprint 1 basically

69
00:04:43.390 --> 00:04:48.700
But the defaults for an actor world offset are that the sweep is false.

70
00:04:48.710 --> 00:04:49.880
What does suite mean.

71
00:04:49.880 --> 00:04:55.010
It means that it checks first of all that we can reach the destination without going through anything

72
00:04:55.010 --> 00:04:57.010
that we should be colliding with.

73
00:04:57.030 --> 00:04:59.460
That sounds like exactly the sort of thing we want.

74
00:04:59.480 --> 00:05:01.430
So let's make sure that we're doing that.

75
00:05:01.430 --> 00:05:07.610
I'm going to go in to my go cart dot cbp and just make sure that the second argument given to an actor

76
00:05:07.610 --> 00:05:09.510
world offset is true.

77
00:05:09.730 --> 00:05:16.570
So go ahead and save that and build and see whether Now we're going through the wall or not.

78
00:05:16.790 --> 00:05:23.420
Okay so the build was successful Let's go over into a real and hit play and see if our car is moving

79
00:05:23.420 --> 00:05:24.470
as we'd expect.

80
00:05:24.590 --> 00:05:27.390
So let's go and accelerate into a wall.

81
00:05:27.540 --> 00:05:30.990
Yes you do and go and hit said Wall.

82
00:05:32.120 --> 00:05:32.530
Boom.

83
00:05:32.540 --> 00:05:33.890
Now we're not going anywhere.

84
00:05:34.040 --> 00:05:35.420
So let's reverse out of here.

85
00:05:35.480 --> 00:05:39.860
And you'll notice if you reverse and hit the back button you aren't actually reversing very quickly

86
00:05:39.920 --> 00:05:45.080
you're going to have to hit that back button for quite a long time before it starts going back.

87
00:05:45.150 --> 00:05:46.910
Now that's a little bit odd isn't it.

88
00:05:46.910 --> 00:05:49.880
So something is not quite set up correctly there.

89
00:05:49.970 --> 00:05:54.500
And if you think it through what we've been doing here is we've been adding to the velocity and when

90
00:05:54.500 --> 00:05:59.900
we hit of a wall that velocity variable is still there we're just not passing through the wall because

91
00:05:59.960 --> 00:06:06.400
an actor world offset is preventing us from enacting the translation that the velocity would like.

92
00:06:06.800 --> 00:06:12.530
But the velocity still trying to move us all that time we're not resetting the velocity to zero when

93
00:06:12.530 --> 00:06:15.960
we hit a wall which means that we try and reverse away from the wall.

94
00:06:16.100 --> 00:06:22.490
We have to accelerate all of that velocity nonofficial term by the way unaccelerated is not an official

95
00:06:22.490 --> 00:06:22.990
term.

96
00:06:23.270 --> 00:06:29.030
We need to get rid of all that excess all that velocity by accelerating in the opposite direction i.e.

97
00:06:29.030 --> 00:06:34.430
reversing and then we start going backwards so you got quite a lot of velocity of can take quite a long

98
00:06:34.430 --> 00:06:36.580
time and it's clearly not very realistic.

99
00:06:36.580 --> 00:06:41.050
So we're going to need to reset the velocity on collision.

100
00:06:41.330 --> 00:06:46.400
So there is a thing that is quite helpful here in the ad actor world offset.

101
00:06:46.400 --> 00:06:48.560
You can see it in the definition.

102
00:06:48.560 --> 00:06:53.300
It actually has an out parameter and optional out parameters so it's actually a pointer because by default

103
00:06:53.320 --> 00:06:57.260
it is null and that is for an F hit result.

104
00:06:57.290 --> 00:07:04.940
And you can get hold of the F hit result for anything that was hit during the process of going trying

105
00:07:04.940 --> 00:07:11.780
to move this object through the world so you can use that to try and figure out whether anything was

106
00:07:11.780 --> 00:07:13.770
hit and whether.

107
00:07:15.520 --> 00:07:18.270
You need to be resetting the velocity.

108
00:07:19.580 --> 00:07:19.990
Okay.

109
00:07:20.000 --> 00:07:26.270
So let's see that in the form of a challenge reset the velocity that's going to be your challenge for

110
00:07:26.270 --> 00:07:31.900
the lecturer to read up on the F hit result as a first port of call.

111
00:07:31.910 --> 00:07:38.150
You in to find out what the hit result has to offer you and you going to use it to check if there was

112
00:07:38.180 --> 00:07:38.920
a collision.

113
00:07:38.930 --> 00:07:42.800
By the way I've got the resource link against the lecturer for a hip result.

114
00:07:42.980 --> 00:07:47.310
In case you don't want to google for it so check if there was a collision.

115
00:07:47.330 --> 00:07:52.270
Using the have hit result and then reset the velocity.

116
00:07:52.310 --> 00:07:59.540
If there was a hit test it obviously and then once it works just refactor for clarity the tick function

117
00:07:59.540 --> 00:08:05.240
like be getting a bit heavy and you might want to pull out some things into different methods so pause

118
00:08:05.240 --> 00:08:07.600
a video and have a go at the challenge.

119
00:08:09.270 --> 00:08:10.200
Okay welcome back.

120
00:08:10.200 --> 00:08:13.270
So let's have a go at this challenge.

121
00:08:13.290 --> 00:08:16.560
Here is the documentation for the struct f hit.

122
00:08:16.590 --> 00:08:17.600
Result.

123
00:08:17.610 --> 00:08:25.350
Let's have a look at what we can use here to give us an indication of whether or not we have hit anything.

124
00:08:25.350 --> 00:08:30.060
One thing I'm noting here is we've got time and this time is actually I just want to make a note of

125
00:08:30.060 --> 00:08:30.770
this.

126
00:08:30.830 --> 00:08:36.220
Time is in quotes here in the description because it's the time of impact.

127
00:08:36.240 --> 00:08:46.320
Along the trace direction ranging from 0 to 1 meaning that if you hit it half way along your your movement

128
00:08:46.740 --> 00:08:48.780
then it will give you a point 5.

129
00:08:48.780 --> 00:08:51.190
If you don't hit anything it will be 1.

130
00:08:51.210 --> 00:08:55.650
And if you hit something straight away or you are already hitting something it will be zero.

131
00:08:55.920 --> 00:09:02.070
So that could potentially be used for well let's see if there's anything else in the functions that

132
00:09:02.100 --> 00:09:04.100
could be of use to us.

133
00:09:04.110 --> 00:09:12.480
Here's one is valid blocking hit return true if there was a blocking hit that was not caused by starting

134
00:09:12.480 --> 00:09:13.500
in penetration.

135
00:09:13.500 --> 00:09:21.360
So if we already were penetrating and a blocking object then is valid blocking hit would not be true.

136
00:09:21.390 --> 00:09:26.410
But if we because of this movement hit something then it will be true.

137
00:09:26.460 --> 00:09:27.460
That's what I'm going to use.

138
00:09:27.480 --> 00:09:32.190
Is valid blocking hit but first to get rid get hold of.

139
00:09:32.190 --> 00:09:38.780
Sorry at f hit result so usual way with out process we're gonna have an out f hit result which I am

140
00:09:38.790 --> 00:09:45.030
going to call the hit which we're going to declare in this scope in the tic's go up and then we are

141
00:09:45.030 --> 00:09:47.040
going to get to the address of it.

142
00:09:47.040 --> 00:09:49.530
Remember that we are dealing with a pointer here not a reference.

143
00:09:49.530 --> 00:09:52.680
We often deal without parameters as being references.

144
00:09:52.680 --> 00:09:56.520
In this case because it's an optional out parameter it's actually a pointer.

145
00:09:56.700 --> 00:10:02.570
So this just means that we need to take the address of hit when we're passing it into an out sweep hit.

146
00:10:02.610 --> 00:10:03.610
Result.

147
00:10:03.730 --> 00:10:05.250
So that's what we're gonna do.

148
00:10:05.250 --> 00:10:11.110
And then once we have done that we can put in an IF statement to check where that hit is valid so whigham

149
00:10:11.120 --> 00:10:12.060
DO hit.

150
00:10:12.210 --> 00:10:20.550
Dot is valid blocking hit which will allow us to know whether we actually hit something in this particular

151
00:10:20.550 --> 00:10:22.360
movement frame.

152
00:10:22.710 --> 00:10:25.790
And if we did hit something what are we going to do about it.

153
00:10:26.040 --> 00:10:31.080
Well as I said already we are going to set our velocity down to zero.

154
00:10:31.110 --> 00:10:37.460
That is the point of said challenge let's go ahead and build that and see whether it's what we want.

155
00:10:37.740 --> 00:10:42.450
One problem I can already see here in the red squiggly to pointed out is that I am setting of a vector

156
00:10:42.450 --> 00:10:47.160
velocity to zero and obviously is zero is a float.

157
00:10:47.160 --> 00:10:49.760
In this case so we want a vector zero.

158
00:10:49.770 --> 00:10:55.710
There's a few ways of creating this but f vector calon colon zero vector I think it is.

159
00:10:55.710 --> 00:10:58.420
Come on calon zero vector.

160
00:10:58.440 --> 00:11:03.530
Yep is going to give you a vector with all zeros basically.

161
00:11:03.540 --> 00:11:05.640
So let's go ahead and build that again.

162
00:11:05.640 --> 00:11:10.990
Now without having me that little error and we'll see if it works as we intended.

163
00:11:11.380 --> 00:11:14.570
Okay so that has compiled at least successfully.

164
00:11:14.580 --> 00:11:19.110
Let's go and play and see whether it actually implements successfully.

165
00:11:19.290 --> 00:11:21.390
So I will go and accelerate towards a wall again.

166
00:11:21.390 --> 00:11:22.460
So much fun.

167
00:11:22.860 --> 00:11:28.560
We're going to hit the wall not go anywhere and if we reverse instantly reversing which means the velocity

168
00:11:28.590 --> 00:11:32.060
has indeed been reset to zero.

169
00:11:32.840 --> 00:11:37.730
So while we're at it let's just spend a little time to refactor that tic function which is starting

170
00:11:37.730 --> 00:11:39.230
to grow rather large.

171
00:11:39.470 --> 00:11:43.510
And we've got some clear bits of functionality in here.

172
00:11:43.950 --> 00:11:50.540
So remember that in a refactoring what we're looking for is trying to keep a consistent level of abstraction.

173
00:11:50.810 --> 00:11:57.380
Now what we're doing here intake is we're doing the kind of physical simulation and we want to check

174
00:11:57.410 --> 00:12:00.070
that this level of abstraction is being maintained.

175
00:12:00.080 --> 00:12:04.520
I think that this firstline line is a little bit.

176
00:12:05.360 --> 00:12:10.940
It's small enough so it's okay but it's a little bit low level abstraction because we're talking about

177
00:12:11.390 --> 00:12:12.500
one particular force.

178
00:12:12.500 --> 00:12:15.730
There could be many forces on this car and there will be later on.

179
00:12:15.730 --> 00:12:21.530
So we'll talk about we'll probably build that out a little bit into things like this into functions

180
00:12:21.530 --> 00:12:22.340
later on.

181
00:12:22.670 --> 00:12:23.750
But not yet.

182
00:12:24.080 --> 00:12:26.340
Then we have got acceleration.

183
00:12:26.360 --> 00:12:27.400
That's pretty high level.

184
00:12:27.410 --> 00:12:33.960
We're talking about the physical simulation So acceleration is force over mass that's pretty high level.

185
00:12:34.040 --> 00:12:39.260
Definitely within the realms of the physical simulation then we've got velocity plus velocity times

186
00:12:39.260 --> 00:12:39.860
acceleration.

187
00:12:39.860 --> 00:12:42.140
Yes that makes sense then we've got translation.

188
00:12:42.140 --> 00:12:44.190
Yes that also makes sense.

189
00:12:44.270 --> 00:12:52.460
And then we have got this final hit resolve and movement and translation which is a little bit more

190
00:12:52.740 --> 00:12:55.160
finicky a little bit smaller.

191
00:12:55.370 --> 00:13:01.850
So I actually think this whole section included the translation is about applying the velocity to the

192
00:13:01.850 --> 00:13:04.610
object and actually moving the object.

193
00:13:04.610 --> 00:13:07.280
So let's abstract that out into a function.

194
00:13:07.280 --> 00:13:09.690
Now I'm going to use visual studio tool for that.

195
00:13:09.740 --> 00:13:16.640
You can obviously do this completely manually so I can go to quick actions and refactoring And by right

196
00:13:16.640 --> 00:13:23.780
clicking and then I can go to extract function which is always says as an experimental feature and we

197
00:13:23.780 --> 00:13:26.380
can go ahead and give a name.

198
00:13:27.350 --> 00:13:31.270
You know make it super clear what this does that it updates location from velocity's.

199
00:13:31.280 --> 00:13:33.740
That's what I call it update location velocity.

200
00:13:33.740 --> 00:13:34.840
Go ahead and click.

201
00:13:34.850 --> 00:13:36.980
Okay I do want it below the current function.

202
00:13:36.980 --> 00:13:41.760
I want it as a member function not as a free function because I wanted to have access to velocity.

203
00:13:41.990 --> 00:13:43.810
And let's go ahead and click okay.

204
00:13:43.860 --> 00:13:49.420
Notice it has to automatically pass in Delta time as now will talk a bit more about the signature.

205
00:13:49.430 --> 00:13:56.000
Once it has created it and that is the result of having created it you can see that we're now calling

206
00:13:56.060 --> 00:14:01.790
update location from velocity passing in Delta time and we've created that function update location

207
00:14:01.940 --> 00:14:05.990
velocity and it does create a translation.

208
00:14:05.990 --> 00:14:07.540
It gets our hit results.

209
00:14:07.580 --> 00:14:10.420
It moves the act resets the velocity to zero.

210
00:14:10.430 --> 00:14:15.230
If we've hit something I'm fairly happy that at that level of extraction is good within tic.

211
00:14:15.230 --> 00:14:20.930
I can read tic fairly easily now and if we go into our head of file we can see where it's gone and crace

212
00:14:20.930 --> 00:14:27.280
that it created it as a public function so I'm going to cut it and paste it in to the private functions

213
00:14:27.290 --> 00:14:32.480
because we don't want other classes updating our location from velocity we want to be able to do it

214
00:14:32.540 --> 00:14:35.050
only ourselves and only from within tick.

215
00:14:35.060 --> 00:14:38.390
So let's go ahead and build and check that that's still working.

216
00:14:38.400 --> 00:14:41.530
I'm fairly sure that that refactor will have worked just fine.

217
00:14:41.690 --> 00:14:43.550
So you can go ahead and check as well.

218
00:14:43.550 --> 00:14:48.560
That's a bit of homework for you but I will see you in the next lecture where we will be talking about

219
00:14:49.220 --> 00:14:52.810
getting this car to steer left and right.

220
00:14:52.820 --> 00:14:58.520
So had some actual pretty useful functionality for a car really just being able to run into walls.

221
00:14:58.520 --> 00:15:01.030
It does not make a racing game very fun.

222
00:15:01.290 --> 00:15:03.620
Okay so I will see you in the next lecture.
