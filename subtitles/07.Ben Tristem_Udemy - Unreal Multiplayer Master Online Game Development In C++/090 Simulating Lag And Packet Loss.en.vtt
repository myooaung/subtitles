WEBVTT
1
00:00:04.740 --> 00:00:05.810
Welcome in this lecture.

2
00:00:05.820 --> 00:00:09.180
We are going to be learning how we can simulate something called Lanke.

3
00:00:09.180 --> 00:00:14.130
We're going to be learning how what language is and why it affects our games so badly and we're going

4
00:00:14.130 --> 00:00:20.190
to be applying it in a simulated fashion to our game which will cause a glitching and weird rotating

5
00:00:20.190 --> 00:00:22.340
and resetting like we're seeing here.

6
00:00:22.530 --> 00:00:30.510
And we're going to talk a little bit about why that is the case so let's dive in and see how this works.

7
00:00:30.630 --> 00:00:35.100
So you might be thinking they were going to a stage in the game right now where we are able to synchronize

8
00:00:35.160 --> 00:00:41.790
the state between the client server and it seems to be working pretty smoothly whether you are the authoritative

9
00:00:41.910 --> 00:00:46.980
proxy whether you are authoritative sorry whether you are the autonomous proxy or whether you are a

10
00:00:46.980 --> 00:00:48.020
simulated proxy.

11
00:00:48.030 --> 00:00:53.670
However this is because we haven't introduced quite an important concept in computer networks the concept

12
00:00:53.730 --> 00:00:54.690
of lag.

13
00:00:54.840 --> 00:01:01.240
So let's talk about what is this lag concept and how does it affect our game play.

14
00:01:02.200 --> 00:01:08.650
But before we talk about what lag is we need to understand the concept of packets and network rooting

15
00:01:08.650 --> 00:01:15.350
and basically how the Internet talks how the Internet talks to each other and sends messages.

16
00:01:15.580 --> 00:01:21.220
So if you think about how you would have sent a message back in the old days before telephones then

17
00:01:21.280 --> 00:01:25.360
you may have done it by writing your message down on a piece of paper just like this one on the slides

18
00:01:25.900 --> 00:01:28.600
then stuffed the envelope and put an address on the envelope.

19
00:01:28.600 --> 00:01:34.180
Then you would have given this envelope to a postman and the postman would have given it someone else

20
00:01:34.180 --> 00:01:35.560
who'd give it someone else.

21
00:01:35.560 --> 00:01:40.030
And eventually it would reach the address on the envelope and hopefully the person you intended would

22
00:01:40.030 --> 00:01:42.900
open the envelope and read the message and that's what we do.

23
00:01:42.910 --> 00:01:45.240
More or less in computer networks as well.

24
00:01:45.250 --> 00:01:48.800
Except we don't have a postman and will talk about that in just a second.

25
00:01:48.850 --> 00:01:53.130
So what we do in a computer network is we write a message.

26
00:01:53.320 --> 00:01:57.880
In this case we write our message in binary in such a way that the recipient will understand.

27
00:01:57.880 --> 00:02:04.450
So what are these messages in the unreel client server examples that we've been looking at the server

28
00:02:04.510 --> 00:02:12.880
might write a message to the client saying I have updated property X to value Y or it might be the client

29
00:02:12.880 --> 00:02:20.110
saying to the server He is an APC that I want to call on you and this will be formatted in binary via

30
00:02:20.140 --> 00:02:22.280
some pre agreed standard.

31
00:02:22.540 --> 00:02:29.020
Then we write an address or rather unreel rights an address of the client or server on the envelope.

32
00:02:29.200 --> 00:02:30.570
And this means that.

33
00:02:31.320 --> 00:02:36.710
Without opening the envelope without having a look inside the post man can deliver to an address right.

34
00:02:36.780 --> 00:02:38.310
You don't have to look at the message.

35
00:02:38.310 --> 00:02:40.080
The same goes with the Internet.

36
00:02:40.140 --> 00:02:48.000
The packet has the address on it in the header and all that needs to be done by the rooting framework

37
00:02:48.010 --> 00:02:51.540
the rooting infrastructure is it needs to look at the address doesn't need to look at the message it

38
00:02:51.540 --> 00:02:55.980
can leave the message in tactic you just need to copy that on but it looks at the address to figure

39
00:02:55.980 --> 00:02:58.650
out where it needs to send this packet.

40
00:02:58.650 --> 00:03:02.420
So that's the idea a packet imagine and letter in an envelope.

41
00:03:02.490 --> 00:03:09.000
So then what we get are these rooting infrastructures these networks of routers all connected up as

42
00:03:09.000 --> 00:03:13.790
you can see in this diagram here that allow us to get from computer to computer B.

43
00:03:13.800 --> 00:03:20.200
Now what is a router router is a piece of kit that basically you plug lots of ethane at cables in to

44
00:03:20.200 --> 00:03:27.690
you and they communicate via some protocols over those ethe net cables to deliver and copy your packets

45
00:03:27.750 --> 00:03:32.250
from one interface to the other from one place to another.

46
00:03:32.250 --> 00:03:37.140
So what happens if we have put together a packet on our computer and want to get it over to the other

47
00:03:37.140 --> 00:03:42.330
computer Well we're going to pass this packet up to the first router that we're connected to the router

48
00:03:42.330 --> 00:03:45.810
is going to look at the address and he's going to figure out which is the next route I should send it

49
00:03:45.810 --> 00:03:51.390
to and so on and so on until it gets to the destination like so and that's great because we've got some

50
00:03:51.390 --> 00:03:55.630
abstraction there by having put our message in an envelope.

51
00:03:55.680 --> 00:04:01.230
Now our routers don't need to understand the message they can just work at a higher level of abstraction

52
00:04:01.230 --> 00:04:06.930
of this address and we don't have to understand what the architecture of and network is.

53
00:04:06.930 --> 00:04:11.580
Just like when you give a letter to your postman you don't have to understand where the postman is going

54
00:04:11.580 --> 00:04:12.390
to take it.

55
00:04:12.390 --> 00:04:16.650
Which distribution centres are going to be used and the whole process in which Laurie they're going

56
00:04:16.650 --> 00:04:18.900
to use at what time and so on and so forth.

57
00:04:18.900 --> 00:04:23.250
You can just give it to the postman and know that because you put the address on it's going to get to

58
00:04:23.250 --> 00:04:23.880
the destination.

59
00:04:23.880 --> 00:04:28.320
Same thing happens with Internet packets and for all we care.

60
00:04:28.320 --> 00:04:33.360
We could create another packet and it could go through a different route on the network and end up at

61
00:04:33.360 --> 00:04:38.500
the same destination it doesn't matter how the network is set up and where it goes.

62
00:04:38.520 --> 00:04:41.000
It just needs to get to the destination.

63
00:04:41.040 --> 00:04:45.200
Now why are Internet networks set up this way.

64
00:04:45.210 --> 00:04:46.860
Why do they have these routers.

65
00:04:46.860 --> 00:04:49.620
Why do we not just connect each node to every other node.

66
00:04:49.620 --> 00:04:55.980
Well that seems pretty obvious because we'd have a lot of cables but also imagine this case where you

67
00:04:55.980 --> 00:05:02.730
have lots of Route lots of computers that are maybe on a local area network all connected up to one

68
00:05:02.820 --> 00:05:03.210
router.

69
00:05:03.240 --> 00:05:07.740
Because that's very easy you've got even at cables that you can run from one computer up to the router

70
00:05:08.400 --> 00:05:14.520
and that's great and then you've got one very expensive line here that for example might be going under

71
00:05:14.520 --> 00:05:16.750
the ocean to a computer.

72
00:05:16.770 --> 00:05:19.060
On the other side of the globe.

73
00:05:19.060 --> 00:05:23.580
So that's a very expensive line to put down you wouldn't want to have to put down five lines to connect

74
00:05:23.640 --> 00:05:27.030
each one of these computers up to this computer on the right.

75
00:05:27.030 --> 00:05:32.010
You're much better off putting some cheap lines into a router and then using only one expensive line

76
00:05:32.430 --> 00:05:35.470
over to the computer on the right.

77
00:05:35.610 --> 00:05:42.060
And that's one of the great things about the Internet is it allows us to have all these computers simultaneously

78
00:05:42.150 --> 00:05:44.730
talking to this one the right in a telephone network.

79
00:05:44.730 --> 00:05:50.070
For example if computer one at the top here wants to talk to the computer on the right he would have

80
00:05:50.070 --> 00:05:54.420
to reserve this line that goes under the ocean and that means that these other four computers wouldn't

81
00:05:54.420 --> 00:05:58.820
get to speak until he decided that he's finished with that phone call.

82
00:05:58.830 --> 00:06:00.830
Now obviously this isn't a great idea.

83
00:06:00.840 --> 00:06:08.160
And in packet switch networks which are the ones we're talking about you can send these packets of data

84
00:06:08.160 --> 00:06:14.070
which are reasonably small and you can even to leave them on the wire so you can say I'll send this

85
00:06:14.070 --> 00:06:18.240
packets reasonably small then I'll send the next packet from another person and so on and so forth.

86
00:06:19.190 --> 00:06:23.590
So in order to do this we need to have a queue.

87
00:06:23.630 --> 00:06:24.860
Why do we need to have a queue.

88
00:06:25.010 --> 00:06:32.090
Because the capacity of this line the speed at which we can send data down it is not going to be as

89
00:06:32.090 --> 00:06:35.290
big as five of these lines.

90
00:06:35.300 --> 00:06:41.480
So if all five computers were trying to send a message to the computer on the right then they would

91
00:06:41.630 --> 00:06:46.390
basically jam up this line and they won't be able to send that thing down.

92
00:06:46.610 --> 00:06:52.460
So what we do is we receive a message from one of the computers on the left and we stick it in a queue

93
00:06:52.490 --> 00:06:57.150
and we send it as fast as we possibly can over to a computer on the right.

94
00:06:57.350 --> 00:07:03.530
And if we get another message while we're still sending then we put it in memory in a queue and we wait

95
00:07:03.950 --> 00:07:08.610
for the first message to finish before we start on a second one and so on with the third message we

96
00:07:08.610 --> 00:07:10.380
just stick it on the back of the queue.

97
00:07:10.490 --> 00:07:13.530
But we've got a limited amount of memory in our router.

98
00:07:13.550 --> 00:07:21.290
So what can happen is that will get a message that overflows AQ that is too much for AQ got more messages

99
00:07:21.290 --> 00:07:22.670
than we can fit in memory.

100
00:07:22.760 --> 00:07:25.380
And this message will end up getting dropped.

101
00:07:25.520 --> 00:07:32.120
So that's why I've called this slide best effort delivery because we aren't guaranteeing in an Internet

102
00:07:32.120 --> 00:07:38.120
network that the packet will reach the destination only sometimes will it be able to reach the destination

103
00:07:38.120 --> 00:07:42.470
and there's many ways that we use to work around this building game engines.

104
00:07:42.470 --> 00:07:45.950
We try not to do that because we want the best performance possible.

105
00:07:45.950 --> 00:07:52.010
So we do end up with some packets and some messages getting dropped which either means we have to send

106
00:07:52.010 --> 00:07:55.850
them or we just don't get that message happens.

107
00:07:56.090 --> 00:08:02.150
So that's why we have reliable by the way on our ipc messages because if we don't put reliable they

108
00:08:02.150 --> 00:08:07.990
may be in a packet that gets dropped and the game engine won't check and won't try again.

109
00:08:09.120 --> 00:08:15.360
So the other problem here is that when you've got a queue obviously as you probably have experienced

110
00:08:15.420 --> 00:08:21.900
with your cues in real life you're at the supermarket maybe at customs you may have experienced that

111
00:08:22.000 --> 00:08:23.790
cues take time.

112
00:08:23.790 --> 00:08:29.850
You have to wait for the package ahead of you to finish sending which introduces a delay in your packet

113
00:08:29.860 --> 00:08:32.270
getting from A to B.

114
00:08:32.370 --> 00:08:37.950
So that is what I want to show you here is the concept of lag and how it happens over time.

115
00:08:38.650 --> 00:08:40.590
So we start off by sending a packet.

116
00:08:40.600 --> 00:08:43.660
Now time here is running along the bottom from left to right.

117
00:08:43.960 --> 00:08:49.330
And Senate pack it takes time because of the queuing delays just because of the fact that the speed

118
00:08:49.330 --> 00:08:55.330
of light is limited so we're sending something across the globe it will take a little bit of time just

119
00:08:55.450 --> 00:08:59.820
to for that message to travel in the wire across the globe.

120
00:08:59.830 --> 00:09:06.280
But most of this time is actually spent in queuing delays and processing delays by the routers.

121
00:09:06.280 --> 00:09:10.780
So it takes a bit of time to get from Cuba a to compute B and the more routers are in the mix and the

122
00:09:10.780 --> 00:09:18.610
further away it is the heart the longer that time is going to be when you have received the packet then

123
00:09:18.610 --> 00:09:23.770
B has to do some processing on the message in order to figure out what they want to do with it.

124
00:09:23.770 --> 00:09:29.590
And they may want to send a reply back to a which also takes time and then they have to figure out what

125
00:09:29.950 --> 00:09:32.130
they want to do with that packet.

126
00:09:32.140 --> 00:09:39.670
So all of this taken as a whole the time from first sending a packet from a to understanding and receiving

127
00:09:39.670 --> 00:09:40.390
the reply.

128
00:09:40.570 --> 00:09:42.380
Its called a round trip time.

129
00:09:42.580 --> 00:09:50.560
And this is what we typically refer to as a lag is the time it takes for us to update the server on

130
00:09:50.560 --> 00:09:51.280
what we're doing.

131
00:09:51.280 --> 00:09:58.510
So telling the server Hey I have decided to accelerate forward and the time between having sent that

132
00:09:58.570 --> 00:10:03.410
and receiving an update saying here is your new position after having accelerated forward.

133
00:10:03.490 --> 00:10:05.590
That's all a round trip time in the longer.

134
00:10:05.590 --> 00:10:10.840
That is the more lag you have in your game or the more latency you have.

135
00:10:10.840 --> 00:10:14.980
So how do we go ahead and try out a game with lag.

136
00:10:14.980 --> 00:10:19.460
How do we test that our game can work when we have a lag.

137
00:10:19.660 --> 00:10:26.140
Well there is a blog post here that I've got linked in the resources called Finding network based exploits.

138
00:10:26.140 --> 00:10:31.150
And here it talks a little bit about the options you have in and real for simulating this lag so you

139
00:10:31.150 --> 00:10:37.240
don't have to set up a test network to experience this lag you can have the engine automatically introduce

140
00:10:37.240 --> 00:10:41.460
the lags into the messages that you are trying to send.

141
00:10:41.470 --> 00:10:47.370
Now the way we can do this is go and fire up your game either in the editor or a standalone.

142
00:10:47.370 --> 00:10:53.350
Either one is going to work here and then we are going to put these at games side by side and I'm going

143
00:10:53.350 --> 00:11:00.010
to select the client one and open up the console with a key underneath escape and the command we want

144
00:11:00.070 --> 00:11:05.930
is net with the capital N capital and space capital P K T.

145
00:11:06.010 --> 00:11:15.820
So the packet lag spelt like this and we can set that equal to 1000 1000 is in milliseconds so this

146
00:11:15.820 --> 00:11:23.710
is just one second of lag which is quite high but will definitely make it obvious what the problems

147
00:11:23.710 --> 00:11:24.970
can be.

148
00:11:24.970 --> 00:11:31.240
So if I go ahead and drive my car first it seems fine but then you notice I skip backwards and I keep

149
00:11:31.240 --> 00:11:36.090
skipping backwards a little bit as I drive the car now skipping has stopped.

150
00:11:36.130 --> 00:11:42.370
Now that I've not I'm not introducing any new inputs but if I try and accelerate again you'll notice

151
00:11:42.370 --> 00:11:44.350
that I had to skip back.

152
00:11:45.170 --> 00:11:49.750
And if I start to turn this becomes even more obvious.

153
00:11:50.710 --> 00:11:51.250
There you go.

154
00:11:51.360 --> 00:11:55.250
Totally weird how it's jumping around like this.

155
00:11:55.410 --> 00:11:58.680
And we're going to have a little look at why that's the case.

156
00:11:58.680 --> 00:12:04.260
But first I want to just to show you that there are a few other options from this blog post so let's

157
00:12:04.260 --> 00:12:06.590
go ahead and look at the blog post.

158
00:12:06.900 --> 00:12:09.430
You can use them in and same way as I just used lag.

159
00:12:09.450 --> 00:12:13.110
They just have a different meaning so there is packet lag variance.

160
00:12:13.110 --> 00:12:19.080
This introduces some variants some randomness to the lag and this might be because there's more or less

161
00:12:19.080 --> 00:12:24.350
congestion it might be because we route through different routes out in a real network.

162
00:12:24.360 --> 00:12:28.820
But that's what we're trying to simulate we're saying that it will add or subtract with a little bit

163
00:12:28.840 --> 00:12:34.290
randomness in this amount of milliseconds you can add some packet loss so you can say what percentage

164
00:12:34.350 --> 00:12:37.100
of packets are going to be discarded.

165
00:12:37.170 --> 00:12:42.750
That is again because of queues filling up and as dropping the packets you can actually have packet

166
00:12:42.750 --> 00:12:44.650
duplication as well.

167
00:12:44.670 --> 00:12:49.950
Now packet duplication happens in a real network for a variety of reasons one of them might be that

168
00:12:49.980 --> 00:12:55.140
you think that your packet has got lost when in fact it's just been really delayed and so you send a

169
00:12:55.140 --> 00:12:56.040
second time.

170
00:12:56.040 --> 00:13:02.700
And so you end up with your packet of twice and then there's packet order which is just on or off which

171
00:13:02.700 --> 00:13:09.500
is whether the packets end up out of order at the other end and you really have one to enable this zero

172
00:13:09.660 --> 00:13:10.580
to disable this.

173
00:13:10.610 --> 00:13:15.150
Again this could be because your packets take two different routes one takes longer than the other and

174
00:13:15.240 --> 00:13:17.870
they arrive out of order all of those reasons.

175
00:13:17.870 --> 00:13:23.070
You can see from the diagrams on the slides but these are the properties you can use in unreel to simulate

176
00:13:23.070 --> 00:13:23.660
them.

177
00:13:23.760 --> 00:13:28.970
And if you have a look at this blog post it also shows you how you could put this into your engine or

178
00:13:29.010 --> 00:13:29.520
any file.

179
00:13:29.520 --> 00:13:35.070
But for me I'm going to be doing it just via the console for now because that's easy enough and we can

180
00:13:35.070 --> 00:13:40.390
see most of what we want to see just by introducing a constant lag and that's what I'm doing.

181
00:13:41.980 --> 00:13:47.410
So your challenge in this lecture is going to be trying to figure out why the car is glitching by playing

182
00:13:47.410 --> 00:13:49.200
around little bit for yourself.

183
00:13:49.210 --> 00:13:55.870
So I'd like you to enable the lag at using the console just like I showed you play around with the game

184
00:13:55.930 --> 00:13:58.960
and see if you can figure out why it's glitching.

185
00:13:58.960 --> 00:14:03.060
Take a look at what the server is seeing that might give you some clues as well.

186
00:14:03.310 --> 00:14:08.640
And can you explain why the game is glitching don't go as far as only explaining to yourself.

187
00:14:08.640 --> 00:14:13.120
I'd like you to write up the explanation and put it in the form as well so pause the video and have

188
00:14:13.120 --> 00:14:13.640
a go.

189
00:14:15.530 --> 00:14:22.850
Okay so let's have a go at trying to explain why lag causes glitching So we're going to go into our

190
00:14:22.850 --> 00:14:29.960
game and have a go at driving around as the autonomous proxy's you see it did just glitch right away

191
00:14:29.960 --> 00:14:30.360
there.

192
00:14:30.380 --> 00:14:33.530
And I'm going to try and do it from you.

193
00:14:34.400 --> 00:14:41.780
Basically in front of the authority so that we can see what the car is doing.

194
00:14:41.790 --> 00:14:44.140
So let's try that.

195
00:14:44.140 --> 00:14:53.700
Go and put ourselves in front of Harold Thomas proxy like so just set up the stage a little bit and

196
00:14:53.700 --> 00:14:59.300
then swap into being the autonomous proxy and try and drive around.

197
00:15:00.670 --> 00:15:08.140
Now what you'll see is that from me starting to accelerate to the authority seeing me accelerate there

198
00:15:08.140 --> 00:15:09.470
is a delay.

199
00:15:09.550 --> 00:15:12.030
There is a lag and it's about one second.

200
00:15:12.040 --> 00:15:15.500
It seems that or maybe half a second I didn't really time it.

201
00:15:15.610 --> 00:15:19.570
So we're not really sure whether the lag that we're introducing is the whole round trip time or just

202
00:15:19.570 --> 00:15:20.800
half of it.

203
00:15:20.800 --> 00:15:28.720
But that sort of explains what's going on because when we receive an update from the server that server

204
00:15:28.720 --> 00:15:36.520
is already behind us and is updating us with stale information basically which means that while we've

205
00:15:36.520 --> 00:15:42.960
been simulating we've got a little bit ahead and the server is resetting us back to where we were before.

206
00:15:42.970 --> 00:15:46.300
Let's see that little bit clearer in a diagram.

207
00:15:46.300 --> 00:15:52.810
So here we have the server and the client both of them are simulating and we're going to just take into

208
00:15:52.990 --> 00:15:58.900
just assume that we have one dimension at the moment which is our position and we are trying to accelerate

209
00:15:58.900 --> 00:15:59.550
forward.

210
00:15:59.950 --> 00:16:07.000
So we start off at the position zero both on the client the autonomous proxy and on the authority of

211
00:16:07.000 --> 00:16:10.990
the server then we receive an excelerate input.

212
00:16:10.990 --> 00:16:18.490
The accelerator goes down full throttle mid frame and in then and at this point we send a message up

213
00:16:18.490 --> 00:16:24.980
to the server using our Peacey which as we know is now going to take time because of that lag.

214
00:16:25.060 --> 00:16:30.730
So what happens is in the next tick the client says oh I've got the accelerator down I'm going to move

215
00:16:30.730 --> 00:16:33.880
forward by one place.

216
00:16:34.210 --> 00:16:37.630
The server on the other hand has not yet received that the accelerator is down.

217
00:16:37.630 --> 00:16:39.750
So they are not moving anywhere.

218
00:16:40.030 --> 00:16:42.800
So we're staying at zero we can already see that there's a problem here.

219
00:16:42.850 --> 00:16:44.950
They're already out of sync.

220
00:16:45.850 --> 00:16:51.490
Then the second step the client carries on moving forward because he thinks he's moving forward.

221
00:16:51.490 --> 00:16:57.650
The server only just now has realized that he's moving forward to update the position to one.

222
00:16:58.090 --> 00:17:04.840
And on updating the position to one or after that time we get maybe a net update in this net update

223
00:17:04.900 --> 00:17:12.370
we send that position down to the client saying hey you have got a new value for one.

224
00:17:12.730 --> 00:17:18.340
I've just calculated it out but in the meantime we've carried on simulating we have any see that net

225
00:17:18.340 --> 00:17:22.780
update on a client so the client is going to go all the way over to three and it's going to look to

226
00:17:22.780 --> 00:17:30.340
the player like he is in position 3 at this point but the server has just sent an update which means

227
00:17:30.430 --> 00:17:36.230
that we have to reset our position to one and in the next tick will still be moving forward.

228
00:17:36.250 --> 00:17:42.640
So we're going to go to position two and you can see that now we have just been reset back to that old

229
00:17:42.640 --> 00:17:49.600
state of the server and we've experienced that as a player we've experienced a glitch where we have

230
00:17:49.600 --> 00:17:53.530
jumped back from position 3 to position.

231
00:17:53.710 --> 00:17:59.180
Now this is clearly a very difficult problem to solve because we can't get rid of these delays.

232
00:17:59.200 --> 00:18:05.080
There's no way that the server could have known any earlier about the update client and there's no way

233
00:18:05.080 --> 00:18:09.930
that the client could have known any earlier that the server had actually updated its state.

234
00:18:10.120 --> 00:18:15.880
So we are going to be looking in the next lecture as a method that we can use to alleviate some of this

235
00:18:15.880 --> 00:18:16.520
pain.

236
00:18:16.540 --> 00:18:22.520
We can never really remove the lagging but we can try and make the experience better for the client.

237
00:18:22.720 --> 00:18:24.070
I'll see you in that lecture.
