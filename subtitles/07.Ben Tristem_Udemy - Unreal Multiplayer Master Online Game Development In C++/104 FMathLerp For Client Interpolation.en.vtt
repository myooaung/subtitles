WEBVTT
1
00:00:04.190 --> 00:00:05.290
Welcome in this video.

2
00:00:05.300 --> 00:00:10.940
We are going to be implementing our client interpellation as you can see here the simulated proxy is

3
00:00:10.970 --> 00:00:16.310
moving by linear interpolation you can tell it's linear by the fact that he occasionally changes direction

4
00:00:16.700 --> 00:00:17.780
quite harshly.

5
00:00:17.780 --> 00:00:22.150
But this is the first step towards doing nice type of interpolation.

6
00:00:22.150 --> 00:00:28.330
So with a big success and let's dive into the video and see how we can achieve this.

7
00:00:29.220 --> 00:00:34.470
Okay so this is where we left off the project before the last lecture I'm sure you all remember at this

8
00:00:34.470 --> 00:00:38.500
stage that we have our authority and you've got out on this proxy.

9
00:00:38.730 --> 00:00:44.790
And if we move the authority around then we get all this glitching basically because it is trying to

10
00:00:44.790 --> 00:00:49.350
interpolate using the last known control throws.

11
00:00:49.380 --> 00:00:51.520
But that's just not enough is it.

12
00:00:51.570 --> 00:00:57.390
When you've got one second between the delays you end up doing lots of jumping around so we want to

13
00:00:57.420 --> 00:01:00.090
implement our own interpellation.

14
00:01:00.330 --> 00:01:06.360
But before we do that we want to make sure we are in full control of where that client is.

15
00:01:06.360 --> 00:01:13.380
We don't want it to be updated directly by the server at all so we need to make sure that we are have

16
00:01:13.380 --> 00:01:18.690
Movent replication switched off entirely and one way we can easily check it is by going to the content

17
00:01:18.690 --> 00:01:24.970
browser and then going to your crazy cart folder and opening up the BP go cart and with the BP go cart.

18
00:01:25.110 --> 00:01:31.140
We should be able to see whether there is movement replications which Don's if go to add details and

19
00:01:31.140 --> 00:01:38.910
look for movement there you can see that weve got replicate movement ticked and in fact it's not even

20
00:01:39.000 --> 00:01:46.430
showing a little yellow arrow because we have got replicate movement switched on in our C++.

21
00:01:46.440 --> 00:01:48.210
So thats the first thing to fix.

22
00:01:48.210 --> 00:01:51.960
Let's go over into visuals to go find our go kart DCP.

23
00:01:52.110 --> 00:01:59.010
Open that up and then in our constructer just underneath where we have be replicates we can go to be

24
00:01:59.820 --> 00:02:03.700
replicates movement I believe it is.

25
00:02:03.800 --> 00:02:07.240
Its just check replicate I think movement.

26
00:02:09.590 --> 00:02:13.250
There it is replicate movement equals false.

27
00:02:13.430 --> 00:02:16.870
We do not want it replicating movement as go ahead and build that.

28
00:02:16.880 --> 00:02:18.080
And what we should see.

29
00:02:18.080 --> 00:02:22.910
It wont update the blueprint and thats one of the problems with blueprints is that it caches all those

30
00:02:22.910 --> 00:02:29.180
property stores but it will give us a different default which means that when we look in the blue print

31
00:02:29.180 --> 00:02:33.550
will see the yellow arrow telling us that it is set something that is not default.

32
00:02:35.220 --> 00:02:37.490
And that is a successful build.

33
00:02:37.500 --> 00:02:43.410
So lets go over in to the unreel editor and now you can see yes they will get the yellow arrow telling

34
00:02:43.410 --> 00:02:47.580
us to reset this the default which we will which is not replicating movement.

35
00:02:47.580 --> 00:02:52.940
So I can save that compile it whatever I want to do and hopefully if we go ahead and play.

36
00:02:53.040 --> 00:02:58.500
Im not sure whether the position is going to update at all now in our server it depends whether we have

37
00:02:58.500 --> 00:03:00.660
told it to update the position doesn't it.

38
00:03:00.660 --> 00:03:02.450
So let's just check it out.

39
00:03:02.790 --> 00:03:08.520
If it doesn't then it's going to be very very obvious that we what we've done has worked and we're going

40
00:03:08.520 --> 00:03:09.630
to be looking at the pseudocode.

41
00:03:09.630 --> 00:03:10.210
Okay.

42
00:03:10.320 --> 00:03:17.280
So it is still updating position that's probably because our code updates it somewhere else manually.

43
00:03:17.280 --> 00:03:17.620
Great.

44
00:03:17.640 --> 00:03:18.420
That's fine.

45
00:03:18.720 --> 00:03:25.200
So next up we want to deal with these time variables that we created in our pseudocode.

46
00:03:25.820 --> 00:03:29.720
Remember that I told you in the last lecture that there was some updating that we had to do to them

47
00:03:29.750 --> 00:03:33.880
but we haven't written it into the pseudocode here at least I haven't written into that silicone.

48
00:03:33.890 --> 00:03:35.420
You may have done so.

49
00:03:35.450 --> 00:03:43.820
Here we've got two variables to do with time the time since update and the time between last updates.

50
00:03:43.820 --> 00:03:48.230
Those are the two variables we're going to want to store on our client so let's go ahead and create

51
00:03:48.590 --> 00:03:50.630
some member variables for that.

52
00:03:50.630 --> 00:03:51.870
I'm going to go to the go kart.

53
00:03:51.910 --> 00:03:57.440
Dot H I open that up and then Im going to not the go cart I'm sorry.

54
00:03:57.440 --> 00:03:59.400
We want to do this in the movement replicator.

55
00:03:59.420 --> 00:04:05.510
So were going to the moon replicator dot H which is the new class that we have created in the last couple

56
00:04:05.510 --> 00:04:06.500
of lectures.

57
00:04:07.120 --> 00:04:10.090
And down here Betsy was a good place for it.

58
00:04:10.120 --> 00:04:15.400
I'm going to put it underneath the unacknowledged mousse and I'm going to use the prefix client for

59
00:04:15.400 --> 00:04:18.080
the stuff that we're doing because of client interpellation.

60
00:04:18.130 --> 00:04:24.250
So these two variables to do with time we usually use floats for time and I'm going to prefix it with

61
00:04:24.250 --> 00:04:25.400
cline's as I've said.

62
00:04:25.510 --> 00:04:28.230
And then the two are just call time since update.

63
00:04:30.840 --> 00:04:36.790
It's going to be the first variable and the second one is going to be time between last updates.

64
00:04:36.840 --> 00:04:38.010
So client.

65
00:04:39.060 --> 00:04:41.890
Time Between last.

66
00:04:42.840 --> 00:04:44.840
Updates like so.

67
00:04:46.120 --> 00:04:46.570
Okay.

68
00:04:46.800 --> 00:04:48.300
So we've got time to last updates.

69
00:04:48.300 --> 00:04:50.370
We've got time since update.

70
00:04:50.370 --> 00:04:53.530
Let's go ahead and see how we can implement those.

71
00:04:53.550 --> 00:04:58.080
So I'm going to go into the replicator C++ and see where is the logical place where we've got a tick

72
00:04:58.380 --> 00:04:59.570
component here.

73
00:04:59.940 --> 00:05:04.670
But at the moment I don't have a lot of space for doing what I want to do.

74
00:05:04.680 --> 00:05:14.640
So I am going to create a function here under simulated proxy to be tic client and I am going to make

75
00:05:14.640 --> 00:05:16.450
that private so I'm going to do.

76
00:05:17.660 --> 00:05:23.720
Basically just underneath our variables our client time since update now actually on second thought

77
00:05:23.720 --> 00:05:25.400
I'm going to do it up near the functions.

78
00:05:25.610 --> 00:05:27.440
So it is going to be a void.

79
00:05:27.710 --> 00:05:36.260
It's going to be called Client tick and it is going to take just like a tick component is going to take

80
00:05:36.260 --> 00:05:37.870
a float delta time.

81
00:05:38.820 --> 00:05:44.790
And that we're going to implement underneath the update server state in the seapass plus file.

82
00:05:44.790 --> 00:05:47.050
So that's just below where we were.

83
00:05:47.950 --> 00:05:53.090
Update service stay and give it the you go cat movement replicator colon colon.

84
00:05:53.990 --> 00:05:59.250
And then that we are going to give it a body that okay doesn't need to return to.

85
00:05:59.350 --> 00:06:05.140
So that's where we're going to implement our stuff and we can call this client tick inside tick.

86
00:06:05.420 --> 00:06:09.650
When the role is simulated proxy so we're going to remove this simulate move.

87
00:06:09.650 --> 00:06:13.390
We don't need to simulate move are going to be doing that differently now.

88
00:06:13.430 --> 00:06:17.780
We're going to be doing that as we are explaining in a pseudo code basically.

89
00:06:17.780 --> 00:06:21.470
So that's client tiggers is going to keep ATIC nice and sensible.

90
00:06:21.470 --> 00:06:24.950
And I am going to go ahead and do something in tick.

91
00:06:25.100 --> 00:06:25.710
What are we going to do.

92
00:06:25.730 --> 00:06:27.740
Well we're going to update that time variable.

93
00:06:27.740 --> 00:06:31.810
So we are going to take that time since update and increment it by the delpha time.

94
00:06:31.820 --> 00:06:35.770
So we're gonna have time since client time since update.

95
00:06:37.130 --> 00:06:45.220
Client time not between updates but since update and it's going to be Plus equal Delta.

96
00:06:46.020 --> 00:06:46.650
Time.

97
00:06:47.010 --> 00:06:52.080
So it's just going to be increasing by that time everything will take very straightforward.

98
00:06:52.290 --> 00:07:00.360
How about these other time variables our time between last update is not set and when does client time

99
00:07:00.420 --> 00:07:02.730
since update ever get reset to zero.

100
00:07:02.730 --> 00:07:05.290
Well that is based on the on ramp.

101
00:07:05.370 --> 00:07:07.870
So that's what we're going to have a look at next.

102
00:07:08.250 --> 00:07:13.830
So here what I actually want to do is split this out into two different functions because one of them

103
00:07:13.830 --> 00:07:18.090
here is dealing with the on rep for the autonomous proxy essentially.

104
00:07:18.090 --> 00:07:23.460
So we're doing all this set at transform and clearing the acknowledged moves which we don't need to

105
00:07:23.460 --> 00:07:26.550
do on the serve we're new two on the autonomous proxy actually.

106
00:07:26.940 --> 00:07:32.230
And in the other case when it is the simulated proxy we need to do something differently.

107
00:07:32.250 --> 00:07:36.330
So what I'm going to do is split this out in two to different functions so let's go to the header file

108
00:07:36.390 --> 00:07:37.850
again and just underneath that.

109
00:07:37.860 --> 00:07:41.630
On rep server state I am going to have two different on reps.

110
00:07:41.640 --> 00:07:43.920
It's going to be first of all void.

111
00:07:45.140 --> 00:07:46.320
Simulated.

112
00:07:48.120 --> 00:07:49.090
Proxy.

113
00:07:53.020 --> 00:07:54.190
Underscore on rep.

114
00:07:54.210 --> 00:08:00.090
Service state and we are going to have another one of these which is going to be the autonomous proxy

115
00:08:00.990 --> 00:08:02.490
on rep service state.

116
00:08:06.530 --> 00:08:09.020
MIKE So I think I spelled that correctly.

117
00:08:09.250 --> 00:08:15.220
So let's go ahead and implement those Sangar copy them go down into the C++ and implement them just

118
00:08:15.250 --> 00:08:18.300
after an hour on rep service state.

119
00:08:18.610 --> 00:08:27.670
And you just get the I call it a class namespace is not really a class namespace it is just the class

120
00:08:27.790 --> 00:08:28.560
specifier.

121
00:08:28.570 --> 00:08:30.140
I'm not entirely sure what it's called.

122
00:08:30.190 --> 00:08:36.220
I call it names based because it has very similar syntax syntax it helps me but if you prefer to call

123
00:08:36.220 --> 00:08:39.270
it something else then by all means do so.

124
00:08:39.280 --> 00:08:42.740
We're going to copy this code that is just for the.

125
00:08:43.930 --> 00:08:45.250
Autonomous proxy.

126
00:08:45.280 --> 00:08:51.660
In fact an exact copy the whole thing cut it out and put it in the on ptolemy's Proxy version.

127
00:08:52.150 --> 00:08:56.280
And then we were going to do in our on rep service state is actually put some if statements in here

128
00:08:56.290 --> 00:09:04.050
so I'm going to do and if first of all we're going to say if I get on a roll is the autonomous proxy.

129
00:09:04.830 --> 00:09:10.860
And then a we are going to go ahead and extra Actually this could be done in a switch statement so let's

130
00:09:10.860 --> 00:09:16.950
do this on a switch statement because people like switch statements I'm not a big fan but that's for

131
00:09:16.950 --> 00:09:17.790
my own reasons.

132
00:09:17.970 --> 00:09:20.310
So let's go and get the owner roll.

133
00:09:20.430 --> 00:09:22.580
That's what we're going to want to switch on.

134
00:09:23.430 --> 00:09:25.690
Like so get on a roll.

135
00:09:25.770 --> 00:09:27.800
And then we are going to have some defaults.

136
00:09:27.810 --> 00:09:32.330
But we are going to have some cases as well and the cases are going to be.

137
00:09:32.480 --> 00:09:37.080
Let's see get autonomous role autonomous proxy is one case.

138
00:09:37.080 --> 00:09:41.430
I don't particularly like switch lanes because of this break syntax I really dislike that breaks in

139
00:09:41.430 --> 00:09:41.810
Texas.

140
00:09:41.820 --> 00:09:44.770
Oh well that's not something you just have to live with.

141
00:09:44.780 --> 00:09:50.030
Cause C++ is quite an old language and it has to retain backwards compatibility.

142
00:09:50.250 --> 00:09:54.450
And then were going had the simulated proxy as well so.

143
00:09:55.410 --> 00:09:55.740
Okay.

144
00:09:55.870 --> 00:10:03.000
So what we're going to do here is in each of these cases we're going to call the appropriate function.

145
00:10:03.010 --> 00:10:09.480
So in the autonomous proxy surprise surprise we call the autonomous proxy server state on rep.

146
00:10:09.490 --> 00:10:13.670
And in the simulator proxy we call the simulated proxy on.

147
00:10:14.910 --> 00:10:16.290
On rep.

148
00:10:16.750 --> 00:10:17.120
Okay.

149
00:10:17.280 --> 00:10:21.930
So we've got two functions that separates things out a little bit and also keeps things nice and clean.

150
00:10:21.930 --> 00:10:26.910
If you read any stuff by Uncle Bob he says that switch they should pretty much be the only thing inside

151
00:10:26.910 --> 00:10:27.290
a function.

152
00:10:27.300 --> 00:10:30.480
You have a switch statement then it shouldn't do anything else it should call out to the appropriate

153
00:10:30.480 --> 00:10:35.080
functions that do the appropriate thing so keeping our code nice and clean which I'd like.

154
00:10:35.220 --> 00:10:38.850
So now we have to figure out what we're doing with our time variables out was a bit of a long detour

155
00:10:39.150 --> 00:10:42.760
but what we're trying to do with our time variables is the following.

156
00:10:43.230 --> 00:10:49.920
Well first of all we have not said anything to time between last update so let's do client time between

157
00:10:49.920 --> 00:10:52.690
last updates is going to be equal to.

158
00:10:52.770 --> 00:10:58.500
Well currently it's going to be equal to the time since update because we have just had a new update

159
00:10:58.500 --> 00:10:59.190
come in.

160
00:10:59.190 --> 00:11:01.340
We have not yet reset this to zero.

161
00:11:01.440 --> 00:11:06.900
So that is the time between last update so it's going to be the client's time since update is going

162
00:11:06.900 --> 00:11:08.710
to be a time between last update.

163
00:11:08.820 --> 00:11:09.450
Fantastic.

164
00:11:09.510 --> 00:11:13.230
And that's going to stay put until the next server state.

165
00:11:13.320 --> 00:11:14.850
Very straightforward.

166
00:11:14.850 --> 00:11:20.730
Now the client time since update is going to need to be reset to zero because we've just received an

167
00:11:20.730 --> 00:11:23.050
update so there is zero time since the last update.

168
00:11:23.070 --> 00:11:24.550
That seems to make sense to me.

169
00:11:24.840 --> 00:11:25.300
Okay.

170
00:11:25.350 --> 00:11:26.580
So that's fairly straightforward.

171
00:11:26.580 --> 00:11:32.700
We've dealt with our time variables one more thing that we have to do is make sure that we are not in

172
00:11:32.700 --> 00:11:38.240
the first update and so we don't do anything until we've received at least two updates.

173
00:11:38.310 --> 00:11:41.370
And when is it that we will have received two updates.

174
00:11:41.670 --> 00:11:45.870
Well let me show you some somewhere here in the client tick.

175
00:11:45.990 --> 00:11:54.090
We will not have received any update if our clients time between last dates is less which is basically

176
00:11:54.090 --> 00:11:55.710
zero but we dont do.

177
00:11:55.710 --> 00:11:56.150
Equals.

178
00:11:56.160 --> 00:11:56.940
Equals zero.

179
00:11:56.970 --> 00:12:01.230
With floating point numbers because they can sometimes be very small and its not very meaningful to

180
00:12:01.230 --> 00:12:02.620
say equals equals zero.

181
00:12:02.640 --> 00:12:10.830
So we want to make sure that we dont have very small client time between that update to do that.

182
00:12:10.830 --> 00:12:18.960
There is a kind of unreal ish way to do this the client time between last update is less than and then

183
00:12:19.050 --> 00:12:27.420
there is a constant here which always makes me laugh but its called kinda small no all caps with underscores

184
00:12:28.050 --> 00:12:36.210
underscores between it and that is the counterpart there is also a small number which is the same in

185
00:12:36.210 --> 00:12:37.450
the same syntax.

186
00:12:37.470 --> 00:12:43.140
This always makes me laugh but the small number is smaller than the kind of small number so you can

187
00:12:43.140 --> 00:12:49.750
see here when I hover over it the small number is 1 times 10 to the minus 8.

188
00:12:49.770 --> 00:12:57.080
So is quite a small number indeed and the kinda small number is larger but still rather small.

189
00:12:57.180 --> 00:13:02.710
So that is equal to see if I hover over it times 10 to the minus four.

190
00:13:02.880 --> 00:13:04.140
So what does that mean.

191
00:13:04.140 --> 00:13:09.500
It means that weve moved one over four decimal places so this is times ten to the minus one.

192
00:13:09.540 --> 00:13:11.880
This is time ten to the minus two.

193
00:13:11.910 --> 00:13:14.580
This is times 10 to the minus three and its times sent a month.

194
00:13:14.850 --> 00:13:16.680
So that is what kind a small number is.

195
00:13:16.680 --> 00:13:19.180
Its not a point oh oh oh.

196
00:13:19.220 --> 00:13:22.900
One is a very small number but only kind of small.

197
00:13:23.250 --> 00:13:24.800
So I like the name that concept.

198
00:13:25.020 --> 00:13:31.710
Anyway so we're going to return when we have a kinda small number in time between last update because

199
00:13:31.710 --> 00:13:34.410
remember were using it to calculate a Lerp ratio.

200
00:13:34.410 --> 00:13:38.620
If you divide by a really small number then errors start to get really big.

201
00:13:39.540 --> 00:13:41.340
You want to see more about this then.

202
00:13:41.370 --> 00:13:47.440
I have linked to a an article about the issues with maths in floating point.

203
00:13:47.440 --> 00:13:52.170
Its quite a deep subject but basically one thing you should be wary of with floating point numbers is

204
00:13:52.170 --> 00:13:58.770
dividing a large number by a very small number because sometimes it can just blow up hugely more than

205
00:13:58.770 --> 00:13:59.750
it should have done.

206
00:13:59.910 --> 00:14:03.760
And you get massive compounding of errors with floating point numbers.

207
00:14:03.960 --> 00:14:10.530
So that has updated our time interval which means that it is time to talk about f maths Lerp or f maths

208
00:14:10.560 --> 00:14:11.980
coca-cola Lerp.

209
00:14:12.150 --> 00:14:16.920
Now as I mentioned in the last lecture Lerp is fairly straightforward it takes an A and A B so you can

210
00:14:16.920 --> 00:14:24.870
see here in the definition on the documentation we have a in b being a type team which is a template

211
00:14:24.870 --> 00:14:31.160
parameter basically can be of any type that you can do multiplication and subtraction and addition to

212
00:14:31.440 --> 00:14:34.250
and it will be able to calculate what goes in between.

213
00:14:34.260 --> 00:14:35.220
So it's very clever.

214
00:14:35.220 --> 00:14:41.460
You can use it on whatever you like basically and Alpher again is something that you need to be able

215
00:14:41.460 --> 00:14:43.600
to multiply a by.

216
00:14:43.680 --> 00:14:47.630
So this works very well with vectors so it works very well with locations.

217
00:14:47.760 --> 00:14:49.790
So Lerp is fairly straightforward.

218
00:14:49.800 --> 00:14:55.830
You can use it just like we've done in the pseudo code but there is one caveat which is it doesn't necessarily

219
00:14:55.830 --> 00:15:00.100
behave particularly well if Alpha and Beta become very large.

220
00:15:00.160 --> 00:15:03.340
Sorry if a and b become very large numbers.

221
00:15:03.510 --> 00:15:09.720
And for this reason f maths has another function which is called F maths Lerp stable.

222
00:15:09.960 --> 00:15:12.570
And this works much better it does some jiggery pocari.

223
00:15:12.570 --> 00:15:19.770
Again working around these floating point issues with maths he's ugly with maths floating point it can

224
00:15:19.770 --> 00:15:25.350
be very nice can sometimes be error prone because floating point numbers are just a representation of

225
00:15:25.350 --> 00:15:25.860
real numbers.

226
00:15:25.860 --> 00:15:30.720
They're not exactly perfect and so you have to work around that sometimes.

227
00:15:30.780 --> 00:15:35.970
So Lerp stable does those workarounds for you and it does basically the maths in a slightly different

228
00:15:35.970 --> 00:15:36.660
rearrangement.

229
00:15:36.660 --> 00:15:42.150
That means that avoids multiplying by small numbers and things like this and that allows it to be stable

230
00:15:42.150 --> 00:15:43.610
with larger numbers.

231
00:15:43.740 --> 00:15:45.960
So this is the function that I recommend you use.

232
00:15:46.080 --> 00:15:47.270
Most of the time.

233
00:15:47.580 --> 00:15:52.710
So let's go ahead and give you a challenge to implement the pseudo code which member variables are you

234
00:15:52.710 --> 00:15:53.820
missing that's the first thing.

235
00:15:53.820 --> 00:15:57.960
Look at the green variables from the pseudocode and see what you might be missing.

236
00:15:57.960 --> 00:15:58.830
Implement tick.

237
00:15:58.860 --> 00:16:02.820
First of all so you've got a client to go ahead and implement it using that pseudocode.

238
00:16:03.150 --> 00:16:08.740
You got on rep go ahead and implement that using the pseudo code and try and keep it neat as you going.

239
00:16:09.090 --> 00:16:10.260
Okay pause a video and have a go.

240
00:16:10.260 --> 00:16:11.880
Implementing this pseudo code.

241
00:16:13.310 --> 00:16:17.620
Okay welcome back so I am going to have a go at implementing the pseudo code.

242
00:16:17.900 --> 00:16:23.000
I'm going to scroll back to the pseudocode and we'll use this as a reference.

243
00:16:23.250 --> 00:16:26.210
OK so the first thing is the target location.

244
00:16:26.350 --> 00:16:31.870
I'm going to have to go ahead get it get the target locations I'm in client tick after we have done

245
00:16:31.880 --> 00:16:38.210
return if the Update the time between updates is too small we are going to do the following so we are

246
00:16:38.210 --> 00:16:40.590
going to create a target location.

247
00:16:40.660 --> 00:16:43.100
I'm going to use an F vector.

248
00:16:43.100 --> 00:16:48.930
Now this does kind of bore me having to use a factor and time to type all the time I do in my own projects

249
00:16:48.930 --> 00:16:50.410
I prefer to use Auto.

250
00:16:50.410 --> 00:16:55.820
And you can do auto as well but if you are more comfortable with affecter and I know a lot of students

251
00:16:55.880 --> 00:17:00.310
are more comfortable with explicitly typing that type I'm going to be sticking with that.

252
00:17:00.350 --> 00:17:03.300
So there's fxi target location.

253
00:17:04.740 --> 00:17:07.740
It's going to be equal to our surface state.

254
00:17:07.740 --> 00:17:16.500
So the last update that came through essentially dot transform dot get location so as not exactly the

255
00:17:16.500 --> 00:17:17.530
same as in my pseudocode.

256
00:17:17.550 --> 00:17:21.780
But that's the point pseudocode is pseudocode it's not real code it's not meant to run.

257
00:17:21.900 --> 00:17:23.740
It's just meant to get the point across.

258
00:17:23.760 --> 00:17:26.070
So we got our target location what about our Lerp ratio.

259
00:17:26.070 --> 00:17:32.790
Well that's going to be a float and a call at the Lerp ratio like so and it is going to be the client

260
00:17:32.790 --> 00:17:33.400
time.

261
00:17:34.420 --> 00:17:42.240
My int times since updates divided by the client time between last updates which we have checked is

262
00:17:42.240 --> 00:17:46.600
in a sensible range already and accidentally gone and scrolled all the way down there.

263
00:17:46.680 --> 00:17:48.840
Client time between last updates.

264
00:17:48.840 --> 00:17:49.380
Brilliant.

265
00:17:49.560 --> 00:17:52.610
So we got our Lerp ratio we've got at Target location.

266
00:17:52.610 --> 00:17:57.980
What's missing is our start location so we need to go ahead and create a start location.

267
00:17:58.140 --> 00:18:04.410
So I'm going to go up to the DOT H and here near our client time since update client time to been updating

268
00:18:04.410 --> 00:18:08.970
and doing vector which is going to be effect not affection.

269
00:18:08.970 --> 00:18:12.280
I dont know what affection is its going to be.

270
00:18:12.290 --> 00:18:12.810
Client.

271
00:18:12.870 --> 00:18:13.420
Start.

272
00:18:13.530 --> 00:18:14.380
Location.

273
00:18:17.090 --> 00:18:17.770
Like so.

274
00:18:19.560 --> 00:18:28.130
And I am going to go over to the client tick and I'm actually just going to do a quick rename in here.

275
00:18:29.060 --> 00:18:32.170
Current start location so it looks like the pseudo code.

276
00:18:32.190 --> 00:18:38.870
Keep it nice and neat so client start location is equal to the client's stock location.

277
00:18:39.210 --> 00:18:40.700
And then we're going to do a Lerp.

278
00:18:40.740 --> 00:18:48.660
So we're going to get an F and factor out as the result of our Lerp and it is going to be the new location.

279
00:18:48.660 --> 00:18:50.960
So were going to do an F maths.

280
00:18:52.600 --> 00:18:53.420
On colon.

281
00:18:54.650 --> 00:18:56.740
Lerp stable.

282
00:18:57.170 --> 00:18:59.640
So and then we get the A and B.

283
00:18:59.660 --> 00:19:05.320
So we're going from our start location member so it's zero time when the updates just happened.

284
00:19:05.360 --> 00:19:11.930
We should be and astarte location at the one time basically at the time between last updates since the

285
00:19:11.930 --> 00:19:12.950
last update.

286
00:19:13.070 --> 00:19:19.490
We are going to be hopefully at a target location so that is from Start location to target location

287
00:19:19.500 --> 00:19:20.990
then we're going to use Alpha.

288
00:19:21.180 --> 00:19:24.140
He's going to be at Lerp I'll call that rashin.

289
00:19:24.140 --> 00:19:27.430
I want to call it the Lerp ratio.

290
00:19:28.700 --> 00:19:32.010
Okay so that is implementing a pseudo pseudocode almost.

291
00:19:32.010 --> 00:19:33.840
We now need to set the location.

292
00:19:33.840 --> 00:19:36.650
So it's going to be a get owner.

293
00:19:38.880 --> 00:19:39.490
Arrow.

294
00:19:40.250 --> 00:19:43.260
Set actor location.

295
00:19:43.610 --> 00:19:46.420
And that's going to be an new location like set.

296
00:19:47.810 --> 00:19:51.740
Okay so that should be okay for client tick now.

297
00:19:51.740 --> 00:19:55.410
Now we just need to implement the bit for our own rep.

298
00:19:55.460 --> 00:20:01.040
So we go to simulated proxy on rep and after we've reset our client times and so on so forth we need

299
00:20:01.040 --> 00:20:06.350
to set our start location which currently doesn't have any value so it's going to be client start location.

300
00:20:06.870 --> 00:20:08.710
If I can't type.

301
00:20:09.150 --> 00:20:11.580
And that's going to be equal to our Get owner.

302
00:20:13.290 --> 00:20:15.680
Arrow get asked.

303
00:20:15.990 --> 00:20:16.790
Location.

304
00:20:16.850 --> 00:20:17.480
OK so.

305
00:20:18.720 --> 00:20:21.910
Right let's build that and see if it works.

306
00:20:21.990 --> 00:20:27.320
We have one little compile error here with get owner not quite being spelt correctly.

307
00:20:27.380 --> 00:20:28.070
Rebuild.

308
00:20:29.160 --> 00:20:29.390
Okay.

309
00:20:29.400 --> 00:20:30.480
So that build succeeded.

310
00:20:30.480 --> 00:20:34.780
Let's hop in to unreel and see how it works.

311
00:20:34.800 --> 00:20:36.300
So I'm going to hit play.

312
00:20:36.330 --> 00:20:42.840
I'm going to move my authority over to the left and the autonomous box to the right and I'm going to

313
00:20:42.840 --> 00:20:45.340
drive the authority in front of our autonomous proxy.

314
00:20:45.630 --> 00:20:51.180
So obviously the rotation is not coming through yet and that is expected because we have not yet implemented

315
00:20:51.180 --> 00:20:52.010
rotation.

316
00:20:52.080 --> 00:20:58.980
But as you can see here we are smoothly interpolating between positions without and this is the important

317
00:20:58.980 --> 00:21:00.980
thing without any jumping anywhere.

318
00:21:00.990 --> 00:21:07.170
Now it's not that smooth you can see that it reaches points and then it just kind of changes direction

319
00:21:07.200 --> 00:21:07.710
instantly.

320
00:21:07.710 --> 00:21:09.760
So we're going to be improving that too.

321
00:21:09.810 --> 00:21:17.160
But first we're going to look at how we can improve the rotation using a slurp a spherical linear interpolation

322
00:21:17.670 --> 00:21:22.380
and then we're going to move on to making a smoother interpolation here.

323
00:21:22.380 --> 00:21:25.620
So let's move on and see you in the next video.
