1
00:00:04,600 --> 00:00:05,980
Hello and welcome in this lecture.

2
00:00:05,980 --> 00:00:12,010
I am going to be reviewing why we do refactoring and something called the red green refactored loop

3
00:00:12,010 --> 00:00:16,750
and I'm going introduced to this website called refracting look through an excellent resource for knowing

4
00:00:16,750 --> 00:00:22,000
what kind of refactored to do what kind of codes smells to recognize even a section on design patterns

5
00:00:22,020 --> 00:00:23,970
to be going into that in this lecture.

6
00:00:23,980 --> 00:00:28,530
So let's dive in and just recap how we do refactoring.

7
00:00:29,540 --> 00:00:35,690
So as I mentioned in the last lecture this class is getting a bit too big and it's getting really hard

8
00:00:35,750 --> 00:00:38,690
to figure out what we want to do now.

9
00:00:38,720 --> 00:00:40,520
How do we get into this state.

10
00:00:40,520 --> 00:00:45,530
You know we had some nice clean code when we started off clean code by the way is code that's easy to

11
00:00:45,530 --> 00:00:49,760
read in easy to maintain and doesn't easily hide many bugs.

12
00:00:49,760 --> 00:00:51,790
That's what we mean by clean code.

13
00:00:52,010 --> 00:00:54,040
And it started off fairly simple.

14
00:00:54,080 --> 00:00:58,520
You know we didn't have very much going on with justice and physics emulation it was all hunky dory.

15
00:00:58,520 --> 00:01:01,110
Now why has it got a little bit out of control.

16
00:01:01,130 --> 00:01:07,870
Well let me explain something to you called the refat the red green refactored process.

17
00:01:07,880 --> 00:01:13,970
So typically the red greenery factor loop is referred to in that test driven development but it does

18
00:01:13,970 --> 00:01:16,580
apply outside of test driven development as well.

19
00:01:16,580 --> 00:01:24,410
It does apply to any situation where we have a list of requirements that we want to implement and a

20
00:01:24,410 --> 00:01:26,920
process of verifying whether requirements exist.

21
00:01:27,170 --> 00:01:29,390
In our case it's just manual testing.

22
00:01:29,390 --> 00:01:34,070
We just come up with a new idea that we wanted to do something and then we implement it and we check

23
00:01:34,070 --> 00:01:35,060
whether it works.

24
00:01:35,090 --> 00:01:40,370
That's a sort of test drone development although it doesn't actually have any automatic tests which

25
00:01:40,370 --> 00:01:44,750
means that unless you are very good and keep a list of requirements written down somewhere and every

26
00:01:44,750 --> 00:01:49,210
time you make a change you run through to check those requirements all still work.

27
00:01:49,430 --> 00:01:54,080
Then you may end up with something called a regression which is where you had something working and

28
00:01:54,080 --> 00:01:56,030
then it stopped working.

29
00:01:56,420 --> 00:01:58,250
But anyway that's a little bit on a side note.

30
00:01:58,250 --> 00:02:03,220
So we start off having written some code and it's fairly clean it's fairly easy to understand.

31
00:02:03,440 --> 00:02:04,430
Then what happens to it.

32
00:02:04,430 --> 00:02:06,310
How do we end up with messy code.

33
00:02:06,560 --> 00:02:11,660
Well we introduce a new requirement for a start so we might say okay we want our autonomous proxy to

34
00:02:11,660 --> 00:02:15,170
move around without having to jump back.

35
00:02:15,170 --> 00:02:23,570
In the case of lag so suddenly our nice clean and working code is no longer working it's red it is incorrect

36
00:02:23,570 --> 00:02:29,250
it is failing a test which is that new requirement that it doesn't jump back because it does jump back.

37
00:02:29,270 --> 00:02:30,040
So what do we do.

38
00:02:30,050 --> 00:02:36,050
Well we try and think up a solution and we play around and we implement that solution we coded up hackitt

39
00:02:36,050 --> 00:02:42,620
up and we implement it quick and dirty so we don't worry too much about how we're implanting it we don't

40
00:02:42,620 --> 00:02:45,500
try to slow down because our solution might not even be right.

41
00:02:45,590 --> 00:02:47,800
It might not even fix the bug.

42
00:02:47,810 --> 00:02:50,000
They might not even fix the new requirement.

43
00:02:50,030 --> 00:02:53,250
So we do have to do it fairly quick.

44
00:02:53,560 --> 00:02:59,210
And so we end up with something that passes the test but it's messy and messy means it's going to be

45
00:02:59,210 --> 00:03:00,050
hard to maintain.

46
00:03:00,050 --> 00:03:01,610
Hard to add new features.

47
00:03:01,670 --> 00:03:06,740
We've got something called technical debt which is basically the fact that we managed to do it quick

48
00:03:06,740 --> 00:03:09,020
and dirty because it was clean.

49
00:03:09,020 --> 00:03:13,350
But in the future we aren't going to be able to do it so quickly because it's not clean anymore.

50
00:03:13,550 --> 00:03:16,850
So what happens after we've made it a bit messy.

51
00:03:16,880 --> 00:03:19,910
Well hopefully we go ahead and refactor.

52
00:03:19,970 --> 00:03:25,050
Now the more you miss this step out the more you don't reflect that after having implemented something

53
00:03:25,070 --> 00:03:31,130
quick and dirty the more messy and messy your code gets and the harder it becomes to implement a fix

54
00:03:31,430 --> 00:03:32,430
to things.

55
00:03:32,450 --> 00:03:37,490
So that's why eventually and people end up having a really big refactored or just grinding to a halt

56
00:03:37,490 --> 00:03:42,830
on projects because they don't know how they can proceed because their code is so hard they spend most

57
00:03:42,830 --> 00:03:46,230
of the time reading and trying to understand Rick does and can't implement anything.

58
00:03:46,280 --> 00:03:49,840
And if they try and implement anything it behaves in weird and wonderful ways.

59
00:03:50,330 --> 00:03:55,220
So how do we know when it's time to refactor Well if we're struggling to write code or we're finding

60
00:03:55,220 --> 00:04:00,490
that we're creating bugs when we do write code that's often a good sign that there's something wrong

61
00:04:00,980 --> 00:04:05,550
and this something wrong is typically referred to in programming as a code smell.

62
00:04:05,690 --> 00:04:09,140
So how do we spot these so-called code smells.

63
00:04:09,900 --> 00:04:13,710
Well if you are very experienced then you will probably just have an intuition for them.

64
00:04:13,710 --> 00:04:18,810
But if you're not as experienced then you might want to go and have a look at a reference of kind of

65
00:04:18,810 --> 00:04:20,570
known codes smell's if you like.

66
00:04:20,700 --> 00:04:26,110
And I really recommend this one is called refactoring dog guru and it's a very well put together website

67
00:04:26,820 --> 00:04:28,290
and great for beginners.

68
00:04:28,350 --> 00:04:33,960
If you are finding yourself stuck grinding to a halt and not being able to progress with your projects

69
00:04:34,410 --> 00:04:38,830
then it might be your good deeds as a good idea to see if you've got any of these codes metals now.

70
00:04:38,910 --> 00:04:44,720
The place I recommend you go is to the left pane to the section a site called refactoring sets.

71
00:04:44,790 --> 00:04:50,610
Refactoring doggery affords laterally factoring and particularly we want to look at the section called

72
00:04:50,610 --> 00:04:51,730
Code smells.

73
00:04:52,350 --> 00:04:55,930
And here you have a whole long list of code smells.

74
00:04:56,700 --> 00:05:01,610
Lots of them and they're grouped together depending on what they are like.

75
00:05:02,010 --> 00:05:09,120
And you can go ahead and click on one of them and here it has a nice description of why they come into

76
00:05:09,120 --> 00:05:11,890
being how you should treat them.

77
00:05:11,910 --> 00:05:12,630
And.

78
00:05:14,420 --> 00:05:15,160
Why.

79
00:05:15,440 --> 00:05:20,320
You know they might not need anything doing to them do make sure you read all of that.

80
00:05:20,480 --> 00:05:24,830
And then once you have read all of that you can have a look at what the treatments are and try and choose

81
00:05:24,830 --> 00:05:30,770
the best treatment and these treatments are called Re factors in the terminology of refactored or Kuru

82
00:05:30,830 --> 00:05:32,040
refactoring logorrhea.

83
00:05:32,120 --> 00:05:36,370
And here it kind of in the refactor shows you again a summary of what the problem is.

84
00:05:36,380 --> 00:05:38,870
But in more detail how you might solve it.

85
00:05:38,870 --> 00:05:44,780
So for every code smell there's a couple of ways that you might need to solve it depending on your specific

86
00:05:44,780 --> 00:05:45,500
case.

87
00:05:45,500 --> 00:05:50,210
Now you'll notice this website also has a design pattern site and I know a lot of people get really

88
00:05:50,540 --> 00:05:54,680
hooked up on design patterns and want to learn all the design patterns It's like Pokemon you got to

89
00:05:54,680 --> 00:05:56,360
catch em all you got to know them all.

90
00:05:56,450 --> 00:05:58,220
And it is very tempting.

91
00:05:58,220 --> 00:06:02,490
I recommend if you are very tempted by design patterns go and read the.

92
00:06:02,510 --> 00:06:04,100
What is the pattern section.

93
00:06:04,370 --> 00:06:06,320
And under what is a pack pattern section.

94
00:06:06,320 --> 00:06:13,940
There is a criticism section and this talks about reasons why design patterns are always a fantastic

95
00:06:13,940 --> 00:06:16,110
idea why you shouldn't necessarily always use them.

96
00:06:16,110 --> 00:06:20,720
Particularly I'm interested in that if you have a hammer in your hand things start to look like a nail

97
00:06:20,990 --> 00:06:26,540
because if you appear especially as a beginner start to learn design patterns and you start to want

98
00:06:26,540 --> 00:06:31,250
to apply them everywhere even when they're not applicable and they just make things more complicated

99
00:06:31,250 --> 00:06:34,250
rather than what they're intended to do which is make them more simple.

100
00:06:34,250 --> 00:06:36,310
But by all means you can read that section of the site as well.

101
00:06:36,320 --> 00:06:39,130
That's just a word of caution.

102
00:06:39,170 --> 00:06:45,730
So I'd like you to use this website to identify a suitable refactor for our specific code smell.

103
00:06:45,800 --> 00:06:50,020
So if we go ahead and look at the challenge definition your challenge is going to be to plan the refactored

104
00:06:50,030 --> 00:06:52,450
So first of all identify the codes as well.

105
00:06:52,700 --> 00:06:58,130
Secondly choose a refactor And thirdly plan that refactored so by Identify the kossmann I mean go on

106
00:06:58,130 --> 00:07:03,690
the website go and have a look through the refactoring codes Mel's section here.

107
00:07:04,450 --> 00:07:07,140
And see which one you think most applies.

108
00:07:07,210 --> 00:07:13,360
Maybe make a list of them if there's more than one and then choose a refactor from any one of those

109
00:07:13,880 --> 00:07:20,050
small pages and have a look at which one of those three factors is probably best.

110
00:07:20,050 --> 00:07:26,040
In our case and then go ahead and see what you can do about designing planning on paper at first.

111
00:07:26,200 --> 00:07:29,830
What we're going to do in that refactored so pause the video and have a go at this challenge.

112
00:07:31,420 --> 00:07:32,350
Okay welcome back.

113
00:07:32,350 --> 00:07:37,900
So let's go ahead and identify what we think he is a suitable codes.

114
00:07:37,930 --> 00:07:44,290
All the codes melet most matches in our case what I'm feeling like is that class is getting too big.

115
00:07:44,440 --> 00:07:50,560
So there is a code smell here if you've had a little look through called large class that's what I'm

116
00:07:50,560 --> 00:07:51,480
thinking here.

117
00:07:51,490 --> 00:07:53,780
Get the large class and signs and symptoms.

118
00:07:53,950 --> 00:07:57,430
A class containing many fields methods and lines of code.

119
00:07:57,580 --> 00:07:59,590
So we've definitely got all three of those.

120
00:07:59,590 --> 00:08:05,710
We've got 200 lines of code which isn't too bad but if you go and look at the header file and you can

121
00:08:05,710 --> 00:08:11,580
see that we've got about 100 lines of head of file which means that we've got loads and loads of fields.

122
00:08:11,620 --> 00:08:16,630
We've got loads of methods most of them private in fact not even public methods.

123
00:08:16,660 --> 00:08:23,230
So this class is probably doing more than one thing as shown in this lovely illustration of it trying

124
00:08:23,260 --> 00:08:27,880
to work out and do the hoovering and cook and phone and everything.

125
00:08:28,030 --> 00:08:29,830
So reasons for the problem.

126
00:08:29,830 --> 00:08:34,810
So usually we start off with a small class Yes we did we started off with an actor that was all we had

127
00:08:35,110 --> 00:08:41,440
and it didn't do very much and we started to and slowly the physics simulation then we added also the

128
00:08:42,100 --> 00:08:43,000
replication cone.

129
00:08:43,000 --> 00:08:47,800
It was just easier to put it there because it had everything that we needed we have access to all the

130
00:08:47,800 --> 00:08:49,410
methods that we needed.

131
00:08:49,420 --> 00:08:55,000
It was just simpler very much in the same case as if you have a really long method that typically is

132
00:08:55,000 --> 00:08:59,480
because it's just easier to add lines of code to an existing method than create a new one.

133
00:08:59,950 --> 00:09:02,410
So how are we going to deal with it.

134
00:09:02,410 --> 00:09:07,930
Well there's a few different ways you could pull out part of the behaviour as a smaller separate class

135
00:09:07,930 --> 00:09:10,140
or is even calling a component here.

136
00:09:10,480 --> 00:09:18,960
We could extract it in to a subclass so we could create a class that derives data from this and specializes

137
00:09:18,960 --> 00:09:20,010
it.

138
00:09:20,050 --> 00:09:27,310
We can extract an interface so that the list of if we had lots of public operations that serve for different

139
00:09:27,310 --> 00:09:33,400
purposes like we did with our game instance then different interfaces might be able to access in different

140
00:09:33,400 --> 00:09:33,660
ways.

141
00:09:33,660 --> 00:09:35,430
That just simplifies the public interface.

142
00:09:35,430 --> 00:09:42,640
If we've got too many public classes and then there is a special case for UI so that's not particularly

143
00:09:42,640 --> 00:09:43,680
interesting to us.

144
00:09:43,840 --> 00:09:48,100
And it says the pay off for refactoring these large classes spares the developers from needing to remember

145
00:09:48,130 --> 00:09:50,680
a large number of attributes for a class.

146
00:09:50,710 --> 00:09:55,620
And in many cases putting a lot of assets into parts avoids duplication of code and functionality.

147
00:09:55,660 --> 00:09:56,980
Case I've just read it to you.

148
00:09:56,980 --> 00:10:03,460
But basically the refactor the treatment that we want is the extract class we want to take a big class

149
00:10:04,000 --> 00:10:09,970
and split it off in to a smaller class and in real the typical way of doing this at least from an actor

150
00:10:10,240 --> 00:10:17,740
into smaller bits is to use components so let's go ahead and plan our refactor for extracting out classes

151
00:10:17,800 --> 00:10:19,450
from big act class.

152
00:10:19,510 --> 00:10:25,330
So typically the principle that applies here in Sutter engineering is called the single responsibility

153
00:10:25,330 --> 00:10:28,050
principle that a class should be responsible for.

154
00:10:28,060 --> 00:10:31,540
Just one thing and not more than that.

155
00:10:31,600 --> 00:10:36,250
So what we're going to do is we are going to have a go cart actor and what is our go cart actor going

156
00:10:36,250 --> 00:10:37,090
to be responsible for.

157
00:10:37,090 --> 00:10:39,160
Well basically what it's.

158
00:10:39,830 --> 00:10:44,550
What it needs to be responsible for which is binding input binding We can't do input binding anywhere

159
00:10:44,550 --> 00:10:46,710
else so maybe we could do it on the player controller.

160
00:10:46,710 --> 00:10:52,430
But here in the go cart actor is a good enough place so we're going to leave input binding there.

161
00:10:52,830 --> 00:10:58,830
But it is going to need to have a new component a component a movement component very much like we've

162
00:10:58,830 --> 00:11:04,980
seen with characters and porns and the responsibility for the movement campaign is going to be simulating

163
00:11:04,980 --> 00:11:06,780
physics in fact simulating movement.

164
00:11:06,780 --> 00:11:11,820
We're going to be able to give it things like throttle's and so on and it is going to have to be able

165
00:11:11,820 --> 00:11:17,110
to move the actor around in the world according to the movement rules of our game.

166
00:11:17,610 --> 00:11:22,560
Now obviously that's not enough because we've got a network element to our game so it's this go kart

167
00:11:22,560 --> 00:11:27,930
component is going to need gokul actor rather is going to need another component for replication so

168
00:11:27,930 --> 00:11:33,180
a replication component we'll call it and its responsibility is going to be replicating movement exclusively

169
00:11:33,210 --> 00:11:40,620
only movement and it is going to need to have direct access to the Movent component so that it can get

170
00:11:40,620 --> 00:11:41,380
properties of it.

171
00:11:41,380 --> 00:11:44,280
Mike what was the last move you did.

172
00:11:44,280 --> 00:11:46,590
Go ahead and simulate this thing for me.

173
00:11:46,620 --> 00:11:49,370
Because I'm a simulated proxy for example.

174
00:11:49,530 --> 00:11:54,690
So it's going to need to have access to reading from and also driving the movement component.

175
00:11:54,870 --> 00:11:59,280
But the moving component should work in single player as well so you want to make sure that if we didn't

176
00:11:59,310 --> 00:12:04,170
add a replication component on to the actor the movement component is going to work just fine you'll

177
00:12:04,170 --> 00:12:06,710
be able to drive around and so on.

178
00:12:07,110 --> 00:12:09,270
Okay so this is the plan.

179
00:12:09,270 --> 00:12:13,440
This is what can be achieving in the next couple of lectures and hopefully we'll end up with a product

180
00:12:13,920 --> 00:12:20,190
that is going to be much much easier to understand and will be able to implement interpellation on top

181
00:12:20,190 --> 00:12:20,720
of it.

182
00:12:20,910 --> 00:12:21,330
Okay.

183
00:12:21,480 --> 00:12:23,570
Let's dive in in the next couple lectures.
