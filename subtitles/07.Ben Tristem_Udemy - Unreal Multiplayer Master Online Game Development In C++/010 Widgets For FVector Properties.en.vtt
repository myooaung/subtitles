WEBVTT
1
00:00:04.440 --> 00:00:10.800
Hello welcome in this video we are going to be looking at how we can make an moving platform more configurable

2
00:00:11.010 --> 00:00:12.790
so that it can move in any direction.

3
00:00:12.800 --> 00:00:15.660
You can see here it's not moving directly along any axis.

4
00:00:15.660 --> 00:00:18.120
Actually going along a little bit of a diagonal line.

5
00:00:18.360 --> 00:00:24.130
And we're going to be achieving this while making it easy for the designer to do this by.

6
00:00:24.210 --> 00:00:29.910
Look if I click on my moving platform actor I can see my target location is a little point that I can

7
00:00:29.910 --> 00:00:32.520
just fiddle with in space like this.

8
00:00:32.520 --> 00:00:33.060
Isn't that cool.

9
00:00:33.060 --> 00:00:36.450
So we're going to be doing that very easily using someone real built in features.

10
00:00:36.510 --> 00:00:38.280
Let's dive in and see how.

11
00:00:38.760 --> 00:00:43.920
Okay let's just take a minute and improve some of our game play here.

12
00:00:43.920 --> 00:00:49.710
So the moment we've got this platform it moves off into the distance and it does a pretty bad job of

13
00:00:49.710 --> 00:00:53.040
that because it's just moving in the x direction.

14
00:00:53.190 --> 00:00:57.210
And I'd really rather it was a bit more intelligent than that.

15
00:00:57.400 --> 00:01:05.760
Okay so let's do it so that a game designer could specify that it moves from where the platform is currently

16
00:01:05.760 --> 00:01:09.750
located to another point in space that the game designer specifies.

17
00:01:09.780 --> 00:01:18.990
Now we would quite like to do this by just putting a target location as an F vector somewhere in code

18
00:01:19.000 --> 00:01:25.300
so just a you property that is configurable will go over to that platform and platform.

19
00:01:25.560 --> 00:01:29.970
You can see we've got a speed you property I'd like there to be an effect which is the target location

20
00:01:30.000 --> 00:01:31.110
as well.

21
00:01:31.110 --> 00:01:36.300
Now one problem there is if we put in that you Property In fact let's go ahead and do that.

22
00:01:36.300 --> 00:01:38.550
Now I'm going to create a new property.

23
00:01:40.730 --> 00:01:48.040
Anywhere because I want to be able to edit it in the it's better in the map.

24
00:01:48.460 --> 00:01:56.370
And if we do an F vector and now it's not a stance not a pointer because the vector is just a quite

25
00:01:56.380 --> 00:02:04.600
simple struct and then we're going to call this a target location semicolon fix the end indication which

26
00:02:04.630 --> 00:02:09.160
Visual Studio insists on and go ahead and build that.

27
00:02:09.160 --> 00:02:13.660
Now I'm going to head over into unreel and wait for the build to build complete.

28
00:02:13.660 --> 00:02:16.310
Let's go ahead and have a look at what that looks like.

29
00:02:16.360 --> 00:02:24.370
If I look at my moving platform and go into its details pane you'll see we've got this target location

30
00:02:24.370 --> 00:02:30.100
which we can tweak as all very well and good but I cant see the target location in the world which is

31
00:02:30.100 --> 00:02:36.520
really frustrating because if I want to say well I want that target location to be here it just doesnt

32
00:02:36.520 --> 00:02:37.690
really do it for me.

33
00:02:37.690 --> 00:02:43.150
It doesn't have that target location in its in the world.

34
00:02:43.270 --> 00:02:46.120
So as a designer that would be very confusing.

35
00:02:46.120 --> 00:02:48.300
Like what do these numbers mean like.

36
00:02:48.550 --> 00:02:55.180
Where do I put it all those kind of question so we really want is to have this kind of gizmo to move

37
00:02:55.180 --> 00:02:57.130
that target location around.

38
00:02:57.130 --> 00:02:59.810
Unfortunately in real we can do this really easily.

39
00:02:59.820 --> 00:03:04.360
Common really the best way to go and look for these things is to go and google for them.

40
00:03:04.390 --> 00:03:06.400
So thats what I would suggest you do.

41
00:03:06.400 --> 00:03:12.880
Its hard to remember the exact code and I never try to I just try to remember the keywords so this is

42
00:03:12.910 --> 00:03:19.440
a gizmo that we're talking about it could also be called a widget if you like for an F vector for a

43
00:03:19.450 --> 00:03:20.640
new property.

44
00:03:21.280 --> 00:03:27.890
And you'll find that search for this brings up first result very easily the.

45
00:03:29.210 --> 00:03:34.950
Property metter equals make edit widget equals true which is a bit weird and a bit esoteric.

46
00:03:35.090 --> 00:03:39.440
But if we copy that property and put it into a new property in the header.

47
00:03:40.270 --> 00:03:44.310
Just after the edit anywhere then compile.

48
00:03:44.410 --> 00:03:48.910
We should see something rather interesting happen in our project.

49
00:03:48.910 --> 00:03:55.210
So let me head back in to the projects to see that we now have these words floating words.

50
00:03:55.210 --> 00:03:58.050
Target location which looks promising.

51
00:03:58.150 --> 00:04:05.650
Let me go ahead and edit that target location and notice that there is a little diamond that moves.

52
00:04:05.650 --> 00:04:10.300
If I go ahead and select that diamond I can lift it up.

53
00:04:10.480 --> 00:04:17.140
I can move it over to the left a little bit in the x axis I can bring up so I'm going to basically create

54
00:04:17.140 --> 00:04:21.320
a platform that moves from here up here up higher in the air.

55
00:04:21.340 --> 00:04:25.560
So it's kind of more of an elevator than a sideways moving platform.

56
00:04:26.390 --> 00:04:27.760
So that's great.

57
00:04:27.770 --> 00:04:28.210
It's great.

58
00:04:28.210 --> 00:04:32.370
This diamond and I had to do very little effort to do that.

59
00:04:32.390 --> 00:04:35.090
I could just use a new property which is fantastic.

60
00:04:35.090 --> 00:04:41.360
Now one thing to notice about the dieman this current position the effect is that this diamond creates

61
00:04:41.750 --> 00:04:43.940
is that it's actually a relative position.

62
00:04:43.940 --> 00:04:51.380
You notice that if I reset it so it's 0 0 0 it's actually at the centre of the cube.

63
00:04:51.530 --> 00:04:57.350
Now that's important because it's not a global location a global location if receptor zero would have

64
00:04:57.350 --> 00:04:59.100
reset somewhere in the middle of this map.

65
00:04:59.110 --> 00:05:04.780
But is reset to the centre of the cube so it's an offset from the centre of the cube.

66
00:05:04.790 --> 00:05:07.470
That's a good thing to remember going forward.

67
00:05:08.830 --> 00:05:14.950
So let's have a look and a bit of revision about vectors on how to move from point A to Point.

68
00:05:16.770 --> 00:05:22.540
So let me just explain the space here we are going to be doing diagrams with 2D vectors.

69
00:05:22.560 --> 00:05:27.340
But everything I talk about with two dimensional vectors also works with three dimensional vectors.

70
00:05:27.450 --> 00:05:32.540
So remember that vectors are basically a wardian bits in two dimensional space.

71
00:05:32.550 --> 00:05:40.060
So here I've got an x axis and a Y axis and the vectors can be drawn as arrows such as this vector A.

72
00:05:40.320 --> 00:05:43.360
But remember that they can also be coordinates.

73
00:05:43.380 --> 00:05:45.140
So this could be a long two.

74
00:05:45.140 --> 00:05:48.440
In the x-axis and up 3 in the y axis for example.

75
00:05:48.450 --> 00:05:53.550
Now I haven't put any numbers down here because I just want to concentrate on the shapes rather than

76
00:05:53.550 --> 00:05:57.050
on the specific mathematics of the situation.

77
00:05:57.090 --> 00:05:57.920
So we've got a point.

78
00:05:57.920 --> 00:06:01.990
A You've got a point B and we want to move from a to point B.

79
00:06:02.010 --> 00:06:06.040
So we want to find out what the arrow from point A to Point B is.

80
00:06:06.360 --> 00:06:10.170
Well that is the vector B minus a.

81
00:06:10.170 --> 00:06:17.580
Now you can remember this quite easily by saying that we want to move backwards along the vector A and

82
00:06:17.580 --> 00:06:24.450
forwards along the vector B which leads to positive and negative A.

83
00:06:24.860 --> 00:06:30.870
Okay so that would give us the distance and the vector between point A and Point B so we could move

84
00:06:30.870 --> 00:06:32.090
there all in one go.

85
00:06:32.130 --> 00:06:36.910
But if we want to move there at a constant speed how would we achieve that.

86
00:06:37.040 --> 00:06:43.890
Well to move there at a certain speed we first need to normalize the vector which means to set it back

87
00:06:44.160 --> 00:06:46.520
to being a size of 1.

88
00:06:46.530 --> 00:06:48.710
Now 1 What I hear you ask.

89
00:06:48.750 --> 00:06:49.890
What unit is this in.

90
00:06:49.890 --> 00:06:55.710
Well it doesn't matter what unit is for the vector for the mathematics but for unreel situation we tend

91
00:06:55.710 --> 00:06:59.050
to use centimetres so this tends to be one centimetre.

92
00:06:59.430 --> 00:07:02.160
Then what we do is we can multiply that by whatever we like.

93
00:07:02.160 --> 00:07:11.250
We can multiply it by the speed for example in order to make a movement that is the right apparent speed

94
00:07:11.250 --> 00:07:13.910
when you actually play it in ticks.

95
00:07:14.370 --> 00:07:21.400
Okay so now it's time for your challenge for making a moving platform moving our platform.

96
00:07:21.690 --> 00:07:24.180
And this is what you're going to do.

97
00:07:24.210 --> 00:07:29.250
You're going to implement an F vector property much like I have done already if you haven't done so

98
00:07:29.250 --> 00:07:30.140
already.

99
00:07:30.240 --> 00:07:37.230
You are going to calculate the direction vector that I've shown on the previous slide and you are going

100
00:07:37.230 --> 00:07:43.680
to turn that into movement by updating the location vector by the right speed with the right corrections

101
00:07:43.680 --> 00:07:45.300
for Delta time etc..

102
00:07:45.450 --> 00:07:50.760
Then I dont want you to worry about returning just yet that's going to be subject to the next lecture.

103
00:07:50.940 --> 00:07:57.740
And so we just want to be moving from point A to Point B and potentially carry on through point B.

104
00:07:57.780 --> 00:07:58.950
That's a challenge.

105
00:07:58.950 --> 00:08:00.650
Go ahead and give it a shot.

106
00:08:02.460 --> 00:08:03.660
Okay welcome back.

107
00:08:03.660 --> 00:08:07.800
So we are going to dive right in to the challenge.

108
00:08:07.800 --> 00:08:10.160
I'm going to hop into a visual studio.

109
00:08:10.740 --> 00:08:13.290
Go to my moving platform C++.

110
00:08:13.530 --> 00:08:19.200
And here in the tick under the has authority this is where we're going to be doing the calculations.

111
00:08:19.490 --> 00:08:19.800
Okay.

112
00:08:19.830 --> 00:08:26.360
So first things first I want to be calculating that direction vector so f a vector.

113
00:08:27.410 --> 00:08:30.530
Direction equals.

114
00:08:30.530 --> 00:08:34.450
Now it's going to be the target location.

115
00:08:36.940 --> 00:08:39.250
Minus the location.

116
00:08:39.700 --> 00:08:45.310
Reason for that being the target location is be the place where trying to get location is a starting

117
00:08:45.310 --> 00:08:45.910
point.

118
00:08:45.940 --> 00:08:52.060
We move negatively along location positively along the target location to get from A to B then we want

119
00:08:52.060 --> 00:08:53.880
to normalize to normalize.

120
00:08:53.950 --> 00:08:59.740
We can we've got a result back from here which is a vector so we can do that vector dot and then we

121
00:08:59.740 --> 00:09:02.010
can try and normalize that vector.

122
00:09:02.020 --> 00:09:08.230
Now we can just search for normalized there's a few different functions that we could use.

123
00:09:08.230 --> 00:09:15.540
Here you've got safe normal normalize get safe normal get unsafe normal.

124
00:09:16.120 --> 00:09:20.800
If you look at the documentation for each of these and I do recommend that you do you'll find that normalize

125
00:09:21.040 --> 00:09:26.380
will actually modify the vector in place whereas it gets safe normal will create a new vector.

126
00:09:26.380 --> 00:09:33.220
Now I tend to like things that don't modify the vectors in place so we're going to be using the get

127
00:09:33.340 --> 00:09:34.260
safe normal.

128
00:09:34.300 --> 00:09:39.910
Now what's the difference between get safe normal get unsafe normal Well unsafe normal has no protections

129
00:09:40.180 --> 00:09:42.210
for when numbers are really really small.

130
00:09:42.400 --> 00:09:43.210
So get safe.

131
00:09:43.210 --> 00:09:45.100
Normal has that protection again.

132
00:09:45.190 --> 00:09:47.320
If you read the documentation it tells you all of that.

133
00:09:48.630 --> 00:09:50.860
Go ahead and say that hit save now.

134
00:09:51.150 --> 00:09:55.230
One thing to note is that I'm talking about reading the documentation a lot here and that's because

135
00:09:55.230 --> 00:09:59.290
in the challenges I do expect you to go ahead and read the relevant documentation.

136
00:09:59.310 --> 00:10:02.860
If you can't remember how to do the f vector stuff for example.

137
00:10:03.030 --> 00:10:04.820
Now that's generally the case.

138
00:10:04.830 --> 00:10:06.120
I have to do that all the time.

139
00:10:06.120 --> 00:10:09.710
I don't remember every single method call.

140
00:10:09.780 --> 00:10:11.420
It's something that programmers do all the time.

141
00:10:11.450 --> 00:10:13.010
Look in their documentation.

142
00:10:13.320 --> 00:10:16.680
So we've got the direction we've normalized the direction.

143
00:10:17.160 --> 00:10:23.100
Now I want to do is update the location with that direction so that's going to be instead of just building

144
00:10:23.100 --> 00:10:27.100
this affecter with the speed and Delta time in the x direction.

145
00:10:27.130 --> 00:10:33.960
I'm going to multiply the speed by Delta time by the direction itself so let's remove this effect coating

146
00:10:33.980 --> 00:10:41.220
around the speed and Delta time and I'm going to replace that with actual multiplication with the direction

147
00:10:41.220 --> 00:10:42.260
vector.

148
00:10:42.900 --> 00:10:51.270
Because multiplying a float by a vector will increase the magnitude of that direction or multiply the

149
00:10:51.660 --> 00:10:55.010
magnitudes of the vector as in the size of the arrow.

150
00:10:55.020 --> 00:10:59.820
If the size of the arrow is 1 then it's a basically the same as saying we're going to use that direction

151
00:11:00.210 --> 00:11:07.050
and just increase its size to be equal to and the speed multiplied by Delta time.

152
00:11:07.290 --> 00:11:14.790
Okay so we've increased and created the difference in the location we're updating that location.

153
00:11:14.790 --> 00:11:19.800
Now if I go ahead and save and build we're going to notice something rather weird which is that this

154
00:11:19.800 --> 00:11:24.090
platform won't actually be heading towards a target location at all it will be moving in some other

155
00:11:24.370 --> 00:11:25.610
weird direction.

156
00:11:25.620 --> 00:11:32.150
Reason for that is was mentioned earlier in the video is that this target location is in local space

157
00:11:32.640 --> 00:11:34.340
whereas this location is it.

158
00:11:34.350 --> 00:11:39.330
And global space so we're updating a global space with a local space.

159
00:11:39.330 --> 00:11:45.000
It doesn't make very much sense so we're heading off to where it thinks this target location is in global

160
00:11:45.000 --> 00:11:46.870
space which is probably somewhere over here.

161
00:11:48.050 --> 00:11:55.980
So we need to transform this target location to a global location so go and do an F vector.

162
00:11:56.740 --> 00:11:57.770
Global.

163
00:11:58.790 --> 00:12:01.420
Target location.

164
00:12:02.510 --> 00:12:08.630
And use this to store that transformed Tiger location now and to transform it.

165
00:12:08.630 --> 00:12:12.450
We need to get the actors transforms to get transform.

166
00:12:15.240 --> 00:12:20.980
And that is the conversion between local and global space for this particular actor.

167
00:12:21.120 --> 00:12:28.770
And then we can use a method on there called transform funny enough to transform from global to local.

168
00:12:28.770 --> 00:12:32.400
Now my auto complete isn't quite working just yet.

169
00:12:33.570 --> 00:12:36.270
Now go took a little bit of messing around to get a pop up.

170
00:12:36.270 --> 00:12:40.020
Now we can go from get transformed dot.

171
00:12:41.440 --> 00:12:44.290
To look for a method called transport.

172
00:12:44.290 --> 00:12:45.620
Now there's a few of them.

173
00:12:46.640 --> 00:12:47.960
There's inverse transform.

174
00:12:47.990 --> 00:12:53.660
This forward transforms we want the normal transform because a transform goes from local to global.

175
00:12:53.660 --> 00:12:58.310
By default and inverse transform goes from global to local.

176
00:12:58.490 --> 00:13:04.610
So we want the transform and we've got to choose between a transformed position and a transpond vector.

177
00:13:04.610 --> 00:13:05.450
What does that mean.

178
00:13:05.540 --> 00:13:11.610
Well let's go and have a look in the documentation just to be sure what is meant by F Ector.

179
00:13:11.670 --> 00:13:13.130
So it's transform.

180
00:13:14.530 --> 00:13:15.530
Position.

181
00:13:16.750 --> 00:13:18.660
On the f transform.

182
00:13:20.510 --> 00:13:22.190
Property of unreal.

183
00:13:23.450 --> 00:13:25.430
Let's go and find that documentation.

184
00:13:25.460 --> 00:13:26.950
So go f transform.

185
00:13:27.140 --> 00:13:35.610
Let's go and find the relevant transform functions get lots of instances that have transform obviously.

186
00:13:35.660 --> 00:13:41.240
So let's just scroll down and find the key word I think is going to be position isn't it.

187
00:13:43.020 --> 00:13:45.720
So we've got a few dealing with position.

188
00:13:45.750 --> 00:13:48.120
We've got position position no scale.

189
00:13:48.120 --> 00:13:49.940
Let's have a look at position first of all.

190
00:13:50.950 --> 00:13:51.290
Okay.

191
00:13:51.310 --> 00:13:52.870
Not very helpful.

192
00:13:52.870 --> 00:13:54.920
How about transform vector.

193
00:13:54.940 --> 00:14:04.090
Again not massively helpful but if we go and look at the F transform documentation here at the top we're

194
00:14:04.090 --> 00:14:10.030
going to see that it mentions position vectors and direction vectors being different.

195
00:14:10.030 --> 00:14:10.820
What's the difference.

196
00:14:10.990 --> 00:14:15.200
Well with a position vector it will apply scale rotation and translation.

197
00:14:15.370 --> 00:14:21.190
Whereas with the direction back day only does scale and rotation now to understand why that's going

198
00:14:21.200 --> 00:14:22.870
to have a look at a diagram again.

199
00:14:23.080 --> 00:14:30.860
Suppose the A and B of our vectors are positions whereas the B minus a is a direction.

200
00:14:30.880 --> 00:14:37.240
Now what happens is if we move a and b we don't want add direction vector to change it's going to still

201
00:14:37.240 --> 00:14:40.050
be the same space between the two.

202
00:14:40.060 --> 00:14:44.790
If we scale the whole world then yes we want the direction vector to be scaled as well.

203
00:14:44.890 --> 00:14:49.260
But if we just move a and b we don't want add direction vector to be changed.

204
00:14:49.300 --> 00:14:52.360
That's why there are two different types of translation.

205
00:14:52.360 --> 00:14:59.650
So with that said the type of translation we want is for position because we do want translation of

206
00:14:59.740 --> 00:15:00.390
this.

207
00:15:01.160 --> 00:15:02.270
Target location.

208
00:15:02.280 --> 00:15:06.090
So let's do a transform position.

209
00:15:06.410 --> 00:15:10.260
And we're going to take in the target location.

210
00:15:11.190 --> 00:15:14.920
So we can plan and go ahead and hit build for this.

211
00:15:14.940 --> 00:15:20.280
But we mustn't forget that we want to use the top global target location instead of the target location

212
00:15:20.280 --> 00:15:22.060
for ADD direction.

213
00:15:22.110 --> 00:15:30.000
So go ahead hit save we can cancel that bill I believe get cancell build cancel and go ahead and build

214
00:15:30.000 --> 00:15:30.610
again.

215
00:15:32.760 --> 00:15:33.240
Okay.

216
00:15:33.250 --> 00:15:34.040
Can Bill complete.

217
00:15:34.050 --> 00:15:40.380
Let's go back over in to and real hit play and see if our moving platform is moving in the right direction

218
00:15:41.040 --> 00:15:44.310
or it's definitely going upwards and towards our target location.

219
00:15:44.310 --> 00:15:50.970
So I am very happy that we have achieved our challenge and we have created a moving platform which a

220
00:15:51.000 --> 00:15:56.310
designer can use and actually use to create interesting and cool puzzles.

221
00:15:56.310 --> 00:16:01.410
So let's see you in the next video where we will be making it go backwards and forwards between these

222
00:16:01.410 --> 00:16:02.160
points.
