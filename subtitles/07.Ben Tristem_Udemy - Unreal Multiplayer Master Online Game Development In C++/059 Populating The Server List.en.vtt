WEBVTT
1
00:00:04.660 --> 00:00:06.520
Why hello there in this lecture.

2
00:00:06.520 --> 00:00:09.590
We are going to be working on populating our joint menu.

3
00:00:09.610 --> 00:00:16.600
So when I hit join now we are going to see a cervalis that is actually updated based on the games that

4
00:00:16.660 --> 00:00:19.580
are around you can see log messages finding sessions there.

5
00:00:19.590 --> 00:00:25.630
Let me just prove it to you that it is actually updated if I exit the hosting session then I should

6
00:00:25.630 --> 00:00:32.170
go in cancel my menu go and join again or set off a new find session and it will populate the list.

7
00:00:32.170 --> 00:00:38.410
Now with the new list which is empty and that's fantastic we've got joint game which now populates with

8
00:00:38.440 --> 00:00:39.750
an empty list.

9
00:00:39.760 --> 00:00:40.510
Great stuff.

10
00:00:40.510 --> 00:00:43.400
So let's dive in and see how we can achieve this.

11
00:00:44.420 --> 00:00:47.480
So let's break down this task of populating the cervalis.

12
00:00:47.480 --> 00:00:53.840
The first thing to do will be making sure that we can set the Text property on that row item.

13
00:00:53.840 --> 00:00:58.940
The next thing is going to be writing a method that from the game business we can call to add a list

14
00:00:59.000 --> 00:01:04.340
of server strings basically to our list of servers.

15
00:01:04.340 --> 00:01:08.960
Then we're going to make sure that we can clear the previous list so that we aren't adding on top of

16
00:01:08.960 --> 00:01:10.480
that list all the time.

17
00:01:10.670 --> 00:01:17.510
And then we want to be able to actually request a refresh from the game instance so that the UI when

18
00:01:17.510 --> 00:01:22.940
it shows the server list or when we hit a refresh button if we want to implement that feature then we

19
00:01:22.940 --> 00:01:27.320
will need to request that from the game instance so were going to be using our interface that we've

20
00:01:27.320 --> 00:01:28.710
created to do that.

21
00:01:28.880 --> 00:01:30.590
And that's actually going to be a little challenge for you.

22
00:01:30.590 --> 00:01:37.160
So let's start off with Step number one which is exposing this Text property so I'm going to head over

23
00:01:37.160 --> 00:01:44.570
to first of all my server row in the unreal editor just to check what name I have given to my text element

24
00:01:44.570 --> 00:01:51.870
and as you can see here the text element is called server name aptly named I'd say let's go in to the

25
00:01:51.890 --> 00:01:57.200
code find our server road dot H where we are going to be adding this in.

26
00:01:57.290 --> 00:01:58.770
Now what are we adding here.

27
00:01:58.790 --> 00:02:04.150
Let's go in to unreal once more and have a look at the text box and see what it actually is.

28
00:02:04.190 --> 00:02:08.510
If you go and have a look where it says open it says text block dot H.

29
00:02:08.510 --> 00:02:12.650
So that's what we're going to need to include and it's also what we need to use.

30
00:02:12.650 --> 00:02:16.370
It's going to be you text block has Remember all these components begin with you.

31
00:02:16.370 --> 00:02:24.470
So you text block is what we want and it's going to be a pointer and it's going to have the name server

32
00:02:24.470 --> 00:02:25.080
name.

33
00:02:25.820 --> 00:02:30.260
And it is going to be forward declared as a class.

34
00:02:30.260 --> 00:02:33.260
And what I'm going to do is I'm actually going to make this public.

35
00:02:33.260 --> 00:02:36.480
Now typically we would have a set up for this but because.

36
00:02:37.450 --> 00:02:43.030
Basically all I want all the main logic to be in main cbp are not going to bother with having a setter

37
00:02:43.030 --> 00:02:49.500
here it's very tightly coupled classes which is okay when basically the server road does very very little

38
00:02:49.510 --> 00:02:53.440
at this stage if we wanted to do more then yes we will get some setter's in there.

39
00:02:53.620 --> 00:02:55.670
But for right now I think it's okay.

40
00:02:55.960 --> 00:03:03.400
Now we do want this to be bound at runtime so we need to go in to see Maine and see how it's done we've

41
00:03:03.400 --> 00:03:09.650
got a new property metter bind widget let's use that go over to our server road dot H.

42
00:03:10.030 --> 00:03:15.670
Add the property buy a widget in there and let's go ahead and build and check that all works out okay.

43
00:03:15.700 --> 00:03:16.920
So that was successful.

44
00:03:16.930 --> 00:03:23.200
And if we go over to the unreal Ed and just check that it compiles the server row it does which means

45
00:03:23.200 --> 00:03:27.690
that it must have found our server name bind widget property thing.

46
00:03:27.690 --> 00:03:28.590
So that's all good.

47
00:03:28.690 --> 00:03:35.080
Okay now that we have got that in the server row we can just test it out in s.p. where we're currently

48
00:03:35.080 --> 00:03:41.220
adding a child wrote if I sent this text to something else so I'm going to say ro arrow and then it

49
00:03:41.220 --> 00:03:43.310
is going to be the source of.

50
00:03:43.540 --> 00:03:44.890
Name.

51
00:03:45.100 --> 00:03:48.080
And we're going to get this server name which is itself a pointer.

52
00:03:48.090 --> 00:03:50.980
So we're going to reference that pointer too.

53
00:03:51.160 --> 00:03:58.090
And we are going to call set text which if you check the documentation is what we can set.

54
00:03:58.120 --> 00:04:02.680
However there is a problem that we don't have the right include at this stage so I'm going to go and

55
00:04:02.710 --> 00:04:04.130
add a new component here.

56
00:04:04.190 --> 00:04:06.420
Is going to be hash include.

57
00:04:07.500 --> 00:04:08.590
Component.

58
00:04:10.000 --> 00:04:12.990
Or components forward slash text.

59
00:04:13.740 --> 00:04:17.230
BLOCK As was in the editor.

60
00:04:18.050 --> 00:04:25.610
Now hopefully once Intellisense catches up we will be able to have a set text method and we need to

61
00:04:25.610 --> 00:04:28.740
figure out how we actually set said text.

62
00:04:28.850 --> 00:04:33.370
Because at that moment you can see it takes in F text you could see that in the documentation as well.

63
00:04:33.590 --> 00:04:38.780
So if you have a look at the documentation for f text which is linked against the current lecture you

64
00:04:38.780 --> 00:04:48.960
will find that if we head on down this page and find basically look for a to f text section where there

65
00:04:49.100 --> 00:04:55.700
is a section about conversions where you can convert from an F string to an F text and you need to use

66
00:04:56.450 --> 00:04:59.900
f text from a string that's based it ought to use.

67
00:04:59.910 --> 00:05:06.010
So let's go and use f text from string and then we are going to pass it in a string.

68
00:05:06.930 --> 00:05:12.690
So I actually didn't need to necessarily be converted but it can do from a string then text and we can

69
00:05:12.690 --> 00:05:15.560
just put it in a test text.

70
00:05:16.400 --> 00:05:23.090
Like so I can build that and see if we're going to every time we add the row whether we are actually

71
00:05:23.240 --> 00:05:26.720
doing the right thing I will need a SEMICON on the end of this line.

72
00:05:26.720 --> 00:05:32.040
So it is going to fail to build if I haven't caught it fast enough so I'm going to rebuild.

73
00:05:33.060 --> 00:05:34.490
And see what the result is.

74
00:05:35.260 --> 00:05:37.000
Okay that succeeded in building.

75
00:05:37.000 --> 00:05:40.870
Let's test it out if I go over to my main when you hit play.

76
00:05:41.080 --> 00:05:45.850
Go to the join menu hit join a few times you can see the we're getting the test text so our binding

77
00:05:45.850 --> 00:05:47.770
has worked correctly onto the next step.

78
00:05:47.950 --> 00:05:53.160
Setting a server list from the game instance I'm going to head over interviews studio.

79
00:05:53.290 --> 00:05:59.550
And what we're going to do is actually create macie wrap all this stuff for adding in rows.

80
00:05:59.650 --> 00:06:03.010
We're going to ramp that into a separate method to go into the head of file.

81
00:06:03.440 --> 00:06:09.610
It's going to be a public method callable from the game instance and it is going to be returning void

82
00:06:09.610 --> 00:06:15.070
because it doesn't have any return value but we are going to be setting the server list so set server

83
00:06:15.520 --> 00:06:20.530
list and it's going to be taking a list itself so a T array.

84
00:06:21.240 --> 00:06:24.020
Of type f string.

85
00:06:26.290 --> 00:06:30.030
And then we are going to call this server names.

86
00:06:30.250 --> 00:06:30.890
Okay.

87
00:06:31.210 --> 00:06:32.240
Now with that.

88
00:06:32.350 --> 00:06:35.800
Armed with that declaration we can go to the C++ and implement it.

89
00:06:35.800 --> 00:06:37.460
I'm going to implement it.

90
00:06:37.640 --> 00:06:43.100
Just have to host before Join server because it's around that level of detail.

91
00:06:43.120 --> 00:06:44.070
I think so anyway.

92
00:06:44.410 --> 00:06:46.580
And it's to do with joining really.

93
00:06:46.840 --> 00:06:51.470
And I am going to implement the body and I'm going to put a namespace.

94
00:06:52.580 --> 00:06:57.910
Like so now I can take the contents of joined server out.

95
00:06:58.850 --> 00:07:04.470
Or at least the new contents that we have added and put it over into serve a list.

96
00:07:04.730 --> 00:07:10.190
And one thing I want to do actually is let's join server carry on doing what it was doing before.

97
00:07:10.190 --> 00:07:11.890
So I'm going to uncomment.

98
00:07:13.630 --> 00:07:17.420
I think control can control you for those of you on Visual Studio.

99
00:07:17.740 --> 00:07:22.450
So that's going to go ahead with the same thing except we've got this IP address at the moment which

100
00:07:22.480 --> 00:07:24.800
is not something that we can set.

101
00:07:24.820 --> 00:07:32.290
So for now one going to is I'm going to comment that beat out and just pass in an empty string for the

102
00:07:32.290 --> 00:07:32.980
join.

103
00:07:34.120 --> 00:07:38.020
And you'll see why in a minute I want to use that as a trigger just for testing before we get rid of

104
00:07:38.020 --> 00:07:39.390
this altogether.

105
00:07:40.750 --> 00:07:46.300
So getting in a server list and at the moment we're just setting some basic test text.

106
00:07:46.300 --> 00:07:50.680
We can actually use the strings that we're getting passed in by doing a loop so I'm going to do a for

107
00:07:50.680 --> 00:07:51.210
loop.

108
00:07:51.300 --> 00:07:55.340
It's going to be over konst F string references.

109
00:07:56.640 --> 00:07:59.140
And it to avoid the copying basically.

110
00:07:59.160 --> 00:08:03.370
And this is going to be server name in server names.

111
00:08:05.370 --> 00:08:10.110
And then we are going to implement the body in the fall which is basically going to be this whole block

112
00:08:10.590 --> 00:08:14.220
minus the get world get well we can just afford to do just once.

113
00:08:14.720 --> 00:08:17.460
The rest we might want to do repeatedly.

114
00:08:17.480 --> 00:08:22.090
So we're going to have that doing it repeatedly for each row.

115
00:08:22.100 --> 00:08:28.490
Basically now we can replace the test text with actual text which is going to be the server name like

116
00:08:28.490 --> 00:08:29.240
so.

117
00:08:29.660 --> 00:08:29.960
Okay.

118
00:08:29.960 --> 00:08:31.740
So with the server name set.

119
00:08:31.740 --> 00:08:37.010
Let's just make sure all of that builds I want you want to go into the game instance and test this out.

120
00:08:37.010 --> 00:08:41.360
So I'm going to go into my game and sort s.p. I'm going to do it from join because at the moment join

121
00:08:41.360 --> 00:08:46.430
is not doing very much because we're calling it in the wrong way so I'm going to comment out the contents

122
00:08:46.490 --> 00:08:46.700
of.

123
00:08:46.700 --> 00:08:51.970
Join with control cakin or c and at the beginning of said join.

124
00:08:51.980 --> 00:08:52.850
What are we going to do.

125
00:08:52.850 --> 00:08:58.750
Well I am going to not do a menu to down but we do still want to check for nollman SOME going to uncomment

126
00:08:58.760 --> 00:09:02.790
that bit and rather than do a tear down which I'm going to comment out.

127
00:09:03.020 --> 00:09:09.490
I am going to call the menu with a set.

128
00:09:11.380 --> 00:09:13.310
Server list.

129
00:09:13.330 --> 00:09:17.820
There we go setting server list and what's going to be in that server list.

130
00:09:17.830 --> 00:09:24.700
Well I can basically create a list I believe let's try that out see if it can just take standard C plus

131
00:09:24.760 --> 00:09:28.960
plus array syntax if it doesn't we'll have to think a little bit harder.

132
00:09:28.960 --> 00:09:35.850
So I'm going to put a test one as the first element and a test two as the second element.

133
00:09:36.000 --> 00:09:41.800
Let's see if it can convert that into the right type for said server list and go ahead hit build and

134
00:09:41.800 --> 00:09:43.370
see whether we can test this out.

135
00:09:44.580 --> 00:09:45.440
Okay that built.

136
00:09:45.450 --> 00:09:48.750
Now for those of you who are looking at this a little bit confused haven't seen the syntax before the

137
00:09:48.750 --> 00:09:49.560
curly braces.

138
00:09:49.560 --> 00:09:56.670
Here are an initializer list as C plus plus likes to call it and it is a way for initializing certain

139
00:09:56.670 --> 00:10:00.420
types in this case to array except initializer lists.

140
00:10:00.420 --> 00:10:06.480
And the second thing that's going on is these text items are being converted into strings implicitly

141
00:10:06.750 --> 00:10:11.630
because we know that the type required in server list is a T array of strings.

142
00:10:11.670 --> 00:10:16.240
So basically it's just automatically converting from these built in C types.

143
00:10:17.270 --> 00:10:22.810
The strings and the initializer list in to the T array and strings.

144
00:10:22.820 --> 00:10:24.290
That's nice and easy for us.

145
00:10:24.440 --> 00:10:26.710
Let's go over to the engine and see if it's actually worked.

146
00:10:26.720 --> 00:10:30.890
I'm going to go ahead hit play go into join and hit my join.

147
00:10:30.920 --> 00:10:33.060
And they go I've got to test one test too.

148
00:10:33.480 --> 00:10:37.160
But every time I hit join is adding test one test to the list again.

149
00:10:37.160 --> 00:10:41.000
So we need to know how we can clear this list.

150
00:10:41.000 --> 00:10:44.520
It's actually pretty simple so it's going to not take us very long at all.

151
00:10:44.690 --> 00:10:50.090
Let's go in to our main menu cbp where were actually setting up adding children to the survey list.

152
00:10:50.330 --> 00:10:56.390
And what we're going to do right at the beginning is just clear that cervalis before we even get the

153
00:10:56.390 --> 00:10:57.980
world we're going to clear the set list actually.

154
00:10:58.010 --> 00:11:03.920
Maybe we'll wait till we got the world because if we fail to ensure we are not going to be adding anything

155
00:11:03.920 --> 00:11:06.050
new so maybe it's best not to clear it just yet.

156
00:11:06.200 --> 00:11:14.230
But what we are going to do is go to our server list arrow and then we are going to see.

157
00:11:15.070 --> 00:11:17.660
Clear I believe clear children.

158
00:11:17.780 --> 00:11:19.950
And that gets rid of all the children.

159
00:11:20.980 --> 00:11:23.190
Something a bit in ethical executing all the children.

160
00:11:23.200 --> 00:11:25.660
But we have got rid of all the children.

161
00:11:25.660 --> 00:11:31.300
So we're going to clear that list off before we go and add all the new elements that we are creating

162
00:11:31.300 --> 00:11:32.440
with create widgets.

163
00:11:32.440 --> 00:11:33.840
This is a fairly simple way of doing it.

164
00:11:33.840 --> 00:11:38.710
You could try and find a mechanism for pooling and creating these widgets only once and then reusing

165
00:11:38.710 --> 00:11:39.690
them and renaming them.

166
00:11:39.850 --> 00:11:44.730
But for my opinion that's more hassle than it's worth especially when we're only refreshing this server

167
00:11:44.770 --> 00:11:47.400
list very infrequently.

168
00:11:47.470 --> 00:11:53.260
But obviously you can think about methods to do that you could keep a little T array of widgets that

169
00:11:53.260 --> 00:11:58.480
you've already got around and only clear them up when there are too many for example.

170
00:11:58.480 --> 00:12:01.140
But for now I think I'm going to stick with this.

171
00:12:01.270 --> 00:12:06.220
So the build has worked let's go over into one real hit play.

172
00:12:06.220 --> 00:12:08.000
Go to join it join.

173
00:12:08.060 --> 00:12:13.590
And if I hit join multiple times you can see now it's not adding test 1 2 to the list multiple times.

174
00:12:13.690 --> 00:12:14.380
So that's great.

175
00:12:14.380 --> 00:12:20.860
We're able to set from the game instance the list of FS rings basically So that's fantastic.

176
00:12:20.860 --> 00:12:27.070
Now let's have a look at how we can request a refresh from the game instance.

177
00:12:27.100 --> 00:12:31.000
So as I said at the beginning of the video there's going to be a little challenge for you you know to

178
00:12:31.000 --> 00:12:35.110
be requesting a refresh from the game and since the game instances is what deals with the network so

179
00:12:35.110 --> 00:12:39.430
we're not going to change that and make that happen in the menu that would be a bit silly and you might

180
00:12:39.430 --> 00:12:41.380
want to do this sort of stuff in a different way.

181
00:12:41.380 --> 00:12:43.120
It's really up to the game not the menu system.

182
00:12:43.120 --> 00:12:45.340
So let's talk about how we're going to do it.

183
00:12:45.340 --> 00:12:51.880
First of all you're going to need to add to the menu interface a method for requesting the refresh because

184
00:12:51.880 --> 00:12:57.970
it is the UI that tells the basically tells the game when it needs to know the serve list it doesn't

185
00:12:57.970 --> 00:13:01.420
need to know at all times obviously then it triggers a find.

186
00:13:01.420 --> 00:13:06.880
SESSIONS that's what the game incident should do which is obviously an asynchronous operation and once

187
00:13:06.930 --> 00:13:12.580
it trigger the fine sessions then when it returns when find sessions actually gives us the list of servers

188
00:13:12.580 --> 00:13:13.080
back.

189
00:13:13.220 --> 00:13:17.590
That's what I'm going to need to set in the UI so pause the video and have a go at this challenge.

190
00:13:18.770 --> 00:13:19.820
Okay welcome back.

191
00:13:19.820 --> 00:13:23.800
Let's dive right into this so I'm going to open up the menu interface.

192
00:13:23.820 --> 00:13:25.140
Dot H.

193
00:13:25.400 --> 00:13:27.360
And have a look at our on a menu interface.

194
00:13:27.590 --> 00:13:33.180
And the most we've got a host join load menu and I'm going to add in a virtual.

195
00:13:34.120 --> 00:13:35.010
Again void.

196
00:13:35.200 --> 00:13:41.170
We're not reading any return types because this is a synchronous return basically and it is going to

197
00:13:41.170 --> 00:13:44.280
be refreshing the server list.

198
00:13:46.340 --> 00:13:50.570
And it is going to be abstracts we're going to set it equal to zero.

199
00:13:50.920 --> 00:13:51.220
OK.

200
00:13:51.260 --> 00:13:52.580
So that's great.

201
00:13:52.580 --> 00:13:58.530
Now we should get an error over in our game instance Scott H.

202
00:13:58.640 --> 00:14:03.500
But I'm not going to wait for her and I'm going to go and proactively implement this and it is going

203
00:14:03.500 --> 00:14:06.470
to be where I am going to implement it is going to be public.

204
00:14:06.560 --> 00:14:09.280
I guess it can be public if we want it to be public.

205
00:14:09.380 --> 00:14:11.060
I'm going to put it under load.

206
00:14:11.120 --> 00:14:15.720
Where am I going to put it under under the virtual load main menu.

207
00:14:15.860 --> 00:14:22.820
I'm going to put it with an override to make sure that we are indeed overriding the method that we want

208
00:14:22.820 --> 00:14:24.170
to be overriding.

209
00:14:24.470 --> 00:14:29.570
Then I'm going to take that declaration and implement it over in the C++.

210
00:14:29.570 --> 00:14:34.430
So I am going to implement it just above where we do our on fine sessions complete because it's the

211
00:14:34.430 --> 00:14:41.350
call back for this refresh server list going to implement its body and add in a namespace.

212
00:14:42.790 --> 00:14:49.900
There we go name spaced away and I want to find out find sessions where it is where is it happening

213
00:14:49.900 --> 00:14:50.730
at the moment.

214
00:14:52.780 --> 00:14:57.210
Find Sessions is actually happening currently in our in it.

215
00:14:58.540 --> 00:15:01.460
And I want to take that and move it over.

216
00:15:02.340 --> 00:15:04.970
Got our session search is being created here.

217
00:15:04.970 --> 00:15:09.300
We don't know want the session search would be created here once it's been created where we're actually

218
00:15:09.570 --> 00:15:11.400
going to use it in the refresh.

219
00:15:11.400 --> 00:15:14.680
So I'm going to take that out of that in it.

220
00:15:15.720 --> 00:15:16.830
The whole block.

221
00:15:17.670 --> 00:15:21.280
And we're going to take it to our refresh server list.

222
00:15:22.070 --> 00:15:23.320
And implement it there instead.

223
00:15:23.320 --> 00:15:29.810
So what we're doing is creating a session search checking it's valid with then going on to.

224
00:15:30.440 --> 00:15:30.880
Log.

225
00:15:30.910 --> 00:15:37.140
That we're starting to find a session and then we are initiating the session search.

226
00:15:37.280 --> 00:15:38.270
Okay.

227
00:15:38.270 --> 00:15:45.110
Now in this on session complete That's where we want to be rather than just logging out these server

228
00:15:45.110 --> 00:15:47.390
names that we found we can be log in to that as well.

229
00:15:47.390 --> 00:15:53.180
At the end of this we want to have a t array that we can use to set it on the menu.

230
00:15:53.180 --> 00:15:59.510
So I'm going to make sure that we've got the menu here that is indeed valid and not no.

231
00:15:59.510 --> 00:16:05.260
So again to say the session search is valid and so and and the menu.

232
00:16:06.180 --> 00:16:13.020
Is not equal to null pointer that makes sure that we have a menu that we can use here.

233
00:16:13.080 --> 00:16:18.270
Now I'm going to be building up a T array as we go along so I'm going to create first of all a T array

234
00:16:19.050 --> 00:16:20.930
of type f string.

235
00:16:21.960 --> 00:16:24.730
Or list of type strings.

236
00:16:25.530 --> 00:16:29.230
Without the S's though and this is going to be our server.

237
00:16:30.100 --> 00:16:30.930
Names.

238
00:16:32.190 --> 00:16:35.980
And we are going to be adding to the end of this list.

239
00:16:36.030 --> 00:16:39.740
We've got our sessions search I.D. string which is what we're going to be adding to the end.

240
00:16:39.810 --> 00:16:43.740
So it's going to use server names dot add.

241
00:16:44.650 --> 00:16:45.510
I can type.

242
00:16:46.600 --> 00:16:49.300
Then it's going to be our search result.

243
00:16:49.300 --> 00:16:53.860
Get this I.D. string session I.D. string.

244
00:16:54.880 --> 00:16:55.990
That should work okay.

245
00:16:55.990 --> 00:17:00.620
And then at the end of our full loop we can call menu arrow.

246
00:17:02.560 --> 00:17:03.510
Set.

247
00:17:03.810 --> 00:17:07.950
Serve a list with the T rate that we've just built up.

248
00:17:11.540 --> 00:17:12.480
Like so.

249
00:17:13.190 --> 00:17:16.220
Okay so let's see if that's going to do the trick.

250
00:17:16.220 --> 00:17:18.100
I'm going to go ahead and build.

251
00:17:18.320 --> 00:17:22.890
And then we can jump in and see whether we're able to find those sessions.

252
00:17:23.700 --> 00:17:28.950
So that was a successful build we're going to have to head over into our project folder here to launch

253
00:17:28.950 --> 00:17:30.890
up an instance to test against.

254
00:17:30.990 --> 00:17:32.520
We're going to launch the game.

255
00:17:32.520 --> 00:17:36.630
And in fact I'm going to launch two versions of the game so that we can see more than one thing in the

256
00:17:36.630 --> 00:17:42.470
cervalis and check that we're indeed getting lists of things working not just single items.

257
00:17:42.480 --> 00:17:44.390
That's quite an important test to do.

258
00:17:44.670 --> 00:17:50.390
And we're going to go over in to unreal Ed and I'm going to hit play and first of all just check that

259
00:17:50.430 --> 00:17:52.180
when we hit join.

260
00:17:53.180 --> 00:17:53.650
Haha.

261
00:17:53.690 --> 00:17:56.930
When I actually calling refractions So that's a bit of a flaw isn't it.

262
00:17:56.930 --> 00:18:01.970
I'm going to have to go and update our main menu key.

263
00:18:03.280 --> 00:18:06.570
When I go back over in to visual studio that is.

264
00:18:07.660 --> 00:18:11.500
We're going to update it by going to war.

265
00:18:11.550 --> 00:18:14.390
Where are we getting in to us main menu.

266
00:18:16.120 --> 00:18:21.460
We're doing it in open join menu we're setting the active widget to join menu that would be the perfect

267
00:18:21.460 --> 00:18:24.280
time to get the refresh.

268
00:18:24.310 --> 00:18:29.860
Basically what do we do that with a menu interface so Id say if we have a menu interface.

269
00:18:31.450 --> 00:18:34.800
Then if it's not a null pointer that is.

270
00:18:36.750 --> 00:18:44.400
Then we can use it which means that we are going to call the menu interface refresh method.

271
00:18:45.070 --> 00:18:50.440
To get us a refreshed server list say I'm going to call refresh server list than take any arguments

272
00:18:51.240 --> 00:18:53.070
it's save build that.

273
00:18:54.130 --> 00:18:59.320
In the meantime well that's building I'm going to go over to to games shouldn't matter because the hosting

274
00:18:59.320 --> 00:19:04.390
code hasn't changed so it doesn't matter that I opened them before the build going to hit host on both

275
00:19:04.390 --> 00:19:13.090
of them go into both of those games host and go and check in on visual studio because I start to hear

276
00:19:13.090 --> 00:19:15.150
the fans on my machine whirring up.

277
00:19:16.050 --> 00:19:22.140
They go from the intensity of compiling and running to these game three of these game instances at the

278
00:19:22.140 --> 00:19:26.810
same time that's going to hit play again in the end of load and new join code.

279
00:19:26.820 --> 00:19:30.830
If I go to the join menu and check by output log that stuff is going on.

280
00:19:30.840 --> 00:19:37.650
I started finding Sasha turns and boom it is finished finding sessions and populated our server list

281
00:19:37.740 --> 00:19:41.280
with these two servers if I go cancel and join again.

282
00:19:41.280 --> 00:19:45.870
You see they're still in the server list but it starts finding sessions again and it's going to refresh

283
00:19:46.140 --> 00:19:50.790
that server list but it has cleared it before refreshing it so everything is hunky dory.

284
00:19:50.850 --> 00:19:57.840
I can check that if I exit one of the games then I would expect that cervalis to refresh when I do cancel

285
00:19:58.110 --> 00:19:59.060
and join again.

286
00:19:59.070 --> 00:20:01.580
Let's just do that to cancel and join.

287
00:20:01.680 --> 00:20:02.840
Wait for it to refresh.

288
00:20:02.840 --> 00:20:07.150
Will need some affordance on the refreshing and boom it has updated the cervalis.

289
00:20:07.160 --> 00:20:08.400
That's fantastic.

290
00:20:08.400 --> 00:20:14.970
Great job guys on getting through all of that a bit long but we got there in the end so I'll see in

291
00:20:14.970 --> 00:20:15.820
the next lecture.
