1
00:00:04,900 --> 00:00:06,150
Welcome in this lecture.

2
00:00:06,160 --> 00:00:13,260
We are going to be importing puzzle platforms as a starting point for getting online with our multiplayer

3
00:00:13,270 --> 00:00:17,260
so we're going to be doing this via the online subsystems which we've already talked about a little

4
00:00:17,260 --> 00:00:18,190
bit in this.

5
00:00:18,190 --> 00:00:22,990
Next we're going to be talking more about the capabilities of the online system subsystem and how we

6
00:00:22,990 --> 00:00:27,050
can include it as part of our project and how we can get hold of a pointer to it.

7
00:00:27,130 --> 00:00:31,360
That's what it is it has a pointer to the subsystem So we're going to find out how to get that pointer

8
00:00:31,750 --> 00:00:32,680
in this lecture.

9
00:00:32,770 --> 00:00:34,530
Let's dive in and see how it's done.

10
00:00:36,590 --> 00:00:43,340
So before we dive into the online subsystem and its intricacies we want to have something to convert

11
00:00:43,640 --> 00:00:48,550
over to a web functioning at a working over Internet multiplayer.

12
00:00:48,710 --> 00:00:49,390
That's what I mean.

13
00:00:49,580 --> 00:00:53,780
And the way we're going to be doing that is just taking our puzzle platform product which is already

14
00:00:53,780 --> 00:00:58,370
pretty fully formed and figuring out how we can get that connection to work over the Internet without

15
00:00:58,370 --> 00:01:02,750
having to use a VPN and how we can integrate that with the work of the menu system from last letter

16
00:01:03,020 --> 00:01:08,990
to actually pull together a cohesive bit of lobbying you why that allows us to connect over Steve.

17
00:01:09,230 --> 00:01:14,020
Now the first thing we're going to do for the answer is go ahead and import our puzzle platforms project.

18
00:01:14,030 --> 00:01:18,070
Now you can carry on with the repository that you are currently using.

19
00:01:18,080 --> 00:01:20,550
If you were using just one repository that's fine.

20
00:01:20,550 --> 00:01:24,620
I'm going to split these all up into separate repositories just to make it really easy for people picking

21
00:01:24,620 --> 00:01:27,860
it up without having gone through that whole thing.

22
00:01:27,860 --> 00:01:31,880
So I'm going to go to clone and download on my menu system project on get.

23
00:01:31,950 --> 00:01:35,840
The link is in your resources and I'm going to go ahead and download the zip.

24
00:01:35,960 --> 00:01:42,350
And actually I've done this already so here's one I prepared earlier in my downloads folder here I have

25
00:01:42,350 --> 00:01:49,730
the menu system zip massed and I'm going to go ahead and grab that the puzzle platforms directory from

26
00:01:49,760 --> 00:01:50,370
that.

27
00:01:51,140 --> 00:01:59,090
Folder and Im going to put it in to the pre prepared folder in my current stream multiplayer repository

28
00:01:59,540 --> 00:02:03,190
which is called Unreal project so let's open up that and real product folder.

29
00:02:03,290 --> 00:02:06,440
It has a gift ignore in here already which is the standard.

30
00:02:06,440 --> 00:02:11,720
Unreal guitar ignore and Im going to go ahead and paste the patch folder in and then what we can do

31
00:02:11,780 --> 00:02:17,840
is get it doing its thing of building and generate and portable studio project files so lets go and

32
00:02:17,840 --> 00:02:23,850
right click on the you project and generate the visual studio or X code project file from here.

33
00:02:23,870 --> 00:02:25,990
That didn't quite work let's click on it again.

34
00:02:26,060 --> 00:02:28,420
I believe I'm in the wrong.

35
00:02:28,420 --> 00:02:29,810
No I'm not in the wrong repository.

36
00:02:29,810 --> 00:02:31,470
Let's try this one more time.

37
00:02:31,480 --> 00:02:33,130
I click on the project.

38
00:02:33,230 --> 00:02:33,950
There we go.

39
00:02:34,100 --> 00:02:36,840
Generate visual studio project files.

40
00:02:36,950 --> 00:02:38,450
That's the first thing we're going to do.

41
00:02:38,600 --> 00:02:42,690
And once we've generated a bit of stick pretty far we can open it up so it starts indexing the problem.

42
00:02:42,890 --> 00:02:49,970
The whole project and it will be ready for hours to have all the auto complete in there so I'm going

43
00:02:49,970 --> 00:02:56,930
to open up the solution and simultaneously I am going to go back to the folder structure and open up

44
00:02:56,960 --> 00:03:02,870
the new project which is going to trigger a compile which will also allow So we're just getting all

45
00:03:02,870 --> 00:03:06,440
of that compilation process started while I tell you about the next bit.

46
00:03:06,440 --> 00:03:10,030
Feel free to be doing the same thing waiting for it to compile and so on.

47
00:03:10,130 --> 00:03:12,960
While I am going to be telling you about the online subsystems.

48
00:03:12,970 --> 00:03:14,770
Okay so everything is compiling right now.

49
00:03:14,930 --> 00:03:19,280
Let's talk a little bit about online subsystems and what they are and what their capabilities are.

50
00:03:19,280 --> 00:03:24,440
Previously we talked about the online subsystem we talked about it as a wrapper around the steam works

51
00:03:24,500 --> 00:03:30,900
API and in fact it's a wrapper around many other API such as the X Box API and the Playstation API the.

52
00:03:30,920 --> 00:03:33,430
IOW Android and Facebook.

53
00:03:33,470 --> 00:03:40,250
All these things have online systems and the online subsystem basically provides a neutral wrapper around

54
00:03:40,250 --> 00:03:40,850
that.

55
00:03:40,850 --> 00:03:45,320
But you might be saying all these services are so varied they have a little bit of overlap in certain

56
00:03:45,320 --> 00:03:51,080
places but they're very very varied and the online subsystem takes this into account it knows that they're

57
00:03:51,080 --> 00:03:53,060
not all exactly the same.

58
00:03:53,060 --> 00:03:58,970
And if you have a look at the online subsystem overview documentation here then you will see that there

59
00:03:58,970 --> 00:04:00,560
is an interfaces section.

60
00:04:00,560 --> 00:04:04,760
That's because the online subsystem is not just a one monolithic blob.

61
00:04:04,760 --> 00:04:08,290
It is composed of many interfaces all of which are optional.

62
00:04:08,320 --> 00:04:14,060
So not all services will implement every single interface our can have unreal jump over the top of this

63
00:04:14,060 --> 00:04:14,970
window in a second.

64
00:04:14,990 --> 00:04:16,530
Please excuse that.

65
00:04:16,820 --> 00:04:23,060
So we've got the interfaces and they are things like a profile so as a user you may have a profile on

66
00:04:23,060 --> 00:04:24,080
these online services.

67
00:04:24,230 --> 00:04:27,680
You can access that through the online subsystem.

68
00:04:27,740 --> 00:04:32,390
You've got friends so you can figure out whether your friends are playing the game and what your friends

69
00:04:32,390 --> 00:04:34,520
are doing invite them and so on so forth.

70
00:04:34,820 --> 00:04:39,950
SESSIONS That is the bit about connecting multiplayer games creating Sessions joining sessions finding

71
00:04:39,950 --> 00:04:44,640
sessions and matchmaking and all that sort of stuff is included in the sessions interface.

72
00:04:44,740 --> 00:04:49,400
Then there's some stuff called Shared cloud and user cloud not something I'm particularly particularly

73
00:04:49,400 --> 00:04:53,510
know about so we'll be not worrying too much about that's not very important.

74
00:04:53,510 --> 00:04:58,400
And then there's the leaderboards voice achievements fairly self-explanatory what those are about voice

75
00:04:58,400 --> 00:05:04,750
is for having connecting with VoIP kind of essentially in your game as we saw in the steelworks example.

76
00:05:05,030 --> 00:05:11,540
And there's external you why which is useful for things like x box and P.S. PlayStation and things like

77
00:05:11,540 --> 00:05:15,110
that but not so much for the steam side of things.

78
00:05:15,110 --> 00:05:16,070
So this is great.

79
00:05:16,070 --> 00:05:21,200
This allows us to break down some of the things that are possible in the online subsystem into different

80
00:05:21,200 --> 00:05:21,800
interfaces.

81
00:05:21,800 --> 00:05:28,090
We've seen interfaces with our menu system we've had a menu interface there and we are seeing interfaces

82
00:05:28,160 --> 00:05:30,740
again here in the online subsystem.

83
00:05:30,770 --> 00:05:36,260
So let's go ahead and see if we can include the online subsystem module in our project because it is

84
00:05:36,260 --> 00:05:43,370
a separate module very much like our UMG module so let's go ahead in to our visual studio project and

85
00:05:43,370 --> 00:05:53,270
we're going to navigate to games puzzle platform we are going to find the source puzzle platform and

86
00:05:53,270 --> 00:06:01,820
then puzzle platform build dot C S and in the build up cebes we are going to have this UMG module after

87
00:06:01,820 --> 00:06:06,350
the UMG module we want to add a new one which is going to be the online subsystem module.

88
00:06:06,470 --> 00:06:13,730
So it's online with a capital O and subsystem with one capital S not two not subsystem it's just subsystem

89
00:06:14,120 --> 00:06:17,160
and we are going to put quotes around the whole thing.

90
00:06:17,180 --> 00:06:22,300
We are going to go ahead and say that and we are going to go ahead and build that as well.

91
00:06:22,610 --> 00:06:28,610
So what this is doing is as we already know its including a new module into our project the online subsystem

92
00:06:29,120 --> 00:06:34,650
and that will allow us to get access to new head of files and new auto completes around that whole online

93
00:06:34,700 --> 00:06:35,210
subsystem.

94
00:06:35,210 --> 00:06:41,540
So while we're waiting for that to compile Let's go ahead back over to the documentation that I had

95
00:06:41,540 --> 00:06:48,440
open and in particular I'm interested in the documentation for the online subsystem the online subsystem

96
00:06:48,500 --> 00:06:49,030
interface.

97
00:06:49,030 --> 00:06:50,260
That's what this is about.

98
00:06:50,870 --> 00:06:54,650
One thing we're going to want to know straight off the bat is what its head file is so if we go head

99
00:06:54,680 --> 00:06:56,010
to the bottom we might find out.

100
00:06:56,100 --> 00:07:01,550
And it's not particularly helpful as it was just saying online module online subsystem.

101
00:07:01,550 --> 00:07:06,230
So we may have to have a little intuitive guess of what its head afar's going to be.

102
00:07:06,380 --> 00:07:07,720
We'll do that in a minute.

103
00:07:07,880 --> 00:07:14,360
And then there's lots of other things here which include having interfaces to get the friend interface

104
00:07:14,360 --> 00:07:20,270
get the external interface so that you can see are ways of getting hold of each of the individual individual

105
00:07:20,330 --> 00:07:24,930
interface components such as the special interface the identity interface and so on.

106
00:07:24,950 --> 00:07:29,890
So that is how it's implemented having multiple interfaces as part of this larger interface.

107
00:07:29,960 --> 00:07:35,450
BI get us now if you want to get hold of the actual online subsystem it's an interface not an object

108
00:07:35,450 --> 00:07:39,250
so you want to get a pointer to something with this interface type.

109
00:07:39,350 --> 00:07:43,260
We can actually use a special method they've got here which is called get.

110
00:07:43,580 --> 00:07:48,140
And so if you do online subsystem get it a static method meaning that it doesn't have to be called on

111
00:07:48,140 --> 00:07:54,170
a particular object just on the class on the class namespace it will get as a pointer to the online

112
00:07:54,170 --> 00:07:55,890
subsystem of our choice.

113
00:07:55,910 --> 00:07:58,300
We don't have to worry about constructing it or anything like that.

114
00:07:58,310 --> 00:08:00,170
We can just get it a single turn.

115
00:08:00,200 --> 00:08:05,990
For those of you who know about singletons it's a singleton so we're going to be using that in just

116
00:08:06,080 --> 00:08:07,260
a minute.

117
00:08:07,460 --> 00:08:07,650
OK.

118
00:08:07,670 --> 00:08:13,250
So first things first let's go back to Visual Studio which has just built successfully.

119
00:08:13,250 --> 00:08:15,290
We're going to actually go and regenerate the project.

120
00:08:15,290 --> 00:08:21,620
Far So if I go back to puzzle platforms in my Explorer and get a right click on the you project generate

121
00:08:21,650 --> 00:08:28,220
the visual studio project files so that we can get the auto complete that we need to get hold of the

122
00:08:28,550 --> 00:08:30,320
various head of files that we want.

123
00:08:30,320 --> 00:08:34,120
Let's go back into the visual studio solution and a reload.

124
00:08:35,350 --> 00:08:38,900
Which will reload all of the various project files.

125
00:08:40,040 --> 00:08:45,050
So with that reloaded of what we can go ahead and do is we going to want to get hold of this session

126
00:08:45,050 --> 00:08:45,410
interface.

127
00:08:45,410 --> 00:08:52,490
I think a good place to do that rather the online subsystem interface would be to do it in the game

128
00:08:52,640 --> 00:08:59,540
instance class so I'm going to go to the game instance s.p. file and in there I'm going to go in to

129
00:08:59,540 --> 00:09:04,970
the init method gets called fairly late in the construction of the game instance I'm fairly sure that

130
00:09:04,970 --> 00:09:12,800
at that point we will have a online subsystem to get hold of and we want to use that method so let's

131
00:09:12,800 --> 00:09:18,920
go back in to our class and see that we're going to need to get hold of this online subsystem first

132
00:09:18,920 --> 00:09:20,280
of all we're going to need a header.

133
00:09:20,300 --> 00:09:22,830
So let's think about what that header is going to be.

134
00:09:24,040 --> 00:09:28,340
So I'm going to just include an.

135
00:09:28,370 --> 00:09:30,390
I'm going to do as above our local includes.

136
00:09:30,400 --> 00:09:36,300
I'm going to do it in the section where I am including engine related things and I am going to include.

137
00:09:37,480 --> 00:09:42,140
And I believe all will need to be called is the online subsystem.

138
00:09:43,820 --> 00:09:44,910
Get online subsystem.

139
00:09:44,920 --> 00:09:45,690
Dot H.

140
00:09:45,710 --> 00:09:47,500
That is the one that we're looking for.

141
00:09:47,720 --> 00:09:50,300
I'm going to go ahead and save that and just compile.

142
00:09:50,300 --> 00:09:53,130
Make sure that everything's going to work out for us like that.

143
00:09:54,130 --> 00:09:56,000
And actually it hasn't worked at all.

144
00:09:55,990 --> 00:09:57,280
So what's going on here.

145
00:09:57,310 --> 00:09:58,180
Why have we gone error.

146
00:09:58,180 --> 00:10:03,730
It's been a completely random place here in this load menu functions complaining about if I go and have

147
00:10:03,730 --> 00:10:05,490
a look at the output.

148
00:10:05,500 --> 00:10:12,400
The error message the top error message is saying that it cannot find that load menu double W is not

149
00:10:12,400 --> 00:10:19,390
a member of a puzzle platform game instance load many W I haven't written a load menu w what is going

150
00:10:19,390 --> 00:10:22,570
on here this is super strange now actually whats going on here.

151
00:10:22,570 --> 00:10:26,980
If I hover over my load menu you will see that it is got a hash.

152
00:10:26,980 --> 00:10:32,230
Define for load menu to load menu w what's going on here.

153
00:10:32,260 --> 00:10:41,050
Right click that and go to the definition and you'll see that I end up in a win that use dot H head

154
00:10:41,050 --> 00:10:46,000
a file so it's something in the windows API is on Mac you may be fortunate enough not to get this error

155
00:10:46,360 --> 00:10:54,910
but the win user API is has a define which renames any instance of a load menu to load menu W and it's

156
00:10:54,910 --> 00:11:01,370
clear that this one user dot age has been included as part of our online subsystem.

157
00:11:01,360 --> 00:11:02,230
Dot H.

158
00:11:02,230 --> 00:11:08,680
Which is fine but I didn't expect it to go and rename things like load menu but we can fix this by changing

159
00:11:08,710 --> 00:11:13,690
our load menu name to something else so let's go over to our head of file and think about what a better

160
00:11:13,690 --> 00:11:16,420
name for load menu might be.

161
00:11:16,420 --> 00:11:23,110
In this case I think we can call it a load menu widget So let's just add it to the end and that should

162
00:11:23,110 --> 00:11:26,730
hopefully make the Windows API header file a little bit happier.

163
00:11:26,740 --> 00:11:31,450
Obviously if this isn't happening for you on Mac or on different versions of Windows then don't worry

164
00:11:31,450 --> 00:11:32,260
about the rename.

165
00:11:32,260 --> 00:11:37,470
That's just something that we have to do to work around whatever this header file is trying to do.

166
00:11:39,140 --> 00:11:44,120
Okay this time we had a successful build So the next step is going to be getting hold of the pointer

167
00:11:44,390 --> 00:11:46,460
to the subsystem interface.

168
00:11:46,460 --> 00:11:52,040
Now this is actually going to be a challenge that I leave up to you to get the OSX pointer you're going

169
00:11:52,040 --> 00:11:55,370
to do this through that gets static that I showed you in the documentation.

170
00:11:55,370 --> 00:11:58,850
Go and read up on the documentation and see if you can figure out how to use it.

171
00:11:58,870 --> 00:12:00,200
Id like is check for NULL.

172
00:12:00,230 --> 00:12:05,940
In that point up because it can come back and forth for example if there isn't a configured subsystem.

173
00:12:06,660 --> 00:12:11,190
And I'd like you to print the result and tell me do you get now or do you not get null and if you dont

174
00:12:11,190 --> 00:12:12,390
get an old what do you get.

175
00:12:12,390 --> 00:12:14,510
So pause a video and have a go at this.

176
00:12:16,350 --> 00:12:17,630
Okay welcome back.

177
00:12:17,670 --> 00:12:19,000
So let's get stuck.

178
00:12:19,110 --> 00:12:24,990
I've got the game instance cvp that I'm going to go ahead and open and at the top of it I am going to

179
00:12:24,990 --> 00:12:30,090
be reusing this message because that's quite a handy one for printing out and I am going to go ahead

180
00:12:30,120 --> 00:12:35,230
and get the interface from the online subsystem.

181
00:12:37,000 --> 00:12:37,880
Colon colon.

182
00:12:37,900 --> 00:12:40,280
Because it's name spaced it's static dot.

183
00:12:40,330 --> 00:12:47,190
And so rather than doing a dot we do a colon colon get it's going to go ahead and return as an R..

184
00:12:47,330 --> 00:12:54,140
I online subsystem pointer so let's go ahead and create a variable to store that in two of Type II on

185
00:12:54,150 --> 00:12:56,570
line subsystem.

186
00:12:56,740 --> 00:12:57,820
So much typing.

187
00:12:58,000 --> 00:12:58,320
Okay.

188
00:12:58,330 --> 00:13:04,240
And this is going to be a pointer and I'm going to call the variable a subsystem like so.

189
00:13:04,270 --> 00:13:09,160
Now I'm going to check for Noel because remember we have to be paranoid about null pointers at all times

190
00:13:09,160 --> 00:13:11,770
in C++ otherwise you might end up with crashing engines.

191
00:13:11,980 --> 00:13:19,030
So we're going to do an if subsystem not equals and null pointer and then in this case I am going to

192
00:13:19,060 --> 00:13:25,930
log out a message which I'm going to for which I am going to use a copy of this log message down here

193
00:13:26,020 --> 00:13:28,850
in as part of the unit and I'm going to say that I.

194
00:13:28,870 --> 00:13:35,410
We found that class we found they in fact we're going to say we found the subsystem and the subsystem

195
00:13:35,410 --> 00:13:39,800
that we found Let's go ahead and use the subsystem and dereference its pointers.

196
00:13:39,880 --> 00:13:43,540
You can have a look at the documentation for what's included in the subsystem.

197
00:13:43,540 --> 00:13:50,620
If your auto complete doesn't show you here but I am going to be getting the names so get named interface

198
00:13:51,580 --> 00:13:52,390
like so.

199
00:13:53,160 --> 00:13:54,430
Well see if that works out.

200
00:13:55,670 --> 00:14:02,390
And then I am going to have an ELT's just in case to make sure that it is indeed running and in the

201
00:14:02,390 --> 00:14:08,320
else statement I'm just going to say we got a null subsystem so found that no subsystem.

202
00:14:09,700 --> 00:14:14,260
And it doesn't need any arguments to reference because otherwise that would be problematic would be

203
00:14:14,260 --> 00:14:19,060
dereferencing a pointer and everything would come crashing down around our ears which is never a good

204
00:14:19,060 --> 00:14:23,490
thing so we can get rid of this log message about found class now.

205
00:14:23,590 --> 00:14:24,860
We don't need that one.

206
00:14:25,970 --> 00:14:32,950
A log message is currently giving me some problems out because from the get named interface.

207
00:14:34,330 --> 00:14:35,710
Facts it'll get named in face.

208
00:14:35,720 --> 00:14:36,170
We want.

209
00:14:36,170 --> 00:14:37,700
It is get.

210
00:14:39,370 --> 00:14:43,470
See instance name or subsystem name I think is the one I want.

211
00:14:43,930 --> 00:14:47,230
But anyway that's subsystem name returns an F name.

212
00:14:47,260 --> 00:14:53,070
So if we do a dot two string then that should pacify our log message.

213
00:14:53,080 --> 00:14:58,980
It's now being able to print a string or turning that into a teacher or whatever it's doing with our

214
00:14:59,320 --> 00:15:03,370
star getting the internal representation of the F string.

215
00:15:03,370 --> 00:15:07,180
And we are now printing out the long message as required.

216
00:15:07,180 --> 00:15:07,540
Great.

217
00:15:07,540 --> 00:15:10,810
So let's go ahead and build that and see what we get.

218
00:15:13,100 --> 00:15:14,900
So that compile is now complete.

219
00:15:14,900 --> 00:15:17,270
Let's go over in to.

220
00:15:17,450 --> 00:15:18,760
Unreal Engine.

221
00:15:19,950 --> 00:15:22,190
And hit play and see what happens.

222
00:15:23,110 --> 00:15:28,040
If at this point you get an error talking about unresolved compile errors in the blueprint when you're

223
00:15:28,040 --> 00:15:29,200
trying to play.

224
00:15:29,330 --> 00:15:33,710
Then you may need to go in to the blueprint and question and reattach a couple of nodes.

225
00:15:33,710 --> 00:15:36,310
For me this error comes up in the next video.

226
00:15:36,320 --> 00:15:37,240
Not in this one.

227
00:15:37,310 --> 00:15:42,410
At about four minutes and 54 seconds so if you do want to see my solution it's very straightforward

228
00:15:42,440 --> 00:15:45,590
but you can probably work it out for yourself.

229
00:15:45,590 --> 00:15:46,140
There we go.

230
00:15:46,160 --> 00:15:48,380
It's actually saying that it found no subsystem.

231
00:15:48,380 --> 00:15:49,820
So that's interesting.

232
00:15:49,820 --> 00:15:52,850
So there is no subsystem when we haven't configured one in the next.

233
00:15:52,850 --> 00:15:55,480
We're going to be looking at how we can configure a subsystem.

234
00:15:55,550 --> 00:16:01,010
In particular we're going to be configuring the noell subsystem the subsystem that does nothing.

235
00:16:01,080 --> 00:16:02,020
Why does she do nothing.

236
00:16:02,020 --> 00:16:06,260
It does some useful stuff but it doesn't actually talk to any back end such as steam.

237
00:16:06,260 --> 00:16:11,690
So were going to be figuring out how we can use that to how we can use in testing as all can be very

238
00:16:11,690 --> 00:16:15,310
exciting so I will see you in the next actual talk about the null subsystem.
