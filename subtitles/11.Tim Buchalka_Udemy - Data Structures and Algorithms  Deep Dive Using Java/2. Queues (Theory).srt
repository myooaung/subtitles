1
1

00:00:05,260  -->  00:00:07,340
<v ->Alright, so let's take a look at queues,</v>
2

2

00:00:07,340  -->  00:00:11,340
like I said in the intro queues are an abstract data type.
3

3

00:00:11,340  -->  00:00:15,540
Just like stacks they dictate how we can access the data,
4

4

00:00:15,540  -->  00:00:18,410
and just like stacks we use other
5

5

00:00:18,410  -->  00:00:20,440
data structures to implement them.
6

6

00:00:20,440  -->  00:00:25,440
Now unlike stacks queues enforce a FIFO behaviour.
7

7

00:00:25,510  -->  00:00:30,445
FIFO is first in, first out, remember that stacks were LIFO.
8

8

00:00:30,445  -->  00:00:32,880
Last in, first out.
9

9

00:00:32,880  -->  00:00:36,660
So queues are called queues because they're like line-ups,
10

10

00:00:36,660  -->  00:00:40,540
and line-ups are called queues in some parts of the world.
11

11

00:00:40,540  -->  00:00:44,240
So if you're at a store, and you get in a line the people
12

12

00:00:44,240  -->  00:00:46,750
in front of you will be served before you are.
13

13

00:00:46,750  -->  00:00:50,330
So you'll join the queue at the end,
14

14

00:00:50,330  -->  00:00:53,855
and then the people in line are going to be serviced
15

15

00:00:53,855  -->  00:00:56,180
in the order that they joined the queue.
16

16

00:00:56,180  -->  00:00:58,880
So the first person in line is gonna be served,
17

17

00:00:58,880  -->  00:01:00,260
and then the second person in line,
18

18

00:01:00,260  -->  00:01:02,280
and then the third person in line, et cetera.
19

19

00:01:02,280  -->  00:01:04,923
That's the theory anyway, in real life people can butt in,
20

20

00:01:04,923  -->  00:01:07,327
but when we're dealing with the data structure queues
21

21

00:01:07,327  -->  00:01:09,290
nobody gets to butt in.
22

22

00:01:09,290  -->  00:01:12,484
So items are removed from the queue in the same order
23

23

00:01:12,484  -->  00:01:14,570
that they're added to the queue.
24

24

00:01:14,570  -->  00:01:17,670
So if we add item one, item two, and item three,
25

25

00:01:17,670  -->  00:01:19,675
then we have to remove item one first,
26

26

00:01:19,675  -->  00:01:23,060
and then item two, and then item three.
27

27

00:01:23,060  -->  00:01:24,979
So it's first in first out.
28

28

00:01:24,979  -->  00:01:28,540
With stacks it was the last item that was removed first,
29

29

00:01:28,540  -->  00:01:31,060
so if we added item one, item two, item three,
30

30

00:01:31,060  -->  00:01:33,460
it would be item three that was removed first,
31

31

00:01:33,460  -->  00:01:36,910
but with queues you're removed in the order you were added.
32

32

00:01:36,910  -->  00:01:39,952
Now, just like with stacks there are three main operations
33

33

00:01:39,952  -->  00:01:41,880
that we can perform on queues.
34

34

00:01:41,880  -->  00:01:44,670
We can add an item to the end of the queue,
35

35

00:01:44,670  -->  00:01:47,263
and that's also called onqueue or enqueue.
36

36

00:01:48,490  -->  00:01:51,340
We can remove the first item in the queue
37

37

00:01:51,340  -->  00:01:53,650
and that's also called dequeue,
38

38

00:01:53,650  -->  00:01:56,110
and just like stacks we can peek at the queue,
39

39

00:01:56,110  -->  00:01:58,462
and that gets the item at the front of the queue
40

40

00:01:58,462  -->  00:02:00,720
without removing it from the queue.
41

41

00:02:00,720  -->  00:02:03,322
Now just like with stacks there are two popular ways
42

42

00:02:03,322  -->  00:02:05,290
of implementing queues.
43

43

00:02:05,290  -->  00:02:07,270
Arrays and link lists.
44

44

00:02:07,270  -->  00:02:09,990
Alright, so here's a queue and ten is at the front,
45

45

00:02:09,990  -->  00:02:11,900
and 22 is at the back.
46

46

00:02:11,900  -->  00:02:14,700
So these items were added to the queue in the order
47

47

00:02:14,700  -->  00:02:17,750
ten, 15, four, and 22
48

48

00:02:17,750  -->  00:02:19,240
and then if we add 20,
49

49

00:02:19,240  -->  00:02:21,620
we're gonna add 20 to the back of the queue.
50

50

00:02:21,620  -->  00:02:24,300
So here's our queue before we add 20,
51

51

00:02:24,300  -->  00:02:26,660
and when we add an item the front of the queue
52

52

00:02:26,660  -->  00:02:28,110
doesn't change, but the back
53

53

00:02:28,110  -->  00:02:30,666
will be now pointing to the new item.
54

54

00:02:30,666  -->  00:02:33,720
If we remove an item, we're gonna remove the item
55

55

00:02:33,720  -->  00:02:34,553
from the front.
56

56

00:02:34,553  -->  00:02:38,326
So we're gonna remove ten, and the front now points to 15.
57

57

00:02:38,326  -->  00:02:40,360
Now depending on the implementation,
58

58

00:02:40,360  -->  00:02:41,800
you might clean up the ten,
59

59

00:02:41,800  -->  00:02:44,440
but this is essentially how this works.
60

60

00:02:44,440  -->  00:02:47,480
So if you add an item the back pointer will change,
61

61

00:02:47,480  -->  00:02:49,803
and if you remove an item the front pointer will change,
62

62

00:02:49,803  -->  00:02:51,968
and of course if we were now to peek
63

63

00:02:51,968  -->  00:02:56,300
the peek value would be 15 but nothing in the queue changes,
64

64

00:02:56,300  -->  00:02:59,180
so when we peek we get the item at the front of the queue,
65

65

00:02:59,180  -->  00:03:01,040
but we don't remove it from the queue.
66

66

00:03:01,040  -->  00:03:04,226
So nothing changes, the front pointer will not change.
67

67

00:03:04,226  -->  00:03:06,653
Now I didn't add a slide for time complexity,
68

68

00:03:06,653  -->  00:03:08,360
but if you're wondering about that
69

69

00:03:08,360  -->  00:03:11,800
it will a similar situation we had with stacks.
70

70

00:03:11,800  -->  00:03:14,930
It's gonna depend on what your backing the queue with.
71

71

00:03:14,930  -->  00:03:17,000
If you're backing the queue with an array,
72

72

00:03:17,000  -->  00:03:20,230
then whether an operation is gonna be constant time
73

73

00:03:20,230  -->  00:03:21,580
or linear time it's going to depend
74

74

00:03:21,580  -->  00:03:24,320
on whether you have to resize the array.
75

75

00:03:24,320  -->  00:03:26,150
If you're backing it with a link list,
76

76

00:03:26,150  -->  00:03:29,445
these three queue operations will always be constant time.
77

77

00:03:29,445  -->  00:03:32,580
Okay, so now that we know what a queue is
78

78

00:03:32,580  -->  00:03:34,360
and what operations we can do on it,
79

79

00:03:34,360  -->  00:03:36,262
let's go ahead and implement a simple queue.
80

80

00:03:36,262  -->  00:03:37,953
I'll see you in the next video.
