WEBVTT
1
1

00:00:00.202  -->  00:00:05.202
(lively music)
(keyboard clacking)
2

2

00:00:06.448  -->  00:00:09.080
<v Sarah>We're going to implement a max heap</v>
3

3

00:00:09.080  -->  00:00:11.020
meaning that the values of the parents
4

4

00:00:11.020  -->  00:00:14.160
are always greater than or equal to their children.
5

5

00:00:14.160  -->  00:00:15.970
If you wanted to implement a min heap,
6

6

00:00:15.970  -->  00:00:19.210
it would be pretty trivial to convert the code to do that.
7

7

00:00:19.210  -->  00:00:21.160
You just have to change the comparisons
8

8

00:00:21.160  -->  00:00:23.520
that are being done in the code.
9

9

00:00:23.520  -->  00:00:25.920
Heaps are usually implemented as arrays
10

10

00:00:25.920  -->  00:00:27.450
and so, that's how we're going to do it
11

11

00:00:27.450  -->  00:00:29.490
as we went through in the last slide,
12

12

00:00:29.490  -->  00:00:31.340
so I've created a project
13

13

00:00:31.340  -->  00:00:34.990
and I'm going to need a class for the heap,
14

14

00:00:34.990  -->  00:00:36.453
so let's create that.
15

15

00:00:37.300  -->  00:00:38.750
So I'll say New, Java Class
16

16

00:00:38.750  -->  00:00:40.203
and I'll just call it Heap.
17

17

00:00:42.230  -->  00:00:45.180
And we're going to need two fields in our heap class,
18

18

00:00:45.180  -->  00:00:48.500
the array and the next available position
19

19

00:00:48.500  -->  00:00:50.460
so that when we insert an item,
20

20

00:00:50.460  -->  00:00:52.450
we can just go straight to that index
21

21

00:00:52.450  -->  00:00:55.400
and insert the newValue.
22

22

00:00:55.400  -->  00:00:58.320
So, we'll say private int heap
23

23

00:00:59.807  -->  00:01:02.440
and private int size
24

24

00:01:03.770  -->  00:01:06.210
and then in our constructor, we just need
25

25

00:01:06.210  -->  00:01:07.957
to create and initialise the array
26

26

00:01:07.957  -->  00:01:09.440
and we'll let the caller tell us
27

27

00:01:09.440  -->  00:01:11.000
how big they want the heap to be.
28

28

00:01:11.000  -->  00:01:12.950
So, we'll let them pass as a capacity
29

29

00:01:12.950  -->  00:01:16.603
and we'll just say heap equals new int capacity.
30

30

00:01:18.760  -->  00:01:21.030
So, one of the things we're gonna need to do
31

31

00:01:21.030  -->  00:01:23.500
when we insert a node is check to see
32

32

00:01:23.500  -->  00:01:24.810
whether the heap is full
33

33

00:01:24.810  -->  00:01:28.740
and the heap is full when the size equals the length
34

34

00:01:28.740  -->  00:01:31.560
of the array and so, we're gonna create an isFull method,
35

35

00:01:31.560  -->  00:01:33.613
so we'll say public boolean isFull
36

36

00:01:35.497  -->  00:01:38.947
and we're gonna return size equals heap.length.
37

37

00:01:41.320  -->  00:01:43.440
And so, if the number of items we have in the heap
38

38

00:01:43.440  -->  00:01:45.720
is equal to the size of the array,
39

39

00:01:45.720  -->  00:01:47.940
then the heap is full.
40

40

00:01:47.940  -->  00:01:50.060
If the heap is full, there are two approaches.
41

41

00:01:50.060  -->  00:01:52.780
We can throw an exception and say sorry, the heap is full
42

42

00:01:52.780  -->  00:01:54.670
or we could resize the array.
43

43

00:01:54.670  -->  00:01:56.620
So, let's add a utility method
44

44

00:01:56.620  -->  00:02:01.010
for getting the parent for an element in the array,
45

45

00:02:01.010  -->  00:02:04.173
so we'll say public int getParent
46

46

00:02:05.040  -->  00:02:08.150
and we're gonna need the index of the element
47

47

00:02:08.150  -->  00:02:10.890
in the array that we wanna get the parent for
48

48

00:02:10.890  -->  00:02:14.290
and we're just gonna return that expression
49

49

00:02:14.290  -->  00:02:18.640
that we looked at, so we're gonna say return index
50

50

00:02:18.640  -->  00:02:23.296
minus one over two.
51

51

00:02:23.296  -->  00:02:24.730
We don't need to use floor
52

52

00:02:24.730  -->  00:02:27.860
because we're using integers
53

53

00:02:27.860  -->  00:02:30.296
and when you do division with integers,
54

54

00:02:30.296  -->  00:02:33.730
it will be rounded down automatically.
55

55

00:02:33.730  -->  00:02:37.210
It'll be rounded down to the lowest whole number
56

56

00:02:37.210  -->  00:02:40.380
and so, if the result of a division is 7.5,
57

57

00:02:40.380  -->  00:02:43.650
it just drops the .5 and returns you seven.
58

58

00:02:43.650  -->  00:02:46.940
So, in Java, doing integer division,
59

59

00:02:46.940  -->  00:02:48.790
you're already flooring the result
60

60

00:02:48.790  -->  00:02:52.060
and so, we don't have to explicitly call floor
61

61

00:02:52.060  -->  00:02:55.440
and so, let's start writing our insert method.
62

62

00:02:55.440  -->  00:02:57.620
And remember that when we insert a node,
63

63

00:02:57.620  -->  00:02:59.630
we always put it at the end of the array,
64

64

00:02:59.630  -->  00:03:01.440
that's why we're tracing the size
65

65

00:03:01.440  -->  00:03:05.510
so that we know where the next available position will be
66

66

00:03:05.510  -->  00:03:08.220
and so, we'll say public void insert
67

67

00:03:08.220  -->  00:03:10.743
and we'll want the value that we wanna insert.
68

68

00:03:11.750  -->  00:03:14.420
Now, we're going to just throw an exception
69

69

00:03:14.420  -->  00:03:15.630
if the heap is full.
70

70

00:03:15.630  -->  00:03:18.290
We're not gonna bother resizing the array,
71

71

00:03:18.290  -->  00:03:20.193
so we're gonna say if isFull
72

72

00:03:22.020  -->  00:03:24.450
throw new and we're just gonna throw
73

73

00:03:24.450  -->  00:03:26.053
an IndexOutOfBoundsException,
74

74

00:03:27.080  -->  00:03:28.350
with heap is full
75

75

00:03:29.410  -->  00:03:32.370
'cause basically what the caller is asking us to do
76

76

00:03:32.370  -->  00:03:35.900
is to add a node into an array
77

77

00:03:35.900  -->  00:03:37.270
and we don't have room for it
78

78

00:03:37.270  -->  00:03:40.490
and so, we're just gonna say IndexOutOfBounds,
79

79

00:03:40.490  -->  00:03:44.210
we can't add any more items into the heap.
80

80

00:03:44.210  -->  00:03:46.550
If that isn't the case, the first thing we'll do
81

81

00:03:46.550  -->  00:03:49.580
is put the new item at the first available spot,
82

82

00:03:49.580  -->  00:03:54.580
so we're gonna say heap size++ equals value.
83

83

00:03:54.780  -->  00:03:57.520
And so, we're using the post increment operator
84

84

00:03:57.520  -->  00:04:00.280
so that the current value of size will be used
85

85

00:04:00.280  -->  00:04:03.200
and then after the value has been assigned,
86

86

00:04:03.200  -->  00:04:06.193
size will be incremented to the next available position.
87

87

00:04:08.330  -->  00:04:12.130
So, now we have to potentially heapify
88

88

00:04:12.130  -->  00:04:15.170
or fix the heap because the value we inserted
89

89

00:04:15.170  -->  00:04:16.930
might be greater than its parent.
90

90

00:04:16.930  -->  00:04:18.760
Now this is a max heap,
91

91

00:04:18.760  -->  00:04:20.420
so we're going to check
92

92

00:04:20.420  -->  00:04:22.130
whether it is greater than its parent
93

93

00:04:22.130  -->  00:04:24.240
and if it is, we're gonna swap it with its parent
94

94

00:04:24.240  -->  00:04:25.750
and then we're gonna rinse and repeat
95

95

00:04:25.750  -->  00:04:29.080
until the value isn't greater than its parent
96

96

00:04:29.080  -->  00:04:30.780
or we hit the root
97

97

00:04:30.780  -->  00:04:32.588
and so, the value has become the root
98

98

00:04:32.588  -->  00:04:34.873
and at the point, the heap will be fixed.
99

99

00:04:34.873  -->  00:04:38.360
All of the nodes in the heap will be smaller
100

100

00:04:38.360  -->  00:04:39.500
than their parents.
101

101

00:04:39.500  -->  00:04:42.290
I'm gonna write a method called fixHeapAbove
102

102

00:04:42.290  -->  00:04:44.010
because you're gonna see later
103

103

00:04:44.010  -->  00:04:46.820
when we do delete that we have look down the heap
104

104

00:04:46.820  -->  00:04:49.130
to fix it and so, I'm gonna write
105

105

00:04:49.130  -->  00:04:51.230
a method called fixHeapAbove.
106

106

00:04:51.230  -->  00:04:54.060
Of course, when we're heapifying after an insert,
107

107

00:04:54.060  -->  00:04:55.740
we're looking up the tree
108

108

00:04:55.740  -->  00:04:57.360
'cause we're starting with the value
109

109

00:04:57.360  -->  00:04:58.620
and then we're gonna be comparing it
110

110

00:04:58.620  -->  00:05:01.620
to its parents and so, we're travelling up the tree
111

111

00:05:01.620  -->  00:05:05.320
to heapify it and that's why I'm gonna call it fixHeapAbove.
112

112

00:05:05.320  -->  00:05:08.163
So, I'll say private void fixHeapAbove
113

113

00:05:09.960  -->  00:05:13.270
and we want the index of the value
114

114

00:05:13.270  -->  00:05:14.570
that we've just inserted,
115

115

00:05:14.570  -->  00:05:15.880
so that's where we wanna start.
116

116

00:05:15.880  -->  00:05:20.453
So, we're gonna say int newValue equals heap index.
117

117

00:05:21.930  -->  00:05:24.423
So, this is the value that we just inserted.
118

118

00:05:25.410  -->  00:05:28.370
And then we're gonna say while index is greater than zero
119

119

00:05:28.370  -->  00:05:31.590
because if index hits zero, we've hit the root,
120

120

00:05:31.590  -->  00:05:33.520
it means the newValue is the root.
121

121

00:05:33.520  -->  00:05:36.300
So, if we haven't done that
122

122

00:05:36.300  -->  00:05:40.640
and newValue is greater than heap
123

123

00:05:40.640  -->  00:05:44.393
and we're gonna call the getParent, getParent index,
124

124

00:05:46.970  -->  00:05:48.210
and so, what we're doing here
125

125

00:05:48.210  -->  00:05:49.910
is if we haven't hit the root,
126

126

00:05:49.910  -->  00:05:51.930
then we're gonna compare the new value
127

127

00:05:51.930  -->  00:05:53.870
against the value of its parent
128

128

00:05:53.870  -->  00:05:57.064
and we call our method getParent
129

129

00:05:57.064  -->  00:05:58.564
to get the index of the parent
130

130

00:05:59.422  -->  00:06:02.230
and so, we just did the calculation we covered in the slides
131

131

00:06:02.230  -->  00:06:03.692
to get the index of the parent
132

132

00:06:03.692  -->  00:06:04.690
and we checked the value there
133

133

00:06:04.690  -->  00:06:07.364
and if the newValue has a greater value
134

134

00:06:07.364  -->  00:06:11.020
than its parent, then we wanna swap the two values
135

135

00:06:11.020  -->  00:06:15.460
and so, we're gonna say heap index
136

136

00:06:15.460  -->  00:06:16.930
equals heap
137

137

00:06:19.450  -->  00:06:22.470
getParent index and so, this is assigning the parent
138

138

00:06:22.470  -->  00:06:25.640
to where the newValue currently lives
139

139

00:06:25.640  -->  00:06:30.253
and then we're gonna say index equals getParent index.
140

140

00:06:31.460  -->  00:06:32.940
You might be saying, wait a minute,
141

141

00:06:32.940  -->  00:06:34.504
we haven't assigned the newValue
142

142

00:06:34.504  -->  00:06:37.670
into where parent currently lives
143

143

00:06:37.670  -->  00:06:40.130
but we'll do that at the final step.
144

144

00:06:40.130  -->  00:06:41.954
So, basically in the slides,
145

145

00:06:41.954  -->  00:06:44.760
I showed them swapping at each step
146

146

00:06:44.760  -->  00:06:47.360
and that's conceptually what we're doing
147

147

00:06:47.360  -->  00:06:50.870
but in the implementation, we're comparing the value
148

148

00:06:50.870  -->  00:06:55.210
against its parent and if it's greater than its parent,
149

149

00:06:55.210  -->  00:06:57.000
we assign the parent down,
150

150

00:06:57.000  -->  00:07:00.350
we don't actually assign the value into that node
151

151

00:07:00.350  -->  00:07:02.430
because we're gonna compare it against the parent
152

152

00:07:02.430  -->  00:07:06.030
of that node and it might have to be swapped down.
153

153

00:07:06.030  -->  00:07:09.001
So, we only actually assign newValue
154

154

00:07:09.001  -->  00:07:12.030
when we have found its correct position,
155

155

00:07:12.030  -->  00:07:14.710
so what we're doing is we're bubbling it up
156

156

00:07:14.710  -->  00:07:17.120
and we're shifting parents down,
157

157

00:07:17.120  -->  00:07:20.460
any parents that are less than the newValue
158

158

00:07:20.460  -->  00:07:23.010
are shifting down and at the end,
159

159

00:07:23.010  -->  00:07:25.020
there'll be the space where the newValue
160

160

00:07:25.020  -->  00:07:27.130
is supposed to go and that's when we'll assign it
161

161

00:07:27.130  -->  00:07:30.070
and so, we're gonna assign it when we drop out of the loop.
162

162

00:07:30.070  -->  00:07:33.290
And so, we're gonna say heap index
163

163

00:07:33.290  -->  00:07:36.640
equals newValue and we're done.
164

164

00:07:36.640  -->  00:07:38.560
So, if the while condition is true,
165

165

00:07:38.560  -->  00:07:40.270
we assign the parent value
166

166

00:07:40.270  -->  00:07:42.130
to where we added the newValue
167

167

00:07:42.130  -->  00:07:45.370
and then we update the index to the parent's position.
168

168

00:07:45.370  -->  00:07:49.360
We don't assign the newValue into the parent's position yet
169

169

00:07:49.360  -->  00:07:51.680
because we might not have found the correct position.
170

170

00:07:51.680  -->  00:07:54.860
In the slides, I showed you conceptually what's happening
171

171

00:07:54.860  -->  00:07:58.848
in terms of we're bubbling the newValue up
172

172

00:07:58.848  -->  00:08:00.992
and we don't actually have to assign the newValue
173

173

00:08:00.992  -->  00:08:04.420
every time we push a parent down.
174

174

00:08:04.420  -->  00:08:06.640
We can just keep pushing parents down
175

175

00:08:06.640  -->  00:08:08.680
and when we drop out of the loop,
176

176

00:08:08.680  -->  00:08:10.340
whatever index it's pointing to
177

177

00:08:10.340  -->  00:08:13.780
will be the spot where we're supposed to assign newValue.
178

178

00:08:13.780  -->  00:08:16.890
So, as I said, it's not really all that complicated
179

179

00:08:16.890  -->  00:08:18.983
on an insert to heapify the heap.
180

180

00:08:21.690  -->  00:08:24.230
So, now that we have our fixedHeapAbove method,
181

181

00:08:24.230  -->  00:08:26.480
the last thing we need to do in our insert method
182

182

00:08:26.480  -->  00:08:29.550
is call it, so we're gonna say fixHeapAbove
183

183

00:08:29.550  -->  00:08:32.010
and we're gonna pass the size
184

184

00:08:32.010  -->  00:08:33.180
and because we're gonna do that,
185

185

00:08:33.180  -->  00:08:35.690
I'm gonna actually not increment it here,
186

186

00:08:35.690  -->  00:08:37.260
we're just gonna pass the size
187

187

00:08:37.260  -->  00:08:41.520
and then I'll increment the size after we fix the heap.
188

188

00:08:41.520  -->  00:08:44.040
Otherwise we'd have to subtract one from the size
189

189

00:08:44.040  -->  00:08:45.600
and why do that?
190

190

00:08:45.600  -->  00:08:47.120
So, what we're gonna do here
191

191

00:08:47.120  -->  00:08:48.550
is we're passing the index
192

192

00:08:48.550  -->  00:08:49.800
of where we've put the newValue
193

193

00:08:49.800  -->  00:08:52.010
and you can see that when we come in to fixHeapAbove,
194

194

00:08:52.010  -->  00:08:54.250
the first thing we do is get the newValue
195

195

00:08:54.250  -->  00:08:55.570
that we just added.
196

196

00:08:55.570  -->  00:08:57.380
And so, that's it for insert.
197

197

00:08:57.380  -->  00:08:58.860
Not very complicated.
198

198

00:08:58.860  -->  00:09:00.610
So, I'll see you in the next video.
