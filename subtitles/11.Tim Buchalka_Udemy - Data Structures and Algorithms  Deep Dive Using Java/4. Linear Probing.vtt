WEBVTT
1
1

00:00:00.169  -->  00:00:02.631
(lively melody)
2

2

00:00:02.631  -->  00:00:05.310
(typing sound)
3

3

00:00:05.310  -->  00:00:07.230
<v Sarah>Alright, so in the last video</v>
4

4

00:00:07.230  -->  00:00:09.890
we did a dimple hashtable implementation,
5

5

00:00:09.890  -->  00:00:13.530
but our implementation doesn't handle collisions,
6

6

00:00:13.530  -->  00:00:14.980
and obviously that means
7

7

00:00:14.980  -->  00:00:17.370
it's not all that useful of a hashtable.
8

8

00:00:17.370  -->  00:00:20.160
So we're gonna take a look at two common stategies
9

9

00:00:20.160  -->  00:00:21.560
for handling collisions.
10

10

00:00:21.560  -->  00:00:25.050
The first one is called open addressing.
11

11

00:00:25.050  -->  00:00:27.650
So with open addressing what we do
12

12

00:00:27.650  -->  00:00:32.380
is if we try to put an employee into the table
13

13

00:00:32.380  -->  00:00:34.930
and we find out that there's already an employee
14

14

00:00:34.930  -->  00:00:38.600
at the slot where we wanna put the new employee,
15

15

00:00:38.600  -->  00:00:42.090
then we look for another position in the array.
16

16

00:00:42.090  -->  00:00:43.840
If we go back to our main method here,
17

17

00:00:43.840  -->  00:00:46.310
when we call put with Mary Smith,
18

18

00:00:46.310  -->  00:00:48.823
we know that Smith hashes to five
19

19

00:00:48.823  -->  00:00:52.230
and we know that Jane Jones is already at position five.
20

20

00:00:52.230  -->  00:00:55.550
So what we would do is say, okay, position five is full,
21

21

00:00:55.550  -->  00:00:58.790
so let's look for another position in the array.
22

22

00:00:58.790  -->  00:01:00.800
That's called open addressing.
23

23

00:01:00.800  -->  00:01:03.100
There are different ways that we can look
24

24

00:01:03.100  -->  00:01:04.770
for other positions.
25

25

00:01:04.770  -->  00:01:08.420
We're going to use what's called linear probing.
26

26

00:01:08.420  -->  00:01:12.810
With linear probing, when we discover that a position
27

27

00:01:12.810  -->  00:01:16.550
for a hash key value is already occupied,
28

28

00:01:16.550  -->  00:01:19.290
we increment the hashed value by one,
29

29

00:01:19.290  -->  00:01:21.940
and then we check the resulting index.
30

30

00:01:21.940  -->  00:01:25.050
So in our case, when we come to put in Mary Smith
31

31

00:01:25.050  -->  00:01:29.160
we would discover that, oops, hashtable position five
32

32

00:01:29.160  -->  00:01:30.630
is already occupied,
33

33

00:01:30.630  -->  00:01:33.700
and so we're gonna increment five to six
34

34

00:01:33.700  -->  00:01:35.860
and then we'll check hashtable six.
35

35

00:01:35.860  -->  00:01:39.480
And if that's already occupied, we'll increment to seven,
36

36

00:01:39.480  -->  00:01:42.690
and we'll keep doing that until we find an empty slot,
37

37

00:01:42.690  -->  00:01:45.429
or we've check the entire hashtable.
38

38

00:01:45.429  -->  00:01:48.960
If the hastable is full then we can't add the employee
39

39

00:01:48.960  -->  00:01:50.130
into the hashtable.
40

40

00:01:50.130  -->  00:01:51.850
So it's called linear probing,
41

41

00:01:51.850  -->  00:01:54.530
because each time we increment the index
42

42

00:01:54.530  -->  00:01:56.970
we're doing it in a linear fashion,
43

43

00:01:56.970  -->  00:01:59.940
and every increment of the index is called a probe.
44

44

00:01:59.940  -->  00:02:02.350
So if we have to increment the index once
45

45

00:02:02.350  -->  00:02:04.270
before we find an empty position,
46

46

00:02:04.270  -->  00:02:05.900
then we had to use one probe.
47

47

00:02:05.900  -->  00:02:08.460
If we have to increment the index three times
48

48

00:02:08.460  -->  00:02:10.160
before we find an empty position,
49

49

00:02:10.160  -->  00:02:12.210
then we had to use three probes,
50

50

00:02:12.210  -->  00:02:15.480
and obviously the lower the number of probes the better.
51

51

00:02:15.480  -->  00:02:18.830
So let's update our simple hashtable implementation
52

52

00:02:18.830  -->  00:02:20.280
to use linear probing.
53

53

00:02:20.280  -->  00:02:23.410
So we'll go back to our class,
54

54

00:02:23.410  -->  00:02:26.090
and the first thing I'm going to do is add a method
55

55

00:02:26.090  -->  00:02:29.883
that checks whether a given position is alright occupied.
56

56

00:02:31.173  -->  00:02:32.480
And so I'll do that down here
57

57

00:02:32.480  -->  00:02:34.530
underneath our hash key function.
58

58

00:02:34.530  -->  00:02:37.690
So I'll say private boolean occupied
59

59

00:02:38.620  -->  00:02:41.690
and we want the accept an index,
60

60

00:02:41.690  -->  00:02:43.180
'cause we're gonna be checking
61

61

00:02:43.180  -->  00:02:46.070
whether a specific position is occupied,
62

62

00:02:46.070  -->  00:02:47.564
and we're gonna return.
63

63

00:02:47.564  -->  00:02:52.564
Hashtable index is not equal to null.
64

64

00:02:53.890  -->  00:02:56.010
So if there's something already sitting
65

65

00:02:56.010  -->  00:02:58.020
at that index then it's occupied.
66

66

00:02:58.020  -->  00:03:00.650
So if it's not equal to null, we return true.
67

67

00:03:00.650  -->  00:03:03.280
If it is equal to null, that means it's empty
68

68

00:03:03.280  -->  00:03:05.140
and so we return false.
69

69

00:03:05.140  -->  00:03:09.030
So now let's update our put method to use linear probing.
70

70

00:03:09.030  -->  00:03:10.950
So we're still gonna hash our key
71

71

00:03:10.950  -->  00:03:13.790
and then once we get the resulting hashed value,
72

72

00:03:13.790  -->  00:03:15.650
we're gonna check whether that position
73

73

00:03:15.650  -->  00:03:17.350
in the array is already occupied.
74

74

00:03:17.350  -->  00:03:20.567
So we'll say if occupied hashedkey,
75

75

00:03:23.200  -->  00:03:28.100
if it's already occupied, we need to do linear probing.
76

76

00:03:28.100  -->  00:03:31.570
If it isn't, then we'll just come down here.
77

77

00:03:31.570  -->  00:03:34.380
And it's still possible that we won't be able
78

78

00:03:34.380  -->  00:03:37.150
to put the item into the array.
79

79

00:03:37.150  -->  00:03:39.210
I'm going to change this to occupy though,
80

80

00:03:39.210  -->  00:03:42.840
because the occupied method is essentially doing this now
81

81

00:03:42.840  -->  00:03:45.970
so I'll say if occupied
82

82

00:03:48.702  -->  00:03:50.760
hashedkey now this would happen if,
83

83

00:03:50.760  -->  00:03:52.600
when we're doing our probing,
84

84

00:03:52.600  -->  00:03:56.910
we've checked the entire array and so if the array is full,
85

85

00:03:56.910  -->  00:03:59.130
it doesn't matter if we're going to do linear probing,
86

86

00:03:59.130  -->  00:04:00.710
we're not going to find an empty spot.
87

87

00:04:00.710  -->  00:04:02.740
So if when we come out of this,
88

88

00:04:02.740  -->  00:04:06.030
if block to slot for hash key is occupied,
89

89

00:04:06.030  -->  00:04:07.100
we're out of luck.
90

90

00:04:07.100  -->  00:04:09.430
If it's not occupy, then we can go ahead
91

91

00:04:09.430  -->  00:04:11.850
and add the employee at that position.
92

92

00:04:11.850  -->  00:04:14.510
So let's do the linear probing.
93

93

00:04:14.510  -->  00:04:18.160
The first thing we're going to do is set a stop index,
94

94

00:04:18.160  -->  00:04:21.330
because we need to know when to stop looking.
95

95

00:04:21.330  -->  00:04:24.770
So we need to know when we have looked at the entire array.
96

96

00:04:24.770  -->  00:04:27.410
Now, this implementation is going to wrap
97

97

00:04:27.410  -->  00:04:29.060
if we hit the end of the array.
98

98

00:04:29.060  -->  00:04:31.810
So when we come in with Mary Smith,
99

99

00:04:31.810  -->  00:04:35.200
we're going to hash her key value, we're going to get five
100

100

00:04:35.200  -->  00:04:37.360
we're going to check whether five is occupied,
101

101

00:04:37.360  -->  00:04:38.300
and we're going to get true.
102

102

00:04:38.300  -->  00:04:40.180
So then we're going to do some linear probing,
103

103

00:04:40.180  -->  00:04:43.460
so we'll increment the hash key to six
104

104

00:04:43.460  -->  00:04:44.960
will check that position.
105

105

00:04:44.960  -->  00:04:46.510
If that's full will go to seven
106

106

00:04:47.430  -->  00:04:51.020
and we'll keep going, it's possible that all of the slots
107

107

00:04:51.020  -->  00:04:53.110
up to the end of the array are full
108

108

00:04:53.110  -->  00:04:54.720
and so if we hit the end of the array,
109

109

00:04:54.720  -->  00:04:57.070
we want to loop back around to zero.
110

110

00:04:57.070  -->  00:04:59.160
But then we need to know when to stop
111

111

00:04:59.160  -->  00:05:00.930
because then we're going to be traversing the array
112

112

00:05:00.930  -->  00:05:03.170
from zero upwards, and we don't want to traverse
113

113

00:05:03.170  -->  00:05:04.680
right to the end of the array again,
114

114

00:05:04.680  -->  00:05:06.950
because we've already checked some of those positions.
115

115

00:05:06.950  -->  00:05:09.390
And so we're going to set a stop index
116

116

00:05:09.390  -->  00:05:12.750
and that index will be equal to the hashedkey.
117

117

00:05:12.750  -->  00:05:14.930
Because we've already checked that position,
118

118

00:05:14.930  -->  00:05:16.600
we're going to increment by one
119

119

00:05:16.600  -->  00:05:18.740
and if we keep going and loop around
120

120

00:05:18.740  -->  00:05:20.000
and hit this position again,
121

121

00:05:20.000  -->  00:05:21.970
it means we checked the entire array.
122

122

00:05:21.970  -->  00:05:26.570
So we're going to say in stop index equals hashedkey.
123

123

00:05:26.570  -->  00:05:29.370
And so we're going to loop around until
124

124

00:05:29.370  -->  00:05:33.420
we find an empty spot, or we hit the stop index
125

125

00:05:33.420  -->  00:05:34.430
and then we're going to say
126

126

00:05:34.430  -->  00:05:38.860
if hashedkey equals
127

127

00:05:39.850  -->  00:05:44.200
hashtable length minus one,
128

128

00:05:44.200  -->  00:05:47.200
we want to set it to zero this is the wrapping.
129

129

00:05:47.200  -->  00:05:51.010
So this is setting up the first probe and if the position
130

130

00:05:51.010  -->  00:05:53.400
that we just checked is the last slot in the array,
131

131

00:05:53.400  -->  00:05:55.000
we want to loop the next position
132

132

00:05:55.000  -->  00:05:56.900
we're going to check his position zero,
133

133

00:05:56.900  -->  00:05:58.250
and so we're going to set it to zero
134

134

00:05:58.250  -->  00:05:59.970
if that's not the case, then we're just
135

135

00:05:59.970  -->  00:06:01.573
gonna increment hash key.
136

136

00:06:06.110  -->  00:06:08.390
And so all this code is doing here.
137

137

00:06:08.390  -->  00:06:09.910
This code here is creating
138

138

00:06:09.910  -->  00:06:12.630
the first value for the first probe.
139

139

00:06:12.630  -->  00:06:14.830
And so in the case of Mary will come in,
140

140

00:06:14.830  -->  00:06:17.710
we'll find out that position five is occupied.
141

141

00:06:17.710  -->  00:06:20.730
Five is not equal to hash table that length minus one
142

142

00:06:20.730  -->  00:06:22.680
and so we'll just increment five to six.
143

143

00:06:22.680  -->  00:06:25.390
So six will be the first probe that we use
144

144

00:06:25.390  -->  00:06:27.540
if we were coming in with a last name
145

145

00:06:27.540  -->  00:06:29.380
that was nine letters long
146

146

00:06:29.380  -->  00:06:31.710
and so we got the hash value nine.
147

147

00:06:31.710  -->  00:06:33.650
If that slot was already occupied,
148

148

00:06:33.650  -->  00:06:36.210
we don't want to increment hash key to 10
149

149

00:06:36.210  -->  00:06:37.380
because then we're going to get an array
150

150

00:06:37.380  -->  00:06:41.700
out of bounds exception in that case nine would equal
151

151

00:06:41.700  -->  00:06:44.500
hashtable dot lens minus one and so we the first probe
152

152

00:06:44.500  -->  00:06:46.070
value we want is zero.
153

153

00:06:46.070  -->  00:06:49.270
You want to wrap back to the front of the array.
154

154

00:06:49.270  -->  00:06:52.290
Alright, so now that we have our first pro value,
155

155

00:06:52.290  -->  00:06:57.090
we want to loop that we want to say wall occupied hashedkey.
156

156

00:06:57.090  -->  00:07:00.630
So while the slot we're looking at is occupy
157

157

00:07:00.630  -->  00:07:05.140
and our hashedkey is not equal to that stop index
158

158

00:07:05.140  -->  00:07:09.080
because if it is, we've looked at the entire array,
159

159

00:07:09.080  -->  00:07:12.250
we just want to keep implementing hashedkey
160

160

00:07:12.250  -->  00:07:14.880
and we're going to say hashedkey equals
161

161

00:07:16.303  -->  00:07:20.671
hashedkey plus one mod, the length of our hashtable.
162

162

00:07:20.671  -->  00:07:22.754
(typing)
163

163

00:07:24.010  -->  00:07:25.170
Now, why this?
164

164

00:07:25.170  -->  00:07:27.580
Well, we may want to rap to the front of the array
165

165

00:07:27.580  -->  00:07:29.630
at some point, this code here just sets
166

166

00:07:29.630  -->  00:07:31.090
the very first probe value.
167

167

00:07:31.090  -->  00:07:33.300
So if we came in with a value of seven,
168

168

00:07:33.300  -->  00:07:36.467
let's say, and seven was occupied, and so we increment
169

169

00:07:36.467  -->  00:07:38.980
hashedkey to eight and then we're going to,
170

170

00:07:38.980  -->  00:07:40.360
we're going to check position eight.
171

171

00:07:40.360  -->  00:07:42.340
Well, let's say position eight is occupied,
172

172

00:07:42.340  -->  00:07:45.720
so we come in, we're going to say eight plus one is nine
173

173

00:07:45.720  -->  00:07:47.390
modded by 10 is nine,
174

174

00:07:47.390  -->  00:07:49.060
so that's fine, we're going to loop around
175

175

00:07:49.060  -->  00:07:50.490
and check position nine.
176

176

00:07:50.490  -->  00:07:53.200
Let's say that's occupied so we'll come in and we'll say,
177

177

00:07:53.200  -->  00:07:55.170
okay, nine plus one is 10.
178

178

00:07:55.170  -->  00:07:56.920
We don't want to check position 10.
179

179

00:07:56.920  -->  00:07:58.590
It's array out of bounds.
180

180

00:07:58.590  -->  00:08:01.630
So we're going to say 10 mod 10 is zero.
181

181

00:08:01.630  -->  00:08:05.190
And that wraps hashedkey back to the beginning of the array.
182

182

00:08:05.190  -->  00:08:08.700
So this code here sets the first probe position.
183

183

00:08:08.700  -->  00:08:11.530
And then on each loop iteration,
184

184

00:08:11.530  -->  00:08:13.410
this will set the next probe position,
185

185

00:08:13.410  -->  00:08:16.130
and it takes care of the rapping and that's it.
186

186

00:08:16.130  -->  00:08:19.570
That's our updated put method and so if we come in
187

187

00:08:19.570  -->  00:08:24.470
with Mary, and we discover that position five is occupied
188

188

00:08:24.470  -->  00:08:28.140
will set, the value of the first probe will check
189

189

00:08:28.140  -->  00:08:30.090
the position at the first probe
190

190

00:08:30.090  -->  00:08:31.380
and if that's still occupied,
191

191

00:08:31.380  -->  00:08:33.340
we set the value of the next probe, etc.
192

192

00:08:33.340  -->  00:08:35.510
So when we drop out of this loop,
193

193

00:08:35.510  -->  00:08:38.110
either we found an empty position
194

194

00:08:38.110  -->  00:08:40.400
or we came out of it because we've looked
195

195

00:08:40.400  -->  00:08:44.560
at every position and so if the position is occupied,
196

196

00:08:44.560  -->  00:08:46.350
that means the array is full,
197

197

00:08:46.350  -->  00:08:47.820
we can't add the employee,
198

198

00:08:47.820  -->  00:08:50.110
otherwise we go ahead and add the employee.
199

199

00:08:50.110  -->  00:08:52.710
If we come in and the first position
200

200

00:08:52.710  -->  00:08:54.190
we check isn't occupied.
201

201

00:08:54.190  -->  00:08:55.990
We're not going to do any linear probing
202

202

00:08:55.990  -->  00:08:57.900
because this will return false,
203

203

00:08:57.900  -->  00:09:00.750
will drop out here and we're going to do the check again.
204

204

00:09:00.750  -->  00:09:02.970
It's redundant, but it's a constant time checks,
205

205

00:09:02.970  -->  00:09:05.400
so it's not really all that big of a deal
206

206

00:09:05.400  -->  00:09:08.080
and will, this will return false again.
207

207

00:09:08.080  -->  00:09:10.690
And we'll just go ahead and assign the employee.
208

208

00:09:10.690  -->  00:09:12.470
So let's go back to our main method
209

209

00:09:12.470  -->  00:09:15.060
and let's run the main method.
210

210

00:09:15.060  -->  00:09:18.250
I'm going to in comment, this print hash table.
211

211

00:09:18.250  -->  00:09:19.263
So let's run.
212

212

00:09:21.920  -->  00:09:25.160
And this time, we didn't get the Oops, sorry,
213

213

00:09:25.160  -->  00:09:27.070
can't put Mary into the hash table
214

214

00:09:27.070  -->  00:09:31.390
and as you can see, Mary has been put in to position seven,
215

215

00:09:31.390  -->  00:09:34.090
John's at positions three, Jane's at five,
216

216

00:09:34.090  -->  00:09:35.950
Mike's at six and Mary's at seven.
217

217

00:09:35.950  -->  00:09:38.710
So our linear probing looked at position five
218

218

00:09:38.710  -->  00:09:41.720
saw that it was occupied looked at position six
219

219

00:09:41.720  -->  00:09:44.720
saw that it was occupied looked at position seven,
220

220

00:09:44.720  -->  00:09:47.250
and bingo found an empty position.
221

221

00:09:47.250  -->  00:09:49.350
And so that's working.
222

222

00:09:49.350  -->  00:09:52.110
But now let's try to retrieve Mary,
223

223

00:09:52.110  -->  00:09:54.830
so I'm going to copy this line and perhaps
224

224

00:09:54.830  -->  00:09:56.930
you can guess what's going to happen here.
225

225

00:09:58.270  -->  00:10:00.720
So instead of retrieving keys Wilson,
226

226

00:10:00.720  -->  00:10:03.023
we're going to retrieve key Smith.
227

227

00:10:06.190  -->  00:10:07.793
And let's go ahead and run.
228

228

00:10:10.300  -->  00:10:13.420
And we have retrieve key Smith and oops,
229

229

00:10:13.420  -->  00:10:14.550
we got Jane.
230

230

00:10:14.550  -->  00:10:16.790
Now that happened, because we haven't updated
231

231

00:10:16.790  -->  00:10:17.960
the get method.
232

232

00:10:17.960  -->  00:10:19.477
So if we come back to the get method,
233

233

00:10:19.477  -->  00:10:24.477
the get method is completely oblivious about linear probing.
234

234

00:10:24.650  -->  00:10:27.480
So it's just still doing what it was doing before
235

235

00:10:27.480  -->  00:10:28.930
going ahead and hashing the key
236

236

00:10:28.930  -->  00:10:30.870
and then just returning whatever's there.
237

237

00:10:30.870  -->  00:10:34.100
Now, if we're using linear probing in the put method,
238

238

00:10:34.100  -->  00:10:36.340
we also have to use it and they get method
239

239

00:10:36.340  -->  00:10:39.640
so rather than assuming that, oh, if we get a hash value
240

240

00:10:39.640  -->  00:10:43.200
of five, that's where the key is, we actually have to look
241

241

00:10:43.200  -->  00:10:48.200
and see was the employee at that position added with the key
242

242

00:10:48.400  -->  00:10:52.190
that is being used to retrieve an employee.
243

243

00:10:52.190  -->  00:10:55.310
But of course, we have a problem now because
244

244

00:10:55.310  -->  00:10:56.830
we have an employee array.
245

245

00:10:56.830  -->  00:10:59.418
The only thing that we're storing in our hashtable
246

246

00:10:59.418  -->  00:11:00.300
is the employee.
247

247

00:11:00.300  -->  00:11:04.180
We have no idea what keys the employees were added with
248

248

00:11:04.180  -->  00:11:08.420
and so we're gonna have to store both the key and the value
249

249

00:11:08.420  -->  00:11:11.460
in the array, it's not good enough anymore to just store
250

250

00:11:11.460  -->  00:11:14.763
the value, and so I'm going to create a new class.
251

251

00:11:16.210  -->  00:11:18.003
Called StoredEmployee.
252

252

00:11:22.240  -->  00:11:24.410
And this class will have two fields,
253

253

00:11:24.410  -->  00:11:26.010
it's going to have the key
254

254

00:11:26.010  -->  00:11:27.450
and it's going to have the employee
255

255

00:11:27.450  -->  00:11:29.190
and I'm going to make them public,
256

256

00:11:29.190  -->  00:11:31.180
so that I don't have to create sets and gets
257

257

00:11:31.180  -->  00:11:33.660
because that'll mean that the code and the hash table
258

258

00:11:33.660  -->  00:11:35.130
won't be so cluttered.
259

259

00:11:35.130  -->  00:11:39.330
So I'm going to say public string key.
260

260

00:11:39.330  -->  00:11:42.770
This is the raw key This is not the hash value
261

261

00:11:42.770  -->  00:11:45.500
because when we come to retrieve Mary
262

262

00:11:45.500  -->  00:11:49.300
we have the key Smith and that hashes to five
263

263

00:11:49.300  -->  00:11:52.530
and when we look at position five we need to know
264

264

00:11:52.530  -->  00:11:56.080
if the employee there was added with the key Smith
265

265

00:11:56.080  -->  00:11:58.710
we know they were added with a hash value of five
266

266

00:11:58.710  -->  00:12:01.940
so that would be redundant information,
267

267

00:12:01.940  -->  00:12:03.360
but we need to look at the employee
268

268

00:12:03.360  -->  00:12:05.650
and say okay we see Jane Jones here
269

269

00:12:05.650  -->  00:12:09.163
was she added with the key Smith and so we need the raw key,
270

270

00:12:10.070  -->  00:12:12.320
and of course we need to store the employee
271

271

00:12:13.580  -->  00:12:16.500
employee employee
272

272

00:12:17.610  -->  00:12:20.440
and I'll have the ID generate a constructor for me
273

273

00:12:24.750  -->  00:12:28.130
okay and that's all we need in our StoredEmployee class.
274

274

00:12:28.130  -->  00:12:31.100
So now that we have that will have to come back
275

275

00:12:31.100  -->  00:12:35.890
and update our our hash table class we need an array
276

276

00:12:35.890  -->  00:12:39.340
of StoredEmployee stored employee
277

277

00:12:39.340  -->  00:12:41.750
and so we'll have to update our constructor
278

278

00:12:41.750  -->  00:12:44.230
to create an array of stored employee
279

279

00:12:46.700  -->  00:12:49.990
and down here rather than just putting the employee
280

280

00:12:49.990  -->  00:12:52.550
into the hash table we need to create an instance
281

281

00:12:52.550  -->  00:12:53.710
of StoredEmployee,
282

282

00:12:53.710  -->  00:12:56.530
so we'll say new StoredEmployee
283

283

00:12:56.530  -->  00:13:00.033
and we want the key in the employee.
284

284

00:13:00.990  -->  00:13:03.070
So nothing else needs to change here.
285

285

00:13:03.070  -->  00:13:04.670
We're just changing what we stored,
286

286

00:13:04.670  -->  00:13:06.830
but now we need to update our get method,
287

287

00:13:06.830  -->  00:13:10.140
we can no longer just blindly return the employee
288

288

00:13:10.140  -->  00:13:12.680
at the hash index, we have to check to see whether
289

289

00:13:12.680  -->  00:13:14.760
we have the right key and if we don't,
290

290

00:13:14.760  -->  00:13:17.220
then we have to use linear probing to keep looking.
291

291

00:13:17.220  -->  00:13:20.290
And so I'm going to add a findkey method
292

292

00:13:20.290  -->  00:13:23.540
and we'll use that to find the employee
293

293

00:13:23.540  -->  00:13:25.450
that we're looking for with the given key
294

294

00:13:25.450  -->  00:13:28.577
so I'm going to say private in findkey
295

295

00:13:29.740  -->  00:13:33.790
and will accept the raw key as a parameter
296

296

00:13:33.790  -->  00:13:35.830
and so the first thing we're going to do is hash it
297

297

00:13:35.830  -->  00:13:37.550
because the first location we're going to look
298

298

00:13:37.550  -->  00:13:39.380
at is the hashed value.
299

299

00:13:39.380  -->  00:13:43.230
So int hashedkey equals hashkey key
300

300

00:13:46.270  -->  00:13:50.320
and now we want to know if the employee that stored
301

301

00:13:50.320  -->  00:13:53.570
at hashedkey index was added
302

302

00:13:53.570  -->  00:13:56.950
with the key we're interested in, so we're going to say
303

303

00:13:56.950  -->  00:13:58.940
if hash table
304

304

00:14:00.346  -->  00:14:02.880
hashedkey is not equal to null
305

305

00:14:02.880  -->  00:14:05.760
and hastable
306

306

00:14:08.627  -->  00:14:13.627
hashedkey dot key dot equals the key we're interested in,
307

307

00:14:14.760  -->  00:14:16.570
then we have found our employees,
308

308

00:14:16.570  -->  00:14:19.260
so we can just return hashedkey.
309

309

00:14:20.543  -->  00:14:22.041
And so this is saying,
310

310

00:14:22.041  -->  00:14:26.975
if the key that was used to store the employee ID hash key
311

311

00:14:26.975  -->  00:14:29.914
is equal to the key that we're using to retrieve
312

312

00:14:29.914  -->  00:14:32.612
the employee, then we can just go ahead and return
313

313

00:14:32.612  -->  00:14:35.930
the hash value because that means that the employee
314

314

00:14:35.930  -->  00:14:40.056
at hashtable hashedkey was stored using the key
315

315

00:14:40.056  -->  00:14:41.423
that we're looking for.
316

316

00:14:41.423  -->  00:14:44.599
And so if we were looking to retrieve Jane Jones,
317

317

00:14:44.599  -->  00:14:47.499
we call get with the key Jones
318

318

00:14:47.499  -->  00:14:50.143
and Jones would hash to five
319

319

00:14:50.143  -->  00:14:52.198
and then we'd look at hash table five
320

320

00:14:52.198  -->  00:14:54.718
and we look at the key value the key value
321

321

00:14:54.718  -->  00:14:57.351
in the in store employee instance in its Jones
322

322

00:14:57.351  -->  00:14:59.681
that's the key for the employee we want to retrieve
323

323

00:14:59.681  -->  00:15:01.480
and so we can just return hash key,
324

324

00:15:01.480  -->  00:15:02.940
we found the employee.
325

325

00:15:02.940  -->  00:15:05.904
Now, if that's not the case, we have to use linear probing.
326

326

00:15:05.904  -->  00:15:07.900
And we have to do it the same way
327

327

00:15:07.900  -->  00:15:09.070
we did it in the get method,
328

328

00:15:09.070  -->  00:15:12.630
I mean you can't add one to every index in the get method
329

329

00:15:12.630  -->  00:15:14.460
and then when it comes to finding an employee,
330

330

00:15:14.460  -->  00:15:17.310
you're going to add five for every probe that wouldn't work.
331

331

00:15:17.310  -->  00:15:19.530
So we're going to have to do it the same way.
332

332

00:15:19.530  -->  00:15:22.190
And so I'm going to copy the code from here,
333

333

00:15:22.190  -->  00:15:25.163
we're going to modify it, but it'll give us a head start.
334

334

00:15:29.670  -->  00:15:33.370
So we don't, we don't care now, whether the position
335

335

00:15:33.370  -->  00:15:36.630
is occupied, we care whether the key
336

336

00:15:36.630  -->  00:15:39.310
that was used to store the employee at that position
337

337

00:15:39.310  -->  00:15:40.990
matches the one that we're interested in.
338

338

00:15:40.990  -->  00:15:42.910
So I'm going to take this line away.
339

339

00:15:42.910  -->  00:15:45.320
So the stop index will be set the same way
340

340

00:15:45.320  -->  00:15:48.060
and the first probe will be set the same way.
341

341

00:15:48.060  -->  00:15:49.840
And actually, I'll reformat the code now,
342

342

00:15:49.840  -->  00:15:51.810
so it's easier for us to see what's being done
343

343

00:15:51.810  -->  00:15:53.293
so I'll come up to code,
344

344

00:15:54.450  -->  00:15:57.853
reformat code, okay, and that pulls everything in.
345

345

00:16:01.010  -->  00:16:03.290
So we've set our first probe
346

346

00:16:03.290  -->  00:16:06.733
and now we want to keep looping,
347

347

00:16:08.840  -->  00:16:13.310
as follows, so while the hashedkey is not equal
348

348

00:16:13.310  -->  00:16:16.160
to stop index, because if it is,
349

349

00:16:16.160  -->  00:16:18.940
and we examine every position in the array
350

350

00:16:18.940  -->  00:16:21.640
and hash table
351

351

00:16:24.523  -->  00:16:27.023
hashedkey is not equal to null
352

352

00:16:27.970  -->  00:16:30.550
if it's equal to null we obviously don't want to look at it,
353

353

00:16:30.550  -->  00:16:32.440
it obviously won't contain the employee
354

354

00:16:32.440  -->  00:16:37.070
that we're looking for and the key at hashtable hashedkey
355

355

00:16:37.070  -->  00:16:39.350
is also not the one we're looking for.
356

356

00:16:39.350  -->  00:16:43.673
So not hash table hashedkey dot key dot equals,
357

357

00:16:45.030  -->  00:16:48.350
the key in that case, we want to keep looking,
358

358

00:16:48.350  -->  00:16:50.756
so we haven't looked at the entire array
359

359

00:16:50.756  -->  00:16:54.410
and the position we're looking at is not the employee
360

360

00:16:54.410  -->  00:16:57.000
that was added with with the key that we're interested in.
361

361

00:16:57.000  -->  00:16:59.130
And so we're going to go to the next probe
362

362

00:16:59.130  -->  00:17:01.380
and loop back around and keep looking.
363

363

00:17:01.380  -->  00:17:04.330
And so when we drop out of this while loop,
364

364

00:17:04.330  -->  00:17:05.690
there's two possibilities.
365

365

00:17:05.690  -->  00:17:09.470
Either we've looked at the entire array or we have found
366

366

00:17:09.470  -->  00:17:11.140
the employee.
367

367

00:17:11.140  -->  00:17:16.140
So we're going to say if stop index equals the hashedkey,
368

368

00:17:17.540  -->  00:17:19.490
then we've looked at the entire array,
369

369

00:17:19.490  -->  00:17:21.253
so we're going to return minus one.
370

370

00:17:22.130  -->  00:17:25.183
Otherwise, we're going to return hashedkey
371

371

00:17:27.070  -->  00:17:28.913
and I forgot my semi colon up here.
372

372

00:17:30.400  -->  00:17:34.140
Okay, so we use the same technique of linear probing
373

373

00:17:34.140  -->  00:17:37.010
to look for the employee that was added to the table
374

374

00:17:37.010  -->  00:17:37.990
with this key.
375

375

00:17:37.990  -->  00:17:40.460
If we find the employee we we return
376

376

00:17:40.460  -->  00:17:42.150
when we drop out of this loop.
377

377

00:17:42.150  -->  00:17:45.517
Will be at the position where that employee was stored.
378

378

00:17:45.517  -->  00:17:48.450
OK, so now that we have the findkey method,
379

379

00:17:48.450  -->  00:17:50.360
let's go back to our get method
380

380

00:17:50.360  -->  00:17:52.230
and this isn't going to be too bad
381

381

00:17:52.230  -->  00:17:56.233
will say int hashedkey and this time we'll say find`key,
382

382

00:17:58.640  -->  00:18:00.790
and then we're going to check for the minus one.
383

383

00:18:00.790  -->  00:18:04.410
If hash key equals minus one,
384

384

00:18:04.410  -->  00:18:05.850
we're just going to return null,
385

385

00:18:05.850  -->  00:18:09.710
because that means there's no employee with the key
386

386

00:18:09.710  -->  00:18:10.770
that we're looking for.
387

387

00:18:10.770  -->  00:18:12.890
Otherwise, we're going to return the employee
388

388

00:18:12.890  -->  00:18:16.503
and since we're storing stored employee instances
389

389

00:18:16.503  -->  00:18:20.510
in the hash table, now we need to add dot employee here
390

390

00:18:20.510  -->  00:18:21.610
and that's it.
391

391

00:18:21.610  -->  00:18:24.733
That's our updated get method, so let's go ahead and run.
392

392

00:18:27.880  -->  00:18:30.970
And this time we retrieved Mary Smith,
393

393

00:18:30.970  -->  00:18:34.170
but we have to update our print method
394

394

00:18:34.170  -->  00:18:36.227
because now we have stored employees
395

395

00:18:36.227  -->  00:18:38.270
and we don't have employee instances,
396

396

00:18:38.270  -->  00:18:39.703
so let's go do that now.
397

397

00:18:41.250  -->  00:18:43.700
And there's another thing that we have to do as well.
398

398

00:18:43.700  -->  00:18:47.180
It's possible of course, that a hash table position
399

399

00:18:47.180  -->  00:18:48.060
might be empty.
400

400

00:18:48.060  -->  00:18:50.510
That didn't matter before because we were just printing
401

401

00:18:50.510  -->  00:18:52.670
hash table I, but now we need to print
402

402

00:18:52.670  -->  00:18:56.730
hash table I dot employee and so we need to check for nulls
403

403

00:18:56.730  -->  00:19:01.583
so we'll say if hash table I equals null.
404

404

00:19:03.800  -->  00:19:06.740
Then I'm just going to say system dot out dot print line
405

405

00:19:06.740  -->  00:19:08.080
and I'll just say empty
406

406

00:19:09.950  -->  00:19:11.570
and otherwise
407

407

00:19:13.040  -->  00:19:15.020
we'll print out the employee
408

408

00:19:15.020  -->  00:19:17.020
and I'll add a few more details here,
409

409

00:19:17.020  -->  00:19:19.550
I'll say position
410

410

00:19:20.800  -->  00:19:22.960
plus I.
411

411

00:19:22.960  -->  00:19:27.960
plus a colon in a space plus the employee
412

412

00:19:28.680  -->  00:19:30.140
we're interested in.
413

413

00:19:30.140  -->  00:19:31.573
So let's run again.
414

414

00:19:33.830  -->  00:19:36.050
And now we've got the employees again,
415

415

00:19:36.050  -->  00:19:38.440
we can see john Doe is at positions three,
416

416

00:19:38.440  -->  00:19:42.070
Jane's five, Mike's six Mary's at seven
417

417

00:19:42.070  -->  00:19:45.070
and when we go to get married back this time we get Mary
418

418

00:19:45.070  -->  00:19:46.433
instead of getting Jane.
419

419

00:19:48.370  -->  00:19:51.650
And so that's how linear probing works.
420

420

00:19:51.650  -->  00:19:55.300
If the position at the hashed value for the key
421

421

00:19:55.300  -->  00:19:58.840
is already occupied you keep incremental the index
422

422

00:19:58.840  -->  00:20:01.340
and rapping to the front if necessary,
423

423

00:20:01.340  -->  00:20:03.440
until you find an empty spot.
424

424

00:20:03.440  -->  00:20:07.060
And as you can see handling collisions, complicate things.
425

425

00:20:07.060  -->  00:20:09.010
And it also affects performance.
426

426

00:20:09.010  -->  00:20:12.260
If we have to use probing, if there is a collision,
427

427

00:20:12.260  -->  00:20:16.180
then adding an item into the hash table is no longer
428

428

00:20:16.180  -->  00:20:17.440
constant time.
429

429

00:20:17.440  -->  00:20:20.080
The worst case is linear Oh of n,
430

430

00:20:20.080  -->  00:20:21.950
because it's possible that we might have to search
431

431

00:20:21.950  -->  00:20:25.700
the entire table before we hit the last empty spot
432

432

00:20:25.700  -->  00:20:26.650
in the array.
433

433

00:20:26.650  -->  00:20:29.370
But as I said, in practise, it's it can be difficult
434

434

00:20:29.370  -->  00:20:32.290
to come up with a hashing function that's going to return
435

435

00:20:32.290  -->  00:20:34.770
unique values and a lot of times
436

436

00:20:34.770  -->  00:20:38.010
the amount of space you have in the data structure
437

437

00:20:38.010  -->  00:20:40.100
that's back in the table might not be large enough
438

438

00:20:40.100  -->  00:20:41.680
to hold all the items you want to add,
439

439

00:20:41.680  -->  00:20:43.160
in which case, it doesn't matter
440

440

00:20:43.160  -->  00:20:44.860
how good your hashing function is,
441

441

00:20:44.860  -->  00:20:47.300
collisions will be unavoidable.
442

442

00:20:47.300  -->  00:20:50.140
Now, we talked about the load factor that can obviously
443

443

00:20:50.140  -->  00:20:53.070
also affect how many collisions you're going to have
444

444

00:20:53.070  -->  00:20:56.100
and how well linear pro probing works because
445

445

00:20:56.100  -->  00:20:58.090
if your array is almost full,
446

446

00:20:58.090  -->  00:21:00.500
then you're going to have to be using a lot of probes
447

447

00:21:00.500  -->  00:21:02.960
to find an empty spot.
448

448

00:21:02.960  -->  00:21:05.180
But if you keep the load factor reasonable
449

449

00:21:05.180  -->  00:21:08.020
and so you'll occasionally resize the array
450

450

00:21:08.020  -->  00:21:09.640
to create more empty spots,
451

451

00:21:09.640  -->  00:21:12.830
then that will cut down on the number on the average number
452

452

00:21:12.830  -->  00:21:14.453
of probes that you have to use.
