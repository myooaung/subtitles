WEBVTT
1
1

00:00:00.310  -->  00:00:01.143
(happy bells)
2

2

00:00:01.143  -->  00:00:02.517
(logo whoosh)
3

3

00:00:02.517  -->  00:00:03.350
(typing)
4

4

00:00:03.350  -->  00:00:05.360
(mouse clicking)
5

5

00:00:05.360  -->  00:00:07.540
<v ->Alright so let's start implementing</v>
6

6

00:00:07.540  -->  00:00:09.620
a simple binary search tree now.
7

7

00:00:09.620  -->  00:00:12.050
For our implementation we're just gonna store
8

8

00:00:12.050  -->  00:00:14.180
integer values in the nodes
9

9

00:00:14.180  -->  00:00:17.610
but you can store any type of data in a binary search tree.
10

10

00:00:17.610  -->  00:00:20.210
We'll keep things simple for our implementation
11

11

00:00:20.210  -->  00:00:23.050
so we can focus on the code and
12

12

00:00:23.050  -->  00:00:25.340
the concepts that are related to trees
13

13

00:00:25.340  -->  00:00:26.900
and we'll just store integers.
14

14

00:00:26.900  -->  00:00:28.810
So the first thing I'm gonna do is
15

15

00:00:28.810  -->  00:00:31.333
create a class for a node,
16

16

00:00:32.520  -->  00:00:34.383
and I'm gonna call it TreeNode.
17

17

00:00:36.740  -->  00:00:38.970
And we're gonna have three fields.
18

18

00:00:38.970  -->  00:00:42.430
We're gonna have a field for the data
19

19

00:00:42.430  -->  00:00:43.590
so that it'll be an integer
20

20

00:00:43.590  -->  00:00:44.900
and then we need fields for
21

21

00:00:44.900  -->  00:00:46.560
the left child and the right child
22

22

00:00:46.560  -->  00:00:48.530
because each node could potentially
23

23

00:00:48.530  -->  00:00:50.050
have a left child and a right child.
24

24

00:00:50.050  -->  00:00:52.613
So we'll say private TreeNode leftChild
25

25

00:00:55.550  -->  00:00:58.170
and private TreeNode rightChild.
26

26

00:00:59.320  -->  00:01:01.350
So I'm gonna have the IDE generate
27

27

00:01:01.350  -->  00:01:04.450
sets and gets for these guys so I'll right click,
28

28

00:01:04.450  -->  00:01:06.940
say generate, I want getters and setters,
29

29

00:01:06.940  -->  00:01:10.100
and I'll select everything and click okay.
30

30

00:01:10.100  -->  00:01:12.400
So now we have our gets and sets
31

31

00:01:12.400  -->  00:01:14.120
and I'm gonna add a constructor
32

32

00:01:15.730  -->  00:01:19.200
public TreeNode and it'll accept
33

33

00:01:20.220  -->  00:01:22.210
the value we wanna store in this node
34

34

00:01:22.210  -->  00:01:25.900
and it'll just do the usual this dot data equals data.
35

35

00:01:25.900  -->  00:01:29.630
When we construct the node it'll be a LeafNode at first
36

36

00:01:29.630  -->  00:01:31.840
and so we don't have anything
37

37

00:01:31.840  -->  00:01:34.020
to assign to the left and right childs.
38

38

00:01:34.020  -->  00:01:36.670
Alright so now we need a class for the tree itself
39

39

00:01:36.670  -->  00:01:39.170
so I'll create a new java class,
40

40

00:01:39.170  -->  00:01:40.340
call it tree
41

41

00:01:42.476  -->  00:01:44.490
and we only need one field in the tree
42

42

00:01:44.490  -->  00:01:46.300
and that's the root node
43

43

00:01:46.300  -->  00:01:48.050
because if we have the root we
44

44

00:01:48.050  -->  00:01:49.230
can get to everything else.
45

45

00:01:49.230  -->  00:01:51.290
It's similar to the link list.
46

46

00:01:51.290  -->  00:01:53.140
All we needed was the head of the list
47

47

00:01:53.140  -->  00:01:54.750
and if we have that we can get to
48

48

00:01:54.750  -->  00:01:57.010
everything else through the next fields.
49

49

00:01:57.010  -->  00:01:58.600
Well if we have the root node we
50

50

00:01:58.600  -->  00:02:00.130
can get to everything else by
51

51

00:02:00.130  -->  00:02:02.960
traversing it's left child and it's right child.
52

52

00:02:02.960  -->  00:02:07.250
So we'll say private TreeNode root
53

53

00:02:07.250  -->  00:02:08.083
and that's it.
54

54

00:02:08.083  -->  00:02:10.520
That's all we need for our tree.
55

55

00:02:10.520  -->  00:02:12.440
We need a class for the tree and
56

56

00:02:12.440  -->  00:02:14.770
a class for the nodes that will go into the tree.
57

57

00:02:14.770  -->  00:02:17.010
Alright so to build a binary tree we're
58

58

00:02:17.010  -->  00:02:19.210
going to need to insert nodes and
59

59

00:02:19.210  -->  00:02:20.440
the way we're gonna do it,
60

60

00:02:20.440  -->  00:02:23.050
and we went through this on the slides is,
61

61

00:02:23.050  -->  00:02:25.650
if we come to insert a node,
62

62

00:02:25.650  -->  00:02:27.480
if the tree is empty then the node
63

63

00:02:27.480  -->  00:02:29.640
becomes the root and we're done.
64

64

00:02:29.640  -->  00:02:31.900
If the tree isn't empty we're gonna
65

65

00:02:31.900  -->  00:02:34.950
compare the value we're inserting against the root node.
66

66

00:02:34.950  -->  00:02:36.570
If it's less than the root node we're
67

67

00:02:36.570  -->  00:02:38.700
going to go to the left and if it's greater
68

68

00:02:38.700  -->  00:02:40.590
than the root node we're going to go to the right
69

69

00:02:40.590  -->  00:02:42.010
and then we're gonna rinse and repeat.
70

70

00:02:42.010  -->  00:02:44.590
So we'd look at the left child
71

71

00:02:44.590  -->  00:02:46.890
in the case of going to the left
72

72

00:02:46.890  -->  00:02:49.260
and if the value is less than the left child
73

73

00:02:49.260  -->  00:02:50.770
we're gonna go to the left.
74

74

00:02:50.770  -->  00:02:53.200
If the value is greater we're gonna go to the right.
75

75

00:02:53.200  -->  00:02:54.760
At each step we're gonna compare
76

76

00:02:54.760  -->  00:02:57.870
to the current node that we're looking at
77

77

00:02:57.870  -->  00:03:00.360
and we're gonna move to the left or right subtree
78

78

00:03:00.360  -->  00:03:03.300
and we're gonna keep doing that until we hit an empty spot,
79

79

00:03:03.300  -->  00:03:04.930
and then we'll insert the node.
80

80

00:03:04.930  -->  00:03:07.210
Now in this implementation we're
81

81

00:03:07.210  -->  00:03:10.240
not going to worry about duplicate values.
82

82

00:03:10.240  -->  00:03:12.190
In fact we're not going to allow them
83

83

00:03:12.190  -->  00:03:16.150
so if we try to insert a node and we find a duplicate value,
84

84

00:03:16.150  -->  00:03:18.910
so eventually we come across a node
85

85

00:03:18.910  -->  00:03:21.160
and when we compare the value equal to node
86

86

00:03:21.160  -->  00:03:22.810
then we'll just kick out.
87

87

00:03:22.810  -->  00:03:24.500
We won't insert the node.
88

88

00:03:24.500  -->  00:03:26.810
So you might think that we have an
89

89

00:03:26.810  -->  00:03:28.942
insert method in the tree and we will
90

90

00:03:28.942  -->  00:03:33.130
but we'll also have an insert method in our TreeNode class.
91

91

00:03:33.130  -->  00:03:35.260
And so that's where we're gonna start.
92

92

00:03:35.260  -->  00:03:37.783
Actually ill put it above all the sets and gets.
93

93

00:03:38.700  -->  00:03:42.440
So we're gonna say public void insert
94

94

00:03:42.440  -->  00:03:44.180
and we need the value
95

95

00:03:44.180  -->  00:03:47.120
we wanna insert into the tree
96

96

00:03:48.292  -->  00:03:49.125
and we're gonna start out by checking
97

97

00:03:49.125  -->  00:03:51.930
whether the value equals the data in this node.
98

98

00:03:51.930  -->  00:03:53.900
So when this insert method gets called
99

99

00:03:53.900  -->  00:03:57.610
we're gonna compare the value we wanna insert
100

100

00:03:57.610  -->  00:04:00.440
against the value of the node
101

101

00:04:00.440  -->  00:04:02.660
that we're calling the insert method with.
102

102

00:04:02.660  -->  00:04:04.030
And so the first thing we're gonna do
103

103

00:04:04.030  -->  00:04:08.170
is say is the value equal to the value for this node
104

104

00:04:08.170  -->  00:04:09.980
because if it is it's a duplicate value
105

105

00:04:09.980  -->  00:04:11.220
and we don't wanna do anything.
106

106

00:04:11.220  -->  00:04:13.910
So we'll say if value
107

107

00:04:13.910  -->  00:04:14.810
equals
108

108

00:04:15.840  -->  00:04:16.673
data
109

109

00:04:18.242  -->  00:04:19.260
we're just gonna return
110

110

00:04:19.260  -->  00:04:21.750
because our tree doesn't support duplicate values.
111

111

00:04:21.750  -->  00:04:23.550
Now we could return something to the caller
112

112

00:04:23.550  -->  00:04:24.990
and everything else but we'll just
113

113

00:04:24.990  -->  00:04:26.990
ignore that and say hey if you
114

114

00:04:26.990  -->  00:04:29.210
have a duplicate value it's a no-op.
115

115

00:04:29.210  -->  00:04:32.650
Okay so if we don't return then
116

116

00:04:32.650  -->  00:04:34.470
the value in the node we're checking
117

117

00:04:34.470  -->  00:04:36.820
is either less than or greater than
118

118

00:04:36.820  -->  00:04:38.350
the value we wanna insert so we're
119

119

00:04:38.350  -->  00:04:39.680
gonna say if
120

120

00:04:41.090  -->  00:04:42.770
the value we wanna insert
121

121

00:04:42.770  -->  00:04:44.880
is less than the data in this node
122

122

00:04:44.880  -->  00:04:46.470
what do we wanna do?
123

123

00:04:46.470  -->  00:04:48.480
Well we wanna go to the left.
124

124

00:04:48.480  -->  00:04:51.320
And so we'll check to see if there is a left child.
125

125

00:04:51.320  -->  00:04:53.550
We could be looking at a leaf node here
126

126

00:04:53.550  -->  00:04:54.850
or we could be looking at a node
127

127

00:04:54.850  -->  00:04:56.240
that doesn't have a left child
128

128

00:04:56.240  -->  00:04:59.430
so we'll say if the left child is null,
129

129

00:04:59.430  -->  00:05:01.280
(typing)
130

130

00:05:01.280  -->  00:05:04.008
well if the left child of this node is null,
131

131

00:05:04.008  -->  00:05:05.800
we have a found our insertion point.
132

132

00:05:05.800  -->  00:05:08.060
We want to insert this value as
133

133

00:05:08.060  -->  00:05:10.510
the leftChild of this node.
134

134

00:05:10.510  -->  00:05:12.820
And so we'll say leftChild equals
135

135

00:05:12.820  -->  00:05:17.250
new TreeNode the value we're inserting.
136

136

00:05:17.250  -->  00:05:18.123
And we're done.
137

137

00:05:19.020  -->  00:05:22.300
Now if this node does have a left child
138

138

00:05:22.300  -->  00:05:24.800
meaning we have not found our insertion spot yet
139

139

00:05:24.800  -->  00:05:28.020
then we're going to call our insert method
140

140

00:05:28.020  -->  00:05:29.433
on the left child.
141

141

00:05:30.567  -->  00:05:35.567
So we're gonna say else leftChild dot insert value.
142

142

00:05:35.721  -->  00:05:40.721
And then what will happen is this leftChild here
143

143

00:05:40.840  -->  00:05:42.430
it's insert method will be called
144

144

00:05:42.430  -->  00:05:45.420
and then we'll compare the value against the data etc.
145

145

00:05:45.420  -->  00:05:48.490
So what we're doing here is we come in,
146

146

00:05:48.490  -->  00:05:50.970
we check the value we want to insert
147

147

00:05:50.970  -->  00:05:53.430
against the value for this node.
148

148

00:05:53.430  -->  00:05:55.830
If the value is less than the value for this node
149

149

00:05:55.830  -->  00:05:57.670
then we know that we're gonna wanna insert
150

150

00:05:57.670  -->  00:06:01.190
the values somewhere in this nodes left subtree.
151

151

00:06:01.190  -->  00:06:03.920
If this node doesn't have a left subtree yet
152

152

00:06:03.920  -->  00:06:05.840
because it doesn't have a left child,
153

153

00:06:05.840  -->  00:06:07.890
hey we've found our insertion point.
154

154

00:06:07.890  -->  00:06:09.790
If it does have a left child then we
155

155

00:06:09.790  -->  00:06:13.130
want to compare this value against the left child,
156

156

00:06:13.130  -->  00:06:15.810
and so we're gonna call the insert method
157

157

00:06:15.810  -->  00:06:17.430
for the left child to do that.
158

158

00:06:17.430  -->  00:06:21.440
And of course if we came in on the left child
159

159

00:06:21.440  -->  00:06:23.110
and the value is less than we'd
160

160

00:06:23.110  -->  00:06:27.210
call the insert method for it's left child, etc.
161

161

00:06:27.210  -->  00:06:29.550
Now if the value isn't equal to the data
162

162

00:06:29.550  -->  00:06:30.870
and it's not less than the data
163

163

00:06:30.870  -->  00:06:32.350
that means it's greater than the data.
164

164

00:06:32.350  -->  00:06:33.960
So we have to handle that case
165

165

00:06:33.960  -->  00:06:36.350
and in that case we're going to want to
166

166

00:06:36.350  -->  00:06:38.900
do the same thing but on the right child.
167

167

00:06:38.900  -->  00:06:40.800
So we're gonna say else
168

168

00:06:41.930  -->  00:06:43.660
if rightChild
169

169

00:06:43.660  -->  00:06:47.660
equals null then we have found our insertion point.
170

170

00:06:47.660  -->  00:06:49.470
So we'll say rightChild equals
171

171

00:06:49.470  -->  00:06:51.853
new tree node value.
172

172

00:06:53.000  -->  00:06:58.000
Otherwise we wanna look at the right child of this node.
173

173

00:06:58.756  -->  00:07:03.300
And so we'll say rightChild dot insert value.
174

174

00:07:03.300  -->  00:07:06.970
And so that's the tree nodes insert method
175

175

00:07:06.970  -->  00:07:10.040
and so essentially if the values are equal
176

176

00:07:10.040  -->  00:07:12.850
we return 'cause we're not allowing duplicate values.
177

177

00:07:12.850  -->  00:07:14.322
If the value we wanna insert is
178

178

00:07:14.322  -->  00:07:16.440
less than this node we're going to
179

179

00:07:16.440  -->  00:07:18.470
explore it's left subtree.
180

180

00:07:18.470  -->  00:07:20.640
And if the value is greater we're
181

181

00:07:20.640  -->  00:07:22.850
gonna explore it's right subtree.
182

182

00:07:22.850  -->  00:07:24.989
Now if it doesn't have a left subtree
183

183

00:07:24.989  -->  00:07:26.560
then we've found the insertion point.
184

184

00:07:26.560  -->  00:07:27.697
If it doesn't have a right subtree
185

185

00:07:27.697  -->  00:07:29.190
and we wanna go to the right we
186

186

00:07:29.190  -->  00:07:31.080
have found the insertion point.
187

187

00:07:31.080  -->  00:07:33.396
Otherwise we're gonna go ahead
188

188

00:07:33.396  -->  00:07:37.300
and look at the left subtree or the right subtree.
189

189

00:07:37.300  -->  00:07:41.120
So now let's add an insert method to the tree class.
190

190

00:07:41.120  -->  00:07:44.970
And so we're gonna say public void insert
191

191

00:07:44.970  -->  00:07:47.210
and we need the value that we wanna insert.
192

192

00:07:47.210  -->  00:07:50.170
And so this is what a caller would actually call,
193

193

00:07:50.170  -->  00:07:52.080
to insert a value into the tree.
194

194

00:07:52.080  -->  00:07:54.300
And it's the tree class that's gonna call
195

195

00:07:54.300  -->  00:07:57.430
the insert method with that value.
196

196

00:07:57.430  -->  00:07:58.740
Now the first thing we're gonna check
197

197

00:07:58.740  -->  00:08:00.240
is if the root is null because if
198

198

00:08:00.240  -->  00:08:02.710
the root is null then whatever inserting
199

199

00:08:02.710  -->  00:08:04.200
just becomes the root node.
200

200

00:08:04.200  -->  00:08:06.580
So we'll say if root equals null
201

201

00:08:07.720  -->  00:08:12.720
then root equals new TreeNode value and we're done.
202

202

00:08:13.350  -->  00:08:14.530
We don't have to do anything else.
203

203

00:08:14.530  -->  00:08:16.700
So you know as I said before when we're
204

204

00:08:16.700  -->  00:08:19.139
inserting you always insert into the very first
205

205

00:08:19.139  -->  00:08:20.740
empty spot you find.
206

206

00:08:20.740  -->  00:08:23.580
And if you have an empty tree that's gonna be the root.
207

207

00:08:23.580  -->  00:08:25.370
Now if the root isn't null then we
208

208

00:08:25.370  -->  00:08:28.640
want to pretty much do what we did in here.
209

209

00:08:28.640  -->  00:08:30.370
We wanna compare the value against
210

210

00:08:30.370  -->  00:08:33.260
the root and depending on the comparison result
211

211

00:08:33.260  -->  00:08:35.080
we wanna go to the left or the right.
212

212

00:08:35.080  -->  00:08:36.860
And so to do that all we have to do
213

213

00:08:36.860  -->  00:08:39.393
is call a root dot insert value.
214

214

00:08:40.410  -->  00:08:43.040
So if we have an empty tree the value we're
215

215

00:08:43.040  -->  00:08:44.940
inserting becomes the root node.
216

216

00:08:44.940  -->  00:08:46.290
If we don't have an empty tree we're
217

217

00:08:46.290  -->  00:08:48.150
gonna call the insert method on root.
218

218

00:08:48.150  -->  00:08:50.610
And then in here the value would be
219

219

00:08:50.610  -->  00:08:52.430
compared against the value in the root.
220

220

00:08:52.430  -->  00:08:55.000
If it's a duplicate value we kick out.
221

221

00:08:55.000  -->  00:08:57.220
Otherwise depending whether the value is
222

222

00:08:57.220  -->  00:08:59.640
less than or greater than the value in the root
223

223

00:08:59.640  -->  00:09:00.473
we're going to explore the
224

224

00:09:00.473  -->  00:09:02.850
left subtree or the right subtree.
225

225

00:09:02.850  -->  00:09:04.950
So if I come to the main method here
226

226

00:09:04.950  -->  00:09:07.030
and let's create a tree instance.
227

227

00:09:07.030  -->  00:09:09.270
So we'll say tree
228

228

00:09:09.270  -->  00:09:12.730
let's call it intTree equals new tree.
229

229

00:09:12.730  -->  00:09:15.960
And then let's insert the value 25.
230

230

00:09:15.960  -->  00:09:19.160
So we'd say intTree dot insert
231

231

00:09:19.160  -->  00:09:20.123
25.
232

232

00:09:21.640  -->  00:09:25.850
And then we can say in tree intTree dot insert
233

233

00:09:25.850  -->  00:09:28.563
if we're building the tree that we did in the slides,
234

234

00:09:29.400  -->  00:09:31.517
we're gonna insert 20.
235

235

00:09:31.517  -->  00:09:32.680
(typing)
236

236

00:09:32.680  -->  00:09:34.685
and then we're gonna insert 15.
237

237

00:09:34.685  -->  00:09:37.075
(typing)
238

238

00:09:37.075  -->  00:09:38.920
intTree dot insert
239

239

00:09:38.920  -->  00:09:40.484
27.
240

240

00:09:40.484  -->  00:09:42.567
(typing)
241

241

00:09:43.710  -->  00:09:44.543
30
242

242

00:09:45.547  -->  00:09:47.960
(typing)
243

243

00:09:47.960  -->  00:09:49.630
29
244

244

00:09:49.630  -->  00:09:51.713
(typing)
245

245

00:09:52.913  -->  00:09:54.438
26
246

246

00:09:54.438  -->  00:09:56.521
(typing)
247

247

00:10:00.512  -->  00:10:03.293
22 and the final value was 32.
248

248

00:10:04.970  -->  00:10:05.860
And let's just run.
249

249

00:10:05.860  -->  00:10:07.150
We won't see anything 'cause we
250

250

00:10:07.150  -->  00:10:10.113
haven't written a print tree yet but let's run.
251

251

00:10:14.930  -->  00:10:16.900
And we just wanted to make sure that we
252

252

00:10:16.900  -->  00:10:18.880
didn't have any errors.
253

253

00:10:18.880  -->  00:10:21.630
And I'll just say indent with four spaces.
254

254

00:10:21.630  -->  00:10:23.760
I don't know why it complains about that sometimes
255

255

00:10:23.760  -->  00:10:24.620
but it does.
256

256

00:10:24.620  -->  00:10:27.530
So as I said we know we didn't get any errors
257

257

00:10:27.530  -->  00:10:30.760
but we don't know whether our tree is being built correctly.
258

258

00:10:30.760  -->  00:10:32.650
For that we'd have to run the debugger
259

259

00:10:32.650  -->  00:10:34.400
or we need to write a method that
260

260

00:10:34.400  -->  00:10:37.090
traverses the tree and so it starts at the root
261

261

00:10:37.090  -->  00:10:39.740
and then access or visits,
262

262

00:10:39.740  -->  00:10:41.970
we say visit when we're dealing with trees,
263

263

00:10:41.970  -->  00:10:45.290
it will visit each node in the tree.
264

264

00:10:45.290  -->  00:10:47.820
And so we'll do that in the next video.
265

265

00:10:47.820  -->  00:10:48.843
I'll see you there.
