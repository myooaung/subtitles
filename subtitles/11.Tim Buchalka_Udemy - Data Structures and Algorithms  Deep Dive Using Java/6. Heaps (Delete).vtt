WEBVTT
1
1

00:00:00.143  -->  00:00:02.525
(futuristic electronic music)
2

2

00:00:02.525  -->  00:00:05.850
(keyboard keys clack)
3

3

00:00:05.850  -->  00:00:08.890
<v Sarah>All right, so let's implement delete for heaps.</v>
4

4

00:00:08.890  -->  00:00:13.680
We're gonna need a delete method and a fixHeapBelow method
5

5

00:00:13.680  -->  00:00:15.840
for when we look down the tree
6

6

00:00:15.840  -->  00:00:18.350
when we're doing our heapify process.
7

7

00:00:18.350  -->  00:00:21.950
We're also going to need methods for isEmpty
8

8

00:00:21.950  -->  00:00:25.610
and for getting the child indices
9

9

00:00:25.610  -->  00:00:27.210
for an element in the array.
10

10

00:00:27.210  -->  00:00:30.563
So let's add the isEmpty and getChild methods first.
11

11

00:00:31.410  -->  00:00:34.490
So I'm gonna say public boolean isEmpty,
12

12

00:00:36.960  -->  00:00:40.180
and basically, the heap is empty if the size equals zero,
13

13

00:00:40.180  -->  00:00:43.230
so we're just gonna return size equals zero,
14

14

00:00:43.230  -->  00:00:45.283
and that's our isEmpty method,
15

15

00:00:46.880  -->  00:00:49.930
and now, we want a method for getting the children
16

16

00:00:49.930  -->  00:00:53.730
of an element in the array, or a child anyway.
17

17

00:00:53.730  -->  00:00:56.100
We can only get the index for one child at a time,
18

18

00:00:56.100  -->  00:00:59.560
so we're gonna say public int getChild,
19

19

00:00:59.560  -->  00:01:03.060
and we want the index of the parent,
20

20

00:01:03.060  -->  00:01:06.260
so the element that we want to get a child for,
21

21

00:01:06.260  -->  00:01:07.340
and we also need to know
22

22

00:01:07.340  -->  00:01:09.490
whether we want to get the left or right child,
23

23

00:01:09.490  -->  00:01:12.210
so I'll say boolean left,
24

24

00:01:12.210  -->  00:01:14.540
and if left is true, we want the left child.
25

25

00:01:14.540  -->  00:01:16.850
If it's false, we want the right child.
26

26

00:01:16.850  -->  00:01:19.940
So all we're gonna do is return the result
27

27

00:01:19.940  -->  00:01:22.640
of the expressions we looked at in the slide.
28

28

00:01:22.640  -->  00:01:25.800
So we're gonna say return two times index,
29

29

00:01:25.800  -->  00:01:28.220
remember, it's two times i,
30

30

00:01:28.220  -->  00:01:30.530
and then, if we want the left child, we add one,
31

31

00:01:30.530  -->  00:01:32.700
and if we want the right child, we add two.
32

32

00:01:32.700  -->  00:01:36.400
So we're gonna say plus left,
33

33

00:01:36.400  -->  00:01:38.830
if it's a left child, we want one.
34

34

00:01:38.830  -->  00:01:40.313
Otherwise, we want two,
35

35

00:01:41.200  -->  00:01:43.290
and so, that's our getChild,
36

36

00:01:43.290  -->  00:01:46.660
so we want two times index plus one for the left child
37

37

00:01:46.660  -->  00:01:49.870
or two times index plus two for the right child.
38

38

00:01:49.870  -->  00:01:53.543
So now that we have those, let's write our delete method.
39

39

00:01:54.760  -->  00:01:59.090
I'll put it right here, so I'll say public int delete.
40

40

00:01:59.090  -->  00:02:02.910
We're gonna return the value that we deleted,
41

41

00:02:02.910  -->  00:02:04.810
and we're gonna want an integer,
42

42

00:02:04.810  -->  00:02:08.040
and we're gonna take the index, not the value.
43

43

00:02:08.040  -->  00:02:09.910
Now, why are we taking the index?
44

44

00:02:09.910  -->  00:02:11.920
Well, if we take the value,
45

45

00:02:11.920  -->  00:02:13.570
then we're gonna have to search the heap
46

46

00:02:13.570  -->  00:02:15.750
for the index of the value,
47

47

00:02:15.750  -->  00:02:16.880
and we can do that, of course,
48

48

00:02:16.880  -->  00:02:18.570
but we'd have to use a linear search.
49

49

00:02:18.570  -->  00:02:20.070
We can't use a binary search
50

50

00:02:20.070  -->  00:02:23.410
because you can only do a binary search on a sorted array,
51

51

00:02:23.410  -->  00:02:24.720
and we can't sort the array
52

52

00:02:24.720  -->  00:02:27.500
'cause that would obviously blow away our heap structure.
53

53

00:02:27.500  -->  00:02:29.180
I could accept a value here,
54

54

00:02:29.180  -->  00:02:31.870
and then, the first thing we do in the method is
55

55

00:02:31.870  -->  00:02:35.410
a linear search, but instead, I'm just gonna take the index.
56

56

00:02:35.410  -->  00:02:38.800
One thing to keep in mind is when you're working with heaps,
57

57

00:02:38.800  -->  00:02:42.340
you pretty much never are going to want to just
58

58

00:02:42.340  -->  00:02:44.710
take some random value off the heap.
59

59

00:02:44.710  -->  00:02:47.410
You always wanna take the root off the heap,
60

60

00:02:47.410  -->  00:02:49.060
and so, you just have a delete method
61

61

00:02:49.060  -->  00:02:50.070
that doesn't take anything
62

62

00:02:50.070  -->  00:02:53.050
because it's understood that you want the root,
63

63

00:02:53.050  -->  00:02:56.840
but some implementations will support deleting
64

64

00:02:56.840  -->  00:02:59.480
or removing any element in the heap,
65

65

00:02:59.480  -->  00:03:01.500
and so, that's what we're gonna do here,
66

66

00:03:01.500  -->  00:03:03.830
but when we're writing the main method code,
67

67

00:03:03.830  -->  00:03:06.210
we'll have to keep in mind that we have to pass the index,
68

68

00:03:06.210  -->  00:03:07.100
not the value.
69

69

00:03:07.100  -->  00:03:08.530
Okay, so the first thing we're gonna do
70

70

00:03:08.530  -->  00:03:12.400
is check whether the heap is empty so we'll say if isEmpty,
71

71

00:03:13.530  -->  00:03:14.440
and if that's the case,
72

72

00:03:14.440  -->  00:03:16.210
we're gonna do the same thing we did in insert
73

73

00:03:16.210  -->  00:03:17.450
and just throw an exception,
74

74

00:03:17.450  -->  00:03:21.391
so we'll throw a new IndexOutOfBoundsException,
75

75

00:03:21.391  -->  00:03:22.943
and we'll say Heap is empty,
76

76

00:03:24.000  -->  00:03:24.833
and that's it,
77

77

00:03:24.833  -->  00:03:27.590
so we're not gonna worry about doing anything else.
78

78

00:03:27.590  -->  00:03:29.110
If that's not the case,
79

79

00:03:29.110  -->  00:03:32.130
the first thing we wanna do is get the parent,
80

80

00:03:32.130  -->  00:03:34.000
so int parent equals
81

81

00:03:34.000  -->  00:03:36.940
getParent index,
82

82

00:03:36.940  -->  00:03:40.060
and so, this will be the parent of the deleted item,
83

83

00:03:40.060  -->  00:03:42.300
and then, we wanna save the deleted value off
84

84

00:03:42.300  -->  00:03:44.240
'cause we're gonna return that at the end of the method,
85

85

00:03:44.240  -->  00:03:48.533
so int deletedValue equals heap index,
86

86

00:03:49.620  -->  00:03:52.100
and so, we've got the parent of the value we wanna delete.
87

87

00:03:52.100  -->  00:03:55.780
We've saved off the deleted value, and now,
88

88

00:03:55.780  -->  00:03:59.750
we're going to replace heap index with
89

89

00:03:59.750  -->  00:04:03.010
the value that's at the right-most position in the array,
90

90

00:04:03.010  -->  00:04:06.250
and the index for that will be size minus one
91

91

00:04:06.250  -->  00:04:08.960
because remember that size always contains
92

92

00:04:08.960  -->  00:04:11.140
the next available position,
93

93

00:04:11.140  -->  00:04:13.410
and so, we're gonna say heap index
94

94

00:04:14.350  -->  00:04:15.660
equals heap
95

95

00:04:16.940  -->  00:04:18.563
size minus one,
96

96

00:04:21.210  -->  00:04:23.360
and so, that's doing the replacement step.
97

97

00:04:23.360  -->  00:04:25.240
In the slides, we took 67
98

98

00:04:25.240  -->  00:04:27.160
and used that as the replacement value.
99

99

00:04:27.160  -->  00:04:28.410
That's what we're doing here.
100

100

00:04:28.410  -->  00:04:31.610
So the right-most node in the heap,
101

101

00:04:31.610  -->  00:04:33.030
right-most value in the heap,
102

102

00:04:33.030  -->  00:04:36.890
will now replace whatever was at the index.
103

103

00:04:36.890  -->  00:04:40.500
Okay, so at this point, we've done the replacement value,
104

104

00:04:40.500  -->  00:04:43.380
and now, we're gonna wanna look up or down the heap,
105

105

00:04:43.380  -->  00:04:45.590
depending on what the situation is.
106

106

00:04:45.590  -->  00:04:50.260
If the value at heap index is now greater than its parent,
107

107

00:04:50.260  -->  00:04:52.990
we need to fix the heap above.
108

108

00:04:52.990  -->  00:04:57.110
If the value at heap index is less than its parent,
109

109

00:04:57.110  -->  00:04:59.950
then we need to look at the heap below
110

110

00:04:59.950  -->  00:05:02.420
because it's possible that it's also less than
111

111

00:05:02.420  -->  00:05:03.730
one of its children,
112

112

00:05:03.730  -->  00:05:07.060
and so, let's write the fixHeapBelow method
113

113

00:05:07.060  -->  00:05:08.770
before we continue here,
114

114

00:05:08.770  -->  00:05:10.260
and I'll put it below here,
115

115

00:05:10.260  -->  00:05:13.660
and I'll say private void
116

116

00:05:14.591  -->  00:05:16.277
fixHeapBelow,
117

117

00:05:16.277  -->  00:05:20.210
and we're gonna take the index of the start position,
118

118

00:05:20.210  -->  00:05:23.440
and that will be the index of the item that we deleted,
119

119

00:05:23.440  -->  00:05:25.740
so where we put the replacement value,
120

120

00:05:25.740  -->  00:05:29.880
and then, we're gonna accept this lastHeapIndex parameter.
121

121

00:05:29.880  -->  00:05:32.470
Now we don't need this for delete,
122

122

00:05:32.470  -->  00:05:35.550
but when we implement the heapsort algorithm,
123

123

00:05:35.550  -->  00:05:36.960
we're going to need this,
124

124

00:05:36.960  -->  00:05:41.540
and this basically says this is the last index of the heap.
125

125

00:05:41.540  -->  00:05:44.090
So in our array, right now,
126

126

00:05:44.090  -->  00:05:48.430
the heap goes from position zero to position size minus one,
127

127

00:05:48.430  -->  00:05:52.100
and so, we're gonna pass size minus one as lastHeapIndex.
128

128

00:05:52.100  -->  00:05:55.890
So this essentially tells us the last position
129

129

00:05:55.890  -->  00:05:57.650
of the heap in the array.
130

130

00:05:57.650  -->  00:06:00.070
For delete, we don't really need it,
131

131

00:06:00.070  -->  00:06:02.080
but we're gonna use this method for heapsort.
132

132

00:06:02.080  -->  00:06:06.373
All right, so I'm gonna declare a field called childToSwap,
133

133

00:06:07.570  -->  00:06:10.590
and now, what we're going to do is a swapping phase.
134

134

00:06:10.590  -->  00:06:14.060
So we're going to compare the node at index
135

135

00:06:14.060  -->  00:06:15.450
with its two children,
136

136

00:06:15.450  -->  00:06:18.790
and we're going to swap it, if necessary.
137

137

00:06:18.790  -->  00:06:22.710
If the value at heap index is less than
138

138

00:06:22.710  -->  00:06:23.800
either of its children,
139

139

00:06:23.800  -->  00:06:26.300
we're going to swap it with the child
140

140

00:06:26.300  -->  00:06:29.630
that has the greatest value as we saw on the slides.
141

141

00:06:29.630  -->  00:06:31.030
So we're gonna say while
142

142

00:06:33.290  -->  00:06:36.990
index is less than or equal to lastHeapIndex,
143

143

00:06:39.870  -->  00:06:42.090
and so, we're going to, we're fixing below,
144

144

00:06:42.090  -->  00:06:43.650
and so, we're starting at index,
145

145

00:06:43.650  -->  00:06:45.720
and we're going to the end of the heap.
146

146

00:06:45.720  -->  00:06:49.750
We're not looking at indices that are lower than index
147

147

00:06:49.750  -->  00:06:52.380
because those are nodes that are sitting above index,
148

148

00:06:52.380  -->  00:06:54.100
and this is fixHeapBelow,
149

149

00:06:54.100  -->  00:06:57.781
and so, we're gonna say int leftChild equals
150

150

00:06:57.781  -->  00:07:00.410
getChild index, true.
151

151

00:07:00.410  -->  00:07:03.580
We pass true when we want the index of the left child,
152

152

00:07:03.580  -->  00:07:08.580
and int rightChild equals getChild index, false,
153

153

00:07:09.440  -->  00:07:12.120
and so, this gets us the left child
154

154

00:07:12.120  -->  00:07:15.220
of the node at heap index,
155

155

00:07:15.220  -->  00:07:17.850
and the right child of the node at heap index,
156

156

00:07:17.850  -->  00:07:19.120
and now, we're going to make sure
157

157

00:07:19.120  -->  00:07:21.190
that these indices are valid
158

158

00:07:21.190  -->  00:07:25.400
because remember, if the node doesn't have a right child,
159

159

00:07:25.400  -->  00:07:26.870
or doesn't have a left child,
160

160

00:07:26.870  -->  00:07:29.710
then these calculations will actually give us indices
161

161

00:07:29.710  -->  00:07:31.380
that are size n beyond.
162

162

00:07:31.380  -->  00:07:34.100
So they'll return indices that aren't part of the heap,
163

163

00:07:34.100  -->  00:07:37.630
and we know the last valid heap index is lastHeapIndex.
164

164

00:07:37.630  -->  00:07:41.440
For this, we could just use size minus one as I said,
165

165

00:07:41.440  -->  00:07:44.380
but you'll see, when we do the heapsort,
166

166

00:07:44.380  -->  00:07:46.240
that we actually need this parameter.
167

167

00:07:46.240  -->  00:07:50.660
So we're gonna say if leftChild is less than or equal
168

168

00:07:50.660  -->  00:07:52.170
to lastHeapIndex,
169

169

00:07:52.170  -->  00:07:56.130
that means that this node has a left child,
170

170

00:07:56.130  -->  00:07:59.240
and so, now we're gonna test whether it has a right child,
171

171

00:07:59.240  -->  00:08:01.090
so we're gonna say if
172

172

00:08:02.132  -->  00:08:06.252
rightChild is greater than the lastHeapIndex,
173

173

00:08:06.252  -->  00:08:08.340
then it does not have a right child.
174

174

00:08:08.340  -->  00:08:11.220
So that's essentially saying that we calculated an index
175

175

00:08:11.220  -->  00:08:14.600
for the right child that's outside the bounds of the heap,
176

176

00:08:14.600  -->  00:08:15.570
and so in that case,
177

177

00:08:15.570  -->  00:08:17.910
the child that we wanna swap is the left child
178

178

00:08:17.910  -->  00:08:20.440
'cause this, if this condition passes,
179

179

00:08:20.440  -->  00:08:22.170
it has a left child.
180

180

00:08:22.170  -->  00:08:25.670
If this condition fails, it doesn't have a right child,
181

181

00:08:25.670  -->  00:08:28.370
and so, in this case, we have a left child
182

182

00:08:28.370  -->  00:08:29.430
but no right child,
183

183

00:08:29.430  -->  00:08:31.650
so the childToSwap will equal the leftChild
184

184

00:08:31.650  -->  00:08:32.950
'cause that's all there is.
185

185

00:08:32.950  -->  00:08:34.740
Now if this condition fails,
186

186

00:08:34.740  -->  00:08:37.080
it means that we also have a right child,
187

187

00:08:37.080  -->  00:08:40.180
and so, in that case, we need to swap it
188

188

00:08:40.180  -->  00:08:42.800
with the child that has the largest value,
189

189

00:08:42.800  -->  00:08:45.460
so we're gonna say childToSwap equals
190

190

00:08:46.380  -->  00:08:48.643
and we're gonna say heap leftChild
191

191

00:08:50.400  -->  00:08:51.780
is greater
192

192

00:08:51.780  -->  00:08:53.490
than heap rightChild,
193

193

00:08:54.960  -->  00:08:59.130
then we wanna swap it with the leftChild.
194

194

00:08:59.130  -->  00:09:02.483
Otherwise, we wanna swap with the rightChild,
195

195

00:09:02.483  -->  00:09:06.227
and so, here, we're assigning childToSwap
196

196

00:09:06.227  -->  00:09:09.890
with the index of the child that has the greatest value.
197

197

00:09:09.890  -->  00:09:12.720
So if heap leftChild is greater than heap rightChild,
198

198

00:09:12.720  -->  00:09:14.510
we're gonna assign the index of the leftChild
199

199

00:09:14.510  -->  00:09:16.320
to the childToSwap.
200

200

00:09:16.320  -->  00:09:18.380
Otherwise, it's gonna get the rightChild.
201

201

00:09:19.240  -->  00:09:21.050
So we've assigned childToSwap,
202

202

00:09:21.050  -->  00:09:23.820
but that doesn't mean we actually wanna swap the child
203

203

00:09:23.820  -->  00:09:27.980
because we now need to compare the value at heap index
204

204

00:09:27.980  -->  00:09:30.050
with the childToSwap value.
205

205

00:09:30.050  -->  00:09:33.400
If the value at heap index is greater
206

206

00:09:33.400  -->  00:09:35.690
than the childToSwap value, then we're done.
207

207

00:09:35.690  -->  00:09:37.820
I mean, the parent is greater than the child.
208

208

00:09:37.820  -->  00:09:41.610
We only need to swap if the value at index
209

209

00:09:41.610  -->  00:09:43.540
is less than the child,
210

210

00:09:43.540  -->  00:09:46.610
so we're gonna say if heap index
211

211

00:09:49.030  -->  00:09:50.819
is less than heap
212

212

00:09:50.819  -->  00:09:55.290
of the child that we're gonna potentially swap with,
213

213

00:09:55.290  -->  00:09:56.550
then we do the swap.
214

214

00:09:56.550  -->  00:09:58.970
So we say int tmp equals,
215

215

00:09:58.970  -->  00:10:00.860
and I see the compiler's complaining here
216

216

00:10:00.860  -->  00:10:02.607
that childToSwap might not have been initialised,
217

217

00:10:02.607  -->  00:10:05.450
and that's because, I shouldn't have put this brace here.
218

218

00:10:05.450  -->  00:10:07.890
This is still supposed to be taking place within here
219

219

00:10:07.890  -->  00:10:11.050
because if the leftChild is greater than lastHeapIndex,
220

220

00:10:11.050  -->  00:10:13.970
we're dealing with a value that doesn't have any children,
221

221

00:10:13.970  -->  00:10:15.190
meaning there's nothing to swap.
222

222

00:10:15.190  -->  00:10:17.200
So let me
223

223

00:10:17.200  -->  00:10:19.283
reformat the code to get that in.
224

224

00:10:20.950  -->  00:10:22.410
Okay, so let's continue,
225

225

00:10:22.410  -->  00:10:24.430
so compiler's not complaining anymore.
226

226

00:10:24.430  -->  00:10:28.420
So if the value, the replacement value,
227

227

00:10:28.420  -->  00:10:31.180
is less than its largest child,
228

228

00:10:31.180  -->  00:10:32.990
we wanna swap it with the largest child,
229

229

00:10:32.990  -->  00:10:36.150
so we're gonna say int tmp equals
230

230

00:10:36.150  -->  00:10:37.503
heap index,
231

231

00:10:40.630  -->  00:10:42.950
and then, we're gonna say heap index
232

232

00:10:44.400  -->  00:10:45.600
equals heap
233

233

00:10:46.733  -->  00:10:47.763
childToSwap,
234

234

00:10:47.763  -->  00:10:51.807
and the final step, of course, is heap childToSwap
235

235

00:10:53.650  -->  00:10:55.830
equals tmp,
236

236

00:10:55.830  -->  00:10:59.250
and so, we've now swapped the replacement value
237

237

00:10:59.250  -->  00:11:00.400
with its largest child.
238

238

00:11:00.400  -->  00:11:01.730
Now, if the replacement value
239

239

00:11:01.730  -->  00:11:04.820
is greater than or equal to the child, our heap is good,
240

240

00:11:04.820  -->  00:11:07.020
so we've finished heapifying the heap,
241

241

00:11:07.020  -->  00:11:10.180
and so, in that case,
242

242

00:11:10.180  -->  00:11:13.000
we wanna break out of the loop because we're done,
243

243

00:11:13.000  -->  00:11:15.140
and then, we're gonna wanna rinse and repeat.
244

244

00:11:15.140  -->  00:11:17.800
So now we wanna compare the replacement value
245

245

00:11:17.800  -->  00:11:19.050
with its new children,
246

246

00:11:19.050  -->  00:11:20.920
and the replacement value is now sitting
247

247

00:11:20.920  -->  00:11:23.660
at index childToSwap because we just swapped it,
248

248

00:11:23.660  -->  00:11:24.940
and we know we just swapped it
249

249

00:11:24.940  -->  00:11:27.020
because if we haven't done any swapping,
250

250

00:11:27.020  -->  00:11:28.600
we're gonna break out of the loop,
251

251

00:11:28.600  -->  00:11:30.490
and so, the last thing we're gonna do in the loop
252

252

00:11:30.490  -->  00:11:33.233
is say index equals childToSwap,
253

253

00:11:34.350  -->  00:11:36.420
and now, we wanna end the loop,
254

254

00:11:36.420  -->  00:11:38.380
and so, in the loop, what we're doing,
255

255

00:11:38.380  -->  00:11:41.600
we're getting the two children of the element
256

256

00:11:41.600  -->  00:11:42.950
at position index,
257

257

00:11:42.950  -->  00:11:44.580
and when we first enter the loop,
258

258

00:11:44.580  -->  00:11:46.580
that will be the index of
259

259

00:11:46.580  -->  00:11:48.180
where we've put the replacement value,
260

260

00:11:48.180  -->  00:11:51.580
so the index of where the value we deleted was,
261

261

00:11:51.580  -->  00:11:54.430
and then, if, just do that,
262

262

00:11:54.430  -->  00:11:56.860
and then, if the element in that position
263

263

00:11:56.860  -->  00:11:59.400
doesn't have any children,
264

264

00:11:59.400  -->  00:12:02.260
in fact, down here, on this if,
265

265

00:12:02.260  -->  00:12:03.993
we're gonna say else,
266

266

00:12:05.910  -->  00:12:06.743
break,
267

267

00:12:08.120  -->  00:12:10.670
and that is actually the entire method,
268

268

00:12:10.670  -->  00:12:14.960
and so, if the position that we're examining has children,
269

269

00:12:14.960  -->  00:12:16.760
we may have some heapifying to do.
270

270

00:12:16.760  -->  00:12:18.490
If it doesn't have children, we're done.
271

271

00:12:18.490  -->  00:12:19.850
I mean, there's nothing underneath it,
272

272

00:12:19.850  -->  00:12:23.490
so it's not possible for it to be less than its children.
273

273

00:12:23.490  -->  00:12:25.040
It doesn't have any children,
274

274

00:12:25.040  -->  00:12:27.730
and so, as long as the index we're looking at
275

275

00:12:27.730  -->  00:12:29.030
is part of the heap,
276

276

00:12:29.030  -->  00:12:30.750
we get the two children indices,
277

277

00:12:30.750  -->  00:12:32.490
and then, we check to see if those indices
278

278

00:12:32.490  -->  00:12:33.720
are actually part of the heap.
279

279

00:12:33.720  -->  00:12:35.300
If they're not, then we're done
280

280

00:12:35.300  -->  00:12:37.210
because we're actually dealing with a leaf.
281

281

00:12:37.210  -->  00:12:40.360
If they are, or if at least the left child is,
282

282

00:12:40.360  -->  00:12:41.800
we check for a right child.
283

283

00:12:41.800  -->  00:12:45.180
If we have a left child but no right child,
284

284

00:12:45.180  -->  00:12:46.400
then obviously by default,
285

285

00:12:46.400  -->  00:12:48.480
we're gonna swap with the left child.
286

286

00:12:48.480  -->  00:12:52.170
If this test passes, and if we have two children,
287

287

00:12:52.170  -->  00:12:55.320
then we're going to wanna swap with the larger of the two,
288

288

00:12:55.320  -->  00:12:57.370
and then, after we've decided which child
289

289

00:12:57.370  -->  00:12:58.760
we'd wanna swap with,
290

290

00:12:58.760  -->  00:13:01.500
we then compare the value at index
291

291

00:13:01.500  -->  00:13:03.270
with the child we'd swap with,
292

292

00:13:03.270  -->  00:13:05.310
and if the value is less than that child,
293

293

00:13:05.310  -->  00:13:06.700
we do have to swap them.
294

294

00:13:06.700  -->  00:13:08.590
If there's no swapping to be done,
295

295

00:13:08.590  -->  00:13:12.610
if the value at heap index is greater or equal to its child,
296

296

00:13:12.610  -->  00:13:13.443
we're done.
297

297

00:13:13.443  -->  00:13:16.650
The heap is once again satisfying the heap property,
298

298

00:13:16.650  -->  00:13:18.160
and so, we can break.
299

299

00:13:18.160  -->  00:13:20.110
Otherwise, once we've done the swapping,
300

300

00:13:20.110  -->  00:13:22.700
we now have to compare the replacement value
301

301

00:13:22.700  -->  00:13:23.940
with its new children.
302

302

00:13:23.940  -->  00:13:25.350
We've put the replacement value
303

303

00:13:25.350  -->  00:13:27.300
into childToSwap at this point.
304

304

00:13:27.300  -->  00:13:28.580
That's its new index,
305

305

00:13:28.580  -->  00:13:30.530
and so we're gonna update index to that
306

306

00:13:30.530  -->  00:13:31.960
and loop back around,
307

307

00:13:31.960  -->  00:13:33.270
and we're gonna keep doing that
308

308

00:13:33.270  -->  00:13:34.650
until we break out of the loop.
309

309

00:13:34.650  -->  00:13:36.960
Now, if you're wondering here
310

310

00:13:36.960  -->  00:13:39.870
why we're checking for a left child
311

311

00:13:39.870  -->  00:13:41.620
and then for a right child,
312

312

00:13:41.620  -->  00:13:43.620
then you might be thinking, well wait a minute.
313

313

00:13:43.620  -->  00:13:46.500
What if the node has a right child but not a left child?
314

314

00:13:46.500  -->  00:13:47.650
Well, that's not possible
315

315

00:13:47.650  -->  00:13:50.010
because a heap has to be a complete tree,
316

316

00:13:50.010  -->  00:13:52.380
and so, the only possibilities are
317

317

00:13:52.380  -->  00:13:55.650
the node has two children or the node has a left child.
318

318

00:13:55.650  -->  00:14:00.060
In a heap, we can't have a node that has no left child
319

319

00:14:00.060  -->  00:14:01.200
but a right child,
320

320

00:14:01.200  -->  00:14:03.960
because that would mean that we don't have a complete tree,
321

321

00:14:03.960  -->  00:14:05.640
and that would mean we don't have a heap,
322

322

00:14:05.640  -->  00:14:07.630
and so, we only have to worry about
323

323

00:14:07.630  -->  00:14:10.410
we have a left child and a right child,
324

324

00:14:10.410  -->  00:14:12.150
which is this case here,
325

325

00:14:12.150  -->  00:14:15.030
or we have a left child but no right child,
326

326

00:14:15.030  -->  00:14:16.720
in which case, by default,
327

327

00:14:16.720  -->  00:14:18.540
we're gonna swap with the left child.
328

328

00:14:18.540  -->  00:14:21.070
Okay, and that's it for fixHeapBelow.
329

329

00:14:21.070  -->  00:14:23.190
So now that we have our fixHeapBelow method,
330

330

00:14:23.190  -->  00:14:25.230
let's finish our delete method,
331

331

00:14:25.230  -->  00:14:27.000
and so, here,
332

332

00:14:27.000  -->  00:14:30.580
we're gonna say if index equals zero,
333

333

00:14:30.580  -->  00:14:33.580
meaning we're dealing with the root, or
334

334

00:14:33.580  -->  00:14:35.000
heap index
335

335

00:14:35.920  -->  00:14:37.090
is less than
336

336

00:14:38.090  -->  00:14:39.503
heap parent,
337

337

00:14:41.480  -->  00:14:44.140
then we wanna fix the heap below,
338

338

00:14:44.140  -->  00:14:46.710
Below, and we're gonna pass index,
339

339

00:14:46.710  -->  00:14:48.773
and we're gonna pass size minus one.
340

340

00:14:49.660  -->  00:14:52.550
So what we're saying here is if we're dealing with the root,
341

341

00:14:52.550  -->  00:14:55.550
so if we, if the node we deleted was the root,
342

342

00:14:55.550  -->  00:14:58.300
and so, the replacement value has gone into the root,
343

343

00:14:58.300  -->  00:15:00.650
then obviously, we can only look down the tree,
344

344

00:15:00.650  -->  00:15:04.320
and if the value, the replacement value,
345

345

00:15:04.320  -->  00:15:05.960
is less than its parent,
346

346

00:15:05.960  -->  00:15:08.220
that means we don't have to look up the tree
347

347

00:15:08.220  -->  00:15:10.520
because we know this guy is then gonna be
348

348

00:15:10.520  -->  00:15:12.460
less than everything above the tree,
349

349

00:15:12.460  -->  00:15:13.680
and so, in this case,
350

350

00:15:13.680  -->  00:15:16.930
we need to look at the tree below heap index
351

351

00:15:16.930  -->  00:15:18.550
and potentially fix that,
352

352

00:15:18.550  -->  00:15:21.280
and so, if it's the root, we can only look below,
353

353

00:15:21.280  -->  00:15:24.210
and if the replacement value is less than its parent,
354

354

00:15:24.210  -->  00:15:27.380
then we know above the replacement value is sound.
355

355

00:15:27.380  -->  00:15:28.610
It meets the heap property,
356

356

00:15:28.610  -->  00:15:29.980
and so, we're gonna go below.
357

357

00:15:29.980  -->  00:15:31.993
Otherwise, we're gonna look above.
358

358

00:15:32.950  -->  00:15:35.750
So we're gonna fixHeapAbove,
359

359

00:15:35.750  -->  00:15:38.113
and in this case, we just need the index.
360

360

00:15:39.430  -->  00:15:41.890
Once we've done that, so we've fixed our heap,
361

361

00:15:41.890  -->  00:15:44.320
we need to decrement the size,
362

362

00:15:44.320  -->  00:15:45.153
and then, of course,
363

363

00:15:45.153  -->  00:15:47.930
we're gonna return our deletedValue,
364

364

00:15:47.930  -->  00:15:48.910
and that's it.
365

365

00:15:48.910  -->  00:15:49.850
So we come in.
366

366

00:15:49.850  -->  00:15:52.490
If the heap is empty, we throw an exception.
367

367

00:15:52.490  -->  00:15:54.010
Otherwise, we get the parent
368

368

00:15:54.010  -->  00:15:56.500
and we store off the deleted value.
369

369

00:15:56.500  -->  00:15:58.670
We get the replacement value
370

370

00:15:58.670  -->  00:16:02.040
and put it where the deleted value used to be.
371

371

00:16:02.040  -->  00:16:03.690
We then fix our heap.
372

372

00:16:03.690  -->  00:16:06.590
We decrement the size 'cause we've deleted one node,
373

373

00:16:06.590  -->  00:16:08.780
and then, we return the deleted value.
374

374

00:16:08.780  -->  00:16:10.130
Okay, so while I'm in here,
375

375

00:16:10.130  -->  00:16:11.830
I'm gonna add a printHeap method
376

376

00:16:11.830  -->  00:16:13.810
so we can actually look at what's going on
377

377

00:16:13.810  -->  00:16:16.030
after we've performed some operations.
378

378

00:16:16.030  -->  00:16:17.090
I'll add it here.
379

379

00:16:17.090  -->  00:16:20.253
So I'll say public void printHeap,
380

380

00:16:25.240  -->  00:16:27.320
and this'll be straightforward 'cause we have an array,
381

381

00:16:27.320  -->  00:16:29.603
so I'll say for int i equals zero,
382

382

00:16:30.800  -->  00:16:33.893
i less than size, i plus plus,
383

383

00:16:35.070  -->  00:16:38.633
and we'll say System.out.println heap i.
384

384

00:16:40.650  -->  00:16:42.200
Actually, I'm gonna make this print,
385

385

00:16:42.200  -->  00:16:44.650
so I'll all come out on one line,
386

386

00:16:44.650  -->  00:16:47.093
and then I'll say System.out.print.
387

387

00:16:48.540  -->  00:16:50.200
Put a comma in there, and then,
388

388

00:16:50.200  -->  00:16:51.600
when we finish printing our heap,
389

389

00:16:51.600  -->  00:16:54.720
I'll have a System.out.println
390

390

00:16:54.720  -->  00:16:56.060
to print a new line,
391

391

00:16:56.060  -->  00:16:58.110
and that's it for our printHeap method.
392

392

00:16:58.110  -->  00:16:59.910
So now, let's go to our main method,
393

393

00:16:59.910  -->  00:17:01.900
and let's start working with our heap.
394

394

00:17:01.900  -->  00:17:05.590
So I'm gonna say Heap heap equals new heap,
395

395

00:17:05.590  -->  00:17:08.130
and I'll give it a capacity of 10,
396

396

00:17:08.130  -->  00:17:10.580
and now, we're gonna build the heap that we went over
397

397

00:17:10.580  -->  00:17:12.210
in the delete slides.
398

398

00:17:12.210  -->  00:17:16.450
So I'm gonna heap.insert, and we're gonna insert 80.
399

399

00:17:16.450  -->  00:17:18.073
That's gonna be the root.
400

400

00:17:19.320  -->  00:17:22.343
heap.insert 75,
401

401

00:17:23.220  -->  00:17:26.253
heap.insert 60,
402

402

00:17:27.690  -->  00:17:30.563
heap.insert 68,
403

403

00:17:31.850  -->  00:17:35.360
heap.insert 55,
404

404

00:17:35.360  -->  00:17:39.810
heap.insert 40,
405

405

00:17:39.810  -->  00:17:40.910
only two more to go,
406

406

00:17:40.910  -->  00:17:44.390
heap.insert 52,
407

407

00:17:44.390  -->  00:17:47.500
and heap.insert 67.
408

408

00:17:47.500  -->  00:17:49.979
So remember, when we're inserting,
409

409

00:17:49.979  -->  00:17:52.020
we start at the root and then we do the,
410

410

00:17:52.020  -->  00:17:54.727
go down to the next level and do the left and right child
411

411

00:17:54.727  -->  00:17:56.340
and then go down to the next level
412

412

00:17:56.340  -->  00:17:58.530
and fill in each level from left to right,
413

413

00:17:58.530  -->  00:18:01.530
and so, this will build the heap that we saw in the slides.
414

414

00:18:01.530  -->  00:18:03.380
All right, so let's print our heap,
415

415

00:18:03.380  -->  00:18:04.610
heap.printHeap,
416

416

00:18:04.610  -->  00:18:06.210
and before we start deleting nodes,
417

417

00:18:06.210  -->  00:18:09.060
let's run and make sure we're building our heap properly.
418

418

00:18:10.440  -->  00:18:12.430
All right, so we have 80, 75, 60,
419

419

00:18:13.382  -->  00:18:15.299
68, 55, 40, 52, and 67.
420

420

00:18:16.530  -->  00:18:19.360
So that's just the array printed out in order,
421

421

00:18:19.360  -->  00:18:21.383
and that's the order that we expect.
422

422

00:18:22.520  -->  00:18:25.150
So now, let's delete some nodes.
423

423

00:18:25.150  -->  00:18:27.570
So let's say heap.delete,
424

424

00:18:27.570  -->  00:18:29.570
and remember, we wanna give the index,
425

425

00:18:29.570  -->  00:18:31.630
and so, let's give the index of 75
426

426

00:18:31.630  -->  00:18:32.970
'cause we went through that on the slides,
427

427

00:18:32.970  -->  00:18:34.653
so that's at index one,
428

428

00:18:35.980  -->  00:18:38.063
and then, we'll print the heap again,
429

429

00:18:41.530  -->  00:18:43.830
and we see that 75 is gone,
430

430

00:18:43.830  -->  00:18:47.000
and now, 68 is the left child of 80,
431

431

00:18:47.000  -->  00:18:48.277
and 60 is the right child,
432

432

00:18:48.277  -->  00:18:51.650
and 67 has been moved below 68
433

433

00:18:51.650  -->  00:18:54.230
'cause 67 would've been the replacement value
434

434

00:18:54.230  -->  00:18:55.430
and brought up here,
435

435

00:18:55.430  -->  00:18:57.230
and so, that's working fine.
436

436

00:18:57.230  -->  00:19:01.020
So let's replace 40, so I'll change this to five,
437

437

00:19:01.020  -->  00:19:02.563
and let's run now,
438

438

00:19:04.760  -->  00:19:07.100
and we'll see that 40 is gone,
439

439

00:19:07.100  -->  00:19:10.800
and we've got 80, 75, and 67,
440

440

00:19:10.800  -->  00:19:12.910
so 67 is the right child of 80,
441

441

00:19:12.910  -->  00:19:17.070
and then 68 and 55 are the children of 75,
442

442

00:19:17.070  -->  00:19:20.130
and 60 and 52 are the children of 67,
443

443

00:19:20.130  -->  00:19:22.100
and so, everything seems to be working fine.
444

444

00:19:22.100  -->  00:19:25.370
We could try deleting the root just for fun.
445

445

00:19:25.370  -->  00:19:26.523
Let's do that,
446

446

00:19:29.750  -->  00:19:31.310
and the root's gone,
447

447

00:19:31.310  -->  00:19:33.580
and so, 75 is now at the root.
448

448

00:19:33.580  -->  00:19:36.020
It's got children 68 and 60.
449

449

00:19:36.020  -->  00:19:39.807
68 has children 67 and 55,
450

450

00:19:39.807  -->  00:19:42.240
and 60 has children 40 and 52,
451

451

00:19:42.240  -->  00:19:43.860
and so, that's working fine,
452

452

00:19:43.860  -->  00:19:45.540
and so, that's it for delete.
453

453

00:19:45.540  -->  00:19:47.710
It's a matter of replacing the deleted value
454

454

00:19:47.710  -->  00:19:50.560
with the right-most value and then fixing the heap,
455

455

00:19:50.560  -->  00:19:52.960
either by looking up the heap or down the heap.
456

456

00:19:52.960  -->  00:19:55.520
All right, we haven't written one last method,
457

457

00:19:55.520  -->  00:19:57.270
and we'll do that in the next video.
458

458

00:19:57.270  -->  00:19:58.720
It's gonna be a very quick video
459

459

00:19:58.720  -->  00:20:01.610
because this will be getting the root node,
460

460

00:20:01.610  -->  00:20:04.140
and it's, that's a very simple operation,
461

461

00:20:04.140  -->  00:20:05.253
so I'll see you there.
