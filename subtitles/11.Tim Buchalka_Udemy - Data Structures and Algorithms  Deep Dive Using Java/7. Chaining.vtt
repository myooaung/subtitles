WEBVTT
1
1

00:00:00.228  -->  00:00:05.228
(electronic music)
(keyboard clacking)
2

2

00:00:05.820  -->  00:00:07.690
<v Sarah>So, over the last few videos,</v>
3

3

00:00:07.690  -->  00:00:10.770
we looked at a strategy for dealing with collisions
4

4

00:00:10.770  -->  00:00:12.550
called linear probing.
5

5

00:00:12.550  -->  00:00:15.010
In this video, we're going to look at the second strategy
6

6

00:00:15.010  -->  00:00:16.180
for dealing with collisions
7

7

00:00:16.180  -->  00:00:17.970
and it's called chaining
8

8

00:00:17.970  -->  00:00:20.510
and it's a lot simpler than linear probing.
9

9

00:00:20.510  -->  00:00:21.851
When we use chaining,
10

10

00:00:21.851  -->  00:00:25.510
instead of storing the value directly
11

11

00:00:25.510  -->  00:00:28.280
into the array, each array position
12

12

00:00:28.280  -->  00:00:30.490
contains a linked list.
13

13

00:00:30.490  -->  00:00:34.150
And so, for our example, instead of storing the employees
14

14

00:00:34.150  -->  00:00:37.060
or StoredEmployee instances,
15

15

00:00:37.060  -->  00:00:38.780
we would store a linked list
16

16

00:00:38.780  -->  00:00:41.850
and if we go to add an employee
17

17

00:00:41.850  -->  00:00:44.570
and the key that we use has a hashed value
18

18

00:00:44.570  -->  00:00:48.560
that collides with the hashed value for another key,
19

19

00:00:48.560  -->  00:00:51.010
well, that's okay, because at that position
20

20

00:00:51.010  -->  00:00:52.610
in the array, there's a linked list
21

21

00:00:52.610  -->  00:00:56.700
and linked lists don't have any boundaries.
22

22

00:00:56.700  -->  00:00:58.200
They're not bounded by size
23

23

00:00:58.200  -->  00:00:59.860
and so, we can just go ahead
24

24

00:00:59.860  -->  00:01:02.830
and add that second employee into the linked list
25

25

00:01:02.830  -->  00:01:04.330
at that array position.
26

26

00:01:04.330  -->  00:01:06.180
So, we never have the concept
27

27

00:01:06.180  -->  00:01:10.030
of oops, sorry, this array position is already filled
28

28

00:01:10.030  -->  00:01:14.240
and so, we don't have to worry about incrementing indices
29

29

00:01:14.240  -->  00:01:15.920
and all that stuff.
30

30

00:01:15.920  -->  00:01:19.140
Now, of course the drawback is there's a linked list
31

31

00:01:19.140  -->  00:01:20.110
at every position
32

32

00:01:20.110  -->  00:01:22.300
and so, when you go to retrieve,
33

33

00:01:22.300  -->  00:01:25.760
or delete an item, you have to search the linked list
34

34

00:01:25.760  -->  00:01:29.900
to find the item with the key you're interested in
35

35

00:01:29.900  -->  00:01:31.770
but if you have a good hashing function
36

36

00:01:31.770  -->  00:01:33.592
and if you have a good load factor,
37

37

00:01:33.592  -->  00:01:37.290
then these linked lists will typically be short.
38

38

00:01:37.290  -->  00:01:39.500
So, let's jump right into the implementation.
39

39

00:01:39.500  -->  00:01:41.180
I've created a new project,
40

40

00:01:41.180  -->  00:01:44.910
I've copied over the code from the last project,
41

41

00:01:44.910  -->  00:01:47.590
some of it, I don't have the last retrieve that we did.
42

42

00:01:47.590  -->  00:01:49.380
I've got our StoredEmployee
43

43

00:01:49.380  -->  00:01:51.840
because this will be what we store in the linked list
44

44

00:01:51.840  -->  00:01:54.290
because we are gonna have to search the linked list
45

45

00:01:54.290  -->  00:01:56.620
for the key that we're interested in.
46

46

00:01:56.620  -->  00:01:58.980
I have the usual employee class
47

47

00:01:58.980  -->  00:02:01.670
and I've created a class called ChainedHashtable
48

48

00:02:01.670  -->  00:02:03.930
and I've copied over our hashing function
49

49

00:02:03.930  -->  00:02:06.010
because we're gonna use the same hashing function.
50

50

00:02:06.010  -->  00:02:08.920
I mean, the hashing function still has to produce
51

51

00:02:08.920  -->  00:02:10.260
an array index.
52

52

00:02:10.260  -->  00:02:13.010
The only difference here is that a linked list
53

53

00:02:13.010  -->  00:02:15.640
will be at that array index.
54

54

00:02:15.640  -->  00:02:17.800
So, we're gonna need one field
55

55

00:02:17.800  -->  00:02:19.487
and that's our hashtable,
56

56

00:02:19.487  -->  00:02:22.690
so we're gonna say private LinkedList,
57

57

00:02:22.690  -->  00:02:25.690
we'll just use the LinkedList class in the JDK
58

58

00:02:25.690  -->  00:02:27.400
and it's gonna be a LinkedList of StoredEmployee
59

59

00:02:30.200  -->  00:02:33.210
and we want an array of LinkedList
60

60

00:02:33.210  -->  00:02:35.311
and we'll call it hashtable.
61

61

00:02:35.311  -->  00:02:36.144
And so, in our constructor,
62

62

00:02:36.144  -->  00:02:38.010
we need to create our hashtable,
63

63

00:02:38.010  -->  00:02:40.597
so I'll say public ChainedHashtable
64

64

00:02:42.560  -->  00:02:46.297
and we'll say hashtable equals new LinkedList
65

65

00:02:47.430  -->  00:02:50.133
and we want 10 elements.
66

66

00:02:51.210  -->  00:02:56.060
And then we have to initialise each array position
67

67

00:02:56.060  -->  00:02:58.110
with a linked list, an empty linked list.
68

68

00:02:58.110  -->  00:03:01.403
So, we're gonna say for int i equals zero,
69

69

00:03:02.580  -->  00:03:06.240
i less than hashtable.length,
70

70

00:03:06.240  -->  00:03:10.520
i++ and so, we're gonna say hashtable i
71

71

00:03:12.260  -->  00:03:15.850
equals new LinkedList StoredEmployee.
72

72

00:03:16.700  -->  00:03:17.690
And that's it.
73

73

00:03:17.690  -->  00:03:20.500
So, we create our hashtable,
74

74

00:03:20.500  -->  00:03:22.600
it's an array of length 10
75

75

00:03:22.600  -->  00:03:25.170
except instead of being a StoredEmployee array,
76

76

00:03:25.170  -->  00:03:27.280
it's gonna contain LinkedLink
77

77

00:03:27.280  -->  00:03:30.130
and then we have to of course create an instance
78

78

00:03:30.130  -->  00:03:32.220
of LinkedList in every position.
79

79

00:03:32.220  -->  00:03:35.610
We could do this on the add method.
80

80

00:03:35.610  -->  00:03:37.740
We could check and see is there a LinkedList there?
81

81

00:03:37.740  -->  00:03:40.100
But doing it up front just simplifies things.
82

82

00:03:40.100  -->  00:03:42.620
The other way we could potentially implement this
83

83

00:03:42.620  -->  00:03:45.730
and you might see this if you look at other implementations
84

84

00:03:45.730  -->  00:03:49.420
is that we create an object array
85

85

00:03:49.420  -->  00:03:53.800
and then we store either a StoredEmployee
86

86

00:03:53.800  -->  00:03:58.120
if there's only one item or once we get a collision,
87

87

00:03:58.120  -->  00:04:00.160
we then change that to a LinkedList
88

88

00:04:00.160  -->  00:04:02.610
but I think just starting out with LinkedLink
89

89

00:04:02.610  -->  00:04:04.080
is a lot simpler.
90

90

00:04:04.080  -->  00:04:06.763
So, let's go ahead and add the put method.
91

91

00:04:07.910  -->  00:04:10.520
And so, we'll say public void put
92

92

00:04:10.520  -->  00:04:13.660
and we need as usual the key value pair,
93

93

00:04:13.660  -->  00:04:17.620
so we'll say String key and Employee value,
94

94

00:04:17.620  -->  00:04:21.370
we'll just call it employee like we did in the other videos.
95

95

00:04:21.370  -->  00:04:23.260
And the first thing we're gonna do as usual
96

96

00:04:23.260  -->  00:04:25.450
is hash the key, so we'll say int hashedKey
97

97

00:04:26.320  -->  00:04:29.020
equals hashKey key
98

98

00:04:30.330  -->  00:04:33.240
and now all we have to do is add the employee
99

99

00:04:33.240  -->  00:04:36.780
to the LinkedList that's at the position hashedKey,
100

100

00:04:36.780  -->  00:04:40.949
so we'll say hashtable, hashedKey.add
101

101

00:04:40.949  -->  00:04:44.450
because there's a LinkedList at each index
102

102

00:04:44.450  -->  00:04:46.840
and we'll say new StoredEmployee
103

103

00:04:48.100  -->  00:04:51.730
and we'll pass the key and then the employee
104

104

00:04:51.730  -->  00:04:52.710
and that's it.
105

105

00:04:52.710  -->  00:04:54.180
So much simpler
106

106

00:04:54.180  -->  00:04:55.530
and it doesn't matter here
107

107

00:04:55.530  -->  00:04:57.770
whether we add employees to the beginning or the end
108

108

00:04:57.770  -->  00:04:59.760
of the list 'cause we have no idea
109

109

00:04:59.760  -->  00:05:01.460
in what order they're gonna be retrieved,
110

110

00:05:01.460  -->  00:05:04.190
so it'll be a six of one, half a dozen of the other type
111

111

00:05:04.190  -->  00:05:07.330
of thing and so, as you can see, it's much, much simpler.
112

112

00:05:07.330  -->  00:05:08.300
We don't have to worry
113

113

00:05:08.300  -->  00:05:10.810
about is the position already occupied
114

114

00:05:10.810  -->  00:05:14.110
and if it is, keep incrementing indices
115

115

00:05:14.110  -->  00:05:16.460
and keep a watch out for traversing
116

116

00:05:16.460  -->  00:05:18.500
the entire array et cetera.
117

117

00:05:18.500  -->  00:05:20.200
It's much, much simpler
118

118

00:05:20.200  -->  00:05:22.640
but it does require more memory
119

119

00:05:22.640  -->  00:05:25.400
because you have the next and previous fields.
120

120

00:05:25.400  -->  00:05:28.040
So, let's implement get now.
121

121

00:05:28.040  -->  00:05:30.640
And so, we'll say public Employee
122

122

00:05:30.640  -->  00:05:33.180
'cause we're gonna return the employee get
123

123

00:05:33.180  -->  00:05:34.680
and we need the key
124

124

00:05:35.580  -->  00:05:36.930
and we'll say int hashedKey
125

125

00:05:40.352  -->  00:05:42.269
equals hashKey, the key
126

126

00:05:44.500  -->  00:05:47.729
and now what we need to do is search the LinkedList
127

127

00:05:47.729  -->  00:05:51.199
at position hashedKey for the StoredEmployee
128

128

00:05:51.199  -->  00:05:53.432
that matches this key
129

129

00:05:53.432  -->  00:05:55.894
and so, we're gonna use a list iterator to do that.
130

130

00:05:55.894  -->  00:05:57.719
So, I'll say ListIterator
131

131

00:05:57.719  -->  00:06:00.991
and it's gonna be an iterator of StoredEmployee
132

132

00:06:00.991  -->  00:06:03.658
'cause that's what we have stored in our list.
133

133

00:06:03.658  -->  00:06:07.741
Iterator equals hashtable hashedKey.listIterator.
134

134

00:06:11.754  -->  00:06:13.100
And now we're gonna use this iterator
135

135

00:06:13.100  -->  00:06:15.549
to find the employee that has our key.
136

136

00:06:15.549  -->  00:06:18.632
So, we'll say StoredEmployee employee
137

137

00:06:20.624  -->  00:06:25.124
equals null and then we'll say while iterator.hasNext.
138

138

00:06:28.003  -->  00:06:31.670
We'll set the employee to the interator.next
139

139

00:06:35.330  -->  00:06:37.080
and then we'll say if
140

140

00:06:38.416  -->  00:06:39.999
employee.key.equals
141

141

00:06:43.588  -->  00:06:44.779
the key we're looking for,
142

142

00:06:44.779  -->  00:06:47.155
then we have found our employee
143

143

00:06:47.155  -->  00:06:51.155
and so, we're just gonna return emloyee.employee
144

144

00:06:52.407  -->  00:06:54.299
and we're done.
145

145

00:06:54.299  -->  00:06:56.472
Now, if we drop out of this loop,
146

146

00:06:56.472  -->  00:06:58.640
it means that we've iterated over the entire list
147

147

00:06:58.640  -->  00:07:01.730
and we have not found a StoredEmployee instance
148

148

00:07:01.730  -->  00:07:02.660
that matches the key
149

149

00:07:02.660  -->  00:07:05.050
and so, we're just gonna go ahead and return null
150

150

00:07:05.050  -->  00:07:07.030
and that's our get method.
151

151

00:07:07.030  -->  00:07:08.220
It's quite straightforward.
152

152

00:07:08.220  -->  00:07:11.610
A lot easier to write than using linear probing.
153

153

00:07:11.610  -->  00:07:14.020
So, finally, let's add our remove method.
154

154

00:07:14.020  -->  00:07:18.230
So, I'll say public Employee remove
155

155

00:07:18.230  -->  00:07:19.370
and we need the key
156

156

00:07:21.343  -->  00:07:22.570
and I'm gonna copy this code here
157

157

00:07:22.570  -->  00:07:24.293
because it's quite similar.
158

158

00:07:28.190  -->  00:07:30.370
So, we're gonna start out by getting the hashedKey.
159

159

00:07:30.370  -->  00:07:33.090
We're gonna get the iterator just like we did before,
160

160

00:07:33.090  -->  00:07:35.100
set a StoredEmployee to null
161

161

00:07:35.100  -->  00:07:38.070
and iterate over the employees
162

162

00:07:38.070  -->  00:07:42.603
but instead of returning here, we're just gonna break.
163

163

00:07:43.750  -->  00:07:45.510
And so, when we break out of the loop,
164

164

00:07:45.510  -->  00:07:46.880
there's two possibilities.
165

165

00:07:46.880  -->  00:07:49.870
We have completely traversed the list
166

166

00:07:49.870  -->  00:07:52.210
and we haven't found a StoredEmployee instance
167

167

00:07:52.210  -->  00:07:56.680
that matches or the StoredEmployee employee field
168

168

00:07:56.680  -->  00:07:59.170
now contains the employee we're interested in,
169

169

00:07:59.170  -->  00:08:03.100
so we'll say if employee equals null,
170

170

00:08:03.100  -->  00:08:05.670
this means that we've traversed the entire list
171

171

00:08:05.670  -->  00:08:07.880
and we didn't find the employee we're looking for,
172

172

00:08:07.880  -->  00:08:09.760
so we'll return null.
173

173

00:08:09.760  -->  00:08:12.730
Else we did find the employee we're looking for,
174

174

00:08:12.730  -->  00:08:14.620
so we wanna remove it from the list.
175

175

00:08:14.620  -->  00:08:19.620
So, we'll say hashtable, hashedKey.remove employee
176

176

00:08:22.930  -->  00:08:26.283
and we'll return the employee.employee.
177

177

00:08:28.280  -->  00:08:31.630
Remember that this employee local field
178

178

00:08:31.630  -->  00:08:33.120
is actually a stored employee
179

179

00:08:33.120  -->  00:08:34.870
and we don't need this return null.
180

180

00:08:37.430  -->  00:08:40.930
And that works and we could probably pull this out
181

181

00:08:40.930  -->  00:08:43.640
and refactor it so that this is in a separate method
182

182

00:08:43.640  -->  00:08:46.220
but we can improve this remove method
183

183

00:08:46.220  -->  00:08:47.710
because the way we're doing it now,
184

184

00:08:47.710  -->  00:08:50.640
we're actually gonna end up iterating over the list twice
185

185

00:08:50.640  -->  00:08:52.970
because we're iterating over it here
186

186

00:08:52.970  -->  00:08:54.380
to find the employee
187

187

00:08:54.380  -->  00:08:57.640
that has the key and then when we call the remove method
188

188

00:08:57.640  -->  00:08:59.010
with the object,
189

189

00:08:59.010  -->  00:09:01.530
the remove method in the LinkedList class
190

190

00:09:01.530  -->  00:09:03.470
is gonna have to iterate over the list again
191

191

00:09:03.470  -->  00:09:05.510
to find this object
192

192

00:09:05.510  -->  00:09:06.540
because remember, in a linked list,
193

193

00:09:06.540  -->  00:09:09.640
we've only got for the JDK linked list,
194

194

00:09:09.640  -->  00:09:11.960
we only have the head and the tail of the list
195

195

00:09:11.960  -->  00:09:13.950
and we're not asking to remove from the head
196

196

00:09:13.950  -->  00:09:16.750
or the tail, we're saying remove this random employee
197

197

00:09:16.750  -->  00:09:17.657
that you have in the list
198

198

00:09:17.657  -->  00:09:19.470
and the way that the list has to do that
199

199

00:09:19.470  -->  00:09:21.770
is to traverse the list.
200

200

00:09:21.770  -->  00:09:23.290
We already did that here.
201

201

00:09:23.290  -->  00:09:25.500
And so, we're gonna change this code
202

202

00:09:25.500  -->  00:09:27.880
to keep track of where we are in the list
203

203

00:09:27.880  -->  00:09:29.850
and then there's another form
204

204

00:09:29.850  -->  00:09:32.450
of the remove method where we can pass an index,
205

205

00:09:32.450  -->  00:09:36.380
so we can say delete employee five in the list
206

206

00:09:36.380  -->  00:09:40.200
and depending on how the list is implemented in the backend,
207

207

00:09:40.200  -->  00:09:41.600
that can be faster.
208

208

00:09:41.600  -->  00:09:43.570
It may still have to traverse the list
209

209

00:09:43.570  -->  00:09:45.044
but at least it's not gonna have to do
210

210

00:09:45.044  -->  00:09:46.840
all the comparisons again
211

211

00:09:46.840  -->  00:09:49.180
because with this one, it has to traverse the list
212

212

00:09:49.180  -->  00:09:50.830
and for every list element,
213

213

00:09:50.830  -->  00:09:53.740
it has to say is this employee I'm looking for?
214

214

00:09:53.740  -->  00:09:55.700
Is this the employee I'm looking for et cetera,
215

215

00:09:55.700  -->  00:09:57.890
whereas if we just say remove the guy,
216

216

00:09:57.890  -->  00:09:59.850
it's the fifth guy on the list,
217

217

00:09:59.850  -->  00:10:01.900
it may have to move to the fifth guy on the list
218

218

00:10:01.900  -->  00:10:03.300
but then it can just delete it
219

219

00:10:03.300  -->  00:10:05.640
and it doesn't have to keep comparing along the way,
220

220

00:10:05.640  -->  00:10:06.840
so it would be faster.
221

221

00:10:06.840  -->  00:10:10.860
So, up here I'm gonna say int index equals zero
222

222

00:10:10.860  -->  00:10:13.960
and then every time we pull something off the iterator,
223

223

00:10:13.960  -->  00:10:16.980
I'll increment that index
224

224

00:10:18.610  -->  00:10:20.760
and then here we'll say remove
225

225

00:10:20.760  -->  00:10:25.370
and we're going to pass the index instead.
226

226

00:10:25.370  -->  00:10:27.630
And so, that's just a little performance improvement
227

227

00:10:27.630  -->  00:10:29.690
and because we're doing that here,
228

228

00:10:29.690  -->  00:10:32.960
I won't pull out anything from here
229

229

00:10:32.960  -->  00:10:35.090
because we are needing to do something different
230

230

00:10:35.090  -->  00:10:36.300
in the remove.
231

231

00:10:36.300  -->  00:10:37.730
And that's it.
232

232

00:10:37.730  -->  00:10:38.920
That's our remove.
233

233

00:10:38.920  -->  00:10:41.680
Using LinkedList makes the implementation easier
234

234

00:10:41.680  -->  00:10:45.860
because there's always room at the hashed location
235

235

00:10:45.860  -->  00:10:48.290
but that doesn't mean that chaining is better
236

236

00:10:48.290  -->  00:10:49.290
than linear probing.
237

237

00:10:49.290  -->  00:10:52.340
In fact, on average, linear programming performs better
238

238

00:10:52.340  -->  00:10:53.710
than chaining does.
239

239

00:10:53.710  -->  00:10:55.370
It just means that the implementation
240

240

00:10:55.370  -->  00:10:56.593
is a little bit simpler.
241

241

00:10:57.480  -->  00:10:58.610
So, one final thing
242

242

00:10:58.610  -->  00:11:01.400
is to implement our printHashtable,
243

243

00:11:01.400  -->  00:11:03.350
so we'll say public void printHashtable
244

244

00:11:06.593  -->  00:11:07.860
and what we're gonna have to do here
245

245

00:11:07.860  -->  00:11:11.370
is traverse the linked lists at every position,
246

246

00:11:11.370  -->  00:11:15.300
so we're gonna say for int i equals zero,
247

247

00:11:15.300  -->  00:11:19.450
i less than hashtable.length i++
248

248

00:11:20.794  -->  00:11:23.961
and we'll say if hashtable i is empty,
249

249

00:11:26.130  -->  00:11:28.730
we don't wanna traverse an empty LinkedList,
250

250

00:11:28.730  -->  00:11:31.230
then we'll just System.out.print line
251

251

00:11:32.760  -->  00:11:33.820
position
252

252

00:11:35.590  -->  00:11:40.590
plus i plus colon space
253

253

00:11:42.640  -->  00:11:43.473
empty.
254

254

00:11:45.610  -->  00:11:47.890
Now if the LinkedList is not empty,
255

255

00:11:47.890  -->  00:11:49.700
then we need to traverse the list,
256

256

00:11:49.700  -->  00:11:51.980
so once again, we'll use a list iterator,
257

257

00:11:51.980  -->  00:11:54.383
so I'll start out by saying Position,
258

258

00:11:58.410  -->  00:12:01.563
basically this, let me just copy this, it'll be faster.
259

259

00:12:04.780  -->  00:12:06.963
Except I'll remove the empty at the end.
260

260

00:12:08.310  -->  00:12:10.030
And then we're gonna get a ListIterator
261

261

00:12:10.030  -->  00:12:13.010
like we did before, a ListIterator StoredEmployee iterator
262

262

00:12:19.800  -->  00:12:23.717
equals hashtable i.listIterator,
263

263

00:12:25.800  -->  00:12:30.800
and then while iterator.hasNext
264

264

00:12:32.100  -->  00:12:34.730
we want to print the employee field
265

265

00:12:34.730  -->  00:12:36.380
and this StoredEmployee.
266

266

00:12:36.380  -->  00:12:40.400
So, we'll say System.out.
267

267

00:12:40.400  -->  00:12:42.390
I'm going to change this up here to print,
268

268

00:12:42.390  -->  00:12:47.390
so I'm gonna say System.out.print iterator.next.employee.
269

269

00:12:51.770  -->  00:12:53.680
And then we'll print an arrow here.
270

270

00:12:53.680  -->  00:12:56.710
System.out.print.
271

271

00:12:56.710  -->  00:12:59.410
I'll make a single arrow even though we've learned
272

272

00:12:59.410  -->  00:13:03.290
that the JDK LinkedList is actually a doubly linked list
273

273

00:13:03.290  -->  00:13:05.000
and then when we drop out there,
274

274

00:13:05.000  -->  00:13:08.210
I'll do the System.out.print line
275

275

00:13:09.850  -->  00:13:12.330
and I'll say null because the end of each list
276

276

00:13:12.330  -->  00:13:14.150
will point to null and that's it
277

277

00:13:14.150  -->  00:13:16.310
for our printHashtable
278

278

00:13:16.310  -->  00:13:18.310
and that's it for our implementation.
279

279

00:13:18.310  -->  00:13:20.140
So, let's go back to our main method
280

280

00:13:20.140  -->  00:13:21.770
and now everything compiled,
281

281

00:13:21.770  -->  00:13:24.113
so I guess I never did need Bill.
282

282

00:13:25.030  -->  00:13:26.653
I'll remove him from this file.
283

283

00:13:27.970  -->  00:13:30.710
And so, we created a ChainedHashtable,
284

284

00:13:30.710  -->  00:13:33.590
we add four employees and we print the hashtable
285

285

00:13:33.590  -->  00:13:34.760
and then we get Smith
286

286

00:13:34.760  -->  00:13:36.050
and then we remove Doe
287

287

00:13:36.050  -->  00:13:38.140
and Jones and we print the hashtable again.
288

288

00:13:38.140  -->  00:13:39.790
So, let's do this step by step.
289

289

00:13:39.790  -->  00:13:41.190
So, I'll comment this out.
290

290

00:13:41.190  -->  00:13:42.053
Let's run.
291

291

00:13:45.700  -->  00:13:48.340
So, here's our hashtable.
292

292

00:13:48.340  -->  00:13:51.690
We'll see as usual the first three positions are empty,
293

293

00:13:51.690  -->  00:13:53.570
John Doe is in position three
294

294

00:13:53.570  -->  00:13:56.080
and this time, when we get a collision,
295

295

00:13:56.080  -->  00:13:59.450
we'll see that we have a LinkedList at position five.
296

296

00:13:59.450  -->  00:14:01.030
This is a LinkedList as well
297

297

00:14:01.030  -->  00:14:04.310
but we have a LinkedList with more than one employee on it,
298

298

00:14:04.310  -->  00:14:06.800
so at position five we have Jane
299

299

00:14:06.800  -->  00:14:08.360
and then we have Mary.
300

300

00:14:08.360  -->  00:14:10.540
So, when we were using linear probing,
301

301

00:14:10.540  -->  00:14:12.320
we kept looking for an empty spot
302

302

00:14:12.320  -->  00:14:14.237
and Mary got put into position seven
303

303

00:14:14.237  -->  00:14:18.300
but now there's always room at the hashed value
304

304

00:14:18.300  -->  00:14:21.440
for the key and so, we've added Mary into the list
305

305

00:14:21.440  -->  00:14:22.990
and we have two items at the list
306

306

00:14:22.990  -->  00:14:25.333
and Mike is at position six as usual.
307

307

00:14:28.450  -->  00:14:30.940
So, now let's try out our retrieval
308

308

00:14:30.940  -->  00:14:32.850
to make sure that works.
309

309

00:14:32.850  -->  00:14:34.010
So, we're gonna get Mary,
310

310

00:14:34.010  -->  00:14:36.460
so what's gonna happen is we're gonna come in
311

311

00:14:36.460  -->  00:14:38.100
and we're gonna search this LinkedList
312

312

00:14:38.100  -->  00:14:41.353
for an employee that was added with the key Smith.
313

313

00:14:45.040  -->  00:14:45.960
And here we go.
314

314

00:14:45.960  -->  00:14:47.380
We got Mary Smith
315

315

00:14:48.460  -->  00:14:51.940
and finally let's try to remove some items
316

316

00:14:53.240  -->  00:14:55.710
and I'll comment out this printHashtable
317

317

00:14:55.710  -->  00:14:57.433
so it's not getting in the way.
318

318

00:14:59.140  -->  00:15:00.310
And we're getting an exception,
319

319

00:15:00.310  -->  00:15:02.420
so we'll have to check why that's happening
320

320

00:15:02.420  -->  00:15:03.920
and it's happening in the remove,
321

321

00:15:03.920  -->  00:15:05.320
so let's go to the remove
322

322

00:15:05.320  -->  00:15:07.920
and it's happening here.
323

323

00:15:07.920  -->  00:15:10.570
What's happening here is we're getting an out of bounds
324

324

00:15:10.570  -->  00:15:11.560
and I can see why.
325

325

00:15:11.560  -->  00:15:13.960
It's because the first item on the list
326

326

00:15:13.960  -->  00:15:17.040
is at position zero, the second item is at position one,
327

327

00:15:17.040  -->  00:15:19.130
the third item is at position two et cetera.
328

328

00:15:19.130  -->  00:15:21.480
But in here, we're coming in
329

329

00:15:21.480  -->  00:15:24.470
and I've initialised index to zero
330

330

00:15:24.470  -->  00:15:26.520
and then we pull off the first item
331

331

00:15:26.520  -->  00:15:28.160
and we increment the index to one
332

332

00:15:28.160  -->  00:15:30.880
when really index should still be zero
333

333

00:15:30.880  -->  00:15:32.673
because we've only looked at one item
334

334

00:15:32.673  -->  00:15:34.615
and so, when we look at the first item,
335

335

00:15:34.615  -->  00:15:36.290
index should be zero.
336

336

00:15:36.290  -->  00:15:37.500
When we look at the second item,
337

337

00:15:37.500  -->  00:15:39.050
index should be one, et cetera,
338

338

00:15:39.050  -->  00:15:41.000
so I'm gonna change this to negative one
339

339

00:15:41.000  -->  00:15:43.300
so that when we come in here,
340

340

00:15:43.300  -->  00:15:45.700
we increment to zero
341

341

00:15:45.700  -->  00:15:48.740
and if we've looked at the entire array
342

342

00:15:48.740  -->  00:15:50.320
and we don't find anything,
343

343

00:15:50.320  -->  00:15:52.050
then the employee will be null,
344

344

00:15:52.050  -->  00:15:54.180
so we're not gonna try to remove anything.
345

345

00:15:54.180  -->  00:15:55.770
If the list is empty,
346

346

00:15:55.770  -->  00:15:57.160
employee will be null,
347

347

00:15:57.160  -->  00:15:59.090
so we're not gonna try to remove anything.
348

348

00:15:59.090  -->  00:16:00.870
And so, that should work okay.
349

349

00:16:00.870  -->  00:16:02.490
So, let me pull this down
350

350

00:16:02.490  -->  00:16:04.850
and let's try running again and cross our fingers.
351

351

00:16:04.850  -->  00:16:06.950
We're now not gonna get an exception.
352

352

00:16:06.950  -->  00:16:07.943
And we don't.
353

353

00:16:11.080  -->  00:16:12.500
Back in the main method,
354

354

00:16:12.500  -->  00:16:15.970
we removed John Doe, so he's gone from position three
355

355

00:16:15.970  -->  00:16:17.540
and we removed Jane Jones
356

356

00:16:17.540  -->  00:16:20.990
and she's now been taken off the list at position five
357

357

00:16:20.990  -->  00:16:22.680
and we just have Mary there
358

358

00:16:22.680  -->  00:16:24.930
and then finally, let's try to retrieve Mary
359

359

00:16:24.930  -->  00:16:27.350
because remember, with the linear probing,
360

360

00:16:27.350  -->  00:16:30.830
before we added the code to rehash the table
361

361

00:16:30.830  -->  00:16:33.330
on a remove, once we had removed Jane,
362

362

00:16:33.330  -->  00:16:34.600
we couldn't find Mary
363

363

00:16:34.600  -->  00:16:36.300
but we won't have the same problem
364

364

00:16:37.880  -->  00:16:42.690
with chaining, so let's add Mary and let's run
365

365

00:16:43.920  -->  00:16:46.280
and we can still see Mary.
366

366

00:16:46.280  -->  00:16:47.430
So, that's chaining.
367

367

00:16:47.430  -->  00:16:49.489
It's a lot simpler to implement
368

368

00:16:49.489  -->  00:16:51.670
than linear probing but as I said,
369

369

00:16:51.670  -->  00:16:53.360
that doesn't mean that linear probing
370

370

00:16:53.360  -->  00:16:55.030
is worse than chaining,
371

371

00:16:55.030  -->  00:16:57.490
it just means that you have more code to write,
372

372

00:16:57.490  -->  00:16:59.920
the implementation's a little bit more complex.
373

373

00:16:59.920  -->  00:17:01.910
So, what do you think the time complexity
374

374

00:17:01.910  -->  00:17:04.660
of retrieving an item based on a key is
375

375

00:17:04.660  -->  00:17:05.870
when we use chaining?
376

376

00:17:05.870  -->  00:17:09.142
In the worst case, all the instances
377

377

00:17:09.142  -->  00:17:11.160
would have the same hashed value
378

378

00:17:11.160  -->  00:17:14.418
and so, let's say you had this really bad hashing function
379

379

00:17:14.418  -->  00:17:16.470
and it didn't matter what you gave it
380

380

00:17:16.470  -->  00:17:19.790
every single key hashed to the value three.
381

381

00:17:19.790  -->  00:17:22.330
That means that every single item
382

382

00:17:22.330  -->  00:17:24.910
is going to be put into the linked list
383

383

00:17:24.910  -->  00:17:25.950
at position three
384

384

00:17:25.950  -->  00:17:27.790
and so, when you wanna retrieve something,
385

385

00:17:27.790  -->  00:17:30.190
you potentially have to traverse
386

386

00:17:30.190  -->  00:17:33.170
every single item in the hashtable.
387

387

00:17:33.170  -->  00:17:38.170
And so, the worst case for chaining is linear time
388

388

00:17:38.190  -->  00:17:39.880
when you go to retrieve something.
389

389

00:17:39.880  -->  00:17:42.340
But the key here, no pun intending,
390

390

00:17:42.340  -->  00:17:44.000
is the hashing algorithm.
391

391

00:17:44.000  -->  00:17:46.350
We want a hashing function that will result
392

392

00:17:46.350  -->  00:17:48.560
in the smallest number of collisions.
393

393

00:17:48.560  -->  00:17:51.010
Now of course, the best case is no collisions at all
394

394

00:17:51.010  -->  00:17:53.640
but that can be difficult to achieve in practise
395

395

00:17:53.640  -->  00:17:54.970
but in the average case,
396

396

00:17:54.970  -->  00:17:57.960
let's assume that we have a decent hashing function,
397

397

00:17:57.960  -->  00:18:01.529
then your linked lists aren't going to be that long
398

398

00:18:01.529  -->  00:18:06.240
and so, if we say that k is the average length
399

399

00:18:06.240  -->  00:18:08.750
of a linked list in your hashtable,
400

400

00:18:08.750  -->  00:18:12.490
then retrieval will be O of one plus k.
401

401

00:18:12.490  -->  00:18:15.700
The one corresponds to calculating the hashed value
402

402

00:18:15.700  -->  00:18:17.950
and going to that array position
403

403

00:18:17.950  -->  00:18:20.370
and the k provides us with an idea
404

404

00:18:20.370  -->  00:18:22.370
of the average length of a linked list.
405

405

00:18:22.370  -->  00:18:24.100
And so, whether the time complexity
406

406

00:18:24.100  -->  00:18:27.535
is going to be closer to constant time or linear time
407

407

00:18:27.535  -->  00:18:29.910
will depend on the hashing function
408

408

00:18:29.910  -->  00:18:32.100
and also on the load factor.
409

409

00:18:32.100  -->  00:18:34.640
Now why does it depend on the load factor in this case?
410

410

00:18:34.640  -->  00:18:38.100
Well, if you're trying to squeeze 100 values
411

411

00:18:38.100  -->  00:18:40.530
into an array of 10,
412

412

00:18:40.530  -->  00:18:43.220
you're going to have a much fuller array
413

413

00:18:43.220  -->  00:18:46.640
in terms of linked lists that are actually having values
414

414

00:18:46.640  -->  00:18:49.450
than if you try to squeeze 100 items into an array
415

415

00:18:49.450  -->  00:18:51.210
of size 50 because remember,
416

416

00:18:51.210  -->  00:18:52.750
in the hashing function,
417

417

00:18:52.750  -->  00:18:55.196
if we go back to ChainedHashtable,
418

418

00:18:55.196  -->  00:18:58.280
we're always dividing by the hashtable.length,
419

419

00:18:58.280  -->  00:18:59.970
so if this gets bigger,
420

420

00:18:59.970  -->  00:19:03.030
your values will be more uniformly distributed.
421

421

00:19:03.030  -->  00:19:06.410
For example, when our array is of length 10,
422

422

00:19:06.410  -->  00:19:09.760
the numbers five and 15 are both going to go
423

423

00:19:09.760  -->  00:19:11.060
into position five.
424

424

00:19:11.060  -->  00:19:13.540
But if we doubled that array to length 20,
425

425

00:19:13.540  -->  00:19:15.490
five would go into position five
426

426

00:19:15.490  -->  00:19:18.040
but 15 would go into position 15
427

427

00:19:18.040  -->  00:19:21.140
and if we made that 30 and 40 and 50,
428

428

00:19:21.140  -->  00:19:23.300
then if we were storing higher values,
429

429

00:19:23.300  -->  00:19:25.150
they'd be more evenly distributed.
430

430

00:19:25.150  -->  00:19:27.030
And so, as I've said before,
431

431

00:19:27.030  -->  00:19:29.160
and it's important to understand the hashing function
432

432

00:19:29.160  -->  00:19:31.920
and the load factor are going to be important
433

433

00:19:31.920  -->  00:19:34.760
in determining how well your hashtable performs.
434

434

00:19:34.760  -->  00:19:37.570
Anyway, now that we've looked at chaining
435

435

00:19:37.570  -->  00:19:40.720
and linear probing, we can see why having a hashing function
436

436

00:19:40.720  -->  00:19:42.510
that doesn't produce lots of collisions
437

437

00:19:42.510  -->  00:19:44.270
will result in better performance.
438

438

00:19:44.270  -->  00:19:46.860
Okay, so one final note before we go.
439

439

00:19:46.860  -->  00:19:50.320
In our hashing function, we're using the key.length.
440

440

00:19:50.320  -->  00:19:53.060
Now, we could be calling the hash code method
441

441

00:19:53.060  -->  00:19:56.260
in the string class and so, I'm gonna comment this out
442

442

00:19:56.260  -->  00:19:58.130
'cause this is often how you'll do it.
443

443

00:19:58.130  -->  00:20:01.040
You'll actually call the hash code method in the class.
444

444

00:20:01.040  -->  00:20:03.670
I didn't do this 'cause I wanted us to focus
445

445

00:20:03.670  -->  00:20:05.780
on the rest of the implementation
446

446

00:20:05.780  -->  00:20:08.040
but now that we understand and we've seen everything,
447

447

00:20:08.040  -->  00:20:11.510
let's use the strings hash code method
448

448

00:20:11.510  -->  00:20:13.270
rather than just using the key.length,
449

449

00:20:13.270  -->  00:20:15.100
so I'll say return
450

450

00:20:15.100  -->  00:20:18.250
and I'm gonna say Math.absolute value
451

451

00:20:18.250  -->  00:20:20.430
because the hash code method for string
452

452

00:20:20.430  -->  00:20:22.900
can actually produce negative numbers
453

453

00:20:22.900  -->  00:20:25.260
and so, we have to take the absolute value
454

454

00:20:25.260  -->  00:20:27.880
and we're gonna say key.hashCode
455

455

00:20:27.880  -->  00:20:32.060
and we're gonna mod that by hashtable.length.
456

456

00:20:32.060  -->  00:20:33.150
In a hashing function,
457

457

00:20:33.150  -->  00:20:34.560
you're always gonna be modding it
458

458

00:20:34.560  -->  00:20:37.890
by the size of the array because you have to make sure
459

459

00:20:37.890  -->  00:20:39.260
that the values you're returning
460

460

00:20:39.260  -->  00:20:41.060
are valid array indices.
461

461

00:20:41.060  -->  00:20:44.280
And so, I'm gonna comment out all these guys here
462

462

00:20:44.280  -->  00:20:46.100
that are removing stuff from the hashtable
463

463

00:20:46.100  -->  00:20:49.330
but I will uncomment this printHashtable
464

464

00:20:49.330  -->  00:20:50.163
and let's run again
465

465

00:20:50.163  -->  00:20:52.690
and see how this changes things.
466

466

00:20:52.690  -->  00:20:54.710
And you'll see that our employees
467

467

00:20:54.710  -->  00:20:56.630
are now distributed differently.
468

468

00:20:56.630  -->  00:21:01.150
John Doe and Mike Wilson now hash to a value of zero.
469

469

00:21:01.150  -->  00:21:03.390
Jones hashes to a value of one
470

470

00:21:03.390  -->  00:21:05.700
and Smith hashes to a value of seven.
471

471

00:21:05.700  -->  00:21:07.040
Now we're getting collisions here
472

472

00:21:07.040  -->  00:21:09.310
because we have such a tiny array.
473

473

00:21:09.310  -->  00:21:10.570
If we had a larger array,
474

474

00:21:10.570  -->  00:21:12.000
it's possible that we wouldn't be getting
475

475

00:21:12.000  -->  00:21:13.330
any collisions at all.
476

476

00:21:13.330  -->  00:21:17.080
And so, that's it for hashtables.
477

477

00:21:17.080  -->  00:21:19.330
In the next video, we're going to take a look
478

478

00:21:19.330  -->  00:21:21.820
at what's available in the JDK.
479

479

00:21:21.820  -->  00:21:22.853
I'll see you there.
