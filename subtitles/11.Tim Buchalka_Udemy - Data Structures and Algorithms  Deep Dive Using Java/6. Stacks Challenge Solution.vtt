WEBVTT
1
1

00:00:00.000  -->  00:00:02.583
(gentle music)
2

2

00:00:06.020  -->  00:00:09.780
<v ->Alright so here's the starter project that was available</v>
3

3

00:00:09.780  -->  00:00:14.110
in the last video so what we need to do is write
4

4

00:00:14.110  -->  00:00:16.870
the check for palindrome method.
5

5

00:00:16.870  -->  00:00:20.480
Now a stack is ideal for checking for palindromes
6

6

00:00:20.480  -->  00:00:24.130
because what we basically want to do is reverse the string
7

7

00:00:24.130  -->  00:00:26.660
and then compare it against the original string,
8

8

00:00:26.660  -->  00:00:28.710
and if they're equal, then it's a palindrome.
9

9

00:00:28.710  -->  00:00:32.020
So the stack is ideal for reversing the string
10

10

00:00:32.020  -->  00:00:35.880
because what we do is we push each character in turn
11

11

00:00:35.880  -->  00:00:40.150
and then because when pop, it's last in first out,
12

12

00:00:40.150  -->  00:00:43.290
we can pop the characters out and either
13

13

00:00:43.290  -->  00:00:46.590
compare them against the original string one by one.
14

14

00:00:46.590  -->  00:00:49.560
Or what we can do and this is the approach I took is
15

15

00:00:49.560  -->  00:00:52.250
to pop the characters out and append them to a
16

16

00:00:52.250  -->  00:00:55.360
StringBuilder and then we can just compare the two strings.
17

17

00:00:55.360  -->  00:00:58.690
Now the wrinkle here is the punctuation and the spaces.
18

18

00:00:58.690  -->  00:01:01.310
And so the approach that I took was,
19

19

00:01:01.310  -->  00:01:04.460
I'm using the LinkedList class for the stack
20

20

00:01:04.460  -->  00:01:08.600
and I have a StringBuilder that I used to build up the
21

21

00:01:08.600  -->  00:01:12.260
original string with punctuation and spaces stripped out,
22

22

00:01:12.260  -->  00:01:14.920
and of course the strings also lower cased.
23

23

00:01:14.920  -->  00:01:18.070
And as I'm doing that, I'm pushing characters that aren't
24

24

00:01:18.070  -->  00:01:21.423
punctuation and aren't spaces onto the stack
25

25

00:01:21.423  -->  00:01:23.610
and once I've done that,
26

26

00:01:23.610  -->  00:01:27.600
what I have is a stack with all of the characters
27

27

00:01:27.600  -->  00:01:31.020
from a to z in the string and I have a StringBuilder
28

28

00:01:31.020  -->  00:01:33.900
that contains the original string but with
29

29

00:01:33.900  -->  00:01:36.270
punctuation and spaces stripped out.
30

30

00:01:36.270  -->  00:01:40.160
And then all I do is pop all the values off the stack,
31

31

00:01:40.160  -->  00:01:43.400
and append them to a string builder, and then at the end
32

32

00:01:43.400  -->  00:01:46.860
I just compare the two string builder values
33

33

00:01:46.860  -->  00:01:48.830
and if they're equal it's a palindrome.
34

34

00:01:48.830  -->  00:01:50.400
So that's the approach I took,
35

35

00:01:50.400  -->  00:01:52.490
you may have taken a different approach.
36

36

00:01:52.490  -->  00:01:56.420
As long as calling the methods returns what we expect,
37

37

00:01:56.420  -->  00:01:59.470
then your solution is good, it doesn't have to match mine.
38

38

00:01:59.470  -->  00:02:02.070
You may have chosen a different class for the stack,
39

39

00:02:02.070  -->  00:02:04.310
you may have taken a different approach for dealing
40

40

00:02:04.310  -->  00:02:06.260
with the punctuation, and that's fine.
41

41

00:02:06.260  -->  00:02:09.860
Just like with algorithms having many implementations,
42

42

00:02:09.860  -->  00:02:11.750
challenges can have many solutions.
43

43

00:02:11.750  -->  00:02:13.530
And so I'll show you one solution,
44

44

00:02:13.530  -->  00:02:16.030
and you may have come up with something different.
45

45

00:02:17.390  -->  00:02:20.390
Okay so the first thing I'm gonna do is create my stack,
46

46

00:02:20.390  -->  00:02:22.350
and as I said I'm gonna use the LinkedList class,
47

47

00:02:22.350  -->  00:02:23.750
so I'm gonna say LinkedList,
48

48

00:02:23.750  -->  00:02:27.470
and I'm gonna store characters on this stack,
49

49

00:02:27.470  -->  00:02:30.097
stack = new LinkedList.
50

50

00:02:33.320  -->  00:02:36.560
And so that's the stack I'm gonna use, it's currently empty.
51

51

00:02:36.560  -->  00:02:40.370
And then I'm gonna create a StringBuilder as I'm looping
52

52

00:02:40.370  -->  00:02:43.030
through the string that we've been passed
53

53

00:02:43.030  -->  00:02:46.230
and pushing characters onto the stack,
54

54

00:02:46.230  -->  00:02:50.310
I'm also going to be appending the non-punctuation,
55

55

00:02:50.310  -->  00:02:53.440
non-space characters into a StringBuilder.
56

56

00:02:53.440  -->  00:02:54.613
And so I'm gonna say,
57

57

00:02:54.613  -->  00:02:59.446
StringBuilder stringNoPunctuation = new StringBuilder
58

58

00:03:04.860  -->  00:03:07.810
and I'm gonna give it a length of string.length
59

59

00:03:07.810  -->  00:03:10.370
because that's the largest we're gonna need.
60

60

00:03:10.370  -->  00:03:15.370
And now I'm gonna say String lowerCase = string.toLowerCase
61

61

00:03:17.110  -->  00:03:20.440
and of course sting is the value that we've been passed.
62

62

00:03:20.440  -->  00:03:23.880
So this basically just lower cases the string in one shot.
63

63

00:03:23.880  -->  00:03:25.670
I could do it character by character
64

64

00:03:25.670  -->  00:03:27.310
but I've just lower cased them all.
65

65

00:03:27.310  -->  00:03:28.890
So I don't have to worry about doing it
66

66

00:03:28.890  -->  00:03:32.890
when I'm looping through the characters in this string.
67

67

00:03:32.890  -->  00:03:34.290
Alright, so the next thing I'm going
68

68

00:03:34.290  -->  00:03:37.760
to do is loop through this string character by character
69

69

00:03:37.760  -->  00:03:39.910
and I'm going to push characters
70

70

00:03:39.910  -->  00:03:44.400
that have a value from a to z onto the stack.
71

71

00:03:44.400  -->  00:03:46.110
And I'm also going to append them
72

72

00:03:46.110  -->  00:03:48.870
to this stringNoPunctuation StringBuilder.
73

73

00:03:48.870  -->  00:03:51.370
So at the end of the loop my stack will be filled
74

74

00:03:51.370  -->  00:03:56.370
with all the non-punctuation and non-space characters.
75

75

00:03:56.400  -->  00:04:00.870
And I'll have a StringBuilder that has the original string
76

76

00:04:00.870  -->  00:04:03.850
with all the punctuation and all the spaces removed
77

77

00:04:03.850  -->  00:04:06.071
and of course it'll also be in lower case.
78

78

00:04:06.071  -->  00:04:07.310
So I'm gonna say,
79

79

00:04:07.310  -->  00:04:08.727
for (int i = 0; i &lt; lowerCase.length(); i++).
80

80

00:04:16.900  -->  00:04:21.900
I'm gonna say, char c = lowerCase.charAt(i).
81

81

00:04:24.080  -->  00:04:27.840
So this gets us the character in the string at position i.
82

82

00:04:27.840  -->  00:04:32.370
And I'm gonna say, if(c &gt;= 'a' &amp;&amp; c &lt;= 'z')
83

83

00:04:40.630  -->  00:04:43.260
then I'm interested in this character.
84

84

00:04:43.260  -->  00:04:47.920
This means that it's between the characters a to z inclusive
85

85

00:04:47.920  -->  00:04:50.560
and so it's not punctuation, it's not white space
86

86

00:04:50.560  -->  00:04:52.970
and so I want to add this character
87

87

00:04:52.970  -->  00:04:55.740
to my string NoPunctuation StringBuilder
88

88

00:04:55.740  -->  00:04:57.760
and I also want to push it onto the stack.
89

89

00:04:57.760  -->  00:05:02.540
So I'm gonna say stringNoPunctuation.append(c)
90

90

00:05:02.540  -->  00:05:05.610
and so that's appended it to my StringBuilder.
91

91

00:05:05.610  -->  00:05:10.610
And I'm gonna say stack.push(c) and so when we drop out
92

92

00:05:11.000  -->  00:05:15.090
of this loop my non-punctuation, non-white space characters,
93

93

00:05:15.090  -->  00:05:16.800
have all been pushed onto the stack
94

94

00:05:16.800  -->  00:05:20.480
and this StringBuilder contains the original string
95

95

00:05:20.480  -->  00:05:23.630
in order from left to right with all the punctuation
96

96

00:05:23.630  -->  00:05:26.663
and white space removed and its also been lower cased.
97

97

00:05:27.500  -->  00:05:30.560
So now I need to create my reverse string.
98

98

00:05:30.560  -->  00:05:32.390
Now I could have taken the approach here
99

99

00:05:32.390  -->  00:05:35.840
to loop through this string and popped out characters
100

100

00:05:35.840  -->  00:05:37.870
and compare them but instead I'm just going
101

101

00:05:37.870  -->  00:05:39.940
to pop all of the characters off the stack
102

102

00:05:39.940  -->  00:05:42.160
and append them to another StringBuilder.
103

103

00:05:42.160  -->  00:05:43.040
So I'm going to say,
104

104

00:05:43.040  -->  00:05:48.040
StringBuilder reversedString = new StringBuilder
105

105

00:05:48.920  -->  00:05:52.055
and we're gonna make it stack.size() because ...
106

106

00:05:52.055  -->  00:05:54.600
And that should be StringBuilder.
107

107

00:05:56.100  -->  00:05:57.700
Okay I'll finish my other sentence now.
108

108

00:05:57.700  -->  00:05:59.370
We're gonna make it stack.size
109

109

00:05:59.370  -->  00:06:02.260
cause that's the largest StringBuilder we should need.
110

110

00:06:02.260  -->  00:06:05.240
And then I'm gonna say, while(!stack.isEmpty())
111

111

00:06:10.669  -->  00:06:15.669
reversedString.append(stack.pop())
112

112

00:06:15.880  -->  00:06:18.160
and so what I've done here is,
113

113

00:06:18.160  -->  00:06:22.310
I'm popping off the characters that I pushed.
114

114

00:06:22.310  -->  00:06:25.750
And all the characters I pushed are between a to z.
115

115

00:06:25.750  -->  00:06:29.610
And so, every character that's being popped off is
116

116

00:06:29.610  -->  00:06:32.830
between a and z inclusive and so at the end
117

117

00:06:32.830  -->  00:06:36.910
of this I have the original string reversed
118

118

00:06:36.910  -->  00:06:38.320
but without the punctuation
119

119

00:06:38.320  -->  00:06:39.970
and the white space which is what I want.
120

120

00:06:39.970  -->  00:06:44.630
And so all I have to do now is compare this reversedString,
121

121

00:06:44.630  -->  00:06:47.260
against the string with no punctuation
122

122

00:06:47.260  -->  00:06:49.030
because this has the string that reads
123

123

00:06:49.030  -->  00:06:51.410
from left to right with no punctuation.
124

124

00:06:51.410  -->  00:06:54.320
And this has the string that reads from right to left.
125

125

00:06:54.320  -->  00:06:57.350
So if they're equal it's a palindrome.
126

126

00:06:57.350  -->  00:06:59.693
If they're not equal it's not a palindrome.
127

127

00:07:01.128  -->  00:07:02.880
And so all I have to do is say
128

128

00:07:03.870  -->  00:07:05.410
and in fact I don't need to add a line,
129

129

00:07:05.410  -->  00:07:07.520
I can just modify this,
130

130

00:07:07.520  -->  00:07:11.067
return reversedString.toString().equals
131

131

00:07:15.709  -->  00:07:20.442
(stringNoPunctuation.toString()) and so this is saying
132

132

00:07:20.442  -->  00:07:22.369
that if the string and the reversed StringBuilder,
133

133

00:07:22.369  -->  00:07:26.700
equals the string in the stringNoPunctuation StringBuilder,
134

134

00:07:26.700  -->  00:07:28.410
we have a palindrome.
135

135

00:07:28.410  -->  00:07:31.250
If they're not equal we don't have a palindrome.
136

136

00:07:31.250  -->  00:07:32.800
And so that's my solution
137

137

00:07:32.800  -->  00:07:34.700
and as I said yours might be different.
138

138

00:07:34.700  -->  00:07:37.020
You might have taken a completely different approach.
139

139

00:07:37.020  -->  00:07:40.330
As long as these return what we expect, we're good.
140

140

00:07:40.330  -->  00:07:42.240
So we're gonna expect true, true,
141

141

00:07:42.240  -->  00:07:45.770
true, false and true printed when I run.
142

142

00:07:45.770  -->  00:07:47.470
So let's go ahead and do that now.
143

143

00:07:51.960  -->  00:07:55.570
And we get true, true, true, false and true.
144

144

00:07:55.570  -->  00:07:57.820
And so that's one solution to the challenge.
145

145

00:07:57.820  -->  00:07:58.990
I hope you did well.
146

146

00:07:58.990  -->  00:08:00.840
If your solution does differ from mine
147

147

00:08:00.840  -->  00:08:02.270
and I'm sure it does in some way
148

148

00:08:02.270  -->  00:08:04.580
cause there's quite a number of different approaches
149

149

00:08:04.580  -->  00:08:07.120
that you could have taken to solve this problem.
150

150

00:08:07.120  -->  00:08:08.570
As long as you used a stack,
151

151

00:08:08.570  -->  00:08:11.670
so as long as you're calling push and pop somewhere
152

152

00:08:11.670  -->  00:08:14.990
and as long as you get the results true,
153

153

00:08:14.990  -->  00:08:18.260
true, true, false, true your solution is good.
154

154

00:08:18.260  -->  00:08:20.140
Alright so that's it for stacks.
155

155

00:08:20.140  -->  00:08:21.833
I'll see you in the next section.
