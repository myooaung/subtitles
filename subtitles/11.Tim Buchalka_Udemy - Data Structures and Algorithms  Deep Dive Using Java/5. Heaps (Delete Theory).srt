1
1

00:00:00,206  -->  00:00:02,379
(upbeat music)
2

2

00:00:02,379  -->  00:00:04,462
(typing)
3

3

00:00:05,440  -->  00:00:07,800
<v Sarah>Alright so let's talk about deleting</v>
4

4

00:00:07,800  -->  00:00:09,500
items from a heap.
5

5

00:00:09,500  -->  00:00:11,900
Now just as with a binary search tree,
6

6

00:00:11,900  -->  00:00:15,440
when we delete an item, we need to find a replacement
7

7

00:00:15,440  -->  00:00:18,120
value for it, but this is a lot easier
8

8

00:00:18,120  -->  00:00:20,550
than when we delete a node with two children
9

9

00:00:20,550  -->  00:00:23,669
from a binary search tree, because we always use
10

10

00:00:23,669  -->  00:00:26,290
the same replacement node
11

11

00:00:26,290  -->  00:00:30,440
and that node is the rightmost value in the heap
12

12

00:00:30,440  -->  00:00:34,070
and so it's the rightmost leaf in the tree
13

13

00:00:34,070  -->  00:00:37,030
and the reason we do that is because we want the tree
14

14

00:00:37,030  -->  00:00:38,450
to remain complete.
15

15

00:00:38,450  -->  00:00:41,470
Remember that one requirement for a heap is that
16

16

00:00:41,470  -->  00:00:43,130
it be a complete tree
17

17

00:00:43,130  -->  00:00:45,740
and so if we're gonna delete a node from somewhere
18

18

00:00:45,740  -->  00:00:48,280
in a tree and we want to replace that node,
19

19

00:00:48,280  -->  00:00:51,640
if we take the rightmost leaf from the last level
20

20

00:00:51,640  -->  00:00:54,760
of the tree and we take that node and we delete it
21

21

00:00:54,760  -->  00:00:56,930
and we use it as the replacement node,
22

22

00:00:56,930  -->  00:00:59,860
after we've done that, the tree will still be complete
23

23

00:00:59,860  -->  00:01:01,650
and so that's why we do it that way.
24

24

00:01:01,650  -->  00:01:04,950
Now of course, after we've replaced the deleted value
25

25

00:01:04,950  -->  00:01:07,890
with the new value, we may not have a heap anymore
26

26

00:01:07,890  -->  00:01:10,360
because a heap property might be violated
27

27

00:01:10,360  -->  00:01:13,480
and so after we've done that, we need to heapify the heap.
28

28

00:01:13,480  -->  00:01:16,050
Now when we were doing insert, I said that for delete
29

29

00:01:16,050  -->  00:01:17,490
we look down the heap,
30

30

00:01:17,490  -->  00:01:19,670
but I forgot that there are times when we also
31

31

00:01:19,670  -->  00:01:21,270
have to look up the heap.
32

32

00:01:21,270  -->  00:01:23,260
It's more common to look down a heap
33

33

00:01:23,260  -->  00:01:25,600
because when you're taking the very last leaf
34

34

00:01:25,600  -->  00:01:29,080
and moving it to the left in the array,
35

35

00:01:29,080  -->  00:01:30,960
it's more likely that you're gonna end up
36

36

00:01:30,960  -->  00:01:33,470
putting it somewhere where it turns out to be
37

37

00:01:33,470  -->  00:01:35,000
less than its children,
38

38

00:01:35,000  -->  00:01:38,840
but it is quite possible that you're gonna put it somewhere
39

39

00:01:38,840  -->  00:01:41,920
and it's actually greater than its parent
40

40

00:01:41,920  -->  00:01:44,460
and in that case, we need to fix the heap
41

41

00:01:44,460  -->  00:01:46,160
upwards not downwards.
42

42

00:01:46,160  -->  00:01:48,930
So the way we decide which direction to look
43

43

00:01:48,930  -->  00:01:53,017
is after we moved the rightmost leaf to its new position
44

44

00:01:53,017  -->  00:01:55,380
and that position would be the position of the node
45

45

00:01:55,380  -->  00:01:59,350
we deleted, we have to look up the heap
46

46

00:01:59,350  -->  00:02:01,870
and fix up the heap if that value
47

47

00:02:01,870  -->  00:02:03,460
is greater than its parent.
48

48

00:02:03,460  -->  00:02:06,390
If it's less than its parent, then we compare against
49

49

00:02:06,390  -->  00:02:09,750
its children and if it's less than one of its children,
50

50

00:02:09,750  -->  00:02:11,540
then we have to look down the heap.
51

51

00:02:11,540  -->  00:02:12,930
If we're going to look up the heap,
52

52

00:02:12,930  -->  00:02:15,310
we do the exact same thing we did for insert.
53

53

00:02:15,310  -->  00:02:18,030
We're gonna swap the replacement value with its parent
54

54

00:02:18,030  -->  00:02:20,560
until it's in its correct position.
55

55

00:02:20,560  -->  00:02:22,530
If we're gonna look down the heap,
56

56

00:02:22,530  -->  00:02:24,580
so we need to fix down the heap,
57

57

00:02:24,580  -->  00:02:27,360
we're gonna swap the replacement value with the larger
58

58

00:02:27,360  -->  00:02:29,990
of its two children and the reason we do that
59

59

00:02:29,990  -->  00:02:32,870
is if we swap it with the larger of its two children,
60

60

00:02:32,870  -->  00:02:35,908
so the larger child will become the parent
61

61

00:02:35,908  -->  00:02:38,910
of the replacement value and its old sibling,
62

62

00:02:38,910  -->  00:02:40,700
then we know for sure at that point,
63

63

00:02:40,700  -->  00:02:44,083
that that larger child is larger than both
64

64

00:02:44,083  -->  00:02:47,000
the replacement value and its old sibling
65

65

00:02:47,000  -->  00:02:48,930
and so the heap property is preserved.
66

66

00:02:48,930  -->  00:02:51,190
If we were to swap the replacement value
67

67

00:02:51,190  -->  00:02:53,730
with the smaller value of its two children,
68

68

00:02:53,730  -->  00:02:56,950
then obviously when that smaller value became the new root,
69

69

00:02:56,950  -->  00:02:58,807
it would be smaller than the replacement value
70

70

00:02:58,807  -->  00:03:01,840
and its old sibling so we'd still have a problem.
71

71

00:03:01,840  -->  00:03:04,670
And then in both cases, whether we're going up or down,
72

72

00:03:04,670  -->  00:03:06,980
we rinse and repeat until the replacement value
73

73

00:03:06,980  -->  00:03:09,170
is in its correct position and as I said
74

74

00:03:09,170  -->  00:03:12,260
we'll only need to fix the heap upwards or downwards,
75

75

00:03:12,260  -->  00:03:15,200
we never have to go in both directions.
76

76

00:03:15,200  -->  00:03:16,730
So here's our heap.
77

77

00:03:16,730  -->  00:03:19,070
I just wanted to remind you of what it
78

78

00:03:19,070  -->  00:03:20,630
looks like right now.
79

79

00:03:20,630  -->  00:03:24,620
And so let's say we decided we wanted to delete 75
80

80

00:03:24,620  -->  00:03:27,270
and so the replacement value is going to be 67.
81

81

00:03:27,270  -->  00:03:31,180
It's always gonna be the rightmost leaf at the bottom level.
82

82

00:03:31,180  -->  00:03:33,040
Because if we took the replacement value
83

83

00:03:33,040  -->  00:03:35,600
from somewhere else, we'd no longer have a complete tree.
84

84

00:03:35,600  -->  00:03:38,030
I mean if we said well we're gonna replace it with 40
85

85

00:03:38,030  -->  00:03:41,140
and so we're gonna knock 40 off and put 40 here,
86

86

00:03:41,140  -->  00:03:43,200
we'd no longer have a complete tree.
87

87

00:03:43,200  -->  00:03:46,410
And so if we knock off the rightmost leaf
88

88

00:03:46,410  -->  00:03:49,000
and use that to replace the deleted value,
89

89

00:03:49,000  -->  00:03:52,310
then after we've done that, the tree is still complete.
90

90

00:03:52,310  -->  00:03:55,460
If we had a child here, it would be this child
91

91

00:03:55,460  -->  00:03:57,260
that would replace 75
92

92

00:03:57,260  -->  00:03:59,480
and then our tree would still be complete
93

93

00:03:59,480  -->  00:04:01,470
and so when we're dealing with heaps
94

94

00:04:01,470  -->  00:04:02,940
and we're doing a deletion,
95

95

00:04:02,940  -->  00:04:06,100
the replacement value is always the rightmost leaf
96

96

00:04:06,100  -->  00:04:08,920
and that ensures that after we've deleted
97

97

00:04:08,920  -->  00:04:11,130
the node with the replacement value,
98

98

00:04:11,130  -->  00:04:13,120
we still have a complete tree.
99

99

00:04:13,120  -->  00:04:17,720
And so what we're gonna do is move 67 into 75
100

100

00:04:17,720  -->  00:04:19,860
and of course it'll be deleted from here.
101

101

00:04:19,860  -->  00:04:21,980
And so now we have this,
102

102

00:04:21,980  -->  00:04:24,660
but this is no longer a heap.
103

103

00:04:24,660  -->  00:04:27,840
And so we're gonna have to heapify this heap.
104

104

00:04:27,840  -->  00:04:30,600
We're going to compare 67 against its parent,
105

105

00:04:30,600  -->  00:04:32,900
it's less than the parent so we know that
106

106

00:04:32,900  -->  00:04:35,300
we don't have to fix the heap above
107

107

00:04:35,300  -->  00:04:39,090
and so we're gonna compare 67 against its two children
108

108

00:04:39,090  -->  00:04:41,680
and we're gonna swap it with the largest
109

109

00:04:41,680  -->  00:04:45,110
of its two children and so we're gonna swap it with 68.
110

110

00:04:45,110  -->  00:04:47,010
We want to swap it with the largest
111

111

00:04:47,010  -->  00:04:50,980
because if we swap it with 55, and put 55 up here,
112

112

00:04:50,980  -->  00:04:52,510
then we still don't have a heap,
113

113

00:04:52,510  -->  00:04:55,980
because 55 is smaller than its two children.
114

114

00:04:55,980  -->  00:05:00,400
So if the replacement value is less than one or both
115

115

00:05:00,400  -->  00:05:04,040
of its children, we want to swap it with the largest child
116

116

00:05:04,040  -->  00:05:06,500
because after that's done, we know that that largest
117

117

00:05:06,500  -->  00:05:09,890
child will be larger than the replacement value
118

118

00:05:09,890  -->  00:05:11,550
and larger than the other sibling
119

119

00:05:11,550  -->  00:05:14,230
because we took the largest value of the two
120

120

00:05:14,230  -->  00:05:16,600
and so after we've done the swapping,
121

121

00:05:16,600  -->  00:05:19,790
this is what we'll have and we have a heap again.
122

122

00:05:19,790  -->  00:05:22,070
So that's how we do a deletion in a heap.
123

123

00:05:22,070  -->  00:05:23,620
So now let's delete 40.
124

124

00:05:23,620  -->  00:05:25,830
Let's do another one and once again,
125

125

00:05:25,830  -->  00:05:27,940
the replacement value will be 67.
126

126

00:05:27,940  -->  00:05:30,630
It's always the same replacement value,
127

127

00:05:30,630  -->  00:05:34,160
it's always the rightmost leaf, at the last level,
128

128

00:05:34,160  -->  00:05:36,820
and so we'll move 67 into 40
129

129

00:05:36,820  -->  00:05:39,190
and now we're gonna compare the replacement value
130

130

00:05:39,190  -->  00:05:40,130
against its parent.
131

131

00:05:40,130  -->  00:05:42,920
Well it's greater than its parent and so this time,
132

132

00:05:42,920  -->  00:05:44,400
we need to look up the heap
133

133

00:05:44,400  -->  00:05:46,160
and we're gonna do it the exact same way
134

134

00:05:46,160  -->  00:05:47,960
we did it with insert.
135

135

00:05:47,960  -->  00:05:51,040
We compare the replacement value against its parent.
136

136

00:05:51,040  -->  00:05:54,390
If it's greater than its parent, we swap it with its parent,
137

137

00:05:54,390  -->  00:05:55,970
and then we rinse and repeat.
138

138

00:05:55,970  -->  00:05:57,890
And so we're gonna compare the replacement value
139

139

00:05:57,890  -->  00:06:00,590
against its parent and it's less than the parent
140

140

00:06:00,590  -->  00:06:01,650
and so we're done.
141

141

00:06:01,650  -->  00:06:05,400
Now we'd also rinse and repeat with the child swappings
142

142

00:06:05,400  -->  00:06:10,210
so here if we go back up, when we replaced 75 with 67
143

143

00:06:10,210  -->  00:06:11,770
and then we did the swap,
144

144

00:06:11,770  -->  00:06:14,510
if there were children here, we'd then compare
145

145

00:06:14,510  -->  00:06:17,680
67 against these children and if necessary we'd swap
146

146

00:06:17,680  -->  00:06:21,700
and we'd keep going until 67 was in its appropriate place.
147

147

00:06:21,700  -->  00:06:23,980
And so that's it, that's all there is to deleting
148

148

00:06:23,980  -->  00:06:25,150
a node from a heap.
149

149

00:06:25,150  -->  00:06:27,910
It's a little easier than binary search trees
150

150

00:06:27,910  -->  00:06:31,230
because the replacement value is always the same
151

151

00:06:31,230  -->  00:06:34,800
and because we usually are backing a heap with an array
152

152

00:06:34,800  -->  00:06:37,060
basically the replacement value is always
153

153

00:06:37,060  -->  00:06:39,100
at position size minus one.
154

154

00:06:39,100  -->  00:06:42,490
If size is the next available position in the array,
155

155

00:06:42,490  -->  00:06:47,470
then the last index for the heap is index size minus one
156

156

00:06:47,470  -->  00:06:50,320
and so we can just go straight to that location
157

157

00:06:50,320  -->  00:06:53,610
and you'll see that in action in the next video.
158

158

00:06:53,610  -->  00:06:54,583
I'll see you there.
