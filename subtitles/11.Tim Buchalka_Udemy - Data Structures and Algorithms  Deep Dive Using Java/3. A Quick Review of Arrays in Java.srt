1
1

00:00:00,000  -->  00:00:02,708
(upbeat music)
2

2

00:00:02,708  -->  00:00:05,366
(keyboard keys clicking)
3

3

00:00:05,366  -->  00:00:06,866
<v Tutor>Alright, so we know a little bit</v>
4

4

00:00:06,866  -->  00:00:08,541
about Big O notation now.
5

5

00:00:08,541  -->  00:00:13,168
And now we're going to very briefly look at arrays,
6

6

00:00:13,168  -->  00:00:15,569
because when we get to sort out algorithms,
7

7

00:00:15,569  -->  00:00:17,764
we're going to be sorting arrays.
8

8

00:00:17,764  -->  00:00:20,816
So we need to at least review arrays.
9

9

00:00:20,816  -->  00:00:24,088
Now this is not a beginner programming course.
10

10

00:00:24,088  -->  00:00:27,173
So I'm going to assume that you know what an array is,
11

11

00:00:27,173  -->  00:00:29,524
and you've probably worked with an array
12

12

00:00:29,524  -->  00:00:31,509
but to make sure we're all on the same page,
13

13

00:00:31,509  -->  00:00:33,909
let's just quickly create an array
14

14

00:00:33,909  -->  00:00:36,161
and remind ourselves of
15

15

00:00:36,161  -->  00:00:38,909
how we can access elements in an array.
16

16

00:00:38,909  -->  00:00:40,750
So I'm in the IDE here.
17

17

00:00:40,750  -->  00:00:42,662
This is just a test project,
18

18

00:00:42,662  -->  00:00:44,347
I'm going to create a new project
19

19

00:00:44,347  -->  00:00:46,591
and I'm going to go through doing that with you.
20

20

00:00:46,591  -->  00:00:48,096
I'll do that the first couple of times
21

21

00:00:48,096  -->  00:00:49,536
and then I'll then I'll assume
22

22

00:00:49,536  -->  00:00:50,885
you know how to create a project
23

23

00:00:50,885  -->  00:00:53,622
and all great projects off screen
24

24

00:00:53,622  -->  00:00:55,457
before we get going in a video,
25

25

00:00:55,457  -->  00:01:00,436
but for now, we'll go to File, New Project.
26

26

00:01:00,436  -->  00:01:02,350
You want to make sure Java is selected
27

27

00:01:02,350  -->  00:01:04,183
on the left hand side.
28

28

00:01:05,033  -->  00:01:07,998
And here you can set the project SDK.
29

29

00:01:07,998  -->  00:01:11,764
Now right now I have mine set to Java 9, 1.9.
30

30

00:01:11,764  -->  00:01:13,430
As I'm recording this video,
31

31

00:01:13,430  -->  00:01:16,602
Java 9 is still in early access.
32

32

00:01:16,602  -->  00:01:19,826
So I'm actually gonna change mine to Java 8.
33

33

00:01:19,826  -->  00:01:22,836
But if you want to use Java 9, that's fine.
34

34

00:01:22,836  -->  00:01:24,989
For this course it doesn't really matter.
35

35

00:01:24,989  -->  00:01:27,430
I would recommend at least Java 8
36

36

00:01:27,430  -->  00:01:28,692
because later in the course,
37

37

00:01:28,692  -->  00:01:32,271
we will be writing some code that uses language features
38

38

00:01:32,271  -->  00:01:35,479
that were only made available in Java 8.
39

39

00:01:35,479  -->  00:01:40,288
So make sure you're using Java 8 or Java 9.
40

40

00:01:40,288  -->  00:01:42,483
I'm gonna switch mine to Java 8,
41

41

00:01:42,483  -->  00:01:44,715
I'll take the latest version 102.
42

42

00:01:44,715  -->  00:01:48,206
You don't need to check anything on the right hand side.
43

43

00:01:48,206  -->  00:01:49,505
We're going to click Next.
44

44

00:01:49,505  -->  00:01:52,344
I'm going to check the Create project from template
45

45

00:01:52,344  -->  00:01:54,133
because this will have the IDE,
46

46

00:01:54,133  -->  00:01:56,124
generate a main method for us.
47

47

00:01:56,124  -->  00:02:00,376
Then click Next, I'm gonna call my project Arrays.
48

48

00:02:00,376  -->  00:02:02,612
And I was fooling around with this before.
49

49

00:02:02,612  -->  00:02:04,522
So the package is already set.
50

50

00:02:04,522  -->  00:02:08,552
My package is set to academy.learnprogramming.arrays,
51

51

00:02:08,552  -->  00:02:11,157
you can set yours to whatever you want.
52

52

00:02:11,157  -->  00:02:12,990
And then click Finish.
53

53

00:02:14,149  -->  00:02:15,927
Now because I have a project open,
54

54

00:02:15,927  -->  00:02:17,428
the IDE is asking me if I want
55

55

00:02:17,428  -->  00:02:19,862
to replace the project in this window
56

56

00:02:19,862  -->  00:02:21,125
or open a second window,
57

57

00:02:21,125  -->  00:02:25,747
we don't need this test project so I'm gonna replace it.
58

58

00:02:25,747  -->  00:02:28,022
And there we go, we have our new project.
59

59

00:02:28,022  -->  00:02:31,254
I'm gonna pull this back a little bit to give us some space.
60

60

00:02:31,254  -->  00:02:36,004
So let's create an int array just to get ourselves going.
61

61

00:02:36,897  -->  00:02:41,632
So we'll say int, int array = new int,
62

62

00:02:41,632  -->  00:02:45,443
and I'm going to make one of size seven.
63

63

00:02:45,443  -->  00:02:46,864
Now if we look at this,
64

64

00:02:46,864  -->  00:02:49,474
so we were creating an integer array.
65

65

00:02:49,474  -->  00:02:51,143
So these two square brackets
66

66

00:02:51,143  -->  00:02:53,955
are telling the compiler we want an array
67

67

00:02:53,955  -->  00:02:55,694
and then when you create an array,
68

68

00:02:55,694  -->  00:02:59,964
you have to specify the size that you want.
69

69

00:02:59,964  -->  00:03:02,771
Arrays are not a dynamic data structure,
70

70

00:03:02,771  -->  00:03:05,662
we'll see some dynamic data structures later.
71

71

00:03:05,662  -->  00:03:07,938
By not being dynamic, I mean
72

72

00:03:07,938  -->  00:03:10,831
that once you've created an array instance,
73

73

00:03:10,831  -->  00:03:13,323
you cannot change it size.
74

74

00:03:13,323  -->  00:03:17,665
So this array will have enough room to hold seven integers.
75

75

00:03:17,665  -->  00:03:20,551
And that's all it's ever going to be able to hold.
76

76

00:03:20,551  -->  00:03:25,054
We can't increase it size and we can't decrease it size.
77

77

00:03:25,054  -->  00:03:28,838
And as you'll see later, this leads to some disadvantages
78

78

00:03:28,838  -->  00:03:33,014
for a raise when we compare them with other data structures.
79

79

00:03:33,014  -->  00:03:37,597
So we have enough room in this array for seven integers.
80

80

00:03:37,597  -->  00:03:40,042
So let's add some integers.
81

81

00:03:40,042  -->  00:03:43,628
So I'm going to set,
82

82

00:03:43,628  -->  00:03:46,958
int array[0] to 20.
83

83

00:03:46,958  -->  00:03:50,601
Now just a quick reminder, the indices are zero based
84

84

00:03:50,601  -->  00:03:54,479
so if you have an int array that can hold seven integers,
85

85

00:03:54,479  -->  00:03:58,182
the valid indices will be zero to six.
86

86

00:03:58,182  -->  00:04:01,018
Seven will get you in array index out of bounds
87

87

00:04:01,018  -->  00:04:03,857
and we'll see in a minute why there is zero based
88

88

00:04:03,857  -->  00:04:06,741
if you've ever wondered why they're Zero Based
89

89

00:04:06,741  -->  00:04:09,829
rather than one based you're gonna find out shortly .
90

90

00:04:09,829  -->  00:04:13,322
So this is saying that in the first slot
91

91

00:04:13,322  -->  00:04:16,275
if we can imagine an array having seven slots
92

92

00:04:16,275  -->  00:04:18,466
or seven buckets or however you want to look at it,
93

93

00:04:18,466  -->  00:04:22,118
seven boxes, seven containers that can hold integers.
94

94

00:04:22,118  -->  00:04:23,906
We're saying in the first position
95

95

00:04:23,906  -->  00:04:26,114
we want to assign the integer 20
96

96

00:04:26,114  -->  00:04:28,413
(keyboard clicking)
97

97

00:04:28,413  -->  00:04:33,054
in the second position which would be at array index one
98

98

00:04:33,054  -->  00:04:36,221
we're going to give that the value 35.
99

99

00:04:37,806  -->  00:04:41,389
In array index two will give that one, -15.
100

100

00:04:45,470  -->  00:04:48,887
In three will give that one seven.
101

101

00:04:54,228  -->  00:04:57,477
The fifth position which would be at a rate index four,
102

102

00:04:57,477  -->  00:04:59,727
is going to get 55.
103

103

00:05:01,459  -->  00:05:03,169
Only got two more to go,
104

104

00:05:03,169  -->  00:05:06,931
so intArray[5] will get one
105

105

00:05:06,931  -->  00:05:10,890
and into intArray[6],
106

106

00:05:10,890  -->  00:05:14,473
will get -22 no -11.
107

107

00:05:15,309  -->  00:05:18,064
So we've now filled the entire array
108

108

00:05:18,064  -->  00:05:19,940
you don't have to fill the entire array
109

109

00:05:19,940  -->  00:05:23,314
but we have and as you can see the valid indices go
110

110

00:05:23,314  -->  00:05:27,656
from zero to six and that seven positions, seven slots
111

111

00:05:27,656  -->  00:05:28,918
whatever you want to call them.
112

112

00:05:28,918  -->  00:05:30,844
So let's print this array out now.
113

113

00:05:30,844  -->  00:05:33,089
I'm going to use a classic for loop
114

114

00:05:33,089  -->  00:05:35,337
so we can clearly see what happened, what's happening.
115

115

00:05:35,337  -->  00:05:36,170
so I'm gonna say,
116

116

00:05:36,170  -->  00:05:41,170
for (int i = 0 i&lt;intArray.length i++)
117

117

00:05:44,128  -->  00:05:49,128
and we're going to print out, intArray[i].
118

118

00:05:51,643  -->  00:05:53,740
Let's go ahead and run.
119

119

00:05:53,740  -->  00:05:56,427
(mouse click)
120

120

00:05:56,427  -->  00:05:58,911
If you by any chance get this error.
121

121

00:05:58,911  -->  00:06:02,503
I've noticed sometimes get this when I changed the SDK,
122

122

00:06:02,503  -->  00:06:05,427
you need to come up to Run, Build actually,
123

123

00:06:05,427  -->  00:06:07,945
and say to rebuild the project.
124

124

00:06:07,945  -->  00:06:11,235
And I think now it should run.
125

125

00:06:11,235  -->  00:06:12,068
There we go.
126

126

00:06:12,068  -->  00:06:13,502
So if you ever run into that error,
127

127

00:06:13,502  -->  00:06:14,959
because you've changed the SDK,
128

128

00:06:14,959  -->  00:06:18,872
like I did just come up to Build and just rebuild.
129

129

00:06:18,872  -->  00:06:23,872
Okay, so we've printed out 20, 35, -15, 7, etc.
130

130

00:06:24,125  -->  00:06:26,314
Let's take a look at the print statement for a minute.
131

131

00:06:26,314  -->  00:06:27,977
Once again, just as a brief review,
132

132

00:06:27,977  -->  00:06:29,679
you'll see that we're starting i
133

133

00:06:29,679  -->  00:06:31,663
at the first index in the array
134

134

00:06:31,663  -->  00:06:36,087
and we iterate around until i is equal to the length.
135

135

00:06:36,087  -->  00:06:38,408
Now remember, the length of the array
136

136

00:06:38,408  -->  00:06:40,323
is the number of integers that can hold
137

137

00:06:40,323  -->  00:06:42,969
and we specified that to be seven.
138

138

00:06:42,969  -->  00:06:45,727
But the valid index the last highest,
139

139

00:06:45,727  -->  00:06:48,782
the highest valid index is six.
140

140

00:06:48,782  -->  00:06:53,340
And so i, we wanna loop around and have i go,
141

141

00:06:53,340  -->  00:06:55,675
zero one two three four five six
142

142

00:06:55,675  -->  00:06:57,200
when it hits seven.
143

143

00:06:57,200  -->  00:06:59,472
So when it equals the length of the array
144

144

00:06:59,472  -->  00:07:00,894
we wanna try drop out of the loop
145

145

00:07:00,894  -->  00:07:04,640
because seven is actually an invalid index.
146

146

00:07:04,640  -->  00:07:09,278
So that's why when we loop around, iterate over an array,
147

147

00:07:09,278  -->  00:07:12,613
we start i at zero and we always wanna stop
148

148

00:07:12,613  -->  00:07:15,579
when whatever variable variable we're using
149

149

00:07:15,579  -->  00:07:17,812
to do the looping we wanna keep going
150

150

00:07:17,812  -->  00:07:19,157
while it's less than the length,
151

151

00:07:19,157  -->  00:07:21,752
when it's equal to the length then we stop
152

152

00:07:21,752  -->  00:07:24,747
because at that point, we know we've iterated over the array
153

153

00:07:24,747  -->  00:07:26,371
and of course, we're adding one
154

154

00:07:26,371  -->  00:07:28,978
to the variable each time we loop.
155

155

00:07:28,978  -->  00:07:31,690
Okay, so that was a very quick review of arrays.
156

156

00:07:31,690  -->  00:07:34,130
As I said, you've probably worked with them before.
157

157

00:07:34,130  -->  00:07:36,322
In the next video, we're going to start considering
158

158

00:07:36,322  -->  00:07:38,529
the array as a data structure.
159

159

00:07:38,529  -->  00:07:41,696
And so I'll see you in the next video.
