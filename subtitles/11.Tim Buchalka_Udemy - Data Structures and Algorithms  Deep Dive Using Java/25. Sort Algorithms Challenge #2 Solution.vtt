WEBVTT
1
1

00:00:00.202  -->  00:00:05.202
(lively music)
(keyboard clacking)
2

2

00:00:05.970  -->  00:00:06.860
<v Sarah>We're gonna start out</v>
3

3

00:00:06.860  -->  00:00:09.050
with the insertion sort implementation
4

4

00:00:09.050  -->  00:00:11.600
that we went through in the insertion sort video,
5

5

00:00:11.600  -->  00:00:13.620
so that's exactly what I have here,
6

6

00:00:13.620  -->  00:00:17.072
this is the starter project from the last video.
7

7

00:00:17.072  -->  00:00:20.170
And this is an iterative implementation,
8

8

00:00:20.170  -->  00:00:21.770
we're not using recursion,
9

9

00:00:21.770  -->  00:00:24.210
there's no method in here that's calling itself.
10

10

00:00:24.210  -->  00:00:26.520
Now of course recursion is a method
11

11

00:00:26.520  -->  00:00:27.550
that calls itself,
12

12

00:00:27.550  -->  00:00:30.170
so we're going to want to move some of the code
13

13

00:00:30.170  -->  00:00:32.920
into a method and essentially we need to think
14

14

00:00:32.920  -->  00:00:35.960
about what's happening on each iteration
15

15

00:00:35.960  -->  00:00:38.240
of this outer loop,
16

16

00:00:38.240  -->  00:00:41.150
what's happening is on each iteration,
17

17

00:00:41.150  -->  00:00:45.940
we're expanding the sorted partition by one
18

18

00:00:45.940  -->  00:00:48.110
because if you remember in the beginning,
19

19

00:00:48.110  -->  00:00:50.660
we're assuming that the very first element in the array
20

20

00:00:50.660  -->  00:00:53.930
is sorted and then we pick off the first element
21

21

00:00:53.930  -->  00:00:56.040
in the unsorted partition
22

22

00:00:56.040  -->  00:00:58.380
and we insert it into the sorted partition
23

23

00:00:58.380  -->  00:01:01.560
and that way we expand the sorted partition by one
24

24

00:01:01.560  -->  00:01:03.080
and then we pick off the next element
25

25

00:01:03.080  -->  00:01:05.360
in the unsorted partition et cetera
26

26

00:01:05.360  -->  00:01:07.000
until they're all sorted.
27

27

00:01:07.000  -->  00:01:08.730
It would be nice to have a method
28

28

00:01:08.730  -->  00:01:10.964
that we can call with the number of items
29

29

00:01:10.964  -->  00:01:13.420
that we want to sort
30

30

00:01:13.420  -->  00:01:17.160
because if we start out with the first two items
31

31

00:01:17.160  -->  00:01:20.100
and we sort them and then we sort the three items
32

32

00:01:20.100  -->  00:01:22.390
and then four items and then five items
33

33

00:01:22.390  -->  00:01:24.760
and then six items and then seven items,
34

34

00:01:24.760  -->  00:01:27.230
we'll have ended up sorting the entire array.
35

35

00:01:27.230  -->  00:01:29.850
So, we're gonna move our code
36

36

00:01:29.850  -->  00:01:32.720
into a method that accepts an array
37

37

00:01:32.720  -->  00:01:35.170
and the number of items we wanna sort.
38

38

00:01:35.170  -->  00:01:40.170
So, we'll say public static void insertionSort
39

39

00:01:41.980  -->  00:01:45.100
and it's gonna receive an int array, the input array
40

40

00:01:45.100  -->  00:01:48.470
and an int of the number of items
41

41

00:01:48.470  -->  00:01:50.270
we wanna sort and we always assume
42

42

00:01:50.270  -->  00:01:52.410
that we're starting at the front of the array.
43

43

00:01:52.410  -->  00:01:54.950
So, in our method, our recursive method,
44

44

00:01:54.950  -->  00:01:56.510
we're gonna need a breaking condition.
45

45

00:01:56.510  -->  00:01:58.570
We wanna know when to stop the recursion
46

46

00:01:58.570  -->  00:02:00.580
and the braking condition we're going to use
47

47

00:02:00.580  -->  00:02:03.923
is if numItems is less than two.
48

48

00:02:05.150  -->  00:02:06.780
And if it is, we're going to return
49

49

00:02:06.780  -->  00:02:09.080
because when we have one item,
50

50

00:02:09.080  -->  00:02:11.870
by definition, that one item is sorted
51

51

00:02:11.870  -->  00:02:14.960
and so, when we get down to calling this insertionSort
52

52

00:02:14.960  -->  00:02:17.840
with one item, that will break the recursion
53

53

00:02:17.840  -->  00:02:20.038
and then what do we want to do in here?
54

54

00:02:20.038  -->  00:02:23.087
We want to do an insertionSort
55

55

00:02:24.310  -->  00:02:27.833
with the same input array but with one less items.
56

56

00:02:29.400  -->  00:02:32.500
So, when we're called with two items or more,
57

57

00:02:32.500  -->  00:02:34.420
which means that we have work to do,
58

58

00:02:34.420  -->  00:02:37.310
before we sort the items we're called with,
59

59

00:02:37.310  -->  00:02:40.460
we're gonna sort numItems minus one.
60

60

00:02:40.460  -->  00:02:44.490
So, if we're called in the beginning to sort seven items,
61

61

00:02:44.490  -->  00:02:47.890
we'll say we'll first sort the first six items
62

62

00:02:47.890  -->  00:02:51.260
and then after we've sorted the first six items,
63

63

00:02:51.260  -->  00:02:53.290
we'll sort that final item
64

64

00:02:54.194  -->  00:02:57.710
and so, we'll say essentially what we did up here
65

65

00:02:57.710  -->  00:02:59.993
and so, I'm gonna copy this code,
66

66

00:03:01.410  -->  00:03:02.560
we're gonna have to change it a bit
67

67

00:03:02.560  -->  00:03:04.460
and I'm gonna paste it down here,
68

68

00:03:04.460  -->  00:03:08.343
let me change all of the occurrences of intArray to input.
69

69

00:03:10.460  -->  00:03:15.043
Input and input,
70

70

00:03:16.710  -->  00:03:19.280
input and let's put input here
71

71

00:03:20.320  -->  00:03:23.100
and instead of a firstUnsortedIndex,
72

72

00:03:23.100  -->  00:03:26.313
we're gonna use numItems minus one.
73

73

00:03:29.260  -->  00:03:32.007
So, we'll put numItems minus one here
74

74

00:03:32.007  -->  00:03:34.823
and we're gonna put numItems minus one here.
75

75

00:03:37.100  -->  00:03:38.770
And that's it, that's all we have to do.
76

76

00:03:38.770  -->  00:03:40.330
So, what's going on here?
77

77

00:03:40.330  -->  00:03:44.373
When we call the method with the entire array,
78

78

00:03:45.470  -->  00:03:46.860
we're gonna have seven items,
79

79

00:03:46.860  -->  00:03:49.370
so we're gonna check whether we have more than one item
80

80

00:03:49.370  -->  00:03:51.380
and we do, and so what we're gonna say
81

81

00:03:51.380  -->  00:03:54.350
is let's first sort the first six items
82

82

00:03:54.350  -->  00:03:56.890
and so, by the time we return from this method,
83

83

00:03:56.890  -->  00:03:59.900
the first six items in the array have been sorted
84

84

00:03:59.900  -->  00:04:03.500
and we wanna just sort now the seventh item,
85

85

00:04:03.500  -->  00:04:04.840
the very last item.
86

86

00:04:04.840  -->  00:04:07.110
So, we started out with the entire thing.
87

87

00:04:07.110  -->  00:04:08.410
By the time we get here,
88

88

00:04:08.410  -->  00:04:10.680
we sorted the first six elements,
89

89

00:04:10.680  -->  00:04:15.153
so everybody's sorted at this point except minus 22.
90

90

00:04:16.350  -->  00:04:17.830
And what we're gonna do
91

91

00:04:17.830  -->  00:04:20.430
is just a regular insertionSort
92

92

00:04:20.430  -->  00:04:23.390
but instead of a loop, we're just doing one iteration
93

93

00:04:23.390  -->  00:04:25.900
and that'll be for the element
94

94

00:04:25.900  -->  00:04:27.770
that's at numItems minus one.
95

95

00:04:27.770  -->  00:04:30.050
So, for the entire array,
96

96

00:04:30.050  -->  00:04:33.200
that would be input six which is minus 22
97

97

00:04:33.200  -->  00:04:35.680
and then we're gonna say for i equals six,
98

98

00:04:35.680  -->  00:04:37.240
i is greater than zero
99

99

00:04:37.240  -->  00:04:40.760
and input i minus one is greater than newElement,
100

100

00:04:40.760  -->  00:04:43.630
so we're looking for the insertion point here,
101

101

00:04:43.630  -->  00:04:47.670
i--, as long as the element is greater than newElement,
102

102

00:04:47.670  -->  00:04:49.770
we're gonna keep looking for the insertion point
103

103

00:04:49.770  -->  00:04:51.850
because we wanna find the first element
104

104

00:04:51.850  -->  00:04:54.770
that's less than or equal to the one we wanna insert
105

105

00:04:54.770  -->  00:04:56.180
because when we find that element,
106

106

00:04:56.180  -->  00:04:58.070
we'll know we found the insertion point
107

107

00:04:58.070  -->  00:05:00.140
and so, as we're looking for this element,
108

108

00:05:00.140  -->  00:05:02.020
of course we're shifting elements up
109

109

00:05:02.020  -->  00:05:04.130
because we have to make room for the insertion
110

110

00:05:04.130  -->  00:05:06.110
and when we drop out of this loop,
111

111

00:05:06.110  -->  00:05:08.786
i will be the insertion point of the newElement.
112

112

00:05:08.786  -->  00:05:13.130
So, instead of using a loop
113

113

00:05:13.130  -->  00:05:17.400
to increase the sorted partition from left to right,
114

114

00:05:17.400  -->  00:05:18.840
we're using recursion
115

115

00:05:18.840  -->  00:05:21.580
to increase the sorted partition from left to right.
116

116

00:05:21.580  -->  00:05:23.260
And I'll show you that in a minute
117

117

00:05:23.260  -->  00:05:25.350
when I add some print lien statements
118

118

00:05:25.350  -->  00:05:26.620
so we can see what's going on.
119

119

00:05:26.620  -->  00:05:29.410
So, what I'm gonna do is I'm going to comment out
120

120

00:05:29.410  -->  00:05:30.720
this sort obviously
121

121

00:05:30.720  -->  00:05:32.760
but I'm gonna leave it there so you can see it.
122

122

00:05:32.760  -->  00:05:36.340
And let's do the very first call to insertionSort.
123

123

00:05:36.340  -->  00:05:38.150
So, that'll be insertionSort
124

124

00:05:38.150  -->  00:05:40.480
and it'll be our intArray
125

125

00:05:40.480  -->  00:05:44.620
and when we call the method,
126

126

00:05:44.620  -->  00:05:46.910
we wanna sort the entire array
127

127

00:05:46.910  -->  00:05:49.730
and so, what's gonna happen is we're gonna come in here,
128

128

00:05:49.730  -->  00:05:50.730
numItems will be seven
129

129

00:05:50.730  -->  00:05:52.811
because that's intArray.length,
130

130

00:05:52.811  -->  00:05:54.870
this condition will fail
131

131

00:05:54.870  -->  00:05:57.860
and we're gonna say then let's call insertionSort
132

132

00:05:57.860  -->  00:06:01.430
to sort the first six items in the array
133

133

00:06:01.430  -->  00:06:04.310
and then that'll come in and it'll say
134

134

00:06:04.310  -->  00:06:07.320
let's call insertionSort to sort the first five items
135

135

00:06:07.320  -->  00:06:08.650
in the array.
136

136

00:06:08.650  -->  00:06:10.610
And then the first four items, three items,
137

137

00:06:10.610  -->  00:06:11.710
two items et cetera
138

138

00:06:11.710  -->  00:06:13.830
until we come in with just one item
139

139

00:06:13.830  -->  00:06:16.730
and then the recursive stack will start to unravel.
140

140

00:06:16.730  -->  00:06:19.290
The recursive call that called insertionSort
141

141

00:06:19.290  -->  00:06:22.050
with one item will be able to continue executing
142

142

00:06:22.050  -->  00:06:23.580
and it will, as you can see,
143

143

00:06:23.580  -->  00:06:25.240
there's no loop in here
144

144

00:06:25.240  -->  00:06:29.270
and so, each recursive call handles one element
145

145

00:06:29.270  -->  00:06:31.050
and so, each recursive call
146

146

00:06:31.050  -->  00:06:33.720
grows the sorted partition by one,
147

147

00:06:33.720  -->  00:06:37.390
it's exactly what we were doing here in this outer loop
148

148

00:06:37.390  -->  00:06:40.780
except we've essentially replaced this for loop
149

149

00:06:40.780  -->  00:06:42.710
with recursion, so let's run
150

150

00:06:42.710  -->  00:06:44.683
just to see if this works.
151

151

00:06:47.870  -->  00:06:49.340
I'm gonna rebuild the project.
152

152

00:06:49.340  -->  00:06:50.580
That sometimes happens,
153

153

00:06:50.580  -->  00:06:53.403
so I'm gonna say rebuild the project.
154

154

00:06:56.836  -->  00:06:58.136
And now let's try running.
155

155

00:07:00.360  -->  00:07:03.430
And we get minus 22, minus 15,
156

156

00:07:03.430  -->  00:07:06.370
one, seven, 20, 35 and 55,
157

157

00:07:06.370  -->  00:07:08.350
so our recursive sort is working.
158

158

00:07:08.350  -->  00:07:10.130
Let's add a few print line statements
159

159

00:07:10.130  -->  00:07:12.560
so we can understand better what's going on.
160

160

00:07:12.560  -->  00:07:16.610
I'm gonna add some actually to the end here
161

161

00:07:16.610  -->  00:07:19.500
or after we've finished a call to insertionSort,
162

162

00:07:19.500  -->  00:07:22.740
just before we exit, I'll say system.out.print line
163

163

00:07:23.880  -->  00:07:26.830
result of call when numItems
164

164

00:07:29.010  -->  00:07:34.010
equals and we'll print the numItems
165

165

00:07:34.400  -->  00:07:38.650
and then we'll say for i equals zero,
166

166

00:07:38.650  -->  00:07:43.650
i less than intArray.length, i++,
167

167

00:07:45.680  -->  00:07:47.230
that should be input actually
168

168

00:07:47.230  -->  00:07:49.210
'cause we're inside the method.
169

169

00:07:49.210  -->  00:07:53.893
System.out.print line input i,
170

170

00:07:54.730  -->  00:07:57.510
let's print everything on one line
171

171

00:07:57.510  -->  00:08:00.950
and then we'll say System.out.print
172

172

00:08:02.260  -->  00:08:03.440
and we'll put a comma there,
173

173

00:08:03.440  -->  00:08:07.180
so we'll print the array out on one line.
174

174

00:08:07.180  -->  00:08:10.610
And then I'll just do a System.out.print line
175

175

00:08:10.610  -->  00:08:12.280
so that we get a new line there
176

176

00:08:12.280  -->  00:08:16.340
and I'm gonna also print out a divider
177

177

00:08:17.230  -->  00:08:18.820
so that we can kind of see what's happening
178

178

00:08:18.820  -->  00:08:20.540
on each iteration.
179

179

00:08:20.540  -->  00:08:22.003
So, let's run again.
180

180

00:08:24.130  -->  00:08:26.980
So, let me pull this up a bit
181

181

00:08:26.980  -->  00:08:28.480
so we can see what's going on.
182

182

00:08:29.810  -->  00:08:32.960
So, when the number of items is two,
183

183

00:08:32.960  -->  00:08:34.190
let me scroll up here,
184

184

00:08:34.190  -->  00:08:36.170
so this is our original array
185

185

00:08:36.170  -->  00:08:39.500
and we start out by saying that 20 is sorted.
186

186

00:08:39.500  -->  00:08:42.160
That's the way that the insertionSort works,
187

187

00:08:42.160  -->  00:08:46.030
so 20 is sorted and we wanna pick off the first element
188

188

00:08:46.030  -->  00:08:47.850
in the unsorted partition
189

189

00:08:47.850  -->  00:08:50.910
and insert it into its proper place in the sorted partition.
190

190

00:08:50.910  -->  00:08:52.830
So, when the number of items equals two,
191

191

00:08:52.830  -->  00:08:55.950
the result of our sort is 20 and 35.
192

192

00:08:55.950  -->  00:08:58.630
It looks like we haven't done anything but we have,
193

193

00:08:58.630  -->  00:09:01.970
it's just that 35 happens to be greater than 20.
194

194

00:09:01.970  -->  00:09:03.640
When the number of items is three,
195

195

00:09:03.640  -->  00:09:06.470
you'll notice that we've picked off minus 15
196

196

00:09:06.470  -->  00:09:09.740
and we've put it into its correct sorted position
197

197

00:09:09.740  -->  00:09:11.690
and this is exactly what we were doing
198

198

00:09:11.690  -->  00:09:13.377
in the iterative insertionSort
199

199

00:09:13.377  -->  00:09:16.150
except we were doing this as part of a for loop
200

200

00:09:16.150  -->  00:09:18.800
but now each of these is a call
201

201

00:09:18.800  -->  00:09:20.870
to the insertionSort method,
202

202

00:09:20.870  -->  00:09:24.490
so as I said before, instead of using a for loop,
203

203

00:09:24.490  -->  00:09:27.310
we're replacing that with recursive calls.
204

204

00:09:27.310  -->  00:09:29.000
When the number of items is four,
205

205

00:09:29.000  -->  00:09:31.860
we wanna add seven into the sorted partition
206

206

00:09:31.860  -->  00:09:35.250
and we did, so now seven is in its correct spot.
207

207

00:09:35.250  -->  00:09:37.463
When the number of items is five,
208

208

00:09:38.880  -->  00:09:41.140
55 has been added in,
209

209

00:09:41.140  -->  00:09:43.630
when the number of items is six,
210

210

00:09:43.630  -->  00:09:45.020
we've added in one
211

211

00:09:45.020  -->  00:09:47.630
and then finally, when the number of items is seven,
212

212

00:09:47.630  -->  00:09:50.730
we add in minus 22 and we're finished
213

213

00:09:50.730  -->  00:09:54.020
and you'll notice that the recursive calls complete
214

214

00:09:54.020  -->  00:09:56.020
in the reverse order that they were called.
215

215

00:09:56.020  -->  00:09:57.770
I'll just pull this down now
216

216

00:09:59.060  -->  00:10:03.350
because we called insertionSort with seven
217

217

00:10:04.730  -->  00:10:06.370
but the first call to return
218

218

00:10:06.370  -->  00:10:08.690
is the one with two items.
219

219

00:10:08.690  -->  00:10:12.340
We don't see a print out for numItems equals one
220

220

00:10:12.340  -->  00:10:14.900
because we just return so we never make it down
221

221

00:10:14.900  -->  00:10:16.470
to the print statements.
222

222

00:10:16.470  -->  00:10:19.230
So, when num is one, we just kick out
223

223

00:10:19.230  -->  00:10:20.220
and when that happens,
224

224

00:10:20.220  -->  00:10:22.110
we would return to the recursive call
225

225

00:10:22.110  -->  00:10:24.790
with numItems equals to two.
226

226

00:10:24.790  -->  00:10:27.670
And so, it would continue executing from here
227

227

00:10:27.670  -->  00:10:29.730
and when the number of items is two,
228

228

00:10:29.730  -->  00:10:32.160
it wants to make sure that the first two elements
229

229

00:10:32.160  -->  00:10:34.870
in the array are sorted, so it's gonna handle 35
230

230

00:10:34.870  -->  00:10:36.610
and then when the number of items is three,
231

231

00:10:36.610  -->  00:10:38.660
it wants to make sure that the first three items
232

232

00:10:38.660  -->  00:10:41.363
are sorted and so that's when it handles minus 15.
233

233

00:10:43.940  -->  00:10:47.400
This is what a recursive insertionSort looks like.
234

234

00:10:47.400  -->  00:10:50.410
As I said, instead of using a loop to grow
235

235

00:10:50.410  -->  00:10:52.920
the sorted partition, we're using recursion
236

236

00:10:52.920  -->  00:10:55.110
to grow the sorted partition.
237

237

00:10:55.110  -->  00:10:56.650
In the iterative solution,
238

238

00:10:56.650  -->  00:10:59.570
each iteration of the loop grows the sorted partition
239

239

00:10:59.570  -->  00:11:01.970
by one and in the insertionSort,
240

240

00:11:01.970  -->  00:11:06.150
each call to the method grows the sorted partition by one.
241

241

00:11:06.150  -->  00:11:08.590
So, hopefully these print statements have helped you
242

242

00:11:08.590  -->  00:11:10.840
to see what's going on.
243

243

00:11:10.840  -->  00:11:13.520
Remember that we needed a breaking condition
244

244

00:11:13.520  -->  00:11:16.550
otherwise this recursion would never finish
245

245

00:11:16.550  -->  00:11:19.210
but otherwise the code's very, very similar
246

246

00:11:19.210  -->  00:11:21.290
apart from making the recursive call,
247

247

00:11:21.290  -->  00:11:23.200
this here was a copy, paste job.
248

248

00:11:23.200  -->  00:11:24.360
We just needed to change it
249

249

00:11:24.360  -->  00:11:26.380
to use the number of items minus one.
250

250

00:11:26.380  -->  00:11:29.790
And of course we changed intArray to input.
251

251

00:11:29.790  -->  00:11:32.760
But this code here is doing exactly
252

252

00:11:32.760  -->  00:11:35.610
what this code here is doing
253

253

00:11:35.610  -->  00:11:37.180
and so, for the recursion,
254

254

00:11:37.180  -->  00:11:39.850
we just needed to replace the loop.
255

255

00:11:39.850  -->  00:11:41.640
So, that's it for challenge number two.
256

256

00:11:41.640  -->  00:11:43.963
I'll see you in challenge number three.
