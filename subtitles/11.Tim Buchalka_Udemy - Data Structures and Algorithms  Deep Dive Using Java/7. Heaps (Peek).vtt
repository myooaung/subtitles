WEBVTT
1
1

00:00:00.117  -->  00:00:03.534
(energetic techno music)
2

2

00:00:05.850  -->  00:00:08.240
<v Sarah>All right, we have one more method to write.</v>
3

3

00:00:08.240  -->  00:00:10.040
And that's a peek method.
4

4

00:00:10.040  -->  00:00:11.440
When we call the peek method
5

5

00:00:11.440  -->  00:00:12.990
we're basically saying we want to look
6

6

00:00:12.990  -->  00:00:14.610
at what's at the root.
7

7

00:00:14.610  -->  00:00:16.680
Now if we wanted to remove what's at the root
8

8

00:00:16.680  -->  00:00:19.530
we just call our delete method with an index of zero,
9

9

00:00:19.530  -->  00:00:21.550
as we did in the last video.
10

10

00:00:21.550  -->  00:00:24.110
And so, for a peek method all we're going to do
11

11

00:00:24.110  -->  00:00:27.970
is return heap zero if the heap is not empty.
12

12

00:00:27.970  -->  00:00:29.900
If the heap is empty we're gonna throw in an exception.
13

13

00:00:29.900  -->  00:00:32.370
So this is gonna be a really simple method.
14

14

00:00:32.370  -->  00:00:33.920
So let's get to it.
15

15

00:00:33.920  -->  00:00:35.990
And so we're gonna say public int peek.
16

16

00:00:35.990  -->  00:00:38.120
We don't need any parameters
17

17

00:00:38.120  -->  00:00:40.680
because we're always gonna be peeking at the root.
18

18

00:00:40.680  -->  00:00:42.480
We're gonna say if is empty,
19

19

00:00:42.480  -->  00:00:44.410
then there's obviously nothing to peek at.
20

20

00:00:44.410  -->  00:00:49.410
So we're gonna say throw new index out-of-bounds exception.
21

21

00:00:49.520  -->  00:00:50.898
We'll just say heap is empty.
22

22

00:00:50.898  -->  00:00:53.170
And if that's not the case,
23

23

00:00:53.170  -->  00:00:55.875
we just want to return heap zero.
24

24

00:00:55.875  -->  00:00:58.220
We want to return what's at the root,
25

25

00:00:58.220  -->  00:01:01.140
and the root is always at position zero.
26

26

00:01:01.140  -->  00:01:01.973
And that's it.
27

27

00:01:01.973  -->  00:01:03.370
That's the peek method.
28

28

00:01:03.370  -->  00:01:05.430
So we don't change the heap in any way.
29

29

00:01:05.430  -->  00:01:08.060
We just return whatever's at the root.
30

30

00:01:08.060  -->  00:01:11.495
So I'm going to comment out our deletes.
31

31

00:01:11.495  -->  00:01:15.230
We'll print our heap, and then we'll print
32

32

00:01:15.230  -->  00:01:16.063
what's at the root.
33

33

00:01:16.063  -->  00:01:17.960
So, system.out.printlin(heap.peek).
34

34

00:01:21.902  -->  00:01:24.485
And we expect to see 80 to run.
35

35

00:01:27.930  -->  00:01:30.230
And we do, we see 80.
36

36

00:01:30.230  -->  00:01:35.230
Now if we were to delete the root,
37

37

00:01:35.940  -->  00:01:38.030
and actually I'll comment out the print line again
38

38

00:01:38.030  -->  00:01:39.653
and I'll just copy this,
39

39

00:01:40.614  -->  00:01:44.149
the maximum value in the heap becomes 75.
40

40

00:01:44.149  -->  00:01:45.840
And as we know in a max heap,
41

41

00:01:45.840  -->  00:01:47.760
the maximum value is always at the root.
42

42

00:01:47.760  -->  00:01:49.500
And so we should get 75.
43

43

00:01:49.500  -->  00:01:52.430
And we saw in the last video that our delete was working
44

44

00:01:52.430  -->  00:01:55.410
and 75 was indeed moved to the root.
45

45

00:01:55.410  -->  00:01:59.660
So let's run, and now we get 75.
46

46

00:01:59.660  -->  00:02:02.610
So this is our print heap right here.
47

47

00:02:02.610  -->  00:02:05.410
This is our peek before we do the delete,
48

48

00:02:05.410  -->  00:02:07.590
and after the delete we have 75.
49

49

00:02:07.590  -->  00:02:08.680
And so that's peek.
50

50

00:02:08.680  -->  00:02:10.890
Nothing earth-shattering there.
51

51

00:02:10.890  -->  00:02:14.590
And that's pretty much our simple implementation of a heap.
52

52

00:02:14.590  -->  00:02:16.690
So let's talk about the time complexity
53

53

00:02:16.690  -->  00:02:19.090
for the usual operation.
54

54

00:02:19.090  -->  00:02:23.350
So when we insert an item, it takes all of log N time.
55

55

00:02:23.350  -->  00:02:25.470
It's constant time to add the item,
56

56

00:02:25.470  -->  00:02:29.620
if we go back to our insert code, this is constant time.
57

57

00:02:29.620  -->  00:02:31.260
It's a constant time operation.
58

58

00:02:31.260  -->  00:02:35.540
Doesn't rely on how many values you have in the heap.
59

59

00:02:35.540  -->  00:02:38.770
But then we have to potentially fix the heap.
60

60

00:02:38.770  -->  00:02:41.070
And to do that, in the worst case,
61

61

00:02:41.070  -->  00:02:43.050
we may have to swap the new item
62

62

00:02:43.050  -->  00:02:44.780
all the way up to the root.
63

63

00:02:44.780  -->  00:02:47.060
And that would be log N swaps.
64

64

00:02:47.060  -->  00:02:51.210
And so the time complexity for insert is O of log N.
65

65

00:02:51.210  -->  00:02:54.600
Now for deleting, the first thing we have to do
66

66

00:02:54.600  -->  00:02:56.580
is find the item we want to remove.
67

67

00:02:56.580  -->  00:02:59.230
I didn't show that, but I explained that,
68

68

00:02:59.230  -->  00:03:01.110
if we are going to allow deletion
69

69

00:03:01.110  -->  00:03:03.853
of some random object from the heap,
70

70

00:03:03.853  -->  00:03:05.660
we're going to have to find it first.
71

71

00:03:05.660  -->  00:03:07.590
And that's going to be, in the worst case,
72

72

00:03:07.590  -->  00:03:08.520
it's going to be linear.
73

73

00:03:08.520  -->  00:03:10.880
Because we're going to use a linear search to do it.
74

74

00:03:10.880  -->  00:03:12.540
And so that's O of N.
75

75

00:03:12.540  -->  00:03:14.821
And then, once we've found the item we want to delete,
76

76

00:03:14.821  -->  00:03:17.680
once again, we're going to have to fix the heap.
77

77

00:03:17.680  -->  00:03:20.060
And once again, the worst case for that
78

78

00:03:20.060  -->  00:03:22.120
is that we're either going to have to
79

79

00:03:22.120  -->  00:03:24.590
take the replacement value all of the way from the root
80

80

00:03:24.590  -->  00:03:27.530
down to the bottom of the tree, or the opposite.
81

81

00:03:27.530  -->  00:03:29.210
We have to take the replacement value
82

82

00:03:29.210  -->  00:03:30.260
from the bottom of the tree
83

83

00:03:30.260  -->  00:03:31.730
and take it all of the way up to the root.
84

84

00:03:31.730  -->  00:03:34.440
And so once again, the worst case for that will be
85

85

00:03:34.440  -->  00:03:35.860
O of log N.
86

86

00:03:35.860  -->  00:03:38.120
If you want to delete some random value
87

87

00:03:38.120  -->  00:03:39.580
and you don't have the index,
88

88

00:03:39.580  -->  00:03:44.550
the time complexity is O of N, times log N.
89

89

00:03:44.550  -->  00:03:47.770
Because the N is from having to do the linear search
90

90

00:03:47.770  -->  00:03:50.690
and the log N is from having to fix the heap.
91

91

00:03:50.690  -->  00:03:53.070
However, as I've said a number of times now,
92

92

00:03:53.070  -->  00:03:55.350
when you're working with a heap, you're really usually
93

93

00:03:55.350  -->  00:03:57.210
only interested in the root.
94

94

00:03:57.210  -->  00:03:58.990
You're only ever going to remove the root.
95

95

00:03:58.990  -->  00:04:00.510
You're never going to remove anything else.
96

96

00:04:00.510  -->  00:04:04.070
And to remove the root, you can do that in O of log N time,
97

97

00:04:04.070  -->  00:04:06.230
because you don't have to do the linear search.
98

98

00:04:06.230  -->  00:04:09.000
So finding the root is a constant time operation.
99

99

00:04:09.000  -->  00:04:10.800
It's always that index zero.
100

100

00:04:10.800  -->  00:04:14.450
And then to fix the heap will be O of log N.
101

101

00:04:14.450  -->  00:04:17.660
So essentially, it will take you a lot longer, on average,
102

102

00:04:17.660  -->  00:04:19.930
to remove any old random item
103

103

00:04:19.930  -->  00:04:21.320
than it will to remove the root.
104

104

00:04:21.320  -->  00:04:23.850
Because the root, you know exactly where it is.
105

105

00:04:23.850  -->  00:04:26.330
Any old item, you've got to do a linear search first,
106

106

00:04:26.330  -->  00:04:30.420
and that's going to cost you N steps, in the worst case.
107

107

00:04:30.420  -->  00:04:33.130
So when we use heaps, we usually only want
108

108

00:04:33.130  -->  00:04:36.230
to work with the root, because we're generally using a heap
109

109

00:04:36.230  -->  00:04:37.920
because we're only interested in
110

110

00:04:37.920  -->  00:04:40.910
the minimum or maximum value in the data set.
111

111

00:04:40.910  -->  00:04:45.910
If you're interested in doing random access operations
112

112

00:04:46.060  -->  00:04:47.410
and you're going to be doing a lot of them,
113

113

00:04:47.410  -->  00:04:50.860
then heap is not going to be your data structure of choice.
114

114

00:04:50.860  -->  00:04:52.870
And just to drive this home a little bit, of course,
115

115

00:04:52.870  -->  00:04:54.380
when you're working with a heap
116

116

00:04:54.380  -->  00:04:56.330
you can find the minimum and maximum value
117

117

00:04:56.330  -->  00:04:58.800
in constant time, because it's always at the root.
118

118

00:04:58.800  -->  00:05:00.170
That's different then when you're working
119

119

00:05:00.170  -->  00:05:01.370
with a binary search tree,
120

120

00:05:01.370  -->  00:05:04.310
because in binary search tree you may have to travel
121

121

00:05:04.310  -->  00:05:06.100
all the way down the left or right edges
122

122

00:05:06.100  -->  00:05:08.040
to find the minimum or maximum value.
123

123

00:05:08.040  -->  00:05:11.190
Alright, so that's it for our implementation of a heap.
124

124

00:05:11.190  -->  00:05:12.823
In the next video we're going to take a look
125

125

00:05:12.823  -->  00:05:17.650
at a specific use of a heap called a priority queue.
126

126

00:05:17.650  -->  00:05:18.600
I'll see you there.
