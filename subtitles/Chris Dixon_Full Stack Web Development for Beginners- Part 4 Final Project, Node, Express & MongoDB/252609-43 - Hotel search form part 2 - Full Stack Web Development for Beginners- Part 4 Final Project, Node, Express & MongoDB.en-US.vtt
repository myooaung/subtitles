WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.000
Next I'm going to add a filter to only return the

00:00:03.000 --> 00:00:07.065
hotel's greater than the star rating which we searched for.

00:00:07.065 --> 00:00:09.435
First of all, if you do a search,

00:00:09.435 --> 00:00:14.325
once again for Mexico, hit "Search".

00:00:14.325 --> 00:00:17.340
These hotels have different star ratings.

00:00:17.340 --> 00:00:20.340
We can check if our filter is working.

00:00:20.340 --> 00:00:22.170
Inside of the match stage.

00:00:22.170 --> 00:00:24.465
We can add more than one filter.

00:00:24.465 --> 00:00:27.240
Let's go over to a hotel controller,

00:00:27.240 --> 00:00:30.315
and then just after available of true,

00:00:30.315 --> 00:00:33.595
we can also add a second match stage,

00:00:33.595 --> 00:00:37.175
and this time we want to search for the star rating.

00:00:37.175 --> 00:00:42.170
It's star_rating as the name of the field the colon,

00:00:42.170 --> 00:00:44.725
and then open up the curly braces.

00:00:44.725 --> 00:00:48.440
Inside here once you see the greater than operator,

00:00:48.440 --> 00:00:51.185
which is $ symbol GTE.

00:00:51.185 --> 00:01:00.670
We're checking if the star rating is greater than the search query dot stars.

00:01:00.920 --> 00:01:05.165
Now we should only get results return back to us from Mongo,

00:01:05.165 --> 00:01:09.935
whichever star rating, greater than what has been entered by the user.

00:01:09.935 --> 00:01:13.205
Now if we save this and then go over to the browser,

00:01:13.205 --> 00:01:15.080
hit the "Back Button",

00:01:15.080 --> 00:01:19.385
and then change it to be a minimum of four. Hit "Search".

00:01:19.385 --> 00:01:22.910
We should see only one hotel returns,

00:01:22.910 --> 00:01:26.010
but instead it looks like we're getting an error.

00:01:26.060 --> 00:01:30.305
Let's take a little step back and find out what's going on here.

00:01:30.305 --> 00:01:33.665
First of all, if we go back to our controller,

00:01:33.665 --> 00:01:35.615
and then inside here,

00:01:35.615 --> 00:01:40.400
we can change the res.json to be the search query constants,

00:01:40.400 --> 00:01:43.955
therefore can see what data is coming from our phone.

00:01:43.955 --> 00:01:46.535
Changes to be search query,

00:01:46.535 --> 00:01:50.490
hit "Save" and then reload.

00:01:51.110 --> 00:01:56.105
Obviously here is the form data being sent from the post request.

00:01:56.105 --> 00:01:57.935
If look a little closer,

00:01:57.935 --> 00:02:00.170
this is where the problem lies.

00:02:00.170 --> 00:02:04.490
All of these JSON values are surrounded in quotations,

00:02:04.490 --> 00:02:06.035
just like the stars,

00:02:06.035 --> 00:02:07.985
and also the sort order,

00:02:07.985 --> 00:02:10.915
meaning these will be treated as a string.

00:02:10.915 --> 00:02:13.459
But the star rating in our database,

00:02:13.459 --> 00:02:16.340
if we go to "mLab" scroll down,

00:02:16.340 --> 00:02:20.470
this is stored as a number without any quotations,

00:02:20.470 --> 00:02:23.945
and this is why we don't get the expected results.

00:02:23.945 --> 00:02:25.720
We can confirm this,

00:02:25.720 --> 00:02:29.135
let's first reinstate the search data.

00:02:29.135 --> 00:02:33.130
In our res.json, satisfies our walls,

00:02:33.130 --> 00:02:34.265
comment this line out,

00:02:34.265 --> 00:02:37.029
and then we can do res.send,

00:02:37.029 --> 00:02:45.005
and we want to send is the typeof search query, dot stars,

00:02:45.005 --> 00:02:47.010
the semicolon at the end.

00:02:47.010 --> 00:02:52.225
This will then return back towards the data type of search query dot stars.

00:02:52.225 --> 00:02:55.935
Save this and then reload the projects.

00:02:55.935 --> 00:03:00.620
Click "Continue" and now we'll see we get a data type of string.

00:03:00.620 --> 00:03:05.120
Although we were expecting a value of a number for the number of stars.

00:03:05.120 --> 00:03:09.170
This is because when sending data to a from a server,

00:03:09.170 --> 00:03:11.810
it's been sent as plain text.

00:03:11.810 --> 00:03:15.425
Therefore, the client is interpreting this as a string.

00:03:15.425 --> 00:03:19.310
This means we first need to convert this data type for it to work,

00:03:19.310 --> 00:03:22.355
and we have a Javascript method called parse Int.

00:03:22.355 --> 00:03:27.650
To do this, if we go to the top of the try block just after our search query,

00:03:27.650 --> 00:03:30.320
let's create a new constant called parsed

00:03:30.320 --> 00:03:36.740
stars and set this to our Javascript method of parse Int.

00:03:36.740 --> 00:03:40.595
Inside the brackets, we can pass in the string which wants to pass,

00:03:40.595 --> 00:03:44.045
and we want to pass the search query dot stars.

00:03:44.045 --> 00:03:47.140
Copy this and paste this in.

00:03:47.140 --> 00:03:52.370
This will lend them pass the string as a number using the parse Int method,

00:03:52.370 --> 00:03:55.700
and then store it inside this constant just here.

00:03:55.700 --> 00:04:00.020
We can then use this constant inside of our aggregation pipeline.

00:04:00.020 --> 00:04:06.170
Copy parsed stars, and then rather than using the search query dot star from before,

00:04:06.170 --> 00:04:07.910
which we now know is a string.

00:04:07.910 --> 00:04:11.070
We can now paste this in, hit "Save".

00:04:11.070 --> 00:04:14.810
Then we can do our res.json by uncommenting out

00:04:14.810 --> 00:04:20.895
this line and then delete our res.send hit "Save",

00:04:20.895 --> 00:04:26.095
reload the browser, and then we can go backwards to all form.

00:04:26.095 --> 00:04:29.675
Now search for a minimum of three stars.

00:04:29.675 --> 00:04:34.460
Hit "Search" we'll go with two Mexico hotels from before,

00:04:34.460 --> 00:04:39.550
go backwards and then click on "Four star" this time, Hit "Search".

00:04:39.550 --> 00:04:42.800
Now we only get the single hotel returns,

00:04:42.800 --> 00:04:45.470
which is these star rating of four.

00:04:45.470 --> 00:04:49.340
The last step in this pipeline is to get this select box work in

00:04:49.340 --> 00:04:52.880
here to solve the price from high to low or low to high.

00:04:52.880 --> 00:04:56.785
This we can add a source stage of the aggregation pipeline.

00:04:56.785 --> 00:05:00.525
Let's go back over to our controller.

00:05:00.525 --> 00:05:03.975
After the match stage we can add a comma,

00:05:03.975 --> 00:05:05.945
and then just below this,

00:05:05.945 --> 00:05:10.660
let's create our sort stage with a $ symbol and then sort,

00:05:10.660 --> 00:05:15.780
then we can add in the field name of cost per night.

00:05:15.780 --> 00:05:19.085
We won't need to be sorted by the cost per night field,

00:05:19.085 --> 00:05:21.815
which holds the prize for the hotel.

00:05:21.815 --> 00:05:27.095
This needs then taking the sort field from the form which is stored in

00:05:27.095 --> 00:05:35.845
the search query dot sort but you may have already anticipated a problem with this.

00:05:35.845 --> 00:05:37.775
Just like the star rating,

00:05:37.775 --> 00:05:39.890
this is also a number two.

00:05:39.890 --> 00:05:44.660
We will need to use the parse Int method again on this field.

00:05:44.660 --> 00:05:47.840
The sort field is a number because if we go over to

00:05:47.840 --> 00:05:51.799
the layout dot bug and then scroll down to a Select,

00:05:51.799 --> 00:05:53.615
which is just here.

00:05:53.615 --> 00:05:58.010
We have a value of either one or negative one.

00:05:58.010 --> 00:06:02.330
The value of one will return the documents in ascending order,

00:06:02.330 --> 00:06:05.875
and negative one will return in descending order.

00:06:05.875 --> 00:06:08.730
Let's begin by parsing our number.

00:06:08.730 --> 00:06:11.000
To the hotel controller,

00:06:11.000 --> 00:06:12.830
just after the parsed stars,

00:06:12.830 --> 00:06:14.390
we can add a semicolon,

00:06:14.390 --> 00:06:19.560
setup a constant, this time called parsed sort.

00:06:19.630 --> 00:06:26.375
That is equal to our parse Int method passing in this time the search query,

00:06:26.375 --> 00:06:28.830
and then dot sort,

00:06:29.630 --> 00:06:32.085
add a semicolon at the end,

00:06:32.085 --> 00:06:33.930
and now we can use this parsed sort

00:06:33.930 --> 00:06:39.525
constants in place of the search query docile from before,

00:06:39.525 --> 00:06:42.855
give this a save, over to the browser.

00:06:42.855 --> 00:06:45.930
Let's drop down the star rating to be number one.

00:06:45.930 --> 00:06:53.205
We get our two Mexico hotel returns and then change it to be high to low.

00:06:53.205 --> 00:06:59.325
Hit "Search". Now have a warning over here so let's go back,

00:06:59.325 --> 00:07:02.630
and it just wants to be a capital I,

00:07:02.630 --> 00:07:05.640
hit "Save" and then "Reload".

00:07:06.590 --> 00:07:09.675
There's our two Mexico hotels.

00:07:09.675 --> 00:07:13.560
The cost is 67, then 56.

00:07:13.560 --> 00:07:15.315
Such high to low,

00:07:15.315 --> 00:07:18.510
but I'll go back and change from low to high,

00:07:18.510 --> 00:07:23.790
hit "Search" and now have 56 followed by 67.

00:07:23.790 --> 00:07:28.780
This appears to be working fine if we go back and change to a different destination.

00:07:28.780 --> 00:07:33.065
The Dominican Republic also has multiple hotels.

00:07:33.065 --> 00:07:36.975
Click on "Search", we see our country.

00:07:36.975 --> 00:07:39.870
The cost is in order,

00:07:39.870 --> 00:07:43.570
go back and change it from high to low.

00:07:43.940 --> 00:07:47.980
Now these also sorted in numerical order.

00:07:47.980 --> 00:07:52.585
We now have the data back we need from the database, next up,

00:07:52.585 --> 00:07:53.800
we'll move on to creating

00:07:53.800 --> 00:07:59.480
a Search Results template to display these hotels inside of our projects.
