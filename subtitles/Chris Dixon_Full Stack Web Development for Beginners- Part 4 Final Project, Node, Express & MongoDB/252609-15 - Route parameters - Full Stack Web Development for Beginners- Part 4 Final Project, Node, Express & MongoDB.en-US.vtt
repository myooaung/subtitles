WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:04.620
One of the things we have to deal with when routing is that we

00:00:04.620 --> 00:00:08.280
don't always know what the exact URL will be.

00:00:08.280 --> 00:00:12.075
What I mean is if we imagine a user's route,

00:00:12.075 --> 00:00:15.720
each user has a unique user ID.

00:00:15.720 --> 00:00:23.730
This could be something such as our localhost or our website URL, forward slash users.

00:00:23.730 --> 00:00:26.055
Then forward slash a username,

00:00:26.055 --> 00:00:28.050
which could be pretty much anything.

00:00:28.050 --> 00:00:31.180
This user section that we have just here,

00:00:31.180 --> 00:00:34.370
probably won't be known in advance to the developer.

00:00:34.370 --> 00:00:38.599
This section is something which we need to handle beforehand.

00:00:38.599 --> 00:00:44.545
For this, we can use route parameters to create a dynamic segments in the URL.

00:00:44.545 --> 00:00:47.150
If we go over to the index.js,

00:00:47.150 --> 00:00:49.310
which handles all of our routes,

00:00:49.310 --> 00:00:54.290
let's start by duplicating our forward slash all routes in the last video.

00:00:54.290 --> 00:00:58.510
Copy this section and then add it in just below.

00:00:58.510 --> 00:01:04.915
We can then tell express router which parts of the URL we want to be dynamic.

00:01:04.915 --> 00:01:07.070
After forward slash all,

00:01:07.070 --> 00:01:09.560
we can then go ahead and add forward

00:01:09.560 --> 00:01:13.700
slash and then create a dynamic segments using a colon.

00:01:13.700 --> 00:01:16.385
Then a name we want to give to this section.

00:01:16.385 --> 00:01:19.415
This name can be anything of our choosing.

00:01:19.415 --> 00:01:22.640
Then inside of our function just below,

00:01:22.640 --> 00:01:26.980
we can then access the name data from our URL.

00:01:26.980 --> 00:01:29.700
We use the request object.

00:01:29.700 --> 00:01:34.865
Remember we said that this holds information from the HTTP requests.

00:01:34.865 --> 00:01:38.065
First of all, we can access the request objects,

00:01:38.065 --> 00:01:43.310
then.params to access the data in the URL parameters,

00:01:43.310 --> 00:01:46.370
followed by this name variable were added after the colon.

00:01:46.370 --> 00:01:48.230
So request.params.name.

00:01:48.230 --> 00:01:52.685
Then if we saw this inside of a constance,

00:01:52.685 --> 00:01:57.550
so const name is equal to our parameters.

00:01:57.550 --> 00:02:03.970
This data can also be passed to the templates to use along with the page title.

00:02:03.970 --> 00:02:07.975
After the title of all hotels, add a comma.

00:02:07.975 --> 00:02:11.640
Then we can also pass in this name data.

00:02:11.640 --> 00:02:17.455
This name data is passed to the all hotels templates along with this name.

00:02:17.455 --> 00:02:21.200
So click on our all hotels.pug file.

00:02:21.200 --> 00:02:27.175
Then this variable can easily be accessed in the template just by referencing the name.

00:02:27.175 --> 00:02:29.425
Down at the bottom of the file,

00:02:29.425 --> 00:02:35.160
p equals our name variable.

00:02:35.160 --> 00:02:37.785
Then over to the browser.

00:02:37.785 --> 00:02:43.180
Now if we go to forward slash users and then forward slash,

00:02:43.180 --> 00:02:47.360
we can add any name into here, hit enter.

00:02:47.360 --> 00:02:53.580
In fact, this was all an increase and hit enter.

00:02:53.580 --> 00:02:58.105
Down at the bottom we now see I would name of Chris, which we passed in.

00:02:58.105 --> 00:03:01.355
We can try this again with anything we want to add.

00:03:01.355 --> 00:03:05.109
This data is then grabbed from our URL,

00:03:05.109 --> 00:03:08.770
stored inside the request.params objects.

00:03:08.770 --> 00:03:14.300
Then we can pass is now down to our template to use in any way which we choose.

00:03:14.300 --> 00:03:19.255
We can also add as many dynamic segments as we need in the URL.

00:03:19.255 --> 00:03:23.950
Rather than just having one in index.js, just like this.

00:03:23.950 --> 00:03:28.130
We can also add this dynamic segment into any section we wanted.

00:03:28.130 --> 00:03:32.030
We could also grab the age and store it in an age variable.

00:03:32.030 --> 00:03:35.770
But this all depends on what type of website you are creating.

00:03:35.770 --> 00:03:41.060
Another thing we can also do if we don't want to grab the data inside of the routes,

00:03:41.060 --> 00:03:43.705
we can also just add a star.

00:03:43.705 --> 00:03:48.280
Just like this, we could add a star and then this route, just here,

00:03:48.280 --> 00:03:53.735
all this function will then run every time a route follows this forward slash all,

00:03:53.735 --> 00:03:56.815
and then forward slash any data after this.

00:03:56.815 --> 00:04:01.410
This star can be placed in any section of the URL which you want.

00:04:01.410 --> 00:04:04.775
This will be useful for handling our user names,

00:04:04.775 --> 00:04:09.590
even if we didn't want to grab the actual data and store it in a variable.

00:04:09.590 --> 00:04:13.130
I'm now going to remove this code from the video.

00:04:13.130 --> 00:04:15.110
Inside of all routes,

00:04:15.110 --> 00:04:18.425
let's remove the router.get section,

00:04:18.425 --> 00:04:21.430
as we don't need this for this project.

00:04:21.430 --> 00:04:26.805
Then all hotels.pug, all we need to remove is p equals name,

00:04:26.805 --> 00:04:29.190
and restore this box how it was.

00:04:29.190 --> 00:04:33.560
But we'll come back to route parameters quite a bit later on in this project,

00:04:33.560 --> 00:04:39.330
where we'll be passing in any hotel IDs along with booking information.
