WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.130 --> 00:00:03.930
This sign-up form which you created in

00:00:03.930 --> 00:00:08.725
the last video is only routes of forward-slash sign-up,

00:00:08.725 --> 00:00:11.965
and also the user form mixing,

00:00:11.965 --> 00:00:17.475
which we created up at the top is posting to the current URL,

00:00:17.475 --> 00:00:20.235
since we left the action as an empty string.

00:00:20.235 --> 00:00:23.550
This will be posting to the sign-up routes.

00:00:23.550 --> 00:00:30.410
Therefore, we can create a post request inside of the index.js to handle this request,

00:00:30.410 --> 00:00:39.865
so go over to the index.js and then down to our user routes, so router.post.

00:00:39.865 --> 00:00:44.200
This is also going to go to the sign-up routes,

00:00:44.200 --> 00:00:47.760
so as a string forward-slash sign-up,

00:00:47.760 --> 00:00:51.345
we'll make use again of our user controller,

00:00:51.345 --> 00:00:55.030
and this time we'll create the signUpPost,

00:00:57.740 --> 00:01:00.455
add a semicolon at the end,

00:01:00.455 --> 00:01:03.350
over to the user controller,

00:01:03.740 --> 00:01:06.540
down to the very bottom,

00:01:06.540 --> 00:01:12.460
this time it's exports.signUp and then Post.

00:01:12.460 --> 00:01:15.715
This is going to be equal to an array,

00:01:15.715 --> 00:01:20.080
so which we created a little differently to what we normally do.

00:01:20.080 --> 00:01:22.930
We will still be creating a function soon down

00:01:22.930 --> 00:01:25.599
at the bottom with the request and response,

00:01:25.599 --> 00:01:28.285
but this time I've added in an array.

00:01:28.285 --> 00:01:31.090
We're going to first include inside here

00:01:31.090 --> 00:01:34.030
some form validation functions to check

00:01:34.030 --> 00:01:38.075
the user's input for any malicious input or errors,

00:01:38.075 --> 00:01:40.290
so let's add a comment.

00:01:40.290 --> 00:01:44.165
First of all, we're going to validate the user's data.

00:01:44.165 --> 00:01:47.600
This will basically clean up the user inputs and

00:01:47.600 --> 00:01:51.280
then make it safe to pass on to our server.

00:01:51.280 --> 00:01:55.550
Form inputs, sort common way for hackers to input code,

00:01:55.550 --> 00:02:00.815
since it is a direct communication between a hacker and also the server.

00:02:00.815 --> 00:02:03.245
Therefore, we need to use validation and

00:02:03.245 --> 00:02:08.510
sanitization to clean up the input before it reaches the server.

00:02:08.510 --> 00:02:13.460
To do this, I'm going to include a node package called express validator,

00:02:13.460 --> 00:02:16.630
which we install as an npm package.

00:02:16.630 --> 00:02:20.205
Down to the terminal, close this down,

00:02:20.205 --> 00:02:24.165
so the command is npm space i,

00:02:24.165 --> 00:02:31.575
and the package is express-validator, hit Enter.

00:02:31.575 --> 00:02:35.630
This package will allow us to do two main things,

00:02:35.630 --> 00:02:38.870
validation and also sanitization.

00:02:38.870 --> 00:02:41.960
Validation is the process of making sure the user

00:02:41.960 --> 00:02:45.160
has entered values in the correct format,

00:02:45.160 --> 00:02:49.490
a bit like our models we created for the user and hotel.

00:02:49.490 --> 00:02:53.915
It can make sure username is a minimum number of characters,

00:02:53.915 --> 00:02:56.720
if the field has alphanumeric data,

00:02:56.720 --> 00:02:59.810
if a password matches, and so on.

00:02:59.810 --> 00:03:03.595
Sanitization is a process which removes,

00:03:03.595 --> 00:03:07.730
replaces characters entered into the input fields,

00:03:07.730 --> 00:03:11.495
which may be used to send malicious data to the server.

00:03:11.495 --> 00:03:17.135
Express validator comes with modules we can use for both of these tasks.

00:03:17.135 --> 00:03:22.145
If we go to the sidebar and open up on node modules,

00:03:22.145 --> 00:03:27.100
scroll down to the express validator which we just installed,

00:03:27.100 --> 00:03:30.315
so just here, open this up.

00:03:30.315 --> 00:03:35.940
Inside this folder, we're going to be using both the check and filter modules,

00:03:35.940 --> 00:03:39.710
some over in the userController.js file,

00:03:39.710 --> 00:03:44.305
we can require these at the top of this file, so scroll up,

00:03:44.305 --> 00:03:50.595
and then we can add a comment of express validator.

00:03:50.595 --> 00:03:55.245
Set up a constant, the curly braces.

00:03:55.245 --> 00:03:58.060
The first one is going to be check,

00:03:58.060 --> 00:04:06.420
which is equals to require the express-validator,

00:04:06.420 --> 00:04:08.804
which is the name of the package,

00:04:08.804 --> 00:04:13.330
forward-slash check, which is the name of the module we need to include.

00:04:13.330 --> 00:04:15.375
Remember, doing things like this,

00:04:15.375 --> 00:04:17.654
if we add the curly braces,

00:04:17.654 --> 00:04:20.660
this is used to import a single member of

00:04:20.660 --> 00:04:25.075
our module and then store it inside of a variable name called check.

00:04:25.075 --> 00:04:29.135
So this check constant will be used to validate the data.

00:04:29.135 --> 00:04:31.835
Next from the same module,

00:04:31.835 --> 00:04:35.150
we can also use the validation results,

00:04:35.150 --> 00:04:40.890
so add a comma, add validation results.

00:04:40.890 --> 00:04:47.210
This runs the validation and stores any validation errors into a result objects,

00:04:47.210 --> 00:04:49.310
but more on this soon.

00:04:49.310 --> 00:04:52.820
Next, we can also require the filter module and

00:04:52.820 --> 00:04:56.245
store it inside of a constant called sanitize.

00:04:56.245 --> 00:05:03.145
On the next line, create a constant with the variable name this time of sanitize.

00:05:03.145 --> 00:05:05.984
This is equal to require,

00:05:05.984 --> 00:05:09.040
pass in our express validator,

00:05:11.210 --> 00:05:15.910
the module name which is forward-slash filter.

00:05:16.390 --> 00:05:19.280
This module, as you may have guessed,

00:05:19.280 --> 00:05:22.190
is for sanitizing the user's data.

00:05:22.190 --> 00:05:29.260
Let's begin by validating the data using a check constant which is set up above here.

00:05:29.260 --> 00:05:31.560
Down to our array,

00:05:31.560 --> 00:05:34.354
underneath the validate data comments,

00:05:34.354 --> 00:05:35.810
we can use our check,

00:05:35.810 --> 00:05:37.565
which is the constant.

00:05:37.565 --> 00:05:40.310
Inside here we can add in our field name,

00:05:40.310 --> 00:05:43.100
which is first underscore name.

00:05:43.100 --> 00:05:48.275
These field names need to match the names which you have inside of our user form,

00:05:48.275 --> 00:05:53.460
so just here, back to the controller.

00:05:53.460 --> 00:06:00.425
The first method I'm going to check is if the length is a certain value.

00:06:00.425 --> 00:06:03.754
We do this by passing in a options objects,

00:06:03.754 --> 00:06:08.710
where we can check if the minimum length is equal, I'm going to set this to one.

00:06:08.710 --> 00:06:14.075
So isLength is a method which is being provided by the express validator,

00:06:14.075 --> 00:06:16.025
as will be all the rest of the ones,

00:06:16.025 --> 00:06:17.600
which we're going to add in now.

00:06:17.600 --> 00:06:21.610
We can also chain onto the end as many of these as we like.

00:06:21.610 --> 00:06:24.975
The next one I'm going to add with message.

00:06:24.975 --> 00:06:28.190
Inside here we can pass in a message if

00:06:28.190 --> 00:06:32.300
the length doesn't meet the minimum value which you pass in.

00:06:32.300 --> 00:06:39.240
This is going to be a text string of 'First name must be specified',

00:06:41.180 --> 00:06:43.785
and then onto the next line.

00:06:43.785 --> 00:06:47.255
I'm also going to chain to something else onto the end.

00:06:47.255 --> 00:06:49.520
We could keep going across the same line,

00:06:49.520 --> 00:06:53.315
but I'm going to add this on the next line, just so it's more clear.

00:06:53.315 --> 00:07:00.540
This time we're going to check if the text is alphanumeric with dot isAlphanumeric,

00:07:00.560 --> 00:07:03.270
the brackets just afterwards,

00:07:03.270 --> 00:07:08.930
and then we can also chain on a message just like we did above, so with message.

00:07:08.930 --> 00:07:11.750
Then pass in a string which you're going to display to

00:07:11.750 --> 00:07:15.685
the user if the result is not alphanumeric.

00:07:15.685 --> 00:07:21.970
Add a text string of 'First name must be alphanumeric'.

00:07:24.000 --> 00:07:28.885
This is the end of our first check on the first name field.

00:07:28.885 --> 00:07:31.660
We can add a comma just afterwards.

00:07:31.660 --> 00:07:35.230
But also pretty much going to do the same for the surname.

00:07:35.230 --> 00:07:37.885
Let's copy these two lines,

00:07:37.885 --> 00:07:40.375
add these in below.

00:07:40.375 --> 00:07:43.495
The only difference is the field name.

00:07:43.495 --> 00:07:51.625
Check this time the surname and then also we can change the text.

00:07:51.625 --> 00:07:59.185
The surname must be specified and also the surname must be alphanumeric.

00:07:59.185 --> 00:08:04.660
Again, make sure that the comma is on the end, so you see check.

00:08:04.660 --> 00:08:08.725
This time we're going to select the email field from our form.

00:08:08.725 --> 00:08:12.850
We can chain onto the end of this dot is email.

00:08:12.850 --> 00:08:16.210
This is a method which we provided write with express

00:08:16.210 --> 00:08:21.175
valid data which will check if this field corresponds to a email format.

00:08:21.175 --> 00:08:24.505
If it doesn't, we're also going to add the message.

00:08:24.505 --> 00:08:31.700
With message, and this is going to be a text string of invalid email address.

00:08:32.820 --> 00:08:37.090
Just like the ones above, we need to add a comma just afterwards.

00:08:37.090 --> 00:08:39.355
We can also check the next field,

00:08:39.355 --> 00:08:41.995
which is the confirm email.

00:08:41.995 --> 00:08:44.695
This also needs to be a string.

00:08:44.695 --> 00:08:48.370
Confirm underscore email.

00:08:48.370 --> 00:08:51.550
This is going to be a little bit more complex.

00:08:51.550 --> 00:08:57.265
We need to now check if the emails match and also if the passwords match too.

00:08:57.265 --> 00:09:00.370
Students, we can use a custom validator.

00:09:00.370 --> 00:09:07.015
Let's first set up the check and add our empty custom validator function just for now.

00:09:07.015 --> 00:09:09.685
We've got our field name selected.

00:09:09.685 --> 00:09:13.120
Let's chain onto the end the custom validator,

00:09:13.120 --> 00:09:18.250
with dot custom and then we can also chain on dot with

00:09:18.250 --> 00:09:24.760
message and we'll come back to this one in just a moment.

00:09:24.760 --> 00:09:28.450
Inside a custom and we can pass in a function.

00:09:28.450 --> 00:09:33.040
The first parameter is the value which it receives from the field.

00:09:33.040 --> 00:09:35.620
Add the brackets inside here,

00:09:35.620 --> 00:09:39.865
the first value, which is coming from our form.

00:09:39.865 --> 00:09:43.840
This is going to be coming from our confirm email field.

00:09:43.840 --> 00:09:48.610
The second value is going to be inside of an object.

00:09:48.610 --> 00:09:54.040
Add an options object where we can pass in multiple values into here.

00:09:54.040 --> 00:09:57.354
But we only need to access to the request object,

00:09:57.354 --> 00:09:59.395
which we can also pass in.

00:09:59.395 --> 00:10:02.485
Now this gives us all the information we need.

00:10:02.485 --> 00:10:05.440
We have the value of confirm email,

00:10:05.440 --> 00:10:08.080
and we also have the request object,

00:10:08.080 --> 00:10:11.695
which has stored inside all of the other fields.

00:10:11.695 --> 00:10:16.330
We can now finish off our function by comparing the two fields.

00:10:16.330 --> 00:10:18.265
Just after the brackets,

00:10:18.265 --> 00:10:22.390
we can set to obey ES6 arrow function to check if the value,

00:10:22.390 --> 00:10:24.100
which is our first field.

00:10:24.100 --> 00:10:27.190
This is the data coming from confirm email.

00:10:27.190 --> 00:10:30.325
Check if this is equal to the request,

00:10:30.325 --> 00:10:36.550
which is the request object passed in dot body dot email.

00:10:36.550 --> 00:10:40.120
Here we're grabbing the original email field,

00:10:40.120 --> 00:10:41.860
which is this one just here.

00:10:41.860 --> 00:10:48.040
Then we're checking it's the same value which is stored in value as this field just here.

00:10:48.040 --> 00:10:51.670
All that's left now to do is to pass in a message which is

00:10:51.670 --> 00:10:55.880
a string of email addresses do not match,

00:10:59.130 --> 00:11:01.900
with a comma at the end.

00:11:01.900 --> 00:11:06.700
The final two fields I have for the password and also for confirm password.

00:11:06.700 --> 00:11:09.925
We can do pretty much the same as this email.

00:11:09.925 --> 00:11:12.460
First of all, we'll do our first check for

00:11:12.460 --> 00:11:17.110
the initial password fields, check the password.

00:11:17.110 --> 00:11:20.305
We're going to check if this is a minimum length.

00:11:20.305 --> 00:11:23.560
Let's go for six characters.

00:11:23.560 --> 00:11:28.705
Passing our objects, minimum of six.

00:11:28.705 --> 00:11:33.019
On the next line, we can use dot with message.

00:11:34.050 --> 00:11:37.310
Invalid password.

00:11:38.850 --> 00:11:43.880
Passwords must be a minimum of six characters.

00:11:49.380 --> 00:11:53.050
Make sure the comma is at the end of this line.

00:11:53.050 --> 00:11:58.105
So now we can also confirm the password using the custom validator.

00:11:58.105 --> 00:12:00.265
Just like the email above,

00:12:00.265 --> 00:12:05.605
Let's copy the custom validator and paste this just below the password.

00:12:05.605 --> 00:12:10.060
Inside here, all we need to do is change a couple of fields.

00:12:10.060 --> 00:12:14.014
The first one is to be confirm password,

00:12:14.014 --> 00:12:16.185
to grab this field.

00:12:16.185 --> 00:12:20.685
This is also going to be stored inside of this value as the first argument.

00:12:20.685 --> 00:12:24.375
We also need to pass in the request just like before.

00:12:24.375 --> 00:12:28.205
Let's get all the information from all the rest of these fields.

00:12:28.205 --> 00:12:30.445
We then check if the value,

00:12:30.445 --> 00:12:33.249
which is this field just here of confirm,

00:12:33.249 --> 00:12:37.165
is an equal to request or body dot password,

00:12:37.165 --> 00:12:39.745
which is this field just above.

00:12:39.745 --> 00:12:42.295
We can then change the text.

00:12:42.295 --> 00:12:45.350
All passwords do not match.

00:12:49.520 --> 00:12:52.935
Make sure the comma is on the end again.

00:12:52.935 --> 00:12:56.550
After our validation, we can again set our function,

00:12:56.550 --> 00:13:01.970
as usual, passing in it the request and response object along with next.

00:13:01.970 --> 00:13:05.484
Let's set this up as an ES6 arrow function,

00:13:05.484 --> 00:13:07.644
passing in the request,

00:13:07.644 --> 00:13:11.050
the response, and also next.

00:13:11.050 --> 00:13:13.060
Up at the top of this file,

00:13:13.060 --> 00:13:17.995
we created a constant called validation results just inside of here,

00:13:17.995 --> 00:13:23.860
which we can now add inside of our function taking in the request object.

00:13:23.860 --> 00:13:26.695
Scroll down to our function,

00:13:26.695 --> 00:13:30.265
add in the validation results.

00:13:30.265 --> 00:13:33.710
Pass in the request object.

00:13:33.720 --> 00:13:39.055
This extracts any validation errors from the request objects.

00:13:39.055 --> 00:13:42.820
We can then store them in a constant to make use of.

00:13:42.820 --> 00:13:46.510
At the start, we can store a constant with a name of

00:13:46.510 --> 00:13:50.920
errors and set this to our validation results.

00:13:50.920 --> 00:13:54.380
Just make this a comma just on here.

00:13:54.480 --> 00:14:00.280
Now I want to set up an if statement to check if we have any errors.

00:14:00.280 --> 00:14:06.220
Passing this errors constants and then after that,

00:14:06.220 --> 00:14:09.020
we can add dot is empty.

00:14:10.920 --> 00:14:16.105
Then the brackets just afterwards and make sure this is spelled correctly.

00:14:16.105 --> 00:14:18.010
Dot is empty is

00:14:18.010 --> 00:14:23.245
a validation result method which we can use to check if there were any errors.

00:14:23.245 --> 00:14:26.920
Currently, we checking if the errors array is empty,

00:14:26.920 --> 00:14:31.090
but we want to do the opposite and check if there are any errors.

00:14:31.090 --> 00:14:35.515
We can do the opposite by adding a exclamation mark just in front.

00:14:35.515 --> 00:14:38.665
This section is going to handle any errors.

00:14:38.665 --> 00:14:41.210
There are errors.

00:14:41.580 --> 00:14:45.040
Then afterwards we can add an else section.

00:14:45.040 --> 00:14:48.640
This section is going to be four no errors.

00:14:48.640 --> 00:14:50.915
Inside of the if section,

00:14:50.915 --> 00:14:52.610
if there are any errors,

00:14:52.610 --> 00:14:56.480
we can add a res dot render to again show the sign of

00:14:56.480 --> 00:15:01.455
form and also a new title of please fix the following errors.

00:15:01.455 --> 00:15:08.675
Res dot render, we can redisplay the same sign-up form.

00:15:08.675 --> 00:15:11.490
Sign underscore up.

00:15:13.410 --> 00:15:19.019
Then add a comma, pass in our title inside of the object.

00:15:20.380 --> 00:15:25.020
The title of please fix the following errors,

00:15:30.240 --> 00:15:32.770
then a semicolon at the end.

00:15:32.770 --> 00:15:36.130
Let's go over to the browser and test this out.

00:15:36.130 --> 00:15:37.990
If we save this file,

00:15:37.990 --> 00:15:42.430
reload our sign-up route. Seem to have an error.

00:15:42.430 --> 00:15:43.990
Oh, we need to restart the server.

00:15:43.990 --> 00:15:51.685
[inaudible] start, reload our sign-up route.

00:15:51.685 --> 00:15:55.930
First of all, let's test this out with some valid data.

00:15:55.930 --> 00:16:01.720
Let's add anything inside of here which means the minimum number of characters,

00:16:01.720 --> 00:16:03.940
and also the date format.

00:16:03.940 --> 00:16:09.470
We can add anything inside here. Click on Confirm.

00:16:09.600 --> 00:16:15.950
We don't see anything happening at present because all this data is valid.

00:16:15.950 --> 00:16:21.590
We've not set anything else up inside of this else block to handle what to do next.

00:16:21.590 --> 00:16:25.655
We also see the same title of user sign-up,

00:16:25.655 --> 00:16:31.755
which means we haven't been redirected to this sign-up with the different title.

00:16:31.755 --> 00:16:37.505
Now let's stop this and we can add in some invalid data.

00:16:37.505 --> 00:16:41.880
Let's reduce the password to be below six characters.

00:16:41.880 --> 00:16:48.355
We can change it to not look like an email, click Confirm.

00:16:48.355 --> 00:16:53.950
The web browser is stopping us from doing that because this is set to an email field.

00:16:53.950 --> 00:16:57.640
Let's just stick with the password for now. Click on Confirm.

00:16:57.640 --> 00:17:02.075
Now we get redirected to the same pole slash sign-up route,

00:17:02.075 --> 00:17:07.410
but this time we using the page title or please fix the following errors.

00:17:07.410 --> 00:17:10.955
We've not passed the errors to this template just yet.

00:17:10.955 --> 00:17:12.305
But this is a good sign,

00:17:12.305 --> 00:17:15.680
meaning we're now detecting if there are any errors and

00:17:15.680 --> 00:17:20.160
then rendering our sign-up template with a different page title.
