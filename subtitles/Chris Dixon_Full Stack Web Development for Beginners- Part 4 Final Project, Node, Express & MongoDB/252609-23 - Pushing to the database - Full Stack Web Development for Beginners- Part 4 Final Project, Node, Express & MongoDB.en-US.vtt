WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.530 --> 00:00:06.960
We all now set to get to work pushing the hotel data to our Mongo database.

00:00:06.960 --> 00:00:12.510
In the last video, we created a template called Art_hotel.

00:00:12.510 --> 00:00:15.210
This form is setup to make a post request.

00:00:15.210 --> 00:00:19.155
If you go to the top, we can see the method is set to post.

00:00:19.155 --> 00:00:24.600
This will post our form data so we can go ahead and use it in our controller.

00:00:24.600 --> 00:00:28.185
Also, the action is set to an empty string,

00:00:28.185 --> 00:00:30.015
which we can see just here.

00:00:30.015 --> 00:00:33.615
This will post the form data to the current routes,

00:00:33.615 --> 00:00:36.400
which is forward/admin, forward/add.

00:00:36.740 --> 00:00:42.475
If we go over to our routes and enter the index.js,

00:00:42.475 --> 00:00:44.960
we already have a get request on

00:00:44.960 --> 00:00:50.765
this forward/add route just here to display our at new hotel form.

00:00:50.765 --> 00:00:54.700
So let's duplicate this line to create a post request.

00:00:54.700 --> 00:00:57.855
So copy this and paste this below.

00:00:57.855 --> 00:01:03.865
We need this to be a post request as we're dealing with a post request from our form.

00:01:03.865 --> 00:01:08.685
So router.post, again we can keep this one as forward/admin,

00:01:08.685 --> 00:01:14.435
forward/add because this is the file path which we're going to be posting to,

00:01:14.435 --> 00:01:18.040
since we've not set our y's in our action.

00:01:18.040 --> 00:01:20.900
So since this is a post request,

00:01:20.900 --> 00:01:24.130
we can change create hotel post,

00:01:24.130 --> 00:01:28.010
and this create hotel post middle-ware will handle what to do

00:01:28.010 --> 00:01:31.415
when we make a post request to this route, i.e.

00:01:31.415 --> 00:01:33.305
when we submit the form.

00:01:33.305 --> 00:01:39.380
Let's set this up in the hotel controller.js under createHotelGet.

00:01:39.380 --> 00:01:42.140
We can do the same for createHotelPost.

00:01:42.140 --> 00:01:51.240
So createHotelPost sets up our function with the request and response.

00:01:52.760 --> 00:01:59.225
The first thing I'm going to do inside here is to see what data we're working with.

00:01:59.225 --> 00:02:05.300
We can see what data is being sent by the form by using res.json,

00:02:05.300 --> 00:02:07.870
so I'll put the data as JSON,

00:02:07.870 --> 00:02:10.290
then pass in the request a body,

00:02:10.290 --> 00:02:14.195
and this is where the data is stored in our quest objects.

00:02:14.195 --> 00:02:22.280
So inside of our function at res.json and the form data is stored in the body of

00:02:22.280 --> 00:02:24.485
the request objects so pass in

00:02:24.485 --> 00:02:32.630
request.body gives us a save and then over to the browser, get that reload.

00:02:32.630 --> 00:02:36.500
Now we can fill in some form data to submit.

00:02:36.500 --> 00:02:39.370
That's just adding a test.

00:02:39.370 --> 00:02:43.425
That's a test data, choose an image,

00:02:43.425 --> 00:02:45.824
into our Travel project,

00:02:45.824 --> 00:02:47.830
and then the public folder,

00:02:47.830 --> 00:02:51.620
images, and we can choose any hotel image.

00:02:51.620 --> 00:02:54.140
So I'm going to select Hotel 1,

00:02:54.140 --> 00:02:56.700
a star rating of three,

00:02:56.700 --> 00:03:03.680
country, Portugal and any price is fine.

00:03:03.680 --> 00:03:07.470
We confirm, so as soon as we hit Confirm,

00:03:07.470 --> 00:03:10.175
we then make a post request from this form.

00:03:10.175 --> 00:03:15.490
This post request is going to forward/Admin, forward/add.

00:03:15.490 --> 00:03:21.435
We set this up inside of our index.js to handle this post request to this route.

00:03:21.435 --> 00:03:24.625
This is then triggering our hotel controller,

00:03:24.625 --> 00:03:28.400
which is then returning our JSON since we are doing

00:03:28.400 --> 00:03:32.435
res.json and then passed in the request.body,

00:03:32.435 --> 00:03:35.950
which stores the data being sent by the form.

00:03:35.950 --> 00:03:40.595
So now we can see the JSON version of our hotel which we just added.

00:03:40.595 --> 00:03:45.370
We can see this data is setup in the same format as our model.

00:03:45.370 --> 00:03:50.045
This gives us a better idea of the data we're now working with.

00:03:50.045 --> 00:03:52.280
This form has been set up to be the same as

00:03:52.280 --> 00:03:56.080
our model so the data is in the correct format.

00:03:56.080 --> 00:04:01.580
Now we know we have an object for our hotel stored in request.body.

00:04:01.580 --> 00:04:06.070
Will we use this data in our model to push to the database?

00:04:06.070 --> 00:04:09.605
So we need to require our hotel model first,

00:04:09.605 --> 00:04:11.440
the top level file.

00:04:11.440 --> 00:04:14.280
So back to the hotel controller,

00:04:14.280 --> 00:04:16.145
and at the very top,

00:04:16.145 --> 00:04:21.155
we can set up a constant called Hotel with capital H,

00:04:21.155 --> 00:04:24.715
and this will require the models.

00:04:24.715 --> 00:04:27.540
So as a string when it's passing the file path,

00:04:27.540 --> 00:04:31.380
so let's go up to our model's folder,

00:04:31.380 --> 00:04:35.035
and then the name of the model was Hotel.

00:04:35.035 --> 00:04:40.410
We can then use this Hotel model down in createHotelPost.

00:04:40.410 --> 00:04:43.440
So we're going to set up a new Hotel,

00:04:43.440 --> 00:04:47.155
pass in the data from request.body,

00:04:47.155 --> 00:04:52.130
which we've seen is the object which contains all the fields from our form.

00:04:52.130 --> 00:04:56.150
They install is inside of a variable or a constant.

00:04:56.150 --> 00:05:01.060
So const hotel equals our new Hotel.

00:05:01.060 --> 00:05:05.660
So now we have our hotel and we can go ahead and call safe.

00:05:05.660 --> 00:05:07.655
But one thing first,

00:05:07.655 --> 00:05:10.820
I'm going to mark this function as async.

00:05:10.820 --> 00:05:13.940
Just after the equals,

00:05:13.940 --> 00:05:17.705
we can mark this function as an async function.

00:05:17.705 --> 00:05:23.600
This is something which is new in ES 2017 called async await.

00:05:23.600 --> 00:05:28.910
It really does make our lives a lot easier when working with asynchronous code.

00:05:28.910 --> 00:05:31.850
What it basically allows us to do is to pause

00:05:31.850 --> 00:05:35.410
a function until a line of code has finished running.

00:05:35.410 --> 00:05:40.190
First of all, we mark the function async, just like we did there,

00:05:40.190 --> 00:05:42.995
and then the next task our function has,

00:05:42.995 --> 00:05:46.435
is to call save to say this to our database.

00:05:46.435 --> 00:05:52.045
We do this with our hotel constant and then call.save.

00:05:52.045 --> 00:05:53.900
With the save, however,

00:05:53.900 --> 00:05:56.360
we want to make sure the hotel has finished

00:05:56.360 --> 00:05:59.615
saving before we can start doing things with it.

00:05:59.615 --> 00:06:04.740
To do this, we can add a wait before our hotel.save,

00:06:05.570 --> 00:06:08.360
adding a wait before this line.

00:06:08.360 --> 00:06:11.540
We'll make sure this code pauses and then wait

00:06:11.540 --> 00:06:15.170
for this to finish before moving on to the next line.

00:06:15.170 --> 00:06:19.970
The reason why we want to make sure we await the hotel saving before moving

00:06:19.970 --> 00:06:26.440
on is because we will assume new this hotel data immediately after the save.

00:06:26.440 --> 00:06:30.105
So we want to make sure that the save has completed,

00:06:30.105 --> 00:06:36.250
it's available before calling any more lines of code which need this hotel data.

00:06:36.250 --> 00:06:40.160
So if we give this to save and then over to the browser,

00:06:40.160 --> 00:06:44.870
gives this a reload and resubmit the form,

00:06:44.870 --> 00:06:50.670
and then go back over to mLab and login to database.

00:06:51.620 --> 00:06:55.450
So let's add in our user details.

00:07:00.140 --> 00:07:02.830
Once our database loads up,

00:07:02.830 --> 00:07:06.640
we can now see on Java collections we have the hotel collection,

00:07:06.640 --> 00:07:09.189
which now has one documents.

00:07:09.189 --> 00:07:11.619
If we click on next to expand,

00:07:11.619 --> 00:07:13.870
we're then taken to our test,

00:07:13.870 --> 00:07:16.480
which is the data which we just submitted.

00:07:16.480 --> 00:07:21.595
This is a big step because we've now saved our hotel to the database.

00:07:21.595 --> 00:07:25.810
But what if there is an error when saving the hotel?

00:07:25.810 --> 00:07:31.030
We need to add something inside of our controller to handle any errors.

00:07:31.030 --> 00:07:35.110
First, we can wrap the code inside the try block.

00:07:35.110 --> 00:07:38.450
So back to createHotelPost,

00:07:38.450 --> 00:07:46.370
we can add try and then move these two lines inside of this try block.

00:07:47.520 --> 00:07:52.600
This will try to run the code inside and test for any errors.

00:07:52.600 --> 00:07:54.400
If there are any errors,

00:07:54.400 --> 00:07:57.310
we can handle them with a catch statements.

00:07:57.310 --> 00:08:01.220
We do this at the end, we catch,

00:08:01.220 --> 00:08:03.735
we pass in the error,

00:08:03.735 --> 00:08:07.179
and then inside here we call next,

00:08:07.179 --> 00:08:10.415
which also takes in the error.

00:08:10.415 --> 00:08:13.465
Calling next, I'm passing in the era,

00:08:13.465 --> 00:08:16.870
will pass the error along the middle-ware chain until it

00:08:16.870 --> 00:08:20.590
reaches an error handler which can deal with it correctly.

00:08:20.590 --> 00:08:23.600
Remember, we already have error handlers setup with

00:08:23.600 --> 00:08:27.455
the express framework inside of our app.js,

00:08:27.455 --> 00:08:30.085
which is down at the bottom here.

00:08:30.085 --> 00:08:34.505
So back to our controller for this next to work correctly,

00:08:34.505 --> 00:08:39.290
we also need to pass in next after the request and response objects.

00:08:39.290 --> 00:08:44.420
So passing next here since we're now using it inside of our function.

00:08:44.420 --> 00:08:47.030
If we head over to mLab,

00:08:47.030 --> 00:08:51.170
inside the browser, we can look at our hotel.

00:08:51.170 --> 00:08:55.235
If we click on this corner and then drag this down.

00:08:55.235 --> 00:08:58.615
If we notice, inside of this hotel which we just added,

00:08:58.615 --> 00:09:05.750
there's been a unique ID added with the field of underscore ID, which is just here.

00:09:05.750 --> 00:09:09.410
Remember from before, we said we wanted to use await to

00:09:09.410 --> 00:09:13.370
wait on the hotel saving this database before moving on.

00:09:13.370 --> 00:09:17.990
Making sure the hotel has successfully saved means we

00:09:17.990 --> 00:09:22.710
now have this ID available before move on to the next line of code.

00:09:22.710 --> 00:09:28.820
This only because I now want to redirect to the hotel once it's been saved.

00:09:28.820 --> 00:09:34.950
We can do this inside of our controller with res.redirect.

00:09:35.950 --> 00:09:39.060
Then passing the file path we want to go to,

00:09:39.060 --> 00:09:43.340
I'm going to use the back ticks since we're going to add some dynamic data.

00:09:43.340 --> 00:09:46.910
So forward/all, and then forward/.

00:09:46.910 --> 00:09:50.380
We can pass in the $ symbol and our curly braces.

00:09:50.380 --> 00:09:54.020
This is something we looked at early on in the JavaScript section.

00:09:54.020 --> 00:09:56.705
So inside here we can pass in a variable.

00:09:56.705 --> 00:09:59.150
So we can access our hotel object,

00:09:59.150 --> 00:10:00.965
which is just here,

00:10:00.965 --> 00:10:05.000
and then the field which is underscore ID,

00:10:05.000 --> 00:10:10.200
and this is the idea which had been added inside of our database just here.

00:10:10.340 --> 00:10:13.170
Add a semicolon at the end.

00:10:13.170 --> 00:10:17.060
Now let's check this is working okay by adding a new hotel.

00:10:17.060 --> 00:10:22.805
So let's go to forward/Admin forward/add, reload the page.

00:10:22.805 --> 00:10:25.770
Let's say test 2.

00:10:25.780 --> 00:10:28.915
Test 2 for the description,

00:10:28.915 --> 00:10:32.200
any image is five here.

00:10:37.790 --> 00:10:43.995
Then click Confirm. We're now redirected to our route,

00:10:43.995 --> 00:10:45.545
which we set just here,

00:10:45.545 --> 00:10:47.300
which will be foward/all,

00:10:47.300 --> 00:10:49.430
and then the hotel ID.

00:10:49.430 --> 00:10:52.350
We can now see this in the URL bar at the top.

00:10:52.350 --> 00:10:54.710
We have our unique ID,

00:10:54.710 --> 00:10:58.220
which is now pulled in from the database because we waited on

00:10:58.220 --> 00:11:02.675
this hotel to be created first before moving on to the redirect.

00:11:02.675 --> 00:11:04.235
If we scroll down,

00:11:04.235 --> 00:11:06.590
we see an error of Not Found.

00:11:06.590 --> 00:11:10.280
This is fine because we know we have not created this route yet,

00:11:10.280 --> 00:11:15.440
but the main thing is we have this unique ID now any in the URL.

00:11:15.440 --> 00:11:21.185
We'll come back to this later when we create a template to display the full hotel detail.

00:11:21.185 --> 00:11:23.345
This is a big step forward now,

00:11:23.345 --> 00:11:24.935
we saved into the database.

00:11:24.935 --> 00:11:28.270
So congratulations, if you now have this working.

00:11:28.270 --> 00:11:33.470
If you don't, make sure to check over your code and take a look at the finished code

00:11:33.470 --> 00:11:39.420
provided or ask in the Q&A sections before moving on to the next video.
