WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.190 --> 00:00:04.260
Earlier when we were logging in and out,

00:00:04.260 --> 00:00:10.995
we had to rely on a page redirect to let us know if this was a successful login or not.

00:00:10.995 --> 00:00:16.620
This video is going to improve our nodes by adding flash messages to the user,

00:00:16.620 --> 00:00:19.980
which will then pop up and the user can also click on

00:00:19.980 --> 00:00:24.225
a little X in the corner to remove them once they've been read.

00:00:24.225 --> 00:00:29.460
We waited until now to add flash messages for a good reason.

00:00:29.460 --> 00:00:33.870
This is because the flash message is stored in the session,

00:00:33.870 --> 00:00:36.630
so we needed to set this up first.

00:00:36.630 --> 00:00:42.540
I'm going to be using a nodes package called Connect Flash to provide these messages.

00:00:42.540 --> 00:00:44.435
Let's install this now.

00:00:44.435 --> 00:00:46.130
This is the GitHub page,

00:00:46.130 --> 00:00:48.290
if you want to find out some more information.

00:00:48.290 --> 00:00:51.800
But for now, I'm going to go over to Visual Studio Code,

00:00:51.800 --> 00:00:53.720
close down the server,

00:00:53.720 --> 00:00:55.535
and then run MPM.

00:00:55.535 --> 00:01:03.340
I connect flash and pulling this package from MPM.

00:01:04.160 --> 00:01:06.230
Once this it is installed,

00:01:06.230 --> 00:01:12.305
we can now go to our app.js file and then require this package up at the top.

00:01:12.305 --> 00:01:15.905
Let's go below our sessions.

00:01:15.905 --> 00:01:22.330
Is that a comments? This is for large messages.

00:01:22.730 --> 00:01:25.220
We'll go ahead and create

00:01:25.220 --> 00:01:31.870
a constant called flash and this is going to require the flash module,

00:01:31.870 --> 00:01:35.730
so this was connect hyphen flash with

00:01:35.730 --> 00:01:42.710
a semicolon and then we can add the flash as middleware to use in our application.

00:01:42.710 --> 00:01:51.215
Let's scroll down a little bit further and we can add this just after our passport lines.

00:01:51.215 --> 00:01:58.830
At the comment, this is going to the middleware,

00:01:58.830 --> 00:02:00.815
so we do this with app.use,

00:02:00.815 --> 00:02:05.370
which will take in the flash package, which we just required.

00:02:05.540 --> 00:02:11.730
Next, we can also add this flush functionality to our own middleware below.

00:02:11.730 --> 00:02:15.170
So let's go down to where we created our own middleware,

00:02:15.170 --> 00:02:16.655
which is just here,

00:02:16.655 --> 00:02:19.340
and then after this req.path,

00:02:19.340 --> 00:02:22.070
we can also add a new local.

00:02:22.070 --> 00:02:28.470
So res.locals, let's go to my local flash and set this equal

00:02:28.470 --> 00:02:35.265
to the req.dot flash and come out at the end.

00:02:35.265 --> 00:02:38.700
This makes the flash functionality available as

00:02:38.700 --> 00:02:42.375
a variable inside of all of our plot templates.

00:02:42.375 --> 00:02:44.214
Having this as a variable,

00:02:44.214 --> 00:02:46.790
is useful for conditional rendering.

00:02:46.790 --> 00:02:49.330
If there are any messages to show,

00:02:49.330 --> 00:02:53.059
we can set up flash for any of our functions.

00:02:53.059 --> 00:02:57.745
But to begin, I'm going to go to the user controllers, login post,

00:02:57.745 --> 00:02:59.930
so save this file and then go to

00:02:59.930 --> 00:03:06.160
the user controller and we need to find login post, which is just here.

00:03:06.160 --> 00:03:12.700
After the successRedirect, we can also add a successFlash,

00:03:13.640 --> 00:03:17.460
and then a string which you want to display to the user of,

00:03:17.460 --> 00:03:20.865
you are now logged in,

00:03:20.865 --> 00:03:24.395
so now will see this text string appeared on the screen,

00:03:24.395 --> 00:03:29.335
rather than having a redirect to show us that we're now logged in.

00:03:29.335 --> 00:03:33.075
Passport work with connect flash by default,

00:03:33.075 --> 00:03:35.985
so this is pretty straightforward to add.

00:03:35.985 --> 00:03:39.770
There's also a failure flash message two which

00:03:39.770 --> 00:03:43.400
we can add for this failure condition down at the bottom.

00:03:43.400 --> 00:03:48.040
Separated by a comma and add failureFlash,

00:03:48.040 --> 00:03:50.415
set this to a string,

00:03:50.415 --> 00:03:56.590
so login fails and will say, "please try again."

00:03:56.930 --> 00:04:01.685
Now we need some way of displaying these messages to the user.

00:04:01.685 --> 00:04:06.395
A convenient place to do this would be in the layout.pug file.

00:04:06.395 --> 00:04:11.590
This file contains our header which is on each page in the projects.

00:04:11.590 --> 00:04:13.800
Go to the layout.pug.

00:04:13.800 --> 00:04:17.285
The first thing I'm going to do is set two constants,

00:04:17.285 --> 00:04:22.555
the flash messages are an object containing both keys and values.

00:04:22.555 --> 00:04:27.905
Let's go for our beach image and we can add this just above this,

00:04:27.905 --> 00:04:30.140
so which is just here.

00:04:30.140 --> 00:04:33.500
Remember JavaScript needs to have the hyphen.

00:04:33.500 --> 00:04:37.460
So -const values is going to be equal

00:04:37.460 --> 00:04:45.760
to objects.values and then we're going to pars in the flash,

00:04:46.130 --> 00:04:50.475
so here we're parsing in the flash messages,

00:04:50.475 --> 00:04:55.460
which is a object and we're going to go ahead and use the dot values method,

00:04:55.460 --> 00:04:59.860
which returns an array of the object's property values.

00:04:59.860 --> 00:05:03.655
Remember, objects are made up of key value pairs,

00:05:03.655 --> 00:05:05.425
we now have the values here,

00:05:05.425 --> 00:05:09.815
so I'm going to duplicate this line and set this to be the keys.

00:05:09.815 --> 00:05:16.595
Change the constant to be keys and this is where we use the dot keys method.

00:05:16.595 --> 00:05:19.820
Again, parsing in the flash messages,

00:05:19.820 --> 00:05:23.255
the keys and the type of message which we want,

00:05:23.255 --> 00:05:26.780
and I'm going to be creating three message types.

00:05:26.780 --> 00:05:29.174
The first one is success,

00:05:29.174 --> 00:05:33.035
and this will be for things such as successful logins,

00:05:33.035 --> 00:05:37.535
also an error type for fail logins and general errors.

00:05:37.535 --> 00:05:41.065
Then the third and final type is for info.

00:05:41.065 --> 00:05:44.780
This will be for general information such as

00:05:44.780 --> 00:05:48.350
"You are now logged out," and then if in along these lines,

00:05:48.350 --> 00:05:51.920
which isn't a general success or error message,

00:05:51.920 --> 00:05:55.670
we will look at how to manually set these message type

00:05:55.670 --> 00:06:00.020
soon when we add more flash messages in the controller.

00:06:00.020 --> 00:06:05.725
Also passports adds these two for the success and failure of a login,

00:06:05.725 --> 00:06:09.645
so these three types are these keys consumer created here.

00:06:09.645 --> 00:06:11.880
Now on to the values.

00:06:11.880 --> 00:06:14.900
The values is basically the text ring,

00:06:14.900 --> 00:06:19.835
such as you ''You are now logged in" or ''Login failed, please try again."

00:06:19.835 --> 00:06:24.770
We only want to show these messages if there actually are any to show,

00:06:24.770 --> 00:06:29.585
so we can add some conditional rendering inside of our layout.pug,

00:06:29.585 --> 00:06:34.045
underneath our two constants will add an if statement.

00:06:34.045 --> 00:06:39.250
If keys.length is greater than zero,

00:06:39.250 --> 00:06:41.030
then underneath a div,

00:06:41.030 --> 00:06:43.625
which will be a container for the message,

00:06:43.625 --> 00:06:46.735
this div is going to have two classes.

00:06:46.735 --> 00:06:50.930
First is a general message class for styling of

00:06:50.930 --> 00:06:57.100
message and then a second class of message underscore and then the key name.

00:06:57.100 --> 00:07:03.245
The first type, so class is equal to how many backticks,

00:07:03.245 --> 00:07:05.980
since this is going to be dynamic data,

00:07:05.980 --> 00:07:10.770
so the first one for styling is message and then the second one of

00:07:10.770 --> 00:07:17.875
message underscore and then we can add our dynamic data of keys.

00:07:17.875 --> 00:07:23.825
This will generate a class name of message info, message success,

00:07:23.825 --> 00:07:25.905
and also message error,

00:07:25.905 --> 00:07:29.404
and we can then use these free styles inside the CSS

00:07:29.404 --> 00:07:33.995
later on to provide some different colors for each message type.

00:07:33.995 --> 00:07:36.480
We have the messages stored in

00:07:36.480 --> 00:07:42.825
this value's constants and we'll just add an S on the end actually, so values.

00:07:42.825 --> 00:07:46.335
I'll put these in a span elements.

00:07:46.335 --> 00:07:50.390
Just below our div intensity one level we can create

00:07:50.390 --> 00:07:54.760
a span which is equal to our values constants.

00:07:54.760 --> 00:08:02.395
Then a second span element with the class of close underscore btn.

00:08:02.395 --> 00:08:06.320
This is going to provide a little cross which the user can

00:08:06.320 --> 00:08:10.105
click on to then remove the flash message,

00:08:10.105 --> 00:08:13.760
so we can find hyphen X just like this or we can use

00:08:13.760 --> 00:08:20.140
the HTML entity of ampersand and then times with the semicolon at the end,

00:08:20.140 --> 00:08:24.410
so inside here we want to run a onclick event.

00:08:24.410 --> 00:08:26.885
Once the span element is being clicked,

00:08:26.885 --> 00:08:32.360
we want to run this on JavaScript which is going to remove all this section just here.

00:08:32.360 --> 00:08:36.035
We can do this by selecting the parent node.

00:08:36.035 --> 00:08:39.940
The parent nodes being this surrounding div just here,

00:08:39.940 --> 00:08:42.930
and then call in the remove method.

00:08:42.930 --> 00:08:50.160
We can add the onclick method and set this to this.parentNode,

00:08:50.160 --> 00:08:55.660
which again is this div just here and then call.remove.

00:08:55.710 --> 00:09:00.580
So this is a font displaying the message in our header section.

00:09:00.580 --> 00:09:03.865
So now let's go over to the browser and try this out.

00:09:03.865 --> 00:09:06.205
So over to your page,

00:09:06.205 --> 00:09:08.875
and we might need to restart the server.

00:09:08.875 --> 00:09:12.470
So npm run devstart.

00:09:12.600 --> 00:09:15.550
Once it's up and running,

00:09:15.550 --> 00:09:19.240
reload the browser, and then we can try logging in.

00:09:19.240 --> 00:09:20.965
So click on Login.

00:09:20.965 --> 00:09:24.890
Down to the bottom, we can add our login details.

00:09:25.170 --> 00:09:29.710
So at first we want to add a unsuccessful login,

00:09:29.710 --> 00:09:32.515
by adding a incorrect password.

00:09:32.515 --> 00:09:34.210
We now get the message of,

00:09:34.210 --> 00:09:36.745
login failed, please try again.

00:09:36.745 --> 00:09:38.470
So we can now click on this,

00:09:38.470 --> 00:09:40.525
so that it removes the message,

00:09:40.525 --> 00:09:43.160
and let's try one more.

00:09:43.200 --> 00:09:46.930
This time we'll answer the correct details,

00:09:46.930 --> 00:09:49.780
and we don't see a success message.

00:09:49.780 --> 00:09:53.710
So let's see what's going on and use a controller.

00:09:53.710 --> 00:09:57.760
We just have a spelling mistake there, so success.

00:09:57.760 --> 00:10:04.850
Reload this. Let's try logging out and then logging back in.

00:10:06.990 --> 00:10:09.385
We'll do this successfully this time,

00:10:09.385 --> 00:10:10.630
and now we get the message of,

00:10:10.630 --> 00:10:12.385
you are now logged in.

00:10:12.385 --> 00:10:16.270
Now we can again click on this to remove the message.

00:10:16.270 --> 00:10:20.800
With this working, we can now add more messages where we need them to

00:10:20.800 --> 00:10:25.180
display in the user controller file dot js.

00:10:25.180 --> 00:10:28.555
We can also add a message for logging out.

00:10:28.555 --> 00:10:33.985
So scrolling down a bit further just after the request or log out.

00:10:33.985 --> 00:10:37.930
We can access req.flush,

00:10:37.930 --> 00:10:41.425
and we want to pass in two things into here.

00:10:41.425 --> 00:10:44.095
The first one is the message type.

00:10:44.095 --> 00:10:47.890
Remember from before we said we're going to have three different message types;

00:10:47.890 --> 00:10:50.350
one for errors, one for success,

00:10:50.350 --> 00:10:52.885
and one for general information.

00:10:52.885 --> 00:10:57.385
Well, this is going to be a info type message with a string of,

00:10:57.385 --> 00:11:00.290
you are now logged out.

00:11:02.250 --> 00:11:07.765
So at this end with the semicolon at the end, that will give us a test.

00:11:07.765 --> 00:11:12.295
Make sure you're still logged in and then click log out,

00:11:12.295 --> 00:11:15.770
and we now have our message at the top here.

00:11:15.770 --> 00:11:19.335
Now on to the hotel controller,

00:11:19.335 --> 00:11:23.010
this also needs some messages too when we

00:11:23.010 --> 00:11:27.245
do things such as add in hotels and also updating.

00:11:27.245 --> 00:11:29.935
So click on the hotel controller,

00:11:29.935 --> 00:11:34.115
and the first one I'm going to go to is push To Cloudinary,

00:11:34.115 --> 00:11:37.155
which is one of the early ones which were added.

00:11:37.155 --> 00:11:45.370
So it just up here, down to the catch section, let's add request.flash.

00:11:47.280 --> 00:11:50.530
So this is going to be a error message.

00:11:50.530 --> 00:11:52.300
So the type of error,

00:11:52.300 --> 00:11:54.760
and then we can add a message back to

00:11:54.760 --> 00:11:58.975
the user telling them there was a problem when uploading the image.

00:11:58.975 --> 00:12:01.390
Send a text of, sorry,

00:12:01.390 --> 00:12:11.360
there was a problem uploading your image, please try again.

00:12:12.000 --> 00:12:16.930
Once you did that, we can now go on to create hotel post.

00:12:16.930 --> 00:12:22.480
So scroll down to create hotel post just below, and this is just here.

00:12:22.480 --> 00:12:26.380
We're going to add this in the trisection because this will be

00:12:26.380 --> 00:12:31.390
a success message to say the hotel has been created successfully.

00:12:31.390 --> 00:12:35.650
Just after the await hotel.save,

00:12:35.650 --> 00:12:45.100
request.flash, so the message type was success separated by a comma.

00:12:45.100 --> 00:12:47.650
We need to add this inside the back ticks because we're

00:12:47.650 --> 00:12:50.815
also going to display the hotel name.

00:12:50.815 --> 00:12:55.839
As our template literals, so hotel,

00:12:55.839 --> 00:13:02.485
the hotel underscore name which we have access to because of this hotel variable,

00:13:02.485 --> 00:13:07.070
and then the text of created successfully.

00:13:09.360 --> 00:13:15.775
Okay, good. The next one is in the edit remove post.

00:13:15.775 --> 00:13:18.565
So this is just below, so scroll down.

00:13:18.565 --> 00:13:23.705
This is going to be a info message to say that no matches were found.

00:13:23.705 --> 00:13:29.400
This is the admin section where we go to edit or remove a hotel.

00:13:29.400 --> 00:13:32.940
I remember first we need to pass in a hotel name or

00:13:32.940 --> 00:13:38.110
a hotel ID to then search the database. So let's scroll down.

00:13:38.110 --> 00:13:41.320
If the hotel data is greater than zero,

00:13:41.320 --> 00:13:43.465
this is the success section,

00:13:43.465 --> 00:13:46.270
but once I add this in the else section,

00:13:46.270 --> 00:13:48.890
in case no hotels could be found.

00:13:48.890 --> 00:13:58.030
Request.flash, this is a info message of no matches were found,

00:13:58.740 --> 00:14:01.690
and with just a couple more to our day now,

00:14:01.690 --> 00:14:04.990
so we'll go to update hotel post,

00:14:04.990 --> 00:14:07.990
but of course when we update the hotel.

00:14:07.990 --> 00:14:10.300
So let's go into the try section,

00:14:10.300 --> 00:14:13.075
and just before the redirect,

00:14:13.075 --> 00:14:16.730
we can add request.flash.

00:14:17.340 --> 00:14:21.560
This is going to be a success message,

00:14:21.560 --> 00:14:25.230
and using the back ticks, we can provide a message.

00:14:25.230 --> 00:14:29.555
Again using our dynamic data to pass in the hotel name,

00:14:29.555 --> 00:14:33.485
so hotel.hotel_name,

00:14:33.485 --> 00:14:40.975
updated successfully with the semicolon at the end.

00:14:40.975 --> 00:14:46.640
Then the final one I'm going to add is for delete hotel post.

00:14:46.710 --> 00:14:51.460
This is for a successful deletion of our hotel,

00:14:51.460 --> 00:14:56.425
before the redirect request flash.

00:14:56.425 --> 00:15:02.140
This is going to be a info type message with dynamic data.

00:15:02.140 --> 00:15:06.400
So open up the back ticks, so hotel ID,

00:15:06.400 --> 00:15:11.330
we can then pass in the hotel ID,

00:15:12.690 --> 00:15:16.150
which is this variable just from the top here,

00:15:16.150 --> 00:15:23.840
which we get from the request.params, has been deleted.

00:15:25.950 --> 00:15:30.970
Now give this file a save and then over to the admin of the browser.

00:15:30.970 --> 00:15:38.660
We now need to go to /admin at the new hotel.

00:15:39.540 --> 00:15:44.990
Let's add test for flash,

00:15:45.210 --> 00:15:50.755
and inside here, into our projects,

00:15:50.755 --> 00:15:53.470
the public folder, images,

00:15:53.470 --> 00:15:57.265
and let's go for the logo for now this doesn't matter,

00:15:57.265 --> 00:16:05.900
start writing, confirm.

00:16:05.970 --> 00:16:10.645
Great. Test for flash has been created successfully.

00:16:10.645 --> 00:16:13.150
This all seems to be now working.

00:16:13.150 --> 00:16:16.180
This is it now for flash messages,

00:16:16.180 --> 00:16:21.530
but we'll continue to add them as we need to during the rest of this project.
