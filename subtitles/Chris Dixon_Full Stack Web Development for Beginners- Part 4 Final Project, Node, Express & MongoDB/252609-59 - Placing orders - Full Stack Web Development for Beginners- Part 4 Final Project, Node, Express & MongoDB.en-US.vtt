WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.100 --> 00:00:07.530
The next step, once the customer has reviewed the details on this confirmation page,

00:00:07.530 --> 00:00:10.785
is to be able to actually place order.

00:00:10.785 --> 00:00:15.885
In the hotel mixing we added the route we need to place the order.

00:00:15.885 --> 00:00:18.450
We go to the _hotel,

00:00:18.450 --> 00:00:23.025
and then down the bottom we added a empty route for the href.

00:00:23.025 --> 00:00:25.860
I'm now going to add this as forward slash,

00:00:25.860 --> 00:00:29.835
then order placed, and then forward slash,

00:00:29.835 --> 00:00:32.520
we can add our query inside here.

00:00:32.520 --> 00:00:37.595
Open up the curly braces and also parsing the query,

00:00:37.595 --> 00:00:40.240
which is all the data we need for the order.

00:00:40.240 --> 00:00:43.095
But just one quick thing to fix first,

00:00:43.095 --> 00:00:46.865
we only want this button to show if the user is logged in.

00:00:46.865 --> 00:00:50.200
We can use some form of conditional rendering.

00:00:50.200 --> 00:00:56.050
After the else if we can also add a if section.

00:00:57.020 --> 00:00:59.255
If the user is logged in,

00:00:59.255 --> 00:01:01.250
we then want to display this button,

00:01:01.250 --> 00:01:03.695
so indent this in one level,

00:01:03.695 --> 00:01:07.525
else we can redirect the user to the login screen.

00:01:07.525 --> 00:01:12.120
Let's add the final else section down at the bottom,

00:01:12.120 --> 00:01:16.360
else I'm going to copy this button and then paste it in,

00:01:16.360 --> 00:01:21.065
and this can redirect the user back to forward slash login,

00:01:21.065 --> 00:01:25.325
where they can go ahead and log in for placing an order.

00:01:25.325 --> 00:01:31.050
Please login to order.

00:01:32.710 --> 00:01:38.195
There is room for improvement here if you wanted a little side projects.

00:01:38.195 --> 00:01:41.795
When redirecting to this login form,

00:01:41.795 --> 00:01:45.350
we don't currently keep stored all of the search details.

00:01:45.350 --> 00:01:50.930
The user would need to login and then perform the hotel search once again.

00:01:50.930 --> 00:01:55.990
But I will leave this with you as a challenge if you'd like to go and do this.

00:01:55.990 --> 00:01:59.075
Now, over to the index.js.

00:01:59.075 --> 00:02:02.270
We can handle this order placed route.

00:02:02.270 --> 00:02:06.245
Save this file, index.js.

00:02:06.245 --> 00:02:09.960
Then we can add up a router.get,

00:02:10.130 --> 00:02:12.580
turn that around to just create it,

00:02:12.580 --> 00:02:16.370
which was order placed forward slash,

00:02:16.370 --> 00:02:20.480
and then we're going to capture the data once again from the query string.

00:02:20.480 --> 00:02:29.265
The userController.orderplaced, and the semicolon at the end.

00:02:29.265 --> 00:02:33.565
Then we create order placed over in the userController.

00:02:33.565 --> 00:02:36.905
Just after the booking confirmation,

00:02:36.905 --> 00:02:42.050
let's set this up, exports.orderPlaced.

00:02:42.470 --> 00:02:45.850
This is going to be async,

00:02:46.010 --> 00:02:51.640
request, the response, and also next.

00:02:53.300 --> 00:02:56.295
I'll try block to begin with.

00:02:56.295 --> 00:03:06.285
We can then catch any errors and then parse these errors over to next.

00:03:06.285 --> 00:03:09.770
Just like we did above for the booking confirmation,

00:03:09.770 --> 00:03:17.360
the first thing we need to do is create a constant and grab the data from the req.params.

00:03:17.360 --> 00:03:20.335
In fact, we can just copy this line,

00:03:20.335 --> 00:03:23.445
paste in the try block,

00:03:23.445 --> 00:03:27.245
and then we also need to use the query string module,

00:03:27.245 --> 00:03:31.475
which again we used before to parse the data into JSON.

00:03:31.475 --> 00:03:34.175
So let's set this up as a constant,

00:03:34.175 --> 00:03:42.755
parsedData, this is going to be equal to our query string module we imported.

00:03:42.755 --> 00:03:45.050
Well, to use the parsed method,

00:03:45.050 --> 00:03:48.360
parsing in the data from above.

00:03:48.770 --> 00:03:54.380
Now it's time to make use of our order model we created at the beginning of

00:03:54.380 --> 00:03:59.905
this section to construct a new order to push to the database.

00:03:59.905 --> 00:04:06.025
Blow our parsedData, then create our constant of order.

00:04:06.025 --> 00:04:11.240
I'm set this to a new order, which is O.

00:04:11.600 --> 00:04:15.280
Before we can use this order model O,

00:04:15.280 --> 00:04:18.430
we need to require it at the top of this file.

00:04:18.430 --> 00:04:20.920
This needs to be O,

00:04:20.920 --> 00:04:30.340
and then up at the top just stuff that our hotel and create a new constant called order.

00:04:30.440 --> 00:04:34.590
Require from the models folder,

00:04:34.590 --> 00:04:41.620
which is..slash models, and then forward slash order.

00:04:42.050 --> 00:04:45.120
This order we're constructing needs to be

00:04:45.120 --> 00:04:50.740
the same structure as the order model we created at the beginning of the section.

00:04:50.740 --> 00:04:53.790
If we go over to this order.js,

00:04:53.790 --> 00:04:56.085
this has three different fields,

00:04:56.085 --> 00:04:59.160
the user id, the hotel id,

00:04:59.160 --> 00:05:01.845
and also the order details.

00:05:01.845 --> 00:05:07.815
First, let's add in the user id into our order just here,

00:05:07.815 --> 00:05:13.540
so user_id is going to be equal to a req.user._id.

00:05:16.820 --> 00:05:19.785
Then the hotel id,

00:05:19.785 --> 00:05:26.620
hotel_id, this is going to be equal to the parsedData.id.

00:05:27.920 --> 00:05:31.085
Then finally, the order details,

00:05:31.085 --> 00:05:33.370
which has the type of objects,

00:05:33.370 --> 00:05:41.045
so order_details, then we could set this up as an object,

00:05:41.045 --> 00:05:44.845
just like we specified in the order details.

00:05:44.845 --> 00:05:50.600
This order details will contain all of our information from our query string,

00:05:50.600 --> 00:05:53.435
which is stored inside of parsed data.

00:05:53.435 --> 00:05:56.480
The first one is the duration,

00:05:56.480 --> 00:06:00.130
which is equal to parsedData.duration.

00:06:02.800 --> 00:06:07.440
The second one is the date of departure.

00:06:09.620 --> 00:06:13.500
Again, this is equal to the parsedData,

00:06:13.500 --> 00:06:17.365
and we can access this with.dateOfDeparture.

00:06:17.365 --> 00:06:22.050
The third and final one is the number of guests,

00:06:22.670 --> 00:06:29.895
which is going to be equal to parsedData.numberOfGuests.

00:06:29.895 --> 00:06:33.860
This is all the information which will make up our order,

00:06:33.860 --> 00:06:39.290
we have the hotel details and also the order details along with the user.

00:06:39.290 --> 00:06:43.240
Now all we need to do is call save on this order,

00:06:43.240 --> 00:06:47.200
so we can await the order.save,

00:06:47.200 --> 00:06:51.360
and then after the save we can also add a flash message to

00:06:51.360 --> 00:06:56.350
let the user know the order has been placed, so request.flash.

00:06:56.870 --> 00:07:02.975
This message type is going to be Info and a text string,

00:07:02.975 --> 00:07:05.795
so this is going to be, "Thank you.

00:07:05.795 --> 00:07:09.000
Your order has been placed."

00:07:11.870 --> 00:07:16.445
Then the final thing to do is to then add a reg.redirect,

00:07:16.445 --> 00:07:19.940
which redirects the user to their account,

00:07:19.940 --> 00:07:26.860
so reg.redirect to a route of my-account.

00:07:28.460 --> 00:07:32.240
This route has not yet been created,

00:07:32.240 --> 00:07:34.610
but we'll get onto this very soon.

00:07:34.610 --> 00:07:38.455
Over in the browser, and then we can go ahead and test this out.

00:07:38.455 --> 00:07:42.645
Save this file, over to the browser.

00:07:42.645 --> 00:07:47.640
Only confirmation page at the moment with the button of place your order.

00:07:47.640 --> 00:07:49.670
Now if we reload,

00:07:49.670 --> 00:07:52.235
we now see the button has been changed to,

00:07:52.235 --> 00:07:54.365
please login to order.

00:07:54.365 --> 00:07:59.520
Let's click this, and then we'll go ahead and login.

00:08:02.150 --> 00:08:06.510
Once logged in, we can now go to a hotel.

00:08:07.090 --> 00:08:11.495
Let's go down to the bottom. We can do a search.

00:08:11.495 --> 00:08:16.800
Let's go to the number of guests. Click on "Search".

00:08:16.800 --> 00:08:20.090
We're now taken to the results page which has our details,

00:08:20.090 --> 00:08:24.110
we'd continue through to the confirmation page,

00:08:24.110 --> 00:08:27.625
which again has all the details from the order.

00:08:27.625 --> 00:08:30.795
Then click on place your order.

00:08:30.795 --> 00:08:34.550
We're now taken to my account and we

00:08:34.550 --> 00:08:38.015
also get the flash message of your order has been placed.

00:08:38.015 --> 00:08:41.420
If we scroll down, we also get a follow for message.

00:08:41.420 --> 00:08:43.970
But this is nothing to worry about just yet.

00:08:43.970 --> 00:08:47.045
We'll go ahead and handle this route soon.

00:08:47.045 --> 00:08:52.790
But if we now go over to mLab and head over to our database,

00:08:52.790 --> 00:08:58.340
inside the collections, we now have a orders collection with one document.

00:08:58.340 --> 00:09:04.770
Let's open this up and see what it contains. Expand the view.

00:09:06.350 --> 00:09:10.170
Good. There is our id for the order,

00:09:10.170 --> 00:09:11.965
have the id for the user,

00:09:11.965 --> 00:09:14.344
and also for the hotel.

00:09:14.344 --> 00:09:17.615
We also have the order details for the duration,

00:09:17.615 --> 00:09:19.235
the date of departure,

00:09:19.235 --> 00:09:22.790
and also the number of guests. That's great.

00:09:22.790 --> 00:09:25.280
We can now move on to the next video

00:09:25.280 --> 00:09:28.530
where we're going to create the new user account area,

00:09:28.530 --> 00:09:32.880
where the user can see all of the bookings which they have made.
