WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.415
Now, with the errors being detected,

00:00:02.415 --> 00:00:04.635
we want to display them on the screen.

00:00:04.635 --> 00:00:07.500
To do this we can pass the errors which you have

00:00:07.500 --> 00:00:11.235
stored inside this local variable to our template.

00:00:11.235 --> 00:00:14.280
We can do this just after our title.

00:00:14.280 --> 00:00:19.480
Add a comma, we can pass the name of errors.

00:00:19.670 --> 00:00:22.740
This name of errors will be available inside

00:00:22.740 --> 00:00:27.880
the templates and this is going to be equal to errors dot array,

00:00:28.190 --> 00:00:30.420
this is array method.

00:00:30.420 --> 00:00:33.650
We'll get the full set of errors as an array,

00:00:33.650 --> 00:00:37.250
then will have access to all these errors in our template,

00:00:37.250 --> 00:00:40.300
using the error name which we gave just here.

00:00:40.300 --> 00:00:45.020
Now, we can display these errors as an unordered list inside the templates.

00:00:45.020 --> 00:00:48.730
Back over to our signup dot prog file.

00:00:48.730 --> 00:00:51.290
Under the horizontal line,

00:00:51.290 --> 00:00:53.655
we can say if errors,

00:00:53.655 --> 00:00:58.400
this code will only run if any errors are being passed to the templates.

00:00:58.400 --> 00:01:00.755
Let's create an unordered list.

00:01:00.755 --> 00:01:04.615
Then we can loop through each one of the errors of the array.

00:01:04.615 --> 00:01:08.575
For error, in errors,

00:01:08.575 --> 00:01:11.410
we're going to create a new list of item,

00:01:11.410 --> 00:01:17.735
which will be equal to the error and we can grab the error message with dot MSG.

00:01:17.735 --> 00:01:22.075
Now, we can give this a save and then test if everything is working.

00:01:22.075 --> 00:01:25.660
Save this and then reload.

00:01:26.530 --> 00:01:30.790
I've misspelled [inaudible] , error in errors.

00:01:30.790 --> 00:01:33.495
Over to the controller.

00:01:33.495 --> 00:01:38.290
Just there, give us a reload again.

00:01:39.020 --> 00:01:42.810
This is our error messages from before when we

00:01:42.810 --> 00:01:46.385
set the passwords to be under six characters long.

00:01:46.385 --> 00:01:49.250
We now get a message of invalid passwords.

00:01:49.250 --> 00:01:52.780
Passwords must be a minimum of six characters.

00:01:52.780 --> 00:01:56.400
Let's go back. Let's add

00:01:56.400 --> 00:01:59.660
small errors so we can make sure the e-mail addresses don't match.

00:01:59.660 --> 00:02:03.170
Let's also add our passwords which don't much to

00:02:03.170 --> 00:02:08.370
and also under six characters long and confirm.

00:02:08.480 --> 00:02:12.030
Good, our e-mail addresses don't match.

00:02:12.030 --> 00:02:17.180
We have an invalid password and also our passwords don't much either.

00:02:17.180 --> 00:02:23.305
These are the error messages which we set inside our validation in the user controller.

00:02:23.305 --> 00:02:26.220
These are all warns, which are just here.

00:02:26.220 --> 00:02:29.840
A lot of these messages may never even show up,

00:02:29.840 --> 00:02:32.840
if we have the required field set on old form.

00:02:32.840 --> 00:02:38.255
If you just innovate useful layer of validation, over in the browser,

00:02:38.255 --> 00:02:40.760
once you get an error messages,

00:02:40.760 --> 00:02:44.645
all of these fields which we typed in and now empty.

00:02:44.645 --> 00:02:50.650
We ideally want to keep the details the user has entered but we'll fix assume.

00:02:50.650 --> 00:02:54.135
Next we're going to move on to sanitization.

00:02:54.135 --> 00:02:57.630
This will be a little simpler than the validation.

00:02:57.630 --> 00:03:00.405
Let's go over to our controller.

00:03:00.405 --> 00:03:03.090
Back to signup post.

00:03:03.090 --> 00:03:05.750
Let's go down. First of all,

00:03:05.750 --> 00:03:08.390
let's comment out the rest or render.

00:03:08.390 --> 00:03:14.565
Then we can replace this with a red dot JSON passing in the request,

00:03:14.565 --> 00:03:17.790
the body, which is the details from the form.

00:03:17.790 --> 00:03:20.795
If we save this and then fill out the form,

00:03:20.795 --> 00:03:24.945
go back and then resubmit the form.

00:03:24.945 --> 00:03:27.810
Then we type a password in,

00:03:27.810 --> 00:03:30.240
let's go for testing.

00:03:30.240 --> 00:03:36.590
Confirm. We now, see the JSON data which has been submitted from the form.

00:03:36.590 --> 00:03:43.355
If we click on the back button and then add some HTML inside any of these fields.

00:03:43.355 --> 00:03:47.370
Open up the angle brackets all these in,

00:03:47.370 --> 00:03:51.885
Click on thumb. Password again.

00:03:51.885 --> 00:03:57.215
Confirm. This HTML is also send with the JSON,

00:03:57.215 --> 00:03:59.375
which you can see inside the first name,

00:03:59.375 --> 00:04:02.750
meaning this would also be sent to a web server to.

00:04:02.750 --> 00:04:08.179
Add in code inside of a form input like this could be used maliciously by hackers,

00:04:08.179 --> 00:04:12.205
to send potentially dangerous inputs to the server.

00:04:12.205 --> 00:04:16.520
As a rule, anytime we receive inputs from the user,

00:04:16.520 --> 00:04:19.955
we should always validate and sanitize it too.

00:04:19.955 --> 00:04:22.730
We've taken care of the validation.

00:04:22.730 --> 00:04:25.640
Now, on to the sanitization.

00:04:25.640 --> 00:04:31.400
First of all, we can make use of the sanitized variable which we created earlier,

00:04:31.400 --> 00:04:34.085
when important, the filter module.

00:04:34.085 --> 00:04:38.230
just here we install this inside of the sanitize variable.

00:04:38.230 --> 00:04:42.945
Let's go down just before all function.

00:04:42.945 --> 00:04:46.720
We can access this we had sanitize.

00:04:48.040 --> 00:04:52.700
We can again target each individual field like we did before with

00:04:52.700 --> 00:04:57.485
the validation or we can pass in a style which targets all of the fields.

00:04:57.485 --> 00:05:02.710
Then chain onto the end the trim method, dot trim.

00:05:02.710 --> 00:05:08.365
This will remove any whitespace from before and after the text fields.

00:05:08.365 --> 00:05:11.205
Finally, we can also chain onto the ends,

00:05:11.205 --> 00:05:15.695
dot escape and a comma.

00:05:15.695 --> 00:05:19.610
This will remove any HTML characters which could potentially be

00:05:19.610 --> 00:05:23.780
used by hackers to create a cross-site scripting attack.

00:05:23.780 --> 00:05:30.600
If we save this and then go back over to the browser, and reload.

00:05:30.600 --> 00:05:34.640
We see we have now, removed our HTML tags

00:05:34.640 --> 00:05:38.995
and replaced it with the corresponding HTML entity codes.

00:05:38.995 --> 00:05:44.480
We've now taken care of validating and sanitizing the user's inputs.

00:05:44.480 --> 00:05:47.195
We can now move on to the next video,

00:05:47.195 --> 00:05:51.660
which handles saving this information to our database.
