WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:07.635
At the moment we are handling overall logic inside of this routers index.js file.

00:00:07.635 --> 00:00:11.250
We navigate into a certain route and then all the logic is

00:00:11.250 --> 00:00:15.420
handled inside of this function and also this one which is below.

00:00:15.420 --> 00:00:18.810
This works fine for small applications,

00:00:18.810 --> 00:00:21.825
but we will soon outgrow this type of setup.

00:00:21.825 --> 00:00:25.005
I'm going to separate this logic inside and

00:00:25.005 --> 00:00:28.665
create a controllers folder in the root of all projects.

00:00:28.665 --> 00:00:34.000
Let's go over to the sidebar and create a new folder called controllers.

00:00:35.530 --> 00:00:39.680
Make sure this is at the same level as all level folders,

00:00:39.680 --> 00:00:42.545
such as the bin and the node modules.

00:00:42.545 --> 00:00:44.050
Inside here we can add

00:00:44.050 --> 00:00:48.650
a new JavaScript file for each controller which you want to create.

00:00:48.650 --> 00:00:52.390
Let's click on controllers and then create a new file.

00:00:52.390 --> 00:00:57.265
I'm going to create separate controller for the hotel related logic.

00:00:57.265 --> 00:01:01.090
Then one later on for the users to keep things organized.

00:01:01.090 --> 00:01:06.490
Let's begin by creating hotel controller.js.

00:01:06.950 --> 00:01:11.560
Controller with a capital C and then hit "Enter."

00:01:11.560 --> 00:01:15.730
This file will be a series of functions and we'll basically

00:01:15.730 --> 00:01:19.550
be outsourcing this function section from our router.

00:01:19.550 --> 00:01:21.880
We're going to take this logic,

00:01:21.880 --> 00:01:23.500
put it into our controller,

00:01:23.500 --> 00:01:26.795
and then it references inside of our router.

00:01:26.795 --> 00:01:33.045
Let's begin in our hotel controller.js and begin with A exports.

00:01:33.045 --> 00:01:38.139
This will allow this code to be available in other parts of our application.

00:01:38.139 --> 00:01:42.255
We then give this exported function a name of our choice.

00:01:42.255 --> 00:01:47.045
Try to keep it descriptive though so we know what each one will be doing.

00:01:47.045 --> 00:01:49.870
Let's call this the homepage,

00:01:49.870 --> 00:01:53.530
and then set this to a function.

00:01:54.980 --> 00:02:00.760
This is a function which takes in the request and response objects.

00:02:00.760 --> 00:02:06.710
Let's add these in, so we have full access to them inside of our function.

00:02:06.710 --> 00:02:11.470
Then if we go over to our index.js,

00:02:11.470 --> 00:02:18.450
we can then cut out the res.render from our home routes and then add it

00:02:18.450 --> 00:02:25.790
to our controller and now would also be a good time to change the page title.

00:02:25.790 --> 00:02:28.850
Let's set this to "Let's travel."

00:02:28.850 --> 00:02:31.414
We now have our logic separated,

00:02:31.414 --> 00:02:35.830
so we can now go over to our routers index.js file.

00:02:35.830 --> 00:02:40.610
We can remove this function leaving in just the initial routes and then we

00:02:40.610 --> 00:02:45.575
need to reference our host cell controller.homepage.

00:02:45.575 --> 00:02:54.315
Let's add hotel controller.homepage and then give that a save.

00:02:54.315 --> 00:03:01.155
If we now go over to the browser and then hit "Reload," and go to the homepage,

00:03:01.155 --> 00:03:04.615
we now see a message saying the site can't be reached.

00:03:04.615 --> 00:03:07.960
If we go to Visual Studio and then open up the terminal,

00:03:07.960 --> 00:03:10.730
we can see that the app has crushed.

00:03:10.730 --> 00:03:16.540
This is because we need to require this hotel controller file before we can access it.

00:03:16.540 --> 00:03:19.600
Currently, we're trying to access the hotel controller,

00:03:19.600 --> 00:03:23.200
but we've not yet imported this file.

00:03:23.200 --> 00:03:28.330
To do this, let's go to the top of our file and then we can add a comment.

00:03:28.330 --> 00:03:34.440
So require controllers and then set up a constant,

00:03:34.440 --> 00:03:37.545
so const hotel controller,

00:03:37.545 --> 00:03:43.875
which matches this name just here and then we can require the file.

00:03:43.875 --> 00:03:49.075
We need to add the file path because this is not inside of the node modules folder.

00:03:49.075 --> 00:03:51.955
This is inside of the controllers folder.

00:03:51.955 --> 00:04:01.920
So controllers, forward slash hotel controller and now hit "Save."

00:04:01.920 --> 00:04:04.080
We should now see the app has reloaded.

00:04:04.080 --> 00:04:06.435
We now have the green text.

00:04:06.435 --> 00:04:11.345
Over to the browser, and the app is now working in once more.

00:04:11.345 --> 00:04:15.580
Then we can do the same with the all hotels route too.

00:04:15.580 --> 00:04:20.165
First, let's go over to the hotel controller and create this.

00:04:20.165 --> 00:04:27.350
So just like before, we can say exports.listallhotels.

00:04:29.870 --> 00:04:33.305
Except the E function which takes in the request,

00:04:33.305 --> 00:04:39.669
the response and then over to a router.

00:04:40.790 --> 00:04:46.245
We can take the res.render from these, forward slash all.

00:04:46.245 --> 00:04:52.185
Paste this in, and then references function inside of our router.

00:04:52.185 --> 00:04:54.820
So remove the function from before.

00:04:54.820 --> 00:04:57.310
Again, we want the hotel controller file.

00:04:57.310 --> 00:05:00.395
But this time we want list all hotels.

00:05:00.395 --> 00:05:03.420
Now, let's try this router on the browser.

00:05:03.420 --> 00:05:07.005
So the home route forward slash all,

00:05:07.005 --> 00:05:10.890
scroll down and this still works to.

00:05:10.890 --> 00:05:15.710
So at the moment we've not gained a lot by having separate controllers.

00:05:15.710 --> 00:05:19.505
But these controllers will soon become more complex.

00:05:19.505 --> 00:05:23.840
Especially when we start dealing with databases and obtain the views,

00:05:23.840 --> 00:05:27.110
along with checking any user data for validation.

00:05:27.110 --> 00:05:30.890
It makes sense to start separating things from the start,

00:05:30.890 --> 00:05:35.340
so things don't get too messy as our project grows.
