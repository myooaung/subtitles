WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.950 --> 00:00:03.420
Up at the top of our project,

00:00:03.420 --> 00:00:06.735
we created a hotel search form some time ago.

00:00:06.735 --> 00:00:11.670
Let's get this working in it to allow users to be more specific about their booking.

00:00:11.670 --> 00:00:13.500
We'll not be implementing

00:00:13.500 --> 00:00:18.795
a live booking system but we will still use the dates to add to the customers order.

00:00:18.795 --> 00:00:22.950
This form is located inside of our layout dot pug file.

00:00:22.950 --> 00:00:25.019
If you open up the sidebar,

00:00:25.019 --> 00:00:27.000
the layout dot pug,

00:00:27.000 --> 00:00:31.665
and then we have our form inside the search nav wrapper just here.

00:00:31.665 --> 00:00:34.500
At the moment we have our form element just

00:00:34.500 --> 00:00:38.145
here but it has no action or method attributes.

00:00:38.145 --> 00:00:40.185
Let's go ahead and add these now.

00:00:40.185 --> 00:00:46.140
Open up the brackets and at the action which is going to be equal to forward slash

00:00:46.140 --> 00:00:53.160
results and then the method and that it can to be a POST request.

00:00:53.160 --> 00:00:54.980
When we submit the form,

00:00:54.980 --> 00:00:58.430
we're going to be submitting this two forward slash results.

00:00:58.430 --> 00:01:03.355
Now we need to handle this route inside of the index dot js file.

00:01:03.355 --> 00:01:08.200
The routes folder named index.js.

00:01:08.200 --> 00:01:13.150
Let's close this down. Let's add this in.

00:01:13.150 --> 00:01:16.460
Let's put this just after the countrys.

00:01:16.460 --> 00:01:18.485
On the next line here,

00:01:18.485 --> 00:01:23.670
router, lowercase, and this is a POST request.

00:01:23.670 --> 00:01:26.985
[inaudible] submitting the form data.

00:01:26.985 --> 00:01:31.095
Inside here we needs add the router of forward slash results.

00:01:31.095 --> 00:01:32.880
It's match on form.

00:01:32.880 --> 00:01:37.595
The hotel controller dot and this function is going to be called

00:01:37.595 --> 00:01:43.890
the search results semicolon at the end.

00:01:43.890 --> 00:01:49.400
Let us go over to the hotel controller and create the search results inside here.

00:01:49.400 --> 00:01:51.500
Down at the very bottom,

00:01:51.500 --> 00:01:55.080
exports dot search results.

00:01:56.330 --> 00:02:00.579
This is going to be a sync function,

00:02:01.340 --> 00:02:04.550
request object, the response,

00:02:04.550 --> 00:02:08.835
and also next, then create our function body.

00:02:08.835 --> 00:02:13.585
Inside here we're going to begin with our familiar try and catch block.

00:02:13.585 --> 00:02:21.310
Catch pass in the era calibrates and dynamic capacities onto next.

00:02:21.310 --> 00:02:24.245
Also taken in the era.

00:02:24.245 --> 00:02:28.510
We need to capture the contents of our post request and then

00:02:28.510 --> 00:02:33.025
install it inside of constants so we can use this inside of the function.

00:02:33.025 --> 00:02:35.890
Inside the try block, creates the constants,

00:02:35.890 --> 00:02:43.730
and I'm going to call mine the search query and this is equal to the request dot body.

00:02:44.000 --> 00:02:49.510
Request dot body stores the information passed from or post request i.e.

00:02:49.510 --> 00:02:52.665
Only information which is inside of the form.

00:02:52.665 --> 00:02:56.570
The search is going to be run through the aggregation pipeline.

00:02:56.570 --> 00:03:01.750
Each step will take our search data and then narrow down the results.

00:03:01.750 --> 00:03:05.090
Let's begin by setting up our aggregation and store

00:03:05.090 --> 00:03:09.020
this inside of a constant called search data.

00:03:09.020 --> 00:03:13.930
Capital D set is to await.

00:03:13.930 --> 00:03:17.675
Our hotel model.Thoughts, aggregates,

00:03:17.675 --> 00:03:19.855
just like we've used before.

00:03:19.855 --> 00:03:24.110
Then inside of the brackets we can pass in these square brackets as

00:03:24.110 --> 00:03:29.135
an array so we can pass in our various stages of the aggregation pipeline.

00:03:29.135 --> 00:03:35.675
The initial aggregation stage is going to be the match stage inside the curly braces.

00:03:35.675 --> 00:03:37.700
$ symbol match, just like we used

00:03:37.700 --> 00:03:42.725
before and then we're going to use something which we haven't seen this yet,

00:03:42.725 --> 00:03:46.370
which is $ symbol texts and is he going to be

00:03:46.370 --> 00:03:50.225
used to create a text search on our hotel fields.

00:03:50.225 --> 00:03:55.440
Inside of here, open up the curly braces again, $ symbol search.

00:03:57.200 --> 00:04:02.645
We want to much [inaudible] records to the text entered by the user.

00:04:02.645 --> 00:04:06.110
This can be achieved using this $ symbol text,

00:04:06.110 --> 00:04:08.335
which performs a tech search.

00:04:08.335 --> 00:04:10.940
Here we're passing in the search,

00:04:10.940 --> 00:04:12.505
which is going to be a string,

00:04:12.505 --> 00:04:15.730
which Mongo uses to query our database.

00:04:15.730 --> 00:04:19.040
Boosts which string do we want to use.

00:04:19.040 --> 00:04:22.555
Well, this is the destination from all form.

00:04:22.555 --> 00:04:25.270
If we go back to our layout dot pug file,

00:04:25.270 --> 00:04:28.435
the destination is the first input just here,

00:04:28.435 --> 00:04:32.470
which has this name of destination and this is also passed with

00:04:32.470 --> 00:04:37.880
the post request so it can access it with search query dot destination.

00:04:37.880 --> 00:04:41.540
Let's add this in now, so search query,

00:04:41.540 --> 00:04:47.210
which is our constant just here, dot destination.

00:04:48.440 --> 00:04:53.320
Before we go any further let's see what data is returned back to us.

00:04:53.320 --> 00:04:56.695
We can do this if we go outside of our aggregation,

00:04:56.695 --> 00:05:03.560
was the next line and do a res.json passing in our search data.

00:05:03.560 --> 00:05:06.520
This is the data which should come back from

00:05:06.520 --> 00:05:11.080
MongoDB and it's stored inside this variable just here.

00:05:11.080 --> 00:05:15.140
You just save and then over to the homepage.

00:05:15.140 --> 00:05:17.979
We can create a search.

00:05:18.500 --> 00:05:24.350
I didn't any details inside here doesn't really matter.

00:05:24.350 --> 00:05:28.080
Guests and and hit Search.

00:05:28.080 --> 00:05:33.835
Now we see if we scroll down to the bottom there is an error of text index is required.

00:05:33.835 --> 00:05:37.505
This means we need to index which fields we want to search.

00:05:37.505 --> 00:05:40.430
I'm going to make the hotel name and also the

00:05:40.430 --> 00:05:44.305
country's field searchable by this form input.

00:05:44.305 --> 00:05:47.315
A user could search for the destination,

00:05:47.315 --> 00:05:52.370
just hear much [inaudible] hotel name or by adding a country.

00:05:52.370 --> 00:05:56.125
We indexes fields over in our hotel model.

00:05:56.125 --> 00:05:58.745
Let's go over to the sidebar.

00:05:58.745 --> 00:06:03.250
Inside of our models let's open up the hotel dot js.

00:06:03.250 --> 00:06:07.879
and right down at the very bottom outside of our objects,

00:06:07.879 --> 00:06:11.015
we first begin by accessing our hotel schema,

00:06:11.015 --> 00:06:13.625
which is the name of the constant.

00:06:13.625 --> 00:06:17.690
just at the top here. Back down to the bottom.

00:06:17.690 --> 00:06:23.500
Dot index will announce the index the fields we want to search from our model.

00:06:23.500 --> 00:06:27.255
Pass in an object which takes in the fields.

00:06:27.255 --> 00:06:29.450
The first field we want to search,

00:06:29.450 --> 00:06:31.280
since we're looking for hotels.

00:06:31.280 --> 00:06:33.605
If we go over to mLab,

00:06:33.605 --> 00:06:36.860
inside here, we want to search for the hotel names.

00:06:36.860 --> 00:06:41.720
We have the hotel name field and we also want to search by country too.

00:06:41.720 --> 00:06:45.850
We can use the country field in addition to this.

00:06:45.850 --> 00:06:47.540
Inside of our schema,

00:06:47.540 --> 00:06:49.640
we can add in these two fields.

00:06:49.640 --> 00:06:56.695
The first one is hotel underscore name and this is going to be set to a string of text.

00:06:56.695 --> 00:07:00.455
Then we could do the same with the country,

00:07:00.455 --> 00:07:04.460
cities to text too , hit that safe.

00:07:04.460 --> 00:07:08.675
We can also add any of the fields here too such as the description.

00:07:08.675 --> 00:07:11.630
Unsearch would also look in his field too.

00:07:11.630 --> 00:07:17.185
If We also head over to mLab once again, it reload.

00:07:17.185 --> 00:07:21.640
When its sign in let's sign without details.

00:07:26.930 --> 00:07:30.700
Click on our database name on the top.

00:07:32.690 --> 00:07:37.205
If we scroll down as well as our hotel collection we have inside here,

00:07:37.205 --> 00:07:40.220
we can now see system dot indexes,

00:07:40.220 --> 00:07:42.425
which has two different documents.

00:07:42.425 --> 00:07:47.315
If we open this up, it may look a little confusing at first,

00:07:47.315 --> 00:07:51.800
but soon we expand this we see a reference to a hotel name and also to

00:07:51.800 --> 00:07:57.010
our country so these fields both set-up to be included in our search.

00:07:57.010 --> 00:08:00.590
Now if we go over to the project and then reload the browser,

00:08:00.590 --> 00:08:02.900
and let's do a new search.

00:08:02.900 --> 00:08:11.190
Add our country, our duration and the date is fine. It search.

00:08:11.190 --> 00:08:13.655
But now it gets our JSON data back,

00:08:13.655 --> 00:08:18.595
which matches our two hotels in the country which we added inside the form.

00:08:18.595 --> 00:08:21.905
There is one small problem now at the moment,

00:08:21.905 --> 00:08:27.990
if we then go back and do something such as a search for hotel one,

00:08:28.190 --> 00:08:30.975
hotel one inside here.

00:08:30.975 --> 00:08:33.830
Remember by indexing these two fields,

00:08:33.830 --> 00:08:38.930
we also search in the hotel name as well as the country. This should work.

00:08:38.930 --> 00:08:40.880
If we search though,

00:08:40.880 --> 00:08:46.955
you see a full list of all hotels inside of our database rather than just tell us one.

00:08:46.955 --> 00:08:53.135
This result is because we're not searching for the full hotel one as a phrase.

00:08:53.135 --> 00:08:57.080
Instead, what happens by default is it will return

00:08:57.080 --> 00:09:01.490
a matches for an individual word so we'll see all results for

00:09:01.490 --> 00:09:05.420
the word hotel and also anything matching the number one

00:09:05.420 --> 00:09:09.665
too because all of our hotels have the word hotel in it.

00:09:09.665 --> 00:09:14.080
This is why we see all of these hotels from a database returned.

00:09:14.080 --> 00:09:18.625
To fix this, we can perform a match on the full phrase.

00:09:18.625 --> 00:09:22.730
Only hotel one would be returned for research by using

00:09:22.730 --> 00:09:27.260
what's called escapes double-quotes, which looks like this.

00:09:27.260 --> 00:09:32.130
Go over to our controller.

00:09:32.590 --> 00:09:36.020
The first thing we need to do is surround these inside

00:09:36.020 --> 00:09:39.635
the brackets because we're going to be using dynamic data.

00:09:39.635 --> 00:09:43.385
Then we can use the $ symbol and surround this

00:09:43.385 --> 00:09:47.170
in the curly braces just like we've done previously.

00:09:47.170 --> 00:09:51.310
The next thing we need to do is to add our escapes double-quotes.

00:09:51.310 --> 00:09:53.545
Just after the first bracket,

00:09:53.545 --> 00:09:58.130
we use a backslash and then a double quotes and then we do the same and just

00:09:58.130 --> 00:10:03.310
after this curly brace here with the backslash and then the double quotes.

00:10:03.310 --> 00:10:06.290
The double quotes will treat this as a string.

00:10:06.290 --> 00:10:10.400
All of the words inside of our search query will be searched for

00:10:10.400 --> 00:10:15.200
as a full phrase rather than individual words which we've seen before.

00:10:15.200 --> 00:10:18.800
We also need to escape these quotes using the back slashes.

00:10:18.800 --> 00:10:23.720
These quotes are also rendered to with the text from O variable.

00:10:23.720 --> 00:10:29.590
Let Mongo know the full phrase is to be searched for rather than the individual words.

00:10:29.590 --> 00:10:33.750
If we now save this and then refresh the browser,

00:10:34.340 --> 00:10:38.310
continue over to the homepage.

00:10:38.310 --> 00:10:40.965
You can now search for hotel one.

00:10:40.965 --> 00:10:45.945
Click on search. Now inside the he would see hotel 10,

00:10:45.945 --> 00:10:48.520
12, 11 and one.

00:10:48.520 --> 00:10:53.345
We now only see the hotels which match the phrase of hotel one.

00:10:53.345 --> 00:10:59.610
We see hotel number 10 because it starts with hotel one, save hotel 12.

00:10:59.610 --> 00:11:03.635
This matches the first part of the phrase number 11,

00:11:03.635 --> 00:11:06.210
and also our hotel one.

00:11:06.710 --> 00:11:12.590
All those behavior may not look quite right since we've named our hotels using numbers.

00:11:12.590 --> 00:11:18.190
This type of search would be more effective when these hotels have more realistic names.

00:11:18.190 --> 00:11:22.250
Meaning that the user would not need to type out the full hotel name.

00:11:22.250 --> 00:11:25.040
They may only remember part of the hotel name,

00:11:25.040 --> 00:11:27.805
but will still get the results they need.

00:11:27.805 --> 00:11:32.480
Let's go back and try country, surrounded hotel one.

00:11:32.480 --> 00:11:34.920
Let's type in Mexico.

00:11:36.050 --> 00:11:43.080
Click search and now see Mexico here and also just to get to.

00:11:43.080 --> 00:11:46.035
Good this first field is not working.

00:11:46.035 --> 00:11:47.855
Onto the next ones.

00:11:47.855 --> 00:11:54.715
Next is also a much phase in aggregation pipeline where we filter our unavailable hotels.

00:11:54.715 --> 00:11:58.575
Add a comma just after the first match.

00:11:58.575 --> 00:12:04.320
We can setup our second match just like we did above with tala symbol match.

00:12:04.320 --> 00:12:06.750
Open up the curly braces.

00:12:06.750 --> 00:12:13.460
Then inside here we can check if the available fields is set to a Boolean value of true.

00:12:13.460 --> 00:12:17.825
Now let's go over to mLab and set one of these hotels to be unavailable.

00:12:17.825 --> 00:12:22.930
Lets go for hotel number three, click on edit.

00:12:22.930 --> 00:12:26.860
The availability to be false.

00:12:27.590 --> 00:12:33.840
Down at the bottom, available equal to false. Save and go back.

00:12:34.220 --> 00:12:39.170
Now of course, the project's hit the back button and then change

00:12:39.170 --> 00:12:43.840
our destination to be simply hotel it search.

00:12:43.840 --> 00:12:47.210
Now we have hotel number three, settlement available.

00:12:47.210 --> 00:12:48.620
Now if we scroll down,

00:12:48.620 --> 00:12:51.655
we should see all hotels except number three.

00:12:51.655 --> 00:12:54.825
Keep going right down to the very bottom.

00:12:54.825 --> 00:12:59.550
Great. We don't see any hotel three returned with our results.
