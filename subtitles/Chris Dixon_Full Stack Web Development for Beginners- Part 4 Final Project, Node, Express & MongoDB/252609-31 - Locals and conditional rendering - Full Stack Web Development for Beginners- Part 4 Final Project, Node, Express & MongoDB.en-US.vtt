WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.030 --> 00:00:06.090
We're going to cover a few different things in this video.

00:00:06.090 --> 00:00:09.255
Start with locals, all local variables.

00:00:09.255 --> 00:00:12.705
This is something we've already covered really when templating,

00:00:12.705 --> 00:00:18.375
but we're going to also look at how to make these available to all of the templates too.

00:00:18.375 --> 00:00:21.675
Currently over in the hotelController.

00:00:21.675 --> 00:00:27.435
Let's click on the hotelController.js and go down to the hotel detail.

00:00:27.435 --> 00:00:31.680
Just here, we already passed a local variable to our templates,

00:00:31.680 --> 00:00:33.735
just like we've done many times.

00:00:33.735 --> 00:00:36.365
The data which we passed into this template,

00:00:36.365 --> 00:00:39.350
if we add this to it's own line to make it a little bit more clear,

00:00:39.350 --> 00:00:42.965
this is a object which currently we have the title,

00:00:42.965 --> 00:00:45.140
which is a name value pair,

00:00:45.140 --> 00:00:48.740
and then also a hotel data which is a variable,

00:00:48.740 --> 00:00:50.845
which we created just above.

00:00:50.845 --> 00:00:56.675
Here we're passing in the title and the hotel data which we pulled in from the database.

00:00:56.675 --> 00:01:02.500
We are free to use these locals to pass anything we want to use in this template.

00:01:02.500 --> 00:01:06.665
For example, we'll go ahead and add the name

00:01:06.665 --> 00:01:12.725
of Chris and then over in his hotel detail view.

00:01:12.725 --> 00:01:17.225
We've already seen we can use these just like normal JavaScript variables,

00:01:17.225 --> 00:01:18.815
just like we did here,

00:01:18.815 --> 00:01:23.485
using hotel and then accessing the ID from the object.

00:01:23.485 --> 00:01:27.470
Here we're using the local variables with back ticks,

00:01:27.470 --> 00:01:29.720
so you can mix them with some text.

00:01:29.720 --> 00:01:34.270
We've already also outputted these variables with the equals symbol.

00:01:34.270 --> 00:01:35.655
So we know how to do that.

00:01:35.655 --> 00:01:39.000
It's p equals, and in this name,

00:01:39.000 --> 00:01:42.150
reloads and there we go,

00:01:42.150 --> 00:01:45.315
that's our local variable as the templates,

00:01:45.315 --> 00:01:51.245
and also how we can output a variable when used with plain text using a hash.

00:01:51.245 --> 00:01:53.710
Let's remove this.

00:01:53.710 --> 00:01:57.695
If it mixes with some plain text, such as here,

00:01:57.695 --> 00:02:00.350
we can use the hash, the curly braces,

00:02:00.350 --> 00:02:05.370
and then also pass in our name variable, save and then reload.

00:02:07.070 --> 00:02:10.160
There we go. There's our Update hotel and

00:02:10.160 --> 00:02:13.580
our name of Chris mixed in with the button text.

00:02:13.580 --> 00:02:16.510
Let's remove these examples.

00:02:16.510 --> 00:02:20.630
If we go over to any of the templates, for example,

00:02:20.630 --> 00:02:23.110
if we go to all hotels,

00:02:23.110 --> 00:02:25.665
let's try to do the same.

00:02:25.665 --> 00:02:28.140
Let's try to output our name variable.

00:02:28.140 --> 00:02:30.285
So p equals name,

00:02:30.285 --> 00:02:35.270
and go out to all hotels routes. Click on see all.

00:02:35.270 --> 00:02:40.190
Now if we scroll down we don't see any reference to the name.

00:02:40.190 --> 00:02:43.490
This is because locals, as they sound,

00:02:43.490 --> 00:02:47.735
they are local variables scoped to only a single template,

00:02:47.735 --> 00:02:52.235
which we'll pass them to, so let's remove this, p equals name.

00:02:52.235 --> 00:02:54.820
Also in our hotel controller,

00:02:54.820 --> 00:02:57.905
let's remove our name from here too.

00:02:57.905 --> 00:03:04.610
But it also often cases when we want to pass certain variables to all of our templates to

00:03:04.610 --> 00:03:07.760
use rather than creating a variable in each

00:03:07.760 --> 00:03:11.495
one of these functions and then passing the same data.

00:03:11.495 --> 00:03:16.655
If you remember from early on in the projects over in the app.js.

00:03:16.655 --> 00:03:19.160
Let's go to app.js.

00:03:19.160 --> 00:03:24.295
We talked a little about the app.use middleware, which will have just here.

00:03:24.295 --> 00:03:28.395
This middleware, when we set no routes as the first parameter,

00:03:28.395 --> 00:03:32.750
is an action which is used for every request to our application.

00:03:32.750 --> 00:03:37.345
It basically adds a layer which we pass through for each request.

00:03:37.345 --> 00:03:43.010
We can make use of app.use to create some middleware for all requests,

00:03:43.010 --> 00:03:47.740
which will then go ahead and make our variables available in all templates.

00:03:47.740 --> 00:03:50.865
So let's create this within app.use.

00:03:50.865 --> 00:03:58.170
Let's go up to our app.set and then add in our app.use middleware.

00:03:58.170 --> 00:04:03.589
This is going to take in a function which has access to the request,

00:04:03.589 --> 00:04:07.115
the response, and also next.

00:04:07.115 --> 00:04:10.825
Let's set this up as a normal function.

00:04:10.825 --> 00:04:14.580
When using app.use, this function,

00:04:14.580 --> 00:04:19.565
which is called will also have access to the request and response objects too.

00:04:19.565 --> 00:04:25.180
Remember though if we only want this function to run on a request to a particular route,

00:04:25.180 --> 00:04:28.475
we can add the routing first before this.

00:04:28.475 --> 00:04:32.055
So as the first parameter we can add the string,

00:04:32.055 --> 00:04:34.944
a forward slash admin for example,

00:04:34.944 --> 00:04:36.805
separated by a comma,

00:04:36.805 --> 00:04:39.365
and then our function as the second value.

00:04:39.365 --> 00:04:44.200
Now, anything we run inside of here will only work on this admin route.

00:04:44.200 --> 00:04:47.755
But we want this to run on every template in our app.

00:04:47.755 --> 00:04:50.715
So I'm going to leave the first parameter empty.

00:04:50.715 --> 00:04:56.430
See there's an action we can add a console log inside of the function body,

00:04:56.430 --> 00:05:01.490
add console log, and then simply add some texts of hello.

00:05:01.490 --> 00:05:05.620
Give this a save and then over to the browser.

00:05:05.660 --> 00:05:10.240
Now, if we click on our logo to make a request to our site,

00:05:10.240 --> 00:05:13.010
over to Visual Studio Code and now we can

00:05:13.010 --> 00:05:15.860
see down at the bottom we have the texts of hello,

00:05:15.860 --> 00:05:18.065
retries a few more times.

00:05:18.065 --> 00:05:20.585
So keep clicking on this to make a request.

00:05:20.585 --> 00:05:24.640
We see for every request we get the console log of hello.

00:05:24.640 --> 00:05:26.415
Inside of the browser though,

00:05:26.415 --> 00:05:29.675
if we take a look at the spinning icon at the top,

00:05:29.675 --> 00:05:32.315
we see our app begins to hang.

00:05:32.315 --> 00:05:36.950
It's because middleware is meant to be passed through and here we have not

00:05:36.950 --> 00:05:41.450
added in the next call to move on to the next piece of middleware in the chain.

00:05:41.450 --> 00:05:44.695
So it's basically stuck on it's route.

00:05:44.695 --> 00:05:47.880
Let's go over to our app.use,

00:05:47.880 --> 00:05:50.760
and then inside our function,

00:05:50.760 --> 00:05:54.975
I'll hit next, give it a save.

00:05:54.975 --> 00:05:57.365
Now if we reload,

00:05:57.365 --> 00:06:03.125
we can see we can reload this route as many times as we want and it's still working.

00:06:03.125 --> 00:06:06.700
So over on, the request object which we have here,

00:06:06.700 --> 00:06:09.985
we have access to a property called the path.

00:06:09.985 --> 00:06:16.205
This will return the path name of the current request or basically the current URL.

00:06:16.205 --> 00:06:17.920
Let's take a look at this.

00:06:17.920 --> 00:06:21.830
Let's say the current path is,

00:06:21.830 --> 00:06:25.454
and then add on to the end the request,

00:06:25.454 --> 00:06:29.490
which is this object just here dot path.

00:06:29.490 --> 00:06:33.225
Now give it a save and then go to any route.

00:06:33.225 --> 00:06:39.470
For example, let's go to forward slash sign-up, hit Enter.

00:06:39.680 --> 00:06:42.315
Now in Visual Studio Code,

00:06:42.315 --> 00:06:44.890
let's lift up this terminologies here,

00:06:44.890 --> 00:06:49.180
and we can see here our current path is forward slash sign-up.

00:06:49.180 --> 00:06:52.325
This is the console log which we set just here.

00:06:52.325 --> 00:06:55.570
I am now going to make this URL available to use as

00:06:55.570 --> 00:06:59.220
a variable which will have access to any template.

00:06:59.220 --> 00:07:02.395
Therefore, we can do some conditional rendering later on,

00:07:02.395 --> 00:07:07.495
which will allow us to only display certain information based on the current route.

00:07:07.495 --> 00:07:12.730
First of all, let's reduce these down to make some more space and delete our console log,

00:07:12.730 --> 00:07:15.890
leaving in only the request dot path.

00:07:15.890 --> 00:07:21.795
Now this request dot path can then be assigned to res dot locals.

00:07:21.795 --> 00:07:25.400
So res dot locals equals the request dot path.

00:07:25.400 --> 00:07:30.425
This will then assign our request dot path to the locals object,

00:07:30.425 --> 00:07:32.600
which is on the response.

00:07:32.600 --> 00:07:38.240
We can also give this particular local or this local variable a name of our choice.

00:07:38.240 --> 00:07:42.110
To keep it descriptive, I'm going to call this dot URL.

00:07:42.110 --> 00:07:44.990
Therefore, we can access this variable or

00:07:44.990 --> 00:07:49.450
this path in our templates by its local name of URL.

00:07:49.450 --> 00:07:52.695
What does this mean now for our projects?

00:07:52.695 --> 00:07:55.490
Well, it now means we can access this URL

00:07:55.490 --> 00:07:59.260
local in any of our templates inside the project,

00:07:59.260 --> 00:08:02.115
because it's middleware, which we set up just here,

00:08:02.115 --> 00:08:05.055
is always passed through for every request.

00:08:05.055 --> 00:08:09.755
We will also be adding more locals just like this as we go for this project.

00:08:09.755 --> 00:08:14.665
For example, to make flash messages available in all templates too,

00:08:14.665 --> 00:08:16.880
but this URL variable,

00:08:16.880 --> 00:08:19.250
we can now use it for conditional rendering.

00:08:19.250 --> 00:08:25.310
Conditional rendering allows us to display certain data depending on a condition.

00:08:25.310 --> 00:08:27.985
Just like when we use a if statements.

00:08:27.985 --> 00:08:31.325
It will be really useful for us in this project.

00:08:31.325 --> 00:08:33.530
Since we are reusing templates,

00:08:33.530 --> 00:08:37.475
we can now only show certain parts of the templates, for example,

00:08:37.475 --> 00:08:42.215
on certain routes or could show or hide certain parts of that template,

00:08:42.215 --> 00:08:44.770
depending if a user is logged in.

00:08:44.770 --> 00:08:50.305
The first thing I want to do is remove the update and delete buttons for certain routes.

00:08:50.305 --> 00:08:56.465
So if we go to our homepage and click on any of these hotels,

00:08:56.465 --> 00:09:01.460
and I scroll down, we see we have this Update and Delete Hotel button,

00:09:01.460 --> 00:09:03.860
which is showing on this route here.

00:09:03.860 --> 00:09:07.340
This is something we only want to show in the admin routes.

00:09:07.340 --> 00:09:11.330
To hide these, we can make use of conditional rendering to only show

00:09:11.330 --> 00:09:15.755
if the URL or the path begins with forward slash Admin.

00:09:15.755 --> 00:09:19.800
So over to the hotel_detail.pug.

00:09:19.850 --> 00:09:22.920
Save our app.js.

00:09:22.920 --> 00:09:28.035
Let's first begin by creating an if Statement using our URL variable.

00:09:28.035 --> 00:09:31.005
Just after the dot hotel div,

00:09:31.005 --> 00:09:34.435
indent them in one level if url,

00:09:34.435 --> 00:09:36.635
which is the name of the local variable,

00:09:36.635 --> 00:09:42.130
which will now pass to all templates and then use dot startsWith.

00:09:42.130 --> 00:09:45.015
Add the brackets afterwards.

00:09:45.015 --> 00:09:48.320
StartsWith is a regular JavaScript method which

00:09:48.320 --> 00:09:51.785
will be true if we pass in a string inside the brackets,

00:09:51.785 --> 00:09:54.430
which matches the beginning of the URL.

00:09:54.430 --> 00:09:57.830
So to check if the URL begins with forward slash admin,

00:09:57.830 --> 00:10:00.655
we can add this in as a string.

00:10:00.655 --> 00:10:04.145
Now, if we indent these four lines here,

00:10:04.145 --> 00:10:06.380
which are our buttons.

00:10:06.380 --> 00:10:10.070
Now if our URL starts with forward slash admin,

00:10:10.070 --> 00:10:13.120
everything which is nested inside this if statement,

00:10:13.120 --> 00:10:18.035
i.e our buttons will now be conditionally rendered otherwise,

00:10:18.035 --> 00:10:20.615
anything else which is not nested inside,

00:10:20.615 --> 00:10:22.505
such as our hotel mixin,

00:10:22.505 --> 00:10:25.390
will still display regardless of the route.

00:10:25.390 --> 00:10:27.960
So over to the browser and let's give this a try.

00:10:27.960 --> 00:10:31.815
If it reloads and then scroll down,

00:10:31.815 --> 00:10:35.990
we can see these buttons are now missing from the top of our templates.

00:10:35.990 --> 00:10:39.460
Let's try some more, open the homepage,

00:10:39.460 --> 00:10:44.795
see all, click on any one of these,

00:10:44.795 --> 00:10:47.315
and the buttons are now still missing.

00:10:47.315 --> 00:10:50.525
Let's try the admin route and check the button if they're there.

00:10:50.525 --> 00:10:52.505
So forward slash admin,

00:10:52.505 --> 00:10:56.195
and then go down to Edit, remove hotel.

00:10:56.195 --> 00:10:59.345
Let's search for any hotel name.

00:10:59.345 --> 00:11:05.235
So hotel 7, this now displays hotel 7,

00:11:05.235 --> 00:11:08.070
and we still have the updates and delete buttons.

00:11:08.070 --> 00:11:11.745
Because our URL begins with forward slash admin.

00:11:11.745 --> 00:11:17.015
Good, this conditional rendering is now working with our URL variable.

00:11:17.015 --> 00:11:22.715
Another use for this variable will be over in our hotel.pug mixin.

00:11:22.715 --> 00:11:25.475
So let's open up the sidebar.

00:11:25.475 --> 00:11:29.080
Mixins and then hotel.pug.

00:11:29.080 --> 00:11:33.840
We can finally make use of the hotel description we have available,

00:11:33.840 --> 00:11:37.625
but only display this in needful hotel view.

00:11:37.625 --> 00:11:40.235
So just after the hotel name,

00:11:40.235 --> 00:11:42.250
keep any horizontal line.

00:11:42.250 --> 00:11:46.020
Let's create another if statement using our URL.

00:11:46.020 --> 00:11:50.100
So dot startsWith, this time we can pass in

00:11:50.100 --> 00:11:54.225
a string which is forward slash all and then forward slash.

00:11:54.225 --> 00:11:59.535
Nested inside here we can set a p element which is equal to hotel.

00:11:59.535 --> 00:12:05.000
So it's hotel_description as

00:12:05.000 --> 00:12:09.050
a new horizontal line just below to separate this from the star rating,

00:12:09.050 --> 00:12:10.880
the country, and the price.

00:12:10.880 --> 00:12:13.400
Save this and then over to our browser.

00:12:13.400 --> 00:12:16.540
Let's try with the homepage.

00:12:16.540 --> 00:12:20.390
Now we see our hotel is listed with no description.

00:12:20.390 --> 00:12:25.850
However, if you click on one of our links to go over to the hotel detail page.

00:12:25.850 --> 00:12:29.795
We now see description is now added into our templates,

00:12:29.795 --> 00:12:32.905
but because we only forward slash all routes.

00:12:32.905 --> 00:12:38.180
If we go over to our homepage and then also click on see all.

00:12:38.180 --> 00:12:41.059
Here we also see all of our hotels,

00:12:41.059 --> 00:12:42.230
but with no description.

00:12:42.230 --> 00:12:46.465
But this routes also begins with forward slash all.

00:12:46.465 --> 00:12:52.485
This may seem a little confusing why we're not seeing the description on this page two.

00:12:52.485 --> 00:12:56.215
If we look a little closer and go over to our template,

00:12:56.215 --> 00:13:00.110
we see the trailing forward slash after all.

00:13:00.110 --> 00:13:03.985
If we go over to our routes in our index.js,

00:13:03.985 --> 00:13:06.100
having forward slash all,

00:13:06.100 --> 00:13:11.800
and then forward slash right at the very end only matches this second route on here,

00:13:11.800 --> 00:13:14.255
which renders our hotel detail.

00:13:14.255 --> 00:13:17.910
Since we using a additional forward slash and also

00:13:17.910 --> 00:13:23.570
our all hotels route here is only forward slash all with nothing at the end,

00:13:23.570 --> 00:13:27.445
this is why this description only works on the hotel detail page

00:13:27.445 --> 00:13:32.150
and not on the all hotels route, which we have here.

00:13:32.150 --> 00:13:36.485
We'll make more use of this URL variable for the course,

00:13:36.485 --> 00:13:42.510
but next we're going to be handling display in our hotels based on a particular country.
