WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.370
Welcome back. This is going to be

00:00:02.370 --> 00:00:07.830
a pretty exciting section as we see all of our hard work finally paying off.

00:00:07.830 --> 00:00:10.710
We're going to finally push our project to

00:00:10.710 --> 00:00:14.460
a live web server for the rest of the world to see.

00:00:14.460 --> 00:00:19.440
First of all, a few measures I'm going to take to get our app ready.

00:00:19.440 --> 00:00:22.545
First of all, I'm going to enable compression.

00:00:22.545 --> 00:00:25.485
This will add gzip compression,

00:00:25.485 --> 00:00:27.030
how we deal with files,

00:00:27.030 --> 00:00:29.340
we compress on our computer.

00:00:29.340 --> 00:00:32.990
Which can decrease the size of the response body,

00:00:32.990 --> 00:00:35.795
which speeds up our app's performance.

00:00:35.795 --> 00:00:38.210
This is an npm package,

00:00:38.210 --> 00:00:43.850
simply called compression, which we can install via the command line as usual.

00:00:43.850 --> 00:00:54.105
Off to the project's npm i compression and then hit ENTER.

00:00:54.105 --> 00:00:57.310
It's pulling this package from npm.

00:01:03.380 --> 00:01:10.235
Once this is done, we can then require this final over in the app.js right at the top,

00:01:10.235 --> 00:01:14.310
just like we normally do, so the app.js.

00:01:14.310 --> 00:01:18.374
Let's close down some of these our new stamps.

00:01:18.374 --> 00:01:23.290
Nope, not, the app.js right by the top,

00:01:23.290 --> 00:01:30.080
I'm going to create a constant called compression and require this file.

00:01:34.910 --> 00:01:40.565
Then we need to add this compression as middleware with app.use.

00:01:40.565 --> 00:01:46.320
Scroll down and it let's close down this after our app.

00:01:46.320 --> 00:01:51.810
Let's say "Compress responses" with

00:01:51.810 --> 00:01:57.910
our app.use parsing in compression.

00:02:00.860 --> 00:02:05.980
This is all we need to do to set up compression for our responses.

00:02:05.980 --> 00:02:10.290
I must say it is noted in our response headers later on.

00:02:10.290 --> 00:02:13.565
Next is a security npm module,

00:02:13.565 --> 00:02:15.270
which is called helmet.

00:02:15.270 --> 00:02:20.750
This module will not protect our app from every security risk out there,

00:02:20.750 --> 00:02:23.220
but enabling it is a step in

00:02:23.220 --> 00:02:28.900
the right direction and it may cause a lot of common precautions which we should take.

00:02:28.900 --> 00:02:35.080
This module works as middleware and sets various HTTP headers,

00:02:35.080 --> 00:02:38.140
which we'll look at in just a moment.

00:02:38.140 --> 00:02:45.410
Let's first install this module with npm i and the package name of helmets.

00:02:51.120 --> 00:02:53.380
Once this is installed,

00:02:53.380 --> 00:02:59.350
we can then go over to our app.js and then require this module again at the top,

00:02:59.350 --> 00:03:01.660
just under our compression,

00:03:01.660 --> 00:03:09.380
so const helmet, require the helmets module.

00:03:10.790 --> 00:03:14.800
This should then be set as early in the middleware chain

00:03:14.800 --> 00:03:18.205
as possible, again, using app.use.

00:03:18.205 --> 00:03:21.320
Just after we set up our Express app,

00:03:21.320 --> 00:03:24.630
so scroll down to var app equals Express.

00:03:24.630 --> 00:03:26.685
We can have this in just here,

00:03:26.685 --> 00:03:34.860
so app.use parsing in helmet and then a semicolon at the end.

00:03:34.860 --> 00:03:37.720
Just before we get to work with this though,

00:03:37.720 --> 00:03:40.090
I'm going to comment this line out,

00:03:40.090 --> 00:03:44.590
so we can see what our headers look like before we use helmets.

00:03:44.590 --> 00:03:49.400
Keep this commented out and then go over to the developer tools.

00:03:49.400 --> 00:03:55.510
When it starts up the server with npm run DevStart.

00:03:57.350 --> 00:04:00.665
To see our HTTP headers,

00:04:00.665 --> 00:04:03.850
we can go to the developer tools inside a Chrome,

00:04:03.850 --> 00:04:06.800
so right-click and inspect.

00:04:06.800 --> 00:04:09.485
Then if we go to the Network tab,

00:04:09.485 --> 00:04:11.855
let's close this down,

00:04:11.855 --> 00:04:18.945
reload, click on the local host,

00:04:18.945 --> 00:04:22.695
and then when you click on the headers tab, which is just here.

00:04:22.695 --> 00:04:26.980
I want to bring this up so it's more visible on the screen.

00:04:27.290 --> 00:04:32.395
The information we're interested in is this response headers.

00:04:32.395 --> 00:04:35.000
This information known as a header,

00:04:35.000 --> 00:04:38.470
is information parsed with the request and the response,

00:04:38.470 --> 00:04:42.570
and let's put this on the side so it's easy to see.

00:04:42.760 --> 00:04:47.960
There we go. Great. There is our response headers,

00:04:47.960 --> 00:04:51.350
which we can see just here and just as a comparison,

00:04:51.350 --> 00:04:54.970
I'm going to take a quick screenshots of this.

00:04:54.970 --> 00:04:57.725
I'll make use of this in just a moment.

00:04:57.725 --> 00:05:02.095
It contains things such as our Content-Type of text/html,

00:05:02.095 --> 00:05:05.670
it's set to have a character set of utf-8,

00:05:05.670 --> 00:05:07.200
which is the standard.

00:05:07.200 --> 00:05:10.005
The encoding type of gzip,

00:05:10.005 --> 00:05:13.765
which was set of bios before when we nail a compression.

00:05:13.765 --> 00:05:18.380
One of the things we need to address here is the X-Powered-By tag,

00:05:18.380 --> 00:05:22.490
which is down the bottom and this is set to be Express.

00:05:22.490 --> 00:05:27.560
Helmet will hide this information along with others so hackers

00:05:27.560 --> 00:05:33.310
can't exploit any known vulnerabilities inside of the framework which we use in.

00:05:33.310 --> 00:05:37.580
It's not going to completely hide the fact we're using Express,

00:05:37.580 --> 00:05:42.970
there are other ways to check but this is a step in the right direction.

00:05:42.970 --> 00:05:47.270
Now if we go back over to the project and uncomment out,

00:05:47.270 --> 00:05:50.555
this piece of middleware, save the file.

00:05:50.555 --> 00:05:53.910
Now if we reload the browser,

00:05:54.620 --> 00:06:01.430
click on the local host and then go back to our response headers,

00:06:01.430 --> 00:06:04.415
we see we now have more header information.

00:06:04.415 --> 00:06:11.290
Let's pull up the screenshots from before, double-click on this.

00:06:13.760 --> 00:06:18.290
The first thing to notice in this new response header is we

00:06:18.290 --> 00:06:22.475
no longer have this Powered-By Express section down at the bottom,

00:06:22.475 --> 00:06:25.315
this has been removed by helmets.

00:06:25.315 --> 00:06:29.360
There is also some extra information now added.

00:06:29.360 --> 00:06:32.720
I'm not going to go too deep into everything here,

00:06:32.720 --> 00:06:36.535
but I'll give you some general information about what's going on.

00:06:36.535 --> 00:06:42.090
We can see we have the Content-Type options set to be "nosniff".

00:06:42.090 --> 00:06:47.915
This prevents the browser from trying to detect or guess the name type.

00:06:47.915 --> 00:06:51.110
This is the type of file we're dealing with,

00:06:51.110 --> 00:06:55.060
such as a PNG or a JavaScript file.

00:06:55.060 --> 00:06:59.030
This prevents the browser from automatically trying to

00:06:59.030 --> 00:07:03.125
detect the Content-Type and basically getting it wrong,

00:07:03.125 --> 00:07:06.925
therefore, running some code which it shouldn't.

00:07:06.925 --> 00:07:12.685
We also have the DNS-Prefetch-Control set to be off.

00:07:12.685 --> 00:07:17.105
This is more of a performance feature rather than security.

00:07:17.105 --> 00:07:21.095
When we visit a URL in a browser, the URL name,

00:07:21.095 --> 00:07:28.195
such as Google.com, is basically an alias for a numeric IP address.

00:07:28.195 --> 00:07:32.330
DNS is a server which contains a database of

00:07:32.330 --> 00:07:38.080
these URLs and also the IP addresses to then march them up.

00:07:38.080 --> 00:07:41.225
This URL such as Google.com,

00:07:41.225 --> 00:07:47.420
is much easier for the humans to remember than the real numeric IP address.

00:07:47.420 --> 00:07:52.010
This feature tells the browser not to make a DNS request too

00:07:52.010 --> 00:07:57.485
early before the user clicks on a link or loads resource.

00:07:57.485 --> 00:08:02.320
We also have the Download-Options to be noopen.

00:08:02.320 --> 00:08:07.040
This protects against an old internet explorer vulnerability,

00:08:07.040 --> 00:08:12.685
which allow the browser to execute downloads inside of your site's context.

00:08:12.685 --> 00:08:16.350
Setting this will stop internet explorer allowing

00:08:16.350 --> 00:08:22.870
malicious html downloads to be executed in and unsafe environment.

00:08:22.870 --> 00:08:27.465
We have the Frame-Option set to be SAMEORIGIN.

00:08:27.465 --> 00:08:33.395
This one will control if your sites can be loaded into an iframe or not.

00:08:33.395 --> 00:08:38.095
It should be disabled unless you have a good need for it.

00:08:38.095 --> 00:08:44.625
Then we have XSS-Protection and XSS stands for cross-site scripting,

00:08:44.625 --> 00:08:48.740
and is a way for attackers to have access to our websites.

00:08:48.740 --> 00:08:53.720
They do this by finding ways to run JavaScript code inside of those sites.

00:08:53.720 --> 00:08:56.180
This is one of the things we're trying to protect

00:08:56.180 --> 00:08:59.464
against when sanitizing the user's inputs

00:08:59.464 --> 00:09:06.205
into all forms and helmets also has this option to help with some basic security.

00:09:06.205 --> 00:09:08.670
As you can imagine, now security is

00:09:08.670 --> 00:09:13.590
a deep subject and check out the helmet docs for more information,

00:09:13.590 --> 00:09:16.035
if you'd like to find out a little bit more.

00:09:16.035 --> 00:09:20.285
But for now know this is some basic protection now in place.

00:09:20.285 --> 00:09:26.370
In the next video we'll finally upload our app to production by using Heroku.
