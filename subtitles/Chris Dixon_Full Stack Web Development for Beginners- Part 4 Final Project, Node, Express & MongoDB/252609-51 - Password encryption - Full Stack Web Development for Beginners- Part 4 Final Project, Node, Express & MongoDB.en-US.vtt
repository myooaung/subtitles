WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:04.500
We've now saved our users to the database,

00:00:04.500 --> 00:00:07.065
but it is something we still need to fix.

00:00:07.065 --> 00:00:10.005
We've saved a test user to the database,

00:00:10.005 --> 00:00:13.110
but the password is stored as plain text.

00:00:13.110 --> 00:00:15.795
This is something which we should never do.

00:00:15.795 --> 00:00:21.645
In fact, no company should ever save your password to the database like this.

00:00:21.645 --> 00:00:24.165
If the database was ever hacked,

00:00:24.165 --> 00:00:29.370
the hacker would have access to all of the usernames and passwords.

00:00:29.370 --> 00:00:36.010
There is also a good chance that a user will use the same password on other websites too.

00:00:36.010 --> 00:00:38.870
This is a big security risk.

00:00:38.870 --> 00:00:42.770
There is often a misconception that a big company,

00:00:42.770 --> 00:00:44.930
let's take Facebook for example.

00:00:44.930 --> 00:00:46.520
Could you simply go into

00:00:46.520 --> 00:00:51.325
their own database and see everyone's password, if it was registered.

00:00:51.325 --> 00:00:55.970
This isn't and also shouldn't be the case for any company.

00:00:55.970 --> 00:00:59.855
Instead, the passwords are encrypted first,

00:00:59.855 --> 00:01:04.160
and the encrypted version is stored inside of the database.

00:01:04.160 --> 00:01:07.220
To understand a little more about this,

00:01:07.220 --> 00:01:10.800
we need to be aware of hashin and salts.

00:01:10.800 --> 00:01:15.080
Hashin is basically a way of scrambling our password.

00:01:15.080 --> 00:01:22.880
When we register as a user the scrumble version is then stored inside of the database.

00:01:22.880 --> 00:01:26.810
Each time we then tried to log in, our password,

00:01:26.810 --> 00:01:32.900
will enter is also scrambled again using the exact same algorithm as when we

00:01:32.900 --> 00:01:36.320
registered and this crumbled version will be checked

00:01:36.320 --> 00:01:40.295
against the same scrambled version inside the database.

00:01:40.295 --> 00:01:44.150
This hashin should be a one-way process and there

00:01:44.150 --> 00:01:48.260
should be no way of converting it back to the original password.

00:01:48.260 --> 00:01:51.590
Hackers can use what's called a brute force attack.

00:01:51.590 --> 00:01:55.580
However, this is when they use a computer to generate

00:01:55.580 --> 00:02:01.090
thousands of hashes from passwords until one of them matches.

00:02:01.090 --> 00:02:04.480
To try and make things even more secure,

00:02:04.480 --> 00:02:07.145
we can also solve the password.

00:02:07.145 --> 00:02:10.315
Salting is when we add some data,

00:02:10.315 --> 00:02:14.095
often randomly generated for each password.

00:02:14.095 --> 00:02:20.770
The salt is added to the user's password and then hashed to make it more secure.

00:02:20.770 --> 00:02:27.130
This salt is often also stored in the database too along with the hashed value.

00:02:27.130 --> 00:02:30.760
We're going to use a package called bcrypts,

00:02:30.760 --> 00:02:34.525
which will take care of this hashin and salting follows.

00:02:34.525 --> 00:02:38.065
This is the package page which run now.

00:02:38.065 --> 00:02:41.280
If we also go over to mongoose bcrypts,

00:02:41.280 --> 00:02:43.770
which is also a npm package.

00:02:43.770 --> 00:02:45.530
To make things even easier,

00:02:45.530 --> 00:02:51.295
we also are going to be using this mongoose bcrpt package along with the bcrypt module.

00:02:51.295 --> 00:02:53.775
This is a mongoose plugin.

00:02:53.775 --> 00:02:56.180
Just like mongoose plugin we used for

00:02:56.180 --> 00:03:00.970
passports to make integrating with Mongoose really easy.

00:03:00.970 --> 00:03:07.160
First let's go over to Visual Studio Code and installed the packages which we need.

00:03:07.160 --> 00:03:09.110
Down to the terminal,

00:03:09.110 --> 00:03:13.080
npm i and then mongoose-bcrypts.

00:03:15.740 --> 00:03:19.180
Let's install for just a moment.

00:03:23.240 --> 00:03:26.600
Certain soap is fairly straightforward.

00:03:26.600 --> 00:03:30.080
We add these in the user.jsmodel.

00:03:30.080 --> 00:03:32.755
We need to require this at the top.

00:03:32.755 --> 00:03:38.735
Go into the user.js and then after our two requires at the top,

00:03:38.735 --> 00:03:43.360
let's set up a new constant called mongoose bcrypts.

00:03:43.360 --> 00:03:49.065
We set this as camelcase and so this is equal to require.

00:03:49.065 --> 00:03:55.410
We're going to require the module name, which is mongoose-bcrypts.

00:03:56.500 --> 00:04:00.335
Then we add this as a mongoose plugin,

00:04:00.335 --> 00:04:05.345
just like the passport local mongoose module which added earlier.

00:04:05.345 --> 00:04:11.450
Scroll down to the bottom where we add our plugins above our login from before,

00:04:11.450 --> 00:04:16.220
we can also access the user schema. Lets plug-in.

00:04:16.220 --> 00:04:20.815
The plugin which we want to add this time is mongoose bcrypts,

00:04:20.815 --> 00:04:23.235
which is our variable name.

00:04:23.235 --> 00:04:25.550
Then once we have this plug-in set up,

00:04:25.550 --> 00:04:30.610
we can now add the bcrypt option to our schema password field.

00:04:30.610 --> 00:04:34.800
We do this by setting the bcrypt option to be true.

00:04:34.800 --> 00:04:37.379
So up to our password.

00:04:37.379 --> 00:04:40.110
Add a comma after required,

00:04:40.110 --> 00:04:45.885
we can add the bcrypt option and set this to be true.

00:04:45.885 --> 00:04:51.290
Gives us a save and then we can go over to the sign-up link in the navbar,

00:04:51.290 --> 00:04:56.310
and we can create a new test user of the browser.

00:04:56.310 --> 00:05:00.975
In fact we need to run npm devstart.

00:05:00.975 --> 00:05:06.365
It's the browser and I'm going to go over to mLab and deletes

00:05:06.365 --> 00:05:14.505
our test user and then go to sign up in the top navbar,

00:05:14.505 --> 00:05:18.220
then let's add a test user once small.

00:05:19.490 --> 00:05:22.960
You can add anything inside here.

00:05:25.220 --> 00:05:30.195
Hit "Confirm." Then over to mLab, hit "Reload."

00:05:30.195 --> 00:05:34.535
Let's see if our test user is now inside of there, which is.

00:05:34.535 --> 00:05:39.440
Remember when we confirm when we clicked on the sign-up button down here,

00:05:39.440 --> 00:05:41.810
we've not yet settled where to go.

00:05:41.810 --> 00:05:44.675
The browser will stay on this page.

00:05:44.675 --> 00:05:46.625
Back over to mLab.

00:05:46.625 --> 00:05:48.725
Now if you expand our view,

00:05:48.725 --> 00:05:53.270
test user we can now see under the password fields we have

00:05:53.270 --> 00:05:56.000
this encrypted version now stored inside of

00:05:56.000 --> 00:06:00.085
our database rather than the plain text from before.

00:06:00.085 --> 00:06:02.175
Now we have this working.

00:06:02.175 --> 00:06:05.220
Let's delete all of our users from mLab.

00:06:05.220 --> 00:06:09.415
Delete this one and any of you users which you may have.

00:06:09.415 --> 00:06:12.440
We will leave so clear for when we move on to

00:06:12.440 --> 00:06:16.950
the next video where we start handling the login feature.
