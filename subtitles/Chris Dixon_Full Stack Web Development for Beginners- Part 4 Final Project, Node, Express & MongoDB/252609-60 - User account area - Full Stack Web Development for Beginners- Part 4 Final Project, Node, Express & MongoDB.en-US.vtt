WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
After placing the new order,

00:00:02.250 --> 00:00:05.175
we are redirected to this My Account section,

00:00:05.175 --> 00:00:07.260
which we've not yet setup.

00:00:07.260 --> 00:00:11.055
This is what we're going to go ahead and handle in this video.

00:00:11.055 --> 00:00:14.940
The My Account area will be a Personal section where

00:00:14.940 --> 00:00:19.080
the logged in user can see any orders which they have placed.

00:00:19.080 --> 00:00:20.805
Just before we do this,

00:00:20.805 --> 00:00:25.635
we need to also register a new user to test things are working.

00:00:25.635 --> 00:00:32.100
Let's go to log out and you can sign up as a new user.

00:00:32.100 --> 00:00:35.980
Let's just add this as tests.

00:00:42.280 --> 00:00:48.390
I'm going to test it in as the password and confirm.

00:00:50.450 --> 00:00:54.030
Good, we now logged in as the test user.

00:00:54.030 --> 00:00:58.435
Now we need to go ahead and place a new order for any hotel.

00:00:58.435 --> 00:01:00.645
Let's go for this one.

00:01:00.645 --> 00:01:10.070
Click on here. Then we can add anything we want down here to place an order. There we go.

00:01:10.070 --> 00:01:14.560
Search for this, continue till the confirmation,

00:01:14.560 --> 00:01:17.430
and then place the order.

00:01:17.440 --> 00:01:20.435
If we now go over to mLab,

00:01:20.435 --> 00:01:24.960
we should now see two records inside of the orders collection.

00:01:25.760 --> 00:01:29.835
There are two orders from two different users.

00:01:29.835 --> 00:01:34.260
This now gives us some information to work with, so we know what to do.

00:01:34.260 --> 00:01:36.040
Now we need to first go over to the

00:01:36.040 --> 00:01:40.870
index.js and then we can handle this My Account section,

00:01:40.870 --> 00:01:50.050
so index.js and lets add this also to the user routes, so router.get,

00:01:50.050 --> 00:01:58.950
my- account, this will also be handled by the user controller.

00:01:58.950 --> 00:02:02.680
Then we'll go ahead and create myAccounts,

00:02:03.050 --> 00:02:05.505
so its the user controller.

00:02:05.505 --> 00:02:07.605
We can set this up now.

00:02:07.605 --> 00:02:13.960
Just for is admin, exports.myAccounts.

00:02:14.260 --> 00:02:20.850
This is going to be async, request, response,

00:02:20.850 --> 00:02:27.160
and also next, our try section,

00:02:27.160 --> 00:02:34.385
catch any errors, and then pass this to next.

00:02:34.385 --> 00:02:39.590
When setting this up, we could go ahead and do something like what we've looked at.

00:02:39.590 --> 00:02:42.740
For example, we could go const orders.

00:02:42.740 --> 00:02:45.260
We've used this plenty of times before.

00:02:45.260 --> 00:02:47.285
The users, the orders,

00:02:47.285 --> 00:02:49.295
and also for the hotels.

00:02:49.295 --> 00:02:55.405
Select the Orders.find.

00:02:55.405 --> 00:02:58.625
Then we could use this Find method to match

00:02:58.625 --> 00:03:05.800
the user_ID to the information from the request.user._ID.

00:03:09.500 --> 00:03:15.150
Then we can do a res.json to output the orders.

00:03:15.290 --> 00:03:20.895
Over to the browser, still only in myAccount, you can hit ''Reload''.

00:03:20.895 --> 00:03:26.790
Now see the json for the results. This works fine.

00:03:26.790 --> 00:03:30.370
We see the one booking from this particular user,

00:03:30.370 --> 00:03:32.525
so we've this user ID.

00:03:32.525 --> 00:03:37.675
We also have the order details for the single order which is being placed.

00:03:37.675 --> 00:03:41.840
The small problem is we probably want to show the user

00:03:41.840 --> 00:03:47.510
the hotel details such as the name and destination inside of their accounts.

00:03:47.510 --> 00:03:52.940
But currently, we only have this hotel ID which the user wouldn't recognize.

00:03:52.940 --> 00:03:56.590
Over in mLab, we have various collections.

00:03:56.590 --> 00:03:58.595
Let's go to our database.

00:03:58.595 --> 00:04:00.260
We have the hotels,

00:04:00.260 --> 00:04:03.005
the orders, the sessions, and the users.

00:04:03.005 --> 00:04:07.985
This ID which we currently have is in the orders collection of the database,

00:04:07.985 --> 00:04:12.020
but the hotel details in the hotels collection.

00:04:12.020 --> 00:04:17.765
Basically, we need a way of grabbing the hotel details from another collection.

00:04:17.765 --> 00:04:24.125
We can do this by using the lookup stage from the aggregation pipeline of Mongo.

00:04:24.125 --> 00:04:26.975
Back over to the myAccount section,

00:04:26.975 --> 00:04:29.540
we can reuse the constant of orders.

00:04:29.540 --> 00:04:33.125
But this time we're going to write order.aggregate,

00:04:33.125 --> 00:04:41.340
so let's just remove this section here.aggregate and then plus.

00:04:42.320 --> 00:04:45.765
We still need to filter by the user.

00:04:45.765 --> 00:04:48.555
We can do this in the match stage.

00:04:48.555 --> 00:04:50.865
Open up the curly braces,

00:04:50.865 --> 00:04:54.000
$ symbol match just like we used before.

00:04:54.000 --> 00:05:05.160
Then we're going to write the user_ID matches to the request.user.ID.

00:05:05.160 --> 00:05:08.060
This is only going to grab any records where

00:05:08.060 --> 00:05:12.590
the user ID matches the current logged in user.

00:05:12.590 --> 00:05:19.290
Add a comma at the end and then we can add the lookup stage with $ symbol lookup.

00:05:20.470 --> 00:05:26.195
First, we need to specify the collection we want to get the data from.

00:05:26.195 --> 00:05:28.970
Currently, we in the orders collection,

00:05:28.970 --> 00:05:32.600
but we want to grab the data from the hotel's collection.

00:05:32.600 --> 00:05:35.605
We can do this by adding from,

00:05:35.605 --> 00:05:41.185
and then as a string, we can add in the name of our collection, which is hotels.

00:05:41.185 --> 00:05:44.740
Next is local field,

00:05:45.530 --> 00:05:49.690
which we're going to send it to the hotel_ID.

00:05:51.050 --> 00:05:55.730
Local field is the field name from our order collection,

00:05:55.730 --> 00:05:58.775
which is basically considered the inputs.

00:05:58.775 --> 00:06:02.750
Hotel ID is in our order.js file.

00:06:02.750 --> 00:06:05.730
It's this moment you see here.

00:06:06.070 --> 00:06:11.940
Add a comma at the end and then after this we can add the following fields,

00:06:13.230 --> 00:06:17.935
and set this to a string of underscore ID.

00:06:17.935 --> 00:06:23.260
This is the field of underscore ID from the hotel's collection,

00:06:23.260 --> 00:06:24.935
which we're going to match to.

00:06:24.935 --> 00:06:30.655
This hotel data we matched to will be added to our orders as an array.

00:06:30.655 --> 00:06:34.405
Now we give this array field a name of our choice.

00:06:34.405 --> 00:06:42.015
We use the as keywords and then give it a name of hotel_ data.

00:06:42.015 --> 00:06:45.865
Now, if we save this file and then go to the browser,

00:06:45.865 --> 00:06:49.040
we can refresh the json.

00:06:49.070 --> 00:06:53.330
Now we've the new field of hotel data and this is

00:06:53.330 --> 00:06:57.905
grabbing all of the hotel information from this hotel ID,

00:06:57.905 --> 00:07:00.680
but from a different collection.

00:07:00.680 --> 00:07:03.320
This means we now have access to all of

00:07:03.320 --> 00:07:07.789
the hotel data and we can use it inside of our templates.

00:07:07.789 --> 00:07:15.225
Let's go back to the controller and create this template now replacing the res.json.

00:07:15.225 --> 00:07:21.430
We can remove this line here and replace it with a rest of render

00:07:21.430 --> 00:07:28.130
to output a new template of user_accounts.

00:07:28.140 --> 00:07:31.405
After this, we pass in our options.

00:07:31.405 --> 00:07:41.690
The title of my accounts and also the order's information.

00:07:41.820 --> 00:07:47.350
Save this, and then we can create our user_account templates inside of

00:07:47.350 --> 00:07:55.885
our views with the.pug extension.

00:07:55.885 --> 00:07:59.799
Then go ahead and add the contents.

00:07:59.799 --> 00:08:04.375
Inside here we answer the familiar extends layout,

00:08:04.375 --> 00:08:11.770
block content, the level 2

00:08:11.770 --> 00:08:20.740
heading of title and the horizontal line just to separate the title from the constant.

00:08:20.740 --> 00:08:25.450
I'm going to add an if statement to check if the user is logged in.

00:08:25.450 --> 00:08:29.425
If it is, we can then go and outputs a level 3 heading

00:08:29.425 --> 00:08:34.645
and the back ticks since this will be dynamic with the message of Hi,

00:08:34.645 --> 00:08:42.775
then a comma, then we can output the user's name by selecting user.first_name.

00:08:42.775 --> 00:08:45.160
This will say something such as,

00:08:45.160 --> 00:08:49.640
"Hi Chris," with an exclamation mark at the end.

00:08:50.250 --> 00:08:55.420
Then we're going to check if any orders are present in the database.

00:08:55.420 --> 00:09:04.580
We can say if orders.length is greater than 0.

00:09:04.620 --> 00:09:09.145
This section will only display if there are any orders.

00:09:09.145 --> 00:09:16.900
Then we'll add a level 3 heading with the text of your bookings and for all bookings.

00:09:16.900 --> 00:09:20.350
We're going to loop through all of the orders in the database for

00:09:20.350 --> 00:09:25.780
this particular user and then I'll put them inside of an unordered list.

00:09:25.780 --> 00:09:32.935
We'll loop through by using each order in orders,

00:09:32.935 --> 00:09:40.510
I'm going to surround this in a div with the class of bookings so we can add CSS later.

00:09:40.510 --> 00:09:44.005
Then we can construct our unordered list.

00:09:44.005 --> 00:09:51.950
We first list item which goes via the back ticks so the text of Order ref.

00:09:52.410 --> 00:09:57.400
Then we can add the order reference which is stored in order._id.

00:09:59.490 --> 00:10:02.260
Underneath this first list item,

00:10:02.260 --> 00:10:04.240
which is for the order id,

00:10:04.240 --> 00:10:10.375
we're then going to create a second loop which is going to loop through our hotel data.

00:10:10.375 --> 00:10:15.145
Remember the hotel data is this array which we've added onto the end.

00:10:15.145 --> 00:10:17.380
Once we are in this particular order,

00:10:17.380 --> 00:10:18.880
we also need to loop through

00:10:18.880 --> 00:10:23.590
this hotel data to access all the information inside of here.

00:10:23.590 --> 00:10:28.270
To do this we create a new loop with each and we'll

00:10:28.270 --> 00:10:35.420
say data in order.hotel_data.

00:10:35.550 --> 00:10:38.110
All we're going to do now is create

00:10:38.110 --> 00:10:42.010
five different list items which are going to be for the hotel,

00:10:42.010 --> 00:10:44.230
the country, the departure date,

00:10:44.230 --> 00:10:47.980
the number of nights, and also the number of guests.

00:10:47.980 --> 00:10:51.130
Let's add our first list item.

00:10:51.130 --> 00:11:01.480
The hotel is going to be equal to data.hotel_name.

00:11:01.480 --> 00:11:06.940
Data refers to all of the data in this hotel data section.

00:11:06.940 --> 00:11:11.230
We're then going to access the individual keys such as hotel name,

00:11:11.230 --> 00:11:14.275
the country, and the cost per night.

00:11:14.275 --> 00:11:16.825
Have the hotel name,

00:11:16.825 --> 00:11:22.750
close off the back ticks and then I was going to duplicate this four more times.

00:11:22.750 --> 00:11:29.720
The second one is for the country and then data.country.

00:11:31.200 --> 00:11:36.290
The third one is going to be the departure.

00:11:36.950 --> 00:11:41.280
The departure date is not inside this hotel data.

00:11:41.280 --> 00:11:44.730
This is part of our original information here so we can

00:11:44.730 --> 00:11:49.190
access this with all the details.dateOfDeparture.

00:11:49.190 --> 00:11:51.835
Let's remove this section,

00:11:51.835 --> 00:11:57.625
access our original order which is the first loop at the top here,

00:11:57.625 --> 00:12:05.900
so order.order_details.dateOfDeparture.

00:12:09.120 --> 00:12:12.370
Next one is for the number of nights.

00:12:12.370 --> 00:12:18.100
Let's copy this section here and then paste this in.

00:12:18.100 --> 00:12:23.364
All we need to do is change the date of departure to be the duration.

00:12:23.364 --> 00:12:28.104
Finally, the last one is going to be for the number of guests.

00:12:28.104 --> 00:12:32.810
We can remove this and replace it with the order_details.numberOfGuests.

00:12:38.250 --> 00:12:44.080
This section will appear if there are any bookings by using these if statements.

00:12:44.080 --> 00:12:49.600
If there isn't, we need to add an else section down at the bottom at the same level.

00:12:49.600 --> 00:12:56.635
This is just going to display a level 3 heading with the text of no orders to show.

00:12:56.635 --> 00:12:59.470
Then we'll say, yet...

00:12:59.470 --> 00:13:02.455
This is for all booking section.

00:13:02.455 --> 00:13:05.815
Remember at the top we checked if the user was present.

00:13:05.815 --> 00:13:09.565
We can also add an else statement for the section 2.

00:13:09.565 --> 00:13:15.970
Right at the very bottom we can add this at the same level as the if statements.

00:13:15.970 --> 00:13:21.085
Make sure these are lined up then we can add a second level 3 heading,

00:13:21.085 --> 00:13:27.110
which simply say, "Please login to view this section."

00:13:27.210 --> 00:13:29.830
Now over to the browser,

00:13:29.830 --> 00:13:33.190
remember to replace this JSON with the rest of render.

00:13:33.190 --> 00:13:36.535
Now we can just refresh the My Account area,

00:13:36.535 --> 00:13:41.350
scroll down, and this details of our test user.

00:13:41.350 --> 00:13:45.250
This booking is hotel number 6 so this is good.

00:13:45.250 --> 00:13:51.680
Let's log out and we can try our other user. Let's log in.

00:13:55.530 --> 00:14:01.885
Now we can go to My Account area, so /my-account,

00:14:01.885 --> 00:14:05.140
scroll down, and this is hotel number

00:14:05.140 --> 00:14:09.145
2 so this is a different order than we've seen just before.

00:14:09.145 --> 00:14:13.300
We now getting the correct orders for the correct user.

00:14:13.300 --> 00:14:14.920
Just to finish things off,

00:14:14.920 --> 00:14:20.215
we can go over to the layout of profile and other linked to this My Account section.

00:14:20.215 --> 00:14:22.345
Open up the sidebar,

00:14:22.345 --> 00:14:25.040
go to the layout.pug.

00:14:25.260 --> 00:14:27.610
Just above this logout link,

00:14:27.610 --> 00:14:32.005
we can add a new list item at the same level.

00:14:32.005 --> 00:14:36.280
Add a link with the href and this is going to

00:14:36.280 --> 00:14:45.280
my-accounts with the text of my bookings/accounts.

00:14:45.280 --> 00:14:49.840
Save this, close the sidebar and then

00:14:49.840 --> 00:14:56.130
reload and now have a button and taking those to the account section.

00:14:56.160 --> 00:14:58.330
With this now working,

00:14:58.330 --> 00:15:01.940
next we'll do some work in the admin view to allow

00:15:01.940 --> 00:15:06.750
the admin to see a full list of bookings by all users.
