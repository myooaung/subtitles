WEBVTT
1
00:00:00.330 --> 00:00:00.900
All right, guys.

2
00:00:00.900 --> 00:00:05.580
So we've looked at the at least the fundamentals of pretty much everything you'll need to know.

3
00:00:05.580 --> 00:00:11.190
As far as CSIS goes, however, there's something called SAS that is pretty popular in front end web

4
00:00:11.190 --> 00:00:13.490
development and definitely worth learning.

5
00:00:13.500 --> 00:00:16.480
So in this section, we're going to go over what SAS is.

6
00:00:16.500 --> 00:00:21.810
We're going to look at a few examples, talk about the different features that SAS includes.

7
00:00:21.810 --> 00:00:27.180
And then in the next section we'll be creating our final project, which will be a portfolio website.

8
00:00:27.180 --> 00:00:31.320
We'll be using SAS along with a bunch of other stuff that we've learned in the course.

9
00:00:31.770 --> 00:00:33.470
All right, so what is SAS?

10
00:00:33.480 --> 00:00:38.760
It stands for syntactically awesome style sheets and it's a CSS preprocessor.

11
00:00:38.760 --> 00:00:46.170
And you may also see see it referred to as a CSS pre compiler or a CSS extension or even a stylesheet

12
00:00:46.170 --> 00:00:46.980
language.

13
00:00:47.010 --> 00:00:52.640
Now the reason we use SAS is because it enhances CSS beyond its natural capabilities.

14
00:00:52.650 --> 00:00:59.820
It allows us to use CSS more like an actual programming language, and it can cut down repeated code.

15
00:00:59.850 --> 00:01:03.150
It can allow us to structure things in a more efficient way.

16
00:01:03.630 --> 00:01:06.210
SAS isn't the only preprocessor available.

17
00:01:06.210 --> 00:01:07.380
There's also less.

18
00:01:07.380 --> 00:01:09.630
There's stylists and there's some others.

19
00:01:09.630 --> 00:01:12.690
However, SAS is by far the most popular at this point.

20
00:01:14.640 --> 00:01:14.970
All right.

21
00:01:14.970 --> 00:01:16.830
So how does Sass actually work?

22
00:01:16.830 --> 00:01:19.020
Because this confuses a lot of beginners.

23
00:01:19.020 --> 00:01:22.650
SAS is written in one of two files extensions.

24
00:01:22.650 --> 00:01:26.040
So either DOT, SAS or SAS.

25
00:01:26.040 --> 00:01:28.440
Now SAS is usually preferred.

26
00:01:28.440 --> 00:01:32.010
And I'll talk about the difference between the two in a little bit.

27
00:01:32.010 --> 00:01:38.250
But I think what confuses people about SAS is that the browser doesn't actually read SAS files like

28
00:01:38.250 --> 00:01:39.540
it does CSIS.

29
00:01:39.540 --> 00:01:46.980
You can't simply add a link tag and then include style dot success like you can with a standard CSS

30
00:01:46.980 --> 00:01:48.450
file, at least not yet.

31
00:01:48.450 --> 00:01:55.590
So it has to be compiled down to regular CSS and then that's what you include in your website or application.

32
00:01:56.070 --> 00:01:56.460
All right.

33
00:01:56.460 --> 00:02:00.300
Now, as far as compiling goes, there's many different programs to do this.

34
00:02:00.300 --> 00:02:06.360
What I like to use is something called Node SAS, which is installed with NPM, which is the Node package

35
00:02:06.360 --> 00:02:07.050
manager.

36
00:02:07.050 --> 00:02:13.560
And we can create a simple NPM script that will watch a certain folder where we create our SAS files

37
00:02:13.560 --> 00:02:19.680
and then it'll compile anything we write into regular CSS and put that in another folder.

38
00:02:20.190 --> 00:02:23.430
So we'll be using Node SAS for the most part.

39
00:02:23.430 --> 00:02:30.750
But I'm also going to show you an alternative graphical program called Koala, which is a program you

40
00:02:30.750 --> 00:02:35.070
install and you have a graphical user interface and you can compile SAS that way.

41
00:02:35.220 --> 00:02:39.150
Now you also have these code extensions that can compile SAS.

42
00:02:39.150 --> 00:02:40.530
You may want to look into that.

43
00:02:40.530 --> 00:02:46.200
However, I know that some students might not be using VS code, so I didn't want to go with a VS code

44
00:02:46.200 --> 00:02:47.010
extension.

45
00:02:48.450 --> 00:02:50.880
So what exactly does SAS offer us?

46
00:02:51.150 --> 00:02:52.350
Why is it worth using?

47
00:02:52.350 --> 00:02:57.600
So like I said, SAS allows us to write CSIS more like a dynamic programming language.

48
00:02:57.600 --> 00:02:59.130
It offers variables.

49
00:02:59.580 --> 00:03:01.060
Now you're probably thinking, Well, we are.

50
00:03:01.110 --> 00:03:03.710
We've already seen variables in CSIS.

51
00:03:03.720 --> 00:03:06.370
However, CSIS variables are fairly new.

52
00:03:06.390 --> 00:03:08.340
Also, you saw the syntax.

53
00:03:08.340 --> 00:03:10.920
It's not that pretty using the VAR and so on.

54
00:03:10.920 --> 00:03:15.510
SAS variables are more like standard programming language variables.

55
00:03:16.020 --> 00:03:19.490
Nesting is probably the main reason that I use SAS.

56
00:03:19.500 --> 00:03:26.010
We can nest styles if we have, let's say, a header tag and inside the header there's an H one and

57
00:03:26.010 --> 00:03:27.120
maybe a UL.

58
00:03:27.150 --> 00:03:33.840
We can in our in our SAS style sheets we can put header and then inside the curly braces we can put

59
00:03:33.840 --> 00:03:39.360
h one ul if we have some lines in the UL, we can nest those as well.

60
00:03:39.360 --> 00:03:45.150
It's kind of hard to explain, but once we get into it and you see it visually, it'll make a lot more

61
00:03:45.150 --> 00:03:45.780
sense.

62
00:03:45.780 --> 00:03:53.490
So you can basically structure your CSS like you do your HTML in HTML is nested, so you also have imports

63
00:03:53.490 --> 00:03:54.240
and partials.

64
00:03:54.240 --> 00:03:58.380
Now with regular CSS, you can import other CSS files.

65
00:03:58.380 --> 00:04:02.010
However, it makes a separate request to the server to get each file.

66
00:04:02.010 --> 00:04:09.030
What SAS does is it builds on top of the current CSS import, but instead of requiring a whole new HTTP

67
00:04:09.030 --> 00:04:15.360
request to the server, it'll take that file and it will combine it with the file you're importing so

68
00:04:15.360 --> 00:04:18.570
that you can serve a single CSS file to the web browser.

69
00:04:18.570 --> 00:04:25.200
So it's much more efficient and you can create as many different SAS files for different elements or

70
00:04:25.200 --> 00:04:27.420
however you want to structure your CSS.

71
00:04:27.810 --> 00:04:31.650
We also have functions and mix ins which are predefined styling.

72
00:04:31.980 --> 00:04:35.430
We can set in call functions or mix ins whenever we want.

73
00:04:35.430 --> 00:04:40.770
This helps us stick to the drive principle in programming, which stands for Don't Repeat Yourself.

74
00:04:40.770 --> 00:04:45.630
Instead of writing the same block of CSS over and over, we can stick it in a function and use it.

75
00:04:45.630 --> 00:04:53.280
Then we have conditionals which are basically false statements so we can say Do something based on a

76
00:04:53.280 --> 00:04:54.450
certain condition.

77
00:04:54.450 --> 00:05:01.110
We also have inheritance which allows us to keep our CSS dry because we can take a class and have another

78
00:05:01.110 --> 00:05:03.780
class inherit its properties and styling.

79
00:05:04.380 --> 00:05:06.630
We also have operators for calculations.

80
00:05:06.630 --> 00:05:11.580
We have color functions to lighten or darken colors and these are great for hover effects.

81
00:05:11.580 --> 00:05:13.740
So there's a lot that SAS offers.

82
00:05:14.490 --> 00:05:14.850
All right.

83
00:05:14.850 --> 00:05:20.940
Now, the last thing I want to talk about before we jump in is the difference between an access file

84
00:05:20.940 --> 00:05:22.170
and a SAS file.

85
00:05:22.170 --> 00:05:29.400
So as you can see with the SAS file and in both our SAS, it's just the file extension.

86
00:05:29.610 --> 00:05:34.470
But with this syntax, you see there's no curly braces, so it works on indents.

87
00:05:34.470 --> 00:05:40.980
If you want to be inside this a tag here, you would indent in and then for the hover if you want to

88
00:05:40.980 --> 00:05:42.690
style that you would indent again.

89
00:05:42.690 --> 00:05:46.080
And I'm not really too fond of this this style.

90
00:05:46.080 --> 00:05:53.070
Most people use this as CSS, which as you can see is is basically the same syntax as CSS, except we

91
00:05:53.070 --> 00:05:56.250
have some additional features such as variables.

92
00:05:56.820 --> 00:05:59.190
So we'll be using SAS.

93
00:05:59.610 --> 00:06:04.830
But if you want to look more into the dot SAS type of syntax, you can do that.

94
00:06:05.850 --> 00:06:06.270
All right.

95
00:06:06.270 --> 00:06:07.980
So enough with the slides.

96
00:06:07.980 --> 00:06:13.710
I think that this will make a lot more sense once we jump in and we start to see it in action.

97
00:06:13.710 --> 00:06:18.570
So in the next video, I'm going to show you how we can set up an environment using Node SAS.

