WEBVTT
1
00:00:00.360 --> 00:00:00.930
All right, guys.

2
00:00:00.930 --> 00:00:06.240
So now we're going to jump in and get started with CSS Grid, which is one of the best additions to

3
00:00:06.240 --> 00:00:11.190
CSIS and makes grid based layouts very easy to create.

4
00:00:11.430 --> 00:00:12.990
So what is the grid?

5
00:00:13.020 --> 00:00:15.720
It's a grid layout system for CSIS.

6
00:00:15.750 --> 00:00:21.060
It's similar to Flexbox in that you can do a lot of the same things that you can do at Flexbox.

7
00:00:21.090 --> 00:00:27.120
However, there are some big differences, the biggest being that the grid is capable of two dimensional

8
00:00:27.120 --> 00:00:29.040
layouts, and I'll get to that in a minute.

9
00:00:29.580 --> 00:00:34.590
CSS grid is a bit harder to use than flex, but it's also more powerful.

10
00:00:34.590 --> 00:00:40.170
And we can use we can still use the same alignment properties that we've used with flex such as a line

11
00:00:40.170 --> 00:00:47.730
items justify content as far as browser support all browsers support it aside from Internet Explorer,

12
00:00:47.730 --> 00:00:51.090
which does have partial support for the grid system.

13
00:00:51.960 --> 00:00:56.670
Now, since you've already learned, Flexbox, if you've been following along with this course, that's

14
00:00:56.670 --> 00:01:02.310
going to help you tremendously because you understand the concept of having a container and then having

15
00:01:02.310 --> 00:01:09.060
items within that container and grid works the same way where you set, you know, you set a display

16
00:01:09.060 --> 00:01:15.510
property to grid of a container and then all of the child elements become grid items.

17
00:01:15.510 --> 00:01:21.960
And then we can set an property called grid template columns where we define the number of columns that

18
00:01:21.960 --> 00:01:23.940
we want as well as the widths.

19
00:01:23.940 --> 00:01:29.160
And you're going to be introduced to a new unit of measure called FFR or fraction.

20
00:01:29.190 --> 00:01:35.730
Now, the biggest difference between flex and the grid is that Flex is not capable of two dimensional

21
00:01:35.730 --> 00:01:36.240
layouts.

22
00:01:36.240 --> 00:01:41.760
You use it for a single row or column and you just set your alignments with the grid.

23
00:01:41.760 --> 00:01:44.250
You can have two dimensional layouts.

24
00:01:44.250 --> 00:01:50.970
So on the left we have just a one dimensional row with a nav bar and this is something we would use

25
00:01:50.970 --> 00:01:52.020
Flexbox for.

26
00:01:52.050 --> 00:01:56.570
You could use the grid, but Flex is usually good for this type of stuff.

27
00:01:56.580 --> 00:02:04.800
And then on the right we have basically an entire layout that is set with one grid and you can actually

28
00:02:04.800 --> 00:02:09.330
span items across multiple columns in multiple rows.

29
00:02:09.330 --> 00:02:12.750
And this is a good example of exactly what I'm talking about.

30
00:02:12.750 --> 00:02:16.920
This is one grid and this is something we cannot do with Flexbox.

31
00:02:16.920 --> 00:02:18.660
You see, it's it's two dimensional.

32
00:02:18.660 --> 00:02:20.040
It goes both ways.

33
00:02:20.040 --> 00:02:28.980
We can take a an item and we can span it down a rows, separate rows, or we can take an item and we

34
00:02:28.980 --> 00:02:35.550
can span it across columns, or we can span it across both rows and columns where.

35
00:02:35.580 --> 00:02:43.560
Flexbox You would just have just elements along in one row, one line, and it's just one dimensional.

36
00:02:43.980 --> 00:02:46.080
So that's, that's the biggest difference.

37
00:02:46.080 --> 00:02:49.600
And there's different use cases for each.

38
00:02:49.620 --> 00:02:53.910
I can't stand the argument of always use CSS grid.

39
00:02:54.240 --> 00:02:59.400
It's in my opinion, people that say that they're just the type of people that have to use the newest

40
00:02:59.400 --> 00:03:05.340
thing and have to use buzzwords just to basically sound smart and sound cool.

41
00:03:05.340 --> 00:03:06.770
And that's just ridiculous.

42
00:03:06.780 --> 00:03:10.710
There's different use cases for grid and flex.

43
00:03:10.710 --> 00:03:18.390
For me, I like to use CSS grid for outer elements, basically boxes and grid like layouts and then

44
00:03:18.390 --> 00:03:23.010
for simple alignments or inner elements, things like menu items, stuff like that.

45
00:03:23.010 --> 00:03:23.730
You use Flex.

46
00:03:23.730 --> 00:03:31.440
I use Flex for most of the stuff that we've done up to this point, like menu items and landing pages

47
00:03:31.440 --> 00:03:33.930
where we're centering elements in a flex column.

48
00:03:33.930 --> 00:03:35.640
I would I would use Flex for that.

49
00:03:35.640 --> 00:03:37.250
I would not use the grid for that.

50
00:03:37.260 --> 00:03:42.090
There were a couple of cases like maybe with the hotel site where we had the different boxes.

51
00:03:42.090 --> 00:03:46.950
I may have used the grid for that, but, you know, it's it's preference.

52
00:03:46.950 --> 00:03:48.180
Everyone's different.

53
00:03:48.180 --> 00:03:54.120
Some people will use only one or the other, but those people generally don't understand the difference

54
00:03:54.120 --> 00:03:55.950
and the use cases.

55
00:03:56.370 --> 00:04:00.420
So you want to you'll kind of pick this stuff up as you go along.

56
00:04:01.080 --> 00:04:01.440
All right.

57
00:04:01.440 --> 00:04:04.710
So let's jump in and let's start to learn CSS grid.

