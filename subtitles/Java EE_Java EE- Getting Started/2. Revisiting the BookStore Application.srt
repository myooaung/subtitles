1
00:00:02,247 --> 00:00:06,795
From 10, 000 feet high, our BookStore application looks like this,

2
00:00:06,795 --> 00:00:11,929
and Angular front-end invoking a Java EE back-end.

3
00:00:11,929 --> 00:00:15,439
Let's start from the Java EE back-end.

4
00:00:15,439 --> 00:00:18,848
After setting up our Java EE environment and bootstrapping

5
00:00:18,848 --> 00:00:21,629
our application with a Maven archetype,

6
00:00:21,629 --> 00:00:26,184
we focused on the domain model of our application.

7
00:00:26,184 --> 00:00:32,095
The Book entity gets mapped into an in-memory relational database.

8
00:00:32,095 --> 00:00:36,359
The Book entity is just a Java class representing a

9
00:00:36,359 --> 00:00:38,470
book and using JPA annotation,

10
00:00:38,470 --> 00:00:45,240
so the attributes get mapped to a specific column of the table.

11
00:00:45,240 --> 00:00:49,151
We then added a transactional repository to allow CRUD operation

12
00:00:49,151 --> 00:00:53,811
on the Book entity as well as querying it.

13
00:00:53,811 --> 00:00:58,393
The way database access works is through the EntityManager.

14
00:00:58,393 --> 00:00:59,085
Once injected,

15
00:00:59,085 --> 00:01:03,982
it's just a matter of calling the method find to get the Book

16
00:01:03,982 --> 00:01:08,350
from the database or persist to insert it.

17
00:01:08,350 --> 00:01:11,312
To do these operations in a transactional manner,

18
00:01:11,312 --> 00:01:15,771
we annotate the class or the methods with the annotation

19
00:01:15,771 --> 00:01:19,990
transactional and specify the right transaction policy.

20
00:01:19,990 --> 00:01:22,496
Because finding by identifier is not enough,

21
00:01:22,496 --> 00:01:27,476
we can use a query language to get all the books

22
00:01:27,476 --> 00:01:32,007
from the database or count them, for example.

23
00:01:32,007 --> 00:01:36,684
We introduced integration testing, thanks to Arquillian.

24
00:01:36,684 --> 00:01:40,271
We then kept refactoring our tests throughout the modules as we

25
00:01:40,271 --> 00:01:44,015
progressed in adding more features to our application,

26
00:01:44,015 --> 00:01:45,968
such as validating data.

27
00:01:45,968 --> 00:01:50,742
We used bean validation to constrain the Book entity attributes

28
00:01:50,742 --> 00:01:54,321
and make sure that the data we persist is valid.

29
00:01:54,321 --> 00:01:59,974
We also validated the methods parameters of our Book repository.

30
00:01:59,974 --> 00:02:05,356
TO validate data, it's just a matter of annotating our attributes.

31
00:02:05,356 --> 00:02:10,672
One annotation size and bean validation will make sure the description of a

32
00:02:10,672 --> 00:02:17,013
book can't be less than 1 character and more than 10000.

33
00:02:17,013 --> 00:02:20,385
We then added some business logic to our application,

34
00:02:20,385 --> 00:02:26,209
Number Generator and Text Util are two utility classes used by the Book

35
00:02:26,209 --> 00:02:33,570
repository to generate ISBN numbers and sanitize book titles.

36
00:02:33,570 --> 00:02:37,035
To get a reference to these utilities classes we use

37
00:02:37,035 --> 00:02:39,277
CDI and its @Inject annotation.

38
00:02:39,277 --> 00:02:43,554
That's because, in fact, BookRepository,

39
00:02:43,554 --> 00:02:47,154
NumberGenerator, and textUtil are all managed beans,

40
00:02:47,154 --> 00:02:53,741
beans that are managed by the Java EE container.

41
00:02:53,741 --> 00:02:56,679
Once we add all our business logic setup,

42
00:02:56,679 --> 00:03:03,395
we expose it through the REST API Book Endpoint talking to the Book Repository.

43
00:03:03,395 --> 00:03:08,142
We even used our browser to visualize some JSON content.

44
00:03:08,142 --> 00:03:10,318
The BookEndpoint acts as a proxy.

45
00:03:10,318 --> 00:03:13,498
It delegates all the calls to the BookRepository,

46
00:03:13,498 --> 00:03:16,067
redefines all the methods,

47
00:03:16,067 --> 00:03:23,830
and exposes them through HTTP thanks to JAX-RS annotations.

48
00:03:23,830 --> 00:03:29,567
Exposing a REST API is only good if developers know how to use it.

49
00:03:29,567 --> 00:03:35,723
That's when we use Swagger to document our API and generate a JSON contract.

50
00:03:35,723 --> 00:03:39,722
It was just a matter of adding Swagger annotations to our BookEndpoint

51
00:03:39,722 --> 00:03:44,084
and leaving a Maven plugin to generate the contract.

52
00:03:44,084 --> 00:03:50,250
This contract was then later used to generate the Angular services.

53
00:03:50,250 --> 00:03:55,782
Our Java EE back-end was tested and exposed a documented API.

54
00:03:55,782 --> 00:03:59,150
We then entered the second part of this course,

55
00:03:59,150 --> 00:04:04,807
building an Angular application to communicate with the REST API.

56
00:04:04,807 --> 00:04:08,862
For that we set up our Angular development environment and

57
00:04:08,862 --> 00:04:12,883
bootstrapped an empty application so we could at least visualize

58
00:04:12,883 --> 00:04:16,046
a simple HTML webpage with our browser.

59
00:04:16,046 --> 00:04:21,725
Then with Angular CLI we quickly generated our three components,

60
00:04:21,725 --> 00:04:24,784
book-list, book-detail, and book-form,

61
00:04:24,784 --> 00:04:29,295
and beautified them with Twitter Bootstrap components.

62
00:04:29,295 --> 00:04:35,755
An Angular component is made of an HTML template and a TypeScript class.

63
00:04:35,755 --> 00:04:40,663
The glue between the two is made through binding.

64
00:04:40,663 --> 00:04:45,110
Bundling our three components into a single one wasn't what we want.

65
00:04:45,110 --> 00:04:51,129
Thanks to the Angular router we easily added navigation between our components,

66
00:04:51,129 --> 00:04:54,530
either by clicking on a menu or a button.

67
00:04:54,530 --> 00:04:57,059
The Angular router is very rich and flexible,

68
00:04:57,059 --> 00:05:02,768
it's just a matter of creating routes and using them on the HTML template,

69
00:05:02,768 --> 00:05:07,770
thanks to the routerLink directive.

70
00:05:07,770 --> 00:05:13,969
Finally, we managed to invoke our REST API using an Angular service and model.

71
00:05:13,969 --> 00:05:18,526
The Book service uses the Angular HTTP module and its reactive

72
00:05:18,526 --> 00:05:24,147
API to execute HTTP calls to our back-end.

73
00:05:24,147 --> 00:05:27,250
It was then a matter of injecting the Book service

74
00:05:27,250 --> 00:05:28,916
into our graphical components.

75
00:05:28,916 --> 00:05:34,795
We finally have the entire pieces working together.

76
00:05:34,795 --> 00:05:38,389
And thanks to our JSON contract and the Swagger CodeGen tool,

77
00:05:38,389 --> 00:05:46,042
we saved a lot of time by simply generating the TypeScript code.

78
00:05:46,042 --> 00:05:47,642
In terms of deployment,

79
00:05:47,642 --> 00:05:53,739
we packed our Java EE application into a war file and deployed to WildFly.

80
00:05:53,739 --> 00:06:04,000
The Angular application was executed in memory running in Express, which was very handy in development mode.

