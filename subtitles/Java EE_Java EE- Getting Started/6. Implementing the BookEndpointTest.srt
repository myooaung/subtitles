1
00:00:01,662 --> 00:00:06,501
We will use this JAX-RS client API for our Arquillian tests.

2
00:00:06,501 --> 00:00:12,746
In module 6 we saw that Arquillian is perfect for integration tests.

3
00:00:12,746 --> 00:00:19,060
It packages the business code as well as the test class into an archive.

4
00:00:19,060 --> 00:00:25,736
Then it deploys it to WildFly and executes the test inside the container.

5
00:00:25,736 --> 00:00:29,692
But that is not the way we will test our REST endpoint.

6
00:00:29,692 --> 00:00:34,230
We need to test it from outside the container.

7
00:00:34,230 --> 00:00:37,390
Arquillian has a specific mode where it doesn't package

8
00:00:37,390 --> 00:00:40,131
the test class inside the archive.

9
00:00:40,131 --> 00:00:46,535
Therefore, the tests are not executed from inside the container,

10
00:00:46,535 --> 00:00:51,296
but from outside through HTTP.

11
00:00:51,296 --> 00:00:56,989
Let's take back our BookEndpoint, it has a GET method returning a single book,

12
00:00:56,989 --> 00:00:58,898
giving its identifier.

13
00:00:58,898 --> 00:01:06,016
This method is accessible through an HTTP GET on /books/123.

14
00:01:06,016 --> 00:01:12,098
Let's test this method with Arquillian.

15
00:01:12,098 --> 00:01:16,722
The BookEndpointTest class still needs an Arquillian runner.

16
00:01:16,722 --> 00:01:20,102
But we need to inform Arquillian that this test

17
00:01:20,102 --> 00:01:22,795
class will run as a remote client.

18
00:01:22,795 --> 00:01:26,467
We still need to package the REST application that

19
00:01:26,467 --> 00:01:29,570
is going to be deploy on WildFly,

20
00:01:29,570 --> 00:01:37,015
but also specify not to package the current test class with testable = false.

21
00:01:37,015 --> 00:01:42,692
Finally we create as many tests as we want.

22
00:01:42,692 --> 00:01:44,827
Being a remote HTTP test,

23
00:01:44,827 --> 00:01:50,063
we ask Arquillian to inject the web target pointing at /books.

24
00:01:50,063 --> 00:01:59,463
With this web target we execute an HTTP GET on /123, the identifier of the book.

25
00:01:59,463 --> 00:02:08,702
Get an HTTP response and check the status code of the response is okay.

26
00:02:08,702 --> 00:02:15,165
Let's see this code in action in an Arquillian test called BookEndpointTest.

27
00:02:15,165 --> 00:02:20,000
This client test is using the JAX-RS Client API to

28
00:02:20,000 --> 00:02:22,407
access remotely the deployed endpoint.

29
00:02:22,407 --> 00:02:28,695
This kind of testing is often called black box testing where we

30
00:02:28,695 --> 00:02:34,646
only access the external API of a component,

31
00:02:34,646 --> 00:02:37,622
not its core code.

32
00:02:37,622 --> 00:02:40,566
So here we are in front of the BookEndpoint.

33
00:02:40,566 --> 00:02:43,581
Let's create an Arquillian test.

34
00:02:43,581 --> 00:02:50,492
I'm using the IntelliJ IDEA wizard again and the first thing I'm

35
00:02:50,492 --> 00:02:54,795
going to do is a copy/paste from BookRepository,

36
00:02:54,795 --> 00:02:57,229
you'll remember all the ShrinkWrap packaging,

37
00:02:57,229 --> 00:03:03,889
so I'm copying that to save a bit of time.

38
00:03:03,889 --> 00:03:06,408
Here it is.

39
00:03:06,408 --> 00:03:10,606
And because I'm testing BookEndpoint,

40
00:03:10,606 --> 00:03:19,473
I need to add BookEndpoint to the archive as well as the JAXRSConfiguration.

41
00:03:19,473 --> 00:03:22,470
And I'm saying testable = false,

42
00:03:22,470 --> 00:03:29,047
so I'm telling ShrinkWrap not to package the test class inside the archive,

43
00:03:29,047 --> 00:03:33,025
and I'm running this as a client.

44
00:03:33,025 --> 00:03:40,393
Now I'm using a nice Arquillian trick, I'm injecting the WebTarget,

45
00:03:40,393 --> 00:03:41,961
so api/books.

46
00:03:41,961 --> 00:03:50,153
This way I have a WebTarget object pointing at api/books.

47
00:03:50,153 --> 00:03:57,357
So first let's test the count, count all.

48
00:03:57,357 --> 00:04:03,145
So what I do is I use the WebTarget to give me a response and then

49
00:04:03,145 --> 00:04:07,092
I will assert that this response is correct.

50
00:04:07,092 --> 00:04:11,463
So counting books is on the URL api/books/count,

51
00:04:11,463 --> 00:04:15,466
that's why I do the path count,

52
00:04:15,466 --> 00:04:21,950
and I'm doing an HTTP GET that returns a response and

53
00:04:21,950 --> 00:04:26,628
remember that the database is empty so that this stage I

54
00:04:26,628 --> 00:04:30,926
should have NO_CONTENT status code.

55
00:04:30,926 --> 00:04:36,672
So let's make it cleaner.

56
00:04:36,672 --> 00:04:40,125
And that is more or less the same thing for the find all,

57
00:04:40,125 --> 00:04:46,186
so let's test the find all or we use the response,

58
00:04:46,186 --> 00:04:47,502
the webTarget,

59
00:04:47,502 --> 00:04:55,399
so this time I'm not using the path because counting all books is on api/books.

60
00:04:55,399 --> 00:04:57,818
I do HTTP GET.

61
00:04:57,818 --> 00:05:03,262
I need JSON, so let's make that cleaner again,

62
00:05:03,262 --> 00:05:11,644
and let's copy/paste the line above because it's the same thing.

63
00:05:11,644 --> 00:05:15,841
And what I'm going to do now is create a book.

64
00:05:15,841 --> 00:05:21,620
So because I like copy pasting, I'm going back to the BookRepository.

65
00:05:21,620 --> 00:05:32,861
here copy/paste the new book, and I'm reusing the webTarget and the response.

66
00:05:32,861 --> 00:05:37,273
This time I am not going to do an HTTP GET,

67
00:05:37,273 --> 00:05:42,045
but a POST, so there's also a post method.

68
00:05:42,045 --> 00:05:53,344
And I'm using a little JAX-RS trick to convert the book into an entity.

69
00:05:53,344 --> 00:05:55,863
Here it is,

70
00:05:55,863 --> 00:06:05,902
I have to say that it's in JSON and this time when I do an HTTP

71
00:06:05,902 --> 00:06:09,635
POST I expect to have a CREATED status code,

72
00:06:09,635 --> 00:06:11,762
not a NO_CONTENT.

73
00:06:11,762 --> 00:06:16,016
So the test looks good now.

74
00:06:16,016 --> 00:06:17,449
Let's execute it.

75
00:06:17,449 --> 00:06:22,226
So WildFly is running and I'm going to run the

76
00:06:22,226 --> 00:06:24,516
BookEndpoint test with this method.

77
00:06:24,516 --> 00:06:27,263
So this is a remote test.

78
00:06:27,263 --> 00:06:29,586
Good.

79
00:06:29,586 --> 00:06:31,908
Great.

80
00:06:31,908 --> 00:06:34,350
Let's commit the code now.

81
00:06:34,350 --> 00:06:38,258
So in this module we've created the BookEndpoint,

82
00:06:38,258 --> 00:06:45,664
the JAXRSConfiguration, remember that we imported some SQL data in the database,

83
00:06:45,664 --> 00:06:57,000
100 books, and we created a BookEndpointTest to have remote testing. Here it is.

