WEBVTT
1
00:00:02.125 --> 00:00:05.615
Let's leave the slides and go back to the IDE.

2
00:00:05.615 --> 00:00:09.765
I'll now write an integration test with JUnit and Arquillian to

3
00:00:09.765 --> 00:00:13.196
make sure our book repository behaves as expected.

4
00:00:13.196 --> 00:00:18.562
That means packaging our code with ShrinkWrap and

5
00:00:18.562 --> 00:00:23.789
testing CRUD operation within WildFly.

6
00:00:23.789 --> 00:00:29.564
Back to the IDE, to save us a bit of time I've already changed the pom.

7
00:00:29.564 --> 00:00:33.956
xml so make sure to go and check the code.

8
00:00:33.956 --> 00:00:37.176
So I've installed JUnit, Arquillian, ShrinkWrap,

9
00:00:37.176 --> 00:00:45.019
add the right dependencies, so here it's Arquillian-universe,

10
00:00:45.019 --> 00:00:50.601
JUnit, the JUnit extension of Arquillian,

11
00:00:50.601 --> 00:01:02.173
both in scope test, ShrinkWrap and the WildFly container extension.

12
00:01:02.173 --> 00:01:05.859
Okay so now that we have all the dependencies set,

13
00:01:05.859 --> 00:01:07.899
let's create a BookRepository test.

14
00:01:07.899 --> 00:01:08.834
So again,

15
00:01:08.834 --> 00:01:15.839
I'm using IntelliJ IDEA to save a bit of time and I'm going to

16
00:01:15.839 --> 00:01:19.976
create an Arquillian test from the book repository.

17
00:01:19.976 --> 00:01:27.558
So here I pick up Arquillian JUnit, let's say I override method create,

18
00:01:27.558 --> 00:01:36.011
OK, here it is, IntelliJ has created a basic test for me.

19
00:01:36.011 --> 00:01:38.126
So let's run it.

20
00:01:38.126 --> 00:01:44.309
So I use Maven, Maven test, and this test should fail.

21
00:01:44.309 --> 00:01:45.736
Why that?

22
00:01:45.736 --> 00:01:53.856
If you scroll the logs, we see that the test couldn't connect.

23
00:01:53.856 --> 00:01:54.839
Of course,

24
00:01:54.839 --> 00:02:01.289
it's an integration test so I need to run WildFly on a

25
00:02:01.289 --> 00:02:06.686
separate process and then execute the test again.

26
00:02:06.686 --> 00:02:18.160
So here WildFly is starting, okay, and I'm going to do Maven test again.

27
00:02:18.160 --> 00:02:21.016
And this time it should work.

28
00:02:21.016 --> 00:02:21.492
Good.

29
00:02:21.492 --> 00:02:26.925
I'm not going to use the command line all the time so,

30
00:02:26.925 --> 00:02:30.515
again, with IntelliJ IDEA there's a nice Arquillian integration,

31
00:02:30.515 --> 00:02:35.267
so I just click on the green arrow and it does the same thing,

32
00:02:35.267 --> 00:02:38.690
expect it's nicer, I have a green bar.

33
00:02:38.690 --> 00:02:41.685
Okay our test doesn't do much yet.

34
00:02:41.685 --> 00:02:46.274
So let's actually test the book repository.

35
00:02:46.274 --> 00:02:57.901
First of all I inject the BookRepository class, private BookRepository.

36
00:02:57.901 --> 00:03:02.641
Now I'm going to test the countAll and findAll.

37
00:03:02.641 --> 00:03:06.297
So at this point of time, my database is empty.

38
00:03:06.297 --> 00:03:20.182
So if I do bookRepository countAll, I except to have 0 entities, 0.

39
00:03:20.182 --> 00:03:23.002
Same for the findAll.

40
00:03:23.002 --> 00:03:24.412
So bookRepository.

41
00:03:24.412 --> 00:03:25.117
findAll.

42
00:03:25.117 --> 00:03:35.647
size, because it returns a list of book entities, should also return 0.

43
00:03:35.647 --> 00:03:39.334
Let's execute the test.

44
00:03:39.334 --> 00:03:43.021
Oh, the test failed.

45
00:03:43.021 --> 00:03:50.186
Okay let's make it bigger and scroll the logs and see why.

46
00:03:50.186 --> 00:03:56.091
Oh, that's because it hasn't found the Book class.

47
00:03:56.091 --> 00:03:57.013
Remember ShrinkWrap?

48
00:03:57.013 --> 00:04:03.285
We have to tell ShrinkWrap to add the Book class inside the archive.

49
00:04:03.285 --> 00:04:07.157
So we do down the createDeployment method,

50
00:04:07.157 --> 00:04:16.098
add the class Book, here it is, and run the test again.

51
00:04:16.098 --> 00:04:18.049
Should be better.

52
00:04:18.049 --> 00:04:18.700
Nope.

53
00:04:18.700 --> 00:04:20.651
Still doesn't work.

54
00:04:20.651 --> 00:04:25.622
Scroll the logs, oh, that's because I don't have a persistence unit.

55
00:04:25.622 --> 00:04:32.390
Yeah, when I created the test, IntelliJ IDEA created a test-persistence.

56
00:04:32.390 --> 00:04:39.676
xml, so now we have to tell ShrinkWrap to package the test-persistence.

57
00:04:39.676 --> 00:04:42.778
xml inside the archive.

58
00:04:42.778 --> 00:04:44.443
So META-INF/test-persistence.

59
00:04:44.443 --> 00:04:51.059
xml and of course we have to call it persistence.

60
00:04:51.059 --> 00:04:51.607
xml.

61
00:04:51.607 --> 00:04:53.799
That should be better.

62
00:04:53.799 --> 00:04:57.634
Let's run the test again.

63
00:04:57.634 --> 00:04:59.169
Nope, failed.

64
00:04:59.169 --> 00:05:04.522
Scroll the logs, something might be wrong.

65
00:05:04.522 --> 00:05:06.045
Oh, language,

66
00:05:06.045 --> 00:05:13.498
remember that the Book entity has a reference to the enumeration

67
00:05:13.498 --> 00:05:18.483
language and again it has to be packaged in the archive.

68
00:05:18.483 --> 00:05:21.358
Execute the test, yes, it's green.

69
00:05:21.358 --> 00:05:26.344
So we made sure that the countAll and the findAll

70
00:05:26.344 --> 00:05:30.149
returned 0 when the database is empty.

71
00:05:30.149 --> 00:05:33.933
So now let's create a book.

72
00:05:33.933 --> 00:05:43.226
So it's just a matter of creating a Book object and passing some attributes,

73
00:05:43.226 --> 00:05:49.947
so the isbn, let's call it isbn, a title,

74
00:05:49.947 --> 00:05:56.057
a unit cost, let's say it's $12, it's 123 pages long,

75
00:05:56.057 --> 00:06:02.302
written in English, the publication date - I just put new Date,

76
00:06:02.302 --> 00:06:04.846
the imageURL - well http://blahblahblah,

77
00:06:04.846 --> 00:06:07.868
and a description of the book.

78
00:06:07.868 --> 00:06:11.393
So now I've created a Book object.

79
00:06:11.393 --> 00:06:13.935
I'm going to persist it into the database.

80
00:06:13.935 --> 00:06:14.593
How?

81
00:06:14.593 --> 00:06:19.860
By calling the Create method in the bookRepository.

82
00:06:19.860 --> 00:06:26.467
So now the book should have been persisted in the database.

83
00:06:26.467 --> 00:06:31.087
Let's save the bookId, so book.

84
00:06:31.087 --> 00:06:35.708
getId, now I have the identifier.

85
00:06:35.708 --> 00:06:39.291
Let's check this identify is not null.

86
00:06:39.291 --> 00:06:43.386
Remember the JPA generates an Id for us,

87
00:06:43.386 --> 00:06:49.766
so I want to make sure this Id is not null.

88
00:06:49.766 --> 00:06:54.432
Okay, so the book has been persisted in the database.

89
00:06:54.432 --> 00:06:58.071
I should be able to find it.

90
00:06:58.071 --> 00:06:58.591
How?

91
00:06:58.591 --> 00:07:02.145
Again, with the bookRepository, so bookRepository.

92
00:07:02.145 --> 00:07:07.305
find, giving this bookId that I've saved.

93
00:07:07.305 --> 00:07:11.472
So that returns a book from the database.

94
00:07:11.472 --> 00:07:18.424
So now we want to make sure it's the right book and it has been found.

95
00:07:18.424 --> 00:07:22.897
Well one way of doing it is checking the title,

96
00:07:22.897 --> 00:07:33.205
for example, so make sure the title of the book it's called a title.

97
00:07:33.205 --> 00:07:35.210
Here it is.

98
00:07:35.210 --> 00:07:39.221
Assert, the title is a title.

99
00:07:39.221 --> 00:07:42.343
Let's execute the test.

100
00:07:42.343 --> 00:07:44.685
Yes, it's green.

101
00:07:44.685 --> 00:07:52.525
So I made sure the create and the find was working.

102
00:07:52.525 --> 00:07:59.698
Let's copy/paste these two lines and now that we have created one book,

103
00:07:59.698 --> 00:08:03.567
doing a countAll and findAll should be 1,

104
00:08:03.567 --> 00:08:08.485
it should be 1 book in the database now.

105
00:08:08.485 --> 00:08:13.064
Yes, so looks like our queries are working.

106
00:08:13.064 --> 00:08:21.066
One last test, let's delete the book from the database, so bookRepository.

107
00:08:21.066 --> 00:08:27.068
delete, giving the bookId, and you know what,

108
00:08:27.068 --> 00:08:33.238
let's copy these two lines and now we've created one book,

109
00:08:33.238 --> 00:08:41.119
deleted one book, so if we count the number of books it should be back to 0.

110
00:08:41.119 --> 00:08:45.885
Yes, our integration test is working.

111
00:08:45.885 --> 00:08:49.856
Okay let's commit our code.

112
00:08:49.856 --> 00:08:51.856
So let's make that bigger.

113
00:08:51.856 --> 00:08:54.657
So this time we've changed the pom.

114
00:08:54.657 --> 00:08:57.329
xml, there was a test-persistence.

115
00:08:57.329 --> 00:09:09.000
xml and we created the bookRepository test. Let's change that and commit for next module.

