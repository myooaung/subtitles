1
00:00:02,560 --> 00:00:04,573
Time to develop our book entity.

2
00:00:04,573 --> 00:00:09,092
I'll go step by step so you understand how things get together.

3
00:00:09,092 --> 00:00:14,501
First of all, I will implement the Book object, our domain model.

4
00:00:14,501 --> 00:00:18,749
Then I'll add the needed Java Persistence API annotations so

5
00:00:18,749 --> 00:00:24,608
you will be able to turn the Book object into a Book entity and

6
00:00:24,608 --> 00:00:27,385
map it to a relational database.

7
00:00:27,385 --> 00:00:36,143
I'll also generate the DDL so you can see what annotations are used for.

8
00:00:36,143 --> 00:00:39,498
So here I am in front of my IDE.

9
00:00:39,498 --> 00:00:44,901
I'm going to use IntelliJ IDEA wizard to save me a bit of time.

10
00:00:44,901 --> 00:00:50,985
So here I'm creating a persistence XML and src/main/resources.

11
00:00:50,985 --> 00:00:54,694
Click on OK.

12
00:00:54,694 --> 00:00:58,404
Here it is.

13
00:00:58,404 --> 00:01:01,348
So for now it's empty.

14
00:01:01,348 --> 00:01:04,292
Let's create a persistence unit.

15
00:01:04,292 --> 00:01:15,589
I'm going to call it bookStore and PU for persistence unit.

16
00:01:15,589 --> 00:01:16,950
Here it is.

17
00:01:16,950 --> 00:01:18,311
Again it's empty,

18
00:01:18,311 --> 00:01:25,664
but now that I have a persistence unit I'm going to create an entity,

19
00:01:25,664 --> 00:01:27,526
the Book entity.

20
00:01:27,526 --> 00:01:30,361
So I'll give it a name, Book.

21
00:01:30,361 --> 00:01:40,496
And the package, I'm going to go under the sub-package model, so com.

22
00:01:40,496 --> 00:01:41,876
Pluralsight.

23
00:01:41,876 --> 00:01:43,255
bookstore.

24
00:01:43,255 --> 00:01:44,634
model.

25
00:01:44,634 --> 00:01:46,537
Here it is.

26
00:01:46,537 --> 00:01:54,338
IntelliJ has put the Entity annotation and now I just add the attributes.

27
00:01:54,338 --> 00:02:02,691
So to be persistent a book has to have an identifier id of type Long,

28
00:02:02,691 --> 00:02:08,704
then a book has a title, a description.

29
00:02:08,704 --> 00:02:16,864
A book has price, so I call the attribute unitCost of type Float,

30
00:02:16,864 --> 00:02:21,992
an isbn number, publicationDate of type Date,

31
00:02:21,992 --> 00:02:26,387
so when is the book published.

32
00:02:26,387 --> 00:02:36,647
A book has a number of pages and it has an image to be displayed on the webpage.

33
00:02:36,647 --> 00:02:40,189
And a book is written in a language,

34
00:02:40,189 --> 00:02:45,201
so I'm going to create the language enumeration,

35
00:02:45,201 --> 00:02:52,662
here it is, and let's add English, French,

36
00:02:52,662 --> 00:02:59,369
Spanish, Portuguese, Italian, Finish, German,

37
00:02:59,369 --> 00:03:03,393
Deutsch, and Russian.

38
00:03:03,393 --> 00:03:09,713
So while you can see, and we have several languages to choose from,

39
00:03:09,713 --> 00:03:17,744
back to the book Entity and let's add private Language language.

40
00:03:17,744 --> 00:03:25,533
So this is just a Java class with getters and setters

41
00:03:25,533 --> 00:03:29,514
and let's put a toString method,

42
00:03:29,514 --> 00:03:36,942
so again I'll leave IntelliJ IDEA to generate all that for me.

43
00:03:36,942 --> 00:03:42,877
So here we don't have any specificities of JPA yet.

44
00:03:42,877 --> 00:03:50,382
What we need to do is to tell JPA which attribute is the identifier,

45
00:03:50,382 --> 00:03:55,536
so that's the annotation @Id and generated value will

46
00:03:55,536 --> 00:03:58,812
automatically generate an Id for us.

47
00:03:58,812 --> 00:04:03,947
Then I'm using the @Column annotation to change the

48
00:04:03,947 --> 00:04:07,998
length of title and description.

49
00:04:07,998 --> 00:04:13,149
For unitCost I'm also using the @Column annotation,

50
00:04:13,149 --> 00:04:16,452
but that's to change the name of the column,

51
00:04:16,452 --> 00:04:23,589
so I want the attribute unitCost to be mapped on a column called unit_cost,

52
00:04:23,589 --> 00:04:29,216
and same thing for publicationDate.

53
00:04:29,216 --> 00:04:33,003
Here I'm specifying that the publicationDate is a date,

54
00:04:33,003 --> 00:04:36,256
I could have chosen a timestamp.

55
00:04:36,256 --> 00:04:43,320
Okay let's generate the DDL now with these annotations.

56
00:04:43,320 --> 00:04:48,628
So here in the persistence XML I have to add some properties.

57
00:04:48,628 --> 00:04:49,293
Javax.

58
00:04:49,293 --> 00:04:56,610
persistence are the default properties of JPA and now I'm saying

59
00:04:56,610 --> 00:05:02,672
drop-and-create the database each time you re-deploy the application.

60
00:05:02,672 --> 00:05:04,820
So that's for the in-memory database,

61
00:05:04,820 --> 00:05:11,031
but I'm going to add another property to get the DDL script.

62
00:05:11,031 --> 00:05:19,652
So again I will create a DDL for creating tables and that

63
00:05:19,652 --> 00:05:23,281
will be on the file bookStoreCreate.

64
00:05:23,281 --> 00:05:27,928
ddl, and another script to drop the tables,

65
00:05:27,928 --> 00:05:31,826
and that's going to be on bookStoreDrop.

66
00:05:31,826 --> 00:05:32,383
ddl.

67
00:05:32,383 --> 00:05:35,909
Okays so now I have annotations, I have these properties.

68
00:05:35,909 --> 00:05:41,087
So I deploy the application, so again running WildFly,

69
00:05:41,087 --> 00:05:45,937
the code is compiled, packaged in a war file,

70
00:05:45,937 --> 00:05:51,757
WildFly deploys it, and now if I go to the directory,

71
00:05:51,757 --> 00:05:58,984
here it is, of WildFly, I should find the bookStoreCreate.

72
00:05:58,984 --> 00:05:59,707
ddl.

73
00:05:59,707 --> 00:06:03,783
So that's the physical structure of the database our

74
00:06:03,783 --> 00:06:06,752
Book entity will be mapped in.

75
00:06:06,752 --> 00:06:08,815
Let's look at imageUrl.

76
00:06:08,815 --> 00:06:11,643
As you can see, I don't have an underscore,

77
00:06:11,643 --> 00:06:17,306
so it's just a matter of going back to the entity,

78
00:06:17,306 --> 00:06:21,981
adding the appropriate @Column, so image_url,

79
00:06:21,981 --> 00:06:33,367
redeploying the application in WildFly, and here it is,

80
00:06:33,367 --> 00:06:34,632
image_url.

81
00:06:34,632 --> 00:06:38,093
I can do the same thing for number of pages.

82
00:06:38,093 --> 00:06:52,790
So Column name and the _of_pages and redeploy the application and here it is,

83
00:06:52,790 --> 00:06:57,567
I'm looking for number of pages, yep.

84
00:06:57,567 --> 00:07:04,429
So this is how we map an entity in a physical structure of the database.

85
00:07:04,429 --> 00:07:07,446
It's just a matter of finding the right name for

86
00:07:07,446 --> 00:07:10,256
the columns and the right length.

87
00:07:10,256 --> 00:07:26,000
Okay so we finished module 4. So let's commit some code so it's easier to get back if needed.

