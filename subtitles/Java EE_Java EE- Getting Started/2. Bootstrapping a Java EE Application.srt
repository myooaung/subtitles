1
00:00:02,620 --> 00:00:07,464
Setting up a Java EE application demands a few manual steps.

2
00:00:07,464 --> 00:00:08,664
First of all,

3
00:00:08,664 --> 00:00:12,263
we need to create an application folder for the

4
00:00:12,263 --> 00:00:14,390
entire code and configuration files,

5
00:00:14,390 --> 00:00:19,322
then because we need Maven we need to create a Maven

6
00:00:19,322 --> 00:00:22,176
directory structure and add a pom.

7
00:00:22,176 --> 00:00:23,128
xml file.

8
00:00:23,128 --> 00:00:28,719
In this configuration file we need to install the Java EE dependencies and add

9
00:00:28,719 --> 00:00:33,825
minimum number of Java code so we are sure our setup is okay.

10
00:00:33,825 --> 00:00:37,642
These steps are time consuming and error prone.

11
00:00:37,642 --> 00:00:43,884
To save some time, we will rely on Maven and its Maven archetype.

12
00:00:43,884 --> 00:00:48,258
The Maven archetype is a project templating toolkit providing a

13
00:00:48,258 --> 00:00:51,704
consistent mean of generating Maven projects.

14
00:00:51,704 --> 00:00:56,484
Using archetypes provides a great way to get developers up

15
00:00:56,484 --> 00:01:01,495
and running as quickly as possible by providing a sample

16
00:01:01,495 --> 00:01:04,383
project using best practices.

17
00:01:04,383 --> 00:01:10,211
We can either create our own archetypes or reuse existing ones.

18
00:01:10,211 --> 00:01:14,210
Because Java EE is quite famous there are plenty of

19
00:01:14,210 --> 00:01:16,209
Java EE archetypes out there.

20
00:01:16,209 --> 00:01:20,831
I'll be using one from the codehouse foundation.

21
00:01:20,831 --> 00:01:23,356
Let's talk about the standard Maven directory structure

22
00:01:23,356 --> 00:01:26,978
of our bookstore-back Java EE app.

23
00:01:26,978 --> 00:01:36,185
By convention all the application files are located under the folder src.

24
00:01:36,185 --> 00:01:44,835
Here we find this src/main/Java directory where we have all our Java EE code.

25
00:01:44,835 --> 00:01:49,391
The Java EE configuration goes under resources and

26
00:01:49,391 --> 00:01:52,629
the web resources under webapp.

27
00:01:52,629 --> 00:01:57,777
That's for the code of the application.

28
00:01:57,777 --> 00:02:02,305
Then under src/test/Java we find our test classes,

29
00:02:02,305 --> 00:02:05,556
the ones we will be writing later.

30
00:02:05,556 --> 00:02:08,106
When Maven compiles and packages our code,

31
00:02:08,106 --> 00:02:11,926
it uses the target directory to store the generated artifacts.

32
00:02:11,926 --> 00:02:16,500
At the root of the project we have the main pom.

33
00:02:16,500 --> 00:02:17,878
xml configuration file.

34
00:02:17,878 --> 00:02:22,267
That's where we'll find the dependencies to Java EE,

35
00:02:22,267 --> 00:02:27,353
our in-memory database H2, and our testing frameworks,

36
00:02:27,353 --> 00:02:30,387
JUnit and Arquillian.

37
00:02:30,387 --> 00:02:33,342
Let's have a closer look at our pom.

38
00:02:33,342 --> 00:02:34,081
xml file.

39
00:02:34,081 --> 00:02:41,742
In Maven everything needs a groupId, an artifactId, and a version.

40
00:02:41,742 --> 00:02:46,157
I could have picked up any other names, but these ones make kind of sense.

41
00:02:46,157 --> 00:02:49,496
Then we need to specify the packaging,

42
00:02:49,496 --> 00:02:54,737
being a web application we ask Maven to package our code

43
00:02:54,737 --> 00:02:57,591
and dependencies in a web archive.

44
00:02:57,591 --> 00:02:59,242
Finally comes the dependencies,

45
00:02:59,242 --> 00:03:04,378
that's in this section that we'll be adding all the needed dependencies.

46
00:03:04,378 --> 00:03:13,433
We'll start with Java EE 7 and slowly add more dependencies as our code grows.

47
00:03:13,433 --> 00:03:16,516
End of talking, let's dive into the command line.

48
00:03:16,516 --> 00:03:22,181
In this demo I'll bootstrap our application with a Maven archetype.

49
00:03:22,181 --> 00:03:26,778
Remember that our application is called BookStore.

50
00:03:26,778 --> 00:03:30,121
It is split into two,

51
00:03:30,121 --> 00:03:36,977
the Java EE REST API's bookstore-back and the Angular bookstore-front.

52
00:03:36,977 --> 00:03:42,253
Maven is only used on the backend.

53
00:03:42,253 --> 00:03:47,454
Because Maven needs coordinates, I've chosen the GroupId com.

54
00:03:47,454 --> 00:03:48,337
Pluralsight.

55
00:03:48,337 --> 00:03:54,853
javee-getting-started and for the ArtifactId bookstore-back.

56
00:03:54,853 --> 00:03:59,046
Let's go.

57
00:03:59,046 --> 00:04:01,626
So here we are in front of the terminal.

58
00:04:01,626 --> 00:04:07,358
I'm in the directory JavaeeGettingStarted and now I'm going to use a Maven

59
00:04:07,358 --> 00:04:12,122
archetype to bootstrap an empty Java EE application.

60
00:04:12,122 --> 00:04:15,888
Here I have this very long Maven command.

61
00:04:15,888 --> 00:04:21,160
You should pause the video now, look at the read me file,

62
00:04:21,160 --> 00:04:26,546
and copy/paste this very long command that basically uses a Maven

63
00:04:26,546 --> 00:04:31,603
archetype to create our application with a groupId,

64
00:04:31,603 --> 00:04:34,346
getting started, ArtifactId bookstore-back,

65
00:04:34,346 --> 00:04:42,694
a version, and here I'm passing a few commands to generate the application.

66
00:04:42,694 --> 00:04:44,123
Here we go.

67
00:04:44,123 --> 00:04:46,506
Well that was quite quick.

68
00:04:46,506 --> 00:04:51,452
Let's look at what Maven has created for me.

69
00:04:51,452 --> 00:05:02,423
First of all, there's this bookstore-back directory and if I have a look into it,

70
00:05:02,423 --> 00:05:06,474
I can see the pom.

71
00:05:06,474 --> 00:05:11,336
xml file and the src directory.

72
00:05:11,336 --> 00:05:15,549
Following the Maven directory structure,

73
00:05:15,549 --> 00:05:19,582
src/main/Java with a package com/Pluralsight/bookstore,

74
00:05:19,582 --> 00:05:27,218
and because it's a web application it has an index HTML page.

75
00:05:27,218 --> 00:05:28,437
The pom.

76
00:05:28,437 --> 00:05:32,096
xml has the minimal needed dependencies,

77
00:05:32,096 --> 00:05:38,441
Java EE 7 with the right groupId, artifactId,

78
00:05:38,441 --> 00:05:40,821
number and packaging.

79
00:05:40,821 --> 00:05:41,514
This pom.

80
00:05:41,514 --> 00:05:43,246
xml is enough for now.

81
00:05:43,246 --> 00:05:47,290
But throughout the modules we will add more dependencies.

82
00:05:47,290 --> 00:05:51,220
Now Java EE application is bootstrapped,

83
00:05:51,220 --> 00:06:00,000
completely empty, but let's compile, package it and run it so we are sure this code works.

