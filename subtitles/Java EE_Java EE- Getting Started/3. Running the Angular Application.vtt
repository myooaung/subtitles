WEBVTT
1
00:00:02.369 --> 00:00:05.074
Now that our environment is sorted out that we

2
00:00:05.074 --> 00:00:08.184
bootstrapped a very basic Angular application,

3
00:00:08.184 --> 00:00:10.393
let's execute it.

4
00:00:10.393 --> 00:00:15.724
Like for our Java EE application, we need a web server.

5
00:00:15.724 --> 00:00:20.415
We could use WildFly as our runtime environment actually,

6
00:00:20.415 --> 00:00:25.418
but instead we will use the default Angular web server,

7
00:00:25.418 --> 00:00:27.399
it is called Express.

8
00:00:27.399 --> 00:00:30.424
Express will allow us to have a better feedback loop

9
00:00:30.424 --> 00:00:33.123
because it renders the application in memory.

10
00:00:33.123 --> 00:00:40.682
So it is just a matter of updating our code, HTML, CSS, or TypeScript files.

11
00:00:40.682 --> 00:00:44.346
The TypeScript gets transpiled into JavaScript.

12
00:00:44.346 --> 00:00:50.592
The web server reloads the resources in memory and refreshes the browser.

13
00:00:50.592 --> 00:00:53.118
You will see in the next demo,

14
00:00:53.118 --> 00:00:59.872
this makes it very easy to change code and see it immediately running live.

15
00:00:59.872 --> 00:01:02.867
Also notice that Angular applications don't need to be

16
00:01:02.867 --> 00:01:08.366
packaged into a war file like in Java EE,

17
00:01:08.366 --> 00:01:11.594
which simplifies the development process.

18
00:01:11.594 --> 00:01:14.829
So let's come back to our deployment diagram and see the

19
00:01:14.829 --> 00:01:17.088
impact of our new Angular application.

20
00:01:17.088 --> 00:01:23.332
Until now we have a Java EE application packaged in a war file,

21
00:01:23.332 --> 00:01:28.291
deployed into WildFly and listening on port 8080.

22
00:01:28.291 --> 00:01:32.181
Now with Angular we've added a new web server,

23
00:01:32.181 --> 00:01:36.951
Express, which will render the web application on port 4200.

24
00:01:36.951 --> 00:01:41.966
So we have two separate servers running on different

25
00:01:41.966 --> 00:01:46.569
processes and listening on different HTTP ports.

26
00:01:46.569 --> 00:01:51.700
Remember that our data is stored into an in-memory database.

27
00:01:51.700 --> 00:01:54.899
This means our database is not running on a separate

28
00:01:54.899 --> 00:01:59.448
process or listening on a specific port.

29
00:01:59.448 --> 00:02:04.589
And let's add Twitter Bootstrap to beautify our generated application.

30
00:02:04.589 --> 00:02:06.274
Bootstrap being an external dependency,

31
00:02:06.274 --> 00:02:10.455
it is just a matter of adding it to the package.

32
00:02:10.455 --> 00:02:16.862
json file and let Yarn download and install it in the node modules directory.

33
00:02:16.862 --> 00:02:18.813
Once the dependency in place,

34
00:02:18.813 --> 00:02:25.002
we need to add the CSS and JavaScript files of Bootstrap to our application,

35
00:02:25.002 --> 00:02:29.585
and of course, add the Bootstrap components to our HTML pages,

36
00:02:29.585 --> 00:02:35.860
such as buttons, navigation bars, and so on.

37
00:02:35.860 --> 00:02:39.464
So in this demo we will start the web server with ng

38
00:02:39.464 --> 00:02:43.028
server and leave it running while we code.

39
00:02:43.028 --> 00:02:48.346
By default the web server is in watch mode.

40
00:02:48.346 --> 00:02:51.488
That means that any time we update a file,

41
00:02:51.488 --> 00:02:54.406
it is automatically rendered into the browser.

42
00:02:54.406 --> 00:02:59.859
The application should then appear in our browser on port 4200.

43
00:02:59.859 --> 00:03:05.345
While the server is up and running we'll use Yarn to add

44
00:03:05.345 --> 00:03:08.662
the Bootstrap dependency and change the configuration file

45
00:03:08.662 --> 00:03:11.533
so we can set up Bootstrap.

46
00:03:11.533 --> 00:03:12.012
Finally,

47
00:03:12.012 --> 00:03:17.913
we will update some HTML and TypeScript components to

48
00:03:17.913 --> 00:03:24.054
start adding some visual to our bookstore.

49
00:03:24.054 --> 00:03:28.871
Now that the application is bootstrapped, let's execute it.

50
00:03:28.871 --> 00:03:33.053
The main component to be displayed is app component and to

51
00:03:33.053 --> 00:03:36.756
execute it I'm going to use this ng serve command.

52
00:03:36.756 --> 00:03:41.022
So here it is, the app component, the main one,

53
00:03:41.022 --> 00:03:47.222
and if I do ng server, all the classes are compiled,

54
00:03:47.222 --> 00:03:54.290
everything is packaged in memory and the Express web server

55
00:03:54.290 --> 00:03:57.759
executes the components that we have.

56
00:03:57.759 --> 00:04:02.178
Here I have Welcome to bs, the title,

57
00:04:02.178 --> 00:04:07.967
and you see if I change the bs into BookStore,

58
00:04:07.967 --> 00:04:16.781
save the page, it's compiled again and immediately the browser refreshes.

59
00:04:16.781 --> 00:04:24.362
So now I'm going to get rid of this Welcome to to keep only the bookstore title,

60
00:04:24.362 --> 00:04:26.074
save, compiles, refresh.

61
00:04:26.074 --> 00:04:34.793
That's why I put the browser on the right and the IDE on the left.

62
00:04:34.793 --> 00:04:41.046
Okay but let's add Twitter Bootstrap to other much beautiful application.

63
00:04:41.046 --> 00:04:49.385
So I'm going to open the terminal and use Yarn to add the bootstrap dependency.

64
00:04:49.385 --> 00:04:53.109
So while I execute this command,

65
00:04:53.109 --> 00:05:01.419
Yarn downloads all the dependencies and put the dependency in the package JSON.

66
00:05:01.419 --> 00:05:06.538
That just downloaded the bootstrap CSS and JavaScript file.

67
00:05:06.538 --> 00:05:13.045
Now I go to the Angular CLI and I've already copy pasted

68
00:05:13.045 --> 00:05:16.747
the needed CSS and bootstrap js files.

69
00:05:16.747 --> 00:05:21.416
So here, as you can see, I've added bootstrap.

70
00:05:21.416 --> 00:05:23.711
css and bootstrap.

71
00:05:23.711 --> 00:05:29.039
js to the Angular CLI configuration.

72
00:05:29.039 --> 00:05:32.053
So here I am on the Twitter Bootstrap page.

73
00:05:32.053 --> 00:05:37.992
There's plenty of templates we can choose from, navigation bars and so on.

74
00:05:37.992 --> 00:05:41.152
I quite like this jumbotron,

75
00:05:41.152 --> 00:05:47.540
so our bookstore application will look like the jumbotron.

76
00:05:47.540 --> 00:05:59.030
So now I've copied again this jumbotron template and I'm going to copy into,

77
00:05:59.030 --> 00:06:03.266
well passed into the app component HTML,

78
00:06:03.266 --> 00:06:09.304
so I'm getting rid of all that and pasting all the Twitter Bootstrap things.

79
00:06:09.304 --> 00:06:13.745
Again, the page is compiled, refreshed in memory,

80
00:06:13.745 --> 00:06:15.769
and because it's responsive,

81
00:06:15.769 --> 00:06:21.161
you see I have two menus to list the books and create a new book,

82
00:06:21.161 --> 00:06:26.970
and it's responsive so when it's smaller I have the menu on the right,

83
00:06:26.970 --> 00:06:28.096
List and Create.

84
00:06:28.096 --> 00:06:37.000
It looks like we are all set now. We have Twitter Bootstrap set up, let's go.

