WEBVTT
1
00:00:02.287 --> 00:00:03.632
Some definition first,

2
00:00:03.632 --> 00:00:07.718
until now I've used the term component when talking

3
00:00:07.718 --> 00:00:10.710
about the classes we've been developing.

4
00:00:10.710 --> 00:00:12.854
The term is not completely accurate.

5
00:00:12.854 --> 00:00:17.782
I should have used instead the term bean for our book repository.

6
00:00:17.782 --> 00:00:24.792
A bean is just an object that is managed by the Java EE runtime or container.

7
00:00:24.792 --> 00:00:26.300
With a broader view,

8
00:00:26.300 --> 00:00:32.847
we can say that in Java EE we have objects that are managed by containers.

9
00:00:32.847 --> 00:00:38.354
In fact, in Java EE every object is a bean.

10
00:00:38.354 --> 00:00:42.725
Well, I should say, most objects are beans.

11
00:00:42.725 --> 00:00:47.274
Most objects are beans except for JPA entities.

12
00:00:47.274 --> 00:00:52.488
The difference between a class and a bean is that the container gives a

13
00:00:52.488 --> 00:00:58.881
bean extra services such as lifecycle management,

14
00:00:58.881 --> 00:01:01.621
interception or injection.

15
00:01:01.621 --> 00:01:02.969
In terms of code,

16
00:01:02.969 --> 00:01:07.365
a bean is just a concrete Java class with a default constructor.

17
00:01:07.365 --> 00:01:12.835
Here the BookRepository class doesn't implement any specific

18
00:01:12.835 --> 00:01:17.360
interface nor it extends a specific class.

19
00:01:17.360 --> 00:01:23.594
It can have any annotation and can define any method.

20
00:01:23.594 --> 00:01:26.071
In fact, with very few exception,

21
00:01:26.071 --> 00:01:32.878
potentially every Java class with a default constructor is a bean in Java EE.

22
00:01:32.878 --> 00:01:38.762
So our BookRepository is considered a bean.

23
00:01:38.762 --> 00:01:41.318
But why should we care about knowing the difference

24
00:01:41.318 --> 00:01:44.062
between a simple class and a bean?

25
00:01:44.062 --> 00:01:48.884
Well because now we can use extra container services,

26
00:01:48.884 --> 00:01:51.482
one of them being injection.

27
00:01:51.482 --> 00:01:53.560
But what is injection?

28
00:01:53.560 --> 00:01:56.337
Applications are made of business logic,

29
00:01:56.337 --> 00:01:58.682
interaction with modules, user interface,

30
00:01:58.682 --> 00:02:01.074
external APIs and so on.

31
00:02:01.074 --> 00:02:05.070
In fact, in an object oriented programming language,

32
00:02:05.070 --> 00:02:06.196
like Java,

33
00:02:06.196 --> 00:02:12.471
all these can be summarized by objects depend on other objects

34
00:02:12.471 --> 00:02:17.145
or let's say beans depend on other beans.

35
00:02:17.145 --> 00:02:20.223
But instead of having beans creating their own dependencies,

36
00:02:20.223 --> 00:02:23.981
they can delegate these tasks to the container.

37
00:02:23.981 --> 00:02:27.541
This is what's called inversion of control.

38
00:02:27.541 --> 00:02:32.329
The control of choosing the dependency is inverted because

39
00:02:32.329 --> 00:02:36.874
it's given to an external container.

40
00:02:36.874 --> 00:02:42.574
The Java EE specification taking care of dependency injection is called CDI,

41
00:02:42.574 --> 00:02:46.776
or Context and Dependency Injection.

42
00:02:46.776 --> 00:02:52.261
CDI is built on the concept of loose coupling, strong typing.

43
00:02:52.261 --> 00:02:57.641
Meaning that beans are loosely coupled, but in a strongly typed way.

44
00:02:57.641 --> 00:03:02.296
The container's job is to inject references into these loosely coupled beans.

45
00:03:02.296 --> 00:03:07.328
CDI does much more than just injection and I would recommend

46
00:03:07.328 --> 00:03:11.984
attending the Pluralsight course dedicated to CDI.

47
00:03:11.984 --> 00:03:15.990
CDI decoupling goes further by bringing interceptors,

48
00:03:15.990 --> 00:03:21.000
decorators, events and context management to these beans.

49
00:03:21.000 --> 00:03:27.000
But that's not the purpose of this course. Let's see how to implement injection.

