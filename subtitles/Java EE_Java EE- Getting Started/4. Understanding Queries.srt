1
00:00:02,037 --> 00:00:05,641
So far our book repository manipulates entities

2
00:00:05,641 --> 00:00:08,027
individually with the Entity Manager API.

3
00:00:08,027 --> 00:00:12,393
We know how to find a Book entity by its identifier

4
00:00:12,393 --> 00:00:16,053
to create a book or remove a book.

5
00:00:16,053 --> 00:00:20,869
But finding an entity by Id is quite limiting as we only retrieve

6
00:00:20,869 --> 00:00:25,040
a single entity using its unique identifier.

7
00:00:25,040 --> 00:00:31,332
In practice we often need to retrieve an entity by criteria other than the Id,

8
00:00:31,332 --> 00:00:36,817
such as retrieving by title, isbn, and so on.

9
00:00:36,817 --> 00:00:42,355
This possibility is inherent to relational databases with SQL.

10
00:00:42,355 --> 00:00:47,805
Well JPA also has a language that allows this interaction too.

11
00:00:47,805 --> 00:00:51,960
It's called JPQL.

12
00:00:51,960 --> 00:00:54,772
JPQL, or Java Persistence Query Language,

13
00:00:54,772 --> 00:00:59,544
is used by JPA to define searches against persistence

14
00:00:59,544 --> 00:01:03,276
entities independent of the underlying database.

15
00:01:03,276 --> 00:01:09,851
JPQL is a query language that takes its root in the syntax of SQL.

16
00:01:09,851 --> 00:01:15,124
But the main difference is is that in SQL the results

17
00:01:15,124 --> 00:01:19,641
obtained are in the form of rows and columns,

18
00:01:19,641 --> 00:01:25,182
whereas JPQL uses an entity or a collection of entities.

19
00:01:25,182 --> 00:01:31,764
JPQL syntax is object oriented and therefore easily understood by developers.

20
00:01:31,764 --> 00:01:37,405
Developers manage the entity domain model not a table structure.

21
00:01:37,405 --> 00:01:42,948
JPQL is a database independent query language that uses mapping

22
00:01:42,948 --> 00:01:47,911
annotation to transform a JPQL query into SQL.

23
00:01:47,911 --> 00:01:52,897
The query is executed on the underlying database with SQL and

24
00:01:52,897 --> 00:01:58,241
JDBC calls and then entity instances of the attributes set and

25
00:01:58,241 --> 00:02:01,028
are returned to the application.

26
00:02:01,028 --> 00:02:06,431
Let's have a quick look at the JPQL syntax.

27
00:02:06,431 --> 00:02:10,918
The syntax of a select query consists of two main data parts,

28
00:02:10,918 --> 00:02:14,012
the SELECT and the FROM clause.

29
00:02:14,012 --> 00:02:18,085
SELECT defines the format of the query results.

30
00:02:18,085 --> 00:02:22,257
The FROM clause defines the entity or entities from

31
00:02:22,257 --> 00:02:25,649
which the results will be obtained.

32
00:02:25,649 --> 00:02:29,903
Then we have the optional WHERE, ORDER BY,

33
00:02:29,903 --> 00:02:35,362
GROUP BY, and HAVING clauses to restrict or order the result of the query.

34
00:02:35,362 --> 00:02:38,595
We can apply functions on select statements,

35
00:02:38,595 --> 00:02:42,794
such as AVERAGE, COUNT, MAX, MIN, or SUM.

36
00:02:42,794 --> 00:02:48,521
There are also all the operators that we can expect from a query language,

37
00:02:48,521 --> 00:02:51,357
such as equal, lower than, greater than,

38
00:02:51,357 --> 00:02:55,268
BETWEEN, NOT BETWEEN, and so on.

39
00:02:55,268 --> 00:02:59,994
When it comes to expressions on type, there are few related to numbers,

40
00:02:59,994 --> 00:03:02,942
such as square root or size.

41
00:03:02,942 --> 00:03:06,752
Strings, such as less or concatenation, or dates.

42
00:03:06,752 --> 00:03:11,494
As we can notice the syntax is quite rich and allows

43
00:03:11,494 --> 00:03:16,287
all sorts of entity manipulation.

44
00:03:16,287 --> 00:03:19,319
Let's come back to our repository and see how to

45
00:03:19,319 --> 00:03:21,533
use JPQL syntax we've just seen.

46
00:03:21,533 --> 00:03:26,499
The findAll method is supposed to return the entire list of

47
00:03:26,499 --> 00:03:30,186
books from the database ordered by title.

48
00:03:30,186 --> 00:03:33,774
To do that we need the Entity Manager again.

49
00:03:33,774 --> 00:03:38,448
The Entity Manager has one method that takes a JPQL query

50
00:03:38,448 --> 00:03:41,745
and returns a TypedQuery interface.

51
00:03:41,745 --> 00:03:46,640
This interface controls the query execution.

52
00:03:46,640 --> 00:03:51,449
The method getResultList will actually eat the database,

53
00:03:51,449 --> 00:03:58,064
execute the query, and will return the list of entities following the criteria.

54
00:03:58,064 --> 00:04:02,665
Here the query selects all the instances of entity Book,

55
00:04:02,665 --> 00:04:08,343
the FROM clause is used to give an alias to the instance of the entity.

56
00:04:08,343 --> 00:04:13,303
So lowercase b is the instance of the class Book.

57
00:04:13,303 --> 00:04:19,038
Executing this statement will result in a list of 0 or more book instances.

58
00:04:19,038 --> 00:04:22,832
The ORDER BY clause allows the entities returned by

59
00:04:22,832 --> 00:04:25,276
the SELECT query to be ordered.

60
00:04:25,276 --> 00:04:30,299
The ordering applies to the entity attribute specified in this clause.

61
00:04:30,299 --> 00:04:34,052
Here we order by book title.

62
00:04:34,052 --> 00:04:38,284
In the BookStore application we also need to display a counter

63
00:04:38,284 --> 00:04:41,635
showing the number of books we have in the database.

64
00:04:41,635 --> 00:04:55,000
To achieve that we use the same APIs, the only difference is the query. Here we do a count of the instances b of type Book.

