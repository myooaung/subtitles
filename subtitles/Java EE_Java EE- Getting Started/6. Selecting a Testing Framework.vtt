WEBVTT
1
00:00:02.076 --> 00:00:04.076
Okay a few more tools left now.

2
00:00:04.076 --> 00:00:07.076
We have our editor to code our BookStore application,

3
00:00:07.076 --> 00:00:12.894
our building tool to package it, the application server to execute it,

4
00:00:12.894 --> 00:00:16.076
a database to store some books in.

5
00:00:16.076 --> 00:00:21.076
We now need to pick up a few frameworks to test our code.

6
00:00:21.076 --> 00:00:23.076
Despite tests being very important,

7
00:00:23.076 --> 00:00:26.676
we have less testing frameworks to choose from,

8
00:00:26.676 --> 00:00:33.076
in fact for unit tests we can either use JUnit or TestNG.

9
00:00:33.076 --> 00:00:37.076
And for integration tests we only have Arquillian.

10
00:00:37.076 --> 00:00:43.076
In this course we will be using JUnit and Arquillian.

11
00:00:43.076 --> 00:00:46.349
JUnit is a unit test framework for the Java

12
00:00:46.349 --> 00:00:49.176
programming language created in 1997.

13
00:00:49.176 --> 00:00:54.691
JUnit has been important in test-driven development and is

14
00:00:54.691 --> 00:00:57.153
one of a family of unit testing frameworks,

15
00:00:57.153 --> 00:00:59.676
which is collectively known as XUnit.

16
00:00:59.676 --> 00:01:07.461
JUnit is good for unit testing, so if the code to test as external dependencies,

17
00:01:07.461 --> 00:01:12.076
we need to know the framework to mock those dependencies.

18
00:01:12.076 --> 00:01:17.076
At the time of recording this course, JUnit 5 is still not final,

19
00:01:17.076 --> 00:01:21.876
so I will use the latest table 4.

20
00:01:21.876 --> 00:01:23.076
12 version.

21
00:01:23.076 --> 00:01:26.153
We won't need to download or install JUnit because we

22
00:01:26.153 --> 00:01:29.076
will use Maven to do that for us.

23
00:01:29.076 --> 00:01:34.576
If you don't know JUnit I recommend to read the Getting Started section.

24
00:01:34.576 --> 00:01:41.076
It explains step by step how to write and execute a unit test.

25
00:01:41.076 --> 00:01:47.076
Arquillian is also the de facto framework when it comes to integration testing.

26
00:01:47.076 --> 00:01:53.076
JUnit is good at unit testing, but we need to mark external dependencies,

27
00:01:53.076 --> 00:01:54.326
not with Arquillian.

28
00:01:54.326 --> 00:01:59.153
The idea is that the tests are executed inside the container,

29
00:01:59.153 --> 00:02:01.307
in our case WildFly.

30
00:02:01.307 --> 00:02:05.076
That's why it's perfect for Java EE.

31
00:02:05.076 --> 00:02:08.409
The test case is executed inside the container and therefore

32
00:02:08.409 --> 00:02:11.349
can use all its dependencies and services,

33
00:02:11.349 --> 00:02:15.440
but Arquillian can also be used for remote testing.

34
00:02:15.440 --> 00:02:20.276
This means that the tests are executed outside the container,

35
00:02:20.276 --> 00:02:25.076
but interact with a remote application through HTTP,

36
00:02:25.076 --> 00:02:29.076
perfect for testing REST APIs, for example.

37
00:02:29.076 --> 00:02:36.076
To get started with Arquillian, make sure to follow the Getting Started section.

38
00:02:36.076 --> 00:02:41.076
It will explain how to set up, write, and execute an integration test.

39
00:02:41.076 --> 00:02:43.258
Then check the documentation.

40
00:02:43.258 --> 00:02:53.000
It is very rich because Arquillian adds several extensions, such as JUnit that we will be using.

