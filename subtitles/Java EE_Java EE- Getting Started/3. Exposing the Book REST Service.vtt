WEBVTT
1
00:00:02.146 --> 00:00:06.493
BookEndpoint will act as our HTTP entry point.

2
00:00:06.493 --> 00:00:08.835
This class has one method, getBooks,

3
00:00:08.835 --> 00:00:16.123
that returns the list of books from the database using the BookRepository.

4
00:00:16.123 --> 00:00:22.373
Notice how we just used CDI to inject the repository into our endpoint.

5
00:00:22.373 --> 00:00:25.225
To turn this code into a RESTful web service,

6
00:00:25.225 --> 00:00:28.022
we just annotate the class with @Path.

7
00:00:28.022 --> 00:00:37.542
This indicates that the BookEndpoint will be hosted at the URI path www.

8
00:00:37.542 --> 00:00:38.476
bookstore.

9
00:00:38.476 --> 00:00:39.410
com/books.

10
00:00:39.410 --> 00:00:47.128
The getBooks method is then marked to process HTTP GET requests,

11
00:00:47.128 --> 00:00:50.201
thanks to the @GET annotation.

12
00:00:50.201 --> 00:00:52.788
There is just one piece of information missing,

13
00:00:52.788 --> 00:00:56.401
what is the representation of this list of books?

14
00:00:56.401 --> 00:00:58.720
By using the producer's annotation,

15
00:00:58.720 --> 00:01:06.005
we specify that this method returns a JSON representation of the list of books.

16
00:01:06.005 --> 00:01:09.799
Notice also that the method returns an HTTP Response,

17
00:01:09.799 --> 00:01:12.828
not a list of books per se.

18
00:01:12.828 --> 00:01:16.979
The Response class allows some control over the HTTP

19
00:01:16.979 --> 00:01:19.755
response returned from the endpoint.

20
00:01:19.755 --> 00:01:27.370
So if the BookRepository returns no books, we send back an HTTP code NO_CONTENT.

21
00:01:27.370 --> 00:01:34.058
So the Angular application knows there are no books to display on the page.

22
00:01:34.058 --> 00:01:38.782
On the contrary, if there are books returned from the database,

23
00:01:38.782 --> 00:01:43.120
JAX-RS will pass the list of books entity into a JSON

24
00:01:43.120 --> 00:01:47.779
string and send it back into the response.

25
00:01:47.779 --> 00:01:52.678
Something we also need to expose is the JSON representation of a single book.

26
00:01:52.678 --> 00:02:00.053
So here the getBook method is annotated with both GET and Produces.

27
00:02:00.053 --> 00:02:05.960
It then calls the BookRepository find by id method.

28
00:02:05.960 --> 00:02:09.866
But how do we get this book identifier?

29
00:02:09.866 --> 00:02:11.819
Well through the URI.

30
00:02:11.819 --> 00:02:16.716
To get the JSON representation of the book with id 123,

31
00:02:16.716 --> 00:02:21.526
we just point at the URI www.

32
00:02:21.526 --> 00:02:22.395
bookstore.

33
00:02:22.395 --> 00:02:23.264
com/books/123.

34
00:02:23.264 --> 00:02:27.607
Then in terms of code,

35
00:02:27.607 --> 00:02:33.137
the parameter is represented by a variable between curly braces,

36
00:02:33.137 --> 00:02:38.557
that is passed with a PathParam annotation to the method.

37
00:02:38.557 --> 00:02:43.785
Here the method takes a parameter called id, which is a number.

38
00:02:43.785 --> 00:02:49.079
The method looks for the book into the database thanks to the repository,

39
00:02:49.079 --> 00:02:52.988
returns its JSON representation if found,

40
00:02:52.988 --> 00:02:58.201
or a status code 404 is not found.

41
00:02:58.201 --> 00:03:02.708
The same pattern applies when we want to delete a book from the database,

42
00:03:02.708 --> 00:03:08.814
but instead of an HTTP GET, we use the HTTP DELETE method.

43
00:03:08.814 --> 00:03:12.032
So we will extract the parameter from the URI,

44
00:03:12.032 --> 00:03:16.391
the book identifier, but instead of annotating with GET,

45
00:03:16.391 --> 00:03:18.034
we use DELETE.

46
00:03:18.034 --> 00:03:19.146
Quite obvious.

47
00:03:19.146 --> 00:03:23.596
And the BookEndpoint invokes the repository to delete

48
00:03:23.596 --> 00:03:27.201
the book in a transactional way.

49
00:03:27.201 --> 00:03:32.008
And then it returns an empty HTTP body.

50
00:03:32.008 --> 00:03:33.875
Let's create a book now.

51
00:03:33.875 --> 00:03:38.764
The createBook method takes a book and persists it to the database.

52
00:03:38.764 --> 00:03:43.861
This method is invoked with an HTTP POST and consumes

53
00:03:43.861 --> 00:03:46.438
a JSON representation of a book.

54
00:03:46.438 --> 00:03:51.797
Once the book is persisted into the database, what shall we return?

55
00:03:51.797 --> 00:03:59.171
The good practice in REST is to return the URI of this newly created resource,

56
00:03:59.171 --> 00:04:01.211
not the resource itself.

57
00:04:01.211 --> 00:04:07.836
For that we use the special UriInfo API to allow us to build a URI of

58
00:04:07.836 --> 00:04:12.885
the newly created book by passing its identifier.

59
00:04:12.885 --> 00:04:16.314
We then return it in the HTTP response.

60
00:04:16.314 --> 00:04:22.240
In short, GET, POST, AND DELETE provide basic CRUD operation for the web.

61
00:04:22.240 --> 00:04:24.157
As you can see,

62
00:04:24.157 --> 00:04:36.000
JAX-RS is HTTP centric by nature and has a set of clearly defined classes and annotation to deal with HTTP and URIs.

