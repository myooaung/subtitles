1
00:00:02,299 --> 00:00:06,662
Again, let's take a higher view of the architecture of our BookStore application.

2
00:00:06,662 --> 00:00:13,403
So far we add a Book entity using JPA annotations to be able

3
00:00:13,403 --> 00:00:16,904
to be mapped on a relational database.

4
00:00:16,904 --> 00:00:20,305
Now we've added a Book Repository to persist,

5
00:00:20,305 --> 00:00:23,513
delete, and select books from the database.

6
00:00:23,513 --> 00:00:30,249
This book repository uses the JPA Entity Manager to access the database

7
00:00:30,249 --> 00:00:35,002
and Java Transaction API for transaction demarcation.

8
00:00:35,002 --> 00:00:40,645
In this module we've added a repository facade to handle our books.

9
00:00:40,645 --> 00:00:44,887
We saw that JPA has a very important API called EntityManager

10
00:00:44,887 --> 00:00:48,258
to allow CRUD operation on a single entity,

11
00:00:48,258 --> 00:00:51,748
thus simplifying the way to do an insert,

12
00:00:51,748 --> 00:00:56,635
delete or find by Id with a single line of code.

13
00:00:56,635 --> 00:00:59,176
When finding by identifier is not enough,

14
00:00:59,176 --> 00:01:04,430
JPA comes with a rich query language called Java Persistence Query Language.

15
00:01:04,430 --> 00:01:10,851
The JPQL syntax is similar to SQL, but instead of dealing with tables,

16
00:01:10,851 --> 00:01:13,821
rows, and columns, it manages entities.

17
00:01:13,821 --> 00:01:20,622
Finally, we used Java Transaction API to do transaction demarcation.

18
00:01:20,622 --> 00:01:24,826
A single annotation and we leave the container the deal

19
00:01:24,826 --> 00:01:29,789
with comments and rollbacks on our behalf.

20
00:01:29,789 --> 00:01:30,119
Well,

21
00:01:30,119 --> 00:01:33,750
so far we've typed a few lines of code without being

22
00:01:33,750 --> 00:01:35,590
able to execute our application.

23
00:01:35,590 --> 00:01:39,417
We won't be able to execute it just yet.

24
00:01:39,417 --> 00:01:45,029
Instead, in the next module we will test our code.

25
00:01:45,029 --> 00:01:48,118
We will see the differences between unit tests and

26
00:01:48,118 --> 00:01:51,083
integration tests so we can choose wisely.

27
00:01:51,083 --> 00:02:05,000
We will implement our first test, making sure what we've done so far is valid. We will test our CRUD operations in our queries.

