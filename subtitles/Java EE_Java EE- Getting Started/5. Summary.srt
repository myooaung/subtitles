1
00:00:02,259 --> 00:00:06,269
The architecture of the BookStore is finally completed.

2
00:00:06,269 --> 00:00:09,369
Thanks to our JSON contract in Swagger CodeGen,

3
00:00:09,369 --> 00:00:13,185
we generated a book service and a book model.

4
00:00:13,185 --> 00:00:17,408
The book service uses the Angular HTTP module to

5
00:00:17,408 --> 00:00:20,193
communicate with our Java EE back-end.

6
00:00:20,193 --> 00:00:24,886
Then it's just a matter of connecting our components to the book

7
00:00:24,886 --> 00:00:27,973
service and we have our application up and running.

8
00:00:27,973 --> 00:00:32,186
We can even get rid of the browser on the Java EE

9
00:00:32,186 --> 00:00:36,411
back-end so the diagram gets clearer.

10
00:00:36,411 --> 00:00:40,203
In this module we've seen what Angular services are and how

11
00:00:40,203 --> 00:00:42,809
they use observables and reactive programming.

12
00:00:42,809 --> 00:00:46,630
Thanks to Swagger CodeGen and the JSON contract,

13
00:00:46,630 --> 00:00:55,500
we've just generated most of the code to invoke our back-end with HTTP.

14
00:00:55,500 --> 00:00:59,813
In the next module we'll revisit the application setup.

15
00:00:59,813 --> 00:01:02,801
We will focus on the anatomy of the BookStore application

16
00:01:02,801 --> 00:01:05,290
throughout the modules since the beginning,

17
00:01:05,290 --> 00:01:17,000
the Java EE back-end, until the end, the Angular front-end. I'll wrap up by giving you a few external references.

