1
00:00:02,203 --> 00:00:06,689
So let's answer this question first, which is validation?

2
00:00:06,689 --> 00:00:11,410
Validating data is a common task that developers have to do.

3
00:00:11,410 --> 00:00:13,535
That's because processing, storing,

4
00:00:13,535 --> 00:00:18,246
and retrieving valid data is crucial for an application.

5
00:00:18,246 --> 00:00:23,247
Indeed our applications spend most of their time constraining our model,

6
00:00:23,247 --> 00:00:27,683
making sure the address is valid, the email is well formatted,

7
00:00:27,683 --> 00:00:30,914
checking that the customer's name is not null,

8
00:00:30,914 --> 00:00:34,018
or that it's date of birth is in the past.

9
00:00:34,018 --> 00:00:37,612
All these constraints to ensure the data is correct and

10
00:00:37,612 --> 00:00:42,384
therefore that a service processing this data will behave

11
00:00:42,384 --> 00:00:44,307
correctly without throwing exceptions.

12
00:00:44,307 --> 00:00:45,948
If data is invalid,

13
00:00:45,948 --> 00:00:52,049
it is important to send some feedback to the user so she

14
00:00:52,049 --> 00:00:56,101
or he can correct the invalid values.

15
00:00:56,101 --> 00:01:02,630
Simply put, a constraint is a business rule that can be more or less complex.

16
00:01:02,630 --> 00:01:05,827
Simple ones, such as is the address valid?

17
00:01:05,827 --> 00:01:08,351
Is the customer's email well formed?

18
00:01:08,351 --> 00:01:10,202
Is the name null?

19
00:01:10,202 --> 00:01:13,440
Is the birth date in the past?

20
00:01:13,440 --> 00:01:17,439
But also more complex ones that need more computing power,

21
00:01:17,439 --> 00:01:21,616
such as the total amount is greater than the previous quarter?

22
00:01:21,616 --> 00:01:27,828
Or the annual revenue has 10% growth?

23
00:01:27,828 --> 00:01:33,510
Validation is so important that it has its own specification in Java EE.

24
00:01:33,510 --> 00:01:40,240
It's called bean validation and it can be used in all the Java EE components.

25
00:01:40,240 --> 00:01:44,787
The way we usually program is that we invoke a method on a component,

26
00:01:44,787 --> 00:01:48,242
passing some data and if the data is invalid,

27
00:01:48,242 --> 00:01:50,349
the component throws an exception.

28
00:01:50,349 --> 00:01:54,644
With bean validation the component defines a set of

29
00:01:54,644 --> 00:01:58,599
constraints using annotation on its attributes,

30
00:01:58,599 --> 00:02:01,718
method parameters or return values.

31
00:02:01,718 --> 00:02:07,991
Then a valid data will validate the components set of constraints.

32
00:02:07,991 --> 00:02:10,947
Bean validation comes with a set of built-in common

33
00:02:10,947 --> 00:02:16,243
constraints and it also comes with APIs to allow us to

34
00:02:16,243 --> 00:02:18,727
create our own business constraints.

35
00:02:18,727 --> 00:02:20,764
I will not cover this point,

36
00:02:20,764 --> 00:02:25,152
but Pluralsight has an entire course on bean validation explaining

37
00:02:25,152 --> 00:02:29,265
how to create your own business constraints.

38
00:02:29,265 --> 00:02:34,015
Let's have a look at all these already defined commons constraints.

39
00:02:34,015 --> 00:02:41,317
AssertFalse and AssertTrue will make sure a Boolean is either false or true.

40
00:02:41,317 --> 00:02:44,848
Other constraints will target the size of the string,

41
00:02:44,848 --> 00:02:48,428
the number of digits a number can have,

42
00:02:48,428 --> 00:02:53,452
a maximum or minimum value for numbers or big decimals.

43
00:02:53,452 --> 00:02:58,842
We also often want to make sure a date is in the future or in the past.

44
00:02:58,842 --> 00:03:03,461
Bean validation has two simply annotations that we can use.

45
00:03:03,461 --> 00:03:07,823
Making sure an object is null or not null is also a

46
00:03:07,823 --> 00:03:10,575
common rule we apply to our objects.

47
00:03:10,575 --> 00:03:11,095
Last,

48
00:03:11,095 --> 00:03:16,293
bean validation comes with an annotation to verify that a

49
00:03:16,293 --> 00:03:24,000
string follows a certain regular expression. Let's see how we can use them.

