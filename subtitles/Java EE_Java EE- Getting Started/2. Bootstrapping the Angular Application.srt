1
00:00:02,797 --> 00:00:08,444
Remember when we used Maven archetypes to bootstrap our Java EE application?

2
00:00:08,444 --> 00:00:14,484
We did that to save some time, but also to avoid configuration errors.

3
00:00:14,484 --> 00:00:17,892
For our Angular application we will do the same thing using

4
00:00:17,892 --> 00:00:20,109
Angular CLI instead of Maven archetypes.

5
00:00:20,109 --> 00:00:25,351
So instead of going through a long list of manual setup,

6
00:00:25,351 --> 00:00:30,128
Angular CLI will create the application directory,

7
00:00:30,128 --> 00:00:31,949
also create the Node.

8
00:00:31,949 --> 00:00:36,118
JS directory structure and all the needed configuration files.

9
00:00:36,118 --> 00:00:42,560
Angular CLI will then use Yarn to install all the Angular dependencies and

10
00:00:42,560 --> 00:00:47,155
despite generating all the setup files and boilerplate code,

11
00:00:47,155 --> 00:00:51,625
Angular CLI will add some TypeScript code so our

12
00:00:51,625 --> 00:00:54,971
application can display some text on the browser.

13
00:00:54,971 --> 00:00:58,541
This is a higher view of bootstrapping an Angular application.

14
00:00:58,541 --> 00:01:03,313
Let's now dive into command lines.

15
00:01:03,313 --> 00:01:07,583
Angular CLI is much richer than Maven archetypes.

16
00:01:07,583 --> 00:01:11,135
You can execute a set of commands with several options to

17
00:01:11,135 --> 00:01:15,901
make it easy to create an application that works and follows

18
00:01:15,901 --> 00:01:18,749
best practices out of the box.

19
00:01:18,749 --> 00:01:24,255
On a terminal we just execute the ng command followed by different options.

20
00:01:24,255 --> 00:01:31,189
For example, ng version gives us the version of Angular CLI we are using.

21
00:01:31,189 --> 00:01:36,348
To create a new project we just type ng new and the name of the project,

22
00:01:36,348 --> 00:01:37,541
here bookstore-front.

23
00:01:37,541 --> 00:01:44,684
If we don't want to generate test files, we just use skip-tests option.

24
00:01:44,684 --> 00:01:51,506
If we want Angular CLI to generate some routing between our components,

25
00:01:51,506 --> 00:01:54,309
we add routing true.

26
00:01:54,309 --> 00:01:59,058
And then we have several commands to create Angular artifacts.

27
00:01:59,058 --> 00:02:05,889
For example, ng generate component generates a graphical component with HTML,

28
00:02:05,889 --> 00:02:11,517
CSS, and TypeScript files under the right location.

29
00:02:11,517 --> 00:02:15,333
Here the component is called book-list and I can specify that I

30
00:02:15,333 --> 00:02:20,024
don't want the test class to be generate and that I don't want a

31
00:02:20,024 --> 00:02:22,722
separate CSS file for this component.

32
00:02:22,722 --> 00:02:25,557
Same thing to generate a service,

33
00:02:25,557 --> 00:02:31,904
one ng generate command with a service parameter and the name of the service,

34
00:02:31,904 --> 00:02:33,697
and we are done.

35
00:02:33,697 --> 00:02:38,163
Angular CLI allows us to generate code for components,

36
00:02:38,163 --> 00:02:41,116
services, pipes, modules, guards, and so on.

37
00:02:41,116 --> 00:02:43,077
If you need some help,

38
00:02:43,077 --> 00:02:48,026
just type ng help and if you need help on specific commands,

39
00:02:48,026 --> 00:02:51,825
ng help and the name of the command.

40
00:02:51,825 --> 00:02:59,491
Let's talk about the directory structure that is generated by Angular CLI.

41
00:02:59,491 --> 00:03:04,123
On top we see the node_modules directory.

42
00:03:04,123 --> 00:03:08,856
That's where the project's dependencies are downloaded and installed by Yarn.

43
00:03:08,856 --> 00:03:15,227
By convention, all the application files are located under the folder src/app.

44
00:03:15,227 --> 00:03:21,269
Angular CLI creates a few files for us.

45
00:03:21,269 --> 00:03:22,024
App.

46
00:03:22,024 --> 00:03:22,778
component.

47
00:03:22,778 --> 00:03:24,288
html and.

48
00:03:24,288 --> 00:03:29,796
ts are respectively the HTML representation and the

49
00:03:29,796 --> 00:03:32,738
TypeScript code of our main component.

50
00:03:32,738 --> 00:03:35,421
We won't talk about Angular models in this course,

51
00:03:35,421 --> 00:03:39,292
as this is an advanced topic, but notice the app.

52
00:03:39,292 --> 00:03:44,515
module TypeScript file to configure our Main and only module.

53
00:03:44,515 --> 00:03:45,146
App-routing.

54
00:03:45,146 --> 00:03:50,189
module deals with routing, as we'll see later.

55
00:03:50,189 --> 00:03:50,884
The index.

56
00:03:50,884 --> 00:03:52,970
html page is our entry point.

57
00:03:52,970 --> 00:03:58,222
This is the HTML page that will be loaded in the browser.

58
00:03:58,222 --> 00:04:03,781
In terms of configuration, we have a few files.

59
00:04:03,781 --> 00:04:05,626
First, the angular-cli.

60
00:04:05,626 --> 00:04:06,856
json file.

61
00:04:06,856 --> 00:04:11,161
It's all about the Angular CLI configuration.

62
00:04:11,161 --> 00:04:13,379
What is the name of the application?

63
00:04:13,379 --> 00:04:15,597
What's the name of the source directory?

64
00:04:15,597 --> 00:04:16,827
The output directory?

65
00:04:16,827 --> 00:04:22,166
The name of the main HTML pages in CSS file and so on.

66
00:04:22,166 --> 00:04:27,884
We will update this file to include Twitter Bootstrap into our application.

67
00:04:27,884 --> 00:04:31,217
Then we have the package.

68
00:04:31,217 --> 00:04:33,217
json configuration file.

69
00:04:33,217 --> 00:04:34,133
This Node.

70
00:04:34,133 --> 00:04:38,253
JS file holds various metadata relevant to the project,

71
00:04:38,253 --> 00:04:42,186
such as the project description, it's version,

72
00:04:42,186 --> 00:04:44,599
license and so on.

73
00:04:44,599 --> 00:04:46,946
Last but not least, the yarn.

74
00:04:46,946 --> 00:04:55,620
lock file is used by Yarn to specify dependency versions.

75
00:04:55,620 --> 00:04:56,488
The package.

76
00:04:56,488 --> 00:04:59,962
json is the configuration file of any Node.

77
00:04:59,962 --> 00:05:02,445
JS application and therefore Angular.

78
00:05:02,445 --> 00:05:08,726
It is the JSON file that contains information about the project and

79
00:05:08,726 --> 00:05:13,170
configuration details used by Yarn to build a project.

80
00:05:13,170 --> 00:05:16,321
We find the name of our project is version,

81
00:05:16,321 --> 00:05:19,646
company name, open source license, and so on.

82
00:05:19,646 --> 00:05:22,797
Then we find a script section.

83
00:05:22,797 --> 00:05:27,358
This is very handy to write our own scripts.

84
00:05:27,358 --> 00:05:33,158
Angular CLI creates a few default ones, start being the mostly used.

85
00:05:33,158 --> 00:05:39,887
To execute our application, we will have to ask Yarn to execute the script start,

86
00:05:39,887 --> 00:05:45,938
which is just a shortcut for ng serve as we will see in the next demo.

87
00:05:45,938 --> 00:05:48,263
Then, the dependencies of our application.

88
00:05:48,263 --> 00:05:54,062
Angular CLI has already set all the needed Angular dependencies.

89
00:05:54,062 --> 00:05:57,165
We will just add Twitter Bootstrap,

90
00:05:57,165 --> 00:06:02,940
but other than that the list of the dependencies is the one we need,

91
00:06:02,940 --> 00:06:05,201
angular/core, angular/compiler, and so on.

92
00:06:05,201 --> 00:06:12,675
By the way, notice that in Java EE the configuration files are written in XML.

93
00:06:12,675 --> 00:06:17,804
In Angular JSON is preferred.

94
00:06:17,804 --> 00:06:19,797
Back to the command line,

95
00:06:19,797 --> 00:06:25,310
we'll now use a single command ng new to scaffold and entire application.

96
00:06:25,310 --> 00:06:29,482
And by default, ng new just needs one parameter,

97
00:06:29,482 --> 00:06:35,431
the name of the project, in our case it will be bookstore-front.

98
00:06:35,431 --> 00:06:41,750
So if we execute ng new bookstore-front,

99
00:06:41,750 --> 00:06:48,961
Angular CLI will apply all the defaults and generate a running application.

100
00:06:48,961 --> 00:06:52,829
But I'm going to customize slightly these default values.

101
00:06:52,829 --> 00:06:53,998
First of all,

102
00:06:53,998 --> 00:06:59,227
I find the word bookstore-front a little bit too verbose for our components.

103
00:06:59,227 --> 00:07:04,821
So I'm going to use the prefix bs like bookstore, but shorter.

104
00:07:04,821 --> 00:07:09,447
We will come across this prefix pretty soon.

105
00:07:09,447 --> 00:07:12,910
Because this course is mostly about Java EE and not Angular,

106
00:07:12,910 --> 00:07:14,294
I will skip testing.

107
00:07:14,294 --> 00:07:18,699
Testing an Angular application is a course on its own.

108
00:07:18,699 --> 00:07:24,053
So I'll use the skip-tests and skip-e2e options.

109
00:07:24,053 --> 00:07:29,490
This will not generate test classes nor end to end tests.

110
00:07:29,490 --> 00:07:32,116
I choose to inline CSS style sheet.

111
00:07:32,116 --> 00:07:36,816
This means that our components will not have a separate CSS file.

112
00:07:36,816 --> 00:07:39,640
Again, I want to make it easy.

113
00:07:39,640 --> 00:07:43,512
And because in module 14 we will work with routers,

114
00:07:43,512 --> 00:07:50,134
I'll also enable the routing true flag so we have routes to play with.

115
00:07:50,134 --> 00:07:55,676
We're all set now, let's switch to the terminal.

116
00:07:55,676 --> 00:08:00,795
So IntelliJ IDEA only as the bookstore-back project.

117
00:08:00,795 --> 00:08:05,778
So with Angular CLI command, I'm going to create the bookstore-front.

118
00:08:05,778 --> 00:08:12,617
So here I'm doing ng new bookstore-front and I'm skipping all the tests,

119
00:08:12,617 --> 00:08:16,260
read me's, get and so on.

120
00:08:16,260 --> 00:08:20,511
Angular CLI is creating a few files,

121
00:08:20,511 --> 00:08:24,636
Yarn is downloading all the dependencies and here we are,

122
00:08:24,636 --> 00:08:30,402
now we have the bookstore-front with a node modules

123
00:08:30,402 --> 00:08:34,175
directory and all the dependencies.

124
00:08:34,175 --> 00:08:38,168
The src directory with the main app, the component,

125
00:08:38,168 --> 00:08:43,017
so we will quickly have a look at these components.

126
00:08:43,017 --> 00:08:47,617
And the few configuration files that we mentioned,

127
00:08:47,617 --> 00:09:00,000
the Angular CLI and the package JSON. So now that our application is bootstrapped, let's execute it.

