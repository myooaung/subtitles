WEBVTT
1
00:00:01.958 --> 00:00:04.691
No matter if the rule is simple or complex,

2
00:00:04.691 --> 00:00:10.211
in terms of code, bean validation will use annotations to define such rule.

3
00:00:10.211 --> 00:00:13.381
Let's take back our Book entity.

4
00:00:13.381 --> 00:00:16.390
It has a set of attributes and some of these

5
00:00:16.390 --> 00:00:18.533
attributes need to contain valid data,

6
00:00:18.533 --> 00:00:23.235
so this Book class can be stored in our database.

7
00:00:23.235 --> 00:00:26.379
Just by adding a few annotations to the books attributes

8
00:00:26.379 --> 00:00:30.744
we can express business constraints just like we would do

9
00:00:30.744 --> 00:00:33.188
with if then else statements.

10
00:00:33.188 --> 00:00:40.927
For example, title needs to be NotNull and its size between 1 and 200 characters.

11
00:00:40.927 --> 00:00:47.455
Thanks to these two annotations we can express it easily within our class.

12
00:00:47.455 --> 00:00:49.561
The description can be null,

13
00:00:49.561 --> 00:00:55.998
but if it's not its size needs to be maximum 10000 characters.

14
00:00:55.998 --> 00:01:01.552
The unitCost attribute aggregates another constraint, min.

15
00:01:01.552 --> 00:01:05.929
This means that in our system the price of a book cannot

16
00:01:05.929 --> 00:01:09.284
be null and cannot be less than $1.

17
00:01:09.284 --> 00:01:14.801
The date of publication of the book has to be in the past.

18
00:01:14.801 --> 00:01:18.621
And the beauty of bean validation is that these

19
00:01:18.621 --> 00:01:22.455
constraints can also be added to constructors,

20
00:01:22.455 --> 00:01:26.102
method parameters, as well as return value.

21
00:01:26.102 --> 00:01:30.593
Our BookRepository has three methods that take parameters.

22
00:01:30.593 --> 00:01:34.474
The find method takes an identifier.

23
00:01:34.474 --> 00:01:42.236
We might want to express that the identifier cannot be null nor lower than 10.

24
00:01:42.236 --> 00:01:45.791
The create method takes a Book as a parameter and we

25
00:01:45.791 --> 00:01:49.307
want to make sure this book is NotNull.

26
00:01:49.307 --> 00:01:54.609
Delete takes an identifier that cannot be null and has

27
00:01:54.609 --> 00:01:58.039
to have a value between 1 and 1000.

28
00:01:58.039 --> 00:02:01.797
This enables the well known programming by contract style,

29
00:02:01.797 --> 00:02:15.000
meaning that the caller must meet preconditions before a method is invoked. This way we avoid tons of if then else to validate our business rules.

