1
00:00:01,818 --> 00:00:06,669
In domain driven design terminology the domain model describes the business

2
00:00:06,669 --> 00:00:11,220
we are working with and the problems we want to solve.

3
00:00:11,220 --> 00:00:15,459
The model is a system of abstractions that represent an

4
00:00:15,459 --> 00:00:18,510
aspect of reality or something of interest.

5
00:00:18,510 --> 00:00:22,067
In an object oriented language, such as Java,

6
00:00:22,067 --> 00:00:28,700
the model is represented by an object that incorporates both behavior and data.

7
00:00:28,700 --> 00:00:35,677
We can recognize the domain by focusing on the nouns of our domain.

8
00:00:35,677 --> 00:00:40,855
Typically in the bookstore application we manipulate books.

9
00:00:40,855 --> 00:00:45,196
So a book is part of our domain model.

10
00:00:45,196 --> 00:00:47,824
Let's represent a book in Java.

11
00:00:47,824 --> 00:00:53,520
A Book is a class that contains attributes such as a title,

12
00:00:53,520 --> 00:00:57,203
a description, a unitCost, an isbn number,

13
00:00:57,203 --> 00:01:02,250
a publicationDate, a URL pointing to the image of the book cover,

14
00:01:02,250 --> 00:01:06,219
and the language in which the book has been written in.

15
00:01:06,219 --> 00:01:12,637
Being the domain of our business, this book can also have a set of constructors,

16
00:01:12,637 --> 00:01:16,207
getters and setters, and business methods.

17
00:01:16,207 --> 00:01:17,161
That's it.

18
00:01:17,161 --> 00:01:22,883
As you can see, no extra information is added to this class.

19
00:01:22,883 --> 00:01:27,534
Actually there is nothing specific to Java EE in this code.

20
00:01:27,534 --> 00:01:32,553
But that's because we still haven't had the need for an external service.

21
00:01:32,553 --> 00:01:36,497
Well actually, there is one.

22
00:01:36,497 --> 00:01:38,864
Object relational mapping.

23
00:01:38,864 --> 00:01:42,332
In the bookstore application we need a way to store the information

24
00:01:42,332 --> 00:01:47,361
of our books into the relational database H2.

25
00:01:47,361 --> 00:01:51,634
We could do this programmatically or we could rely on Java

26
00:01:51,634 --> 00:01:54,677
EE the brings object relational mapping.

27
00:01:54,677 --> 00:02:00,977
Object relational mapping brings relational databases and objects together.

28
00:02:00,977 --> 00:02:07,651
Objects have a state only accessible when the Java virtual machine is running.

29
00:02:07,651 --> 00:02:11,853
If the JVM stops or the garbage collector cleans its memory,

30
00:02:11,853 --> 00:02:14,880
objects disappear as well as they state.

31
00:02:14,880 --> 00:02:20,489
But sometimes some objects need to be persisted like our object book.

32
00:02:20,489 --> 00:02:27,316
By persist we mean objects that are stored and can get reused later.

33
00:02:27,316 --> 00:02:33,036
And relational databases are the perfect component to store object state.

34
00:02:33,036 --> 00:02:38,675
The principle of object relational mapping is to delegate to external tools or

35
00:02:38,675 --> 00:02:43,088
frameworks the task of mapping between objects and tables.

36
00:02:43,088 --> 00:02:50,196
In Java EE this framework is called Java Persistence API.

37
00:02:50,196 --> 00:02:53,671
Java Persistence API is the Java EE solution to map

38
00:02:53,671 --> 00:02:55,878
objects to relational database systems.

39
00:02:55,878 --> 00:03:01,380
In JPA to map an object to a relational database the

40
00:03:01,380 --> 00:03:04,611
client needs to use the entity manager.

41
00:03:04,611 --> 00:03:08,539
It is called entity manager because in JPA

42
00:03:08,539 --> 00:03:10,844
persistence objects are called entities.

43
00:03:10,844 --> 00:03:16,027
The entity manager is the API to perform database related operations.

44
00:03:16,027 --> 00:03:22,108
These operations can be simple ones, such as CRUD operations.

45
00:03:22,108 --> 00:03:26,921
CRUD stands for create, read, update, and delete.

46
00:03:26,921 --> 00:03:30,964
But JPA also comes with a more powerful query language,

47
00:03:30,964 --> 00:03:35,949
allowing us to retrieve data with an object oriented syntax.

48
00:03:35,949 --> 00:03:41,251
This language is called JPQL or Java Persistence Query Language.

49
00:03:41,251 --> 00:03:41,771
In fact,

50
00:03:41,771 --> 00:03:45,148
there is so much more that JPA can do that I would recommend

51
00:03:45,148 --> 00:03:50,365
following the dedicated Pluralsight course.

52
00:03:50,365 --> 00:03:53,796
When talking about mapping objects to relational database,

53
00:03:53,796 --> 00:03:57,600
the term Entity should be used rather than object.

54
00:03:57,600 --> 00:04:01,349
Objects are instances that just live in memory.

55
00:04:01,349 --> 00:04:07,991
Entities are objects that live shortly in memory and persistently in a database.

56
00:04:07,991 --> 00:04:13,558
They have the ability to be mapped to a database and need a persistence

57
00:04:13,558 --> 00:04:16,861
identity that uniquely identifies them in the database.

58
00:04:16,861 --> 00:04:20,519
For those of you who know JDBC,

59
00:04:20,519 --> 00:04:26,035
JPA brings eye level of obstruction by removing all the JDBC

60
00:04:26,035 --> 00:04:30,709
boilerplate code of mapping attributes to database columns.

61
00:04:30,709 --> 00:04:38,542
Yet JPA uses JDBC underneath and relies on it to connect to the database.

62
00:04:38,542 --> 00:04:43,821
In terms of code, little defers a book object from a book entity.

63
00:04:43,821 --> 00:04:48,071
In fact, the difference comes with metadata.

64
00:04:48,071 --> 00:04:52,189
Metadata is extra information that will be used by JPA

65
00:04:52,189 --> 00:04:55,227
to map this object to a database.

66
00:04:55,227 --> 00:05:01,781
So we first add an Entity annotation to the class and an Id annotation,

67
00:05:01,781 --> 00:05:06,575
so JPA knows which attribute adds as a primary key.

68
00:05:06,575 --> 00:05:11,366
The GeneratedValue annotation is an easy way to get increment.

69
00:05:11,366 --> 00:05:15,747
The Column annotation informs JPA that the title of the book should

70
00:05:15,747 --> 00:05:19,173
be stored in a column that is 200 characters long.

71
00:05:19,173 --> 00:05:23,526
The description 1000 and the publication date into a

72
00:05:23,526 --> 00:05:25,162
column called publication_date.

73
00:05:25,162 --> 00:05:31,657
Notice that we can use another annotation to indicate that

74
00:05:31,657 --> 00:05:36,385
the publication date is represented as a date into the

75
00:05:36,385 --> 00:05:40,979
database and not a timestamp, for example.

76
00:05:40,979 --> 00:05:46,684
Like most Java EE specifications, JPA also has its XML configuration file,

77
00:05:46,684 --> 00:05:49,324
also called deployment descriptor.

78
00:05:49,324 --> 00:05:52,623
In this file called persistence.

79
00:05:52,623 --> 00:05:58,063
xml we define our persistence unit called bookStorePU.

80
00:05:58,063 --> 00:06:01,884
That's the name that will be used later by the entity manager.

81
00:06:01,884 --> 00:06:04,808
I'll come back to this in the next module.

82
00:06:04,808 --> 00:06:09,085
We then define the properties of this persistence-unit.

83
00:06:09,085 --> 00:06:14,543
For example, a few properties related to database schema generation.

84
00:06:14,543 --> 00:06:16,448
The schema generation.

85
00:06:16,448 --> 00:06:17,082
database.

86
00:06:17,082 --> 00:06:22,185
action property instructs JPA to drop and create the

87
00:06:22,185 --> 00:06:24,748
database schema at each deployment.

88
00:06:24,748 --> 00:06:27,108
That's very useful in development mode,

89
00:06:27,108 --> 00:06:31,167
and remember that we use the in-memory H2 database.

90
00:06:31,167 --> 00:06:35,690
Dropping and recreating a database in-memory is really quick.

91
00:06:35,690 --> 00:06:40,292
The schema generation script action is for being able to

92
00:06:40,292 --> 00:06:43,393
generate the DDL script of the database.

93
00:06:43,393 --> 00:06:44,826
If this property is set,

94
00:06:44,826 --> 00:06:48,956
we need to name the file that will contain all the create statements.

95
00:06:48,956 --> 00:06:51,673
These will be a great help actually.

96
00:06:51,673 --> 00:06:59,000
We will be able to see the impact of an annotation directly into the database schema.

