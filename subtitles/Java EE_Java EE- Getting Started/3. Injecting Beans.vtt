WEBVTT
1
00:00:02.207 --> 00:00:05.752
Let's how we inject beans into other beans.

2
00:00:05.752 --> 00:00:11.262
Our BookRepository is a bean and it defines a create method to create a book.

3
00:00:11.262 --> 00:00:15.020
The process of creating a book could be reduced to

4
00:00:15.020 --> 00:00:21.135
persisting the entity to the database, but it's more complex than that.

5
00:00:21.135 --> 00:00:21.519
First,

6
00:00:21.519 --> 00:00:26.604
we need to generate a unique isbn number and sanitize the title of

7
00:00:26.604 --> 00:00:31.409
the book so we avoid double spaces or line breaks,

8
00:00:31.409 --> 00:00:32.370
for example.

9
00:00:32.370 --> 00:00:37.109
These two services are done by two external beans,

10
00:00:37.109 --> 00:00:39.328
respectively NumberGenerator and TextUtil.

11
00:00:39.328 --> 00:00:44.403
How do we get a reference to those beans?

12
00:00:44.403 --> 00:00:52.245
By using the CDI @Inject annotation, simple as that.

13
00:00:52.245 --> 00:00:53.882
In terms of code,

14
00:00:53.882 --> 00:00:59.898
the TextUtil is just a simple class with no annotation which doesn't extend or

15
00:00:59.898 --> 00:01:05.377
implement anything and the sanitize method is pretty simple as it applies a

16
00:01:05.377 --> 00:01:11.098
regular expression to remove one or many white spaces.

17
00:01:11.098 --> 00:01:15.411
The other bean injected by the BookRepository is the NumberGenerator interface.

18
00:01:15.411 --> 00:01:22.542
So as you can see, CDI can inject an implementation or an interface.

19
00:01:22.542 --> 00:01:28.558
This interface defines the method generateNumber, which generates a book number.

20
00:01:28.558 --> 00:01:32.403
This interface is implemented by the IsbnGenerator

21
00:01:32.403 --> 00:01:37.240
class that generates an isbn number.

22
00:01:37.240 --> 00:01:43.027
The algorithm generates a random number, starting with a prefix 13.

23
00:01:43.027 --> 00:01:48.989
We decouple the declaration and the implementation because one day we might

24
00:01:48.989 --> 00:01:53.305
need to implement a different algorithm to generate a number.

25
00:01:53.305 --> 00:01:57.692
Even if the BookRepository injects the NumberGenerator interface,

26
00:01:57.692 --> 00:01:59.539
and not the implementation,

27
00:01:59.539 --> 00:02:06.275
a simple @Inject and CDI will inject the right dependency.

28
00:02:06.275 --> 00:02:12.724
For injection to work, CDI needs an XML deployment descriptor called beans.

29
00:02:12.724 --> 00:02:13.283
xml.

30
00:02:13.283 --> 00:02:27.000
It can be totally empty except for the bean-discovery. Here we are informed CDI to discover all the beans of our application.

