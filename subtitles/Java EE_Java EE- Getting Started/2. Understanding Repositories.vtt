WEBVTT
1
00:00:02.164 --> 00:00:07.178
First let's answer this question, what is a repository?

2
00:00:07.178 --> 00:00:10.247
Coming back to the domain driven design definition,

3
00:00:10.247 --> 00:00:16.924
a repository acts as a mediator between the domain and the data layer.

4
00:00:16.924 --> 00:00:20.429
The domain being the Book entity and the data layer

5
00:00:20.429 --> 00:00:22.452
being the H2 relational database.

6
00:00:22.452 --> 00:00:28.561
This means that in our case the repository is able to retrieve

7
00:00:28.561 --> 00:00:33.179
books objects from a relational database.

8
00:00:33.179 --> 00:00:37.846
A repository provides a centralized facade over some backend store,

9
00:00:37.846 --> 00:00:39.777
here a relational database.

10
00:00:39.777 --> 00:00:45.379
So this is where we will find methods that giving an

11
00:00:45.379 --> 00:00:49.440
identifier will return a Book, for example,

12
00:00:49.440 --> 00:00:51.531
or giving a Book object,

13
00:00:51.531 --> 00:00:56.229
it persists a book into a database and returns the created book.

14
00:00:56.229 --> 00:01:01.977
Another method we find in our repository is one that given an

15
00:01:01.977 --> 00:01:06.293
identifier deletes a book and returns void.

16
00:01:06.293 --> 00:01:10.496
What do we do now to make these database calls happen?

17
00:01:10.496 --> 00:01:14.505
We need to use the Entity Manager from JPA.

18
00:01:14.505 --> 00:01:18.025
In the previous module we've seen the JPA has some

19
00:01:18.025 --> 00:01:21.133
annotations to customize the database mapping.

20
00:01:21.133 --> 00:01:23.870
But that's not enough.

21
00:01:23.870 --> 00:01:26.279
JPA also has an Entity Manager,

22
00:01:26.279 --> 00:01:30.870
which is the central API to perform database-related operations.

23
00:01:30.870 --> 00:01:36.211
JPA being an abstraction above JDBC,

24
00:01:36.211 --> 00:01:41.778
it makes it possible to be independent of the underlying databases.

25
00:01:41.778 --> 00:01:42.869
So as developers,

26
00:01:42.869 --> 00:01:47.639
we don't need to use SQL statements to interact with the database.

27
00:01:47.639 --> 00:01:52.631
CRUD operations as are easy as a simple method call.

28
00:01:52.631 --> 00:02:00.119
We can create, read, update, delete data just by using the Entity Manger API,

29
00:02:00.119 --> 00:02:03.271
no SQL statement.

30
00:02:03.271 --> 00:02:06.338
So let's take back our BookRepository class.

31
00:02:06.338 --> 00:02:11.672
The first thing to do is to inject the EntityManager.

32
00:02:11.672 --> 00:02:12.981
As you can see,

33
00:02:12.981 --> 00:02:16.580
the name of the persistence unit is the one that we've

34
00:02:16.580 --> 00:02:20.494
previously defined in the persistence.

35
00:02:20.494 --> 00:02:22.060
xml, bookStorePU.

36
00:02:22.060 --> 00:02:25.417
Then let's look at the find method.

37
00:02:25.417 --> 00:02:29.512
The find method takes an identifier and needs to

38
00:02:29.512 --> 00:02:31.945
return a book from the database.

39
00:02:31.945 --> 00:02:38.481
To do that we just invoke the find method of the Entity Manager, that's it.

40
00:02:38.481 --> 00:02:44.108
Thanks to JPA the mapping with the database will be done automatically,

41
00:02:44.108 --> 00:02:50.500
the SQL statement will be generated and executed using JDBC.

42
00:02:50.500 --> 00:02:55.197
One line of code and all the Java EE magic happens.

43
00:02:55.197 --> 00:02:57.924
Creating a book follows the same logic,

44
00:02:57.924 --> 00:03:02.439
it invokes the persist method on the Entity Manager that

45
00:03:02.439 --> 00:03:05.519
inserts the book into the database.

46
00:03:05.519 --> 00:03:09.278
Deleting a book from the database requires two operations.

47
00:03:09.278 --> 00:03:09.658
First,

48
00:03:09.658 --> 00:03:21.000
we need to get a reference of the book from the database and then invoke the remove method of the Entity Manager.

