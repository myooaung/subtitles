WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.325
Hello and welcome to the last video in this section.

00:00:05.325 --> 00:00:10.080
And this will be pretty quick video, no hands-on.

00:00:10.080 --> 00:00:14.295
It's just more of a theoretical video in a more on the theory.

00:00:14.295 --> 00:00:19.935
And it's important because you might have wondered like,

00:00:19.935 --> 00:00:24.300
why would somebody prefer using a normal database over S3?

00:00:24.300 --> 00:00:27.570
Or like, what is the difference between like why

00:00:27.570 --> 00:00:31.110
are there even other data services on AWS and that kind of stuff?

00:00:31.110 --> 00:00:32.730
And obviously there are a lot of reasons for that.

00:00:32.730 --> 00:00:37.710
Some services are needed for big data management and others are first for

00:00:37.710 --> 00:00:39.385
speed and others are for

00:00:39.385 --> 00:00:42.950
service I computation like for SQL querying and that kinda stuff.

00:00:42.950 --> 00:00:47.345
But it is a very good question like when you do have applications

00:00:47.345 --> 00:00:52.909
that just require a data or some sort of data structure.

00:00:52.909 --> 00:00:55.115
But they don't really require

00:00:55.115 --> 00:00:58.985
too much space or they don't really require some computation.

00:00:58.985 --> 00:01:06.455
And so I often get asked to ask the question like why not S3 for everything?

00:01:06.455 --> 00:01:10.745
Is S3 like the magical solution where you can just

00:01:10.745 --> 00:01:13.280
zip up a database and just store it there and

00:01:13.280 --> 00:01:15.710
then pull it in for the free web app or wherever,

00:01:15.710 --> 00:01:17.435
whenever you need to have that kind of stuff.

00:01:17.435 --> 00:01:20.570
And so just in order to understand the tradeoffs basically

00:01:20.570 --> 00:01:24.790
for when to use S3 and what you're sacrificing,

00:01:24.790 --> 00:01:26.030
what you're gaining in that kind of stuff.

00:01:26.030 --> 00:01:27.560
It's, it's always good to look at

00:01:27.560 --> 00:01:33.170
the data consistency model of the Data Service you're utilizing.

00:01:33.170 --> 00:01:35.255
So in the case of S3,

00:01:35.255 --> 00:01:36.980
there are some trade-offs.

00:01:36.980 --> 00:01:40.220
There are some things that you are gaining and there are some things that

00:01:40.220 --> 00:01:44.210
you are sacrificing on when you're using S3.

00:01:44.210 --> 00:01:46.730
So let's look at those first of all, right,

00:01:46.730 --> 00:01:50.840
you have a very strong read after write consistency for putts and

00:01:50.840 --> 00:01:56.840
deletes of objects in your Amazon S3 bucket in all AWS regions.

00:01:56.840 --> 00:01:57.740
Okay?

00:01:57.740 --> 00:02:00.620
So, and then you also have

00:02:00.620 --> 00:02:04.925
high availability for replicating data across multiple servers within an ADF,

00:02:04.925 --> 00:02:06.289
within a diverse datacenters.

00:02:06.289 --> 00:02:09.515
So you definitely gain from the availability aspect,

00:02:09.515 --> 00:02:13.070
um, compared to some other data services you might be using.

00:02:13.070 --> 00:02:18.875
Um, the fact that you have high availability, it's 99.9% available.

00:02:18.875 --> 00:02:23.375
There's really no chance of you losing your data on S3.

00:02:23.375 --> 00:02:27.575
Now, however, when it comes to actual consistency,

00:02:27.575 --> 00:02:33.365
bucket configurations have what's known as an eventually consistent model.

00:02:33.365 --> 00:02:36.005
And that means that, for example, right,

00:02:36.005 --> 00:02:43.355
if you delete a bucket and immediately list all buckets, okay?

00:02:43.355 --> 00:02:48.065
Deleted bucket might still up here in the list.

00:02:48.065 --> 00:02:51.950
Ok, And so it's eventually consistent.

00:02:51.950 --> 00:02:53.839
It's not immediately consistent.

00:02:53.839 --> 00:02:55.910
And so if that's something that's important for

00:02:55.910 --> 00:02:58.925
your application or for your particular use case.

00:02:58.925 --> 00:03:02.000
You have to be careful about using S3.

00:03:02.000 --> 00:03:04.355
You might want to use another type of service.

00:03:04.355 --> 00:03:09.170
Or you might want to modify the logic of your code or

00:03:09.170 --> 00:03:13.790
how you utilize S3 in order to avoid any pitfalls from this.

00:03:13.790 --> 00:03:18.470
Now, note that this is for bucket's objects to have a strong reaction, right?

00:03:18.470 --> 00:03:20.810
Consistency for pets and deletes.

00:03:20.810 --> 00:03:24.230
But for buckets, you have this eventually consistent model.

00:03:24.230 --> 00:03:27.680
So if you enable versioning.

00:03:27.680 --> 00:03:30.470
Honey bucket for the first time.

00:03:30.470 --> 00:03:35.870
It might take a short time for the change to be fully propagated.

00:03:35.870 --> 00:03:39.365
So this is also another one of those things where like,

00:03:39.365 --> 00:03:40.880
you know, if you had an actual database,

00:03:40.880 --> 00:03:42.215
it will be immediate, right?

00:03:42.215 --> 00:03:45.245
Because database has its own server.

00:03:45.245 --> 00:03:48.380
And like basically you are paying for that server, it's your server,

00:03:48.380 --> 00:03:51.740
so you have direct access, immediate access to it.

00:03:51.740 --> 00:03:54.235
Whereas with S3, paying for the servers, right?

00:03:54.235 --> 00:03:56.240
Aws has been for the servers.

00:03:56.240 --> 00:03:57.980
They're dealing with that in the back-end.

00:03:57.980 --> 00:04:00.770
They're dealing with figuring out how and where to

00:04:00.770 --> 00:04:03.590
store your changes in your update to that kind of stuff.

00:04:03.590 --> 00:04:07.310
So it takes, it might take some time for them to

00:04:07.310 --> 00:04:10.280
allocate stuff in such a way as to

00:04:10.280 --> 00:04:13.490
optimize the pricing and everything for it for them on their end.

00:04:13.490 --> 00:04:15.785
And so that's, you know,

00:04:15.785 --> 00:04:18.050
completely expected and understandable.

00:04:18.050 --> 00:04:22.490
So it is recommended that you wait for 15 minutes

00:04:22.490 --> 00:04:27.005
after enabling versioning and before issuing write operations,

00:04:27.005 --> 00:04:31.670
which are basically put or delete operations on objects in the bucket.

00:04:31.670 --> 00:04:32.930
Okay?

00:04:32.930 --> 00:04:36.800
And so that's a trade-off

00:04:36.800 --> 00:04:42.980
that you should be able to live with if you're going to be using S3,

00:04:42.980 --> 00:04:46.160
especially for the other stuff you gain instead of that, right?

00:04:46.160 --> 00:04:47.570
Like by giving that up.

00:04:47.570 --> 00:04:49.355
Now, that's it.

00:04:49.355 --> 00:04:54.125
Again, if, if your application is like highly critical and there are,

00:04:54.125 --> 00:04:58.145
and you believe that it's unique and the way

00:04:58.145 --> 00:05:02.930
that it uses data and leverages your data storage and I kinda stuff.

00:05:02.930 --> 00:05:05.405
And you just want to be extra sure.

00:05:05.405 --> 00:05:09.830
You just look up S3 data consistency model on an AWS and just to look

00:05:09.830 --> 00:05:14.930
into a little bit more of the different caveats or

00:05:14.930 --> 00:05:19.280
other little ways that S3 kind of

00:05:19.280 --> 00:05:25.280
works so as to make sure that you're not going to run into any issues,

00:05:25.280 --> 00:05:29.105
but overall, right, it shouldn't be that much of a problem.

00:05:29.105 --> 00:05:32.840
Especially if you are, if you have concurrent read and write

00:05:32.840 --> 00:05:37.160
operations with concurrent operations with concurrent applications,

00:05:37.160 --> 00:05:38.960
you might want to watch out for some of

00:05:38.960 --> 00:05:42.350
the behavior of how the reading or writing happens, right?

00:05:42.350 --> 00:05:45.080
Because that's something else that's a big advantage of using

00:05:45.080 --> 00:05:49.625
an actual database is that it deals with concurrent read and writes.

00:05:49.625 --> 00:05:52.175
Whereas if S3, you might have some issues.

00:05:52.175 --> 00:05:56.975
If an application is reading and writing the same data at the same time.

00:05:56.975 --> 00:05:59.824
It's nothing that's not solvable,

00:05:59.824 --> 00:06:01.790
but just something to watch out for write.

00:06:01.790 --> 00:06:04.970
As 3 is not really intended to be used as a database.

00:06:04.970 --> 00:06:07.444
It's just a data storage.

00:06:07.444 --> 00:06:09.140
Object storage.

00:06:09.140 --> 00:06:11.750
I haven't data storage and the Object Storage Service.

00:06:11.750 --> 00:06:14.720
So if you are going to be using it as a database,

00:06:14.720 --> 00:06:18.470
do be careful about it and

00:06:18.470 --> 00:06:23.060
do your due diligence and make sure that everything's gonna be alright.

00:06:23.060 --> 00:06:25.790
Okay, that's it for this section.

00:06:25.790 --> 00:06:28.655
I will see you in the next one. Thanks.

00:06:28.655 --> 00:06:30.090
Um, buh-bye.
