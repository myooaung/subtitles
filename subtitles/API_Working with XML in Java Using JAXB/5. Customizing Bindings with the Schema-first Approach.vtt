WEBVTT
1
00:00:02.077 --> 00:00:04.593
When you use the code-first approach,

2
00:00:04.593 --> 00:00:09.429
you can use the JAXB annotations to customize how exactly you want

3
00:00:09.429 --> 00:00:13.173
your Java classes to be translated into XML Schema.

4
00:00:13.173 --> 00:00:15.070
With the schema-first approach,

5
00:00:15.070 --> 00:00:19.204
there are also a lot of possibilities for customizing.

6
00:00:19.204 --> 00:00:24.392
Let's take a look at how exactly you can do this.

7
00:00:24.392 --> 00:00:28.202
Sometimes the default way that xjc translates an XML

8
00:00:28.202 --> 00:00:31.522
Schema to Java classes is not ideal.

9
00:00:31.522 --> 00:00:34.084
To get better generated classes,

10
00:00:34.084 --> 00:00:39.728
one thing you could do is try to tweak the schema so that XJC will

11
00:00:39.728 --> 00:00:43.100
generate the classes as you would like to have them.

12
00:00:43.100 --> 00:00:47.254
One example of this that you've just learned about is defining the

13
00:00:47.254 --> 00:00:53.434
root element in the XSD with an anonymous type so that a class with

14
00:00:53.434 --> 00:00:55.971
an XmlRootElement annotation is generated.

15
00:00:55.971 --> 00:00:59.083
Besides tweaking the structure of the XSD,

16
00:00:59.083 --> 00:01:05.601
it's also possible to provide JAXB-specific instructions called binding

17
00:01:05.601 --> 00:01:11.358
customizations either in the XSD directly or in a separate file.

18
00:01:11.358 --> 00:01:16.279
To customize the binding of a specific element or type in the XSD,

19
00:01:16.279 --> 00:01:21.523
you can add an xs annotation element to the element or type declaration,

20
00:01:21.523 --> 00:01:27.331
with inside it an xs:appinfo element, with inside that,

21
00:01:27.331 --> 00:01:31.595
JAXB-specific binding customization elements.

22
00:01:31.595 --> 00:01:35.571
In a moment, we'll take a look at different things you can customize,

23
00:01:35.571 --> 00:01:41.486
but let's look at a quick first example to make more clear how this works.

24
00:01:41.486 --> 00:01:45.718
Remember from the code-first approach that we could modify the

25
00:01:45.718 --> 00:01:50.930
name of a generated complexType by specifying it with the name

26
00:01:50.930 --> 00:01:53.156
attribute of the XmlType annotation.

27
00:01:53.156 --> 00:01:58.830
Let's see how we can do the same thing but the other way

28
00:01:58.830 --> 00:02:01.308
around with the schema-first approach.

29
00:02:01.308 --> 00:02:02.406
To do this,

30
00:02:02.406 --> 00:02:06.796
I first have to define a namespace prefix in the XSD for

31
00:02:06.796 --> 00:02:09.299
the JAXB binding customization namespace,

32
00:02:09.299 --> 00:02:13.804
and I have to add a JAXB version attribute.

33
00:02:13.804 --> 00:02:18.668
Then let's take a look at the complexType named customer.

34
00:02:18.668 --> 00:02:23.984
I can add an xs annotation element to it with an xs:appinfo,

35
00:02:23.984 --> 00:02:25.614
and then inside there,

36
00:02:25.614 --> 00:02:30.627
I can add a jaxb:class element with a name attribute to specify the

37
00:02:30.627 --> 00:02:34.391
name of the class that I want for this complexType,

38
00:02:34.391 --> 00:02:36.588
for example, CustomerType.

39
00:02:36.588 --> 00:02:40.251
If I now run xjc,

40
00:02:40.251 --> 00:02:45.766
you'll see that I get a class named CustomerType instead of Customer.

41
00:02:45.766 --> 00:02:50.850
The big disadvantage of putting binding customizations inside the XSD

42
00:02:50.850 --> 00:02:56.162
itself is that you'll have to modify the XSD file for this.

43
00:02:56.162 --> 00:03:00.098
If you get the XSD from someone else, or if you get it from,

44
00:03:00.098 --> 00:03:04.514
for example, an external organization who maintains it,

45
00:03:04.514 --> 00:03:08.579
then you'll not want to modify the XSD file itself.

46
00:03:08.579 --> 00:03:10.638
To solve this disadvantage,

47
00:03:10.638 --> 00:03:15.930
xjc allows you to put the customizations in a separate

48
00:03:15.930 --> 00:03:20.433
bindings file instead of inside the XSD itself.

49
00:03:20.433 --> 00:03:23.294
Let's quickly take a look at how we can do the same

50
00:03:23.294 --> 00:03:27.005
thing we just did with a bindings file.

51
00:03:27.005 --> 00:03:30.453
Let's create a file, bindings.

52
00:03:30.453 --> 00:03:31.143
xjb.

53
00:03:31.143 --> 00:03:35.743
JAXB bindings files often have the extension xjb,

54
00:03:35.743 --> 00:03:39.193
although this is not absolutely required.

55
00:03:39.193 --> 00:03:44.383
The root element of this file is a jaxb:bindings element with the necessary

56
00:03:44.383 --> 00:03:49.255
namespace prefix definitions and a version attribute.

57
00:03:49.255 --> 00:03:52.919
Inside the root element, we can put different things.

58
00:03:52.919 --> 00:03:54.730
For this simple example,

59
00:03:54.730 --> 00:03:59.660
we'll put a nested jaxb:bindings element in there with a schema

60
00:03:59.660 --> 00:04:02.743
location attribute and also a note attribute,

61
00:04:02.743 --> 00:04:08.170
which has as its value an XPath expression that points to the

62
00:04:08.170 --> 00:04:11.357
element in the XSD to which this applies.

63
00:04:11.357 --> 00:04:16.343
It's out of scope for this course to explain how XPath works,

64
00:04:16.343 --> 00:04:20.394
but what this expression means is easy to understand.

65
00:04:20.394 --> 00:04:24.869
The xs:complexType element inside the xs:schema element which

66
00:04:24.869 --> 00:04:29.242
has an attribute name with the value customer.

67
00:04:29.242 --> 00:04:31.799
Finally, inside this bindings element,

68
00:04:31.799 --> 00:04:36.058
we put the name jaxb:class element that we had inside the

69
00:04:36.058 --> 00:04:41.457
xs:appinfo element in the XSD in the first example.

70
00:04:41.457 --> 00:04:42.846
When I now run xjc,

71
00:04:42.846 --> 00:04:47.519
I have to tell it on the command line to use the bindings file bindings.

72
00:04:47.519 --> 00:04:49.750
xjb, and then, of course,

73
00:04:49.750 --> 00:04:54.513
we'll again get a class CustomerType instead of Customer.

74
00:04:54.513 --> 00:05:00.614
In the next clips, you'll learn more about binding customizations.

75
00:05:00.614 --> 00:05:05.102
I cannot give you a complete overview of all possible

76
00:05:05.102 --> 00:05:07.569
customizations because that would be a very long list,

77
00:05:07.569 --> 00:05:17.000
but we will take a look at a number of practical examples that will give you an idea of what the possibilities are.

