1
00:00:02,126 --> 00:00:05,756
One of the things you saw when we used xjc in one of the first

2
00:00:05,756 --> 00:00:09,907
examples in this module is that for date and time types,

3
00:00:09,907 --> 00:00:14,971
it generates fields of type XMLGregorianCalendar.

4
00:00:14,971 --> 00:00:19,077
This is an XML-specific and inconvenient type for

5
00:00:19,077 --> 00:00:21,643
storing date and time information.

6
00:00:21,643 --> 00:00:25,642
Since Java 8, the JDK contains the package java.

7
00:00:25,642 --> 00:00:26,086
time,

8
00:00:26,086 --> 00:00:31,341
which has a number of classes for dealing with dates and times that are much

9
00:00:31,341 --> 00:00:36,283
more powerful than what was available in all the Java versions.

10
00:00:36,283 --> 00:00:40,783
The old date and time classes, specifically the classes java.

11
00:00:40,783 --> 00:00:41,233
util.

12
00:00:41,233 --> 00:00:42,570
Date and java.

13
00:00:42,570 --> 00:00:43,014
util.

14
00:00:43,014 --> 00:00:43,457
Calendar,

15
00:00:43,457 --> 00:00:48,350
were not suitable for JAXB because they cannot contain all the

16
00:00:48,350 --> 00:00:53,345
information that JAXB needs to properly map XML Schema date and

17
00:00:53,345 --> 00:00:56,696
time types to Java and vice versa.

18
00:00:56,696 --> 00:01:00,007
JAXB has not been updated yet to make use of the

19
00:01:00,007 --> 00:01:02,708
new Java 8 date and time classes,

20
00:01:02,708 --> 00:01:08,687
and maybe it never will because of backward compatibility requirements.

21
00:01:08,687 --> 00:01:12,161
It would be great if we can find a way to make JAXB use

22
00:01:12,161 --> 00:01:14,521
the Java 8 date and time types anyway,

23
00:01:14,521 --> 00:01:18,481
so that we don't have to deal with XMLGregorianCalendar anymore.

24
00:01:18,481 --> 00:01:19,168
Fortunately,

25
00:01:19,168 --> 00:01:24,477
it is possible to customize bindings so that xjc will

26
00:01:24,477 --> 00:01:27,890
use the Java 8 date and time types.

27
00:01:27,890 --> 00:01:36,840
Let's see how you can do this in the next example, ps-jaxb-21-datetime.

28
00:01:36,840 --> 00:01:41,379
XML Schema has a number of standard date and time types.

29
00:01:41,379 --> 00:01:43,269
In our purchaseOrder schema,

30
00:01:43,269 --> 00:01:47,213
we've used the type xs:dateTime for the orderDate

31
00:01:47,213 --> 00:01:50,400
attribute of the purchaseOrder element.

32
00:01:50,400 --> 00:01:55,341
Let's see how we can make xjc generate a field of type

33
00:01:55,341 --> 00:01:58,864
JavaTime OffsetDateTime for this attribute.

34
00:01:58,864 --> 00:02:03,578
The class OffsetDateTime represents a date and time with a time

35
00:02:03,578 --> 00:02:07,339
zone offset in the ISO 8601 calendar system,

36
00:02:07,339 --> 00:02:12,313
which is the same as what XML Schema is based on,

37
00:02:12,313 --> 00:02:15,598
so this is a suitable type to use.

38
00:02:15,598 --> 00:02:17,263
In the bindings file,

39
00:02:17,263 --> 00:02:21,637
we'll add a jaxb:javaType element to the jaxb:globalBindings element.

40
00:02:21,637 --> 00:02:28,527
With the javaType element you can customize how xjc maps

41
00:02:28,527 --> 00:02:32,671
standard XML Schema types to Java types.

42
00:02:32,671 --> 00:02:37,263
The javaType element expects a number of attributes.

43
00:02:37,263 --> 00:02:42,565
We have to specify the name of the XML Schema type in the xmlType attribute,

44
00:02:42,565 --> 00:02:46,597
which is xs:dateTime in this example.

45
00:02:46,597 --> 00:02:47,872
With the name attribute,

46
00:02:47,872 --> 00:02:52,640
we specify the fully qualified name of the javaType that we want to use,

47
00:02:52,640 --> 00:02:54,704
which is, of course, java.

48
00:02:54,704 --> 00:02:55,288
time.

49
00:02:55,288 --> 00:02:55,873
OffsetDateTime.

50
00:02:55,873 --> 00:03:01,149
There's one more important piece of information to the puzzle.

51
00:03:01,149 --> 00:03:07,496
In XML, the value of the attribute or element that we are dealing with is,

52
00:03:07,496 --> 00:03:09,500
of course, represented as text.

53
00:03:09,500 --> 00:03:14,639
We need to tell JAXB how to convert the text content of the element or

54
00:03:14,639 --> 00:03:19,091
attribute to and from the javaType that we want to use.

55
00:03:19,091 --> 00:03:23,973
To do this, we have to specify two more attributes on the javaType element,

56
00:03:23,973 --> 00:03:27,923
the parseMethod and the printMethod attribute.

57
00:03:27,923 --> 00:03:32,883
The parseMethod attribute is the name of a static method which takes a

58
00:03:32,883 --> 00:03:38,019
string and returns an instance of the target Java type.

59
00:03:38,019 --> 00:03:41,309
JAXB will call this method during unmarshalling to

60
00:03:41,309 --> 00:03:45,248
convert the XML value into a Java object.

61
00:03:45,248 --> 00:03:46,806
In this case,

62
00:03:46,806 --> 00:03:51,518
we simply specify parse because class OffsetDateTime contains a

63
00:03:51,518 --> 00:03:56,052
method named parse that does exactly what we need.

64
00:03:56,052 --> 00:04:02,189
It takes a string in ISO 8601 format and returns an OffsetDateTime object.

65
00:04:02,189 --> 00:04:07,136
Note that the method we refer to here does not need

66
00:04:07,136 --> 00:04:10,085
to be in the target Java type.

67
00:04:10,085 --> 00:04:15,112
We could, for example, make a utility class with static methods.

68
00:04:15,112 --> 00:04:17,786
To point to a method in the utility class,

69
00:04:17,786 --> 00:04:21,284
we would have to specify the fully qualified name of

70
00:04:21,284 --> 00:04:23,699
the class before the method name.

71
00:04:23,699 --> 00:04:27,450
Another possibility is to use the special name new,

72
00:04:27,450 --> 00:04:32,055
which means that JAXB will look for a constructor of the

73
00:04:32,055 --> 00:04:34,990
target Java class that takes a string.

74
00:04:34,990 --> 00:04:39,418
If you leave out the parseMethod attribute from the javaType element,

75
00:04:39,418 --> 00:04:41,990
this is what JAXB does by default.

76
00:04:41,990 --> 00:04:46,370
But we cannot do that for this example because class

77
00:04:46,370 --> 00:04:50,590
OffsetDateTime does not have such a constructor.

78
00:04:50,590 --> 00:04:54,296
The printMethod attribute is similar and refers to the method that

79
00:04:54,296 --> 00:04:58,780
will be called during marshalling to convert the Java object to text

80
00:04:58,780 --> 00:05:01,678
content for the XML element or attribute.

81
00:05:01,678 --> 00:05:05,977
The method that this attribute refers to must take no

82
00:05:05,977 --> 00:05:09,784
arguments and return a string that contains the

83
00:05:09,784 --> 00:05:13,859
representation of the Java object in XML.

84
00:05:13,859 --> 00:05:17,404
The method is normally called on the Java object itself,

85
00:05:17,404 --> 00:05:20,975
but it's also possible to specify the name of a

86
00:05:20,975 --> 00:05:25,747
static method in a utility class, just like with the parseMethod attribute.

87
00:05:25,747 --> 00:05:27,495
If you do that,

88
00:05:27,495 --> 00:05:31,879
then the static method in the utility class must take one argument,

89
00:05:31,879 --> 00:05:34,538
which is the Java object, to convert.

90
00:05:34,538 --> 00:05:38,946
When you omit the printMethod attribute from the javaType element,

91
00:05:38,946 --> 00:05:42,545
then by default, the toString method is used.

92
00:05:42,545 --> 00:05:48,253
I specified it here explicitly just to show you what it looks like,

93
00:05:48,253 --> 00:05:51,956
but the printMethod attribute here is actually redundant.

94
00:05:51,956 --> 00:05:57,300
Let's run xjc with this bindings file and see what we get so that you

95
00:05:57,300 --> 00:06:01,757
understand what exactly this binding customization does.

96
00:06:01,757 --> 00:06:06,068
Let's look at the generated class PurchaseOrder first.

97
00:06:06,068 --> 00:06:12,099
It indeed has a field named orderDate now that is of type OffsetDateTime.

98
00:06:12,099 --> 00:06:15,563
The field also has two annotations,

99
00:06:15,563 --> 00:06:19,238
an XmlSchemaType annotation that specifies the

100
00:06:19,238 --> 00:06:26,063
XmlSchemaType that this field maps to, and an XmlJavaTypeAdapter annotation.

101
00:06:26,063 --> 00:06:29,935
You've seen both of these annotations before.

102
00:06:29,935 --> 00:06:34,115
Remember that we implemented our own XML adapter to customize how

103
00:06:34,115 --> 00:06:38,290
we wanted a hash map to be converted to XML.

104
00:06:38,290 --> 00:06:42,292
Now xjc has generated an adapter automatically for us,

105
00:06:42,292 --> 00:06:46,552
which is named Adapter1, as you can see here.

106
00:06:46,552 --> 00:06:49,174
If we look at the list of generated classes,

107
00:06:49,174 --> 00:07:00,100
we see that there is a class Adapter1 in the package org\w3\_2001\xmlschema.

108
00:07:00,100 --> 00:07:03,760
Note that this strange-looking package name corresponds to the

109
00:07:03,760 --> 00:07:09,267
namespace URI of the standard XML Schema namespace.

110
00:07:09,267 --> 00:07:13,523
The generated adapter class contains marshal and unmarshal

111
00:07:13,523 --> 00:07:17,989
methods that call the parseMethod and the printMethod that we

112
00:07:17,989 --> 00:07:20,175
specified in the bindings file.

113
00:07:20,175 --> 00:07:24,147
The marshal method calls toString on the OffsetDateTime object,

114
00:07:24,147 --> 00:07:27,642
and the unmarshal method calls the parseMethod.

115
00:07:27,642 --> 00:07:33,322
As you see, this is the schema-first equivalent of writing an adapter class.

116
00:07:33,322 --> 00:07:38,079
Besides using it to make use of the Java 8 date and time classes,

117
00:07:38,079 --> 00:07:39,234
you can, of course,

118
00:07:39,234 --> 00:07:49,000
use this for your own data types that need custom conversion to and from XML text content as well.

