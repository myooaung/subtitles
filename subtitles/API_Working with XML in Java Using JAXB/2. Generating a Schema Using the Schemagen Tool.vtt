WEBVTT
1
00:00:01.931 --> 00:00:03.184
In the previous examples,

2
00:00:03.184 --> 00:00:07.731
we've been working with a set of domain model classes for purchase orders.

3
00:00:07.731 --> 00:00:13.811
Let's see how we can generate an XML Schema for those classes.

4
00:00:13.811 --> 00:00:19.656
The JDK includes a few tools that are specifically for JAXB.

5
00:00:19.656 --> 00:00:22.908
One of these tools is the schemagen tool.

6
00:00:22.908 --> 00:00:28.757
What this tool does is generate an XSD file from domain model

7
00:00:28.757 --> 00:00:32.573
classes that are annotated with JAXB annotations.

8
00:00:32.573 --> 00:00:39.179
Take a look at example ps-jaxb-12-schemagen to try it out.

9
00:00:39.179 --> 00:00:42.267
This example does not contain runnable code,

10
00:00:42.267 --> 00:00:46.445
just the same set of domain model classes that we've

11
00:00:46.445 --> 00:00:48.812
been using in all the examples.

12
00:00:48.812 --> 00:00:53.228
Let's open a terminal so that we can run schemagen.

13
00:00:53.228 --> 00:00:59.292
But before I run schemagen, I'll compile the Java classes using Maven.

14
00:00:59.292 --> 00:01:05.463
Maven writes the compiled classes to the directory target/classes.

15
00:01:05.463 --> 00:01:07.018
Now let's run schemagen.

16
00:01:07.018 --> 00:01:13.474
I have to tell it where to find the class files using the cp option,

17
00:01:13.474 --> 00:01:16.043
which stands for class path.

18
00:01:16.043 --> 00:01:20.655
I'll also tell it I want to use the UTF-8 character encoding,

19
00:01:20.655 --> 00:01:26.232
and then I specify the fully qualified name of the PurchaseOrder class.

20
00:01:26.232 --> 00:01:29.220
It prints a warning that has to do with Java versions,

21
00:01:29.220 --> 00:01:36.234
which is not really important, and tells us that it has written an XSD,

22
00:01:36.234 --> 00:01:36.797
schema1.

23
00:01:36.797 --> 00:01:37.361
xsd.

24
00:01:37.361 --> 00:01:42.211
Let's open the XSD in IDE and see what it looks like.

25
00:01:42.211 --> 00:01:46.711
If you look at the XSD, there are no big surprises there.

26
00:01:46.711 --> 00:01:50.600
There's an element declaration for the purchaseOrder element,

27
00:01:50.600 --> 00:01:56.163
which is what we expect since that class has an XmlRootElement annotation.

28
00:01:56.163 --> 00:01:58.534
Then there are complex type declarations,

29
00:01:58.534 --> 00:02:03.267
which correspond to the classes in the domain model,

30
00:02:03.267 --> 00:02:06.419
purchaseOrder, item, customer, and address.

31
00:02:06.419 --> 00:02:10.996
Finally, there's the simple type declaration for the loyalty enum,

32
00:02:10.996 --> 00:02:14.425
which also looks like what you would expect.

33
00:02:14.425 --> 00:02:24.000
Take look at the XSD yourself and compare it to the domain model classes to see how they correspond to each other.

