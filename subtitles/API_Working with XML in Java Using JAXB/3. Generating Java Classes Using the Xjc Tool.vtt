WEBVTT
1
00:00:02.062 --> 00:00:07.191
Let's now see how the schema-first approach works in practice.

2
00:00:07.191 --> 00:00:11.716
We'll start with just the XSD, from which you will generate the Java classes,

3
00:00:11.716 --> 00:00:16.039
and then we'll take a look at the generated classes.

4
00:00:16.039 --> 00:00:17.452
In the previous module,

5
00:00:17.452 --> 00:00:22.583
we've used the schemagen tool to generate an XSD from Java classes.

6
00:00:22.583 --> 00:00:27.190
The JDK contains another tool, the xjc tool,

7
00:00:27.190 --> 00:00:32.423
which does the opposite, generate Java classes from an XSD.

8
00:00:32.423 --> 00:00:41.807
Take a look at the example ps-jaxb-19-xjc to see this tool in action.

9
00:00:41.807 --> 00:00:46.991
We start with the XSD, which is in the file purchaseOrder.

10
00:00:46.991 --> 00:00:47.462
xsd.

11
00:00:47.462 --> 00:00:53.300
Let's open a terminal and run xjc to generate the Java classes.

12
00:00:53.300 --> 00:00:59.527
Using the -d option, I tell xjc where to write the generated sources,

13
00:00:59.527 --> 00:01:03.211
which is in src\main\java, in this case.

14
00:01:03.211 --> 00:01:10.066
With the -p option, I specify in which package I want the domain model classes.

15
00:01:10.066 --> 00:01:15.914
Let's use the same as what we've used in the previous examples, which is com.

16
00:01:15.914 --> 00:01:16.504
jesperdj.

17
00:01:16.504 --> 00:01:17.093
jaxb.

18
00:01:17.093 --> 00:01:17.683
domain.

19
00:01:17.683 --> 00:01:24.157
Finally, I want the generated source files to be in the UTF-8 character encoding,

20
00:01:24.157 --> 00:01:27.348
and I specify the XSD to process.

21
00:01:27.348 --> 00:01:32.891
Xjc prints the names of the source files that it generates.

22
00:01:32.891 --> 00:01:35.794
We get the expected classes for our domain model,

23
00:01:35.794 --> 00:01:38.255
and it also generates package-info.

24
00:01:38.255 --> 00:01:42.738
java and also an ObjectFactory class.

25
00:01:42.738 --> 00:01:45.970
Let's see what the generated classes look like.

26
00:01:45.970 --> 00:01:48.707
We will start with class PurchaseOrder.

27
00:01:48.707 --> 00:01:52.257
It's just a regular Java class with fields,

28
00:01:52.257 --> 00:01:55.778
and getters, and setters, annotated with JAXB annotations,

29
00:01:55.778 --> 00:02:01.348
much like the PurchaseOrder class that we wrote ourselves earlier.

30
00:02:01.348 --> 00:02:05.177
There are a few points worth paying attention to.

31
00:02:05.177 --> 00:02:07.628
Take a look at the field orderDate.

32
00:02:07.628 --> 00:02:09.028
It's not a java.

33
00:02:09.028 --> 00:02:09.378
util.

34
00:02:09.378 --> 00:02:12.988
Date, as in our handwritten PurchaseOrder class.

35
00:02:12.988 --> 00:02:15.224
Instead, it's an XMLGregorianCalendar.

36
00:02:15.224 --> 00:02:21.719
This is a special date and time type that can contain all the information

37
00:02:21.719 --> 00:02:26.011
for the various XML Schema standard date and time types.

38
00:02:26.011 --> 00:02:26.918
A java.

39
00:02:26.918 --> 00:02:27.372
util.

40
00:02:27.372 --> 00:02:32.299
Date would not be sufficient because it does not preserve all the

41
00:02:32.299 --> 00:02:36.474
information that the XML Schema date and time types can hold.

42
00:02:36.474 --> 00:02:40.083
The reason why we have this is also historical.

43
00:02:40.083 --> 00:02:42.337
Up to Java version 7,

44
00:02:42.337 --> 00:02:49.828
Java did not have a very powerful standard API for working with dates and times.

45
00:02:49.828 --> 00:02:55.230
This changed in Java 8, when the Java time package was added.

46
00:02:55.230 --> 00:02:58.722
The Java time package does contain classes which are

47
00:02:58.722 --> 00:03:02.120
capable of capturing all the information that the XML

48
00:03:02.120 --> 00:03:04.399
Schema date and time types contain,

49
00:03:04.399 --> 00:03:09.680
but JAXB is much older than Java 8 and hasn't been updated to

50
00:03:09.680 --> 00:03:13.225
work with the Java 8 date and time classes.

51
00:03:13.225 --> 00:03:15.645
Class XMLGregorianCalendar is cumbersome to use,

52
00:03:15.645 --> 00:03:21.467
as we'll see in a moment when we'll take a look at how we can

53
00:03:21.467 --> 00:03:23.750
use the generated classes for marshalling.

54
00:03:23.750 --> 00:03:29.097
It would be nice if we could use the Java 8 date and time classes instead.

55
00:03:29.097 --> 00:03:30.321
Later in this module,

56
00:03:30.321 --> 00:03:33.993
we'll see how we can tell JAXB to use the Java 8

57
00:03:33.993 --> 00:03:36.553
classes instead of XMLGregorianCalendar.

58
00:03:36.553 --> 00:03:41.673
Next, take a look at the field Items.

59
00:03:41.673 --> 00:03:43.556
Its type is PurchaseOrder.

60
00:03:43.556 --> 00:03:48.832
Items, which is a nested class defined inside the PurchaseOrder class.

61
00:03:48.832 --> 00:03:54.674
The Items class is a wrapper class for the list of item objects.

62
00:03:54.674 --> 00:03:55.862
Remember that earlier,

63
00:03:55.862 --> 00:03:59.650
we used the XmlElementWrapper annotation to avoid the

64
00:03:59.650 --> 00:04:03.291
need for a wrapper class like this.

65
00:04:03.291 --> 00:04:03.668
Unfortunately,

66
00:04:03.668 --> 00:04:08.147
the xjc tool does not generate a field with an XmlElementWrapper

67
00:04:08.147 --> 00:04:13.079
annotation; it generates a wrapper class instead.

68
00:04:13.079 --> 00:04:16.308
Next, let's check out class Item.

69
00:04:16.308 --> 00:04:18.999
Look at the comment field.

70
00:04:18.999 --> 00:04:23.168
The type of this field is JAXBElement of String,

71
00:04:23.168 --> 00:04:28.931
not just String, and it's annotated with an XmlElementRef annotation.

72
00:04:28.931 --> 00:04:33.869
Why did xjc generate this field with a JAXBElement wrapper?

73
00:04:33.869 --> 00:04:36.163
It's because in the XSD,

74
00:04:36.163 --> 00:04:40.793
the comment element in the item complexType has both

75
00:04:40.793 --> 00:04:42.920
minOccurs=0 and nillable=true.

76
00:04:42.920 --> 00:04:46.787
Remember that in a previous module,

77
00:04:46.787 --> 00:04:50.328
we wanted to be able to know whether an element was

78
00:04:50.328 --> 00:04:56.250
not present at all in the XML, or whether it was explicitly set to nil.

79
00:04:56.250 --> 00:05:01.730
We did that by making the field a JAXBElement of String instead of a String,

80
00:05:01.730 --> 00:05:08.344
and creating an ObjectFactory class with a factory method for the JAXBElement.

81
00:05:08.344 --> 00:05:12.102
Now xjc does that automatically for us.

82
00:05:12.102 --> 00:05:14.672
Besides the domain model classes,

83
00:05:14.672 --> 00:05:20.169
it has also generated an ObjectFactory class with a number of factory methods,

84
00:05:20.169 --> 00:05:24.861
one of which is for the comment field of an item.

85
00:05:24.861 --> 00:05:27.426
There's one last topic to discuss.

86
00:05:27.426 --> 00:05:29.964
Remember that in a previous module,

87
00:05:29.964 --> 00:05:35.326
I mentioned that it's more convenient if the root element is defined in

88
00:05:35.326 --> 00:05:40.538
the XSD with an anonymous type rather than a name type.

89
00:05:40.538 --> 00:05:42.979
I will now show you why.

90
00:05:42.979 --> 00:05:46.815
Let's change the XSD slightly and move the anonymous

91
00:05:46.815 --> 00:05:50.892
complexType definition of the PurchaseOrder element outside

92
00:05:50.892 --> 00:05:56.027
of the element declaration itself, and make it a named complexType,

93
00:05:56.027 --> 00:06:00.296
and then run xjc again and see what happens.

94
00:06:00.296 --> 00:06:03.044
If you now look at the PurchaseOrder class again,

95
00:06:03.044 --> 00:06:08.605
you'll see that it no longer has an XmlRootElement annotation.

96
00:06:08.605 --> 00:06:12.657
This means that when you want to marshal or unmarshal a PurchaseOrder object,

97
00:06:12.657 --> 00:06:17.797
you'll have to wrap or unwrap it in a JAXBElement yourself.

98
00:06:17.797 --> 00:06:22.870
Why does xjc now omit the XmlRootElement annotation?

99
00:06:22.870 --> 00:06:27.156
Seems the complexType PurchaseOrder is now a name type.

100
00:06:27.156 --> 00:06:31.571
It could potentially be reused in the XSD for other elements

101
00:06:31.571 --> 00:06:35.540
besides the globally defined PurchaseOrder element.

102
00:06:35.540 --> 00:06:40.273
Even though in this XSD it's only used for the global PurchaseOrder element,

103
00:06:40.273 --> 00:06:44.617
it could also be used for elements that are not globally defined,

104
00:06:44.617 --> 00:06:50.239
which should not have an XmlRootElement on the class that represents their type.

105
00:06:50.239 --> 00:06:54.921
So because the PurchaseOrder type could now possibly be used

106
00:06:54.921 --> 00:07:04.000
for something else than a root element, xjc leaves out the XmlRootElement annotation.

