WEBVTT
1
00:00:02.064 --> 00:00:06.504
Let's take a look at how we can create a simple web service

2
00:00:06.504 --> 00:00:10.815
using JAX-WS and what role JAXB plays in this.

3
00:00:10.815 --> 00:00:13.833
We are going to take our purchaseOrder domain model and

4
00:00:13.833 --> 00:00:16.699
create a purchase order web service around it.

5
00:00:16.699 --> 00:00:21.205
The web service will be a simple class that can

6
00:00:21.205 --> 00:00:24.011
store and receive purchase orders.

7
00:00:24.011 --> 00:00:28.379
It will have a few operations to get the list of purchase orders,

8
00:00:28.379 --> 00:00:33.419
to get a specific order, and to add and delete a purchase order.

9
00:00:33.419 --> 00:00:38.587
To keep it simple, it will just keep the purchase orders in memory.

10
00:00:38.587 --> 00:00:46.797
Let's take a look at example ps-jaxb-34-jaxws-server.

11
00:00:46.797 --> 00:00:50.888
We start with our purchaseOrder domain model classes.

12
00:00:50.888 --> 00:00:54.486
Let's add a class named PurchaseOrderWebService in which

13
00:00:54.486 --> 00:00:57.074
we will implement our web service.

14
00:00:57.074 --> 00:01:02.696
Let's start with adding a member variable of purchaseOrders to this class,

15
00:01:02.696 --> 00:01:05.366
which stores the purchase orders.

16
00:01:05.366 --> 00:01:10.214
It's a map which stores purchase orders by their IDs.

17
00:01:10.214 --> 00:01:13.529
Now let's add some simple methods.

18
00:01:13.529 --> 00:01:19.120
The getOrders method just returns a list with all the purchase orders.

19
00:01:19.120 --> 00:01:23.743
The getOrder method looks up a purchase order by ID in the map,

20
00:01:23.743 --> 00:01:28.877
and then returns the order that it has found or throws an illegal argument

21
00:01:28.877 --> 00:01:33.225
exception if there is no order with the specified ID.

22
00:01:33.225 --> 00:01:37.792
The addOrder method generates a new ID for the order,

23
00:01:37.792 --> 00:01:42.656
puts it in a map, and then returns the generated ID.

24
00:01:42.656 --> 00:01:48.457
The deleteOrder method deletes the order with the specified ID from the map.

25
00:01:48.457 --> 00:01:52.633
Now we have a regular class with the functionality we need,

26
00:01:52.633 --> 00:01:59.321
and the next step is to use JAX-WS to make a web service out of this class.

27
00:01:59.321 --> 00:02:01.187
This is actually very easy.

28
00:02:01.187 --> 00:02:06.260
All we need to do is put a WebService annotation on the class.

29
00:02:06.260 --> 00:02:11.404
Now we, of course, need a way to run our web service.

30
00:02:11.404 --> 00:02:15.491
You can run it by deploying it in a Java EE

31
00:02:15.491 --> 00:02:17.408
application service such as GlassFish,

32
00:02:17.408 --> 00:02:23.663
but there's also an easier way which is good enough for this demo and which

33
00:02:23.663 --> 00:02:28.727
doesn't require us to install and set up an application server.

34
00:02:28.727 --> 00:02:32.579
Let's add a main method to this class.

35
00:02:32.579 --> 00:02:37.415
JAX-WS provides a class named Endpoint, which has a publish method,

36
00:02:37.415 --> 00:02:45.485
which we can use to start a small HTTP server that will provide our web service.

37
00:02:45.485 --> 00:02:49.666
We have to pass this method the URL on which we want our web

38
00:02:49.666 --> 00:02:53.274
service to be available and the instance of the class that

39
00:02:53.274 --> 00:02:56.371
provides the implementation of the web service.

40
00:02:56.371 --> 00:02:59.292
That's all we need to do.

41
00:02:59.292 --> 00:03:04.554
As you see, JAX-WS makes it super easy to create a web service,

42
00:03:04.554 --> 00:03:08.524
and you don't even need an application server to run it.

43
00:03:08.524 --> 00:03:13.850
I can just run this main method, and our web service is up and running.

44
00:03:13.850 --> 00:03:15.130
I will say, however,

45
00:03:15.130 --> 00:03:19.624
that if you are going to create web services for a real project,

46
00:03:19.624 --> 00:03:25.660
you will most likely want to deploy them in a Java EE application server.

47
00:03:25.660 --> 00:03:30.800
The HTTP server that the publish method of class Endpoint runs is

48
00:03:30.800 --> 00:03:36.042
just a very simple little server which isn't as robust as a real

49
00:03:36.042 --> 00:03:40.284
application server and which doesn't provide important features

50
00:03:40.284 --> 00:03:41.972
for security and management.

51
00:03:41.972 --> 00:03:47.379
One of the things that our little web service provides is a WSDL

52
00:03:47.379 --> 00:03:51.090
that describes the operations that you can call.

53
00:03:51.090 --> 00:03:54.636
Let's take a look at how we can see the WSDL.

54
00:03:54.636 --> 00:03:56.368
When the web service is running,

55
00:03:56.368 --> 00:04:01.128
I can use my browser to go to the following URL to see the WSDL.

56
00:04:01.128 --> 00:04:05.332
I'm not going to go through all the details of the WSDL,

57
00:04:05.332 --> 00:04:07.314
but if you look through it,

58
00:04:07.314 --> 00:04:11.318
you will see that there are messages and operations that correspond

59
00:04:11.318 --> 00:04:15.254
to the four methods of our web service class.

60
00:04:15.254 --> 00:04:16.695
Before we continue,

61
00:04:16.695 --> 00:04:21.081
I'll elaborate the JAX-WS annotations on class

62
00:04:21.081 --> 00:04:24.025
PurchaseOrderWebService a bit more.

63
00:04:24.025 --> 00:04:27.545
Since this is not a detailed course about web services,

64
00:04:27.545 --> 00:04:30.250
I won't explain the annotations in detail,

65
00:04:30.250 --> 00:04:34.534
but I've added these annotations to customize the names of

66
00:04:34.534 --> 00:04:38.185
elements in the messages of our web service.

67
00:04:38.185 --> 00:04:42.000
Let's restart it and look at the WSDL again.

68
00:04:42.000 --> 00:04:46.591
You'll see that at the top it's referring to an XSD.

69
00:04:46.591 --> 00:04:49.556
Let's take a look at that XSD.

70
00:04:49.556 --> 00:04:53.425
This XSD describes the body of the SOAP messages

71
00:04:53.425 --> 00:04:56.137
that our web service works with.

72
00:04:56.137 --> 00:05:00.416
It defines a number of XML elements for the request and response

73
00:05:00.416 --> 00:05:03.551
messages for the operations of the web service,

74
00:05:03.551 --> 00:05:06.999
and also for our purchaseOrder domain model classes

75
00:05:06.999 --> 00:05:12.224
exactly the same as the XSD that we've used in many of

76
00:05:12.224 --> 00:05:14.545
the other examples of this course.

77
00:05:14.545 --> 00:05:21.120
JAX-WS has used JAXB to generate the schema from our domain model classes.

78
00:05:21.120 --> 00:05:34.000
As you see, JAX-WS makes it very easy to get an XML web service up and running. The next step is to write a client that calls the web service.

