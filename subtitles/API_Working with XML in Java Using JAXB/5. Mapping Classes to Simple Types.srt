1
00:00:01,907 --> 00:00:05,623
Let's look at two more annotations that have to do with how fields

2
00:00:05,623 --> 00:00:10,585
and classes are mapped to XML schema simple types.

3
00:00:10,585 --> 00:00:15,421
JAXB maps Java primitive types and a number of well-known standard

4
00:00:15,421 --> 00:00:20,948
classes to matching built-in simple types of XML schema.

5
00:00:20,948 --> 00:00:24,777
Sometimes you might want to map one of these types to a different

6
00:00:24,777 --> 00:00:28,807
simple type than what JAXB does by default.

7
00:00:28,807 --> 00:00:33,185
That's what the XmlSchemaType annotation is for.

8
00:00:33,185 --> 00:00:36,820
It's also possible that one of your own domain model classes

9
00:00:36,820 --> 00:00:41,231
really represents a value type and that you want to map it

10
00:00:41,231 --> 00:00:43,457
to an XML schema simple type.

11
00:00:43,457 --> 00:00:47,377
You can do that with the XmlValue annotation.

12
00:00:47,377 --> 00:00:50,115
To see exactly how to use these two annotations,

13
00:00:50,115 --> 00:00:59,357
take a look at the next example, ps-jaxb-06-anno-simpletypes.

14
00:00:59,357 --> 00:01:02,340
First, the XmlSchemaType annotation.

15
00:01:02,340 --> 00:01:05,323
In the previous examples,

16
00:01:05,323 --> 00:01:08,682
we've added an orderDate field to class PurchaseOrder

17
00:01:08,682 --> 00:01:11,172
that was mapped to an XmlAttribute.

18
00:01:11,172 --> 00:01:15,699
If you've looked closely at the output of the previous examples,

19
00:01:15,699 --> 00:01:19,637
you saw that the value of the purchaseOrder attribute

20
00:01:19,637 --> 00:01:25,671
is a timestamp in ISO 8601 format, containing a date,

21
00:01:25,671 --> 00:01:28,326
a time, and a time zone offset.

22
00:01:28,326 --> 00:01:32,789
It's a timestamp rather than just a date because class java.

23
00:01:32,789 --> 00:01:33,241
util.

24
00:01:33,241 --> 00:01:38,607
Date is mapped to the built-in XML schema type, dateTime, by default.

25
00:01:38,607 --> 00:01:43,270
Suppose that we would want to map it to the

26
00:01:43,270 --> 00:01:46,913
XmlSchemaType date instead of dateTime.

27
00:01:46,913 --> 00:01:51,673
We can do that by using the XmlSchemaType annotation.

28
00:01:51,673 --> 00:01:53,931
This is very easy to do.

29
00:01:53,931 --> 00:01:56,941
We just put this annotation on the field.

30
00:01:56,941 --> 00:01:59,426
With the name attribute of the annotation,

31
00:01:59,426 --> 00:02:03,452
we specify the XmlSchemaType to use for this field.

32
00:02:03,452 --> 00:02:06,907
In this case, it's the type date.

33
00:02:06,907 --> 00:02:08,982
When we now run the application,

34
00:02:08,982 --> 00:02:12,876
we see that the attribute indeed contains just a date.

35
00:02:12,876 --> 00:02:17,874
It still has a time zone offset, but not a time.

36
00:02:17,874 --> 00:02:21,212
Suppose that we want to always map fields of type java.

37
00:02:21,212 --> 00:02:21,516
util.

38
00:02:21,516 --> 00:02:26,536
Date to the XML schema date type not just as one attribute.

39
00:02:26,536 --> 00:02:27,740
To do that,

40
00:02:27,740 --> 00:02:32,463
we can put the XmlSchemaType annotation on the package instead of

41
00:02:32,463 --> 00:02:36,346
on one specific field or JavaBeans property.

42
00:02:36,346 --> 00:02:40,260
When you put it on the package, you do have to specify one more attribute,

43
00:02:40,260 --> 00:02:43,830
which is the Java type that it should apply to.

44
00:02:43,830 --> 00:02:45,897
In this case, the type java.

45
00:02:45,897 --> 00:02:46,242
util.

46
00:02:46,242 --> 00:02:46,587
Date.

47
00:02:46,587 --> 00:02:50,624
It will then apply to all fields and properties of that

48
00:02:50,624 --> 00:02:53,383
type in the classes in the package.

49
00:02:53,383 --> 00:02:55,691
Next is the XmlValue annotation.

50
00:02:55,691 --> 00:03:03,260
This also has to do with XML schema simple types, but in a different way.

51
00:03:03,260 --> 00:03:07,134
Normally, Java classes map to complex types.

52
00:03:07,134 --> 00:03:12,217
A Java class maps to an XML element that contains other elements,

53
00:03:12,217 --> 00:03:15,251
one for each of the fields in the class.

54
00:03:15,251 --> 00:03:19,693
Sometimes, however, you have a class that represents a simple value,

55
00:03:19,693 --> 00:03:23,734
and you want it to be mapped to an XML element with just that value

56
00:03:23,734 --> 00:03:27,728
as its text content instead of an XML element,

57
00:03:27,728 --> 00:03:31,184
which contains another element, which contains a value.

58
00:03:31,184 --> 00:03:36,775
To show this, I've added a new class to the model, class country.

59
00:03:36,775 --> 00:03:41,834
It's used in class Address where the field country is now

60
00:03:41,834 --> 00:03:45,064
a Country object instead of a string.

61
00:03:45,064 --> 00:03:50,092
Class Country contains two fields: code and name.

62
00:03:50,092 --> 00:03:56,587
The field name has an XmlTransient annotation, so it's not mapped to the XML.

63
00:03:56,587 --> 00:03:58,290
When we run the application,

64
00:03:58,290 --> 00:04:01,930
we see that the addresses now contain a country element,

65
00:04:01,930 --> 00:04:06,756
which contains a code element, which contains the actual code value.

66
00:04:06,756 --> 00:04:12,516
Suppose that you want to get rid of the intermediate code element and have the

67
00:04:12,516 --> 00:04:16,554
country code directly as the value of the country element.

68
00:04:16,554 --> 00:04:21,051
We can do that by putting an XmlValue annotation on

69
00:04:21,051 --> 00:04:24,229
the code field in class Country.

70
00:04:24,229 --> 00:04:27,817
This will make class Country map to an XML schema

71
00:04:27,817 --> 00:04:30,600
simple type rather than a complex type.

72
00:04:30,600 --> 00:04:35,722
And the field code is what contains the value of the type.

73
00:04:35,722 --> 00:04:41,058
Note that there are some restrictions when you use the XmlValue annotation.

74
00:04:41,058 --> 00:04:42,634
When you use this annotation,

75
00:04:42,634 --> 00:04:47,613
you must use it on exactly one field or JavaBeans property in the class.

76
00:04:47,613 --> 00:04:51,962
That is because a simple type contains only one value.

77
00:04:51,962 --> 00:04:52,406
Also,

78
00:04:52,406 --> 00:04:58,002
you cannot have other fields or properties in the class that are

79
00:04:58,002 --> 00:05:00,930
implicitly or explicitly mapped to elements.

80
00:05:00,930 --> 00:05:05,387
This is because a simple type cannot have elements as its content,

81
00:05:05,387 --> 00:05:09,467
so the class that maps to a simple type must not

82
00:05:09,467 --> 00:05:11,692
have fields that map to elements.

83
00:05:11,692 --> 00:05:16,415
If I remove the XmlTransient annotation from the name field,

84
00:05:16,415 --> 00:05:20,538
then JAXB will try to map this field to an element,

85
00:05:20,538 --> 00:05:22,412
but this is not allowed.

86
00:05:22,412 --> 00:05:24,254
And if I run the application,

87
00:05:24,254 --> 00:05:29,219
I get an error message that tells me that the class cannot have an

88
00:05:29,219 --> 00:05:32,867
XmlElement and an XmlValue property at the same time.

89
00:05:32,867 --> 00:05:38,513
It is allowed to have fields that map to XML attributes in a class

90
00:05:38,513 --> 00:05:42,216
that has a field with an XmlValue annotation.

91
00:05:42,216 --> 00:05:43,098
For example,

92
00:05:43,098 --> 00:05:49,019
let's put the XmlValue annotation on the name field and put an XmlAttribute

93
00:05:49,019 --> 00:05:54,063
annotation on the code field and run the application again.

94
00:05:54,063 --> 00:05:57,031
The output now contains country elements that have the

95
00:05:57,031 --> 00:05:59,841
name of the country as the text content,

96
00:05:59,841 --> 00:06:04,122
but also with a code attribute that contains the country code.

97
00:06:04,122 --> 00:06:08,018
For those who know a lot about XML schema,

98
00:06:08,018 --> 00:06:12,694
I'll add that technically the simple type cannot have attributes.

99
00:06:12,694 --> 00:06:15,820
So what happens in this case is that the class doesn't

100
00:06:15,820 --> 00:06:26,000
really map to a simple type anymore, but to a complex type with simple content and an attribute declaration instead.

