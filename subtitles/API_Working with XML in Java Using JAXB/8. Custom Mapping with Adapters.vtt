WEBVTT
1
00:00:01.795 --> 00:00:03.124
As you have learned,

2
00:00:03.124 --> 00:00:06.864
there are many useful annotations that you can use to

3
00:00:06.864 --> 00:00:10.108
configure how JAXB maps classes, fields,

4
00:00:10.108 --> 00:00:12.271
and properties to XML.

5
00:00:12.271 --> 00:00:16.225
But sometimes you might want to map a field or property in a way

6
00:00:16.225 --> 00:00:20.543
that isn't possible with the standard annotations.

7
00:00:20.543 --> 00:00:23.836
Normally you pass a domain model object to the marshaller,

8
00:00:23.836 --> 00:00:29.927
and it will convert it to XML according to JAXB's mapping rules guided by the

9
00:00:29.927 --> 00:00:34.994
annotations that you added and vice versa for unmarshalling.

10
00:00:34.994 --> 00:00:37.806
You can do a lot with the annotations,

11
00:00:37.806 --> 00:00:43.351
but sometimes it's just not possible to get the mapping exactly as you want it.

12
00:00:43.351 --> 00:00:47.974
For such cases, you can write your own adapter class.

13
00:00:47.974 --> 00:00:52.046
The adapter class is called during marshaling to convert the field

14
00:00:52.046 --> 00:00:55.564
in the domain model object to a different object,

15
00:00:55.564 --> 00:00:59.720
which is marshaled instead of the field itself.

16
00:00:59.720 --> 00:01:02.695
During unmarshalling, the opposite happens.

17
00:01:02.695 --> 00:01:07.584
The XML is first unmarshalled into a temporary object,

18
00:01:07.584 --> 00:01:10.642
which the adapter then translates into the type of the

19
00:01:10.642 --> 00:01:12.759
field of the domain model class.

20
00:01:12.759 --> 00:01:19.886
Let's look at an example again, which shows you exactly how this works.

21
00:01:19.886 --> 00:01:25.177
Take a look at example ps-jaxb-11-anno-adapters.

22
00:01:25.177 --> 00:01:26.800
Before we look at the code,

23
00:01:26.800 --> 00:01:30.971
let's run the application and look at the output XML so that you

24
00:01:30.971 --> 00:01:34.987
understand what we are trying to achieve in this example.

25
00:01:34.987 --> 00:01:38.826
Look at how the items appear in the XML.

26
00:01:38.826 --> 00:01:45.109
There's an items element, which contains an item element for each of the items.

27
00:01:45.109 --> 00:01:48.497
Each item element has a productCode attribute,

28
00:01:48.497 --> 00:01:52.431
which contains the productCode and elements for the

29
00:01:52.431 --> 00:01:55.905
fields of the items as child elements.

30
00:01:55.905 --> 00:01:58.653
Now take a look at class PurchaseOrder.

31
00:01:58.653 --> 00:02:05.928
The items field is a map with strings as keys and item objects as values.

32
00:02:05.928 --> 00:02:11.399
The keys in this map are the product codes just like in the previous example.

33
00:02:11.399 --> 00:02:16.022
There's an XmlJavaTypeAdapter annotation on this field,

34
00:02:16.022 --> 00:02:19.495
which specifies that an adapter should be used for

35
00:02:19.495 --> 00:02:21.627
marshalling and unmarshalling this field.

36
00:02:21.627 --> 00:02:27.110
Let's take a look at the adapter class, which is called ItemsAdapter.

37
00:02:27.110 --> 00:02:32.734
This class is a subclass of the abstract class XmlAdapter.

38
00:02:32.734 --> 00:02:38.570
Class XmlAdapter expects two type arguments: the type of the

39
00:02:38.570 --> 00:02:42.092
object that is actually marshalled and unmarshalled and the

40
00:02:42.092 --> 00:02:45.461
type of the field in the domain model.

41
00:02:45.461 --> 00:02:46.359
In this case,

42
00:02:46.359 --> 00:02:49.953
the field in the domain model is a map with strings as

43
00:02:49.953 --> 00:02:52.281
keys and item objects as values.

44
00:02:52.281 --> 00:02:57.006
The object that the map is going to be translated to

45
00:02:57.006 --> 00:03:00.247
and from is of type ItemsWrapper.

46
00:03:00.247 --> 00:03:03.595
We'll take a look at that class in a moment.

47
00:03:03.595 --> 00:03:07.461
Let's first look at the implementation of the adapter.

48
00:03:07.461 --> 00:03:11.629
The adapter must implement two abstract methods that

49
00:03:11.629 --> 00:03:14.234
it inherits from class XmlAdapter.

50
00:03:14.234 --> 00:03:18.497
The Marshal method translates the field from the domain model,

51
00:03:18.497 --> 00:03:23.998
in this case the map with the items, into an ItemsWrapper object.

52
00:03:23.998 --> 00:03:26.223
The Unmarshal method does the opposite,

53
00:03:26.223 --> 00:03:31.100
so it translates an ItemsWrapper object back into a map that can

54
00:03:31.100 --> 00:03:34.493
input in the field in the PurchaseOrder class.

55
00:03:34.493 --> 00:03:38.783
I won't explain the implementation of the methods in detail.

56
00:03:38.783 --> 00:03:43.645
I've used the Java 8 Streams API here to keep it short.

57
00:03:43.645 --> 00:03:46.993
Take some time to study the code for yourself to

58
00:03:46.993 --> 00:03:49.149
discover exactly what's happening here.

59
00:03:49.149 --> 00:03:53.111
Let's take a look at the ItemsWrapper class.

60
00:03:53.111 --> 00:03:57.854
It will explain how we get the XML in the desired form.

61
00:03:57.854 --> 00:04:01.538
The ItemsWrapper class is a simple wrapper class

62
00:04:01.538 --> 00:04:04.762
with a list of item value objects.

63
00:04:04.762 --> 00:04:09.007
The getter method for its items property is annotated with an

64
00:04:09.007 --> 00:04:11.618
XmlElement annotation with the name item.

65
00:04:11.618 --> 00:04:16.545
This is to make it so that we get an element named

66
00:04:16.545 --> 00:04:19.176
item for each item in the list.

67
00:04:19.176 --> 00:04:21.685
Now look at class ItemValue.

68
00:04:21.685 --> 00:04:26.508
This class contains properties for the fields in the item and,

69
00:04:26.508 --> 00:04:29.816
in addition to that, a property named ProductCode,

70
00:04:29.816 --> 00:04:33.673
which is annotated with XmlAttribute.

71
00:04:33.673 --> 00:04:39.510
This is what produces the productCode attribute on each item element in the XML.

72
00:04:39.510 --> 00:04:46.425
Let's quickly summarize this so that you get a good overview of how this works.

73
00:04:46.425 --> 00:04:50.283
There's an items field in class PurchaseOrder.

74
00:04:50.283 --> 00:04:55.415
This causes the items element to be generated in the XML.

75
00:04:55.415 --> 00:04:58.026
When a purchaseOrder is marshalled,

76
00:04:58.026 --> 00:05:02.627
the ItemsAdapter's Marshal method is called to translate the

77
00:05:02.627 --> 00:05:05.643
items field to an ItemsWrapper object.

78
00:05:05.643 --> 00:05:09.023
That ItemsWrapper object is what is actually marshalled

79
00:05:09.023 --> 00:05:12.152
instead of the items field itself.

80
00:05:12.152 --> 00:05:18.806
The ItemsWrapper object has one property, which is a list of ItemValue objects.

81
00:05:18.806 --> 00:05:22.881
The property is annotated with the XmlElement annotation to specify

82
00:05:22.881 --> 00:05:28.159
that the name of the elements in the XML must be item.

83
00:05:28.159 --> 00:05:34.067
Each of the ItemValue objects is marshalled into an item element.

84
00:05:34.067 --> 00:05:37.662
Class ItemValue has a property productCode,

85
00:05:37.662 --> 00:05:41.965
which maps to an attribute on the item start tag.

86
00:05:41.965 --> 00:05:45.306
It also has the same properties as class Item,

87
00:05:45.306 --> 00:05:48.733
which appear as child elements of the item element.

88
00:05:48.733 --> 00:05:49.898
As you see,

89
00:05:49.898 --> 00:06:00.000
adapters give you a lot of flexibility to map fields into whatever structure in XML you need.

