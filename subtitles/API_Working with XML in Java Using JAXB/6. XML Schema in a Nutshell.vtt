WEBVTT
1
00:00:01.896 --> 00:00:04.477
JAXB makes use of XML schema,

2
00:00:04.477 --> 00:00:08.454
so it's important that you understand what XML schema is.

3
00:00:08.454 --> 00:00:14.933
Let's take a quick look at the most important concepts of XML schema.

4
00:00:14.933 --> 00:00:20.339
XML, unlike like HTML, does not have a fixed set of tags.

5
00:00:20.339 --> 00:00:23.464
When you're going to use XML for your application,

6
00:00:23.464 --> 00:00:27.250
you'll be inventing your own set of tags that have

7
00:00:27.250 --> 00:00:29.995
meaning in the context of your application.

8
00:00:29.995 --> 00:00:34.637
An XML schema describes the data model of an XML file,

9
00:00:34.637 --> 00:00:39.330
what elements can appear in the XML, what the content of these elements can be,

10
00:00:39.330 --> 00:00:41.875
and what attributes they can have.

11
00:00:41.875 --> 00:00:45.613
Remember the XML document from the previous clip.

12
00:00:45.613 --> 00:00:47.385
To be a valid purchaseOrder,

13
00:00:47.385 --> 00:00:50.462
the XML document must have a certain structure

14
00:00:50.462 --> 00:00:53.448
that's defined by your application.

15
00:00:53.448 --> 00:00:54.485
For example,

16
00:00:54.485 --> 00:01:00.148
the purchaseOrder element must contain and items element that contains one

17
00:01:00.148 --> 00:01:04.696
or more item elements and exactly one customer element,

18
00:01:04.696 --> 00:01:05.201
etc.

19
00:01:05.201 --> 00:01:07.785
XML processing tools can use the schema,

20
00:01:07.785 --> 00:01:13.948
for example, to check if an XML document is valid according to the schema.

21
00:01:13.948 --> 00:01:18.206
There are different standard schema languages for XML.

22
00:01:18.206 --> 00:01:23.158
The original schema language, which was invented together with XML itself,

23
00:01:23.158 --> 00:01:28.489
is DTD, which stands for Document Type Definition,

24
00:01:28.489 --> 00:01:31.155
but DTD has limitations.

25
00:01:31.155 --> 00:01:31.994
For example,

26
00:01:31.994 --> 00:01:35.828
it doesn't support namespaces and it doesn't support datatypes

27
00:01:35.828 --> 00:01:39.166
for the content of elements and attributes.

28
00:01:39.166 --> 00:01:40.771
So there is, for example,

29
00:01:40.771 --> 00:01:44.467
no way to specify in a DTD that a certain element

30
00:01:44.467 --> 00:01:47.871
should contain a number or a date.

31
00:01:47.871 --> 00:01:52.953
The most widely used standard schema language is XML schema.

32
00:01:52.953 --> 00:01:54.998
If you're working with JAXB,

33
00:01:54.998 --> 00:01:58.526
it's important to understand the XML schema because

34
00:01:58.526 --> 00:02:01.753
JAXB heavily makes use of it.

35
00:02:01.753 --> 00:02:08.265
XML schema files are XML files themselves and have the extension XSD,

36
00:02:08.265 --> 00:02:11.151
which stands for XML Schema Definition.

37
00:02:11.151 --> 00:02:15.146
If you want to know everything about XML schema,

38
00:02:15.146 --> 00:02:19.221
you can look up the specifications on the website of

39
00:02:19.221 --> 00:02:22.358
the World Wide Web Consortium, the W3C,

40
00:02:22.358 --> 00:02:26.592
but be aware that the official specification is a

41
00:02:26.592 --> 00:02:31.377
very dry and technical document, which is hard to read.

42
00:02:31.377 --> 00:02:36.647
Fortunately, the W3C also has a more easy-to- read tutorial,

43
00:02:36.647 --> 00:02:39.686
the XML Schema Primer.

44
00:02:39.686 --> 00:02:43.077
Let's go back to the IDE again and look at what the most

45
00:02:43.077 --> 00:02:47.099
important concepts of XML schema are.

46
00:02:47.099 --> 00:02:51.509
Here is an example XSD file which defines a small

47
00:02:51.509 --> 00:02:53.714
domain model for purchase orders.

48
00:02:53.714 --> 00:02:57.935
The tags that can be used in XML schema are defined in the

49
00:02:57.935 --> 00:03:01.457
standard namespace that is defined by this URI.

50
00:03:01.457 --> 00:03:07.347
We are using the namespace prefix xs here for the XML schema tags.

51
00:03:07.347 --> 00:03:12.842
Note that you can, in principle, choose any prefix you like within your document,

52
00:03:12.842 --> 00:03:17.822
but xs is what is conventionally used for XSD files.

53
00:03:17.822 --> 00:03:21.151
The root element is an xs schema element.

54
00:03:21.151 --> 00:03:26.040
You can define a handful of different things at the root level.

55
00:03:26.040 --> 00:03:28.034
My IDE helps me here.

56
00:03:28.034 --> 00:03:33.383
If I type an opening angle bracket, it gives me a list of things I can choose.

57
00:03:33.383 --> 00:03:37.184
The most important things that it can define at root level are

58
00:03:37.184 --> 00:03:42.447
elements and attributes and simple and complex types.

59
00:03:42.447 --> 00:03:46.872
Let's take a look at the definition of the purchaseOrder element.

60
00:03:46.872 --> 00:03:49.652
This element has a complex type.

61
00:03:49.652 --> 00:03:53.822
There are two kinds of types in XML schema.

62
00:03:53.822 --> 00:03:55.437
There are simple types,

63
00:03:55.437 --> 00:03:59.476
which are for the text content of elements and attributes.

64
00:03:59.476 --> 00:04:02.814
We will take a look at those in a moment.

65
00:04:02.814 --> 00:04:08.233
Complex types are primarily for elements that can contain other nested elements.

66
00:04:08.233 --> 00:04:12.611
What we see here is that a purchaseOrder element must contain a

67
00:04:12.611 --> 00:04:16.411
sequence of three other elements: an items,

68
00:04:16.411 --> 00:04:19.669
a customer, and a comment element.

69
00:04:19.669 --> 00:04:21.815
Note that because it's a sequence,

70
00:04:21.815 --> 00:04:27.838
the elements must appear in the purchaseOrder element exactly in this order.

71
00:04:27.838 --> 00:04:32.437
If the XML would contain the customer element before the items element,

72
00:04:32.437 --> 00:04:35.043
for example, then that would be an error,

73
00:04:35.043 --> 00:04:37.530
and the XML would not be valid.

74
00:04:37.530 --> 00:04:42.418
The type of the purchaseOrder element is defined here on the spot,

75
00:04:42.418 --> 00:04:45.981
directly in the definition of the element itself.

76
00:04:45.981 --> 00:04:49.423
Another thing you can do is define the type separately,

77
00:04:49.423 --> 00:04:54.974
and then in the element definition, point to the definition of the type.

78
00:04:54.974 --> 00:04:59.447
That's what done here for the items and customer elements.

79
00:04:59.447 --> 00:05:03.963
The advantage of this is that it makes it possible to reuse types.

80
00:05:03.963 --> 00:05:07.537
So if you have multiple elements that have the same type,

81
00:05:07.537 --> 00:05:10.751
then you don't have to copy and paste the type definition,

82
00:05:10.751 --> 00:05:13.626
and it also makes the schema more readable.

83
00:05:13.626 --> 00:05:17.285
You can also define the element itself somewhere else,

84
00:05:17.285 --> 00:05:21.488
which is what I've done here with the comment element.

85
00:05:21.488 --> 00:05:26.928
Instead of a name attribute, it has a ref attribute and no type.

86
00:05:26.928 --> 00:05:30.558
The type is specified at the actual definition of the

87
00:05:30.558 --> 00:05:32.930
element somewhere else in the file.

88
00:05:32.930 --> 00:05:37.770
To indicate how often an element may appear in the XML,

89
00:05:37.770 --> 00:05:41.827
you can use the minOccurs and maxOccurs attributes.

90
00:05:41.827 --> 00:05:48.605
The comment element here has minOccurs set to 0, which means that it's optional.

91
00:05:48.605 --> 00:05:52.379
The defaults for minOccurs and maxOccurs is 1.

92
00:05:52.379 --> 00:05:58.076
So if you omit these attributes, then the element must appear exactly once.

93
00:05:58.076 --> 00:06:01.384
Finally in the definition of the purchaseOrder element,

94
00:06:01.384 --> 00:06:05.191
it's specified here that the purchaseOrder element

95
00:06:05.191 --> 00:06:07.910
must have an orderData attribute.

96
00:06:07.910 --> 00:06:10.556
The type of this attribute is xs:date,

97
00:06:10.556 --> 00:06:15.811
which is one of the built-in simple types of XML schema.

98
00:06:15.811 --> 00:06:23.335
Xs:date is a date in ISO 8601 format, which means that it's a year,

99
00:06:23.335 --> 00:06:26.080
month, and date separated by dashes.

100
00:06:26.080 --> 00:06:31.399
The type of the items element in a purchase order is Items.

101
00:06:31.399 --> 00:06:37.169
This type is a complex type, which is defined at the root level of the XSD.

102
00:06:37.169 --> 00:06:42.276
It contains a sequence of at least 0 item elements.

103
00:06:42.276 --> 00:06:46.185
Note that maxOccurs is set to unbounded here,

104
00:06:46.185 --> 00:06:51.251
which is a special value to indicate that there's no limit to the

105
00:06:51.251 --> 00:06:55.366
number of times this element may appear in the XML.

106
00:06:55.366 --> 00:07:00.315
The type of the item element is defined in-line here.

107
00:07:00.315 --> 00:07:05.590
It's, again, a complex type that consists of a sequence of a few other elements,

108
00:07:05.590 --> 00:07:09.350
productName, quantity, price, and comment.

109
00:07:09.350 --> 00:07:12.353
The productName is just a string.

110
00:07:12.353 --> 00:07:17.380
Note that xs:string is another one of the built-in simple types.

111
00:07:17.380 --> 00:07:22.801
The quantity element has a slightly more elaborate simple type.

112
00:07:22.801 --> 00:07:26.391
It's based on xs:positiveInteger, which is,

113
00:07:26.391 --> 00:07:28.484
again, one of the built-in simple types,

114
00:07:28.484 --> 00:07:31.452
and it has a restriction added to it.

115
00:07:31.452 --> 00:07:34.553
The value must be less than 100.

116
00:07:34.553 --> 00:07:39.080
Then there is the price element, which is of type xs:decimal,

117
00:07:39.080 --> 00:07:41.106
which, as you can guess,

118
00:07:41.106 --> 00:07:45.544
is a built-in simple type for numbers with a decimal digit.

119
00:07:45.544 --> 00:07:48.452
Finally, we allow an item to have a comment,

120
00:07:48.452 --> 00:07:51.267
which is represented by the comment element,

121
00:07:51.267 --> 00:07:54.822
which we used before in the purchaseOrder.

122
00:07:54.822 --> 00:07:58.460
The Customer complexType has the name of the customer,

123
00:07:58.460 --> 00:08:03.001
the shipping and buildingAddress and a loyalty element.

124
00:08:03.001 --> 00:08:07.140
Let's skip the Address type and look at the Loyalty type.

125
00:08:07.140 --> 00:08:11.040
This is something that looks like a Java enum.

126
00:08:11.040 --> 00:08:16.035
It's a simple type based on xs:string that has

127
00:08:16.035 --> 00:08:18.255
three possible enumeration values.

128
00:08:18.255 --> 00:08:21.090
Finally, there is the definition of the comment element,

129
00:08:21.090 --> 00:08:26.193
which is a string with a maximum length of 1000 characters.

130
00:08:26.193 --> 00:08:30.301
That's our simple XML schema for purchaseOrders.

131
00:08:30.301 --> 00:08:33.582
There is, of course, a lot more to learn about XML schema,

132
00:08:33.582 --> 00:08:36.825
but we won't go into all of the details here.

133
00:08:36.825 --> 00:08:39.947
If you want to learn more about XML schema,

134
00:08:39.947 --> 00:08:49.000
the XML Schema Primer from the World Wide Web Consortium that I mentioned before is a good place to start.

