1
00:00:01,821 --> 00:00:06,631
JAXB provides a number of annotations to specify how you want classes,

2
00:00:06,631 --> 00:00:11,988
fields, and properties to be mapped to XML elements and attributes.

3
00:00:11,988 --> 00:00:12,741
In this clip,

4
00:00:12,741 --> 00:00:15,501
you will learn what you can do with the following five

5
00:00:15,501 --> 00:00:18,113
annotations and how you can use them.

6
00:00:18,113 --> 00:00:22,700
To show you exactly how to use the annotations,

7
00:00:22,700 --> 00:00:28,625
there is an example named ps-jaxb-04-anno-basic.

8
00:00:28,625 --> 00:00:32,650
Let's open that example in the IDE.

9
00:00:32,650 --> 00:00:38,534
The first annotation we'll look at is the XmlRootElement annotation.

10
00:00:38,534 --> 00:00:43,217
You can use this annotation on classes and on enums.

11
00:00:43,217 --> 00:00:45,410
What it does is very simple.

12
00:00:45,410 --> 00:00:50,338
It tells JAXB that the class or enum maps to an XML element.

13
00:00:50,338 --> 00:00:52,340
In terms of XML schema,

14
00:00:52,340 --> 00:00:57,665
it maps it to an element declaration at the root level of the schema,

15
00:00:57,665 --> 00:01:01,620
which means that the element could potentially be used as

16
00:01:01,620 --> 00:01:04,469
the root element of an XML document.

17
00:01:04,469 --> 00:01:08,744
The obvious class to put this annotation on in our

18
00:01:08,744 --> 00:01:11,309
domain model is the purchaseOrder class.

19
00:01:11,309 --> 00:01:13,155
When you use this annotation,

20
00:01:13,155 --> 00:01:16,678
then the code to marshal and unmarshal a purchase

21
00:01:16,678 --> 00:01:20,099
order can be made slightly simpler.

22
00:01:20,099 --> 00:01:23,366
Remember that in the marshalling example in the previous

23
00:01:23,366 --> 00:01:28,014
module we had to create a JAXBElement wrapper that we had

24
00:01:28,014 --> 00:01:30,238
to pass to the marshaller.

25
00:01:30,238 --> 00:01:34,297
When the purchaseOrder class is annotated with XmlRootElement,

26
00:01:34,297 --> 00:01:36,141
this isn't necessary anymore.

27
00:01:36,141 --> 00:01:41,014
We can pass the purchaseOrder object to the marshaller directly.

28
00:01:41,014 --> 00:01:42,659
Likewise when unmarshalling,

29
00:01:42,659 --> 00:01:48,174
we can now use a version of the Unmarshal method that will directly

30
00:01:48,174 --> 00:01:52,916
return a purchaseOrder object instead of a JAXB element from which we

31
00:01:52,916 --> 00:01:55,694
have to get the purchaseOrder object.

32
00:01:55,694 --> 00:02:00,512
You can optionally specify a name attribute with the XmlRootElement

33
00:02:00,512 --> 00:02:06,018
annotation if you want the XML element to have a different name than the

34
00:02:06,018 --> 00:02:10,513
name that JAXB derives from the class name automatically.

35
00:02:10,513 --> 00:02:15,821
The next annotation is the XmlAccessorType annotation.

36
00:02:15,821 --> 00:02:17,417
In the previous clip,

37
00:02:17,417 --> 00:02:22,500
I explained that JAXB can either work directly with the fields in the

38
00:02:22,500 --> 00:02:26,658
domain model classes or that it can treat them as JavaBeans.

39
00:02:26,658 --> 00:02:30,238
By default, JAXB will automatically map public fields,

40
00:02:30,238 --> 00:02:33,225
as well as properties, in your classes.

41
00:02:33,225 --> 00:02:37,784
You can change this behavior by using the XmlAccessorType annotation.

42
00:02:37,784 --> 00:02:44,389
You can put this annotation either on a class or on a package in

43
00:02:44,389 --> 00:02:48,227
which case it applies to all classes in the package.

44
00:02:48,227 --> 00:02:49,657
In the example,

45
00:02:49,657 --> 00:02:53,518
I've used the XmlAccessorType annotation on the package

46
00:02:53,518 --> 00:02:56,657
that contains the domain model classes.

47
00:02:56,657 --> 00:03:00,827
To put an annotation on the package, you need to create a package- info.

48
00:03:00,827 --> 00:03:05,992
java file in the directory that corresponds to the package.

49
00:03:05,992 --> 00:03:11,777
You can then write the annotation above the package statement in that file.

50
00:03:11,777 --> 00:03:15,983
There are four access types that you can choose from.

51
00:03:15,983 --> 00:03:22,460
NONE, which means that JAXB will not automatically map any fields or properties.

52
00:03:22,460 --> 00:03:23,628
With this setting,

53
00:03:23,628 --> 00:03:28,332
you need to explicitly annotate all fields or properties that you want

54
00:03:28,332 --> 00:03:33,452
to have mapped by JAXB using the XmlElement and XmlAttribute and other

55
00:03:33,452 --> 00:03:37,333
annotations that we'll look at in a moment.

56
00:03:37,333 --> 00:03:37,922
FIELD,

57
00:03:37,922 --> 00:03:42,632
which means that JAXB will automatically map all

58
00:03:42,632 --> 00:03:44,987
nonstatic and nontransient fields.

59
00:03:44,987 --> 00:03:50,043
It will not automatically map JavaBeans properties with this setting.

60
00:03:50,043 --> 00:03:55,731
PROPERTY, which means that JAXB will automatically map all properties.

61
00:03:55,731 --> 00:03:56,645
With this setting,

62
00:03:56,645 --> 00:04:01,389
it will look for getter and setter methods and not automatically map fields.

63
00:04:01,389 --> 00:04:02,523
PUBLIC MEMBER,

64
00:04:02,523 --> 00:04:07,215
which means that JAXB will automatically map all

65
00:04:07,215 --> 00:04:10,935
public fields and also all properties.

66
00:04:10,935 --> 00:04:14,799
You could argue how useful it is that it looks at public

67
00:04:14,799 --> 00:04:18,352
fields because making fields public is regarded bad

68
00:04:18,352 --> 00:04:20,615
practice by many Java developers,

69
00:04:20,615 --> 00:04:25,196
and I would not recommend that you make your fields public.

70
00:04:25,196 --> 00:04:30,086
Nevertheless, this is the default way that JAXB looks at your classes.

71
00:04:30,086 --> 00:04:34,022
Note that the AccessorType option only determines what

72
00:04:34,022 --> 00:04:36,645
is automatically mapped by JAXB.

73
00:04:36,645 --> 00:04:41,153
Fields and properties that are explicitly annotated with,

74
00:04:41,153 --> 00:04:42,382
for example,

75
00:04:42,382 --> 00:04:47,338
an XmlElement or XmlAttribute annotation are mapped in addition

76
00:04:47,338 --> 00:04:51,332
to what you chose to be mapped automatically.

77
00:04:51,332 --> 00:04:55,713
Which AccessorType option you should choose depends on the style that

78
00:04:55,713 --> 00:04:59,964
you choose for designing your domain model classes.

79
00:04:59,964 --> 00:05:03,942
To explicitly map a field or property to an XML element,

80
00:05:03,942 --> 00:05:07,890
you can annotate it with the XmlElement annotation.

81
00:05:07,890 --> 00:05:18,620
You can also use this annotation to customize the name of the XML For example,

82
00:05:18,620 --> 00:05:20,637
in the Customer class,

83
00:05:20,637 --> 00:05:24,514
I've added XmlElement annotations to the shipping address and

84
00:05:24,514 --> 00:05:28,994
billingAddress fields because I want the names of the elements in

85
00:05:28,994 --> 00:05:32,590
XML to be different than the field names.

86
00:05:32,590 --> 00:05:33,600
In some cases,

87
00:05:33,600 --> 00:05:36,629
you might want to explicitly exclude a field or

88
00:05:36,629 --> 00:05:39,844
property from being mapped to XML.

89
00:05:39,844 --> 00:05:44,667
To do that, you can use the XmlTransient annotation.

90
00:05:44,667 --> 00:05:48,009
To show you an example, let's do the following.

91
00:05:48,009 --> 00:05:52,021
Move the XmlElement annotation from the field

92
00:05:52,021 --> 00:05:54,887
shippingAddress to the getShippingAddress method.

93
00:05:54,887 --> 00:05:58,424
We've now annotated the shippingAddress JavaBeans property

94
00:05:58,424 --> 00:06:00,914
instead of the shippingAddress field.

95
00:06:00,914 --> 00:06:03,874
When you now run the application,

96
00:06:03,874 --> 00:06:07,347
you'll get an error that says that the class has two

97
00:06:07,347 --> 00:06:08,429
properties named shippingAddress,

98
00:06:08,429 --> 00:06:12,688
and the error message refers to both the getShippingAddress

99
00:06:12,688 --> 00:06:16,004
method and the shippingAddress field.

100
00:06:16,004 --> 00:06:18,264
Why does this happen?

101
00:06:18,264 --> 00:06:23,870
Remember that we've put an XmlAccessorType annotation on the package where

102
00:06:23,870 --> 00:06:27,597
we've specified that JAXB should automatically map fields.

103
00:06:27,597 --> 00:06:33,759
Because of this, JAXB is going to pick up the shippingAddress field,

104
00:06:33,759 --> 00:06:38,703
but we've also explicitly annotated the shippingAddress property by

105
00:06:38,703 --> 00:06:43,195
putting an XmlElement annotation on the getter method.

106
00:06:43,195 --> 00:06:46,181
Both the field shippingAddress and the property

107
00:06:46,181 --> 00:06:49,033
shippingAddress are being mapped to the XML,

108
00:06:49,033 --> 00:06:52,631
and they clash because they have the same name.

109
00:06:52,631 --> 00:06:57,943
One way we can solve this problem is by putting an XmlTransient annotation on

110
00:06:57,943 --> 00:07:03,156
the field so that the field will be excluded from mapping.

111
00:07:03,156 --> 00:07:07,883
One thing that we haven't yet seen is how to map a field or property

112
00:07:07,883 --> 00:07:12,619
to an XmlAttribute rather than to an XmlElement.

113
00:07:12,619 --> 00:07:18,347
You can do this by putting an XmlAttribute annotation on the field or property.

114
00:07:18,347 --> 00:07:20,078
In class PurchaseOrder,

115
00:07:20,078 --> 00:07:25,273
I've added a field orderDate with an XmlAttribute annotation.

116
00:07:25,273 --> 00:07:29,248
This will cause an orderDate attribute to be generated in the

117
00:07:29,248 --> 00:07:37,000
start tag of the purchaseOrder element as you can see in the output when I run the application.

