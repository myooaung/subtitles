1
00:00:02,060 --> 00:00:06,211
Let's take a look at what exactly the schema-first approach is,

2
00:00:06,211 --> 00:00:11,054
how it works, and how it compares to the code-first approach.

3
00:00:11,054 --> 00:00:14,670
JAXB offers two ways to work with XML.

4
00:00:14,670 --> 00:00:19,255
In the previous modules, we've been using the code-first approach.

5
00:00:19,255 --> 00:00:24,016
We defined our domain model by writing a number of Java classes,

6
00:00:24,016 --> 00:00:27,919
and then we generated an XML Schema from those Java classes.

7
00:00:27,919 --> 00:00:33,018
You can also do it the other way around by defining the domain

8
00:00:33,018 --> 00:00:38,376
model in XML Schema and then generating Java source files for the

9
00:00:38,376 --> 00:00:41,091
domain model classes from the schema.

10
00:00:41,091 --> 00:00:45,680
Each of the two approaches has advantages and disadvantages.

11
00:00:45,680 --> 00:00:49,105
Let's take a look at these so that you understand what you should

12
00:00:49,105 --> 00:00:52,384
think about when you are deciding which of the two approaches

13
00:00:52,384 --> 00:00:55,219
you'll want to use for your projects.

14
00:00:55,219 --> 00:00:59,186
First, let's think about the code-first approach.

15
00:00:59,186 --> 00:01:02,675
One of the advantages of the code-first approach is that it

16
00:01:02,675 --> 00:01:06,137
is easy to use if you're a Java developer.

17
00:01:06,137 --> 00:01:08,988
You probably know Java better than XSD,

18
00:01:08,988 --> 00:01:15,258
so it's easier for you to write a number of Java classes than to write an XSD.

19
00:01:15,258 --> 00:01:19,334
Also, if you write the Java classes yourself,

20
00:01:19,334 --> 00:01:23,885
you have precise control over the design of your classes.

21
00:01:23,885 --> 00:01:27,493
You decide what fields and methods your classes will

22
00:01:27,493 --> 00:01:29,898
have and how they are implemented.

23
00:01:29,898 --> 00:01:34,177
This allows you to design your classes so that they will integrate in an

24
00:01:34,177 --> 00:01:37,526
optimal way with the other parts of your software.

25
00:01:37,526 --> 00:01:38,984
On the other side,

26
00:01:38,984 --> 00:01:42,762
a disadvantage of the code-first approach is that you have

27
00:01:42,762 --> 00:01:46,210
less control over what the XSD looks like.

28
00:01:46,210 --> 00:01:49,630
As you have seen in the previous module though,

29
00:01:49,630 --> 00:01:54,240
the JAXB annotations do give you lots of options for

30
00:01:54,240 --> 00:01:56,223
controlling the generated XSD.

31
00:01:56,223 --> 00:01:58,144
But to use these effectively,

32
00:01:58,144 --> 00:02:04,318
you do need to understand how JAXB annotations translate to the XSD.

33
00:02:04,318 --> 00:02:07,701
Now think about the schema-first approach.

34
00:02:07,701 --> 00:02:13,145
For some projects, the schema-first approach will be the only option.

35
00:02:13,145 --> 00:02:13,823
For example,

36
00:02:13,823 --> 00:02:17,622
maybe your software has to communicate with an already existing system,

37
00:02:17,622 --> 00:02:21,744
and you get an XML Schema from the maintainers of that

38
00:02:21,744 --> 00:02:24,802
system that you will have to work with.

39
00:02:24,802 --> 00:02:28,279
Or maybe a business analyst or a software architect has

40
00:02:28,279 --> 00:02:31,689
defined the domain model in the form of an XML Schema that

41
00:02:31,689 --> 00:02:34,263
you'll have to use to build the software.

42
00:02:34,263 --> 00:02:37,825
Even if you are defining the domain model yourself,

43
00:02:37,825 --> 00:02:43,809
it can be a good idea to start with an XML Schema instead of with Java classes.

44
00:02:43,809 --> 00:02:49,112
For example, if you anticipate that many different groups of developers,

45
00:02:49,112 --> 00:02:53,446
perhaps of different organizations, are going to use your domain model,

46
00:02:53,446 --> 00:02:59,342
then it's a good idea to define it using a standard language such as XML Schema,

47
00:02:59,342 --> 00:03:02,223
which is independent of any particular

48
00:03:02,223 --> 00:03:05,498
implementation technology such as Java,. NET,

49
00:03:05,498 --> 00:03:09,218
or any other programming language or framework.

50
00:03:09,218 --> 00:03:13,956
So one advantage of the schema-first approach is that it

51
00:03:13,956 --> 00:03:18,239
allows you to design your domain model independent of what

52
00:03:18,239 --> 00:03:20,875
particular programming language is used.

53
00:03:20,875 --> 00:03:24,373
A disadvantage of the schema-first approach is that you will

54
00:03:24,373 --> 00:03:28,087
have less control over the Java classes.

55
00:03:28,087 --> 00:03:32,283
Sometimes the generated Java classes may contain constructs that

56
00:03:32,283 --> 00:03:35,651
are cumbersome to work with in your own code,

57
00:03:35,651 --> 00:03:38,024
for example, wrapper classes for collections.

58
00:03:38,024 --> 00:03:42,822
You can often make these better by modifying the XSD so

59
00:03:42,822 --> 00:03:45,692
that better Java code is generated,

60
00:03:45,692 --> 00:03:49,722
and you'll see some examples of that in this module.

61
00:03:49,722 --> 00:03:52,409
If you get the XSD from someone else,

62
00:03:52,409 --> 00:03:55,616
then modifying it to suit your own purposes is

63
00:03:55,616 --> 00:03:58,793
normally not what you will want to do.

64
00:03:58,793 --> 00:04:01,372
Fortunately, besides modifying the XSD,

65
00:04:01,372 --> 00:04:09,217
you can also control how JAXB generates Java classes by using binding files.

66
00:04:09,217 --> 00:04:13,338
You will learn how to use binding files in this module.

67
00:04:13,338 --> 00:04:14,043
Of course,

68
00:04:14,043 --> 00:04:17,923
there's no exact formula to tell you whether you should use

69
00:04:17,923 --> 00:04:28,000
the code-first or the schema-first approach. It depends on the particular requirements for the project you are working on.

