WEBVTT
1
00:00:02.008 --> 00:00:08.472
One more feature of XML Schema is that elements can be made nillable.

2
00:00:08.472 --> 00:00:11.141
JAXB also supports this XML schema feature,

3
00:00:11.141 --> 00:00:14.854
so let's see how to use it, and again,

4
00:00:14.854 --> 00:00:19.606
let's also see what this means for marshalling and unmarshalling.

5
00:00:19.606 --> 00:00:25.431
There are different ways in which an XML element can have no value.

6
00:00:25.431 --> 00:00:28.665
The element can just be absent from the XML,

7
00:00:28.665 --> 00:00:33.493
or the element can be present, but not have a value.

8
00:00:33.493 --> 00:00:40.468
It's also possible to explicitly indicate that the value of an element is nil.

9
00:00:40.468 --> 00:00:44.388
Such an element would look like this in XML.

10
00:00:44.388 --> 00:00:48.789
It would have a special attribute named nil from

11
00:00:48.789 --> 00:00:54.743
the XMLSchema-instance namespace, which is part of the XML Schema standard.

12
00:00:54.743 --> 00:00:58.925
Let's see how JAXB supports this.

13
00:00:58.925 --> 00:01:05.198
The example to look at for this is ps-jaxb-17-nillable.

14
00:01:05.198 --> 00:01:07.958
Take a look at class Item.

15
00:01:07.958 --> 00:01:11.852
In the XmlElement annotation on the comment field,

16
00:01:11.852 --> 00:01:15.821
I've specified that this field is nillable.

17
00:01:15.821 --> 00:01:17.303
In the generated schema,

18
00:01:17.303 --> 00:01:21.412
I can see that the element declaration now has nillable=true.

19
00:01:21.412 --> 00:01:27.705
Let's take a look at what effect this has on marshalling.

20
00:01:27.705 --> 00:01:32.958
In the marshalling example, two items are added to the PurchaseOrder.

21
00:01:32.958 --> 00:01:37.224
The first one has a comment, and the second one doesn't.

22
00:01:37.224 --> 00:01:39.003
Before I run this,

23
00:01:39.003 --> 00:01:43.894
remember what normally happens when a field is null during marshalling.

24
00:01:43.894 --> 00:01:48.193
JAXB will then leave the field out of the XML entirely,

25
00:01:48.193 --> 00:01:53.933
so the second item element would not have a comment element at all.

26
00:01:53.933 --> 00:01:57.991
Let's now run the example and see what happens.

27
00:01:57.991 --> 00:02:02.807
We see that the second item element now does have a comment element,

28
00:02:02.807 --> 00:02:08.657
which is set to nil with the special XMLSchema-instance attribute.

29
00:02:08.657 --> 00:02:14.023
So making a field nillable does change the marshalling behavior.

30
00:02:14.023 --> 00:02:16.423
For unmarshalling, there are no surprises,

31
00:02:16.423 --> 00:02:20.921
but it's worth it to pay attention to what happens exactly.

32
00:02:20.921 --> 00:02:25.317
I especially want to show you what the difference is between

33
00:02:25.317 --> 00:02:30.583
an element being set to nil and not having the element in the

34
00:02:30.583 --> 00:02:33.063
XML at all during unmarshalling.

35
00:02:33.063 --> 00:02:37.890
The difference is that when an element is set to nil explicitly,

36
00:02:37.890 --> 00:02:43.442
the corresponding field will be set to null during unmarshalling.

37
00:02:43.442 --> 00:02:45.970
And when the element is missing,

38
00:02:45.970 --> 00:02:49.340
the field will not be touched during unmarshalling.

39
00:02:49.340 --> 00:02:53.702
You can see this difference by initializing the field in class

40
00:02:53.702 --> 00:02:57.948
Item with a Test value and then running the unmarshalling

41
00:02:57.948 --> 00:03:00.442
example with the two different inputs.

42
00:03:00.442 --> 00:03:04.802
When the element is present in XML but set to nil,

43
00:03:04.802 --> 00:03:09.059
you'll see that the field will have been set to null during unmarshalling,

44
00:03:09.059 --> 00:03:19.000
and when the element is missing, you'll see that the field still has the default value after unmarshalling.

