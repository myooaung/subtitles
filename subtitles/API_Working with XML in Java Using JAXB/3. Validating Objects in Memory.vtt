WEBVTT
1
00:00:02.093 --> 00:00:05.175
You've just learned how to validate against a schema

2
00:00:05.175 --> 00:00:07.384
during marshalling and unmarshalling.

3
00:00:07.384 --> 00:00:14.446
It's also possible to validate JAXB objects in memory against a schema without

4
00:00:14.446 --> 00:00:19.911
marshalling or unmarshalling the objects to or from XML.

5
00:00:19.911 --> 00:00:24.297
This is useful if you have created a set of JAXB objects,

6
00:00:24.297 --> 00:00:27.031
for example, using data coming from a database,

7
00:00:27.031 --> 00:00:32.236
and you just want to check if they contain valid and complete data

8
00:00:32.236 --> 00:00:36.292
before processing them any further in your application.

9
00:00:36.292 --> 00:00:45.655
Let's take a look at example ps-jaxb-24-validation-2 to see how this works.

10
00:00:45.655 --> 00:00:47.631
Like in the previous examples,

11
00:00:47.631 --> 00:00:51.718
we first have to create a SchemaFactory from which we

12
00:00:51.718 --> 00:00:54.799
create a schema object for our XSD.

13
00:00:54.799 --> 00:00:58.765
Then we can create a validator for the schema by calling

14
00:00:58.765 --> 00:01:01.542
the newValidator on the schema object.

15
00:01:01.542 --> 00:01:08.546
The validator has a validate method, which you'll need to pass a source object.

16
00:01:08.546 --> 00:01:14.229
We've used a source object before in one of the examples earlier in the course.

17
00:01:14.229 --> 00:01:19.821
Interface Source is actually from the XML transformation API,

18
00:01:19.821 --> 00:01:24.994
and it represents an object that acts as a source of XML data.

19
00:01:24.994 --> 00:01:28.572
There are different implementations of Interface Source

20
00:01:28.572 --> 00:01:33.432
available for the different Java XML APIs,

21
00:01:33.432 --> 00:01:37.210
for example, DOMSource, SAXSource, StAXSource,

22
00:01:37.210 --> 00:01:42.169
and StreamSource, and there's also a class,

23
00:01:42.169 --> 00:01:42.877
JAXBSource.

24
00:01:42.877 --> 00:01:47.209
Since we're working with JAXB here, we'll of course use the JAXBSource,

25
00:01:47.209 --> 00:01:52.448
which we create here by passing it the JAXB context and

26
00:01:52.448 --> 00:01:57.931
the root of our JAXB object tree, which is the purchaseOrder object.

27
00:01:57.931 --> 00:02:02.103
The validator will validate whatever the source object provides,

28
00:02:02.103 --> 00:02:06.197
which is, in this case, our JAXB object tree in memory,

29
00:02:06.197 --> 00:02:08.564
starting with the purchaseOrder object.

30
00:02:08.564 --> 00:02:14.379
When a validation error occurs, the validator will throw an exception.

31
00:02:14.379 --> 00:02:17.517
But just like we saw in the previous example,

32
00:02:17.517 --> 00:02:21.687
it's also possible to set a custom validation error handler.

33
00:02:21.687 --> 00:02:26.902
You can do this by calling setErrorHandler on the validator.

34
00:02:26.902 --> 00:02:33.328
The ErrorHandler is different, though, than what we saw in the previous examples.

35
00:02:33.328 --> 00:02:35.036
In the previous examples,

36
00:02:35.036 --> 00:02:39.821
the ErrorHandler was a class that implements interface ValidationEventHandler,

37
00:02:39.821 --> 00:02:44.310
which is a JAXB-specific interface.

38
00:02:44.310 --> 00:02:46.013
Instead of a ValidationEventHandler,

39
00:02:46.013 --> 00:02:51.448
we now have to make the ErrorHandler a class that implements

40
00:02:51.448 --> 00:02:54.874
interface ErrorHandler from the package org.

41
00:02:54.874 --> 00:02:55.436
xml.

42
00:02:55.436 --> 00:03:00.486
sax, so it's actually part of the SAX API.

43
00:03:00.486 --> 00:03:04.369
This interface defines three methods named warning,

44
00:03:04.369 --> 00:03:10.060
error, and fatalError, which will be called during validation when a warning,

45
00:03:10.060 --> 00:03:12.496
error, or fatal error occurs.

46
00:03:12.496 --> 00:03:15.419
If you want validation to stop,

47
00:03:15.419 --> 00:03:20.010
then you should make these methods throw a SAX exception.

48
00:03:20.010 --> 00:03:25.043
In the ExampleErrorHandler, the methods just bring the message.

49
00:03:25.043 --> 00:03:30.956
As you can see, Java's XML APIs are sometimes a bit messy.

50
00:03:30.956 --> 00:03:33.824
There are several different APIs for parsing,

51
00:03:33.824 --> 00:03:39.700
and then there's the XML transformation API and the XML validation API,

52
00:03:39.700 --> 00:03:45.236
and they sometimes use each other's classes and interfaces.

53
00:03:45.236 --> 00:03:50.786
For example, interface Source, which is in the package javax.

54
00:03:50.786 --> 00:03:51.265
xml.

55
00:03:51.265 --> 00:03:54.698
transform, is used by the validation API,

56
00:03:54.698 --> 00:03:59.764
and the validation API also uses the SAX-specific interface

57
00:03:59.764 --> 00:04:04.060
ErrorHandler for reporting validation errors.

58
00:04:04.060 --> 00:04:08.779
It's not all designed in a perfectly clean and logical way.

59
00:04:08.779 --> 00:04:13.595
The reason why it is a bit messy like this is mainly historic.

60
00:04:13.595 --> 00:04:28.000
Different XML APIs have been added to different Java versions over time, and newer APIs have often reused APIs that already existed at that point.

