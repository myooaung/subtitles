1
00:00:02,163 --> 00:00:03,734
Besides the schemagen tool,

2
00:00:03,734 --> 00:00:09,828
you can also generate an XML Schema programmatically from your own Java code.

3
00:00:09,828 --> 00:00:15,958
Class JAXBContext has a method named generateSchema to generate an XSD from

4
00:00:15,958 --> 00:00:19,424
the domain model that the context was initialized with.

5
00:00:19,424 --> 00:00:23,420
Take a look at the next example, ps-jaxb-13-generateschema,

6
00:00:23,420 --> 00:00:29,396
to see how to do this.

7
00:00:29,396 --> 00:00:32,440
Let's go to class GenerateSchemaExample.

8
00:00:32,440 --> 00:00:34,267
In this example,

9
00:00:34,267 --> 00:00:41,465
we use the generateSchema method of the JAXBContext to generate a schema.

10
00:00:41,465 --> 00:00:47,609
You have to pass this method an instance of class SchemaOutputResolver.

11
00:00:47,609 --> 00:00:52,915
This is an abstract class that you have to extend and implement yourself.

12
00:00:52,915 --> 00:00:57,784
I did that in this example using an anonymous subclass.

13
00:00:57,784 --> 00:01:02,710
There's just one method to implement, the createOutput method.

14
00:01:02,710 --> 00:01:06,084
JAXB passes two arguments through the createOutput method,

15
00:01:06,084 --> 00:01:10,546
the URI of the namespace that it is generating the

16
00:01:10,546 --> 00:01:13,743
schema for and a suggested file name.

17
00:01:13,743 --> 00:01:19,626
The method has to return a Result object that is used to write the schema.

18
00:01:19,626 --> 00:01:25,604
The interface result is actually part of the XML transformation API,

19
00:01:25,604 --> 00:01:30,737
as you can see, because it's in the package javax.

20
00:01:30,737 --> 00:01:31,251
xml.

21
00:01:31,251 --> 00:01:31,764
transform.

22
00:01:31,764 --> 00:01:35,380
There are several implementations available of this interface,

23
00:01:35,380 --> 00:01:39,042
which can write XML to different targets.

24
00:01:39,042 --> 00:01:44,410
I've used StreamResult here, which can write the output to a file.

25
00:01:44,410 --> 00:01:48,683
Using a different implementation, it's also possible to write the result to,

26
00:01:48,683 --> 00:01:54,488
for example, a DOM node or a SAX or StAX event stream.

27
00:01:54,488 --> 00:01:58,452
In this example, I'm ignoring the suggested file name argument,

28
00:01:58,452 --> 00:02:03,379
and I let it write to a file named purchaseOrder.

29
00:02:03,379 --> 00:02:03,872
xsd.

30
00:02:03,872 --> 00:02:06,923
When I run the example, I'll get an XSD,

31
00:02:06,923 --> 00:02:14,000
which, of course, looks exactly the same as what the schemagen tool would produce.

