1
00:00:01,864 --> 00:00:07,650
JAXB maps enum type fields to XML schema simple types.

2
00:00:07,650 --> 00:00:10,502
By default, enums are mapped as strings,

3
00:00:10,502 --> 00:00:14,982
and the enum console names are used in the XML.

4
00:00:14,982 --> 00:00:19,859
There are two annotations that you can use to customize how enums are mapped

5
00:00:19,859 --> 00:00:24,538
if you need different mapping than what JAXB by default.

6
00:00:24,538 --> 00:00:28,246
This is not very complicated,

7
00:00:28,246 --> 00:00:34,180
so let's take a look at example ps-jaxb-01-anno-enum.

8
00:00:34,180 --> 00:00:41,424
JAXB maps enums to XML schema simple types with enumeration restrictions.

9
00:00:41,424 --> 00:00:44,293
In the introduction module of this course,

10
00:00:44,293 --> 00:00:49,426
we already briefly saw this in the quick review of XML schema.

11
00:00:49,426 --> 00:00:52,074
Class Customer contains the loyalty field,

12
00:00:52,074 --> 00:00:56,059
which is of type Loyalty, which is an enum.

13
00:00:56,059 --> 00:00:56,763
By default,

14
00:00:56,763 --> 00:01:02,597
the enumeration values in the XML will be the names of the Java enum constants.

15
00:01:02,597 --> 00:01:04,744
In the previous examples,

16
00:01:04,744 --> 00:01:10,853
we saw SILVER as the value of the loyalty element in the XML.

17
00:01:10,853 --> 00:01:15,887
Suppose that in the XML we want to use values that are

18
00:01:15,887 --> 00:01:18,354
different from the enum constant names.

19
00:01:18,354 --> 00:01:22,509
We can do that by putting XmlEnumValue annotations on the

20
00:01:22,509 --> 00:01:27,619
enum constants and specifying the value to be used in XML

21
00:01:27,619 --> 00:01:29,967
for each of the constants.

22
00:01:29,967 --> 00:01:37,296
For example, I can here specify the values 10, 20, and 30 for the 3 constants.

23
00:01:37,296 --> 00:01:44,066
When I run the application, I will now get 20 instead of SILVER in the XML.

24
00:01:44,066 --> 00:01:47,335
Finally, there is the XmlEnum annotation.

25
00:01:47,335 --> 00:01:52,148
You can put this annotation on the enum itself.

26
00:01:52,148 --> 00:01:56,494
This is actually redundant since JAXB already automatically

27
00:01:56,494 --> 00:02:00,648
recognizes enums and maps them appropriately.

28
00:02:00,648 --> 00:02:05,504
The XmlEnum annotation is not completely useless though.

29
00:02:05,504 --> 00:02:09,262
The simple type that an enum is mapped to in the schema is

30
00:02:09,262 --> 00:02:12,141
based on one of the built-in simple types.

31
00:02:12,141 --> 00:02:14,829
By default, the type string is used,

32
00:02:14,829 --> 00:02:18,700
but you might want it to be a different type,

33
00:02:18,700 --> 00:02:19,861
for example, int.

34
00:02:19,861 --> 00:02:24,350
You can specify that using the XmlEnum annotation.

35
00:02:24,350 --> 00:02:27,085
For example, if I specify Integer.

36
00:02:27,085 --> 00:02:31,188
class, then the schema type int will be used.

37
00:02:31,188 --> 00:02:36,070
The values that are specified in the XmlEnumValue annotations must,

38
00:02:36,070 --> 00:02:36,682
of course,

39
00:02:36,682 --> 00:02:41,908
be valid values for the type that is used to represent the enum in XML.

40
00:02:41,908 --> 00:02:54,000
For example, if integers are used, then the values must be integers. You will get an error if you use a value that is not a valid integer.

