WEBVTT
1
00:00:01.140 --> 00:00:03.360
[Autogenerated] in this section will run a demo which

2
00:00:03.360 --> 00:00:07.270
demonstrates the main functionalities off AWS cognitive

3
00:00:07.270 --> 00:00:12.420
identity pool in a full chain deployment.

4
00:00:12.420 --> 00:00:14.770
Let me describe the scenario for these.

5
00:00:14.770 --> 00:00:19.240
Emma will use a different AWS cognito user pull instance

6
00:00:19.240 --> 00:00:22.690
with the local users already configured.

7
00:00:22.690 --> 00:00:27.050
Identity pool is then configured to grant access to successfully

8
00:00:27.050 --> 00:00:33.670
authenticated users with s tree read Write privileges will have some

9
00:00:33.670 --> 00:00:37.140
JavaScript embedded in our application,

10
00:00:37.140 --> 00:00:43.810
which provides support to the authentication and authorization work flows.

11
00:00:43.810 --> 00:00:47.740
Let's begin with AWS Cognito dashboard.

12
00:00:47.740 --> 00:00:51.090
Let's select a user pool and let me show the current

13
00:00:51.090 --> 00:00:55.440
instance we will use in this demo.

14
00:00:55.440 --> 00:00:59.840
As you can see, I have some users already in place.

15
00:00:59.840 --> 00:01:03.910
Also have a look to the attributes here.

16
00:01:03.910 --> 00:01:08.040
Users will sign with the user name.

17
00:01:08.040 --> 00:01:09.740
Also an up client.

18
00:01:09.740 --> 00:01:11.330
Ideas generated.

19
00:01:11.330 --> 00:01:13.910
Let's take note of it all.

20
00:01:13.910 --> 00:01:18.190
Other user pull perimeters are now said with full value,

21
00:01:18.190 --> 00:01:24.820
So time to move toe identity pools I ever had set up an identity pool.

22
00:01:24.820 --> 00:01:26.440
Instance.

23
00:01:26.440 --> 00:01:30.610
Let's taken out of the identity pool i d.

24
00:01:30.610 --> 00:01:35.840
As you can see, we have a role associated with authenticated the users.

25
00:01:35.840 --> 00:01:40.970
Let's investigate more this role as a touch the session policy which

26
00:01:40.970 --> 00:01:47.040
allow s tree access to all AWS Global Man takes account.

27
00:01:47.040 --> 00:01:50.920
Let's move back to AWS Cognito Dashboard and let's

28
00:01:50.920 --> 00:01:54.140
go for authentication providers.

29
00:01:54.140 --> 00:01:57.970
And let's take note that I have already field with information

30
00:01:57.970 --> 00:02:03.140
relevant to user pool an APP client I d.

31
00:02:03.140 --> 00:02:04.580
Now the fun part.

32
00:02:04.580 --> 00:02:09.460
I have created a web application hosted on AWS s three bucket.

33
00:02:09.460 --> 00:02:14.550
For the sake of simplicity, the Web application is very basic.

34
00:02:14.550 --> 00:02:19.870
Justin html index which contains some interesting cognitive decay.

35
00:02:19.870 --> 00:02:25.640
JavaScript code Let me just highlight two points in the code.

36
00:02:25.640 --> 00:02:29.690
The 1st 1 contains some variables in its allies the with the

37
00:02:29.690 --> 00:02:34.010
user pool and identity pose identifier which matches the one

38
00:02:34.010 --> 00:02:36.340
that we have described so far.

39
00:02:36.340 --> 00:02:40.110
Then we have a snippet which basically execute a looking function

40
00:02:40.110 --> 00:02:43.740
and received back AWS temporary credentials.

41
00:02:43.740 --> 00:02:45.730
I will not go into details here.

42
00:02:45.730 --> 00:02:48.150
Let me just show you the result.

43
00:02:48.150 --> 00:02:53.570
So here is our web application with stagnating with our test

44
00:02:53.570 --> 00:02:57.440
user and with a silverback AWS credentials,

45
00:02:57.440 --> 00:03:01.520
access key, secret access key and a session token No,

46
00:03:01.520 --> 00:03:05.240
let me jump to postmen one more time.

47
00:03:05.240 --> 00:03:11.630
We feel our a p a call with our AWS temporary credentials and

48
00:03:11.630 --> 00:03:19.000
we receive back the complete least of AWS pockets enabled over our global man takes account

