WEBVTT
1
00:00:01.040 --> 00:00:04.210
[Autogenerated] managing authentication and authorization

2
00:00:04.210 --> 00:00:09.900
for external applications with AWS cognito a rather long

3
00:00:09.900 --> 00:00:12.440
title for an interesting topic.

4
00:00:12.440 --> 00:00:15.410
How to grant access to external applications.

5
00:00:15.410 --> 00:00:21.440
Landing on your Amazon account with AWS Cognito.

6
00:00:21.440 --> 00:00:22.270
In this model,

7
00:00:22.270 --> 00:00:25.740
we will describe three global Mantex use cases where

8
00:00:25.740 --> 00:00:30.340
you need to deploy your AWS cognito.

9
00:00:30.340 --> 00:00:34.820
Then we would provide a novel cognito description by focusing on the

10
00:00:34.820 --> 00:00:39.240
two main features user poles and identity pools.

11
00:00:39.240 --> 00:00:41.560
And since there is always some mess about,

12
00:00:41.560 --> 00:00:45.210
these two features will go into details and we'll see in

13
00:00:45.210 --> 00:00:48.040
which use case they feed The best.

14
00:00:48.040 --> 00:00:52.720
Finally would provide indication on helping to rate AWS cognito

15
00:00:52.720 --> 00:00:55.840
with external identity providers like Google,

16
00:00:55.840 --> 00:00:57.360
Facebook and so on.

17
00:00:57.360 --> 00:01:03.640
As usual, we will run them onto demonstrated different features.

18
00:01:03.640 --> 00:01:06.140
Let's go as usual for the definition.

19
00:01:06.140 --> 00:01:10.200
First, Amazon Cognito provides authentication,

20
00:01:10.200 --> 00:01:16.440
authorization and user management for your Web and mobile APS.

21
00:01:16.440 --> 00:01:20.750
This clearly states that the main use case where you need to deploy

22
00:01:20.750 --> 00:01:25.780
Italy s cognito is when an external application needs to land on

23
00:01:25.780 --> 00:01:30.270
some resorts is off your AWS account.

24
00:01:30.270 --> 00:01:34.290
So this is rather different from the use case where an external user

25
00:01:34.290 --> 00:01:39.540
needs to be granted the credentials to access some results is and

26
00:01:39.540 --> 00:01:42.570
which goes under a different chapters, which is a single,

27
00:01:42.570 --> 00:01:48.540
say known and Fredricka identity, which are beyond the scope of this course.

28
00:01:48.540 --> 00:01:52.810
Your users can sign directly with the user Riemann password

29
00:01:52.810 --> 00:01:56.090
or through 1/3 party such as Facebook, Amazon,

30
00:01:56.090 --> 00:01:57.770
Google or April.

31
00:01:57.770 --> 00:01:59.750
And this is more straightforward.

32
00:01:59.750 --> 00:02:03.210
External user Seinen bindings off their replication,

33
00:02:03.210 --> 00:02:07.410
and the credential can be very fight against the local databases or

34
00:02:07.410 --> 00:02:10.740
verified against an external identity provider.

35
00:02:10.740 --> 00:02:11.420
And is there more?

36
00:02:11.420 --> 00:02:16.840
We will see how to set up a proper configuration for Google.

37
00:02:16.840 --> 00:02:20.450
Now let them provide more details on the two main functionalities

38
00:02:20.450 --> 00:02:26.040
off AWS cognito user pools and identity pools.

39
00:02:26.040 --> 00:02:29.330
Cognito User Pool X as a user directory,

40
00:02:29.330 --> 00:02:34.040
allowing basic operation like second in and Second up.

41
00:02:34.040 --> 00:02:37.150
It provides a built in Web user interface,

42
00:02:37.150 --> 00:02:43.040
which can be exposed to users to facilitate the stagnant operations.

43
00:02:43.040 --> 00:02:49.140
It provides integration with social identity providers like Google or Facebook,

44
00:02:49.140 --> 00:02:51.730
it allows the management of users, for example,

45
00:02:51.730 --> 00:02:56.340
provides the capability to build group of users it's supported,

46
00:02:56.340 --> 00:03:00.330
announced its security features such hassled policy,

47
00:03:00.330 --> 00:03:03.420
password rotation and the multi factor authentication

48
00:03:03.420 --> 00:03:08.160
procedures at the end of the day user pool is where users are

49
00:03:08.160 --> 00:03:11.180
managed to end out indicated identity.

50
00:03:11.180 --> 00:03:13.480
Pool is a different story.

51
00:03:13.480 --> 00:03:20.440
It enables unique identities for your users and landing aid unless account

52
00:03:20.440 --> 00:03:24.900
and grants temporary privileges to access AWS results is,

53
00:03:24.900 --> 00:03:28.700
according to a manager policy, at the end of the day,

54
00:03:28.700 --> 00:03:31.570
we now understand that identity pool is where

55
00:03:31.570 --> 00:03:34.970
external users are authorized to access.

56
00:03:34.970 --> 00:03:42.980
AWS results is, let's now move toe our first cochinita use case.

57
00:03:42.980 --> 00:03:46.020
We have some user which needs to access global Manti.

58
00:03:46.020 --> 00:03:50.640
Some premise results by means of a Web or mobile application,

59
00:03:50.640 --> 00:03:56.310
but for some reason you need to manage those user on your AWS account.

60
00:03:56.310 --> 00:03:57.690
As an 80 administrator,

61
00:03:57.690 --> 00:04:01.440
you have to set up an AWS cognito user pull instance

62
00:04:01.440 --> 00:04:05.300
for the management off those users.

63
00:04:05.300 --> 00:04:08.690
The authentication can be done locally or can be done by

64
00:04:08.690 --> 00:04:12.940
means off external identity provider.

65
00:04:12.940 --> 00:04:16.840
When authentication is performing that we'd success talking is

66
00:04:16.840 --> 00:04:21.040
generated and sent back to user application.

67
00:04:21.040 --> 00:04:26.420
This token is later exchanged to grant access towards the target Global Man.

68
00:04:26.420 --> 00:04:27.290
Take some premise.

69
00:04:27.290 --> 00:04:31.260
Resorts is in the second use cases.

70
00:04:31.260 --> 00:04:32.810
We have similar story,

71
00:04:32.810 --> 00:04:38.960
except that the target resorts is consist in a serverless deployment on AWS.

72
00:04:38.960 --> 00:04:41.240
Global Man takes account.

73
00:04:41.240 --> 00:04:43.490
We have some users which needs to access.

74
00:04:43.490 --> 00:04:49.240
Global Man takes account means of Web or mobile application.

75
00:04:49.240 --> 00:04:51.420
You as an 80 administrator,

76
00:04:51.420 --> 00:04:54.080
you have to sit up in needed lius cochinita user pool.

77
00:04:54.080 --> 00:04:54.660
Instance.

78
00:04:54.660 --> 00:04:58.170
For the management off those users,

79
00:04:58.170 --> 00:05:01.110
the authentication can be done locally or can be done

80
00:05:01.110 --> 00:05:04.440
by an external identity provider.

81
00:05:04.440 --> 00:05:07.600
When authentication is performed with success,

82
00:05:07.600 --> 00:05:12.580
a token is generated and sent back to use a replication.

83
00:05:12.580 --> 00:05:18.040
The token is later used, the Sagna recast to a P I gateway,

84
00:05:18.040 --> 00:05:21.740
which exposed global Mantex production services.

85
00:05:21.740 --> 00:05:25.620
The difference is that here, thanks to love the framework,

86
00:05:25.620 --> 00:05:28.350
we can manipulate the authentication workflow to

87
00:05:28.350 --> 00:05:30.390
create additional authentication,

88
00:05:30.390 --> 00:05:37.340
challenges user immigration and customize verification messages.

89
00:05:37.340 --> 00:05:42.940
The third use case is the most common and has a more complex workflow.

90
00:05:42.940 --> 00:05:47.320
We have some users which needs to access global Mantex AWS

91
00:05:47.320 --> 00:05:51.340
results is by means of web or mobile applications.

92
00:05:51.340 --> 00:05:56.020
As an 80 administrator, you have to sit up in aws cognito user poorly.

93
00:05:56.020 --> 00:05:56.800
Instance.

94
00:05:56.800 --> 00:06:00.370
For the management off those users,

95
00:06:00.370 --> 00:06:04.590
the authentication can be done locally or can be

96
00:06:04.590 --> 00:06:08.340
done by external identity provider.

97
00:06:08.340 --> 00:06:11.380
When authentication is performed with success.

98
00:06:11.380 --> 00:06:14.590
A talking is generated back to the user.

99
00:06:14.590 --> 00:06:17.970
The talking is used against the AWS Cognito

100
00:06:17.970 --> 00:06:21.610
identity pool and exchanged with AWS.

101
00:06:21.610 --> 00:06:27.330
A temporary credentials user cannot indicate using temporary credentials

102
00:06:27.330 --> 00:06:31.880
against AWS Global mentis account and would be provided access,

103
00:06:31.880 --> 00:06:35.040
according a policy which the IT administrator has

104
00:06:35.040 --> 00:06:40.040
created during identical configuration.

105
00:06:40.040 --> 00:06:41.540
As you can see the attrition,

106
00:06:41.540 --> 00:06:45.940
Alice hasn't come on the fact that the work flows needs to be

107
00:06:45.940 --> 00:06:48.680
automated by putting in place a proper frame.

108
00:06:48.680 --> 00:06:55.740
Or that's where aws cognito software development kit get into action.

109
00:06:55.740 --> 00:06:56.840
As we already said,

110
00:06:56.840 --> 00:07:00.530
the authentication and authorization work flows needs

111
00:07:00.530 --> 00:07:03.340
some automation to be put in place.

112
00:07:03.340 --> 00:07:06.220
Just ignored that while the server side,

113
00:07:06.220 --> 00:07:10.840
which is AWS cognito, user pools and identity pools,

114
00:07:10.840 --> 00:07:12.130
is already there,

115
00:07:12.130 --> 00:07:15.890
you have to work on the client apart by integrating proper

116
00:07:15.890 --> 00:07:18.840
work flow into your Web application.

117
00:07:18.840 --> 00:07:24.420
We have plenty of sdk for different mobile apps and different operating systems.

118
00:07:24.420 --> 00:07:28.800
We have heightened JavaScript, unity and many others.

119
00:07:28.800 --> 00:07:31.570
The downside here is that unfortunately,

120
00:07:31.570 --> 00:07:40.000
the documentation lacks in some part with the final result that having a full cognitive deployment can really be a pain

