1
00:00:01,136 --> 00:00:05,553
The next piece we're going to add to our application is the service tier.

2
00:00:05,553 --> 00:00:07,689
Now we're not talking about web services,

3
00:00:07,689 --> 00:00:11,430
but more so services as in the business logic tier.

4
00:00:11,430 --> 00:00:16,920
So similar to the repository, we're going to go ahead and click on source,

5
00:00:16,920 --> 00:00:17,863
main, java.

6
00:00:17,863 --> 00:00:25,007
Right-click and say New, Class and enter in our package of com.pluralsight.

7
00:00:25,007 --> 00:00:28,645
And this time, we're going to add service on the end of it.

8
00:00:28,645 --> 00:00:37,628
And for a class name, we're going to say SpeakerServiceImpl, and click Enter.

9
00:00:37,628 --> 00:00:41,320
Verify that you have the service package on the left or at the

10
00:00:41,320 --> 00:00:45,403
top of your code and that the name is correct.

11
00:00:45,403 --> 00:00:49,880
And then inside of here, we're going to do a couple of things.

12
00:00:49,880 --> 00:00:56,298
We're going to add a finder method as well in here and say public List Speakers,

13
00:00:56,298 --> 00:01:03,121
and it's going to be a very similar signature to what we

14
00:01:03,121 --> 00:01:07,681
did for the finder in our repository,

15
00:01:07,681 --> 00:01:12,148
but this would enable us to do other things such as swap out

16
00:01:12,148 --> 00:01:14,386
our repository tier and that type of stuff,

17
00:01:14,386 --> 00:01:15,692
so you may be looking at this going,

18
00:01:15,692 --> 00:01:18,859
this seems like a lot of overkill for a basic example,

19
00:01:18,859 --> 00:01:20,201
which it is.

20
00:01:20,201 --> 00:01:26,431
And we want to do our findAll here,

21
00:01:26,431 --> 00:01:33,017
and we're going to utilize the repository that we just created,

22
00:01:33,017 --> 00:01:35,412
but we haven't imported that yet, so for now,

23
00:01:35,412 --> 00:01:37,078
we're going to hard code this,

24
00:01:37,078 --> 00:01:40,807
and this is part of the problem that we're going to solve with Spring.

25
00:01:40,807 --> 00:01:42,423
So we're going to say private,

26
00:01:42,423 --> 00:01:52,582
and we're going to do SpeakerRepository repository =

27
00:01:52,582 --> 00:02:00,035
new HibernateSpeakerRepositoryImpl.

28
00:02:00,035 --> 00:02:02,979
Now this is what your code would like without Spring in it.

29
00:02:02,979 --> 00:02:05,026
We haven't added Spring to our application yet,

30
00:02:05,026 --> 00:02:16,581
so this is pretty accurate, and we would say return repository.findAll.

31
00:02:16,581 --> 00:02:20,430
Now just like we had with the repository,

32
00:02:20,430 --> 00:02:23,601
we don't have an interface for our service yet either.

33
00:02:23,601 --> 00:02:29,065
So let's do the same thing and say right-click,

34
00:02:29,065 --> 00:02:36,514
Refactor, Extract, Interface, and we want to call this the SpeakerService,

35
00:02:36,514 --> 00:02:41,583
and click the Member findAll, and Refactor,

36
00:02:41,583 --> 00:02:45,079
and it will do the same thing.

37
00:02:45,079 --> 00:02:48,103
And you can uncheck these if you don't like the dialogs asking you to

38
00:02:48,103 --> 00:02:51,827
make sure that you're not changing this elsewhere.

39
00:02:51,827 --> 00:02:58,624
We say OK, and we should see our interface here of SpeakerService.

40
00:02:58,624 --> 00:03:01,003
Now we can move on to creating a simple,

41
00:03:01,003 --> 00:03:09,000
main method that will test out all the pieces of the application that we have just written to be used together.

