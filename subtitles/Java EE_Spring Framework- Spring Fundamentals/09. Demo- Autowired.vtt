WEBVTT
1
00:00:01.117 --> 00:00:04.442
To switch our application over to being autowired by constructor,

2
00:00:04.442 --> 00:00:10.954
I'm going to go ahead and comment out this constructor argument that we have on

3
00:00:10.954 --> 00:00:19.261
line 11 and go to our bean definition and just say autowire,

4
00:00:19.261 --> 00:00:23.477
and I can now choose constructor inside of here.

5
00:00:23.477 --> 00:00:29.666
If I save this, our application is now set up to be autowired by a constructor.

6
00:00:29.666 --> 00:00:35.012
Let's switch over to our Application.java and run this again.

7
00:00:35.012 --> 00:00:39.128
And it should perform just like we expect it to and it does.

8
00:00:39.128 --> 00:00:41.636
You can put a log statement in there if you want to

9
00:00:41.636 --> 00:00:43.442
inspect it a little bit further,

10
00:00:43.442 --> 00:00:47.898
but all we had to was change our applicationContext to now

11
00:00:47.898 --> 00:00:51.936
specify that it was autowire by constructor.

12
00:00:51.936 --> 00:00:53.889
Let's look at what that looks like in the Java code.

13
00:00:53.889 --> 00:00:55.862
So we had done this in our other application.

14
00:00:55.862 --> 00:00:59.366
I've gone ahead and opened it up a new window.

15
00:00:59.366 --> 00:01:03.972
To put that @Autowired on there, we do the same thing on line 22.

16
00:01:03.972 --> 00:01:07.272
Now because of its location, it's saying that,

17
00:01:07.272 --> 00:01:07.807
by default,

18
00:01:07.807 --> 00:01:12.460
it has to be done as constructor based because that's the

19
00:01:12.460 --> 00:01:14.685
only way it can do that on that constructor.

20
00:01:14.685 --> 00:01:19.745
If we move it down to that setter, then we can choose the different types.

21
00:01:19.745 --> 00:01:22.180
Likewise, we can do the same thing in our XML application.

22
00:01:22.180 --> 00:01:26.867
Let's look at what that looks like now in our code.

23
00:01:26.867 --> 00:01:28.566
Switching this to use the setter,

24
00:01:28.566 --> 00:01:32.994
I'm just going to go ahead and change this to byType and

25
00:01:32.994 --> 00:01:38.060
go over to our SpeakerServiceImpl.

26
00:01:38.060 --> 00:01:39.458
Everything's already set up here.

27
00:01:39.458 --> 00:01:41.999
We have a default no argument constructor on line 12.

28
00:01:41.999 --> 00:01:43.985
If we didn't have that, it would fail.

29
00:01:43.985 --> 00:01:47.800
And we already have our setter defined on line 24.

30
00:01:47.800 --> 00:01:53.497
And since we're doing this byType, the name on line number 24 doesn't matter.

31
00:01:53.497 --> 00:01:57.750
So let's go back to our code and run this,

32
00:01:57.750 --> 00:02:02.625
right-click main, Run, and you'll see our application runs.

33
00:02:02.625 --> 00:02:05.324
We've got it set up to do byType.

34
00:02:05.324 --> 00:02:12.703
We can actually even change it to byName and save that.

35
00:02:12.703 --> 00:02:15.030
Because we are referring to the SpeakerService,

36
00:02:15.030 --> 00:02:17.980
and we have a bean named speakerRepository,

37
00:02:17.980 --> 00:02:20.758
it's going to do setSpeakerRepository,

38
00:02:20.758 --> 00:02:26.555
which is the method name inside of our SpeakerServiceImpl.

39
00:02:26.555 --> 00:02:28.307
Let's run it again.

40
00:02:28.307 --> 00:02:30.935
Should work for us as well.

41
00:02:30.935 --> 00:02:35.522
Right-click and say Run Application.

42
00:02:35.522 --> 00:02:36.308
It succeeds.

43
00:02:36.308 --> 00:02:38.668
Let's show it to you failing.

44
00:02:38.668 --> 00:02:41.175
If you remember when we first created our SpeakerServiceImpl,

45
00:02:41.175 --> 00:02:45.770
this was called setRepository.

46
00:02:45.770 --> 00:02:46.808
So I'm going to save that.

47
00:02:46.808 --> 00:02:50.104
I'm going to go back to my applicationContext and make sure it's byName.

48
00:02:50.104 --> 00:02:51.284
It is.

49
00:02:51.284 --> 00:02:55.417
There is not a setter named setSpeakerRepository.

50
00:02:55.417 --> 00:02:58.988
We have our setter defined on line 24 as setRepository.

51
00:02:58.988 --> 00:03:00.436
I just changed that.

52
00:03:00.436 --> 00:03:04.119
I'm going to save all of this, go back to my applicationContext,

53
00:03:04.119 --> 00:03:06.160
and this should fail.

54
00:03:06.160 --> 00:03:10.352
Right-click and say Run Application.main,

55
00:03:10.352 --> 00:03:16.179
and it fails, and the reason it fails is that it can't wire that up.

56
00:03:16.179 --> 00:03:18.655
It's not been wired correctly.

57
00:03:18.655 --> 00:03:20.885
You'll notice it's a runtime exception,

58
00:03:20.885 --> 00:03:24.745
so that can be a little bit cryptic to debug is that it's just telling

59
00:03:24.745 --> 00:03:29.241
us on SpeakerServiceImpl line 21 that it's null.

60
00:03:29.241 --> 00:03:31.431
Well, it's null because it was never injected correctly.

61
00:03:31.431 --> 00:03:33.182
It didn't wire those beans up.

62
00:03:33.182 --> 00:03:37.428
It just failed and went ahead and proceeded on running.

63
00:03:37.428 --> 00:03:39.857
To change that to where it would work,

64
00:03:39.857 --> 00:03:45.206
we can go back to our applicationContext and change this to byType,

65
00:03:45.206 --> 00:03:47.287
and save this,

66
00:03:47.287 --> 00:03:49.147
and when I run our application because it's looking

67
00:03:49.147 --> 00:03:53.703
for the type not by the name, it will succeed.

68
00:03:53.703 --> 00:03:55.932
There you go.

69
00:03:55.932 --> 00:03:57.925
ByType will look at the class type,

70
00:03:57.925 --> 00:04:03.813
which our SpeakerServiceImpl did have a method that took a SpeakerRepository,

71
00:04:03.813 --> 00:04:08.751
and we had defined a bean of speakerRepository on line 7.

72
00:04:08.751 --> 00:04:11.564
Those lined up, but if I had the names wrong,

73
00:04:11.564 --> 00:04:14.115
it can be a little bit more brittle.

74
00:04:14.115 --> 00:04:19.273
I liked names because I like to name all of my beans and I think it's a cleaner,

75
00:04:19.273 --> 00:04:20.562
better example of doing it.

76
00:04:20.562 --> 00:04:21.939
If you have an error, you should know pretty quickly.

77
00:04:21.939 --> 00:04:24.398
Even though it can be a little bit cryptic to debug,

78
00:04:24.398 --> 00:04:26.550
I think it's a better choice for you,

79
00:04:26.550 --> 00:04:30.741
but you see how byType will go through and wire those beans up for you,

80
00:04:30.741 --> 00:04:33.224
and you're guaranteed to only have one instance.

81
00:04:33.224 --> 00:04:40.000
I can't have multiple SpeakerRepositoryImpls in here or it wouldn't inject it correctly.

