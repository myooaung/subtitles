1
00:00:01,130 --> 00:00:05,353
So we already defined our bean to use setter injection.

2
00:00:05,353 --> 00:00:08,482
There's two types of injection just as we did inside

3
00:00:08,482 --> 00:00:11,335
of the Java configuration module.

4
00:00:11,335 --> 00:00:13,730
There's setter and constructor injection.

5
00:00:13,730 --> 00:00:16,755
Setter injection is using exactly what it sounds like,

6
00:00:16,755 --> 00:00:18,709
the getters and setters of our bean,

7
00:00:18,709 --> 00:00:23,219
and constructor injection uses the defined constructors.

8
00:00:23,219 --> 00:00:26,600
Something to keep in mind though is that you can use both

9
00:00:26,600 --> 00:00:28,969
setter and constructor injection together.

10
00:00:28,969 --> 00:00:34,632
We're going to now show you how to use a constructor injection example,

11
00:00:34,632 --> 00:00:38,268
but I just want to point out that I feel that setter

12
00:00:38,268 --> 00:00:42,634
injection is often better for existing code.

13
00:00:42,634 --> 00:00:46,545
We've seen our simple setter injection and what it's like to use that.

14
00:00:46,545 --> 00:00:50,789
Constructor injection guarantees a contract for us.

15
00:00:50,789 --> 00:00:52,772
There's a few nice things about doing that,

16
00:00:52,772 --> 00:00:57,956
but namely it's that we have our code and our contract defined when we

17
00:00:57,956 --> 00:01:01,793
create that object instance because of the constructor.

18
00:01:01,793 --> 00:01:06,210
A positive and a negative though is that I need to have a constructor

19
00:01:06,210 --> 00:01:09,758
defined for each situation that I want to guarantee.

20
00:01:09,758 --> 00:01:14,073
I should also note that you can use constructor and setter injection together.

21
00:01:14,073 --> 00:01:17,678
One other slight difference is that constructor injection is index

22
00:01:17,678 --> 00:01:22,042
based and not named based like setter injection is.

23
00:01:22,042 --> 00:01:26,678
Let's go ahead and add an injection-based example for our

24
00:01:26,678 --> 00:01:29,403
constructor inside of our application now.

25
00:01:29,403 --> 00:01:33,510
Changing our application over to be a constructor injection

26
00:01:33,510 --> 00:01:35,975
example verses setter is actually pretty quite easy.

27
00:01:35,975 --> 00:01:39,450
So I'm going to go into our applicationContext on line 11

28
00:01:39,450 --> 00:01:43,698
and change that to constructor-arg, and instead of name,

29
00:01:43,698 --> 00:01:50,056
constructor arguments are index based, so I want to do index= 0.

30
00:01:50,056 --> 00:01:53,913
They're 0 based, meaning if I have multiple arguments I'm going to pass in,

31
00:01:53,913 --> 00:01:56,000
I have 0, 1, 2, 3, and so on.

32
00:01:56,000 --> 00:01:57,321
So we start with 0.

33
00:01:57,321 --> 00:02:00,982
So I'm going to say constructor-arg index= 0.

34
00:02:00,982 --> 00:02:03,669
Then I need to go to my SpeakerServiceImpl.

35
00:02:03,669 --> 00:02:06,017
If I try to run this right now, it's going to break.

36
00:02:06,017 --> 00:02:08,684
I want to add two constructors inside of here.

37
00:02:08,684 --> 00:02:15,363
I want to add a public SpeakerServiceImpl,

38
00:02:15,363 --> 00:02:18,438
and I'm going to give this the no arguments constructor,

39
00:02:18,438 --> 00:02:20,872
just the default no argument so we don't break any other

40
00:02:20,872 --> 00:02:22,474
examples we're going to do in the future.

41
00:02:22,474 --> 00:02:25,576
Then I'm going to add a second one inside of here

42
00:02:25,576 --> 00:02:29,214
that is public SpeakerServiceImpl.

43
00:02:29,214 --> 00:02:33,696
I'm going to make this one take in an instance of our SpeakerRepository.

44
00:02:33,696 --> 00:02:33,977
And honestly,

45
00:02:33,977 --> 00:02:37,711
I'm just going to go down here and copy this code that we already have created

46
00:02:37,711 --> 00:02:41,954
for our setter because it's going to be very similar to that.

47
00:02:41,954 --> 00:02:46,400
So, paste that in there and save it.

48
00:02:46,400 --> 00:02:48,561
So our two constructors, one on line 12,

49
00:02:48,561 --> 00:02:50,172
the default no arguments,

50
00:02:50,172 --> 00:02:54,061
one on line 16 that is the SpeakerServiceImpl taking an

51
00:02:54,061 --> 00:02:56,857
instance of the SpeakerRepository,

52
00:02:56,857 --> 00:02:59,867
and it's just going to assign those variables to one another,

53
00:02:59,867 --> 00:03:04,418
so we have our this.repository is equal to our repository we're passing in,

54
00:03:04,418 --> 00:03:06,014
and we'll save that.

55
00:03:06,014 --> 00:03:06,462
That's it.

56
00:03:06,462 --> 00:03:07,806
That's all we have to do.

57
00:03:07,806 --> 00:03:11,146
Since we only have one argument, the index for this one is 0.

58
00:03:11,146 --> 00:03:14,862
If we had multiple arguments in there, it would be 0,

59
00:03:14,862 --> 00:03:19,901
1, 2, 3, 4 like in our applicationContext where we just have index 0 on line 11.

60
00:03:19,901 --> 00:03:22,423
Let's go back to our Application.java and run this

61
00:03:22,423 --> 00:03:24,608
now and see what that looks like.

62
00:03:24,608 --> 00:03:32,478
So if we right-click on our main, and say Run Application,

63
00:03:32,478 --> 00:03:37,608
it'll run just like we expected it to almost like we didn't change anything,

64
00:03:37,608 --> 00:03:38,737
although we did.

65
00:03:38,737 --> 00:03:42,863
So now it's constructor injection verses the setter injection.

66
00:03:42,863 --> 00:03:44,928
You can see the code for both there.

67
00:03:44,928 --> 00:03:47,231
All it took to change that in our applicationContext was changing

68
00:03:47,231 --> 00:03:55,000
that one property on line 11 to constructor-arg, and we have it constructor injection based.

