1
00:00:00,928 --> 00:00:03,590
The singleton design pattern restricts the

2
00:00:03,590 --> 00:00:07,940
instantiation of a class to just one object.

3
00:00:07,940 --> 00:00:11,885
A singleton is the default bean scope inside of Spring.

4
00:00:11,885 --> 00:00:14,365
So if you don't give it a scope,

5
00:00:14,365 --> 00:00:18,615
it will automatically be assigned the default scope of singleton,

6
00:00:18,615 --> 00:00:24,753
which means that there is one instance per Spring container or context.

7
00:00:24,753 --> 00:00:28,757
A lot of people say that means one instance per JVM,

8
00:00:28,757 --> 00:00:30,832
which is technically true,

9
00:00:30,832 --> 00:00:37,015
but you could possibly have more than one Spring container spun up in your JVM.

10
00:00:37,015 --> 00:00:37,477
So, really,

11
00:00:37,477 --> 00:00:42,809
the correct term is one instance per Spring container or application context.

12
00:00:42,809 --> 00:00:48,329
The configuration for adding scope using Java configuration is quite simple.

13
00:00:48,329 --> 00:00:52,774
We simply add the @Scope annotation to our code as you

14
00:00:52,774 --> 00:00:55,310
can see here in our code sample.

15
00:00:55,310 --> 00:00:56,644
And in the previous release of this course,

16
00:00:56,644 --> 00:01:02,111
we weren't using Maven, so you were required to add the AOP jar separately.

17
00:01:02,111 --> 00:01:05,010
Since we are using Maven, this is just a transitive dependency,

18
00:01:05,010 --> 00:01:07,950
and it's already available in our project.

19
00:01:07,950 --> 00:01:11,519
Let's add that scope to our project now and show you how

20
00:01:11,519 --> 00:01:14,581
you can configure that for your beans.

21
00:01:14,581 --> 00:01:17,928
To add scope to our already configured application,

22
00:01:17,928 --> 00:01:22,586
I've gone ahead and opened up our AppConfig.java file.

23
00:01:22,586 --> 00:01:26,025
I'm going to go below our bean definition for our

24
00:01:26,025 --> 00:01:30,469
speakerService and add an @Scope annotation.

25
00:01:30,469 --> 00:01:35,158
Now by default, I did mention earlier that it is a singleton,

26
00:01:35,158 --> 00:01:37,786
and that's implied, but we can explicitly set it,

27
00:01:37,786 --> 00:01:39,967
and there's a couple ways we can do this.

28
00:01:39,967 --> 00:01:43,056
First off, we want to go in here and type value,

29
00:01:43,056 --> 00:01:48,261
and we can type inside of here singleton.

30
00:01:48,261 --> 00:01:54,500
Now I do not like using my own typed out strings for these

31
00:01:54,500 --> 00:01:58,897
values because I could easily forget that n off the end of

32
00:01:58,897 --> 00:02:01,843
there so it's a singleto not a singleton.

33
00:02:01,843 --> 00:02:07,231
So we can use some strings that they have already set up for us inside

34
00:02:07,231 --> 00:02:13,094
of Spring by saying BeanDefinition.SCOPE_SINGLETON.

35
00:02:13,094 --> 00:02:17,067
You can tell by this context-sensitive help tip that

36
00:02:17,067 --> 00:02:19,946
it's just a sting equal to singleton,

37
00:02:19,946 --> 00:02:22,687
but that's what we want and we don't have to define our own.

38
00:02:22,687 --> 00:02:24,609
So a lot of people go ahead and create their own utils.

39
00:02:24,609 --> 00:02:32,359
We'll just go ahead and select value= BeanDefinition.SCOPE_SINGLETON,

40
00:02:32,359 --> 00:02:33,915
and we can save this.

41
00:02:33,915 --> 00:02:37,069
Now to test this, let's go back to our application,

42
00:02:37,069 --> 00:02:44,110
and, right here, we have this SpeakerService service = appContext.getBean.

43
00:02:44,110 --> 00:02:47,529
So we have an instance of this bean where it's going to go

44
00:02:47,529 --> 00:02:49,891
ahead and tell us what object we have.

45
00:02:49,891 --> 00:02:52,309
I'm going to add another System.out .println here,

46
00:02:52,309 --> 00:02:55,741
and this is a very simple way to just see what's

47
00:02:55,741 --> 00:02:58,607
going on behind the scenes here.

48
00:02:58,607 --> 00:03:02,715
And I want to actually just print out service,

49
00:03:02,715 --> 00:03:05,603
and it's going to be the object address for service,

50
00:03:05,603 --> 00:03:09,838
and I want to grab another instance of that bean.

51
00:03:09,838 --> 00:03:14,441
So I'm going to copy this line here, and go down below,

52
00:03:14,441 --> 00:03:16,637
and we'll call this service2,

53
00:03:16,637 --> 00:03:22,561
and I'm going to copy that System.out .println again.

54
00:03:22,561 --> 00:03:27,230
Make sure you change the variable to be the second one.

55
00:03:27,230 --> 00:03:34,390
And this should print out these two different object address instances for us.

56
00:03:34,390 --> 00:03:37,615
So, let's go ahead and run this.

57
00:03:37,615 --> 00:03:45,584
I'm going to right-click on our main method and say Run Application.main.

58
00:03:45,584 --> 00:03:46,663
And when this runs,

59
00:03:46,663 --> 00:03:50,629
you'll notice that it prints out the exact same object address instance.

60
00:03:50,629 --> 00:03:53,754
So down here in our console output,

61
00:03:53,754 --> 00:03:58,081
you can see that com.pluralsight .service .SpeakerServiceImpl,

62
00:03:58,081 --> 00:04:01,093
and your object address will be different just because it's

63
00:04:01,093 --> 00:04:03,331
unique every time you run this through the JVM.

64
00:04:03,331 --> 00:04:04,376
Then it prints out my name,

65
00:04:04,376 --> 00:04:07,919
and it prints out that same object address instance again.

66
00:04:07,919 --> 00:04:10,486
So our singleton is in fact a singleton.

67
00:04:10,486 --> 00:04:15,218
Each time we ask for an instance of that bean from the application context,

68
00:04:15,218 --> 00:04:18,568
it's returning the same bean for us.

69
00:04:18,568 --> 00:04:18,909
Now,

70
00:04:18,909 --> 00:04:23,594
this is the behavior we want because we shouldn't be storing any

71
00:04:23,594 --> 00:04:27,832
state that is unique to that user inside that object.

72
00:04:27,832 --> 00:04:29,815
You can store state unique to that application in there,

73
00:04:29,815 --> 00:04:36,841
but you don't want to store state unique to that user inside that object.

74
00:04:36,841 --> 00:04:43,000
So, this is working as we planned. Let's look at what it means to be a prototype now.

