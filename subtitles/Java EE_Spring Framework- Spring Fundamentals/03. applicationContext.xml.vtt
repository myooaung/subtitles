WEBVTT
1
00:00:01.426 --> 00:00:04.828
The applicationContext really is the root of an

2
00:00:04.828 --> 00:00:06.757
application configured with Spring.

3
00:00:06.757 --> 00:00:09.979
And just like we had in our Java configured Spring app,

4
00:00:09.979 --> 00:00:12.042
the AppConfig is this same thing.

5
00:00:12.042 --> 00:00:13.581
They are synonymous.

6
00:00:13.581 --> 00:00:17.899
It doesn't have to be named the applicationContext.xml just like our

7
00:00:17.899 --> 00:00:21.317
AppConfig.java file doesn't need to be named that,

8
00:00:21.317 --> 00:00:23.483
but it's more of a loose standard.

9
00:00:23.483 --> 00:00:26.716
I've seen people abbreviate it appContext or App-Context,

10
00:00:26.716 --> 00:00:30.162
and this is just kind of a default that you see people

11
00:00:30.162 --> 00:00:31.936
do inside of their applications.

12
00:00:31.936 --> 00:00:33.674
By default, though,

13
00:00:33.674 --> 00:00:36.085
Spring will look for a file named

14
00:00:36.085 --> 00:00:40.934
applicationContext.xml without any extra configuration.

15
00:00:40.934 --> 00:00:43.824
A simple view of Spring is that it's just a HashMap of objects,

16
00:00:43.824 --> 00:00:46.790
and we define that HashMap inside of our

17
00:00:46.790 --> 00:00:51.352
applicationContext.xml or our AppConfig.java.

18
00:00:51.352 --> 00:00:56.173
The objects that we have inside of here are pretty much just name value pairs.

19
00:00:56.173 --> 00:00:59.317
Although it's not the intention of Spring,

20
00:00:59.317 --> 00:01:02.007
it can be used as a simple registry,

21
00:01:02.007 --> 00:01:05.414
and we can look up those beans out of our context.

22
00:01:05.414 --> 00:01:08.517
All of our XML configurations begin here,

23
00:01:08.517 --> 00:01:13.321
and for our sample, we're going to call ours applicationContext.xml.

24
00:01:13.321 --> 00:01:17.087
You can have other files that will reference this and look up and pull it in.

25
00:01:17.087 --> 00:01:18.917
It's a little bit more of an advanced topic,

26
00:01:18.917 --> 00:01:22.180
but we can import those things in there.

27
00:01:22.180 --> 00:01:25.160
There are some namespaces that the Spring developers have put

28
00:01:25.160 --> 00:01:28.686
together that help us in our configuration and validation of our

29
00:01:28.686 --> 00:01:31.837
files and really make things a lot easier.

30
00:01:31.837 --> 00:01:34.899
We'll look at adding a namespace to the top of our application,

31
00:01:34.899 --> 00:01:36.481
but in our example here,

32
00:01:36.481 --> 00:01:38.654
we're basically going to put an XML snippet at the

33
00:01:38.654 --> 00:01:39.750
top of our application context,

34
00:01:39.750 --> 00:01:42.349
and you'll know what it means in our bean namespace,

35
00:01:42.349 --> 00:01:44.921
and it helps us configure our files.

36
00:01:44.921 --> 00:01:47.838
Let's do that to our application now.

37
00:01:47.838 --> 00:01:52.984
Adding the applicationConfig.xml to our application is actually quite easy.

38
00:01:52.984 --> 00:01:55.395
You want to navigate down to source, main,

39
00:01:55.395 --> 00:01:56.870
but alongside of Java,

40
00:01:56.870 --> 00:02:00.253
there's another folder that was created when we created

41
00:02:00.253 --> 00:02:02.749
our Maven project called resources.

42
00:02:02.749 --> 00:02:05.947
And if you open yours up, there's nothing underneath yours.

43
00:02:05.947 --> 00:02:10.867
I have a notes.txt in here just so I don't have to type in a bunch

44
00:02:10.867 --> 00:02:13.545
of the XML configuration that we're going to do.

45
00:02:13.545 --> 00:02:17.908
This is one of the drawbacks to the Community Edition to IntelliJ.

46
00:02:17.908 --> 00:02:21.534
The ultimate paid edition actually has a dialog to

47
00:02:21.534 --> 00:02:23.536
help you create this XML file.

48
00:02:23.536 --> 00:02:25.720
The free version does not.

49
00:02:25.720 --> 00:02:27.356
So I want to right-click on source, main,

50
00:02:27.356 --> 00:02:37.000
resources and say New, File, and I want to name this applicationContext.xml,

51
00:02:37.000 --> 00:02:41.312
and click OK.

52
00:02:41.312 --> 00:02:43.723
And it will just give us a blank file.

53
00:02:43.723 --> 00:02:49.672
Now I've gone ahead and searched through the Spring documentation to copy

54
00:02:49.672 --> 00:02:56.889
this XML snippet that I'm about to paste in here in.

55
00:02:56.889 --> 00:02:59.329
You can do the same or you can pull this out of the

56
00:02:59.329 --> 00:03:04.222
resource files for the project, so if you navigate to our course description,

57
00:03:04.222 --> 00:03:09.062
there is a resource download section to where you can pull the

58
00:03:09.062 --> 00:03:12.681
files down if you don't want to go searching the internet for the

59
00:03:12.681 --> 00:03:16.791
Spring XML configuration namespaces, but here it is.

60
00:03:16.791 --> 00:03:20.425
So now we have our file.

61
00:03:20.425 --> 00:03:24.099
It's our beans namespace already defined in this,

62
00:03:24.099 --> 00:03:26.419
and this is the root namespace that you typically will

63
00:03:26.419 --> 00:03:28.376
use for a Spring configuration file.

64
00:03:28.376 --> 00:03:33.691
What this does as we're going through and doing help and

65
00:03:33.691 --> 00:03:36.174
context-sensitive help inside of our XML file,

66
00:03:36.174 --> 00:03:42.219
when we start doing a bean definition by typing a left angle bracket,

67
00:03:42.219 --> 00:03:45.595
you'll see that it pops up the helper context for the different

68
00:03:45.595 --> 00:03:48.327
things that we can put in this namespace.

69
00:03:48.327 --> 00:03:52.947
And that's all done by just including this XML schema

70
00:03:52.947 --> 00:03:55.910
definition at the top of our file.

71
00:03:55.910 --> 00:03:59.067
Let's go through and look at what the namespace is now by us

72
00:03:59.067 --> 00:04:06.000
and how that kind of helps out in us developing the XML configuration a little bit better.

