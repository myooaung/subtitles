WEBVTT
1
00:00:01.393 --> 00:00:04.552
Spring Expression Language, or SpEL as it's often abbreviated,

2
00:00:04.552 --> 00:00:08.759
is a powerful expression language from the Spring Framework.

3
00:00:08.759 --> 00:00:10.735
From my experience, it's typically used in libraries,

4
00:00:10.735 --> 00:00:15.217
but it can also be used to do some convenient changes to your code.

5
00:00:15.217 --> 00:00:18.190
Using it, you can manipulate the object graph.

6
00:00:18.190 --> 00:00:20.296
This simply means that once an object is created,

7
00:00:20.296 --> 00:00:24.898
you can use the expression language to manipulate that object.

8
00:00:24.898 --> 00:00:28.659
You can also use it to evaluate values at runtime and change

9
00:00:28.659 --> 00:00:30.941
the behavior of your code accordingly.

10
00:00:30.941 --> 00:00:36.748
It can also be used to evaluate and manipulate your configuration.

11
00:00:36.748 --> 00:00:42.781
Let's look at how we can inject some values at runtime into our application.

12
00:00:42.781 --> 00:00:45.086
Without building a more complex application,

13
00:00:45.086 --> 00:00:49.676
let's add a seed value to our model object.

14
00:00:49.676 --> 00:00:52.808
I'm going to open up our Speaker.

15
00:00:52.808 --> 00:00:57.121
And a lot of times as we are doing security and other things like that,

16
00:00:57.121 --> 00:01:00.423
we'll have values that get seeded at runtime.

17
00:01:00.423 --> 00:01:06.900
I'm going to add a private double, and I'll call this the seedNum.

18
00:01:06.900 --> 00:01:09.778
And then I'm going to come down below and just generate

19
00:01:09.778 --> 00:01:13.004
some getters and setters for this object.

20
00:01:13.004 --> 00:01:19.905
So I'll right-click, say Generate, and we'll do the Getter and Setter.

21
00:01:19.905 --> 00:01:22.853
Click OK and save this code.

22
00:01:22.853 --> 00:01:24.652
And now I want to go up to my

23
00:01:24.652 --> 00:01:28.181
HibernateSpeakerRepositoryImpl where I create this.

24
00:01:28.181 --> 00:01:29.873
And inside of here,

25
00:01:29.873 --> 00:01:34.586
I'm going to actually use the Spring Expression Language to grab

26
00:01:34.586 --> 00:01:38.464
a value out of the java.lang .Math library.

27
00:01:38.464 --> 00:01:40.522
So I'm going to type in here the annotation @Value,

28
00:01:40.522 --> 00:01:46.368
and inside of here, I want to do the pound sign,

29
00:01:46.368 --> 00:01:58.809
the open curly brace, and say T( java.lang .Math ),

30
00:01:58.809 --> 00:02:01.465
and I'm basically grabbing the math object here and

31
00:02:01.465 --> 00:02:06.907
saying .random for a random number, and this gives me a very small decimal,

32
00:02:06.907 --> 00:02:14.034
so I'm going to times that by 100, and then close that curly brace off.

33
00:02:14.034 --> 00:02:19.525
And now I want to go ahead and put that in an object,

34
00:02:19.525 --> 00:02:26.943
so I'm going to say private double seedNum and save that.

35
00:02:26.943 --> 00:02:29.975
And now I can, at compilation time,

36
00:02:29.975 --> 00:02:34.603
take that value that's added at runtime and inject it into my code.

37
00:02:34.603 --> 00:02:37.721
So, I'm going to go ahead and say speaker.setSeedNum,

38
00:02:37.721 --> 00:02:45.988
and I'll pass in seedNum and save this.

39
00:02:45.988 --> 00:02:49.751
So now this object's been initialized on line 19,

40
00:02:49.751 --> 00:02:55.569
and we can store that value inside of our speaker object.

41
00:02:55.569 --> 00:02:58.387
And a use case for this is, like I mentioned before,

42
00:02:58.387 --> 00:03:00.221
when you're doing security and you create passwords,

43
00:03:00.221 --> 00:03:05.708
a lot of times those are salted or seeded with a value that you pass in,

44
00:03:05.708 --> 00:03:10.895
and they'll often times use a calendar day or some random number,

45
00:03:10.895 --> 00:03:13.119
so that's what we're going to do here.

46
00:03:13.119 --> 00:03:17.427
We'll save this, open up my Application to run this,

47
00:03:17.427 --> 00:03:21.734
and I'm just going to grab this line.

48
00:03:21.734 --> 00:03:23.617
And since we're getting a lot of stuff in here,

49
00:03:23.617 --> 00:03:27.237
I'm going to comment out these two System.out .printlns.

50
00:03:27.237 --> 00:03:27.985
In fact,

51
00:03:27.985 --> 00:03:32.586
I'll even comment out this SpeakerService where I'm getting the second instance,

52
00:03:32.586 --> 00:03:39.326
and we'll do getSeedNum here.

53
00:03:39.326 --> 00:03:42.068
And let's run our application and see what it generates.

54
00:03:42.068 --> 00:03:45.250
Now that we've got everything compiled,

55
00:03:45.250 --> 00:03:50.869
you can see here where we've still used our no arguments constructor.

56
00:03:50.869 --> 00:03:53.038
We have our post construct in there.

57
00:03:53.038 --> 00:03:56.972
We have our name and our calendar instance that we're grabbing

58
00:03:56.972 --> 00:04:02.657
from up above and the value of our seeded values.

59
00:04:02.657 --> 00:04:05.979
We have 94.888, and it continues on.

60
00:04:05.979 --> 00:04:08.925
That's a seeded value that we passed into our application,

61
00:04:08.925 --> 00:04:11.462
using the Spring Expression Language.

62
00:04:11.462 --> 00:04:15.650
So a very powerful way to grab a random number,

63
00:04:15.650 --> 00:04:18.140
and you can do a lot of stuff with this.

64
00:04:18.140 --> 00:04:21.011
We can manipulate stuff out of a list or pull specific things,

65
00:04:21.011 --> 00:04:24.616
we can evaluate something to false or true at a runtime value,

66
00:04:24.616 --> 00:04:32.000
but just as a basic example of how easy it is to get this inside of your application using this expression language.

