WEBVTT
1
00:00:01.348 --> 00:00:05.005
The solution we're looking to get from Spring or from using the Spring

2
00:00:05.005 --> 00:00:10.214
Framework is that we can remove configuration code or lookup code,

3
00:00:10.214 --> 00:00:13.638
and developers can focus on the business needs.

4
00:00:13.638 --> 00:00:15.967
Like I said, that's a big one for me,

5
00:00:15.967 --> 00:00:18.744
and it's the business that doesn't care that I have a try

6
00:00:18.744 --> 00:00:21.721
catch block or how I handle this exception.

7
00:00:21.721 --> 00:00:25.983
They care that when we ask for a car, we get that car back.

8
00:00:25.983 --> 00:00:28.924
Our code can also focus on testing.

9
00:00:28.924 --> 00:00:30.221
So in that previous slide,

10
00:00:30.221 --> 00:00:34.638
it really wasn't that testable as far as things were hard coded in there.

11
00:00:34.638 --> 00:00:37.166
I have a DriverManager that I'm getting a connection.

12
00:00:37.166 --> 00:00:38.712
Where's that connection coming from?

13
00:00:38.712 --> 00:00:40.277
That type of stuff.

14
00:00:40.277 --> 00:00:45.064
Spring also helps us with doing annotation or XML-based development,

15
00:00:45.064 --> 00:00:48.256
as well as the Java configuration that we're going to mainly focus on.

16
00:00:48.256 --> 00:00:52.318
If we want to annotate our code rather than having so

17
00:00:52.318 --> 00:00:56.756
much configuration code in there, Spring can help us with all of that as well.

18
00:00:56.756 --> 00:01:02.034
To achieve all of this, Spring encourages development through interfaces.

19
00:01:02.034 --> 00:01:05.669
We will dive into this concept deeper in the implementation of our code,

20
00:01:05.669 --> 00:01:08.742
but interface-driven development really changes the

21
00:01:08.742 --> 00:01:10.871
approach we take with our code.

22
00:01:10.871 --> 00:01:13.205
So it makes things easier to test,

23
00:01:13.205 --> 00:01:15.864
makes things more focused on what the business needs,

24
00:01:15.864 --> 00:01:26.000
and removes that configuration lookup code through doing annotations or Java-based configuration or even the XML-based approach as well.

