1
00:00:01,257 --> 00:00:03,502
To recap what we did in this module,

2
00:00:03,502 --> 00:00:06,860
we learned that instead of an application context that we could

3
00:00:06,860 --> 00:00:12,036
configure our code using the Java AppConfig file.

4
00:00:12,036 --> 00:00:15,789
We use an @Configuration annotation to define files

5
00:00:15,789 --> 00:00:17,946
that contain configuration code.

6
00:00:17,946 --> 00:00:23,532
We can have multiple files that are containing configuration information.

7
00:00:23,532 --> 00:00:25,502
They just need to have that annotation at the top,

8
00:00:25,502 --> 00:00:28,049
and then when we wire up our application wherever

9
00:00:28,049 --> 00:00:32,920
our main method's contained at, pass in those config classes.

10
00:00:32,920 --> 00:00:37,129
We can just define a bean using the bean annotation.

11
00:00:37,129 --> 00:00:39,191
After setting up the configuration of the beans,

12
00:00:39,191 --> 00:00:41,875
we walked through setter and constructor injection

13
00:00:41,875 --> 00:00:44,239
using these configuration types.

14
00:00:44,239 --> 00:00:47,314
I like this approach a lot since, as we mentioned before,

15
00:00:47,314 --> 00:00:49,284
it seems to remove some of the mystery of what's

16
00:00:49,284 --> 00:00:51,647
going on behind the scenes in Spring.

17
00:00:51,647 --> 00:00:54,921
It's literally just writing Java code and wiring those

18
00:00:54,921 --> 00:00:56,862
beans up in that configuration up,

19
00:00:56,862 --> 00:01:01,844
which can sometimes seem like a mystery with some of the other concepts.

20
00:01:01,844 --> 00:01:05,251
We started to dig into some of the more wiring concepts that

21
00:01:05,251 --> 00:01:07,947
are a little bit advanced with Spring,

22
00:01:07,947 --> 00:01:10,232
but let's dive deeper into those because we really

23
00:01:10,232 --> 00:01:11,814
just scratched the surface on those,

24
00:01:11,814 --> 00:01:20,000
and let's go into autowiring deeper in this next module and focus on autowiring and component scanning inside of Spring.

