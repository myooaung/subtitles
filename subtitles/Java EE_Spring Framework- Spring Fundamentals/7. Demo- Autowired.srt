1
00:00:01,214 --> 00:00:03,485
We need to do a handful of things to get our application

2
00:00:03,485 --> 00:00:05,737
set up to use autowiring correctly,

3
00:00:05,737 --> 00:00:10,086
and that has more to do with just how we're doing the demos than you

4
00:00:10,086 --> 00:00:13,084
need to do this in every application you've done.

5
00:00:13,084 --> 00:00:14,741
We're trying to show a bunch of different techniques,

6
00:00:14,741 --> 00:00:19,444
and this makes it a little bit more interesting showing some of those.

7
00:00:19,444 --> 00:00:22,321
To start with, let's open up our SpeakerServiceImpl,

8
00:00:22,321 --> 00:00:25,481
and inside of here,

9
00:00:25,481 --> 00:00:28,347
we had gotten rid of our default no args

10
00:00:28,347 --> 00:00:30,976
constructor in one of the previous demos.

11
00:00:30,976 --> 00:00:35,854
Let's add that back in because we're going to need that for our setter

12
00:00:35,854 --> 00:00:40,597
injection demo that we're going to use autowiring on.

13
00:00:40,597 --> 00:00:44,823
And I want to add a couple of log statements just

14
00:00:44,823 --> 00:00:50,062
using simple System.out .println, so we'll say System.out .println,

15
00:00:50,062 --> 00:00:53,639
and inside of here,

16
00:00:53,639 --> 00:01:07,527
we'll say that we are in the SpeakerServiceImpl no args constructor,

17
00:01:07,527 --> 00:01:09,989
and I'm going to go ahead and copy this because we're going to add

18
00:01:09,989 --> 00:01:13,052
some of these to a few different methods here.

19
00:01:13,052 --> 00:01:20,208
Let's go to the next one, and we'll say that this is the repository constructor,

20
00:01:20,208 --> 00:01:24,430
SpeakerServiceImpl repository constructor.

21
00:01:24,430 --> 00:01:27,495
And the last log statement that we'll add is one in the

22
00:01:27,495 --> 00:01:33,669
setter for the SpeakerServiceImpl, and we'll say that we are in the setter,

23
00:01:33,669 --> 00:01:36,923
and just save that, now, pretty straightforward.

24
00:01:36,923 --> 00:01:41,004
All we did was add a no arguments constructor and the

25
00:01:41,004 --> 00:01:44,991
SpeakerServiceImpl log statements and setter log statements.

26
00:01:44,991 --> 00:01:46,905
Let's go back to our AppConfig.

27
00:01:46,905 --> 00:01:48,808
As of right now,

28
00:01:48,808 --> 00:01:54,283
we are still using the constructor injection that we've wired up.

29
00:01:54,283 --> 00:01:56,520
It's really actually not injecting.

30
00:01:56,520 --> 00:02:00,830
It is configuring the bean, but we are just adding that in there.

31
00:02:00,830 --> 00:02:03,142
Let's comment this out,

32
00:02:03,142 --> 00:02:08,130
and I'm going to leave these in here just so you can see as we go

33
00:02:08,130 --> 00:02:12,531
through each instance of these what the configuration was from the

34
00:02:12,531 --> 00:02:20,265
previous to the next and say new SpeakerServiceImpl.

35
00:02:20,265 --> 00:02:27,106
And if we ran this right now, we are not wiring in the repository anywhere.

36
00:02:27,106 --> 00:02:29,941
Since we want to use setter injection to begin with,

37
00:02:29,941 --> 00:02:33,677
let's go back to our SpeakerServiceImpl and go to that

38
00:02:33,677 --> 00:02:39,045
setRepository and say @Autowired.

39
00:02:39,045 --> 00:02:40,752
When I save this,

40
00:02:40,752 --> 00:02:47,840
it's going to automatically inject that SpeakerRepository bean into this setter.

41
00:02:47,840 --> 00:02:52,595
So when we run this code, we should see the no arguments constructor get ran,

42
00:02:52,595 --> 00:02:56,466
and then we should see the log statement for this

43
00:02:56,466 --> 00:02:59,602
SpeakerServiceImpl setter also get ran.

44
00:02:59,602 --> 00:03:04,170
Let's go back to our application code and run this.

45
00:03:04,170 --> 00:03:11,346
And you'll see that we were in the no args constructor,

46
00:03:11,346 --> 00:03:13,852
and then the setter was called,

47
00:03:13,852 --> 00:03:16,668
and then our other log statements from the other stuff we were

48
00:03:16,668 --> 00:03:19,936
doing with our singleton scopes are dumped out.

49
00:03:19,936 --> 00:03:22,268
So, very simply,

50
00:03:22,268 --> 00:03:28,149
our code was changed to do the no arguments constructor

51
00:03:28,149 --> 00:03:34,878
and setter injection inside of here, and then we went to our SpeakerServiceImpl,

52
00:03:34,878 --> 00:03:37,742
added that no args constructor in here,

53
00:03:37,742 --> 00:03:42,277
and just specified that we wanted this method to be

54
00:03:42,277 --> 00:03:45,034
autowired and injected this way.

55
00:03:45,034 --> 00:03:47,443
What if we want to do constructor injection though?

56
00:03:47,443 --> 00:03:51,850
We were using that before, and we have our constructor still in here.

57
00:03:51,850 --> 00:03:57,236
I'm going to show you how to do this where your beans are fully autowired,

58
00:03:57,236 --> 00:04:00,493
not just individual methods because it shows that demonstration,

59
00:04:00,493 --> 00:04:03,706
that example a little bit more concrete.

60
00:04:03,706 --> 00:04:06,751
You'll also notice that we talked about the component scanner before,

61
00:04:06,751 --> 00:04:08,503
but we haven't configured that yet,

62
00:04:08,503 --> 00:04:12,756
and that's because we haven't configured our beans to be fully autowired,

63
00:04:12,756 --> 00:04:15,015
just on individual methods.

64
00:04:15,015 --> 00:04:22,000
Let's talk about a technique called stereotype annotations first so that we can fully autowire our beans up.

