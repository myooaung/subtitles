WEBVTT
1
00:00:01.144 --> 00:00:05.340
Early on, Spring got a bad reputation for having a lot of XML configuration,

2
00:00:05.340 --> 00:00:09.360
and people just didn't care for going through and wiring up every bean and

3
00:00:09.360 --> 00:00:11.886
all the references and everything that went with it.

4
00:00:11.886 --> 00:00:12.928
To counter this,

5
00:00:12.928 --> 00:00:15.868
they introduced a mechanism called autowiring for

6
00:00:15.868 --> 00:00:18.442
you to autowire beans together.

7
00:00:18.442 --> 00:00:23.160
There are four types of autowiring that you can do on a bean.

8
00:00:23.160 --> 00:00:25.261
The first type is byType,

9
00:00:25.261 --> 00:00:30.045
and this allows a property to be autowired if exactly one bean of

10
00:00:30.045 --> 00:00:33.035
that property type exists within a container.

11
00:00:33.035 --> 00:00:36.457
So let's say I have a car object that we're injecting in.

12
00:00:36.457 --> 00:00:41.014
If there's only one car object of that type of that class,

13
00:00:41.014 --> 00:00:42.993
then we can inject it in.

14
00:00:42.993 --> 00:00:46.940
But if I have two types of cars, so two car objects with different names,

15
00:00:46.940 --> 00:00:50.989
I'll get a fatal exception because it can't choose which one of those

16
00:00:50.989 --> 00:00:53.885
two because it's just looking at the class type.

17
00:00:53.885 --> 00:00:55.571
The second option is byName,

18
00:00:55.571 --> 00:00:59.779
and that's why you've seen in every example I've named my beans.

19
00:00:59.779 --> 00:01:01.780
We could actually go through without naming them,

20
00:01:01.780 --> 00:01:05.082
and it would've chose byType by default.

21
00:01:05.082 --> 00:01:07.938
ByName fixes that problem of byType.

22
00:01:07.938 --> 00:01:09.243
They're both good to have, though,

23
00:01:09.243 --> 00:01:13.264
because byType will allow us to only create one instance of a class

24
00:01:13.264 --> 00:01:16.913
in our container or in our applicationContext.

25
00:01:16.913 --> 00:01:21.079
ByName allows us to choose specifically by the name of

26
00:01:21.079 --> 00:01:25.822
the object that we're wiring up, so if I have a car and it's of type car,

27
00:01:25.822 --> 00:01:29.285
but byName is Honda, it's only going to inject Honda.

28
00:01:29.285 --> 00:01:32.580
If I have a Toyota, it's not going to choose that one,

29
00:01:32.580 --> 00:01:35.746
and I won't get an exception based off of that.

30
00:01:35.746 --> 00:01:41.357
The next option is by constructor, and constructor is analogous to byType,

31
00:01:41.357 --> 00:01:44.348
but it applies to constructor arguments.

32
00:01:44.348 --> 00:01:47.993
Now it has a little bit of a flavor of byName in there too because arguments can

33
00:01:47.993 --> 00:01:51.524
be indexed or named and injected into our object that way.

34
00:01:51.524 --> 00:01:53.240
You do have to, obviously,

35
00:01:53.240 --> 00:01:56.109
have a matching constructor for arguments that you're trying to pass

36
00:01:56.109 --> 00:01:59.895
into it where the other two are kind of setter based.

37
00:01:59.895 --> 00:02:03.026
They need a default no arguments constructor.

38
00:02:03.026 --> 00:02:07.363
And the last option is no or none for autowiring.

39
00:02:07.363 --> 00:02:12.237
So if I specify no, it means that, no, it can't be autowired at all.

40
00:02:12.237 --> 00:02:16.125
Now a lot of people early on tried autowiring for just testing because they

41
00:02:16.125 --> 00:02:19.550
were concerned about it and how it performed in production.

42
00:02:19.550 --> 00:02:22.768
I've used lots of applications with autowiring in

43
00:02:22.768 --> 00:02:25.385
production and never ran into a problem with it.

44
00:02:25.385 --> 00:02:28.563
I probably have over 100 applications today deployed into

45
00:02:28.563 --> 00:02:34.000
production all configured with autowiring, and I've never seen a hiccup with it.

