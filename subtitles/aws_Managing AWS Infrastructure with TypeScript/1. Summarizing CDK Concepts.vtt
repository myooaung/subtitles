WEBVTT
1
00:00:01.940 --> 00:00:03.300
It's been a fun journey.

2
00:00:03.300 --> 00:00:05.980
I hope you've had the chance to take away some key topics as

3
00:00:05.980 --> 00:00:09.040
you progress further into your CDK career.

4
00:00:09.040 --> 00:00:12.000
Even if some or most of the content was already known to you,

5
00:00:12.000 --> 00:00:14.760
I hope you can benefit from playing with components in the full

6
00:00:14.760 --> 00:00:17.040
stack demo application in your own projects.

7
00:00:17.040 --> 00:00:19.060
Let me take a few minutes to summarize,

8
00:00:19.060 --> 00:00:21.920
check back in with Ellen and Josh and see how they're faring,

9
00:00:21.920 --> 00:00:28.140
and then show you a really cool CDK UI‑driven concept to charge you on your way.

10
00:00:28.140 --> 00:00:31.740
We first started in on learning about stacks and stack patterns.

11
00:00:31.740 --> 00:00:33.720
Now that you understand the fundamental differences

12
00:00:33.720 --> 00:00:35.670
between a stack and a construct,

13
00:00:35.670 --> 00:00:40.140
it's likely that you might spend more time building constructs than full stacks.

14
00:00:40.140 --> 00:00:42.870
If you do build constructs to be shared by the public,

15
00:00:42.870 --> 00:00:45.090
drop me a line so I can go see if I can use your

16
00:00:45.090 --> 00:00:47.640
constructs in some of my future projects.

17
00:00:47.640 --> 00:00:48.650
In either case,

18
00:00:48.650 --> 00:00:51.930
by now you can hopefully see that organizing stacks is just a

19
00:00:51.930 --> 00:00:54.740
simple matter of organizing classes as you would in your normal

20
00:00:54.740 --> 00:00:56.740
application development projects.

21
00:00:56.740 --> 00:01:00.790
Remember, environments in AWS can get quite large, so always build

22
00:01:00.790 --> 00:01:04.330
your stacks one organized block at a time and don't be shy to use

23
00:01:04.330 --> 00:01:06.840
object‑oriented principles when you do.

24
00:01:06.840 --> 00:01:07.360
From there,

25
00:01:07.360 --> 00:01:11.740
we learned about environmental concepts as they relate to the CDK.

26
00:01:11.740 --> 00:01:15.060
Building an environment can be made to be extremely simple and take

27
00:01:15.060 --> 00:01:18.830
full advantage of CI/CD principles that you're likely very used to

28
00:01:18.830 --> 00:01:20.440
at this point in your career.

29
00:01:20.440 --> 00:01:21.000
Hopefully,

30
00:01:21.000 --> 00:01:23.650
you can now think about how you would build a full pipeline with

31
00:01:23.650 --> 00:01:28.470
IaC that would include fully‑reusable components from dev all the

32
00:01:28.470 --> 00:01:30.320
way through to a production environment.

33
00:01:30.320 --> 00:01:32.650
Next time your boss asks for another environment,

34
00:01:32.650 --> 00:01:35.870
first tell him how hard it's going to be to build and then go deploy

35
00:01:35.870 --> 00:01:38.940
your existing IaC with different target variables.

36
00:01:38.940 --> 00:01:42.740
Okay, the fib to your boss is entirely up to you.

37
00:01:42.740 --> 00:01:45.370
We then dove into a full‑bore module on learning about

38
00:01:45.370 --> 00:01:48.090
parameters and variable context storage principles,

39
00:01:48.090 --> 00:01:51.550
all under the guise of avoiding the pitfalls of tight coupling.

40
00:01:51.550 --> 00:01:54.240
You now have a full quiver of arrows to use to store all

41
00:01:54.240 --> 00:01:56.820
types of variables and pass them around to various

42
00:01:56.820 --> 00:01:59.610
components and resources. Between context,

43
00:01:59.610 --> 00:02:03.330
environment variables, and the SSM parameter store you should be taking

44
00:02:03.330 --> 00:02:06.690
center stage on your discussion with architects on how and where to store

45
00:02:06.690 --> 00:02:10.300
transient global data in your enterprise. In all cases,

46
00:02:10.300 --> 00:02:15.140
take the concept of loose coupling as a guiding principle going forward.

47
00:02:15.140 --> 00:02:17.280
My favorite module came next,

48
00:02:17.280 --> 00:02:21.040
in which case we learned about building custom construct libraries.

49
00:02:21.040 --> 00:02:23.750
My constructs will remain in my npmjs account,

50
00:02:23.750 --> 00:02:26.140
so feel free to use them as you see fit.

51
00:02:26.140 --> 00:02:28.870
Hopefully it's clear how building a full library of custom

52
00:02:28.870 --> 00:02:31.940
constructs can make the composition of stacks and environments

53
00:02:31.940 --> 00:02:34.740
very straightforward in your enterprise.

54
00:02:34.740 --> 00:02:37.260
We took a little time as well to talk about testing while

55
00:02:37.260 --> 00:02:39.550
still under the flag of construct libraries.

56
00:02:39.550 --> 00:02:43.060
Testing with Jest can apply to all your CDK projects and provide the same

57
00:02:43.060 --> 00:02:47.270
quality benefits you get with unit testing general applications. In that

58
00:02:47.270 --> 00:02:51.240
regard, make this type of testing a standard practice in your organization

59
00:02:51.240 --> 00:02:56.510
going forward. And while truly not specific only to security, aspects

60
00:02:56.510 --> 00:03:00.870
showed us a way to apply cross‑cutting, tag‑style logic to our resources to

61
00:03:00.870 --> 00:03:01.820
promote consistency,

62
00:03:01.820 --> 00:03:06.050
security, and even convenience. I encourage you to use aspects as a

63
00:03:06.050 --> 00:03:14.000
standard practice in tandem with Jest testing to create a consistent testing and security model in your development practices.

