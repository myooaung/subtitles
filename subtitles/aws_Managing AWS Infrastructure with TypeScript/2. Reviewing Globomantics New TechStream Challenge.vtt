WEBVTT
1
00:00:02.040 --> 00:00:04.360
If you've followed along this far with the learning path,

2
00:00:04.360 --> 00:00:06.610
you know that Globomantics has gone a long way towards

3
00:00:06.610 --> 00:00:10.640
adopting IaC principles with the AWS CDK.

4
00:00:10.640 --> 00:00:11.950
In this new scenario,

5
00:00:11.950 --> 00:00:14.200
Globomantics has just acquired a boutique software

6
00:00:14.200 --> 00:00:16.140
development company called TechStream.

7
00:00:16.140 --> 00:00:19.040
Let's see how that impacts their business.

8
00:00:19.040 --> 00:00:23.730
To this point, Globomantics has achieved a higher level of CDK and IaC maturity.

9
00:00:23.730 --> 00:00:26.160
If you remember from the first few courses,

10
00:00:26.160 --> 00:00:29.470
they first migrated all their assets to AWS,

11
00:00:29.470 --> 00:00:32.010
first as a proof of concept, and then ultimately,

12
00:00:32.010 --> 00:00:33.430
after those proofs of concept,

13
00:00:33.430 --> 00:00:36.240
they fully embraced the cloud in their organization.

14
00:00:36.240 --> 00:00:38.930
They then embarked upon a key project for the organization to build a

15
00:00:38.930 --> 00:00:42.500
document management system through the CDK using Fargate,

16
00:00:42.500 --> 00:00:47.140
Lambda, and API Gateway, and several other resources.

17
00:00:47.140 --> 00:00:49.260
TechStream is a highly advanced boutique software

18
00:00:49.260 --> 00:00:51.740
development company that's built dozens of enterprise‑grade

19
00:00:51.740 --> 00:00:54.340
applications in varying industries.

20
00:00:54.340 --> 00:00:56.440
It goes without saying that they're masters of mobile

21
00:00:56.440 --> 00:00:58.920
technologies, front‑end tech such as React,

22
00:00:58.920 --> 00:01:02.440
Angular, and have a strong node presence for building microservices.

23
00:01:02.440 --> 00:01:06.450
However, as strong engineers, they're not overly skilled,

24
00:01:06.450 --> 00:01:09.080
or staffed, for that matter, at building reusable,

25
00:01:09.080 --> 00:01:10.200
efficient infrastructure.

26
00:01:10.200 --> 00:01:13.310
They run many client systems through on‑premises data

27
00:01:13.310 --> 00:01:15.910
centers and follow many anti‑patterns of old,

28
00:01:15.910 --> 00:01:19.570
holding back their ability to more efficiently manage platforms.

29
00:01:19.570 --> 00:01:22.400
They've always been interested in the cloud but haven't had the time

30
00:01:22.400 --> 00:01:25.240
to investigate the most appropriate way to begin.

31
00:01:25.240 --> 00:01:28.570
As a result, their infrastructure takes a monolithic approach,

32
00:01:28.570 --> 00:01:31.390
with single environments overly sharing web servers,

33
00:01:31.390 --> 00:01:35.840
application servers, database clusters, among other layers.

34
00:01:35.840 --> 00:01:39.550
So Ellen, the CTO, and Josh, the cloud architect at Globomantics,

35
00:01:39.550 --> 00:01:41.740
have a new challenge on their hands.

36
00:01:41.740 --> 00:01:45.710
However, instead of simply building CDK constructs as they have in the past,

37
00:01:45.710 --> 00:01:47.950
the organization wants to take this as an opportunity to

38
00:01:47.950 --> 00:01:50.430
begin embracing a stronger sense of reuse.

39
00:01:50.430 --> 00:01:52.150
To further this necessity,

40
00:01:52.150 --> 00:01:54.230
the CEO has announced that another similar

41
00:01:54.230 --> 00:01:57.040
acquisition is not far off in the distance.

42
00:01:57.040 --> 00:01:57.970
To get started,

43
00:01:57.970 --> 00:02:01.210
Ellen's given Josh the direction to lift and shift a portion of the

44
00:02:01.210 --> 00:02:04.840
current TechStream infrastructure as is to AWS.

45
00:02:04.840 --> 00:02:07.290
Josh was able to accomplish this within a week,

46
00:02:07.290 --> 00:02:09.530
at which point he used CloudFormer to assemble the

47
00:02:09.530 --> 00:02:12.890
resources in CloudFormation. Josh, being crafty,

48
00:02:12.890 --> 00:02:16.840
used the CDK disassembler to disassemble the CloudFormation JSON

49
00:02:16.840 --> 00:02:20.440
into one monolithic level‑one set of constructs.

50
00:02:20.440 --> 00:02:20.910
So here,

51
00:02:20.910 --> 00:02:23.810
Josh and Ellen find themselves with the daunting task of

52
00:02:23.810 --> 00:02:27.490
building reusable CDK constructs in the process of integrating a

53
00:02:27.490 --> 00:02:30.750
first‑phase portion of TechStream's infrastructure. Where in the

54
00:02:30.750 --> 00:02:32.460
world do they get started?

55
00:02:32.460 --> 00:02:33.680
To make matters worse,

56
00:02:33.680 --> 00:02:36.550
the announcement made by the CEO is putting pressure on them to engineer a

57
00:02:36.550 --> 00:02:40.740
construct library to take principles of reuse to the next level.

58
00:02:40.740 --> 00:02:43.090
By the time we're done with this, Ellen says,

59
00:02:43.090 --> 00:02:45.640
we're going to be able to take on any acquisition.

60
00:02:45.640 --> 00:02:47.110
As a final sentiment,

61
00:02:47.110 --> 00:02:49.400
Ellen wants to fully embrace the strong development

62
00:02:49.400 --> 00:02:52.190
skills of the TechStream engineers by empowering them to

63
00:02:52.190 --> 00:02:53.560
keep doing what they're good at,

64
00:02:53.560 --> 00:02:55.830
with the satisfaction that their work can easily be

65
00:02:55.830 --> 00:02:58.340
deployed n just about any configuration.

66
00:02:58.340 --> 00:02:59.460
So to summarize,

67
00:02:59.460 --> 00:03:03.740
the new GTS entity is first moving a portion of their systems to AWS,

68
00:03:03.740 --> 00:03:06.400
and then specifically they're moving into CloudFormation.

69
00:03:06.400 --> 00:03:09.940
Where they're stuck is building the reusable CDK assets with

70
00:03:09.940 --> 00:03:12.240
the most efficient patterns possible.

71
00:03:12.240 --> 00:03:15.020
Before we dive into learning about responsible stack patterns,

72
00:03:15.020 --> 00:03:20.000
let's take a look at the demo materials we'll be using for the course in the next clip.

