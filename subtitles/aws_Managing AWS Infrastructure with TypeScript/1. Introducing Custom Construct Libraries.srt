1
00:00:02,040 --> 00:00:03,660
In every course I create,

2
00:00:03,660 --> 00:00:07,540
I always end up with some favorite module or clip I get to talk about.

3
00:00:07,540 --> 00:00:10,240
Sometimes this is just because it's a fun subject,

4
00:00:10,240 --> 00:00:12,010
and other times it's because I think it's a topic

5
00:00:12,010 --> 00:00:14,340
where we all get the most benefit.

6
00:00:14,340 --> 00:00:16,730
In this case, it's a bit of all of the above.

7
00:00:16,730 --> 00:00:20,010
Everything you've learned so far leads up to the super exciting

8
00:00:20,010 --> 00:00:23,050
topic that allows you to go out and create your own constructs

9
00:00:23,050 --> 00:00:27,040
and expose them for others to reuse.

10
00:00:27,040 --> 00:00:29,940
So in this module, here's what we'll do.

11
00:00:29,940 --> 00:00:33,490
First, we'll spend a few minutes setting up a registry in npmjs.

12
00:00:33,490 --> 00:00:36,710
Npmjs is free for public packages, just like GitHub,

13
00:00:36,710 --> 00:00:37,440
in fact,

14
00:00:37,440 --> 00:00:40,430
they're owned by GitHub now. There are a million tools out

15
00:00:40,430 --> 00:00:42,400
there where you can set up your own registry running

16
00:00:42,400 --> 00:00:45,140
privately in your own AWS account.

17
00:00:45,140 --> 00:00:47,510
I won't show it because it's beyond the scope of this course,

18
00:00:47,510 --> 00:00:50,540
but setting up a Verdaccio server on an EC2 instance

19
00:00:50,540 --> 00:00:53,140
literally takes about 10 minutes.

20
00:00:53,140 --> 00:00:55,360
They even have Docker images for setting it up,

21
00:00:55,360 --> 00:00:57,760
so there really is no barrier to entry on running it in

22
00:00:57,760 --> 00:01:00,240
ECS or another container registry.

23
00:01:00,240 --> 00:01:03,790
Head over to verdaccio.org, and I promise you'll agree how easy it is.

24
00:01:03,790 --> 00:01:06,500
In our case, we're going to use npmjs,

25
00:01:06,500 --> 00:01:09,330
and I'll keep the packages public so you can build stacks

26
00:01:09,330 --> 00:01:11,940
directly from my registry if you like.

27
00:01:11,940 --> 00:01:13,820
Once we get our registry up and running,

28
00:01:13,820 --> 00:01:16,740
we'll have a place to publish our new custom packages.

29
00:01:16,740 --> 00:01:17,220
As I said,

30
00:01:17,220 --> 00:01:20,460
it would be hard for me to build every single construct we have and still

31
00:01:20,460 --> 00:01:23,490
make the demo app easy to deploy, so we're going to build and deploy a

32
00:01:23,490 --> 00:01:28,510
static website S3‑bucket‑driven app that uses an S3 deployment and a

33
00:01:28,510 --> 00:01:30,640
CloudFront distribution in front of it.

34
00:01:30,640 --> 00:01:33,480
Once we get that published in our registry, we'll come back in

35
00:01:33,480 --> 00:01:36,920
and build a brand‑new Static Website App stack where we'll use

36
00:01:36,920 --> 00:01:41,050
our new custom construct. And, oh yeah, don't forget about testing.

37
00:01:41,050 --> 00:01:44,620
While I could go build a full course on testing CDK applications,

38
00:01:44,620 --> 00:01:47,980
I'll scratch the surface with tools out there such as Jest to

39
00:01:47,980 --> 00:01:51,040
ensure your constructs behave as you would expect.

40
00:01:51,040 --> 00:01:52,670
Alright, this is a fun one.

41
00:01:52,670 --> 00:01:55,790
So let's get through a few quick slides and spend all of our time in

42
00:01:55,790 --> 00:01:59,890
demos for the rest of the module. With a little bit of English slang

43
00:01:59,890 --> 00:02:01,950
to hammer the point home, it ain't magic,

44
00:02:01,950 --> 00:02:02,440
folks.

45
00:02:02,440 --> 00:02:06,040
It's just an npm registry where you publish your code.

46
00:02:06,040 --> 00:02:09,010
If you've never had any experience with setting up a registry,

47
00:02:09,010 --> 00:02:13,740
just head over to docs.npmjs.com and read through the docs.

48
00:02:13,740 --> 00:02:17,240
We'll be running a simple npm publish to get our code up into our registry.

49
00:02:17,240 --> 00:02:19,600
Now the documents explain how to version your code,

50
00:02:19,600 --> 00:02:22,940
how to set a profile, and how to connect to your registry.

51
00:02:22,940 --> 00:02:25,140
I'll go through that quickly in the publish demo as well,

52
00:02:25,140 --> 00:02:27,240
so you can see it in action.

53
00:02:27,240 --> 00:02:29,270
And if you've ever wondered why every time we have to

54
00:02:29,270 --> 00:02:31,740
install a CDK package you have to prepend it with

55
00:02:31,740 --> 00:02:34,750
@aws‑cdk, this is where you'll learn it.

56
00:02:34,750 --> 00:02:38,750
In short, packages referenced in this way are simply scoped packages,

57
00:02:38,750 --> 00:02:42,640
and in this obvious example, they privately belong to Amazon.

58
00:02:42,640 --> 00:02:45,980
Scoping allows you to create a suite of related packages that may have

59
00:02:45,980 --> 00:02:48,530
the same name as another user without a conflict.

60
00:02:48,530 --> 00:02:51,050
Unscoped packages are always public and private

61
00:02:51,050 --> 00:02:53,070
packages are always scoped, however,

62
00:02:53,070 --> 00:02:56,440
you can create scoped public packages as well.

63
00:02:56,440 --> 00:02:57,110
Inevitably,

64
00:02:57,110 --> 00:02:59,230
if you're going to get into the world of building constructs

65
00:02:59,230 --> 00:03:01,300
as private packages for your organization,

66
00:03:01,300 --> 00:03:04,310
as is how Globomantics will be, you'll logically be using

67
00:03:04,310 --> 00:03:08,460
organizations with npmjs or npm Enterprise in some paid account

68
00:03:08,460 --> 00:03:10,630
or potentially some other registry tool.

69
00:03:10,630 --> 00:03:14,010
If you haven't grasped a good use case to talk to your boss about yet,

70
00:03:14,010 --> 00:03:17,140
let's peek at a simple example.

71
00:03:17,140 --> 00:03:19,510
Many organizations might use buckets that include the

72
00:03:19,510 --> 00:03:21,740
highest level of security possible.

73
00:03:21,740 --> 00:03:23,450
Perhaps this is used by Legal,

74
00:03:23,450 --> 00:03:27,020
HR, Accounting or some other department that stores PII,

75
00:03:27,020 --> 00:03:30,140
credit card numbers or some other scoped information.

76
00:03:30,140 --> 00:03:31,020
In that case,

77
00:03:31,020 --> 00:03:33,950
you could set its required parameters to be allowed by only a

78
00:03:33,950 --> 00:03:37,200
select few pre‑created roles publicly blocked,

79
00:03:37,200 --> 00:03:40,310
heavily logged, include a stronger retention policy for

80
00:03:40,310 --> 00:03:43,890
data, versioned, and possibly set up or backed in multiple

81
00:03:43,890 --> 00:03:46,040
regions or availability zones.

82
00:03:46,040 --> 00:03:48,440
That's the simple basis for our Highly Secured

83
00:03:48,440 --> 00:03:50,470
Bucket construct for our business.

84
00:03:50,470 --> 00:03:53,230
I capitalized the letters, as we've turned it into a proper noun

85
00:03:53,230 --> 00:03:56,550
referring to our business's custom construct used by all

86
00:03:56,550 --> 00:03:59,240
appropriate secure or confidential affairs.

87
00:03:59,240 --> 00:04:01,040
Pretty simple concept, right?

88
00:04:01,040 --> 00:04:03,080
Hopefully it's clear that you can build just about anything

89
00:04:03,080 --> 00:04:05,680
that you can dream up and you can share it accordingly with

90
00:04:05,680 --> 00:04:07,100
your company or the world.

91
00:04:07,100 --> 00:04:09,370
At this point, I think we've talked about it enough.

92
00:04:09,370 --> 00:04:16,000
Let's jump forward to the next module and start getting our registry ready to host packages.

