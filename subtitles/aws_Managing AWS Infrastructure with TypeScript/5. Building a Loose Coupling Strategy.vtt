WEBVTT
1
00:00:02.040 --> 00:00:04.730
So I realize I took a little side turn there to talk about

2
00:00:04.730 --> 00:00:08.140
context and stack methods for VPC characteristics.

3
00:00:08.140 --> 00:00:11.320
However, in the goal of building loosely coupled applications,

4
00:00:11.320 --> 00:00:14.740
these dynamic properties are important to remain dynamic.

5
00:00:14.740 --> 00:00:17.000
The fastest way to violate this best practice is to

6
00:00:17.000 --> 00:00:19.100
hard code a VPC in a construct.

7
00:00:19.100 --> 00:00:22.860
That locks your construct essentially into a single

8
00:00:22.860 --> 00:00:24.540
region right out of the gate.

9
00:00:24.540 --> 00:00:27.630
Let's check back in with Ellen and Josh and see how they plan to achieve

10
00:00:27.630 --> 00:00:31.440
principles of loose coupling in their environments.

11
00:00:31.440 --> 00:00:34.540
Ellen is in the process of building policies around best practice

12
00:00:34.540 --> 00:00:38.340
architecture to explicitly avoid any tight coupling scenarios.

13
00:00:38.340 --> 00:00:41.550
These best practices and mandates are development guidelines that must be

14
00:00:41.550 --> 00:00:44.740
followed before any application can proceed through the pipeline.

15
00:00:44.740 --> 00:00:48.140
Among these best practices are a highly encouraged use of serverless

16
00:00:48.140 --> 00:00:50.690
technologies due to its inherent loose coupling nature,

17
00:00:50.690 --> 00:00:53.860
even though no current decision has been made on serverless frameworks.

18
00:00:53.860 --> 00:00:56.360
The SSM parameter store is required,

19
00:00:56.360 --> 00:00:58.900
and only approved environment characteristics are allowed as

20
00:00:58.900 --> 00:01:01.340
dictated by parameters are in the store.

21
00:01:01.340 --> 00:01:03.360
In the event that VPCs are used,

22
00:01:03.360 --> 00:01:06.120
constructs using them are built with dynamic properties

23
00:01:06.120 --> 00:01:08.940
using context values and SSM parameters.

24
00:01:08.940 --> 00:01:12.390
Some semblance of an interface is required between components,

25
00:01:12.390 --> 00:01:15.310
such as an API gateway between a front‑end application and a

26
00:01:15.310 --> 00:01:17.840
datastore or Lambda functions therein.

27
00:01:17.840 --> 00:01:21.940
CDK applications require the use of concrete interfaces as well at the

28
00:01:21.940 --> 00:01:25.350
construct or stack level populated from dynamic properties,

29
00:01:25.350 --> 00:01:26.840
as we saw earlier.

30
00:01:26.840 --> 00:01:29.740
And then all resources must be immutable and expendable,

31
00:01:29.740 --> 00:01:33.940
such as an EC2 instance in a load balancer auto‑scaling group.

32
00:01:33.940 --> 00:01:36.670
As the organization progresses with more mature adoption,

33
00:01:36.670 --> 00:01:39.840
this strategy is intended to evolve.

34
00:01:39.840 --> 00:01:43.340
With a great foundation around many critical best practices and tools,

35
00:01:43.340 --> 00:01:46.940
we now finally get to explore the ultimate concept in promoting all these

36
00:01:46.940 --> 00:01:54.000
best practices, the creation of custom construct libraries, coming up in the next module.

