1
00:00:02,040 --> 00:00:05,740
Now that we have a reasonably clean and well‑organized system to work with,

2
00:00:05,740 --> 00:00:08,290
let's dive into the concept of promoting this application

3
00:00:08,290 --> 00:00:10,770
to multiple environments to start working with Ellen's

4
00:00:10,770 --> 00:00:13,040
requirement to boost reusability.

5
00:00:13,040 --> 00:00:14,490
As with stack patterns,

6
00:00:14,490 --> 00:00:16,090
there are dozens of different ways you can

7
00:00:16,090 --> 00:00:18,440
facilitate the multi‑environment concept,

8
00:00:18,440 --> 00:00:21,040
so let's dive in and look at a few.

9
00:00:21,040 --> 00:00:24,200
So before we jump into the deep end of the proverbial pool here,

10
00:00:24,200 --> 00:00:26,970
I wanted to first define what we mean by environments.

11
00:00:26,970 --> 00:00:30,840
The word environment, like the construct joke I made in the last module,

12
00:00:30,840 --> 00:00:33,640
is used in a variety of contexts.

13
00:00:33,640 --> 00:00:37,620
First, there exists the concept of the physical AWS environment.

14
00:00:37,620 --> 00:00:38,840
We all know this well.

15
00:00:38,840 --> 00:00:41,380
We have an environment or an account in which we have

16
00:00:41,380 --> 00:00:43,200
regions and availability zones.

17
00:00:43,200 --> 00:00:44,060
Unfortunately,

18
00:00:44,060 --> 00:00:46,600
the term environment tends to get watered down and

19
00:00:46,600 --> 00:00:48,640
overlaps the account a little bit.

20
00:00:48,640 --> 00:00:50,780
One might even call the overall entity with multiple

21
00:00:50,780 --> 00:00:52,940
accounts underneath it an environment.

22
00:00:52,940 --> 00:00:55,240
I use Control Tower in my organization,

23
00:00:55,240 --> 00:00:59,040
so I have an AWS organization with dozens of different accounts underneath it.

24
00:00:59,040 --> 00:01:01,940
See how that nomenclature gets a little confusing?

25
00:01:01,940 --> 00:01:02,510
Then,

26
00:01:02,510 --> 00:01:05,700
we as engineers talk about the term environment as a physical

27
00:01:05,700 --> 00:01:08,840
place where we can work on and/or deploy our code.

28
00:01:08,840 --> 00:01:12,350
Sure this may be in a single AWS environment in one region or it

29
00:01:12,350 --> 00:01:15,240
may span multiple accounts in multiple regions.

30
00:01:15,240 --> 00:01:17,160
Since we're teaching in the engineering world,

31
00:01:17,160 --> 00:01:19,630
I'm going to focus on an environment representing a place where you

32
00:01:19,630 --> 00:01:22,340
physically deploy your infrastructure is code.

33
00:01:22,340 --> 00:01:22,890
To that end,

34
00:01:22,890 --> 00:01:24,970
an environment will be a collection of stacks

35
00:01:24,970 --> 00:01:27,240
representing our deployment target.

36
00:01:27,240 --> 00:01:31,270
Taking that concept one level deeper, environments represent a sandbox in which

37
00:01:31,270 --> 00:01:34,840
developers might work independently while they develop code, a dev environment

38
00:01:34,840 --> 00:01:38,060
to which a team of developers might deploy and integrate feature branches or

39
00:01:38,060 --> 00:01:42,560
code changes, higher level pre‑prod environments that more closely represent

40
00:01:42,560 --> 00:01:46,280
production and facilitate a deployment process through to production. and then

41
00:01:46,280 --> 00:01:49,920
lastly a production environment where live code is usually running for users

42
00:01:49,920 --> 00:01:51,340
and clients.

43
00:01:51,340 --> 00:01:54,910
If your organization does use any of these types of code environments,

44
00:01:54,910 --> 00:01:58,890
think about some of the characteristics of each. First, size and capacity of

45
00:01:58,890 --> 00:02:02,450
resources is a huge concept that needs to be controlled to efficiently manage

46
00:02:02,450 --> 00:02:06,780
costs. If you're using EC2 instances, you certainly wouldn't want to ratchet up

47
00:02:06,780 --> 00:02:09,540
production‑grade large AMIs for this purpose.

48
00:02:09,540 --> 00:02:10,240
In most cases,

49
00:02:10,240 --> 00:02:12,810
developers are perfectly happy with t2.micro or nano

50
00:02:12,810 --> 00:02:15,440
instances or even free tier instances.

51
00:02:15,440 --> 00:02:17,540
Think about your load testing environment.

52
00:02:17,540 --> 00:02:20,420
That's always one environment that needs to simulate production,

53
00:02:20,420 --> 00:02:23,040
whereas all other environments usually don't.

54
00:02:23,040 --> 00:02:24,220
And then how about security?

55
00:02:24,220 --> 00:02:25,810
While production should be locked down,

56
00:02:25,810 --> 00:02:28,330
you really don't want to limit what a developer can and can't do

57
00:02:28,330 --> 00:02:31,080
while writing code. While on the topic of security,

58
00:02:31,080 --> 00:02:33,420
you very well might want to ensure that production is

59
00:02:33,420 --> 00:02:36,140
completely isolated from lower environments.

60
00:02:36,140 --> 00:02:39,620
Also, your type and degree of automation may change at different levels.

61
00:02:39,620 --> 00:02:42,140
You may seed dev databases in development environments,

62
00:02:42,140 --> 00:02:45,140
where you might not further down the line.

63
00:02:45,140 --> 00:02:46,010
So in that regard,

64
00:02:46,010 --> 00:02:48,210
doesn't it make the most sense to build environments that can be

65
00:02:48,210 --> 00:02:51,580
reused and deployed with individual meta‑characteristics for these

66
00:02:51,580 --> 00:02:54,140
particular needs without raw duplication?

67
00:02:54,140 --> 00:02:55,650
If you remember my first module,

68
00:02:55,650 --> 00:02:57,840
the boss kept asking me for more environments to the

69
00:02:57,840 --> 00:03:00,040
tune of an environmental eye chart.

70
00:03:00,040 --> 00:03:00,680
In this case,

71
00:03:00,680 --> 00:03:04,630
we're building IaC so as to be able to reuse everything we create, but not

72
00:03:04,630 --> 00:03:10,840
tailor it specifically for the needs of the environment owners.

73
00:03:10,840 --> 00:03:14,280
Then don't you want to be able to duplicate that advantage by automatically

74
00:03:14,280 --> 00:03:16,720
provisioning environments for other teams or projects?

75
00:03:16,720 --> 00:03:19,930
Dynamically controlled environments can be a very powerful asset, and

76
00:03:19,930 --> 00:03:23,540
could promote extremely rapid engineering cycles.

77
00:03:23,540 --> 00:03:25,920
One of the biggest roadblocks in organizations today is a

78
00:03:25,920 --> 00:03:28,670
lack of usable environments, or worse,

79
00:03:28,670 --> 00:03:31,440
having to share environments painstakingly.

80
00:03:31,440 --> 00:03:32,950
And when managed well,

81
00:03:32,950 --> 00:03:35,830
costs can be a fraction of resident hardware virtualized

82
00:03:35,830 --> 00:03:44,000
data center costs. In the next clip, let's dive into exactly what it looks like to begin setting up these concepts.

