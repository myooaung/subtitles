1
00:00:02,040 --> 00:00:05,980
We can't rightfully wrap up a CDK course without talking about security.

2
00:00:05,980 --> 00:00:10,260
Now don't get me wrong, this module isn't a primer in any way on IaM.

3
00:00:10,260 --> 00:00:12,880
Roles, policies, grants,

4
00:00:12,880 --> 00:00:16,160
and resource policy usage is all very clearly defined in the

5
00:00:16,160 --> 00:00:18,740
security section of the well‑architected framework.

6
00:00:18,740 --> 00:00:22,210
There are also many Pluralsight courses on security around AWS.

7
00:00:22,210 --> 00:00:23,180
Instead,

8
00:00:23,180 --> 00:00:25,820
in this module we're going to talk about best practices in the

9
00:00:25,820 --> 00:00:30,570
context of aspects, a neat, newish feature in AWS that allows for

10
00:00:30,570 --> 00:00:34,440
extreme flexibility in the world of governance.

11
00:00:34,440 --> 00:00:37,610
The internet likely has thousands of pages and articles on

12
00:00:37,610 --> 00:00:40,310
securing AWS accounts to any degree.

13
00:00:40,310 --> 00:00:44,470
In fact, security is widely known as the highest priority for AWS.

14
00:00:44,470 --> 00:00:46,410
In the shared security model they secure all the

15
00:00:46,410 --> 00:00:49,090
underlying assets, as you likely know, while you,

16
00:00:49,090 --> 00:00:50,130
the end user,

17
00:00:50,130 --> 00:00:52,660
are responsible for your own logical security of your

18
00:00:52,660 --> 00:00:55,900
systems and application layers. You can read Bibles on the

19
00:00:55,900 --> 00:00:57,740
principle of least privilege.

20
00:00:57,740 --> 00:01:01,130
If you aren't familiar with these principles I highly encourage you to study

21
00:01:01,130 --> 00:01:04,940
up on them, as a responsible developer of CDK technology.

22
00:01:04,940 --> 00:01:08,470
If we shift gears a bit and focus solely on principles of CDK

23
00:01:08,470 --> 00:01:12,850
security we can apply most of the same logic. IaM concepts such as

24
00:01:12,850 --> 00:01:14,890
roles and policies should be designed,

25
00:01:14,890 --> 00:01:19,440
reviewed, and evaluated against the operational nature of your business.

26
00:01:19,440 --> 00:01:20,080
Further,

27
00:01:20,080 --> 00:01:24,640
they should be enforced by some governance process as CDK developers were able

28
00:01:24,640 --> 00:01:28,010
to build assets simply by following these rules as created.

29
00:01:28,010 --> 00:01:30,220
That shouldn't be any different than following any coding

30
00:01:30,220 --> 00:01:33,240
convention process in regular application development.

31
00:01:33,240 --> 00:01:37,540
Where we can make a bit of an impact is in the new world of aspects in the CDK.

32
00:01:37,540 --> 00:01:41,130
Aspects allow us to build in logic to our constructs to ensure they follow

33
00:01:41,130 --> 00:01:45,380
these rules as defined. If highly‑secured buckets need a seven‑year

34
00:01:45,380 --> 00:01:48,470
retention policy we can write an aspect for that.

35
00:01:48,470 --> 00:01:51,810
If website buckets are only allowed to be accessed by a CloudFront role

36
00:01:51,810 --> 00:01:54,890
we can write an aspect for that as well. You can almost think of

37
00:01:54,890 --> 00:02:03,000
aspects as a unit test around security around which we can build best practices into our CDK constructs.

