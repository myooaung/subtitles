1
00:00:01,940 --> 00:00:05,230
CI/CD is one of my favorite topics to talk about with all

2
00:00:05,230 --> 00:00:07,380
the new tools available in the CDK.

3
00:00:07,380 --> 00:00:08,660
With full disclosure,

4
00:00:08,660 --> 00:00:11,210
building a fully integrated and dynamic pipeline is

5
00:00:11,210 --> 00:00:13,010
truly a subject for its own course.

6
00:00:13,010 --> 00:00:16,160
Once again, we have several methods available to accomplish this,

7
00:00:16,160 --> 00:00:19,140
which I'll touch on lightly in this clip.

8
00:00:19,140 --> 00:00:20,450
In the CDK's infancy,

9
00:00:20,450 --> 00:00:25,140
building pipelines wasn't quite as easy as it is with the tools available today.

10
00:00:25,140 --> 00:00:28,280
Amazon essentially built a one‑to‑one mapping from the CodeBuild

11
00:00:28,280 --> 00:00:31,520
and CodePipeline resources into CDK constructs,

12
00:00:31,520 --> 00:00:35,240
and you were a bit on your own in the creating of anything multistage.

13
00:00:35,240 --> 00:00:37,580
Now even that necessarily isn't a bad thing.

14
00:00:37,580 --> 00:00:40,370
Level 1 constructs give you full control to build what

15
00:00:40,370 --> 00:00:42,440
you need exactly where you need it.

16
00:00:42,440 --> 00:00:43,110
As a result,

17
00:00:43,110 --> 00:00:46,190
folks began building pipelines with CDK tools that

18
00:00:46,190 --> 00:00:47,890
were a combination of level 1,

19
00:00:47,890 --> 00:00:52,080
constructs together with more sophisticated scripting and build spec files.

20
00:00:52,080 --> 00:00:54,350
Again, this isn't a bad thing either.

21
00:00:54,350 --> 00:00:56,950
I call it advanced, as to build pipelines in this way,

22
00:00:56,950 --> 00:01:00,340
a higher level of scripting knowledge and control is required.

23
00:01:00,340 --> 00:01:03,140
I'll show you one of my favorite examples of this in a bit.

24
00:01:03,140 --> 00:01:05,330
If you want extreme control over what your pipeline

25
00:01:05,330 --> 00:01:07,180
is doing and how it's doing it,

26
00:01:07,180 --> 00:01:10,640
this is a wonderful way to keep full control over your ecosystem.

27
00:01:10,640 --> 00:01:13,390
If that level of intensity isn't what you need in a pipeline,

28
00:01:13,390 --> 00:01:15,790
you're free to use the level 1 constructs to build

29
00:01:15,790 --> 00:01:18,240
CodeBuild and CodePipeline projects.

30
00:01:18,240 --> 00:01:21,000
This technique is just as easy as building any other construct,

31
00:01:21,000 --> 00:01:24,080
as you're using the prepackaged defaults and options to build sources,

32
00:01:24,080 --> 00:01:25,740
stages, and deployments.

33
00:01:25,740 --> 00:01:28,650
There's still a basic element of simple scripting through build specs,

34
00:01:28,650 --> 00:01:31,680
but this is still considered mainstream technology in CodeBuild.

35
00:01:31,680 --> 00:01:34,540
To keep learning as clear as possible, the demo app,

36
00:01:34,540 --> 00:01:37,560
which you remember was originally built by AWS Labs,

37
00:01:37,560 --> 00:01:42,240
includes a basic two‑stage pipeline built with level 1 constructs.

38
00:01:42,240 --> 00:01:43,430
As a new alternative,

39
00:01:43,430 --> 00:01:47,330
Amazon's built a higher‑level construct solution library specifically for

40
00:01:47,330 --> 00:01:51,440
pipelines ,initially called a Solutions Constructs library.

41
00:01:51,440 --> 00:01:54,540
It's now just called the CDK Pipelines module,

42
00:01:54,540 --> 00:01:57,740
which is easily found on the CDK docs.

43
00:01:57,740 --> 00:01:59,590
As with other patterns and solutions,

44
00:01:59,590 --> 00:02:02,660
Amazon's pre‑built many of the defaults and options for you,

45
00:02:02,660 --> 00:02:07,250
making the creation of comprehensive pipelines easier now than it's ever been.

46
00:02:07,250 --> 00:02:10,740
So I won't go through it in deep detail.

47
00:02:10,740 --> 00:02:11,280
However.

48
00:02:11,280 --> 00:02:13,740
A friend of mine who runs serverlessfirst.com,

49
00:02:13,740 --> 00:02:14,840
Paul Swail,

50
00:02:14,840 --> 00:02:17,220
wrote a really awesome article last year on the

51
00:02:17,220 --> 00:02:19,940
nuances of building advanced pipelines.

52
00:02:19,940 --> 00:02:21,010
The link is here,

53
00:02:21,010 --> 00:02:23,960
but it's easy to find if you ever need it at serverlessfirst.com.

54
00:02:23,960 --> 00:02:24,990
Paul,

55
00:02:24,990 --> 00:02:27,090
with his longstanding skills and evangelism in

56
00:02:27,090 --> 00:02:29,010
pushing pure serverless cloud tech,

57
00:02:29,010 --> 00:02:31,830
demonstrates with scripting and level 1 constructs how to

58
00:02:31,830 --> 00:02:35,340
build a 3‑stage dev staging prod pipeline.

59
00:02:35,340 --> 00:02:39,040
He uses a bit of Bash scripting to dynamically assume and release deployment

60
00:02:39,040 --> 00:02:42,540
roles in tandem with environment specific build spec files.

61
00:02:42,540 --> 00:02:43,070
All in all,

62
00:02:43,070 --> 00:02:45,970
he shows a pure method of imparting extreme control over the

63
00:02:45,970 --> 00:02:49,040
creation and execution of your pipelines.

64
00:02:49,040 --> 00:02:52,900
As I said, roles are created and released on the fly within the script,

65
00:02:52,900 --> 00:02:55,360
allowing the pipeline to be region agnostic.

66
00:02:55,360 --> 00:02:57,400
Using traditional methods,

67
00:02:57,400 --> 00:03:01,270
build specs exist independently for each environment or stage.

68
00:03:01,270 --> 00:03:04,190
And as I illustrated earlier, environment variables,

69
00:03:04,190 --> 00:03:08,340
which he uses heavily, are a great way to pass information across boundaries.

70
00:03:08,340 --> 00:03:08,900
In this case,

71
00:03:08,900 --> 00:03:13,740
boundaries represents script shells physically outside of the AWS purview.

72
00:03:13,740 --> 00:03:14,890
With these tools in mind,

73
00:03:14,890 --> 00:03:19,040
you can see how this imbues a great sense of control over your pipeline,

74
00:03:19,040 --> 00:03:25,250
all predominantly built with level 1 constructs/ To get a better understanding

75
00:03:25,250 --> 00:03:28,810
of pipeline creation with fundamental level 1 constructs, let's take another

76
00:03:28,810 --> 00:03:32,540
look at the pipeline that exists for the demo app.

77
00:03:32,540 --> 00:03:36,030
So setting up CodeBuild projects with CodePipeline really

78
00:03:36,030 --> 00:03:38,340
isn't that difficult if you just follow a simple set of

79
00:03:38,340 --> 00:03:40,340
steps for setting everything up.

80
00:03:40,340 --> 00:03:43,840
If we move back over to our code file or code stack,

81
00:03:43,840 --> 00:03:45,940
I'll show how easy this is to do.

82
00:03:45,940 --> 00:03:48,690
The first thing we do is create a couple of roles and policies.

83
00:03:48,690 --> 00:03:51,240
So I create a CodeBuild role,

84
00:03:51,240 --> 00:03:55,040
and then I make sure that the service principle is assumed by CodeBuild.

85
00:03:55,040 --> 00:03:58,520
And then from there we simply add a few things to our CodeBuild policy,

86
00:03:58,520 --> 00:04:00,990
such that we can access the S3 buckets that we need

87
00:04:00,990 --> 00:04:03,540
to deploy to and grab assets from.

88
00:04:03,540 --> 00:04:05,510
And then there's another quick step in here as well to ensure

89
00:04:05,510 --> 00:04:08,740
that all resources can log appropriately.

90
00:04:08,740 --> 00:04:12,170
From here we create a codePipelineRole as well and ensure that that role

91
00:04:12,170 --> 00:04:15,210
can be assumed by the CodePipeline service principle.

92
00:04:15,210 --> 00:04:17,100
And then similarly,

93
00:04:17,100 --> 00:04:21,940
we ensure that CodePipeline can access the S3 buckets as well.

94
00:04:21,940 --> 00:04:25,330
At that point, we simply set up the CodeBuild pipeline project,

95
00:04:25,330 --> 00:04:27,370
which is fairly straightforward.

96
00:04:27,370 --> 00:04:29,980
You can see that in this instance we pass all the environment

97
00:04:29,980 --> 00:04:33,440
variables from the CDK code using environment variable syntax

98
00:04:33,440 --> 00:04:36,340
through what will be used in the build spec.

99
00:04:36,340 --> 00:04:39,030
And the reason this is done is because the build spec itself is

100
00:04:39,030 --> 00:04:41,800
actually going to set the values in the React application.

101
00:04:41,800 --> 00:04:45,650
And if I go over and look at the config.ts that's in the React application,

102
00:04:45,650 --> 00:04:49,420
you can see that this is exactly how it understands what region Cognito's in,

103
00:04:49,420 --> 00:04:52,390
the user pool, the app client, and the identity pool IDs are in,

104
00:04:52,390 --> 00:04:56,340
as well as the API Gateway object.

105
00:04:56,340 --> 00:04:58,990
And then the last thing we do for that CodePipeline rule is,

106
00:04:58,990 --> 00:05:03,540
we need to make sure that it can actually batch and start builds.

107
00:05:03,540 --> 00:05:07,430
So from there, all that's left is to actually create the CodePipeline pipeline,

108
00:05:07,430 --> 00:05:09,010
in which case, all we do is,

109
00:05:09,010 --> 00:05:13,040
we create a couple of outputs with CodePipeline artifacts

110
00:05:13,040 --> 00:05:15,640
and then we can go create our stages.

111
00:05:15,640 --> 00:05:17,480
There's the Source stage right there.

112
00:05:17,480 --> 00:05:22,040
You can see that it comes out of the sourceAssetBucket.

113
00:05:22,040 --> 00:05:23,370
And then there's the Build stage.

114
00:05:23,370 --> 00:05:25,620
You can see that the action called build‑and‑deploy

115
00:05:25,620 --> 00:05:28,940
simply uses the codeBuildProject, the source input,

116
00:05:28,940 --> 00:05:33,340
and then it outputs the buildOutput, and that is really all there is to it.

117
00:05:33,340 --> 00:05:35,400
Pretty simple to create level 1 constructs,

118
00:05:35,400 --> 00:05:38,240
if you simply just follow a few rules.

119
00:05:38,240 --> 00:05:41,850
Now that you've seen a few fundamental and advanced ways to construct pipelines,

120
00:05:41,850 --> 00:05:46,740
let's talk briefly about the new CDK Pipelines module from Amazon.

121
00:05:46,740 --> 00:05:47,780
As I said earlier,

122
00:05:47,780 --> 00:05:51,900
I could go into an entire course on setting up comprehensive pipelines, so

123
00:05:51,900 --> 00:05:55,240
a deep dive here is beyond the scope of this course.

124
00:05:55,240 --> 00:05:55,850
In short,

125
00:05:55,850 --> 00:05:59,660
this is a module built by Amazon representing a high‑level construct library,

126
00:05:59,660 --> 00:06:03,840
including everything you need to easily set up pipelines.

127
00:06:03,840 --> 00:06:05,730
Amazon calls it more opinionated,

128
00:06:05,730 --> 00:06:09,250
which is natural for a higher‑level construct. In that regard,

129
00:06:09,250 --> 00:06:11,760
the module, still in developer preview at the time of this

130
00:06:11,760 --> 00:06:15,270
video, includes all tools needed to represent your pipeline

131
00:06:15,270 --> 00:06:17,740
with all necessary stages and actions,

132
00:06:17,740 --> 00:06:20,960
and as with other constructs, you can add any existing source,

133
00:06:20,960 --> 00:06:25,150
including GitHub, CodeCommit, or S3 buckets. If you're

134
00:06:25,150 --> 00:06:28,760
interested, Rico Huijbers wrote an AWS Developer blog post

135
00:06:28,760 --> 00:06:30,840
that includes a nice sample walk‑through.

136
00:06:30,840 --> 00:06:33,750
It's a great read that just takes about an hour or so to set up and

137
00:06:33,750 --> 00:06:38,000
execute. For the current CDK‑approved documentation, the CDK Pipelines

138
00:06:38,000 --> 00:06:41,440
module is fully defined in the CDK documentation.

139
00:06:41,440 --> 00:06:45,240
Both of these are very easy to find by simply searching for CDK pipelines.

140
00:06:45,240 --> 00:06:50,000
In either case, I'll go ahead and add these links to the course materials for you.

