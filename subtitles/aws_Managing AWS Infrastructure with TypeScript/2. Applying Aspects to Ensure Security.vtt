WEBVTT
1
00:00:02.040 --> 00:00:05.340
Let's take a look through the narrow lens of aspects and see

2
00:00:05.340 --> 00:00:08.580
how we as responsible CDK developers can do our part to uphold

3
00:00:08.580 --> 00:00:11.840
best practice security principles.

4
00:00:11.840 --> 00:00:15.140
I love the generic definition of aspects by Amazon,

5
00:00:15.140 --> 00:00:18.940
a way to apply an operation to all constructs in a scope.

6
00:00:18.940 --> 00:00:21.990
You couldn't be any less specific than that; however,

7
00:00:21.990 --> 00:00:26.140
where it's simple in principle, it's extremely powerful in execution.

8
00:00:26.140 --> 00:00:30.620
Let's see how. In technical terms, an aspect is a

9
00:00:30.620 --> 00:00:34.940
more generic version of tagging, which is an instance of the visitor pattern.

10
00:00:34.940 --> 00:00:35.890
More specifically,

11
00:00:35.890 --> 00:00:41.040
an aspect is just a class that implements the IAspect interface like this.

12
00:00:41.040 --> 00:00:44.240
Think about how simple the application of an aspect is.

13
00:00:44.240 --> 00:00:47.440
You can apply everything you want to any construct you want.

14
00:00:47.440 --> 00:00:49.840
And since constructs are so universal,

15
00:00:49.840 --> 00:00:53.020
that means you can really just about apply any check to anything your brain can

16
00:00:53.020 --> 00:00:56.140
conceive. It really doesn't even have to be about security.

17
00:00:56.140 --> 00:00:58.840
It can be a rule check against any property.

18
00:00:58.840 --> 00:00:59.570
To that end,

19
00:00:59.570 --> 00:01:04.740
it's akin to a rules engine where you can create rules in a closed system.

20
00:01:04.740 --> 00:01:05.380
As I said,

21
00:01:05.380 --> 00:01:07.900
it doesn't really even have to be about security. You could

22
00:01:07.900 --> 00:01:10.030
build an aspect that ensures that all buckets in your

23
00:01:10.030 --> 00:01:12.740
organization be created in the Oregon region.

24
00:01:12.740 --> 00:01:14.800
Who knows, maybe your organization isn't allowed to do

25
00:01:14.800 --> 00:01:17.140
business outside of a specific country.

26
00:01:17.140 --> 00:01:19.510
You could use a rule like this to limit what regions

27
00:01:19.510 --> 00:01:22.540
are allowed for specific objects.

28
00:01:22.540 --> 00:01:25.510
Let's take things down a few levels and talk more practically about our

29
00:01:25.510 --> 00:01:29.040
demo application, Globomantics, and how this might apply.

30
00:01:29.040 --> 00:01:32.000
We have a React application that runs in a static website

31
00:01:32.000 --> 00:01:34.740
bucket accessed by a CloudFront distribution.

32
00:01:34.740 --> 00:01:37.120
So would it not be prudent to ensure that the bucket isn't

33
00:01:37.120 --> 00:01:39.950
accessible by anyone in the world except the CloudFront role or

34
00:01:39.950 --> 00:01:42.340
maybe the CodeBuild deployment role?

35
00:01:42.340 --> 00:01:46.140
An aspect could ensure that the website bucket is limited to that role.

36
00:01:46.140 --> 00:01:48.160
How about creating an aspect that only allows access to

37
00:01:48.160 --> 00:01:50.140
Dynamo from the lambda functions?

38
00:01:50.140 --> 00:01:53.010
An aspect could check that only lambda roles have access to

39
00:01:53.010 --> 00:01:56.470
Dynamo. Aspects are run at synthesis time.

40
00:01:56.470 --> 00:01:59.390
Therefore, if we treat aspects in part like unit tests,

41
00:01:59.390 --> 00:02:04.540
we can catch many faults prior to deployment that we may not otherwise catch.

42
00:02:04.540 --> 00:02:08.140
Yes, you could go way overboard on building aspect checkers; however,

43
00:02:08.140 --> 00:02:09.040
like unit tests,

44
00:02:09.040 --> 00:02:11.810
a common sense logical design of checks around security is

45
00:02:11.810 --> 00:02:15.140
germane. At a minimum, on the security topic,

46
00:02:15.140 --> 00:02:17.690
all resources should check to ensure that least privilege is

47
00:02:17.690 --> 00:02:25.000
upheld by checking that only the rules assigned and the actions are allowed as expected.

