WEBVTT
1
00:00:01.940 --> 00:00:05.810
At this point, critical concepts with the CDK should be becoming clearer to you.

2
00:00:05.810 --> 00:00:09.840
You hear me say it a lot, but there are many ways to accomplish one goal,

3
00:00:09.840 --> 00:00:13.040
and there are many techniques that can be used to fulfill a requirement.

4
00:00:13.040 --> 00:00:15.870
We've briefly seen organized stacks, environmental

5
00:00:15.870 --> 00:00:19.340
distribution, and ways to pass data around as needed.

6
00:00:19.340 --> 00:00:22.990
It's in this last area where we want to focus our efforts in this short module,

7
00:00:22.990 --> 00:00:25.640
which will culminate in refactoring our demo application to

8
00:00:25.640 --> 00:00:28.740
be as dynamically driven as possible.

9
00:00:28.740 --> 00:00:32.280
One of the principles of knowledge required for the AWS Certified Cloud

10
00:00:32.280 --> 00:00:35.820
Practitioner examine is the understanding of loose coupling. It's

11
00:00:35.820 --> 00:00:38.260
sufficiently important to Amazon, but it's called out in many of the

12
00:00:38.260 --> 00:00:40.540
pillars of the well‑architected framework.

13
00:00:40.540 --> 00:00:41.480
At its core,

14
00:00:41.480 --> 00:00:45.740
the definition is a simple reduction or elimination of interdependencies.

15
00:00:45.740 --> 00:00:48.260
Besides the avoidance of cascading failures,

16
00:00:48.260 --> 00:00:53.040
there are dozens of reasons why these principles are considered best practice.

17
00:00:53.040 --> 00:00:55.430
Hopefully, like many obvious things in this world,

18
00:00:55.430 --> 00:00:58.850
understanding why avoiding tightly coupled systems is a good thing.

19
00:00:58.850 --> 00:00:59.440
After all,

20
00:00:59.440 --> 00:01:01.720
if all the components in a critical systems, such as the

21
00:01:01.720 --> 00:01:06.010
space shuttle, were locked together, failures and lost lives would be imminent,

22
00:01:06.010 --> 00:01:10.410
as the definition states. Loose coupling reduces interdependencies between

23
00:01:10.410 --> 00:01:13.540
components in a system or between systems themselves.

24
00:01:13.540 --> 00:01:16.480
Remember the good old days when developers used to build SQL queries and

25
00:01:16.480 --> 00:01:20.550
strings and hit a database directly? That ultimately led to unmanageable code

26
00:01:20.550 --> 00:01:24.480
and eventually SQL injections. Connecting application code to a SQL database

27
00:01:24.480 --> 00:01:29.140
is absolutely an example of tight coupling in the worst possible way. Aside

28
00:01:29.140 --> 00:01:30.700
from pure performance or security,

29
00:01:30.700 --> 00:01:34.580
aren't loosely coupled systems more geared towards reuse? The ultimate

30
00:01:34.580 --> 00:01:37.850
loose coupling benefit is the ability to replace a component without

31
00:01:37.850 --> 00:01:40.540
impacting the overall system in any way.

32
00:01:40.540 --> 00:01:43.480
A load balancer with auto‑scaling groups is a great and easy

33
00:01:43.480 --> 00:01:46.740
example to understand. That speaks to elastic systems that

34
00:01:46.740 --> 00:01:48.640
adhere to principles of resilience.

35
00:01:48.640 --> 00:01:51.590
Would you consider your car that you drive every day to be a system where

36
00:01:51.590 --> 00:01:54.440
resilience should be a high priority for manufacturers?

37
00:01:54.440 --> 00:01:58.370
I know I do. Speaking more in the moment, a company like Globomantics

38
00:01:58.370 --> 00:02:01.360
that plans to acquire many development organizations in the future

39
00:02:01.360 --> 00:02:04.340
burdens the challenge of constant onboarding.

40
00:02:04.340 --> 00:02:06.680
Would you agree that a system built of several independent and

41
00:02:06.680 --> 00:02:10.640
easy‑to‑understand components contributes positively to that challenge?

42
00:02:10.640 --> 00:02:11.120
Finally,

43
00:02:11.120 --> 00:02:14.850
to avoid paralyzing this discussion point too far, most would argue that

44
00:02:14.850 --> 00:02:18.750
decoupling components in a system with well‑defined interfaces allows them to

45
00:02:18.750 --> 00:02:22.690
be managed and improve much more quickly than a highly brittle system. In the

46
00:02:22.690 --> 00:02:25.300
remainder of this module, we're going to speed through applicable techniques

47
00:02:25.300 --> 00:02:32.000
that contribute to these factors and then subsequently refactor our application accordingly.

