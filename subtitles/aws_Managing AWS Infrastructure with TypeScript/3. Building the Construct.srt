1
00:00:02,140 --> 00:00:06,440
So building a construct takes on a slightly different path in building stacks.

2
00:00:06,440 --> 00:00:11,140
Actually, building constructs is much simpler and includes far less overhead.

3
00:00:11,140 --> 00:00:11,790
In this clip,

4
00:00:11,790 --> 00:00:15,320
let's go build out our S3 static website construct and

5
00:00:15,320 --> 00:00:19,440
get it published to our registry.

6
00:00:19,440 --> 00:00:20,910
Now comes the fun part.

7
00:00:20,910 --> 00:00:23,780
Let's go ahead and see what's involved in building out the construct,

8
00:00:23,780 --> 00:00:28,240
publish it and get it ready to be used in the next clip.

9
00:00:28,240 --> 00:00:32,200
So I think you'll find that building out this construct is actually very easy,

10
00:00:32,200 --> 00:00:34,260
and in fact I'm not going to write a lot of code here,

11
00:00:34,260 --> 00:00:37,440
I'm just going to steal a lot of code that we've actually already written.

12
00:00:37,440 --> 00:00:42,290
So if I head back over to our main demo application and I open the

13
00:00:42,290 --> 00:00:46,240
S3 TypeScript file and the cdn TypeScript file,

14
00:00:46,240 --> 00:00:47,860
the first thing I'm going to do is I'm just going to go

15
00:00:47,860 --> 00:00:53,060
ahead and grab the S3 deploying the S3 objects and I'm

16
00:00:53,060 --> 00:00:54,840
going to go ahead and paste those.

17
00:00:54,840 --> 00:00:57,100
I already had those in the package.json, so they're

18
00:00:57,100 --> 00:00:59,540
actually installed and resolving.

19
00:00:59,540 --> 00:01:00,240
So from here,

20
00:01:00,240 --> 00:01:06,040
what we're going to do is I'm going to grab a little sample dummy interface

21
00:01:06,040 --> 00:01:10,470
and paste that in. We're not going to call these S3StackProps anymore,

22
00:01:10,470 --> 00:01:14,800
we'll call them CDKStaticWebsiteConstructProps,

23
00:01:14,800 --> 00:01:19,640
which I understand is a little bit long,

24
00:01:19,640 --> 00:01:23,140
and we'll go ahead and inject those for now.

25
00:01:23,140 --> 00:01:30,640
Now what I'm going to want to grab is I want the websiteBucket,

26
00:01:30,640 --> 00:01:35,790
and I want the S3 deployment object, and I'm not going to use

27
00:01:35,790 --> 00:01:38,310
that entire function in the construct.

28
00:01:38,310 --> 00:01:44,150
What I'm going to do is I'm just going to grab its logic, and I'll go ahead

29
00:01:44,150 --> 00:01:47,740
and just embed its logic in the construct creation itself.

30
00:01:47,740 --> 00:01:50,190
So let's go ahead and fix up a few of the issues that we

31
00:01:50,190 --> 00:01:59,720
have, and we're getting closer here.

32
00:01:59,720 --> 00:02:01,300
We have our deployment working,

33
00:02:01,300 --> 00:02:05,220
everything's resolving and we have our website bucket created and

34
00:02:05,220 --> 00:02:07,940
everything is resolving appropriately as well.

35
00:02:07,940 --> 00:02:13,140
So let's go grab the cdn objects.

36
00:02:13,140 --> 00:02:15,170
So I went ahead and grabbed that package, which was also

37
00:02:15,170 --> 00:02:19,240
already installed from our package.json. Now we've got all

38
00:02:19,240 --> 00:02:22,040
the items we need in our interface.

39
00:02:22,040 --> 00:02:26,270
So let's go ahead and grab the Cloudfront distribution, and

40
00:02:26,270 --> 00:02:28,900
we're actually good to go at this point because it's using the

41
00:02:28,900 --> 00:02:31,120
same website bucket designation.

42
00:02:31,120 --> 00:02:34,390
So if we go back up and make sure that everything looks okay,

43
00:02:34,390 --> 00:02:37,000
we're pretty much good to go at this point.

44
00:02:37,000 --> 00:02:40,500
We know that our construct is going to require some type of project name,

45
00:02:40,500 --> 00:02:41,940
which is perfectly fine.

46
00:02:41,940 --> 00:02:43,520
We're going to need a deployment source,

47
00:02:43,520 --> 00:02:46,340
which is actually going to be a path that we're going to provide.

48
00:02:46,340 --> 00:02:48,050
We need a website index document,

49
00:02:48,050 --> 00:02:50,950
a website error document, which we're going to provide in a properties

50
00:02:50,950 --> 00:02:54,540
object as well, and then for our cdn we're going to reference the same

51
00:02:54,540 --> 00:02:57,500
index document and then for our cdn comment, we're going to go ahead and

52
00:02:57,500 --> 00:02:59,160
fill in some information as well.

53
00:02:59,160 --> 00:03:02,580
So at that point, our construct is ready to be published.

54
00:03:02,580 --> 00:03:07,080
So let me go ahead and save it and compile, and if I go back to our

55
00:03:07,080 --> 00:03:10,610
package.json just for a second, we can see that we're working with version

56
00:03:10,610 --> 00:03:18,440
0.3.0, so let's go ahead and run an npm version and let's up it to 0.4.0,

57
00:03:18,440 --> 00:03:20,300
and now we're actually ready to publish,

58
00:03:20,300 --> 00:03:24,270
provided that we're still logged in and we make sure that it's public on our

59
00:03:24,270 --> 00:03:28,740
access flag, we can see that it published successfully.

60
00:03:28,740 --> 00:03:32,680
So if we head back over to npmjs and take a look, I'll go

61
00:03:32,680 --> 00:03:36,860
ahead and refresh the page, and we can see that version 0.4.0

62
00:03:36,860 --> 00:03:38,910
was published, and sure enough,

63
00:03:38,910 --> 00:03:43,340
if I go in and look at it, version 0.4.0 is there.

64
00:03:43,340 --> 00:03:44,190
So at this point,

65
00:03:44,190 --> 00:03:52,000
our CDK S3 static website package is ready to be used in the creation of another stack.

