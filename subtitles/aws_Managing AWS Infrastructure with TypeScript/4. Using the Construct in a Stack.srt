1
00:00:02,040 --> 00:00:03,180
Alright, now we're cooking.

2
00:00:03,180 --> 00:00:05,440
Hopefully you've been able to follow along.

3
00:00:05,440 --> 00:00:09,460
Now that we have a construct in our registry ready to be consumed, let's go see

4
00:00:09,460 --> 00:00:14,640
how to use that construct in the creation of a new stack.

5
00:00:14,640 --> 00:00:15,650
So in that regard,

6
00:00:15,650 --> 00:00:18,460
let's go build a brand new CDK application that uses our

7
00:00:18,460 --> 00:00:21,840
new construct from our construct library.

8
00:00:21,840 --> 00:00:24,850
So before we go ahead and initialize another CDK

9
00:00:24,850 --> 00:00:26,920
stack and start using our construct,

10
00:00:26,920 --> 00:00:28,700
I noticed that there were a couple of things that we

11
00:00:28,700 --> 00:00:31,640
needed to add to this before it was usable.

12
00:00:31,640 --> 00:00:35,640
So if I scroll down just a little bit in our construct,

13
00:00:35,640 --> 00:00:38,570
you can see that I went ahead and I actually added a

14
00:00:38,570 --> 00:00:41,140
policy to that website bucket.

15
00:00:41,140 --> 00:00:43,420
The version that we had had no policy,

16
00:00:43,420 --> 00:00:47,040
so we were bound to get an access denied by simply accessing the bucket.

17
00:00:47,040 --> 00:00:47,150
Now,

18
00:00:47,150 --> 00:00:50,340
the other simple thing I did is I actually used the

19
00:00:50,340 --> 00:00:52,340
project name in the name of the bucket,

20
00:00:52,340 --> 00:00:55,040
and that's just to ensure that our bucket names are unique.

21
00:00:55,040 --> 00:00:59,280
And the last thing that I did is I added a couple of

22
00:00:59,280 --> 00:01:01,140
convenient outputs right here as well.

23
00:01:01,140 --> 00:01:05,260
So as soon as this is done deploying, it would at least give you the

24
00:01:05,260 --> 00:01:09,440
website bucket URL and the CDN URL for convenience.

25
00:01:09,440 --> 00:01:16,740
So let's re‑compile this, and let's check the version we have right now.

26
00:01:16,740 --> 00:01:21,140
I could open the package.json, or I could type npm version.

27
00:01:21,140 --> 00:01:27,990
We're using version 0.6.0. So let's advance that to

28
00:01:27,990 --> 00:01:34,440
0.7.0, and let's re‑publish that package.

29
00:01:34,440 --> 00:01:37,680
And now that we've got version 0.7.0 published,

30
00:01:37,680 --> 00:01:41,140
let's go ahead and initialize a new stack.

31
00:01:41,140 --> 00:01:44,950
So I've created a directory called cdk s3‑static‑website.app,

32
00:01:44,950 --> 00:01:53,350
and I want to go ahead and run a cdk init. So let's go ahead

33
00:01:53,350 --> 00:01:55,440
and start working on our new app.

34
00:01:55,440 --> 00:01:59,540
I'm going to create a properties object,

35
00:01:59,540 --> 00:02:03,340
which we're going to inject into our new class.

36
00:02:03,340 --> 00:02:07,640
Obviously, it's going to complain, because the interface doesn't exist there yet.

37
00:02:07,640 --> 00:02:12,180
Let's go ahead and save that for now, and let's go ahead and create that

38
00:02:12,180 --> 00:02:19,240
interface. And let's rename it to WebsiteAppStackProps,

39
00:02:19,240 --> 00:02:23,180
and we're going to make those required in our class,

40
00:02:23,180 --> 00:02:26,440
and now we're ready to create our construct.

41
00:02:26,440 --> 00:02:35,400
So let's go ahead and pull in our cdk‑s3‑static‑website construct. And

42
00:02:35,400 --> 00:02:43,440
now we're ready to go ahead and create the resource.

43
00:02:43,440 --> 00:02:46,200
And now we know exactly what these properties are going to look like.

44
00:02:46,200 --> 00:02:50,840
So for now, I'm just going to copy them straight out of the interface.

45
00:02:50,840 --> 00:02:52,630
And now what I'll do is just go ahead and fix them up

46
00:02:52,630 --> 00:03:00,120
really quickly. And we're almost there.

47
00:03:00,120 --> 00:03:03,740
Everything should work fine in our class.

48
00:03:03,740 --> 00:03:06,440
And if I run a tsc from here,

49
00:03:06,440 --> 00:03:12,940
generally what happens is the test project that's created complains.

50
00:03:12,940 --> 00:03:16,880
We'll go ahead and comment that out, and everything is

51
00:03:16,880 --> 00:03:20,840
happy from a compilation standpoint.

52
00:03:20,840 --> 00:03:22,680
So everything looks good at this point.

53
00:03:22,680 --> 00:03:25,610
We know that our project name is going to be my static website.

54
00:03:25,610 --> 00:03:30,340
We don't yet have an assets folder, and as a testament to that fact,

55
00:03:30,340 --> 00:03:35,240
if I run a cdk ls, it's going to complain that the assets folder doesn't exist,

56
00:03:35,240 --> 00:03:37,740
which it doesn't.

57
00:03:37,740 --> 00:03:45,620
So inside the assets folder, we'll make an index.html, and we should be

58
00:03:45,620 --> 00:03:49,130
ready to go at this point. So I don't need to re‑compile,

59
00:03:49,130 --> 00:03:53,240
because all that I changed was the asset folder in the index file.

60
00:03:53,240 --> 00:03:59,440
So let's run a cdk ls again at this point, and our interface just saved us.

61
00:03:59,440 --> 00:04:03,140
We know that our website bucket can only have lowercase characters.

62
00:04:03,140 --> 00:04:06,440
So let me go ahead and fix that.

63
00:04:06,440 --> 00:04:11,140
That's why we create interfaces, and we should be good to go again.

64
00:04:11,140 --> 00:04:14,880
Let's re‑compile, and we should be ready to list,

65
00:04:14,880 --> 00:04:16,940
synthesize, and deploy at this point.

66
00:04:16,940 --> 00:04:24,710
Let me clear that and run an ls again. All is right with the world, so let's

67
00:04:24,710 --> 00:04:28,770
go ahead and deploy. And remember, the CDNs take about six or seven minutes

68
00:04:28,770 --> 00:04:31,740
to deploy, so I'll go ahead and fast‑forward.

69
00:04:31,740 --> 00:04:33,370
And with all things correct,

70
00:04:33,370 --> 00:04:37,590
our cfn outputs should give us the link to our CDN URL, as

71
00:04:37,590 --> 00:04:39,200
well as the link to our website bucket.

72
00:04:39,200 --> 00:04:41,340
So we'll be right back.

73
00:04:41,340 --> 00:04:44,640
And once it's done deploying, we get our convenient outputs that we can click on.

74
00:04:44,640 --> 00:04:56,000
So if I click on the bucket URL itself, we can see that there is our index.html that we spent so much time on.

