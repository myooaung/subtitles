1
00:00:02,040 --> 00:00:05,740
The concept of testing with the CDK is quite comprehensive.

2
00:00:05,740 --> 00:00:06,360
Once again,

3
00:00:06,360 --> 00:00:08,900
I could dedicate an entire course to the universe of

4
00:00:08,900 --> 00:00:11,340
testing using the Jest framework.

5
00:00:11,340 --> 00:00:11,920
Fortunately,

6
00:00:11,920 --> 00:00:15,170
testing the CDK isn't that much different than unit testing any other

7
00:00:15,170 --> 00:00:18,060
application you may have written. For the most part,

8
00:00:18,060 --> 00:00:21,100
the principles are all the same. In this module, I'll go through some

9
00:00:21,100 --> 00:00:24,680
basic testing concepts, and then we'll use Jest to write a handful of

10
00:00:24,680 --> 00:00:29,140
tests around our custom S3 website bucket construct.

11
00:00:29,140 --> 00:00:31,210
There are a few resources out there that can help you

12
00:00:31,210 --> 00:00:34,440
get set up with general CDK testing.

13
00:00:34,440 --> 00:00:37,380
This is a topic you'll want to prioritize and master as you become

14
00:00:37,380 --> 00:00:40,340
familiar with the basic concepts of the CDK.

15
00:00:40,340 --> 00:00:45,030
First, the AWS CDK Developers Guide is a nice overview on testing topics,

16
00:00:45,030 --> 00:00:48,760
including a nice lead in example of how to get started. Again, don't

17
00:00:48,760 --> 00:00:50,780
feel like you have to write these links down quickly,

18
00:00:50,780 --> 00:00:55,740
as you can come to both topics by simply searching for AWS CDK testing.

19
00:00:55,740 --> 00:00:59,140
I'll also include the links in the course materials as well.

20
00:00:59,140 --> 00:00:59,910
In addition,

21
00:00:59,910 --> 00:01:03,740
CDK Workshop by AWS also has a great walkthrough geared mostly

22
00:01:03,740 --> 00:01:06,280
towards the concepts I'll focus on around fine‑grained

23
00:01:06,280 --> 00:01:10,040
assertions and validation test types.

24
00:01:10,040 --> 00:01:13,860
At the moment, only TypeScript or JavaScript is usable with the Jest framework

25
00:01:13,860 --> 00:01:18,070
to test constructs. The base concepts are extremely simple,

26
00:01:18,070 --> 00:01:20,990
so the potential language barriers shouldn't be too obtrusive,

27
00:01:20,990 --> 00:01:25,080
even if your CDK constructs are all based on Python or another language.

28
00:01:25,080 --> 00:01:30,040
After all, assert is assert and expect is expect in a testing library.

29
00:01:30,040 --> 00:01:33,030
I even follow the basic unit testing standards and set up tests

30
00:01:33,030 --> 00:01:36,340
decorated with given, when, then designations.

31
00:01:36,340 --> 00:01:40,390
Among these test types, Amazon first discusses snapshot tests.

32
00:01:40,390 --> 00:01:42,810
I generally try to keep my opinions out of courses,

33
00:01:42,810 --> 00:01:46,100
but I'm not a huge fan of snapshot tests unless you're simply

34
00:01:46,100 --> 00:01:49,430
refactoring code and you want the end result to behave exactly

35
00:01:49,430 --> 00:01:51,090
in the same way as you started.

36
00:01:51,090 --> 00:01:53,880
Snapshot tests literally test the synthesized Cloud

37
00:01:53,880 --> 00:01:56,290
Formation assembly against a previous version.

38
00:01:56,290 --> 00:01:57,840
It's that simple.

39
00:01:57,840 --> 00:02:00,110
If the two templates don't yield similar results,

40
00:02:00,110 --> 00:02:03,410
the test will fail. If you're interested in more information on

41
00:02:03,410 --> 00:02:07,140
snapshot tests, take a peek through the developers guide.

42
00:02:07,140 --> 00:02:10,230
If you have any testing background at all, fine‑grained assertions

43
00:02:10,230 --> 00:02:13,040
are going to be very familiar to you as with any structured unit

44
00:02:13,040 --> 00:02:15,840
test library in any other coding language.

45
00:02:15,840 --> 00:02:20,540
These are typical tests that use typical assertions through expect statements.

46
00:02:20,540 --> 00:02:23,620
The primary difference you may encounter with CDK testing versus

47
00:02:23,620 --> 00:02:26,770
regular application unit testing is that in general,

48
00:02:26,770 --> 00:02:30,030
we test for expected properties or characteristics of resources

49
00:02:30,030 --> 00:02:33,440
using the toHaveResource method of the Expect class.

50
00:02:33,440 --> 00:02:34,050
Quite simply,

51
00:02:34,050 --> 00:02:36,560
we instantiate a construct, and then we call the method

52
00:02:36,560 --> 00:02:40,110
toHaveResource to assert whether or not a property we expect

53
00:02:40,110 --> 00:02:42,190
has been created on that resource.

54
00:02:42,190 --> 00:02:44,640
Simple in principle, right?

55
00:02:44,640 --> 00:02:45,050
Lastly,

56
00:02:45,050 --> 00:02:49,030
we have the concept of validation tests. Validation tests are used to

57
00:02:49,030 --> 00:02:52,430
validate that a construct in some way does what we expect in various

58
00:02:52,430 --> 00:02:55,910
situations such as a property throwing errors when we reach out of

59
00:02:55,910 --> 00:02:59,680
boundary condition for our property. We once again used the expect

60
00:02:59,680 --> 00:03:01,440
method, but in a case like this,

61
00:03:01,440 --> 00:03:04,160
we use the toThrowError method to validate that the

62
00:03:04,160 --> 00:03:07,840
condition correctly errors as expected.

63
00:03:07,840 --> 00:03:10,560
So the first thing I need to do is help clear up some major

64
00:03:10,560 --> 00:03:13,940
confusion floating around in the CDK Jest world.

65
00:03:13,940 --> 00:03:16,930
There are a few libraries out there, at least as of this course,

66
00:03:16,930 --> 00:03:20,840
that have confused a lot of folks.

67
00:03:20,840 --> 00:03:21,250
First,

68
00:03:21,250 --> 00:03:25,470
if you simply run a CDK init, the scaffolding process will create test files

69
00:03:25,470 --> 00:03:29,540
for you using the @aws‑cdk/assert library as shown here.

70
00:03:29,540 --> 00:03:31,260
And as of just recently,

71
00:03:31,260 --> 00:03:34,550
they've started aliasing expect to expectCDK when

72
00:03:34,550 --> 00:03:37,840
calling these test resource methods.

73
00:03:37,840 --> 00:03:41,490
However, if you open the CDK documentation on the Amazon site,

74
00:03:41,490 --> 00:03:43,960
most of the examples, including the workshops,

75
00:03:43,960 --> 00:03:47,440
still reference the deeper Jest library shown here.

76
00:03:47,440 --> 00:03:48,020
As a result,

77
00:03:48,020 --> 00:03:50,490
you'll find a lot of blog posts asking why folks' test

78
00:03:50,490 --> 00:03:53,740
methods don't function properly.

79
00:03:53,740 --> 00:03:55,010
Now make no mistake.

80
00:03:55,010 --> 00:03:59,340
You can use both of these libraries, and you can use them side by side.

81
00:03:59,340 --> 00:04:00,000
In this example,

82
00:04:00,000 --> 00:04:04,340
the first line of code uses the expect function from the Jest sub library.

83
00:04:04,340 --> 00:04:08,030
The second expectCDK call uses the native expect

84
00:04:08,030 --> 00:04:10,040
call from the base assert library.

85
00:04:10,040 --> 00:04:11,840
That's confusing, isn't it?

86
00:04:11,840 --> 00:04:13,130
Well, as it turns out,

87
00:04:13,130 --> 00:04:15,170
the Jest library creates these functions as

88
00:04:15,170 --> 00:04:18,840
extenders to the base assert library.

89
00:04:18,840 --> 00:04:21,640
I honestly have no idea why Amazon did this,

90
00:04:21,640 --> 00:04:23,640
and I'm not sure where they're going with it.

91
00:04:23,640 --> 00:04:26,340
Just understand what these are and where they come from, and you'll

92
00:04:26,340 --> 00:04:30,140
be okay. After we talk about test types for a bit,

93
00:04:30,140 --> 00:04:34,840
I'll hop over to the demo construct and show you an example of this.

94
00:04:34,840 --> 00:04:38,530
Fine‑grained assertions verify one part of the construct's behavior,

95
00:04:38,530 --> 00:04:41,540
not unlike a simple unit test.

96
00:04:41,540 --> 00:04:44,940
Let's take a simple example of the single behavior principle.

97
00:04:44,940 --> 00:04:47,540
Let's create a test that validates that the construct creates a

98
00:04:47,540 --> 00:04:51,450
simple S3 bucket we could expect. To set this up, I'm simply

99
00:04:51,450 --> 00:04:55,140
calling the test method like this.

100
00:04:55,140 --> 00:05:00,040
Then, in my given statement, I create a new empty stack.

101
00:05:00,040 --> 00:05:02,320
After that, I set up my WHEN section,

102
00:05:02,320 --> 00:05:06,340
referring to when I create a stack with these properties.

103
00:05:06,340 --> 00:05:07,060
And then finally,

104
00:05:07,060 --> 00:05:12,840
my THEN section uses the alias expectCDK method to execute the two assertions.

105
00:05:12,840 --> 00:05:13,200
First,

106
00:05:13,200 --> 00:05:17,640
I simply assert that there's exactly one S3 bucket created by the construct.

107
00:05:17,640 --> 00:05:20,680
I take that a step farther with a second assertion that the bucket

108
00:05:20,680 --> 00:05:25,160
includes the index and error properties as shown, Now in unit testing

109
00:05:25,160 --> 00:05:29,000
CDK constructs, you'll spend a lot of time looking at CloudFormation

110
00:05:29,000 --> 00:05:31,040
properties to build your assertions.

111
00:05:31,040 --> 00:05:34,540
You'll certainly want to bookmark this page for that purpose,

112
00:05:34,540 --> 00:05:37,400
as the property nomenclature in CloudFormation is both difficult

113
00:05:37,400 --> 00:05:40,340
to find and doesn't come up in IntelliSense.

114
00:05:40,340 --> 00:05:44,140
I'll go ahead and add this link to course materials as well.

115
00:05:44,140 --> 00:05:48,090
So let's take a look at that last test type, and that's validation tests.

116
00:05:48,090 --> 00:05:52,570
Validation tests are intended to test that some logical functionality you create

117
00:05:52,570 --> 00:05:56,740
behaves as expected or throws an error when it should.

118
00:05:56,740 --> 00:05:58,530
So before we set up our test,

119
00:05:58,530 --> 00:06:00,190
let's add a few lines of code just below our

120
00:06:00,190 --> 00:06:03,740
constructor in our construct TypeScript file.

121
00:06:03,740 --> 00:06:06,100
I'm simply checking to ensure that the project name

122
00:06:06,100 --> 00:06:08,040
is 12 characters or less here.

123
00:06:08,040 --> 00:06:12,240
And if it's not, I throw an error with that specific error text.

124
00:06:12,240 --> 00:06:17,810
Then, I set up the test again as we did before. And finally,

125
00:06:17,810 --> 00:06:20,840
in this case, I once again call the expect method.

126
00:06:20,840 --> 00:06:21,990
However, as you can see,

127
00:06:21,990 --> 00:06:25,040
I've set the project name to be longer than 12 characters,

128
00:06:25,040 --> 00:06:28,370
and then I simply chain the toThrowError method onto the

129
00:06:28,370 --> 00:06:31,440
end of the expect assertion with the same error referenced

130
00:06:31,440 --> 00:06:33,440
from the construct class file.

131
00:06:33,440 --> 00:06:34,380
And in this case,

132
00:06:34,380 --> 00:06:37,940
the test passes as a result of the forced out of bounds condition.

133
00:06:37,940 --> 00:06:40,980
So hopefully it's clear that creating tests with a combination of fine

134
00:06:40,980 --> 00:06:44,640
grained and validation assertions isn't terribly complicated.

135
00:06:44,640 --> 00:06:46,550
And just like general unit testing,

136
00:06:46,550 --> 00:06:49,600
you can see how testing IAC in this way can ensure a higher

137
00:06:49,600 --> 00:06:54,340
quality standard with much more reliable builds.

138
00:06:54,340 --> 00:06:58,740
So if I flip back over to our demo construct in Visual Studio Code,

139
00:06:58,740 --> 00:07:01,850
let me first show you exactly what I was talking about with the confusion in

140
00:07:01,850 --> 00:07:06,440
the libraries. Right up here you can see that straight out of the gate from

141
00:07:06,440 --> 00:07:12,170
the CDK init, I have the expectCDK alias library from the expect base library

142
00:07:12,170 --> 00:07:15,440
coming out of the cdk/assert library.

143
00:07:15,440 --> 00:07:18,090
And if I go look at that by right‑clicking and saying go to the

144
00:07:18,090 --> 00:07:21,100
definition, and then from inside that library,

145
00:07:21,100 --> 00:07:27,260
I open up expect.js, you can see that here is the root expect library.

146
00:07:27,260 --> 00:07:31,160
The exports here and all of the expect logic is included in this library.

147
00:07:31,160 --> 00:07:34,440
Now remember this was @aws‑cdk/assert.

148
00:07:34,440 --> 00:07:38,530
And if I go ahead and close that and go back and look at the other library,

149
00:07:38,530 --> 00:07:41,890
which is referenced heavily from inside the examples, the jets

150
00:07:41,890 --> 00:07:44,540
is sub library, and I go to that definition,

151
00:07:44,540 --> 00:07:46,920
you can see that there's a namespace in here by which

152
00:07:46,920 --> 00:07:49,550
five extra functions have been created.

153
00:07:49,550 --> 00:07:52,370
And then from there, if I open jest.js,

154
00:07:52,370 --> 00:07:56,500
you can see that here are the extender functions that were created.

155
00:07:56,500 --> 00:07:59,250
So that's what caused a little bit of the confusion.

156
00:07:59,250 --> 00:08:03,840
Now if I go ahead and close that and simply just open one of our sample tests,

157
00:08:03,840 --> 00:08:09,410
for the most part, I used expectCDK because it seems somewhat new from AWS.

158
00:08:09,410 --> 00:08:14,840
And if I had to guess, I'd say this might be the direction they're moving toward.

159
00:08:14,840 --> 00:08:19,640
So let's take a quick look at the test that I've created for this construct.

160
00:08:19,640 --> 00:08:23,010
First, I created a quick out‑of‑the‑box snapshot test,

161
00:08:23,010 --> 00:08:27,750
in which case I set up all the properties, instantiated the object, and now

162
00:08:27,750 --> 00:08:31,010
what we're doing is calling a send utils to CloudFormation,

163
00:08:31,010 --> 00:08:34,070
which takes the stack, and it matches it against a previous

164
00:08:34,070 --> 00:08:37,140
snapshot with the toMatchSnapshot function.

165
00:08:37,140 --> 00:08:39,960
Now I don't have a snapshot created right at the moment,

166
00:08:39,960 --> 00:08:42,210
but if I actually run an npm test,

167
00:08:42,210 --> 00:08:44,880
the first thing it'll do is it'll create a snapshots

168
00:08:44,880 --> 00:08:46,610
folder in my directory listing.

169
00:08:46,610 --> 00:08:49,570
And if you look at it, it'll just be CloudFormation JSON. Now

170
00:08:49,570 --> 00:08:51,820
that's a problem here with the way that we've set up this

171
00:08:51,820 --> 00:08:55,240
construct. We dynamically name S3 buckets.

172
00:08:55,240 --> 00:08:57,980
So every single time I run a snapshot test,

173
00:08:57,980 --> 00:09:01,880
it's going to fail because every single time the CloudFormation JSON is

174
00:09:01,880 --> 00:09:04,440
going to be slightly different with the bucket name.

175
00:09:04,440 --> 00:09:06,120
So for all intents and purposes,

176
00:09:06,120 --> 00:09:11,530
I'm going to go ahead and comment out that snapshot test,

177
00:09:11,530 --> 00:09:16,140
and we'll focus on the fine grained and validation tests.

178
00:09:16,140 --> 00:09:21,240
So the next test that I created is that the construct creates a website bucket.

179
00:09:21,240 --> 00:09:23,000
Now I went ahead and set up the basic properties

180
00:09:23,000 --> 00:09:25,640
again and instantiated the construct.

181
00:09:25,640 --> 00:09:28,940
And now what I'm calling is an expectCDK with a stack,

182
00:09:28,940 --> 00:09:31,580
and I'm using the countResources function to make sure that there is

183
00:09:31,580 --> 00:09:36,690
exactly one AWS S3 bucket created as a result of the test.

184
00:09:36,690 --> 00:09:39,640
Now that's a very simple test, but it's also an obvious one.

185
00:09:39,640 --> 00:09:42,800
If a bucket's not created at all, that test is going to fail.

186
00:09:42,800 --> 00:09:45,620
And there's a lot of reasons why the creation of a bucket could fail.

187
00:09:45,620 --> 00:09:49,130
It could fail because you put special characters in the bucket name or

188
00:09:49,130 --> 00:09:52,540
because your bucket name is simply just too long to be created.

189
00:09:52,540 --> 00:09:54,770
So I took it one step further on the fine‑grained

190
00:09:54,770 --> 00:09:56,410
test and used a few properties.

191
00:09:56,410 --> 00:09:57,250
And in this case,

192
00:09:57,250 --> 00:10:00,770
I used toHaveResource method again looking for an

193
00:10:00,770 --> 00:10:05,080
AWS S3 bucket, but in this case, I dove into the CloudFormation properties,

194
00:10:05,080 --> 00:10:08,320
and I'm actually looking for a bucket that has the error

195
00:10:08,320 --> 00:10:12,240
document and the index documents set to index.html.

196
00:10:12,240 --> 00:10:17,240
So those are two very simple, but very effective fine‑grained tests.

197
00:10:17,240 --> 00:10:19,670
So let me scroll down a little bit further and show you that

198
00:10:19,670 --> 00:10:23,010
I created two validation tests as well.

199
00:10:23,010 --> 00:10:25,480
But before I actually open up that validation test,

200
00:10:25,480 --> 00:10:30,430
let me move back over to our construct and show you that right underneath the

201
00:10:30,430 --> 00:10:34,550
constructor, I created an if statement here that checks to make sure that the

202
00:10:34,550 --> 00:10:36,980
project name is not longer than 12 characters.

203
00:10:36,980 --> 00:10:38,670
Now as you're going to see in the second test,

204
00:10:38,670 --> 00:10:43,410
I also put an if statement in here that checks a regex match to make sure that

205
00:10:43,410 --> 00:10:46,340
the project name doesn't contain any special characters.

206
00:10:46,340 --> 00:10:48,570
Because think about it, I put the project name down

207
00:10:48,570 --> 00:10:50,240
here in the name of the bucket.

208
00:10:50,240 --> 00:10:54,350
So if there are special characters in it or the name is simply just too long,

209
00:10:54,350 --> 00:10:56,670
this bucket's going to fail because it can't take special

210
00:10:56,670 --> 00:11:01,140
characters, and it can't be longer than AWS will allow.

211
00:11:01,140 --> 00:11:03,240
So looking at those two tests,

212
00:11:03,240 --> 00:11:07,020
the first validation test says project name is less than 13 characters.

213
00:11:07,020 --> 00:11:08,720
I set it up in the same way,

214
00:11:08,720 --> 00:11:13,540
and naturally I created the project name to be longer than 12 characters.

215
00:11:13,540 --> 00:11:14,530
And then at that point,

216
00:11:14,530 --> 00:11:18,460
I chain the toThrowError method at the bottom, looking for the project name

217
00:11:18,460 --> 00:11:23,480
must be less than 13 characters error. On the project name containing special

218
00:11:23,480 --> 00:11:25,990
characters, in this case, I named the project with,

219
00:11:25,990 --> 00:11:27,780
you know, my cat walked over my keyboard,

220
00:11:27,780 --> 00:11:30,760
so to speak, and we're looking for the Project name must not contain

221
00:11:30,760 --> 00:11:34,940
special characters error thrown from the construct.

222
00:11:34,940 --> 00:11:39,160
So I'll run an npm run build and an npm run test, keeping in mind, in

223
00:11:39,160 --> 00:11:49,000
this case, that I commented out the snapshot test. And you can see that all three of my tests passed in that case.

