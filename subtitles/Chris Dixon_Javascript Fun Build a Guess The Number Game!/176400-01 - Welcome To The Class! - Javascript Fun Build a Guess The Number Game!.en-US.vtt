WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:08.390 --> 00:00:11.115
Hey, welcome to this class.

00:00:11.115 --> 00:00:13.680
If you are a web development beginner and

00:00:13.680 --> 00:00:16.590
want to just jump in and build some fun projects,

00:00:16.590 --> 00:00:18.840
you've came to the right place.

00:00:18.840 --> 00:00:22.740
The idea behind these series is to show you what you can do

00:00:22.740 --> 00:00:26.550
with regular HTML, CSS, and JavaScript.

00:00:26.550 --> 00:00:28.830
We're not going to be using any frameworks,

00:00:28.830 --> 00:00:31.199
any boilerplate, any libraries,

00:00:31.199 --> 00:00:33.210
or any templates, instead,

00:00:33.210 --> 00:00:35.960
we're going to be building everything completely from scratch,

00:00:35.960 --> 00:00:42.130
step-by-step, to show you how these three technologies all work together.

00:00:42.280 --> 00:00:46.565
This class's project is going to be a guess the number game.

00:00:46.565 --> 00:00:50.860
A computer will generate a random number between one and 100,

00:00:50.860 --> 00:00:56.270
and then we can select if we want to try to guess this in either five or 10 attempts.

00:00:56.270 --> 00:00:58.115
When we select one of these options,

00:00:58.115 --> 00:01:01.430
this [inaudible] our game view where we can add any guess into

00:01:01.430 --> 00:01:05.230
this input that will replace a value such as 50 inside here.

00:01:05.230 --> 00:01:07.425
We see our guess is too high.

00:01:07.425 --> 00:01:09.770
This now means since our guess is too high,

00:01:09.770 --> 00:01:13.710
the correct number is now in the current range of 1-50.

00:01:13.710 --> 00:01:16.050
We can then add a second guess.

00:01:16.050 --> 00:01:17.670
This is also too high,

00:01:17.670 --> 00:01:21.345
so this now means our range is between one and 25.

00:01:21.345 --> 00:01:24.900
Let's go for five, it's just too low,

00:01:24.900 --> 00:01:29.495
12, and we'll begin to narrow down this range between 12-25.

00:01:29.495 --> 00:01:31.010
As we're making these guesses,

00:01:31.010 --> 00:01:32.975
we are also logging the number,

00:01:32.975 --> 00:01:35.540
the previous attempts, as well as the previous

00:01:35.540 --> 00:01:38.490
guesses so we can keep track of things as we go.

00:01:38.490 --> 00:01:40.925
We now have six more attempts to get this right.

00:01:40.925 --> 00:01:45.220
Let's go for 20, 22,

00:01:46.070 --> 00:01:49.710
and on this occasion, the correct guess was 23.

00:01:49.710 --> 00:01:52.335
You see we've got this correct in eight attempts.

00:01:52.335 --> 00:01:57.665
We then have the option to start a new game which will take us back to our start screen.

00:01:57.665 --> 00:02:01.100
This game is constructed completely from scratch.

00:02:01.100 --> 00:02:04.940
We use regular HTML to construct all of the user interface.

00:02:04.940 --> 00:02:09.625
After this, we take advantage of CSS for styling, positioning, and layout.

00:02:09.625 --> 00:02:13.730
Then we introduce JavaScript to make our game fully interactive.

00:02:13.730 --> 00:02:16.850
We handle all of the functionality with regular JavaScript.

00:02:16.850 --> 00:02:19.010
We need to capture the user's input.

00:02:19.010 --> 00:02:22.430
We need to generate a random number between one and 100,

00:02:22.430 --> 00:02:24.830
and then compare this to the user's guess.

00:02:24.830 --> 00:02:26.860
We need to log all of the previous attempts.

00:02:26.860 --> 00:02:28.775
We need to add difficulty settings.

00:02:28.775 --> 00:02:34.055
We need to handle what to do when the game is over and also update the range slider too,

00:02:34.055 --> 00:02:37.450
though the user can narrow it down after each one of their guesses.

00:02:37.450 --> 00:02:39.250
So this is what we're going to be building.

00:02:39.250 --> 00:02:40.970
I'm excited to teach you this one.

00:02:40.970 --> 00:02:43.980
Let's jump in it to the first lesson.
