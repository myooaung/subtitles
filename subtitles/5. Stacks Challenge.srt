1
1

00:00:00,050  -->  00:00:02,558
(futuristic electronic music)
2

2

00:00:02,558  -->  00:00:05,290
(keyboard keys clack)
3

3

00:00:05,290  -->  00:00:07,280
<v Sarah>All right, so let's play around</v>
4

4

00:00:07,280  -->  00:00:08,530
with stacks a little bit.
5

5

00:00:08,530  -->  00:00:11,720
So in this challenge, I want you to determine
6

6

00:00:11,720  -->  00:00:13,980
whether a string is a palindrome,
7

7

00:00:13,980  -->  00:00:16,810
and your solution should use a stack.
8

8

00:00:16,810  -->  00:00:18,120
So what's a palindrome?
9

9

00:00:18,120  -->  00:00:19,940
Well, a palindrome is a string
10

10

00:00:19,940  -->  00:00:23,690
that reads the same way backwards as it does forwards,
11

11

00:00:23,690  -->  00:00:26,890
and so, for example, racecar is a palindrome
12

12

00:00:26,890  -->  00:00:30,390
because if we read it from left to right, it says racecar,
13

13

00:00:30,390  -->  00:00:34,010
and if we read it from right to left, it says racecar,
14

14

00:00:34,010  -->  00:00:36,670
R-A-C-E-C-A-R.
15

15

00:00:36,670  -->  00:00:38,370
Now for this challenge,
16

16

00:00:38,370  -->  00:00:41,840
the strings may contain punctuation.
17

17

00:00:41,840  -->  00:00:44,030
I want you to ignore the punctuation,
18

18

00:00:44,030  -->  00:00:47,870
so I did comma did I is a palindrome
19

19

00:00:47,870  -->  00:00:52,870
because if you remove the comma and the question mark
20

20

00:00:53,060  -->  00:00:56,500
and also ignore spaces, so remove the spaces,
21

21

00:00:56,500  -->  00:00:58,730
this reads the same from left to right
22

22

00:00:58,730  -->  00:01:00,170
as it does from right to left.
23

23

00:01:00,170  -->  00:01:05,060
We have I did, did I and I did, did I going the other way.
24

24

00:01:05,060  -->  00:01:07,220
I also want you to ignore case,
25

25

00:01:07,220  -->  00:01:11,040
so if we had a capital I and a small I here,
26

26

00:01:11,040  -->  00:01:12,740
that would still be a palindrome.
27

27

00:01:12,740  -->  00:01:15,820
So the strings may contain punctuation and spaces.
28

28

00:01:15,820  -->  00:01:19,310
They should be ignored, and case should be ignored.
29

29

00:01:19,310  -->  00:01:21,930
Now there's a starter project in the resources section
30

30

00:01:21,930  -->  00:01:25,240
that contains these strings that I'd like you to test,
31

31

00:01:25,240  -->  00:01:29,180
and there's also a stub for a checkForPalindrome method,
32

32

00:01:29,180  -->  00:01:31,280
and so, you can code it however you want,
33

33

00:01:31,280  -->  00:01:34,820
as long as your solution uses a stack.
34

34

00:01:34,820  -->  00:01:36,750
Now, when I say a stack,
35

35

00:01:36,750  -->  00:01:41,560
I don't mean that you have to use our stack implementation,
36

36

00:01:41,560  -->  00:01:42,393
though you could.
37

37

00:01:42,393  -->  00:01:45,020
I mean you can use any class you want,
38

38

00:01:45,020  -->  00:01:47,710
including classes we looked at in the JDK,
39

39

00:01:47,710  -->  00:01:50,530
and I'll tell you that my solution uses a JDK,
40

40

00:01:50,530  -->  00:01:54,510
as long as you're using the LIFO behaviour of stacks,
41

41

00:01:54,510  -->  00:01:56,890
and so, somehow, you have to use
42

42

00:01:56,890  -->  00:01:59,410
the last in, first out behaviour,
43

43

00:01:59,410  -->  00:02:00,780
and so, good luck,
44

44

00:02:00,780  -->  00:02:02,913
and I'll see you in the solution video.
