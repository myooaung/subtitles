WEBVTT
1
00:00:01.030 --> 00:00:03.050
- One of the biggest issues I have seen

2
00:00:03.050 --> 00:00:06.020
in run-time application management

3
00:00:06.020 --> 00:00:08.030
is that systems administrators

4
00:00:08.030 --> 00:00:13.030
look at processes, whereas developers look at applications.

5
00:00:13.030 --> 00:00:17.050
This is even more apparent in the monolithic model

6
00:00:17.050 --> 00:00:22.070
of a single application server hosting many applications.

7
00:00:22.070 --> 00:00:26.040
To a systems administrator, there is one process

8
00:00:26.040 --> 00:00:29.090
and that is the application server itself.

9
00:00:29.090 --> 00:00:32.010
They have no visibility into the applications

10
00:00:32.010 --> 00:00:35.000
running inside of the container.

11
00:00:35.000 --> 00:00:37.020
Now some teams have built a hybrid position

12
00:00:37.020 --> 00:00:39.080
called an application administrator

13
00:00:39.080 --> 00:00:41.050
to deal with this discrepancy

14
00:00:41.050 --> 00:00:46.040
between the systems administrators and the developers.

15
00:00:46.040 --> 00:00:48.080
12 factor methodologies deal with this problem

16
00:00:48.080 --> 00:00:51.010
in a different way.

17
00:00:51.010 --> 00:00:53.030
Applications themselves are deployed

18
00:00:53.030 --> 00:00:57.050
as one or more processes instead of embedding them

19
00:00:57.050 --> 00:00:59.090
in another process.

20
00:00:59.090 --> 00:01:03.080
So the focus becomes one and the same.

21
00:01:03.080 --> 00:01:06.050
As a developer, this would be akin to running the

22
00:01:06.050 --> 00:01:10.060
Hello World program from the command line

23
00:01:10.060 --> 00:01:16.000
and indeed, that is what a 12 factor application is doing.

24
00:01:16.000 --> 00:01:20.010
Obviously with much more complex code.

25
00:01:20.010 --> 00:01:23.010
Before we get too deep into the how,

26
00:01:23.010 --> 00:01:27.040
let's talk for moment about the why.

27
00:01:27.040 --> 00:01:29.030
In a 12 factor application,

28
00:01:29.030 --> 00:01:32.050
you're running processes that are stateless.

29
00:01:32.050 --> 00:01:35.030
You should assume that there is no guarantee

30
00:01:35.030 --> 00:01:38.080
that data in memory will be either outside the run-time

31
00:01:38.080 --> 00:01:41.020
of the current process.

32
00:01:41.020 --> 00:01:45.050
In fact, relying on data either in the file system

33
00:01:45.050 --> 00:01:49.000
or in memory from operation to operation,

34
00:01:49.000 --> 00:01:53.030
is a violation of the premise of this factor.

35
00:01:53.030 --> 00:01:56.010
Memory usage should be single threaded,

36
00:01:56.010 --> 00:01:58.020
and short lived.

37
00:01:58.020 --> 00:01:59.060
Anything that needs to be stored

38
00:01:59.060 --> 00:02:04.000
from operation to operation needs to leverage a database

39
00:02:04.000 --> 00:02:06.020
or a cache.

40
00:02:06.020 --> 00:02:09.000
This becomes even more critical

41
00:02:09.000 --> 00:02:12.060
as we look at the life cycle of a 12 factor application

42
00:02:12.060 --> 00:02:16.040
and how applications can have instances created,

43
00:02:16.040 --> 00:02:19.080
destroyed or scaled at will.

44
00:02:19.080 --> 00:02:21.090
When dealing with sessions,

45
00:02:21.090 --> 00:02:24.050
12 factor looks at sticky sessions

46
00:02:24.050 --> 00:02:27.030
as a violation of the methodology.

47
00:02:27.030 --> 00:02:30.080
So you should use technology for caching session data

48
00:02:30.080 --> 00:02:33.010
in an external data store

49
00:02:33.010 --> 00:02:36.040
instead of using local memory.

50
00:02:36.040 --> 00:02:39.070
Now, let's talk about converting legacy applications

51
00:02:39.070 --> 00:02:41.090
to using this factor.

52
00:02:41.090 --> 00:02:44.060
This can be challenging in its own right.

53
00:02:44.060 --> 00:02:47.030
But it's definitely very doable.

54
00:02:47.030 --> 00:02:49.050
The first place I would look

55
00:02:49.050 --> 00:02:51.010
are the frameworks in your language

56
00:02:51.010 --> 00:02:53.000
that can be used to convert your application

57
00:02:53.000 --> 00:02:56.060
to a single process.

58
00:02:56.060 --> 00:02:59.090
One example is a technology that allows the application

59
00:02:59.090 --> 00:03:04.000
server to run inside of the application

60
00:03:04.000 --> 00:03:06.070
instead of the other way around.

61
00:03:06.070 --> 00:03:09.050
In addition to changing how your application starts

62
00:03:09.050 --> 00:03:14.090
and runs, you also need to evaluate your memory usage.

63
00:03:14.090 --> 00:03:17.070
Cache technologies are always an option to leverage

64
00:03:17.070 --> 00:03:23.000
cases where you are relying on the memory of the system.

65
00:03:23.000 --> 00:03:26.010
But there are also ways to re-write your application

66
00:03:26.010 --> 00:03:28.030
and specify API calls,

67
00:03:28.030 --> 00:03:32.030
to make your application truly stateless.

68
00:03:32.030 --> 00:03:33.070
As with all of this,

69
00:03:33.070 --> 00:03:36.060
you have to change how you think

70
00:03:36.060 --> 00:03:39.020
about application development itself.

71
00:03:39.020 --> 00:03:42.090
And in many cases, it is getting back to the basics

72
00:03:42.090 --> 00:03:45.030
of how you learn to write code.

73
00:03:45.030 --> 00:03:47.030
Simplify your system.

74
00:03:47.030 --> 00:03:51.000
Remove complexities and move forward.

