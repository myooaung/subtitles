WEBVTT
1
00:00:01.010 --> 00:00:04.020
- Imagine for a moment, that every service you need

2
00:00:04.020 --> 00:00:07.020
in order to execute functions in your application

3
00:00:07.020 --> 00:00:11.070
were attached directly to it as if they were a component.

4
00:00:11.070 --> 00:00:13.070
This is the aim of the fourth factor

5
00:00:13.070 --> 00:00:16.060
of cloud-native applications.

6
00:00:16.060 --> 00:00:18.090
In a 12-factor application,

7
00:00:18.090 --> 00:00:22.040
each of the services is mounted to your application

8
00:00:22.040 --> 00:00:24.050
as a backing service.

9
00:00:24.050 --> 00:00:26.030
So before we dig too deep

10
00:00:26.030 --> 00:00:29.020
into the concept of backing services,

11
00:00:29.020 --> 00:00:33.030
we need to really understand what these services are.

12
00:00:33.030 --> 00:00:36.080
Backing services in a cloud-native application,

13
00:00:36.080 --> 00:00:38.020
include any service

14
00:00:38.020 --> 00:00:41.070
that is communicated with over a network.

15
00:00:41.070 --> 00:00:45.020
Think about database connections, cache providers,

16
00:00:45.020 --> 00:00:49.010
file sharing services like SFTP or Amazon S3,

17
00:00:49.010 --> 00:00:53.040
email services, and the list goes on and on.

18
00:00:53.040 --> 00:00:55.080
In a 12-factor application,

19
00:00:55.080 --> 00:00:59.080
remote services are treated the same as the local services

20
00:00:59.080 --> 00:01:02.010
and that is the key to this pattern.

21
00:01:02.010 --> 00:01:04.060
This is such a powerful factor

22
00:01:04.060 --> 00:01:07.000
for reducing the code complexity

23
00:01:07.000 --> 00:01:09.050
of dealing with network resources.

24
00:01:09.050 --> 00:01:11.030
You simply use a framework,

25
00:01:11.030 --> 00:01:15.060
and assume your service is bound to your application.

26
00:01:15.060 --> 00:01:18.080
These backing services are bound by URL

27
00:01:18.080 --> 00:01:21.090
to the remote or local resource identically.

28
00:01:21.090 --> 00:01:25.060
And that URL is provided by the config

29
00:01:25.060 --> 00:01:27.060
that's managed by those rules defined

30
00:01:27.060 --> 00:01:30.010
by the previous factor.

31
00:01:30.010 --> 00:01:33.030
In addition to making your code a little cleaner,

32
00:01:33.030 --> 00:01:36.000
treating backing services in this manner

33
00:01:36.000 --> 00:01:39.010
allows you to swap out the service in each environment

34
00:01:39.010 --> 00:01:42.060
or data center, to match your system's needs.

35
00:01:42.060 --> 00:01:47.040
Now often I find myself writing proof-of-concept type code

36
00:01:47.040 --> 00:01:50.030
using a local embedded database

37
00:01:50.030 --> 00:01:53.060
and then simply swapping it out during a deployment,

38
00:01:53.060 --> 00:01:57.000
with a database bound as a backing service.

39
00:01:57.000 --> 00:01:59.010
The best part of this,

40
00:01:59.010 --> 00:02:02.020
is that as long as I write my application

41
00:02:02.020 --> 00:02:04.070
according to the 12-factor patterns,

42
00:02:04.070 --> 00:02:08.010
I can do this backing service swapping out

43
00:02:08.010 --> 00:02:09.050
without any work,

44
00:02:09.050 --> 00:02:12.050
besides the creation of the service itself.

45
00:02:12.050 --> 00:02:14.080
The power of this simple swapping

46
00:02:14.080 --> 00:02:18.040
expands into the operations model as well.

47
00:02:18.040 --> 00:02:20.020
Let's consider the use case of moving

48
00:02:20.020 --> 00:02:23.000
from a plain text database connection

49
00:02:23.000 --> 00:02:25.050
to an encrypted one.

50
00:02:25.050 --> 00:02:28.030
Often doing so would require a redeploy

51
00:02:28.030 --> 00:02:30.070
of a legacy application.

52
00:02:30.070 --> 00:02:33.060
However, in a cloud-native model,

53
00:02:33.060 --> 00:02:36.090
you build the service, bind it to your application,

54
00:02:36.090 --> 00:02:38.080
and restart.

55
00:02:38.080 --> 00:02:42.090
This is extremely efficient from an operations perspective.

56
00:02:42.090 --> 00:02:44.040
Especially when that system

57
00:02:44.040 --> 00:02:47.010
is acting just a little bit flaky,

58
00:02:47.010 --> 00:02:49.070
you just simply replace it.

59
00:02:49.070 --> 00:02:52.000
Moving legacy code to this model

60
00:02:52.000 --> 00:02:54.080
is a bit challenging at times.

61
00:02:54.080 --> 00:02:56.070
I rely heavily on frameworks

62
00:02:56.070 --> 00:02:59.070
designed to leverage bound services

63
00:02:59.070 --> 00:03:04.000
in moving legacy applications to a cloud-native version.

64
00:03:04.000 --> 00:03:06.030
If that isn't an option for you,

65
00:03:06.030 --> 00:03:08.060
consider looking at existing patterns

66
00:03:08.060 --> 00:03:10.070
in your programming language.

67
00:03:10.070 --> 00:03:13.060
Most, if not all of them, have patterns

68
00:03:13.060 --> 00:03:17.050
that have been identified to solve this.

69
00:03:17.050 --> 00:03:19.080
Once you have determined a path,

70
00:03:19.080 --> 00:03:23.000
you will have to start going through your application code.

71
00:03:23.000 --> 00:03:25.070
Essentially, instead of building connections

72
00:03:25.070 --> 00:03:28.010
to those services manually,

73
00:03:28.010 --> 00:03:31.020
you will assume that it has been injected into your code

74
00:03:31.020 --> 00:03:33.030
by the container.

75
00:03:33.030 --> 00:03:35.010
You will know you got them all,

76
00:03:35.010 --> 00:03:38.070
if you can swap out any of your bound services

77
00:03:38.070 --> 00:03:40.050
with an equivalent one

78
00:03:40.050 --> 00:03:42.020
and the application's traffic

79
00:03:42.020 --> 00:03:45.020
moves to the new service.

80
00:03:45.020 --> 00:03:48.020
Binding these backing services to your application

81
00:03:48.020 --> 00:03:52.000
during runtime, instead of compile time,

82
00:03:52.000 --> 00:03:55.000
will allow you to be much more flexible

83
00:03:55.000 --> 00:03:57.040
with your ecosystem as a whole.

84
00:03:57.040 --> 00:04:01.000
And that is what cloud computing is all about.

