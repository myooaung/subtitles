WEBVTT
1
00:00:01.010 --> 00:00:05.010
- The joys of managing dependencies and modern day systems

2
00:00:05.010 --> 00:00:07.030
sends a chill over most developers

3
00:00:07.030 --> 00:00:09.060
at some point in their career.

4
00:00:09.060 --> 00:00:13.010
Now, for me, this is especially true in the Java world

5
00:00:13.010 --> 00:00:15.030
with the promises of J2EE,

6
00:00:15.030 --> 00:00:18.030
where an application server provides all the dependencies

7
00:00:18.030 --> 00:00:20.030
you need to run your application.

8
00:00:20.030 --> 00:00:22.050
Issues that arise with provided dependencies

9
00:00:22.050 --> 00:00:25.080
can quickly spiral out of control.

10
00:00:25.080 --> 00:00:28.030
Vendor lock-in will occur,

11
00:00:28.030 --> 00:00:31.010
regardless of promises that it won't.

12
00:00:31.010 --> 00:00:32.090
Operating systems will have updates

13
00:00:32.090 --> 00:00:35.070
to core components that you rely on

14
00:00:35.070 --> 00:00:39.010
and, inevitably, those changes will be non-passive

15
00:00:39.010 --> 00:00:41.080
and they will render your application broken

16
00:00:41.080 --> 00:00:45.020
without you changing a single line of code.

17
00:00:45.020 --> 00:00:48.090
The same non-passive changes will occur in components

18
00:00:48.090 --> 00:00:51.080
that you specifically load into the environment

19
00:00:51.080 --> 00:00:54.010
for all applications to use.

20
00:00:54.010 --> 00:00:55.070
Because, at some point,

21
00:00:55.070 --> 00:00:57.010
one of those applications

22
00:00:57.010 --> 00:00:59.050
is going to require an updated version

23
00:00:59.050 --> 00:01:01.060
that breaks everything else.

24
00:01:01.060 --> 00:01:04.080
Now, this cycle goes on and on.

25
00:01:04.080 --> 00:01:07.000
With twelve-factor applications,

26
00:01:07.000 --> 00:01:08.070
you avoid this scenario

27
00:01:08.070 --> 00:01:11.010
by providing all of the dependencies

28
00:01:11.010 --> 00:01:13.080
that your application needs to run.

29
00:01:13.080 --> 00:01:16.040
The dependencies are declared in a manifest

30
00:01:16.040 --> 00:01:19.040
appropriate to the development language.

31
00:01:19.040 --> 00:01:23.040
This manifest not only specifies the dependency,

32
00:01:23.040 --> 00:01:26.060
but the appropriate version to leverage.

33
00:01:26.060 --> 00:01:29.010
Your build system will then package that dependency

34
00:01:29.010 --> 00:01:33.060
for the application to use during deployment and runtime.

35
00:01:33.060 --> 00:01:36.020
The specification of dependencies

36
00:01:36.020 --> 00:01:39.040
is not only critical to the twelve-factor model,

37
00:01:39.040 --> 00:01:42.090
but also the isolation of those dependencies.

38
00:01:42.090 --> 00:01:46.040
Under no circumstance should multiple applications

39
00:01:46.040 --> 00:01:49.040
share a common dependency.

40
00:01:49.040 --> 00:01:53.050
Each application should run in its own sandbox

41
00:01:53.050 --> 00:01:56.010
and execute as if there is nothing provided

42
00:01:56.010 --> 00:01:58.090
by the underlying operating system.

43
00:01:58.090 --> 00:02:01.000
Now, as mentioned previously,

44
00:02:01.000 --> 00:02:03.080
this is a shift from traditional models

45
00:02:03.080 --> 00:02:07.010
and I find that it is very difficult aspect

46
00:02:07.010 --> 00:02:10.060
when migrating legacy code from any developers.

47
00:02:10.060 --> 00:02:14.020
All too often in the past we expected the application

48
00:02:14.020 --> 00:02:17.070
to consume resources of the runtime environment.

49
00:02:17.070 --> 00:02:20.060
Consider how many batch jobs you've written

50
00:02:20.060 --> 00:02:23.040
that leverage Sendmail or cURL.

51
00:02:23.040 --> 00:02:26.070
Consider how many times you've logged messages

52
00:02:26.070 --> 00:02:30.000
to an underlying console or log system

53
00:02:30.000 --> 00:02:33.090
without ever explicitly declaring them in your application.

54
00:02:33.090 --> 00:02:37.020
This is a major shift in the development paradigm,

55
00:02:37.020 --> 00:02:40.040
but the rewards are justified.

56
00:02:40.040 --> 00:02:41.060
One of the major rewards

57
00:02:41.060 --> 00:02:45.000
is true portability of your application,

58
00:02:45.000 --> 00:02:48.030
which is very important in a distributed model.

59
00:02:48.030 --> 00:02:50.020
The application that doesn't rely

60
00:02:50.020 --> 00:02:53.020
on anything from its runtime container

61
00:02:53.020 --> 00:02:57.030
can literally run anywhere that supports its execution.

62
00:02:57.030 --> 00:03:00.050
Since most modern operating systems and containers

63
00:03:00.050 --> 00:03:04.060
have the ability to run most modern frameworks,

64
00:03:04.060 --> 00:03:08.080
that becomes a minor concern, if any at all.

65
00:03:08.080 --> 00:03:11.040
Other major benefit of this factor

66
00:03:11.040 --> 00:03:14.070
is easier onboarding for a new developer.

67
00:03:14.070 --> 00:03:16.020
A developer will not have to go through

68
00:03:16.020 --> 00:03:20.050
any complex setup to get the application running locally.

69
00:03:20.050 --> 00:03:23.020
Since the application deployed locally

70
00:03:23.020 --> 00:03:26.030
will behave the same as if it's deployed remotely,

71
00:03:26.030 --> 00:03:29.050
there is little effort for him or her to get started.

72
00:03:29.050 --> 00:03:31.060
This means a lot to Agile teams

73
00:03:31.060 --> 00:03:34.000
where resources may be shuffled,

74
00:03:34.000 --> 00:03:36.020
often based on business needs.

75
00:03:36.020 --> 00:03:39.030
Now, as long as you build your application correctly

76
00:03:39.030 --> 00:03:40.080
using this factor,

77
00:03:40.080 --> 00:03:44.040
your app should run anywhere, in any container,

78
00:03:44.040 --> 00:03:46.000
and on any operating system.

