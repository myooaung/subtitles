WEBVTT
1
00:00:01.000 --> 00:00:04.050
- In a 12-factor application, there is no separate

2
00:00:04.050 --> 00:00:07.080
container handling the requests and responses

3
00:00:07.080 --> 00:00:09.080
for your application.

4
00:00:09.080 --> 00:00:12.010
Your application needs to handle the protocols

5
00:00:12.010 --> 00:00:16.010
of communication, but when writing your application,

6
00:00:16.010 --> 00:00:18.070
you don't know how it will be executed,

7
00:00:18.070 --> 00:00:22.010
so you would have to assume the defaults.

8
00:00:22.010 --> 00:00:25.030
To solve the challenge of multiple processes

9
00:00:25.030 --> 00:00:30.020
in the same OS container, running the same protocol,

10
00:00:30.020 --> 00:00:34.070
the 12-factor patterns use a strategy of port binding.

11
00:00:34.070 --> 00:00:38.080
Each process has its communication protocols bound

12
00:00:38.080 --> 00:00:42.070
to a usually non-standard port, allowing it run

13
00:00:42.070 --> 00:00:46.040
in a container in an isolated fashion.

14
00:00:46.040 --> 00:00:49.040
One of the first questions that might arise is how

15
00:00:49.040 --> 00:00:53.030
does a development team deal with all of this?

16
00:00:53.030 --> 00:00:55.060
And the answer is you don't.

17
00:00:55.060 --> 00:00:58.050
When in a development environment, you leverage

18
00:00:58.050 --> 00:01:01.080
some form of manual port binding, either providing

19
00:01:01.080 --> 00:01:04.060
the port as an environment variable locally,

20
00:01:04.060 --> 00:01:07.060
or through a command line parameter.

21
00:01:07.060 --> 00:01:10.010
Once in a deployment environment, however,

22
00:01:10.010 --> 00:01:12.020
your application is served its messages

23
00:01:12.020 --> 00:01:14.060
through a routing technology that handles

24
00:01:14.060 --> 00:01:16.080
the communications.

25
00:01:16.080 --> 00:01:20.050
Now, enabling port binding is often, once again,

26
00:01:20.050 --> 00:01:23.030
a framework, or pattern, to solve.

27
00:01:23.030 --> 00:01:27.010
As such, the migration of legacy applications

28
00:01:27.010 --> 00:01:30.080
to 12-factor in this world may require

29
00:01:30.080 --> 00:01:33.070
some additional dependencies.

30
00:01:33.070 --> 00:01:37.030
Often, higher level languages will have frameworks

31
00:01:37.030 --> 00:01:41.060
that allow your application to manage the ports when needed.

32
00:01:41.060 --> 00:01:44.090
Most of these options do rely on dependency injection type

33
00:01:44.090 --> 00:01:48.050
technologies and patterns.

34
00:01:48.050 --> 00:01:52.060
One of the cool parts of port binding is what you can

35
00:01:52.060 --> 00:01:56.080
do with it in a development situation, or in my case,

36
00:01:56.080 --> 00:01:59.010
often a presentation environment.

37
00:01:59.010 --> 00:02:02.060
These benefits transition to the real world as well,

38
00:02:02.060 --> 00:02:05.070
so its usage isn't futile.

39
00:02:05.070 --> 00:02:08.080
Let me walk through a simple scenario here.

40
00:02:08.080 --> 00:02:12.000
I am trying to explain in Java how to do cloud native

41
00:02:12.000 --> 00:02:14.050
applications for another course.

42
00:02:14.050 --> 00:02:19.070
In doing so, I am running multiple applications at once,

43
00:02:19.070 --> 00:02:23.000
some offering services that I write, some offering services

44
00:02:23.000 --> 00:02:25.060
that were written by third parties.

45
00:02:25.060 --> 00:02:28.090
Now, by leveraging port binding, I can run all

46
00:02:28.090 --> 00:02:32.040
of the applications on my local system,

47
00:02:32.040 --> 00:02:34.080
and I have no need for VMs.

48
00:02:34.080 --> 00:02:38.010
In addition, I can offer the services to applications

49
00:02:38.010 --> 00:02:40.070
that are also running, and this is where

50
00:02:40.070 --> 00:02:43.080
the real benefit comes in.

51
00:02:43.080 --> 00:02:47.020
Your services can become backing services for another

52
00:02:47.020 --> 00:02:50.060
application in the same framework, in the same operating

53
00:02:50.060 --> 00:02:54.030
system, because of the port bindings.

54
00:02:54.030 --> 00:02:57.030
Now, you can leverage the configuration of the producer

55
00:02:57.030 --> 00:03:00.060
application to advertise the port information

56
00:03:00.060 --> 00:03:02.020
of the consumer.

57
00:03:02.020 --> 00:03:05.070
Ultimately, you're letting the framework or the container

58
00:03:05.070 --> 00:03:09.000
handle the port binding so that you don't have to.

