WEBVTT
1
00:00:00.090 --> 00:00:03.090
- Twelve-Factor applications have to be designed

2
00:00:03.090 --> 00:00:06.070
and built to be disposable.

3
00:00:06.070 --> 00:00:09.070
An application should be able to handle constantly

4
00:00:09.070 --> 00:00:13.080
being started and stopped at a moment's notice.

5
00:00:13.080 --> 00:00:16.060
Before we get too deep into this factor,

6
00:00:16.060 --> 00:00:18.030
let's talk a little bit

7
00:00:18.030 --> 00:00:23.040
about why disposability is so critical.

8
00:00:23.040 --> 00:00:27.000
One reason, that isn't often mentioned,

9
00:00:27.000 --> 00:00:31.020
but is very near and dear to my heart, is security.

10
00:00:31.020 --> 00:00:34.040
It actually is a pattern in the security world

11
00:00:34.040 --> 00:00:37.010
to build processes and applications

12
00:00:37.010 --> 00:00:41.090
that have very short lives in order to minimize the impact

13
00:00:41.090 --> 00:00:45.060
of an application instance being compromised.

14
00:00:45.060 --> 00:00:49.030
Another reason disposability is so critical,

15
00:00:49.030 --> 00:00:52.070
is the scalability of an application.

16
00:00:52.070 --> 00:00:57.040
A process that starts fast and shuts down fast allows

17
00:00:57.040 --> 00:01:02.060
for an environment with auto-scalable application instances.

18
00:01:02.060 --> 00:01:06.040
The benefit of such a model, is that under higher load,

19
00:01:06.040 --> 00:01:10.010
the container can add more instances dynamically,

20
00:01:10.010 --> 00:01:14.040
and then as load decreases, it can scale them back down.

21
00:01:14.040 --> 00:01:17.020
This allows you to serve the user needs

22
00:01:17.020 --> 00:01:20.070
without major slowdowns while also providing

23
00:01:20.070 --> 00:01:26.030
for reduced costs by preventing waste and resources.

24
00:01:26.030 --> 00:01:31.030
Finally, this factor is important because crashes happen.

25
00:01:31.030 --> 00:01:34.090
By building your applications to be easily shutdown

26
00:01:34.090 --> 00:01:38.060
and started up, it makes your overall system

27
00:01:38.060 --> 00:01:40.090
more fault tolerant.

28
00:01:40.090 --> 00:01:43.060
So let's talk about how to achieve the promises

29
00:01:43.060 --> 00:01:45.060
of this factor.

30
00:01:45.060 --> 00:01:49.050
The first aspect of a disposable process

31
00:01:49.050 --> 00:01:52.030
is fast start up times.

32
00:01:52.030 --> 00:01:54.010
Your application design needs

33
00:01:54.010 --> 00:01:56.050
to take into account everything that has

34
00:01:56.050 --> 00:02:00.040
to be done during start up, and focus on ways

35
00:02:00.040 --> 00:02:03.050
to make them happen as quickly as possible,

36
00:02:03.050 --> 00:02:06.020
often with parallel tasks.

37
00:02:06.020 --> 00:02:08.040
In addition, you need to focus

38
00:02:08.040 --> 00:02:13.070
on what isn't needed immediately when a process starts up,

39
00:02:13.070 --> 00:02:16.090
and move it out of the start up routine.

40
00:02:16.090 --> 00:02:21.000
By moving these tasks to slightly later in the life cycle,

41
00:02:21.000 --> 00:02:25.000
your application can start listening for requests sooner.

42
00:02:25.000 --> 00:02:26.070
The second design aspect

43
00:02:26.070 --> 00:02:29.080
is handling shutdowns appropriately.

44
00:02:29.080 --> 00:02:32.040
Your application should be designed,

45
00:02:32.040 --> 00:02:35.020
that when a shutdown request comes in,

46
00:02:35.020 --> 00:02:37.090
it's handled gracefully.

47
00:02:37.090 --> 00:02:41.050
This can include refusing new connections to the application

48
00:02:41.050 --> 00:02:44.080
while it finishes processing existing ones.

49
00:02:44.080 --> 00:02:47.090
It can also include storing appropriate data

50
00:02:47.090 --> 00:02:50.010
to the data store or cache,

51
00:02:50.010 --> 00:02:53.080
so that other processes can pick that information up.

52
00:02:53.080 --> 00:02:56.040
This graceful shutdown model

53
00:02:56.040 --> 00:03:01.050
should also be used whenever possible in crash scenarios.

54
00:03:01.050 --> 00:03:04.010
Moving a legacy application to cloud-native

55
00:03:04.010 --> 00:03:07.090
with this factor can be fairly straightforward.

56
00:03:07.090 --> 00:03:10.050
I don't want to sound like a broken record,

57
00:03:10.050 --> 00:03:12.070
but there are frameworks like Spring Boot

58
00:03:12.070 --> 00:03:16.010
and Node modules available to handle much of what we need

59
00:03:16.010 --> 00:03:19.050
to do in order to make this factor a reality

60
00:03:19.050 --> 00:03:22.080
while converting these legacy applications.

61
00:03:22.080 --> 00:03:24.060
At the very least,

62
00:03:24.060 --> 00:03:27.040
you need to ensure that you have a clean start up routine,

63
00:03:27.040 --> 00:03:30.050
following the patterns I've previously mentioned.

64
00:03:30.050 --> 00:03:32.000
In addition, you need

65
00:03:32.000 --> 00:03:35.020
to ensure you have you have really good error handling

66
00:03:35.020 --> 00:03:37.000
and crash protection,

67
00:03:37.000 --> 00:03:39.030
so that you can clean up your application,

68
00:03:39.030 --> 00:03:41.000
before it goes out of scope.

