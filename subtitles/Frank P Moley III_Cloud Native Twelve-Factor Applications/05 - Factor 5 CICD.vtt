WEBVTT
1
00:00:00.060 --> 00:00:04.040
- The fifth factor is the first one that deals more with

2
00:00:04.040 --> 00:00:07.020
how our code is managed in the ecosystem,

3
00:00:07.020 --> 00:00:10.060
rather than the actual code itself.

4
00:00:10.060 --> 00:00:14.000
What this factor aims to convey is that there should be

5
00:00:14.000 --> 00:00:16.060
distinct phases of the life cycle

6
00:00:16.060 --> 00:00:19.060
of a deployed application version.

7
00:00:19.060 --> 00:00:24.020
Now, CI/CD definitely makes this whole process easier,

8
00:00:24.020 --> 00:00:27.000
especially when leveraging pipelines,

9
00:00:27.000 --> 00:00:30.070
but as I just mentioned, this isn't a requirement.

10
00:00:30.070 --> 00:00:33.060
We need to be clear that these phases are specifically

11
00:00:33.060 --> 00:00:36.090
addressing a non-production deployment.

12
00:00:36.090 --> 00:00:41.030
While this strategy can be applied to production deployments

13
00:00:41.030 --> 00:00:44.060
as well, often, production deployments simply involve

14
00:00:44.060 --> 00:00:47.080
quality gates, and then moving the bits from the

15
00:00:47.080 --> 00:00:50.050
non-prod to the prod environment.

16
00:00:50.050 --> 00:00:53.040
So with that being said, let's take a look at each of the

17
00:00:53.040 --> 00:00:56.060
stages as separate entities.

18
00:00:56.060 --> 00:00:59.030
The build stage begins with a developer

19
00:00:59.030 --> 00:01:01.040
or a development team.

20
00:01:01.040 --> 00:01:04.080
He or she decides that the code is ready for deployment

21
00:01:04.080 --> 00:01:08.020
and either triggers a code review or they simply

22
00:01:08.020 --> 00:01:10.090
trigger the build themselves.

23
00:01:10.090 --> 00:01:14.060
Again, this is team dependent, and not that critical

24
00:01:14.060 --> 00:01:17.040
for the twelve factor methodology.

25
00:01:17.040 --> 00:01:21.020
What is important is that the code base is transformed

26
00:01:21.020 --> 00:01:24.060
into the build by a process specific

27
00:01:24.060 --> 00:01:28.000
to the language and framework.

28
00:01:28.000 --> 00:01:31.010
The build stage is the only stage that actually

29
00:01:31.010 --> 00:01:33.060
incorporates code changes.

30
00:01:33.060 --> 00:01:37.050
And as such, new builds must be triggered to get new

31
00:01:37.050 --> 00:01:41.030
features or bug fixes into the environment.

32
00:01:41.030 --> 00:01:45.050
A release takes the artifact or artifacts from the build

33
00:01:45.050 --> 00:01:49.020
stage and combines it with its configuration

34
00:01:49.020 --> 00:01:52.040
to create a runnable component.

35
00:01:52.040 --> 00:01:56.010
The config is based on the current environment target

36
00:01:56.010 --> 00:01:58.040
and the artifact itself.

37
00:01:58.040 --> 00:02:02.020
But at this stage, no new code is introduced,

38
00:02:02.020 --> 00:02:05.000
only new configuration.

39
00:02:05.000 --> 00:02:07.050
The code change impacts the build

40
00:02:07.050 --> 00:02:11.040
and the configuration change impacts the release.

41
00:02:11.040 --> 00:02:14.060
It is possible to modify the configuration

42
00:02:14.060 --> 00:02:17.000
without impacting the build.

43
00:02:17.000 --> 00:02:21.090
So a new release can occur without a new build.

44
00:02:21.090 --> 00:02:25.070
One important note is that each release should be tagged

45
00:02:25.070 --> 00:02:28.080
with a time stamp or version number.

46
00:02:28.080 --> 00:02:33.060
Once a release is created, it is considered unmutable.

47
00:02:33.060 --> 00:02:37.090
Version numbers, for instance, should only increment,

48
00:02:37.090 --> 00:02:40.090
and obviously, unless you're Marty McFly,

49
00:02:40.090 --> 00:02:45.020
time stamps only increment as well.

50
00:02:45.020 --> 00:02:48.040
The final stage is the run stage.

51
00:02:48.040 --> 00:02:51.080
Basically, the run stage is nothing more than taking

52
00:02:51.080 --> 00:02:56.090
the release and executing the appropriate system processes

53
00:02:56.090 --> 00:02:59.060
to make your application run.

54
00:02:59.060 --> 00:03:03.030
Your running application should be completely tolerant

55
00:03:03.030 --> 00:03:05.080
of repeated restarts.

56
00:03:05.080 --> 00:03:09.080
In fact, constantly disposing of run time executions

57
00:03:09.080 --> 00:03:13.010
is a common security practice.

58
00:03:13.010 --> 00:03:16.040
And we all know that not every restart is controlled

59
00:03:16.040 --> 00:03:19.030
and crashes do occur in running code.

60
00:03:19.030 --> 00:03:24.030
Now these three distinct phases of build, release, and run

61
00:03:24.030 --> 00:03:27.010
occur throughout the life of the application

62
00:03:27.010 --> 00:03:29.050
over and over again.

63
00:03:29.050 --> 00:03:32.080
I would highly recommend implementing CI/CD

64
00:03:32.080 --> 00:03:35.000
so you don't repeat yourself.

