WEBVTT
1
00:00:00.080 --> 00:00:02.050
Concurrency is a challenge in

2
00:00:02.050 --> 00:00:05.030
the legacy monolithic world, and I would

3
00:00:05.030 --> 00:00:07.090
like to start taking about this factor

4
00:00:07.090 --> 00:00:09.060
from that perspective.

5
00:00:09.060 --> 00:00:11.090
Let's consider the most basic use case

6
00:00:11.090 --> 00:00:17.000
for concurrency in this space, increased demand.

7
00:00:17.000 --> 00:00:20.010
Imagine for a moment you have a traditional application

8
00:00:20.010 --> 00:00:25.040
and are seeing an increased load on a single API.

9
00:00:25.040 --> 00:00:28.030
Now you can either increase the horsepower

10
00:00:28.030 --> 00:00:32.000
to the entire system or spawn a new instance

11
00:00:32.000 --> 00:00:35.090
of your entire application, which in the legacy case,

12
00:00:35.090 --> 00:00:39.080
includes everything that your application exposes.

13
00:00:39.080 --> 00:00:42.070
I hope you immediately see the wasteful nature

14
00:00:42.070 --> 00:00:46.080
of solving the issue in this manner.

15
00:00:46.080 --> 00:00:49.050
This, of course, assumes that you can even increase

16
00:00:49.050 --> 00:00:52.010
the application instances or horsepower

17
00:00:52.010 --> 00:00:56.000
without choking other processes.

18
00:00:56.000 --> 00:00:58.070
This can quickly get out of hand.

19
00:00:58.070 --> 00:01:01.070
Enter the concurrency model of the modern day

20
00:01:01.070 --> 00:01:04.050
12 factor application.

21
00:01:04.050 --> 00:01:06.020
We've addressed a need to break all

22
00:01:06.020 --> 00:01:09.070
of these services into unique applications

23
00:01:09.070 --> 00:01:13.000
and have them run as distinct processes.

24
00:01:13.000 --> 00:01:15.080
So you may be questioning what's left.

25
00:01:15.080 --> 00:01:18.090
This factor states simply that you would achieve

26
00:01:18.090 --> 00:01:22.000
the various forms of concurrency by spawning

27
00:01:22.000 --> 00:01:27.020
additional instances of you application processes.

28
00:01:27.020 --> 00:01:29.080
If you have a web application that is under load,

29
00:01:29.080 --> 00:01:31.070
add more instances of it.

30
00:01:31.070 --> 00:01:33.060
If you have increased messaging on

31
00:01:33.060 --> 00:01:36.000
an asynchronous message queue,

32
00:01:36.000 --> 00:01:38.040
spawn more listener processes.

33
00:01:38.040 --> 00:01:42.000
If you need to expose a service in another global region,

34
00:01:42.000 --> 00:01:45.020
add that process to your remote data center.

35
00:01:45.020 --> 00:01:47.020
There are a multitude of problems that you

36
00:01:47.020 --> 00:01:50.040
can solve with this model.

37
00:01:50.040 --> 00:01:53.020
One thing to take note of with this factor

38
00:01:53.020 --> 00:01:55.010
is the concept of scale.

39
00:01:55.010 --> 00:01:57.090
In a traditional environment we can perform

40
00:01:57.090 --> 00:02:00.070
vertical scaling which quickly hits the law

41
00:02:00.070 --> 00:02:03.060
of diminishing returns.

42
00:02:03.060 --> 00:02:05.050
If you are not familiar with the process

43
00:02:05.050 --> 00:02:08.050
of scale in application development,

44
00:02:08.050 --> 00:02:11.090
take a simple worker that reads from input

45
00:02:11.090 --> 00:02:14.020
and writes to the database.

46
00:02:14.020 --> 00:02:16.030
Put sufficient load on the system

47
00:02:16.030 --> 00:02:19.060
to see some taxation, and then

48
00:02:19.060 --> 00:02:24.090
create a new instance of that process on the same machine.

49
00:02:24.090 --> 00:02:27.010
Eventually, you will get to a point

50
00:02:27.010 --> 00:02:32.020
where adding processes has a negative performance effect.

51
00:02:32.020 --> 00:02:36.020
To solve this problem, you execute a horizontal scale

52
00:02:36.020 --> 00:02:39.050
to another virtual machine or physical machine.

53
00:02:39.050 --> 00:02:44.050
Now the applications aren't taking the hit themselves.

54
00:02:44.050 --> 00:02:49.040
Granted, your database server may take a hit.

55
00:02:49.040 --> 00:02:53.000
Concurrency in the 12 factor world isn't just

56
00:02:53.000 --> 00:02:55.060
about applications.

57
00:02:55.060 --> 00:02:58.080
Backing services are just as important.

58
00:02:58.080 --> 00:03:01.010
You may actually find that this is

59
00:03:01.010 --> 00:03:03.050
the hardest problem to solve.

60
00:03:03.050 --> 00:03:06.070
Always take into account the ability to scale

61
00:03:06.070 --> 00:03:10.060
both your application and their backing services,

62
00:03:10.060 --> 00:03:14.000
especially when dealing with global distribution.

