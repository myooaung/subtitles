WEBVTT
1
00:00:01.010 --> 00:00:03.070
- No single aspect of software engineering

2
00:00:03.070 --> 00:00:06.080
can cause as much disagreement between team members

3
00:00:06.080 --> 00:00:09.020
as the management of the code base,

4
00:00:09.020 --> 00:00:12.090
except maybe the standards of the code in that code base.

5
00:00:12.090 --> 00:00:15.080
That being said, the management of the code base

6
00:00:15.080 --> 00:00:19.040
is critical for the twelve-factor methodologies.

7
00:00:19.040 --> 00:00:21.080
The code base itself must be tracked

8
00:00:21.080 --> 00:00:24.020
in a version control system.

9
00:00:24.020 --> 00:00:26.030
Now, while I'm a fan of Git,

10
00:00:26.030 --> 00:00:29.060
you can use any form of version control.

11
00:00:29.060 --> 00:00:32.040
The code repository, or repo,

12
00:00:32.040 --> 00:00:37.050
contains a single application with a common root commit.

13
00:00:37.050 --> 00:00:40.060
Even if it is a distributed repo like Git,

14
00:00:40.060 --> 00:00:44.030
the strategy for managing the repo is up to the team.

15
00:00:44.030 --> 00:00:49.000
But a single application in a single repo is key.

16
00:00:49.000 --> 00:00:51.000
So, this may beg the question,

17
00:00:51.000 --> 00:00:54.000
how are multiple environments handled?

18
00:00:54.000 --> 00:00:57.080
The answer to that question is through deploys.

19
00:00:57.080 --> 00:01:01.060
An application, while it exists in a single code base,

20
00:01:01.060 --> 00:01:05.020
may have multiple deploys of that application.

21
00:01:05.020 --> 00:01:08.010
Now, let's envision, for a moment, an ecosystem

22
00:01:08.010 --> 00:01:11.080
that has a non-prod and a prod environment.

23
00:01:11.080 --> 00:01:14.010
You might have a branch for production,

24
00:01:14.010 --> 00:01:16.070
another branch for non-production code,

25
00:01:16.070 --> 00:01:20.010
and then feature branches for each developer.

26
00:01:20.010 --> 00:01:22.060
The developer is working on the feature branch

27
00:01:22.060 --> 00:01:25.000
and they're doing local deploys of the application

28
00:01:25.000 --> 00:01:27.050
as they write the code.

29
00:01:27.050 --> 00:01:29.090
Once they're done, they'll submit a poll request

30
00:01:29.090 --> 00:01:31.040
or a code review

31
00:01:31.040 --> 00:01:34.090
to move the code to the non-production branch.

32
00:01:34.090 --> 00:01:37.050
Once that is approved, the code will be merged

33
00:01:37.050 --> 00:01:40.060
and deployed to the non-prod environment.

34
00:01:40.060 --> 00:01:43.050
At some point in the lifecycle of the feature,

35
00:01:43.050 --> 00:01:45.060
it will be ready for prod.

36
00:01:45.060 --> 00:01:48.060
At that point, it is merged into the production branch

37
00:01:48.060 --> 00:01:50.040
and then deployed.

38
00:01:50.040 --> 00:01:54.050
So, we have multiple deploys, but a single code base.

39
00:01:54.050 --> 00:01:57.010
Keep in mind that every feature

40
00:01:57.010 --> 00:01:58.090
may not make it to primetime

41
00:01:58.090 --> 00:02:01.010
and that's perfectly okay.

42
00:02:01.010 --> 00:02:04.000
Part of managing the code in a single code base

43
00:02:04.000 --> 00:02:08.010
is making educated decisions on when to deploy

44
00:02:08.010 --> 00:02:09.080
and what to deploy.

45
00:02:09.080 --> 00:02:12.030
The trick to this is managing the code base

46
00:02:12.030 --> 00:02:15.020
in way that it doesn't get clogged up

47
00:02:15.020 --> 00:02:18.050
with features that are not going to be deployed for any reason.

48
00:02:18.050 --> 00:02:22.070
From my experience, you should avoid staging your deploys

49
00:02:22.070 --> 00:02:25.060
where you load several features at once

50
00:02:25.060 --> 00:02:28.000
onto a deployable branch.

51
00:02:28.000 --> 00:02:31.090
This will potentially cause a code management nightmare

52
00:02:31.090 --> 00:02:35.000
when the inevitable defect rears its ugly head,

53
00:02:35.000 --> 00:02:39.030
or, worse yet, when requirements change at the last minute.

54
00:02:39.030 --> 00:02:41.070
Not that that would ever happen.

55
00:02:41.070 --> 00:02:43.050
One of the key points here

56
00:02:43.050 --> 00:02:46.010
is that at any point in production,

57
00:02:46.010 --> 00:02:48.050
you can trace a similar deployment

58
00:02:48.050 --> 00:02:51.080
in non-prod or in a staging environment.

59
00:02:51.080 --> 00:02:56.070
Essentially, we have the entire history of our application.

60
00:02:56.070 --> 00:03:01.010
If a bug is found, we can trace where it exists

61
00:03:01.010 --> 00:03:03.010
and where it was introduced.

62
00:03:03.010 --> 00:03:05.030
This allows us to determine if Quality Gates

63
00:03:05.030 --> 00:03:07.050
need to be amended.

64
00:03:07.050 --> 00:03:11.000
Now, for teams already managing code in VCS,

65
00:03:11.000 --> 00:03:12.050
this is simply an evolution

66
00:03:12.050 --> 00:03:14.060
of what you are currently doing.

67
00:03:14.060 --> 00:03:17.010
And, indeed, you may already be doing it

68
00:03:17.010 --> 00:03:19.050
for traditional applications.

69
00:03:19.050 --> 00:03:22.080
For those not using VCS to manage your code,

70
00:03:22.080 --> 00:03:24.050
it's time to do so.

71
00:03:24.050 --> 00:03:26.090
The benefits of VCS go way beyond

72
00:03:26.090 --> 00:03:29.040
twelve-factor application development,

73
00:03:29.040 --> 00:03:31.090
but that's beyond the scope of this course.

74
00:03:31.090 --> 00:03:35.040
So, simply put, use VCS,

75
00:03:35.040 --> 00:03:38.040
track a single application per code base,

76
00:03:38.040 --> 00:03:41.000
and deploy often from that code base.

77
00:03:41.000 --> 00:03:42.000
That's the first factor.

