WEBVTT
1
00:00:01.010 --> 00:00:04.080
- In a multi-environment, multi-data center ecosystem,

2
00:00:04.080 --> 00:00:08.090
configuration is almost guaranteed to be different

3
00:00:08.090 --> 00:00:11.020
between those environments

4
00:00:11.020 --> 00:00:15.000
and our third factor focuses on that configuration.

5
00:00:15.000 --> 00:00:16.090
Let us spend a few moments and define

6
00:00:16.090 --> 00:00:22.020
what configuration, or config, really is.

7
00:00:22.020 --> 00:00:25.050
Config includes those items which are specific

8
00:00:25.050 --> 00:00:30.010
to an environment and not to an application.

9
00:00:30.010 --> 00:00:34.010
Database connections are a great example.

10
00:00:34.010 --> 00:00:36.010
The general rule of thumb

11
00:00:36.010 --> 00:00:40.000
about what is config and what is not

12
00:00:40.000 --> 00:00:43.020
is can you check it into version control

13
00:00:43.020 --> 00:00:45.050
and pass the security concerns

14
00:00:45.050 --> 00:00:47.070
within your organization.

15
00:00:47.070 --> 00:00:49.050
An even better test would be

16
00:00:49.050 --> 00:00:52.010
can you open source your application

17
00:00:52.010 --> 00:00:55.050
and make it publicly available on GitHub?

18
00:00:55.050 --> 00:00:58.030
If you can do this, without leaking information

19
00:00:58.030 --> 00:01:01.050
about your environment, or more importantly,

20
00:01:01.050 --> 00:01:04.020
credentials within your environment,

21
00:01:04.020 --> 00:01:06.080
then you've identified your config.

22
00:01:06.080 --> 00:01:10.010
Sp now that we've talked about what config is,

23
00:01:10.010 --> 00:01:13.050
it's time to discuss the 12 factor pattern around it.

24
00:01:13.050 --> 00:01:16.000
The pattern for config is

25
00:01:16.000 --> 00:01:19.080
essentially externalize it from your application.

26
00:01:19.080 --> 00:01:24.010
Each framework has a different way of dealing with this

27
00:01:24.010 --> 00:01:26.030
but no matter the management,

28
00:01:26.030 --> 00:01:30.040
the values are not embedded in the code itself.

29
00:01:30.040 --> 00:01:32.070
Spring for Java for instance,

30
00:01:32.070 --> 00:01:35.050
in its cloud native implementation,

31
00:01:35.050 --> 00:01:39.050
allows you to bootstrap an external config.

32
00:01:39.050 --> 00:01:44.020
A pure 12 factor strategy for providing configuration

33
00:01:44.020 --> 00:01:48.000
to your application, is through environment variables

34
00:01:48.000 --> 00:01:50.030
or any other similar mechanism.

35
00:01:50.030 --> 00:01:53.050
These are provided at run time from the container,

36
00:01:53.050 --> 00:01:56.080
operating system, or another component completely,

37
00:01:56.080 --> 00:01:59.010
all directly to your application.

38
00:01:59.010 --> 00:02:01.070
Your application will use that config

39
00:02:01.070 --> 00:02:03.040
during its life cycle.

40
00:02:03.040 --> 00:02:06.010
The application itself only utilizes

41
00:02:06.010 --> 00:02:09.040
a placeholder in the code for that config value.

42
00:02:09.040 --> 00:02:12.010
And it shouldn't really even be able to run

43
00:02:12.010 --> 00:02:14.080
without the appropriate config.

44
00:02:14.080 --> 00:02:18.040
Now let's talk about the legacy application scenario.

45
00:02:18.040 --> 00:02:21.050
In my opinion, this is one of the hardest parts

46
00:02:21.050 --> 00:02:25.020
of converting legacy applications to cloud native,

47
00:02:25.020 --> 00:02:27.040
because there's no indication that you've missed

48
00:02:27.040 --> 00:02:29.020
a config value.

49
00:02:29.020 --> 00:02:31.080
If we go back and look at the first factor,

50
00:02:31.080 --> 00:02:35.000
a missing dependency is usually catastrophic

51
00:02:35.000 --> 00:02:37.040
to the run-time of the application.

52
00:02:37.040 --> 00:02:39.080
Missing externalizing a config value

53
00:02:39.080 --> 00:02:42.050
has no such indication.

54
00:02:42.050 --> 00:02:44.090
It becomes almost a hunt through source code

55
00:02:44.090 --> 00:02:47.040
to find those values.

56
00:02:47.040 --> 00:02:49.080
Now hopefully you've built your application

57
00:02:49.080 --> 00:02:53.060
with a common strategy for managing such configuration

58
00:02:53.060 --> 00:02:56.000
to aid you in finding them.

59
00:02:56.000 --> 00:03:00.020
Ultimately, once you have your config externalized,

60
00:03:00.020 --> 00:03:02.050
you can provide it to the application,

61
00:03:02.050 --> 00:03:04.030
based on the environment

62
00:03:04.030 --> 00:03:07.030
or the data center that your application will run in

63
00:03:07.030 --> 00:03:09.020
and it will behave appropriately

64
00:03:09.020 --> 00:03:11.000
based on where it's deployed.

