WEBVTT
1
00:00:00.070 --> 00:00:04.010
- Log messages are critical for operations.

2
00:00:04.010 --> 00:00:06.090
Especially in helping troubleshoot issues

3
00:00:06.090 --> 00:00:10.010
that may arise in running applications.

4
00:00:10.010 --> 00:00:13.070
Traditionally, log messages are written to the file

5
00:00:13.070 --> 00:00:17.000
on the file system, and are viewed in that format.

6
00:00:17.000 --> 00:00:21.010
This works great for a traditional Legacy application

7
00:00:21.010 --> 00:00:24.050
as I'm sure you guessed, this isn't the case

8
00:00:24.050 --> 00:00:27.040
with a 12-factor application.

9
00:00:27.040 --> 00:00:30.010
Logs are treated as an event data stream.

10
00:00:30.010 --> 00:00:33.010
Each application writes its logs

11
00:00:33.010 --> 00:00:37.000
to standard out in the form of a stream.

12
00:00:37.000 --> 00:00:40.020
Each application shares the same stream.

13
00:00:40.020 --> 00:00:43.090
The logs can then be aggregated to another system

14
00:00:43.090 --> 00:00:48.070
like ELK for archival and reporting.

15
00:00:48.070 --> 00:00:51.070
The flow of logs is usually chronological,

16
00:00:51.070 --> 00:00:54.090
but because it's a stream from multiple sources,

17
00:00:54.090 --> 00:00:58.050
the time stamp and source tends to be very critical

18
00:00:58.050 --> 00:01:02.070
in log aggregation downstream.

19
00:01:02.070 --> 00:01:07.030
In my experiences, having a standard logging output

20
00:01:07.030 --> 00:01:09.090
across all of your applications,

21
00:01:09.090 --> 00:01:12.080
makes this aggregation easier.

22
00:01:12.080 --> 00:01:16.020
In addition, to the challenge of log aggregation,

23
00:01:16.020 --> 00:01:19.090
some languages produce multi line logs.

24
00:01:19.090 --> 00:01:22.060
This can be another problem when dealing

25
00:01:22.060 --> 00:01:27.030
with log streams and aggregation of these logs.

26
00:01:27.030 --> 00:01:31.030
Usually, logging technologies allow formatting the output

27
00:01:31.030 --> 00:01:34.000
so this can be avoided.

28
00:01:34.000 --> 00:01:37.090
For instance, we format all of our log output

29
00:01:37.090 --> 00:01:39.050
into JSON messages.

30
00:01:39.050 --> 00:01:43.010
So that a single log entry is a JSON message

31
00:01:43.010 --> 00:01:47.000
regardless of the number of lines in that message.

32
00:01:47.000 --> 00:01:51.070
Now, this makes reading it in the terminal much harder,

33
00:01:51.070 --> 00:01:55.090
but it makes reading it in ELK much easier,

34
00:01:55.090 --> 00:02:00.070
and ultimately, that is a benefit to my team.

35
00:02:00.070 --> 00:02:03.050
Moving logging in a Legacy system

36
00:02:03.050 --> 00:02:07.010
to this format can be relatively easy

37
00:02:07.010 --> 00:02:10.010
depending on how you currently do logging.

38
00:02:10.010 --> 00:02:12.040
If you use a logging framework,

39
00:02:12.040 --> 00:02:15.020
often you can simply change the output

40
00:02:15.020 --> 00:02:19.010
to use standard out and you're really done at that point.

41
00:02:19.010 --> 00:02:23.000
You may need to leverage log routing technologies,

42
00:02:23.000 --> 00:02:26.020
depending on your execution environment.

43
00:02:26.020 --> 00:02:28.020
You could also have some work to do

44
00:02:28.020 --> 00:02:30.080
to take that stream and pour it

45
00:02:30.080 --> 00:02:32.070
to your chosen log aggregator.

46
00:02:32.070 --> 00:02:37.050
I want to encourage you not to neglect this factor.

47
00:02:37.050 --> 00:02:40.090
You may not think logs are important now,

48
00:02:40.090 --> 00:02:45.070
but as your system grows, logs become more critical.

49
00:02:45.070 --> 00:02:47.050
Not only are they the best way to know

50
00:02:47.050 --> 00:02:50.060
what's going on in your applications,

51
00:02:50.060 --> 00:02:53.010
they also help you find issues,

52
00:02:53.010 --> 00:02:57.000
including potential security exploits.

