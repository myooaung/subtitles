1
00:00:01,040 --> 00:00:04,610
[Autogenerated] everything we've seen so far about Springwood actuator

2
00:00:04,610 --> 00:00:08,940
and Micro Meter is not specific to spring integration.

3
00:00:08,940 --> 00:00:13,040
You can use these features in any spring good application.

4
00:00:13,040 --> 00:00:15,590
Since this is spring integration course,

5
00:00:15,590 --> 00:00:17,940
it's interesting to see what metrics bring

6
00:00:17,940 --> 00:00:21,040
integration specifically makes available.

7
00:00:21,040 --> 00:00:23,220
I still have the application running,

8
00:00:23,220 --> 00:00:28,040
so let's take a look at the Springwood actuator metrics and point again.

9
00:00:28,040 --> 00:00:32,500
You will see that there are few metrics with names that start with spring,

10
00:00:32,500 --> 00:00:34,440
not integration.

11
00:00:34,440 --> 00:00:37,790
These are metrics that spring integration automatically AD DS

12
00:00:37,790 --> 00:00:41,140
for the components in our integration flow.

13
00:00:41,140 --> 00:00:42,700
First, there are spring,

14
00:00:42,700 --> 00:00:47,320
not integration sources spring dot integration dot handlers and spring,

15
00:00:47,320 --> 00:00:49,840
not integration channels.

16
00:00:49,840 --> 00:00:53,440
These three are actually not very interesting.

17
00:00:53,440 --> 00:00:56,510
The only thing that these three metrics report are

18
00:00:56,510 --> 00:01:00,540
the number off message sources, handlers and channels.

19
00:01:00,540 --> 00:01:04,870
For example, if we look at the spring dot integration or channels metric we can,

20
00:01:04,870 --> 00:01:07,900
see that there are four message channels.

21
00:01:07,900 --> 00:01:13,040
The metric that is much more interesting is spring, not integration, not send.

22
00:01:13,040 --> 00:01:17,160
This metric is a micro meter timer, so it contains count,

23
00:01:17,160 --> 00:01:21,050
Total Time and Max measurements about messages that have been

24
00:01:21,050 --> 00:01:24,840
sent to message channels and message handlers.

25
00:01:24,840 --> 00:01:28,240
It also provides a number of text that we can use to view the

26
00:01:28,240 --> 00:01:32,700
statistics off specific handles or channels and to distinguish between

27
00:01:32,700 --> 00:01:36,440
successful processing off messages and failures.

28
00:01:36,440 --> 00:01:37,420
For example,

29
00:01:37,420 --> 00:01:40,910
let's zoom in on the registration Request channel by adding

30
00:01:40,910 --> 00:01:45,090
a query parameter to select on the tag name with the Value

31
00:01:45,090 --> 00:01:47,640
Registration Request Channel.

32
00:01:47,640 --> 00:01:48,020
Here,

33
00:01:48,020 --> 00:01:51,880
we can see that 1000 messages have been sent to this channel on how

34
00:01:51,880 --> 00:01:55,340
long the processing of all these sent calls took.

35
00:01:55,340 --> 00:01:55,970
Next.

36
00:01:55,970 --> 00:01:58,740
Let's take a look at the Registration event channel,

37
00:01:58,740 --> 00:02:02,480
which is where the registration service center registration events.

38
00:02:02,480 --> 00:02:06,840
After successfully saving a registration in the database.

39
00:02:06,840 --> 00:02:11,240
As you see, there were less than 1000 registration events.

40
00:02:11,240 --> 00:02:14,740
That's because some registrations have failed.

41
00:02:14,740 --> 00:02:19,020
The low generator test submits 1000 registrations with

42
00:02:19,020 --> 00:02:21,840
random names and email addresses.

43
00:02:21,840 --> 00:02:26,350
Sometimes it will generate the same name and email address multiple times.

44
00:02:26,350 --> 00:02:29,060
And since the database requires email addresses,

45
00:02:29,060 --> 00:02:31,770
to be unique registration will fail.

46
00:02:31,770 --> 00:02:34,740
If the email address is a duplicate,

47
00:02:34,740 --> 00:02:38,740
take a look at the scent metrics for the service activator.

48
00:02:38,740 --> 00:02:41,980
You can see that 1000 messages have been sent to the service

49
00:02:41,980 --> 00:02:45,480
activator in total by adding the result,

50
00:02:45,480 --> 00:02:48,080
tech with the value, success or failure.

51
00:02:48,080 --> 00:02:51,220
You can see how many off those messages it has processed

52
00:02:51,220 --> 00:02:54,980
successfully on how many have failed because the services,

53
00:02:54,980 --> 00:02:56,940
through an exception,

54
00:02:56,940 --> 00:03:00,750
note that the metrics show us how many registrations have been

55
00:03:00,750 --> 00:03:03,720
processed successfully and how many have failed.

56
00:03:03,720 --> 00:03:07,640
But they don't tell us which ones have failed Metrics.

57
00:03:07,640 --> 00:03:10,700
Are meant to provide statistical data about what the

58
00:03:10,700 --> 00:03:14,470
application is doing and are not the right tool to get detail

59
00:03:14,470 --> 00:03:17,740
information about specific failures.

60
00:03:17,740 --> 00:03:22,540
For that kind of information, you should use logging or tracing.

61
00:03:22,540 --> 00:03:25,380
We'll get back to that in the last model of these course,

62
00:03:25,380 --> 00:03:30,240
where we're going to look at techniques for analyzying failures and debugging.

63
00:03:30,240 --> 00:03:32,250
Besides the spring, not integration,

64
00:03:32,250 --> 00:03:36,100
dot center metric spring integration also provides the spring,

65
00:03:36,100 --> 00:03:36,910
not integration.

66
00:03:36,910 --> 00:03:39,040
Don't receive metric.

67
00:03:39,040 --> 00:03:42,290
The scent metric provides statistics about the scent

68
00:03:42,290 --> 00:03:44,720
calls or message channels and handlers,

69
00:03:44,720 --> 00:03:48,950
while the receive metric provides statistics on receive calls

70
00:03:48,950 --> 00:03:52,640
on possible channels and message sources.

71
00:03:52,640 --> 00:03:56,920
We don't see this metric in our demo application because all the channels

72
00:03:56,920 --> 00:04:00,780
that we are using our published subscribe channels instead of possible

73
00:04:00,780 --> 00:04:06,340
channels on we also don't have any message sources in our integration flow

74
00:04:06,340 --> 00:04:14,000
just to remind you a message sources a component that can be pulled to produce messages from some source

