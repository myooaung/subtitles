WEBVTT
1
00:00:01.040 --> 00:00:02.750
[Autogenerated] Now you've learned about Springwood,

2
00:00:02.750 --> 00:00:07.640
actuator and metrics and how to record them with micro meter.

3
00:00:07.640 --> 00:00:09.740
There is the last part that's missing,

4
00:00:09.740 --> 00:00:13.840
and that's how we connect micro meter to a monitoring tool.

5
00:00:13.840 --> 00:00:16.440
That's what we're going to do next.

6
00:00:16.440 --> 00:00:19.840
Micro Twitter supports many different monitoring systems,

7
00:00:19.840 --> 00:00:24.940
as you can see in the documentation on the website at micro media dot io.

8
00:00:24.940 --> 00:00:28.110
For this demo, we're going to use Influx D B,

9
00:00:28.110 --> 00:00:30.600
which is a times here is database which is

10
00:00:30.600 --> 00:00:33.210
specifically designed for storing time.

11
00:00:33.210 --> 00:00:37.600
Stem data such as application metrics to visualized

12
00:00:37.600 --> 00:00:39.430
the metrics will use Grafana,

13
00:00:39.430 --> 00:00:43.400
which is a very powerful tool for creating dashboards with

14
00:00:43.400 --> 00:00:46.050
graphs from many different data sources,

15
00:00:46.050 --> 00:00:48.640
including Influx TV.

16
00:00:48.640 --> 00:00:53.340
Both influx TV and Grafana are easy to run in Docker.

17
00:00:53.340 --> 00:00:56.340
Let's first get them both running.

18
00:00:56.340 --> 00:00:59.740
Step one is to create a Docker network for running both

19
00:00:59.740 --> 00:01:02.840
container scene with the following command.

20
00:01:02.840 --> 00:01:07.640
Next is to create and start the container with influx to be.

21
00:01:07.640 --> 00:01:11.580
For that, we need to follow in command With this command,

22
00:01:11.580 --> 00:01:16.870
we create a container named Influx TV that exposed to support 80 86 on

23
00:01:16.870 --> 00:01:19.590
the Globomantics network that we've just created,

24
00:01:19.590 --> 00:01:25.340
and we're using the image influx db version 1.7 Alpine.

25
00:01:25.340 --> 00:01:29.040
We're also passing some environment parameters.

26
00:01:29.040 --> 00:01:32.960
These instruct influx db to automatically created database

27
00:01:32.960 --> 00:01:37.850
named Metrics to enable HTTP authentication and to create a

28
00:01:37.850 --> 00:01:40.700
user named Globomantics with password.

29
00:01:40.700 --> 00:01:47.140
Welcome to start up Grafana will execute another Docker run command.

30
00:01:47.140 --> 00:01:52.140
Both influx TV and Grafana take only a few seconds to start up.

31
00:01:52.140 --> 00:01:57.970
Next, we need to log into Grafana to connect it to influx DB in the browser,

32
00:01:57.970 --> 00:02:02.020
navigate to local host Port 3000 and log in with

33
00:02:02.020 --> 00:02:05.640
user name admin and password admin.

34
00:02:05.640 --> 00:02:10.540
When you log in for the first time, it asks you to change the password.

35
00:02:10.540 --> 00:02:14.470
Let's change it to welcome on the welcome page.

36
00:02:14.470 --> 00:02:18.150
It suggests that the next step is to add a data source.

37
00:02:18.150 --> 00:02:20.040
So let's do that.

38
00:02:20.040 --> 00:02:23.640
Select Influx TV and then enter the correct settings

39
00:02:23.640 --> 00:02:25.120
to make it look at our influx.

40
00:02:25.120 --> 00:02:27.240
TV RUNNING in Docker.

41
00:02:27.240 --> 00:02:28.210
HTTP.

42
00:02:28.210 --> 00:02:29.190
Where else should be?

43
00:02:29.190 --> 00:02:35.970
HTTP colon slash slash influx TV COLUMN 80 86 The host name Influx

44
00:02:35.970 --> 00:02:39.340
TV comes from the name off the docker container.

45
00:02:39.340 --> 00:02:43.380
Both Docker containers error connected to the Globomantics Docker network,

46
00:02:43.380 --> 00:02:47.540
and they will be able to see each other by their container names.

47
00:02:47.540 --> 00:02:49.480
Then we have to fill in the influx.

48
00:02:49.480 --> 00:02:54.990
Db Details with database, name, metrics, username, Globomantics and password.

49
00:02:54.990 --> 00:02:58.740
Welcome, Click Save and Test.

50
00:02:58.740 --> 00:03:02.140
It should confirm that the data sources working.

51
00:03:02.140 --> 00:03:04.350
We'll get back to Grafana in a moment,

52
00:03:04.350 --> 00:03:07.490
But first we'll configure the demo application so that it

53
00:03:07.490 --> 00:03:10.740
will publish its metrics to influx to be.

54
00:03:10.740 --> 00:03:13.740
Let's switch to the IDE again.

55
00:03:13.740 --> 00:03:16.260
You can find the code for this complete demo.

56
00:03:16.260 --> 00:03:16.960
An example.

57
00:03:16.960 --> 00:03:20.060
Project number four by default.

58
00:03:20.060 --> 00:03:23.360
The meter industry that is created by Springwood Auto

59
00:03:23.360 --> 00:03:27.760
Configuration is a simple meter registry that just stores the

60
00:03:27.760 --> 00:03:31.640
metrics in memory While the application is running,

61
00:03:31.640 --> 00:03:34.880
we now want to replace this by a meter registry that

62
00:03:34.880 --> 00:03:36.880
stores the metrics into influx.

63
00:03:36.880 --> 00:03:38.140
Db.

64
00:03:38.140 --> 00:03:44.630
To do that, we have to add a dependency to micro meter registry influx again.

65
00:03:44.630 --> 00:03:48.180
We don't need to change the source code because Springwood auto

66
00:03:48.180 --> 00:03:52.540
configuration will automatically pick it up and create an influx meter

67
00:03:52.540 --> 00:03:56.540
registry instead of a simple meter registry.

68
00:03:56.540 --> 00:04:00.290
We do have to set some properties in the Application properties file

69
00:04:00.290 --> 00:04:04.180
to tell it where it confined influx to be the u.

70
00:04:04.180 --> 00:04:04.390
R.

71
00:04:04.390 --> 00:04:10.640
I must be HTTP called on slash slash local host call on 80 86.

72
00:04:10.640 --> 00:04:13.990
Note that it's not influx TV Port 80 86.

73
00:04:13.990 --> 00:04:16.380
As we said in the Grafana configuration,

74
00:04:16.380 --> 00:04:19.300
because the demo application is running on the host

75
00:04:19.300 --> 00:04:23.610
and not in a docker container, Then we have to set the database,

76
00:04:23.610 --> 00:04:27.600
name, username and password, and we'll set the property auto,

77
00:04:27.600 --> 00:04:33.140
create a DB to falsy because we already have a database named Metrics and

78
00:04:33.140 --> 00:04:36.740
we don't want the application to create the database.

79
00:04:36.740 --> 00:04:39.950
Finally, we will set the property step to 10 s,

80
00:04:39.950 --> 00:04:45.350
which means we want to record metrics every 10 seconds by default.

81
00:04:45.350 --> 00:04:47.560
Metrics are recorded once per minute,

82
00:04:47.560 --> 00:04:54.000
but for this demo will set it to 10 seconds so that we don't have to wait too long for the metrics to show up.

