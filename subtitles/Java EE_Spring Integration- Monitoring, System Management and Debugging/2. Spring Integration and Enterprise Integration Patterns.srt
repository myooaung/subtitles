1
00:00:01,040 --> 00:00:04,700
[Autogenerated] as I just mentioned in the overview Spring Integration is an

2
00:00:04,700 --> 00:00:08,740
implementation off the enterprise integration patterns.

3
00:00:08,740 --> 00:00:12,040
Let's take a quick look at enterprise integration patterns and

4
00:00:12,040 --> 00:00:15,240
how they are implemented in spring integration.

5
00:00:15,240 --> 00:00:20,630
The enterprise integration patterns are a collection off 65 design patterns

6
00:00:20,630 --> 00:00:24,900
that were originally described in a book with the same name published in

7
00:00:24,900 --> 00:00:29,040
2000 and three by Gregor Hope and Bobby Wolf.

8
00:00:29,040 --> 00:00:34,040
These design patterns specifically deal with integration problems.

9
00:00:34,040 --> 00:00:38,200
The word integration refers to integrating components and

10
00:00:38,200 --> 00:00:42,340
external systems into a complete application.

11
00:00:42,340 --> 00:00:46,890
Let's review the main concepts, since it's about messaging.

12
00:00:46,890 --> 00:00:51,140
The first concept to understand is, of course, the message.

13
00:00:51,140 --> 00:00:55,490
A message is a unit of data that is transmitted from a center to

14
00:00:55,490 --> 00:00:59,440
one or more receivers fire a messaging system.

15
00:00:59,440 --> 00:01:04,740
A message consists off to parts, a payload and headers.

16
00:01:04,740 --> 00:01:08,640
The payload is the actual content off the message.

17
00:01:08,640 --> 00:01:12,760
What the meaning off the content is, and how it is structured and formatted,

18
00:01:12,760 --> 00:01:15,540
is specific to the application.

19
00:01:15,540 --> 00:01:18,740
When you design an application that uses messaging,

20
00:01:18,740 --> 00:01:24,440
then you decide yourself what kind of data to use for the payload of messages.

21
00:01:24,440 --> 00:01:28,340
The headers off a message contained metadata which is used by

22
00:01:28,340 --> 00:01:31,300
the messaging system for different functions.

23
00:01:31,300 --> 00:01:36,250
For example, to attach a unique identify error or time stamp to a message,

24
00:01:36,250 --> 00:01:40,140
or to keep track off where the message should be delivered,

25
00:01:40,140 --> 00:01:43,260
this model of a message will look familiar if you know

26
00:01:43,260 --> 00:01:47,040
anything about HTTP requests and responses.

27
00:01:47,040 --> 00:01:53,140
These are also messages that consists off headers and the body or payload.

28
00:01:53,140 --> 00:01:57,040
The next main concept is the message channel.

29
00:01:57,040 --> 00:02:00,950
A Message General is a component that knows how to transport

30
00:02:00,950 --> 00:02:05,040
messages from a center to one or more receivers.

31
00:02:05,040 --> 00:02:08,340
There are different types off message generals.

32
00:02:08,340 --> 00:02:11,580
One main distinction is point to point channels

33
00:02:11,580 --> 00:02:14,740
versus published subscribe channels.

34
00:02:14,740 --> 00:02:17,710
A point to Point Channel delivers messages from the

35
00:02:17,710 --> 00:02:20,430
center to exactly one receiver,

36
00:02:20,430 --> 00:02:25,640
whereas a published subscribed channel delivers messages to multiple receivers.

37
00:02:25,640 --> 00:02:31,140
Another distinction is subscribe double channels versus possible channels.

38
00:02:31,140 --> 00:02:34,520
This difference has to do with which party takes Thean

39
00:02:34,520 --> 00:02:38,040
initiative to deliver messages to the receiver.

40
00:02:38,040 --> 00:02:40,020
With the subscribe double channel,

41
00:02:40,020 --> 00:02:44,010
the messaging system will take the initiative and call the receiver.

42
00:02:44,010 --> 00:02:47,170
When a message is available and with a possible channel,

43
00:02:47,170 --> 00:02:50,560
it's up to the receiver to ask the messaging system.

44
00:02:50,560 --> 00:02:53,840
If there is a message available for processing.

45
00:02:53,840 --> 00:02:56,670
When you design a spring integration application,

46
00:02:56,670 --> 00:02:59,760
you will need to be aware off the different types off message

47
00:02:59,760 --> 00:03:03,640
channels so that you can choose these appropriate once.

48
00:03:03,640 --> 00:03:08,270
The next main concept is the message and point a message.

49
00:03:08,270 --> 00:03:11,730
And point is the part of the code that connects a center

50
00:03:11,730 --> 00:03:14,740
or receiver to the messaging system.

51
00:03:14,740 --> 00:03:18,440
This is a rather abstract and general idea.

52
00:03:18,440 --> 00:03:22,180
There are many different kinds of message and points described by

53
00:03:22,180 --> 00:03:25,640
more specific enterprise integration patterns.

54
00:03:25,640 --> 00:03:28,080
There are, for example, channel adapters,

55
00:03:28,080 --> 00:03:32,440
gateways, servers, activators and a few other ones.

56
00:03:32,440 --> 00:03:35,380
The last two concepts that I want to mention here.

57
00:03:35,380 --> 00:03:39,640
Our message, transformation and message routing.

58
00:03:39,640 --> 00:03:41,140
In some situations,

59
00:03:41,140 --> 00:03:46,640
dissenter sends messages in a different format than what the receiver expects.

60
00:03:46,640 --> 00:03:47,650
For example,

61
00:03:47,650 --> 00:03:53,740
a center might send JSON messages while the receiver expects them to be in XML.

62
00:03:53,740 --> 00:03:58,070
A message translator is an example of a message transformer that

63
00:03:58,070 --> 00:04:01,440
can be used for converting between formats.

64
00:04:01,440 --> 00:04:04,250
There are other types of message transformers.

65
00:04:04,250 --> 00:04:05,110
For example,

66
00:04:05,110 --> 00:04:08,870
a content and richer is a message transformer that AD DS

67
00:04:08,870 --> 00:04:12,240
data from some other source to messages.

68
00:04:12,240 --> 00:04:14,960
The Enterprise Integration Patterns book describes a

69
00:04:14,960 --> 00:04:17,640
few more message transformers.

70
00:04:17,640 --> 00:04:22,340
Another main function of the messaging system is message routing.

71
00:04:22,340 --> 00:04:27,320
A message router is a component that decides where to send messages next,

72
00:04:27,320 --> 00:04:31,040
so that they are routed to the appropriate receiver.

73
00:04:31,040 --> 00:04:34,010
Routing can be done based on different criteria,

74
00:04:34,010 --> 00:04:38,340
for example, based on the headers or content of messages.

75
00:04:38,340 --> 00:04:42,920
More specific types, off message routers are message filters,

76
00:04:42,920 --> 00:04:45,640
splitters and aggregators.

77
00:04:45,640 --> 00:04:48,850
That was a very quick recap off the core concepts off

78
00:04:48,850 --> 00:04:51,240
enterprise immigration patterns.

79
00:04:51,240 --> 00:04:55,520
Spring integration provides implementations off all these concepts

80
00:04:55,520 --> 00:04:58,420
and all the other enterprise integration patterns,

81
00:04:58,420 --> 00:05:01,770
which you can use in your spring based applications to

82
00:05:01,770 --> 00:05:04,650
connect components inside your application,

83
00:05:04,650 --> 00:05:07,120
as well as to connect your application to many

84
00:05:07,120 --> 00:05:10,240
different kinds off external systems.

85
00:05:10,240 --> 00:05:14,110
It provides, for example, classes to work with messages,

86
00:05:14,110 --> 00:05:15,720
different implementations,

87
00:05:15,720 --> 00:05:19,320
off message channels and a collection off channel and actors and

88
00:05:19,320 --> 00:05:23,060
gateways that you can use to connect to message brokers,

89
00:05:23,060 --> 00:05:28,980
web services, databases, FTP service and a lot more off course.

90
00:05:28,980 --> 00:05:31,860
It also provides implementations off different kinds,

91
00:05:31,860 --> 00:05:34,940
off message transformers and routers.

92
00:05:34,940 --> 00:05:38,240
If you want to know more about enterprise integration patterns,

93
00:05:38,240 --> 00:05:40,740
you can, of course, by the book.

94
00:05:40,740 --> 00:05:44,320
You can also find details about most of the patterns on the books

95
00:05:44,320 --> 00:05:49,940
website www dot enterprise integration patterns dot com.

96
00:05:49,940 --> 00:05:53,030
You can find more information on spring integration,

97
00:05:53,030 --> 00:05:55,890
including the reference documentation and API

98
00:05:55,890 --> 00:06:05,000
documentation on the spring website at spring. DLL io slash projects slash spring dash integration

