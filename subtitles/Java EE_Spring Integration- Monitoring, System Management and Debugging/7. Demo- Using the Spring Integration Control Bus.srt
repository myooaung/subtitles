1
00:00:01,040 --> 00:00:03,790
[Autogenerated] Let's do a quick them out to see how we can use

2
00:00:03,790 --> 00:00:07,040
the spring integration Control was component.

3
00:00:07,040 --> 00:00:08,300
Open up example.

4
00:00:08,300 --> 00:00:11,240
Project number six in your E.

5
00:00:11,240 --> 00:00:16,540
What we start with is the same code as what we ended within the previous demo.

6
00:00:16,540 --> 00:00:19,940
Now let's add a control bus component.

7
00:00:19,940 --> 00:00:21,740
It's really easy to do this.

8
00:00:21,740 --> 00:00:25,130
We just have to add an into control bus element to our

9
00:00:25,130 --> 00:00:28,640
spring integration XML configuration file.

10
00:00:28,640 --> 00:00:32,840
Let's give the component and IDE and we have to specify the input

11
00:00:32,840 --> 00:00:36,140
general from which it will receive messages.

12
00:00:36,140 --> 00:00:40,120
An output general is optional and is necessary only if you

13
00:00:40,120 --> 00:00:43,100
want to send the result of expressions evaluated by the

14
00:00:43,100 --> 00:00:49,740
control bus somewhere in this case, let's also at an output channel off course.

15
00:00:49,740 --> 00:00:54,540
We also have to define these two channels within channel elements.

16
00:00:54,540 --> 00:00:57,010
Now to be able to use his control bus.

17
00:00:57,010 --> 00:01:01,710
We have to have some way to access it to keep these demo simple.

18
00:01:01,710 --> 00:01:06,050
I'm going to add an HTTP inbound gateway that's connected to the

19
00:01:06,050 --> 00:01:09,440
input and output channels off the control bus.

20
00:01:09,440 --> 00:01:15,640
This gateway will listen for HTTP post requests on the path slash control.

21
00:01:15,640 --> 00:01:20,740
It will simply pass the body off requests as a string to the control bus.

22
00:01:20,740 --> 00:01:25,640
Let's start up the services and see how we can access the control bus.

23
00:01:25,640 --> 00:01:29,750
We can do that using any tool that consent HTTP requests

24
00:01:29,750 --> 00:01:33,210
such aske URL Using a command like this,

25
00:01:33,210 --> 00:01:36,080
we can send the spring expression language expression to

26
00:01:36,080 --> 00:01:39,140
to control bus which it will execute.

27
00:01:39,140 --> 00:01:40,180
Here we error calling.

28
00:01:40,180 --> 00:01:44,540
The method is running on the bean registration requests General adapter,

29
00:01:44,540 --> 00:01:50,240
which is the HTTP inbound channel adapter that receives registration requests.

30
00:01:50,240 --> 00:01:54,610
When we execute, this command will get a very short response with the text.

31
00:01:54,610 --> 00:01:58,740
True, which is the return value of the method goal.

32
00:01:58,740 --> 00:02:03,240
Similarly, we can stop the service by calling to stop method.

33
00:02:03,240 --> 00:02:06,670
Since this is a Voight method, we will just get a message.

34
00:02:06,670 --> 00:02:09,240
No reply received within time out.

35
00:02:09,240 --> 00:02:12,140
But it definitely has called the method.

36
00:02:12,140 --> 00:02:14,960
If we now use the first command again to check if the

37
00:02:14,960 --> 00:02:18,690
services running we got falsy off course.

38
00:02:18,690 --> 00:02:22,140
We can start it again by running the start method.

39
00:02:22,140 --> 00:02:24,260
Before we finish with this demo,

40
00:02:24,260 --> 00:02:27,120
I should warn you that the control was component is a

41
00:02:27,120 --> 00:02:30,430
powerful instrument that has Thea Bility to control many

42
00:02:30,430 --> 00:02:32,940
components in your application.

43
00:02:32,940 --> 00:02:37,730
Therefore, you should be very careful when you use it in this demo.

44
00:02:37,730 --> 00:02:43,240
We simply exposed it to the outside world using an HTTP inbound gateway.

45
00:02:43,240 --> 00:02:46,950
But this is definitely not safe and is not something you

46
00:02:46,950 --> 00:02:50,440
should do in any production ready application.

47
00:02:50,440 --> 00:02:57,000
If you want to use this in your own application, think very carefully about security.

