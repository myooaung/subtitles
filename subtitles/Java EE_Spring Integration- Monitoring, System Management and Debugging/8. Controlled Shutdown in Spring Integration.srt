1
00:00:01,040 --> 00:00:03,040
[Autogenerated] in a spring integration application,

2
00:00:03,040 --> 00:00:05,370
you typically have an integration flow,

3
00:00:05,370 --> 00:00:09,940
with many components working together to process messages.

4
00:00:09,940 --> 00:00:13,500
One subject that we haven't paid attention to yet is how to

5
00:00:13,500 --> 00:00:16,640
stop the application in a controlled way.

6
00:00:16,640 --> 00:00:21,220
Think about our demo application when the application is in use,

7
00:00:21,220 --> 00:00:24,740
and we shut it down by immediately stopping the process.

8
00:00:24,740 --> 00:00:29,540
There might be registrations which have only been processed halfway,

9
00:00:29,540 --> 00:00:30,540
for example.

10
00:00:30,540 --> 00:00:33,250
The ticket might just have been saved in the database,

11
00:00:33,250 --> 00:00:38,400
but we haven't yet sent the confirmation email and call to billing system to

12
00:00:38,400 --> 00:00:42,450
prevent having to deal with partially processed registrations.

13
00:00:42,450 --> 00:00:46,850
It would be better if we could shut down the application by having it stop

14
00:00:46,850 --> 00:00:50,960
accepting new registrations and finish the registrations that are

15
00:00:50,960 --> 00:00:55,240
currently in progress before stopping the process.

16
00:00:55,240 --> 00:00:59,740
Spring integration has a special method that we can call for this.

17
00:00:59,740 --> 00:01:04,170
If we use JPA console to look at the ambience in the running applications,

18
00:01:04,170 --> 00:01:07,480
then under the item or code spring framework,

19
00:01:07,480 --> 00:01:13,240
integration off monitor, we can find the integration and being exporter.

20
00:01:13,240 --> 00:01:16,560
This is the spring integration component that's responsible

21
00:01:16,560 --> 00:01:19,750
for making all the other spring integration components

22
00:01:19,750 --> 00:01:23,440
visible via jm X as and beans.

23
00:01:23,440 --> 00:01:28,000
The integration and being exporter provides a number off operations,

24
00:01:28,000 --> 00:01:33,080
and the one we are interested in here is to stop active

25
00:01:33,080 --> 00:01:36,240
in When you invoke this operation,

26
00:01:36,240 --> 00:01:40,540
it will stop the components in the application in a controlled way.

27
00:01:40,540 --> 00:01:43,740
This happens in a series off steps.

28
00:01:43,740 --> 00:01:44,400
First,

29
00:01:44,400 --> 00:01:47,940
it will call the before shutdown method off any beans in the

30
00:01:47,940 --> 00:01:50,760
application contacts that implement the interface.

31
00:01:50,760 --> 00:01:53,740
Orderly Shutdown capable.

32
00:01:53,740 --> 00:01:56,830
If you need to do anything special when shutting down the

33
00:01:56,830 --> 00:01:59,470
application in your own components,

34
00:01:59,470 --> 00:02:02,740
then you can have some implement this interface.

35
00:02:02,740 --> 00:02:03,390
Next.

36
00:02:03,390 --> 00:02:05,970
It stops all active message channels,

37
00:02:05,970 --> 00:02:10,140
message sources and inbound message producers.

38
00:02:10,140 --> 00:02:13,950
Active message generals Our message generals that have lifecycle

39
00:02:13,950 --> 00:02:18,860
methods such as start and Stop and examples are channels backed by a

40
00:02:18,860 --> 00:02:21,490
message broker that are accessed via J.

41
00:02:21,490 --> 00:02:24,040
M S or AM Q B.

42
00:02:24,040 --> 00:02:29,640
The point of this step is to stop messages coming in from external systems.

43
00:02:29,640 --> 00:02:31,280
Then, in the next step,

44
00:02:31,280 --> 00:02:34,900
the method wage for an amount of time which you can pass in

45
00:02:34,900 --> 00:02:38,560
as a parameter for finishing the processing of messages that

46
00:02:38,560 --> 00:02:40,740
are currently in the system.

47
00:02:40,740 --> 00:02:41,410
Finally,

48
00:02:41,410 --> 00:02:45,660
it calls these after shutdown method off beans in the application contacts

49
00:02:45,660 --> 00:02:49,740
that implement the interface orderly shutdown capable.

50
00:02:49,740 --> 00:02:53,110
After this, the process itself will still be running,

51
00:02:53,110 --> 00:03:01,000
but all components will have stopped, no new messages will be accepted and the process can safely be stopped.

