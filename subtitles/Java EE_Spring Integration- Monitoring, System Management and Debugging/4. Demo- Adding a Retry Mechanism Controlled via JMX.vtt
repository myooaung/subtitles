WEBVTT
1
00:00:01.040 --> 00:00:03.370
[Autogenerated] Let's use some off the spring integration J

2
00:00:03.370 --> 00:00:06.740
M X components in the Devil application.

3
00:00:06.740 --> 00:00:09.480
We'll use the components to handle problems that

4
00:00:09.480 --> 00:00:12.240
occur when the mail server fails.

5
00:00:12.240 --> 00:00:14.770
First, we'll make some changes to the chain.

6
00:00:14.770 --> 00:00:18.500
We now have to format and send confirmation emails so

7
00:00:18.500 --> 00:00:21.140
that we can better handle errors.

8
00:00:21.140 --> 00:00:24.960
Then we'll use an attribute polling channel adapter to monitor the

9
00:00:24.960 --> 00:00:28.540
number off errors or the Kerman sending email.

10
00:00:28.540 --> 00:00:32.560
We'll use the output of that to publish a J M X notification when

11
00:00:32.560 --> 00:00:36.000
the number off errors goes over a threshold.

12
00:00:36.000 --> 00:00:36.930
And finally,

13
00:00:36.930 --> 00:00:40.650
we'll use an operation invoking channel adapter to suspend the

14
00:00:40.650 --> 00:00:44.740
registration service when too many errors occur.

15
00:00:44.740 --> 00:00:45.950
Open up example.

16
00:00:45.950 --> 00:00:51.380
Project number five in your IDE and let's jump into the code to be able to

17
00:00:51.380 --> 00:00:55.490
use the spring integration JPA Mexichem pone INTs The first thing we need to

18
00:00:55.490 --> 00:01:00.930
do is add a dependency to the spring integration J MX module in the May even

19
00:01:00.930 --> 00:01:03.540
POM file off the service module.

20
00:01:03.540 --> 00:01:08.830
Now let's go to the Spring Integration XML configuration file well

21
00:01:08.830 --> 00:01:11.560
at the name space prefix for spring integration,

22
00:01:11.560 --> 00:01:15.440
J M X at the top of the file so that we can use these XML

23
00:01:15.440 --> 00:01:17.610
elements to refine the spring integration.

24
00:01:17.610 --> 00:01:23.570
J M X components we want to use before we get to using the J M X components.

25
00:01:23.570 --> 00:01:27.940
We don't have to change some things to the confirmation mail chain.

26
00:01:27.940 --> 00:01:28.520
Right now,

27
00:01:28.520 --> 00:01:32.660
there are three things in this chain header and richer to set the from,

28
00:01:32.660 --> 00:01:37.460
and to addresses and subject line of the male a transformer to transform the

29
00:01:37.460 --> 00:01:41.310
registration event object in the incoming message to the body.

30
00:01:41.310 --> 00:01:47.040
Text off the email and the male album channel adapter to send the email.

31
00:01:47.040 --> 00:01:50.640
I'm going to split this chain into two chainz.

32
00:01:50.640 --> 00:01:54.280
Let's leave the Header and Richer and the Transformer in the first

33
00:01:54.280 --> 00:01:58.270
chain named Confirmation Mail Chain and moved the outbound channel

34
00:01:58.270 --> 00:02:02.540
adaptor to a new chain named Outgoing Mail Chain.

35
00:02:02.540 --> 00:02:06.640
We need to define a new channel to connect the to change.

36
00:02:06.640 --> 00:02:10.340
I'll name the channel outgoing mail channel.

37
00:02:10.340 --> 00:02:13.700
This is going to be the output channel for the first chain

38
00:02:13.700 --> 00:02:16.840
and the input channel for the second chain.

39
00:02:16.840 --> 00:02:19.500
So now we have to confirmation Mail chain,

40
00:02:19.500 --> 00:02:22.610
which receives from the registration event channel,

41
00:02:22.610 --> 00:02:26.450
transforms incoming registration event messages into mail

42
00:02:26.450 --> 00:02:30.580
messages and sends to the outgoing mail channel and we

43
00:02:30.580 --> 00:02:32.450
have the outgoing mail chain,

44
00:02:32.450 --> 00:02:37.020
which receives from the outgoing mail channel and sends email using

45
00:02:37.020 --> 00:02:40.790
the mail outbound channel adapter by default.

46
00:02:40.790 --> 00:02:43.770
When one of the components often asynchronous message

47
00:02:43.770 --> 00:02:46.440
processing flow throws an exception.

48
00:02:46.440 --> 00:02:51.290
That exception and the original message will be wrapped in an error message,

49
00:02:51.290 --> 00:02:54.140
which is sent to the error channel.

50
00:02:54.140 --> 00:02:57.600
Since all errors go to the same error channel,

51
00:02:57.600 --> 00:03:02.740
it's then hard to handle errors that happened in specific components.

52
00:03:02.740 --> 00:03:05.270
You could put a listener on the error channel,

53
00:03:05.270 --> 00:03:08.750
but in that listener you would then have to be able to detect that.

54
00:03:08.750 --> 00:03:12.940
It's an error from the specific component that you want to handle.

55
00:03:12.940 --> 00:03:18.040
There's a better way to do this before processing a message we can set.

56
00:03:18.040 --> 00:03:22.930
The error Channel had are on the message to specify where error messages should

57
00:03:22.930 --> 00:03:27.340
be sent when the subsequent component throws an exception.

58
00:03:27.340 --> 00:03:33.240
So in the outgoing mill chain, let's add a header and Richard to set this header.

59
00:03:33.240 --> 00:03:39.240
There is a convenient in error Channel XML element that we can use for this.

60
00:03:39.240 --> 00:03:43.880
We want errors that happened in the mail outbound channel and after to go to

61
00:03:43.880 --> 00:03:48.950
the channel named outgoing mail error channel off course.

62
00:03:48.950 --> 00:03:51.840
We also have to define this channel.

63
00:03:51.840 --> 00:03:55.600
Let's make this a cute channel by adding an inter que

64
00:03:55.600 --> 00:03:58.440
element to the channel definition.

65
00:03:58.440 --> 00:04:02.340
We'll give it a queue with capacity 1000.

66
00:04:02.340 --> 00:04:05.250
Now when an error occurs while send the email,

67
00:04:05.250 --> 00:04:07.780
for example, because the mail server is down,

68
00:04:07.780 --> 00:04:11.640
an error message will be put on this cute channel.

69
00:04:11.640 --> 00:04:15.830
Let's add one more component before we get to the spring integration.

70
00:04:15.830 --> 00:04:18.100
J M X components.

71
00:04:18.100 --> 00:04:21.150
The set up that we have now makes it easy to add a

72
00:04:21.150 --> 00:04:24.340
retry mechanism for sending email.

73
00:04:24.340 --> 00:04:26.270
Let's add a component here,

74
00:04:26.270 --> 00:04:31.640
a transformer which receives from the outgoing meal error er channel.

75
00:04:31.640 --> 00:04:34.360
The error messages on this channel contain the

76
00:04:34.360 --> 00:04:38.240
exception and also the original message.

77
00:04:38.240 --> 00:04:39.430
With an expression,

78
00:04:39.430 --> 00:04:42.860
we can get out the original message and then put it back on

79
00:04:42.860 --> 00:04:46.450
the outgoing mail channel so that it will be picked up again

80
00:04:46.450 --> 00:04:49.040
by the outgoing mail chain.

81
00:04:49.040 --> 00:04:52.540
The outgoing mail error channel is Acute channel,

82
00:04:52.540 --> 00:04:55.800
which is a possible channel and not a published subscribed channel.

83
00:04:55.800 --> 00:04:59.420
Like the other channels that we have used so far to

84
00:04:59.420 --> 00:05:01.150
receive from a possible channel,

85
00:05:01.150 --> 00:05:05.760
it's necessary to configure a polar We'll add a polar to the

86
00:05:05.760 --> 00:05:09.670
transformer with a fixed delay off 1000 milliseconds,

87
00:05:09.670 --> 00:05:14.840
and we'll also set Max messages per poll to one.

88
00:05:14.840 --> 00:05:18.850
So this polar will check if there are messages on the Q once per

89
00:05:18.850 --> 00:05:23.140
second and receive at most one message at a time.

90
00:05:23.140 --> 00:05:28.340
That way, we can retry failure slowly, with one message per second.

91
00:05:28.340 --> 00:05:29.400
I am, however,

92
00:05:29.400 --> 00:05:34.170
also going to set auto startup to falsy for this component so that

93
00:05:34.170 --> 00:05:37.740
it won't be active when we start the application.

94
00:05:37.740 --> 00:05:42.350
Now, before we really get to using the spring integration J M X components,

95
00:05:42.350 --> 00:05:45.730
let's run the application and see how we can access

96
00:05:45.730 --> 00:05:48.340
and manage it with J console.

97
00:05:48.340 --> 00:05:51.590
Make sure that you have greenmail running in docker and then

98
00:05:51.590 --> 00:05:54.940
start the services off our demo application.

99
00:05:54.940 --> 00:05:58.150
The Javad Development Kit comes with a simple tool that

100
00:05:58.150 --> 00:06:01.740
supports JPA Max named Jay Console.

101
00:06:01.740 --> 00:06:05.110
You should be able to run this tool by entering the command JPA

102
00:06:05.110 --> 00:06:08.740
console in the command prompt or terminal window.

103
00:06:08.740 --> 00:06:14.040
It will ask you to connect with Java application running on the local machine.

104
00:06:14.040 --> 00:06:19.140
Let's speak our Globomantics service application and click Connect.

105
00:06:19.140 --> 00:06:21.830
There is a warning that the connection is insecure,

106
00:06:21.830 --> 00:06:24.640
but we'll accept that for this demo.

107
00:06:24.640 --> 00:06:28.960
We are interested in the J M X and beans that are application provides,

108
00:06:28.960 --> 00:06:30.690
So let's click Thea Ambien.

109
00:06:30.690 --> 00:06:32.830
Stab on the left.

110
00:06:32.830 --> 00:06:35.590
There's a tree view where you can navigate through the

111
00:06:35.590 --> 00:06:39.040
ambience that the application makes available.

112
00:06:39.040 --> 00:06:42.220
When you click spring that framework that integration,

113
00:06:42.220 --> 00:06:45.420
you'll see that there are M beings for the message channels,

114
00:06:45.420 --> 00:06:47.640
handlers and sources.

115
00:06:47.640 --> 00:06:52.140
Let's look at the channel named outgoing Mail Error Channel.

116
00:06:52.140 --> 00:06:55.480
This is the cute channel that we find to hold errors

117
00:06:55.480 --> 00:06:58.140
that happened when sending email.

118
00:06:58.140 --> 00:07:02.460
Take a look at the attributes off the envying At the moment.

119
00:07:02.460 --> 00:07:07.940
The Q size attribute is zero because there are no error messages on the Cube.

120
00:07:07.940 --> 00:07:09.260
To see some action,

121
00:07:09.260 --> 00:07:14.240
let's switch back to the IDE and then run the low generated S3.

122
00:07:14.240 --> 00:07:19.240
Since greenmail is running normally, everything is going fine.

123
00:07:19.240 --> 00:07:22.100
Now let's stop greenmail, so that's sending.

124
00:07:22.100 --> 00:07:27.240
Email will fail if you click on the refresh button in JPA console.

125
00:07:27.240 --> 00:07:29.010
After a few seconds,

126
00:07:29.010 --> 00:07:33.240
you will now see that are error messages appearing on the cube.

127
00:07:33.240 --> 00:07:34.890
When I restart green meal,

128
00:07:34.890 --> 00:07:38.250
the number off error messages on the Cube will stop growing,

129
00:07:38.250 --> 00:07:41.240
but the errors are still on the Cube.

130
00:07:41.240 --> 00:07:45.720
Let's now look at the message handlers in JPA console There we

131
00:07:45.720 --> 00:07:50.340
can find the Ambien named outgoing Mail Retry.

132
00:07:50.340 --> 00:07:53.480
This is the transformer that we added that puts back these

133
00:07:53.480 --> 00:07:56.840
email to send to the outgoing meal channel.

134
00:07:56.840 --> 00:07:59.790
If you look at the operations for this Ambien,

135
00:07:59.790 --> 00:08:04.240
you will see that it has a list off operations that you can't perform.

136
00:08:04.240 --> 00:08:08.400
Remember that we had said Auto startup to falsy on this components,

137
00:08:08.400 --> 00:08:12.740
so it's not automatically started when the application starts up.

138
00:08:12.740 --> 00:08:16.840
You can check that by clicking the is running button.

139
00:08:16.840 --> 00:08:19.640
The result is indeed falsy.

140
00:08:19.640 --> 00:08:23.840
We can start it by performing the start operation.

141
00:08:23.840 --> 00:08:25.670
This will activate a component,

142
00:08:25.670 --> 00:08:31.040
and it will start pulling the mail error channel and retry sending the email.

143
00:08:31.040 --> 00:08:35.110
If we now go back to the attributes off the outgoing mail error channel,

144
00:08:35.110 --> 00:08:39.290
you will see that the messages are being taken from the Q one by one.

145
00:08:39.290 --> 00:08:47.000
And since greenmail is now running again, the email is now being sent successfully after to retry

