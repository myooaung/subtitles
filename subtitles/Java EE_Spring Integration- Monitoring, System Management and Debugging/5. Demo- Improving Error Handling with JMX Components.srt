1
00:00:01,040 --> 00:00:03,690
[Autogenerated] Let's now continue with this demo by using

2
00:00:03,690 --> 00:00:06,940
the spring integration JPA MX components.

3
00:00:06,940 --> 00:00:09,010
Our first goal is to get a J.

4
00:00:09,010 --> 00:00:12,030
Maxx notification when the number off errors while

5
00:00:12,030 --> 00:00:15,640
sending email goes over a threshold.

6
00:00:15,640 --> 00:00:18,350
You can imagine that in a real world scenario,

7
00:00:18,350 --> 00:00:20,850
you would want to signal a system administrator.

8
00:00:20,850 --> 00:00:23,240
Went too many Errors occur.

9
00:00:23,240 --> 00:00:28,400
We'll use to spring integration J M X components for this first,

10
00:00:28,400 --> 00:00:30,780
an attribute polling channel adapter,

11
00:00:30,780 --> 00:00:34,210
which will pull the Q size attribute off the outgoing mail

12
00:00:34,210 --> 00:00:38,780
error channel to publish the J M X notification will use a

13
00:00:38,780 --> 00:00:42,040
notification publishing channel adapter.

14
00:00:42,040 --> 00:00:46,040
Let's at the attribute polling channel adapter Well,

15
00:00:46,040 --> 00:00:48,460
given an IDE, and we have to set the J.

16
00:00:48,460 --> 00:00:52,600
Maxx object name off the um being that we wanted to inspect and,

17
00:00:52,600 --> 00:00:56,740
of course, the name off the specific attributes off the Ambien.

18
00:00:56,740 --> 00:01:00,750
We wanted to look at the Q size attributes off the M being that's

19
00:01:00,750 --> 00:01:04,540
associated with the outgoing mail error channel.

20
00:01:04,540 --> 00:01:07,710
We can find the exact object name for that Ambien by

21
00:01:07,710 --> 00:01:10,510
looking it up using JPA console.

22
00:01:10,510 --> 00:01:13,750
The attribute Polling General adaptor will read the value

23
00:01:13,750 --> 00:01:16,910
of the attribute package it into a spring integration

24
00:01:16,910 --> 00:01:19,110
message and send it on a message.

25
00:01:19,110 --> 00:01:20,340
General,

26
00:01:20,340 --> 00:01:25,360
let's define a channel named outgoing mail error que sais channel

27
00:01:25,360 --> 00:01:28,440
and make it a published subscribed channel.

28
00:01:28,440 --> 00:01:32,640
Finally, we'll need to define a polar for the channel adapter.

29
00:01:32,640 --> 00:01:36,080
Let's add a polar with a fixed rate that will fire

30
00:01:36,080 --> 00:01:39,240
once every 10,000 milliseconds.

31
00:01:39,240 --> 00:01:41,010
So every 10 seconds,

32
00:01:41,010 --> 00:01:46,240
the channel adaptor will read the Q size off the outgoing meal error channel and

33
00:01:46,240 --> 00:01:50,740
send a message to the outgoing meal error que sais channel.

34
00:01:50,740 --> 00:01:54,610
Next, we'll add the Notification Publishing Channel adapter,

35
00:01:54,610 --> 00:01:58,210
which will publish JPA Max Notification when there are

36
00:01:58,210 --> 00:02:01,040
more than 10 errors on the Cube.

37
00:02:01,040 --> 00:02:04,380
We'll put this channel adaptor in a chain along with a few

38
00:02:04,380 --> 00:02:07,940
other components to pre process messages.

39
00:02:07,940 --> 00:02:13,440
Let's add a chain that listens to the outgoing mail error accuse access channel.

40
00:02:13,440 --> 00:02:16,780
The messages that appear on the input Q of this chain

41
00:02:16,780 --> 00:02:18,870
have a simple number as the payload,

42
00:02:18,870 --> 00:02:24,200
which is the number off messages on the Q as read from the JM excuse size.

43
00:02:24,200 --> 00:02:28,340
Attribute by the Attributes Falling Channel adapter.

44
00:02:28,340 --> 00:02:31,190
Since we're only interested in these messages when the

45
00:02:31,190 --> 00:02:33,550
number off arrows gets too high,

46
00:02:33,550 --> 00:02:37,950
the first component that will add to the chain is a filter that only let's

47
00:02:37,950 --> 00:02:42,140
messages through when the number is greater than 10.

48
00:02:42,140 --> 00:02:42,820
Next.

49
00:02:42,820 --> 00:02:45,100
For the messages that get through the filter,

50
00:02:45,100 --> 00:02:48,740
we want to prepare a J M X notification.

51
00:02:48,740 --> 00:02:51,750
Let's add a transformer with an expression to

52
00:02:51,750 --> 00:02:55,040
compose a notification message text.

53
00:02:55,040 --> 00:02:55,950
And finally,

54
00:02:55,950 --> 00:03:01,020
we will at the Notification Publishing Channel adapter on this general adapter,

55
00:03:01,020 --> 00:03:06,340
we have to set an object name and we'll set the default notification type.

56
00:03:06,340 --> 00:03:09,740
We can choose any object name we like here.

57
00:03:09,740 --> 00:03:13,580
Let's set it to something that makes sense so we can find it in JPA

58
00:03:13,580 --> 00:03:17,580
console before we run the demo replication again.

59
00:03:17,580 --> 00:03:21,740
Let's add one more spring integration J M X component.

60
00:03:21,740 --> 00:03:25,470
When the mail server is down and too many errors occur,

61
00:03:25,470 --> 00:03:29,550
it makes sense to pose the whole registration service so that

62
00:03:29,550 --> 00:03:32,090
it won't accept any more registrations,

63
00:03:32,090 --> 00:03:35,440
which would all fail because there is a problem.

64
00:03:35,440 --> 00:03:36,460
To achieve this,

65
00:03:36,460 --> 00:03:40,630
we'll add an operation invoking channel adapter which will stop the

66
00:03:40,630 --> 00:03:43,380
very first component in our integration flow.

67
00:03:43,380 --> 00:03:47,240
Which is these HTTP inbound channel adapter.

68
00:03:47,240 --> 00:03:51,240
The operation invoking channel adaptor will invoke to stop

69
00:03:51,240 --> 00:03:54,430
operation on the HTTP inbound channel adapter.

70
00:03:54,430 --> 00:03:59,940
When there are more than 50 error messages on the outgoing mail error channel,

71
00:03:59,940 --> 00:04:02,440
we'll add another chain that listens on the

72
00:04:02,440 --> 00:04:07,690
outgoing meal error que sais channel, just like in the previous chain,

73
00:04:07,690 --> 00:04:11,040
will add a filter as the first component.

74
00:04:11,040 --> 00:04:16,440
This one will only let messages through when the number is greater than 50.

75
00:04:16,440 --> 00:04:21,040
After the filter will put the operation invoking channel adapter,

76
00:04:21,040 --> 00:04:24,610
we'll have to specify the Ambien object name and the name

77
00:04:24,610 --> 00:04:27,340
off the operation that we want to invoke.

78
00:04:27,340 --> 00:04:32,840
We can again find the name off the Ambien and the operation with Jay console.

79
00:04:32,840 --> 00:04:36,730
We've configured T HTTP inbound channel adaptor in the beginning off

80
00:04:36,730 --> 00:04:42,450
the integration flow so that our response with HTTP status code 202

81
00:04:42,450 --> 00:04:45,440
accepted when it's working normally.

82
00:04:45,440 --> 00:04:50,810
When this channel adaptor is stopped by invoking the stop operation via J M X,

83
00:04:50,810 --> 00:04:53,710
it will still listen for HTTP requests,

84
00:04:53,710 --> 00:04:59,740
But it will respond with status code 503 services unavailable.

85
00:04:59,740 --> 00:05:03,640
Let's run the demo again and see it all in action.

86
00:05:03,640 --> 00:05:04,250
First,

87
00:05:04,250 --> 00:05:07,230
make sure that Green Mill is running and then start the

88
00:05:07,230 --> 00:05:09,940
services off the demo application.

89
00:05:09,940 --> 00:05:13,420
Let's also start JPA console again and connect to the

90
00:05:13,420 --> 00:05:17,040
Globomantics sure is application well again.

91
00:05:17,040 --> 00:05:20,110
Ignore the warning that the J M X connection is insecure.

92
00:05:20,110 --> 00:05:21,840
For this demo.

93
00:05:21,840 --> 00:05:24,440
Go to the Ambien step.

94
00:05:24,440 --> 00:05:26,490
You will see that in the tree on the left,

95
00:05:26,490 --> 00:05:29,540
there is now an item named Conduct Globomantics.

96
00:05:29,540 --> 00:05:34,130
Start registration, under which you can find outgoing mail errors,

97
00:05:34,130 --> 00:05:37,040
which has a notifications item.

98
00:05:37,040 --> 00:05:40,670
When you click on it, you will get a list of notifications on the right,

99
00:05:40,670 --> 00:05:43,040
which is currently empty.

100
00:05:43,040 --> 00:05:46,480
Click on the subscribe button at the bottom to make jae console.

101
00:05:46,480 --> 00:05:49,840
Receive notifications from this Ambien.

102
00:05:49,840 --> 00:05:52,740
Next, let's see it working.

103
00:05:52,740 --> 00:05:57,740
Start the low generated test again when it's running and the services

104
00:05:57,740 --> 00:06:02,840
processing registrations Stop the green Mill Docker container again.

105
00:06:02,840 --> 00:06:06,530
After a while, when there are more than 10 email sending errors,

106
00:06:06,530 --> 00:06:10,890
you will see notifications appearing JPA console and after a

107
00:06:10,890 --> 00:06:13,860
while when more than 50 errors have occurred,

108
00:06:13,860 --> 00:06:18,600
the low generated EST will fail because the operation invoking Channel

109
00:06:18,600 --> 00:06:22,700
adaptor has stopped the HDP inbound channel adapter,

110
00:06:22,700 --> 00:06:27,250
and the service has started to return status code 503 instead

111
00:06:27,250 --> 00:06:31,040
of Status Co 202 that the test expects.

112
00:06:31,040 --> 00:06:35,040
Fortunately, we now have tools to fix the errors.

113
00:06:35,040 --> 00:06:38,240
Let's first start green meal again.

114
00:06:38,240 --> 00:06:40,720
Then let's go to the outgoing mill.

115
00:06:40,720 --> 00:06:46,440
Retry component using JPA console and trigger, it starts operation.

116
00:06:46,440 --> 00:06:49,260
Now we can see that the number off errors on the

117
00:06:49,260 --> 00:06:51,850
outgoing mail error channel is dropping.

118
00:06:51,850 --> 00:06:54,840
As these emails are being processed,

119
00:06:54,840 --> 00:06:59,810
we can also resume the HTTP inbound channel adapter by looking it up

120
00:06:59,810 --> 00:07:04,240
in JAE console and triggering its start operation.

121
00:07:04,240 --> 00:07:07,170
Now everything is back to normal and the service can

122
00:07:07,170 --> 00:07:10,240
accept registration requests again.

123
00:07:10,240 --> 00:07:13,790
If you want to learn more and practice with this than feel free

124
00:07:13,790 --> 00:07:17,240
to experiment with the code of this example,

125
00:07:17,240 --> 00:07:21,350
one thing you could try is adding another notification publishing

126
00:07:21,350 --> 00:07:26,100
channel adapter that will put out a J M X notification when the HDP

127
00:07:26,100 --> 00:07:28,740
inbound channel adaptor is stopped.

128
00:07:28,740 --> 00:07:35,000
That seems like an important event that you might want to warn a system administrator about

