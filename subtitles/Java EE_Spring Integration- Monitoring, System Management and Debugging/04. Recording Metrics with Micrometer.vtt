WEBVTT
1
00:00:01.040 --> 00:00:02.950
[Autogenerated] you've learned how you can monitor your

2
00:00:02.950 --> 00:00:06.240
application using Springwood actuator.

3
00:00:06.240 --> 00:00:10.140
Now we're going to focus on gathering metrics.

4
00:00:10.140 --> 00:00:13.540
What exactly do we mean by metrics?

5
00:00:13.540 --> 00:00:17.670
Metrics is information about how your application is performing

6
00:00:17.670 --> 00:00:21.040
that you typically want to track over time.

7
00:00:21.040 --> 00:00:24.950
Examples of metrics might be how much memory and how much

8
00:00:24.950 --> 00:00:27.240
ship you your application is using.

9
00:00:27.240 --> 00:00:31.210
How many requests per second or per minute it is processing

10
00:00:31.210 --> 00:00:34.840
and how long it takes to process requests.

11
00:00:34.840 --> 00:00:38.330
There are many software packages and software as a service

12
00:00:38.330 --> 00:00:42.940
solutions available to monitor and visualized metrics.

13
00:00:42.940 --> 00:00:47.130
When you want to use one of these, what you would typically do is add some.

14
00:00:47.130 --> 00:00:51.230
Go to your application to publish metrics to your monitoring software,

15
00:00:51.230 --> 00:00:55.940
which can then visualize it for you the point where you have to AD DS go

16
00:00:55.940 --> 00:00:59.100
to the application to collect and publish metrics.

17
00:00:59.100 --> 00:01:03.040
That's where library named micro meter comes in.

18
00:01:03.040 --> 00:01:08.340
Micro meter is a vendor neutral API for collecting metrics.

19
00:01:08.340 --> 00:01:11.540
Vendor neutral means that you write your goat for

20
00:01:11.540 --> 00:01:14.540
collecting metrics using the micro media API,

21
00:01:14.540 --> 00:01:17.480
which is independent off whatever monitoring and

22
00:01:17.480 --> 00:01:21.170
visualization software you would use so that when you later

23
00:01:21.170 --> 00:01:23.720
decide to use other monitoring software.

24
00:01:23.720 --> 00:01:28.880
You won't have to change your metrics collection code the micro media website,

25
00:01:28.880 --> 00:01:33.880
which you can find that micro media load Io calls it think as a left for J.

26
00:01:33.880 --> 00:01:35.100
But for metrics,

27
00:01:35.100 --> 00:01:39.870
which very succinctly makes it clear what it is just like as a

28
00:01:39.870 --> 00:01:43.780
left for J enables you to write your code without directly tying

29
00:01:43.780 --> 00:01:46.620
it to specific logging implementation.

30
00:01:46.620 --> 00:01:49.820
Micro media enables you to write your code without locking

31
00:01:49.820 --> 00:01:52.940
you into a specific monitoring tool.

32
00:01:52.940 --> 00:01:56.530
Micro meter is being developed and maintained by pivotal,

33
00:01:56.530 --> 00:02:00.230
the same company that's taking care of the spring framework.

34
00:02:00.230 --> 00:02:04.040
So spring has very good support for micro meteor.

35
00:02:04.040 --> 00:02:09.350
One off the Springwood actuator and points is the metrics endpoint the

36
00:02:09.350 --> 00:02:13.130
metrics that you see there are actually micro media metrics,

37
00:02:13.130 --> 00:02:17.840
which are being recorded by different components in the application.

38
00:02:17.840 --> 00:02:22.940
Let's take a look at the metrics and point to see how the metrics are organized.

39
00:02:22.940 --> 00:02:25.350
With the demo application still running,

40
00:02:25.350 --> 00:02:32.640
navigate to HTTP local host Port 80 81 slash actuator slash metrics.

41
00:02:32.640 --> 00:02:35.640
What you get is a list of names off metrics that

42
00:02:35.640 --> 00:02:38.240
the application makes available.

43
00:02:38.240 --> 00:02:43.740
Let's take a look at the metric named HTTP dot server dot requests

44
00:02:43.740 --> 00:02:47.660
to see the details of a particular metric we can just append the

45
00:02:47.660 --> 00:02:50.660
name to the URL off the actuator metrics.

46
00:02:50.660 --> 00:02:52.710
Endpoint first.

47
00:02:52.710 --> 00:02:55.290
What you see when you look at this metric are three

48
00:02:55.290 --> 00:02:59.300
different measurements labeled Count, Total Time and Max,

49
00:02:59.300 --> 00:03:02.310
which are the number off requests processed.

50
00:03:02.310 --> 00:03:06.310
The total amount of time it took to process these requests and

51
00:03:06.310 --> 00:03:09.640
the maximum time for processing a request.

52
00:03:09.640 --> 00:03:12.650
Each metric has its own measurement values.

53
00:03:12.650 --> 00:03:16.350
And these are the measurements that the HTTP DLL server

54
00:03:16.350 --> 00:03:20.140
adult requests metric happens to have next.

55
00:03:20.140 --> 00:03:21.110
What's interesting?

56
00:03:21.110 --> 00:03:26.140
Here are the tax that you can see under available tax.

57
00:03:26.140 --> 00:03:30.740
These stacks allow you to select a subset off the measurements.

58
00:03:30.740 --> 00:03:31.560
To do that,

59
00:03:31.560 --> 00:03:35.140
I can add a query parameter to the URL off the form

60
00:03:35.140 --> 00:03:38.740
Jack equals name colon value.

61
00:03:38.740 --> 00:03:41.660
Suppose that I would only want to see the measurements

62
00:03:41.660 --> 00:03:45.040
for the requests to the register path.

63
00:03:45.040 --> 00:03:50.040
I can do that by selecting on the you are attacked by adding question Mark

64
00:03:50.040 --> 00:03:55.240
tag equals URL UI Collins less registered to the URL.

65
00:03:55.240 --> 00:04:00.540
You can add multiple tech weary parameters separated by M persons,

66
00:04:00.540 --> 00:04:01.550
for example,

67
00:04:01.550 --> 00:04:07.490
I can add em percent tax status column 202 If I want to see only

68
00:04:07.490 --> 00:04:11.450
the measurements for all requests to the register path that

69
00:04:11.450 --> 00:04:14.540
got to to are two response status code,

70
00:04:14.540 --> 00:04:18.540
this is what's called dimensional metrics.

71
00:04:18.540 --> 00:04:25.000
Using the tax, you can select subsets off the measurements in different dimensions.

