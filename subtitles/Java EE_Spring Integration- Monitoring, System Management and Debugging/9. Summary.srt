1
00:00:01,040 --> 00:00:03,690
[Autogenerated] we're at the end of this model about managing and

2
00:00:03,690 --> 00:00:06,840
controlling spring integration applications.

3
00:00:06,840 --> 00:00:10,340
Let's summarize what you've learned in this module.

4
00:00:10,340 --> 00:00:12,670
We started with a quick overview of J.

5
00:00:12,670 --> 00:00:17,270
M X, the Jaffa Management extensions to use J M X.

6
00:00:17,270 --> 00:00:20,290
You instrument your code by writing and beans,

7
00:00:20,290 --> 00:00:24,600
which you register in an Ambien server and beans have

8
00:00:24,600 --> 00:00:29,580
attributes and operations and can publish notifications with

9
00:00:29,580 --> 00:00:31,950
the management tools such as JPA console.

10
00:00:31,950 --> 00:00:34,480
You can read and write these attributes,

11
00:00:34,480 --> 00:00:38,640
invoke operations and receive notifications.

12
00:00:38,640 --> 00:00:43,140
Next we looked at how spring integration supports J M X.

13
00:00:43,140 --> 00:00:46,000
There are a number of components that bridge the gap

14
00:00:46,000 --> 00:00:49,240
between JM X and spring integration.

15
00:00:49,240 --> 00:00:51,930
We did a demo in which we improved the error

16
00:00:51,930 --> 00:00:55,240
detection and handling for sending email.

17
00:00:55,240 --> 00:00:58,400
We added a retry mechanism that can be activated.

18
00:00:58,400 --> 00:01:00,340
Fire J M X.

19
00:01:00,340 --> 00:01:03,680
We used an attribute polling channel adapter to monitor

20
00:01:03,680 --> 00:01:05,450
the number of messages on the error,

21
00:01:05,450 --> 00:01:09,970
a Q and A notification publishing channel adapter to publish a J M X

22
00:01:09,970 --> 00:01:14,840
notification when there are more than 10 error messages on the Cube.

23
00:01:14,840 --> 00:01:19,360
We also added an operation invoking channel adapter to stop the service

24
00:01:19,360 --> 00:01:23,140
when there are more than 50 error messages on the Cube.

25
00:01:23,140 --> 00:01:27,640
Next we looked at the control bus enterprise integration pattern.

26
00:01:27,640 --> 00:01:30,740
The main idea off the control bus pattern is to use the

27
00:01:30,740 --> 00:01:34,320
messaging infrastructure that's used for application messages

28
00:01:34,320 --> 00:01:37,440
for system management messages as well.

29
00:01:37,440 --> 00:01:40,500
Spring integrations implementation off this pattern is to

30
00:01:40,500 --> 00:01:44,630
control bus component that interprets messages as spring

31
00:01:44,630 --> 00:01:46,840
expression language expressions,

32
00:01:46,840 --> 00:01:49,470
which you can use to call lifecycle message of

33
00:01:49,470 --> 00:01:52,640
components and other management methods.

34
00:01:52,640 --> 00:01:53,460
Finally,

35
00:01:53,460 --> 00:01:57,090
we looked at how we can shut down components in a controlled way

36
00:01:57,090 --> 00:02:00,850
so that processing off messages is finished properly before the

37
00:02:00,850 --> 00:02:03,540
application is really shut down.

38
00:02:03,540 --> 00:02:05,740
There's more to learn.

39
00:02:05,740 --> 00:02:06,920
In the next module,

40
00:02:06,920 --> 00:02:14,000
you're going to learn about techniques for analyzying and debugging spring integration applications.

