WEBVTT
1
00:00:01.040 --> 00:00:03.670
[Autogenerated] Now I will explain the demo application that

2
00:00:03.670 --> 00:00:06.740
will be working on throughout this course.

3
00:00:06.740 --> 00:00:10.110
First, I'll show you what it's about and what it looks like,

4
00:00:10.110 --> 00:00:13.240
and then I'll explain how it's put together.

5
00:00:13.240 --> 00:00:17.330
The demo consists of an application for registering attendees

6
00:00:17.330 --> 00:00:20.270
for the conference off a fictional company,

7
00:00:20.270 --> 00:00:22.340
Globomantics.

8
00:00:22.340 --> 00:00:26.070
If you have done more Java and spring courses on Pluralsight,

9
00:00:26.070 --> 00:00:27.450
you might recognize it,

10
00:00:27.450 --> 00:00:32.340
since it's one of the scenarios that multiple authors use for their courses.

11
00:00:32.340 --> 00:00:36.040
When you run the application and navigate to it using your browser,

12
00:00:36.040 --> 00:00:39.840
you'll get a page where you can choose a take a type and enter your

13
00:00:39.840 --> 00:00:44.010
contact information when you click the register button.

14
00:00:44.010 --> 00:00:49.440
The application process is your registration and shows you a thank you page.

15
00:00:49.440 --> 00:00:51.720
That's all there is to the user interface.

16
00:00:51.720 --> 00:00:53.450
But more important is, of course,

17
00:00:53.450 --> 00:00:57.240
how it works and how it uses spring integration.

18
00:00:57.240 --> 00:01:00.920
Let's take a look under the hood when you take a look at

19
00:01:00.920 --> 00:01:03.620
the first example project in your IDE.

20
00:01:03.620 --> 00:01:06.950
You'll see that it's a multi module maven project

21
00:01:06.950 --> 00:01:09.840
that consists off four modules.

22
00:01:09.840 --> 00:01:13.940
First, there's the front end, which is in the web module.

23
00:01:13.940 --> 00:01:18.240
This is a small and simple spring boot web application.

24
00:01:18.240 --> 00:01:22.530
It contains the registration and thank you pages and the spring web

25
00:01:22.530 --> 00:01:26.940
MVC Controller in Class Registration controller.

26
00:01:26.940 --> 00:01:29.530
When a user submits the registration,

27
00:01:29.530 --> 00:01:34.040
the submit method off glass registration controller will be called.

28
00:01:34.040 --> 00:01:39.550
This method performs validation and then passes the registration to the back end

29
00:01:39.550 --> 00:01:44.840
by performing an HTTP request using a spring rest template.

30
00:01:44.840 --> 00:01:46.460
Next, there is the back end,

31
00:01:46.460 --> 00:01:50.540
which is the most interesting part in the service module.

32
00:01:50.540 --> 00:01:54.840
This is a spring boot and spring integration application.

33
00:01:54.840 --> 00:01:57.600
When you take a look at the main application class,

34
00:01:57.600 --> 00:02:01.370
which is class Globomantics service application,

35
00:02:01.370 --> 00:02:05.710
you will see that it has an import resource annotation to import

36
00:02:05.710 --> 00:02:09.440
a spring integration XML configuration file.

37
00:02:09.440 --> 00:02:14.340
Let's take a look at that file to see how spring integration is used here.

38
00:02:14.340 --> 00:02:18.000
It starts with an HTTP inbound general adapter,

39
00:02:18.000 --> 00:02:24.240
which is configured to respond to post requests on the path slash register.

40
00:02:24.240 --> 00:02:26.060
When it receives a request,

41
00:02:26.060 --> 00:02:30.810
it converts the body of the request to Annette and registration object and

42
00:02:30.810 --> 00:02:35.140
sends it to a channel named Registration Request channel.

43
00:02:35.140 --> 00:02:37.170
Note that if no error occurs,

44
00:02:37.170 --> 00:02:42.550
the service will respond with HTTP status code to to accepted,

45
00:02:42.550 --> 00:02:47.740
which means that the request has been accepted for asynchronous processing.

46
00:02:47.740 --> 00:02:51.320
The registration request General is an executed channel

47
00:02:51.320 --> 00:02:54.640
because it has a task executable configured.

48
00:02:54.640 --> 00:02:58.980
This task executable will start a number off threats that will be used to

49
00:02:58.980 --> 00:03:02.940
call components that receive messages from the channel.

50
00:03:02.940 --> 00:03:05.600
The next component is a service activator,

51
00:03:05.600 --> 00:03:09.740
which calls the register method of the registration service.

52
00:03:09.740 --> 00:03:13.680
Let's take a look at class registration service and then come back to

53
00:03:13.680 --> 00:03:17.040
the rest of the spring integration configuration,

54
00:03:17.040 --> 00:03:19.730
the main job off the registration services.

55
00:03:19.730 --> 00:03:22.940
To save the registration in a database,

56
00:03:22.940 --> 00:03:26.800
The register method creates an at and and at and ticket

57
00:03:26.800 --> 00:03:29.390
object and saves them in the database,

58
00:03:29.390 --> 00:03:32.730
and then creates and returns a registration event

59
00:03:32.730 --> 00:03:35.700
object for working with the database.

60
00:03:35.700 --> 00:03:37.990
The application uses Spring data, J.

61
00:03:37.990 --> 00:03:39.340
P A.

62
00:03:39.340 --> 00:03:41.580
The Entity classes and Spring Data.

63
00:03:41.580 --> 00:03:45.700
JPA repository interfaces are defined in the package

64
00:03:45.700 --> 00:03:49.240
Kong Pluralsight Demo database.

65
00:03:49.240 --> 00:03:50.480
To keep it simple,

66
00:03:50.480 --> 00:03:55.640
the application is configured to use an in memory age to database.

67
00:03:55.640 --> 00:03:57.290
When you have the back and running,

68
00:03:57.290 --> 00:04:00.630
you can take a look at what's in the database by navigating to

69
00:04:00.630 --> 00:04:06.240
local host Port 80 81 slash h two dash control.

70
00:04:06.240 --> 00:04:13.160
Use the J D B C u r l J D B c H two ma'am Globomantics with

71
00:04:13.160 --> 00:04:17.950
username s a and no password to log in off course.

72
00:04:17.950 --> 00:04:20.100
Since it's an in memory database,

73
00:04:20.100 --> 00:04:22.910
it won't be available when the back and is not running.

74
00:04:22.910 --> 00:04:25.810
And when you stop and restart the back and the

75
00:04:25.810 --> 00:04:28.540
content of the database will be lost,

76
00:04:28.540 --> 00:04:33.040
let's now go back to the spring Integration configuration file.

77
00:04:33.040 --> 00:04:37.300
The registration Service returns the Registration event Object,

78
00:04:37.300 --> 00:04:40.410
which is sent to a published subscribed channel

79
00:04:40.410 --> 00:04:43.640
named Registration Event Channel.

80
00:04:43.640 --> 00:04:47.340
There are two components that subscribe to this channel.

81
00:04:47.340 --> 00:04:50.190
First, there's the confirmation mail chain,

82
00:04:50.190 --> 00:04:54.300
which prepares and sends an email to the at and containing

83
00:04:54.300 --> 00:04:57.240
a confirmation off the registration.

84
00:04:57.240 --> 00:04:58.320
Second, the building.

85
00:04:58.320 --> 00:05:03.780
Jane uses an HTTP outbound channel adapter to send an http request to

86
00:05:03.780 --> 00:05:08.940
the building system to trigger it to build yet and for the registration

87
00:05:08.940 --> 00:05:11.480
to summarize and give you a good our view.

88
00:05:11.480 --> 00:05:15.740
Here's a picture off the architecture of the application the

89
00:05:15.740 --> 00:05:18.190
front and serves the registration page.

90
00:05:18.190 --> 00:05:20.940
And when user submits the registration,

91
00:05:20.940 --> 00:05:23.570
it sends the registration to the back and fire on.

92
00:05:23.570 --> 00:05:29.270
HTTP request in the back end and HTTP inbound channel adapter receives

93
00:05:29.270 --> 00:05:32.220
the request and sends it to the registration request.

94
00:05:32.220 --> 00:05:33.440
General,

95
00:05:33.440 --> 00:05:36.580
a service activator calls the registration service to

96
00:05:36.580 --> 00:05:39.540
save the registration in the database.

97
00:05:39.540 --> 00:05:43.070
The registration service returns the registration event,

98
00:05:43.070 --> 00:05:44.690
which is sent to a publish.

99
00:05:44.690 --> 00:05:48.890
Subscribe General two components error subscribe to this channel,

100
00:05:48.890 --> 00:05:51.800
which will send a confirmation email to the at and

101
00:05:51.800 --> 00:05:54.440
and trigger the billing system.

102
00:05:54.440 --> 00:05:57.280
Note that I have deliberately left out some things

103
00:05:57.280 --> 00:06:00.040
in order to keep the demo simple.

104
00:06:00.040 --> 00:06:05.130
For example, I haven't paid much attention to error handling that would,

105
00:06:05.130 --> 00:06:07.770
of course, be imported in a real application,

106
00:06:07.770 --> 00:06:09.930
and we'll get back to that in some off the demos.

107
00:06:09.930 --> 00:06:13.710
In this course, there are two more modules in the project,

108
00:06:13.710 --> 00:06:16.440
but those error both very simple.

109
00:06:16.440 --> 00:06:21.340
The building module is just to stop implementation off the building system.

110
00:06:21.340 --> 00:06:24.270
It contains a minimal spring boot to have application

111
00:06:24.270 --> 00:06:28.240
that listens for requests on Port 80 83.

112
00:06:28.240 --> 00:06:33.140
The only thing it does is sprint out a lock message when it receives a request.

113
00:06:33.140 --> 00:06:33.870
Finally,

114
00:06:33.870 --> 00:06:38.040
the module named Model contains data transfer object classes that are

115
00:06:38.040 --> 00:06:42.080
used by the other modules to run the complete demo.

116
00:06:42.080 --> 00:06:45.990
You will need to start the front and back and and building applications,

117
00:06:45.990 --> 00:06:48.940
and you will also need a mail server.

118
00:06:48.940 --> 00:06:52.260
An easy way to get a mail server running is by starting

119
00:06:52.260 --> 00:06:55.140
green meal in a docker container.

120
00:06:55.140 --> 00:06:58.590
Greenmail is a simple mail server written in Java

121
00:06:58.590 --> 00:07:01.440
meant for development and testing.

122
00:07:01.440 --> 00:07:04.610
You can create and start a docker container that runs

123
00:07:04.610 --> 00:07:07.540
greenmail with the following command.

124
00:07:07.540 --> 00:07:11.740
With the Docker PS, you can verify that it's running.

125
00:07:11.740 --> 00:07:14.140
You can stop the container with Docker,

126
00:07:14.140 --> 00:07:17.650
stop greenmail and restart it again with Docker.

127
00:07:17.650 --> 00:07:23.070
Start greenmail to start the billing front and then back and applications.

128
00:07:23.070 --> 00:07:25.130
You can use maven with the minus.

129
00:07:25.130 --> 00:07:30.680
B L Option and the name of the module and spring would run from the

130
00:07:30.680 --> 00:07:34.640
project directory in three terminal windows or taps.

131
00:07:34.640 --> 00:07:38.440
Alternatively, you could run them from your IDE.

132
00:07:38.440 --> 00:07:42.910
IntelliJ has a nice services view that makes it easy to start and stop

133
00:07:42.910 --> 00:07:46.940
spring boot applications and also Docker containers.

134
00:07:46.940 --> 00:07:49.040
When you have entered the registration,

135
00:07:49.040 --> 00:07:54.440
you can use curl commands to see what's in the inbox off the mail server.

136
00:07:54.440 --> 00:07:56.480
I won't show that in detail here,

137
00:07:56.480 --> 00:08:01.640
but it's explained in the Read Me file that's included with the example project.

138
00:08:01.640 --> 00:08:03.530
Take a look at the example Project.

139
00:08:03.530 --> 00:08:09.000
Make sure that you understand how it works and get it running on your own system.

