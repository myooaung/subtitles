WEBVTT
1
00:00:00.007 --> 00:00:02.003
- [Narrator] Quarkus supports a rich set

2
00:00:02.003 --> 00:00:04.004
of web-based traffic.

3
00:00:04.004 --> 00:00:06.009
Let's start with the basics.

4
00:00:06.009 --> 00:00:10.008
HTTP is a relatively easy protocol to implement

5
00:00:10.008 --> 00:00:13.002
within Quarkus itself.

6
00:00:13.002 --> 00:00:18.000
And Quarkus is an implementation of Eclipse MicroProfile

7
00:00:18.000 --> 00:00:23.009
which leverages Jakarta EE formerly J2EE implementations.

8
00:00:23.009 --> 00:00:26.002
As such, HTTP traffic,

9
00:00:26.002 --> 00:00:28.007
specifically REST implementations,

10
00:00:28.007 --> 00:00:31.001
are based on JAX-RS.

11
00:00:31.001 --> 00:00:34.008
In Quarkus, the framework handles the server mappings.

12
00:00:34.008 --> 00:00:35.008
You don't need to interact

13
00:00:35.008 --> 00:00:37.004
with the application server at all

14
00:00:37.004 --> 00:00:38.009
or the servlet container,

15
00:00:38.009 --> 00:00:41.004
everything is wired for you.

16
00:00:41.004 --> 00:00:43.008
With Quarkus Web, just like Java,

17
00:00:43.008 --> 00:00:46.009
it all goes through classes and methods.

18
00:00:46.009 --> 00:00:49.002
With Quarkus, you also get a wonderful tool

19
00:00:49.002 --> 00:00:51.003
called REST Client.

20
00:00:51.003 --> 00:00:54.002
This framework provides built-in support

21
00:00:54.002 --> 00:00:56.003
for making RESTful web calls

22
00:00:56.003 --> 00:00:59.007
via the MicroProfile Rest Client.

23
00:00:59.007 --> 00:01:02.002
This leads to a dramatic simplification

24
00:01:02.002 --> 00:01:06.002
of the web boundary between two services.

25
00:01:06.002 --> 00:01:09.000
The Client handles all the connection settings,

26
00:01:09.000 --> 00:01:11.002
setup and tear down for you,

27
00:01:11.002 --> 00:01:14.005
so you can focus on just making the call

28
00:01:14.005 --> 00:01:17.000
and working with the data that you get back.

29
00:01:17.000 --> 00:01:20.004
This leads to a major reduction in boilerplate code

30
00:01:20.004 --> 00:01:23.001
to make web calls and marshal the JSON,

31
00:01:23.001 --> 00:01:26.003
and turn it into Java objects.

32
00:01:26.003 --> 00:01:28.006
Newer to the role of web service development,

33
00:01:28.006 --> 00:01:33.006
GraphQL is an up and coming technology released by Facebook.

34
00:01:33.006 --> 00:01:37.007
Quarkus offers first-class support for GraphQL services

35
00:01:37.007 --> 00:01:40.005
through the MicroProfile implementation.

36
00:01:40.005 --> 00:01:42.008
It leverages the SmallRye extension

37
00:01:42.008 --> 00:01:45.005
to provide a GraphQL implementation,

38
00:01:45.005 --> 00:01:48.001
again based on MicroProfile.

39
00:01:48.001 --> 00:01:50.006
As one might expect with GraphQL,

40
00:01:50.006 --> 00:01:53.006
there is full support for queries,

41
00:01:53.006 --> 00:01:57.003
but there's also support for mutations.

42
00:01:57.003 --> 00:02:00.006
You can also consume GraphQL services,

43
00:02:00.006 --> 00:02:03.002
though that's beyond the scope of this course,

44
00:02:03.002 --> 00:02:08.000
from Quarkus via GraphQL client-side offering.

