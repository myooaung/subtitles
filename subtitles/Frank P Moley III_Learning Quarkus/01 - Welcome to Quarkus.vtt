WEBVTT
1
00:00:00.007 --> 00:00:01.007
- [Instructor] The Quarkus framework

2
00:00:01.007 --> 00:00:04.007
is a powerful set of open source tools sponsored

3
00:00:04.007 --> 00:00:06.007
by Red Hat that fills the needs

4
00:00:06.007 --> 00:00:10.006
of most Java developers operating in the cloud,

5
00:00:10.006 --> 00:00:14.004
in containers or on big iron systems.

6
00:00:14.004 --> 00:00:16.008
As a framework, I haven't been this excited

7
00:00:16.008 --> 00:00:19.004
since the early days of Spring.

8
00:00:19.004 --> 00:00:23.003
So let's talk a little bit about what Quarkus is itself.

9
00:00:23.003 --> 00:00:26.009
First and foremost, it's a full stack Java framework.

10
00:00:26.009 --> 00:00:28.008
You can build web applications,

11
00:00:28.008 --> 00:00:32.004
web services, standalone components all written

12
00:00:32.004 --> 00:00:34.005
in Java with Quarkus.

13
00:00:34.005 --> 00:00:36.006
Anything you can do with Java,

14
00:00:36.006 --> 00:00:38.002
you can obviously do with Quarkus

15
00:00:38.002 --> 00:00:40.006
but the extensions and configurations

16
00:00:40.006 --> 00:00:44.005
that we will discuss is where the power really comes in.

17
00:00:44.005 --> 00:00:47.001
The full stack framework concepts

18
00:00:47.001 --> 00:00:50.007
includes many of these extension points.

19
00:00:50.007 --> 00:00:53.006
Quarkus is Kubernetes native.

20
00:00:53.006 --> 00:00:55.008
It was designed from the ground up

21
00:00:55.008 --> 00:00:58.006
to operate in a containerized world

22
00:00:58.006 --> 00:01:00.009
and we will talk about this.

23
00:01:00.009 --> 00:01:04.005
One of the areas I see a huge benefit from Quarkus

24
00:01:04.005 --> 00:01:07.008
over other Java frameworks is size.

25
00:01:07.008 --> 00:01:09.009
The most popular Java framework,

26
00:01:09.009 --> 00:01:13.005
for instance, can be significantly bigger

27
00:01:13.005 --> 00:01:16.002
from a RAM utilization perspective,

28
00:01:16.002 --> 00:01:19.000
which is why this is very important

29
00:01:19.000 --> 00:01:21.002
when dealing with Kubernetes.

30
00:01:21.002 --> 00:01:25.001
Smaller is better, especially if you're managing the system

31
00:01:25.001 --> 00:01:28.005
underneath the Kubernetes nodes.

32
00:01:28.005 --> 00:01:32.002
Quarkus is also designed to be fully cloud native.

33
00:01:32.002 --> 00:01:36.003
Many of its size, efficiencies and extensions

34
00:01:36.003 --> 00:01:40.003
have the ability to run in many operational formats,

35
00:01:40.003 --> 00:01:42.005
including serverless, containerized,

36
00:01:42.005 --> 00:01:44.009
or VM operations.

37
00:01:44.009 --> 00:01:48.008
It also supports full externalized configuration,

38
00:01:48.008 --> 00:01:53.006
making it fit into the 12 factor application scope as well.

39
00:01:53.006 --> 00:01:57.004
Quarkus itself is also designed to be natively compiled

40
00:01:57.004 --> 00:01:59.008
with the GraalVM.

41
00:01:59.008 --> 00:02:03.009
Some frameworks are not yet ready for this exciting change

42
00:02:03.009 --> 00:02:07.002
but Quarkus is, and we see massive improvements

43
00:02:07.002 --> 00:02:11.007
on execution performance using the GraalVM with Quarkus.

44
00:02:11.007 --> 00:02:13.001
And if you're interested in that,

45
00:02:13.001 --> 00:02:16.004
I have a course on GraalVM itself,

46
00:02:16.004 --> 00:02:18.008
specifically looking at various frameworks,

47
00:02:18.008 --> 00:02:20.008
like Quarkus and Spring.

48
00:02:20.008 --> 00:02:25.000
Now, Red Hat discusses several key features of Quarkus

49
00:02:25.000 --> 00:02:27.001
and being designed for developers

50
00:02:27.001 --> 00:02:30.005
is one of the first ones that they mention.

51
00:02:30.005 --> 00:02:33.003
Quarkus is designed to be easy to use.

52
00:02:33.003 --> 00:02:35.005
Now, this isn't just words.

53
00:02:35.005 --> 00:02:38.008
In my opinion, I think once you start writing

54
00:02:38.008 --> 00:02:40.006
your first application,

55
00:02:40.006 --> 00:02:43.004
you will see that Quarkus is indeed cleaner

56
00:02:43.004 --> 00:02:47.008
and easier to pick up than many other frameworks.

57
00:02:47.008 --> 00:02:50.000
Part of what makes this a great choice

58
00:02:50.000 --> 00:02:52.001
for developers is the massive amount

59
00:02:52.001 --> 00:02:54.003
of choice you are given.

60
00:02:54.003 --> 00:02:56.009
Some frameworks really push their opinions

61
00:02:56.009 --> 00:03:01.002
onto the developer and while oftentimes it works fine,

62
00:03:01.002 --> 00:03:03.004
it doesn't really focus on the developers

63
00:03:03.004 --> 00:03:05.001
who use the framework

64
00:03:05.001 --> 00:03:06.007
from their needs perspective.

65
00:03:06.007 --> 00:03:09.003
Instead, telling them what they should need.

66
00:03:09.003 --> 00:03:11.001
A cool tool that I have used

67
00:03:11.001 --> 00:03:13.001
when building web-based applications

68
00:03:13.001 --> 00:03:16.005
for several years now is live coding.

69
00:03:16.005 --> 00:03:21.000
Quarkus gives you live coding out of the box.

70
00:03:21.000 --> 00:03:23.001
The configuration model for Quarkus

71
00:03:23.001 --> 00:03:25.009
is unified and it's very powerful

72
00:03:25.009 --> 00:03:28.001
with its own set of defaults

73
00:03:28.001 --> 00:03:30.008
that help you as a developer move fast

74
00:03:30.008 --> 00:03:33.005
and focus on what you need to focus on,

75
00:03:33.005 --> 00:03:37.004
which quite frankly isn't the framework itself.

76
00:03:37.004 --> 00:03:40.000
And finally, from a developer perspective,

77
00:03:40.000 --> 00:03:43.006
it's how easy and clean it is to build a native image

78
00:03:43.006 --> 00:03:45.005
from standard code.

79
00:03:45.005 --> 00:03:49.002
Quarkus was designed to be container first.

80
00:03:49.002 --> 00:03:51.006
Now, this philosophy is evident

81
00:03:51.006 --> 00:03:54.004
in all aspects of the framework itself.

82
00:03:54.004 --> 00:03:58.006
The entire framework was built around this mantra.

83
00:03:58.006 --> 00:04:01.008
Lower memory usage is one of the biggest benefits.

84
00:04:01.008 --> 00:04:04.000
We are seeing reduced memory footprints

85
00:04:04.000 --> 00:04:05.008
of nearly 90% over some

86
00:04:05.008 --> 00:04:08.002
of the traditional Java applications,

87
00:04:08.002 --> 00:04:11.009
using the most popular frameworks today.

88
00:04:11.009 --> 00:04:15.001
Part of being container-first development framework

89
00:04:15.001 --> 00:04:18.008
is acknowledging the startup time and that it matters

90
00:04:18.008 --> 00:04:21.002
and Quarkus has embraced that as well

91
00:04:21.002 --> 00:04:22.009
by improving startup times

92
00:04:22.009 --> 00:04:25.003
over traditional Java applications,

93
00:04:25.003 --> 00:04:27.003
as well as those using again

94
00:04:27.003 --> 00:04:29.009
the most common frameworks of today.

95
00:04:29.009 --> 00:04:31.004
Now, one of the coolest aspects

96
00:04:31.004 --> 00:04:34.000
for full stack developers today with Quarkus

97
00:04:34.000 --> 00:04:38.006
is the way it handles imperative code and reactive code.

98
00:04:38.006 --> 00:04:41.005
Quarkus combines reactive and imperative

99
00:04:41.005 --> 00:04:43.004
into a single runtime,

100
00:04:43.004 --> 00:04:45.000
as opposed to different runtimes

101
00:04:45.000 --> 00:04:47.002
as you'll see with other frameworks

102
00:04:47.002 --> 00:04:51.007
and different patterns outside the code themselves as well.

103
00:04:51.007 --> 00:04:52.009
To accomplish this,

104
00:04:52.009 --> 00:04:55.006
Quarkus uses the reactive engine

105
00:04:55.006 --> 00:04:58.008
for both imperative and reactive styles.

106
00:04:58.008 --> 00:05:00.009
This way, the develop using reactive

107
00:05:00.009 --> 00:05:03.005
could to get their non-blocking core,

108
00:05:03.005 --> 00:05:05.004
which is really what they need,

109
00:05:05.004 --> 00:05:07.003
whereas the developer doing imperative,

110
00:05:07.003 --> 00:05:08.008
they just keep doing what they're doing,

111
00:05:08.008 --> 00:05:10.000
regardless of the fact

112
00:05:10.000 --> 00:05:11.008
that the core is non-blocking,

113
00:05:11.008 --> 00:05:14.009
they're still writing blocking applications based

114
00:05:14.009 --> 00:05:17.008
on the standard RESTful endpoints, for instance.

115
00:05:17.008 --> 00:05:20.007
Now, by combining both of these together,

116
00:05:20.007 --> 00:05:23.009
this allows developers to use the same core

117
00:05:23.009 --> 00:05:27.000
and write the code that makes sense

118
00:05:27.000 --> 00:05:31.000
for their business needs and their use cases.

