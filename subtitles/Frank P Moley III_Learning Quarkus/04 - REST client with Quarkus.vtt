WEBVTT
1
00:00:00.007 --> 00:00:02.005
- [Instructor] As I stated earlier, Quarkus ships

2
00:00:02.005 --> 00:00:05.003
with a powerful tool to make web service calls

3
00:00:05.003 --> 00:00:07.002
from within your application

4
00:00:07.002 --> 00:00:09.000
to restful web services.

5
00:00:09.000 --> 00:00:10.005
The rest client.

6
00:00:10.005 --> 00:00:13.002
Let's take a look at how to use it.

7
00:00:13.002 --> 00:00:14.007
So once again, back in our ID,

8
00:00:14.007 --> 00:00:19.004
I'm going to create once again another new module.

9
00:00:19.004 --> 00:00:26.008
Use whatever method you're comfortable with.

10
00:00:26.008 --> 00:00:34.009
This one, I'm going to call room batch.

11
00:00:34.009 --> 00:00:36.007
Now there's a couple elements that we need.

12
00:00:36.007 --> 00:00:40.002
We need rest client.

13
00:00:40.002 --> 00:00:47.000
And we'll use Jackson this time.

14
00:00:47.000 --> 00:00:49.003
Okay, So from our room service,

15
00:00:49.003 --> 00:00:52.006
we're going to copy a couple of values here.

16
00:00:52.006 --> 00:00:57.009
We're going to bring over the room,

17
00:00:57.009 --> 00:01:04.000
and put it same level.

18
00:01:04.000 --> 00:01:14.006
We're going to get rid of the example resource.

19
00:01:14.006 --> 00:01:17.000
All right, so now in our root package here,

20
00:01:17.000 --> 00:01:21.007
we going to create a new interface.

21
00:01:21.007 --> 00:01:24.007
And we're going to call it room service rest.

22
00:01:24.007 --> 00:01:30.004
And again, it's an interface.

23
00:01:30.004 --> 00:01:33.002
Now we annotate this, just like we would

24
00:01:33.002 --> 00:01:36.000
if this was an actual web service.

25
00:01:36.000 --> 00:01:41.005
So at path, and it's going to be slash rooms

26
00:01:41.005 --> 00:01:45.006
but now we need to annotate it as application scoped.

27
00:01:45.006 --> 00:01:52.008
And we're going to register,

28
00:01:52.008 --> 00:01:55.000
a rest client.

29
00:01:55.000 --> 00:01:57.007
Now I'm going to do a config key look up here,

30
00:01:57.007 --> 00:02:01.007
just to make this a little bit easier to type later on.

31
00:02:01.007 --> 00:02:05.005
We're just going to call this rooms API.

32
00:02:05.005 --> 00:02:06.009
Now this is an interface,

33
00:02:06.009 --> 00:02:12.003
but we will still annotate it with at get.

34
00:02:12.003 --> 00:02:14.005
And we're going to do a list of room

35
00:02:14.005 --> 00:02:18.007
because we we're going to call it getAllRooms call,

36
00:02:18.007 --> 00:02:22.007
and we will call it the same thing.

37
00:02:22.007 --> 00:02:24.000
All right, and before we actually wire

38
00:02:24.000 --> 00:02:26.003
this is going to our application properties.

39
00:02:26.003 --> 00:02:29.002
There's a couple values we need to push here.

40
00:02:29.002 --> 00:02:36.008
So rooms api/mp-rest/url.

41
00:02:36.008 --> 00:02:40.006
So rooms API is that key that I put in,

42
00:02:40.006 --> 00:02:43.001
MP rest, my profile rest URL.

43
00:02:43.001 --> 00:02:44.002
So what is the URL?

44
00:02:44.002 --> 00:02:46.006
We're running this locally.

45
00:02:46.006 --> 00:02:53.002
So it's just going to be http://localhost8080

46
00:02:53.002 --> 00:02:55.000
And it's just the context route

47
00:02:55.000 --> 00:02:57.003
of where the service is running.

48
00:02:57.003 --> 00:02:59.000
So I already have my service running

49
00:02:59.000 --> 00:03:01.000
and I can tell that in my IDE,

50
00:03:01.000 --> 00:03:02.004
I encourage you right now to go ahead

51
00:03:02.004 --> 00:03:04.005
and get your room service up and running

52
00:03:04.005 --> 00:03:07.005
'cause you're going to need it here in a moment.

53
00:03:07.005 --> 00:03:09.005
There's one more thing that we need to do

54
00:03:09.005 --> 00:03:13.005
and that is we need to create a new Java class.

55
00:03:13.005 --> 00:03:17.001
And we will call this one runner.

56
00:03:17.001 --> 00:03:22.000
And we are going to do QuarkusMain.

57
00:03:22.000 --> 00:03:25.004
And then we'll implement a QuarkusApplication.

58
00:03:25.004 --> 00:03:28.002
Don't need that annotation.

59
00:03:28.002 --> 00:03:29.004
All right, this is where

60
00:03:29.004 --> 00:03:31.009
it's going to get a little bit different.

61
00:03:31.009 --> 00:03:33.003
So we're still going to inject

62
00:03:33.003 --> 00:03:36.002
but we also need to tell that it's a rest client

63
00:03:36.002 --> 00:03:38.008
that we're injecting.

64
00:03:38.008 --> 00:03:43.008
Room service rest.

65
00:03:43.008 --> 00:03:51.003
And now we will implement our method.

66
00:03:51.003 --> 00:04:00.000
And we will simply do a list of our room object.

67
00:04:00.000 --> 00:04:04.006
Calling getAllRooms.

68
00:04:04.006 --> 00:04:07.008
And then we will do a for each on that.

69
00:04:07.008 --> 00:04:12.003
And do our system out::println.

70
00:04:12.003 --> 00:04:14.001
So pretty simple.

71
00:04:14.001 --> 00:04:17.000
But the idea here is that we haven't written much code

72
00:04:17.000 --> 00:04:19.007
to actually make our web service request.

73
00:04:19.007 --> 00:04:22.002
There is one more thing that I'm going to have to do.

74
00:04:22.002 --> 00:04:23.004
You may not have to do this depending

75
00:04:23.004 --> 00:04:25.006
on how you build the application.

76
00:04:25.006 --> 00:04:26.007
But by default the plugin

77
00:04:26.007 --> 00:04:30.002
that I get turns us into a rest service.

78
00:04:30.002 --> 00:04:35.007
So I need to go get rid of the rest easy implementation.

79
00:04:35.007 --> 00:04:39.009
And the rest assured implementation.

80
00:04:39.009 --> 00:04:46.000
And in doing that, I've got go delete a couple of tests.

81
00:04:46.000 --> 00:04:47.000
And if you haven't looked yet

82
00:04:47.000 --> 00:04:50.005
it's a default test, you get, you really should.

83
00:04:50.005 --> 00:04:53.002
So now that we've got all of that done.

84
00:04:53.002 --> 00:04:58.000
Let us run our room batch.

85
00:04:58.000 --> 00:05:00.006
Now, made no database connections.

86
00:05:00.006 --> 00:05:02.004
We have no way of getting the data

87
00:05:02.004 --> 00:05:04.006
other than making the rest call.

88
00:05:04.006 --> 00:05:05.008
So you'll see how easy

89
00:05:05.008 --> 00:05:09.000
it was to set up a rest implementation,

90
00:05:09.000 --> 00:05:10.006
as well as a rest client

91
00:05:10.006 --> 00:05:12.008
to call that from another service,

92
00:05:12.008 --> 00:05:14.003
which is what we do a lot of

93
00:05:14.003 --> 00:05:17.000
with microservices architectures.

