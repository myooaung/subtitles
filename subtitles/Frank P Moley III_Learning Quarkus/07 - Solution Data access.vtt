WEBVTT
1
00:00:00.000 --> 00:00:06.003
(music)

2
00:00:06.003 --> 00:00:09.001
- So now it's time for my solution to this challenge,

3
00:00:09.001 --> 00:00:10.003
and I've actually implemented

4
00:00:10.003 --> 00:00:13.009
for both the Postgres database and the Cassandra database,

5
00:00:13.009 --> 00:00:15.006
so you'll have both of those available

6
00:00:15.006 --> 00:00:18.005
to you in the exercise files.

7
00:00:18.005 --> 00:00:22.001
Let's start with the Cassandra version.

8
00:00:22.001 --> 00:00:23.006
So what I've done

9
00:00:23.006 --> 00:00:26.007
is in SRC/main/resources, application of properties,

10
00:00:26.007 --> 00:00:29.000
I've put a "bedInfo" property.

11
00:00:29.000 --> 00:00:32.007
And in this case, I'm passing 1K.

12
00:00:32.007 --> 00:00:38.000
Now in SRC/main/Java, in the runner class...

13
00:00:38.000 --> 00:00:39.003
I've added a few things here.

14
00:00:39.003 --> 00:00:42.009
So on line 31, you'll see that I create a CQL statement

15
00:00:42.009 --> 00:00:44.006
but I have a bind variable in there.

16
00:00:44.006 --> 00:00:46.001
So I'm setting that bedInfo equal

17
00:00:46.001 --> 00:00:47.004
to question mark.

18
00:00:47.004 --> 00:00:50.000
This is good practice, obviously it helps you prevent

19
00:00:50.000 --> 00:00:53.003
against some CQL injections when you start doing things

20
00:00:53.003 --> 00:00:54.008
like using them.

21
00:00:54.008 --> 00:00:56.008
So then I create an array list,

22
00:00:56.008 --> 00:00:58.002
and then I do a prepared statement

23
00:00:58.002 --> 00:01:01.001
because this is now a prepared statement

24
00:01:01.001 --> 00:01:04.003
as opposed to just a regular statement.

25
00:01:04.003 --> 00:01:06.004
Once I do that, I have to create a bound statement

26
00:01:06.004 --> 00:01:09.007
so that I can bind that bind variable to the statement,

27
00:01:09.007 --> 00:01:12.001
and in that case, I'm passing in the bed info there

28
00:01:12.001 --> 00:01:14.001
on line 34.

29
00:01:14.001 --> 00:01:16.001
The rest of it is pretty much the exact same.

30
00:01:16.001 --> 00:01:19.006
I'm iterating over the results set, and then I go through

31
00:01:19.006 --> 00:01:21.004
and print out the data.

32
00:01:21.004 --> 00:01:27.004
I can go ahead and run that.

33
00:01:27.004 --> 00:01:30.007
And you'll see that all of my output this time has 1K

34
00:01:30.007 --> 00:01:35.001
as the bedInfo.

35
00:01:35.001 --> 00:01:36.007
Now in the command app,

36
00:01:36.007 --> 00:01:40.006
so in the Postgres version, and obviously I've got both

37
00:01:40.006 --> 00:01:43.006
of these databases running,

38
00:01:43.006 --> 00:01:46.007
you'll see in the resources I've added the same resource,

39
00:01:46.007 --> 00:01:51.006
so application that bed info.

40
00:01:51.006 --> 00:01:55.005
And now in SRC/main/Java, in the command runner,

41
00:01:55.005 --> 00:01:57.004
you'll see, once again on line 30 I set

42
00:01:57.004 --> 00:01:59.005
that configuration property.

43
00:01:59.005 --> 00:02:02.005
Then I go through, let me shrink this a little bit,

44
00:02:02.005 --> 00:02:04.000
so it's easier to read.

45
00:02:04.000 --> 00:02:07.001
Alright, so now what I do on line 37

46
00:02:07.001 --> 00:02:10.001
is I create a similar query that we did before,

47
00:02:10.001 --> 00:02:12.002
but now you'll see that I set a where clause

48
00:02:12.002 --> 00:02:15.004
in the statement, and I'm setting it equal to a variable

49
00:02:15.004 --> 00:02:17.009
called "bedInfo".

50
00:02:17.009 --> 00:02:20.007
Then I set the parameter on line 38

51
00:02:20.007 --> 00:02:23.002
which is a continuation of the above line.

52
00:02:23.002 --> 00:02:26.007
I set the parameter bedInfo equal to the value

53
00:02:26.007 --> 00:02:29.007
of bedInfo from the configuration property.

54
00:02:29.007 --> 00:02:32.000
And then I get a result list from that.

55
00:02:32.000 --> 00:02:34.007
So, pretty much the same concept of setting

56
00:02:34.007 --> 00:02:37.007
in a bind variable and a parameter to pass in,

57
00:02:37.007 --> 00:02:40.006
and it's a much safer way to do your CQL queries.

58
00:02:40.006 --> 00:02:45.003
And this will run the exact same way.

59
00:02:45.003 --> 00:02:49.002
And you'll see everything we get back is 1K in this case.

60
00:02:49.002 --> 00:02:50.007
So that's what we would expect,

61
00:02:50.007 --> 00:02:54.000
and that was my solution to this challenge exercise.

