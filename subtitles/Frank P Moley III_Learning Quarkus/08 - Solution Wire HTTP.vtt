WEBVTT
1
00:00:00.001 --> 00:00:06.001
(upbeat music)

2
00:00:06.001 --> 00:00:07.009
- [Instructor] So now, it's time for my solution

3
00:00:07.009 --> 00:00:09.009
to this challenge exercise.

4
00:00:09.009 --> 00:00:14.002
This time, however, I only did one of the implementations.

5
00:00:14.002 --> 00:00:18.003
The implementation that I chose to do was using the REST API

6
00:00:18.003 --> 00:00:20.000
and the Cassandra backend.

7
00:00:20.000 --> 00:00:21.002
So in order to accomplish this,

8
00:00:21.002 --> 00:00:24.002
I made a couple changes to some class files.

9
00:00:24.002 --> 00:00:27.003
So let's go into src, main, java

10
00:00:27.003 --> 00:00:31.001
and take a look, first of all, at the RoomService.

11
00:00:31.001 --> 00:00:33.003
So you'll see, starting on line 22,

12
00:00:33.003 --> 00:00:36.006
that I've added a CQL statement

13
00:00:36.006 --> 00:00:41.001
for the four methods that I have created.

14
00:00:41.001 --> 00:00:43.009
The getAllRooms remained unchanged,

15
00:00:43.009 --> 00:00:48.008
but on line 34, I created a method to getRoomsByBedInfo,

16
00:00:48.008 --> 00:00:51.007
and I used a PreparedStatement to do that.

17
00:00:51.007 --> 00:00:55.000
On line 45, I created an addRoom method,

18
00:00:55.000 --> 00:00:58.001
and once again, I used a PreparedStatement.

19
00:00:58.001 --> 00:00:59.006
Now, there are other ways to do this

20
00:00:59.006 --> 00:01:01.003
in Cassandra with the Java Driver,

21
00:01:01.003 --> 00:01:04.005
but again, this was for the purpose of demonstration.

22
00:01:04.005 --> 00:01:07.007
It is not the most efficient way to do this.

23
00:01:07.007 --> 00:01:12.001
And now, on line 58, I created a getRoomByNumber method

24
00:01:12.001 --> 00:01:15.006
that, once again, uses a PreparedStatement.

25
00:01:15.006 --> 00:01:18.008
So let's take a look at the RoomResource.

26
00:01:18.008 --> 00:01:23.003
Everything remained unchanged until I got to line 25.

27
00:01:23.003 --> 00:01:24.006
You'll see on line 25

28
00:01:24.006 --> 00:01:27.008
that I took the original getAllRooms method,

29
00:01:27.008 --> 00:01:30.008
and instead of having an empty parameter list

30
00:01:30.008 --> 00:01:35.009
in the method signature, I added a QueryParam of bedInfo

31
00:01:35.009 --> 00:01:38.008
and passed it as a string for bedInfo.

32
00:01:38.008 --> 00:01:43.001
Then on line 26, if that bedInfo is not empty,

33
00:01:43.001 --> 00:01:46.009
I then call the getRoomsByBedInfo method,

34
00:01:46.009 --> 00:01:50.005
otherwise I call the getAllRoomsMethod.

35
00:01:50.005 --> 00:01:52.002
Now, starting on line 32,

36
00:01:52.002 --> 00:01:56.005
I have a GET method to get the room by its number.

37
00:01:56.005 --> 00:01:58.007
You'll notice that on line 33,

38
00:01:58.007 --> 00:02:04.001
I pass a Path parameter using the curly brace annotation,

39
00:02:04.001 --> 00:02:08.008
so at rooms/roomNumber, I will get the response.

40
00:02:08.008 --> 00:02:11.007
And then, online 35 in the method signature,

41
00:02:11.007 --> 00:02:15.004
I used a path parameter and a string of roomNumber.

42
00:02:15.004 --> 00:02:18.009
Now, on line 39, I created a POST method,

43
00:02:18.009 --> 00:02:22.006
and that POST method consumes APPLICATION_JSON

44
00:02:22.006 --> 00:02:25.002
and simply calls the underlying service

45
00:02:25.002 --> 00:02:27.007
using the RequestBody parameter

46
00:02:27.007 --> 00:02:31.003
and the method signature of the room itself.

47
00:02:31.003 --> 00:02:36.008
So let's run this service and test it out.

48
00:02:36.008 --> 00:02:40.009
All right, I'm going to use my HTTPie tool.

49
00:02:40.009 --> 00:02:47.002
I'm going to go to 8080/rooms, and we get all of our data back.

50
00:02:47.002 --> 00:02:49.005
Let me clear that real quick.

51
00:02:49.005 --> 00:02:52.009
So now, I'm going to do my http command again.

52
00:02:52.009 --> 00:02:54.004
This time I'm going to put it in quotes.

53
00:02:54.004 --> 00:03:01.004
We're going to go to 8080/rooms?bedInfo=,

54
00:03:01.004 --> 00:03:05.000
let's this time look for 1Q.

55
00:03:05.000 --> 00:03:07.005
And you'll see now I get back only the rooms

56
00:03:07.005 --> 00:03:10.001
that have one queen bed.

57
00:03:10.001 --> 00:03:12.008
We'll take a look at one of those.

58
00:03:12.008 --> 00:03:19.009
So now, I can do an http on 8080/rooms/P1,

59
00:03:19.009 --> 00:03:23.007
and you'll see that I just do get Piccadilly one.

60
00:03:23.007 --> 00:03:27.006
All right, so the final element is we will add a new room.

61
00:03:27.006 --> 00:03:31.001
So we're going to go to 8080/rooms.

62
00:03:31.001 --> 00:03:36.001
I'm going to do a name, name equals Frank,

63
00:03:36.001 --> 00:03:44.005
bedInfo equals 1k, and roomNumber equals F1.

64
00:03:44.005 --> 00:03:46.003
And we now have the data in our database,

65
00:03:46.003 --> 00:03:49.000
and we can validate that that actually was written

66
00:03:49.000 --> 00:03:54.004
to the database by doing an 8080/rooms and then searching

67
00:03:54.004 --> 00:03:58.000
through the scroll back here a little bit.

68
00:03:58.000 --> 00:03:59.009
And there it is right there.

69
00:03:59.009 --> 00:04:03.000
And that's how I solved this challenge exercise.

