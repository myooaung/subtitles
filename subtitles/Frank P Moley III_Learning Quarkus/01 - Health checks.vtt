WEBVTT
1
00:00:00.007 --> 00:00:03.002
- [Instructor] Monitoring a system is critical

2
00:00:03.002 --> 00:00:05.004
to its overall operations,

3
00:00:05.004 --> 00:00:07.001
and quarkus provides a simple

4
00:00:07.001 --> 00:00:10.000
and effective method to get health checks

5
00:00:10.000 --> 00:00:12.005
and liveliness checks up and running,

6
00:00:12.005 --> 00:00:16.003
which is very important to containerized world of Kubernetes

7
00:00:16.003 --> 00:00:18.005
because you have to have a way to tell Kubernetes

8
00:00:18.005 --> 00:00:20.004
that your application is ready.

9
00:00:20.004 --> 00:00:22.003
So let's check that out.

10
00:00:22.003 --> 00:00:25.000
All right, so let's jump into our room service,

11
00:00:25.000 --> 00:00:28.004
and we're going to start with the pom file.

12
00:00:28.004 --> 00:00:30.002
We'll go down here to the bottom

13
00:00:30.002 --> 00:00:33.008
and we're going to add a dependency,

14
00:00:33.008 --> 00:00:37.001
and the dependency that we're going to add

15
00:00:37.001 --> 00:00:38.003
is quarkus

16
00:00:38.003 --> 00:00:40.003
smallrye

17
00:00:40.003 --> 00:00:43.003
health

18
00:00:43.003 --> 00:00:46.000
from io quarkus

19
00:00:46.000 --> 00:00:49.002
well that may even do its thing

20
00:00:49.002 --> 00:00:50.004
and now from this point here

21
00:00:50.004 --> 00:00:57.001
we can simply start our application

22
00:00:57.001 --> 00:00:58.002
and once your application is up

23
00:00:58.002 --> 00:01:00.009
and running let's jump to our web browser.

24
00:01:00.009 --> 00:01:02.008
The first thing we're going to do is we're going to go

25
00:01:02.008 --> 00:01:05.005
to local host 8080

26
00:01:05.005 --> 00:01:07.008
slash health

27
00:01:07.008 --> 00:01:10.001
slash live.

28
00:01:10.001 --> 00:01:13.001
This is a liveliness check, very simple out of the box

29
00:01:13.001 --> 00:01:15.007
but it tells you that the application is up.

30
00:01:15.007 --> 00:01:18.008
Now we wrote zero code to get to this point.

31
00:01:18.008 --> 00:01:22.000
That's very important.

32
00:01:22.000 --> 00:01:25.002
You also get a similar thing with ready, but you'll see

33
00:01:25.002 --> 00:01:28.007
that the readiness check actually digs a little bit deeper.

34
00:01:28.007 --> 00:01:31.002
So now it's looking and says, is the app up?

35
00:01:31.002 --> 00:01:35.006
And if it's up, what are details about its dependencies?

36
00:01:35.006 --> 00:01:38.004
And in this case, we're using Apache Cassandra.

37
00:01:38.004 --> 00:01:40.008
So let's jump back here to our IDE

38
00:01:40.008 --> 00:01:42.008
and I want to show you how easy it is

39
00:01:42.008 --> 00:01:46.003
to implement your own custom checks.

40
00:01:46.003 --> 00:01:48.005
So let's go to source main Java

41
00:01:48.005 --> 00:01:51.006
and let's create a new class

42
00:01:51.006 --> 00:01:57.004
and we're going to call this readiness probe.

43
00:01:57.004 --> 00:02:01.001
We're going to annotate this with readiness

44
00:02:01.001 --> 00:02:04.004
and application scoped

45
00:02:04.004 --> 00:02:11.001
and this is going to implement the health check interface.

46
00:02:11.001 --> 00:02:13.003
Let's go ahead and implement that method

47
00:02:13.003 --> 00:02:16.002
and what we're going to do,

48
00:02:16.002 --> 00:02:20.005
is we're going to inject into this,

49
00:02:20.005 --> 00:02:27.004
an instance of our room service

50
00:02:27.004 --> 00:02:29.009
so that our readiness check can actually look

51
00:02:29.009 --> 00:02:33.003
at the database and make sure that it's returning data

52
00:02:33.003 --> 00:02:35.008
and not just connect to it.

53
00:02:35.008 --> 00:02:39.007
Now, the reality is, it was pulling data from the system

54
00:02:39.007 --> 00:02:43.001
in order to do it, but this is a little bit more clear.

55
00:02:43.001 --> 00:02:46.004
So what we'll do here is we will return

56
00:02:46.004 --> 00:02:50.001
a health check response

57
00:02:50.001 --> 00:02:51.009
and we will name it,

58
00:02:51.009 --> 00:02:54.001
custom

59
00:02:54.001 --> 00:02:56.007
readiness check

60
00:02:56.007 --> 00:02:59.002
naming conventions tend to be good when you're dealing

61
00:02:59.002 --> 00:03:02.001
with things like this in the real world,

62
00:03:02.001 --> 00:03:04.002
we're going to call up on it

63
00:03:04.002 --> 00:03:07.000
and we're going to say with data and the data

64
00:03:07.000 --> 00:03:10.006
that we're going to pass, it will be a room count

65
00:03:10.006 --> 00:03:12.002
and we will get our room count

66
00:03:12.002 --> 00:03:14.003
by calling a room service

67
00:03:14.003 --> 00:03:16.006
dot get all rooms

68
00:03:16.006 --> 00:03:20.008
dot size

69
00:03:20.008 --> 00:03:24.000
and then we need to call build.

70
00:03:24.000 --> 00:03:27.003
So now we can jump back over to our web browser

71
00:03:27.003 --> 00:03:31.001
and now we'll refresh our readiness check and you'll see

72
00:03:31.001 --> 00:03:32.009
we have a lot more information now

73
00:03:32.009 --> 00:03:35.003
we still get the default readiness check

74
00:03:35.003 --> 00:03:37.003
but now we have the custom readiness check

75
00:03:37.003 --> 00:03:40.004
that I added that says that the status is up

76
00:03:40.004 --> 00:03:43.006
and that we have a room count in our database of 29.

77
00:03:43.006 --> 00:03:46.008
Obviously you can go much deeper in much more real world

78
00:03:46.008 --> 00:03:49.001
but there is value to having things

79
00:03:49.001 --> 00:03:51.004
like this as part of your readiness checks

80
00:03:51.004 --> 00:03:55.000
especially when you have multiple operations at play.

