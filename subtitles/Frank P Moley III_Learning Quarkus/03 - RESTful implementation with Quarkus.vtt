WEBVTT
1
00:00:00.007 --> 00:00:02.000
- [Instructor] All right, enough explanations.

2
00:00:02.000 --> 00:00:03.008
Let's get into some code

3
00:00:03.008 --> 00:00:07.009
by implementing RESTful web services with Quarkus.

4
00:00:07.009 --> 00:00:09.001
Okay, so the first thing we're going to do

5
00:00:09.001 --> 00:00:11.004
is we're going to create another new application.

6
00:00:11.004 --> 00:00:13.009
Again, multiple ways to do that,

7
00:00:13.009 --> 00:00:15.009
but I'm going to do it with my IDE.

8
00:00:15.009 --> 00:00:22.001
So create a new module using Quarkus.

9
00:00:22.001 --> 00:00:24.008
I'm going to, once again, put in my group,

10
00:00:24.008 --> 00:00:28.000
com.frankmoley.lil.lq,

11
00:00:28.000 --> 00:00:33.000
and this one is going to be called the room-service.

12
00:00:33.000 --> 00:00:34.006
Now, we've got a few selections here,

13
00:00:34.006 --> 00:00:38.003
so we're going to do RESTEasy with JAX-RS

14
00:00:38.003 --> 00:00:41.000
and RESTEasy Jackson,

15
00:00:41.000 --> 00:00:46.009
and then in Data, we're going to do our Cassandra database.

16
00:00:46.009 --> 00:00:48.000
If you don't want to use Cassandra,

17
00:00:48.000 --> 00:00:50.004
if you prefer to use Postgres, feel free to do that.

18
00:00:50.004 --> 00:00:52.003
Just know that I'm going to be using Cassandra,

19
00:00:52.003 --> 00:00:55.001
so it will be a little bit different.

20
00:00:55.001 --> 00:00:59.008
Go ahead and select Next and allow that to build.

21
00:00:59.008 --> 00:01:00.006
Now, the first thing I'm going to do

22
00:01:00.006 --> 00:01:04.008
is I'm going to go back to my cmd-app-nosql,

23
00:01:04.008 --> 00:01:06.007
and I'm going to copy a couple of values here.

24
00:01:06.007 --> 00:01:21.001
So I'm going to copy the Room object over.

25
00:01:21.001 --> 00:01:26.009
Going to get rid of the example resource in our new service,

26
00:01:26.009 --> 00:01:29.007
and I'm going to get rid of the RESTEasy Jackson

27
00:01:29.007 --> 00:01:34.002
'cause I don't need that.

28
00:01:34.002 --> 00:01:35.001
Now, the other thing I want to do

29
00:01:35.001 --> 00:01:38.004
is I want to go into my application.properties files,

30
00:01:38.004 --> 00:01:41.006
and I want to grab these first two properties

31
00:01:41.006 --> 00:01:46.007
from the NoSQL app, and I want to paste them

32
00:01:46.007 --> 00:01:50.005
into my new application.

33
00:01:50.005 --> 00:01:54.001
That's enough copy paste for now.

34
00:01:54.001 --> 00:01:57.003
So now in our Room service, in our default package here,

35
00:01:57.003 --> 00:02:00.004
we're going to create a new class,

36
00:02:00.004 --> 00:02:06.002
and this is going to be called RoomService.

37
00:02:06.002 --> 00:02:11.007
We're going to annotate it with ApplicationScoped.

38
00:02:11.007 --> 00:02:17.005
In this class, we will inject

39
00:02:17.005 --> 00:02:24.001
our CqlSession.

40
00:02:24.001 --> 00:02:25.002
I'm going to go ahead and put

41
00:02:25.002 --> 00:02:32.003
as a private final static String, getAllCql,

42
00:02:32.003 --> 00:02:37.007
and that will be just equal to select room_number,

43
00:02:37.007 --> 00:02:41.009
bed_info, name from lil.rooms.

44
00:02:41.009 --> 00:02:44.000
We've seen that before.

45
00:02:44.000 --> 00:02:45.005
Just going to do it as a static variable

46
00:02:45.005 --> 00:02:47.005
to make this a little bit more

47
00:02:47.005 --> 00:02:51.009
like you would do it professionally.

48
00:02:51.009 --> 00:02:54.006
I'm going to create a method

49
00:02:54.006 --> 00:03:02.000
that returns a list of rooms called getAllRooms.

50
00:03:02.000 --> 00:03:04.009
And, once again, I will do,

51
00:03:04.009 --> 00:03:08.001
basically, the same code that I've done before.

52
00:03:08.001 --> 00:03:10.005
If you don't feel like typing all of this out,

53
00:03:10.005 --> 00:03:12.008
you definitely can copy and paste most of this

54
00:03:12.008 --> 00:03:17.008
from the NoSQL example.

55
00:03:17.008 --> 00:03:22.000
And now, we will simply return our rooms object.

56
00:03:22.000 --> 00:03:24.001
So what we've done here is we've just encapsulated

57
00:03:24.001 --> 00:03:27.005
into a service all of our data access.

58
00:03:27.005 --> 00:03:33.000
Now, let's create another class.

59
00:03:33.000 --> 00:03:37.009
And this one, we will call RoomResource.

60
00:03:37.009 --> 00:03:42.001
We're going to annotate this with an @Path annotation,

61
00:03:42.001 --> 00:03:48.002
and it will respond at /rooms.

62
00:03:48.002 --> 00:03:57.003
We're going to inject an instance of our RoomService.

63
00:03:57.003 --> 00:04:00.009
And now, we're going to do an @GET method,

64
00:04:00.009 --> 00:04:04.008
and this is going to produce

65
00:04:04.008 --> 00:04:15.008
MediaType.APPLICATION_JSON.

66
00:04:15.008 --> 00:04:18.007
And we will simply return the objects.

67
00:04:18.007 --> 00:04:25.007
So we're going to return the entire list,

68
00:04:25.007 --> 00:04:33.003
and we will return that from the roomService.getAllRooms.

69
00:04:33.003 --> 00:04:34.005
And that's all there is to do,

70
00:04:34.005 --> 00:04:39.006
so let's go ahead and run our application.

71
00:04:39.006 --> 00:04:41.005
Once again, I'm going to run it with my IDE.

72
00:04:41.005 --> 00:04:46.009
You can do it through the command line using Maven.

73
00:04:46.009 --> 00:04:48.004
So our application has started up,

74
00:04:48.004 --> 00:04:51.006
so now I'm going to jump over into a terminal window,

75
00:04:51.006 --> 00:04:56.007
and I'm going to use a tool called HTTPie to query 8080.

76
00:04:56.007 --> 00:04:57.009
If you don't have that installed,

77
00:04:57.009 --> 00:05:00.000
you can definitely use curl.

78
00:05:00.000 --> 00:05:02.004
And I'm going to go again /rooms.

79
00:05:02.004 --> 00:05:05.001
And you'll see immediately that I get JSON output,

80
00:05:05.001 --> 00:05:07.004
and that JSON output was what we saw earlier

81
00:05:07.004 --> 00:05:09.004
from the database.

82
00:05:09.004 --> 00:05:10.008
And that's really all there is

83
00:05:10.008 --> 00:05:15.000
to creating a simple RESTful web service using Quarkus.

