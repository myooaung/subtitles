WEBVTT
1
00:00:00.006 --> 00:00:03.005
- [Instructor] No discussion of Quarkus would be complete

2
00:00:03.005 --> 00:00:07.000
without a discussion of the dependency injection strategy

3
00:00:07.000 --> 00:00:08.009
for the framework as a whole.

4
00:00:08.009 --> 00:00:10.009
Dependency injection is a different way

5
00:00:10.009 --> 00:00:14.002
of dealing with the constructs of control.

6
00:00:14.002 --> 00:00:17.005
Instead of you managing the state of the classes

7
00:00:17.005 --> 00:00:19.007
that are part of your application,

8
00:00:19.007 --> 00:00:22.003
you allow the container to manage them.

9
00:00:22.003 --> 00:00:25.001
Let's take a look at how this works.

10
00:00:25.001 --> 00:00:27.004
First and foremost, we start with our container.

11
00:00:27.004 --> 00:00:29.005
Now this is any web application,

12
00:00:29.005 --> 00:00:33.001
any batch job, any container whatsoever,

13
00:00:33.001 --> 00:00:35.005
as long as Quarkus is controlling it.

14
00:00:35.005 --> 00:00:38.003
Now we're going to imagine that our container

15
00:00:38.003 --> 00:00:42.004
manages several classes or beans, as they become defined,

16
00:00:42.004 --> 00:00:44.004
once they are part of Quarkus.

17
00:00:44.004 --> 00:00:48.001
Now, one of our classes needs a dependency.

18
00:00:48.001 --> 00:00:50.009
With traditional dependency management,

19
00:00:50.009 --> 00:00:54.003
you would create the object you need in your class,

20
00:00:54.003 --> 00:00:56.008
but instead we will define it

21
00:00:56.008 --> 00:00:59.008
so the container can create it.

22
00:00:59.008 --> 00:01:04.004
Then, you allow the container to inject the class

23
00:01:04.004 --> 00:01:06.004
that needs to consume it.

24
00:01:06.004 --> 00:01:09.004
So instead of us managing it within this class,

25
00:01:09.004 --> 00:01:11.006
we manage it within the container

26
00:01:11.006 --> 00:01:13.008
and inject it in as need be.

27
00:01:13.008 --> 00:01:15.003
Now it's important to note here

28
00:01:15.003 --> 00:01:17.006
that with dependency injection

29
00:01:17.006 --> 00:01:20.005
the container still keeps the reference

30
00:01:20.005 --> 00:01:25.008
to the original bean, not just the class it's injected into.

31
00:01:25.008 --> 00:01:27.008
So you'll see in this diagram here

32
00:01:27.008 --> 00:01:30.008
that we actually have the same object,

33
00:01:30.008 --> 00:01:33.007
but it's referenced both from within the container

34
00:01:33.007 --> 00:01:37.006
as well as the class or bean that it was injected into.

35
00:01:37.006 --> 00:01:40.007
And this way, if that ever goes out of scope,

36
00:01:40.007 --> 00:01:44.001
the container still maintains a reference to it

37
00:01:44.001 --> 00:01:46.002
no matter what the situation.

38
00:01:46.002 --> 00:01:51.001
In Quarkus, dependency injection is a core competency

39
00:01:51.001 --> 00:01:55.000
of the framework, and you do need to fully understand it

40
00:01:55.000 --> 00:01:58.003
and learn how to leverage it within the framework

41
00:01:58.003 --> 00:02:00.000
to get the most out of it.

42
00:02:00.000 --> 00:02:02.001
In Quarkus, this is called

43
00:02:02.001 --> 00:02:06.007
contexts and dependency injection, or CDI.

44
00:02:06.007 --> 00:02:09.008
With CDI, the application beans are managed

45
00:02:09.008 --> 00:02:11.007
by the container itself.

46
00:02:11.007 --> 00:02:14.000
Defining new application beans

47
00:02:14.000 --> 00:02:17.004
is as simple as an annotation.

48
00:02:17.004 --> 00:02:21.000
Here's an example of making a bean ApplicationScoped,

49
00:02:21.000 --> 00:02:24.004
indicating it is a single instance bean

50
00:02:24.004 --> 00:02:27.000
available to the client proxy.

51
00:02:27.000 --> 00:02:29.003
Now, there are other examples like Singleton

52
00:02:29.003 --> 00:02:32.003
and RequestScoped, and many other ones.

53
00:02:32.003 --> 00:02:35.005
Scoping of beans can become a complex topic,

54
00:02:35.005 --> 00:02:37.002
and I would suggest you spend some time

55
00:02:37.002 --> 00:02:40.002
looking into these within the documentation.

56
00:02:40.002 --> 00:02:43.000
Now, once a bean is available to the container,

57
00:02:43.000 --> 00:02:46.005
it needs to be injected into your bean.

58
00:02:46.005 --> 00:02:49.006
Now, I'm a fan of constructor level injection

59
00:02:49.006 --> 00:02:54.000
and continue to use that with Quarkus as I did with Spring,

60
00:02:54.000 --> 00:02:56.007
but you have other options with Quarkus

61
00:02:56.007 --> 00:03:00.004
like field-level injection and center-based injection,

62
00:03:00.004 --> 00:03:03.009
just like you do with other frameworks.

63
00:03:03.009 --> 00:03:06.000
Now, I want to spend a moment here to show you

64
00:03:06.000 --> 00:03:08.001
some basic injection,

65
00:03:08.001 --> 00:03:11.004
though not a very complicated situation.

66
00:03:11.004 --> 00:03:14.009
So let's jump into our code from our previous example

67
00:03:14.009 --> 00:03:18.008
and into our package, and let's create a new class.

68
00:03:18.008 --> 00:03:25.000
And this class we're going to call GreetingConfig.

69
00:03:25.000 --> 00:03:28.003
Now our GreetingConfig

70
00:03:28.003 --> 00:03:32.003
is going to maintain a single instance value,

71
00:03:32.003 --> 00:03:39.008
and it will be a type string called recipient.

72
00:03:39.008 --> 00:03:47.004
And for right now, we're just going to make it static.

73
00:03:47.004 --> 00:03:50.009
And simply saying LinkedIn Learning Students.

74
00:03:50.009 --> 00:03:52.008
Now, I'm going to use my IDE here

75
00:03:52.008 --> 00:03:56.003
to generate a getter and setter on this.

76
00:03:56.003 --> 00:03:59.006
And now we will take this value

77
00:03:59.006 --> 00:04:03.000
and make this ApplicationScoped.

78
00:04:03.000 --> 00:04:05.004
So now that this is ApplicationScoped,

79
00:04:05.004 --> 00:04:08.002
we can go back into our greeting class,

80
00:04:08.002 --> 00:04:17.009
we can create an instance of our GreetingConfig.

81
00:04:17.009 --> 00:04:23.008
Now, let's go ahead and create a constructor,

82
00:04:23.008 --> 00:04:34.008
sending in our GreetingConfig,

83
00:04:34.008 --> 00:04:39.003
and we will do an @Inject on this.

84
00:04:39.003 --> 00:04:42.005
So what this is saying is, is from the context,

85
00:04:42.005 --> 00:04:45.000
when you create this bean,

86
00:04:45.000 --> 00:04:47.007
make sure that you inject a GreetingConfig

87
00:04:47.007 --> 00:04:51.003
that is maintained in the Quarkus context.

88
00:04:51.003 --> 00:04:56.006
And now finally, we will replace the world here

89
00:04:56.006 --> 00:05:02.001
with config.getRecipient.

90
00:05:02.001 --> 00:05:04.006
Okay, now I'm going to run my application,

91
00:05:04.006 --> 00:05:07.007
and I'm just going to use my IDE to run it from here on out,

92
00:05:07.007 --> 00:05:09.003
just because it's easier for me.

93
00:05:09.003 --> 00:05:12.002
Obviously, you can set up a run config in your IDE.

94
00:05:12.002 --> 00:05:15.006
You can run it from your command line.

95
00:05:15.006 --> 00:05:17.006
You can run this multiple ways,

96
00:05:17.006 --> 00:05:19.006
but for me and for these purposes,

97
00:05:19.006 --> 00:05:22.008
I'm just going to run it directly from within my IDE.

98
00:05:22.008 --> 00:05:26.005
So now that it's up, let's jump to a terminal window,

99
00:05:26.005 --> 00:05:33.008
and let's simply do an http 8080/greeting,

100
00:05:33.008 --> 00:05:35.007
and you'll see that I now return back

101
00:05:35.007 --> 00:05:37.009
Hello LinkedIn Learning Students.

102
00:05:37.009 --> 00:05:39.004
Now that HTTP command,

103
00:05:39.004 --> 00:05:42.008
it's just a utility I run called HTTPie.

104
00:05:42.008 --> 00:05:44.000
You could have used cURL here.

105
00:05:44.000 --> 00:05:46.000
You could have gone to the web browser.

106
00:05:46.000 --> 00:05:48.007
Again, multiple ways to execute

107
00:05:48.007 --> 00:05:52.005
a simple local host web request and slash greeting.

108
00:05:52.005 --> 00:05:54.002
This is the method that I chose here,

109
00:05:54.002 --> 00:05:57.008
using this tool HTTPie as it's called,

110
00:05:57.008 --> 00:06:00.002
which is just a utility that I run.

111
00:06:00.002 --> 00:06:02.002
But again, web browser's fine, cURL's fine,

112
00:06:02.002 --> 00:06:04.009
however you want to execute that command.

113
00:06:04.009 --> 00:06:07.009
Again, it's your local host 8080/greeting,

114
00:06:07.009 --> 00:06:10.007
and just ensure that we're now getting that data.

115
00:06:10.007 --> 00:06:13.001
So let's step back for just one moment

116
00:06:13.001 --> 00:06:14.005
and take a look at what we did.

117
00:06:14.005 --> 00:06:18.006
So we injected into our greeting class,

118
00:06:18.006 --> 00:06:22.005
which is the root web application that we are running,

119
00:06:22.005 --> 00:06:25.002
we injected an instance of GreetingConfig.

120
00:06:25.002 --> 00:06:28.007
And GreetingConfig was just a statically configured class.

121
00:06:28.007 --> 00:06:32.003
We then pulled data out of that injected resource

122
00:06:32.003 --> 00:06:35.002
into our get call so that we can now make it

123
00:06:35.002 --> 00:06:37.002
a little bit more dynamic.

124
00:06:37.002 --> 00:06:38.007
And again, we can change that config.

125
00:06:38.007 --> 00:06:40.009
We can do this multiple ways,

126
00:06:40.009 --> 00:06:42.009
including what we're going to jump into next,

127
00:06:42.009 --> 00:06:45.004
which is actually configuring the value

128
00:06:45.004 --> 00:06:48.000
that gets injected in at startup.

