WEBVTT
1
00:00:00.001 --> 00:00:06.006
(upbeat music)

2
00:00:06.006 --> 00:00:08.002
- [Instructor] And now, here's my solution

3
00:00:08.002 --> 00:00:10.006
to the challenge exercise.

4
00:00:10.006 --> 00:00:13.005
So I solved this problem with two class files

5
00:00:13.005 --> 00:00:16.004
and some changes to the application.properties

6
00:00:16.004 --> 00:00:18.002
of a brand new application.

7
00:00:18.002 --> 00:00:21.002
So I went ahead and created a FizzBuzz application,

8
00:00:21.002 --> 00:00:24.004
and in the CommandRunner class that I created,

9
00:00:24.004 --> 00:00:28.004
I annotated it with QuarkusMain on line 10.

10
00:00:28.004 --> 00:00:32.008
You will see that I implement QuarkusApplication on line 11.

11
00:00:32.008 --> 00:00:36.004
I also have a private instance of FizzBuzz

12
00:00:36.004 --> 00:00:39.008
and a private static final Logger.

13
00:00:39.008 --> 00:00:44.004
Now, I inject into the constructor an instance of FizzBuzz,

14
00:00:44.004 --> 00:00:47.006
and then I'm going to use that in our Run method

15
00:00:47.006 --> 00:00:50.008
along with a LOG.debug statement

16
00:00:50.008 --> 00:00:52.005
telling us that we're starting,

17
00:00:52.005 --> 00:00:55.007
and a LOG.debug telling us that we're ending.

18
00:00:55.007 --> 00:00:59.005
That way, we complete those parts of the requirements.

19
00:00:59.005 --> 00:01:02.009
Now, in the FizzBuzz execution method,

20
00:01:02.009 --> 00:01:05.006
you'll see that I have this ApplicationScoped.

21
00:01:05.006 --> 00:01:08.009
That way, I can inject it in on line seven.

22
00:01:08.009 --> 00:01:12.005
And then, on line 10, I create a ConfigProperty

23
00:01:12.005 --> 00:01:14.001
setting a defaultValue,

24
00:01:14.001 --> 00:01:16.005
which I did not tell you that you needed to do,

25
00:01:16.005 --> 00:01:20.001
but traditionally FizzBuzz is done with numbers up to 100,

26
00:01:20.001 --> 00:01:23.006
so I thought I'd go ahead and set that as the default value.

27
00:01:23.006 --> 00:01:27.000
Then, I'm looking for an application.maxNumber,

28
00:01:27.000 --> 00:01:29.008
which I'm then converting into an int.

29
00:01:29.008 --> 00:01:32.002
Now, obviously, if you can't convert that into an int,

30
00:01:32.002 --> 00:01:33.005
it's going to cause problems,

31
00:01:33.005 --> 00:01:36.001
so make sure that you have a number there.

32
00:01:36.001 --> 00:01:39.006
Now, on line 13, I actually implement my execute method,

33
00:01:39.006 --> 00:01:41.003
and it's a very simple loop.

34
00:01:41.003 --> 00:01:45.006
For i equals zero, i less than or equal to maxNumber,

35
00:01:45.006 --> 00:01:47.003
because I'm starting with one instead of zero,

36
00:01:47.003 --> 00:01:50.009
so that way I actually get the full number of elements,

37
00:01:50.009 --> 00:01:53.005
and then, of course, i++.

38
00:01:53.005 --> 00:01:56.006
I'm going to set the result string equal to empty.

39
00:01:56.006 --> 00:01:58.008
If I am divisible by three,

40
00:01:58.008 --> 00:02:02.002
therefore I can do a mod of three equals zero,

41
00:02:02.002 --> 00:02:04.009
I'm going to take and write fizz.

42
00:02:04.009 --> 00:02:07.009
If I then have a mod of five equals zero,

43
00:02:07.009 --> 00:02:11.004
I'm going to append buzz to whatever is there.

44
00:02:11.004 --> 00:02:13.006
So if I'm divisible by three, I will get fizz.

45
00:02:13.006 --> 00:02:17.003
If I'm divisible by five, but not three, I will get buzz.

46
00:02:17.003 --> 00:02:20.005
If I'm divisible by both, I will get fizzbuzz.

47
00:02:20.005 --> 00:02:21.007
And if it's neither,

48
00:02:21.007 --> 00:02:26.001
so if that string is still empty, I will print i

49
00:02:26.001 --> 00:02:28.001
because I'm now looking at line 18,

50
00:02:28.001 --> 00:02:32.009
saying if the result is not empty, so not result isEmpty,

51
00:02:32.009 --> 00:02:35.003
print the result, otherwise print i.

52
00:02:35.003 --> 00:02:37.007
Now, let's jump over here to the application.properties.

53
00:02:37.007 --> 00:02:40.001
I made a couple of changes for you.

54
00:02:40.001 --> 00:02:41.004
I set the maxNumber here.

55
00:02:41.004 --> 00:02:43.009
In my case, I'm going to execute 150.

56
00:02:43.009 --> 00:02:47.009
I also wanted to make sure to show you how to set log levels

57
00:02:47.009 --> 00:02:50.007
for different layers of your application.

58
00:02:50.007 --> 00:02:55.005
So here, in a category of com.frankmoley.lil.lq,

59
00:02:55.005 --> 00:02:56.007
I want it to be DEBUG.

60
00:02:56.007 --> 00:03:01.000
So now, when I run this application,

61
00:03:01.000 --> 00:03:03.002
expand this a little bit here.

62
00:03:03.002 --> 00:03:05.004
So what I want you to take note at here

63
00:03:05.004 --> 00:03:08.003
when I run my application, we'll start at the top,

64
00:03:08.003 --> 00:03:11.006
you'll see that I have a debug statement in the log

65
00:03:11.006 --> 00:03:14.000
because it is in my class path,

66
00:03:14.000 --> 00:03:16.006
my package that I have defined

67
00:03:16.006 --> 00:03:18.007
that I want to run debug messages.

68
00:03:18.007 --> 00:03:21.000
So now, you can see that my application starts,

69
00:03:21.000 --> 00:03:24.004
one, two, fizz, four, buzz,

70
00:03:24.004 --> 00:03:27.001
fizz, seven, eight, fizz,

71
00:03:27.001 --> 00:03:29.008
buzz, 11, down the list.

72
00:03:29.008 --> 00:03:32.001
You'll see the 15, which is the first one that is both,

73
00:03:32.001 --> 00:03:33.009
I get fizzbuzz.

74
00:03:33.009 --> 00:03:36.002
And we're going to run all the way through 150,

75
00:03:36.002 --> 00:03:39.004
which is divisible by both, so fizzbuzz.

76
00:03:39.004 --> 00:03:41.007
And then, you'll see that I get ending application

77
00:03:41.007 --> 00:03:45.005
again at debug level because that application.properties.

78
00:03:45.005 --> 00:03:48.007
So that's how I solved FizzBuzz using Quarkus

79
00:03:48.007 --> 00:03:52.008
with my injection, my logging, and my config properties

80
00:03:52.008 --> 00:03:54.009
to give you a little bit of all of that.

81
00:03:54.009 --> 00:03:58.000
I hope your example looks relatively similar,

82
00:03:58.000 --> 00:04:01.000
and you've gotten to learn a little bit of the details

83
00:04:01.000 --> 00:04:03.004
of how Quarkus works, basically,

84
00:04:03.004 --> 00:04:06.000
by running through this challenge exercise.

