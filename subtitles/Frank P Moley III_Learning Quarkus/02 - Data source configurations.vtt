WEBVTT
1
00:00:00.006 --> 00:00:03.004
- [Instructor] Configuring datasources for use in Quarkus

2
00:00:03.004 --> 00:00:05.007
is actually very easy.

3
00:00:05.007 --> 00:00:07.001
It all follows a similar pattern,

4
00:00:07.001 --> 00:00:09.005
and it's straightforward from there.

5
00:00:09.005 --> 00:00:12.009
Now there's a few prerequisites that you have to have set up

6
00:00:12.009 --> 00:00:16.005
in order to do the configuration of your database.

7
00:00:16.005 --> 00:00:17.005
First and foremost,

8
00:00:17.005 --> 00:00:20.007
you need to have Agroal and the JDBC extension,

9
00:00:20.007 --> 00:00:23.007
both of which are required on the class path

10
00:00:23.007 --> 00:00:26.004
through the POM file or through your Gradle command

11
00:00:26.004 --> 00:00:29.005
to make sure that you have the needed dependencies.

12
00:00:29.005 --> 00:00:32.000
Now, if you are doing reactive programming,

13
00:00:32.000 --> 00:00:34.004
you're going to want to use Vert.x.

14
00:00:34.004 --> 00:00:35.009
Now, whenever you set up a connection,

15
00:00:35.009 --> 00:00:37.001
there's going to be details

16
00:00:37.001 --> 00:00:39.005
that you are going to need to input.

17
00:00:39.005 --> 00:00:42.000
So those details are something you should have

18
00:00:42.000 --> 00:00:44.001
when you get started.

19
00:00:44.001 --> 00:00:47.004
Now, when we're configuring all of the properties,

20
00:00:47.004 --> 00:00:52.004
really the driver, what makes things click is db-kind,

21
00:00:52.004 --> 00:00:56.001
and specifically it's quarkus.datasource.db-kind

22
00:00:56.001 --> 00:00:58.000
is the property.

23
00:00:58.000 --> 00:00:59.003
And this is where you tell it

24
00:00:59.003 --> 00:01:02.002
that it's Postgres or MySQL

25
00:01:02.002 --> 00:01:05.003
so that it knows how to set up the proper driver.

26
00:01:05.003 --> 00:01:08.005
Now, you may also add things like username and password,

27
00:01:08.005 --> 00:01:11.005
so quarkus.datasource.username,

28
00:01:11.005 --> 00:01:14.002
quarkus.datasource.password.

29
00:01:14.002 --> 00:01:18.008
Jdbc.url, you need to specify the URL to your database.

30
00:01:18.008 --> 00:01:22.000
So along the same lines as db-kind,

31
00:01:22.000 --> 00:01:25.004
you're going to use quarkus.datasource.jdbc.url

32
00:01:25.004 --> 00:01:29.009
and point it to a valid URL for the JDBC operations.

33
00:01:29.009 --> 00:01:32.009
And then, the max-size property, so jdbc.max-size,

34
00:01:32.009 --> 00:01:35.009
and that's the max size of your connection pool

35
00:01:35.009 --> 00:01:39.003
that you wish to use with your database.

36
00:01:39.003 --> 00:01:41.007
Now, consuming the datasource

37
00:01:41.007 --> 00:01:45.006
is actually very straightforward, and in the next video,

38
00:01:45.006 --> 00:01:48.002
we're going to build on this configuration

39
00:01:48.002 --> 00:01:51.009
and actually configure a database and connect to it.

40
00:01:51.009 --> 00:01:56.002
But let's talk about what it actually entails consuming it.

41
00:01:56.002 --> 00:02:00.003
So you can get a handle to an AgroalDataSource,

42
00:02:00.003 --> 00:02:02.000
and that's just an instance variable

43
00:02:02.000 --> 00:02:05.001
that you would inject into your application code.

44
00:02:05.001 --> 00:02:07.009
And this is, of course, injected by CDI,

45
00:02:07.009 --> 00:02:09.001
so you don't need to do anything

46
00:02:09.001 --> 00:02:12.001
other than the @Inject annotation.

47
00:02:12.001 --> 00:02:16.009
Now, AgroalDataSource is a subtype of java.sql.DataSource,

48
00:02:16.009 --> 00:02:19.008
so usually what I do is actually inject

49
00:02:19.008 --> 00:02:22.000
a java.sql.DataSource

50
00:02:22.000 --> 00:02:25.004
because very seldom do I need the benefits of the Agroal,

51
00:02:25.004 --> 00:02:27.000
the extension points.

52
00:02:27.000 --> 00:02:29.003
Most of my code is very generic,

53
00:02:29.003 --> 00:02:33.007
so I'm just going to use the java.sql.DataSource going forward.

54
00:02:33.007 --> 00:02:35.006
There are times in an application

55
00:02:35.006 --> 00:02:39.004
where you may want to run multiple datasources.

56
00:02:39.004 --> 00:02:43.005
Now, this is less common in today's microservices world,

57
00:02:43.005 --> 00:02:45.009
where we would handle these types of scenarios

58
00:02:45.009 --> 00:02:48.000
across web service boundaries.

59
00:02:48.000 --> 00:02:50.008
But if you do need to build a component

60
00:02:50.008 --> 00:02:53.004
that has multiple datasources at play,

61
00:02:53.004 --> 00:02:56.006
please note that there is a way to do that with Quarkus,

62
00:02:56.006 --> 00:03:00.002
and that's through the concept of named datasources.

63
00:03:00.002 --> 00:03:04.001
So if you remember when we talked about configurations,

64
00:03:04.001 --> 00:03:09.001
you can only have a single bean of a single type predefined

65
00:03:09.001 --> 00:03:12.003
and have it injected correctly with a caveat,

66
00:03:12.003 --> 00:03:15.001
and that is these named datasources.

67
00:03:15.001 --> 00:03:19.003
So this won't break injection if built properly,

68
00:03:19.003 --> 00:03:22.002
and the way you do it is you do quarkus.datasource,

69
00:03:22.002 --> 00:03:25.008
and then you provide it some name, so .foo,

70
00:03:25.008 --> 00:03:28.006
and then you continue the configuration.

71
00:03:28.006 --> 00:03:32.006
So you can have foo.db-kind as Postgres

72
00:03:32.006 --> 00:03:38.002
and blah.db-kind equals MySQL for instance.

73
00:03:38.002 --> 00:03:41.004
And then, when you inject the datasource,

74
00:03:41.004 --> 00:03:45.008
you put a name of that datasource in quotes

75
00:03:45.008 --> 00:03:46.009
with the injection.

76
00:03:46.009 --> 00:03:50.000
And this allows you to run multiple datasources

77
00:03:50.000 --> 00:03:52.003
within a given application.

78
00:03:52.003 --> 00:03:54.005
Again, not the most common thing today,

79
00:03:54.005 --> 00:03:57.006
but it is possible and I did want to talk about it.

80
00:03:57.006 --> 00:03:59.004
So now that we have done the high level

81
00:03:59.004 --> 00:04:01.008
of connecting to a database,

82
00:04:01.008 --> 00:04:04.000
now it's time to jump into our code

83
00:04:04.000 --> 00:04:08.000
and actually put some real meat behind what we just saw.

