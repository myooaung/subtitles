WEBVTT
1
00:00:00.007 --> 00:00:02.000
- [Instructor] So now, we're going to step away

2
00:00:02.000 --> 00:00:04.000
from the relational databases

3
00:00:04.000 --> 00:00:07.004
and take a look at a NoSQL database with Quarkus

4
00:00:07.004 --> 00:00:09.007
using Apache Cassandra.

5
00:00:09.007 --> 00:00:12.008
Now, I'm going to be using a distribution from DataStax

6
00:00:12.008 --> 00:00:17.003
that is an open source distribution of Apache Cassandra.

7
00:00:17.003 --> 00:00:19.007
Now, in the exercise files for this course

8
00:00:19.007 --> 00:00:21.005
in the bin directory,

9
00:00:21.005 --> 00:00:24.004
you'll notice that I've provided several files.

10
00:00:24.004 --> 00:00:28.001
For this video, we're going to use the start_cassandra script

11
00:00:28.001 --> 00:00:32.002
to actually start an instance of Cassandra using Docker.

12
00:00:32.002 --> 00:00:33.006
Now, if you don't want to use Docker,

13
00:00:33.006 --> 00:00:36.008
you're free to install Cassandra locally,

14
00:00:36.008 --> 00:00:38.006
but do know that my script is going

15
00:00:38.006 --> 00:00:44.001
to execute the schema.cql and data.cql scripts

16
00:00:44.001 --> 00:00:46.002
to populate the database.

17
00:00:46.002 --> 00:00:51.009
One thing to note here as we run the start_cassandra script,

18
00:00:51.009 --> 00:00:53.007
that I've got a pretty big pause in there

19
00:00:53.007 --> 00:00:57.003
to allow the database to come up before these execute.

20
00:00:57.003 --> 00:01:00.005
So be patient. It's going to take at least two minutes.

21
00:01:00.005 --> 00:01:06.000
And if you find that cqlsh can not connect to your database,

22
00:01:06.000 --> 00:01:07.006
then you need to go into that script

23
00:01:07.006 --> 00:01:09.007
and increase the timeout

24
00:01:09.007 --> 00:01:13.005
so that instead of 200, maybe it's 300 or 400.

25
00:01:13.005 --> 00:01:17.006
That way you have plenty of time to allow it to start up

26
00:01:17.006 --> 00:01:19.006
before those scripts execute.

27
00:01:19.006 --> 00:01:21.009
So now that we've got Cassandra up and running

28
00:01:21.009 --> 00:01:24.002
and we've got data populated,

29
00:01:24.002 --> 00:01:29.003
let's jump into our IDE and let's start a new application.

30
00:01:29.003 --> 00:01:32.003
Now, once again, I'm going to use a plugin in my IDE.

31
00:01:32.003 --> 00:01:35.005
You are free to do this through the website

32
00:01:35.005 --> 00:01:38.004
or through the Maven plugin itself.

33
00:01:38.004 --> 00:01:40.000
However you want to start the application,

34
00:01:40.000 --> 00:01:45.002
you've got several options, but I'm just going to use my IDE

35
00:01:45.002 --> 00:01:49.008
and create a new module.

36
00:01:49.008 --> 00:01:54.007
Allow it to be Quarkus.

37
00:01:54.007 --> 00:01:58.008
Put in my group.

38
00:01:58.008 --> 00:02:00.003
For this artifact name,

39
00:02:00.003 --> 00:02:07.006
I'm going to simply call this cmd-app-nosql.

40
00:02:07.006 --> 00:02:10.004
Now, we don't need to select any web components,

41
00:02:10.004 --> 00:02:16.001
but we do need to go into the data and select,

42
00:02:16.001 --> 00:02:20.007
DataStax Apache Cassandra client.

43
00:02:20.007 --> 00:02:26.005
Hit Next. We'll allow that to finish.

44
00:02:26.005 --> 00:02:27.009
Now, within this application,

45
00:02:27.009 --> 00:02:32.001
let's go to src, main resources.

46
00:02:32.001 --> 00:02:34.009
Open up the application properties file.

47
00:02:34.009 --> 00:02:38.001
We're going to put it in a couple of values in here.

48
00:02:38.001 --> 00:02:44.001
So quarkus.cassandra.contact-points,

49
00:02:44.001 --> 00:02:46.002
and we're running this on localhost,

50
00:02:46.002 --> 00:03:00.007
so we'll use the loopback, 9042.

51
00:03:00.007 --> 00:03:07.002
And the local data center's going to be dc1.

52
00:03:07.002 --> 00:03:08.002
So now, let's go in

53
00:03:08.002 --> 00:03:14.008
and let's delete the example resource that we get.

54
00:03:14.008 --> 00:03:18.008
We will create a new Java class.

55
00:03:18.008 --> 00:03:21.004
We're going to call this Runner.

56
00:03:21.004 --> 00:03:22.005
The first thing that we need to do

57
00:03:22.005 --> 00:03:26.004
is we need to annotate this with QuarkusMain,

58
00:03:26.004 --> 00:03:33.007
and we're going to implement Quarkus application.

59
00:03:33.007 --> 00:03:37.003
Go ahead and generate that method.

60
00:03:37.003 --> 00:03:38.004
Now, before we code in here,

61
00:03:38.004 --> 00:03:41.003
we need to have an object that represents

62
00:03:41.003 --> 00:03:43.004
what we're going to build.

63
00:03:43.004 --> 00:03:47.007
So let's create a new class before we populate this one.

64
00:03:47.007 --> 00:03:51.006
We're going to simply call this one Room.

65
00:03:51.006 --> 00:03:54.002
Now, very similar schema was used

66
00:03:54.002 --> 00:03:56.006
between the SQL and the NoSQL,

67
00:03:56.006 --> 00:03:59.002
but in this case, it is just a little bit different.

68
00:03:59.002 --> 00:04:07.003
So let's go ahead and do a private String of roomNumber,

69
00:04:07.003 --> 00:04:13.000
private String of bedInfo,

70
00:04:13.000 --> 00:04:15.000
and a private String of name.

71
00:04:15.000 --> 00:04:18.007
I'm going to go ahead and generate a constructor

72
00:04:18.007 --> 00:04:21.009
using all the elements,

73
00:04:21.009 --> 00:04:28.008
a constructor using none of the elements.

74
00:04:28.008 --> 00:04:35.002
Getters and setters.

75
00:04:35.002 --> 00:04:40.008
And then, finally, I'm going to do a toString.

76
00:04:40.008 --> 00:04:43.005
That's all we need to do in the Room class.

77
00:04:43.005 --> 00:04:48.009
So now, back to our Runner.

78
00:04:48.009 --> 00:04:56.003
So I want to inject

79
00:04:56.003 --> 00:05:00.004
a QuarkusCqlSession,

80
00:05:00.004 --> 00:05:03.000
and we'll just simply call it cqlSession.

81
00:05:03.000 --> 00:05:05.009
Now, I'm going to use the Java Driver in a very raw fashion.

82
00:05:05.009 --> 00:05:09.004
There are more advanced ways to use the Java Driver,

83
00:05:09.004 --> 00:05:11.002
and I'm just trying to give you a taste

84
00:05:11.002 --> 00:05:13.005
of what this looks like with respect

85
00:05:13.005 --> 00:05:14.009
to the way RDS implements.

86
00:05:14.009 --> 00:05:17.005
So I'm going to do a raw implementation.

87
00:05:17.005 --> 00:05:19.003
Again, there's more than one way to do this,

88
00:05:19.003 --> 00:05:22.003
and the guides have very good documentation

89
00:05:22.003 --> 00:05:27.002
on both the DataStax site as well as on the Quarkus site.

90
00:05:27.002 --> 00:05:41.008
Let's go ahead and add a Logger.

91
00:05:41.008 --> 00:05:43.009
Now, down in our method here,

92
00:05:43.009 --> 00:05:48.007
we're going to do a LOG.debug,

93
00:05:48.007 --> 00:05:52.006
like we've done before, starting application.

94
00:05:52.006 --> 00:06:08.001
And now, we're going to create a cql string.

95
00:06:08.001 --> 00:06:10.009
So select roomNumber, bedInfo, and name

96
00:06:10.009 --> 00:06:14.003
from the LinkedIn Learning lil namespace

97
00:06:14.003 --> 00:06:18.002
and the rooms table.

98
00:06:18.002 --> 00:06:28.009
And I'm going to create a list of rooms.

99
00:06:28.009 --> 00:06:34.002
Go ahead and import those.

100
00:06:34.002 --> 00:06:39.007
I'm going to create a ResultSet.

101
00:06:39.007 --> 00:06:43.008
I go into cqlSession.execute,

102
00:06:43.008 --> 00:07:01.008
and I'm going to pass in my cql.

103
00:07:01.008 --> 00:07:03.008
Did not import the right ResultSet.

104
00:07:03.008 --> 00:07:06.005
I got the one from java.sql.

105
00:07:06.005 --> 00:07:11.005
So I'll remove that import and grab the right one.

106
00:07:11.005 --> 00:07:13.005
All right, so now I'm going to iterate over the rows

107
00:07:13.005 --> 00:07:15.000
of the ResultSet,

108
00:07:15.000 --> 00:07:21.004
and I'm simply going to do a rooms.add new Room,

109
00:07:21.004 --> 00:07:25.002
and we're going to pass it in

110
00:07:25.002 --> 00:07:32.003
as row.getString room_number,

111
00:07:32.003 --> 00:07:51.008
and continue doing this for the rest of the elements.

112
00:07:51.008 --> 00:07:53.005
And now, after the loop,

113
00:07:53.005 --> 00:07:57.004
I will simply do a rooms.forEach,

114
00:07:57.004 --> 00:08:02.003
and I'll do a System.out::println,

115
00:08:02.003 --> 00:08:08.009
and then do my LOG.debug.

116
00:08:08.009 --> 00:08:11.006
All right, that's really all there is to it.

117
00:08:11.006 --> 00:08:14.009
So let's go ahead and run this application.

118
00:08:14.009 --> 00:08:17.004
And, again, you can do the Maven compile

119
00:08:17.004 --> 00:08:19.004
executing Quarkus plugin.

120
00:08:19.004 --> 00:08:21.001
I'm going to run it through my IDE.

121
00:08:21.001 --> 00:08:24.005
There's many ways to do that.

122
00:08:24.005 --> 00:08:27.008
We'll allow it to run, and you'll see we pulled

123
00:08:27.008 --> 00:08:29.008
all of the data out of the database.

124
00:08:29.008 --> 00:08:32.004
So we're using basically the same technology

125
00:08:32.004 --> 00:08:35.006
we'd use for JDBC, only we're using a NoSQL,

126
00:08:35.006 --> 00:08:37.000
but we're still able to pull data

127
00:08:37.000 --> 00:08:39.005
from the database using this technology.

128
00:08:39.005 --> 00:08:41.002
Again, check out the guides.

129
00:08:41.002 --> 00:08:42.008
You'll see a lot more information,

130
00:08:42.008 --> 00:08:45.004
and there's a lot better ways to do this,

131
00:08:45.004 --> 00:08:46.008
and there's probably a lot better ways

132
00:08:46.008 --> 00:08:48.007
to model the data as well.

133
00:08:48.007 --> 00:08:51.000
That wasn't really the focus of this course.

