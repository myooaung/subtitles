WEBVTT
1
00:00:00.007 --> 00:00:01.007
- [Instructor] Now it's time to jump in

2
00:00:01.007 --> 00:00:04.009
for a little bit more depth with the Quarkus framework,

3
00:00:04.009 --> 00:00:07.001
and we're going to take a look at data access

4
00:00:07.001 --> 00:00:09.003
within the framework itself.

5
00:00:09.003 --> 00:00:12.002
The data access in Quarkus is based entirely

6
00:00:12.002 --> 00:00:14.006
on the concept of a data source.

7
00:00:14.006 --> 00:00:18.003
Which if you've ever done Java development in the past,

8
00:00:18.003 --> 00:00:22.001
the data source construct should be relatively familiar.

9
00:00:22.001 --> 00:00:25.000
The primary purpose of configuring Quarkus

10
00:00:25.000 --> 00:00:26.008
is to wire the data source.

11
00:00:26.008 --> 00:00:29.009
Again, the data source being the central construct,

12
00:00:29.009 --> 00:00:33.004
regardless of whether you're using ORM or JDBC,

13
00:00:33.004 --> 00:00:35.008
it's the data source that really matters.

14
00:00:35.008 --> 00:00:38.006
All of the configuration for that data source

15
00:00:38.006 --> 00:00:42.000
is managed by Quarkus through the common patterns

16
00:00:42.000 --> 00:00:43.004
that we've seen before,

17
00:00:43.004 --> 00:00:46.002
and that is through the application dot properties file.

18
00:00:46.002 --> 00:00:48.007
There are specific properties that apply to one

19
00:00:48.007 --> 00:00:52.006
or more databases, being run against your application.

20
00:00:52.006 --> 00:00:56.000
Each of them being configured as a data source.

21
00:00:56.000 --> 00:00:58.007
Now, other frameworks, like Hibernate,

22
00:00:58.007 --> 00:01:02.004
are actually used for the data access itself.

23
00:01:02.004 --> 00:01:05.000
In fact, even if you don't want to use a framework,

24
00:01:05.000 --> 00:01:09.002
the JDBC framework by itself that is contained within Java,

25
00:01:09.002 --> 00:01:10.009
is technically a framework.

26
00:01:10.009 --> 00:01:15.005
So, other tools are actually used to access the data.

27
00:01:15.005 --> 00:01:18.001
All that Quarkus is really concerned about,

28
00:01:18.001 --> 00:01:21.007
from it's core construct, is the data source.

29
00:01:21.007 --> 00:01:25.004
And this applies whether you're doing reactive, RDS,

30
00:01:25.004 --> 00:01:28.009
or NoSQL, again, all of them have the same construct

31
00:01:28.009 --> 00:01:33.006
of using a data source, or a connection to a database,

32
00:01:33.006 --> 00:01:37.008
that is really what we're trying to achieve with Quarkus.

33
00:01:37.008 --> 00:01:41.007
Now, if you are doing traditional database development

34
00:01:41.007 --> 00:01:44.004
against a relational data store,

35
00:01:44.004 --> 00:01:46.006
you're going to need an Agroal extension,

36
00:01:46.006 --> 00:01:51.007
and this is what provides you with the data source itself,

37
00:01:51.007 --> 00:01:55.007
and more specifically it's what does the connection handling

38
00:01:55.007 --> 00:01:58.004
to the data source, the data storage itself

39
00:01:58.004 --> 00:02:02.001
still comes from Java through the Java dot SQL.

40
00:02:02.001 --> 00:02:03.007
Now this is where you're getting

41
00:02:03.007 --> 00:02:05.002
all of your connection pooling,

42
00:02:05.002 --> 00:02:08.004
and this is the preferred mechanism of doing that.

43
00:02:08.004 --> 00:02:12.004
When we write applications, we want to pool those connections

44
00:02:12.004 --> 00:02:15.002
so that we don't waste tearing down

45
00:02:15.002 --> 00:02:17.005
and setting them back up, over and over again,

46
00:02:17.005 --> 00:02:22.005
we want to reuse those pools to maintain a live connection.

47
00:02:22.005 --> 00:02:26.005
Now, this extension, along with a core driver

48
00:02:26.005 --> 00:02:30.009
is what is required to do data access with Quarkus.

49
00:02:30.009 --> 00:02:35.004
And that driver of course relates to the database of choice.

50
00:02:35.004 --> 00:02:37.004
So, if you're using PostgreS,

51
00:02:37.004 --> 00:02:40.000
you're going to have a driver for that, versus MySQL,

52
00:02:40.000 --> 00:02:43.002
just like you would with Java, or any framework,

53
00:02:43.002 --> 00:02:45.006
regardless of the language.

54
00:02:45.006 --> 00:02:49.002
Now, if you choose to use Hibernate as an ORM,

55
00:02:49.002 --> 00:02:51.006
you're going to get Agroal with it,

56
00:02:51.006 --> 00:02:55.007
because it comes along as a transitive dependency.

57
00:02:55.007 --> 00:02:58.009
I still believe it's worth noting that you should go ahead

58
00:02:58.009 --> 00:03:03.004
and select it, because you may not use Hibernate day one,

59
00:03:03.004 --> 00:03:06.006
but you will use connection pooling day one,

60
00:03:06.006 --> 00:03:10.009
and then you can always add Hibernate on after the fact.

61
00:03:10.009 --> 00:03:13.000
Now there's a couple layers here

62
00:03:13.000 --> 00:03:15.004
when you're doing data access in Quarkus.

63
00:03:15.004 --> 00:03:19.005
So, of course you can use Hibernate, the common ORM,

64
00:03:19.005 --> 00:03:21.008
for all of Java.

65
00:03:21.008 --> 00:03:23.004
There's also a tool called Panache

66
00:03:23.004 --> 00:03:25.007
and we're going to talk a little bit about Panache,

67
00:03:25.007 --> 00:03:29.001
and my favorite way of doing data access still to this day,

68
00:03:29.001 --> 00:03:32.009
is still doing raw JDBC access.

69
00:03:32.009 --> 00:03:37.003
So of course, with raw, you can execute any JDBC action.

70
00:03:37.003 --> 00:03:38.007
You manage the connection,

71
00:03:38.007 --> 00:03:41.007
you manage the query executing against it,

72
00:03:41.007 --> 00:03:43.008
you may need to do some plans on that query

73
00:03:43.008 --> 00:03:45.004
to make sure it's efficient,

74
00:03:45.004 --> 00:03:47.007
but you control all the actions.

75
00:03:47.007 --> 00:03:50.002
Now again, through Hibernate you get a full ORM,

76
00:03:50.002 --> 00:03:52.001
and a lot of people like the ORM

77
00:03:52.001 --> 00:03:53.008
because they don't have to deal with

78
00:03:53.008 --> 00:03:56.004
a lot of the connection tear down and set up.

79
00:03:56.004 --> 00:04:00.009
Now, Panache provides a simplification of entities

80
00:04:00.009 --> 00:04:02.001
on top of Hibernate.

81
00:04:02.001 --> 00:04:06.001
So Panache is just another layer of abstraction above it,

82
00:04:06.001 --> 00:04:09.000
that makes it a little bit easier to do,

83
00:04:09.000 --> 00:04:12.000
JPA type transactions with Hibernate.

84
00:04:12.000 --> 00:04:14.003
And of course transactions are fully supported,

85
00:04:14.003 --> 00:04:16.000
regardless of what you use,

86
00:04:16.000 --> 00:04:18.009
because it's a relational database with a rollback block

87
00:04:18.009 --> 00:04:22.004
and a commit block, and you have to have transactions

88
00:04:22.004 --> 00:04:24.005
in order to use those effectively,

89
00:04:24.005 --> 00:04:26.000
unless you just want to commit on right,

90
00:04:26.000 --> 00:04:28.006
which nobody should ever do in production.

91
00:04:28.006 --> 00:04:32.005
So that's really a basis of data access in Quarkus,

92
00:04:32.005 --> 00:04:35.009
next we're going to show you how to configure the details

93
00:04:35.009 --> 00:04:38.000
of a data source.

