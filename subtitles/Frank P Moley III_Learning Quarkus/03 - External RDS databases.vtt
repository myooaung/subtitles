WEBVTT
1
00:00:00.007 --> 00:00:03.003
- [Instructor] So now, let's connect an application

2
00:00:03.003 --> 00:00:05.002
to a data source.

3
00:00:05.002 --> 00:00:07.000
So the first thing that we want to do is we want to run

4
00:00:07.000 --> 00:00:10.002
the start_postgres script in the bin directory

5
00:00:10.002 --> 00:00:12.003
of the exercise files.

6
00:00:12.003 --> 00:00:14.002
And what this is going to do is it's going to run

7
00:00:14.002 --> 00:00:17.005
a Postgres database and populate it with some data.

8
00:00:17.005 --> 00:00:20.004
You'll see all of the insert statements that are executed

9
00:00:20.004 --> 00:00:23.001
that let you know that the data has actually

10
00:00:23.001 --> 00:00:25.001
been inserted into the database.

11
00:00:25.001 --> 00:00:30.008
So now, let's jump over to our IDE.

12
00:00:30.008 --> 00:00:33.004
And we're going to go ahead and go back to our command app,

13
00:00:33.004 --> 00:00:36.000
and we're going to start from there.

14
00:00:36.000 --> 00:00:38.000
So the first thing to do in this application

15
00:00:38.000 --> 00:00:40.002
is to open up the pom file.

16
00:00:40.002 --> 00:00:46.001
And we're going to add a couple elements to our pom file.

17
00:00:46.001 --> 00:00:50.005
Go ahead and remove the rest easy 'cause we don't need that.

18
00:00:50.005 --> 00:00:52.009
The first dependency that we're going to add

19
00:00:52.009 --> 00:00:59.008
is quarkus.agroal

20
00:00:59.008 --> 00:01:06.004
And that comes from io.quarkus.

21
00:01:06.004 --> 00:01:09.009
And then we're going to bring in our database driver,

22
00:01:09.009 --> 00:01:17.007
which is quarkus-jdbc-postgres.

23
00:01:17.007 --> 00:01:19.008
And again, io.corcus.

24
00:01:19.008 --> 00:01:24.003
And we will allow Maven to do its dependency management.

25
00:01:24.003 --> 00:01:26.007
Okay, now that that is done,

26
00:01:26.007 --> 00:01:30.002
let's open up source main resources,

27
00:01:30.002 --> 00:01:32.000
our application or properties file.

28
00:01:32.000 --> 00:01:35.000
And we're going to put in a few properties in here.

29
00:01:35.000 --> 00:01:40.002
So quarkus.datasource.db-kind.

30
00:01:40.002 --> 00:01:46.008
And the db-kind is going to be postgresql.

31
00:01:46.008 --> 00:01:52.005
Now, let's add in quarkus.datasource.username.

32
00:01:52.005 --> 00:01:58.008
And the username is going to be postgres.

33
00:01:58.008 --> 00:02:02.007
And the password is also going to be postgres.

34
00:02:02.007 --> 00:02:05.007
And these come from the Dockerfile script that I included

35
00:02:05.007 --> 00:02:08.003
in the exercise files.

36
00:02:08.003 --> 00:02:09.001
Now, the next one

37
00:02:09.001 --> 00:02:14.008
that we want to do quarkus.datasource.jdbc.url.

38
00:02:14.008 --> 00:02:18.008
And we need to pass it in a fully qualified JDBC URL,

39
00:02:18.008 --> 00:02:31.000
which is jdbc:postgresql://localhost:5432.

40
00:02:31.000 --> 00:02:34.007
And this is the dev database.

41
00:02:34.007 --> 00:02:40.004
And the last element that we're going to put in

42
00:02:40.004 --> 00:02:43.005
is jdbc.max-size.

43
00:02:43.005 --> 00:02:46.003
And we're going to set our max size equal to 16

44
00:02:46.003 --> 00:02:50.009
just because it'll work fine with that.

45
00:02:50.009 --> 00:02:54.005
Okay, now that our application properties are set up,

46
00:02:54.005 --> 00:02:58.004
let's go to source main Java and into our directory.

47
00:02:58.004 --> 00:03:00.008
We're going to create a new class

48
00:03:00.008 --> 00:03:04.003
and we're going to call this Room.

49
00:03:04.003 --> 00:03:10.007
And room class is going to have a couple elements.

50
00:03:10.007 --> 00:03:17.004
Private String name, private String roomNumber,

51
00:03:17.004 --> 00:03:21.006
and private String bedInfo.

52
00:03:21.006 --> 00:03:28.009
Now, I'm going to generate a constructor.

53
00:03:28.009 --> 00:03:31.003
And I'm also going to generate a constructor

54
00:03:31.003 --> 00:03:33.003
with all of the parameters.

55
00:03:33.003 --> 00:03:36.003
Now, I'm using a built-in function in my IDE.

56
00:03:36.003 --> 00:03:37.009
Yours will have the same thing.

57
00:03:37.009 --> 00:03:40.005
I get mine from hitting Ctrl + Enter.

58
00:03:40.005 --> 00:03:41.009
Each ID is a little bit different.

59
00:03:41.009 --> 00:03:44.003
And it's different for each operating system,

60
00:03:44.003 --> 00:03:46.007
but you will have the ability to generate constructors,

61
00:03:46.007 --> 00:03:51.003
getters and setters.

62
00:03:51.003 --> 00:03:53.004
And then the last thing I'm going to do

63
00:03:53.004 --> 00:03:57.006
just for simplicity is I'm going to add a two-string method

64
00:03:57.006 --> 00:04:01.004
and I'm just going to use concatenation, excellent.

65
00:04:01.004 --> 00:04:04.001
So now that our room class is done,

66
00:04:04.001 --> 00:04:07.000
now we can jump back into our CommandRunner.

67
00:04:07.000 --> 00:04:10.003
And there's a few things here that we need to inject.

68
00:04:10.003 --> 00:04:20.006
So the first thing that we're going to inject is a data source.

69
00:04:20.006 --> 00:04:25.003
And we will simply call that datasource.

70
00:04:25.003 --> 00:04:28.006
And I've done my method here.

71
00:04:28.006 --> 00:04:29.006
We're going to do a few things.

72
00:04:29.006 --> 00:04:33.007
Let's get rid of this hello statement.

73
00:04:33.007 --> 00:04:38.001
And let's put an SQL statement here instead.

74
00:04:38.001 --> 00:04:46.009
And it's going to be SELCET NAME, ROOM_NUMBER, BED_INFO.

75
00:04:46.009 --> 00:04:49.007
And these all come from the schema file that's included

76
00:04:49.007 --> 00:04:55.007
in the exercise files if you want to refer to them, FROM ROOM.

77
00:04:55.007 --> 00:05:00.007
Now, let's build a try debug here.

78
00:05:00.007 --> 00:05:01.007
The first thing that we're going to do

79
00:05:01.007 --> 00:05:13.005
is we're going to go to Connection from our data source.

80
00:05:13.005 --> 00:05:16.009
Now, look at that, connection from java.sql.

81
00:05:16.009 --> 00:05:20.003
And then we are going to do a try.

82
00:05:20.003 --> 00:05:26.006
And in the try, we're going to create a statement,

83
00:05:26.006 --> 00:05:32.002
connection.CreateStatement

84
00:05:32.002 --> 00:05:35.002
That statement is going to come from java.sql.

85
00:05:35.002 --> 00:05:41.000
And now we will do a result set,

86
00:05:41.000 --> 00:05:47.001
stat.excecuteQuery

87
00:05:47.001 --> 00:05:52.000
and we'll pass in our SQL.

88
00:05:52.000 --> 00:05:57.007
And then while resultset.next

89
00:05:57.007 --> 00:05:59.007
Now, before we populate our rooms

90
00:05:59.007 --> 00:06:01.004
we need to go create a holder for our room.

91
00:06:01.004 --> 00:06:04.001
So let's jump back above this try.

92
00:06:04.001 --> 00:06:10.004
Let's create a list of room elements.

93
00:06:10.004 --> 00:06:15.000
And we will just do an array list.

94
00:06:15.000 --> 00:06:21.006
Now, down in this block, we can do a rooms.add, a new room.

95
00:06:21.006 --> 00:06:33.008
And we are simply going to call resultset.getstringname,

96
00:06:33.008 --> 00:06:45.001
resultset.getstring, sending it room number.

97
00:06:45.001 --> 00:06:48.008
And then let's scroll this up a little bit.

98
00:06:48.008 --> 00:06:53.002
And then the final element will be resultset.getstring

99
00:06:53.002 --> 00:06:58.003
and we will pass it in BED_INFO.

100
00:06:58.003 --> 00:07:02.002
And we'll finish off this with a catch block

101
00:07:02.002 --> 00:07:08.003
of SQLException.

102
00:07:08.003 --> 00:07:14.001
And we will simply do a printstackTrace.

103
00:07:14.001 --> 00:07:19.008
Now, what we want to do here now is do a rooms.forEach

104
00:07:19.008 --> 00:07:26.009
and we will do a system.out::println.

105
00:07:26.009 --> 00:07:28.002
And now, we're good to go.

106
00:07:28.002 --> 00:07:30.009
So if we run our application,

107
00:07:30.009 --> 00:07:33.000
what we should see is it will pull all the rooms

108
00:07:33.000 --> 00:07:34.008
from the database and print them out.

109
00:07:34.008 --> 00:07:37.009
So let's go ahead and run our application.

110
00:07:37.009 --> 00:07:39.006
And again, I'm running it through my IDE.

111
00:07:39.006 --> 00:07:42.006
You can do it directly from the command line

112
00:07:42.006 --> 00:07:44.005
using a Maven command.

113
00:07:44.005 --> 00:07:47.008
Several ways to run this, but this is how I'm doing it.

114
00:07:47.008 --> 00:07:50.001
And you will see that it output all of our room information

115
00:07:50.001 --> 00:07:51.004
from the database.

116
00:07:51.004 --> 00:07:54.001
And you can validate that this is indeed

117
00:07:54.001 --> 00:07:56.009
the room information by looking at the data

118
00:07:56.009 --> 00:08:00.007
of that SQL file where we populated all of it.

119
00:08:00.007 --> 00:08:03.006
And that's all there is to connecting to a database

120
00:08:03.006 --> 00:08:06.000
from your application.

