WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:04.215
Our project is now at a stage where it will generate

00:00:04.215 --> 00:00:08.100
a different random image each time we reload the browser.

00:00:08.100 --> 00:00:11.175
Of course, this is not the way we want our app to perform.

00:00:11.175 --> 00:00:15.810
We want to call a random image after a certain time delay.

00:00:15.810 --> 00:00:21.285
The way we're going to do this is by grabbing our code which generates the random image.

00:00:21.285 --> 00:00:23.865
We're going to place this inside of a function,

00:00:23.865 --> 00:00:28.170
and then call this function after a certain time delay.

00:00:28.170 --> 00:00:31.920
Let's create a new function at just above this.

00:00:31.920 --> 00:00:33.930
I'm going to create this function using

00:00:33.930 --> 00:00:37.565
a slightly different syntax than the previous project.

00:00:37.565 --> 00:00:41.075
We're going to create what's called a ES6 arrow function.

00:00:41.075 --> 00:00:43.159
An arrow function is basically

00:00:43.159 --> 00:00:47.645
a different syntax than the regular functions that we've used previously.

00:00:47.645 --> 00:00:52.460
There is also some technical differences too between the two function syntaxes.

00:00:52.460 --> 00:00:55.310
Although we won't be covering these inside this course,

00:00:55.310 --> 00:00:59.425
this function is going to contain all of the syntax just here.

00:00:59.425 --> 00:01:02.120
The way we write an ES6 arrow function,

00:01:02.120 --> 00:01:07.430
we're going to store a function name called generate inside of a constant,

00:01:07.430 --> 00:01:11.199
and then we're going to set this equal to our function.

00:01:11.199 --> 00:01:16.590
We set the arrow function just like this and then the curly braces.

00:01:16.590 --> 00:01:19.385
Inside of these brackets just here,

00:01:19.385 --> 00:01:23.569
just like when we looked at the irregular functions in the previous projects,

00:01:23.569 --> 00:01:26.755
we can also pass arguments inside here too.

00:01:26.755 --> 00:01:28.845
For example, if we had a value,

00:01:28.845 --> 00:01:33.680
we could pass it just like this and then access our value inside the function.

00:01:33.680 --> 00:01:41.185
But all we want to do is to grab these lines of code, and then paste these in.

00:01:41.185 --> 00:01:44.150
We now have this function which we can now call,

00:01:44.150 --> 00:01:48.455
and we want to call this function after a certain time delay.

00:01:48.455 --> 00:01:50.600
Let's do this just below, we can create

00:01:50.600 --> 00:01:55.320
a second function which I'm going to call a timer.

00:01:55.520 --> 00:02:02.040
The way we can run some code inside a JavaScript is by taking advantage of setInterval.

00:02:02.510 --> 00:02:07.400
SetInterval is a function which takes in two arguments.

00:02:07.400 --> 00:02:10.655
The first one is the code which you want to run.

00:02:10.655 --> 00:02:14.785
We already have the code available inside this generate function.

00:02:14.785 --> 00:02:18.375
We can pass in generate as the first argument.

00:02:18.375 --> 00:02:21.670
Then the second one is a time delay.

00:02:21.670 --> 00:02:24.465
This time delay is in milliseconds,

00:02:24.465 --> 00:02:27.720
one second will be equal to 1,000,

00:02:27.720 --> 00:02:31.380
two seconds will be 2,000, and so on.

00:02:31.380 --> 00:02:35.690
The way we can call this function is by using the Play button.

00:02:35.690 --> 00:02:38.240
If we go back to our index page,

00:02:38.240 --> 00:02:43.190
we have the Play button inside of this commented out section.

00:02:43.400 --> 00:02:46.095
Let's reinstate this.

00:02:46.095 --> 00:02:49.690
Then we can call this from our Play button.

00:02:51.080 --> 00:02:53.400
We'll do this on a click,

00:02:53.400 --> 00:02:57.180
so let's set the on click equal to our timer.

00:02:57.180 --> 00:03:02.110
Over to the browser, let's reload this and click on the "Play" button.

00:03:08.210 --> 00:03:10.610
After our two-second delay,

00:03:10.610 --> 00:03:17.060
we see a new image has been randomly generated and placed on the end of our div.

00:03:17.060 --> 00:03:19.700
Just to recap, when we click on "Play",

00:03:19.700 --> 00:03:21.535
we call our timer function.

00:03:21.535 --> 00:03:24.780
This timer function will run every two seconds,

00:03:24.780 --> 00:03:29.030
and then call our generate function which generates a new random image.

00:03:29.030 --> 00:03:31.145
As we just seen,

00:03:31.145 --> 00:03:33.740
this is not ideal because we want to replace

00:03:33.740 --> 00:03:38.075
the existing image rather than add this to the end of our image container.

00:03:38.075 --> 00:03:42.050
One of the ways we can fix this is to add a if statement and check

00:03:42.050 --> 00:03:46.830
if a image already exists before we go ahead and add a new one.

00:03:47.200 --> 00:03:49.430
Just before we add this image,

00:03:49.430 --> 00:03:51.369
we can create an if statement,

00:03:51.369 --> 00:03:54.950
this is going to check if our image container.

00:03:54.950 --> 00:03:58.370
Remember, this image container was the wrapper just

00:03:58.370 --> 00:04:02.550
here which is going to contain all of our images inside.

00:04:02.720 --> 00:04:09.130
If our image container and then we can say.hasChildNodes.

00:04:09.130 --> 00:04:12.020
This is a method which is going to check if

00:04:12.020 --> 00:04:15.715
our image container contains any child elements.

00:04:15.715 --> 00:04:17.850
Currently, it doesn't because it's empty,

00:04:17.850 --> 00:04:19.895
there is nothing in between our div.

00:04:19.895 --> 00:04:22.220
But if there is an image there in place,

00:04:22.220 --> 00:04:25.120
we're going to run some code which will remove this.

00:04:25.120 --> 00:04:28.530
First of all, we'll select our image container and then

00:04:28.530 --> 00:04:31.865
we can call a method called removeChild.

00:04:31.865 --> 00:04:35.150
The way we can select which child element we want to remove is

00:04:35.150 --> 00:04:38.590
by using a method called firstElementChild.

00:04:38.590 --> 00:04:40.590
We call this on our container,

00:04:40.590 --> 00:04:45.495
so our imageContainer, and then select the firstElementChild.

00:04:45.495 --> 00:04:50.145
We've seen here that if our imageContainer has anything nested inside,

00:04:50.145 --> 00:04:51.840
we'll then go on to remove this,

00:04:51.840 --> 00:04:55.960
and the item we want to remove is the very first element inside.

00:04:55.960 --> 00:04:58.100
The first element is always going to be

00:04:58.100 --> 00:05:01.670
our image since there's nothing else inside of our div.

00:05:01.670 --> 00:05:06.090
Let's save this and give this a try, click on "Play".

00:05:11.710 --> 00:05:15.415
Now, we only see one image at a time.

00:05:15.415 --> 00:05:17.980
The next issue which we need to deal with,

00:05:17.980 --> 00:05:20.170
if you'll notice when we click on "Play",

00:05:20.170 --> 00:05:23.905
there is a time delay before our first image will appear.

00:05:23.905 --> 00:05:27.670
This time delay is the two seconds which we set just here.

00:05:27.670 --> 00:05:30.400
This will cause as a small problem because we want to start

00:05:30.400 --> 00:05:33.575
the game as soon as the user has clicked on "Play".

00:05:33.575 --> 00:05:38.890
The way we can fix this is by calling our generate function as soon as the game starts,

00:05:38.890 --> 00:05:40.600
and then as soon as this is running,

00:05:40.600 --> 00:05:45.980
we can then rely on our timer to continue with the rest of the images.

00:05:46.250 --> 00:05:50.830
Let's create a new constant just below which is going to handle this.

00:05:50.830 --> 00:05:54.200
This is going to be a function called play.

00:05:55.610 --> 00:05:59.280
Once again, we'll set up our arrow function.

00:05:59.280 --> 00:06:03.615
We're then going to call this play function as soon as the game starts.

00:06:03.615 --> 00:06:05.580
Rather than our timer,

00:06:05.580 --> 00:06:08.140
we'll change this to play.

00:06:08.450 --> 00:06:13.320
As soon as the game starts, we're going to call our generate function.

00:06:14.080 --> 00:06:16.520
This will be called once,

00:06:16.520 --> 00:06:21.090
we'll then call our timer function. Let's try this out.

00:06:21.090 --> 00:06:23.525
As soon as we click on "Play" inside the browser,

00:06:23.525 --> 00:06:26.270
we should see our first image which we do.

00:06:26.270 --> 00:06:28.040
Then after our time delay,

00:06:28.040 --> 00:06:31.380
the rest of the images begins to generate.

00:06:31.550 --> 00:06:35.625
The next thing to take care of is to actually end our game.

00:06:35.625 --> 00:06:38.775
If we reduce our timer down to a really small number,

00:06:38.775 --> 00:06:41.355
let's say 300 milliseconds,

00:06:41.355 --> 00:06:46.050
then click on "Play", this will then cycle through all of

00:06:46.050 --> 00:06:51.260
our 20 images but it will keep going and not know when to stop.

00:06:52.100 --> 00:06:57.715
We see here that we've gone over 20 images but the game still continues to run.

00:06:57.715 --> 00:07:01.600
One of the ways we can fix this is by reducing the number of

00:07:01.600 --> 00:07:06.380
images or removing an image after one has been generated.

00:07:06.380 --> 00:07:09.190
Currently, we generate a random number.

00:07:09.190 --> 00:07:15.730
Meaning, our random number can generate 20 different images once this function has run.

00:07:15.730 --> 00:07:18.570
If we would then remove an image from our array,

00:07:18.570 --> 00:07:20.720
this will then leave us with 19 options,

00:07:20.720 --> 00:07:23.365
and 18, and 17, and so on.

00:07:23.365 --> 00:07:28.000
The way we can remove an image is by selecting our images array.

00:07:28.000 --> 00:07:34.895
We can use a JavaScript splice method which is going to remove a value from our array.

00:07:34.895 --> 00:07:37.685
Splice is going to take in two separate values.

00:07:37.685 --> 00:07:41.980
The first one which you pass in is going to be the image which we want to remove.

00:07:41.980 --> 00:07:44.180
If we want to remove the first image,

00:07:44.180 --> 00:07:45.905
this would be position 0,

00:07:45.905 --> 00:07:48.125
position 1, and so on.

00:07:48.125 --> 00:07:52.190
We already know which image we're currently dealing with because we have this stored

00:07:52.190 --> 00:07:56.790
inside of the random number. Let's pass this in.

00:07:57.260 --> 00:08:01.805
Then the second value is the number of items you want to remove.

00:08:01.805 --> 00:08:06.160
We're only going to remove one value. Let's leave this as one.

00:08:06.160 --> 00:08:11.045
Just to recap, we are randomly selecting any of our images from the array.

00:08:11.045 --> 00:08:15.414
We are then pushing this to the DOM and displaying this inside of our project,

00:08:15.414 --> 00:08:17.705
and then finally, we'll remove this image from

00:08:17.705 --> 00:08:20.735
our array so it can be selected more than once.

00:08:20.735 --> 00:08:23.820
This now means if we go back to the browser and start our game,

00:08:23.820 --> 00:08:29.850
we should now only see 20 images appear in the browser. Let's try this.

00:08:32.470 --> 00:08:38.000
There we go. The game now stops because we don't have any more images to cycle through.

00:08:38.000 --> 00:08:42.020
This now means our image array is now reduced to zero,

00:08:42.020 --> 00:08:44.195
and we now have a way to end the game.

00:08:44.195 --> 00:08:48.020
But one thing we need to do is to also stop our time at two.

00:08:48.020 --> 00:08:52.775
At the moment, this set interval time has no way to know when it should stop.

00:08:52.775 --> 00:08:55.190
Therefore, we need to tell a set interval to stop

00:08:55.190 --> 00:08:59.455
manually so it doesn't continue to use the browser's resources.

00:08:59.455 --> 00:09:02.385
We had set interval inside here.

00:09:02.385 --> 00:09:05.935
The way we can stop this is by calling a clear interval.

00:09:05.935 --> 00:09:11.970
I'm also going to store this inside of a function called stopTimer.

00:09:15.170 --> 00:09:20.225
All this function is going to do is to call our clear interval function.

00:09:20.225 --> 00:09:24.805
Then it pass in a reference to our timer inside the clear interval.

00:09:24.805 --> 00:09:28.835
We can do this by passing it set interval to a variable.

00:09:28.835 --> 00:09:31.705
Let's call this variable timerRef.

00:09:31.705 --> 00:09:37.920
Then we can set timerRef to be equal to our set interval.

00:09:37.920 --> 00:09:39.830
Now, we'll have this reference.

00:09:39.830 --> 00:09:44.660
We can now pass this to clear interval so it knows which time where we need to clear.

00:09:44.660 --> 00:09:49.010
The reason we've declared this variable outside of a function rather than

00:09:49.010 --> 00:09:53.810
inside is because we can then access this in any of the functions.

00:09:53.810 --> 00:09:56.765
If we declared our variable inside of this function,

00:09:56.765 --> 00:10:00.005
we could only access it inside of this timer

00:10:00.005 --> 00:10:04.610
which will then cause an error when we try to reference it in our clear interval.

00:10:04.610 --> 00:10:06.830
Let's move this back outside.

00:10:06.830 --> 00:10:12.370
Now, we need to call our stopTimer function at the end of our game.

00:10:12.370 --> 00:10:16.835
Our game is ended once we have no more images left in the array,

00:10:16.835 --> 00:10:20.300
because we're removing them on each generation.

00:10:20.300 --> 00:10:22.430
Inside of our generate function,

00:10:22.430 --> 00:10:30.410
we can check if our images dot length is equal to zero.

00:10:30.410 --> 00:10:34.015
We can then call our stopTimer function,

00:10:34.015 --> 00:10:36.545
and also use the return key word,

00:10:36.545 --> 00:10:41.905
meaning this will then break out to our function and the code below will no longer run.

00:10:41.905 --> 00:10:45.960
Let's save this and test this out in the browser, we can click "Play",

00:10:45.960 --> 00:10:48.960
and should now cycle through 20 of our images,

00:10:48.960 --> 00:10:51.520
and then stop the timer.

00:10:54.800 --> 00:10:57.180
Good. With this now in place,

00:10:57.180 --> 00:10:59.930
we'll move on to the next video where we'll take care

00:10:59.930 --> 00:11:04.170
of generating a number to display to the user.
