1
00:00:00,000 --> 00:00:02,835
Welcome to this bonus video on Vuex.

2
00:00:02,835 --> 00:00:04,920
I wanted to cover this as a bonus in

3
00:00:04,920 --> 00:00:08,040
this class as it's a concept in Vue that I've previously

4
00:00:08,040 --> 00:00:09,945
utilized using Vue in

5
00:00:09,945 --> 00:00:14,340
Shopify theme development and something that might be valuable for you to learn as well.

6
00:00:14,340 --> 00:00:18,645
In this class so far, we've created two apps in our Shopify theme,

7
00:00:18,645 --> 00:00:22,305
one for the product page and one for the cart page.

8
00:00:22,305 --> 00:00:25,185
Currently, these are very separate.

9
00:00:25,185 --> 00:00:27,360
They each carry their own data, properties,

10
00:00:27,360 --> 00:00:31,140
and methods, and these are exclusive to each instance.

11
00:00:31,140 --> 00:00:35,235
To share data between multiple instances and components in our Shopify theme,

12
00:00:35,235 --> 00:00:38,820
we can utilize a library called Vuex.

13
00:00:38,820 --> 00:00:42,160
If I look up Vuex online,

14
00:00:43,340 --> 00:00:46,770
the first link is what is Vuex.

15
00:00:46,770 --> 00:00:48,430
As it states here, Vuex is

16
00:00:48,430 --> 00:00:52,550
a state management pattern and library for Vue.js applications.

17
00:00:52,550 --> 00:00:56,705
It serves as a centralized store for all of the components in an application.

18
00:00:56,705 --> 00:01:01,670
We've rules ensuring that the state can only be mutated in a predictable fashion.

19
00:01:01,670 --> 00:01:05,090
Essentially, Vuex allows us to create a centralized store of

20
00:01:05,090 --> 00:01:09,205
data that all Vue Instances and components can access.

21
00:01:09,205 --> 00:01:13,805
Now, why would we need this specifically in Shopify theme development?

22
00:01:13,805 --> 00:01:17,810
Well, there's one clear example and that is if we were to allow for

23
00:01:17,810 --> 00:01:23,090
front-end cart interactions outside of this cart page.

24
00:01:23,090 --> 00:01:29,780
For instance, one feature you might have noticed on a Shopify site before is a side cart.

25
00:01:29,780 --> 00:01:32,030
Like on this store,

26
00:01:32,030 --> 00:01:38,990
for instance, if we add a product to the cart here,

27
00:01:38,990 --> 00:01:42,230
you'll see that we have a little interaction here.

28
00:01:42,230 --> 00:01:44,480
We have some cart information here,

29
00:01:44,480 --> 00:01:50,870
but we can also go to the actual cart page and see that same information.

30
00:01:50,870 --> 00:01:55,220
If I was to add one of these upsells to the cart,

31
00:01:55,220 --> 00:01:58,690
that is reflected in this side cart as well.

32
00:01:58,690 --> 00:02:03,290
That means that data is shared between the side cart and the cart page.

33
00:02:03,290 --> 00:02:04,910
It's basically coming from the same place,

34
00:02:04,910 --> 00:02:06,740
it's coming from the cart object.

35
00:02:06,740 --> 00:02:09,290
All of this needs to be in sync.

36
00:02:09,290 --> 00:02:14,190
So how we can do this is via a Vuex store.

37
00:02:14,190 --> 00:02:17,015
Now note whenever I refer to a Vuex store,

38
00:02:17,015 --> 00:02:20,180
I'm referring to a centralized store of data,

39
00:02:20,180 --> 00:02:22,955
not the Shopify store itself.

40
00:02:22,955 --> 00:02:27,380
Sometimes it can get a little confusing talking about Vuex stores on Shopify stores.

41
00:02:27,380 --> 00:02:33,895
Therefore, I'll make sure to refer to the Vuex store as the Vuex store or Vuex for short.

42
00:02:33,895 --> 00:02:36,770
All right, so in this video, we're going to move the cart data and

43
00:02:36,770 --> 00:02:39,495
methods into a new Vuex store.

44
00:02:39,495 --> 00:02:41,030
Update our cart page,

45
00:02:41,030 --> 00:02:43,760
and then I'll show you how we can use this new source of

46
00:02:43,760 --> 00:02:46,840
truth to update other areas of our theme.

47
00:02:46,840 --> 00:02:49,065
Sound good? Let's get started.

48
00:02:49,065 --> 00:02:52,850
All right, so first thing we're going to do is include the script for Vuex.

49
00:02:52,850 --> 00:02:55,850
All right, so I'm going to go back to this documentation at

50
00:02:55,850 --> 00:03:00,315
vuex.vuejs.org, click on installation,

51
00:03:00,315 --> 00:03:04,550
and what we're going to have to do is make sure that the version that we're

52
00:03:04,550 --> 00:03:08,960
using is compatible with the version that we're using of Vue.

53
00:03:08,960 --> 00:03:12,500
So in this class, we used Vue 3.

54
00:03:12,500 --> 00:03:18,200
So if you are following along the same as this class and using Vue 3,

55
00:03:18,200 --> 00:03:22,970
then you're going to have to use version four of Vuex.

56
00:03:22,970 --> 00:03:25,430
So click on V4 right here,

57
00:03:25,430 --> 00:03:27,590
switch over to that documentation,

58
00:03:27,590 --> 00:03:35,915
go to installation, and I'm going to grab this CDN link of Vuex 4.

59
00:03:35,915 --> 00:03:40,645
Copy that, head into our code.

60
00:03:40,645 --> 00:03:46,710
In our theme.liquid after our Vue script tag,

61
00:03:46,710 --> 00:03:51,760
I'm going to add in Vuex.

62
00:03:51,760 --> 00:03:59,335
So just making sure that we're using Vuex version 4 if we're using Vue version 3.

63
00:03:59,335 --> 00:04:03,004
So now that we've included the library for Vuex,

64
00:04:03,004 --> 00:04:05,225
we can now create our Vuex store.

65
00:04:05,225 --> 00:04:07,810
What I like to do is put it inside a snippet.

66
00:04:07,810 --> 00:04:11,210
As you can see, this theme has no snippets right now.

67
00:04:11,210 --> 00:04:14,400
So I'm going to actually create the snippets folder.

68
00:04:14,750 --> 00:04:17,045
Inside the snippets folder,

69
00:04:17,045 --> 00:04:21,800
I'm going to create a file called store.js.liquid.

70
00:04:21,800 --> 00:04:24,880
We're not actually going to use liquid variables in here.

71
00:04:24,880 --> 00:04:29,445
So an alternative could be to put it in theme.js,

72
00:04:29,445 --> 00:04:32,630
or create a js file and assets and include it.

73
00:04:32,630 --> 00:04:38,480
But this allows us to include it on specific pages using the include keyword,

74
00:04:38,480 --> 00:04:40,255
which I'll show you in just a second.

75
00:04:40,255 --> 00:04:44,600
So what we're going to do is let's do that straight away.

76
00:04:44,600 --> 00:04:46,730
We're going to use it on the cart page.

77
00:04:46,730 --> 00:04:51,250
So I'm going to make some room up here and let's include that snippet.

78
00:04:51,250 --> 00:04:54,705
Include store.js.

79
00:04:54,705 --> 00:04:59,930
We don't need the.liquid part because that's implied when we use include statements.

80
00:04:59,930 --> 00:05:02,960
All right. So two parts to getting this all hooked up.

81
00:05:02,960 --> 00:05:06,545
One, we're going to have to create a store here.

82
00:05:06,545 --> 00:05:13,320
Then we're going to have to link up that store to the instances that are going to use it.

83
00:05:13,320 --> 00:05:16,780
So I'm just going to use the standard convention here.

84
00:05:16,780 --> 00:05:22,010
Let's not forget to open up our script tags because we are in a.liquid file.

85
00:05:22,010 --> 00:05:28,980
The standard syntax and standard naming convention is to just call our store, store.

86
00:05:28,980 --> 00:05:37,020
We can then use the create store method of the Vuex object like this.

87
00:05:37,020 --> 00:05:41,400
Inside here we will create our Vuex store.

88
00:05:41,400 --> 00:05:44,255
All of our options for the store will go right in here.

89
00:05:44,255 --> 00:05:50,610
Before I do that, I just want to link it up in our Vue instance here.

90
00:05:50,610 --> 00:05:54,065
What I'm going to do is change this to

91
00:05:54,065 --> 00:05:57,940
a more appropriate name because it is the options object.

92
00:05:57,940 --> 00:06:01,430
I'm going to rename this to cart page options,

93
00:06:01,430 --> 00:06:06,165
cart page options, and then I'm going to store this in a variable.

94
00:06:06,165 --> 00:06:09,555
So we're going to call this cart page.

95
00:06:09,555 --> 00:06:14,315
So this will store the actual app now rather than the options.

96
00:06:14,315 --> 00:06:17,240
Then what I'm going to do is mount

97
00:06:17,240 --> 00:06:23,810
the cart page and add another step here for using our new Vuex store.

98
00:06:23,810 --> 00:06:29,825
So what we do is do use and then we put in the variable name of our Vuex store,

99
00:06:29,825 --> 00:06:31,850
which we just called store.

100
00:06:31,850 --> 00:06:34,850
Ideally, we should only have one store for the whole website.

101
00:06:34,850 --> 00:06:40,440
So it makes sense to call it store and then we can just include it like this.

102
00:06:40,440 --> 00:06:44,180
I'm going to go back to the store here and just in my code editor,

103
00:06:44,180 --> 00:06:46,640
change the language detection to HTML.

104
00:06:46,640 --> 00:06:49,480
That'll get rid of those squiggly lines.

105
00:06:49,480 --> 00:06:53,690
Actually, there's one more step and that's to go into our options

106
00:06:53,690 --> 00:06:58,355
here and just make sure we add in store to the options.

107
00:06:58,355 --> 00:07:01,820
Okay, this is the equivalent of store: store.

108
00:07:01,820 --> 00:07:06,265
So we can just save some space and just put it in as store.

109
00:07:06,265 --> 00:07:11,645
Then that now enables us to reference the store within this instance.

110
00:07:11,645 --> 00:07:14,765
Okay, so what we're going to do is we're going to move

111
00:07:14,765 --> 00:07:18,875
our cart data into our newly created store.

112
00:07:18,875 --> 00:07:21,040
So I'm going to cut this.

113
00:07:21,040 --> 00:07:24,000
I'm going to leave the upsells in there.

114
00:07:24,000 --> 00:07:28,520
Inside our store, I'm going to create a state function.

115
00:07:28,520 --> 00:07:34,145
Then just like we do when we're returning data inside a Vue instance,

116
00:07:34,145 --> 00:07:39,450
I'm going to copy and paste this into our state here.

117
00:07:39,450 --> 00:07:41,735
I think we can bring back some indenting here.

118
00:07:41,735 --> 00:07:42,940
Yeah. All right.

119
00:07:42,940 --> 00:07:45,455
Now, a little bit of Vuex theory.

120
00:07:45,455 --> 00:07:47,480
We have some core concepts here.

121
00:07:47,480 --> 00:07:51,230
State, which is basically data getters,

122
00:07:51,230 --> 00:07:56,405
which allow us to access that data that we've just set on the store state.

123
00:07:56,405 --> 00:08:01,760
Mutations, which are the only way to change data in a Vuex store.

124
00:08:01,760 --> 00:08:05,340
So mutations mean anytime we change data.

125
00:08:05,340 --> 00:08:10,035
Actions which we dispatch to commit mutations,

126
00:08:10,035 --> 00:08:12,890
and then modules which we're not using in this lesson.

127
00:08:12,890 --> 00:08:18,435
But essentially what we're going to do is we're going to use getters to get the data.

128
00:08:18,435 --> 00:08:22,350
Then we're going to use actions and mutations to set the data.

129
00:08:22,350 --> 00:08:26,300
Okay? Now, if you want to get in-depth about why we use

130
00:08:26,300 --> 00:08:31,830
mutations and actions in order to change data and not just one or the other,

131
00:08:31,830 --> 00:08:34,430
you can read about it here on the documentation.

132
00:08:34,430 --> 00:08:38,780
I'm not going to go into the theory of actions and mutations in this particular video,

133
00:08:38,780 --> 00:08:42,140
but all the information is there if you want to look into it.

134
00:08:42,140 --> 00:08:47,090
All right, so let's go back to our store right here, our Vuex store.

135
00:08:47,090 --> 00:08:50,810
Let's think about what mutations we might need to do.

136
00:08:50,810 --> 00:08:55,805
Basically, the only mutation we need to do on here is to update the cart.

137
00:08:55,805 --> 00:08:58,910
Remember every time we are changing the cart,

138
00:08:58,910 --> 00:09:04,580
we're just getting a fresh cart object from the Ajax API and setting that new data.

139
00:09:04,580 --> 00:09:07,295
Okay? So we only need one mutation.

140
00:09:07,295 --> 00:09:09,660
You can choose whether to do this or not.

141
00:09:09,660 --> 00:09:13,855
But I like to use the capital's convention when naming mutations.

142
00:09:13,855 --> 00:09:16,895
So I'm going to open up a mutations object.

143
00:09:16,895 --> 00:09:22,045
In here, I'm going to create a set cart mutation.

144
00:09:22,045 --> 00:09:24,780
The first argument is going to be state.

145
00:09:24,780 --> 00:09:27,165
This is standard when running mutations.

146
00:09:27,165 --> 00:09:29,630
Then the next thing is going to be the payload,

147
00:09:29,630 --> 00:09:31,170
which is going to be the cart.

148
00:09:31,170 --> 00:09:33,485
So that's what we're going to pass in.

149
00:09:33,485 --> 00:09:38,950
Then all we're going to do is do state cart equals cart.

150
00:09:38,950 --> 00:09:41,210
Again, this might look a little bit redundant,

151
00:09:41,210 --> 00:09:44,180
but there's some method to the madness with Vuex.

152
00:09:44,180 --> 00:09:45,905
It's following a specific pattern.

153
00:09:45,905 --> 00:09:48,125
Again, if you want to read more about this,

154
00:09:48,125 --> 00:09:50,545
you can do so on the documentation.

155
00:09:50,545 --> 00:09:52,940
But after we've created that mutation,

156
00:09:52,940 --> 00:09:56,595
what I'm going to do is create some actions.

157
00:09:56,595 --> 00:09:59,330
This is where we start to transfer some of

158
00:09:59,330 --> 00:10:04,640
these asynchronous functions over from our cart page into our Vuex store.

159
00:10:04,640 --> 00:10:06,110
But before that, I want to create

160
00:10:06,110 --> 00:10:09,805
some working code and show you this is actually working.

161
00:10:09,805 --> 00:10:15,580
So what I'm going to do is I'm going to close down this and open this up in a split tab.

162
00:10:15,580 --> 00:10:20,040
Let's get rid of all the other tabs here.

163
00:10:20,040 --> 00:10:23,075
What we're going to do is refactor this,

164
00:10:23,075 --> 00:10:26,000
move, some of this code over to here.

165
00:10:26,000 --> 00:10:29,000
Now, the first thing that happens when we load the page,

166
00:10:29,000 --> 00:10:31,220
of course, is we get the cart.

167
00:10:31,220 --> 00:10:36,120
So let's recreate that using this Vuex store.

168
00:10:36,120 --> 00:10:40,670
Okay? So what I'm going to do is before actions actually,

169
00:10:40,670 --> 00:10:44,810
I'm going to open up a getters object here.

170
00:10:44,810 --> 00:10:46,840
Here we can put our getters.

171
00:10:46,840 --> 00:10:49,500
Again, this is going to look a little redundant.

172
00:10:49,500 --> 00:10:52,155
Why can't we just access the state directly?

173
00:10:52,155 --> 00:10:56,660
Again, there's theory behind it that you can look up on the documentation.

174
00:10:56,660 --> 00:11:00,440
But how this works is in order to get to the cart object,

175
00:11:00,440 --> 00:11:03,485
we need to write a function just like this,

176
00:11:03,485 --> 00:11:07,725
and it's just going to return state.cart.

177
00:11:07,725 --> 00:11:12,310
So in order to get that data from our Vuex store,

178
00:11:12,310 --> 00:11:14,770
remember we already included the store up here,

179
00:11:14,770 --> 00:11:18,355
we just need to create a new computed property

180
00:11:18,355 --> 00:11:22,705
which just pulls that data from the Vuex store.

181
00:11:22,705 --> 00:11:25,090
So all I'm going to do is replace

182
00:11:25,090 --> 00:11:29,155
that cart object that we just removed with the computed property.

183
00:11:29,155 --> 00:11:32,020
Here we go, I'm just going to call it cart and this is where

184
00:11:32,020 --> 00:11:34,825
we bring in our Vuex store data,

185
00:11:34,825 --> 00:11:40,555
I'm going to first reference store.state.cart.

186
00:11:40,555 --> 00:11:44,050
Now of course, when you first load the page,

187
00:11:44,050 --> 00:11:45,715
we're going to have this data.

188
00:11:45,715 --> 00:11:48,600
So that's why on created,

189
00:11:48,600 --> 00:11:52,815
we run get_cart, but now we're going to be doing it through Vuex.

190
00:11:52,815 --> 00:11:55,910
What we're going to do is put this into an action.

191
00:11:55,910 --> 00:12:00,505
So down here, I'm going to create an action called get_cart,

192
00:12:00,505 --> 00:12:01,900
and from the first argument,

193
00:12:01,900 --> 00:12:04,810
I'm going to pull off the commit method.

194
00:12:04,810 --> 00:12:07,315
This is standard practice with actions,

195
00:12:07,315 --> 00:12:08,590
and we don't have a payload here,

196
00:12:08,590 --> 00:12:15,070
so that's all I need and then what I'm going to do is mimic the get_cart action here.

197
00:12:15,070 --> 00:12:19,005
I'm going to grab all of this, bring it in,

198
00:12:19,005 --> 00:12:21,630
and instead of running this set cart method,

199
00:12:21,630 --> 00:12:22,890
I'm actually going to run

200
00:12:22,890 --> 00:12:27,585
the set cart mutation and the term for that is called committing.

201
00:12:27,585 --> 00:12:32,675
What we do here is instead of this we do store.commit,

202
00:12:32,675 --> 00:12:36,145
then we put the name of the mutation set_cart,

203
00:12:36,145 --> 00:12:37,930
and then as the second argument,

204
00:12:37,930 --> 00:12:39,490
we put the payload in there,

205
00:12:39,490 --> 00:12:42,565
which is what we get returned from the API.

206
00:12:42,565 --> 00:12:48,100
Then that's going to set the value of the cart to what we get from the API.

207
00:12:48,100 --> 00:12:51,775
Again, this is just pretty much exactly what we have over here.

208
00:12:51,775 --> 00:12:53,995
We're just putting it into Vuex.

209
00:12:53,995 --> 00:12:58,270
So on created instead of this.get_cart,

210
00:12:58,270 --> 00:13:02,875
we're going to instead dispatch the action we have here.

211
00:13:02,875 --> 00:13:09,235
So what I'm going to do is to store.dispatch get_cart.

212
00:13:09,235 --> 00:13:11,950
Now, if we run this code now,

213
00:13:11,950 --> 00:13:15,190
let's go back to our shopping cart,

214
00:13:15,190 --> 00:13:17,170
open up our DevTools,

215
00:13:17,170 --> 00:13:24,355
refresh the page; you'll see that when we go and look in here,

216
00:13:24,355 --> 00:13:26,755
our cart table is there,

217
00:13:26,755 --> 00:13:29,050
but it's currently set to display none.

218
00:13:29,050 --> 00:13:31,090
You can see your cart is empty,

219
00:13:31,090 --> 00:13:34,600
but it's not displaying as you can see here.

220
00:13:34,600 --> 00:13:38,860
The reason why is because we've now lost that part of

221
00:13:38,860 --> 00:13:43,075
the code here where we set cart and changed the loading to false.

222
00:13:43,075 --> 00:13:45,250
So what we're going to have to do is get

223
00:13:45,250 --> 00:13:50,305
this action to return a promise and then when that promise resolves,

224
00:13:50,305 --> 00:13:53,095
then we're going to set loading back to false.

225
00:13:53,095 --> 00:13:55,855
So what we need to do for this is here,

226
00:13:55,855 --> 00:13:58,285
where the get requests start,

227
00:13:58,285 --> 00:14:00,715
we need to just put return in front of it.

228
00:14:00,715 --> 00:14:05,320
Then now we can put a dot then over here.

229
00:14:05,320 --> 00:14:09,549
So when the get_cart action has finished dispatching,

230
00:14:09,549 --> 00:14:16,190
finishes running, then we're going to set loading to false.

231
00:14:17,370 --> 00:14:21,909
All right, now let's refresh the page,

232
00:14:21,909 --> 00:14:25,720
and you can see now we've got that value coming up.

233
00:14:25,720 --> 00:14:29,380
Now if we go to shop the T and we add,

234
00:14:29,380 --> 00:14:32,860
let's say a small black t-shirt to the cart,

235
00:14:32,860 --> 00:14:38,845
you'll see it shows up not from our cart data that's stored on the view instance,

236
00:14:38,845 --> 00:14:43,660
but from a computed property of cart that is pulling from our store.

237
00:14:43,660 --> 00:14:47,410
So we've got the beginnings of our refactor here,

238
00:14:47,410 --> 00:14:51,985
and we can see that that's now pulling from our Vuex store.

239
00:14:51,985 --> 00:14:56,275
Let's go back to the code and continue working on this.

240
00:14:56,275 --> 00:14:59,275
So moving down in our filtered upsells,

241
00:14:59,275 --> 00:15:01,120
I can see this.cart.

242
00:15:01,120 --> 00:15:05,050
We're now using cart as a computed property, pulling this value,

243
00:15:05,050 --> 00:15:13,030
so I'm going to replace this.cart with store.state.cart.

244
00:15:13,030 --> 00:15:14,905
That's the first change,

245
00:15:14,905 --> 00:15:17,109
and then as we go down,

246
00:15:17,109 --> 00:15:22,180
we don't need get_cart anymore because that's now a Vuex action.

247
00:15:22,180 --> 00:15:25,105
We are just going to check where we refer to that.

248
00:15:25,105 --> 00:15:29,395
As you can see, we're using it in add to cart as well.

249
00:15:29,395 --> 00:15:35,200
Let's just remove that and then we'll refactor add to cart when we get to it.

250
00:15:35,200 --> 00:15:40,075
In set_cart, we're doing that through the mutation now,

251
00:15:40,075 --> 00:15:42,325
so I can remove that,

252
00:15:42,325 --> 00:15:46,555
but what I'm going to have to do is there's this extra step in here for format prices.

253
00:15:46,555 --> 00:15:50,535
So let's move this logic out of here,

254
00:15:50,535 --> 00:15:53,730
and let's put it into the actual mutation.

255
00:15:53,730 --> 00:15:59,130
I'm going to remove format prices and inside this mutation here,

256
00:15:59,130 --> 00:16:04,540
let's take the cart object that is submitted as the payload,

257
00:16:04,540 --> 00:16:08,920
and let's update that before we put it into our state.

258
00:16:08,920 --> 00:16:12,580
For that, all we have to do is just remove this dot

259
00:16:12,580 --> 00:16:16,915
because we're now using the cart that's passed in, in this payload.

260
00:16:16,915 --> 00:16:21,670
So this is going to create those new formatted line price,

261
00:16:21,670 --> 00:16:23,140
and formatted total price,

262
00:16:23,140 --> 00:16:26,440
and then insert it into state.cart.

263
00:16:26,440 --> 00:16:29,485
All right, so back to the actions here.

264
00:16:29,485 --> 00:16:30,850
Let's go further down.

265
00:16:30,850 --> 00:16:33,160
We can get rid of set_cart now,

266
00:16:33,160 --> 00:16:37,045
and we're going to have to create a new method

267
00:16:37,045 --> 00:16:41,050
or a new action for this one right here, the update cart.

268
00:16:41,050 --> 00:16:45,265
For this one, I'm going to assume that the only time we're updating cart we're

269
00:16:45,265 --> 00:16:49,915
just doing it for one line item so we're going to keep this syntax.

270
00:16:49,915 --> 00:16:55,045
So what I'm going to do is grab this asynchronous code here

271
00:16:55,045 --> 00:17:02,140
and let's create a update cart method here and of course,

272
00:17:02,140 --> 00:17:04,300
the first argument is going to be commit,

273
00:17:04,300 --> 00:17:07,600
and then the second argument is going to be an object with

274
00:17:07,600 --> 00:17:11,920
those same two arguments; ID and quantity.

275
00:17:11,920 --> 00:17:17,845
Then inside we can do that post request and so that we can make it return a promise,

276
00:17:17,845 --> 00:17:20,905
we put return in front of the Ajax request.

277
00:17:20,905 --> 00:17:27,760
That of course allows us to chain a dot then on the dispatch like we've done over here.

278
00:17:27,760 --> 00:17:31,150
Let's get rid of this code and of course,

279
00:17:31,150 --> 00:17:36,685
this.set_cart needs to be replaced with store.commit set_cart,

280
00:17:36,685 --> 00:17:39,160
and then in our update card method here,

281
00:17:39,160 --> 00:17:41,710
all we have to do is trigger

282
00:17:41,710 --> 00:17:46,360
this action or to use the Vuex terminology, dispatch the action.

283
00:17:46,360 --> 00:17:51,205
So we do that from the store object, dispatch, update cart,

284
00:17:51,205 --> 00:17:55,150
and then an object with the two parameters,

285
00:17:55,150 --> 00:17:58,405
ID and quantity, and that's all we need to do.

286
00:17:58,405 --> 00:18:01,990
Because in our update cart method we're just using that to

287
00:18:01,990 --> 00:18:06,460
update quantity as you can see over here,

288
00:18:06,460 --> 00:18:09,940
we don't need to update loading states therefore,

289
00:18:09,940 --> 00:18:13,675
we don't need to chain a dot then on the end.

290
00:18:13,675 --> 00:18:17,740
But for add_to_cart, we are going to definitely have to use promises.

291
00:18:17,740 --> 00:18:21,100
In fact, we're going to have to chain some promises together.

292
00:18:21,100 --> 00:18:24,070
I'll show you how we do that right now.

293
00:18:24,070 --> 00:18:29,245
So after update_cart, we're going to put in add_to_cart,

294
00:18:29,245 --> 00:18:31,720
and let's use the same syntax as before.

295
00:18:31,720 --> 00:18:33,790
The first argument we're going to pull off

296
00:18:33,790 --> 00:18:37,660
the commit method and then the payload is going to be ID.

297
00:18:37,660 --> 00:18:41,570
Let's pull off this ajax request

298
00:18:42,960 --> 00:18:46,990
into here as I did before so that we can

299
00:18:46,990 --> 00:18:50,695
deal with the promise as it comes back from the action,

300
00:18:50,695 --> 00:18:52,960
put a return in front of it,

301
00:18:52,960 --> 00:18:56,410
and unfortunately the indenting is all wack here,

302
00:18:56,410 --> 00:18:59,000
so let me just fix this quickly.

303
00:18:59,190 --> 00:19:01,450
All right, that'll do.

304
00:19:01,450 --> 00:19:03,100
Now to refactor this code,

305
00:19:03,100 --> 00:19:07,390
we have to replace this method with another dispatch.

306
00:19:07,390 --> 00:19:10,660
Then this we're going to deal with once the promise

307
00:19:10,660 --> 00:19:14,470
comes back from Vuex into our instance.

308
00:19:14,470 --> 00:19:20,155
Let's just remove that and we'll do that inside the instance a little later.

309
00:19:20,155 --> 00:19:24,760
What I'm going to have to do to dispatch an action from within another action is

310
00:19:24,760 --> 00:19:29,635
just to pull off the dispatch method right here on this object,

311
00:19:29,635 --> 00:19:32,320
and so instead of this.get_cart,

312
00:19:32,320 --> 00:19:35,275
I'm going to run dispatch get_cart,

313
00:19:35,275 --> 00:19:37,315
and then that's all we need to do.

314
00:19:37,315 --> 00:19:41,410
Because we're going to handle the promise inside our instance,

315
00:19:41,410 --> 00:19:45,670
we don't need to do anything else after that in the Vuex store.

316
00:19:45,670 --> 00:19:46,810
So let's do that right now.

317
00:19:46,810 --> 00:19:49,795
Let's go into here, into add_to_cart,

318
00:19:49,795 --> 00:19:53,170
and let's do our dispatch, store,

319
00:19:53,170 --> 00:19:57,145
dispatch, add_to_cart with our payload of ID,

320
00:19:57,145 --> 00:20:05,800
and then we can handle the promise like this and first update the loading state to false,

321
00:20:05,800 --> 00:20:11,960
and then upsell, adding upsell, false.

322
00:20:12,150 --> 00:20:16,540
It makes sense to update these loading states because this relates to

323
00:20:16,540 --> 00:20:21,760
the UI that we're dealing with on the page itself,

324
00:20:21,760 --> 00:20:23,740
so inside this particular instance,

325
00:20:23,740 --> 00:20:29,770
but everything to do with the cart data should be centralized within this Vuex store.

326
00:20:29,770 --> 00:20:33,700
Hopefully, that explains why we're handling some promises within

327
00:20:33,700 --> 00:20:37,435
Vuex and some promises within the Vuex instance.

328
00:20:37,435 --> 00:20:42,790
All these loading attributes had to do with the UI on the cart page itself,

329
00:20:42,790 --> 00:20:44,800
not the cart data.

330
00:20:44,800 --> 00:20:48,280
Finally, we've got this remove from cart method,

331
00:20:48,280 --> 00:20:51,355
which is triggering this.update cart.

332
00:20:51,355 --> 00:20:53,110
What I'm going to do here is replace

333
00:20:53,110 --> 00:20:58,930
this update cart method with the update cart action on our Vuex store.

334
00:20:58,930 --> 00:21:00,835
As we've seen before,

335
00:21:00,835 --> 00:21:04,405
store_dispatch, same payload as before.

336
00:21:04,405 --> 00:21:09,940
We just need to put it in an object form, ID and zero,

337
00:21:09,940 --> 00:21:17,680
then we're going to set this dot loading to false after it comes back.

338
00:21:17,680 --> 00:21:20,350
Let's see if that'll work.

339
00:21:20,350 --> 00:21:24,460
I'm not sure whether the explicit value here is going to error.

340
00:21:24,460 --> 00:21:27,140
Yeah.

341
00:21:28,260 --> 00:21:32,410
As you can see, it doesn't like the zero there.

342
00:21:32,410 --> 00:21:41,575
What I'm going to do is just do const quantity equals zero,

343
00:21:41,575 --> 00:21:45,740
and then replace that with quantity.

344
00:21:46,320 --> 00:21:49,540
Hit "Save" on that.

345
00:21:49,540 --> 00:21:52,630
Refresh the page over here.

346
00:21:52,630 --> 00:21:55,495
As you can see, we've got an error,

347
00:21:55,495 --> 00:21:59,275
"Cannot read property total_price of undefined".

348
00:21:59,275 --> 00:22:01,270
If I scroll up here,

349
00:22:01,270 --> 00:22:05,605
you can see I've got a reference to this here.

350
00:22:05,605 --> 00:22:07,540
Just need to remove that,

351
00:22:07,540 --> 00:22:09,955
because we don't have access to this.

352
00:22:09,955 --> 00:22:14,215
This of course, was referring to the Vue instance, the Vue app,

353
00:22:14,215 --> 00:22:15,955
but now we're inside our cart,

354
00:22:15,955 --> 00:22:18,760
so we just need to look at what we've passed in,

355
00:22:18,760 --> 00:22:21,475
and the store object.

356
00:22:21,475 --> 00:22:24,610
I'm going to fix that up,

357
00:22:24,610 --> 00:22:29,605
refresh over here, and now we can see our black shirt coming through.

358
00:22:29,605 --> 00:22:32,860
If I am to update the quantity here,

359
00:22:32,860 --> 00:22:36,610
you can see despite the errors in our JavaScript console,

360
00:22:36,610 --> 00:22:38,305
this is now working.

361
00:22:38,305 --> 00:22:40,960
If I hit the trash can here,

362
00:22:40,960 --> 00:22:43,045
it'll remove that product from the cart,

363
00:22:43,045 --> 00:22:45,565
refreshing to show that this is legit.

364
00:22:45,565 --> 00:22:50,110
If I hit "Add to cart" on one of these, it now works.

365
00:22:50,110 --> 00:22:55,450
Now, all of this data is coming from our Vuex store.

366
00:22:55,450 --> 00:22:58,735
If I go into here, unfortunately,

367
00:22:58,735 --> 00:23:01,900
with this latest version of Vue DevTools,

368
00:23:01,900 --> 00:23:05,950
I don't think we can actually look at the store itself,

369
00:23:05,950 --> 00:23:08,200
there's is not a Vuex tab like there was

370
00:23:08,200 --> 00:23:11,500
in the previous versions of you Vue DevTools but what we

371
00:23:11,500 --> 00:23:17,320
can see is that we're getting the cart objects from computed rather than data here,

372
00:23:17,320 --> 00:23:20,350
and that makes it clear to us that we're pulling

373
00:23:20,350 --> 00:23:24,430
that cart object from somewhere else other than the instance.

374
00:23:24,430 --> 00:23:27,265
If I remove that,

375
00:23:27,265 --> 00:23:29,995
you'll see that that cart object is

376
00:23:29,995 --> 00:23:33,985
updating in accordance with what is in the Vuex store.

377
00:23:33,985 --> 00:23:39,010
Now, of course, what you see here is exactly the same as what we had before.

378
00:23:39,010 --> 00:23:43,015
It might not be clear to you why this is any different or any better,

379
00:23:43,015 --> 00:23:48,370
so I thought I might show you how we could use this new centralized point of

380
00:23:48,370 --> 00:23:54,355
truth to interact with the cart on any other page on our Shopify website.

381
00:23:54,355 --> 00:24:01,240
What I'm going to do is actually put the item count in our cart up here,

382
00:24:01,240 --> 00:24:05,470
and have this live update when we add a new product to the cart,

383
00:24:05,470 --> 00:24:11,035
currently we can only do it from the product page here.

384
00:24:11,035 --> 00:24:13,060
Of course, we can do it on the cart page,

385
00:24:13,060 --> 00:24:14,530
but we're already on the cart page,

386
00:24:14,530 --> 00:24:18,400
so it doesn't really make a lot of sense to do so but perhaps we want

387
00:24:18,400 --> 00:24:23,575
to add to the cart and there's to be feedback straight away without reloading the page.

388
00:24:23,575 --> 00:24:28,570
Now, we can use that cart data to update something in our header to

389
00:24:28,570 --> 00:24:34,630
indicate that we have added a product to the cart without having to go to the cart page.

390
00:24:34,630 --> 00:24:38,125
I'll show you a little example of that right now.

391
00:24:38,125 --> 00:24:42,070
What I'm going to do is create a Vue instance for the header,

392
00:24:42,070 --> 00:24:47,050
and unfortunately, we don't have a section file for the header.

393
00:24:47,050 --> 00:24:49,000
We could go and create that right now,

394
00:24:49,000 --> 00:24:53,335
it wouldn't be too hard but let's just keep the code in our theme.liquid.

395
00:24:53,335 --> 00:24:56,110
I'm going to close down this cart page here.

396
00:24:56,110 --> 00:25:00,715
What I'm going to do is include the same snippet over here,

397
00:25:00,715 --> 00:25:02,665
just above our header.

398
00:25:02,665 --> 00:25:11,545
We're going to do include store.js,

399
00:25:11,545 --> 00:25:17,185
and so now we're including that Vuex store in our theme layout file as well.

400
00:25:17,185 --> 00:25:22,030
I'm also going to add an ID of header to

401
00:25:22,030 --> 00:25:27,580
this element here so that we can clearly identify it in our Vue instance.

402
00:25:27,580 --> 00:25:29,290
Then like we've done throughout this class,

403
00:25:29,290 --> 00:25:34,915
I'm going to create a Vue instance underneath this HTML code here.

404
00:25:34,915 --> 00:25:41,485
First, we're going to create a options objects, header options.

405
00:25:41,485 --> 00:25:44,020
Let's just open up an empty object for now,

406
00:25:44,020 --> 00:25:47,440
and then I'm going to create another variable that's

407
00:25:47,440 --> 00:25:50,905
going to hold our app header, Vue.createApp,

408
00:25:50,905 --> 00:25:53,410
insert those header options,

409
00:25:53,410 --> 00:26:00,715
and then I'm going to mount that using the ID that we just added to the header,

410
00:26:00,715 --> 00:26:07,640
and then I'm going to get that Vue instance to use the Vuex store.

411
00:26:08,370 --> 00:26:12,805
Now, if I refresh the page over here,

412
00:26:12,805 --> 00:26:16,465
we should see under here that we've got two apps.

413
00:26:16,465 --> 00:26:20,825
You'll see that the information that we had here has now gone,

414
00:26:20,825 --> 00:26:24,330
because it's sitting under App 1 over here.

415
00:26:24,330 --> 00:26:28,125
Let me just see if I can zoom out and show you. Here we go.

416
00:26:28,125 --> 00:26:30,690
As you can see, App 1 and App 2,

417
00:26:30,690 --> 00:26:32,325
we haven't actually named them,

418
00:26:32,325 --> 00:26:34,200
so it's a bit confusing.

419
00:26:34,200 --> 00:26:36,555
Let's go in and actually do that right now.

420
00:26:36,555 --> 00:26:40,015
I'm going to give this instance a name of "Header",

421
00:26:40,015 --> 00:26:46,510
and let's go in and name our other instances in the cart page.

422
00:26:46,510 --> 00:26:50,680
I'm going to put in a name into the "Options",

423
00:26:50,680 --> 00:27:00,365
"Cart", and then "Product Page", "Name", "Products".

424
00:27:00,365 --> 00:27:04,660
That's just going to give it a name in the Vue DevTools so we can easily identify it.

425
00:27:04,660 --> 00:27:07,389
Let's go back, refresh, look at the DevTools,

426
00:27:07,389 --> 00:27:11,965
and you can see we can switch between the Header app and the Product app here.

427
00:27:11,965 --> 00:27:14,815
We're running two apps on the one page.

428
00:27:14,815 --> 00:27:16,975
Of course, if we go to the cart page,

429
00:27:16,975 --> 00:27:21,355
you'll see that we have Header and Cart on there as well.

430
00:27:21,355 --> 00:27:24,025
Let's go back to the product page.

431
00:27:24,025 --> 00:27:26,995
We can now switch between the different apps.

432
00:27:26,995 --> 00:27:29,860
Let's add that cart data to the header.

433
00:27:29,860 --> 00:27:33,280
So what I'm going to do is bring in that store,

434
00:27:33,280 --> 00:27:35,260
and then like we've done for the Cart page,

435
00:27:35,260 --> 00:27:42,595
I'm going to create a computed property that pulls the cart from the Vuex store.

436
00:27:42,595 --> 00:27:44,590
This is going to be cart,

437
00:27:44,590 --> 00:27:50,620
exactly like we've done in the Cart page, store.state.cart.

438
00:27:50,620 --> 00:27:55,165
Then in order to populate that cart on page load,

439
00:27:55,165 --> 00:27:59,770
what I'm going to do is tap into the lifecycle hook we've created,

440
00:27:59,770 --> 00:28:02,200
and then in this lifecycle hook,

441
00:28:02,200 --> 00:28:06,490
dispatch the get_cart action.

442
00:28:06,490 --> 00:28:11,630
Let's refresh the page now with our DevTools open.

443
00:28:11,640 --> 00:28:20,065
It looks like we've got an error, "Unexpected identifier, store".

444
00:28:20,065 --> 00:28:22,780
That's because I forgot the comma here.

445
00:28:22,780 --> 00:28:27,865
Let's "Save", "Refresh".

446
00:28:27,865 --> 00:28:30,160
Go back to our Vue DevTools.

447
00:28:30,160 --> 00:28:31,975
Yeah, we've got header and product.

448
00:28:31,975 --> 00:28:33,475
If we click into the header,

449
00:28:33,475 --> 00:28:37,645
we can see we've got our cart object coming from the Vuex store now.

450
00:28:37,645 --> 00:28:43,405
How we can use this is we can now go into here,

451
00:28:43,405 --> 00:28:46,945
let's create a span,

452
00:28:46,945 --> 00:28:50,140
and inside here in the v-html,

453
00:28:50,140 --> 00:28:53,890
we can add in the item count from our cart.

454
00:28:53,890 --> 00:28:57,295
I'm going to do cart.item_count.

455
00:28:57,295 --> 00:29:00,475
This is, of course an attribute on the cart object,

456
00:29:00,475 --> 00:29:02,305
you can see here.

457
00:29:02,305 --> 00:29:05,590
If I "Save", "Refresh" the page over here,

458
00:29:05,590 --> 00:29:09,595
you can see that we've got one item in the cart.

459
00:29:09,595 --> 00:29:13,030
Of course, we could have achieved the same result using

460
00:29:13,030 --> 00:29:18,190
shopify.liquid but what we're going to do now is update the product page to

461
00:29:18,190 --> 00:29:23,470
submit the variant ID through Vue rather than through the standard Shopify

462
00:29:23,470 --> 00:29:30,145
means which ends up processing the "Add to cart" and moving you to the cart page.

463
00:29:30,145 --> 00:29:31,990
As you can see here,

464
00:29:31,990 --> 00:29:36,835
we've already got that interaction happening between the header and the cart page.

465
00:29:36,835 --> 00:29:38,665
Just to complete this,

466
00:29:38,665 --> 00:29:40,375
let's go back to the product page.

467
00:29:40,375 --> 00:29:45,355
Let's go to the product page code, right here.

468
00:29:45,355 --> 00:29:49,015
What we're going to do is right here,

469
00:29:49,015 --> 00:29:51,670
add in an event handler,

470
00:29:51,670 --> 00:29:53,905
we could actually remove this form completely

471
00:29:53,905 --> 00:29:56,380
and just have a button that does this as well,

472
00:29:56,380 --> 00:29:59,155
but let's just stick with the form for now and make it easier.

473
00:29:59,155 --> 00:30:01,315
We're going to attach this to the submit event,

474
00:30:01,315 --> 00:30:02,500
and as an extra modifier,

475
00:30:02,500 --> 00:30:04,755
we can put in here called prevent,

476
00:30:04,755 --> 00:30:07,980
and that's going to prevent the default submit functionality,

477
00:30:07,980 --> 00:30:09,510
which is, of course, what we want.

478
00:30:09,510 --> 00:30:13,335
In here, we can put a method that's going to handle the Add to Cart.

479
00:30:13,335 --> 00:30:15,395
I'm just going to create that now.

480
00:30:15,395 --> 00:30:22,045
Let's go down after the final method and create a handle_atc function.

481
00:30:22,045 --> 00:30:26,155
All it's going to do is take the ID of the variant that needs to be added to the cart,

482
00:30:26,155 --> 00:30:32,620
and we're just going to dispatch the "Add to cart" action with the payload of that ID.

483
00:30:32,620 --> 00:30:35,575
Then we're going to go up here.

484
00:30:35,575 --> 00:30:37,555
Where was it? Right here.

485
00:30:37,555 --> 00:30:42,640
To handle_atc, and as the argument in that method,

486
00:30:42,640 --> 00:30:46,565
we're going to put the current variant ID.

487
00:30:46,565 --> 00:30:49,530
This makes the hidden fields a little bit redundant,

488
00:30:49,530 --> 00:30:51,060
but it should still work.

489
00:30:51,060 --> 00:30:52,770
Let's go over here,

490
00:30:52,770 --> 00:30:58,640
refresh the page, and let's see what happens when we click "Add to cart".

491
00:30:58,640 --> 00:31:02,140
You can now see that the page doesn't refresh,

492
00:31:02,140 --> 00:31:03,955
but something did change.

493
00:31:03,955 --> 00:31:07,330
The number in the cart updated.

494
00:31:07,330 --> 00:31:10,120
We could add in other interactions like we could have

495
00:31:10,120 --> 00:31:12,700
it pop up here saying, "Recently added",

496
00:31:12,700 --> 00:31:15,025
we could still redirect to the cart,

497
00:31:15,025 --> 00:31:18,565
we could have a side cart pop out like we saw earlier.

498
00:31:18,565 --> 00:31:21,475
We could do all sorts of things but the point is,

499
00:31:21,475 --> 00:31:28,015
we have now got synchronization of data between our header and our cart page.

500
00:31:28,015 --> 00:31:31,285
As you can see, the number in our header is

501
00:31:31,285 --> 00:31:36,640
updating when we update the items on our cart page,

502
00:31:36,640 --> 00:31:39,115
even though they're in separate apps,

503
00:31:39,115 --> 00:31:43,630
and the reason why is we're sharing data between them using Vuex.

504
00:31:43,630 --> 00:31:46,315
That's a little bonus on Vuex for you guys.

505
00:31:46,315 --> 00:31:52,135
If you are building a fully featured side cart while having a fully featured cart page,

506
00:31:52,135 --> 00:31:55,300
then you're going to want to share data between them,

507
00:31:55,300 --> 00:32:00,565
and Vuex is the go-to solution for doing this work in Vue.

508
00:32:00,565 --> 00:32:02,680
I hope you learned something from this lesson.

509
00:32:02,680 --> 00:32:07,990
If you want to incorporate a side cart and use Vuex in your class project,

510
00:32:07,990 --> 00:32:09,205
I encourage you to do so.

511
00:32:09,205 --> 00:32:10,600
I'll give you more details about

512
00:32:10,600 --> 00:32:14,635
your class project in the final video that's coming up next.

513
00:32:14,635 --> 00:32:18,200
Thanks for watching. I'll see you in that one.

