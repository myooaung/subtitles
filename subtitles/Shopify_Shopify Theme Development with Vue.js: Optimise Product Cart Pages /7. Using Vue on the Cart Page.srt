1
00:00:00,000 --> 00:00:03,570
In the last lesson, we hooked up the functionality for

2
00:00:03,570 --> 00:00:06,555
the variant selection on the product page.

3
00:00:06,555 --> 00:00:09,300
Now if you change this is going to change all of

4
00:00:09,300 --> 00:00:12,599
the elements on the page that are linked to that selection.

5
00:00:12,599 --> 00:00:16,515
Let's up the ante now and work on the cart page.

6
00:00:16,515 --> 00:00:17,820
As you can see here,

7
00:00:17,820 --> 00:00:20,325
there's quite a few possible interactions.

8
00:00:20,325 --> 00:00:24,360
One, we should be able to update the quantity,

9
00:00:24,360 --> 00:00:27,915
so we can add more T-shirts to our order,

10
00:00:27,915 --> 00:00:30,000
add less T-shirts to our order,

11
00:00:30,000 --> 00:00:33,270
we should be able to remove a line item from the cart,

12
00:00:33,270 --> 00:00:34,920
clicking this trash button.

13
00:00:34,920 --> 00:00:37,630
We should also be able to add any of these up

14
00:00:37,630 --> 00:00:40,920
sells to the cart and have the cart live update.

15
00:00:40,920 --> 00:00:45,285
In this lesson, that's what we're going to build using Vue.

16
00:00:45,285 --> 00:00:47,200
We just refresh the page,

17
00:00:47,200 --> 00:00:49,270
make sure everything is in sync.

18
00:00:49,270 --> 00:00:56,380
Let's move on from our product template here and open up our cart template.

19
00:00:56,380 --> 00:00:59,360
In this lesson, we're going to have to refactor

20
00:00:59,360 --> 00:01:02,435
some of these loops that had been created in JavaScript,

21
00:01:02,435 --> 00:01:05,840
because we'll be updating these lists using Vue.

22
00:01:05,840 --> 00:01:09,260
It's going to be a lot more dynamic even more so

23
00:01:09,260 --> 00:01:13,565
than what we did in the previous product template.

24
00:01:13,565 --> 00:01:19,445
As we've done before, let's open up a script tag at the bottom of template file here,

25
00:01:19,445 --> 00:01:22,085
and using the same convention,

26
00:01:22,085 --> 00:01:25,535
I'm going to call this Vue app CartPage.

27
00:01:25,535 --> 00:01:30,660
Then I'm going to put that object into a create Vue app method,

28
00:01:30,660 --> 00:01:35,915
so Vue.createApp CartPage.mount,

29
00:01:35,915 --> 00:01:41,830
and I'm going to mount it to the element which has the ID of CartPage.

30
00:01:41,830 --> 00:01:47,780
Now, one of the biggest differences between this Vue instance in this template compared

31
00:01:47,780 --> 00:01:53,060
to the product template is we're not going to use Shopify Liquid to load in the data.

32
00:01:53,060 --> 00:01:58,640
The reason why is we have an API called the cart Ajax API that allows us

33
00:01:58,640 --> 00:02:04,775
to use Ajax request to gather cart information and update the cart.

34
00:02:04,775 --> 00:02:08,030
We actually don't need to use Shopify Liquid at all.

35
00:02:08,030 --> 00:02:11,330
I think it might be worth mentioning that we could actually

36
00:02:11,330 --> 00:02:15,155
use the Ajax API in our product template as well.

37
00:02:15,155 --> 00:02:17,810
Instead of this where we're creating

38
00:02:17,810 --> 00:02:21,860
the data objects using different Shopify Liquid tags,

39
00:02:21,860 --> 00:02:23,359
what we could have done instead,

40
00:02:23,359 --> 00:02:25,445
and I'll just paste in some code right now,

41
00:02:25,445 --> 00:02:28,715
is instead of this right here,

42
00:02:28,715 --> 00:02:30,440
just comment this out,

43
00:02:30,440 --> 00:02:32,600
so it's not distracting,

44
00:02:32,800 --> 00:02:38,435
instead what we could have done is started with an empty product object

45
00:02:38,435 --> 00:02:44,060
and then brought in the product information via the Ajax API as well.

46
00:02:44,060 --> 00:02:45,740
I opted against that,

47
00:02:45,740 --> 00:02:51,170
and the reason why is because we want the objects that populate on page load,

48
00:02:51,170 --> 00:02:53,330
this can cause additional problems,

49
00:02:53,330 --> 00:02:56,150
if this is empty on page load and that gets loaded,

50
00:02:56,150 --> 00:02:57,605
just makes it a little bit harder.

51
00:02:57,605 --> 00:03:00,860
But this is an option as well on your product page app,

52
00:03:00,860 --> 00:03:04,690
if you wanted to avoid using Shopify Liquid.

53
00:03:04,690 --> 00:03:08,285
I'll just put this code back to where it was before.

54
00:03:08,285 --> 00:03:12,485
Much the same concept as on the product page to the cart page,

55
00:03:12,485 --> 00:03:17,315
we could load in the cart information using Shopify Liquid.

56
00:03:17,315 --> 00:03:20,120
But in order to update the cart on the fly,

57
00:03:20,120 --> 00:03:22,955
we're going to need to use the Ajax API as well.

58
00:03:22,955 --> 00:03:29,630
What we're going to do is only work with the cart object via the Ajax API.

59
00:03:29,630 --> 00:03:31,610
In this particular app,

60
00:03:31,610 --> 00:03:34,440
we're not going to have to use Shopify Liquid.

61
00:03:34,440 --> 00:03:36,090
That's a big difference.

62
00:03:36,090 --> 00:03:37,805
As mentioned earlier in the class,

63
00:03:37,805 --> 00:03:41,765
I expect that you understand a little bit about the Ajax API.

64
00:03:41,765 --> 00:03:45,275
If you don't, there is a lesson that I'll link up

65
00:03:45,275 --> 00:03:48,910
in the description from a previous Skillshare class of mine.

66
00:03:48,910 --> 00:03:56,000
The Ajax API is a way for us to gather especially cart information via JavaScript.

67
00:03:56,000 --> 00:03:58,730
We don't have to actually use Shopify liquid.

68
00:03:58,730 --> 00:04:02,660
This is perfect for creating front end cart interactions,

69
00:04:02,660 --> 00:04:05,635
which we're going to be doing right here using Vue.

70
00:04:05,635 --> 00:04:11,280
Let's actually load in some cart data from the Ajax API right now.

71
00:04:11,280 --> 00:04:13,520
Like I showed you before with the product object,

72
00:04:13,520 --> 00:04:19,640
we're going to have to start with an empty data object or an empty cart object here.

73
00:04:19,640 --> 00:04:23,000
We know that inside the cart object they're going to be items.

74
00:04:23,000 --> 00:04:25,655
We can define a basic structure here,

75
00:04:25,655 --> 00:04:28,745
but until the Ajax request comes back,

76
00:04:28,745 --> 00:04:31,580
we can't actually populate this data yet.

77
00:04:31,580 --> 00:04:36,095
We're just going to start with cart items as an empty array.

78
00:04:36,095 --> 00:04:37,220
But what we're going to do on

79
00:04:37,220 --> 00:04:42,410
the created lifecycle hook is update this object right here.

80
00:04:42,410 --> 00:04:45,110
I just mentioned a new concept here, lifecycle hooks.

81
00:04:45,110 --> 00:04:47,750
It's basically different parts of

82
00:04:47,750 --> 00:04:53,135
the creation process and mounting process of a Vue instance,

83
00:04:53,135 --> 00:04:55,145
we can trigger certain things.

84
00:04:55,145 --> 00:04:58,145
Just like you would when you're writing,

85
00:04:58,145 --> 00:05:01,010
say, jQuery or any other JavaScript,

86
00:05:01,010 --> 00:05:03,005
you would wait for the page to load,

87
00:05:03,005 --> 00:05:07,390
for the DOM to load in order to execute some JavaScript.

88
00:05:07,390 --> 00:05:12,095
With Vue, we can plug into different what's called lifecycle methods.

89
00:05:12,095 --> 00:05:17,070
Just a quick look-up of what this is.

90
00:05:17,270 --> 00:05:20,220
If there is a search here,

91
00:05:20,220 --> 00:05:25,440
lifecycle hooks, we've got beforeCreate,

92
00:05:25,440 --> 00:05:28,715
created, beforeMount, mounted, beforeUpdate, updated.

93
00:05:28,715 --> 00:05:33,355
But basically the main common ones are mounted and created.

94
00:05:33,355 --> 00:05:39,260
What I'm going to do is as soon as the Vue instance has been created,

95
00:05:39,260 --> 00:05:45,360
I want to trigger that Ajax request and update our cart object.

96
00:05:45,470 --> 00:05:50,670
Let's actually go over to our cart page and let's

97
00:05:50,670 --> 00:05:55,355
add in that lifecycle hook right after the data method there.

98
00:05:55,355 --> 00:05:59,065
It's just a method on the root of the Vue instance,

99
00:05:59,065 --> 00:06:01,985
so we'll say when the instance is created,

100
00:06:01,985 --> 00:06:04,969
we're going to create a get request,

101
00:06:04,969 --> 00:06:07,240
and this is using jQuery.

102
00:06:07,240 --> 00:06:09,605
You should be familiar with this syntax.

103
00:06:09,605 --> 00:06:14,890
We're using jQuery to hit the cart.js endpoint,

104
00:06:14,890 --> 00:06:19,605
then we're going to pipe a.then, treat the response.

105
00:06:19,605 --> 00:06:22,199
We're going to JSON parse the response,

106
00:06:22,199 --> 00:06:24,925
so that's going to become a JavaScript object then.

107
00:06:24,925 --> 00:06:28,820
Then we're going to take that JavaScript object which is going to be

108
00:06:28,820 --> 00:06:32,959
our cart and then here we're going to set

109
00:06:32,959 --> 00:06:36,080
the cart object in the data of

110
00:06:36,080 --> 00:06:41,420
that instance to the cart object that is returned from the API.

111
00:06:41,420 --> 00:06:44,075
If I go over here,

112
00:06:44,075 --> 00:06:47,890
refresh and open Vue DevTools.

113
00:06:47,890 --> 00:06:55,315
You can see that the cart object from the Ajax API is populating our.data now.

114
00:06:55,315 --> 00:06:59,075
You can see so much information all from the cart Ajax API,

115
00:06:59,075 --> 00:07:02,690
we have all of that information now inside our Vue instance.

116
00:07:02,690 --> 00:07:04,640
If you ever want to check on

117
00:07:04,640 --> 00:07:09,470
the Ajax API request as always you can go into the Network tab,

118
00:07:09,470 --> 00:07:11,880
refreshing the page, here you should see it.

119
00:07:11,880 --> 00:07:15,460
It should be one of the first ones there, cart.js.

120
00:07:15,460 --> 00:07:20,135
You can see we're making this GET request status code 200.

121
00:07:20,135 --> 00:07:23,480
It's all good. This is what comes back.

122
00:07:23,480 --> 00:07:26,615
Awesome. We've now got our cart.

123
00:07:26,615 --> 00:07:30,650
What we want to do is use our card object inside

124
00:07:30,650 --> 00:07:35,075
Vue to render this part now rather than Shopify Liquid,

125
00:07:35,075 --> 00:07:38,330
because we're going to be updating the cart based on if

126
00:07:38,330 --> 00:07:41,720
we delete a product or we add a new product to the cart.

127
00:07:41,720 --> 00:07:45,845
There's going to be products added and removed from this list on the fly,

128
00:07:45,845 --> 00:07:47,720
and we don't want to have to wait for

129
00:07:47,720 --> 00:07:52,820
Shopify Liquid to do a page load in order to update this table.

130
00:07:52,820 --> 00:07:56,870
What I'm going to do is introduce some new things we haven't seen

131
00:07:56,870 --> 00:08:00,860
before in this class which is a loop,

132
00:08:00,860 --> 00:08:04,310
and some conditionals as well inside Vue.

133
00:08:04,310 --> 00:08:06,260
As you can see here,

134
00:08:06,260 --> 00:08:09,320
we've got if the number of items in

135
00:08:09,320 --> 00:08:13,880
the cart is greater than zero then we want to loop through them and show them.

136
00:08:13,880 --> 00:08:17,120
We don't want to do that with Shopify Liquid anymore.

137
00:08:17,120 --> 00:08:19,580
Let's refactor this to use Vue.

138
00:08:19,580 --> 00:08:25,970
What I'm going to do is get rid of that and use what's called a template tag.

139
00:08:25,970 --> 00:08:31,460
A template tag is basically a tag that's not going to be rendered in Vue,

140
00:08:31,460 --> 00:08:34,475
but it's just used for logic and loops.

141
00:08:34,475 --> 00:08:41,210
I could do a div here and wrap this all in a div and then do my v-if,

142
00:08:41,210 --> 00:08:43,910
but I don't want to actually render a div.

143
00:08:43,910 --> 00:08:47,194
I'm just going to div-template,

144
00:08:47,194 --> 00:08:50,000
and you'll see in just a second it won't render an item,

145
00:08:50,000 --> 00:08:54,950
but it will render what's in here if the if-statement is true.

146
00:08:54,950 --> 00:08:59,255
To put a conditional inside of our Vue HTML here,

147
00:08:59,255 --> 00:09:01,595
we can use v-if,

148
00:09:01,595 --> 00:09:06,440
and what I want to do is similar to how we just did it in Shopify Liquid.

149
00:09:06,440 --> 00:09:13,430
I'm going to look at cart.items.length and check if it's greater than zero.

150
00:09:13,430 --> 00:09:16,475
If so, we're going to loop through,

151
00:09:16,475 --> 00:09:21,650
else, what I'm going to do, end that template,

152
00:09:21,650 --> 00:09:23,870
create a new one for else,

153
00:09:23,870 --> 00:09:26,910
and all you do is v-else,

154
00:09:27,520 --> 00:09:32,435
and put in your cart is currently empty.

155
00:09:32,435 --> 00:09:34,655
I'll get rid of that.

156
00:09:34,655 --> 00:09:40,655
End if-statement there and refresh the page over here,

157
00:09:40,655 --> 00:09:42,140
it should look the same.

158
00:09:42,140 --> 00:09:46,430
But one thing you should notice actually is that when we refresh the page,

159
00:09:46,430 --> 00:09:49,640
there's a slight glitch before it appears because we're

160
00:09:49,640 --> 00:09:54,250
calculating whether it should show or not based on JavaScript.

161
00:09:54,250 --> 00:09:59,395
There is a split second where the cart object is actually empty.

162
00:09:59,395 --> 00:10:05,005
This is actually false for a split second before the cart information is loaded in,

163
00:10:05,005 --> 00:10:06,780
and then this becomes true.

164
00:10:06,780 --> 00:10:10,535
It's a bit glitchy, but we'll fix it up later in this lesson.

165
00:10:10,535 --> 00:10:15,380
Now we want to replace this Shopify Liquid for loop with a Vue for loop.

166
00:10:15,380 --> 00:10:20,195
For this we can just put the for loop directly on this element itself.

167
00:10:20,195 --> 00:10:25,055
I'm going to get rid of the beginning-for and end-for.

168
00:10:25,055 --> 00:10:28,160
Let's change the indenting here.

169
00:10:28,160 --> 00:10:39,150
We can do v-for and what we can do here is for item in cart.items.

170
00:10:39,370 --> 00:10:43,320
Let's see if we go into the issues doing that.

171
00:10:43,660 --> 00:10:46,879
As you can see, we've got one position,

172
00:10:46,879 --> 00:10:48,080
but this has, of course,

173
00:10:48,080 --> 00:10:52,490
broken all of these because with our previous code

174
00:10:52,490 --> 00:10:58,655
we created this item object inside our loop so that we could grab these attributes.

175
00:10:58,655 --> 00:11:01,860
We're going to have to refactor that as well.

176
00:11:01,930 --> 00:11:08,735
Going into here, I don't want the Shopify Liquid version of item title.

177
00:11:08,735 --> 00:11:17,585
What I'm going to do instead v-html like we did before, and do item.title.

178
00:11:17,585 --> 00:11:23,195
Using the information inside Vue for the image src,

179
00:11:23,195 --> 00:11:26,570
let's just look at our data object here,

180
00:11:26,570 --> 00:11:28,385
see the title coming across now.

181
00:11:28,385 --> 00:11:31,535
It's go into our items. Have a look.

182
00:11:31,535 --> 00:11:38,345
We've got this image here so we can just go get rid of that.

183
00:11:38,345 --> 00:11:41,390
Put a colon in because it's a dynamic value and we're inserting

184
00:11:41,390 --> 00:11:45,155
a variable here, item.image.

185
00:11:45,155 --> 00:11:48,500
Let's see if that worked correctly.

186
00:11:48,500 --> 00:11:55,400
Yeah. Then down here for item final line price,

187
00:11:55,400 --> 00:11:57,470
we'll format this value in just a second,

188
00:11:57,470 --> 00:12:00,290
but for now, let's just put in the explicit value.

189
00:12:00,290 --> 00:12:04,055
We'll do item, line, price.

190
00:12:04,055 --> 00:12:07,370
Double-check that that works.

191
00:12:07,370 --> 00:12:10,820
Yeah. Again, it's in sense and it's not formatted,

192
00:12:10,820 --> 00:12:12,875
but we'll fix that in just a second.

193
00:12:12,875 --> 00:12:15,470
Then here inside value,

194
00:12:15,470 --> 00:12:20,750
we want to fix that to the actual item quantity.

195
00:12:22,450 --> 00:12:26,495
As always, if we're putting in a variable here, dynamic value,

196
00:12:26,495 --> 00:12:30,995
we need to make that field dynamic by putting in that colon.

197
00:12:30,995 --> 00:12:32,585
I think that's it.

198
00:12:32,585 --> 00:12:35,570
There's no more Shopify Liquid inside here.

199
00:12:35,570 --> 00:12:42,185
Let's get rid of some of this white space and bring in this indenting.

200
00:12:42,185 --> 00:12:46,910
There we go. Actually here in the sidebar, we've got one.

201
00:12:46,910 --> 00:12:53,060
We're just going to remove that v-html and instead of going into a specific item,

202
00:12:53,060 --> 00:12:57,150
we're just going to do cart total price.

203
00:12:57,460 --> 00:13:01,535
Upsell we've still got a Shopify Liquid loop here,

204
00:13:01,535 --> 00:13:03,350
but we'll fix that in just a second.

205
00:13:03,350 --> 00:13:05,795
I'm going to refresh over here,

206
00:13:05,795 --> 00:13:07,145
and as you can see,

207
00:13:07,145 --> 00:13:12,725
all this information is now coming from our Vue instance rather than Shopify Liquid.

208
00:13:12,725 --> 00:13:16,340
Here it is still generated by Shopify Liquid but

209
00:13:16,340 --> 00:13:20,045
we'll get to that after we work on fixing this quantity,

210
00:13:20,045 --> 00:13:22,880
formatting the prices, and enabling

211
00:13:22,880 --> 00:13:27,065
a user to remove a product from the cart using this icon.

212
00:13:27,065 --> 00:13:30,410
First thing we're going to hook up this quantity selector so that it

213
00:13:30,410 --> 00:13:34,475
actually updates the quantity of the line item in the cart.

214
00:13:34,475 --> 00:13:37,820
For that, we're going to create a method,

215
00:13:37,820 --> 00:13:42,844
it's similar to how we did on the product page when the select is changed,

216
00:13:42,844 --> 00:13:46,610
we need to actually trigger a method on that event,

217
00:13:46,610 --> 00:13:47,840
and in this case,

218
00:13:47,840 --> 00:13:51,845
we're going to be submitting a Ajax request to the cart

219
00:13:51,845 --> 00:13:56,810
Ajax API to update the card on the back-end.

220
00:13:56,810 --> 00:14:05,135
Let's actually go after our created life-cycle hook here and create a method's object,

221
00:14:05,135 --> 00:14:09,995
and inside let's create this update cart method.

222
00:14:09,995 --> 00:14:13,505
Now the methods that I've created in this Vue instance,

223
00:14:13,505 --> 00:14:17,090
or I'm going to create in this Vue instance based

224
00:14:17,090 --> 00:14:22,490
of the different functions within the cart Ajax API.

225
00:14:22,490 --> 00:14:26,645
We've got the main ones is get the cart,

226
00:14:26,645 --> 00:14:28,415
add an item to the cart,

227
00:14:28,415 --> 00:14:33,304
update quantities, and then here is change.

228
00:14:33,304 --> 00:14:36,710
You can update quantities and properties as well.

229
00:14:36,710 --> 00:14:38,135
You've also got Clear,

230
00:14:38,135 --> 00:14:39,365
if you want to clear the cart,

231
00:14:39,365 --> 00:14:42,515
we're not going to have a button for clearing the whole cart,

232
00:14:42,515 --> 00:14:45,950
but we are going to trigger this API endpoint in order

233
00:14:45,950 --> 00:14:50,960
to enable removing a line item from the cart or reducing its quantity.

234
00:14:50,960 --> 00:14:55,730
Both are going to use the same end point and therefore the same method.

235
00:14:55,730 --> 00:14:57,110
Going back to the code,

236
00:14:57,110 --> 00:15:00,635
the two attributes that I'm going to be putting in here,

237
00:15:00,635 --> 00:15:02,840
variant id and quantity.

238
00:15:02,840 --> 00:15:06,395
That's based, of course of what we put through here.

239
00:15:06,395 --> 00:15:08,885
We've got a variant id and the quantity,

240
00:15:08,885 --> 00:15:12,470
and then we send that through in a update's object.

241
00:15:12,470 --> 00:15:16,355
What I'm going to do id and quantity,

242
00:15:16,355 --> 00:15:18,305
and then inside this method,

243
00:15:18,305 --> 00:15:23,330
I'm going to start the post request using jQuery and

244
00:15:23,330 --> 00:15:28,760
it's going to the cart update.js end point.

245
00:15:28,760 --> 00:15:31,895
Next we'll put in the body of the request,

246
00:15:31,895 --> 00:15:35,585
and for this, we can do it like this,

247
00:15:35,585 --> 00:15:37,880
or we can do it as a string.

248
00:15:37,880 --> 00:15:39,170
I think this is a little easier,

249
00:15:39,170 --> 00:15:40,805
so I'm going to do it this way.

250
00:15:40,805 --> 00:15:45,290
Essentially all we need to do is have updates in the square brackets,

251
00:15:45,290 --> 00:15:50,105
put the variant id, and then equals followed by the quantity.

252
00:15:50,105 --> 00:15:52,235
I'm just going to do that,

253
00:15:52,235 --> 00:15:54,380
updates, and by the way,

254
00:15:54,380 --> 00:15:55,955
these back ticks, if you're not familiar,

255
00:15:55,955 --> 00:15:59,840
allow us to put these variables within

256
00:15:59,840 --> 00:16:05,000
the string without having to exit and enter into the string over and over again.

257
00:16:05,000 --> 00:16:06,605
With the back ticks set,

258
00:16:06,605 --> 00:16:10,100
I'm going to put id with this syntax in there,

259
00:16:10,100 --> 00:16:14,640
and then after the equals put the quantity.

260
00:16:14,910 --> 00:16:18,340
Then we're going to chain a.then,

261
00:16:18,340 --> 00:16:20,605
just like we've done with get cart,

262
00:16:20,605 --> 00:16:24,310
take the response, JSON parse the response,

263
00:16:24,310 --> 00:16:29,425
and then we're going to be returned to the cart object to which

264
00:16:29,425 --> 00:16:34,840
we are going to set our own cart object equal to.

265
00:16:34,840 --> 00:16:39,730
Now, note that not every AJAX request will return the cart object.

266
00:16:39,730 --> 00:16:42,925
Some of them do return a single-line item,

267
00:16:42,925 --> 00:16:44,365
but in this case,

268
00:16:44,365 --> 00:16:47,740
the update.js endpoint does return the cart.

269
00:16:47,740 --> 00:16:49,960
Same thing, obviously, for get cart,

270
00:16:49,960 --> 00:16:51,460
with add to cart.

271
00:16:51,460 --> 00:16:54,055
I believe it just returns the item.

272
00:16:54,055 --> 00:16:58,015
We'll see that in just a sec when we build that into our upsells.

273
00:16:58,015 --> 00:17:01,390
But for now, we can rely that the update.js cart

274
00:17:01,390 --> 00:17:05,410
endpoint is going to give us back the cart.

275
00:17:05,410 --> 00:17:07,270
Obviously, this is not going to run,

276
00:17:07,270 --> 00:17:09,445
unless we attach it to our select.

277
00:17:09,445 --> 00:17:12,250
So let's go on to that change method.

278
00:17:12,250 --> 00:17:14,980
Just like we did with the product template,

279
00:17:14,980 --> 00:17:20,950
I'm going to put inside this @change, update cut.

280
00:17:20,950 --> 00:17:26,125
For the variant ID, we've got it set on the item.

281
00:17:26,125 --> 00:17:28,795
There we go, variant ID.

282
00:17:28,795 --> 00:17:30,010
Then the second argument,

283
00:17:30,010 --> 00:17:35,920
the quantity is also sets on the item, it's just quantity.

284
00:17:35,920 --> 00:17:42,700
Now, if we leave this like it is and then we go back here and we put this up,

285
00:17:42,700 --> 00:17:44,380
you'll see it goes back to one,

286
00:17:44,380 --> 00:17:47,500
and that's because we haven't set V-model here.

287
00:17:47,500 --> 00:17:49,690
So just like we did on the Products page,

288
00:17:49,690 --> 00:17:54,680
we need to change this to V-model to get that two-way data binding.

289
00:17:55,080 --> 00:18:00,835
Now let's refresh the page and let's see if this works.

290
00:18:00,835 --> 00:18:04,300
As you can see, when we put up the quantity,

291
00:18:04,300 --> 00:18:08,800
we see the line price and the total price update.

292
00:18:08,800 --> 00:18:12,280
Let's check all the individual parts are working.

293
00:18:12,280 --> 00:18:15,535
It should be if it's getting that result,

294
00:18:15,535 --> 00:18:20,690
but let me refresh our Network tab over here,

295
00:18:20,730 --> 00:18:24,309
clear the Network tab, click this,

296
00:18:24,309 --> 00:18:29,095
and you'll see that we are hitting that update.js endpoint.

297
00:18:29,095 --> 00:18:31,390
It is coming back green.

298
00:18:31,390 --> 00:18:33,985
There you can see what we're sending to it,

299
00:18:33,985 --> 00:18:36,070
and here you can see what we get back.

300
00:18:36,070 --> 00:18:38,320
It's a whole new cart object.

301
00:18:38,320 --> 00:18:41,200
That, as we have set in our view,

302
00:18:41,200 --> 00:18:42,985
is going to update this.

303
00:18:42,985 --> 00:18:48,345
If I go into my items and I scroll down to where it has quantity.

304
00:18:48,345 --> 00:18:50,625
Where is quantity? There it is.

305
00:18:50,625 --> 00:18:52,875
If I click on this,

306
00:18:52,875 --> 00:18:54,240
it'll take a second,

307
00:18:54,240 --> 00:18:56,955
but then once it comes back from the API,

308
00:18:56,955 --> 00:19:00,290
it'll update it on our view instance as well.

309
00:19:00,290 --> 00:19:04,330
Shopify by default output prices like this, in cents,

310
00:19:04,330 --> 00:19:08,515
with no formatting, so we're going to have to format it ourselves in JavaScript.

311
00:19:08,515 --> 00:19:14,005
But if you remember, we included this shopify-money.js file,

312
00:19:14,005 --> 00:19:17,815
and inside that shopify.money.js file,

313
00:19:17,815 --> 00:19:22,120
we have this format money method on the Shopify object.

314
00:19:22,120 --> 00:19:23,755
We're going to use that now.

315
00:19:23,755 --> 00:19:26,380
What I'm going to do is create a new method so we can

316
00:19:26,380 --> 00:19:29,350
use this at different points in our application.

317
00:19:29,350 --> 00:19:31,105
Here is the methods object.

318
00:19:31,105 --> 00:19:34,555
I'm going to carefully check where that ends,

319
00:19:34,555 --> 00:19:36,220
and then before it ends,

320
00:19:36,220 --> 00:19:41,335
I'm going to add in another method here called format prices.

321
00:19:41,335 --> 00:19:44,470
Inside this method, there's two prices I want to update.

322
00:19:44,470 --> 00:19:50,005
I want to update the line price and I want to update the total price.

323
00:19:50,005 --> 00:19:52,915
Those are the two ones we can see in our UI here.

324
00:19:52,915 --> 00:19:55,990
But I'm not actually going to update the values themselves,

325
00:19:55,990 --> 00:20:01,570
I'm going to create a new value called formatted line price and formatted total price.

326
00:20:01,570 --> 00:20:04,405
That way, we retain those old ones.

327
00:20:04,405 --> 00:20:05,905
You can do it any way you want,

328
00:20:05,905 --> 00:20:07,975
you can override them,

329
00:20:07,975 --> 00:20:12,970
but I'm going to leave the original in place and just create a new one.

330
00:20:12,970 --> 00:20:15,565
I'm going to create a loop here,

331
00:20:15,565 --> 00:20:18,310
looping through the different items in our cart.

332
00:20:18,310 --> 00:20:25,030
For each item, I'm going to create a new attribute, formatted line price,

333
00:20:25,030 --> 00:20:28,899
which is going to be equal to the item line price,

334
00:20:28,899 --> 00:20:35,200
but with a difference that we're running it through the Shopify format money method.

335
00:20:35,200 --> 00:20:39,520
I'm going to wrap that in format money.

336
00:20:39,520 --> 00:20:42,205
That's for the line item line price.

337
00:20:42,205 --> 00:20:44,770
Then for the cart overall,

338
00:20:44,770 --> 00:20:49,900
I'm going to create a new attribute, formatted total price,

339
00:20:49,900 --> 00:20:52,090
and that's going to be equal, again,

340
00:20:52,090 --> 00:20:59,210
to the result of Shopify format money (this.cart.total price).

341
00:21:00,480 --> 00:21:03,220
Now, of course, we're not running this anywhere,

342
00:21:03,220 --> 00:21:06,190
so let's run this after we set the cart.

343
00:21:06,190 --> 00:21:07,945
There's two places where we do that.

344
00:21:07,945 --> 00:21:13,480
I'm going to run it here after we update the cart,

345
00:21:13,480 --> 00:21:17,180
and run it here when we first load the cart.

346
00:21:17,610 --> 00:21:21,040
Now, refreshing the page,

347
00:21:21,040 --> 00:21:25,375
you'll see that we've still got the same values here.

348
00:21:25,375 --> 00:21:28,405
But if we go into our object here,

349
00:21:28,405 --> 00:21:32,200
you can see that we've got a formatted line price,

350
00:21:32,200 --> 00:21:34,750
and on the cart,

351
00:21:34,750 --> 00:21:37,165
we should have a formatted total price.

352
00:21:37,165 --> 00:21:40,690
What we have to do is go into our HTML and update those.

353
00:21:40,690 --> 00:21:42,565
So instead of line price,

354
00:21:42,565 --> 00:21:49,855
formatted line price, and instead of total price, formatted total price.

355
00:21:49,855 --> 00:21:53,020
Then it'll use the formatted version rather than

356
00:21:53,020 --> 00:21:57,085
the other version that comes directly from Shopify. There you go.

357
00:21:57,085 --> 00:21:59,470
Now we've got our quantity selectors working,

358
00:21:59,470 --> 00:22:04,495
and it is updating our line prices and total price.

359
00:22:04,495 --> 00:22:10,030
Now, you may have noticed here that we're not really writing DRY code when we've got

360
00:22:10,030 --> 00:22:16,060
this.cart equals cart and this.format prices two times duplicated.

361
00:22:16,060 --> 00:22:18,805
What I'm going to do is move both of these

362
00:22:18,805 --> 00:22:22,885
into a new method that I'm going to call set cart.

363
00:22:22,885 --> 00:22:26,140
It's going to take a cart object and then it's going

364
00:22:26,140 --> 00:22:31,045
to put that cart object into the cart and then format prices.

365
00:22:31,045 --> 00:22:37,855
Instead of this, what I'm going to do is put this set cart,

366
00:22:37,855 --> 00:22:41,740
and then we can do the same for update cart.

367
00:22:41,740 --> 00:22:46,600
That just makes our code a little bit more DRY so we can recycle code.

368
00:22:46,600 --> 00:22:48,730
There you go, it still works.

369
00:22:48,730 --> 00:22:52,030
Now that we've got that update cart function

370
00:22:52,030 --> 00:22:54,730
working and we're hitting the API successfully,

371
00:22:54,730 --> 00:22:58,150
it should be pretty easy to enable this button to work.

372
00:22:58,150 --> 00:23:06,100
All I'm going to do is create another method after format prices called remove from cart.

373
00:23:06,100 --> 00:23:08,995
All this is going to take is a variant ID.

374
00:23:08,995 --> 00:23:12,040
It doesn't need to know the quantity because the quantity is implied.

375
00:23:12,040 --> 00:23:15,940
The quantity, of course, is going to be zero if we're removing it from the cart.

376
00:23:15,940 --> 00:23:19,990
What I can do is just do this, update cart,

377
00:23:19,990 --> 00:23:23,170
put in the ID, and then for the second argument,

378
00:23:23,170 --> 00:23:24,805
the quantity, just put in zero.

379
00:23:24,805 --> 00:23:30,340
Now we're going to link this up on the onclick event for this button.

380
00:23:30,340 --> 00:23:33,400
I'm going to use that @ symbol syntax,

381
00:23:33,400 --> 00:23:41,060
and write here, "Remove from cart item.variant ID.

382
00:23:41,280 --> 00:23:46,100
Now let's check if that works.

383
00:23:47,490 --> 00:23:52,585
Perfect. We have just removed an item from our cart.

384
00:23:52,585 --> 00:23:54,580
If I go back to the T-shirt,

385
00:23:54,580 --> 00:23:58,075
let's add in a small red T-shirt.

386
00:23:58,075 --> 00:24:01,705
You'll see it's there. We can update the quantity,

387
00:24:01,705 --> 00:24:04,135
we can remove it from the cart,

388
00:24:04,135 --> 00:24:06,640
and it's all working.

389
00:24:06,640 --> 00:24:11,125
That is our main functions within the cart table.

390
00:24:11,125 --> 00:24:13,270
Let's take a short break,

391
00:24:13,270 --> 00:24:16,960
and let's actually code up these upsells here.

392
00:24:16,960 --> 00:24:20,335
We're going to add in another function here to add to cart,

393
00:24:20,335 --> 00:24:25,550
as well as to update and remove items that are already in the cart.

