WEBVTT
ï»¿1
00:00:00.000 --> 00:00:05.170
Of course, not every store is going to have upsells on their cart page.

2
00:00:05.170 --> 00:00:09.105
But it's a good opportunity to increase average order value by

3
00:00:09.105 --> 00:00:13.860
offering an easy way for customers to add additional products to their cart.

4
00:00:13.860 --> 00:00:18.675
Using Vue.js, we can make this interaction pretty smooth and seamless.

5
00:00:18.675 --> 00:00:22.470
If we go into our code editor again,

6
00:00:22.470 --> 00:00:26.070
you can see that we're bringing in these values through

7
00:00:26.070 --> 00:00:31.905
Shopify Liquid and we're doing our loops and conditionals through Shopify Liquid.

8
00:00:31.905 --> 00:00:34.730
Just like we've done up here, we're going to need to refactor this.

9
00:00:34.730 --> 00:00:37.515
The first thing we need to do is get these upsells

10
00:00:37.515 --> 00:00:40.900
inside an array on an actual view instance.

11
00:00:40.900 --> 00:00:45.695
After cart, what I'm going to do is create an array called upsells.

12
00:00:45.695 --> 00:00:51.454
Here we're going to load in that collection that we're including up here,

13
00:00:51.454 --> 00:00:55.190
but in our view data so we can make this section a bit

14
00:00:55.190 --> 00:00:59.315
more interactive and you'll see why we need to do that in just a second.

15
00:00:59.315 --> 00:01:02.525
Just like we did on the product page for variance,

16
00:01:02.525 --> 00:01:09.520
I'm going to create a Liquid loop here to bring in products from a particular collection.

17
00:01:09.520 --> 00:01:11.675
I'm going to use the shoes collection.

18
00:01:11.675 --> 00:01:15.890
Remember, this value here needs to match the handle of a collection in

19
00:01:15.890 --> 00:01:21.245
your store if you've imported the shoes and then created a collection with those shoes,

20
00:01:21.245 --> 00:01:25.160
and then verify that the handle is shoes then it should work.

21
00:01:25.160 --> 00:01:27.470
Otherwise, you'll need to do that.

22
00:01:27.470 --> 00:01:30.320
Obviously, we're going to have to put products on the end here.

23
00:01:30.320 --> 00:01:32.090
I'm going to close that,

24
00:01:32.090 --> 00:01:35.180
endfor, and then inside here,

25
00:01:35.180 --> 00:01:41.460
open up an object and let's copy some values over from Shopify Liquid.

26
00:01:41.460 --> 00:01:42.730
So tidal.

27
00:01:42.730 --> 00:01:44.735
Following this same format,

28
00:01:44.735 --> 00:01:46.850
I think I'm going to just breeze through these right

29
00:01:46.850 --> 00:01:49.640
now because we've seen this before and I'm just basically

30
00:01:49.640 --> 00:01:56.405
copying the data from the Shopify back-end using Shopify Liquid into our front end here.

31
00:01:56.405 --> 00:01:59.530
I'll fast forward through this a little bit.

32
00:02:04.340 --> 00:02:08.450
Make sure to end the objects with a comma

33
00:02:08.450 --> 00:02:12.335
here so that you have separation between those objects.

34
00:02:12.335 --> 00:02:14.720
As you can see here, we're bringing in the title,

35
00:02:14.720 --> 00:02:16.280
the handle, the image,

36
00:02:16.280 --> 00:02:20.370
the product ID; which will become clear why we're doing that in just a sec,

37
00:02:20.370 --> 00:02:22.535
and of course the variant ID.

38
00:02:22.535 --> 00:02:24.740
Because the variant ID, as we know,

39
00:02:24.740 --> 00:02:27.490
is what actually gets added to the cart.

40
00:02:27.490 --> 00:02:31.910
Let's refresh our page and just check that the data is coming across.

41
00:02:31.910 --> 00:02:33.080
As you can see here,

42
00:02:33.080 --> 00:02:36.430
we haven't actually got anything in our upsells array,

43
00:02:36.430 --> 00:02:39.065
let's check why that might be the case.

44
00:02:39.065 --> 00:02:45.750
I see here that we forgot an s on collections. Hit save on that.

45
00:02:48.650 --> 00:02:54.400
Now you can see the upsell array has all the same information as we have down

46
00:02:54.400 --> 00:03:00.455
here and now we can loop through this instead of using Shopify Liquid.

47
00:03:00.455 --> 00:03:03.390
Let's go in and refactor this code now.

48
00:03:03.390 --> 00:03:08.305
I'm going to inside here do a v-for or v-if rather.

49
00:03:08.305 --> 00:03:13.480
If upsells.length is greater than zero.

50
00:03:13.480 --> 00:03:16.865
We can get rid of this surrounding if statement now.

51
00:03:16.865 --> 00:03:18.685
That is some code that shouldn't be there.

52
00:03:18.685 --> 00:03:19.885
I'm just going to remove that.

53
00:03:19.885 --> 00:03:21.460
Then inside the loop,

54
00:03:21.460 --> 00:03:23.140
instead of doing this loop,

55
00:03:23.140 --> 00:03:26.110
what we're going to do is put it here.

56
00:03:26.110 --> 00:03:28.040
I'm going to do a template,

57
00:03:28.040 --> 00:03:32.490
v-for upsell in upsells.

58
00:03:32.490 --> 00:03:39.840
We put this around that to replace the for-loop.

59
00:03:39.840 --> 00:03:43.190
In order to mimic this limit,

60
00:03:43.190 --> 00:03:46.235
I'll show you in just a sec how we do that,

61
00:03:46.235 --> 00:03:53.625
we're going to have to add in the extra attribute here of index.

62
00:03:53.625 --> 00:03:57.485
This will track the index of the item and the array,

63
00:03:57.485 --> 00:04:04.390
and then we can do v-if index is less than five.

64
00:04:05.180 --> 00:04:11.180
Refreshing the page, you can see that we've lost our upsells generated by Shopify Liquid.

65
00:04:11.180 --> 00:04:14.930
That's because we actually need to go in here and update these attributes.

66
00:04:14.930 --> 00:04:18.685
Just like we did with the cart table above,

67
00:04:18.685 --> 00:04:23.880
I'm going to replace these with view attributes.

68
00:04:24.170 --> 00:04:29.505
Upsell title, and then for this one, the src,

69
00:04:29.505 --> 00:04:32.045
we're going to put the colon in front of it,

70
00:04:32.045 --> 00:04:38.910
remove this and use upsell image.

71
00:04:38.910 --> 00:04:42.890
I think that's it. Refreshing the page over here,

72
00:04:42.890 --> 00:04:44.990
see that still doesn't work.

73
00:04:44.990 --> 00:04:54.155
I think our issue here is that we need to move index to the element underneath.

74
00:04:54.155 --> 00:04:57.280
This is the difference between Vue 2 and Vue 3,

75
00:04:57.280 --> 00:05:03.080
you can do this in Vue 2 but not in Vue 3.

76
00:05:03.080 --> 00:05:06.060
Refresh over here. There you go.

77
00:05:06.060 --> 00:05:08.290
Now we can see the products are in there.

78
00:05:08.290 --> 00:05:11.030
We just need to make this index

79
00:05:11.030 --> 00:05:18.350
less than four and yet now we only have the four products in there.

80
00:05:18.350 --> 00:05:22.885
Now that we're using Vue for display of these upsells now rather than Shopify Liquid,

81
00:05:22.885 --> 00:05:27.595
we're on to the next step which is to enable these "Add to Cart" buttons to work.

82
00:05:27.595 --> 00:05:30.320
What I'm going to do, head over to the code and

83
00:05:30.320 --> 00:05:32.960
let's create a new method for add to cart.

84
00:05:32.960 --> 00:05:34.970
We've got our remove from cart here.

85
00:05:34.970 --> 00:05:37.660
I might just put it before the remove to cart.

86
00:05:37.660 --> 00:05:39.960
Add to cart.

87
00:05:39.960 --> 00:05:43.505
In order to add any product to the cart,

88
00:05:43.505 --> 00:05:46.580
we're going to need to know its variant ID.

89
00:05:46.580 --> 00:05:53.255
As always, we can refer to the reference here on the Shopify official documentation.

90
00:05:53.255 --> 00:05:55.250
I just found this by the way,

91
00:05:55.250 --> 00:05:59.610
by searching Shopify Ajax API.

92
00:05:59.750 --> 00:06:02.700
It should be on the Cart API just there.

93
00:06:02.700 --> 00:06:06.240
So not too hard to find with a bit of Googling. Here we go.

94
00:06:06.240 --> 00:06:08.750
We need to send through an items array with

95
00:06:08.750 --> 00:06:12.200
the variant ID of the product and the quantity of how much we want to add.

96
00:06:12.200 --> 00:06:16.340
Currently, our website, we don't have the option to add

97
00:06:16.340 --> 00:06:18.725
more than one quantity at the time of

98
00:06:18.725 --> 00:06:21.470
adding the product to the cart from the product page.

99
00:06:21.470 --> 00:06:22.640
But if we had that,

100
00:06:22.640 --> 00:06:30.229
we could use that value to put in as the option here but in our instance,

101
00:06:30.229 --> 00:06:33.060
we're just going to put in one for this value.

102
00:06:33.060 --> 00:06:36.050
All we need is the variant ID of the product,

103
00:06:36.050 --> 00:06:39.690
which we're going to add one of to the cart.

104
00:06:39.920 --> 00:06:43.880
We're going to open up a post request here.

105
00:06:43.880 --> 00:06:47.435
It's going to be cart add.js.

106
00:06:47.435 --> 00:06:51.080
Next, we're going to have the items array and

107
00:06:51.080 --> 00:06:56.095
inside we're going to have another object and we're just adding one item.

108
00:06:56.095 --> 00:06:58.710
ID is going to be equal to ID.

109
00:06:58.710 --> 00:07:01.610
This syntax means that we don't have to do this,

110
00:07:01.610 --> 00:07:03.080
we can just do that,

111
00:07:03.080 --> 00:07:08.490
and quantity is going to be one as we've mentioned just before.

112
00:07:08.490 --> 00:07:12.709
Then once we get a response back from the API,

113
00:07:12.709 --> 00:07:18.530
we're going to do what we always do JSON pause it so we can have it as

114
00:07:18.530 --> 00:07:25.640
a JavaScript object and then take the item that it returns.

115
00:07:25.640 --> 00:07:29.810
What are we going to do? Let's just console log it because we

116
00:07:29.810 --> 00:07:33.290
can't actually update our cart like we usually would because

117
00:07:33.290 --> 00:07:41.060
the add to cart Ajax request actually returns an item rather than a cart.

118
00:07:41.060 --> 00:07:44.185
Let's go back to here.

119
00:07:44.185 --> 00:07:46.935
Let's open up the Network tab,

120
00:07:46.935 --> 00:07:51.045
close down or clear the previous network activity.

121
00:07:51.045 --> 00:07:52.950
Let's add an item to the cart.

122
00:07:52.950 --> 00:07:54.140
Actually, before we do that,

123
00:07:54.140 --> 00:07:56.315
we have to actually link this.

124
00:07:56.315 --> 00:07:59.920
So I'm going to have to grab add to cart,

125
00:08:00.260 --> 00:08:05.505
put it on the click event here.

126
00:08:05.505 --> 00:08:15.070
I'm going to have to put upsell.variant ID.

127
00:08:15.590 --> 00:08:18.365
Let's refresh over here,

128
00:08:18.365 --> 00:08:20.240
clear the Network tab,

129
00:08:20.240 --> 00:08:23.435
and click "Add to Cart" and let's see what happens.

130
00:08:23.435 --> 00:08:28.275
If we go inside we'll see that we get an items array returned.

131
00:08:28.275 --> 00:08:31.095
It's not actually item, its items.

132
00:08:31.095 --> 00:08:34.100
Here you can see the data that's being passed in.

133
00:08:34.100 --> 00:08:39.360
I'll change this to items.

134
00:08:39.360 --> 00:08:42.370
But regardless, when we go into the console,

135
00:08:42.370 --> 00:08:45.190
you should see that we get that response back

136
00:08:45.190 --> 00:08:48.535
in our console because our console logged it here.

137
00:08:48.535 --> 00:08:50.755
If we refresh the page,

138
00:08:50.755 --> 00:08:53.710
you'll see that we've added that product to a cart.

139
00:08:53.710 --> 00:08:54.865
Like I mentioned though,

140
00:08:54.865 --> 00:08:57.250
we don't actually get the cart objects back.

141
00:08:57.250 --> 00:09:00.069
So how are we going to make sure that this cart

142
00:09:00.069 --> 00:09:03.460
updates after we add a product to the cart?

143
00:09:03.460 --> 00:09:08.095
In this situation, what we can do is simply request the cart again.

144
00:09:08.095 --> 00:09:11.395
We can do the same thing that we did in created.

145
00:09:11.395 --> 00:09:14.140
Grabbing this and setting the cart.

146
00:09:14.140 --> 00:09:17.770
But that would be very dry code because we will be repeating

147
00:09:17.770 --> 00:09:22.180
ourselves by having the exact same code in two different places.

148
00:09:22.180 --> 00:09:28.690
What I'm going to do is create a new method with this called get cart.

149
00:09:28.690 --> 00:09:31.165
This is going to be at the start of our list because it's

150
00:09:31.165 --> 00:09:36.410
central to our view instance here.

151
00:09:38.340 --> 00:09:42.865
Sorry I called it get start, get cart.

152
00:09:42.865 --> 00:09:45.580
Then instead of running it here,

153
00:09:45.580 --> 00:09:48.730
I'm just going to call this get cart.

154
00:09:48.730 --> 00:09:56.080
Exact same code, but now we can take this and run the same code on this method.

155
00:09:56.080 --> 00:09:58.180
The items come back,

156
00:09:58.180 --> 00:10:00.550
but we just run get cart.

157
00:10:00.550 --> 00:10:03.295
When we're running Ajax add to cart,

158
00:10:03.295 --> 00:10:05.875
it's actually running two Ajax requests.

159
00:10:05.875 --> 00:10:08.515
You'll see that now,

160
00:10:08.515 --> 00:10:10.825
unfortunately we have an error.

161
00:10:10.825 --> 00:10:15.380
I forgot to put a comma here after the method.

162
00:10:17.760 --> 00:10:21.385
Refreshing the page you can see here.

163
00:10:21.385 --> 00:10:26.395
What we're going to do is I'm going to remove this t-shirt,

164
00:10:26.395 --> 00:10:29.470
and let's add insane shoes to the cart.

165
00:10:29.470 --> 00:10:33.505
As you can see, there's a little bit of a glitch there with the image,

166
00:10:33.505 --> 00:10:38.530
but you can see insane shoes has now been added to the cart as well.

167
00:10:38.530 --> 00:10:42.580
What we did, added the product to the cart using

168
00:10:42.580 --> 00:10:47.980
the Ajax API and then ran another request to the API to fetch the whole cart.

169
00:10:47.980 --> 00:10:51.340
It's easier that way than trying to add in

170
00:10:51.340 --> 00:10:55.375
the item to the existing card object and then update the total.

171
00:10:55.375 --> 00:11:01.810
I find it's just easier to get the cart again after updating the cart or adding to it.

172
00:11:01.810 --> 00:11:04.510
Now we've hooked up all the main interactions.

173
00:11:04.510 --> 00:11:07.600
We're able to update the quantity of items in the cart.

174
00:11:07.600 --> 00:11:09.955
We can remove a product from the cart.

175
00:11:09.955 --> 00:11:14.980
We can add a new product from these upsells to the cart but there are

176
00:11:14.980 --> 00:11:21.280
a few little things here that we could do to make the user experience nicer and smoother.

177
00:11:21.280 --> 00:11:26.485
Number 1, if I add a product from the cart upsells to the cart,

178
00:11:26.485 --> 00:11:29.095
then I should remove that product from the cart upsells,

179
00:11:29.095 --> 00:11:30.355
or at the very least,

180
00:11:30.355 --> 00:11:33.490
indicate that that product has already been added to the cart.

181
00:11:33.490 --> 00:11:36.280
If I just click "Add to cart" on the same product again,

182
00:11:36.280 --> 00:11:38.530
all it's going to do is update that quantity,

183
00:11:38.530 --> 00:11:39.895
which may be okay,

184
00:11:39.895 --> 00:11:42.505
but I think could definitely be improved.

185
00:11:42.505 --> 00:11:45.850
The other thing is when you're waiting for that add to cart to happen,

186
00:11:45.850 --> 00:11:47.545
there's no feedback to the user.

187
00:11:47.545 --> 00:11:49.990
So suddenly you click on the button,

188
00:11:49.990 --> 00:11:52.780
nothing happens and then a few seconds later,

189
00:11:52.780 --> 00:11:55.405
once the asynchronous request has been finished,

190
00:11:55.405 --> 00:11:58.435
then it suddenly pops up in your cart.

191
00:11:58.435 --> 00:12:02.095
The other thing is, these don't have any nice transitions.

192
00:12:02.095 --> 00:12:05.980
It's all quick and a bit too snappy,

193
00:12:05.980 --> 00:12:07.915
and we want to smoothen that out a little bit.

194
00:12:07.915 --> 00:12:11.800
That's what we'll do in the final part of this video here.

195
00:12:11.800 --> 00:12:16.330
What I'm going to do first is create a filtered array of upsells.

196
00:12:16.330 --> 00:12:20.335
Like I mentioned, if a particular upsell is added to the cart,

197
00:12:20.335 --> 00:12:26.710
I want to remove that from the upsells array and not show it in this list of upsells.

198
00:12:26.710 --> 00:12:32.200
In order to do that, what I'm going to do is use a computed property.

199
00:12:32.200 --> 00:12:34.150
I'm going to create a computed property.

200
00:12:34.150 --> 00:12:36.940
I like to do this ahead of methods.

201
00:12:36.940 --> 00:12:42.910
We saw computed properties in the last lesson on the product template.

202
00:12:42.910 --> 00:12:49.060
We're going to use it again here to create a computed property called filtered upsells,

203
00:12:49.060 --> 00:12:54.700
which is just going to be a filtered version of the upsells.

204
00:12:54.700 --> 00:12:58.840
What I'm going to do, this is going to be a little bit of complicated code.

205
00:12:58.840 --> 00:13:01.675
But what we're trying to do is find the intersection of items

206
00:13:01.675 --> 00:13:04.825
in the cart and in the upsells array.

207
00:13:04.825 --> 00:13:06.355
If it's in the cart,

208
00:13:06.355 --> 00:13:10.870
remove it from this filtered upsell array.

209
00:13:10.870 --> 00:13:13.810
I'm going to break it down into two steps.

210
00:13:13.810 --> 00:13:17.130
First, I'm going to get the list of products in the cart.

211
00:13:17.130 --> 00:13:19.350
I'm going to call this products in a cart.

212
00:13:19.350 --> 00:13:23.430
But because we are going to be looking up via the variant ID,

213
00:13:23.430 --> 00:13:25.080
that's the way we're going to identify,

214
00:13:25.080 --> 00:13:28.500
we're going to use a map function in JavaScript.

215
00:13:28.500 --> 00:13:32.450
Instead of saying this.cart.items,

216
00:13:32.450 --> 00:13:35.050
which will give you the list of objects,

217
00:13:35.050 --> 00:13:38.545
I'm going to transform this into an array targeting

218
00:13:38.545 --> 00:13:44.310
the specific value of item product ID.

219
00:13:44.310 --> 00:13:47.520
I will show you what this does in just a second.

220
00:13:47.520 --> 00:13:52.765
I'm going to convert that into a string using the two string method.

221
00:13:52.765 --> 00:13:54.325
We can't do a console log,

222
00:13:54.325 --> 00:13:56.395
unfortunately inside a computed property.

223
00:13:56.395 --> 00:13:58.840
What I like to do it's just for debugging purposes,

224
00:13:58.840 --> 00:14:04.840
is move it out of the computed property into something like created.

225
00:14:04.840 --> 00:14:07.990
Then it'll run on page load.

226
00:14:07.990 --> 00:14:11.455
If we go now I'm refresh the page,

227
00:14:11.455 --> 00:14:13.750
unfortunately, it's coming back with an empty array.

228
00:14:13.750 --> 00:14:16.540
I think that's largely because we are still waiting on

229
00:14:16.540 --> 00:14:19.765
the cart to arrive from the Ajax API.

230
00:14:19.765 --> 00:14:22.750
Little bit of a hack, but I'm going to put a timeout

231
00:14:22.750 --> 00:14:25.825
here to just get it to execute a little later,

232
00:14:25.825 --> 00:14:31.735
like maybe two seconds later than what it was before.

233
00:14:31.735 --> 00:14:37.555
Let's just get this code to execute two seconds after created.

234
00:14:37.555 --> 00:14:43.135
As you can see, we've got an array with all the variant IDs.

235
00:14:43.135 --> 00:14:45.595
If we add another product to the cart,

236
00:14:45.595 --> 00:14:48.085
we've got gnarly shoes in there. Let's refresh.

237
00:14:48.085 --> 00:14:52.690
Two seconds later, we'll see an array with all our variant IDs.

238
00:14:52.690 --> 00:14:57.940
Moving that back into the computed property,

239
00:14:57.940 --> 00:15:01.825
what I'm going to do is take that array of

240
00:15:01.825 --> 00:15:06.190
variant IDs representing the products already in the cart,

241
00:15:06.190 --> 00:15:11.290
and then I'm going to filter the upsells based on that.

242
00:15:11.290 --> 00:15:14.170
Going to filter the upsells,

243
00:15:14.170 --> 00:15:19.330
take each individual upsell and if not,

244
00:15:19.330 --> 00:15:27.205
products in cart includes upsell products ID.

245
00:15:27.205 --> 00:15:29.620
This is a bit of a lengthy piece of code.

246
00:15:29.620 --> 00:15:34.465
But basically what we're saying here is this will return true

247
00:15:34.465 --> 00:15:39.925
if products in carts or array of variant IDs that relate to the products in the cart,

248
00:15:39.925 --> 00:15:43.675
includes the product ID of the upsell.

249
00:15:43.675 --> 00:15:48.175
Basically if the upsell is in the cart.

250
00:15:48.175 --> 00:15:51.430
If not, we want to return those upsells.

251
00:15:51.430 --> 00:15:56.510
It's basically filtering out any of the upsells that are already in the cart.

252
00:15:56.700 --> 00:16:01.480
What we can do now is instead of running through upsells,

253
00:16:01.480 --> 00:16:05.390
here we can put in filtered_upsells,

254
00:16:05.390 --> 00:16:10.260
giving it enough time to load and refreshing our page over here.

255
00:16:10.260 --> 00:16:14.865
We should start to see now that none of these products are already in the cart.

256
00:16:14.865 --> 00:16:16.925
If I add Old School Kicks,

257
00:16:16.925 --> 00:16:22.195
you'll see that the list of upsells down here updates.

258
00:16:22.195 --> 00:16:26.755
We've filtered out the upsells that have been added to the cart already.

259
00:16:26.755 --> 00:16:28.465
If I remove this,

260
00:16:28.465 --> 00:16:32.515
you'll see Insane Shoes goes back into the upsell array.

261
00:16:32.515 --> 00:16:36.805
We now sorted out that issue with the upsells.

262
00:16:36.805 --> 00:16:39.790
We don't want to upsell a product that's already been sold.

263
00:16:39.790 --> 00:16:42.820
We want to remove it if it's in the cart already.

264
00:16:42.820 --> 00:16:44.125
What I want to do, however,

265
00:16:44.125 --> 00:16:48.430
when I add a product to the cart is provide some feedback to the user.

266
00:16:48.430 --> 00:16:52.105
What we can do is use an if statement for that.

267
00:16:52.105 --> 00:16:58.285
What I'm going to put here in the Add to Cart button,

268
00:16:58.285 --> 00:17:01.585
I'm going to put in another button ahead of it.

269
00:17:01.585 --> 00:17:04.510
You'll see why I'm doing that in just a second.

270
00:17:04.510 --> 00:17:08.065
I'm going to give this the class of upsell-atc.

271
00:17:08.065 --> 00:17:10.615
Actually, save myself some time.

272
00:17:10.615 --> 00:17:12.760
I can just copy this.

273
00:17:12.760 --> 00:17:19.280
What I'm going to do also is add a modifier class on here, upsell-button--adding.

274
00:17:19.380 --> 00:17:23.905
What I'm about to do here is change the button state.

275
00:17:23.905 --> 00:17:25.870
Instead of add to cart,

276
00:17:25.870 --> 00:17:28.420
it's going to say adding,

277
00:17:28.420 --> 00:17:33.460
and that style should already be set up in the theme CSS file.

278
00:17:33.460 --> 00:17:35.110
Refreshing the page over here,

279
00:17:35.110 --> 00:17:37.900
you'll see that each of them have this adding state,

280
00:17:37.900 --> 00:17:40.360
but we want to alternate between them based on

281
00:17:40.360 --> 00:17:43.795
whether a product is being added or it's not.

282
00:17:43.795 --> 00:17:48.190
How we do that is let's add another attribute to our data.

283
00:17:48.190 --> 00:17:52.375
We can go into here and creates a loading state.

284
00:17:52.375 --> 00:17:54.984
When the page first loads,

285
00:17:54.984 --> 00:17:58.150
this is empty and then after a while,

286
00:17:58.150 --> 00:18:02.785
the asynchronous requests to the Ajax API will return the cart and update it.

287
00:18:02.785 --> 00:18:06.115
On page load, let's make loading true.

288
00:18:06.115 --> 00:18:09.910
But after every Ajax request where we've finished something,

289
00:18:09.910 --> 00:18:13.030
we're going to put loading to false.

290
00:18:13.030 --> 00:18:15.280
What are those situations?

291
00:18:15.280 --> 00:18:17.170
If we scroll down here,

292
00:18:17.170 --> 00:18:20.050
we could possibly put it here after get_cart.

293
00:18:20.050 --> 00:18:22.825
But as you can see, it hits the set_cart.

294
00:18:22.825 --> 00:18:28.360
What I'm going to do is go down to set_cart and then after format_prices,

295
00:18:28.360 --> 00:18:32.770
I'm going to put in this loading equals false.

296
00:18:32.770 --> 00:18:36.370
Of course, loading is going to be true when we first load the page,

297
00:18:36.370 --> 00:18:37.780
but then once it's set to false,

298
00:18:37.780 --> 00:18:41.080
we need the opportunity to set it to true again.

299
00:18:41.080 --> 00:18:46.090
For that, what we're going to do is when we're adding a product to the cart,

300
00:18:46.090 --> 00:18:50.350
we're going to set this loading equals true.

301
00:18:50.350 --> 00:18:53.335
When we're removing a product from the cart,

302
00:18:53.335 --> 00:18:57.610
we're going to set this.loading equals true.

303
00:18:57.610 --> 00:19:02.575
We're not going to do it for update cart because this is okay to me,

304
00:19:02.575 --> 00:19:05.935
we're not going to put in animation for this specifically.

305
00:19:05.935 --> 00:19:08.485
But for removing from the cart,

306
00:19:08.485 --> 00:19:11.275
I want there to be a loading state.

307
00:19:11.275 --> 00:19:14.275
It may not be clear exactly right now while we're doing this,

308
00:19:14.275 --> 00:19:16.735
but you'll soon see how that loading attribute

309
00:19:16.735 --> 00:19:20.260
will allow us to create a few nicer transitions.

310
00:19:20.260 --> 00:19:23.530
Let's have a look at if I remove this now,

311
00:19:23.530 --> 00:19:26.890
let's refresh over here. Start that again.

312
00:19:26.890 --> 00:19:28.630
If I click this,

313
00:19:28.630 --> 00:19:31.480
it will go loading for a split second,

314
00:19:31.480 --> 00:19:34.360
and then once it's finished loading, it will go false.

315
00:19:34.360 --> 00:19:36.010
Same thing with Add to Cart.

316
00:19:36.010 --> 00:19:37.405
Once I add it to cart,

317
00:19:37.405 --> 00:19:41.515
it will go loading true for a split second and then go to false.

318
00:19:41.515 --> 00:19:45.355
We're going to use that in just a second but before we do,

319
00:19:45.355 --> 00:19:50.590
I want to add one more loading state and that is on these particular items.

320
00:19:50.590 --> 00:19:53.860
We're going to have to do it on an individual item basis here.

321
00:19:53.860 --> 00:19:56.605
You can't do it on the overall cart object.

322
00:19:56.605 --> 00:20:00.880
What I'm going to do is move over to our upsells array

323
00:20:00.880 --> 00:20:05.665
here and put on a loading state on each of the upsell items.

324
00:20:05.665 --> 00:20:07.255
The way I'm going to do that,

325
00:20:07.255 --> 00:20:09.100
I'm going to call it adding,

326
00:20:09.100 --> 00:20:10.420
get real specific here,

327
00:20:10.420 --> 00:20:12.670
and call it adding_upsell.

328
00:20:12.670 --> 00:20:16.990
By default, that's going to be set to false because when we're loading the page,

329
00:20:16.990 --> 00:20:19.555
we aren't adding an upsell.

330
00:20:19.555 --> 00:20:23.380
But when we're doing this Add to Cart here,

331
00:20:23.380 --> 00:20:30.055
we want to set the adding upsell attribute on the particular upsell to true.

332
00:20:30.055 --> 00:20:33.355
What we're going to have to do for that to access the actual object

333
00:20:33.355 --> 00:20:36.580
is find the upsell first because right now,

334
00:20:36.580 --> 00:20:39.190
we only have the upsells variant ID.

335
00:20:39.190 --> 00:20:42.430
We're going to have to look up that actual upsell object.

336
00:20:42.430 --> 00:20:45.445
I'm going to create a const upsell here,

337
00:20:45.445 --> 00:20:52.000
and then find inside the upsells array the upsell with the variant ID

338
00:20:52.000 --> 00:20:58.720
that's passed in upsell.variant_id equals id.

339
00:20:58.720 --> 00:21:01.975
Again, now that we have the variant object,

340
00:21:01.975 --> 00:21:07.210
we can go here and do upsell.adding_upsell equals true.

341
00:21:07.210 --> 00:21:09.340
Then when it's finished loading,

342
00:21:09.340 --> 00:21:15.295
we can set the adding_upsell attribute on the particular upsell to false.

343
00:21:15.295 --> 00:21:18.800
Let's switch back to our front-end app now.

344
00:21:18.800 --> 00:21:25.535
Let's observe the upsells array as we add in a product to the cart.

345
00:21:25.535 --> 00:21:29.290
Sometimes this happens so quickly that it doesn't even have time to update.

346
00:21:29.290 --> 00:21:31.780
I'll click "Add to Cart" here and you'll see,

347
00:21:31.780 --> 00:21:33.220
it still says false.

348
00:21:33.220 --> 00:21:35.185
If I get a little bit faster,

349
00:21:35.185 --> 00:21:39.730
then you'll see it switches to true before it goes to false.

350
00:21:39.730 --> 00:21:42.040
There we go, true or false.

351
00:21:42.040 --> 00:21:46.180
You can see both the cart table was loading

352
00:21:46.180 --> 00:21:50.680
then and the adding upsell state went to true as well.

353
00:21:50.680 --> 00:21:55.630
What we can do now is add a transition to the cart table,

354
00:21:55.630 --> 00:21:58.885
and then also swap out these buttons depending on

355
00:21:58.885 --> 00:22:02.440
what state the upsell is in terms of

356
00:22:02.440 --> 00:22:06.475
whether it's adding or not adding to the cart currently.

357
00:22:06.475 --> 00:22:08.575
Let's go back in.

358
00:22:08.575 --> 00:22:10.735
All I have to do with these two elements,

359
00:22:10.735 --> 00:22:12.430
I've got them side-by-side,

360
00:22:12.430 --> 00:22:14.890
but now, I can just put v-ifs on them.

361
00:22:14.890 --> 00:22:19.525
I'm going to do v-if=product.adding_upsell,

362
00:22:19.525 --> 00:22:22.795
then we're going to display this.

363
00:22:22.795 --> 00:22:28.010
Otherwise, we're going to display the usual Add to Cart button.

364
00:22:28.560 --> 00:22:34.510
That should be all that's required for the interaction with the product upsells,

365
00:22:34.510 --> 00:22:38.920
looks like I've made an error here adding upsell.

366
00:22:38.920 --> 00:22:45.025
I've named this product instead of upsell, upsell.adding_upsell.

367
00:22:45.025 --> 00:22:52.435
Refresh. you can see that button does not show because we're not currently adding upsell.

368
00:22:52.435 --> 00:22:53.830
But if I click on this,

369
00:22:53.830 --> 00:22:55.570
you'll see that the buttons switches over

370
00:22:55.570 --> 00:22:59.245
briefly to give it a loading state before it adds to the cart,

371
00:22:59.245 --> 00:23:04.270
and then the item disappears because it's now been filtered out of our upsell array.

372
00:23:04.270 --> 00:23:06.520
I can do that with Gnarly Shoes as well.

373
00:23:06.520 --> 00:23:13.060
As you can see, it has an adding state before I add it to the cart. There we go.

374
00:23:13.060 --> 00:23:16.480
We've given upsells a bit of a loading state there, and now,

375
00:23:16.480 --> 00:23:22.270
we are going to wrap the cart table in a bit of a transition element.

376
00:23:22.270 --> 00:23:25.405
Right here, within the cart table,

377
00:23:25.405 --> 00:23:31.600
I'm going to add a transition element like we did on the product template.

378
00:23:31.600 --> 00:23:33.580
Put all this inside

379
00:23:33.580 --> 00:23:42.610
the transition elements called the transition elements name fade.

380
00:23:42.610 --> 00:23:44.410
Finally, one more step,

381
00:23:44.410 --> 00:23:48.160
what we're going to have to do is check for that loading state.

382
00:23:48.160 --> 00:23:51.190
We're going to cut all that but have it still on my clipboard.

383
00:23:51.190 --> 00:23:56.740
Create a div and put an attribute on their code v-show.

384
00:23:56.740 --> 00:24:00.190
If it's not loading, it's going to show.

385
00:24:00.190 --> 00:24:02.080
That might sound a little bit redundant,

386
00:24:02.080 --> 00:24:05.890
but it's going to give that functionality of fading

387
00:24:05.890 --> 00:24:10.345
in and fading out by not showing when it's loading.

388
00:24:10.345 --> 00:24:14.785
When it's not loading, it won't show and that will trigger the transition.

389
00:24:14.785 --> 00:24:16.390
Then when it comes back on,

390
00:24:16.390 --> 00:24:19.390
the transition will fade it in.

391
00:24:19.390 --> 00:24:22.105
Let's have a look at how that works.

392
00:24:22.105 --> 00:24:25.120
As you can see, when I refresh the page,

393
00:24:25.120 --> 00:24:26.815
the cart faded in.

394
00:24:26.815 --> 00:24:28.990
If I add a product to the cart,

395
00:24:28.990 --> 00:24:31.045
the cart fades out.

396
00:24:31.045 --> 00:24:35.170
If I remove an item from the cart, it fades out.

397
00:24:35.170 --> 00:24:37.660
The reason why it's doing this,

398
00:24:37.660 --> 00:24:40.720
the way we've got it to act like this is because we're

399
00:24:40.720 --> 00:24:44.170
setting this state of loading when we're adding a product to

400
00:24:44.170 --> 00:24:48.385
the cart down here and we're also

401
00:24:48.385 --> 00:24:53.330
updating that loading state when we're removing products from the cart as well.

402
00:24:53.330 --> 00:24:55.215
We're also on page load,

403
00:24:55.215 --> 00:24:58.784
having it set to loading until the set_cart

404
00:24:58.784 --> 00:25:02.625
is finished processing and then loading goes to false.

405
00:25:02.625 --> 00:25:07.775
That makes the loading state of our cart table a little nicer.

406
00:25:07.775 --> 00:25:11.035
I'm sure that you could improve upon this a lot more.

407
00:25:11.035 --> 00:25:12.895
I'm not necessarily a designer,

408
00:25:12.895 --> 00:25:15.910
but this is the core functionality and

409
00:25:15.910 --> 00:25:19.810
principles within view to make this happen. There you have it.

410
00:25:19.810 --> 00:25:21.595
If we close our Developer Tools,

411
00:25:21.595 --> 00:25:27.460
we've now got our product page working with some nice transitions.

412
00:25:27.460 --> 00:25:30.850
I can add a medium red T-Shirt to my cart.

413
00:25:30.850 --> 00:25:35.130
Go over here, upsell with some Insane Shoes.

414
00:25:35.130 --> 00:25:39.185
Go to Checkout if I want or increase the quantity.

415
00:25:39.185 --> 00:25:41.770
Maybe put this up to three.

416
00:25:41.770 --> 00:25:45.385
This is all synchronized with our cart Ajax API.

417
00:25:45.385 --> 00:25:47.500
If I was on an actual production store,

418
00:25:47.500 --> 00:25:50.890
I could hit "Checkout" here and check out.

419
00:25:50.890 --> 00:25:55.330
Actually, I think it might actually let me check out. There you go.

420
00:25:55.330 --> 00:25:58.045
Here you go, that's my selection.

421
00:25:58.045 --> 00:26:01.360
Yeah, that's pretty much it for the cart page.

422
00:26:01.360 --> 00:26:06.790
I know this is quite a long video or set of videos to get this cart page working.

423
00:26:06.790 --> 00:26:12.640
But this is the biggest area of interaction within a Shopify site most usually.

424
00:26:12.640 --> 00:26:14.905
Think about when you go shopping,

425
00:26:14.905 --> 00:26:17.620
things stay on the shelves until you pick them

426
00:26:17.620 --> 00:26:20.590
up and put them in your cart or put them back.

427
00:26:20.590 --> 00:26:24.880
The user's main interaction with your site that makes sense to

428
00:26:24.880 --> 00:26:29.440
use Vue with at least is the cart interactions.

429
00:26:29.440 --> 00:26:34.555
Obviously, also, the variant switching very handy to have Vue for that.

430
00:26:34.555 --> 00:26:36.115
As I mentioned earlier,

431
00:26:36.115 --> 00:26:39.760
if you did want to filter your collection page,

432
00:26:39.760 --> 00:26:43.105
you could have some hectic filters in here.

433
00:26:43.105 --> 00:26:45.430
If you had a lot of products within

434
00:26:45.430 --> 00:26:48.550
your store and a lot of different attributes to filter on,

435
00:26:48.550 --> 00:26:51.985
you might make this a Vue app as well.

436
00:26:51.985 --> 00:26:55.060
But the main principle is anytime you've got

437
00:26:55.060 --> 00:26:58.285
some interactions that need to happen live on the front end,

438
00:26:58.285 --> 00:27:01.630
you will at least want to use JavaScript and I

439
00:27:01.630 --> 00:27:05.230
would encourage you to use Vue or some other kind of framework.

440
00:27:05.230 --> 00:27:09.760
Obviously, you've learned Vue in this class so that's what I would recommend but

441
00:27:09.760 --> 00:27:11.620
this should be a good starting point for

442
00:27:11.620 --> 00:27:14.650
you to start incorporating Vue into your projects.

443
00:27:14.650 --> 00:27:16.360
Depending on when you're watching this class,

444
00:27:16.360 --> 00:27:20.290
the next video might be a bonus video on using

445
00:27:20.290 --> 00:27:25.255
Vuex in case you are sharing data across different parts.

446
00:27:25.255 --> 00:27:27.730
We've used the cart and the cart page here,

447
00:27:27.730 --> 00:27:31.930
but maybe you want to update the cart on a different page and synchronize that data.

448
00:27:31.930 --> 00:27:36.205
We'll be learning about the Vuex store in next video,

449
00:27:36.205 --> 00:27:37.795
depending on when you're listening to this.

450
00:27:37.795 --> 00:27:40.270
Otherwise, I will see you in the conclusion,

451
00:27:40.270 --> 00:27:45.590
and I look forward to getting you started on your own class project.

