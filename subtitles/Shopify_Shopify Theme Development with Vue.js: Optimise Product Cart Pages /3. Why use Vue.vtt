WEBVTT
ï»¿1
00:00:00.000 --> 00:00:01.485
Before we get started,

2
00:00:01.485 --> 00:00:06.120
let's talk about why we would want to use Vue inside of Shopify themes.

3
00:00:06.120 --> 00:00:11.010
Put simply, Vue.js is handy for any areas on our Shopify website that require

4
00:00:11.010 --> 00:00:16.005
or encourage user interaction outside of simply navigating to new pages.

5
00:00:16.005 --> 00:00:18.690
Let's think for a second about how a user might

6
00:00:18.690 --> 00:00:21.765
commonly interact with an e-commerce website.

7
00:00:21.765 --> 00:00:25.485
We can break it down into three main behaviors.

8
00:00:25.485 --> 00:00:29.580
One, browsing or finding specific products to buy two,

9
00:00:29.580 --> 00:00:32.670
adding and removing products to and from their shopping cart,

10
00:00:32.670 --> 00:00:36.885
and three, taking those products to the checkout and completing their order.

11
00:00:36.885 --> 00:00:38.240
On the point 1,

12
00:00:38.240 --> 00:00:40.520
browsing or finding specific products to buy,

13
00:00:40.520 --> 00:00:43.220
most of the time this happens via the navigation.

14
00:00:43.220 --> 00:00:45.860
You simply click on the collection or category you wish to

15
00:00:45.860 --> 00:00:49.015
browse and you're presented with a list of options.

16
00:00:49.015 --> 00:00:53.630
This does not require interactivity beyond navigating pages.

17
00:00:53.630 --> 00:00:57.410
But what about when you reach the product page and you're presented with some options

18
00:00:57.410 --> 00:01:01.465
to modify the product to your liking before adding it to the cart.

19
00:01:01.465 --> 00:01:04.490
Here, when you update your selection, the product image,

20
00:01:04.490 --> 00:01:08.075
the product price, and other details might change.

21
00:01:08.075 --> 00:01:11.510
Preferably, the user should not have to navigate to a new page or

22
00:01:11.510 --> 00:01:15.160
refresh the page in order to see those minor changes.

23
00:01:15.160 --> 00:01:19.250
Secondly, after a user has finished browsing and adding items to their cart,

24
00:01:19.250 --> 00:01:21.890
maybe they'd like to remove products from their cart

25
00:01:21.890 --> 00:01:25.030
or add additional units of the same product.

26
00:01:25.030 --> 00:01:27.875
Again, it would be preferable for the update to be recorded

27
00:01:27.875 --> 00:01:31.610
instantly rather than having to wait for a page refresh.

28
00:01:31.610 --> 00:01:36.730
Luckily, both of these interactions we can handle on the front end using JavaScript.

29
00:01:36.730 --> 00:01:40.220
But using JavaScript or jQuery on the framework at all,

30
00:01:40.220 --> 00:01:42.830
we're going to have to specify which sections of the page are

31
00:01:42.830 --> 00:01:46.360
intended to change and in which situations.

32
00:01:46.360 --> 00:01:49.190
This results in us having to write messy codes,

33
00:01:49.190 --> 00:01:51.500
both update the data and then make it so that

34
00:01:51.500 --> 00:01:54.865
the updated data is then reflected on the page.

35
00:01:54.865 --> 00:01:59.645
Vue.js solves this problem for us via something called reactivity.

36
00:01:59.645 --> 00:02:03.890
I encourage you to read about reactivity in depth on Vue's website,

37
00:02:03.890 --> 00:02:06.480
but for now this is how I will explain it.

38
00:02:06.480 --> 00:02:08.720
Put simply, Vue allows us to create

39
00:02:08.720 --> 00:02:13.415
a data structure and insert dynamic values onto our front-end HTML structure.

40
00:02:13.415 --> 00:02:14.840
When the data changes,

41
00:02:14.840 --> 00:02:16.730
so do the values on the page.

42
00:02:16.730 --> 00:02:19.130
Therefore, they are considered reactive.

43
00:02:19.130 --> 00:02:21.620
When writing Vue.js, we don't have to explicitly

44
00:02:21.620 --> 00:02:24.020
tell the user interface to update, instead,

45
00:02:24.020 --> 00:02:30.250
the user interface will react to whatever the data bound to that element has updated to.

46
00:02:30.250 --> 00:02:34.580
Let's put it in terms of the two areas where we'll be using Vue in today's class,

47
00:02:34.580 --> 00:02:36.985
the product page and the cart page.

48
00:02:36.985 --> 00:02:38.220
On the product page,

49
00:02:38.220 --> 00:02:40.130
if the product has more than one variant,

50
00:02:40.130 --> 00:02:43.025
then some selection from the user is required.

51
00:02:43.025 --> 00:02:45.540
The selection then determines the current variant,

52
00:02:45.540 --> 00:02:48.005
which may carry with it a different price,

53
00:02:48.005 --> 00:02:49.810
image, and/or stock level.

54
00:02:49.810 --> 00:02:52.400
On the cart page, most if not all of

55
00:02:52.400 --> 00:02:56.180
the page content will come from what is currently stored in the cart,

56
00:02:56.180 --> 00:02:59.210
such as the various items in the cart, their images, titles,

57
00:02:59.210 --> 00:03:01.970
prices, and the combination of those prices,

58
00:03:01.970 --> 00:03:04.105
which make up the total price.

59
00:03:04.105 --> 00:03:06.830
When an item or unit is removed from the cart,

60
00:03:06.830 --> 00:03:10.070
this produces a trickle-down effect to the items array,

61
00:03:10.070 --> 00:03:12.335
the line price of the item,

62
00:03:12.335 --> 00:03:14.320
and/or the cart total.

63
00:03:14.320 --> 00:03:17.870
In Vue.js, we can open up our developer tools to clearly

64
00:03:17.870 --> 00:03:21.530
see our data structure and how the values on the page are kept in

65
00:03:21.530 --> 00:03:24.950
sync with the structure without having to manually write lines

66
00:03:24.950 --> 00:03:28.550
of code to update the values as seen on the page.

67
00:03:28.550 --> 00:03:32.600
To summarize, Vue.js is most handy in these environments,

68
00:03:32.600 --> 00:03:35.300
these situations in which you don't want to have to

69
00:03:35.300 --> 00:03:38.455
refresh the page each time an update occurs.

70
00:03:38.455 --> 00:03:40.485
On e-commerce stores specifically,

71
00:03:40.485 --> 00:03:43.085
Vue.js is particularly handy when dealing with

72
00:03:43.085 --> 00:03:47.340
variant selections and shopping cart interactions.

