WEBVTT
ï»¿1
00:00:00.170 --> 00:00:03.870
Friends, here we are writing a Docker file to

2
00:00:03.870 --> 00:00:07.200
deploy Python Flask application in Docker container.

3
00:00:07.200 --> 00:00:08.940
Anyway, as usual, first,

4
00:00:08.940 --> 00:00:13.500
I will go with the manual steps to launch Python Flask application in container.

5
00:00:13.500 --> 00:00:16.620
Later, I will use those manual steps to create

6
00:00:16.620 --> 00:00:19.650
a Docker file so that we can create our custom Docker image.

7
00:00:19.650 --> 00:00:22.485
And from that using, with one step,

8
00:00:22.485 --> 00:00:26.580
we can launch our container to run Python Flask application.

9
00:00:26.580 --> 00:00:27.370
Fine.

10
00:00:27.370 --> 00:00:30.515
Now first let me list to the manual steps.

11
00:00:30.515 --> 00:00:35.735
The very first step is we need to launch container using any required image.

12
00:00:35.735 --> 00:00:40.175
Suppose in our case I'm taking image as open to 20.04.

13
00:00:40.175 --> 00:00:46.670
Then you have to install some required packages like Python three, p53, and flask.

14
00:00:46.670 --> 00:00:48.185
Then once it is done,

15
00:00:48.185 --> 00:00:52.700
then we will copy our Python Flask application into Docker container.

16
00:00:52.700 --> 00:00:56.750
So allergy, how a simple Python Flask application and this one.

17
00:00:56.750 --> 00:00:59.030
So I will copy this into container.

18
00:00:59.030 --> 00:01:01.385
So after that, inside of our container,

19
00:01:01.385 --> 00:01:03.095
we will run python three.

20
00:01:03.095 --> 00:01:09.695
Then you are Flask application name so that it will run your Python Flask application.

21
00:01:09.695 --> 00:01:13.010
So after that simply we will open a browser and we will access

22
00:01:13.010 --> 00:01:17.120
this application using its URL and verify whether it is working or not.

23
00:01:17.120 --> 00:01:18.245
That's fine.

24
00:01:18.245 --> 00:01:20.525
Now, let me go to my Docker host.

25
00:01:20.525 --> 00:01:22.730
So as of now, I am not running with

26
00:01:22.730 --> 00:01:27.065
any Docker containers and see that these are the images.

27
00:01:27.065 --> 00:01:30.095
Now, first step is we need to create a container.

28
00:01:30.095 --> 00:01:36.140
So let me create a container using our command called Docker run hyphen MIT hyphen D.

29
00:01:36.140 --> 00:01:43.880
Then let me take name as my Flask app.

30
00:01:43.880 --> 00:01:45.170
Then.

31
00:01:45.170 --> 00:01:47.975
So see by default,

32
00:01:47.975 --> 00:01:51.800
flask applications will run on port number 5 thousand.

33
00:01:51.800 --> 00:01:53.330
If you want to modify that, yes,

34
00:01:53.330 --> 00:01:55.490
you can modify in your logic,

35
00:01:55.490 --> 00:01:57.050
I mean Flask application.

36
00:01:57.050 --> 00:02:01.550
So as of now I'm running that Python Flask application on Python and port number.

37
00:02:01.550 --> 00:02:09.095
So I need to map my Docker host port number with the my Flask application port number.

38
00:02:09.095 --> 00:02:11.855
So simply are taken on Docker host.

39
00:02:11.855 --> 00:02:16.565
And I map with that with 5 thousand of Docker container Flask application port.

40
00:02:16.565 --> 00:02:22.400
Then as of now we are launching that container using open to,

41
00:02:22.400 --> 00:02:26.660
let's say $20 for this image is already there with us.

42
00:02:26.660 --> 00:02:30.965
Now let me run it. So container has been launched.

43
00:02:30.965 --> 00:02:35.945
No, let me enter into it simply by taking docker EX PC,

44
00:02:35.945 --> 00:02:39.950
hyphen IT, container ID then bash.

45
00:02:39.950 --> 00:02:41.900
Now we are inside of a container.

46
00:02:41.900 --> 00:02:42.815
Anyway.

47
00:02:42.815 --> 00:02:44.210
Once container is launched,

48
00:02:44.210 --> 00:02:47.270
we need to install Python three, p53, and Flask.

49
00:02:47.270 --> 00:02:51.875
If remember, to install all these packages first we need to update

50
00:02:51.875 --> 00:02:56.824
our APT Git repo simply by using APT get update,

51
00:02:56.824 --> 00:03:01.640
let's say hyphen byte, that's it.

52
00:03:01.640 --> 00:03:04.925
So it is going to update your API to get, once it is done,

53
00:03:04.925 --> 00:03:12.110
then we can install Python three simply by taking APT get.

54
00:03:12.110 --> 00:03:16.560
Install Python three.

55
00:03:19.540 --> 00:03:24.090
Confirmation? Yes. Fine.

56
00:03:24.910 --> 00:03:28.460
Then after that, by Tom three hyphen

57
00:03:28.460 --> 00:03:33.330
p. So let me probably confirmation in command line itself iPhone way.

58
00:03:33.460 --> 00:03:37.250
So once this Python three is installed,

59
00:03:37.250 --> 00:03:38.855
I mean by Dante and p3,

60
00:03:38.855 --> 00:03:43.440
then how to install Flask module for your python? We will install that.

61
00:03:45.190 --> 00:03:49.860
Just wait for a less than a minute.

62
00:03:52.660 --> 00:03:56.880
Then no, let me install

63
00:03:57.760 --> 00:04:02.360
pip install Flask because

64
00:04:02.360 --> 00:04:06.410
Flask is that required a framework to run your flask applications through Python.

65
00:04:06.410 --> 00:04:07.250
Then.

66
00:04:07.250 --> 00:04:12.065
So after that, we need to copy our Flask application into Docker container.

67
00:04:12.065 --> 00:04:17.315
Anyway, we already have a simple small Python Flask application.

68
00:04:17.315 --> 00:04:19.430
Now let me copy it into container.

69
00:04:19.430 --> 00:04:27.470
See VAR VM editors or not present with you are a base image 01 to 24.

70
00:04:27.470 --> 00:04:30.110
Then let me install anyone of that by taking equity,

71
00:04:30.110 --> 00:04:34.560
get install VIM, let's say hyphen wine.

72
00:04:35.380 --> 00:04:37.460
Because I need to copy it.

73
00:04:37.460 --> 00:04:39.305
No, I need to edit a file.

74
00:04:39.305 --> 00:04:40.730
Now.

75
00:04:40.730 --> 00:04:42.995
I am app.js file.

76
00:04:42.995 --> 00:04:45.470
So inside that let me paste my code.

77
00:04:45.470 --> 00:04:50.945
That's it. Save it and run it. What happened?

78
00:04:50.945 --> 00:04:54.155
Yeah, we're not having Python, Python three.

79
00:04:54.155 --> 00:04:59.525
So now our Python Flask application is running inside a container on 5 thousand port.

80
00:04:59.525 --> 00:05:00.680
But outside a container,

81
00:05:00.680 --> 00:05:03.620
we mapped that with a geoid 0 on our docker host.

82
00:05:03.620 --> 00:05:06.560
So this is my Docker host IP, then edgy right.

83
00:05:06.560 --> 00:05:14.735
Now let me run it so that we are able to access the Python Flask application.

84
00:05:14.735 --> 00:05:16.565
So manual steps are done.

85
00:05:16.565 --> 00:05:19.115
Now let we take all those steps.

86
00:05:19.115 --> 00:05:22.935
So let me stop my application, simply run history.

87
00:05:22.935 --> 00:05:24.850
Let me copy all these commands.

88
00:05:24.850 --> 00:05:27.530
We will remove unnecessary comments.

89
00:05:29.340 --> 00:05:35.860
So just for our understanding purpose,

90
00:05:35.860 --> 00:05:39.260
I'm taking all these commands.

91
00:05:40.380 --> 00:05:43.795
So here let me add a hyphen way.

92
00:05:43.795 --> 00:05:47.110
Then we install the VA anyway, if you want,

93
00:05:47.110 --> 00:05:50.035
you can install theater otherwise, no need to install.

94
00:05:50.035 --> 00:05:51.580
So once it is installed,

95
00:05:51.580 --> 00:05:55.930
we copied and then we run, ya know,

96
00:05:55.930 --> 00:05:59.170
these all are the manual steps which we used to

97
00:05:59.170 --> 00:06:02.965
launch our Python Flask application inside a container.

98
00:06:02.965 --> 00:06:06.785
Now actually, our intention is for our requirement,

99
00:06:06.785 --> 00:06:09.020
we have to create a Docker file so that from

100
00:06:09.020 --> 00:06:12.605
the Docker file we can easily create custom Docker image.

101
00:06:12.605 --> 00:06:15.800
And from the Docker image with one step directly,

102
00:06:15.800 --> 00:06:19.069
we can launch a container with Python Flask application.

103
00:06:19.069 --> 00:06:22.085
Right? Anyway, these are the minute steps.

104
00:06:22.085 --> 00:06:24.380
No, let me go and create a Docker file.

105
00:06:24.380 --> 00:06:27.125
See whenever if you want to create a Docker file,

106
00:06:27.125 --> 00:06:33.470
the best practices always create one folder with your application name or project name.

107
00:06:33.470 --> 00:06:40.170
Let's say I'm taking Flask app, then navigate into.

108
00:06:40.540 --> 00:06:44.390
Now here inside Flask app,

109
00:06:44.390 --> 00:06:45.800
we need to create a Docker file.

110
00:06:45.800 --> 00:06:47.900
So let me take a Dockerfile.

111
00:06:47.900 --> 00:06:49.355
So you can take any file limb,

112
00:06:49.355 --> 00:06:52.910
but Docker file is the southeastern name to create a

113
00:06:52.910 --> 00:06:57.290
Docker file C. Before executing all these steps,

114
00:06:57.290 --> 00:07:00.035
actually we executed all these steps inside a container.

115
00:07:00.035 --> 00:07:05.135
Before that, we launched a container using a base image called open to 20.04.

116
00:07:05.135 --> 00:07:08.375
So that is the first instruction in our docker file.

117
00:07:08.375 --> 00:07:16.595
Now let me write that from urban to quanti dot 04.

118
00:07:16.595 --> 00:07:21.515
Then after that, what is the first step which we executed inside a container?

119
00:07:21.515 --> 00:07:23.225
Simply API to get update hyphen white.

120
00:07:23.225 --> 00:07:25.205
This is a command, right?

121
00:07:25.205 --> 00:07:27.320
And we are installing some packages.

122
00:07:27.320 --> 00:07:30.260
So whenever if you are running a command to install something,

123
00:07:30.260 --> 00:07:35.435
that type of command you have to mention with instruction called run, that's it.

124
00:07:35.435 --> 00:07:38.450
So we have a number of commands here.

125
00:07:38.450 --> 00:07:42.450
Let me copy, paste one-by-one.

126
00:07:42.880 --> 00:07:46.580
So we installed Python using the line,

127
00:07:46.580 --> 00:07:51.380
be clear R1 we are using to install something.

128
00:07:51.380 --> 00:07:53.855
So whatever command you are using,

129
00:07:53.855 --> 00:07:57.800
if that command is going to install something than that command,

130
00:07:57.800 --> 00:08:01.940
you have to mention in your Docker file with the R1 instruction that's a.

131
00:08:01.940 --> 00:08:06.035
Then we installed a flask as well.

132
00:08:06.035 --> 00:08:07.835
So simply run.

133
00:08:07.835 --> 00:08:09.245
That's it.

134
00:08:09.245 --> 00:08:11.405
Anyway, installation part is done.

135
00:08:11.405 --> 00:08:16.190
The next thing we copied app.use anyway into our Docker container.

136
00:08:16.190 --> 00:08:19.700
But whenever if you're implementing a Docker file for that, what we have to do,

137
00:08:19.700 --> 00:08:23.450
he's in any one location on your Docker host.

138
00:08:23.450 --> 00:08:25.670
But Western practices where you have

139
00:08:25.670 --> 00:08:31.530
your Dockerfile in that location, foster create app.js.

140
00:08:31.900 --> 00:08:35.690
So wherever you are creating your Docker file in

141
00:08:35.690 --> 00:08:40.140
that location on literacy creative or Python Flask application, that's it.

142
00:08:40.140 --> 00:08:46.090
Now in the current location where we have our docker file there we have app.js.

143
00:08:46.090 --> 00:08:49.645
And actually we copied that app.use into container.

144
00:08:49.645 --> 00:08:51.355
But while writing your Docker file,

145
00:08:51.355 --> 00:08:54.205
we'll copy that file into Docker image.

146
00:08:54.205 --> 00:08:57.280
So for that we how an instruction called copy.

147
00:08:57.280 --> 00:09:00.445
So in the current location where your Docker file is there,

148
00:09:00.445 --> 00:09:02.859
that means dot slash.

149
00:09:02.859 --> 00:09:09.040
We have app.js that I'm copying into u r slash app.use a location.

150
00:09:09.040 --> 00:09:10.630
So inside a container,

151
00:09:10.630 --> 00:09:12.100
actually inside an image,

152
00:09:12.100 --> 00:09:15.865
we are copying this app.use with this name,

153
00:09:15.865 --> 00:09:17.200
same name I'm taking,

154
00:09:17.200 --> 00:09:19.090
but you can take any name for

155
00:09:19.090 --> 00:09:23.005
your Python Flask application in your image or in your container.

156
00:09:23.005 --> 00:09:24.325
Fine.

157
00:09:24.325 --> 00:09:31.075
So after that final step is simply we are running our Python three app.js, right?

158
00:09:31.075 --> 00:09:35.485
So simply these the command c. Whenever,

159
00:09:35.485 --> 00:09:38.695
if you want to run a command to install something,

160
00:09:38.695 --> 00:09:40.060
then we are taking R1.

161
00:09:40.060 --> 00:09:42.955
But actually, after launching my container,

162
00:09:42.955 --> 00:09:45.250
I need to run this command automatically so

163
00:09:45.250 --> 00:09:47.965
that I can access my Python Flask application.

164
00:09:47.965 --> 00:09:50.950
So for that, you have to take entry point.

165
00:09:50.950 --> 00:09:56.395
So entry point means after lunging your container,

166
00:09:56.395 --> 00:09:57.760
please run this command.

167
00:09:57.760 --> 00:10:01.915
But actually we have a lot of options with the entry point.

168
00:10:01.915 --> 00:10:03.415
By combining with command,

169
00:10:03.415 --> 00:10:05.880
we will see all those things in advance level.

170
00:10:05.880 --> 00:10:09.120
Okay, now let me save it.

171
00:10:09.550 --> 00:10:14.015
Now. Simply run docker build hyphen T.

172
00:10:14.015 --> 00:10:23.045
I'm taking my Flask app using open to base image.

173
00:10:23.045 --> 00:10:25.850
Let's say what SHA-1 as v2.

174
00:10:25.850 --> 00:10:29.480
Because already we have taken something correlate. Let me verify it.

175
00:10:29.480 --> 00:10:34.655
Previously. Bill images go here we are taking Flask app.

176
00:10:34.655 --> 00:10:35.720
Let me take the same name,

177
00:10:35.720 --> 00:10:39.185
but let me take wash. And as we do.

178
00:10:39.185 --> 00:10:47.780
So simply the off-current hyphen T 12,

179
00:10:47.780 --> 00:10:49.250
let say Washington as we do.

180
00:10:49.250 --> 00:10:51.365
Of course you can take say other name as well,

181
00:10:51.365 --> 00:10:54.470
but I'm taking existing name with Washington as we

182
00:10:54.470 --> 00:10:58.505
do that in the current location, our docker file.

183
00:10:58.505 --> 00:11:03.785
So it will take some time to create our custom Docker image from our docker file.

184
00:11:03.785 --> 00:11:06.290
Just wait for that less than two minutes,

185
00:11:06.290 --> 00:11:09.725
I think it will take because very simple Dockerfile.

186
00:11:09.725 --> 00:11:12.740
Once it is done, then with one single step we will launch

187
00:11:12.740 --> 00:11:16.715
a container so that automatically we can access our Python application,

188
00:11:16.715 --> 00:11:27.000
Python Flask application through browser using its URL just right for less than a minute.

189
00:11:32.230 --> 00:11:34.700
So it is running VIM.

190
00:11:34.700 --> 00:11:39.845
Then flask copying done.

191
00:11:39.845 --> 00:11:47.015
Now see our docker images simply by running docker images.

192
00:11:47.015 --> 00:11:50.420
So this is the image just now we created, no,

193
00:11:50.420 --> 00:11:55.115
let me create a container using the docker image, custom image.

194
00:11:55.115 --> 00:11:57.415
But before that, C,

195
00:11:57.415 --> 00:12:01.420
Use reports on your Docker to host these h 0, h 0.

196
00:12:01.420 --> 00:12:05.710
Now, this is the container which we launched with minor steps.

197
00:12:05.710 --> 00:12:09.910
Now I'm creating a new container docker run hyphen,

198
00:12:09.910 --> 00:12:12.445
hyphen D, Let's say name as.

199
00:12:12.445 --> 00:12:18.715
So previously we had taken my Flask app simply now I'm taking Flask app.

200
00:12:18.715 --> 00:12:23.665
Then puts, see already a user on your Docker host.

201
00:12:23.665 --> 00:12:27.685
Let me take on my Docker host port as 5 thousand.

202
00:12:27.685 --> 00:12:31.540
Anyway, inside container, our application is running on 5 thousand port.

203
00:12:31.540 --> 00:12:34.015
Then image is this one.

204
00:12:34.015 --> 00:12:35.650
So with one single step,

205
00:12:35.650 --> 00:12:37.180
our entire setup is done.

206
00:12:37.180 --> 00:12:38.230
That's it.

207
00:12:38.230 --> 00:12:44.560
Now clear and docker ps c that this is the container.

208
00:12:44.560 --> 00:12:47.890
Just know we launched with one single step automatically

209
00:12:47.890 --> 00:12:52.210
our Python Flask application is copied to Docker container and it is running.

210
00:12:52.210 --> 00:12:53.635
Now if you want to verify,

211
00:12:53.635 --> 00:12:55.330
take 5 thousand as the port,

212
00:12:55.330 --> 00:12:58.150
because that is the port we mapped with the docker host.

213
00:12:58.150 --> 00:13:02.410
Go to browser and take your Docker host IP,

214
00:13:02.410 --> 00:13:04.450
then port number as 5 thousand.

215
00:13:04.450 --> 00:13:07.330
See that now it is working perfectly, right?

216
00:13:07.330 --> 00:13:10.375
So friends, there is the simple way to create

217
00:13:10.375 --> 00:13:14.200
a Docker file for Python Flask applications.

218
00:13:14.200 --> 00:13:15.190
Okay?

219
00:13:15.190 --> 00:13:18.200
Okay guys, thank you for watching this video.

