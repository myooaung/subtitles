1
00:00:00,000 --> 00:00:02,700
Friends here we are creating our

2
00:00:02,700 --> 00:00:06,120
first two Dockerfile c. We already know that Dockerfile is

3
00:00:06,120 --> 00:00:08,730
used to create custom Docker images simply by

4
00:00:08,730 --> 00:00:11,910
executing docker build command on your Docker file.

5
00:00:11,910 --> 00:00:16,590
Now here to write our foster Docker file for our custom Docker image.

6
00:00:16,590 --> 00:00:18,390
Let me take a small requirement.

7
00:00:18,390 --> 00:00:25,245
So here my requirement is I need to launch a container using open to 20 dots 0-4 version.

8
00:00:25,245 --> 00:00:30,240
An offer that my container should have Python 33 and a flat packages.

9
00:00:30,240 --> 00:00:35,580
So simply Finally, I will use this container to run some Python Flask application.

10
00:00:35,580 --> 00:00:39,630
Anyway, this is my requirement then how to write a Docker file.

11
00:00:39,630 --> 00:00:42,145
So anyway, after writing Docker file,

12
00:00:42,145 --> 00:00:47,090
simply build your custom Docker images by running docker build command.

13
00:00:47,090 --> 00:00:49,895
After that, from that custom Docker image, simply,

14
00:00:49,895 --> 00:00:53,360
you can launch your container by running docker run command.

15
00:00:53,360 --> 00:00:54,620
That's fine.

16
00:00:54,620 --> 00:00:57,785
And here, before writing Docker file,

17
00:00:57,785 --> 00:00:59,810
just for our understanding purpose,

18
00:00:59,810 --> 00:01:06,485
first I we launch manually container with 01 to 2004 base image.

19
00:01:06,485 --> 00:01:10,655
And then manually I will install Python three p53 and Flask packages.

20
00:01:10,655 --> 00:01:13,985
After that, those stiff simply I will convert

21
00:01:13,985 --> 00:01:17,075
into Docker file so that it is very easy to understand.

22
00:01:17,075 --> 00:01:19,250
I mean how to write your Docker file.

23
00:01:19,250 --> 00:01:21,365
Now let me go to my Docker host.

24
00:01:21,365 --> 00:01:24,560
So here simply, I'm searching for existing images.

25
00:01:24,560 --> 00:01:26,075
If you observe this output,

26
00:01:26,075 --> 00:01:29,750
we are not having 01 to 2004 image.

27
00:01:29,750 --> 00:01:31,460
So let me search for that.

28
00:01:31,460 --> 00:01:36,020
So simply by using docker search, open to,

29
00:01:36,020 --> 00:01:41,180
with a DAG S t dot 0 for C,

30
00:01:41,180 --> 00:01:42,440
you are getting some images,

31
00:01:42,440 --> 00:01:45,065
but I am not seeing exactly open to name here.

32
00:01:45,065 --> 00:01:47,944
They are with the combination of some other packages.

33
00:01:47,944 --> 00:01:51,050
So instead of that, what we can do is we can also go to

34
00:01:51,050 --> 00:01:57,035
our official Docker registry that is called hub dot dot dot.com.

35
00:01:57,035 --> 00:01:59,360
So here simply go to explore.

36
00:01:59,360 --> 00:02:04,940
And simply as such here using open to key.

37
00:02:04,940 --> 00:02:08,930
Now you are going to get our very first as some open to image and just open

38
00:02:08,930 --> 00:02:14,015
that anybody sees official image from your Docker.

39
00:02:14,015 --> 00:02:15,905
And if we go down,

40
00:02:15,905 --> 00:02:18,380
we're having different types of tags.

41
00:02:18,380 --> 00:02:24,060
And here, view available tax option is there just click on that.

42
00:02:24,130 --> 00:02:29,210
Then scroll down. See that there are different images.

43
00:02:29,210 --> 00:02:29,960
Tags.

44
00:02:29,960 --> 00:02:31,730
I mean, for this open to image,

45
00:02:31,730 --> 00:02:33,125
there are different tags.

46
00:02:33,125 --> 00:02:34,700
Now go down somewhere,

47
00:02:34,700 --> 00:02:36,725
you will get your required tag.

48
00:02:36,725 --> 00:02:40,310
So here we have a tag, 2004.

49
00:02:40,310 --> 00:02:42,980
And for this, there is already a command that is

50
00:02:42,980 --> 00:02:45,920
docker pull command how to pull that he made NPO docker host.

51
00:02:45,920 --> 00:02:49,430
So simply copy that and come back to our docker host,

52
00:02:49,430 --> 00:02:51,920
paste that command and then run it.

53
00:02:51,920 --> 00:02:54,620
Now see docker images.

54
00:02:54,620 --> 00:02:58,385
We have 01 to 2004.

55
00:02:58,385 --> 00:03:00,980
Now we have our required base image.

56
00:03:00,980 --> 00:03:03,350
Now let me launch a container from this first.

57
00:03:03,350 --> 00:03:07,520
So simply by using docker run iphone, IT hyphen D.

58
00:03:07,520 --> 00:03:09,185
I am not giving any name,

59
00:03:09,185 --> 00:03:11,970
simply I'm launching the container.

60
00:03:13,120 --> 00:03:15,590
It has been created.

61
00:03:15,590 --> 00:03:17,105
Now see docker ps.

62
00:03:17,105 --> 00:03:19,205
Yes, your container is up and running.

63
00:03:19,205 --> 00:03:21,080
So let me enter into

64
00:03:21,080 --> 00:03:27,710
That container simply by using Docker EX EC hyphen IT using Bash shell.

65
00:03:27,710 --> 00:03:30,155
Now we're inside of our container.

66
00:03:30,155 --> 00:03:31,415
Now let me verify,

67
00:03:31,415 --> 00:03:34,790
Is there any default Python with these host, I mean,

68
00:03:34,790 --> 00:03:37,355
within this container C that simply we can verify it

69
00:03:37,355 --> 00:03:42,245
which Python there is no Python or which Python three.

70
00:03:42,245 --> 00:03:43,625
There is no Python three.

71
00:03:43,625 --> 00:03:45,605
If Python three or Python is not there,

72
00:03:45,605 --> 00:03:49,250
then anyway, there is no chance to how Pip and packages.

73
00:03:49,250 --> 00:03:50,540
That's fine.

74
00:03:50,540 --> 00:03:53,210
Now let me install Python three on this host.

75
00:03:53,210 --> 00:03:55,700
So how to install your any package on your own to

76
00:03:55,700 --> 00:03:59,510
operating system simply by taking APT get installed.

77
00:03:59,510 --> 00:04:02,940
Python, I need Python three.

78
00:04:03,360 --> 00:04:05,515
It is not installing.

79
00:04:05,515 --> 00:04:08,260
So actually before installing any PAG is you need to update

80
00:04:08,260 --> 00:04:13,960
your APT repo equity get update.

81
00:04:13,960 --> 00:04:15,790
Now once if you update after that,

82
00:04:15,790 --> 00:04:17,170
you can install any package.

83
00:04:17,170 --> 00:04:19,015
So now I am updating that.

84
00:04:19,015 --> 00:04:20,620
So it has been updated.

85
00:04:20,620 --> 00:04:23,425
Now let me try to install Python three.

86
00:04:23,425 --> 00:04:26,185
So equity get installed Python three.

87
00:04:26,185 --> 00:04:30,790
Now see that it installing and it is actually asking conformation as Torno.

88
00:04:30,790 --> 00:04:32,620
So here instead of giving yes, sir,

89
00:04:32,620 --> 00:04:35,050
no confirmation is here in the command line itself

90
00:04:35,050 --> 00:04:37,915
while running APT get install Python three,

91
00:04:37,915 --> 00:04:41,845
we can provide hyphen Way option yes, conformation.

92
00:04:41,845 --> 00:04:43,660
That's it.

93
00:04:43,660 --> 00:04:47,060
So now it is installing Python three.

94
00:04:47,280 --> 00:04:49,015
It's done.

95
00:04:49,015 --> 00:04:50,095
You can verify it.

96
00:04:50,095 --> 00:04:52,405
Which Python three?

97
00:04:52,405 --> 00:04:55,975
Yes, Python three is there or you can also verify the West Chen.

98
00:04:55,975 --> 00:04:58,795
So you are getting Python 3.1a dot-dot-dot.

99
00:04:58,795 --> 00:05:01,945
Suppose if you want to get you are required to Python.

100
00:05:01,945 --> 00:05:05,155
Three dot 6370 here to mention that Python.

101
00:05:05,155 --> 00:05:08,200
Anyway, let us Python you are getting here. That's fine.

102
00:05:08,200 --> 00:05:10,255
Now let me install PIP three.

103
00:05:10,255 --> 00:05:12,310
Now if you want to install pip three,

104
00:05:12,310 --> 00:05:14,890
actually you need to mention with respect to Python.

105
00:05:14,890 --> 00:05:18,655
So now we have Python three, hyphen Pip.

106
00:05:18,655 --> 00:05:21,320
Let me provide hyphen byte.

107
00:05:21,660 --> 00:05:25,430
Now it is installing one pip package.

108
00:05:26,610 --> 00:05:30,650
So once it is done, again, we'll verify it.

109
00:05:34,740 --> 00:05:38,150
Just wait for sometime.

110
00:05:39,420 --> 00:05:42,470
It is almost done.

111
00:05:42,840 --> 00:05:44,500
Yeah.

112
00:05:44,500 --> 00:05:45,490
I'll see that.

113
00:05:45,490 --> 00:05:49,030
Which PIP3?

114
00:05:49,030 --> 00:05:50,845
Yes, PIP3 is there.

115
00:05:50,845 --> 00:05:52,180
Then actually what we need,

116
00:05:52,180 --> 00:05:53,980
we need Flask package as well.

117
00:05:53,980 --> 00:05:57,385
Now see that let me enter into Python terminal.

118
00:05:57,385 --> 00:05:59,890
So here simply I'm importing flask.

119
00:05:59,890 --> 00:06:01,460
Sorry.

120
00:06:02,040 --> 00:06:06,910
There is no package called Flask Python package with your Python.

121
00:06:06,910 --> 00:06:08,335
So if you want to install that,

122
00:06:08,335 --> 00:06:12,945
you need to install pip, install Flask.

123
00:06:12,945 --> 00:06:18,815
I'll see that it is installing your package package done.

124
00:06:18,815 --> 00:06:22,595
So what we did manually to get your requirement,

125
00:06:22,595 --> 00:06:26,045
the very first step is we have taken

126
00:06:26,045 --> 00:06:36,120
base image that has open to quantity dot 04.

127
00:06:37,150 --> 00:06:44,840
Then after that, we updated APT, APD get update.

128
00:06:44,840 --> 00:06:51,815
Then after that we installed Python.

129
00:06:51,815 --> 00:06:56,070
Three, then offer that we installed.

130
00:06:56,470 --> 00:06:59,270
Python three hyphen.

131
00:06:59,270 --> 00:07:02,840
Then after that we run this command pip

132
00:07:02,840 --> 00:07:09,740
install Flask c. These

133
00:07:09,740 --> 00:07:13,790
are the commands which we installed inside of your base container.

134
00:07:13,790 --> 00:07:15,635
Now for this requirement,

135
00:07:15,635 --> 00:07:18,230
if you want to create a custom Docker image,

136
00:07:18,230 --> 00:07:20,090
you how to write Dockerfile.

137
00:07:20,090 --> 00:07:21,185
So how to read Dockerfile,

138
00:07:21,185 --> 00:07:23,015
very simple for all of these steps,

139
00:07:23,015 --> 00:07:25,580
just to make an instruction in your Docker file,

140
00:07:25,580 --> 00:07:28,085
C. In our docker file.

141
00:07:28,085 --> 00:07:30,995
The very first step is always about your base image.

142
00:07:30,995 --> 00:07:32,480
Now to get our requirement,

143
00:07:32,480 --> 00:07:34,130
we are using this base image.

144
00:07:34,130 --> 00:07:36,890
Now, that base image information you have to mention as

145
00:07:36,890 --> 00:07:39,755
a very first step in your Docker file.

146
00:07:39,755 --> 00:07:41,630
And that is with respect to from,

147
00:07:41,630 --> 00:07:45,380
that's from the base image.

148
00:07:45,380 --> 00:07:50,375
We are going to create custom Docker image, right?

149
00:07:50,375 --> 00:07:52,970
And actually inside of this container,

150
00:07:52,970 --> 00:07:55,385
we executed all these commands.

151
00:07:55,385 --> 00:07:58,895
That means just to install these three packages in our container,

152
00:07:58,895 --> 00:08:00,485
we install these three commands.

153
00:08:00,485 --> 00:08:02,450
It simply take all these commands,

154
00:08:02,450 --> 00:08:08,885
whatever the commands we executed manually inside of your container and paste them.

155
00:08:08,885 --> 00:08:10,655
And for each and every command,

156
00:08:10,655 --> 00:08:14,270
you just to start with R1 instruction.

157
00:08:14,270 --> 00:08:15,950
Capital One.

158
00:08:15,950 --> 00:08:18,140
Of course, you can also add small as well, but preferred,

159
00:08:18,140 --> 00:08:21,950
we use capital letters or uppercase letters.

160
00:08:21,950 --> 00:08:29,120
Now here what is mean by R1 means while creating your custom Docker image, in your image,

161
00:08:29,120 --> 00:08:32,900
you are run will execute all these commands so

162
00:08:32,900 --> 00:08:36,935
that in your image you will get APT, get updated version.

163
00:08:36,935 --> 00:08:39,440
And in that image you will get Python three,

164
00:08:39,440 --> 00:08:41,885
Python 3p and then flask that say,

165
00:08:41,885 --> 00:08:46,040
now this is simply our docker file for our requirement.

166
00:08:46,040 --> 00:08:48,965
Now let me go to my Docker host.

167
00:08:48,965 --> 00:08:51,455
Let me come out from the container.

168
00:08:51,455 --> 00:08:54,050
So you whenever if you want to create a Docker file,

169
00:08:54,050 --> 00:08:57,050
always it is better practice to create some folder on

170
00:08:57,050 --> 00:09:00,110
directly based on the work required project taught application.

171
00:09:00,110 --> 00:09:02,900
Suppose here we are going to use this container later,

172
00:09:02,900 --> 00:09:04,970
let's say for flask applications,

173
00:09:04,970 --> 00:09:08,405
then let me create Flask app,

174
00:09:08,405 --> 00:09:10,565
then navigate into it.

175
00:09:10,565 --> 00:09:15,725
The NEA, just simply create a Docker file so you can take any name for your Docker file.

176
00:09:15,725 --> 00:09:20,150
But preferred way is using capital D Docker file.

177
00:09:20,150 --> 00:09:23,780
Then open that file and then simply paste your instructions.

178
00:09:23,780 --> 00:09:24,665
Let's see.

179
00:09:24,665 --> 00:09:26,090
We can also write empty lens,

180
00:09:26,090 --> 00:09:29,180
no problem, but let me remove that empty line.

181
00:09:29,180 --> 00:09:31,335
Save it.

182
00:09:31,335 --> 00:09:36,400
Then after creating your Docker file, from this Docker file,

183
00:09:36,400 --> 00:09:39,970
actually we had to create our custom dog remains so far that we have a command

184
00:09:39,970 --> 00:09:45,055
called The occur dot.

185
00:09:45,055 --> 00:09:46,450
And for your image,

186
00:09:46,450 --> 00:09:48,790
if you want to provide some tag's name,

187
00:09:48,790 --> 00:09:50,695
then you can use hyphen T.

188
00:09:50,695 --> 00:09:54,790
And let say suppose I want flask gap

189
00:09:54,790 --> 00:09:59,170
anywhere that I'm creating with the help of base image called Woburn,

190
00:09:59,170 --> 00:10:02,665
do then assume that this is

191
00:10:02,665 --> 00:10:07,465
very fast to Washington than simply I'm taking colon V1, that's it.

192
00:10:07,465 --> 00:10:11,180
Now it is going to create your custom image.

193
00:10:13,540 --> 00:10:16,370
The very first time we are running.

194
00:10:16,370 --> 00:10:17,910
Yeah.

195
00:10:30,070 --> 00:10:33,515
Cd stopping because we did some mistake.

196
00:10:33,515 --> 00:10:36,020
So what is that you see on each and

197
00:10:36,020 --> 00:10:38,660
every command at the end you need to provide confirmation.

198
00:10:38,660 --> 00:10:39,755
Yes.

199
00:10:39,755 --> 00:10:43,010
But for pip command you don't need to know.

200
00:10:43,010 --> 00:10:45,125
Let me modify our docker file.

201
00:10:45,125 --> 00:10:48,890
So it because of density is exiting with some ETL code.

202
00:10:48,890 --> 00:10:52,260
Let me open our docker file.

203
00:10:58,630 --> 00:11:00,740
The Czech.

204
00:11:00,740 --> 00:11:07,220
So don't forget to provide hyphen way at the end of your APT get install command.

205
00:11:07,220 --> 00:11:09,140
Okay, that's fine.

206
00:11:09,140 --> 00:11:11,550
Now let me rerun.

207
00:11:12,580 --> 00:11:17,780
So at very first time we are running this Dockerfile execution.

208
00:11:17,780 --> 00:11:20,555
I mean, we are building customers from this Docker file.

209
00:11:20,555 --> 00:11:23,165
That's why it will take some time.

210
00:11:23,165 --> 00:11:25,970
But later if have any modifications on

211
00:11:25,970 --> 00:11:28,880
this Docker file and if you read on your docker build command,

212
00:11:28,880 --> 00:11:34,115
within less time, it will build your new custom image from this Docker file.

213
00:11:34,115 --> 00:11:37,590
Anyway, just to wait for some time,

214
00:11:37,900 --> 00:11:41,220
maybe less than two minutes.

215
00:11:47,530 --> 00:11:57,350
It is almost didn't see that after completion of your docker build command,

216
00:11:57,350 --> 00:11:59,405
it is giving you a tagged,

217
00:11:59,405 --> 00:12:04,400
right, or I'll simply The occur images.

218
00:12:04,400 --> 00:12:08,255
See that just now we created this image.

219
00:12:08,255 --> 00:12:09,665
Now from this image,

220
00:12:09,665 --> 00:12:11,300
if you launch your container,

221
00:12:11,300 --> 00:12:14,750
human container will how your Python three, b,

222
00:12:14,750 --> 00:12:18,830
three as well as flask module. Now let me do that.

223
00:12:18,830 --> 00:12:24,120
I mean, let me launch a container using this image.

224
00:12:24,190 --> 00:12:29,105
So docker ps.

225
00:12:29,105 --> 00:12:31,490
So you just know we created this container,

226
00:12:31,490 --> 00:12:34,189
this is previously executed container.

227
00:12:34,189 --> 00:12:36,170
Now, just now we cleared this container,

228
00:12:36,170 --> 00:12:38,105
let me enter into it.

229
00:12:38,105 --> 00:12:41,629
Now.EXE Z hyphen IT.

230
00:12:41,629 --> 00:12:44,285
Container ID badge.

231
00:12:44,285 --> 00:12:48,950
I'll see that simply as such with the which Python three.

232
00:12:48,950 --> 00:12:53,479
But there is a Python. So which p53,

233
00:12:53,479 --> 00:12:59,735
p63 is there and go to your Python terminal and then simply import Flask.

234
00:12:59,735 --> 00:13:02,855
Yes, flux model is also there.

235
00:13:02,855 --> 00:13:07,070
Okay, so there is the simple way just to create

236
00:13:07,070 --> 00:13:11,910
a one simple Dockerfile for your requirement.

237
00:13:13,300 --> 00:13:16,625
So what is our docker file?

238
00:13:16,625 --> 00:13:18,440
This one.

239
00:13:18,440 --> 00:13:21,710
Okay. Okay. Okay, guys,

240
00:13:21,710 --> 00:13:24,060
thank you for watching this video.

