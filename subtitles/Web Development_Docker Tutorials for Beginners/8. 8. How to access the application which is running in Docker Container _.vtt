WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.505
Prince here or concept tease,

2
00:00:02.505 --> 00:00:06.540
how to access the application which is running inside of a container.

3
00:00:06.540 --> 00:00:07.935
Now let me go with that.

4
00:00:07.935 --> 00:00:10.920
See basically we are using containers to run

5
00:00:10.920 --> 00:00:14.160
applications, more specifically, microservices.

6
00:00:14.160 --> 00:00:16.830
Very soon we will discuss about microservices.

7
00:00:16.830 --> 00:00:17.415
Fine.

8
00:00:17.415 --> 00:00:23.790
Now here, let me run a static application using HTTP web server in a container.

9
00:00:23.790 --> 00:00:29.850
First, let me open my Docker host C here we already pulled some are docker images.

10
00:00:29.850 --> 00:00:34.585
These all are docker images which are available on our docker host locally.

11
00:00:34.585 --> 00:00:39.905
And let me display the containers which are running on my Dakota host.

12
00:00:39.905 --> 00:00:42.740
Now let me create a new container by

13
00:00:42.740 --> 00:00:46.640
selecting sent waves image with the six dot-dot-dot version.

14
00:00:46.640 --> 00:00:51.230
We already know how to create a container that is by using docker,

15
00:00:51.230 --> 00:00:54.275
run hyphen, hyphen D.

16
00:00:54.275 --> 00:00:56.720
Now let me take a name for my container,

17
00:00:56.720 --> 00:01:01.100
custom name, let's say static application.

18
00:01:01.100 --> 00:01:05.105
And here I want to create this container by taking

19
00:01:05.105 --> 00:01:09.095
sent ways image with Watson as sub 06 dot-dot-dot.

20
00:01:09.095 --> 00:01:10.910
Fine. See here one more thing,

21
00:01:10.910 --> 00:01:13.685
internal off and giving your image name.

22
00:01:13.685 --> 00:01:16.685
You can also provide image ID,

23
00:01:16.685 --> 00:01:20.750
either image name with a tag or simply can provide

24
00:01:20.750 --> 00:01:25.415
image ID to create a container with your required image.

25
00:01:25.415 --> 00:01:26.345
That's fine.

26
00:01:26.345 --> 00:01:27.770
Now let me enter.

27
00:01:27.770 --> 00:01:30.005
Now it has been created a container.

28
00:01:30.005 --> 00:01:32.674
Now let me list to the available containers.

29
00:01:32.674 --> 00:01:36.575
So this is the container which we created just no.

30
00:01:36.575 --> 00:01:37.715
Fine.

31
00:01:37.715 --> 00:01:45.635
No, let me enter into that container by using Docker EX EC hyphen IT, then Container ID.

32
00:01:45.635 --> 00:01:49.310
Then I want to connect with that container using Bash shell.

33
00:01:49.310 --> 00:01:51.875
Now I entered into that container.

34
00:01:51.875 --> 00:01:53.780
Now here, as of now,

35
00:01:53.780 --> 00:01:56.555
I don't have any HTTP web server.

36
00:01:56.555 --> 00:02:00.125
Now let me install it by taking yum install

37
00:02:00.125 --> 00:02:08.430
HTTPD command will install your head to the DPT website just to wait for some time.

38
00:02:27.760 --> 00:02:33.500
It has been installed your page 3D beauty web server on this host?

39
00:02:33.500 --> 00:02:36.860
No, let me verify the status. As of now.

40
00:02:36.860 --> 00:02:40.380
This with ease.

41
00:02:40.810 --> 00:02:45.035
Sent weighs 6.8. So Incentive A6 dot-dot-dot.

42
00:02:45.035 --> 00:02:46.685
You don't have system CTL command.

43
00:02:46.685 --> 00:02:54.185
Instead of that, you had to take Service Command, Service HTTPD status.

44
00:02:54.185 --> 00:02:57.125
So that head to the DPT is not running.

45
00:02:57.125 --> 00:02:58.895
No, let me start it first.

46
00:02:58.895 --> 00:03:02.675
So RVs HTTPD Start.

47
00:03:02.675 --> 00:03:06.240
Now let me verify this status.

48
00:03:07.810 --> 00:03:13.340
I'll see here your head to the debris services running fine.

49
00:03:13.340 --> 00:03:19.565
Now actually, I want to run a static website using this heterogeneity webserver.

50
00:03:19.565 --> 00:03:23.775
Now let me take a content for my starting website as this one.

51
00:03:23.775 --> 00:03:25.585
Now if you want to,

52
00:03:25.585 --> 00:03:30.655
so any static website using HTTP web server,

53
00:03:30.655 --> 00:03:34.420
you need to place index.html under dislocation.

54
00:03:34.420 --> 00:03:36.715
Now let me navigate into that location.

55
00:03:36.715 --> 00:03:38.365
Slash var.

56
00:03:38.365 --> 00:03:41.335
Wow, HTML.

57
00:03:41.335 --> 00:03:45.085
No, here we need to create index.html.

58
00:03:45.085 --> 00:03:50.275
Let me create that. Now let me paste our static content.

59
00:03:50.275 --> 00:03:53.305
Let me say we now,

60
00:03:53.305 --> 00:03:58.150
our static content has been updated in this location.

61
00:03:58.150 --> 00:04:05.530
Fine. Now let me access that index.html using curl command simply by

62
00:04:05.530 --> 00:04:13.540
taking you are hedged http, localhost, colon 80.

63
00:04:13.540 --> 00:04:18.565
Now by default you were HTTP web server will run on 80 port number.

64
00:04:18.565 --> 00:04:21.865
So simply, I'm executing this URL.

65
00:04:21.865 --> 00:04:27.025
See that you are getting your content which is there in your index.html.

66
00:04:27.025 --> 00:04:28.150
That's fine.

67
00:04:28.150 --> 00:04:29.995
If you observe, as of now,

68
00:04:29.995 --> 00:04:31.840
we are inside of a container.

69
00:04:31.840 --> 00:04:38.425
Now, I want to access this URL from outside of your container.

70
00:04:38.425 --> 00:04:41.485
Now let me come out from your container.

71
00:04:41.485 --> 00:04:43.615
Now we're outside of a container,

72
00:04:43.615 --> 00:04:45.625
are simply on our docker host.

73
00:04:45.625 --> 00:04:52.945
Now, how I can access the URL which is working inside of your container.

74
00:04:52.945 --> 00:04:57.680
Suppose if I tried to run curl this URL,

75
00:04:58.020 --> 00:05:06.145
see that connection refused because on our docker host we are not running HTTPD server.

76
00:05:06.145 --> 00:05:09.985
We're running history deputy web server inside of a container.

77
00:05:09.985 --> 00:05:13.000
Now, how we can access that head today,

78
00:05:13.000 --> 00:05:15.955
deputy web server from your Docker host.

79
00:05:15.955 --> 00:05:23.125
So for that, you need to map your Docker host port number with the word container port.

80
00:05:23.125 --> 00:05:27.445
Actually, if you remember wildly creating our container,

81
00:05:27.445 --> 00:05:32.640
we did not map any port of your Docker host with your Docker container.

82
00:05:32.640 --> 00:05:36.350
Now, our intention is we are running head

83
00:05:36.350 --> 00:05:39.665
to redeploy the web server on port number 80 inside of a container.

84
00:05:39.665 --> 00:05:43.910
That's why before creating your container unit to

85
00:05:43.910 --> 00:05:48.545
map the port number 80 with your Docker host to port number.

86
00:05:48.545 --> 00:05:51.230
You can take any port on your Docker host.

87
00:05:51.230 --> 00:05:56.150
And that podia to map with your head to the d pd web server port,

88
00:05:56.150 --> 00:05:58.160
which is running inside of your container.

89
00:05:58.160 --> 00:06:04.910
Now, first let me remove your existing container.

90
00:06:04.910 --> 00:06:07.625
So simply by taking Docker,

91
00:06:07.625 --> 00:06:11.300
docker, remove running container.

92
00:06:11.300 --> 00:06:13.744
So you have to take hyphen F forcefully.

93
00:06:13.744 --> 00:06:15.635
I am removing this container.

94
00:06:15.635 --> 00:06:16.640
Fine.

95
00:06:16.640 --> 00:06:19.355
So be clear. Whenever, if you want to

96
00:06:19.355 --> 00:06:23.255
access the application which is running inside of a container,

97
00:06:23.255 --> 00:06:29.075
you need to map your Docker host to port number with the word container port number.

98
00:06:29.075 --> 00:06:32.825
So container port number is nothing but on which you put your application is running.

99
00:06:32.825 --> 00:06:36.290
Now for that, nothing is, they're very simple.

100
00:06:36.290 --> 00:06:39.095
Already. We know docker run command to create a container.

101
00:06:39.095 --> 00:06:41.075
In that command itself,

102
00:06:41.075 --> 00:06:46.175
we have to add one more option that is hyphen p port number.

103
00:06:46.175 --> 00:06:49.715
Now here I am taking just to avoid confusion,

104
00:06:49.715 --> 00:06:51.980
80 on my Docker host.

105
00:06:51.980 --> 00:06:55.415
Map with 80 on my container.

106
00:06:55.415 --> 00:06:57.020
Be clear.

107
00:06:57.020 --> 00:07:02.765
These first two parties on our docker host second port is on our Docker container.

108
00:07:02.765 --> 00:07:04.520
If you wanted to get more clarity,

109
00:07:04.520 --> 00:07:06.799
let me take here ADHD.

110
00:07:06.799 --> 00:07:11.525
So what I want the Portuguese there on my Docker host that is 8080.

111
00:07:11.525 --> 00:07:15.079
I am mapping that port with the API of my container.

112
00:07:15.079 --> 00:07:16.910
Now let me run it.

113
00:07:16.910 --> 00:07:18.035
Now.

114
00:07:18.035 --> 00:07:20.285
Let me run docker ps command.

115
00:07:20.285 --> 00:07:25.775
Now see that in your container information.

116
00:07:25.775 --> 00:07:29.060
Ports, this is your Docker host.

117
00:07:29.060 --> 00:07:34.205
Docker host to port number is mapper width 80 of your container port.

118
00:07:34.205 --> 00:07:37.160
Now let me log in into your container.

119
00:07:37.160 --> 00:07:40.745
Docker EXE c hyphen IT.

120
00:07:40.745 --> 00:07:42.544
Bashful.

121
00:07:42.544 --> 00:07:46.055
Now first, this is new container which we created just No,

122
00:07:46.055 --> 00:07:52.770
let me install once again this HTTPD by using m install HTTPD.

123
00:07:52.780 --> 00:07:59.910
So meanwhile, let me copy the our index.html.

124
00:08:02.860 --> 00:08:06.450
Now you had to wait for some time.

125
00:08:09.700 --> 00:08:12.900
It is almost are done.

126
00:08:16.360 --> 00:08:18.320
Fine.

127
00:08:18.320 --> 00:08:25.745
Now, let me navigate into Var www slash HTML.

128
00:08:25.745 --> 00:08:29.735
So here let me create an index.html file.

129
00:08:29.735 --> 00:08:33.575
Inside that, we have to paste our static website content.

130
00:08:33.575 --> 00:08:35.015
Fine.

131
00:08:35.015 --> 00:08:38.630
Now, we created index.html.

132
00:08:38.630 --> 00:08:43.400
First, let me verify whether you are HTTP web server is serving

133
00:08:43.400 --> 00:08:48.245
your static website from your container itself.

134
00:08:48.245 --> 00:08:50.000
So inside of your container,

135
00:08:50.000 --> 00:08:52.340
you can run in this way.

136
00:08:52.340 --> 00:08:58.580
I mean, CAL, HTTP, localhost, colon 80.

137
00:08:58.580 --> 00:09:02.270
See that? Ok, you are hated.

138
00:09:02.270 --> 00:09:04.565
Httpd web server is not running.

139
00:09:04.565 --> 00:09:09.200
Let me verify service HTTPD status.

140
00:09:09.200 --> 00:09:14.735
Now let me start it. Okay, now let me verify this status.

141
00:09:14.735 --> 00:09:18.560
Nobody is running. Now it is ready to serve you as static website.

142
00:09:18.560 --> 00:09:21.155
Now let me verify using curl command.

143
00:09:21.155 --> 00:09:22.175
That's it.

144
00:09:22.175 --> 00:09:28.640
And one more thing. Generally, if you run hostname command on your servers,

145
00:09:28.640 --> 00:09:31.745
it will do the host name the same way inside of your container.

146
00:09:31.745 --> 00:09:33.080
If you run host name,

147
00:09:33.080 --> 00:09:37.340
it will do the host name of your container simply your container read-only.

148
00:09:37.340 --> 00:09:38.315
Fine.

149
00:09:38.315 --> 00:09:44.330
Now, axis iva static website through

150
00:09:44.330 --> 00:09:47.705
your HTTP web server by taking

151
00:09:47.705 --> 00:09:54.020
HTTP colon slash slash local host audio or container ID inside of your container.

152
00:09:54.020 --> 00:09:58.460
Now let me come out from your container weekly.

153
00:09:58.460 --> 00:10:02.030
Now, let me run docker ps c,

154
00:10:02.030 --> 00:10:07.969
whatever the application is running with the port number 80 inside of your container.

155
00:10:07.969 --> 00:10:12.785
Now that application port is mapped with the 8080 on your Docker host.

156
00:10:12.785 --> 00:10:14.495
That's why you know,

157
00:10:14.495 --> 00:10:20.510
if you run a curl command from your Docker host to access your application,

158
00:10:20.510 --> 00:10:23.165
you have to take h 0 h report.

159
00:10:23.165 --> 00:10:29.120
Now let me run Carl hedge vdp localhost,

160
00:10:29.120 --> 00:10:35.375
or it can also take this IP colon 8080.

161
00:10:35.375 --> 00:10:38.030
Now see the result you are getting.

162
00:10:38.030 --> 00:10:41.435
Now actually this application is running inside of your container,

163
00:10:41.435 --> 00:10:45.139
but we exposed that portrait to your container.

164
00:10:45.139 --> 00:10:47.090
We map that to port 80,

165
00:10:47.090 --> 00:10:50.240
to port off our docker host.

166
00:10:50.240 --> 00:10:55.400
That's why we can able to access that URL from your Docker host.

167
00:10:55.400 --> 00:10:56.495
Fine.

168
00:10:56.495 --> 00:10:59.345
Now, I want to access this URL.

169
00:10:59.345 --> 00:11:02.225
I want to access this URL from my browser.

170
00:11:02.225 --> 00:11:03.830
So how we can access it.

171
00:11:03.830 --> 00:11:06.800
Now if you want to access from your browser,

172
00:11:06.800 --> 00:11:09.680
you need to get the public IP or IP of your server.

173
00:11:09.680 --> 00:11:15.620
Now here I'm using EC2 instance to run my Docker, Docker host.

174
00:11:15.620 --> 00:11:17.870
I'm running on my EC2 instance.

175
00:11:17.870 --> 00:11:19.085
For this EC2 instance,

176
00:11:19.085 --> 00:11:20.990
this is the public IP.

177
00:11:20.990 --> 00:11:27.440
Just take these public IP based it, colon 8080.

178
00:11:27.440 --> 00:11:35.730
And now let me add here HTTP slash slash C.

179
00:11:36.370 --> 00:11:40.610
Yes, we are able to access that application from our browser.

180
00:11:40.610 --> 00:11:46.535
So be clear, even though if you run your application inside of a container,

181
00:11:46.535 --> 00:11:51.920
you need to map the application port number with your Docker host.

182
00:11:51.920 --> 00:11:54.965
Because from external world,

183
00:11:54.965 --> 00:11:57.320
if you want to access your application,

184
00:11:57.320 --> 00:12:02.105
you how to access your application always with respect to your Docker host only.

185
00:12:02.105 --> 00:12:06.170
That's why we are mapping Dakota hosts to port

186
00:12:06.170 --> 00:12:09.695
number with your container application port number.

187
00:12:09.695 --> 00:12:10.445
That's it.

188
00:12:10.445 --> 00:12:13.190
So that is the concept of how to

189
00:12:13.190 --> 00:12:16.265
access the application which is running inside of a container.

190
00:12:16.265 --> 00:12:18.980
So be clear, we can access the application which is

191
00:12:18.980 --> 00:12:21.995
running inside of a container using port mapping.

192
00:12:21.995 --> 00:12:25.670
So that port mapping with the what Docker host.

193
00:12:25.670 --> 00:12:28.145
So simply, by using this command,

194
00:12:28.145 --> 00:12:32.750
we can map your Docker host to port with your content and applications port.

195
00:12:32.750 --> 00:12:38.404
So be clear, you can always access your application or micro surveys from outside,

196
00:12:38.404 --> 00:12:41.930
from external world with respect to your Docker host only.

197
00:12:41.930 --> 00:12:45.755
That's why we are mapping our docker host port number

198
00:12:45.755 --> 00:12:49.880
with your container application port number, let's say, okay.

199
00:12:49.880 --> 00:12:52.740
Okay, I thank you for watching this video.

