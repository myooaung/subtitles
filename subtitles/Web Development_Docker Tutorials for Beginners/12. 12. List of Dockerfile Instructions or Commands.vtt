WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.145
Friends here our concert is

2
00:00:02.145 --> 00:00:06.420
different instructions or commands to write or create a Docker file.

3
00:00:06.420 --> 00:00:08.925
C, we are on the way to create docker file,

4
00:00:08.925 --> 00:00:11.505
but before going to create or write your Docker file,

5
00:00:11.505 --> 00:00:14.355
we have to know different instructions are commands.

6
00:00:14.355 --> 00:00:17.175
No, let me go with them one by one.

7
00:00:17.175 --> 00:00:19.425
The very first instruction is from.

8
00:00:19.425 --> 00:00:21.179
And using this from instruction,

9
00:00:21.179 --> 00:00:24.975
we can mention the base image for our custom image.

10
00:00:24.975 --> 00:00:26.145
Be clear.

11
00:00:26.145 --> 00:00:30.855
This is mandatory and must be the first command in your Docker file.

12
00:00:30.855 --> 00:00:33.345
Then next one is maintainer.

13
00:00:33.345 --> 00:00:38.370
So using this, we can write the name and email address of the image creator.

14
00:00:38.370 --> 00:00:41.755
Anyway, this is optional if you want, we can use it.

15
00:00:41.755 --> 00:00:43.640
Next one is run.

16
00:00:43.640 --> 00:00:48.590
So using R1, we can execute any command, our Linux command,

17
00:00:48.590 --> 00:00:54.935
and we can save that result as a new layer in our custom image sc agenda.

18
00:00:54.935 --> 00:00:58.520
We how to create a container from some image,

19
00:00:58.520 --> 00:01:00.905
but that image should have a let say,

20
00:01:00.905 --> 00:01:04.145
some package called in the next.

21
00:01:04.145 --> 00:01:09.485
So if your base image is not having package called Engineers,

22
00:01:09.485 --> 00:01:11.270
then using this run command,

23
00:01:11.270 --> 00:01:12.965
we're implementing your Docker file.

24
00:01:12.965 --> 00:01:16.040
We will do something like run yum install in Unix.

25
00:01:16.040 --> 00:01:21.575
So that in Unix package will be added as a layer on top of your base image.

26
00:01:21.575 --> 00:01:23.600
So that from that custom image,

27
00:01:23.600 --> 00:01:26.224
whenever if you launch your container,

28
00:01:26.224 --> 00:01:29.525
it will get automatically engineer package.

29
00:01:29.525 --> 00:01:33.170
So simply to execute your commands in your image,

30
00:01:33.170 --> 00:01:35.255
we are using R1 instruction.

31
00:01:35.255 --> 00:01:39.725
Then copy, actually for copy without two types of instructions.

32
00:01:39.725 --> 00:01:42.095
One is copy and second one is ad.

33
00:01:42.095 --> 00:01:44.750
But there is a difference between copy and add.

34
00:01:44.750 --> 00:01:48.230
Simply if you take copy that copy instruction,

35
00:01:48.230 --> 00:01:51.290
we copy a file from your source.

36
00:01:51.290 --> 00:01:54.065
Source here is nothing but your Docker host.

37
00:01:54.065 --> 00:01:59.105
A file or directory from your Docker host into your image.

38
00:01:59.105 --> 00:02:00.965
But if you go with add,

39
00:02:00.965 --> 00:02:02.570
it will do same as your copy.

40
00:02:02.570 --> 00:02:07.430
Along with that, we can directly download some file with URL.

41
00:02:07.430 --> 00:02:10.925
And that file you can copy it into your Docker image.

42
00:02:10.925 --> 00:02:14.690
Not only that, we can also extract tar file and then we can copy

43
00:02:14.690 --> 00:02:18.650
that into your Docker image with the help of ADD instruction.

44
00:02:18.650 --> 00:02:24.650
Anyway, we will see by implementing our custom images with the help of Docker file,

45
00:02:24.650 --> 00:02:28.670
then command, see, it can be

46
00:02:28.670 --> 00:02:33.320
used for executing a specific command within the container. Be clear.

47
00:02:33.320 --> 00:02:36.950
Whenever if you write some commands with the command instruction,

48
00:02:36.950 --> 00:02:39.725
those commands will execute within the container.

49
00:02:39.725 --> 00:02:41.945
So after creating our image,

50
00:02:41.945 --> 00:02:44.345
custom image, we will launch container.

51
00:02:44.345 --> 00:02:45.800
So inside of a container,

52
00:02:45.800 --> 00:02:47.465
if you want to execute any command,

53
00:02:47.465 --> 00:02:51.635
then we will use this command as the instruction to execute your commands.

54
00:02:51.635 --> 00:02:54.335
Then how entry point as well.

55
00:02:54.335 --> 00:02:58.550
See, it sets a default application to be

56
00:02:58.550 --> 00:03:03.050
used every time a content is created with the image.

57
00:03:03.050 --> 00:03:06.545
So actually there is a small confusion between commander entry point,

58
00:03:06.545 --> 00:03:11.075
but I would clarify that while implementing our Dockerfile based on requirement,

59
00:03:11.075 --> 00:03:13.205
I will take command as well as entry point.

60
00:03:13.205 --> 00:03:15.950
And sometimes both we will take.

61
00:03:15.950 --> 00:03:19.505
Then ENV, simply a neuron meant just to set

62
00:03:19.505 --> 00:03:24.650
some environment variables for your container from your custom image.

63
00:03:24.650 --> 00:03:26.944
Next, expose.

64
00:03:26.944 --> 00:03:30.515
See, it associates a specific PO2 to

65
00:03:30.515 --> 00:03:35.180
enable networking between the containers and the outside world.

66
00:03:35.180 --> 00:03:36.830
Then user.

67
00:03:36.830 --> 00:03:39.364
It sets the UID or username,

68
00:03:39.364 --> 00:03:42.140
which is to run the container.

69
00:03:42.140 --> 00:03:43.740
Then volume.

70
00:03:43.740 --> 00:03:47.215
It is used to enable access from the container.

71
00:03:47.215 --> 00:03:49.915
We had directory on the host mission.

72
00:03:49.915 --> 00:03:52.360
So as of now we don't know about volumes concept.

73
00:03:52.360 --> 00:03:53.815
So you may get confused here.

74
00:03:53.815 --> 00:03:57.265
So simply remember that there is an instruction called volume.

75
00:03:57.265 --> 00:03:59.875
Next work directory C.

76
00:03:59.875 --> 00:04:05.440
It said the path where the command defined with the command is to be executed.

77
00:04:05.440 --> 00:04:07.225
Then label.

78
00:04:07.225 --> 00:04:10.810
It allows you to add a label to your Docker image.

79
00:04:10.810 --> 00:04:14.665
So custom labels we can add using this label instruction.

80
00:04:14.665 --> 00:04:19.705
Then onboard a command that is triggered when

81
00:04:19.705 --> 00:04:24.955
the image in the Docker file is used as a base for another image.

82
00:04:24.955 --> 00:04:26.235
Here.

83
00:04:26.235 --> 00:04:30.920
You may not understand about volume or generically label an unbuilt,

84
00:04:30.920 --> 00:04:34.655
but we will see them when implementing our custom images.

85
00:04:34.655 --> 00:04:41.135
But for time being, just remember the names of your Docker file instructions or commands.

86
00:04:41.135 --> 00:04:45.064
So while implementing our Dockerfile based on requirement,

87
00:04:45.064 --> 00:04:48.320
you will be good with these instructions.

88
00:04:48.320 --> 00:04:49.025
Okay?

89
00:04:49.025 --> 00:04:51.870
Okay, guys, thank you for watching this video.

