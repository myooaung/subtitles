WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.790
Sr or concept is Docker components.

2
00:00:02.790 --> 00:00:04.845
See Docker components are nothing but

3
00:00:04.845 --> 00:00:07.905
components which we have in our architecture diagram.

4
00:00:07.905 --> 00:00:09.600
Actually we already know them.

5
00:00:09.600 --> 00:00:12.090
They are like, let me list one by one.

6
00:00:12.090 --> 00:00:15.705
Docker host, Docker Engine, Docker, Client,

7
00:00:15.705 --> 00:00:18.090
Docker objects like images,

8
00:00:18.090 --> 00:00:20.625
Containers, Networks, volumes, and plugins.

9
00:00:20.625 --> 00:00:22.680
And finally, Docker registry.

10
00:00:22.680 --> 00:00:25.470
See here, Dakota hosts is nothing

11
00:00:25.470 --> 00:00:29.885
but on which observer you are going to run your Docker engine.

12
00:00:29.885 --> 00:00:31.565
That is nothing but your Docker host.

13
00:00:31.565 --> 00:00:33.050
So in our architecture diagram,

14
00:00:33.050 --> 00:00:39.065
suppose here x-ray good operating system is nothing but our docker host, Docker Engine.

15
00:00:39.065 --> 00:00:40.880
So using Docker engine only,

16
00:00:40.880 --> 00:00:42.635
we are going to create containers simply,

17
00:00:42.635 --> 00:00:44.825
Docker Engine is the your required software.

18
00:00:44.825 --> 00:00:45.770
Fine.

19
00:00:45.770 --> 00:00:49.535
Then Docker Client C Here we have two types of claims,

20
00:00:49.535 --> 00:00:51.890
Docker CLIA or rest EPA's.

21
00:00:51.890 --> 00:00:53.450
So using these two,

22
00:00:53.450 --> 00:00:55.625
either Docker CLIA or rest APIs,

23
00:00:55.625 --> 00:00:58.340
we can communicate with your Docker engine so that we

24
00:00:58.340 --> 00:01:01.295
can start containers or we can stop containers.

25
00:01:01.295 --> 00:01:03.710
We can deploy containers,

26
00:01:03.710 --> 00:01:05.150
we can remove containers.

27
00:01:05.150 --> 00:01:08.210
All those actions we can perform with the help of Docker

28
00:01:08.210 --> 00:01:11.675
clients find, then Docker objects.

29
00:01:11.675 --> 00:01:15.409
So as of no, we know only images on containers,

30
00:01:15.409 --> 00:01:17.570
but don't worry about remaining objects.

31
00:01:17.570 --> 00:01:18.890
We'll discuss them later.

32
00:01:18.890 --> 00:01:19.655
Fine.

33
00:01:19.655 --> 00:01:22.220
Anyway, what is image see generally in

34
00:01:22.220 --> 00:01:26.825
our image is nothing but an operating system, ISO image.

35
00:01:26.825 --> 00:01:31.145
But here Docker image is an image only.

36
00:01:31.145 --> 00:01:35.975
But it does not include colonel software or any unnecessary softwares.

37
00:01:35.975 --> 00:01:37.460
Instead of that, it has only

38
00:01:37.460 --> 00:01:42.035
required libraries and packages to run your particular application.

39
00:01:42.035 --> 00:01:42.905
Fine.

40
00:01:42.905 --> 00:01:46.145
So simply, in our Docker TMS,

41
00:01:46.145 --> 00:01:51.230
Docker image is a template to create a container.

42
00:01:51.230 --> 00:01:53.045
That's it. Fine.

43
00:01:53.045 --> 00:01:55.490
The next one, container C,

44
00:01:55.490 --> 00:01:57.260
using your Docker image,

45
00:01:57.260 --> 00:01:58.955
we are creating our container.

46
00:01:58.955 --> 00:02:03.335
Generally we can say that container is a Mini server or mini system.

47
00:02:03.335 --> 00:02:09.260
But instead of calling Mini server or mini system in terms of Docker terminology,

48
00:02:09.260 --> 00:02:11.225
we are calling that as a container.

49
00:02:11.225 --> 00:02:15.620
So finally, we can say that the running status of your image,

50
00:02:15.620 --> 00:02:19.715
because we are creating containers with the help of Docker image only.

51
00:02:19.715 --> 00:02:25.250
That's why the Running status of your Docker images in nothing but container.

52
00:02:25.250 --> 00:02:29.465
Right? Fine. Then finally, Docker history.

53
00:02:29.465 --> 00:02:33.650
See Docker racer is nothing but a place where we are going to store

54
00:02:33.650 --> 00:02:35.600
your Docker images are a place

55
00:02:35.600 --> 00:02:38.795
from which you are going to get your required Docker images.

56
00:02:38.795 --> 00:02:43.790
So initially, we will go with official Docker raised three.

57
00:02:43.790 --> 00:02:46.655
That is how it dot dot dot.com. Let me show you that.

58
00:02:46.655 --> 00:02:50.060
So you simply, if you search hub dot dot,

59
00:02:50.060 --> 00:02:55.805
dot.com, it will go to official Docker raised to replace.

60
00:02:55.805 --> 00:02:58.145
That is called simply Docker Hub.

61
00:02:58.145 --> 00:03:04.310
Now let me open that. This is Docker Hub.

62
00:03:04.310 --> 00:03:07.220
Now here, if you simply click on Explore,

63
00:03:07.220 --> 00:03:08.765
Here we have explored.

64
00:03:08.765 --> 00:03:12.470
If you click on that, it will display available images.

65
00:03:12.470 --> 00:03:14.600
See that there are a lot of images.

66
00:03:14.600 --> 00:03:16.475
On the bottom.

67
00:03:16.475 --> 00:03:18.545
You how pages see that?

68
00:03:18.545 --> 00:03:20.825
1234, right?

69
00:03:20.825 --> 00:03:24.740
So these all are available images from your Docker Hub.

70
00:03:24.740 --> 00:03:29.060
So initially we will take our required image from Docker Hub.

71
00:03:29.060 --> 00:03:34.475
Only later we can customize that image so that we can create our custom image.

72
00:03:34.475 --> 00:03:35.480
Fine. That's it.

73
00:03:35.480 --> 00:03:39.000
Okay. Okay guys, thank you for watching this video.

