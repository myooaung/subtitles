WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] When migrating to a new version of Java,

2
00:00:03.000 --> 00:00:04.001
it's important to take

3
00:00:04.001 --> 00:00:07.000
into consideration any third-party dependencies

4
00:00:07.000 --> 00:00:09.008
that may be used by an application.

5
00:00:09.008 --> 00:00:12.003
It's possible that these dependencies

6
00:00:12.003 --> 00:00:16.001
are not compatible with your target Java version.

7
00:00:16.001 --> 00:00:18.003
In that case, you will most likely need

8
00:00:18.003 --> 00:00:22.004
to upgrade or replace those dependencies.

9
00:00:22.004 --> 00:00:26.007
If we look at the HplusSportApiApplication,

10
00:00:26.007 --> 00:00:30.000
we'll see within the pom.xml file

11
00:00:30.000 --> 00:00:34.007
that we're using a pretty dated version of Spring Boot.

12
00:00:34.007 --> 00:00:39.001
In fact, if we navigate to our Package Explorer

13
00:00:39.001 --> 00:00:41.008
and launch the application,

14
00:00:41.008 --> 00:00:43.008
we're going to get some console output

15
00:00:43.008 --> 00:00:46.002
that is a little concerning.

16
00:00:46.002 --> 00:00:48.004
So here within the console output,

17
00:00:48.004 --> 00:00:50.007
you'll see that we are being warned,

18
00:00:50.007 --> 00:00:52.009
regarding reflective access

19
00:00:52.009 --> 00:00:56.002
that is occurring in this version of Spring.

20
00:00:56.002 --> 00:00:58.009
Now, in a future release of Java,

21
00:00:58.009 --> 00:01:01.003
it's possible that our application

22
00:01:01.003 --> 00:01:05.007
will not work because of this reflective access in Spring.

23
00:01:05.007 --> 00:01:07.009
So the time to fix this is now,

24
00:01:07.009 --> 00:01:10.006
while we're performing this migration.

25
00:01:10.006 --> 00:01:13.008
Let's go ahead and we'll stop the application

26
00:01:13.008 --> 00:01:17.008
and then we're going to navigate to our pom.xml file.

27
00:01:17.008 --> 00:01:20.005
Now, if you've ever used Spring Boot,

28
00:01:20.005 --> 00:01:24.007
you know it's really easy to upgrade your version of Spring.

29
00:01:24.007 --> 00:01:27.008
All we need to do is change the version

30
00:01:27.008 --> 00:01:31.004
of the spring-boot-starter-parent artifact

31
00:01:31.004 --> 00:01:34.001
and that will have a cascading effect

32
00:01:34.001 --> 00:01:38.003
on all of Spring's dependencies within our application.

33
00:01:38.003 --> 00:01:42.001
Now, currently, we're using version 1.0.2.

34
00:01:42.001 --> 00:01:49.001
And we're going to upgrade that to version 2.3.0.

35
00:01:49.001 --> 00:01:51.005
Okay, with those changes in place,

36
00:01:51.005 --> 00:01:53.009
let's go ahead, we'll save our application.

37
00:01:53.009 --> 00:01:57.005
And then the application will begin to build

38
00:01:57.005 --> 00:02:01.004
using the updated version of the libraries.

39
00:02:01.004 --> 00:02:04.007
And you'll notice that introduced some problems

40
00:02:04.007 --> 00:02:07.001
within our unit tests.

41
00:02:07.001 --> 00:02:09.001
So let's hop in and take a look

42
00:02:09.001 --> 00:02:12.003
at the ProductServiceTest

43
00:02:12.003 --> 00:02:16.002
and within this class, we're getting an error

44
00:02:16.002 --> 00:02:20.001
on the SpringApplicationConfiguration annotation

45
00:02:20.001 --> 00:02:23.009
and that's because this annotation no longer exists

46
00:02:23.009 --> 00:02:26.000
within this version of Spring.

47
00:02:26.000 --> 00:02:30.004
Let's go ahead and flip our unit test over

48
00:02:30.004 --> 00:02:35.006
to use the new SpringBootTest annotation,

49
00:02:35.006 --> 00:02:39.009
which is used to set up and configure our unit tests.

50
00:02:39.009 --> 00:02:44.000
And to do that, we just add the classes element

51
00:02:44.000 --> 00:02:47.007
and then we point to our main application class,

52
00:02:47.007 --> 00:02:52.004
which is the HplusSportApiApplication class.

53
00:02:52.004 --> 00:02:54.001
So with that in place,

54
00:02:54.001 --> 00:02:56.006
we can go ahead and save our unit test.

55
00:02:56.006 --> 00:03:00.007
And then we had one other test that was broken.

56
00:03:00.007 --> 00:03:04.002
And we see that this test has the same issue.

57
00:03:04.002 --> 00:03:07.000
So I'm just going to put the same fix in place

58
00:03:07.000 --> 00:03:10.003
and then I'll go ahead and save the unit test.

59
00:03:10.003 --> 00:03:13.002
Now, let's talk a little bit about testing.

60
00:03:13.002 --> 00:03:16.000
After you've migrated your source code

61
00:03:16.000 --> 00:03:19.000
and you've upgraded any third-party dependencies,

62
00:03:19.000 --> 00:03:22.008
you want to rigorously test your application

63
00:03:22.008 --> 00:03:25.009
to make sure that it still functions properly.

64
00:03:25.009 --> 00:03:27.000
So let's go ahead.

65
00:03:27.000 --> 00:03:29.005
We can kick off one of these unit tests

66
00:03:29.005 --> 00:03:30.009
by right clicking on it.

67
00:03:30.009 --> 00:03:34.004
Going to Run As and then J Unit Test.

68
00:03:34.004 --> 00:03:38.000
Here you'll see the application will launch the test

69
00:03:38.000 --> 00:03:41.004
and we were able to successfully execute it.

70
00:03:41.004 --> 00:03:44.004
Okay, so I feel pretty good about our tests.

71
00:03:44.004 --> 00:03:46.009
At this point, let's also make sure

72
00:03:46.009 --> 00:03:51.003
that the application runs using the new version of Spring.

73
00:03:51.003 --> 00:03:55.004
So I'm going to right click on our main application class,

74
00:03:55.004 --> 00:04:00.002
go to Run As and then Java Application.

75
00:04:00.002 --> 00:04:02.000
And if we look at the console,

76
00:04:02.000 --> 00:04:05.004
you'll notice that we have upgraded to the new version

77
00:04:05.004 --> 00:04:08.008
of Spring and we no longer get the warnings,

78
00:04:08.008 --> 00:04:11.003
regarding reflective access.

79
00:04:11.003 --> 00:04:12.001
Excellent.

80
00:04:12.001 --> 00:04:14.002
So updating these dependencies

81
00:04:14.002 --> 00:04:16.008
in our project was the last step

82
00:04:16.008 --> 00:04:19.002
in our Java 11 migration.

83
00:04:19.002 --> 00:04:20.003
At this point,

84
00:04:20.003 --> 00:04:24.001
we could confidently release the system to production.

85
00:04:24.001 --> 00:04:25.006
We would just need to ensure

86
00:04:25.006 --> 00:04:30.000
that the production environment had Java 11 installed.

87
00:04:30.000 --> 00:04:33.009
So great work on completing a successful Java migration

88
00:04:33.009 --> 00:04:36.000
and the course project.

