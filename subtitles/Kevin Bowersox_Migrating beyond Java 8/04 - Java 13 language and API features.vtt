WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] The majority of changes in JAVA 13

2
00:00:03.002 --> 00:00:06.001
were not language or API changes, however,

3
00:00:06.001 --> 00:00:08.002
this version did deliver an exciting

4
00:00:08.002 --> 00:00:11.001
new preview feature: TextBlocks.

5
00:00:11.001 --> 00:00:13.004
A TextBlock is a new type of literal

6
00:00:13.004 --> 00:00:17.006
that makes it easier to work with multi-line strings.

7
00:00:17.006 --> 00:00:20.009
In the past, multi-line strings required us to use

8
00:00:20.009 --> 00:00:24.002
concatenation operators and special escape sequences

9
00:00:24.002 --> 00:00:26.005
for quotation marks and new lines,

10
00:00:26.005 --> 00:00:30.005
making them difficult to read and write.

11
00:00:30.005 --> 00:00:33.009
With TextBlocks, we can remove this clutter from our code

12
00:00:33.009 --> 00:00:36.005
and it becomes easier to complete tasks

13
00:00:36.005 --> 00:00:38.007
involving multi-line strings such as

14
00:00:38.007 --> 00:00:44.009
when we word with JSON.

15
00:00:44.009 --> 00:00:47.009
So let's build our first TextBlock.

16
00:00:47.009 --> 00:00:50.009
To do that, I'm going to declare a new variable

17
00:00:50.009 --> 00:00:55.004
of type String and I'll name it multilineText.

18
00:00:55.004 --> 00:00:58.003
Then, in order to start the TextBlock,

19
00:00:58.003 --> 00:01:02.000
we're going to place our opening delimiter

20
00:01:02.000 --> 00:01:05.003
and it's going to be three quotation marks.

21
00:01:05.003 --> 00:01:08.005
After the three quotation marks, we're going to specify

22
00:01:08.005 --> 00:01:10.006
a line terminator by hitting Enter,

23
00:01:10.006 --> 00:01:13.007
and then you'll notice the closing delimiter

24
00:01:13.007 --> 00:01:18.001
of three quotation marks was placed for us by the IDE.

25
00:01:18.001 --> 00:01:20.003
We simply add a semi-colon after that

26
00:01:20.003 --> 00:01:22.007
and we not have a TextBlock.

27
00:01:22.007 --> 00:01:25.005
So essentially, a TextBlock is declared

28
00:01:25.005 --> 00:01:29.002
by an opening delimiter of three quotation marks,

29
00:01:29.002 --> 00:01:32.004
a line terminator, and then a closing delimiter

30
00:01:32.004 --> 00:01:34.004
of three quotation marks.

31
00:01:34.004 --> 00:01:37.006
Within the block, we can go ahead and add content

32
00:01:37.006 --> 00:01:40.006
such as our JSON without adding

33
00:01:40.006 --> 00:01:44.001
any sort of concatenation or escaping.

34
00:01:44.001 --> 00:01:50.000
So I'll just go ahead, write our JSON content here,

35
00:01:50.000 --> 00:01:52.005
and you'll notice how much easier it is

36
00:01:52.005 --> 00:02:03.002
to add this multi-line content into our code.

37
00:02:03.002 --> 00:02:06.008
Okay, so there we have our JSON and what we're

38
00:02:06.008 --> 00:02:10.008
going to do next is take a look at the TextBlock

39
00:02:10.008 --> 00:02:12.007
being printed to the console.

40
00:02:12.007 --> 00:02:15.008
So I'm going to navigate over to our unittest

41
00:02:15.008 --> 00:02:18.002
and here, I'll just right-click on the first test

42
00:02:18.002 --> 00:02:20.007
and go to Runas jUnitTest.

43
00:02:20.007 --> 00:02:23.001
Now let's take a look here, at several things

44
00:02:23.001 --> 00:02:24.000
in our output.

45
00:02:24.000 --> 00:02:27.002
First, you'll notice that we had a newLine character

46
00:02:27.002 --> 00:02:30.002
that was appended to the end of our TextBlock.

47
00:02:30.002 --> 00:02:33.000
And then you also notice the indentation

48
00:02:33.000 --> 00:02:35.009
is pushing the block quite a bit to the right.

49
00:02:35.009 --> 00:02:39.002
That can all be controlled with how we specify

50
00:02:39.002 --> 00:02:42.004
our content in the TextBlock.

51
00:02:42.004 --> 00:02:46.005
So the TextBlock's indentation is determined

52
00:02:46.005 --> 00:02:50.008
by the left-most content in the TextBlock.

53
00:02:50.008 --> 00:02:53.008
Now this does include the closing delimiter,

54
00:02:53.008 --> 00:02:57.005
so here, you can see that we're going to indent

55
00:02:57.005 --> 00:03:00.006
the content within our TextBlock this much

56
00:03:00.006 --> 00:03:04.002
because our closing delimiter is a little bit

57
00:03:04.002 --> 00:03:06.008
to the left of our curly braces.

58
00:03:06.008 --> 00:03:09.009
Having our closing delimiter on a new line

59
00:03:09.009 --> 00:03:13.001
is also going to cause a newLine character

60
00:03:13.001 --> 00:03:15.002
to be added to our TextBlock.

61
00:03:15.002 --> 00:03:19.002
If we want to avoid that, we place our closing delimiter

62
00:03:19.002 --> 00:03:24.004
immediately after the last character in our TextBlock.

63
00:03:24.004 --> 00:03:26.008
Now, if we did something like this,

64
00:03:26.008 --> 00:03:28.009
we're going to get a lot of indentation

65
00:03:28.009 --> 00:03:30.004
on that TextBlock.

66
00:03:30.004 --> 00:03:33.002
But once we more the closing delimiter

67
00:03:33.002 --> 00:03:37.007
to immediately follow our closing curly brace,

68
00:03:37.007 --> 00:03:41.001
now the curly brace has become the left-most content

69
00:03:41.001 --> 00:03:44.003
and we're only going to get this amount of indentation

70
00:03:44.003 --> 00:03:46.003
on our TextBlock.

71
00:03:46.003 --> 00:03:50.000
All the space to the left of our curly braces

72
00:03:50.000 --> 00:03:51.009
will not be included.

73
00:03:51.009 --> 00:03:54.003
So let's just take a look at the unitTest

74
00:03:54.003 --> 00:03:56.006
and we can see the results of simply

75
00:03:56.006 --> 00:04:01.000
moving that closing delimiter.

76
00:04:01.000 --> 00:04:03.008
You'll notice we no longer have the indentation

77
00:04:03.008 --> 00:04:06.006
on the content and we no longer have

78
00:04:06.006 --> 00:04:09.002
that newLine character appended.

79
00:04:09.002 --> 00:04:12.007
Okay, let's head back to our class and then

80
00:04:12.007 --> 00:04:14.001
the other thing I want to point out

81
00:04:14.001 --> 00:04:18.006
is that when we work with TextBlocks,

82
00:04:18.006 --> 00:04:22.002
they have complete access to the String API,

83
00:04:22.002 --> 00:04:25.001
in fact, they're interchangeable with strings.

84
00:04:25.001 --> 00:04:27.004
So anywhere that we have a method that

85
00:04:27.004 --> 00:04:29.003
expects a String as an argument,

86
00:04:29.003 --> 00:04:31.007
we can supply a TextBlock, as well,

87
00:04:31.007 --> 00:04:34.008
and here, you can see, using auto completion,

88
00:04:34.008 --> 00:04:40.008
we have access to all those methods on String.

89
00:04:40.008 --> 00:04:44.006
Okay, so we talked a little bit about how the indentation

90
00:04:44.006 --> 00:04:46.006
works on a TextBlock.

91
00:04:46.006 --> 00:04:49.004
What if you wanted to apply that same logic

92
00:04:49.004 --> 00:04:51.004
to a regular string?

93
00:04:51.004 --> 00:04:55.002
Well, in order to do that, they added a new method

94
00:04:55.002 --> 00:05:00.001
to the String API and that method is stripIndent.

95
00:05:00.001 --> 00:05:02.009
And this will cause all the logic

96
00:05:02.009 --> 00:05:06.007
we just talked about for how you indent a TextBlock

97
00:05:06.007 --> 00:05:09.004
to be applied to a regular string.

98
00:05:09.004 --> 00:05:12.006
So you'll notice we have some white space

99
00:05:12.006 --> 00:05:14.008
to the left of our curly braces

100
00:05:14.008 --> 00:05:18.001
within this traditional multi-line string.

101
00:05:18.001 --> 00:05:20.007
And when we print out this content

102
00:05:20.007 --> 00:05:23.005
to the console, because we have invoked

103
00:05:23.005 --> 00:05:26.008
the stripIndent method, it's going to be removed.

104
00:05:26.008 --> 00:05:30.002
So let's go to our second unitTest

105
00:05:30.002 --> 00:05:32.007
and I'm going to execute that,

106
00:05:32.007 --> 00:05:35.008
and you'll notice before we invoked stripIndent,

107
00:05:35.008 --> 00:05:39.001
we had the indentation, and then after invoking it,

108
00:05:39.001 --> 00:05:43.008
it was removed as if this were a TextBlock.

109
00:05:43.008 --> 00:05:46.000
Moving on to our next feature,

110
00:05:46.000 --> 00:05:50.007
we're going to take a look at the translateEscapes method.

111
00:05:50.007 --> 00:05:54.000
So you'll notice within this multi-line string

112
00:05:54.000 --> 00:05:57.004
we have an escaped newLine character.

113
00:05:57.004 --> 00:06:00.008
So if we were to print out the string to the console,

114
00:06:00.008 --> 00:06:04.005
we'll see /n in the output

115
00:06:04.005 --> 00:06:06.007
as opposed to getting a new line.

116
00:06:06.007 --> 00:06:09.005
And you'll notice that we have it at several sections

117
00:06:09.005 --> 00:06:11.009
within our content.

118
00:06:11.009 --> 00:06:17.000
Now, using the translateEscapes method

119
00:06:17.000 --> 00:06:22.001
we can treat these escaped characters as literals

120
00:06:22.001 --> 00:06:25.008
and that will cause newLine to actually be inserted

121
00:06:25.008 --> 00:06:27.007
into our content.

122
00:06:27.007 --> 00:06:29.008
So let's go ahead and save that

123
00:06:29.008 --> 00:06:33.005
and then we're going to right-click on our unitTest

124
00:06:33.005 --> 00:06:35.004
and execute it.

125
00:06:35.004 --> 00:06:38.006
And here, you'll see that before we invoked

126
00:06:38.006 --> 00:06:42.009
the translateEscapes method, we got our \n,

127
00:06:42.009 --> 00:06:46.009
however, once we invoked the translateEscapes method

128
00:06:46.009 --> 00:06:50.007
the escaped newLine characters were treated as literals

129
00:06:50.007 --> 00:06:55.006
and now we have actual new lines in our content.

130
00:06:55.006 --> 00:06:58.002
Okay, and the final method we're going to take

131
00:06:58.002 --> 00:07:01.002
a look at is the formatted method.

132
00:07:01.002 --> 00:07:05.004
And the formatted method was added to the String API

133
00:07:05.004 --> 00:07:06.007
as a preview feature.

134
00:07:06.007 --> 00:07:09.002
Everything we've looked at is a preview feature.

135
00:07:09.002 --> 00:07:14.002
And it's just a more concise way of calling string.format.

136
00:07:14.002 --> 00:07:17.003
So you're familiar with string.format

137
00:07:17.003 --> 00:07:21.002
where we're able to put placeholders into a string

138
00:07:21.002 --> 00:07:25.002
and then substitute those placeholders with values.

139
00:07:25.002 --> 00:07:31.009
So we'll take our multi-line text string

140
00:07:31.009 --> 00:07:34.002
and we'll call the new formatted method

141
00:07:34.002 --> 00:07:37.005
and all we need to do is pass in the values

142
00:07:37.005 --> 00:07:40.007
we would like to substitute for the placeholders.

143
00:07:40.007 --> 00:07:43.002
So once we have that in place, we'll head over

144
00:07:43.002 --> 00:07:45.001
to our unitTest.

145
00:07:45.001 --> 00:07:49.000
I'm going to execute the test and you'll notice

146
00:07:49.000 --> 00:07:52.004
that our supplied values are substituted

147
00:07:52.004 --> 00:07:54.004
for the placeholders in the string.

148
00:07:54.004 --> 00:07:57.004
So that is a quick preview of some new language features

149
00:07:57.004 --> 00:07:59.007
in API methods that may be coming

150
00:07:59.007 --> 00:08:01.003
in a future JAVA version.

151
00:08:01.003 --> 00:08:03.006
Remember, these were all preview features.

152
00:08:03.006 --> 00:08:05.007
For developers that work frequently

153
00:08:05.007 --> 00:08:08.008
with multi-line strings, these will be very welcome

154
00:08:08.008 --> 00:08:11.000
additions to the language.

