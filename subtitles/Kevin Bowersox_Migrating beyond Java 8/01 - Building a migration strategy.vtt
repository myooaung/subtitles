WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Instructor] In this lesson, I'll share a simple plan

2
00:00:02.009 --> 00:00:05.008
you can follow when migrating complex systems

3
00:00:05.008 --> 00:00:08.000
to new versions of Java.

4
00:00:08.000 --> 00:00:11.005
These simple steps will help you navigate the migration

5
00:00:11.005 --> 00:00:14.003
and increase your chances of success.

6
00:00:14.003 --> 00:00:17.001
In general, this strategy aims to identify

7
00:00:17.001 --> 00:00:19.001
the components you are migrating,

8
00:00:19.001 --> 00:00:21.008
do some quick planning and preparation around them,

9
00:00:21.008 --> 00:00:24.006
and then execute their migration.

10
00:00:24.006 --> 00:00:28.003
Let's dive a little bit deeper into each one of these steps.

11
00:00:28.003 --> 00:00:30.000
When performing a migration,

12
00:00:30.000 --> 00:00:33.003
you should first assess each system component to determine

13
00:00:33.003 --> 00:00:36.009
what version of Java it's using, how important it is,

14
00:00:36.009 --> 00:00:39.004
and if it is still being used?

15
00:00:39.004 --> 00:00:40.008
In complex systems,

16
00:00:40.008 --> 00:00:44.003
you may discover that some components are no longer used

17
00:00:44.003 --> 00:00:46.008
and do not require migration.

18
00:00:46.008 --> 00:00:50.001
Others may be using various versions of Java.

19
00:00:50.001 --> 00:00:51.008
Basically, we're building a list

20
00:00:51.008 --> 00:00:53.008
of what needs to be migrated.

21
00:00:53.008 --> 00:00:58.002
It can also be helpful to note where the application runs.

22
00:00:58.002 --> 00:00:59.008
When assessing each component,

23
00:00:59.008 --> 00:01:02.009
you should note any integrations with other systems

24
00:01:02.009 --> 00:01:06.004
and the technologies they use to interface.

25
00:01:06.004 --> 00:01:09.002
You should also take note of any internal

26
00:01:09.002 --> 00:01:11.003
or third party libraries being used

27
00:01:11.003 --> 00:01:13.005
for each system component.

28
00:01:13.005 --> 00:01:16.004
This information can help you determine the order

29
00:01:16.004 --> 00:01:21.000
of your migration and the extent of testing that's required.

30
00:01:21.000 --> 00:01:24.005
Next, you should build a plan that outlines the schedule

31
00:01:24.005 --> 00:01:27.001
and the details of the migration work.

32
00:01:27.001 --> 00:01:28.009
It doesn't need to be complex,

33
00:01:28.009 --> 00:01:31.009
but a little organization can go a long way.

34
00:01:31.009 --> 00:01:35.002
First, identify what version of Java you will migrate to

35
00:01:35.002 --> 00:01:37.005
and who will provide your JDK.

36
00:01:37.005 --> 00:01:41.003
Most enterprises are going to target an LTS release of Java,

37
00:01:41.003 --> 00:01:44.002
which is currently Java 11.

38
00:01:44.002 --> 00:01:46.005
If there are multiple system components,

39
00:01:46.005 --> 00:01:50.004
it is important to schedule the order they must be migrated.

40
00:01:50.004 --> 00:01:53.006
The order in which you migrate can be used to reduce

41
00:01:53.006 --> 00:01:56.003
the risk of the overall migration.

42
00:01:56.003 --> 00:01:59.002
By migrating smaller and less significant parts

43
00:01:59.002 --> 00:02:02.002
of the system first, you can approach the migration

44
00:02:02.002 --> 00:02:06.002
of critical features with more confidence in experience.

45
00:02:06.002 --> 00:02:08.004
If you're working with a complex system,

46
00:02:08.004 --> 00:02:11.004
the assessment and plan will be very important.

47
00:02:11.004 --> 00:02:13.002
However, for smaller systems,

48
00:02:13.002 --> 00:02:15.008
these steps may not be as critical.

49
00:02:15.008 --> 00:02:18.005
After determining your target Java version,

50
00:02:18.005 --> 00:02:22.001
the JDK must be installed on environments where you build

51
00:02:22.001 --> 00:02:24.001
and run your application.

52
00:02:24.001 --> 00:02:26.002
In this step, you may need to upgrade

53
00:02:26.002 --> 00:02:28.008
your development tools to those compatible

54
00:02:28.008 --> 00:02:31.002
with your selected JDK.

55
00:02:31.002 --> 00:02:34.001
This will require installations and configuration

56
00:02:34.001 --> 00:02:36.002
on developer workstations,

57
00:02:36.002 --> 00:02:39.008
build servers and your runtime environments.

58
00:02:39.008 --> 00:02:42.007
Once your environments and tools are set up,

59
00:02:42.007 --> 00:02:45.002
you can begin converting the application

60
00:02:45.002 --> 00:02:47.003
to your target Java version.

61
00:02:47.003 --> 00:02:50.004
In some cases, you may find it as only necessary

62
00:02:50.004 --> 00:02:53.000
to compile and run the application

63
00:02:53.000 --> 00:02:55.009
because there are no migration issues.

64
00:02:55.009 --> 00:02:59.002
If you're not that lucky, you will need to do some analysis

65
00:02:59.002 --> 00:03:00.009
with the help of some scanning tools

66
00:03:00.009 --> 00:03:04.001
to identify the issues that need resolved.

67
00:03:04.001 --> 00:03:07.005
These issues may exist not only in your source code,

68
00:03:07.005 --> 00:03:10.003
but in the source code of the third party libraries

69
00:03:10.003 --> 00:03:12.007
used by your application.

70
00:03:12.007 --> 00:03:14.006
After resolving these issues,

71
00:03:14.006 --> 00:03:17.001
you'll want to do an extensive amount of testing

72
00:03:17.001 --> 00:03:21.003
on your application, hopefully through automated testing.

73
00:03:21.003 --> 00:03:24.008
If your application integrates with other systems,

74
00:03:24.008 --> 00:03:27.005
it is important to test those interfaces

75
00:03:27.005 --> 00:03:31.006
to ensure they remain intact after the migration.

76
00:03:31.006 --> 00:03:34.004
After the application has been migrated,

77
00:03:34.004 --> 00:03:37.005
you'll need to release the changes into production

78
00:03:37.005 --> 00:03:39.006
where you will want to carefully monitor it

79
00:03:39.006 --> 00:03:42.003
for a period of time paying close attention

80
00:03:42.003 --> 00:03:45.008
to resource usage and the system logs.

81
00:03:45.008 --> 00:03:48.002
Once you're satisfied with the migration,

82
00:03:48.002 --> 00:03:51.004
you can then begin to remove the old Java version

83
00:03:51.004 --> 00:03:54.000
and toll set from your environments.

84
00:03:54.000 --> 00:03:56.004
If you adhere to this lightweight plan,

85
00:03:56.004 --> 00:03:58.006
while performing a Java migration,

86
00:03:58.006 --> 00:04:02.003
you'll navigate some of the most common pitfalls encountered

87
00:04:02.003 --> 00:04:04.000
during Java migrations.

