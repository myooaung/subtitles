WEBVTT
1
00:00:00.005 --> 00:00:03.004
- [Instructor] Java 11 introduced many new features

2
00:00:03.004 --> 00:00:04.003
to the language,

3
00:00:04.003 --> 00:00:07.009
making it a pretty exciting release for Java developers.

4
00:00:07.009 --> 00:00:10.002
Let's take a look at some of the new methods

5
00:00:10.002 --> 00:00:13.004
and classes this version introduced.

6
00:00:13.004 --> 00:00:16.004
We'll start by exploring some new methods that were added

7
00:00:16.004 --> 00:00:18.003
to the string class.

8
00:00:18.003 --> 00:00:20.008
Here you can see in our isBlank method

9
00:00:20.008 --> 00:00:22.004
that we are trimming a string,

10
00:00:22.004 --> 00:00:25.007
and then checking to see if it's empty.

11
00:00:25.007 --> 00:00:29.008
This is a common validation used to check for empty strings

12
00:00:29.008 --> 00:00:33.001
and for strings that are entirely white space.

13
00:00:33.001 --> 00:00:36.007
It got much easier to perform this check in Java 11,

14
00:00:36.007 --> 00:00:40.000
because the isBlank method was added

15
00:00:40.000 --> 00:00:42.008
to the string interface.

16
00:00:42.008 --> 00:00:44.008
Moving on to the strip method.

17
00:00:44.008 --> 00:00:49.000
You'll notice that its implementation calls the trim method

18
00:00:49.000 --> 00:00:52.000
and it may make you wonder, "What's wrong with trim?"

19
00:00:52.000 --> 00:00:55.003
Well, we can find that answer in one of our unit tests.

20
00:00:55.003 --> 00:00:58.007
Here, you'll notice that I add Unicode white space

21
00:00:58.007 --> 00:01:02.004
to the beginning and end of this string.

22
00:01:02.004 --> 00:01:05.003
Now, if we were to execute this test,

23
00:01:05.003 --> 00:01:08.000
you'll notice that it fails

24
00:01:08.000 --> 00:01:13.002
and that's because the trim method does not handle Unicode.

25
00:01:13.002 --> 00:01:17.003
And that's the benefit of using the new strip method.

26
00:01:17.003 --> 00:01:20.002
The new strip method is Unicode-aware,

27
00:01:20.002 --> 00:01:23.003
and it will cause Unicode white space to be removed

28
00:01:23.003 --> 00:01:26.001
from the beginning and end of a string.

29
00:01:26.001 --> 00:01:27.008
Now, there's two other variants.

30
00:01:27.008 --> 00:01:29.009
The first is stripLeading,

31
00:01:29.009 --> 00:01:31.009
and this is going to remove the white space

32
00:01:31.009 --> 00:01:33.008
from the beginning of a string.

33
00:01:33.008 --> 00:01:36.006
And then, there's also stripTrailing

34
00:01:36.006 --> 00:01:40.003
and this will remove white space from the end of a string.

35
00:01:40.003 --> 00:01:41.003
All right, moving on.

36
00:01:41.003 --> 00:01:44.005
We'll take a look at two more methods on the string class.

37
00:01:44.005 --> 00:01:47.001
The first is the repeat method.

38
00:01:47.001 --> 00:01:50.007
You'll notice we pass in a string and then an integer

39
00:01:50.007 --> 00:01:52.006
to our repeat method here.

40
00:01:52.006 --> 00:01:56.003
And then for the value of the integer,

41
00:01:56.003 --> 00:01:59.002
we will perform a number of iterations.

42
00:01:59.002 --> 00:02:01.009
And in each iteration within this for loop,

43
00:02:01.009 --> 00:02:04.003
we're going to concatenate the string

44
00:02:04.003 --> 00:02:06.008
and append it to itself.

45
00:02:06.008 --> 00:02:10.007
So, this is a one liner now in Java 11.

46
00:02:10.007 --> 00:02:15.002
All we need to do is use the new repeat method

47
00:02:15.002 --> 00:02:16.007
on the string class.

48
00:02:16.007 --> 00:02:19.002
And the repeat method accepts an argument

49
00:02:19.002 --> 00:02:20.006
that is of type integer,

50
00:02:20.006 --> 00:02:22.009
that specifies the number of times

51
00:02:22.009 --> 00:02:26.006
we would like to append the string to itself.

52
00:02:26.006 --> 00:02:28.005
And then we get a new string.

53
00:02:28.005 --> 00:02:29.007
All right, and then finally,

54
00:02:29.007 --> 00:02:31.006
we're going to take a look at lines.

55
00:02:31.006 --> 00:02:34.005
So, here you can see that I'm splitting a string

56
00:02:34.005 --> 00:02:37.005
for each new line character found within it.

57
00:02:37.005 --> 00:02:40.004
So essentially, we're going to get an array

58
00:02:40.004 --> 00:02:43.002
that contains each line in our string,

59
00:02:43.002 --> 00:02:48.005
and then we're streaming out those lines in the array.

60
00:02:48.005 --> 00:02:51.008
Once again, this is a one liner in Java 11.

61
00:02:51.008 --> 00:02:56.005
All we need to do is call the lines method on the string.

62
00:02:56.005 --> 00:02:58.004
All right, so, with those in place,

63
00:02:58.004 --> 00:03:03.003
let's go execute our test and you can see that we passed.

64
00:03:03.003 --> 00:03:05.008
I'm going to go ahead, I'll close these files.

65
00:03:05.008 --> 00:03:09.004
And then we can take a look at some more features

66
00:03:09.004 --> 00:03:11.001
within Java 11

67
00:03:11.001 --> 00:03:15.004
and these features are going to be on the files class.

68
00:03:15.004 --> 00:03:20.002
So, I'll open both the class and its test.

69
00:03:20.002 --> 00:03:22.006
And then we can get started.

70
00:03:22.006 --> 00:03:27.000
Java 11 made it much easier to work with text files.

71
00:03:27.000 --> 00:03:31.008
You've probably seen this code that writes texts to a file

72
00:03:31.008 --> 00:03:35.002
and read text from a file, a hundred times.

73
00:03:35.002 --> 00:03:36.008
It's pretty clumsy.

74
00:03:36.008 --> 00:03:39.001
We're working with readers and writers

75
00:03:39.001 --> 00:03:41.008
and we got to make sure we close things out.

76
00:03:41.008 --> 00:03:46.000
Well, in Java 11, these became one liners.

77
00:03:46.000 --> 00:03:49.004
We're going to go ahead and remove this implementation.

78
00:03:49.004 --> 00:03:53.008
And then, we're going to use the writeString method

79
00:03:53.008 --> 00:04:00.007
on the files object, in order to write a text file.

80
00:04:00.007 --> 00:04:03.005
Now, if we take a look at this method,

81
00:04:03.005 --> 00:04:06.002
you'll see that it wants us to provide a path

82
00:04:06.002 --> 00:04:08.001
as the first argument.

83
00:04:08.001 --> 00:04:12.002
So, we can use the path's object in its get method.

84
00:04:12.002 --> 00:04:14.006
And I'm just going to create a new file

85
00:04:14.006 --> 00:04:17.005
named, example.txt,

86
00:04:17.005 --> 00:04:19.009
and then we'll move on to the second argument.

87
00:04:19.009 --> 00:04:23.008
And this is the text that we want to place in the file.

88
00:04:23.008 --> 00:04:25.008
And we can see that's being passed

89
00:04:25.008 --> 00:04:29.007
into our writeString method and we'll just pass it along.

90
00:04:29.007 --> 00:04:33.002
Finally, the last argument that we need to provide

91
00:04:33.002 --> 00:04:37.007
is an option for how we want to write the file.

92
00:04:37.007 --> 00:04:41.007
So, I'm going to use the StandardOpenOption

93
00:04:41.007 --> 00:04:44.003
and its create option.

94
00:04:44.003 --> 00:04:48.004
And this basically says, to recreate the file every time,

95
00:04:48.004 --> 00:04:49.008
even if it doesn't exist.

96
00:04:49.008 --> 00:04:53.000
So, that's all it takes to write a file

97
00:04:53.000 --> 00:04:55.003
to the file system with some text in it.

98
00:04:55.003 --> 00:04:58.004
Now, let's take a look at reading that file.

99
00:04:58.004 --> 00:04:59.005
So, we're going to go ahead,

100
00:04:59.005 --> 00:05:02.006
we'll remove all the code that just read the file

101
00:05:02.006 --> 00:05:05.001
and you'll see, it's pretty easy.

102
00:05:05.001 --> 00:05:07.007
We just call the readString method.

103
00:05:07.007 --> 00:05:11.009
And the readString method asks us to provide a path

104
00:05:11.009 --> 00:05:14.008
to a file we'd like to read, and that's it.

105
00:05:14.008 --> 00:05:16.009
We were just able to read the file

106
00:05:16.009 --> 00:05:18.007
that was passed into the method.

107
00:05:18.007 --> 00:05:22.007
One line and we got rid of all the code

108
00:05:22.007 --> 00:05:25.003
that was required previously.

109
00:05:25.003 --> 00:05:26.007
All right, let's run our test

110
00:05:26.007 --> 00:05:29.001
to make sure these are working.

111
00:05:29.001 --> 00:05:32.003
We see everything's in place and we can move on

112
00:05:32.003 --> 00:05:36.009
to take a look at our next Java 11 feature.

113
00:05:36.009 --> 00:05:39.001
The feature we're going to look at next

114
00:05:39.001 --> 00:05:44.005
has to deal with the Lambda function and how we can use it.

115
00:05:44.005 --> 00:05:49.006
Java 11 now allows us to use the var keyword.

116
00:05:49.006 --> 00:05:52.007
And typically, this is used for type inference,

117
00:05:52.007 --> 00:05:54.004
but we can now apply it

118
00:05:54.004 --> 00:05:57.002
to the arguments of a Lambda function.

119
00:05:57.002 --> 00:05:58.003
Now, when we do this,

120
00:05:58.003 --> 00:06:01.004
we have to provide it on both arguments

121
00:06:01.004 --> 00:06:04.008
if there are multiple arguments being passed to the Lambda.

122
00:06:04.008 --> 00:06:07.009
And you may wonder why you'd want to do this.

123
00:06:07.009 --> 00:06:10.005
Well, we have to have that type

124
00:06:10.005 --> 00:06:13.003
if we would like to add an annotation.

125
00:06:13.003 --> 00:06:16.007
So, let's imagine we want to add the NonNull annotation.

126
00:06:16.007 --> 00:06:20.004
So, we can shorten up this syntax by using var

127
00:06:20.004 --> 00:06:22.005
instead of the actual type.

128
00:06:22.005 --> 00:06:26.003
And we have to have that type when we use an annotation.

129
00:06:26.003 --> 00:06:28.009
So, it's just a more concise way

130
00:06:28.009 --> 00:06:32.004
of being able to use an annotation

131
00:06:32.004 --> 00:06:36.001
on an argument that is passed to a Lambda.

132
00:06:36.001 --> 00:06:38.008
All right, so we have that in place. Let's go ahead.

133
00:06:38.008 --> 00:06:43.005
We'll kick off our unit test and we can see our test pass.

134
00:06:43.005 --> 00:06:44.005
And now we're going to move on

135
00:06:44.005 --> 00:06:46.009
to take a look at our final feature.

136
00:06:46.009 --> 00:06:48.007
And this one's pretty exciting.

137
00:06:48.007 --> 00:06:53.004
It adds a new HttpClient into Java 11.

138
00:06:53.004 --> 00:06:55.009
And it's one of my favorite features that were added

139
00:06:55.009 --> 00:06:58.001
in this version of the language.

140
00:06:58.001 --> 00:07:01.002
So, if we take a look at the existing implementation,

141
00:07:01.002 --> 00:07:03.001
you'll see there's quite a bit of code,

142
00:07:03.001 --> 00:07:06.005
simply to make an HTTP call to LinkedIn Learning,

143
00:07:06.005 --> 00:07:11.002
and then to be able to process the response that's returned.

144
00:07:11.002 --> 00:07:13.005
Once again, you see we're using BufferedReaders,

145
00:07:13.005 --> 00:07:16.006
InputStreamReaders; it's a lot.

146
00:07:16.006 --> 00:07:21.003
So, what was added to Java 11 was a new HttpClient

147
00:07:21.003 --> 00:07:24.000
that's very similar to Spring's RestTemplate,

148
00:07:24.000 --> 00:07:25.007
if you've ever worked with it.

149
00:07:25.007 --> 00:07:28.006
To use it, we just create a new client

150
00:07:28.006 --> 00:07:33.002
and we can do that by using the HttpClient object.

151
00:07:33.002 --> 00:07:36.008
And you'll find this new HttpClient method, on it.

152
00:07:36.008 --> 00:07:39.002
So, that creates our client.

153
00:07:39.002 --> 00:07:40.007
And then from there,

154
00:07:40.007 --> 00:07:45.003
we're going to go ahead and start building out a request.

155
00:07:45.003 --> 00:07:47.005
So, I'm going to create a request

156
00:07:47.005 --> 00:07:51.000
and there's also a builder that we can use for this.

157
00:07:51.000 --> 00:07:55.003
It's found on the HttpRequest object

158
00:07:55.003 --> 00:07:57.009
and I'ma use the builder.

159
00:07:57.009 --> 00:08:00.007
And from here, we can specify

160
00:08:00.007 --> 00:08:04.006
that we would like to perform a GET request,

161
00:08:04.006 --> 00:08:07.008
and then we have to specify a URI.

162
00:08:07.008 --> 00:08:12.004
Now, you'll notice we have the LinkedIn Learning URL above

163
00:08:12.004 --> 00:08:15.003
so we can use that to get a URI.

164
00:08:15.003 --> 00:08:18.005
And then we simply complete our builder pattern

165
00:08:18.005 --> 00:08:20.005
by calling the build method.

166
00:08:20.005 --> 00:08:23.008
Now, you'll notice this is going to throw an exception.

167
00:08:23.008 --> 00:08:27.009
So, we want to make sure that we pass that up the call stack.

168
00:08:27.009 --> 00:08:30.006
Okay, so, now that we have our client

169
00:08:30.006 --> 00:08:32.004
and we have our request,

170
00:08:32.004 --> 00:08:35.001
we're going to go ahead and make the call

171
00:08:35.001 --> 00:08:37.006
and process the response that's returned.

172
00:08:37.006 --> 00:08:39.007
So, I'm going to declare a variable

173
00:08:39.007 --> 00:08:41.006
and I'll just call it response.

174
00:08:41.006 --> 00:08:43.005
And then we're going to take our client

175
00:08:43.005 --> 00:08:47.001
and use the send method to send our request.

176
00:08:47.001 --> 00:08:51.003
And then we have to supply a BodyHandler

177
00:08:51.003 --> 00:08:55.002
and the BodyHandler instructs the client

178
00:08:55.002 --> 00:08:58.008
for how to process the response coming in.

179
00:08:58.008 --> 00:09:04.004
So, to do that, we're going to use the HttpResponse object

180
00:09:04.004 --> 00:09:07.009
and you'll see the BodyHandler's object on it.

181
00:09:07.009 --> 00:09:10.007
And there's a very simple one, ofString,

182
00:09:10.007 --> 00:09:14.008
and that's simply going to take the HttpResponse

183
00:09:14.008 --> 00:09:17.005
and send it back as a string.

184
00:09:17.005 --> 00:09:20.006
We can go ahead and print out that string

185
00:09:20.006 --> 00:09:23.005
if we'd like to see it in the console.

186
00:09:23.005 --> 00:09:28.004
And then, I'm going to go ahead, I'll remove the implementation

187
00:09:28.004 --> 00:09:32.002
of our old method, since it's gotten a lot more concise

188
00:09:32.002 --> 00:09:35.005
and then we can simply return the statusCode

189
00:09:35.005 --> 00:09:40.005
from the response, in order to complete our implementation.

190
00:09:40.005 --> 00:09:42.009
I'm going to clean up the imports at this point,

191
00:09:42.009 --> 00:09:45.006
then we'll head over to our unit test.

192
00:09:45.006 --> 00:09:50.009
And we will have to pass those exceptions up the call stack.

193
00:09:50.009 --> 00:09:53.009
And let's go ahead, execute our test.

194
00:09:53.009 --> 00:09:57.009
And there we see our HTTP call to LinkedIn Learning

195
00:09:57.009 --> 00:09:59.001
was successful.

196
00:09:59.001 --> 00:10:02.004
So, that's a look at the HttpClient in Java 11.

197
00:10:02.004 --> 00:10:03.009
It's very useful.

198
00:10:03.009 --> 00:10:06.004
And those are just some of the features that you'll get

199
00:10:06.004 --> 00:10:08.007
if you make the jump to Java 11.

200
00:10:08.007 --> 00:10:11.003
You're going to find other nice additions in this version,

201
00:10:11.003 --> 00:10:13.005
such as the Java Flight Recorder

202
00:10:13.005 --> 00:10:17.003
and the ability to compile and run a class in one line,

203
00:10:17.003 --> 00:10:20.000
simply using the Java command.

