WEBVTT
1
00:00:00.006 --> 00:00:02.006
- [Instructor] When migrating to Java 11,

2
00:00:02.006 --> 00:00:05.002
your application may experience issues

3
00:00:05.002 --> 00:00:08.002
if it references JDK internal APIs

4
00:00:08.002 --> 00:00:11.001
that were encapsulated in Java nine.

5
00:00:11.001 --> 00:00:14.001
To help identify application components

6
00:00:14.001 --> 00:00:18.007
or third party libraries that rely upon JDK internal APIs,

7
00:00:18.007 --> 00:00:22.009
we can use the Java dependency analysis tool

8
00:00:22.009 --> 00:00:25.000
or JDeps for short.

9
00:00:25.000 --> 00:00:28.002
The tool was introduced in Java nine,

10
00:00:28.002 --> 00:00:31.007
and it allows us to scan byte code

11
00:00:31.007 --> 00:00:36.000
to identify static dependencies between classes.

12
00:00:36.000 --> 00:00:38.002
To get started with JDeps,

13
00:00:38.002 --> 00:00:42.000
We're first going to modify our pom.xml file

14
00:00:42.000 --> 00:00:44.008
in order to create a build name.

15
00:00:44.008 --> 00:00:48.005
So I'm going to navigate down to the build section

16
00:00:48.005 --> 00:00:50.004
of our POM and here,

17
00:00:50.004 --> 00:00:53.009
I'm just going to specify the final name

18
00:00:53.009 --> 00:01:00.005
for the artifact we'd like to create as hplus-sport-api.

19
00:01:00.005 --> 00:01:02.004
I'll go ahead and save the POM.

20
00:01:02.004 --> 00:01:06.005
And then we're going to navigate to our run configurations,

21
00:01:06.005 --> 00:01:09.007
and we will build the application

22
00:01:09.007 --> 00:01:13.008
using our Java eight profile.

23
00:01:13.008 --> 00:01:17.007
There we'll see that the application begins to package.

24
00:01:17.007 --> 00:01:20.004
And once the application has packaged,

25
00:01:20.004 --> 00:01:23.009
we can go back to our project.

26
00:01:23.009 --> 00:01:25.008
And within the project directory,

27
00:01:25.008 --> 00:01:27.009
you're going to see the target folder.

28
00:01:27.009 --> 00:01:31.006
Let's navigate into the target folder with the command line.

29
00:01:31.006 --> 00:01:33.005
And then inside of this folder,

30
00:01:33.005 --> 00:01:38.002
you'll notice the hplus-sport-jar file.

31
00:01:38.002 --> 00:01:41.000
This is our packaged application,

32
00:01:41.000 --> 00:01:43.007
and we can use JDeps to scan it.

33
00:01:43.007 --> 00:01:48.007
Let's go ahead and do that.

34
00:01:48.007 --> 00:01:52.006
The initial scan with JDeps was not very helpful.

35
00:01:52.006 --> 00:01:54.006
We get a list of all the classes

36
00:01:54.006 --> 00:01:58.001
that are required for the application.

37
00:01:58.001 --> 00:02:00.007
Now we are only interested in those

38
00:02:00.007 --> 00:02:04.005
that use the JDK internal APIs.

39
00:02:04.005 --> 00:02:07.009
So let's pair down these commands on.

40
00:02:07.009 --> 00:02:10.006
We can use JDeps and then specify

41
00:02:10.006 --> 00:02:12.009
the JDK internals option.

42
00:02:12.009 --> 00:02:16.007
And then once again, we'll point to our jar file.

43
00:02:16.007 --> 00:02:21.008
Now JDeps is going to identify any source code

44
00:02:21.008 --> 00:02:28.000
within our application that is using a JDK internal API.

45
00:02:28.000 --> 00:02:30.008
Now you're going to notice that this scan output

46
00:02:30.008 --> 00:02:34.000
is limited to the source code within our application.

47
00:02:34.000 --> 00:02:36.001
It doesn't take into consideration

48
00:02:36.001 --> 00:02:38.003
any third party libraries.

49
00:02:38.003 --> 00:02:40.008
So we need to do some additional work

50
00:02:40.008 --> 00:02:43.006
in order to scan those.

51
00:02:43.006 --> 00:02:47.007
If we navigate back to our pom.xml file,

52
00:02:47.007 --> 00:02:49.009
you'll notice that we're using spring-boot

53
00:02:49.009 --> 00:02:51.004
for this application.

54
00:02:51.004 --> 00:02:54.003
That means we're going to get a fat jar that packages

55
00:02:54.003 --> 00:02:57.002
all of the dependencies into it.

56
00:02:57.002 --> 00:03:02.005
So we need to include an additional maven plugin

57
00:03:02.005 --> 00:03:05.008
in order to get those dependencies out of the fat jar

58
00:03:05.008 --> 00:03:07.006
so they can be scanned.

59
00:03:07.006 --> 00:03:08.007
So once again,

60
00:03:08.007 --> 00:03:12.004
let's navigate to the build section of our POM.

61
00:03:12.004 --> 00:03:17.003
And here we're going to add another plugin.

62
00:03:17.003 --> 00:03:20.009
And we'll specify the coordinates of the plugin.

63
00:03:20.009 --> 00:03:27.009
The groupId is going to be org.apache.maven.plugins.

64
00:03:27.009 --> 00:03:32.006
And then for the artifactId,

65
00:03:32.006 --> 00:03:38.006
we're going to specify the maven-dependency-plugin.

66
00:03:38.006 --> 00:03:40.003
And then for the version of the plugin

67
00:03:40.003 --> 00:03:44.007
that we're going to use, it's going to be 3.1.2.

68
00:03:44.007 --> 00:03:47.003
Okay, and now we need to specify

69
00:03:47.003 --> 00:03:49.009
when this plugin will execute.

70
00:03:49.009 --> 00:03:53.007
And we do that by using the executions tag.

71
00:03:53.007 --> 00:03:56.004
And within the executions tag,

72
00:03:56.004 --> 00:03:59.005
we're going to add an execution.

73
00:03:59.005 --> 00:04:03.004
And here the execution will need an ID.

74
00:04:03.004 --> 00:04:09.003
I'm just going to name that copy-dependencies.

75
00:04:09.003 --> 00:04:12.004
The next thing we'll do is specify the phase

76
00:04:12.004 --> 00:04:14.007
when we will execute this goal.

77
00:04:14.007 --> 00:04:19.003
And we want to do it during the package phase.

78
00:04:19.003 --> 00:04:20.004
And then from there,

79
00:04:20.004 --> 00:04:22.007
we're going to specify the goal

80
00:04:22.007 --> 00:04:24.008
that we would like to have executed.

81
00:04:24.008 --> 00:04:27.002
And we do that within the goal tag

82
00:04:27.002 --> 00:04:30.000
that is within the goals tag.

83
00:04:30.000 --> 00:04:32.000
So just the plural form of it.

84
00:04:32.000 --> 00:04:34.003
That's the parent of our goal tag.

85
00:04:34.003 --> 00:04:37.005
And then we specify the goal that we would like to use.

86
00:04:37.005 --> 00:04:41.003
It's going to be the copy-dependencies goal.

87
00:04:41.003 --> 00:04:44.008
And this will cause all of the dependencies packaged

88
00:04:44.008 --> 00:04:49.000
within the fat jar to be placed on the file system.

89
00:04:49.000 --> 00:04:50.009
Okay once that's in place,

90
00:04:50.009 --> 00:04:58.004
we can go ahead and run our Java eight build again.

91
00:04:58.004 --> 00:05:01.007
Okay, there we can see the build was successful.

92
00:05:01.007 --> 00:05:04.005
Let's head back over to the terminal.

93
00:05:04.005 --> 00:05:08.007
And now if we look within our target directory,

94
00:05:08.007 --> 00:05:11.009
you can see the dependency directory.

95
00:05:11.009 --> 00:05:14.002
And inside of that dependency directory

96
00:05:14.002 --> 00:05:17.005
is going to be all of the jar files related

97
00:05:17.005 --> 00:05:20.003
to the dependencies in the application.

98
00:05:20.003 --> 00:05:23.008
I'm then just going to step back a directory.

99
00:05:23.008 --> 00:05:25.000
And from here,

100
00:05:25.000 --> 00:05:30.009
we can now use JDeps to scan not only our source code,

101
00:05:30.009 --> 00:05:34.008
but the dependencies of our application.

102
00:05:34.008 --> 00:05:37.003
So we'll issue the jdeps command.

103
00:05:37.003 --> 00:05:40.008
And now we need to specify the class path.

104
00:05:40.008 --> 00:05:44.007
And we're going to point to the dependency directory

105
00:05:44.007 --> 00:05:47.007
and have it scan all of the files within it.

106
00:05:47.007 --> 00:05:54.006
Then we're going to use the JDK internals flag again.

107
00:05:54.006 --> 00:05:58.002
And then from here, we want to tell it to be recursive.

108
00:05:58.002 --> 00:06:05.000
And then finally, we point to our jar file.

109
00:06:05.000 --> 00:06:07.009
Okay so this time you'll notice

110
00:06:07.009 --> 00:06:11.004
that the scan took much longer,

111
00:06:11.004 --> 00:06:16.005
and it was able to identify some additional access

112
00:06:16.005 --> 00:06:21.000
to JDK internal APIs within not only our source code,

113
00:06:21.000 --> 00:06:22.008
but our dependencies.

114
00:06:22.008 --> 00:06:26.003
So these issues that JDeps has identified

115
00:06:26.003 --> 00:06:29.002
within both our source and third party libraries

116
00:06:29.002 --> 00:06:32.002
are going to cause our application to break

117
00:06:32.002 --> 00:06:34.008
when we migrate to Java 11.

118
00:06:34.008 --> 00:06:36.005
So we're going to have to do some work

119
00:06:36.005 --> 00:06:39.002
to resolve these issues in order

120
00:06:39.002 --> 00:06:41.000
to make the migration successful.

