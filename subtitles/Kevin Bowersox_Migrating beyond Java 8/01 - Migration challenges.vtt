WEBVTT
1
00:00:00.007 --> 00:00:03.003
- [Presenter] When migrating to newer versions of Java,

2
00:00:03.003 --> 00:00:05.009
most of the migration work will be focused

3
00:00:05.009 --> 00:00:08.002
on fixing breaking changes.

4
00:00:08.002 --> 00:00:11.004
Breaking changes appear when languages deviate

5
00:00:11.004 --> 00:00:15.005
from contracts that were established in older versions.

6
00:00:15.005 --> 00:00:18.009
Application code that once worked on a previous version

7
00:00:18.009 --> 00:00:22.002
of the language will not function when the application

8
00:00:22.002 --> 00:00:25.000
is executed on a newer version of the language

9
00:00:25.000 --> 00:00:27.003
with a different API.

10
00:00:27.003 --> 00:00:29.004
Throughout its history, there were few,

11
00:00:29.004 --> 00:00:31.006
if any breaking changes introduced

12
00:00:31.006 --> 00:00:34.005
between one major Java version to the next

13
00:00:34.005 --> 00:00:36.002
and the language was known

14
00:00:36.002 --> 00:00:39.004
for its strong backwards compatibility.

15
00:00:39.004 --> 00:00:43.005
However, there were a lot of deprecated methods.

16
00:00:43.005 --> 00:00:45.003
Recent versions of Java

17
00:00:45.003 --> 00:00:48.002
have started removing deprecated methods.

18
00:00:48.002 --> 00:00:51.000
Restricting access to certain packages

19
00:00:51.000 --> 00:00:52.009
and removing some modules

20
00:00:52.009 --> 00:00:55.008
which introduces some breaking changes.

21
00:00:55.008 --> 00:00:59.002
This decision will cause some applications written

22
00:00:59.002 --> 00:01:02.004
in earlier versions of Java to no longer run

23
00:01:02.004 --> 00:01:05.004
or compile on newer Java versions.

24
00:01:05.004 --> 00:01:08.000
To help developers adjust to the removal

25
00:01:08.000 --> 00:01:09.007
of deprecated methods,

26
00:01:09.007 --> 00:01:11.009
Java 9 introduced some changes

27
00:01:11.009 --> 00:01:14.005
to the deprecated annotation.

28
00:01:14.005 --> 00:01:17.004
The deprecated annotation now contains

29
00:01:17.004 --> 00:01:19.009
the forRemoval element,

30
00:01:19.009 --> 00:01:21.006
which signals to developers

31
00:01:21.006 --> 00:01:25.000
that our particular deprecated method is intended

32
00:01:25.000 --> 00:01:30.000
to be removed from the API in an upcoming version of Java.

33
00:01:30.000 --> 00:01:33.004
It is a strong warning to migrate away from the method

34
00:01:33.004 --> 00:01:37.005
or potentially face a breaking change in the future.

35
00:01:37.005 --> 00:01:39.006
So you will want to pay close attention

36
00:01:39.006 --> 00:01:43.001
to the deprecated annotation as you write your code

37
00:01:43.001 --> 00:01:46.003
to avoid any future migration issues.

38
00:01:46.003 --> 00:01:48.006
The majority of code migration issues

39
00:01:48.006 --> 00:01:52.004
that you will encounter fall into one of three categories.

40
00:01:52.004 --> 00:01:54.005
The first type of issue is a change

41
00:01:54.005 --> 00:01:57.004
to the Java API that breaks your code.

42
00:01:57.004 --> 00:02:00.003
This is caused when a class or method is removed

43
00:02:00.003 --> 00:02:03.004
or modified, breaking code that once worked

44
00:02:03.004 --> 00:02:05.009
with an earlier Java version.

45
00:02:05.009 --> 00:02:09.000
The second category relates to entire modules

46
00:02:09.000 --> 00:02:11.007
that have been removed from the language.

47
00:02:11.007 --> 00:02:14.004
Removing an entire set of related classes

48
00:02:14.004 --> 00:02:17.002
from the language is bound to cause issues

49
00:02:17.002 --> 00:02:20.007
for applications that depended on those modules.

50
00:02:20.007 --> 00:02:23.003
Often these modules will need to be sourced

51
00:02:23.003 --> 00:02:26.006
from somewhere other than the Java platform.

52
00:02:26.006 --> 00:02:29.007
The final type of issue that you will encounter

53
00:02:29.007 --> 00:02:32.000
is related to third party libraries

54
00:02:32.000 --> 00:02:34.008
that are broken because of API changes

55
00:02:34.008 --> 00:02:37.006
or modules that have been removed.

56
00:02:37.006 --> 00:02:39.006
When using a third party library,

57
00:02:39.006 --> 00:02:42.003
you inherit any migration issues

58
00:02:42.003 --> 00:02:47.001
that version of the library has with newer Java versions.

59
00:02:47.001 --> 00:02:49.009
Often the providers of the library will provide

60
00:02:49.009 --> 00:02:53.003
a new version that remedies those issues.

61
00:02:53.003 --> 00:02:56.000
So that is a look at the typical migration issues

62
00:02:56.000 --> 00:02:57.003
that you will face.

63
00:02:57.003 --> 00:03:00.006
Don't be too alarmed, most are pretty simple to fix

64
00:03:00.006 --> 00:03:03.000
and are very well documented.

