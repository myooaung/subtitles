WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Instructor] If you want the most detailed information

2
00:00:02.009 --> 00:00:07.000
regarding a specific Java release, the best place to find it

3
00:00:07.000 --> 00:00:10.004
is on the Oracle JDK Release Notes page.

4
00:00:10.004 --> 00:00:13.002
Here you can find the release notes

5
00:00:13.002 --> 00:00:15.009
for the most recent versions of Java.

6
00:00:15.009 --> 00:00:17.000
So let's hop in.

7
00:00:17.000 --> 00:00:21.007
We can take a look at the JDK 10 release notes.

8
00:00:21.007 --> 00:00:24.007
Once we navigate into JDK 10,

9
00:00:24.007 --> 00:00:27.001
you're going to see the three releases,

10
00:00:27.001 --> 00:00:30.005
the initial release, and then the two maintenance releases.

11
00:00:30.005 --> 00:00:33.000
Let's take a look at the initial release,

12
00:00:33.000 --> 00:00:34.008
so we'll click on the one at the bottom.

13
00:00:34.008 --> 00:00:37.003
And then within the Documentation section,

14
00:00:37.003 --> 00:00:40.006
you're going to see a link to the release notes.

15
00:00:40.006 --> 00:00:45.004
And then finally, we arrive at the Release Notes page.

16
00:00:45.004 --> 00:00:47.008
This page lists all the changes

17
00:00:47.008 --> 00:00:51.006
that you can expect to find within this Java version.

18
00:00:51.006 --> 00:00:52.008
And it can be useful

19
00:00:52.008 --> 00:00:55.004
for identifying potentially breaking changes

20
00:00:55.004 --> 00:00:57.006
in your application.

21
00:00:57.006 --> 00:01:01.000
The best way to identify those breaking changes

22
00:01:01.000 --> 00:01:05.004
is to look at the removed features and options section.

23
00:01:05.004 --> 00:01:06.008
Here you're going to see

24
00:01:06.008 --> 00:01:10.004
what was removed from the language with this version,

25
00:01:10.004 --> 00:01:14.006
and it's going to alert you to any potential API changes

26
00:01:14.006 --> 00:01:16.008
that may break your application.

27
00:01:16.008 --> 00:01:20.003
So it's always a good idea to review this section

28
00:01:20.003 --> 00:01:21.009
and look for those areas

29
00:01:21.009 --> 00:01:25.002
that may be applicable to your application.

30
00:01:25.002 --> 00:01:27.007
Now that we know where to find information

31
00:01:27.007 --> 00:01:30.001
on the most recent Java versions,

32
00:01:30.001 --> 00:01:34.003
let's talk about some of the most specific issues

33
00:01:34.003 --> 00:01:39.004
that will disrupt your migration from Java 8 to Java 11.

34
00:01:39.004 --> 00:01:43.001
The first change we'll take a look at is the module system.

35
00:01:43.001 --> 00:01:47.004
Most Java developers understand how Java is organized.

36
00:01:47.004 --> 00:01:50.000
Fields and methods are placed into classes

37
00:01:50.000 --> 00:01:53.000
and classes are placed into packages.

38
00:01:53.000 --> 00:01:56.006
The module system, which was introduced in Java 9,

39
00:01:56.006 --> 00:01:58.009
adds another level to that hierarchy,

40
00:01:58.009 --> 00:02:03.000
allowing packages to be placed into modules.

41
00:02:03.000 --> 00:02:05.006
Applications using the module system

42
00:02:05.006 --> 00:02:09.000
specify exactly what modules they will require

43
00:02:09.000 --> 00:02:10.009
in order to access them.

44
00:02:10.009 --> 00:02:13.001
This dependency information

45
00:02:13.001 --> 00:02:15.008
can be used to build lightweight runtimes

46
00:02:15.008 --> 00:02:17.006
instead of running an application

47
00:02:17.006 --> 00:02:20.000
on the entire Java platform.

48
00:02:20.000 --> 00:02:22.008
This helps with the security of the application

49
00:02:22.008 --> 00:02:24.008
by reducing the attack surface,

50
00:02:24.008 --> 00:02:26.006
and we also get some benefits

51
00:02:26.006 --> 00:02:30.005
by reducing the resource usage of the application.

52
00:02:30.005 --> 00:02:31.007
It's important to note

53
00:02:31.007 --> 00:02:35.008
that just because you migrate to Java 9 or Java 11,

54
00:02:35.008 --> 00:02:39.000
it doesn't mean you have to use the module system.

55
00:02:39.000 --> 00:02:41.006
You can choose whether or not to opt in

56
00:02:41.006 --> 00:02:44.001
to the new module system.

57
00:02:44.001 --> 00:02:48.001
When the new module system was being placed into Java 9,

58
00:02:48.001 --> 00:02:50.000
it was determined that access

59
00:02:50.000 --> 00:02:54.008
to JDK internal classes and packages would be restricted.

60
00:02:54.008 --> 00:02:57.004
This means that if your classes have references

61
00:02:57.004 --> 00:03:01.007
to the original sun packages, they may not compile.

62
00:03:01.007 --> 00:03:04.003
Restricting access to JDK internals

63
00:03:04.003 --> 00:03:07.005
created a bit of a leap from Java 8 to 9.

64
00:03:07.005 --> 00:03:12.001
So the illegal-access JVM option was introduced.

65
00:03:12.001 --> 00:03:15.002
And initially, it's set to permit,

66
00:03:15.002 --> 00:03:18.002
so that's the default for Java 9.

67
00:03:18.002 --> 00:03:20.003
When set to permit,

68
00:03:20.003 --> 00:03:24.008
the option disregards encapsulation measures at runtime

69
00:03:24.008 --> 00:03:28.003
that restrict access to JDK internals.

70
00:03:28.003 --> 00:03:31.001
This is going to allow already compiled code

71
00:03:31.001 --> 00:03:34.000
and code that requires reflective access

72
00:03:34.000 --> 00:03:37.005
to the JDK internals to continue to function.

73
00:03:37.005 --> 00:03:41.007
Now it's important to note, this is a runtime option,

74
00:03:41.007 --> 00:03:45.006
so it's not going to benefit you at compile time,

75
00:03:45.006 --> 00:03:47.005
and your code will not compile

76
00:03:47.005 --> 00:03:50.009
if you attempt to access JDK internals.

77
00:03:50.009 --> 00:03:57.000
By default, the option remains set to permit in Java 11.

78
00:03:57.000 --> 00:03:59.003
So if you're using an LTS version,

79
00:03:59.003 --> 00:04:03.003
you don't need to be concerned about this until Java 17.

80
00:04:03.003 --> 00:04:05.007
Now within the documentation,

81
00:04:05.007 --> 00:04:11.000
it does indicate that deny will be the default value

82
00:04:11.000 --> 00:04:13.002
in the future for the option.

83
00:04:13.002 --> 00:04:16.007
And this will eliminate that runtime access

84
00:04:16.007 --> 00:04:18.009
to JDK internals.

85
00:04:18.009 --> 00:04:23.007
So not a bad idea to set this option to deny

86
00:04:23.007 --> 00:04:26.006
to see how your application will behave,

87
00:04:26.006 --> 00:04:31.000
and you can get ahead of any migration issues in the future.

88
00:04:31.000 --> 00:04:33.002
We're going to skip over Java 10.

89
00:04:33.002 --> 00:04:36.008
It only removed some infrequently used methods

90
00:04:36.008 --> 00:04:40.004
and classes from the language that involves security.

91
00:04:40.004 --> 00:04:44.004
There were a lot more major changes introduced in Java 11

92
00:04:44.004 --> 00:04:46.004
that we're going to discuss.

93
00:04:46.004 --> 00:04:51.001
Those changes were the removal of several Java EE

94
00:04:51.001 --> 00:04:56.000
and CORBA related modules from Java Standard Edition.

95
00:04:56.000 --> 00:04:59.008
So these modules are no longer available in the JDK,

96
00:04:59.008 --> 00:05:01.002
and moving forward,

97
00:05:01.002 --> 00:05:03.007
you'll need to obtain them through some other means,

98
00:05:03.007 --> 00:05:07.002
whether that's through a Java EE server implementation,

99
00:05:07.002 --> 00:05:11.005
or you get the dependency from a build system like Maven.

100
00:05:11.005 --> 00:05:14.006
So that is a look at some of the most disruptive changes

101
00:05:14.006 --> 00:05:18.004
you may encounter when migrating to Java 11.

102
00:05:18.004 --> 00:05:20.000
Don't feel too overwhelmed,

103
00:05:20.000 --> 00:05:23.002
or like you need to read every line of the documentation,

104
00:05:23.002 --> 00:05:26.004
there's some excellent tools that we're going to explore

105
00:05:26.004 --> 00:05:28.005
that can help you quickly discover

106
00:05:28.005 --> 00:05:31.000
and resolve these migration issues.

