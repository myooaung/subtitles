WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] Changes introduced in Java 12

2
00:00:02.007 --> 00:00:06.002
were primarily focused on improvements to the JVM

3
00:00:06.002 --> 00:00:08.008
but the release did bring some new language features

4
00:00:08.008 --> 00:00:10.003
that we'll explore.

5
00:00:10.003 --> 00:00:13.005
Like the last release, Java 12 introduced new methods

6
00:00:13.005 --> 00:00:14.008
to the string class

7
00:00:14.008 --> 00:00:17.008
and that's where we're going to get started.

8
00:00:17.008 --> 00:00:20.002
Indent was one of the new methods added

9
00:00:20.002 --> 00:00:22.005
to string in Java 12.

10
00:00:22.005 --> 00:00:24.005
When we invoke the indent method,

11
00:00:24.005 --> 00:00:28.003
you'll see that it accepts an integer as an argument.

12
00:00:28.003 --> 00:00:31.000
This integer will determine the number

13
00:00:31.000 --> 00:00:34.002
of spaces added to the beginning of each line

14
00:00:34.002 --> 00:00:35.007
of our string.

15
00:00:35.007 --> 00:00:38.005
Basically, we're going to be prefixing white space

16
00:00:38.005 --> 00:00:41.004
to the beginning of each line of the string.

17
00:00:41.004 --> 00:00:44.004
It's pretty obvious Java 12's indent method

18
00:00:44.004 --> 00:00:48.003
is much easier than writing your own implementation.

19
00:00:48.003 --> 00:00:50.002
Moving on, we're going to take a look

20
00:00:50.002 --> 00:00:55.005
at the new transform method on the string class in Java 12.

21
00:00:55.005 --> 00:00:56.008
If we look at our implementation,

22
00:00:56.008 --> 00:00:58.009
you'll see that we take a function

23
00:00:58.009 --> 00:01:03.003
and a string and then we invoke the apply method

24
00:01:03.003 --> 00:01:04.009
on the function

25
00:01:04.009 --> 00:01:08.002
and pass in the string as an argument.

26
00:01:08.002 --> 00:01:11.009
This causes the function to be applied to the string.

27
00:01:11.009 --> 00:01:16.001
When we use the transform method on the string type,

28
00:01:16.001 --> 00:01:18.003
you'll see it's a little bit different.

29
00:01:18.003 --> 00:01:22.003
In this case, we're going to be passing in the function

30
00:01:22.003 --> 00:01:26.004
to the transform method on the String type.

31
00:01:26.004 --> 00:01:29.009
And this will cause the function to be applied

32
00:01:29.009 --> 00:01:31.003
to the string.

33
00:01:31.003 --> 00:01:33.006
Now, there's a couple more points I'd like to highlight

34
00:01:33.006 --> 00:01:35.003
about these methods.

35
00:01:35.003 --> 00:01:38.000
So I'm going to head over to our unit test.

36
00:01:38.000 --> 00:01:42.000
First, the indent method standardizes the line endings

37
00:01:42.000 --> 00:01:43.002
on a string.

38
00:01:43.002 --> 00:01:46.005
New line characters will be added to each line

39
00:01:46.005 --> 00:01:47.007
of the string.

40
00:01:47.007 --> 00:01:52.000
This includes strings that only contain a single line.

41
00:01:52.000 --> 00:01:54.007
So you will see that I strip out these characters

42
00:01:54.007 --> 00:01:58.002
when performing the assertion in our unit tests.

43
00:01:58.002 --> 00:02:00.007
Second, the indent method allows us

44
00:02:00.007 --> 00:02:03.007
to provide negative numbers as arguments.

45
00:02:03.007 --> 00:02:06.002
This will cause the leading white space

46
00:02:06.002 --> 00:02:08.000
from a string to be moved.

47
00:02:08.000 --> 00:02:10.009
If we take a look at our transformTest,

48
00:02:10.009 --> 00:02:13.004
you'll notice that the transform method

49
00:02:13.004 --> 00:02:17.002
on String allows us to supply lambda functions

50
00:02:17.002 --> 00:02:19.009
in order to modify our string.

51
00:02:19.009 --> 00:02:22.004
Okay, with this in place I'm going to go ahead

52
00:02:22.004 --> 00:02:26.005
and execute our unit tests, which successfully passes.

53
00:02:26.005 --> 00:02:29.000
From there, we're going to move to take a look

54
00:02:29.000 --> 00:02:33.006
at a change made to the files object in Java 12.

55
00:02:33.006 --> 00:02:37.006
So I'll open up the associated class and its unit test.

56
00:02:37.006 --> 00:02:40.006
And here within the FilesFeatures class,

57
00:02:40.006 --> 00:02:42.008
you'll notice the mismatch method.

58
00:02:42.008 --> 00:02:45.004
Let's talk a little bit about what this does.

59
00:02:45.004 --> 00:02:48.005
Here we read the contents of two files.

60
00:02:48.005 --> 00:02:51.007
And then we iterate through those contents character

61
00:02:51.007 --> 00:02:54.002
by character and we compare the characters

62
00:02:54.002 --> 00:02:56.001
to look for a mismatch.

63
00:02:56.001 --> 00:02:57.009
If we find a mismatch,

64
00:02:57.009 --> 00:03:00.005
we return the position of the mismatch.

65
00:03:00.005 --> 00:03:03.007
However, if the contents of the files are the same,

66
00:03:03.007 --> 00:03:07.000
we simply return -1 to indicate that.

67
00:03:07.000 --> 00:03:10.000
Now, in Java 12, we can perform this sort

68
00:03:10.000 --> 00:03:12.001
of comparison in one line,

69
00:03:12.001 --> 00:03:13.005
so I'm going to go ahead

70
00:03:13.005 --> 00:03:16.000
and I'm going to remove all this code

71
00:03:16.000 --> 00:03:19.006
and then we're going to use the Files object

72
00:03:19.006 --> 00:03:21.008
and it's mismatch method

73
00:03:21.008 --> 00:03:24.003
in order to perform this functionality.

74
00:03:24.003 --> 00:03:27.007
You'll notice that the mismatch method requires us

75
00:03:27.007 --> 00:03:30.005
to supply the path to two files.

76
00:03:30.005 --> 00:03:34.000
So I'm going to use the toPath method

77
00:03:34.000 --> 00:03:41.007
on our files, which are supplied as arguments here.

78
00:03:41.007 --> 00:03:43.007
And that will satisfy the contract

79
00:03:43.007 --> 00:03:45.002
for the mismatch method.

80
00:03:45.002 --> 00:03:49.008
And now the contents of these two files will be compared.

81
00:03:49.008 --> 00:03:52.004
So let's head over to our unit test

82
00:03:52.004 --> 00:03:55.002
where we compare the contents of the files

83
00:03:55.002 --> 00:03:57.000
and I'm going to kick off the tests

84
00:03:57.000 --> 00:03:59.005
and we can see that they pass.

85
00:03:59.005 --> 00:04:03.007
Okay, now let's take a look at the new teeing collector,

86
00:04:03.007 --> 00:04:07.003
which has been added to the Streams API.

87
00:04:07.003 --> 00:04:10.000
So we'll open up the class and its test.

88
00:04:10.000 --> 00:04:13.001
And let's talk a little bit about our getRange method.

89
00:04:13.001 --> 00:04:16.007
So you can see that it accepts a list of integers

90
00:04:16.007 --> 00:04:19.007
and then I use the minBy collector

91
00:04:19.007 --> 00:04:22.007
in order to find the minimum value

92
00:04:22.007 --> 00:04:24.009
within that list of integers.

93
00:04:24.009 --> 00:04:28.006
On a similar note, I then use the maxBy collector

94
00:04:28.006 --> 00:04:30.008
in order to find the maximum number

95
00:04:30.008 --> 00:04:32.008
in that list of integers.

96
00:04:32.008 --> 00:04:34.005
We then build out a function

97
00:04:34.005 --> 00:04:37.000
that's going to return a string,

98
00:04:37.000 --> 00:04:39.008
which will provide the min

99
00:04:39.008 --> 00:04:44.004
and max of our list in the format min-max.

100
00:04:44.004 --> 00:04:45.008
We take this function

101
00:04:45.008 --> 00:04:49.007
and we pass in the value returned by our collectors

102
00:04:49.007 --> 00:04:53.008
in order to create that string of min-max.

103
00:04:53.008 --> 00:04:57.000
So essentially, we have two collectors

104
00:04:57.000 --> 00:04:58.004
and a function.

105
00:04:58.004 --> 00:05:01.003
And this is exactly what the teeing collector does.

106
00:05:01.003 --> 00:05:04.009
So let's go ahead and we're going to remove this code.

107
00:05:04.009 --> 00:05:07.006
So we're going to take our list of integers

108
00:05:07.006 --> 00:05:11.001
and we're going to stream that list

109
00:05:11.001 --> 00:05:13.006
and then use the collect method

110
00:05:13.006 --> 00:05:16.006
and on the Collectors object,

111
00:05:16.006 --> 00:05:19.004
we'll find our new teeing collector

112
00:05:19.004 --> 00:05:22.007
and if we take a look at the teeing method we used

113
00:05:22.007 --> 00:05:24.006
to construct the teeing collector,

114
00:05:24.006 --> 00:05:28.003
you'll notice that it's going to accept a collector

115
00:05:28.003 --> 00:05:29.007
for the first argument,

116
00:05:29.007 --> 00:05:31.007
a collector for the second argument

117
00:05:31.007 --> 00:05:34.008
and then a lambda function for the third argument.

118
00:05:34.008 --> 00:05:36.008
So let's go ahead and provide those

119
00:05:36.008 --> 00:05:39.003
and I'm going to add them

120
00:05:39.003 --> 00:05:46.001
on a single line because it's easier to follow that way.

121
00:05:46.001 --> 00:05:51.006
Okay, so the first thing we'll do is use the minBy collector

122
00:05:51.006 --> 00:05:55.006
and we're going to use the compare method

123
00:05:55.006 --> 00:05:57.006
on the integer type

124
00:05:57.006 --> 00:06:00.001
in order to find the minimum value

125
00:06:00.001 --> 00:06:01.009
within our list of integers.

126
00:06:01.009 --> 00:06:03.007
So there's our first collector.

127
00:06:03.007 --> 00:06:07.000
Now, let's go ahead, we'll supply the second collector,

128
00:06:07.000 --> 00:06:09.002
which is going to be maxBy

129
00:06:09.002 --> 00:06:12.000
and once again, we'll use the compare method

130
00:06:12.000 --> 00:06:14.006
on the integer object.

131
00:06:14.006 --> 00:06:17.003
So now we need to provide a lambda function.

132
00:06:17.003 --> 00:06:21.009
This lambda function is going to receive two arguments

133
00:06:21.009 --> 00:06:25.005
and those arguments are going to be the results returned

134
00:06:25.005 --> 00:06:28.007
by the collectors that we provided

135
00:06:28.007 --> 00:06:30.008
in the previous two parameters.

136
00:06:30.008 --> 00:06:33.005
So we're going to get the min and the max.

137
00:06:33.005 --> 00:06:35.009
And then within our lambda function,

138
00:06:35.009 --> 00:06:38.000
we need to specific some logic

139
00:06:38.000 --> 00:06:40.006
for what to do with those parameters.

140
00:06:40.006 --> 00:06:43.009
In our case, we're looking to return a string

141
00:06:43.009 --> 00:06:47.007
and that string has the format of the min dash

142
00:06:47.007 --> 00:06:48.009
and then the max.

143
00:06:48.009 --> 00:06:52.000
So we're just going to create a parametrized string

144
00:06:52.000 --> 00:06:55.000
and then we'll need to pass in the parameters.

145
00:06:55.000 --> 00:06:56.008
So I'll pass in the min

146
00:06:56.008 --> 00:07:00.005
and then I'll pass in the max.

147
00:07:00.005 --> 00:07:03.003
And then here, I've just got to make a small tweak

148
00:07:03.003 --> 00:07:11.005
to our format method.

149
00:07:11.005 --> 00:07:15.007
And now we can go ahead and import the minBy collector,

150
00:07:15.007 --> 00:07:18.002
as well as the maxBy collector.

151
00:07:18.002 --> 00:07:21.002
Okay, so we'll go ahead and save this class

152
00:07:21.002 --> 00:07:23.009
and then we'll navigate over to the unit test

153
00:07:23.009 --> 00:07:27.004
and we can confirm that our new teeing collector

154
00:07:27.004 --> 00:07:32.005
did in fact return the min and max of our list of integers.

155
00:07:32.005 --> 00:07:34.005
Okay, let's go ahead and take a look

156
00:07:34.005 --> 00:07:37.004
at our final Java 12 feature

157
00:07:37.004 --> 00:07:40.001
and that's the CompactNumberFormat.

158
00:07:40.001 --> 00:07:42.004
So I'll open those classes

159
00:07:42.004 --> 00:07:44.004
and the first thing we're going to do

160
00:07:44.004 --> 00:07:45.009
is take a look at the unit test

161
00:07:45.009 --> 00:07:48.003
because it does a good job of explaining

162
00:07:48.003 --> 00:07:51.002
what the CompactNumberFormat does.

163
00:07:51.002 --> 00:07:52.000
So you'll notice,

164
00:07:52.000 --> 00:07:54.002
we have a rather large number, one million.

165
00:07:54.002 --> 00:07:59.004
And the CompactNumberFormat is going to reduce that number

166
00:07:59.004 --> 00:08:01.000
to a shorthand format.

167
00:08:01.000 --> 00:08:04.004
So here we see a string of 1M.

168
00:08:04.004 --> 00:08:06.000
Now, there's different variants

169
00:08:06.000 --> 00:08:08.005
of using the CompactNumberFormat.

170
00:08:08.005 --> 00:08:12.005
Here you see we're able to provide a locale,

171
00:08:12.005 --> 00:08:14.008
as well as a number format style

172
00:08:14.008 --> 00:08:18.004
and that's going to cause us to get a little bit different

173
00:08:18.004 --> 00:08:22.002
of a shorthand format for the number one million.

174
00:08:22.002 --> 00:08:27.002
So let's see how we can put this in place.

175
00:08:27.002 --> 00:08:29.007
Within our NumberFormatFeatures class,

176
00:08:29.007 --> 00:08:31.003
you see we have two methods

177
00:08:31.003 --> 00:08:35.003
and we still have to provide the implementations of them.

178
00:08:35.003 --> 00:08:37.005
So on the NumberFormat object,

179
00:08:37.005 --> 00:08:42.005
you're going to find the getCompactNumberInstance method

180
00:08:42.005 --> 00:08:45.000
and that's going to return an instance

181
00:08:45.000 --> 00:08:46.002
of a NumberFormat

182
00:08:46.002 --> 00:08:49.007
and then we simply invoke the format method

183
00:08:49.007 --> 00:08:52.003
and pass in the number we'd like to format.

184
00:08:52.003 --> 00:08:54.009
So that's its simplest form.

185
00:08:54.009 --> 00:08:59.001
Now, if we want to get a little bit more complex with it,

186
00:08:59.001 --> 00:09:02.000
we can use a different method,

187
00:09:02.000 --> 00:09:05.000
the getCompactNumberInstance method

188
00:09:05.000 --> 00:09:08.007
that accepts a locale, as well as a style.

189
00:09:08.007 --> 00:09:10.001
And we're just going to go ahead

190
00:09:10.001 --> 00:09:15.007
and pass those in to the getCompactNumberInstance method

191
00:09:15.007 --> 00:09:18.002
and then we'll invoke the format method,

192
00:09:18.002 --> 00:09:21.000
passing in the number we'd like to format.

193
00:09:21.000 --> 00:09:23.000
And that will cause that number

194
00:09:23.000 --> 00:09:26.007
to be formatted in the locale and style we provided.

195
00:09:26.007 --> 00:09:28.005
All right, now let's go ahead

196
00:09:28.005 --> 00:09:30.006
and we'll kick off our unit tests

197
00:09:30.006 --> 00:09:32.009
and we can see that they pass.

198
00:09:32.009 --> 00:09:35.004
So that was a look at some very useful features

199
00:09:35.004 --> 00:09:37.007
that have been added to Java 12.

200
00:09:37.007 --> 00:09:40.005
In addition, Java 12 introduced many improvements

201
00:09:40.005 --> 00:09:44.004
to the JVM, such as changes to the G1 garbage collector

202
00:09:44.004 --> 00:09:48.000
and it also introduced the new Shenandoah garbage collector.

