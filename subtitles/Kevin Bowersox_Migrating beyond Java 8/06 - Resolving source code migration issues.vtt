WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] After configuring our workstation

2
00:00:02.005 --> 00:00:06.000
for Java 11 and analyzing the project,

3
00:00:06.000 --> 00:00:09.003
we can start to migrate the system source code.

4
00:00:09.003 --> 00:00:13.000
The first step in doing this is to compile the application

5
00:00:13.000 --> 00:00:15.000
using Java 11.

6
00:00:15.000 --> 00:00:18.004
This is going to require us to change the project's JDK

7
00:00:18.004 --> 00:00:20.005
configuration.

8
00:00:20.005 --> 00:00:24.001
We can do this by right-clicking on the project,

9
00:00:24.001 --> 00:00:26.007
navigating to the Build Path menu,

10
00:00:26.007 --> 00:00:30.005
and then selecting Configure Build Path.

11
00:00:30.005 --> 00:00:34.002
This is going to open the project Properties dialogue,

12
00:00:34.002 --> 00:00:39.009
where we can see that JDK 8 is included on the build path.

13
00:00:39.009 --> 00:00:43.004
I'm going to select JDK 8 and hit Remove

14
00:00:43.004 --> 00:00:46.008
because want to shift to JDK 11.

15
00:00:46.008 --> 00:00:49.001
In order to add that JDK,

16
00:00:49.001 --> 00:00:51.004
we can click on Add Library,

17
00:00:51.004 --> 00:00:56.001
and then ensure that JRE System Library is selected

18
00:00:56.001 --> 00:00:58.000
and hit Next.

19
00:00:58.000 --> 00:01:01.001
This will open the Add Library dialogue.

20
00:01:01.001 --> 00:01:05.009
In here if we click on the Alternate JRE option,

21
00:01:05.009 --> 00:01:08.004
you'll notice that we have access

22
00:01:08.004 --> 00:01:13.002
to every JDK that we've included within Eclipse.

23
00:01:13.002 --> 00:01:16.004
Now because we are are using JDK 11

24
00:01:16.004 --> 00:01:19.006
and it set as our Workspace default,

25
00:01:19.006 --> 00:01:22.007
I'm just going to go ahead and select that option

26
00:01:22.007 --> 00:01:24.002
and hit finish.

27
00:01:24.002 --> 00:01:28.002
That's going to place JDK 11 on the build path

28
00:01:28.002 --> 00:01:30.005
for our project.

29
00:01:30.005 --> 00:01:33.006
At this point we can click on Apply and Close,

30
00:01:33.006 --> 00:01:38.006
and that will cause the project to be built using Java 11.

31
00:01:38.006 --> 00:01:41.005
Now, we know there's some existing issues

32
00:01:41.005 --> 00:01:44.007
with our application and Java 11,

33
00:01:44.007 --> 00:01:47.009
so let's go ahead and resolve those.

34
00:01:47.009 --> 00:01:49.007
The first issue we're going to resolve

35
00:01:49.007 --> 00:01:53.005
is within the RecommendationsService class.

36
00:01:53.005 --> 00:01:56.004
So, I'm going to go ahead and open this class,

37
00:01:56.004 --> 00:01:58.006
and if we take a look,

38
00:01:58.006 --> 00:02:04.008
you'll notice that we are base 64 decoding a license key

39
00:02:04.008 --> 00:02:08.005
using the BASE64Decoder class.

40
00:02:08.005 --> 00:02:11.009
So, this class is part of the JDK internals,

41
00:02:11.009 --> 00:02:16.007
and we know longer have access to them within Java 11,

42
00:02:16.007 --> 00:02:19.006
so we're going to have to find another way

43
00:02:19.006 --> 00:02:21.005
to create our license key.

44
00:02:21.005 --> 00:02:23.000
So let's go ahead,

45
00:02:23.000 --> 00:02:25.004
and we can start creating the string.

46
00:02:25.004 --> 00:02:29.004
And this time instead of using the BASE64Decoder,

47
00:02:29.004 --> 00:02:32.009
we're going to use the Base64 class

48
00:02:32.009 --> 00:02:36.006
found within the Java.Util package.

49
00:02:36.006 --> 00:02:41.005
Now on the Base64 class we have the option to get a decoder,

50
00:02:41.005 --> 00:02:46.004
and once we get a decoder we find the decode method

51
00:02:46.004 --> 00:02:51.007
on that object, which we can use to base 64 decode a string.

52
00:02:51.007 --> 00:02:55.002
In this case, that string is going to be our license key,

53
00:02:55.002 --> 00:02:57.009
so we'll just go ahead and pass that in

54
00:02:57.009 --> 00:03:00.002
to the method as an argument,

55
00:03:00.002 --> 00:03:03.008
and now we're able to decode our license key.

56
00:03:03.008 --> 00:03:05.009
Now once we have that in place,

57
00:03:05.009 --> 00:03:10.009
we need to remove the code that uses the BASE64Decoder,

58
00:03:10.009 --> 00:03:17.000
and then we also need to remove the import of that type

59
00:03:17.000 --> 00:03:20.003
that's found within the JDK internals.

60
00:03:20.003 --> 00:03:25.001
So once we hit save, we have officially resolved

61
00:03:25.001 --> 00:03:28.007
our first Java 11 migration issue.

62
00:03:28.007 --> 00:03:30.007
Let's move on to our next issue

63
00:03:30.007 --> 00:03:32.006
that we'll need resolved.

64
00:03:32.006 --> 00:03:34.004
So, this issue is found

65
00:03:34.004 --> 00:03:37.005
within our RecommendationConfiguration class,

66
00:03:37.005 --> 00:03:40.009
and when you open the class it's a little bit daunting.

67
00:03:40.009 --> 00:03:45.002
JAXB was removed from recent versions

68
00:03:45.002 --> 00:03:47.002
of Java Standard Edition,

69
00:03:47.002 --> 00:03:50.005
so that's why we're receiving all of these errors

70
00:03:50.005 --> 00:03:53.007
related to JAXB annotations.

71
00:03:53.007 --> 00:03:57.004
We'll need to provide our own implementation

72
00:03:57.004 --> 00:04:00.007
of JAXB and its API.

73
00:04:00.007 --> 00:04:03.005
Now our project is using Maven,

74
00:04:03.005 --> 00:04:05.000
so we can use Maven

75
00:04:05.000 --> 00:04:08.001
and its dependency management system

76
00:04:08.001 --> 00:04:11.008
in order to obtain those libraries.

77
00:04:11.008 --> 00:04:14.006
So within the pom.xml file,

78
00:04:14.006 --> 00:04:18.001
I'm going to scroll down to where we're specifying

79
00:04:18.001 --> 00:04:20.006
the dependencies for the project,

80
00:04:20.006 --> 00:04:26.007
and we can start to add in the dependencies for JAXB.

81
00:04:26.007 --> 00:04:28.002
So when we use Maven,

82
00:04:28.002 --> 00:04:32.002
we have to specify the groupId of our dependency.

83
00:04:32.002 --> 00:04:37.005
And in this case, it's going to be jakarta.xml.bind.

84
00:04:37.005 --> 00:04:40.009
And then the artifact we're going to be using

85
00:04:40.009 --> 00:04:47.008
is the jakarta.xml.bind-api.

86
00:04:47.008 --> 00:04:53.004
And we'll be using version 2.3.3 of that dependency.

87
00:04:53.004 --> 00:04:55.007
So, there's our first dependency

88
00:04:55.007 --> 00:04:59.002
which will provide the JAXB API.

89
00:04:59.002 --> 00:05:04.005
Now we need to add an implementation of JAXB,

90
00:05:04.005 --> 00:05:08.001
and we're going to source that from glassfish.

91
00:05:08.001 --> 00:05:14.004
So, we'll specify org.glassfish.jaxb as the groupId.

92
00:05:14.004 --> 00:05:17.001
And then for the artifactId,

93
00:05:17.001 --> 00:05:21.002
it's going to be jaxb-runtime.

94
00:05:21.002 --> 00:05:24.007
And then we need to specify a version here as well,

95
00:05:24.007 --> 00:05:27.003
which will be 2.3.3.

96
00:05:27.003 --> 00:05:31.003
Okay, so now we have JAXB within our project,

97
00:05:31.003 --> 00:05:33.007
and we're going to do one final thing

98
00:05:33.007 --> 00:05:36.001
within the pom.xml file.

99
00:05:36.001 --> 00:05:40.003
You'll notice that Java 8 is currently set

100
00:05:40.003 --> 00:05:42.006
as our active profile,

101
00:05:42.006 --> 00:05:45.003
and that's because of the activation tag

102
00:05:45.003 --> 00:05:47.000
that we've included there.

103
00:05:47.000 --> 00:05:51.005
So, let's go ahead and move the activation tag

104
00:05:51.005 --> 00:05:55.002
into our Java 11 project.

105
00:05:55.002 --> 00:06:00.004
So, we can go ahead and make Java 11 the active profile

106
00:06:00.004 --> 00:06:03.002
within our pom.xml file,

107
00:06:03.002 --> 00:06:05.005
and just save that change.

108
00:06:05.005 --> 00:06:08.000
Okay with all these changes in place,

109
00:06:08.000 --> 00:06:12.003
we're ready to run the application using Java 11.

110
00:06:12.003 --> 00:06:15.006
So, I'm going to navigate to the Package Explorer.

111
00:06:15.006 --> 00:06:17.009
I'll right-click on the project,

112
00:06:17.009 --> 00:06:21.007
and then go to Run As, and Java Application.

113
00:06:21.007 --> 00:06:26.002
We might get prompted to allow access for the JDK to run,

114
00:06:26.002 --> 00:06:28.004
I'm going to go ahead and do that.

115
00:06:28.004 --> 00:06:34.007
And then we can take a look at our running application.

116
00:06:34.007 --> 00:06:38.001
You'll notice that we have not experienced any issues

117
00:06:38.001 --> 00:06:40.004
upon application startup.

118
00:06:40.004 --> 00:06:44.003
We do get some warnings regarding reflective access

119
00:06:44.003 --> 00:06:46.005
that we'll have to take a look at.

120
00:06:46.005 --> 00:06:49.000
So with the application started,

121
00:06:49.000 --> 00:06:53.001
I'm going to navigate to a browser,

122
00:06:53.001 --> 00:06:54.007
and then within this browser

123
00:06:54.007 --> 00:06:57.000
we can access the API

124
00:06:57.000 --> 00:07:00.005
which is running on localhost port 8080.

125
00:07:00.005 --> 00:07:04.000
And then it exposes a product endpoint

126
00:07:04.000 --> 00:07:06.005
where we can specify a product id.

127
00:07:06.005 --> 00:07:08.005
I'll use product 500.

128
00:07:08.005 --> 00:07:12.005
And once we hit that REST API endpoint,

129
00:07:12.005 --> 00:07:17.000
we do see that we get a response back from our application.

130
00:07:17.000 --> 00:07:17.008
Excellent!

131
00:07:17.008 --> 00:07:19.005
So, we've reached one milestone

132
00:07:19.005 --> 00:07:22.001
for fixing our application's source code.

133
00:07:22.001 --> 00:07:25.003
We've completed the transition of the source code

134
00:07:25.003 --> 00:07:27.001
over to Java 11.

135
00:07:27.001 --> 00:07:30.003
Now, we do have some warnings within our console output

136
00:07:30.003 --> 00:07:32.002
that we need to investigate,

137
00:07:32.002 --> 00:07:37.000
but this is a key step in getting our application migrated.

