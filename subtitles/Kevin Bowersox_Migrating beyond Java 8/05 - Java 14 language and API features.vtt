WEBVTT
1
00:00:00.006 --> 00:00:03.003
- [Instructor] Java 14 introduced several new features

2
00:00:03.003 --> 00:00:05.004
and preview features to the language

3
00:00:05.004 --> 00:00:08.001
that we'll explore in this lesson.

4
00:00:08.001 --> 00:00:10.006
One preview feature is records.

5
00:00:10.006 --> 00:00:13.005
Records help us cut down on boilerplate code

6
00:00:13.005 --> 00:00:16.000
found in domain classes.

7
00:00:16.000 --> 00:00:18.008
If we take a look at this simple Cat class,

8
00:00:18.008 --> 00:00:21.003
you'll notice it's about 60 lines of code,

9
00:00:21.003 --> 00:00:24.008
just for two fields, a constructor, some accessors,

10
00:00:24.008 --> 00:00:29.000
a hashcode, an equals method and a two string method.

11
00:00:29.000 --> 00:00:32.001
Using a record, we can get rid of all this code

12
00:00:32.001 --> 00:00:35.007
and automatically generate these members.

13
00:00:35.007 --> 00:00:40.000
So I'm going to go ahead and delete our Cat class

14
00:00:40.000 --> 00:00:42.005
and then we're going to declare a record.

15
00:00:42.005 --> 00:00:44.001
So the first thing that we need to do

16
00:00:44.001 --> 00:00:46.006
is specify an access modifier

17
00:00:46.006 --> 00:00:49.005
and then we use the record type

18
00:00:49.005 --> 00:00:52.007
and then specify the name of our record.

19
00:00:52.007 --> 00:00:54.004
In this case, Cat.

20
00:00:54.004 --> 00:00:57.004
Then we're going to specify the fields

21
00:00:57.004 --> 00:00:59.001
that we would like on our record

22
00:00:59.001 --> 00:01:02.007
and then we simply end the record with an open

23
00:01:02.007 --> 00:01:04.008
and closing curly brace.

24
00:01:04.008 --> 00:01:06.000
That's all it takes

25
00:01:06.000 --> 00:01:08.001
and we're going to have all those members,

26
00:01:08.001 --> 00:01:09.004
such as the hashcode method

27
00:01:09.004 --> 00:01:12.003
and the equals method generated for us.

28
00:01:12.003 --> 00:01:14.007
We can see that in action if we take a look

29
00:01:14.007 --> 00:01:16.001
at our unit test.

30
00:01:16.001 --> 00:01:18.008
So here you'll see that I create two records

31
00:01:18.008 --> 00:01:22.003
and then I'm able to use the two string method

32
00:01:22.003 --> 00:01:25.007
as well as our accessors, the hashcode method

33
00:01:25.007 --> 00:01:27.003
and then the equals method.

34
00:01:27.003 --> 00:01:31.008
Okay, so let's launch our unit test

35
00:01:31.008 --> 00:01:36.000
and if we take a look you can see that it passes.

36
00:01:36.000 --> 00:01:40.001
So records are an exciting new preview feature

37
00:01:40.001 --> 00:01:43.008
that allow us to reduce all that boilerplate code.

38
00:01:43.008 --> 00:01:45.009
We're going to take a look now at a feature

39
00:01:45.009 --> 00:01:48.009
that was introduced in Java 14

40
00:01:48.009 --> 00:01:52.003
that's very celebrated by Java developers.

41
00:01:52.003 --> 00:01:56.000
So if we take a look at this unit test,

42
00:01:56.000 --> 00:01:59.008
you'll notice that I'm creating a Cat record

43
00:01:59.008 --> 00:02:02.005
that's going to cause a null pointer exception,

44
00:02:02.005 --> 00:02:06.001
because I haven't specified a name for the Cat.

45
00:02:06.001 --> 00:02:10.000
Now, if we execute the unit test,

46
00:02:10.000 --> 00:02:14.004
you'll notice that the console output

47
00:02:14.004 --> 00:02:17.003
will simply throw a null pointer exception.

48
00:02:17.003 --> 00:02:20.002
You've probably debugged these many of times.

49
00:02:20.002 --> 00:02:21.009
We don't get a lot of information.

50
00:02:21.009 --> 00:02:24.002
It could be pretty time consuming.

51
00:02:24.002 --> 00:02:28.005
If we go into the run configuration for our unit test,

52
00:02:28.005 --> 00:02:31.003
we're able to add an argument here

53
00:02:31.003 --> 00:02:35.005
that will cause more detailed information

54
00:02:35.005 --> 00:02:39.001
to be displayed in the event of a null pointer exception.

55
00:02:39.001 --> 00:02:40.000
So here you see

56
00:02:40.000 --> 00:02:46.006
the argument is -XX:+ShowcCodeDetailsnExceptionMessages

57
00:02:46.006 --> 00:02:50.002
and once we add that and run our unit test,

58
00:02:50.002 --> 00:02:53.001
if we now inspect the console output,

59
00:02:53.001 --> 00:02:55.006
you'll notice we get a little bit more information

60
00:02:55.006 --> 00:02:57.002
and if we scroll to the right,

61
00:02:57.002 --> 00:03:01.009
you'll see that this output will specifically tell us

62
00:03:01.009 --> 00:03:05.005
that it is the name field on the Cat record

63
00:03:05.005 --> 00:03:06.008
that is null.

64
00:03:06.008 --> 00:03:09.004
Think about how much time that could save you

65
00:03:09.004 --> 00:03:11.009
when debugging an issue.

66
00:03:11.009 --> 00:03:14.001
Okay, we're going to move on now

67
00:03:14.001 --> 00:03:16.002
to take a look at some changes

68
00:03:16.002 --> 00:03:24.002
that were made to the switch statement in Java 14.

69
00:03:24.002 --> 00:03:27.007
So here you'll see a switch statement that I've constructed

70
00:03:27.007 --> 00:03:30.002
to determine my cats feeding time.

71
00:03:30.002 --> 00:03:32.009
She has some odd feeding hours

72
00:03:32.009 --> 00:03:35.005
and she's very demanding about being fed on time.

73
00:03:35.005 --> 00:03:37.004
So I want to keep track of it.

74
00:03:37.004 --> 00:03:41.005
Now you'll notice that she's being fed at 2:00, 16:00

75
00:03:41.005 --> 00:03:43.001
and 21:00.

76
00:03:43.001 --> 00:03:46.009
In Java 14 we can take these multiple case labels

77
00:03:46.009 --> 00:03:50.009
and specify them on a single line

78
00:03:50.009 --> 00:03:53.006
with the new syntax that's allowed.

79
00:03:53.006 --> 00:03:55.009
So here you can see I put two, 16

80
00:03:55.009 --> 00:03:59.000
and 21 on the same case line

81
00:03:59.000 --> 00:04:00.008
and that will compile

82
00:04:00.008 --> 00:04:05.000
and let's go ahead, execute our unit test

83
00:04:05.000 --> 00:04:07.003
to see if it's feeding time.

84
00:04:07.003 --> 00:04:12.000
Now you're going to notice we got an error in our test.

85
00:04:12.000 --> 00:04:13.002
Let's take a look.

86
00:04:13.002 --> 00:04:15.001
So it was two

87
00:04:15.001 --> 00:04:18.002
and then if we take a look at our switch statement,

88
00:04:18.002 --> 00:04:19.007
you can see what happened.

89
00:04:19.007 --> 00:04:23.005
We encountered the classic problem of fall through.

90
00:04:23.005 --> 00:04:25.009
We didn't specify a break statement.

91
00:04:25.009 --> 00:04:29.006
So we fell down to our default statement

92
00:04:29.006 --> 00:04:33.005
and assigned our Boolean the value of false.

93
00:04:33.005 --> 00:04:36.005
In Java 14, we got the new arrow syntax

94
00:04:36.005 --> 00:04:38.007
that can help us avoid this.

95
00:04:38.007 --> 00:04:40.005
Using the arrow syntax

96
00:04:40.005 --> 00:04:43.000
we just put an arrow to the right of our cases

97
00:04:43.000 --> 00:04:47.002
and point to the code we'd like to execute in the event

98
00:04:47.002 --> 00:04:51.009
that the cases are true in our switch statement.

99
00:04:51.009 --> 00:04:54.003
Now, if we use the arrow syntax,

100
00:04:54.003 --> 00:04:58.006
we do have to use it uniformly across our switch statement.

101
00:04:58.006 --> 00:05:02.002
So we're going to have to modify our default case as well

102
00:05:02.002 --> 00:05:04.008
and now once we put that in place,

103
00:05:04.008 --> 00:05:06.002
you'll see we can go ahead

104
00:05:06.002 --> 00:05:09.009
and successfully execute our switch statement.

105
00:05:09.009 --> 00:05:14.004
So everything we just talked about was a switch statement.

106
00:05:14.004 --> 00:05:19.005
Now Java 14 also gave us the switch expression.

107
00:05:19.005 --> 00:05:21.009
I'm going to go ahead and open our files

108
00:05:21.009 --> 00:05:26.003
that can help us demonstrate the switch expression.

109
00:05:26.003 --> 00:05:29.009
So here you'll see our previous switch statement

110
00:05:29.009 --> 00:05:30.009
and we're going to go ahead

111
00:05:30.009 --> 00:05:34.003
and modify this to make it a switch expression.

112
00:05:34.003 --> 00:05:37.005
The big difference between a switch statement

113
00:05:37.005 --> 00:05:39.007
and a switch expression is

114
00:05:39.007 --> 00:05:44.005
that the switch expression is able to return a result.

115
00:05:44.005 --> 00:05:47.009
So you can see I'm able to assign the results

116
00:05:47.009 --> 00:05:52.002
of our switch expression to our Boolean value.

117
00:05:52.002 --> 00:05:55.003
Now we no longer have to make these assignments

118
00:05:55.003 --> 00:05:57.000
to the Boolean value.

119
00:05:57.000 --> 00:06:01.000
So I'm going to go ahead and remove these assignments

120
00:06:01.000 --> 00:06:04.008
and we just use the arrow syntax to point

121
00:06:04.008 --> 00:06:07.007
to the value we would like to return

122
00:06:07.007 --> 00:06:09.004
from our switch expression

123
00:06:09.004 --> 00:06:11.008
and that's going to cause it to be assigned

124
00:06:11.008 --> 00:06:14.009
to our Boolean variable.

125
00:06:14.009 --> 00:06:17.003
Now another thing that we can do,

126
00:06:17.003 --> 00:06:20.005
because the switch expression does return a result.

127
00:06:20.005 --> 00:06:24.009
We are able to simply put the return statement here

128
00:06:24.009 --> 00:06:29.002
and we don't need to assign it to a variable.

129
00:06:29.002 --> 00:06:32.003
If we would like to add some additional logic

130
00:06:32.003 --> 00:06:34.007
when a case statement is triggered,

131
00:06:34.007 --> 00:06:36.006
we can declare a block

132
00:06:36.006 --> 00:06:38.004
and the block will allow us

133
00:06:38.004 --> 00:06:40.007
to put that additional logic in place.

134
00:06:40.007 --> 00:06:44.001
So I'm going to add a block here for our default case

135
00:06:44.001 --> 00:06:45.004
and at this point,

136
00:06:45.004 --> 00:06:48.003
you'll notice that we have a syntax error

137
00:06:48.003 --> 00:06:53.004
and when we use a switch expression and it includes a block,

138
00:06:53.004 --> 00:06:55.009
we need to use the yield statement

139
00:06:55.009 --> 00:07:01.001
to return the result of executing our switch expression

140
00:07:01.001 --> 00:07:03.003
and then within this block,

141
00:07:03.003 --> 00:07:06.003
we're able to execute our logic as well.

142
00:07:06.003 --> 00:07:10.002
So I'm just going to put a little bit of text in here.

143
00:07:10.002 --> 00:07:12.003
We'll print to the console.

144
00:07:12.003 --> 00:07:17.002
We'll say, is it feeding time yet?

145
00:07:17.002 --> 00:07:21.000
Okay, so there you can see how we can add blocks

146
00:07:21.000 --> 00:07:22.006
to a switch expression.

147
00:07:22.006 --> 00:07:25.006
The important point here is that you need

148
00:07:25.006 --> 00:07:28.003
to add the yield statement to return your result

149
00:07:28.003 --> 00:07:29.009
from within the block.

150
00:07:29.009 --> 00:07:34.000
You cannot use a yield statement in a switch statement.

151
00:07:34.000 --> 00:07:35.009
These are only for switch expressions.

152
00:07:35.009 --> 00:07:37.006
You'll get a compile error

153
00:07:37.006 --> 00:07:40.009
if you attempt to use yield in the switch statement.

154
00:07:40.009 --> 00:07:43.009
Okay, so with that in place, let's go ahead.

155
00:07:43.009 --> 00:07:46.006
We can execute our unit test.

156
00:07:46.006 --> 00:07:48.003
We see that it passes

157
00:07:48.003 --> 00:07:51.003
and that completes our work for the lesson.

158
00:07:51.003 --> 00:07:54.005
So that's a recap of some of the new exciting features

159
00:07:54.005 --> 00:07:56.009
in Java 14 that are available to you

160
00:07:56.009 --> 00:07:59.003
and some that are coming in a little bit.

161
00:07:59.003 --> 00:08:01.009
Take some time to review these examples,

162
00:08:01.009 --> 00:08:04.005
especially the changes to the switch statement

163
00:08:04.005 --> 00:08:06.002
and the switch expressions.

164
00:08:06.002 --> 00:08:08.004
It can be confusing to determine

165
00:08:08.004 --> 00:08:11.000
which one you're working with at certain times.

