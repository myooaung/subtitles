WEBVTT
1
00:00:00.006 --> 00:00:02.009
- [Instructor] Java developers must understand

2
00:00:02.009 --> 00:00:04.001
the new release cadence

3
00:00:04.001 --> 00:00:07.001
because it influences important decisions

4
00:00:07.001 --> 00:00:08.006
regarding the development

5
00:00:08.006 --> 00:00:11.005
and maintenance of Java applications.

6
00:00:11.005 --> 00:00:14.002
Before Java nine and the new cadence,

7
00:00:14.002 --> 00:00:17.004
the JDK was released pretty inconsistently,

8
00:00:17.004 --> 00:00:22.004
with an average of 879 days between releases.

9
00:00:22.004 --> 00:00:25.001
With the new six month release cadence.

10
00:00:25.001 --> 00:00:27.005
It introduced a period where Java

11
00:00:27.005 --> 00:00:31.002
has evolved more rapidly and consistently.

12
00:00:31.002 --> 00:00:34.004
After this change releases have consistently

13
00:00:34.004 --> 00:00:38.006
occurred on average every 181 days.

14
00:00:38.006 --> 00:00:42.001
At first, this pace may sound overwhelming,

15
00:00:42.001 --> 00:00:43.002
but don't worry,

16
00:00:43.002 --> 00:00:45.005
there's a strategy behind the new cadence

17
00:00:45.005 --> 00:00:47.005
and ways to navigate it.

18
00:00:47.005 --> 00:00:50.003
The new cadence is centered around the concept

19
00:00:50.003 --> 00:00:54.006
of feature releases that are delivered every six months.

20
00:00:54.006 --> 00:00:57.007
These releases will be supported for six months

21
00:00:57.007 --> 00:01:01.005
receiving quarterly updates for critical security patches

22
00:01:01.005 --> 00:01:03.004
and bug fixes.

23
00:01:03.004 --> 00:01:04.008
Every three years,

24
00:01:04.008 --> 00:01:08.002
a release will be deemed a long term support release

25
00:01:08.002 --> 00:01:10.003
or LTS for short.

26
00:01:10.003 --> 00:01:13.004
LTS releases will receive support past

27
00:01:13.004 --> 00:01:15.009
the next long term support release,

28
00:01:15.009 --> 00:01:18.000
providing developers time

29
00:01:18.000 --> 00:01:22.001
to make the migration to the next LTS version.

30
00:01:22.001 --> 00:01:24.004
A major benefit of this strategy

31
00:01:24.004 --> 00:01:26.007
is that it creates a predictable cadence

32
00:01:26.007 --> 00:01:28.004
for Java developers.

33
00:01:28.004 --> 00:01:31.003
And it ships new language features faster

34
00:01:31.003 --> 00:01:33.005
than the historical approach.

35
00:01:33.005 --> 00:01:36.007
So when we plot the roadmap for the next few years,

36
00:01:36.007 --> 00:01:38.005
this is how it looks.

37
00:01:38.005 --> 00:01:41.001
We see feature releases every six months,

38
00:01:41.001 --> 00:01:42.009
and then every six releases

39
00:01:42.009 --> 00:01:46.003
are roughly three years in LTS release.

40
00:01:46.003 --> 00:01:50.004
At the moment, Java 11 is the latest LTS release,

41
00:01:50.004 --> 00:01:52.004
making it a target for the majority

42
00:01:52.004 --> 00:01:56.003
of Java developers currently using JDK eight.

43
00:01:56.003 --> 00:01:59.007
The next LTS release would be Java 17

44
00:01:59.007 --> 00:02:02.006
arriving around September 2021.

45
00:02:02.006 --> 00:02:07.008
You'll notice the overlap between Java 11 and Java 17,

46
00:02:07.008 --> 00:02:10.009
which provides a nice migration window.

47
00:02:10.009 --> 00:02:13.006
Ultimately, developers will have to choose

48
00:02:13.006 --> 00:02:16.001
between two strategies.

49
00:02:16.001 --> 00:02:18.004
There's a minor migration strategy,

50
00:02:18.004 --> 00:02:21.005
or you can take the LTS strategy.

51
00:02:21.005 --> 00:02:24.000
If you choose the minor migration strategy,

52
00:02:24.000 --> 00:02:27.001
you'll migrate to the new release every six months

53
00:02:27.001 --> 00:02:29.007
and be able to use the new language features

54
00:02:29.007 --> 00:02:34.000
and benefit from any performance enhancements immediately.

55
00:02:34.000 --> 00:02:37.000
Additionally, you will receive quarterly updates

56
00:02:37.000 --> 00:02:39.002
for security patches.

57
00:02:39.002 --> 00:02:41.009
If you choose the LTS strategy,

58
00:02:41.009 --> 00:02:44.000
the rate of change will be lower

59
00:02:44.000 --> 00:02:47.007
and you will migrate Java versions about every three years.

60
00:02:47.007 --> 00:02:50.006
Sticking to LTS releases will most likely

61
00:02:50.006 --> 00:02:53.005
be the preferred strategy for many enterprises

62
00:02:53.005 --> 00:02:56.003
with large investments in Java.

63
00:02:56.003 --> 00:02:57.007
It is important to understand

64
00:02:57.007 --> 00:02:59.007
these points when making your choice,

65
00:02:59.007 --> 00:03:01.005
because It will lead you to the path

66
00:03:01.005 --> 00:03:03.009
best suited for your situation.

67
00:03:03.009 --> 00:03:07.007
The release cadence is an important migration consideration,

68
00:03:07.007 --> 00:03:09.002
but not the only one.

69
00:03:09.002 --> 00:03:12.000
We'll discuss those in an upcoming lesson.

