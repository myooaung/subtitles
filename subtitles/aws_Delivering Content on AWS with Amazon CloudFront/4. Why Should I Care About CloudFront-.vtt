WEBVTT
1
00:00:01.463 --> 00:00:05.303
In this lesson, we're going to learn about the benefits of using CloudFront.

2
00:00:05.303 --> 00:00:10.316
In the last lesson, we discussed the role and benefit of using a CDN.

3
00:00:10.316 --> 00:00:12.558
We're going to take those principles and apply them to

4
00:00:12.558 --> 00:00:15.045
CloudFront's features and see how they line up.

5
00:00:15.045 --> 00:00:19.148
In my personal opinion, CloudFront has been a great experience.

6
00:00:19.148 --> 00:00:21.797
I have worked with many different types of CDN services.

7
00:00:21.797 --> 00:00:24.897
Nearly all of the use cases that I've come across,

8
00:00:24.897 --> 00:00:27.729
CloudFront has been able to provide a viable solution and I

9
00:00:27.729 --> 00:00:30.443
believe it will provide the same for you.

10
00:00:30.443 --> 00:00:34.321
AWS has built CloudFront into a vast global network.

11
00:00:34.321 --> 00:00:37.783
With 169 points of presence spread across 6 continents,

12
00:00:37.783 --> 00:00:40.965
you can see how many of their Edge locations are closer

13
00:00:40.965 --> 00:00:43.588
to your end users than your origin.

14
00:00:43.588 --> 00:00:48.393
Of those 169 locations, 158 of them are Edge locations,

15
00:00:48.393 --> 00:00:51.520
which is where DNS will point end users to retrieve

16
00:00:51.520 --> 00:00:53.632
data when requesting content.

17
00:00:53.632 --> 00:00:56.614
There are also 11 regional Edge caches.

18
00:00:56.614 --> 00:00:59.474
These are basically mid-tier caches for the Edge locations.

19
00:00:59.474 --> 00:01:04.000
You might want to think of them as a CDN for the CDN.

20
00:01:04.000 --> 00:01:07.450
These regional Edge caches are what actually talk to your origin and

21
00:01:07.450 --> 00:01:10.409
provide central caches for the Edge locations.

22
00:01:10.409 --> 00:01:11.282
This, by design,

23
00:01:11.282 --> 00:01:15.392
prevents all of the 158 Edge locations from making a request to your origin.

24
00:01:15.392 --> 00:01:19.895
Instead, they contact the regional Edge caches.

25
00:01:19.895 --> 00:01:23.601
CloudFront is improving performance and reducing latency by

26
00:01:23.601 --> 00:01:27.275
continuously measuring internet connectivity and performance to find

27
00:01:27.275 --> 00:01:30.052
the best way to route requests to the AWS network.

28
00:01:30.052 --> 00:01:32.622
They take into account performance, load,

29
00:01:32.622 --> 00:01:37.291
operational status, and other factors to deliver the best experience.

30
00:01:37.291 --> 00:01:40.099
CloudFront is also running on the AWS global backbone,

31
00:01:40.099 --> 00:01:43.381
this allows for really fast transmission times between the

32
00:01:43.381 --> 00:01:47.092
Edge locations and other AWS services.

33
00:01:47.092 --> 00:01:49.700
Also, there are network layer optimizations with TCP,

34
00:01:49.700 --> 00:01:54.167
fast open, and keep alive connections have definitely improved performance.

35
00:01:54.167 --> 00:01:58.279
This really helps accelerate both your static and dynamic content.

36
00:01:58.279 --> 00:01:59.220
Now as you know,

37
00:01:59.220 --> 00:02:01.564
most modern websites and applications are a mixture

38
00:02:01.564 --> 00:02:04.150
of dynamic and static content.

39
00:02:04.150 --> 00:02:07.986
Microservices also expose an increasing number of APIs

40
00:02:07.986 --> 00:02:10.077
and requests between components.

41
00:02:10.077 --> 00:02:13.436
CloudFront provides flexibility for optimizing cache behavior

42
00:02:13.436 --> 00:02:16.990
along with network layer optimizations.

43
00:02:16.990 --> 00:02:18.436
CloudFront supports WebSocket,

44
00:02:18.436 --> 00:02:25.174
as well as the HTTP protocol with the following HTTP methods.

45
00:02:25.174 --> 00:02:26.835
This means you can improve the performance of

46
00:02:26.835 --> 00:02:29.186
dynamic websites that have web forms, logins,

47
00:02:29.186 --> 00:02:33.024
and other features that upload data from the end user.

48
00:02:33.024 --> 00:02:35.340
It also means through route 53,

49
00:02:35.340 --> 00:02:37.842
you can use a single domain name to deliver your

50
00:02:37.842 --> 00:02:38.959
whole website through CloudFront,

51
00:02:38.959 --> 00:02:43.701
thereby accelerating both the download and the upload parts of the website.

52
00:02:43.701 --> 00:02:45.780
As they've grown and improved the network,

53
00:02:45.780 --> 00:02:49.994
cache retention has emerged as a key contributor to performance.

54
00:02:49.994 --> 00:02:53.256
The CDN is architected to keep objects longer in

55
00:02:53.256 --> 00:02:56.291
cache and to reduce cache churn.

56
00:02:56.291 --> 00:02:59.308
Techniques like tiered caching and deduplication in

57
00:02:59.308 --> 00:03:02.476
cache help maximize cache retention.

58
00:03:02.476 --> 00:03:03.415
The great feature of CloudFront,

59
00:03:03.415 --> 00:03:08.040
as well as any other component of AWS is the pay-as-you-go pricing.

60
00:03:08.040 --> 00:03:10.675
You pay only for what you use.

61
00:03:10.675 --> 00:03:15.531
So there is no minimum fee and you don't pay for any unused services.

62
00:03:15.531 --> 00:03:18.653
If you're using AWS origins, such as S3,

63
00:03:18.653 --> 00:03:21.463
EC2, or elastic load balancing,

64
00:03:21.463 --> 00:03:25.593
you don't pay for any data transferred between these services in CloudFront.

65
00:03:25.593 --> 00:03:27.679
Most services do not charge for data transferred,

66
00:03:27.679 --> 00:03:30.850
as long as it's within the AWS network.

67
00:03:30.850 --> 00:03:35.491
As stated before, CDNs, in general, reduce traffic to your origins,

68
00:03:35.491 --> 00:03:37.499
but with CloudFront's regional Edge caches,

69
00:03:37.499 --> 00:03:41.145
there are even fewer nodes that need to make requests to your origin.

70
00:03:41.145 --> 00:03:42.982
Now if you're already using AWS origins,

71
00:03:42.982 --> 00:03:46.314
then that's not really a big deal from a cost perspective because you

72
00:03:46.314 --> 00:03:50.278
already have the free data transfers inside the AWS network.

73
00:03:50.278 --> 00:03:53.237
This cost reduction will come into play if you use an

74
00:03:53.237 --> 00:03:56.061
origin outside of the AWS network.

75
00:03:56.061 --> 00:03:58.926
Your web applications often need to contend with spikes in

76
00:03:58.926 --> 00:04:01.672
traffic during peak periods of activity.

77
00:04:01.672 --> 00:04:04.848
For example, retail websites will have spikes during a sale,

78
00:04:04.848 --> 00:04:08.170
but drop off dramatically afterwards.

79
00:04:08.170 --> 00:04:08.930
By using CloudFront,

80
00:04:08.930 --> 00:04:13.269
you can cache your content at the Edge location and reduce the workload on your

81
00:04:13.269 --> 00:04:17.394
origin by only fetching content from the origin when needed.

82
00:04:17.394 --> 00:04:20.943
This reduced workload on your origin helps you increase

83
00:04:20.943 --> 00:04:23.681
the availability of your application.

84
00:04:23.681 --> 00:04:26.606
CloudFront also allows you to set up multiple origins to

85
00:04:26.606 --> 00:04:28.744
enable redundancy to your backend.

86
00:04:28.744 --> 00:04:32.495
You can use CloudFront's origin failover capability to

87
00:04:32.495 --> 00:04:35.582
automatically serve your content from a secondary origin

88
00:04:35.582 --> 00:04:38.699
when your primary is unavailable.

89
00:04:38.699 --> 00:04:42.054
The origins you set up with origin failover can be any

90
00:04:42.054 --> 00:04:45.435
combination of the AWS origins like EC2 instances,

91
00:04:45.435 --> 00:04:46.686
S3 buckets,

92
00:04:46.686 --> 00:04:53.907
or even non-AWS origins like an HTTP server running in another cloud provider.

93
00:04:53.907 --> 00:04:56.520
while we won't be going into much detail during this

94
00:04:56.520 --> 00:05:01.529
course on the following services, it's worth mentioning that AWS's shield,

95
00:05:01.529 --> 00:05:03.549
web application firewall,

96
00:05:03.549 --> 00:05:07.566
as well as route 53 all work together to create a flexible,

97
00:05:07.566 --> 00:05:11.370
layered security perimeter against multiple types of attacks

98
00:05:11.370 --> 00:05:14.589
including network and application layer DDoS.

99
00:05:14.589 --> 00:05:18.669
All of these services are available at the AWS Edge and provide a

100
00:05:18.669 --> 00:05:21.688
reliable security perimeter for your website.

101
00:05:21.688 --> 00:05:25.560
With CloudFront as the front door to your application and infrastructure,

102
00:05:25.560 --> 00:05:30.951
you're moving the primary attack service away from your critical infrastructure.

103
00:05:30.951 --> 00:05:32.946
With CloudFront, you can deliver your content,

104
00:05:32.946 --> 00:05:33.461
APIs,

105
00:05:33.461 --> 00:05:38.666
or applications via SSL or TLS and advance SSL features

106
00:05:38.666 --> 00:05:41.747
are enabled automatically for you.

107
00:05:41.747 --> 00:05:46.255
You can use AWS Certificate Manager to easily create a custom SSL

108
00:05:46.255 --> 00:05:50.228
certificate and deploy to your CloudFront distribution.

109
00:05:50.228 --> 00:05:53.334
ACM automatically handles certificate renewal and

110
00:05:53.334 --> 00:05:56.079
eliminates the manual renewal process.

111
00:05:56.079 --> 00:05:56.561
Additionally,

112
00:05:56.561 --> 00:06:01.046
CloudFront provides a number of SSL optimizations and advanced capabilities,

113
00:06:01.046 --> 00:06:06.562
such as OCSP stapling, session tickets perfect for secrecy,

114
00:06:06.562 --> 00:06:10.941
TLS protocol enhancements, and field level encryption.

115
00:06:10.941 --> 00:06:14.566
You can restrict access to your content through a number of capabilities.

116
00:06:14.566 --> 00:06:17.134
With signed URLs and signed cookies,

117
00:06:17.134 --> 00:06:19.967
you can support token authentication to restrict

118
00:06:19.967 --> 00:06:22.744
access to only authenticated viewers.

119
00:06:22.744 --> 00:06:23.660
Through geo restriction,

120
00:06:23.660 --> 00:06:26.245
you can prevent users in specific geographic

121
00:06:26.245 --> 00:06:28.784
locations from accessing your content.

122
00:06:28.784 --> 00:06:32.360
With OAI, or origin access identity,

123
00:06:32.360 --> 00:06:37.723
you can restrict access to an S3 bucket to only be accessible from CloudFront.

124
00:06:37.723 --> 00:06:42.078
CloudFront provides an API to configure and maintain your distributions.

125
00:06:42.078 --> 00:06:45.246
In addition, you can access API with a number of tools,

126
00:06:45.246 --> 00:06:48.861
such as AWS CloudFormation, HashiCorp's Terraform,

127
00:06:48.861 --> 00:06:52.728
and other configuration management or orchestration tools.

128
00:06:52.728 --> 00:06:59.578
We will install the AWS CLI in order to show you how to access this API.

129
00:06:59.578 --> 00:07:02.236
Distributions can be configured with multiple behaviors,

130
00:07:02.236 --> 00:07:06.611
which define how to process your request and what features will be applied.

131
00:07:06.611 --> 00:07:10.312
You are able to control how CloudFront caches,

132
00:07:10.312 --> 00:07:14.747
communicates with your origin, customize what headers and metadata are forward,

133
00:07:14.747 --> 00:07:17.091
and other customizations.

134
00:07:17.091 --> 00:07:20.155
CloudFront can also detect the country level location of a requesting

135
00:07:20.155 --> 00:07:24.055
user for further customization of the response.

136
00:07:24.055 --> 00:07:27.307
Lambda@Edge puts your code running closer to the users by

137
00:07:27.307 --> 00:07:29.598
running your functions at the Edge locations.

138
00:07:29.598 --> 00:07:31.820
For web and mobile requests,

139
00:07:31.820 --> 00:07:36.069
the compute request from your users can be delivered closer to

140
00:07:36.069 --> 00:07:39.642
them improving their overall experience.

141
00:07:39.642 --> 00:07:39.941
Alright,

142
00:07:39.941 --> 00:07:43.529
well I think we have touched on all principles we called out

143
00:07:43.529 --> 00:07:45.661
previously as important elements of a CDN,

144
00:07:45.661 --> 00:07:48.448
and you should now understand what CloudFront is doing

145
00:07:48.448 --> 00:07:56.000
to meet all of those requirements. Let's move on to setting up your tools so you can begin using CloudFront.

