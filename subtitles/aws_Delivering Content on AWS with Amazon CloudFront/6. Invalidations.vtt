WEBVTT
1
00:00:02.140 --> 00:00:04.740
Now that we have CloudFront cashing our website,

2
00:00:04.740 --> 00:00:08.640
what would happen if we need to update some of our content?

3
00:00:08.640 --> 00:00:13.150
For example, we need to change some text or update an image file.

4
00:00:13.150 --> 00:00:16.360
If we upload our updated content to our origin,

5
00:00:16.360 --> 00:00:19.430
those changes only reside there,

6
00:00:19.430 --> 00:00:24.280
either until cache expires by itself or we step in and

7
00:00:24.280 --> 00:00:27.980
notify CloudFront to update its cached copy.

8
00:00:27.980 --> 00:00:29.060
In this lesson,

9
00:00:29.060 --> 00:00:36.440
we will discuss updating cache copies either by invalidation or versioning.

10
00:00:36.440 --> 00:00:38.670
If you need to refresh or remove a file from

11
00:00:38.670 --> 00:00:41.120
CloudFront edge caches before it expires,

12
00:00:41.120 --> 00:00:42.430
you can invalidate the file.

13
00:00:42.430 --> 00:00:47.640
The next time a viewer requests the file due to the file being invalidated,

14
00:00:47.640 --> 00:00:52.440
CloudFront returns to the origin to fetch the latest version of the file.

15
00:00:52.440 --> 00:00:55.160
If you want to update your files frequently,

16
00:00:55.160 --> 00:00:58.740
it is recommended that you primarily use file versioning.

17
00:00:58.740 --> 00:01:02.960
When the request reaches the edge caches, it won't have the new file.

18
00:01:02.960 --> 00:01:05.430
CloudFront will count it as a cache miss and pull

19
00:01:05.430 --> 00:01:08.120
the new version from your origin.

20
00:01:08.120 --> 00:01:10.840
Let's update our CSS file.

21
00:01:10.840 --> 00:01:12.740
If we load our website in our browser,

22
00:01:12.740 --> 00:01:20.140
we can see that our CSS file is at the path /css/style.css

23
00:01:20.140 --> 00:01:23.340
and loaded from the CloudFront edge caches.

24
00:01:23.340 --> 00:01:25.460
You will see that we have a last modified date,

25
00:01:25.460 --> 00:01:28.300
which is much older than our current request date.

26
00:01:28.300 --> 00:01:31.660
Let's invalidate this file so we can load the latest copy in our browser.

27
00:01:31.660 --> 00:01:34.180
To invalidate files,

28
00:01:34.180 --> 00:01:37.880
you can specify either the path for the individual file

29
00:01:37.880 --> 00:01:39.820
or a path that ends in a wildcard.

30
00:01:39.820 --> 00:01:41.960
On your screen,

31
00:01:41.960 --> 00:01:46.060
you can see that AWS provides a few examples of how they should be entered.

32
00:01:46.060 --> 00:01:50.550
Within the CloudFront service within the console,

33
00:01:50.550 --> 00:01:54.540
in your distribution, if you head to the Invalidations tab,

34
00:01:54.540 --> 00:01:55.830
you can create a new invalidation.

35
00:01:55.830 --> 00:01:58.670
Click Create Invalidation.

36
00:01:58.670 --> 00:02:02.730
Since we want to invalidate our CSS file,

37
00:02:02.730 --> 00:02:08.820
and we know that the path is /css/style.css,

38
00:02:08.820 --> 00:02:10.430
we could invalidate this file directly.

39
00:02:10.430 --> 00:02:13.560
If we had other CSS files to invalidate,

40
00:02:13.560 --> 00:02:21.380
we could use /css/* or, well, if we wanted to invalidate everything,

41
00:02:21.380 --> 00:02:23.920
we could just use /*.

42
00:02:23.920 --> 00:02:29.520
We won't do that because we do not want to refresh everything, just our CSS.

43
00:02:29.520 --> 00:02:34.120
You can submit a specified number of invalidation paths each month for free.

44
00:02:34.120 --> 00:02:38.140
If you submit more than the allotted number of invalidation paths in a month,

45
00:02:38.140 --> 00:02:43.020
you pay a fee for each additional invalidation path that you submit.

46
00:02:43.020 --> 00:02:47.050
We'll touch more on cost in a moment.

47
00:02:47.050 --> 00:02:52.220
For now, click Invalidate, and we can now see that it's in progress.

48
00:02:52.220 --> 00:02:52.980
Right now,

49
00:02:52.980 --> 00:02:55.920
CloudFront is notifying every edge cache to invalidate

50
00:02:55.920 --> 00:02:57.600
the file they have in their cache.

51
00:02:57.600 --> 00:03:01.200
Once they are invalidated, when we refresh the page,

52
00:03:01.200 --> 00:03:06.120
the edge cache will grab the latest version from our origin.

53
00:03:06.120 --> 00:03:09.700
If you use the AWS Command Line Interface for invalidating files,

54
00:03:09.700 --> 00:03:15.520
you can use the following command.

55
00:03:15.520 --> 00:03:18.550
If you specify a path that includes the wildcard,

56
00:03:18.550 --> 00:03:23.160
you must use quotes around the path.

57
00:03:23.160 --> 00:03:25.720
If you're invalidating files individually,

58
00:03:25.720 --> 00:03:29.490
you can have invalidation requests for up to 3000 files per

59
00:03:29.490 --> 00:03:32.970
distribution in progress at any one time.

60
00:03:32.970 --> 00:03:37.420
This can be one invalidation request for up to 3000 files,

61
00:03:37.420 --> 00:03:40.920
up to 3000 requests for one file each, or any

62
00:03:40.920 --> 00:03:44.320
combination that doesn't exceed 3000 files.

63
00:03:44.320 --> 00:03:45.530
For example,

64
00:03:45.530 --> 00:03:50.070
you can submit 30 invalidation requests that invalidate a hundred files

65
00:03:50.070 --> 00:03:54.520
each. As long as all 30 invalidation requests are still going, you

66
00:03:54.520 --> 00:03:57.820
can't submit any more invalidation requests.

67
00:03:57.820 --> 00:03:59.220
If you exceed the limit,

68
00:03:59.220 --> 00:04:04.823
CloudFront will return an error message. If you're using the wildcard,

69
00:04:04.823 --> 00:04:10.853
you can have requests for up to 15 invalidation paths in progress at one time.

70
00:04:10.853 --> 00:04:14.873
You can also have invalidation requests for up to 3000 individual

71
00:04:14.873 --> 00:04:19.303
files per distribution in progress at the same time. The limit on

72
00:04:19.303 --> 00:04:23.143
wildcard invalidation requests are independent of the limit on

73
00:04:23.143 --> 00:04:28.380
invalidating files individually. The first 1000 invalidation paths

74
00:04:28.380 --> 00:04:30.853
that you submit per month are free.

75
00:04:30.853 --> 00:04:35.453
You pay for each invalidation path over 1000 in a month.

76
00:04:35.453 --> 00:04:38.983
An invalidation path can be for a single file, such as

77
00:04:38.983 --> 00:04:49.853
css/style.css, or for multiple files, such as /css/*. A path that

78
00:04:49.853 --> 00:04:53.523
includes the star wildcard counts as one path,

79
00:04:53.523 --> 00:04:56.063
even if it causes CloudFront to invalidate thousands of

80
00:04:56.063 --> 00:04:58.823
files. At the time I'm recording this video,

81
00:04:58.823 --> 00:05:04.403
CloudFront lists a price for five thousandths of a dollar per invalidation.

82
00:05:04.403 --> 00:05:07.783
The limit of 1000 invalidation paths per month applies to the

83
00:05:07.783 --> 00:05:11.223
total number invalidation paths across all of the distributions

84
00:05:11.223 --> 00:05:15.793
you create under one AWS account, For example,

85
00:05:15.793 --> 00:05:19.703
if you were to create three distributions and then submit 600

86
00:05:19.703 --> 00:05:22.843
invalidation paths for each distribution in a given month

87
00:05:22.843 --> 00:05:26.393
equaling a total of 1800 validation paths,

88
00:05:26.393 --> 00:05:31.653
AWS will charges for 800 invalidation paths in that month.

89
00:05:31.653 --> 00:05:35.643
I mean, it's only $4 US, but it can add up,

90
00:05:35.643 --> 00:05:38.063
especially if you have a lot of distributions and

91
00:05:38.063 --> 00:05:40.553
are deploying on a frequent cycle.

92
00:05:40.553 --> 00:05:44.353
Okay, now that we know that AWS sets limits on invalidations,

93
00:05:44.353 --> 00:05:46.670
let's talk about how we get around this. Versioning

94
00:05:46.670 --> 00:05:49.243
our files is a much better practice,

95
00:05:49.243 --> 00:05:53.703
since it reduces the need for regular invalidation requests.

96
00:05:53.703 --> 00:05:55.793
Let's walk through the following scenario.

97
00:05:55.793 --> 00:05:57.893
If we version our static assets,

98
00:05:57.893 --> 00:06:01.935
we can include the version in the references within our HTML.

99
00:06:01.935 --> 00:06:08.465
If before we had a file on our origin located at css/style.css, but

100
00:06:08.465 --> 00:06:16.205
now if we called it css/styleâ€‘1.0.css, any further updates could

101
00:06:16.205 --> 00:06:18.975
use an incriminating version number.

102
00:06:18.975 --> 00:06:22.385
Let's update our HTML to reference this new version number.

103
00:06:22.385 --> 00:06:24.875
Since our HTML will not be a version file,

104
00:06:24.875 --> 00:06:30.185
we will need to invalidate it, but no need to invalidate our CSS.

105
00:06:30.185 --> 00:06:38.035
Let's create our invalidation for our index.html.

106
00:06:38.035 --> 00:06:45.335
Once that completes, we will refresh our page.

107
00:06:45.335 --> 00:06:48.965
As you can see, when we first refresh the root of our website,

108
00:06:48.965 --> 00:06:53.935
the load time has jumped 400% to nearly 5 seconds.

109
00:06:53.935 --> 00:06:56.035
Why is it taking so long?

110
00:06:56.035 --> 00:06:59.835
Well, if you look at the load time for your HTML,

111
00:06:59.835 --> 00:07:04.465
it's one of the longest loading items on our timeline at nearly 2 seconds.

112
00:07:04.465 --> 00:07:07.435
Let's see why it took so long.

113
00:07:07.435 --> 00:07:08.585
Ah,

114
00:07:08.585 --> 00:07:14.435
a miss from CloudFront, because we needed to pull the latest file from origin.

115
00:07:14.435 --> 00:07:18.055
What else took a particularly long time? Ah, and now

116
00:07:18.055 --> 00:07:21.135
we see our new version CSS file.

117
00:07:21.135 --> 00:07:25.035
We didn't need to invalidate the CSS file because our new HTML

118
00:07:25.035 --> 00:07:28.655
referenced this new file, which got pulled from origin and should now

119
00:07:28.655 --> 00:07:34.015
be cached. After a new refresh, and we see our load time has returned

120
00:07:34.015 --> 00:07:40.135
to our expected baseline, our index.html now has a great response time,

121
00:07:40.135 --> 00:07:45.515
and so does our styleâ€‘1.0.css.

122
00:07:45.515 --> 00:07:50.135
As you can see, removing items from our cache can provide a few benefits,

123
00:07:50.135 --> 00:07:54.735
one being that we can easily update our content in several different ways.

124
00:07:54.735 --> 00:07:59.735
Two, we're able to perform updates while maintaining the user experience.

125
00:07:59.735 --> 00:08:03.065
We now know how to remove files from our cache either through an

126
00:08:03.065 --> 00:08:07.270
invalidation or by adding cacheâ€‘busting versioning to our files.

127
00:08:07.270 --> 00:08:14.000
And due to limits and cost, you should now understand when and why to use either method.

