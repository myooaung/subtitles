WEBVTT
1
00:00:00.000 --> 00:00:05.780
Well, there you have it, you are now a fully-trained CloudFront admin.

2
00:00:05.780 --> 00:00:08.617
Alright, maybe not fully trained, but by now,

3
00:00:08.617 --> 00:00:12.033
you should have a well-rounded understanding of the basics of

4
00:00:12.033 --> 00:00:15.596
implementing and administering a new CloudFront distribution.

5
00:00:15.596 --> 00:00:16.132
From here,

6
00:00:16.132 --> 00:00:18.484
you should be able to create your own distributions

7
00:00:18.484 --> 00:00:21.794
in front of your own web content.

8
00:00:21.794 --> 00:00:26.853
If you remember from module two, we discussed the benefits of a CDN.

9
00:00:26.853 --> 00:00:29.922
I mean, look at the progress we've made.

10
00:00:29.922 --> 00:00:34.232
We have taken a media rich website and moved the average load time from

11
00:00:34.232 --> 00:00:38.977
around 5 seconds and reduced that to around 1 second.

12
00:00:38.977 --> 00:00:42.351
We have begun compressing our files upon request saving us and

13
00:00:42.351 --> 00:00:45.414
our visitors some unnecessary bandwidth.

14
00:00:45.414 --> 00:00:48.173
We have prevented our site from going down if we have any

15
00:00:48.173 --> 00:00:50.974
unexpected issues at the origin due to proper caching

16
00:00:50.974 --> 00:00:53.015
preserving the user experience.

17
00:00:53.015 --> 00:00:55.667
And finally, with the help of our distribution's behaviors,

18
00:00:55.667 --> 00:01:00.611
we have migrated from HTTP only to forced HTTPS

19
00:01:00.611 --> 00:01:03.326
helping secure our visitors traffic.

20
00:01:03.326 --> 00:01:05.780
I think we are taking full advantage of the benefits

21
00:01:05.780 --> 00:01:09.197
of using CloudFront as our CDN.

22
00:01:09.197 --> 00:01:12.363
You have learned how to do this because we focused on measuring our

23
00:01:12.363 --> 00:01:15.657
existing delivery performance to determine our baselines,

24
00:01:15.657 --> 00:01:18.387
we created a CloudFront distribution,

25
00:01:18.387 --> 00:01:21.674
and then tested CloudFront to discover how load times have changed,

26
00:01:21.674 --> 00:01:25.301
and we've touched on how we keep our distribution serving the latest versions

27
00:01:25.301 --> 00:01:29.427
of our web content through versioning and invalidations.

28
00:01:29.427 --> 00:01:30.927
While we created our CloudFront distribution,

29
00:01:30.927 --> 00:01:33.732
we learned a lot of new vocabulary as well.

30
00:01:33.732 --> 00:01:37.283
A few important definitions to remember are distribution,

31
00:01:37.283 --> 00:01:41.133
the collection of all of our origins and all of the

32
00:01:41.133 --> 00:01:45.041
associated caching and traffic handling rules.

33
00:01:45.041 --> 00:01:45.957
Next is Origin.

34
00:01:45.957 --> 00:01:50.129
Now origin is where you direct CloudFront to send requests for your content.

35
00:01:50.129 --> 00:01:54.097
It's where your content lives.

36
00:01:54.097 --> 00:01:55.142
On the other side,

37
00:01:55.142 --> 00:01:57.861
we have behavior and those are your rules associated with how

38
00:01:57.861 --> 00:02:01.636
CloudFront interacts with your origins.

39
00:02:01.636 --> 00:02:04.664
And finally, we have invalidations, and if you remember,

40
00:02:04.664 --> 00:02:08.282
that's how we tell CloudFront no longer use its cached copy,

41
00:02:08.282 --> 00:02:11.320
retrieve a new version from the origin.

42
00:02:11.320 --> 00:02:12.209
Well, in this module,

43
00:02:12.209 --> 00:02:15.830
we focused on getting CloudFront set up in front of our content.

44
00:02:15.830 --> 00:02:16.810
In the next module,

45
00:02:16.810 --> 00:02:19.401
we will dig deeper into the advanced features of CloudFront

46
00:02:19.401 --> 00:02:26.000
to learn what else it can do for us other than just caching and distributing our content.

