1
1

00:00:00,120  -->  00:00:03,030
<v ->So let's look at the security of the API Gateway.</v>
2

2

00:00:03,030  -->  00:00:06,060
So if we have a public rest API we can define a
3

3

00:00:06,060  -->  00:00:07,440
resource policy.
4

4

00:00:07,440  -->  00:00:09,808
In this resource policy, the first part is allowing
5

5

00:00:09,808  -->  00:00:13,500
anyone to execute an API on their public rest API,
6

6

00:00:13,500  -->  00:00:15,120
but then we have a deny statement.
7

7

00:00:15,120  -->  00:00:18,600
And that deny statement is saying that we deny anyone
8

8

00:00:18,600  -->  00:00:22,350
who doesn't have a source IP that is specified in there.
9

9

00:00:22,350  -->  00:00:24,600
So effectively we restricted access
10

10

00:00:24,600  -->  00:00:28,920
from specific public IP addresses to our public rest API.
11

11

00:00:28,920  -->  00:00:30,930
That's the number one way to do security.
12

12

00:00:30,930  -->  00:00:32,520
The second way of course as I told you,
13

13

00:00:32,520  -->  00:00:34,740
is that if you have a private API
14

14

00:00:34,740  -->  00:00:38,640
then you must use a VPC interface endpoint to access it.
15

15

00:00:38,640  -->  00:00:41,118
You can not access it without a VPC interface endpoint
16

16

00:00:41,118  -->  00:00:45,510
and here using a resource policy we can define that
17

17

00:00:45,510  -->  00:00:49,379
the private API must only be accessed through a specific
18

18

00:00:49,379  -->  00:00:51,783
VPC interface endpoint.
19

19

00:00:52,710  -->  00:00:53,970
Another question you may have
20

20

00:00:53,970  -->  00:00:58,470
is how to access an API Gateway, private API
21

21

00:00:58,470  -->  00:01:00,990
that sits in another account from..
22

22

00:01:00,990  -->  00:01:03,600
For example, an account A with an EC2 instance
23

23

00:01:03,600  -->  00:01:05,400
in a private subnet.
24

24

00:01:05,400  -->  00:01:07,830
So the question is, how can we do it?
25

25

00:01:07,830  -->  00:01:10,260
And you may think of ideas
26

26

00:01:10,260  -->  00:01:12,780
but actually the answer is very simple.
27

27

00:01:12,780  -->  00:01:16,530
All you have to do is you create a VPC interface endpoint
28

28

00:01:16,530  -->  00:01:19,170
in the private subnet of account A.
29

29

00:01:19,170  -->  00:01:22,110
So that's number one and this allows the EC2 instance
30

30

00:01:22,110  -->  00:01:25,830
to access the API Gateway service over all and for this,
31

31

00:01:25,830  -->  00:01:28,200
no VPC peering is needed what so ever.
32

32

00:01:28,200  -->  00:01:29,550
That's the pretty cool part about it.
33

33

00:01:29,550  -->  00:01:32,280
Thanks to the VPC endpoint we just accessed directly
34

34

00:01:32,280  -->  00:01:35,520
the API Gateway service and then we define a resource
35

35

00:01:35,520  -->  00:01:37,980
policy on our private API.
36

36

00:01:37,980  -->  00:01:40,979
So that we're saying, Hey, the only way to access it
37

37

00:01:40,979  -->  00:01:45,210
is through the VPC endpoint that is deployed in account A.
38

38

00:01:45,210  -->  00:01:48,248
Therefore we can deploy a private API in account B
39

39

00:01:48,248  -->  00:01:51,450
and then thanks to the resource policy, only guarantee
40

40

00:01:51,450  -->  00:01:55,140
that the account A through the VPC endpoint of account A
41

41

00:01:55,140  -->  00:01:56,400
can access it.
42

42

00:01:56,400  -->  00:01:59,640
And the cool thing about it again, no VPC peering is needed.
43

43

00:01:59,640  -->  00:02:02,100
That is a common exam question.
44

44

00:02:02,100  -->  00:02:05,250
Let's also look at throttling on the API Gateway.
45

45

00:02:05,250  -->  00:02:07,920
So you have account limits and the idea is that the
46

46

00:02:07,920  -->  00:02:10,010
API Gateway is going to throttle your request at
47

47

00:02:10,010  -->  00:02:13,710
10,000 request per second across all your API's.
48

48

00:02:13,710  -->  00:02:17,130
You can increase these sub limits upon request
49

49

00:02:17,130  -->  00:02:19,770
but in case you see some throttling, you're going to get
50

50

00:02:19,770  -->  00:02:24,770
a retriable error of HTP code 429 called; too many requests.
51

51

00:02:25,590  -->  00:02:29,430
You can also decide to set stage limits and method limits
52

52

00:02:29,430  -->  00:02:32,490
to improve the performance and spread out the request
53

53

00:02:32,490  -->  00:02:34,200
across all your API's.
54

54

00:02:34,200  -->  00:02:37,650
Or if you wanted to you can define a usage plan in the API
55

55

00:02:37,650  -->  00:02:41,040
Gateway to give API keys to your customer
56

56

00:02:41,040  -->  00:02:42,990
and have some throttling mechanism
57

57

00:02:42,990  -->  00:02:45,450
on the per customer basis.
58

58

00:02:45,450  -->  00:02:49,230
Just remember, that one API Gateway that is overloaded
59

59

00:02:49,230  -->  00:02:52,269
and not limited can cause all the other API's
60

60

00:02:52,269  -->  00:02:55,290
deployed within the API Gateway to be throttled.
61

61

00:02:55,290  -->  00:02:57,810
So that's something to take note of.
62

62

00:02:57,810  -->  00:03:00,060
All right, that's it. I hope you liked it
63

63

00:03:00,060  -->  00:03:02,010
and I will see you in the next lecture.
