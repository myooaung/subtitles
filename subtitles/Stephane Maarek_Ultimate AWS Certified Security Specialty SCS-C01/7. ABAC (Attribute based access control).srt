1
1

00:00:00,270  -->  00:00:01,980
<v Instructor>So let's look at ABAC</v>
2

2

00:00:01,980  -->  00:00:04,890
or Attributes Based Access Control.
3

3

00:00:04,890  -->  00:00:08,340
So this is a newer kind of way of doing access in AWS
4

4

00:00:08,340  -->  00:00:09,990
but it makes a lot of sense.
5

5

00:00:09,990  -->  00:00:12,000
So let's say you have a lot of users
6

6

00:00:12,000  -->  00:00:14,700
and a lot of AWS resources.
7

7

00:00:14,700  -->  00:00:17,700
Where you can do is that you can authorize each user
8

8

00:00:17,700  -->  00:00:19,980
to access specific resources
9

9

00:00:19,980  -->  00:00:23,340
but that can become very complicated to manage.
10

10

00:00:23,340  -->  00:00:26,370
The other option is to use fine word permissions based
11

11

00:00:26,370  -->  00:00:27,750
on user attributes.
12

12

00:00:27,750  -->  00:00:31,230
So for example, you say a user belongs to a department,
13

13

00:00:31,230  -->  00:00:33,780
a user belongs to a specific job,
14

14

00:00:33,780  -->  00:00:35,970
a user belongs to a specific team.
15

15

00:00:35,970  -->  00:00:38,670
And then instead of creating IAM roles for every team,
16

16

00:00:38,670  -->  00:00:41,010
you're going to use attributes based control
17

17

00:00:41,010  -->  00:00:42,060
to group attributes
18

18

00:00:42,060  -->  00:00:45,630
and identify which resources a set of user can access.
19

19

00:00:45,630  -->  00:00:47,820
How do we have these attributes?
20

20

00:00:47,820  -->  00:00:49,650
Well, by using tags.
21

21

00:00:49,650  -->  00:00:51,390
And so we are going to tag the users,
22

22

00:00:51,390  -->  00:00:53,310
and we're going to tag the resources,
23

23

00:00:53,310  -->  00:00:55,620
and we're going to create an IAM permissions
24

24

00:00:55,620  -->  00:00:57,390
to see if they match.
25

25

00:00:57,390  -->  00:01:00,600
So this is very helpful in rapidly growing environment
26

26

00:01:00,600  -->  00:01:02,340
because you can add resources and tag them
27

27

00:01:02,340  -->  00:01:06,090
and don't have to edit the IAM policies.
28

28

00:01:06,090  -->  00:01:08,310
So let's take the example of these two resources
29

29

00:01:08,310  -->  00:01:10,470
are tagged in red, these are tagged in green,
30

30

00:01:10,470  -->  00:01:12,540
and then the last ones are tagged in blue.
31

31

00:01:12,540  -->  00:01:15,120
And then we tag the user in red, in green,
32

32

00:01:15,120  -->  00:01:18,210
and in blue with the correct IAM policy.
33

33

00:01:18,210  -->  00:01:20,400
Then we make sure that the user A,
34

34

00:01:20,400  -->  00:01:22,650
can only access the resources tagged in red.
35

35

00:01:22,650  -->  00:01:26,460
The user B, tagged in green and the user C, tagged in blue.
36

36

00:01:26,460  -->  00:01:29,670
And that scales a lot and it's much easier.
37

37

00:01:29,670  -->  00:01:31,200
So to give you a concrete example
38

38

00:01:31,200  -->  00:01:33,480
of how tags are used for security,
39

39

00:01:33,480  -->  00:01:35,910
let's take an example of an EC2 instance.
40

40

00:01:35,910  -->  00:01:39,060
And this EC2 instance has an owner, user C,
41

41

00:01:39,060  -->  00:01:42,750
and another tag called Access Project equals Star Projects.
42

42

00:01:42,750  -->  00:01:45,090
Now we're going to create an IAM policy
43

43

00:01:45,090  -->  00:01:48,360
and the IAM policy is going to be attached to all the users.
44

44

00:01:48,360  -->  00:01:50,880
And here we're saying that there is a condition
45

45

00:01:50,880  -->  00:01:54,120
in this IAM policy for start and stop instances
46

46

00:01:54,120  -->  00:01:56,790
and we're saying that we want the resource tag
47

47

00:01:56,790  -->  00:02:00,450
of key owner to be equals to the username of the user
48

48

00:02:00,450  -->  00:02:05,100
and also want to have the access project tag to be equal
49

49

00:02:05,100  -->  00:02:08,760
to the same principle tag that has attached
50

50

00:02:08,760  -->  00:02:11,340
to the user for the key access projects.
51

51

00:02:11,340  -->  00:02:12,720
So it's a bit more complicated.
52

52

00:02:12,720  -->  00:02:14,730
We have IAM policy variables in there
53

53

00:02:14,730  -->  00:02:16,380
but basically what that means is that
54

54

00:02:16,380  -->  00:02:19,230
if you do attach the same tag,
55

55

00:02:19,230  -->  00:02:23,340
Access Project equals Star Project to user C,
56

56

00:02:23,340  -->  00:02:26,490
then automatically it's going to be allowed to access
57

57

00:02:26,490  -->  00:02:29,880
the EC2 instance because the access projects tag matches
58

58

00:02:29,880  -->  00:02:32,370
for user C and the EC2 instance.
59

59

00:02:32,370  -->  00:02:35,190
But then for user A or user B, which have a different tag,
60

60

00:02:35,190  -->  00:02:38,640
then it doesn't match and the access is denied.
61

61

00:02:38,640  -->  00:02:41,280
So if you wanna compare ABAC and RBAC,
62

62

00:02:41,280  -->  00:02:44,310
so role based access control will define fine grain
63

63

00:02:44,310  -->  00:02:46,770
permissions based on the user role or function.
64

64

00:02:46,770  -->  00:02:49,350
So you have administrators or DB admins or DevOps.
65

65

00:02:49,350  -->  00:02:50,700
And you can create different policies
66

66

00:02:50,700  -->  00:02:52,320
for different job functions.
67

67

00:02:52,320  -->  00:02:55,290
Disadvantage that when you want to create new resources,
68

68

00:02:55,290  -->  00:02:58,050
you may have to update your policies.
69

69

00:02:58,050  -->  00:03:01,860
If you're using attribute based access controls using tags,
70

70

00:03:01,860  -->  00:03:04,860
then the advantage is that you can scale permissions easily
71

71

00:03:04,860  -->  00:03:07,500
because you can just create new resources,
72

72

00:03:07,500  -->  00:03:09,750
tag them appropriately, and you don't need to update
73

73

00:03:09,750  -->  00:03:12,330
the underlying IAM policy of your users.
74

74

00:03:12,330  -->  00:03:15,240
And then, the permissions are granted automatically
75

75

00:03:15,240  -->  00:03:17,010
based on these attributes.
76

76

00:03:17,010  -->  00:03:18,900
So you require fewer policies,
77

77

00:03:18,900  -->  00:03:20,190
you don't need to create different policies
78

78

00:03:20,190  -->  00:03:21,720
for different job functions.
79

79

00:03:21,720  -->  00:03:25,110
And on top of it, you can get some users attributes directly
80

80

00:03:25,110  -->  00:03:26,550
from corporate directories.
81

81

00:03:26,550  -->  00:03:30,510
For example, SAML 2.0 IDP or a Web IDP.
82

82

00:03:30,510  -->  00:03:33,150
So hopefully you now understand the power
83

83

00:03:33,150  -->  00:03:35,760
of attribute based access control.
84

84

00:03:35,760  -->  00:03:36,870
I hope you like this lecture
85

85

00:03:36,870  -->  00:03:38,853
and I will see you in the next lecture.
