1
1

00:00:00,120  -->  00:00:01,020
<v Lecturer>So let's have a look</v>
2

2

00:00:01,020  -->  00:00:04,020
at some advanced concepts around Secrets Manager.
3

3

00:00:04,020  -->  00:00:05,790
First one, we can use KMS to encrypt
4

4

00:00:05,790  -->  00:00:08,970
and decrypt every version of every secret value.
5

5

00:00:08,970  -->  00:00:11,280
And so each secret is going to be encrypted
6

6

00:00:11,280  -->  00:00:12,780
thanks to envelope encryption,
7

7

00:00:12,780  -->  00:00:14,430
with a unique data key.
8

8

00:00:14,430  -->  00:00:15,870
So Secret Manager internally
9

9

00:00:15,870  -->  00:00:18,540
is going to use the generate data key API call
10

10

00:00:18,540  -->  00:00:19,800
to get a data key
11

11

00:00:19,800  -->  00:00:22,950
and is going to encrypt, for example, a secret value,
12

12

00:00:22,950  -->  00:00:24,330
a database password,
13

13

00:00:24,330  -->  00:00:26,460
and then you're going to get the encrypted value
14

14

00:00:26,460  -->  00:00:27,630
and that's how it works
15

15

00:00:27,630  -->  00:00:30,690
in the reverse mechanism for decryption.
16

16

00:00:30,690  -->  00:00:33,810
So we have the option to set our own KMS key for this,
17

17

00:00:33,810  -->  00:00:36,270
or to use the AWS managed key
18

18

00:00:36,270  -->  00:00:39,360
called AWS/Secret Manager.
19

19

00:00:39,360  -->  00:00:42,090
It only works with symmetric KMS keys
20

20

00:00:42,090  -->  00:00:44,430
and all the encryption process will happen
21

21

00:00:44,430  -->  00:00:45,263
within the service.
22

22

00:00:45,263  -->  00:00:46,710
You don't have to do it on your own.
23

23

00:00:46,710  -->  00:00:48,330
To access a secret,
24

24

00:00:48,330  -->  00:00:51,030
very similar to SSM Biometric Store.
25

25

00:00:51,030  -->  00:00:52,380
You must have access, of course,
26

26

00:00:52,380  -->  00:00:54,300
to the secret in Secret Manager,
27

27

00:00:54,300  -->  00:00:55,350
but also have access
28

28

00:00:55,350  -->  00:00:58,200
to the underlying KMS key to be able to encrypt
29

29

00:00:58,200  -->  00:01:00,123
or decrypt that secret.
30

30

00:01:01,140  -->  00:01:04,140
Next thing is around secrets rotation for Secrets Manager.
31

31

00:01:04,140  -->  00:01:07,290
So this is around the idea that you want to automatically
32

32

00:01:07,290  -->  00:01:09,990
and periodically update a secret.
33

33

00:01:09,990  -->  00:01:13,260
So for some databases you have automated password rotation
34

34

00:01:13,260  -->  00:01:17,940
for example, RDS, Redshift, Document DB or other databases.
35

35

00:01:17,940  -->  00:01:20,010
What's going to happen is that Secrets Manager,
36

36

00:01:20,010  -->  00:01:21,270
if this is enabled,
37

37

00:01:21,270  -->  00:01:24,390
every 30 day is going to invoke a Lambda function
38

38

00:01:24,390  -->  00:01:25,410
that you create yourself
39

39

00:01:25,410  -->  00:01:27,270
or that is provided by the service
40

40

00:01:27,270  -->  00:01:28,290
when there isn't already
41

41

00:01:28,290  -->  00:01:30,870
in existing integration such as RDS.
42

42

00:01:30,870  -->  00:01:33,870
And this Lambda function is going to change the password
43

43

00:01:33,870  -->  00:01:36,030
of your Amazon RDS database
44

44

00:01:36,030  -->  00:01:38,550
and therefore it's also going to store the final value
45

45

00:01:38,550  -->  00:01:40,380
in Secrets Manager.
46

46

00:01:40,380  -->  00:01:42,600
So no matter what the secret you have,
47

47

00:01:42,600  -->  00:01:45,120
Secrets Manager will use a Lambda function
48

48

00:01:45,120  -->  00:01:47,010
to rotate the secrets.
49

49

00:01:47,010  -->  00:01:50,040
And if you do happen to enable Secret Rotation,
50

50

00:01:50,040  -->  00:01:53,430
the Secret is going to be rotated immediately.
51

51

00:01:53,430  -->  00:01:57,120
Now, in the use case of you're using a Lambda function
52

52

00:01:57,120  -->  00:02:00,060
to rotate an Amazon RDS database,
53

53

00:02:00,060  -->  00:02:01,230
you must make sure
54

54

00:02:01,230  -->  00:02:03,420
that this Lambda function has access
55

55

00:02:03,420  -->  00:02:05,910
to both the Secrets Manager Service
56

56

00:02:05,910  -->  00:02:07,590
and your database.
57

57

00:02:07,590  -->  00:02:10,290
So let's assume that our Amazon RDS database
58

58

00:02:10,290  -->  00:02:12,360
is deployed within a VPC.
59

59

00:02:12,360  -->  00:02:15,240
Then we must, of course, deploy our Lambda function
60

60

00:02:15,240  -->  00:02:17,820
within the same VPC,
61

61

00:02:17,820  -->  00:02:20,730
then is going to be able to access Amazon RDS privately,
62

62

00:02:20,730  -->  00:02:21,870
but also we need to make sure
63

63

00:02:21,870  -->  00:02:25,650
we have a VPC endpoint to access back Secrets Manager
64

64

00:02:25,650  -->  00:02:26,880
or a NAT Gateway in place,
65

65

00:02:26,880  -->  00:02:31,170
again, to get network connectivity into Secrets Manager.
66

66

00:02:31,170  -->  00:02:34,380
We also have the possibility from Lambda function
67

67

00:02:34,380  -->  00:02:37,320
to pull secrets at runtime from Secrets Manager.
68

68

00:02:37,320  -->  00:02:40,980
For example, say we want to connect to an RDS database
69

69

00:02:40,980  -->  00:02:43,410
and the password of this RDS database
70

70

00:02:43,410  -->  00:02:45,450
is within Secrets Manager.
71

71

00:02:45,450  -->  00:02:48,750
We want to inject the secret as an environment variable.
72

72

00:02:48,750  -->  00:02:50,040
So for this, we're going to reference
73

73

00:02:50,040  -->  00:02:51,450
the secret from Lambda,
74

74

00:02:51,450  -->  00:02:53,280
which, when the Lambda function boots up,
75

75

00:02:53,280  -->  00:02:55,290
is going to fetch that secret
76

76

00:02:55,290  -->  00:02:57,581
and then access the RDS database.
77

77

00:02:57,581  -->  00:03:00,240
Thanks to that, of course, password value.
78

78

00:03:00,240  -->  00:03:01,410
So for this to happen
79

79

00:03:01,410  -->  00:03:02,550
your Lambda function
80

80

00:03:02,550  -->  00:03:05,880
must be configured to access the secrets in Secrets Manager
81

81

00:03:05,880  -->  00:03:08,790
and must have the proper IAM policy.
82

82

00:03:08,790  -->  00:03:11,100
There is also a very similar mechanism
83

83

00:03:11,100  -->  00:03:14,610
where we integrate ECS with Secrets Manager.
84

84

00:03:14,610  -->  00:03:16,740
So let's talk about the exact same problem.
85

85

00:03:16,740  -->  00:03:20,850
We want to access RDS database at runtime
86

86

00:03:20,850  -->  00:03:22,320
and so we, at boot,
87

87

00:03:22,320  -->  00:03:25,830
are going to pull the secret out of Secrets Manager,
88

88

00:03:25,830  -->  00:03:28,530
is going to be injected as an environment variable,
89

89

00:03:28,530  -->  00:03:30,720
and then we can access RDS.
90

90

00:03:30,720  -->  00:03:32,280
And this can happen
91

91

00:03:32,280  -->  00:03:35,250
only if we have the proper IAM policy in place
92

92

00:03:35,250  -->  00:03:38,310
and we've configured our ECS task properly
93

93

00:03:38,310  -->  00:03:39,660
with an IAM role.
94

94

00:03:39,660  -->  00:03:42,390
Alright, next we have resource policies
95

95

00:03:42,390  -->  00:03:43,223
for Secrets Managers.
96

96

00:03:43,223  -->  00:03:46,470
So it is possible for you to define access to a secret
97

97

00:03:46,470  -->  00:03:47,820
thanks to a resource policy,
98

98

00:03:47,820  -->  00:03:50,853
the same way we have bucket policies for S3 buckets.
99

99

00:03:51,750  -->  00:03:53,460
So let's say we have a secret
100

100

00:03:53,460  -->  00:03:56,370
and we attach this resource policy to the secret,
101

101

00:03:56,370  -->  00:03:58,770
where we're saying is that this secret
102

102

00:03:58,770  -->  00:04:01,200
can be accessed by the user Mary,
103

103

00:04:01,200  -->  00:04:02,220
and that's good enough.
104

104

00:04:02,220  -->  00:04:05,130
Mary does not need to have its own IAM permissions
105

105

00:04:05,130  -->  00:04:06,720
to access the secrets.
106

106

00:04:06,720  -->  00:04:07,770
So the use case is
107

107

00:04:07,770  -->  00:04:10,020
to grant access to a single secret
108

108

00:04:10,020  -->  00:04:11,310
for multiple users
109

109

00:04:11,310  -->  00:04:14,100
managing this from a secret perspective.
110

110

00:04:14,100  -->  00:04:15,090
And forcing provisions,
111

111

00:04:15,090  -->  00:04:17,730
for example, we can add an explicit deny
112

112

00:04:17,730  -->  00:04:20,280
to a secret for whatever use case you have,
113

113

00:04:20,280  -->  00:04:24,450
or sharing a secret between AWS accounts.
114

114

00:04:24,450  -->  00:04:26,400
Okay, that's it for Secrets Manager.
115

115

00:04:26,400  -->  00:04:27,570
I hope you liked it
116

116

00:04:27,570  -->  00:04:29,520
and I will see you in the next lecture.
