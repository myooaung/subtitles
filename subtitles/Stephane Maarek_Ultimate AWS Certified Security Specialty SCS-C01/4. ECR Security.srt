1
1

00:00:00,300  -->  00:00:01,410
<v Lecturer>So let's talk about</v>
2

2

00:00:01,410  -->  00:00:03,540
a few security concerns with ECR.
3

3

00:00:03,540  -->  00:00:05,910
So the first one is that you can have integration
4

4

00:00:05,910  -->  00:00:07,440
between KMS and ECR
5

5

00:00:07,440  -->  00:00:10,830
by encrypting your ECR repositories at rest,
6

6

00:00:10,830  -->  00:00:12,270
using your KMS keys,
7

7

00:00:12,270  -->  00:00:13,980
so your images will be encrypted
8

8

00:00:13,980  -->  00:00:15,270
and they are encrypted using
9

9

00:00:15,270  -->  00:00:16,800
the envelope encryption technique
10

10

00:00:16,800  -->  00:00:18,930
thanks to your data encryption key.
11

11

00:00:18,930  -->  00:00:22,050
And you can only enable the encryption
12

12

00:00:22,050  -->  00:00:23,490
at the repository recreation.
13

13

00:00:23,490  -->  00:00:26,700
So in case you want to encrypt an unencrypted repo,
14

14

00:00:26,700  -->  00:00:28,590
you have to create a new repo that is encrypted
15

15

00:00:28,590  -->  00:00:31,650
and then migrate over the images.
16

16

00:00:31,650  -->  00:00:34,500
ECR, the way it works to encrypt these images,
17

17

00:00:34,500  -->  00:00:38,010
will use a KMS grant on your behalf to interact with KMS.
18

18

00:00:38,010  -->  00:00:39,737
And so this grant again
19

19

00:00:39,737  -->  00:00:42,090
make sure you have the DescribeKey,
20

20

00:00:42,090  -->  00:00:45,330
Decrypt, GeneratedKey and RetiredGrant permissions.
21

21

00:00:45,330  -->  00:00:47,610
This is when you delete the repo.
22

22

00:00:47,610  -->  00:00:49,740
So this should make sense by now.
23

23

00:00:49,740  -->  00:00:51,690
What is new to you, for example,
24

24

00:00:51,690  -->  00:00:55,020
is the fact that you can only enable the KMS encryption
25

25

00:00:55,020  -->  00:00:57,900
at the repository creation time.
26

26

00:00:57,900  -->  00:01:01,020
What about cross account access for your ECR repo?
27

27

00:01:01,020  -->  00:01:03,180
So let's say we have a container image in an account
28

28

00:01:03,180  -->  00:01:05,340
and another account wants to access it.
29

29

00:01:05,340  -->  00:01:06,750
While you may have guessed it,
30

30

00:01:06,750  -->  00:01:07,590
the one way to do it
31

31

00:01:07,590  -->  00:01:09,930
is to use a repository policy
32

32

00:01:09,930  -->  00:01:11,550
which is a resource policy
33

33

00:01:11,550  -->  00:01:14,430
and this will allow the target account
34

34

00:01:14,430  -->  00:01:17,430
to issue commands against our repo.
35

35

00:01:17,430  -->  00:01:20,970
So the way it works is that when you do a login
36

36

00:01:20,970  -->  00:01:23,700
from account B to get a Docker login,
37

37

00:01:23,700  -->  00:01:26,190
please make sure to reference the first account
38

38

00:01:26,190  -->  00:01:28,110
as the URL to authenticate.
39

39

00:01:28,110  -->  00:01:30,840
You're going to get an authentication token out of it
40

40

00:01:30,840  -->  00:01:33,450
and then you can just simply push the image
41

41

00:01:33,450  -->  00:01:35,340
with the correct name to push
42

42

00:01:35,340  -->  00:01:37,920
into the target ECR repository.
43

43

00:01:37,920  -->  00:01:39,960
Same for pulling images.
44

44

00:01:39,960  -->  00:01:40,950
So fairly simple.
45

45

00:01:40,950  -->  00:01:43,623
The whole magic happens with a repository policy.
46

46

00:01:44,490  -->  00:01:46,920
So some troubleshooting around ECR.
47

47

00:01:46,920  -->  00:01:49,230
If you have a 403 forbidden error
48

48

00:01:49,230  -->  00:01:51,510
or No basic Auth Credentials error.
49

49

00:01:51,510  -->  00:01:54,071
And even if you've successfully gotten
50

50

00:01:54,071  -->  00:01:57,840
a Docker login with ECR get login password,
51

51

00:01:57,840  -->  00:01:58,980
you may have this error.
52

52

00:01:58,980  -->  00:02:03,300
So the reason that could be the source of the issue
53

53

00:02:03,300  -->  00:02:05,160
is that you have authenticated
54

54

00:02:05,160  -->  00:02:06,720
to a different AWS region
55

55

00:02:06,720  -->  00:02:09,330
and so the Docker login does not work across region.
56

56

00:02:09,330  -->  00:02:11,820
You need to get a new one for it,
57

57

00:02:11,820  -->  00:02:14,700
or this Docker login was successfully issued,
58

58

00:02:14,700  -->  00:02:17,250
but then you don't have the necessary IAM permissions
59

59

00:02:17,250  -->  00:02:18,750
to push or pull,
60

60

00:02:18,750  -->  00:02:21,240
or we have an authentication token
61

61

00:02:21,240  -->  00:02:24,990
and it has expired because it's only valid for 12 hours.
62

62

00:02:24,990  -->  00:02:25,823
All right.
63

63

00:02:25,823  -->  00:02:26,656
That's it for ECR.
64

64

00:02:26,656  -->  00:02:27,489
I hope you liked it.
65

65

00:02:27,489  -->  00:02:29,280
And I will see you in the next lecture.
