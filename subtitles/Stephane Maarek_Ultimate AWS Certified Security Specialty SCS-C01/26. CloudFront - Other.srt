1
1

00:00:00,180  -->  00:00:01,950
<v ->So here are some bits of information</v>
2

2

00:00:01,950  -->  00:00:03,900
about CloudFront that can come up in the exam.
3

3

00:00:03,900  -->  00:00:05,760
The first one is around the Authorization Header.
4

4

00:00:05,760  -->  00:00:07,380
So it is desirable for you,
5

5

00:00:07,380  -->  00:00:09,660
to forward the Authorization Header
6

6

00:00:09,660  -->  00:00:11,760
from the users to the origin.
7

7

00:00:11,760  -->  00:00:12,660
So say for example
8

8

00:00:12,660  -->  00:00:16,470
your EC2 instance does need this Authorization Header
9

9

00:00:16,470  -->  00:00:19,800
then you define a Cache Policy, and in this Cache Policy
10

10

00:00:19,800  -->  00:00:22,770
you're going to white list the Authorization Header.
11

11

00:00:22,770  -->  00:00:24,660
Therefore, when the request comes in
12

12

00:00:24,660  -->  00:00:26,490
with the Authorization Header,
13

13

00:00:26,490  -->  00:00:30,510
it is going to be forwarded, back to the origin.
14

14

00:00:30,510  -->  00:00:32,070
So then the request comes back
15

15

00:00:32,070  -->  00:00:35,160
from the EC2 Instance, and is passed to the users.
16

16

00:00:35,160  -->  00:00:37,590
So, authorization is supported for any kind
17

17

00:00:37,590  -->  00:00:41,493
of origin, but not supported for S3 kind of origins.
18

18

00:00:42,330  -->  00:00:44,460
The second one is a pattern to restrict access
19

19

00:00:44,460  -->  00:00:45,870
to an Application Balancer
20

20

00:00:45,870  -->  00:00:48,330
through CloudFront or a custom origin.
21

21

00:00:48,330  -->  00:00:49,163
So first,
22

22

00:00:49,163  -->  00:00:52,560
you will configure CloudFront to add a custom HTTP Header
23

23

00:00:52,560  -->  00:00:55,950
to any request that will be sent to the ALB, the origin.
24

24

00:00:55,950  -->  00:00:58,620
And second, you will configure the ALB to
25

25

00:00:58,620  -->  00:01:01,110
only forward request and to respond to request
26

26

00:01:01,110  -->  00:01:04,200
that contain this custom HTTP Header.
27

27

00:01:04,200  -->  00:01:07,830
Now the value of this custom HTTP Header must remain secret,
28

28

00:01:07,830  -->  00:01:09,660
and can rotate over time.
29

29

00:01:09,660  -->  00:01:10,560
So let's take an example.
30

30

00:01:10,560  -->  00:01:12,690
You have an ALB or a custom origin,
31

31

00:01:12,690  -->  00:01:14,430
and then EC2 instances.
32

32

00:01:14,430  -->  00:01:17,910
Then you access the CloudFront through the Edge Locations.
33

33

00:01:17,910  -->  00:01:20,343
This CloudFront Edge Location is going to
34

34

00:01:20,343  -->  00:01:24,270
have a custom header, called the X-Custom-Header
35

35

00:01:24,270  -->  00:01:26,190
and then a random value.
36

36

00:01:26,190  -->  00:01:28,110
And then, there's going to be a filter
37

37

00:01:28,110  -->  00:01:31,710
on the origin, on your Application Balancer, for example.
38

38

00:01:31,710  -->  00:01:32,543
Such as,
39

39

00:01:32,543  -->  00:01:36,060
if the custom header is not present with that value,
40

40

00:01:36,060  -->  00:01:38,130
request will be dropped.
41

41

00:01:38,130  -->  00:01:40,110
So in that case, if the filter is correct
42

42

00:01:40,110  -->  00:01:42,750
then it's going to be forwarded to the EC2 Instances,
43

43

00:01:42,750  -->  00:01:45,540
and any other user who's trying to access directly
44

44

00:01:45,540  -->  00:01:47,190
your Application Balancer
45

45

00:01:47,190  -->  00:01:50,190
through its public URL, if somehow they discovered it,
46

46

00:01:50,190  -->  00:01:52,230
will not be able to access it.
47

47

00:01:52,230  -->  00:01:54,840
Because they will not know what is the custom header
48

48

00:01:54,840  -->  00:01:58,440
that is needed to actually go through the ALB.
49

49

00:01:58,440  -->  00:02:02,610
And as an extra security mechanism, you can also decide to
50

50

00:02:02,610  -->  00:02:06,450
leverage the CloudFront prefixes of public IP addresses,
51

51

00:02:06,450  -->  00:02:08,310
to have rules in your security group
52

52

00:02:08,310  -->  00:02:10,320
attached to your Application Balancer,
53

53

00:02:10,320  -->  00:02:11,280
to guarantee that,
54

54

00:02:11,280  -->  00:02:14,850
the request only are coming from CloudFront.
55

55

00:02:14,850  -->  00:02:17,880
There's also a way to leverage CloudFront alongside Cognito.
56

56

00:02:17,880  -->  00:02:19,080
So how does that work?
57

57

00:02:19,080  -->  00:02:21,540
Well, say we want our users to be authenticated,
58

58

00:02:21,540  -->  00:02:24,750
before accessing CloudFront and our S3 buckets.
59

59

00:02:24,750  -->  00:02:25,920
In that case, what we're going to do,
60

60

00:02:25,920  -->  00:02:28,020
is that we're going to use Cognito
61

61

00:02:28,020  -->  00:02:31,110
to deploy what's called the Cognito Hosted UI.
62

62

00:02:31,110  -->  00:02:33,000
Which is a service offered by Cognito,
63

63

00:02:33,000  -->  00:02:33,840
which will basically
64

64

00:02:33,840  -->  00:02:36,570
give us a username and a password type of login to
65

65

00:02:36,570  -->  00:02:41,130
get back a JWT Token, which is a JSON Web Token.
66

66

00:02:41,130  -->  00:02:44,640
Then, this token is going to be passed to CloudFront,
67

67

00:02:44,640  -->  00:02:47,070
alongside the request, and CloudFront is going to
68

68

00:02:47,070  -->  00:02:51,060
be leveraging a Lambda function, the Lambda@Edge function,
69

69

00:02:51,060  -->  00:02:53,730
which is going to look at the viewer request,
70

70

00:02:53,730  -->  00:02:56,040
get back the JWT Token,
71

71

00:02:56,040  -->  00:02:58,740
and verify whether or not that token was
72

72

00:02:58,740  -->  00:03:01,560
issued by Cognito, and is correct.
73

73

00:03:01,560  -->  00:03:03,990
If that is correct, then the Lambda function will say,
74

74

00:03:03,990  -->  00:03:06,000
okay, the request can go on,
75

75

00:03:06,000  -->  00:03:08,880
and then CloudFront is going to talk to the S3 buckets.
76

76

00:03:08,880  -->  00:03:12,090
Get back the data, and send it back to the user.
77

77

00:03:12,090  -->  00:03:13,530
So very important here,
78

78

00:03:13,530  -->  00:03:16,845
the one thing we are using, is the Cognito hosted UI to
79

79

00:03:16,845  -->  00:03:20,190
create and generate this JWT Token and then
80

80

00:03:20,190  -->  00:03:21,360
we're using Lambda@Edge
81

81

00:03:21,360  -->  00:03:24,660
to verify the validity of this token.
82

82

00:03:24,660  -->  00:03:26,130
Alright, that's it for this lecture.
83

83

00:03:26,130  -->  00:03:29,163
I hope you liked it and I will see you in the next lecture.
