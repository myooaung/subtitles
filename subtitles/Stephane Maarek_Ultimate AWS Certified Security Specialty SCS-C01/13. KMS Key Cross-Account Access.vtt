WEBVTT
1
1

00:00:00.330  -->  00:00:01.350
<v Instructor>So let's have a look</v>
2

2

00:00:01.350  -->  00:00:04.710
at now cross-account access for your KMS key.
3

3

00:00:04.710  -->  00:00:06.720
So let's say we have an account, it has a KMS key,
4

4

00:00:06.720  -->  00:00:09.780
and we have another account with IAM users or IAM roles
5

5

00:00:09.780  -->  00:00:12.420
and they want to access our KMS key.
6

6

00:00:12.420  -->  00:00:16.590
So we have to create a KMS key policy on the account A.
7

7

00:00:16.590  -->  00:00:19.740
And as you can see, underneath the principle,
8

8

00:00:19.740  -->  00:00:23.250
we authorize route of account 123456,
9

9

00:00:23.250  -->  00:00:24.510
which is the accounts B.
10

10

00:00:24.510  -->  00:00:27.900
And by route, we mean the entire account itself.
11

11

00:00:27.900  -->  00:00:32.460
So this grants access to account B for this KMS key.
12

12

00:00:32.460  -->  00:00:35.670
But now, of course, you still have access to your KMS key.
13

13

00:00:35.670  -->  00:00:38.310
Accounts B has to have its own security mechanism.
14

14

00:00:38.310  -->  00:00:40.410
So your IAM user or your IAM role
15

15

00:00:40.410  -->  00:00:42.390
will have an attached policy,
16

16

00:00:42.390  -->  00:00:46.020
and this policy should have all the KMS APIs needed
17

17

00:00:46.020  -->  00:00:48.270
such as encrypt, decrypt, and so on.
18

18

00:00:48.270  -->  00:00:51.450
And the resource should be the KMS key ARN
19

19

00:00:51.450  -->  00:00:53.640
of the accounts A.
20

20

00:00:53.640  -->  00:00:56.760
Then we can encrypt and decrypt files.
21

21

00:00:56.760  -->  00:00:57.810
So it's very simple.
22

22

00:00:57.810  -->  00:00:58.643
That makes sense.
23

23

00:00:58.643  -->  00:00:59.580
It's similar to what we've seen
24

24

00:00:59.580  -->  00:01:01.440
for many cross-account stuff.
25

25

00:01:01.440  -->  00:01:03.690
Now, what if you want to allow not the users
26

26

00:01:03.690  -->  00:01:05.220
to just encrypt and decrypt
27

27

00:01:05.220  -->  00:01:07.980
but the services of the cross-account
28

28

00:01:07.980  -->  00:01:09.540
to access our KMS key.
29

29

00:01:09.540  -->  00:01:10.440
Bit more complicated.
30

30

00:01:10.440  -->  00:01:12.180
So this time, we want, for example,
31

31

00:01:12.180  -->  00:01:15.630
to have an EBS volume that's going to be encrypted
32

32

00:01:15.630  -->  00:01:18.450
with a KMS key belonging in another account.
33

33

00:01:18.450  -->  00:01:19.680
So it's similar.
34

34

00:01:19.680  -->  00:01:22.020
We need to have a KMS key policy,
35

35

00:01:22.020  -->  00:01:24.780
but this time, if you notice it's a little bit bigger
36

36

00:01:24.780  -->  00:01:26.250
because we have the grants.
37

37

00:01:26.250  -->  00:01:29.850
So we have CreateGrants, ListGrants and RevokedGrants.
38

38

00:01:29.850  -->  00:01:30.683
Why?
39

39

00:01:30.683  -->  00:01:33.030
Well, these grants are necessary
40

40

00:01:33.030  -->  00:01:36.750
because they allow us to pass permissions
41

41

00:01:36.750  -->  00:01:39.660
to an annual service to use this key.
42

42

00:01:39.660  -->  00:01:41.250
So thanks to these grants.
43

43

00:01:41.250  -->  00:01:43.710
Then in the IAM policy of the IAM user and role,
44

44

00:01:43.710  -->  00:01:45.300
we need to also have the matching conditions.
45

45

00:01:45.300  -->  00:01:47.250
So CreateGrants, ListGrants and RevokedGrants,
46

46

00:01:47.250  -->  00:01:49.370
But thank these grants, for example, in the IAM user,
47

47

00:01:49.370  -->  00:01:52.560
we can create a grant internally in the backend
48

48

00:01:52.560  -->  00:01:56.730
for the EBS service to encrypt and decrypt volumes.
49

49

00:01:56.730  -->  00:01:59.820
And that's the magic of grants right here.
50

50

00:01:59.820  -->  00:02:03.360
So let's think of a last way to use a KMS key
51

51

00:02:03.360  -->  00:02:04.860
in a cross-account manner.
52

52

00:02:04.860  -->  00:02:06.570
That's through assuming an IAM role.
53

53

00:02:06.570  -->  00:02:09.090
So let's say account A has a KMS key.
54

54

00:02:09.090  -->  00:02:12.210
Well, we just have a very simple KMS key policy,
55

55

00:02:12.210  -->  00:02:14.130
that's a default KMS key policy,
56

56

00:02:14.130  -->  00:02:17.730
allowing anything within the same account to access the key.
57

57

00:02:17.730  -->  00:02:19.620
And let's say we create an IAM role
58

58

00:02:19.620  -->  00:02:24.180
that has the proper IAM role policy to access this one key.
59

59

00:02:24.180  -->  00:02:25.110
Perfect.
60

60

00:02:25.110  -->  00:02:27.360
Then, of course, the role can access the key.
61

61

00:02:27.360  -->  00:02:30.360
This is not a cross-accounts type of setting,
62

62

00:02:30.360  -->  00:02:33.420
but, of course, this role can be assumed by user
63

63

00:02:33.420  -->  00:02:34.590
in another accounts.
64

64

00:02:34.590  -->  00:02:35.970
So there can be a trust policy.
65

65

00:02:35.970  -->  00:02:39.840
And then the IAM user can access the KMS key of accounts A
66

66

00:02:39.840  -->  00:02:42.180
by assuming this IAM role.
67

67

00:02:42.180  -->  00:02:44.610
So we've really seen like the different ways
68

68

00:02:44.610  -->  00:02:47.550
that it's possible for us to do cross-account access
69

69

00:02:47.550  -->  00:02:48.690
for KMS keys.
70

70

00:02:48.690  -->  00:02:52.740
And so when you're sharing a KMS encrypted RDS DB snapshots
71

71

00:02:52.740  -->  00:02:56.520
across accounts, you make sure that you first share
72

72

00:02:56.520  -->  00:02:59.550
the KMS key associated with the target accounts
73

73

00:02:59.550  -->  00:03:01.620
using a key policy.
74

74

00:03:01.620  -->  00:03:04.680
So we have account A in RDS snapshot that's encrypted
75

75

00:03:04.680  -->  00:03:06.090
with your key A.
76

76

00:03:06.090  -->  00:03:08.520
And then we're going to attach a policy again
77

77

00:03:08.520  -->  00:03:09.810
that I just showed you before
78

78

00:03:09.810  -->  00:03:13.230
that allows access to the targets accounts to this key,
79

79

00:03:13.230  -->  00:03:15.990
so we can share the encrypted snapshots.
80

80

00:03:15.990  -->  00:03:19.020
It can be then accessed and then decrypted
81

81

00:03:19.020  -->  00:03:21.690
and will have the DB instance that could be running
82

82

00:03:21.690  -->  00:03:24.330
from a snapshot in another accounts.
83

83

00:03:24.330  -->  00:03:25.530
All right, that's it for this lecture.
84

84

00:03:25.530  -->  00:03:28.530
I hope you liked it, and I will see you in the next lecture.
