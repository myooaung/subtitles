1
1

00:00:00,000  -->  00:00:02,940
<v Instructor>Let's talk about field level encryption.</v>
2

2

00:00:02,940  -->  00:00:05,880
So this is to protect sensitive information
3

3

00:00:05,880  -->  00:00:07,680
through the application stack
4

4

00:00:07,680  -->  00:00:10,830
and this adds an additional level of security
5

5

00:00:10,830  -->  00:00:14,700
alongside using encryption in flight using HTTPS.
6

6

00:00:14,700  -->  00:00:18,690
So the idea is that anytime sensitive information is sent
7

7

00:00:18,690  -->  00:00:22,500
by the user, the edge location is going to encrypt it
8

8

00:00:22,500  -->  00:00:25,050
and it will only be able to be decrypted
9

9

00:00:25,050  -->  00:00:27,060
if someone has access to a private key,
10

10

00:00:27,060  -->  00:00:30,990
and therefore this will be using asymmetric encryption.
11

11

00:00:30,990  -->  00:00:32,370
So how does it work?
12

12

00:00:32,370  -->  00:00:37,370
Well, in the POST requests being made to Amazon CloudFront,
13

13

00:00:38,640  -->  00:00:40,290
then there will be a set of fields
14

14

00:00:40,290  -->  00:00:42,840
that we want to be encrypted up to 10 fields,
15

15

00:00:42,840  -->  00:00:44,460
for example, a credit card,
16

16

00:00:44,460  -->  00:00:47,070
and then we'll specify the public key to encrypt them with.
17

17

00:00:47,070  -->  00:00:49,110
So let's go through an example.
18

18

00:00:49,110  -->  00:00:52,800
We have a client talking over HTTPS through edge location,
19

19

00:00:52,800  -->  00:00:55,650
which will be forwarding it to the CloudFront service
20

20

00:00:55,650  -->  00:00:57,240
using HTTPS again
21

21

00:00:57,240  -->  00:00:59,880
and then it will go all the way to the origin
22

22

00:00:59,880  -->  00:01:02,040
using HTTPS to your application balancer,
23

23

00:01:02,040  -->  00:01:04,680
which will forward all the data using HTTPS
24

24

00:01:04,680  -->  00:01:05,513
to your web server.
25

25

00:01:05,513  -->  00:01:07,440
So everything is encrypted in flight,
26

26

00:01:07,440  -->  00:01:10,710
but we want to specify field level encryption.
27

27

00:01:10,710  -->  00:01:11,543
So say, for example,
28

28

00:01:11,543  -->  00:01:15,420
that our user is sending us some credit card information,
29

29

00:01:15,420  -->  00:01:17,580
and this is the one in orange right now.
30

30

00:01:17,580  -->  00:01:20,460
We specify that we want to have field level encryption
31

31

00:01:20,460  -->  00:01:22,200
for the credit card information
32

32

00:01:22,200  -->  00:01:25,710
and therefore the edge location will encrypt that field
33

33

00:01:25,710  -->  00:01:27,300
using a public key.
34

34

00:01:27,300  -->  00:01:30,810
So now the data being passed from the edge location
35

35

00:01:30,810  -->  00:01:33,090
to Amazon CloudFront to the origin
36

36

00:01:33,090  -->  00:01:37,950
will have the credit card information being encrypted
37

37

00:01:37,950  -->  00:01:39,330
thanks to the public key.
38

38

00:01:39,330  -->  00:01:42,210
And so the information will be passed all along
39

39

00:01:42,210  -->  00:01:43,860
until the web server,
40

40

00:01:43,860  -->  00:01:47,460
and then the web server will have access to the private key
41

41

00:01:47,460  -->  00:01:50,460
and will be able to decrypt that encrypted field
42

42

00:01:50,460  -->  00:01:51,293
using the private key
43

43

00:01:51,293  -->  00:01:53,340
to decrypt and get the credit card number.
44

44

00:01:53,340  -->  00:01:55,650
As we can see, all along the stack,
45

45

00:01:55,650  -->  00:02:00,120
none of the CloudFront's location and application balancer
46

46

00:02:00,120  -->  00:02:02,340
will have the opportunity to decrypt that field.
47

47

00:02:02,340  -->  00:02:03,720
Only the web server will need to have
48

48

00:02:03,720  -->  00:02:07,173
some custom application logic to decrypt that field.
49

49

00:02:08,070  -->  00:02:09,420
So that's it for this lecture.
50

50

00:02:09,420  -->  00:02:12,353
I hope you liked it and I will see you in the next lecture.
