1
1

00:00:00,210  -->  00:00:03,240
<v Instructor>So let's go through some very tricky examples</v>
2

2

00:00:03,240  -->  00:00:08,220
of how we can access services of AWS through VPC endpoints.
3

3

00:00:08,220  -->  00:00:09,600
The first one is CodeDeploy.
4

4

00:00:09,600  -->  00:00:13,470
So CodeDeploy is a way to deploy new application versions
5

5

00:00:13,470  -->  00:00:16,020
onto your EC2 instances, for example
6

6

00:00:16,020  -->  00:00:18,240
and EC2 instances that are going to
7

7

00:00:18,240  -->  00:00:20,430
run the CodeDeploy agents.
8

8

00:00:20,430  -->  00:00:23,370
And the CodeDeploy agent is going to be making API calls
9

9

00:00:23,370  -->  00:00:24,960
to the CodeDeploy service.
10

10

00:00:24,960  -->  00:00:28,170
Now obviously if your EC2 instance is in a private subnet
11

11

00:00:28,170  -->  00:00:31,710
then this agent must have networking capability
12

12

00:00:31,710  -->  00:00:33,510
to the CodeDeploy service.
13

13

00:00:33,510  -->  00:00:36,180
Now, it turns out that they are two kinds
14

14

00:00:36,180  -->  00:00:38,940
of VPC interface and points that are required.
15

15

00:00:38,940  -->  00:00:39,773
The first one is an interface endpoint
16

16

00:00:39,773  -->  00:00:44,704
directly into the CodeDeploy service itself.
17

17

00:00:45,690  -->  00:00:49,140
This is for all CodeDeploy API operations.
18

18

00:00:49,140  -->  00:00:52,380
The second VPC interface endpoint is going to be required
19

19

00:00:52,380  -->  00:00:54,420
for EC2 types of deployments
20

20

00:00:54,420  -->  00:00:58,020
is the one code CodeDeploy commands secure
21

21

00:00:58,020  -->  00:01:01,650
which is going to allow to have CodeDeploy agent operations
22

22

00:01:01,650  -->  00:01:03,420
because CodeDeploy is going to be sending some
23

23

00:01:03,420  -->  00:01:06,570
commands directly to the agents on the EC2 instance.
24

24

00:01:06,570  -->  00:01:07,860
And so as you can see,
25

25

00:01:07,860  -->  00:01:11,010
two VPC endpoints may be required for CodeDeploy.
26

26

00:01:11,010  -->  00:01:13,050
So just to give you some comparison,
27

27

00:01:13,050  -->  00:01:15,720
if you're deploying on EC2 instances,
28

28

00:01:15,720  -->  00:01:18,990
you must have access to both VPC interface endpoint.
29

29

00:01:18,990  -->  00:01:21,570
One for the CodeDeploy API operations
30

30

00:01:21,570  -->  00:01:24,900
and the second one for the ones related to the agents.
31

31

00:01:24,900  -->  00:01:28,710
But if you're using CodeDeploy to deploy EC2 or Lambda
32

32

00:01:28,710  -->  00:01:32,460
you only need access to the CodeDeploy APIs themselves
33

33

00:01:32,460  -->  00:01:35,430
not this second VPC interface endpoint
34

34

00:01:35,430  -->  00:01:38,820
that is only reserved for EC2 instances.
35

35

00:01:38,820  -->  00:01:40,770
The next service that you may have questions on
36

36

00:01:40,770  -->  00:01:42,660
is Secrets Manager.
37

37

00:01:42,660  -->  00:01:45,510
So with Secrets Manager, say we have a Lambda function
38

38

00:01:45,510  -->  00:01:48,060
and it wants to access privately the secrets
39

39

00:01:48,060  -->  00:01:52,170
of Secrets Manager, for example, to get a database password.
40

40

00:01:52,170  -->  00:01:54,990
If your Lambda function is deployed in a private subnet
41

41

00:01:54,990  -->  00:01:58,560
you must also deploy a VPC interface endpoint
42

42

00:01:58,560  -->  00:02:01,590
of Secrets Manager in this private subnet.
43

43

00:02:01,590  -->  00:02:03,660
This will allow the Lambda function to
44

44

00:02:03,660  -->  00:02:05,430
get the database password
45

45

00:02:05,430  -->  00:02:08,310
through the VPC endpoint onto Secrets Manager
46

46

00:02:08,310  -->  00:02:10,080
and then to privately connect, for example
47

47

00:02:10,080  -->  00:02:12,780
to a private RDS database instance.
48

48

00:02:12,780  -->  00:02:15,660
If you didn't want to use a VPC interface endpoint,
49

49

00:02:15,660  -->  00:02:16,860
you will need to set up
50

50

00:02:16,860  -->  00:02:18,900
net gateways and internet gateways
51

51

00:02:18,900  -->  00:02:21,750
to access from Lambda the Secrets Manager Service
52

52

00:02:21,750  -->  00:02:23,880
and that may be more complicated.
53

53

00:02:23,880  -->  00:02:24,870
So with this setup,
54

54

00:02:24,870  -->  00:02:27,723
everything goes privately and works really well.
55

55

00:02:28,860  -->  00:02:31,980
Another service is the SSM Session Manager.
56

56

00:02:31,980  -->  00:02:34,209
So with the SSM service, we can connect
57

57

00:02:34,209  -->  00:02:37,290
to EC2 instances using Session Manager
58

58

00:02:37,290  -->  00:02:38,580
and these EC2 instances
59

59

00:02:38,580  -->  00:02:42,480
they may reside in private subnets without internet access.
60

60

00:02:42,480  -->  00:02:44,310
So again, how do we do this?
61

61

00:02:44,310  -->  00:02:46,380
Well, first of all, we need multiple
62

62

00:02:46,380  -->  00:02:47,910
VPC interface endpoints.
63

63

00:02:47,910  -->  00:02:50,910
The first one is the SSM service itself.
64

64

00:02:50,910  -->  00:02:55,910
So this service must allow the inbound 443 ports
65

65

00:02:56,040  -->  00:02:59,250
on the security group to allow secure connections.
66

66

00:02:59,250  -->  00:03:02,610
The second one is the SSM Session Manager
67

67

00:03:02,610  -->  00:03:06,720
VPC interface endpoints, called SSM Messages.
68

68

00:03:06,720  -->  00:03:07,553
And again,
69

69

00:03:07,553  -->  00:03:11,190
it must allow the port 443 for inbound connections.
70

70

00:03:11,190  -->  00:03:13,921
Therefore, because your EC2 instances is going to access
71

71

00:03:13,921  -->  00:03:16,770
both these VPC interface endpoints,
72

72

00:03:16,770  -->  00:03:19,860
you must allow at least the port 443
73

73

00:03:19,860  -->  00:03:22,950
outbound on your security group of your EC2 instance
74

74

00:03:22,950  -->  00:03:25,950
so that all these things can communicate together.
75

75

00:03:25,950  -->  00:03:28,470
Then if you are using, for example
76

76

00:03:28,470  -->  00:03:31,040
KMS encryption for your data
77

77

00:03:31,040  -->  00:03:35,610
then you must also have a KMS VPC interface endpoint.
78

78

00:03:35,610  -->  00:03:37,800
And if you are deciding to send your logs
79

79

00:03:37,800  -->  00:03:38,940
into CloudWatch Logs,
80

80

00:03:38,940  -->  00:03:42,270
you must have a VPC interface endpoint for CloudWatch Logs.
81

81

00:03:42,270  -->  00:03:45,780
Finally, if you do decide to also send the logs to Amazon S3
82

82

00:03:45,780  -->  00:03:48,840
then you can use a VPC gateway endpoint.
83

83

00:03:48,840  -->  00:03:51,137
So as you can see, a lot of things are happening
84

84

00:03:51,137  -->  00:03:54,840
and if you do choose to use an S3 Gateway endpoint
85

85

00:03:54,840  -->  00:03:56,790
you must up the root tables.
86

86

00:03:56,790  -->  00:03:58,740
But from an SSM perspective,
87

87

00:03:58,740  -->  00:04:01,470
the access required for session manager
88

88

00:04:01,470  -->  00:04:04,320
is going to be around the SSM service itself
89

89

00:04:04,320  -->  00:04:07,920
and the SSM session manager VPC interface endpoints
90

90

00:04:07,920  -->  00:04:09,543
called SSM Messages.
91

91

00:04:10,560  -->  00:04:13,020
Next for Patch Manager, something similar.
92

92

00:04:13,020  -->  00:04:16,590
So we need to have access to the SSM service itself
93

93

00:04:16,590  -->  00:04:18,960
with its own VPC interface endpoint.
94

94

00:04:18,960  -->  00:04:23,760
And then there will be one called the SSM Commands VPC
95

95

00:04:23,760  -->  00:04:26,520
interface endpoint, called EC2 messages
96

96

00:04:26,520  -->  00:04:29,790
which is going to allow the SSM service to send commands
97

97

00:04:29,790  -->  00:04:31,620
into our EC2 instance.
98

98

00:04:31,620  -->  00:04:34,710
So the network security is similar as before
99

99

00:04:34,710  -->  00:04:37,140
and again to get dispatches now,
100

100

00:04:37,140  -->  00:04:39,210
you must also get them from Amazon S3
101

101

00:04:39,210  -->  00:04:42,210
and so therefore we'll need a VPC gateway endpoint
102

102

00:04:42,210  -->  00:04:45,814
for Amazon S3 and adding these group tables, of course
103

103

00:04:45,814  -->  00:04:48,600
when you have a VPC gateway endpoint.
104

104

00:04:48,600  -->  00:04:49,590
And finally,
105

105

00:04:49,590  -->  00:04:52,619
because the VPC endpoint must access your patches
106

106

00:04:52,619  -->  00:04:56,520
you must authorize through this VPC endpoint policy.
107

107

00:04:56,520  -->  00:04:57,630
Several buckets,
108

108

00:04:57,630  -->  00:05:00,715
the first one is the patch baseline snapshot
109

109

00:05:00,715  -->  00:05:01,548
for your specified region.
110

110

00:05:01,548  -->  00:05:05,820
The second one is the AWS SSM for your specified region
111

111

00:05:05,820  -->  00:05:09,153
or any other S3 buckets required by SSM.
112

112

00:05:10,440  -->  00:05:12,900
And finally, if you wanted to send the logs
113

113

00:05:12,900  -->  00:05:16,140
of the patch manager utility to CloudWatch Logs
114

114

00:05:16,140  -->  00:05:19,860
you must have your own VPC interface endpoint as well.
115

115

00:05:19,860  -->  00:05:22,320
Next, you should know how VPC endpoints work
116

116

00:05:22,320  -->  00:05:23,760
for the API gateway.
117

117

00:05:23,760  -->  00:05:27,270
So if you define a private REST API in API Gateway
118

118

00:05:27,270  -->  00:05:30,450
you can only access it using the VPC interface endpoint.
119

119

00:05:30,450  -->  00:05:31,710
There's no way around it.
120

120

00:05:31,710  -->  00:05:33,240
So that means that in this diagram,
121

121

00:05:33,240  -->  00:05:35,958
what's missing is the VPC interface endpoint
122

122

00:05:35,958  -->  00:05:39,360
for the Execute API endpoint.
123

123

00:05:39,360  -->  00:05:41,790
So once we have this in place, then the EC2 instance
124

124

00:05:41,790  -->  00:05:43,500
can access our private API.
125

125

00:05:43,500  -->  00:05:44,880
Of course, for it to work
126

126

00:05:44,880  -->  00:05:47,760
we must have the correct VPC endpoint policies
127

127

00:05:47,760  -->  00:05:49,560
and they must use together with
128

128

00:05:49,560  -->  00:05:52,410
the API gateway resource policies.
129

129

00:05:52,410  -->  00:05:55,860
So that means that using a resource policy,
130

130

00:05:55,860  -->  00:05:59,051
you can actually restrict access to your private API
131

131

00:05:59,051  -->  00:06:02,910
from a specific VPC or VPC endpoints.
132

132

00:06:02,910  -->  00:06:05,970
So this is the kind of API resource policy you can have
133

133

00:06:05,970  -->  00:06:06,803
in which your saying,
134

134

00:06:06,803  -->  00:06:10,320
"Hey, I will allow anyone to execute this API
135

135

00:06:10,320  -->  00:06:13,410
but you cannot invoke it if you don't come from
136

136

00:06:13,410  -->  00:06:16,407
the specified VPC, thanks to this condition".
137

137

00:06:17,250  -->  00:06:18,083
Alright, that's it.
138

138

00:06:18,083  -->  00:06:19,860
You've seen several examples,
139

139

00:06:19,860  -->  00:06:21,900
a bit redundant but hopefully you get the points
140

140

00:06:21,900  -->  00:06:24,210
and you understand the whole complexity
141

141

00:06:24,210  -->  00:06:26,610
and power of VPC interface endpoints.
142

142

00:06:26,610  -->  00:06:29,610
I hope you liked it, and I will see you in the next lecture.
