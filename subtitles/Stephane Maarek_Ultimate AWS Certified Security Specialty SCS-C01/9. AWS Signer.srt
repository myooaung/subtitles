1
1

00:00:00,360  -->  00:00:02,850
<v ->Now let's talk about AWS Signer.</v>
2

2

00:00:02,850  -->  00:00:05,640
So it's a fully managed Code-Signing service
3

3

00:00:05,640  -->  00:00:08,700
that ensures trust and integrity of your code.
4

4

00:00:08,700  -->  00:00:09,690
So the way you do it is
5

5

00:00:09,690  -->  00:00:11,970
that you will have a Code-Signing certificate
6

6

00:00:11,970  -->  00:00:13,650
public and private key,
7

7

00:00:13,650  -->  00:00:15,780
and then you will use them to sign your code.
8

8

00:00:15,780  -->  00:00:17,430
So the code is going to be validated
9

9

00:00:17,430  -->  00:00:19,320
against a digital signature to confirm
10

10

00:00:19,320  -->  00:00:22,350
that the code is unaltered and from a trusted publisher.
11

11

00:00:22,350  -->  00:00:23,310
So how does that work?
12

12

00:00:23,310  -->  00:00:27,000
We create a signing profile in AWS Signer.
13

13

00:00:27,000  -->  00:00:28,410
We send the code,
14

14

00:00:28,410  -->  00:00:30,810
and then the code is going to be signed
15

15

00:00:30,810  -->  00:00:33,600
thanks to cryptographic operations.
16

16

00:00:33,600  -->  00:00:37,410
Once it is signed, then it can be verified as trustable.
17

17

00:00:37,410  -->  00:00:40,740
So there is a Code-Signing feature for AWS Lambda.
18

18

00:00:40,740  -->  00:00:44,070
The way it works is that before we upload packages to Lambda
19

19

00:00:44,070  -->  00:00:46,110
we digitally sign them,
20

20

00:00:46,110  -->  00:00:48,570
and then this will enforce that only trusted code
21

21

00:00:48,570  -->  00:00:50,250
that had been signed from us
22

22

00:00:50,250  -->  00:00:52,740
will be executed on our Lambda functions.
23

23

00:00:52,740  -->  00:00:55,650
This is only supported for Lambda as code
24

24

00:00:55,650  -->  00:00:58,200
but not for Container Lambda functions.
25

25

00:00:58,200  -->  00:00:59,970
So once this code is signed, as I said,
26

26

00:00:59,970  -->  00:01:01,170
you can deploy it on Lambda,
27

27

00:01:01,170  -->  00:01:04,410
and you have the guarantee that Lambda only run trust code,
28

28

00:01:04,410  -->  00:01:07,470
trusted code, which is very important for enterprises.
29

29

00:01:07,470  -->  00:01:10,830
You also have Code-Signing capability for AWS IoT.
30

30

00:01:10,830  -->  00:01:14,250
So again, you would sign and create code for IoT
31

31

00:01:14,250  -->  00:01:16,560
and Amazon FreeRTOS,
32

32

00:01:16,560  -->  00:01:21,060
and it is integrated with ACM to generate
33

33

00:01:21,060  -->  00:01:24,090
and import these signing certificates.
34

34

00:01:24,090  -->  00:01:26,160
You can also Revoke Signing Profile.
35

35

00:01:26,160  -->  00:01:30,120
So once you, for example, want to revoke a trust
36

36

00:01:30,120  -->  00:01:31,590
on someone or something,
37

37

00:01:31,590  -->  00:01:34,350
you can revoke the signature of a Lambda deployment package
38

38

00:01:34,350  -->  00:01:35,520
to invalidate it,
39

39

00:01:35,520  -->  00:01:39,030
and then Lambda will fail the signature checks
40

40

00:01:39,030  -->  00:01:41,400
and then it will not run this code.
41

41

00:01:41,400  -->  00:01:43,920
So you can either revoke individual signatures
42

42

00:01:43,920  -->  00:01:46,410
by using the RevokeSignature API call,
43

43

00:01:46,410  -->  00:01:48,180
or you can revoke a Signing Profile
44

44

00:01:48,180  -->  00:01:50,940
using the RevokeSigningProfile API call.
45

45

00:01:50,940  -->  00:01:52,620
And this is only something you should use
46

46

00:01:52,620  -->  00:01:53,610
in critical scenarios,
47

47

00:01:53,610  -->  00:01:56,760
because this is an irreversible type of operation.
48

48

00:01:56,760  -->  00:01:58,470
So if there's a signature you wanna revoke,
49

49

00:01:58,470  -->  00:01:59,640
just as an admin
50

50

00:01:59,640  -->  00:02:01,590
you use the RevokeSignature API.
51

51

00:02:01,590  -->  00:02:04,500
This Lambda function then will not be able to use
52

52

00:02:04,500  -->  00:02:06,330
any code signed with this signature
53

53

00:02:06,330  -->  00:02:09,930
because, well, the signature check will fail.
54

54

00:02:09,930  -->  00:02:11,580
So that's it for AWS Signer.
55

55

00:02:11,580  -->  00:02:12,600
I hope you liked it.
56

56

00:02:12,600  -->  00:02:14,583
And I will see you in the next lecture.
