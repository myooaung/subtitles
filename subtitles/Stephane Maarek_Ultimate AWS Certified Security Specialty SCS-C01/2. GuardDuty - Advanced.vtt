WEBVTT
1
1

00:00:00.360  -->  00:00:02.340
<v Instructor>So now let's talk about Amazon GuardDuty</v>
2

2

00:00:02.340  -->  00:00:04.140
with more advanced details.
3

3

00:00:04.140  -->  00:00:04.973
Number one,
4

4

00:00:04.973  -->  00:00:07.140
you can have a multi account strategy with GuardDuty,
5

5

00:00:07.140  -->  00:00:09.540
because you can manage multiple accounts from it
6

6

00:00:09.540  -->  00:00:11.520
and you have to use an organization.
7

7

00:00:11.520  -->  00:00:14.340
And the idea is that member accounts can be managed
8

8

00:00:14.340  -->  00:00:16.200
through the administrator accounts.
9

9

00:00:16.200  -->  00:00:18.990
So you send invites through GuardDuty
10

10

00:00:18.990  -->  00:00:20.190
and then the admin accounts
11

11

00:00:20.190  -->  00:00:22.080
can add and remove member accounts,
12

12

00:00:22.080  -->  00:00:23.220
and they can manage GuardDuty
13

13

00:00:23.220  -->  00:00:25.800
within the associated member accounts.
14

14

00:00:25.800  -->  00:00:29.700
It can also manage any findings that GuardDuty resurfaces.
15

15

00:00:29.700  -->  00:00:31.500
It can manage suppression rules,
16

16

00:00:31.500  -->  00:00:34.140
trusted IP list, and threat lists.
17

17

00:00:34.140  -->  00:00:36.960
So in an organization you can also do something else.
18

18

00:00:36.960  -->  00:00:38.970
The administrator of GuardDuty
19

19

00:00:38.970  -->  00:00:42.270
doesn't have to be the administrator of the organization.
20

20

00:00:42.270  -->  00:00:45.300
There is the feature called the delegated administrator
21

21

00:00:45.300  -->  00:00:46.560
where a member accounts
22

22

00:00:46.560  -->  00:00:49.890
can become the administrator for GuardDuty.
23

23

00:00:49.890  -->  00:00:50.723
So how does that work?
24

24

00:00:50.723  -->  00:00:52.050
Well, we have an organization,
25

25

00:00:52.050  -->  00:00:56.809
maybe two OUs and member accounts, and we create
26

26

00:00:56.809  -->  00:01:00.900
and we designate a administrator account for GuardDuty
27

27

00:01:00.900  -->  00:01:02.430
which is going to manage the GuardDuty
28

28

00:01:02.430  -->  00:01:04.983
in all the other member accounts.
29

29

00:01:06.000  -->  00:01:08.160
So we have findings in GuardDuty.
30

30

00:01:08.160  -->  00:01:10.530
And findings are potential security issues
31

31

00:01:10.530  -->  00:01:14.400
for malicious events happening in your AWS accounts.
32

32

00:01:14.400  -->  00:01:17.400
From this, you're going to be able to automate the response
33

33

00:01:17.400  -->  00:01:20.760
to some security issues by using EventBridge.
34

34

00:01:20.760  -->  00:01:21.810
So how does that work?
35

35

00:01:21.810  -->  00:01:24.510
Well, any finding found by GuardDuty
36

36

00:01:24.510  -->  00:01:27.450
is going to be sent to Amazon EventBridge.
37

37

00:01:27.450  -->  00:01:29.760
Now, from Amazon EventBridge, we can do a lot of things.
38

38

00:01:29.760  -->  00:01:34.050
We can send alerts to SNS to receive email notifications
39

39

00:01:34.050  -->  00:01:37.320
or to Lambda function or to Slack, and so on.
40

40

00:01:37.320  -->  00:01:40.110
So for example, these are my options in here
41

41

00:01:40.110  -->  00:01:41.670
but there's obviously way more.
42

42

00:01:41.670  -->  00:01:42.503
And from SNS,
43

43

00:01:42.503  -->  00:01:46.530
we can invoke any HTTP endpoints or send emails.
44

44

00:01:46.530  -->  00:01:50.220
Now the events, when you are using a delegated administrator
45

45

00:01:50.220  -->  00:01:51.390
or administrator accounts,
46

46

00:01:51.390  -->  00:01:52.380
they're going to be published
47

47

00:01:52.380  -->  00:01:56.013
both in the member accounts and the administrator accounts.
48

48

00:01:57.300  -->  00:01:59.400
Next for these findings, so how do we have them?
49

49

00:01:59.400  -->  00:02:00.330
Well, we need to make sure
50

50

00:02:00.330  -->  00:02:02.070
that the CloudTrail logs are enabled
51

51

00:02:02.070  -->  00:02:04.110
for management event and data events.
52

52

00:02:04.110  -->  00:02:06.900
We need to of course, create VPC Flow Logs,
53

53

00:02:06.900  -->  00:02:08.940
and we need to enable EKS logs.
54

54

00:02:08.940  -->  00:02:12.300
So GuardDuty is not going to create those for you.
55

55

00:02:12.300  -->  00:02:15.210
It is up to you to make sure that they are enabled
56

56

00:02:15.210  -->  00:02:17.820
so that GuardDuty functions properly.
57

57

00:02:17.820  -->  00:02:19.170
Now, each finding will have a value,
58

58

00:02:19.170  -->  00:02:21.690
for example, from 0.1 to 8+,
59

59

00:02:21.690  -->  00:02:24.660
and will be categorized at high, medium, or low.
60

60

00:02:24.660  -->  00:02:25.890
And there is a naming convention,
61

61

00:02:25.890  -->  00:02:27.300
you don't have to remember it,
62

62

00:02:27.300  -->  00:02:28.560
but there's a way to name things.
63

63

00:02:28.560  -->  00:02:32.130
So the ThreatPurpose is the primary purpose of the threats.
64

64

00:02:32.130  -->  00:02:36.540
Then the ResourceTypeAffected is EC2 or S3, and so on.
65

65

00:02:36.540  -->  00:02:38.730
The family name of the threats could be related,
66

66

00:02:38.730  -->  00:02:41.278
for example, to NetworkPortUnusual.
67

67

00:02:41.278  -->  00:02:43.110
And the DetectionMechanism
68

68

00:02:43.110  -->  00:02:45.330
is how it got to detect this finding.
69

69

00:02:45.330  -->  00:02:48.090
Was it through TCP, UDP, and so on?
70

70

00:02:48.090  -->  00:02:50.880
And then what is being used in the malicious activities,
71

71

00:02:50.880  -->  00:02:53.490
the Artifact, for example, the DNS.
72

72

00:02:53.490  -->  00:02:55.800
So you can, if you wanted to test your automations,
73

73

00:02:55.800  -->  00:02:58.110
you can generate sample findings in GuardDuty.
74

74

00:02:58.110  -->  00:02:59.220
And this will allow you to make sure
75

75

00:02:59.220  -->  00:03:03.030
that everything works as expected for a specific finding.
76

76

00:03:03.030  -->  00:03:05.760
So more concretely, let's look at some finding types.
77

77

00:03:05.760  -->  00:03:06.990
So for EC2, for example,
78

78

00:03:06.990  -->  00:03:10.627
you have UnauthorizedAccessEC2/SSHBruteForce.
79

79

00:03:10.627  -->  00:03:13.464
So someone is really trying to get to your 22 port
80

80

00:03:13.464  -->  00:03:15.570
and tries to brute force it,
81

81

00:03:15.570  -->  00:03:17.733
or a cryptocurrency attack on EC2.
82

82

00:03:18.750  -->  00:03:21.390
Now for IAM finding types, we have for example,
83

83

00:03:21.390  -->  00:03:24.540
a user that disables CloudShare logging
84

84

00:03:24.540  -->  00:03:27.360
or a user that is using the roots credentials
85

85

00:03:27.360  -->  00:03:29.070
which shouldn't be used.
86

86

00:03:29.070  -->  00:03:29.903
For Kubernetes, for example,
87

87

00:03:29.903  -->  00:03:34.620
you'll have access to the credentials of Kubernetes
88

88

00:03:34.620  -->  00:03:37.350
from a malicious IP, and so on.
89

89

00:03:37.350  -->  00:03:38.640
So you can have a look at, for example,
90

90

00:03:38.640  -->  00:03:40.980
SuspiciousFiles for malware protection.
91

91

00:03:40.980  -->  00:03:45.540
And here, successful login through an anomalous behavior.
92

92

00:03:45.540  -->  00:03:47.070
So it's a weird login.
93

93

00:03:47.070  -->  00:03:50.370
And for S3, well, is the public access disabled?
94

94

00:03:50.370  -->  00:03:53.280
So that means now the bucket is public, this is a problem,
95

95

00:03:53.280  -->  00:03:54.180
or is someone trying
96

96

00:03:54.180  -->  00:03:56.583
to do penetration testing onto Amazon S3?
97

97

00:03:57.600  -->  00:03:59.220
So let's talk about some architectures
98

98

00:03:59.220  -->  00:04:01.800
because now we've seen that we can automate findings.
99

99

00:04:01.800  -->  00:04:05.610
So let's take an example of an EC2 instance in a VPC.
100

100

00:04:05.610  -->  00:04:09.120
Remember, we need to create VPC Flow Logs for our VPC
101

101

00:04:09.120  -->  00:04:11.220
to capture the network traffic.
102

102

00:04:11.220  -->  00:04:12.720
And this gets sent to GuardDuty
103

103

00:04:12.720  -->  00:04:14.790
to detect suspicious behavior.
104

104

00:04:14.790  -->  00:04:17.070
So GuardDuty is going to have a finding
105

105

00:04:17.070  -->  00:04:19.800
and say, well, it looks like from the VPC Flow Log,
106

106

00:04:19.800  -->  00:04:23.580
someone is performing the SSH bruteforce type of attack
107

107

00:04:23.580  -->  00:04:25.170
on my EC2 instance.
108

108

00:04:25.170  -->  00:04:27.600
So if EventBridge is going to generate an event for this.
109

109

00:04:27.600  -->  00:04:31.290
We can hook it up to SNS to get notifications by email,
110

110

00:04:31.290  -->  00:04:33.600
so that the security operators know about it.
111

111

00:04:33.600  -->  00:04:35.820
But also we can use a Lambda function.
112

112

00:04:35.820  -->  00:04:37.740
And that Lambda function can do two things.
113

113

00:04:37.740  -->  00:04:40.920
It can create a web ACL to block suspicious request,
114

114

00:04:40.920  -->  00:04:43.980
that says when you use WAF attached to, for example,
115

115

00:04:43.980  -->  00:04:46.110
a load balancer or something.
116

116

00:04:46.110  -->  00:04:47.640
But for an EC2 instance, for example,
117

117

00:04:47.640  -->  00:04:51.210
we can also automatically update the network ACL
118

118

00:04:51.210  -->  00:04:53.883
to make sure that we block the malicious IP.
119

119

00:04:54.900  -->  00:04:57.870
Another architecture we can look at is, for example,
120

120

00:04:57.870  -->  00:04:59.460
we have a firewall subnet,
121

121

00:04:59.460  -->  00:05:02.220
because we're using the AWS network firewall feature.
122

122

00:05:02.220  -->  00:05:04.890
So again, with an EC2 instance, we enable VPC Flow Logs
123

123

00:05:04.890  -->  00:05:07.980
to detect suspicious behavior in GuardDuty.
124

124

00:05:07.980  -->  00:05:11.160
And the finding is that there is a backdoor in our EC2
125

125

00:05:11.160  -->  00:05:12.420
and there is some weird activity.
126

126

00:05:12.420  -->  00:05:13.920
So EventBridge can this time
127

127

00:05:13.920  -->  00:05:16.230
trigger a Step Function workflow,
128

128

00:05:16.230  -->  00:05:18.330
and we can have multiple Lambda functions.
129

129

00:05:18.330  -->  00:05:19.950
Number one, making sure that,
130

130

00:05:19.950  -->  00:05:24.330
is the IP of the attacker in our database of malicious IPs?
131

131

00:05:24.330  -->  00:05:26.940
If not, well, block the traffic.
132

132

00:05:26.940  -->  00:05:29.070
And by blocking traffic, maybe the Lambda function
133

133

00:05:29.070  -->  00:05:31.590
can call the network firewall's API
134

134

00:05:31.590  -->  00:05:33.840
to add the IP in the rule group
135

135

00:05:33.840  -->  00:05:35.460
for a firewall policy
136

136

00:05:35.460  -->  00:05:38.190
that gets applied to a network firewall endpoint.
137

137

00:05:38.190  -->  00:05:41.040
And as a result of this, while the EC2 instance,
138

138

00:05:41.040  -->  00:05:43.170
traffic will go through the firewall subnet,
139

139

00:05:43.170  -->  00:05:46.110
and the EC2 instance cannot connect to the suspicious host.
140

140

00:05:46.110  -->  00:05:47.820
It is completely blocked.
141

141

00:05:47.820  -->  00:05:49.170
Now the blocked traffic
142

142

00:05:49.170  -->  00:05:52.170
can go into, you know, a success SNS topic
143

143

00:05:52.170  -->  00:05:54.660
to indicate that yes, the IP was successfully blocked
144

144

00:05:54.660  -->  00:05:55.830
or a failure,
145

145

00:05:55.830  -->  00:05:58.533
and then maybe we need need some manual intervention.
146

146

00:05:59.970  -->  00:06:01.350
GuardDuty also has the concepts
147

147

00:06:01.350  -->  00:06:03.810
of trusted and threat IP list.
148

148

00:06:03.810  -->  00:06:06.540
So this only works for public IP addresses.
149

149

00:06:06.540  -->  00:06:08.670
And you can define a trusted IP list
150

150

00:06:08.670  -->  00:06:11.820
which is a list of IP addresses in CIDR that you trust.
151

151

00:06:11.820  -->  00:06:14.580
In that case, GuardDuty is not going to generate findings
152

152

00:06:14.580  -->  00:06:15.870
for these trusted lists.
153

153

00:06:15.870  -->  00:06:18.540
So for example, this allows one of your developer
154

154

00:06:18.540  -->  00:06:20.970
to perform some tests on your EC2 instance
155

155

00:06:20.970  -->  00:06:23.460
without generating security findings.
156

156

00:06:23.460  -->  00:06:25.500
Now you has also a threat IP list.
157

157

00:06:25.500  -->  00:06:26.333
So it's a list
158

158

00:06:26.333  -->  00:06:29.130
of known malicious IP addresses in CIDR ranges.
159

159

00:06:29.130  -->  00:06:31.080
And GuardDuty will generate findings based
160

160

00:06:31.080  -->  00:06:32.280
on these threat list.
161

161

00:06:32.280  -->  00:06:33.480
So it can be supplied
162

162

00:06:33.480  -->  00:06:37.440
by either a third party intelligence provider
163

163

00:06:37.440  -->  00:06:40.323
or you can create them yourself, custom.
164

164

00:06:41.850  -->  00:06:45.210
Therefore, a hacker trying to access your EC2 instance
165

165

00:06:45.210  -->  00:06:47.400
from a malicious IP will be detected
166

166

00:06:47.400  -->  00:06:50.160
and GuardDuty will generate a finding.
167

167

00:06:50.160  -->  00:06:52.320
Now, if you have a multi account setup,
168

168

00:06:52.320  -->  00:06:56.520
only the GuardDuty administrator can manage those lists.
169

169

00:06:56.520  -->  00:06:57.720
So that's it for GuardDuty.
170

170

00:06:57.720  -->  00:06:59.670
I hope you liked it and I hope you learned a lot,
171

171

00:06:59.670  -->  00:07:01.713
and I will see you in the next lecture.
