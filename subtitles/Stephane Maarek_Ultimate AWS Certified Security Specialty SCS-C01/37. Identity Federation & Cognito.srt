1
1

00:00:00,270  -->  00:00:03,960
<v ->Okay, so now let's discuss Identity Federation in AWS.</v>
2

2

00:00:03,960  -->  00:00:06,650
So, the idea is that you want to give users
3

3

00:00:06,650  -->  00:00:08,180
that sit outside of AWS,
4

4

00:00:08,180  -->  00:00:11,770
permissions to access your AWS resources in your accounts.
5

5

00:00:11,770  -->  00:00:14,180
And the idea is that because the users already exist
6

6

00:00:14,180  -->  00:00:16,240
within your corporate directory,
7

7

00:00:16,240  -->  00:00:19,385
then you don't want to create specific IAM users for them,
8

8

00:00:19,385  -->  00:00:22,280
because you'd like to do user management outside of AWS,
9

9

00:00:22,280  -->  00:00:24,560
so this is why we need Identity Federation.
10

10

00:00:24,560  -->  00:00:25,913
So these cases, is for example,
11

11

00:00:25,913  -->  00:00:28,570
your corporation has its own identity system,
12

12

00:00:28,570  -->  00:00:29,940
for example Active Directory,
13

13

00:00:29,940  -->  00:00:31,900
or you have a web and mobile application
14

14

00:00:31,900  -->  00:00:34,090
that needs to access AWS resources
15

15

00:00:34,090  -->  00:00:36,420
and so, this is where we need Identity Federation.
16

16

00:00:36,420  -->  00:00:39,100
So at its core, here it looks like so,
17

17

00:00:39,100  -->  00:00:41,460
the user wants to access AWS
18

18

00:00:41,460  -->  00:00:43,069
and we have an Identity Provider.
19

19

00:00:43,069  -->  00:00:43,902
First,
20

20

00:00:43,902  -->  00:00:46,770
and this will not be represented on any following graphs,
21

21

00:00:46,770  -->  00:00:48,260
but just on this one,
22

22

00:00:48,260  -->  00:00:50,300
obviously you need to set up a trust relationship
23

23

00:00:50,300  -->  00:00:53,452
between AWS and the Identity Provider,
24

24

00:00:53,452  -->  00:00:56,063
to tell AWS that it's fine to get an identity
25

25

00:00:56,063  -->  00:00:58,118
from this one provider.
26

26

00:00:58,118  -->  00:00:59,596
Then the user will perform a login
27

27

00:00:59,596  -->  00:01:01,379
onto this Identity Provider,
28

28

00:01:01,379  -->  00:01:04,360
will receive back credentials for AWS
29

29

00:01:04,360  -->  00:01:08,250
and will access AWS using these temporary credentials.
30

30

00:01:08,250  -->  00:01:11,421
So, Identity Federation can have multiple flavors,
31

31

00:01:11,421  -->  00:01:13,142
it could be SAML 2.0,
32

32

00:01:13,142  -->  00:01:14,830
a Custom Identity Broker,
33

33

00:01:14,830  -->  00:01:18,040
Web Identity Federation with or without Amazon Cognito,
34

34

00:01:18,040  -->  00:01:22,180
and then, the more recent Single Sign-On (SSO) service.
35

35

00:01:22,180  -->  00:01:24,800
So, I'm going to discuss the first three,
36

36

00:01:24,800  -->  00:01:26,176
Single Sign-On will have its own lecture
37

37

00:01:26,176  -->  00:01:28,605
and this is the more recent generation
38

38

00:01:28,605  -->  00:01:30,320
of Identity Federation,
39

39

00:01:30,320  -->  00:01:31,850
but still from an exam perspective,
40

40

00:01:31,850  -->  00:01:33,870
you need to know about, all of them.
41

41

00:01:33,870  -->  00:01:37,248
So, let's go ahead with SAML 2.0 Federation.
42

42

00:01:37,248  -->  00:01:41,550
So, Sam 2.0 stands for Security Assertion Markup language
43

43

00:01:41,550  -->  00:01:44,040
and it's an open standard by many Identity Providers,
44

44

00:01:44,040  -->  00:01:44,972
such as ADFS.
45

45

00:01:44,972  -->  00:01:46,230
It supports integration
46

46

00:01:46,230  -->  00:01:48,340
with Microsoft Active Directory, which is nice,
47

47

00:01:48,340  -->  00:01:50,893
or any SAML 2.0 compatible IdP,
48

48

00:01:50,893  -->  00:01:53,802
which is Identity Provider with AWS.
49

49

00:01:53,802  -->  00:01:55,920
Using this, we can access the Console,
50

50

00:01:55,920  -->  00:01:58,980
the CLI or any API using temporary credentials,
51

51

00:01:58,980  -->  00:02:00,370
so we don't need to create IAM Users
52

52

00:02:00,370  -->  00:02:02,887
for each of the employees in your ADFS
53

53

00:02:02,887  -->  00:02:06,380
and you need, for example of course, to set up a trust
54

54

00:02:06,380  -->  00:02:10,960
between IAM and your SAML 2.0 Identity Provider, both ways.
55

55

00:02:10,960  -->  00:02:13,070
So under the hood, we'll use an API
56

56

00:02:13,070  -->  00:02:17,550
called AssumeRoleWithSAML comes from the STS service
57

57

00:02:17,550  -->  00:02:19,510
and they will give us temporary credentials
58

58

00:02:19,510  -->  00:02:21,350
using SAML Assertion.
59

59

00:02:21,350  -->  00:02:22,590
So as I said,
60

60

00:02:22,590  -->  00:02:25,010
SAML 2.0 is the old way
61

61

00:02:25,010  -->  00:02:27,241
and now the newer Amazon Single Sign-On service
62

62

00:02:27,241  -->  00:02:30,220
is a new manage in super way to get this working,
63

63

00:02:30,220  -->  00:02:31,053
but still,
64

64

00:02:31,053  -->  00:02:34,340
we have to learn about SAML 2.0 Federation in here.
65

65

00:02:34,340  -->  00:02:36,648
So, the best way to understand this is,
66

66

00:02:36,648  -->  00:02:37,640
to go through a diagram.
67

67

00:02:37,640  -->  00:02:41,000
So, we have our corporation where our Identity Provider sits
68

68

00:02:41,000  -->  00:02:44,900
and AWS and our user wants to access an S3 bucket.
69

69

00:02:44,900  -->  00:02:46,620
Now, inside of our corporation
70

70

00:02:46,620  -->  00:02:49,020
we have a Portal or Identity Provider
71

71

00:02:49,020  -->  00:02:52,930
and the user will make an authentication request to the IdP.
72

72

00:02:52,930  -->  00:02:56,860
The IdP will verify the request through an Identity Store,
73

73

00:02:56,860  -->  00:02:58,470
for example, LDAP-based,
74

74

00:02:58,470  -->  00:03:00,732
and then it will return SAML Assertion,
75

75

00:03:00,732  -->  00:03:03,640
if the login is successful.
76

76

00:03:03,640  -->  00:03:05,657
So, this SAML Assertion is a proof that the user,
77

77

00:03:05,657  -->  00:03:07,600
is who they claim to be
78

78

00:03:07,600  -->  00:03:10,120
and therefore with this SAML Assertion,
79

79

00:03:10,120  -->  00:03:13,000
the user can call the STS service
80

80

00:03:13,000  -->  00:03:15,230
with AssumeRoleWithSAML API
81

81

00:03:15,230  -->  00:03:18,420
and STS will verify the assertion, make sure that yes,
82

82

00:03:18,420  -->  00:03:20,630
it is the one that is trusted and then say,
83

83

00:03:20,630  -->  00:03:24,350
okay, here are some Temporary Security Credentials for you.
84

84

00:03:24,350  -->  00:03:26,980
And the user will be able to access the AWS APIs,
85

85

00:03:26,980  -->  00:03:28,910
using that mechanism.
86

86

00:03:28,910  -->  00:03:31,840
It is very similar if the user wants to access
87

87

00:03:31,840  -->  00:03:32,920
the console of AWS,
88

88

00:03:32,920  -->  00:03:34,300
so very similar setup,
89

89

00:03:34,300  -->  00:03:37,640
so, we still have the IdP and the LDAP Identity based Store.
90

90

00:03:37,640  -->  00:03:40,510
We have the authentication loop, as I said from before,
91

91

00:03:40,510  -->  00:03:42,761
but this time we post to AWS Sign-in,
92

92

00:03:42,761  -->  00:03:45,670
in this endpoint with slash SAML.
93

93

00:03:45,670  -->  00:03:47,190
And what this will return is that,
94

94

00:03:47,190  -->  00:03:49,870
it will return a security credentials
95

95

00:03:49,870  -->  00:03:51,630
through the STS service
96

96

00:03:51,630  -->  00:03:52,657
and this will return a special URL,
97

97

00:03:52,657  -->  00:03:55,470
the signin URL for the AWS console
98

98

00:03:55,470  -->  00:03:57,247
and this URL will be used by the user,
99

99

00:03:57,247  -->  00:04:00,210
to be redirected into the AWS Management Console
100

100

00:04:00,210  -->  00:04:02,100
and from there on, everything is good.
101

101

00:04:02,100  -->  00:04:03,930
So these two flows are very similar
102

102

00:04:03,930  -->  00:04:07,940
because they use the same semi 2.0 Federation.
103

103

00:04:07,940  -->  00:04:10,470
Now, if we have ADFS, it's something you may have,
104

104

00:04:10,470  -->  00:04:13,660
well, it is the exact same mechanism as before,
105

105

00:04:13,660  -->  00:04:15,870
the only difference is that on the left hand side,
106

106

00:04:15,870  -->  00:04:19,160
we have the Microsoft Active Directory Federation services
107

107

00:04:19,160  -->  00:04:20,400
on the top left,
108

108

00:04:20,400  -->  00:04:23,080
and then on the bottom right, where the user sits,
109

109

00:04:23,080  -->  00:04:25,240
is Active Directory itself.
110

110

00:04:25,240  -->  00:04:26,900
Okay. So this is for you to understand,
111

111

00:04:26,900  -->  00:04:29,732
what is the difference between the IdP, so ADFS
112

112

00:04:29,732  -->  00:04:33,636
and the directory itself, which is Active Directory.
113

113

00:04:33,636  -->  00:04:34,469
Okay.
114

114

00:04:34,469  -->  00:04:37,350
More complicated and definitely older is that,
115

115

00:04:37,350  -->  00:04:40,880
if your Identity Provider is not compatible with SAML 2.0,
116

116

00:04:40,880  -->  00:04:43,740
then you need to use a Custom Identity Broker.
117

117

00:04:43,740  -->  00:04:46,222
So, let's say we want to access AWS services
118

118

00:04:46,222  -->  00:04:48,270
and the Management Console
119

119

00:04:48,270  -->  00:04:50,580
and we have our corporation Identity Provider,
120

120

00:04:50,580  -->  00:04:52,950
we'll have a Custom Identity Broker.
121

121

00:04:52,950  -->  00:04:55,750
Now, the user will login to the Identity Broker,
122

122

00:04:55,750  -->  00:04:57,666
which will verify the login itself,
123

123

00:04:57,666  -->  00:04:59,672
but then, the Identity Broker,
124

124

00:04:59,672  -->  00:05:03,480
will be the one to authenticate and request
125

125

00:05:03,480  -->  00:05:05,020
temporary credentials from AWS,
126

126

00:05:05,020  -->  00:05:08,210
so this time, there is no AWS API that can be used,
127

127

00:05:08,210  -->  00:05:11,690
so therefore the Custom Identity Broker has admin power
128

128

00:05:11,690  -->  00:05:13,053
and can request temporary credentials,
129

129

00:05:13,053  -->  00:05:15,590
directly from the STS service,
130

130

00:05:15,590  -->  00:05:18,090
which will be returning these credentials themselves.
131

131

00:05:18,090  -->  00:05:21,405
Now, that means that the Identity Broker is responsible
132

132

00:05:21,405  -->  00:05:25,660
and must determine the appropriate IAM role for that user,
133

133

00:05:25,660  -->  00:05:28,342
so it pushes the management of the users
134

134

00:05:28,342  -->  00:05:30,760
into the Identity Broker itself.
135

135

00:05:30,760  -->  00:05:32,460
Then the only way for it to work is,
136

136

00:05:32,460  -->  00:05:35,960
to use the AssumeRole or GetFederation Token API from STS,
137

137

00:05:35,960  -->  00:05:38,460
directly from the Custom Identity Broker.
138

138

00:05:38,460  -->  00:05:40,900
So, once the security credentials are retrieved,
139

139

00:05:40,900  -->  00:05:42,180
then they're passed on to the user
140

140

00:05:42,180  -->  00:05:44,316
and the user can access the APIs AWS
141

141

00:05:44,316  -->  00:05:48,120
or be redirected through the Management Console.
142

142

00:05:48,120  -->  00:05:50,480
So again, these are the old ways of doing things,
143

143

00:05:50,480  -->  00:05:53,391
SSO will come up later in this course.
144

144

00:05:53,391  -->  00:05:55,720
Now, with Web Identity Federation,
145

145

00:05:55,720  -->  00:05:56,710
we have two flavors,
146

146

00:05:56,710  -->  00:05:59,190
we have without Cognito and with Cognito.
147

147

00:05:59,190  -->  00:06:02,140
So, without Cognito is not recommended by AWS anymore,
148

148

00:06:02,140  -->  00:06:04,180
it is recommended to use Cognito instead,
149

149

00:06:04,180  -->  00:06:06,310
but still you need to know about it.
150

150

00:06:06,310  -->  00:06:08,490
So, what is web identity Federation?
151

151

00:06:08,490  -->  00:06:10,560
So, this time we have an untrusted environment,
152

152

00:06:10,560  -->  00:06:13,339
so before it was our corporation, so we knew the clients
153

153

00:06:13,339  -->  00:06:15,950
but in this case it is cloud
154

154

00:06:15,950  -->  00:06:18,711
and we want to access services from our client directly,
155

155

00:06:18,711  -->  00:06:20,580
but we are going to authenticate
156

156

00:06:20,580  -->  00:06:22,170
with a third party Identity Provider,
157

157

00:06:22,170  -->  00:06:24,500
it could be Amazon Google, Facebook
158

158

00:06:24,500  -->  00:06:27,404
or any OpenID Connect Compatible IdP.
159

159

00:06:27,404  -->  00:06:30,140
So, this obviously will be set up with AWS,
160

160

00:06:30,140  -->  00:06:31,400
as a trust mechanism
161

161

00:06:31,400  -->  00:06:32,233
and so the flow is that,
162

162

00:06:32,233  -->  00:06:35,570
the client will login into the IdP, the third party IdP
163

163

00:06:36,410  -->  00:06:38,700
and then the Web Identity Token
164

164

00:06:38,700  -->  00:06:41,260
is going to be shared back with the clients.
165

165

00:06:41,260  -->  00:06:43,676
The client will use a special STS API
166

166

00:06:43,676  -->  00:06:46,786
called the AssumeRoleWithWebIdentity API
167

167

00:06:46,786  -->  00:06:49,276
and then by trading that token,
168

168

00:06:49,276  -->  00:06:53,993
it will receive a Temporary Security Credentials for AWS.
169

169

00:06:53,993  -->  00:06:56,860
These credentials will be used to access
170

170

00:06:56,860  -->  00:06:58,310
AWS resources directly.
171

171

00:06:58,310  -->  00:07:00,470
So, this is the old way without Cognito.
172

172

00:07:00,470  -->  00:07:03,030
With Cognito it's a little bit more secure and more simple.
173

173

00:07:03,030  -->  00:07:06,030
So, it's preferred over Web Identity Federation
174

174

00:07:06,030  -->  00:07:08,610
because here in Cognito, we can create IAM Roles
175

175

00:07:08,610  -->  00:07:10,043
with the least privileged needed
176

176

00:07:10,043  -->  00:07:11,800
and then we just need to build the trust
177

177

00:07:11,800  -->  00:07:14,830
between the OIDC IdP and AWS.
178

178

00:07:14,830  -->  00:07:16,420
So now, we have the Cognito service,
179

179

00:07:16,420  -->  00:07:20,110
the client still authenticates to a party Identity Provider,
180

180

00:07:20,110  -->  00:07:21,440
gets a token back,
181

181

00:07:21,440  -->  00:07:24,295
but then the token is exchanged with Amazon Cognito,
182

182

00:07:24,295  -->  00:07:26,880
which will return a Cognito token.
183

183

00:07:26,880  -->  00:07:29,510
That Cognito token can be exchanged with STS
184

184

00:07:29,510  -->  00:07:32,460
to receive a Temporary Security Credential for AWS.
185

185

00:07:32,460  -->  00:07:34,658
And then the client will be able to access
186

186

00:07:34,658  -->  00:07:37,030
the AWS resources directly.
187

187

00:07:37,030  -->  00:07:40,090
So, why should we use this mechanism with Cognito?
188

188

00:07:40,090  -->  00:07:42,290
Well, Cognito will support anonymous users,
189

189

00:07:42,290  -->  00:07:43,340
which is a plus.
190

190

00:07:43,340  -->  00:07:47,120
It will support MFA and it will have data synchronization.
191

191

00:07:47,120  -->  00:07:49,620
So in that instance, Amazon Cognito operates,
192

192

00:07:49,620  -->  00:07:50,453
at what's called,
193

193

00:07:50,453  -->  00:07:52,130
a token vending machine,
194

194

00:07:52,130  -->  00:07:55,470
because it exchanges token for credentials.
195

195

00:07:55,470  -->  00:07:56,303
Okay.
196

196

00:07:56,303  -->  00:07:58,350
So when we have Web Identity Federation,
197

197

00:07:58,350  -->  00:07:59,840
can we restrict IAM policy?
198

198

00:07:59,840  -->  00:08:00,820
The answer is yes,
199

199

00:08:00,820  -->  00:08:02,795
you can use an IM policy variable.
200

200

00:08:02,795  -->  00:08:05,450
And so, here is an example of a policy
201

201

00:08:05,450  -->  00:08:10,450
that allows the user to only list a bucket with a prefix
202

202

00:08:10,708  -->  00:08:12,570
as the user ID
203

203

00:08:12,570  -->  00:08:13,841
and also to get update
204

204

00:08:13,841  -->  00:08:17,270
and put objects with that specific prefix.
205

205

00:08:17,270  -->  00:08:18,540
So, the idea is that,
206

206

00:08:18,540  -->  00:08:20,790
when you have a Web Identity Federation,
207

207

00:08:20,790  -->  00:08:22,180
you can use some special variables,
208

208

00:08:22,180  -->  00:08:25,668
for example, cognito-identity.amazonaws.com:sub
209

209

00:08:25,668  -->  00:08:29,175
or amazon.com:user_id and so on,
210

210

00:08:29,175  -->  00:08:32,510
to restrict your IAM policies with conditions
211

211

00:08:32,510  -->  00:08:33,710
and make sure that the users
212

212

00:08:33,710  -->  00:08:35,370
really have the restrictions they need.
213

213

00:08:35,370  -->  00:08:36,350
Okay.
214

214

00:08:36,350  -->  00:08:38,830
So that's it for Identity Federation,
215

215

00:08:38,830  -->  00:08:39,880
these are the old ways,
216

216

00:08:39,880  -->  00:08:41,300
obviously, except what me using Cognito
217

217

00:08:41,300  -->  00:08:43,810
and we'll see SSO in the future lecture.
218

218

00:08:43,810  -->  00:08:44,750
So, hope you like this
219

219

00:08:44,750  -->  00:08:47,760
and I would strongly suggest to revisit this lecture,
220

220

00:08:47,760  -->  00:08:50,210
one more time before exam and it should all make sense
221

221

00:08:50,210  -->  00:08:52,160
and I will see you in the next lecture.
