WEBVTT
1
1

00:00:00.000  -->  00:00:02.100
<v Presenter>So now let's look at global context keys</v>
2

2

00:00:02.100  -->  00:00:03.750
for the IAM conditions.
3

3

00:00:03.750  -->  00:00:06.090
The first one is requested region
4

4

00:00:06.090  -->  00:00:08.340
which corresponds to the AWS region
5

5

00:00:08.340  -->  00:00:10.320
of the request itself.
6

6

00:00:10.320  -->  00:00:12.750
So this is used to restrict specific actions
7

7

00:00:12.750  -->  00:00:14.160
in specific regions.
8

8

00:00:14.160  -->  00:00:15.930
For example, on the right hand side,
9

9

00:00:15.930  -->  00:00:19.830
we allow to stop or to terminate on anything
10

10

00:00:19.830  -->  00:00:23.670
if you are in eu-west-1, eu-west-2, or eu-west-3.
11

11

00:00:23.670  -->  00:00:26.580
So we effectively restricted these API calls
12

12

00:00:26.580  -->  00:00:28.350
to specific regions.
13

13

00:00:28.350  -->  00:00:30.870
But there is a catch for requested region
14

14

00:00:30.870  -->  00:00:32.400
and you'll see it right now.
15

15

00:00:32.400  -->  00:00:35.340
So when using a global AWS service
16

16

00:00:35.340  -->  00:00:37.530
then the region that you make the API call into
17

17

00:00:37.530  -->  00:00:40.260
is always going to be us-east-1.
18

18

00:00:40.260  -->  00:00:41.310
So the workaround
19

19

00:00:41.310  -->  00:00:43.530
to denying everything outside regions
20

20

00:00:43.530  -->  00:00:45.900
except these global services
21

21

00:00:45.900  -->  00:00:48.450
is to use deny and not action.
22

22

00:00:48.450  -->  00:00:50.340
So here we deny anything
23

23

00:00:50.340  -->  00:00:53.580
that's not CloudFront, IAM, Route53, and Support
24

24

00:00:53.580  -->  00:00:55.740
which are restricted to us-east-1.
25

25

00:00:55.740  -->  00:00:57.750
And then we keep the same condition as before.
26

26

00:00:57.750  -->  00:01:00.450
So string, not equals, AWS requested region,
27

27

00:01:00.450  -->  00:01:03.960
and then eu-west-1, 2, 3, and eu-central-1.
28

28

00:01:03.960  -->  00:01:05.137
So here, effectively we're saying,
29

29

00:01:05.137  -->  00:01:08.910
"Hey, deny everything outside of these four regions
30

30

00:01:08.910  -->  00:01:09.900
I have right here.
31

31

00:01:09.900  -->  00:01:10.950
But by the way,
32

32

00:01:10.950  -->  00:01:15.950
please don't deny CloudFront, IAM, Route53, and Support."
33

33

00:01:16.020  -->  00:01:17.460
So this can get quite complicated.
34

34

00:01:17.460  -->  00:01:18.293
As you can see
35

35

00:01:18.293  -->  00:01:19.680
we have effect, deny,
36

36

00:01:19.680  -->  00:01:21.480
not action, and then some services.
37

37

00:01:21.480  -->  00:01:23.850
And we have a condition with string not equals
38

38

00:01:23.850  -->  00:01:26.730
and the global context key requested region.
39

39

00:01:26.730  -->  00:01:27.690
But this is the kind of things
40

40

00:01:27.690  -->  00:01:29.460
you have to be comfortable with
41

41

00:01:29.460  -->  00:01:31.023
going into the exam.
42

42

00:01:32.040  -->  00:01:34.170
Next we have the PrincipleArn.
43

43

00:01:34.170  -->  00:01:36.510
So if we have a look at an IAM user
44

44

00:01:36.510  -->  00:01:40.050
doing a list bucket operation on this S3 bucket
45

45

00:01:40.050  -->  00:01:41.550
then we can have a condition
46

46

00:01:41.550  -->  00:01:43.980
saying that, "Hey, this is only allowed
47

47

00:01:43.980  -->  00:01:45.240
if the PrincipleArn,
48

48

00:01:45.240  -->  00:01:47.790
so the user or the role making the request,
49

49

00:01:47.790  -->  00:01:50.550
is equals to the user Alice."
50

50

00:01:50.550  -->  00:01:53.040
So here you're going to compare the ARN of the principle
51

51

00:01:53.040  -->  00:01:56.520
that made the request with ARN specified in the policy.
52

52

00:01:56.520  -->  00:01:59.880
And for roles, you're going to get the ARN of the role
53

53

00:01:59.880  -->  00:02:02.880
but not the ARN of the user that assumed that role.
54

54

00:02:02.880  -->  00:02:04.020
So it's very important.
55

55

00:02:04.020  -->  00:02:07.050
The principle is the thing making the API call.
56

56

00:02:07.050  -->  00:02:09.150
So there is some following types of principle allowed.
57

57

00:02:09.150  -->  00:02:10.590
You have the IAM role.
58

58

00:02:10.590  -->  00:02:12.090
You have the IAM user.
59

59

00:02:12.090  -->  00:02:14.670
You have the AWS root user.
60

60

00:02:14.670  -->  00:02:19.670
And you have also, the AWS STS federated user sessions.
61

61

00:02:20.040  -->  00:02:21.510
So this is for principle ARN.
62

62

00:02:21.510  -->  00:02:22.830
That's what makes the request.
63

63

00:02:22.830  -->  00:02:24.900
Now we have also SourceArn.
64

64

00:02:24.900  -->  00:02:26.970
So if we have an example in here,
65

65

00:02:26.970  -->  00:02:28.020
we have an S3 bucket
66

66

00:02:28.020  -->  00:02:31.380
and we have created an S3 event notifications.
67

67

00:02:31.380  -->  00:02:35.430
So that's these events are published into an SNS topic.
68

68

00:02:35.430  -->  00:02:36.780
So what does that mean?
69

69

00:02:36.780  -->  00:02:39.390
Well that means that the thing making a request
70

70

00:02:39.390  -->  00:02:41.430
into SNS is your S3 bucket.
71

71

00:02:41.430  -->  00:02:43.920
And this is where we use this source ARN.
72

72

00:02:43.920  -->  00:02:45.390
So it's going to compare,
73

73

00:02:45.390  -->  00:02:47.940
in the service to service type of request,
74

74

00:02:47.940  -->  00:02:51.690
the ARN of what the source is to what's in the policy.
75

75

00:02:51.690  -->  00:02:53.460
So here we have an example.
76

76

00:02:53.460  -->  00:02:54.293
On the bottom right
77

77

00:02:54.293  -->  00:02:57.690
we see that the source ARN should be a specific bucket.
78

78

00:02:57.690  -->  00:03:01.170
So this key, AWS SourceArn is only going to be included
79

79

00:03:01.170  -->  00:03:04.350
when you have a service to service type of interaction.
80

80

00:03:04.350  -->  00:03:05.580
So for example, as I said,
81

81

00:03:05.580  -->  00:03:09.570
when an S3 bucket triggers an update to an SNS topic
82

82

00:03:09.570  -->  00:03:11.610
with the SNS published out of API
83

83

00:03:11.610  -->  00:03:12.900
you can use the SourceArn
84

84

00:03:12.900  -->  00:03:14.790
to guarantee that the SNS topic
85

85

00:03:14.790  -->  00:03:17.853
can only receive data from that S3 bucket specifically.
86

86

00:03:18.870  -->  00:03:22.050
Now we have the IAM condition called CalledVia.
87

87

00:03:22.050  -->  00:03:23.280
So this is very interesting.
88

88

00:03:23.280  -->  00:03:26.520
It's only in some specific use cases,
89

89

00:03:26.520  -->  00:03:27.353
but for example,
90

90

00:03:27.353  -->  00:03:31.440
say you're using Athena to query an S3 buckets.
91

91

00:03:31.440  -->  00:03:33.510
Here we are going to look at the service
92

92

00:03:33.510  -->  00:03:36.900
that made the request on behalf of the IAM user or role.
93

93

00:03:36.900  -->  00:03:38.910
And it's going to contain a list of service
94

94

00:03:38.910  -->  00:03:41.670
in order that made the request on the principal's behalf.
95

95

00:03:41.670  -->  00:03:43.350
And it supports only very few services.
96

96

00:03:43.350  -->  00:03:47.760
So you have Athena, CloudFormation, DynamoDB, and KMS.
97

97

00:03:47.760  -->  00:03:49.770
So that means that when you're using CloudFormation
98

98

00:03:49.770  -->  00:03:52.260
to do an API call on whatever
99

99

00:03:52.260  -->  00:03:55.350
you're going to have AWS CalledVia CloudFormation.
100

100

00:03:55.350  -->  00:03:58.350
When you're using Athena to query the content of S3 bucket
101

101

00:03:58.350  -->  00:04:01.530
you're going to get AWS CalledVia Athena.
102

102

00:04:01.530  -->  00:04:04.064
So remember you have Athena, CloudFormation, DynamoDB,
103

103

00:04:04.064  -->  00:04:06.153
and KMS and that's it.
104

104

00:04:07.260  -->  00:04:09.120
Next we have IP and VPC conditions.
105

105

00:04:09.120  -->  00:04:11.296
So we've seen aws:SourceIp
106

106

00:04:11.296  -->  00:04:14.280
which is corresponding to the public requester IP.
107

107

00:04:14.280  -->  00:04:17.310
And if you're using public APIs on AWS,
108

108

00:04:17.310  -->  00:04:19.680
maybe from an EC2 instance as a public IP,
109

109

00:04:19.680  -->  00:04:21.300
then you will see the public EC2 IP.
110

110

00:04:21.300  -->  00:04:23.010
So everything is public.
111

111

00:04:23.010  -->  00:04:25.110
And whenever you make requests privately
112

112

00:04:25.110  -->  00:04:26.640
through VPC Endpoints
113

113

00:04:26.640  -->  00:04:29.100
then source IP is not going to be present.
114

114

00:04:29.100  -->  00:04:31.173
Instead, you will have the VpcSourceIp.
115

115

00:04:32.340  -->  00:04:35.730
So this isn't the requester IP, the private IP,
116

116

00:04:35.730  -->  00:04:38.610
made through request that are going
117

117

00:04:38.610  -->  00:04:40.500
through the VPC Endpoints.
118

118

00:04:40.500  -->  00:04:43.560
You also have the aws:SourceVpce
119

119

00:04:43.560  -->  00:04:45.990
which allows you to identify
120

120

00:04:45.990  -->  00:04:49.110
the VPC Endpoint that the request is made through.
121

121

00:04:49.110  -->  00:04:51.840
And finally, aws:SourceVpc
122

122

00:04:51.840  -->  00:04:53.820
which identifies the specific VPC
123

123

00:04:53.820  -->  00:04:55.500
the request is made from,
124

124

00:04:55.500  -->  00:04:57.990
again, through a VPC Endpoints.
125

125

00:04:57.990  -->  00:05:00.090
So it is very common to use this conditions
126

126

00:05:00.090  -->  00:05:01.560
with S3 bucket policies.
127

127

00:05:01.560  -->  00:05:03.870
If your bucket is accessed publicly,
128

128

00:05:03.870  -->  00:05:05.820
or at least accessed through API calls
129

129

00:05:05.820  -->  00:05:08.280
made to the public endpoint of AWS,
130

130

00:05:08.280  -->  00:05:11.250
then use the first source IP condition.
131

131

00:05:11.250  -->  00:05:13.410
Otherwise, if you're using VPC Endpoints
132

132

00:05:13.410  -->  00:05:16.123
then remember we have VpcSourceI, SourceVpce,
133

133

00:05:17.026  -->  00:05:18.690
and SourceVpc.
134

134

00:05:18.690  -->  00:05:20.070
So, here in this example,
135

135

00:05:20.070  -->  00:05:23.220
we are restricting access from public IP addresses.
136

136

00:05:23.220  -->  00:05:24.750
So we deny everything
137

137

00:05:24.750  -->  00:05:28.830
except when the IP address is within this range.
138

138

00:05:28.830  -->  00:05:30.210
So this is what this policy does.
139

139

00:05:30.210  -->  00:05:31.890
Should be very familiar to you.
140

140

00:05:31.890  -->  00:05:36.210
And for example, we can also restrict private IP addresses
141

141

00:05:36.210  -->  00:05:38.430
and force access to VPC Endpoints.
142

142

00:05:38.430  -->  00:05:40.260
So here we have a denied star
143

143

00:05:40.260  -->  00:05:42.690
where the not IP address
144

144

00:05:42.690  -->  00:05:45.480
is not in this private IP range.
145

145

00:05:45.480  -->  00:05:49.080
So this is a combination of everything we've seen so far.
146

146

00:05:49.080  -->  00:05:51.990
Next we have resource tag and principle tag.
147

147

00:05:51.990  -->  00:05:53.580
So they allow you to control access
148

148

00:05:53.580  -->  00:05:56.130
to AWS resources using tags.
149

149

00:05:56.130  -->  00:05:58.740
And so these AWS resource tag
150

150

00:05:58.740  -->  00:06:03.180
represent tags that exist on specified AWS resources.
151

151

00:06:03.180  -->  00:06:06.480
So for example, it would be tags on an EC2 instance.
152

152

00:06:06.480  -->  00:06:09.600
And sometimes you may see something like EC2 resource tag
153

153

00:06:09.600  -->  00:06:12.240
which is a service specific tag.
154

154

00:06:12.240  -->  00:06:13.800
So you're saying, "Hey, I want to restrict
155

155

00:06:13.800  -->  00:06:17.340
the resource tag condition only to the EC2 service."
156

156

00:06:17.340  -->  00:06:20.160
So resource tag is for tags on resources
157

157

00:06:20.160  -->  00:06:21.960
and principle tag are for tags
158

158

00:06:21.960  -->  00:06:23.910
that exist on the IAM user
159

159

00:06:23.910  -->  00:06:26.370
or the IAM role making the request.
160

160

00:06:26.370  -->  00:06:29.730
So if you have a look at this IAM policy right here,
161

161

00:06:29.730  -->  00:06:31.560
we see that in the condition
162

162

00:06:31.560  -->  00:06:35.610
we have EC2 resource tag project data analytics,
163

163

00:06:35.610  -->  00:06:38.010
which means that we want the resource tags
164

164

00:06:38.010  -->  00:06:40.290
or the tag on the EC2 instance
165

165

00:06:40.290  -->  00:06:44.940
of key project to have the value data analytics.
166

166

00:06:44.940  -->  00:06:48.210
And then we want the tag, the principle tag,
167

167

00:06:48.210  -->  00:06:51.090
on the user or the role making the request.
168

168

00:06:51.090  -->  00:06:55.380
We want the key department to be equal to the value data.
169

169

00:06:55.380  -->  00:06:57.330
So remember you have to distinguish
170

170

00:06:57.330  -->  00:06:59.820
between resource tags and principal tags
171

171

00:06:59.820  -->  00:07:01.260
and you should be good to go.
172

172

00:07:01.260  -->  00:07:02.310
Alright, that's it.
173

173

00:07:02.310  -->  00:07:03.330
I hope you liked it.
174

174

00:07:03.330  -->  00:07:05.283
And I will see you in the next lecture.
