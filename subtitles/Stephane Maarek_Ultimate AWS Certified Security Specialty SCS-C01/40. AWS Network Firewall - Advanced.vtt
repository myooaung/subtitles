WEBVTT
1
1

00:00:00.150  -->  00:00:00.983
<v Instructor>So let's discuss</v>
2

2

00:00:00.983  -->  00:00:04.260
a few deployment architectures for a network firewall.
3

3

00:00:04.260  -->  00:00:07.080
So let's take an example where you have a protected VPC,
4

4

00:00:07.080  -->  00:00:09.720
and we have a firewall subnet that will contain
5

5

00:00:09.720  -->  00:00:11.220
a firewall endpoint connected
6

6

00:00:11.220  -->  00:00:12.990
to the network firewall service.
7

7

00:00:12.990  -->  00:00:16.140
We'll also have a protected subnet and the private subnets,
8

8

00:00:16.140  -->  00:00:18.420
and we also have an internet gateway.
9

9

00:00:18.420  -->  00:00:20.250
Okay, so then in the protected subnet,
10

10

00:00:20.250  -->  00:00:22.470
we're going to deploy an Application Load Balancer,
11

11

00:00:22.470  -->  00:00:24.030
and a NAT gateway.
12

12

00:00:24.030  -->  00:00:25.320
And in the private subnet,
13

13

00:00:25.320  -->  00:00:27.840
we're going to deploy EC2 instances,
14

14

00:00:27.840  -->  00:00:29.370
and we're going to define a route table.
15

15

00:00:29.370  -->  00:00:31.110
So we have the private subnet route table
16

16

00:00:31.110  -->  00:00:32.850
that links to the NAT gateway,
17

17

00:00:32.850  -->  00:00:34.980
the protected subnet route table that links
18

18

00:00:34.980  -->  00:00:38.070
to the VPC endpoint of the firewall.
19

19

00:00:38.070  -->  00:00:41.310
We have this firewall subnet route table
20

20

00:00:41.310  -->  00:00:44.220
that is just normal and the ingress route table
21

21

00:00:44.220  -->  00:00:46.290
of the internet gateway to link you back
22

22

00:00:46.290  -->  00:00:48.030
to the firewall endpoints.
23

23

00:00:48.030  -->  00:00:49.780
Now, I'm going to represent in blue
24

24

00:00:51.172  -->  00:00:53.310
the traffic outbound route.
25

25

00:00:53.310  -->  00:00:57.420
So the EC2 instances go to the NAT gateway,
26

26

00:00:57.420  -->  00:00:59.880
and then the NAT gateway goes to the firewall endpoint,
27

27

00:00:59.880  -->  00:01:01.004
which is going to interact
28

28

00:01:01.004  -->  00:01:03.810
with the AWS network firewall service.
29

29

00:01:03.810  -->  00:01:06.335
And once that traffic is inspected or authorized,
30

30

00:01:06.335  -->  00:01:08.730
then it can go to the internet gateway,
31

31

00:01:08.730  -->  00:01:10.680
and then to the internet.
32

32

00:01:10.680  -->  00:01:14.100
In terms of inbound, it goes into the internet gateway,
33

33

00:01:14.100  -->  00:01:15.510
through the firewall endpoint,
34

34

00:01:15.510  -->  00:01:17.460
which is going to verify the traffic
35

35

00:01:17.460  -->  00:01:19.260
with the network firewall service.
36

36

00:01:19.260  -->  00:01:22.020
Then send it, for example, to an Application Load Balancer,
37

37

00:01:22.020  -->  00:01:25.350
which will forward it to your EC2 instances.
38

38

00:01:25.350  -->  00:01:28.320
And then the EC2 instances reply back to the ALB,
39

39

00:01:28.320  -->  00:01:31.500
the traffic goes back to the firewall endpoint,
40

40

00:01:31.500  -->  00:01:34.800
which is again going to be analyzed by the network firewall.
41

41

00:01:34.800  -->  00:01:38.400
And then the traffic is sent back to the internet gateway,
42

42

00:01:38.400  -->  00:01:40.140
and back to the internet.
43

43

00:01:40.140  -->  00:01:42.270
So this really shows the two kind of traffics
44

44

00:01:42.270  -->  00:01:44.190
that the firewall endpoints can analyze.
45

45

00:01:44.190  -->  00:01:47.040
It could be either inbound traffic or outbound traffic.
46

46

00:01:47.040  -->  00:01:49.802
And as you can see, it's a combination of route tables
47

47

00:01:49.802  -->  00:01:50.973
to make it work.
48

48

00:01:51.960  -->  00:01:54.930
Now, there are different ways to deploy a network firewall.
49

49

00:01:54.930  -->  00:01:58.230
So here we have a VPC with a firewall subnet,
50

50

00:01:58.230  -->  00:01:59.760
and public subnets,
51

51

00:01:59.760  -->  00:02:02.838
and we define a firewall policy which contain rule groups,
52

52

00:02:02.838  -->  00:02:05.160
and these will define how the network firewall
53

53

00:02:05.160  -->  00:02:06.720
is going to behave.
54

54

00:02:06.720  -->  00:02:08.520
Now, if you wanted to automate
55

55

00:02:08.520  -->  00:02:10.440
adding rules to this rule group,
56

56

00:02:10.440  -->  00:02:13.830
you could use GuardDuty to automatically generate findings.
57

57

00:02:13.830  -->  00:02:16.281
These will happen and be generated and stored
58

58

00:02:16.281  -->  00:02:17.932
in the security hub.
59

59

00:02:17.932  -->  00:02:21.240
Then we can use the EventBridge integration
60

60

00:02:21.240  -->  00:02:23.880
to take these findings, and from these findings,
61

61

00:02:23.880  -->  00:02:26.820
we can trigger a step function to, for example,
62

62

00:02:26.820  -->  00:02:29.100
to check whether or not the IP that
63

63

00:02:29.100  -->  00:02:31.260
is attacking us is in a database.
64

64

00:02:31.260  -->  00:02:33.810
And if it is not, then block the traffic
65

65

00:02:33.810  -->  00:02:36.600
by making a API call into network firewall,
66

66

00:02:36.600  -->  00:02:40.110
so that we know that we should add this IP
67

67

00:02:40.110  -->  00:02:43.950
to the rule group and therefore effectively block this IP
68

68

00:02:43.950  -->  00:02:45.630
from our network.
69

69

00:02:45.630  -->  00:02:47.400
Okay, and then once you've done this,
70

70

00:02:47.400  -->  00:02:50.550
you can always send the success or the failure of this
71

71

00:02:50.550  -->  00:02:52.800
to different SNS topics.
72

72

00:02:52.800  -->  00:02:55.170
Also, how do we deal with encrypted traffic
73

73

00:02:55.170  -->  00:02:56.940
in the network firewall?
74

74

00:02:56.940  -->  00:02:59.340
Well, the network firewall does not support
75

75

00:02:59.340  -->  00:03:02.670
deep packet inspection for encrypted traffic.
76

76

00:03:02.670  -->  00:03:05.160
So there are couple of ways you can go around it.
77

77

00:03:05.160  -->  00:03:07.440
The first one is that you can decrypt the traffic
78

78

00:03:07.440  -->  00:03:09.390
using a Network Load Balancer.
79

79

00:03:09.390  -->  00:03:10.470
So how does that work?
80

80

00:03:10.470  -->  00:03:12.360
Well, the users are using HTTPS,
81

81

00:03:12.360  -->  00:03:14.551
which is the encrypted version of HTTP.
82

82

00:03:14.551  -->  00:03:17.490
And then we are going to use a Network Load Balancer,
83

83

00:03:17.490  -->  00:03:20.280
which is going to perform a TLS termination,
84

84

00:03:20.280  -->  00:03:23.133
and therefore forward HTTP unencrypted traffic
85

85

00:03:23.133  -->  00:03:25.260
to the network firewall where we can
86

86

00:03:25.260  -->  00:03:26.880
do a deep packet inspection,
87

87

00:03:26.880  -->  00:03:30.240
that means looking at the packet content itself.
88

88

00:03:30.240  -->  00:03:32.855
If you're using HTTPS with SNI,
89

89

00:03:32.855  -->  00:03:36.660
then you can block the content based on the SNI host name,
90

90

00:03:36.660  -->  00:03:39.330
because the SNI host name is unencrypted.
91

91

00:03:39.330  -->  00:03:40.410
So that means that, for example,
92

92

00:03:40.410  -->  00:03:43.170
if your users are directly accessing your application
93

93

00:03:43.170  -->  00:03:47.910
through the network firewall in HTTPS with SNI enabled,
94

94

00:03:47.910  -->  00:03:50.610
then you will have the host name present in the request.
95

95

00:03:50.610  -->  00:03:53.310
So we know, for example, that the host name is example.com,
96

96

00:03:53.310  -->  00:03:55.410
which is unencrypted information.
97

97

00:03:55.410  -->  00:03:59.520
And from this information, we can have very basic rules.
98

98

00:03:59.520  -->  00:04:00.600
So remember this for the exam,
99

99

00:04:00.600  -->  00:04:02.550
because this is a question they will ask you.
100

100

00:04:02.550  -->  00:04:03.990
All right, that's it for this lecture.
101

101

00:04:03.990  -->  00:04:06.940
I hope you liked it and I will see you in the next lecture.
