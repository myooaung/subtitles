1
1

00:00:00,540  -->  00:00:02,700
<v Instructor>Okay, so now let's talk about AWS KMS</v>
2

2

00:00:02,700  -->  00:00:04,650
which is a Key Management Service.
3

3

00:00:04,650  -->  00:00:06,600
So anytime you hear encryption in AWS
4

4

00:00:06,600  -->  00:00:08,850
you have to think about KMS, obviously,
5

5

00:00:08,850  -->  00:00:11,580
and it's a way to easily control access to our data
6

6

00:00:11,580  -->  00:00:14,130
and AWS will manage the encryption keys for us.
7

7

00:00:14,130  -->  00:00:16,650
It's fully integrated with IAM for authorization
8

8

00:00:16,650  -->  00:00:19,500
and has seamless integrations into all the air services
9

9

00:00:19,500  -->  00:00:23,550
pretty much so, EBS, S3, Redshift, RDS, SSM
10

10

00:00:23,550  -->  00:00:24,840
et cetera, et cetera.
11

11

00:00:24,840  -->  00:00:29,010
We can use the CLI or the SDK to interact with KMS.
12

12

00:00:29,010  -->  00:00:31,230
So in KMS you have two types of key,
13

13

00:00:31,230  -->  00:00:34,350
you have the symmetric keys and the asymmetric keys.
14

14

00:00:34,350  -->  00:00:37,140
So the symmetric keys were the first offering of KMS,
15

15

00:00:37,140  -->  00:00:39,390
it's a single encryption key that will be used
16

16

00:00:39,390  -->  00:00:41,550
to encrypt and decrypt information.
17

17

00:00:41,550  -->  00:00:43,650
And then all the services that are integrated
18

18

00:00:43,650  -->  00:00:47,460
with AWS KMS use symmetric KMS keys.
19

19

00:00:47,460  -->  00:00:50,070
It's necessary if you wanna do envelope encryption
20

20

00:00:50,070  -->  00:00:51,780
and you never actually get access
21

21

00:00:51,780  -->  00:00:54,210
to the KMS key itself or unencrypted,
22

22

00:00:54,210  -->  00:00:56,820
you must just send data into KMS
23

23

00:00:56,820  -->  00:00:59,460
with a KMS API call to use it.
24

24

00:00:59,460  -->  00:01:01,710
Now the asymmetry key are new
25

25

00:01:01,710  -->  00:01:05,100
and they can allow you to have two kind of public keys,
26

26

00:01:05,100  -->  00:01:08,400
it's a key pair, so it's a public key and a private key.
27

27

00:01:08,400  -->  00:01:10,410
The public key will be used to encrypt
28

28

00:01:10,410  -->  00:01:12,690
and the private key will be used to decrypt.
29

29

00:01:12,690  -->  00:01:14,520
Now, this is very helpful when you want to have
30

30

00:01:14,520  -->  00:01:16,770
encrypt, decrypt or sign and verify operations
31

31

00:01:16,770  -->  00:01:18,180
and you can download the public key,
32

32

00:01:18,180  -->  00:01:20,520
that means that you can encrypt stuff
33

33

00:01:20,520  -->  00:01:22,350
from anywhere with a public key,
34

34

00:01:22,350  -->  00:01:24,600
and you can send the public key to people
35

35

00:01:24,600  -->  00:01:26,850
that you don't trust in untrusted environments.
36

36

00:01:26,850  -->  00:01:30,000
But once the data is encrypted with the public key,
37

37

00:01:30,000  -->  00:01:31,620
only the private key has the power
38

38

00:01:31,620  -->  00:01:33,450
to decrypt your information.
39

39

00:01:33,450  -->  00:01:35,520
You still cannot use the private key unencrypted though,
40

40

00:01:35,520  -->  00:01:38,130
you have to use the KMS API calls.
41

41

00:01:38,130  -->  00:01:41,220
So the use case for an asymmetric key
42

42

00:01:41,220  -->  00:01:43,830
is to have encryptions outside of AWS by users
43

43

00:01:43,830  -->  00:01:48,270
who cannot directly call the KMS API for whatever reason.
44

44

00:01:48,270  -->  00:01:50,700
Now, you have different types of KMS keys.
45

45

00:01:50,700  -->  00:01:53,550
The first type is a Customer Managed Key,
46

46

00:01:53,550  -->  00:01:55,520
and this is a key you create directly in KMS.
47

47

00:01:55,520  -->  00:01:57,450
So you can create, manage, and use them,
48

48

00:01:57,450  -->  00:01:59,160
you can enable, disable them,
49

49

00:01:59,160  -->  00:02:00,930
you can enable a rotation policy
50

50

00:02:00,930  -->  00:02:02,880
to rotate the key every year
51

51

00:02:02,880  -->  00:02:05,100
while the old key is still preserved, of course.
52

52

00:02:05,100  -->  00:02:06,270
And you can add a key policy,
53

53

00:02:06,270  -->  00:02:08,880
which is a resource policy for KMS keys,
54

54

00:02:08,880  -->  00:02:11,460
and you can audit the key usage in CloudTrail.
55

55

00:02:11,460  -->  00:02:12,750
This is the kind of keys you will leverage
56

56

00:02:12,750  -->  00:02:13,583
for envelope encryption,
57

57

00:02:13,583  -->  00:02:16,200
so these are the kind of keys that you manage yourself,
58

58

00:02:16,200  -->  00:02:19,440
therefore, they're called Customer Managed Keys.
59

59

00:02:19,440  -->  00:02:22,950
But a second kind of key is the AWS Managed Keys.
60

60

00:02:22,950  -->  00:02:26,550
So these ones are used exclusively by AWS services
61

61

00:02:26,550  -->  00:02:31,170
such as AWS/S3, AWS/EBS and so on.
62

62

00:02:31,170  -->  00:02:32,610
And this is what you see in the UI
63

63

00:02:32,610  -->  00:02:36,150
when you use the AWS Managed Keys.
64

64

00:02:36,150  -->  00:02:37,770
So they are managed by AWS
65

65

00:02:37,770  -->  00:02:40,320
and they're automatically rotated every year.
66

66

00:02:40,320  -->  00:02:42,870
You can view the key policy and you can audit in CloudTrail
67

67

00:02:42,870  -->  00:02:44,340
but you cannot leverage them
68

68

00:02:44,340  -->  00:02:46,650
for your own encryption operations.
69

69

00:02:46,650  -->  00:02:49,620
And finally, you have AWS Owned Keys,
70

70

00:02:49,620  -->  00:02:52,350
and these are created and managed by AWS,
71

71

00:02:52,350  -->  00:02:55,110
used by some services to protect your resources
72

72

00:02:55,110  -->  00:02:57,630
and they can be used across multiple others accounts,
73

73

00:02:57,630  -->  00:02:59,040
but they're not in your accounts
74

74

00:02:59,040  -->  00:03:01,620
they're used by AWS internally
75

75

00:03:01,620  -->  00:03:04,500
and you cannot view, use, track or audit these keys.
76

76

00:03:04,500  -->  00:03:07,860
But AWS tells you that these keys actually exist.
77

77

00:03:07,860  -->  00:03:10,440
Okay, so now if we want to have a summary
78

78

00:03:10,440  -->  00:03:12,450
of the different types of KMS keys
79

79

00:03:12,450  -->  00:03:13,500
for the Customer Managed Keys
80

80

00:03:13,500  -->  00:03:14,640
you can manage metadata,
81

81

00:03:14,640  -->  00:03:17,190
you can view metadata and you can manage it
82

82

00:03:17,190  -->  00:03:19,080
and you can also use for your accounts
83

83

00:03:19,080  -->  00:03:22,560
and you can have an automatic rotation every one year.
84

84

00:03:22,560  -->  00:03:26,190
The AWS Managed Key can be used in your accounts, okay?
85

85

00:03:26,190  -->  00:03:27,240
But you cannot manage them
86

86

00:03:27,240  -->  00:03:29,460
and they're required to be rotated every one year,
87

87

00:03:29,460  -->  00:03:30,480
this is automatic.
88

88

00:03:30,480  -->  00:03:32,820
And then the Owned keys, you just know they exist
89

89

00:03:32,820  -->  00:03:35,070
but you cannot use them or see them.
90

90

00:03:35,070  -->  00:03:35,903
Okay.
91

91

00:03:35,903  -->  00:03:37,710
Now, how do you create a KMS key?
92

92

00:03:37,710  -->  00:03:41,130
So you have what's called a Key Material Origin
93

93

00:03:41,130  -->  00:03:42,750
and it cannot be changed after creation
94

94

00:03:42,750  -->  00:03:44,880
so you have to define it at creation time.
95

95

00:03:44,880  -->  00:03:48,960
So you have the KMS, which is the AWS KMS key material
96

96

00:03:48,960  -->  00:03:51,210
which is, that means that you are going to have
97

97

00:03:51,210  -->  00:03:54,830
KMS automatically create, generate, and manage the key
98

98

00:03:54,830  -->  00:03:56,910
in its own Key Store to see what happens
99

99

00:03:56,910  -->  00:03:59,580
when you go into KMS and start to create a key.
100

100

00:03:59,580  -->  00:04:02,280
But you have a second option called, External,
101

101

00:04:02,280  -->  00:04:04,260
in that case, while you import
102

102

00:04:04,260  -->  00:04:07,080
the key material directly into the KMS key
103

103

00:04:07,080  -->  00:04:09,000
and you are responsible for securing
104

104

00:04:09,000  -->  00:04:12,000
and managing this key material outside of AWS, okay?
105

105

00:04:12,000  -->  00:04:14,040
So, maybe you just wanna create it outside
106

106

00:04:14,040  -->  00:04:15,540
and then import it into this KMS
107

107

00:04:15,540  -->  00:04:17,490
and then be done and delete it on your end.
108

108

00:04:17,490  -->  00:04:20,040
Or you just wanna keep a copy in KMS
109

109

00:04:20,040  -->  00:04:21,600
and therefore you're responsible obviously
110

110

00:04:21,600  -->  00:04:24,060
for the copy outside of KMS.
111

111

00:04:24,060  -->  00:04:26,760
Now, the last option is to use a Custom Key Store
112

112

00:04:26,760  -->  00:04:28,590
called AWS_CLOUDHSM
113

113

00:04:28,590  -->  00:04:30,810
and this allows you to create the key material
114

114

00:04:30,810  -->  00:04:33,360
directly within your HSM cluster
115

115

00:04:33,360  -->  00:04:36,030
and manage the key material there.
116

116

00:04:36,030  -->  00:04:37,770
So let's consider how it works
117

117

00:04:37,770  -->  00:04:38,910
when you have a Custom Key Store,
118

118

00:04:38,910  -->  00:04:40,650
which is backed by CloudHSM.
119

119

00:04:40,650  -->  00:04:43,170
So you create your CloudHSM cluster as a Custom Key Store
120

120

00:04:43,170  -->  00:04:45,570
and there is a direct integration with KMS.
121

121

00:04:45,570  -->  00:04:47,850
That means that when KMS creates key
122

122

00:04:47,850  -->  00:04:49,530
while the key materials are going to be stored
123

123

00:04:49,530  -->  00:04:51,990
in your HSM cluster that you own and manage,
124

124

00:04:51,990  -->  00:04:54,990
that means that the keys live within your HSM cluster,
125

125

00:04:54,990  -->  00:04:58,410
they are only managed by KMS and used by KMS,
126

126

00:04:58,410  -->  00:05:00,540
and all the cryptographic operations
127

127

00:05:00,540  -->  00:05:03,330
will be directly performed in the HSMs, okay?
128

128

00:05:03,330  -->  00:05:04,860
So this is the architecture.
129

129

00:05:04,860  -->  00:05:07,350
You have your CloudHSM cluster with two AZs
130

130

00:05:07,350  -->  00:05:10,320
and it is directly connected to KMS.
131

131

00:05:10,320  -->  00:05:13,290
So once you have at least two HSMs for high availability
132

132

00:05:13,290  -->  00:05:14,640
then you can integrate with KMS,
133

133

00:05:14,640  -->  00:05:17,520
and then the users can still use the KMS API
134

134

00:05:17,520  -->  00:05:19,410
to view, create a manage keys
135

135

00:05:19,410  -->  00:05:21,840
but behind the scenes, you know for sure that KMS
136

136

00:05:21,840  -->  00:05:24,300
will be using your CloudHSM cluster
137

137

00:05:24,300  -->  00:05:25,920
for all the cryptographic operations
138

138

00:05:25,920  -->  00:05:27,990
and for storing and retrieving these keys.
139

139

00:05:27,990  -->  00:05:28,890
So why do we do this?
140

140

00:05:28,890  -->  00:05:30,840
Well, the use cases is that you need to have
141

141

00:05:30,840  -->  00:05:34,050
direct control over the HSMs for higher security
142

142

00:05:34,050  -->  00:05:36,390
or for security requirements at least.
143

143

00:05:36,390  -->  00:05:37,860
And then the KMS keys,
144

144

00:05:37,860  -->  00:05:40,560
partly maybe they want to be in a dedicated HSM
145

145

00:05:40,560  -->  00:05:43,500
or maybe you need to have a regulatory requirement
146

146

00:05:43,500  -->  00:05:48,060
to have FIPS 140-2 Level 3 level of security,
147

147

00:05:48,060  -->  00:05:51,033
because KMS was only validated at Level 2.
148

148

00:05:52,230  -->  00:05:54,720
Now, if you choose to have an external KMS key source
149

149

00:05:54,720  -->  00:05:55,830
then you can bring your own key
150

150

00:05:55,830  -->  00:05:57,690
using your own key material,
151

151

00:05:57,690  -->  00:05:59,310
and you are going to be responsible
152

152

00:05:59,310  -->  00:06:01,020
for the keys materials security,
153

153

00:06:01,020  -->  00:06:03,990
availability and durability outside of AWS.
154

154

00:06:03,990  -->  00:06:06,810
So it must be a 256-bits symmetric key,
155

155

00:06:06,810  -->  00:06:09,540
so you cannot import asymmetric material for now
156

156

00:06:09,540  -->  00:06:11,490
and it cannot be used with Custom Key Store,
157

157

00:06:11,490  -->  00:06:13,380
it has to be used on its own.
158

158

00:06:13,380  -->  00:06:16,230
For this, if you want to have KMS Key Rotation,
159

159

00:06:16,230  -->  00:06:19,140
of course, because the key source is external
160

160

00:06:19,140  -->  00:06:20,880
then you have to rotate it on your own
161

161

00:06:20,880  -->  00:06:23,310
so automate rotation is not supported.
162

162

00:06:23,310  -->  00:06:24,143
So, how does that work?
163

163

00:06:24,143  -->  00:06:27,120
Well, the user will create a KMS key in KMS
164

164

00:06:27,120  -->  00:06:29,460
and say that it's a symmetric type of key
165

165

00:06:29,460  -->  00:06:31,980
and that the source is external.
166

166

00:06:31,980  -->  00:06:33,570
Now, the key envelope is created
167

167

00:06:33,570  -->  00:06:35,040
but the key material is not.
168

168

00:06:35,040  -->  00:06:39,180
So then you download the public key and an import token,
169

169

00:06:39,180  -->  00:06:43,020
and you're going to use the public key with your internal,
170

170

00:06:43,020  -->  00:06:45,720
okay, your externally generated key material
171

171

00:06:45,720  -->  00:06:49,140
to create an encryption thanks to the public key.
172

172

00:06:49,140  -->  00:06:50,700
Now, this public key,
173

173

00:06:50,700  -->  00:06:52,830
this private key that has been encrypted
174

174

00:06:52,830  -->  00:06:55,170
can be sent back to the KMS service
175

175

00:06:55,170  -->  00:06:57,150
using also the import token,
176

176

00:06:57,150  -->  00:07:00,360
and then KMS will use some decryption mechanism
177

177

00:07:00,360  -->  00:07:02,760
to get the key material and store it
178

178

00:07:02,760  -->  00:07:05,040
in your KMS key in there.
179

179

00:07:05,040  -->  00:07:09,630
So this is the process to import external keys in KMS.
180

180

00:07:09,630  -->  00:07:10,770
Okay, lastly,
181

181

00:07:10,770  -->  00:07:13,020
so you need to know about KMS Multi-Region Keys.
182

182

00:07:13,020  -->  00:07:15,120
So it's possible for you to create a key,
183

183

00:07:15,120  -->  00:07:16,650
for example, in US-East-1
184

184

00:07:16,650  -->  00:07:19,980
and have it replicated across multiple regions.
185

185

00:07:19,980  -->  00:07:22,290
So they will have the same key material
186

186

00:07:22,290  -->  00:07:24,570
and actually the same key ID
187

187

00:07:24,570  -->  00:07:27,090
but they will be in different regions.
188

188

00:07:27,090  -->  00:07:30,150
So the use cases are amazing because thanks to this
189

189

00:07:30,150  -->  00:07:32,340
while you have the same key in multiple regions
190

190

00:07:32,340  -->  00:07:34,320
and that means that you can encrypt in one region
191

191

00:07:34,320  -->  00:07:38,100
and decrypt in the other regions using the same KMS key ID
192

192

00:07:38,100  -->  00:07:39,750
so you don't need to reencrypt data
193

193

00:07:39,750  -->  00:07:42,030
or make cross region API calls.
194

194

00:07:42,030  -->  00:07:43,680
So they will have the same key ID,
195

195

00:07:43,680  -->  00:07:45,060
the same key material,
196

196

00:07:45,060  -->  00:07:47,100
the same automatic rotation, and so on.
197

197

00:07:47,100  -->  00:07:49,320
But these keys are not global keys, okay?
198

198

00:07:49,320  -->  00:07:50,700
It's this principle that there is
199

199

00:07:50,700  -->  00:07:54,480
a primary key in one region and all the others are replicas.
200

200

00:07:54,480  -->  00:07:56,850
Each key can be managed independently
201

201

00:07:56,850  -->  00:08:00,120
and although you can only have one primary key at a time
202

202

00:08:00,120  -->  00:08:02,970
it's possible for you to promote one replica
203

203

00:08:02,970  -->  00:08:04,890
into their own primary key.
204

204

00:08:04,890  -->  00:08:06,960
So the use cases for Multi-Region Keys
205

205

00:08:06,960  -->  00:08:08,790
is going to be disaster recovery,
206

206

00:08:08,790  -->  00:08:09,840
Global Data Management,
207

207

00:08:09,840  -->  00:08:11,970
for example, for Dynamic DB Global Tables,
208

208

00:08:11,970  -->  00:08:14,490
Active-Active Application that span multiple region
209

209

00:08:14,490  -->  00:08:17,670
or distributing, signing applications and so on.
210

210

00:08:17,670  -->  00:08:18,990
So that's it for this lecture.
211

211

00:08:18,990  -->  00:08:21,990
I hope you liked it, and I will see you in the next lecture.
