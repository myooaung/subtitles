1
1

00:00:00,150  -->  00:00:00,983
<v Instructor>So now let's talk</v>
2

2

00:00:00,983  -->  00:00:04,530
about cross account access to objects in S3 buckets.
3

3

00:00:04,530  -->  00:00:06,780
So you have several ways to do cross account access
4

4

00:00:06,780  -->  00:00:07,613
to S3 objects.
5

5

00:00:07,613  -->  00:00:11,610
The first one is to use IAM policies and S3 bucket policies.
6

6

00:00:11,610  -->  00:00:13,680
That's the most common one we'll see.
7

7

00:00:13,680  -->  00:00:15,090
Then you can use IAM policies
8

8

00:00:15,090  -->  00:00:17,670
and access control lists or ACLs
9

9

00:00:17,670  -->  00:00:19,770
and that's less common because they've been deprecated.
10

10

00:00:19,770  -->  00:00:23,790
So, this only works if the bucket owner enforced setting
11

11

00:00:23,790  -->  00:00:25,380
is equals to disabled.
12

12

00:00:25,380  -->  00:00:28,890
But the setting by default for all newly created buckets
13

13

00:00:28,890  -->  00:00:30,270
is going to be enabled.
14

14

00:00:30,270  -->  00:00:32,910
So that means that ACLs are going to be disabled
15

15

00:00:32,910  -->  00:00:34,920
because they're considered an old way
16

16

00:00:34,920  -->  00:00:36,993
of making security on AWS.
17

17

00:00:38,040  -->  00:00:40,200
And the third way to do cross account access is
18

18

00:00:40,200  -->  00:00:42,363
cross accounts IAM roles.
19

19

00:00:43,327  -->  00:00:45,840
So here we take a look at ACLs,
20

20

00:00:45,840  -->  00:00:49,020
what they mean, and why it's preferable not to have them.
21

21

00:00:49,020  -->  00:00:50,640
So let's consider an account where we have
22

22

00:00:50,640  -->  00:00:53,336
an IAM user named John, and then we have another account
23

23

00:00:53,336  -->  00:00:57,090
with an S3 bucket and another IAM user named Bob.
24

24

00:00:57,090  -->  00:00:58,950
So John has an IAM policy.
25

25

00:00:58,950  -->  00:01:01,410
And this IAM policy is allowing it
26

26

00:01:01,410  -->  00:01:04,830
to access the S3 three bucket in account B.
27

27

00:01:04,830  -->  00:01:06,630
And it turns out that the account B is
28

28

00:01:06,630  -->  00:01:09,750
also allowing John to get access to it
29

29

00:01:09,750  -->  00:01:12,000
by using a bucket policy.
30

30

00:01:12,000  -->  00:01:14,280
So everything is in place, everything is working.
31

31

00:01:14,280  -->  00:01:18,450
And so John can do an s3:PutObject into the S3 bucket
32

32

00:01:18,450  -->  00:01:22,140
of account B and the object is going to be stored there.
33

33

00:01:22,140  -->  00:01:23,670
So far so good.
34

34

00:01:23,670  -->  00:01:25,800
Now Bob is doing the same thing.
35

35

00:01:25,800  -->  00:01:27,600
Bob is on its own account.
36

36

00:01:27,600  -->  00:01:29,040
Let's say it has been authorized,
37

37

00:01:29,040  -->  00:01:30,930
thanks to the IAM policy, as well.
38

38

00:01:30,930  -->  00:01:32,940
So Bob can do s3:PutObject
39

39

00:01:32,940  -->  00:01:36,720
and put its own object into its own S3 buckets.
40

40

00:01:36,720  -->  00:01:39,117
But Bob now wants to access the object
41

41

00:01:39,117  -->  00:01:41,850
that was created by John.
42

42

00:01:41,850  -->  00:01:44,970
And it turns out that, well, it's going to be denied.
43

43

00:01:44,970  -->  00:01:48,690
Why? Well, because an object uploaded by default
44

44

00:01:48,690  -->  00:01:52,350
by a user into a bucket that has ACLs enabled,
45

45

00:01:52,350  -->  00:01:55,860
will not be accessible by another account.
46

46

00:01:55,860  -->  00:01:59,640
So there is a concept of object ownership in S3 buckets.
47

47

00:01:59,640  -->  00:02:03,030
So even though the S3 bucket is owned by account B,
48

48

00:02:03,030  -->  00:02:06,540
the objects within may be owned only by the users,
49

49

00:02:06,540  -->  00:02:08,310
or the roles, or the accounts,
50

50

00:02:08,310  -->  00:02:10,800
that actually upload these objects.
51

51

00:02:10,800  -->  00:02:12,420
So it gets quite complicated.
52

52

00:02:12,420  -->  00:02:15,300
And so to get it working, you need to make sure
53

53

00:02:15,300  -->  00:02:18,893
that the account A has given the proper permissions
54

54

00:02:18,893  -->  00:02:23,340
and the object ownership to the accounts B administrator.
55

55

00:02:23,340  -->  00:02:25,029
So this is what the IAM policy looks like.
56

56

00:02:25,029  -->  00:02:27,990
It says, "Hey, when I upload an object,
57

57

00:02:27,990  -->  00:02:32,070
I want to grant full control to the accounts A."
58

58

00:02:32,070  -->  00:02:33,480
And that's quite complicated,
59

59

00:02:33,480  -->  00:02:36,000
this is why ACLs are very complicated.
60

60

00:02:36,000  -->  00:02:38,490
And so here we have some ACL-specific headers
61

61

00:02:38,490  -->  00:02:41,280
that either will grant full permissions explicitly
62

62

00:02:41,280  -->  00:02:42,927
or we can use Canned ACL
63

63

00:02:42,927  -->  00:02:45,510
and we'll see this in the next slide.
64

64

00:02:45,510  -->  00:02:49,290
So the solution to this is to not use ACLs
65

65

00:02:49,290  -->  00:02:52,680
and instead to define a S3 object ownership
66

66

00:02:52,680  -->  00:02:55,710
so that the bucket owner owns all the objects.
67

67

00:02:55,710  -->  00:02:57,270
End of the story.
68

68

00:02:57,270  -->  00:02:59,160
If you are in the ACL world
69

69

00:02:59,160  -->  00:03:01,980
then you need to use what's called Canned ACL.
70

70

00:03:01,980  -->  00:03:05,040
And so Canned ACL are the way of a shortcut
71

71

00:03:05,040  -->  00:03:07,350
to give a bucket owner access
72

72

00:03:07,350  -->  00:03:09,420
to the object we just uploaded.
73

73

00:03:09,420  -->  00:03:14,420
So if we upload an object and we add the x-amz-acl header
74

74

00:03:14,550  -->  00:03:16,740
for bucket owner full control
75

75

00:03:16,740  -->  00:03:18,240
that means that when we upload an object
76

76

00:03:18,240  -->  00:03:22,293
we also give the object ownership to the bucket owner.
77

77

00:03:23,130  -->  00:03:25,890
So these Canned ACLs are shortcut ACLs
78

78

00:03:25,890  -->  00:03:27,420
and I'm just giving them to you
79

79

00:03:27,420  -->  00:03:29,550
but I don't think they appear in the exam.
80

80

00:03:29,550  -->  00:03:32,670
But we have private, public-read, authenticated-read,
81

81

00:03:32,670  -->  00:03:35,760
bucket-owner-read, bucket-owner-full-control, and so on.
82

82

00:03:35,760  -->  00:03:39,420
And they are shortcuts to giving proper ACLs.
83

83

00:03:39,420  -->  00:03:41,490
Now, ACLs are not recommended,
84

84

00:03:41,490  -->  00:03:42,600
but I'm still teaching them to you
85

85

00:03:42,600  -->  00:03:44,760
because it's important for you to know about them.
86

86

00:03:44,760  -->  00:03:48,720
And they've been disabled by default since April 2023.
87

87

00:03:48,720  -->  00:03:51,750
So you cannot use ACL anymore from that point
88

88

00:03:51,750  -->  00:03:53,400
at least by default.
89

89

00:03:53,400  -->  00:03:56,340
And the new setting is, again, object ownership.
90

90

00:03:56,340  -->  00:03:59,580
So that's only the Bucket policies the IAM policies,
91

91

00:03:59,580  -->  00:04:01,980
the SCP and the VPC Endpoint Policies,
92

92

00:04:01,980  -->  00:04:04,680
will control access to your S3 bucket objects.
93

93

00:04:04,680  -->  00:04:08,250
But no ACLs, the bucket owner will own all the objects
94

94

00:04:08,250  -->  00:04:12,870
and that simplifies a lot the security model of Amazon S3.
95

95

00:04:12,870  -->  00:04:14,580
Finally, the last way to get access
96

96

00:04:14,580  -->  00:04:16,950
to Amazon S3 is to use an IAM role.
97

97

00:04:16,950  -->  00:04:20,250
So let's take an example of the cross-account IAM role.
98

98

00:04:20,250  -->  00:04:23,670
Here, we have accounts A that has an S3 bucket
99

99

00:04:23,670  -->  00:04:26,580
and also an IAM role that is being assumed
100

100

00:04:26,580  -->  00:04:29,130
by the IAM user in the bottom.
101

101

00:04:29,130  -->  00:04:32,550
So when it assumes that role, thanks to the proper policies,
102

102

00:04:32,550  -->  00:04:34,770
then it can access the S3 bucket directly
103

103

00:04:34,770  -->  00:04:37,350
from within the account A.
104

104

00:04:37,350  -->  00:04:39,870
So in this case, if you use an IAM role,
105

105

00:04:39,870  -->  00:04:42,270
the benefit is that you do not need to create
106

106

00:04:42,270  -->  00:04:43,800
an S3 bucket policy.
107

107

00:04:43,800  -->  00:04:46,486
You can just have the IAM role authorize the API calls
108

108

00:04:46,486  -->  00:04:50,160
and that will, can simplify your security model.
109

109

00:04:50,160  -->  00:04:50,993
So it's up to you
110

110

00:04:50,993  -->  00:04:53,340
and based on the situation you want to use.
111

111

00:04:53,340  -->  00:04:54,173
Alright, that's it.
112

112

00:04:54,173  -->  00:04:55,620
You've seen how to do cross accounts
113

113

00:04:55,620  -->  00:04:57,420
API calls for Amazon S3.
114

114

00:04:57,420  -->  00:05:00,543
I hope you liked it and I will see you in the next lecture.
