1
1

00:00:00,000  -->  00:00:02,010
<v ->So now let's talk about CloudHSM.</v>
2

2

00:00:02,010  -->  00:00:04,890
And the best way to start is to talk about KMS.
3

3

00:00:04,890  -->  00:00:06,359
So when we have KMS,
4

4

00:00:06,359  -->  00:00:09,090
AWS manages the software for encryption
5

5

00:00:09,090  -->  00:00:10,980
and the encryption keys.
6

6

00:00:10,980  -->  00:00:12,453
But with CloudHSM,
7

7

00:00:12,453  -->  00:00:14,490
AWS will only provision us
8

8

00:00:14,490  -->  00:00:16,350
the encryption hardware.
9

9

00:00:16,350  -->  00:00:18,870
It's going to be dedicated hardware
10

10

00:00:18,870  -->  00:00:21,810
and HSM stands for Hardware Security Module,
11

11

00:00:21,810  -->  00:00:23,640
hence the name CloudHSM.
12

12

00:00:23,640  -->  00:00:26,220
And your responsibility is going to manage
13

13

00:00:26,220  -->  00:00:30,480
your own encryption keys entirely, not AWS.
14

14

00:00:30,480  -->  00:00:33,060
The idea is that you are entirely responsible
15

15

00:00:33,060  -->  00:00:36,270
for the security, the maintenance,
16

16

00:00:36,270  -->  00:00:40,500
and the backup of these encryption keys, not AWS.
17

17

00:00:40,500  -->  00:00:43,260
So the HSM device is going to be tamper resistant.
18

18

00:00:43,260  -->  00:00:45,180
It has some kind of compliance.
19

19

00:00:45,180  -->  00:00:46,680
And so that means that
20

20

00:00:46,680  -->  00:00:50,040
if anyone onsite at AWS tries to
21

21

00:00:50,040  -->  00:00:51,780
open up your HSM device,
22

22

00:00:51,780  -->  00:00:52,800
there's going to be a flip
23

23

00:00:52,800  -->  00:00:54,270
and it's going to be seen.
24

24

00:00:54,270  -->  00:00:56,880
So it supports both symmetric
25

25

00:00:56,880  -->  00:00:58,380
and asymmetric encryption
26

26

00:00:58,380  -->  00:01:00,120
which is really helpful if you want to do something
27

27

00:01:00,120  -->  00:01:02,850
called TLS or SSL uploading
28

28

00:01:02,850  -->  00:01:04,890
and there's no feature available.
29

29

00:01:04,890  -->  00:01:06,930
For you to use CloudHSM,
30

30

00:01:06,930  -->  00:01:08,970
you need to use the CloudHSM client software.
31

31

00:01:08,970  -->  00:01:11,520
It's not something that is done through API calls.
32

32

00:01:11,520  -->  00:01:14,610
And you have some integration with CloudHSM,
33

33

00:01:14,610  -->  00:01:15,930
for example, with Redshift,
34

34

00:01:15,930  -->  00:01:17,190
that supports CloudHSM
35

35

00:01:17,190  -->  00:01:19,560
for database encryption and key management.
36

36

00:01:19,560  -->  00:01:23,190
So in case you want to use SSE-C
37

37

00:01:23,190  -->  00:01:25,650
type of encryption for your S3 objects,
38

38

00:01:25,650  -->  00:01:27,720
which is when you provide your own
39

39

00:01:27,720  -->  00:01:29,610
encryption key to S3
40

40

00:01:29,610  -->  00:01:32,130
and then there will be server side encryption happening.
41

41

00:01:32,130  -->  00:01:35,250
Then a good way to generate that encryption key
42

42

00:01:35,250  -->  00:01:36,930
would be to use CloudHSM.
43

43

00:01:36,930  -->  00:01:38,910
It's a very common pattern.
44

44

00:01:38,910  -->  00:01:40,948
Okay, so let's have a look at a diagram.
45

45

00:01:40,948  -->  00:01:43,620
AWS will manage the hardware for us,
46

46

00:01:43,620  -->  00:01:44,820
but then we will be provided
47

47

00:01:44,820  -->  00:01:46,710
with a cloud HSM device,
48

48

00:01:46,710  -->  00:01:48,660
and it's dedicated to us,
49

49

00:01:48,660  -->  00:01:50,730
and then that's all AWS does for us.
50

50

00:01:50,730  -->  00:01:53,070
So if we lose the encryption keys,
51

51

00:01:53,070  -->  00:01:54,480
if we lose anything,
52

52

00:01:54,480  -->  00:01:56,730
AWS cannot recover the device for us.
53

53

00:01:56,730  -->  00:01:58,890
It's really our own responsibility
54

54

00:01:58,890  -->  00:02:00,210
so use with caution.
55

55

00:02:00,210  -->  00:02:02,040
And to manage these keys and everything,
56

56

00:02:02,040  -->  00:02:03,720
you need to have a CloudHSM clients,
57

57

00:02:03,720  -->  00:02:06,000
which will access your CloudHSM device,
58

58

00:02:06,000  -->  00:02:07,080
and you manage your keys.
59

59

00:02:07,080  -->  00:02:08,610
They will have encrypted connection
60

60

00:02:08,610  -->  00:02:09,750
between your CloudHSM clients,
61

61

00:02:09,750  -->  00:02:11,760
and your CloudHSM device of course,
62

62

00:02:11,760  -->  00:02:14,460
to encrypt and share a secure information.
63

63

00:02:14,460  -->  00:02:17,460
But it's your responsibility to manage everything
64

64

00:02:17,460  -->  00:02:18,579
within your device.
65

65

00:02:18,579  -->  00:02:21,330
AWS cannot help you once it has provided you
66

66

00:02:21,330  -->  00:02:23,070
with the hardware you need
67

67

00:02:23,070  -->  00:02:24,210
in terms of IAM permissions.
68

68

00:02:24,210  -->  00:02:26,820
Therefore, the only thing AWS can do
69

69

00:02:26,820  -->  00:02:27,870
in terms of IAM,
70

70

00:02:27,870  -->  00:02:29,970
is helping you create,
71

71

00:02:29,970  -->  00:02:33,300
describe, and delete your CloudHSM cluster.
72

72

00:02:33,300  -->  00:02:36,060
But anything within your CloudHSM cluster,
73

73

00:02:36,060  -->  00:02:38,130
it's your own responsibility.
74

74

00:02:38,130  -->  00:02:40,020
So using the CloudHSM software,
75

75

00:02:40,020  -->  00:02:41,040
you can manage the keys.
76

76

00:02:41,040  -->  00:02:43,200
That means create, read, update, delete keys,
77

77

00:02:43,200  -->  00:02:44,730
and also manage the users
78

78

00:02:44,730  -->  00:02:46,500
that have access to these keys.
79

79

00:02:46,500  -->  00:02:48,900
It's very similar to say a database
80

80

00:02:48,900  -->  00:02:52,170
where AWS will give you the database itself
81

81

00:02:52,170  -->  00:02:54,330
and you have to manage the users within it.
82

82

00:02:54,330  -->  00:02:55,410
It's not exactly the case,
83

83

00:02:55,410  -->  00:02:56,820
not exactly similar as CloudHSM
84

84

00:02:56,820  -->  00:02:58,110
but you get the idea.
85

85

00:02:58,110  -->  00:03:00,540
You have to manage all the security
86

86

00:03:00,540  -->  00:03:03,450
within your device and AWS can not help you with that.
87

87

00:03:03,450  -->  00:03:05,370
Okay, another very important thing
88

88

00:03:05,370  -->  00:03:07,920
is to set up CloudHSM with high availability.
89

89

00:03:07,920  -->  00:03:10,860
And for this, you need to create a CloudHSM cluster
90

90

00:03:10,860  -->  00:03:12,570
that will be spread across multiple AZ.
91

91

00:03:12,570  -->  00:03:14,520
It's going to be great to enhance
92

92

00:03:14,520  -->  00:03:16,440
one more time the availability,
93

93

00:03:16,440  -->  00:03:18,660
but also the durability of your data.
94

94

00:03:18,660  -->  00:03:21,480
So we have this very classic architecture
95

95

00:03:21,480  -->  00:03:22,313
where we have two AZ,
96

96

00:03:22,313  -->  00:03:24,120
two CloudHSM devices
97

97

00:03:24,120  -->  00:03:26,070
that are going to be paired up in a cluster,
98

98

00:03:26,070  -->  00:03:27,660
and your CloudHSM clients.
99

99

00:03:27,660  -->  00:03:29,430
<v ->And the idea here is that if we lose one AZ,</v>
100

100

00:03:29,430  -->  00:03:31,290
while we still have access to the second AZ,
101

101

00:03:31,290  -->  00:03:32,700
and our data is safe,
102

102

00:03:32,700  -->  00:03:34,800
highly available and durable.
103

103

00:03:34,800  -->  00:03:35,970
But important to see it once,
104

104

00:03:35,970  -->  00:03:37,920
to know that it's possible to do it.
105

105

00:03:37,920  -->  00:03:40,590
Going into the exam it can be very handy.
106

106

00:03:40,590  -->  00:03:43,710
<v ->So for CloudHSM, you have a single tenant device</v>
107

107

00:03:43,710  -->  00:03:46,860
whereas for KMS, it's multi-tenant.
108

108

00:03:46,860  -->  00:03:49,140
For standard, it's level three.
109

109

00:03:49,140  -->  00:03:50,970
On CloudHSM level two,
110

110

00:03:50,970  -->  00:03:53,850
for FIPS on KMS.
111

111

00:03:53,850  -->  00:03:55,020
In terms of the master keys,
112

112

00:03:55,020  -->  00:03:55,890
you have different kinds.
113

113

00:03:55,890  -->  00:03:58,320
On KMS, you have the AWS Owned Keys,
114

114

00:03:58,320  -->  00:03:59,340
the AWS Managed Keys
115

115

00:03:59,340  -->  00:04:01,650
as well as the customer managed KMS Keys.
116

116

00:04:01,650  -->  00:04:03,270
Whereas on CloudHSM, you just have one thing.
117

117

00:04:03,270  -->  00:04:05,790
It's customer managed CMK.
118

118

00:04:05,790  -->  00:04:06,780
Now for the key type,
119

119

00:04:06,780  -->  00:04:07,980
while you have similar ones,
120

120

00:04:07,980  -->  00:04:10,470
you have symmetric, asymmetric, digital signing,
121

121

00:04:10,470  -->  00:04:12,900
and CloudHSM gives you also hashing.
122

122

00:04:12,900  -->  00:04:14,137
For key accessibility,
123

123

00:04:14,137  -->  00:04:16,620
KMS keys are scoped per region,
124

124

00:04:16,620  -->  00:04:18,900
although you can do KMS key replication
125

125

00:04:18,900  -->  00:04:20,640
and CloudHSM while they're deployed
126

126

00:04:20,640  -->  00:04:22,350
and managed in specific VPC.
127

127

00:04:22,350  -->  00:04:24,180
And you can be shared across different VPC
128

128

00:04:24,180  -->  00:04:26,760
by using VPC peering for example.
129

129

00:04:26,760  -->  00:04:29,090
CloudHSM has cryptographic acceleration
130

130

00:04:29,090  -->  00:04:32,460
for SSL and TLS and Oracle TDE.
131

131

00:04:32,460  -->  00:04:34,440
In terms of access and authorization,
132

132

00:04:34,440  -->  00:04:36,450
KMS is using IAM,
133

133

00:04:36,450  -->  00:04:39,690
whereas CloudHSM is using their own users,
134

134

00:04:39,690  -->  00:04:41,160
and you have to manage your own permissions
135

135

00:04:41,160  -->  00:04:43,983
from within the CloudHSM device itself.
136

136

00:04:46,470  -->  00:04:47,370
For high availability,
137

137

00:04:47,370  -->  00:04:49,200
while this is embedded in the KMS service,
138

138

00:04:49,200  -->  00:04:52,650
but for CloudHSM, you need to have multiple HSM device
139

139

00:04:52,650  -->  00:04:54,960
over different availability zones.
140

140

00:04:54,960  -->  00:04:55,950
For other capability,
141

141

00:04:55,950  -->  00:04:57,180
you have CloudTrail and CloudWatch,
142

142

00:04:57,180  -->  00:04:58,230
but on top of it,
143

143

00:04:58,230  -->  00:05:01,200
CloudHSM has multifactor application supports.
144

144

00:05:01,200  -->  00:05:02,880
And finally, there's a feature for KMS.
145

145

00:05:02,880  -->  00:05:06,060
Whereas there's no feature for CloudHSM.
146

146

00:05:06,060  -->  00:05:07,800
Okay, so that's it for this lecture.
147

147

00:05:07,800  -->  00:05:08,910
I hope you liked it,
148

148

00:05:08,910  -->  00:05:10,860
and I will see you in the next lecture.
