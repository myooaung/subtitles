WEBVTT
1
1

00:00:00.330  -->  00:00:01.740
<v ->So now let's understand the difference</v>
2

2

00:00:01.740  -->  00:00:04.710
between in a cross account type of use case
3

3

00:00:04.710  -->  00:00:06.090
accessing a resource
4

4

00:00:06.090  -->  00:00:08.190
Thanks to resource-based policy
5

5

00:00:08.190  -->  00:00:10.410
or a cross account IAM role.
6

6

00:00:10.410  -->  00:00:13.086
So the first option is to attach a resource-based policy
7

7

00:00:13.086  -->  00:00:14.750
to a specific resource, for example
8

8

00:00:14.750  -->  00:00:18.630
an S3 bucket policy and allow another account to access it.
9

9

00:00:18.630  -->  00:00:22.080
Or the second option is to use a role as a proxy for this.
10

10

00:00:22.080  -->  00:00:23.040
What do I mean?
11

11

00:00:23.040  -->  00:00:25.710
Well, we can have a user in account A,
12

12

00:00:25.710  -->  00:00:27.720
and we create a role in account B
13

13

00:00:27.720  -->  00:00:29.970
that allows us to access the Amazon S3 bucket
14

14

00:00:29.970  -->  00:00:31.410
in account B.
15

15

00:00:31.410  -->  00:00:35.070
The other option is to actually attach an S3 bucket policy
16

16

00:00:35.070  -->  00:00:37.560
of the Amazon S3 bucket in account B
17

17

00:00:37.560  -->  00:00:40.770
To allow the user in account A to access it.
18

18

00:00:40.770  -->  00:00:43.680
So they look similar, but there are a few differences.
19

19

00:00:43.680  -->  00:00:45.930
The first one is that when you assume a role
20

20

00:00:45.930  -->  00:00:48.600
would it be from a user application or service.
21

21

00:00:48.600  -->  00:00:52.830
Any type of original permissions are going to be given up
22

22

00:00:52.830  -->  00:00:54.900
and we're going to take only the permission
23

23

00:00:54.900  -->  00:00:56.505
assigned to the role.
24

24

00:00:56.505  -->  00:00:59.670
When you're using a resource-based policy
25

25

00:00:59.670  -->  00:01:01.920
the principle doesn't have to
give up his permissions
26

26

00:01:01.920  -->  00:01:02.880
because just the resource
27

27

00:01:02.880  -->  00:01:06.000
policy will allow the user to do a specific action.
28

28

00:01:06.000  -->  00:01:08.460
So an example of where this becomes very important.
29

29

00:01:08.460  -->  00:01:10.740
For example, you have a user in account A
30

30

00:01:10.740  -->  00:01:13.080
and you need to do at the same time a scan
31

31

00:01:13.080  -->  00:01:15.540
of a DynamoDB table in the same account A
32

32

00:01:15.540  -->  00:01:18.570
and then send the output to an industry bucket in account B.
33

33

00:01:18.570  -->  00:01:20.670
In this case, resource-based policy will make
34

34

00:01:20.670  -->  00:01:22.620
your life a little bit easier.
35

35

00:01:22.620  -->  00:01:24.420
So resource-based policies are supported
36

36

00:01:24.420  -->  00:01:26.460
by so many resources on AWS.
37

37

00:01:26.460  -->  00:01:29.098
You have S3 buckets, SNS topics, SQS queues
38

38

00:01:29.098  -->  00:01:31.410
extra, extra, extra.
39

39

00:01:31.410  -->  00:01:34.410
So to summarize, IAM roles are going to be very helpful
40

40

00:01:34.410  -->  00:01:37.590
to give temporary permissions for a specific task
41

41

00:01:37.590  -->  00:01:39.780
and they will allow a user and application
42

42

00:01:39.780  -->  00:01:42.720
to perform many actions in a different account
43

43

00:01:42.720  -->  00:01:44.010
than the one you have
44

44

00:01:44.010  -->  00:01:45.840
When you are assuming an IAM role,
45

45

00:01:45.840  -->  00:01:48.210
The permissions will expire over time.
46

46

00:01:48.210  -->  00:01:51.000
Resource-based policy on the other end are used to
47

47

00:01:51.000  -->  00:01:53.670
control access to specific resources
48

48

00:01:53.670  -->  00:01:55.890
from a resource centric point of view.
49

49

00:01:55.890  -->  00:01:58.560
So the resource controls who can access it.
50

50

00:01:58.560  -->  00:02:01.470
This also allows cross account access very easily
51

51

00:02:01.470  -->  00:02:04.110
and it's a permanent can authorization
52

52

00:02:04.110  -->  00:02:07.530
as long as it's still in the resource-based policy.
53

53

00:02:07.530  -->  00:02:09.750
So if you take an example of Amazon Event Bridge
54

54

00:02:09.750  -->  00:02:12.540
for example, when the rule runs, it needs permission
55

55

00:02:12.540  -->  00:02:13.680
on the targets.
56

56

00:02:13.680  -->  00:02:17.520
So there is some targets that allow resource-based policies
57

57

00:02:17.520  -->  00:02:21.090
such as Lambda functions, SNS topics, SQS queues
58

58

00:02:21.090  -->  00:02:23.160
CloudWatch Logs, API Gateway.
59

59

00:02:23.160  -->  00:02:25.590
So, in that case we have an Eve bridge rule
60

60

00:02:25.590  -->  00:02:27.330
and the Lambda will have, for example
61

61

00:02:27.330  -->  00:02:31.620
a resource-based policy that allows Eve Bridge to invoke it.
62

62

00:02:31.620  -->  00:02:33.240
That's one way of doing things.
63

63

00:02:33.240  -->  00:02:35.670
The other way that Eve Bridge can work is that
64

64

00:02:35.670  -->  00:02:37.440
the IAM role may be needed.
65

65

00:02:37.440  -->  00:02:40.500
For example, if the target is a Kinesis data stream
66

66

00:02:40.500  -->  00:02:43.470
or systems manager run command or an ECS task,
67

67

00:02:43.470  -->  00:02:44.460
in that case
68

68

00:02:44.460  -->  00:02:47.640
the event bridge rule is going to assume an IAM role to
69

69

00:02:47.640  -->  00:02:51.123
make that API call onto the target service.
70

70

00:02:52.200  -->  00:02:55.650
On top of it, you can use the principle org ID condition
71

71

00:02:55.650  -->  00:02:58.770
in your resource policies to restrict access to accounts
72

72

00:02:58.770  -->  00:03:02.010
that are all members of the same organization.
73

73

00:03:02.010  -->  00:03:03.990
So it's very simple On your S3 bucket
74

74

00:03:03.990  -->  00:03:06.630
you just create and allow, put object and get
75

75

00:03:06.630  -->  00:03:09.990
object where the principle org ID is equals to
76

76

00:03:09.990  -->  00:03:11.220
the Org ID You have
77

77

00:03:11.220  -->  00:03:14.340
and any member accounts can access your S3 buckets
78

78

00:03:14.340  -->  00:03:16.410
but user outside your organizations
79

79

00:03:16.410  -->  00:03:19.350
or accounts outside your organizations cannot.
80

80

00:03:19.350  -->  00:03:22.200
So it's a very common way of using resource policies.
81

81

00:03:22.200  -->  00:03:25.350
So another example of resource policies is, for example
82

82

00:03:25.350  -->  00:03:27.180
for cross account access.
83

83

00:03:27.180  -->  00:03:28.590
Here we have two accounts,
84

84

00:03:28.590  -->  00:03:30.870
one SQS queue and an EC2 instance.
85

85

00:03:30.870  -->  00:03:33.630
And the EC2 instance is polling for messages.
86

86

00:03:33.630  -->  00:03:37.860
And so here we have an SQS queue access policy
87

87

00:03:37.860  -->  00:03:39.390
that is going to allow
88

88

00:03:39.390  -->  00:03:41.010
all of the accounts so 1 1 1
89

89

00:03:41.010  -->  00:03:41.843
2 2 2,
90

90

00:03:41.843  -->  00:03:42.690
3 3 3
91

91

00:03:42.690  -->  00:03:45.930
to do SQS receive message on the queue.
92

92

00:03:45.930  -->  00:03:47.370
So this is necessary.
93

93

00:03:47.370  -->  00:03:49.050
And then the EC2 instance, of course
94

94

00:03:49.050  -->  00:03:51.900
itself must have enough permissions to also do
95

95

00:03:51.900  -->  00:03:55.050
the message polling on account A.
96

96

00:03:55.050  -->  00:03:58.020
An another example is to publish S3 event notifications
97

97

00:03:58.020  -->  00:03:59.340
to an SQS queue.
98

98

00:03:59.340  -->  00:04:01.020
So here we upload an object into the
99

99

00:04:01.020  -->  00:04:04.110
S3 bucket and the message is sent into the SQS queue.
100

100

00:04:04.110  -->  00:04:09.030
In that case, again, we can do a queue access policy
101

101

00:04:09.030  -->  00:04:12.060
that allows the source ARN to be a bucket.
102

102

00:04:12.060  -->  00:04:13.500
So here we're using a source ARN
103

103

00:04:13.500  -->  00:04:17.160
because it is a service to service type of communication.
104

104

00:04:17.160  -->  00:04:19.350
Then we can have string equal source account to
105

105

00:04:19.350  -->  00:04:22.350
identify the bucket owner account id
106

106

00:04:22.350  -->  00:04:27.150
and then we have the action SQS send message as authorized.
107

107

00:04:27.150  -->  00:04:28.110
So hopefully that makes sense.
108

108

00:04:28.110  -->  00:04:28.980
You start seeing the difference
109

109

00:04:28.980  -->  00:04:31.050
between resource-based policies
110

110

00:04:31.050  -->  00:04:33.600
and IAM roles and several examples of
111

111

00:04:33.600  -->  00:04:36.300
how it works within the same accounts or cross accounts.
112

112

00:04:36.300  -->  00:04:39.250
I hope you liked it and I will see you in the next lecture.
