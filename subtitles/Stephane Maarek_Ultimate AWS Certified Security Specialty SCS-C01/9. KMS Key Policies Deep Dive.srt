1
1

00:00:00,480  -->  00:00:02,730
<v Lecturer>So now let's talk about KMS Key Policies</v>
2

2

00:00:02,730  -->  00:00:03,900
in depth.
3

3

00:00:03,900  -->  00:00:08,160
So KMS Key Policies allow us to control access to KMS keys
4

4

00:00:08,160  -->  00:00:11,580
and they are very similar to S3 bucket policies.
5

5

00:00:11,580  -->  00:00:13,410
The difference is that if you don't set up
6

6

00:00:13,410  -->  00:00:16,890
an S3 bucket policy, you can still access your S3 bucket.
7

7

00:00:16,890  -->  00:00:19,440
But if you don't set up a KMS key policy,
8

8

00:00:19,440  -->  00:00:21,450
you cannot access your KMS key.
9

9

00:00:21,450  -->  00:00:23,460
So you must create one.
10

10

00:00:23,460  -->  00:00:26,580
So when you go through the console and you create a KMS key,
11

11

00:00:26,580  -->  00:00:28,290
the console makes it very easy on you
12

12

00:00:28,290  -->  00:00:31,230
and it will create by default a KMS key policy
13

13

00:00:31,230  -->  00:00:33,240
called the Default KMS Key Policy,
14

14

00:00:33,240  -->  00:00:35,550
and this is going to give access
15

15

00:00:35,550  -->  00:00:37,950
to any user in your accounts.
16

16

00:00:37,950  -->  00:00:39,450
So it gives the root user,
17

17

00:00:39,450  -->  00:00:41,160
but that means your entire account.
18

18

00:00:41,160  -->  00:00:42,000
And, of course, that doesn't mean
19

19

00:00:42,000  -->  00:00:44,370
that anyone can access the key.
20

20

00:00:44,370  -->  00:00:46,980
That means they must still have the proper IAM permissions
21

21

00:00:46,980  -->  00:00:48,330
to get access to the key.
22

22

00:00:48,330  -->  00:00:51,900
But this just delegates the administration
23

23

00:00:51,900  -->  00:00:53,940
of these rights to IAM.
24

24

00:00:53,940  -->  00:00:56,370
If you create a Custom Key Policy,
25

25

00:00:56,370  -->  00:00:59,400
then you can define directly here the users,
26

26

00:00:59,400  -->  00:01:01,890
the roles that can access the KMS key.
27

27

00:01:01,890  -->  00:01:04,410
You can also define who can administer the key.
28

28

00:01:04,410  -->  00:01:05,730
And this is extremely helpful
29

29

00:01:05,730  -->  00:01:08,160
when you have cross-account access of your KMS key,
30

30

00:01:08,160  -->  00:01:09,270
and you want to define
31

31

00:01:09,270  -->  00:01:12,810
who in the targeted accounts can access your key.
32

32

00:01:12,810  -->  00:01:15,750
So if we look at the Default KMS Key Policy,
33

33

00:01:15,750  -->  00:01:17,070
it looks like this.
34

34

00:01:17,070  -->  00:01:19,860
It says "Allow", "kms:*", "Resource": "*",
35

35

00:01:19,860  -->  00:01:23,280
and the principal is the root user of your account.
36

36

00:01:23,280  -->  00:01:26,970
But it actually gives the account itself full access
37

37

00:01:26,970  -->  00:01:30,060
to the KMS key, but it does not give permission
38

38

00:01:30,060  -->  00:01:32,160
to the account or any of the users.
39

39

00:01:32,160  -->  00:01:36,630
You still must use IAM policies to access the KMS key.
40

40

00:01:36,630  -->  00:01:38,460
Hopefully that makes sense.
41

41

00:01:38,460  -->  00:01:41,640
So if we have a look at KMS key policies,
42

42

00:01:41,640  -->  00:01:44,880
we have the Owned Key, the AWS Managed Keys,
43

43

00:01:44,880  -->  00:01:47,850
and the AWS Customer Managed Keys.
44

44

00:01:47,850  -->  00:01:50,190
So for the AWS Owned Keys,
45

45

00:01:50,190  -->  00:01:52,920
we cannot view and we cannot change the Key Policy
46

46

00:01:52,920  -->  00:01:55,710
because it's owned by AWS.
47

47

00:01:55,710  -->  00:01:58,020
For the AWS Managed Keys,
48

48

00:01:58,020  -->  00:02:02,160
for example, when you see a key, aws/ebs,
49

49

00:02:02,160  -->  00:02:03,990
you can view the Key Policy
50

50

00:02:03,990  -->  00:02:06,750
but you cannot change the Key Policy.
51

51

00:02:06,750  -->  00:02:07,860
If you were able to change it,
52

52

00:02:07,860  -->  00:02:11,550
then you could break the way AWS is working for you.
53

53

00:02:11,550  -->  00:02:13,890
And so this is what the key policy looks like
54

54

00:02:13,890  -->  00:02:16,500
for the AWS EBS key.
55

55

00:02:16,500  -->  00:02:19,350
So, as you can see, the first part of this allows you
56

56

00:02:19,350  -->  00:02:24,350
to do encrypt, decrypt for any service within your accounts.
57

57

00:02:24,660  -->  00:02:28,860
And then the last one is to allow metadata access
58

58

00:02:28,860  -->  00:02:31,380
within the accounts with "Describe", "Get*".
59

59

00:02:31,380  -->  00:02:32,730
So this is not something you have to remember,
60

60

00:02:32,730  -->  00:02:35,880
but it's an interesting KMS Key Policy to look at
61

61

00:02:35,880  -->  00:02:37,290
just for practice.
62

62

00:02:37,290  -->  00:02:40,620
And for your AWS Customer Managed Key,
63

63

00:02:40,620  -->  00:02:42,780
you can, of course, view your Key Policies
64

64

00:02:42,780  -->  00:02:46,080
and you can edit them so you have full control.
65

65

00:02:46,080  -->  00:02:49,530
So, if we have a look at Custom KMS Key Policy,
66

66

00:02:49,530  -->  00:02:52,230
this one allows administrators.
67

67

00:02:52,230  -->  00:02:55,770
So these key administrators will have the permission
68

68

00:02:55,770  -->  00:02:57,330
to manage the KMS key.
69

69

00:02:57,330  -->  00:02:58,920
And in this instance of this policy,
70

70

00:02:58,920  -->  00:03:01,050
we can look at the principal part
71

71

00:03:01,050  -->  00:03:04,590
and we see that we have a user called KMSAdminUser
72

72

00:03:04,590  -->  00:03:07,290
and a role named KMSAdminRole,
73

73

00:03:07,290  -->  00:03:11,370
which both have access to pretty much many API calls
74

74

00:03:11,370  -->  00:03:13,500
on the KMS key to administrate.
75

75

00:03:13,500  -->  00:03:17,070
But as you can see, encrypt and decrypt are not there.
76

76

00:03:17,070  -->  00:03:21,540
So that makes it a key administrator but not a key user.
77

77

00:03:21,540  -->  00:03:22,860
That's the difference.
78

78

00:03:22,860  -->  00:03:25,980
And you can add any kind of IAM users or roles
79

79

00:03:25,980  -->  00:03:28,350
as key administrators.
80

80

00:03:28,350  -->  00:03:31,170
Then you also have users of the key.
81

81

00:03:31,170  -->  00:03:33,090
So this is what the policy would look like.
82

82

00:03:33,090  -->  00:03:35,130
You can define a user, a role,
83

83

00:03:35,130  -->  00:03:36,870
or, again, a target account
84

84

00:03:36,870  -->  00:03:38,370
if you wanted to have cross-accounts.
85

85

00:03:38,370  -->  00:03:40,920
And here the actions you would look at, for example.
86

86

00:03:40,920  -->  00:03:45,210
You would look at the encrypt, decrypt, re-encrypt,
87

87

00:03:45,210  -->  00:03:49,500
generate data key, and describe key type of API calls.
88

88

00:03:49,500  -->  00:03:54,500
So, here we have authorized ExampleUser and ExampleRole.
89

89

00:03:54,717  -->  00:03:57,060
And because they've been explicitly outlined
90

90

00:03:57,060  -->  00:03:59,190
in the KMS Key Policy,
91

91

00:03:59,190  -->  00:04:01,920
then they are authorized to use this key.
92

92

00:04:01,920  -->  00:04:04,590
They don't need an IAM policy to do so.
93

93

00:04:04,590  -->  00:04:08,610
The alternative, of course, is to use the Default KMS Key
94

94

00:04:08,610  -->  00:04:09,750
that we saw before,
95

95

00:04:09,750  -->  00:04:13,140
and then define IAM permissions from within IAM
96

96

00:04:13,140  -->  00:04:13,980
so that your users
97

97

00:04:13,980  -->  00:04:16,950
and your roles may be able to use the keys.
98

98

00:04:16,950  -->  00:04:18,120
Hopefully that makes sense.
99

99

00:04:18,120  -->  00:04:21,120
I hope you liked it, and I will see you in the next lecture.
