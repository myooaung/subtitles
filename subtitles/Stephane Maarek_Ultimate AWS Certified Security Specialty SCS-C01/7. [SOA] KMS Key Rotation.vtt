WEBVTT
1
1

00:00:00.270  -->  00:00:01.510
<v Instructor>So let's talk about</v>
2

2

00:00:01.510  -->  00:00:05.800
an important advanced topic for KMS which is key rotation.
3

3

00:00:05.800  -->  00:00:08.650
So you can enable automatic key rotation
4

4

00:00:08.650  -->  00:00:13.650
for a customer-managed CMK, so not an AWS-managed CMK.
5

5

00:00:13.940  -->  00:00:17.010
And if you enable the automatic key rotation
6

6

00:00:17.010  -->  00:00:19.770
it will happen every one year.
7

7

00:00:19.770  -->  00:00:22.500
And after one year, the key will change,
8

8

00:00:22.500  -->  00:00:25.070
but the previous key will be kept active
9

9

00:00:25.070  -->  00:00:29.890
so that obviously you can be able to decrypt your old data.
10

10

00:00:29.890  -->  00:00:32.880
The new key will have the same CMK ID, though.
11

11

00:00:32.880  -->  00:00:34.800
So that means that only the backing key,
12

12

00:00:34.800  -->  00:00:37.300
the backing material of the key, will be changed.
13

13

00:00:37.300  -->  00:00:38.350
So let's take an example.
14

14

00:00:38.350  -->  00:00:41.680
Here's the backing key and here's the CMK ID.
15

15

00:00:41.680  -->  00:00:43.500
And so after automatic rotation
16

16

00:00:43.500  -->  00:00:44.710
which happens every one year,
17

17

00:00:44.710  -->  00:00:46.020
and you cannot change the period,
18

18

00:00:46.020  -->  00:00:47.630
it has to be every one year,
19

19

00:00:47.630  -->  00:00:50.190
then the backing key is going to change,
20

20

00:00:50.190  -->  00:00:52.700
so the material of the key is going to change.
21

21

00:00:52.700  -->  00:00:55.600
But the CMK ID remains the same
22

22

00:00:55.600  -->  00:00:59.160
and the old backing key is going to be saved
23

23

00:00:59.160  -->  00:01:02.380
so that it can still decrypt the old data.
24

24

00:01:02.380  -->  00:01:04.470
That's for automatic key rotation.
25

25

00:01:04.470  -->  00:01:07.490
But you can also rotate your key manually.
26

26

00:01:07.490  -->  00:01:09.270
For example you want to rotate your key
27

27

00:01:09.270  -->  00:01:12.390
every 90 days, every 180 days, those kinds of things.
28

28

00:01:12.390  -->  00:01:14.980
The new key will have a different CMK ID
29

29

00:01:14.980  -->  00:01:17.340
because you create it manually.
30

30

00:01:17.340  -->  00:01:20.010
So the idea is that you will keep the previous key active
31

31

00:01:20.010  -->  00:01:21.740
obviously so that you can decrypt old data,
32

32

00:01:21.740  -->  00:01:24.750
otherwise you will lose access to all your other old data.
33

33

00:01:24.750  -->  00:01:27.530
And in this case it is better to use aliases
34

34

00:01:27.530  -->  00:01:31.250
when you encrypt and decrypt data because if you use aliases
35

35

00:01:31.250  -->  00:01:34.120
then you hide the change of key for the application
36

36

00:01:34.120  -->  00:01:35.940
and I will show you this in diagrams.
37

37

00:01:35.940  -->  00:01:39.360
So it's a good solution to rotate the CMK
38

38

00:01:39.360  -->  00:01:42.200
that is not eligible for automatic rotation as well,
39

39

00:01:42.200  -->  00:01:44.560
such as your asymmetric CMK.
40

40

00:01:44.560  -->  00:01:45.460
So here's an example.
41

41

00:01:45.460  -->  00:01:49.470
The client is currently talking to alias MyCustomKey
42

42

00:01:49.470  -->  00:01:52.210
and we have a backing key with the CMK ID.
43

43

00:01:52.210  -->  00:01:54.080
And then we're going to rotate the key manually
44

44

00:01:54.080  -->  00:01:57.870
by creating a new key and we're going to change the alias.
45

45

00:01:57.870  -->  00:02:00.780
And so what happens that there's going to be a new CMK ID.
46

46

00:02:00.780  -->  00:02:03.530
Your old backing key is still going to be around here, okay,
47

47

00:02:03.530  -->  00:02:05.210
but now your client thinks that the new alias
48

48

00:02:05.210  -->  00:02:07.240
is going to point to the new material
49

49

00:02:07.240  -->  00:02:10.450
and you have done a manual key rotation.
50

50

00:02:10.450  -->  00:02:12.430
So how does it work to update the alias?
51

51

00:02:12.430  -->  00:02:14.610
Well you update the alias to hide again
52

52

00:02:14.610  -->  00:02:16.110
the change to your application
53

53

00:02:16.110  -->  00:02:17.670
so your application only interacts
54

54

00:02:17.670  -->  00:02:22.400
from the API perspective with your key alias MyAppKey.
55

55

00:02:22.400  -->  00:02:24.930
And then the old key, old key alias,
56

56

00:02:24.930  -->  00:02:27.090
is the one that you had before rotation
57

57

00:02:27.090  -->  00:02:29.342
and after rotation you're going to create a new key
58

58

00:02:29.342  -->  00:02:33.150
and you're going to issue an UpdateAlias API code
59

59

00:02:33.150  -->  00:02:34.550
and this updated alias will have
60

60

00:02:34.550  -->  00:02:36.270
the alias point to the new key
61

61

00:02:36.270  -->  00:02:38.380
and therefore from the application perspective
62

62

00:02:38.380  -->  00:02:40.840
the change will not be detected.
63

63

00:02:40.840  -->  00:02:43.470
It will just be transparent, okay.
64

64

00:02:43.470  -->  00:02:45.860
So what you need to remember from an exam perspective
65

65

00:02:45.860  -->  00:02:49.220
is that if you want to have automatic key rotation,
66

66

00:02:49.220  -->  00:02:50.800
the period is one year,
67

67

00:02:50.800  -->  00:02:52.900
but if you want to have manual key rotation
68

68

00:02:52.900  -->  00:02:55.600
then you can go to 90 days or 180 days
69

69

00:02:55.600  -->  00:02:57.120
based on the requirements.
70

70

00:02:57.120  -->  00:02:58.930
And all the extra information I gave you
71

71

00:02:58.930  -->  00:03:01.320
is just to show you how this would work in real life,
72

72

00:03:01.320  -->  00:03:03.270
but the exam will not test you on the details
73

73

00:03:03.270  -->  00:03:04.770
as far as I know, okay?
74

74

00:03:04.770  -->  00:03:05.670
So that's it for this lecture.
75

75

00:03:05.670  -->  00:03:06.630
I hope you liked it.
76

76

00:03:06.630  -->  00:03:08.580
And I will see you in the next lecture.
