WEBVTT
1
1

00:00:00.480  -->  00:00:02.730
<v Instructor>So let's say we have the use case</v>
2

2

00:00:02.730  -->  00:00:05.727
of detecting whether or not we start too many
3

3

00:00:05.727  -->  00:00:07.920
EC2 instances at a time.
4

4

00:00:07.920  -->  00:00:10.800
The best way to actually implement this architecture
5

5

00:00:10.800  -->  00:00:14.490
is to use CloudTrail and CloudWatch metrics filter, how?
6

6

00:00:14.490  -->  00:00:16.920
Well, from CloudTrail, we know we can stream
7

7

00:00:16.920  -->  00:00:20.040
all the API calls being made in two CloudWatch logs,
8

8

00:00:20.040  -->  00:00:23.760
and from CloudWatch logs, we can define a metrics filter
9

9

00:00:23.760  -->  00:00:26.010
and we can set a threshold, for example,
10

10

00:00:26.010  -->  00:00:29.790
and look for the EC2 StartInstances API call
11

11

00:00:29.790  -->  00:00:33.090
and say that we want to trigger a CloudWatch alarm
12

12

00:00:33.090  -->  00:00:37.020
when we detect that metric to be above 30,
13

13

00:00:37.020  -->  00:00:39.630
and from there, maybe go into an SNS topic,
14

14

00:00:39.630  -->  00:00:41.400
and we can alert the security team
15

15

00:00:41.400  -->  00:00:43.950
because too many instances are started at a time.
16

16

00:00:43.950  -->  00:00:47.010
So the advantage of using CloudTrail with metrics filter
17

17

00:00:47.010  -->  00:00:50.490
is that you have the ability to be able to set thresholds
18

18

00:00:50.490  -->  00:00:54.720
on a specific period for detection of API calls,
19

19

00:00:54.720  -->  00:00:57.300
and that really enhances the CloudTrail feature,
20

20

00:00:57.300  -->  00:00:58.133
so that's it.
21

21

00:00:58.133  -->  00:01:00.210
It was a quick lecture, but hopefully that makes sense,
22

22

00:01:00.210  -->  00:01:02.160
and I will see you in the next lecture.
