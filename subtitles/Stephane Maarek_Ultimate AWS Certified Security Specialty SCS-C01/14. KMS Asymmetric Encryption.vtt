WEBVTT
1
1

00:00:00.240  -->  00:00:03.090
<v Lecturer>So now let's talk about asymmetric encryption</v>
2

2

00:00:03.090  -->  00:00:04.410
and how it relates to KMS.
3

3

00:00:04.410  -->  00:00:07.680
So we know that we have symmetric encryption.
4

4

00:00:07.680  -->  00:00:10.800
That's when we use the same key to encrypt and decrypt.
5

5

00:00:10.800  -->  00:00:13.410
But asymmetric encryption is a little bit different
6

6

00:00:13.410  -->  00:00:15.510
because now we have what's called a key pair.
7

7

00:00:15.510  -->  00:00:17.160
And this key pair we've seen before
8

8

00:00:17.160  -->  00:00:19.350
when we were doing for example, SSH,
9

9

00:00:19.350  -->  00:00:21.690
we have a public key and a private key
10

10

00:00:21.690  -->  00:00:24.540
to encrypt and decrypt data.
11

11

00:00:24.540  -->  00:00:26.520
And it turns out that this public key,
12

12

00:00:26.520  -->  00:00:27.600
it can be shared.
13

13

00:00:27.600  -->  00:00:31.080
So this is something you see, for example, with SSH.
14

14

00:00:31.080  -->  00:00:32.910
When we want to trust a specific key,
15

15

00:00:32.910  -->  00:00:34.170
we use the public key
16

16

00:00:34.170  -->  00:00:37.260
or when we want to verify SSL certificates,
17

17

00:00:37.260  -->  00:00:38.340
when we go on the website,
18

18

00:00:38.340  -->  00:00:39.690
again, the public key is shared
19

19

00:00:39.690  -->  00:00:42.810
but the private key is always kept secret
20

20

00:00:42.810  -->  00:00:44.820
as its name indicates.
21

21

00:00:44.820  -->  00:00:45.660
So how does it work?
22

22

00:00:45.660  -->  00:00:46.493
What's the process?
23

23

00:00:46.493  -->  00:00:49.320
Well, let's say Bob creates a private key
24

24

00:00:49.320  -->  00:00:50.790
and a public key
25

25

00:00:50.790  -->  00:00:53.940
and he wants to communicate with Alice securely.
26

26

00:00:53.940  -->  00:00:55.200
What is Bob going to do?
27

27

00:00:55.200  -->  00:00:57.870
Well, Bob is going to send the public key to Alice
28

28

00:00:57.870  -->  00:00:59.370
and this is a safe operation
29

29

00:00:59.370  -->  00:01:01.830
because the public key is public.
30

30

00:01:01.830  -->  00:01:03.780
Alice is going to take a file
31

31

00:01:03.780  -->  00:01:06.640
and is going to encrypt it using the public key.
32

32

00:01:06.640  -->  00:01:09.300
So now the file is encrypted using this public key
33

33

00:01:09.300  -->  00:01:10.133
and it turns out
34

34

00:01:10.133  -->  00:01:12.210
that this public key cannot decrypt the file.
35

35

00:01:12.210  -->  00:01:15.810
The only thing the public key can do is encrypt it.
36

36

00:01:15.810  -->  00:01:17.580
That's why it's called asymmetric.
37

37

00:01:17.580  -->  00:01:20.970
And this file encrypted will be sent to Bob
38

38

00:01:20.970  -->  00:01:22.200
and Bob will receive it.
39

39

00:01:22.200  -->  00:01:25.110
And the only way for Bob to decrypt this file
40

40

00:01:25.110  -->  00:01:27.060
is to use the private key
41

41

00:01:27.060  -->  00:01:29.010
and then the file is decrypted.
42

42

00:01:29.010  -->  00:01:32.580
And this is why it's called asymmetric encryption.
43

43

00:01:32.580  -->  00:01:36.570
So KMS supports three types of asymmetric KMS keys.
44

44

00:01:36.570  -->  00:01:38.280
We have the RSA KMS keys
45

45

00:01:38.280  -->  00:01:41.490
for encryption and decryption or signing verification.
46

46

00:01:41.490  -->  00:01:45.120
We have the ECC KMS keys for signing and verification.
47

47

00:01:45.120  -->  00:01:46.560
We have the SM2 KMS key,
48

48

00:01:46.560  -->  00:01:49.440
that's for China only, to do signing
49

49

00:01:49.440  -->  00:01:52.470
and verification or encryption and decryption.
50

50

00:01:52.470  -->  00:01:53.610
You don't have to remember the details
51

51

00:01:53.610  -->  00:01:56.010
but just so you know, just general knowledge.
52

52

00:01:56.010  -->  00:01:56.970
The private keys,
53

53

00:01:56.970  -->  00:01:59.670
when you create a KMS asymmetric key,
54

54

00:01:59.670  -->  00:02:02.460
they never leave AWS KMS unencrypted
55

55

00:02:02.460  -->  00:02:04.350
so you don't have access to it.
56

56

00:02:04.350  -->  00:02:08.370
Now, how do we do digital signing with KMS asymmetric?
57

57

00:02:08.370  -->  00:02:11.190
Well, digital signing will help you verify
58

58

00:02:11.190  -->  00:02:14.820
the integrity of messages or files sent across systems.
59

59

00:02:14.820  -->  00:02:17.040
So what it means by verify the integrity?
60

60

00:02:17.040  -->  00:02:18.360
Well, we want to make sure that the file
61

61

00:02:18.360  -->  00:02:20.520
has not been tamped with in transit,
62

62

00:02:20.520  -->  00:02:22.650
so no one has included bad data
63

63

00:02:22.650  -->  00:02:24.570
or modified it for whatever reason.
64

64

00:02:24.570  -->  00:02:25.740
So how does that work?
65

65

00:02:25.740  -->  00:02:29.010
Well, the public key is used to verify the signature
66

66

00:02:29.010  -->  00:02:31.500
while the private key is used in the signing process.
67

67

00:02:31.500  -->  00:02:32.760
So how does that work?
68

68

00:02:32.760  -->  00:02:34.020
Well, we have KMS
69

69

00:02:34.020  -->  00:02:35.910
and KMS has a private key
70

70

00:02:35.910  -->  00:02:38.130
and it has a public key.
71

71

00:02:38.130  -->  00:02:39.390
And with our application
72

72

00:02:39.390  -->  00:02:42.000
and we want to securely send a file,
73

73

00:02:42.000  -->  00:02:43.470
but of course, we cannot
74

74

00:02:43.470  -->  00:02:45.900
send this entire file into KMS,
75

75

00:02:45.900  -->  00:02:46.770
that would be too much.
76

76

00:02:46.770  -->  00:02:49.230
Remember, KMS cannot encrypt a lot of data.
77

77

00:02:49.230  -->  00:02:52.020
But what we can do is that we can create a digest
78

78

00:02:52.020  -->  00:02:52.980
of our file.
79

79

00:02:52.980  -->  00:02:55.860
This is a hashing mechanism, which takes the file
80

80

00:02:55.860  -->  00:02:57.870
and returns a very long string
81

81

00:02:57.870  -->  00:03:00.840
that is kind of like the fingerprint of our file.
82

82

00:03:00.840  -->  00:03:04.650
So this digest is small enough to be sent to KMS.
83

83

00:03:04.650  -->  00:03:07.140
So we'll use the sign API call in KMS
84

84

00:03:07.140  -->  00:03:09.690
to do a digest signing,
85

85

00:03:09.690  -->  00:03:12.480
and then when we get back from it is a signature
86

86

00:03:12.480  -->  00:03:15.750
and this signature is sent back to our application.
87

87

00:03:15.750  -->  00:03:17.310
And so the file itself,
88

88

00:03:17.310  -->  00:03:20.250
and the signature, are sent to another application
89

89

00:03:20.250  -->  00:03:21.600
the application B,
90

90

00:03:21.600  -->  00:03:23.220
which takes the file,
91

91

00:03:23.220  -->  00:03:25.560
computes the digest on its own
92

92

00:03:25.560  -->  00:03:28.230
to verify whether or not the digest is the same.
93

93

00:03:28.230  -->  00:03:30.660
And then we use the verify API call.
94

94

00:03:30.660  -->  00:03:32.310
We pass in the signature we had
95

95

00:03:32.310  -->  00:03:34.680
from before and the digest
96

96

00:03:34.680  -->  00:03:36.600
and KMS will say whether or not
97

97

00:03:36.600  -->  00:03:38.760
the file has been tempered with or not.
98

98

00:03:38.760  -->  00:03:41.100
If the digest and the signature are equivalent,
99

99

00:03:41.100  -->  00:03:42.180
then we're good to go.
100

100

00:03:42.180  -->  00:03:45.000
So the use cases for this is document, E-signing,
101

101

00:03:45.000  -->  00:03:48.540
secure messaging, authentication and authorizations token,
102

102

00:03:48.540  -->  00:03:51.930
trusted source code, E-commerce transactions, and so on.
103

103

00:03:51.930  -->  00:03:52.860
So that's it for this lecture,
104

104

00:03:52.860  -->  00:03:53.910
I hope you liked it.
105

105

00:03:53.910  -->  00:03:55.953
And I will see you in the next lecture.
