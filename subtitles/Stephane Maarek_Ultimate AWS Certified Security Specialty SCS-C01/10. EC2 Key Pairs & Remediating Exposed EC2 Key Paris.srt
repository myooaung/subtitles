1
1

00:00:00,270  -->  00:00:01,170
<v Instructor>So let's have a look</v>
2

2

00:00:01,170  -->  00:00:04,230
at what are EC2 Key Pairs and how they work.
3

3

00:00:04,230  -->  00:00:07,320
So as a user, you're going to go into the EC2 service
4

4

00:00:07,320  -->  00:00:08,460
and you can create an instance
5

5

00:00:08,460  -->  00:00:11,130
and you can also create an EC2 Key Pair.
6

6

00:00:11,130  -->  00:00:12,930
When you create a Key Pair, it's called a Key Pair
7

7

00:00:12,930  -->  00:00:16,050
because there's a private key and a public key.
8

8

00:00:16,050  -->  00:00:19,920
The private key is automatically downloaded from AWS
9

9

00:00:19,920  -->  00:00:21,360
onto your own machine,
10

10

00:00:21,360  -->  00:00:24,600
and then the right away AWS is going to delete it.
11

11

00:00:24,600  -->  00:00:27,390
So you are the only owner of the private key
12

12

00:00:27,390  -->  00:00:30,780
but Amazon EC2 service is going to keep a copy
13

13

00:00:30,780  -->  00:00:33,060
of the public key.
14

14

00:00:33,060  -->  00:00:35,100
Then when you create an EC2 instance
15

15

00:00:35,100  -->  00:00:37,620
and you select the associated key,
16

16

00:00:37,620  -->  00:00:39,180
what's actually going to happen is that
17

17

00:00:39,180  -->  00:00:42,660
on the root EBS volume of the EC2 instance,
18

18

00:00:42,660  -->  00:00:45,600
the public key is going to be stored as a copy
19

19

00:00:45,600  -->  00:00:50,600
in a file called authorized_keys in the SSH directory.
20

20

00:00:51,000  -->  00:00:53,520
So once we have this, why does it matter?
21

21

00:00:53,520  -->  00:00:56,190
Well, because when we want to actually perform an SSH
22

22

00:00:56,190  -->  00:00:59,400
into our EC2 instance, what's going to happen is that
23

23

00:00:59,400  -->  00:01:02,592
the SSH protocol is going to present the private key
24

24

00:01:02,592  -->  00:01:04,500
to our EC2 instance,
25

25

00:01:04,500  -->  00:01:07,050
which is going to match it with the public key
26

26

00:01:07,050  -->  00:01:08,407
it has in store and say,
27

27

00:01:08,407  -->  00:01:12,660
"Yes, the user is authorized to perform SSH on me."
28

28

00:01:12,660  -->  00:01:16,260
So this is the basics of EC2 Key Pairs and SSH.
29

29

00:01:16,260  -->  00:01:20,430
So the idea is that your private key must be kept secure
30

30

00:01:20,430  -->  00:01:25,140
and there are no ways for you to recover a lost private key.
31

31

00:01:25,140  -->  00:01:29,010
You can also create your private keys outside of AWS
32

32

00:01:29,010  -->  00:01:32,430
and then upload them by just uploading a public key.
33

33

00:01:32,430  -->  00:01:35,160
So that's, you can still create EC2 instances
34

34

00:01:35,160  -->  00:01:37,710
with keys generated outside of AWS.
35

35

00:01:37,710  -->  00:01:41,640
And there are two formats of SSH keys that you can use.
36

36

00:01:41,640  -->  00:01:45,693
You have the ED type and the 2048-bit type.
37

37

00:01:46,710  -->  00:01:50,670
So what if you have a Key Pair and you delete it
38

38

00:01:50,670  -->  00:01:53,070
from the EC2 console?
39

39

00:01:53,070  -->  00:01:54,690
Well, in that case, what's going to happen
40

40

00:01:54,690  -->  00:01:57,180
is that it will be gone from the EC2 console,
41

41

00:01:57,180  -->  00:01:59,122
but it's not going to be removed
42

42

00:01:59,122  -->  00:02:01,800
from the EC2 instances itself.
43

43

00:02:01,800  -->  00:02:05,250
So the public key will remain on any EC2 instances
44

44

00:02:05,250  -->  00:02:08,400
that have been set up with a Key Pair on Amazon EC2.
45

45

00:02:08,400  -->  00:02:10,860
So deleting a Key Pair in Amazon EC2 doesn't do much
46

46

00:02:10,860  -->  00:02:13,230
except just deleting it there.
47

47

00:02:13,230  -->  00:02:16,170
So on top of it, if you launch an AMI
48

48

00:02:16,170  -->  00:02:19,410
and that AMI has been built with an old public key
49

49

00:02:19,410  -->  00:02:21,630
and then you select a new public key
50

50

00:02:21,630  -->  00:02:23,490
to launch this AMI with,
51

51

00:02:23,490  -->  00:02:26,670
what's going to happen is that this new EC2 instance
52

52

00:02:26,670  -->  00:02:28,830
is going to have both the public key
53

53

00:02:28,830  -->  00:02:31,950
that was shipped with the AMI
54

54

00:02:31,950  -->  00:02:34,320
and the new public key that is shipping
55

55

00:02:34,320  -->  00:02:36,930
with the Amazon EC2 service.
56

56

00:02:36,930  -->  00:02:39,930
So then, of course, even though you have two keys
57

57

00:02:39,930  -->  00:02:42,210
on the EC2 instance, you can still connect
58

58

00:02:42,210  -->  00:02:44,460
using any corresponding private key.
59

59

00:02:44,460  -->  00:02:46,560
So if you have a new private key, you can match it.
60

60

00:02:46,560  -->  00:02:47,700
Or if you have also the private key
61

61

00:02:47,700  -->  00:02:49,830
for the key corresponding in the AMI,
62

62

00:02:49,830  -->  00:02:51,393
you can connect as well.
63

63

00:02:52,770  -->  00:02:53,603
What happens though,
64

64

00:02:53,603  -->  00:02:56,130
if you lose your private key and it gets exposed,
65

65

00:02:56,130  -->  00:02:57,780
that means it gets put online.
66

66

00:02:57,780  -->  00:02:59,640
So you have a few steps you need to to follow.
67

67

00:02:59,640  -->  00:03:01,980
You need to remove all the public keys stored
68

68

00:03:01,980  -->  00:03:06,420
in each SSH authorized_keys file on EC2 instances
69

69

00:03:06,420  -->  00:03:08,340
so that no one can use the private key
70

70

00:03:08,340  -->  00:03:11,700
to actually SSH into your EC2 instances.
71

71

00:03:11,700  -->  00:03:13,950
You must also create a new Key Pair
72

72

00:03:13,950  -->  00:03:15,840
and then you add the public key material
73

73

00:03:15,840  -->  00:03:18,780
to the authorized_keys on all EC2 instances.
74

74

00:03:18,780  -->  00:03:19,613
So the diagram,
75

75

00:03:19,613  -->  00:03:23,430
so we have the old key and it's been compromised
76

76

00:03:23,430  -->  00:03:25,140
so we're going to create a new Key Pair.
77

77

00:03:25,140  -->  00:03:27,660
We get the private key and a public key.
78

78

00:03:27,660  -->  00:03:31,920
We delete the compromised public keys on the EC2 instances,
79

79

00:03:31,920  -->  00:03:36,540
and then we add the new public key onto the EC2 instances
80

80

00:03:36,540  -->  00:03:37,770
and you're done.
81

81

00:03:37,770  -->  00:03:39,450
Now, how do you automate this?
82

82

00:03:39,450  -->  00:03:40,440
Well, when what you do it
83

83

00:03:40,440  -->  00:03:43,650
is using the SSM Run Command utility,
84

84

00:03:43,650  -->  00:03:45,240
which is going to automate the process
85

85

00:03:45,240  -->  00:03:49,170
of adding and deleting public keys on EC2 instances.
86

86

00:03:49,170  -->  00:03:51,720
Alright, that's it for EC2 Key Pairs.
87

87

00:03:51,720  -->  00:03:54,843
I hope you liked it and I will see you in the next lecture.
