WEBVTT
1
1

00:00:00.150  -->  00:00:01.170
<v Instructor>Now let's look at Lambda</v>
2

2

00:00:01.170  -->  00:00:02.460
from a securities perspective.
3

3

00:00:02.460  -->  00:00:04.530
So there is the Lambda execution role,
4

4

00:00:04.530  -->  00:00:06.390
which is an IAM role that is attached
5

5

00:00:06.390  -->  00:00:07.980
to your Lambda function,
6

6

00:00:07.980  -->  00:00:10.170
and it grants the Lambda function permissions
7

7

00:00:10.170  -->  00:00:13.470
to several AWS services and resources.
8

8

00:00:13.470  -->  00:00:15.630
And the simple managed policies for Lambda
9

9

00:00:15.630  -->  00:00:20.250
you have is, for example, the AWSLambdaBasicExecutionRole.
10

10

00:00:20.250  -->  00:00:21.083
And what does it do?
11

11

00:00:21.083  -->  00:00:24.390
Well, it uploads logs into CloudWatch, very simple,
12

12

00:00:24.390  -->  00:00:26.400
but you need these permissions.
13

13

00:00:26.400  -->  00:00:29.940
You also have the AWSLambdaKinesisExecutionRole
14

14

00:00:29.940  -->  00:00:31.290
to read from Kinesis.
15

15

00:00:31.290  -->  00:00:33.150
The LambdaDynamoDBExecutionRole
16

16

00:00:33.150  -->  00:00:34.920
to read from DynamoDB streams.
17

17

00:00:34.920  -->  00:00:36.150
There is one for SQS.
18

18

00:00:36.150  -->  00:00:39.510
There is one for deploying Lambda functions in VPC,
19

19

00:00:39.510  -->  00:00:41.280
because you actually need to create
20

20

00:00:41.280  -->  00:00:43.200
network interfaces and so on.
21

21

00:00:43.200  -->  00:00:46.770
There is a managed policy to upload trace data
22

22

00:00:46.770  -->  00:00:48.420
to X-Ray and so on.
23

23

00:00:48.420  -->  00:00:49.380
So what you have to think
24

24

00:00:49.380  -->  00:00:51.630
about is that when you deploy a Lambda function,
25

25

00:00:51.630  -->  00:00:52.800
you need to understand,
26

26

00:00:52.800  -->  00:00:55.410
what is this Lambda function interacting with?
27

27

00:00:55.410  -->  00:00:56.280
There is no magic.
28

28

00:00:56.280  -->  00:00:57.840
You need to create an IAM role
29

29

00:00:57.840  -->  00:00:59.220
that has the proper permission
30

30

00:00:59.220  -->  00:01:02.160
so that your Lambda function can function correctly.
31

31

00:01:02.160  -->  00:01:04.890
So in the case of an event source mapping
32

32

00:01:04.890  -->  00:01:06.600
that invokes Lambda function,
33

33

00:01:06.600  -->  00:01:09.030
the Lambda function will use the execution role
34

34

00:01:09.030  -->  00:01:11.400
to read the event data.
35

35

00:01:11.400  -->  00:01:12.990
The best practice is to create
36

36

00:01:12.990  -->  00:01:15.933
one Lambda execution role per function.
37

37

00:01:16.860  -->  00:01:19.440
You can also create resource policies
38

38

00:01:19.440  -->  00:01:20.880
for your Lambda functions
39

39

00:01:20.880  -->  00:01:23.970
to give access to other accounts and services.
40

40

00:01:23.970  -->  00:01:26.430
You give them permissions to use your Lambda function.
41

41

00:01:26.430  -->  00:01:29.490
So it's very similar to an S3 bucket policy for S3 buckets.
42

42

00:01:29.490  -->  00:01:31.740
And then, an IAM principle can access Lambda
43

43

00:01:31.740  -->  00:01:33.420
either if the IAM policy
44

44

00:01:33.420  -->  00:01:35.070
attached to principle authorizes it,
45

45

00:01:35.070  -->  00:01:37.110
so direct user access,
46

46

00:01:37.110  -->  00:01:39.900
or if the resource-based policy will authorize it,
47

47

00:01:39.900  -->  00:01:42.630
so this is for a service to service access.
48

48

00:01:42.630  -->  00:01:43.650
So when do we need this?
49

49

00:01:43.650  -->  00:01:46.230
Well, when you have a service, like Amazon S3,
50

50

00:01:46.230  -->  00:01:49.620
that will invoke your Lambda function based on S3 events,
51

51

00:01:49.620  -->  00:01:51.990
then you need to use a resource-based policy
52

52

00:01:51.990  -->  00:01:53.430
to give it access.
53

53

00:01:53.430  -->  00:01:55.680
So Lambda can write to CloudWatch Logs.
54

54

00:01:55.680  -->  00:01:58.050
So your Lambda function will send logs to CloudWatch
55

55

00:01:58.050  -->  00:02:01.740
into a log group and will have multiple log streams.
56

56

00:02:01.740  -->  00:02:05.310
And so the execution role must contain, number one,
57

57

00:02:05.310  -->  00:02:06.900
the CreateLogGroup permission
58

58

00:02:06.900  -->  00:02:08.730
to actually create the target log group.
59

59

00:02:08.730  -->  00:02:12.930
Then CreateLogStream to create individual log streams
60

60

00:02:12.930  -->  00:02:15.600
which correspond to your Lambda function executions.
61

61

00:02:15.600  -->  00:02:19.200
And then, PutLogEvents to actually send log events
62

62

00:02:19.200  -->  00:02:20.700
into your log streams.
63

63

00:02:20.700  -->  00:02:23.940
And, finally, DescribeLogStreams to find the proper one.
64

64

00:02:23.940  -->  00:02:26.310
So that's it for this lecture, I hope you liked it.
65

65

00:02:26.310  -->  00:02:28.260
And I will see you in the next lecture.
