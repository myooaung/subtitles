WEBVTT
1
1

00:00:00.000  -->  00:00:01.200
<v Instructor>So let's do a quick review</v>
2

2

00:00:01.200  -->  00:00:02.850
of RDS and Aurora Security
3

3

00:00:02.850  -->  00:00:05.280
but you may know already most of this information.
4

4

00:00:05.280  -->  00:00:07.110
So we have at-rest encryption
5

5

00:00:07.110  -->  00:00:11.910
to encrypt the database master and any replicas using KMS.
6

6

00:00:11.910  -->  00:00:14.820
And you must define this at launch time of your database.
7

7

00:00:14.820  -->  00:00:17.640
And if your database master is not encrypted,
8

8

00:00:17.640  -->  00:00:20.760
then the read replicas cannot be encrypted as well.
9

9

00:00:20.760  -->  00:00:23.370
If you want to encrypt an unencrypted database,
10

10

00:00:23.370  -->  00:00:25.530
you have to go through a database snapshot
11

11

00:00:25.530  -->  00:00:28.680
and then you restore it as an encrypted database.
12

12

00:00:28.680  -->  00:00:30.120
You have in-flight encryption,
13

13

00:00:30.120  -->  00:00:33.390
so you have TLS-ready databases by default.
14

14

00:00:33.390  -->  00:00:36.000
For this, you just connect using the TLS port
15

15

00:00:36.000  -->  00:00:38.310
and you also use the TLS root certificate
16

16

00:00:38.310  -->  00:00:41.940
from AWS client side to establish this connection.
17

17

00:00:41.940  -->  00:00:45.180
You can use IAM authentication to connect to your database
18

18

00:00:45.180  -->  00:00:47.940
so the IAM roles will be exchanged for credentials
19

19

00:00:47.940  -->  00:00:50.880
and then this allows you to get removed from
20

20

00:00:50.880  -->  00:00:54.363
permanent usernames and passwords and have tighter security.
21

21

00:00:55.350  -->  00:00:59.520
Access to your database is also managed by security groups.
22

22

00:00:59.520  -->  00:01:01.680
This is from a network perspective,
23

23

00:01:01.680  -->  00:01:04.830
and you cannot SSH onto your RDS databases
24

24

00:01:04.830  -->  00:01:07.920
unless you're using RDS Custom where you can have access
25

25

00:01:07.920  -->  00:01:10.440
to the OS of your RDS database.
26

26

00:01:10.440  -->  00:01:13.440
You can send the audit logs of your databases
27

27

00:01:13.440  -->  00:01:16.470
to CloudWatch Logs for longer retention.
28

28

00:01:16.470  -->  00:01:17.820
So for IAM authentication,
29

29

00:01:17.820  -->  00:01:20.190
this works for MySQL and PostgreSQL.
30

30

00:01:20.190  -->  00:01:21.030
You don't need a password,
31

31

00:01:21.030  -->  00:01:23.760
just you make sure you obtain an authentication token
32

32

00:01:23.760  -->  00:01:27.090
directly by using the IAM and the RDS API calls.
33

33

00:01:27.090  -->  00:01:30.000
This token has a lifetime of 15 minutes for authentication
34

34

00:01:30.000  -->  00:01:32.070
but then once you have established a connection
35

35

00:01:32.070  -->  00:01:33.750
you're good to go.
36

36

00:01:33.750  -->  00:01:34.590
So how does that work?
37

37

00:01:34.590  -->  00:01:36.780
Well, your EC2 instance wants to connect
38

38

00:01:36.780  -->  00:01:38.550
to your RDS database.
39

39

00:01:38.550  -->  00:01:41.310
You're going to attach an IAM role to your EC2 instance.
40

40

00:01:41.310  -->  00:01:44.670
Then you're going to issue API calls to the RDS service
41

41

00:01:44.670  -->  00:01:47.130
to get an authentication token out of it.
42

42

00:01:47.130  -->  00:01:49.800
And then you're going to pass this authentication token
43

43

00:01:49.800  -->  00:01:54.800
on the secure connection with SSL into your RDS database
44

44

00:01:54.810  -->  00:01:57.000
and then you will be connected.
45

45

00:01:57.000  -->  00:01:59.040
So the benefits of this is that your network
46

46

00:01:59.040  -->  00:02:01.890
in and out must be encrypted with SSL
47

47

00:02:01.890  -->  00:02:03.780
so you have secure connections,
48

48

00:02:03.780  -->  00:02:06.690
you have IAM to centrally manage all your users
49

49

00:02:06.690  -->  00:02:08.790
of your database instead of creating them
50

50

00:02:08.790  -->  00:02:11.400
and managing them from within your database
51

51

00:02:11.400  -->  00:02:12.690
so it's very handy,
52

52

00:02:12.690  -->  00:02:15.720
and you can leverage IAM roles and EC2 instances
53

53

00:02:15.720  -->  00:02:19.323
for easy integrations which streamlines your security.
54

54

00:02:20.220  -->  00:02:22.770
I also want to bring your attention to
55

55

00:02:22.770  -->  00:02:26.340
how to encrypt an unencrypted snapshot of Aurora.
56

56

00:02:26.340  -->  00:02:27.870
So when you have an encrypted database,
57

57

00:02:27.870  -->  00:02:29.190
everything is going to be encrypted,
58

58

00:02:29.190  -->  00:02:32.250
such as your database instances, your snapshot, your logs,
59

59

00:02:32.250  -->  00:02:33.083
and your backups.
60

60

00:02:33.083  -->  00:02:35.460
But what happens if it's unencrypted?
61

61

00:02:35.460  -->  00:02:37.860
So you have a database snapshot, it's unencrypted.
62

62

00:02:37.860  -->  00:02:40.140
What you can do is that you can restore this
63

63

00:02:40.140  -->  00:02:43.860
as a database cluster and this will be encrypted
64

64

00:02:43.860  -->  00:02:46.590
and only then you can create a snapshot
65

65

00:02:46.590  -->  00:02:50.220
that is going to be encrypted from this database cluster.
66

66

00:02:50.220  -->  00:02:52.380
So this is a misconception,
67

67

00:02:52.380  -->  00:02:55.080
but if you have an unencrypted database cluster,
68

68

00:02:55.080  -->  00:02:58.110
you cannot create an unencrypted snapshot out of it.
69

69

00:02:58.110  -->  00:03:00.810
And if you have an unencrypted snapshot,
70

70

00:03:00.810  -->  00:03:03.360
it's not possible for you to copy the snapshot
71

71

00:03:03.360  -->  00:03:04.560
and encrypt it.
72

72

00:03:04.560  -->  00:03:06.630
The only way to do that is to go
73

73

00:03:06.630  -->  00:03:09.270
by restoring the snapshot as an encrypted
74

74

00:03:09.270  -->  00:03:10.380
Aurora database cluster
75

75

00:03:10.380  -->  00:03:13.440
and then creating a snapshot out of it.
76

76

00:03:13.440  -->  00:03:14.580
Okay, that's it for this lecture.
77

77

00:03:14.580  -->  00:03:17.613
I hope you liked it, and I will see you in the next lecture.
