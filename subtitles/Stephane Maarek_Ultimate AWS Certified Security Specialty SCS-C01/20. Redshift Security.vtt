WEBVTT
1
1

00:00:00.300  -->  00:00:01.133
<v Stephane>So now let's talk</v>
2

2

00:00:01.133  -->  00:00:03.452
about Amazon Redshift security.
3

3

00:00:03.452  -->  00:00:04.680
And first, when you talk
4

4

00:00:04.680  -->  00:00:06.330
about the database hierarchy,
5

5

00:00:06.330  -->  00:00:08.670
so we have superusers in Redshift
6

6

00:00:08.670  -->  00:00:10.290
and they have the same permissions
7

7

00:00:10.290  -->  00:00:13.140
as the database owners for all databases.
8

8

00:00:13.140  -->  00:00:16.710
So for example, a superuser is the admin user,
9

9

00:00:16.710  -->  00:00:18.180
which is created automatically
10

10

00:00:18.180  -->  00:00:20.790
when you launch the Redshift cluster.
11

11

00:00:20.790  -->  00:00:24.660
To create superusers, you must be a superuser.
12

12

00:00:24.660  -->  00:00:26.250
Then we have users.
13

13

00:00:26.250  -->  00:00:28.650
Users can only be created and dropped
14

14

00:00:28.650  -->  00:00:31.962
by a superuser and users can own databases
15

15

00:00:31.962  -->  00:00:35.370
and database objects such as tables.
16

16

00:00:35.370  -->  00:00:37.560
So the users can be granted permissions
17

17

00:00:37.560  -->  00:00:40.410
on these objects and they can also grant permission
18

18

00:00:40.410  -->  00:00:44.220
to other database users, groups, and schemas.
19

19

00:00:44.220  -->  00:00:46.110
The users will be granted permissions
20

20

00:00:46.110  -->  00:00:48.578
in two ways, either explicitly
21

21

00:00:48.578  -->  00:00:51.360
by having those permissions directly assigned
22

22

00:00:51.360  -->  00:00:54.540
to the account to the user, or implicitly,
23

23

00:00:54.540  -->  00:00:56.040
by being member of a group
24

24

00:00:56.040  -->  00:00:57.720
that is granted permissions.
25

25

00:00:57.720  -->  00:00:59.850
So this should be of no surprise
26

26

00:00:59.850  -->  00:01:01.860
and everything should make sense so far.
27

27

00:01:01.860  -->  00:01:02.693
Then we have groups.
28

28

00:01:02.693  -->  00:01:04.950
So a group is a collection of users
29

29

00:01:04.950  -->  00:01:07.350
that can be collectively assigned permissions.
30

30

00:01:07.350  -->  00:01:09.810
It's very good once you want
31

31

00:01:09.810  -->  00:01:13.170
to have streamlined security maintenance.
32

32

00:01:13.170  -->  00:01:14.520
You have databases.
33

33

00:01:14.520  -->  00:01:18.210
A database is a collection of one or more schema.
34

34

00:01:18.210  -->  00:01:20.460
And so when a user creates a database,
35

35

00:01:20.460  -->  00:01:23.100
the user becomes the owner of the database.
36

36

00:01:23.100  -->  00:01:25.200
The superusers though, will have also rights
37

37

00:01:25.200  -->  00:01:27.570
on the database because they are admins.
38

38

00:01:27.570  -->  00:01:29.023
Then what is schema?
39

39

00:01:29.023  -->  00:01:31.650
A schema is a collection of database tables
40

40

00:01:31.650  -->  00:01:33.810
and other database objects.
41

41

00:01:33.810  -->  00:01:36.900
So schema is used to group these objects
42

42

00:01:36.900  -->  00:01:39.390
under a common name and then users
43

43

00:01:39.390  -->  00:01:41.970
can be granted access to a single schema
44

44

00:01:41.970  -->  00:01:44.310
or multiple schemas.
45

45

00:01:44.310  -->  00:01:46.710
So if we have a look, again as a diagram,
46

46

00:01:46.710  -->  00:01:49.620
we have the superusers of our Redshift cluster.
47

47

00:01:49.620  -->  00:01:52.260
We have several users that can be separated
48

48

00:01:52.260  -->  00:01:54.000
or grouped together.
49

49

00:01:54.000  -->  00:01:56.250
And then we have databases that can be created
50

50

00:01:56.250  -->  00:01:58.980
by users that will be the owner of this database.
51

51

00:01:58.980  -->  00:02:00.438
And within it we have schemas
52

52

00:02:00.438  -->  00:02:02.040
and in schemas you may have tables
53

53

00:02:02.040  -->  00:02:03.510
and other things.
54

54

00:02:03.510  -->  00:02:05.370
So hopefully this diagram makes sense
55

55

00:02:05.370  -->  00:02:07.830
and puts everything in perspective.
56

56

00:02:07.830  -->  00:02:09.930
Now, how do we do authorization
57

57

00:02:09.930  -->  00:02:12.480
within the database in database security?
58

58

00:02:12.480  -->  00:02:14.873
So the users commonly use a login
59

59

00:02:14.873  -->  00:02:17.070
to login into your database.
60

60

00:02:17.070  -->  00:02:19.110
It's a username and a password.
61

61

00:02:19.110  -->  00:02:23.130
And you also have the option to not use this
62

62

00:02:23.130  -->  00:02:26.040
and instead to use IAM credentials
63

63

00:02:26.040  -->  00:02:28.770
to allow users to connect to your database.
64

64

00:02:28.770  -->  00:02:30.660
So very similar to RDS,
65

65

00:02:30.660  -->  00:02:33.510
there is a GetClusterCredentials API operations
66

66

00:02:33.510  -->  00:02:36.810
to obtain temporary database user credentials.
67

67

00:02:36.810  -->  00:02:39.300
So if a user has proper IAM permissions,
68

68

00:02:39.300  -->  00:02:43.200
then they can login as an existing database user
69

69

00:02:43.200  -->  00:02:46.020
and then you'll get a temporary username and password.
70

70

00:02:46.020  -->  00:02:47.550
And so we'll get the credentials,
71

71

00:02:47.550  -->  00:02:49.080
we'll get the temporary credentials out of it,
72

72

00:02:49.080  -->  00:02:52.380
and then we can connect to our Redshift cluster.
73

73

00:02:52.380  -->  00:02:55.080
So this is to simplify security.
74

74

00:02:55.080  -->  00:02:57.660
And then once you have temporary user credentials
75

75

00:02:57.660  -->  00:03:00.360
for an existing database user, we can choose
76

76

00:03:00.360  -->  00:03:03.330
to disable the user's password to force log in
77

77

00:03:03.330  -->  00:03:04.530
using the temporary password
78

78

00:03:04.530  -->  00:03:07.380
and therefore force IAM security.
79

79

00:03:07.380  -->  00:03:09.060
And alternatively,
80

80

00:03:09.060  -->  00:03:12.000
if you don't have the user that already exists,
81

81

00:03:12.000  -->  00:03:15.780
you can use the GetClusterCredentials Autocreate option
82

82

00:03:15.780  -->  00:03:17.730
to create a new user database
83

83

00:03:17.730  -->  00:03:19.560
every time you connect.
84

84

00:03:19.560  -->  00:03:22.020
If you want to create a read only user,
85

85

00:03:22.020  -->  00:03:24.694
you would add this user to a group
86

86

00:03:24.694  -->  00:03:25.527
that has read only privileges
87

87

00:03:25.527  -->  00:03:28.260
for the specified schema of your database.
88

88

00:03:28.260  -->  00:03:32.130
But you still need to initially specify all
89

89

00:03:32.130  -->  00:03:34.890
of the schema names and then modify the group
90

90

00:03:34.890  -->  00:03:37.200
for any new schemas you may create.
91

91

00:03:37.200  -->  00:03:38.880
So that's it for Redshift permissions.
92

92

00:03:38.880  -->  00:03:40.350
Hopefully that makes sense
93

93

00:03:40.350  -->  00:03:43.470
and that may be one question at the exam maybe.
94

94

00:03:43.470  -->  00:03:45.840
So I don't wanna spend too much time on it
95

95

00:03:45.840  -->  00:03:47.160
but I hope you liked it
96

96

00:03:47.160  -->  00:03:49.113
and I will see you in the next lecture.
