1
1

00:00:00,210  -->  00:00:02,370
<v Instructor>So now let's talk about Object Encryption</v>
2

2

00:00:02,370  -->  00:00:03,780
in Amazon S3.
3

3

00:00:03,780  -->  00:00:06,450
So you can encrypt objects in S3 buckets
4

4

00:00:06,450  -->  00:00:08,940
using one of the following four methods.
5

5

00:00:08,940  -->  00:00:12,420
The first one is Server-Side Encryption, SSE.
6

6

00:00:12,420  -->  00:00:13,800
and you have multiple flavors of it.
7

7

00:00:13,800  -->  00:00:17,820
So you have SSE-S3, which is Server-Side Encryption
8

8

00:00:17,820  -->  00:00:20,580
with Amazon S3-managed keys,
9

9

00:00:20,580  -->  00:00:23,220
and that is enabled by default for your buckets
10

10

00:00:23,220  -->  00:00:24,183
and your objects.
11

11

00:00:25,350  -->  00:00:29,610
Then we have SSE-KMS where we encrypt this time
12

12

00:00:29,610  -->  00:00:32,760
with a KMS key to manage the encryption key.
13

13

00:00:32,760  -->  00:00:36,360
Then we have SSE-C to use Customer-Provided key.
14

14

00:00:36,360  -->  00:00:39,360
So this time we provide the own encryption key
15

15

00:00:39,360  -->  00:00:42,510
and don't worry, we'll see all of these in great detail
16

16

00:00:42,510  -->  00:00:43,343
in the next slide.
17

17

00:00:43,343  -->  00:00:44,970
So this is just an overview.
18

18

00:00:44,970  -->  00:00:47,610
And then we have Client-Side Encryption
19

19

00:00:47,610  -->  00:00:49,230
when we want to encrypt everything Client-Side
20

20

00:00:49,230  -->  00:00:52,050
and then upload it to Amazon S3.
21

21

00:00:52,050  -->  00:00:54,000
So at the exam it's important to understand
22

22

00:00:54,000  -->  00:00:55,770
which ones are for which situation.
23

23

00:00:55,770  -->  00:00:57,690
So let's do a deep dive into all of those
24

24

00:00:57,690  -->  00:01:00,780
and understand the specificities of them.
25

25

00:01:00,780  -->  00:01:05,250
So the first one is Amazon S3 for SSE-S3 Encryption.
26

26

00:01:05,250  -->  00:01:08,520
So in this case, the encryption is using a key
27

27

00:01:08,520  -->  00:01:12,060
that's handled, managed and owned by AWS.
28

28

00:01:12,060  -->  00:01:13,950
You never have access to this key.
29

29

00:01:13,950  -->  00:01:17,910
The object is going to be Encrypted Server-Side by AWS
30

30

00:01:17,910  -->  00:01:22,110
and the security type of the encryption is a AES-256.
31

31

00:01:22,110  -->  00:01:24,780
Therefore, you must set the header to
32

32

00:01:24,780  -->  00:01:28,890
x-amz-server-side encryption AES256
33

33

00:01:28,890  -->  00:01:32,040
to request Amazon S3 to encrypt the object for you
34

34

00:01:32,040  -->  00:01:34,680
using the SSE-S3 mechanism.
35

35

00:01:34,680  -->  00:01:38,010
Now SSE-S3 is enabled by default for new buckets
36

36

00:01:38,010  -->  00:01:39,930
and new objects.
37

37

00:01:39,930  -->  00:01:43,500
So how does that work with have Amazon S3 and our user?
38

38

00:01:43,500  -->  00:01:46,410
The user you, you're going to upload the file
39

39

00:01:46,410  -->  00:01:48,150
with the correct header
40

40

00:01:48,150  -->  00:01:50,447
and then it will be an object under Amazon S3.
41

41

00:01:50,447  -->  00:01:54,810
Amazon S3 will pair it with the S3 Owned key,
42

42

00:01:54,810  -->  00:01:57,660
okay, because we're using the SSE-S3 mechanism.
43

43

00:01:57,660  -->  00:01:59,340
And then we'll perform encryption
44

44

00:01:59,340  -->  00:02:01,500
by mixing the key and the object
45

45

00:02:01,500  -->  00:02:04,650
and that will be what will be stored on your S3 buckets.
46

46

00:02:04,650  -->  00:02:07,350
So that's for the simpler one, SSE-S3.
47

47

00:02:07,350  -->  00:02:09,000
Then we have SSE-KMS.
48

48

00:02:09,000  -->  00:02:11,040
So this time, instead of relying on the key
49

49

00:02:11,040  -->  00:02:14,070
that is owned by AWS MD S3 service,
50

50

00:02:14,070  -->  00:02:16,290
you want to manage your own keys yourself
51

51

00:02:16,290  -->  00:02:18,480
using the KMS service
52

52

00:02:18,480  -->  00:02:20,490
the Key Management Service.
53

53

00:02:20,490  -->  00:02:22,290
So the advantages using KMS
54

54

00:02:22,290  -->  00:02:24,270
is that you have user control over this key.
55

55

00:02:24,270  -->  00:02:27,150
So you can create keys yourself within KMS
56

56

00:02:27,150  -->  00:02:29,490
and you can edit the key usage using CloudTrail.
57

57

00:02:29,490  -->  00:02:32,280
So anytime someone uses a key in KMS
58

58

00:02:32,280  -->  00:02:34,440
this is going to be logged in a service
59

59

00:02:34,440  -->  00:02:38,070
that logs everything that happens in AWS called CloudTrail.
60

60

00:02:38,070  -->  00:02:41,610
So for this, we must have a header called
61

61

00:02:41,610  -->  00:02:45,389
the x-amz-server-side-encryption:awskms.
62

62

00:02:45,389  -->  00:02:48,360
and then the object will be encrypted server-side.
63

63

00:02:48,360  -->  00:02:51,060
So anything SSE of course is server-side.
64

64

00:02:51,060  -->  00:02:51,893
So how does that work?
65

65

00:02:51,893  -->  00:02:53,820
Well, again, we upload the object
66

66

00:02:53,820  -->  00:02:55,710
this time with a different header,
67

67

00:02:55,710  -->  00:02:58,230
and in the header we actually specify the KMS key
68

68

00:02:58,230  -->  00:02:59,273
we want to use.
69

69

00:02:59,273  -->  00:03:02,940
Then the object is appearing in Amazon S3
70

70

00:03:02,940  -->  00:03:05,478
and this time the KMS key that's going to be used
71

71

00:03:05,478  -->  00:03:09,090
is coming out of the AWS KMS.
72

72

00:03:09,090  -->  00:03:12,240
So these two things together are going to be blended
73

73

00:03:12,240  -->  00:03:14,040
and then you're gonna get encryption
74

74

00:03:14,040  -->  00:03:17,070
and that's the file is going to end up in the S3 buckets.
75

75

00:03:17,070  -->  00:03:19,590
So now to read that file from the S3 bucket
76

76

00:03:19,590  -->  00:03:22,260
not only do you need access to the object itself,
77

77

00:03:22,260  -->  00:03:25,273
but also, to the underlying KMS key that was used
78

78

00:03:25,273  -->  00:03:26,790
to encrypt this object.
79

79

00:03:26,790  -->  00:03:30,069
So this is another level of security.
80

80

00:03:30,069  -->  00:03:32,357
So SSE-KMS has some limitations,
81

81

00:03:32,357  -->  00:03:36,330
because while now that you upload and download files
82

82

00:03:36,330  -->  00:03:39,600
from Amazon S3, you need to leverage a KMS key.
83

83

00:03:39,600  -->  00:03:41,940
And the KMS key has its own APIs,
84

84

00:03:41,940  -->  00:03:43,680
for example, generate data key.
85

85

00:03:43,680  -->  00:03:46,590
And when you decrypt you're going to use the Decrypt API.
86

86

00:03:46,590  -->  00:03:48,990
And so therefore, you're going to do API calls
87

87

00:03:48,990  -->  00:03:51,300
into the KMS service,
88

88

00:03:51,300  -->  00:03:52,980
and each of these API calls
89

89

00:03:52,980  -->  00:03:55,740
is going to count towards the KMS quotas
90

90

00:03:55,740  -->  00:03:57,540
of API calls per second.
91

91

00:03:57,540  -->  00:03:59,130
So based on the region you have
92

92

00:03:59,130  -->  00:04:01,800
between 5,000 and 30,000 requests per second,
93

93

00:04:01,800  -->  00:04:03,450
although they can be increased
94

94

00:04:03,450  -->  00:04:05,730
using the Service Quotas Console.
95

95

00:04:05,730  -->  00:04:09,070
And so, if you have a very, very high throughput S3 bucket
96

96

00:04:10,080  -->  00:04:12,540
and everything is encrypted using KMS keys
97

97

00:04:12,540  -->  00:04:15,450
you may go into a thread link kind of use case.
98

98

00:04:15,450  -->  00:04:18,281
So this is something the exam may test you on.
99

99

00:04:18,281  -->  00:04:22,110
Next we have the SSE-C type of encryption.
100

100

00:04:22,110  -->  00:04:26,280
So this time the keys are managed outside of AWS,
101

101

00:04:26,280  -->  00:04:28,290
but it still service that encryption,
102

102

00:04:28,290  -->  00:04:31,350
because we send the key to AWS.
103

103

00:04:31,350  -->  00:04:33,120
But Amazon S3 will never store
104

104

00:04:33,120  -->  00:04:34,590
the encryption key you provide.
105

105

00:04:34,590  -->  00:04:36,960
After they're used, they're being discarded.
106

106

00:04:36,960  -->  00:04:37,793
So in that case,
107

107

00:04:37,793  -->  00:04:40,560
because we transmit a key into Amazon S3
108

108

00:04:40,560  -->  00:04:43,740
we must use HTTPS and we must pass the key
109

109

00:04:43,740  -->  00:04:47,550
as part of HTTP headers for every request being made.
110

110

00:04:47,550  -->  00:04:48,570
So how does that work?
111

111

00:04:48,570  -->  00:04:52,590
The user is going to upload a file as well as the key,
112

112

00:04:52,590  -->  00:04:54,820
but the user manages the key outside of AWS
113

113

00:04:55,920  -->  00:04:59,190
and then Amazon S3 will use the client's provided key
114

114

00:04:59,190  -->  00:05:01,920
and the object to perform some encryption
115

115

00:05:01,920  -->  00:05:05,220
and then put the file as encrypted into an S3 bucket.
116

116

00:05:05,220  -->  00:05:08,070
And of course, to read that file, the user must again
117

117

00:05:08,070  -->  00:05:11,430
provide the key that was used to encrypt that file.
118

118

00:05:11,430  -->  00:05:14,880
Finally, we have the Client-Side Encryption.
119

119

00:05:14,880  -->  00:05:16,500
So this is easier to implement
120

120

00:05:16,500  -->  00:05:18,150
if we leverage some client library
121

121

00:05:18,150  -->  00:05:21,000
such as the Client-Side Encryption Library.
122

122

00:05:21,000  -->  00:05:22,710
And the idea with Client-Side Encryption
123

123

00:05:22,710  -->  00:05:26,040
is that the clients must encrypt data themselves
124

124

00:05:26,040  -->  00:05:29,040
before sending data to Amazon S3.
125

125

00:05:29,040  -->  00:05:31,655
And also, you can retrieve the data from Amazon S3
126

126

00:05:31,655  -->  00:05:33,810
and then the decryption of the data
127

127

00:05:33,810  -->  00:05:37,140
happens on the client outside of Amazon S3.
128

128

00:05:37,140  -->  00:05:39,448
Therefore, the client fully manages the keys
129

129

00:05:39,448  -->  00:05:41,700
and the encryption cycle.
130

130

00:05:41,700  -->  00:05:42,660
So how does that work?
131

131

00:05:42,660  -->  00:05:45,420
We have a file and we have a client's key
132

132

00:05:45,420  -->  00:05:47,100
that's outside of AWS.
133

133

00:05:47,100  -->  00:05:49,560
The client itself is going to provide
134

134

00:05:49,560  -->  00:05:50,970
and perform the encryption.
135

135

00:05:50,970  -->  00:05:52,860
So now we have an encrypted file.
136

136

00:05:52,860  -->  00:05:57,860
And that file as is can be sent into Amazon S3 for upload.
137

137

00:05:57,930  -->  00:06:01,080
So we've seen all the levels of encryption of objects,
138

138

00:06:01,080  -->  00:06:03,810
but now let's talk about encryption in transit.
139

139

00:06:03,810  -->  00:06:06,120
So encryption in transit or in flight
140

140

00:06:06,120  -->  00:06:08,640
is also called SSL or TLS.
141

141

00:06:08,640  -->  00:06:12,030
And basically, your Amazon S3 bucket has two endpoints.
142

142

00:06:12,030  -->  00:06:14,970
The HTTP endpoint that is not encrypted
143

143

00:06:14,970  -->  00:06:18,780
and the HTTPS endpoint that has encryption in flight.
144

144

00:06:18,780  -->  00:06:20,220
So anytime you visit a website
145

145

00:06:20,220  -->  00:06:21,840
and you see that green lock or a lock
146

146

00:06:21,840  -->  00:06:24,330
usually that means it's using encryption in flight
147

147

00:06:24,330  -->  00:06:27,420
meaning the connection between you and the target server
148

148

00:06:27,420  -->  00:06:29,610
is secure and fully encrypted.
149

149

00:06:29,610  -->  00:06:31,560
And therefore, when you're using Amazon S3
150

150

00:06:31,560  -->  00:06:34,200
it's fully recommended to use HTTPS
151

151

00:06:34,200  -->  00:06:36,900
to have secure transmission of data, of course.
152

152

00:06:36,900  -->  00:06:40,380
And if you use the SSE-C type of mechanism
153

153

00:06:40,380  -->  00:06:43,740
you must use the HTTPS protocol.
154

154

00:06:43,740  -->  00:06:45,900
Now this is not something to worry about in real-life,
155

155

00:06:45,900  -->  00:06:48,270
because well, most clients would use
156

156

00:06:48,270  -->  00:06:51,270
the HTTPS endpoint by default.
157

157

00:06:51,270  -->  00:06:52,800
So that's it for encryption.
158

158

00:06:52,800  -->  00:06:55,833
I hope you liked it, and I will see you in the next lecture.
