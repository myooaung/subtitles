1
1

00:00:00,300  -->  00:00:01,133
<v Instructor>So now let's talk</v>
2

2

00:00:01,133  -->  00:00:04,350
how we can revoke IAM role's temporary credentials.
3

3

00:00:04,350  -->  00:00:06,750
So when you have a session with IAM, for example,
4

4

00:00:06,750  -->  00:00:08,880
a long session of 12 hours,
5

5

00:00:08,880  -->  00:00:10,920
in case the credentials are exposed,
6

6

00:00:10,920  -->  00:00:13,500
they can be used for the duration of the session.
7

7

00:00:13,500  -->  00:00:14,790
So that means that if you leak them,
8

8

00:00:14,790  -->  00:00:16,950
then someone can use them, and this is bad.
9

9

00:00:16,950  -->  00:00:19,170
So what we want to do is that if they're exposed,
10

10

00:00:19,170  -->  00:00:21,870
we want to immediately revoke all permissions
11

11

00:00:21,870  -->  00:00:25,350
to the IAM role's credentials before a certain time.
12

12

00:00:25,350  -->  00:00:27,480
And we can do this with the console
13

13

00:00:27,480  -->  00:00:29,070
and in the backend what's going to happen
14

14

00:00:29,070  -->  00:00:33,180
is that AWS is going to attach a new inline IAM policy
15

15

00:00:33,180  -->  00:00:36,810
onto the IAM role that is going to deny everything
16

16

00:00:36,810  -->  00:00:38,490
if the token is too old
17

17

00:00:38,490  -->  00:00:40,980
which will force users to reauthenticate.
18

18

00:00:40,980  -->  00:00:42,630
So this is where the DateLessThan
19

19

00:00:43,650  -->  00:00:45,870
is going to be used as a condition.
20

20

00:00:45,870  -->  00:00:48,660
So this policy is going to be attached to your IAM role
21

21

00:00:48,660  -->  00:00:50,760
is gonna say deny everything
22

22

00:00:50,760  -->  00:00:54,660
if the token issue time is less than right now.
23

23

00:00:54,660  -->  00:00:58,680
And what's going to happen out of it is that your users
24

24

00:00:58,680  -->  00:01:01,380
that had a token issued before right now
25

25

00:01:01,380  -->  00:01:03,600
will not be able to do any actions on AWS
26

26

00:01:03,600  -->  00:01:05,850
because you have now an explicit deny.
27

27

00:01:05,850  -->  00:01:09,810
So it doesn't affect any user who assumed the IAM role
28

28

00:01:09,810  -->  00:01:12,270
after you revoke the sessions
29

29

00:01:12,270  -->  00:01:13,230
because, well,
30

30

00:01:13,230  -->  00:01:15,390
the token issue time is going to be greater than,
31

31

00:01:15,390  -->  00:01:18,360
so this deny section will never come into place.
32

32

00:01:18,360  -->  00:01:21,240
So you don't need to delete this policy called
33

33

00:01:21,240  -->  00:01:23,100
AWSRevokeOlderSessions Policy.
34

34

00:01:23,100  -->  00:01:25,680
You can leave it forever and you're fine.
35

35

00:01:25,680  -->  00:01:29,070
So in case you have, as I said, a leaked credential,
36

36

00:01:29,070  -->  00:01:31,440
and you want to revoke these temporary credentials
37

37

00:01:31,440  -->  00:01:33,960
because an attacker had access to them,
38

38

00:01:33,960  -->  00:01:36,060
then you're going to, as an administrator,
39

39

00:01:36,060  -->  00:01:40,200
attach this AWSRevokeOlderSessions Policy
40

40

00:01:40,200  -->  00:01:41,820
and then automatically,
41

41

00:01:41,820  -->  00:01:44,700
the attacker will not have access anymore.
42

42

00:01:44,700  -->  00:01:47,520
It will not be able to use the credentials that have leaked.
43

43

00:01:47,520  -->  00:01:48,353
So that's it.
44

44

00:01:48,353  -->  00:01:49,200
That's the one time
45

45

00:01:49,200  -->  00:01:52,950
where you can use the token issue time condition in AWS.
46

46

00:01:52,950  -->  00:01:56,133
I hope you liked it and I will see you in the next lecture.
