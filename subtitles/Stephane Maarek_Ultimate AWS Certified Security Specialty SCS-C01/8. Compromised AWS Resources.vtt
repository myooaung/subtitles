WEBVTT
1
1

00:00:00.210  -->  00:00:03.840
<v Instructor>So what to do in case some resources in AWS</v>
2

2

00:00:03.840  -->  00:00:05.340
are compromised.
3

3

00:00:05.340  -->  00:00:07.440
Well, the most important one to remember
4

4

00:00:07.440  -->  00:00:10.140
is how to deal with a compromised EC2 instance
5

5

00:00:10.140  -->  00:00:12.570
because the exam will test you on that.
6

6

00:00:12.570  -->  00:00:16.080
So let's take an example of two AZs, one VPC
7

7

00:00:16.080  -->  00:00:18.450
two instances running in an autoscaling group
8

8

00:00:18.450  -->  00:00:20.550
and connected to a load balancer.
9

9

00:00:20.550  -->  00:00:24.720
And the instances are having the WebApp security group.
10

10

00:00:24.720  -->  00:00:28.320
So let's say one of these instances is compromise.
11

11

00:00:28.320  -->  00:00:29.460
So what do we do?
12

12

00:00:29.460  -->  00:00:33.630
Number one is we capture all of the instance metadata
13

13

00:00:33.630  -->  00:00:35.790
then we enable termination protection
14

14

00:00:35.790  -->  00:00:37.650
because we want to keep it
15

15

00:00:37.650  -->  00:00:39.420
and wanna make sure that it doesn't disappear.
16

16

00:00:39.420  -->  00:00:41.130
We isolate the instance
17

17

00:00:41.130  -->  00:00:43.860
so we replace the instant security group
18

18

00:00:43.860  -->  00:00:47.010
with one with no outbound traffic authorized.
19

19

00:00:47.010  -->  00:00:48.450
And so therefore, this instance
20

20

00:00:48.450  -->  00:00:51.037
cannot communicate with the outside world
21

21

00:00:51.037  -->  00:00:52.770
and at least it is contained.
22

22

00:00:52.770  -->  00:00:55.890
Next, we can detach the instance from any auto-scaling group
23

23

00:00:55.890  -->  00:00:58.470
so we can suspend the processes
24

24

00:00:58.470  -->  00:01:01.920
of the auto-scaling group and then detach the instance.
25

25

00:01:01.920  -->  00:01:03.930
And of course, we wanna de-register the instance
26

26

00:01:03.930  -->  00:01:06.600
from any ELB because we don't want that instance
27

27

00:01:06.600  -->  00:01:09.090
to be part of any network traffic.
28

28

00:01:09.090  -->  00:01:12.120
Now, if the attack is happening on the EC2 instance
29

29

00:01:12.120  -->  00:01:15.240
that means something was installed on the root volume maybe,
30

30

00:01:15.240  -->  00:01:16.380
or any attached volume.
31

31

00:01:16.380  -->  00:01:19.350
So we snapshot any EBS volumes attached
32

32

00:01:19.350  -->  00:01:22.050
to the instance for deeper analysis.
33

33

00:01:22.050  -->  00:01:24.300
So we have a volume, we make a snapshot,
34

34

00:01:24.300  -->  00:01:28.290
and then we can create a forensics EC2 instance
35

35

00:01:28.290  -->  00:01:31.260
that we control and we attach all the volumes
36

36

00:01:31.260  -->  00:01:34.080
that we've snapshotted back to this instance
37

37

00:01:34.080  -->  00:01:36.466
and then we'll be able to have a look
38

38

00:01:36.466  -->  00:01:39.930
deeply into the snapshotted data, what is happening
39

39

00:01:39.930  -->  00:01:42.630
and what is the root cause of the compromise.
40

40

00:01:42.630  -->  00:01:45.180
Also, if you have an EC2 instance that is compromised
41

41

00:01:45.180  -->  00:01:47.820
please make sure to tag the EC2 instance
42

42

00:01:47.820  -->  00:01:50.880
with the investigation ticket number, for example,
43

43

00:01:50.880  -->  00:01:53.670
so that you know that well, something is wrong
44

44

00:01:53.670  -->  00:01:55.140
with that instance.
45

45

00:01:55.140  -->  00:01:57.900
There are two types of investigations you can do.
46

46

00:01:57.900  -->  00:01:59.970
You can do an offline investigation,
47

47

00:01:59.970  -->  00:02:02.040
so this is when you shut down the instance
48

48

00:02:02.040  -->  00:02:04.650
and you're going to look at the EBS volumes
49

49

00:02:04.650  -->  00:02:06.750
that have been snapshotted and then restored
50

50

00:02:06.750  -->  00:02:09.300
and attached to a forensic EC2 instance.
51

51

00:02:09.300  -->  00:02:10.500
That's one way.
52

52

00:02:10.500  -->  00:02:13.410
The second way is to do an online investigation
53

53

00:02:13.410  -->  00:02:16.380
where on top of it you're going to snapshot the memory
54

54

00:02:16.380  -->  00:02:18.240
or capture the network traffic.
55

55

00:02:18.240  -->  00:02:20.550
The risk is of course, that the EC2 instance
56

56

00:02:20.550  -->  00:02:23.370
is still active, but with an online investigation
57

57

00:02:23.370  -->  00:02:26.370
you can maybe understand what the EC2 instance
58

58

00:02:26.370  -->  00:02:28.440
is trying to leak to the outside world,
59

59

00:02:28.440  -->  00:02:32.130
and you can maybe do a better investigation this way.
60

60

00:02:32.130  -->  00:02:33.750
Now, to automate all these processes,
61

61

00:02:33.750  -->  00:02:35.280
you can use Lambda,
62

62

00:02:35.280  -->  00:02:37.590
and if you want to automate the memory capture
63

63

00:02:37.590  -->  00:02:41.250
of your EC2 instance, you can use the SSM run command.
64

64

00:02:41.250  -->  00:02:44.190
So these steps should feel natural to you
65

65

00:02:44.190  -->  00:02:47.310
and remember them going into the exam.
66

66

00:02:47.310  -->  00:02:49.620
Now let's review the other kinds of resources
67

67

00:02:49.620  -->  00:02:50.460
that can be compromised.
68

68

00:02:50.460  -->  00:02:52.500
So we have an S3 bucket in this case
69

69

00:02:52.500  -->  00:02:55.800
we identify the compromised S3 bucket using GuardDuty.
70

70

00:02:55.800  -->  00:02:59.190
We identify the source of the malicious activity
71

71

00:02:59.190  -->  00:03:02.190
Using CloudTrail or Amazon Detective
72

72

00:03:02.190  -->  00:03:05.190
and then we're going to identify whether or not
73

73

00:03:05.190  -->  00:03:08.760
the source was actually authorized to make these API calls.
74

74

00:03:08.760  -->  00:03:10.200
Once we figure out what is happening
75

75

00:03:10.200  -->  00:03:13.290
we can reinforce the security of our S3 buckets.
76

76

00:03:13.290  -->  00:03:15.810
So some recommended settings are going to be around
77

77

00:03:15.810  -->  00:03:17.700
blocking the public access
78

78

00:03:17.700  -->  00:03:19.680
making sure we have good bucket policies
79

79

00:03:19.680  -->  00:03:23.850
and good IAM policies, creating VPC endpoints for Amazon S3
80

80

00:03:23.850  -->  00:03:27.690
using S3 pre-signed URLs, using S3 access points
81

81

00:03:27.690  -->  00:03:29.160
or they're deprecated.
82

82

00:03:29.160  -->  00:03:32.640
But we could also use S3 ACLs.
83

83

00:03:32.640  -->  00:03:34.560
Now for compromised ECS cluster.
84

84

00:03:34.560  -->  00:03:38.280
So you identify which cluster is compromised using GuardDuty
85

85

00:03:38.280  -->  00:03:41.580
and then you identify the source of the malicious activity.
86

86

00:03:41.580  -->  00:03:45.180
So is it a container image, is it some tasks, and so on.
87

87

00:03:45.180  -->  00:03:47.400
And then you escalate all the impacted tasks.
88

88

00:03:47.400  -->  00:03:50.400
So you deny them all ingress and egress traffic
89

89

00:03:50.400  -->  00:03:51.720
using a new security group
90

90

00:03:51.720  -->  00:03:55.200
similarly to what we've done to our EC2 instances.
91

91

00:03:55.200  -->  00:03:57.420
And then you evaluate the presence of malware
92

92

00:03:57.420  -->  00:04:00.240
or malicious activity on these containers
93

93

00:04:00.240  -->  00:04:02.430
and you figure out the root cause of it.
94

94

00:04:02.430  -->  00:04:05.340
If you have a standalone cluster, container, sorry
95

95

00:04:05.340  -->  00:04:07.320
that is compromised, it's a similar process.
96

96

00:04:07.320  -->  00:04:09.180
So you identify what is happening
97

97

00:04:09.180  -->  00:04:11.100
you isolate the container itself.
98

98

00:04:11.100  -->  00:04:12.780
With a new security group
99

99

00:04:12.780  -->  00:04:15.450
you can suspend all the processes within the container.
100

100

00:04:15.450  -->  00:04:17.260
It's called pausing the container
101

101

00:04:18.433  -->  00:04:19.350
or you can stop the container itself
102

102

00:04:19.350  -->  00:04:22.357
and look at any snapshotted data.
103

103

00:04:22.357  -->  00:04:24.900
So there is an EBS snapshot feature by GuardDuty
104

104

00:04:24.900  -->  00:04:28.860
to retain any snapshots of compromised resources.
105

105

00:04:28.860  -->  00:04:31.470
And then of course you do a forensics analysis
106

106

00:04:31.470  -->  00:04:34.320
and you detect the presence of malicious activity
107

107

00:04:34.320  -->  00:04:36.243
and you understand what is happening.
108

108

00:04:37.140  -->  00:04:40.530
You can also detect compromised RDS database instances.
109

109

00:04:40.530  -->  00:04:44.340
So similarly it's going to be into GuardDuty to figure out
110

110

00:04:44.340  -->  00:04:46.290
which instance got affected
111

111

00:04:46.290  -->  00:04:49.020
and what is the source of malicious activity
112

112

00:04:49.020  -->  00:04:51.570
and in case it is not legitimate behavior.
113

113

00:04:51.570  -->  00:04:54.090
Then number one we want to restrict network access
114

114

00:04:54.090  -->  00:04:56.610
using security group and NALCs,
115

115

00:04:56.610  -->  00:04:59.160
or we want to restrict the database access
116

116

00:04:59.160  -->  00:05:01.860
for the suspected user that got compromised,
117

117

00:05:01.860  -->  00:05:04.230
because usually if your RDS database is compromised
118

118

00:05:04.230  -->  00:05:06.570
it means that user credentials leaked.
119

119

00:05:06.570  -->  00:05:07.650
So for these users
120

120

00:05:07.650  -->  00:05:10.620
well it's good to rotate the user's password
121

121

00:05:10.620  -->  00:05:13.980
so that the attacker cannot use the user anymore.
122

122

00:05:13.980  -->  00:05:16.740
You can also look at the database audit log
123

123

00:05:16.740  -->  00:05:20.190
to figure out any leaked data and on top of it
124

124

00:05:20.190  -->  00:05:23.100
you can enhance the security of your RDS database.
125

125

00:05:23.100  -->  00:05:24.720
Some recommended settings, of course
126

126

00:05:24.720  -->  00:05:27.060
are going to be around using Secrets Manager
127

127

00:05:27.060  -->  00:05:29.550
to rotate the database passwords
128

128

00:05:29.550  -->  00:05:32.160
and of course using IAM database authentication
129

129

00:05:32.160  -->  00:05:34.980
to make sure the users can access our RDS database
130

130

00:05:34.980  -->  00:05:37.620
just through IAM policies being authorized to
131

131

00:05:37.620  -->  00:05:39.630
and not with password.
132

132

00:05:39.630  -->  00:05:40.980
Alright, that's it for this lecture.
133

133

00:05:40.980  -->  00:05:43.983
I hope you liked it and I will see you in the next lecture.
