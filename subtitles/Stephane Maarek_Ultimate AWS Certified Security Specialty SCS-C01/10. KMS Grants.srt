1
1

00:00:00,000  -->  00:00:01,290
<v Instructor>So let's talk about a concept</v>
2

2

00:00:01,290  -->  00:00:06,210
that you may not be familiar with called the KMS key grants.
3

3

00:00:06,210  -->  00:00:10,650
So KMS key grants allow you to grant access
4

4

00:00:10,650  -->  00:00:15,480
to specific KMS keys that you own to other accounts
5

5

00:00:15,480  -->  00:00:18,750
or IAM users or roles within your accounts.
6

6

00:00:18,750  -->  00:00:21,870
So you may say, well, why don't you use a KMS key policy?
7

7

00:00:21,870  -->  00:00:23,130
Well, there is a reason.
8

8

00:00:23,130  -->  00:00:26,100
It's often used for temporary permissions.
9

9

00:00:26,100  -->  00:00:30,270
So you can be creating a grant for a variety of operations
10

10

00:00:30,270  -->  00:00:33,450
such as encrypt, decrypt, sign, verify,
11

11

00:00:33,450  -->  00:00:36,810
as well as even creating more grants.
12

12

00:00:36,810  -->  00:00:40,380
So these grants are for one KMS key only
13

13

00:00:40,380  -->  00:00:42,000
and one or more IAM Principal.
14

14

00:00:42,000  -->  00:00:46,590
So you say, hey, I grant this KMS key to these three users.
15

15

00:00:46,590  -->  00:00:50,610
And once granted, a principle can perform any operation
16

16

00:00:50,610  -->  00:00:53,070
as specified in the grant.
17

17

00:00:53,070  -->  00:00:57,000
So it's like your key permissions are definitely ruled
18

18

00:00:57,000  -->  00:00:58,710
by your KMS key policy
19

19

00:00:58,710  -->  00:01:03,480
and also any KMS key grant you may have defined on top.
20

20

00:01:03,480  -->  00:01:06,300
These grants that do not expire automatically,
21

21

00:01:06,300  -->  00:01:08,370
you must delete them manually.
22

22

00:01:08,370  -->  00:01:10,050
But the benefit of using a grant
23

23

00:01:10,050  -->  00:01:12,720
is that you do not need to change your KMS key policy
24

24

00:01:12,720  -->  00:01:14,310
or the IAM policy,
25

25

00:01:14,310  -->  00:01:17,250
you just define the grant and you're good to go.
26

26

00:01:17,250  -->  00:01:20,700
So how do you go about creating a KMS key grant
27

27

00:01:20,700  -->  00:01:23,010
while you use the CLI for this?
28

28

00:01:23,010  -->  00:01:25,500
And this is the kind of CLI command you need to use.
29

29

00:01:25,500  -->  00:01:26,333
Don't remember it.
30

30

00:01:26,333  -->  00:01:27,300
But as you can see,
31

31

00:01:27,300  -->  00:01:30,810
the key grant is applying to a specific key ID.
32

32

00:01:30,810  -->  00:01:33,000
Then we define a grantee principle.
33

33

00:01:33,000  -->  00:01:34,950
So who can use it?
34

34

00:01:34,950  -->  00:01:36,720
What is the operations that are allowed
35

35

00:01:36,720  -->  00:01:38,430
as part of this grant?
36

36

00:01:38,430  -->  00:01:40,680
And then what are the constraints?
37

37

00:01:40,680  -->  00:01:44,820
So after you're done using a key grant,
38

38

00:01:44,820  -->  00:01:45,780
you must delete it
39

39

00:01:45,780  -->  00:01:49,530
so that, of course, people don't have lingering permissions.
40

40

00:01:49,530  -->  00:01:51,420
For now, as far as I know, there's no support
41

41

00:01:51,420  -->  00:01:55,020
of KMS key grants in the console, so API calls only.
42

42

00:01:55,020  -->  00:01:57,690
So why do we have key grants in the first place
43

43

00:01:57,690  -->  00:02:00,990
where it seems like it's kind of duplicating the role
44

44

00:02:00,990  -->  00:02:03,390
of, well, key policies?
45

45

00:02:03,390  -->  00:02:06,990
Well, it turns out that AWS is using key grants all the time
46

46

00:02:06,990  -->  00:02:09,270
and you may have seen grants sometimes
47

47

00:02:09,270  -->  00:02:11,160
in your KMS key policies.
48

48

00:02:11,160  -->  00:02:12,090
So why?
49

49

00:02:12,090  -->  00:02:17,090
Well, we grant AWS services the right to use the KMS key
50

50

00:02:17,640  -->  00:02:20,010
to encrypt your own data at rest.
51

51

00:02:20,010  -->  00:02:23,730
And so the service that will use the key
52

52

00:02:23,730  -->  00:02:26,310
will create a grant on behalf of a user,
53

53

00:02:26,310  -->  00:02:27,870
and then it will leverage your permissions
54

54

00:02:27,870  -->  00:02:30,630
and retire the grant as soon as that is complete.
55

55

00:02:30,630  -->  00:02:34,320
So this is how services are allowed to use your KMS key
56

56

00:02:34,320  -->  00:02:36,750
is because you create a grant behind the scene
57

57

00:02:36,750  -->  00:02:40,410
and your service has the right to use your key.
58

58

00:02:40,410  -->  00:02:44,070
So to allow a service to use your KMS key,
59

59

00:02:44,070  -->  00:02:47,070
you must have the CreateGrant IAM permissions.
60

60

00:02:47,070  -->  00:02:49,260
So when you start at EC2 instance
61

61

00:02:49,260  -->  00:02:52,650
and its Route EBS volume is encrypted,
62

62

00:02:52,650  -->  00:02:54,390
behind the scenes what's going to happen
63

63

00:02:54,390  -->  00:02:58,290
is that Amazon EBS is going to create a grant,
64

64

00:02:58,290  -->  00:02:59,880
and then thanks to this grant,
65

65

00:02:59,880  -->  00:03:03,060
is going to be able to decrypt the Root EBS volume
66

66

00:03:03,060  -->  00:03:04,950
and to encrypt it as well.
67

67

00:03:04,950  -->  00:03:08,250
So this is the behind the scene usage of KMS.
68

68

00:03:08,250  -->  00:03:11,100
So let's have a look at a custom KMS key policy.
69

69

00:03:11,100  -->  00:03:12,120
So if we look at it,
70

70

00:03:12,120  -->  00:03:14,970
we have CreateGrant, ListGrants and RevokeGrant.
71

71

00:03:14,970  -->  00:03:17,910
So that is granted to a user.
72

72

00:03:17,910  -->  00:03:19,740
And this user has a condition,
73

73

00:03:19,740  -->  00:03:21,840
it can do only these API calls
74

74

00:03:21,840  -->  00:03:25,290
if you grant an AWS resource true.
75

75

00:03:25,290  -->  00:03:27,690
So that means that the user can create a grant only
76

76

00:03:27,690  -->  00:03:29,250
for an AWS service,
77

77

00:03:29,250  -->  00:03:32,820
therefore allowing a service such as Amazon EBS
78

78

00:03:32,820  -->  00:03:35,100
or Amazon EC2 to do encryption, for example,
79

79

00:03:35,100  -->  00:03:38,550
to attach an encrypted EBS volume to an EC2 instance,
80

80

00:03:38,550  -->  00:03:40,800
or Redshift to launch an encrypted cluster,
81

81

00:03:40,800  -->  00:03:43,350
or any service that integrates with KMS
82

82

00:03:43,350  -->  00:03:45,630
and that uses grants to create, manage,
83

83

00:03:45,630  -->  00:03:48,000
or encrypt resources within.
84

84

00:03:48,000  -->  00:03:49,500
So hopefully, that makes sense.
85

85

00:03:49,500  -->  00:03:51,870
So if you have an EC2 instance
86

86

00:03:51,870  -->  00:03:55,200
and it has an encrypted EBS volume and you cannot start it,
87

87

00:03:55,200  -->  00:03:57,750
the reason that that it may fail is, number one,
88

88

00:03:57,750  -->  00:04:00,690
while the KMS key might be disabled or deleted,
89

89

00:04:00,690  -->  00:04:01,920
second, the EBS service
90

90

00:04:01,920  -->  00:04:05,910
might not have the permission required to use the KMS key.
91

91

00:04:05,910  -->  00:04:06,743
So the resolution
92

92

00:04:06,743  -->  00:04:08,940
is, of course, make sure the KMS key exists.
93

93

00:04:08,940  -->  00:04:11,430
And number two, make sure the EBS service
94

94

00:04:11,430  -->  00:04:14,730
has the required permission to create KMS key grants
95

95

00:04:14,730  -->  00:04:17,790
on top on behalf of the specified principle.
96

96

00:04:17,790  -->  00:04:21,810
So this is the kind of permission we'd be looking at.
97

97

00:04:21,810  -->  00:04:26,190
And then this condition, kms:GrantIsForAWSResource,
98

98

00:04:26,190  -->  00:04:29,130
will allow the services to get these grants
99

99

00:04:29,130  -->  00:04:32,190
and to perform their encryption operations.
100

100

00:04:32,190  -->  00:04:33,300
So hopefully that makes sense.
101

101

00:04:33,300  -->  00:04:36,300
I hope you liked it, and I will see you in the next lecture.
