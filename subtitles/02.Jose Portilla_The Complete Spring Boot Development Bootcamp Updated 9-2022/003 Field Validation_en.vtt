WEBVTT
1
00:00:00.450 --> 00:00:03.780
Field validation prevents the user from inputting invalid data.

2
00:00:04.050 --> 00:00:07.560
Data storage costs money in your app should only store what's meaningful.

3
00:00:11.740 --> 00:00:15.910
So in this lesson, you will add constraints to the name and subject fields.

4
00:00:19.760 --> 00:00:21.470
Let's go through the field validation process.

5
00:00:21.470 --> 00:00:22.670
It takes five steps.

6
00:00:22.670 --> 00:00:25.940
Step one is to annotate the fields that you want to validate.

7
00:00:27.110 --> 00:00:33.260
In this example, courtesy of Spring Boot Magic, the men annotation can check if the age provided is

8
00:00:33.260 --> 00:00:34.940
at least 18 years old.

9
00:00:37.990 --> 00:00:40.270
Step two is to pass on a bad input.

10
00:00:44.390 --> 00:00:50.840
When the user presses submit, a post request will be initiated and the post request payload will have

11
00:00:50.840 --> 00:00:55.130
as many parameters as there are fields attached to each input.

12
00:01:00.380 --> 00:01:02.540
The handler method validates the fields.

13
00:01:05.580 --> 00:01:11.080
Spring Boot will create an empty person object that's ready to receive the payload from the post request.

14
00:01:11.100 --> 00:01:16.500
And Spring Boot is smart enough to use your setters to update every single field in this object with

15
00:01:16.500 --> 00:01:18.450
payload from the post request.

16
00:01:19.820 --> 00:01:24.280
As we update the object, Spring Boot is going to try and validate each field.

17
00:01:24.290 --> 00:01:26.030
The first field is valid.

18
00:01:26.900 --> 00:01:29.990
However, we require the age to be at least 18.

19
00:01:29.990 --> 00:01:32.630
So the age field is not valid.

20
00:01:37.730 --> 00:01:41.120
A binding result will carry the result of the validation.

21
00:01:42.780 --> 00:01:49.380
So in this case, our validation process does have errors in step five if the result is negative.

22
00:01:49.410 --> 00:01:53.100
The handler method forces the user to stay in the form view.

23
00:01:56.490 --> 00:02:01.260
So the binding result has errors, which means we're going to force the user to go back to the form.

24
00:02:01.890 --> 00:02:05.850
And step six finally catches the errors and displays them to the user.

25
00:02:08.520 --> 00:02:14.640
So the binding result keeps a record of the object name where the validation process took place, and

26
00:02:14.640 --> 00:02:20.520
this object name is going to match whatever object file if attached to our form.

27
00:02:20.940 --> 00:02:25.470
It's going to keep a record of all the errors associated with each field.

28
00:02:25.500 --> 00:02:28.460
There is an error associated with the field.

29
00:02:28.470 --> 00:02:32.880
Finally, if can access that error from the binding result and display it in the form.

30
00:02:34.300 --> 00:02:38.410
So step one is to actually annotate your field that needs validation.

31
00:02:41.560 --> 00:02:44.690
And field validation in Spring Boot is like magic.

32
00:02:44.710 --> 00:02:49.260
Spring Boot provides many standard annotations that you can apply to your fields.

33
00:02:49.270 --> 00:02:52.060
This will be inside of your cheat sheet, so not to worry.

34
00:02:52.510 --> 00:02:55.480
Now, each annotation validates a field in some way.

35
00:02:55.750 --> 00:03:01.300
In order to leverage these annotations, we're going to have to add the spring boot starter validation

36
00:03:01.300 --> 00:03:02.230
dependency.

37
00:03:02.830 --> 00:03:10.150
So I'll go over to Google and I will Google the spring boot validation dependency.

38
00:03:12.390 --> 00:03:14.970
We can grab it from the central maven repo.

39
00:03:15.930 --> 00:03:20.910
I'll grab the one that corresponds to my application version 2.6.7.

40
00:03:21.270 --> 00:03:28.290
But that won't really matter because what I'm going to do is delete the version number because the version

41
00:03:28.290 --> 00:03:34.680
for spring boot starters has already been specified on top, and I will choose to synchronize the built

42
00:03:34.680 --> 00:03:35.280
file.

43
00:03:37.410 --> 00:03:38.490
All right.

44
00:03:39.090 --> 00:03:43.260
This dependency provides all of the classes we need for field validation.

45
00:03:43.500 --> 00:03:50.400
So first, what I'm going to do is go to great Java and apply the not blank annotation to name and to

46
00:03:50.400 --> 00:03:51.330
subject.

47
00:03:51.630 --> 00:03:52.830
We'll say.

48
00:03:54.150 --> 00:03:55.260
And.

49
00:03:57.160 --> 00:04:02.620
And just as a side note, if this doesn't auto import for you or it doesn't show you the option, try

50
00:04:02.620 --> 00:04:07.480
just running the app first and if that doesn't work, relaunch your editor.

51
00:04:08.020 --> 00:04:12.010
This applies to both V's code and IntelliJ and an intelligent.

52
00:04:12.010 --> 00:04:15.370
You should have this invalidate cache button.

53
00:04:15.640 --> 00:04:18.519
Make sure to press that and your problem should be solved.

54
00:04:18.760 --> 00:04:21.310
So we'll add the not too blank annotation.

55
00:04:22.190 --> 00:04:24.110
Over here and here as well.

56
00:04:26.610 --> 00:04:30.390
And each constraint can return a message if the user violates it.

57
00:04:30.420 --> 00:04:34.590
This should come with a default message that we're just going to override.

58
00:04:34.950 --> 00:04:38.520
We'll say Name cannot be blank.

59
00:04:39.800 --> 00:04:40.700
Not blank.

60
00:04:40.730 --> 00:04:41.510
Blank.

61
00:04:43.010 --> 00:04:45.230
And we'll do the same thing here.

62
00:04:45.260 --> 00:04:49.280
We'll just say subject cannot be blank.

63
00:04:49.640 --> 00:04:54.170
Now careful to use, not blank instead of not empty.

64
00:04:54.320 --> 00:05:00.530
The not empty annotation doesn't consider the fact that the user may enter a lot of white space, which

65
00:05:00.530 --> 00:05:03.440
isn't considered empty but is considered blank.

66
00:05:05.680 --> 00:05:05.950
All right.

67
00:05:05.950 --> 00:05:10.870
Step two is to pass in bed and put the post request carries the data to your app, and regardless of

68
00:05:10.870 --> 00:05:17.590
the input that's going to populate the object with fields, you can actually verify this by running

69
00:05:17.590 --> 00:05:18.400
your app.

70
00:05:20.280 --> 00:05:22.470
And I'll just go ahead.

71
00:05:24.120 --> 00:05:25.290
In print.

72
00:05:26.040 --> 00:05:28.980
The grade subject.

73
00:05:30.840 --> 00:05:32.520
Or get subject, I should say.

74
00:05:34.120 --> 00:05:35.430
And grade name.

75
00:05:35.440 --> 00:05:41.050
So even if we have those annotations, it's still going to update the fields in this object.

76
00:05:42.170 --> 00:05:43.580
Let's test it out.

77
00:05:47.150 --> 00:05:50.000
We'll leave this blank and we'll say C minus.

78
00:05:52.140 --> 00:05:54.630
And you can't really see anything because the values are blank.

79
00:05:54.630 --> 00:05:58.140
But the field values were printed there, just white space.

80
00:05:58.890 --> 00:06:01.410
So take home message regardless of the input.

81
00:06:01.410 --> 00:06:04.350
Spring populates every field in this object.

82
00:06:05.220 --> 00:06:08.370
So step three is to apply the valid annotation.

83
00:06:08.520 --> 00:06:11.420
The valid annotation checks if the fields are valid.

84
00:06:11.430 --> 00:06:17.130
So as spring is populating the object with field values from the post request valid.

85
00:06:18.720 --> 00:06:21.990
Can actually check if any of them are invalid.

86
00:06:22.080 --> 00:06:24.170
So make sure to add this annotation.

87
00:06:24.180 --> 00:06:27.030
Otherwise the validation process will not happen.

88
00:06:28.810 --> 00:06:31.730
Now step four is to check for the binding result.

89
00:06:31.750 --> 00:06:35.260
Binding result carries the result of the validation.

90
00:06:38.080 --> 00:06:39.370
After valid checks.

91
00:06:39.370 --> 00:06:43.660
If the fields are valid, binding result carries the result of the validation.

92
00:06:44.800 --> 00:06:51.760
You can access the binding result from the handlers list of parameters binding result results.

93
00:06:52.240 --> 00:06:58.240
Now this binding result must always come after the object that is being validated or else spring is

94
00:06:58.240 --> 00:07:01.570
going to fail to validate the object and it's going to throw an exception.

95
00:07:02.380 --> 00:07:05.650
So do not mix the order of the parameters.

96
00:07:05.650 --> 00:07:11.050
The object's fields get validated first and the binding result comes right after.

97
00:07:11.080 --> 00:07:13.690
And so after spring boot validates the object.

98
00:07:13.690 --> 00:07:16.150
We're going to check if the result has errors.

99
00:07:16.150 --> 00:07:17.800
So we'll just print.

100
00:07:19.570 --> 00:07:22.810
Has errors with a question mark.

101
00:07:23.500 --> 00:07:27.220
And we're going to print the boolean value that results from a result.

102
00:07:27.230 --> 00:07:28.930
DOT has errors.

103
00:07:33.120 --> 00:07:33.520
Okay.

104
00:07:33.540 --> 00:07:36.420
Now I'll go back to Slash.

105
00:07:37.000 --> 00:07:37.950
Choose the button.

106
00:07:39.450 --> 00:07:43.950
I'll submit a form where the field values are blank.

107
00:07:43.950 --> 00:07:45.240
Press submit.

108
00:07:46.060 --> 00:07:47.200
We do have errors.

109
00:07:47.230 --> 00:07:47.800
Cool.

110
00:07:48.580 --> 00:07:51.730
Now step five is to return the appropriate view.

111
00:07:51.910 --> 00:07:56.050
A negative binding result must force the user to stay inside the form.

112
00:07:56.170 --> 00:07:59.830
If there are errors, the handler method should return the form view.

113
00:08:03.070 --> 00:08:09.160
So at the moment, regardless of errors, the the handler method is updating the data store and redirecting

114
00:08:09.160 --> 00:08:10.150
them to the grades view.

115
00:08:10.180 --> 00:08:11.530
That's not how it should be.

116
00:08:12.130 --> 00:08:17.530
If there are errors, we don't want to redirect the user anywhere.

117
00:08:17.530 --> 00:08:20.180
We want to keep them inside the form view.

118
00:08:20.200 --> 00:08:26.890
So we'll say if result has errors, then we're just going to return the form.

119
00:08:35.940 --> 00:08:39.809
The binding result has errors and so the user stays inside the form.

120
00:08:41.590 --> 00:08:45.400
Now step six is to actually display the errors to the user.

121
00:08:45.910 --> 00:08:52.480
This binding result that you see here, it keeps a record of the object as well as the fields that were

122
00:08:52.480 --> 00:08:53.350
violated.

123
00:08:53.470 --> 00:09:00.430
This information, upon keeping the user inside the form view, is sent back to the file template and

124
00:09:00.430 --> 00:09:05.740
so we can use the leaf attribute errors to display the constraint violation of a field.

125
00:09:08.110 --> 00:09:12.640
So here, what I can do is add a paragraph tag.

126
00:09:15.470 --> 00:09:23.750
Now this entire form is bound to the model object grade, which means this paragraph element and all

127
00:09:23.750 --> 00:09:30.920
other underlying elements can use a selection expression to select a field in the form backing object.

128
00:09:31.710 --> 00:09:38.850
So this is going to select the name field and timely errors is smart enough to access the error associated

129
00:09:38.850 --> 00:09:41.250
with that field, not the field itself.

130
00:09:41.610 --> 00:09:44.880
So leaf errors will display the error for that field.

131
00:09:44.880 --> 00:09:49.150
And what we're going to do is actually give this a style of read.

132
00:09:49.170 --> 00:09:55.140
So style is equal to color red, just to make this look nice.

133
00:09:55.350 --> 00:10:03.000
And then I will put another paragraph tag right above the subject, and here I will select the subject

134
00:10:03.000 --> 00:10:05.110
of the previously bound object.

135
00:10:05.130 --> 00:10:09.600
Finally, if errors will return the error associated with that field.

136
00:10:10.170 --> 00:10:11.160
All right.

137
00:10:13.250 --> 00:10:14.570
If I go back here.

138
00:10:19.700 --> 00:10:20.600
Wonderful.

139
00:10:21.350 --> 00:10:27.050
The first paragraph element displays the constraint violation for the field name, and the second paragraph

140
00:10:27.050 --> 00:10:30.530
element displays the constraint violation for the field subject.

141
00:10:32.620 --> 00:10:37.330
Now some of you might be wondering why not redirect the user to the home page.

142
00:10:37.480 --> 00:10:39.700
There are two issues with this.

143
00:10:39.730 --> 00:10:44.080
Number one, why would you redirect them to a page that they're already in?

144
00:10:44.110 --> 00:10:50.650
Number two, if you do this, you would actually lose the binding result data because now you're making

145
00:10:50.650 --> 00:10:52.890
an entirely new get request.

146
00:10:52.900 --> 00:10:57.490
So all data that was initiated from the post request would now be gone.

147
00:11:00.740 --> 00:11:01.910
Try it out.

148
00:11:03.860 --> 00:11:09.410
And we see nothing because it made an entirely new get request and we lost all that data from the binding

149
00:11:09.410 --> 00:11:09.970
result.

150
00:11:09.980 --> 00:11:10.400
So.

151
00:11:12.610 --> 00:11:18.940
So the solution is to just return the leaf template and right before returning it, spring boot is going

152
00:11:18.940 --> 00:11:23.110
to send over all of the necessary data, only redirect the user.

153
00:11:23.110 --> 00:11:26.950
If the form submission is successful, that's when it would make sense.

154
00:11:27.310 --> 00:11:32.020
Otherwise, if the result has errors, we don't want to redirect them anywhere.

155
00:11:32.020 --> 00:11:34.330
We just want to keep them inside the form.

156
00:11:35.080 --> 00:11:39.850
To recap, you prevented the user from inputting invalid name and subject data.

157
00:11:39.880 --> 00:11:43.810
This is a lot to recap, so tune in to the next breakpoint session.

