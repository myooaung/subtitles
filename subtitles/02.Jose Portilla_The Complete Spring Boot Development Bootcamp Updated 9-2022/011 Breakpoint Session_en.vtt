WEBVTT
1
00:00:00.120 --> 00:00:02.670
Welcome to another breakpoint session.

2
00:00:02.670 --> 00:00:09.600
And this one, we're going to trace the runtime and see how our custom constraint annotation is validating

3
00:00:09.600 --> 00:00:10.620
the score field.

4
00:00:10.620 --> 00:00:14.340
So the first thing we're going to do is apply some breakpoints.

5
00:00:14.340 --> 00:00:17.670
I will apply them all over our handler method.

6
00:00:18.030 --> 00:00:22.590
I will apply breakpoints inside of as valid.

7
00:00:24.320 --> 00:00:32.659
I'm going to apply breakpoints here as well inside of our constructor, our setters.

8
00:00:36.150 --> 00:00:39.180
And now we're ready to run the application and debug mode.

9
00:00:49.660 --> 00:00:50.380
All right.

10
00:00:50.380 --> 00:00:51.490
Our Tomcat server.

11
00:00:51.490 --> 00:00:53.080
I started on Port 88.

12
00:00:53.200 --> 00:00:54.310
Let's go there.

13
00:00:55.360 --> 00:00:58.600
And for now, I'll disable the breakpoints.

14
00:00:58.600 --> 00:01:00.820
We don't need to trace the runtime right now.

15
00:01:02.710 --> 00:01:03.850
Press continue.

16
00:01:05.800 --> 00:01:07.450
All right, I reform has loaded.

17
00:01:07.450 --> 00:01:09.550
I'll re-enable the breakpoints.

18
00:01:09.970 --> 00:01:13.840
Now I will submit a valid name, a valid subject.

19
00:01:13.840 --> 00:01:17.260
The only focus is to submit an invalid score.

20
00:01:17.380 --> 00:01:20.110
So let's say our plus, we'll submit that.

21
00:01:21.020 --> 00:01:24.710
And as always, submit form receives the request.

22
00:01:24.710 --> 00:01:28.730
First thing it does is it creates a new grade object.

23
00:01:30.100 --> 00:01:30.910
Um.

24
00:01:32.300 --> 00:01:38.690
And as always, spring is smart enough to use your sweaters to populate every field in this object where

25
00:01:38.690 --> 00:01:40.970
the values from the post request.

26
00:01:49.940 --> 00:01:50.420
All right.

27
00:01:50.420 --> 00:01:56.390
And after updating our grade object with values from the post request, the validation process starts.

28
00:01:57.500 --> 00:02:03.560
And here you can see that spring boot is leveraging our is valid function in order to check if the score

29
00:02:03.560 --> 00:02:06.500
value of this grade object is valid.

30
00:02:08.820 --> 00:02:12.270
So this for loop is going to run and it will never return.

31
00:02:12.270 --> 00:02:18.060
True, because our value is not equal to any of the scores inside of the scores list.

32
00:02:19.050 --> 00:02:21.150
It's not a valid letter grade.

33
00:02:22.150 --> 00:02:28.000
So this function is eventually going to return false when is valid returns false.

34
00:02:28.180 --> 00:02:31.150
That means the score field is invalid.

35
00:02:32.810 --> 00:02:37.190
So binding result carries the result of this validation.

36
00:02:37.190 --> 00:02:38.600
There is one error.

37
00:02:41.140 --> 00:02:43.810
The error applies to the field score.

38
00:02:43.840 --> 00:02:50.170
The rejected value was R plus and the default message is that the score must be a letter grade.

39
00:02:51.350 --> 00:02:58.460
So right as we return the form template file, MIF is able to access all of this data and here we're

40
00:02:58.460 --> 00:03:04.220
accessing the error that's associated with the score of the grade object.

41
00:03:04.220 --> 00:03:06.560
And it's going to display this error message.

42
00:03:06.560 --> 00:03:08.660
Score must be a letter grade.

43
00:03:08.660 --> 00:03:10.550
So if I press continue.

44
00:03:11.720 --> 00:03:13.280
It does just that.

