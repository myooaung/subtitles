WEBVTT
1
00:00:00.180 --> 00:00:04.620
So in this breakpoint session, we're going to trace the runtime of two different scenarios.

2
00:00:04.650 --> 00:00:10.020
The first scenario is a bug that we encountered when we were updating with a name, and the final scenario

3
00:00:10.020 --> 00:00:12.690
will trace the runtime of our current solution.

4
00:00:12.690 --> 00:00:15.080
So here I'm starting with scenario number one.

5
00:00:15.090 --> 00:00:19.920
I launched a previous version of the project, so you don't have to do what I'm doing, just follow

6
00:00:19.920 --> 00:00:20.570
along.

7
00:00:20.580 --> 00:00:24.660
And in this project we were using a name to update a student's grade.

8
00:00:24.660 --> 00:00:29.070
So what I'm going to do is start by running the application in debug mode.

9
00:00:30.920 --> 00:00:31.790
Um.

10
00:00:31.820 --> 00:00:37.430
You'll notice I already have all of my breakpoints set up, but I disabled them, so I'll go ahead and

11
00:00:37.430 --> 00:00:38.510
re-enable them.

12
00:00:39.860 --> 00:00:40.700
Oh, right.

13
00:00:47.070 --> 00:00:49.590
And I think my application should have run by now.

14
00:00:49.590 --> 00:00:53.430
So I'll go to local hosts.

15
00:00:53.730 --> 00:00:54.480
You know what?

16
00:00:54.480 --> 00:00:56.340
Let me disable the breakpoints.

17
00:01:01.020 --> 00:01:03.300
And I'm going to add a piece of data to our data store.

18
00:01:03.300 --> 00:01:06.840
We'll say Harry C minus potions.

19
00:01:07.750 --> 00:01:11.870
And now updating a student's grade based on their name is not a good idea.

20
00:01:11.910 --> 00:01:12.760
Here's why.

21
00:01:13.030 --> 00:01:15.880
Let's say I want to give Harry another grade in Quidditch.

22
00:01:15.880 --> 00:01:18.910
So we'll say Harry, we'll give him a C-minus.

23
00:01:19.450 --> 00:01:20.350
Or, you know what?

24
00:01:20.350 --> 00:01:21.070
Let's change it up.

25
00:01:21.070 --> 00:01:25.300
We'll give him a B-minus in Quidditch.

26
00:01:25.330 --> 00:01:29.110
And before I press the submit button, let me just re-enable the breakpoints.

27
00:01:32.020 --> 00:01:40.510
Submit initiates a post request the handler method receives that post request starts by creating a new

28
00:01:40.510 --> 00:01:43.720
grade object using your empty constructor.

29
00:01:48.240 --> 00:01:53.730
And now Spring Boot is smart enough to use your setter is an update every field in the grade object

30
00:01:53.730 --> 00:02:00.360
with payload from the post request so it's going to update the name field with a value from the post

31
00:02:00.360 --> 00:02:01.080
request.

32
00:02:01.170 --> 00:02:07.680
It will update the score field with a value from the post request and it will update the subject field.

33
00:02:09.199 --> 00:02:09.770
Sweet.

34
00:02:11.400 --> 00:02:17.820
And as we step further into the handler method, the name parameter matches one of the objects inside

35
00:02:17.820 --> 00:02:18.900
of the array list.

36
00:02:20.210 --> 00:02:21.560
This is a problem.

37
00:02:22.950 --> 00:02:27.690
Because this function is effectively going to return an index.

38
00:02:28.050 --> 00:02:35.730
And so even though our intent was to add a new object to that data store, it updates an existing one.

39
00:02:43.810 --> 00:02:47.410
The handler method then redirects the user to the grades template.

40
00:02:48.610 --> 00:02:50.950
It's going to send over the model data.

41
00:02:52.990 --> 00:02:58.840
And finally, it's going to generate a table with rows that reflect, in this case, the newly updated

42
00:02:58.840 --> 00:02:59.800
array list.

43
00:02:59.950 --> 00:03:02.440
This is not good.

44
00:03:05.490 --> 00:03:10.710
As our current design implies that each student can only have one grade.

45
00:03:11.010 --> 00:03:12.300
So what did we do?

46
00:03:12.330 --> 00:03:15.060
Well, let's travel a few edits into the future.

47
00:03:17.820 --> 00:03:24.720
What we did in this project is we added a new ID field and unlike the name, the ID is going to be unique

48
00:03:24.720 --> 00:03:28.140
for every grade object, so it's perfect for updates.

49
00:03:28.620 --> 00:03:32.730
So I'm going to add the exact same breakpoints as before.

50
00:03:41.440 --> 00:03:44.530
And I'll add a breakpoint here.

51
00:03:44.620 --> 00:03:45.820
One here.

52
00:03:48.020 --> 00:03:49.790
One here, one here as well.

53
00:03:51.700 --> 00:03:54.670
All right, now I'll go ahead and run the application and debug mode.

54
00:04:00.920 --> 00:04:04.080
And let's say I want to give Harry another grade in Quidditch.

55
00:04:04.100 --> 00:04:07.160
If I go to local host 8080.

56
00:04:08.170 --> 00:04:10.940
The Handler method intercepts the get request.

57
00:04:10.960 --> 00:04:14.040
There is no ID parameter that was being passed back.

58
00:04:14.050 --> 00:04:14.830
It's null.

59
00:04:17.170 --> 00:04:22.000
The Handler method ends up creating a new grade object, and right away the constructor is going to

60
00:04:22.000 --> 00:04:24.790
generate a unique ID for the ID field.

61
00:04:34.470 --> 00:04:37.800
Get form adds this grade object to the model.

62
00:04:38.840 --> 00:04:43.190
The key grade maps to an empty grade object that does have an ID.

63
00:04:44.030 --> 00:04:47.630
And as the handler method returns the form templates.

64
00:04:49.180 --> 00:04:51.310
It sends over the model data.

65
00:04:51.340 --> 00:04:55.390
The form element selects the grade object.

66
00:04:55.390 --> 00:04:59.890
Every field in the object is bound to a form input.

67
00:05:01.370 --> 00:05:07.400
Three of the fields in the model object are empty, so it follows that three of the form inputs are

68
00:05:07.400 --> 00:05:08.870
going to be empty as well.

69
00:05:09.050 --> 00:05:16.700
But the ID field does contain data and the last input which happens to be hidden is bound to it.

70
00:05:16.910 --> 00:05:20.660
And so now when you submit the form, we'll give Harry another grade and Quidditch.

71
00:05:20.660 --> 00:05:22.150
We'll say B-minus.

72
00:05:22.610 --> 00:05:26.360
In Quidditch, it's going to initiate a post request.

73
00:05:26.360 --> 00:05:30.290
And this time the post request carries four values back to the back end.

74
00:05:30.470 --> 00:05:34.220
It's going to carry back a name subject score as well as an ID.

75
00:05:34.490 --> 00:05:41.870
Now, before we can see that the Handler method submit form receives the post request and as soon as

76
00:05:41.870 --> 00:05:47.870
it does, you can see that it creates an empty grade object using your empty constructor.

77
00:05:48.380 --> 00:05:54.050
Every field in the object starts off as empty, but the empty constructor generates another ID for this

78
00:05:54.050 --> 00:05:54.770
object.

79
00:05:56.580 --> 00:06:03.180
Bring boot uses your setters to update every field in the grade object with payload from the post request

80
00:06:03.180 --> 00:06:08.130
and it's going to override that ID value with a value from the post request.

81
00:06:08.870 --> 00:06:11.390
It updates the name of the value from the Post request.

82
00:06:11.540 --> 00:06:16.370
It updates the score where they add value from the Post request and it updates the subject.

83
00:06:17.580 --> 00:06:18.450
Beautiful.

84
00:06:19.160 --> 00:06:22.130
And as we step further into the handler method.

85
00:06:23.040 --> 00:06:24.000
The ID field.

86
00:06:24.000 --> 00:06:26.070
It doesn't match anything in the data store.

87
00:06:27.230 --> 00:06:30.320
So it adds this object to our array list.

88
00:06:31.580 --> 00:06:35.600
Then it redirects the client to make another get request on slash grades.

89
00:06:35.930 --> 00:06:39.710
This is going to add the updated array list to our model.

90
00:06:41.090 --> 00:06:41.660
Returns.

91
00:06:41.660 --> 00:06:48.050
The grades, templates and the grade template is going to generate rows that reflect our newly updated

92
00:06:48.050 --> 00:06:49.010
array list.

93
00:06:50.770 --> 00:06:52.780
And just like that, the bug is gone.

94
00:06:53.940 --> 00:06:58.440
Before we actually wrap things up, one last thing I want to breakpoint in this section is updating

95
00:06:58.440 --> 00:06:59.490
a student grade.

96
00:06:59.850 --> 00:07:01.290
So we'll press update.

97
00:07:01.290 --> 00:07:07.920
And what the update button does is it makes a get request to local host 8080 and in that request it

98
00:07:07.920 --> 00:07:09.990
sends back an ID parameter.

99
00:07:10.970 --> 00:07:12.710
e0f6.

100
00:07:14.940 --> 00:07:18.960
This is the ID of Harry's great object for potions.

101
00:07:20.950 --> 00:07:28.930
The handler method get form receives this ID and it checks if that ID matches anything inside of our

102
00:07:28.930 --> 00:07:29.830
data store.

103
00:07:30.100 --> 00:07:31.210
It definitely should.

104
00:07:31.210 --> 00:07:32.710
So if I press continue.

105
00:07:33.980 --> 00:07:41.690
It adds Harry's great object to our model the grade key maps to our grade object.

106
00:07:42.020 --> 00:07:48.830
So upon returning the form view, it's going to send over this model data and the form element is going

107
00:07:48.830 --> 00:07:57.050
to be bound to this grade object such that each input is going to bind to a field in that form backing

108
00:07:57.050 --> 00:07:57.920
object.

109
00:07:58.670 --> 00:08:04.250
All of the fields are populated, so it follows that all of the form inputs are going to be populated

110
00:08:04.250 --> 00:08:04.850
as well.

111
00:08:05.150 --> 00:08:05.870
Beautiful.

112
00:08:06.770 --> 00:08:16.670
And now if I decide to update Harry's grade to an A-plus and press submit, remember this I'd e0f6 if

113
00:08:16.670 --> 00:08:17.840
I press submit.

114
00:08:19.280 --> 00:08:25.790
What that does is it initiates a post request and the handler method submit form receives that post

115
00:08:25.790 --> 00:08:26.330
request.

116
00:08:26.330 --> 00:08:32.080
The first thing that it does is it creates a new grade object using your empty constructor.

117
00:08:32.090 --> 00:08:37.190
Now, the problem is, upon creating this new grade object, it's going to assign it a new ID.

118
00:08:37.760 --> 00:08:43.730
But not to worry because Spring Boot is smart enough to update every single field in this object with

119
00:08:43.730 --> 00:08:45.320
payload from the post request.

120
00:08:45.320 --> 00:08:54.740
And so what it's going to do is override this ID value with the one provided by the post request e0f6.

121
00:08:54.950 --> 00:08:57.350
So now the IDs are consistent again.

122
00:08:57.350 --> 00:09:00.200
Now we're updating the name with a value from the post request.

123
00:09:00.200 --> 00:09:02.930
We're updating the score and we're updating the subject.

124
00:09:03.230 --> 00:09:04.190
All right.

125
00:09:07.550 --> 00:09:11.840
And now we're checking if the idea of this grade matches anything in the data store.

126
00:09:11.930 --> 00:09:13.430
It definitely should.

127
00:09:13.460 --> 00:09:19.760
The index it returns is zero, which means it did find an object to update and it's going to update

128
00:09:19.760 --> 00:09:21.620
the object at index zero.

129
00:09:22.340 --> 00:09:27.800
Upon doing so, it will redirect the client to make a get request on slash grades.

130
00:09:28.280 --> 00:09:35.660
The grades handler method is going to add this new array list as a model attribute.

131
00:09:36.950 --> 00:09:42.710
Giving Harry an A-plus in potions and upon returning the grades templates.

132
00:09:43.460 --> 00:09:48.440
The new rose that it generates will reflect the newly updated array list.

133
00:09:50.920 --> 00:09:51.640
Just like that.

134
00:09:51.640 --> 00:09:53.350
We updated Harry's grade.

