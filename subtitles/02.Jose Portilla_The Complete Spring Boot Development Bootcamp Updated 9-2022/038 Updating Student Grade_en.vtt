WEBVTT
1
00:00:00.730 --> 00:00:04.720
Well, right now we get to add the final feature, which is to update the student's grade.

2
00:00:06.560 --> 00:00:07.980
Let's go through the process.

3
00:00:08.000 --> 00:00:11.000
First, we're going to add an update button inside of each table row.

4
00:00:11.030 --> 00:00:11.510
That's easy.

5
00:00:11.510 --> 00:00:13.730
We'll just look inside of the HTML cheat sheet.

6
00:00:17.140 --> 00:00:22.300
And then step two, the update button when pressed, will make a get request to access the form.

7
00:00:23.200 --> 00:00:28.480
This is new because normally we're making get requests directly from the browser, but this time one

8
00:00:28.480 --> 00:00:31.840
of your HTML elements is going to make a get request.

9
00:00:37.050 --> 00:00:41.850
And in step three, the update button is actually going to pass a parameter into the get request before

10
00:00:41.850 --> 00:00:42.720
it makes it.

11
00:00:42.960 --> 00:00:46.800
The parameter will be the student name whose grade we want to update.

12
00:00:48.710 --> 00:00:53.360
And in step four, the handler method will use the parameter to fetch the students.

13
00:00:53.570 --> 00:00:59.270
Upon receiving the request, the handler method will receive the parameter from inside the brackets

14
00:00:59.270 --> 00:01:03.560
and it will use the parameter to look inside the data store and fetch the students.

15
00:01:03.920 --> 00:01:06.320
And from there, we can update that student's grade.

16
00:01:08.480 --> 00:01:13.850
So let's start with step one, which is to add an update button inside of each row.

17
00:01:14.720 --> 00:01:22.640
If you look back at the HTML cheat sheet, you'll notice that an anchor element with a roll of button

18
00:01:22.640 --> 00:01:25.580
is capable of making web requests.

19
00:01:25.790 --> 00:01:32.270
So inside of each row that gets generated, we're going to add another data cell.

20
00:01:35.930 --> 00:01:36.560
TD.

21
00:01:39.950 --> 00:01:42.770
And inside the data cell, we'll add our button.

22
00:01:42.770 --> 00:01:44.840
So we'll say anchor tag.

23
00:01:46.770 --> 00:01:50.160
And then it will have a roll of button.

24
00:01:51.110 --> 00:01:54.380
And this button will display the text updates.

25
00:01:59.290 --> 00:02:04.270
Now each row that gets generated is going to have an extra data cell with a button inside.

26
00:02:04.450 --> 00:02:09.580
If I were to go back, I guess I'll have to just submit some data first.

27
00:02:14.040 --> 00:02:16.470
Nice, but this looks kind of ugly.

28
00:02:17.490 --> 00:02:22.980
If you look back at the CCIS that was provided by our wonderful front end developer.

29
00:02:24.060 --> 00:02:31.290
Your button can reference the update section of your CSIS by simply saying.

30
00:02:32.160 --> 00:02:35.070
Class equals updates.

31
00:02:37.190 --> 00:02:41.810
And if you look very briefly, what this is going to do is center your button.

32
00:02:41.900 --> 00:02:43.590
It's going to fix up the font size.

33
00:02:43.610 --> 00:02:45.290
Give it a nice background color.

34
00:02:45.290 --> 00:02:50.110
When you hover over it, it's going to give it a color of orange cursor turns into a pointer.

35
00:02:50.120 --> 00:02:51.930
Nothing crazy.

36
00:02:51.950 --> 00:02:56.780
Let's just refresh and nice.

37
00:02:56.780 --> 00:02:59.390
Our friend and developer did a wonderful job.

38
00:02:59.420 --> 00:03:03.260
Now you might be wondering, Hey, Ron, you never taught us CSS again.

39
00:03:03.260 --> 00:03:04.490
We're back end developers.

40
00:03:04.490 --> 00:03:08.210
We don't care about HTML or CSS.

41
00:03:08.240 --> 00:03:12.680
The HTML and CSS is already given to you by a frontend developer.

42
00:03:12.710 --> 00:03:18.050
Your job is to simply manage how it's presented using Java and leave us.

43
00:03:18.050 --> 00:03:21.110
Even adding the button is not even something that we should have done.

44
00:03:21.140 --> 00:03:24.000
It's the front end developer's job to create the view.

45
00:03:24.020 --> 00:03:25.400
But not to worry.

46
00:03:25.400 --> 00:03:27.080
We'll take it out of their paycheck.

47
00:03:28.610 --> 00:03:32.510
Now in step two, the update button should make a get request.

48
00:03:34.420 --> 00:03:43.150
If you look back at the HTML cheat sheet and anchor tag can use the leaf attribute a ref to make a gut

49
00:03:43.150 --> 00:03:45.430
request, and rightfully so.

50
00:03:45.430 --> 00:03:47.640
It uses a link expression.

51
00:03:47.650 --> 00:03:52.930
You'll remember that a link expression can specify a URL endpoint or a path to a resource.

52
00:03:52.960 --> 00:03:57.130
Given the context, it's going to specify a URL endpoint.

53
00:04:01.800 --> 00:04:09.630
So to my button I will add the final leaf attribute h ref and we're going to make a request to the home

54
00:04:09.630 --> 00:04:10.380
page.

55
00:04:11.770 --> 00:04:17.649
This URL is context relative because it already considers the host and port so we don't have to put

56
00:04:17.649 --> 00:04:17.980
it.

57
00:04:19.940 --> 00:04:23.450
Now step three is to pass a parameter into the get request.

58
00:04:23.480 --> 00:04:27.020
The parameter will be the student name whose grade we want to update.

59
00:04:29.630 --> 00:04:34.130
You can pass data into a get request by starting off with a question mark.

60
00:04:34.160 --> 00:04:37.910
The question mark means you want to pass parameters into a request.

61
00:04:38.060 --> 00:04:41.660
The parameter and its value are separated by an equal sign.

62
00:04:42.980 --> 00:04:45.950
And the plus symbol replaces white space.

63
00:04:48.700 --> 00:04:52.970
So going back here, I'm going to make a request to local host 8080.

64
00:04:52.990 --> 00:04:55.630
Then I'll add a name parameter.

65
00:04:56.920 --> 00:05:00.010
With a value that equals Harry.

66
00:05:02.790 --> 00:05:03.870
Plus Potter.

67
00:05:04.170 --> 00:05:06.030
So this is just white space.

68
00:05:07.650 --> 00:05:09.280
And nothing new happens.

69
00:05:09.300 --> 00:05:16.740
The user meet is still requesting resources on the empty path and the get mapping handler method is

70
00:05:16.740 --> 00:05:18.690
going to return that resource.

71
00:05:18.990 --> 00:05:24.540
However, behind the scenes, the get request was actually carrying a name parameter that equals Harry

72
00:05:24.540 --> 00:05:25.140
Potter.

73
00:05:25.560 --> 00:05:29.880
The handler method can actually receive that name string as a parameter.

74
00:05:34.380 --> 00:05:37.680
So for now, all I'm going to do is actually print it.

75
00:05:40.750 --> 00:05:43.150
Okay if I make that same request again.

76
00:05:45.690 --> 00:05:46.470
Beautiful.

77
00:05:47.070 --> 00:05:51.740
Now we need to be able to make that same gut request from the update button.

78
00:05:51.750 --> 00:05:57.990
So if you were to look back at the HTML cheat sheet, the way to specify a parameter is in a file.

79
00:05:57.990 --> 00:06:02.880
If expression is a bit different, you have to put your parameter and value inside of brackets.

80
00:06:02.880 --> 00:06:05.220
So we'll go ahead and do just that.

81
00:06:05.220 --> 00:06:07.380
Copy the syntax over to here.

82
00:06:07.380 --> 00:06:11.610
The parameter is going to be name and the value will say is Harry Potter.

83
00:06:11.640 --> 00:06:17.250
Now remember in a timeless expression, you should enclose your string values inside of single quotes.

84
00:06:18.490 --> 00:06:19.870
So I'll go back here.

85
00:06:20.920 --> 00:06:22.660
I'll submit a piece of data.

86
00:06:25.120 --> 00:06:27.910
And then if I press the update button for one of them.

87
00:06:32.240 --> 00:06:34.930
It passes a parameter into the get request.

88
00:06:34.940 --> 00:06:37.010
The parameter is Harry Potter.

89
00:06:37.790 --> 00:06:41.600
The handler method receives the parameter that the get request is carrying and prints.

90
00:06:41.600 --> 00:06:43.090
It's beautiful.

91
00:06:43.100 --> 00:06:46.670
Now we don't actually want to pass back a static value.

92
00:06:46.700 --> 00:06:51.560
What we want to do is set the parameter equal to a variable expression.

93
00:06:53.210 --> 00:07:00.140
Because remember that a variable expression will return a model attribute or a value that derives from

94
00:07:00.140 --> 00:07:00.560
it.

95
00:07:00.590 --> 00:07:05.480
In this case, we're going to pass back the name of the student that we're pressing update on.

96
00:07:07.910 --> 00:07:08.470
Okay.

97
00:07:08.480 --> 00:07:13.400
Now let's go back to grades.

98
00:07:14.840 --> 00:07:16.610
Try using this update button.

99
00:07:18.590 --> 00:07:22.130
It makes a get request while passing in the name parameter.

100
00:07:23.060 --> 00:07:24.980
The handler method intercepts.

101
00:07:24.980 --> 00:07:28.160
The request receives the name, parameter and princess.

102
00:07:29.800 --> 00:07:36.520
Now, although this works perfectly, it's good practice to actually label this as being a request parameter.

103
00:07:36.730 --> 00:07:38.680
So we'll say request.

104
00:07:41.350 --> 00:07:42.160
Param.

105
00:07:44.820 --> 00:07:49.200
Meaning this parameter can only come from a get request and nothing else.

106
00:07:49.560 --> 00:07:53.100
But now, if I were to actually just go to local host 8080.

107
00:07:54.050 --> 00:08:02.510
It throws an error because now we made a get request to hear, but it seems to be expecting a name parameter

108
00:08:02.510 --> 00:08:06.680
and because it did not receive that request parameter, it threw an error.

109
00:08:06.950 --> 00:08:10.100
So we have to say required.

110
00:08:11.060 --> 00:08:12.350
Equals false.

111
00:08:13.580 --> 00:08:19.160
Basically we're saying this parameter is optional because this parameter is only required when we're

112
00:08:19.160 --> 00:08:20.360
making an update.

113
00:08:20.600 --> 00:08:25.280
Now, after pressing update, the form contains the name of student we intend on updating.

114
00:08:25.280 --> 00:08:30.530
We need to use this parameter to find the object in the ArrayList that matches it.

115
00:08:30.530 --> 00:08:36.470
So inside a the grade controller create a function called find index.

116
00:08:36.500 --> 00:08:41.000
Actually I will call it get grade index.

117
00:08:42.929 --> 00:08:45.240
They receives a string name.

118
00:08:46.670 --> 00:08:52.130
And what I'm going to do is loop through every single object inside of the student grades, array,

119
00:08:52.130 --> 00:08:55.100
list, student grades, size.

120
00:08:55.100 --> 00:09:02.360
And for every object that we loop through, we're going to check if that object at that index.

121
00:09:03.130 --> 00:09:04.390
We'll get its name.

122
00:09:04.810 --> 00:09:08.260
Does it match the name parameter that's being passed in?

123
00:09:09.240 --> 00:09:13.320
If it does match, it will return the index of that object.

124
00:09:13.980 --> 00:09:18.990
Otherwise, we will just return, I don't know, -1000.

125
00:09:19.320 --> 00:09:22.560
This value will just represent index not found.

126
00:09:22.590 --> 00:09:25.600
Now, you shouldn't actually have loose integers like this in your code.

127
00:09:25.620 --> 00:09:28.800
We will fix this in the last lesson of the section.

128
00:09:28.800 --> 00:09:37.380
But anyways, here, what we want to do is find the object in the ArrayList whose name field matches

129
00:09:37.380 --> 00:09:38.480
the name parameter.

130
00:09:38.490 --> 00:09:43.590
So what I'm going to do is create a new grade variable.

131
00:09:45.580 --> 00:09:50.560
And then we will say if the index if get grade index.

132
00:09:52.620 --> 00:09:54.720
Is equal to -1000.

133
00:09:57.090 --> 00:10:02.580
Then we're going to set the grade variable equal to an empty grade object.

134
00:10:03.330 --> 00:10:04.440
Otherwise.

135
00:10:06.900 --> 00:10:12.660
Otherwise we're going to grab the object at that index and set the grade variable equal to that.

136
00:10:19.390 --> 00:10:20.990
All right, let's test this out.

137
00:10:21.010 --> 00:10:25.270
I'm going to need to fill the data store with some data.

138
00:10:27.360 --> 00:10:34.590
Now, if I were to actually make a get request and pass in a name that doesn't match anything in our

139
00:10:34.590 --> 00:10:35.370
data store.

140
00:10:37.580 --> 00:10:39.020
The form is going to be empty.

141
00:10:41.960 --> 00:10:47.930
The handler method received our name parameter concluded that it couldn't find anything inside the data

142
00:10:47.930 --> 00:10:54.740
store set grade equal to an empty grade object and passed the empty grade object as a model attribute.

143
00:10:54.740 --> 00:10:59.760
And that empty grade object is what was bound to our form.

144
00:11:00.020 --> 00:11:04.190
But if I were to go back and press the update button.

145
00:11:04.490 --> 00:11:06.740
So we'll go back to slash grades.

146
00:11:11.730 --> 00:11:18.510
This time, the get request carries a name that matches one of the objects in the data store.

147
00:11:18.570 --> 00:11:21.420
That object is being passed into the model.

148
00:11:22.690 --> 00:11:26.950
And the form is now bound to this fully populated grade object.

149
00:11:26.950 --> 00:11:28.990
And you can see this right over here.

150
00:11:29.440 --> 00:11:33.340
Each input is bound to a field in the model object.

151
00:11:35.790 --> 00:11:41.370
This is great and all, but I prefer conditional assignments syntax over if statements this is kind

152
00:11:41.370 --> 00:11:42.030
of dirty.

153
00:11:42.030 --> 00:11:51.030
So what I'm going to say is model dot add attribute grade and here I will check if the index is equal

154
00:11:51.030 --> 00:11:54.480
to -1000, then we'll say new grade.

155
00:11:56.500 --> 00:12:01.150
Otherwise will pass in the object at that index in our data store.

156
00:12:02.650 --> 00:12:05.170
Seem to have a syntax error.

157
00:12:05.880 --> 00:12:08.770
Oh, there should be a colon, not a comma.

158
00:12:09.970 --> 00:12:12.280
Index is not a variable.

159
00:12:15.760 --> 00:12:16.530
All right.

160
00:12:16.540 --> 00:12:18.340
I'm really off my game today.

161
00:12:21.460 --> 00:12:22.360
Sweets.

162
00:12:22.360 --> 00:12:24.610
So now we can go ahead and delete all of that.

163
00:12:26.270 --> 00:12:28.580
This is much better and cleaner than if else.

164
00:12:32.560 --> 00:12:33.640
All right, let's start fresh.

165
00:12:33.640 --> 00:12:35.950
We'll submit another grade for Harry.

166
00:12:37.000 --> 00:12:39.850
We'll say C minus potions.

167
00:12:40.240 --> 00:12:41.090
All right.

168
00:12:41.110 --> 00:12:44.500
Now, what happens if I try to update this grade?

169
00:12:48.420 --> 00:12:49.860
We'll update it to an EF.

170
00:12:52.840 --> 00:12:55.300
And instead of updating the grade and added a new one.

171
00:12:55.660 --> 00:13:01.690
That's because the handler method upon form submission is always just going to add a new grade to our

172
00:13:01.690 --> 00:13:02.440
data store.

173
00:13:02.470 --> 00:13:06.220
Then it redirects the user to make a request on slash grades.

174
00:13:06.550 --> 00:13:10.630
That updated data store is added to the model and it returns the grades view.

175
00:13:11.200 --> 00:13:15.550
We only want to add a new grade if it doesn't already exist.

176
00:13:15.550 --> 00:13:19.240
So what we can say is if.

177
00:13:20.150 --> 00:13:23.250
Get grade and ducks grade.

178
00:13:23.270 --> 00:13:28.160
Dot get name if it equals to -1000.

179
00:13:30.160 --> 00:13:31.480
Then we'll say.

180
00:13:32.610 --> 00:13:34.440
Student grades add.

181
00:13:40.440 --> 00:13:43.050
Otherwise, we want to update the array list.

182
00:13:43.050 --> 00:13:45.000
Student grades set.

183
00:13:45.970 --> 00:13:48.850
We will update the grade at that index.

184
00:13:50.750 --> 00:13:51.590
And you know what?

185
00:13:52.130 --> 00:13:59.180
Instead of calling the function twice, let me just say end index is equal to get grade index.

186
00:14:07.760 --> 00:14:08.630
All right.

187
00:14:12.480 --> 00:14:13.980
If we try this out now.

188
00:14:15.010 --> 00:14:16.060
Start fresh.

189
00:14:16.270 --> 00:14:19.030
We'll say Harry C minus potions.

190
00:14:20.480 --> 00:14:22.520
We will try to update Terry's grade.

191
00:14:23.530 --> 00:14:24.580
It works perfectly.

192
00:14:25.990 --> 00:14:28.630
If you go back to the home page without pressing updates.

193
00:14:29.710 --> 00:14:31.090
At a new student.

194
00:14:35.700 --> 00:14:36.630
And we're done.

195
00:14:37.520 --> 00:14:40.250
The next video is going to break point to the entire flow.

196
00:14:40.340 --> 00:14:43.330
So to recap in this lesson, you updated a student's grade.

197
00:14:43.340 --> 00:14:47.450
I suggest tuning into the next breakpoints lesson for a full recap.

