WEBVTT
1
00:00:00.330 --> 00:00:03.450
You need to divide your code base into three layers.

2
00:00:06.320 --> 00:00:08.270
Let's face it, our code looks bad.

3
00:00:08.270 --> 00:00:09.770
Like really bad.

4
00:00:09.800 --> 00:00:12.650
It's not even that long, and it's already very messy.

5
00:00:13.130 --> 00:00:19.070
The code is messy because we're mixing the presentation logic, business logic and data access logic

6
00:00:19.070 --> 00:00:20.330
in a single layer.

7
00:00:24.150 --> 00:00:27.060
You need to divide your code base into three layers.

8
00:00:28.990 --> 00:00:32.619
And that's why in this lesson you will learn about the three layer architecture.

9
00:00:35.070 --> 00:00:41.280
A three layer design implies refactoring your code base into three layers, one layer for presentation.

10
00:00:42.550 --> 00:00:44.080
One for business logic.

11
00:00:45.230 --> 00:00:47.150
And another for data access.

12
00:00:51.170 --> 00:00:53.630
Here is an example of a three layer design.

13
00:00:53.930 --> 00:00:56.480
A data store contains two grade objects.

14
00:00:58.260 --> 00:01:04.440
The user wishes to view all grades so they make a get to request on the path slash grades.

15
00:01:07.800 --> 00:01:11.940
A handler method that maps to the path slash grades receives the request.

16
00:01:12.090 --> 00:01:15.420
The handler method needs to retrieve every grade from the data store.

17
00:01:15.450 --> 00:01:19.230
Retrieving an object from the data store is a CRUD operation.

18
00:01:22.750 --> 00:01:28.930
Crud is any operation that creates, retrieves updates or deletes data from a data store.

19
00:01:32.570 --> 00:01:36.710
All CRUD operations should be inside the repository class.

20
00:01:39.160 --> 00:01:41.950
The repository class is the data access layer.

21
00:01:49.110 --> 00:01:53.130
The Controller class and repository class do not communicate directly.

22
00:01:56.370 --> 00:01:59.130
The service class is the middleman between the two.

23
00:01:59.460 --> 00:02:05.340
The service class is also the business logic layer because it contains every business related operation.

24
00:02:09.020 --> 00:02:12.680
In this design, the controller calls upon the service class.

25
00:02:15.490 --> 00:02:18.730
And the service class calls upon the repository class.

26
00:02:21.150 --> 00:02:25.470
The repository class fetches the data and sends it all the way back to the controller.

27
00:02:29.260 --> 00:02:34.120
After retrieving the data, you need to add that piece of data to the model because the model is what

28
00:02:34.120 --> 00:02:36.250
populates your thin leaf templates.

29
00:02:39.990 --> 00:02:43.290
Finally updates the view based on the data inside the model.

30
00:02:45.920 --> 00:02:47.960
The Handler method responded the view.

31
00:02:55.870 --> 00:03:00.520
And the controller's only concern is managing the model and presenting the view.

32
00:03:00.820 --> 00:03:03.730
Together they make up the presentation layer.

33
00:03:07.190 --> 00:03:12.770
Currently your code mixes presentation business and data logic in a single layer.

34
00:03:12.890 --> 00:03:19.220
The controller should only be concerned with presentation, but right now it's doing everything we need

35
00:03:19.220 --> 00:03:20.900
to refactor our code.

36
00:03:24.430 --> 00:03:27.610
So to recap, you learned about the three layer architecture.

37
00:03:30.560 --> 00:03:35.450
The controllers only concern is managing the model and presenting the view together.

38
00:03:35.450 --> 00:03:38.120
All three of them make up the presentation layer.

39
00:03:41.080 --> 00:03:46.840
The service class makes up the business logic layer because it contains every business related operation.

40
00:03:47.320 --> 00:03:51.490
The service class is also the middleman between the controller and the repository.

41
00:03:56.470 --> 00:04:01.090
Every CRUD operation on the data store should be inside the repository class.

42
00:04:01.390 --> 00:04:07.510
The repository class makes up the data layer, and so we're going to refactor our code base into these

43
00:04:07.510 --> 00:04:10.540
three layers to ensure clean and scalable code.

