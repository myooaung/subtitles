WEBVTT
1
00:00:00.360 --> 00:00:03.719
Dependency injection is very important for unit testing.

2
00:00:06.470 --> 00:00:10.820
You cannot unit test service when it's tightly coupled to its dependencies.

3
00:00:13.310 --> 00:00:17.900
Service becomes unit testable when it's loosely coupled to its dependencies.

4
00:00:20.510 --> 00:00:23.870
On one hand, the service is creating its dependency.

5
00:00:24.530 --> 00:00:29.600
And on the other hand, the dependency already exists inside the spring container as a bean.

6
00:00:29.630 --> 00:00:31.700
The service is simply using it.

7
00:00:34.380 --> 00:00:34.920
Anyways.

8
00:00:34.920 --> 00:00:36.480
What should we unit test?

9
00:00:37.020 --> 00:00:41.160
We should unit test the service because it contains all of your business logic.

10
00:00:41.190 --> 00:00:44.520
Business logic is most prone to bugs.

11
00:00:45.970 --> 00:00:50.770
In other words, we're going to need a service test class that's entirely devoted to testing the service

12
00:00:50.770 --> 00:00:51.490
class.

13
00:00:52.030 --> 00:00:57.850
The test class contains a unit test for every meaningful piece of logic inside of grade service.

14
00:00:59.200 --> 00:01:05.500
If every unit test passes, then you can rest assured that the grade service doesn't have any bugs.

15
00:01:05.680 --> 00:01:11.080
If one of your tests fails, then there's a bug inside of grade service, so you'll need to fix your

16
00:01:11.080 --> 00:01:13.180
code until the unit test passes.

17
00:01:17.780 --> 00:01:20.720
Once it passes, you'll know that you fixed your bug.

18
00:01:23.650 --> 00:01:24.670
Now here's the catch.

19
00:01:24.670 --> 00:01:28.960
You cannot test the service class when it's tightly coupled to its dependencies.

20
00:01:30.860 --> 00:01:36.680
We need a service test class that's entirely devoted to testing only the service class and nothing else.

21
00:01:39.660 --> 00:01:44.850
In a tightly coupled scenario, great service creates its own repository dependency.

22
00:01:45.700 --> 00:01:49.120
The goal is to test great service in complete isolation.

23
00:01:50.790 --> 00:01:53.360
But the dependency is a disturbance.

24
00:01:53.370 --> 00:01:58.140
The dependency returns data based on logic defined in the repository class.

25
00:01:58.170 --> 00:02:04.230
It interferes with our unit test because we only want to test the logic inside of great service.

26
00:02:05.120 --> 00:02:09.650
Tight coupling means we can never test a great service in complete isolation.

27
00:02:11.920 --> 00:02:14.290
That's why a loose coupling is important.

28
00:02:14.290 --> 00:02:17.800
In loose coupling, the class does not create a dependency.

29
00:02:17.800 --> 00:02:21.580
Rather, the dependency already exists inside of the spring container.

30
00:02:21.610 --> 00:02:23.170
We're simply using it.

31
00:02:23.170 --> 00:02:25.900
Spring injects a bean into the variable.

32
00:02:28.870 --> 00:02:32.100
And so you can achieve dependency injection using auto fired.

33
00:02:33.440 --> 00:02:39.350
But the thing is, when your unit testing, you're not actually starting up the spring boot up, you're

34
00:02:39.350 --> 00:02:42.630
only running the test class and nothing else.

35
00:02:42.650 --> 00:02:45.290
There is no mechanism for component scanning.

36
00:02:45.290 --> 00:02:49.790
There is no spring container, which means there are no beans to inject.

37
00:02:49.820 --> 00:02:53.150
So when you're testing, this variable is actually null.

38
00:02:54.920 --> 00:03:01.200
But because the service class is loosely coupled, we can inject a mock into the variable instead.

39
00:03:01.220 --> 00:03:06.510
The mock can mimic the behavior of a dependency, but it doesn't have any logic of its own.

40
00:03:06.530 --> 00:03:11.870
From the testing class, we can completely control what the mock can or can't return.

41
00:03:12.410 --> 00:03:18.590
So ultimately, using a mock allows you to test grade service in complete isolation.

42
00:03:21.480 --> 00:03:25.500
So to recap, you can only unit test a class when it's loosely coupled.

43
00:03:27.060 --> 00:03:31.160
If service is tightly coupled to its dependency, then you're stuck with it.

44
00:03:31.170 --> 00:03:34.020
You can never test the grade service in isolation.

45
00:03:34.020 --> 00:03:39.030
The dependency logic will always interfere with the great service logic that we want to test.

46
00:03:39.480 --> 00:03:43.860
If the service is loosely coupled, then we can inject a mock instead.

47
00:03:43.890 --> 00:03:49.830
The mock doesn't have any logic of its own, so we can test grade service in complete isolation.

