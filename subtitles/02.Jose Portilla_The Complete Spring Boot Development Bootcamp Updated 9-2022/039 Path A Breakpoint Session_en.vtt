WEBVTT
1
00:00:00.390 --> 00:00:01.950
Welcome to this breakpoint session.

2
00:00:01.950 --> 00:00:05.760
I'm going to start off by running the application and debug mode.

3
00:00:07.070 --> 00:00:14.690
And before I actually end up adding any breakpoints, what I'm going to do is populate the data store

4
00:00:14.690 --> 00:00:15.830
with some data.

5
00:00:16.160 --> 00:00:19.130
So I'll wait for the request to get processed.

6
00:00:19.130 --> 00:00:25.730
We'll say Harry C minus potions, we'll add another grade, go back to local host 8080.

7
00:00:25.820 --> 00:00:27.650
We'll add another gate for her mini.

8
00:00:28.620 --> 00:00:29.790
Press submit.

9
00:00:30.030 --> 00:00:34.080
And I think now we're ready to apply some breakpoints.

10
00:00:34.380 --> 00:00:39.150
I'm going to add breakpoints pretty much in every single handler method.

11
00:00:41.630 --> 00:00:48.650
We'll add some and get grades some and get great index just for the purpose of tracing the runtime.

12
00:00:48.680 --> 00:00:54.500
I already added a throwaway print line function here just for the sake of putting a breakpoint.

13
00:00:54.710 --> 00:00:56.330
Set name, set.

14
00:00:56.330 --> 00:00:58.160
Subject, set, score.

15
00:00:58.370 --> 00:00:58.820
All right.

16
00:00:58.820 --> 00:01:02.360
Those are all the breakpoints that I want to apply.

17
00:01:02.720 --> 00:01:08.210
And so now what I'm going to do is starting from the very top, make another get request on local host

18
00:01:08.210 --> 00:01:09.830
88 slash grades.

19
00:01:10.460 --> 00:01:16.460
The first breakpoint hits and the request maps to the handler method get grades.

20
00:01:16.490 --> 00:01:22.070
The handler method adds an attribute to the model grades that maps to an array list.

21
00:01:24.000 --> 00:01:25.470
If I press continue.

22
00:01:26.070 --> 00:01:27.570
Now, the model has data.

23
00:01:27.570 --> 00:01:33.210
If I drill into it, you'll notice a string key called grades that maps to a value.

24
00:01:33.210 --> 00:01:36.210
That's an array list with two grade objects.

25
00:01:38.380 --> 00:01:44.110
As the handler method is about to return the grades template, it's going to first send over all of

26
00:01:44.110 --> 00:01:50.830
that model data to our time leaf templates inside the template file leaf is going to generate as many

27
00:01:50.830 --> 00:01:55.360
table rows as there are elements inside of the array list.

28
00:01:55.630 --> 00:02:02.260
For every grade object that it loops through, it generates a row that shares the exact same name,

29
00:02:02.260 --> 00:02:09.669
the exact same subject, and the same score, as well as an update button whose link is connected to

30
00:02:09.669 --> 00:02:10.900
that grade's name.

31
00:02:11.320 --> 00:02:15.520
There are two grades, so Leaf is going to generate two rows.

32
00:02:16.390 --> 00:02:18.040
As you can clearly see over here.

33
00:02:19.700 --> 00:02:22.070
Now if I pressed the first button.

34
00:02:23.580 --> 00:02:29.490
It's going to make a get request to local host 8080 passing back the student name.

35
00:02:30.150 --> 00:02:35.850
The handler method intercepted the get request and it received the request parameter inside of a variable

36
00:02:35.850 --> 00:02:37.080
called string name.

37
00:02:40.140 --> 00:02:45.330
Now if I step inside get grayed index by just pressing continue.

38
00:02:47.620 --> 00:02:52.600
It's going to eventually find a grade object that matches this name parameter.

39
00:02:52.630 --> 00:02:55.080
It should be the object, that index zero.

40
00:02:55.090 --> 00:02:58.060
So eventually it will return and zero.

41
00:03:02.740 --> 00:03:08.060
And it did return the index a grab the object at that index and added it to the model.

42
00:03:08.080 --> 00:03:09.980
You can check the model itself.

43
00:03:10.000 --> 00:03:15.010
You can see that we have a great key that maps to Harry's great object.

44
00:03:16.860 --> 00:03:22.860
As the handler method is about to return the form template first it sends over the model data.

45
00:03:23.650 --> 00:03:28.360
The form element is going to look inside the model for a great object.

46
00:03:29.200 --> 00:03:36.100
This great object is bound to this form and every underlying field is bound to a form input.

47
00:03:36.130 --> 00:03:41.620
The fields are populated, so it follows that the form is going to be populated as well.

48
00:03:43.630 --> 00:03:45.040
As you can clearly see here.

49
00:03:45.770 --> 00:03:51.980
Now, if I were to change this to a D-minus, when you submit the form.

50
00:03:53.270 --> 00:03:56.870
A post request is going to carry that data to the back end.

51
00:03:56.900 --> 00:04:03.920
Now the first thing that happens is the handler method actually receives the post request, and as soon

52
00:04:03.920 --> 00:04:09.150
as it does, you can see that it starts by creating an empty grade object.

53
00:04:09.170 --> 00:04:15.470
So if we go to grade Java, it's already creating an empty grade object using your empty constructor.

54
00:04:15.740 --> 00:04:21.350
And then Spring Boot is smart enough to use your setters and update every field inside of the grade

55
00:04:21.350 --> 00:04:24.050
object with payload from the post request.

56
00:04:24.050 --> 00:04:27.410
It updates the name field with a value from the post request.

57
00:04:29.020 --> 00:04:32.440
It updates the score field with a value from the post request.

58
00:04:33.220 --> 00:04:37.150
And that updates the subject field with a value from the post request.

59
00:04:37.630 --> 00:04:38.500
Nice.

60
00:04:39.940 --> 00:04:45.550
As we step further into the handler method, it's going to call get grade index.

61
00:04:46.310 --> 00:04:52.640
The name parameter does match one of the objects in the array list, so this will eventually return

62
00:04:52.640 --> 00:04:53.930
an index of zero.

63
00:04:54.500 --> 00:04:55.700
Let's just step through it.

64
00:04:55.730 --> 00:04:57.320
It does return an index of zero.

65
00:04:57.320 --> 00:04:58.220
That's great.

66
00:04:58.250 --> 00:05:05.600
The index is not equal to -1000, so the block gets executed and it updates the object at that index.

67
00:05:05.600 --> 00:05:11.090
So now instead of having a C minus, Harry will have a D minus.

68
00:05:11.480 --> 00:05:16.880
And then after we've successfully submitted the form, whether it's an addition, whether it's an update,

69
00:05:16.880 --> 00:05:21.530
we redirect the client to make a get request on slash grades.

70
00:05:21.530 --> 00:05:22.430
So.

71
00:05:23.230 --> 00:05:25.210
Then get grades is going to get called.

72
00:05:25.210 --> 00:05:28.120
It's going to add the updated ArrayList to the model.

73
00:05:29.900 --> 00:05:36.170
Here we now see a key value pair where the grade's key maps to our updated array list.

74
00:05:37.630 --> 00:05:43.570
And as the handler method is about to render the grades view first, it sends over the model data to

75
00:05:43.570 --> 00:05:50.680
grades XHTML, HTML and finally is going to generate a table with the rows that reflect the newly updated

76
00:05:50.680 --> 00:05:51.540
array list.

77
00:05:51.550 --> 00:05:54.550
So if I go and press that final continue button.

78
00:05:56.550 --> 00:05:58.020
We see the change.

79
00:06:00.010 --> 00:06:00.770
And that's really it.

80
00:06:00.800 --> 00:06:03.200
I hope you enjoyed this breakpoint session.

81
00:06:03.200 --> 00:06:04.850
I'll see you in the next lesson.

