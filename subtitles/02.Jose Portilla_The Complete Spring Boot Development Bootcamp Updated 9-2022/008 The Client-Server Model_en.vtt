WEBVTT
1
00:00:00.270 --> 00:00:03.270
A client and a server communicate with each other.

2
00:00:07.150 --> 00:00:08.680
How do they communicate?

3
00:00:08.980 --> 00:00:11.950
Well, the client starts off by making a request.

4
00:00:12.220 --> 00:00:15.430
The server receives that request and responds.

5
00:00:19.160 --> 00:00:22.310
In this lesson, you will understand the client server model.

6
00:00:27.540 --> 00:00:29.460
A client makes a request.

7
00:00:33.490 --> 00:00:36.970
A client will make an HTTP request via the internet.

8
00:00:37.210 --> 00:00:43.600
An example of a client is your browser like Google, Chrome, Safari, Firefox, and from your browser

9
00:00:43.600 --> 00:00:46.270
you can make requests via the internet.

10
00:00:51.180 --> 00:00:53.220
Now let's talk about the physical server.

11
00:00:53.220 --> 00:00:57.480
And this is the computer, the machine that receives your request.

12
00:01:00.920 --> 00:01:04.550
A client makes an HTTP request via the internet.

13
00:01:05.800 --> 00:01:10.180
A physical server that lives on the other side of the world receives your request.

14
00:01:12.850 --> 00:01:18.400
Now an HTTP server is the software that actually processes your request.

15
00:01:21.620 --> 00:01:25.520
Spring boot applications have an embedded HTTP server.

16
00:01:28.140 --> 00:01:32.910
The HTTP server inside of a spring boot app is what processes a request.

17
00:01:35.600 --> 00:01:39.470
So if we go through the process again, the client makes a request.

18
00:01:40.010 --> 00:01:44.870
When a client makes a request, a computer, a physical server on the other side of the world picks

19
00:01:44.870 --> 00:01:45.440
it up.

20
00:01:47.830 --> 00:01:54.010
And the physical server forwards it to the HTTP server inside of your spring boot application.

21
00:01:57.730 --> 00:02:00.490
The Spring Boot application prepares a response.

22
00:02:01.720 --> 00:02:07.330
And once the response is ready, the HTTP server sends it back to the client.

23
00:02:09.330 --> 00:02:12.450
Their response populates the client's web page.

24
00:02:16.120 --> 00:02:17.920
Now what is an IP address?

25
00:02:18.250 --> 00:02:22.480
An IP address is a sequence of numbers that identifies a computer.

26
00:02:25.820 --> 00:02:31.310
There are millions of computers and every computer has a unique IP address.

27
00:02:34.310 --> 00:02:40.460
The client's request needs to include an IP address because it's the IP address that identifies the

28
00:02:40.460 --> 00:02:42.170
server they want to access.

29
00:02:45.580 --> 00:02:49.510
The physical server that matches the address picks up the request.

30
00:02:55.560 --> 00:03:00.030
The port tells the physical server where to forward the request.

31
00:03:03.930 --> 00:03:07.380
A physical server can have over 65,000 ports.

32
00:03:10.070 --> 00:03:14.270
The HTTP server listens for requests on one of them.

33
00:03:17.320 --> 00:03:22.600
When a client makes a request, it needs to specify an IP address and a port.

34
00:03:25.390 --> 00:03:28.660
The IP address identifies the physical server.

35
00:03:32.150 --> 00:03:36.620
And the port number tells the physical server where to forward the request.

36
00:03:36.980 --> 00:03:40.970
In this case, the server forwards the request to port 8080.

37
00:03:41.000 --> 00:03:48.140
The HTTP server embedded in your Spring Boot app happens to be listening for requests on that very same

38
00:03:48.140 --> 00:03:48.500
port.

39
00:03:48.530 --> 00:03:49.620
Port 8080.

40
00:03:50.060 --> 00:03:53.150
It gets the request and it sends back a response.

41
00:03:56.810 --> 00:03:57.050
Okay.

42
00:03:57.080 --> 00:03:59.240
Let's look at the client server model in action.

43
00:04:04.260 --> 00:04:08.760
I'm going to go to my browser and I'm going to make a request that specifies the following address and

44
00:04:08.760 --> 00:04:09.450
ports.

45
00:04:16.829 --> 00:04:18.329
And we get Google.

46
00:04:22.600 --> 00:04:26.380
I made a request that specifies an IP address and a port.

47
00:04:29.710 --> 00:04:33.130
The IP address belongs to one of the servers from Google.

48
00:04:36.710 --> 00:04:39.260
The request was forwarded to Port 80.

49
00:04:42.800 --> 00:04:44.270
An HTTP server.

50
00:04:44.270 --> 00:04:49.640
Listening on that port received our request and sent back a response.

51
00:04:49.880 --> 00:04:52.760
The response is HTML that populates the browser.

52
00:04:57.260 --> 00:05:00.880
It's worth noting that in real life, nobody ever writes the full address.

53
00:05:00.890 --> 00:05:08.210
We write URLs like Google.com, and behind the scenes a DNS server matches the URL to an address.

54
00:05:11.540 --> 00:05:14.120
In this lesson you learned about the client server model.

55
00:05:16.380 --> 00:05:20.880
When a client makes a request, it specifies an IP address and a port.

56
00:05:23.690 --> 00:05:26.600
The IP address identifies a physical server.

57
00:05:26.960 --> 00:05:30.800
The port number tells the physical server where to forward the request.

58
00:05:30.830 --> 00:05:34.670
In this case, the server forwards the request to Port 880.

59
00:05:35.770 --> 00:05:42.270
The HTTP server embedded in some spring boot app happens to be listening for requests on Port 88.

60
00:05:42.700 --> 00:05:45.610
It gets the request and it sends back a response.

