WEBVTT
1
00:00:00.180 --> 00:00:01.950
Welcome to Workbook 9.1.

2
00:00:01.950 --> 00:00:05.970
In this workbook, we're going to prepare the rest end points for the student controller.

3
00:00:06.000 --> 00:00:11.340
We're now workbooks 9.2 and 9.3 all follow a very similar theme.

4
00:00:11.340 --> 00:00:17.220
And the reason we're doing this is because once we officially start our first lesson in the SQL section,

5
00:00:17.220 --> 00:00:20.490
I just want to worry about the SQL portion of things.

6
00:00:20.490 --> 00:00:22.560
I want this to already be set up.

7
00:00:22.560 --> 00:00:27.690
Now, if you already feel comfortable with the rest and the concepts that we learned in the rest API

8
00:00:27.690 --> 00:00:33.450
section, you can feel free to skip these workbooks and just launch the starter project for the first

9
00:00:33.450 --> 00:00:35.430
lesson in the SQL section.

10
00:00:35.550 --> 00:00:40.350
But if you want to get some more practice with rest, then feel free to follow along.

11
00:00:41.460 --> 00:00:44.400
Start by launching the starter project for a book 9.1.

12
00:00:44.400 --> 00:00:49.890
I've already gone ahead and done that, and this workbook starts with a note about the request mapping

13
00:00:49.890 --> 00:00:52.200
annotation, which we have not covered yet.

14
00:00:52.200 --> 00:00:54.150
But this is very, very useful.

15
00:00:54.180 --> 00:01:00.840
What this is going to do is map any web request that starts with slash student to our student controller.

16
00:01:00.840 --> 00:01:09.000
This is very useful because let's assume we have a bunch of get post put and delete operations.

17
00:01:09.000 --> 00:01:14.850
If all of them happen to start with the path slash student, then instead of repeating that over and

18
00:01:14.850 --> 00:01:21.780
over and over, we can just map any web request that starts with slash student to our student controller

19
00:01:21.780 --> 00:01:23.250
and go from there.

20
00:01:23.610 --> 00:01:24.510
All right.

21
00:01:25.710 --> 00:01:31.920
Task one is we need a method that handles get requests made on slash students that returns the following

22
00:01:31.920 --> 00:01:38.820
response entity name get student expects a path variable of long ID and just returns a status code of

23
00:01:38.850 --> 00:01:39.420
200.

24
00:01:39.450 --> 00:01:41.430
All right, I think I've memorized that.

25
00:01:41.430 --> 00:01:43.290
Let me just go to my controller.

26
00:01:46.010 --> 00:01:47.780
We'll say get to mapping.

27
00:01:48.750 --> 00:01:56.130
And now we're going to map any request that is made on slash student slash some variable ID to the following

28
00:01:56.130 --> 00:01:59.430
handler method public response entity.

29
00:02:00.030 --> 00:02:04.380
This method is going to return a student that gets serialized into JSON.

30
00:02:05.630 --> 00:02:12.770
Called Get student, if I remember correctly, and this expects a path variable of long ID.

31
00:02:13.070 --> 00:02:19.340
So we expect the consumer to send us an identifier of type long a numeric identifier and now we're going

32
00:02:19.340 --> 00:02:25.160
to return a new response entity, I believe for now we're not returning any data.

33
00:02:25.160 --> 00:02:29.210
We're just going to return a status code of 200 HTTP status.

34
00:02:29.540 --> 00:02:30.290
Okay.

35
00:02:30.320 --> 00:02:32.210
Let me go ahead and run my code.

36
00:02:32.210 --> 00:02:36.980
Now, I know we didn't write much, but let's just test every single handler method that we set up.

37
00:02:42.070 --> 00:02:42.820
Looking good.

38
00:02:43.150 --> 00:02:48.760
And here it tells us inside postmen to create a collection called Grade Requests.

39
00:02:48.790 --> 00:02:50.530
Let me start by doing that.

40
00:02:50.560 --> 00:02:54.970
Press the plus button and here I will rename this.

41
00:02:55.720 --> 00:02:57.820
Two great requests.

42
00:02:58.420 --> 00:02:59.050
All right.

43
00:02:59.050 --> 00:03:02.640
Inside the collection, create a request called Read Student.

44
00:03:02.650 --> 00:03:05.080
That's going to make a guest request.

45
00:03:05.560 --> 00:03:09.640
Add a request, call it get.

46
00:03:09.670 --> 00:03:10.720
Was it read student?

47
00:03:10.720 --> 00:03:11.860
I think it was.

48
00:03:13.290 --> 00:03:16.470
And it's going to make a great request on local hosts.

49
00:03:16.500 --> 00:03:19.500
80, 80 slash student slash one.

50
00:03:20.850 --> 00:03:21.210
Okay.

51
00:03:21.240 --> 00:03:26.250
So this request, because it starts with slash student, it's going to get mapped to this controller

52
00:03:26.250 --> 00:03:28.680
and it's going to get routed to this handler method.

53
00:03:28.860 --> 00:03:30.030
Let's try it out.

54
00:03:31.750 --> 00:03:32.140
Okay.

55
00:03:32.140 --> 00:03:35.690
A just sends back a status of okay, that's good so far.

56
00:03:35.710 --> 00:03:41.760
Let's move on to our next task, which is to set up a method that can handle post requests made on Slack

57
00:03:41.770 --> 00:03:45.010
student and you'll notice that nothing comes after slash students.

58
00:03:45.010 --> 00:03:48.160
So our path for the post mapping will be empty.

59
00:03:48.490 --> 00:03:51.730
It will return the same response entity.

60
00:03:51.760 --> 00:03:53.650
It's going to be called save student.

61
00:03:54.190 --> 00:04:00.460
Whatever JSON we send through the post request will be serialized into a Java object and it's going

62
00:04:00.460 --> 00:04:06.940
to return a response entity which we serialize whatever object we receive into a JSON.

63
00:04:06.940 --> 00:04:08.110
All right.

64
00:04:09.690 --> 00:04:11.360
So we'll say post mapping.

65
00:04:11.370 --> 00:04:15.540
The request is going to be made on slash student and we don't need to put anything here.

66
00:04:15.570 --> 00:04:18.360
We'll say public response entity.

67
00:04:25.440 --> 00:04:27.600
It's going to be called safe students.

68
00:04:27.810 --> 00:04:33.900
And now whatever payload that we receive from the post request, we're going to serialize the properties

69
00:04:33.900 --> 00:04:36.870
of that JSON into a Java object.

70
00:04:39.210 --> 00:04:42.510
And now we can return a new response entity.

71
00:04:42.630 --> 00:04:47.640
And over here that object is going to be re serialized into JSON.

72
00:04:48.630 --> 00:04:51.780
And then we'll say HTTP status created.

73
00:04:53.510 --> 00:04:54.410
All right.

74
00:04:55.010 --> 00:05:00.110
And now inside the Greater Trust Collection, create a request called Create Student, and it's going

75
00:05:00.110 --> 00:05:03.920
to make a post request that sends whatever JSON is there.

76
00:05:03.920 --> 00:05:06.200
Let's add a new post request.

77
00:05:08.370 --> 00:05:11.130
We'll rename this to Create Student.

78
00:05:14.000 --> 00:05:19.040
And it's going to make a request on local hosts, 80, 80 students.

79
00:05:23.880 --> 00:05:29.580
It will be a post request and we're going to send over the following data.

80
00:05:34.090 --> 00:05:34.810
All right.

81
00:05:34.810 --> 00:05:42.280
So by virtue of sending this JSON, its properties are going to get D serialized into this Java object

82
00:05:42.280 --> 00:05:45.480
because we're not sending an ID as part of the payload.

83
00:05:45.490 --> 00:05:52.330
Then our set ID setter is never going to get called and the ID field for the student object is going

84
00:05:52.330 --> 00:05:53.410
to remain null.

85
00:05:53.560 --> 00:06:00.580
Which is why when this object gets re serialized into JSON, it sends back three properties where one

86
00:06:00.580 --> 00:06:03.430
of them is null and the other two were populated.

87
00:06:03.790 --> 00:06:07.570
OC looking good so far and this is what we were expecting anyways.

88
00:06:07.930 --> 00:06:13.720
And now if you want to visualize how as soon as we receive the post request, a new student object is

89
00:06:13.720 --> 00:06:19.480
created and each property inside the JSON based on its name, it's going to invoke one of the object

90
00:06:19.480 --> 00:06:20.080
setters.

91
00:06:20.080 --> 00:06:24.280
You can feel free to rerun this in debug mode, but we've already covered this in the last section,

92
00:06:24.280 --> 00:06:26.050
so I'm going to skip that.

93
00:06:26.080 --> 00:06:27.910
Let's just move on with this one.

94
00:06:28.330 --> 00:06:34.000
The next task is to create a method that can handle delete requests once again made on slash student.

95
00:06:34.000 --> 00:06:38.920
But it does expect a path variable of long ID which needs to be part of our path.

96
00:06:38.920 --> 00:06:41.350
So we're going to go back over here.

97
00:06:41.620 --> 00:06:43.450
We'll say delete mapping.

98
00:06:44.780 --> 00:06:51.920
Whatever delete request it's going to be slash student and ID variable is going to be part of the path.

99
00:06:52.800 --> 00:06:54.120
And now back here.

100
00:06:55.210 --> 00:07:01.810
Whatever delete request is made is going to be mapped to a method that returns a response entity.

101
00:07:03.020 --> 00:07:05.300
That Centre back initiative status code.

102
00:07:05.600 --> 00:07:07.940
The method is going to be called delete student.

103
00:07:08.180 --> 00:07:10.340
It expects a path variable.

104
00:07:11.670 --> 00:07:13.860
Of long ID.

105
00:07:14.640 --> 00:07:21.690
And right over here we're just going to say return you response entity, HTTP status, no content.

106
00:07:23.860 --> 00:07:24.550
OC.

107
00:07:27.130 --> 00:07:28.900
Inside the great request collection.

108
00:07:28.900 --> 00:07:32.650
Create a request called delete student and make a delete request.

109
00:07:32.980 --> 00:07:33.940
Sounds good.

110
00:07:34.810 --> 00:07:35.890
At a request.

111
00:07:36.520 --> 00:07:42.280
By the way, you'll notice that we specified this as a post request, but it still shows that it's a

112
00:07:42.310 --> 00:07:43.720
get request over here.

113
00:07:43.750 --> 00:07:48.190
You just need to save your file by pressing commands.

114
00:07:48.220 --> 00:07:53.530
If you're using a mac or control as if you're using windows, you'll know that it was saved once the

115
00:07:53.530 --> 00:07:54.760
dot is gone.

116
00:07:54.790 --> 00:07:56.470
Do the same thing over here.

117
00:07:57.040 --> 00:07:58.390
It's always good to save.

118
00:07:58.390 --> 00:08:02.290
And we're going to call this one delete student.

119
00:08:04.390 --> 00:08:07.960
And it's going to make a delete request to local host.

120
00:08:08.670 --> 00:08:11.760
8080 slash student slash some ID.

121
00:08:13.300 --> 00:08:14.710
Call this delete.

122
00:08:15.740 --> 00:08:17.170
Let's go out and make their quest.

123
00:08:17.180 --> 00:08:19.810
It should just send back a status code of no content.

124
00:08:19.820 --> 00:08:21.170
Looking good so far.

125
00:08:22.580 --> 00:08:30.560
And one last request is one that returns every single student that will be in our database eventually,

126
00:08:30.560 --> 00:08:34.390
but for now is just going to return a response entity with no data.

127
00:08:34.400 --> 00:08:36.650
So we'll say get to mapping.

128
00:08:37.309 --> 00:08:42.169
It's going to expect a request made on slash student slash all.

129
00:08:43.590 --> 00:08:47.400
Then I will say public response entity.

130
00:08:51.200 --> 00:08:58.880
It's going to return a list of students and that list of students will get serialized into a JSON collection.

131
00:08:59.360 --> 00:09:01.670
We're going to call this Get Students.

132
00:09:03.700 --> 00:09:05.410
I'll import the less class.

133
00:09:06.340 --> 00:09:12.490
And here I'm just going to return a new response entity with HTTP status of OC.

134
00:09:12.520 --> 00:09:17.680
We're not going to be sending any data yet because, well, we don't have a database or any data set

135
00:09:17.680 --> 00:09:21.970
up, but let's just set up our APIs methods.

136
00:09:22.990 --> 00:09:24.700
I think that should be it.

137
00:09:25.630 --> 00:09:30.010
Now we cheat to make create a new request called the Read students.

138
00:09:30.370 --> 00:09:32.950
So here I'll say add request.

139
00:09:34.970 --> 00:09:36.620
Reed students.

140
00:09:37.250 --> 00:09:40.400
We're going to be making a request on local hosts.

141
00:09:40.430 --> 00:09:43.130
88 slash student slash all.

142
00:09:43.860 --> 00:09:45.220
Oh, don't forget to save this.

143
00:09:45.230 --> 00:09:47.220
It should say delete OC.

144
00:09:48.160 --> 00:09:48.670
Over here.

145
00:09:48.670 --> 00:09:51.460
We'll make a request to slash student slash all.

146
00:09:52.410 --> 00:09:54.120
And we're looking good.

147
00:09:55.030 --> 00:09:56.800
Final touches save every request.

148
00:09:56.800 --> 00:09:59.950
We've done that inside the grade request collection.

149
00:09:59.950 --> 00:10:04.390
Create a new folder called Student and drag every student request there.

150
00:10:04.420 --> 00:10:05.520
Sounds good.

151
00:10:05.530 --> 00:10:08.410
This is a good way to organize our requests for later.

152
00:10:08.440 --> 00:10:11.890
We'll add a folder called Students.

153
00:10:11.890 --> 00:10:12.970
Oh, sorry.

154
00:10:13.060 --> 00:10:15.100
Rename to students.

155
00:10:16.920 --> 00:10:20.010
And I'm going to drag each request one by one.

156
00:10:28.510 --> 00:10:29.260
Oh, right.

157
00:10:29.260 --> 00:10:30.130
And.

158
00:10:30.850 --> 00:10:31.870
Let me save that.

159
00:10:31.870 --> 00:10:33.080
That should be it.

160
00:10:33.100 --> 00:10:35.470
I'll see you in Workbook 9.2.

