WEBVTT
1
00:00:00.240 --> 00:00:03.540
The Post operation is used to create a resource.

2
00:00:03.930 --> 00:00:07.890
An API defines operations that can manipulate a resource.

3
00:00:07.890 --> 00:00:15.600
The gut operation retrieves a resource post, creates a resource, put updates a resource and delete

4
00:00:15.600 --> 00:00:17.130
deletes a resource.

5
00:00:17.430 --> 00:00:21.390
In this lesson, your API will define a post operation.

6
00:00:24.610 --> 00:00:28.340
Before we do anything else, go to your pod class.

7
00:00:28.360 --> 00:00:33.970
Make sure to remove your complete constructor because it's just going to mess everything up.

8
00:00:34.420 --> 00:00:37.690
And we're not going to need this anymore.

9
00:00:39.480 --> 00:00:43.670
Because now we're going to be creating objects using a post operation.

10
00:00:43.680 --> 00:00:47.850
So we'll just set this equal to a new.

11
00:00:48.740 --> 00:00:49.760
ArrayList.

12
00:00:51.330 --> 00:00:52.230
All right.

13
00:00:53.180 --> 00:01:01.160
Because what we want ultimately is for Spring Boot to use the empty constructor and auto generate an

14
00:01:01.160 --> 00:01:03.540
ID for each object that gets created.

15
00:01:03.560 --> 00:01:07.700
We're not going to have those IDs of one, two, three, four, five, six and whatever.

16
00:01:08.330 --> 00:01:09.050
All right.

17
00:01:09.050 --> 00:01:15.380
The next step is, you guessed it, we expect the consumer to send a post request.

18
00:01:15.380 --> 00:01:22.390
So what we can do is use the post mapping annotation to map this request to a handler method.

19
00:01:22.400 --> 00:01:27.080
So we expect them to make a post request on slash contact.

20
00:01:27.440 --> 00:01:30.980
They're obviously going to be sending over payload along with their request.

21
00:01:30.980 --> 00:01:40.640
And what we're going to send back upon creating the contact object is we're just going to send back

22
00:01:40.640 --> 00:01:41.700
an HTTP status.

23
00:01:41.720 --> 00:01:44.960
We're not going to carry any data back to the consumer.

24
00:01:45.290 --> 00:01:51.290
So in this case, when we want it to carry back data as well as the status, you have to specify the

25
00:01:51.290 --> 00:01:53.090
type of data you would send back.

26
00:01:53.120 --> 00:01:58.460
In this case, we're just sending back a status and we're going to call the handler method, create

27
00:01:58.460 --> 00:02:03.290
contact, and it expects to receive a contact from the consumer.

28
00:02:06.020 --> 00:02:06.540
Okay.

29
00:02:06.950 --> 00:02:10.880
Let's not do anything for now inside the interface.

30
00:02:11.480 --> 00:02:16.490
What we will do is force the implementation to override a save function.

31
00:02:16.700 --> 00:02:18.380
So we're going to say void.

32
00:02:19.860 --> 00:02:21.720
Save contact.

33
00:02:22.940 --> 00:02:25.670
And it's going to expect a contact.

34
00:02:28.900 --> 00:02:34.120
And now back inside of my implementation, I can just override the following method.

35
00:02:35.930 --> 00:02:37.010
Here, we'll say.

36
00:02:37.580 --> 00:02:38.360
Contact.

37
00:02:38.360 --> 00:02:40.100
Repository, dot.

38
00:02:40.100 --> 00:02:41.420
Save contact.

39
00:02:46.700 --> 00:02:54.800
And back here I can say contact service dot save whatever contact gets passed in as payload inside of

40
00:02:54.800 --> 00:02:55.910
the post request.

41
00:02:56.450 --> 00:02:56.990
All right.

42
00:02:56.990 --> 00:03:01.890
And now we'll go back here and have a look at the 200 status codes.

43
00:03:01.910 --> 00:03:04.520
Which one do you think we should send back?

44
00:03:05.090 --> 00:03:05.710
Obviously.

45
00:03:05.720 --> 00:03:09.620
201201 means, hey, we got your request.

46
00:03:09.650 --> 00:03:14.630
It was successful, and a new resource was created as a result.

47
00:03:14.660 --> 00:03:19.690
Now, usually you'd want to send back the resource that was created as confirmation.

48
00:03:19.700 --> 00:03:24.380
But in this case, we're not going to be doing that just because it would add a lot of unnecessary work.

49
00:03:24.680 --> 00:03:30.860
Eventually, we'll be using an actual database, not an array list, and that's when we'll do that.

50
00:03:30.860 --> 00:03:37.820
But I'm very, very certain that the object will get created and there won't be any issues with the

51
00:03:37.820 --> 00:03:38.690
array list.

52
00:03:39.170 --> 00:03:42.330
All right, so here I can just return.

53
00:03:42.330 --> 00:03:49.070
And a new response entity that encapsulates an HTTP status.

54
00:03:50.210 --> 00:03:53.450
Of created status code 201.

55
00:03:55.540 --> 00:03:59.260
What I'm going to do is actually run my application in debug mode.

56
00:04:12.900 --> 00:04:14.460
I'll close this console.

57
00:04:15.830 --> 00:04:17.870
All right, let's try it out.

58
00:04:19.000 --> 00:04:21.329
We'll go back here or sorry.

59
00:04:21.339 --> 00:04:24.070
We'll go back here and we'll make a post request.

60
00:04:25.850 --> 00:04:31.430
To slash contact and we need to pass in some payload.

61
00:04:31.910 --> 00:04:34.820
So right here, we're going to define some JSON.

62
00:04:36.740 --> 00:04:38.630
Let's just copy over the format.

63
00:04:41.950 --> 00:04:46.180
Make sure to specify that we're sending over JSON to our API.

64
00:04:46.970 --> 00:04:47.930
All right.

65
00:04:48.610 --> 00:04:55.450
And the only fields that we're going to include in the JSON payload are the name and the phone number.

66
00:04:55.480 --> 00:05:05.560
The ID is going to be automatically generated inside of the empty constructor that we have in our class.

67
00:05:06.890 --> 00:05:07.370
Okay.

68
00:05:07.370 --> 00:05:08.960
Let's go ahead and send it over.

69
00:05:12.420 --> 00:05:16.590
All right if I press next and expand this.

70
00:05:16.860 --> 00:05:17.460
Hmm.

71
00:05:18.320 --> 00:05:26.990
Spring Boot is not able to serialize the contents of the request body onto our object.

72
00:05:27.290 --> 00:05:33.140
There's actually one last step, and before I explain this step, remember how I told you that the response

73
00:05:33.140 --> 00:05:40.580
body annotation that's contained within the rest controller serialize is the object that's returned

74
00:05:40.580 --> 00:05:43.100
into JSON before it's sent back.

75
00:05:43.700 --> 00:05:49.580
Well, postman, when it sends us data, it's not actually going to send us a Java object as would be

76
00:05:49.580 --> 00:05:50.570
suggested here.

77
00:05:51.390 --> 00:05:56.970
It's sending us a JSON data packet and our application isn't going to magically know what to do with

78
00:05:56.970 --> 00:05:57.840
the JSON.

79
00:05:57.840 --> 00:06:05.430
And so what we need to do is d serialize that JSON into a Java object.

80
00:06:05.640 --> 00:06:10.710
And so what we need to do is include the request body annotation.

81
00:06:11.850 --> 00:06:18.030
So a DC realizes the contents of the request body into a java object.

82
00:06:18.270 --> 00:06:20.580
So if we send that same request.

83
00:06:22.970 --> 00:06:28.790
You can see that thanks to request body, Spring Boot was effectively able to serialize the contents

84
00:06:28.790 --> 00:06:31.580
of the JSON into a Java object.

85
00:06:31.580 --> 00:06:40.490
So actually if we're going to look at this line by line, let's include breakpoints in all the setters.

86
00:06:43.760 --> 00:06:43.930
Uh.

87
00:06:44.170 --> 00:06:45.800
Let's just step through this.

88
00:06:45.820 --> 00:06:47.320
Make another request.

89
00:06:47.320 --> 00:06:48.310
Send it.

90
00:06:50.520 --> 00:06:54.300
So first spring boot creates a new object of the contact class.

91
00:06:54.930 --> 00:06:58.110
It creates a new object using your empty constructor.

92
00:06:58.170 --> 00:07:01.470
The ID field is auto generated over here.

93
00:07:02.420 --> 00:07:08.420
And every single setter that spring boot calls matches a field value from the JSON.

94
00:07:09.720 --> 00:07:16.650
So the name field matches the set name setter of our object and its corresponding value is going to

95
00:07:16.650 --> 00:07:18.120
get passed in accordingly.

96
00:07:18.780 --> 00:07:24.690
The phone number field matches the set phone number setter of our Java object.

97
00:07:29.730 --> 00:07:36.840
So just like that, the contents of our request body are serialized into a Java object.

98
00:07:38.090 --> 00:07:38.390
Here.

99
00:07:38.390 --> 00:07:41.540
We're saving that object inside of our repository.

100
00:07:42.370 --> 00:07:50.310
And the API should send back a status code of 201, which means we got the request and it was successful,

101
00:07:50.320 --> 00:07:51.820
but it took too long.

102
00:07:51.820 --> 00:07:55.270
So as it says, the socket hung up.

103
00:07:55.270 --> 00:07:56.530
Let's just send it again.

104
00:07:57.810 --> 00:07:59.040
Boom, boom, boom.

105
00:08:00.870 --> 00:08:02.760
Sends back a status code of 201.

106
00:08:03.090 --> 00:08:08.880
Now, this is very nice because on one hand we have an annotation called Response Body, which is part

107
00:08:08.880 --> 00:08:14.460
of your rest controller, and it's able to serialize the object that we're responding with into JSON.

108
00:08:14.640 --> 00:08:23.600
And we also have a request body which DC realizes the contents of incoming JSON into a Java object.

109
00:08:23.610 --> 00:08:29.430
And just like that, we created an API that's capable of communicating with another system.

110
00:08:31.970 --> 00:08:35.630
So to recap, the post operation creates a resource.

111
00:08:35.659 --> 00:08:38.840
This only leaves to operations put and delete.

112
00:08:38.840 --> 00:08:40.309
So let's get to it.

