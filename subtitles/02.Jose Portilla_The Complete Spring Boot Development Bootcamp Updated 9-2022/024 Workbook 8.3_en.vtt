WEBVTT
1
00:00:00.090 --> 00:00:00.750
Welcome to work.

2
00:00:00.750 --> 00:00:02.080
Book 8.3.

3
00:00:02.100 --> 00:00:04.900
I already went ahead and launched the Starter Project.

4
00:00:04.920 --> 00:00:10.710
This workbook is going to be a bit nostalgic because we're basically going back to the concept of field

5
00:00:10.710 --> 00:00:11.720
validation.

6
00:00:11.730 --> 00:00:16.020
So first things first, we need to add the validation dependency.

7
00:00:16.050 --> 00:00:23.310
Go to the Central Maven repo and just copy it over to your POM that XML file so that your validation

8
00:00:23.310 --> 00:00:25.160
dependency can be pulled.

9
00:00:25.170 --> 00:00:32.189
We do not need to specify the version for this spring boot starter and I'm going to synchronize the

10
00:00:32.189 --> 00:00:33.120
build file.

11
00:00:34.890 --> 00:00:35.610
All right.

12
00:00:36.870 --> 00:00:38.100
Should be enough.

13
00:00:38.190 --> 00:00:45.810
Test two is to apply a validation constraints such that we need to prevent the submission of a blank

14
00:00:45.810 --> 00:00:48.330
name or a blank phone number.

15
00:00:48.750 --> 00:00:57.180
So we'll go over to our pod class and we will make sure that the name they provide is not the blank,

16
00:00:57.180 --> 00:01:03.300
so that the message you are going to send back is name cannot be blank.

17
00:01:06.810 --> 00:01:07.770
And here.

18
00:01:11.090 --> 00:01:16.310
The message we were going to send back is number cannot be blank.

19
00:01:18.660 --> 00:01:19.290
Okay.

20
00:01:20.960 --> 00:01:27.230
Now you'll recall that the valid annotation is what actually performs the validation process on your

21
00:01:27.230 --> 00:01:32.360
object based on the constraint applied to each field.

22
00:01:32.510 --> 00:01:37.370
Now, where should we apply the valid annotation, do you think?

23
00:01:39.300 --> 00:01:44.040
Well wherever a contact object is being created and populated with fields.

24
00:01:44.040 --> 00:01:48.900
So when this handler method gets invoked, what's going to happen is Spring Boot is going to create

25
00:01:48.900 --> 00:01:57.420
a new contact object using your constructor, and then it's going to serialize the contents of the request

26
00:01:57.420 --> 00:02:02.790
body into your Java object, updating your name and updating the phone number.

27
00:02:02.790 --> 00:02:09.539
And as the name and phone number are being updated, we need to make sure that they are being validated

28
00:02:09.539 --> 00:02:11.640
using the valid annotation.

29
00:02:11.730 --> 00:02:15.690
We're going to do this over here.

30
00:02:17.500 --> 00:02:19.060
And that should be it.

31
00:02:19.090 --> 00:02:22.150
These are the only two places where we need to perform validation.

32
00:02:24.580 --> 00:02:31.600
Now in order to handle invalid fields, we can actually do this in our global exception handler, which

33
00:02:31.600 --> 00:02:37.230
is extremely convenient because we already have it set up to handle our runtime exception.

34
00:02:37.240 --> 00:02:40.190
All we need to do is inherit from the response entity.

35
00:02:40.210 --> 00:02:44.800
Exception Handler Class extends response entity.

36
00:02:44.800 --> 00:02:46.180
Exception Handler.

37
00:02:46.180 --> 00:02:53.170
And now I can override the handle method argument not valid function beautiful.

38
00:02:53.410 --> 00:03:02.590
So now you'll remember that after spring boot validates the fields of your object, a binding result

39
00:03:02.590 --> 00:03:05.590
is going to carry the result of this validation.

40
00:03:05.590 --> 00:03:07.630
We studied this in section three.

41
00:03:07.630 --> 00:03:13.570
We can access the binding result through the method argument, not valid exception.

42
00:03:13.810 --> 00:03:15.910
So for now I'm just going to print it.

43
00:03:15.910 --> 00:03:25.270
I'm just going to say print line exception dot get binding result dot get all errors.

44
00:03:26.040 --> 00:03:26.310
Here.

45
00:03:26.310 --> 00:03:33.990
It tells us to return an appropriate status code in the event that there are invalid arguments in this

46
00:03:33.990 --> 00:03:34.740
case.

47
00:03:34.770 --> 00:03:37.200
What do you think we need to return?

48
00:03:37.440 --> 00:03:40.290
Well, let's go to modular status codes.

49
00:03:42.150 --> 00:03:49.020
We'll go to the client responses because this involves a bad request on the client portion of things.

50
00:03:50.180 --> 00:03:56.320
And I would say this is a bad request because the user is passing in invalid data.

51
00:03:56.330 --> 00:04:06.350
So if this happens, we're going to send back a new response entity with an HTTP status code of bad

52
00:04:06.350 --> 00:04:07.250
request.

53
00:04:09.120 --> 00:04:09.990
All right.

54
00:04:09.990 --> 00:04:11.750
And now and learn the part.

55
00:04:11.760 --> 00:04:14.520
It tells us to create a far loop.

56
00:04:15.490 --> 00:04:21.310
That loops through every single error inside of the list of errors.

57
00:04:21.310 --> 00:04:24.940
So each element is of type object error.

58
00:04:25.030 --> 00:04:27.160
Let's just go ahead and import that.

59
00:04:29.570 --> 00:04:30.200
Okay.

60
00:04:30.680 --> 00:04:32.930
And we can just go ahead and print.

61
00:04:35.640 --> 00:04:37.500
Error Dot.

62
00:04:39.160 --> 00:04:43.000
Get default message because this allows us to print a string.

63
00:04:45.050 --> 00:04:46.970
I think we're good to go.

64
00:04:48.440 --> 00:04:54.260
Let's go to postmen and we're going to make a post request.

65
00:04:58.190 --> 00:04:59.050
Um.

66
00:04:59.060 --> 00:05:03.020
The name is going to be Tyrion Lannister.

67
00:05:04.840 --> 00:05:06.570
Actually there should be data and learn the part.

68
00:05:06.580 --> 00:05:07.330
Let's just copy that.

69
00:05:07.330 --> 00:05:07.870
Over.

70
00:05:12.950 --> 00:05:15.320
We're sending over a bad phone number.

71
00:05:18.010 --> 00:05:19.960
And did I even run my application?

72
00:05:19.960 --> 00:05:21.520
Silly me, I did not.

73
00:05:33.930 --> 00:05:39.330
All right, we'll send over that request and we get back a 400 bad request.

74
00:05:39.900 --> 00:05:43.590
So here, if you look closely, it says the number cannot be blank.

75
00:05:43.890 --> 00:05:44.640
All right.

76
00:05:44.640 --> 00:05:48.060
There's actually only one error, so we didn't actually need to perform the loop.

77
00:05:48.240 --> 00:05:51.870
But anyways, we can move on with task number five.

78
00:05:52.080 --> 00:05:54.120
Inside Error Response Java.

79
00:05:54.120 --> 00:05:57.540
We need to convert our message field into a list.

80
00:05:57.660 --> 00:05:57.900
Hmm.

81
00:05:57.900 --> 00:05:59.280
I wonder why we're doing that.

82
00:05:59.280 --> 00:06:02.070
That's going to become apparent very soon.

83
00:06:03.670 --> 00:06:05.500
So we'll make this into a list.

84
00:06:08.800 --> 00:06:09.790
All right.

85
00:06:09.790 --> 00:06:12.850
We're going to have to modify our constructor.

86
00:06:17.020 --> 00:06:20.650
And we can regenerate our galleries and setters.

87
00:06:24.130 --> 00:06:24.720
Okay.

88
00:06:25.240 --> 00:06:26.650
Going back over here.

89
00:06:29.150 --> 00:06:37.460
Our Error Response constructor now expects a list so we can cheat and just say arrays dot as list passing

90
00:06:37.460 --> 00:06:40.550
this into a list and then passing it into our constructor.

91
00:06:42.540 --> 00:06:47.400
And now let me just go ahead and pass in a bad get request.

92
00:06:47.400 --> 00:06:48.810
We'll say slash contact.

93
00:06:48.810 --> 00:06:50.970
We'll put in an idea that doesn't exist.

94
00:06:52.820 --> 00:06:53.480
All right.

95
00:06:53.480 --> 00:06:59.540
And now you'll notice that as spring boots sterilizes the properties of this Java object into JSON,

96
00:06:59.540 --> 00:07:03.440
the list gets converted into a JSON array type.

97
00:07:04.580 --> 00:07:10.970
Such that all of the elements that would be contained in this list will be part of the JSON array inside

98
00:07:10.970 --> 00:07:12.080
of these brackets.

99
00:07:12.290 --> 00:07:13.340
This is really nice.

100
00:07:13.340 --> 00:07:18.920
In JSON, there are array types, there are string types, there are number types.

101
00:07:18.920 --> 00:07:24.530
So far we've only seen array in string, but I'm sure in the future will be seeing many more data types.

102
00:07:24.620 --> 00:07:27.290
Anyways, inside handle method argument.

103
00:07:27.320 --> 00:07:27.860
Not valid.

104
00:07:27.860 --> 00:07:34.100
We need to create an error response object and append every error message from the binding result into

105
00:07:34.100 --> 00:07:34.860
the list.

106
00:07:34.880 --> 00:07:41.480
This makes a lot of sense because if the user were to mess up both the names and the phone number,

107
00:07:41.480 --> 00:07:46.620
we would need to send back two error messages, not just one.

108
00:07:46.640 --> 00:07:55.490
So here, what we're going to do is create a new list, list, string.

109
00:07:56.680 --> 00:08:01.150
We'll call it error is I guess is equal to a new array list.

110
00:08:01.870 --> 00:08:03.700
And now I can just say.

111
00:08:04.850 --> 00:08:05.870
Errors.

112
00:08:06.790 --> 00:08:12.550
Dot ad and we're going to add each error or each string into this errors list.

113
00:08:14.590 --> 00:08:21.040
And now I can respond with a new object of the error response class.

114
00:08:21.280 --> 00:08:24.940
And into this constructor, we can pass in the errors list.

115
00:08:27.070 --> 00:08:29.020
All right, let's try this out.

116
00:08:29.920 --> 00:08:30.460
You know what?

117
00:08:30.460 --> 00:08:32.200
Let's retest the get request.

118
00:08:32.620 --> 00:08:33.669
Everything still working?

119
00:08:33.669 --> 00:08:34.520
Just fine.

120
00:08:34.539 --> 00:08:37.750
Let's test the post request this time.

121
00:08:37.750 --> 00:08:40.320
We'll make sure the name is blank as well.

122
00:08:40.330 --> 00:08:41.559
Send it over.

123
00:08:41.980 --> 00:08:44.169
And this is awesome.

124
00:08:44.290 --> 00:08:50.980
As we pass in a blank name and a blank phone number, our binding result is going to have two errors

125
00:08:50.980 --> 00:08:57.820
where appending two strings inside of our errors list, we're creating a new error response, passing

126
00:08:57.820 --> 00:09:00.250
in that array list of two elements.

127
00:09:00.520 --> 00:09:07.360
Spring Boot is going to serialize the properties of this Java object into JSON, such that this list

128
00:09:07.360 --> 00:09:12.040
is converted to a JSON array type that contains each element.

129
00:09:12.350 --> 00:09:13.390
All right.

130
00:09:13.390 --> 00:09:16.960
And I believe this wraps up workbook 8.3.

