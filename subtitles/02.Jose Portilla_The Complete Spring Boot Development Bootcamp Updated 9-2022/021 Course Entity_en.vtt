WEBVTT
1
00:00:00.720 --> 00:00:03.990
Before we do anything else, we need to set up the course entity.

2
00:00:04.230 --> 00:00:05.939
Most of this is going to be review.

3
00:00:05.939 --> 00:00:12.000
So by virtue of just marking our class with the entity annotation, this class is going to map to a

4
00:00:12.000 --> 00:00:20.490
table and using the table annotation, we can specify the name of that table, which is going to be

5
00:00:20.500 --> 00:00:21.300
course.

6
00:00:21.630 --> 00:00:23.490
All right, we've set up our table.

7
00:00:23.490 --> 00:00:27.510
Now let's map each field to an appropriate column name.

8
00:00:27.510 --> 00:00:33.750
So the column annotation is going to map a field to a column.

9
00:00:34.380 --> 00:00:42.750
We'll call the column for this one ID This one will map to a column of subject knowable equals false.

10
00:00:45.270 --> 00:00:48.390
This one will map to a column of code.

11
00:00:50.110 --> 00:00:51.400
And description.

12
00:00:54.320 --> 00:01:01.190
The field that maps to our primary key column must be assigned the at ID annotation.

13
00:01:01.370 --> 00:01:07.580
Whenever we create a new course, the identity of that course needs to be auto generated, and we're

14
00:01:07.580 --> 00:01:15.650
going to auto generate our value using the generated value annotation with a strategy of generation

15
00:01:15.650 --> 00:01:17.480
type dot identity.

16
00:01:18.670 --> 00:01:19.790
Looking good so far.

17
00:01:19.810 --> 00:01:20.740
Nothing new.

18
00:01:21.960 --> 00:01:27.810
And now, instead of an all ARGs constructor, we're going to define a required ARGs constructor.

19
00:01:27.990 --> 00:01:30.670
Notice that at first we get an error.

20
00:01:30.690 --> 00:01:37.410
That's because the No ARGs constructor is an empty constructor and we didn't specify any fields as required.

21
00:01:37.410 --> 00:01:40.050
So this is going to be an empty constructor as well.

22
00:01:40.050 --> 00:01:42.820
It assumes duplication, which is why we get an error.

23
00:01:42.840 --> 00:01:48.720
What we'll have to do is specify the subject code and description as non null.

24
00:01:49.540 --> 00:01:51.310
Or non nulla, I should say.

25
00:01:55.480 --> 00:02:00.280
So during the creation of the course object, they must be given a value.

26
00:02:00.280 --> 00:02:02.830
They are, quote unquote, required.

27
00:02:03.490 --> 00:02:06.700
Now, I'm not really sure why it's doing this.

28
00:02:06.700 --> 00:02:08.229
This is kind of weird.

29
00:02:08.530 --> 00:02:09.610
And you know what?

30
00:02:09.610 --> 00:02:16.600
I'm not really a big fan of inlay hints to begin with, so I'm going to go over to my preferences.

31
00:02:16.690 --> 00:02:20.170
If you're using Windows and this happens, go to your file then preferences.

32
00:02:20.170 --> 00:02:22.540
So I'll go to my preferences and settings.

33
00:02:23.080 --> 00:02:25.930
I will type inlay in the search.

34
00:02:26.810 --> 00:02:29.270
And disable in Lance.

35
00:02:30.920 --> 00:02:31.600
All right.

36
00:02:31.610 --> 00:02:32.600
And it's gone.

37
00:02:33.020 --> 00:02:33.440
All right.

38
00:02:33.440 --> 00:02:36.650
So now our constructor will expect three values.

39
00:02:36.710 --> 00:02:42.090
Right now, we have a CRUD repository that can persist, update and delete students.

40
00:02:42.110 --> 00:02:45.570
We have one that can persist, update and delete grades.

41
00:02:45.590 --> 00:02:48.890
Now we need a crowd repository that can manage course entities.

42
00:02:48.890 --> 00:02:50.270
So let's set that up.

43
00:02:50.270 --> 00:02:53.720
I'm just going to copy what we have over here because I am pretty lazy.

44
00:02:56.640 --> 00:03:00.300
We'll call this course repository.

45
00:03:00.960 --> 00:03:03.690
It's going to manage course entities.

46
00:03:03.960 --> 00:03:07.110
And we do not need any specialized queries in here.

47
00:03:07.770 --> 00:03:08.430
Looks good.

48
00:03:08.430 --> 00:03:09.680
Public interface.

49
00:03:09.690 --> 00:03:10.590
All right.

50
00:03:11.040 --> 00:03:15.330
So an implementation of this interface will automatically be created by spring.

51
00:03:15.360 --> 00:03:21.900
That being will live inside the spring container and you can auto wire the course repository bean.

52
00:03:22.050 --> 00:03:23.900
Actually, we don't need to auto wire it.

53
00:03:23.910 --> 00:03:26.020
We can just define the field.

54
00:03:26.040 --> 00:03:26.460
Of course.

55
00:03:26.460 --> 00:03:27.510
Repository.

56
00:03:27.720 --> 00:03:29.400
Course, repository.

57
00:03:30.340 --> 00:03:34.900
And all our constructor is going to generate a constructor using all fields.

58
00:03:35.230 --> 00:03:39.940
Spring is going to inject any beans into that constructor, which in turn will update your field and

59
00:03:39.940 --> 00:03:41.680
perform your dependency injection.

60
00:03:42.520 --> 00:03:49.270
So the CRUD repository will recall offers a save method, which we're going to use inside of our core

61
00:03:49.280 --> 00:03:50.680
service implementation.

62
00:03:51.050 --> 00:03:57.490
We'll say course, repository, dot, save whatever course that gets passed in and now we'll go back

63
00:03:57.490 --> 00:03:58.840
inside the controller.

64
00:04:01.100 --> 00:04:07.730
Inside of a safe course, we will say, let me define the core service field over here.

65
00:04:08.030 --> 00:04:13.220
Of course, service core service dependency injection will happen automatically.

66
00:04:13.220 --> 00:04:15.380
So now I can just say core service.

67
00:04:18.300 --> 00:04:19.380
I'd say, of course.

68
00:04:19.380 --> 00:04:20.130
Over here.

69
00:04:20.700 --> 00:04:21.540
Looking good.

70
00:04:22.140 --> 00:04:24.780
I can now run my app and make a post request.

71
00:04:39.890 --> 00:04:40.280
Okay.

72
00:04:40.280 --> 00:04:40.910
No errors.

73
00:04:40.910 --> 00:04:42.080
We're looking good.

74
00:04:42.320 --> 00:04:44.300
I'm going to save.

75
00:04:45.800 --> 00:04:48.940
I believe our post payload in order to be set up.

76
00:04:50.410 --> 00:04:52.510
I will send over this course.

77
00:04:54.290 --> 00:04:56.530
And it creates a new course in our database.

78
00:04:56.540 --> 00:04:58.130
Let me just make sure of that.

79
00:04:59.150 --> 00:05:00.110
Press run.

80
00:05:03.550 --> 00:05:09.850
I'm going to query the students first, followed by the grades, followed by the courses.

81
00:05:12.390 --> 00:05:12.840
Beautiful.

82
00:05:12.840 --> 00:05:15.150
We've got four students and one course.

83
00:05:15.150 --> 00:05:16.890
Everything looks good so far.

84
00:05:17.340 --> 00:05:22.560
Now, before we set up the logic for deleting a course, please download the text file that's inside

85
00:05:22.560 --> 00:05:24.030
of your resources folder.

86
00:05:29.030 --> 00:05:29.450
All right.

87
00:05:29.450 --> 00:05:35.360
I'm assuming you did that inside of your run method.

88
00:05:35.900 --> 00:05:38.240
Copy and paste the code that I gave you.

89
00:05:40.940 --> 00:05:44.390
Loop through all of the course entities as we did over here.

90
00:05:44.840 --> 00:05:47.280
Let's just copy this over courses.

91
00:05:47.300 --> 00:05:50.120
Dot length here we'll say course suppository.

92
00:05:50.120 --> 00:05:50.480
Oh.

93
00:05:52.480 --> 00:05:53.240
And you know what?

94
00:05:53.260 --> 00:05:55.060
Let's just auto wire it as well.

95
00:05:56.020 --> 00:06:00.250
We're going to be removing this code at some point eventually once we deploy our app.

96
00:06:02.380 --> 00:06:02.990
So we'll see.

97
00:06:03.010 --> 00:06:04.660
Course repository.

98
00:06:06.010 --> 00:06:09.460
Dot save whatever courses are inside this array.

99
00:06:11.110 --> 00:06:13.960
So now every time we run our app.

100
00:06:15.120 --> 00:06:20.730
It should populate our database with four students and seven courses.

101
00:06:23.720 --> 00:06:24.470
Looking good.

102
00:06:24.890 --> 00:06:31.670
Now we can set up the logic for deleting a course, so I'll go over to my core service implementation.

103
00:06:32.390 --> 00:06:35.150
Here we will say course repository.

104
00:06:36.690 --> 00:06:44.040
Di delete by ID whatever idea that gets passed in inside of my course controller.

105
00:06:45.100 --> 00:06:50.500
In, say, core service, delete course, buy whatever ID that gets passed in.

106
00:06:52.370 --> 00:06:53.570
Let's try it out.

107
00:06:53.600 --> 00:06:59.060
I will go back here and delete the course that has an idea of one.

108
00:06:59.060 --> 00:07:01.040
So charms.

109
00:07:05.640 --> 00:07:06.030
Here.

110
00:07:06.030 --> 00:07:12.840
It says local host 88 student It should say course, so please make sure to fix that if you happen to

111
00:07:12.840 --> 00:07:15.510
use the same collection as me.

112
00:07:22.400 --> 00:07:23.270
Have a look.

113
00:07:25.670 --> 00:07:26.430
And it deletes it.

114
00:07:26.450 --> 00:07:27.110
Beautiful.

115
00:07:27.140 --> 00:07:33.350
Before we wrap up, we just have two more requests to handle and get course and get courses.

116
00:07:33.770 --> 00:07:35.870
So going back over here.

117
00:07:37.350 --> 00:07:44.310
The crowd repository offers a fine by ID method that we can use to find our course.

118
00:07:44.820 --> 00:07:46.740
Oh, don't forget your doth get.

119
00:07:48.120 --> 00:07:55.260
And over here what we can do is set course repository dot to find all that's going to return all entities

120
00:07:55.260 --> 00:07:56.560
in an iterable.

121
00:07:56.580 --> 00:07:59.550
Let's typecast that iterable to a list.

122
00:08:01.480 --> 00:08:02.620
Returning that.

123
00:08:05.800 --> 00:08:06.060
Okay.

124
00:08:06.100 --> 00:08:09.370
Now, back inside of the course controller.

125
00:08:09.790 --> 00:08:12.490
I will finalize all of these methods here.

126
00:08:12.490 --> 00:08:13.420
I will say.

127
00:08:15.430 --> 00:08:16.700
Course service.

128
00:08:18.170 --> 00:08:19.250
Dot.

129
00:08:19.970 --> 00:08:20.620
Um.

130
00:08:22.770 --> 00:08:23.700
Get course.

131
00:08:27.540 --> 00:08:28.710
And here I will say.

132
00:08:30.060 --> 00:08:33.000
Course, service did get courses.

133
00:08:35.400 --> 00:08:40.409
And here I seem to have the wrong return type.

134
00:08:40.530 --> 00:08:47.970
This should be returning a list of courses that eventually get serialized into a JSON collection, not

135
00:08:47.970 --> 00:08:49.110
just a course.

136
00:08:51.040 --> 00:08:52.300
We're looking good now.

137
00:09:03.260 --> 00:09:07.370
First, I'm going to get the course with an idea for history of magic.

138
00:09:07.700 --> 00:09:10.370
So I will go on read course.

139
00:09:11.190 --> 00:09:15.840
Get the course of an idea for that works perfectly.

140
00:09:15.990 --> 00:09:18.660
Now I'm going to get all of the courses.

141
00:09:19.870 --> 00:09:23.370
And it grabs every single course from our SQL database.

142
00:09:23.380 --> 00:09:25.380
That is looking very good.

143
00:09:25.390 --> 00:09:31.960
We didn't do anything new in this video, but we're basically setting ourselves up for the next lesson

144
00:09:31.960 --> 00:09:37.150
because in the next lesson there's also going to be another mini to one relationship.

145
00:09:37.150 --> 00:09:44.860
But between course and grade, because the existence of a grade, it only makes sense if there is a

146
00:09:44.860 --> 00:09:50.440
student who the grade belongs to and if there is a course that the grade is based on.

147
00:09:50.440 --> 00:09:54.040
So let's start setting up that relationship in the next lesson.

