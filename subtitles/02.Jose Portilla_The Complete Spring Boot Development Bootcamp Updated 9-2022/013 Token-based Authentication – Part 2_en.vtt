WEBVTT
1
00:00:00.450 --> 00:00:03.750
In this lesson, we will go over pathway number two, logging in.

2
00:00:04.200 --> 00:00:09.630
So to jog your memory in pathway number two, the user tries to log in with the correct credentials.

3
00:00:09.630 --> 00:00:12.990
The request gets caught in the authentication filter.

4
00:00:13.110 --> 00:00:20.070
And if their credentials match what we have in our records, then they are granted a JWT token.

5
00:00:20.800 --> 00:00:24.120
This was the more general representation of the pathway.

6
00:00:24.130 --> 00:00:27.640
But if we're going to be implementing it, we need to be more specific.

7
00:00:28.030 --> 00:00:33.790
So what's really going to happen is we're authentication filter will have an attempt authentication

8
00:00:33.790 --> 00:00:39.280
method and this method is going to retrieve the username and password that's being passed in and it's

9
00:00:39.280 --> 00:00:41.800
going to create an authentication object.

10
00:00:43.750 --> 00:00:49.000
It's going to send the authentication object to an authentication manager.

11
00:00:49.570 --> 00:00:55.150
The authentication manager is going to have a special method called authenticate that will receive the

12
00:00:55.150 --> 00:00:58.360
authentication object containing all of the credentials.

13
00:00:58.930 --> 00:01:03.730
The authentication manager is going to perform a one way hash on the password, and then it's going

14
00:01:03.730 --> 00:01:09.400
to try to match the credentials that were passed in against what we have in our records.

15
00:01:09.520 --> 00:01:14.020
If the credentials match, it's going to return the authentication object.

16
00:01:14.690 --> 00:01:19.490
And upon doing so, we've essentially indicated a successful authentication.

17
00:01:20.060 --> 00:01:25.880
Then a method called successful authentication inside of our filter is going to get invoked and it's

18
00:01:25.880 --> 00:01:28.370
going to send back a JWT token.

19
00:01:32.870 --> 00:01:38.870
Before we start, please go to Postman and set up another post request called Authenticate User that

20
00:01:38.870 --> 00:01:45.680
makes a post request to local host 88 slash login and it's going to have the same payload as what you

21
00:01:45.680 --> 00:01:48.470
would have in the original register request.

22
00:01:48.470 --> 00:01:51.950
So please pause the video and take some time to set this up.

23
00:01:55.690 --> 00:01:55.960
All right.

24
00:01:55.960 --> 00:01:58.180
And now we can go ahead and implement our filter.

25
00:01:58.180 --> 00:02:04.300
So if you go inside of security down to filter, go to your authentication filter class.

26
00:02:04.300 --> 00:02:12.250
And what we're going to do is inherit from the username password authentication filter because by doing

27
00:02:12.250 --> 00:02:18.520
so, we can override the methods that we discussed earlier, attempt authentication and successful authentication.

28
00:02:18.520 --> 00:02:20.380
So let's do that right now.

29
00:02:20.800 --> 00:02:22.390
Attempt authentication.

30
00:02:24.380 --> 00:02:30.530
And our filters attempt authentication method is going to get invoked as soon as a user makes a request

31
00:02:30.530 --> 00:02:32.050
on slash log in.

32
00:02:32.090 --> 00:02:34.910
We're going to change that to be slash authenticate later.

33
00:02:34.910 --> 00:02:40.220
But for now, if the user makes a request on slash login, the first method that will get invoked is

34
00:02:40.220 --> 00:02:41.570
attempt authentication.

35
00:02:41.570 --> 00:02:47.360
And when the user's request makes it all the way over here, we need to extract the body of that request.

36
00:02:47.360 --> 00:02:49.730
And we can do that by saying.

37
00:02:51.300 --> 00:02:55.200
Request dot get input stream.

38
00:02:55.470 --> 00:03:02.040
This will retrieve the body of the request as binary data, and we know that the body consists of two

39
00:03:02.040 --> 00:03:02.770
fields.

40
00:03:02.790 --> 00:03:04.710
Username and password.

41
00:03:04.710 --> 00:03:11.580
And we want to serialize those two fields into the properties of our Java object user.

42
00:03:12.120 --> 00:03:15.990
So we'll go back here and we're going to say user.

43
00:03:17.020 --> 00:03:21.220
Please import the correct user, the one that corresponds to our entity.

44
00:03:21.250 --> 00:03:23.920
User user is equal to.

45
00:03:23.920 --> 00:03:27.490
And what we're going to do is use an object mapper.

46
00:03:29.790 --> 00:03:32.520
To perform the serialization process.

47
00:03:32.520 --> 00:03:40.980
In essence, what it's going to do is map the incoming data to a user object and to perform this serialization

48
00:03:40.980 --> 00:03:43.980
process we can say we value.

49
00:03:44.880 --> 00:03:51.480
This expects to parameters the data from our post request, which we're going to map to an object of

50
00:03:51.480 --> 00:03:52.530
type user.

51
00:03:53.460 --> 00:03:58.920
D serializing the incoming request data into the properties of our user object.

52
00:04:00.420 --> 00:04:06.160
And now if the user were to specify invalid fields, then our object mapper is going to have a hard

53
00:04:06.160 --> 00:04:11.080
time mapping these fields into the properties of our user.

54
00:04:11.230 --> 00:04:14.560
And what that's going to do is throw an exception.

55
00:04:15.070 --> 00:04:21.220
We're going to have to try to run this code and catch the exception if the code fails.

56
00:04:21.430 --> 00:04:25.960
And the exception that we're going to catch is going to be of type I of exception.

57
00:04:26.560 --> 00:04:30.160
And now here what we can do is throw.

58
00:04:31.500 --> 00:04:33.180
A new runtime exception.

59
00:04:33.180 --> 00:04:34.880
And why are we doing that?

60
00:04:34.890 --> 00:04:42.600
The reason is if the user were to pass in bad JSON field values, that would be impossible to map into

61
00:04:42.600 --> 00:04:44.970
the properties of a user class.

62
00:04:45.150 --> 00:04:51.240
So for example, password with four DS is not going to get mapped into this property and as a result

63
00:04:51.240 --> 00:04:52.550
we're going to end up here.

64
00:04:52.560 --> 00:04:59.430
And so what I want to do is throw an exception in order to then handle it and send them back a 400 response,

65
00:04:59.430 --> 00:05:03.690
not a 403, to indicate that they made a bad request.

66
00:05:03.690 --> 00:05:07.950
The reason their request didn't work is not because they were forbidden from doing so.

67
00:05:07.980 --> 00:05:10.860
It's just because we could not understand what they were sending us.

68
00:05:10.860 --> 00:05:12.060
But here is the issue.

69
00:05:12.060 --> 00:05:17.170
We're throwing a new runtime exception and we're throwing it from inside of a filter.

70
00:05:17.190 --> 00:05:18.570
I know what you're thinking.

71
00:05:18.810 --> 00:05:22.770
Hey, Ryan, why didn't you just make a custom exception?

72
00:05:22.770 --> 00:05:26.130
Throw it and then handle it inside the application exception handler.

73
00:05:26.160 --> 00:05:29.940
What I'm about to say won't make much sense, but just bear with me.

74
00:05:29.940 --> 00:05:35.800
The exception handler will only work if the request is being handled by the dispatcher servlet.

75
00:05:35.820 --> 00:05:38.940
We'll talk about the dispatcher servlet in the next video.

76
00:05:38.940 --> 00:05:46.230
But all I want you to know is that spring security filters, they come before the dispatcher servlet.

77
00:05:46.230 --> 00:05:52.710
So by throwing an exception from inside of a filter, it is impossible to handle it inside of controller

78
00:05:52.710 --> 00:05:53.460
advice.

79
00:05:53.460 --> 00:05:54.690
So what are we going to do?

80
00:05:54.720 --> 00:05:56.280
Don't worry about that right now.

81
00:05:56.280 --> 00:05:58.900
We will handle this exception in the next video.

82
00:05:58.920 --> 00:06:00.360
Let's just move on.

83
00:06:00.360 --> 00:06:08.730
So let's assume that our client did pass in a valid JSON fields that effectively serialize into the

84
00:06:08.730 --> 00:06:11.490
properties of our user object.

85
00:06:11.490 --> 00:06:19.140
Then our next step is to pass the credentials that are inside the user object to the authentication

86
00:06:19.140 --> 00:06:19.830
manager.

87
00:06:19.830 --> 00:06:24.050
The authentication manager is something that we're going to implement a couple of videos from now.

88
00:06:24.060 --> 00:06:30.390
For the time being, let's just print the credentials so that we can wrap up the user, get username.

89
00:06:31.500 --> 00:06:34.710
User don't get password.

90
00:06:35.190 --> 00:06:41.160
And now for this filter to get invoked, when a user goes on slash login, we're going to have to go

91
00:06:41.160 --> 00:06:49.140
to the security config and add this filter to our filter chain, new authentication filter.

92
00:06:49.440 --> 00:06:50.340
All right.

93
00:06:51.780 --> 00:06:58.170
I'm going to run my application in debug mode and add three breakpoints over here.

94
00:07:06.640 --> 00:07:06.850
Okay.

95
00:07:06.940 --> 00:07:10.150
Let's make a request to sign up.

96
00:07:12.390 --> 00:07:12.810
You know what?

97
00:07:12.810 --> 00:07:15.000
I'm not going to bother refreshing the database.

98
00:07:15.420 --> 00:07:19.440
The user will get registered, then I will authenticate them.

99
00:07:19.470 --> 00:07:23.340
Obviously that's not going to work because we don't have any authentication logic in place.

100
00:07:23.370 --> 00:07:28.410
All we're doing is grabbing the credentials and storing them in a user object.

101
00:07:30.320 --> 00:07:31.610
That works just fine.

102
00:07:31.620 --> 00:07:35.460
Here is grand slim with a password of learn the part.

103
00:07:35.480 --> 00:07:37.340
And here we're just printing them.

104
00:07:38.700 --> 00:07:41.920
And then it's just going to send back a 403 forbidden.

105
00:07:41.940 --> 00:07:48.510
They are not authorized to perform any requests because, well, we don't have any means of authenticating

106
00:07:48.510 --> 00:07:48.930
them.

107
00:07:48.960 --> 00:07:50.040
All right.

108
00:07:50.490 --> 00:07:57.270
And before we wrap up, I really want to drive home the point.

109
00:07:58.140 --> 00:08:03.960
Once the request reaches this filter, its attempt authentication method will only get invoked if the

110
00:08:03.960 --> 00:08:06.320
user is actually trying to authenticate.

111
00:08:06.330 --> 00:08:09.480
So I don't know why I stopped running the app.

112
00:08:09.480 --> 00:08:10.950
Let me just rerun it.

113
00:08:13.320 --> 00:08:18.090
If I go here, if I were to misspell login and put, I don't know, four ends.

114
00:08:20.700 --> 00:08:21.720
Nothing happens.

115
00:08:21.720 --> 00:08:27.510
The request reaches the filter, but its attempt authentication method is not going to get invoked and

116
00:08:27.510 --> 00:08:29.820
it just sends back a forbidden message.

117
00:08:29.970 --> 00:08:31.080
All right.

118
00:08:31.080 --> 00:08:37.409
And so the last thing I want to do is make this into a standalone variable and then pass it in.

119
00:08:37.409 --> 00:08:45.090
So we'll say authentication filter off filter is equal to a new authentication filter.

120
00:08:45.920 --> 00:08:51.570
And then I'm going to change the URL for which this filter gets processed.

121
00:08:51.590 --> 00:08:53.810
Set Filter Processes URL.

122
00:08:54.790 --> 00:09:00.040
And the path for which this filter will get processed is not going to be the standard login it's going

123
00:09:00.040 --> 00:09:01.620
to now be authenticate.

124
00:09:01.630 --> 00:09:07.840
So when the user wants to now authenticate, they have to write slash authenticate and that will now

125
00:09:07.840 --> 00:09:12.030
trigger the authentication filters as attempt authentication method.

126
00:09:12.040 --> 00:09:13.180
My apologies.

127
00:09:13.180 --> 00:09:15.910
We have to actually add this instance.

128
00:09:18.050 --> 00:09:19.250
Try out now.

129
00:09:23.000 --> 00:09:23.780
Beautiful.

130
00:09:25.180 --> 00:09:25.690
All right.

131
00:09:25.690 --> 00:09:33.100
So the next step is to pass these credentials into an authentication manager that will then perform

132
00:09:33.100 --> 00:09:38.960
the authentication process and hopefully send back a 200 if the credentials are correct.

133
00:09:38.980 --> 00:09:43.720
But before we get into that, I just want to talk about exception handling and how it would be done

134
00:09:43.720 --> 00:09:48.110
in spring security, what it's impossible to use the controller advice class.

135
00:09:48.130 --> 00:09:48.790
All right.

136
00:09:48.790 --> 00:09:49.570
See you soon.

