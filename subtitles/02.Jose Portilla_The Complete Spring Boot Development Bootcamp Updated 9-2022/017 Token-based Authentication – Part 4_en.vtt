WEBVTT
1
00:00:00.420 --> 00:00:00.930
All right.

2
00:00:00.930 --> 00:00:06.110
This video is going to be a lot easier because the only focus is going to be the following two methods

3
00:00:06.120 --> 00:00:12.600
If the authentication manager ends up sending back the authentication object, which in turn gets returned,

4
00:00:12.600 --> 00:00:15.950
and that's going to invoke the successful authentication method.

5
00:00:15.960 --> 00:00:22.500
And over here we're going to send back a JWT token that the user can then present to us as evidence

6
00:00:22.500 --> 00:00:23.940
that they've authenticated.

7
00:00:23.940 --> 00:00:29.730
And the only thing that we're going to be sending back in the JWT payload is the subject which is going

8
00:00:29.730 --> 00:00:31.410
to equal the username.

9
00:00:31.440 --> 00:00:37.170
The username will be stored as a value for the subject field and actually also inside the payload,

10
00:00:37.170 --> 00:00:43.170
we're going to add an expiry date of 2 hours from the current time and then we're going to use the following

11
00:00:43.170 --> 00:00:51.630
algorithm to produce a digital signature that combines the header, the payload and a very strong 512

12
00:00:51.630 --> 00:00:52.830
bit secret.

13
00:00:53.190 --> 00:00:58.890
The resulting digital signature will be very, very hard to decode, making it very, very hard for

14
00:00:58.890 --> 00:01:03.480
someone to tamper with the JWT without us knowing about it.

15
00:01:03.480 --> 00:01:10.290
And so what successful authentication is going to do is add the JWT token to the response and send it

16
00:01:10.290 --> 00:01:12.750
back to the user and then that's it.

17
00:01:12.750 --> 00:01:14.310
We've authenticated them.

18
00:01:14.310 --> 00:01:20.940
The user can then present this JWT as evidence that they have been authenticated and use it to make

19
00:01:20.940 --> 00:01:21.930
requests.

20
00:01:22.320 --> 00:01:23.850
All right, that's enough talk.

21
00:01:23.850 --> 00:01:25.500
Let's get started.

22
00:01:25.500 --> 00:01:30.930
What I want you to do first is go to your pom xml file and add the following dependency.

23
00:01:31.110 --> 00:01:33.900
I'll give you some time to pause the video and do that.

24
00:01:37.000 --> 00:01:44.080
Please make sure to use the same version just so that things are consistent and we'll go to the authentication

25
00:01:44.080 --> 00:01:54.580
filter and we will create a JWT token string token is equal to JWT and we're going to create a JWT token

26
00:01:54.580 --> 00:01:59.410
that has a subject which identifies the authenticated user.

27
00:01:59.410 --> 00:02:04.870
In this case we're going to put in their name for the subject expires that.

28
00:02:05.660 --> 00:02:08.740
So this expects a date.

29
00:02:08.750 --> 00:02:11.210
So I'm going to say new date.

30
00:02:12.350 --> 00:02:15.170
That starts from the current time system.

31
00:02:15.410 --> 00:02:19.580
Current time in milliseconds plus 2 hours.

32
00:02:19.940 --> 00:02:25.670
So we can grab the expiry time from our.

33
00:02:26.620 --> 00:02:35.320
Security Constance file and looking back, this is in seconds where it actually should be in milliseconds.

34
00:02:35.590 --> 00:02:44.350
We could say times 1000 here, but you know what might just be worth updating our token expiration.

35
00:02:45.640 --> 00:02:46.060
All right.

36
00:02:46.060 --> 00:02:50.590
So this token will be set to expire 2 hours after we've given them the JWT.

37
00:02:50.620 --> 00:02:58.930
This is going to be in our payload and we're going to sign our JWT token using the MAC 512 algorithm,

38
00:02:58.930 --> 00:03:01.390
which can take in a string secret.

39
00:03:01.420 --> 00:03:08.020
The secret we're going to give them is security constants dot secret key.

40
00:03:09.960 --> 00:03:10.410
Now.

41
00:03:10.410 --> 00:03:13.650
How did I create a 512 bit secret?

42
00:03:13.680 --> 00:03:20.280
I actually found a very handy encryption key generator, and if you just click on 512 bits, it will

43
00:03:20.280 --> 00:03:27.360
generate a 512 bit secret, which is what's expected by the following algorithm.

44
00:03:27.730 --> 00:03:28.620
All right.

45
00:03:28.620 --> 00:03:34.770
And so as successful authentication, we know what's going to send back a status of 200 unless we claim

46
00:03:34.770 --> 00:03:35.440
otherwise.

47
00:03:35.460 --> 00:03:37.470
Let's leave the status of 200.

48
00:03:37.500 --> 00:03:40.020
All we're going to do is add a header.

49
00:03:40.050 --> 00:03:45.540
The header is going to say authorisation, which I believe is a security constant.

50
00:03:45.810 --> 00:03:47.070
So we'll say.

51
00:03:48.630 --> 00:03:51.870
Security Constants dot authorization.

52
00:03:52.200 --> 00:03:56.730
The next thing we're going to add in our header is bearer.

53
00:03:58.290 --> 00:04:05.520
And this authorization header is going to have a value of security constants bearer.

54
00:04:06.640 --> 00:04:09.820
Plus the JWT token.

55
00:04:10.510 --> 00:04:18.130
So you'll remember from Basic Auth that usually the header that's used for authentication is authorization

56
00:04:18.190 --> 00:04:22.780
followed by basic and then followed by your username and password.

57
00:04:22.900 --> 00:04:30.820
Well, with token based authentication, it is going to be bearer followed by your JWT token.

58
00:04:32.590 --> 00:04:33.590
All right.

59
00:04:33.590 --> 00:04:36.400
I think we're ready to test this out.

60
00:04:38.430 --> 00:04:41.820
Let's run the application in debug mode.

61
00:04:45.350 --> 00:04:48.200
Will be fixing this up in just a moment.

62
00:04:57.830 --> 00:04:58.490
All right.

63
00:04:58.490 --> 00:05:00.890
First I'll register.

64
00:05:03.440 --> 00:05:05.660
And this time no funny business.

65
00:05:05.660 --> 00:05:07.730
Let us log in correctly.

66
00:05:11.110 --> 00:05:12.570
All right, beautiful.

67
00:05:12.580 --> 00:05:19.030
We get a successful authentication and to the response we are passing in an authorization header that

68
00:05:19.030 --> 00:05:22.060
equals our bearer JWT token.

69
00:05:25.400 --> 00:05:27.500
And this is our response to 100.

70
00:05:27.500 --> 00:05:29.960
We've successfully authenticated the user.

71
00:05:29.990 --> 00:05:32.340
I hope you realize how much of a big deal this is.

72
00:05:32.360 --> 00:05:37.580
And now we'll go to headers and there is our JWT token.

73
00:05:38.210 --> 00:05:45.830
Just for fun, I'm just going to go on a base 64 decoder and I'll decode the header of the JWT token.

74
00:05:45.890 --> 00:05:47.980
Here you can see it's let me zoom in.

75
00:05:47.990 --> 00:05:49.760
I don't want you seeing all these ads.

76
00:05:50.700 --> 00:05:56.220
Here you can see that the header is type JWT with an algorithm of H.

77
00:05:56.310 --> 00:05:59.570
S 512, which is exactly what we set up over here.

78
00:05:59.580 --> 00:06:04.920
We're using an algorithm of 512, we're returning a JWT token.

79
00:06:04.920 --> 00:06:12.420
So as we described before, the header of a JWT token is just metadata that describes what it is.

80
00:06:12.420 --> 00:06:19.980
What follows the second dot is your payload, which I hope you can guess is going to be your subject.

81
00:06:19.980 --> 00:06:26.550
That equals the username, the thing that actually identifies the user being authenticated and an expiry

82
00:06:26.550 --> 00:06:27.150
date.

83
00:06:27.330 --> 00:06:28.920
Let's decode that.

84
00:06:33.710 --> 00:06:36.170
And I think I may have gone a bit too far.

85
00:06:36.200 --> 00:06:40.580
This is our digital signature, which is impossible to decode.

86
00:06:41.310 --> 00:06:46.770
So here we see our payload is subject my username with an expiry date.

87
00:06:47.720 --> 00:06:54.830
And now as the client, I can use this JWT token as evidence that I have been authenticated and I can

88
00:06:54.830 --> 00:07:01.580
include it in all of my subsequent requests such that the API is going to take active measures inside

89
00:07:01.580 --> 00:07:05.810
of the JWT authorization filter to validate our token.

90
00:07:05.810 --> 00:07:07.770
Make sure it hasn't been tampered with.

91
00:07:07.790 --> 00:07:10.460
Make sure it is a token that they provided us.

92
00:07:10.460 --> 00:07:16.880
And if they validate our token, then they will authorize us to make whatever request we want to make.

93
00:07:17.060 --> 00:07:18.920
We'll be setting that up in the next video.

94
00:07:18.950 --> 00:07:22.190
For now, we're not going to do anything with the JWT token.

95
00:07:22.220 --> 00:07:28.040
The next thing I want to fix is our unsuccessful authentication method.

96
00:07:28.040 --> 00:07:38.000
In the event that we do not authenticate properly and a bad credentials exception is thrown.

97
00:07:38.330 --> 00:07:46.220
What we're going to do is say a response, the set status, what we should not be sending back at 200,

98
00:07:46.220 --> 00:07:47.130
that's for sure.

99
00:07:47.150 --> 00:07:50.660
We're going to be sending back a HTTP servlet response.

100
00:07:50.990 --> 00:07:53.600
SC Which would be.

101
00:07:54.570 --> 00:08:00.240
Um, forbidden es 403 I don't see 401 anywhere up there.

102
00:08:00.240 --> 00:08:02.190
It is c unauthorized.

103
00:08:02.610 --> 00:08:06.060
And now let me add some content to our response.

104
00:08:06.060 --> 00:08:08.760
I'm just going to copy what we have over here.

105
00:08:11.250 --> 00:08:15.960
What we're going to write into the response is actually going to be the message that is passed into

106
00:08:15.960 --> 00:08:20.280
the authentication exception, which is going to be wrong password.

107
00:08:20.280 --> 00:08:23.730
But instead of wrong, I'm going to say incorrect password.

108
00:08:24.620 --> 00:08:28.580
Or you provided an incorrect password.

109
00:08:30.240 --> 00:08:32.460
That sounds a lot better to me.

110
00:08:36.289 --> 00:08:37.010
Um.

111
00:08:37.809 --> 00:08:38.110
Yeah.

112
00:08:38.110 --> 00:08:39.640
We can just say failed.

113
00:08:40.240 --> 00:08:41.650
Dot get message.

114
00:08:41.650 --> 00:08:46.390
We'll get the message from the authentication exception that was thrown and I can't think of anything

115
00:08:46.390 --> 00:08:47.920
else that we have to do.

116
00:08:47.950 --> 00:08:52.720
So let us register.

117
00:08:53.990 --> 00:08:55.430
As Ray and Slim.

118
00:08:56.670 --> 00:09:01.650
We'll leave the username as is, but we will mess up the password.

119
00:09:04.010 --> 00:09:05.750
For a one unauthorized.

120
00:09:05.750 --> 00:09:07.730
This is looking beautiful.

121
00:09:07.730 --> 00:09:10.980
And it says you provided an incorrect password.

122
00:09:11.000 --> 00:09:13.520
Well, what if I provide an incorrect email?

123
00:09:13.550 --> 00:09:14.240
What do I.

124
00:09:14.270 --> 00:09:15.800
Or username, I should say?

125
00:09:18.380 --> 00:09:19.730
I forget the breakpoints.

126
00:09:21.460 --> 00:09:23.200
Username doesn't exist.

127
00:09:23.320 --> 00:09:24.100
Wow.

128
00:09:24.130 --> 00:09:26.650
This is looking really, really cool.

129
00:09:26.890 --> 00:09:28.900
And we get a404 not found it.

130
00:09:28.900 --> 00:09:31.840
Couldn't find the username that you were looking for.

131
00:09:31.870 --> 00:09:35.140
Our application is looking really, really powerful.

132
00:09:35.170 --> 00:09:41.850
So the next thing we have to do is implement the authorization filter.

133
00:09:41.860 --> 00:09:46.540
So now if a user were to log in, they would receive a JWT token.

134
00:09:46.540 --> 00:09:53.290
And now when they want to make requests to any of these methods, they're going to need to pass in the

135
00:09:53.290 --> 00:09:56.770
JWT token as evidence that they have been authenticated.

136
00:09:56.770 --> 00:10:01.600
And then we're going to validate their token over here to make sure it hasn't been tampered with.

137
00:10:01.810 --> 00:10:02.470
All right.

138
00:10:02.470 --> 00:10:07.960
That's going to be the last thing that we implement for this authentication mechanism in our security

139
00:10:07.960 --> 00:10:08.740
filter chain.

140
00:10:08.740 --> 00:10:10.870
So I cannot wait to see you there.

