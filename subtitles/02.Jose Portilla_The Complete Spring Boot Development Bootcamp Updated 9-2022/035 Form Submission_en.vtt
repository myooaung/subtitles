WEBVTT
1
00:00:00.240 --> 00:00:02.190
Now we're ready to submit our form.

2
00:00:02.220 --> 00:00:04.650
The first step is to make a post request.

3
00:00:04.650 --> 00:00:11.010
So a get request is when the client is requesting a resource, but when they want to submit data to

4
00:00:11.010 --> 00:00:14.310
our application, then they need to make a post request.

5
00:00:15.120 --> 00:00:21.540
So when the user presses submit, the post request is going to carry all of the user input to our spring

6
00:00:21.540 --> 00:00:28.350
boot back end the post request payload will have as many parameters as there are fields attached to

7
00:00:28.350 --> 00:00:35.250
each input, so there will be a name parameter that equals the name input, a score parameter that equals

8
00:00:35.250 --> 00:00:40.590
the score inputs and a subject parameter that equals the subject inputs.

9
00:00:40.920 --> 00:00:44.850
Okay, now we have all of this data being carried back to our application.

10
00:00:44.850 --> 00:00:47.220
We need something to receive that data.

11
00:00:47.220 --> 00:00:51.300
So step two is to create a handler method that accepts the post request.

12
00:00:53.470 --> 00:00:54.570
All right.

13
00:00:54.580 --> 00:01:01.240
And then step three, the handler method needs to specify an object that can receive the payload inside

14
00:01:01.240 --> 00:01:02.380
the post request.

15
00:01:02.800 --> 00:01:06.100
Obviously, it's going to specify a grade object.

16
00:01:09.040 --> 00:01:14.950
And then in step four, which we don't have to do ourselves behind the scenes, Spring Boot is going

17
00:01:14.950 --> 00:01:21.640
to create an MBTI grade object, and it's going to use your setters to update every field in the object

18
00:01:21.640 --> 00:01:23.860
with payload from the post request.

19
00:01:25.180 --> 00:01:28.720
So it's going to start off by creating an empty grade object.

20
00:01:31.230 --> 00:01:36.990
And it's going to use your sweaters to update every single field in this object with payload from the

21
00:01:36.990 --> 00:01:38.130
post request.

22
00:01:45.300 --> 00:01:51.930
This object that spring boot creates for us behind the scenes is going to be wired to our grade parameter.

23
00:01:53.260 --> 00:01:55.990
And then step five is to update the data store.

24
00:01:56.170 --> 00:02:02.470
So back here, this form was designed to make a post request when the client presses on the submit button,

25
00:02:02.470 --> 00:02:09.830
whereas that post request going to go well, we can direct the post request of a form using the leaf

26
00:02:09.880 --> 00:02:11.039
attribute action.

27
00:02:11.050 --> 00:02:17.140
And you may have guessed it, we're going to use a link expression to specify a URL endpoint.

28
00:02:17.500 --> 00:02:22.670
The URL is context relative, so it's already going to consider the local host 8080.

29
00:02:22.690 --> 00:02:27.310
So we can just specify a path of handle submit.

30
00:02:28.220 --> 00:02:33.710
So a post request is going to be made on handle submit that's going to carry all of this user input.

31
00:02:33.710 --> 00:02:37.070
So what we can do is back inside of the great controller.

32
00:02:38.380 --> 00:02:41.830
Are going to map this post request using post mapping.

33
00:02:42.280 --> 00:02:47.290
We're going to map the post request made on path slash handle submit.

34
00:02:49.900 --> 00:02:52.030
To a handler method called.

35
00:02:53.000 --> 00:02:54.350
Submit grade.

36
00:02:56.770 --> 00:03:03.040
So now we have a handler method that intercepts the post request, but we need to specify a grade object

37
00:03:03.670 --> 00:03:07.990
that receives the payload that's being carried by the post request.

38
00:03:08.080 --> 00:03:14.740
And so behind the scenes, what Spring Boot is going to do is create an empty grade object using your

39
00:03:14.740 --> 00:03:21.190
empty constructor, and it's going to use your setters to update every single field inside of this grade

40
00:03:21.190 --> 00:03:24.040
object with payload from the post request.

41
00:03:24.550 --> 00:03:25.240
All right.

42
00:03:25.240 --> 00:03:28.120
This is something you'll visualize in the next breakpoint session.

43
00:03:28.120 --> 00:03:36.160
And when a grade is submitted, we're going to add that grade to our array list so we can remove all

44
00:03:36.160 --> 00:03:41.290
of this hardcoded data and just set this equal to a new array list.

45
00:03:46.830 --> 00:03:48.240
Of great objects.

46
00:03:48.360 --> 00:03:49.920
And then we can say.

47
00:03:51.150 --> 00:03:57.510
Student grades dot add and we're going to add the submitted grade object.

48
00:04:01.090 --> 00:04:02.410
Then I will return.

49
00:04:03.720 --> 00:04:04.470
ABC.

50
00:04:07.060 --> 00:04:07.210
Okay.

51
00:04:07.270 --> 00:04:12.460
Now, before I continue, let me just add a two string method real quick and print the great object

52
00:04:12.640 --> 00:04:15.460
Java code generators generate to string.

53
00:04:17.779 --> 00:04:20.990
All right, I will print the grade object.

54
00:04:25.250 --> 00:04:26.270
Go back here.

55
00:04:30.710 --> 00:04:38.890
Oh, and one more thing is, when we load our form, we're passing in an object that's already pre-populated.

56
00:04:38.900 --> 00:04:41.630
We want our form to start off as empty.

57
00:04:41.630 --> 00:04:44.810
So we're going to start by passing in an empty grade object.

58
00:04:48.000 --> 00:04:48.490
Okay.

59
00:04:49.050 --> 00:04:51.300
I'm going to submit a grade for Harry.

60
00:04:51.810 --> 00:04:55.020
Give him a C minus and potions.

61
00:04:56.020 --> 00:04:56.860
We get an error.

62
00:04:56.890 --> 00:05:00.340
I'll come back to this error in a bit, but you'll notice.

63
00:05:01.290 --> 00:05:02.580
That if we were.

64
00:05:02.580 --> 00:05:05.520
Well, ignoring the error that's also displayed in the terminal.

65
00:05:06.120 --> 00:05:07.170
If I scroll up.

66
00:05:10.690 --> 00:05:15.020
We see that the forum data was successfully received by our handler method.

67
00:05:15.040 --> 00:05:20.410
We see a great object with the name of Harry, a subject of potions and a score of C minus.

68
00:05:20.680 --> 00:05:26.080
So what happened was that a post request was made from our form.

69
00:05:26.080 --> 00:05:30.010
That post request was directed to the path slash handle.

70
00:05:30.010 --> 00:05:37.120
Submit our handler method submit grade intercepted this post request and behind the scenes spring boot

71
00:05:37.120 --> 00:05:44.590
actually created an empty grade object using your empty constructor and Spring Boot was smart enough

72
00:05:44.590 --> 00:05:48.760
to use your setters to update every single field in that grade.

73
00:05:48.760 --> 00:05:51.850
Object with payload from the post request.

74
00:05:53.360 --> 00:05:59.120
And having successfully received the payload from the post request, we were able to print the grade

75
00:05:59.120 --> 00:06:02.000
object and print it successfully.

76
00:06:02.330 --> 00:06:04.300
So let's go back to the error.

77
00:06:04.310 --> 00:06:10.400
It's telling us that it's having trouble resolving the template A, B, C, because that template doesn't

78
00:06:10.400 --> 00:06:11.120
exist.

79
00:06:11.150 --> 00:06:15.890
Before I do anything, what I'm going to do is remove the two string method.

80
00:06:16.160 --> 00:06:18.290
This was only for testing purposes.

81
00:06:18.530 --> 00:06:20.090
Remove the print statement.

82
00:06:20.090 --> 00:06:21.200
All right.

83
00:06:26.670 --> 00:06:30.180
And so once the user submits the form, we update the data store.

84
00:06:30.210 --> 00:06:35.010
We want to redirect the client to make a get request on slash grades.

85
00:06:35.460 --> 00:06:38.040
The way to do that is to say redirect.

86
00:06:39.980 --> 00:06:41.960
Redirect.

87
00:06:42.590 --> 00:06:45.770
Then put a colon followed by a path.

88
00:06:45.980 --> 00:06:49.520
In this case, the path is going to be slash grades.

89
00:06:50.310 --> 00:06:56.370
Basically what we're telling the user is, hey, the submission completed successfully and the content

90
00:06:56.370 --> 00:06:59.670
you're looking for afterwards is over here and slash grades.

91
00:06:59.670 --> 00:07:02.370
So please go ahead and make a get request there.

92
00:07:02.370 --> 00:07:09.180
And so the browser, the client is going to automatically make a get request on slash grade triggering

93
00:07:09.180 --> 00:07:10.590
this handler method.

94
00:07:10.590 --> 00:07:15.390
It's going to add this array list to the model and display the grades view.

95
00:07:16.950 --> 00:07:21.720
So I think the app will end with no errors going back here.

96
00:07:22.780 --> 00:07:24.700
Let's submit Harry.

97
00:07:24.730 --> 00:07:26.320
Give him the usual C minus.

98
00:07:26.320 --> 00:07:27.790
He was never good in potions.

99
00:07:27.790 --> 00:07:29.080
We'll press submit.

100
00:07:29.260 --> 00:07:30.340
Beautiful.

101
00:07:30.850 --> 00:07:34.320
Now, before I get flooded with this question.

102
00:07:34.330 --> 00:07:37.240
Hey, Ryan, why not just return the grade's view?

103
00:07:37.810 --> 00:07:39.610
Och, I'll entertain it for now.

104
00:07:40.540 --> 00:07:42.370
Let's go and submit a grade.

105
00:07:43.210 --> 00:07:45.280
We'll say Harry Press submit.

106
00:07:45.550 --> 00:07:46.400
There's no data.

107
00:07:46.420 --> 00:07:47.350
Why not?

108
00:07:48.260 --> 00:07:50.690
Well, let's think about this logically.

109
00:07:51.440 --> 00:07:53.250
The rose up.

110
00:07:53.290 --> 00:07:54.650
Wrong html.

111
00:07:54.890 --> 00:08:00.860
The rose inside of the grades table are bound to the grades array list.

112
00:08:03.920 --> 00:08:09.200
However, in this case, the handler method that returns the grades view doesn't add any model attributes.

113
00:08:09.470 --> 00:08:15.080
So now am I expected to just copy the logic from the grades handler method over to here?

114
00:08:15.350 --> 00:08:16.490
No way.

115
00:08:16.820 --> 00:08:22.010
Submit form has no business rendering the grades templates and updating its data.

116
00:08:22.010 --> 00:08:29.090
Its only purpose is to handle form submission and after it fulfills that purpose, which it does successfully,

117
00:08:29.090 --> 00:08:31.560
it must redirect the client.

118
00:08:31.580 --> 00:08:33.500
So we'll say redirect.

119
00:08:34.610 --> 00:08:35.960
Slash grades.

120
00:08:39.140 --> 00:08:45.290
The redirection basically tells the client, Hey, the content you asked for is over here, so go ahead

121
00:08:45.290 --> 00:08:46.650
and make it get request.

122
00:08:46.670 --> 00:08:52.760
The browser is going to automatically make a get request to slash grades and the correct handler method

123
00:08:52.760 --> 00:08:53.390
intercepts.

124
00:08:53.390 --> 00:09:01.010
It adds the list as a model attribute and renders the grades templates if I rerun the app now.

125
00:09:04.610 --> 00:09:06.140
And that's just beautiful.

126
00:09:07.420 --> 00:09:10.780
In this lesson, the user entered data through a form.

127
00:09:10.810 --> 00:09:14.950
Now this is a lot to recap, so just tune in to the next breakpoint session.

