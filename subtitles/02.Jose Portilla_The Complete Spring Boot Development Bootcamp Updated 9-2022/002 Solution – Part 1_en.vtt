WEBVTT
1
00:00:00.240 --> 00:00:04.380
The solution will cover Part one of your global superstore challenge.

2
00:00:04.410 --> 00:00:08.640
Task one was to create a controller class and assign it a name of your choice.

3
00:00:08.640 --> 00:00:10.650
So we'll go ahead and do just that.

4
00:00:10.650 --> 00:00:14.640
I will create a new file called Store Controller Java.

5
00:00:18.170 --> 00:00:22.550
And I will make this into a controller class.

6
00:00:24.210 --> 00:00:25.290
In Task two.

7
00:00:25.290 --> 00:00:30.900
If a user makes a get request on an empty path, we need to map that request to a handler method called

8
00:00:30.900 --> 00:00:34.470
get form and then get form will return the form view.

9
00:00:35.970 --> 00:00:41.310
Before we can do that, since we're returning a form template, we need to make sure that we have final

10
00:00:41.310 --> 00:00:43.830
leaf installed, which we do perfect.

11
00:00:44.130 --> 00:00:51.570
And now we can just declare a handler method that can receive get requests on an empty path.

12
00:00:51.570 --> 00:00:54.330
The handler method is going to be called.

13
00:00:55.190 --> 00:00:56.150
Get form.

14
00:00:59.970 --> 00:01:02.010
And then we'll return the form string.

15
00:01:03.040 --> 00:01:03.380
Okay.

16
00:01:03.460 --> 00:01:08.200
Before we do anything, it's good to just keep testing things as you go along, even if what we did

17
00:01:08.200 --> 00:01:09.540
was fairly trivial.

18
00:01:09.550 --> 00:01:11.530
So we'll spin up a new terminal.

19
00:01:12.850 --> 00:01:16.510
I'll run my code using Maven clean spring boot to run.

20
00:01:27.260 --> 00:01:27.830
All right.

21
00:01:27.830 --> 00:01:29.690
Now I can just say local host, 80.

22
00:01:29.690 --> 00:01:30.200
80.

23
00:01:33.390 --> 00:01:37.710
The request goes to my handler method and it returns the form templates.

24
00:01:37.830 --> 00:01:38.550
Beautiful.

25
00:01:40.560 --> 00:01:46.830
Now the next step is to populate the dropdown list with values from the array in constants dot Java.

26
00:01:46.950 --> 00:01:53.970
So if you press the button right now there are only two options choose category and a placeholder option.

27
00:01:54.120 --> 00:02:00.180
Our dropdown list can be populated with an array of values, so we're going to keep the choose category

28
00:02:00.180 --> 00:02:06.030
option and every option that comes after must be generated by an array using final leaf.

29
00:02:06.540 --> 00:02:09.090
So we will.

30
00:02:09.660 --> 00:02:13.470
Upon returning the form, we'll need access to our model.

31
00:02:15.460 --> 00:02:18.920
Because ultimately it's the model that provides the data to our review.

32
00:02:18.940 --> 00:02:22.300
So now we can say model does not add attribute.

33
00:02:22.330 --> 00:02:25.750
The attribute we are going to add will be named categories.

34
00:02:25.990 --> 00:02:33.070
And this categories key will map to our constants dot categories array.

35
00:02:34.130 --> 00:02:38.060
So here we'll say constants dot categories.

36
00:02:40.320 --> 00:02:40.830
All right.

37
00:02:40.830 --> 00:02:45.030
And now back, in my view, inside former HTML.

38
00:02:45.330 --> 00:02:48.060
I have one option that says choose category.

39
00:02:48.060 --> 00:02:52.470
And every option that comes after needs to be generated by a timely loop.

40
00:02:52.620 --> 00:02:56.310
So here I can say if each is equal to.

41
00:02:57.730 --> 00:03:02.460
First I can use a variable expression to retrieve the model attributes.

42
00:03:02.470 --> 00:03:06.130
The model attribute is named categories.

43
00:03:07.230 --> 00:03:14.520
But that's going to do is fetch our array of categories and then this loop is going to run through every

44
00:03:14.520 --> 00:03:15.780
single category.

45
00:03:17.380 --> 00:03:18.910
In the categories array.

46
00:03:21.900 --> 00:03:28.320
And for every option that gets generated from this timely loop, we're going to set the text.

47
00:03:29.580 --> 00:03:33.090
Equal to the category that's currently being iterated through.

48
00:03:33.690 --> 00:03:39.630
And as before, we can use a variable expression to return a value that derives from the model object

49
00:03:39.870 --> 00:03:40.770
category.

50
00:03:41.520 --> 00:03:42.600
All right.

51
00:03:45.780 --> 00:03:48.720
If I go ahead and refresh.

52
00:03:49.620 --> 00:03:50.430
Beautiful.

53
00:03:55.240 --> 00:03:57.610
Well, right now it's down to task number four.

54
00:03:57.610 --> 00:04:03.670
And Task Force tells us that the value attribute is needed to determine what will be sent upon form

55
00:04:03.670 --> 00:04:04.450
submission.

56
00:04:04.870 --> 00:04:10.020
So this text value that each option is displaying means nothing.

57
00:04:10.030 --> 00:04:12.410
This is just what's displayed to the user.

58
00:04:12.430 --> 00:04:17.829
But what the option value actually equals is determined with the value attribute.

59
00:04:18.970 --> 00:04:24.430
So it tells us that the option displaying choose category should equal a blank value.

60
00:04:24.670 --> 00:04:26.950
So here we will say value.

61
00:04:27.820 --> 00:04:29.170
Is equal to blank.

62
00:04:30.960 --> 00:04:36.930
If the user were to choose the choose category option and then press submit the value that would be

63
00:04:36.930 --> 00:04:39.630
sent back in the post request would be blank.

64
00:04:41.150 --> 00:04:46.700
But if the user were to choose any other option like furniture, office supplies or technology, then

65
00:04:46.700 --> 00:04:50.440
the value that it equals should match the text being displayed.

66
00:04:50.450 --> 00:04:56.370
So if the user were to select furniture, we would want the value being sent to back to be furniture.

67
00:04:56.390 --> 00:04:57.890
So here we can say.

68
00:04:59.340 --> 00:05:02.540
Value is equal to and hmm.

69
00:05:02.680 --> 00:05:07.630
We would need to grab the category that's currently being iterated through.

70
00:05:07.660 --> 00:05:10.340
To do that, we need a family expression.

71
00:05:10.360 --> 00:05:14.710
Well, thankfully, family provides a timely value attribute.

72
00:05:17.610 --> 00:05:21.030
You always need this when you're evaluating a family's expression.

73
00:05:23.480 --> 00:05:26.770
So the value attribute is just straight up html.

74
00:05:26.780 --> 00:05:31.190
Finally, value allows it to obtain its results from a leaf expression.

75
00:05:31.310 --> 00:05:32.870
Nothing too complicated.

76
00:05:32.870 --> 00:05:38.120
And now it's worth mentioning that let's just say I work to avoid all this and just say value equals

77
00:05:38.120 --> 00:05:38.720
apple.

78
00:05:40.410 --> 00:05:46.470
Then no matter what the user selects, the value that will be sent back to the server will be Apple.

79
00:05:46.920 --> 00:05:48.960
But obviously we're not going to do that.

80
00:05:54.730 --> 00:05:55.180
All right.

81
00:05:55.180 --> 00:06:00.910
And for task five, if the user were to make a request on path inventory, we want to intercept the

82
00:06:00.910 --> 00:06:06.490
request with a handler method called get inventory and that method will return the inventory view.

83
00:06:06.640 --> 00:06:07.630
Simple enough.

84
00:06:07.630 --> 00:06:17.200
We'll go back to our store controller and we'll define a gut mapping annotation that will intercept

85
00:06:17.200 --> 00:06:25.450
requests on slash inventory, and the handler method to handle that request will be get inventory.

86
00:06:26.110 --> 00:06:31.210
And what that's going to do is just return the inventory view.

87
00:06:32.190 --> 00:06:33.150
All right.

88
00:06:37.700 --> 00:06:39.230
Slash inventory.

89
00:06:40.730 --> 00:06:41.230
All right.

90
00:06:41.230 --> 00:06:47.890
And we see a table with static data, nothing too interesting, but we'll be fixing that up in the next

91
00:06:47.890 --> 00:06:49.240
few workbooks.

92
00:06:50.860 --> 00:06:55.840
Now, the next step is to instrument the form and inventory buttons on the top navigator to make gut

93
00:06:55.870 --> 00:06:58.930
requests on their respective paths.

94
00:06:59.080 --> 00:07:02.620
Simple enough, we can use a link expression.

95
00:07:05.390 --> 00:07:07.640
As we have done many times in the past.

96
00:07:07.940 --> 00:07:14.330
So here in this anchor tag, we'll define finally a ref.

97
00:07:14.840 --> 00:07:23.390
And we'll set that equal to a link expression, which starts with an add symbol followed by two brackets.

98
00:07:23.750 --> 00:07:25.840
And the URL is context relative.

99
00:07:25.850 --> 00:07:27.860
So we can just specify the path.

100
00:07:29.950 --> 00:07:31.510
And here we'll do the same thing.

101
00:07:32.360 --> 00:07:35.630
This will make get requests on the path inventory.

102
00:07:39.560 --> 00:07:44.450
And we will apply the same thing inside of our inventory.

103
00:07:44.690 --> 00:07:45.290
HTML.

104
00:07:47.200 --> 00:07:49.300
And I'll paste the same thing here.

105
00:07:49.300 --> 00:07:55.710
But this will make requests on the home page and sure enough, this should work.

106
00:07:55.720 --> 00:07:58.270
Let's go back and make some requests.

107
00:07:58.600 --> 00:08:01.700
I'll go to inventory, then I'll go to form there and back.

108
00:08:01.720 --> 00:08:02.500
Beautiful.

109
00:08:05.440 --> 00:08:07.150
Now Task seven was optional.

110
00:08:07.150 --> 00:08:13.120
So if you want to stop here, by all means, but I'm going to use a breakpoints to trace the runtime

111
00:08:13.120 --> 00:08:15.940
of get requests made on different paths.

112
00:08:20.720 --> 00:08:29.990
So I'm going to apply the breakpoints to my handler methods and then I will stop the runtime using Control

113
00:08:29.990 --> 00:08:34.039
C And I'll go ahead and run the application in debug mode.

114
00:08:34.070 --> 00:08:37.520
If you're using IntelliJ, you should have already learned how to do this by now.

115
00:08:43.380 --> 00:08:43.890
All right.

116
00:08:43.890 --> 00:08:47.880
The first request we're going to make will be on local host 8080.

117
00:08:49.400 --> 00:08:51.620
The handler method intercepts the request.

118
00:08:51.620 --> 00:08:53.840
And if I step over this line.

119
00:08:54.590 --> 00:09:02.630
It adds data to the model such that the categories key maps to an array of string values.

120
00:09:02.810 --> 00:09:08.450
And then right before we return, the form finally has access to all of this model data.

121
00:09:10.080 --> 00:09:15.300
So here we're using a variable expression to grab the categories array inside of the model.

122
00:09:15.300 --> 00:09:22.290
And what it's going to do is for each category in the categories array, it's going to generate an option

123
00:09:22.290 --> 00:09:28.260
and the option that gets generated will equal a text that matches the current category that's being

124
00:09:28.260 --> 00:09:29.310
iterated through.

125
00:09:29.310 --> 00:09:35.130
And that same option is going to equal a value that matches the text being displayed.

126
00:09:36.930 --> 00:09:39.730
There are three categories that were looping through.

127
00:09:39.750 --> 00:09:43.530
So finally, each is going to generate three options.

128
00:09:43.800 --> 00:09:44.820
Press next.

129
00:09:47.020 --> 00:09:48.550
And it does just that.

130
00:09:50.320 --> 00:09:53.020
Let's make that same request on slash inventory.

131
00:09:55.470 --> 00:09:57.030
Nothing too crazy here.

132
00:09:57.390 --> 00:09:59.730
It just makes a request on slash inventory.

133
00:10:00.450 --> 00:10:04.710
This handler method intercepts it and it just returns the inventory view.

