WEBVTT
1
00:00:00.090 --> 00:00:01.620
Welcome to this breakpoint session.

2
00:00:01.620 --> 00:00:05.400
I'm going to start off by running the application and debug mode.

3
00:00:17.040 --> 00:00:24.660
And before I actually end up adding any breakpoints, what I'm going to do is populate the data store

4
00:00:24.660 --> 00:00:25.770
with some data.

5
00:00:26.130 --> 00:00:29.100
So I'll wait for the request to get processed.

6
00:00:29.100 --> 00:00:35.730
We'll say Harry C minus potions, we'll add another grade, go back to local host 8080.

7
00:00:35.760 --> 00:00:37.620
We'll add another gate for her mini.

8
00:00:38.560 --> 00:00:39.790
Press submit.

9
00:00:39.970 --> 00:00:44.050
And I think now we're ready to apply some breakpoints.

10
00:00:44.320 --> 00:00:49.090
I'm going to add breakpoints pretty much in every single handler method.

11
00:00:51.620 --> 00:00:58.610
We'll add some and get grades some and get great index just for the purpose of tracing the runtime.

12
00:00:58.640 --> 00:01:04.459
I already added a throwaway print line function here just for the sake of putting a breakpoint.

13
00:01:04.700 --> 00:01:06.290
Set name, set.

14
00:01:06.290 --> 00:01:08.120
Subject, set, score.

15
00:01:08.360 --> 00:01:08.780
All right.

16
00:01:08.780 --> 00:01:12.320
Those are all the breakpoints that I want to apply.

17
00:01:12.650 --> 00:01:18.200
And so now what I'm going to do is starting from the very top, make another get request on localhost,

18
00:01:18.200 --> 00:01:19.790
88 slash grades.

19
00:01:20.390 --> 00:01:26.430
The first breakpoint hits and the request maps to the handler method get grades.

20
00:01:26.450 --> 00:01:32.030
The handler method adds an attribute to the model grades that maps to an array list.

21
00:01:33.980 --> 00:01:35.420
If I press continue.

22
00:01:36.050 --> 00:01:37.550
Now, the model has data.

23
00:01:37.550 --> 00:01:43.190
If I drill into it, you'll notice a string key called grades that maps to a value.

24
00:01:43.190 --> 00:01:46.160
That's an array list with two grade objects.

25
00:01:48.360 --> 00:01:54.090
As the handler method is about to return the grades template, it's going to first send over all of

26
00:01:54.090 --> 00:01:57.480
that model data to our thin leaf templates.

27
00:01:57.480 --> 00:02:04.260
Inside the template file leaf is going to generate as many table rows as there are elements inside of

28
00:02:04.260 --> 00:02:05.310
the array list.

29
00:02:05.610 --> 00:02:12.210
For every grade object that it loops through, it generates a row that shares the exact same name,

30
00:02:12.210 --> 00:02:19.650
the exact same subject, and the same score, as well as an update button whose link is connected to

31
00:02:19.650 --> 00:02:20.880
that grade's name.

32
00:02:21.300 --> 00:02:25.500
There are two grades, so Leaf is going to generate two rows.

33
00:02:26.330 --> 00:02:28.010
As you can clearly see over here.

34
00:02:29.610 --> 00:02:32.010
Now if I pressed the first button.

35
00:02:33.550 --> 00:02:39.460
It's going to make a request to local host 8080 passing back the student name.

36
00:02:40.090 --> 00:02:45.790
The handler method intercepted the get request and it received the request parameter inside of a variable

37
00:02:45.790 --> 00:02:47.050
called string name.

38
00:02:50.120 --> 00:02:55.310
Now if I step inside get grayed index by just pressing continue.

39
00:02:57.570 --> 00:03:02.570
It's going to eventually find a great object that matches this name parameter.

40
00:03:02.580 --> 00:03:05.050
It should be the object that index zero.

41
00:03:05.070 --> 00:03:08.010
So eventually it will return and zero.

42
00:03:12.730 --> 00:03:14.470
And it did return the index.

43
00:03:14.470 --> 00:03:18.030
It grabbed the object at that index and added it to the model.

44
00:03:18.040 --> 00:03:19.960
You can check the model itself.

45
00:03:19.960 --> 00:03:24.970
You can see that we have a great key that maps to Harry's great object.

46
00:03:26.820 --> 00:03:32.820
As the handler method is about to return the form template first it sends over the model data.

47
00:03:33.620 --> 00:03:38.330
The form element is going to look inside the model for a great object.

48
00:03:39.100 --> 00:03:46.060
This great object is bound to this form and every underlying field is bound to a form input.

49
00:03:46.090 --> 00:03:51.580
The fields are populated, so it follows that the form is going to be populated as well.

50
00:03:53.570 --> 00:03:55.010
As you can clearly see here.

51
00:03:55.730 --> 00:04:01.940
Now, if I were to change this to a D-minus, when you submit the form.

52
00:04:03.250 --> 00:04:06.850
A post request is going to carry that data to the back end.

53
00:04:06.880 --> 00:04:13.900
Now the first thing that happens is the handler method actually receives the post request, and as soon

54
00:04:13.900 --> 00:04:19.130
as it does, you can see that it starts by creating an empty grade object.

55
00:04:19.149 --> 00:04:25.420
So if we go to grade Java, it's already creating an empty grade object using your empty constructor.

56
00:04:25.720 --> 00:04:31.300
And then Spring Boot is smart enough to use your setters and update every field inside of the grade

57
00:04:31.300 --> 00:04:34.000
object with payload from the post request.

58
00:04:34.030 --> 00:04:37.390
It updates the name field with a value from the post request.

59
00:04:38.990 --> 00:04:42.410
It updates the score field with a value from the post request.

60
00:04:43.190 --> 00:04:47.150
And that updates the subject field with a value from the post request.

61
00:04:47.600 --> 00:04:48.470
Nice.

62
00:04:49.910 --> 00:04:55.520
As we step further into the handler method, it's going to call get great index.

63
00:04:56.280 --> 00:05:02.580
The name parameter does match one of the objects in the array list, so this will eventually return

64
00:05:02.580 --> 00:05:03.900
an index of zero.

65
00:05:04.470 --> 00:05:05.670
Let's just step through it.

66
00:05:05.700 --> 00:05:07.280
It does return an index of zero.

67
00:05:07.290 --> 00:05:08.190
That's great.

68
00:05:08.220 --> 00:05:15.570
The index is not equal to -1000, so the block gets executed and it updates the object at that index.

69
00:05:15.570 --> 00:05:21.030
So now instead of having a C minus, Harry will have a D minus.

70
00:05:21.420 --> 00:05:26.850
And then after we've successfully submitted the form, whether it's an addition, whether it's an update,

71
00:05:26.850 --> 00:05:31.500
we redirect the client to make a get request on slash grades.

72
00:05:31.500 --> 00:05:32.400
So.

73
00:05:33.190 --> 00:05:35.170
Then get grades is going to get called.

74
00:05:35.170 --> 00:05:38.080
It's going to add the updated array list to the model.

75
00:05:39.810 --> 00:05:46.110
Here we now see a key value pair where the grade's key maps to our updated array list.

76
00:05:47.620 --> 00:05:53.560
And as the handler method is about to render the grades view first, it sends over the model data to

77
00:05:53.560 --> 00:06:00.640
grades or HTML and finally is going to generate a table with the rows that reflect the newly updated

78
00:06:00.640 --> 00:06:01.490
array list.

79
00:06:01.510 --> 00:06:04.510
So if I go and press that final continue button.

80
00:06:06.510 --> 00:06:07.980
We see the change.

81
00:06:09.950 --> 00:06:10.760
And that's really it.

82
00:06:10.790 --> 00:06:13.160
I hope you enjoyed this breakpoint session.

83
00:06:13.160 --> 00:06:14.810
I'll see you in the next lesson.

