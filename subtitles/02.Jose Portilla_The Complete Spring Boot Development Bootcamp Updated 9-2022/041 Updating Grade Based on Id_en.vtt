WEBVTT
1
00:00:00.600 --> 00:00:03.690
We need to give each grade a unique ID field.

2
00:00:07.140 --> 00:00:10.650
Right now we're updating each grade based on the student's name.

3
00:00:11.100 --> 00:00:13.860
What if I want to add another grade for Harry?

4
00:00:16.340 --> 00:00:17.510
We'll say, Harry.

5
00:00:19.070 --> 00:00:22.850
We'll give him a C-plus and Quidditch.

6
00:00:24.930 --> 00:00:30.360
Instead of adding another grade, it updates his grade and potions to a grade in Quidditch.

7
00:00:36.610 --> 00:00:42.910
Updating a grade based on a name is clearly not a good idea because it's this piece of logic right here

8
00:00:42.910 --> 00:00:43.900
that's flawed.

9
00:00:45.350 --> 00:00:49.400
So in this lesson, you will update grades based on a unique ID field.

10
00:00:52.250 --> 00:00:57.950
That being said, we do not need the complete constructor right now so we can get rid of it to avoid

11
00:00:57.950 --> 00:00:58.910
confusion.

12
00:00:59.630 --> 00:01:04.730
And now what I'm going to do is add an ID field, private string ID.

13
00:01:05.570 --> 00:01:12.680
Every time a new grade object is created, we're going to set the ID field equal to a random unique

14
00:01:12.680 --> 00:01:13.690
identifier.

15
00:01:13.700 --> 00:01:19.580
So we'll say this dot ID is equal to a universal unique identifier.

16
00:01:19.610 --> 00:01:23.510
A random universal unique identifier to string.

17
00:01:26.350 --> 00:01:33.610
Random UUID uses a complex algorithm to create a universally unique identifier and then to string returns

18
00:01:33.610 --> 00:01:34.510
it as a string.

19
00:01:34.990 --> 00:01:41.740
Ultimately, this ensures that the ID field of every grade object that gets created remains unique.

20
00:01:42.780 --> 00:01:43.190
Okay.

21
00:01:43.230 --> 00:01:47.790
And now, because this field is private, we can't forget to give it a getter and setter.

22
00:01:48.630 --> 00:01:49.320
Java code.

23
00:01:49.320 --> 00:01:50.430
Generators.

24
00:01:50.790 --> 00:01:52.140
Getters and setters.

25
00:01:54.970 --> 00:02:01.210
And now when the user presses the update button, the parameter that they should pass back is the ID.

26
00:02:01.780 --> 00:02:04.840
ID is equal to gray dot ID.

27
00:02:06.090 --> 00:02:10.500
The Get request is going to carry an ID field that matches a great object.

28
00:02:10.500 --> 00:02:17.010
So it follows that the get mapping method should expect an ID, not a name.

29
00:02:19.060 --> 00:02:24.430
It's going to try to retrieve a grade object based on an ID not name.

30
00:02:25.580 --> 00:02:29.000
Do the same thing inside submit form.

31
00:02:30.290 --> 00:02:31.880
Dot get id.

32
00:02:34.870 --> 00:02:37.420
String ID here.

33
00:02:37.420 --> 00:02:43.060
We're going to get the idea of every student grade and we're going to check if it equals the ID that's

34
00:02:43.060 --> 00:02:44.110
being passed in.

35
00:02:44.290 --> 00:02:46.300
If that's the case, return it's index.

36
00:02:46.300 --> 00:02:50.770
Otherwise return -1000 and that's really it.

37
00:02:51.160 --> 00:02:53.260
We're going to rerun our application.

38
00:02:53.260 --> 00:02:55.030
Well, it already rerun.

39
00:02:55.030 --> 00:02:57.520
Let's populate our table with data.

40
00:02:57.880 --> 00:03:03.550
We'll say Harry C minus potions, creating a new grade.

41
00:03:04.090 --> 00:03:05.950
And now if you press update.

42
00:03:07.110 --> 00:03:15.300
It makes a request to local host 8080 while carrying the object ID and each input in the field binds

43
00:03:15.300 --> 00:03:16.460
to one of the objects.

44
00:03:16.470 --> 00:03:17.250
Fields.

45
00:03:17.250 --> 00:03:18.090
Perfect.

46
00:03:18.090 --> 00:03:19.260
But there is an issue.

47
00:03:25.710 --> 00:03:27.540
Upon form submission.

48
00:03:27.540 --> 00:03:31.080
Springwood creates an empty grade object using your empty constructor.

49
00:03:34.860 --> 00:03:39.660
The empty constructor is going to generate a new ID for this great object.

50
00:03:41.620 --> 00:03:45.730
So the data from the Post request updates the three other fields.

51
00:03:49.110 --> 00:03:52.740
But the new ID doesn't match what's inside the data store.

52
00:04:00.070 --> 00:04:02.530
There's a very simple workaround.

53
00:04:03.660 --> 00:04:09.570
What you're going to have to do is add another input to the form, and this input is going to bind to

54
00:04:09.570 --> 00:04:11.520
the grade ID field.

55
00:04:15.460 --> 00:04:17.110
You can remove everything else.

56
00:04:18.980 --> 00:04:22.660
And so now the Post request is going to send back four fields.

57
00:04:22.670 --> 00:04:28.670
So even if the empty constructor generates a new ID for this grade, the data from the post request

58
00:04:28.670 --> 00:04:31.190
is going to re update all four fields.

59
00:04:35.920 --> 00:04:38.170
So if you were to try it now.

60
00:04:40.050 --> 00:04:40.770
You know what?

61
00:04:40.770 --> 00:04:45.390
Let's rerun the application so that we can start from a clean slate.

62
00:04:54.470 --> 00:04:55.840
We'll say a local host.

63
00:04:55.850 --> 00:04:56.900
80, 80.

64
00:05:03.150 --> 00:05:03.870
Harry.

65
00:05:04.860 --> 00:05:05.910
A-minus.

66
00:05:06.420 --> 00:05:07.470
Charms.

67
00:05:08.660 --> 00:05:09.870
Remember this ID?

68
00:05:13.530 --> 00:05:14.880
We'll press submit.

69
00:05:15.300 --> 00:05:17.010
And if you press update.

70
00:05:20.620 --> 00:05:23.320
Notice that the IDs are consistent.

71
00:05:23.620 --> 00:05:24.610
Perfect.

72
00:05:26.040 --> 00:05:32.340
I'll update his grade to C-minus and the update works.

73
00:05:35.100 --> 00:05:40.500
The Handler method was able to match the object's ID to one of the objects in the array list.

74
00:05:44.860 --> 00:05:48.430
It updates the array list and finally takes care of the rest.

75
00:05:49.120 --> 00:05:52.120
Now going back to local host 8080.

76
00:05:56.810 --> 00:06:01.310
The form containing four inputs sends back four fields in the post request.

77
00:06:01.700 --> 00:06:06.590
Spring Boot creates an empty grade object using your empty constructor, which automatically generates

78
00:06:06.590 --> 00:06:11.660
a new ID, but as post requests data as populating the object's fields.

79
00:06:14.970 --> 00:06:18.480
It also overrides the ID field with the correct value.

80
00:06:23.750 --> 00:06:29.990
But having an ID input is really ugly and the user shouldn't be allowed to access it.

81
00:06:30.170 --> 00:06:34.280
You can hide an HTML element using type equals hidden.

82
00:06:40.790 --> 00:06:41.960
Equals hidden.

83
00:06:48.480 --> 00:06:50.020
And everything should still work.

84
00:06:50.040 --> 00:06:52.200
We'll add a new grade for her mighty.

85
00:06:52.980 --> 00:06:57.630
Score a plus arithmetic, press submit.

86
00:06:57.870 --> 00:07:03.690
And now I'm going to go back and update Harry's grade to D.

87
00:07:03.690 --> 00:07:09.930
Plus, everything works perfectly if I try to give Harry a grade in Quidditch.

88
00:07:10.620 --> 00:07:12.930
Harry A-plus.

89
00:07:13.500 --> 00:07:14.490
Quidditch.

90
00:07:15.930 --> 00:07:17.340
Finally the bug is gone.

91
00:07:17.370 --> 00:07:20.580
The name field has no association with updates.

92
00:07:22.810 --> 00:07:26.710
So to recap in this lesson, you updated a grade based on its ID.

