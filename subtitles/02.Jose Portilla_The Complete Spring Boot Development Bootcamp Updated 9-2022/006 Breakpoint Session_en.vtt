WEBVTT
1
00:00:00.420 --> 00:00:06.060
Hello and welcome to another breakpoint session and it always helps to trace the runtime to understand

2
00:00:06.060 --> 00:00:07.530
exactly what's going on.

3
00:00:07.530 --> 00:00:12.960
So here I'm going to place a breakpoint on step number two where we're calling the method that we want

4
00:00:12.960 --> 00:00:13.770
to test.

5
00:00:14.070 --> 00:00:21.240
And the purpose of the unit test is to check if grade service get grades is able to successfully retrieve

6
00:00:21.240 --> 00:00:23.010
the grades from the repository.

7
00:00:23.700 --> 00:00:27.180
So what I'll do is I will debug this test.

8
00:00:28.610 --> 00:00:35.470
It's going to stop at this breakpoint and then I will step inside of grade service to get grades here.

9
00:00:35.480 --> 00:00:38.570
All it's doing is calling grade grades.

10
00:00:38.570 --> 00:00:45.680
And we already mocked grade reports, get grades to return an array list of two grade objects when it's

11
00:00:45.680 --> 00:00:46.340
called.

12
00:00:50.100 --> 00:00:57.000
So ultimately this is just going to return an array list of two objects and then get grades is going

13
00:00:57.000 --> 00:01:01.380
to quote unquote successfully get the grades from the grade repo.

14
00:01:03.060 --> 00:01:09.180
So here we can see that grade service get grades was able to successfully grab the two grade objects

15
00:01:09.180 --> 00:01:13.410
from the repo and then we stored the ArrayList in a result.

16
00:01:13.410 --> 00:01:18.870
But the step in where we make sure that grade service that get grades is behaving correctly is in the

17
00:01:18.870 --> 00:01:27.210
third step where we make assertions first, we assert, we verify that the name at index zero of the

18
00:01:27.210 --> 00:01:29.280
result, we expect it to be hairy.

19
00:01:29.610 --> 00:01:35.120
And then we also assert that the subject at index, one of our result should be arithmetic.

20
00:01:35.130 --> 00:01:35.500
See.

21
00:01:35.640 --> 00:01:41.190
So if both of these assertions pass, that means our method is behaving correctly.

22
00:01:41.190 --> 00:01:43.140
The test passes, so we're good.

23
00:01:45.280 --> 00:01:46.480
Now I know what you're thinking.

24
00:01:46.510 --> 00:01:48.150
Of course this was going to work.

25
00:01:48.160 --> 00:01:55.810
All get grades is doing is returning data that we mocked and you would be right and not wanting to test

26
00:01:55.810 --> 00:02:03.250
this method in fact you shouldn't because if you test methods like this, then all you're doing is cluttering

27
00:02:03.250 --> 00:02:06.820
your grade service test class with meaningless tests.

28
00:02:06.820 --> 00:02:13.120
So in real life you wouldn't want to test methods like this because there would be no room for bugs

29
00:02:13.120 --> 00:02:14.350
to creep into them.

30
00:02:14.620 --> 00:02:19.300
But a method like get great index is easy to mess up.

31
00:02:19.300 --> 00:02:25.030
Instead of saying get ID, you might say get a name or something which might be a bug that's really,

32
00:02:25.030 --> 00:02:30.370
really hard to spot unless you pull your hairs out and then eventually find out that you made a typo.

33
00:02:30.400 --> 00:02:33.760
But with unit tests, we don't have to worry about this.

34
00:02:33.760 --> 00:02:38.410
We can test every meaningful method that provides meaningful logic.

35
00:02:38.470 --> 00:02:45.130
So this unit test will make sure when get great index is called upon receiving an ID that is valid,

36
00:02:45.130 --> 00:02:51.520
it will return the correct index of this object and when it's given a bad ID it will return a not found

37
00:02:51.520 --> 00:02:52.090
value.

38
00:02:53.220 --> 00:02:58.320
So let's play some breakpoints and then I will debug this test.

39
00:03:01.760 --> 00:03:04.040
I'll step inside, get great service dog.

40
00:03:04.100 --> 00:03:05.570
Get great index.

41
00:03:06.640 --> 00:03:07.960
We don't care about that.

42
00:03:07.960 --> 00:03:09.160
Step out.

43
00:03:09.820 --> 00:03:13.510
Now, if I press step in again, it's going to go in here.

44
00:03:14.740 --> 00:03:15.260
Okay.

45
00:03:15.280 --> 00:03:17.710
Here we're calling get grids.

46
00:03:19.110 --> 00:03:22.970
And get grades, calls, grades, get grades.

47
00:03:22.980 --> 00:03:30.540
We already mocked grade reports, get grades to return an ArrayList of one grade object.

48
00:03:32.010 --> 00:03:33.690
So if I step over.

49
00:03:34.920 --> 00:03:40.830
Here we can see that get grades ultimately returned in array list of one grade object exactly as we

50
00:03:40.830 --> 00:03:41.550
mocked it.

51
00:03:41.550 --> 00:03:44.700
So this loop is only going to run once.

52
00:03:46.190 --> 00:03:49.340
Here we're calling get grade at index zero.

53
00:03:50.440 --> 00:03:51.940
If I step inside.

54
00:03:52.890 --> 00:03:54.330
It's going to call grade repo.

55
00:03:54.330 --> 00:03:58.560
I get grade at index zero and we already marked grade three.

56
00:03:58.980 --> 00:04:03.480
Get grade at index zero to return our grade object.

57
00:04:05.290 --> 00:04:08.080
So if I step over the following method.

58
00:04:08.930 --> 00:04:11.540
It returns the great object for Harry.

59
00:04:11.570 --> 00:04:15.320
Here we see his ID name, score and subject.

60
00:04:15.530 --> 00:04:24.110
And now get grade index is going to successfully compare the ID of the grade in our data store against

61
00:04:24.110 --> 00:04:27.770
the ID that's passed in and return the correct index.

62
00:04:27.770 --> 00:04:31.370
So if everything works out, it should return an index of zero.

63
00:04:32.930 --> 00:04:34.430
And indeed it does.

64
00:04:34.460 --> 00:04:38.450
We're storing this index inside of a variable called valid.

65
00:04:39.730 --> 00:04:42.730
And then we're calling great service, great index.

66
00:04:42.730 --> 00:04:45.640
Again, passing in a value of 1 to 3.

67
00:04:47.700 --> 00:04:54.690
So here, get grades, calls, grade reports, get grades, which was marked to return an ArrayList

68
00:04:54.690 --> 00:04:56.010
of one object.

69
00:04:56.310 --> 00:04:58.290
That's exactly what it does.

70
00:05:00.160 --> 00:05:01.660
Inside the for loop.

71
00:05:01.780 --> 00:05:03.430
We're grabbing the object.

72
00:05:03.430 --> 00:05:04.690
That index I.

73
00:05:04.930 --> 00:05:06.910
I'll step inside of get grade.

74
00:05:07.890 --> 00:05:12.270
And we marked get graded index zero to return the following grade.

75
00:05:13.340 --> 00:05:20.810
And so here it compares the grades ID against the ID that was passed in its they're not equal.

76
00:05:20.810 --> 00:05:23.270
So this statement will not execute.

77
00:05:24.360 --> 00:05:26.970
Instead it will return consonants not found.

78
00:05:27.480 --> 00:05:32.870
And then here we make assertions to verify that the methods did work as intended.

79
00:05:32.880 --> 00:05:36.570
We expect the valid value to be zero.

80
00:05:37.260 --> 00:05:41.250
We expect the not found value to equal constance dot not found.

81
00:05:41.820 --> 00:05:45.390
That is the case and our test passes.

82
00:05:45.510 --> 00:05:49.800
Now I'll leave it to you to breakpoint the remaining tests.

83
00:05:49.800 --> 00:05:52.620
If I breakpoint all of them, this would take forever.

84
00:05:52.620 --> 00:05:59.400
But I hope you were able to see just how we're able to mock what the grade repo can or can't return

85
00:05:59.400 --> 00:06:03.450
so that we can test great services methods and complete isolation.

86
00:06:03.900 --> 00:06:04.440
All right.

87
00:06:04.440 --> 00:06:08.130
See you in the next lesson where we cover integration testing.

