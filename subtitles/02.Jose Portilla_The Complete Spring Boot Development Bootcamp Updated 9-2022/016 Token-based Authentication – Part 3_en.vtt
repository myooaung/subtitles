WEBVTT
1
00:00:00.180 --> 00:00:05.970
The moment the user decides to authenticate our first filter is attempt authentication method is going

2
00:00:05.970 --> 00:00:10.740
to get called and it's going to extract the username and password from the request and from it.

3
00:00:10.740 --> 00:00:13.320
Create an authentication object.

4
00:00:14.510 --> 00:00:20.000
And once we create an authentication object, we need to pass it into the authentication manager.

5
00:00:20.360 --> 00:00:26.150
The authentication manager is a class that will contain a method responsible for authenticating a user

6
00:00:26.150 --> 00:00:27.250
or turning them away.

7
00:00:27.260 --> 00:00:31.670
And with this method we'll do is extract the credentials from the authentication object.

8
00:00:31.670 --> 00:00:37.520
And if there is a match, if the credentials that were passed in match a user in our records, we're

9
00:00:37.520 --> 00:00:40.160
going to return the authentication object.

10
00:00:41.140 --> 00:00:44.800
And the simple act of returning the authentication object.

11
00:00:44.800 --> 00:00:50.560
Spring is going to interpret as a successful authentication, which in turn is going to invoke the successful

12
00:00:50.560 --> 00:00:54.670
authentication method, which will then return a JWT token.

13
00:00:54.670 --> 00:00:59.370
And the JWT token is an access token that the user can then use to make requests.

14
00:00:59.380 --> 00:01:00.610
We'll get to that later.

15
00:01:00.850 --> 00:01:05.680
First thing is first inside the security folder, go to your custom authentication manager.

16
00:01:05.680 --> 00:01:12.700
And what this will do is implement the authentication manager interface.

17
00:01:12.700 --> 00:01:18.010
And upon doing so, we're going to override the authenticate method that we talked about earlier.

18
00:01:18.700 --> 00:01:25.300
And you'll remember that when the authentication filter tries to authenticate, it needs to extract

19
00:01:25.300 --> 00:01:31.030
the username and password, which we just did, and from them create an authentication object which

20
00:01:31.030 --> 00:01:36.730
we then pass into our authentication manager, which will then take care of the authentication process.

21
00:01:36.730 --> 00:01:38.470
So let's do just that.

22
00:01:38.680 --> 00:01:47.740
You can create an authentication object, authentication by creating a new username password authentication

23
00:01:47.740 --> 00:01:48.430
token.

24
00:01:48.430 --> 00:01:52.900
Here we see principal and credentials principal identifies the user.

25
00:01:52.900 --> 00:01:58.390
So here we're going to say user get username and credentials is most often a password.

26
00:01:58.390 --> 00:02:01.720
So here we're going to say user dot get password.

27
00:02:03.850 --> 00:02:04.300
Cool.

28
00:02:04.300 --> 00:02:11.200
And now we have to create a new object of the authentication manager and call it, but we're not going

29
00:02:11.200 --> 00:02:12.550
to tightly couple our apps.

30
00:02:12.550 --> 00:02:21.310
So let's make this into a bean which we can then auto wire and to authentication filter or we have Lombok,

31
00:02:21.310 --> 00:02:29.320
we'll just say all ARGs constructor and then we will inject our authentication manager over here.

32
00:02:30.550 --> 00:02:31.960
And now we can say.

33
00:02:33.470 --> 00:02:35.000
Authentication manager.

34
00:02:36.360 --> 00:02:40.740
Dot authenticate passing in our authentication object.

35
00:02:41.950 --> 00:02:42.550
All right.

36
00:02:42.550 --> 00:02:45.340
So step number one is now complete.

37
00:02:45.370 --> 00:02:45.940
All right.

38
00:02:45.940 --> 00:02:49.420
And now we can get rid of this generic return keyword.

39
00:02:49.450 --> 00:02:56.950
What we're going to return is the authentication object that the authentication manager itself is going

40
00:02:56.950 --> 00:03:00.250
to return upon successful authentication.

41
00:03:00.430 --> 00:03:08.110
And once we do that, once we return the authentication object, then a special method called successful

42
00:03:08.140 --> 00:03:13.310
authentication is going to get invoked, which we will deal with in the next video.

43
00:03:13.330 --> 00:03:17.770
But for now, let us address an error that we currently have.

44
00:03:17.800 --> 00:03:25.240
So if I go inside of security config, it's expecting an authentication manager inside of the constructor

45
00:03:25.240 --> 00:03:26.870
for authentication filter.

46
00:03:26.890 --> 00:03:33.430
So what I'll do over here is I'm going to inject the authentication manager.

47
00:03:34.220 --> 00:03:34.400
Here.

48
00:03:34.400 --> 00:03:35.540
Let's be more specific.

49
00:03:35.570 --> 00:03:37.670
Custom Authentication Manager.

50
00:03:37.670 --> 00:03:39.650
Custom Authentication Manager.

51
00:03:40.580 --> 00:03:41.660
Passing that in.

52
00:03:43.740 --> 00:03:47.670
And for the sake of being consistent, let's do the same thing over here, even though it's still going

53
00:03:47.670 --> 00:03:49.050
to work thanks to polymorphism.

54
00:03:49.050 --> 00:03:51.840
But it's good to be consistent no matter what you do.

55
00:03:52.320 --> 00:04:00.570
And so going back into our security pipeline, when a user tries to authenticate, it's going to extract

56
00:04:00.570 --> 00:04:06.450
the credentials, wrap them up in an object, pass that into the authentication manager.

57
00:04:06.450 --> 00:04:09.390
Inside of the authentication manager.

58
00:04:09.390 --> 00:04:16.829
What we then want to do is extract these credentials and compare them against what we have in our database

59
00:04:16.829 --> 00:04:23.460
and similar to how we have service implementations for all the other entities, we have a user service

60
00:04:23.460 --> 00:04:24.660
implementation as well.

61
00:04:24.660 --> 00:04:30.780
Now if you were one of the unlucky students that downloaded the resources really early on into the course,

62
00:04:30.780 --> 00:04:36.060
I made the mistake of calling this unwrapped student by accident where it should actually be unwrap

63
00:04:36.060 --> 00:04:36.360
user.

64
00:04:36.360 --> 00:04:41.670
Of course I recently made the correction and updated your GitHub resources, so if what you have is

65
00:04:41.670 --> 00:04:44.190
exactly what you're seeing over here, then not to worry.

66
00:04:44.190 --> 00:04:45.300
Let's just keep going.

67
00:04:45.300 --> 00:04:51.360
But if you do see Unwrapped student, then obviously you make sure to change it to the appropriate name.

68
00:04:51.750 --> 00:04:58.350
All right, so over here, what we're missing is a method that can get a user based on their user name.

69
00:04:58.350 --> 00:05:05.610
So inside of the interface, we're going to make sure that any implementation of this interface also

70
00:05:05.610 --> 00:05:08.100
overrides a get user method.

71
00:05:08.100 --> 00:05:11.640
But this one is going to expect a string username.

72
00:05:11.940 --> 00:05:19.620
So back over here, we can override the overloaded get user method, but this one accepts expects a

73
00:05:19.620 --> 00:05:20.880
string username.

74
00:05:20.880 --> 00:05:27.930
And if you go to the user repository, this returns a user where it should actually be returning an

75
00:05:27.930 --> 00:05:33.180
optional because we are not certain if the username they pass in will be valid.

76
00:05:33.180 --> 00:05:37.830
Will find by actually find a user based on the username they pass in.

77
00:05:37.830 --> 00:05:39.270
We will never know.

78
00:05:39.270 --> 00:05:45.060
That's why you make it optional in order to tell the user hey, you might be at risk of getting a null,

79
00:05:45.060 --> 00:05:52.530
so please unwrap the optional safely so we can say user repository over here dot find by username.

80
00:05:52.650 --> 00:05:59.760
This gives us back an optional so we can say optional user user.

81
00:06:00.630 --> 00:06:01.750
Equal to the following.

82
00:06:01.750 --> 00:06:04.600
And what we're going to return is the unwrapped user.

83
00:06:05.760 --> 00:06:11.520
Uh, this expects an ID, and I don't feel like overloading this method as well, so.

84
00:06:11.550 --> 00:06:12.570
And you know what?

85
00:06:12.570 --> 00:06:15.160
What I'll do is I'll just put a 400 for long.

86
00:06:15.180 --> 00:06:15.940
Over here.

87
00:06:15.960 --> 00:06:20.850
All that's going to do is append a404 into the error message.

88
00:06:20.880 --> 00:06:23.090
Doesn't really matter all that much.

89
00:06:23.100 --> 00:06:29.010
You can feel free to change the implementation if you would like, but I'm going to move on.

90
00:06:29.010 --> 00:06:34.380
So now we have a method that can retrieve a user based on a username.

91
00:06:34.380 --> 00:06:39.660
So back to our authentication manager, we're going to grab that user.

92
00:06:40.980 --> 00:06:44.150
We're going to say user.

93
00:06:45.430 --> 00:06:47.030
User is equal to.

94
00:06:47.050 --> 00:06:49.060
Why doesn't it auto import?

95
00:06:49.090 --> 00:06:50.050
That's strange.

96
00:06:50.800 --> 00:06:51.490
There we are.

97
00:06:51.520 --> 00:06:52.120
User.

98
00:06:52.120 --> 00:06:53.710
User is equal to.

99
00:06:53.740 --> 00:06:57.730
We'll have to auto wire the user service implementation.

100
00:06:57.730 --> 00:07:07.420
Let's just say all args constructor and then user service implementation, user service implementation.

101
00:07:07.420 --> 00:07:12.070
And we also need to auto wire the script password encoder, but we'll talk about that later.

102
00:07:12.070 --> 00:07:15.400
So user user is equal to user service implementation.

103
00:07:16.030 --> 00:07:22.330
And you know what, let's be more general for the sake of loose coupling, because sometimes you can

104
00:07:22.330 --> 00:07:24.920
have many implementations of the same interface.

105
00:07:24.940 --> 00:07:30.430
The reason I was very specific with my authentication manager is to enforce that this one in particular

106
00:07:30.460 --> 00:07:32.320
gets invoked anyways.

107
00:07:32.320 --> 00:07:34.000
Not too big of a problem.

108
00:07:34.000 --> 00:07:39.330
We're just going to get the user based on the user name inside of the authentication object.

109
00:07:39.340 --> 00:07:42.970
You'll remember that we saved the user name inside of principle.

110
00:07:42.970 --> 00:07:49.720
So what we can do over here access the username by just saying authentication dot get name.

111
00:07:50.320 --> 00:07:54.090
And now let's assume that the username they pass in is invalid.

112
00:07:54.100 --> 00:07:56.020
Do we have to handle it over here?

113
00:07:56.020 --> 00:08:02.440
No, we do not because back inside of the user service, implementation and entity not found exception

114
00:08:02.440 --> 00:08:06.580
will already be thrown if the entity is not present.

115
00:08:06.580 --> 00:08:12.580
So all we have to do is once we're here, we can assume that we actually do have a user because an exception

116
00:08:12.580 --> 00:08:13.450
was not thrown.

117
00:08:13.450 --> 00:08:17.320
All we going to do is check their password and make sure that it's good.

118
00:08:17.320 --> 00:08:25.270
But if you go back to our database when a password is stored, we have no idea what the actual password

119
00:08:25.270 --> 00:08:26.860
is, but that's fine.

120
00:08:26.860 --> 00:08:33.309
We only care that they themselves know the password, and what we can do is apply the same hashing algorithm

121
00:08:33.309 --> 00:08:34.450
to that password.

122
00:08:34.450 --> 00:08:39.760
And if it happens to match what we have in our records, then we know they passed incorrect credentials.

123
00:08:39.760 --> 00:08:50.020
So inside of here, what we can do is inject the B crypt password encoder bin that we have configured

124
00:08:50.020 --> 00:08:51.820
inside of our main class.

125
00:08:52.630 --> 00:08:54.640
You can say Barrett password or encoder.

126
00:08:56.130 --> 00:09:04.110
Now we can say if B crypt password encoder, what we're going to do is check if the hashed version of

127
00:09:04.110 --> 00:09:13.020
the password they pass in matches the password that belongs to this user dot matches authentication.

128
00:09:13.320 --> 00:09:19.650
You'll recall that we stored the user's password that they passed in inside of the credentials.

129
00:09:19.890 --> 00:09:23.790
So if authentication not credentials to string.

130
00:09:24.990 --> 00:09:32.070
If the hashed password here matches the hashed password that was stored inside the database.

131
00:09:32.070 --> 00:09:35.610
So here we'll say user get password.

132
00:09:36.030 --> 00:09:39.150
Then we know that they passed in the correct credentials.

133
00:09:39.150 --> 00:09:46.110
So what I'm going to do actually is check if there isn't a match, then we're going to throw a new bad

134
00:09:46.110 --> 00:09:48.150
credentials exception.

135
00:09:48.510 --> 00:09:52.230
And it's just going to say, I guess the wrong password should be fine.

136
00:09:53.670 --> 00:09:54.180
Now we're back.

137
00:09:54.180 --> 00:10:00.120
Credentials exception is a special exception because it is an authentication exception and it's going

138
00:10:00.120 --> 00:10:02.060
to get handled for you by spring security.

139
00:10:02.070 --> 00:10:03.330
We'll revisit that later.

140
00:10:03.330 --> 00:10:09.000
Anyways, if a user were to pass an invalid credentials, it only makes sense to throw a new bad credentials

141
00:10:09.000 --> 00:10:09.660
exception.

142
00:10:09.660 --> 00:10:17.520
We will come back to this, but if we reach all the way over here, then we know the username and password

143
00:10:17.520 --> 00:10:18.540
were correct.

144
00:10:18.540 --> 00:10:23.670
So we're going to send back an authentication object, return a new username.

145
00:10:25.260 --> 00:10:27.540
Password authentication token.

146
00:10:28.950 --> 00:10:35.010
With the same credentials as before authentication, get name and know what it might just be easier

147
00:10:35.010 --> 00:10:35.640
to say.

148
00:10:35.640 --> 00:10:37.500
User get password over here.

149
00:10:37.500 --> 00:10:40.560
They do match so doesn't really matter where we get it from.

150
00:10:41.190 --> 00:10:42.480
All right.

151
00:10:43.140 --> 00:10:49.860
And by virtue of returning this authentication object, it's going to get a return over here, which

152
00:10:49.890 --> 00:10:52.590
implies that the authentication worked.

153
00:10:52.590 --> 00:10:58.560
And what that's going to do is invoke the successful authentication method that I'm just going to override

154
00:10:58.560 --> 00:10:59.580
right now.

155
00:10:59.940 --> 00:11:01.980
And we do not need to call the parent method.

156
00:11:01.980 --> 00:11:04.980
We're going to be doing our own implementation over here.

157
00:11:06.000 --> 00:11:06.750
You know what?

158
00:11:06.750 --> 00:11:09.480
For the demo purposes, let's just print.

159
00:11:10.170 --> 00:11:11.130
Woohoo!

160
00:11:11.880 --> 00:11:13.500
Authentication worked.

161
00:11:17.090 --> 00:11:19.400
All right, let's fix this up.

162
00:11:22.540 --> 00:11:29.680
And in the event that going back here in the event that our bad credentials exception in the event that

163
00:11:29.680 --> 00:11:37.270
an authentication exception is thrown, then what's going to happen is the unsuccessful authentication

164
00:11:37.270 --> 00:11:38.860
method is going to get invoked.

165
00:11:38.860 --> 00:11:40.680
It's almost like magic.

166
00:11:40.690 --> 00:11:42.670
And here we're going to print.

167
00:11:44.330 --> 00:11:44.780
Um.

168
00:11:46.000 --> 00:11:47.110
You know, same thing.

169
00:11:47.110 --> 00:11:51.250
But except instead of voodoo, we'll say, Boo hoo.

170
00:11:55.590 --> 00:11:59.790
Och, I think we are looking really, really good.

171
00:12:00.000 --> 00:12:01.800
Let's try all of this out.

172
00:12:01.830 --> 00:12:06.780
I'm going to re-enable all of my breakpoints while as soon as I run my app in debug mode.

173
00:12:13.000 --> 00:12:15.590
Do I have breakpoints in my manager?

174
00:12:15.610 --> 00:12:16.780
I do.

175
00:12:17.950 --> 00:12:18.490
All right.

176
00:12:18.500 --> 00:12:19.480
Think we're good?

177
00:12:21.220 --> 00:12:24.790
So the first thing we have to do is register a user.

178
00:12:24.820 --> 00:12:26.620
Why is that there?

179
00:12:27.280 --> 00:12:28.030
That's odd.

180
00:12:28.180 --> 00:12:31.360
Anyways, first thing we're going to do is register a user.

181
00:12:33.210 --> 00:12:34.230
201 created.

182
00:12:34.230 --> 00:12:35.430
Let's make sure.

183
00:12:38.260 --> 00:12:38.920
We're looking good.

184
00:12:38.920 --> 00:12:45.130
We've registered a user known as rain with this respective password, which we which our API does not

185
00:12:45.130 --> 00:12:52.110
know what it is, but it only matters that we know because if we pass in the same password and the hashed

186
00:12:52.120 --> 00:12:58.870
version of that password matches this password here, then we know that they passed in the correct information.

187
00:12:58.870 --> 00:13:01.090
So let's go into our authentication manager.

188
00:13:01.300 --> 00:13:07.480
It's going to apply the same algorithm on the password we pass in and see if it matches the one in our

189
00:13:07.480 --> 00:13:08.440
database.

190
00:13:08.800 --> 00:13:15.970
There is a match, so it returns the authentication object, which was in turn returned over here,

191
00:13:15.970 --> 00:13:19.060
invoking successful authentication, printing.

192
00:13:19.060 --> 00:13:19.690
Woohoo!

193
00:13:19.690 --> 00:13:25.630
And we get a status of 200 because we don't have anything implemented here and there is nothing to report

194
00:13:25.630 --> 00:13:25.810
on.

195
00:13:25.810 --> 00:13:27.880
So the default is 200.

196
00:13:27.880 --> 00:13:32.380
And what if I was to pass in incorrect credentials?

197
00:13:32.530 --> 00:13:33.970
We'll press send.

198
00:13:35.680 --> 00:13:37.930
It's going to go to the authentication manager.

199
00:13:37.930 --> 00:13:44.500
The hashed version of this password is not going to match what we have in our database because, well,

200
00:13:44.560 --> 00:13:45.490
they're different.

201
00:13:45.640 --> 00:13:53.560
So it's going to throw a bad credentials exception, which in turn invokes unsuccessful authentication.

202
00:13:53.560 --> 00:13:57.790
We have a very nice and very clear chain of events going on right now.

203
00:13:58.800 --> 00:14:04.260
The only issue is it also returns a status of 200 because we're not doing anything here to change that.

204
00:14:04.260 --> 00:14:06.770
So we'll be addressing this later.

205
00:14:06.780 --> 00:14:12.030
But there is one bug that I actually want to address before we end this video.

206
00:14:13.360 --> 00:14:16.180
Well, actually, let's test all the scenarios first.

207
00:14:16.210 --> 00:14:18.370
What if I pass in bad fields?

208
00:14:20.010 --> 00:14:25.290
Then this is going to get called, this is going to get thrown, which is then caught by our exception

209
00:14:25.290 --> 00:14:26.450
handler that we set up.

210
00:14:26.460 --> 00:14:33.480
But there is one thing that I don't like, and that is if I pass in a username that doesn't exist in

211
00:14:33.480 --> 00:14:36.010
our database, we can put whatever here.

212
00:14:36.010 --> 00:14:39.420
It doesn't matter if I pass in a username that doesn't exist.

213
00:14:39.420 --> 00:14:40.410
Let's say Carl.

214
00:14:45.070 --> 00:14:50.530
And I'm going to put a breakpoint right here.

215
00:14:55.810 --> 00:14:59.160
A entity not found exception is going to get thrown.

216
00:14:59.170 --> 00:15:02.650
Well, guess where this exception is going to get caught?

217
00:15:02.680 --> 00:15:09.370
It's not going to get caught over here where a not found error code is going to be returned.

218
00:15:09.400 --> 00:15:15.790
It's actually going to get caught in our exception handler filter because it's being thrown from within

219
00:15:15.790 --> 00:15:16.540
a filter.

220
00:15:19.650 --> 00:15:25.740
So we're going to get a response of bad request, and that is not good.

221
00:15:25.770 --> 00:15:28.200
What we need to do is have another catch.

222
00:15:28.200 --> 00:15:35.400
BLOCK That accounts for an entity not found scenario, entity not found exception.

223
00:15:36.110 --> 00:15:39.680
And if that's the case, then I'm just going to return.

224
00:15:42.860 --> 00:15:44.690
Uh, not found.

225
00:15:45.660 --> 00:15:46.980
And then I'll say.

226
00:15:48.280 --> 00:15:51.160
Username doesn't exist.

227
00:15:54.560 --> 00:15:55.880
Let's try this out now.

228
00:15:56.390 --> 00:15:58.220
Put some breakpoints over here.

229
00:15:59.360 --> 00:16:03.500
First we have to register a user because our app restarted.

230
00:16:05.180 --> 00:16:08.330
And I will try logging in as Carl.

231
00:16:12.640 --> 00:16:13.210
All right.

232
00:16:13.210 --> 00:16:19.370
This should end up throwing an exception which gets caught in our exception handling filter.

233
00:16:19.390 --> 00:16:21.040
And beautiful.

234
00:16:21.400 --> 00:16:24.590
It gets caught in the correct catch block.

235
00:16:24.610 --> 00:16:28.000
This is going to say not found and we're going to return.

236
00:16:28.000 --> 00:16:29.980
Username doesn't exist.

237
00:16:30.400 --> 00:16:37.210
We pretty much have our own global exception handler, but purely for filters.

238
00:16:37.780 --> 00:16:38.710
All right.

239
00:16:38.710 --> 00:16:46.570
In the next video, we are going to put our final touches on pathway number two, because we're going

240
00:16:46.570 --> 00:16:54.220
to set up the logic for successful authentication where we send back a JWT and unsuccessful authentication

241
00:16:54.220 --> 00:16:56.800
where we're just going to send back a401.

242
00:16:56.800 --> 00:16:58.930
I cannot wait to see you in there.

