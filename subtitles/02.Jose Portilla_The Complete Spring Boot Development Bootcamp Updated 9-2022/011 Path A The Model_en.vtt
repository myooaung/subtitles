WEBVTT
1
00:00:00.150 --> 00:00:03.900
The model makes up another component of the model view controller design.

2
00:00:06.800 --> 00:00:09.620
The model is data that the controller sends to the view.

3
00:00:11.870 --> 00:00:14.350
Without a model, the view is meaningless.

4
00:00:14.360 --> 00:00:17.540
The view alone offers visual elements, but nothing more.

5
00:00:20.560 --> 00:00:23.380
In this lesson, you will learn about the model component.

6
00:00:25.650 --> 00:00:27.390
Let's go through the whole process.

7
00:00:29.720 --> 00:00:32.000
First the user makes a get to request.

8
00:00:33.190 --> 00:00:36.370
The controller maps the get to request to a handler method.

9
00:00:40.140 --> 00:00:43.060
Step one is courtesy of Spring Boot Magic.

10
00:00:43.080 --> 00:00:45.960
A handler method has direct access to the model.

11
00:00:50.790 --> 00:00:55.110
The Handler method has access to the model directly from its function parameters.

12
00:01:01.490 --> 00:01:06.350
The Handler method can create data in the form of plain old Java objects.

13
00:01:09.200 --> 00:01:11.800
Imagine there is a grade class from it.

14
00:01:11.810 --> 00:01:15.770
The handler method can create three plain old grade objects.

15
00:01:23.770 --> 00:01:27.370
Step three is to store the data in a model attribute.

16
00:01:30.800 --> 00:01:33.710
The Handler method can add an attribute to the model.

17
00:01:33.860 --> 00:01:38.720
The model attribute consists of a key that maps to a chunk of data.

18
00:01:39.620 --> 00:01:40.550
At a high level.

19
00:01:40.550 --> 00:01:44.510
This diagram shows how the handler method can add data to the model.

20
00:01:48.310 --> 00:01:53.110
Once the data is added, the controller sends the model containing all of that data to the view.

21
00:01:56.410 --> 00:01:59.530
Before we get ahead of ourselves, we can start with step one.

22
00:02:00.590 --> 00:02:03.200
Think of a model as a container that holds data.

23
00:02:05.730 --> 00:02:08.190
Every handler method has access to the model.

24
00:02:10.600 --> 00:02:14.800
Courtesy of Spring Boot Magic Handler methods have direct access to the model.

25
00:02:14.830 --> 00:02:18.460
You can access it directly from the methods list of parameters.

26
00:02:22.450 --> 00:02:23.140
Model.

27
00:02:23.140 --> 00:02:24.820
Make sure to import it.

28
00:02:34.390 --> 00:02:37.990
A Hojo class is the simplest type of Java class.

29
00:02:41.890 --> 00:02:44.620
A pod class contains private fields.

30
00:02:46.450 --> 00:02:47.680
Constructors.

31
00:02:49.790 --> 00:02:52.700
As well as public getters and setters for each field.

32
00:02:55.630 --> 00:03:00.100
From a pod class, you can create a plain old Java object.

33
00:03:03.110 --> 00:03:05.450
A podger represents a piece of data.

34
00:03:08.840 --> 00:03:14.480
Looking back at the grades page, each row inside the table needs a piece of data that contains the

35
00:03:14.480 --> 00:03:17.590
student name, the subject and the score.

36
00:03:17.600 --> 00:03:24.320
In any case, because each piece of data needs three fields, what I'm going to do is add a pod class

37
00:03:24.320 --> 00:03:29.240
with three fields, so I'll create a new Java file called Grade.

38
00:03:30.020 --> 00:03:30.680
Java.

39
00:03:34.540 --> 00:03:38.680
And I will create three fields private string name.

40
00:03:43.560 --> 00:03:46.470
Private string subject.

41
00:03:53.670 --> 00:03:56.490
Private string score.

42
00:03:59.610 --> 00:03:59.840
Okay.

43
00:03:59.910 --> 00:04:04.530
Now, what I want you to do is go to the extensions and download.

44
00:04:06.940 --> 00:04:09.490
The Java code generators extension.

45
00:04:11.360 --> 00:04:13.250
I'll give you a couple of seconds to do that.

46
00:04:18.930 --> 00:04:19.350
Okay.

47
00:04:19.380 --> 00:04:25.890
And now what I can do is go to Java code generators and generate a constructor using all fields.

48
00:04:26.940 --> 00:04:29.670
I will generate an empty constructor as well.

49
00:04:31.850 --> 00:04:34.310
Generate all of the getters and setters.

50
00:04:36.950 --> 00:04:38.600
And that should be it.

51
00:04:42.910 --> 00:04:47.470
From this Pogo class, you can create data in the form of grade objects.

52
00:04:48.800 --> 00:04:54.230
So inside the handler method, what I'm going to do is create a new object of the grade class.

53
00:04:59.220 --> 00:05:01.290
And the parameters will be hairy.

54
00:05:03.210 --> 00:05:05.220
The subject is potions.

55
00:05:06.080 --> 00:05:08.660
And their score will be a C minus.

56
00:05:11.920 --> 00:05:15.910
The great object is a piece of data referring back to the diagram.

57
00:05:15.940 --> 00:05:19.360
The handler method creates data and stores it in the model.

58
00:05:24.790 --> 00:05:28.000
Then it sends the model containing all of that data to The View.

59
00:05:33.400 --> 00:05:34.650
So back to the code.

60
00:05:34.660 --> 00:05:38.230
You need to somehow add this piece of data to the model.

61
00:05:44.980 --> 00:05:47.500
An attribute maps to a piece of data.

62
00:05:49.910 --> 00:05:53.840
You can add a model attribute using the method add attribute.

63
00:05:55.960 --> 00:05:59.170
It accepts two arguments the name of the attribute.

64
00:06:01.310 --> 00:06:03.140
And the data that it stores.

65
00:06:06.350 --> 00:06:07.970
Inside of your handler method.

66
00:06:07.970 --> 00:06:10.850
Add an attribute to the model called grid model.

67
00:06:10.850 --> 00:06:12.560
Dot add attribute.

68
00:06:14.950 --> 00:06:15.760
Grade.

69
00:06:19.180 --> 00:06:23.200
And the great attribute will map to the great object.

70
00:06:26.950 --> 00:06:27.550
And that's it.

71
00:06:27.580 --> 00:06:29.320
Now your model contains data.

72
00:06:29.350 --> 00:06:31.900
The next step is to merge that data with the view.

73
00:06:33.630 --> 00:06:36.150
In this lesson, you add a data to the model.

