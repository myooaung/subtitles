WEBVTT
1
00:00:00.300 --> 00:00:05.370
It's always good to trace the run time to figure out exactly what's happening inside of your application.

2
00:00:05.550 --> 00:00:13.860
So what I'm going to do is just apply breakpoints inside of submit form, nothing else.

3
00:00:15.420 --> 00:00:16.710
And you know what?

4
00:00:16.710 --> 00:00:19.860
Maybe I'll apply some breakpoints inside the setters.

5
00:00:20.040 --> 00:00:21.240
We'll put some in.

6
00:00:21.420 --> 00:00:22.170
Not the getters.

7
00:00:22.170 --> 00:00:23.040
The setters.

8
00:00:23.190 --> 00:00:24.150
We'll put them in.

9
00:00:24.150 --> 00:00:28.230
Set name, set subject and set score.

10
00:00:30.370 --> 00:00:33.730
All right, I will terminate the application.

11
00:00:34.510 --> 00:00:36.910
And rerun it in debug mode.

12
00:00:46.890 --> 00:00:47.820
All right.

13
00:00:47.820 --> 00:00:48.910
It should have run by now.

14
00:00:48.930 --> 00:00:51.160
I'll start by going to local host.

15
00:00:51.180 --> 00:00:51.600
80.

16
00:00:51.610 --> 00:00:52.170
80.

17
00:00:54.920 --> 00:01:03.950
And I will submit a blank name, a score of C minus as well as a blank subject, and upon pressing submit

18
00:01:03.950 --> 00:01:09.290
it should initiate a post request and carry all that data to our back end.

19
00:01:10.680 --> 00:01:11.900
Indeed it does.

20
00:01:11.910 --> 00:01:16.230
And I forgot to put a breakpoint here.

21
00:01:16.230 --> 00:01:22.710
But essentially, as we saw a million times before, submit form intercepts the the post request.

22
00:01:23.190 --> 00:01:28.050
It starts by creating an empty grade object and spring mood is smart enough to populate every single

23
00:01:28.050 --> 00:01:36.330
field inside this empty grade object with a parameter from the post request starts by updating the name

24
00:01:36.330 --> 00:01:37.770
with a blank value.

25
00:01:38.760 --> 00:01:42.770
Updates the score with a blank value and it updates.

26
00:01:42.780 --> 00:01:44.250
Actually, no, the score was not blank.

27
00:01:44.250 --> 00:01:47.460
We did put a C-minus, but the subject was blank.

28
00:01:48.470 --> 00:01:54.860
And and after updating every single field inside of the great object with a value from the post request,

29
00:01:54.950 --> 00:02:00.500
it gets a validated and the binding result carries the result of this validation.

30
00:02:00.800 --> 00:02:09.830
So if we drill into result, you can see that it has an array list of all of the errors involved in

31
00:02:09.830 --> 00:02:10.940
this validation.

32
00:02:10.970 --> 00:02:16.640
There is one error that says the name cannot be blank, and there's another error that says the subject

33
00:02:16.640 --> 00:02:17.750
cannot be blank.

34
00:02:17.960 --> 00:02:23.090
And you can see that it keeps a record of the object where these values came from.

35
00:02:23.360 --> 00:02:27.290
So right before we return, the form.

36
00:02:29.570 --> 00:02:32.750
This entire form is bound to our grade object.

37
00:02:32.750 --> 00:02:38.780
Finally, Ferrers uses a selection expression to select the name field of the previously bound object.

38
00:02:38.780 --> 00:02:44.600
And what Flyleaf errors will do is actually display the error that associated with that field.

39
00:02:46.490 --> 00:02:50.510
This one is going to grab the error associated with the subject field.

40
00:02:54.810 --> 00:02:56.400
So if I press next.

41
00:02:58.260 --> 00:02:59.400
Nice.

42
00:02:59.940 --> 00:03:03.540
Now, let's just say everything runs successfully.

43
00:03:03.540 --> 00:03:12.900
So we'll say Harry, we'll say potions, press, submit, updates the name, score a bit of subject

44
00:03:12.900 --> 00:03:14.570
with payload from the post request.

45
00:03:14.580 --> 00:03:16.310
The object is fine.

46
00:03:16.320 --> 00:03:20.190
You can see that the result does not have any errors.

47
00:03:20.190 --> 00:03:22.980
The size of the errors array list is zero.

48
00:03:24.960 --> 00:03:32.520
So this if block is going to get skipped, it's going to successfully submit this grade object to the

49
00:03:32.520 --> 00:03:33.390
array list.

50
00:03:33.390 --> 00:03:39.840
Then it's going to redirect the user to the to make a get request on slash grades.

51
00:03:40.110 --> 00:03:41.790
That's exactly what's going to happen.

52
00:03:41.790 --> 00:03:47.310
I didn't put a breakpoint here, but it will return the grades template populated with our new data.

53
00:03:47.760 --> 00:03:48.450
All right.

54
00:03:48.450 --> 00:03:49.560
Thank you for tuning in.

