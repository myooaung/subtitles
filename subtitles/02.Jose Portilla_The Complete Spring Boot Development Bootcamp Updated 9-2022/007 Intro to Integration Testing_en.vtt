WEBVTT
1
00:00:00.060 --> 00:00:03.990
Integration testing is useful for testing the entire application.

2
00:00:06.390 --> 00:00:10.650
A unit test checks if one small unit of your APS is working as it should.

3
00:00:13.620 --> 00:00:18.690
Whereas an integration test maps the entire request and response lifecycle.

4
00:00:21.930 --> 00:00:25.890
In this lesson, you will learn the difference between unit and integration testing.

5
00:00:29.250 --> 00:00:33.840
A unit test verifies a small individual unit of your application.

6
00:00:36.250 --> 00:00:41.440
Unit testing is the process of testing a single unit or a small portion of code to verify that it's

7
00:00:41.440 --> 00:00:42.670
behaving as it should.

8
00:00:45.470 --> 00:00:49.490
You need a unit test for every method that provides meaningful logic.

9
00:00:50.240 --> 00:00:55.490
Now having a test for individual units of your application increases your confidence and modifying the

10
00:00:55.490 --> 00:00:55.930
code.

11
00:00:55.940 --> 00:00:59.740
Because if every test passes, then your business logic works.

12
00:00:59.750 --> 00:01:05.630
If you make a mistake, one of your unit tests is going to fail and the failing test will prompt you

13
00:01:05.630 --> 00:01:08.330
to fix your mistake until it passes again.

14
00:01:13.830 --> 00:01:21.240
Now an integration test maps the entire request and response lifecycle and integration test traverses

15
00:01:21.240 --> 00:01:23.340
all of the applications layers.

16
00:01:27.980 --> 00:01:31.190
First, it makes a mock request to a handler method.

17
00:01:37.640 --> 00:01:41.090
Business related operations occur in the business logic layer.

18
00:01:43.890 --> 00:01:46.350
And data access in the data layer.

19
00:01:53.370 --> 00:01:59.610
After the test maps, the entire request and response life cycle, it will make assertions.

20
00:01:59.640 --> 00:02:03.840
Typically, the assertions involve a response, the view and the model.

21
00:02:07.570 --> 00:02:10.900
There is no spring container, there is no spring context.

22
00:02:10.900 --> 00:02:17.800
When your unit testing a unit test verifies a method in complete isolation so it doesn't need a spring

23
00:02:17.800 --> 00:02:18.520
container.

24
00:02:18.520 --> 00:02:22.030
We can just mock all of our dependencies using j units.

25
00:02:25.240 --> 00:02:27.520
Now you need the spring context.

26
00:02:27.520 --> 00:02:30.220
You need the spring container when integration testing.

27
00:02:34.180 --> 00:02:40.120
An integration test traverses all of the applications layers from the controller to the repository.

28
00:02:40.120 --> 00:02:44.260
So it needs access to all of the beans inside of the spring container.

29
00:02:46.640 --> 00:02:51.560
Last thing to know is always create unit tests before integration tests.

30
00:02:52.970 --> 00:02:57.590
An integration test verifies the interaction of every component in your application.

31
00:02:57.860 --> 00:03:04.190
It doesn't make any sense to verify the interaction of these components when the business logic is defective.

32
00:03:07.560 --> 00:03:12.710
So first you should unit test every meaningful piece of business logic inside of your service.

33
00:03:12.720 --> 00:03:19.380
And once you're certain that the business logic is behaving as it should, then integration tests can

34
00:03:19.380 --> 00:03:22.950
verify the interaction of different layers in your application.

35
00:03:28.580 --> 00:03:34.040
So to recap and integration test maps the entire request and response lifecycle.

36
00:03:38.700 --> 00:03:41.200
There is no spring container on unit testing.

37
00:03:41.220 --> 00:03:45.180
You do not need beans when testing one method and complete isolation.

38
00:03:47.220 --> 00:03:48.990
You need the spring context.

39
00:03:48.990 --> 00:03:50.400
Do you need the spring container?

40
00:03:50.400 --> 00:03:56.670
When integration, testing and integration test traverses all of the applications layers from the controller

41
00:03:56.670 --> 00:03:57.960
to the repository.

42
00:04:02.050 --> 00:04:06.130
And finally, unit testing comes before integration testing.

