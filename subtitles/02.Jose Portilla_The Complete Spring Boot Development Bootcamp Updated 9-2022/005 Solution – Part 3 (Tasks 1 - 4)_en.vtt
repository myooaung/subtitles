WEBVTT
1
00:00:00.420 --> 00:00:00.960
All right.

2
00:00:00.960 --> 00:00:01.630
Welcome back.

3
00:00:01.650 --> 00:00:04.450
Now we will implement the update functionality.

4
00:00:04.470 --> 00:00:10.920
The first step is to get each update button to make a request on an empty path.

5
00:00:11.650 --> 00:00:19.750
So here is the update button that will be a part of each row that gets generated and every update button

6
00:00:19.750 --> 00:00:21.700
must make a get request.

7
00:00:21.700 --> 00:00:29.560
We will use the family attribute h ref to make a request and you can specify a URL using the familiar

8
00:00:29.560 --> 00:00:30.790
link expression.

9
00:00:32.110 --> 00:00:37.630
The URL is context relative, so we can just specify the empty path and that should be enough.

10
00:00:37.840 --> 00:00:39.970
Let's rerun our code.

11
00:00:56.230 --> 00:00:57.100
Go here?

12
00:00:57.280 --> 00:00:59.290
Actually, we'll have to resubmit some data.

13
00:00:59.620 --> 00:01:04.599
We'll say furniture, couch, 350.9.

14
00:01:05.050 --> 00:01:05.650
Any date?

15
00:01:05.650 --> 00:01:06.180
Really?

16
00:01:07.420 --> 00:01:08.830
Okay, looking good.

17
00:01:08.830 --> 00:01:12.430
If I press the update bone, it should take me back to the home page.

18
00:01:12.760 --> 00:01:13.900
And it does.

19
00:01:16.080 --> 00:01:21.720
Now the updated button must pass a parameter into the request that identifies the object in the row.

20
00:01:22.380 --> 00:01:23.160
All right.

21
00:01:23.160 --> 00:01:24.490
In order to do that.

22
00:01:24.540 --> 00:01:31.620
Well, before we pass a parameter into the request, we're missing one very important field.

23
00:01:31.620 --> 00:01:34.410
Different objects can have the same category.

24
00:01:34.410 --> 00:01:35.730
They can have the same name.

25
00:01:35.730 --> 00:01:38.850
They can have the same price, discount or order date.

26
00:01:39.240 --> 00:01:46.020
So what we need to do is give each object a field that is going to be unique to it.

27
00:01:46.470 --> 00:01:50.010
And so let's remove the full constructor to avoid confusion.

28
00:01:50.010 --> 00:01:57.030
And whenever a new object is created using the Item constructor, what we're going to do is set that

29
00:01:57.030 --> 00:02:01.410
object ID equal to a universally unique identifier.

30
00:02:05.830 --> 00:02:10.060
And then, as always, generate the getters and setters.

31
00:02:10.979 --> 00:02:11.570
OC.

32
00:02:12.250 --> 00:02:17.170
And going back to task two, the update button must pass a parameter into the request that identifies

33
00:02:17.170 --> 00:02:18.790
the object in the row.

34
00:02:19.810 --> 00:02:26.590
So back here, the update button that gets pressed, it's going to pass back an ID parameter.

35
00:02:28.100 --> 00:02:33.860
That equals the ID of the object that was used to generate this table row.

36
00:02:34.670 --> 00:02:36.020
Item dot ID.

37
00:02:37.680 --> 00:02:38.130
Okay.

38
00:02:38.130 --> 00:02:39.780
All our brackets are in order.

39
00:02:39.780 --> 00:02:41.070
I think we're good to go.

40
00:02:41.550 --> 00:02:41.970
All right.

41
00:02:41.970 --> 00:02:43.770
And now if I go back.

42
00:02:46.580 --> 00:02:48.360
Submit furniture.

43
00:02:48.380 --> 00:02:49.340
Couch.

44
00:02:55.220 --> 00:02:55.530
Okay.

45
00:02:55.580 --> 00:02:56.840
If I press update.

46
00:02:58.730 --> 00:03:03.580
It returns the ID of the object that was used to generate the row OC.

47
00:03:04.480 --> 00:03:11.560
Task three is before returning the form view, we need to pre populate the form inputs with the values

48
00:03:11.560 --> 00:03:12.850
from the object.

49
00:03:14.310 --> 00:03:16.470
So our handler method.

50
00:03:18.230 --> 00:03:19.220
Over here.

51
00:03:19.850 --> 00:03:21.620
Let's remove all the breakpoints.

52
00:03:25.310 --> 00:03:31.700
Our Handler method, it needs to receive that ID as a request parameter request per m.

53
00:03:37.370 --> 00:03:42.050
And that request per diem is not always going to be required.

54
00:03:42.950 --> 00:03:48.500
But the request parameter that we will expect on updates will be string ID.

55
00:03:51.040 --> 00:03:56.830
And now the model attribute that we're going to add depends on whether we can find an object in our

56
00:03:56.830 --> 00:04:00.280
data store that matches the ID that was provided.

57
00:04:00.880 --> 00:04:04.300
So down here, I'm going to create a new method.

58
00:04:04.390 --> 00:04:09.880
We're going to say public int get index from ID.

59
00:04:11.630 --> 00:04:13.490
It will receive a string ID.

60
00:04:16.300 --> 00:04:21.459
And now here I will create a for loop that runs through the size of our items.

61
00:04:21.459 --> 00:04:22.570
Array list items.

62
00:04:22.570 --> 00:04:23.560
Dot size.

63
00:04:24.680 --> 00:04:30.860
And now we're going to check if the item at the current index that's being iterated through does its

64
00:04:30.860 --> 00:04:31.700
ID.

65
00:04:33.290 --> 00:04:36.080
Equal the IED that was passed in.

66
00:04:37.010 --> 00:04:39.710
If that's the case, we will return the index.

67
00:04:42.170 --> 00:04:45.080
Otherwise we will return -10,000.

68
00:04:45.590 --> 00:04:53.180
And instead of having loose integers in our code, I'll go over to constants dot java and I will define

69
00:04:53.180 --> 00:04:58.130
a constant that says public static final.

70
00:04:58.910 --> 00:05:06.770
The constant will be an integer called not found and it's going to equal an integer if -10,000.

71
00:05:07.700 --> 00:05:14.150
So instead of having a loose integer, we'll just say constants dot not found.

72
00:05:14.600 --> 00:05:16.220
And then here we're going to say.

73
00:05:18.750 --> 00:05:19.410
If.

74
00:05:19.920 --> 00:05:30.270
We cannot find an index for the ID, so if the value from this function is constantly not found, so

75
00:05:30.270 --> 00:05:36.180
if it's not able to find an object that matches the ID, then what we're going to do is just add a new

76
00:05:36.180 --> 00:05:37.460
object to the model.

77
00:05:37.470 --> 00:05:40.380
So we'll say new item.

78
00:05:41.980 --> 00:05:45.460
Otherwise you will return the object at the found index.

79
00:05:45.460 --> 00:05:52.180
And instead of calling this function twice, we'll just say int index is equal to get index from ID.

80
00:05:53.760 --> 00:05:59.080
Then we'll say if the index is equal to constants not found, return a new object.

81
00:05:59.100 --> 00:06:02.160
Otherwise, return the object that we found.

82
00:06:02.190 --> 00:06:03.930
Return items.

83
00:06:04.140 --> 00:06:04.620
Dot.

84
00:06:04.620 --> 00:06:05.310
Get.

85
00:06:09.080 --> 00:06:09.470
Okay.

86
00:06:09.470 --> 00:06:10.880
Let's try this out.

87
00:06:16.280 --> 00:06:18.920
Will submit the usual coach.

88
00:06:25.320 --> 00:06:26.940
The press updates.

89
00:06:27.800 --> 00:06:28.780
Beautiful.

90
00:06:30.730 --> 00:06:36.820
The update button passed back an ID parameter that identifies the object that was used to create that

91
00:06:36.820 --> 00:06:37.360
row.

92
00:06:39.200 --> 00:06:40.160
The Handler method.

93
00:06:40.160 --> 00:06:46.280
Upon intercepting the get request, it received an ID parameter, and then the handler method was able

94
00:06:46.280 --> 00:06:54.350
to find an object whose ID matches the ID parameter, therefore adding that pre-existing object to our

95
00:06:54.350 --> 00:06:54.970
model.

96
00:06:54.980 --> 00:07:01.430
And just as we're about to return the form, the object that we're passing into the model is now a form

97
00:07:01.430 --> 00:07:02.780
backing object.

98
00:07:02.990 --> 00:07:09.920
That means every single element inside of our form is bound to a field in the form backing object.

99
00:07:09.920 --> 00:07:16.400
Because all of the fields are going to be pre-populated, then our elements are going to be pre populated

100
00:07:16.400 --> 00:07:17.120
as well.

101
00:07:17.150 --> 00:07:18.890
This is just great.

102
00:07:21.040 --> 00:07:21.600
Okay.

103
00:07:21.610 --> 00:07:24.250
Now we're done.

104
00:07:24.250 --> 00:07:26.680
Task three if the submitted item.

105
00:07:26.710 --> 00:07:28.120
Oh, my bad.

106
00:07:28.800 --> 00:07:34.620
If the submitted item already exists, your post handler method will seek to update the data store instead.

107
00:07:34.860 --> 00:07:35.700
All right.

108
00:07:35.700 --> 00:07:39.420
This is yelling at us to add some logic inside of handle.

109
00:07:41.700 --> 00:07:47.430
And so upon pressing submit all of the data inside the form backing object is going to be sent back

110
00:07:47.430 --> 00:07:53.190
as part of the post request handle submit intercepts, the post request and here we're going to use

111
00:07:53.190 --> 00:07:57.840
the ID of that item object to check and see if it already exists.

112
00:07:57.840 --> 00:08:03.990
So int index will say get index from id item dot get id.

113
00:08:06.430 --> 00:08:16.360
And if index is equal to constants not found, only then do we want to say items dot add item.

114
00:08:17.110 --> 00:08:20.620
Otherwise if it does actually find the index.

115
00:08:22.310 --> 00:08:23.720
We'll say items.

116
00:08:24.770 --> 00:08:28.060
And we'll update the item at that index.

117
00:08:31.530 --> 00:08:32.250
Okay.

118
00:08:32.950 --> 00:08:34.799
I think now we're ready to test it out.

119
00:08:38.150 --> 00:08:39.740
Will choose furniture.

120
00:08:39.980 --> 00:08:40.789
Couch.

121
00:08:40.789 --> 00:08:41.870
300 bucks.

122
00:08:41.870 --> 00:08:43.490
50.99.

123
00:08:46.520 --> 00:08:48.200
Then we'll try to update it.

124
00:08:48.590 --> 00:08:53.300
We'll give them a better discount, let's say 100 and $250.

125
00:08:55.130 --> 00:08:58.910
And it adds another row to our table instead of updating it.

126
00:08:59.570 --> 00:09:03.370
We can debug the runtime to understand why this is happening.

127
00:09:03.380 --> 00:09:06.260
So if I were to stop.

128
00:09:08.520 --> 00:09:13.320
Put breakpoints all over our setters.

129
00:09:21.770 --> 00:09:23.330
As well as the constructor.

130
00:09:24.010 --> 00:09:27.040
Some breakpoints inside of handle submit.

131
00:09:30.180 --> 00:09:32.640
We run the application and debug mode.

132
00:09:33.670 --> 00:09:35.380
We can figure out what's going on.

133
00:09:35.410 --> 00:09:41.650
First, I will mute the breakpoints because I only want to see what's happening once we start updating.

134
00:09:44.400 --> 00:09:50.580
So once again we will submit a couch with the usual price May 5th.

135
00:09:52.720 --> 00:09:54.160
No press updates.

136
00:09:55.410 --> 00:10:00.060
Remember this id ff0d6ec.

137
00:10:00.750 --> 00:10:03.600
All right, I'll re-enable the breakpoints.

138
00:10:04.870 --> 00:10:06.070
And press submit.

139
00:10:09.000 --> 00:10:09.230
Okay.

140
00:10:09.420 --> 00:10:15.180
And so upon pressing submit, it's going to initiate a post request that carries all of this data as

141
00:10:15.180 --> 00:10:15.960
payload.

142
00:10:17.000 --> 00:10:23.900
The Handler method handle submit is going to receive this post request, but just before this logic

143
00:10:23.900 --> 00:10:30.470
starts to execute, spring boot actually creates a new item object behind the scenes using your empty

144
00:10:30.470 --> 00:10:31.280
constructor.

145
00:10:31.640 --> 00:10:33.050
But there is an issue.

146
00:10:33.080 --> 00:10:37.220
It assigns that new item object an entirely new ID.

147
00:10:37.670 --> 00:10:41.690
So this id of f f is 0d6 now means nothing.

148
00:10:45.230 --> 00:10:48.230
Then it's going to update all of our other fields.

149
00:10:52.570 --> 00:11:00.340
But now it doesn't matter because it's going to check if this ID for item matches any of the IDs for

150
00:11:00.340 --> 00:11:02.190
the objects in the array list.

151
00:11:02.200 --> 00:11:03.920
Clearly it doesn't.

152
00:11:03.940 --> 00:11:08.410
So it's going to add this object instead.

153
00:11:13.670 --> 00:11:14.930
All right.

154
00:11:28.110 --> 00:11:28.330
Okay.

155
00:11:28.410 --> 00:11:35.490
So the issue here is that our form, it sends back all of this data, but it doesn't send back the ID.

156
00:11:36.810 --> 00:11:42.390
So Spring Boot creates an entirely new ID and it's not able to find this object in our data store.

157
00:11:42.870 --> 00:11:44.070
What we need to do.

158
00:11:44.990 --> 00:11:47.360
Is add another input to our reform.

159
00:11:48.650 --> 00:11:49.580
That's hidden.

160
00:11:50.090 --> 00:11:52.610
We'll say input type is equal to hidden.

161
00:11:54.210 --> 00:12:01.110
And now this input is going to be bound to our ID field and that should fix our bug.

162
00:12:02.730 --> 00:12:04.150
Go back to inventory.

163
00:12:04.170 --> 00:12:08.610
Now I'll press the now I'll re-enable the breakpoints.

164
00:12:10.500 --> 00:12:11.790
Press the update button.

165
00:12:12.330 --> 00:12:16.770
It passes back an ID that identifies the object we pressed update on.

166
00:12:16.800 --> 00:12:24.090
I'm going to update the discount to 3499 Press Submit item, but let me make sure all the breakpoints

167
00:12:24.090 --> 00:12:25.140
are there real quick.

168
00:12:28.800 --> 00:12:29.400
They are.

169
00:12:31.550 --> 00:12:32.450
Wonderful.

170
00:12:32.570 --> 00:12:39.170
Store comptroller intercepts the post request, and right before this logic executes, it creates a

171
00:12:39.170 --> 00:12:43.280
new object of the item class using our empty constructor.

172
00:12:43.310 --> 00:12:47.720
Unfortunately, it assigns this object an entirely new ID.

173
00:12:48.770 --> 00:12:53.900
And then it's going to update every single field in our object with payload from the post request.

174
00:12:55.720 --> 00:12:59.050
It updates the category and updates the date.

175
00:12:59.680 --> 00:13:01.180
It updates the discount.

176
00:13:01.910 --> 00:13:07.250
And now that the form is sending back an ID as part of a post request, we're able to override this

177
00:13:07.250 --> 00:13:08.990
value with the correct ID.

178
00:13:09.790 --> 00:13:10.720
Beautiful.

179
00:13:11.600 --> 00:13:14.180
AF is 090577.

180
00:13:16.270 --> 00:13:19.180
We'll update the name, we'll update the price.

181
00:13:19.570 --> 00:13:25.360
And now it's going to check if the ID matches any of the objects IDs inside of the array list.

182
00:13:25.390 --> 00:13:26.890
It definitely does.

183
00:13:29.240 --> 00:13:32.750
And so it's going to update the object at that index instead.

184
00:13:35.090 --> 00:13:39.260
Redirect the user to make a get request on slash inventory.

185
00:13:40.070 --> 00:13:46.640
Get inventory gets called and it's going to add the updated array list to our model and return the inventory

186
00:13:46.640 --> 00:13:47.090
view.

187
00:13:49.200 --> 00:13:49.950
Beautiful.

188
00:13:50.430 --> 00:13:55.440
Now, there are still many more tasks that we need to implement.

189
00:13:55.890 --> 00:13:58.550
This is actually a new topic that we haven't covered.

190
00:13:58.560 --> 00:14:05.490
So I'm going to stop right here and in the next video we'll cover the remainder of the solution.

