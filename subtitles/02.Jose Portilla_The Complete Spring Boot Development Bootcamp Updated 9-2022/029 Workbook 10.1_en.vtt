WEBVTT
1
00:00:00.180 --> 00:00:01.800
Welcome to work Book 10.1.

2
00:00:01.800 --> 00:00:08.370
I created this workbook because many of you have asked me how one would connect a springboard application

3
00:00:08.370 --> 00:00:10.670
to a MySQL database.

4
00:00:10.680 --> 00:00:16.830
Now, installing my SQL on your machine can get pretty tedious depending on if you're installing it

5
00:00:16.830 --> 00:00:20.440
on Windows, MacBook and 1m2 versus Intel.

6
00:00:20.460 --> 00:00:27.630
So instead of having a video for each one, I decided to just run my SQL from a docker container.

7
00:00:27.870 --> 00:00:30.150
Because this is not a Docker course.

8
00:00:30.150 --> 00:00:31.980
I'm going to be very brief.

9
00:00:32.009 --> 00:00:39.600
A Docker container is a lightweight package that contains only your application and only the resources

10
00:00:39.600 --> 00:00:41.310
that the application needs to run.

11
00:00:41.310 --> 00:00:42.450
Nothing else.

12
00:00:42.450 --> 00:00:48.540
So the Docker container we're going to run is only going to run an instance of my SQL, nothing else.

13
00:00:48.780 --> 00:00:53.310
In order to run the docker container, we need to have a Docker up and running.

14
00:00:53.310 --> 00:00:57.510
So if you're using a mac, you should see a whale icon on the top, right?

15
00:00:57.540 --> 00:01:02.640
If you're using windows, you should see the whale on the bottom right list of icons.

16
00:01:03.750 --> 00:01:04.319
Anyways.

17
00:01:04.319 --> 00:01:08.910
I currently do not have Docker running, so what I'll do is I will open it up.

18
00:01:18.350 --> 00:01:20.180
I'll give it a chance to start.

19
00:01:24.520 --> 00:01:27.160
I will try running the command docker version.

20
00:01:29.100 --> 00:01:30.210
We're looking good.

21
00:01:30.840 --> 00:01:31.800
All right.

22
00:01:32.710 --> 00:01:36.370
So how are we going to run MySQL from a docker container?

23
00:01:36.400 --> 00:01:42.700
I gave you a docker compose file that I hope you opened up by following this path in your course resources.

24
00:01:43.820 --> 00:01:47.360
And I left you some explanations for every single field.

25
00:01:47.360 --> 00:01:52.280
So this Docker container is going to run an instance of my SQL eight.

26
00:01:52.310 --> 00:01:55.410
It's going to grab an image of my SQL eight.

27
00:01:55.430 --> 00:02:01.580
We can pass some environment variables into our MySQL server in order to set up a database called DB,

28
00:02:01.580 --> 00:02:03.380
which we're going to be connecting to.

29
00:02:03.380 --> 00:02:11.150
And the MySQL credentials needed to make calls to the database will be user and password, and the default

30
00:02:11.150 --> 00:02:14.150
root user will also have a password of password.

31
00:02:14.270 --> 00:02:16.980
My school is going to run on port 3306.

32
00:02:17.000 --> 00:02:22.220
The container will expose that port and it's going to save all of that data with any volume that exists

33
00:02:22.220 --> 00:02:23.150
on your machine.

34
00:02:23.150 --> 00:02:28.760
So that if you were to ever stop the Docker container and start it up again, the data will still be

35
00:02:28.760 --> 00:02:29.270
there.

36
00:02:32.360 --> 00:02:32.870
All right.

37
00:02:32.870 --> 00:02:39.530
So what we'll do is run this Docker container by saying Docker, compose up.

38
00:02:48.990 --> 00:02:51.030
All right, going back over here.

39
00:02:51.360 --> 00:02:55.890
I told you to copy all of these properties into your application properties file.

40
00:02:56.250 --> 00:03:00.060
You'll remember that our container is exposing port 3306.

41
00:03:00.060 --> 00:03:01.700
That's where my SQL is running.

42
00:03:01.710 --> 00:03:06.000
We're connecting to that, and we're connecting to a database DB.

43
00:03:07.110 --> 00:03:13.620
You'll remember, these are the credentials we need in order to authenticate and make calls to the database.

44
00:03:14.450 --> 00:03:20.660
This ensures that every time we rerun the app, it's going to drop existing tables and create new ones.

45
00:03:20.660 --> 00:03:25.490
Based on what you have now in a production scenario, you wouldn't actually want this, but we're going

46
00:03:25.490 --> 00:03:26.360
to keep it.

47
00:03:26.630 --> 00:03:32.640
And because the Docker container is running my SQL eight, we specify a dialect of my SQL eight.

48
00:03:32.660 --> 00:03:38.090
So that Hibernate, which is what spring data JPA uses as an implementation so that it knows to generate

49
00:03:38.090 --> 00:03:40.220
the appropriate SQL statements.

50
00:03:40.640 --> 00:03:42.830
All right, let's run our application.

51
00:03:56.500 --> 00:03:57.430
Think we're good.

52
00:03:57.430 --> 00:04:01.480
Now, if you notice some errors pop up the first time you run this.

53
00:04:01.570 --> 00:04:02.440
That's fine.

54
00:04:02.440 --> 00:04:04.960
They shouldn't appear the second time you run it.

55
00:04:04.960 --> 00:04:07.030
So feel free to test that out.

56
00:04:07.120 --> 00:04:13.840
But anyways, we just connected our spring boot up to a running instance of MySQL that is running in

57
00:04:13.840 --> 00:04:14.680
our machine.

58
00:04:15.680 --> 00:04:23.010
And if you go to our main class, you'll notice here that it's saving a bunch of students.

59
00:04:23.030 --> 00:04:24.850
It's saving a bunch of courses.

60
00:04:24.860 --> 00:04:27.290
How can we actually view this data?

61
00:04:27.290 --> 00:04:30.960
Before we had the H to console for my SQL.

62
00:04:30.980 --> 00:04:34.040
We're going to use the my SQL workbench.

63
00:04:34.730 --> 00:04:38.270
So I'm already connected to the SQL instance over here.

64
00:04:38.270 --> 00:04:41.660
But for the sake of it, I'll create a new SQL connection.

65
00:04:41.990 --> 00:04:44.030
The connection name can be anything.

66
00:04:44.150 --> 00:04:44.620
I don't know.

67
00:04:44.630 --> 00:04:48.620
Let's call it my SQL connection.

68
00:04:49.920 --> 00:04:51.600
How about my you all eight?

69
00:04:52.710 --> 00:04:53.550
All right.

70
00:04:53.550 --> 00:04:54.810
This is local host.

71
00:04:54.810 --> 00:04:55.440
We're fine.

72
00:04:55.440 --> 00:04:56.910
3306.

73
00:04:56.940 --> 00:05:00.660
The username we're going to say user.

74
00:05:01.550 --> 00:05:03.680
Password will be password.

75
00:05:07.580 --> 00:05:08.750
Test the connection.

76
00:05:09.650 --> 00:05:10.220
All right.

77
00:05:10.220 --> 00:05:11.990
From the MySQL workbench.

78
00:05:11.990 --> 00:05:16.310
We've also been able to connect to the MySQL instance that's currently running.

79
00:05:16.310 --> 00:05:18.170
So let us go to it.

80
00:05:19.500 --> 00:05:24.240
All right, click on Schemas and here we can see the database DB.

81
00:05:26.070 --> 00:05:29.490
And all of the tables that spring created.

82
00:05:29.490 --> 00:05:31.620
This is looking really good.

83
00:05:31.890 --> 00:05:33.480
We can query the data as follows.

84
00:05:33.480 --> 00:05:36.860
You can say Select everything from.

85
00:05:36.870 --> 00:05:38.550
We'll start from the database.

86
00:05:38.550 --> 00:05:43.500
Name DB dot table name course.

87
00:05:45.190 --> 00:05:46.600
We'll copy this.

88
00:05:48.640 --> 00:05:52.000
More and more times, we'll view everything from course students.

89
00:05:53.120 --> 00:05:55.820
From grade, from student.

90
00:05:56.560 --> 00:05:57.010
Press.

91
00:05:57.010 --> 00:05:58.390
The symbol over here.

92
00:06:00.440 --> 00:06:01.910
All right.

93
00:06:02.330 --> 00:06:07.860
And now what we can do is toggle through each of these tables and view the data.

94
00:06:07.880 --> 00:06:09.860
We have data for courses.

95
00:06:09.860 --> 00:06:11.650
We have data for students.

96
00:06:11.660 --> 00:06:15.680
We don't have any data over here because we did not save any grades.

97
00:06:15.680 --> 00:06:18.470
And accordingly, there is nothing in the joint table.

98
00:06:19.010 --> 00:06:22.730
And there's one thing I want to mention that's really, really important.

99
00:06:25.020 --> 00:06:27.390
Docker can be really, really heavy.

100
00:06:27.390 --> 00:06:33.390
So if you ever find that your machine is slowing down, please quit Dr. Desktop.

101
00:06:35.220 --> 00:06:41.190
And if you find that every time you restart your computer or dock or reopens and you don't want it to,

102
00:06:41.220 --> 00:06:46.680
there should be a setting if you click on it that disables it from running every time you restart your

103
00:06:46.680 --> 00:06:47.220
machine.

104
00:06:48.030 --> 00:06:48.570
All right.

105
00:06:48.570 --> 00:06:50.700
And that is really it.

106
00:06:50.730 --> 00:06:56.100
This was just a little, little taste of what Docker can do, how powerful Docker is.

107
00:06:56.100 --> 00:07:01.740
Instead of installing stuff on our local machine and making sure it's compatible with whatever you have

108
00:07:01.740 --> 00:07:09.210
set up, know you can just run it inside of a standalone container that only contains Maskell and nothing

109
00:07:09.210 --> 00:07:09.590
else.

110
00:07:09.600 --> 00:07:13.360
Anyways, this is not a Docker chorus, so I'll just leave it at that.

111
00:07:13.380 --> 00:07:16.890
This is how we can run my SQL the easiest way.

112
00:07:16.890 --> 00:07:18.180
And that is amazing.

113
00:07:18.180 --> 00:07:20.970
So let's pick up where we left off in another video.

