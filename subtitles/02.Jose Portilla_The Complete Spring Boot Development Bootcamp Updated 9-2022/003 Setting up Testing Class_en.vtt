WEBVTT
1
00:00:01.010 --> 00:00:05.510
It's important to unit test every meaningful method inside of the service class.

2
00:00:08.830 --> 00:00:14.830
The methods inside of the service class contain business logic, and business logic is very vulnerable

3
00:00:14.830 --> 00:00:15.820
to bugs.

4
00:00:18.740 --> 00:00:23.600
It's irresponsible to add any more business logic without unit testing first.

5
00:00:24.200 --> 00:00:27.740
Because unit tests will make sure that you never get any bugs.

6
00:00:30.260 --> 00:00:34.040
In this lesson, you will set up a class that can unit test grade service.

7
00:00:36.740 --> 00:00:38.230
So let's go through the process.

8
00:00:38.300 --> 00:00:42.080
First, you're going to create a class called Grade Service Test.

9
00:00:44.560 --> 00:00:49.600
This class is going to unit test every meaningful method inside of grade service.

10
00:00:53.740 --> 00:01:00.130
So in our code, what I want you to do is go to source slash test and inside of the great submission

11
00:01:00.130 --> 00:01:05.170
folder, create a new file called Grade Service.

12
00:01:05.260 --> 00:01:11.650
So the same name as the class that we want to test, followed by the test suffix java.

13
00:01:14.930 --> 00:01:22.160
Well right now run with runs every unit test inside of grade service test using the Marketo unit runner.

14
00:01:23.900 --> 00:01:27.440
A class that can run tests is called a runner class.

15
00:01:32.770 --> 00:01:39.520
So what we have to do is make this class into a runner class and we can do that using the run with annotation.

16
00:01:40.060 --> 00:01:43.000
And I seem to have forgotten something.

17
00:01:43.480 --> 00:01:48.280
And the thing that I'm forgetting is that a run with is provided by the J unit dependency.

18
00:01:49.290 --> 00:01:52.350
So we can go and look up J Unit.

19
00:01:53.520 --> 00:01:54.330
Pendency.

20
00:01:55.330 --> 00:01:57.400
Go to the Central Maven repository.

21
00:02:00.860 --> 00:02:01.740
Grab it.

22
00:02:01.760 --> 00:02:04.430
Copy and paste it into your project.

23
00:02:16.900 --> 00:02:17.350
All right.

24
00:02:17.350 --> 00:02:20.770
Ideally, the change in this build file should synchronize.

25
00:02:20.770 --> 00:02:25.130
So let's see if I can access the run with annotation.

26
00:02:25.150 --> 00:02:26.060
There you go.

27
00:02:26.080 --> 00:02:26.740
Cool.

28
00:02:26.830 --> 00:02:31.030
And we will run this test class using the mosquito.

29
00:02:31.060 --> 00:02:32.500
J Unit Runner.

30
00:02:39.990 --> 00:02:44.490
Step three is to use mock to create a mock of grade repository.

31
00:02:52.350 --> 00:02:57.150
A mock can mimic the behavior of greater repository while having no logic of its own.

32
00:03:00.450 --> 00:03:07.410
Now there's a difference between starting up an entire spring boot application, which scans for components

33
00:03:07.410 --> 00:03:14.340
configures the spring container registers beans as opposed to just running a single test class.

34
00:03:14.610 --> 00:03:18.930
The service class that we need to test relies on a repository dependency.

35
00:03:19.710 --> 00:03:23.610
But when you're testing the repository, bean doesn't exist.

36
00:03:23.940 --> 00:03:26.520
But we still need to auto wire this variable to something.

37
00:03:26.550 --> 00:03:28.080
Otherwise it's going to be null.

38
00:03:28.470 --> 00:03:34.740
So what we're going to do is create a mock of the repository using the mock annotation.

39
00:03:37.820 --> 00:03:43.670
This mark will mimic the great repository dependency while having no logic of its own.

40
00:03:43.940 --> 00:03:48.290
Yet we still need to inject this mark into the great repository variable.

41
00:03:48.320 --> 00:03:49.460
How do we do it?

42
00:03:51.430 --> 00:03:55.900
Inject marks, creates an object and injects the MOC into it.

43
00:04:05.630 --> 00:04:10.280
In this case, inject marks creates an object out of the class that you want to test.

44
00:04:12.360 --> 00:04:16.890
It also injects the greater repository mark into the great service object.

45
00:04:19.269 --> 00:04:25.630
So in your code, what I'm going to do is define a great service variable private, great service.

46
00:04:27.580 --> 00:04:28.750
Great service.

47
00:04:30.790 --> 00:04:34.300
And then I'm going to annotate it with inject marks.

48
00:04:36.850 --> 00:04:43.750
Inject marks is going to create an object of the great service class and it's going to inject the repository

49
00:04:43.750 --> 00:04:45.040
mark into it.

50
00:04:49.120 --> 00:04:55.210
In this lesson, you set up a class that can use to test the grade service you run with runs every unit

51
00:04:55.210 --> 00:04:57.270
test inside of the runner class.

52
00:04:57.280 --> 00:04:59.500
Right now we don't have any unit tests.

53
00:04:59.710 --> 00:05:06.010
The runner class has no mechanism for scanning components and creating beans, so the repository being

54
00:05:06.010 --> 00:05:09.970
for grade service doesn't exist in inject mocks.

55
00:05:09.970 --> 00:05:16.060
What we're doing is we're creating a great service object and it auto wires the greater repository mark

56
00:05:16.060 --> 00:05:18.700
into a variable that would otherwise be null.

57
00:05:19.040 --> 00:05:24.400
And the mock can mimic the behavior of a dependency without having any logic of its own.

58
00:05:24.580 --> 00:05:30.640
This allows you to test grade service in complete isolation as you control exactly what the mock can

59
00:05:30.640 --> 00:05:31.900
or can't return.

