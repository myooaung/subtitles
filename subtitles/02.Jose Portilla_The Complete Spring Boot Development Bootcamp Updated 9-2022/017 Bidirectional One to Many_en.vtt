WEBVTT
1
00:00:00.240 --> 00:00:03.990
Remember that relationships can create a link between two tables.

2
00:00:04.230 --> 00:00:09.750
So far you looked at a unidirectional many to one relationship where the foreign key lives inside of

3
00:00:09.750 --> 00:00:10.830
the child table.

4
00:00:11.070 --> 00:00:15.240
In this lesson, you will define a bidirectional one to many relationship.

5
00:00:15.780 --> 00:00:16.950
So here is my task.

6
00:00:16.950 --> 00:00:20.190
I want to query Harry's grades right now in our app.

7
00:00:20.190 --> 00:00:24.750
The way we have it set up is there's a uni directional many to one relationship.

8
00:00:24.960 --> 00:00:29.700
So if I want to query Harry's grade, I can do it directly from the grade table.

9
00:00:31.460 --> 00:00:32.840
But I can't do anything.

10
00:00:32.840 --> 00:00:35.300
I cannot access anything from the student table.

11
00:00:35.900 --> 00:00:41.420
That's why we need to set up a bidirectional one to many relationship, because it's going to provide

12
00:00:41.420 --> 00:00:44.210
navigational access from both sides.

13
00:00:44.480 --> 00:00:47.900
So on the child side, we say there is a many to one relationship.

14
00:00:47.900 --> 00:00:50.300
Many grades belong to one student.

15
00:00:52.190 --> 00:00:55.730
And on the parent side, we say there is a one to many relationship.

16
00:00:55.730 --> 00:01:02.180
One student is associated with many grades, and just like that, we have a bidirectional relationship.

17
00:01:02.210 --> 00:01:07.550
Now, another thing in this case, the owner of the relationship is the one who is managing the foreign

18
00:01:07.550 --> 00:01:08.450
key column.

19
00:01:08.570 --> 00:01:14.630
So because the grade table is the owner of the relationship on the other side, we need to put the mapped

20
00:01:14.630 --> 00:01:15.710
by parameter.

21
00:01:17.170 --> 00:01:20.330
What mapped by does is it tell spring JPA?

22
00:01:20.400 --> 00:01:25.720
Hey, the other table is the owner of this relationship, so please don't create another join table

23
00:01:25.720 --> 00:01:26.530
or anything.

24
00:01:26.530 --> 00:01:28.300
We'll talk about join tables later.

25
00:01:28.300 --> 00:01:34.900
But as a rule of thumb but mapped by goes on the side that isn't the owner of the relationship.

26
00:01:42.980 --> 00:01:49.910
So in order for this relationship to be bidirectional from the child side, we're saying that many grades

27
00:01:49.910 --> 00:01:52.160
belong to one student.

28
00:01:53.040 --> 00:01:54.840
And now from the parent side.

29
00:01:55.610 --> 00:02:02.270
We need to specify that one student associates with many grades, so we're going to have a one to many

30
00:02:02.270 --> 00:02:08.060
relationship between one student and a list of grades.

31
00:02:11.050 --> 00:02:12.270
But that's not enough.

32
00:02:12.280 --> 00:02:14.140
Now we need to tell Spring JPA.

33
00:02:14.170 --> 00:02:19.060
The relationship is already being mapped by the owner of this relationship, the one that's managing

34
00:02:19.060 --> 00:02:22.150
the foreign column, which binds our two tables together.

35
00:02:22.180 --> 00:02:27.250
If you don't put mapped by if I were to view the H two console right now, this is what we would have.

36
00:02:27.370 --> 00:02:31.570
Spring is going to create a join table in an attempt to map the relationship.

37
00:02:31.600 --> 00:02:33.940
We absolutely do not want that.

38
00:02:34.360 --> 00:02:38.890
We want to set map to buy equal to the property that maps the relationship.

39
00:02:42.730 --> 00:02:45.550
And make sure the string is an exact match.

40
00:02:47.570 --> 00:02:52.110
And by doing that, we're instructing JPA do not create another joint table.

41
00:02:52.130 --> 00:02:55.130
The relationship is already being mapped over here.

42
00:02:55.280 --> 00:02:55.820
Perfect.

43
00:02:55.820 --> 00:03:01.580
Now we have navigational access from both sides, and we do get some errors because now the complete

44
00:03:01.580 --> 00:03:04.730
constructor is going to expect for parameters.

45
00:03:08.490 --> 00:03:09.900
So here's what we'll do.

46
00:03:09.930 --> 00:03:14.550
Back over to my student entity.

47
00:03:15.180 --> 00:03:20.150
Instead of an all ARGs constructor, we're going to say required args constructor.

48
00:03:20.160 --> 00:03:24.540
We want a constructor that only updates a certain number of fields.

49
00:03:24.540 --> 00:03:26.600
Which fields is it going to update?

50
00:03:26.610 --> 00:03:29.370
Well, the ones that are non null.

51
00:03:29.550 --> 00:03:33.990
So we're going to mark this field as non null.

52
00:03:34.900 --> 00:03:36.160
And this one as well.

53
00:03:41.720 --> 00:03:46.250
I can go back here and remove all the IDs because they will be auto generated.

54
00:03:51.350 --> 00:03:57.590
So now every time we create a new student object, it's going to update these two fields with these

55
00:03:57.590 --> 00:03:58.820
two parameters.

56
00:04:01.620 --> 00:04:09.000
The ID at first is going to be null, but that's fine because it will eventually be auto generated and

57
00:04:09.000 --> 00:04:11.340
we don't care about this being null right now.

58
00:04:12.090 --> 00:04:15.360
As our opera runs, our four students will get submitted.

59
00:04:15.360 --> 00:04:16.620
So let's query them.

60
00:04:19.220 --> 00:04:22.310
I'll copy this because it will prompt me to reconnect.

61
00:04:24.530 --> 00:04:26.260
And it's not even doing that.

62
00:04:26.270 --> 00:04:26.780
So.

63
00:04:28.400 --> 00:04:28.750
Oh.

64
00:04:28.760 --> 00:04:30.620
Do we have an error of some sort?

65
00:04:32.440 --> 00:04:33.280
Let's see.

66
00:04:37.820 --> 00:04:38.750
The constructor.

67
00:04:38.780 --> 00:04:41.720
Student Long string local date.

68
00:04:45.670 --> 00:04:47.690
And it seems to be confused.

69
00:04:47.710 --> 00:04:51.700
So what I'm going to do is just restart the app.

70
00:05:06.070 --> 00:05:06.580
Okay.

71
00:05:06.610 --> 00:05:07.780
Much better now.

72
00:05:15.340 --> 00:05:18.100
Here we can see our four students are submitted.

73
00:05:18.100 --> 00:05:22.600
Let's make a get request from Postman and Access the student with an ID of one.

74
00:05:27.010 --> 00:05:33.970
And we see that now the student has a grades property so as get student returns back this record as

75
00:05:33.970 --> 00:05:34.990
an object.

76
00:05:35.880 --> 00:05:40.980
All four fields are serialized into JSON before being returned to the consumer.

77
00:05:41.010 --> 00:05:47.280
This one gets converted into a JSON array, but right now Harry doesn't have any grades, so the array

78
00:05:47.280 --> 00:05:47.910
is empty.

79
00:05:48.180 --> 00:05:49.530
Looking good so far.

80
00:05:49.950 --> 00:05:57.000
But unfortunately when we end up returning a student entity and then serializing all of its fields into

81
00:05:57.000 --> 00:06:04.050
JSON properties, we cannot allow the list of entities to be part of the serialization process.

82
00:06:04.050 --> 00:06:07.650
So we have to put JSON ignore over here.

83
00:06:08.250 --> 00:06:13.920
We don't want this to be part of the JSON that gets sent back and I'll explain why very soon.

84
00:06:14.070 --> 00:06:19.350
What I'm going to do now is create a temporary method inside of the student service implementation.

85
00:06:19.920 --> 00:06:21.960
And I'm just going to call this method.

86
00:06:22.880 --> 00:06:24.110
Print grids.

87
00:06:26.790 --> 00:06:29.040
It's going to receive a student entity.

88
00:06:31.520 --> 00:06:35.360
And it's just going to loop through every single grade from the grades list.

89
00:06:49.070 --> 00:06:54.380
And for every grade that we iterate through, we're going to print the score, grade dot, get score.

90
00:06:57.490 --> 00:06:58.060
All right.

91
00:06:58.060 --> 00:07:00.700
And as we retrieve a student.

92
00:07:01.540 --> 00:07:02.830
We're just going to call.

93
00:07:03.570 --> 00:07:04.680
Print grades.

94
00:07:07.000 --> 00:07:09.160
It's going to perform the query twice for now.

95
00:07:09.160 --> 00:07:13.300
But whatever this method is temporary, we're going to be deleting it very soon.

96
00:07:14.090 --> 00:07:17.360
Now I'm going to go back and save two grades for Harry.

97
00:07:22.220 --> 00:07:24.290
I'll give Harry one A-plus.

98
00:07:26.140 --> 00:07:27.760
And I'll give him a D-plus.

99
00:07:32.750 --> 00:07:33.890
Let's refresh.

100
00:07:34.070 --> 00:07:35.990
See if everything is working properly.

101
00:07:38.410 --> 00:07:38.950
It is.

102
00:07:38.950 --> 00:07:40.960
Harry has an A+ and a D plus.

103
00:07:41.780 --> 00:07:45.280
I've got four students, two grades, all belonging to Harry.

104
00:07:45.290 --> 00:07:47.240
So if I query Harry.

105
00:07:51.760 --> 00:07:57.610
And so the first thing you'll notice is that as Spring Boot was returning the student entity, it ignored

106
00:07:57.610 --> 00:08:00.550
the grades field during the serialization process.

107
00:08:01.030 --> 00:08:04.420
And now from here I can see that all of Henry's grades were printed.

108
00:08:06.070 --> 00:08:12.010
So over here we were actually able to access all of the grades from the student entity, from the parent

109
00:08:12.010 --> 00:08:12.700
side.

110
00:08:13.170 --> 00:08:13.380
Okay.

111
00:08:13.420 --> 00:08:17.890
But just because we now have two way access, it doesn't mean that now I'm going to go start setting

112
00:08:17.890 --> 00:08:22.600
up another handler method in the student controller that says Get the students grades.

113
00:08:23.500 --> 00:08:28.240
I'm already accessing the grade data from the greater repository and I'm satisfied with that.

114
00:08:28.240 --> 00:08:32.710
So I'm going to go back to the student service implementation and delete this method.

115
00:08:32.740 --> 00:08:37.630
It was just to show you that now we have navigational access from both sides.

116
00:08:38.360 --> 00:08:39.559
And we're good.

117
00:08:39.770 --> 00:08:45.110
The reason we made the relationship bi directional is because we have a very big bug in our app right

118
00:08:45.110 --> 00:08:45.530
now.

119
00:08:45.530 --> 00:08:47.480
We will address that bug in the next video.

120
00:08:47.480 --> 00:08:48.620
Don't worry about it for now.

121
00:08:48.620 --> 00:08:54.590
But before we wrap up, I want to talk about why I put this JSON ignore field.

122
00:08:55.840 --> 00:08:57.010
Just follow for now.

123
00:08:57.040 --> 00:08:59.620
Don't do what I'm doing inside the command line.

124
00:08:59.620 --> 00:09:00.030
Runner.

125
00:09:00.040 --> 00:09:02.650
I'm going to paste in the following grade.

126
00:09:07.580 --> 00:09:07.820
Um.

127
00:09:08.030 --> 00:09:09.030
Let's just auto wire.

128
00:09:09.050 --> 00:09:10.100
Great repository.

129
00:09:23.350 --> 00:09:25.060
Let's go to the H two database.

130
00:09:31.080 --> 00:09:31.950
And there you go.

131
00:09:32.520 --> 00:09:34.650
Now, if I remove Jason, ignore.

132
00:09:38.140 --> 00:09:40.690
And I'm going to try to query Harry Potter.

133
00:09:46.150 --> 00:09:48.310
The request gets aborted.

134
00:09:49.200 --> 00:09:51.120
We can't really tell what's happening here.

135
00:09:51.120 --> 00:09:55.140
So what I'm going to do is make this same get request from the terminal.

136
00:09:55.710 --> 00:09:57.180
So I'm going to say Curl.

137
00:09:58.680 --> 00:10:00.180
And copy this path.

138
00:10:03.430 --> 00:10:04.120
All right.

139
00:10:04.120 --> 00:10:05.390
And what is all this junk?

140
00:10:05.410 --> 00:10:07.300
Let's crawl all the way to the top.

141
00:10:11.610 --> 00:10:19.530
And the reason why we get this recursive loop is because as spring boot tries to serialize every field

142
00:10:19.530 --> 00:10:22.770
into a JSON property, it starts with the ID.

143
00:10:22.830 --> 00:10:24.150
Okay, that's fine.

144
00:10:24.360 --> 00:10:27.570
Followed by the name and then the birth date.

145
00:10:28.140 --> 00:10:33.540
And once we get to grades, every grade entity references a student.

146
00:10:33.540 --> 00:10:36.000
So now it starts going in a loop.

147
00:10:36.030 --> 00:10:42.600
The grades contains a student, starts serializing the student again data and then you get this loop

148
00:10:42.600 --> 00:10:44.100
that never ends.

149
00:10:44.100 --> 00:10:47.730
So as we send back the student, we need to tell Spring Boot.

150
00:10:47.760 --> 00:10:53.880
As you're serializing every single field into a JSON property, please just ignore this one.

151
00:10:53.880 --> 00:10:55.050
We don't want to send it back.

152
00:10:55.050 --> 00:10:56.100
It's troublesome.

153
00:10:56.910 --> 00:11:00.930
So to recap, you set up a bidirectional one to many relationship.

154
00:11:00.930 --> 00:11:04.380
So on the child side we say there is a many to one relationship.

155
00:11:04.380 --> 00:11:10.260
Many grades belong to one student, and on the parent side we say there is a one to many relationship.

156
00:11:10.260 --> 00:11:16.560
One student is associated with many grades, and just like that, we have navigational access from both

157
00:11:16.560 --> 00:11:17.460
sides.

