WEBVTT
1
00:00:00.240 --> 00:00:05.010
Finally, it has many utility methods that can apply to a wide range of types.

2
00:00:05.040 --> 00:00:10.890
You saw that a variable expression can be used to return a model attribute or a value that derives from

3
00:00:10.890 --> 00:00:11.400
it.

4
00:00:11.490 --> 00:00:14.850
It can execute a condition based on a model attributes.

5
00:00:14.940 --> 00:00:21.570
It can also be used in a loop, and it can also execute a utility method on a model attributes.

6
00:00:21.600 --> 00:00:25.350
In this lesson, we'll be looking at executing utility methods.

7
00:00:29.430 --> 00:00:29.730
Now.

8
00:00:29.730 --> 00:00:37.530
Finally, he has methods that can operate on arrays, calendars, dates, lists, maps, numbers, objects,

9
00:00:37.530 --> 00:00:38.820
sets, strings.

10
00:00:38.820 --> 00:00:40.920
And I'm probably even missing a few.

11
00:00:41.430 --> 00:00:47.550
This gives us a lot of flexibility and in my opinion it's a very powerful feature because it allows

12
00:00:47.550 --> 00:00:53.460
you to perform very special operations on pretty much any data type that could exist in our model.

13
00:00:54.120 --> 00:00:56.180
And the syntax is as follows.

14
00:00:56.190 --> 00:01:00.360
So you've got your variable expression followed by a pound sign.

15
00:01:00.360 --> 00:01:04.200
Which time leave class do you need utility methods from?

16
00:01:04.290 --> 00:01:09.660
If you're operating on a string, then you would need a utility method from the strings class.

17
00:01:09.720 --> 00:01:14.880
If you're operating on a date, then you would need a utility method from the data class.

18
00:01:14.970 --> 00:01:18.600
Let's assume we're operating on strings next.

19
00:01:18.600 --> 00:01:22.140
Which method do you want to grab from the strings class?

20
00:01:22.290 --> 00:01:25.170
Let's assume we want to grab the contains method.

21
00:01:25.590 --> 00:01:29.220
This method, like any java function expects parameters.

22
00:01:29.220 --> 00:01:31.980
The first parameter is usually the target.

23
00:01:31.980 --> 00:01:37.320
In other words, the value that you're operating on, which will always be your model attributes.

24
00:01:37.680 --> 00:01:40.380
The parameters that follow depend on the method.

25
00:01:41.960 --> 00:01:48.380
And the contains method returns a boolean value of true or false, and the resulting value can be displayed

26
00:01:48.380 --> 00:01:50.110
with something like thin leaf text.

27
00:01:50.120 --> 00:01:51.920
You can do whatever you want with the value.

28
00:01:55.750 --> 00:01:56.020
Okay.

29
00:01:56.020 --> 00:02:00.700
Now, what I want you to do is open up the starter project for this lesson by following this path in

30
00:02:00.700 --> 00:02:02.260
your course resources.

31
00:02:09.389 --> 00:02:13.090
Here you can see the handler method right as it's about to return the view.

32
00:02:13.110 --> 00:02:20.430
It adds an attribute to the model called Menu that maps to a string that says we sell chocolate rice

33
00:02:20.430 --> 00:02:22.170
cakes and bubble tea.

34
00:02:22.440 --> 00:02:29.910
And now back inside of The View, what we want to do is see if the string being passed in.

35
00:02:30.240 --> 00:02:32.790
We sell chocolate rice cakes and bubble tea.

36
00:02:32.820 --> 00:02:35.760
Does it contain the word rice cakes?

37
00:02:36.450 --> 00:02:38.670
And then we want to display the results.

38
00:02:38.670 --> 00:02:41.460
We will display the result with live text.

39
00:02:42.980 --> 00:02:48.620
And somehow in this variable expression, we need to check if the model attribute menu.

40
00:02:48.650 --> 00:02:51.710
Does the string contain the word rice cakes?

41
00:02:51.920 --> 00:02:55.940
So I need to find a utility method that can perform this task.

42
00:02:56.090 --> 00:03:02.600
Since we're operating on a string, we're going to need a utility method from the strings class.

43
00:03:02.810 --> 00:03:06.390
So this link is inside of your resources folder.

44
00:03:06.410 --> 00:03:08.510
Please make sure to click on it.

45
00:03:10.160 --> 00:03:15.680
And now down here, I'm going to scroll down to the strings class and now I'm going to try to look for

46
00:03:15.680 --> 00:03:19.790
a utility method that we can use to operate on the string menu.

47
00:03:20.580 --> 00:03:21.930
All right.

48
00:03:23.910 --> 00:03:25.110
Contains.

49
00:03:25.230 --> 00:03:29.820
It expects to parameters the target, the value that you're operating on.

50
00:03:30.030 --> 00:03:33.960
And the second parameter is the fragment that you're looking for.

51
00:03:33.990 --> 00:03:39.750
So if the target you're operating on contains the fragment, this is going to return.

52
00:03:39.750 --> 00:03:40.260
True.

53
00:03:42.840 --> 00:03:43.140
Okay.

54
00:03:43.140 --> 00:03:46.860
So we'll go back here, followed by a pound sign.

55
00:03:46.860 --> 00:03:50.760
Which time leaf class are we grabbing utility methods from?

56
00:03:51.030 --> 00:03:54.870
In this case, we're going to grab a utility method from the strings class.

57
00:03:55.560 --> 00:03:58.050
The method we want to grab is contains.

58
00:03:59.170 --> 00:04:05.960
And contains accepts to parameters the target, the value that you're operating on.

59
00:04:05.980 --> 00:04:08.800
In this case, it's our model attributes.

60
00:04:10.160 --> 00:04:14.300
And don't worry, it's going to know to grab the menu model attributes.

61
00:04:17.519 --> 00:04:21.450
And the second parameter in this case is your fragment.

62
00:04:21.720 --> 00:04:26.460
So we're going to check if the string that menu maps to.

63
00:04:26.490 --> 00:04:29.910
Does it contain the fragment rice cakes?

64
00:04:30.770 --> 00:04:36.800
And if you're ever putting a plane string inside of a thin leaf expression, please make sure to wrap

65
00:04:36.800 --> 00:04:38.720
it in single quotes.

66
00:04:39.580 --> 00:04:40.720
All right.

67
00:04:43.550 --> 00:04:45.800
This utility method is going to return.

68
00:04:45.800 --> 00:04:52.340
A Boolean value of true or false and timely text will display the resulting boolean value.

69
00:04:52.430 --> 00:04:54.110
So let's try this out.

70
00:05:08.840 --> 00:05:11.330
I'm going to go to local host 8080.

71
00:05:12.330 --> 00:05:14.040
And it displays true.

72
00:05:14.550 --> 00:05:15.480
All right.

73
00:05:15.660 --> 00:05:20.070
What if I say, does the menu include.

74
00:05:23.770 --> 00:05:24.880
Creme brulÃ©e.

75
00:05:27.320 --> 00:05:28.700
Not even sure that's how you spell it.

76
00:05:28.700 --> 00:05:31.160
But anyways, that is false.

77
00:05:35.430 --> 00:05:41.730
Now the boolean value that comes out of this expression, I can even use it in a ternary operation here.

78
00:05:41.730 --> 00:05:47.010
I can say if the value is true, then I'm going to display the text.

79
00:05:49.570 --> 00:05:51.220
We have this item.

80
00:05:53.430 --> 00:05:56.190
Otherwise I will display.

81
00:05:56.990 --> 00:05:59.480
We do not have this item.

82
00:06:01.030 --> 00:06:04.090
All right, don't be frightened.

83
00:06:04.120 --> 00:06:07.300
This is just a regular ternary operation.

84
00:06:07.330 --> 00:06:11.200
If this is true, fine leaf text will equal this value.

85
00:06:11.230 --> 00:06:15.010
If this is false, fine leaf text will equal the other value.

86
00:06:19.810 --> 00:06:21.570
We do not have this item.

87
00:06:21.580 --> 00:06:24.310
Let's put this back to rice cakes.

88
00:06:28.800 --> 00:06:29.790
Beautiful.

89
00:06:34.570 --> 00:06:41.290
Now I want you to think about the power that you have being able to leverage all of these utility methods

90
00:06:41.290 --> 00:06:43.540
for a wide range of types.

91
00:06:43.570 --> 00:06:49.600
You can do pretty much anything that you want in life, and I really hope this makes you appreciate

92
00:06:49.600 --> 00:06:52.180
how powerful the family library is.

93
00:06:54.920 --> 00:06:58.430
In this lesson you learned about leaf utility methods.

94
00:07:02.090 --> 00:07:05.250
This wraps up our discussion on variable expressions.

95
00:07:05.270 --> 00:07:11.180
You saw that a variable expression can return a model attribute or a value that derives from it.

96
00:07:11.330 --> 00:07:14.630
It can execute a condition based on a model attributes.

97
00:07:14.660 --> 00:07:21.230
A variable expression can also be used in a loop, and it can also execute utility methods on a model

98
00:07:21.230 --> 00:07:22.130
attributes.

