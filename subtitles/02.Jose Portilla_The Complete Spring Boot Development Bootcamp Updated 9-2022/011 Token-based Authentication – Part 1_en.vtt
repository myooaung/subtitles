WEBVTT
1
00:00:00.180 --> 00:00:04.350
In this lesson, we're gonna implement pathway number one of token based authentication.

2
00:00:04.350 --> 00:00:07.260
Let's remember pathway number one, which was fairly simple.

3
00:00:07.290 --> 00:00:10.410
The user makes a request to slash register.

4
00:00:10.410 --> 00:00:16.140
We are going to have a security rule that permits all requests on the path register without the need

5
00:00:16.140 --> 00:00:22.680
to authenticate and the request is going to get executed and their credentials will get saved to an

6
00:00:22.680 --> 00:00:23.880
SQL database.

7
00:00:24.270 --> 00:00:24.990
All right.

8
00:00:24.990 --> 00:00:32.009
So going back to our security config, every single path needs to be protected except for the sign up

9
00:00:32.009 --> 00:00:32.759
path.

10
00:00:32.790 --> 00:00:35.460
It needs to be public so that people can register.

11
00:00:35.460 --> 00:00:38.490
So what we can do is create another security rule.

12
00:00:38.490 --> 00:00:47.700
We'll say dot and matches and publicly authorize any post request that is made on the path slash register,

13
00:00:47.700 --> 00:00:51.840
which is a constant inside of security constants that java.

14
00:00:58.240 --> 00:00:59.590
Don't permit all.

15
00:01:02.040 --> 00:01:06.030
So any request made here will not require any authentication.

16
00:01:06.030 --> 00:01:12.150
Requests made here will not require authentication as well, but any other request needs to be protected

17
00:01:12.150 --> 00:01:14.250
and will require authentication.

18
00:01:14.910 --> 00:01:19.200
And now the next step of our process is to save the user's credentials when they sign up.

19
00:01:19.200 --> 00:01:23.940
So we'll go back over here inside of user controller Java here.

20
00:01:23.940 --> 00:01:28.050
For some reason it says core service, it should be user service.

21
00:01:28.500 --> 00:01:34.740
And so here we are serializing the contents of the incoming JSON into the properties of a user object

22
00:01:34.740 --> 00:01:36.810
using the request body annotation.

23
00:01:36.810 --> 00:01:43.080
Over here we're going to say user service dot save and we'll save the user.

24
00:01:44.040 --> 00:01:50.160
And the user entity that gets returned will be serialized into JSON and sent back as a response.

25
00:01:50.490 --> 00:01:51.380
All right.

26
00:01:51.390 --> 00:01:56.400
Now, over in grade or user service, we need to make some changes.

27
00:01:56.700 --> 00:02:00.780
The user name can be stored in plain text, so we don't care about that.

28
00:02:00.780 --> 00:02:03.180
But the password needs to be encrypted.

29
00:02:03.210 --> 00:02:06.540
You should never, ever store a password in plain text.

30
00:02:06.540 --> 00:02:12.930
And so for this reason I have ordered the decrypt password encoder bin that we have configured right

31
00:02:12.930 --> 00:02:13.770
over here.

32
00:02:13.770 --> 00:02:21.660
And what I'm going to do is use the Decrypt password encoder to perform a one way hash on the password

33
00:02:21.660 --> 00:02:22.640
that they pass in.

34
00:02:22.650 --> 00:02:29.160
So we'll say B script password, encoder dot encode user, dot get password.

35
00:02:29.160 --> 00:02:33.300
And we're going to set the user's password equal to the hashed password.

36
00:02:34.650 --> 00:02:37.170
Before saving it to our database.

37
00:02:41.650 --> 00:02:42.030
All right.

38
00:02:42.040 --> 00:02:43.690
Think we're ready to run our code?

39
00:02:47.560 --> 00:02:52.390
If you want to view what's happening step by step, you can feel free to run this application in debug

40
00:02:52.390 --> 00:02:54.790
mode in the interest of time.

41
00:02:54.790 --> 00:02:56.080
I'm not going to do that.

42
00:03:00.680 --> 00:03:01.310
All right.

43
00:03:01.310 --> 00:03:08.300
And so to the greater requests collection that we created earlier in the SQL section, I added another

44
00:03:08.300 --> 00:03:09.920
folder called user.

45
00:03:09.920 --> 00:03:17.330
And to the user folder, I'm going to add a request called Create User.

46
00:03:18.330 --> 00:03:29.520
It will be a post request and here we're going to say local host 8080 slash is it slash user slash register.

47
00:03:29.550 --> 00:03:35.610
Let me just make sure it is slash user slash register.

48
00:03:36.270 --> 00:03:37.250
All right.

49
00:03:37.260 --> 00:03:39.090
In the request body.

50
00:03:40.010 --> 00:03:42.140
We're going to include a JSON.

51
00:03:44.350 --> 00:03:52.570
And we expect the contents of our JSON to be serialized and the properties of a user object.

52
00:03:52.570 --> 00:03:56.800
So we need to make sure to send over a username as well as a password.

53
00:03:57.190 --> 00:04:01.820
Here we're going to say username and you can put in whatever you want.

54
00:04:01.840 --> 00:04:04.390
I'll just say Green Dot Slim three.

55
00:04:05.240 --> 00:04:07.340
And the password.

56
00:04:08.680 --> 00:04:09.300
I don't know.

57
00:04:09.310 --> 00:04:11.020
I'm going to say learn the part.

58
00:04:12.410 --> 00:04:12.940
Okay.

59
00:04:12.950 --> 00:04:14.120
I'll send it over.

60
00:04:15.440 --> 00:04:17.000
And it works beautifully.

61
00:04:17.779 --> 00:04:24.680
Our request bypassed all of these filters because we added a security rule that permits every request

62
00:04:24.680 --> 00:04:26.840
made on the register path.

63
00:04:26.870 --> 00:04:28.520
It is publicly available.

64
00:04:29.450 --> 00:04:35.990
Each field in the JSON, each field and the request body was the serialized into the properties of a

65
00:04:35.990 --> 00:04:37.280
user object.

66
00:04:37.280 --> 00:04:43.790
And before saving that user object, we set the password equal to an encoded version of the learn the

67
00:04:43.790 --> 00:04:47.940
part password and then save that into our SQL database.

68
00:04:47.960 --> 00:04:52.370
If we go to the H two console, we will be able to view it.

69
00:04:55.690 --> 00:04:58.030
And there is our user signed up.

70
00:04:58.420 --> 00:05:03.040
Now what if the user were to pass in a blank username or a blank password?

71
00:05:04.840 --> 00:05:07.350
We get back a 400 bad request.

72
00:05:07.360 --> 00:05:09.100
Let's try it with the username as well.

73
00:05:09.430 --> 00:05:10.930
400 bad requests.

74
00:05:10.960 --> 00:05:16.070
The reason this happens, I already set this up for you for the sake of not being redundant.

75
00:05:16.090 --> 00:05:21.370
We covered this many times in the past, but we've got the valid annotation over here that performs

76
00:05:21.370 --> 00:05:27.340
a validation on the user object that gets populated from the fields and the request body.

77
00:05:27.760 --> 00:05:36.130
We added validation constraints on the username and password so that they cannot be blank as the values

78
00:05:36.130 --> 00:05:40.060
from the JSON get serialized into these properties.

79
00:05:40.090 --> 00:05:43.920
Our username and password and the being blank, which is unacceptable.

80
00:05:43.930 --> 00:05:51.700
The validation process fails and the result of this validation was carried inside of a binding result.

81
00:05:51.700 --> 00:05:58.330
And upon sending back an HTTP status of bad request, we appended all of the errors from the binary

82
00:05:58.330 --> 00:06:01.990
result into an error response and sent it over.

83
00:06:02.170 --> 00:06:05.710
All right, we are done with pathway number one.

84
00:06:05.710 --> 00:06:10.000
The user is able to make a request to register without having to authenticate.

85
00:06:10.000 --> 00:06:13.410
The request gets executed and their credentials get saved.

86
00:06:13.420 --> 00:06:15.520
Let's move on to pathway number two.

