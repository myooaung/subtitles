WEBVTT
1
00:00:00.740 --> 00:00:04.100
In this lesson, you will retrieve a grade based on a student ID.

2
00:00:06.160 --> 00:00:11.080
There's something very special about the fact that our user defined repository is an interface, not

3
00:00:11.080 --> 00:00:12.100
a class.

4
00:00:12.220 --> 00:00:18.040
You'll remember that Spring Boot automatically creates an implementation of this interface which inherits

5
00:00:18.040 --> 00:00:21.370
all of the predefined methods from the CRUD repository.

6
00:00:21.610 --> 00:00:27.790
This implementation lives inside the spring container as a bean, and we're auto wiring this bean wherever

7
00:00:27.790 --> 00:00:28.660
we want.

8
00:00:29.140 --> 00:00:35.320
On top of these predefined operations, we can add our own queries to the repository as long as we follow

9
00:00:35.320 --> 00:00:37.720
a very specific naming convention.

10
00:00:38.380 --> 00:00:40.320
First you start with your action.

11
00:00:40.330 --> 00:00:41.860
What are you trying to do?

12
00:00:41.980 --> 00:00:44.560
In this case, we want to find by.

13
00:00:44.860 --> 00:00:48.490
We want to find an existing record based on a set of criteria.

14
00:00:48.940 --> 00:00:51.710
And then what follows is your field values.

15
00:00:51.730 --> 00:00:55.720
Your field values must match the name of your columns.

16
00:00:56.790 --> 00:01:03.000
So if I want to query a grade based on a student ID that it belongs to the convention and SQL, as you

17
00:01:03.000 --> 00:01:06.600
can see, is to use underscore to separate two words.

18
00:01:06.600 --> 00:01:13.260
But in Java you can match it with camel case and then obviously it would expect an ID value to be passed

19
00:01:13.260 --> 00:01:13.650
in.

20
00:01:16.390 --> 00:01:22.780
If you follow this naming convention spring, JP's query builder will take care of the rest, which

21
00:01:22.780 --> 00:01:24.220
I think is very powerful.

22
00:01:24.340 --> 00:01:28.300
All we have to do is define a method signature inside the interface.

23
00:01:29.430 --> 00:01:33.120
And a spring boot automatically creates an implementation of your interface.

24
00:01:33.120 --> 00:01:39.240
It's going to override this method and derive a query based on how it interprets your method signature.

25
00:01:43.900 --> 00:01:50.260
So over here, inside of the grid repository, I'm going to define a custom query that can find a grade

26
00:01:50.260 --> 00:01:51.790
based on a student ID.

27
00:01:51.820 --> 00:01:53.830
The return type will be grade.

28
00:01:54.840 --> 00:01:57.690
And then I will start with my prefix fine by.

29
00:01:59.060 --> 00:02:01.950
Followed by what my query is based on.

30
00:02:01.970 --> 00:02:06.700
In this case, I want to find a grade based on the student ID column.

31
00:02:06.710 --> 00:02:10.220
So we're going to say find by student.

32
00:02:11.370 --> 00:02:12.150
I'd.

33
00:02:14.950 --> 00:02:21.220
And this custom query is going to attempt to find a grade based on whatever student ID we pass in.

34
00:02:22.890 --> 00:02:23.670
All right.

35
00:02:23.670 --> 00:02:24.600
Out of the box.

36
00:02:24.600 --> 00:02:30.030
As Spring Boot creates an implementation of your interface, it will override this method and build

37
00:02:30.030 --> 00:02:33.210
a query based on how it interprets your method signature.

38
00:02:33.210 --> 00:02:36.870
Which is beautiful because now I can just finalize my service method.

39
00:02:37.170 --> 00:02:43.380
I can go over to course service implementation and oh sorry, great service implementation and I can

40
00:02:43.380 --> 00:02:52.440
say great repository dot find by student ID, student ID, and now I can go back to my grade controller.

41
00:02:53.440 --> 00:02:55.780
And here I will say great service.

42
00:02:56.330 --> 00:02:58.750
Dot get grade.

43
00:02:59.630 --> 00:03:01.450
You can ignore the course ID for now.

44
00:03:01.460 --> 00:03:02.690
We're not using it.

45
00:03:04.340 --> 00:03:05.660
And that should be on.

46
00:03:09.090 --> 00:03:13.860
I'm going to submit a grade for I guess I think this is her mining.

47
00:03:17.650 --> 00:03:19.420
I'm going to copy this path.

48
00:03:19.690 --> 00:03:25.450
What you put for the course doesn't really matter because our query is purely based on the student ID.

49
00:03:25.450 --> 00:03:29.410
But anyways, let's copy the exact path over to read grade.

50
00:03:31.230 --> 00:03:35.110
And we're going to try to find a grade based on a student ID of three.

51
00:03:35.130 --> 00:03:36.630
Let's see if it works out.

52
00:03:37.080 --> 00:03:38.270
And it gets her mini.

53
00:03:38.280 --> 00:03:39.720
That is awesome.

54
00:03:42.260 --> 00:03:45.830
Fined by student ID received an ID of three.

55
00:03:45.860 --> 00:03:49.490
The grade repository was able to successfully query our table.

56
00:03:49.700 --> 00:03:51.320
Returned a grade.

57
00:03:51.320 --> 00:03:58.370
And over here we serialized whatever object was returned into JSON and the result was the following

58
00:03:58.400 --> 00:04:01.520
a grade of A+ that belongs to her mini.

