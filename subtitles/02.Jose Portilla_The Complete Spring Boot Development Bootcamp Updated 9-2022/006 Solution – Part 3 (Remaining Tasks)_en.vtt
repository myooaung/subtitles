WEBVTT
1
00:00:00.240 --> 00:00:01.260
Welcome back, everyone.

2
00:00:01.260 --> 00:00:07.290
In this video, we're going to cover the remaining solution four part three and Task five introduces

3
00:00:07.290 --> 00:00:10.290
a new topic known as flash attribute.

4
00:00:10.410 --> 00:00:15.300
A flash attribute contains data that survives a redirect.

5
00:00:15.300 --> 00:00:18.390
And so what would be the purpose of doing this?

6
00:00:18.810 --> 00:00:25.740
Well, let's imagine that the user initiated a post request and will submit intercepts this post request

7
00:00:25.740 --> 00:00:33.950
and whether they want to add a new object to the data store or update an existing object.

8
00:00:33.960 --> 00:00:41.010
Either way, this form submission is going to succeed and right after the post request is made, it's

9
00:00:41.010 --> 00:00:47.430
going to redirect the user to make another request on slash inventory, and then inventory is going

10
00:00:47.430 --> 00:00:49.680
to display the updated data store.

11
00:00:50.040 --> 00:00:55.890
Now what if inside of inventory we want to have a nice big banner that says the form submission was

12
00:00:55.890 --> 00:00:56.700
successful?

13
00:00:56.820 --> 00:01:03.180
The problem is, the only way for us to know if the form submission is successful is right after the

14
00:01:03.180 --> 00:01:04.950
form submission right here.

15
00:01:04.950 --> 00:01:10.110
So here we would need to temporarily save a flash attribute.

16
00:01:11.430 --> 00:01:17.110
The flash attribute would contain data that describes the status of our form submission.

17
00:01:17.130 --> 00:01:24.720
In this case, let's just say we define a flash attribute with a key of status and a value of success.

18
00:01:25.290 --> 00:01:32.340
And right after saving this flash attribute, we redirect the client to make a request on slash inventory.

19
00:01:32.400 --> 00:01:39.930
The flash attribute is going to survive the redirect, and as soon as the get request reaches get inventory

20
00:01:39.960 --> 00:01:45.690
data from the flash attribute is going to populate the model and then it's going to disappear.

21
00:01:45.750 --> 00:01:50.850
But now we already have that data inside the model and then inside the inventory.

22
00:01:50.850 --> 00:01:53.610
We can use that data to our advantage.

23
00:01:54.960 --> 00:02:01.890
And now the only way to save data that can survive a redirect is inside of redirect attributes.

24
00:02:02.160 --> 00:02:11.670
So inside of redirect attributes, we're going to add a flash attribute with key status.

25
00:02:11.970 --> 00:02:14.010
And what should the value be?

26
00:02:14.160 --> 00:02:15.660
It should be success.

27
00:02:15.660 --> 00:02:20.570
But notice here that they're not just loosely defining a value of success.

28
00:02:20.580 --> 00:02:22.660
They're declaring it as a constant.

29
00:02:22.680 --> 00:02:28.800
So over two constants dot java, i'm going to say public static final string.

30
00:02:31.390 --> 00:02:32.200
What was it called?

31
00:02:32.230 --> 00:02:32.630
Oh, yes.

32
00:02:32.650 --> 00:02:36.610
Success status is equal to success.

33
00:02:38.550 --> 00:02:44.640
And just as we're about to redirect the user to make another request on slash inventory, we're going

34
00:02:44.640 --> 00:02:51.510
to temporarily save a flash attribute with a key status that maps to a value of success.

35
00:02:58.550 --> 00:02:59.030
Och.

36
00:02:59.210 --> 00:03:05.450
And now by the time the get request reaches our handler method, our model is going to be populated

37
00:03:05.450 --> 00:03:07.400
with data from the flash attribute.

38
00:03:07.400 --> 00:03:13.700
And because our model contains this data, that means right before we return, the inventory view.

39
00:03:13.730 --> 00:03:15.890
Finally, F is able to access it.

40
00:03:17.000 --> 00:03:18.950
And so here it says.

41
00:03:21.070 --> 00:03:25.180
To display the following div only if status equals success.

42
00:03:25.420 --> 00:03:29.440
So I hope this made you think of the F attribute.

43
00:03:29.470 --> 00:03:31.210
We'll say f f.

44
00:03:32.270 --> 00:03:39.020
We will use a variable expression to grab the model attribute status and we're going to check if it

45
00:03:39.020 --> 00:03:40.310
equals success.

46
00:03:41.160 --> 00:03:46.260
If this evaluates the true, then this development is going to render.

47
00:03:47.350 --> 00:03:49.630
I think we're ready to run our code.

48
00:04:00.340 --> 00:04:01.570
We'll say local host.

49
00:04:01.570 --> 00:04:02.530
80, 80.

50
00:04:05.190 --> 00:04:07.020
Let's submit a couch.

51
00:04:07.020 --> 00:04:08.640
300 bucks.

52
00:04:11.170 --> 00:04:16.899
Any data, really submit the item and it says that we successfully submitted the item.

53
00:04:17.200 --> 00:04:24.160
Now, if I don't go through a form submission and if I just make a plain old get request on slash inventory,

54
00:04:24.400 --> 00:04:30.400
it just displays our table because now we're just making a plain old request to slash inventory.

55
00:04:30.400 --> 00:04:37.720
And the only thing it's going to add to the model is the items array list and display that we're making

56
00:04:37.720 --> 00:04:39.100
a lot of progress.

57
00:04:39.130 --> 00:04:45.880
Task seven is to forbid updates if the new order date has a five day discrepancy from the previous one.

58
00:04:46.240 --> 00:04:53.170
So what they're trying to say is if they decide to update this item with an order date that's five days

59
00:04:53.170 --> 00:04:56.950
off from the previous one, then we're going to say, Hey, this is absurd.

60
00:04:56.950 --> 00:04:58.300
We cannot allow it.

61
00:04:59.990 --> 00:05:05.210
The logic has already been provided, so you can feel free to just copy it into your editor.

62
00:05:07.120 --> 00:05:07.490
Huh?

63
00:05:07.840 --> 00:05:09.580
Turns out I've already copied it.

64
00:05:10.100 --> 00:05:10.720
Och.

65
00:05:13.340 --> 00:05:20.900
And now here I can only allow updates if and only if the dates are within five days of each other.

66
00:05:21.320 --> 00:05:28.100
So we're going to check if the new date from the post request item get date is the same as the date

67
00:05:28.100 --> 00:05:31.070
inside of the object in our array list.

68
00:05:31.840 --> 00:05:36.130
So we're going to grab the existing object at the index that we found.

69
00:05:39.510 --> 00:05:42.870
And we'll compare the old date against the new date.

70
00:05:42.870 --> 00:05:46.260
If they are within five days, we will allow the update.

71
00:05:46.590 --> 00:05:47.610
Otherwise.

72
00:05:50.010 --> 00:05:54.810
In this case, what I'll do is I'll set a string status.

73
00:05:55.080 --> 00:05:57.900
At first it's going to equal a success status.

74
00:05:58.530 --> 00:06:05.220
But if this doesn't execute, that means the user entered an invalid order date, which means we're

75
00:06:05.220 --> 00:06:07.410
going to set the status equal to.

76
00:06:07.620 --> 00:06:13.320
And I think instead of saying just failed, I'll create another constant.

77
00:06:14.970 --> 00:06:16.680
That says failed status.

78
00:06:19.870 --> 00:06:26.710
So if they break the rules, we're not going to do anything except set the status equal to failed constants

79
00:06:26.710 --> 00:06:28.690
that failed status.

80
00:06:29.820 --> 00:06:36.090
And the flash attribute will contain whatever the status of the form submission is.

81
00:06:40.510 --> 00:06:41.440
And now.

82
00:06:43.160 --> 00:06:47.480
The HTML that we're going to render in the event of a failed form.

83
00:06:47.480 --> 00:06:49.370
Submission is the following.

84
00:06:51.700 --> 00:06:52.420
So we'll see.

85
00:06:52.450 --> 00:06:53.740
Finally, if.

86
00:06:55.780 --> 00:06:57.100
The status.

87
00:06:57.960 --> 00:06:59.190
Is failed.

88
00:07:02.510 --> 00:07:04.850
Then we will display the following div.

89
00:07:05.890 --> 00:07:06.410
Okay.

90
00:07:07.480 --> 00:07:09.790
Um, I think we're done.

91
00:07:11.480 --> 00:07:13.670
This was a long journey.

92
00:07:14.480 --> 00:07:18.470
Let's say couch, 300 bucks, 50.99.

93
00:07:18.770 --> 00:07:20.220
We'll say May 5th.

94
00:07:22.360 --> 00:07:22.630
All right.

95
00:07:22.630 --> 00:07:30.040
Now, what I'm going to do is make an update where the order date is within five days of the old one.

96
00:07:30.610 --> 00:07:31.870
So we'll say.

97
00:07:33.440 --> 00:07:33.880
I don't know.

98
00:07:33.890 --> 00:07:35.000
March 9th.

99
00:07:36.200 --> 00:07:37.550
Works perfectly.

100
00:07:37.910 --> 00:07:44.300
But now I will make an update where the order date is a way off.

101
00:07:45.770 --> 00:07:47.720
And we fail to submit the item.

102
00:07:47.720 --> 00:07:49.100
It does not change.

103
00:07:49.340 --> 00:07:50.120
Beautiful.

104
00:07:52.050 --> 00:07:55.340
The last thing we have to do is visualize the runtime.

105
00:07:55.350 --> 00:07:56.830
Now this is optional.

106
00:07:56.850 --> 00:08:02.490
So if you fully understand what we did so far, by all means, feel free to skip it.

107
00:08:02.490 --> 00:08:07.890
If you want to trace the runtime line by line with me, then you are more than welcome to.

108
00:08:09.760 --> 00:08:11.650
So what I'm going to do.

109
00:08:14.450 --> 00:08:19.700
Is apply breakpoints to handle submit.

110
00:08:22.250 --> 00:08:25.750
Apply a break points to get inventory.

111
00:08:26.840 --> 00:08:28.670
Think that should be good enough.

112
00:08:29.210 --> 00:08:32.030
I'll run my application and debug mode.

113
00:08:39.460 --> 00:08:40.110
Okay.

114
00:08:46.290 --> 00:08:49.170
First thing I'll do is.

115
00:08:51.160 --> 00:08:52.150
Let's change it up.

116
00:08:52.150 --> 00:08:53.620
We'll say technology.

117
00:08:54.710 --> 00:09:01.250
Laptop price $2,000 discount to 44.

118
00:09:01.940 --> 00:09:05.540
We'll give it an order date of June 2nd.

119
00:09:06.200 --> 00:09:07.370
Submit the item.

120
00:09:08.590 --> 00:09:09.730
Let's see this in action.

121
00:09:09.730 --> 00:09:10.810
I am excited.

122
00:09:11.670 --> 00:09:15.690
So at first the status is going to start off as success.

123
00:09:16.510 --> 00:09:18.220
It's going to add this item.

124
00:09:22.200 --> 00:09:24.180
The status remains success.

125
00:09:24.180 --> 00:09:32.640
And so here it's going to temporarily save a flash attribute with key status and value of success.

126
00:09:32.730 --> 00:09:36.300
And this data is going to survive the redirect.

127
00:09:36.540 --> 00:09:41.160
Here, we're redirecting the client to make another request to slash inventory.

128
00:09:43.100 --> 00:09:50.000
And by the time the get request reaches get inventory, you'll notice that our model is already populated

129
00:09:50.000 --> 00:09:52.110
with data from the flash attribute.

130
00:09:52.130 --> 00:09:58.280
The data successfully survived the redirect and it was able to populate the model in the ensuing get

131
00:09:58.280 --> 00:09:59.150
request.

132
00:10:00.480 --> 00:10:01.590
That's beautiful.

133
00:10:02.350 --> 00:10:05.890
This model is once again updated with another attribute.

134
00:10:07.430 --> 00:10:09.290
The contents of our array list.

135
00:10:09.710 --> 00:10:13.550
And so now right before it returns, the inventory view.

136
00:10:16.140 --> 00:10:17.610
The status is success.

137
00:10:17.610 --> 00:10:20.880
So this banner is going to display.

138
00:10:22.310 --> 00:10:25.070
And the ArrayList has one item.

139
00:10:26.200 --> 00:10:30.310
So it's going to generate one table row press next.

140
00:10:31.680 --> 00:10:32.180
Great.

141
00:10:32.190 --> 00:10:34.410
We successfully submitted the item.

142
00:10:34.740 --> 00:10:37.350
If I just go to slash inventory.

143
00:10:40.140 --> 00:10:41.610
No submissions were made.

144
00:10:41.610 --> 00:10:48.750
So the only model attribute that gets added is the array list and it follows that we don't see any banners

145
00:10:48.750 --> 00:10:49.500
or anything.

146
00:10:50.320 --> 00:10:51.130
Now.

147
00:10:51.130 --> 00:10:54.490
This was submitted on June the second.

148
00:10:54.910 --> 00:11:04.690
If I try to make an update to this item such that it's more than five days off.

149
00:11:05.830 --> 00:11:07.120
Will submit the item.

150
00:11:08.680 --> 00:11:09.460
Okay.

151
00:11:11.550 --> 00:11:14.310
First, the status starts off as success.

152
00:11:16.290 --> 00:11:22.320
But this condition evaluated to false triggering the block, the status becomes failed.

153
00:11:23.010 --> 00:11:27.530
The data that we're storing right before the redirect is a status of failed.

154
00:11:27.540 --> 00:11:35.010
So by the time the redirected request reaches the get inventory handler method, the model contains

155
00:11:35.010 --> 00:11:40.140
an attribute with a key of status that maps to a value of failed.

156
00:11:41.830 --> 00:11:44.890
And so by the time we returned the inventory view.

157
00:11:46.240 --> 00:11:51.940
The div that's going to be displayed is the following because status equals failed.

158
00:11:52.600 --> 00:11:53.860
We step through it.

159
00:11:54.370 --> 00:11:56.590
It says you fail to submit the item.

160
00:11:56.980 --> 00:12:03.520
I hope you enjoyed this workbook so you'll realize by now that the challenges aren't always Hey, do

161
00:12:03.520 --> 00:12:05.770
the exact same thing we did in the lessons.

162
00:12:05.770 --> 00:12:11.140
They introduce new topics to challenge you, to think outside the box and do a little bit of your own

163
00:12:11.140 --> 00:12:11.950
research.

164
00:12:11.950 --> 00:12:14.020
So I hope this wasn't too hard.

165
00:12:14.020 --> 00:12:18.250
The next section is going to be even more exciting as we tackle field validation.

166
00:12:18.250 --> 00:12:20.470
So I cannot wait to see you there.

