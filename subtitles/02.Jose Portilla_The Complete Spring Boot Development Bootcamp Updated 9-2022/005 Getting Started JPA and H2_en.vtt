WEBVTT
1
00:00:00.880 --> 00:00:06.160
JPA allows a spring boot application to communicate with a relational database.

2
00:00:06.340 --> 00:00:11.050
In this lesson, you will install two dependencies h two as well as JPA.

3
00:00:11.440 --> 00:00:14.050
So why are we installing these dependencies?

4
00:00:14.230 --> 00:00:18.190
Well, h two provides an in-memory relational database.

5
00:00:18.340 --> 00:00:23.710
No rest API is complete unless it's persisting data to a database in production.

6
00:00:23.710 --> 00:00:29.290
In real life you would use a database management system like MySQL or PostgreSQL which will persist

7
00:00:29.290 --> 00:00:30.400
your data to disk.

8
00:00:30.400 --> 00:00:35.620
But because we're still in the development stage, we're still prototyping, we're going to set up a

9
00:00:35.620 --> 00:00:38.650
relational database through the H2 management system.

10
00:00:39.070 --> 00:00:42.910
Our H2 relational database will be entirely in memory.

11
00:00:42.910 --> 00:00:49.180
The in-memory database is volatile, and by default all of its data will be lost every single time we

12
00:00:49.180 --> 00:00:50.620
restart the application.

13
00:00:50.770 --> 00:00:53.320
But right now we don't really care about durability.

14
00:00:53.320 --> 00:01:00.040
This suits our purposes because all we want to do is interact with an SQL database and H two is going

15
00:01:00.040 --> 00:01:03.970
to be very fast and lightweight, which is perfect for prototyping.

16
00:01:04.150 --> 00:01:08.890
I actually prefer this while I'm developing because every time I make a new change to my schema, I

17
00:01:08.890 --> 00:01:10.180
want to start fresh.

18
00:01:10.570 --> 00:01:10.870
Now.

19
00:01:10.870 --> 00:01:15.640
The starter project is actually the same as the final solution for Workbook 9.3.

20
00:01:15.640 --> 00:01:18.430
So if you want to continue with your code, feel free.

21
00:01:18.430 --> 00:01:22.690
But if you feel like you made a mistake somewhere, please open the starter project for this lesson

22
00:01:22.690 --> 00:01:25.540
by following this path and your course resources.

23
00:01:31.110 --> 00:01:31.650
All right.

24
00:01:31.650 --> 00:01:37.810
We can set up a relational database using H two by simply adding the dependency to our XML.

25
00:01:38.070 --> 00:01:44.760
So since I'm using VS code, what I'm going to do is right click and then press on add starters because

26
00:01:44.760 --> 00:01:47.250
I'm going to be adding some starter dependencies.

27
00:01:47.730 --> 00:01:50.100
I will add the dependency FX to.

28
00:01:50.740 --> 00:01:54.160
And then I will add the dependency spring JPA.

29
00:01:55.110 --> 00:01:55.590
Now.

30
00:01:55.590 --> 00:02:01.200
I hesitated showing you this method of adding dependencies because I want it to be fair to the intelligent

31
00:02:01.200 --> 00:02:05.190
users and just use the central maven repo as they would.

32
00:02:05.970 --> 00:02:11.009
An equivalent to the extension that I'm using for ontology would be to use the Spring Boot assistant,

33
00:02:11.009 --> 00:02:12.810
which I'm honestly not a big fan of.

34
00:02:12.810 --> 00:02:18.570
I would recommend just going to the Central Maven repo and so you would just have to look up Maven to

35
00:02:18.570 --> 00:02:19.530
dependency.

36
00:02:19.560 --> 00:02:21.270
It would eventually take you here.

37
00:02:21.270 --> 00:02:26.100
And when you're adding this dependency, let me just stop the runtime for myself.

38
00:02:28.780 --> 00:02:34.540
A scope of test means this dependency will not be required during the runtime of the application and

39
00:02:34.540 --> 00:02:36.970
it's only going to be used for testing purposes.

40
00:02:37.120 --> 00:02:43.750
Please make sure to change the scope from test to runtime because this dependency will be required at

41
00:02:43.750 --> 00:02:44.530
runtime.

42
00:02:44.650 --> 00:02:47.020
I've already added it, so I will remove it.

43
00:02:47.020 --> 00:02:54.010
And another dependency you will have to add would be JPA, which once again you can grab from the central

44
00:02:54.010 --> 00:02:55.000
maven repo.

45
00:03:00.730 --> 00:03:03.370
And that's all for the dependencies we need to add.

46
00:03:03.370 --> 00:03:08.770
So this dependency will provide the FX two database and this dependency will allow us to interact with

47
00:03:08.770 --> 00:03:09.220
it.

48
00:03:09.700 --> 00:03:15.700
And now if we were to run our application by virtue of just adding these dependencies, Spring Boot

49
00:03:15.700 --> 00:03:18.370
will spin up an in-memory SQL database.

50
00:03:18.370 --> 00:03:19.960
How would we access it?

51
00:03:19.960 --> 00:03:24.340
We need to configure some things inside of our application properties file.

52
00:03:24.370 --> 00:03:27.550
I left you a file inside of your resources folder.

53
00:03:27.550 --> 00:03:30.100
Please copy its contents over here.

54
00:03:35.160 --> 00:03:40.980
So this file enables the UI allowing us to visualize the contents of our database.

55
00:03:41.160 --> 00:03:43.680
We can access the console by setting a path.

56
00:03:43.680 --> 00:03:51.420
So by writing local host 882 we will see the H two console and this URL is the location.

57
00:03:51.420 --> 00:03:54.660
We can connect to our database through the following URL.

58
00:03:54.690 --> 00:03:58.290
You can feel free to modify the location to whatever you want.

59
00:03:58.320 --> 00:04:03.420
I just think great submission makes sense and automatically Spring Boot is going to spin up an in-memory

60
00:04:03.450 --> 00:04:05.970
SQL database that we can now connect to.

61
00:04:06.000 --> 00:04:12.030
So what I'll do is I will go to local host 8080 slash h two.

62
00:04:15.810 --> 00:04:17.610
There seems to be a problem.

63
00:04:18.360 --> 00:04:20.130
All my dependencies are fine.

64
00:04:20.130 --> 00:04:23.220
So what I'm going to do is actually rerun the application.

65
00:04:24.350 --> 00:04:28.190
Because it seems like one of the changes didn't get picked up.

66
00:04:30.130 --> 00:04:31.380
Should be fine.

67
00:04:40.120 --> 00:04:40.780
Beautiful.

68
00:04:41.970 --> 00:04:47.220
So the URL that we need to connect to our database has already been specified for us.

69
00:04:47.250 --> 00:04:52.020
If for some reason you don't see it, make sure to copy it from your application properties.

70
00:04:53.060 --> 00:04:58.370
And now by pressing Kinect we can view the console of the database our app is connected to.

71
00:05:00.770 --> 00:05:02.360
Another item in our agenda.

72
00:05:02.360 --> 00:05:05.000
How will we actually talk to our database?

73
00:05:05.180 --> 00:05:11.540
The spring JPA dependency that we just added provides an object relational mapper, which is essentially

74
00:05:11.540 --> 00:05:16.430
a layer that allows our Spring Boot app to communicate with a relational database.

75
00:05:16.850 --> 00:05:20.630
Now that we're done setting up our project, it's time to persist some data.

