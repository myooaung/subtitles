WEBVTT
1
00:00:00.180 --> 00:00:02.820
Beans allow for a dependency injection.

2
00:00:05.780 --> 00:00:10.160
Never, ever create an object inside of a class that depends on it.

3
00:00:10.520 --> 00:00:14.390
This is called tight coupling, and it makes unit testing impossible.

4
00:00:20.480 --> 00:00:23.960
Instead, you should inject the object into the class.

5
00:00:26.600 --> 00:00:30.620
In this lesson, you will use dependency injection to achieve loose coupling.

6
00:00:33.720 --> 00:00:36.540
So what is tight coupling and when does it happen?

7
00:00:39.720 --> 00:00:44.550
Tight coupling happens when you create an object inside of a dependent class.

8
00:00:48.730 --> 00:00:52.450
An object that another class depends on is called a dependency.

9
00:00:55.150 --> 00:01:01.570
In this example, a great controller relies on the great service dependency, but you should never create

10
00:01:01.570 --> 00:01:04.360
a dependency inside of its dependent class.

11
00:01:04.510 --> 00:01:08.650
Your code will become interconnected and impossible to unit test.

12
00:01:12.610 --> 00:01:17.980
We will talk about unit testing in the next section, but for now, just know that tight coupling makes

13
00:01:17.980 --> 00:01:19.570
unit testing impossible.

14
00:01:24.670 --> 00:01:26.740
The solution is dependency injection.

15
00:01:26.740 --> 00:01:28.390
So let's go over the process.

16
00:01:30.480 --> 00:01:34.200
The first step is to annotate the class using ad components.

17
00:01:36.720 --> 00:01:42.150
Spring boot scans for components, and it turns the component class into a spring bean.

18
00:01:44.000 --> 00:01:49.550
In other words, the moment you run your application, Spring Boot performs a component scan, discovers

19
00:01:49.550 --> 00:01:54.530
this one, creates an object out of this class and stores it inside the spring container.

20
00:01:59.490 --> 00:02:03.780
And then Otto Wired injects the bean into the class that needs it.

21
00:02:06.160 --> 00:02:09.850
Your Comptroller class depends on a great service object.

22
00:02:10.030 --> 00:02:15.970
Instead of setting the field equal to a new object ordered wired wires, the great service being into

23
00:02:15.970 --> 00:02:16.450
it.

24
00:02:22.050 --> 00:02:25.320
Grade controller depends on a great service object.

25
00:02:25.440 --> 00:02:29.940
So the first step is to annotate your dependency using the component annotation.

26
00:02:45.860 --> 00:02:50.900
As soon as you run your application, Spring Boot is going to register this component as a bean.

27
00:02:51.410 --> 00:02:55.970
Spring Boot is going to create an object out of this great service class, and it's going to store it

28
00:02:55.970 --> 00:02:57.620
inside of the spring container.

29
00:03:05.130 --> 00:03:11.460
And so now what we can do is use auto wire to wire the bean into the great service field.

30
00:03:20.720 --> 00:03:23.780
If we rerun the application and make some requests.

31
00:03:35.970 --> 00:03:37.590
Everything still works.

32
00:03:38.160 --> 00:03:44.400
Instead of creating the object directly inside the class, we're injecting it directly from the spring

33
00:03:44.400 --> 00:03:45.240
container.

34
00:03:45.960 --> 00:03:48.810
This is great, but our code is still tightly coupled.

35
00:03:49.350 --> 00:03:52.920
The service creates the repository object that it depends on.

36
00:03:53.190 --> 00:03:57.420
Again, the dependent class should never create its own dependency.

37
00:03:58.510 --> 00:04:05.410
We can delegate that task to spring boot by annotating the repository class with the component annotation.

38
00:04:11.420 --> 00:04:14.810
Spring Boot will register a great repository as a bean.

39
00:04:14.810 --> 00:04:20.180
And so now we can use auto wire to wire the bean into the service class.

40
00:04:23.830 --> 00:04:24.820
All right.

41
00:04:28.660 --> 00:04:30.280
Everything should still work.

42
00:04:41.850 --> 00:04:46.260
So to recap, you achieved loose coupling by injecting a dependency.

43
00:04:47.990 --> 00:04:51.920
Never, ever create a dependency inside of a dependent class.

44
00:04:51.950 --> 00:04:56.330
Your code will become tightly coupled and impossible to unit test.

45
00:04:56.870 --> 00:05:00.170
Instead, inject your dependency from the spring container.

46
00:05:00.530 --> 00:05:05.480
Creating this type of loose coupling in your app makes your code a lot easier to test.

