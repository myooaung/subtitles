WEBVTT
1
00:00:00.360 --> 00:00:03.420
Finally if is capable of implementing conditional logic.

2
00:00:06.980 --> 00:00:11.000
There are many ways that a variable expression can execute on a model attributes.

3
00:00:11.030 --> 00:00:16.910
A variable expression can be used to return a model attribute or a value that derives from it.

4
00:00:17.150 --> 00:00:20.570
It can execute a condition based on a model attributes.

5
00:00:20.600 --> 00:00:26.990
It can also be used in a loop, and it can also execute utility methods on a model attribute.

6
00:00:27.020 --> 00:00:30.500
In this lesson, we will be looking at executing conditionals.

7
00:00:33.290 --> 00:00:38.660
We won't be implementing any conditional logic in the grade submission app, but it will come again

8
00:00:38.660 --> 00:00:39.890
in your final challenge.

9
00:00:39.890 --> 00:00:46.520
So pay close attention and I'll start you off by downloading the starter code on the following path.

10
00:00:46.520 --> 00:00:49.910
So take some time to launch it from the Spring Boot resources.

11
00:00:55.360 --> 00:01:00.820
Finally, if allows you to selectively render HTML elements depending on a condition.

12
00:01:05.230 --> 00:01:10.810
Now remember that a variable expression executes on a model attribute in some way, and this variable

13
00:01:10.810 --> 00:01:14.410
expression executes a condition based on a model attributes.

14
00:01:14.500 --> 00:01:19.240
It grabs an age that was stored in the model and compares it against the value.

15
00:01:19.330 --> 00:01:22.180
If true, it's going to render the paragraph element.

16
00:01:22.180 --> 00:01:25.810
If it's false, the paragraph element will not render.

17
00:01:27.960 --> 00:01:34.590
So here inside of the starter project, what we're going to do is access the model.

18
00:01:34.590 --> 00:01:36.480
We'll say model.

19
00:01:37.300 --> 00:01:37.870
Model.

20
00:01:37.870 --> 00:01:39.670
And we're going to add.

21
00:01:40.680 --> 00:01:49.530
An attribute where the key is going to be sales and let's just pass in sales of $100.

22
00:01:52.130 --> 00:01:53.960
This should be ad attributes.

23
00:01:53.990 --> 00:01:55.040
My apologies.

24
00:01:57.590 --> 00:01:59.320
Now inside of the HTML.

25
00:02:01.860 --> 00:02:09.930
What I'm going to do is create a paragraph element that says sales are good, and then what I'll do

26
00:02:09.930 --> 00:02:12.460
is apply a thin leaf condition.

27
00:02:12.480 --> 00:02:13.140
Finally, f.

28
00:02:13.140 --> 00:02:13.680
F.

29
00:02:14.220 --> 00:02:14.790
Finally f.

30
00:02:14.790 --> 00:02:15.000
F.

31
00:02:15.000 --> 00:02:20.850
Will use a variable expression to execute a condition based on a model attributes.

32
00:02:21.150 --> 00:02:24.930
So we're going to grab the sales value from the model.

33
00:02:26.700 --> 00:02:31.190
And the condition that determines whether this element will render or not.

34
00:02:31.200 --> 00:02:35.040
We'll be checking if the sales are greater than $50.

35
00:02:35.430 --> 00:02:37.710
So if I go ahead and run this application.

36
00:02:50.020 --> 00:02:50.340
Okay.

37
00:02:50.470 --> 00:02:51.580
Running the app.

38
00:02:54.130 --> 00:02:55.210
The condition is true.

39
00:02:55.210 --> 00:02:57.280
So the element renders.

40
00:02:59.800 --> 00:03:05.320
Going back, I'm going to change the sales to, let's say, $30.

41
00:03:10.350 --> 00:03:12.720
And this time the HTML does not render.

42
00:03:17.920 --> 00:03:18.970
Now finally fun.

43
00:03:18.970 --> 00:03:21.080
This is the opposite of family faith.

44
00:03:21.310 --> 00:03:24.100
It renders an element if your condition is false.

45
00:03:26.310 --> 00:03:34.590
So back here, what I'm going to do is copy the exact same element and change it to unless.

46
00:03:38.090 --> 00:03:43.760
If the sales are not bigger than 50, then we'll display sales are bad.

47
00:03:44.880 --> 00:03:45.900
Run the up.

48
00:03:46.670 --> 00:03:48.230
And the sales are bad.

49
00:03:48.260 --> 00:03:52.310
Change the sales to $150.

50
00:03:56.760 --> 00:03:58.200
And now sales are good.

51
00:03:59.280 --> 00:04:04.770
If and unless are typically used together like this, as is typical to an if else block.

52
00:04:08.550 --> 00:04:12.450
Now a ternary operator returns a value based on a condition.

53
00:04:15.600 --> 00:04:20.250
Once more, a variable expression executes a condition based on a model attributes.

54
00:04:20.250 --> 00:04:25.890
The first value to the right of the ternary operator is returned if the condition is true and the second

55
00:04:25.890 --> 00:04:28.440
value is returned if the condition is false.

56
00:04:32.280 --> 00:04:38.700
So back here, instead of having two paragraph elements, what I can do is say Leave text.

57
00:04:40.540 --> 00:04:45.010
And the text value that gets returned will be based on the following condition.

58
00:04:45.010 --> 00:04:52.060
So we'll say if sales were bigger than 50, if this condition is true, then we're going to return.

59
00:04:52.060 --> 00:04:55.090
The string sales were good.

60
00:04:56.950 --> 00:04:59.650
Now this doesn't do anything, but let's remove it anyways.

61
00:05:00.720 --> 00:05:03.720
Otherwise we're going to say sales were bad.

62
00:05:04.980 --> 00:05:11.490
Whenever I'm defining a string inside of a life expression, I wrap it around single quotes.

63
00:05:13.360 --> 00:05:15.040
All right if I go back.

64
00:05:18.320 --> 00:05:19.190
Beautiful.

65
00:05:19.850 --> 00:05:23.240
But I go back here and say, 30 bucks.

66
00:05:26.410 --> 00:05:27.730
Sales were bad.

67
00:05:29.970 --> 00:05:36.910
Finally, text relies on a text of value that's returned based on the condition that's being evaluated.

68
00:05:36.930 --> 00:05:38.200
This is really good.

69
00:05:38.220 --> 00:05:41.400
I don't know about you, but I much prefer the ternary operator.

70
00:05:45.760 --> 00:05:51.160
Timely switch compares a value against a list of cases and it renders the case match.

71
00:05:54.750 --> 00:05:59.970
Timely switch is normally used when there are more than two possible results when we compare one value

72
00:05:59.970 --> 00:06:01.390
against a list of cases.

73
00:06:01.410 --> 00:06:07.080
The value is once again fetched from the model using a variable expression and is compared against a

74
00:06:07.080 --> 00:06:08.280
list of cases.

75
00:06:09.200 --> 00:06:15.290
The default case marked as a star executes in the event that the value from the model doesn't match

76
00:06:15.290 --> 00:06:15.950
anything.

77
00:06:20.820 --> 00:06:28.140
So what I'm going to do is I'm going to go back here and say, model, don't add attributes.

78
00:06:28.740 --> 00:06:34.710
And what I'll do is I'll store a product value of table inside the model.

79
00:06:37.270 --> 00:06:38.530
And then back here.

80
00:06:39.330 --> 00:06:41.490
I will create a div.

81
00:06:47.440 --> 00:06:52.510
Which, according to the cheat sheet, is a container that can hold many elements.

82
00:06:53.760 --> 00:06:57.390
And this div is going to evaluate a switch condition.

83
00:06:57.570 --> 00:06:58.980
Finally switch.

84
00:07:01.350 --> 00:07:06.630
We're going to set this equal to a variable expression that fetches product from the model.

85
00:07:11.640 --> 00:07:17.220
And we can execute a condition based on this model attribute by comparing this product against a list

86
00:07:17.220 --> 00:07:18.540
of other products.

87
00:07:20.310 --> 00:07:25.020
So what I'm going to do is create three paragraph elements.

88
00:07:27.300 --> 00:07:28.590
Copying this over.

89
00:07:30.510 --> 00:07:37.620
And here we'll say in the event that the product happens to be a chair.

90
00:07:41.040 --> 00:07:45.360
This element is going to render and display $50.

91
00:07:46.690 --> 00:07:54.360
If it happens to be a TV, we'll say $150 if the product from the model doesn't match any of the cases

92
00:07:54.370 --> 00:07:56.050
in the event of a star.

93
00:07:57.650 --> 00:08:01.430
Then we'll say no match.

94
00:08:05.810 --> 00:08:11.620
And the default element was rendered because the table value does not match chair or TV.

95
00:08:11.630 --> 00:08:14.540
So if I go back and make this into a chair.

96
00:08:20.600 --> 00:08:23.600
The paragraph tag with the matching case is rendered.

97
00:08:24.080 --> 00:08:25.160
All right.

98
00:08:26.980 --> 00:08:31.990
So to recap, a variable expression can execute a condition based on a model attribute.

99
00:08:34.950 --> 00:08:38.130
Finally, if render is an element, if a condition is true.

100
00:08:39.669 --> 00:08:40.390
Family fun.

101
00:08:40.390 --> 00:08:43.270
Less a render is an element if a condition is false.

102
00:08:44.540 --> 00:08:48.410
The ternary operator returns a value based on a condition.

103
00:08:49.740 --> 00:08:53.010
Switch renders the element with a matching case.

104
00:08:53.310 --> 00:08:56.370
I hope you're prepared for the workbooks that lie ahead.

