WEBVTT
1
00:00:00.620 --> 00:00:05.300
Token based authentication is a very powerful way of authenticating clients.

2
00:00:05.900 --> 00:00:10.760
Basic auth is considered bad practice for every single request that a client makes.

3
00:00:10.760 --> 00:00:16.670
They need to include their username and their password sending over passwords as not recommended.

4
00:00:16.850 --> 00:00:20.510
If you're building an API, do not use basic authentication.

5
00:00:21.280 --> 00:00:26.120
Now token based authentication with JWT is much more secure.

6
00:00:26.140 --> 00:00:32.140
It is the recommended approach because instead of passing in your credentials sensitive information,

7
00:00:32.140 --> 00:00:34.660
you're passing in a JSON web token.

8
00:00:34.900 --> 00:00:39.700
The API is going to check if the token is valid, and if so, it's going to grant the user access.

9
00:00:39.850 --> 00:00:45.910
JWT authentication is a very simple mechanism, but it's also very powerful and secure.

10
00:00:46.420 --> 00:00:51.610
That's why in this lesson we're going to discuss the intricacies of token based authentication.

11
00:00:55.970 --> 00:01:02.000
Now our implementation of token based authentication is going to involve three different pathways.

12
00:01:02.030 --> 00:01:04.970
Let's start with pathway number one, which is signing up.

13
00:01:05.890 --> 00:01:10.120
In Pathway one, the user makes a post request to the path slash register.

14
00:01:10.420 --> 00:01:14.710
Every request that we make to the application will go through the security filter chain.

15
00:01:15.160 --> 00:01:22.120
One of these security rules permits all requests on the path slash register without the need for authentication

16
00:01:22.120 --> 00:01:23.260
or authorization.

17
00:01:23.260 --> 00:01:28.840
So this request is going to skip all of the other filters and it's going to automatically get processed.

18
00:01:28.840 --> 00:01:34.570
The credentials that the user passes in will get stored inside of a database, but you'll remember that

19
00:01:34.570 --> 00:01:37.090
we never, ever store passwords in plaintext.

20
00:01:37.090 --> 00:01:42.880
The password is going to be encrypted using a one way hash function, and this means the password cannot

21
00:01:42.880 --> 00:01:44.800
be restored to its original state.

22
00:01:44.800 --> 00:01:49.870
And that's fine because from the server side, we do not care about what the password is.

23
00:01:49.870 --> 00:01:52.930
We only care that the user themselves know it.

24
00:01:53.350 --> 00:01:55.270
So that's your first pathway.

25
00:01:55.600 --> 00:02:00.370
And pathway number two is after the user signs up, they can now authenticate.

26
00:02:01.210 --> 00:02:07.540
So the user will make a request on the path slash authenticate passing in their credentials.

27
00:02:07.540 --> 00:02:12.430
And this is going to be the last time that the user will include their password in a request.

28
00:02:12.430 --> 00:02:17.710
So as always, the request goes through the security filter chain and because their request is being

29
00:02:17.710 --> 00:02:24.610
made on the path slash authenticate, our authentication filter is going to be programmed to get invoked

30
00:02:24.610 --> 00:02:26.530
on a request that matches this path.

31
00:02:26.530 --> 00:02:32.680
The filter is going to use the hashing algorithm to encrypt the password that they pass in, and if

32
00:02:32.680 --> 00:02:39.130
there is no match, then they provided invalid credentials befitting a401.

33
00:02:39.840 --> 00:02:42.870
But if they pass in a password, that is correct.

34
00:02:42.870 --> 00:02:48.650
Then after we apply the hashing algorithm, it should match a password that we have in our records.

35
00:02:48.660 --> 00:02:51.690
And if it does, we send back a status of 200.

36
00:02:51.690 --> 00:02:57.750
And the response that we send back is also going to include a JWT token, and that's pathway number

37
00:02:57.750 --> 00:02:58.230
two.

38
00:02:58.590 --> 00:03:02.820
But what is the significance of the JWT token that we sent back?

39
00:03:02.820 --> 00:03:04.200
Why is it important?

40
00:03:04.230 --> 00:03:11.700
JWT stands for JSON web token and it consists of a header payload and a signature.

41
00:03:13.410 --> 00:03:17.490
The header is metadata that describes the type of token that's being sent.

42
00:03:17.550 --> 00:03:24.390
For example, JWT and the header also includes the algorithm that is used to secure it.

43
00:03:24.870 --> 00:03:31.080
The field in our header states that this JWT token was given a digital signature using an algorithm

44
00:03:31.080 --> 00:03:32.860
of H 256.

45
00:03:32.880 --> 00:03:39.000
There are many, many algorithms that you can use, but overall the header just describes metadata and

46
00:03:39.000 --> 00:03:42.930
the header of a JWT is based 64 encoded.

47
00:03:44.050 --> 00:03:47.980
Now the payload is the more relevant data that relates to the user.

48
00:03:47.980 --> 00:03:51.920
For example, a subject that stores the client's username.

49
00:03:51.940 --> 00:03:54.460
A name field that stores their name.

50
00:03:54.460 --> 00:03:59.080
And the more data that you include in your payload, the bigger the JWT.

51
00:03:59.110 --> 00:04:02.740
The payload of a JWT is also a base 64 encoded.

52
00:04:02.740 --> 00:04:09.550
So when you look at a JWT, what comes before the first dot is the Header Bay 64 encoded.

53
00:04:09.550 --> 00:04:14.740
What comes after the first dot is the payload also base64 encoded?

54
00:04:14.740 --> 00:04:22.720
And one thing I really, really, really want to emphasize is to never store sensitive data inside the

55
00:04:22.720 --> 00:04:24.430
payload or the header.

56
00:04:24.640 --> 00:04:28.090
They can be very easily decoded by anybody.

57
00:04:28.090 --> 00:04:30.400
I will do so in front of you right now.

58
00:04:30.400 --> 00:04:32.920
This was the header that I just showed you.

59
00:04:32.920 --> 00:04:34.420
This was the payload.

60
00:04:34.420 --> 00:04:37.750
I'm just going to use some random website to decode it.

61
00:04:39.200 --> 00:04:42.020
And here we see the corresponding JSON.

62
00:04:42.440 --> 00:04:48.020
Anyways, moral of the story is that your header and your payload, they are not secure.

63
00:04:48.740 --> 00:04:55.460
Now in the third section of your JWT, your assigning algorithm is going to produce a digital signature

64
00:04:55.460 --> 00:05:04.310
that combines the header, the body and a secret key that nobody knows about except for the API because

65
00:05:04.310 --> 00:05:06.710
nobody knows what the secret key is.

66
00:05:06.710 --> 00:05:14.180
Provided that you use a very strong secret that nobody can ever guess, the digital signature that combines

67
00:05:14.180 --> 00:05:18.740
the header payload and secret is going to be impossible to decode.

68
00:05:20.320 --> 00:05:24.950
So a JSON web token, as you can see, is composed of three different parts.

69
00:05:24.970 --> 00:05:28.540
The first segment is your header base 64 encoded.

70
00:05:28.570 --> 00:05:35.740
The second segment is your payload also bay 64 encoded, and the third segment is your signature, which

71
00:05:35.740 --> 00:05:41.710
results from the use of a signing algorithm that combines the header payload and a secret key that no

72
00:05:41.710 --> 00:05:47.350
one can ever guess in order to produce a signature that is virtually impossible to decode.

73
00:05:47.590 --> 00:05:54.220
So when a user logs in successfully, we're going to send them back a signed JSON web token.

74
00:05:55.180 --> 00:06:00.490
That's pathway number two, which brings us to pathway number three, authorizing requests.

75
00:06:00.880 --> 00:06:07.000
So now that the user has been given an access token, they can use that token as evidence that they've

76
00:06:07.000 --> 00:06:08.220
been authenticated.

77
00:06:08.230 --> 00:06:12.220
And our job is to make sure that the token that they're giving us is valid.

78
00:06:12.220 --> 00:06:15.570
And so now they can use this token to make requests.

79
00:06:15.580 --> 00:06:19.810
As always, the request is going to get caught by the security filter chain.

80
00:06:19.840 --> 00:06:21.280
The user isn't signing up.

81
00:06:21.280 --> 00:06:23.830
So we skip this, they're not authenticating.

82
00:06:23.830 --> 00:06:25.300
So this filter is skipped.

83
00:06:25.300 --> 00:06:30.400
And finally the request travels to the JWT authorization filter.

84
00:06:30.400 --> 00:06:37.120
Inside JWT authorization, our filter is going to make sure that the JWT they're sending us is valid

85
00:06:37.120 --> 00:06:39.840
before authorizing them to make a request.

86
00:06:39.850 --> 00:06:44.200
It's going to say, okay, this is the header, this is the payload.

87
00:06:44.960 --> 00:06:47.600
It, and only it knows the secret key.

88
00:06:48.810 --> 00:06:55.590
Then what it's going to do is use the same algorithm to produce a test signature that combines the header

89
00:06:55.590 --> 00:06:58.140
body and the secret that nobody knows about.

90
00:06:58.560 --> 00:07:04.530
If the test signature matches the signature that they sent us, then it's obvious that they're using

91
00:07:04.530 --> 00:07:07.080
a valid token that we gave them.

92
00:07:10.080 --> 00:07:14.510
Now let's assume that somebody tries to tamper with a JWT token.

93
00:07:14.520 --> 00:07:16.560
They try to change the payload.

94
00:07:17.880 --> 00:07:22.050
And so the base 64 encoding of the payload is going to change, of course.

95
00:07:22.050 --> 00:07:27.690
But the thing is, they will never know what the resulting signature should be because they don't know

96
00:07:27.690 --> 00:07:31.260
the secret key when the API tries to verify the token.

97
00:07:32.030 --> 00:07:37.490
It's going to extract the header, it's going to extract the payload it and only it knows the secret

98
00:07:37.490 --> 00:07:37.970
key.

99
00:07:38.000 --> 00:07:43.430
The test signature that it produces is a combination of the header payload and secret, and it's not

100
00:07:43.430 --> 00:07:45.530
going to match what they're sending us.

101
00:07:46.860 --> 00:07:49.800
Which means that their token is not valid.

102
00:07:50.610 --> 00:07:55.590
We send them back a 403 because they are not authorized to perform that request.

103
00:07:55.800 --> 00:08:00.660
So as you can see, JWT authentication is so simple and yet so effective.

104
00:08:00.840 --> 00:08:07.800
Assuming the validation process were to work, then our API is going to set the authentication on the

105
00:08:07.800 --> 00:08:09.180
security context.

106
00:08:09.180 --> 00:08:09.840
Holder.

107
00:08:13.670 --> 00:08:19.610
All I want you to know is the security context holder is worth spring security stores the details of

108
00:08:19.640 --> 00:08:20.970
who is authenticated.

109
00:08:20.990 --> 00:08:26.240
Once we do that, we've basically indicated that a user has been successfully authenticated.

110
00:08:26.240 --> 00:08:32.150
And so what follows is actually executing their request and sending back a response.

111
00:08:33.450 --> 00:08:35.309
And that's pathway number three.

112
00:08:37.070 --> 00:08:40.610
So to recap, pathway number one is registration.

113
00:08:40.610 --> 00:08:42.710
The user makes a request to sign up.

114
00:08:42.710 --> 00:08:48.920
We have a security rule that permits all requests on the path register without the need to authenticate

115
00:08:49.250 --> 00:08:53.870
and the request is going to get executed and their credentials will get saved.

116
00:08:57.690 --> 00:08:59.880
Pathway number two is authentication.

117
00:08:59.880 --> 00:09:03.300
The user is going to try to log in with the correct credentials.

118
00:09:03.810 --> 00:09:06.960
The request is going to get caught in the authentication filter.

119
00:09:06.960 --> 00:09:14.190
And if their credentials match what we have in our records, then they are going to be granted a JWT

120
00:09:14.220 --> 00:09:14.880
token.

121
00:09:19.670 --> 00:09:24.320
The user's request is now going to include a JWT token in the header.

122
00:09:24.620 --> 00:09:31.090
The JWT authorization filter is going to catch the request and try to verify the token that they provided.

123
00:09:31.100 --> 00:09:36.560
So it's going to use the same algorithm to produce a test signature that combines the header of the

124
00:09:36.560 --> 00:09:40.760
JWT, the payload, a secret key that nobody knows about.

125
00:09:40.760 --> 00:09:46.670
And if the token happens to be valid, then we're going to set the authentication on the security context

126
00:09:46.670 --> 00:09:47.240
holder.

127
00:09:47.690 --> 00:09:52.880
Once we do that, we're basically indicating that the user's information, who we just saved inside

128
00:09:52.880 --> 00:09:56.150
the context folder, they have been successfully authenticated.

129
00:09:56.150 --> 00:10:01.100
So what follows is authorizing the request and sending back a response.

130
00:10:02.830 --> 00:10:04.600
And that's pathway number three.

