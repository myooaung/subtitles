WEBVTT
1
00:00:00.120 --> 00:00:04.680
In this lesson, you will learn how to apply a breakpoints in Visual Studio code.

2
00:00:04.710 --> 00:00:08.830
First thing I want you to do is from your spring boot to boot camp resources.

3
00:00:08.850 --> 00:00:13.050
Go to appendix A and open the breakpoints folder.

4
00:00:15.850 --> 00:00:16.210
Okay.

5
00:00:16.360 --> 00:00:17.860
I was already inside.

6
00:00:17.860 --> 00:00:22.600
And the first thing I want you to do is apply your first breakpoint.

7
00:00:22.630 --> 00:00:24.400
Doing it in vs code is very easy.

8
00:00:24.400 --> 00:00:28.990
Just left click beside the line of code that you want to breakpoint.

9
00:00:29.380 --> 00:00:35.680
And what I'll do before running the application and debug mode is add another print statement and this

10
00:00:35.680 --> 00:00:38.770
print statement is just going to print the receipt.

11
00:00:38.860 --> 00:00:44.470
I'll add another breakpoint here and if you want to run your application in debug mode, either press

12
00:00:44.470 --> 00:00:48.190
on debug or click on the following option.

13
00:00:48.190 --> 00:00:51.460
Run in debug and click run and Debug.

14
00:00:55.840 --> 00:01:00.730
And this is how you're going to be break pointing your spring boot applications, by the way.

15
00:01:01.120 --> 00:01:07.720
Anyways, the first thing I want to talk to you about is the continue button continue goes from one

16
00:01:07.720 --> 00:01:09.190
breakpoint to another.

17
00:01:09.190 --> 00:01:14.500
So if I press continue, it goes to the next breakpoint and it runs this line of code.

18
00:01:14.620 --> 00:01:18.730
Now, here is where you monitor the state of your variables.

19
00:01:18.820 --> 00:01:24.280
After we ran this line of code, our receipt was updated to equal.

20
00:01:24.280 --> 00:01:26.260
The total is $5.

21
00:01:26.260 --> 00:01:30.910
And if I press continue again, there are no more breakpoints that follow.

22
00:01:30.910 --> 00:01:36.160
So their runtime is going to finish and it will print your message.

23
00:01:39.000 --> 00:01:39.410
Okay.

24
00:01:39.450 --> 00:01:41.820
Let's debug the application again.

25
00:01:43.130 --> 00:01:43.430
Now.

26
00:01:43.430 --> 00:01:48.690
This time I want to know exactly what happens inside of our get receipt function.

27
00:01:48.710 --> 00:01:50.810
I don't want to just step to the next breakpoint.

28
00:01:50.810 --> 00:01:57.920
I want to step inside, get a receipt, and luckily we have a step into button which you can press.

29
00:01:57.920 --> 00:02:00.860
And what that's going to do is step inside the function.

30
00:02:00.860 --> 00:02:07.060
Here I can see the state of my variables, the price one and price two parameters equal 2.5.

31
00:02:07.070 --> 00:02:11.000
You can also see this by going off to the side anyways.

32
00:02:11.000 --> 00:02:13.580
I can keep stepping inside my function.

33
00:02:14.210 --> 00:02:21.170
Now the message equals a string and now if I press step inside again, it's going to step into the sum

34
00:02:21.170 --> 00:02:21.890
function.

35
00:02:22.980 --> 00:02:25.650
Once again, we can monitor the state of our variables.

36
00:02:25.650 --> 00:02:28.250
Price one and price two are still 2.5.

37
00:02:28.260 --> 00:02:32.220
This is going to return price one plus price to.

38
00:02:33.900 --> 00:02:36.030
The return value is five.

39
00:02:36.030 --> 00:02:41.610
And then if I keep stepping inside, my function total is going to equal the return value.

40
00:02:44.660 --> 00:02:51.440
Having ran this line of code, now total equals five and our function is going to return the message

41
00:02:51.440 --> 00:02:54.860
plus the total value which will result.

42
00:02:55.460 --> 00:03:02.180
And one thing I want to point out is if you press the step inside button right as you're about to return

43
00:03:02.180 --> 00:03:05.450
something in your function, it's going to step into some weird stuff.

44
00:03:05.450 --> 00:03:09.050
So step out of it using the step out button.

45
00:03:10.080 --> 00:03:12.630
Step out again and we're back.

46
00:03:14.580 --> 00:03:18.120
Once you reach the return keyword press, step over.

47
00:03:20.390 --> 00:03:21.820
All right.

48
00:03:21.830 --> 00:03:24.560
Our function returns the following string.

49
00:03:26.200 --> 00:03:27.730
If I press continue.

50
00:03:29.300 --> 00:03:32.760
Receipt ends up equaling the value that was returned.

51
00:03:32.780 --> 00:03:36.770
If I press continue again, it prints the receipts.

52
00:03:36.890 --> 00:03:40.970
All right, one more thing I want to show you, which is really important.

53
00:03:41.510 --> 00:03:43.730
We'll step inside, get receipt again.

54
00:03:43.760 --> 00:03:50.960
Now, I want to step inside every single line of get receipts, but I don't want to step inside of some.

55
00:03:51.230 --> 00:03:58.280
If I press step into, it's going to step into some before it steps into the remaining lines.

56
00:03:58.280 --> 00:04:04.430
But I don't want to do that because imagine some was millions of lines long, then this would be very

57
00:04:04.430 --> 00:04:05.210
annoying.

58
00:04:05.300 --> 00:04:09.920
But if I were to press continue, then all that's going to do is just go to the next breakpoint.

59
00:04:09.920 --> 00:04:11.300
So we don't want to do that.

60
00:04:11.300 --> 00:04:14.840
So what I'll do is I will restart the runtime.

61
00:04:17.209 --> 00:04:17.839
Okay.

62
00:04:17.839 --> 00:04:19.329
Let's step inside again.

63
00:04:19.339 --> 00:04:25.610
We will keep stepping inside the function and once I reach this line, I can actually step over it using

64
00:04:25.610 --> 00:04:26.870
the step over button.

65
00:04:30.580 --> 00:04:35.260
Now total equals five based on whatever was returned from the sum function.

66
00:04:35.470 --> 00:04:37.390
I will press step over again.

67
00:04:38.320 --> 00:04:41.620
The function returns the total as $5.

68
00:04:43.850 --> 00:04:46.190
Receipt ends up equaling this value.

69
00:04:46.190 --> 00:04:49.760
And if I press continue again, that's what gets printed.

70
00:04:53.660 --> 00:04:54.050
Okay.

71
00:04:54.230 --> 00:04:56.020
One last thing I want to show you.

72
00:04:56.030 --> 00:04:56.710
I promise.

73
00:04:56.720 --> 00:04:57.800
It's the last thing.

74
00:04:58.130 --> 00:04:58.700
Press on.

75
00:04:58.700 --> 00:04:59.750
Run and debug.

76
00:05:02.590 --> 00:05:09.520
You can also disable your breakpoints, which means if I press continue or next or anything, it will

77
00:05:09.520 --> 00:05:10.390
ignore them.

78
00:05:11.660 --> 00:05:12.440
Okay.

79
00:05:13.250 --> 00:05:14.960
Now, let's just say you have.

80
00:05:15.860 --> 00:05:21.860
10 million breakpoints inside of your app, and you don't want to individually get rid of all of them.

81
00:05:22.520 --> 00:05:24.410
You can just press the following button.

82
00:05:25.690 --> 00:05:26.590
And that is all.

83
00:05:26.650 --> 00:05:28.930
I'll see you in the next breakpoint session.

