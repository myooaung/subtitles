WEBVTT
1
00:00:00.270 --> 00:00:04.260
Let's just jump right into it and write some integration tests.

2
00:00:04.350 --> 00:00:09.840
Now, before anything, we need to identify the type of web requests that can be made.

3
00:00:10.200 --> 00:00:11.310
There are three.

4
00:00:11.730 --> 00:00:17.730
A get request can be made on an empty path, and that request can include an ID parameter.

5
00:00:17.760 --> 00:00:19.590
A get request can be made on handle.

6
00:00:19.590 --> 00:00:20.430
Submit.

7
00:00:20.730 --> 00:00:26.940
Looking back, I should have called the handler method handle, submit and called and specified a path

8
00:00:26.940 --> 00:00:28.170
of submit form.

9
00:00:28.560 --> 00:00:32.310
I don't know why I got that backwards, but anyway, let's just roll with what we have.

10
00:00:32.340 --> 00:00:34.200
Doesn't really matter all that much.

11
00:00:34.440 --> 00:00:38.100
And we have another web request that is made on slash grades.

12
00:00:39.730 --> 00:00:44.260
So step one is going to be to perform a mock request that simulates a Web request.

13
00:00:44.290 --> 00:00:49.170
And step two is going to be to make assertions with respect to the model view and status.

14
00:00:49.180 --> 00:00:55.270
As the test maps, the entire request and response lifecycle, the assertions will verify if different

15
00:00:55.270 --> 00:00:57.970
parts of your app were interacting as they should.

16
00:00:58.330 --> 00:01:00.010
So let's start with step one.

17
00:01:00.010 --> 00:01:04.239
First, we will perform a mock request on the empty path.

18
00:01:05.450 --> 00:01:08.300
And include an ID parameter in that request.

19
00:01:08.510 --> 00:01:09.680
So over here.

20
00:01:10.550 --> 00:01:17.150
Instead of running the app and going on local host AT&T, we're going to create an integration test,

21
00:01:17.540 --> 00:01:19.030
public void.

22
00:01:19.040 --> 00:01:26.780
And this test is going to verify that great form behaves correctly as it handles web requests made on

23
00:01:26.780 --> 00:01:27.680
an empty path.

24
00:01:27.680 --> 00:01:33.110
So I'll call this test show grade form.

25
00:01:40.170 --> 00:01:43.710
And now I can build a mock request using a request builder.

26
00:01:43.950 --> 00:01:55.830
I can say request builder request is equal to mock MVC request builders dot get and we're going to make

27
00:01:55.830 --> 00:02:01.410
a get request on an empty path and include an ID equals to one, two, three.

28
00:02:02.250 --> 00:02:03.180
All right.

29
00:02:03.450 --> 00:02:09.870
Now, the ID you pass in doesn't really matter, because the handler method is going to call grade service,

30
00:02:10.110 --> 00:02:14.160
get grade by ID, which is capable of handling invalid IDs.

31
00:02:14.460 --> 00:02:19.360
But now we can use mock MVC to perform a mock request.

32
00:02:19.380 --> 00:02:24.420
I can say mock MVC upper form, and it's going to make a request.

33
00:02:27.890 --> 00:02:30.710
I called this request builder, let me call it request.

34
00:02:30.800 --> 00:02:32.180
That's more intuitive.

35
00:02:32.450 --> 00:02:38.840
And I think this is beautiful because we're able to mock a get request without actually running the

36
00:02:38.840 --> 00:02:41.510
application and going on localhost, 80, 80.

37
00:02:41.900 --> 00:02:47.450
The test is going to traverse all of the applications layers starting from the controller, which is

38
00:02:47.450 --> 00:02:52.330
kind of call upon the great service, which is going to call upon the repository.

39
00:02:52.340 --> 00:02:56.000
So this test is going to travel all of our applications layers.

40
00:02:56.000 --> 00:02:57.710
Which brings us to step two.

41
00:02:57.740 --> 00:03:01.640
You need to make assertions with respect to the model view and status.

42
00:03:01.640 --> 00:03:07.040
The assertions will verify if components across all layers of your app are working as they should.

43
00:03:09.020 --> 00:03:13.050
The reason we have an error is because this throws a checked exception.

44
00:03:13.070 --> 00:03:15.720
Let's just say throws exception here and get rid of it.

45
00:03:15.740 --> 00:03:16.570
All right.

46
00:03:16.580 --> 00:03:21.650
And now after making the request, I expect the status.

47
00:03:23.410 --> 00:03:24.610
To be successful.

48
00:03:28.570 --> 00:03:35.560
I always have trouble importing the status, so I'm just going to leave you this import inside of your

49
00:03:35.560 --> 00:03:36.760
resources folder.

50
00:03:36.940 --> 00:03:38.830
You can grab it and copy it.

51
00:03:39.400 --> 00:03:42.520
Anyways, I expect the status to be successful.

52
00:03:44.620 --> 00:03:47.020
I expect the view that's returned.

53
00:03:49.660 --> 00:03:51.090
This isn't importing either.

54
00:03:51.100 --> 00:03:51.640
You know what?

55
00:03:51.640 --> 00:03:55.900
Let's just import everything from mock MVC result matches.

56
00:03:57.480 --> 00:04:00.930
I expect the view returned to be named form.

57
00:04:03.780 --> 00:04:06.300
And I expect the model.

58
00:04:07.170 --> 00:04:08.700
To have an attribute.

59
00:04:09.830 --> 00:04:11.660
A tribute exists.

60
00:04:12.960 --> 00:04:14.280
Called Grade.

61
00:04:16.029 --> 00:04:19.600
This is the object that's going to back our forum data.

62
00:04:19.990 --> 00:04:22.180
Now I can run my integration test.

63
00:04:32.440 --> 00:04:33.440
And it passes.

64
00:04:33.460 --> 00:04:39.280
Now I have confidence that the app can successfully handle get requests made on an empty path.

65
00:04:40.810 --> 00:04:41.710
All right.

66
00:04:44.740 --> 00:04:50.730
Next thing we're going to do is perform a mock request on the path handle submit.

67
00:04:50.740 --> 00:04:55.400
The next test we write will validate the life cycle of a successful submission.

68
00:04:55.420 --> 00:05:01.120
So I'll go back and create an integration test that is capable of making post requests.

69
00:05:01.120 --> 00:05:06.520
I will call the Integration Test Test successful submission.

70
00:05:09.860 --> 00:05:11.870
Let's just throw the exception right now.

71
00:05:17.580 --> 00:05:21.750
As before, you can build a mock request using the request builder.

72
00:05:21.780 --> 00:05:26.350
Request Builder request is equal to mock MVC.

73
00:05:26.370 --> 00:05:34.050
Request Builder's dot post because it will be making a post request and the post request will be made

74
00:05:34.050 --> 00:05:35.280
on the path.

75
00:05:36.240 --> 00:05:37.770
And I'll submit.

76
00:05:38.280 --> 00:05:42.500
I really wish I had called this submit form because that would make a lot more sense.

77
00:05:42.510 --> 00:05:47.490
But anyways, the handler method for handle submit.

78
00:05:48.430 --> 00:05:51.340
It expects a valid grade object.

79
00:05:51.340 --> 00:05:56.920
So by default this handler method, it will create a grade object using your empty constructor, but

80
00:05:56.920 --> 00:06:02.320
then it needs to update every single field in that object with payload from the post request.

81
00:06:02.320 --> 00:06:08.680
So we still need to pass in the name, the subject and the score fields right here.

82
00:06:08.800 --> 00:06:13.900
And we can do that by saying dot param, we need to pass in a name.

83
00:06:17.480 --> 00:06:18.920
Uh, we'll say Harry.

84
00:06:22.840 --> 00:06:24.490
Pass in a subject.

85
00:06:29.100 --> 00:06:30.630
Let's say potions.

86
00:06:32.320 --> 00:06:35.740
And passing a score.

87
00:06:37.170 --> 00:06:38.580
What's, say, C-minus.

88
00:06:40.680 --> 00:06:46.170
Now, just like we did with the form and make sure the parameters you pass into the post request match

89
00:06:46.170 --> 00:06:47.730
the fields of your pod.

90
00:06:47.740 --> 00:06:51.600
So now we can use mock MVC to perform the post request.

91
00:06:51.600 --> 00:06:53.520
I'll say Mock MVC.

92
00:06:54.690 --> 00:06:56.070
Dot perform.

93
00:06:56.100 --> 00:06:58.440
It will perform the post request.

94
00:06:59.630 --> 00:07:04.370
Now, by the end of this Post request, we expect a redirection.

95
00:07:05.150 --> 00:07:08.960
Now let's just say that we make the post request and it's successful.

96
00:07:09.410 --> 00:07:11.630
The great object is going to be valid.

97
00:07:11.660 --> 00:07:17.650
The binding result won't have any errors, so we expect a redirection by the very end.

98
00:07:17.660 --> 00:07:22.340
So here we'll say and expect status.

99
00:07:23.130 --> 00:07:24.090
Dot.

100
00:07:25.860 --> 00:07:27.390
Is redirection.

101
00:07:28.270 --> 00:07:29.200
Run the test.

102
00:07:37.030 --> 00:07:38.080
And it passes.

103
00:07:38.080 --> 00:07:38.740
Beautiful.

104
00:07:40.450 --> 00:07:40.860
All right.

105
00:07:40.860 --> 00:07:45.330
And then we can say we expect the redirected URL.

106
00:07:46.430 --> 00:07:47.300
To be.

107
00:07:49.000 --> 00:07:50.770
Like, Great.

108
00:07:51.220 --> 00:07:52.360
Yeah, it's not great.

109
00:07:52.390 --> 00:07:53.170
Of course it is.

110
00:07:57.070 --> 00:07:57.490
All right.

111
00:07:57.490 --> 00:07:59.050
If both of these pasts.

112
00:08:06.160 --> 00:08:13.450
Now I'm confident that if the user enters valid data, the application will respond appropriately by

113
00:08:13.450 --> 00:08:15.520
redirecting them to the grade's view.

114
00:08:16.450 --> 00:08:19.580
Now, what if the user enters invalid data?

115
00:08:19.600 --> 00:08:21.610
How is our app going to behave?

116
00:08:21.790 --> 00:08:24.040
Once again, we can use an integration test.

117
00:08:24.040 --> 00:08:29.860
We'll say public void test, unsuccessful submission.

118
00:08:32.159 --> 00:08:33.390
Heroes exception.

119
00:08:37.789 --> 00:08:38.450
Oops.

120
00:08:41.640 --> 00:08:45.600
This test will validate the life cycle of an unsuccessful submission.

121
00:08:45.720 --> 00:08:49.680
And as before, you can build a mock request using a request builder.

122
00:08:50.130 --> 00:08:57.480
Let's say request builder request is equal to mock MVC request builders.

123
00:09:01.460 --> 00:09:02.210
Post.

124
00:09:03.500 --> 00:09:06.950
We're going to make a post request on handle submit.

125
00:09:12.970 --> 00:09:13.480
All right.

126
00:09:13.480 --> 00:09:18.880
And we're going to pass parameters into the post request, but they're going to be invalid.

127
00:09:19.180 --> 00:09:20.680
So we'll say.

128
00:09:21.550 --> 00:09:28.750
Blank, blank and will put in an invalid grade of our plus and let's perform the post request play mock

129
00:09:28.750 --> 00:09:30.700
MVC perform request.

130
00:09:31.150 --> 00:09:36.220
And upon performing this request, we expect.

131
00:09:37.200 --> 00:09:39.150
The grade to be invalid.

132
00:09:39.270 --> 00:09:41.670
The binding result is going to have errors.

133
00:09:41.700 --> 00:09:44.070
The view returned will be the form.

134
00:09:45.630 --> 00:09:46.440
So.

135
00:09:47.530 --> 00:09:50.530
The status is still going to be 200 successful.

136
00:09:51.570 --> 00:09:59.760
However, the view returned is going to be the form, and if the form is returned, and that's a clear

137
00:09:59.760 --> 00:10:06.690
indication that our handler method did not accept the user's garbage data and it prompted them to go

138
00:10:06.690 --> 00:10:09.010
back and resubmit it.

139
00:10:09.030 --> 00:10:11.820
So let's run this integration test.

140
00:10:20.940 --> 00:10:22.470
And our test passes.

141
00:10:22.530 --> 00:10:29.790
Now, I'm fully confident that my post mapping can correctly handle successful and unsuccessful submissions.

142
00:10:30.840 --> 00:10:36.270
The last thing we're going to mock is a request on slash grades as before.

143
00:10:36.570 --> 00:10:42.780
I will create an integration test public void, and I'm going to call it.

144
00:10:43.580 --> 00:10:45.440
Test get grades.

145
00:10:47.500 --> 00:10:48.730
Heroes exception.

146
00:10:56.140 --> 00:11:01.210
Like always, I will make build a mock request using the request builder.

147
00:11:03.230 --> 00:11:12.200
Is equal to mock MVC request builders do dot get and I will make a get request on grades.

148
00:11:12.230 --> 00:11:15.380
Now we can use mock MVC to perform the get request.

149
00:11:15.380 --> 00:11:17.540
Mock MVC dot perform.

150
00:11:20.350 --> 00:11:21.370
All right.

151
00:11:22.230 --> 00:11:28.140
Again, this is beautiful how we're able to simulate a get request without actually running the application

152
00:11:28.140 --> 00:11:29.580
and going on local host.

153
00:11:29.820 --> 00:11:33.450
Anyways, now we're going to make assertions with respect to the model view and status.

154
00:11:33.450 --> 00:11:40.920
So by the end of the request and response, what we're expecting is a status of 200.

155
00:11:46.520 --> 00:11:49.430
The view returned must be grades.

156
00:11:56.300 --> 00:12:01.190
And the model must contain a grade's attribute model.

157
00:12:02.250 --> 00:12:03.900
Attribute exists.

158
00:12:05.460 --> 00:12:10.050
Grades because that grades attribute is needed to populate the grades table.

159
00:12:24.290 --> 00:12:26.690
And if you're on this test, it passes.

160
00:12:26.870 --> 00:12:33.370
This gives me a lot of confidence that a request made on the path slash grades will return the right

161
00:12:33.410 --> 00:12:35.150
view and the right data.

162
00:12:35.510 --> 00:12:41.300
With this last test, we successfully validated the interaction of different layers in the app.

163
00:12:41.810 --> 00:12:48.110
We mocked every web request the user can make, and by the end of the request response lifecycle, as

164
00:12:48.110 --> 00:12:53.630
it traversed all of the applications layers, we verified the model, we verified the view, and we

165
00:12:53.630 --> 00:12:55.130
verified the status.

