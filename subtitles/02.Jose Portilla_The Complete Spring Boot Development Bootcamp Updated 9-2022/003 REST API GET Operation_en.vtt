WEBVTT
1
00:00:00.630 --> 00:00:04.019
The get operation is used to access a resource.

2
00:00:04.970 --> 00:00:10.910
Rest API defines operations that can manipulate resources, one of them being get which can retrieve

3
00:00:10.910 --> 00:00:18.890
a resource post which creates a resource put which updates one and delete deletes a resource.

4
00:00:19.700 --> 00:00:23.600
In this lesson, your rest API will perform the get operation.

5
00:00:24.950 --> 00:00:26.250
Let's go through the process.

6
00:00:26.270 --> 00:00:31.430
If a user if a consumer wants to access a resource, they will make a get request.

7
00:00:31.460 --> 00:00:35.120
The Yury identifies the resource to be accessed.

8
00:00:35.890 --> 00:00:40.510
The API defines an operation that is capable of accessing that resource.

9
00:00:40.540 --> 00:00:46.510
It will use the information provided by the URI to access the resource in question.

10
00:00:47.250 --> 00:00:50.700
And it will send back the response in JSON format.

11
00:00:50.910 --> 00:00:54.960
JSON represents that data in the form of key value pairs.

12
00:00:56.650 --> 00:01:03.130
Typically the API would retrieve the resources from some kind of external database, but for our purposes,

13
00:01:03.130 --> 00:01:08.350
the contact resources are actually inside of the same application in the array list.

14
00:01:08.470 --> 00:01:16.330
So our rest controller is going to act as the mediator between the resources that are going to be here

15
00:01:16.330 --> 00:01:18.910
and the consumer that needs access.

16
00:01:19.240 --> 00:01:26.950
The array list currently doesn't have any data inside of it, and because we don't have any create methods

17
00:01:26.950 --> 00:01:31.270
just yet, what we're going to do is pre populate it with some data.

18
00:01:31.420 --> 00:01:36.970
So here I'm going to say equal to arrays dot as list.

19
00:01:38.030 --> 00:01:42.170
And we'll create one contact object over here.

20
00:01:43.010 --> 00:01:45.560
We will have an idea of 1 to 3.

21
00:01:46.440 --> 00:01:48.690
We'll call this guy, Jon Snow.

22
00:01:49.650 --> 00:01:56.670
And we'll just give him a random phone number of four one, three, five, three, two.

23
00:01:57.060 --> 00:01:58.980
We'll just say nine, four, three, whatever.

24
00:01:59.960 --> 00:02:02.990
We'll create another contact object here.

25
00:02:02.990 --> 00:02:03.890
We'll say four or five.

26
00:02:03.890 --> 00:02:04.670
Six.

27
00:02:05.000 --> 00:02:06.830
Tyrion Lannister.

28
00:02:09.050 --> 00:02:10.850
And just change the phone number up.

29
00:02:10.850 --> 00:02:14.750
We'll say 6134428213.

30
00:02:14.900 --> 00:02:17.390
And let's create another resource.

31
00:02:20.980 --> 00:02:22.360
Seven, eight, nine.

32
00:02:22.390 --> 00:02:23.560
The Hound.

33
00:02:25.170 --> 00:02:30.120
8973425642, whatever.

34
00:02:31.110 --> 00:02:38.010
So the first thing we need to do is when a user makes a gut request on slash contact.

35
00:02:38.040 --> 00:02:39.960
So here we'll say gut mapping.

36
00:02:41.700 --> 00:02:48.810
When a user makes a request on slash contact, the URI they specify is going to include an ID.

37
00:02:49.320 --> 00:02:53.100
As we wrap the ID in curly brackets.

38
00:02:54.640 --> 00:03:00.550
That means we expect the consumer to define a variable inside of their path.

39
00:03:02.050 --> 00:03:04.240
The handler method that receives this request.

40
00:03:04.240 --> 00:03:05.380
Public void.

41
00:03:05.560 --> 00:03:07.000
Get contact.

42
00:03:07.970 --> 00:03:09.980
For now is not going to return anything.

43
00:03:09.980 --> 00:03:16.040
We'll get back to this and it's going to access the variable inside of the path as a string.

44
00:03:17.220 --> 00:03:18.960
So here we'll say path variable.

45
00:03:19.550 --> 00:03:21.570
String ID.

46
00:03:24.260 --> 00:03:28.040
For now, we're just going to print the ID that gets passed into the U.S..

47
00:03:31.520 --> 00:03:33.110
Seem to have a mistake.

48
00:03:33.200 --> 00:03:34.910
Oh, silly me.

49
00:03:40.100 --> 00:03:44.930
Now, before starting this recording, I took the liberty of opening up a terminal.

50
00:03:44.960 --> 00:03:48.740
If you're using a Windows computer, open up your command prompt.

51
00:03:48.950 --> 00:03:56.150
And from here, the terminal will act as a consumer by making a get request using the Curl Command.

52
00:03:57.280 --> 00:04:01.660
Now, if a consumer wants to access a resource, they need to specify a URI.

53
00:04:01.690 --> 00:04:05.180
The URI identifies the location of a resource.

54
00:04:05.200 --> 00:04:09.400
What we're going to do is say local host 8080.

55
00:04:10.850 --> 00:04:12.140
Slash contact.

56
00:04:12.230 --> 00:04:13.250
And.

57
00:04:13.250 --> 00:04:19.519
And now the next thing we input, our rest API is going to interpret as a path variable.

58
00:04:21.180 --> 00:04:24.270
We want to access the resource with the following ID.

59
00:04:28.060 --> 00:04:29.790
Now nothing really happens.

60
00:04:29.800 --> 00:04:37.630
It prints the path variable and in accordance with the rest API guideline, the URI should identify

61
00:04:37.630 --> 00:04:39.790
the location of a resource.

62
00:04:42.040 --> 00:04:47.140
But right now the API doesn't actually do anything upon receiving the location.

63
00:04:47.140 --> 00:04:53.860
So based on the path variable, we need to return the JSON representation of the resource that they're

64
00:04:53.860 --> 00:04:54.760
requesting.

65
00:04:55.450 --> 00:04:58.330
Let's talk about the response body annotation.

66
00:04:58.480 --> 00:05:03.490
The response body annotation serialize an object into JSON.

67
00:05:05.450 --> 00:05:09.260
If we go back here and return a contact object.

68
00:05:12.110 --> 00:05:13.400
Let's just import it.

69
00:05:15.240 --> 00:05:22.440
Response body is going to serialize the object that we return into a JSON of key value pairs.

70
00:05:26.050 --> 00:05:26.380
No.

71
00:05:26.380 --> 00:05:32.170
This annotation can be applied at the class level or it can be applied at the level of each handler

72
00:05:32.170 --> 00:05:32.860
method.

73
00:05:32.890 --> 00:05:38.950
For now, we're just going to apply it at the level of this method, such that whatever object this

74
00:05:38.950 --> 00:05:42.850
handler method returns needs to be converted into JSON.

75
00:05:43.330 --> 00:05:50.410
Now, JSON is a universal way of communicating with other systems and the object we return must be serialized

76
00:05:50.410 --> 00:05:53.180
into JSON before being sent back to the consumer.

77
00:05:53.200 --> 00:05:56.830
So let's go ahead and just copy and paste.

78
00:05:56.830 --> 00:06:01.650
The first object will set up some methods inside the service class after.

79
00:06:01.660 --> 00:06:03.700
So let's just return new contact.

80
00:06:03.700 --> 00:06:04.870
John Snow.

81
00:06:08.660 --> 00:06:09.710
Back to our terminal.

82
00:06:09.710 --> 00:06:11.840
We will use Curl to make a request.

83
00:06:13.290 --> 00:06:20.340
Here you can see the object being returned was serialized into JSON before being returned thanks to

84
00:06:20.340 --> 00:06:22.440
the response body annotation.

85
00:06:23.720 --> 00:06:30.470
If you don't include it, our app is going to send back a plain old Java object and the recipient will

86
00:06:30.470 --> 00:06:32.320
just have no idea what to do with it.

87
00:06:32.330 --> 00:06:37.310
So if we were to curl that, it just shows an error not found.

88
00:06:37.580 --> 00:06:43.340
So long story short, JSON is the universal way of communicating with other systems.

89
00:06:43.460 --> 00:06:45.800
Which brings me to my next point.

90
00:06:46.340 --> 00:06:52.300
Rest controller is basically the same thing as the controller annotation plus response body.

91
00:06:52.310 --> 00:06:58.880
So if you're building a rest API instead of including response body to serialize the returned object

92
00:06:58.880 --> 00:07:05.000
into JSON, you can just define your controller class as a rest controller and avoid that step.

93
00:07:08.190 --> 00:07:12.960
So remember that I told you response body can also be applied at the class level.

94
00:07:14.790 --> 00:07:19.560
And instead of doing that, we can just skip that step and just say Rest controller.

95
00:07:22.450 --> 00:07:26.720
This naming also befits the fact that we're building a rest API.

96
00:07:26.740 --> 00:07:29.680
So if I were to retry this, we'll curl.

97
00:07:30.860 --> 00:07:31.370
Boom.

98
00:07:32.080 --> 00:07:39.910
The response body annotation that exists behind the scenes serialize our object into JSON before sending

99
00:07:39.910 --> 00:07:40.600
it back.

100
00:07:40.630 --> 00:07:45.670
Here we can see that the JSON is just a bunch of key value pairs.

101
00:07:49.040 --> 00:07:50.030
And one more thing.

102
00:07:50.030 --> 00:07:52.690
It's not just the object that will be returning.

103
00:07:52.700 --> 00:07:59.840
We're going to return a response entity which allows us to respond with data as well as a status code.

104
00:08:01.680 --> 00:08:06.870
So here among the official Mozilla documentation for HTTP status codes.

105
00:08:06.960 --> 00:08:09.480
These status codes, in my opinion, are useless.

106
00:08:09.480 --> 00:08:11.280
You will almost never, ever use them.

107
00:08:11.280 --> 00:08:15.420
So let's just jump over to the 200 category for now.

108
00:08:16.330 --> 00:08:22.270
Now, any response that we send back in the 200 category means that the request was good and it was

109
00:08:22.270 --> 00:08:23.140
successful.

110
00:08:23.410 --> 00:08:26.670
200 OC is the most common.

111
00:08:26.680 --> 00:08:31.030
It means, hey, we got your request and it was successful.

112
00:08:31.510 --> 00:08:39.610
201 is most often used with post requests because what it means is, Hey, we got your request.

113
00:08:39.610 --> 00:08:44.230
It was successful and a new resource was created as a result.

114
00:08:45.690 --> 00:08:48.900
Now 202 means, hey, we got your request.

115
00:08:48.900 --> 00:08:49.800
It's a good request.

116
00:08:49.800 --> 00:08:54.960
It was successful and we're cuing it for processing, so we're not going to fulfill your requests right

117
00:08:54.960 --> 00:08:55.500
away.

118
00:08:55.530 --> 00:08:57.240
It's going to happen later.

119
00:08:57.540 --> 00:09:00.000
And another common one is 204.

120
00:09:00.030 --> 00:09:02.340
This means, hey, we got your request.

121
00:09:02.340 --> 00:09:05.790
It was successful, but there's no data to really send back.

122
00:09:05.790 --> 00:09:09.090
This would most often be used in a delete request.

123
00:09:10.200 --> 00:09:11.340
Now there are others.

124
00:09:11.340 --> 00:09:16.020
You can feel free to go through them yourself, but the ones I just presented are pretty much the most

125
00:09:16.020 --> 00:09:17.100
common ones.

126
00:09:17.580 --> 00:09:23.190
All right, so we'll go back here, and instead of returning just the object, we're going to return

127
00:09:23.280 --> 00:09:24.960
a response entity.

128
00:09:26.740 --> 00:09:31.700
And inside of generics, you can specify what type of data we are going to be sending back.

129
00:09:31.720 --> 00:09:34.240
We're going to be sending back a contact.

130
00:09:35.800 --> 00:09:42.310
Now in this case, your contact service implementation already contains a find index by ID function.

131
00:09:42.340 --> 00:09:44.980
I set it up for you in the interest of time.

132
00:09:45.390 --> 00:09:48.160
Integer streams of something already covered in the Java course.

133
00:09:48.160 --> 00:09:52.870
So I'm not going to go through them here, but it doesn't really matter if you use streams or you could

134
00:09:52.870 --> 00:09:55.250
have also used a regular for loop over here.

135
00:09:55.270 --> 00:09:59.950
In any case, all it does is it goes through your contacts and finds one that matches the ID.

136
00:09:59.980 --> 00:10:01.480
You can use a loop if you want.

137
00:10:01.630 --> 00:10:08.650
Inside the interface, what we're going to do is bind any implementation into defining a get contact

138
00:10:08.650 --> 00:10:09.910
by ID method.

139
00:10:10.120 --> 00:10:11.230
Contact.

140
00:10:12.010 --> 00:10:15.580
Get contact by ID.

141
00:10:24.910 --> 00:10:28.640
And then we're going to override this method inside of the implementation.

142
00:10:28.660 --> 00:10:31.930
We can override get contact by ID.

143
00:10:32.590 --> 00:10:37.720
And here I can just return contact, repository, dot, get contact.

144
00:10:38.080 --> 00:10:42.760
And we're going to get the contact at the index based on the ID that's provided.

145
00:10:45.060 --> 00:10:48.720
Now back here, I can say contact.

146
00:10:49.080 --> 00:10:51.810
Contact is equal to contact.

147
00:10:51.810 --> 00:10:58.170
Service dot get contact by ID and then I'm going to return a response entity.

148
00:10:58.710 --> 00:11:01.200
A new response entity.

149
00:11:01.200 --> 00:11:05.850
And this response entity is going to encapsulate an object.

150
00:11:06.510 --> 00:11:13.110
The object being returned will be serialized into JSON as it's being sent back to the consumer.

151
00:11:13.260 --> 00:11:21.390
And we're also going to send back a status code of OC, so a HTTP status dot OC and the status code

152
00:11:21.390 --> 00:11:27.630
OC translates to 200 to indicate that we received the request and it was successful.

153
00:11:28.200 --> 00:11:29.040
All right.

154
00:11:29.130 --> 00:11:32.490
Rerunning my application in debug mode.

155
00:11:43.510 --> 00:11:44.410
Back to our terminal.

156
00:11:44.410 --> 00:11:46.720
We will use Carl to make a request.

157
00:11:47.560 --> 00:11:51.160
If a consumer wants to access a resource, need to specify a URI.

158
00:11:51.190 --> 00:11:53.940
The URI identifies the location of a resource.

159
00:11:53.950 --> 00:11:59.110
The following URI identifies the location of a contact resource with ID of 1 to 3.

160
00:12:00.900 --> 00:12:06.630
And the API defines an operation that is capable of accessing the resource in question.

161
00:12:06.810 --> 00:12:13.800
It uses the information provided by the URI, which is a string ID of 1 to 3 to try and find the resource

162
00:12:13.800 --> 00:12:15.360
inside of the array list.

163
00:12:16.290 --> 00:12:19.540
It should be able to find it all right.

164
00:12:19.560 --> 00:12:21.330
It was able to get the resource.

165
00:12:21.330 --> 00:12:26.580
And now here the resource is going to be serialized into JSON before being sent back.

166
00:12:27.280 --> 00:12:32.980
So those are going to be your key value pairs and you can see that it sends back a status of 200.

167
00:12:37.680 --> 00:12:44.000
Now as the consumer, I see that data has been returned, but I can't really see the status code.

168
00:12:44.010 --> 00:12:46.170
So what we're going to do is go to Chrome.

169
00:12:47.750 --> 00:12:49.550
And we're going to make that same request.

170
00:12:49.550 --> 00:12:55.400
We'll say local host slash 80, 80 slash contact, slash, one, two, three.

171
00:13:02.420 --> 00:13:04.760
Here we see the JSON that gets sent back.

172
00:13:06.220 --> 00:13:08.770
If we go to the developer tools, more tools.

173
00:13:08.770 --> 00:13:11.710
Developer tools go to the network.

174
00:13:15.140 --> 00:13:18.200
Press refresh, we see a status of 200.

175
00:13:18.560 --> 00:13:20.390
Now, this is a bit inconvenient.

176
00:13:20.390 --> 00:13:24.590
So in the next video, we'll be downloading a software to make requests from.

