WEBVTT
1
00:00:00.210 --> 00:00:03.270
Same leaf allows you to combine the view and the model.

2
00:00:05.140 --> 00:00:09.980
Your model contains data, but the next step is to merge that data with the view, and that's what Fine

3
00:00:10.030 --> 00:00:10.840
Leaf is for.

4
00:00:13.920 --> 00:00:17.670
So in this lesson you will use thin leaf to combine the view and the model.

5
00:00:20.570 --> 00:00:22.330
Let's go through the process right now.

6
00:00:22.340 --> 00:00:28.520
Your view is a static HTML and your model contains an attribute that maps to a grade object.

7
00:00:28.550 --> 00:00:30.440
A key value pair, if you will.

8
00:00:30.860 --> 00:00:36.830
Somehow Leaf is going to magically merge the data from the model with visual elements in the view.

9
00:00:42.070 --> 00:00:43.480
How will it do that?

10
00:00:46.730 --> 00:00:49.430
The answer lies in variable expressions.

11
00:00:51.640 --> 00:00:56.050
A variable expression executes on a model attribute in some way.

12
00:00:56.260 --> 00:01:01.390
Repeating it one more time a variable expression executes on a model attributes.

13
00:01:04.769 --> 00:01:10.950
A variable expression consists of a dollar sign followed by curly brackets inside the curly brackets.

14
00:01:10.970 --> 00:01:15.040
The variable expression executes on a model attribute in some way.

15
00:01:15.050 --> 00:01:19.280
In this case, the variable expression returns the model attribute age.

16
00:01:24.750 --> 00:01:28.620
There are many ways that a variable expression can execute on a model attributes.

17
00:01:28.650 --> 00:01:34.560
A variable expression can be used to return a model attribute or a value that derives from it.

18
00:01:34.800 --> 00:01:38.190
It can execute a condition based on a model attributes.

19
00:01:39.610 --> 00:01:42.580
A variable expression can also be used in a loop.

20
00:01:43.240 --> 00:01:47.560
And it can also execute utility methods on a model attribute.

21
00:01:48.250 --> 00:01:51.100
In this lesson, we're going to be looking at the first scenario.

22
00:01:54.970 --> 00:01:57.700
Finally, text displays a text value.

23
00:02:01.160 --> 00:02:06.810
This variable expression returns the score that derives from the model attribute grade.

24
00:02:06.830 --> 00:02:10.690
Now, this value could be a string, could be a boolean, could be a number.

25
00:02:10.759 --> 00:02:12.800
Finally, text doesn't care.

26
00:02:12.950 --> 00:02:17.630
All time leaf text is going to do is display the result as a text value.

27
00:02:21.240 --> 00:02:24.000
You should already have finally installed as a dependency.

28
00:02:24.030 --> 00:02:28.770
The family of dependency is required to work with HTML templates.

29
00:02:30.900 --> 00:02:37.260
So far your table only contains one row with a bunch of headers as is reflected in the UI.

30
00:02:38.490 --> 00:02:42.360
Per the HTML cheat sheet, I'm going to add another row.

31
00:02:45.230 --> 00:02:47.240
That contains three data cells.

32
00:02:47.240 --> 00:02:48.830
So these are header cells.

33
00:02:48.830 --> 00:02:50.810
We're going to create data cells.

34
00:02:52.930 --> 00:02:55.870
I'll copy this two more times.

35
00:02:57.190 --> 00:02:59.890
The first cell we're going to say, Harry.

36
00:03:01.330 --> 00:03:03.970
The subject will be potions.

37
00:03:05.030 --> 00:03:07.370
In the score is a C minus.

38
00:03:08.810 --> 00:03:09.160
All right.

39
00:03:09.170 --> 00:03:13.790
Now, thanks to Spring Boot Def Tools, our application should reflect the changes.

40
00:03:13.790 --> 00:03:14.900
And it does.

41
00:03:15.710 --> 00:03:17.960
And now your table has another row of data.

42
00:03:18.230 --> 00:03:21.830
However, the data was written directly into the HTML.

43
00:03:22.010 --> 00:03:26.060
So remove the hard coded data, but keep the cells as is.

44
00:03:28.080 --> 00:03:31.530
And so inside the first cell, we're going to set a leaf text.

45
00:03:34.440 --> 00:03:36.210
Equal to a variable expression.

46
00:03:36.210 --> 00:03:41.340
And finally, if text is just going to display whatever the result is as a text, in this case, we

47
00:03:41.340 --> 00:03:48.000
just want our variable expression to return the name field that derives from the model attribute grade.

48
00:03:54.470 --> 00:03:56.270
We're going to copy this over here.

49
00:04:00.420 --> 00:04:02.520
Here, we can display the subject.

50
00:04:05.830 --> 00:04:07.930
And here we will display the score.

51
00:04:12.170 --> 00:04:13.510
This is really important.

52
00:04:13.520 --> 00:04:18.500
The variable expression invokes the getter of each field, so the naming needs to match.

53
00:04:19.560 --> 00:04:23.520
So if I go back thanks to Spring Boot Def Tools, everything should rerun.

54
00:04:25.740 --> 00:04:26.760
And voila.

55
00:04:26.790 --> 00:04:29.880
Finally uses the model to populate the view with data.

56
00:04:30.570 --> 00:04:36.600
Now, before I wrap up this lesson, let's just assume we did happen to misspell one of the fields.

57
00:04:36.990 --> 00:04:40.650
What would happen is we would get a big error.

58
00:04:42.890 --> 00:04:49.730
Now what's really important with these areas is to not get intimidated by them, because somewhere in

59
00:04:49.730 --> 00:04:54.990
all of these logs, there is a very useful message that's going to tell you exactly where you went wrong.

60
00:04:55.010 --> 00:04:58.400
So here it tells us an error happened during template parsing.

61
00:04:58.560 --> 00:04:59.780
Okay, what is that error?

62
00:04:59.810 --> 00:05:06.920
Let's scroll through and eventually you'll see that the parse exception occurred because it could not

63
00:05:06.920 --> 00:05:11.570
find the subject field that it was trying to get from the model object.

64
00:05:11.600 --> 00:05:17.840
The model object has a great dot subject field, so make sure to fix it accordingly.

65
00:05:19.070 --> 00:05:20.300
All right.

66
00:05:24.840 --> 00:05:29.010
And so to recap, you use dime leaf to populate the view with data from the model.

67
00:05:29.130 --> 00:05:33.660
When a user makes a request, the controller maps the request to a handler method.

68
00:05:33.750 --> 00:05:36.900
The handler method stores a great object inside the model.

69
00:05:36.930 --> 00:05:41.280
Each cell in the table row displays a field value from the model object.

70
00:05:45.700 --> 00:05:49.810
After merging the model variable, the controller presents your updated view.

