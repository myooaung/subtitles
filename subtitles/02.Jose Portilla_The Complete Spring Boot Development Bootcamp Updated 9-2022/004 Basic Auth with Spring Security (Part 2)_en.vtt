WEBVTT
1
00:00:00.420 --> 00:00:00.920
Welcome back.

2
00:00:00.930 --> 00:00:05.939
We just secured our API such that the user needs to include credentials in each request in order to

3
00:00:05.939 --> 00:00:07.130
be authenticated.

4
00:00:07.140 --> 00:00:13.260
Spring Security tries to match the username and password that get passed in against the user details

5
00:00:13.260 --> 00:00:14.520
that are in memory.

6
00:00:14.670 --> 00:00:20.190
If there is a match, it's going to send back a 200 and process, whatever operation that they were

7
00:00:20.190 --> 00:00:21.030
interested in.

8
00:00:21.030 --> 00:00:23.640
Otherwise it's going to send back a401.

9
00:00:23.640 --> 00:00:24.930
Let's try it out.

10
00:00:24.930 --> 00:00:30.930
I will need to authenticate in order to perform this get operation authentication works and the operation

11
00:00:30.930 --> 00:00:34.410
gets processed if I do not include credentials.

12
00:00:35.570 --> 00:00:37.400
It sends back a 401.

13
00:00:37.430 --> 00:00:39.500
Authentication did not work.

14
00:00:39.530 --> 00:00:40.610
All right.

15
00:00:44.380 --> 00:00:47.260
It's time for step two where we implement some authorization.

16
00:00:47.410 --> 00:00:53.890
You'll recall that we can only authorize admins to access the delete operation right after we authorize

17
00:00:53.890 --> 00:00:57.130
requests is where we can specify some authorization rules.

18
00:00:57.130 --> 00:01:05.349
We can invoke dot and matches and to match yours can apply authorization on a path that you specify

19
00:01:05.500 --> 00:01:08.620
and it can also accept an HTTP method as well.

20
00:01:08.650 --> 00:01:11.830
So we're going to say, you know what, let's just ignore the path for now.

21
00:01:11.860 --> 00:01:17.740
We're going to apply authorization on every single method of type delete.

22
00:01:22.420 --> 00:01:27.100
And all of these delete methods, they must have a role of admin.

23
00:01:27.550 --> 00:01:33.310
So whoever is trying to invoke this method must have the following role in order to be authorized.

24
00:01:33.340 --> 00:01:34.480
Let's try it out.

25
00:01:48.270 --> 00:01:52.880
Now, if I pass in a user and followed by user pass, it's not going to work.

26
00:01:52.890 --> 00:01:58.320
If I pass an admin followed by admin pass, it's still not going to work even though these credentials

27
00:01:58.320 --> 00:02:01.320
match a user that has a role of admin.

28
00:02:01.350 --> 00:02:04.380
The reason this happens is because spring security.

29
00:02:04.380 --> 00:02:09.220
What it does is it enables c srf protection by default.

30
00:02:09.240 --> 00:02:13.110
In other words, it's automatically set up to protect you from CSF attacks.

31
00:02:13.110 --> 00:02:18.490
So it's expecting the client to send over some kind of CSF token, but we're not going to do that.

32
00:02:18.510 --> 00:02:20.040
If you want to learn more about Ksf.

33
00:02:20.400 --> 00:02:22.650
Feel free to check the link in the resources.

34
00:02:22.650 --> 00:02:28.350
But the reason we're not going to dwell on it because CSR is an attack against the browsers.

35
00:02:28.470 --> 00:02:31.920
Our service is exclusively used by non browsers.

36
00:02:31.920 --> 00:02:34.710
For example, we're using postmen in production.

37
00:02:34.710 --> 00:02:39.750
Whoever is making calls to the API will probably be making requests from another web service, which

38
00:02:39.750 --> 00:02:46.110
means there will be zero point in enabling CSF protection, which is known to be expensive.

39
00:02:46.110 --> 00:02:50.280
So we're going to go back here and say See SRF disable.

40
00:02:51.670 --> 00:02:53.940
Turning CSR protection off.

41
00:02:53.950 --> 00:02:55.500
Let's go back.

42
00:02:55.510 --> 00:02:59.470
I'll start by making a delete request using the user credentials.

43
00:03:02.760 --> 00:03:03.870
And beautiful.

44
00:03:03.870 --> 00:03:07.380
We do get an error code, but it's the error code that makes sense.

45
00:03:07.500 --> 00:03:14.820
So authentication did work because the credentials match a user that is in memory, but that user has

46
00:03:14.820 --> 00:03:19.680
a roll of user, so they cannot access the following operation.

47
00:03:19.680 --> 00:03:21.420
They do not have the authority.

48
00:03:21.690 --> 00:03:28.380
But if an admin were to log in admin admin pass, they will not be forbidden.

49
00:03:29.040 --> 00:03:31.950
They can successfully invoke the delete operation.

50
00:03:32.960 --> 00:03:35.240
Now step three is pretty much already done.

51
00:03:35.240 --> 00:03:40.550
So in step four, we're going to authorize users and admins to access the post method.

52
00:03:42.640 --> 00:03:46.270
So here, what I'll do is I'll say dot and to matters.

53
00:03:48.140 --> 00:03:49.330
I'll do the same thing.

54
00:03:49.340 --> 00:03:53.780
Any HTTP method of type post needs to have.

55
00:03:54.350 --> 00:03:57.830
We'll say it has any role so we can put a bunch of roles.

56
00:03:57.830 --> 00:04:04.790
So anybody with a role of admin and a role of user is able to invoke post requests.

57
00:04:06.930 --> 00:04:09.780
So let me go back and create some contacts.

58
00:04:10.890 --> 00:04:11.570
Let's make sure.

59
00:04:11.580 --> 00:04:11.820
All right.

60
00:04:11.820 --> 00:04:14.190
Let's just create a bunch of Jon Snow contacts.

61
00:04:16.630 --> 00:04:18.839
Works fine for user credentials.

62
00:04:18.850 --> 00:04:20.829
Let's try admin credentials.

63
00:04:22.620 --> 00:04:24.270
And it works great here as well.

64
00:04:24.300 --> 00:04:25.350
All right.

65
00:04:25.530 --> 00:04:29.790
Now, before we move on to step number five, let me play around with and to matters.

66
00:04:29.910 --> 00:04:33.180
Usually you're going to have more than one delete request, right?

67
00:04:33.180 --> 00:04:37.630
So you can't just say, oh, every single delete method can be accessible by admin.

68
00:04:37.650 --> 00:04:39.450
What if I want to introduce some variety?

69
00:04:39.690 --> 00:04:42.620
So well, let me play around with the paths a little.

70
00:04:42.630 --> 00:04:45.600
What I'll do is I'll go back here and I'll call this.

71
00:04:46.200 --> 00:04:47.490
I don't know, slash, delete.

72
00:04:47.490 --> 00:04:50.040
Slash ID, slash contact.

73
00:04:51.490 --> 00:04:54.790
And I want to match this path specifically.

74
00:04:55.060 --> 00:04:57.370
So what I go back and say.

75
00:04:58.110 --> 00:04:58.830
I don't know.

76
00:04:59.630 --> 00:05:01.910
Slash, delete, slash contact.

77
00:05:01.920 --> 00:05:02.960
Will that work?

78
00:05:08.520 --> 00:05:13.980
So now let me try and make a delete request using user credentials.

79
00:05:14.040 --> 00:05:20.190
And if our path successfully matches what we have over here, it should block them from making that

80
00:05:20.190 --> 00:05:20.970
request.

81
00:05:23.120 --> 00:05:26.630
Oh, I forgot that I changed the path to slash delete.

82
00:05:28.510 --> 00:05:31.480
Slash some ID slash contact.

83
00:05:32.940 --> 00:05:33.660
All right.

84
00:05:35.300 --> 00:05:37.520
And unfortunately it works.

85
00:05:37.520 --> 00:05:38.580
That's not good.

86
00:05:38.600 --> 00:05:46.190
We only want admins to be able to delete, but the client with a roll of user is able to do so as well.

87
00:05:46.370 --> 00:05:51.440
That's because this matcher does not actually match this path.

88
00:05:52.010 --> 00:05:54.420
But the thing is, the ID is dynamic.

89
00:05:54.440 --> 00:05:55.550
It could be anything.

90
00:05:55.700 --> 00:05:57.410
So what can we put here?

91
00:05:57.560 --> 00:05:59.180
And the answer is simple.

92
00:05:59.660 --> 00:06:02.030
You can put an asterisk in between.

93
00:06:03.920 --> 00:06:08.790
With the asterisk will do is match any amount of letters or characters in the URL.

94
00:06:08.810 --> 00:06:11.930
So we start with delete, we end with contact.

95
00:06:11.930 --> 00:06:16.670
But anything that comes in the middle could be any number of letters or characters.

96
00:06:16.670 --> 00:06:17.690
It doesn't matter.

97
00:06:17.690 --> 00:06:20.090
So if we try making that request again.

98
00:06:20.960 --> 00:06:22.210
They are forbidden.

99
00:06:22.220 --> 00:06:24.890
It forbids the client with a role of user.

100
00:06:26.930 --> 00:06:27.860
All right.

101
00:06:28.430 --> 00:06:31.280
Now, what I'm going to do is add a comment here.

102
00:06:32.900 --> 00:06:38.600
That says path was changed to demo and matters.

103
00:06:42.680 --> 00:06:49.010
So we're down to our last step and that is get operations can be accessed by anybody.

104
00:06:49.020 --> 00:06:51.270
No authentication should be required.

105
00:06:51.510 --> 00:07:00.030
So the last thing we're going to add to our security filter chain is dot and matches and any HTTP method

106
00:07:00.030 --> 00:07:01.170
of type get.

107
00:07:01.990 --> 00:07:02.980
We're going to say.

108
00:07:03.870 --> 00:07:05.010
Permit all.

109
00:07:08.100 --> 00:07:09.300
Then I now import it.

110
00:07:09.630 --> 00:07:10.350
There you go.

111
00:07:11.070 --> 00:07:18.540
So our filter chain specifies that anybody and everybody can access get requests, but any other request

112
00:07:18.570 --> 00:07:20.210
needs to be authenticated.

113
00:07:20.220 --> 00:07:26.550
So the post and delete requests and every other type of request that may exist in our API, they will

114
00:07:26.550 --> 00:07:31.200
require basic authentication, but get requests will not.

115
00:07:31.320 --> 00:07:37.950
So I can go back and make a get request over here without passing in any credentials.

116
00:07:39.470 --> 00:07:40.520
Works fine.

117
00:07:41.330 --> 00:07:43.070
I can do the same thing over here.

118
00:07:43.760 --> 00:07:45.290
And that works fine as well.

119
00:07:45.320 --> 00:07:49.430
If I don't include credentials here, it's going to yell at me.

120
00:07:49.730 --> 00:07:50.570
401.

121
00:07:50.570 --> 00:07:53.840
Unauthorized if I do include credentials.

122
00:07:56.450 --> 00:08:01.670
Works perfectly if I go back here, don't include credentials, does not work.

123
00:08:01.670 --> 00:08:09.200
But if I include the wrong credentials so if I try to authenticate as a user, I am forbidden.

124
00:08:09.200 --> 00:08:12.320
But if I try to authenticate as an admin.

125
00:08:16.160 --> 00:08:17.750
It works beautifully.

126
00:08:18.290 --> 00:08:21.330
And that's really it for basic authentication.

127
00:08:21.350 --> 00:08:27.620
There is one last thing I want to emphasize before we move on, and that is basic authentication should

128
00:08:27.620 --> 00:08:30.800
only ever be used for small applications.

129
00:08:30.830 --> 00:08:32.700
Otherwise, it's bad practice.

130
00:08:32.720 --> 00:08:38.480
The only reason I taught you basic math is because it offers a simple introduction into spring security.

131
00:08:38.480 --> 00:08:43.760
You have to walk before you can run, and now that you know the basics, we can take your training wheels

132
00:08:43.760 --> 00:08:49.400
off and jump straight into the more secure, token based authentication using JWT.

133
00:08:49.700 --> 00:08:52.520
Things are about to get really interesting, so I hope you're ready.

