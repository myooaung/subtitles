WEBVTT
1
00:00:00.530 --> 00:00:03.880
In this lesson, you will refactor your code around options.

2
00:00:05.840 --> 00:00:10.250
Before we start this lesson, I want you to create a new folder called Exception.

3
00:00:14.730 --> 00:00:18.270
And in your resources folder there are three Java files.

4
00:00:18.300 --> 00:00:20.880
Please take some time to drag them over here.

5
00:00:26.270 --> 00:00:28.310
All right, you should have the following set up.

6
00:00:28.310 --> 00:00:29.240
Let's begin.

7
00:00:30.450 --> 00:00:34.830
An optional is meant to prevent the possibility of a null pointer exception.

8
00:00:36.840 --> 00:00:40.710
It is a container around an object that risks being null.

9
00:00:42.370 --> 00:00:48.760
You'll notice that the crowd repository fine by ID method it actually returns an optional students.

10
00:00:48.940 --> 00:00:49.970
Why does it do that?

11
00:00:49.990 --> 00:00:52.030
Why not just return the student object itself?

12
00:00:52.030 --> 00:00:55.030
Why is it wrapping it around this weird optional type?

13
00:00:55.270 --> 00:00:57.300
It's actually trying to send you a message.

14
00:00:57.310 --> 00:01:03.010
It's telling you, Hey, this student object that I am sending back, it's at risk of being null.

15
00:01:05.310 --> 00:01:11.490
We're forcefully unwrapping the optional using dust gets a few force fill the unwrap an optional like

16
00:01:11.490 --> 00:01:14.280
so without doing any prior checks before.

17
00:01:14.280 --> 00:01:20.340
If the object inside the optional happens to be null, then we're actually leaving ourselves exposed

18
00:01:20.340 --> 00:01:22.320
to a no such element exception.

19
00:01:22.680 --> 00:01:23.580
Let's try it out.

20
00:01:23.580 --> 00:01:26.100
I'm going to look for a student that doesn't exist.

21
00:01:27.060 --> 00:01:28.950
A student with an ID of ten.

22
00:01:31.500 --> 00:01:34.110
And we get back a no such element exception.

23
00:01:34.440 --> 00:01:36.390
Now the no such element exception.

24
00:01:36.390 --> 00:01:43.050
It is a Java exception and it's an indicator that you as the Java developer, you failed to account

25
00:01:43.050 --> 00:01:44.880
for something in your application.

26
00:01:45.240 --> 00:01:50.460
The find by ID method by virtue of sending us back the object in an optional.

27
00:01:50.490 --> 00:01:52.170
It was giving us a warning.

28
00:01:52.170 --> 00:01:56.700
Hey, the object inside might be null and we completely ignored that warning.

29
00:01:56.700 --> 00:01:59.640
We just forcefully unwrapped it and got an exception.

30
00:01:59.730 --> 00:02:05.600
So instead what we should do is consider the fact that the optional might be null.

31
00:02:05.610 --> 00:02:11.670
So the correct way of handling the situation is setting this equal to an optional type.

32
00:02:12.030 --> 00:02:13.440
We'll say optional.

33
00:02:17.600 --> 00:02:18.800
Of type student.

34
00:02:19.500 --> 00:02:22.890
Student is equal to whatever this gives us back.

35
00:02:24.090 --> 00:02:26.580
We're not going to unwrap the optional just yet.

36
00:02:26.610 --> 00:02:28.410
First, we have to make a check.

37
00:02:28.470 --> 00:02:31.410
So we're going to say if student.

38
00:02:32.280 --> 00:02:38.610
Dot is present if there is actually a value inside this optional, if the object inside is not null.

39
00:02:38.880 --> 00:02:41.370
Only then can we actually unwrap it.

40
00:02:41.580 --> 00:02:42.660
Return student.

41
00:02:42.930 --> 00:02:43.590
Get.

42
00:02:44.590 --> 00:02:46.330
By unwrapping it over here.

43
00:02:46.330 --> 00:02:51.370
I'm at no risk of throwing a no such element exception if there isn't a value.

44
00:02:51.400 --> 00:02:58.990
What I would want to do is return a404 to the user and I can do that by throwing a custom unchecked

45
00:02:58.990 --> 00:02:59.770
exception.

46
00:02:59.770 --> 00:03:04.630
So throw new student not found exception.

47
00:03:07.680 --> 00:03:10.290
Again, DevTools is really slowing everything down.

48
00:03:11.050 --> 00:03:16.600
Passing in the ID and your next workbook, we're going to handle that exception inside of a controller

49
00:03:16.600 --> 00:03:22.450
advice and then there will send a status code of 404 in the event of a student not found exception.

50
00:03:23.370 --> 00:03:26.520
So let's repeat this process wherever else.

51
00:03:26.520 --> 00:03:32.190
We're forcefully unwrapping an optional without doing a prior check inside, of course.

52
00:03:32.190 --> 00:03:33.500
Service implementation.

53
00:03:33.510 --> 00:03:34.950
I'm doing it over here.

54
00:03:35.980 --> 00:03:41.080
Let's store whatever optional is returned inside of an optional course type.

55
00:03:42.320 --> 00:03:45.710
Course is equal to course repository defined by ID.

56
00:03:45.740 --> 00:03:50.060
We're not going to unwrap the optional until we perform a check.

57
00:03:50.060 --> 00:03:54.560
If course is present then we will say return course.

58
00:03:54.560 --> 00:03:55.370
Don't get.

59
00:03:58.020 --> 00:04:03.870
Otherwise throw a new in this case course not found exception.

60
00:04:06.730 --> 00:04:13.180
When you're checking if there is actually a value inside of an optional, it's very similar to performing

61
00:04:13.180 --> 00:04:15.390
a null check on a normal object.

62
00:04:15.400 --> 00:04:19.149
It's just that this, in my opinion, is more elegant.

63
00:04:19.149 --> 00:04:24.190
And it's also what's being returned by fine by ID, so we have no choice but to check it in this manner.

64
00:04:24.670 --> 00:04:25.570
All right.

65
00:04:25.720 --> 00:04:26.890
And.

66
00:04:28.190 --> 00:04:30.020
Should be good everywhere else.

67
00:04:31.780 --> 00:04:35.800
Um, inside of great service implementation.

68
00:04:36.220 --> 00:04:37.360
And this is a problem.

69
00:04:37.360 --> 00:04:41.560
This returns a grade, this also returns a grade.

70
00:04:41.680 --> 00:04:46.570
And me, as an unsuspecting developer, I called this method.

71
00:04:46.570 --> 00:04:51.340
It gave me back an object and I did not even consider that this object might be null.

72
00:04:51.370 --> 00:04:55.570
I tried calling set score from a null and it threw a null pointer exception.

73
00:04:55.690 --> 00:05:03.010
Well, instead, if I go back to my great repository and I return a grade that is actually wrapped around

74
00:05:03.010 --> 00:05:03.820
an optional.

75
00:05:05.950 --> 00:05:08.890
I'm basically warning whoever is calling this method.

76
00:05:08.920 --> 00:05:12.940
Hey, the object that I'm sending you back, it is at risk of being null.

77
00:05:12.970 --> 00:05:15.440
So for your sake, I wrapped it inside of an optional.

78
00:05:15.460 --> 00:05:17.680
That way you don't get a null pointer exception.

79
00:05:17.680 --> 00:05:24.040
But please do anticipate the scenario that the object I'm sending you back might be null and handle

80
00:05:24.040 --> 00:05:25.900
this optional appropriately.

81
00:05:26.110 --> 00:05:32.380
So as I call this method over here, I now see that it actually returns an optional grade.

82
00:05:32.380 --> 00:05:35.410
And this prompts me to be careful because now I know.

83
00:05:35.410 --> 00:05:37.480
Oh, this might actually be null.

84
00:05:38.410 --> 00:05:42.400
So I'm going to store this inside of an optional grade type.

85
00:05:43.810 --> 00:05:45.220
Optional grade.

86
00:05:47.680 --> 00:05:48.840
And then I will check.

87
00:05:48.850 --> 00:05:53.950
Is there actually a value inside if grade DOT is present?

88
00:05:54.860 --> 00:06:00.680
In that case, I can feel safe about unwrapping this optional return grade get.

89
00:06:01.970 --> 00:06:03.050
Otherwise.

90
00:06:04.040 --> 00:06:08.750
I will throw a new grade not found exception.

91
00:06:10.650 --> 00:06:13.830
I'll go back over here and do the exact same thing.

92
00:06:24.610 --> 00:06:27.730
If there is a value, then I will say grade.

93
00:06:28.210 --> 00:06:33.190
Unwrapped grade is equal to grade get.

94
00:06:34.460 --> 00:06:36.100
Then I'll update the score.

95
00:06:39.770 --> 00:06:41.420
And save the grade.

96
00:06:42.240 --> 00:06:43.440
Great repository.

97
00:06:44.700 --> 00:06:46.400
Save grade.

98
00:06:47.920 --> 00:06:49.540
Or unwrapped grade, I should say.

99
00:06:53.630 --> 00:06:57.830
And if the grade that they're trying to find those in exist, then we're going to throw a new grade

100
00:06:57.830 --> 00:06:59.150
not found exception.

101
00:07:02.540 --> 00:07:05.150
Oh, don't forget to return whatever grade that gets saved.

102
00:07:06.000 --> 00:07:07.010
All right.

103
00:07:07.020 --> 00:07:08.820
I think we're looking great.

104
00:07:08.820 --> 00:07:10.070
We're in really good shape.

105
00:07:10.080 --> 00:07:16.560
Again, we could have just returned a normal grade and then said if whatever grade returns equals null.

106
00:07:19.510 --> 00:07:24.850
But by sending back an optional, we're giving whoever is calling this method a warning that the grade

107
00:07:24.850 --> 00:07:25.960
here might be null.

108
00:07:25.990 --> 00:07:30.070
Then they will have the intuition to perform that null check beforehand.

