WEBVTT
1
00:00:00.490 --> 00:00:05.140
Using Spring Boot to JPA, we can achieve object relational mapping.

2
00:00:05.620 --> 00:00:12.370
Object Relational mapping creates an object oriented layer between our application and an SQL database.

3
00:00:12.940 --> 00:00:18.550
In this lesson, we will use Spring Boot to JPA to create a student table inside of our relational database.

4
00:00:18.580 --> 00:00:23.590
Now, in this course, I'm going to assume that you've never written any SQL code, so how the heck

5
00:00:23.590 --> 00:00:28.890
are we going to create a student table in our SQL database without actually writing any SQL?

6
00:00:28.900 --> 00:00:35.380
Well, the first step of the process is to tell Spring JPA that we're going to be saving student entities.

7
00:00:40.190 --> 00:00:46.700
An entity is a Java object that spring boot to JPA can manage by telling Spring JPA that we need to

8
00:00:46.700 --> 00:00:48.440
save student entities.

9
00:00:48.470 --> 00:00:54.170
Our request is forwarded to an object relational mapper, which in turn creates a student table.

10
00:00:58.410 --> 00:01:05.340
Step two of the process is that each field that we put into our entity is going to map to a table column.

11
00:01:06.290 --> 00:01:13.820
This entity has three fields, so our student table is going to have three columns, ID name and birth.

12
00:01:16.480 --> 00:01:18.520
Now this step is really important.

13
00:01:18.730 --> 00:01:25.150
A primary key column uniquely identifies every single record inside of our table.

14
00:01:29.260 --> 00:01:33.670
So here I am, saving a bunch of entities into my database.

15
00:01:36.970 --> 00:01:43.390
And for every single entity that I save through spring JP's repository, our table needs to assign each

16
00:01:43.390 --> 00:01:46.300
entity that we save a unique identity.

17
00:01:47.610 --> 00:01:50.810
Because the ID for each entity is different.

18
00:01:50.820 --> 00:01:52.860
It allows us to make queries.

19
00:01:53.070 --> 00:01:56.520
Now I can say Fetch me the student with an ID of two.

20
00:01:57.880 --> 00:02:00.160
And it's going to send back Ron's roe.

21
00:02:05.510 --> 00:02:09.979
I've already gone ahead and ran my application and connect it to the H two console.

22
00:02:10.039 --> 00:02:17.110
And here, if I wanted to create a table using plain old SQL, I would enter something like the following.

23
00:02:17.120 --> 00:02:18.740
Now you don't have to do what I'm doing.

24
00:02:18.740 --> 00:02:19.330
Just watch.

25
00:02:19.340 --> 00:02:23.420
For now, I'm going to create a table using SQL syntax.

26
00:02:23.930 --> 00:02:28.340
I'll run this command and here it creates a student table.

27
00:02:28.850 --> 00:02:35.690
I will delete this command, click on my table and here it auto generates a query that selects everything

28
00:02:35.690 --> 00:02:37.160
from our student table.

29
00:02:37.280 --> 00:02:38.540
I will run it.

30
00:02:40.350 --> 00:02:47.220
And here we see a table with ID name and birth in accordance with the SQL query that I ran earlier.

31
00:02:47.790 --> 00:02:49.740
And obviously our table is empty.

32
00:02:49.890 --> 00:02:53.790
Now here's the thing courtesy of spring GPUs object relational layer.

33
00:02:53.790 --> 00:02:57.780
We don't have to write any SQL in order to generate this table.

34
00:02:58.110 --> 00:03:02.100
First, we have to tell spring GPA that will be saving student entities.

35
00:03:02.610 --> 00:03:09.900
Now we'll go over to our Student Poe class and by virtue of just marking our project class with the

36
00:03:09.900 --> 00:03:11.370
entity annotation.

37
00:03:16.340 --> 00:03:21.500
We're basically telling Spring by JPA, Hey, we're going to need you to create a table that can store

38
00:03:21.500 --> 00:03:22.830
student entities.

39
00:03:22.850 --> 00:03:26.900
We can specify the name of that table by first saying Table.

40
00:03:28.240 --> 00:03:30.790
For some reason it did not autocomplete.

41
00:03:32.720 --> 00:03:33.500
All right.

42
00:03:33.500 --> 00:03:37.520
And the name of that table is going to be student.

43
00:03:41.830 --> 00:03:44.350
Notice that I'm using all lowercase.

44
00:03:45.290 --> 00:03:49.670
And in step two, each field in the entity will map to a table column.

45
00:03:50.120 --> 00:03:53.660
The column annotation maps a field to a column.

46
00:03:54.230 --> 00:03:59.390
Every single field in our student entity will map to a column in the student table.

47
00:03:59.510 --> 00:04:04.370
The ID field is going to map to an ID column, so we'll say column.

48
00:04:07.700 --> 00:04:09.620
Name is equal to ID.

49
00:04:11.400 --> 00:04:14.130
The name Field will map to a name column.

50
00:04:16.519 --> 00:04:22.610
And the birth date field is going to map to a birth date column.

51
00:04:22.940 --> 00:04:28.400
Now, if the name is more than one word, the convention is to use underscore.

52
00:04:28.580 --> 00:04:31.070
So in Java you would use camel case.

53
00:04:31.070 --> 00:04:34.250
Here you would use snake case, I think is what it's called.

54
00:04:35.050 --> 00:04:35.270
Okay.

55
00:04:35.290 --> 00:04:40.620
Now, one thing we need to make sure of is any value that gets stored inside of the name column.

56
00:04:40.630 --> 00:04:42.460
It cannot be knowable.

57
00:04:42.490 --> 00:04:45.070
We're going to say no label equals false.

58
00:04:46.170 --> 00:04:47.820
We'll do the same thing over here.

59
00:04:48.830 --> 00:04:50.600
Knowable equals false.

60
00:04:50.600 --> 00:04:54.230
We cannot have null birthdays or null names.

61
00:04:56.820 --> 00:04:59.850
Now if I were to actually run my application for now.

62
00:05:12.010 --> 00:05:13.490
And it doesn't even run.

63
00:05:13.510 --> 00:05:15.130
It just crashes.

64
00:05:15.580 --> 00:05:17.500
As always, never panic.

65
00:05:17.530 --> 00:05:22.030
Look at the stack trace and try to find the meaningful error message.

66
00:05:25.490 --> 00:05:29.300
They were creating being oc da da da da da.

67
00:05:29.360 --> 00:05:33.290
No identifier specified for entity students.

68
00:05:33.710 --> 00:05:35.630
This brings me to my next point.

69
00:05:36.720 --> 00:05:40.770
A primary key column uniquely identifies every row.

70
00:05:41.980 --> 00:05:46.000
The database needs to assign each row a unique identity.

71
00:05:48.560 --> 00:05:54.560
The field that maps to our primary key column must be assigned the ID annotation.

72
00:05:54.560 --> 00:06:02.540
So here we have to say at ID whenever we create a new student entity and save it to our student table,

73
00:06:02.720 --> 00:06:06.650
the identity of that student needs to be auto generated.

74
00:06:06.680 --> 00:06:11.870
We can actually use a very special annotation called Generated Value.

75
00:06:14.180 --> 00:06:22.610
For some reason my editor is very sluggish today and we will auto generate the ID using a strategy of

76
00:06:22.610 --> 00:06:25.610
generation type dot identity.

77
00:06:27.060 --> 00:06:27.840
Beautiful.

78
00:06:27.870 --> 00:06:31.560
Now, what we're going to do is reconnect to our database.

79
00:06:31.560 --> 00:06:33.240
So I'll rerun my application.

80
00:06:45.780 --> 00:06:46.560
Okay.

81
00:06:49.190 --> 00:06:53.150
And now remember that our H two and memory relational database is volatile.

82
00:06:53.150 --> 00:06:56.030
It's set up to reset every time we run the application.

83
00:06:56.030 --> 00:07:03.110
So as soon as I press run, it's going to prompt me to reconnect to this new database instance.

84
00:07:04.140 --> 00:07:10.910
And this is just amazing by simply telling Spring Boot JPA that we're going to be saving student entities,

85
00:07:10.920 --> 00:07:15.390
it automatically creates a table that is capable of storing these entities.

86
00:07:15.570 --> 00:07:19.920
It creates a relational table, and we did not have to write any SQL.

87
00:07:19.920 --> 00:07:27.960
We're able to create an SQL table using a pod class, if you ask me, this is very powerful and if I

88
00:07:27.960 --> 00:07:34.500
were to click on the table at auto generates a query that selects everything from that table and obviously

89
00:07:34.500 --> 00:07:35.700
the table is empty.

90
00:07:35.700 --> 00:07:42.330
And notice that every single column inside of our table is mapped by the columns specified in our definition

91
00:07:42.330 --> 00:07:44.340
of what an entity will be.

92
00:07:44.730 --> 00:07:48.210
So to recap in this lesson, you created a student table.

93
00:07:49.750 --> 00:07:56.300
First we created a table using plain old SQL, but we're not here to write any SQL statements.

94
00:07:56.320 --> 00:08:03.400
We were able to leverage Spring Boot JP's object relational layer by simply annotating a mojo class.

95
00:08:03.430 --> 00:08:09.310
The name of that table was derived from the table annotation and the columns of our table were derived

96
00:08:09.310 --> 00:08:10.990
from the column annotation.

97
00:08:11.760 --> 00:08:15.180
Spring Boot magic is truly something to behold.

