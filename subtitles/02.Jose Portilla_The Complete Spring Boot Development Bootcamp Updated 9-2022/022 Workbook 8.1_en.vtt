WEBVTT
1
00:00:00.270 --> 00:00:01.980
Welcome to Workbook 8.1.

2
00:00:01.980 --> 00:00:08.970
I already went ahead and launched the Starter Project and I also ran the application and now our application

3
00:00:08.970 --> 00:00:17.220
as it stands is not resilient because if the consumer were to make a request to retrieve a resource

4
00:00:17.220 --> 00:00:19.110
with an ID of 1 to 3.

5
00:00:19.980 --> 00:00:24.510
Our application fails, it sends back a status code of 500.

6
00:00:24.540 --> 00:00:32.420
Now, if you go here, a status code of 500 means our server or our application encountered a situation

7
00:00:32.430 --> 00:00:34.280
it does not know how to handle.

8
00:00:34.290 --> 00:00:40.650
In this case, our application failed to throw an exception and it sent back a status code to 500.

9
00:00:40.800 --> 00:00:49.500
Now our application, if it were resilient, it would be perfectly capable of handling a situation where

10
00:00:49.500 --> 00:00:52.410
the consumer sends an ID that doesn't exist.

11
00:00:52.620 --> 00:00:57.060
So the resource not existing should not be deemed our fault.

12
00:00:57.090 --> 00:01:02.430
We should be sending back a status code of 400, which implies that it's the consumer's fault.

13
00:01:02.430 --> 00:01:06.060
They made the bad request they need to fix their URI.

14
00:01:06.060 --> 00:01:07.770
And we're going to do just that.

15
00:01:07.770 --> 00:01:11.250
We need to set up some logic that can handle such scenarios.

16
00:01:11.340 --> 00:01:12.030
All right.

17
00:01:12.030 --> 00:01:15.900
Let's start with Task One tells us to create a new folder called Exception.

18
00:01:15.900 --> 00:01:19.890
And inside the folder, create a no contact abstraction class.

19
00:01:19.890 --> 00:01:23.220
So essentially we're creating our own custom checked exception.

20
00:01:23.220 --> 00:01:24.930
Let's do just that.

21
00:01:25.200 --> 00:01:27.450
Create a new folder right over here.

22
00:01:30.430 --> 00:01:37.420
And we're going to create a no contact exception, a contact not found exception.

23
00:01:38.020 --> 00:01:41.460
It's going to inherit from the exception class.

24
00:01:41.470 --> 00:01:48.610
And by doing so, this becomes a custom checked exception that we can throw whatever a piece of logic

25
00:01:48.610 --> 00:01:50.440
throws this checked exception.

26
00:01:50.440 --> 00:01:55.570
Java's going to force us to try to run that code and catch the exception if the code fails.

27
00:01:55.600 --> 00:02:01.780
So task two is to modify define index by ID function to throw the no contact exception.

28
00:02:02.050 --> 00:02:06.460
So here inside of our service implementation.

29
00:02:06.700 --> 00:02:09.940
So currently our find index by ID function.

30
00:02:09.970 --> 00:02:17.080
If it can find the resource, it throws a runtime exception, no such element exception which implies

31
00:02:17.080 --> 00:02:23.080
that our application didn't know how to handle the scenario and it sends back a 500 internal server

32
00:02:23.080 --> 00:02:25.840
error along with the exception that we threw.

33
00:02:25.870 --> 00:02:28.990
We don't want to throw a runtime exception over here.

34
00:02:28.990 --> 00:02:34.180
What we're going to do is throw a checked exception that forces you to handle it.

35
00:02:36.130 --> 00:02:37.900
No contact exception.

36
00:02:37.960 --> 00:02:42.460
And here we need to specify that this function throws a checked exception.

37
00:02:42.460 --> 00:02:45.910
So anyone that tries to call it needs to handle it.

38
00:02:46.060 --> 00:02:47.890
And here we're getting an error.

39
00:02:48.460 --> 00:02:53.560
Oh, forgot my new keyword because we're creating a new object of the contact exception class.

40
00:02:56.440 --> 00:03:01.780
And so now this piece of logic is prone to throwing a checked exception.

41
00:03:01.780 --> 00:03:08.490
So once again, we need to specify that this function may throw a no contact exception.

42
00:03:08.500 --> 00:03:10.540
It needs to be handled accordingly.

43
00:03:11.320 --> 00:03:19.030
Now, this is kind of annoying because now we have to go to the contact service interface and redefine

44
00:03:19.030 --> 00:03:22.390
what our implementation needs to override.

45
00:03:22.420 --> 00:03:27.370
This is really inconvenient, but bear with me in the next workbook we're going to look at a much better

46
00:03:27.370 --> 00:03:29.440
method anyways.

47
00:03:31.660 --> 00:03:33.420
I think we're missing one function.

48
00:03:33.430 --> 00:03:34.630
Oh, this one over here.

49
00:03:38.640 --> 00:03:40.920
And we'll update the interface here as well.

50
00:03:43.820 --> 00:03:44.750
All right.

51
00:03:44.780 --> 00:03:47.240
Now we've got to fix our code inside the controller.

52
00:03:49.540 --> 00:03:49.810
Here.

53
00:03:49.810 --> 00:03:51.970
We need to try to run the code.

54
00:03:55.900 --> 00:03:58.600
And catch the exception if the code fails.

55
00:03:59.080 --> 00:04:04.600
So in case there is a no contact exception that gets thrown.

56
00:04:05.820 --> 00:04:06.120
Here.

57
00:04:06.120 --> 00:04:11.040
We're catching the exception and we're going to return a new response entity.

58
00:04:11.250 --> 00:04:13.320
The status code we send back.

59
00:04:14.770 --> 00:04:15.910
Is going to be.

60
00:04:17.070 --> 00:04:19.800
Let's see the status codes that we have at our disposal.

61
00:04:19.829 --> 00:04:22.140
Which one do you think we should use?

62
00:04:22.590 --> 00:04:25.980
I think 404 makes the most sense.

63
00:04:26.070 --> 00:04:29.280
The server cannot find the resource you requested.

64
00:04:30.910 --> 00:04:35.380
HTTP status dot not 404 not found.

65
00:04:40.770 --> 00:04:41.790
All right.

66
00:04:41.940 --> 00:04:44.220
We'll do the exact same thing here.

67
00:04:44.250 --> 00:04:46.380
We will try to run this code.

68
00:04:48.400 --> 00:04:50.290
And if an exception is thrown.

69
00:04:54.570 --> 00:04:57.560
That means the consumer needs to fix their request.

70
00:04:57.570 --> 00:05:01.620
They made a bad request, in which case we're going to return.

71
00:05:03.180 --> 00:05:08.250
HTTP status dot not found.

72
00:05:09.570 --> 00:05:15.180
So when a consumer receives an HTTP status of not found, they're going to automatically know, Oh,

73
00:05:15.180 --> 00:05:16.850
I'm the one who made the mistake.

74
00:05:16.860 --> 00:05:19.530
I need to be the one who fixes my request.

75
00:05:21.470 --> 00:05:22.100
All right.

76
00:05:22.100 --> 00:05:23.660
Doing the same thing over here.

77
00:05:31.110 --> 00:05:33.090
No contact exception.

78
00:05:35.940 --> 00:05:37.180
Now I know what you're thinking.

79
00:05:37.200 --> 00:05:38.700
There has to be a better way.

80
00:05:38.730 --> 00:05:40.110
I promise you there is.

81
00:05:40.110 --> 00:05:42.370
But let's just do it this way for now.

82
00:05:42.390 --> 00:05:47.610
Sometimes it's always good to do it the more fatiguing way, so that you can then fully appreciate the

83
00:05:47.610 --> 00:05:51.000
more elegant features that Spring Boot offers.

84
00:05:52.820 --> 00:05:55.970
So anyways, I think now we should be good to go.

85
00:05:58.340 --> 00:06:01.640
Now we need to test our API using Postman First.

86
00:06:01.640 --> 00:06:03.920
We need to create the following resources.

87
00:06:04.460 --> 00:06:05.840
This is kind of fun.

88
00:06:05.840 --> 00:06:14.780
So we will make a bunch of post requests because remember, post implies creating a resource inside

89
00:06:14.780 --> 00:06:15.830
the body.

90
00:06:18.930 --> 00:06:22.020
Don't forget to specify that we're sending over JSON.

91
00:06:22.440 --> 00:06:24.300
First we will create.

92
00:06:25.650 --> 00:06:27.350
A John Snow resource.

93
00:06:28.580 --> 00:06:28.940
Boom.

94
00:06:28.940 --> 00:06:30.110
It's been created.

95
00:06:31.070 --> 00:06:35.570
Then we will create a the hound resource.

96
00:06:37.750 --> 00:06:39.100
That was created as well.

97
00:06:39.910 --> 00:06:46.780
Then we'll create a Tyrion Lannister resource that was created to let's just make sure everything is

98
00:06:46.780 --> 00:06:50.080
well, let's make a get request on all.

99
00:06:50.740 --> 00:06:52.450
Okay, this is perfect.

100
00:06:52.840 --> 00:06:55.090
And the next step.

101
00:06:55.720 --> 00:06:57.400
We already applied this test case.

102
00:06:57.400 --> 00:06:58.150
We're good.

103
00:06:58.510 --> 00:07:04.000
Let's request a resource and the Yuri will specify an ID that doesn't exist.

104
00:07:08.190 --> 00:07:09.030
And perfect.

105
00:07:09.030 --> 00:07:12.930
The server sends back a response of 404 not found.

106
00:07:12.960 --> 00:07:18.300
This tells us it says right here the requested resource could now be found and it's telling us to fix

107
00:07:18.300 --> 00:07:19.170
our request.

108
00:07:19.170 --> 00:07:21.570
This was our fault as the consumer.

109
00:07:22.290 --> 00:07:23.400
All right.

110
00:07:24.780 --> 00:07:27.660
Let's make a put request on local hosts.

111
00:07:28.110 --> 00:07:29.130
Slash contact.

112
00:07:29.130 --> 00:07:29.460
Slash.

113
00:07:29.460 --> 00:07:30.300
One, two, three.

114
00:07:34.740 --> 00:07:37.590
And now we get a 400 bad request.

115
00:07:37.590 --> 00:07:39.830
So we didn't actually set this up ourselves.

116
00:07:39.840 --> 00:07:47.760
Spring Boot automatically knows that the consumer made a bad request because this does not match anything

117
00:07:47.760 --> 00:07:50.430
we have in our controller.

118
00:07:50.460 --> 00:07:54.180
Our put operation expects a request body gear.

119
00:07:54.180 --> 00:07:55.920
We're not passing a request body.

120
00:07:55.920 --> 00:08:00.180
So spring boot automatically sends a 400 bad request.

121
00:08:01.010 --> 00:08:07.910
400, if you go here, means that the server cannot or will not process the request because there is

122
00:08:07.910 --> 00:08:11.540
a client error, a malformed request in this case.

123
00:08:11.900 --> 00:08:12.920
All right.

124
00:08:13.830 --> 00:08:18.420
Now let's make a request that does include a body.

125
00:08:22.700 --> 00:08:26.030
But we're going to specify an ID that does not exist.

126
00:08:31.370 --> 00:08:36.020
We get a 404 not found and now let's make a delete request on slash.

127
00:08:36.020 --> 00:08:36.830
One, two, three.

128
00:08:41.330 --> 00:08:42.950
No need to include that.

129
00:08:44.560 --> 00:08:49.230
Again, it cannot find the resource and it sends back a 404 not found.

130
00:08:49.240 --> 00:08:50.860
Please fix your request.

131
00:08:50.890 --> 00:08:53.530
Get an actual ID that's in the server.

132
00:08:53.770 --> 00:08:56.440
All right, so take home messages.

133
00:08:56.440 --> 00:09:02.110
When a client makes a bad request, we should be sending back 400 messages.

134
00:09:02.110 --> 00:09:04.930
We shouldn't allow our application to fail.

135
00:09:04.960 --> 00:09:12.190
These error responses should be reserved for actual internal server failures, not for when a consumer

136
00:09:12.190 --> 00:09:14.620
isn't able to input the correct ID.

