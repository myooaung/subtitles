WEBVTT
1
00:00:00.090 --> 00:00:01.380
Welcome to your final challenge.

2
00:00:01.380 --> 00:00:06.270
I'm assuming that you launch the starter project and I really hope that you went through the preliminary

3
00:00:06.270 --> 00:00:08.250
explanations that I provided.

4
00:00:08.490 --> 00:00:12.990
First, it reviews the one to many relationship between student and grade.

5
00:00:13.140 --> 00:00:17.280
It reviews the one to many relationship between course and grade.

6
00:00:18.180 --> 00:00:23.330
And it also discusses why there is a many to many relationship between course and student.

7
00:00:23.340 --> 00:00:28.260
That is because one student can enroll in too many courses.

8
00:00:28.350 --> 00:00:32.580
Here we see that Harry is enrolled in Potions, Charms, Herbology and Alchemy.

9
00:00:34.220 --> 00:00:36.740
Germany is enrolled in four courses as well.

10
00:00:37.340 --> 00:00:42.470
And similarly, one course can contain many students.

11
00:00:42.500 --> 00:00:50.030
Here we see Herbology contains Harry, it contains Ron, it contains her mining alchemy, contains four

12
00:00:50.030 --> 00:00:51.070
students as well.

13
00:00:51.080 --> 00:00:54.710
It contains Harry, Ron Malfoy and her mining.

14
00:00:56.580 --> 00:01:01.380
So just like one student can be associated with many courses.

15
00:01:02.320 --> 00:01:06.170
One course can be associated with many students.

16
00:01:06.190 --> 00:01:13.960
There is clearly a many to many relationship between these two tables and the table that joins course

17
00:01:13.960 --> 00:01:16.660
and student is called a join table.

18
00:01:16.960 --> 00:01:23.200
It contains one column that references the primary key for a course, and it contains another column

19
00:01:23.200 --> 00:01:26.110
that references the primary key for students.

20
00:01:29.430 --> 00:01:36.330
So task one was to declare a mini to many relationship between course and student and this relationship

21
00:01:36.330 --> 00:01:40.290
will be bidirectional, so we'll be doing it inside of both classes.

22
00:01:40.290 --> 00:01:44.280
So many students are associated with many courses.

23
00:01:44.280 --> 00:01:46.080
Will say many to many.

24
00:01:46.820 --> 00:01:52.220
Such that many students are associated with a list of courses.

25
00:01:53.970 --> 00:01:54.830
All right?

26
00:01:54.840 --> 00:01:58.600
This relationship is bidirectional, so we'll do the exact same thing here.

27
00:01:58.620 --> 00:02:07.620
There is a many to many relationship between courses and students.

28
00:02:09.639 --> 00:02:11.740
Let me just make sure we're not missing anything.

29
00:02:11.740 --> 00:02:15.220
Lest course courses list student students.

30
00:02:15.430 --> 00:02:16.240
All right.

31
00:02:16.240 --> 00:02:17.770
We're looking good so far.

32
00:02:18.750 --> 00:02:21.960
And now who is going to own the association?

33
00:02:22.110 --> 00:02:25.530
Which table do you think can't live without the other?

34
00:02:26.830 --> 00:02:27.850
In the cheat sheet.

35
00:02:27.850 --> 00:02:33.800
It says when applicable, put the foreign key column in the table that cannot live without the other.

36
00:02:33.820 --> 00:02:42.160
In this case, scrolling all the way back, every grade record is dependent on the existence of a student.

37
00:02:42.160 --> 00:02:48.280
So the foreign key column needs to go over here because the grade table is the one that's managing the

38
00:02:48.280 --> 00:02:49.390
foreign key column.

39
00:02:49.390 --> 00:02:50.860
It is the owner.

40
00:02:50.860 --> 00:02:53.020
It owns the association.

41
00:02:53.020 --> 00:02:58.360
We specified we defined the foreign key column inside of grade.

42
00:02:58.570 --> 00:03:06.250
And because grade is the owner, that means we have to specify the mapped by parameter in the non owning

43
00:03:06.250 --> 00:03:07.630
side of the relationship.

44
00:03:10.530 --> 00:03:15.660
Similarly over here, the grade table cannot exist without courses.

45
00:03:15.660 --> 00:03:21.060
So the foreign key column is being managed over here and in the non owning side of the relationship

46
00:03:21.060 --> 00:03:23.730
is where we specify the mapped by parameter.

47
00:03:23.730 --> 00:03:30.090
And you'll remember that map two by its purpose is to instruct Spring JPA to not create another joint

48
00:03:30.090 --> 00:03:30.570
table.

49
00:03:30.570 --> 00:03:33.930
We're already taking care of the relationship ourselves.

50
00:03:34.530 --> 00:03:40.230
Now, in a many to many relationship, none of our tables are going to be holding any foreign key columns.

51
00:03:40.230 --> 00:03:45.750
The foreign key columns will live inside of a separate table called the join table.

52
00:03:45.750 --> 00:03:49.410
So it really doesn't matter who owns the association.

53
00:03:49.410 --> 00:03:56.040
I can define my joint table inside the student class, or I can define my joint table inside of the

54
00:03:56.040 --> 00:03:59.310
course class for the sake of this exercise.

55
00:03:59.310 --> 00:04:04.740
I believe I told you that course will own the association, so let's just roll with that.

56
00:04:04.740 --> 00:04:09.660
Followed by the many to many annotation we're going to say join table.

57
00:04:11.090 --> 00:04:14.500
The joint table that is going to join both of our tables.

58
00:04:14.510 --> 00:04:17.209
We're just going to call course student.

59
00:04:18.579 --> 00:04:22.960
And now the next parameter we have to specify as joint columns.

60
00:04:22.960 --> 00:04:29.890
And this we're going to set equal to a foreign key column that references the primary key of the entity

61
00:04:29.890 --> 00:04:31.690
that owns the association.

62
00:04:31.690 --> 00:04:36.640
So for that reason, we're going to call this column course ID.

63
00:04:37.890 --> 00:04:40.770
And the primary key that it's going to reference.

64
00:04:41.860 --> 00:04:42.430
Will be.

65
00:04:42.430 --> 00:04:43.030
I'd.

66
00:04:44.040 --> 00:04:49.800
So this column is going to correspond to course in the second column.

67
00:04:49.800 --> 00:04:55.740
The inverse joint column will correspond to the entity that doesn't own the association.

68
00:04:55.860 --> 00:05:03.240
So for that reason, we're going to call this column student ID and then we'll say referenced column

69
00:05:03.240 --> 00:05:03.780
name.

70
00:05:04.440 --> 00:05:08.310
The name of the primary key for the student table will be ID as well.

71
00:05:09.000 --> 00:05:14.940
And now you don't actually have to specify a referenced column name because it will automatically infer

72
00:05:14.940 --> 00:05:16.970
it but doesn't really matter.

73
00:05:16.980 --> 00:05:17.760
Let's just do it.

74
00:05:17.760 --> 00:05:20.940
I consider it to be a good practice.

75
00:05:23.180 --> 00:05:24.800
And that should be it.

76
00:05:24.830 --> 00:05:30.140
Let us run our code and see if we get the same output as what we have over here.

77
00:05:33.750 --> 00:05:38.070
And as a training, I'll just do a quick check to make sure that everything is good.

78
00:05:39.050 --> 00:05:39.920
All right.

79
00:05:39.920 --> 00:05:41.150
I think we're good to go.

80
00:05:48.480 --> 00:05:50.100
Go over to h to.

81
00:05:53.860 --> 00:06:04.270
Then we see the join table that we explicitly specified and we see one that was generated by Spring

82
00:06:04.270 --> 00:06:05.860
Boot on the spot.

83
00:06:06.220 --> 00:06:11.890
Now ask yourself, what did we do in the past to specifically tell Spring JPA not to create a joint

84
00:06:11.890 --> 00:06:12.820
table for us?

85
00:06:12.850 --> 00:06:19.600
We've already got everything covered that was putting the mapped by parameter in the non owning side

86
00:06:19.600 --> 00:06:20.740
of the relationship.

87
00:06:20.740 --> 00:06:26.770
So we'll say mapped by this relationship is mapped by the following property.

88
00:06:31.610 --> 00:06:36.630
So this is basically us telling Springbok JPR, please don't do anything on your part.

89
00:06:36.650 --> 00:06:39.470
We're already mapping the relationship over here.

90
00:06:39.680 --> 00:06:41.120
So let's go back.

91
00:06:44.760 --> 00:06:45.630
And it's gone.

92
00:06:45.630 --> 00:06:46.560
Perfect.

93
00:06:46.590 --> 00:06:47.760
Now we can proceed.

94
00:06:49.140 --> 00:06:50.490
Task five already did that.

95
00:06:50.490 --> 00:06:56.550
Task six In order to avoid a recursive loop, add JSON ignored to at least one side of the relationship

96
00:06:56.550 --> 00:06:59.460
for this exercise added to the non owning side.

97
00:06:59.460 --> 00:07:01.680
So let's just do it over here.

98
00:07:01.860 --> 00:07:03.360
We'll put Jason ignore.

99
00:07:03.390 --> 00:07:06.120
I believe at some point we'll be putting it on both sides.

100
00:07:06.120 --> 00:07:09.330
But for now there is some output that I want you to see.

101
00:07:10.650 --> 00:07:16.590
Inside the core service implementation finish writing the code for add student to course so this would

102
00:07:16.590 --> 00:07:19.680
have required some critical thinking on your part.

103
00:07:19.680 --> 00:07:21.660
I hope you were able to get it right.

104
00:07:21.930 --> 00:07:25.740
So over here I already created the method for you here.

105
00:07:25.740 --> 00:07:32.940
We'll start by saying course course is equal to and instead of calling find by ideal over again.

106
00:07:32.940 --> 00:07:38.970
Let's just call a method that we already have get course based on whatever student ID is.

107
00:07:39.440 --> 00:07:41.490
Of course ID is provided.

108
00:07:43.780 --> 00:07:48.910
And you'll remember that every course is associated to a list of students.

109
00:07:48.910 --> 00:07:54.490
So in order to associate this course with whatever student is being passed in, we need to add it to

110
00:07:54.490 --> 00:07:55.260
our list.

111
00:07:55.270 --> 00:07:58.540
So back over here, we're going to say optional.

112
00:07:59.480 --> 00:08:00.530
Student.

113
00:08:00.980 --> 00:08:07.100
Student We're going to try to find a student based on whatever ID is given to us.

114
00:08:07.460 --> 00:08:08.960
Student repository.

115
00:08:09.920 --> 00:08:11.630
Do I have this auto wired?

116
00:08:12.920 --> 00:08:14.010
No, I do not.

117
00:08:14.040 --> 00:08:15.810
Student repository.

118
00:08:15.990 --> 00:08:16.980
Student repository.

119
00:08:16.980 --> 00:08:19.920
Dependency injection should take place automatically.

120
00:08:22.040 --> 00:08:23.720
Student repository.

121
00:08:23.750 --> 00:08:25.940
Dot find by ID.

122
00:08:26.910 --> 00:08:27.840
Student I.D..

123
00:08:31.060 --> 00:08:35.500
And now inside of the student service implementation.

124
00:08:35.620 --> 00:08:42.250
I left you a static method that we can use to unwrap the student without repeating the same code over

125
00:08:42.250 --> 00:08:42.909
and over.

126
00:08:42.940 --> 00:08:44.169
I'm even using it here.

127
00:08:44.169 --> 00:08:46.990
So back inside, of course, service implementation.

128
00:08:46.990 --> 00:08:49.690
What I'm going to do is say student.

129
00:08:51.680 --> 00:08:56.960
Student or we'll have to give it a separate name, a different name.

130
00:08:56.990 --> 00:09:02.240
Unwrapped student is equal to student service implementation and from it we're just going to call the

131
00:09:02.240 --> 00:09:05.240
static method unwrap student here.

132
00:09:05.240 --> 00:09:06.920
We have to pass in the optional.

133
00:09:07.670 --> 00:09:10.880
And here we have to pass in the student ID.

134
00:09:12.250 --> 00:09:17.860
So if this happens to be null, then just like before, our static method is going to throw a student

135
00:09:17.860 --> 00:09:19.000
not found exception.

136
00:09:19.030 --> 00:09:20.840
There is nothing new over here.

137
00:09:20.860 --> 00:09:24.750
And then that exception would get handled inside of the controller advice class.

138
00:09:24.760 --> 00:09:26.770
Anyways, going back over here.

139
00:09:26.800 --> 00:09:33.670
Let's not steer away from the subject and then we'll say course dot get students, which is going to

140
00:09:33.670 --> 00:09:36.670
return a reference that points to the student list.

141
00:09:36.670 --> 00:09:43.540
Since we have a direct reference to that list, we can just say add whatever unwrapped student we get.

142
00:09:44.880 --> 00:09:48.840
And then we can return course repository dot save.

143
00:09:50.860 --> 00:09:56.110
So all in all, we're grabbing whatever course is being passed in, we're grabbing whatever student

144
00:09:56.110 --> 00:10:02.530
is being passed in, and then we're adding that student to the course's list of students by saving that

145
00:10:02.530 --> 00:10:03.130
course.

146
00:10:03.160 --> 00:10:05.530
Now, the course should contain the student.

147
00:10:05.530 --> 00:10:11.230
And because this is a bidirectional relationship, that course will also be part of the student's list

148
00:10:11.230 --> 00:10:12.150
of courses.

149
00:10:12.160 --> 00:10:14.290
So let's go ahead and test this out.

150
00:10:14.350 --> 00:10:19.360
First, it tells us to finish writing the code inside of enrolled student to course.

151
00:10:19.420 --> 00:10:25.060
I'll go over to my course controller.

152
00:10:27.120 --> 00:10:33.630
This one right here, we'll say core service, dot and student, of course.

153
00:10:34.020 --> 00:10:35.760
And that should be it.

154
00:10:36.690 --> 00:10:40.110
And now from Post Men create a new put request under the course folder.

155
00:10:40.110 --> 00:10:42.510
I think I already have that set up.

156
00:10:42.690 --> 00:10:44.100
Enroll students.

157
00:10:44.490 --> 00:10:49.830
All right, now I'm going to enroll Harry into what I believe is charms.

158
00:10:49.830 --> 00:10:51.030
Let's press send.

159
00:10:52.670 --> 00:10:53.330
Beautiful.

160
00:10:53.330 --> 00:10:57.020
Now Charms contains one student, Harry Potter.

161
00:11:00.880 --> 00:11:03.550
Oh, actually, it tells us to make four put requests.

162
00:11:03.550 --> 00:11:06.070
So we're going to add Harry.

163
00:11:06.100 --> 00:11:07.960
We're going to add Ron.

164
00:11:07.960 --> 00:11:10.030
We're going to add.

165
00:11:11.350 --> 00:11:13.900
Her Mini and then Neville.

166
00:11:15.350 --> 00:11:16.880
Looking good.

167
00:11:17.510 --> 00:11:18.020
All right.

168
00:11:18.020 --> 00:11:20.690
Is there anything else we're expected to get?

169
00:11:20.720 --> 00:11:23.330
Oh, let's check our H to output.

170
00:11:26.880 --> 00:11:32.460
All right, I'll start by viewing the grades, then I'm going to view the courses.

171
00:11:32.460 --> 00:11:35.400
Then I'm going to view the joint table.

172
00:11:37.240 --> 00:11:39.790
And then I will view the students.

173
00:11:42.440 --> 00:11:45.120
And perfect, we get the expected output.

174
00:11:45.140 --> 00:11:49.660
There are four students and all of them are enrolled in charms.

175
00:11:49.670 --> 00:11:55.880
So now if I somehow retrieved the student entity, Harry, and then I called get courses for Harry,

176
00:11:55.970 --> 00:12:05.060
it would return the course charms and if I were to retrieve the course charms and then I said get students,

177
00:12:05.060 --> 00:12:07.220
it would retrieve all of these students.

178
00:12:07.220 --> 00:12:13.340
Thanks to our bidirectional many to many relationship where course owns the association.

179
00:12:13.340 --> 00:12:19.130
The join table that joins both of our tables and the non owning side of the relationship still has a

180
00:12:19.130 --> 00:12:20.390
reference to it.

181
00:12:20.420 --> 00:12:21.470
Perfect.

182
00:12:22.680 --> 00:12:23.310
All right.

183
00:12:23.310 --> 00:12:27.540
And now there is a problem in our application, because if I were to.

184
00:12:29.040 --> 00:12:32.700
Well, let me enroll some students into, let's say.

185
00:12:33.790 --> 00:12:34.840
Herbology.

186
00:12:38.760 --> 00:12:45.060
I'll enrol Harry, I will enroll Ron, but then I'm going to go and enrol run twice.

187
00:12:45.630 --> 00:12:47.400
This is not good.

188
00:12:48.350 --> 00:12:52.670
Every student inside of the student collection needs to be unique.

189
00:12:52.670 --> 00:12:57.860
And it's for that reason that we should be using a set here.

190
00:12:58.900 --> 00:13:00.160
Instead of a list.

191
00:13:03.970 --> 00:13:10.120
So whatever collection of students are part of a course, that collection needs to be unique.

192
00:13:10.120 --> 00:13:14.970
Whatever collection of courses that a student is enrolled in, that needs to be unique as well.

193
00:13:14.980 --> 00:13:19.420
And what's beautiful about a set is that it prevents duplicate entries.

194
00:13:19.420 --> 00:13:22.000
So if we were to try that again.

195
00:13:23.290 --> 00:13:25.000
First woman to enroll Harry.

196
00:13:25.570 --> 00:13:27.550
Then I will enroll Ron.

197
00:13:28.720 --> 00:13:31.180
And I will try to enroll everyone again.

198
00:13:32.420 --> 00:13:33.500
It doesn't allow it.

199
00:13:33.530 --> 00:13:35.420
This is just beautiful.

200
00:13:35.690 --> 00:13:40.960
So you might have been wondering why I've been using lists throughout the entirety of the SQL section.

201
00:13:40.970 --> 00:13:47.600
Well, I really wanted to wait until now to fully express how easy it is to prevent duplicate entries

202
00:13:47.600 --> 00:13:48.890
during the runtime.

203
00:13:52.700 --> 00:13:53.480
All right, beautiful.

204
00:13:53.480 --> 00:13:56.990
Next task is inside the course service implementation.

205
00:13:56.990 --> 00:13:59.840
Finish writing the get enrolled students method.

206
00:13:59.840 --> 00:14:01.670
That is easy enough.

207
00:14:04.940 --> 00:14:06.230
So over here.

208
00:14:06.320 --> 00:14:09.710
Which course am I trying to get the enrolled students for?

209
00:14:09.740 --> 00:14:11.270
Well, we'll have to say course.

210
00:14:11.270 --> 00:14:13.910
Course is equal to get whatever course.

211
00:14:15.250 --> 00:14:18.130
We can find based on the idea that is provided.

212
00:14:18.130 --> 00:14:21.280
And then we'll say course, get students.

213
00:14:23.750 --> 00:14:24.920
Fairly simple.

214
00:14:25.780 --> 00:14:29.380
This is expecting a list, so we'll be returning a set.

215
00:14:31.100 --> 00:14:36.560
So now we'll have to go back over here and specify that this will actually return a list.

216
00:14:37.100 --> 00:14:38.180
I mean, a set.

217
00:14:41.210 --> 00:14:43.010
And we should be good now.

218
00:14:44.060 --> 00:14:45.950
Set cannot be resolved to a type.

219
00:14:45.950 --> 00:14:47.090
Did I import it?

220
00:14:47.270 --> 00:14:48.290
I did now.

221
00:14:48.320 --> 00:14:49.160
All right.

222
00:14:49.160 --> 00:14:54.200
And now we just have to finish writing out the function inside of the course controller or the handler

223
00:14:54.200 --> 00:14:55.250
method, I should say.

224
00:14:56.150 --> 00:15:01.090
So what we need to rewrite is get enrolled students.

225
00:15:01.100 --> 00:15:04.060
This will now be a set instead of a list.

226
00:15:04.070 --> 00:15:05.960
I hope you were able to pick up on that.

227
00:15:05.960 --> 00:15:07.610
That was a little trap for you.

228
00:15:07.730 --> 00:15:10.070
And then we're going to say course service.

229
00:15:11.500 --> 00:15:12.430
Dot.

230
00:15:13.830 --> 00:15:15.810
Get enrolled students.

231
00:15:17.210 --> 00:15:19.670
Based on whatever ID is provided.

232
00:15:23.050 --> 00:15:23.620
All right.

233
00:15:23.620 --> 00:15:27.670
From Post Men, create a new get request under the student folder.

234
00:15:28.000 --> 00:15:28.810
Oh, I'm sorry.

235
00:15:28.810 --> 00:15:31.240
We still have two more methods to finish up.

236
00:15:31.240 --> 00:15:35.950
So inside of student service implementation, finish writing the get enrolled courses method.

237
00:15:36.280 --> 00:15:39.400
So inside of the student service implementation.

238
00:15:40.810 --> 00:15:45.730
This is actually going to be returning a set instead.

239
00:15:47.020 --> 00:15:48.880
Over here, we'll say student.

240
00:15:49.120 --> 00:15:55.510
Student is equal to get student based on whatever ID is provided.

241
00:15:56.050 --> 00:15:59.370
And then we're going to return student.

242
00:15:59.710 --> 00:16:01.330
Dot get courses.

243
00:16:01.990 --> 00:16:02.770
All right.

244
00:16:02.770 --> 00:16:08.110
This is giving us an error because we're breaking the contract where this is expecting us to return

245
00:16:08.110 --> 00:16:08.730
a list.

246
00:16:08.740 --> 00:16:12.070
We want get enrolled courses to return a set.

247
00:16:12.490 --> 00:16:13.840
Let me just import it.

248
00:16:16.900 --> 00:16:18.310
Much better now.

249
00:16:19.100 --> 00:16:21.950
I'll have to go back inside a student controller.

250
00:16:23.000 --> 00:16:27.200
And fix the get enrolled courses method.

251
00:16:28.790 --> 00:16:33.770
This will say student service do not get enrolled courses.

252
00:16:37.210 --> 00:16:38.860
And this needs to be a set.

253
00:16:44.120 --> 00:16:49.310
And now before we make any more requests, we need to put the JSON, ignore annotation on the owner

254
00:16:49.310 --> 00:16:50.000
side too.

255
00:16:50.000 --> 00:16:55.370
And that's because when we end up getting a student's courses, we don't want it to also serialize the

256
00:16:55.370 --> 00:16:57.550
student's set into the JSON.

257
00:16:57.560 --> 00:16:59.740
It's going to get overly convoluted.

258
00:16:59.750 --> 00:17:02.660
This will add no value to the data being returned.

259
00:17:02.660 --> 00:17:04.640
So we're going to put JSON ignore.

260
00:17:07.020 --> 00:17:10.710
And then let's make all of these put requests.

261
00:17:11.829 --> 00:17:14.710
So I just went ahead and put these side by side.

262
00:17:14.800 --> 00:17:20.140
I'll go and I will enrol Harry and to charms.

263
00:17:21.710 --> 00:17:23.750
Then I will enroll him in potions.

264
00:17:25.690 --> 00:17:27.550
Sorry if you thought this was tedious.

265
00:17:27.579 --> 00:17:31.420
It was the most convenient way I could think of doing it.

266
00:17:33.230 --> 00:17:36.740
I just want it to have a lot of data to introduce some variety.

267
00:17:39.080 --> 00:17:41.510
And so that things can look a bit interesting.

268
00:17:43.170 --> 00:17:44.250
All right.

269
00:17:46.540 --> 00:17:49.390
We'll enroll her Imani into four courses.

270
00:17:53.860 --> 00:17:55.180
We will enroll.

271
00:17:58.060 --> 00:17:59.590
Neville into three.

272
00:18:09.230 --> 00:18:12.340
And now let me check the H two console.

273
00:18:12.350 --> 00:18:14.570
I'm going to copy and paste these.

274
00:18:16.370 --> 00:18:17.870
So that I'll have to rewrite them.

275
00:18:19.840 --> 00:18:20.230
All right.

276
00:18:20.230 --> 00:18:25.430
We see that Harry is enrolled into two courses as we specified.

277
00:18:25.450 --> 00:18:28.120
We see that her mini is enrolled into four.

278
00:18:28.390 --> 00:18:30.670
Neville is enrolled into three.

279
00:18:30.670 --> 00:18:32.890
And Ron is enrolled into.

280
00:18:33.850 --> 00:18:35.080
Looking good so far.

281
00:18:36.180 --> 00:18:39.780
From Post Men read all of the courses that Harry is enrolled in.

282
00:18:39.780 --> 00:18:42.390
So I'm going to go to.

283
00:18:44.230 --> 00:18:49.240
Read courses and I will read all of the courses that Harry is enrolled in.

284
00:18:49.240 --> 00:18:57.750
So ultimately what that's going to do is call student dot get courses and per our bidirectional relationship,

285
00:18:57.760 --> 00:19:00.130
it's going to get these courses.

286
00:19:02.270 --> 00:19:03.590
All right, let's try it out.

287
00:19:06.750 --> 00:19:11.100
And it sends us back charms and it sends us back potions.

288
00:19:14.610 --> 00:19:18.270
From Post Men read all of the courses that her money is enrolled in.

289
00:19:20.700 --> 00:19:22.860
So that would be the third student.

290
00:19:27.110 --> 00:19:27.560
All right.

291
00:19:27.560 --> 00:19:35.270
And we get history of magic idea for belonging to her money we get potions idea five also her monies

292
00:19:35.270 --> 00:19:38.810
enrolled and that idea of one or a mini.

293
00:19:39.610 --> 00:19:40.900
And an ID of six.

294
00:19:40.900 --> 00:19:42.830
Her Mini is enrolled in that as well.

295
00:19:42.850 --> 00:19:48.970
This is working really well so far from Postman Read all of the students enrolled in potions.

296
00:19:48.970 --> 00:19:51.340
So now we're reading from the other side.

297
00:19:51.340 --> 00:19:55.900
Now we're going to retrieve a course and then we're going to call get students.

298
00:19:58.000 --> 00:20:00.700
Let's find out who is enrolled in potions.

299
00:20:00.700 --> 00:20:03.370
Potions is course number five.

300
00:20:03.730 --> 00:20:07.330
So I'm going to go back into.

301
00:20:09.830 --> 00:20:10.370
Sorry.

302
00:20:10.370 --> 00:20:11.420
I'm blanking here.

303
00:20:11.780 --> 00:20:13.760
Read students.

304
00:20:16.820 --> 00:20:20.470
And it gives us back Neville, her Mini and Harry.

305
00:20:20.480 --> 00:20:24.860
And it makes sense because only three students are enrolled in that course.

306
00:20:26.460 --> 00:20:27.800
And let's go back here.

307
00:20:28.750 --> 00:20:29.130
All right.

308
00:20:29.140 --> 00:20:29.860
Next task.

309
00:20:29.860 --> 00:20:36.010
If the client assigns a student a grade on a course they are not enrolled in, we need to throw a new

310
00:20:36.010 --> 00:20:37.960
student not enrolled exception.

311
00:20:38.170 --> 00:20:42.360
So right now we have a bug in that here.

312
00:20:42.370 --> 00:20:43.180
Let's see.

313
00:20:43.540 --> 00:20:52.570
So, Ron, he's not enrolled in potions, but if I try to give Ron a grade in potions, I'll create

314
00:20:52.570 --> 00:20:53.530
a new grade.

315
00:20:53.560 --> 00:20:55.180
The student will be to.

316
00:20:56.130 --> 00:20:58.050
The course will be five.

317
00:20:59.170 --> 00:21:01.960
It gives Iran a grade and patience.

318
00:21:01.960 --> 00:21:08.200
And that does not make any sense because not because Iran is not enrolled in this course.

319
00:21:08.200 --> 00:21:11.080
So we need to fix some stuff in our application.

320
00:21:11.930 --> 00:21:15.920
I'm going to go back inside of my service implementation right over here.

321
00:21:16.340 --> 00:21:20.510
And I'm just realizing that we're forcefully unwrapping student and Coursera.

322
00:21:20.840 --> 00:21:24.380
You know what, in the interest of time, it doesn't really matter all that much.

323
00:21:24.380 --> 00:21:25.280
We get the point.

324
00:21:25.280 --> 00:21:27.020
We should be safely unwrapping it.

325
00:21:27.020 --> 00:21:31.880
You can feel free to safely unwrap each one, but I trust that you get the point by now.

326
00:21:32.210 --> 00:21:32.810
Anyways.

327
00:21:32.810 --> 00:21:35.330
Here I'm going to check if student.

328
00:21:36.270 --> 00:21:37.950
Dot get courses.

329
00:21:38.400 --> 00:21:43.470
We're going to get all the courses for the student who were trying to assign a grade two and we're going

330
00:21:43.470 --> 00:21:47.250
to check if it already contains the course.

331
00:21:48.090 --> 00:21:50.520
That we're trying to give them a grade on.

332
00:21:50.550 --> 00:21:54.480
We'll add the exclamation mark to reverse the bullying Chuck in that.

333
00:21:54.480 --> 00:21:58.770
Now we're checking if the student is not enrolled in this course.

334
00:21:59.100 --> 00:22:06.630
If the student is not enrolled, we're going to throw a new student not enrolled exception.

335
00:22:13.170 --> 00:22:13.650
All right.

336
00:22:13.650 --> 00:22:16.650
And inside of the controller advice.

337
00:22:17.740 --> 00:22:20.890
We're going to be handling that exception right over here.

338
00:22:29.920 --> 00:22:33.160
Now some of you might be wondering if you took my java course.

339
00:22:33.160 --> 00:22:37.690
Shouldn't we set up equals and hashCode inside of the course class for this to work?

340
00:22:37.990 --> 00:22:44.170
Well, since get courses returns a direct reference to the set that would potentially contain this course,

341
00:22:44.170 --> 00:22:49.750
we can compare by reference and we should be fine because you'll remember that contains behind the scenes

342
00:22:49.750 --> 00:22:51.970
we'll just use the default equals method.

343
00:22:51.970 --> 00:22:55.600
So if you were in my Java boot camp, I thought I should really clear that up.

344
00:22:56.470 --> 00:23:00.880
And I think now we're ready to test out our final feature.

345
00:23:00.910 --> 00:23:02.470
I'll go over to Postman.

346
00:23:02.470 --> 00:23:03.670
Let me just full screen.

347
00:23:04.120 --> 00:23:08.020
I will enroll Harry in Charms first and foremost.

348
00:23:12.430 --> 00:23:14.000
And then I'll give them an A-plus.

349
00:23:15.090 --> 00:23:16.110
In terms.

350
00:23:19.240 --> 00:23:20.110
Splendid.

351
00:23:20.140 --> 00:23:25.330
Now I'm going to give Harry a grade and a course that he's not enrolled in.

352
00:23:27.940 --> 00:23:34.780
And it sends me back a very beautiful error message with the correct status code of 404 not found.

353
00:23:35.110 --> 00:23:38.080
This concludes your final lesson on SQL.

354
00:23:38.440 --> 00:23:39.460
I hope you had fun.

