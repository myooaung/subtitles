WEBVTT
1
00:00:00.180 --> 00:00:03.450
The delete operation is used to delete a resource.

2
00:00:03.810 --> 00:00:10.350
A rest API can define operations that manipulate resources where get, retrieves their resource posts,

3
00:00:10.350 --> 00:00:16.020
creates a resource, put updates a resource and delete deletes a resource.

4
00:00:16.050 --> 00:00:19.380
And in this lesson, we're going to create a delete operation.

5
00:00:21.070 --> 00:00:28.180
In order to delete a contact, we expect the consumer to initiate a delete request so we can use the

6
00:00:28.180 --> 00:00:31.930
delete mapping annotation to map this request to a handler method.

7
00:00:32.020 --> 00:00:40.510
The path that the consumer specifies will contain an ID variable because we need the ID to know which

8
00:00:40.510 --> 00:00:42.160
contact to delete.

9
00:00:43.470 --> 00:00:51.190
And when we delete a contact, the only thing that we're going to send back is an HTTP status code.

10
00:00:51.210 --> 00:00:52.300
We're not going to sit here.

11
00:00:52.310 --> 00:00:54.150
We're not going to be sending back any data.

12
00:00:54.510 --> 00:00:56.130
We'll call the handler method.

13
00:00:56.130 --> 00:00:57.420
Delete contact.

14
00:00:59.120 --> 00:00:59.540
In here.

15
00:00:59.540 --> 00:01:03.380
We can pass the path variable string ID.

16
00:01:07.280 --> 00:01:07.790
All right.

17
00:01:07.880 --> 00:01:15.170
Now, inside the interface, we will force the implementation to override a delete contact method.

18
00:01:15.800 --> 00:01:16.520
Void.

19
00:01:16.520 --> 00:01:17.960
Delete, contact.

20
00:01:18.410 --> 00:01:20.360
It's going to receive an ID.

21
00:01:22.040 --> 00:01:26.060
Back inside of the implementation.

22
00:01:26.060 --> 00:01:27.710
Let's override the method.

23
00:01:29.480 --> 00:01:37.850
And here we'll say contact repository, dot, delete contact and will delete the contact at the index.

24
00:01:38.840 --> 00:01:46.460
Now inside of my controller, when a user makes a delete request, we're going to delete whatever resource

25
00:01:46.460 --> 00:01:50.120
matches the following ID Contact Service Dot.

26
00:01:50.150 --> 00:01:51.710
Delete Contact ID.

27
00:01:52.580 --> 00:01:56.480
And having another look at the HTTP 200 status codes.

28
00:01:56.480 --> 00:01:58.490
Which one do you think we should send back?

29
00:01:58.490 --> 00:02:00.050
I think to oh four.

30
00:02:00.050 --> 00:02:04.850
No content is the appropriate status code to send back because we got the request.

31
00:02:04.850 --> 00:02:08.060
It was successful, but there is nothing to really send back.

32
00:02:08.060 --> 00:02:09.680
The resource was deleted.

33
00:02:10.449 --> 00:02:12.550
So we will return.

34
00:02:13.380 --> 00:02:16.350
A new response entity.

35
00:02:17.330 --> 00:02:21.440
That encapsulates a status code of whoops.

36
00:02:22.690 --> 00:02:24.310
HTTP status dot.

37
00:02:24.340 --> 00:02:25.690
No content.

38
00:02:25.690 --> 00:02:27.460
So that would be 204.

39
00:02:31.820 --> 00:02:32.090
Can't.

40
00:02:32.090 --> 00:02:33.080
Let's try it out.

41
00:02:33.110 --> 00:02:37.130
I will run the application and debug mode once again.

42
00:02:46.750 --> 00:02:55.360
And what I'm also going to do, actually, is add two breakpoints over here, one inside of save, one

43
00:02:55.360 --> 00:02:59.300
inside of updates, and then I'll go back to Postman.

44
00:02:59.320 --> 00:03:06.880
First thing I'll do is make a post request that creates the following resource Remove the ID field because

45
00:03:06.880 --> 00:03:09.580
we want it at first to be auto generated.

46
00:03:10.690 --> 00:03:12.610
Let's send the post request.

47
00:03:14.890 --> 00:03:15.640
Oh, my dad.

48
00:03:15.640 --> 00:03:22.090
Upon sending over a post request, Spring Boot does not expect an ID because we're just creating a brand

49
00:03:22.090 --> 00:03:23.230
new contact.

50
00:03:23.260 --> 00:03:24.520
Let's try this again.

51
00:03:26.400 --> 00:03:27.230
All right.

52
00:03:27.240 --> 00:03:33.150
It creates a new object of the contact class, auto generated auto generating an ID, and each field

53
00:03:33.150 --> 00:03:35.460
from the JSON invokes a setter.

54
00:03:37.550 --> 00:03:42.140
Ultimately, this saves a new contact inside of our ArrayList.

55
00:03:42.740 --> 00:03:44.720
Let's just copy over the ID right now.

56
00:03:44.720 --> 00:03:45.830
Copy value.

57
00:03:48.740 --> 00:03:51.050
And there is our updated data store.

58
00:03:52.550 --> 00:03:52.900
Okay.

59
00:03:52.910 --> 00:03:56.380
Now I'm going to go back, make a request.

60
00:03:56.390 --> 00:03:58.760
I want to update that same contact.

61
00:04:08.690 --> 00:04:10.340
And give them a new phone number.

62
00:04:13.260 --> 00:04:15.300
All right, we'll send that over.

63
00:04:16.260 --> 00:04:20.160
Spring Boot creates a new contact object, auto generating the ID field.

64
00:04:20.160 --> 00:04:27.420
But then the ID that we sent through the JSON is going to override the auto generated ID such that the

65
00:04:27.420 --> 00:04:32.250
contact we intend to update retains its original ID.

66
00:04:33.570 --> 00:04:39.630
And now here, instead of update contact, you can see that the contacts are a list already contains

67
00:04:39.630 --> 00:04:45.660
a Jon Snow contact and now we're updating it to have a new phone number.

68
00:04:45.780 --> 00:04:52.200
So we just updated the resource and now we're going to delete it using that same ID will go and will

69
00:04:52.200 --> 00:04:59.640
make a delete request and to delete a contact, the only thing we have to specify is the ID of the resource

70
00:04:59.640 --> 00:05:00.660
we want to delete.

71
00:05:00.660 --> 00:05:04.860
We do not need any content to send over, so we'll say none.

72
00:05:05.950 --> 00:05:07.120
We'll send up.

73
00:05:07.270 --> 00:05:09.250
We have to complete this request first.

74
00:05:11.150 --> 00:05:13.580
And the request to send back a status of 200.

75
00:05:13.580 --> 00:05:16.850
The contact was the resource was updated.

76
00:05:16.880 --> 00:05:21.470
Now we'll go ahead and delete that same resource and it's gone.

77
00:05:22.160 --> 00:05:28.100
I should have had a break point for deleting, but trust me, the contact was inside the ArrayList and

78
00:05:28.100 --> 00:05:29.070
now it's not.

79
00:05:29.090 --> 00:05:33.470
We get back a status of 204 which confirms the success.

80
00:05:34.090 --> 00:05:39.590
Okay, last thing I want to do before we wrap up is give the consumer the ability to retrieve a collection

81
00:05:39.590 --> 00:05:40.770
of resources.

82
00:05:40.790 --> 00:05:47.990
So what I'm going to do is specify one final handler method that expects to receive incoming requests

83
00:05:47.990 --> 00:05:50.060
on slash contact.

84
00:05:50.060 --> 00:05:51.170
Slash all.

85
00:05:53.260 --> 00:06:01.630
In this handler method is going to return a response entity that encapsulates a list of contact resources.

86
00:06:02.650 --> 00:06:05.080
We're going to call it get contacts.

87
00:06:08.880 --> 00:06:11.310
And here what we'll do is just say a list.

88
00:06:13.270 --> 00:06:14.470
Contact.

89
00:06:15.690 --> 00:06:19.470
Contacts is equal to contact service dot.

90
00:06:19.500 --> 00:06:20.830
We don't have it defined yet.

91
00:06:20.850 --> 00:06:23.130
We'll just call it get contacts for now.

92
00:06:24.200 --> 00:06:32.150
And then once we retrieve all of the contacts from our data store, we'll return a new response entity.

93
00:06:33.400 --> 00:06:38.290
That holds the contact data as well as a status of OC.

94
00:06:39.610 --> 00:06:39.950
Okay.

95
00:06:40.000 --> 00:06:42.040
Let's go over to our interface.

96
00:06:43.440 --> 00:06:46.740
And define a list.

97
00:06:47.930 --> 00:06:48.620
Contact.

98
00:06:48.620 --> 00:06:55.430
So a function that returns a list of contacts and this function will be called get contacts.

99
00:07:04.760 --> 00:07:06.170
Inside the implementation.

100
00:07:06.170 --> 00:07:09.110
We need to override the gut contact method.

101
00:07:09.440 --> 00:07:14.690
And here we can say contact repository, dot, get contacts.

102
00:07:15.620 --> 00:07:16.200
All right.

103
00:07:16.200 --> 00:07:17.180
I think we're all done.

104
00:07:17.190 --> 00:07:18.480
Let's test it out.

105
00:07:19.050 --> 00:07:22.980
We'll make a gut request that gets every single contact.

106
00:07:24.050 --> 00:07:24.620
Um.

107
00:07:24.620 --> 00:07:26.780
No need to include a body.

108
00:07:27.580 --> 00:07:28.900
Let's just send it over.

109
00:07:30.930 --> 00:07:31.110
Yeah.

110
00:07:31.200 --> 00:07:34.830
We get back nothing obviously, because we need to create a contact first.

111
00:07:34.830 --> 00:07:39.180
As we reran the spring boot up, the state of the application was reset as well.

112
00:07:39.180 --> 00:07:42.210
So let's just go ahead and make a post request.

113
00:07:45.640 --> 00:07:47.830
We'll create a John Snow resource.

114
00:07:48.130 --> 00:07:49.420
It was created.

115
00:07:49.720 --> 00:07:52.990
Let's create a I don't know the how to resource.

116
00:07:54.850 --> 00:07:57.190
Give them a random phone number, create that.

117
00:07:57.190 --> 00:08:01.270
Let's create another resource in the name of Tyrion Lannister.

118
00:08:03.480 --> 00:08:04.290
Create that.

119
00:08:04.290 --> 00:08:12.480
And then if we say slash all and then if we make a get request to retrieve all of the contacts, it

120
00:08:12.480 --> 00:08:15.740
should return the three contacts we just created.

121
00:08:15.750 --> 00:08:17.430
No need to include a body.

122
00:08:17.460 --> 00:08:18.660
We'll say none.

123
00:08:19.080 --> 00:08:20.070
Press send.

124
00:08:20.560 --> 00:08:21.600
Beautiful.

125
00:08:22.900 --> 00:08:29.950
It returns a JSON that contains a collection of contact resources and the status of 200 reassures me

126
00:08:29.950 --> 00:08:33.549
as the consumer that everything is working just fine.

127
00:08:33.850 --> 00:08:40.010
All right, we're all done setting up the rest API, but we need to set up some exception handling.

128
00:08:40.030 --> 00:08:45.250
You'll be doing all that by yourself in the next few workbooks, so I hope you're prepared.

