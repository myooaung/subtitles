WEBVTT
1
00:00:00.150 --> 00:00:00.870
In this lesson.

2
00:00:00.870 --> 00:00:06.000
I just want to go through the starter project that we're going to use to set up JWT authentication.

3
00:00:06.000 --> 00:00:11.370
So please start by launching the starter project by following this path in your resources.

4
00:00:16.660 --> 00:00:17.760
Let's start from the top.

5
00:00:17.770 --> 00:00:23.470
The first thing that I created when generating your starter project was a user entity, because when

6
00:00:23.470 --> 00:00:29.380
a user signs up, when they register to use our API, we're going to save their information inside of

7
00:00:29.380 --> 00:00:30.490
our database.

8
00:00:31.640 --> 00:00:35.930
And you'll notice that I call the table users, not user.

9
00:00:35.960 --> 00:00:39.260
That's because user is a reserved keyword in SQL.

10
00:00:39.260 --> 00:00:44.740
And if you do use the word user to name your table, you're going to get a big exception.

11
00:00:44.750 --> 00:00:49.760
So please make sure to stay cautious of reserved keywords in SQL.

12
00:00:49.790 --> 00:00:55.840
I left you a link over here that you can use as a reference to see the reserved words.

13
00:00:55.850 --> 00:01:01.820
If you do a control find, you will find that user is one of those words and we should not be using

14
00:01:01.820 --> 00:01:02.060
it.

15
00:01:02.060 --> 00:01:02.420
All right.

16
00:01:02.420 --> 00:01:06.180
And you'll notice here that I have a new class entity not found exception.

17
00:01:06.200 --> 00:01:11.630
That's because, as I was creating your starter project, I created another class called User Not Found

18
00:01:11.630 --> 00:01:15.080
Exception, and it ended up having the exact same constructor.

19
00:01:15.080 --> 00:01:20.420
It followed the exact same pattern as course not found exception and student not found exception.

20
00:01:20.420 --> 00:01:27.170
So for the sake of avoiding redundant code I just created an entity not found exception class and its

21
00:01:27.170 --> 00:01:29.630
constructor accepts a class type.

22
00:01:29.720 --> 00:01:32.060
So from the course service implementation.

23
00:01:33.570 --> 00:01:38.790
If they were to throw an entity not found exception, they would have to pass in course a class.

24
00:01:39.000 --> 00:01:44.250
And because the class type is coarse, get simple name is going to extract the name of the class and

25
00:01:44.250 --> 00:01:46.950
then two lowercase is going to convert it to lowercase.

26
00:01:46.950 --> 00:01:50.500
So ultimately you'll have the course with ID, blah, blah, blah.

27
00:01:50.520 --> 00:01:58.050
And this is repeated for student and this is also repeated for the user service implementation.

28
00:01:58.050 --> 00:02:01.080
So now we have one exception class instead of three.

29
00:02:02.510 --> 00:02:05.900
Which reduces the number of exceptions being handled over here.

30
00:02:05.900 --> 00:02:09.350
And all in all, this was just to avoid redundancy.

31
00:02:10.910 --> 00:02:13.490
But everything still works the exact same way.

32
00:02:14.000 --> 00:02:20.570
Obviously, we need a user repository layer that can create user entities and query them from our table.

33
00:02:23.140 --> 00:02:25.120
I'll get to security in a second.

34
00:02:25.120 --> 00:02:32.800
And because we have a user repository, obviously, we also need a user service that acts as a middleman.

35
00:02:34.370 --> 00:02:40.310
The user service implementation is going to be the middleman between the user repository and the user

36
00:02:40.310 --> 00:02:41.170
controller.

37
00:02:41.180 --> 00:02:47.420
So here we've got two handler methods one which creates a user that registers to use our services,

38
00:02:47.420 --> 00:02:53.420
and another which queries by ID nothing new will be adding implementations to these later.

39
00:02:54.050 --> 00:02:58.880
And finally, most importantly, you'll notice a security folder.

40
00:02:59.690 --> 00:03:03.290
Here is where we'll be setting up our authentication filters.

41
00:03:03.440 --> 00:03:05.480
Don't worry about those right now.

42
00:03:05.630 --> 00:03:11.630
Here, we're going to be setting up our own authentication managers that validates a username and password

43
00:03:11.630 --> 00:03:13.520
when the client logs in.

44
00:03:14.060 --> 00:03:15.890
Again, we'll cover that later.

45
00:03:15.920 --> 00:03:18.310
And here we have our security config.

46
00:03:18.320 --> 00:03:23.510
This all of these lines we already covered when we were doing basic authentication.

47
00:03:23.750 --> 00:03:27.110
The only two new lines are these ones over here.

48
00:03:27.110 --> 00:03:32.570
And you're not really that important because these are not spring security configurations that you would

49
00:03:32.570 --> 00:03:34.240
want to use in production.

50
00:03:34.250 --> 00:03:37.490
These are only so that we can enable the H two console.

51
00:03:37.490 --> 00:03:39.500
So anti-matter is that permit all.

52
00:03:39.500 --> 00:03:40.830
You've already seen this.

53
00:03:40.850 --> 00:03:46.910
It allows you to access whatever path without the need to authenticate such that any other request needs

54
00:03:46.910 --> 00:03:48.040
to be authenticated.

55
00:03:48.050 --> 00:03:53.300
And this is really important because as we're developing the application, we want to access the H two

56
00:03:53.300 --> 00:03:56.450
database console without having to authenticate beforehand.

57
00:03:56.460 --> 00:03:58.610
Otherwise that would get really, really annoying.

58
00:03:58.640 --> 00:04:02.890
Now this is another configuration that we need to add in order to make H two work.

59
00:04:02.900 --> 00:04:11.600
And the reason we need this, if I were to go to local host 80, 80 slash H two and then if I were to

60
00:04:11.600 --> 00:04:15.680
authenticate the H two, UI is rendered within a frame.

61
00:04:15.680 --> 00:04:21.560
So a frame is an HTML thing and we don't really care about front end stuff like HTML frames.

62
00:04:21.560 --> 00:04:28.670
But just to give you the summary, a frame loads and HTML page within a parent HTML page, those are

63
00:04:28.670 --> 00:04:31.660
commonly seen in ads or embedded media.

64
00:04:31.670 --> 00:04:39.620
In this case, H two also renders its UI on a frame and by default spring security prevents rendering

65
00:04:39.620 --> 00:04:43.100
within a frame, and this line disables its prevention.

66
00:04:43.160 --> 00:04:50.360
Now, I want to emphasize that these configurations are only if you want to use H two in production,

67
00:04:50.360 --> 00:04:52.010
you would never, ever use H two.

68
00:04:52.010 --> 00:04:57.950
If you decide for some reason to deviate from what we have in the starter project and connect this to

69
00:04:57.950 --> 00:05:04.310
a MySQL database instead, then you would have to remove these because they are specifically for configuring

70
00:05:04.310 --> 00:05:04.970
H two.

71
00:05:05.300 --> 00:05:11.450
And there is one more thing I want to emphasize is that in real life, in production, you would never,

72
00:05:11.450 --> 00:05:13.220
ever use H two.

73
00:05:13.250 --> 00:05:20.000
You would need to use something like MySQL or PostgreSQL that actually saves your data to disk.

74
00:05:20.570 --> 00:05:23.450
You would connect your app just like I showed you over here.

75
00:05:23.450 --> 00:05:28.370
In real life, this will be an actual URL depending on where you have my SQL deployed.

76
00:05:29.180 --> 00:05:34.160
And in production you would not include this line for the reasons mentioned over here.

77
00:05:34.670 --> 00:05:36.980
Anyways, I'm going a bit off script.

78
00:05:36.980 --> 00:05:42.800
In real life you would use my SQL PostgreSQL or any relational database management system that actually

79
00:05:42.800 --> 00:05:44.150
saves your data to disk.

80
00:05:44.150 --> 00:05:48.290
But if you're just developing and testing, use h two.

81
00:05:48.320 --> 00:05:54.440
It's small, it's a lightweight and memory database and this security rule allows us to view it without

82
00:05:54.440 --> 00:05:55.960
having to authenticate.

83
00:05:55.970 --> 00:06:00.950
And this one allows the UI to display within a frame which is disabled by default.

84
00:06:00.950 --> 00:06:03.890
So if you were to actually remove this line, let me just show you.

85
00:06:05.400 --> 00:06:06.120
Um.

86
00:06:06.630 --> 00:06:09.210
You would definitely be able to authenticate.

87
00:06:16.740 --> 00:06:22.620
But then we can't see the H two console because it renders within an HTML frame which by default is

88
00:06:22.620 --> 00:06:24.020
disabled by spring security.

89
00:06:24.030 --> 00:06:27.880
So we need this line as well to work with H two.

90
00:06:28.210 --> 00:06:30.680
Again, we're still developing, we're still prototyping.

91
00:06:30.690 --> 00:06:34.050
It's just much faster to use h24 now, more lightweight.

92
00:06:34.050 --> 00:06:35.520
So let's just keep going with it.

93
00:06:35.520 --> 00:06:39.600
And that is all that I want to show you for the Starter Project.

94
00:06:39.600 --> 00:06:45.690
In the next video, we're going to talk about the differences between basic auth and JWT authentication

95
00:06:45.690 --> 00:06:48.000
before we start coding this up.

96
00:06:48.090 --> 00:06:48.690
All right.

97
00:06:48.690 --> 00:06:49.500
See you soon.

