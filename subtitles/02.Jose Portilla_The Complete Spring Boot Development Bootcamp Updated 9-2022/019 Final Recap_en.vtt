WEBVTT
1
00:00:00.180 --> 00:00:04.130
To recap, any request that is made will enter one of three pathways.

2
00:00:04.140 --> 00:00:08.700
We're going to skip pathway one because it doesn't go through any of the logic and the security filters.

3
00:00:08.700 --> 00:00:14.070
The register method is publicly available to anybody, but pathway number two is a bit more interesting.

4
00:00:14.430 --> 00:00:16.470
The user makes a request to authenticate.

5
00:00:16.470 --> 00:00:21.540
First, it goes through the exception handler filter, which will catch any runtime exception that is

6
00:00:21.540 --> 00:00:23.610
thrown in subsequent filters.

7
00:00:23.610 --> 00:00:29.310
The filter that follows is the authentication filter because the client is trying to log in the filters

8
00:00:29.310 --> 00:00:31.920
is attempt authentication method is going to get invoked.

9
00:00:31.920 --> 00:00:36.630
Ultimately, that's going to call upon the authentication manager to verify their credentials.

10
00:00:36.630 --> 00:00:42.630
And if their credentials match a username and password in our database, then we send them back a JWT

11
00:00:42.660 --> 00:00:45.630
token, which leads us to pathway number three.

12
00:00:46.350 --> 00:00:51.930
This pathway validates a client's JWT token before authorizing them to use any of our services.

13
00:00:51.930 --> 00:00:57.930
So after a user is authenticated, they were granted a token and they will use that token as evidence

14
00:00:57.930 --> 00:00:59.310
that they've been authenticated.

15
00:00:59.310 --> 00:01:01.200
No matter what the request is.

16
00:01:01.200 --> 00:01:06.570
It starts off in the exception handling filter and it needs to start there because we want to catch

17
00:01:06.570 --> 00:01:10.110
any runtime exception that gets thrown in subsequent filters.

18
00:01:10.110 --> 00:01:14.970
The request goes through the authentication filter, but the authentication filters is attempt.

19
00:01:14.970 --> 00:01:19.290
Authentication method is not going to run because we're not authenticating.

20
00:01:19.320 --> 00:01:24.720
It's just going to go straight to the next filter that follows the JWT authorization filter.

21
00:01:24.720 --> 00:01:30.360
And the purpose of this filter is to authorize the client's request if and only if the token that they're

22
00:01:30.360 --> 00:01:32.160
giving us is actually valid.

23
00:01:32.160 --> 00:01:36.750
So it's going to extract the header, it's going to extract the payload along with a secret key that

24
00:01:36.750 --> 00:01:37.830
nobody knows about.

25
00:01:37.830 --> 00:01:42.720
It will use a signing algorithm that combines all three and produces a test signature.

26
00:01:42.720 --> 00:01:49.500
If the test signature matches what the client gives us, then we know they gave us a valid token and

27
00:01:49.500 --> 00:01:51.600
we're going to authorize their request.

28
00:01:52.870 --> 00:01:58.570
We implemented all of these pathways and as a result we have secured our application.

29
00:01:58.720 --> 00:02:00.940
I really hope that you enjoyed this course.

30
00:02:00.940 --> 00:02:06.790
In the end, we developed a fully loaded API that exposes a plethora of services.

31
00:02:06.790 --> 00:02:14.380
We have anticipated many scenarios where the user may enter bad data through exceptions in the process.

32
00:02:14.380 --> 00:02:16.960
And now here we're handling these exceptions.

33
00:02:16.960 --> 00:02:24.220
We've secured our application such that clients must first register and then after they've registered,

34
00:02:24.220 --> 00:02:28.150
they need to log in in order to then be provided a JWT token.

35
00:02:28.150 --> 00:02:34.630
Once they have that token, they can start using it to make requests to their heart's content.

36
00:02:34.630 --> 00:02:42.220
Well, until the token expires and in sections 20 and 21, we covered documentation as well as testing.

37
00:02:42.220 --> 00:02:47.710
Although we didn't implement those two concepts in the grade submission API, it would work the exact

38
00:02:47.710 --> 00:02:48.580
same way.

39
00:02:48.730 --> 00:02:54.790
Anyways, we connected our application to an SQL database and we're interacting with that database using

40
00:02:54.790 --> 00:02:56.380
spring data GPA.

41
00:02:56.680 --> 00:03:00.880
You also learn how to connect your application to a MySQL database.

42
00:03:00.880 --> 00:03:08.350
And inside of our app we have defined one to many relationships, many to many relationships, many

43
00:03:08.350 --> 00:03:09.850
to one relationships.

44
00:03:09.850 --> 00:03:17.350
This API is fully loaded and in the end you have acquired the skills needed to develop powerful APIs.

45
00:03:17.350 --> 00:03:21.150
I've been having a lot of fun interacting with you guys on Discord.

46
00:03:21.160 --> 00:03:24.400
If you want to stay in touch, by all means, you're welcome to join.

47
00:03:24.400 --> 00:03:29.770
And if I ever end up making a microservices course where we eventually cover deployment, I will notify

48
00:03:29.770 --> 00:03:32.020
the discord inside of the announcements channel.

49
00:03:32.020 --> 00:03:35.110
So you'll be the first one to receive a notification.

50
00:03:35.990 --> 00:03:40.400
Thank you so much for your time and for trusting me in teaching you spring boot.

