WEBVTT
1
00:00:00.210 --> 00:00:06.120
In order to recap what we did in the last lesson, it's important to trace the runtime and see exactly

2
00:00:06.150 --> 00:00:08.010
what's happening behind the scenes.

3
00:00:08.430 --> 00:00:13.380
And so what I'm going to do is just start by running the application and debug mode.

4
00:00:17.060 --> 00:00:19.430
Apply some breakpoints to the application.

5
00:00:19.430 --> 00:00:20.930
I will apply them everywhere.

6
00:00:26.850 --> 00:00:30.480
And it might actually apply some in the setters as well.

7
00:00:30.750 --> 00:00:31.800
Set score.

8
00:00:32.490 --> 00:00:32.850
Set.

9
00:00:32.850 --> 00:00:33.900
Subject.

10
00:00:35.070 --> 00:00:36.210
Set name.

11
00:00:37.770 --> 00:00:39.090
And.

12
00:00:39.950 --> 00:00:43.370
It might be worthwhile adding one in the empty constructor as well.

13
00:00:47.650 --> 00:00:49.750
We'll just put a random print statement for now.

14
00:00:50.980 --> 00:00:51.730
All right.

15
00:00:53.230 --> 00:00:57.670
So now, starting from the very top, I'll make a get request on local host 8080.

16
00:00:59.620 --> 00:01:04.300
The first breakpoint hits and the request to maps to the handler method get form.

17
00:01:04.720 --> 00:01:11.140
The handler method starts by creating a grade object, obviously using the empty constructor.

18
00:01:15.670 --> 00:01:20.200
Now the model has data and you can drill into it and you'll notice a key value pair.

19
00:01:20.230 --> 00:01:25.390
The string grade is the key and the value that it maps to is an MT grade object.

20
00:01:25.720 --> 00:01:30.910
As the handler method returns the form template, it's going to send over the model data to the form

21
00:01:30.910 --> 00:01:31.900
that HTML.

22
00:01:32.350 --> 00:01:40.000
The form element is going to look inside the model and it binds to the MT grade object.

23
00:01:41.470 --> 00:01:45.910
Family field selects a field from the previously bound object.

24
00:01:45.910 --> 00:01:52.870
And what family field is going to do is bind every single form input to a field in the model object.

25
00:01:52.870 --> 00:01:59.530
So it follows that because all of the fields in this object are empty, all of the inputs in the form

26
00:01:59.530 --> 00:02:01.210
are going to be empty as well.

27
00:02:07.550 --> 00:02:09.050
We get exactly that.

28
00:02:09.229 --> 00:02:14.690
And now when we submit the form, I will submit data for Harry.

29
00:02:16.010 --> 00:02:20.480
A post request is going to be made and it's going to carry all of that data to the back end.

30
00:02:23.020 --> 00:02:25.480
Now what's the first thing that will get executed?

31
00:02:27.350 --> 00:02:28.450
Empty constructor.

32
00:02:28.450 --> 00:02:32.210
Weird will remember when a post request is made.

33
00:02:32.230 --> 00:02:37.360
The handler method submit form is going to receive it and the first thing it's going to do is create

34
00:02:37.360 --> 00:02:40.840
an empty grade object using your empty constructor.

35
00:02:40.840 --> 00:02:42.970
You can see it happening in real time.

36
00:02:44.370 --> 00:02:45.750
And if I continue.

37
00:02:46.810 --> 00:02:52.810
This is a parameter from the post request and Spring Boot is smart enough to use your public setter

38
00:02:52.810 --> 00:02:56.440
to update your field with a parameter from the post request.

39
00:02:56.440 --> 00:02:58.870
So it's going to update the name field.

40
00:03:03.140 --> 00:03:05.750
The score is a parameter from the post request.

41
00:03:05.750 --> 00:03:07.580
It's going to update the score field.

42
00:03:08.410 --> 00:03:13.180
And it's going to update the subject with the subject parameter from the post request.

43
00:03:13.600 --> 00:03:14.760
That's really cool.

44
00:03:14.770 --> 00:03:21.760
So after we've created that grade and updated it with values, we can add it to the data store student

45
00:03:21.760 --> 00:03:22.480
grades.

46
00:03:24.260 --> 00:03:30.460
And then this is going to prompt the client to make another get request on slash grades.

47
00:03:30.470 --> 00:03:32.900
So where do you think the next breakpoint is going to hit?

48
00:03:34.580 --> 00:03:35.570
There you go.

49
00:03:35.690 --> 00:03:41.300
So the client made a get request on slash grades and the handler method received it.

50
00:03:41.330 --> 00:03:44.840
Here we have the array list that's populated with our data.

51
00:03:44.960 --> 00:03:53.450
We're adding it as a model attribute and before actually returning the grades, template grades is going

52
00:03:53.450 --> 00:03:56.910
to receive this array list of grade objects.

53
00:03:56.930 --> 00:04:01.370
There is only one grade object, so it's just going to generate one row of data.

54
00:04:01.820 --> 00:04:04.220
So if I go back and press next.

55
00:04:06.480 --> 00:04:07.890
That's just beautiful.

56
00:04:10.840 --> 00:04:16.839
So now compare the process that you just saw to the diagram that we talked about in the previous video.

57
00:04:17.410 --> 00:04:18.820
I'll leave it here to play.

