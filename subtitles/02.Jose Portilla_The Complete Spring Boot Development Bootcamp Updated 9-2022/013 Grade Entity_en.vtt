WEBVTT
1
00:00:00.360 --> 00:00:04.620
Before we start this lesson, we want to keep the focus on the grades data.

2
00:00:04.650 --> 00:00:07.530
I don't want to keep making post requests for students.

3
00:00:07.530 --> 00:00:15.090
So in our main class, in the entry points, what I want you to do is implement the command line runner

4
00:00:15.090 --> 00:00:16.050
interface.

5
00:00:20.200 --> 00:00:26.800
By doing so, we can override the run method and the run method is going to get invoked as soon as we

6
00:00:26.800 --> 00:00:28.610
run our Spring Boot app.

7
00:00:28.630 --> 00:00:33.340
And upon doing so, I want to save for students in our student table.

8
00:00:33.340 --> 00:00:39.400
Every single time there is a file inside of your resources folder, please copy its contents over here.

9
00:00:46.470 --> 00:00:46.660
Okay.

10
00:00:46.710 --> 00:00:49.860
So here we've got an array of student entities.

11
00:00:50.040 --> 00:00:55.440
Let's import the student class and import the local dates.

12
00:00:57.450 --> 00:00:57.960
All right.

13
00:00:57.960 --> 00:01:00.210
And now what I'm going to do is auto wire.

14
00:01:02.430 --> 00:01:04.080
The student repository.

15
00:01:06.310 --> 00:01:07.480
Now I can.

16
00:01:07.600 --> 00:01:12.220
And now I'm going to create a for loop that runs through every single student and the student's array.

17
00:01:12.250 --> 00:01:17.980
And for every student that we run through, I'm going to save them into our database using the student

18
00:01:17.980 --> 00:01:18.910
repository.

19
00:01:24.430 --> 00:01:24.590
Okay.

20
00:01:24.670 --> 00:01:30.040
Now, every time we run our app, although our database resets, it's going to get repopulated with

21
00:01:30.040 --> 00:01:31.240
data every time.

22
00:01:33.220 --> 00:01:39.430
Now we could have just configured H2 to be less volatile, but let's just keep it the way it is and

23
00:01:39.580 --> 00:01:41.890
we'll reconnect to our database.

24
00:01:43.580 --> 00:01:47.000
And you'll see that automatically we have student data.

25
00:01:47.850 --> 00:01:48.180
Okay.

26
00:01:48.210 --> 00:01:48.960
Looking good.

27
00:01:50.230 --> 00:01:55.870
Another thing we want to do before we officially start talking about relationships is set up the grade

28
00:01:55.870 --> 00:01:56.610
entity.

29
00:01:56.620 --> 00:02:02.530
We need to tell spring GPA that we're going to be saving grade entities, so please create a table for

30
00:02:02.530 --> 00:02:03.070
it.

31
00:02:04.390 --> 00:02:08.120
And the table is going to be named at table.

32
00:02:08.139 --> 00:02:13.240
The name of the table that will store grade entities is going to be called grade.

33
00:02:15.160 --> 00:02:19.990
The ID of each entity is going to be stored in the primary key column.

34
00:02:20.320 --> 00:02:23.560
The primary key column is going to be named ID.

35
00:02:28.960 --> 00:02:35.860
And the ID annotation specifies that this column is going to be the primary key column, such that every

36
00:02:35.860 --> 00:02:43.390
single value uniquely identifies a grade in the grade table and every single ID is going to be auto

37
00:02:43.390 --> 00:02:44.270
generated.

38
00:02:44.290 --> 00:02:46.510
So here we'll say generated value.

39
00:02:47.880 --> 00:02:55.140
Every single ID is going to be auto generated using the generation type identity strategy.

40
00:02:56.380 --> 00:03:00.190
The score of each grade is going to be stored in a score column.

41
00:03:00.520 --> 00:03:03.700
Column name is equal to score.

42
00:03:06.460 --> 00:03:12.560
And before I forget, we do not want the scores to be null, noble equals false.

43
00:03:12.580 --> 00:03:15.970
Every grade that gets submitted needs to have a valid score.

44
00:03:16.000 --> 00:03:16.840
And now back here.

45
00:03:16.840 --> 00:03:20.620
If I reconnect to my database, now we see two tables.

46
00:03:20.620 --> 00:03:21.790
That's perfect.

47
00:03:22.690 --> 00:03:27.560
For every single table in our database, we need a repository that's able to talk to it.

48
00:03:27.580 --> 00:03:32.320
So right now, the student repository is able to save student entities.

49
00:03:32.350 --> 00:03:36.230
Student entities are going to be saved into the student table.

50
00:03:36.250 --> 00:03:42.410
We need a great repository that will save great entities and great entities will save to the grade table.

51
00:03:42.430 --> 00:03:48.970
So let us create a public interface grade repository.

52
00:03:51.290 --> 00:03:55.010
That inherits from the CRUD Repository.

53
00:03:55.160 --> 00:04:01.610
This great repository is going to be in charge of managing grade entities, and every grade entity that

54
00:04:01.610 --> 00:04:05.960
we save will be identified by a long identifier.

55
00:04:06.880 --> 00:04:08.260
Long ID.

56
00:04:09.860 --> 00:04:10.670
All right.

57
00:04:11.030 --> 00:04:19.250
And now back inside of the grade service implementation, I'm going to auto wire the bean that's going

58
00:04:19.250 --> 00:04:22.400
to get created out of our special repository.

59
00:04:22.430 --> 00:04:23.900
Great repository.

60
00:04:24.260 --> 00:04:25.640
Create a repository.

61
00:04:28.400 --> 00:04:33.250
As we auto wire the bean, the only method that we care about right now is saving.

62
00:04:33.260 --> 00:04:39.770
So here, what I'll do is I'll say great repository, dot save and it's going to save whatever grade

63
00:04:39.770 --> 00:04:41.240
anti that gets passed in.

64
00:04:41.240 --> 00:04:44.150
Don't worry about these IDs for now.

65
00:04:44.180 --> 00:04:45.440
We'll get there soon.

66
00:04:49.770 --> 00:04:55.110
And now, since the service is the middleman between the repository and the controller, let's go to

67
00:04:55.110 --> 00:04:56.370
the grade controller.

68
00:04:56.370 --> 00:05:03.060
And it seems I've already ordered it before this recording, so I'll just let you take some time and

69
00:05:03.060 --> 00:05:03.960
do that.

70
00:05:05.310 --> 00:05:09.000
And once you do, all the preliminary stuff is now done.

71
00:05:09.000 --> 00:05:10.440
Nothing new so far.

72
00:05:10.470 --> 00:05:12.780
Let's finally start with our lesson.

