WEBVTT
1
00:00:00.450 --> 00:00:05.250
It's necessary to test all of the business logic inside of the service class.

2
00:00:05.610 --> 00:00:10.380
And the last lesson we set up a class that mocks the great repository dependency.

3
00:00:10.740 --> 00:00:17.340
It creates a real object out of great service, and then it injects the grade repository mock into it.

4
00:00:17.550 --> 00:00:22.590
We're essentially wiring this great repository mark into the following variable.

5
00:00:22.710 --> 00:00:28.500
This allows us to test the grade service in complete isolation because we can control exactly what the

6
00:00:28.500 --> 00:00:30.750
mock can or can't return.

7
00:00:32.040 --> 00:00:36.660
In this lesson, you will unit test every single meaningful method inside of grade service.

8
00:00:39.410 --> 00:00:41.540
The unit testing process is fairly simple.

9
00:00:41.600 --> 00:00:45.680
The test annotation tells J Unit to run the method as a unit test.

10
00:00:48.660 --> 00:00:54.270
And there are three steps to writing a unit test arrange means mock the data that's needed to carry

11
00:00:54.270 --> 00:00:55.410
out the unit test.

12
00:00:55.530 --> 00:01:01.530
You kind of just prepare everything until you're ready to act, until you're ready to call the actual

13
00:01:01.530 --> 00:01:03.360
method that you want to test.

14
00:01:03.690 --> 00:01:06.540
After you call your method, you need to assert.

15
00:01:06.540 --> 00:01:09.300
You need to check if it's actually behaving correctly.

16
00:01:12.310 --> 00:01:18.550
So we're going to start by testing if get grades is actually able to retrieve the grades from the repository.

17
00:01:20.270 --> 00:01:25.490
The test annotation tells J Unit to treat the method that follows as a test.

18
00:01:25.580 --> 00:01:27.290
We're going to call the method.

19
00:01:27.950 --> 00:01:31.440
Get grades from repo.

20
00:01:31.460 --> 00:01:32.270
Test.

21
00:01:34.320 --> 00:01:34.970
Okay.

22
00:01:34.980 --> 00:01:39.090
Step one is to mock the data that's needed to carry out the unit test.

23
00:01:39.570 --> 00:01:44.430
The nice thing is telling the mock what data to return reads like English.

24
00:01:44.730 --> 00:01:52.620
For example, when the service calls, grade reports get grades, then it should return a list of grades.

25
00:01:52.650 --> 00:01:55.230
This translates to the following code.

26
00:02:18.140 --> 00:02:25.490
So inside the unit test, we're going to write when the service object calls the grade repository mock

27
00:02:26.030 --> 00:02:26.750
grades.

28
00:02:29.840 --> 00:02:33.410
Then we're going to want this to return an array list.

29
00:02:33.560 --> 00:02:37.880
Then return arrays, dot as list.

30
00:02:38.120 --> 00:02:42.470
And the array list that it returns will contain two objects.

31
00:02:43.310 --> 00:02:49.010
The first grade object will be Harry potions C minus.

32
00:02:51.660 --> 00:02:53.760
The second one will be her mining.

33
00:02:57.270 --> 00:02:58.500
Breath Mincy.

34
00:03:02.440 --> 00:03:03.280
A-plus.

35
00:03:08.350 --> 00:03:11.420
Now that we've prepared the data, the next step is to act.

36
00:03:11.440 --> 00:03:14.410
The next step is to call the method that you want to test.

37
00:03:14.440 --> 00:03:17.350
The method that we want to test is grade service.

38
00:03:17.680 --> 00:03:18.580
Get grades.

39
00:03:19.990 --> 00:03:24.820
And we want to test if it's actually able to retrieve the grades from the repo.

40
00:03:24.940 --> 00:03:29.710
We're going to store the result in an array list, list, grade.

41
00:03:30.520 --> 00:03:35.700
Result is equal to whatever comes from grade service get grades.

42
00:03:35.700 --> 00:03:41.100
And now that we've called the method that we want to test, the last step is to assert, is it actually

43
00:03:41.100 --> 00:03:42.300
behaving correctly?

44
00:03:42.510 --> 00:03:48.390
In other words, we're going to perform a sanity check that ensures grade service, get grades, is

45
00:03:48.390 --> 00:03:52.380
actually getting the grades from grade repo to get grades.

46
00:03:52.380 --> 00:03:56.610
And we can do that with an assertion we'll say assert equals.

47
00:03:58.160 --> 00:04:03.010
And here we compare the value that we're expecting against the actual value.

48
00:04:03.020 --> 00:04:10.370
So I expect the name and index zero to equal Harry and then the actual value is going to be the name

49
00:04:10.370 --> 00:04:11.570
at index zero.

50
00:04:15.910 --> 00:04:17.829
Let's perform another assertion.

51
00:04:18.010 --> 00:04:22.740
I expect the subject at index one to be arithmetic.

52
00:04:23.540 --> 00:04:27.560
And the actual value is going to be the subject at index one.

53
00:04:33.120 --> 00:04:34.320
Run your test.

54
00:04:37.350 --> 00:04:45.360
In the assertion passes this confirms that great service don't get grades is actually getting the grades

55
00:04:45.360 --> 00:04:47.700
from grade repo to get grades.

56
00:04:48.150 --> 00:04:53.640
Now before we continue, I want to emphasize that we didn't actually need to test grade service to get

57
00:04:53.640 --> 00:04:56.700
grades because the code here is very trivial.

58
00:04:56.700 --> 00:05:02.310
Which leads me to my rule of thumb only unit test methods that offer meaningful logic.

59
00:05:04.820 --> 00:05:10.910
I only unit tested get grades as an example of arranging the data that you need for your test.

60
00:05:11.150 --> 00:05:17.420
Acting on that data by calling the method you want to test and then making assertions to make sure that

61
00:05:17.420 --> 00:05:19.730
the method you're testing actually works.

62
00:05:20.090 --> 00:05:26.030
That being said, we're not going to be testing the following methods because the code inside is very

63
00:05:26.030 --> 00:05:28.730
simple and I'm pretty sure it works.

64
00:05:29.330 --> 00:05:31.400
That leads us to unit test number two.

65
00:05:31.430 --> 00:05:37.580
We're going to test if get grade index is able to return the correct index when it receives an ID.

66
00:05:37.760 --> 00:05:43.190
This method contains meaningful business logic, which makes it vulnerable to bugs, and it's really

67
00:05:43.190 --> 00:05:48.380
important to write a unit test that ensures it's behaving correctly as before.

68
00:05:49.410 --> 00:05:54.810
The test annotation tells J Unit to treat the method that follows as a test.

69
00:05:54.840 --> 00:05:59.280
And I'm going to call the method grade index test.

70
00:06:01.930 --> 00:06:06.070
Now step one is to mock the data that's needed to carry out the unit test.

71
00:06:07.490 --> 00:06:16.640
If you look inside of grade service dot get grade index it calls get grades and in turn get grades calls

72
00:06:16.640 --> 00:06:18.560
grade report get grades.

73
00:06:18.560 --> 00:06:22.010
So we need to mock the data that this method returns.

74
00:06:22.010 --> 00:06:24.680
We can just copy and paste what we had before.

75
00:06:24.680 --> 00:06:31.160
When grade repo get grades gets called, we wanted to return the following ArrayList.

76
00:06:32.170 --> 00:06:38.710
And for us to be able to test get grade index, we need to pass in a bunch of IDs.

77
00:06:39.280 --> 00:06:42.150
So we're going to need access to the data store.

78
00:06:42.160 --> 00:06:48.820
So we'll need to call grade service, dot get grades before we can even start testing, get to grade

79
00:06:48.820 --> 00:06:55.480
index because we need to grab the ID of each grade and we'll just store this in a result variable.

80
00:06:59.650 --> 00:07:00.550
Step one is done.

81
00:07:00.550 --> 00:07:03.910
We've already marked the data that's needed to carry out the tests.

82
00:07:04.240 --> 00:07:06.260
And now step two is to act.

83
00:07:06.280 --> 00:07:11.350
We need to call the get grade index function to make sure that it's working correctly.

84
00:07:11.650 --> 00:07:16.000
We'll say grade service dot get grade index.

85
00:07:16.270 --> 00:07:19.540
The first ID we're going to pass in is the one for Harry.

86
00:07:24.510 --> 00:07:28.020
And the second ID we're going to pass in.

87
00:07:29.380 --> 00:07:31.310
Is invalid.

88
00:07:31.330 --> 00:07:32.830
I'll just say one, two, three.

89
00:07:33.610 --> 00:07:41.860
So I'll store the return value here into a variable called valid, and I'll store the return value here.

90
00:07:41.860 --> 00:07:43.900
Any variable called not found.

91
00:07:46.490 --> 00:07:47.020
Okay.

92
00:07:47.480 --> 00:07:53.750
The last step is to assert is to check if get grid index is behaving correctly.

93
00:07:55.210 --> 00:07:56.920
We can do that with an assertion.

94
00:07:56.920 --> 00:08:02.830
So using assert equals, we expect the valid index to be zero.

95
00:08:03.370 --> 00:08:10.040
So when we give get grade index Harry's ID, we expect it to return an index of zero.

96
00:08:10.060 --> 00:08:11.080
But will it?

97
00:08:11.110 --> 00:08:12.370
Let's find out.

98
00:08:13.600 --> 00:08:15.370
And we'll make another assertion.

99
00:08:16.090 --> 00:08:16.480
Here.

100
00:08:16.480 --> 00:08:23.010
We expect that if we give a get grade index some random ID, then it's going to return constants dot

101
00:08:23.020 --> 00:08:23.830
not found.

102
00:08:23.830 --> 00:08:30.850
So we're going to make sure constants dot not found is what this not found variable equals.

103
00:08:37.070 --> 00:08:39.110
And we get a null pointer exception.

104
00:08:39.500 --> 00:08:41.510
What could that be?

105
00:08:41.539 --> 00:08:46.700
Well, thankfully, this leads me to something else and that we can set up breakpoints.

106
00:08:47.240 --> 00:08:52.700
So upon calling get grade index, we're getting a null pointer exception.

107
00:08:53.120 --> 00:08:55.760
What I'll do is I will debug my test.

108
00:08:58.920 --> 00:09:03.960
And I'm going to step inside, get grid index, press the step inside button.

109
00:09:05.900 --> 00:09:09.440
I'm going to step out and step back in.

110
00:09:11.570 --> 00:09:13.220
All right, step out.

111
00:09:13.220 --> 00:09:14.840
Step back in now.

112
00:09:15.170 --> 00:09:16.310
And it works.

113
00:09:16.700 --> 00:09:19.070
So this ID belongs to Harry.

114
00:09:20.500 --> 00:09:22.690
First step loops through get grades.

115
00:09:25.710 --> 00:09:26.610
Interesting here.

116
00:09:26.610 --> 00:09:28.590
It's calling get grade.

117
00:09:28.710 --> 00:09:30.570
If I put a breakpoint here.

118
00:09:34.300 --> 00:09:39.420
We completely forgot to mark what get grade should return when it's called.

119
00:09:39.430 --> 00:09:42.220
So what it's doing is it's returning a null.

120
00:09:46.440 --> 00:09:53.790
Get great returns and null and attempting to call a method from a null results in a null pointer exception.

121
00:09:54.030 --> 00:09:56.490
So we actually didn't finish step one.

122
00:09:56.490 --> 00:09:58.870
We mocked what a great report get.

123
00:09:58.950 --> 00:10:03.540
Grades should return, but we didn't mock what this method should return.

124
00:10:03.540 --> 00:10:06.030
So we're going to have to stop our test.

125
00:10:07.260 --> 00:10:08.370
And fix it up.

126
00:10:09.010 --> 00:10:11.950
So what I'm going to do just to keep things simple.

127
00:10:13.150 --> 00:10:14.110
Is.

128
00:10:16.000 --> 00:10:16.300
Here.

129
00:10:16.300 --> 00:10:17.530
We'll say grade.

130
00:10:18.550 --> 00:10:21.490
Grade is equal to a new grade.

131
00:10:22.270 --> 00:10:23.620
We'll copy this over.

132
00:10:26.570 --> 00:10:32.660
And instead of this returning an ArrayList of two grades, it will just return one there is no need

133
00:10:32.660 --> 00:10:33.680
to return to.

134
00:10:42.530 --> 00:10:44.510
And now I can mark the data that grade.

135
00:10:44.510 --> 00:10:47.600
Reporter Grade should return when it's called.

136
00:10:47.720 --> 00:10:48.980
So here we'll say.

137
00:10:50.270 --> 00:10:51.140
When.

138
00:10:51.620 --> 00:10:52.040
Grade.

139
00:10:52.040 --> 00:10:53.980
Repository dot.

140
00:10:53.990 --> 00:10:55.250
Get grade.

141
00:10:56.150 --> 00:10:57.560
At Index zero.

142
00:10:58.370 --> 00:10:59.900
Then it should return.

143
00:11:05.680 --> 00:11:06.400
The following.

144
00:11:06.400 --> 00:11:06.970
Great.

145
00:11:08.390 --> 00:11:08.810
Okay.

146
00:11:08.810 --> 00:11:10.370
We don't need this anymore.

147
00:11:11.970 --> 00:11:12.150
Here.

148
00:11:12.150 --> 00:11:14.400
We can just say Gray Dot, get ID.

149
00:11:15.420 --> 00:11:20.940
So now we've properly applied step one, which is to mark the data that's needed to carry out the unit

150
00:11:20.940 --> 00:11:21.510
test.

151
00:11:21.510 --> 00:11:25.860
When grade three get grades it's called, then it should return an array list.

152
00:11:25.860 --> 00:11:31.950
When grade report get grade gets called for an index of zero, then it should return the following grade.

153
00:11:32.220 --> 00:11:36.540
So now we've successfully marked the data that's needed to carry out the unit test.

154
00:11:36.990 --> 00:11:44.340
And here we're checking when grade service calls get grade index, is it actually able to get an index

155
00:11:44.340 --> 00:11:45.120
of zero?

156
00:11:45.420 --> 00:11:51.840
And then we're checking if grade service calls get grade index for an ID of 1 to 3, is it actually

157
00:11:51.840 --> 00:11:56.520
able to get a constant dot not found running our test?

158
00:11:58.900 --> 00:12:00.700
And it works out beautiful.

159
00:12:01.180 --> 00:12:06.160
So now test number three is to check if get grade by ID.

160
00:12:06.850 --> 00:12:10.270
Is returning the correct grade when you give it an ID.

161
00:12:10.690 --> 00:12:12.640
So we'll create a new test.

162
00:12:13.600 --> 00:12:20.140
We will call the test return grade by ID test.

163
00:12:20.320 --> 00:12:24.460
Step one is to mock the data that's needed to carry out this test.

164
00:12:24.460 --> 00:12:28.000
So we're just going to copy what we have over here.

165
00:12:31.480 --> 00:12:40.840
Because if you look inside of get grade by ID, it calls get grade index which in turn calls get grades

166
00:12:40.840 --> 00:12:42.270
as well as get grade.

167
00:12:42.280 --> 00:12:46.300
So we need to mock what these methods return when they are called.

168
00:12:48.060 --> 00:12:50.590
Now that we've prepared the data, the next step is to act.

169
00:12:50.610 --> 00:12:53.370
The next step is to call the method that you want to test.

170
00:12:53.400 --> 00:12:57.900
So first we're going to grab the grades ID and store it in a string variable.

171
00:12:57.930 --> 00:12:59.700
String ID is equal to grade.

172
00:13:00.030 --> 00:13:01.080
Get ID.

173
00:13:02.620 --> 00:13:10.090
Then we'll call great service dot get grade by ID and store the result in a grade variable.

174
00:13:10.570 --> 00:13:15.250
So here we'll say grade result is equal to the return value.

175
00:13:16.060 --> 00:13:22.690
The last step is to check if get grade by ID is behaving correctly and we can do that with an assertion

176
00:13:22.870 --> 00:13:30.880
we're going to use assert equals and we expect the grade that gets returned to equal the following object.

177
00:13:31.090 --> 00:13:37.600
When we pass in the following ID, we expect get grade by ID to return the correct results.

178
00:13:37.600 --> 00:13:43.510
The result that we're expecting is this grade, and we're going to see if that's the actual case.

179
00:13:48.740 --> 00:13:51.620
Nice get greyed by ID is working correctly.

180
00:13:52.880 --> 00:13:56.210
Now let's unit test our fourth method.

181
00:13:56.240 --> 00:14:01.040
We're going to check if submit grade is able to actually add a grade.

182
00:14:01.400 --> 00:14:03.770
This method contains two things to test.

183
00:14:03.800 --> 00:14:06.700
The first test is to verify the addition of a new grade.

184
00:14:06.710 --> 00:14:11.480
So like before, we're going to have to go back and create another test.

185
00:14:13.200 --> 00:14:16.320
We'll say public void.

186
00:14:17.090 --> 00:14:18.770
And grade.

187
00:14:19.600 --> 00:14:20.350
Test.

188
00:14:23.290 --> 00:14:29.110
And like before, we need to mock what get grades and get grade return so we can just use the following

189
00:14:29.110 --> 00:14:30.550
code to prepare the data.

190
00:14:32.350 --> 00:14:36.590
This test will check if submit grade calls add grade.

191
00:14:36.610 --> 00:14:38.890
If the index isn't found.

192
00:14:38.890 --> 00:14:42.240
So the next step is to call the method that you want to test.

193
00:14:42.250 --> 00:14:45.220
We're going to create a new grade that doesn't already exist.

194
00:14:45.220 --> 00:14:46.620
We'll say grade.

195
00:14:46.720 --> 00:14:47.800
New grade.

196
00:14:48.690 --> 00:14:51.450
Is equal to a new grade object.

197
00:14:51.690 --> 00:14:53.100
We'll say her mining.

198
00:14:54.850 --> 00:14:55.820
Arithmetic.

199
00:14:59.540 --> 00:15:00.410
A-plus.

200
00:15:01.320 --> 00:15:03.000
And then we'll submit the grade.

201
00:15:03.210 --> 00:15:04.560
Grade service.

202
00:15:05.370 --> 00:15:07.110
Dart submit grade.

203
00:15:08.310 --> 00:15:08.970
New grid.

204
00:15:12.180 --> 00:15:14.670
And how can we test if this works?

205
00:15:14.670 --> 00:15:19.140
How can we test if submit grade is actually calling add grade.

206
00:15:21.550 --> 00:15:25.690
The Verify assertion can verify how many times something happened.

207
00:15:25.840 --> 00:15:27.460
It accepts three arguments.

208
00:15:27.460 --> 00:15:33.280
The mock how many times you expect a mock method to be called as well as the method.

209
00:15:35.650 --> 00:15:37.840
We're going to verify that.

210
00:15:38.170 --> 00:15:44.650
Ad grade gets called at least once when we submit a new grade that doesn't exist in our data store.

211
00:15:44.860 --> 00:15:46.510
So we'll say verify.

212
00:15:47.290 --> 00:15:50.590
First you pass in your mock grade repo mock.

213
00:15:51.430 --> 00:15:54.550
We're going to check if the method gets called once.

214
00:15:55.720 --> 00:15:56.480
Time's not.

215
00:15:56.500 --> 00:15:57.460
Time out.

216
00:15:57.610 --> 00:16:03.970
The wanted number of invocations is one and we're going to check if add grade.

217
00:16:05.400 --> 00:16:08.490
New grade gets called at least once.

218
00:16:09.670 --> 00:16:10.690
Run your test.

219
00:16:12.950 --> 00:16:14.020
And it does.

220
00:16:14.030 --> 00:16:17.390
So we can rest assured that submit grade is working correctly.

221
00:16:17.390 --> 00:16:23.030
When you submit a new grade that doesn't exist inside of your data store, then it's going to call add

222
00:16:23.030 --> 00:16:23.690
grade.

223
00:16:24.140 --> 00:16:25.100
All right.

224
00:16:25.100 --> 00:16:32.480
Unit test number five is to test if submit grade is updating an existing grade.

225
00:16:33.760 --> 00:16:37.330
Like before I'm going to create another test.

226
00:16:37.840 --> 00:16:42.130
We'll say public void update grade test.

227
00:16:43.670 --> 00:16:47.030
And we can prepare the data in much the same way.

228
00:16:49.340 --> 00:16:53.330
When this gets called, we wanted to return an array list of one grade.

229
00:16:53.360 --> 00:16:56.660
When this gets called, we want it to return that same grade.

230
00:16:56.660 --> 00:17:01.340
And now step number two is to actually call the method that you want to test, the method that you're

231
00:17:01.340 --> 00:17:02.540
actually interested in.

232
00:17:02.540 --> 00:17:06.200
What we're going to do is we'll say grade service.

233
00:17:07.079 --> 00:17:11.099
Dot submit grade and we'll resubmit the grade.

234
00:17:11.099 --> 00:17:20.280
But before that we'll say grade dot set score and we'll set it equal to an A minus.

235
00:17:23.369 --> 00:17:27.380
And once again, we can verify how many times something happened.

236
00:17:27.390 --> 00:17:29.850
We're going to verify if.

237
00:17:32.270 --> 00:17:36.890
Grade repo marked update grade gets called at least once.

238
00:17:37.740 --> 00:17:40.020
So the muck is great repository.

239
00:17:42.050 --> 00:17:43.580
We're going to check.

240
00:17:43.760 --> 00:17:51.920
The wanted number of invocations is one and we're going to check if update grade for the following grade

241
00:17:51.920 --> 00:17:53.420
at index zero.

242
00:17:54.660 --> 00:17:59.340
Does this function get called when we submit an existing grade?

243
00:18:00.390 --> 00:18:01.380
Run your test.

244
00:18:03.100 --> 00:18:04.330
And it does.

245
00:18:05.820 --> 00:18:11.850
This confirms that when you pass in an existing grade and to submit grade, it calls the appropriate

246
00:18:11.850 --> 00:18:12.500
method.

247
00:18:12.510 --> 00:18:18.540
When you pass a method that doesn't exist already inside of the data store inside of submit grade,

248
00:18:18.540 --> 00:18:20.880
then it's going to call the add grade method.

249
00:18:21.120 --> 00:18:22.230
All right.

250
00:18:22.260 --> 00:18:25.410
If I were to run every single test in my class.

251
00:18:28.500 --> 00:18:34.430
They all pass, which confirms that every method inside of grade service is working correctly.

252
00:18:34.440 --> 00:18:38.820
We tested submit grade, get grade by DX, get grade index.

253
00:18:38.820 --> 00:18:43.830
We also test it gets grades which we really shouldn't have because it was really trivial.

254
00:18:43.830 --> 00:18:49.440
But anyways, we can rest assured that our application or our great service class for that matter,

255
00:18:49.440 --> 00:18:51.000
doesn't have any bugs.

256
00:18:51.420 --> 00:18:56.280
In this lesson, you wrote a unit test for every meaningful method inside of grade service.

257
00:18:56.280 --> 00:19:02.250
The passing test cases imply that our methods are behaving correctly, and we can rest assured that

258
00:19:02.250 --> 00:19:03.900
there aren't any bugs.

