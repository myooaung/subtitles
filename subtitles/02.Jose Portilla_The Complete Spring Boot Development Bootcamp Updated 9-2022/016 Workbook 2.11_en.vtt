WEBVTT
1
00:00:00.060 --> 00:00:01.950
Welcome to Workbook 2.11.

2
00:00:01.950 --> 00:00:08.970
I already went ahead and launched the Starter Project and Task one is to create a class for plain old

3
00:00:08.970 --> 00:00:10.640
Java record objects.

4
00:00:10.650 --> 00:00:16.500
The class will have three fields, so I'll go ahead and create a new class.

5
00:00:17.260 --> 00:00:29.170
Called Record Java and paste in the fields generate the typical getters and setters generate the constructor.

6
00:00:31.770 --> 00:00:32.820
Simple enough.

7
00:00:33.440 --> 00:00:35.870
Task two is before returning the view.

8
00:00:35.870 --> 00:00:38.090
Add the following objects to the model.

9
00:00:38.090 --> 00:00:41.810
So we choose to populate our model with the following data.

10
00:00:57.500 --> 00:01:01.820
Now we'll just say model dot ad attributes.

11
00:01:02.750 --> 00:01:08.870
We're going to add an attribute called the records that maps to our records array list.

12
00:01:12.030 --> 00:01:18.840
Task three is under the header and records of the HTML credit table where the first table row has headers,

13
00:01:18.840 --> 00:01:24.570
and every row that follows is generated based on what is probably a timely fluke.

14
00:01:24.960 --> 00:01:26.280
So we'll go here.

15
00:01:27.350 --> 00:01:29.000
We'll create a new table.

16
00:01:35.060 --> 00:01:37.340
That table is going to have one row.

17
00:01:39.110 --> 00:01:40.820
With three headers.

18
00:01:46.680 --> 00:01:51.120
The first header will be or four headers I should say.

19
00:01:51.210 --> 00:01:54.510
And they are item revenue, cost and profits.

20
00:01:57.850 --> 00:01:58.510
Um.

21
00:02:00.120 --> 00:02:00.870
Item.

22
00:02:01.870 --> 00:02:02.650
Revenue.

23
00:02:04.780 --> 00:02:07.810
Costs and profits.

24
00:02:08.979 --> 00:02:09.729
Sweet.

25
00:02:11.920 --> 00:02:13.800
Task Force is using a Tamiflu app.

26
00:02:13.810 --> 00:02:19.570
Your table must generate as many arrows as there are objects in their records list.

27
00:02:19.570 --> 00:02:24.370
So every table row that follows is going to be generated based on a loop.

28
00:02:25.180 --> 00:02:27.190
Here we're going to run a loop.

29
00:02:27.330 --> 00:02:35.320
Finally, each and this loop is going to run through every single record inside of the records array

30
00:02:35.320 --> 00:02:36.040
list.

31
00:02:38.350 --> 00:02:44.890
That we can grab using a variable expression, and for every record that it loops through, it's going

32
00:02:44.890 --> 00:02:46.690
to generate a table row.

33
00:02:46.690 --> 00:02:52.240
And that table row is going to have how many cells for data cells?

34
00:02:59.040 --> 00:03:05.070
Each data cell will display one of the fields of the current record that's being iterated through.

35
00:03:05.490 --> 00:03:08.280
So this data cell will display the text.

36
00:03:09.780 --> 00:03:12.840
For the record, Dot.

37
00:03:14.390 --> 00:03:17.480
Item Revenue and cost record item.

38
00:03:23.440 --> 00:03:25.360
Record revenue.

39
00:03:27.650 --> 00:03:29.780
Record cost.

40
00:03:31.730 --> 00:03:33.920
And there isn't a fourth field.

41
00:03:33.920 --> 00:03:40.070
But here it tells us that for the profit rose final leaf allows you to subtract using the minus operator.

42
00:03:40.280 --> 00:03:42.770
So here we can say leaf text.

43
00:03:47.960 --> 00:03:50.990
Record revenue minus.

44
00:03:51.860 --> 00:03:53.870
Record cost.

45
00:03:55.810 --> 00:03:56.340
Okay.

46
00:03:56.980 --> 00:03:58.030
Let's try it out.

47
00:03:58.390 --> 00:03:59.270
Is our app running?

48
00:03:59.290 --> 00:04:00.520
No, it is not.

49
00:04:19.680 --> 00:04:20.279
All right.

50
00:04:20.279 --> 00:04:25.930
We have a table with as many rows as there is data and the array list.

51
00:04:25.950 --> 00:04:29.070
Let's just give it the typical border.

52
00:04:30.630 --> 00:04:32.340
Which equals solid.

53
00:04:33.090 --> 00:04:36.210
And with equal to 100%.

54
00:04:37.140 --> 00:04:39.150
Just so that it's more legible.

55
00:04:39.750 --> 00:04:41.070
Okay, great.

56
00:04:41.460 --> 00:04:46.710
Now, in Task five, it tells us that we shouldn't use double to store currency because it carries to

57
00:04:46.710 --> 00:04:54.060
a certain precision, whereas big decimal is an exact way of representing numbers to update our class

58
00:04:54.060 --> 00:04:54.760
accordingly.

59
00:04:54.780 --> 00:05:02.250
What we can do is declare the revenue and cost as big decimals.

60
00:05:05.590 --> 00:05:07.990
And we can delete everything here.

61
00:05:08.970 --> 00:05:13.530
Regenerate our constructor getters and setters accordingly.

62
00:05:18.270 --> 00:05:18.920
Okay.

63
00:05:19.740 --> 00:05:22.890
And here it tells us to use this list instead.

64
00:05:27.510 --> 00:05:33.300
All right, make sure to import the big decimal class, and we're good.

65
00:05:33.900 --> 00:05:36.120
I think if we were to rerun our code.

66
00:05:40.200 --> 00:05:41.400
Looks a lot better.

67
00:05:43.600 --> 00:05:52.810
Now Task six tells us to find a utility method that will format the model attribute into a currency.

68
00:05:52.960 --> 00:05:57.310
So we want the revenue, cost and profit to appear as currencies.

69
00:05:58.570 --> 00:06:00.250
We'll go to the family repo.

70
00:06:01.690 --> 00:06:03.790
Look for numbers.

71
00:06:04.550 --> 00:06:07.130
And control f currency.

72
00:06:07.550 --> 00:06:13.620
We see a format currency method that we can use instead of our code.

73
00:06:13.670 --> 00:06:17.030
The method that we're going to grab is part of the numbers class.

74
00:06:17.030 --> 00:06:23.810
So since we're operating on numbers, we'll have to say numbers followed by the pound dot.

75
00:06:24.580 --> 00:06:27.520
Format currency followed by your method.

76
00:06:30.100 --> 00:06:35.950
And then you only have to pass in one thing into it, which is going to be your target.

77
00:06:36.040 --> 00:06:38.530
In this case, your model attribute.

78
00:06:40.650 --> 00:06:44.100
All right, we can do the same thing over here.

79
00:06:47.900 --> 00:06:52.610
Record cost, and I'll wrap this up in brackets.

80
00:06:53.740 --> 00:06:55.360
We'll do the same thing here.

81
00:07:04.420 --> 00:07:06.400
Go back and refresh.

82
00:07:07.890 --> 00:07:09.240
And we're looking good.

83
00:07:10.550 --> 00:07:14.660
The utility method format currency operates on our target.

84
00:07:14.660 --> 00:07:21.860
In this case, our model attribute and what it returns is a string value that is displayed thanks to

85
00:07:21.860 --> 00:07:23.360
thin leaf texts.

86
00:07:23.990 --> 00:07:25.370
All right.

87
00:07:25.760 --> 00:07:27.370
Going to task seven.

88
00:07:27.380 --> 00:07:30.600
You can use thin leaf style to format an HTML element.

89
00:07:30.620 --> 00:07:32.150
Sure, we already know that.

90
00:07:32.150 --> 00:07:38.960
And the styling we will apply as a background of green if the profit is greater than or equal to zero.

91
00:07:38.990 --> 00:07:42.230
Otherwise the background will equal red.

92
00:07:42.710 --> 00:07:43.580
All right.

93
00:07:43.580 --> 00:07:50.960
This reminds me of the ternary operator as we run through every single record in the records array list.

94
00:07:51.050 --> 00:07:59.690
A row is being generated, and the styling that that row is going to have is going to depend on a condition.

95
00:08:04.820 --> 00:08:11.180
So here we're going to say record revenue minus record cost.

96
00:08:13.550 --> 00:08:19.970
As we grab a value that derives from each record and then subtract them, we're going to compare that

97
00:08:19.970 --> 00:08:22.070
result against zero.

98
00:08:23.630 --> 00:08:31.760
If it's greater than or equal to zero, then what we're going to do is assign life style a background

99
00:08:31.760 --> 00:08:32.690
of green.

100
00:08:33.620 --> 00:08:39.169
So we're setting family style equal to a string background green.

101
00:08:43.320 --> 00:08:47.790
Otherwise we're going to set it equal to a string of background red.

102
00:08:53.630 --> 00:08:54.350
Okay.

103
00:08:57.340 --> 00:08:59.120
I think we should be good now.

104
00:09:00.910 --> 00:09:04.120
And say local host, 80, 80 and beautiful.

105
00:09:04.690 --> 00:09:05.380
All right.

106
00:09:05.380 --> 00:09:11.010
As we generate each table row, the family style is going to equal a background of green.

107
00:09:11.020 --> 00:09:17.560
If the profit is greater than zero and it's going to equal a background of red if the prophet is less

108
00:09:17.560 --> 00:09:18.370
than zero.

109
00:09:19.130 --> 00:09:21.770
This wraps up workbook 2.11.

