WEBVTT
1
00:00:00.090 --> 00:00:03.510
In this lesson, you're going to retrieve a student from your database.

2
00:00:03.510 --> 00:00:07.200
So right now I've got two rows inside of my table.

3
00:00:07.200 --> 00:00:13.320
If I want to retrieve the row that has an ID equal to one inside the primary key column, then what

4
00:00:13.320 --> 00:00:19.020
I'm going to do is say select all from the student table where the ID equals one and press run.

5
00:00:20.860 --> 00:00:25.390
And it retrieves the student that has an ID of one, a unique ID of one.

6
00:00:25.930 --> 00:00:30.850
Now, once again, we're not here to write any SQL statements instead of writing all of this, what

7
00:00:30.850 --> 00:00:39.400
I can do is go back into my code and inside of this method, say student repository, dot find by ID,

8
00:00:40.030 --> 00:00:45.160
find the record inside of our table that has this unique ID get.

9
00:00:46.020 --> 00:00:46.500
All right.

10
00:00:46.500 --> 00:00:52.860
And now inside of my rest controller, there is a handler method that intercepts a get request that

11
00:00:52.860 --> 00:00:56.760
is made on slash student with a path variable of ID.

12
00:00:56.790 --> 00:01:02.730
So whatever ID that gets passed in, we're going to use that to access a specific resource from our

13
00:01:02.730 --> 00:01:03.480
database.

14
00:01:03.480 --> 00:01:05.700
So student service dot find.

15
00:01:08.300 --> 00:01:11.060
For some reason, autocomplete is not working.

16
00:01:11.060 --> 00:01:16.430
Oh, it's get student student serviced, get student by whatever ID that gets passed in.

17
00:01:16.880 --> 00:01:17.480
All right.

18
00:01:17.480 --> 00:01:23.060
And because we made changes to our code, our app reran, which means our data store was reset.

19
00:01:23.060 --> 00:01:26.390
So let's go back and make some post requests.

20
00:01:26.390 --> 00:01:30.470
I'm going to create a new student called her Mini.

21
00:01:31.010 --> 00:01:33.650
Create a new student called Harry Potter.

22
00:01:35.010 --> 00:01:36.510
We'll just change the year.

23
00:01:37.710 --> 00:01:40.560
Press send going back over here.

24
00:01:40.560 --> 00:01:44.220
It's going to prompt me to reconnect because they reset.

25
00:01:44.820 --> 00:01:45.330
All right.

26
00:01:45.330 --> 00:01:48.420
Here we can see we've got our two records.

27
00:01:48.480 --> 00:01:54.060
If I go back here and I try to grab the student that has an ID of one.

28
00:01:55.730 --> 00:01:57.680
It sends back Hermione Granger.

29
00:02:02.640 --> 00:02:08.340
The student repository is able to successfully find the student that has this particular ID.

30
00:02:08.370 --> 00:02:11.970
It returns that student in the form of a Java object.

31
00:02:11.970 --> 00:02:19.020
And inside of our response, we're serializing that object into JSON before sending it back to the consumer.

32
00:02:19.200 --> 00:02:20.580
And that's all.

33
00:02:22.080 --> 00:02:26.910
Once again, using pure Java, we're able to talk to the database from the repository.

34
00:02:26.970 --> 00:02:33.240
Our Java code is intercepted by an object relational layer before being translated to the correct query.

35
00:02:33.600 --> 00:02:38.460
So let's try grabbing a row with an ID of two now.

36
00:02:41.010 --> 00:02:43.260
Once again, we get a successful response.

37
00:02:43.260 --> 00:02:45.000
We get back Harry Potter.

38
00:02:49.200 --> 00:02:52.350
In this lesson, you retrieved rows from the student table.

39
00:02:53.920 --> 00:03:00.280
First we retrieved a specific grow from our table using plain old SQL, but we're not here to write

40
00:03:00.310 --> 00:03:04.740
SQL statements courtesy of Spring GPUs CRUD repository.

41
00:03:04.750 --> 00:03:07.690
We can interact with our database using pure Java.

42
00:03:07.810 --> 00:03:13.900
All we had to say was fine by ID and it was able to retrieve the student with the correct ID.

