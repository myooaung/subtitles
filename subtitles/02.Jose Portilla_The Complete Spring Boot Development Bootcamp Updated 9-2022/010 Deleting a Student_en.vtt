WEBVTT
1
00:00:00.510 --> 00:00:04.110
In this lesson, you will delete a student from your database.

2
00:00:04.320 --> 00:00:10.230
So the delete methods from our cloud repository are capable of deleting data from an SQL database.

3
00:00:10.230 --> 00:00:15.780
So inside of our student service implementation, we will go to our delete function and we're just going

4
00:00:15.780 --> 00:00:22.770
to say student repository, dot, delete, buy ID and we're going to delete the record that matches

5
00:00:22.770 --> 00:00:26.370
this ID and back inside of our student controller.

6
00:00:27.100 --> 00:00:28.570
Student service.

7
00:00:29.290 --> 00:00:33.150
Delete student that matches this id oc.

8
00:00:36.010 --> 00:00:37.580
All right, let's try it out.

9
00:00:37.600 --> 00:00:44.530
I'm going to make two post requests, one for Harry and one for her Mini.

10
00:00:46.080 --> 00:00:47.970
Must change up the birth date.

11
00:00:48.510 --> 00:00:49.590
Press send.

12
00:00:49.980 --> 00:00:52.470
This will create two students.

13
00:00:56.280 --> 00:00:58.530
Let's check just to make sure.

14
00:00:58.830 --> 00:00:59.230
All right.

15
00:00:59.250 --> 00:01:01.520
Now we have two students in our database.

16
00:01:01.530 --> 00:01:03.420
Let's go ahead and delete one of them.

17
00:01:06.390 --> 00:01:09.720
This will delete a student that has an ID of one.

18
00:01:09.720 --> 00:01:15.750
That ID is going to get passed into our delete student function, which then invokes delete by ID.

19
00:01:15.780 --> 00:01:19.530
Delete the entity that has an ID of one which will be hairy.

20
00:01:19.560 --> 00:01:20.820
Let's try it out.

21
00:01:20.820 --> 00:01:22.770
Send over the delete request.

22
00:01:24.290 --> 00:01:25.610
And it deletes the record.

23
00:01:25.610 --> 00:01:27.020
That had an idea of one.

24
00:01:27.020 --> 00:01:27.890
Perfect.

25
00:01:28.610 --> 00:01:31.040
Then I will delete the row with an ID of two.

26
00:01:33.180 --> 00:01:35.100
And it's going to delete that as well.

27
00:01:38.580 --> 00:01:38.940
All right.

28
00:01:38.940 --> 00:01:43.020
Now, before we wrap up, there's actually one more request that we have to handle here.

29
00:01:43.020 --> 00:01:46.310
We have to grab every single student from our table.

30
00:01:46.320 --> 00:01:55.710
We can do that by saying student repository, dot, find all, find all, returns the more generic iterable.

31
00:01:55.740 --> 00:01:59.100
We're going to typecast that to a list of students.

32
00:02:03.110 --> 00:02:05.990
So this is going to return a list of students.

33
00:02:05.990 --> 00:02:11.270
Let's update our handler method to retrieve a list of students.

34
00:02:11.270 --> 00:02:18.320
So student service get students the list of students that were grabbing from our.

35
00:02:19.110 --> 00:02:19.590
Oh.

36
00:02:20.340 --> 00:02:21.150
That's odd.

37
00:02:21.180 --> 00:02:23.490
This should say list student.

38
00:02:30.030 --> 00:02:32.940
I will update this in your source code, don't worry.

39
00:02:32.940 --> 00:02:36.420
But essentially this is going to return a list of students.

40
00:02:36.420 --> 00:02:41.520
And as we send over this list to the consumer, it will be serialized into a JSON collection.

41
00:02:41.520 --> 00:02:48.720
So let's start actually by creating the two students that we just deleted will create a mini student.

42
00:02:49.680 --> 00:02:50.910
And Harry.

43
00:02:51.390 --> 00:02:54.600
I'll change up the age to add variety press send.

44
00:02:54.900 --> 00:03:00.090
And now here, I'm going to get every single student from our database.

45
00:03:00.480 --> 00:03:04.170
And here we get back every single student that was in our table.

46
00:03:04.470 --> 00:03:05.370
Perfect.

47
00:03:05.970 --> 00:03:10.050
So to recap, spring GPA makes it easy to interact with a database.

48
00:03:10.080 --> 00:03:14.880
Now that you know how to persist and manage data, we can start looking at relationships.

