WEBVTT
1
00:00:00.060 --> 00:00:01.560
Welcome to Workbook 3.1.

2
00:00:01.560 --> 00:00:06.120
And this workbook get to create a new project from scratch with the following dependencies.

3
00:00:06.240 --> 00:00:11.880
I already went ahead and did that, including the dev tools, web time leaf and validation dependencies.

4
00:00:11.880 --> 00:00:17.940
So now we can just jump straight into task one, which is to create a controller class with two handler

5
00:00:17.940 --> 00:00:18.750
methods.

6
00:00:18.750 --> 00:00:22.890
I'll come back to this task, by the way, I called my application Java gram.

7
00:00:22.890 --> 00:00:24.690
You can call it whatever you want.

8
00:00:24.930 --> 00:00:32.610
Then I will go and give my controller a very generic name of workbook controller dot java.

9
00:00:33.900 --> 00:00:38.280
And we will mark this as a controller class that can handle web requests.

10
00:00:38.840 --> 00:00:39.280
OC.

11
00:00:40.740 --> 00:00:43.440
First thing we ought to do is create two handler methods.

12
00:00:43.440 --> 00:00:46.830
One will respond on get requests made on an empty path.

13
00:00:46.860 --> 00:00:50.610
The other will respond to get requests made on the path result.

14
00:00:50.700 --> 00:00:58.620
Simple enough, we will map all requests made on an empty path to the following handler method.

15
00:00:58.950 --> 00:01:00.360
Public string.

16
00:01:00.360 --> 00:01:01.410
Get form.

17
00:01:02.700 --> 00:01:07.680
And what this will do is return a leaf template called Sign Up.

18
00:01:09.400 --> 00:01:13.930
And then we will map all the requests made on slash result.

19
00:01:15.440 --> 00:01:17.780
To a handler method called.

20
00:01:19.480 --> 00:01:20.590
Get results.

21
00:01:21.830 --> 00:01:26.890
But that will do as return a file leaf template called results.

22
00:01:27.700 --> 00:01:28.270
Okay.

23
00:01:28.310 --> 00:01:30.020
And that was pretty easy.

24
00:01:30.020 --> 00:01:32.450
We've done this a million times in the past.

25
00:01:32.810 --> 00:01:40.460
Task number two is it's telling us inside of our starter folder there is a font file as well as a stylesheet.

26
00:01:40.460 --> 00:01:41.660
We need to grab it.

27
00:01:41.660 --> 00:01:43.100
By the way, this is an error.

28
00:01:43.100 --> 00:01:45.170
It says to field validation.

29
00:01:45.170 --> 00:01:46.370
It should say three.

30
00:01:46.370 --> 00:01:50.300
By the time you're watching this video, it should already be fixed anyways.

31
00:01:50.300 --> 00:01:53.450
So I'll minimize the following.

32
00:01:53.720 --> 00:01:56.060
Here we see our starter folder.

33
00:01:57.710 --> 00:02:01.790
I already have a font folder created inside of static.

34
00:02:01.880 --> 00:02:06.440
I'll drag the Billabong font into it.

35
00:02:07.700 --> 00:02:13.790
And now I will drag the form stylesheet into the static folder, not the font folder.

36
00:02:15.280 --> 00:02:15.910
Okay.

37
00:02:21.760 --> 00:02:26.800
And now under the templates folder, create a sign up that HTML file and then create another family

38
00:02:26.800 --> 00:02:28.570
template called results.

39
00:02:29.020 --> 00:02:32.560
All right, we'll call this sign up.

40
00:02:34.350 --> 00:02:35.100
HTML.

41
00:02:36.710 --> 00:02:39.190
And we will call this a result.

42
00:02:40.360 --> 00:02:46.060
Dot HTML and we'll give each one the HTML boilerplate configuration.

43
00:02:47.630 --> 00:02:48.110
Okay.

44
00:02:48.380 --> 00:02:49.590
We'll start with sign up.

45
00:02:49.610 --> 00:02:50.750
What do we have to do?

46
00:02:50.780 --> 00:02:51.380
Title it.

47
00:02:51.380 --> 00:02:53.600
Sign up and link it to the stylesheet.

48
00:02:53.850 --> 00:02:55.970
Okay, let's remove all of this junk.

49
00:02:57.400 --> 00:02:58.830
We will leave the link.

50
00:02:58.840 --> 00:03:00.520
We'll remove the following.

51
00:03:01.590 --> 00:03:04.680
We will title it as sign up.

52
00:03:05.550 --> 00:03:14.520
We're going to link this HTML document to a style sheet and we'll use a ref to specify the path because

53
00:03:14.520 --> 00:03:17.610
we're going to be using a leaf link expression.

54
00:03:17.730 --> 00:03:25.860
And what this will do is start at static and then from static the path is just form stylesheet, CSS

55
00:03:26.130 --> 00:03:30.180
form style sheet, dot CSS.

56
00:03:31.360 --> 00:03:31.480
Okay.

57
00:03:31.570 --> 00:03:32.440
That's over with.

58
00:03:32.470 --> 00:03:34.060
We don't need to write any scripts.

59
00:03:34.060 --> 00:03:37.640
We can remove that, and that's all.

60
00:03:37.660 --> 00:03:38.980
What about results?

61
00:03:39.190 --> 00:03:42.250
Title it result and give it a header that says success.

62
00:03:42.280 --> 00:03:43.840
Very, very simple.

63
00:03:44.920 --> 00:03:46.630
Remove all this junk.

64
00:03:47.710 --> 00:03:49.480
Remove all this noise as well.

65
00:03:53.520 --> 00:04:01.500
I'll give this a title of result and the instructions set to give it a header that says success.

66
00:04:04.910 --> 00:04:08.120
Which I'm assuming implies the form submission was successful.

67
00:04:10.160 --> 00:04:10.270
Okay.

68
00:04:10.370 --> 00:04:13.910
Now we're going to create a DIV and link it to the CSS container class.

69
00:04:13.910 --> 00:04:18.800
And I'm assuming this div is where we're going to place our form as well as every other element that

70
00:04:18.800 --> 00:04:21.500
needs to be aligned in a certain way.

71
00:04:21.620 --> 00:04:24.020
So here we'll say div.

72
00:04:27.160 --> 00:04:32.770
And our dev is going to be designed using the CSS class container.

73
00:04:32.980 --> 00:04:37.270
It's going to be styled, I should say, and that's about it.

74
00:04:37.750 --> 00:04:40.270
Add an H two header that displays java gram.

75
00:04:40.300 --> 00:04:43.930
The CSS is already configured to use the billabong font here.

76
00:04:43.930 --> 00:04:50.260
We can see that the java gram header has been aligned in a certain way, which most likely implies it's

77
00:04:50.260 --> 00:04:51.640
inside of our div.

78
00:04:51.730 --> 00:04:53.710
So here we'll say h to.

79
00:04:55.530 --> 00:05:00.240
H two and it just says Java Gram.

80
00:05:01.840 --> 00:05:04.770
And you can see the font was already configured.

81
00:05:04.780 --> 00:05:08.680
It's referencing the Billabong font inside of our static folder.

82
00:05:08.680 --> 00:05:13.030
So it's really important that you specify fonts, not font.

83
00:05:13.060 --> 00:05:14.680
Sorry about that.

84
00:05:18.890 --> 00:05:19.690
Okay.

85
00:05:20.030 --> 00:05:21.430
And I'll learn the part.

86
00:05:21.440 --> 00:05:23.210
What does it say to create?

87
00:05:23.240 --> 00:05:24.720
Create a fonts folder.

88
00:05:24.740 --> 00:05:25.370
All right.

89
00:05:25.370 --> 00:05:28.730
I didn't follow the steps, and I almost fell into a trap.

90
00:05:28.940 --> 00:05:32.480
So this references the path fonts slash billabong.

91
00:05:32.600 --> 00:05:35.940
Make sure what you specify here reflects this path.

92
00:05:35.960 --> 00:05:38.540
Otherwise, the font will not be recognized.

93
00:05:38.780 --> 00:05:39.690
Okay.

94
00:05:39.780 --> 00:05:43.850
I think we're ready to spin up a new terminal and run our application.

95
00:05:44.480 --> 00:05:46.330
It seems I have two terminals running.

96
00:05:46.340 --> 00:05:53.690
I'll close the first one and if you ever get that error, a local host or Port 88 is already being used.

97
00:05:53.720 --> 00:05:56.330
Chances are you've got two terminals open.

98
00:05:56.330 --> 00:05:59.540
One of them's already running your app on a certain port.

99
00:05:59.540 --> 00:06:04.970
So close that other terminal and start with a clean spring boot to run.

100
00:06:15.270 --> 00:06:17.880
All right, I'll go to local host state 80.

101
00:06:21.200 --> 00:06:23.240
And this is beautiful.

102
00:06:23.270 --> 00:06:24.200
Och.

103
00:06:26.620 --> 00:06:29.560
And now task six is to create a form.

104
00:06:29.680 --> 00:06:34.540
And you might be thinking, hey, this is something that should already be provided by a frontend developer

105
00:06:34.540 --> 00:06:40.920
and I agree with you, but this might be a good chance for you to leverage the HTML cheat sheet.

106
00:06:40.930 --> 00:06:47.440
So we'll go back and start creating our form using the form tag.

107
00:06:49.430 --> 00:06:53.480
And this form is going to be making post requests.

108
00:06:53.510 --> 00:06:55.250
Method equals post.

109
00:06:55.970 --> 00:07:02.210
Och, I'll go back and what I'll do is I'm just going to copy all of these over to here so that I'm

110
00:07:02.210 --> 00:07:04.520
not constantly switching back and forth.

111
00:07:04.940 --> 00:07:09.350
First thing we got to do is create one, two, three, four inputs.

112
00:07:09.530 --> 00:07:11.630
So I'll create four inputs.

113
00:07:14.710 --> 00:07:17.240
And actually, let's just start by creating the first one.

114
00:07:17.260 --> 00:07:20.170
The first one will be type equals text.

115
00:07:20.170 --> 00:07:26.590
So it's going to be a text field with a placeholder that says first name.

116
00:07:27.500 --> 00:07:28.430
Copy this.

117
00:07:28.430 --> 00:07:29.960
Three more times.

118
00:07:29.960 --> 00:07:31.580
This will say last name.

119
00:07:32.150 --> 00:07:33.740
This will say username.

120
00:07:35.920 --> 00:07:37.510
And this will say email.

121
00:07:38.560 --> 00:07:39.280
Okay.

122
00:07:39.400 --> 00:07:44.110
Then we need to add a paragraph element with a style.

123
00:07:46.970 --> 00:07:47.870
Of bold.

124
00:07:49.530 --> 00:07:55.530
So anything inside of this is going to be bold and we will display dates of birth.

125
00:07:57.370 --> 00:08:00.640
And right under our paragraph element, we need to display a date.

126
00:08:00.640 --> 00:08:04.360
So we'll say input type is equal to date.

127
00:08:06.890 --> 00:08:08.660
And we don't need anything else.

128
00:08:08.840 --> 00:08:11.210
Produce two line breaks using the following.

129
00:08:11.210 --> 00:08:19.340
We can just put them here and then a submit button and input type equals submit.

130
00:08:21.650 --> 00:08:24.500
Value equals submit.

131
00:08:25.780 --> 00:08:31.080
This is the button that will make our post request and I think that's about it.

132
00:08:31.090 --> 00:08:38.110
We can go ahead and refresh our page and we have a nice, beautiful form where people can sign up for

133
00:08:38.110 --> 00:08:39.159
Java Gram.

134
00:08:41.240 --> 00:08:47.750
Task seven is to create a pod class for user objects with the fields that match the data provided by

135
00:08:47.750 --> 00:08:48.440
the form.

136
00:08:52.400 --> 00:08:54.590
So here I'll create a class.

137
00:08:55.520 --> 00:08:57.140
User Java.

138
00:08:57.740 --> 00:09:00.200
The user has a first name.

139
00:09:00.200 --> 00:09:02.660
Last name, username, email and date of birth.

140
00:09:04.850 --> 00:09:06.800
String first name.

141
00:09:09.040 --> 00:09:10.750
And I'll copy this over.

142
00:09:11.530 --> 00:09:13.030
This will be a last name.

143
00:09:13.880 --> 00:09:15.470
This will be username.

144
00:09:15.830 --> 00:09:17.300
This will be email.

145
00:09:18.880 --> 00:09:19.600
Dates.

146
00:09:20.590 --> 00:09:22.390
Let's import the data class.

147
00:09:23.560 --> 00:09:25.930
Date of birth.

148
00:09:26.440 --> 00:09:27.490
All right.

149
00:09:30.220 --> 00:09:30.680
Oh, yeah.

150
00:09:30.700 --> 00:09:34.630
Don't forget to add your constructor.

151
00:09:37.240 --> 00:09:39.340
Or maybe a constructor, as I should say.

152
00:09:40.370 --> 00:09:43.010
The empty constructor is just as important.

153
00:09:43.520 --> 00:09:45.650
And then we'll say the getters and setters.

154
00:09:51.670 --> 00:09:57.970
Task eight is to bind the form to an empty user object and then bind each form element to a field in

155
00:09:57.970 --> 00:09:59.560
the form backing object.

156
00:09:59.590 --> 00:10:04.840
This is needed for form submission as we have seen in the model view controller section.

157
00:10:04.960 --> 00:10:11.410
So here we can access the model from the handler methods list of parameters model model.

158
00:10:12.010 --> 00:10:15.530
Then I can say model dot add attributes.

159
00:10:15.550 --> 00:10:18.070
The attribute will be user.

160
00:10:18.070 --> 00:10:23.980
And here we're just going to create a new user object that is starts off as empty.

161
00:10:26.110 --> 00:10:34.210
And now right before we return the signup HTML template file, MIF has access to our model data.

162
00:10:34.210 --> 00:10:42.130
So here we can say finally leaf object to bind this form to an object and we're going to use a variable

163
00:10:42.130 --> 00:10:45.460
expression to grab the object from the model.

164
00:10:46.390 --> 00:10:47.410
I believe it was Yusor.

165
00:10:47.410 --> 00:10:49.720
Let me just make sure it is.

166
00:10:50.590 --> 00:10:55.710
And now each form element can bind to a field in the form backing object.

167
00:10:55.720 --> 00:10:58.450
So here we can say leaf field.

168
00:11:00.150 --> 00:11:08.940
Is equal to a selection expression because each input or each form element is able to select a field

169
00:11:08.940 --> 00:11:11.270
from the previously bound object.

170
00:11:11.280 --> 00:11:15.390
So here we can select the first name field.

171
00:11:18.790 --> 00:11:20.410
Here we can select the.

172
00:11:21.900 --> 00:11:23.250
Last name field.

173
00:11:25.600 --> 00:11:26.560
Username.

174
00:11:33.190 --> 00:11:33.940
Email.

175
00:11:42.770 --> 00:11:43.640
All right.

176
00:11:43.640 --> 00:11:49.370
And then we're going to bind this form element to the date of birth field.

177
00:11:51.140 --> 00:11:52.820
Date of birth.

178
00:11:54.100 --> 00:11:56.670
We just copy it over just to be safe.

179
00:11:58.650 --> 00:11:59.140
Okay.

180
00:12:01.590 --> 00:12:07.800
Task nine tells us that the form must submit a post request to slash submit item, then meet to create

181
00:12:07.800 --> 00:12:12.450
a handler method that intercepts this post request and redirects them to the results view.

182
00:12:12.450 --> 00:12:19.260
So upon submitting the form, we can use the leaf attribute action to make a post request and the URL

183
00:12:19.260 --> 00:12:20.850
we're going to make a post request to.

184
00:12:20.850 --> 00:12:23.190
We can specify with a link expression.

185
00:12:23.220 --> 00:12:27.990
The URL is context relative, so we can just say submit item.

186
00:12:29.670 --> 00:12:35.220
And so what happens is upon form submission, when the user inputs their first name, their last name,

187
00:12:35.220 --> 00:12:41.370
user name, email and date of birth, all that data is going to populate a field in the form backing

188
00:12:41.370 --> 00:12:42.180
object.

189
00:12:42.180 --> 00:12:46.880
And then that same data is going to be sent as part of a post request.

190
00:12:46.890 --> 00:12:53.790
And now we need a handler method that intercepts this post request so we can map the incoming post request

191
00:12:53.790 --> 00:12:55.290
using post mapping.

192
00:12:56.080 --> 00:13:01.930
Such that all post requests made on the path submit item.

193
00:13:02.890 --> 00:13:09.280
Will be handled by a handler method called handle submit.

194
00:13:11.180 --> 00:13:16.550
And as we get the Post request, we're going to receive a fully populated user object.

195
00:13:17.990 --> 00:13:20.840
Do we need to add that object to the model or anything?

196
00:13:21.260 --> 00:13:28.930
Doesn't seem like it and never told us to create a data store so we can just redirect them to the results.

197
00:13:28.940 --> 00:13:30.800
View return.

198
00:13:31.760 --> 00:13:32.780
Redirect.

199
00:13:34.020 --> 00:13:34.890
Result.

200
00:13:39.170 --> 00:13:39.750
Okay.

201
00:13:39.800 --> 00:13:44.210
I think we're ready to run our application.

202
00:13:45.950 --> 00:13:48.140
Or I guess, test our application.

203
00:13:48.350 --> 00:13:51.150
We'll just submit anything we'll say.

204
00:13:51.170 --> 00:13:51.890
Arthur.

205
00:13:52.670 --> 00:13:53.720
Pendragon.

206
00:13:54.530 --> 00:13:55.550
King Arthur.

207
00:13:57.690 --> 00:14:00.240
We'll say Arthur at Camelot dot com.

208
00:14:01.600 --> 00:14:03.370
And we'll give them a date of birth.

209
00:14:04.030 --> 00:14:10.300
I mean, this was 1500 years ago, but we'll just give him a random date of birth of January the seventh.

210
00:14:10.390 --> 00:14:11.080
All right.

211
00:14:11.080 --> 00:14:12.190
Press submit.

212
00:14:13.870 --> 00:14:18.160
And we get an error and we've already encountered this era before.

213
00:14:18.760 --> 00:14:25.900
The string value that comes back from the post request isn't consistent with the format of our date

214
00:14:25.900 --> 00:14:26.580
field.

215
00:14:26.590 --> 00:14:31.090
We've already even brake pointed this issue and the challenge section.

216
00:14:31.090 --> 00:14:36.970
So if you're confused about this error, please make sure to go back to the Global Superstore challenge.

217
00:14:36.970 --> 00:14:40.660
But ultimately all we got to do is.

218
00:14:41.850 --> 00:14:43.530
Give this a format.

219
00:14:44.800 --> 00:14:51.370
Such that its pattern matches the pattern that's given to us from the payload and the post request.

220
00:14:51.550 --> 00:14:55.480
And that would be a year, year, year, year, month, day.

221
00:15:02.010 --> 00:15:02.640
Okay.

222
00:15:07.360 --> 00:15:08.320
Let's try this again.

223
00:15:10.830 --> 00:15:13.660
Arthur Pendragon username King Arthur.

224
00:15:13.680 --> 00:15:14.730
Arthur at Camelot.

225
00:15:15.900 --> 00:15:17.670
Just pick a random date.

226
00:15:17.670 --> 00:15:18.990
Press submit.

227
00:15:19.620 --> 00:15:20.340
Beautiful.

228
00:15:21.930 --> 00:15:22.410
All right.

229
00:15:22.410 --> 00:15:27.420
And task number ten tells us using the standard annotations table from the cheat sheet, ensure that

230
00:15:27.420 --> 00:15:30.930
first and last names are not blank with at least two characters.

231
00:15:30.930 --> 00:15:38.040
And you'll remember that the at blank annotation is not the same thing as the not empty annotation.

232
00:15:38.040 --> 00:15:43.560
Because if the user would just enter white space, this would be considered blank, but it wouldn't

233
00:15:43.560 --> 00:15:49.080
be considered empty, so this annotation wouldn't be very effective for our purposes anyways.

234
00:15:49.080 --> 00:15:55.500
Going back, names cannot be blank, username cannot be blank and must be at least seven characters.

235
00:15:55.590 --> 00:15:58.920
Email must be valid and date should be in the past.

236
00:16:00.640 --> 00:16:03.670
And so I hope the table inside of the cheat sheet was useful.

237
00:16:03.700 --> 00:16:06.070
I'm just going to go ahead and rip through this.

238
00:16:06.910 --> 00:16:09.160
This should be not blank.

239
00:16:09.430 --> 00:16:13.300
The message we will give it is name.

240
00:16:14.510 --> 00:16:17.120
Cannot be blank or will be more specific.

241
00:16:17.120 --> 00:16:19.610
First name cannot be blank.

242
00:16:20.030 --> 00:16:23.920
Here will say, oh, it must at least have a size of two.

243
00:16:23.930 --> 00:16:27.500
So we'll say size men is equal to two.

244
00:16:30.410 --> 00:16:32.770
Then we'll say message is equal to.

245
00:16:34.290 --> 00:16:35.280
First name.

246
00:16:36.090 --> 00:16:37.170
Is to short.

247
00:16:38.960 --> 00:16:40.760
We will copy this over here.

248
00:16:41.710 --> 00:16:45.190
And then just say last name cannot be blank.

249
00:16:47.050 --> 00:16:48.220
The username.

250
00:16:52.000 --> 00:16:54.430
Must have at least seven characters.

251
00:16:57.720 --> 00:16:59.560
We'll say username is too short.

252
00:16:59.580 --> 00:17:01.080
This should be last name.

253
00:17:02.430 --> 00:17:04.710
A username cannot be blank.

254
00:17:06.530 --> 00:17:11.780
Now some of you might be thinking, Hey, if it's at least seven characters, how can it be blank while

255
00:17:11.780 --> 00:17:16.460
the characters they enter could just be a bunch of white space and we wouldn't want that.

256
00:17:16.910 --> 00:17:21.230
As for the email, we can just use the special email annotation.

257
00:17:25.329 --> 00:17:28.210
With message equal to.

258
00:17:28.920 --> 00:17:30.480
Invalid email.

259
00:17:33.140 --> 00:17:39.420
And the date they provide must be in the past.

260
00:17:39.440 --> 00:17:41.600
No one can have a birthday.

261
00:17:43.410 --> 00:17:44.640
That's in the future.

262
00:17:44.760 --> 00:17:48.330
Date of birth must be in the past.

263
00:17:49.670 --> 00:17:56.450
All right, let's put some space between each field so that it's more legible.

264
00:17:58.940 --> 00:18:00.230
Her name cannot be blank.

265
00:18:00.260 --> 00:18:02.000
First name is too short.

266
00:18:02.270 --> 00:18:02.840
Last name.

267
00:18:02.840 --> 00:18:03.690
Last name.

268
00:18:03.720 --> 00:18:04.240
User name.

269
00:18:04.240 --> 00:18:04.970
Username.

270
00:18:04.970 --> 00:18:05.840
Email.

271
00:18:06.980 --> 00:18:08.620
Date of birth must be in the past.

272
00:18:09.230 --> 00:18:14.880
I think now I'll be going to do is when the post request is initiated.

273
00:18:14.900 --> 00:18:19.620
This handler method is going to execute and before its logic executes.

274
00:18:19.640 --> 00:18:26.510
What it does is it creates a new user object, and as it creates this object and populates it with the

275
00:18:26.510 --> 00:18:29.990
values from the post request payload we need to validate.

276
00:18:30.750 --> 00:18:33.570
All of the fields that are being updated.

277
00:18:34.200 --> 00:18:40.140
And what's going to happen is after spring boot validates this payload.

278
00:18:40.260 --> 00:18:46.500
And what's going to happen is after spring boot validates our fields, the binding result will carry

279
00:18:46.500 --> 00:18:48.360
the result of this validation.

280
00:18:48.360 --> 00:18:49.560
Binding result.

281
00:18:49.560 --> 00:18:50.400
Result.

282
00:18:51.170 --> 00:18:58.790
It's going to keep a record of the object where the values came from, and it's going to keep a record

283
00:18:58.790 --> 00:19:01.380
of the fields that were erroneous.

284
00:19:01.400 --> 00:19:07.970
So here, right above each field, we can display a paragraph tag, and inside this paragraph tag we

285
00:19:07.970 --> 00:19:11.550
can use thin leaf to access all of these errors.

286
00:19:11.600 --> 00:19:14.330
So here we can use a selection expression.

287
00:19:15.100 --> 00:19:19.390
And what that's going to do is select the field first name.

288
00:19:20.950 --> 00:19:22.870
From the previously bound object.

289
00:19:22.870 --> 00:19:29.950
And finally, if errors will display the errors that associated with that field and I will color this

290
00:19:29.950 --> 00:19:30.440
red.

291
00:19:30.460 --> 00:19:33.700
We'll say style is equal to color red.

292
00:19:34.830 --> 00:19:39.330
And we'll just copy this across every other input.

293
00:19:45.740 --> 00:19:49.100
And should I put this on top of the paragraph tag or on top of the field?

294
00:19:49.100 --> 00:19:52.190
What did they do here on top of the field?

295
00:19:53.390 --> 00:19:56.660
So this will display the errors associated with the first name.

296
00:19:56.840 --> 00:19:59.600
This will display the areas associated with the last name.

297
00:20:00.830 --> 00:20:01.910
Username.

298
00:20:03.090 --> 00:20:03.930
Email.

299
00:20:05.210 --> 00:20:06.350
Date of birth.

300
00:20:08.470 --> 00:20:09.760
And I think we're good.

301
00:20:12.210 --> 00:20:15.270
We specified constraints for each field.

302
00:20:16.930 --> 00:20:22.690
Our valid annotation is going to use these constraints to validate each field and the user object.

303
00:20:22.690 --> 00:20:29.560
And if one of these fields violate the constraint, binding result will carry the result of the validation.

304
00:20:29.560 --> 00:20:36.880
And if there happened to be any errors while validating every field, if result has errors, then we're

305
00:20:36.880 --> 00:20:38.560
going to return the form.

306
00:20:39.950 --> 00:20:41.870
Or the sign up page, I should say.

307
00:20:44.390 --> 00:20:50.780
And as we return the sign up page file, Leif is going to have access to all of the data from the binding

308
00:20:50.780 --> 00:20:55.640
results, and it's going to grab the errors that are associated with each field.

309
00:20:55.640 --> 00:20:58.730
If there are no errors, the element just won't display.

310
00:20:58.730 --> 00:21:04.910
And if there happened to be errors associated with said field, it will display the error message in

311
00:21:04.910 --> 00:21:05.480
red.

312
00:21:06.140 --> 00:21:08.720
I think we're ready to test everything else.

313
00:21:08.930 --> 00:21:15.110
I'll go to local host 8080 and I'll leave this blank, blank, blank, blank.

314
00:21:15.350 --> 00:21:17.390
I'll enter a date in the future.

315
00:21:21.780 --> 00:21:22.290
Um.

316
00:21:22.980 --> 00:21:24.300
Not what I had in mind.

317
00:21:25.680 --> 00:21:26.640
December 20, 22.

318
00:21:26.670 --> 00:21:27.470
That's fine.

319
00:21:27.480 --> 00:21:30.990
Submit that we get first name is too short.

320
00:21:30.990 --> 00:21:32.190
Cannot be blank.

321
00:21:32.580 --> 00:21:35.070
All of the errors work as expected.

322
00:21:35.070 --> 00:21:37.170
We don't get any errors for the email.

323
00:21:37.170 --> 00:21:39.030
Let's just type an invalid email.

324
00:21:39.420 --> 00:21:40.200
Hi.

325
00:21:42.500 --> 00:21:43.250
Beautiful.

326
00:21:44.630 --> 00:21:47.350
That's it for Workbook 3.1.

327
00:21:47.360 --> 00:21:52.070
The purpose of this workbook was just for you to practice using the standard annotations that are already

328
00:21:52.070 --> 00:21:57.770
provided to you from Spring Boots and the next workbook you will practice cross field validation.

329
00:21:57.770 --> 00:21:58.580
So you soon.

