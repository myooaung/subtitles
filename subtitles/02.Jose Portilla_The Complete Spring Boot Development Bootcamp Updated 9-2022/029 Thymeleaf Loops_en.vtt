WEBVTT
1
00:00:00.580 --> 00:00:00.760
Time.

2
00:00:00.850 --> 00:00:03.430
Life loops allow you to loop through a collection.

3
00:00:04.700 --> 00:00:08.840
There are many ways that a variable expression can execute on a model attributes.

4
00:00:08.870 --> 00:00:14.690
A variable expression can be used to return a model attribute or a value that derives from it.

5
00:00:14.960 --> 00:00:18.320
It can execute a condition based on a model attributes.

6
00:00:18.350 --> 00:00:24.680
It can also be used in a loop, and it can also execute utility methods on a model attribute.

7
00:00:25.720 --> 00:00:28.480
In this lesson, we will be executing a loop.

8
00:00:32.020 --> 00:00:33.290
Let's go through the process.

9
00:00:33.310 --> 00:00:36.280
The first step is to add a grades model attribute.

10
00:00:45.790 --> 00:00:49.960
The model attribute to grades is going to map to a collection of grade objects.

11
00:00:53.930 --> 00:00:59.150
Step two is to generate a table of row for each object inside the grade's collection.

12
00:01:04.500 --> 00:01:05.940
Starting from the first row.

13
00:01:05.940 --> 00:01:08.580
Add the leaf attribute only if each.

14
00:01:12.350 --> 00:01:16.520
Finally, if each must loop through every element in the grade's collection.

15
00:01:20.210 --> 00:01:24.620
For each element that it runs through, it generates a new row.

16
00:01:38.910 --> 00:01:41.970
Step one is to add the grades attribute to the model.

17
00:01:43.700 --> 00:01:45.200
First we have to create the data.

18
00:01:45.200 --> 00:01:52.280
So inside the controller, I'm going to create an array list of great objects list that can store great

19
00:01:52.280 --> 00:01:53.240
objects.

20
00:01:59.810 --> 00:02:02.630
And I will call the variable student grades.

21
00:02:05.510 --> 00:02:08.090
Is equal to a new ArrayList.

22
00:02:16.050 --> 00:02:19.590
And now inside the Handler method, we're going to add three objects to the array list.

23
00:02:19.590 --> 00:02:22.470
We can just say student grades, dot add.

24
00:02:25.600 --> 00:02:28.480
We will start by adding this great object.

25
00:02:34.960 --> 00:02:36.160
To the array list.

26
00:02:37.760 --> 00:02:39.290
And we'll copy this.

27
00:02:39.290 --> 00:02:43.910
Two more times will add a grade for her mini.

28
00:02:45.130 --> 00:02:47.180
The subject will be arithmetic.

29
00:02:48.300 --> 00:02:49.740
We'll give her an A-plus.

30
00:02:54.650 --> 00:02:55.970
Then we'll say Neville.

31
00:02:58.670 --> 00:02:59.780
Charms.

32
00:03:00.580 --> 00:03:02.530
And we'll give him an A-minus.

33
00:03:04.530 --> 00:03:09.000
And now the attribute that we're going to add to the model will be called grades.

34
00:03:09.480 --> 00:03:14.370
And the grades key is going to map to the array list, student grades.

35
00:03:18.890 --> 00:03:19.520
And that's it.

36
00:03:19.550 --> 00:03:21.440
Now your model contains data.

37
00:03:24.240 --> 00:03:28.890
Step two is to generate a table row for each object inside grids.

38
00:03:32.580 --> 00:03:35.970
Family for each, as you may have predicted, is equal to a string.

39
00:03:37.180 --> 00:03:43.990
The variable expression grabs a collection type from the model and finally each executes a loop by iterating

40
00:03:43.990 --> 00:03:45.940
through every element in the array.

41
00:03:50.230 --> 00:03:53.090
So go to the grades HTML.

42
00:03:54.070 --> 00:03:58.750
Starting from the first data row, we're going to add the leaf attribute to each.

43
00:04:03.160 --> 00:04:10.260
And now write the following syntax grayed colon followed by a variable expression.

44
00:04:10.260 --> 00:04:14.550
The variable expression needs to grab the collection type grades from the model.

45
00:04:19.690 --> 00:04:25.180
And then what's going to happen is finally, if each is going to execute a loop by iterating through

46
00:04:25.180 --> 00:04:28.030
every single grade in the grades collection.

47
00:04:41.990 --> 00:04:45.920
And for each element that it runs through, it's going to generate a new row.

48
00:04:48.940 --> 00:04:51.580
Refresh the page and that's perfect.

49
00:04:52.710 --> 00:04:55.770
As it stands, the first row in your table contains the header.

50
00:04:58.610 --> 00:05:02.390
And every row that follows is generated using a finely loop.

51
00:05:04.860 --> 00:05:06.420
But there is a bug in the code.

52
00:05:09.620 --> 00:05:13.580
Whenever you refresh the page, it actually duplicates the rows.

53
00:05:15.060 --> 00:05:16.020
To explain this.

54
00:05:16.020 --> 00:05:17.620
I'm going to use breakpoints.

55
00:05:17.640 --> 00:05:22.530
If you're using IntelliJ, please set up breakpoints the way that I showed you in the first breakpoint

56
00:05:22.530 --> 00:05:23.160
session.

57
00:05:23.400 --> 00:05:31.200
So what I will do is add three breakpoints here and then I will run the app using the debug mode.

58
00:05:43.570 --> 00:05:46.720
Now I will go to local host 88 slash grades.

59
00:05:47.230 --> 00:05:51.580
Here it's just going to populate the student grades with three grade objects.

60
00:05:51.580 --> 00:05:52.390
That's fine.

61
00:05:55.320 --> 00:05:56.550
Three great objects.

62
00:05:56.550 --> 00:05:58.080
Then I'll just press next.

63
00:06:00.280 --> 00:06:04.330
And then they only create as many rows as there were elements in the array list.

64
00:06:07.700 --> 00:06:11.810
But if we make that same get request the local host 88 grades.

65
00:06:13.040 --> 00:06:16.640
Again the request maps to the handler method get grids.

66
00:06:17.270 --> 00:06:23.270
The array list already has three elements and now we're refilling it with the same data.

67
00:06:23.600 --> 00:06:25.040
Now as a fourth element.

68
00:06:25.040 --> 00:06:26.840
A fifth one and a sixth.

69
00:06:31.730 --> 00:06:36.980
And as you know, thin leaf is going to create as many rows as there are great elements in the grades

70
00:06:36.980 --> 00:06:37.820
array list.

71
00:06:39.720 --> 00:06:42.150
Which is why we ultimately get six rows.

72
00:06:42.510 --> 00:06:48.120
So instead of populating the array list every single time the handler method gets called, we're going

73
00:06:48.120 --> 00:06:49.890
to do it at the class level.

74
00:06:50.220 --> 00:06:54.780
So here we'll say list student grades is equal to.

75
00:06:55.630 --> 00:06:56.710
Arrays.

76
00:07:02.540 --> 00:07:04.320
Make sure you get the autocomplete right.

77
00:07:04.340 --> 00:07:07.130
Arrays dot as list.

78
00:07:10.470 --> 00:07:13.650
And here I can simply add each grade object.

79
00:07:38.020 --> 00:07:43.600
What's happening now is the student grades list is being populated with data only when the grade controller

80
00:07:43.600 --> 00:07:44.950
is first initialized.

81
00:07:46.970 --> 00:07:48.950
So if we run the application.

82
00:08:15.890 --> 00:08:18.970
So to recap in this lesson, you used a timely loop.

83
00:08:21.060 --> 00:08:27.400
First you added a model attribute that maps to a collection of great objects, and then we used a thin

84
00:08:27.450 --> 00:08:32.130
leaf each to loop through every single grade inside of the grades array list.

85
00:08:32.130 --> 00:08:37.650
And for each element that it runs through, it generates a new row with the same field values.

86
00:08:41.260 --> 00:08:47.560
And now you've looked at three out of four ways that a variable expression can execute on a model attribute.

