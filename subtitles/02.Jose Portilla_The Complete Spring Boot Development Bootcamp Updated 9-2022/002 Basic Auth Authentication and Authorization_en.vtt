WEBVTT
1
00:00:00.240 --> 00:00:05.400
Basic authentication involves two major steps authentication and authorization.

2
00:00:05.970 --> 00:00:12.240
Authentication validates the identity of a client, whereas authorization determines what they have

3
00:00:12.240 --> 00:00:13.170
access to.

4
00:00:13.800 --> 00:00:17.400
In this lesson, you will understand the process of basic auth.

5
00:00:20.450 --> 00:00:25.640
Before we get into it, let us discuss the composition of an HTTP request, which is simply composed

6
00:00:25.640 --> 00:00:27.530
of a header and a body.

7
00:00:28.340 --> 00:00:34.550
The header contains colon separated field value pairs that describe their request.

8
00:00:34.700 --> 00:00:40.520
With regards to headers, the only field we actually care about is authorization, which we need for

9
00:00:40.520 --> 00:00:41.570
basic auth.

10
00:00:42.080 --> 00:00:44.510
The body is payload that you're sending.

11
00:00:44.510 --> 00:00:48.200
The API usually included in post and put requests.

12
00:00:48.200 --> 00:00:53.720
As you have seen countless times before, the API uses the payload to create or update resources.

13
00:00:54.570 --> 00:00:57.990
All right, now let's discuss the process of basic auth and step one.

14
00:00:58.050 --> 00:01:02.040
The API requires authentication before processing a request.

15
00:01:02.430 --> 00:01:10.050
For example, our Contacts API ensures that only authenticated users may invoke the post operation.

16
00:01:11.210 --> 00:01:16.490
In step two, the client's HTTP request needs to include credentials in the header.

17
00:01:17.380 --> 00:01:20.140
The header will contain an authorisation field.

18
00:01:20.170 --> 00:01:26.020
There you have to input your username and password in order to authenticate your username and password

19
00:01:26.020 --> 00:01:28.810
will be prefaced by the word basic.

20
00:01:30.040 --> 00:01:36.640
And now let's see that your username is rain and your password is learn the part before being sent off.

21
00:01:36.640 --> 00:01:41.110
They will be encoded in a character set that is known to every computer system.

22
00:01:41.110 --> 00:01:43.510
This encoding is called base 64.

23
00:01:53.250 --> 00:01:58.770
And step three is authentication, where spring security validates the identity of the client.

24
00:01:59.190 --> 00:02:04.210
Spring security is going to validate the credentials from the header against its records.

25
00:02:04.230 --> 00:02:08.639
If there is no match, it's going to send back an error code of 401.

26
00:02:09.690 --> 00:02:14.950
You will remember that any 400 status means or indicates a faulty request.

27
00:02:14.970 --> 00:02:20.460
In this case, the client sent invalid authentication credentials and that's 401.

28
00:02:21.470 --> 00:02:27.470
But if there happens to be a match, if spring security is able to effectively validate the credentials

29
00:02:27.470 --> 00:02:31.910
against its records, then it will move to step four authorization.

30
00:02:31.940 --> 00:02:36.710
Authorization determines what the client that we just authenticated has access to.

31
00:02:37.040 --> 00:02:41.550
So after the user has been authenticated, we have verified their identity.

32
00:02:41.570 --> 00:02:46.730
Spring security will determine if the client is authorized to make that request.

33
00:02:47.120 --> 00:02:54.050
Let's assume that our API has protected the post operation such that it can only be performed by clients

34
00:02:54.050 --> 00:02:55.520
with a role of admin.

35
00:02:55.610 --> 00:03:02.330
But our client, which we just authenticated, has a role of user, so they are not authorized to perform

36
00:03:02.330 --> 00:03:03.370
this operation.

37
00:03:03.380 --> 00:03:10.550
In this case, spring security sends back a status code of 403, which means forbidden the client.

38
00:03:10.550 --> 00:03:15.920
Although they were authenticated successfully, they do not have the authority to perform the requested

39
00:03:15.920 --> 00:03:16.730
operation.

40
00:03:18.020 --> 00:03:18.440
Now.

41
00:03:18.440 --> 00:03:24.020
On the other hand, if the authenticated clients role happens to be admin, then they are authorized

42
00:03:24.020 --> 00:03:26.030
to perform the requested operation.

43
00:03:26.030 --> 00:03:27.610
And that's really it.

44
00:03:27.620 --> 00:03:29.240
The post operation works.

45
00:03:29.240 --> 00:03:35.030
They created some type of resource and it sends back a 200 status code 201 in this case.

46
00:03:35.630 --> 00:03:41.840
So to recap, basic authentication involves two major steps authentication and authorization.

47
00:03:41.960 --> 00:03:47.540
Authentication validates the identity of the client, and after the client has been authenticated,

48
00:03:47.540 --> 00:03:51.620
authorization determines if the client should be granted access.

