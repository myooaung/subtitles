WEBVTT
1
00:00:00.270 --> 00:00:03.790
Welcome to part two of the Forum Submission Challenge.

2
00:00:03.810 --> 00:00:09.210
The goal remains to implement form submission, and the first task is to populate our inventory view

3
00:00:09.210 --> 00:00:13.050
with real data, not the static data that it currently has.

4
00:00:13.050 --> 00:00:18.900
And so the first step to do that is to access the model from our handler method.

5
00:00:20.140 --> 00:00:26.640
And as soon as a call is made to slash inventory, we need to populate our model with data.

6
00:00:26.650 --> 00:00:34.240
So we'll say model, dot, add attribute and the attribute will hold a key named items.

7
00:00:34.240 --> 00:00:39.760
And this item's key is going to map to the items array list that holds all of our data.

8
00:00:40.690 --> 00:00:45.580
And so right before it returns the inventory view to the user.

9
00:00:47.860 --> 00:00:49.930
Finally if can access that model data.

10
00:00:49.930 --> 00:00:58.660
And so right here we have a row that's full of headers and every row that follows needs to be generated

11
00:00:58.660 --> 00:01:00.340
by a timely loop.

12
00:01:00.490 --> 00:01:06.640
So here we can say finally for each set that equal to a leaf expression.

13
00:01:06.640 --> 00:01:10.840
As always, we start with a variable expression.

14
00:01:11.410 --> 00:01:16.600
And what that's going to do is grab the items array list from our model.

15
00:01:17.450 --> 00:01:24.830
And if each is going to run through every single item in our items array list.

16
00:01:25.430 --> 00:01:31.460
And for each item that it runs through, it's going to generate a row of data.

17
00:01:31.760 --> 00:01:39.110
The first data cell of each row that gets generated is going to display a text that equals the category

18
00:01:39.110 --> 00:01:41.690
of the current item that's being iterated through.

19
00:01:41.720 --> 00:01:48.050
So we can grab that current item using a variable expression, and then we'll say item, not category.

20
00:01:50.860 --> 00:01:55.660
This will display the name of the item that's currently being iterated through.

21
00:01:56.050 --> 00:01:58.420
This will display the price.

22
00:01:59.420 --> 00:02:03.980
This will display the belief it's the discount.

23
00:02:05.100 --> 00:02:07.650
And this will display the date item.

24
00:02:07.650 --> 00:02:08.729
Date date.

25
00:02:09.580 --> 00:02:12.130
And this will display nothing.

26
00:02:12.130 --> 00:02:13.180
It's just the button.

27
00:02:13.660 --> 00:02:14.440
All right.

28
00:02:15.010 --> 00:02:19.180
Think we have everything we need to run our application?

29
00:02:19.190 --> 00:02:20.140
It's already running.

30
00:02:20.140 --> 00:02:22.240
Or I should say, to test our application.

31
00:02:22.720 --> 00:02:28.180
So I'll submit a coach worth 300 bucks.

32
00:02:28.180 --> 00:02:29.650
50, 99.

33
00:02:29.950 --> 00:02:31.430
We'll say May 5th.

34
00:02:33.920 --> 00:02:34.290
Beautiful.

35
00:02:34.310 --> 00:02:35.750
That worked out really well.

36
00:02:35.990 --> 00:02:38.160
Finally generates a row of data.

37
00:02:38.240 --> 00:02:44.000
Each cell in this row displays a text that corresponds to the field value of the item object that we

38
00:02:44.000 --> 00:02:44.870
submitted.

39
00:02:44.990 --> 00:02:51.770
And everything looks pretty good for the moment, except for the order dates, because what the text

40
00:02:51.770 --> 00:02:59.360
is doing is displaying the two string representation of a data object, and the two string representation

41
00:02:59.360 --> 00:03:07.550
of a data object returns a string that's been formatted in a very detailed manner, nothing very user

42
00:03:07.550 --> 00:03:08.180
friendly.

43
00:03:08.180 --> 00:03:16.430
So what we have to do is task two tells us to add another method in our project class and then using

44
00:03:16.430 --> 00:03:22.520
the same variable expression, fetch this formatted data instead so we can go ahead.

45
00:03:23.310 --> 00:03:24.600
And.

46
00:03:25.770 --> 00:03:28.260
Add this to our pod class.

47
00:03:31.320 --> 00:03:33.090
Simple date format.

48
00:03:34.630 --> 00:03:42.310
And now the point of this exercise is to make you realize that if I were to say item dot format date,

49
00:03:42.640 --> 00:03:49.990
then it would actually look for some type of getter that says get format date, get format date.

50
00:03:49.990 --> 00:03:55.780
And what that's going to do is return a string representation of our date that's been formatted to have

51
00:03:55.780 --> 00:03:58.540
the following pattern year, month and day.

52
00:04:00.360 --> 00:04:00.990
If we.

53
00:04:00.990 --> 00:04:03.000
Well, we would have to go back.

54
00:04:03.900 --> 00:04:05.640
Submit a value.

55
00:04:13.480 --> 00:04:21.130
And as predicted, the variable expression calls the get format date method of our item object.

56
00:04:21.130 --> 00:04:27.550
And what that does is return a formatted version of our date that adheres to a more user friendly format.

57
00:04:27.610 --> 00:04:33.910
Now this is nice and all, but adding this code to the back end doesn't really make much sense.

58
00:04:35.240 --> 00:04:40.250
As mentioned inside of learn the part formatting visual output based on data should be done with fine

59
00:04:40.250 --> 00:04:45.440
leaf and thankfully we have many utility methods at our disposal.

60
00:04:45.860 --> 00:04:50.180
And so what we're going to do is revert this back to being a date.

61
00:04:50.180 --> 00:04:55.070
And since the data that we're working with is a date, well, we need to do is grab a utility method

62
00:04:55.070 --> 00:04:56.960
that applies to dates.

63
00:04:56.960 --> 00:05:03.740
We can find a utility method that suits our purposes by going on to the GitHub repo that has all the

64
00:05:03.740 --> 00:05:06.290
date methods and time leaf.

65
00:05:06.620 --> 00:05:10.760
So let's find something that suits our purposes.

66
00:05:12.390 --> 00:05:13.170
You know what?

67
00:05:14.190 --> 00:05:14.880
There you go.

68
00:05:14.910 --> 00:05:15.810
Format.

69
00:05:15.840 --> 00:05:16.410
Okay, good.

70
00:05:16.410 --> 00:05:17.300
We're making progress.

71
00:05:17.310 --> 00:05:19.920
Let's look for one where we can define a pattern.

72
00:05:22.850 --> 00:05:23.750
Beautiful.

73
00:05:24.950 --> 00:05:31.850
And so now from Leaf, we can execute this utility method and format our date to return a string that

74
00:05:31.850 --> 00:05:33.920
adheres to a specific pattern.

75
00:05:34.310 --> 00:05:34.970
All right.

76
00:05:35.480 --> 00:05:36.470
First things first.

77
00:05:36.470 --> 00:05:42.350
You have to specify the pound sign, followed by what type of data are you applying utility methods

78
00:05:42.350 --> 00:05:42.950
for?

79
00:05:43.130 --> 00:05:49.040
We're going to grab the utility methods for dates, and then you have to specify the method that you're

80
00:05:49.040 --> 00:05:50.010
going to use.

81
00:05:50.030 --> 00:05:52.130
In this case, it's called format.

82
00:05:56.210 --> 00:06:01.580
The first argument is your target in this case, the model data that we're applying format on.

83
00:06:02.600 --> 00:06:05.660
That's going to be your item date.

84
00:06:06.960 --> 00:06:11.520
The second argument is the pattern you want to use to format the date.

85
00:06:11.520 --> 00:06:13.410
That pattern is going to be yea.

86
00:06:13.410 --> 00:06:13.680
Yea.

87
00:06:13.710 --> 00:06:14.520
Yea, yea.

88
00:06:14.680 --> 00:06:16.800
Month, month, day, day.

89
00:06:17.280 --> 00:06:21.890
And remember to enclose string values inside of single quotes.

90
00:06:21.900 --> 00:06:27.210
And now we have to close the following bracket, ending our final leaf expression.

91
00:06:27.900 --> 00:06:35.010
And now this function is going to return a string value that formats our date into a more user friendly

92
00:06:35.010 --> 00:06:35.700
pattern.

93
00:06:35.970 --> 00:06:37.560
Let's try this out.

94
00:06:38.400 --> 00:06:45.150
And it works just like before, except now we don't have to make any changes to our back end, so go

95
00:06:45.150 --> 00:06:46.740
ahead and remove the following.

96
00:06:48.110 --> 00:06:48.980
Beautiful.

97
00:06:51.740 --> 00:06:53.480
Do we have any other tasks?

98
00:06:54.050 --> 00:06:54.620
All right.

99
00:06:54.620 --> 00:06:59.900
Find a utility method for numbers that formats the currencies to have commas.

100
00:07:00.170 --> 00:07:03.830
I really like this exercise because it encourages us to research.

101
00:07:05.090 --> 00:07:07.460
And let's go on.

102
00:07:08.740 --> 00:07:09.820
Numbers.

103
00:07:10.750 --> 00:07:15.070
And we'll try to find something that will format our numbers into a currency.

104
00:07:16.460 --> 00:07:17.930
There must be something.

105
00:07:18.470 --> 00:07:18.830
No.

106
00:07:18.830 --> 00:07:18.990
What?

107
00:07:19.010 --> 00:07:21.290
How about we just control find currency?

108
00:07:22.310 --> 00:07:23.480
Oh, beautiful.

109
00:07:23.810 --> 00:07:29.870
So all you got to say is format currency, and it's going to format your target into a currency.

110
00:07:29.900 --> 00:07:34.010
That target is the model data that we're applying the utility method on.

111
00:07:34.760 --> 00:07:36.590
So here.

112
00:07:37.630 --> 00:07:44.080
We'll say, finally, if text is equal to a utility method, that's going to return a formatted currency

113
00:07:44.080 --> 00:07:45.580
from item price.

114
00:07:45.580 --> 00:07:47.460
So here we'll say numbers.

115
00:07:47.470 --> 00:07:50.230
The method name is format currency.

116
00:07:50.260 --> 00:07:55.690
The only argument that it expects is item price.

117
00:07:56.170 --> 00:08:02.140
And because this is already going to return a currency, we don't need to specify this.

118
00:08:03.380 --> 00:08:05.540
We don't need to specify this either.

119
00:08:06.180 --> 00:08:12.770
Oh, well, we still need to apply our utility method for it to actually return a formatted currency.

120
00:08:15.320 --> 00:08:16.280
All right.

121
00:08:17.350 --> 00:08:18.280
Looks good to me.

122
00:08:18.310 --> 00:08:19.270
Let's try it out.

123
00:08:23.220 --> 00:08:29.170
Uh, we made a change in the back end, and it restarted, so we're going to have to resubmit the data.

124
00:08:29.190 --> 00:08:35.159
And for the sake of seeing some commas, let's make this into $1 billion or however many dollars this

125
00:08:35.159 --> 00:08:43.770
is discount 5 million or whatever number this is, we'll say May 5th.

126
00:08:43.980 --> 00:08:45.300
Submit the item.

127
00:08:45.660 --> 00:08:46.800
Nice.

128
00:08:49.970 --> 00:08:50.630
OC.

129
00:08:51.960 --> 00:08:53.150
Any other tasks.

130
00:08:53.160 --> 00:08:59.310
Visualise the runtime from the get request on the home page to the post request on submit item.

131
00:08:59.400 --> 00:09:01.700
Now because this is clearly optional.

132
00:09:01.710 --> 00:09:05.820
Well, I guess everything is optional, but you don't have to stick around for this breakpoint session.

133
00:09:05.850 --> 00:09:08.490
I'm just going to go ahead and do it.

134
00:09:10.370 --> 00:09:11.510
We'll say.

135
00:09:12.370 --> 00:09:13.480
Run in debug.

136
00:09:17.450 --> 00:09:23.150
I guess we would have to be outside of the HTML view to do a debug session.

137
00:09:25.020 --> 00:09:27.900
And the breakpoints I'm going to apply.

138
00:09:29.080 --> 00:09:31.150
Will be here.

139
00:09:33.210 --> 00:09:34.140
And here.

140
00:09:38.040 --> 00:09:38.460
Okay.

141
00:09:38.460 --> 00:09:40.560
We'll say local host 8080.

142
00:09:41.700 --> 00:09:45.830
The request is intercepted get form handles the request.

143
00:09:45.830 --> 00:09:49.500
The first thing it's going to do is it's going to populate the model with data.

144
00:09:49.500 --> 00:09:55.500
It's going to add a new item object which will essentially serve as our form backing object.

145
00:09:55.800 --> 00:09:59.580
Now our model has two pieces of data.

146
00:09:59.610 --> 00:10:08.970
The item key that maps to an empty item object and a categories key that maps to an array of category

147
00:10:08.970 --> 00:10:09.750
values.

148
00:10:09.780 --> 00:10:14.250
Now just perform just before I should say the form is submitted.

149
00:10:15.570 --> 00:10:21.810
Our dropdown list is going to be populated with four options, one that says choose category and three

150
00:10:21.810 --> 00:10:26.430
options that correspond to our array of category values.

151
00:10:28.700 --> 00:10:30.860
And now as soon as we submit the form.

152
00:10:39.780 --> 00:10:43.890
Just before this happens, before the post request is initiated.

153
00:10:44.620 --> 00:10:53.740
What the forum does is because every single form element is bound to a field and the form backing object,

154
00:10:53.920 --> 00:11:00.940
the option that a user selects its value is going to update the category field of our form backing object.

155
00:11:00.940 --> 00:11:07.960
Every value that the user inputs is going to update a respective field in the form backing object and

156
00:11:07.960 --> 00:11:09.190
upon form submission.

157
00:11:09.190 --> 00:11:16.810
All the data in this object is going to be carried as payload into a post request and if we step through

158
00:11:16.810 --> 00:11:17.680
the runtime.

159
00:11:20.090 --> 00:11:26.810
Upon receiving the post request, a new item object was created and it was updated with data from the

160
00:11:26.810 --> 00:11:27.560
payload.

161
00:11:27.650 --> 00:11:33.380
Here we can see the item object being populated with values from the post request.

162
00:11:33.860 --> 00:11:39.050
This item object is going to be added to the items data stored.

163
00:11:40.800 --> 00:11:41.390
Okay.

164
00:11:41.400 --> 00:11:44.800
And now we have an array list with values.

165
00:11:44.820 --> 00:11:49.500
Then the user is redirected to make a get request on slash inventory.

166
00:11:51.250 --> 00:11:55.180
So it follows that the get inventory handler method will get called.

167
00:11:55.210 --> 00:11:59.500
It's going to add our item's array list to the model.

168
00:12:00.720 --> 00:12:03.090
Now our model has data.

169
00:12:03.120 --> 00:12:10.260
It has an items key that maps to an array list with one value and right before it returns the inventory

170
00:12:10.260 --> 00:12:10.770
view.

171
00:12:12.030 --> 00:12:18.810
It's going to generate as many rows, as many table rows as there are elements in this array list.

172
00:12:18.840 --> 00:12:25.800
There is only one element, so it's going to generate one row such that each data cell displays a value

173
00:12:25.800 --> 00:12:29.700
that corresponds to the item that was used to generate it.

174
00:12:31.500 --> 00:12:32.970
If you press next.

175
00:12:33.660 --> 00:12:34.440
Beautiful.

