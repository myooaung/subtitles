WEBVTT
1
00:00:00.300 --> 00:00:02.370
Let's talk about maven dependencies.

2
00:00:05.080 --> 00:00:08.650
By putting a few lines of XML inside of the Palm XML file.

3
00:00:08.650 --> 00:00:14.500
Spring Boot seems to just magically fetch all of the files that it needs to bootstrap a web application.

4
00:00:15.070 --> 00:00:19.180
But one should wonder, where is it actually grabbing these files from?

5
00:00:23.380 --> 00:00:27.970
In this lesson, you will learn the difference between the central maven repo versus the local maven

6
00:00:27.970 --> 00:00:28.600
repo.

7
00:00:32.060 --> 00:00:38.330
A dependency refers to a packaged library of files, i.e. jar files that your application can use.

8
00:00:42.100 --> 00:00:46.720
Now the Central Maven repository is where MAVEN downloads your dependencies from.

9
00:00:53.700 --> 00:00:56.970
The local maven repository is inside of your computer.

10
00:00:57.180 --> 00:01:02.520
Once the dependencies have been downloaded, Maven puts all of them into your local repository.

11
00:01:06.010 --> 00:01:11.080
So putting it all together when you run your application maven looks for the dependencies that it needs

12
00:01:11.080 --> 00:01:12.640
inside your local repo.

13
00:01:12.670 --> 00:01:15.220
If it finds them, it's going to use them in your project.

14
00:01:15.460 --> 00:01:19.210
Otherwise it will download the dependencies from the central maven repo.

15
00:01:20.890 --> 00:01:23.740
And then store them in the local maven repository.

16
00:01:24.340 --> 00:01:26.650
From there, your application can use them.

17
00:01:30.020 --> 00:01:32.570
So if we actually go back.

18
00:01:33.500 --> 00:01:35.510
And run your spring boot application.

19
00:01:36.750 --> 00:01:39.510
Notice that it doesn't really download anything.

20
00:01:39.510 --> 00:01:44.670
We don't see any logs that say, oh, downloading this dependency from the central maven repo.

21
00:01:44.700 --> 00:01:48.900
That's because it already downloaded all the dependencies from the previous run.

22
00:01:49.080 --> 00:01:53.970
If you're using a mac, go to your desktop and then press command shift g.

23
00:01:55.570 --> 00:02:04.120
And from here you can actually navigate to your local maven repo by going to M2 for Maven slash repository.

24
00:02:10.660 --> 00:02:13.180
If you're using windows, go to the C drive.

25
00:02:16.110 --> 00:02:17.160
Users.

26
00:02:19.050 --> 00:02:23.610
Whatever your username is, then go to the maven, the M2 repository.

27
00:02:26.820 --> 00:02:32.220
And inside of your local repository is where you'll find all of the dependencies that were downloaded

28
00:02:32.220 --> 00:02:34.050
from the Central Maven repo.

29
00:02:35.490 --> 00:02:36.660
Also a quick glance.

30
00:02:36.660 --> 00:02:38.520
We'll show you that there are many packaging types.

31
00:02:38.520 --> 00:02:43.750
There is jar wau pom rar zip, but it's not a maven core so we don't really care.

32
00:02:43.770 --> 00:02:50.310
The take home message is a Maven dependency consists of a packaged library of files that your application

33
00:02:50.310 --> 00:02:51.360
can leverage.

34
00:02:55.050 --> 00:02:56.910
You can go ahead and delete all of them.

35
00:03:02.820 --> 00:03:05.910
Now if you go back and rerun your spring boot application.

36
00:03:09.640 --> 00:03:14.290
Now it re downloads all of the maven dependencies that it needs from the central maven repo.

37
00:03:14.290 --> 00:03:19.090
You can see it says downloading from central and then it's going to store these dependencies inside

38
00:03:19.090 --> 00:03:22.360
of your local repo as it's doing right now live.

39
00:03:22.600 --> 00:03:27.520
And then from there, our application is going to use these dependencies to accomplish whatever that

40
00:03:27.520 --> 00:03:28.390
it needs to do.

41
00:03:31.990 --> 00:03:37.600
The latest dependency that we added was spring boot web, and now our application was able to effectively

42
00:03:37.600 --> 00:03:44.560
leverage the files provided from the spring web dependency to kickstart an HTTP server on Port 1990.

43
00:03:47.600 --> 00:03:53.810
So to recap, a dependency refers to a packaged library of files that your application depends on.

44
00:03:54.740 --> 00:04:00.290
When your program needs a dependency, maven first looks for it in the local repository.

45
00:04:00.440 --> 00:04:02.300
If found, it will use them.

46
00:04:02.330 --> 00:04:07.820
Otherwise it will download all of the dependencies files from the Central Maven repository and store

47
00:04:07.850 --> 00:04:09.530
them in your local repository.

48
00:04:09.530 --> 00:04:14.300
And from there your application can use the dependency to accomplish whatever it is that it needs to

49
00:04:14.300 --> 00:04:14.720
do.

