WEBVTT
1
00:00:01.040 --> 00:00:03.620
So next, we're going to be walking through the process of

2
00:00:03.620 --> 00:00:07.740
configuring autoscaling for a SageMakerâ€‘hosted endpoint.

3
00:00:07.740 --> 00:00:10.580
So here within this demo, we'll first be defining an

4
00:00:10.580 --> 00:00:13.240
autoscaling policy for a production variant.

5
00:00:13.240 --> 00:00:14.310
And then ultimately,

6
00:00:14.310 --> 00:00:18.730
we will be applying that policy to the endpoint from within the console.

7
00:00:18.730 --> 00:00:20.540
So let's dive in.

8
00:00:20.540 --> 00:00:23.400
So here I have an endpoint, and it's the same endpoint that

9
00:00:23.400 --> 00:00:26.950
we previously configured earlier within this course. And I'm

10
00:00:26.950 --> 00:00:28.940
going to select the endpoint.

11
00:00:28.940 --> 00:00:30.320
And if I scroll down,

12
00:00:30.320 --> 00:00:33.350
we're going to see that we actually have multiple production

13
00:00:33.350 --> 00:00:37.060
variants configured for this particular endpoint.

14
00:00:37.060 --> 00:00:38.760
In this case, we have two variants.

15
00:00:38.760 --> 00:00:43.220
The first has the name of Model1. The second has the name of Model2. And

16
00:00:43.220 --> 00:00:46.300
we have some slight hyperparameter differences between these two models

17
00:00:46.300 --> 00:00:48.540
that are referenced in each production variant.

18
00:00:48.540 --> 00:00:51.780
Now, at this point, we're going to be configuring autoscaling.

19
00:00:51.780 --> 00:00:56.510
Now you're going to configure autoscaling on a specific production variant.

20
00:00:56.510 --> 00:00:59.860
So in this case, I'm going to select Model1 as an example,

21
00:00:59.860 --> 00:01:04.540
and from here, I'm going to go to Configure auto scaling.

22
00:01:04.540 --> 00:01:07.760
I'll scroll to the top here, and it's first going to have us

23
00:01:07.760 --> 00:01:11.090
specify a minimum and maximum number of instances.

24
00:01:11.090 --> 00:01:13.510
Right now, we have it set at one for each.

25
00:01:13.510 --> 00:01:16.460
So even if we were to add in an autoscaling policy,

26
00:01:16.460 --> 00:01:20.140
it would never scale because we're currently at the maximum number.

27
00:01:20.140 --> 00:01:22.070
So let's say that we want to set this to be 10.

28
00:01:22.070 --> 00:01:23.900
So what this means is we could start off with one

29
00:01:23.900 --> 00:01:25.830
instance and then, depending on user demand,

30
00:01:25.830 --> 00:01:28.080
scale up to 10 instances.

31
00:01:28.080 --> 00:01:30.940
And again, this is for this one production variant.

32
00:01:30.940 --> 00:01:35.440
So from here, I'm going to scroll down, and here we get to the scaling policy.

33
00:01:35.440 --> 00:01:37.630
Now the target metric has already been set,

34
00:01:37.630 --> 00:01:40.580
and this is SageMakerVariantInvocationsPerInstance.

35
00:01:40.580 --> 00:01:41.950
And as I mentioned earlier,

36
00:01:41.950 --> 00:01:45.740
this is the metric I would recommend unless you know your

37
00:01:45.740 --> 00:01:48.010
environment well enough to know another metric that you

38
00:01:48.010 --> 00:01:50.240
would be better suited to leverage.

39
00:01:50.240 --> 00:01:51.320
Now as a reminder,

40
00:01:51.320 --> 00:01:55.040
this metric tells us the average number of times per minute

41
00:01:55.040 --> 00:01:58.540
that each instance within our endpoint for this specific

42
00:01:58.540 --> 00:02:01.470
production variant has been invoked.

43
00:02:01.470 --> 00:02:05.040
So let's say we want to set the target value here at 70. Now

44
00:02:05.040 --> 00:02:07.970
what that means is if we get above this value,

45
00:02:07.970 --> 00:02:10.590
so if each of the instances within a minute are being

46
00:02:10.590 --> 00:02:12.740
invoked on average more than 70 times,

47
00:02:12.740 --> 00:02:16.430
we could choose to have a scaling event. So this would increase

48
00:02:16.430 --> 00:02:19.990
the number of instances that we have. Now we also have the

49
00:02:19.990 --> 00:02:24.810
ability here to specify a cooldown period for both scale out, and

50
00:02:24.810 --> 00:02:26.970
that's when we add instances,

51
00:02:26.970 --> 00:02:29.670
but also for scale in, and that's when we remove

52
00:02:29.670 --> 00:02:32.340
instances when demand decreases.

53
00:02:32.340 --> 00:02:35.250
Sometimes, we want to wait for things to normalize when we

54
00:02:35.250 --> 00:02:38.280
scale before we initiate another scaling event,

55
00:02:38.280 --> 00:02:40.680
and that's what the cool down enables you to do.

56
00:02:40.680 --> 00:02:44.480
So as an example, right now we have cool down set to 300 seconds.

57
00:02:44.480 --> 00:02:46.020
So once we add a new instance,

58
00:02:46.020 --> 00:02:50.040
we're going to wait 5 minutes before we consider adding another one.

59
00:02:50.040 --> 00:02:53.300
You also have the option here to disable scale in. So if

60
00:02:53.300 --> 00:02:55.360
you simply want to grow with user demand,

61
00:02:55.360 --> 00:02:58.970
but you want to manually handle the process of decreasing instances,

62
00:02:58.970 --> 00:03:02.750
you can select this option for disable scale in. Now I'm going to

63
00:03:02.750 --> 00:03:05.130
deselect that. And once I have this in place,

64
00:03:05.130 --> 00:03:07.740
I'm going to hit Save.

65
00:03:07.740 --> 00:03:11.190
And now we can see that we have configured automatic scaling for

66
00:03:11.190 --> 00:03:14.520
our variant Model1. And so through this process,

67
00:03:14.520 --> 00:03:17.610
we've configured it to be able to launch new instances if

68
00:03:17.610 --> 00:03:25.000
we have more than 70 invocations on average per minute across each of our instances.

