1
00:00:01,040 --> 00:00:01,730
So next,

2
00:00:01,730 --> 00:00:05,650
we're going to talk about how we control user access using a

3
00:00:05,650 --> 00:00:10,040
service called IAM or Identity and Access Management.

4
00:00:10,040 --> 00:00:12,630
Now we're going to do a bit of review around some best

5
00:00:12,630 --> 00:00:15,560
practices with IAM here within this module.

6
00:00:15,560 --> 00:00:21,140
And the first best practice we need to review is least privileged access.

7
00:00:21,140 --> 00:00:22,250
And we should use this,

8
00:00:22,250 --> 00:00:23,970
whether we're doing machine learning or whether

9
00:00:23,970 --> 00:00:26,350
we're doing any other tasks on AWS.

10
00:00:26,350 --> 00:00:27,840
And at a high level,

11
00:00:27,840 --> 00:00:31,560
what this means is we're giving a user the minimum permissions that they

12
00:00:31,560 --> 00:00:34,940
need to accomplish what they need to do and no more.

13
00:00:34,940 --> 00:00:38,910
This helps us make sure that we're not granting access based on,

14
00:00:38,910 --> 00:00:40,270
well, this person's in this team,

15
00:00:40,270 --> 00:00:42,120
and we just want to give them access to everything.

16
00:00:42,120 --> 00:00:42,380
No,

17
00:00:42,380 --> 00:00:47,140
we need to scope the ability for what they can do down to only what they need.

18
00:00:47,140 --> 00:00:52,030
Now let's talk about the two different areas of responsibility for AWS IAM.

19
00:00:52,030 --> 00:00:54,460
The first is authentication,

20
00:00:54,460 --> 00:00:57,530
and authentication just validates that a user is who they say they are,

21
00:00:57,530 --> 00:01:01,560
and it usually does that by validating the credentials that they submit.

22
00:01:01,560 --> 00:01:05,440
Now the other side of IAM is authorization,

23
00:01:05,440 --> 00:01:08,550
and we'll be looking at this quite a bit because this controls what the

24
00:01:08,550 --> 00:01:11,970
users can do do once they have been authenticated.

25
00:01:11,970 --> 00:01:13,590
Now as a general note here,

26
00:01:13,590 --> 00:01:16,280
one of the things that you need to enable for your account is

27
00:01:16,280 --> 00:01:20,040
what we call MFA or multi‑factor authentication.

28
00:01:20,040 --> 00:01:23,790
This provides additional security by leveraging either a physical or

29
00:01:23,790 --> 00:01:27,140
virtual device that generates a token for login.

30
00:01:27,140 --> 00:01:30,920
Now there are ways to enforce MFA on all of the

31
00:01:30,920 --> 00:01:32,880
accounts within your AWS account,

32
00:01:32,880 --> 00:01:35,050
and I would encourage you to look at that if you're an

33
00:01:35,050 --> 00:01:38,080
individual who manages IAM for your organization.

34
00:01:38,080 --> 00:01:39,660
Now at a high level,

35
00:01:39,660 --> 00:01:43,440
there's some IAM concepts that I want to be sure that you're familiar with.

36
00:01:43,440 --> 00:01:48,070
First of all, there are three different types of identities within IAM.

37
00:01:48,070 --> 00:01:51,700
The first and probably the most logical is the user.

38
00:01:51,700 --> 00:01:56,470
So you can have a user account within IAM and within that have access to

39
00:01:56,470 --> 00:02:00,390
specific features on AWS and then not have access to others.

40
00:02:00,390 --> 00:02:03,280
Now in addition to users, we also have groups.

41
00:02:03,280 --> 00:02:08,120
And groups allow you to manage permissions for a group of IAM users.

42
00:02:08,120 --> 00:02:09,190
So, for example,

43
00:02:09,190 --> 00:02:13,310
if you have data scientists and they all need to have access to specific

44
00:02:13,310 --> 00:02:16,150
S3 buckets that have some of your organizational data,

45
00:02:16,150 --> 00:02:20,140
you could configure that with a policy on a group.

46
00:02:20,140 --> 00:02:23,530
And the next identity type is the type of a role,

47
00:02:23,530 --> 00:02:26,900
and the role enables a user or AWS service to assume

48
00:02:26,900 --> 00:02:29,610
permissions for a specific task.

49
00:02:29,610 --> 00:02:30,470
So, for example,

50
00:02:30,470 --> 00:02:34,560
we'll have roles that SageMaker can leverage so that SageMaker can perform

51
00:02:34,560 --> 00:02:39,470
actions against resources that we have in AWS. Now the way that we assign

52
00:02:39,470 --> 00:02:43,840
permissions is through the use of policies within IAM.

53
00:02:43,840 --> 00:02:46,950
And now policies are written in a JSON format,

54
00:02:46,950 --> 00:02:50,750
so that's just a JSON document that defines those permissions.

55
00:02:50,750 --> 00:02:54,480
And it defines both the services that the identity can access

56
00:02:54,480 --> 00:02:57,840
and what actions can be taken on that service.

57
00:02:57,840 --> 00:02:59,500
So it's not like, for example,

58
00:02:59,500 --> 00:03:03,720
everyone that has access to SageMaker can go in and delete endpoints.

59
00:03:03,720 --> 00:03:08,230
You can choose who has access to what actions in what service. And

60
00:03:08,230 --> 00:03:10,700
these policies can either be customer managed,

61
00:03:10,700 --> 00:03:13,520
meaning that you create them and you keep them up to

62
00:03:13,520 --> 00:03:16,750
date, or they can be managed by AWS.

63
00:03:16,750 --> 00:03:21,940
AWS has some things already in place in policies that they manage.

64
00:03:21,940 --> 00:03:25,810
Now let's look at some of the example SageMaker actions that we

65
00:03:25,810 --> 00:03:28,160
have already leveraged within this course.

66
00:03:28,160 --> 00:03:30,880
And this would be things like creating an endpoint,

67
00:03:30,880 --> 00:03:34,630
creating an endpoint config, creating a model,

68
00:03:34,630 --> 00:03:38,170
updating an endpoint, and creating a training job.

69
00:03:38,170 --> 00:03:41,150
So you need to think about the different actions

70
00:03:41,150 --> 00:03:43,840
that your users would need to take,

71
00:03:43,840 --> 00:03:48,460
and then you go through the process of defining those within a policy.

72
00:03:48,460 --> 00:03:53,170
Now here is an example policy that's going to be specific for SageMaker. And

73
00:03:53,170 --> 00:03:55,480
we can see here that there are two different statements.

74
00:03:55,480 --> 00:03:59,500
This first statement is allowing an action. We can see here

75
00:03:59,500 --> 00:04:02,370
that the effect is allow. And in this case,

76
00:04:02,370 --> 00:04:06,140
it's going to be enabling all actions for SageMaker.

77
00:04:06,140 --> 00:04:07,430
So when we look at action,

78
00:04:07,430 --> 00:04:10,990
it's going to take the format of a service and then a colon.

79
00:04:10,990 --> 00:04:15,300
And then after that colon, it's going to be the specific actions on the service.

80
00:04:15,300 --> 00:04:19,740
Now if you choose to use this asterisk in place of a specific action name,

81
00:04:19,740 --> 00:04:23,540
it will apply to all actions within that service.

82
00:04:23,540 --> 00:04:27,740
Now we're also specifying the resource that it applies to.

83
00:04:27,740 --> 00:04:31,420
So maybe you want to give a user access to a specific notebook.

84
00:04:31,420 --> 00:04:35,240
You could configure that for that resource. But in this case,

85
00:04:35,240 --> 00:04:36,480
we're using the asterisk,

86
00:04:36,480 --> 00:04:39,580
which means that this enables this, it allows it,

87
00:04:39,580 --> 00:04:42,340
for any resource within SageMaker.

88
00:04:42,340 --> 00:04:45,580
Now the next, we have a different kind of statement,

89
00:04:45,580 --> 00:04:50,210
and this enables the user to actually pass a role to an AWS

90
00:04:50,210 --> 00:04:53,560
service. For example, here, we're specifying that we want to

91
00:04:53,560 --> 00:04:56,540
be able to pass this for SageMaker.

92
00:04:56,540 --> 00:04:57,720
Now where would this apply?

93
00:04:57,720 --> 00:04:58,730
Well, for example,

94
00:04:58,730 --> 00:05:01,940
when you use a notebook instance, you're actually passing a

95
00:05:01,940 --> 00:05:06,470
role that allows that notebook instance to access services on

96
00:05:06,470 --> 00:05:09,440
AWS through that role's behalf.

97
00:05:09,440 --> 00:05:12,200
Now let's look at some best practices for how we're using.

98
00:05:12,200 --> 00:05:14,640
IAM with SageMaker.

99
00:05:14,640 --> 00:05:16,310
First of all, as mentioned earlier,

100
00:05:16,310 --> 00:05:22,440
you should define least privilege access for each user using IAM policies.

101
00:05:22,440 --> 00:05:25,030
You also should make sure that your users are leveraging

102
00:05:25,030 --> 00:05:28,440
multi‑factor authentication or MFA.

103
00:05:28,440 --> 00:05:31,860
In this case, SageMaker supports identity‑based policies,

104
00:05:31,860 --> 00:05:34,170
not resource‑based policies.

105
00:05:34,170 --> 00:05:36,460
So you're going to be defining those policies like

106
00:05:36,460 --> 00:05:38,360
we've done before based on identities.

107
00:05:38,360 --> 00:05:42,300
Now other services like Amazon S3 give you the ability

108
00:05:42,300 --> 00:05:43,970
to define resource‑based policies,

109
00:05:43,970 --> 00:05:46,940
but we're not going to be doing that here. Now one of the great

110
00:05:46,940 --> 00:05:49,250
things is you don't have to start from scratch.

111
00:05:49,250 --> 00:05:52,010
AWS has provided some sample policies within the

112
00:05:52,010 --> 00:05:59,000
documentation that are specific to different use cases you'll encounter when you're using SageMaker.

