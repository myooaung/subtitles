1
00:00:01,040 --> 00:00:02,660
So here within this module,

2
00:00:02,660 --> 00:00:06,430
we're going to be talking through how we deploy a SageMaker model.

3
00:00:06,430 --> 00:00:10,430
Let's quickly revisit the overall SageMaker process. We can start off

4
00:00:10,430 --> 00:00:12,910
with labeling our data, then building our models,

5
00:00:12,910 --> 00:00:15,570
training and tuning those models, and then ultimately

6
00:00:15,570 --> 00:00:18,140
deploying and managing our models.

7
00:00:18,140 --> 00:00:19,100
So if we look here,

8
00:00:19,100 --> 00:00:21,210
we're going to be focused here on this deployment

9
00:00:21,210 --> 00:00:23,750
section of the overall process.

10
00:00:23,750 --> 00:00:27,240
And to do that, we're going to be going through several things in this module.

11
00:00:27,240 --> 00:00:32,740
First, we're going to be examining different deployment approaches for SageMaker,

12
00:00:32,740 --> 00:00:35,180
and one of those will be reviewing the capabilities

13
00:00:35,180 --> 00:00:38,140
of batch transform for inference.

14
00:00:38,140 --> 00:00:42,430
And then, we'll be reviewing capabilities of SageMaker Hosting Services

15
00:00:42,430 --> 00:00:46,540
for inference. We'll also cover how you utilize multiple production

16
00:00:46,540 --> 00:00:50,730
variants when you're using SageMaker Hosting Services, and we'll look at

17
00:00:50,730 --> 00:00:54,240
how we actually deploy a model. We'll walk through that process on

18
00:00:54,240 --> 00:00:55,880
SageMaker Hosting Services.

19
00:00:55,880 --> 00:01:01,140
So first, let's discuss the deployment approaches that exist within SageMaker.

20
00:01:01,140 --> 00:01:03,360
And when we're talking about deployment in SageMaker,

21
00:01:03,360 --> 00:01:06,740
we're generally talking about two different approaches.

22
00:01:06,740 --> 00:01:09,190
First, we have hosting services.

23
00:01:09,190 --> 00:01:12,700
This means you're going to deploy an inference endpoint to integrate your

24
00:01:12,700 --> 00:01:16,640
inference process into an existing workflow or application.

25
00:01:16,640 --> 00:01:20,230
This is also sometimes referred to as online inference.

26
00:01:20,230 --> 00:01:22,480
Then, we have batch transform,

27
00:01:22,480 --> 00:01:25,470
and this means you're going to perform an inference job on an entire

28
00:01:25,470 --> 00:01:28,660
dataset that's already stored within Amazon S3.

29
00:01:28,660 --> 00:01:32,840
And sometimes this is referred to as an offline inference job.

30
00:01:32,840 --> 00:01:35,530
So let's look first at hosting services.

31
00:01:35,530 --> 00:01:38,140
So what are some of the use cases that exist?

32
00:01:38,140 --> 00:01:42,590
Well, if you need to deploy inference to a secure API endpoint,

33
00:01:42,590 --> 00:01:44,390
meaning you're going to integrate that end with

34
00:01:44,390 --> 00:01:48,940
data that's coming from elsewhere, hosting services can be a great place.

35
00:01:48,940 --> 00:01:51,540
And if that's into an application or workflow,

36
00:01:51,540 --> 00:01:54,220
it will totally work using this approach.

37
00:01:54,220 --> 00:01:54,750
Also,

38
00:01:54,750 --> 00:01:57,220
if you don't have all the data that you're going to need

39
00:01:57,220 --> 00:02:01,840
to perform inference on in the future, hosting services is a good solution.

40
00:02:01,840 --> 00:02:05,740
However, in some cases, batch transform makes sense.

41
00:02:05,740 --> 00:02:09,740
First of all, if you don't need that exposed endpoint for inference,

42
00:02:09,740 --> 00:02:13,270
and part of the reason you might not need it is that you already have the

43
00:02:13,270 --> 00:02:16,990
entire dataset on which you want to perform inference, or if you

44
00:02:16,990 --> 00:02:21,530
potentially need to process an incoming dataset to remove records prior to

45
00:02:21,530 --> 00:02:24,240
inference, batch transform makes sense.

46
00:02:24,240 --> 00:02:32,000
Now we're going to dive into each of these in a bit more detail, and the first one that we're going to approach is batch transform.

