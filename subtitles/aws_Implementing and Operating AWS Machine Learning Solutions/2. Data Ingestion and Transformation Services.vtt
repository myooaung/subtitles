WEBVTT
1
00:00:01.140 --> 00:00:05.380
So a big part of understanding the machine learning stack on AWS is

2
00:00:05.380 --> 00:00:08.540
understanding how you get your data into the platform,

3
00:00:08.540 --> 00:00:12.140
and that involves both data ingestion and transformation.

4
00:00:12.140 --> 00:00:14.950
So here within this module, we're going to review these services,

5
00:00:14.950 --> 00:00:18.130
and I realize many of these have been covered already in this path.

6
00:00:18.130 --> 00:00:18.680
But here,

7
00:00:18.680 --> 00:00:21.670
we're going to be focusing on understanding the specific use

8
00:00:21.670 --> 00:00:24.220
cases that fit each of these different services.

9
00:00:24.220 --> 00:00:27.740
So first, let's look at the data ingestion services.

10
00:00:27.740 --> 00:00:30.640
So here we have, first, Kinesis Data Streams.

11
00:00:30.640 --> 00:00:33.440
Then, we have Kinesis Data Firehose.

12
00:00:33.440 --> 00:00:35.210
We have Kinesis Video Streams.

13
00:00:35.210 --> 00:00:38.180
and we have Kinesis Data Analytics.

14
00:00:38.180 --> 00:00:39.940
So let's look at each of these.

15
00:00:39.940 --> 00:00:42.940
First of all, we have Kinesis Data Streams.

16
00:00:42.940 --> 00:00:45.920
Now this is a data streaming service that supports both

17
00:00:45.920 --> 00:00:49.440
massive scale and the durability of your data.

18
00:00:49.440 --> 00:00:53.170
It can actually store your data for up to 7 days Now the downside

19
00:00:53.170 --> 00:00:56.780
of using Kinesis Data Streams is that it does require manual

20
00:00:56.780 --> 00:00:59.060
shard configuration for your scaling,

21
00:00:59.060 --> 00:01:02.040
so it doesn't handle this automatically for you.

22
00:01:02.040 --> 00:01:05.360
There also can be some difficulty in calculating the exact number of

23
00:01:05.360 --> 00:01:07.670
shards that you'll need for your streaming data.

24
00:01:07.670 --> 00:01:08.630
But in this case,

25
00:01:08.630 --> 00:01:11.690
your use cases for this would include situations where you

26
00:01:11.690 --> 00:01:14.340
need data storage of your streaming data.

27
00:01:14.340 --> 00:01:17.620
You also want to be able to replay your streaming data potentially.

28
00:01:17.620 --> 00:01:21.720
And if you need your data to be as near to real time as possible,

29
00:01:21.720 --> 00:01:24.740
Kinesis Data Streams is a great fit.

30
00:01:24.740 --> 00:01:28.250
But on the flip side of this, we have Kinesis Data Firehose,

31
00:01:28.250 --> 00:01:31.060
and this takes a bit of a different approach.

32
00:01:31.060 --> 00:01:33.930
It is a fully managed data delivery solution that

33
00:01:33.930 --> 00:01:36.980
integrates in with multiple AWS services.

34
00:01:36.980 --> 00:01:40.490
Now one of the benefits of using Kinesis Data Firehose is that it

35
00:01:40.490 --> 00:01:44.240
does not require manual configuration to scale.

36
00:01:44.240 --> 00:01:47.630
Now if you do have massive scaling needs on Kinesis Data Firehose,

37
00:01:47.630 --> 00:01:50.820
you may need to talk to AWS support to be sure that

38
00:01:50.820 --> 00:01:53.140
it is set up properly for you.

39
00:01:53.140 --> 00:01:57.300
The use cases for Kinesis Data Firehose include if you need to have data

40
00:01:57.300 --> 00:02:01.940
delivered directly in to S3 or Redshift or Elasticsearch.

41
00:02:01.940 --> 00:02:05.310
Or if being near real time and not truly real time,

42
00:02:05.310 --> 00:02:08.240
if that's sufficient for you, this could be a great fit.

43
00:02:08.240 --> 00:02:12.000
Also, if you don't want to have to worry about the size of your streaming data,

44
00:02:12.000 --> 00:02:16.540
if it's somewhat unpredictable, you want to look at using Kinesis Data Firehose.

45
00:02:16.540 --> 00:02:20.040
Now the next option is Kinesis Video Streams,

46
00:02:20.040 --> 00:02:23.590
and this is a fully managed video data delivery solution that

47
00:02:23.590 --> 00:02:26.090
does integrate with several AWS services.

48
00:02:26.090 --> 00:02:27.510
And just like with Firehose,

49
00:02:27.510 --> 00:02:31.240
it does not require manual configuration for scaling.

50
00:02:31.240 --> 00:02:33.700
Now you might want to look at this if you have solutions where you

51
00:02:33.700 --> 00:02:36.740
want to do things like deliver video streams,

52
00:02:36.740 --> 00:02:37.880
maybe from an edge camera,

53
00:02:37.880 --> 00:02:40.580
maybe that's a part of a home security system or an

54
00:02:40.580 --> 00:02:42.510
industrial monitoring solution,

55
00:02:42.510 --> 00:02:47.070
and you want to be able to analyze specific frames within SageMaker or if

56
00:02:47.070 --> 00:02:50.560
you're looking to integrate in your video data with facial recognition and

57
00:02:50.560 --> 00:02:54.240
do facial tracking within Amazon Recognition.

58
00:02:54.240 --> 00:02:57.660
Now next, we have Kinesis Data Analytics,

59
00:02:57.660 --> 00:03:00.530
and this is a fully managed streaming data analytics service,

60
00:03:00.530 --> 00:03:03.090
and what it does is it gives you the ability to run

61
00:03:03.090 --> 00:03:04.990
queries against your input data.

62
00:03:04.990 --> 00:03:05.950
And very often,

63
00:03:05.950 --> 00:03:07.640
you're going to be pairing this in with either Kinesis

64
00:03:07.640 --> 00:03:10.740
Data Streams or Kinesis Data Firehose.

65
00:03:10.740 --> 00:03:14.860
Now next, let's look at the ways that we transform our data.

66
00:03:14.860 --> 00:03:17.560
So we're going to look at three different services here.

67
00:03:17.560 --> 00:03:20.070
First, we're going to look at Amazon EMR,

68
00:03:20.070 --> 00:03:23.380
and we'll see Amazon EMR show up quite a bit in this module

69
00:03:23.380 --> 00:03:26.140
because it can be used in many different ways.

70
00:03:26.140 --> 00:03:28.570
We also have AWS Glue,

71
00:03:28.570 --> 00:03:33.740
and we have a feature of Kinesis Data Firehose called Data Transform.

72
00:03:33.740 --> 00:03:36.840
So first, let's take a look at Amazon EMR.

73
00:03:36.840 --> 00:03:39.290
Now this is the big data platform for processing

74
00:03:39.290 --> 00:03:42.360
largeâ€‘scale data in the cloud on AWS.

75
00:03:42.360 --> 00:03:45.400
And it does have support for many, many different frameworks,

76
00:03:45.400 --> 00:03:50.990
including Spark and Hive and HBase and Flink and Hudi and Presto.

77
00:03:50.990 --> 00:03:53.940
And so you could do quite a bit on.EMR.

78
00:03:53.940 --> 00:03:57.550
You can even use EMR for your machine learning training and inference,

79
00:03:57.550 --> 00:04:00.740
but we'll talk more about that later within this module.

80
00:04:00.740 --> 00:04:04.990
But the next option that we have for transformation is AWS Glue.

81
00:04:04.990 --> 00:04:08.020
And this is different in that unlike EMR where you

82
00:04:08.020 --> 00:04:13.010
have to configure specific instances, this is a fully managed ETL service.

83
00:04:13.010 --> 00:04:17.140
So this acts in more of a serverless capacity than what we get with EMR.

84
00:04:17.140 --> 00:04:19.260
And it also includes the Glue Crawler,

85
00:04:19.260 --> 00:04:22.840
which can go out and discover data within our data sources,

86
00:04:22.840 --> 00:04:25.130
as well as the metadata around that.

87
00:04:25.130 --> 00:04:30.240
And this crawled data is indexed in the AWS Glue Catalog.

88
00:04:30.240 --> 00:04:35.250
Now the supported data sources for this include S3 and DynamoDB,

89
00:04:35.250 --> 00:04:36.960
and it supports both of those natively.

90
00:04:36.960 --> 00:04:43.740
but we also can get access to our database is like RDS and Redshift over JDBC.

91
00:04:43.740 --> 00:04:48.380
Now next, we have the Kinesis Data Firehose Data Transform feature,

92
00:04:48.380 --> 00:04:53.270
and this feature allows us to invoke a lambda function on our incoming

93
00:04:53.270 --> 00:04:58.040
data and then take the output of that lambda function and pass that to

94
00:04:58.040 --> 00:05:00.940
the destination for our data pipeline.

95
00:05:00.940 --> 00:05:04.210
Now this does not require configuration for it to scale.

96
00:05:04.210 --> 00:05:07.610
So this can be an advantage if you're already using Firehose and you need

97
00:05:07.610 --> 00:05:11.080
to do relatively simple transformations on your data.

98
00:05:11.080 --> 00:05:14.330
So there are some limits to using this feature.

99
00:05:14.330 --> 00:05:17.080
First of all, the invocation time is 5 minutes.

100
00:05:17.080 --> 00:05:20.940
So even though lambda can see port longer executions than this,

101
00:05:20.940 --> 00:05:23.840
the data transform feature of Kinesis Data Firehose

102
00:05:23.840 --> 00:05:26.490
will only allow you to use 5 minutes.

103
00:05:26.490 --> 00:05:27.230
In addition,

104
00:05:27.230 --> 00:05:35.000
both the input and output payload limit for this lambda function that need to be set at 6MB.

