WEBVTT
1
00:00:00.006 --> 00:00:03.008
- We are developers and as developers, we like

2
00:00:03.008 --> 00:00:07.000
to test things first in a local environment.

3
00:00:07.000 --> 00:00:09.003
In this video, I'm going to show you how

4
00:00:09.003 --> 00:00:13.006
to use AWS toolkit to run and deploy Lambda

5
00:00:13.006 --> 00:00:16.009
to local machine and to the cloud.

6
00:00:16.009 --> 00:00:20.002
Make sure you have App class, open.

7
00:00:20.002 --> 00:00:24.001
Notice a Lambda icon, left of the class name.

8
00:00:24.001 --> 00:00:28.002
Here, we have the option to Run or Debug our Lambda.

9
00:00:28.002 --> 00:00:30.001
Let's choose Run.

10
00:00:30.001 --> 00:00:33.002
Runtime is already set as Handler.

11
00:00:33.002 --> 00:00:36.000
We need to set class and the method name,

12
00:00:36.000 --> 00:00:40.004
but since App class implements request handler interface,

13
00:00:40.004 --> 00:00:43.009
it is enough to have just class name.

14
00:00:43.009 --> 00:00:48.001
Timeout is the amount of time that Lambda allows a function

15
00:00:48.001 --> 00:00:50.007
to run before stopping it.

16
00:00:50.007 --> 00:00:53.007
We will set it to 10 seconds.

17
00:00:53.007 --> 00:00:56.002
Since Java is memory hungry,

18
00:00:56.002 --> 00:00:59.003
we will give it around one gigabyte of RAM.

19
00:00:59.003 --> 00:01:01.007
You also need to give it some input.

20
00:01:01.007 --> 00:01:04.006
Since this is accepting JSON object,

21
00:01:04.006 --> 00:01:09.001
we will just add empty brackets and click Run.

22
00:01:09.001 --> 00:01:11.007
So what it is doing now,

23
00:01:11.007 --> 00:01:15.004
it is running the Lambda function locally.

24
00:01:15.004 --> 00:01:19.002
The way this is done is it downloads a local image,

25
00:01:19.002 --> 00:01:23.000
runs the container, mimics the Lambda runtime for us,

26
00:01:23.000 --> 00:01:24.002
And then it says,

27
00:01:24.002 --> 00:01:28.007
"Hey go run that Lambda function in that container."

28
00:01:28.007 --> 00:01:31.008
And here we see the output, which is hello world,

29
00:01:31.008 --> 00:01:35.006
with the IP address of my local machine.

30
00:01:35.006 --> 00:01:39.002
Next let's do the deployments to the cloud.

31
00:01:39.002 --> 00:01:41.009
There are two ways we can do that.

32
00:01:41.009 --> 00:01:45.009
First one is from AWS Explorer.

33
00:01:45.009 --> 00:01:49.006
We need to navigate to AWS Explorer,

34
00:01:49.006 --> 00:01:53.008
choose Lambda, right-click and choose,

35
00:01:53.008 --> 00:01:57.003
Create new Lambda function.

36
00:01:57.003 --> 00:02:02.000
Let's give it a name: Hello world from IntelliJ.

37
00:02:02.000 --> 00:02:04.008
So we can differentiate it from deployment,

38
00:02:04.008 --> 00:02:07.006
we will do through the web console.

39
00:02:07.006 --> 00:02:12.007
We will set runtime, memory and timeout the same as we did

40
00:02:12.007 --> 00:02:22.006
for our local setup.

41
00:02:22.006 --> 00:02:26.003
Our Lambda needs permission to access AWS services

42
00:02:26.003 --> 00:02:27.002
and resources.

43
00:02:27.002 --> 00:02:30.003
So here we either need to choose existing

44
00:02:30.003 --> 00:02:32.002
or create a new role.

45
00:02:32.002 --> 00:02:35.009
But how do we know which permissions to add?

46
00:02:35.009 --> 00:02:38.000
Well, don't worry,

47
00:02:38.000 --> 00:02:41.000
as this Wizard will create an IAM role

48
00:02:41.000 --> 00:02:44.001
with minimal permissions for executions,

49
00:02:44.001 --> 00:02:48.000
which are permissions to send logs to Amazon CloudWatch

50
00:02:48.000 --> 00:02:53.007
and upload trace data to AWS X-Ray.

51
00:02:53.007 --> 00:02:55.003
We can enable X-Ray

52
00:02:55.003 --> 00:02:58.007
to analyze performance issues when running.

53
00:02:58.007 --> 00:03:02.006
Next thing, we need to provide is S3 buckets.

54
00:03:02.006 --> 00:03:04.002
Why is that?

55
00:03:04.002 --> 00:03:05.008
This is the S3 bucket,

56
00:03:05.008 --> 00:03:09.008
SAM is going to Deploy the deployment package to,

57
00:03:09.008 --> 00:03:12.007
after it builds your function.

58
00:03:12.007 --> 00:03:14.008
And it should be in the same region

59
00:03:14.008 --> 00:03:17.001
as your Lambda function.

60
00:03:17.001 --> 00:03:20.004
As an option, we can set SAM to build your function

61
00:03:20.004 --> 00:03:22.003
in a Docker container.

62
00:03:22.003 --> 00:03:25.008
This is useful if the function depends on packages

63
00:03:25.008 --> 00:03:31.007
that have natively compiled dependencies or programs.

64
00:03:31.007 --> 00:03:34.006
Now click, Create Function.

65
00:03:34.006 --> 00:03:36.008
It will Run everything for us,

66
00:03:36.008 --> 00:03:40.005
and the function will be there in the cloud.

67
00:03:40.005 --> 00:03:44.008
In the background, SAM CLI packages our zip,

68
00:03:44.008 --> 00:03:47.002
uploads it to S3 bucket.

69
00:03:47.002 --> 00:03:50.003
Then it says using that S3 bucket,

70
00:03:50.003 --> 00:03:56.003
"I'm going to run this function, using this IAM role."

71
00:03:56.003 --> 00:03:58.003
The function is created.

72
00:03:58.003 --> 00:04:02.000
Now we can right-click, Run,

73
00:04:02.000 --> 00:04:08.001
again provide some inputs and Run.

74
00:04:08.001 --> 00:04:10.003
And as you can see from the logs,

75
00:04:10.003 --> 00:04:14.006
we were able to invoke this function remotely.

76
00:04:14.006 --> 00:04:17.006
Another way, we could Run and Deploy is

77
00:04:17.006 --> 00:04:21.003
by using SAM template or infrastructure as a code

78
00:04:21.003 --> 00:04:24.002
from AWS cloud formation.

79
00:04:24.002 --> 00:04:28.001
Well, our hello world application already came

80
00:04:28.001 --> 00:04:32.002
with the SAM template.YAML file.

81
00:04:32.002 --> 00:04:35.009
So all infrastructure components we defined

82
00:04:35.009 --> 00:04:38.000
in Wizard are already here

83
00:04:38.000 --> 00:04:42.002
from the Lambda specific configuration to the IAM role.

84
00:04:42.002 --> 00:04:43.005
And on the top of that,

85
00:04:43.005 --> 00:04:47.001
we also have the API gateway configuration

86
00:04:47.001 --> 00:04:51.008
that exposes our service with a REST API.

87
00:04:51.008 --> 00:04:55.006
Let's run deployment from here.

88
00:04:55.006 --> 00:05:00.001
First thing we need to do is define a cloud formation stack.

89
00:05:00.001 --> 00:05:04.000
A stack is a collection of AWS resources

90
00:05:04.000 --> 00:05:08.006
that you can manage as a single unit.

91
00:05:08.006 --> 00:05:13.002
In our case, that would be function, IAM role

92
00:05:13.002 --> 00:05:15.006
and an API gateway.

93
00:05:15.006 --> 00:05:20.003
This time, the SAM CLI is building inside the container.

94
00:05:20.003 --> 00:05:27.000
Click on Deploy.

95
00:05:27.000 --> 00:05:29.007
After some time, you should see events

96
00:05:29.007 --> 00:05:33.008
regarding research creation, list of all resources

97
00:05:33.008 --> 00:05:35.005
and the output.

98
00:05:35.005 --> 00:05:39.005
From the output, we can copy API gateway.

99
00:05:39.005 --> 00:05:42.009
Since it doesn't require any authentication,

100
00:05:42.009 --> 00:05:49.001
we can invoke it straight from the browser.

101
00:05:49.001 --> 00:05:54.000
And now our Lambda is also accessible as a REST service.

