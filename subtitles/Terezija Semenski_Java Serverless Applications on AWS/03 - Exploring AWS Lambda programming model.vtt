WEBVTT
1
00:00:00.006 --> 00:00:04.002
- [Instructor] Let's take a closer look at AWS Lambda,

2
00:00:04.002 --> 00:00:07.008
which is Amazon's function as a service platform.

3
00:00:07.008 --> 00:00:12.001
Simply put, a lambda function is the packaging of your code

4
00:00:12.001 --> 00:00:16.005
that executes every time it is triggered by an event.

5
00:00:16.005 --> 00:00:19.007
It can be written in many different languages.

6
00:00:19.007 --> 00:00:21.007
You can bundle any libraries

7
00:00:21.007 --> 00:00:24.008
or dependencies that the code needs.

8
00:00:24.008 --> 00:00:28.000
A function is executed with Windows Runtime,

9
00:00:28.000 --> 00:00:30.008
provided by AWS.

10
00:00:30.008 --> 00:00:33.003
You have the option to choose amongst six

11
00:00:33.003 --> 00:00:36.004
different runtimes in different versions

12
00:00:36.004 --> 00:00:40.003
that are paired with the Amazon Linux distribution.

13
00:00:40.003 --> 00:00:41.006
For example,

14
00:00:41.006 --> 00:00:45.007
Java comes in with three different Java runtimes.

15
00:00:45.007 --> 00:00:47.005
However, what if we wanted

16
00:00:47.005 --> 00:00:50.001
to use a different language or version?

17
00:00:50.001 --> 00:00:51.004
In that case,

18
00:00:51.004 --> 00:00:56.002
you will want to look at AWS Lambda custom runtimes.

19
00:00:56.002 --> 00:01:00.001
Runtime is responsible for running the function setup code

20
00:01:00.001 --> 00:01:04.007
and reading the input data from lambda runtime API.

21
00:01:04.007 --> 00:01:08.007
Runtime passes these events to the function main method

22
00:01:08.007 --> 00:01:13.005
called handler, which returns back the response to lambda,

23
00:01:13.005 --> 00:01:16.000
which is sent back to the caller.

24
00:01:16.000 --> 00:01:18.004
For each runtime, you have the option

25
00:01:18.004 --> 00:01:22.000
to select how much memory is allocated.

26
00:01:22.000 --> 00:01:27.005
From 128 megabytes all the way through 10 gigabytes,

27
00:01:27.005 --> 00:01:30.008
which also controls how much CPU power

28
00:01:30.008 --> 00:01:33.005
your code will have access to.

29
00:01:33.005 --> 00:01:38.005
For example, at 1,769 megabytes,

30
00:01:38.005 --> 00:01:43.005
a function has the equivalent of one full virtual CPU.

31
00:01:43.005 --> 00:01:47.003
And it's 10 gigabyte, six virtual CPUs.

32
00:01:47.003 --> 00:01:50.003
Why not always use the highest memory?

33
00:01:50.003 --> 00:01:53.009
Well you could, but you might get surprised

34
00:01:53.009 --> 00:01:56.004
with high bills at the end of the month.

35
00:01:56.004 --> 00:01:58.006
Lambda costs are calculated

36
00:01:58.006 --> 00:02:02.001
based on the number of requests for a function

37
00:02:02.001 --> 00:02:06.002
and the duration it takes for your code to execute.

38
00:02:06.002 --> 00:02:08.008
But the price increases proportionally

39
00:02:08.008 --> 00:02:13.001
on the amount of memory you allocate to the function.

40
00:02:13.001 --> 00:02:14.005
Does it mean you need to stick

41
00:02:14.005 --> 00:02:16.009
to the lowest amount of memory?

42
00:02:16.009 --> 00:02:19.005
Well, with the lowest memory,

43
00:02:19.005 --> 00:02:22.003
your function might run slower.

44
00:02:22.003 --> 00:02:27.005
Therefore impacting cost as they're calculated by duration.

45
00:02:27.005 --> 00:02:29.008
How do you know what to pick?

46
00:02:29.008 --> 00:02:33.001
well, you need to do your own testing.

47
00:02:33.001 --> 00:02:38.000
Or even better, you can do that with AWS Power Tuning

48
00:02:38.000 --> 00:02:42.006
to find the balance between the speed and the cost.

49
00:02:42.006 --> 00:02:45.000
Once we have our lambda deployed,

50
00:02:45.000 --> 00:02:49.009
lambda servers is ready and waiting for an event to arrive.

51
00:02:49.009 --> 00:02:51.009
But what is an event?

52
00:02:51.009 --> 00:02:55.001
The event is a request that contains the data

53
00:02:55.001 --> 00:02:57.009
for your function to process.

54
00:02:57.009 --> 00:03:00.009
When an event is received by lambda,

55
00:03:00.009 --> 00:03:04.006
then your code starts its execution.

56
00:03:04.006 --> 00:03:07.004
When the function code finishes running,

57
00:03:07.004 --> 00:03:10.001
it can handle another request.

58
00:03:10.001 --> 00:03:11.004
In case your function

59
00:03:11.004 --> 00:03:14.005
gets more than one request at a time,

60
00:03:14.005 --> 00:03:17.006
lambda will take care of scaling your code

61
00:03:17.006 --> 00:03:21.005
by launching another micro virtual machine.

62
00:03:21.005 --> 00:03:25.004
If your functional receives 100 concurrent requests,

63
00:03:25.004 --> 00:03:31.001
lambda will spin up 100 micro virtual machines for you.

64
00:03:31.001 --> 00:03:34.009
There are multiple ways to invoke your lambda function.

65
00:03:34.009 --> 00:03:37.006
You can configure multiple triggers

66
00:03:37.006 --> 00:03:40.007
to invoke your lambda function in response

67
00:03:40.007 --> 00:03:45.005
to lifecycle events, external requests, or schedule.

68
00:03:45.005 --> 00:03:48.001
Events could be something such as the upload

69
00:03:48.001 --> 00:03:51.000
of a document to S3 bucket.

70
00:03:51.000 --> 00:03:55.003
You can configure lambda to receive and process the object.

71
00:03:55.003 --> 00:03:58.004
For external requests, the most common way

72
00:03:58.004 --> 00:04:02.002
is when someone makes an HTTP request

73
00:04:02.002 --> 00:04:05.005
to a specific endpoint on the API gateway.

74
00:04:05.005 --> 00:04:08.006
You lambda function gets invoked.

75
00:04:08.006 --> 00:04:12.002
If you want to read and process items, for example,

76
00:04:12.002 --> 00:04:15.007
SQS queue or DynamoDB streams,

77
00:04:15.007 --> 00:04:18.008
you don't need to write the code to pull that.

78
00:04:18.008 --> 00:04:22.003
Instead, you can use event source mapping.

79
00:04:22.003 --> 00:04:24.001
You can configure mapping

80
00:04:24.001 --> 00:04:27.005
so AWS Lambda will pull those items

81
00:04:27.005 --> 00:04:30.009
and send them to your function in batches.

82
00:04:30.009 --> 00:04:33.005
Invoking your lambda function can be done

83
00:04:33.005 --> 00:04:37.001
either with a synchronous or asynchronous call,

84
00:04:37.001 --> 00:04:40.005
depending on if you want to send a response

85
00:04:40.005 --> 00:04:42.003
from a code or not.

86
00:04:42.003 --> 00:04:45.002
For most threats, API operations,

87
00:04:45.002 --> 00:04:47.006
the client will want a response.

88
00:04:47.006 --> 00:04:51.008
So it makes sense to use synchronous execution.

89
00:04:51.008 --> 00:04:54.009
In the case of a long latency operation,

90
00:04:54.009 --> 00:04:58.001
it would make sense to use async operations.

91
00:04:58.001 --> 00:05:01.008
And use another mechanism to inform the client

92
00:05:01.008 --> 00:05:06.000
if the operation failed or were successful.

