WEBVTT
1
00:00:00.006 --> 00:00:02.006
- Now that we know different ways

2
00:00:02.006 --> 00:00:04.001
to customize our handler

3
00:00:04.001 --> 00:00:07.004
method signature let's jump in and

4
00:00:07.004 --> 00:00:11.001
create a couple of different examples.

5
00:00:11.001 --> 00:00:13.003
We can use the same project and

6
00:00:13.003 --> 00:00:19.009
create a new class called custom inputs.

7
00:00:19.009 --> 00:00:22.000
Keep in mind that it is always the

8
00:00:22.000 --> 00:00:23.006
best practice to create a

9
00:00:23.006 --> 00:00:26.003
new project with all new required

10
00:00:26.003 --> 00:00:28.003
classes and dependencies

11
00:00:28.003 --> 00:00:30.006
to minimize cold start.

12
00:00:30.006 --> 00:00:33.002
Imagine you want to create a lambda

13
00:00:33.002 --> 00:00:35.001
that calculates average

14
00:00:35.001 --> 00:00:37.007
from the list of numbers.

15
00:00:37.007 --> 00:00:40.004
Here, we can create a new method,

16
00:00:40.004 --> 00:00:43.009
public double handler that accepts the

17
00:00:43.009 --> 00:00:51.006
list of integers and returns the double.

18
00:00:51.006 --> 00:00:53.006
We can write a four loop,

19
00:00:53.006 --> 00:00:56.008
but what I like is to use streams to

20
00:00:56.008 --> 00:01:00.005
simply calculate the average.

21
00:01:00.005 --> 00:01:04.002
And now we just need to return an average.

22
00:01:04.002 --> 00:01:05.007
As you can see,

23
00:01:05.007 --> 00:01:09.001
there is no option to debug or run locally,

24
00:01:09.001 --> 00:01:13.008
as it is not recognized by AWS toolkit.

25
00:01:13.008 --> 00:01:17.005
Why? Well because AWS toolkit

26
00:01:17.005 --> 00:01:22.001
only recognizes requests handle interfaces.

27
00:01:22.001 --> 00:01:27.001
Next, let's navigate to AWS Explorer.

28
00:01:27.001 --> 00:01:31.006
Right click on create Lambda.

29
00:01:31.006 --> 00:01:33.001
Give it a name.

30
00:01:33.001 --> 00:01:36.006
For handler we now need to specify the

31
00:01:36.006 --> 00:01:40.000
package and the handler method.

32
00:01:40.000 --> 00:01:42.004
If we have used the request handler,

33
00:01:42.004 --> 00:01:46.007
then defining class name would have been enough.

34
00:01:46.007 --> 00:01:50.005
Here we can set the same configuration as we did

35
00:01:50.005 --> 00:01:53.000
for other functions.

36
00:01:53.000 --> 00:01:59.009
And click on create function.

37
00:01:59.009 --> 00:02:04.002
Once deployed, we can run the test.

38
00:02:04.002 --> 00:02:07.002
We need to provide a list of integers.

39
00:02:07.002 --> 00:02:11.006
Click on okay.

40
00:02:11.006 --> 00:02:15.000
And there we got an average number.

41
00:02:15.000 --> 00:02:16.007
Let's do another one.

42
00:02:16.007 --> 00:02:19.005
Imagine we need to write a program that

43
00:02:19.005 --> 00:02:20.007
counts the number of

44
00:02:20.007 --> 00:02:23.001
occurrences of a list.

45
00:02:23.001 --> 00:02:26.004
Let's create an interface that accepts a

46
00:02:26.004 --> 00:02:27.008
list of strings

47
00:02:27.008 --> 00:02:30.001
that could represent users,

48
00:02:30.001 --> 00:02:31.003
and as a result,

49
00:02:31.003 --> 00:02:36.006
return map of users and their occurrences.

50
00:02:36.006 --> 00:02:39.005
To update the function go back to the same

51
00:02:39.005 --> 00:02:42.005
function in AWS Explorer.

52
00:02:42.005 --> 00:02:50.003
Right-click and click on update function code.

53
00:02:50.003 --> 00:02:52.006
Now click back on modify,

54
00:02:52.006 --> 00:02:55.009
run configuration to update the request

55
00:02:55.009 --> 00:02:57.009
with the list of strings.

56
00:02:57.009 --> 00:03:00.007
We will provide a list of users.

57
00:03:00.007 --> 00:03:05.008
Let me copy paste an example request

58
00:03:05.008 --> 00:03:13.002
And run our function.

59
00:03:13.002 --> 00:03:15.007
We can see that as an output we get back

60
00:03:15.007 --> 00:03:20.007
a hash map with a number of occurrences.

61
00:03:20.007 --> 00:03:24.007
Let's do one more example with custom POJO.

62
00:03:24.007 --> 00:03:27.002
Here's an example of Jason object

63
00:03:27.002 --> 00:03:29.003
we want to capture based on

64
00:03:29.003 --> 00:03:31.007
temperature and humidity.

65
00:03:31.007 --> 00:03:36.005
We want to know if it is cold or hot.

66
00:03:36.005 --> 00:03:39.008
We already have weather data class with

67
00:03:39.008 --> 00:03:41.003
default constructor

68
00:03:41.003 --> 00:03:42.002
and getters and setters.

69
00:03:42.002 --> 00:03:44.007
In the method body,

70
00:03:44.007 --> 00:03:47.004
we will do some simple logic and return back

71
00:03:47.004 --> 00:03:52.006
arbitrary description as a feeling.

72
00:03:52.006 --> 00:03:54.009
Now we can deploy our code in the

73
00:03:54.009 --> 00:03:58.008
same way as before.

74
00:03:58.008 --> 00:04:01.002
We can either create new or

75
00:04:01.002 --> 00:04:15.004
add the existing function.

76
00:04:15.004 --> 00:04:18.001
Let also create a new request.

77
00:04:18.001 --> 00:04:20.005
We will copy paste weather data

78
00:04:20.005 --> 00:04:28.003
in Jason form and click run.

79
00:04:28.003 --> 00:04:29.008
And it works.

80
00:04:29.008 --> 00:04:32.008
We don't get any de serialization errors

81
00:04:32.008 --> 00:04:34.009
because AWS Lander

82
00:04:34.009 --> 00:04:37.002
run time is just going to ignore

83
00:04:37.002 --> 00:04:39.000
the parts we don't need.

