WEBVTT
1
00:00:00.006 --> 00:00:02.007
- [Instructor] When Lambda is executed,

2
00:00:02.007 --> 00:00:07.001
it always passes some input and returns the output.

3
00:00:07.001 --> 00:00:11.001
In this lesson, we will cover various inputs and outputs

4
00:00:11.001 --> 00:00:13.008
to and from your Lambda function.

5
00:00:13.008 --> 00:00:15.007
As you have already seen,

6
00:00:15.007 --> 00:00:19.003
every Lambda function requires a handler method

7
00:00:19.003 --> 00:00:21.007
that processes events.

8
00:00:21.007 --> 00:00:24.006
The events can come in different shapes and forms,

9
00:00:24.006 --> 00:00:29.004
and this is where customizing inputs makes sense.

10
00:00:29.004 --> 00:00:31.006
In the hello world example,

11
00:00:31.006 --> 00:00:36.001
the event was mapped to API specific request object

12
00:00:36.001 --> 00:00:41.004
that comes from the AWS SDK.

13
00:00:41.004 --> 00:00:43.009
The Lambda runtime receives an event

14
00:00:43.009 --> 00:00:50.003
as JSON format stream and converts it into an object.

15
00:00:50.003 --> 00:00:53.003
If you define your own input's type,

16
00:00:53.003 --> 00:00:56.006
each should be a deserializable, mutable,

17
00:00:56.006 --> 00:00:59.006
plain old Java object, POJO,

18
00:00:59.006 --> 00:01:02.009
with the default constructor and properties

19
00:01:02.009 --> 00:01:05.006
for each field in the event.

20
00:01:05.006 --> 00:01:07.005
As an input, optionally,

21
00:01:07.005 --> 00:01:10.000
we can include a context object,

22
00:01:10.000 --> 00:01:15.000
which is out of field by AWS Lambda execution environment,

23
00:01:15.000 --> 00:01:20.001
which provides information about the invocation.

24
00:01:20.001 --> 00:01:25.002
Finally, the output type can be an object or void.

25
00:01:25.002 --> 00:01:29.001
Void type makes sense for asynchronous invocation,

26
00:01:29.001 --> 00:01:30.003
but for synchronous,

27
00:01:30.003 --> 00:01:34.000
it definitely makes sense to have a return type.

28
00:01:34.000 --> 00:01:38.000
The runtime serializes return values into text.

29
00:01:38.000 --> 00:01:41.000
If the output is an object with fields,

30
00:01:41.000 --> 00:01:45.005
the runtime serializes it into a JSON document.

31
00:01:45.005 --> 00:01:48.004
Other inputs types are primitive types,

32
00:01:48.004 --> 00:01:50.007
they can be out of box.

33
00:01:50.007 --> 00:01:56.000
For example, for Boolean, also string false works,

34
00:01:56.000 --> 00:01:58.007
plain string we have already seen,

35
00:01:58.007 --> 00:02:01.004
maps and lists with custom types

36
00:02:01.004 --> 00:02:05.003
and finally input streams.

37
00:02:05.003 --> 00:02:07.008
When it comes to handler signature,

38
00:02:07.008 --> 00:02:13.001
we can use AWS Lambda core libraries, request handler,

39
00:02:13.001 --> 00:02:15.004
which works with generic types,

40
00:02:15.004 --> 00:02:18.009
and request stream handler interface.

41
00:02:18.009 --> 00:02:22.000
For request stream handler interface,

42
00:02:22.000 --> 00:02:25.003
Lambda passes your handler and input stream

43
00:02:25.003 --> 00:02:26.009
and output stream.

44
00:02:26.009 --> 00:02:30.000
The handler reads bytes from the input stream,

45
00:02:30.000 --> 00:02:34.002
writes to an output stream and returns void.

46
00:02:34.002 --> 00:02:36.008
Benefit of using those handlers

47
00:02:36.008 --> 00:02:40.007
is they provide validation during compile time.

48
00:02:40.007 --> 00:02:44.007
And also, AWS toolkit gives us the ability

49
00:02:44.007 --> 00:02:48.003
to run and debug functions locally.

50
00:02:48.003 --> 00:02:53.009
However, we are not required to use any of these interfaces.

51
00:02:53.009 --> 00:02:56.009
We could use function interface from Java

52
00:02:56.009 --> 00:03:02.006
or don't use any interface at all and it'll still work.

53
00:03:02.006 --> 00:03:06.002
What is important once we want to deploy our function

54
00:03:06.002 --> 00:03:08.007
is to set the handler parameter

55
00:03:08.007 --> 00:03:14.003
on our functions configuration.

56
00:03:14.003 --> 00:03:16.004
We need to provide package,

57
00:03:16.004 --> 00:03:20.008
class and method name of our handler, or in case,

58
00:03:20.008 --> 00:03:24.002
when a function is implementing handler interfaces,

59
00:03:24.002 --> 00:03:27.000
we can skip the method name.

