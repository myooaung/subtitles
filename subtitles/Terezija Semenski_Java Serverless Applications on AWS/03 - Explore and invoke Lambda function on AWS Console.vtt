WEBVTT
1
00:00:00.007 --> 00:00:03.005
- [Instructor] So far, we use the AWS Toolkit

2
00:00:03.005 --> 00:00:07.003
to do a lot of tedious work of deploying and invoking

3
00:00:07.003 --> 00:00:11.002
our Lambda functions, but it is also good to know

4
00:00:11.002 --> 00:00:14.002
what is happening behind the scenes.

5
00:00:14.002 --> 00:00:17.007
Moreover, automation tools can fail,

6
00:00:17.007 --> 00:00:21.001
so it's always useful to be aware of other methods

7
00:00:21.001 --> 00:00:23.005
to manage Lambda functions.

8
00:00:23.005 --> 00:00:27.008
So let's look into the web console.

9
00:00:27.008 --> 00:00:34.000
You need to search for the Lambda section.

10
00:00:34.000 --> 00:00:37.004
Let's explore how our deployment has been reflected,

11
00:00:37.004 --> 00:00:40.004
and how we can trigger our Lambda application

12
00:00:40.004 --> 00:00:42.005
on AWS Console.

13
00:00:42.005 --> 00:00:45.005
Make sure you're logged into the same region

14
00:00:45.005 --> 00:00:49.003
you also used in IntelliJ.

15
00:00:49.003 --> 00:00:52.007
What you can see is we have two functions,

16
00:00:52.007 --> 00:00:56.002
one deployed with IntelliJ toolkit wizard,

17
00:00:56.002 --> 00:01:00.008
where we manually specified runtime, memory and time out,

18
00:01:00.008 --> 00:01:04.008
and another one that came from the SAM template.

19
00:01:04.008 --> 00:01:07.002
We can also track the SAM template

20
00:01:07.002 --> 00:01:12.002
by clicking on Applications.

21
00:01:12.002 --> 00:01:15.001
The Applications page is a list of artifacts

22
00:01:15.001 --> 00:01:19.000
that have deployed using infrastructure as code,

23
00:01:19.000 --> 00:01:22.009
CloudFormation, in our case, through SAM.

24
00:01:22.009 --> 00:01:26.003
Back in the Functions, let's open the function

25
00:01:26.003 --> 00:01:32.002
that we deployed with SAM template.

26
00:01:32.002 --> 00:01:35.003
Notice that the parts from the Lambda function.

27
00:01:35.003 --> 00:01:38.002
We also have a link to the API Gateway,

28
00:01:38.002 --> 00:01:41.002
which, in this case, is the trigger.

29
00:01:41.002 --> 00:01:46.001
For the API Gateway we can see its endpoint type,

30
00:01:46.001 --> 00:01:49.004
type of authorization, and it is available

31
00:01:49.004 --> 00:01:52.000
under /hellopath.

32
00:01:52.000 --> 00:01:56.003
Also, if you go directly to the API Gateway configuration,

33
00:01:56.003 --> 00:01:59.004
we can see all the details about integration

34
00:01:59.004 --> 00:02:02.007
with our Lambda function.

35
00:02:02.007 --> 00:02:05.008
Back in the Lambda function, we can also change

36
00:02:05.008 --> 00:02:08.005
the configuration for pretty much anything

37
00:02:08.005 --> 00:02:13.000
we have initially defined and much more.

38
00:02:13.000 --> 00:02:19.000
But how do we deploy a new, or upload an existing function?

39
00:02:19.000 --> 00:02:21.005
Well, before we can do anything,

40
00:02:21.005 --> 00:02:25.000
we need to create a deployment package.

41
00:02:25.000 --> 00:02:28.007
Lambda supports two types of deployment packages,

42
00:02:28.007 --> 00:02:33.000
container images and .zip file archives.

43
00:02:33.000 --> 00:02:35.001
This package needs to hold

44
00:02:35.001 --> 00:02:39.001
both compiled classes with its dependencies.

45
00:02:39.001 --> 00:02:42.005
If you're working with Gradle, the buildZip task

46
00:02:42.005 --> 00:02:46.003
compiles classes and copies all dependencies

47
00:02:46.003 --> 00:02:50.005
to live directory, all packaged between ZIP file.

48
00:02:50.005 --> 00:02:54.003
But, when working with Maven, we need classes

49
00:02:54.003 --> 00:02:57.007
and dependencies packaged into single JAR file

50
00:02:57.007 --> 00:02:59.008
called Uber JAR.

51
00:02:59.008 --> 00:03:03.005
For that, we will use the Maven Shade plugin,

52
00:03:03.005 --> 00:03:07.008
which is already configured in the build section.

53
00:03:07.008 --> 00:03:17.006
Let's make a small change in our output.

54
00:03:17.006 --> 00:03:20.002
When we execute the Maven package

55
00:03:20.002 --> 00:03:24.005
Maven will compile our code, and we'll run the Shade plugin

56
00:03:24.005 --> 00:03:30.003
to build the Uber JAR file.

57
00:03:30.003 --> 00:03:36.003
We can find this JAR file in the target directory.

58
00:03:36.003 --> 00:03:50.004
Let's go back to the web console and upload a new version.

59
00:03:50.004 --> 00:03:54.006
Now that the new version is deployed, we can test it.

60
00:03:54.006 --> 00:03:58.008
If we click on Test tab, we have a bunch of event templates

61
00:03:58.008 --> 00:04:02.001
with various JSON structures.

62
00:04:02.001 --> 00:04:04.001
We can ignore this for now,

63
00:04:04.001 --> 00:04:12.009
and, again, provide an empty JSON object and trigger it.

64
00:04:12.009 --> 00:04:16.007
So after we hit Test, in a few seconds,

65
00:04:16.007 --> 00:04:18.004
you should get a success message

66
00:04:18.004 --> 00:04:22.002
together with the new updated text.

67
00:04:22.002 --> 00:04:26.005
If it does, congratulations, you successfully packaged

68
00:04:26.005 --> 00:04:30.000
and uploaded a new version of Lambda function.

