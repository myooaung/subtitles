WEBVTT
1
00:00:00.006 --> 00:00:03.005
- Error handling is critical to ensure the

2
00:00:03.005 --> 00:00:06.004
application is functioning properly.

3
00:00:06.004 --> 00:00:08.006
In this video, we're going to cover

4
00:00:08.006 --> 00:00:10.005
different topics around error

5
00:00:10.005 --> 00:00:13.004
handling in the Lambda platform.

6
00:00:13.004 --> 00:00:16.009
We can split Lambda errors in two categories.

7
00:00:16.009 --> 00:00:19.007
First category is function errors.

8
00:00:19.007 --> 00:00:23.000
Those are errors that appear within the code.

9
00:00:23.000 --> 00:00:27.000
The other type of errors are invocation errors.

10
00:00:27.000 --> 00:00:29.000
Invocation errors occur when the

11
00:00:29.000 --> 00:00:32.004
invocation request is rejected before your

12
00:00:32.004 --> 00:00:34.007
function receives it.

13
00:00:34.007 --> 00:00:37.000
Common function errors would be,

14
00:00:37.000 --> 00:00:39.004
exceptions that are not captured and

15
00:00:39.004 --> 00:00:42.004
are thrown out of the handler function.

16
00:00:42.004 --> 00:00:46.001
Runtime terminated because it ran out of time.

17
00:00:46.001 --> 00:00:48.003
Detected syntax error

18
00:00:48.003 --> 00:00:52.000
or failed to deserialize object to JSON.

19
00:00:52.000 --> 00:00:55.005
Common invocation errors are Requests,

20
00:00:55.005 --> 00:00:58.004
requests too large or invalid JSON and

21
00:00:58.004 --> 00:01:01.008
function doesn't exist or parameter value

22
00:01:01.008 --> 00:01:05.005
is in wrong type. Caller, user or service

23
00:01:05.005 --> 00:01:08.002
doesn't have permissions to invoke the

24
00:01:08.002 --> 00:01:12.001
function. Account, maximum number of

25
00:01:12.001 --> 00:01:14.006
function instances are already running or

26
00:01:14.006 --> 00:01:18.004
requests are made too quickly.

27
00:01:18.004 --> 00:01:20.007
The full list of invocation errors with their

28
00:01:20.007 --> 00:01:24.001
their codes can be found in AWS

29
00:01:24.001 --> 00:01:27.007
developer's guide under invocation.

30
00:01:27.007 --> 00:01:30.007
Each error is serialized to JSON,

31
00:01:30.007 --> 00:01:33.008
giving information on error message,

32
00:01:33.008 --> 00:01:37.001
error type, stackTrace, and the cause

33
00:01:37.001 --> 00:01:38.007
of an error, in case there are

34
00:01:38.007 --> 00:01:42.002
nested exceptions. In Java for functional

35
00:01:42.002 --> 00:01:46.000
errors, if you're using existing AWS handler

36
00:01:46.000 --> 00:01:50.002
interface, we can just use runtime exceptions.

37
00:01:50.002 --> 00:01:53.001
Otherwise we are also free to declare

38
00:01:53.001 --> 00:01:55.008
exceptions in our method.

39
00:01:55.008 --> 00:01:58.003
How can we handle such errors?

40
00:01:58.003 --> 00:02:01.007
In most cases, we will be using rest operations

41
00:02:01.007 --> 00:02:05.002
to see end result in synchronous call.

42
00:02:05.002 --> 00:02:07.006
Calling an application or client

43
00:02:07.006 --> 00:02:10.005
receives an error and is responsible for

44
00:02:10.005 --> 00:02:13.003
handling such errors programmatically.

45
00:02:13.003 --> 00:02:16.007
There are cases where Lambda can be invoked

46
00:02:16.007 --> 00:02:18.001
us in Kronos sleep.

47
00:02:18.001 --> 00:02:21.009
For example, for long running operations, or if

48
00:02:21.009 --> 00:02:26.005
Lambda is invoked from AWS as three events.

49
00:02:26.005 --> 00:02:29.003
In such cases, events are placed in a

50
00:02:29.003 --> 00:02:33.005
queue before being sent to the function.

51
00:02:33.005 --> 00:02:35.007
In case an error occurred, Lambda

52
00:02:35.007 --> 00:02:39.001
platform gives us an couple of options.

53
00:02:39.001 --> 00:02:42.006
We can set retry policies by specifying the

54
00:02:42.006 --> 00:02:46.001
amount of retries and maximum age

55
00:02:46.001 --> 00:02:48.008
and afterwards putting them to dead letter

56
00:02:48.008 --> 00:02:51.009
queues, which allow us to apply some

57
00:02:51.009 --> 00:02:56.003
custom logic to process such messages.

58
00:02:56.003 --> 00:02:59.000
You can also configure Lambda to send

59
00:02:59.000 --> 00:03:02.001
an invocation record to another service

60
00:03:02.001 --> 00:03:06.005
by using destinations. Lambda destinations

61
00:03:06.005 --> 00:03:10.005
not only allows you to configure a destination

62
00:03:10.005 --> 00:03:13.006
when an Asynchronous invocation didn't work,

63
00:03:13.006 --> 00:03:16.002
but it also allows it to configure it

64
00:03:16.002 --> 00:03:19.002
when the function code succeeded.

65
00:03:19.002 --> 00:03:21.004
For example, you can configure

66
00:03:21.004 --> 00:03:25.002
messages to be sent to Amazon SQS,

67
00:03:25.002 --> 00:03:31.002
a standard SQS queue, Amazon SNS and SNS topic.

68
00:03:31.002 --> 00:03:35.004
AWS Lambda, a Lambda function and Amazon

69
00:03:35.004 --> 00:03:40.000
EventBridge, EventBridge EventBus.

