WEBVTT
1
00:00:00.000 --> 00:00:02.006
- [narrator} The best way to start learning

2
00:00:02.006 --> 00:00:05.009
is to write your first service application.

3
00:00:05.009 --> 00:00:09.006
I'm going to show you how to use the AWS toolkit

4
00:00:09.006 --> 00:00:12.008
for IntelliJ to create Lambda function

5
00:00:12.008 --> 00:00:14.008
on your local machine.

6
00:00:14.008 --> 00:00:18.004
Before we start make sure you have Java 11

7
00:00:18.004 --> 00:00:20.007
installed and Maven,

8
00:00:20.007 --> 00:00:24.007
which have been already packaged with IntelliJ.

9
00:00:24.007 --> 00:00:26.001
Click on file,

10
00:00:26.001 --> 00:00:28.002
new project.

11
00:00:28.002 --> 00:00:33.002
Choose AWS and AWS service application.

12
00:00:33.002 --> 00:00:34.007
Click next.

13
00:00:34.007 --> 00:00:36.008
Now give it the name.

14
00:00:36.008 --> 00:00:39.008
Let's call it "Hello world."

15
00:00:39.008 --> 00:00:44.008
We have two options, either zip package or an image.

16
00:00:44.008 --> 00:00:48.009
The zip file contains the code and any libraries that we

17
00:00:48.009 --> 00:00:51.009
will include as dependencies.

18
00:00:51.009 --> 00:00:54.007
Lambda introduced image deployment,

19
00:00:54.007 --> 00:00:56.005
as many developers use

20
00:00:56.005 --> 00:01:00.003
container-based deployment tools and workflows.

21
00:01:00.003 --> 00:01:04.007
For this example, we will use zip deployment.

22
00:01:04.007 --> 00:01:08.003
As the run time, choose Java 11.

23
00:01:08.003 --> 00:01:11.008
We have a couple of SAM templates to choose from.

24
00:01:11.008 --> 00:01:13.002
As a Java developer,

25
00:01:13.002 --> 00:01:17.001
you can choose Maven or (indistinct).

26
00:01:17.001 --> 00:01:24.005
We will choose AWSM Hello World Maven.

27
00:01:24.005 --> 00:01:27.003
Now wait for the project to finish the set up,

28
00:01:27.003 --> 00:01:31.005
and Maven to pull all dependencies.

29
00:01:31.005 --> 00:01:33.008
If Maven was not recognized,

30
00:01:33.008 --> 00:01:38.000
right click on poem.XML and then choose

31
00:01:38.000 --> 00:01:41.004
"add as Maven project."

32
00:01:41.004 --> 00:01:42.006
And that's it,

33
00:01:42.006 --> 00:01:44.006
in three clicks we managed to get

34
00:01:44.006 --> 00:01:47.007
our first Lambda function created.

35
00:01:47.007 --> 00:01:52.002
Now open "app.javaclass."

36
00:01:52.002 --> 00:01:54.005
First thing to notice is our class

37
00:01:54.005 --> 00:01:57.006
implements the request handler interface,

38
00:01:57.006 --> 00:02:01.008
which is coming from AWS as the k,

39
00:02:01.008 --> 00:02:06.002
and it overrides it's handled requests methods.

40
00:02:06.002 --> 00:02:09.006
Every AWS Lambda requires a handler,

41
00:02:09.006 --> 00:02:12.001
which is the method in the code

42
00:02:12.001 --> 00:02:14.005
that will be invoked by the Lambda.

43
00:02:14.005 --> 00:02:17.006
Whenever in went is received.

44
00:02:17.006 --> 00:02:20.001
The lambda, run time receives an event

45
00:02:20.001 --> 00:02:25.008
as a Jason formatted string and converts it into object.

46
00:02:25.008 --> 00:02:30.004
You specify the type of object that (indistinct) to

47
00:02:30.004 --> 00:02:33.003
in the handler Mets signature.

48
00:02:33.003 --> 00:02:37.007
There various well at signatures for Lambda handler method.

49
00:02:37.007 --> 00:02:40.009
And we'll get to that at the later stage.

50
00:02:40.009 --> 00:02:44.008
Our method is used for input and output types that are

51
00:02:44.008 --> 00:02:48.003
specified for API gateway.

52
00:02:48.003 --> 00:02:51.009
Can the request method also has context object as a

53
00:02:51.009 --> 00:02:54.008
parameter, which provides details about the

54
00:02:54.008 --> 00:02:59.005
invocation and the function

55
00:02:59.005 --> 00:03:03.004
Quantico object provides information about invocations,

56
00:03:03.004 --> 00:03:07.007
such as AWS request ID, Lando version,

57
00:03:07.007 --> 00:03:09.002
execution environment,

58
00:03:09.002 --> 00:03:13.007
like amount of memory that was allocated for that function.

59
00:03:13.007 --> 00:03:18.000
And finally, the context provides identity information

60
00:03:18.000 --> 00:03:24.001
coming from Incognito, which is a security service from AWS.

61
00:03:24.001 --> 00:03:28.007
This sample code first prepares the Jason response.

62
00:03:28.007 --> 00:03:31.009
It gets the API address of the machine,

63
00:03:31.009 --> 00:03:35.009
which executes this code and then returns the information

64
00:03:35.009 --> 00:03:38.009
back to Jason.

65
00:03:38.009 --> 00:03:42.000
The last piece of code is a return type,

66
00:03:42.000 --> 00:03:45.000
which can be object or void.

67
00:03:45.000 --> 00:03:46.009
When returning an object,

68
00:03:46.009 --> 00:03:51.007
runtime Serializes the return pages into Jason object,

69
00:03:51.007 --> 00:03:54.008
which we will see once we run our code

70
00:03:54.008 --> 00:03:57.000
in the next three though.

