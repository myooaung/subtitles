WEBVTT
1
00:00:00.008 --> 00:00:02.005
- [Instructor] Serverless can be summarized

2
00:00:02.005 --> 00:00:05.006
as a haiku poem by Onsi Fakhouri.

3
00:00:05.006 --> 00:00:07.006
"Here is my source code.

4
00:00:07.006 --> 00:00:09.006
Run it on the cloud for me.

5
00:00:09.006 --> 00:00:11.005
I do not care how,"

6
00:00:11.005 --> 00:00:15.006
which means I don't want to know the specifics of it,

7
00:00:15.006 --> 00:00:17.008
just make it work.

8
00:00:17.008 --> 00:00:21.007
A lot of times software development looks like this.

9
00:00:21.007 --> 00:00:25.006
You have a server, maybe even a Docker container,

10
00:00:25.006 --> 00:00:28.008
and you find yourself spending a ton of time

11
00:00:28.008 --> 00:00:33.001
doing things that are not code, and a precious little time

12
00:00:33.001 --> 00:00:37.003
doing things that you actually care about your code.

13
00:00:37.003 --> 00:00:40.003
This is where we come to our first benefit.

14
00:00:40.003 --> 00:00:44.002
It is far, far faster to develop and deploy

15
00:00:44.002 --> 00:00:48.004
new applications using serverless platforms.

16
00:00:48.004 --> 00:00:51.006
Do your customer's care about Java runtime

17
00:00:51.006 --> 00:00:54.002
or the version of Linux you're running on?

18
00:00:54.002 --> 00:00:58.005
Did you ever get rewarded for upgrading the runtime version

19
00:00:58.005 --> 00:01:01.001
or establishing a security patch?

20
00:01:01.001 --> 00:01:04.005
They don't care, they want features.

21
00:01:04.005 --> 00:01:08.006
The goal of serverless is don't worry about the underlying

22
00:01:08.006 --> 00:01:12.008
operating system and any kind of platform issues,

23
00:01:12.008 --> 00:01:16.003
worry about solving business problems.

24
00:01:16.003 --> 00:01:19.002
This is where we find our second benefit,

25
00:01:19.002 --> 00:01:24.001
no management of server hosts or server processes.

26
00:01:24.001 --> 00:01:26.006
Before you needed to ask yourself,

27
00:01:26.006 --> 00:01:29.001
"How much capacity would you need?"

28
00:01:29.001 --> 00:01:33.000
And in the early beginning it is almost always,

29
00:01:33.000 --> 00:01:36.009
"I don't know, I'm not there to provision it,

30
00:01:36.009 --> 00:01:41.008
update it or scale it, it's someone else's problem."

31
00:01:41.008 --> 00:01:44.009
Serverless architecture self-auto scales

32
00:01:44.009 --> 00:01:48.001
and auto provision based on load.

33
00:01:48.001 --> 00:01:51.004
Some benefits that there may be less obvious,

34
00:01:51.004 --> 00:01:56.009
but still important, are service systems are often cheaper.

35
00:01:56.009 --> 00:02:01.002
First of all, service gives us far more efficient use

36
00:02:01.002 --> 00:02:05.002
of resources, and there is much less work for us to do

37
00:02:05.002 --> 00:02:08.003
as there are no deployment management,

38
00:02:08.003 --> 00:02:11.008
no system administration and auto scaling

39
00:02:11.008 --> 00:02:14.009
is completely managed on our behalf.

40
00:02:14.009 --> 00:02:16.005
At the end of the month,

41
00:02:16.005 --> 00:02:18.008
when you receive your serverless bill,

42
00:02:18.008 --> 00:02:21.004
you may only see one number.

43
00:02:21.004 --> 00:02:23.008
If you want to compare this number

44
00:02:23.008 --> 00:02:27.009
with non-serverless app costs, you shouldn't simply compare

45
00:02:27.009 --> 00:02:30.000
it to infrastructure costs,

46
00:02:30.000 --> 00:02:32.003
you should broaden your comparison

47
00:02:32.003 --> 00:02:36.008
and also include a chunk of operation salaries.

48
00:02:36.008 --> 00:02:41.001
SAS bills, such as monitoring tool, development efforts

49
00:02:41.001 --> 00:02:44.006
for generic features, like authentification,

50
00:02:44.006 --> 00:02:47.008
or efforts related to technology maturity

51
00:02:47.008 --> 00:02:50.001
and skills build up.

52
00:02:50.001 --> 00:02:53.004
Serverless solutions are often better.

53
00:02:53.004 --> 00:02:57.006
Some of the concerns we have to deal with as a developer,

54
00:02:57.006 --> 00:03:02.003
such as security, logging, observability and tracing,

55
00:03:02.003 --> 00:03:05.007
are already available on AWS

56
00:03:05.007 --> 00:03:11.000
and allow easy integration with AWS Lambda functions.

