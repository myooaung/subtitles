WEBVTT
1
00:00:00.001 --> 00:00:05.004
(poppy music)

2
00:00:05.004 --> 00:00:06.004
- Welcome back.

3
00:00:06.004 --> 00:00:09.007
I hope you were able to solve it.

4
00:00:09.007 --> 00:00:14.005
Solving challenges around promotions is a common use case.

5
00:00:14.005 --> 00:00:18.004
And this is a perfect example of how such a business case

6
00:00:18.004 --> 00:00:21.008
can be separated as an escalated function.

7
00:00:21.008 --> 00:00:25.006
Maintained and updated without necessarily touching

8
00:00:25.006 --> 00:00:29.008
other functionalities of the client application.

9
00:00:29.008 --> 00:00:31.005
If we review our task,

10
00:00:31.005 --> 00:00:35.004
we have two objects we need to deal with.

11
00:00:35.004 --> 00:00:37.006
First is CarData.

12
00:00:37.006 --> 00:00:40.009
And the second one is PromotionData.

13
00:00:40.009 --> 00:00:46.009
Let's go ahead and create those two Bojo classes.

14
00:00:46.009 --> 00:00:50.009
First create a new class CarData.

15
00:00:50.009 --> 00:00:57.002
We need to add fields sum and couponCode.

16
00:00:57.002 --> 00:01:00.005
We shouldn't forget to add getters and setters.

17
00:01:00.005 --> 00:01:04.004
Otherwise CarData wont get populated

18
00:01:04.004 --> 00:01:06.005
and let's create another entity

19
00:01:06.005 --> 00:01:10.009
called promotion data.

20
00:01:10.009 --> 00:01:14.001
A promotion should contain reduced price,

21
00:01:14.001 --> 00:01:16.006
a free shipping flag,

22
00:01:16.006 --> 00:01:19.001
and the promo message.

23
00:01:19.001 --> 00:01:21.006
I will now create a new clause

24
00:01:21.006 --> 00:01:29.000
that will hold our handler function.

25
00:01:29.000 --> 00:01:31.002
We can use both of these bojo's

26
00:01:31.002 --> 00:01:38.002
as part of handler signature.

27
00:01:38.002 --> 00:01:40.007
As an input we expect CarData.

28
00:01:40.007 --> 00:01:45.004
While as a response, we expect PromotionData.

29
00:01:45.004 --> 00:01:48.006
Before we start writing our business logic,

30
00:01:48.006 --> 00:01:51.009
I will create promotion data object,

31
00:01:51.009 --> 00:02:03.003
and a promo message that we will use in our business logic.

32
00:02:03.003 --> 00:02:08.004
As a first use case, if the sum is higher than 1000,

33
00:02:08.004 --> 00:02:17.003
we need to apply a 10% discount

34
00:02:17.003 --> 00:02:29.000
and also apply promo message.

35
00:02:29.000 --> 00:02:31.001
Second, we need to check

36
00:02:31.001 --> 00:02:36.004
if there is a free shipping promotion applied in the cart.

37
00:02:36.004 --> 00:02:37.009
If that is true,

38
00:02:37.009 --> 00:02:41.002
we need to set free shipping to true

39
00:02:41.002 --> 00:02:56.007
and also append promo message to exist in promoMessages.

40
00:02:56.007 --> 00:02:58.009
And finally, we need to set

41
00:02:58.009 --> 00:03:07.006
promotion message and return PromotionData object.

42
00:03:07.006 --> 00:03:10.002
Let's now publish our function.

43
00:03:10.002 --> 00:03:12.006
Go to AWS Explorer,

44
00:03:12.006 --> 00:03:21.005
click on Create new AWS Lambda.

45
00:03:21.005 --> 00:03:26.002
Set all properties and reference to new handler methods

46
00:03:26.002 --> 00:03:30.009
and click on Create Function.

47
00:03:30.009 --> 00:03:33.005
Now that the deployment has finished

48
00:03:33.005 --> 00:03:39.005
right-click on lambda function, run.

49
00:03:39.005 --> 00:03:42.002
You can use the request from exercise files

50
00:03:42.002 --> 00:03:44.000
to test our method,

51
00:03:44.000 --> 00:03:46.005
and we should get discounted price

52
00:03:46.005 --> 00:03:51.001
and free shipping together with a promotion message.

53
00:03:51.001 --> 00:03:53.001
And there you have it.

54
00:03:53.001 --> 00:03:56.004
We have successfully created the Lambda function with

55
00:03:56.004 --> 00:04:00.000
customer inputs and outputs.

