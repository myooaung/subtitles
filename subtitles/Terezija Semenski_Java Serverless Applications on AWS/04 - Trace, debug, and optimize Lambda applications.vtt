WEBVTT
1
00:00:01.000 --> 00:00:03.004
- [Instructor] Identifying performance bottlenecks

2
00:00:03.004 --> 00:00:06.008
and troubleshooting requests that resulted in an error

3
00:00:06.008 --> 00:00:09.002
is always a challenge.

4
00:00:09.002 --> 00:00:13.000
Now we're going to learn how to customize trace data,

5
00:00:13.000 --> 00:00:15.005
debug and visualize requests

6
00:00:15.005 --> 00:00:20.007
to optimize Lambda applications with AWS X-Ray.

7
00:00:20.007 --> 00:00:24.004
X-Ray helps you analyze distributed applications

8
00:00:24.004 --> 00:00:27.006
by showing you an end to end view of requests

9
00:00:27.006 --> 00:00:30.009
as they travel through your application.

10
00:00:30.009 --> 00:00:34.008
X-Ray can be easily integrated with Lambda functions.

11
00:00:34.008 --> 00:00:37.006
Once enabled, Lambda trace data

12
00:00:37.006 --> 00:00:40.006
is sent to the X-Ray automatically.

13
00:00:40.006 --> 00:00:43.002
I have already done some invocations

14
00:00:43.002 --> 00:00:49.000
in order to generate some data for us to see.

15
00:00:49.000 --> 00:00:54.003
Let's open the X-Ray service and bring up our service map.

16
00:00:54.003 --> 00:00:57.004
What you can see is the path from the client

17
00:00:57.004 --> 00:00:59.006
to the application.

18
00:00:59.006 --> 00:01:02.001
Lambda records two segments

19
00:01:02.001 --> 00:01:05.008
which creates two nodes on the service map.

20
00:01:05.008 --> 00:01:09.000
The first node represents the Lambda service

21
00:01:09.000 --> 00:01:11.009
that receives the invocation request.

22
00:01:11.009 --> 00:01:17.004
The second node is recorded by the function's runtime.

23
00:01:17.004 --> 00:01:19.009
Selecting one of the components

24
00:01:19.009 --> 00:01:24.000
brings up the service details like name, type,

25
00:01:24.000 --> 00:01:27.008
response distribution and much more.

26
00:01:27.008 --> 00:01:31.003
If I select Traces over on the page,

27
00:01:31.003 --> 00:01:34.005
there is a trace list giving you the ability

28
00:01:34.005 --> 00:01:38.004
to look at the service map for specific traces

29
00:01:38.004 --> 00:01:40.005
that occurred in the past.

30
00:01:40.005 --> 00:01:43.002
Keep in mind, the default sampling rate

31
00:01:43.002 --> 00:01:45.000
is fairly conservative,

32
00:01:45.000 --> 00:01:48.003
only recording the first request each second

33
00:01:48.003 --> 00:01:52.004
and 5% of any additional requests.

34
00:01:52.004 --> 00:01:55.009
However, you have the ability to modify

35
00:01:55.009 --> 00:01:59.006
the default sampling rate.

36
00:01:59.006 --> 00:02:04.003
The way X-Ray data is captured is through X-Ray SDK

37
00:02:04.003 --> 00:02:06.004
and X-Ray Daemon.

38
00:02:06.004 --> 00:02:11.005
The X-Ray Daemon is a process that runs on the host machine

39
00:02:11.005 --> 00:02:16.002
that gathers rotary segments and periodically uploads them

40
00:02:16.002 --> 00:02:18.009
to the X-Ray API.

41
00:02:18.009 --> 00:02:23.003
It includes information about incoming HTTP requests

42
00:02:23.003 --> 00:02:29.007
or downstream services using the AWS SDK, HTTP clients

43
00:02:29.007 --> 00:02:32.000
or SQL Connections.

44
00:02:32.000 --> 00:02:35.001
For Lambda function, you don't need to include

45
00:02:35.001 --> 00:02:37.004
X-Ray SDK as dependency

46
00:02:37.004 --> 00:02:41.003
as we already saw our service map will still show

47
00:02:41.003 --> 00:02:44.006
incoming requests, LM the nodes.

48
00:02:44.006 --> 00:02:49.004
However, you won't be able to see any custom information

49
00:02:49.004 --> 00:02:52.003
that your function makes to the other resources

50
00:02:52.003 --> 00:02:54.007
and services.

51
00:02:54.007 --> 00:02:57.006
If you choose to include X-Ray SDK,

52
00:02:57.006 --> 00:03:02.000
you will be able to provide more granular timing information

53
00:03:02.000 --> 00:03:04.006
around specific lines of code

54
00:03:04.006 --> 00:03:06.005
which can be very helpful

55
00:03:06.005 --> 00:03:10.005
when it comes to troubleshooting any issues.

56
00:03:10.005 --> 00:03:13.000
Let's customize Hello World Lambda

57
00:03:13.000 --> 00:03:16.003
by adding information about external call

58
00:03:16.003 --> 00:03:19.009
that checks the IP of the host machine.

59
00:03:19.009 --> 00:03:22.005
If you look at X-Ray documentation,

60
00:03:22.005 --> 00:03:26.003
there are multiple submodules split by use case.

61
00:03:26.003 --> 00:03:29.004
So, depending on what you're tracing,

62
00:03:29.004 --> 00:03:31.009
you would use a specific submodule

63
00:03:31.009 --> 00:03:34.009
to keep your project size small.

64
00:03:34.009 --> 00:03:40.004
In our case, core library is enough.

65
00:03:40.004 --> 00:03:44.000
Let's scope with the POM configuration and dependency

66
00:03:44.000 --> 00:03:55.004
in our POM XML

67
00:03:55.004 --> 00:04:00.003
and refresh Maven.

68
00:04:00.003 --> 00:04:04.006
Now, we can extend behavior of Hello World app

69
00:04:04.006 --> 00:04:12.000
by creating new subsegment with subsegment subsegment equals

70
00:04:12.000 --> 00:04:25.000
AWS X-Ray. begin subsegment calling external service.

71
00:04:25.000 --> 00:04:27.009
When you create the subsegment for a call,

72
00:04:27.009 --> 00:04:31.009
a segment must already be available for the SDK

73
00:04:31.009 --> 00:04:34.001
to create the subsegment,

74
00:04:34.001 --> 00:04:36.009
which in this case, AWS Lambda,

75
00:04:36.009 --> 00:04:40.002
will create the initial segment for us.

76
00:04:40.002 --> 00:04:44.004
So, you don't need to worry about that in this case.

77
00:04:44.004 --> 00:04:48.002
However, since our unit test doesn't know

78
00:04:48.002 --> 00:04:50.001
about Lambda environment,

79
00:04:50.001 --> 00:04:53.000
we need to create a segment in there

80
00:04:53.000 --> 00:04:56.006
otherwise it will fail.

81
00:04:56.006 --> 00:05:00.000
Back in our handler after the check IP call,

82
00:05:00.000 --> 00:05:10.000
we need to close the segment with AWS X-Ray. and subsegment.

83
00:05:10.000 --> 00:05:12.007
Beyond creating subsegments,

84
00:05:12.007 --> 00:05:17.001
You can add other custom information to the segment document

85
00:05:17.001 --> 00:05:19.009
as annotations or metadata

86
00:05:19.009 --> 00:05:23.005
which can provide further information and insight

87
00:05:23.005 --> 00:05:26.008
that can be seen in X-Ray Console.

88
00:05:26.008 --> 00:05:35.008
Now, let's update our function.

89
00:05:35.008 --> 00:05:42.009
Once this is done, we can now invoke it.

90
00:05:42.009 --> 00:05:45.008
Back in our X-Ray trace console,

91
00:05:45.008 --> 00:05:50.008
let's make a refresh.

92
00:05:50.008 --> 00:05:54.004
Choose the latest trace.

93
00:05:54.004 --> 00:05:57.005
Notice that now we have additional node

94
00:05:57.005 --> 00:06:02.003
plus time spent on external call.

95
00:06:02.003 --> 00:06:06.006
Now that you know how to include X-Ray SDK,

96
00:06:06.006 --> 00:06:12.001
I would recommend you also check AWS Power Tools Library

97
00:06:12.001 --> 00:06:15.009
as it already comes packed with extra annotations

98
00:06:15.009 --> 00:06:17.005
in tracing data

99
00:06:17.005 --> 00:06:21.000
that can be easily enabled with annotations.

