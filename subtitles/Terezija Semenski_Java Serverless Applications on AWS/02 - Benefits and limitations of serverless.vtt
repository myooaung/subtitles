WEBVTT
1
00:00:00.008 --> 00:00:03.008
- [Narrator] Serverless is the next evolution of the cloud

2
00:00:03.008 --> 00:00:07.009
that frees up developers from unnecessary plumbing

3
00:00:07.009 --> 00:00:11.005
and allows them to focus on business problems,

4
00:00:11.005 --> 00:00:13.004
enables fast delivery,

5
00:00:13.004 --> 00:00:15.003
and at the same time,

6
00:00:15.003 --> 00:00:19.003
reduces operation costs and complexity.

7
00:00:19.003 --> 00:00:23.001
If we compare serverless with other cloud solutions,

8
00:00:23.001 --> 00:00:27.002
they all have value and a good reason for using each.

9
00:00:27.002 --> 00:00:30.001
The challenge for us is knowing when to use

10
00:00:30.001 --> 00:00:31.008
which abstraction.

11
00:00:31.008 --> 00:00:34.001
As we go down this hierarchy,

12
00:00:34.001 --> 00:00:39.000
we have much more flexibility and there are fewer standards.

13
00:00:39.000 --> 00:00:41.002
As we go up to hierarchy,

14
00:00:41.002 --> 00:00:45.009
we get much less complexity and a lot more efficiency.

15
00:00:45.009 --> 00:00:50.004
We are constrained more, but we get some benefit from that.

16
00:00:50.004 --> 00:00:54.004
But what are some common traits of serverless service?

17
00:00:54.004 --> 00:00:57.000
The first is vendor lock-in.

18
00:00:57.000 --> 00:01:00.002
When starting out with AWS Lambda,

19
00:01:00.002 --> 00:01:04.007
you will be encouraged to use AWS-specific libraries

20
00:01:04.007 --> 00:01:09.009
as they are more performant and optimized for AWS Lambda.

21
00:01:09.009 --> 00:01:15.007
They provide SDKs for communicating with other AWS services,

22
00:01:15.007 --> 00:01:19.009
such as logging, tracing, S3 bucket.

23
00:01:19.009 --> 00:01:23.007
But you don't have to use any vendor-specific libraries,

24
00:01:23.007 --> 00:01:27.002
as there are workarounds to have you called less ties

25
00:01:27.002 --> 00:01:29.008
to Amazon as a vendor.

26
00:01:29.008 --> 00:01:33.006
When the Lambda function gets invoked for the first time,

27
00:01:33.006 --> 00:01:36.007
it spins up a new virtual machine,

28
00:01:36.007 --> 00:01:39.008
loads the code and executes everything

29
00:01:39.008 --> 00:01:42.001
outside your function handler.

30
00:01:42.001 --> 00:01:43.004
For example,

31
00:01:43.004 --> 00:01:48.006
loading of libraries and defining global variables and more.

32
00:01:48.006 --> 00:01:51.001
Bootstrapping the executing context,

33
00:01:51.001 --> 00:01:52.008
which adds extra latency

34
00:01:52.008 --> 00:01:57.006
before the handler gets invoked is called a cold start.

35
00:01:57.006 --> 00:02:00.005
This can have negative performance effects,

36
00:02:00.005 --> 00:02:02.002
especially in Java,

37
00:02:02.002 --> 00:02:05.006
due to its well-known high memory footprint.

38
00:02:05.006 --> 00:02:08.002
This doesn't happen every time.

39
00:02:08.002 --> 00:02:13.009
AWS will freeze execution context for around 15 minutes.

40
00:02:13.009 --> 00:02:17.005
But if we get 100 simultaneous requests,

41
00:02:17.005 --> 00:02:20.006
then this can cause performance degradation

42
00:02:20.006 --> 00:02:23.008
and have increased negative effect in pricing.

43
00:02:23.008 --> 00:02:28.005
We will explore how to take a look with code improvements,

44
00:02:28.005 --> 00:02:31.003
but also with the new AWS feature

45
00:02:31.003 --> 00:02:34.002
called Provisional Concurrency,

46
00:02:34.002 --> 00:02:39.000
a feature that was introduced to keep functions initialized.

47
00:02:39.000 --> 00:02:44.003
Another tool that can be used is AWS Power Tuning

48
00:02:44.003 --> 00:02:46.004
to test different configurations

49
00:02:46.004 --> 00:02:51.003
to find balance between performance and pricing.

50
00:02:51.003 --> 00:02:53.008
Unit testing is quite easy,

51
00:02:53.008 --> 00:02:56.009
since you're dealing with only one function

52
00:02:56.009 --> 00:03:00.005
where we can easily mock any dependencies,

53
00:03:00.005 --> 00:03:04.000
but testing also consists of functional

54
00:03:04.000 --> 00:03:05.009
and integration testing.

55
00:03:05.009 --> 00:03:07.005
This is really tricky

56
00:03:07.005 --> 00:03:10.003
since the entire application is relying

57
00:03:10.003 --> 00:03:14.005
on so many components available in the cloud.

58
00:03:14.005 --> 00:03:18.003
We were used to having dedicated local environments,

59
00:03:18.003 --> 00:03:21.008
but now we need to run everything in the cloud.

60
00:03:21.008 --> 00:03:26.001
This means we need to consider using different accounts,

61
00:03:26.001 --> 00:03:29.004
maybe different versions over Lambda functions,

62
00:03:29.004 --> 00:03:32.008
not to jeopardize our production behavior.

63
00:03:32.008 --> 00:03:36.000
Finally, the most crucial reason

64
00:03:36.000 --> 00:03:38.004
why most developers avoid dealing

65
00:03:38.004 --> 00:03:40.005
with serverless architecture is

66
00:03:40.005 --> 00:03:43.007
because you can't run an entire application

67
00:03:43.007 --> 00:03:46.001
on serverless systems.

68
00:03:46.001 --> 00:03:49.003
Most traditional web applications are pegged

69
00:03:49.003 --> 00:03:51.000
as a one monolith,

70
00:03:51.000 --> 00:03:54.004
containing dependency injection framework,

71
00:03:54.004 --> 00:03:56.003
packed with API endpoints,

72
00:03:56.003 --> 00:03:58.005
connections to databases,

73
00:03:58.005 --> 00:04:02.000
and packed with static resources for the web,

74
00:04:02.000 --> 00:04:05.008
such as JavaScript files and page templates.

75
00:04:05.008 --> 00:04:08.006
We have to really completely rethink

76
00:04:08.006 --> 00:04:11.001
how we go about the architecture,

77
00:04:11.001 --> 00:04:14.002
just taking our existing applications

78
00:04:14.002 --> 00:04:16.004
and turning them into functions,

79
00:04:16.004 --> 00:04:20.004
as a serverless app is not really going to help us.

80
00:04:20.004 --> 00:04:25.000
For this reason serverless, suits greenfield development.

