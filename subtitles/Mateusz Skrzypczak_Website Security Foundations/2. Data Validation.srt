1
00:00:04,330 --> 00:00:10,390
Now is the time to take a look at the actual data validation methods, how to make sure what the user

2
00:00:10,390 --> 00:00:11,980
sent is what we expect.

3
00:00:13,060 --> 00:00:18,730
Whenever your language has a built in validation or sanitization methods, you should probably use them.

4
00:00:19,390 --> 00:00:25,150
A language is created by teams where people have shared their expertise and the code base is frequently

5
00:00:25,150 --> 00:00:29,980
monitored and improved, which basically means we can count on these functionalities.

6
00:00:30,730 --> 00:00:35,380
Also, some of them may be simply faster than equivalence written as a custom code.

7
00:00:36,580 --> 00:00:42,310
BHP has a built in filtering system which offers a set of validation and sanitization methods.

8
00:00:42,850 --> 00:00:45,070
It works like in these two examples.

9
00:00:48,940 --> 00:00:52,270
Usually this particular filtering system works well.

10
00:00:52,570 --> 00:00:55,060
However, some of the filters may not always work.

11
00:00:55,060 --> 00:00:56,110
How you expect.

12
00:00:56,710 --> 00:01:02,830
For example, an email address valued according to P2P filters may not look like you think it should.

13
00:01:04,870 --> 00:01:10,930
Also when sanitizing data, you must remember that these filters sanitize data for a given context.

14
00:01:12,190 --> 00:01:17,920
For example, the filter sanitize email would not sanitize the email in a way that would make it safe

15
00:01:17,920 --> 00:01:25,180
for direct use in the query or for direct output on the front end because according to the commendation,

16
00:01:25,330 --> 00:01:27,280
it doesn't remove these characters.

17
00:01:29,700 --> 00:01:35,460
Not the single quote character which is allowed in email address syntax but can be pretty dangerous

18
00:01:35,460 --> 00:01:38,550
when not escaped either in school or in HTML.

19
00:01:39,920 --> 00:01:46,550
So that filter only sanitize the e-mail address to be used within e-mail operations, not in other contexts.

20
00:01:48,500 --> 00:01:53,930
Before you use filters, you need to carefully study what they actually do and what particular filters

21
00:01:53,930 --> 00:01:54,650
are for.

22
00:01:56,700 --> 00:02:01,080
Anyway, as I mentioned earlier, the built in methods are usually the way to go.

23
00:02:01,500 --> 00:02:07,980
But in this chapter, I'd like to show you instead the manual methods to validate data first, because

24
00:02:07,980 --> 00:02:11,390
not all types of data have corresponding filters and PDB.

25
00:02:12,750 --> 00:02:18,450
Second, because for usability, the equal validation process should work on the frontend, which means

26
00:02:18,450 --> 00:02:21,450
we need 100% compatible methods in JavaScript.

27
00:02:22,680 --> 00:02:27,150
And third, in case you need more granular control over the validation process.

28
00:02:28,110 --> 00:02:34,050
For example, in the aforementioned case of email addresses, the P2P validation would have to pass

29
00:02:34,050 --> 00:02:40,830
through an email like test at best because it is technically correct email address according to standards.

30
00:02:41,700 --> 00:02:48,960
But if you expect a public email address, you definitely need at least one dot after the ET sign because

31
00:02:48,960 --> 00:02:52,830
any public domain must contain at least one dot sign.

32
00:02:56,790 --> 00:03:04,260
One of the initial checks you will have to perform is whether the input data actually exists for any

33
00:03:04,260 --> 00:03:06,150
required field or parameter.

34
00:03:06,180 --> 00:03:11,970
If there's no value, there's no point to do any other checks and it can be immediately rejected.

35
00:03:13,530 --> 00:03:19,590
In BHP, one of my favourite functions is empty, which will return true whenever a variable doesn't

36
00:03:19,590 --> 00:03:23,040
exist or has a value which evaluates to false.

37
00:03:24,810 --> 00:03:26,430
When you expect a string.

38
00:03:26,460 --> 00:03:32,610
It's also a good idea to dream it, to make sure it doesn't contain whitespace only, which would be

39
00:03:32,610 --> 00:03:35,400
a multi-character representation of an empty string.

40
00:03:36,780 --> 00:03:39,240
It may be useful to make a helper function.

41
00:03:41,780 --> 00:03:42,800
In the same manner.

42
00:03:42,800 --> 00:03:47,900
You should always trim the string when you check its length to catch situations in which the string

43
00:03:47,930 --> 00:03:50,960
is just padded with whitespace to the expected length.

44
00:03:54,560 --> 00:03:56,270
When using empathy function.

45
00:03:56,270 --> 00:04:03,380
Beware that for numeric values, zero might be a perfectly valid and meaningful value despite evaluates

46
00:04:03,380 --> 00:04:03,980
to false.

47
00:04:06,350 --> 00:04:12,050
In case you might need to deal with numerical values where zero is not considered empty, you shouldn't

48
00:04:12,050 --> 00:04:14,600
use empty function but rather is set.

49
00:04:16,120 --> 00:04:22,930
And then cut the value to string three meet and only then check this string length.

50
00:04:24,790 --> 00:04:28,840
Even after casting two strings we need to use and beat string length.

51
00:04:28,930 --> 00:04:37,600
Not empty because empty will treat string zero as empty value to watch out for such surprises when validating

52
00:04:37,600 --> 00:04:38,020
data.

53
00:04:39,780 --> 00:04:45,120
So to sum up before any further validation, check the existence of mandatory fields.

54
00:04:47,960 --> 00:04:53,300
The first check is for old string values, which should not be empty or contain whitespace only.

55
00:04:55,640 --> 00:05:00,260
The second check is the same, but with an exception which allows string zero.

56
00:05:01,860 --> 00:05:04,620
Both examples use functions which we just defined.

57
00:05:08,980 --> 00:05:15,070
In JavaScript, you can simply do this and it will work pretty much the same as empty in BHP.

58
00:05:18,230 --> 00:05:20,660
To check for an empty or white space drink.

59
00:05:20,810 --> 00:05:22,340
You can use this function.

60
00:05:28,390 --> 00:05:32,110
In JavaScript, you don't need a solution for the case of string zero.

61
00:05:32,590 --> 00:05:36,070
It will not be considered empty, but the number is zero.

62
00:05:36,280 --> 00:05:40,720
Of course will be treated as empty in the code.

63
00:05:40,720 --> 00:05:41,950
Snippets coming next.

64
00:05:42,100 --> 00:05:48,940
I assume this initial non empty check is already done, so we will be able to focus on specific validation

65
00:05:48,940 --> 00:05:51,010
methods for different data types.
