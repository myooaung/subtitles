WEBVTT
1
00:00:05.340 --> 00:00:10.230
The next thing you probably wants to do after you successfully tested that your site works well with

2
00:00:10.230 --> 00:00:13.260
SSL and you updated all internal URLs.

3
00:00:13.710 --> 00:00:20.910
Is Redirect all HTP requests to HTP s to effectively get rid of HTP requests.

4
00:00:21.540 --> 00:00:24.210
This is how you can do that in access file.

5
00:00:27.320 --> 00:00:30.050
The first line turns on the rewrite engine.

6
00:00:30.800 --> 00:00:34.760
If you have this line somewhere earlier in this file, you can skip it.

7
00:00:36.080 --> 00:00:40.340
Then it checks the condition to rewrite only nonnative tips requests.

8
00:00:41.000 --> 00:00:48.380
And finally, for matching requests, it rewrites the whole URL so that it starts with HTP s and we

9
00:00:48.380 --> 00:00:53.180
are using three or one redirect which informs the client that the redirect is permanent.

10
00:00:55.310 --> 00:01:02.690
Now every ATP request will be redirected to HTP s and the browser or both will receive the resource

11
00:01:02.690 --> 00:01:07.670
over a secure connection also because of three or one redirect.

12
00:01:07.790 --> 00:01:14.630
Search engine bods will likely update the links to HTP s and stop indexing your HTP URLs.

13
00:01:19.750 --> 00:01:26.830
Now imagine a client of Exemplar Bank which has its transaction system under HTP s example bank dot

14
00:01:26.830 --> 00:01:27.160
com.

15
00:01:28.000 --> 00:01:31.600
Our client finds it hard to type on keyboard without looking at it.

16
00:01:32.410 --> 00:01:39.280
He knows the euro transaction system so he types example bank dot com and hits enter because he's not

17
00:01:39.280 --> 00:01:41.230
looking at the screen but on the keyboard.

18
00:01:41.530 --> 00:01:48.100
He doesn't notice that the browser is hinting the URL from history because he only type example of bank

19
00:01:48.100 --> 00:01:52.000
dot com and not htp s example bank dot com.

20
00:01:52.420 --> 00:01:58.150
The browser will assume the default HTP protocol and go to htp example dot com.

21
00:02:00.220 --> 00:02:06.790
If the example being used, the code we just discussed, the one that forces SSL decline would be redirected

22
00:02:06.790 --> 00:02:09.280
to 80 tips and everything would be fine.

23
00:02:10.480 --> 00:02:15.760
But if our client will do the same on the Hotspot Network in some public place which would be controlled

24
00:02:15.760 --> 00:02:22.240
by a malicious person, their request could be forged before it reaches the server where it would normally

25
00:02:22.240 --> 00:02:23.680
be redirected to HTP.

26
00:02:25.300 --> 00:02:31.480
Instead, the user might be redirected to a false page looking like the original one of example bank

27
00:02:31.960 --> 00:02:34.540
and might fall victim to a phishing attack.

28
00:02:35.050 --> 00:02:38.140
This is a classic example of a man in the middle attack.

29
00:02:40.690 --> 00:02:45.820
Because most people don't care about typing htp, semicolon, slash, slash.

30
00:02:46.210 --> 00:02:48.910
These kinds of attacks could affect lots of them.

31
00:02:50.440 --> 00:02:56.800
The strict transport security is an HTP response header, which you can set on your side to inform the

32
00:02:56.800 --> 00:03:03.490
browser that it should use H2 tips for any subsequent request to that domain up to the defined maximum

33
00:03:03.490 --> 00:03:06.760
age optionally including subdomains to.

34
00:03:08.470 --> 00:03:13.750
This is doing pretty much the same as the previous solution, but this time the browser will learn for

35
00:03:13.750 --> 00:03:21.310
a defined time that the site wants htp s connection and when user makes subsequent request over HTP.

36
00:03:21.610 --> 00:03:26.110
The browser would change it to HTP as before sending the request anywhere.

37
00:03:26.950 --> 00:03:32.770
So in our example, their request will be changed to HTP s before it reaches the malicious network,

38
00:03:33.460 --> 00:03:37.120
and because of that it couldn't be forced by anyone in the middle.

39
00:03:38.890 --> 00:03:40.240
In the example they shown.

40
00:03:40.420 --> 00:03:47.170
The browser is expected to remember the setting for one year, which is 60 seconds or 60 minutes per

41
00:03:47.170 --> 00:03:48.310
24 hours.

42
00:03:48.590 --> 00:03:50.620
There are 365 days.

43
00:03:51.640 --> 00:03:53.710
This is a fine choice for most cases.

44
00:03:58.670 --> 00:04:04.450
To enable a strict transport security header for your site, you need to paste this code to your access

45
00:04:04.520 --> 00:04:05.810
file and your goods.

46
00:04:06.950 --> 00:04:11.180
If you have a certificate for subdomains to add, that includes subdomains.

47
00:04:11.180 --> 00:04:14.130
Flag, of course.

48
00:04:14.150 --> 00:04:17.210
Don't forget to thoroughly check your site after that.

49
00:04:17.810 --> 00:04:24.800
According to the policy you just enforced, all the resources must be reachable via https to avoid missing

50
00:04:24.800 --> 00:04:26.480
resources or broken links.

51
00:04:27.780 --> 00:04:30.060
If you are not sure whether your site will work.

52
00:04:30.360 --> 00:04:35.220
Start with short term ice age, for example, one hour or one day and see what happens.

53
00:04:35.940 --> 00:04:38.100
Then change it to one week or one month.

54
00:04:38.490 --> 00:04:42.660
And when you are sure that everything worked fine during that period, set it to one year.

55
00:04:44.200 --> 00:04:50.260
If your page is constantly sending this HTP header on each request, the browser will refresh the max

56
00:04:50.260 --> 00:04:50.740
age.

57
00:04:51.220 --> 00:04:57.250
So it means that the browser will remember the setting for 365 days from the last visit.

58
00:04:59.170 --> 00:05:04.480
If the user will visit your site in January, the setting will be remembered until next January.

59
00:05:04.750 --> 00:05:07.120
Of course, unless the user resets the browser.

60
00:05:07.900 --> 00:05:14.140
So if the user comes back in December, the strict transport security said there was still for the HTP

61
00:05:14.140 --> 00:05:14.950
s connection.

62
00:05:15.250 --> 00:05:19.690
Even if users and they request over HTP accidentally or not.

63
00:05:25.430 --> 00:05:31.640
The strict transport security is in response harder, which means it will only be sent by a server after

64
00:05:31.640 --> 00:05:33.440
a user first visited a website.

65
00:05:34.430 --> 00:05:39.380
Because of that, the first ever visit via HTP is still not protected.

66
00:05:40.880 --> 00:05:46.820
Remember our client over Public Hotspot Network, which happens to be a malicious network during a man

67
00:05:46.820 --> 00:05:49.550
in the middle attack for all bank related sites.

68
00:05:50.240 --> 00:05:56.570
If our victim opened example bank dot com there for a very first time for example on the new device,

69
00:05:57.020 --> 00:06:03.110
their request could still be forced because the victim's browser on the new device has not yet received

70
00:06:03.110 --> 00:06:05.060
the strict transport security header.

71
00:06:06.380 --> 00:06:10.610
This is why browser producers came up with an idea of preload lists.

72
00:06:10.910 --> 00:06:18.530
Those lists are then used by browsers to find out if they should convert the HTP request to HTP s before

73
00:06:18.560 --> 00:06:23.690
they make a very first request so that the first request can be protected as well.

74
00:06:23.870 --> 00:06:29.360
Even if this particular user's browser hasn't yet received the strict transport security header.

75
00:06:31.500 --> 00:06:38.010
To subscribe your domain to preload least you would simply need to set a max age of at least one year

76
00:06:38.130 --> 00:06:42.330
where two years suggested and also add the preload flag.

77
00:06:44.340 --> 00:06:50.460
It's recommended to subscribe for preloading only when the whole site under your domain and all subdomains

78
00:06:50.460 --> 00:06:58.920
use SSL and have no mixed content issues when you plan to use SSL and SD card for a long time.

79
00:06:59.310 --> 00:07:00.690
For example, forever.

80
00:07:02.010 --> 00:07:07.050
And after you thoroughly check that, your site works fine with a strict transport security.

81
00:07:08.420 --> 00:07:13.280
It's easier to disable only the header than to have your site removed from browsers.

82
00:07:13.280 --> 00:07:14.120
Preload lists.

83
00:07:14.570 --> 00:07:17.390
These lists are populated with the browser software.

84
00:07:21.690 --> 00:07:26.970
Finally, in case you would like to opt out from strict transport security, whether you should be sending

85
00:07:26.970 --> 00:07:29.250
the header with max age set to zero.

86
00:07:30.150 --> 00:07:33.270
This will disable the strict transport security header.

87
00:07:34.200 --> 00:07:40.200
Whether to include subdomains or not depends on your policy and how actually independent these subdomains

88
00:07:40.200 --> 00:07:40.560
are.

89
00:07:41.640 --> 00:07:48.000
Any subdomain can send a non-zero SDR header and it will overwrite the top level domain setting.

90
00:07:51.320 --> 00:07:56.840
When your site is running with SSL, one more thing you should do is protect all your cookies with a

91
00:07:56.870 --> 00:07:57.860
secure flag.

92
00:07:59.690 --> 00:08:05.510
It ensures the cookie will only be sent to the server over the secure connection, so it limits the

93
00:08:05.510 --> 00:08:08.710
possibility of the cookie value being read in transit.
