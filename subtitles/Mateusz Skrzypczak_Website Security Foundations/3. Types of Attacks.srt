1
00:00:04,170 --> 00:00:07,670
Well, let me now describe a couple of attack types.

2
00:00:08,030 --> 00:00:12,770
Of course, there are tens or hundreds of them, many also having their unique names.

3
00:00:13,130 --> 00:00:17,750
But these are the most common, the most related to web developers.

4
00:00:17,750 --> 00:00:20,000
Job not server administrator.

5
00:00:21,110 --> 00:00:23,480
The easiest to prevent by your web developer.

6
00:00:24,380 --> 00:00:26,360
Those which you probably have heard about.

7
00:00:26,360 --> 00:00:31,430
So you decided to take this course and those which we will indeed be talking about.

8
00:00:33,500 --> 00:00:37,670
A school injection happens when an intruder manages to run their own.

9
00:00:37,670 --> 00:00:39,800
Eskew will code on the target site.

10
00:00:40,340 --> 00:00:41,750
Sounds hard to achieve.

11
00:00:42,230 --> 00:00:43,790
Oh, it might be very simple.

12
00:00:44,300 --> 00:00:45,230
See this code?

13
00:00:48,410 --> 00:00:55,970
In intended circumstances, victory would look like this, but the UUID parameter is busted directly

14
00:00:55,970 --> 00:01:01,580
as it came from the outside of the script, so a malicious user could argue read to be something like

15
00:01:01,580 --> 00:01:05,300
this and the final query would be this.

16
00:01:07,620 --> 00:01:10,530
Now because they were closed will always be true.

17
00:01:10,650 --> 00:01:12,480
Because one is always one.

18
00:01:12,960 --> 00:01:16,270
It will return all names and balances for all users.

19
00:01:16,290 --> 00:01:19,020
If only the script would not limit the result.

20
00:01:19,020 --> 00:01:20,220
Count to one the rule.

21
00:01:21,840 --> 00:01:23,010
In a similar manner.

22
00:01:23,010 --> 00:01:29,190
Someone might want to inject the ESC with code in, insert update or delete queries which are not any

23
00:01:29,190 --> 00:01:30,870
worse as an attack target.

24
00:01:36,660 --> 00:01:37,170
Anyway.

25
00:01:37,170 --> 00:01:41,190
Attackers will often try to append such clauses to any query.

26
00:01:49,470 --> 00:01:55,140
The cross-site scripting is a type of attack in which an attacker is able to run their own script.

27
00:01:55,350 --> 00:02:03,510
Typically, JavaScript on the target site, the abbreviation is not seen as S because CSIS is obviously

28
00:02:03,510 --> 00:02:11,700
something else but exists for all wondering why x in English, the letter X works great as a replacement

29
00:02:11,700 --> 00:02:12,840
for the word cross.

30
00:02:14,040 --> 00:02:17,570
Exercise can be either reflective or persistent.

31
00:02:20,600 --> 00:02:26,690
When we talk about reflected existence, when the vulnerability is based on the specific request containing

32
00:02:26,720 --> 00:02:30,080
unexpected code, which is then run on the target page.

33
00:02:30,950 --> 00:02:35,600
For example, if a site displays the contents of the get parameter without filtering it.

34
00:02:36,710 --> 00:02:40,790
In this code example, we obviously expect a name like John.

35
00:02:41,210 --> 00:02:47,930
So the output is a paragraph saying Hello John, but we need to include some estimate code.

36
00:02:48,230 --> 00:02:50,750
This code would then run on the target site.

37
00:02:52,500 --> 00:02:57,960
Instead of a paragraph saying, Hello, John, we have a paragraph saying hello with a comma.

38
00:02:58,350 --> 00:03:02,820
And the piece of JavaScript that is not visible to the user but executes.

39
00:03:03,540 --> 00:03:07,770
In this case, it removes the whole document body so that the page turns blank.

40
00:03:09,430 --> 00:03:14,290
It's called reflected existence because the page reflects what it receives.

41
00:03:14,740 --> 00:03:20,500
It's usually requires that the victim user is tricked to click the malicious link or visit a malicious

42
00:03:20,500 --> 00:03:21,130
website.

43
00:03:21,700 --> 00:03:25,780
A phishing campaign can be used to make people click a malicious link.

44
00:03:28,130 --> 00:03:34,070
The other type of cross-site scripting attack is the persistent existence or stored existence.

45
00:03:34,790 --> 00:03:40,820
It happens when an attacker manages to place their script permanently on page, for example, storing

46
00:03:40,820 --> 00:03:47,060
the malicious estimate code in the database in a field which contents are displayed directly on page.

47
00:03:48,380 --> 00:03:55,070
This is called persistent or stored existence because the malware code persists in the database, it

48
00:03:55,070 --> 00:03:57,260
gets stored there for a longer time.

49
00:03:58,100 --> 00:04:04,100
This type of attack has much broader range because unlimited number of users can get attacked and it

50
00:04:04,100 --> 00:04:08,030
doesn't require to track every one of them to visit a malicious link.

51
00:04:11,030 --> 00:04:14,640
In both example, as I just shown, the attack was pretty kind.

52
00:04:14,660 --> 00:04:16,250
It didn't do much harm.

53
00:04:16,880 --> 00:04:18,020
The page got blank.

54
00:04:18,020 --> 00:04:24,200
But after removing the malicious script and of course patching the vulnerability, it will return to

55
00:04:24,200 --> 00:04:25,190
normal operation.

56
00:04:25,190 --> 00:04:26,420
And the damage is over.

57
00:04:27,620 --> 00:04:31,820
But the same excessive vulnerability can be used for much worse things.

58
00:04:32,300 --> 00:04:38,090
With cross-site scripting, it may be possible to redirect the user to another website controlled by

59
00:04:38,090 --> 00:04:38,720
the attacker.

60
00:04:39,200 --> 00:04:44,300
And the other piece might be just a competitor site, but it also might be something worse.

61
00:04:44,660 --> 00:04:50,570
A phishing page, which looks exactly like the victim page, but is designed only to steal users access

62
00:04:50,570 --> 00:04:51,320
credentials.

63
00:04:52,470 --> 00:04:58,170
It may also be possible to get access to victims accounts by stealing cookies, reading documents,

64
00:04:58,170 --> 00:04:59,010
cookies, objects.

65
00:05:00,120 --> 00:05:06,690
And it may be also possible to run operations on behalf of a logged in victim, which is known as cross-site

66
00:05:06,690 --> 00:05:07,770
request forgery.

67
00:05:08,850 --> 00:05:11,400
All of these can have serious consequences.

68
00:05:11,970 --> 00:05:18,420
Cross-Site scripting is unfortunately a widespread vulnerability and the one that poses real threats

69
00:05:18,420 --> 00:05:19,770
for different parties.

70
00:05:22,830 --> 00:05:24,060
The cross-site request.

71
00:05:24,060 --> 00:05:29,940
Forgery is the type of attack in which an attacker performs an unwanted action on the target site,

72
00:05:30,300 --> 00:05:34,920
acting as a logged in user without the user's consent and knowledge.

73
00:05:36,180 --> 00:05:40,500
For example, John is logged in to his account on example bank site.

74
00:05:41,160 --> 00:05:46,680
Without logging out, he visits a malicious site that would send a post request to the example bank

75
00:05:46,680 --> 00:05:47,250
domain.

76
00:05:47,790 --> 00:05:51,090
Let's say a request that's normally used to make a bank transfer.

77
00:05:51,870 --> 00:05:56,130
The malicious site could try to send such a request, for example, with an iframe.

78
00:05:57,000 --> 00:06:03,120
If the example of Bankside would complete such operation, John would fall victim of a cross-site request

79
00:06:03,120 --> 00:06:04,140
forgery attack.

80
00:06:04,620 --> 00:06:12,480
Something would happen on his behalf without him even knowing that to mitigate the risk of seizure if

81
00:06:12,480 --> 00:06:19,710
attacks a website or web application should implement a token system for all sensitive state changing

82
00:06:19,710 --> 00:06:20,520
operations.

83
00:06:21,660 --> 00:06:28,140
A new token should be generated with each request so an attacker will not be able to steal them in advance,

84
00:06:28,380 --> 00:06:31,620
and only a valid token should permit the operation.

85
00:06:34,590 --> 00:06:40,860
The HTP protocol, which is used to exchange the requests and responses between browsers and servers,

86
00:06:41,220 --> 00:06:42,840
is a stateless protocol.

87
00:06:43,320 --> 00:06:47,520
It means it doesn't bother to link multiple resources with a single client.

88
00:06:48,270 --> 00:06:51,330
Every request is treated as unrelated to others.

89
00:06:52,350 --> 00:06:58,050
Session is a mechanism that allows the server in the browser to maintain an identified relation for

90
00:06:58,050 --> 00:07:04,140
a defined time so that the server knows that the sequence of requests comes from the same client, for

91
00:07:04,140 --> 00:07:06,030
example, and identified user.

92
00:07:07,050 --> 00:07:12,080
It's made possible by exchanging the session identifier between both parties.

93
00:07:14,460 --> 00:07:17,340
There are two elemental attacks that targeted sessions.

94
00:07:18,480 --> 00:07:25,590
Session hijacking means stealing the session idea from an already locked in user and using it in the

95
00:07:25,590 --> 00:07:26,610
attacker's browser.

96
00:07:27,510 --> 00:07:34,020
If the stolen session idea is valid, an attacker pretty much gains access to the victim's account without

97
00:07:34,020 --> 00:07:35,820
having to know the log in and password.

98
00:07:36,810 --> 00:07:38,640
To mitigate this type of attack.

99
00:07:38,790 --> 00:07:45,300
You need to protect the session ID in the user's browser and during transmission and usually introduce

100
00:07:45,310 --> 00:07:45,910
sessions.

101
00:07:45,930 --> 00:07:47,250
Maximum lifetime.

102
00:07:49,550 --> 00:07:56,660
Session fixation is carried out when an attacker generates the session on their own and triggers the

103
00:07:56,660 --> 00:07:58,490
victim to join that session.

104
00:07:59,270 --> 00:08:05,810
This way the attacker doesn't need to steal it because they know it's to mitigate this type of attack.

105
00:08:06,170 --> 00:08:12,110
You need to ensure that your site doesn't accept incoming session IDs and that the the original is the

106
00:08:12,110 --> 00:08:14,150
ID in certain scenarios.

107
00:08:17,070 --> 00:08:23,640
Click jacking is a simple type of attack in which your website is loaded within a frame on the malicious

108
00:08:23,640 --> 00:08:24,180
website.

109
00:08:25,200 --> 00:08:31,500
The frame occupies the whole viewport, so a victim user sees only the frame content, which is your

110
00:08:31,500 --> 00:08:32,430
legitimate site.

111
00:08:33,210 --> 00:08:38,520
But because in reality, a user is on the manager of websites, they can track everything user does

112
00:08:38,520 --> 00:08:46,410
on the victim page, catch clicks, reform values, etc. So it's possible to steal the data user entries

113
00:08:46,410 --> 00:08:47,100
in the form.

114
00:08:47,340 --> 00:08:50,460
It can be logging credentials or other confidential data.

115
00:08:51,210 --> 00:08:56,880
It's also possible to intercept clicks and, for example, redirect the user to phishing sites.

116
00:09:00,190 --> 00:09:06,400
Path traversal is a type of attack in which a malicious user gains access to files in other location

117
00:09:06,400 --> 00:09:08,140
on the server than intended.

118
00:09:08,920 --> 00:09:10,030
See this example.

119
00:09:11,780 --> 00:09:19,730
We have a page which displays an article based on an ad coming from where a string at t variable when

120
00:09:19,790 --> 00:09:23,540
t is zero one, the included file will be zero one.

121
00:09:23,540 --> 00:09:26,030
Page B from the article's directory.

122
00:09:27,320 --> 00:09:33,020
In the second example, someone exploited the system by preceding the file name with a dot, dot, dot,

123
00:09:33,020 --> 00:09:37,520
dot slash and the final name is config instead of an article ID.

124
00:09:38,570 --> 00:09:44,210
In effect, the contents of the config PDP file is displayed if only it exists there.

125
00:09:45,350 --> 00:09:52,460
This way a malicious user can traverse your file system and access any file they want, including those

126
00:09:52,460 --> 00:09:54,080
outside the web root.

127
00:09:55,520 --> 00:09:56,280
By the way.

128
00:09:56,300 --> 00:10:02,960
Path traversal is of course, only one security hole in this very basic, extremely vulnerable example.

129
00:10:04,830 --> 00:10:09,000
The same type of attack can be conducted when uploading or deleting a file.

130
00:10:09,570 --> 00:10:12,960
In other words, something might be put in a place where it shouldn't be.

131
00:10:13,380 --> 00:10:20,160
Or something unintended might get deleted if only a user will be able to somehow influence the target

132
00:10:20,160 --> 00:10:20,550
path.

133
00:10:23,420 --> 00:10:30,740
Brute force is a method of guessing an unknown value, like a password or a file path by trying numerous

134
00:10:30,740 --> 00:10:33,380
potential values until a match is found.

135
00:10:35,620 --> 00:10:41,890
Brute force, especially when used to guess a password is often combined with a dictionary attack in

136
00:10:41,890 --> 00:10:49,060
which popular words, phrases or characters outright first before trying random and meaningful strings.

137
00:10:50,640 --> 00:10:58,410
The usual brute force protection is to limit the number of allowed trees, limit the rate in which a

138
00:10:58,410 --> 00:11:06,510
certain action can be done, intentionally delay or slow down the sensitive process, or to implement

139
00:11:06,510 --> 00:11:09,000
a capture mechanism if really needed.

140
00:11:13,490 --> 00:11:17,990
The last type of attack to mention is the U.S. denial of service.

141
00:11:19,100 --> 00:11:24,620
It's a type of attack in which an attacker sense more requests at the same time than the server can

142
00:11:24,620 --> 00:11:30,050
handle until the server stops responding to further requests coming from anyone.

143
00:11:31,610 --> 00:11:38,540
D d us with double D stands for Distributed Denial of Service and is a name for a situation in which

144
00:11:38,540 --> 00:11:44,660
these numerous requests come from multiple computers and IP addresses, which makes it impossible to

145
00:11:44,660 --> 00:11:49,280
react by simply booking a single hyperactive IP or a range of IP.

146
00:11:50,480 --> 00:11:53,690
Actually, I'm only mentioning it here to explain the term.

147
00:11:54,290 --> 00:11:59,870
There is no simple way to protect from these kinds of attacks, and because it's rather an attack on

148
00:11:59,870 --> 00:12:05,960
the network infrastructure than the particular site's vulnerability there, there's little a web developer

149
00:12:05,960 --> 00:12:07,850
can do to protect this site from them.

150
00:12:08,750 --> 00:12:14,810
But what the developer can do is write the very well optimized backend code and the highly effective

151
00:12:14,810 --> 00:12:17,880
rescue worker is a part of that.

152
00:12:17,900 --> 00:12:20,360
I recommend to use a powerful hosting.

153
00:12:20,990 --> 00:12:28,070
And then, if needed, a well-tested and the US solution like Cloudflare did the US Protection Service.
