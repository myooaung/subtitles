WEBVTT
1
00:00:06.830 --> 00:00:08.120
On existing sites.

2
00:00:08.120 --> 00:00:11.300
Changing the password encryption method needs some effort.

3
00:00:11.660 --> 00:00:17.360
I assume you already store only password hashes in your database, so not knowing the user's actual

4
00:00:17.360 --> 00:00:21.050
passwords, you cannot rehouse them with a more secure algorithm.

5
00:00:22.790 --> 00:00:26.690
One way to do that would be to wait for each user's next log in.

6
00:00:27.230 --> 00:00:32.630
This is the time when you have a plaintext password available and you can rehash it with password hashing

7
00:00:32.630 --> 00:00:33.230
API.

8
00:00:34.100 --> 00:00:40.460
You will need to keep your existing code as legacy authentication method and add a new method that uses

9
00:00:40.460 --> 00:00:43.490
password caching API for migrated users.

10
00:00:45.350 --> 00:00:50.840
Also, you need an extra column in your database where you will mark whether the user is already migrated

11
00:00:50.840 --> 00:00:51.500
or not.

12
00:00:55.800 --> 00:01:02.160
Now on each log in check if the user had already been migrated to strong hash by verifying the password

13
00:01:02.160 --> 00:01:03.180
migrated field.

14
00:01:03.810 --> 00:01:08.070
If not, use the legacy authentication method to verify the password.

15
00:01:09.480 --> 00:01:11.430
Generate the new hash with password.

16
00:01:11.430 --> 00:01:12.290
Hash function.

17
00:01:15.080 --> 00:01:18.770
Replace the hash in the database and mark the user as migrated.

18
00:01:22.780 --> 00:01:24.630
And for all migrated users.

19
00:01:24.640 --> 00:01:28.330
Just use the new authentication method on subsequent logins.

20
00:01:29.810 --> 00:01:33.590
This method is not too difficult but has a serious downside.

21
00:01:34.220 --> 00:01:41.000
Unless all users will log into the site and number of legacy password hashes will still remain vulnerable.

22
00:01:41.630 --> 00:01:47.630
It can take a long time to migrate all active users and of course some people will never log in again,

23
00:01:47.960 --> 00:01:51.020
so their hashes will remain vulnerable forever.

24
00:01:54.600 --> 00:01:57.120
This is why it's better to act proactively.

25
00:01:57.660 --> 00:02:03.870
The recommended way is to run through all users table and use puzzle testing API to generate strong

26
00:02:03.870 --> 00:02:08.340
hashes from currently stored hashes instead of actual passwords.

27
00:02:09.540 --> 00:02:14.820
Hashing hashes is of course not ideal, but still better than keeping weak hashes.

28
00:02:16.670 --> 00:02:21.050
And because we were not done yet, we still need the extra code online database.

29
00:02:23.120 --> 00:02:26.990
Now on each log in, the procedure is pretty much the same as before.

30
00:02:27.890 --> 00:02:33.500
Check if the user had already been migrated to strong hash by verifying the password migrated field.

31
00:02:34.100 --> 00:02:40.720
If not, verify the password first, convert it to the legacy hash and only then provide to password

32
00:02:40.720 --> 00:02:41.810
to verify function.

33
00:02:44.570 --> 00:02:48.500
Generate the new strong password hash based on the plaintext password.

34
00:02:50.930 --> 00:02:55.430
Replace the password hashing the database and the the user is migrated.

35
00:02:59.610 --> 00:03:05.610
And just like with the first strategy for all migrated users, just use the new authentication method

36
00:03:05.640 --> 00:03:06.990
on subsequent logins.
