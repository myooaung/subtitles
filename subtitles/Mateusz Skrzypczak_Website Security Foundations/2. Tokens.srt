1
00:00:05,940 --> 00:00:12,000
Let's see how to create a simple, token system that would greatly help to mitigate sea serif attacks.

2
00:00:12,930 --> 00:00:16,740
But first, if you use any framework, consult its documentation.

3
00:00:17,700 --> 00:00:21,840
There's a good chance it will have some built in A.C. SRF mechanisms.

4
00:00:22,350 --> 00:00:25,260
For example, Symphony and Laravel do have them.

5
00:00:26,220 --> 00:00:30,240
If you don't use the framework or have whatever reason, you need to do it by yourself.

6
00:00:30,510 --> 00:00:32,310
Here's a basic working example.

7
00:00:34,140 --> 00:00:37,860
First we start off by creating a session book and for the current user.

8
00:00:41,240 --> 00:00:45,680
Not that the tokens should be generated using a secure random value generator.

9
00:00:46,430 --> 00:00:52,160
If you follow the earlier part of the course, you already know that using the once popular MD5 and

10
00:00:52,160 --> 00:00:55,460
empty round method is not considered secure anymore.

11
00:00:56,180 --> 00:01:01,670
If only you are on BGP seven or eight, use the bin to hex and the random bytes method.

12
00:01:04,400 --> 00:01:09,500
You can more tightly bind the token with the user by combining the token with the user's session ID,

13
00:01:09,980 --> 00:01:13,030
user name or user id like in this code.

14
00:01:16,580 --> 00:01:18,830
Now you have two new variables in session.

15
00:01:19,310 --> 00:01:25,580
The first one is a rookie is a secret, fully random string that will never be displayed anywhere on

16
00:01:25,580 --> 00:01:26,060
the page.

17
00:01:27,570 --> 00:01:28,200
The other.

18
00:01:28,500 --> 00:01:33,020
A rough token is what you're going to use on your page to prevent CSR attacks.

19
00:01:34,020 --> 00:01:40,230
It's constructed from a token as we did before, but also user ID and the current session ID.

20
00:01:42,040 --> 00:01:47,980
This construction is just an extra layer of security to avoid having totally random CSR if token.

21
00:01:50,110 --> 00:01:53,080
The hash function creates a key hash.

22
00:01:53,350 --> 00:01:58,570
That means a hash that will not be resolved without a key, which we pass as a third argument.

23
00:02:00,300 --> 00:02:04,080
So we have the NTC SRF token further protected by the key.

24
00:02:09,950 --> 00:02:15,950
Now you need to implement the tokens in forums, AJAX requests and when doing any other request that

25
00:02:15,950 --> 00:02:18,020
permanently changes something in your app.

26
00:02:18,710 --> 00:02:20,900
These are called status changing requests.

27
00:02:22,470 --> 00:02:25,800
For forums, you just need to add the hidden input if you'd like this.

28
00:02:29,940 --> 00:02:36,120
For Ajax requests in JavaScript, you can either make it another parameter for the request or send it

29
00:02:36,120 --> 00:02:37,440
as an HTP header.

30
00:02:39,240 --> 00:02:45,660
Often developers put the NPC SRF token in a metal tag and the reference these tags value in the script.

31
00:02:48,530 --> 00:02:54,290
At the beginning of the script, we have a function that checks whether the NTC SRF token is needed

32
00:02:54,290 --> 00:02:54,890
or not.

33
00:02:55,940 --> 00:03:02,600
In this case, I excluded the get head and options methods which according to standards, are not meant

34
00:03:02,600 --> 00:03:04,850
to be used for state changing operations.

35
00:03:05,960 --> 00:03:10,970
But be aware that this effectively disables the CSR if protection for those requests.

36
00:03:11,930 --> 00:03:17,750
I will explain in a moment why get method is excluded here and why it should not be used for such sensitive

37
00:03:17,750 --> 00:03:18,470
operations.

38
00:03:20,270 --> 00:03:22,070
Then we have a normal AJAX code.

39
00:03:22,940 --> 00:03:25,580
We create an example CTP request object.

40
00:03:26,420 --> 00:03:30,770
We open a post connection and we form data we wants to send.

41
00:03:32,530 --> 00:03:38,970
Then we add the token if the method actually token exists and if the token is needed for our request

42
00:03:38,980 --> 00:03:44,170
method both we add a request header with the value of the token.

43
00:03:46,820 --> 00:03:47,180
Here.

44
00:03:47,180 --> 00:03:49,790
We named the header x a.c. srf.

45
00:03:50,330 --> 00:03:55,880
We can choose any name for the heather we want, but need to be careful about not using a name that

46
00:03:55,880 --> 00:04:01,070
is already in use either as a part of the standard or some widely used custom.

47
00:04:01,070 --> 00:04:01,460
Heather.

48
00:04:02,270 --> 00:04:02,660
No.

49
00:04:02,660 --> 00:04:09,620
Heather in the HTP specification will ever start with x prefix, but there are some widely used that

50
00:04:09,620 --> 00:04:09,920
do.

51
00:04:10,550 --> 00:04:15,650
For example, in this course we used x frame options or x content type options.

52
00:04:18,640 --> 00:04:23,890
If you don't want us to use the HDTV head there for some reason you can include the token in request

53
00:04:23,890 --> 00:04:24,640
parameters.

54
00:04:27,890 --> 00:04:33,050
In this example, I just added the CSR if token parameter to the post data string.

55
00:04:33,830 --> 00:04:39,830
If you send data using form data or JSON, the parameter would need to be applied in a slightly different

56
00:04:39,830 --> 00:04:40,160
way.

57
00:04:40,910 --> 00:04:44,150
So I think it's just easier to use the ATP header.

58
00:04:48,960 --> 00:04:54,030
Additionally, you can create a common mechanism for all your requests to not repeat the same called

59
00:04:54,030 --> 00:04:55,380
over and over again.

60
00:04:57,030 --> 00:05:02,010
One way would be to create a function that will read the token and said the appropriate header when

61
00:05:02,010 --> 00:05:02,460
needed.

62
00:05:07,330 --> 00:05:12,940
Another way would be to create a wrapper for the send method that would do the same and also send the

63
00:05:12,940 --> 00:05:14,140
request straight away.

64
00:05:18,690 --> 00:05:24,870
In January, there's the Ajax setup method that is intended to set some defaults for all AJAX requests.

65
00:05:28,900 --> 00:05:35,110
Not that this will influence all Ajax calls made with the j query that is using all methods like Ajax,

66
00:05:35,320 --> 00:05:37,270
get post etc..

67
00:05:38,660 --> 00:05:44,450
But in this code we run the need to see a serif method as in other examples which will skip the talking,

68
00:05:44,450 --> 00:05:47,540
forget CAD and options requests anyway.

69
00:05:51,470 --> 00:05:51,830
Okay.

70
00:05:51,830 --> 00:05:58,130
So we prepared our forums and schools to send the intakes, our F token, and now we need to verify

71
00:05:58,130 --> 00:05:58,280
it.

72
00:05:59,630 --> 00:06:06,560
It's as easy as comparing the HTP headers and with the request or the request param with the token stored

73
00:06:06,560 --> 00:06:07,460
in session data.

74
00:06:09,140 --> 00:06:10,370
This is an example.

75
00:06:10,370 --> 00:06:16,280
If we use the ATP header, we can get the token from the server super global by its name.

76
00:06:20,670 --> 00:06:25,920
And if we send the token as their request parameter, that is, for example, using hidden form field,

77
00:06:26,340 --> 00:06:29,010
we need to use the appropriate super global to find it.

78
00:06:32,710 --> 00:06:38,770
Know that we use the hash equals method rather than equals operator which is double or triple equals

79
00:06:38,770 --> 00:06:39,190
sign.

80
00:06:39,970 --> 00:06:45,970
This is because hash equals method is safe for timing attacks, which means a malicious user will not

81
00:06:45,970 --> 00:06:52,000
be able to guess if he or she is close to guessing the hash or not by analyzing the server's response

82
00:06:52,000 --> 00:06:52,450
time.

83
00:06:53,830 --> 00:06:58,510
This is the same case as with password to verify function in password caching API.

84
00:07:03,350 --> 00:07:06,530
So far we used a single token per whole user session.

85
00:07:07,040 --> 00:07:13,160
This is fine and does a good job, but it could be made more secure by generating a new token after

86
00:07:13,160 --> 00:07:14,900
each successful validation.

87
00:07:18,210 --> 00:07:22,290
This offers much better protection in case the position taken would leak.

88
00:07:23,720 --> 00:07:27,800
But note that per request tokens may hurt the usability of your site.

89
00:07:28,610 --> 00:07:33,050
Each request will invalidate the previous token and generate a new one.

90
00:07:33,500 --> 00:07:39,230
So doing operations on multiple dapps may not be possible, and this will probably irritate some of

91
00:07:39,230 --> 00:07:39,890
your users.

92
00:07:42,250 --> 00:07:45,850
To combine both approaches you could use per operation tokens.

93
00:07:46,810 --> 00:07:52,990
For example, there could be two different tokens to delete user with AD one and the user with ID two.

94
00:07:56,100 --> 00:08:01,800
The difference is that we don't use the global C SRF token from session variables, but we generate

95
00:08:01,800 --> 00:08:05,070
the hash for a unique string using the sessions.

96
00:08:05,070 --> 00:08:08,340
See your serif key, which we have set up at the beginning.

97
00:08:10,110 --> 00:08:16,380
That way for the phrase delete user one we will have a totally different token then for the phrase delete

98
00:08:16,380 --> 00:08:17,070
user to.

99
00:08:18,510 --> 00:08:22,470
And if one of them leaks, it can be used to complete the other operation.

100
00:08:25,190 --> 00:08:31,040
And to verify the token, you need to recreate the phrase and compare the generated hash with what you

101
00:08:31,040 --> 00:08:32,240
received as a token.
