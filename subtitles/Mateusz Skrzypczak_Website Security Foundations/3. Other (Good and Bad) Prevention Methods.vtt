WEBVTT
1
00:00:05.520 --> 00:00:10.470
There's one more neat feature that can help you prevent cross-site request forgery attacks.

2
00:00:11.220 --> 00:00:15.780
It's a fairly new addition to the cookie mechanism, which is a same site attribute.

3
00:00:16.470 --> 00:00:19.740
It lets us block the cookie from being sent in certain scenarios.

4
00:00:21.140 --> 00:00:27.770
The basis of Caesar of attack is that a third party site sends a malicious request to the site on which

5
00:00:27.770 --> 00:00:29.090
the user is logged in.

6
00:00:30.320 --> 00:00:37.160
The state of being locked in or not is usually determined by the server by reading the session ID from

7
00:00:37.160 --> 00:00:43.010
a cookie which is sent by the browser along with the request or by reading whatever ads from the browser

8
00:00:43.010 --> 00:00:50.330
that the server needs to ensure the user is correctly logged in so we can opt out of sending certain

9
00:00:50.330 --> 00:00:57.320
cookies like those session cookies when the request is initiated by a third party site, in this case,

10
00:00:57.320 --> 00:00:58.310
the malicious site.

11
00:00:59.660 --> 00:01:03.470
If that cookie will not be sent, the cross-site request will fail.

12
00:01:04.790 --> 00:01:10.580
This is as great as it sounds, but needs to be treated with some special care and it's definitely not

13
00:01:10.580 --> 00:01:14.750
something that you can use instead of a token, but rather along with it.

14
00:01:18.580 --> 00:01:21.370
The same site attributes can have three values.

15
00:01:22.660 --> 00:01:28.870
Strict means that the cookie will only be sent when the request goes from and to this same origin.

16
00:01:29.380 --> 00:01:35.710
For example, when the request to ww w example dot com goes from w w w example dot com.

17
00:01:36.460 --> 00:01:40.450
The security in this case is very high, but usability is poor.

18
00:01:42.020 --> 00:01:44.920
Let's assume the user is logged in on example dot com.

19
00:01:46.450 --> 00:01:54.790
Then he goes to the example two dot com site and when that site even links to example dot com, the

20
00:01:54.790 --> 00:02:00.790
browser will also stop the cookies on that request and the user with that on example dot com is not

21
00:02:00.790 --> 00:02:05.710
logged in, which in some cases would be unexpected and confusing for the user.

22
00:02:07.330 --> 00:02:13.270
But on the other hand, there are situations in which you really don't expect any external sites linking

23
00:02:13.270 --> 00:02:14.020
to your site.

24
00:02:15.010 --> 00:02:21.370
For example, no bank online, casino or lottery expects any requests coming from the outside to their

25
00:02:21.370 --> 00:02:22.510
transaction systems.

26
00:02:25.890 --> 00:02:32.220
A value of lots allow sending the cookie along with certain types of requests which are not considered

27
00:02:32.220 --> 00:02:33.030
as harmful.

28
00:02:33.630 --> 00:02:39.090
It includes linking from one place to another or get requests for many sites.

29
00:02:39.120 --> 00:02:41.220
This seems to be the optimal solution.

30
00:02:41.670 --> 00:02:47.640
It doesn't break the large amount of legitimate requests, but blocks many potential cross-site request

31
00:02:47.640 --> 00:02:48.570
forgery attacks.

32
00:02:50.400 --> 00:02:55.920
Use it when you don't want to stop cookies from being sent when a user is coming from another site like

33
00:02:55.920 --> 00:02:56.670
strict would do.

34
00:02:58.080 --> 00:03:03.750
And whenever you don't explicitly need the cookies to be sent with every request coming from everywhere.

35
00:03:04.170 --> 00:03:09.840
Like without this same site that's reviewed, for example, unless you are creating a system for tracking

36
00:03:09.840 --> 00:03:10.350
users.

37
00:03:14.690 --> 00:03:21.230
The last value is none, which effectively disables any protection coming from the same site attribute.

38
00:03:22.690 --> 00:03:27.910
As Chrome started to treat cookies without the same side attributes as having the value of flax.

39
00:03:28.360 --> 00:03:33.340
If you really need the cookies to be sent with every request, for example, for the mentioned user

40
00:03:33.340 --> 00:03:37.990
tracking purposes, you should explicitly specify the non value.

41
00:03:40.840 --> 00:03:45.250
And finally, this is how to use this attribute when setting cookies in BHP.

42
00:03:48.710 --> 00:03:49.820
And in JavaScript.

43
00:03:52.460 --> 00:03:56.090
And it should be available in any cookie management plugin that you use.

44
00:03:56.600 --> 00:04:00.470
For example, in the popular JS cookie, you would need to read this.

45
00:04:03.310 --> 00:04:06.670
As the same said attribute is the recent addition to cookie standard.

46
00:04:06.910 --> 00:04:09.130
We should verify the browsers compatibility.

47
00:04:10.180 --> 00:04:11.800
Looking at can I use dot com?

48
00:04:11.890 --> 00:04:13.930
The compatibility looks pretty good.

49
00:04:14.950 --> 00:04:20.740
And the best thing is that legacy browsers and those which still have some issues with generally ignored

50
00:04:20.740 --> 00:04:21.460
this attribute.

51
00:04:21.820 --> 00:04:25.540
So you can use it without having to worry about backwards compatibility.

52
00:04:27.890 --> 00:04:34.250
So using this is pretty easy, but unfortunately it's not so dependable to ditch the token system completely

53
00:04:34.940 --> 00:04:35.390
first.

54
00:04:35.480 --> 00:04:40.670
Some of the browsers which do not support it, are still in use and it wouldn't be nice to put their

55
00:04:40.670 --> 00:04:41.660
users on risk.

56
00:04:42.920 --> 00:04:50.150
Second, using strict can affect usability and using locks does not protect the site in certain scenarios

57
00:04:50.450 --> 00:04:51.830
like the mentioned cross site.

58
00:04:51.830 --> 00:04:58.430
Get requests, so use this same site attribute but not as the sole CSR of protection.

59
00:05:03.450 --> 00:05:09.660
I already mentioned that using get for states changing requests is a bad idea and the few reasons for

60
00:05:09.660 --> 00:05:09.930
that.

61
00:05:10.350 --> 00:05:12.510
Let me pull together all the arguments.

62
00:05:13.560 --> 00:05:17.880
First, it exposes all parameters in the URL as a query string.

63
00:05:18.990 --> 00:05:20.430
It's visible on the screen.

64
00:05:21.270 --> 00:05:23.220
It may be stored in server logs.

65
00:05:24.300 --> 00:05:27.330
It may be sent to the external site in a referrer header.

66
00:05:28.350 --> 00:05:33.450
Any data being sent with this method is more likely to leak than when using other methods.

67
00:05:35.460 --> 00:05:42.450
Second, as it exposes all parameters in the URL and the NPC SRF token, send it this way would be exposed

68
00:05:42.450 --> 00:05:45.240
to and the token system could be compromised.

69
00:05:46.890 --> 00:05:50.040
Third, it makes this year's attacks much easier.

70
00:05:50.400 --> 00:05:56.220
It's not a very big deal to try an attack with both methods, but attacking with get is super easy.

71
00:05:57.150 --> 00:06:01.410
For example, it would be enough to place something like this on the malicious page.

72
00:06:02.850 --> 00:06:08.010
No image will load of course, but the request to the example dot com will be sent without the user

73
00:06:08.010 --> 00:06:09.090
even noticing that.

74
00:06:10.380 --> 00:06:15.690
On the other hand, when using both method for a state changing operation, the request would have to

75
00:06:15.690 --> 00:06:21.660
be initiated by JavaScript code, or the user would need to click something on the malicious site to

76
00:06:21.660 --> 00:06:23.910
allow its owner to carry out an attack.

77
00:06:25.820 --> 00:06:32.270
Also any cookie with same side attributes that two lacks will be sent along with get requests even if

78
00:06:32.270 --> 00:06:34.130
initiated by a third party site.

79
00:06:36.250 --> 00:06:39.820
And finally, it's just not what this method was designed for.

80
00:06:40.390 --> 00:06:43.210
As its name suggests, it's forgetting data.

81
00:06:43.630 --> 00:06:49.540
It's one of the basis of restful web services where you use get method to read data and other methods

82
00:06:49.540 --> 00:06:51.850
to write, update or delete the data.

83
00:06:54.670 --> 00:07:00.700
Also remember that in your code you must get the incoming data from a proper super global post.

84
00:07:00.700 --> 00:07:08.060
When you expect post method, get when you expect to get the method etc. Don't use the request super

85
00:07:08.060 --> 00:07:11.560
global unless you have a good reason and you know what you are doing.

86
00:07:15.080 --> 00:07:20.900
In case you thought you have a simpler idea for NBC SRF protection, let me describe two methods that

87
00:07:20.900 --> 00:07:22.640
will certainly be ineffective.

88
00:07:24.100 --> 00:07:28.750
One way of ensuring the validity of request might be controlling the requests or region.

89
00:07:31.900 --> 00:07:39.940
In other words, checking if htp heather called origin matches your site and in case it's empty if the

90
00:07:39.940 --> 00:07:42.550
referrer had the beginning matches your site.

91
00:07:45.230 --> 00:07:50.450
First and foremost, both of those categories may not be sent by the browser when we expect them.

92
00:07:50.840 --> 00:07:53.960
So relying on them might result in false positives.

93
00:07:55.400 --> 00:07:58.490
For example, origin will not be sent by many browsers.

94
00:07:58.490 --> 00:08:03.650
Forget requests and referrer might be stripped out by referrer policy header.

95
00:08:03.920 --> 00:08:05.090
And there are more cases.

96
00:08:06.440 --> 00:08:10.190
Also in the particular case of cross-site request forgery attacks.

97
00:08:10.430 --> 00:08:17.180
We came to some extent trust those two headers, but learning to trust them in general is very dangerous.

98
00:08:17.810 --> 00:08:24.110
The CSR of Attack needs a regular browser of the legitimate user, and because the regular browsers

99
00:08:24.110 --> 00:08:30.860
adhere to security standards, they will not let anyone to manipulate certain HTP headers with both

100
00:08:30.890 --> 00:08:33.320
origin and referrer on the forbidden list.

101
00:08:34.340 --> 00:08:40.280
So the attacker will not be able to manipulate the legitimate user's browser to spoof either of those

102
00:08:40.280 --> 00:08:41.030
two headers.

103
00:08:42.470 --> 00:08:48.200
But for any other attack for which the attacker doesn't need a legitimate user and their regular browser,

104
00:08:48.530 --> 00:08:53.660
they can use custom software instead of the browser to send whatever HTP headers they want.

105
00:08:54.230 --> 00:08:57.440
So in general, it's wrong to rely on any of them.

106
00:08:58.160 --> 00:09:03.590
HTP headers are part of incoming data for which you should have no trust at all.

107
00:09:04.430 --> 00:09:06.590
This is why Talking Systems still wins.

108
00:09:10.580 --> 00:09:16.250
Also, some people think that asking user to confirm an operation is sufficient to avoid a cross-site

109
00:09:16.250 --> 00:09:17.540
request forgery attack.

110
00:09:18.680 --> 00:09:24.020
An attacker tries to, for example, transfer the money but will get stuck on the second step because

111
00:09:24.020 --> 00:09:26.060
the user will not confirm the operation.

112
00:09:27.200 --> 00:09:28.730
This is very wrong assumption.

113
00:09:29.750 --> 00:09:35.630
First, if all the data is sent along with the request, the confirmation page could be attacked directly

114
00:09:35.960 --> 00:09:38.090
and the theatre of attack will succeed.

115
00:09:39.020 --> 00:09:43.730
For the attacker, it doesn't matter if they attack the transfer page or confirm transfer page.

116
00:09:43.820 --> 00:09:51.080
If they both accept the amount and the destination, people try to fix that vulnerability by storing

117
00:09:51.080 --> 00:09:52.310
the data from transfer.

118
00:09:52.670 --> 00:09:57.020
Be in session and read the session data on conference transfer BHP.

119
00:09:58.070 --> 00:10:04.070
But then the attacker just needs to run two requests, one to store the data in session and the other

120
00:10:04.070 --> 00:10:05.840
one to run the actual transfer.

121
00:10:06.470 --> 00:10:09.800
So using this approach gives a false sense of security.

122
00:10:12.580 --> 00:10:16.930
To protect critical operations, you might consider some other verification methods.

123
00:10:17.230 --> 00:10:25.030
For example, via email, Assamese, etc. But constantly asking users for confirmation can make them

124
00:10:25.030 --> 00:10:28.270
actually stop paying attention to what they are confirming.

125
00:10:29.140 --> 00:10:35.170
Better to ask users to double check only certain consequential actions like money transfer or password

126
00:10:35.170 --> 00:10:38.140
change to ensure them what they are about to do.

127
00:10:38.980 --> 00:10:43.060
But it's not the solution to prevent cross-site request forgery attacks.

128
00:10:46.240 --> 00:10:52.900
So far, we've talked about protecting a user that already is logged in on the site, but it's important

129
00:10:52.900 --> 00:10:58.300
to protect the login forms too without NTC or service protection.

130
00:10:58.510 --> 00:11:04.510
A logging form could be used to log someone onto an attacker's account and steal the information the

131
00:11:04.510 --> 00:11:06.430
user would provide when logged in.

132
00:11:07.060 --> 00:11:09.610
For example credit card number during payment.

133
00:11:11.410 --> 00:11:16.900
To protect logging forms, you simply need to start this session even before the user logs into your

134
00:11:16.900 --> 00:11:21.670
site and use NTC SRF tokens in the authenticated sessions.

135
00:11:24.300 --> 00:11:28.830
It would need a random token, the same that we did in the very first example.

136
00:11:31.310 --> 00:11:36.860
And as we discussed in the chapter of Old Sessions, after a successful log in, the existing session

137
00:11:36.860 --> 00:11:43.850
must be destroyed and the brand new session must be created with another recession ID and another NTC

138
00:11:43.850 --> 00:11:45.140
SRF session token.

139
00:11:52.830 --> 00:11:55.230
Whichever A.C. is are of method use.

140
00:11:55.620 --> 00:11:58.590
When an attacker is able to put a script on your side.

141
00:11:58.830 --> 00:12:01.320
They can break most of the security measures.

142
00:12:02.340 --> 00:12:08.010
They will have full access to your pages, document, object, model and cookies, which means to all

143
00:12:08.010 --> 00:12:09.750
places where you keep this secret.

144
00:12:09.750 --> 00:12:11.430
Dawkins Which you rely on.

145
00:12:12.580 --> 00:12:18.880
It very clearly shows how one vulnerability may be used as a base to conduct a different type of attack.
