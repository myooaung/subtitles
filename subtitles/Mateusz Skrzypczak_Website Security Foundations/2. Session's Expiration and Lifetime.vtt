WEBVTT
1
00:00:05.370 --> 00:00:11.520
The session cookie should not have an expiration date or max age so that it will be treated as a non

2
00:00:11.520 --> 00:00:17.190
persistent cookie in the browser and it will be removed when a user closes the browser window or quits

3
00:00:17.190 --> 00:00:17.370
it.

4
00:00:18.360 --> 00:00:24.870
But each session definitely needs an expiration date to ensure it doesn't last too long.

5
00:00:24.900 --> 00:00:28.980
You need to create your own two mechanisms in the back end of your site.

6
00:00:29.910 --> 00:00:35.550
The first mechanism should invalidate this session after a specified time of inactivity.

7
00:00:36.420 --> 00:00:38.370
You can do it with this simple code.

8
00:00:43.440 --> 00:00:51.000
So first in your project settings defined the allowed time of inactivity, then on each request for

9
00:00:51.000 --> 00:00:58.350
authenticated users, check if the last activity timestamp is not less than the current timestamp minus

10
00:00:58.350 --> 00:01:00.600
these session expired time which we defined.

11
00:01:01.950 --> 00:01:08.340
In other words, if the last activity was earlier than 30 minutes ago, ask the user to re authenticate

12
00:01:08.490 --> 00:01:09.960
or for the logout process.

13
00:01:10.890 --> 00:01:17.610
And if the inactivity was shorter than 30 minutes, the last activity timestamp is updated to the current

14
00:01:17.610 --> 00:01:20.700
timestamp to give the user another 30 minutes.

15
00:01:23.480 --> 00:01:29.000
But when we're only checking the time passed from the last user's activity we risk than an attacker

16
00:01:29.000 --> 00:01:35.210
who stole decision ID would make some meaningless request on the constant basis just to keep the session

17
00:01:35.210 --> 00:01:35.660
alive.

18
00:01:37.100 --> 00:01:43.310
However, if you introduce an absolute expiration date and it passes, they will not be able to prolong

19
00:01:43.310 --> 00:01:44.780
the session any further.

20
00:01:46.970 --> 00:01:53.210
Of course, setting the expiry date and time in a cookie is a bad way to do that as it can be manipulated.

21
00:01:54.260 --> 00:01:59.210
The check must be done on the server and the second mechanism you need to create.

22
00:02:00.670 --> 00:02:07.270
And after the absolute expiration they passed the user, legitimate or malicious would need to re authenticate

23
00:02:07.270 --> 00:02:09.190
to be able to continue the session.

24
00:02:09.550 --> 00:02:12.130
And of course, the session should gain a new ID.

25
00:02:15.700 --> 00:02:21.520
How long the absolute session lifetime should be needs to be calculated depending on the project and

26
00:02:21.520 --> 00:02:22.660
its risk assessment.

27
00:02:23.440 --> 00:02:29.560
In general, the longer the expiration period, the longer a potential attacker will be able to use

28
00:02:29.560 --> 00:02:30.190
this session.

29
00:02:31.480 --> 00:02:37.330
The shorter the expiry time, the more frequently users will need to re authenticate, which might be

30
00:02:37.330 --> 00:02:44.260
frustrating and if not properly handled, any of their unsaved work might get discarded, which will

31
00:02:44.260 --> 00:02:45.880
be even more frustrating.

32
00:02:47.380 --> 00:02:53.920
Note that in many cases the attacker doesn't really need much time to do the damage, but in some cases,

33
00:02:53.920 --> 00:03:00.040
after gaining unauthorized access to a session, they may need to wait to carry out their attack, which

34
00:03:00.040 --> 00:03:03.670
can be held off by absolute expiration date and time.

35
00:03:07.440 --> 00:03:09.930
To implement the absolute expiration time.

36
00:03:09.930 --> 00:03:13.860
In the simplest way, you need to define the maximum session length.

37
00:03:14.460 --> 00:03:19.770
In other words, each user will only be able to hold the session for this amount of time.

38
00:03:20.160 --> 00:03:21.690
In our case, it's seven days.

39
00:03:22.410 --> 00:03:26.640
After that, they will not be able to keep the session alive any further.

40
00:03:29.110 --> 00:03:35.830
Next during login introduced another session variable which will hold the calculated absolute expiration

41
00:03:35.830 --> 00:03:36.460
timestamp.

42
00:03:38.640 --> 00:03:45.390
Then on each request perform a similar check as we did earlier for the inactivity period, but this

43
00:03:45.390 --> 00:03:49.530
time compared the absolute expiration time stamp with current time.

44
00:03:51.320 --> 00:03:56.750
And you don't update anything in session data here because the absolute expiration date and time must

45
00:03:56.750 --> 00:04:00.410
always be set once during logging and remain unchanged.

46
00:04:00.800 --> 00:04:02.030
That's the whole idea.

47
00:04:04.860 --> 00:04:11.370
Both mechanisms for absolute and the relative session expiration turn out to be pretty easy from a technological

48
00:04:11.370 --> 00:04:17.760
point of view, but they are tricky from usability perspective, and you should make it as smooth as

49
00:04:17.760 --> 00:04:19.590
possible for legitimate users.

50
00:04:20.040 --> 00:04:23.730
Otherwise they will easily get frustrated with their broken sessions.

51
00:04:24.870 --> 00:04:30.060
The examples they give you improve security, but they're very basic and have poor usability.

52
00:04:32.500 --> 00:04:38.440
The absolute expiration time is deadly for a session, so we definitely need to work on it a bit more.

53
00:04:39.440 --> 00:04:45.050
First, it would be a good idea to display the expiration date and time in some visible place.

54
00:04:46.680 --> 00:04:48.330
But let's be honest, not much.

55
00:04:48.330 --> 00:04:49.650
People will pay attention.

56
00:04:51.030 --> 00:04:56.490
So when the session is about to expire, it should be communicated to the user in some more explicit

57
00:04:56.490 --> 00:05:02.520
way so that they would know they should re authenticate before starting any activity that could last

58
00:05:02.520 --> 00:05:04.710
longer than the time until expiration.

59
00:05:06.370 --> 00:05:12.940
In this example, we showed the alert one hour before the expiration time, but this can vary in case

60
00:05:12.940 --> 00:05:15.040
of a simple form like money transfer.

61
00:05:15.310 --> 00:05:21.370
We can assume the user might need maybe up to 5 minutes to complete the form, but in case of filling

62
00:05:21.370 --> 00:05:27.070
in a complex form or writing an article in CMS, they might work on it much longer.

63
00:05:27.400 --> 00:05:29.590
For example, an hour as in this example.

64
00:05:30.490 --> 00:05:33.760
And better to inform the user too early than too late.

65
00:05:36.110 --> 00:05:42.140
But the user could still work on something longer than you think to make sure the work doesn't get lost

66
00:05:42.140 --> 00:05:44.270
when they finally hit the submit button.

67
00:05:44.540 --> 00:05:50.570
You could further improve the mechanism, for example, by running an Ajax request every 5 minutes or

68
00:05:50.570 --> 00:05:54.950
so, which could notify the server that the user is active on the site.

69
00:05:55.220 --> 00:06:00.110
For example, typing in the form fields and monitor the absolute expiration time.

70
00:06:00.110 --> 00:06:05.840
And when the session is really about to end, display an urgent alert instructing the user to save their

71
00:06:05.840 --> 00:06:07.640
work and re authenticate.

72
00:06:09.840 --> 00:06:13.530
WordPress handles that session expiration in a pretty nice way.

73
00:06:13.800 --> 00:06:19.800
When the session ends, it displays the overlay with the log in panel so you can just type in your credentials

74
00:06:19.800 --> 00:06:21.920
and continue with what you were working on.
