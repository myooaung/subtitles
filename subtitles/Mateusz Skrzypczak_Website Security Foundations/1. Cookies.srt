1
00:00:05,350 --> 00:00:08,890
We already discussed some security concerns regarding cookies.

2
00:00:09,470 --> 00:00:15,100
Let's now sum it up and talk about other cookies properties as pretty much all of them have some impact

3
00:00:15,100 --> 00:00:15,940
on security.

4
00:00:17,110 --> 00:00:22,330
But first, let's discuss what you can store in the cookies and what you absolutely shouldn't.

5
00:00:24,100 --> 00:00:29,800
Cookies and any other mechanisms that allow you to store anything in the user's browser, like local

6
00:00:29,800 --> 00:00:37,090
storage or session storage, are a convenient way to hold some data between your requests, but they

7
00:00:37,090 --> 00:00:42,880
can be entirely manipulated by users, which includes changing its values, properties, creating and

8
00:00:42,880 --> 00:00:43,630
deleting them.

9
00:00:44,560 --> 00:00:50,560
They store all the data in plaintext and they can be stolen with a cross-site scripting attack.

10
00:00:51,910 --> 00:00:57,880
So not only it's unsafe to store anything critical or secret there, but it also can't be trusted.

11
00:00:59,580 --> 00:01:03,420
A secure application should depend on the minimum of browsers storage.

12
00:01:04,260 --> 00:01:06,990
Ideally, it should only set the cookie with this session.

13
00:01:06,990 --> 00:01:13,740
I'd never store any log in financial or any other critical information in the browser.

14
00:01:14,370 --> 00:01:17,190
It is not saved there in the way it can be stolen.

15
00:01:17,400 --> 00:01:21,000
And also you can't trust this data once you stole it there.

16
00:01:23,270 --> 00:01:24,260
A part of that.

17
00:01:24,290 --> 00:01:31,220
Feel free to use cookies or web storage for any insignificant data like users language choice indications

18
00:01:31,220 --> 00:01:34,130
that they some pop up or some other preferences.

19
00:01:35,450 --> 00:01:41,210
Where to store all the other critical information always on the server in this session?

20
00:01:41,210 --> 00:01:41,630
Data.

21
00:01:49,460 --> 00:01:54,830
As the syntax for creating cookies is essentially just how atypical others are defined.

22
00:01:55,340 --> 00:01:59,000
You need to take extra care when setting the name and value for a cookie.

23
00:02:01,120 --> 00:02:05,770
For example, a semicolon or equal sign have special meanings in the syntax.

24
00:02:06,490 --> 00:02:12,550
So if you pass an input with those characters directly as the cookies value, the syntax goes completely

25
00:02:12,550 --> 00:02:12,970
wrong.

26
00:02:14,650 --> 00:02:20,980
This is an example of a raw HTP header, but usually you would rather create a cookie with set cookie

27
00:02:20,980 --> 00:02:25,540
function in BGP or with document cookie property in JavaScript.

28
00:02:25,900 --> 00:02:27,550
So let's see how it works there.

29
00:02:29,970 --> 00:02:37,350
When you use set cookie function in B2B, the cookies value will automatically be encoded like you would

30
00:02:37,350 --> 00:02:39,630
pass it through or url encode function.

31
00:02:41,210 --> 00:02:47,720
So even if it contains some cons equals signs, spaces and other special channels, it will not break

32
00:02:47,720 --> 00:02:48,410
the syntax.

33
00:02:50,820 --> 00:02:55,380
This code would set the cookie named model with the properly encoded value.

34
00:02:57,540 --> 00:03:00,480
Which after decoding is what we originally wanted.

35
00:03:01,890 --> 00:03:07,630
You don't need to do the decoding by yourself because the value in the cookie super global is already

36
00:03:07,680 --> 00:03:08,520
well decoded.

37
00:03:10,940 --> 00:03:16,580
And you can see the max age was correctly a part of cookie value, not the actual cookie parameter,

38
00:03:17,810 --> 00:03:24,020
but because cookie name cannot be encoded, BHP will not let you use any of the reserved characters

39
00:03:24,290 --> 00:03:25,460
like whitespace.

40
00:03:25,610 --> 00:03:29,240
Single quote equals sign, comma or semicolon.

41
00:03:29,900 --> 00:03:31,940
You will get the page B warning instead.

42
00:03:32,720 --> 00:03:36,860
That's why you need to keep cookie names free of any of those characters.

43
00:03:42,380 --> 00:03:49,460
JavaScript, on the other hand, will do nothing for you when setting cookies with document cookie property.

44
00:03:49,790 --> 00:03:52,910
You pretty much have to follow the HTP header syntax.

45
00:03:56,230 --> 00:04:02,290
This code would set the cookie named model with the value of that's the cookie and the max eight parameter

46
00:04:02,290 --> 00:04:06,310
5000 seconds from now because the value has not been encoded.

47
00:04:08,970 --> 00:04:10,530
You need to do it by yourself.

48
00:04:10,830 --> 00:04:14,260
And in JavaScript, the corresponding functions to be raw.

49
00:04:14,280 --> 00:04:17,750
You are in code and the raw you are the code are in code.

50
00:04:17,760 --> 00:04:21,540
You are a component and the code you are a component respectively.

51
00:04:22,770 --> 00:04:28,380
But let me remind you that JavaScript and code, you are a component and each piece of all you are in

52
00:04:28,380 --> 00:04:32,550
code are not 100% equal in which characters they encode.

53
00:04:33,900 --> 00:04:38,520
We discussed the these differences in this chapter about cross-site scripting, and I showed you the

54
00:04:38,520 --> 00:04:42,360
methods suggested on MDM that fixes the JavaScript function.

55
00:04:43,800 --> 00:04:49,710
It runs the original method on the string and then encodes the five remaining characters that encode

56
00:04:49,710 --> 00:04:56,460
you are a component, leaves out exclamation mark, single quote left and right, parentheses and then

57
00:04:56,460 --> 00:04:57,060
asterisk.

58
00:04:59,600 --> 00:05:05,240
Using this method, you can safely exchange your AI encoded cookie data between JavaScript and BHP,

59
00:05:06,050 --> 00:05:08,570
for example, creating a cookie with a JavaScript.

60
00:05:10,490 --> 00:05:12,140
And reading it with BHP.

61
00:05:18,180 --> 00:05:22,020
There are certain cookies which you don't want to be alive for too long.

62
00:05:22,830 --> 00:05:26,430
Cookies that hold authenticated user session are a great example.

63
00:05:26,940 --> 00:05:31,260
However, in BGP, the parameters are controlled by PDP configuration.

64
00:05:31,500 --> 00:05:37,980
You don't set the manually, but still you can have other session related or privacy related cookies

65
00:05:37,980 --> 00:05:40,770
that you might only wants to store for a limited time.

66
00:05:41,790 --> 00:05:48,090
The cookies lifetime can be set using either of the two parameters expires or max age.

67
00:05:49,980 --> 00:05:57,180
The expires attribute sets the absolute expiry date and it expects a full date and time in UTC string

68
00:05:57,180 --> 00:05:59,040
format like in this example.

69
00:06:01,710 --> 00:06:08,820
Of course it's easy to create this very specific string in BHP set cookie function, you just pass the

70
00:06:08,820 --> 00:06:13,020
timestamp and BHP internally generated the correct date and time string.

71
00:06:16,500 --> 00:06:22,800
BHP 7.3 introduced a new signature four set cookie function, which allows you to set the attributes

72
00:06:22,800 --> 00:06:28,020
you want as an array rather than setting all the optional ones before the one that you actually wanted

73
00:06:28,020 --> 00:06:28,500
to set.

74
00:06:29,340 --> 00:06:35,400
In case of expires attributes, it is the first of the optional attributes, but using array is very

75
00:06:35,400 --> 00:06:38,400
useful for other attributes that we'll be talking about.

76
00:06:40,330 --> 00:06:45,040
And in JavaScript you would use two UTC string method of date object.

77
00:06:46,950 --> 00:06:54,100
Here in the first line, we create a new date object and past with the current timestamp plus 86400

78
00:06:54,100 --> 00:07:00,450
seconds, which is one day in the second line where we define the cookie.

79
00:07:00,540 --> 00:07:04,200
We just use this date object to UTC string method.

80
00:07:08,970 --> 00:07:14,040
The max age attributes sets the expiration time relative to current the date and time.

81
00:07:14,640 --> 00:07:17,910
In other words, the length of the cookies life in seconds.

82
00:07:18,420 --> 00:07:20,970
So it only needs a number of seconds from now.

83
00:07:23,470 --> 00:07:25,330
This is an example in JavaScript.

84
00:07:26,640 --> 00:07:32,100
It's much simpler than before because we only pass the difference in seconds rather than creating a

85
00:07:32,100 --> 00:07:35,040
date object and converting it to UTC string.

86
00:07:37,380 --> 00:07:38,340
For P2P.

87
00:07:38,340 --> 00:07:44,460
I don't even have an example because the cookie function doesn't allow you to set the max age attribute,

88
00:07:44,850 --> 00:07:47,880
although setting expires is effectively the same.

89
00:07:49,880 --> 00:07:55,730
And one note, if both expires and max age are set, the max age has precedence.

90
00:08:01,320 --> 00:08:05,640
You can also deliberately not set the expires or max age attributes.

91
00:08:06,330 --> 00:08:12,360
Then the browser theoretically deletes the cookie after session ends, which in general is when the

92
00:08:12,360 --> 00:08:13,890
browser window is closed.

93
00:08:15,300 --> 00:08:20,700
I underline the word theoretically because it's not something you can relate for 400%.

94
00:08:21,700 --> 00:08:22,270
First.

95
00:08:22,270 --> 00:08:26,590
This is up to the browser to determine whether this session has terminated or not.

96
00:08:26,980 --> 00:08:31,390
It's out of your control so the cookie can be stored longer than you would like.

97
00:08:32,440 --> 00:08:38,260
Second, browsers now have methods for restoring sessions, so again, the cookie might not be deleted

98
00:08:38,260 --> 00:08:39,430
when you thought it was.

99
00:08:41,860 --> 00:08:45,130
Better to either set the expiry date or maximum age.

100
00:08:45,940 --> 00:08:50,800
Or just make your app delete the cookie when you decide it's time for it to go.

101
00:08:54,580 --> 00:09:00,070
To delete the cookie from your application, you need to set it expiry attributes to a past date.

102
00:09:00,640 --> 00:09:02,830
Unfortunately, it's a little bit awkward.

103
00:09:03,580 --> 00:09:05,230
This is how to do it in JavaScript.

104
00:09:10,040 --> 00:09:14,990
In BHP, you need to set both the past expiry date and an empty value.

105
00:09:19,170 --> 00:09:24,990
Another caveat here is that you need to call the set cookie function with exactly the same attributes

106
00:09:24,990 --> 00:09:27,090
as you did when creating the cookie.

107
00:09:27,540 --> 00:09:29,040
Otherwise, it will not work.

108
00:09:29,850 --> 00:09:30,600
Of course not.

109
00:09:30,600 --> 00:09:32,640
Counting the value and expiration date.

110
00:09:37,030 --> 00:09:43,750
When creating a cookie, you can set the domain attributes, but you need to be aware that any subdomain

111
00:09:43,750 --> 00:09:46,990
of your domain can now read the cookies from your domain.

112
00:09:48,340 --> 00:09:54,520
So if you control the site under example dot com but have no control over local example dot com.

113
00:09:54,970 --> 00:10:00,730
It means that your cookies are unsafe because for example dot com can access all cookies.

114
00:10:00,730 --> 00:10:02,380
That example dot com sets.

115
00:10:03,830 --> 00:10:09,860
To overcome this, you would need to, once again, awkwardly and counterintuitively, all meet the

116
00:10:09,860 --> 00:10:16,930
domain attributes when the domain attribute is empty, only the origin that the cookie can access it

117
00:10:16,940 --> 00:10:18,830
and subdomains are excluded.

118
00:10:19,550 --> 00:10:24,050
So you would need to use the same protocol domain and port as when you created the cookie.

119
00:10:25,970 --> 00:10:32,780
So when to use the domain attribute, when you explicitly want to share cookies with some domains,

120
00:10:33,080 --> 00:10:38,220
for example to share the cookie from example dot com with payments example dot com.

121
00:10:38,870 --> 00:10:42,710
But you need to ensure that you have the control over all some domains.

122
00:10:44,450 --> 00:10:47,900
This is an example of that domain attribute in BHP.

123
00:10:50,990 --> 00:10:58,460
As you see in BGP versions earlier than 7.3, you need to specify both expires and path to be able to

124
00:10:58,460 --> 00:10:59,360
set the domain.

125
00:11:01,730 --> 00:11:03,830
And this is an example in JavaScript.

126
00:11:07,720 --> 00:11:11,920
You can further restrict their cookies availability with the path attributes.

127
00:11:14,180 --> 00:11:18,800
This will only send a cookie when users accessing a page inside an admin directory.

128
00:11:20,280 --> 00:11:23,850
The cookie will not be sent to requests outside the admin section.

129
00:11:26,310 --> 00:11:30,780
However, it does not make it impossible to access the cookie from other paths.

130
00:11:31,770 --> 00:11:37,770
If your site has an existing vulnerability and an attacker could manage to insert their own script.

131
00:11:38,580 --> 00:11:44,610
It would be enough to add a frame with their requested path and on the front page read the cookies from

132
00:11:44,610 --> 00:11:45,470
that iframe.

133
00:11:50,280 --> 00:11:56,160
Impeach be if you are on 7.3 or higher, I recommend that you use the functional signature with attributes

134
00:11:56,160 --> 00:12:00,990
array because otherwise you need to specify all preceding optional parameters.

135
00:12:01,860 --> 00:12:05,490
So the first line for be less than 7.3.

136
00:12:05,940 --> 00:12:08,160
We need to specify the third parameter.

137
00:12:08,700 --> 00:12:10,920
The third one is the value for expires.

138
00:12:11,250 --> 00:12:15,540
Here we set a default value of zero because we don't actually wants to set it.

139
00:12:17,600 --> 00:12:23,030
In the second line, we can comfortably use an array and set the path in an array element under the

140
00:12:23,030 --> 00:12:23,810
path key.

141
00:12:26,940 --> 00:12:30,210
And this is the code to set the path attribute in JavaScript.

142
00:12:35,730 --> 00:12:42,690
The HTP only attribute indicates that the cookie can only be set red and deleted on the back end.

143
00:12:44,310 --> 00:12:48,060
It effectively protects the cookie and its content from JavaScript.

144
00:12:49,260 --> 00:12:54,270
If your site had an exercise within our ability, a malicious user might be able to read.

145
00:12:54,270 --> 00:12:59,670
For example, this session cookies and hijack user sessions, which could have fatal consequences.

146
00:13:00,680 --> 00:13:01,130
Session.

147
00:13:01,130 --> 00:13:06,540
Cookies are one example of cookies that should always be asked to be only in general.

148
00:13:06,560 --> 00:13:11,270
Use this attribute always when you will not need to read the cookie on the client side.

149
00:13:12,350 --> 00:13:14,930
So there will be no code example in JavaScript.

150
00:13:16,190 --> 00:13:19,790
In BHP you set the cookie to be only like this.

151
00:13:21,320 --> 00:13:27,140
Here in the first line we need to set a bunch of default options to be able to set the HTP only attribute,

152
00:13:27,320 --> 00:13:28,280
which is the sixth.

153
00:13:29,450 --> 00:13:34,190
You see, the new syntax in 7.3 is way more comfortable to use.

154
00:13:37,090 --> 00:13:42,340
A similar attributes to ATP only, which is also often used together, is secure.

155
00:13:43,210 --> 00:13:50,020
It ensures the cookie will only be sent over the HTTPS protocol by setting this flag.

156
00:13:50,050 --> 00:13:56,560
You can prevent leaking cookie data like session ID if an attacker would be able to create a non HTP

157
00:13:56,560 --> 00:13:57,340
s request.

158
00:13:59,340 --> 00:14:01,620
This is how to set this flag in BHP.

159
00:14:07,410 --> 00:14:14,880
Unlike HTP only this flag can be set when creating a cookie with JavaScript and secure cookies are readable

160
00:14:14,880 --> 00:14:16,110
by JavaScript as well.

161
00:14:17,700 --> 00:14:20,880
This is the JavaScript example of creating a secure cookie.

162
00:14:25,240 --> 00:14:26,710
And there's the last attribute.

163
00:14:26,740 --> 00:14:27,640
Same site.

164
00:14:29,350 --> 00:14:34,420
It prevents sending their cookies with cross-site requests, and it can have one of the three values

165
00:14:34,780 --> 00:14:36,930
strict, lax or non.

166
00:14:38,470 --> 00:14:43,540
If you didn't watch the chapter about cross-site request forgery, I strongly recommend you to do it

167
00:14:43,870 --> 00:14:49,510
because in that chapter I discussed the details of how it actually helps to prevent those kinds of attacks

168
00:14:49,780 --> 00:14:52,060
and what these three values actually mean.

169
00:14:53,930 --> 00:14:58,310
This is how you said the same sector tribute in BHP 7.3 and higher.

170
00:15:00,740 --> 00:15:07,730
Unfortunately in P2P versions before 7.3, there is no option to set this attribute within said cookie

171
00:15:07,730 --> 00:15:08,300
function.

172
00:15:08,900 --> 00:15:11,150
One more reason to upgrade whenever possible.

173
00:15:12,490 --> 00:15:18,660
Alternatively, you can send the cookie by directly sending the said cookie htp header using the header

174
00:15:18,670 --> 00:15:19,240
function.

175
00:15:22,250 --> 00:15:25,430
And this is how you said the attribute in JavaScript.
