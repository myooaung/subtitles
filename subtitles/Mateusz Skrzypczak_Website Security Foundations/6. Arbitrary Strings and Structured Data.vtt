WEBVTT
1
00:00:05.290 --> 00:00:12.160
So we already know how to protect the app from being abused by some types of fields, but unfortunately

2
00:00:12.160 --> 00:00:13.780
the list is not complete yet.

3
00:00:15.560 --> 00:00:17.460
We often need arbitrary data.

4
00:00:17.480 --> 00:00:24.290
For example, a name, surname, title, message post or any other plaintext content.

5
00:00:25.310 --> 00:00:29.990
It cannot be cast it to a special type, and it doesn't follow any defined pattern.

6
00:00:30.710 --> 00:00:35.960
And we don't really know what to expect from user, so we can't do such during the validation as before.

7
00:00:37.280 --> 00:00:41.480
For example, if we ask for a message title, it could be one of these.

8
00:00:44.290 --> 00:00:45.790
But also one of these.

9
00:00:48.530 --> 00:00:54.050
All of them seem valid, although the last three can get us into trouble if they are passed directly

10
00:00:54.050 --> 00:00:56.090
to the query or displayed on page.

11
00:00:57.050 --> 00:01:00.590
So what do we do first?

12
00:01:00.650 --> 00:01:06.440
You can do some basic validation, like checking their input, length, or checking if they match some

13
00:01:06.440 --> 00:01:07.340
loose pattern.

14
00:01:08.570 --> 00:01:14.720
For example, if the user is about to enter the street address, we can't expect any strict pattern

15
00:01:14.720 --> 00:01:22.340
for that, but we can assume it will contain at least three non whitespace characters and at least one

16
00:01:22.340 --> 00:01:22.760
digit.

17
00:01:23.730 --> 00:01:27.930
And these codes do exactly that in BGP and in JavaScript.

18
00:01:33.120 --> 00:01:37.230
And the violation logic heavily depends on what the field is for.

19
00:01:37.590 --> 00:01:42.540
If it's for a message subject or post title, well you can check the input length.

20
00:01:42.540 --> 00:01:45.480
But apart of that, it's totally up to the user.

21
00:01:50.460 --> 00:01:56.520
We can't filter out anything here for security, for example, quotes or angled brackets, because as

22
00:01:56.520 --> 00:01:59.040
we saw a while ago, they can be legitimate.

23
00:01:59.970 --> 00:02:04.830
Actually, in most cases, we cannot do any filtering or records validation at all.

24
00:02:09.420 --> 00:02:16.410
But what we definitely must do if we use Unicode is check the string against invalid Unicode characters

25
00:02:16.410 --> 00:02:17.400
or sequences.

26
00:02:18.600 --> 00:02:25.170
These are dangerous because a string of invalid Unicode characters can evaluate to correct ASCII characters,

27
00:02:25.170 --> 00:02:26.940
which you don't want in the input.

28
00:02:28.290 --> 00:02:31.980
In BHP, this check can be done with a pretty trivial regex.

29
00:02:34.340 --> 00:02:35.090
How does it work?

30
00:02:35.090 --> 00:02:39.260
Then the magic is achieved with this new flag.

31
00:02:40.040 --> 00:02:45.950
It will cause the break much function to match nothing if this object is invalid or in other words,

32
00:02:45.950 --> 00:02:49.430
if it contains invalid UTF eight characters or sequences.

33
00:02:51.970 --> 00:02:58.270
The s flag will make the interpreter match all characters, including newlines, with a dot meter character

34
00:02:58.270 --> 00:02:59.080
in the pattern.

35
00:03:01.620 --> 00:03:07.530
Although fairly simple, this code snippet isn't particularly easy to remember, so I would wrap it

36
00:03:07.530 --> 00:03:08.220
with a function.

37
00:03:13.950 --> 00:03:19.860
And I wouldn't bother verifying that on the front end, no legitimate user would ever type an invalid

38
00:03:19.860 --> 00:03:25.620
Unicode character, and the attacker will know how to bypass the JavaScript validation.

39
00:03:29.900 --> 00:03:37.250
Another kind of unwanted input in an arbitrary string is a steamer called A Popular Way to avoid any

40
00:03:37.250 --> 00:03:38.520
potential HTML.

41
00:03:38.630 --> 00:03:45.230
When you expect a regular plain text is to strip the tags out of the string, which in VB would be done

42
00:03:45.230 --> 00:03:47.120
by calling the strip tax function.

43
00:03:48.410 --> 00:03:54.590
It might seem a good idea, especially to prevent any malicious HTML trying to carry out a cross-site

44
00:03:54.590 --> 00:03:55.460
scripting attack.

45
00:03:56.120 --> 00:03:58.490
But this function is not very clever.

46
00:03:59.000 --> 00:04:04.550
It's rather a quick and dirty methods to remove HTML tags, and there's a couple of problems with it.

47
00:04:06.230 --> 00:04:10.370
First, the content may have angled brackets used in a legitimate way.

48
00:04:10.610 --> 00:04:16.660
For example, to mean less dumb and greater than this function would just strip anything that it finds

49
00:04:16.680 --> 00:04:18.020
between angler brackets.

50
00:04:18.860 --> 00:04:21.830
So why is A less than B would become?

51
00:04:21.830 --> 00:04:24.230
Why is A not what we wanted?

52
00:04:25.310 --> 00:04:28.760
And some people also use them with a dash to form an arrow.

53
00:04:29.360 --> 00:04:35.870
In all such cases, the strip tags mechanisms will falsely recognize these as the HTML code and will

54
00:04:35.870 --> 00:04:39.770
remove a portion of the content which seemed to eat as HTML.

55
00:04:40.040 --> 00:04:41.720
But in reality it wasn't.

56
00:04:44.230 --> 00:04:49.870
Another problem with that function is its second argument, which allows us to specify a collection

57
00:04:49.870 --> 00:04:56.500
of permitted bags, for example, B and I to let the users make the text bold or italic.

58
00:04:58.090 --> 00:05:00.820
If only you allow at least one tag here.

59
00:05:01.090 --> 00:05:05.890
The potential cross-site scripting protection coming from this function is pretty much over.

60
00:05:06.940 --> 00:05:09.730
How can either be or I could be dangerous.

61
00:05:10.570 --> 00:05:11.470
How about this?

62
00:05:14.630 --> 00:05:21.230
This is a successful cross-site scripting attempt that uses a seemingly plain and innocent B tag.

63
00:05:22.130 --> 00:05:28.010
The function permits the tag, but doesn't work for its attributes, which can contain inline scripts

64
00:05:28.010 --> 00:05:28.820
and styles.

65
00:05:30.580 --> 00:05:31.750
Want another example?

66
00:05:33.680 --> 00:05:39.620
This one will execute the script in the on error attribute as there is clearly no image under the you

67
00:05:39.620 --> 00:05:40.550
are a x.

68
00:05:43.500 --> 00:05:48.810
For both these reasons, I wouldn't bother eliminating any potential HMO taxes this way.

69
00:05:52.080 --> 00:05:58.800
So what's the conclusion in case of user input that we can validate in any reasonable way other than

70
00:05:58.800 --> 00:06:04.200
checking the minimum length, optionally checking against the loose pattern and checking the invalid

71
00:06:04.200 --> 00:06:06.060
Unicode chars and sequences.

72
00:06:06.690 --> 00:06:14.990
We only need to make it safe for later use by sanitizing it using prepared statements to avoid equal

73
00:06:15.000 --> 00:06:22.980
injection attacks when putting the data in as Google query and escaping HTML special chars to avoid

74
00:06:22.980 --> 00:06:28.740
cross-site scripting attacks when putting the data on page so that the potential code will be displayed

75
00:06:28.980 --> 00:06:35.280
rather than interpreted, we will learn how to do all of that in the upcoming chapters.

76
00:06:39.190 --> 00:06:44.990
The situation could get much worse because sometimes we actually do expect an arbitrary estimate of

77
00:06:45.010 --> 00:06:49.570
input from user, which as we just saw, is difficult to handle securely.

78
00:06:50.170 --> 00:06:56.110
This can be, for example, a form input where the user has a visual or code editor, but it might as

79
00:06:56.110 --> 00:07:00.970
well be a web service or something which simply allows the content formatted as HTML.

80
00:07:02.770 --> 00:07:10.840
There are two things you can do with HTML code displayed like a code snippet in documentation or actually

81
00:07:10.840 --> 00:07:18.790
interpret it so that P will make paragraph A will make a link, etc. In order to display the code,

82
00:07:18.790 --> 00:07:24.700
you simply have to properly escape any meaningful team of characters to avoid cross-site scripting attacks.

83
00:07:26.780 --> 00:07:32.360
The code will then stop being the working code, but instead a string of characters that looks like

84
00:07:32.360 --> 00:07:32.780
a code.

85
00:07:33.980 --> 00:07:35.540
It's exactly the same process.

86
00:07:35.540 --> 00:07:38.240
We need to apply for any arbitrary text input.

87
00:07:38.390 --> 00:07:43.310
Instead of stripping thanks, we learn how to do it in the cross-site scripting chapter.

88
00:07:45.720 --> 00:07:51.180
But when it comes to validating the input for actual use, this is a minefield.

89
00:07:51.960 --> 00:07:58.350
Before we go any further, let me discourage you from writing any validation rules by yourself, any

90
00:07:58.350 --> 00:07:59.940
regular expressions, etc..

91
00:08:00.540 --> 00:08:03.150
Always use a dedicated library for that.

92
00:08:03.810 --> 00:08:10.170
One of the well tested and actively maintained libraries for this in BGP is a email purifier.

93
00:08:11.370 --> 00:08:15.030
I will discuss how it works in the cross-site scripting chapter as well.

94
00:08:19.180 --> 00:08:26.950
Other types of structured content are Jason and XML in both, but especially in example, the syntax

95
00:08:26.950 --> 00:08:31.210
is very strict yet robust so they can easily be validated.

96
00:08:32.590 --> 00:08:37.600
But luckily many programming languages have built in parsing functions for both those formats.

97
00:08:37.930 --> 00:08:43.300
So in fact the validation of it is as easy as trying to pass it with a dedicated function.

98
00:08:44.530 --> 00:08:50.560
See example of validating JSON in BGP by trying to parse it with the JSON decode function.

99
00:08:56.530 --> 00:09:03.910
If BHP is not able to create a valid JSON object, the JSON last error function will return an adequate

100
00:09:03.910 --> 00:09:08.860
error code in case the JSON parsing was successful.

101
00:09:09.130 --> 00:09:11.770
The error code will be JSON error or none.

102
00:09:12.070 --> 00:09:14.200
So then we know the JSON was valid.

103
00:09:18.240 --> 00:09:23.790
In JavaScript, you would use a pass method of the JSON object inside the trigger statement.

104
00:09:28.140 --> 00:09:32.130
If it cannot pass the data, it will throw a syntax error exception.

105
00:09:32.400 --> 00:09:35.220
And then, you know, the input was not a valid JSON.

106
00:09:42.220 --> 00:09:46.210
Passing exam is similar in each bead.

107
00:09:46.210 --> 00:09:50.980
There's a bunch of eczema related extensions, one of which is simple examiner.

108
00:09:53.030 --> 00:09:59.630
The first example here is a simple example load file function that needs a path to the XML file.

109
00:10:00.440 --> 00:10:04.460
And if the parsing was not successful, it will simply return false.

110
00:10:05.870 --> 00:10:09.340
We need to use a strict comparison that is three equal signs.

111
00:10:09.650 --> 00:10:15.050
To ensure this really is a boolean false and not some valid example that evaluates to false.

112
00:10:18.240 --> 00:10:20.850
The second example uses a similar function.

113
00:10:21.000 --> 00:10:25.500
Simple example load string that expects an exam a string.

114
00:10:27.240 --> 00:10:33.330
Here again, if it can't create a valid simple example element object from that string, it will return

115
00:10:33.330 --> 00:10:34.320
boolean false.

116
00:10:37.040 --> 00:10:43.130
There's a couple of attacks that the target application, which bars XML files, most of them attempts

117
00:10:43.130 --> 00:10:48.410
to overload and eventually kill the server by sending to complex or invalid structures.

118
00:10:49.850 --> 00:10:57.080
But one of them, which is called external entities, occurs when the malicious XML abuses the entities

119
00:10:57.080 --> 00:10:57.560
feature.

120
00:10:58.070 --> 00:11:06.260
For example, trying to gain access to system files to prevent it in versions prior to 8.0.

121
00:11:06.530 --> 00:11:13.310
It's recommended to call the the disable entity loader function, which disables external entities completely.

122
00:11:14.390 --> 00:11:21.290
Since 8.0, the external entities are disabled by default, so this instruction is not needed.

123
00:11:25.840 --> 00:11:30.850
In JavaScript you can validate XML by trying to parse it using DOM parser.

124
00:11:34.230 --> 00:11:39.510
It has a pass from string method to which you pass an exam of string and the main type.

125
00:11:42.780 --> 00:11:46.110
It then returns the document or XML document object.

126
00:11:46.770 --> 00:11:54.810
And if there was a passing error, then we don't get any false or null button error document its document

127
00:11:54.810 --> 00:11:55.240
elements.

128
00:11:55.290 --> 00:11:57.450
No, the name will be parser error.

129
00:11:57.750 --> 00:12:00.900
So we just check whether this is what we got or not.

130
00:12:06.350 --> 00:12:06.800
Okay.

131
00:12:06.800 --> 00:12:12.410
So using those methods, we only know that what we are dealing with is a structurally valid JSON or

132
00:12:12.500 --> 00:12:20.210
XML inputs, but this input still can contain something intended to carry out an attack as fuel injection,

133
00:12:20.210 --> 00:12:22.280
cross-site scripting or any other.

134
00:12:23.330 --> 00:12:28.880
The fact that the JSON or X-MODE has been successfully passed does not necessarily mean that there are

135
00:12:28.880 --> 00:12:33.240
no traps inside before using the data in your app.

136
00:12:33.260 --> 00:12:39.050
You should thoroughly examined each piece of data stored in the JSON or XML according to your business

137
00:12:39.050 --> 00:12:39.560
logic.

138
00:12:40.070 --> 00:12:42.530
Just like we were doing it in the whole chapter.

139
00:12:44.310 --> 00:12:49.140
Especially watch out for any unexpected tags or attributes in XML files.
