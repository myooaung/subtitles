1
00:00:04,840 --> 00:00:10,870
Before we talk about security holes in the actual code and preventing attacks on your sites, let me

2
00:00:10,870 --> 00:00:12,610
start with something fundamental.

3
00:00:13,000 --> 00:00:15,760
Protecting the files and resources on the server.

4
00:00:16,960 --> 00:00:21,610
You should always be aware that everything that you upload to your server, especially within the root

5
00:00:21,610 --> 00:00:29,860
folder, which is typically public HTML or w w w is publicly accessible unless you're directly protected.

6
00:00:31,180 --> 00:00:36,100
There are ways to do it, of course, but people often forget to do it or don't care about it.

7
00:00:36,970 --> 00:00:43,300
An example would be a database snapshot hosted along the WordPress files or a folder with backups.

8
00:00:44,230 --> 00:00:50,200
Anyone entering the correct URL in their browsers will now be able to download the school or zip file

9
00:00:50,470 --> 00:00:55,630
and therefore gain full access to the database structure in the contents and the code base.

10
00:00:58,070 --> 00:01:03,120
You'd say, I'm not going to share this link with anyone and I'm going to name the file in a way.

11
00:01:03,140 --> 00:01:03,930
Hard to guess.

12
00:01:04,430 --> 00:01:09,620
I would say it really doesn't matter how you name the file and how much effort you will make to keep

13
00:01:09,620 --> 00:01:10,940
its you are a secret.

14
00:01:11,840 --> 00:01:15,890
The problem is that millions of bots are scanning the web all the time.

15
00:01:16,400 --> 00:01:21,650
Some do it to provide us with the best search results, but others may do it for other purposes.

16
00:01:21,950 --> 00:01:28,400
For example, to find something interesting and it might happen that boss will somehow find your files.

17
00:01:29,000 --> 00:01:30,860
Try this link if you don't believe me.

18
00:01:35,670 --> 00:01:38,820
I don't think many of these fires were deliberately linked.

19
00:01:41,230 --> 00:01:46,960
So any secret subdomain folder name or file name will not give you much security.

20
00:01:47,590 --> 00:01:53,590
This is a classic example of security by obscurity, which is not going to provide much protection on

21
00:01:53,590 --> 00:01:54,100
its own.

22
00:01:55,080 --> 00:02:01,830
And the other problem is that there are certain file types which are executable like BHP and those which

23
00:02:02,000 --> 00:02:10,410
reveal their contents or first download like squirrel zip or once popular EMC for BHP include files.

24
00:02:11,310 --> 00:02:17,400
So if you put your theme back up as a zip package, anyone who downloads it will have a complete code

25
00:02:17,400 --> 00:02:18,210
of your theme.

26
00:02:18,960 --> 00:02:23,370
And if your theme have any exploitable security holes, you're lost.

27
00:02:24,540 --> 00:02:26,280
So how to solve the problem?

28
00:02:27,090 --> 00:02:32,130
The first idea would be to avoid storing anything on the server beside your website.

29
00:02:32,880 --> 00:02:38,880
If you need to have files stored online, you can either store them outside of the root directory so

30
00:02:38,880 --> 00:02:45,540
that no browser could reach them and you would only be able to get them via FCP connection or host them

31
00:02:45,540 --> 00:02:51,600
on the external encrypted cloud storage services where only authorised people would be able to read

32
00:02:51,600 --> 00:02:51,870
them.

33
00:02:53,640 --> 00:02:59,250
The second idea would be to password protect the folder that is not meant for public access, at least

34
00:02:59,280 --> 00:03:00,810
with basic authentication.

35
00:03:01,470 --> 00:03:04,920
Is that generic logging and password form handled by the browser?

36
00:03:05,580 --> 00:03:07,170
It's very simple to set up.

37
00:03:07,440 --> 00:03:08,820
There are, however, some risks.

38
00:03:09,510 --> 00:03:15,570
First, if you don't use SSL, the log in and passwords you entering the browser will be sent to the

39
00:03:15,570 --> 00:03:18,660
server as a plaintext without any encryption.

40
00:03:19,320 --> 00:03:25,830
This is really basic authentication system and as such it can be picked by someone having access to

41
00:03:25,830 --> 00:03:26,820
the network traffic.

42
00:03:27,510 --> 00:03:32,310
So using SSL will greatly improve the security of this basic protection.

43
00:03:33,530 --> 00:03:39,230
Second, the log in and password are sent by the browser with each single request, which means more

44
00:03:39,230 --> 00:03:41,360
opportunities for the potential attacker.

45
00:03:42,350 --> 00:03:46,910
Third, if you share the log in and password with someone else, they might store their credentials

46
00:03:46,910 --> 00:03:50,330
in their browsers, either for convenience or by accident.

47
00:03:50,870 --> 00:03:56,360
And it might cause unauthorized access to the files by someone else using their computer.

48
00:03:58,300 --> 00:04:00,820
Anyway, how to set up basic authentication.

49
00:04:01,600 --> 00:04:08,800
If you're on Apache, you need two files, not a password placed anywhere on the server which will store

50
00:04:08,800 --> 00:04:15,730
the username and password pairs and dot the access place within the folder you want to protect, which

51
00:04:15,730 --> 00:04:20,950
will turn on the basic authentication for that directory and its subdirectories.

52
00:04:22,730 --> 00:04:29,460
H t password can really be placed anywhere, even outside the neighborhood, like on the example because

53
00:04:29,460 --> 00:04:34,500
in HD access you will have to provide the full path, though it will get to that.

54
00:04:36,120 --> 00:04:38,940
You can generate a password file in various ways.

55
00:04:40,220 --> 00:04:45,620
If you're comfortable with Common Lane and you have a cell access, you can use the password command.

56
00:04:47,120 --> 00:04:49,970
That C flag is for creating a new file.

57
00:04:50,690 --> 00:04:56,720
Then you provide the file name and then the first user's name after hitting enter.

58
00:04:56,990 --> 00:05:03,680
You will be prompted for password and asked to retype it to add more users around the same command.

59
00:05:03,710 --> 00:05:11,540
But this time without C flag, you can also type a password generator in your search engine.

60
00:05:12,170 --> 00:05:15,410
You will get lots of pages that can generate different contents for you.

61
00:05:16,850 --> 00:05:21,830
Copied the generated content and paste inside the blank XD password file on your server.

62
00:05:23,060 --> 00:05:28,280
Remember though as anything you type in might be locked somewhere, so you're pretty much giving out

63
00:05:28,280 --> 00:05:29,120
your credentials.

64
00:05:29,900 --> 00:05:34,280
However, the generator owner most probably will not know where to use them.

65
00:05:35,720 --> 00:05:41,000
Another method would be to check out with your hosting provider because you might find the password

66
00:05:41,000 --> 00:05:43,400
generator in your server's control panel.

67
00:05:45,200 --> 00:05:50,840
When you're done with creating a password file, you'll need an SD access file in a directory that you

68
00:05:50,840 --> 00:05:51,680
wants to protect.

69
00:05:52,490 --> 00:05:56,330
In this file, you will actually turn on the basic authentication mechanism.

70
00:05:57,770 --> 00:06:02,030
If the file doesn't exist, create it, and put their record like this.

71
00:06:03,680 --> 00:06:06,860
The first line is a message that will be prompted to the user.

72
00:06:07,910 --> 00:06:11,060
The second one defines the basic authentication mechanism.

73
00:06:11,540 --> 00:06:12,560
It turns it on.

74
00:06:14,120 --> 00:06:21,170
The third line is a full path to your password file, but starting from server route and not your side

75
00:06:21,170 --> 00:06:21,500
route.

76
00:06:23,160 --> 00:06:27,000
The fourth line specifies which users are permitted to log in.

77
00:06:27,510 --> 00:06:33,090
In our case, it's any valid user, but you can explicitly allow only Matt or Bob.

78
00:06:34,100 --> 00:06:37,220
Note there is no comma between usernames, only a space.

79
00:06:41,310 --> 00:06:47,340
The third idea would be to simply deny access to the folder for anyone in aperture.

80
00:06:47,370 --> 00:06:50,130
It's done with the access file like this.

81
00:06:52,700 --> 00:06:57,290
The first part of the code is dedicated for apart version 2.3 and higher.

82
00:06:57,680 --> 00:07:00,230
And the second part is for the legacy versions.

83
00:07:02,210 --> 00:07:08,060
Now anyone trying to access the folder or its contents with a browser will just receive deferral through

84
00:07:08,060 --> 00:07:09,230
forbidden status.

85
00:07:10,280 --> 00:07:17,270
With this configuration, you are limited to accessing the files inside with FTP client, but you can

86
00:07:17,270 --> 00:07:20,750
choose to whitelist any apps on which you have full control.

87
00:07:21,440 --> 00:07:27,530
That means if you have a static IP and you are sure no one will have it assigned to them in the foreseeable

88
00:07:27,530 --> 00:07:28,040
future.

89
00:07:29,750 --> 00:07:34,790
Now people from these apps will be able to access the directory contents with their browsers.

90
00:07:36,190 --> 00:07:42,820
Not that in the first part for aperture 2.3 or higher, the apps are separated by a space without any

91
00:07:42,820 --> 00:07:43,330
commas.

92
00:07:46,480 --> 00:07:50,680
You can also protect the files or directories by setting proper permissions.

93
00:07:51,550 --> 00:07:53,860
In case you don't know how file permissions work.

94
00:07:53,890 --> 00:07:55,240
Here's a short explanation.

95
00:07:56,180 --> 00:08:04,790
There are three types of action read, write and execute and three access levels owner group others.

96
00:08:05,720 --> 00:08:12,380
Each action can be permitted or not to each of the access levels like in this table in which group and

97
00:08:12,380 --> 00:08:15,050
others are not given the right permission.

98
00:08:16,940 --> 00:08:24,500
The two usual notations are symbolic notation in which you have ten chars and the shorter numeric notation

99
00:08:24,650 --> 00:08:29,310
in which you have usually three digits in symbolic notation.

100
00:08:29,330 --> 00:08:35,540
The first chart can either be D for directory or dash, which means not a directory file.

101
00:08:36,440 --> 00:08:43,010
Then you have three times three channels for each access level, user group and others.

102
00:08:44,990 --> 00:08:50,680
First of three can either be our which means can read or does which means can treat.

103
00:08:52,040 --> 00:08:55,070
Second can be either w which means can right.

104
00:08:55,670 --> 00:08:57,710
Or that which means can write.

105
00:08:59,230 --> 00:09:05,740
And third can be either eggs, which means can execute orders, which means can't execute.

106
00:09:07,520 --> 00:09:11,360
So the first example is the directory with all access enabled.

107
00:09:12,020 --> 00:09:18,140
And the second example is a file which can be read by everybody, but only the owner can write to it

108
00:09:18,350 --> 00:09:19,910
that is at its contents.

109
00:09:22,390 --> 00:09:23,650
In numeric notation.

110
00:09:23,800 --> 00:09:30,190
Each digits represent the permissions for each access level, and these examples have exactly the same

111
00:09:30,190 --> 00:09:31,810
meaning as the previous ones.

112
00:09:33,210 --> 00:09:34,320
How do we know the number?

113
00:09:34,860 --> 00:09:35,670
Here's the key.

114
00:09:36,250 --> 00:09:37,380
Four is read.

115
00:09:37,920 --> 00:09:39,220
Two is right.

116
00:09:39,720 --> 00:09:43,670
And the one is execute to set multiple permissions.

117
00:09:43,680 --> 00:09:46,500
For example, read and write you just some the values.

118
00:09:46,980 --> 00:09:53,220
And because the key values are one, two and four, the sum of any of them will always produce a unique

119
00:09:53,220 --> 00:09:56,510
number one and two is three.

120
00:09:57,630 --> 00:09:59,400
Four plus one is five.

121
00:10:00,090 --> 00:10:03,240
Four plus two is six and four.

122
00:10:03,240 --> 00:10:05,250
Plus two plus one is seven.

123
00:10:07,480 --> 00:10:07,870
Okay.

124
00:10:07,870 --> 00:10:13,780
So what needs to be said so that a file or folder would be protected from the outside world to protect

125
00:10:13,780 --> 00:10:14,890
the single file?

126
00:10:15,340 --> 00:10:18,910
You need to set the others read permission to zero.

127
00:10:19,960 --> 00:10:22,420
For example, set it to 6420.

128
00:10:25,500 --> 00:10:31,740
To protect the directory and all its contents, you need to set the others execute permission to zero.

129
00:10:32,880 --> 00:10:37,350
The 640 setting that we use for files will work just fine.
