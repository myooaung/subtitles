WEBVTT
1
00:00:06.340 --> 00:00:12.580
Checking extensions and mine types, as we did during initial checks is important, but unfortunately

2
00:00:12.580 --> 00:00:15.430
it's not enough to fend off all malicious files.

3
00:00:17.510 --> 00:00:23.720
For example, a file that looks like an image and maybe even displays some image when opened can contain

4
00:00:23.720 --> 00:00:25.280
some virus data inside.

5
00:00:25.940 --> 00:00:32.300
For example, a file with Jeopardy extension would contain the shell code or HTML or JavaScript inside.

6
00:00:33.080 --> 00:00:37.490
We talked earlier about content sniffing, which some browsers used to perform.

7
00:00:38.090 --> 00:00:43.520
If such sniffing would take place and keep it, file could be run completely non jpeg called that it

8
00:00:43.520 --> 00:00:51.380
has inside in case of JPEG putting malicious code inside may not be that easy, but in case of as big

9
00:00:51.380 --> 00:00:56.720
for example, which is an image but also an example text file, it's much easier.

10
00:00:58.130 --> 00:01:04.850
So in case of images, run them through image generation methods or a library to first ensure you are

11
00:01:04.850 --> 00:01:10.850
really dealing with an image and second to strip any non image data out of it.

12
00:01:16.490 --> 00:01:22.460
In BHP there is a graphics drawer library which provide functions that can process images in a very

13
00:01:22.460 --> 00:01:23.210
easy way.

14
00:01:25.830 --> 00:01:29.820
In this code, we first get the mime type with file info module.

15
00:01:29.850 --> 00:01:31.200
Just like we did earlier.

16
00:01:33.120 --> 00:01:39.540
Then according to the main type, we need to use different methods of library to store the image in

17
00:01:39.540 --> 00:01:40.080
memory.

18
00:01:40.710 --> 00:01:42.240
Image create from JPEG.

19
00:01:42.750 --> 00:01:46.290
Image Create from GIF or image create from PNG.

20
00:01:48.180 --> 00:01:55.650
Then we read the original images dimensions and create a new image in memory of the same size.

21
00:01:59.210 --> 00:02:04.940
Finally we copy the original image to our new image with image, copy, reassembled function.

22
00:02:06.500 --> 00:02:13.160
And then again, according to the main type, we save it either as JPEG, GIF or PNG.

23
00:02:16.080 --> 00:02:21.960
You can use some other library if you want, but please be aware that the popular image magic library

24
00:02:22.170 --> 00:02:24.330
has some security vulnerabilities.

25
00:02:24.870 --> 00:02:28.950
Read about them before you start using it to process user uploaded files.

26
00:02:31.430 --> 00:02:36.680
The example exploit that song on this site is this and as we do file to run the shell comment.

27
00:02:47.110 --> 00:02:52.840
Image Files is a type of uploaded files that pretty often need to be then publicly accessible.

28
00:02:53.620 --> 00:03:00.250
That's why for bitmap images like JPEG, it's a good idea to do the processing I just mentioned because

29
00:03:00.250 --> 00:03:02.650
it will fend off pretty much all attack attempts.

30
00:03:04.270 --> 00:03:10.570
But there are other types of files which can be uploaded and do not have to or sometimes even must not

31
00:03:10.720 --> 00:03:12.970
be available to the public after upload.

32
00:03:13.600 --> 00:03:19.360
Online application forms, for example, may feature an input field where people are expected to upload

33
00:03:19.360 --> 00:03:27.490
some documents like signs, scans, CVS, etc. And such documents can come in more file formats, PDF,

34
00:03:27.730 --> 00:03:29.560
Word, or even Excel.

35
00:03:30.460 --> 00:03:35.170
In case of such files, it would be very complicated to process them like we did with images.

36
00:03:35.530 --> 00:03:40.720
Although there are libraries that read and write for example, PDF or open exam formats.

37
00:03:42.140 --> 00:03:48.530
To protect yourself from attack items in such files, I'd recommend you to either save them on a separate

38
00:03:48.530 --> 00:03:55.130
static server, ideally outside of Webroot or in a rate only directory so that they will be accessible

39
00:03:55.130 --> 00:03:55.850
to the public.

40
00:03:57.470 --> 00:03:59.030
Never run them on the server.

41
00:04:00.230 --> 00:04:05.570
Download these files to your computer and verify them with your antivirus software before opening.

42
00:04:06.740 --> 00:04:12.380
This will work if the uploaded files are to be processed manually and there will be not too many uploads

43
00:04:13.460 --> 00:04:16.910
when manual verification and offline processing is not an option.

44
00:04:17.240 --> 00:04:21.980
Use an antivirus API to automatically process all uploaded files.

45
00:04:22.880 --> 00:04:28.340
It will typically be a command line tool installed on your server, which would call with an exec or

46
00:04:28.340 --> 00:04:37.400
show exec function in P2P a tool installed on your server that you would call with an API or an external

47
00:04:37.400 --> 00:04:42.950
tool to which you would send files for scanning with some API or with code of the request, for example.

48
00:04:44.000 --> 00:04:47.330
The actual implementation is outside of the scope of this course.
