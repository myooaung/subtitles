1
00:00:04,810 --> 00:00:10,540
In earlier implementations of password hashing API, there was also an option to use as salt.

2
00:00:11,230 --> 00:00:16,090
Salt is a randomly generated string that is appended to the original password.

3
00:00:16,900 --> 00:00:22,900
The idea behind it is to protect the hashes of weak passwords from being looked up in the rainbow tables

4
00:00:23,920 --> 00:00:24,870
without a salt.

5
00:00:24,880 --> 00:00:30,670
If a user's hashed password is this or this depending on the hashing algorithm.

6
00:00:32,700 --> 00:00:38,340
Then it takes a little time to find out that the original password is Apple because it's so popular

7
00:00:38,340 --> 00:00:41,430
word that finding it by hash is super easy.

8
00:00:43,700 --> 00:00:50,030
But when we append to the string apple, something like this before hashing it, then it will not be

9
00:00:50,030 --> 00:00:52,280
that easy to find the original anymore.

10
00:01:01,490 --> 00:01:04,040
There are two uncertainties regarding the assault.

11
00:01:04,130 --> 00:01:05,300
So let's clear it up.

12
00:01:06,140 --> 00:01:09,180
First, some people believe the cells should be secret.

13
00:01:09,440 --> 00:01:14,150
But in reality, it's not that important because it's not meant to be the second passport.

14
00:01:16,130 --> 00:01:22,250
The salad's general purpose is to complicate the original password in a way that makes the rainbow table

15
00:01:22,250 --> 00:01:23,330
look up useless.

16
00:01:24,620 --> 00:01:29,570
For example, if the same password would be used on different sites that implement the same hashing

17
00:01:29,570 --> 00:01:34,400
mechanism without salting, all of them would simply store the same hash.

18
00:01:35,480 --> 00:01:40,910
And it means that having stored in multiple databases, an attacker would be able to break multiple

19
00:01:40,910 --> 00:01:43,700
accounts just by working out a single hash.

20
00:01:47,750 --> 00:01:50,630
So and that's the second thing that people often get wrong.

21
00:01:50,990 --> 00:01:57,110
Even a super secret sauce that will be used to hash passwords for multiple users will not do its job.

22
00:01:58,650 --> 00:02:01,210
Imagine that two users had the same password.

23
00:02:01,290 --> 00:02:07,620
I love Alice without a per user assault, hashes for both passwords will still be identical.

24
00:02:09,030 --> 00:02:13,800
So the attacker will only need to break one password to gain access to two accounts.

25
00:02:17,500 --> 00:02:22,870
To conclude, every bastard should be salted with a different random value, which doesn't need to be

26
00:02:22,870 --> 00:02:23,350
secret.

27
00:02:24,810 --> 00:02:32,430
In fact, this salt is often just appended in plaintext to the password hash anyway, since BHP seven

28
00:02:32,430 --> 00:02:38,610
is deprecated to use your own salt and instead it's recommended to rely on the salt which is generated

29
00:02:38,610 --> 00:02:40,200
by the password hash function.

30
00:02:42,790 --> 00:02:43,180
Okay.

31
00:02:43,180 --> 00:02:46,780
So all we know about the South, but there's also a paper on the table.

32
00:02:47,500 --> 00:02:53,410
The paper in this context is also a random string, but this time is the opposite of what we learned

33
00:02:53,410 --> 00:02:54,310
about the salt.

34
00:02:54,910 --> 00:02:57,700
It's secret, and it's the same for every user.

35
00:02:58,840 --> 00:03:02,830
Now, because of that, pepper without salt makes very little sense.

36
00:03:03,930 --> 00:03:07,200
The assault on its own would likely do a good enough job.

37
00:03:08,040 --> 00:03:11,760
And salt with pepper may improve the system's security.

38
00:03:14,110 --> 00:03:16,510
This is how you would implement the pepper.

39
00:03:19,350 --> 00:03:24,600
You need to define it in a secret place and protect it like you protect database credentials.

40
00:03:25,710 --> 00:03:30,990
And when you create the password has you need to append these constants to the value provided by user.

41
00:03:32,310 --> 00:03:38,580
Because contrary to salt, the pepper is not stored with password in database but in application code.

42
00:03:38,880 --> 00:03:43,920
The passwords are safer in case only the database leaks, not the whole code base.

43
00:03:45,820 --> 00:03:50,800
One of the problems with this approach is that the paper is hardcoded in every password.

44
00:03:51,280 --> 00:03:57,220
So whenever your application is already running and have some users, it's tricky to introduce it.

45
00:03:57,610 --> 00:04:01,060
It's tricky to change it, and it's tricky to get rid of it.

46
00:04:02,530 --> 00:04:07,900
You could create a migration script that would do any of the above with the paper whenever user looks

47
00:04:07,900 --> 00:04:08,200
in.

48
00:04:08,830 --> 00:04:13,150
But when the user logs in in some circumstances it might be too late.

49
00:04:15,550 --> 00:04:20,350
With all that said, consider assault as a must have and pepper as an option.

50
00:04:21,170 --> 00:04:26,960
You use a strong hashing algorithm like grit or argon to even without pepper.

51
00:04:26,980 --> 00:04:28,990
The passwords should be safe enough.
