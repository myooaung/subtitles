1
00:00:05,890 --> 00:00:10,210
Allowing users to upload files poses a big security risk for your site.

2
00:00:10,210 --> 00:00:12,910
If you don't thoroughly examined the files, you'll receive.

3
00:00:13,900 --> 00:00:20,050
Similarly to how attackers can try to run Ezekial or JavaScript on your site by entering comments into

4
00:00:20,050 --> 00:00:25,660
your forum fields, for example, they can try to attack your site or server by uploading files that

5
00:00:25,660 --> 00:00:31,090
are not what they seem to be and which would run code when uploaded and then opened in the browser.

6
00:00:31,960 --> 00:00:38,830
Let's see how we can mitigate these risks in BGP when the file is being uploaded.

7
00:00:38,980 --> 00:00:41,260
Its data is available in the file.

8
00:00:41,300 --> 00:00:42,190
Super global.

9
00:00:44,150 --> 00:00:48,890
The entry index file in this example is the emails field the name.

10
00:00:49,940 --> 00:00:57,590
You can see the file Super Global contains an original file name as opposed to mine type a temporary

11
00:00:57,590 --> 00:01:01,520
location from which it should be moved to be permanently saved on the server.

12
00:01:02,510 --> 00:01:07,340
Error code where zero is no error and size in bytes.

13
00:01:09,920 --> 00:01:13,640
To save the file on the server from the script you need to move.

14
00:01:13,640 --> 00:01:15,680
Upload the file, function like this.

15
00:01:18,790 --> 00:01:22,300
This is the most basic and highly, highly insecure code.

16
00:01:22,930 --> 00:01:30,550
Any file type will be accepted of any size and with any name that opens a whole bunch of vulnerabilities.

17
00:01:31,540 --> 00:01:32,560
To mitigate them.

18
00:01:32,560 --> 00:01:36,310
During each final upload, we need to perform a number of checks.

19
00:01:37,720 --> 00:01:42,430
First of all, check if the file size doesn't exceed your maximum allowed size.

20
00:01:43,240 --> 00:01:46,690
The maximum uploaded file size can be set in various places.

21
00:01:47,530 --> 00:01:52,270
For example, in P2P configuration with the upload max file size directive.

22
00:01:53,590 --> 00:01:58,690
In this case, it limits the uploaded fight to two megabytes, which is the default value.

23
00:01:59,590 --> 00:02:03,850
It can be changed per directory with the user INI file or access file.

24
00:02:04,480 --> 00:02:07,420
This is the fundamental setting which cannot be bypassed.

25
00:02:09,400 --> 00:02:13,300
You can also combine it with apertures limit request, body directive.

26
00:02:13,990 --> 00:02:19,840
Putting this line in the access file will limit the size of requests body, which is data coming to

27
00:02:19,840 --> 00:02:22,000
the server to two megabytes.

28
00:02:23,740 --> 00:02:29,470
You can also set your own monks file size in the code and check the incoming file against your own limit.

29
00:02:31,450 --> 00:02:32,290
In this code.

30
00:02:32,290 --> 00:02:39,190
If there is one, then it means the server maximum size has been exceeded and the second condition checks

31
00:02:39,190 --> 00:02:42,040
to calculate its size against our own custom limit.

32
00:02:45,350 --> 00:02:45,890
The beach.

33
00:02:45,890 --> 00:02:51,770
B Dogs also say that you can set the max file size in an A.T.M. form by using an input.

34
00:02:52,770 --> 00:02:55,620
But because anything on the front end can be manipulated.

35
00:02:55,890 --> 00:02:59,490
Don't rely on this setting to keep uploaded files within the limit.

36
00:03:00,060 --> 00:03:03,780
It's only useful for legitimate users for a quick check on the backend.

37
00:03:04,710 --> 00:03:10,050
If a file they uploaded is larger than Mark's file size value, some data transfer will be saved.

38
00:03:11,310 --> 00:03:14,810
And for that file, BHP will return the error code number two.

39
00:03:16,230 --> 00:03:20,520
So if you use this hidden field, you can combine this condition with the earlier check.

40
00:03:25,440 --> 00:03:29,880
Then check if the uploaded final name has a valid whitelisted extension.

41
00:03:30,660 --> 00:03:32,580
You can use their regular expression for that.

42
00:03:37,110 --> 00:03:43,680
In this code, we look for a literal note character followed by any of JPEG, GIF or PNG.

43
00:03:45,780 --> 00:03:51,150
Just remember to always validate the end of a string by adding the trading dollar sign.

44
00:03:53,010 --> 00:03:59,580
Because if you wanted the dollar sign or just validate the name against the jpeg in a string, not requiring

45
00:03:59,580 --> 00:04:06,090
it to be at the end of the string, someone could upload image dot jpeg, dot BHP and the filter would

46
00:04:06,090 --> 00:04:06,600
allow it.

47
00:04:10,860 --> 00:04:12,470
When setting up the white list.

48
00:04:12,540 --> 00:04:23,760
Definitely avoid allowing any executables or potential executables like html xml as vague js as w,

49
00:04:23,760 --> 00:04:31,170
f, BHP, ISP and Apex CGI, BSL or GSP.

50
00:04:32,430 --> 00:04:38,520
In the chapter about cross scripting, we discuss the way images in SVG format are too dangerous to

51
00:04:38,520 --> 00:04:44,190
be accepted as user uploads and definitely don't skip this part.

52
00:04:44,490 --> 00:04:48,700
Every uploaded file must have the proper extension that is on the whitelist.

53
00:04:49,290 --> 00:04:52,470
You don't want to let in a file named Dot Access, right?

54
00:04:56,210 --> 00:04:57,980
Finally check the mind type.

55
00:04:59,000 --> 00:05:02,120
This time also against a white list of allowed types.

56
00:05:05,790 --> 00:05:06,570
In this code.

57
00:05:06,570 --> 00:05:12,990
I used a file info module to read the mime type from an actually uploaded file rather than reading mime

58
00:05:12,990 --> 00:05:19,260
type that comes in a file super global s upload method data and which can be potentially fooled by an

59
00:05:19,260 --> 00:05:19,740
attacker.

60
00:05:26,200 --> 00:05:33,490
When saving a file never street under original name, it can contain malicious characters, a reserved

61
00:05:33,490 --> 00:05:40,240
name like easy to access or be bene or be very, very long with an intention to break your system.

62
00:05:41,530 --> 00:05:43,420
Use the randomly generated name.

63
00:05:46,860 --> 00:05:51,420
In this code, we first get the information, then build file path with path info function.

64
00:05:52,080 --> 00:05:53,970
We needed to get the file extension.

65
00:05:55,230 --> 00:06:00,240
Then we generate a random name and append the dot and original extension to it.

66
00:06:04,300 --> 00:06:09,730
You can also combine the random name with heavily filtered and truncated original name.

67
00:06:11,020 --> 00:06:12,520
Let's build a function for that.

68
00:06:15,140 --> 00:06:15,650
Here.

69
00:06:15,830 --> 00:06:20,300
First we get the file, but the info works separately on file name and extension.

70
00:06:21,740 --> 00:06:24,110
Then we change all whitespace to hyphens.

71
00:06:26,140 --> 00:06:29,060
Then we remove all characters, which are not letters.

72
00:06:29,080 --> 00:06:31,240
Digits, underscores and dashes.

73
00:06:33,040 --> 00:06:38,140
And then we truncate the name to 40 chars to avoid any excessively long file names.

74
00:06:39,740 --> 00:06:41,930
Finally we generate the random string.

75
00:06:42,890 --> 00:06:51,200
Join it with dash with the filtered original file name, append the dot and the original extension and

76
00:06:51,200 --> 00:06:52,130
this is the result.

77
00:06:54,080 --> 00:06:55,820
But we should do one more thing.

78
00:06:56,210 --> 00:06:59,840
Check if a file under the same name doesn't already exist.

79
00:06:59,900 --> 00:07:01,910
To prevent overwriting files.

80
00:07:04,290 --> 00:07:11,190
In this example, the new file name is generated by a recursive function that keeps generating the final,

81
00:07:11,190 --> 00:07:16,350
final name with preceding random chars until there is no file under the same name.

82
00:07:17,550 --> 00:07:24,600
So first it generates a final name just like we did before, but then it checks if there is a file under

83
00:07:24,600 --> 00:07:26,550
the same name in the target directory.

84
00:07:27,780 --> 00:07:33,060
If yes, it calls itself once again to generate a new name with the new random string.

85
00:07:34,110 --> 00:07:39,240
If not, it returns the final name to the parent function, which then returns it to your final upload

86
00:07:39,240 --> 00:07:39,780
script.

87
00:07:45,400 --> 00:07:49,480
Started the uploaded fires in a pre-defined place in a designated folder.

88
00:07:50,140 --> 00:07:56,140
You can also limit the potential danger by storing files, and there are different domain to mitigate

89
00:07:56,140 --> 00:08:03,370
any potential cross-site scripting attacks coming from uploaded files on the different server to mitigate

90
00:08:03,370 --> 00:08:10,060
any potential shell code execution from an uploaded files in a write only directory.

91
00:08:10,060 --> 00:08:14,530
If you don't want anyone from the outside to be able to open the files after uploading.

92
00:08:16,140 --> 00:08:23,520
Or in a directory with disabled script execution, you can easily disable BHP execution per directory

93
00:08:23,520 --> 00:08:27,150
by putting this line in your HD access file in the uploads folder.

94
00:08:28,380 --> 00:08:34,200
But there are other scripts out there in Python, Petal, etc. to disable them all.

95
00:08:34,320 --> 00:08:37,290
Use this at the beginning of your HD access file.

96
00:08:38,640 --> 00:08:40,980
Don't worry about the image in the media files.

97
00:08:40,980 --> 00:08:42,270
They will work as usual.

98
00:08:43,740 --> 00:08:49,380
Be careful though, because if the user is able to create some directories in your upload directory

99
00:08:49,710 --> 00:08:55,950
or upload zip packages that are unpacked into directory trees, it may be possible that they smuggle

100
00:08:55,950 --> 00:09:02,790
their own HD access file that will override this protection in a directory will get to handling zip

101
00:09:02,790 --> 00:09:03,780
files in a while.
