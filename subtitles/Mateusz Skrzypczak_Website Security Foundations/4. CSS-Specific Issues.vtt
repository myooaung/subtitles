WEBVTT
1
00:00:05.360 --> 00:00:09.490
You may be thinking as CSR's is rather a static resource.

2
00:00:09.530 --> 00:00:12.600
What can be insecure with it at first?

3
00:00:12.620 --> 00:00:13.160
Nothing.

4
00:00:13.460 --> 00:00:15.140
But consider this example.

5
00:00:17.090 --> 00:00:23.330
If you have lines like this in your public access file, an attacker to some extent can access the potential

6
00:00:23.330 --> 00:00:29.810
document structure and features for logged in users or for users with special privileges like admin

7
00:00:30.920 --> 00:00:36.290
and it all without having to log in or break any password on its own.

8
00:00:36.290 --> 00:00:41.210
It doesn't allow to carry out any attack but can help in some other sort of attack.

9
00:00:41.930 --> 00:00:47.060
It's the same scenario as with comments revealing too much information is dangerous.

10
00:00:48.440 --> 00:00:55.040
The best solution here would be to split the user's file, removing from the default users file everything

11
00:00:55.040 --> 00:00:58.340
that is not used when an anonymous user is browsing the site.

12
00:00:59.120 --> 00:01:05.150
If everyone can easily register and log in, you can keep the services rules for regular authenticated

13
00:01:05.150 --> 00:01:06.110
users as well.

14
00:01:06.980 --> 00:01:09.470
In such cases, there is no need to protect them.

15
00:01:09.470 --> 00:01:15.110
If everything that an attacker would need to do would be to register using some temporary email address

16
00:01:15.110 --> 00:01:16.130
and fake data.

17
00:01:17.390 --> 00:01:23.330
But all rules for a limited group of users like those for admin must be moved to external file.

18
00:01:24.680 --> 00:01:31.580
Now if you name this file style bash admin CCS, it wouldn't be too hard for an attacker to find it

19
00:01:31.580 --> 00:01:32.870
by guessing its name.

20
00:01:33.680 --> 00:01:38.930
So the external services file itself needs to be protected with proper access control.

21
00:01:39.980 --> 00:01:47.210
The proper way to achieve this goal is to move the system rules to a B file instead of doing this.

22
00:01:49.150 --> 00:01:50.110
Do this.

23
00:01:53.590 --> 00:01:58.360
And includes the authorization logic also within the ABC as this file.

24
00:02:00.940 --> 00:02:06.220
First we checked the permissions to prevent output of the linked tag, which would disclose the path

25
00:02:06.220 --> 00:02:07.660
ruining the whole strategy.

26
00:02:09.430 --> 00:02:15.520
Second, we checked the permissions in the file to prevent displaying its contents without proper authorization

27
00:02:15.700 --> 00:02:17.860
in case someone guesses or knows the path.

28
00:02:19.150 --> 00:02:23.110
So now, even if an attacker could guess the path, they won't see anything.

29
00:02:23.410 --> 00:02:25.240
They will get the forum for error.

30
00:02:27.990 --> 00:02:33.000
It can trigger the less professional attacker because it would look like the file doesn't exist.

31
00:02:34.080 --> 00:02:39.990
But the professional attacker might find out that the response time for this file was a little longer

32
00:02:40.140 --> 00:02:46.560
than for a really nonexistent file because before the response, the engine needed to run.

33
00:02:49.440 --> 00:02:55.080
Anyway, knowing that there is a separate file with admin styles is not too dangerous itself.

34
00:02:55.620 --> 00:02:59.550
It's definitely much less risky than revealing all its contents.

35
00:03:00.150 --> 00:03:06.090
Of course, unless the authorisation is done properly is the user is function in our example.

36
00:03:07.950 --> 00:03:14.160
A part of that using BHP instead of the CIA sis file will also prevent Liberals from cashing it.

37
00:03:14.760 --> 00:03:20.400
Thanks to this, the file will be a little bit more secure because it will not get stored locally on

38
00:03:20.400 --> 00:03:26.070
the computer in cash files where someone else could read its contents without authorization.

39
00:03:29.200 --> 00:03:36.090
It's also possible to configure the server to handle all C users files using BHP engine and this way

40
00:03:36.100 --> 00:03:37.030
retaining the C.

41
00:03:37.040 --> 00:03:40.540
S extension in the same BHP file we created earlier.

42
00:03:41.440 --> 00:03:48.760
You would do that in access using this code, but I wouldn't recommend it for two reasons.

43
00:03:49.600 --> 00:03:54.460
First now all static scissors files will have to run through BHP parser to.

44
00:03:55.240 --> 00:03:59.080
You can limit the configuration to a special subdirectory like this.

45
00:04:01.390 --> 00:04:04.510
But then it all becomes unnecessarily complicated.

46
00:04:07.450 --> 00:04:12.910
The second reason is that in this configuration, the thesis file will most probably be cached by the

47
00:04:12.910 --> 00:04:17.800
browser, which makes it a little bit more insecure for reasons we discussed earlier.
