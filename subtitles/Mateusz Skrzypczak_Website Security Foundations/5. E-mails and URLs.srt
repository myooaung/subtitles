1
00:00:04,810 --> 00:00:09,910
Now let's raise the bar a little bit and let's try to validate the email address field.

2
00:00:10,780 --> 00:00:13,870
This is much more complicated because of two reasons.

3
00:00:14,560 --> 00:00:20,830
First, the actual standard for email addresses as described in privacy may differ from what you would

4
00:00:20,830 --> 00:00:21,370
expect.

5
00:00:22,900 --> 00:00:28,900
For example, an email address full at the bar is perfectly fine according to that standard, but in

6
00:00:28,900 --> 00:00:34,570
most cases will be unusable because every public domain name has at least one dot.

7
00:00:35,020 --> 00:00:38,800
So you'd rather expect something like foo at bar dot com.

8
00:00:40,840 --> 00:00:47,770
Second email address is often used in automated tasks where no real person actually even looks at it.

9
00:00:48,190 --> 00:00:52,030
So proper validation is crucial to have these tasks completed.

10
00:00:53,530 --> 00:01:00,220
Apart from that, for those wanting to use BHP filters, the filter validate email seems to actually

11
00:01:00,220 --> 00:01:05,800
do a really good job because it bases on privacy standard with small exceptions.

12
00:01:06,700 --> 00:01:13,000
It rejects domain names without at least a single dot and rejects comments and whitespace folding,

13
00:01:13,000 --> 00:01:16,960
which is not something you would actually need in the vast majority of cases.

14
00:01:19,480 --> 00:01:25,540
Note also that according to standard single quote and angler bracket characters are permitted in an

15
00:01:25,540 --> 00:01:26,380
email address.

16
00:01:26,890 --> 00:01:32,230
And these are the most dangerous characters when it comes to rescue with injection or cross-site scripting

17
00:01:32,230 --> 00:01:32,680
attacks.

18
00:01:33,100 --> 00:01:38,980
Still, don't expect an email address that passed validation to be safe for database query or direct

19
00:01:38,980 --> 00:01:40,060
output on the page.

20
00:01:43,310 --> 00:01:49,070
Let's create our own email validation function that will give us better control over the allowed email

21
00:01:49,070 --> 00:01:52,520
structure and allow us to ported to other languages.

22
00:01:53,060 --> 00:01:56,420
We will need the JavaScript validation for the front and part of the role.

23
00:02:00,180 --> 00:02:08,010
I would choose one of two strategies accept the RNC standard or set your own standard to insure yourself

24
00:02:08,010 --> 00:02:10,980
that you will get addresses in the form that you expect.

25
00:02:12,370 --> 00:02:13,000
Let's see.

26
00:02:13,660 --> 00:02:19,450
The first method would likely allow plainly useless addresses which can result in junk entries in your

27
00:02:19,450 --> 00:02:24,490
database, and such loose validation could lead to poor usability as well.

28
00:02:25,030 --> 00:02:31,750
For example, if a user enters me at example com, it's a valid address, but they clearly just miss

29
00:02:31,750 --> 00:02:32,290
the dot.

30
00:02:33,580 --> 00:02:38,440
You could develop a pre validation function that will check things like that which are theoretically

31
00:02:38,440 --> 00:02:39,850
valid but practically not.

32
00:02:40,150 --> 00:02:43,840
And as the user, if they are really sure the address is at example.

33
00:02:43,850 --> 00:02:45,310
Com, without any doubt.

34
00:02:45,880 --> 00:02:48,490
But that would have to be a very complicated function.

35
00:02:49,810 --> 00:02:56,680
And remember, usually an email address is needed to complete an automated task either confirm registration

36
00:02:56,680 --> 00:03:03,940
or confirm purchase or receive newsletters, etc. etc. So because no public domain name can currently

37
00:03:03,940 --> 00:03:09,730
exist without at least one dot, those will never complete successfully and you will have a useless

38
00:03:09,730 --> 00:03:11,080
record in your database.

39
00:03:13,010 --> 00:03:18,410
Also with this strategy, you will have to be very careful and remember to escape the e-mail address

40
00:03:18,410 --> 00:03:22,400
all the time to avoid excuses, injection or cross-site scripting.

41
00:03:24,470 --> 00:03:29,750
If you choose the second part, though, with your own more strict validation, you risk that someone

42
00:03:29,750 --> 00:03:33,320
who happens to live with the fancy address will not be that true.

43
00:03:33,890 --> 00:03:40,970
But frankly, people rather use only letters, digits, dots, dashes, and their scores and sometimes

44
00:03:40,970 --> 00:03:41,560
classes.

45
00:03:41,900 --> 00:03:47,240
So you could create this averagely complicated, regular expression that will probably not make any

46
00:03:47,240 --> 00:03:49,910
trouble for 99% of your users.

47
00:03:52,210 --> 00:03:55,210
I know it's lengthy, so let's break it down into parts.

48
00:03:55,930 --> 00:04:01,480
The carrot and those are symbols, of course, represent the start and end of this drink so that we

49
00:04:01,490 --> 00:04:04,150
verified the entire string against the pattern.

50
00:04:04,480 --> 00:04:08,040
And for example, don't accidentally let through something like this.

51
00:04:10,450 --> 00:04:13,180
In a local part that is before its symbol.

52
00:04:13,450 --> 00:04:19,780
We allow all letters, numbers, dots, dashes, underscore and plus one or more.

53
00:04:20,500 --> 00:04:26,410
But the dot is particularly complicating our lives here because it cannot start or terminate this part.

54
00:04:26,920 --> 00:04:34,450
So either we have a one character local part or a non dot character optionally followed by a character

55
00:04:34,450 --> 00:04:37,480
ordered and followed by a non character.

56
00:04:40,420 --> 00:04:44,800
Then we have a little symbol to split the local part and the domain part.

57
00:04:46,180 --> 00:04:50,830
Then once again, we need to do something a little bit more complicated for the domain part.

58
00:04:51,430 --> 00:04:52,940
But let's start from the end.

59
00:04:53,740 --> 00:04:57,520
Here we have a dot character followed by at least two letters.

60
00:04:58,150 --> 00:05:04,510
This is a tilde top level domain, for example, dot com, dot net, etc..

61
00:05:06,280 --> 00:05:09,700
And we're left with the part between act and the top level domain.

62
00:05:10,360 --> 00:05:18,940
It's once again in alternative, either a one character domain or a letter or digital character, optionally

63
00:05:18,940 --> 00:05:24,760
followed by a letter or digit ordered or thus and followed by a letter or digit character.

64
00:05:26,590 --> 00:05:30,470
This is to support domain names with dashes or more than one dot.

65
00:05:30,490 --> 00:05:31,780
For example, those two.

66
00:05:33,270 --> 00:05:39,060
And because neither Da'esh nor DOD can start or terminate the domain name, those would be rejected.

67
00:05:40,620 --> 00:05:42,810
However, this will still slip through.

68
00:05:46,840 --> 00:05:48,400
And here are the results.

69
00:05:51,390 --> 00:05:56,910
So using this regular expression, you can be pretty sure that you get a valid email address which can

70
00:05:56,910 --> 00:05:57,600
do its job.

71
00:05:59,530 --> 00:06:05,350
Of course, it's so easy to still enter some fake address and the above rejects can also be fooled in

72
00:06:05,350 --> 00:06:06,400
some cases.

73
00:06:07,060 --> 00:06:10,120
So it's still not guaranteed that the task will be completed.

74
00:06:10,330 --> 00:06:15,700
But at least you can say you did quite a lot to ensure the best quality input that could do its job.

75
00:06:17,530 --> 00:06:23,320
And the great benefit is that with this rigorous pattern, your app will be safe even if you fail to

76
00:06:23,320 --> 00:06:24,760
sanitise the email address.

77
00:06:24,760 --> 00:06:31,060
At some point, no SKU will index and no excess will happen if you do such student validation on the

78
00:06:31,070 --> 00:06:31,990
provided value.

79
00:06:35,540 --> 00:06:39,530
To ensure the email address is working and the user has access to it.

80
00:06:39,800 --> 00:06:46,050
It's common to send a single use time limited verification link to the provided email address, which

81
00:06:46,050 --> 00:06:48,980
the user has to click before being able to continue.

82
00:06:50,450 --> 00:06:56,120
The unverified records can then be automatically deleted after a certain time since they have been submitted.

83
00:06:57,470 --> 00:07:03,200
Just know that someone may have gained access to victim's mailbox and tried to act as this person.

84
00:07:03,800 --> 00:07:09,620
So depending on your business requirements for certain critical operations, clicking such a verification

85
00:07:09,620 --> 00:07:13,790
link might still not be enough to confirm the user's true identity.

86
00:07:17,650 --> 00:07:23,260
And here once again do the validation on the client side using the same regular expression.

87
00:07:26,700 --> 00:07:32,820
But if you'd rather use validation method and portable tool JavaScript, for example, BHP filters or

88
00:07:32,820 --> 00:07:39,300
any other languages method, you can do some simpler validation on the clean site to ensure, for example,

89
00:07:39,300 --> 00:07:42,900
that the string has at least six characters and then add sign.

90
00:07:45,480 --> 00:07:48,840
Validation on the back end is the one that must be unbreakable.

91
00:07:49,290 --> 00:07:51,960
The front in the validation is only to help users.

92
00:07:58,150 --> 00:08:04,780
Violating URLs will be somewhat similar to validating email addresses in that they also allow a limited

93
00:08:04,780 --> 00:08:10,120
range of characters, have a defined structure and finally shared the domain part.

94
00:08:11,770 --> 00:08:14,530
Now the URL can be represented differently.

95
00:08:15,010 --> 00:08:17,020
These are all valid URLs.

96
00:08:21,190 --> 00:08:24,280
Obviously not all of those types will fit your needs.

97
00:08:24,550 --> 00:08:28,990
So how you validate it will depend on what you actually need the world for.

98
00:08:31,460 --> 00:08:36,860
There are different examples of regular expressions on the web, both easy and complex, so you can

99
00:08:36,860 --> 00:08:39,260
just search for them and quickly get inspired.

100
00:08:40,310 --> 00:08:43,010
But suppose you expect a website address.

101
00:08:43,550 --> 00:08:45,440
Your regs can look like this.

102
00:08:48,480 --> 00:08:49,500
Let's break it down.

103
00:08:50,460 --> 00:08:56,040
We have a carrot and those are symbols representing the start and end of the string, like we did with

104
00:08:56,040 --> 00:08:57,120
email validation.

105
00:08:58,710 --> 00:09:05,850
Then we check whether the string starts with ATP or ATP s, which is followed by a column and two slashes.

106
00:09:08,040 --> 00:09:12,810
Then we essentially copy the domain validation part from our email validation rejects.

107
00:09:13,200 --> 00:09:15,690
So we expect one character domain.

108
00:09:17,700 --> 00:09:23,850
Or a letter or digit character, optionally followed by a letter or digit ordered or dash and followed

109
00:09:23,850 --> 00:09:25,560
by a letter or digit character.

110
00:09:28,710 --> 00:09:35,040
Then we verify if we have a property l.D that is a dot character followed by at least two letters.

111
00:09:37,070 --> 00:09:42,860
And then because your roles can be very, very different, we simply check if the rest of the string

112
00:09:42,980 --> 00:09:51,830
includes any of the allowed characters letters, digits, dash, dot, slash and other allowed characters.

113
00:09:52,550 --> 00:09:57,740
Some of them need to be escaped with the backslash because of the special meaning in regex syntax.

114
00:09:58,370 --> 00:10:03,740
So we don't validate if the query string syntax makes sense or if the hash doesn't come before query

115
00:10:03,740 --> 00:10:05,210
string, which would be incorrect.

116
00:10:05,750 --> 00:10:08,930
Such complex validation would need an enormous function.

117
00:10:10,830 --> 00:10:14,700
As you can see, this regs doesn't accept the IP addresses.

118
00:10:15,360 --> 00:10:21,420
If you want to allow them, you can, for example, other alternative formats in the domain part, allowing

119
00:10:21,420 --> 00:10:23,970
either an expression that matches the IP address.

120
00:10:24,210 --> 00:10:30,060
In this case, we only allow IP version four or what we already have after the pipeline.

121
00:10:32,400 --> 00:10:39,480
The IP part is so complicated because it can accept a value greater than 255 in a group or a number

122
00:10:39,480 --> 00:10:41,610
preceded by 001.

123
00:10:47,120 --> 00:10:49,010
And here are the test results.

124
00:10:54,520 --> 00:10:56,170
But there is an alternative method.

125
00:10:57,100 --> 00:11:03,490
You can first break up the URL into parts with partial function and run simpler regular expressions

126
00:11:03,490 --> 00:11:04,900
on each of its parts.

127
00:11:07,420 --> 00:11:13,780
In this code, we first break up the you are a string, which in this case gives us an array with scheme

128
00:11:13,990 --> 00:11:19,900
that is protocol, host path, query and fragment that is cache.

129
00:11:21,400 --> 00:11:28,300
Then we check the scheme against the wackiest of protocols and host against the part of regular expression

130
00:11:28,300 --> 00:11:29,650
that we worked on earlier.

131
00:11:30,520 --> 00:11:32,860
Similarly, you can verify other parts.

132
00:11:38,660 --> 00:11:43,940
In JavaScript, you can apply exactly the same regular expression to the string match function.

133
00:11:47,920 --> 00:11:51,430
And there's the quasi equivalent of pass u l function as well.

134
00:11:51,820 --> 00:11:53,200
There you are, an object.

135
00:11:55,750 --> 00:11:57,430
There's a couple of differences, though.

136
00:11:57,910 --> 00:12:03,640
The protocol is taught in the protocol property not scheme, and it contains the trading column.

137
00:12:04,480 --> 00:12:10,030
So before comparing it with the array of allowed protocols, we need to remove that trading column with

138
00:12:10,030 --> 00:12:11,080
the replace method.

139
00:12:13,570 --> 00:12:23,260
Also, the path becomes the path name and query becomes search, the fragment becomes hash and it contains

140
00:12:23,260 --> 00:12:24,880
the preceding has signed to.

141
00:12:25,120 --> 00:12:26,350
So remember about the.

142
00:12:32,170 --> 00:12:37,960
This whole checking of course, still doesn't guarantee that you were at least correct works or is what

143
00:12:37,960 --> 00:12:42,100
you there wanted to enter despite it helps improving the input quality.

144
00:12:43,180 --> 00:12:48,160
If you need a working l, you could try to test the connection for example, with kernel.

145
00:12:50,550 --> 00:12:58,260
In this example, we make a request to a given URL with the following flags no body because we only

146
00:12:58,260 --> 00:12:59,940
want to check if the were in the works.

147
00:13:00,090 --> 00:13:06,510
So we don't actually need the response body for the location to follow redirects.

148
00:13:08,160 --> 00:13:16,260
Max to reduce to limit the number of free drinks to three and time out to avoid waiting longer than

149
00:13:16,260 --> 00:13:17,130
5 seconds.

150
00:13:19,050 --> 00:13:24,180
Then using a get info method, we ask for last transverse htp code.

151
00:13:24,750 --> 00:13:31,410
So if the provided you were redirected as successfully to another URL within the max radius limit and

152
00:13:31,410 --> 00:13:37,380
that finally were LS response would be 200, the last transverse response would be 200.

153
00:13:37,770 --> 00:13:39,390
Which means that you are the works.
