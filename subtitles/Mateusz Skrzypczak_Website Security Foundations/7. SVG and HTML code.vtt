WEBVTT
1
00:00:06.340 --> 00:00:10.570
SPG is an image file format but can be a dangerous resource.

2
00:00:11.470 --> 00:00:19.240
Unlike Jeep X badges or gifs which are binary files, SPG is actually a text format, a type of XML

3
00:00:19.240 --> 00:00:19.630
file.

4
00:00:19.780 --> 00:00:21.080
Just like Easter meals.

5
00:00:22.420 --> 00:00:29.140
So you may be open for exercise attack if you allow an untrusted SPG image, either coming from an external

6
00:00:29.140 --> 00:00:30.940
server or from user uploads.

7
00:00:33.560 --> 00:00:40.340
Because this innocent Chevron icon could as well contain some not that innocent code which acts in background.

8
00:00:42.180 --> 00:00:45.330
Also the script that is permitted inside the as big.

9
00:00:50.880 --> 00:00:55.500
But this is dangerous when you put the SPG in line with an SPG tank.

10
00:00:57.570 --> 00:01:03.960
When you put the image with image tag like this, the browser is expected to not execute any script

11
00:01:03.960 --> 00:01:04.890
from the inside.

12
00:01:06.340 --> 00:01:07.570
So are we saved them?

13
00:01:09.100 --> 00:01:10.180
Not entirely.

14
00:01:11.320 --> 00:01:17.710
If the attacker would be able to upload them as verified on your site and then trigger the user to directly

15
00:01:17.710 --> 00:01:21.820
open that SPG file in the browser or redirect them to that file.

16
00:01:22.690 --> 00:01:29.170
The script within SPG file will then run in the user's browser in the same origin as your site.

17
00:01:29.380 --> 00:01:33.130
So the attacker would be able to steal all site cookies, for example.

18
00:01:36.150 --> 00:01:43.170
In general, I'd recommend to disallow custom as uploads and disallow use of any external avg's.

19
00:01:43.530 --> 00:01:46.560
Even if you plan to use them within image tag only.

20
00:01:48.170 --> 00:01:52.610
Of course, if you use as widgets that you created for layout, keep using them.

21
00:01:52.880 --> 00:01:54.500
These are not dangerous.

22
00:01:59.070 --> 00:02:03.360
At times you actually need to render the email content coming from user.

23
00:02:04.170 --> 00:02:10.350
If you let anyone submit the HTML code or write the content using visual editor, you're entering the

24
00:02:10.350 --> 00:02:11.010
minefield.

25
00:02:11.610 --> 00:02:17.430
There's so many malicious things that an attacker can type in that you really shouldn't even try to

26
00:02:17.430 --> 00:02:18.690
do your own filtering.

27
00:02:19.620 --> 00:02:20.490
Let's be honest.

28
00:02:20.760 --> 00:02:26.150
If you're not an cross-site scripting hacker, you probably have no idea what code can be used to run

29
00:02:26.160 --> 00:02:27.180
a malicious script.

30
00:02:27.450 --> 00:02:29.610
So will not be able to defend against it.

31
00:02:30.330 --> 00:02:35.640
And if you are an excessive hacker, you must be really good to be able to cover all possibilities.

32
00:02:36.030 --> 00:02:38.520
And if so, what you'll be doing here in this course.

33
00:02:39.630 --> 00:02:40.650
So what to do?

34
00:02:41.310 --> 00:02:45.000
The only feasible approach is to use a filtering library for that.

35
00:02:45.570 --> 00:02:48.180
Some well known and actively maintained, of course.

36
00:02:50.940 --> 00:02:55.440
In BHP, the one most often recommended is a steam purifier.

37
00:02:56.550 --> 00:03:01.920
If you take a look at GitHub, it has quite a lot of contributors and gets pretty constant updates.

38
00:03:06.640 --> 00:03:11.320
It's also highly configurable, but at the same time very straightforward to start off.

39
00:03:12.250 --> 00:03:15.730
And what I like very much about it, it has no dependencies.

40
00:03:17.290 --> 00:03:22.930
If you don't use package managers, start with downloading the code package either from GitHub or HTML

41
00:03:22.930 --> 00:03:24.100
Purifier homepage.

42
00:03:25.780 --> 00:03:32.260
In the package you have the library folder, which is the only thing you need to actually run the purifier

43
00:03:32.260 --> 00:03:40.000
on your site, put it somewhere in your site files, then follow the code from documentation.

44
00:03:42.300 --> 00:03:43.050
And that's it.

45
00:03:44.280 --> 00:03:48.900
In the first line, you, of course, need to specify the correct path to the library folder.

46
00:03:50.350 --> 00:03:57.410
Then we run a default configuration, which is the email 1.0 transitional dock type and the UTF eight

47
00:03:57.440 --> 00:03:58.480
character encoding.

48
00:04:01.290 --> 00:04:06.180
A steamer purifier is a complicated library and has lots of configuration options.

49
00:04:06.810 --> 00:04:12.870
If the output is not exactly correct in your case, review the documentation and do the necessary tweaks.

50
00:04:14.900 --> 00:04:19.430
For example, to change the encoding or a doc type, use these codes respectively.

51
00:04:21.720 --> 00:04:28.160
Not that a team of five dog type is not yet available, so your best bet is to use the email.

52
00:04:28.290 --> 00:04:30.720
If your site is written in HTML five.

53
00:04:32.740 --> 00:04:36.940
The installed document is worth reading for other examples of configuration.

54
00:04:43.810 --> 00:04:47.710
And the demo page will help you to properly tweak configuration variables.

55
00:04:57.030 --> 00:05:01.830
It's also worth looking at the excess attacks smoke dust on the library's homepage.

56
00:05:02.580 --> 00:05:06.240
It gives you an idea how an excessive attack may look like.

57
00:05:20.300 --> 00:05:24.620
Use the purifying method in all places where you expect an HTML input.

58
00:05:25.430 --> 00:05:29.480
Your site will be pretty well-protected from malicious code submitted by users.

59
00:05:33.140 --> 00:05:38.060
If you need to do the same on the front end, you can use a JavaScript library of the same purpose,

60
00:05:38.420 --> 00:05:40.310
one of which is Dom Purify.

61
00:05:41.150 --> 00:05:44.960
Looking at the GitHub page, it also has quite a lot of contributors.

62
00:05:47.420 --> 00:05:49.460
And it gets updated even more often.

63
00:05:53.230 --> 00:05:59.320
Now you can install it via Node.js, but it's very easy to do it manually as well if you don't use package

64
00:05:59.320 --> 00:05:59.920
managers.

65
00:06:03.270 --> 00:06:10.080
After downloading the package from GitHub inside the dist folder, find the purified min js file, which

66
00:06:10.080 --> 00:06:16.170
is the only thing you need to run dom purify, put it in your site files and include on the page like

67
00:06:16.170 --> 00:06:17.310
any other script.

68
00:06:21.650 --> 00:06:25.400
Then you simply use the sunny days method of don't purify object.

69
00:06:27.150 --> 00:06:27.690
The process.

70
00:06:27.690 --> 00:06:36.870
It can now be hopefully safe to use in our HTML document, write, etc. but if you're going to use it

71
00:06:36.870 --> 00:06:39.870
with the git query, read the user instructions carefully.

72
00:06:40.170 --> 00:06:45.960
You need to add as safe for the query flag only then you can safely use it in deeper if functions for

73
00:06:45.960 --> 00:06:47.220
example is HTML.

74
00:06:50.660 --> 00:06:56.090
There are other parameters you might want to use and the examples in read me make it pretty clear how

75
00:06:56.090 --> 00:06:56.690
to use them.

76
00:06:57.590 --> 00:07:03.350
For example, to allow only certain tags or attributes or explicitly disallow some of them.

77
00:07:04.610 --> 00:07:06.950
I let you refer to the documentation for more.

78
00:07:09.160 --> 00:07:13.600
Oh, and there's a demo as well where you can see how great job the library's doing.
