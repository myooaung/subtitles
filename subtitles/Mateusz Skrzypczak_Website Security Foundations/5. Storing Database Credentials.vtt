WEBVTT
1
00:00:05.870 --> 00:00:11.750
You might be also wondering about the security of database credentials which need to be stored somewhere

2
00:00:11.750 --> 00:00:12.470
in your app.

3
00:00:13.910 --> 00:00:20.370
In general, as long as you keep the log in and password as constants in an executable file like something,

4
00:00:20.600 --> 00:00:23.000
be BGP, you're almost safe.

5
00:00:24.440 --> 00:00:25.970
And that's what WordPress does.

6
00:00:26.450 --> 00:00:33.890
The credentials by default are stored as constants in WP config P2P file, which is in the directory.

7
00:00:35.210 --> 00:00:41.480
When you navigate to this file with your web browser, you see nothing because this file doesn't print

8
00:00:41.480 --> 00:00:42.020
anything.

9
00:00:42.260 --> 00:00:43.430
There is no output.

10
00:00:44.300 --> 00:00:47.900
Assigning values to constants isn't going to be visible this way.

11
00:00:48.860 --> 00:00:55.640
There is, however, a risk that, for example, due to server error, an executable file won't execute

12
00:00:55.820 --> 00:00:58.220
and will instead display its contents.

13
00:00:59.420 --> 00:01:07.220
To mitigate this risk, you can do at least three things move the file outside of root directory of

14
00:01:07.220 --> 00:01:08.150
your site or app.

15
00:01:08.690 --> 00:01:12.950
It will be a place unreachable by anonymous clients such as web browsers.

16
00:01:14.240 --> 00:01:16.430
See this example of filesystem structure.

17
00:01:18.710 --> 00:01:19.460
The conflict.

18
00:01:19.460 --> 00:01:25.340
BHP file can't be reached using neither example dot com slash conflict BHP nor.

19
00:01:25.370 --> 00:01:32.660
Example dot com slash to the slash config BHP as its one directory higher than that documents route

20
00:01:32.660 --> 00:01:33.050
path.

21
00:01:36.300 --> 00:01:42.090
It could be, however, written by an attacker if you don't protect your app from path traversal attacks,

22
00:01:42.390 --> 00:01:44.400
which we will discuss later in this course.

23
00:01:45.330 --> 00:01:51.240
For example, in all places where you use file, get contents or include functions without proper path

24
00:01:51.240 --> 00:01:51.840
filtering.

25
00:01:54.570 --> 00:02:00.030
Be careful though, as your folder structure might be more complicated and this might need more attention.

26
00:02:00.660 --> 00:02:01.740
See these example?

27
00:02:04.360 --> 00:02:10.510
None of your domains points to the public email directory and instead you have two directories for two

28
00:02:10.510 --> 00:02:11.080
domains.

29
00:02:11.560 --> 00:02:15.670
Up one example dot com and up to example dot com.

30
00:02:16.330 --> 00:02:19.630
Pointing to up one and up two folders respectively.

31
00:02:20.500 --> 00:02:24.250
So whatever is outside of these folders is outside of the documents routes.

32
00:02:24.250 --> 00:02:24.580
Right.

33
00:02:26.380 --> 00:02:34.180
The config BHP file can't be reached using neither of app one example dot com slash config BHP app one

34
00:02:34.180 --> 00:02:42.130
example dot com slash two dot slash config BHP as it's one directory higher, but it can be reached

35
00:02:42.130 --> 00:02:48.100
with the default client domain or server's IP, which points to the public email folder.

36
00:02:48.670 --> 00:02:52.510
For example, if someone types the AP slash config BHP.

37
00:02:54.380 --> 00:03:00.290
So despite its outside of both of your domains, documents, routes, it's not outside of the server's

38
00:03:00.290 --> 00:03:01.010
document routes.

39
00:03:01.370 --> 00:03:06.110
It needs to be moved, hiring the file structure outside the public HTML folder.

40
00:03:07.910 --> 00:03:13.430
Only then it will prevent direct access from the browser, but it will still be vulnerable for path

41
00:03:13.430 --> 00:03:14.480
traversal attacks.

42
00:03:19.310 --> 00:03:23.810
Another thing you can do is deny access to the config file from the outside.

43
00:03:24.830 --> 00:03:31.280
In aperture, you would need to put that code in the access file in a directory where the config file

44
00:03:31.280 --> 00:03:33.390
resides in this code.

45
00:03:33.410 --> 00:03:39.350
We explicitly imposed the restrictions on this single config BHP file with the files directive.

46
00:03:42.270 --> 00:03:46.200
Of course, the pizza engine will still be able to access the file.

47
00:03:48.880 --> 00:03:52.000
You should also said that strict permissions for the config file.

48
00:03:52.750 --> 00:03:56.080
The permissions can be set, for example, using FTP client.

49
00:03:56.680 --> 00:03:59.500
What you need at minimum is 400.

50
00:04:00.070 --> 00:04:05.890
That will mean only the owner will be able to read the file and anybody else will have no access to

51
00:04:05.890 --> 00:04:06.190
it.

52
00:04:06.760 --> 00:04:13.720
So only the script running by your server will be able to use it but not modify it, and anyone else

53
00:04:13.750 --> 00:04:16.150
will receive a foreign three forbidden error.

54
00:04:18.100 --> 00:04:22.600
If you cannot set such strict permissions, 640 will also work fine.

55
00:04:23.230 --> 00:04:27.130
The important thing is to not give Rich permission to others.

56
00:04:29.470 --> 00:04:33.850
You might wonder why the script doesn't need the execute permission for the owner.

57
00:04:34.240 --> 00:04:39.520
This is because scripts like BHP don't actually need the execute permission to run.

58
00:04:40.300 --> 00:04:43.540
It's needed for binary scripts which BHP are not.

59
00:04:43.780 --> 00:04:45.340
So just read is enough.
