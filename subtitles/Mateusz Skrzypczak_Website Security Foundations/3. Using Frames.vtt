WEBVTT
1
00:00:05.240 --> 00:00:07.220
In the server configuration chapter.

2
00:00:07.220 --> 00:00:12.650
We discussed the click jacking technique and the Extreme Options header, which is meant to protect

3
00:00:12.650 --> 00:00:13.820
your site against it.

4
00:00:14.690 --> 00:00:20.120
As a reminder, click jacking is a technique used to fool legitimate users to believe that they are

5
00:00:20.120 --> 00:00:24.410
on the site they think they are, or they click what they think they click.

6
00:00:25.310 --> 00:00:30.920
But in reality, they are usually on the malicious site which has the legitimate site loaded inside

7
00:00:30.920 --> 00:00:33.500
a knife frame which spans across the whole viewport.

8
00:00:34.670 --> 00:00:41.210
In the such setup, the attacker can steal user data by catching keyboard input, clicks, etc..

9
00:00:41.930 --> 00:00:44.360
Now I will elaborate a little more on that.

10
00:00:45.680 --> 00:00:51.740
Extreme Options is one of the HTP headers that can protect your site from being open within the frame.

11
00:00:52.670 --> 00:00:53.870
It has two values.

12
00:00:54.740 --> 00:01:01.070
The first is deny, which will block any origin, even your own, from putting your page in a frame.

13
00:01:03.860 --> 00:01:10.130
The second possible value is same origin, which permits the page to be put in a frame only by pages

14
00:01:10.130 --> 00:01:11.870
which are under the same origin.

15
00:01:12.770 --> 00:01:19.250
In other words, only your site will be able to put its own pages in frames, but no external site will

16
00:01:19.250 --> 00:01:20.300
be able to do so.

17
00:01:22.270 --> 00:01:29.200
Use this value only if you really need to, but any of your side pages in frames browser implementation

18
00:01:29.200 --> 00:01:35.230
for these used to be buggy and the whole feature could have been compromised because browsers were not

19
00:01:35.230 --> 00:01:36.880
checking the whole frame chain.

20
00:01:37.210 --> 00:01:44.140
So for example, this would work because the in there good example dot com is eventually within good

21
00:01:44.140 --> 00:01:48.730
example dot com despite there's this evil example dot com in the middle.

22
00:01:51.510 --> 00:01:52.140
Anyway.

23
00:01:52.200 --> 00:01:53.430
Do use this header.

24
00:01:54.090 --> 00:02:01.980
You can set it either in HD access using heather always set instruction or if you're using BGP you can

25
00:02:01.980 --> 00:02:03.600
send it with the Heather function.

26
00:02:04.980 --> 00:02:11.700
Or if you're using WordPress, it has a built in function for that since version 3.1.3 which can be

27
00:02:11.700 --> 00:02:13.770
used in your theme's function file.

28
00:02:14.400 --> 00:02:20.140
However, it sets the value to same origin, not to deny, to use deny.

29
00:02:20.160 --> 00:02:23.700
You need to create your own function rather than using the built in one.

30
00:02:26.940 --> 00:02:30.180
In any case, just don't use html meta tag.

31
00:02:31.950 --> 00:02:35.940
The extreme option header is supported in effectively all the browsers.

32
00:02:36.390 --> 00:02:40.020
Firefox Chrome eight and newer and Safari.

33
00:02:42.000 --> 00:02:48.480
Finally, the extreme options header used to support and allow from directive to allow certain origins

34
00:02:48.480 --> 00:02:50.070
to display your page in a frame.

35
00:02:50.370 --> 00:02:51.750
But it's now deprecated.

36
00:02:52.410 --> 00:02:57.630
You can use content security policy to accomplish that and this is what we are going to learn now.

37
00:03:00.930 --> 00:03:07.440
Content security policy is a quite complex technique to specify the permitted origins of scripts, styles,

38
00:03:07.440 --> 00:03:09.720
fonts and other resources on your site.

39
00:03:10.410 --> 00:03:12.120
This is just a brief introduction.

40
00:03:12.130 --> 00:03:15.930
We will talk about it in detail in the chapter about cross-site scripting.

41
00:03:16.440 --> 00:03:19.920
So don't worry if you don't get everything now or will have doubts.

42
00:03:21.480 --> 00:03:27.960
One of the security aspects that CSP can control is by which origins a page can be put in the frame,

43
00:03:28.470 --> 00:03:31.110
and it gives us more granular control over that.

44
00:03:31.710 --> 00:03:38.370
And by the way, it's intended to replace the previously mentioned extreme options, whether you implement

45
00:03:38.370 --> 00:03:42.030
content security policy just like any other HTP header.

46
00:03:42.960 --> 00:03:46.230
See an example of this being said in HD Access.

47
00:03:49.020 --> 00:03:50.670
And then example in BHP.

48
00:03:53.060 --> 00:03:58.550
To completely prevent embedding your site in a frame using non keyword like we just did.

49
00:03:59.330 --> 00:04:02.540
It's equivalent to extreme options set to deny.

50
00:04:04.860 --> 00:04:10.980
Frame ancestors is only one of many CCP directives and will learn others in future chapters.

51
00:04:12.380 --> 00:04:18.650
So to only allow the piece to be displayed in a frame by other pages in the same origin, use the self

52
00:04:18.650 --> 00:04:23.540
keywords which is equivalent to extreme options set to same origin.

53
00:04:25.540 --> 00:04:31.300
To allow custom origins to embed your page in the frame, provide them this time without single quotes

54
00:04:31.300 --> 00:04:32.860
separated by spaces.

55
00:04:33.940 --> 00:04:38.650
Extreme options doesn't allow you to go that far, so there is no equivalent for this.

56
00:04:40.910 --> 00:04:43.790
You can combine both keywords and specific origins.

57
00:04:44.660 --> 00:04:51.410
In this example, your page can be put in a frame by other pages in the same origin and by htp s.

58
00:04:51.410 --> 00:04:51.770
W.

59
00:04:51.770 --> 00:04:53.660
W w example dot org.

60
00:04:55.220 --> 00:05:00.320
I will talk about the headers syntax in details in the cross-site scripting chapter and you will learn

61
00:05:00.320 --> 00:05:03.890
how to mix the frame ancestors directive with other directives.

62
00:05:05.860 --> 00:05:12.010
Unfortunately, the content security policy feature is relatively new and it's not backwards compatible,

63
00:05:12.400 --> 00:05:15.340
which means all their browsers will ignore it completely.

64
00:05:16.120 --> 00:05:21.940
In my opinion, if you don't need to allow external origins to embed your page in frames, use the first

65
00:05:21.940 --> 00:05:22.270
method.

66
00:05:22.270 --> 00:05:26.860
We discussed extreme options with the value of denial or same origin.

67
00:05:27.910 --> 00:05:30.130
Despite it will become deprecated in future.

68
00:05:30.280 --> 00:05:35.350
It's much easier to set up, still does the same good job and has wider support.

69
00:05:38.770 --> 00:05:42.550
Earlier, Clegg ducking protection, was done with a little JavaScript code.

70
00:05:44.390 --> 00:05:48.080
But of course it wouldn't work if the user had JavaScript turned off.

71
00:05:48.890 --> 00:05:53.780
Also, a number of ways to bypass this feature have been published and it is not secure.

72
00:05:55.120 --> 00:06:01.330
You don't need to put this code on your site if you use any of the aforementioned HTP headers and definitely

73
00:06:01.420 --> 00:06:02.620
don't rely on it.

74
00:06:03.850 --> 00:06:08.610
Always use the HTP header which will do the job in practically every case.

75
00:06:12.050 --> 00:06:13.790
Now let's think the other way.

76
00:06:13.970 --> 00:06:19.130
How to protect your website when you wants to place a frame with a third party page inside.

77
00:06:20.090 --> 00:06:25.670
This is very important to consider because the embedded page has pretty much full access to the page

78
00:06:25.670 --> 00:06:28.220
that embeds it with window parent object.

79
00:06:29.570 --> 00:06:35.900
This code, when placed on the page that is embedded in an iframe, will redirect the parent page your

80
00:06:35.900 --> 00:06:38.720
page to malicious dot example dot com.

81
00:06:39.380 --> 00:06:44.390
The embedded page can also run others, modify parents, dom, etc..

82
00:06:45.050 --> 00:06:48.380
You see, it has quite a lot of control over the parent page.

83
00:06:50.030 --> 00:06:55.910
What you can do is put an iframe into a sandbox mode simply by adding a sandbox attributes.

84
00:06:57.290 --> 00:07:00.680
With this set up, the iframe can barely do anything.

85
00:07:01.070 --> 00:07:01.820
No script.

86
00:07:01.820 --> 00:07:02.870
We're undecided.

87
00:07:02.900 --> 00:07:08.870
No form will be submitted and it will have no access to cookies, webstore, its plugins, etc..

88
00:07:11.060 --> 00:07:14.990
But because with such restrictions, the frame content often gets useless.

89
00:07:15.290 --> 00:07:19.340
You can lose the sandbox restrictions by applying some value to the attribute.

90
00:07:20.810 --> 00:07:27.230
For example, allow scripts will allow the front page to run JavaScript, but still with limited access

91
00:07:27.230 --> 00:07:27.980
to its parent.

92
00:07:28.550 --> 00:07:34.100
It will not allow parents don't manipulation and it wouldn't let changing the part of page URL.

93
00:07:36.050 --> 00:07:42.860
To allow access you need to use allows same origin, but that pretty much makes the whole sandbox attribute

94
00:07:42.860 --> 00:07:48.680
redundant because without access the embedded page can strip the sandbox attribute from itself.

95
00:07:51.030 --> 00:07:58.260
To allow a redirect, you would have to add allowed top navigation or allow top navigation by user activation

96
00:07:58.470 --> 00:08:02.970
to make sure it doesn't happen automatically, but only on users action like a click.

97
00:08:04.380 --> 00:08:06.290
There are more values for this attribute.

98
00:08:06.330 --> 00:08:13.050
For example, allow forms to allow for submission or allow pop ups to open new windows or tabs.

99
00:08:13.890 --> 00:08:17.100
Check the and the an entry for iframe for a complete list.

100
00:08:21.790 --> 00:08:23.440
One more thing I need to add.

101
00:08:24.010 --> 00:08:30.250
Even if you put the third party iframe into a sandbox, it's still an external resource which you need

102
00:08:30.250 --> 00:08:32.320
to trust before you put it on your page.

103
00:08:33.420 --> 00:08:35.100
What if that site gets hacked?

104
00:08:35.640 --> 00:08:42.010
Or what if it later turns out to be a malicious third party even without being able to run JavaScript?

105
00:08:42.030 --> 00:08:47.040
With time, the iframe content can become something else than you thought when you put it on your page.

106
00:08:47.460 --> 00:08:49.080
For example, a phishing attempt.

107
00:08:50.080 --> 00:08:51.460
For maximum security.

108
00:08:51.640 --> 00:08:54.880
Better to avoid the external iframe content whenever you can.

109
00:08:56.830 --> 00:09:01.600
Do you remember the referrer policy header that we discussed earlier in the course?

110
00:09:02.170 --> 00:09:08.220
I mentioned the referrer policy attribute for iframe tags, which can have the same values as the ATP

111
00:09:08.230 --> 00:09:08.680
header.

112
00:09:09.520 --> 00:09:15.850
It controls how much information the embedded page gets about the parent within the referrer HTTP header.

113
00:09:16.780 --> 00:09:21.190
In this example, the embedded page will get no information about the referrer.

114
00:09:23.310 --> 00:09:29.610
And in the second example it will know only the origin that is scheme hosted at the port, not the full

115
00:09:29.610 --> 00:09:30.150
URL.

116
00:09:32.630 --> 00:09:37.730
The referrer policy attribute overrides the referrer policy set for the embedding page.

117
00:09:40.210 --> 00:09:40.960
In this code.

118
00:09:41.230 --> 00:09:46.870
Despite we said the no referrer policy for the whole page, the referrer will be sent to a they frame.

119
00:09:50.310 --> 00:09:55.500
Please refer to the server configuration chapter for the complete list of permitted values and what

120
00:09:55.500 --> 00:09:56.010
they mean.
