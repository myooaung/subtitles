1
00:00:05,380 --> 00:00:11,710
Let's start with the most basic context in which you may need to put some data, a HTML element content.

2
00:00:13,560 --> 00:00:19,680
It's difficult to whitelist allowed characters if we expect an arbitrary text like a user's full name

3
00:00:19,680 --> 00:00:21,540
post content or a message.

4
00:00:22,230 --> 00:00:27,540
And as we discussed in the chapter about the validation, stripping tax can be quite difficult and is

5
00:00:27,540 --> 00:00:28,500
often faulty.

6
00:00:29,580 --> 00:00:36,000
So instead of removing tags or everything apart allowed characters, you need to escape the potentially

7
00:00:36,000 --> 00:00:36,960
dangerous ones.

8
00:00:37,500 --> 00:00:43,830
In this context, you definitely should escape these five characters ampersand, left and right and

9
00:00:43,830 --> 00:00:46,800
glue brackets, double quote and single quote.

10
00:00:47,790 --> 00:00:49,290
We need to escape them.

11
00:00:49,290 --> 00:00:55,230
Or in other words, and code, because an escape they can form an email code, which we don't want.

12
00:00:55,890 --> 00:01:02,400
So if we don't expect any markup, we just escape these five characters instead of trying to strip tags.

13
00:01:03,750 --> 00:01:09,600
This way the page will display any potential tags in plaintext rather than trying to interpret them.

14
00:01:09,930 --> 00:01:11,460
And the page will be safe.

15
00:01:13,950 --> 00:01:14,850
In BHP.

16
00:01:14,850 --> 00:01:22,050
This is done by a special function which converts these five features into corresponding A.T.M. entities.

17
00:01:23,300 --> 00:01:30,140
So when we want to render some user data on page in the element content context, we just need to pass

18
00:01:30,140 --> 00:01:32,390
it to this function before we print it.

19
00:01:34,070 --> 00:01:39,560
In this example, the script tag and its contents will be rendered on page as the visible code.

20
00:01:39,770 --> 00:01:43,580
Rather than being interpreted, the script will not execute.

21
00:01:46,280 --> 00:01:52,370
The East Timor special charters function will be your best friend in excess as prevention because it's

22
00:01:52,370 --> 00:01:54,440
useful in other contexts as well.

23
00:01:55,010 --> 00:02:00,500
But please note that by default it doesn't escape the last character of the five that they pointed out,

24
00:02:00,740 --> 00:02:02,210
which is a single quote.

25
00:02:04,300 --> 00:02:06,940
The function accepts up to four arguments.

26
00:02:07,360 --> 00:02:12,670
The input string of course, flags and encoding and the double encode parameter.

27
00:02:14,080 --> 00:02:16,990
The second argument flags is really important.

28
00:02:19,120 --> 00:02:19,720
See this?

29
00:02:23,240 --> 00:02:26,480
When used without the flag, the function will not escape.

30
00:02:26,480 --> 00:02:27,440
Single quotes.

31
00:02:30,330 --> 00:02:32,970
When used with the end quotes flag.

32
00:02:33,270 --> 00:02:38,310
The function will escape both double and single quotes, which is what we usually want.

33
00:02:38,640 --> 00:02:41,640
So this is how you would normally wants to run this function?

34
00:02:44,790 --> 00:02:49,860
In this context, it doesn't make much difference, but it will make in other contexts.

35
00:02:51,980 --> 00:02:58,820
Finally, you can opt out from escaping any quotes by explicitly setting and no quotes flag which means

36
00:02:58,820 --> 00:03:01,730
only English brackets and ampersand will be escaped.

37
00:03:03,320 --> 00:03:09,230
This may only be used safely in the time of element content context, but they don't see practical reasons

38
00:03:09,230 --> 00:03:10,580
not to escape quotes.

39
00:03:10,880 --> 00:03:13,760
So by default, I always use and quotes.

40
00:03:14,030 --> 00:03:14,990
It's a good habit.

41
00:03:17,680 --> 00:03:19,870
Also, the third argument is important.

42
00:03:19,990 --> 00:03:25,780
If you need to escape a string which is encoded in the charge set other than the one set in default

43
00:03:25,780 --> 00:03:30,730
charge set configuration in BHP by default, this is UTF eight.

44
00:03:31,090 --> 00:03:36,640
So if you use something else on your site or if the specific string is encoded with difference, Char

45
00:03:36,640 --> 00:03:39,700
said you must specified in a third argument.

46
00:03:41,650 --> 00:03:45,010
Ideally, use UTF eight everywhere on your site.

47
00:03:45,490 --> 00:03:48,430
It can handle many characters and should suit your needs.

48
00:03:49,630 --> 00:03:51,280
BHP functions by default.

49
00:03:51,280 --> 00:03:55,050
Use UTF eight other like JSON decode.

50
00:03:55,150 --> 00:03:57,280
Accept only UTF eight input.

51
00:03:57,670 --> 00:04:01,660
So any data coming in another encoding must be converted first.

52
00:04:02,620 --> 00:04:05,980
In this course, I assumed the use of UTF eight everywhere.

53
00:04:09,640 --> 00:04:14,260
HMO entities is a similar function, and these two are sometimes confused.

54
00:04:15,040 --> 00:04:20,590
The difference is that each team of entities converts all characters that give entity equivalence,

55
00:04:20,800 --> 00:04:26,500
which means not only dimension five, but also those like copyright or a registered trademark symbol.

56
00:04:28,430 --> 00:04:33,410
To protect your site from cross-site scripting attacks each time a special jars is enough.

57
00:04:36,160 --> 00:04:42,940
The last two functions to mention just in case are a team of special chairs, the code and HTML and

58
00:04:43,240 --> 00:04:48,100
the code which can be used to reverse the convention made by encoding functions.

59
00:04:51,970 --> 00:04:55,840
What about the front end code vulnerable to DOM based access?

60
00:04:56,860 --> 00:05:03,820
Unfortunately, in pure JavaScript there is no team of special chars nor entities equivalent, so you're

61
00:05:03,820 --> 00:05:05,410
left with doing it on your own.

62
00:05:06,400 --> 00:05:10,660
The simplest way to do that is to run the replace method on the target string.

63
00:05:12,940 --> 00:05:20,410
In this function, we first create an object with character and entity pairs and then run the replace

64
00:05:20,410 --> 00:05:21,580
method on the string.

65
00:05:24,270 --> 00:05:30,780
The replace method accepts a function as a second argument which returns and encoded entity from a collection

66
00:05:30,780 --> 00:05:33,930
of character entity pairs with defined at the beginning.

67
00:05:37,140 --> 00:05:38,520
And this is how to use it.

68
00:05:41,730 --> 00:05:47,790
This code will print inside the node element, the HTML code rather than execute it and the display

69
00:05:47,790 --> 00:05:48,360
and alert.

70
00:05:54,100 --> 00:06:00,430
The other way to safely place the plaintext user input on page would be to use a text content or an

71
00:06:00,430 --> 00:06:02,500
inner text property of an element.

72
00:06:04,690 --> 00:06:12,340
Both methods will exactly what have been passed in a string John Doe left and grew bracket, AMG, etc.

73
00:06:12,790 --> 00:06:18,190
instead of trying to place an image so both will not allow any HTML to run.

74
00:06:18,340 --> 00:06:20,290
But note they are not identical.

75
00:06:21,280 --> 00:06:27,580
The differences are mostly visible when getting the text from a note, but setting a note content will

76
00:06:27,580 --> 00:06:30,640
give pretty much the same output with both properties.

77
00:06:32,780 --> 00:06:34,850
How do you think which approach is better?

78
00:06:35,390 --> 00:06:41,750
The team of special charges function that we created or using text content or in their text properties.

79
00:06:44,300 --> 00:06:48,170
Both are fine, but the function can be used more often.

80
00:06:48,830 --> 00:06:53,930
For example, using the function you can combine your own HTML with the user input.

81
00:06:56,050 --> 00:07:02,170
Whereas when using text content or inert text properties, the whole node would have to contain plain

82
00:07:02,170 --> 00:07:07,900
text only because even your own HTML would be saved by the browser and print it out.

83
00:07:10,420 --> 00:07:17,800
And those properties can only be used to put user data in the HD element content context, not for anything

84
00:07:17,800 --> 00:07:19,660
else like attribute values.

85
00:07:24,790 --> 00:07:31,780
When putting user data inside each team attribute values using the very same HMO special charts function.

86
00:07:32,290 --> 00:07:38,290
But note that it will only protect your site when you are very strict with quoting attribute values

87
00:07:38,560 --> 00:07:41,470
and remember about the second argument of the function.

88
00:07:42,160 --> 00:07:44,050
In other words, this is safe.

89
00:07:46,910 --> 00:07:48,290
But these are not.

90
00:07:50,830 --> 00:07:51,760
See the difference.

91
00:07:52,660 --> 00:07:56,290
In the first example, we surrounded the value with double quotes.

92
00:07:57,160 --> 00:08:03,340
In the second example, we properly use the team of special jars function but failed to enclose the

93
00:08:03,340 --> 00:08:04,900
attribute value with quotes.

94
00:08:05,200 --> 00:08:11,260
So the attacker can easily break out from the attribute value context, even with a space which is not

95
00:08:11,260 --> 00:08:12,040
escaped here.

96
00:08:13,790 --> 00:08:19,850
In the third example, we used a single quote, which theoretically is fine, but we failed to add the

97
00:08:19,850 --> 00:08:21,020
end quotes flag.

98
00:08:21,170 --> 00:08:27,200
So it's also possible to break out from the context with a single quote that would remain on the escaped.

99
00:08:30,460 --> 00:08:36,430
You see, you can get a false sense of security here if you don't keep your estimate clean and consistent

100
00:08:36,970 --> 00:08:45,010
by either not using quotes or sometimes using single and sometimes using double quotes and without consistent

101
00:08:45,010 --> 00:08:46,330
use of and quotes.

102
00:08:46,330 --> 00:08:48,940
Flag for most special features function.

103
00:08:50,960 --> 00:08:55,910
Mixing single and double quotes is frequent when printing H.M. with BHP.

104
00:08:57,140 --> 00:09:02,020
In this code someone used single quotes to avoid having to escape a double quote.

105
00:09:04,780 --> 00:09:10,450
In reality, in this example, we could just add and quote, flag instead of changing the quote type.

106
00:09:12,040 --> 00:09:17,560
But because it's so easy to make a mistake in such situations, I recommend you to develop your own

107
00:09:17,560 --> 00:09:20,670
coding standards here, always and everywhere.

108
00:09:20,680 --> 00:09:27,610
Use double quotes for attribute values and always use and quotes flag for each html special chars function.

109
00:09:28,420 --> 00:09:29,420
Be consistent.

110
00:09:29,440 --> 00:09:34,240
Make a habit of it so that you don't accidentally forget the flag when it's needed.

111
00:09:35,180 --> 00:09:41,870
There's no harm in encoding the single code always, but there is a harm to fail to encode it when necessary.

112
00:09:42,650 --> 00:09:48,530
Don't give yourself more opportunities to fail by randomly using single and double quotes for attribute

113
00:09:48,530 --> 00:09:49,070
values.

114
00:09:55,110 --> 00:09:59,400
You might wonder why would they let a user decide on the old tag name?

115
00:10:00,180 --> 00:10:04,380
Well, one use case would be to allow user to select a heading level.

116
00:10:08,250 --> 00:10:11,970
Then on the beach, you might want to use the form data this way.

117
00:10:15,100 --> 00:10:16,990
Of course, that's highly insecure.

118
00:10:17,350 --> 00:10:23,860
We know we can't trust that such incoming data is what we expect because any user can alter values in

119
00:10:23,860 --> 00:10:27,760
this select form element or just send an arbitrary post request.

120
00:10:29,470 --> 00:10:33,640
But even more special jars function will not help in this context.

121
00:10:35,080 --> 00:10:35,710
See this?

122
00:10:37,480 --> 00:10:44,290
The user can send this drink script as their heading level and it will only container letters, so theoretically

123
00:10:44,290 --> 00:10:49,660
only super safe characters and nothing that would be escaped with most special charges.

124
00:10:50,970 --> 00:10:57,120
And then the user can send something like alert one as heading contents and will end up with this.

125
00:11:03,330 --> 00:11:05,010
Instead of something like this.

126
00:11:07,500 --> 00:11:13,770
Of course, other one is nothing wrong within the proper heading element and can be a correct heading

127
00:11:13,770 --> 00:11:14,830
in the real world.

128
00:11:14,880 --> 00:11:16,800
So we should totally accept this.

129
00:11:20,380 --> 00:11:22,660
What we need to fix is dog names.

130
00:11:25,130 --> 00:11:31,160
The only secure way to let the user choose a tag name is to compare the incoming value with the white

131
00:11:31,160 --> 00:11:31,520
list.

132
00:11:32,840 --> 00:11:39,530
Luckily, the list of HDMI of tags is limited and well defined and also usually used, only let users

133
00:11:39,530 --> 00:11:42,410
choose from yet further limited number of tags.

134
00:11:43,190 --> 00:11:49,400
In our example, we don't need to whitelist all HTML tags except script style and other potentially

135
00:11:49,400 --> 00:11:50,030
dangerous.

136
00:11:50,450 --> 00:11:52,460
We only whitelist heading tags.

137
00:11:55,540 --> 00:12:02,380
So first we defined the array of allowable tags, then changed the input string to lowercase for sake

138
00:12:02,380 --> 00:12:07,810
of comparison, and then check if the input string can be found in the array.

139
00:12:08,950 --> 00:12:11,500
If not, we override it with a default value.

140
00:12:12,920 --> 00:12:16,670
This is the only way to safely let the user choose tag name.

141
00:12:19,540 --> 00:12:22,030
You would do exactly the same in JavaScript.

142
00:12:25,120 --> 00:12:27,790
First defined the array of allowed values.

143
00:12:29,270 --> 00:12:32,240
Then get the field value and change it to lowercase.

144
00:12:34,060 --> 00:12:36,070
Then compare it against the white list.

145
00:12:37,700 --> 00:12:40,820
And fall back to default if it's not on the white list.

146
00:12:48,190 --> 00:12:52,330
In a similar way, you might want to allow user to choose the attribute name.

147
00:12:52,750 --> 00:12:56,260
For example, you might want to let users choose the event type.

148
00:13:02,680 --> 00:13:06,790
Or for some reason to arbitrarily set the data attributes name.

149
00:13:12,480 --> 00:13:18,330
These two examples are very different, but I can already tell you that again, East Timor's special

150
00:13:18,330 --> 00:13:22,290
task function will not give us the required level of protection here.

151
00:13:22,860 --> 00:13:28,680
Yes, it will not allowed to enter the dug with Anglo bracket instead of choosing attribute name, but

152
00:13:28,680 --> 00:13:33,990
it will allow to choose whatever attribute the attacker wants or put more attributes in the tag.

153
00:13:35,430 --> 00:13:40,980
One example suppose the attacker would change contact methods to x on most over.

154
00:13:45,410 --> 00:13:47,910
And the contact field would be alert one.

155
00:13:49,220 --> 00:13:51,110
The resulting code would be this

156
00:13:53,810 --> 00:14:01,400
The data attribute becomes an empty data X attribute, and after space the attacker successfully introduced

157
00:14:01,400 --> 00:14:03,980
an on mouse over attribute that will run.

158
00:14:03,980 --> 00:14:09,200
The script passed in a contact field whenever the cursor that's on top of the element.

159
00:14:10,280 --> 00:14:14,360
This is why we need another solution than HTML special function.

160
00:14:14,660 --> 00:14:15,530
And there are two.

161
00:14:16,950 --> 00:14:19,980
What we need for the first case is also a whitelist.

162
00:14:21,060 --> 00:14:26,310
The HTML attributes are well defined and limited, just like HTML tags.

163
00:14:26,880 --> 00:14:31,170
So we just need to whitelist them in the same way we did with HTML tags.

164
00:14:32,220 --> 00:14:38,580
In our first example, we further limit ourselves to only two event attributes on click and on mouse

165
00:14:38,580 --> 00:14:38,940
over.

166
00:14:41,980 --> 00:14:42,310
Not.

167
00:14:42,310 --> 00:14:43,530
We don't need any more.

168
00:14:43,540 --> 00:14:52,600
The special chairs function here as the waitlist list does all the job in JavaScript you to do it exactly

169
00:14:52,600 --> 00:14:53,410
the same way.

170
00:14:59,550 --> 00:15:05,820
The second example where we use the user data to form a data attribute is not that easy to deal with

171
00:15:05,820 --> 00:15:08,700
because data attributes are not well defined.

172
00:15:09,570 --> 00:15:14,100
You can set any data attribute you wish as long as it contains the valid characters.

173
00:15:14,730 --> 00:15:18,060
And according to the standard, the syntax is very relaxed.

174
00:15:18,270 --> 00:15:24,090
But let's face it, usually it's only alphanumeric characters, dashes and maybe underscores.

175
00:15:25,820 --> 00:15:28,850
So you can simply filter out any other character.

176
00:15:34,920 --> 00:15:40,950
We only need to do that for the contact method field, which will form a part of an attribute name because

177
00:15:40,950 --> 00:15:47,370
attribute value, the contact field only needs time of special chance function because it's properly

178
00:15:47,370 --> 00:15:48,960
surrounded with double quotes.

179
00:15:52,220 --> 00:15:56,180
In JavaScript, do the character filtering with the replace method.

180
00:16:01,520 --> 00:16:07,400
And here we use our customised team of special task function that we created earlier for data value.

181
00:16:11,740 --> 00:16:17,410
The other way to deal with the problem of arbitrary data attribute names would be to change the concept

182
00:16:17,410 --> 00:16:25,540
here, and instead of forming data attribute as an attribute name and the value put both as data attribute

183
00:16:25,540 --> 00:16:28,570
values and use a special chance function.

184
00:16:31,250 --> 00:16:37,430
It may not be a good solution for certain scenarios, but definitely is the way to make your app safer.

185
00:16:42,090 --> 00:16:49,350
Text re is a special HTML tag in which we often need to put user input but which will display the code

186
00:16:49,350 --> 00:16:50,760
instead of executing it.

187
00:16:51,930 --> 00:16:54,000
Or at least we think it will do that.

188
00:16:55,530 --> 00:16:59,340
This code will show the demo code inside the text area field.

189
00:17:03,170 --> 00:17:09,290
Browsers are intelligent enough to just render the code as text inside the exterior field, but it's

190
00:17:09,290 --> 00:17:14,060
enough to prevent the malicious code with ending text the real target to actually run it.

191
00:17:15,290 --> 00:17:18,740
So you can't just leave the input as it is and rely on the browser.

192
00:17:21,290 --> 00:17:26,860
Luckily for the area element, it's enough to use HTML special charms function to be safe.

193
00:17:29,270 --> 00:17:30,200
The closing text.

194
00:17:30,200 --> 00:17:35,270
The real target will not execute now, but will be visible as text inside the field.

195
00:17:39,400 --> 00:17:40,690
And what about inputs?

196
00:17:40,690 --> 00:17:41,350
Tag values?

197
00:17:42,250 --> 00:17:43,600
This we already know.

198
00:17:44,560 --> 00:17:47,560
It's simply the attribute of value context.

199
00:17:48,220 --> 00:17:54,730
Always use a team of special features and quote tag attributes when you fill in form data programmatically.

200
00:17:59,670 --> 00:18:05,820
I showed you earlier in the theory part an example of how to break out of the context of a HTML comment

201
00:18:06,240 --> 00:18:12,000
by presenting the string with two dashes and the right angle bracket, which is the sequence for ending

202
00:18:12,270 --> 00:18:13,080
the email comment.

203
00:18:14,690 --> 00:18:20,570
Here again, we are lucky that we can just use the most special chance method and we are safe.

204
00:18:21,410 --> 00:18:26,960
The attacker will not be able now to break out of the comment context with the right angle bracket.
