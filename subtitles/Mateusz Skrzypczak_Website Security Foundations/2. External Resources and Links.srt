1
00:00:08,920 --> 00:00:14,800
Whenever you decide to include on your site any external resources that is hosted on the server, you

2
00:00:14,800 --> 00:00:19,480
don't control your site effectively depends on that server security.

3
00:00:20,590 --> 00:00:27,790
So if you use CDM for convenience or for performance and load scripts or web fonts from Sydney and that's

4
00:00:27,790 --> 00:00:33,760
Sydney and gets hacked, your site also gets hacked because it may then includes resources you didn't

5
00:00:33,760 --> 00:00:34,120
want.

6
00:00:35,380 --> 00:00:42,160
So for security, the best approach would be to store all scripts, styles, fonts and similar resources

7
00:00:42,400 --> 00:00:43,570
on your own server.

8
00:00:45,100 --> 00:00:52,300
But there's one neat method that allows you to have a cake and eat it to this method called sub resource

9
00:00:52,300 --> 00:00:59,350
integrity allows you to ensure the externally stored files are exactly what you expect and it is currently

10
00:00:59,350 --> 00:01:01,570
supported by all major browsers.

11
00:01:02,820 --> 00:01:08,970
It works by simply passing the integrity attributes to script ordering tag, and that attribute should

12
00:01:08,970 --> 00:01:16,320
contain a base64 encoded value to check some of the linked file prefixed by hash algorithm and the dash.

13
00:01:18,760 --> 00:01:24,070
If you wonder how we can obtain this checksum, you can use your common lane tool with this instruction

14
00:01:24,790 --> 00:01:27,050
or use the three hash that or website.

15
00:01:27,070 --> 00:01:28,900
If you don't feel the command line.

16
00:01:30,280 --> 00:01:37,450
Note that because we used SHA 384 algorithm in the integrity attributes, we prefix the hashes that

17
00:01:37,450 --> 00:01:40,990
it generated with sharp 384 and the dash.

18
00:01:42,240 --> 00:01:43,710
In the integrity attributes.

19
00:01:43,950 --> 00:01:48,090
The hash always needs to be prefixed with the algorithm, name and the dash.

20
00:01:50,010 --> 00:01:56,070
Note also that the browsers will check the external file against its cross origin resource sharing policy,

21
00:01:56,400 --> 00:02:02,790
which means if that external server wants to share the file with our site, hence the mandatory use

22
00:02:02,790 --> 00:02:04,440
of cross origin attribute.

23
00:02:06,860 --> 00:02:13,490
Now you can get into trouble when the external file changes for legitimate purposes because the checksum

24
00:02:13,490 --> 00:02:14,360
will not match.

25
00:02:15,350 --> 00:02:21,470
For this to work, your CDM should never change the file contents and the when they provide a new version

26
00:02:21,470 --> 00:02:22,280
of a resource.

27
00:02:22,400 --> 00:02:24,500
It should come with the new file name.

28
00:02:26,670 --> 00:02:31,140
For example, if you build a j query from the CDM, each version has its own.

29
00:02:31,140 --> 00:02:36,570
Finally, so you don't need to worry your site or app will stop working on the next release.

30
00:02:37,560 --> 00:02:42,510
Even if you load the latest version, the file name will always include the version number.

31
00:02:42,960 --> 00:02:48,690
You will have to manually update your site to the most recent version and during that process, update

32
00:02:48,690 --> 00:02:50,820
the checksum in the integrity attribute.

33
00:02:55,170 --> 00:02:56,730
You are probably not aware.

34
00:02:56,730 --> 00:03:03,120
And I also wasn't aware for a long time that if you redirect a user to an external site by opening it

35
00:03:03,120 --> 00:03:10,410
in a new window or tab like this, these external site four dot com in our example has now some control

36
00:03:10,410 --> 00:03:15,450
of the window object of your page, which the user still has open in their browser.

37
00:03:16,580 --> 00:03:21,900
This is also a case whenever we open a new window using JavaScript window open method.

38
00:03:22,890 --> 00:03:24,150
See the live example.

39
00:03:25,020 --> 00:03:27,630
This is an example with an external link.

40
00:03:28,200 --> 00:03:29,490
Let me click that link.

41
00:03:29,940 --> 00:03:35,370
A new page opens in a new tab and when I go back to the previous tab, bam!

42
00:03:36,900 --> 00:03:38,910
So now we've seen this is really the case.

43
00:03:39,120 --> 00:03:41,130
Let me explain how this is possible.

44
00:03:41,940 --> 00:03:48,060
Any page that is open in a new window or tab has a window open their property in JavaScript, which

45
00:03:48,060 --> 00:03:52,950
points to the window object of the page that opens this new window, the current page.

46
00:03:53,580 --> 00:03:57,330
And then it's really simple to do a redirect in the open window.

47
00:03:58,560 --> 00:04:03,690
In the example shown, you clearly see that the page is different, but it could be as well.

48
00:04:03,690 --> 00:04:10,050
And if your page looking just like the original one, but doing some malicious stuff like phishing,

49
00:04:10,350 --> 00:04:17,730
changing the login button link to as we're monitoring what you type forms, etc., etc. and because

50
00:04:17,730 --> 00:04:22,830
the user would most likely be focused on the newly opened window word tab, the changes that happen

51
00:04:22,830 --> 00:04:29,940
in the open their window, for example, the redirect will happen unnoticed if it's that easy and we

52
00:04:29,940 --> 00:04:35,820
open links in new tabs all the time, then how come you're all still alive and most people never got

53
00:04:35,820 --> 00:04:36,210
hacked?

54
00:04:36,960 --> 00:04:37,650
I don't know.

55
00:04:38,730 --> 00:04:41,100
Anyway, there are of course, options to solve.

56
00:04:41,100 --> 00:04:45,930
The problem first would be to not open links in the new windows.

57
00:04:46,500 --> 00:04:52,860
If you open a new page in the same window, there will be no open page on the target page because it

58
00:04:52,860 --> 00:04:56,580
stopped existing when the new document was loaded in the same way in the word tab.

59
00:04:57,660 --> 00:05:02,880
But I really like the idea of opening some links in new tabs for example, external links.

60
00:05:03,270 --> 00:05:04,710
So lets see other options.

61
00:05:05,890 --> 00:05:12,310
Use the rule attribute with no opener value in all linked tags which open in new windows or tabs.

62
00:05:13,720 --> 00:05:17,680
This will make the window open there unavailable on the destination link.

63
00:05:18,670 --> 00:05:24,070
If you would like to support some older browsers, for example, Edge only recently added support for

64
00:05:24,070 --> 00:05:24,760
an opener.

65
00:05:25,300 --> 00:05:31,480
You can combine it with no referrer, but it will also clear the referrer header so the destination

66
00:05:31,480 --> 00:05:34,000
site will not know where the traffic came from.

67
00:05:34,390 --> 00:05:36,460
Which is worth noting if you care about it.

68
00:05:37,920 --> 00:05:44,220
It's not too elegant because you need to specify this attribute on every external link, which can be

69
00:05:44,220 --> 00:05:45,090
rather annoying.

70
00:05:46,140 --> 00:05:53,100
Luckily for WordPress users, WordPress does it automatically for links in post content so your editors

71
00:05:53,100 --> 00:05:54,150
don't need to care.

72
00:05:55,710 --> 00:05:58,740
For links open with the JavaScript window open method.

73
00:05:58,920 --> 00:06:03,150
You can clearly open their property right after calling the open method.

74
00:06:06,410 --> 00:06:07,070
Anyway.

75
00:06:07,070 --> 00:06:12,350
I'd rather like to have it done with this single HTP response header with which we could define the

76
00:06:12,350 --> 00:06:16,910
behaviour once for the whole site like we can do with other security features.

77
00:06:18,140 --> 00:06:18,920
For now.

78
00:06:18,950 --> 00:06:25,130
Recently, browsers started to implicitly disable the open their property for links that open in new

79
00:06:25,130 --> 00:06:30,200
windows that these which have a target attribute set to underscore blank.
