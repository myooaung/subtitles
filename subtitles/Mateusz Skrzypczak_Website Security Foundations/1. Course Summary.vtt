WEBVTT
1
00:00:05.320 --> 00:00:06.510
Congratulations.

2
00:00:06.520 --> 00:00:07.930
You have finished the course.

3
00:00:08.500 --> 00:00:12.400
I hope you learn the valuable stuff and will become a better web developer.

4
00:00:13.480 --> 00:00:16.960
We covered a number of things here, but there's always more.

5
00:00:17.620 --> 00:00:23.800
If you are into security, try analyzing the attack methods and practicing them on your own locally

6
00:00:23.800 --> 00:00:30.340
hosted sites to better understand how it works and write better, more secure code in the future.

7
00:00:31.990 --> 00:00:36.370
For example, to better understand how cross-site scripting attack can be carried out.

8
00:00:36.790 --> 00:00:38.470
See the cross-site scripting attacks.

9
00:00:38.470 --> 00:00:41.260
Smoke dust on the email, purify your site.

10
00:00:42.580 --> 00:00:43.960
That's quite a long list.

11
00:00:43.960 --> 00:00:45.930
And it may be an eye opener for you.

12
00:00:49.330 --> 00:00:55.000
Also, it would be a good idea to subscribe to websites, security discussion groups and forums to get

13
00:00:55.000 --> 00:00:57.310
used to the topic and be up to date.

14
00:00:59.710 --> 00:01:06.070
You could also try to monitor everything on your site and this way try to discover and drug any anomalies.

15
00:01:07.030 --> 00:01:11.200
This way you will be able to quickly react if anything starts to go wrong.

16
00:01:11.920 --> 00:01:18.400
For example, if you detect a traffic peak, numerous unexpected access trains for a certain resource

17
00:01:19.090 --> 00:01:27.760
and increase in locked out users or a high volume of server errors like 404403 and hopefully not 500th.

18
00:01:28.720 --> 00:01:34.180
All these could indicate that someone is trying to abuse your site, and the quicker you react, the

19
00:01:34.180 --> 00:01:34.690
better.

20
00:01:36.580 --> 00:01:40.930
At the beginning, I told you you will not need any special tool to follow this course.

21
00:01:41.290 --> 00:01:42.790
And that was, of course, true.

22
00:01:43.660 --> 00:01:48.610
Now, as we discussed a lot of stuff, let me show you a couple of free tools which might help you in

23
00:01:48.610 --> 00:01:49.990
securing your sites.

24
00:01:51.990 --> 00:01:58.770
The first one would be Mozilla Observatory, a service run by Mozilla, which inspects a couple of security

25
00:01:58.770 --> 00:02:00.000
settings of your site.

26
00:02:00.420 --> 00:02:07.200
Mainly the HTP header is related to security, like content security policy or referrer policy.

27
00:02:08.580 --> 00:02:13.920
Use the service to see where you can make improvements in your configuration and to better understand

28
00:02:13.920 --> 00:02:15.600
your content security policy.

29
00:02:19.580 --> 00:02:22.700
Another easy and quick scanning tool is scary.

30
00:02:22.700 --> 00:02:29.090
So to check, enter your sites address and you will get a report indicating if your site runs any malware,

31
00:02:29.480 --> 00:02:36.950
if it is on the blacklist, involved in spam, etc. It's useful if you suspect something might be wrong

32
00:02:36.950 --> 00:02:43.340
with your site or you recently discovered some security hole or had a vulnerable third party component.

33
00:02:44.860 --> 00:02:47.860
Also at the bottom, you will get heartening improvement.

34
00:02:47.860 --> 00:02:54.970
DBS, for example, missing security related HTP headers or BHP configuration recommendations.

35
00:02:58.600 --> 00:03:02.110
Then there are tools you need to Donald or installed to run them.

36
00:03:03.460 --> 00:03:10.300
Ask you a map is the command line tool written in Python, which can among all analyze the target URL

37
00:03:10.300 --> 00:03:12.670
for obscure injection of vulnerabilities.

38
00:03:13.960 --> 00:03:20.500
To use askew a map, you simply need to download it and run the school map dot by file with a python

39
00:03:20.500 --> 00:03:21.010
command.

40
00:03:21.880 --> 00:03:27.370
Mark For example, Python comes preinstalled so you don't need to actually install anything.

41
00:03:27.730 --> 00:03:33.730
I love that the tool is powerful and the amount of options is quite overwhelming.

42
00:03:34.150 --> 00:03:40.660
But for a quick start, just type the commons suggested in the documentation and provide a URL with

43
00:03:40.660 --> 00:03:44.410
some param because it will not scan the whole site for you.

44
00:03:44.650 --> 00:03:48.820
It will only analyze a single URL with get or post the data.

45
00:03:49.360 --> 00:03:56.290
So you need to prepare specific URLs which you want to test after you hit enter.

46
00:03:56.410 --> 00:04:01.930
The tool will most probably ask you to decide on a couple of things and then give you the final result,

47
00:04:02.200 --> 00:04:07.720
which hopefully will be that all tested parameters do not appear to be injectable.

48
00:04:11.170 --> 00:04:11.530
Here.

49
00:04:11.530 --> 00:04:17.770
We tested a get barometer, but is of course possible to use other HDTV methods like post and still

50
00:04:17.770 --> 00:04:18.700
send some data.

51
00:04:28.140 --> 00:04:33.430
You can also provide your own cookies, play with the referrer, user, agent, etc..

52
00:04:34.080 --> 00:04:36.480
The documentation covers all the options.

53
00:04:39.930 --> 00:04:47.010
If you feel adventurous, try installing Z Attack Proxy, A software developed by our foundation.

54
00:04:47.730 --> 00:04:53.550
It's a penetration test tool which you can use to scan your website to see how secure or how vulnerable

55
00:04:53.550 --> 00:04:54.120
it is.

56
00:04:55.110 --> 00:04:58.920
It's a quite complex application, but it of course has a quickstart route.

57
00:04:59.760 --> 00:05:03.390
After opening it here, I use a cross-platform package on Mac.

58
00:05:03.990 --> 00:05:07.860
Click the automated scan button in the main workspace window.

59
00:05:09.000 --> 00:05:15.780
Before we continue, not in the warnings and only around this tool against your own sites and ideally

60
00:05:16.050 --> 00:05:22.740
it first on the copy not on a life site because as the documentation says, the tool can potentially

61
00:05:22.740 --> 00:05:26.340
cause actual damage unless you run it in safe mode.

62
00:05:26.880 --> 00:05:28.370
And we don't want any damage.

63
00:05:31.470 --> 00:05:37.200
So let's run it on the WordPress install on my localhost and use the traditional spider.

64
00:05:38.660 --> 00:05:44.420
The ADA spider will be better for apps, which uses Ajax a lot, but it's more time consuming.

65
00:05:44.600 --> 00:05:45.890
So let's keep it for now.

66
00:05:47.030 --> 00:05:49.700
Hit the attack button and the test starts.

67
00:05:50.600 --> 00:05:57.050
The tool will first crawl the site to find as much valid URLs as it can and then will analyze them all.

68
00:05:57.380 --> 00:05:59.750
So it will take a couple of minutes to finish.

69
00:06:03.870 --> 00:06:05.430
After the scan is completed.

70
00:06:05.430 --> 00:06:10.080
In the bottom part, you will see the results sorted from highest to lowest priority.

71
00:06:11.430 --> 00:06:14.520
In this case, it found a couple of medium priority issues.

72
00:06:14.910 --> 00:06:21.420
For example, pages with mixed content because I included the degree library via HTP in the theme.

73
00:06:22.900 --> 00:06:26.500
It also highlighted that the extreme options out there is not set.

74
00:06:27.580 --> 00:06:29.130
These are medium priority.

75
00:06:29.140 --> 00:06:32.770
It would be good to fix them because they indeed pose some risk.

76
00:06:34.620 --> 00:06:41.670
There are also a few low priority issues like cross domain JavaScript inclusion x powered by Heather.

77
00:06:44.190 --> 00:06:50.490
Or X content type option header missing which could potentially allow content sniffing in some browsers

78
00:06:51.300 --> 00:06:51.660
here.

79
00:06:51.660 --> 00:06:53.430
Also fix as much as you can.

80
00:06:55.540 --> 00:07:01.750
This was, of course, just a brief introduction and an overview of a simple scan, but there's a lot

81
00:07:01.750 --> 00:07:03.070
of advanced functions there.

82
00:07:03.730 --> 00:07:08.620
However, it's still very usable for simple automated scans as the one we just did.

83
00:07:09.070 --> 00:07:15.640
Because it's easy to miss something in configuration or during development and even such automated scan

84
00:07:15.640 --> 00:07:18.670
will help you deliver better safer code.

85
00:07:23.380 --> 00:07:30.280
Finally, if you only can afford it, it's always a good idea to hire a professional pen tester with

86
00:07:30.280 --> 00:07:31.330
lots of experience.

87
00:07:31.330 --> 00:07:33.610
They will try everything to break your sight.

88
00:07:33.970 --> 00:07:39.910
Of course, in a secure environment and should give you a full audit result with recommendations, what

89
00:07:39.910 --> 00:07:41.140
to fix and how.

90
00:07:42.400 --> 00:07:46.570
If you treat your science security seriously, it's a money well spent.

91
00:07:47.140 --> 00:07:52.480
Even if the punters a result will find nothing, that will mean you did a great job.

92
00:07:54.070 --> 00:07:56.290
So thanks again for watching the course.

93
00:07:56.710 --> 00:07:59.560
Best wishes for your career and stay safe.

94
00:08:01.300 --> 00:08:07.000
If you liked learning with me and would like to improve other web development related skills, I encourage

95
00:08:07.000 --> 00:08:12.490
you to check my other course website speed optimisation, frontend and WordPress.
