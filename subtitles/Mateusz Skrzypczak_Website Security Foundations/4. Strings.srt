1
00:00:04,750 --> 00:00:08,400
Because we tried validating floating point number is a string.

2
00:00:08,410 --> 00:00:14,320
We already touched the topic of validating a string, but because there are millions of uses for student

3
00:00:14,320 --> 00:00:22,090
values, it's impossible to give a universal bullet proof validation method titles, names, addresses,

4
00:00:22,420 --> 00:00:29,800
phone numbers, email addresses, URLs, email post contents, serialized arrays, or JSON data.

5
00:00:30,190 --> 00:00:33,760
These are all strings depending on the strings purpose.

6
00:00:33,970 --> 00:00:36,880
There are different methods to validate and sanitize them.

7
00:00:37,750 --> 00:00:39,430
Let's see some common examples.

8
00:00:39,430 --> 00:00:42,550
Starting with those that can be treated more strictly.

9
00:00:45,700 --> 00:00:52,120
You will have the easiest job if you expect input value to be either an identifier of an existing resource,

10
00:00:52,450 --> 00:00:57,250
for example, a number or a machine friendly name, which in WordPress is called slag.

11
00:00:58,120 --> 00:01:04,150
An example identifier is one tool or Premier Bash league for a Premier League tag.

12
00:01:05,290 --> 00:01:11,230
Or if you expect a value from a set of predefined options, for example, selected by user in a dropdown

13
00:01:11,230 --> 00:01:18,430
select box or from a set of checkboxes or radio buttons, the most beautiful part here is that you can

14
00:01:18,430 --> 00:01:21,250
perform a very effective and secure validation.

15
00:01:21,730 --> 00:01:27,010
Compare the receive the value with the actual list of identifiers or options that you defined.

16
00:01:27,700 --> 00:01:31,420
Such whitelisting is the most secure way of validating data.

17
00:01:31,810 --> 00:01:35,500
It allows only values which are in the range of expected values.

18
00:01:36,820 --> 00:01:37,840
See this example.

19
00:01:41,530 --> 00:01:44,890
The user is presented with a select box to select a category.

20
00:01:45,520 --> 00:01:48,640
The options values are machine friendly identifiers.

21
00:01:49,360 --> 00:01:52,000
The labels are normal human friendly names.

22
00:01:53,020 --> 00:02:00,190
Then in PDP, we have the array of permitted label categories where keys are the expected matching friendly

23
00:02:00,190 --> 00:02:02,980
names and the values are human friendly names.

24
00:02:04,180 --> 00:02:10,210
And we simply use the array key existing function to check whether there is an entry in the array under

25
00:02:10,210 --> 00:02:13,840
the given key, which means the user selected a valid option.

26
00:02:17,330 --> 00:02:23,300
If we only had machine friendly names in our array, we could just use in array function to check if

27
00:02:23,300 --> 00:02:26,240
the provided value is within the array values.

28
00:02:30,580 --> 00:02:33,310
Suppose your waitlist is stored in the database?

29
00:02:35,080 --> 00:02:41,230
The approach I mentioned first gets the list of all available options and then compares the values submitted

30
00:02:41,230 --> 00:02:43,480
by user in memory in the script.

31
00:02:44,930 --> 00:02:50,390
But especially for large wait lists, like a list of countries or a list of cities, you could do it

32
00:02:50,390 --> 00:02:51,380
in a different way.

33
00:02:52,160 --> 00:02:57,800
Instead of fetching all possible values, pass the value to the query to see if there are any matching

34
00:02:57,800 --> 00:03:01,220
results for it and when there will be no results.

35
00:03:01,220 --> 00:03:03,260
You will know the value is not valid.

36
00:03:04,340 --> 00:03:10,460
Beware that to mitigate the risk of equal injection, you must not directly pass the input value to

37
00:03:10,460 --> 00:03:11,540
the school query.

38
00:03:11,990 --> 00:03:14,030
This, of course, is super vulnerable.

39
00:03:17,700 --> 00:03:22,200
If you expect the in value, simply casting it to Integra would do the job.

40
00:03:24,320 --> 00:03:27,680
But if you expect a string, these of course, will not work.

41
00:03:28,340 --> 00:03:32,420
You should then use a regular expression to filter out illegal characters.

42
00:03:33,380 --> 00:03:39,230
This one would not allow any Google injection and allow all characters used to generate the machine

43
00:03:39,230 --> 00:03:44,390
friendly identifiers, letters, digits, underscores and the dashes.

44
00:03:45,530 --> 00:03:52,040
However, this will not protect your query if identifiers or options can include characters like a single

45
00:03:52,040 --> 00:03:57,710
quote, double quote, backslash as or other of a special meaning in as good a language.

46
00:03:58,820 --> 00:04:04,040
In this case, you will need to use prepared statements, something which we'll be discussing in the

47
00:04:04,040 --> 00:04:05,060
following chapter.

48
00:04:09,500 --> 00:04:15,110
You could also say that the checking value against the database waitlist hurts performance because every

49
00:04:15,110 --> 00:04:22,580
time we need to query the database either to fudge the list of IDs or options or to search for the records

50
00:04:22,580 --> 00:04:23,990
stored under the provided ID.

51
00:04:24,980 --> 00:04:30,380
That's of course, true, but I wouldn't really worry much about it unless the amount of data for comparison

52
00:04:30,380 --> 00:04:35,870
is really huge or unless this validation is going to run very, very often.

53
00:04:37,600 --> 00:04:45,100
But then you just might catch the white list to limit database calls divided in parts or improve the

54
00:04:45,100 --> 00:04:46,600
performance some other way.

55
00:04:47,590 --> 00:04:53,050
However, in 99% of cases, I would sacrifice the performance to secure the system.

56
00:04:55,060 --> 00:05:00,340
Whitelist validation is one of the situations in which you may need to do the logic validation, which

57
00:05:00,340 --> 00:05:01,300
I mentioned earlier.

58
00:05:02,230 --> 00:05:06,220
Often, not every user is entitled to use any value from the whitelist.

59
00:05:07,420 --> 00:05:13,360
For example, in the web service, a list of possible operations might be read, insert, update or

60
00:05:13,360 --> 00:05:19,420
delete, but an anonymous user is of course not permitted to use the delete operation.

61
00:05:20,720 --> 00:05:24,950
So even if the operation type string is valid, it's on the whitelist.

62
00:05:25,250 --> 00:05:28,640
You may need to verify if the logic of the request makes sense.

63
00:05:29,180 --> 00:05:34,190
In this case, check if the user is authorized to select this value from the whitelist.

64
00:05:38,300 --> 00:05:44,000
Another type of student content would be the one where we expect a strict or narrowly strict format.

65
00:05:44,450 --> 00:05:46,130
For example, a phone number.

66
00:05:47,030 --> 00:05:50,390
When you ask for a phone number, you expect primarily digits.

67
00:05:53,240 --> 00:05:58,670
But depending on your requirements, you may want to accept some optional characters, like a SpaceX

68
00:05:59,030 --> 00:06:04,730
dash plus sign, etc. because people might enter the phone number formatted differently.

69
00:06:07,490 --> 00:06:13,700
The second Morelos validation will accept the following entries as full numbers, which I think you

70
00:06:13,700 --> 00:06:15,470
agree look all legitimate.

71
00:06:18,140 --> 00:06:22,910
But this will not be a valid form number despite it matches the pattern.

72
00:06:24,710 --> 00:06:28,520
I would fix this by also verifying how many digits are there.

73
00:06:29,000 --> 00:06:32,150
Assuming you need nine or more, you could write this code.

74
00:06:38,320 --> 00:06:42,130
And here also you would rather help your users on the front and side.

75
00:06:42,670 --> 00:06:49,210
You can do that by not allowing illegal characters in the input fields and by validating its value after

76
00:06:49,210 --> 00:06:50,440
the user is done with it.

77
00:06:52,000 --> 00:06:54,430
This time you can use an input type tell.

78
00:06:54,940 --> 00:06:59,200
It has the pattern attribute in which you can define the regular expression to match.

79
00:06:59,680 --> 00:07:01,360
But this, of course, is not enough.

80
00:07:02,080 --> 00:07:06,370
Our example here allows only digits and require at least nine of them.

81
00:07:06,730 --> 00:07:10,390
So it's quite strict and that's fine.

82
00:07:10,690 --> 00:07:16,840
But only part of users would like to enter numbers only, so the field will often show errors without

83
00:07:16,840 --> 00:07:18,070
enough explanation.

84
00:07:20,390 --> 00:07:27,770
The second example is more loose pattern, but now it's difficult to ensure we will get enough digits.

85
00:07:28,280 --> 00:07:32,000
We can only set the minimal number of all characters in the field.

86
00:07:35,090 --> 00:07:46,820
A user could want to enter a valid number like 100200300, but they will miss the last digit 10020030.

87
00:07:47,630 --> 00:07:51,680
The final string has only allowed characters and at least nine of them.

88
00:07:52,040 --> 00:07:55,640
But it's not what we expect and not what the user wanted to enter.

89
00:07:58,120 --> 00:08:04,090
Also, the generic feedback from the browser may not be descriptive enough to help users feel the validation

90
00:08:04,090 --> 00:08:04,600
error.

91
00:08:09,520 --> 00:08:16,360
So to help users, instead of using the pattern attribute, we need to JavaScript functions one that

92
00:08:16,360 --> 00:08:22,150
will prevent user from entering illegal go characters and the other that will validate the field when

93
00:08:22,150 --> 00:08:23,590
the user is done typing.

94
00:08:26,570 --> 00:08:32,540
The first function is an even list and there are the key down events attached to the phone field without

95
00:08:32,540 --> 00:08:33,830
even the list in the of method.

96
00:08:34,790 --> 00:08:35,480
So it runs.

97
00:08:35,480 --> 00:08:42,440
Whenever the focus is inside the field and the user presses a keyboard key, it quits if the user is

98
00:08:42,440 --> 00:08:43,910
using a keyboard shortcut.

99
00:08:44,240 --> 00:08:47,870
We know this by inspecting the meta key property of the keyboard.

100
00:08:47,870 --> 00:08:53,710
Even next, we define an array of allowed keys which are numbers.

101
00:08:53,720 --> 00:09:00,500
Some special characters like Space, Dash Plus, sign, etc. and some control keys to allow user delete

102
00:09:00,500 --> 00:09:03,710
content, navigate through it, tap out, etc..

103
00:09:04,340 --> 00:09:06,710
We don't want to make this field a keyboard strap.

104
00:09:07,040 --> 00:09:13,820
Some users are using primarily keyboard, nor that the range of characters must match the range used

105
00:09:13,820 --> 00:09:15,140
in the backend validation.

106
00:09:15,530 --> 00:09:21,830
Of course not counting control keys like backspace arrow keys, etc., because the whole point of this

107
00:09:21,830 --> 00:09:29,870
function is to not allow user to enter something that will be later filtered out or rejected last.

108
00:09:29,870 --> 00:09:35,150
If the character is outside of the allowed range, we prevent it from being placed in the input field.

109
00:09:38,710 --> 00:09:44,950
The second function does the same validation as we do on the backhand side to give user an instant feedback

110
00:09:44,950 --> 00:09:46,540
if they need to fix the data.

111
00:09:47,680 --> 00:09:53,800
In our case, we only check if it matches the pattern and if there are at least nine digits in the full

112
00:09:53,800 --> 00:09:54,280
number.

113
00:09:54,850 --> 00:10:00,160
But you can check here whatever it is you need and whatever else you have in your back and the validation

114
00:10:00,160 --> 00:10:00,670
method.

115
00:10:03,890 --> 00:10:09,140
This function should be called either after the field loses focus, which could mean the user is done

116
00:10:09,140 --> 00:10:09,530
with it.

117
00:10:12,090 --> 00:10:19,950
Or during complete form validation when the form is being submitted and when the following is incorrect,

118
00:10:20,070 --> 00:10:23,940
preventing the form from being submitted and display the error to the user.

119
00:10:24,600 --> 00:10:30,390
The error should point out the phone field which needs to be fixed and clarify what is expected there.

120
00:10:37,190 --> 00:10:41,060
You can do exactly the same sort of validation for postal codes.

121
00:10:41,570 --> 00:10:45,350
Just remember that different countries have different postal code patterns.

122
00:10:46,430 --> 00:10:49,360
For many, many countries it's four or five digits.

123
00:10:49,370 --> 00:10:54,440
But for example, in my country it's five digits, but often they're written as two digits.

124
00:10:54,440 --> 00:10:55,670
That's three digits.

125
00:10:57,040 --> 00:11:00,790
There's a non-exhaustive list of postal code formats on Wikipedia.

126
00:11:01,060 --> 00:11:04,660
And looking at it, you can assume that it will need to allow digits.

127
00:11:04,840 --> 00:11:12,130
The letters, space and dash character, the string length, the exact pattern, etc. vary too much

128
00:11:12,130 --> 00:11:14,230
for any strict regular expression.

129
00:11:17,350 --> 00:11:24,160
In this code, we simply verify the input against the pattern which allows only digits, letters, spaces

130
00:11:24,310 --> 00:11:29,020
and the dashes because some countries do not use postal codes at all.

131
00:11:29,350 --> 00:11:35,680
We accept the zero length string and the longest pattern they found on the Wikipedia had 12 chars.

132
00:11:35,920 --> 00:11:37,570
So this is the maximum length.

133
00:11:39,180 --> 00:11:39,480
No.

134
00:11:39,540 --> 00:11:45,390
The use of carrot and dollar symbols to ensure we are testing the whole string against the pattern.

135
00:11:47,560 --> 00:11:50,980
In JavaScript, the solution is almost exactly the same.
