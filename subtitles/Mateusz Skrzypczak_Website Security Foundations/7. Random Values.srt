1
00:00:06,280 --> 00:00:07,890
When learning how to code.

2
00:00:07,900 --> 00:00:12,520
I hope you were told that there's nothing like a randomness in computer science.

3
00:00:13,120 --> 00:00:17,530
Even us humans can think of a truly random number from 1 to 10.

4
00:00:17,560 --> 00:00:24,760
If you ask two, most people will never pick one, five or ten because these simply don't seem random

5
00:00:24,760 --> 00:00:25,240
to us.

6
00:00:25,660 --> 00:00:27,970
Unlike, for example, three or seven.

7
00:00:29,950 --> 00:00:33,760
Computers often base their random number on something that they know.

8
00:00:33,880 --> 00:00:36,940
Usually a time stamp, which is called the seed.

9
00:00:37,970 --> 00:00:44,270
The problem is that if this base, this seed, can be guessed or imposed, for example, by tricking

10
00:00:44,270 --> 00:00:50,720
the number generator to start in given circumstances, the final random number can be predictable to

11
00:00:50,720 --> 00:00:51,410
some extent.

12
00:00:52,940 --> 00:00:59,090
So the random number generator, based on something trivial like a timestamp, can produce predictable

13
00:00:59,090 --> 00:01:05,660
number of sequences and may not be unbiased that these would generate some results more often than others.

14
00:01:08,040 --> 00:01:13,890
This is why for a more random, random number, we need a method that generates a cryptographically

15
00:01:13,890 --> 00:01:15,900
secure, pseudo random numbers.

16
00:01:16,710 --> 00:01:22,440
They still will not be entirely random, but will be both hard to predict and unbiased.

17
00:01:23,820 --> 00:01:30,060
This kind of proper randomness called entropy is achieved by taking into consideration some unpredictable

18
00:01:30,060 --> 00:01:36,300
data coming from hardware like fan noise, mouse movements or temperature, rather than only from an

19
00:01:36,300 --> 00:01:37,020
algorithm.

20
00:01:39,030 --> 00:01:44,640
So in BHP, the initially provided round method was superseded by empty round.

21
00:01:45,330 --> 00:01:49,680
But despite the improvement, both are not enough cryptographically secure.

22
00:01:51,030 --> 00:01:58,080
That's why P seven introduced a new random int function, which from the developer's perspective works

23
00:01:58,080 --> 00:01:59,640
exactly like the former too.

24
00:02:00,000 --> 00:02:06,120
But it uses the entropy, the source of randomness from the operating system, which often involves

25
00:02:06,120 --> 00:02:10,020
already mentioned physical conditions and which is considered random enough.

26
00:02:13,070 --> 00:02:19,750
To generate the random string of a given length, you could simply use the sub SD error and SD or shuffle

27
00:02:19,760 --> 00:02:20,390
functions.

28
00:02:21,800 --> 00:02:26,840
But then again, the steer shuffle function is not cryptographically secure.

29
00:02:27,200 --> 00:02:34,160
It relies on the same mechanisms as the round and empty round functions to get the truly random strings.

30
00:02:34,340 --> 00:02:41,480
You'd have to use the random in again as BHP doesn't have the built in string shuffle method that would

31
00:02:41,480 --> 00:02:43,790
rely on properly generated randomness.

32
00:02:44,810 --> 00:02:48,410
The code which I wrapped in a function could look like that.

33
00:02:52,330 --> 00:02:56,590
This function takes only one argument, which is the final string length.

34
00:02:57,550 --> 00:03:02,200
Then it divides the characters to choose from, which, by the way, could also be an argument.

35
00:03:02,230 --> 00:03:06,430
If you'd like to be able to change the range of characters per each call to this function.

36
00:03:08,070 --> 00:03:13,500
Then we only need the number of characters in our range, which will be the maximum number in a random

37
00:03:13,770 --> 00:03:14,310
function.

38
00:03:15,790 --> 00:03:21,760
After that, we simply get the single character from the position calculated by the random end function

39
00:03:22,360 --> 00:03:24,400
and appended to the output string.

40
00:03:25,030 --> 00:03:33,490
As many times as the output strings length should be a little longer solution SD or shuffle but more

41
00:03:33,490 --> 00:03:34,180
dependable.

42
00:03:38,730 --> 00:03:43,320
The random string function we built has an option to specify characters range.

43
00:03:43,680 --> 00:03:50,130
You can add or remove the characters to either limit them, for example, to only zeros and ones or

44
00:03:50,130 --> 00:03:57,150
whatever else you need, or add as many different as possible, for example, to generate stronger passwords.

45
00:03:59,220 --> 00:04:05,310
But if you simply need a random alphanumeric string, for example, to generate a token, you can use

46
00:04:05,340 --> 00:04:06,480
this simple code.

47
00:04:08,680 --> 00:04:15,400
The random base function will give you some random binary data which you can then convert to a hexadecimal

48
00:04:15,400 --> 00:04:17,830
string using bean to hex function.

49
00:04:19,750 --> 00:04:25,330
The result will be a hexadecimal string of a length twice as big as the number of bytes.

50
00:04:26,200 --> 00:04:31,480
In other words, each byte will be converted to a two character hexadecimal representation.

51
00:04:32,770 --> 00:04:38,200
The character range here is obviously limited, but for things like tokens, it's usually enough.
