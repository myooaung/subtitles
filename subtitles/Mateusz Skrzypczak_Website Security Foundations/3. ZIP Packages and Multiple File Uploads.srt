1
00:00:07,530 --> 00:00:13,980
When you accept zip packages, you can treat them like previously mentioned files, store them separately

2
00:00:13,980 --> 00:00:19,230
and process manually upon downloading or verify them with anti-virus on the server.

3
00:00:20,400 --> 00:00:24,030
However, at times you may need to unzip a package on the server.

4
00:00:24,630 --> 00:00:30,480
This is quite dangerous because zip can contain everything and the checks we did earlier will only apply

5
00:00:30,480 --> 00:00:33,600
to the zip file itself, not to its contents.

6
00:00:34,920 --> 00:00:40,620
If you simply extract the package contents into your uploads, the directory and the package would contain

7
00:00:40,620 --> 00:00:47,910
a malicious SD access file with this inside, then the whole directory and all uploads would be effectively

8
00:00:47,910 --> 00:00:48,720
locked out.

9
00:00:49,380 --> 00:00:55,830
So you definitely need to sneak peek the package and filter the contents to look inside.

10
00:00:55,860 --> 00:01:00,420
You would need to use PS Zip Archive class and here's how it works.

11
00:01:03,430 --> 00:01:10,390
In this code, we first create a zip archive object and use the open method of this object to look inside

12
00:01:10,390 --> 00:01:11,350
the uploaded file.

13
00:01:12,970 --> 00:01:19,480
We can use the for loop limited by the num files property of our zip object to get information about

14
00:01:19,480 --> 00:01:20,860
each file in the package.

15
00:01:21,640 --> 00:01:25,300
We use that index method to get the details of each file.

16
00:01:30,890 --> 00:01:33,350
So let's create a zip verification tool.

17
00:01:35,690 --> 00:01:39,590
First we define arrays of allowed extensions and mine types.

18
00:01:41,450 --> 00:01:47,240
Plus, we instantiate the file info object, which we will use to verify the mime type of each file.

19
00:01:48,530 --> 00:01:52,580
Then we create a zip archive object and use the open method.

20
00:01:52,610 --> 00:01:54,530
Just like in the earlier example.

21
00:01:56,590 --> 00:01:58,090
In the loop for each file.

22
00:01:58,090 --> 00:02:00,790
You should perform all the jigs that we discussed earlier.

23
00:02:01,830 --> 00:02:05,910
This goat first gets the final details with that index method.

24
00:02:07,460 --> 00:02:10,140
Checks if the file size doesn't exceed the limit.

25
00:02:11,580 --> 00:02:16,080
Gets the file name with base name function checks.

26
00:02:16,080 --> 00:02:17,880
If the file doesn't start with a dot.

27
00:02:18,330 --> 00:02:21,990
This would mean there is a hidden file in the package like dot the access.

28
00:02:23,460 --> 00:02:29,910
Get the path information with path info function checks if the file extension is on the white list.

29
00:02:32,440 --> 00:02:35,920
Gets the actual main type of the file with file info object.

30
00:02:37,620 --> 00:02:40,350
And checks if the mime type is on the white list.

31
00:02:43,200 --> 00:02:48,450
This code after developing the actual prediction functionalities could be used to discard the whole

32
00:02:48,450 --> 00:02:52,950
package, but if all checks will pass, we finally can extract it.

33
00:02:55,130 --> 00:02:57,740
You have to methods to extract files from zip.

34
00:02:58,610 --> 00:03:00,980
The first is the extract two method.

35
00:03:02,140 --> 00:03:05,350
It unzips the whole package under a specified directory.

36
00:03:06,220 --> 00:03:10,330
If you choose this method, then if anything looks suspicious inside.

37
00:03:10,360 --> 00:03:16,780
During the validation we did before, you have to discard the whole package because once we extract

38
00:03:16,780 --> 00:03:19,270
it, all files will be saved on your server.

39
00:03:21,160 --> 00:03:26,590
Also with this method, I would extract the advice to a separate directory with a randomized name.

40
00:03:31,990 --> 00:03:35,730
The second method is to save the files one by one in a loop.

41
00:03:38,600 --> 00:03:41,630
Getting their contents with the get from index method.

42
00:03:43,130 --> 00:03:46,640
And saving them using, for example, filesystem methods.

43
00:03:49,300 --> 00:03:53,620
Of course, under his safe generated final name, not the original one.

44
00:03:57,030 --> 00:04:01,170
Of course, it's easiest to save the files in the same loop in which you validate them.

45
00:04:04,280 --> 00:04:07,670
The big disadvantage is that this will work much slower.

46
00:04:08,030 --> 00:04:14,960
So you might encounter performance issues and recommend to first check the number of files inside to

47
00:04:14,960 --> 00:04:18,740
avoid running the loop on the package, which has more files than you expect.

48
00:04:20,550 --> 00:04:23,460
And keep the single file size limit very tight.

49
00:04:23,820 --> 00:04:27,510
Otherwise, your app can start hitting memory or timeout limits.

50
00:04:29,160 --> 00:04:34,740
On the other hand, the advantage is that if you choose to extract files one by one manually, you can

51
00:04:34,740 --> 00:04:37,440
pick only those which you think are safe enough.

52
00:04:38,130 --> 00:04:42,000
And already during the extraction, you can immediately process each file.

53
00:04:42,900 --> 00:04:49,050
For example, if it seems like you are dealing with an image, you can run them through a library and

54
00:04:49,050 --> 00:04:51,000
only then store them on the server.

55
00:04:54,030 --> 00:04:57,120
Remember when a mining phase from the zip package.

56
00:04:57,450 --> 00:04:59,790
You must check every file the same way.

57
00:04:59,790 --> 00:05:01,980
We were checking single file uploads.

58
00:05:06,840 --> 00:05:12,930
And there's one more thing you can do to disable any potential easy access file in that directory in

59
00:05:12,930 --> 00:05:13,890
your upload folder.

60
00:05:14,910 --> 00:05:20,550
But it's only possible with root access to your server when you can modify the global server configuration

61
00:05:20,550 --> 00:05:21,000
file.

62
00:05:22,680 --> 00:05:30,120
It's an allow overwrite directive which lets you disable any potential access file in a specified directory

63
00:05:30,120 --> 00:05:31,560
or its subdirectories.

64
00:05:32,670 --> 00:05:35,700
But you can't put this directive in your easy access file.

65
00:05:36,150 --> 00:05:38,310
It needs to be put in the global config.

66
00:05:42,770 --> 00:05:48,320
Having said all that, let me remind that if you want to receive multiple files from user, you can

67
00:05:48,320 --> 00:05:54,380
simply add the multiple attributes to your input field and you will not have to sneak peek the zip archive.

68
00:05:54,830 --> 00:05:57,680
Each file would be processed within normal procedure.

69
00:05:59,030 --> 00:06:04,910
In this case, you need to add square brackets to the fields name and adjust the logic of your file.

70
00:06:04,910 --> 00:06:11,060
Upload script because each entry in files super global will now be an array.
