WEBVTT
1
00:00:06.680 --> 00:00:10.460
The usage of sessions is not limited to handling the user log in.

2
00:00:11.180 --> 00:00:17.150
You can use sessions to also track the user's activity before they authenticate or after they log out.

3
00:00:18.650 --> 00:00:24.140
But when doing that, it's very important that after a successful log in, a pre authenticated session

4
00:00:24.140 --> 00:00:27.620
is destroyed and the new one is created with the new ID.

5
00:00:30.920 --> 00:00:31.520
Decision.

6
00:00:31.520 --> 00:00:38.630
It must be regenerated after the successful authentication, but before restoring the authentication

7
00:00:38.790 --> 00:00:39.860
down to the session.

8
00:00:43.430 --> 00:00:49.640
The regeneration of such an idea is also recommended when changing passports, entering elevated privilege

9
00:00:49.640 --> 00:00:50.690
modes, etc..

10
00:00:53.940 --> 00:01:00.390
There are warnings all over the PDP manual about issues with regenerating session IDs when the network

11
00:01:00.390 --> 00:01:01.980
connection is unstable.

12
00:01:02.820 --> 00:01:07.470
If you experience any such problems, don't just throw the whole idea to the trash.

13
00:01:08.160 --> 00:01:11.460
On the manual entry for session regenerate add function.

14
00:01:11.580 --> 00:01:14.970
There is a sample code which explains how to deal with these issues.

15
00:01:16.980 --> 00:01:22.710
Basically you don't delete the old fashioned data and instead you save the at times dump when it was

16
00:01:22.710 --> 00:01:23.340
destroyed.

17
00:01:23.640 --> 00:01:24.780
And the new session id.

18
00:01:30.250 --> 00:01:35.500
If this old session is used within the permitted time since it's been destroyed, it's 5 minutes in

19
00:01:35.500 --> 00:01:37.270
manual, but I guess it could be less.

20
00:01:37.900 --> 00:01:43.720
You tried to switch to the new session idea, and when this old session is used over the permitted time,

21
00:01:44.050 --> 00:01:45.760
you just deny it and destroy.

22
00:01:47.410 --> 00:01:52.510
The important bit is that the old session cannot be really used and cannot work the same like the new

23
00:01:52.510 --> 00:01:53.050
session.

24
00:01:53.620 --> 00:01:58.750
For example, if you user logged in, the information that they are locked in must be saved in the new

25
00:01:58.750 --> 00:01:59.740
session only.

26
00:02:04.310 --> 00:02:05.450
On the user log out.

27
00:02:05.450 --> 00:02:08.480
Forced or not, the whole session should be destroyed.

28
00:02:09.560 --> 00:02:12.440
Note that in PDP it's not a simple to use session.

29
00:02:12.440 --> 00:02:15.020
Start on, log in and session, destroy on, log out.

30
00:02:15.770 --> 00:02:21.710
It's a little more complicated with the log out part because first session destroy function will not

31
00:02:21.710 --> 00:02:24.590
destroy anything without starting the session first.

32
00:02:25.070 --> 00:02:28.220
So you actually need to first use the session start function.

33
00:02:30.490 --> 00:02:37.000
Second, it doesn't clear the session data on the current page load, which means this code will actually

34
00:02:37.000 --> 00:02:41.620
print the user's name even though you destroyed this session before the ICO instruction.

35
00:02:42.340 --> 00:02:47.350
It will not print it on the subsequent request, but it will print it on this particular request which

36
00:02:47.350 --> 00:02:48.370
destroys the session.

37
00:02:51.190 --> 00:02:51.700
Last.

38
00:02:51.700 --> 00:02:54.130
It doesn't actually deliver this session, cookie.

39
00:02:54.340 --> 00:02:57.460
It only clears the temporary session file on the server.

40
00:02:58.240 --> 00:03:03.640
And if the cookie will not be deleted, a new session like on another log in will be started with the

41
00:03:03.640 --> 00:03:05.620
same session ID as before.

42
00:03:06.700 --> 00:03:11.260
If an attacker was able to steal the session idea, they can use it more than once.

43
00:03:11.290 --> 00:03:16.390
If this doesn't delete this session cookie on the log out and the victim logs in again.

44
00:03:19.140 --> 00:03:26.520
To force a new session ID for each login you need to either delete the cookie on session end or use

45
00:03:26.520 --> 00:03:34.260
session read in the root ID function on each login to always start with a fresh ID or simply do both.

46
00:03:38.230 --> 00:03:44.770
To sum up to completely delete this session, you need to start the session with session start function.

47
00:03:46.090 --> 00:03:47.980
Erase all the session variables.

48
00:03:49.860 --> 00:03:52.230
Delete the session cookie in the user's browser.

49
00:03:56.280 --> 00:04:00.210
And then you can destroy the rest of the session with search and destroy function.

50
00:04:02.850 --> 00:04:08.880
And after doing all that, you can start a new session to again, drug unauthenticated users actions.

51
00:04:10.980 --> 00:04:15.450
So this would be the complete session destroyer or simply a low gold function.

52
00:04:21.520 --> 00:04:27.400
Finally make sure you do everything to protect your sites from attacks like cross-site request, forgery,

53
00:04:27.400 --> 00:04:30.010
cross-site scripting and as fuel injection.

54
00:04:31.550 --> 00:04:33.560
With cross site request forgery.

55
00:04:33.560 --> 00:04:38.960
An attacker could act on behalf of an authenticated user without having to steal the session.

56
00:04:39.710 --> 00:04:45.620
And with cross-site scripting and sometimes as fuel injection, the attacker could steal user's session

57
00:04:45.620 --> 00:04:46.280
IDs.
