1
00:00:06,370 --> 00:00:13,270
A part of configuring the server behavior you can set or unset certain HTP headers within your SD access

2
00:00:13,270 --> 00:00:19,480
file when any request to the server is being made using HTP protocol.

3
00:00:20,050 --> 00:00:23,200
There always need to be sent a couple of extra information.

4
00:00:23,410 --> 00:00:28,600
For example, what type and coding and language variances expect that these are?

5
00:00:28,600 --> 00:00:32,320
Accept, accept and coding and accept language headers.

6
00:00:33,430 --> 00:00:38,710
What's relevant cookie the broader case and what the browser and operating system is?

7
00:00:39,040 --> 00:00:40,480
That's user agent Heather.

8
00:00:42,790 --> 00:00:47,950
The server also sends back a bunch of information, a part of the actual request at the final data,

9
00:00:48,490 --> 00:00:57,250
content type, caching instructions, server software, information, etc. These are all HTP headers.

10
00:00:58,030 --> 00:01:04,750
The first group those sent by the browser to the server are request headers and those sent back from

11
00:01:04,750 --> 00:01:07,610
the server to the browser are response headers.

12
00:01:09,340 --> 00:01:14,860
The response headers can be entirely manipulated by the site and there are certain response headers

13
00:01:14,860 --> 00:01:19,570
that are not sent by default and should be added to the list to improve security.

14
00:01:20,620 --> 00:01:23,890
But some of the request headers can also be influenced.

15
00:01:28,080 --> 00:01:34,170
The HTP headers must be sent before any actual content that is before a payload.

16
00:01:35,190 --> 00:01:40,650
You can define the HTP headers for example in Texas file using this syntax.

17
00:01:42,800 --> 00:01:49,010
Cather always said instructed the server to always, for all the responses, send the particular response

18
00:01:49,010 --> 00:01:49,460
header.

19
00:01:50,480 --> 00:01:53,540
Then after space you need to provide the headers name.

20
00:01:53,870 --> 00:02:02,870
In this case, it's ex content type option and after a space the headers value in case of simple alphanumeric

21
00:02:02,870 --> 00:02:03,380
values.

22
00:02:03,590 --> 00:02:09,170
You can provide them as they are, but you must use double quotes for more complex values.

23
00:02:09,470 --> 00:02:11,720
For example, when there's a space character.

24
00:02:14,290 --> 00:02:20,800
The aced it because they're defined in the Xs file will be sent with each single response not only for

25
00:02:21,040 --> 00:02:26,380
HTML documents, but also for images, scripts, styles, fonts, etc..

26
00:02:28,330 --> 00:02:33,460
You can also said the header directly within your application, which allows to make it conditional

27
00:02:34,180 --> 00:02:41,440
in BHP units to use the header function, remembering that it must be called before any output has started.

28
00:02:42,790 --> 00:02:48,820
In this case you don't need the header always set towards anymore and you need to type a column after

29
00:02:48,820 --> 00:02:49,810
the headers name.

30
00:02:50,500 --> 00:02:53,710
Also, any complex value doesn't need double quotes.

31
00:02:56,160 --> 00:03:02,370
Any header defined in the PDP script will only be sent along the response for this particular document

32
00:03:02,370 --> 00:03:02,970
request.

33
00:03:09,980 --> 00:03:11,450
Their referrer policy.

34
00:03:11,450 --> 00:03:17,510
HTP header tells the browser how much information it should reveal to the other side that your user

35
00:03:17,510 --> 00:03:19,400
would navigate to from your site.

36
00:03:20,180 --> 00:03:21,740
Let's see the example first.

37
00:03:22,580 --> 00:03:25,400
The user is on your side on an article page.

38
00:03:26,450 --> 00:03:28,040
The user then clicks along.

39
00:03:28,040 --> 00:03:29,810
That goes to a third party site.

40
00:03:31,010 --> 00:03:37,640
This third party site will receive the user of your page from which the user click the link in the referrer

41
00:03:37,640 --> 00:03:38,600
request header.

42
00:03:40,250 --> 00:03:42,260
And this can be manipulated.

43
00:03:42,680 --> 00:03:47,870
You might want to do that in case you have something in your view, URLs that you wouldn't want to reveal.

44
00:03:48,470 --> 00:03:54,620
The links can be clicked by logged in users or users with special privileges, revealing the paths to

45
00:03:54,620 --> 00:03:56,360
admin panel features, for example.

46
00:03:57,700 --> 00:04:03,960
URLs can also have query strings, including values passed with get methods, hopefully not including

47
00:04:03,960 --> 00:04:07,860
session IDs, but something else that you simply don't wants to share.

48
00:04:08,880 --> 00:04:14,760
And an attacker may want to intentionally place an attractive link on your site to exploit the data

49
00:04:14,760 --> 00:04:16,110
from referrer headers.

50
00:04:17,850 --> 00:04:24,420
It's a nice example in which using the response header you can influence how the requests are potentially

51
00:04:24,420 --> 00:04:26,190
sent later will look like.

52
00:04:29,540 --> 00:04:33,290
So there are several options to choose from as a referrer policy.

53
00:04:34,130 --> 00:04:40,070
Empty string, no referrer same origin origin.

54
00:04:40,970 --> 00:04:48,050
Strict origin origin when across origin strict origin when cross origin.

55
00:04:49,520 --> 00:04:51,230
No referrer when downgrade.

56
00:04:52,390 --> 00:04:53,210
Or unsafe.

57
00:04:53,230 --> 00:04:53,740
You are a.

58
00:04:55,550 --> 00:04:56,930
That's quite a long list.

59
00:04:56,960 --> 00:04:59,390
But in reality, it's not too complicated.

60
00:05:00,470 --> 00:05:06,590
The first setting empty string is an instruction that says you intentionally let the brother decide

61
00:05:06,590 --> 00:05:08,630
what to put into the referrer had there.

62
00:05:10,470 --> 00:05:14,910
The rest I have ordered from most restrictive to less restrictive ones.

63
00:05:16,620 --> 00:05:23,310
The no referrer means you never wants to send any referrer information which is the most secure, but

64
00:05:23,310 --> 00:05:29,850
can, for example, break analytics even on your site, the referrer will not be sent between your own

65
00:05:29,850 --> 00:05:30,600
sub pages.

66
00:05:31,020 --> 00:05:35,010
You may stop getting information about how users traverse your own site.

67
00:05:37,640 --> 00:05:43,490
The same origin means you only wants to send referrer info when the user navigates to the same origin.

68
00:05:43,880 --> 00:05:46,310
In other words, when they are browsing your site.

69
00:05:47,240 --> 00:05:52,220
So this kind of helps with the problem with analytics, which you may encounter when using or referrer.

70
00:05:56,130 --> 00:06:02,820
The origin and strict origin will start sending referrer info to other sites, but it will only include

71
00:06:02,820 --> 00:06:03,600
the origin.

72
00:06:04,830 --> 00:06:10,830
So in our example, the referrer will be the protocol domain and port instead of full URL.

73
00:06:12,610 --> 00:06:17,550
The strict origin differs in that it will not send any origin info.

74
00:06:17,560 --> 00:06:23,950
One user goes from HTP s to HTP from secure site to unsecure site.

75
00:06:25,600 --> 00:06:31,750
Note that with both settings we permit the referrer info to go outside, but once again we may break

76
00:06:31,750 --> 00:06:36,900
our analytics because the referrer will always contain only origin.

77
00:06:37,300 --> 00:06:39,130
Also within our own site.

78
00:06:39,730 --> 00:06:44,800
So we may stop receiving valuable information about actual the paths the user take on our site.

79
00:06:46,860 --> 00:06:48,690
This is where the next pair will help.

80
00:06:49,530 --> 00:06:57,420
Origin when cross origin and strict origin when cross origin vs doesn't sound too friendly at first.

81
00:06:57,420 --> 00:07:03,630
I know the settings will send only the origin when the request goes to the other origin.

82
00:07:06,940 --> 00:07:09,730
But the full you are well within the same origin.

83
00:07:13,150 --> 00:07:18,730
So our analytics will be happy with the full information and the rest of the world will receive only

84
00:07:18,730 --> 00:07:20,500
the protocol and the domain name.

85
00:07:21,670 --> 00:07:29,830
The strict prefix once again will not send any origin info when a user goes from HTP as to HTP from

86
00:07:29,830 --> 00:07:34,750
secure site to unsecure site and that includes your own site.

87
00:07:35,410 --> 00:07:43,000
If you link from HTP example dot com slash something to htp example that becomes something else.

88
00:07:43,420 --> 00:07:44,950
The referrer will be known.

89
00:07:47,570 --> 00:07:54,440
Then near the end of the east we have no referrer when downgrade which will send the full u r l to any

90
00:07:54,440 --> 00:08:05,030
site with this same or higher protection that is from HTP as to htp as from htp to HTP and from htp

91
00:08:05,030 --> 00:08:06,260
to HTP s.

92
00:08:09,020 --> 00:08:14,510
And finally unsafe u r l will always send the full u r l to any other site.

93
00:08:15,050 --> 00:08:20,840
This is the least secure setting which always reveals your full path and should be generally avoided.

94
00:08:24,300 --> 00:08:24,690
Okay.

95
00:08:24,700 --> 00:08:25,470
The list is long.

96
00:08:25,470 --> 00:08:28,350
So what to choose for most sites?

97
00:08:28,350 --> 00:08:35,460
I'd go for strict origin when cross origin that will keep the full URLs within your site and sent only

98
00:08:35,460 --> 00:08:38,460
the origin the domain name to other sites.

99
00:08:40,270 --> 00:08:46,240
But there are cases when you may not want to either disclose fully referrer URL to your own analytics

100
00:08:46,750 --> 00:08:50,620
or when you don't want to disclose even the origin to the outside world.

101
00:08:51,700 --> 00:09:00,850
In these cases, use strict origin or just origin for scenario number one and same origin or no referrer

102
00:09:00,850 --> 00:09:01,460
at all.

103
00:09:01,480 --> 00:09:02,620
In this case.

104
00:09:04,450 --> 00:09:10,420
The same policy can be said for any A-frame that you have on your page with the referrer policy attribute

105
00:09:10,420 --> 00:09:11,680
for the iframe tag.

106
00:09:12,850 --> 00:09:16,270
It expects exactly the same values as we just discussed.

107
00:09:16,600 --> 00:09:22,720
To control how much information the embedded page receives in the referrer HTP request header, which

108
00:09:22,720 --> 00:09:25,060
is also sent to pages within frames.

109
00:09:26,410 --> 00:09:31,120
This attribute will override the referrer policy set for the embedding page.

110
00:09:31,870 --> 00:09:37,990
So in this code, despite we said that no referral policy for the whole page, the referrer will be

111
00:09:37,990 --> 00:09:45,430
sent to an iframe given that its security level is not weaker than of the embedding page, meaning it's

112
00:09:45,430 --> 00:09:50,740
htp s or HTP if the original page uses HTP as well.

113
00:09:57,740 --> 00:10:03,470
Content type sniffing was the feature introduced years ago by Microsoft for Internet Explorer.

114
00:10:04,220 --> 00:10:11,420
It enabled the browser to sniff the content of each resource by looking inside the file and changing

115
00:10:11,420 --> 00:10:15,070
the way it is processed when the inner data seems something else done.

116
00:10:15,080 --> 00:10:16,550
For example file extension.

117
00:10:18,260 --> 00:10:23,150
That, of course, meant an attacker could rename a malicious file to something that looks safe.

118
00:10:23,840 --> 00:10:28,550
And if sniffing could discover that it's not what it looks like, then browser, it could potentially

119
00:10:28,550 --> 00:10:32,450
handle the file in a different way, which is of course very dangerous.

120
00:10:33,740 --> 00:10:39,470
Using the X content type options, however, you can disable any potential browsers sniffing on your

121
00:10:39,470 --> 00:10:42,590
site by setting it to the only possible value.

122
00:10:42,860 --> 00:10:43,670
No sniff.

123
00:10:44,750 --> 00:10:46,670
It's strongly recommended to use it.

124
00:10:48,910 --> 00:10:51,430
The extreme options is the htp.

125
00:10:51,430 --> 00:10:54,250
Heather that will protect your site from click jacking.

126
00:10:55,400 --> 00:10:57,070
Let's have a look at this page.

127
00:10:57,670 --> 00:11:01,210
I enter my login and password and enter the dashboard.

128
00:11:02,500 --> 00:11:06,460
But I didn't realize that my in credentials just got stolen.

129
00:11:09,930 --> 00:11:13,590
Why I wasn't actually on my login page.

130
00:11:13,890 --> 00:11:20,130
I was on a page which had my log in page embedded in a frame which spanned across the whole viewport.

131
00:11:20,970 --> 00:11:25,920
If I were a little bit more attentive, I should have spotted the wrong URL in location bar.

132
00:11:26,610 --> 00:11:28,770
But honestly, who's looking there all the time?

133
00:11:29,610 --> 00:11:32,400
If you do ask yourself if your parents do.

134
00:11:33,630 --> 00:11:39,480
So what happened is that when they submitted the log for the parent page, the one that embedded my

135
00:11:39,480 --> 00:11:43,170
log in page, read the form data and send it to the attacker.

136
00:11:44,640 --> 00:11:46,350
Now they know my log in and password.

137
00:11:47,100 --> 00:11:52,140
Of course, they could do much more with my admin panel running within the frame they control.

138
00:11:52,650 --> 00:11:54,030
They could do anything with it.

139
00:11:55,920 --> 00:11:59,430
There are many, many cases how this kind of attack could be used.

140
00:12:00,000 --> 00:12:02,750
Catching foreign data is one of the most dangerous.

141
00:12:02,760 --> 00:12:07,920
But even if you don't have forms on your page, an attacker could be also catching clicks.

142
00:12:08,460 --> 00:12:15,330
For example, a user who thinks they are on your website could click a contact link, and if that click

143
00:12:15,330 --> 00:12:21,240
is shared, they could be redirected to a similar page, but controlled by an attacker with a phone

144
00:12:21,240 --> 00:12:25,890
number or email of another company effectively stealing the client's.

145
00:12:27,910 --> 00:12:33,850
A simple method to prevent this kind of attack on your website is to ensure your server is sending an

146
00:12:33,850 --> 00:12:39,610
X frame options header with the value of denial to prevent it completely.

147
00:12:42,860 --> 00:12:48,110
Or same origin to allow embedding your pages only within your site's origin.

148
00:12:50,990 --> 00:12:55,640
We'll discuss in more details in the chapter about front end security.

149
00:13:00,640 --> 00:13:04,060
X Power BI is another non-standard HTP header.

150
00:13:04,870 --> 00:13:11,020
It may be propagated by the server and it contains some additional information about the backend technologies

151
00:13:11,410 --> 00:13:12,790
like BHP version.

152
00:13:14,100 --> 00:13:19,860
As it's better to hide any non important information, you can simply remove this gather by putting

153
00:13:19,870 --> 00:13:22,020
this line in your HD access file.

154
00:13:24,340 --> 00:13:28,960
Know that now we use they're always unset instead of they're always set.

155
00:13:31,430 --> 00:13:38,510
X Axis Protection is an HTP header, which was invented by Microsoft for the Internet Explorer eight

156
00:13:38,510 --> 00:13:39,020
browser.

157
00:13:39,710 --> 00:13:45,860
The intention was to allow developers to ask the browser to run the built in access as filter that aims

158
00:13:45,860 --> 00:13:47,930
to prevent cross-site scripting attacks.

159
00:13:48,980 --> 00:13:54,530
The similar approach and the header itself were soon adopted by other browsers, but it never became

160
00:13:54,530 --> 00:13:55,640
an actual standard.

161
00:13:56,420 --> 00:14:01,460
With time, it finally became the predated and now has been removed from most browsers.

162
00:14:02,330 --> 00:14:04,130
So do not set these header.

163
00:14:04,160 --> 00:14:08,420
Or if somehow you can't commit it in your configuration, set it to zero.

164
00:14:15,630 --> 00:14:22,650
Content Security policy is a powerful HTP header that allows pretty granular control over what resources

165
00:14:22,650 --> 00:14:26,010
are permitted on a given site and from which origins.

166
00:14:26,850 --> 00:14:32,820
For example, using this header, you can only allow web fonts to be loaded from a defined CDM.

167
00:14:33,390 --> 00:14:38,160
You can disable inline JavaScript or disable external CSS files.

168
00:14:39,700 --> 00:14:45,460
For example, this instruction will block all external resources and inline scripts.

169
00:14:48,140 --> 00:14:50,720
But of course, usually this is too strict.

170
00:14:51,590 --> 00:14:56,870
We will discuss the content security policy and details in the chapter about cross-site scripting.

171
00:14:59,400 --> 00:15:05,340
Strict transport security is an active behavior that instructs the browser that it should use the secure

172
00:15:05,340 --> 00:15:11,880
connection, which means connection over HTP as for any subsequent request to that domain.

173
00:15:13,530 --> 00:15:19,470
Its value is the maximum time for which the browser should remember this instruction since user's last

174
00:15:19,470 --> 00:15:19,920
visit.

175
00:15:21,640 --> 00:15:26,740
I will talk about it in details in the next chapter, which is about using SSL TLS.
