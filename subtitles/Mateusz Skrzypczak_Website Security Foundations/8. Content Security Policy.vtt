WEBVTT
1
00:00:05.350 --> 00:00:11.110
You can strengthen the existing protection on your site by specifying a content security policy.

2
00:00:11.830 --> 00:00:17.290
It's an easy to be header in which you can specify the policy for certain content types on your site,

3
00:00:17.620 --> 00:00:21.430
which simply means limit the origins from which you want to accept them.

4
00:00:23.190 --> 00:00:28.920
For example, you can disable any scripts that are not coming from your own origin or from a list of

5
00:00:28.920 --> 00:00:30.240
origins that you trust.

6
00:00:31.140 --> 00:00:33.750
But the policy can contain much more than that.

7
00:00:34.320 --> 00:00:42.120
You can set the policy also for fonts, frames, images, media objects and stylesheet, but also for

8
00:00:42.120 --> 00:00:46.530
JavaScript workers example, HTP requests, web sockets, etc..

9
00:00:48.490 --> 00:00:51.430
The content security policy is a powerful tool.

10
00:00:52.030 --> 00:00:57.550
In the end, it may be a single line, but it's a mighty line and it needs quite a lot of effort and

11
00:00:57.550 --> 00:01:01.300
lots of testing to ensure it doesn't do more harm than good.

12
00:01:02.710 --> 00:01:07.720
But the biggest trouble of it is that it's relatively young standard, which means the browser support

13
00:01:07.720 --> 00:01:13.300
is limited to recent browsers, and some useful features are still barely supported.

14
00:01:14.280 --> 00:01:20.900
Generally don't expect it to work on iOS and early versions of AD anyway.

15
00:01:20.910 --> 00:01:26.490
Using the content security policy doesn't mean you can stop protecting your sites from cross-site scripting

16
00:01:26.520 --> 00:01:31.710
with all the techniques that we learned because it's not meant to be a single protection measure.

17
00:01:32.430 --> 00:01:37.830
Also, depending on the complexity of your project, you may eventually need to hold the content security

18
00:01:37.830 --> 00:01:39.630
policy implementation for now.

19
00:01:43.020 --> 00:01:45.350
Well, let's see how it can look like.

20
00:01:47.270 --> 00:01:51.170
It is not the simplest policy, but it shows a couple of general points.

21
00:01:51.860 --> 00:01:52.880
Let's break it down.

22
00:01:53.630 --> 00:02:02.330
We have set the policy for two content types images and fonts and the default policy for all other content

23
00:02:02.330 --> 00:02:03.860
types that are not defined.

24
00:02:06.150 --> 00:02:12.120
The default source is set to self in single quotes, which means everything that is not an image or

25
00:02:12.120 --> 00:02:14.610
font must come from the site's origin.

26
00:02:16.340 --> 00:02:20.600
The image source is the wild card subdomain of example dot com.

27
00:02:20.990 --> 00:02:27.290
So images can come from w w w example dot com images dot example dot com, etc..

28
00:02:29.350 --> 00:02:36.340
The font source is set to a list of two full URLs, which means fonts can only come from HTP as fonts.

29
00:02:36.340 --> 00:02:40.900
Example dot com or htp s other fonts examples dot com.

30
00:02:42.040 --> 00:02:45.190
Note how multiple origins are separated by space.

31
00:02:46.300 --> 00:02:53.770
Unlike images, a non htp url will not be accepted in this case because we explicitly define the protocols.

32
00:02:56.690 --> 00:03:02.450
The default source, image source, font source and others are called fetch directives.

33
00:03:03.080 --> 00:03:06.110
Other fetch directives are created in a similar way.

34
00:03:06.440 --> 00:03:13.850
Script Source Style Source Frame Source, media source, object, source, connect, source, etc..

35
00:03:14.630 --> 00:03:18.770
I have listed only those with the widest browser support, but there are more.

36
00:03:21.190 --> 00:03:23.560
How to implement the content security policy.

37
00:03:24.850 --> 00:03:28.750
You can add the header in your HD access file or in peer to peer code.

38
00:03:29.740 --> 00:03:34.900
As with all HTP headers in HD access, you need to use slightly modified syntax.

39
00:03:35.650 --> 00:03:42.160
The directive must be presented with had there always set, there will be no column after the header

40
00:03:42.160 --> 00:03:48.280
name and the Heather's value, which means the actual policy must be surrounded with double quotes.

41
00:03:51.410 --> 00:03:57.170
In BHP, you can simply use the header function and the unmodified HTP header syntax.

42
00:03:59.200 --> 00:04:00.130
For simplicity.

43
00:04:00.130 --> 00:04:06.580
In all the examples, I will use the regular HTP header syntax like in the BGP implementation content

44
00:04:06.580 --> 00:04:09.340
security policy column and the policy.

45
00:04:12.140 --> 00:04:15.020
Fetch directives can have different types of values.

46
00:04:16.020 --> 00:04:19.380
It can be a host, like we said, for images and fonts.

47
00:04:20.190 --> 00:04:26.130
They can have wildcards be defined with or without protocol and with or without board.

48
00:04:26.550 --> 00:04:28.110
So all these are valid.

49
00:04:31.440 --> 00:04:34.020
It can also be a protocol followed by a colon.

50
00:04:34.650 --> 00:04:40.500
In other words, you can set a content type to only be loaded via ATP as, for example, regardless

51
00:04:40.500 --> 00:04:41.250
of a domain.

52
00:04:41.820 --> 00:04:43.830
Or you can allow data to arise.

53
00:04:46.890 --> 00:04:52.020
In this example, images can be loaded from any domain under SSL and also data.

54
00:04:52.020 --> 00:04:53.280
Your eyes are allowed.

55
00:04:57.700 --> 00:05:03.850
You can use a self keyword in single quotes, which always means current pages, origin, protocol,

56
00:05:03.850 --> 00:05:04.660
domain and port.

57
00:05:05.710 --> 00:05:12.790
For example, if you set the script source to self, any script that comes from another site like hidden,

58
00:05:13.060 --> 00:05:15.880
but also any inline script will be killed.

59
00:05:18.260 --> 00:05:23.840
However, if there's a Sydney or any other site that you trust, you can simply added to the policy.

60
00:05:26.160 --> 00:05:30.600
Now these groups can be operated either from the sites, origin or issue types.

61
00:05:30.600 --> 00:05:38.040
See the example dot com but from HTP see the an example dot com as we specified the protocol in policy.

62
00:05:42.100 --> 00:05:48.640
Using the policy default source self will only allow resources coming from the same origin, including

63
00:05:48.640 --> 00:05:54.820
scripts, fonts, images, media and all other resources and connections that CSP applies to.

64
00:05:55.210 --> 00:05:59.020
So it is quite restrictive, it's very secure.

65
00:05:59.050 --> 00:06:01.290
But many things can fail on your site.

66
00:06:05.310 --> 00:06:11.610
In a similar way by using a non keyword in single quotes, you can disallow any resource of a certain

67
00:06:11.610 --> 00:06:13.560
type from being used at all.

68
00:06:15.690 --> 00:06:22.200
Now no fonts will be loaded regardless of where it is coming from, even from your own site's origin.

69
00:06:24.740 --> 00:06:31.760
There is also a group of three similar values unsafe in line, unsafe crashes and unsafe evil.

70
00:06:32.510 --> 00:06:36.590
They can be used to bypass the strict security of content security policy.

71
00:06:38.600 --> 00:06:45.350
Unsafe in line will allow in line scripts, so it's an easy way to get around the inline scripts, which

72
00:06:45.350 --> 00:06:47.900
you might be too lazy to put in external files.

73
00:06:48.890 --> 00:06:54.500
But now the content security policy will not be protecting your sites from inline cross-site scripts.

74
00:06:54.950 --> 00:06:58.310
There is a reason why these key words is prevented with the word unsafe.

75
00:07:00.470 --> 00:07:01.390
To be precise.

76
00:07:01.400 --> 00:07:06.620
This is what it allows in a scripts that is those placed inside script stack.

77
00:07:08.100 --> 00:07:16.650
Inline even handlers that is, for example, on click on mouse over on error URLs starting with JavaScript

78
00:07:16.650 --> 00:07:20.550
from colon and inline see us as styles.

79
00:07:22.020 --> 00:07:23.670
So it's quite lose, isn't it?

80
00:07:27.900 --> 00:07:28.860
Another option.

81
00:07:28.950 --> 00:07:33.090
Unsafe hashes can be used to only allow inline event handlers.

82
00:07:36.500 --> 00:07:40.400
But still, this allowed the rest, like inline scripts or styles.

83
00:07:43.220 --> 00:07:49.070
This one, however, is only available in most recent versions of Edge and Chrome, so I wouldn't even

84
00:07:49.070 --> 00:07:49.520
tried.

85
00:07:51.520 --> 00:07:58.330
The list of unsafe is unsafe evil, which allows the use of a dangerous evil function and other expressions

86
00:07:58.330 --> 00:08:00.580
in JavaScript that work in a similar way.

87
00:08:00.910 --> 00:08:03.370
For example, set timeout and set interval.

88
00:08:06.220 --> 00:08:08.050
When it comes to those functions.

89
00:08:08.050 --> 00:08:14.140
This unsafe EVA directive only applies to situations in which you have a string of upgrades to evaluate

90
00:08:14.140 --> 00:08:14.650
the code.

91
00:08:14.890 --> 00:08:15.910
Like in the example.

92
00:08:18.790 --> 00:08:24.040
Not that you don't need unsafe evil to be able to you set time out and set interval methods.

93
00:08:24.310 --> 00:08:27.490
You just need to pass a function to them, not a string.

94
00:08:34.360 --> 00:08:40.480
The interesting thing is that only by adding a default source or script source in your policy, all

95
00:08:40.480 --> 00:08:42.970
inline scripts will be effectively disabled.

96
00:08:44.800 --> 00:08:50.440
It means that most of the cross-site scripting attempts will now fail because the browser will block

97
00:08:50.440 --> 00:08:51.610
them as untrusted.

98
00:08:53.570 --> 00:08:54.380
And that's great.

99
00:08:54.380 --> 00:08:59.360
But if you use inline scripts for legitimate purposes, those will be killed as well.

100
00:09:00.260 --> 00:09:02.200
But let me give you a couple of examples.

101
00:09:02.210 --> 00:09:04.280
How to get rid of inline scripts.

102
00:09:05.990 --> 00:09:11.120
First reason why you might want to use inline scripts is to pass there some data from your backhand.

103
00:09:12.440 --> 00:09:16.580
You can modify this code into ways to get rid of an inline script.

104
00:09:18.410 --> 00:09:25.670
Either put the back end data in a data attribute of an element, and then in your external JavaScript

105
00:09:25.670 --> 00:09:29.270
mind, just get the data attribute the value from the element that has it.

106
00:09:32.490 --> 00:09:36.360
Or put the data as a JSON object as explained in aerial video.

107
00:09:40.120 --> 00:09:45.700
Another reason that people use inline scripts is that those scripts are tiny and they believe there's

108
00:09:45.700 --> 00:09:50.320
no point in using an external file, which is an additional ATP request.

109
00:09:51.400 --> 00:09:57.370
These can be, for example, tracking codes that are only needed on certain pages, so are included

110
00:09:57.370 --> 00:10:00.550
in the supposed templates rather than in the global script.

111
00:10:02.310 --> 00:10:06.600
It's not how the app should be built in the ideal world, but it often happens.

112
00:10:08.030 --> 00:10:10.700
And the performance problem is only partially true.

113
00:10:11.090 --> 00:10:16.820
Another HTP request can make the page load a little bit slower on HTP 1.1.

114
00:10:17.720 --> 00:10:21.650
But anyway, I would sacrifice that small performance kit for security.

115
00:10:22.820 --> 00:10:29.180
However, if your server supports version two of the HTP protocol, you don't have to sacrifice anything.

116
00:10:29.960 --> 00:10:36.770
Adding another request will have no impact on performance at all because HTP too can reuse connections

117
00:10:36.770 --> 00:10:42.140
between browser and server and the number of requests does not hurt the performance anymore.

118
00:10:43.250 --> 00:10:50.720
Note that to use HTP to your site needs SSL protection, otherwise it will always be HTP 1.1.

119
00:10:52.820 --> 00:10:58.820
So in these circumstances, you can move the tracking script to an external file and also put the order

120
00:10:58.820 --> 00:11:02.060
I.D. in a data attribute so that it can be read from there.

121
00:11:04.820 --> 00:11:07.570
And this is the content of the new JavaScript file.

122
00:11:09.890 --> 00:11:18.020
We get the order element, read its data, contribute and provide it to the track function with some

123
00:11:18.020 --> 00:11:18.920
filtering of course.

124
00:11:24.160 --> 00:11:29.740
The similar case is with Google Analytics or Facebook pixel codes, which were asked to put on your

125
00:11:29.740 --> 00:11:31.390
page if something like this.

126
00:11:32.780 --> 00:11:33.920
Or something like this.

127
00:11:36.100 --> 00:11:42.730
Both these codes set some global variables, then create a new script element that asynchronously loads

128
00:11:42.730 --> 00:11:46.120
the tracking scripts and then send some data to them.

129
00:11:47.830 --> 00:11:51.520
If you set the content security policy, these codes will not work.

130
00:11:52.180 --> 00:11:53.950
But there are two ways to get around it.

131
00:11:55.720 --> 00:11:57.870
First, you will get the similar experience.

132
00:11:57.880 --> 00:12:03.310
If you move this code to an external script file and load it asynchronously, which means you need an

133
00:12:03.310 --> 00:12:04.360
async attribute.

134
00:12:05.770 --> 00:12:08.950
A script with asking attribute will not block.

135
00:12:08.950 --> 00:12:17.080
The HTML parsing will be downloaded in parallel with other resources and also will run as soon as it's

136
00:12:17.080 --> 00:12:17.680
downloaded.

137
00:12:19.070 --> 00:12:24.140
And in the JavaScript file of course you have to remove the HTML comments and script tags.

138
00:12:25.560 --> 00:12:27.120
So it's still asynchronous.

139
00:12:27.180 --> 00:12:33.390
It will not slow down your page load but is now in an external file and content security policy can

140
00:12:33.390 --> 00:12:34.080
be applied.

141
00:12:37.640 --> 00:12:43.160
When it comes to Facebook pixel code, you also need to extract the actual script to an external file.

142
00:12:45.630 --> 00:12:51.390
And then put it on your page with an async attribute as well, leaving the no script back as it was.

143
00:12:56.440 --> 00:13:02.140
The second way to deal with these inline scripts is to actually leave them in line and allow them in

144
00:13:02.140 --> 00:13:06.280
your policy by a hash generated from the script or by Anons.

145
00:13:07.000 --> 00:13:13.150
Unfortunately, this is supported only by most recent browsers, but I will show you how it works anyway.

146
00:13:14.490 --> 00:13:20.130
Providing hashes or nonsense is a great way to add some exceptions for scripts you would prefer to have

147
00:13:20.130 --> 00:13:20.700
in line.

148
00:13:21.810 --> 00:13:27.480
Unfortunately, the support for them was only added recently to some of the browsers and on the brothers

149
00:13:27.480 --> 00:13:33.360
where it's not supported in line scripts allowed by nonce or hash will still remain blocked.

150
00:13:34.080 --> 00:13:39.420
So this feature is not backwards compatible and would break your side on all their browsers.

151
00:13:40.380 --> 00:13:45.030
Anyway, let's see how it works because this will be useful in, I hope, near future.

152
00:13:46.970 --> 00:13:52.520
To allow a script by a hash, you need to generate the hash from it and put it in the policy, like

153
00:13:52.520 --> 00:13:53.330
in this example.

154
00:13:55.220 --> 00:14:02.600
This policy accepts only a script that produced the provided SHA256 hash in policy.

155
00:14:02.600 --> 00:14:05.060
A hash needs to be base64 encoded.

156
00:14:06.960 --> 00:14:12.720
So if the script is static like analytics code which will change very readily, you can just generate

157
00:14:12.720 --> 00:14:16.200
the hash once and add the policy easy.

158
00:14:17.160 --> 00:14:20.580
But remember about the policy when updating the analytics code.

159
00:14:23.740 --> 00:14:25.060
For dynamic scripts.

160
00:14:25.060 --> 00:14:31.100
The hashes need to be obtained before the page starts rendering because only until then you can send

161
00:14:31.120 --> 00:14:35.890
HTP headers and content security policy is an HTP header.

162
00:14:40.250 --> 00:14:44.930
So you need to generate the scripts and their hashes earlier than you put them on the page.

163
00:14:45.500 --> 00:14:48.530
Otherwise, you will not be able to put them in your policy.

164
00:14:53.430 --> 00:14:59.910
A browser will then generate by itself the SHA256 hash of the inline script and compare it with what

165
00:14:59.910 --> 00:15:02.310
it received in the content security policy header.

166
00:15:05.460 --> 00:15:07.380
Pay attention when placing the script.

167
00:15:08.940 --> 00:15:14.490
Any leading or trailing whitespace inside the script tag will make the browser generate a different

168
00:15:14.490 --> 00:15:15.540
hash than you did.

169
00:15:16.440 --> 00:15:22.260
In this example, there's a line break before and after the actual script, and because of that, it

170
00:15:22.260 --> 00:15:22.920
will fail.

171
00:15:27.840 --> 00:15:32.760
Another method for explicitly allowing certain inline scripts is to use nonce.

172
00:15:32.760 --> 00:15:38.310
This nonce is a number or string that is intended to be used only once.

173
00:15:40.140 --> 00:15:41.970
If you set your policy like this.

174
00:15:44.200 --> 00:15:48.670
Then the browser will only allowed the inline script with the provided nonce attribute.

175
00:15:53.000 --> 00:15:58.490
But unlike hashes notes, these for the same script should be different with each request.

176
00:15:59.570 --> 00:16:05.780
If you keep using the same or predictable analysis, anyone can nod them and use for their own malicious

177
00:16:05.780 --> 00:16:06.320
scripts.

178
00:16:08.520 --> 00:16:13.950
That's why you need to generate a cryptographically secure nonce on each request for each script.

179
00:16:15.120 --> 00:16:16.470
This is how I will do it.

180
00:16:20.340 --> 00:16:23.790
First generate a cryptographically secure random nonce.

181
00:16:24.510 --> 00:16:26.430
The script contents doesn't matter.

182
00:16:26.520 --> 00:16:30.840
We just generate the nonce for an analytic script because we know we have one.

183
00:16:33.270 --> 00:16:36.300
Then we unbeknownst to our content security policy.

184
00:16:39.070 --> 00:16:44.170
And finally, when we place the script on the side, we need to add Anons attributes to their script

185
00:16:44.170 --> 00:16:48.100
tag and fill it with the nonce that we generated at the beginning.

186
00:16:53.030 --> 00:16:56.780
Because content security policy is quite a complex thing to create.

187
00:16:57.020 --> 00:17:03.170
You can first use a content security policy report only header, which will not apply any policy.

188
00:17:03.380 --> 00:17:09.230
But we generate a report in which you can validate how it would have worked, especially which resources

189
00:17:09.260 --> 00:17:10.970
would have been blocked by the policy.

190
00:17:12.440 --> 00:17:17.720
What you need to do, however, is set up a beacon script that will be able to receive the reports as

191
00:17:17.720 --> 00:17:20.960
by default they are generated but not sent anywhere.

192
00:17:22.430 --> 00:17:28.910
A report is a Jason object with some details about which resource has been blocked on which page, on

193
00:17:28.910 --> 00:17:31.730
which line, and because of which directive.

194
00:17:33.690 --> 00:17:38.340
In the example, I will use a legacy deprecated method of reporting a report.

195
00:17:38.340 --> 00:17:44.310
You are a directive simply because it's widely supported and because the now standard method with a

196
00:17:44.310 --> 00:17:47.190
report to the directive is badly supported.

197
00:17:49.540 --> 00:17:53.080
So to tell the brother where to send reports, I would use the report.

198
00:17:53.110 --> 00:17:53.590
You are right.

199
00:17:53.590 --> 00:17:54.270
They are active.

200
00:17:54.310 --> 00:17:56.800
Would expect a path to a beckoned script.

201
00:17:58.240 --> 00:18:01.840
And the simple script that would receive the report is this.

202
00:18:05.750 --> 00:18:10.190
It will put in the B to B error look vile, anything that can be reported.

203
00:18:11.510 --> 00:18:16.580
It's a very simple script which you might not exactly wants to use on your production server as is.

204
00:18:16.850 --> 00:18:18.860
But there are other in your testing environment.

205
00:18:20.210 --> 00:18:25.820
Unfortunately, the location of the script is public and it's widely open, which means it's prone to

206
00:18:25.820 --> 00:18:27.810
being abused by malicious users.

207
00:18:28.310 --> 00:18:31.070
But you get the idea how to obtain the report data.

208
00:18:34.190 --> 00:18:36.680
This is what might have been written to the log file.

209
00:18:39.090 --> 00:18:43.290
So what do we have in the report that blocked your entry?

210
00:18:43.380 --> 00:18:49.050
Lets us know what type of resource has been blocked, whether it was an inline script or a particular

211
00:18:49.050 --> 00:18:50.580
external script, for example.

212
00:18:52.060 --> 00:18:56.050
The document you write tells us on which page the violation happened.

213
00:18:57.580 --> 00:19:01.520
The violation directive lets us know which directive was violated.

214
00:19:01.540 --> 00:19:04.720
For example, default source, script source, etc..

215
00:19:07.570 --> 00:19:11.830
The original policy entry dose of the food policy that has been applied.

216
00:19:14.100 --> 00:19:20.160
And the line number and column number entries tell us on which line and at which character a violation

217
00:19:20.160 --> 00:19:20.610
happened.

218
00:19:22.740 --> 00:19:27.690
The document you write and line number are two most useful values for spotting errors.

219
00:19:30.480 --> 00:19:35.310
Unfortunately, from my testing, it seems like the reports are not too consistent across browsers.

220
00:19:36.630 --> 00:19:42.150
For example, Chrome puts in very detailed information, including disposition and status code, which

221
00:19:42.150 --> 00:19:47.310
are omitted by Firefox and Safari, whereas Safari is the least specific.

222
00:19:47.490 --> 00:19:50.910
For example, it doesn't tell you the line number and column number.

223
00:19:53.060 --> 00:19:56.910
Also all three point out the violated directive in a different way.

224
00:19:58.160 --> 00:20:03.710
For the default source self policy the most restrictive one and then inline script.

225
00:20:04.790 --> 00:20:11.090
In Firefox we get only a diluted directive entry with a directive name that has been violated, which

226
00:20:11.090 --> 00:20:14.090
is what you might expect in Chrome.

227
00:20:14.360 --> 00:20:18.200
We get a violated directive and an effective directive entry.

228
00:20:18.980 --> 00:20:23.570
The second one with the most specific directive that exists in the specification.

229
00:20:23.810 --> 00:20:28.760
Even if you didn't use it in your policy here, we only used the default source.

230
00:20:28.970 --> 00:20:31.670
We don't have any script source elem directive.

231
00:20:33.770 --> 00:20:38.090
And in Safari, we also get two entries with effective directive.

232
00:20:38.090 --> 00:20:42.950
Also being more specific than your actual policy, but not the most specific.

233
00:20:44.090 --> 00:20:50.150
And the belated directive in form of the directive name and its value different than in Firefox.

234
00:20:54.920 --> 00:20:59.900
What's interesting, even if you want to start enforcing your policy by switching to content security

235
00:20:59.900 --> 00:21:00.830
policy header.

236
00:21:00.860 --> 00:21:07.130
Without this report only part, you can keep the report you or I directive to continue receiving reports.

237
00:21:07.430 --> 00:21:09.620
While the policy is really applied.

238
00:21:12.650 --> 00:21:18.890
Now you can spot potential cross-site scripting attacks using the document you and line number information.

239
00:21:21.210 --> 00:21:27.690
For example, if you get a report saying the inline script was blocked on line 60 of contact BHP page

240
00:21:29.430 --> 00:21:33.510
and on that page there is no in line script at line 60 that you know about.

241
00:21:35.100 --> 00:21:38.190
You know that this might have been a cross-site scripting attempt.

242
00:21:43.750 --> 00:21:48.070
The content security policy is a great idea and I'm a big fan of it.

243
00:21:49.480 --> 00:21:51.940
However, it is pretty hard to get it right.

244
00:21:52.300 --> 00:21:57.940
Not only because it's so powerful, but also because it's fairly new technology and is not yet widely

245
00:21:57.940 --> 00:21:58.510
supported.

246
00:21:59.440 --> 00:22:05.140
But if properly set and well-supported, it does a great job in preventing one of the most dangerous

247
00:22:05.140 --> 00:22:07.330
vulnerabilities cross-site scripting.

248
00:22:09.900 --> 00:22:15.570
When setting up your policy, make sure you test it thoroughly on different browsers, especially on

249
00:22:15.570 --> 00:22:17.700
some older versions, if only you can.

250
00:22:19.240 --> 00:22:24.850
Always check the compatibility of each feature you might want to use to ensure you don't rely on a poorly

251
00:22:24.850 --> 00:22:26.440
supported part of the standard.

252
00:22:27.970 --> 00:22:33.790
Start with the Content Security Policy Report only and monitor the reports to feel more confident.

253
00:22:36.180 --> 00:22:41.270
If you would need to use the features which have not enough support, like allowing inline scripts by

254
00:22:41.280 --> 00:22:47.340
hash or nonce, you can always do some testing now and just put the policy on the shelf until these

255
00:22:47.340 --> 00:22:49.470
features have better browser support.
