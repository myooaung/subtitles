1
00:00:06,300 --> 00:00:11,970
As we learned at the beginning, brute force is a type of attack in which an intruder makes tons of

2
00:00:11,970 --> 00:00:18,810
tries to, for example, gives the password the secret token or the URL of an unpublished page.

3
00:00:20,100 --> 00:00:26,370
This is possible because it's never a person doing these tries, but a computer program often using

4
00:00:26,370 --> 00:00:33,660
powerful CPU or a recent invention GPU, the graphics processor, which does certain operations much

5
00:00:33,660 --> 00:00:34,980
faster than CPU.

6
00:00:36,450 --> 00:00:42,390
There are obvious solutions, like using strong hashing algorithms or not hiding anything on the side,

7
00:00:42,390 --> 00:00:43,740
and there has to be a path.

8
00:00:44,430 --> 00:00:50,160
But apart of them, you can apply some additional security measures, particularly targeting brute force

9
00:00:50,160 --> 00:00:50,700
attacks.

10
00:00:54,120 --> 00:01:00,330
First of all, you can apply rate limits for certain actions that is logged a resource for some time

11
00:01:00,360 --> 00:01:02,940
after some number of invalid accessories.

12
00:01:03,930 --> 00:01:09,690
For example, if the password was incorrectly typed more than five times, log the account for one hour.

13
00:01:10,410 --> 00:01:14,880
This is very effective because the attacker can do nothing after those five tries.

14
00:01:15,300 --> 00:01:19,050
Changing IP, erasing cookies, etc. will not help.

15
00:01:20,980 --> 00:01:23,200
The mechanism is quite easy to implement.

16
00:01:25,780 --> 00:01:31,390
This is an example of data structure where you have log in details, plus a column that counts invalid

17
00:01:31,390 --> 00:01:37,210
drives and another column that stores a timestamp to which the user account is logged.

18
00:01:39,840 --> 00:01:43,290
The first user here is obviously locked and the second is not.

19
00:01:47,400 --> 00:01:50,730
And this would be the PDP code to handle the rate limiting.

20
00:01:53,500 --> 00:01:59,530
In this simplified code example, we first check two things whether the user is logged, which means

21
00:01:59,530 --> 00:02:05,890
the log and date is greater than zero, and whether the log is active, which means the lock and the

22
00:02:05,890 --> 00:02:07,570
date is greater than now.

23
00:02:09,220 --> 00:02:14,320
If this condition is true, it means the user is logged and we don't do anything further.

24
00:02:14,560 --> 00:02:16,660
We just tell them that the account is locked.

25
00:02:18,290 --> 00:02:23,360
In either case, it means the account is either not locked or the lock and the date has passed so we

26
00:02:23,360 --> 00:02:28,520
can accept log in tries first in case there indeed was a lock that expired.

27
00:02:28,880 --> 00:02:34,190
We should reset the log and the number of trace so that the user can again have five attempts.

28
00:02:35,690 --> 00:02:41,000
We need a similar if condition as at the beginning, but this time we need to reverse the comparison

29
00:02:41,000 --> 00:02:46,310
operator so that we see the specific scenario in which there was a log and it expired.

30
00:02:48,530 --> 00:02:49,760
Then we check the password.

31
00:02:50,120 --> 00:02:52,070
If it's correct, we continue as normal.

32
00:02:53,480 --> 00:02:59,750
But if the supplied basalt is incorrect again, we need to see if the number of invalid tries did not

33
00:02:59,750 --> 00:03:01,340
exceed this specific threshold.

34
00:03:01,640 --> 00:03:02,300
In our case.

35
00:03:02,300 --> 00:03:02,780
Five.

36
00:03:04,330 --> 00:03:08,020
If not, we increment the invalid trace counter by one.

37
00:03:10,340 --> 00:03:15,620
If yes, we applied the lock by setting up its expiration date in the locked anthill field.

38
00:03:16,490 --> 00:03:19,610
You can use the UNIX timestamp function of my iscsi well.

39
00:03:23,420 --> 00:03:25,700
The rate limiting can be made progressive.

40
00:03:26,240 --> 00:03:31,910
For example, after five tries, the account would be locked for one minute after another, try for

41
00:03:31,910 --> 00:03:40,370
2 minutes, then for 4 minutes, 8 minutes, etc. The rate limiting method is very effective for security,

42
00:03:40,640 --> 00:03:44,360
but may unfortunately severely impact legitimate users.

43
00:03:45,350 --> 00:03:48,590
Of course, many users would rather try to reset their password.

44
00:03:48,590 --> 00:03:50,840
Then it's tens of times, that's for sure.

45
00:03:51,990 --> 00:03:57,720
But after someone else who wants to break the parcel blogs the account, the legitimate user will not

46
00:03:57,720 --> 00:03:59,380
be able to log in as well.

47
00:04:01,080 --> 00:04:06,450
And in case of progressive logging, after enough number of tries, the account can become locked for

48
00:04:06,450 --> 00:04:07,080
days.

49
00:04:11,430 --> 00:04:16,740
Another prevention method for brute force attacks may be to slow down this sensitive process.

50
00:04:17,580 --> 00:04:19,500
Let's stick to the looking for an example.

51
00:04:20,220 --> 00:04:26,220
The brute force method is sufficient when you can quickly make thousands or millions of attempts by

52
00:04:26,220 --> 00:04:28,440
only allowing one attempt per second.

53
00:04:28,590 --> 00:04:34,170
You can make even the average passwords very, very hard to crack, of course, unless the attacker

54
00:04:34,170 --> 00:04:40,020
has lots of luck or nearly knows what the password is so that they need a few dozens of tries only.

55
00:04:42,120 --> 00:04:47,190
But if you just thought of simply applying the sleep method to the verification process, let me tell

56
00:04:47,190 --> 00:04:48,960
you straight away, it's not the way to go.

57
00:04:49,890 --> 00:04:53,920
It will have performance implications because the script will not actually sleep.

58
00:04:54,450 --> 00:04:59,310
It will just keep the process running longer, which can quickly lead to site outage and actually can

59
00:04:59,310 --> 00:05:02,370
help carrying out the US denial of service attack.

60
00:05:03,720 --> 00:05:09,600
Also, it would be just enough for an attacker to open a large number of simultaneous requests to bypass

61
00:05:09,600 --> 00:05:10,290
this delay.

62
00:05:14,900 --> 00:05:20,180
Instead, you would want to apply a short timeout in the database in a very similar way.

63
00:05:20,180 --> 00:05:26,450
We applied logs before, but this time the database would only need to have a column for the log time

64
00:05:26,450 --> 00:05:29,030
out as it had in the real limiting example.

65
00:05:31,030 --> 00:05:33,460
And here the timeout will be very tight.

66
00:05:33,790 --> 00:05:38,710
Something between one and 3 seconds, which should be less than the time needed for a quickly typing

67
00:05:38,710 --> 00:05:40,990
user to execute legitimate strikes.

68
00:05:42,570 --> 00:05:44,970
This code derives from the area example.

69
00:05:48,530 --> 00:05:54,170
The first thing we check is whether there is a lock and whether it's and the date is greater than now.

70
00:05:55,990 --> 00:05:59,980
If this condition is true, then we don't do anything as the account is locked.

71
00:06:01,520 --> 00:06:09,410
If there is no lock or it already expired, we verified the password and then if it's invalid, we add

72
00:06:09,410 --> 00:06:10,850
a log for 2 seconds.

73
00:06:13,940 --> 00:06:19,520
This code is much simpler than before because we don't need to count in drives and we don't need to

74
00:06:19,520 --> 00:06:21,620
reset the number of ever labeled tries.

75
00:06:21,650 --> 00:06:23,120
After the timeout passes.

76
00:06:24,880 --> 00:06:30,850
And using this method, a legitimate user can try tens of times and will not get locked out for any

77
00:06:30,850 --> 00:06:37,390
longer period, even if someone else tried to attack their account and the brute force tries will be

78
00:06:37,390 --> 00:06:41,410
slowed down enough to make this kind of attack vastly inefficient.

79
00:06:45,250 --> 00:06:51,940
CAPTCHA is a feature that asks users to complete a task which for humans is trivial but for robots is

80
00:06:51,940 --> 00:06:53,440
theoretically impossible.

81
00:06:54,490 --> 00:07:00,430
It was invented to fend off robots from completing a sensitive process and to mitigate brute force attacks,

82
00:07:00,430 --> 00:07:01,840
which always include robots.

83
00:07:02,950 --> 00:07:07,450
In its original form, the task was to rewrite a set of characters from an image.

84
00:07:07,630 --> 00:07:13,030
But now it can be to choose photos that include some particular object or to arrange simple puzzles.

85
00:07:14,230 --> 00:07:17,440
Whatever the mechanism is, there is a number of problems with it.

86
00:07:18,670 --> 00:07:21,520
First, it's not the most user friendly feature.

87
00:07:21,880 --> 00:07:27,910
It's actually very annoying for people because then it's legitimate users who need to make an extra

88
00:07:27,910 --> 00:07:29,950
effort to protect the whole service.

89
00:07:31,470 --> 00:07:35,520
At times it's not clear enough even for a healthy, educated adult.

90
00:07:35,910 --> 00:07:39,930
And it may be tricky for people with disabilities as it is for robots.

91
00:07:40,920 --> 00:07:42,630
And it's not unbreakable either.

92
00:07:42,930 --> 00:07:49,650
With the growing popularity of A.I. Solutions, the relative simplicity to create neural networks and

93
00:07:49,650 --> 00:07:52,710
the growing number of people are trying to break whatever they can.

94
00:07:53,070 --> 00:07:55,710
Not a single capture mechanism can be safe.

95
00:07:56,970 --> 00:08:02,250
There are also companies that hire people from less developed countries to break up just manually.

96
00:08:04,740 --> 00:08:09,930
Having that in mind, I discourage from using CAPTCHA as a basic and brute force method.

97
00:08:10,920 --> 00:08:16,620
If you really like this solution and desperately wants to implement it, consider creating a mechanism

98
00:08:16,620 --> 00:08:21,480
that will allow a number of requests from one person before the CAPTCHA comes in.

99
00:08:22,680 --> 00:08:28,170
In case of a login form, it would be easy because you could adjust the previous example to require

100
00:08:28,170 --> 00:08:33,960
CAPTCHA if the login attempts number is greater than the maximum number of attempts allowed.

101
00:08:36,450 --> 00:08:42,750
However, having to answer reCAPTCHA in such a frequently used thing like login form is well, super

102
00:08:42,750 --> 00:08:43,250
annoying.

103
00:08:48,850 --> 00:08:54,280
Of course, none of the mentioned techniques will prevent anyone from cracking passwords when the database

104
00:08:54,280 --> 00:08:54,790
leaks.

105
00:08:55,510 --> 00:08:59,380
If they know the hash, they can crack it locally without any limits.

106
00:08:59,380 --> 00:09:00,090
And CAPTCHAs.

107
00:09:01,060 --> 00:09:06,820
This is why it's very important to protect your database, protect your server, and use strong hashing

108
00:09:06,820 --> 00:09:08,170
algorithms for passwords.

109
00:09:08,500 --> 00:09:09,640
For example, decrypt.

110
00:09:12,940 --> 00:09:18,820
And you can use the discussed methods not only to secure a log in forms, but also for every identifiable

111
00:09:18,820 --> 00:09:23,380
resource for which you can determine a legitimate and illegitimate request.

112
00:09:25,750 --> 00:09:27,520
Let's say you have an online store.

113
00:09:28,870 --> 00:09:33,070
The order summary page needs order I.D. and the secret token, of course.

114
00:09:35,620 --> 00:09:41,440
You should look out the summary page for the given order and whenever there's too many attempts to access

115
00:09:41,440 --> 00:09:42,940
it with an invalid token.

116
00:09:44,560 --> 00:09:50,770
If your tokens are not trivial, you can use the slowing down method and lockouts that last only a couple

117
00:09:50,770 --> 00:09:51,460
of seconds.

118
00:09:52,480 --> 00:09:56,170
Such short limits will make the brute force attack completely inefficient.

119
00:09:56,410 --> 00:10:01,870
But at the same time, your illegitimate users will still be able to view those pages when they need.

120
00:10:06,330 --> 00:10:12,540
The brute force method can be also used to find files or directories on your server which exist but

121
00:10:12,540 --> 00:10:14,040
are not linked from anywhere.

122
00:10:14,940 --> 00:10:21,210
Or to discover URLs that rewrite to publicly accessible resources which were not meant to be accessed.

123
00:10:22,620 --> 00:10:28,230
This way an attacker can gain access to all unprotected files and pages which someone thought they are

124
00:10:28,230 --> 00:10:31,140
safe just by not linking to them from anywhere.

125
00:10:32,580 --> 00:10:38,640
This particular threat can be, of course, mitigated by properly protecting files on the server, which

126
00:10:38,640 --> 00:10:40,740
we talked about in one of the early chapters.

127
00:10:42,140 --> 00:10:46,600
And not publishing any website content that is not meant to be public.
