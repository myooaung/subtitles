1
00:00:06,050 --> 00:00:08,130
Let's start with something really easy.

2
00:00:10,200 --> 00:00:16,590
If you expect an integral numeric value like quantity, you can cast the input to an integer and you

3
00:00:16,590 --> 00:00:17,040
are done.

4
00:00:20,310 --> 00:00:25,500
To see if it really was an integer compared the result of casting with original input.

5
00:00:28,620 --> 00:00:32,370
The interval function will always return an integral number.

6
00:00:32,820 --> 00:00:40,560
If user enters 100, it will become an integral number 100, which then converted back to string will

7
00:00:40,560 --> 00:00:42,240
equal to the string 100.

8
00:00:42,510 --> 00:00:44,430
Exactly like the original one.

9
00:00:45,180 --> 00:00:52,410
If they enter 105, the function was three by the decimal part and after converting back to string it

10
00:00:52,410 --> 00:00:56,040
will now be 100 and will not match the original value.

11
00:00:57,330 --> 00:01:01,620
And if the user enters hello, the result will be number zero.

12
00:01:02,100 --> 00:01:08,550
And what's more important, if they enter something like one or one equals one to try ask you will injection.

13
00:01:08,910 --> 00:01:15,720
The final numeric value will be one as the function will return whatever seems like an integral number

14
00:01:15,840 --> 00:01:19,140
from the beginning of the string and skip the rest of the string.

15
00:01:19,140 --> 00:01:19,950
It's not a number.

16
00:01:24,330 --> 00:01:28,830
In JavaScript, you can cast the input to an integer with pass in function.

17
00:01:32,020 --> 00:01:36,940
And this would be the code to check how the customer value compares to the original input.

18
00:01:38,200 --> 00:01:44,110
In the first snippet we passed the form value to integer, and in the second snippet we converted back

19
00:01:44,110 --> 00:01:47,050
to string to compare with the original form value.

20
00:01:47,620 --> 00:01:52,720
If it's identical, then we know the original input was a valid integral number.

21
00:01:54,210 --> 00:02:02,160
The burst in function returns values very similar to interval in BHP with a difference in the last but

22
00:02:02,160 --> 00:02:02,940
third line.

23
00:02:04,530 --> 00:02:11,100
When the input doesn't seem like a number at all, it will return nine, which means not a number.

24
00:02:11,700 --> 00:02:12,870
BHP is interval.

25
00:02:12,870 --> 00:02:15,120
The function returns zero in this case.

26
00:02:17,030 --> 00:02:22,010
And when you finally have the value as an integral number, you can put it anywhere, including the

27
00:02:22,010 --> 00:02:25,140
database query with an numeric value.

28
00:02:25,160 --> 00:02:29,660
You will not get any ESC, you will inject that and the no cross-site scripting code will run.

29
00:02:30,620 --> 00:02:35,840
It's one of those scenarios where a properly validated value does not need to be further sanitized.

30
00:02:38,910 --> 00:02:44,130
So now the data is technically safe to use in your app, but is it really safe for your app?

31
00:02:44,880 --> 00:02:46,770
Well, it can still cause troubles.

32
00:02:47,370 --> 00:02:52,740
What will happen if a user enters a negative number, for example, a negative quantity in the shopping

33
00:02:52,740 --> 00:02:58,290
cart or way to large number like 2000 as persons age?

34
00:02:59,490 --> 00:03:00,840
If that's not allowed.

35
00:03:01,080 --> 00:03:06,420
You may want to add some extra logic to prevent users from entering numbers less than zero.

36
00:03:08,030 --> 00:03:09,740
Or within a reasonable range.

37
00:03:12,160 --> 00:03:14,050
And do the same on the front end.

38
00:03:14,710 --> 00:03:21,700
If you use 80 mil five input type of number, you can use Min and Monk's attributes and remember to

39
00:03:21,700 --> 00:03:24,370
amend your JavaScript validation mechanism to.

40
00:03:28,240 --> 00:03:32,290
Just remember the front and the validation is only for usability purposes.

41
00:03:32,980 --> 00:03:37,780
These attributes can be manipulated in the browser and the whole mechanism will be bypassed.

42
00:03:38,350 --> 00:03:41,620
It's only to help legitimate users provide a valid input.

43
00:03:42,220 --> 00:03:45,280
The final validation must be done on the server.

44
00:03:49,130 --> 00:03:55,850
If you expect floating point numbers, you can use float value or typecasting to float the same way

45
00:03:55,850 --> 00:03:56,990
as with integers.

46
00:03:59,840 --> 00:04:03,980
However, not that we thought numbers, it may be a little bit more tricky.

47
00:04:03,980 --> 00:04:06,470
So this method will not always work well.

48
00:04:07,820 --> 00:04:13,760
First, in some cultures, people use comma to separate the decimal part, not the dot, which is expected

49
00:04:13,760 --> 00:04:15,020
by programming languages.

50
00:04:16,430 --> 00:04:18,140
Some people separate thousands.

51
00:04:19,340 --> 00:04:22,310
Also, floating point numbers have limited precision.

52
00:04:22,520 --> 00:04:28,130
So if you need a lot of digits in the decimal part, simply casting two floating point number may produce

53
00:04:28,130 --> 00:04:29,480
unexpected results.

54
00:04:31,720 --> 00:04:38,140
So instead of casting to float, you can try to treat a number as a string and simply remove illegal

55
00:04:38,140 --> 00:04:41,260
characters, which is would be BP's filters.

56
00:04:41,260 --> 00:04:42,070
Sanitize number.

57
00:04:42,070 --> 00:04:42,970
Float does.

58
00:04:45,030 --> 00:04:47,610
Regular expressions are ideal for that.

59
00:04:47,970 --> 00:04:55,260
And in BJP there are two very important functions or replace that you can use to filter out the illegal

60
00:04:55,260 --> 00:04:58,650
characters and then compare the result with the original string.

61
00:04:58,680 --> 00:05:06,090
If you need and break match that you can use to see if the original string matches the pattern.

62
00:05:06,450 --> 00:05:09,120
This function will return true or false.

63
00:05:10,590 --> 00:05:11,610
See the example.

64
00:05:14,970 --> 00:05:21,660
It will return true if the string contains only digits, commas and dots, but it still doesn't yet

65
00:05:21,660 --> 00:05:28,530
mean we'll have a legitimate floating point number, because if user enters this, it's still unusable

66
00:05:28,530 --> 00:05:29,520
in calculations.

67
00:05:31,020 --> 00:05:36,090
That's why we might need to create a slightly more complicated procedure to transform the string to

68
00:05:36,090 --> 00:05:38,850
get what we need, let's build the function.

69
00:05:40,940 --> 00:05:46,400
We'll start with removing all illegal characters from the string using bread replace method.

70
00:05:47,090 --> 00:05:51,530
Illegal characters would be everything apart of digits, comma and the dot.

71
00:05:53,110 --> 00:05:59,080
Then we replace all commas with dots because we eventually need a dot as a decimal part separator.

72
00:06:01,020 --> 00:06:06,690
Then we need to remove any potential trailing duds, which wouldn't make sense for which we'll use our

73
00:06:06,690 --> 00:06:07,500
trim function.

74
00:06:10,640 --> 00:06:14,450
Then we remove all dots, but last with their regular expression.

75
00:06:15,230 --> 00:06:23,120
The expression syntax is as follows a literal dot and then the group with positive look ahead operator

76
00:06:24,380 --> 00:06:27,590
that looks for any character followed by a literal dot.

77
00:06:31,140 --> 00:06:37,200
At the very end, if we end up with a string that starts with a dot like dot five, which might actually

78
00:06:37,200 --> 00:06:42,360
be a short term for 0.5, then we precede the string with zero.

79
00:06:45,470 --> 00:06:48,410
Now we pretty much have a valid floating point number.

80
00:06:49,970 --> 00:06:55,190
It is now a valid floating point number that can fit the decimal food in database or can be used in

81
00:06:55,190 --> 00:06:56,030
calculations.

82
00:06:56,630 --> 00:07:02,030
But it's worth pointing out that because we transformed it, it's not necessarily what the user actually

83
00:07:02,030 --> 00:07:03,080
wanted to enter.

84
00:07:04,010 --> 00:07:09,080
If it's only possible, it would be very good to confirm with the user the transform number.

85
00:07:10,730 --> 00:07:12,980
But that's the characteristic of such numbers.

86
00:07:13,400 --> 00:07:20,810
The same would be if you use typecasting the initial idea it will return 100 because comma is not a

87
00:07:20,810 --> 00:07:22,850
valid character in floating point numbers.

88
00:07:23,090 --> 00:07:31,250
So the comma and the rest of the string is trimmed specifically in beach B, your best bet might actually

89
00:07:31,250 --> 00:07:35,780
be the filter, which will correctly output 100,000.99.

90
00:07:36,110 --> 00:07:39,410
But this solution is not portable to JavaScript, unfortunately.

91
00:07:39,860 --> 00:07:42,740
So on the front end you would need the custom function anyway.

92
00:07:44,990 --> 00:07:48,740
So let's start to put to JavaScript our validated float function.

93
00:07:49,940 --> 00:07:57,260
In JavaScript, the functions corresponding to be preg, replace and break match are simply string replace

94
00:07:57,260 --> 00:07:58,460
and string match.

95
00:08:01,340 --> 00:08:07,700
The difference is that we don't surround the regular expression with quotes, only with MM as less character.

96
00:08:08,780 --> 00:08:10,670
So this is how the function goes.

97
00:08:12,710 --> 00:08:19,550
First we check if the pasta value is an actual number, if its type is number and if it's finished.

98
00:08:21,010 --> 00:08:26,440
Because that would mean there's no point invalidating anything because we already have a flawed number,

99
00:08:26,620 --> 00:08:28,000
so we can simply return it.

100
00:08:29,610 --> 00:08:36,840
If it's not yet an actual offload, we go on, we explicitly convert it to string in case it came as

101
00:08:36,840 --> 00:08:37,830
some other type.

102
00:08:39,360 --> 00:08:41,580
Then we replace the illegal characters.

103
00:08:42,870 --> 00:08:48,210
No, the g flag in all the regular expressions in this function which was not needed when using B2B

104
00:08:48,240 --> 00:08:49,080
break replace.

105
00:08:51,230 --> 00:08:53,510
Then we replace all commas with notes.

106
00:08:54,140 --> 00:09:00,380
Here we use regular expression again because otherwise it would only replace the first occurrence and

107
00:09:00,380 --> 00:09:02,570
the replace all method in JavaScript.

108
00:09:02,690 --> 00:09:04,580
It's not yet widely supported.

109
00:09:07,550 --> 00:09:13,700
Then we had to change the stream call to regular expression as well because there is no equivalent to

110
00:09:13,700 --> 00:09:15,050
this function in JavaScript.

111
00:09:15,800 --> 00:09:20,840
The regular expression says the character one or more at the end of a string.

112
00:09:21,350 --> 00:09:23,750
And such occurrences are simply removed.

113
00:09:27,090 --> 00:09:32,040
Then we use the same regular expression as in BHP version that removes all dots.

114
00:09:32,040 --> 00:09:32,790
But the last.

115
00:09:35,050 --> 00:09:41,800
And finally we use a handy start with function to detect if a string starts with dot and if yes, we

116
00:09:41,800 --> 00:09:42,970
prepared it with zero.

117
00:09:46,490 --> 00:09:52,340
Also on the front end, you can help your users to enter a valid floating point number by using a step

118
00:09:52,340 --> 00:09:54,620
attribute for a number input type.

119
00:09:55,910 --> 00:10:00,650
This setting would not let through any number with more than two decimal places.

120
00:10:03,620 --> 00:10:08,660
Finally, your requirements may vary, so you may need a slightly different approach to what we just

121
00:10:08,660 --> 00:10:08,990
did.

122
00:10:09,830 --> 00:10:15,530
And often you may want to ask the user to confirm the input data after you transform it to ensure it

123
00:10:15,530 --> 00:10:17,330
reflects the user's intention.

124
00:10:19,060 --> 00:10:22,720
See how much attention it needed to ensure a number is the number.
