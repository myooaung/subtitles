WEBVTT
1
00:00:05.270 --> 00:00:09.200
In JavaScript, there's a lot to be done to make this site secure.

2
00:00:09.740 --> 00:00:15.680
I will now present only a couple of recommendations that are specific to JavaScript exclusively, but

3
00:00:15.680 --> 00:00:21.440
follow the rest of the course to learn much more about securing the JavaScript code, especially what

4
00:00:21.440 --> 00:00:23.150
the Cross-Site Scripting Chapter.

5
00:00:24.590 --> 00:00:27.290
First, a little recap on third party components.

6
00:00:27.860 --> 00:00:32.300
Please don't use libraries, plugins and third party scripts for everything.

7
00:00:32.840 --> 00:00:36.590
People use them often to save some time without thinking too much.

8
00:00:37.160 --> 00:00:40.640
Do as much as you can on your own, if only it's feasible.

9
00:00:41.540 --> 00:00:47.630
The external scripts can be poorly coded, and most of them probably have some security holes, like

10
00:00:47.630 --> 00:00:48.860
pretty much every program.

11
00:00:49.820 --> 00:00:55.880
Even if they are actively maintained and get security patches, you will need to monitor that and actively

12
00:00:55.880 --> 00:00:59.960
update the scripts on your site, which I know is often a utopia.

13
00:01:01.730 --> 00:01:08.000
Your scripts may also contain security holes, but open source programs are used by many, and it's

14
00:01:08.000 --> 00:01:13.010
much easier for attackers to monitor the security of a small number of popular scripts.

15
00:01:13.190 --> 00:01:15.110
You'll be able to attack more sites.

16
00:01:17.170 --> 00:01:23.020
But if you build your site from the ground on some framework, do use its methods whenever possible.

17
00:01:23.410 --> 00:01:28.330
There's no point in not doing so because usually they are well written and tested.

18
00:01:30.070 --> 00:01:30.600
Of course.

19
00:01:30.610 --> 00:01:33.190
Monitor these frameworks or libraries development.

20
00:01:33.820 --> 00:01:39.550
Keeping an eye on one framework is not such demanding as monitoring a number of third party scripts

21
00:01:39.550 --> 00:01:40.990
unrelated to each other.

22
00:01:43.800 --> 00:01:50.370
Anyway always use only reliable popular software pieces which are widely used and thoroughly tested

23
00:01:50.370 --> 00:01:56.100
by thousands of users and ideally actively maintained and well documented.

24
00:01:57.270 --> 00:01:59.940
Download the code from trusted sources only.

25
00:02:01.390 --> 00:02:02.080
If he wants to.

26
00:02:02.080 --> 00:02:03.700
Houghtaling the code from Sydney.

27
00:02:04.060 --> 00:02:06.490
Do it only if you trust this Sydney.

28
00:02:07.180 --> 00:02:13.000
Because if you include any scripts from the external server, when that server gets hacked, your site

29
00:02:13.000 --> 00:02:15.100
would likely run unauthorized code.

30
00:02:16.770 --> 00:02:22.740
You can protect your site by using SAP resource integrity as described earlier, but it's far easier

31
00:02:22.740 --> 00:02:25.560
to just run scripts hosted on your own server.

32
00:02:31.990 --> 00:02:40.150
Don't use evil function and don't use evil like behavior of other functions like set timeout or set

33
00:02:40.150 --> 00:02:45.400
interval eval function allows you to run code written as a string.

34
00:02:46.030 --> 00:02:48.130
This code will actually log the message.

35
00:02:48.220 --> 00:02:52.600
Even though the instruction is in a string, it's surrounded by double quotes.

36
00:02:54.730 --> 00:03:00.580
The security risk is, of course, when something unintended will get into the string path to evil function.

37
00:03:01.700 --> 00:03:08.120
If the string will read something from the URL or from document object model, it poses a massive security

38
00:03:08.120 --> 00:03:13.640
risk because the attacker will be able to run any code that they are able to put in a place from which

39
00:03:13.640 --> 00:03:15.050
evaluates the data.

40
00:03:16.220 --> 00:03:17.300
See this example?

41
00:03:23.850 --> 00:03:30.390
If by exploiting some other vulnerability on your site, the attacker is able to modify the attribute.

42
00:03:30.660 --> 00:03:31.980
Your site is lost.

43
00:03:38.330 --> 00:03:45.070
You can do pretty much everything without having to use this evil, evil function in this code.

44
00:03:45.080 --> 00:03:48.710
A simple eve or switch statement will make the code secure.

45
00:03:53.290 --> 00:03:59.920
Another scenario when you might wants to use evolve is to transport data, JavaScript, arrays or objects.

46
00:04:00.850 --> 00:04:07.360
But for this it's recommended to use JSON back of the object using data on string defined methods.

47
00:04:11.500 --> 00:04:14.530
And unpack it using Jason Paris method.

48
00:04:19.750 --> 00:04:24.760
Similar behavior to evolve can be observed with set timeout and set interval functions.

49
00:04:25.270 --> 00:04:25.930
See this?

50
00:04:29.950 --> 00:04:36.730
The script reads the username from Dom and because it says map, it will logical or math after 1/2.

51
00:04:37.210 --> 00:04:41.980
Despite the console.log method, call is a string surrounded by double quotes.

52
00:04:44.360 --> 00:04:47.840
When it comes to these methods, either use a callback function.

53
00:04:52.010 --> 00:04:56.180
Or the code he wants to run in a closure, an anonymous function.

54
00:05:02.340 --> 00:05:04.890
Finally, the JavaScript code is public.

55
00:05:05.100 --> 00:05:11.580
No matter how hard you will try to conceal or obfuscate it, it can always be reverse engineered and

56
00:05:11.580 --> 00:05:12.240
analyzed.

57
00:05:14.340 --> 00:05:18.690
So don't rate any encryption or security algorithms in JavaScript.

58
00:05:19.050 --> 00:05:22.710
Your algorithms will be public, which breaks the whole system.

59
00:05:25.270 --> 00:05:30.930
Of course, magnify your JavaScript for performance and may be to keep away script kiddies.

60
00:05:31.540 --> 00:05:34.270
But be aware it's not any real protection.

61
00:05:36.160 --> 00:05:42.280
You can try to keep some of your code private by moving parts of the logic to backend code and communicate

62
00:05:42.280 --> 00:05:44.470
the frontend with backend asynchronously.

63
00:05:44.950 --> 00:05:48.040
But it will most probably have performance implications.
