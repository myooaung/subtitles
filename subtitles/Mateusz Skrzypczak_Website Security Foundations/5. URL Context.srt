1
00:00:05,230 --> 00:00:11,250
Now is the time to dedicate some attention to your oral context, which kind of sits across all contexts,

2
00:00:11,260 --> 00:00:17,110
because it can be found as a sub context within HTML, CSS or JavaScript contexts.

3
00:00:18,220 --> 00:00:25,210
In DML, it's usually within an ADF or source attributes for links, images, frames, etc..

4
00:00:26,230 --> 00:00:31,120
Hopefully you don't let an arbitrary user input for resource attribute off script tags.

5
00:00:32,230 --> 00:00:38,320
In CSIS, we find useful context when setting background image URLs with the URL function.

6
00:00:39,100 --> 00:00:45,190
In JavaScript, we can enter URL context, for example, when constructing DOM elements or when reading

7
00:00:45,190 --> 00:00:46,930
or changing the location object.

8
00:00:51,000 --> 00:00:53,220
In case of images or style sheets.

9
00:00:53,460 --> 00:00:57,510
It's obvious you are starting with JavaScript is not expected.

10
00:00:58,290 --> 00:01:00,630
No developer will ever need to do this.

11
00:01:01,080 --> 00:01:05,250
This is why usually browsers will not run any script placed this way.

12
00:01:07,420 --> 00:01:13,360
But there are legitimate use cases for a link with a script in the nature of attributes, and it's very

13
00:01:13,360 --> 00:01:14,160
common scenario.

14
00:01:14,170 --> 00:01:16,240
So these scripts will definitely run.

15
00:01:16,510 --> 00:01:22,210
Although it is a best practice and there are much better ways to run scripts, for example, using buttons

16
00:01:22,210 --> 00:01:23,410
and even listeners.

17
00:01:25,650 --> 00:01:31,590
It may be a little bit more of code, but using buttons instead of links is more semantically correct

18
00:01:31,800 --> 00:01:39,180
and helps accessibility while using even this than allow separation of HTML and the JavaScript code

19
00:01:39,570 --> 00:01:41,550
and makes the code maintenance easier.

20
00:01:43,830 --> 00:01:49,380
Anyway, the whole point is that browsers will not be able to proactively filter the contents of each

21
00:01:49,530 --> 00:01:50,160
attribute.

22
00:01:50,910 --> 00:01:55,830
In such cases you need to pay special attention because even when you encode special charges in the

23
00:01:55,830 --> 00:02:01,350
string, a script still can slip through and get executed when you click on the link.

24
00:02:04,310 --> 00:02:10,490
This code contains escaped single quotes but will actually work and the document body will disappear

25
00:02:10,490 --> 00:02:11,660
when the link is clicked.

26
00:02:16,130 --> 00:02:20,990
In CSIS, you enter your context when you need to place an image in background.

27
00:02:21,590 --> 00:02:26,660
For example, there are design cases in which it's easier to put the image in background rather than

28
00:02:26,660 --> 00:02:28,550
as an image element.

29
00:02:30,530 --> 00:02:36,050
The problem here is, of course, the JavaScript protocol similarity to image, source and link.

30
00:02:36,410 --> 00:02:43,370
If in HTML such you are mixed completely no sense for background images and could only be a source of

31
00:02:43,370 --> 00:02:44,000
problems.

32
00:02:44,420 --> 00:02:51,620
So usually they will be ignored by browsers, but some older or less proactive browser might actually

33
00:02:51,620 --> 00:02:53,270
execute the code that follows.

34
00:02:54,740 --> 00:03:00,710
Interestingly, here, in this context, it would not be enough to check whether the user doesn't start

35
00:03:00,710 --> 00:03:06,520
with JavaScript because someone can type in the middle of the empty comment section and it will pass

36
00:03:06,530 --> 00:03:07,070
the check.

37
00:03:08,960 --> 00:03:14,240
It would also not be enough to check whether the you were starts with slash in case of reductive URLs

38
00:03:14,660 --> 00:03:17,810
because the common section could be as well starting the string.

39
00:03:20,180 --> 00:03:26,040
So whenever you need to use your URL coming from user in an HDMI tag or as a C says bigger than the

40
00:03:26,060 --> 00:03:30,100
image, you need to do a number of checks first.

41
00:03:30,110 --> 00:03:36,980
If you expect absolute paths, validate the protocol and the should the URL start with htp semicolon

42
00:03:36,980 --> 00:03:40,940
slash slash or htp s semicolon slash slash.

43
00:03:42,840 --> 00:03:48,120
Don't validate only for a heartbeat, but because it doesn't mean it will be the protocol.

44
00:03:48,870 --> 00:03:53,970
In this example, the user would need to exploit another vulnerability on your site and upload this

45
00:03:53,970 --> 00:03:57,660
file in the page directory, but it may be entirely possible.

46
00:04:00,190 --> 00:04:06,400
If you allow relative balance, make them absolute by depending with your st origin and if needed a

47
00:04:06,400 --> 00:04:07,030
base path.

48
00:04:08,110 --> 00:04:15,670
In this code we join all the parts using employed function protocol host based path, which is simply

49
00:04:15,670 --> 00:04:17,290
the current page directory here.

50
00:04:18,190 --> 00:04:22,150
Then we use connecting slash and append the user provided URL.

51
00:04:23,750 --> 00:04:29,330
To avoid a path traversal attack, which we'll discuss later in the course, will remove any potential

52
00:04:29,330 --> 00:04:32,750
chips to parent directories in the form of two dots and slash.

53
00:04:35,530 --> 00:04:42,220
Also via the URL to see if it meets your business logic, which means check if it appears to make sense

54
00:04:42,220 --> 00:04:43,210
where it is placed.

55
00:04:44,350 --> 00:04:50,290
For example, if you expect path to the static image, you might want to verify if the URL ends with

56
00:04:50,290 --> 00:04:52,330
the JPEG or something like that.

57
00:04:54,130 --> 00:05:00,310
Finally, ensure the URL is placed on page within quotes and most special chars are escaped.

58
00:05:02,320 --> 00:05:08,470
And if you place it as a background image and sure the value in say, the URL function is also quoted.

59
00:05:14,370 --> 00:05:17,400
Because you will often need to validate the URL on the frontend.

60
00:05:17,670 --> 00:05:20,670
Here are the corresponding code snippets in JavaScript.

61
00:05:22,760 --> 00:05:23,720
Here in this code.

62
00:05:23,720 --> 00:05:29,240
In the first snippet, we use match method on the string to check it against the regular expression,

63
00:05:30,920 --> 00:05:32,480
the joint method on the array.

64
00:05:38,600 --> 00:05:43,820
And the estimate, especially the charts which we defined earlier in this chapter, to escape the most

65
00:05:43,820 --> 00:05:47,470
special characters in both Estimable and Caesar's contexts.

66
00:05:53,010 --> 00:05:58,590
I intentionally don't want to give you a complete ready to use function because your requirements may

67
00:05:58,590 --> 00:05:59,100
differ.

68
00:06:00,150 --> 00:06:04,590
For example, you might want to accept mail to DEL or FTP protocols.

69
00:06:05,580 --> 00:06:10,350
You might want to use something else as a base path when changing the relative path to absolute path.

70
00:06:11,370 --> 00:06:13,410
You might need to do some additional checks.

71
00:06:18,700 --> 00:06:24,730
A totally different story is when you need to put some data in the URL, but in a query string like

72
00:06:24,730 --> 00:06:32,020
as a get parameter of value BHP role, you are in the code and you are alone called functions are meant

73
00:06:32,020 --> 00:06:33,880
to be used just in that case.

74
00:06:34,600 --> 00:06:39,100
Their purpose is to encode this string to make it safe to place in the get parameter.

75
00:06:42,680 --> 00:06:48,380
In our example, by using roll your own called method, we protect ourselves from a malicious delete

76
00:06:48,380 --> 00:06:53,930
parameter which would otherwise be appended as a query string parameter and possibly do some damage.

77
00:06:56,680 --> 00:06:58,750
What's the difference between those two functions?

78
00:06:59,770 --> 00:07:06,670
You are a land code and codes all non alphanumeric characters except dash, underscore and dot with

79
00:07:06,670 --> 00:07:09,490
a person sign followed by two hex digits.

80
00:07:10,300 --> 00:07:13,210
It also encodes spaces as plus signs.

81
00:07:15,730 --> 00:07:17,860
Roll your alarm code, on the other hand.

82
00:07:18,190 --> 00:07:25,540
And codes all non unfathomably characters except dash underscore dot and piled with the person sign

83
00:07:25,540 --> 00:07:27,280
followed by two digits.

84
00:07:28,030 --> 00:07:31,120
Spaces are also encoded to hexadecimal entity.

85
00:07:33,470 --> 00:07:39,050
Better to use rule your land code because it's compliant with RF C, which defines the generic syntax

86
00:07:39,050 --> 00:07:39,860
of your ice.

87
00:07:43,740 --> 00:07:47,880
The JavaScript corresponding method to roll your encode is encode.

88
00:07:47,890 --> 00:07:49,080
You are a component.

89
00:07:49,530 --> 00:07:52,350
However, those two are not exactly equivalent.

90
00:07:53,070 --> 00:08:00,200
To be more precise, speeches and coding leaves out only dashes underscores loads and styles, while

91
00:08:00,210 --> 00:08:06,570
JavaScript encoding leaves out also exclamation mark, star, single quote and round brackets.

92
00:08:07,710 --> 00:08:12,990
You can either fix the JavaScript function or the page function on the end.

93
00:08:12,990 --> 00:08:18,780
They suggest this code to fix the JavaScript function, and I'd rather go this way as the pitch b1 is

94
00:08:18,780 --> 00:08:19,890
RF C compliant.

95
00:08:23,150 --> 00:08:29,570
It runs the original method on the string and then using replace method, it includes the five remaining

96
00:08:29,570 --> 00:08:35,360
characters, exclamation mark, single quote left and right, parentheses and an asterisk.

97
00:08:36,380 --> 00:08:44,420
Using this method, you can safely exchange your encoded data between JavaScript and BHP and this is

98
00:08:44,420 --> 00:08:47,600
how you would use it to safely put the data in a get parameter.
