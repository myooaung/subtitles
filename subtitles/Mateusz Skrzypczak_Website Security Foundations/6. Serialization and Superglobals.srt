1
00:00:05,300 --> 00:00:13,130
BHP has two functions that let you encapsulate complex data like objects or arrays into a string and

2
00:00:13,130 --> 00:00:17,750
then revert the operation to get an object or array back from that string.

3
00:00:19,880 --> 00:00:26,300
That could be used, for example, to store the object or array in a database where it obviously can't

4
00:00:26,300 --> 00:00:28,400
be stored as a plain PDP object.

5
00:00:29,900 --> 00:00:35,720
The problem is that if your serialized data could be manipulated by any of the attack types, for example,

6
00:00:35,720 --> 00:00:41,420
as fuel injection and serializing, it could lead to direct execution of malicious code.

7
00:00:42,360 --> 00:00:48,300
If an attacker could modify or exchange their serialized object, they could potentially insert their

8
00:00:48,300 --> 00:00:51,570
own code, which will then run when you unsterilized it.

9
00:00:53,040 --> 00:01:00,510
Even BHP documentation advises to rather use JSON for converting complex type to strings by using JSON

10
00:01:00,510 --> 00:01:03,300
encode and the JSON decode functions.

11
00:01:04,230 --> 00:01:10,440
In many cases, that should work just fine, but if that's not an option for you, make sure you set

12
00:01:10,440 --> 00:01:14,940
the second optional parameter of unsterilized function allowed classes.

13
00:01:16,350 --> 00:01:22,620
In the first example, we don't allow any BHP class to get unsterilized, so this will work for arrays

14
00:01:22,620 --> 00:01:24,180
and simple objects only.

15
00:01:25,080 --> 00:01:27,990
And in this case we could as well just use JSON.

16
00:01:29,610 --> 00:01:36,750
The second example allows us to answer relies on the instances of my class and trusted class and the

17
00:01:36,750 --> 00:01:42,420
other potentially injected will be instantiated as BHP in complete class object.

18
00:01:47,930 --> 00:01:57,050
BHP has a set of very useful super globals, most frequently used being get post request files, cookie

19
00:01:57,050 --> 00:01:58,040
and session.

20
00:01:58,850 --> 00:02:05,120
So they include data coming with get methods, data coming with post method all the request variables,

21
00:02:05,420 --> 00:02:09,620
file upload variables, cookie data and session data.

22
00:02:11,060 --> 00:02:14,900
First of all, you should always wait for input in a proper super global.

23
00:02:15,260 --> 00:02:18,680
If you expect data sent with get the method use get.

24
00:02:19,160 --> 00:02:22,400
If you expect data with post method use post.

25
00:02:23,030 --> 00:02:25,760
Don't use request super global for convenience.

26
00:02:26,750 --> 00:02:32,600
Because someone may use an alternative methods to what you expect in order to bypass protection measures.

27
00:02:33,800 --> 00:02:40,430
Also, from all these super globals, you can put some trust only in data coming from one of them session.

28
00:02:41,090 --> 00:02:41,490
Why?

29
00:02:42,230 --> 00:02:47,930
Because session data is stored on the server, not in the browser, so it's not possible to alter it

30
00:02:47,930 --> 00:02:49,100
on the client side.

31
00:02:49,700 --> 00:02:54,860
In other words, only you put data there and it's only risky when you put there some data coming from

32
00:02:54,860 --> 00:02:56,960
the user without proper filtering.

33
00:02:58,430 --> 00:03:04,700
And the only think about sessions that should be stored in the browser is the session ID, but playing

34
00:03:04,700 --> 00:03:09,530
with it doesn't allow users to directly modify any data stored in sessions.

35
00:03:09,530 --> 00:03:10,220
Super global.

36
00:03:11,300 --> 00:03:15,290
Of course, fiddling with session IDs is a risk, but of other kinds.

37
00:03:15,710 --> 00:03:19,850
It may allow someone to steal this session or arrange a session with known ID.

38
00:03:20,630 --> 00:03:23,240
We'll talk about securing sessions later in the course.
