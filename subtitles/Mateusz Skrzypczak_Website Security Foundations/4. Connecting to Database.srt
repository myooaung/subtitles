1
00:00:05,830 --> 00:00:11,740
In early days, BHP had an extension with a set of functions for handling connections with MySchool

2
00:00:11,740 --> 00:00:12,460
databases.

3
00:00:13,450 --> 00:00:16,660
Names of all those functions were starting with my as well.

4
00:00:17,020 --> 00:00:25,630
For example, MySchool, Connect, MySchool query, etc. This extension has been removed from B7 in

5
00:00:25,630 --> 00:00:33,400
favour of to better, more sophisticated and thus secure techniques MySchool A and B speed data objects

6
00:00:33,670 --> 00:00:34,300
video.

7
00:00:36,430 --> 00:00:42,520
If you are used to the old MySchool extension, MySchool II would be a good choice for you because to

8
00:00:42,520 --> 00:00:44,680
some extent it follows that syntax.

9
00:00:47,860 --> 00:00:48,700
In all examples.

10
00:00:48,700 --> 00:00:53,380
In this course I will use DBC variable as the database connection handle.

11
00:00:54,890 --> 00:00:59,680
As you see, first we have an eye to function names as they are almost identical.

12
00:00:59,950 --> 00:01:01,420
To make the transition easier.

13
00:01:03,160 --> 00:01:09,730
Also, we select the database in the MySchool Connect function instead of having to call another function.

14
00:01:11,590 --> 00:01:18,160
And in the MySchool I query function, we need the first argument which is the database connection handle

15
00:01:19,690 --> 00:01:22,960
the rest in this simple example remains unchanged.

16
00:01:25,450 --> 00:01:33,520
But I personally got used to use PDO, while MySchool eight supports both object oriented and procedural

17
00:01:33,520 --> 00:01:34,390
programming style.

18
00:01:34,600 --> 00:01:37,360
Video supports only the object oriented one.

19
00:01:39,630 --> 00:01:45,270
For more detailed comparison between MySchool and BDO, see the BHP documentation.

20
00:01:47,400 --> 00:01:52,920
But don't worry if you don't feel comfortable with OLP, which stands for object oriented programming.

21
00:01:53,850 --> 00:01:56,460
If only you can understand how it generally works.

22
00:01:56,730 --> 00:01:59,520
It will not be much different from procedural style.

23
00:02:01,170 --> 00:02:08,940
The general idea of Obi is that we create a so-called object based on the class, which is simply a

24
00:02:08,940 --> 00:02:10,230
template for objects.

25
00:02:12,000 --> 00:02:14,160
The object has some characteristics.

26
00:02:14,310 --> 00:02:19,860
We call them properties and there are certain things that we can do with it.

27
00:02:20,310 --> 00:02:22,020
These are methods of this object.

28
00:02:22,970 --> 00:02:27,650
In other words, they are functions defined in the object that can do something.

29
00:02:27,680 --> 00:02:34,940
Once the object has been created, the object methods are called very similar to normal function calls.

30
00:02:36,630 --> 00:02:41,760
So the procedural MySchool, an example can be easily converted to old code.

31
00:02:45,860 --> 00:02:48,770
Instead of calling my school, I connect function.

32
00:02:48,980 --> 00:02:52,460
We create a new object of my escuela class.

33
00:02:53,240 --> 00:03:00,470
My escuela is a class a template for our object and DBC is the object we are creating.

34
00:03:02,210 --> 00:03:05,990
We passed the database credentials directly during object creation.

35
00:03:07,160 --> 00:03:14,720
Then, instead of calling my school a query or my school, I fetch us doc functions we call query method

36
00:03:14,720 --> 00:03:22,220
of the object we created and the fetch ask method of the query result object which is returned by the

37
00:03:22,220 --> 00:03:23,030
query method.

38
00:03:25,880 --> 00:03:31,460
In query method we don't need to pass the database connection handle anymore as the method will use

39
00:03:31,460 --> 00:03:33,050
the one from the object.

40
00:03:36,340 --> 00:03:40,300
And this is how PDR looks like compared to object oriented mice.

41
00:03:40,300 --> 00:03:40,930
Scuola di.

42
00:03:43,910 --> 00:03:45,050
Not too different, right?

43
00:03:45,980 --> 00:03:53,390
In the first parameter, when creating the PDO object, we specified the database type Michael and then

44
00:03:53,390 --> 00:03:56,210
after column the host and database name.

45
00:03:58,830 --> 00:04:06,210
PDL has only one method for fetching a single row fetch and to get the associative array we use a PD

46
00:04:06,210 --> 00:04:07,860
l fetch as a constant.

47
00:04:11,020 --> 00:04:15,280
When setting up a database connection with either MySchool II or PTO.

48
00:04:15,640 --> 00:04:18,640
There's a couple of things to remember for security reasons.

49
00:04:19,960 --> 00:04:24,610
First, it's a good idea to catch any potential database connection error.

50
00:04:25,390 --> 00:04:30,490
Remember that it can be a completely separate server, so something may interrupt the connection.

51
00:04:31,450 --> 00:04:36,910
When using PDO, you can simply wrap the connection set up with a tri card statement.

52
00:04:38,530 --> 00:04:45,070
In this code, everything we wrote so far has been put in a tri book and after it we are catching any

53
00:04:45,070 --> 00:04:46,780
potential PDO exception.

54
00:04:47,650 --> 00:04:53,410
If it was thrown, we print out a message to the user, write the detailed database error message to

55
00:04:53,410 --> 00:04:55,600
the error log and quit the script.

56
00:04:56,800 --> 00:05:03,040
So now your site will not spit out errors when the connection fail, but rather display something user

57
00:05:03,040 --> 00:05:06,010
friendly that does not disclose too much information.

58
00:05:08,030 --> 00:05:11,780
BDO can provide even more information if we ask it to do so.

59
00:05:12,440 --> 00:05:20,060
When creating a video object, we can add a fourth attribute the settings array and set the error remote

60
00:05:20,090 --> 00:05:21,830
to error mode exception.

61
00:05:22,670 --> 00:05:26,690
If we don't use this setting video will only log the error code.

62
00:05:27,170 --> 00:05:32,060
But when we do, we'll get also more detailed error information with stack trace.

63
00:05:32,420 --> 00:05:36,080
That could be really helpful in finding the bug to have it quickly fixed.

64
00:05:37,630 --> 00:05:38,710
One more reminder.

65
00:05:39,010 --> 00:05:41,440
Remember to properly protect your log file.

66
00:05:41,890 --> 00:05:44,520
Use permissions not higher than 60400.

67
00:05:45,040 --> 00:05:48,050
Please refer to the chapter about protecting files on the server.

68
00:05:48,160 --> 00:05:50,260
If you need to know how permissions work.

69
00:05:53,690 --> 00:05:59,150
Second, to mitigate the risk of squirrel injection attack, you should always defined the character

70
00:05:59,150 --> 00:06:02,480
encoding, even if it's the standard UTF eight.

71
00:06:03,380 --> 00:06:08,240
There are documented injection methods that take advantage of non Unicode character sets.

72
00:06:09,450 --> 00:06:15,120
In PDL, it should be done during object creation in the same place where we specify the host and the

73
00:06:15,120 --> 00:06:16,020
database name.

74
00:06:18,670 --> 00:06:19,270
In my work.

75
00:06:19,270 --> 00:06:23,470
You allow the unit to run this function right after creating the connection.

76
00:06:29,040 --> 00:06:35,160
Prepared statements is a method of building a school query that is safe against SQL injection attacks.

77
00:06:35,940 --> 00:06:43,320
The idea behind prepared statements is that the query structure and input data are kept separate, so

78
00:06:43,320 --> 00:06:46,680
nothing in the input data can affect the query structure.

79
00:06:47,430 --> 00:06:55,140
We'll be talking about it in details in as index and chapter, PDO as a feature which is on by default,

80
00:06:55,680 --> 00:07:01,290
which emulates the prepared statements in case the database engine behind or does not support it.

81
00:07:02,430 --> 00:07:08,220
It's generally means it will use a kind of the old might ask you whether the real escape string method

82
00:07:08,400 --> 00:07:14,880
to build the whole query on b level, which of course may not be equally safe as using prepared statements

83
00:07:14,880 --> 00:07:16,440
on database engine level.

84
00:07:18,450 --> 00:07:25,080
So when using PDO, it's strongly recommended that you disable emulation of prepared statements by setting

85
00:07:25,080 --> 00:07:28,050
the emulate preparers attribute to false.

86
00:07:29,470 --> 00:07:36,060
Now PDL will always try to use the database internal methods of preparing statements and only fall back

87
00:07:36,060 --> 00:07:38,070
to emulation for those queries.

88
00:07:38,250 --> 00:07:40,530
The database engine cannot prepare.

89
00:07:42,280 --> 00:07:43,240
When using a minus.

90
00:07:43,240 --> 00:07:46,390
Q Ally, you don't need to do anything as Mike.

91
00:07:46,390 --> 00:07:49,090
You allow he doesn't emulate prepared statements.

92
00:07:52,410 --> 00:07:58,350
Last in BiDil, there's a feature called Persistent Connection, which is meant to improve the script

93
00:07:58,350 --> 00:08:04,170
performance by creating only one connection with database server and maintaining it for the time of

94
00:08:04,170 --> 00:08:05,220
script execution.

95
00:08:05,940 --> 00:08:11,760
So the connection is reused for multiple queries to avoid calling the database server again and again.

96
00:08:13,050 --> 00:08:18,450
However, this feature can cause you some troubles and be a source of errors in case your script would

97
00:08:18,450 --> 00:08:21,420
die for whatever reason with an open connection.

98
00:08:22,830 --> 00:08:28,470
So your recommendation is to use it only if the database connection is the main performance problem.

99
00:08:29,010 --> 00:08:35,130
And I really mean connection, not a database query, because usually it's asking with a query that

100
00:08:35,130 --> 00:08:36,250
needs to be optimized.

101
00:08:36,390 --> 00:08:38,070
Not that the connection itself.

102
00:08:41,810 --> 00:08:48,560
Contrary to PDL, MySchool has built in methods to cope with tight scripts and it will automatically

103
00:08:48,560 --> 00:08:49,850
do the cleanup for you.

104
00:08:50,660 --> 00:08:56,600
So when using my skill with I, in most cases you can leave the default setting, which is persistent

105
00:08:56,600 --> 00:08:57,920
connections turned on.

106
00:08:58,910 --> 00:09:05,450
In fact, in my SKU array, this behavior can be changed in any file only, which means in the main

107
00:09:05,450 --> 00:09:12,290
configuration file you cannot switch it on or off on demand with per directory, config files or any

108
00:09:12,290 --> 00:09:13,040
set function.

109
00:09:13,550 --> 00:09:15,740
So you may not be able to change it at all.

110
00:09:16,520 --> 00:09:21,950
Anyway, if you are able to manage the INI file and want to change the default behavior, this is what

111
00:09:21,950 --> 00:09:22,530
you need there.
