WEBVTT
1
00:00:06.540 --> 00:00:09.510
The path traversal or directory traversal.

2
00:00:10.020 --> 00:00:15.540
Local file inclusion and remote file inclusion are all attacks of the same family.

3
00:00:15.960 --> 00:00:20.190
Their purpose is to access a file from other location than expected.

4
00:00:21.030 --> 00:00:26.100
The mitigation methods are roughly the same for all three, so we will discuss them altogether.

5
00:00:28.320 --> 00:00:33.960
The path traversal is a type of attack in which a user gains access to files in other locations on the

6
00:00:33.960 --> 00:00:37.770
server than intended by modifying the path to the file.

7
00:00:39.120 --> 00:00:40.140
See these example.

8
00:00:42.250 --> 00:00:48.640
The code includes a file based on the contents of the T variable when t is zero one.

9
00:00:49.030 --> 00:00:53.590
The included file will be 01. BHP from the articles directory.

10
00:00:55.940 --> 00:01:02.240
In the second example, someone exploited the system by preceding the file name with dot, dot, dot,

11
00:01:02.240 --> 00:01:04.900
dot slash and the file name is config.

12
00:01:04.910 --> 00:01:11.930
Instead of an article, add in the fact the contents of the config BHP file if only it exists there

13
00:01:11.930 --> 00:01:12.740
is displayed.

14
00:01:15.530 --> 00:01:19.760
The same type of attack can be conducted when uploading or deleting a file.

15
00:01:20.300 --> 00:01:23.630
In other words, something might be put in a place where it shouldn't be.

16
00:01:23.870 --> 00:01:30.140
Or something unintended might get deleted if only a user will be able to somehow influence the target

17
00:01:30.140 --> 00:01:30.500
path.

18
00:01:34.020 --> 00:01:39.900
But traversal attack is often similar to local file inclusion vulnerability, which is when someone

19
00:01:39.900 --> 00:01:43.770
is able to include the file from the server which they shouldn't have access to.

20
00:01:46.360 --> 00:01:54.160
In this example, again, we expect an article ID to provide to the include function, but an attacker

21
00:01:54.160 --> 00:01:59.410
is able to include the file from admin directory which could potentially give them an access to some

22
00:01:59.410 --> 00:02:03.160
admin tools if the file itself is not properly protected.

23
00:02:05.880 --> 00:02:12.060
The remote find inclusion is a vulnerability in which an attacker is able to include the file from another

24
00:02:12.060 --> 00:02:12.630
server.

25
00:02:15.110 --> 00:02:21.410
The security problem here is that the PDP code hosted on another server will be executed on the victim's

26
00:02:21.410 --> 00:02:24.290
server on the same privileges as local files.

27
00:02:24.770 --> 00:02:27.320
So the remote file could do pretty much everything.

28
00:02:27.650 --> 00:02:29.060
This is really serious.

29
00:02:31.940 --> 00:02:34.580
So how do you protect against all of these attacks?

30
00:02:36.020 --> 00:02:39.170
There is a number of functions in the BGP which are dangerous.

31
00:02:39.350 --> 00:02:44.240
For example, include require file, get contents or read file.

32
00:02:45.200 --> 00:02:49.640
They are dangerous because with them it's possible to access any file on the server.

33
00:02:49.910 --> 00:02:51.770
Also those outside the Webroot.

34
00:02:54.090 --> 00:03:00.030
So when you don't expect any path, but only if file name, simply use the base name function.

35
00:03:02.620 --> 00:03:08.230
When including a file, especially when the path elements are allowed, always start with some defined

36
00:03:08.230 --> 00:03:09.010
local path.

37
00:03:11.540 --> 00:03:18.710
Either use document root to start from your sites webroot and then build the path or start with gets

38
00:03:18.710 --> 00:03:23.030
TWD function that will return the path of the current BHP file.

39
00:03:25.330 --> 00:03:31.120
If you accept the situation in which user specifies the path, not only a file name, you also needs

40
00:03:31.120 --> 00:03:32.970
to use the real path function.

41
00:03:33.970 --> 00:03:40.180
It resolves all directory changes and symbolic readings and returns the final canonical path name.

42
00:03:43.390 --> 00:03:48.220
You can use it to check if the actual path is the same as the path provided by user.

43
00:03:55.560 --> 00:04:00.930
The real function will help you fend off attacks trying to go up your directory tree.

44
00:04:01.770 --> 00:04:07.830
But someone might wants to go down and get access to nested folders which they are not supposed to access.

45
00:04:08.430 --> 00:04:09.480
See the example.

46
00:04:10.890 --> 00:04:12.780
This is a file in folder structure.

47
00:04:13.920 --> 00:04:20.610
The Bolt BHP column, BHP and group BHP files are drawings of the respective geometric figures.

48
00:04:21.930 --> 00:04:26.010
The draw BHP file is the one that includes any of those three.

49
00:04:29.100 --> 00:04:31.950
The code inside looks just like an example before.

50
00:04:33.840 --> 00:04:42.120
First it builds the include path based on the current directory requested file name and BGP extension

51
00:04:43.650 --> 00:04:49.380
and then compares it with the real path result to ensure someone is not trying to access the file from

52
00:04:49.380 --> 00:04:51.090
outside of the current directory.

53
00:04:52.500 --> 00:04:56.460
As a result, it includes a requested shape if only the file exists.

54
00:04:57.990 --> 00:05:02.730
So the request shown that the location bar above the code would include both P2P.

55
00:05:04.230 --> 00:05:09.990
But this would return an error as the cylinder B file doesn't exist.

56
00:05:12.340 --> 00:05:19.390
But now this would include the admin appeared to be fine from an inner directory which was never meant

57
00:05:19.390 --> 00:05:23.500
to be included there and may contain some confidential data or functions.

58
00:05:25.330 --> 00:05:31.720
And the real function will not help you here because the provided path is real, resolves to itself

59
00:05:31.900 --> 00:05:33.160
and is totally valid.

60
00:05:34.870 --> 00:05:41.310
You protect yourself from this way of traversal, you need to strictly validate the file names for potential

61
00:05:41.310 --> 00:05:45.630
inclusion or limit the source of inclusion.

62
00:05:49.870 --> 00:05:55.660
To validate the final aims for inclusion, we should have used a regular expression to filter out anything

63
00:05:55.660 --> 00:06:00.640
a part of, let's say, letters, 8% digits, underscores and the dashes.

64
00:06:02.720 --> 00:06:05.270
Or we could check the file name against the white list.

65
00:06:08.280 --> 00:06:10.440
But do not use file exists for that.

66
00:06:10.650 --> 00:06:15.810
As the private slash admin BHP file indeed exists, but we need to protect it.

67
00:06:18.170 --> 00:06:21.290
The second method would be to limit the source of inclusion.

68
00:06:21.920 --> 00:06:27.860
That is, to move the shapes definitions to a separate folder and define the base directory as this

69
00:06:27.860 --> 00:06:28.400
folder.

70
00:06:30.140 --> 00:06:34.940
So in draw BHP you change the first line, adding the shapes to the base path.

71
00:06:36.050 --> 00:06:41.210
With this set up, there will be no files inside the base directory, which you would not expect to

72
00:06:41.210 --> 00:06:42.080
be included there.

73
00:06:43.040 --> 00:06:48.470
And the real path function will keep protecting the inclusion system from someone trying to include

74
00:06:48.470 --> 00:06:50.960
anything from outside the shapes directory.

75
00:06:52.430 --> 00:06:56.840
And if there will be no nested folders there, you can use the base name function to.

76
00:07:01.410 --> 00:07:06.450
Finally, it's always a good idea to further validate the path according to your requirements.

77
00:07:08.110 --> 00:07:11.800
Take, for example, if the file name ends with an extension that you expect.

78
00:07:17.140 --> 00:07:23.140
Or in the example with shapes we had all our shapes name with their English names so we could verify

79
00:07:23.140 --> 00:07:32.050
if the requested name contains something as the letters and maybe dashes and reject if yes, be strict

80
00:07:32.050 --> 00:07:34.150
as possible with the validation process.

81
00:07:38.110 --> 00:07:43.780
You can also abandon the approach of expecting file, name or particular file and instead call for the

82
00:07:43.780 --> 00:07:48.190
resources ad by which you will get the path, for example, from database.

83
00:07:54.150 --> 00:07:59.610
The ID doesn't have to be numerical, of course, as that could allow anyone to easily access consecutive

84
00:07:59.610 --> 00:08:00.120
files.

85
00:08:00.960 --> 00:08:06.990
It can be a random token, a unique ID or something else, which would be random and unique.

86
00:08:08.610 --> 00:08:13.500
Of course, this court puts total trust in the process of inserting a record to the database.

87
00:08:14.520 --> 00:08:17.250
The paths stored in the database could be forged.

88
00:08:17.310 --> 00:08:18.600
If something goes wrong there.

89
00:08:19.050 --> 00:08:24.510
For example, if your site is vulnerable to skew with injection attacks, this is harder to achieve

90
00:08:24.510 --> 00:08:26.640
for an attacker, but still possible.

91
00:08:27.750 --> 00:08:32.850
That's why you still should do all the previously mentioned checks when you use the ID approach.

92
00:08:34.080 --> 00:08:35.130
Use base name.

93
00:08:35.130 --> 00:08:37.110
If only the file name is expected.

94
00:08:38.190 --> 00:08:39.540
Use base directory.

95
00:08:41.220 --> 00:08:43.860
Compare against the result of real path function.

96
00:08:45.340 --> 00:08:49.330
And to do all necessary validation before finally including the file.

97
00:08:53.070 --> 00:08:57.840
In this cold example, we don't expect the final name only, so we don't use baby's name.

98
00:08:58.860 --> 00:09:01.410
But we prepared the path with the base directory.

99
00:09:03.140 --> 00:09:06.920
And compared the full path against the result of real battle function.
