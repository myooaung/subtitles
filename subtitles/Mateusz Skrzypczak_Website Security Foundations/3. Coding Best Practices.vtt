WEBVTT
1
00:00:04.850 --> 00:00:09.770
If you follow the instructions, your WordPress powered site is already well protected.

2
00:00:10.430 --> 00:00:15.740
Now let's take a look at how to write your own code in your theme or plugin from the security perspective.

3
00:00:17.500 --> 00:00:20.800
You always need to check the permissions level of the current user.

4
00:00:21.070 --> 00:00:27.160
If some functionality is restricted to a certain role in WordPress, the permissions coming from having

5
00:00:27.160 --> 00:00:30.820
a specific role in the system are called capabilities.

6
00:00:31.870 --> 00:00:35.650
You can see the list of system rules and capabilities in the documentation.

7
00:00:37.690 --> 00:00:43.270
If there is a certain thing your theme or plugin can do, which should only be available to administrators,

8
00:00:43.600 --> 00:00:47.110
you need to check if the current user is an administrator or not.

9
00:00:47.710 --> 00:00:49.660
In WordPress, there's a function for that.

10
00:00:49.930 --> 00:00:52.660
Current user can see the example.

11
00:00:57.660 --> 00:01:03.390
The recommended approach is not to check the actual the roll, but the capability that is reserved for

12
00:01:03.390 --> 00:01:04.050
that role.

13
00:01:04.710 --> 00:01:08.040
That's why we don't verify if the user is an administrator.

14
00:01:08.340 --> 00:01:15.270
But if the user can manage options, that is change WordPress settings and by default only admins have

15
00:01:15.270 --> 00:01:16.230
this capability.

16
00:01:17.310 --> 00:01:22.920
So this effectively adds the action and the callback function only for people with admin role.

17
00:01:23.490 --> 00:01:27.630
No editor, subscriber or anonymous user will have access to it.

18
00:01:30.860 --> 00:01:35.990
You might also need to prevent anonymous users from accessing certain functionalities if they are restricted

19
00:01:35.990 --> 00:01:37.280
for logged in users.

20
00:01:37.850 --> 00:01:43.370
To do that, you would need to call the user locked in function, which returns true if the current

21
00:01:43.370 --> 00:01:46.040
person is logged in user of any role.

22
00:01:54.010 --> 00:01:58.450
WordPress has a set of built in functions for escaping and sanitizing data.

23
00:01:59.140 --> 00:02:05.590
Those which names start with sunny days actually transform the input by intensely filtering out certain

24
00:02:05.590 --> 00:02:10.030
characters or otherwise converting the input to meet the certain requirements.

25
00:02:12.050 --> 00:02:18.110
Those which names start with escape are mostly escaping the dangerous characters and are intended to

26
00:02:18.110 --> 00:02:20.270
protect the site from cross-site scripting.

27
00:02:21.170 --> 00:02:26.060
In fact, some of them use the HTML special charts function, which we already know.

28
00:02:26.430 --> 00:02:28.100
Plus some additional filtering.

29
00:02:29.870 --> 00:02:33.470
The full list of functions in each group are, of course, in the documentation.

30
00:02:36.020 --> 00:02:37.410
Let's see a couple of them.

31
00:02:39.240 --> 00:02:45.450
Sanitized title will transform the input into a slug that is a machine friendly representation of the

32
00:02:45.450 --> 00:02:46.530
original string.

33
00:02:46.860 --> 00:02:51.810
Only letters from A to Z digits, underscores and dashes.

34
00:02:52.950 --> 00:02:56.820
It will convert the accented characters to matching letters from A to Z.

35
00:02:57.600 --> 00:03:03.300
It's useful for sanitizing class names or URL parameters when you need the accented characters to be

36
00:03:03.300 --> 00:03:04.800
converted to playing charts.

37
00:03:06.000 --> 00:03:11.550
In this case, the Polish accented letters were correctly converted to corresponding plain letters.

38
00:03:14.020 --> 00:03:20.290
Sunny days is HTML class can also be used for sanitizing class names and it will only keep the letters

39
00:03:20.290 --> 00:03:25.210
A to Z, digits, underscores and dashes just like sanitized title.

40
00:03:25.810 --> 00:03:31.390
But I wouldn't use it to generate a class name from a human readable string because it will not bother

41
00:03:31.390 --> 00:03:36.400
to convert spaces into dashes and accented letters into plain letter counterparts.

42
00:03:36.760 --> 00:03:38.740
It will completely filter them out.

43
00:03:45.800 --> 00:03:53.540
Sunny days text field and sanitized text area field are useful for sanitising plain text input, single

44
00:03:53.540 --> 00:03:55.550
line and multi-line respectively.

45
00:03:57.050 --> 00:04:05.420
They will check for invalid Unicode characters, convert single angle brackets to entities, strip HTML

46
00:04:05.420 --> 00:04:10.760
tags, remove extra whitespace and strip octets.

47
00:04:16.750 --> 00:04:17.830
The WordPress Keys.

48
00:04:17.830 --> 00:04:22.060
This function is the one that you need to use when dealing with HTML input.

49
00:04:22.810 --> 00:04:27.250
It will filter out all dangerous and disallow each HTML tax and attributes.

50
00:04:27.760 --> 00:04:31.630
For example script tags and event attributes like on the click.

51
00:04:34.060 --> 00:04:40.540
You can specify your own array of LLC tanks and attributes by putting an array as a second argument.

52
00:04:43.390 --> 00:04:50.710
In this example, we allow only a simple aid tag, but with on click attributes and see how the result

53
00:04:50.710 --> 00:04:51.370
is different.

54
00:04:51.970 --> 00:04:53.470
The on click is allowed.

55
00:04:53.890 --> 00:04:58.690
The script that is still disallowed but now also beaten gets stripped.

56
00:05:02.830 --> 00:05:05.890
See the documentation for other sanitizing functions.

57
00:05:06.100 --> 00:05:08.710
There are more of them that with different purposes.

58
00:05:11.460 --> 00:05:15.120
When it comes to escaping functions, these will be your friends.

59
00:05:16.110 --> 00:05:21.750
ESC hd html to be used in html element content context like in this example.

60
00:05:24.270 --> 00:05:27.300
This function checks for the illegal Unicode characters.

61
00:05:27.720 --> 00:05:33.270
If they were found, the empty string is returned and use a slightly expanded version of each piece.

62
00:05:33.670 --> 00:05:35.130
HTML special chars function.

63
00:05:37.500 --> 00:05:45.150
Escalated our is for attribute values, but since under-the-hood it's basically the same as ESC yaml,

64
00:05:45.270 --> 00:05:48.810
you need to watch out for proper quoting error and your attribute values.

65
00:05:52.930 --> 00:05:53.470
Askew.

66
00:05:53.470 --> 00:06:00.130
Earl is for escaping Earl's before putting them on the page, for example, in the sheriff or source

67
00:06:00.130 --> 00:06:00.820
attributes.

68
00:06:06.340 --> 00:06:13.420
You can provide an array of allowed protocols as a second argument to the function and the world that

69
00:06:13.420 --> 00:06:14.170
it doesn't match.

70
00:06:14.170 --> 00:06:16.660
The list will result in an empty string.

71
00:06:19.730 --> 00:06:25.130
WordPress cases mentioned earlier is also a function that you should use when you were about to put

72
00:06:25.130 --> 00:06:27.380
the East Timor content on your page.

73
00:06:35.140 --> 00:06:41.950
If your theme or plugin makes states changing requests using custom forms or URLs, you should use non

74
00:06:42.460 --> 00:06:45.220
as a mitigation against CSR if attacks.

75
00:06:45.850 --> 00:06:49.390
WordPress makes it very easy for you with the set of functions.

76
00:06:50.520 --> 00:06:54.420
WordPress create nonce that generates and not string.

77
00:06:54.570 --> 00:06:55.950
If you need a role nonce.

78
00:06:58.700 --> 00:07:04.610
WordPress nonce field that outputs the hidden input field with nonce to use in forums.

79
00:07:08.890 --> 00:07:14.320
WordPress nonstructural that adds the non square restoring parameter to the URL.

80
00:07:18.060 --> 00:07:22.350
And WordPress verify nodes that verifies if the NAS was correct.

81
00:07:25.810 --> 00:07:33.070
As the documentation states, most values are tied to a specific action user, user session and a window

82
00:07:33.070 --> 00:07:33.670
of time.

83
00:07:34.480 --> 00:07:37.990
And by default, months, these are valid for 24 hours.
