1
00:00:06,930 --> 00:00:13,410
Some people think that using local storage or session storage makes the data more secure just because

2
00:00:13,410 --> 00:00:15,870
it's not sent anywhere out from the browser.

3
00:00:17,110 --> 00:00:24,040
In fact its otherwise whipped storage offers no protection to the data at all.

4
00:00:24,490 --> 00:00:27,760
It's a simple and pretty much public storage mechanism.

5
00:00:28,420 --> 00:00:31,660
Of course, under normal circumstances it's impossible.

6
00:00:31,660 --> 00:00:35,290
That site a read something from site B's web storage.

7
00:00:36,100 --> 00:00:40,240
But a single access vulnerability will make it almost trivial.

8
00:00:42,110 --> 00:00:49,010
Also, if a device is used by multiple users or someone gains access to the device, the storage data

9
00:00:49,010 --> 00:00:54,830
can be pretty easily accessed by a malicious person if only they know how to find it, which is not

10
00:00:54,830 --> 00:00:56,000
too complicated at all.

11
00:00:57,200 --> 00:01:04,100
Both of these are true for non HTP only cookies as well, so simply using cookies instead of storage

12
00:01:04,160 --> 00:01:05,630
is not more secure.

13
00:01:07,340 --> 00:01:13,850
That's why I always encouraged to store all the sensitive data on the server and only store a session

14
00:01:13,850 --> 00:01:15,410
ID in their cookie.

15
00:01:17,150 --> 00:01:23,060
When you protected with HTP only and secure flags, it will be impossible to read ID with JavaScript

16
00:01:23,210 --> 00:01:29,000
addressing threats coming from existing vulnerabilities and it will be encrypted during exchange with

17
00:01:29,000 --> 00:01:29,600
the server.

18
00:01:31,460 --> 00:01:35,360
Up to this same St Anne's tribute with the value of lax or strict.

19
00:01:35,630 --> 00:01:37,700
And you pretty much did everything you need.

20
00:01:39,530 --> 00:01:46,280
In other words, don't store anything important neither in local storage nor in non htp only cookies.

21
00:01:47,180 --> 00:01:53,030
You have to store decision it somewhere in the browser, but if you do it as described above, the damage

22
00:01:53,030 --> 00:01:54,140
is vastly limited.

23
00:01:55,070 --> 00:01:57,830
The assertion that it cannot be stolen using JavaScript.

24
00:01:58,550 --> 00:02:04,220
And even if somehow the attacker will gain access to the victim's computer and manually read the HTP

25
00:02:04,220 --> 00:02:04,970
only cookie.

26
00:02:05,300 --> 00:02:10,520
Their only hope is trying to attack this session, which you can also make pretty much impossible.

27
00:02:10,550 --> 00:02:13,100
As you can learn in the chapter about session management.

28
00:02:15,540 --> 00:02:16,050
Last.

29
00:02:16,110 --> 00:02:19,500
Storing data on the server protects the integrity of data.

30
00:02:20,130 --> 00:02:25,680
The session data on the server cannot be easily manipulated contrary to the data in the browser, which

31
00:02:25,680 --> 00:02:27,150
is trivial to change, not with ease.

32
00:02:27,150 --> 00:02:29,340
If only you can use browsers dev tools.

33
00:02:36,970 --> 00:02:44,770
In other words, to the data from storage and cookies as any input data coming from user strict validation

34
00:02:44,770 --> 00:02:46,990
and sanitization is required.
