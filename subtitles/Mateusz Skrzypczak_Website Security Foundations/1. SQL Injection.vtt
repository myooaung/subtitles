WEBVTT
1
00:00:04.860 --> 00:00:07.430
Let's now talk about one of the website security.

2
00:00:07.430 --> 00:00:09.980
Big topics, obscure injection.

3
00:00:10.850 --> 00:00:16.340
In one of the earlier chapters, I showed you this code, which is very prone to this kind of attack.

4
00:00:17.510 --> 00:00:21.110
In intended circumstances, the query would look like this.

5
00:00:23.470 --> 00:00:29.380
But when the upward parameter is passed directly as it came from the outside of the script, a malicious

6
00:00:29.380 --> 00:00:33.370
user could alter it to be something like one or one equals one.

7
00:00:34.330 --> 00:00:37.150
The final query would become totally different.

8
00:00:37.160 --> 00:00:45.010
Now the second condition in workflows will always be true, so the query doesn't limit the user by ADD

9
00:00:45.220 --> 00:00:45.930
any more.

10
00:00:46.240 --> 00:00:49.330
It will return names and bases for all users.

11
00:00:50.410 --> 00:00:56.380
And even if the script doesn't allow the output of multiple rows, it will most likely return the first

12
00:00:56.380 --> 00:01:02.590
row only which for an attacker isn't that bad, considering that the first user often is an admin.

13
00:01:05.300 --> 00:01:10.550
In a similar way, someone could try to change everyone's password if they managed to inject the same

14
00:01:10.550 --> 00:01:12.320
thing in an update query.

15
00:01:15.110 --> 00:01:22.970
If the UAED could be one or one equals one, the whole query would look like this and all users will

16
00:01:22.970 --> 00:01:24.020
now have a password.

17
00:01:24.050 --> 00:01:25.430
ABC one, two, three.

18
00:01:28.670 --> 00:01:30.290
Let's see some more examples.

19
00:01:34.630 --> 00:01:34.990
Here.

20
00:01:34.990 --> 00:01:36.910
The script needs a string value.

21
00:01:38.230 --> 00:01:44.260
Using the same malicious code as before will not work as the value would be surrounded with single quotes

22
00:01:44.680 --> 00:01:48.220
and the OR operator will not work as intended by the attacker.

23
00:01:49.970 --> 00:01:56.370
But if we insert this will produce a perfectly valid query and will carry out a successful ask.

24
00:01:56.390 --> 00:01:57.590
You will injection attack.

25
00:02:01.780 --> 00:02:03.580
Like where we can be more complicated.

26
00:02:04.660 --> 00:02:08.680
For example, a second condition checking if there is a valid session token.

27
00:02:11.370 --> 00:02:17.430
But an attacker might want to try their luck by simply commenting it out with two dashes and the space,

28
00:02:17.670 --> 00:02:19.410
which is a common sequence in as.

29
00:02:20.640 --> 00:02:26.310
It will produce a valid query as well and the fuel injection will again be successful.

30
00:02:29.850 --> 00:02:35.880
As I demonstrated a while ago, such methods can be tried not only to get too much data from the database,

31
00:02:36.090 --> 00:02:41.880
but also to modify it in search records, change them or delete or even drop tables.

32
00:02:43.380 --> 00:02:45.180
Going back to our first example.

33
00:02:45.570 --> 00:02:48.150
A malicious user could try passing these values.

34
00:02:48.300 --> 00:02:49.980
Stupid get parameter.

35
00:02:52.970 --> 00:02:59.240
The first will override all passwords to ABC, and the second one will simply drop the whole table.

36
00:03:03.220 --> 00:03:07.030
I will not give any more examples because I think you already get the point.

37
00:03:07.480 --> 00:03:13.210
Things can get really bad if you don't validate and the don't sanitize all the gets into the database

38
00:03:13.210 --> 00:03:13.630
query.

39
00:03:14.680 --> 00:03:18.010
So let's see how we can protect ourselves from such attacks.

40
00:03:22.390 --> 00:03:27.850
First of all, you might wonder how common attacker knows the query structure or table names.

41
00:03:29.350 --> 00:03:34.060
Well, lots, lots of sites and apps use evidence, table name and column names.

42
00:03:34.480 --> 00:03:37.060
A table with users is often named users.

43
00:03:37.690 --> 00:03:40.690
A table with products is often name just products.

44
00:03:41.410 --> 00:03:45.970
If a site is built on WordPress by default, the table names are widely known.

45
00:03:46.210 --> 00:03:48.130
WP underscore users.

46
00:03:48.310 --> 00:03:50.710
WP underscore options, etc..

47
00:03:51.730 --> 00:03:58.270
It's a good idea to avoid such obvious names for which an ideal solution is to keep all tables prefixed

48
00:03:58.270 --> 00:03:59.830
with something less evident.

49
00:04:01.760 --> 00:04:08.150
You don't even have to remember that prefix story where you stole database credentials as another constant.

50
00:04:09.830 --> 00:04:12.950
And use that constant in your queries like in this example.

51
00:04:16.100 --> 00:04:21.650
Of course, this will only harden the security of your app as long as you don't reveal it by accident.

52
00:04:21.950 --> 00:04:29.240
For example, in public comment in the email or JavaScript code by allowing displaying runtime errors

53
00:04:29.240 --> 00:04:32.810
in the browser which could reveal part of the query and table names.

54
00:04:33.380 --> 00:04:40.940
This will happen when you have the display errors option set to on in BHP configuration or by poorly

55
00:04:40.940 --> 00:04:42.890
protecting the error log document.

56
00:04:43.790 --> 00:04:49.640
If an attacker could cause the runtime error and review the log file, they will gain a lot of knowledge.

57
00:04:51.870 --> 00:04:55.710
In WordPress, it's also possible to change the default table prefix.

58
00:04:58.090 --> 00:05:00.130
During installation on the screen.

59
00:05:00.130 --> 00:05:06.130
When you were asked for database credentials, you can define your own table prefix instead of the default

60
00:05:06.130 --> 00:05:07.450
WP underscore.

61
00:05:09.010 --> 00:05:14.890
The prefix can also be changed on existing installations, but that's slightly more complicated process,

62
00:05:14.890 --> 00:05:18.490
which will cover in the chapter about improving WordPress security.

63
00:05:20.830 --> 00:05:21.320
Last.

64
00:05:21.340 --> 00:05:27.190
It's not too difficult to create a script that will keep trying to run the query with various combinations

65
00:05:27.190 --> 00:05:30.370
of table names, column names and potential values.

66
00:05:31.240 --> 00:05:36.970
Such tool can quickly run hundreds or thousands of combinations, and with some simple analysis, an

67
00:05:36.970 --> 00:05:40.630
attacker will get the idea how your vulnerable query works.

68
00:05:42.630 --> 00:05:46.440
But there's another method to find out how your tables look like.

69
00:05:47.850 --> 00:05:54.660
The blind skewer injection is a type of attack which is not meant to cause any harm by itself, but

70
00:05:54.660 --> 00:05:59.520
its purpose is to find out some information about the database usually structure.

71
00:06:01.290 --> 00:06:08.570
Let's suppose the attacker is not sure whether the column holding usernames is called login user name

72
00:06:08.720 --> 00:06:10.070
or maybe something else.

73
00:06:10.910 --> 00:06:16.820
If they can inject a very simple skewer to the query, they can find it out by observing what the result

74
00:06:16.820 --> 00:06:18.200
of a query is on page.

75
00:06:19.520 --> 00:06:20.990
If they could run this.

76
00:06:23.230 --> 00:06:25.060
And the page will return an error.

77
00:06:25.300 --> 00:06:29.410
Either the page is not vulnerable or name is the column that doesn't exist.

78
00:06:31.710 --> 00:06:33.150
But if they run this.

79
00:06:35.650 --> 00:06:37.780
And this time the page returns as normal.

80
00:06:38.230 --> 00:06:42.610
Then a log in column probably exists and the page is vulnerable.

81
00:06:43.750 --> 00:06:48.250
We know this because with other column name, the result was completely different.

82
00:06:51.030 --> 00:06:58.610
The subtype of blind escort injection is a time based school injection, which works in a similar way.

83
00:06:58.620 --> 00:07:04.770
But instead of observing the results, the attacker analyzes the time in which the results came back.

84
00:07:07.450 --> 00:07:13.450
The injected school quote is constructed in a way that, for example, true, is written with some noticeable

85
00:07:13.450 --> 00:07:17.920
delay, like a couple of seconds, and the false is returned as normal.

86
00:07:19.670 --> 00:07:25.070
If an attacker is able to run such query, they can test the database against whatever they want.

87
00:07:25.550 --> 00:07:28.640
In this example, to see if the log in column exists.

88
00:07:30.000 --> 00:07:32.520
The result will be a true or false answer.

89
00:07:32.640 --> 00:07:36.780
Where true is when the response comes after at least 3 seconds.

90
00:07:40.250 --> 00:07:43.940
Finally, let's see how to actually put the data in the query.

91
00:07:44.240 --> 00:07:48.710
The ultimate method to protect your site against school injection attacks.

92
00:07:49.910 --> 00:07:57.080
The only secure way to put input data in database query and avoid ESC was injection attack is by using

93
00:07:57.080 --> 00:08:01.400
prepared statements or in other words, parameterized the query.

94
00:08:02.960 --> 00:08:05.060
A simple example would look like this.

95
00:08:06.770 --> 00:08:12.380
I will explain the details of this code in a while, but they wanted to first give you a general overview.

96
00:08:13.580 --> 00:08:20.600
The idea is that you write the query pretty much as usual, but instead of any values, we insert placeholders.

97
00:08:21.800 --> 00:08:24.710
Then we bind our variables to those placeholders.

98
00:08:24.980 --> 00:08:29.420
That is, we assign values to them and then we execute around.

99
00:08:29.420 --> 00:08:30.020
Run the query.

100
00:08:31.040 --> 00:08:33.080
Doesn't seem like a rocket science, does it?

101
00:08:35.040 --> 00:08:38.400
And looking at the code, you might wonder where the protection is.

102
00:08:39.420 --> 00:08:42.690
What we can see is how the query is actually executed.

103
00:08:43.530 --> 00:08:48.840
It's not that BHP just pastes the binding values into a query with some clever escaping.

104
00:08:50.040 --> 00:08:57.210
The underlying magic is that the query and the data are sent separately to the database server and even

105
00:08:57.210 --> 00:09:00.990
on the database level they are still not merged into a single query.

106
00:09:02.280 --> 00:09:04.620
The school code looks rather like that.

107
00:09:08.470 --> 00:09:14.530
Pretty similar to how we wrote it in B, so there's actually no way for the binder to value to mess

108
00:09:14.530 --> 00:09:15.790
up the initial query.

109
00:09:16.360 --> 00:09:18.250
We have query and data separate.

110
00:09:18.610 --> 00:09:21.490
This is why using this technique is so important.

111
00:09:24.860 --> 00:09:33.170
Let's now discuss the BHP code in details in video you prepared the query like in this example is the

112
00:09:33.170 --> 00:09:34.250
same code as before.

113
00:09:37.220 --> 00:09:40.940
DBC is the connection we set up at the beginning of the script.

114
00:09:42.470 --> 00:09:48.200
Here we have a query pass to the prepare method of PDO object instead of the query method.

115
00:09:49.490 --> 00:09:56.570
The interesting part lies in the workflows where we use a semicolon, uid and semicolon are all placeholders.

116
00:09:57.680 --> 00:10:02.510
In video you defined named placeholders by preventing their names with semicolons.

117
00:10:03.680 --> 00:10:09.410
So we have a query with no values there yet to field the placeholders with values.

118
00:10:09.650 --> 00:10:16.550
You can either bind them one by one with bind value methods and then use the executed methods to pull

119
00:10:16.550 --> 00:10:17.270
of the query.

120
00:10:19.170 --> 00:10:26.610
Or bind them directly in the execute method by passing an array to it in which keys are placeholders

121
00:10:26.850 --> 00:10:30.120
and values are are the values that we wanted to pass.

122
00:10:33.660 --> 00:10:39.150
The benefit of first method is that you can explicitly said the type of binding value for each piece

123
00:10:39.150 --> 00:10:39.660
holder.

124
00:10:42.140 --> 00:10:46.580
In this example, we underline that the EUA must be treated as a number.

125
00:10:47.960 --> 00:10:53.330
You don't have this option when passing an array to execute a method like we did in the second example.

126
00:10:54.730 --> 00:11:00.880
Other types are listed in PD or constants documentation, boolean, null, string, etc..

127
00:11:01.510 --> 00:11:02.980
The default is string.

128
00:11:07.830 --> 00:11:11.050
In my you are using object oriented style.

129
00:11:11.070 --> 00:11:14.190
The syntax is pretty similar, but there are differences.

130
00:11:17.180 --> 00:11:20.030
First you call the prepar method on my school.

131
00:11:20.030 --> 00:11:26.720
I object to which you pass your query just like in video, but differently than in video.

132
00:11:26.900 --> 00:11:29.930
You use only question marks symbols as placeholders.

133
00:11:30.050 --> 00:11:37.550
You don't give them names, then you bind them using bind param methods of minuscule statement object

134
00:11:37.820 --> 00:11:39.140
and execute the query.

135
00:11:41.530 --> 00:11:42.670
Not the binding.

136
00:11:42.700 --> 00:11:45.760
In my school I works differently than in PDL.

137
00:11:46.120 --> 00:11:49.000
It's something like in between both ways of doing that.

138
00:11:49.000 --> 00:11:56.630
In PDL, it uses the dedicated binding method like we did in first video example, which allows or here

139
00:11:56.660 --> 00:12:00.100
rather requires you to specify the variables types.

140
00:12:01.800 --> 00:12:04.670
But you bind all variables in one method call.

141
00:12:04.980 --> 00:12:10.650
So in that it's similar to putting all the variables as an array to use execute methods.

142
00:12:12.990 --> 00:12:20.130
The Mind Balm method in my school, I can have two or more arguments, and the mysterious first argument

143
00:12:20.160 --> 00:12:25.710
is a string that defines types of all past variables, each with a single letter.

144
00:12:26.730 --> 00:12:29.280
There are four letters corresponding to this support.

145
00:12:29.280 --> 00:12:37.830
Two types I for integer d for double that is float ns for string and B for blob.

146
00:12:38.670 --> 00:12:44.820
So in our example, I asked means that the first value is an integer and the second is a string.

147
00:12:46.350 --> 00:12:49.020
See some more examples to clarify how it works.

148
00:12:53.640 --> 00:12:59.130
The number of letters must, of course, match the number of values and the number of placeholders.

149
00:13:01.660 --> 00:13:06.280
Finally you pull off the query with the execute method, just like in video.

150
00:13:08.630 --> 00:13:14.240
For those preferring procedural style, here's how it works compared to the object oriented style.

151
00:13:16.640 --> 00:13:22.790
Instead of using prepare methods on database connection object, you use my school, I prepare function

152
00:13:23.090 --> 00:13:26.300
and past with the database connection object and the query.

153
00:13:28.440 --> 00:13:35.970
And similarly you use my askew as a statement bind param and my askew with a statement execute instead

154
00:13:35.970 --> 00:13:39.150
of bind param and execute methods on query object.

155
00:13:43.610 --> 00:13:51.860
Now in both cases BDO and MySchool, you still can use a direct query, but do it only if it doesn't

156
00:13:51.860 --> 00:13:58.850
include any data from the outside and you as a developer have a full control on every character that

157
00:13:58.850 --> 00:13:59.960
gets into the query.

158
00:14:01.880 --> 00:14:05.900
For example, whenever you simply fetch the list of categories like here.

159
00:14:09.040 --> 00:14:10.630
There's no need to prepare it.

160
00:14:10.900 --> 00:14:12.070
It's defined by you.

161
00:14:12.400 --> 00:14:13.840
Nothing can get into it.

162
00:14:14.050 --> 00:14:14.920
And it's secure.

163
00:14:17.580 --> 00:14:22.080
Note also that you cannot use placeholders for column or table names.

164
00:14:22.680 --> 00:14:28.830
If you need user input to determine the column or table name, you need to put it directly in the query,

165
00:14:28.830 --> 00:14:37.260
which is dangerous, and it means you must do very strict validation, ideally using a rigorous regex.

166
00:14:39.190 --> 00:14:41.230
In this case, we filter out everything.

167
00:14:41.230 --> 00:14:44.020
That's not a letter digit or underscore.

168
00:14:46.820 --> 00:14:52.640
Alternatively, you can verify the incoming table name eg is the list of tables that actually exist.

169
00:14:58.280 --> 00:15:01.040
In this code, we are using a waitlist approach.

170
00:15:01.220 --> 00:15:04.940
So first we get all existing table names with show tables.

171
00:15:04.940 --> 00:15:05.390
Query.

172
00:15:08.410 --> 00:15:13.330
And then we compared the user input with an array of tables that we have in our database.

173
00:15:17.190 --> 00:15:18.960
And that's all there is to it.

174
00:15:19.410 --> 00:15:24.750
Your sites should be safe against fuel injection attacks if you follow these simple recommendations.
