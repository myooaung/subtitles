WEBVTT
1
00:00:05.230 --> 00:00:09.280
A similar non-native male context, but much easier to deal with.

2
00:00:09.430 --> 00:00:11.410
Is this your style context?

3
00:00:12.280 --> 00:00:17.890
Luckily, there's little possibility of someone running a script through CSIS, but we still need to

4
00:00:17.890 --> 00:00:18.880
be very careful.

5
00:00:20.050 --> 00:00:26.670
If you allow any unfiltered input in this user's context, a malicious user can play with existing elements

6
00:00:26.690 --> 00:00:34.450
visual aspects like to them or reposition, but also add content to the website using pseudo selectors,

7
00:00:34.600 --> 00:00:36.700
content and background properties.

8
00:00:38.170 --> 00:00:39.190
See the example.

9
00:00:42.930 --> 00:00:47.850
If somehow the body color variable gets manipulated into something like this.

10
00:00:50.460 --> 00:00:53.190
The resulting serious code would be this.

11
00:00:55.450 --> 00:00:58.270
Let me reformat the code for you so it's easier to read.

12
00:01:01.300 --> 00:01:03.670
So it's basically setting the background color.

13
00:01:03.790 --> 00:01:07.060
But after that, it introduces a couple of other rules.

14
00:01:07.570 --> 00:01:09.670
The first one hides any element.

15
00:01:10.090 --> 00:01:12.610
And the other one adds some nasty message.

16
00:01:14.830 --> 00:01:17.740
The final rule is just to avoid syntax error.

17
00:01:19.180 --> 00:01:25.180
Instead of the textual content in the after studio element, a malicious user could put some background

18
00:01:25.180 --> 00:01:32.200
image in the HTML or body elements with the same message or something much worse to damage your reputation.

19
00:01:33.430 --> 00:01:35.620
You get the idea how dangerous it is.

20
00:01:35.950 --> 00:01:38.230
So let's see how to protect ourselves.

21
00:01:40.740 --> 00:01:45.930
Usually you would want to put user input as a property value, just like we did before.

22
00:01:47.430 --> 00:01:52.020
I'd recommend to use a strict regular expression in all such places.

23
00:01:54.510 --> 00:01:58.170
In this case, we expect the call in hexadecimal notation.

24
00:01:59.040 --> 00:02:05.910
So you should filter out all characters which are not digits and letters A to F and prepared it with

25
00:02:05.910 --> 00:02:11.910
hash sign and ensure the final string is four or seven characters long.

26
00:02:12.390 --> 00:02:14.250
That's three or six plus hash.

27
00:02:19.170 --> 00:02:25.380
If you expect a distance like a value for top margin, you can filter out everything a part of digits

28
00:02:25.560 --> 00:02:28.020
dot letter and the person sign.

29
00:02:29.100 --> 00:02:34.740
Letters and person signs are of course needed only in case the user is going to specify the unit.

30
00:02:38.760 --> 00:02:46.410
If you expect a value in a defined unit like pixel or percent, you can only digits and the DOD and

31
00:02:46.410 --> 00:02:49.140
the DOD only if you accept non integer values.

32
00:02:51.030 --> 00:02:57.270
If you only accept integral values, you can simply cast the input to integer within the function as

33
00:02:57.270 --> 00:03:00.420
the only allowed character would be digits anyway.

34
00:03:03.830 --> 00:03:08.240
These examples will of course not allow a value calculated with function.

35
00:03:09.020 --> 00:03:16.340
If you want to allow it, you'd have to let in also math operators plus minus slash and asterisk, parentheses

36
00:03:16.340 --> 00:03:17.090
and space.

37
00:03:20.320 --> 00:03:21.070
How do you think?

38
00:03:21.280 --> 00:03:22.300
Is it still safe?

39
00:03:24.310 --> 00:03:26.380
Well, yes, but not entirely.

40
00:03:27.340 --> 00:03:32.710
The same set of characters could be used to formulate the expression of function instead of calc.

41
00:03:33.770 --> 00:03:39.920
This function allowed to run the JavaScript code, but it was only understood by Internet Explorer prior

42
00:03:39.920 --> 00:03:40.850
to version eight.

43
00:03:41.360 --> 00:03:48.470
So theoretically, any damage is quite limited unless you use Internet Explorer compatibility modes,

44
00:03:48.920 --> 00:03:54.580
in which case even newer versions will understand this function and will be potentially vulnerable.

45
00:03:59.650 --> 00:04:06.820
Another common scenario is to provide a background image you earn if you place images from CMS in background.

46
00:04:06.850 --> 00:04:14.740
You can style the background in the static cases file, but the image URL needs to be added dynamically.

47
00:04:16.000 --> 00:04:19.690
And now this is tricky because we have a chain of contexts here.

48
00:04:20.740 --> 00:04:24.250
You are the context inside this property.

49
00:04:24.250 --> 00:04:28.090
Context is site attribute value context.

50
00:04:29.950 --> 00:04:36.050
We will learn about the URL context in a while because it can be found as a sub context, not only in

51
00:04:36.050 --> 00:04:40.720
C assess context, but also JavaScript and various HTML contexts.

52
00:04:41.650 --> 00:04:44.590
We will cover exactly that case in a couple of minutes.

53
00:04:45.460 --> 00:04:48.970
For now, let's continue with the theses context specific issues.

54
00:04:51.100 --> 00:04:56.860
So another place where you might want to put user input is to form a selector or part of the selector.

55
00:04:59.170 --> 00:05:02.860
Suppose the other device has different styling based on its type?

56
00:05:05.070 --> 00:05:09.660
If somehow the diff type variable gets manipulated into something like this.

57
00:05:10.830 --> 00:05:13.200
The resulting causes would be this.

58
00:05:15.810 --> 00:05:18.360
Let me reformat the code so it's easier to read.

59
00:05:21.150 --> 00:05:27.990
So we end up with an empty stylebook for our other element, the malicious entry that hides the entire

60
00:05:27.990 --> 00:05:28.800
body element.

61
00:05:29.550 --> 00:05:32.760
And they use this style for an element which is X.

62
00:05:32.940 --> 00:05:35.250
Just for the sake of having a valid code block.

63
00:05:38.800 --> 00:05:45.220
This code can be secured by using very strict regular expression or even better whitelist.

64
00:05:46.750 --> 00:05:49.750
However, often it's enough to redesign your logic.

65
00:05:51.470 --> 00:05:58.580
Instead of printing the element, add or class, use a predefined class or set of classes and turn it

66
00:05:58.580 --> 00:06:01.310
on or off when the value from CMS matches.

67
00:06:04.860 --> 00:06:07.830
In case the diff type is something we didn't expect.

68
00:06:08.070 --> 00:06:13.980
The element will not have a red border, but there will be no extra damage like hidden body element.

69
00:06:18.730 --> 00:06:24.370
As you could see, there's quite a lot an attacker can do with scissors, although they most likely

70
00:06:24.370 --> 00:06:27.640
will not be able to run any script or steal data.

71
00:06:27.910 --> 00:06:31.750
They could damage your reputation or even compromise your site.

72
00:06:33.430 --> 00:06:39.370
And in most of these examples, using only a team of special task function will fail to protect you

73
00:06:39.370 --> 00:06:40.870
from malicious user input.

74
00:06:43.900 --> 00:06:47.560
Finally accepting actual CCS code coming from users.

75
00:06:47.590 --> 00:06:52.810
Just like accepting actual JavaScript code is working on the very, very thin ice.

76
00:06:53.320 --> 00:06:58.540
If you allow it, you will almost always be susceptible to cross-site scripting attacks.
