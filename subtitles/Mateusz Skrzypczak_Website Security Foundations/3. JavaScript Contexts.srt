1
00:00:05,290 --> 00:00:07,420
We finished with 18 more contexts.

2
00:00:07,420 --> 00:00:09,970
So let's add on to the JavaScript context.

3
00:00:11,320 --> 00:00:14,320
Sometimes you need to use data from back end in JavaScript.

4
00:00:14,680 --> 00:00:18,430
Of course, this opens another bunch of possible security holes.

5
00:00:18,880 --> 00:00:20,260
Let me give you an example.

6
00:00:21,760 --> 00:00:27,040
We have a function that, for the sake of example, only logs the past value to the console.

7
00:00:28,270 --> 00:00:32,830
Then we have a button that runs this function with some text that comes from the backend.

8
00:00:36,560 --> 00:00:41,840
Of course we use East Timor special just function so that nothing could break out of the function argument

9
00:00:41,840 --> 00:00:44,060
context which is within single quotes.

10
00:00:46,040 --> 00:00:46,940
Is that safe?

11
00:00:48,590 --> 00:00:49,670
You would say yes.

12
00:00:50,150 --> 00:00:52,010
But in reality it's not.

13
00:00:53,510 --> 00:00:55,310
Suppose the string is this.

14
00:00:57,230 --> 00:00:59,150
It looks completely innocent, right?

15
00:00:59,480 --> 00:01:01,990
No single quotes, only escaped characters.

16
00:01:02,000 --> 00:01:02,360
Great.

17
00:01:03,200 --> 00:01:06,680
But when it's rendered on page, it produces this.

18
00:01:08,160 --> 00:01:09,180
And we were screwed.

19
00:01:11,380 --> 00:01:12,160
Why is that?

20
00:01:12,970 --> 00:01:18,490
JavaScript is designed in a way that it allows and coded entities in language constructs.

21
00:01:19,840 --> 00:01:26,230
So browser evaluates JavaScript and coded entities to their corresponding characters, and the code

22
00:01:26,230 --> 00:01:29,680
can be injected with simple alphanumeric, chars and backslash.

23
00:01:30,700 --> 00:01:35,080
So simply using html special java function will not help here.

24
00:01:35,800 --> 00:01:40,240
This is a huge trouble when you need to pass data from backend to JavaScript.

25
00:01:40,420 --> 00:01:42,820
But you will now learn how to do it safely.

26
00:01:45,230 --> 00:01:45,890
Let's see.

27
00:01:46,070 --> 00:01:50,690
In general, I can see three ways to pass data from the backend to JavaScript.

28
00:01:51,800 --> 00:01:56,090
First, directly within a script, either with a script code block.

29
00:01:58,040 --> 00:02:03,170
Or in a JavaScript context within an attribute like event attributes.

30
00:02:05,020 --> 00:02:12,490
The only safe examples that I can think of of putting data this way would be either for numbers casted

31
00:02:12,490 --> 00:02:14,680
on the back and side to appropriate types.

32
00:02:14,950 --> 00:02:20,530
Like in both examples where we used the interval function, it will return an integral number.

33
00:02:20,530 --> 00:02:26,650
Always let it be zero, but nothing else than the number or using the whitelist.

34
00:02:33,080 --> 00:02:36,370
The second method is to put the data in an HD mode.

35
00:02:36,380 --> 00:02:40,160
Data attribute which content can then be read by a script.

36
00:02:44,900 --> 00:02:50,840
Now because the kind of encoding that led us into trouble just before with only work when placed directly

37
00:02:50,840 --> 00:02:56,780
within the JavaScript context, you can safely put it in the data attributes and then really like in

38
00:02:56,780 --> 00:02:59,420
the example above and it will not execute.

39
00:02:59,420 --> 00:03:05,240
Then the string will be decoded to actual characters but not executed.

40
00:03:07,370 --> 00:03:14,930
To safely use data attributes, you need to wrap the attributes value with double quotes and escape

41
00:03:14,960 --> 00:03:16,430
a special charges.

42
00:03:17,620 --> 00:03:22,180
You should also keep doing all necessary validation like type casting, etc..

43
00:03:27,930 --> 00:03:33,780
But using data attributes all the time might be tedious if you need lots of values from the backend.

44
00:03:34,470 --> 00:03:40,140
Don't be tempted to put them directly into a script to save time and hope this vulnerability never gets

45
00:03:40,140 --> 00:03:40,830
exploited.

46
00:03:41,610 --> 00:03:48,330
Use Jason to export large portions of data from the backend, either by printing the JSON object directly

47
00:03:48,330 --> 00:03:52,500
on page or by asynchronously loading the separate JSON final.

48
00:03:54,400 --> 00:03:58,600
Let's assume we need some author data on page to be used within JavaScript.

49
00:03:59,170 --> 00:04:04,330
It could be a couple of fields like name, age, skills, description, etc..

50
00:04:05,920 --> 00:04:08,290
You can have your JSON generated in place.

51
00:04:10,330 --> 00:04:15,700
In this example, we get some values from CMS and assign them to an associated array.

52
00:04:16,930 --> 00:04:23,260
Then we encoded as JSON and print inside an invisible diff element with proper escaping.

53
00:04:23,260 --> 00:04:26,050
Of course, in case the data included some HTML.

54
00:04:28,420 --> 00:04:35,140
Do not use the script element as this would put the data within the JavaScript context straight away

55
00:04:35,350 --> 00:04:37,420
and we wants to avoid just that.

56
00:04:38,680 --> 00:04:46,270
The idea is to put it as a text inside the plain diff and then read this text back and pass it as JSON.

57
00:04:49,230 --> 00:04:55,710
So to use the values within JavaScript, we need to pass the JSON from the diff elements, text, content,

58
00:04:55,710 --> 00:05:00,360
property, and we do it with the JavaScript JSON pass method of course.

59
00:05:02,890 --> 00:05:05,860
As a result, we get an object with all our data.

60
00:05:12,590 --> 00:05:16,100
The second method is to generate a JSON file with BHP.

61
00:05:16,310 --> 00:05:18,320
Pretty much the same way as earlier.

62
00:05:18,320 --> 00:05:25,430
But remembering to set the correct mine type application slash adjacent and UTF eight encoding.

63
00:05:28,460 --> 00:05:32,720
Then this file can be retrieved, for example, with Ajax on the front and part.

64
00:05:36,500 --> 00:05:43,790
This code makes an asynchronous request with both method to the Jason file generated with BHP and on

65
00:05:43,790 --> 00:05:48,470
success it stores the person JSON object in the author variable.

66
00:05:53,330 --> 00:05:59,120
Finally, let me just remind that with all these methods, we tried to prevent any user code to be run

67
00:05:59,120 --> 00:05:59,810
on page.

68
00:06:00,410 --> 00:06:06,530
If you're, however, willing to accept an actual executable JavaScript code, then you will always

69
00:06:06,530 --> 00:06:08,900
be susceptible to access to attacks.
