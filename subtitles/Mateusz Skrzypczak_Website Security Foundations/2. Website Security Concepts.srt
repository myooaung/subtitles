1
00:00:04,900 --> 00:00:10,270
Let me now describe a couple of concepts and terms which are needed to understand the topic of website

2
00:00:10,270 --> 00:00:14,050
security and which we will be using constantly in this course.

3
00:00:15,430 --> 00:00:18,460
Vulnerability is simply a security hole.

4
00:00:19,030 --> 00:00:25,180
For example, if your site lets people upload files but doesn't filter out executable scripts, then

5
00:00:25,180 --> 00:00:31,570
the upload system has a vulnerability because allowing executables is a security risk for the website

6
00:00:31,570 --> 00:00:32,320
and server.

7
00:00:33,910 --> 00:00:39,250
Such vulnerability can be exploited, which means used to carry out an attack.

8
00:00:39,910 --> 00:00:44,950
If someone discovers that the final upload feature can be used to put some malicious script on the server

9
00:00:45,220 --> 00:00:51,910
and they do it, they are exploiting the vulnerability and such act is called an exploit.

10
00:00:54,980 --> 00:01:00,680
Validation is the process in which you check if the incoming data matches what you expect it to be.

11
00:01:01,160 --> 00:01:06,740
If you expect a quantity or a numeric ID, then you need to make sure the input is a number.

12
00:01:07,190 --> 00:01:15,440
And in some cases, and number other than zero less or greater than zero only integer, etc. when you

13
00:01:15,440 --> 00:01:21,950
expect a country or city name, given that they usually don't contain numbers, parentheses, semicolons,

14
00:01:21,950 --> 00:01:27,110
quotes, etc., you could just reject any input with such illegal characters.

15
00:01:27,800 --> 00:01:33,890
But there's another validation method to check the value against the complete list of possible entries.

16
00:01:34,610 --> 00:01:39,890
That's doable in case of countries, but unfortunately way too complex in case of cities.

17
00:01:40,790 --> 00:01:47,540
However, with whitelisting approach, we will always end up with the correct value if the validation

18
00:01:47,540 --> 00:01:51,440
process fails, which means there was something wrong with the expected input.

19
00:01:52,010 --> 00:01:58,760
The input should be rejected with the detailed feedback about what is expected, because during validation

20
00:01:58,760 --> 00:02:04,730
we assume the input comes from a legitimate user who just made the mistake and should be assisted to

21
00:02:04,730 --> 00:02:06,830
provide the correct and complete data.

22
00:02:07,400 --> 00:02:12,470
This is why it's important to get back to them with an explanation of what is expected.

23
00:02:13,700 --> 00:02:18,080
But validation alone is not enough to make the data safe for our application.

24
00:02:21,830 --> 00:02:25,340
Sanitization is a process that comes after validation.

25
00:02:26,060 --> 00:02:29,600
We already validated the data and we think it makes sense.

26
00:02:29,810 --> 00:02:36,230
But because the data is not always as simple as a number postal code or city name, we need to make

27
00:02:36,230 --> 00:02:38,750
sure it can be safely used in the application.

28
00:02:39,320 --> 00:02:44,930
For example, a single quote or a double quote characters have special meanings in many languages.

29
00:02:44,930 --> 00:02:51,670
Syntax is if an input string containing these characters is passed directly to the database query or

30
00:02:51,740 --> 00:02:57,800
they are left as they are in a string that's going to be displayed on page, they may alter the application's

31
00:02:57,800 --> 00:03:01,100
behavior in an unexpected and dangerous way.

32
00:03:01,760 --> 00:03:05,660
And it also doesn't necessarily mean the input was meant to be an attack.

33
00:03:06,230 --> 00:03:11,990
Legitimate input, including special characters which will not be escaped, can break the application

34
00:03:11,990 --> 00:03:13,040
behavior as well.

35
00:03:14,390 --> 00:03:21,290
So sanitization is a process in which you escape or encode these special characters to strip any special

36
00:03:21,290 --> 00:03:28,160
meaning from them, to safely transmit the input stored in the database displayed on page, etc..

37
00:03:29,810 --> 00:03:36,380
In this example, we escape five characters which have special meaning in HTML so the incoming string

38
00:03:36,380 --> 00:03:37,700
can be placed on the page.

39
00:03:38,960 --> 00:03:41,560
Some people just filter out risky characters.

40
00:03:41,570 --> 00:03:44,510
That is, remove them from the input string before using it.

41
00:03:44,840 --> 00:03:50,360
But be careful with that approach because it may completely change the original input and its intention.

42
00:03:52,730 --> 00:03:59,120
Authentication and authorization are two very similar words, which are sometimes incorrectly used as

43
00:03:59,120 --> 00:03:59,870
synonyms.

44
00:04:00,410 --> 00:04:03,290
In reality, both concepts are very different.

45
00:04:04,220 --> 00:04:11,210
Authentication is the process in which you confirm your identity, for example, providing correct username

46
00:04:11,210 --> 00:04:11,930
and password.

47
00:04:12,470 --> 00:04:16,670
By doing so, you provide your authenticity that you are you.

48
00:04:18,230 --> 00:04:24,770
Authorization, on the other hand, is the process of verifying if the person is entitled to do something.

49
00:04:25,400 --> 00:04:31,520
For example, if a user logged in as John Smith, that is, who authenticated himself as John Smith

50
00:04:32,090 --> 00:04:36,590
is capable of, for example, removing users, adding posts, etc..

51
00:04:38,240 --> 00:04:43,880
If you are not native English speaker to remember which word is for which concept may be really tricky

52
00:04:43,880 --> 00:04:50,120
at the beginning, but you may have heard a lot of times about someone being authorized or being not

53
00:04:50,120 --> 00:04:51,500
authorized to do something.

54
00:04:52,190 --> 00:04:54,700
It means this person can't do something.

55
00:04:54,710 --> 00:04:58,400
It's out of their power and not that the person is unknown.

56
00:04:59,150 --> 00:05:05,240
Also on the construction sites, you can easily spot the signs saying do not enter authorized personnel

57
00:05:05,240 --> 00:05:09,090
only, which doesn't mean that anonymous people cannot enter.

58
00:05:09,470 --> 00:05:15,380
The entrance is forbidden for people who are not granted access to enter, even if they are known.

59
00:05:17,240 --> 00:05:23,810
Both authentication and authorization are essential parts of the access control system, which is a

60
00:05:23,810 --> 00:05:30,170
set of methods and processes that is meant to ensure that only allowed people are admitted to data or

61
00:05:30,170 --> 00:05:32,360
functionalities with limited access.

62
00:05:35,170 --> 00:05:42,220
Cryptography is a science or study that aims to protect confidential data from being read by unauthorized

63
00:05:42,220 --> 00:05:46,300
parties, either when it is stored or when it is being transmitted.

64
00:05:47,710 --> 00:05:54,190
Encryption is a method of putting the data through a mathematical cryptographic algorithm which produces

65
00:05:54,190 --> 00:05:59,620
an and meaningful string, which can then be decrypted to obtain the original content.

66
00:06:00,700 --> 00:06:07,240
Encryption often uses keys the secret values used to encrypt and decrypt the data, which are known

67
00:06:07,240 --> 00:06:10,030
only to the parties that exchange the information.

68
00:06:10,780 --> 00:06:16,720
It prevents someone who broke the encryption mechanism to read the content because they would also need

69
00:06:16,720 --> 00:06:18,310
to know the secret keys.

70
00:06:19,750 --> 00:06:25,780
This is called the symmetric key approach, as the same key is used to encrypt and decrypt the data.

71
00:06:26,560 --> 00:06:32,710
The problem with these keys is that they have to be securely exchanged before any communication begins.

72
00:06:35,100 --> 00:06:40,140
This is why asymmetric encryption has been invented in which multiple keys are used.

73
00:06:40,890 --> 00:06:49,110
For example, each party has their private and public key, which are mathematically related data encrypted

74
00:06:49,110 --> 00:06:56,220
with public key of person A can be decrypted only by private key of that person and vice versa.

75
00:06:56,970 --> 00:07:03,360
So if Bob wants to security communicate with Alice, he uses her public key to encrypt the message,

76
00:07:03,780 --> 00:07:06,780
and then she uses her private key to decrypt it.

77
00:07:08,290 --> 00:07:14,620
Alice's response is then encrypted with Bob's public key, and he needs to use his private key to read

78
00:07:14,620 --> 00:07:14,800
it.

79
00:07:16,390 --> 00:07:23,830
In fact, anyone can now encrypt information using aliases or books, public keys, but only they respectively

80
00:07:23,830 --> 00:07:25,390
will be able to decrypt it.

81
00:07:26,470 --> 00:07:31,840
There is no way to decrypt the data using the same public key that was used to encrypt it.

82
00:07:33,340 --> 00:07:37,450
This is a very important step during SSL or TLC handshake.

83
00:07:37,690 --> 00:07:41,590
That is when the browser is establishing a secure connection with the server.

84
00:07:42,370 --> 00:07:45,040
There would be no way to secure the exchange.

85
00:07:45,040 --> 00:07:49,600
A symmetric key with each website you would like to visit prior to visiting it.

86
00:07:50,590 --> 00:07:57,250
So your browser uses the public key from the certificate to encrypt a secret random string, which,

87
00:07:57,250 --> 00:08:02,680
because it's encrypted with the server's public key, can only be decrypted with its private key.

88
00:08:03,730 --> 00:08:10,150
This secret random is then used in combination with other values to generate a signature key on both

89
00:08:10,150 --> 00:08:10,630
ends.

90
00:08:11,710 --> 00:08:15,580
Only the browser and the legitimate server will know that secret random.

91
00:08:15,880 --> 00:08:21,250
So they will end up with the same symmetric key without having to transfer it over the network.

92
00:08:25,450 --> 00:08:28,270
You might think of caching as a one way encryption.

93
00:08:28,780 --> 00:08:35,260
What is hashed cannot be discussed or decrypted because getting the original data from a hashed string

94
00:08:35,260 --> 00:08:37,540
is much harder than from an encrypted string.

95
00:08:37,900 --> 00:08:41,980
Hashing is the solution to storing user passwords into databases, for example.

96
00:08:42,850 --> 00:08:48,850
Even knowing the hashing algorithm would not let the attacker decrypt the passwords because by design

97
00:08:48,850 --> 00:08:50,800
they don't have decryption methods.

98
00:08:51,400 --> 00:08:57,640
And when the user logs in what they enter as a password is hashed using the same algorithm as during

99
00:08:57,640 --> 00:08:58,420
registration.

100
00:08:59,020 --> 00:09:02,890
And this is compared to the hash stored in the database.

101
00:09:03,550 --> 00:09:06,340
So you really don't need to store the actual password.

102
00:09:07,750 --> 00:09:13,300
This snippet is not an actual code, but the code illustration of the logic that I was describing.

103
00:09:14,860 --> 00:09:21,660
There exist many hashing algorithms from which most popular are MD5 security hash algorithms.

104
00:09:21,710 --> 00:09:29,020
SHA which is actually a family of hashing functions that divides into several groups SHA zero, SHA1,

105
00:09:29,020 --> 00:09:35,530
Satu and SHA three where Qatari is of course using the most recent and advanced algorithms.

106
00:09:36,910 --> 00:09:45,790
To and shut three groups divided further into for example SHA256 or SHA 512, which represent the number

107
00:09:45,790 --> 00:09:47,530
of bits in a hash string.

108
00:09:48,670 --> 00:09:55,030
In other words, SHA 512 will give longer, stronger hash than the SHA256.

109
00:09:56,350 --> 00:10:05,590
There's also rape MDR, which also comes in different hassling versions like rape MDA 160, 256 or 320.

110
00:10:06,640 --> 00:10:16,450
There's wearable typically if to decrypt a script or are going to some hashing methods are not considered

111
00:10:16,450 --> 00:10:17,530
secure anymore.

112
00:10:17,950 --> 00:10:23,620
Many of them were invented in 1990, and at that time they were impossible to break.

113
00:10:23,920 --> 00:10:28,960
But with the computational power available nowadays, it's turned out that some of them produce their

114
00:10:28,960 --> 00:10:30,280
resolvable output.

115
00:10:30,970 --> 00:10:35,410
Also, algorithms like MD5 fell into the trap of their popularity.

116
00:10:35,920 --> 00:10:41,110
So many services used them that some people started to release the hashes and corresponding values,

117
00:10:41,440 --> 00:10:46,930
so it became trivial to decrypt the hash that is just search for the corresponding value.

118
00:10:47,740 --> 00:10:53,620
Also, some methods can produce the same has for different input data, which is known as collision.

119
00:10:54,340 --> 00:10:56,950
It's especially dangerous as in case of a password.

120
00:10:56,950 --> 00:11:02,890
An attacker might enter a wrong password and get inside, if only what their input produces the same

121
00:11:02,890 --> 00:11:04,540
hash as a real password.

122
00:11:05,830 --> 00:11:11,560
From this list, the algorithms in the end are considered the most secure and are recommended these

123
00:11:11,560 --> 00:11:12,010
days.

124
00:11:13,460 --> 00:11:19,190
Especially be gripped script and are going to are the way to go for hashing passwords.

125
00:11:20,240 --> 00:11:26,270
Hashing passwords is the special case of hashing in which it's good if the operation is made intentionally

126
00:11:26,270 --> 00:11:30,140
slow to prevent getting too many passwords in the shortest time.

127
00:11:30,890 --> 00:11:36,950
All of those three algorithms have caused parameters that can be increased over time to raise the hashing

128
00:11:36,950 --> 00:11:41,900
complexity in response to increasing computational power in future computers.

129
00:11:43,790 --> 00:11:50,000
Let me also warn you straight away that combining multiple hashing methods can do more harm than good

130
00:11:50,000 --> 00:11:53,120
and is generally considered as weakening security.

131
00:11:54,020 --> 00:12:00,140
No hashing algorithm is designed to work with another hashing algorithm, and the variety of problems

132
00:12:00,140 --> 00:12:01,790
could emerge when combining them.

133
00:12:02,720 --> 00:12:08,930
It's enough to choose a single strong enough method like one of those three mentioned above, and enforce

134
00:12:08,930 --> 00:12:15,890
a reasonable password security policy, which we'll talk about later in the course and never create

135
00:12:15,890 --> 00:12:17,600
hashing algorithm on your own.

136
00:12:18,110 --> 00:12:24,140
Even if you think you can come up with some neat secret algorithm, you will not even realize the potential

137
00:12:24,140 --> 00:12:25,070
weaknesses in it.

138
00:12:25,670 --> 00:12:27,320
Do use the proven methods.

139
00:12:30,270 --> 00:12:36,840
When talking about web security, often you might come upon the term origin in contexts like same origin

140
00:12:36,840 --> 00:12:41,730
policy or across origin resource sharing, abbreviated to course.

141
00:12:42,750 --> 00:12:45,960
You can think of it as the base of your science address.

142
00:12:46,620 --> 00:12:51,960
It specifically consists of scheme host or domain and port.

143
00:12:52,740 --> 00:12:55,860
In this context, such set is called a couple.

144
00:12:57,390 --> 00:13:05,760
For example, if your site run said east https example dot com slash my site your origin is htp example

145
00:13:05,760 --> 00:13:08,380
dot com but not htp.

146
00:13:08,430 --> 00:13:17,880
Example dot com because the protocol doesn't match htp as w w w example dot com because the domain doesn't

147
00:13:17,880 --> 00:13:24,840
match htp as example dot com port 81 because the port doesn't match.

148
00:13:26,790 --> 00:13:32,520
Origin is the base for same origin policy and across origin resource sharing mechanisms.

149
00:13:33,360 --> 00:13:39,180
The former exists to protect sites from unauthorised interaction by scripts hosted on other domains.

150
00:13:39,480 --> 00:13:42,000
Or we could say at another origin.

151
00:13:43,620 --> 00:13:50,160
The latter's purpose is to allow cross origin requests by explicitly defining which external origins

152
00:13:50,190 --> 00:13:53,460
can have access to selected resources on the server.

153
00:13:54,810 --> 00:14:02,100
For example, if the Origin A wants to access something from the origin b b needs to explicitly allow

154
00:14:02,100 --> 00:14:03,210
A to do so.

155
00:14:04,020 --> 00:14:08,850
And while B allows a request from C can still be rejected.

156
00:14:11,410 --> 00:14:17,290
You don't really need to worry about what the origin is as long as you don't access external resources

157
00:14:17,290 --> 00:14:25,000
at all, or only embed external images, videos, styles, scripts and iframes.

158
00:14:26,080 --> 00:14:28,230
However, things start to complicate.

159
00:14:28,240 --> 00:14:34,510
For example, when you need to run an example http request also known as Ajax to request to another

160
00:14:34,510 --> 00:14:35,020
domain.

161
00:14:38,000 --> 00:14:45,440
Security by obscurity is the method of securing a system by using confusing or enigmatic names for the

162
00:14:45,440 --> 00:14:52,040
system components so that it's difficult to understand how it works and to find out certain information.

163
00:14:52,970 --> 00:14:58,340
An example would be a JavaScript code in which variable and function names make no sense.

164
00:14:59,840 --> 00:15:01,970
You have no idea what this code does, right?

165
00:15:02,570 --> 00:15:08,210
But after inspecting the rest of script and the team code, you start understanding the application's

166
00:15:08,210 --> 00:15:11,810
logic and you can find out what this particular code is doing.

167
00:15:13,310 --> 00:15:18,680
So because it doesn't actually add much protection, only makes the code analysis a little harder.

168
00:15:19,100 --> 00:15:22,430
It's widely considered as ineffective, and I agree.

169
00:15:23,300 --> 00:15:28,250
But to some extent, this technique might help to fend off some part of potential attacks.

170
00:15:29,120 --> 00:15:35,000
The more traps you put in both big and small, the greater the chance that someone wanting to break

171
00:15:35,000 --> 00:15:37,160
your app will abandon their tries.

172
00:15:38,360 --> 00:15:44,180
For example, a large amount of attacks target some defaults, typical elements on pages like logging

173
00:15:44,180 --> 00:15:48,560
screens of popular applications or traditional usernames like admin.

174
00:15:49,580 --> 00:15:56,060
So changing the default URL of admin panel might keep some part of automated attacks of your site.

175
00:15:56,870 --> 00:16:00,200
The panel itself is not more secure when you change its URL.

176
00:16:00,560 --> 00:16:03,080
The form and processing methods are the same.

177
00:16:03,500 --> 00:16:09,080
But because it's harder to find it, some attackers might just go on to find another target.

178
00:16:09,890 --> 00:16:11,660
The same with admin username.

179
00:16:12,230 --> 00:16:18,830
If you change the default admin username to super admin load, the log in mechanism itself doesn't get

180
00:16:18,830 --> 00:16:19,640
more secure.

181
00:16:20,090 --> 00:16:24,320
But anyone trying to exploit the typical usernames will be fended off.

182
00:16:25,370 --> 00:16:31,730
So while this concept doesn't harden your mechanisms, it may still be useful as an additional security

183
00:16:31,730 --> 00:16:35,450
measure and a way to keep of some bots and script kiddies.

184
00:16:35,450 --> 00:16:36,020
At least.

185
00:16:37,310 --> 00:16:42,980
Having said that, never use this concept to obscure anything to a point in which you are getting lost

186
00:16:42,980 --> 00:16:44,240
in your own code.

187
00:16:45,050 --> 00:16:50,780
For example, if you want to obscure your JavaScript file by setting and meaningful names for your variables

188
00:16:50,780 --> 00:16:53,870
and functions, do it with an automated tool.

189
00:16:54,260 --> 00:16:59,540
Keep your development file clean and tidy and then run it through some obfuscate or before deploying

190
00:16:59,540 --> 00:17:00,350
to the server.

191
00:17:01,250 --> 00:17:06,770
This, of course, will not prevent your code from being read and understood by anyone who really wants

192
00:17:06,770 --> 00:17:07,400
to do that.

193
00:17:07,940 --> 00:17:09,770
It will only slow them down.
