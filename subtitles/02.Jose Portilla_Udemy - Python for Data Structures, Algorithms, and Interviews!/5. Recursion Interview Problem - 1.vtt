WEBVTT
1

00:00:01.380  -->  00:00:06.780
Hello everyone and welcome to the first interview problem for the recursions section of this course

2

00:00:07.230  -->  00:00:10.570
where you'll have to reverse a string using recursion.

3

00:00:10.920  -->  00:00:16.470
Before we begin I want to remind you how you can get to this lecture or at least a notebook related

4

00:00:16.470  -->  00:00:22.340
to it once you're at the Python for Algor algorithms data structures interviews repo.

5

00:00:22.350  -->  00:00:28.020
You can go to the recursion folder here you'll see another folder called recursion interview problems

6

00:00:28.040  -->  00:00:28.310
.

7

00:00:28.620  -->  00:00:29.780
You can go in and click it.

8

00:00:29.850  -->  00:00:35.970
You'll see two other folders solutions and then problems go ahead and then click problems and you can

9

00:00:35.970  -->  00:00:39.130
see the for real interview problems set up.

10

00:00:39.510  -->  00:00:42.780
And then we have the reverse a string notebook.

11

00:00:42.780  -->  00:00:48.390
So what I want you to do for this interview question is you're required to reverse a string using recursion

12

00:00:49.170  -->  00:00:52.730
and really make sure you think of what the base case is going to look like here.

13

00:00:53.250  -->  00:00:54.920
So again you have to use recursion.

14

00:00:55.170  -->  00:00:58.080
Don't use slices or use some sort of iteration for this.

15

00:00:58.080  -->  00:01:00.820
You have to use recursion in your function here.

16

00:01:00.900  -->  00:01:02.870
You can fill out your solution below.

17

00:01:03.300  -->  00:01:10.860
And here's an example of it being used reverse takes and a string hello world outputs the reverse of

18

00:01:10.860  -->  00:01:12.120
Hello World.

19

00:01:12.120  -->  00:01:18.550
Once you filled this out you can test your solution by running the cell below here so you can run the

20

00:01:18.550  -->  00:01:21.420
cell to test your function against some test cases.

21

00:01:21.630  -->  00:01:24.020
Here the test cases.

22

00:01:24.020  -->  00:01:31.590
It uses the assert equal as always from those tools to test and you see this print statement passed

23

00:01:31.620  -->  00:01:32.970
all test cases.

24

00:01:32.970  -->  00:01:34.880
If you passed all the test cases.

25

00:01:34.980  -->  00:01:35.640
All right.

26

00:01:35.760  -->  00:01:37.930
So keep in mind you have to use recursion.

27

00:01:37.950  -->  00:01:41.190
There should be another call here of reverse.

28

00:01:41.190  -->  00:01:42.940
Somewhere in this function.

29

00:01:42.960  -->  00:01:44.710
In order for it to be recursive.

30

00:01:44.790  -->  00:01:50.340
Think of what the base case would look like and just take your time with it really focus.

31

00:01:50.370  -->  00:01:56.710
Try timing yourself seek and see how long it takes you and treat it as a real interview question.

32

00:01:56.760  -->  00:01:57.480
All right.

33

00:01:57.570  -->  00:01:58.240
Best of luck.

34

00:01:58.260  -->  00:02:04.200
Remember you can always download the notebook right here with this button on the top right in the Jupiter

35

00:02:04.580  -->  00:02:09.490
viewer or a few forked everything and get her to get her eyeblink here as well.

36

00:02:09.750  -->  00:02:13.250
You can just have it downloaded and then run it locally.

37

00:02:13.260  -->  00:02:15.030
All right thanks everyone.

38

00:02:15.030  -->  00:02:16.620
Best of luck in the next lecture.

39

00:02:16.650  -->  00:02:17.750
We'll go over the solution
