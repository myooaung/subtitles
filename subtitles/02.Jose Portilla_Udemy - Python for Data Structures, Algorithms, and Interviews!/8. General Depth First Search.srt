1

00:00:01,530  -->  00:00:07,320
Hello everyone and welcome to the general depth first search lecturer.

2

00:00:07,340  -->  00:00:12,270
So in this lecture again we're just going to get a general overview of the F S and then afterwards we're

3

00:00:12,270  -->  00:00:18,750
going to do a full live code walk through implementation of a graph a node class A B A Fs and a DFS

4

00:00:18,750  -->  00:00:19,260
.

5

00:00:19,290  -->  00:00:26,390
We haven't seen B and DFS live coded out yet we've just seen images of example code in the next lectures

6

00:00:26,400  -->  00:00:27,990
following this one we're going to actually live.

7

00:00:27,990  -->  00:00:28,720
Cut them out.

8

00:00:28,740  -->  00:00:32,460
Explain all the steps you need and then you'll actually those are going to be your interview questions

9

00:00:32,460  -->  00:00:35,920
as well as to implement each of those.

10

00:00:35,940  -->  00:00:41,640
So previously we discuss the Knight's Tour and the Knight's Tour is actually a special case of a depth

11

00:00:41,760  -->  00:00:47,850
first search where the goal is to create a deepest that first search tree without any branches.

12

00:00:47,850  -->  00:00:53,340
So that makes sense because for the night's tour we wanted to visit each node exactly one time without

13

00:00:53,340  -->  00:00:55,040
going back to the other nodes.

14

00:00:55,110  -->  00:00:57,980
So that would be your deepest DFS street.

15

00:00:58,410  -->  00:01:02,080
The more general depth first search Sexual a little easier.

16

00:01:02,130  -->  00:01:07,680
Its goal is to search as deeply as possible connecting as many nodes in the graph as possible in branching

17

00:01:07,680  -->  00:01:12,350
where necessary.

18

00:01:12,540  -->  00:01:16,880
So it's actually even possible that that first search will create more than one tree.

19

00:01:17,010  -->  00:01:21,510
When that first search algorithm creates a group of trees we're actually going to call this a depth

20

00:01:21,600  -->  00:01:23,190
first force.

21

00:01:23,220  -->  00:01:31,170
And as with CFS our depth first search makes use of Predecessor links to construct the tree.

22

00:01:31,170  -->  00:01:36,930
So in addition to that the first search will make use of two additional instance variables in the vertex

23

00:01:36,930  -->  00:01:37,810
class.

24

00:01:38,040  -->  00:01:42,050
That's going to be the new instance variables discovery in finish times.

25

00:01:42,420  -->  00:01:47,850
So this is just for the code that we're going to see later on this lecture that these two instance variables

26

00:01:47,850  -->  00:01:48,930
are going to be useful to us.

27

00:01:48,930  -->  00:01:54,840
We're trying to implement DFS the discovery time variable tracks a number of steps in the algorithm

28

00:01:54,960  -->  00:02:00,740
before vertexes first encountered and the finished Time is a number of steps in the algorithm before

29

00:02:00,750  -->  00:02:03,560
a vertex coloured black.

30

00:02:03,570  -->  00:02:06,370
So this is essentially what the code looks like.

31

00:02:06,420  -->  00:02:13,260
Here we have the entire DFS graph function or a class object and we have two methods in it besides the

32

00:02:13,260  -->  00:02:16,490
initialization method we have DFS and the first visit.

33

00:02:16,560  -->  00:02:18,680
Don't worry too much about this code itself.

34

00:02:18,740  -->  00:02:21,210
Actually implement this later on.

35

00:02:21,210  -->  00:02:22,800
Or a version of this later on.

36

00:02:22,920  -->  00:02:29,170
What I want to do just briefly explain what this code would do as an example of a DFS.

37

00:02:29,250  -->  00:02:34,220
So we have these two functions or methods inside the class.

38

00:02:34,290  -->  00:02:36,000
DFS and DFS visit

39

00:02:38,880  -->  00:02:44,280
and this implementation is basically an extension of a Graf's unnoticed that it's inheriting inheriting

40

00:02:44,280  -->  00:02:46,200
a graph here.

41

00:02:46,200  -->  00:02:51,900
So this implementation extends the graph class basically by adding a time instance variable and then

42

00:02:51,900  -->  00:02:55,980
the two methods DFS and the first visit which we see here.

43

00:02:55,980  -->  00:02:59,040
So looking at this line right here.

44

00:02:59,040  -->  00:03:07,530
So for a vertex in self which has zoomed in here for a vertex and self underneath the DFS function you'll

45

00:03:07,530  -->  00:03:13,080
notice that the DFS method iterates over all the vertices in the graph calling DFS visit.

46

00:03:13,080  -->  00:03:18,060
So the first visit is essentially a helper function for DFS.

47

00:03:18,060  -->  00:03:23,910
And the reason we iterate over all the notes rather than simply searching from a chosen starting node

48

00:03:24,270  -->  00:03:29,190
is to make sure that all the nodes in the graph are considered and that no vertices are left out of

49

00:03:29,190  -->  00:03:30,150
the depth first.

50

00:03:30,200  -->  00:03:37,020
For us so it may look a little unusual to the statement for a vertex in cells.

51

00:03:37,080  -->  00:03:43,830
Remember that in this case self is an instance of the DFS graph class and iterating over all the vertices

52

00:03:43,830  -->  00:03:46,870
an instance of a graph is actually a natural thing to do.

53

00:03:47,250  -->  00:03:52,260
So don't worry about this kind of unusual statement of for itself.

54

00:03:53,110  -->  00:03:53,620
OK.

55

00:03:53,880  -->  00:03:59,860
So moving on we'll check out the DFS visit method a little closer.

56

00:04:00,060  -->  00:04:06,000
The DFS visit method starts with a single vertex called Start vertex and then explores all the neighboring

57

00:04:06,000  -->  00:04:09,050
white vertices as deeply as possible.

58

00:04:09,090  -->  00:04:16,660
If you look carefully at the code for DFS visit and compare it to the breadth first search or CFS.

59

00:04:16,950  -->  00:04:23,580
What you'll notice is that the DFS visit algorithm is actually almost identical to be EF-S except for

60

00:04:23,580  -->  00:04:27,220
that on the last line of the inner for loop.

61

00:04:27,300  -->  00:04:31,720
So DFS visit calls itself recursively to continue the search.

62

00:04:31,730  -->  00:04:33,280
A deeper level.

63

00:04:33,450  -->  00:04:39,540
So if we take a look here it's going to be recursively called DFS visit right here.

64

00:04:40,130  -->  00:04:45,400
So is being recursively called and it's going to try to do that to continue the search for a deeper

65

00:04:45,400  -->  00:04:46,160
level.

66

00:04:46,360  -->  00:04:53,310
Whereas b fs as the no to a queue for later exploration and it's interesting to note that we're b fs

67

00:04:53,350  -->  00:05:00,040
uses a q DFS visit uses a stack and you don't see a stack here in the code but it's implicit in the

68

00:05:00,040  -->  00:05:01,450
recursive call.

69

00:05:01,630  -->  00:05:04,370
So I know it is a little complicated but don't worry about it too much.

70

00:05:04,480  -->  00:05:08,450
We're going to walk through the full implementation later on in a feature lecture.

71

00:05:08,480  -->  00:05:13,200
This is just to give you an idea of what it may look like if you're trying to implement this code.

72

00:05:13,370  -->  00:05:17,010
So to get a better understanding of what's actually going on let's go ahead and try to diagram this

73

00:05:17,010  -->  00:05:17,260
out.

74

00:05:17,260  -->  00:05:19,360
The sequence of figures.

75

00:05:19,570  -->  00:05:26,290
So this sequence of figures for an AC is going to illustrate a DFS algorithm in action for a pretty

76

00:05:26,290  -->  00:05:32,750
small graph just a through f here and in these figures the dotted line indicates edges that are checked

77

00:05:33,230  -->  00:05:38,470
but the node at the other end of the edge has already been added to the depth first search first tree

78

00:05:41,090  -->  00:05:46,060
and in the code that we previously just saw that this test is done by checking that the color of the

79

00:05:46,150  -->  00:05:48,130
other note is non-white.

80

00:05:48,130  -->  00:05:49,240
So take a look at this.

81

00:05:49,240  -->  00:05:52,670
The search begins at Vertex of the graph right here.

82

00:05:52,930  -->  00:05:58,760
And since all the vertices are white at the beginning of the search the algorithm visits vertex a that

83

00:05:58,780  -->  00:05:59,920
very first node.

84

00:06:00,460  -->  00:06:06,070
The first that in visiting a vertex is to set the color as gray which indicates that the vertex is being

85

00:06:06,070  -->  00:06:08,890
explored and then we set discovery time.

86

00:06:08,890  -->  00:06:15,700
So one since vertex has two adjacent vertices B and these so we can see the edges here connecting B

87

00:06:15,690  -->  00:06:17,770
and D.

88

00:06:17,770  -->  00:06:23,200
Each of those needs to be visited as well and then we can actually make an arbitrary decision that will

89

00:06:23,200  -->  00:06:30,400
visit the adjacent vertices in alphabetical order so that vertex B is going to be visited next.

90

00:06:30,400  -->  00:06:37,360
So its color is set to Grey and then its discovery time is set to two vertex be also adjacent to two

91

00:06:37,360  -->  00:06:38,150
other nodes.

92

00:06:38,170  -->  00:06:39,560
C and D.

93

00:06:39,640  -->  00:06:45,530
So we're going to follow the same alphabetical order and then visit C node C next.

94

00:06:45,550  -->  00:06:46,240
All right.

95

00:06:46,570  -->  00:06:52,240
So this is a vertex see brings us the end of a branch of the tree because if we look at this we have

96

00:06:52,390  -->  00:06:57,740
a direct edge direct that edge and then no more there at that edges coming out of C..

97

00:06:57,820  -->  00:07:02,890
So we've come to the end of one branch of the tree after coloring the node grades setting its discovery

98

00:07:02,890  -->  00:07:04,450
time to three.

99

00:07:04,510  -->  00:07:08,740
The algorithm also determines that there is no adjacent vertices to see.

100

00:07:08,800  -->  00:07:11,300
This means that we are done exploring notes C.

101

00:07:11,470  -->  00:07:17,100
So then we can color it Black sense and set the finish time to four.

102

00:07:17,100  -->  00:07:17,980
All right.

103

00:07:18,760  -->  00:07:25,600
So again we when we visit c we realize that it goes from gray to black because there's no other vertices

104

00:07:25,900  -->  00:07:26,640
coming out of it.

105

00:07:26,650  -->  00:07:34,870
We reached the end of a branch and since vertex C was the end of one branch we can now return to vertex

106

00:07:34,960  -->  00:07:40,960
B and continue exploring and or the nodes adjacent to be the only additional vertex to explore from

107

00:07:40,960  -->  00:07:42,910
B is the cause.

108

00:07:42,910  -->  00:07:46,230
Notice how the edge goes out to sea and out to D.

109

00:07:46,540  -->  00:07:53,500
So vertex D is then explored and we continue our search from vertex D which then quickly leads us to

110

00:07:53,500  -->  00:07:57,510
vertex E and Vertex e.

111

00:07:57,520  -->  00:07:59,570
Sorry I jumped a bit there.

112

00:07:59,740  -->  00:08:03,250
Virtex e has two adjacent vertices B and.

113

00:08:03,580  -->  00:08:09,190
Normally we would explore these adjacent vertices alphabetically but since B is already colored gray

114

00:08:09,520  -->  00:08:13,900
the algorithm recognizes that it should not visit B since doing so would put the algorithm in a loop

115

00:08:13,980  -->  00:08:14,580
right.

116

00:08:14,620  -->  00:08:17,680
You would just constantly be going EBD EBD e.

117

00:08:17,830  -->  00:08:20,950
So recognize is ok be is gray meaning it's explored.

118

00:08:21,160  -->  00:08:28,150
So imma go ahead and check out the white note here and then we note that vertex F has only one adjacent

119

00:08:28,150  -->  00:08:30,520
vertex C..

120

00:08:30,760  -->  00:08:36,640
So since C is color black and there's nothing else to explore the algorithm has reached the end of another

121

00:08:36,640  -->  00:08:42,420
branch and then from here on you can see that the algorithm works his way back to the first node setting

122

00:08:42,430  -->  00:08:47,680
the finish times and then coloring each Vernice black for each vertex out of his black.

123

00:08:47,680  -->  00:08:53,890
So I'll keep setting the finish times as we continue on and sudden and black as you basically go in

124

00:08:53,890  -->  00:08:55,640
reverse.

125

00:08:56,260  -->  00:09:01,510
So the starting and finishing times for each node display displayer property called parentheses property

126

00:09:02,050  -->  00:09:07,960
and this property means that all the children of a particular note in the first tree have a later discovery

127

00:09:07,960  -->  00:09:11,790
time than an earlier finished time than their parent.

128

00:09:12,870  -->  00:09:15,610
OK so I know there's is a lot to take in.

129

00:09:15,610  -->  00:09:23,230
Again you can check out the MIT algorithms course video playlist for a further discussion of DFS.

130

00:09:23,400  -->  00:09:29,680
We're going to do next is basically go back to our roots in Python and implement all of these these

131

00:09:29,680  -->  00:09:34,840
Cravath notes that breadth first search in the depth first search in a way that would be acceptable

132

00:09:34,840  -->  00:09:36,300
in an interview setting.

133

00:09:36,400  -->  00:09:41,050
So you can go ahead and explore those topics independently or on your own if you're interested in graph

134

00:09:41,230  -->  00:09:42,510
theory a little more.

135

00:09:42,670  -->  00:09:48,160
But the basic three questions are going to be asked in interview at least at a basic level is going

136

00:09:48,160  -->  00:09:52,640
to be to implement a graph to implement B FS and then implement DFS.

137

00:09:52,660  -->  00:09:58,510
So there's three real key interview questions so that's what we're going to cover at least how to implement

138

00:09:58,510  -->  00:10:03,100
them in the next three lectures and then interview questions are just going to be asking you to repeat

139

00:10:03,100  -->  00:10:04,530
those independently.

140

00:10:04,840  -->  00:10:05,520
Okay.

141

00:10:05,770  -->  00:10:09,820
Thanks everyone and I will see you at the next lecture where we're going to actually implement everything

142

00:10:09,820  -->  00:10:10,480
we just learn
