WEBVTT
1

00:00:01.140  -->  00:00:07.080
Hello everyone and often to say Question three solution for the social network company mock interviewed

2

00:00:07.980  -->  00:00:12.930
for this problem you were assigned to create a function that takes and a list of unsorted prices which

3

00:00:12.930  -->  00:00:18.680
are integers and a maximum possible price value and then return a sorted list of prices.

4

00:00:19.320  -->  00:00:24.690
So this problem's actually perfect for accounting sort and if you're unfamiliar of counting story click

5

00:00:24.690  -->  00:00:27.710
this link will take you here.

6

00:00:28.080  -->  00:00:29.150
Go ahead and check it out.

7

00:00:29.340  -->  00:00:34.500
And in order to fully understand the algorithm come down to this algorithm section and walk yourself

8

00:00:34.500  -->  00:00:35.990
through the pseudo code.

9

00:00:36.420  -->  00:00:37.120
OK.

10

00:00:37.560  -->  00:00:41.310
So once you've done that then come here and check this out.

11

00:00:41.310  -->  00:00:48.000
So we have our solution implementation but basically just keep in mind that the most general form of

12

00:00:48.000  -->  00:00:54.090
this problem is unce a list of unsorted integers and a maximum possible integer value and you have to

13

00:00:54.090  -->  00:00:57.290
sort them here we're using prices but it can be anything.

14

00:00:57.300  -->  00:01:00.220
B scores for a videogame etc..

15

00:01:00.330  -->  00:01:04.420
So let's go ahead and try to walk through our solution.

16

00:01:04.800  -->  00:01:09.400
So first thing we're going to do is take in the unsorted prices

17

00:01:14.590  -->  00:01:18.300
that's going to be a list of unsorted prices and then we have a max price.

18

00:01:18.330  -->  00:01:24.300
Again this could be anything but it's an unsorted list of integers and a maximum possible integer.

19

00:01:24.600  -->  00:01:31.230
Then I'm going to create an object called prices to counts and that's going to be basically a list of

20

00:01:31.230  -->  00:01:40.080
zeros that go from zero to max price so I'm going to multiply it by Max Price.

21

00:01:40.080  -->  00:01:46.250
And because indexing starts at zero on Python you can do max price plus one here.

22

00:01:46.530  -->  00:01:54.090
Next thing to populate prices saying let's say for price in unsorted prices

23

00:01:57.210  -->  00:02:03.260
prices two counts at that price.

24

00:02:04.050  -->  00:02:08.590
I'm going to add one.

25

00:02:10.050  -->  00:02:10.400
OK.

26

00:02:10.410  -->  00:02:11.750
So then what we're going to do.

27

00:02:12.060  -->  00:02:20.970
I'm going to create a empty list which will be sorted prices and this is actually going to return.

28

00:02:20.970  -->  00:02:22.840
So right now it's empty.

29

00:02:23.970  -->  00:02:33.570
But at the end I'm going to say return sorted prices and then for each price and price counts.

30

00:02:33.660  -->  00:02:39.440
But I'm going to do this I'm going to say for price.

31

00:02:40.490  -->  00:02:43.390
And then let's say it counts in enumerates

32

00:02:46.020  -->  00:02:49.340
prices to count

33

00:02:52.680  -->  00:03:05.490
for the number of times the element occurs some say for a time in a range of the counts just add it

34

00:03:05.490  -->  00:03:07.870
to that sort of price list.

35

00:03:08.310  -->  00:03:14.710
So take sort of prices and then append that price.

36

00:03:14.760  -->  00:03:15.160
OK.

37

00:03:15.210  -->  00:03:17.000
So let's go ahead and see how this works
