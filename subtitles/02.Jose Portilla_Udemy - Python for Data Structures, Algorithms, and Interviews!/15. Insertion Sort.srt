1

00:00:02,310  -->  00:00:06,890
Hello everyone and welcome to the lecture on insertion sort.

2

00:00:06,990  -->  00:00:13,500
So as always we'll be looking for an explanation and some visualizations of this sorting algorithm and

3

00:00:13,500  -->  00:00:16,920
in the next Look troll actually implement it in Python.

4

00:00:17,820  -->  00:00:25,290
So this insertion sort always maintains assorted sublist in the lower positions of the list and we'll

5

00:00:25,290  -->  00:00:27,660
see what we mean by that in a figure in just a second.

6

00:00:27,690  -->  00:00:34,590
But basically what happens is each new item is inserted back into that previous sublist such that the

7

00:00:34,590  -->  00:00:37,300
sorted sublist is one item larger.

8

00:00:37,470  -->  00:00:42,870
So you have this little portion of your list the sub list that you assume is already sorted and you're

9

00:00:42,870  -->  00:00:48,420
basically passing the other elements from your array or list into that sublist and sorting them as you

10

00:00:48,420  -->  00:00:49,900
put them in there.

11

00:00:50,280  -->  00:00:52,980
So you begin by assuming that a list of one item.

12

00:00:53,040  -->  00:00:57,490
So your element a position zero or index 0 is already sorted.

13

00:00:57,930  -->  00:01:04,080
And then on each pass one for each item one through and minus one the current item is checked against

14

00:01:04,080  -->  00:01:06,480
those already in that sorted sublists.

15

00:01:06,900  -->  00:01:11,730
And then as we look back into the already sorted sublist we shift those items that are greater to the

16

00:01:11,730  -->  00:01:17,700
right and then when we reach a smaller item or the end of the sublist the current item can be inserted

17

00:01:17,700  -->  00:01:18,810
.

18

00:01:18,900  -->  00:01:21,640
So it's good to look at a figure of this actually happening.

19

00:01:21,780  -->  00:01:28,540
So we assume as I mentioned here that your first item is sorted out of a list of one.

20

00:01:28,560  -->  00:01:35,380
So the shaded items here represent that order it's sublease in the algorithm as it makes each pass.

21

00:01:35,490  -->  00:01:43,020
So we're assuming 54 that element 54 is a sort of list of one item and then we're going to do is go

22

00:01:43,440  -->  00:01:50,340
to the first item and the rest that list number 26 and then insert it into that sub list and then we

23

00:01:50,430  -->  00:01:52,290
put it before 54.

24

00:01:52,380  -->  00:01:56,320
And now you have a sorted sub list of 26 and 54.

25

00:01:56,460  -->  00:02:03,900
Then the next item 2:51 is insert into that sublist insert 17 we insert 77 and you're inserting you're

26

00:02:03,900  -->  00:02:10,640
inserting them so that the list itself that little sub list is being sorted as you go along.

27

00:02:11,190  -->  00:02:16,180
So as I mentioned before you beat your beginning by assuming that a list of one item at position zero

28

00:02:16,190  -->  00:02:16,250
.

29

00:02:16,290  -->  00:02:22,500
In this case that element number 54 is already sorted and then each pass one for each item 1 through

30

00:02:22,500  -->  00:02:23,820
and minus one.

31

00:02:23,910  -->  00:02:28,830
The current item is being checked against those already in that sorted sub list and then as you look

32

00:02:28,830  -->  00:02:34,090
back into that already sort of sub list you're going to shift those items that are greater to the right

33

00:02:34,770  -->  00:02:39,630
and then when we reach a smaller item or the end of that sub list that current item can be inserted

34

00:02:39,640  -->  00:02:39,960
.

35

00:02:40,290  -->  00:02:43,590
So it's going to look at that fifth past in detail.

36

00:02:43,590  -->  00:02:47,240
So what we're inserting number 31.

37

00:02:47,400  -->  00:02:50,190
See how that actually works.

38

00:02:50,220  -->  00:02:55,110
So you need to insert 31 back into the sorted list.

39

00:02:55,110  -->  00:02:59,000
So here at Number 31 and you see 93 is greater than 31.

40

00:02:59,010  -->  00:03:07,860
So you shift 93 1 space over to the right 77 is greater than 31 C shifted over to the right 54 is greater

41

00:03:07,860  -->  00:03:13,060
than 31 C shift 54 over to the right 26 is less than 31.

42

00:03:13,250  -->  00:03:16,180
So you insert 31 then into that position.

43

00:03:16,260  -->  00:03:20,960
So that's what I mean by reaching that smaller item or at the end of the sublist.

44

00:03:21,000  -->  00:03:23,220
And then the current item can be inserted.

45

00:03:23,220  -->  00:03:29,010
So as you're looking back into the already sorted sublist you're shifting those items are greater to

46

00:03:29,010  -->  00:03:30,240
the rights.

47

00:03:30,830  -->  00:03:32,060
Okay.

48

00:03:32,940  -->  00:03:37,460
So let's go ahead and take a look at some other visualizations that you can check out.

49

00:03:37,890  -->  00:03:40,870
So you can further understand that the insertion sort.

50

00:03:40,920  -->  00:03:47,650
Mechanism's Okay so here we are at the Jupiter notebook and you have your resources for review.

51

00:03:47,730  -->  00:03:54,750
So go and check out those resources for any visual or visualizations you want to check out this case

52

00:03:54,770  -->  00:03:54,860
.

53

00:03:54,890  -->  00:03:58,460
Ashley really quickly what the visual algo looks like here.

54

00:03:58,620  -->  00:04:01,650
So I've created this random list of sorts.

55

00:04:01,700  -->  00:04:01,950
Click.

56

00:04:01,950  -->  00:04:05,880
Go in then check out what her pseudo code is doing.

57

00:04:05,880  -->  00:04:11,760
So remember we're marking that first element as sorted and then for each sort of element we're essentially

58

00:04:11,760  -->  00:04:17,580
extracting that elements and then checking it out against where it should go.

59

00:04:18,690  -->  00:04:26,970
And then inserting it it jumped a bit here but inserting it through that mechanism where you're checking

60

00:04:26,970  -->  00:04:30,230
which ones which elements are greater.

61

00:04:30,890  -->  00:04:35,730
So as you're looking back into that already sorted sublist you shift those items are greater to the

62

00:04:35,730  -->  00:04:40,740
right and then when you reach a smaller item at the end of that sublist you can insert that current

63

00:04:40,740  -->  00:04:42,650
one you're comparing.

64

00:04:42,660  -->  00:04:44,840
So right now take one more look.

65

00:04:44,940  -->  00:04:48,860
So the next we're going to do is 36.

66

00:04:48,860  -->  00:04:54,140
So here we have Element 36 being compared to all these elements to being shifted to the right if they're

67

00:04:54,150  -->  00:04:57,150
greater than 30 it's going to get shifted to the right.

68

00:04:57,450  -->  00:04:58,380
Here you have 15.

69

00:04:58,380  -->  00:05:04,740
It's less than 36 so we're going to insert 36 26 it's going to be compared to all of these elements

70

00:05:05,160  -->  00:05:09,360
all the ones that are greater than 26 are going to be shifted to the right.

71

00:05:09,390  -->  00:05:15,970
Once we find one that is less than 26 we go ahead and stop the shifting and then insert that limits

72

00:05:15,970  -->  00:05:16,610
.

73

00:05:16,820  -->  00:05:23,490
And so if we speed up this process a little bit we'll see this happen that it's comparing it to all

74

00:05:23,490  -->  00:05:25,400
the elements in that little sub list.

75

00:05:25,440  -->  00:05:26,330
And look at that sublists.

76

00:05:26,340  -->  00:05:28,290
It's marked in yellow here.

77

00:05:28,710  -->  00:05:34,210
And then if we speed this up all the way we'll see the entire sorting process happen.

78

00:05:34,940  -->  00:05:35,410
OK.

79

00:05:35,460  -->  00:05:38,280
So I encourage you to go in and check out this visualization on your own.

80

00:05:38,280  -->  00:05:42,780
Make sure you understand that pseudo code and in the next lecture we're going to actually implement

81

00:05:42,780  -->  00:05:46,680
our own insertion sort algorithm in Python.

82

00:05:46,680  -->  00:05:49,260
All right thanks everyone and I'll see at the next lecture
