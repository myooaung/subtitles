WEBVTT
1

00:00:01.320  -->  00:00:06.450
Hello everyone and welcome to the solution lecture for the largest continuous sum problem.

2

00:00:06.930  -->  00:00:11.880
So the problem statement was given an array of integers that could be either positive or negative.

3

00:00:12.060  -->  00:00:14.680
Find the largest continuous sum.

4

00:00:14.970  -->  00:00:18.150
So our solution goes a little something like this.

5

00:00:18.420  -->  00:00:22.390
If the array is all positive then we just simply need to sum all the numbers.

6

00:00:22.500  -->  00:00:23.840
So that makes sense.

7

00:00:24.000  -->  00:00:25.460
The negative numbers in the array.

8

00:00:25.560  -->  00:00:28.970
It's what's going to cause us to need to begin checking sequences.

9

00:00:28.980  -->  00:00:32.000
So here's the algorithm we're going to follow.

10

00:00:32.100  -->  00:00:38.280
We start summing up the numbers and store in a current some variable after adding each element we check

11

00:00:38.280  -->  00:00:42.120
whether the current sum is larger than the maximum sum encountered so far.

12

00:00:42.120  -->  00:00:49.020
If it is the update that Max sum as long as the current sum is positive we keep adding the numbers when

13

00:00:49.020  -->  00:00:50.520
the current sum becomes negative.

14

00:00:50.520  -->  00:00:55.530
We start with a new current sum because a negative current sum will only decrease the sum of a future

15

00:00:55.530  -->  00:01:02.040
sequence and note that we don't reset the current sum to zero because the array can contain all negative

16

00:01:02.040  -->  00:01:02.710
numbers.

17

00:01:02.820  -->  00:01:05.940
Then the result would be the large negative number.

18

00:01:05.970  -->  00:01:11.000
So let's go ahead and see the code here and then walk through it and code it out.

19

00:01:11.520  -->  00:01:15.540
So we're going to start by just saying it's good.

20

00:01:15.600  -->  00:01:25.350
Delete this piece we're going to start out by naming our function and we're just going to call it large

21

00:01:27.160  -->  00:01:32.340
underscore cons for continuous sum and it takes in an array.

22

00:01:32.340  -->  00:01:34.720
This case or python list.

23

00:01:35.160  -->  00:01:37.360
So we're going to check to see if arrays length 0.

24

00:01:37.380  -->  00:01:46.250
First because we know that the arrays length 0 we just return 0.

25

00:01:46.260  -->  00:01:48.190
Or you could also put none.

26

00:01:48.210  -->  00:01:53.710
So what we're going to do is start the max in current sum at the first element.

27

00:01:53.990  -->  00:01:57.510
So I'm going to take in and create two variables.

28

00:01:57.510  -->  00:02:06.240
I'm going to say Max sum is equal to current sum is equal to the first element or zero.

29

00:02:07.530  -->  00:02:09.300
And now we're going to go through the algorithm.

30

00:02:09.310  -->  00:02:16.830
Scientists say for every element in the array cipher known in array and I'm actually going to skip that

31

00:02:16.830  -->  00:02:17.810
first element.

32

00:02:17.880  -->  00:02:25.730
Since you've already set it as our maximum sum in our current sum so I have that going on and then what

33

00:02:25.730  -->  00:02:29.460
I'm going to do is set the current sum as the higher of the two.

34

00:02:30.060  -->  00:02:45.140
So I'm going to say current sum is equal to max of current Some compared to what Plus the number compared

35

00:02:45.150  -->  00:02:46.990
to the number itself.

36

00:02:47.010  -->  00:02:50.690
So what I'm doing is I have my number.

37

00:02:51.150  -->  00:02:57.630
I have my current sum and I'm setting current sum plus the number we're at right now versus just a given

38

00:02:57.630  -->  00:02:58.530
number.

39

00:02:58.530  -->  00:03:02.660
Take the max of that and set it to be the current sum.

40

00:03:02.670  -->  00:03:10.620
Next one I'm going to do is my max sum is going to be whichever is greater between the current sum and

41

00:03:10.620  -->  00:03:25.390
the current max so current sum and Max sum and then I'll need to do is return the max sum.

42

00:03:26.490  -->  00:03:29.680
So let's go ahead and see if this works.

43

00:03:29.940  -->  00:03:33.920
I'm going to call and paste.

44

00:03:33.930  -->  00:03:36.190
So here we have an array.

45

00:03:36.300  -->  00:03:41.460
We have 1 2 negative 1 3 4 10 10 negative 10 and negative 1.

46

00:03:41.700  -->  00:03:46.450
So are sequence that should produce the highest sum is right here.

47

00:03:46.590  -->  00:03:49.180
Let's go ahead and see if it gets it.

48

00:03:50.010  -->  00:03:52.920
So it's calculating now and it gets 29.

49

00:03:52.920  -->  00:04:00.090
Great so many times in an interview setting this question also requires you to report back the start

50

00:04:00.180  -->  00:04:02.370
and the end points of that sum.

51

00:04:02.370  -->  00:04:05.160
Keep this in mind and see if you can solve that problem.

52

00:04:05.220  -->  00:04:07.280
We'll actually see that statement of the problem.

53

00:04:07.350  -->  00:04:12.800
Returning back to start and end points later on in the mock interview section of this course.

54

00:04:12.810  -->  00:04:18.800
So let's go ahead and walk through the solution one more time.

55

00:04:19.200  -->  00:04:23.510
So let's go ahead here and take it step by step.

56

00:04:23.520  -->  00:04:28.350
First thing we're doing we're just doing an edge case check if the array length is equal to zero.

57

00:04:28.380  -->  00:04:30.970
We just return 0 for the rest of it.

58

00:04:30.970  -->  00:04:38.340
So what we're doing we're starting by saying the max sum and the current sum is equal to the first elements

59

00:04:39.450  -->  00:04:45.180
then going along for each number in that array not including the first element.

60

00:04:45.180  -->  00:04:51.900
We take the current sum and find out which is larger the current sum plus the current number or the

61

00:04:51.900  -->  00:04:54.060
current number itself.

62

00:04:54.300  -->  00:05:01.230
Then reset the current sum equal to whichever one of those two is larger then we have the maximum sum

63

00:05:01.230  -->  00:05:02.100
tracker.

64

00:05:02.100  -->  00:05:07.350
Now we're going to keep track of current sum of Maxim to every one of those is larger gets reset for

65

00:05:07.350  -->  00:05:08.580
the max sum.

66

00:05:08.790  -->  00:05:14.640
After we go for each number in the array we'll have our final Max sum as the basically the largest current

67

00:05:14.640  -->  00:05:16.020
sum there ever was.

68

00:05:16.020  -->  00:05:20.850
Compared to the maximum and then we just returned the max sum.

69

00:05:20.850  -->  00:05:21.340
All right.

70

00:05:21.720  -->  00:05:28.010
So again we sum up the numbers and store in some sort of current sum variable which was here.

71

00:05:28.290  -->  00:05:33.060
Then after adding each element we check whether the current sum is larger that maximum sum encountered

72

00:05:33.090  -->  00:05:34.630
so far.

73

00:05:34.710  -->  00:05:39.570
If it is then we just updated that maximum sum in this line.

74

00:05:39.570  -->  00:05:44.340
As long as that current sum is positive we can just keep adding the numbers when the current sum becomes

75

00:05:44.340  -->  00:05:44.840
negative.

76

00:05:44.880  -->  00:05:50.460
We start off a new current sum because a negative current sum will only decrease the sum of a future

77

00:05:50.460  -->  00:05:51.540
sequence.

78

00:05:51.570  -->  00:05:57.570
In that note here we're not resetting that current sum to zero because the array could contain all negative

79

00:05:57.570  -->  00:05:58.490
integers.

80

00:05:58.740  -->  00:06:02.360
Then the result will just end up being that largest negative number.

81

00:06:02.530  -->  00:06:05.080
OK so that's it for the solution.

82

00:06:05.100  -->  00:06:09.090
Go ahead and go through it and really make sure that when you're going through this you're also practicing

83

00:06:09.090  -->  00:06:12.510
going through it by hand with pen and paper or on a white board.

84

00:06:12.630  -->  00:06:13.200
All right.

85

00:06:13.530  -->  00:06:15.360
Thanks everyone and I'll see you at the next lecture
