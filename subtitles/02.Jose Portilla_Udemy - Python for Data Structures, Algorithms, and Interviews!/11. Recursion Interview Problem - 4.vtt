WEBVTT
1

00:00:01.320  -->  00:00:07.770
Hello everyone and welcome to the fourth and final recursion interview problem the coin change problem

2

00:00:07.770  -->  00:00:08.430
.

3

00:00:08.520  -->  00:00:14.460
A quick note before we begin this problem has multiple solutions and it's actually a very classic problem

4

00:00:14.460  -->  00:00:15.060
and.

5

00:00:15.240  -->  00:00:18.490
It's classic because it shows some issues of basic recursion.

6

00:00:18.990  -->  00:00:23.130
So if you're having trouble with this problem or it seems to be taking a long time to run in certain

7

00:00:23.130  -->  00:00:29.340
cases really check out the solution notebook and fully read the conclusion link for a detailed description

8

00:00:29.340  -->  00:00:35.960
of the various ways to solve this problem and then something to note that this problem is actually Classique

9

00:00:35.960  -->  00:00:39.840
are common enough it's famous enough that actually has its own Wikipedia entry.

10

00:00:39.840  -->  00:00:41.510
So I've linked it here for you.

11

00:00:41.520  -->  00:00:47.030
So if you go ahead and click that link it'll take you to the Wikipedia page which is right here and

12

00:00:47.050  -->  00:00:52.100
that says the change making problem and it's a knapsack type of problem.

13

00:00:52.260  -->  00:00:54.410
Depending on how it's asked.

14

00:00:55.030  -->  00:00:56.380
But you can go ahead and check it out here.

15

00:00:56.460  -->  00:00:58.700
Check out the mathematics behind it.

16

00:00:58.830  -->  00:01:03.440
Probably then check out the pseudo code until you've had a good stab at it yourself.

17

00:01:03.450  -->  00:01:06.900
OK so let's go to and look at the problem statement.

18

00:01:06.900  -->  00:01:12.990
In this particular version what we're gonna say is given a target amount n and a list of distinct coin

19

00:01:12.990  -->  00:01:19.440
values or an array of distinct coin values was the fewest coins needed to make the change amounts.

20

00:01:19.440  -->  00:01:22.070
So for example if I say N equals 10.

21

00:01:22.090  -->  00:01:26.800
Your target and then coins your the nominations are 1 5 and 10.

22

00:01:26.820  -->  00:01:29.170
There's four possible ways to make change here.

23

00:01:29.220  -->  00:01:34.470
You can have 10 ones of five and then five ones two fives and 10.

24

00:01:34.560  -->  00:01:40.540
So the minimum amount of coins you need is one coin ten dime.

25

00:01:40.570  -->  00:01:45.820
OK so in this case I want you to implement your solution below here.

26

00:01:45.870  -->  00:01:51.890
I just have a simple recursion solution set up so it takes in that target and then that lists of coins

27

00:01:52.100  -->  00:01:58.710
right now has pass but you pass in the target and the coins and you'll get the minimum amount of coins

28

00:01:58.710  -->  00:02:01.690
used.

29

00:02:02.520  -->  00:02:07.490
It should be noted that there's other versions of this problem that ask you different things such as

30

00:02:07.500  -->  00:02:10.110
Instead of asking what's the minimum amount of coins.

31

00:02:10.110  -->  00:02:16.920
They may ask you how many kinds of how many possible ways are do to make change so they may be looking

32

00:02:16.920  -->  00:02:20.240
for this answer for possible ways instead of the minimum amount.

33

00:02:20.430  -->  00:02:26.880
Right now we're focusing on the minimum amount because of its simplistic implications of dynamic programming

34

00:02:26.880  -->  00:02:28.130
and memorization.

35

00:02:28.410  -->  00:02:33.830
So the reason this is the last recursion into the problem is because it's one of the tougher ones.

36

00:02:33.840  -->  00:02:39.840
If you approach it through a straight recursive mindset you should really think about dynamic programming

37

00:02:39.840  -->  00:02:41.670
and memorization.

38

00:02:41.670  -->  00:02:50.410
So again note the test cases here in this test cell is only going to test with two parameter inputs

39

00:02:50.420  -->  00:02:50.540
.

40

00:02:50.610  -->  00:02:54.970
The target and the list of coins if you decided to use some sort of cash.

41

00:02:55.020  -->  00:02:58.010
And that's a third argument in your solution.

42

00:02:58.020  -->  00:03:03.660
This clearly won't work because your solution here as far as a test cases is long and take into arguments

43

00:03:03.660  -->  00:03:04.140
.

44

00:03:04.260  -->  00:03:09.870
So if you're not dynamic function is taking a long time to test and you believe you have a solution

45

00:03:09.960  -->  00:03:14.220
you should go check the solution notebook instead of really running the cell.

46

00:03:14.460  -->  00:03:15.340
All right.

47

00:03:15.690  -->  00:03:16.830
So again extra.

48

00:03:16.830  -->  00:03:17.520
Best of luck.

49

00:03:17.520  -->  00:03:19.650
Remember to read the solution book for this.

50

00:03:19.710  -->  00:03:23.710
Once you think you have a solution the next lecture will be discussed in a notebook.

51

00:03:23.880  -->  00:03:29.820
It's a lot to read so it's going to be in a last homework assignment for this recursion section to fully

52

00:03:29.820  -->  00:03:35.890
read the Wikipedia entry and the entire notebook that really dives into this coin change problem.

53

00:03:36.060  -->  00:03:41.370
Because this is actually going to serve not just as an interview question but a real learning example

54

00:03:41.550  -->  00:03:47.190
of dynamic programming memorization recursion and really wrap up this section in a great way for you

55

00:03:47.190  -->  00:03:51.650
to learn everything we've learned in this section.

56

00:03:51.660  -->  00:03:54.430
So really go over all those topics.

57

00:03:54.720  -->  00:03:56.490
OK so that's it.

58

00:03:56.490  -->  00:04:00.660
Best of luck with the coin change problem once you think you've had a good stab at it and have your

59

00:04:00.660  -->  00:04:01.550
own solution.

60

00:04:01.770  -->  00:04:06.150
Go ahead and go to the next lecture where we're going to discuss and go over everything we learn in

61

00:04:06.150  -->  00:04:07.410
this section.

62

00:04:07.410  -->  00:04:09.090
All right thanks everyone.

63

00:04:09.090  -->  00:04:10.170
Best of luck.
