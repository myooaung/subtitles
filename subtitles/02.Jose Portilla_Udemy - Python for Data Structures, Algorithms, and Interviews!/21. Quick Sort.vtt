WEBVTT
1

00:00:01.140  -->  00:00:05.340
Hello everyone and welcome to lecture on quicksort.

2

00:00:05.460  -->  00:00:08.180
So in this lecture we'll get an explanation of quicksort.

3

00:00:08.330  -->  00:00:13.500
Look at some visualizations of quicksort and in the next lecture what we're going to do a full implementation

4

00:00:13.500  -->  00:00:16.540
Python of the quicksort algorithm.

5

00:00:17.550  -->  00:00:24.030
So to formally described the quicksort but the quicksort uses is divide and conquer to gain the same

6

00:00:24.030  -->  00:00:25.890
advantages as the merge sort.

7

00:00:25.980  -->  00:00:28.980
But not using additional storage as a tradeoff.

8

00:00:28.980  -->  00:00:34.650
However it is possible that the list may not be divided in half so when this happens we're going to

9

00:00:34.650  -->  00:00:37.990
see that performance is actually diminished.

10

00:00:38.100  -->  00:00:44.470
So a quicksort what it's going to do is it first selects a value just called the pivot value the role

11

00:00:44.490  -->  00:00:47.460
the pivot value is to assist with splitting the list.

12

00:00:47.580  -->  00:00:53.700
The actual position or the pivot value belongs in the final sorted list commonly called that split point

13

00:00:54.140  -->  00:00:56.730
is going to be used to divide the list for subsequent calls.

14

00:00:56.730  -->  00:00:58.540
The quick sort.

15

00:00:58.560  -->  00:01:02.030
So let's go ahead and try to look at a diagram to explain this.

16

00:01:02.040  -->  00:01:09.750
So here we have this disarray which has 54 26 83 17 etc. and 54 right here this first element is going

17

00:01:09.750  -->  00:01:12.510
to be our first pivot value.

18

00:01:12.510  -->  00:01:15.910
So the partition process is what's going to happen next.

19

00:01:16.110  -->  00:01:22.050
It will find the split point and at the same time move other items to the appropriate side of the list

20

00:01:22.590  -->  00:01:26.380
either less than or greater than that pivot value.

21

00:01:26.430  -->  00:01:28.660
So 54 is our first pivot value.

22

00:01:29.070  -->  00:01:33.800
So we're going to do is we have all the steps marked down throughout this large diagram here.

23

00:01:33.840  -->  00:01:37.260
So we're going to look at each of these and go through it step by step.

24

00:01:37.710  -->  00:01:40.560
So let's go ahead and jump to that touch first.

25

00:01:40.560  -->  00:01:40.890
OK.

26

00:01:40.920  -->  00:01:44.980
So here are the top three steps out of that array and sorting using quicksort.

27

00:01:45.330  -->  00:01:50.840
So we have 50 for our pivot value and then we're going to have as a left Mark and a right Mark.

28

00:01:51.150  -->  00:01:57.270
And these are actually going to converge on the split point as they go closer to the middle.

29

00:01:57.270  -->  00:02:02.240
So we have that pivot value and we had the left Mark at 26.

30

00:02:02.370  -->  00:02:12.210
So since 26 is less than 54 that left Mark moves to the right then since 93 is greater than 54 we stop

31

00:02:13.290  -->  00:02:20.820
then the right mark is going to say 20 is less than 50 54 stop and this is what's going to happen here

32

00:02:20.820  -->  00:02:20.850
.

33

00:02:20.850  -->  00:02:22.740
So we have that pivot value.

34

00:02:22.740  -->  00:02:26.370
We noticed that we were able to stop on the all the way to the right since we had a number that was

35

00:02:26.370  -->  00:02:30.800
less than that pit value and all the way to the left we have a number that's greater than that pit value

36

00:02:30.800  -->  00:02:31.490
.

37

00:02:31.500  -->  00:02:35.320
So the next step is actually exchanged these two values here.

38

00:02:35.340  -->  00:02:39.180
So now the left marks at 20 and the right Mark has 93.

39

00:02:39.270  -->  00:02:42.930
Then we continue moving the left Mark and the right mark.

40

00:02:42.930  -->  00:02:46.690
So notice the left Mark kept moving 17 was less than 54.

41

00:02:46.710  -->  00:02:50.680
So it moved one more 77 is greater than 54.

42

00:02:50.700  -->  00:02:58.440
So the left Mark stopped and then this guy went to 55 on the right mark 55 is greater so than it moved

43

00:02:58.440  -->  00:03:00.720
to 44 which is less than 54.

44

00:03:00.960  -->  00:03:02.460
So now they're both stopped.

45

00:03:02.550  -->  00:03:06.690
The left Mark has a number that's greater than the value of the right mark because that's less than

46

00:03:06.690  -->  00:03:07.050
it.

47

00:03:07.290  -->  00:03:09.040
So we're going to do another.

48

00:03:09.580  -->  00:03:15.360
And so now what you'll notice is the right mark having moved over to 31 and the left Mark having moved

49

00:03:15.360  -->  00:03:16.630
over to 77.

50

00:03:16.920  -->  00:03:19.600
The right Mark is now less than the left Mark.

51

00:03:19.710  -->  00:03:20.540
So he found there.

52

00:03:20.580  -->  00:03:22.920
Well we call that split point.

53

00:03:22.920  -->  00:03:28.140
So we do now is exchanged 54 that value and 31.

54

00:03:28.140  -->  00:03:29.200
That right Mark.

55

00:03:29.520  -->  00:03:34.450
So note that we're going until the right mark in the left Mark Cross.

56

00:03:34.460  -->  00:03:39.720
So to continue this let's go ahead and take a look at some visualizations to try to get a better understanding

57

00:03:39.720  -->  00:03:41.980
of this quick sort algorithm.

58

00:03:42.810  -->  00:03:43.580
OK everyone.

59

00:03:43.650  -->  00:03:48.330
So now we're here at the implementation of quicksort notebook and there's a sorting and searching folder

60

00:03:48.330  -->  00:03:48.840
.

61

00:03:48.840  -->  00:03:53.190
And if you scroll down a bit for resources for review you'll have the Wikipedia page the visual algo

62

00:03:53.580  -->  00:03:55.700
and then another animation page.

63

00:03:55.710  -->  00:04:00.800
So if we go ahead and click on the Wikipedia link will take us here to that Wikipedia for a quick sort

64

00:04:00.800  -->  00:04:01.710
.

65

00:04:01.770  -->  00:04:06.600
And you note that there's a bit of an animation here as well as a lot more information about quicksort

66

00:04:06.620  -->  00:04:07.260
.

67

00:04:07.270  -->  00:04:12.180
Another diagram here similar to the one that we were going over and you can see there has a left Mark

68

00:04:12.180  -->  00:04:18.630
on the right mark although some people just think of it as one single marker going along.

69

00:04:19.110  -->  00:04:25.110
And you can check out the different partition schemes here and implementation issues so I encourage

70

00:04:25.110  -->  00:04:29.760
you if you're interested in a quick sort and more about that algorithm you can check out a lot more

71

00:04:29.760  -->  00:04:37.230
information on the wiki page as far as visualizing you can either go to sorting algorithms that come

72

00:04:37.390  -->  00:04:45.910
saurian ash algorithms that come and check out the quicksort and you can go ahead and see various visualizations

73

00:04:45.920  -->  00:04:46.440
.

74

00:04:46.650  -->  00:04:53.280
Look at these two marks as they're going similar to what we were doing before we that left Markin right

75

00:04:53.280  -->  00:04:59.190
Mark meeting and then doing those splits along those partition points.

76

00:04:59.190  -->  00:04:59.800
OK.

77

00:05:00.340  -->  00:05:06.340
So again last resort to check out is this visual algo dot net sorting.

78

00:05:06.360  -->  00:05:14.420
Go ahead and click quick here and then you can go ahead and visualize the sorting mechanism here they're

79

00:05:14.430  -->  00:05:18.300
showing left and right marks a bit by color.

80

00:05:18.390  -->  00:05:22.300
So if you notice here we're checking against seven as our pivot point.

81

00:05:22.620  -->  00:05:24.420
So we're going along.

82

00:05:24.420  -->  00:05:28.100
And in this case there won't be anything that's less than seven.

83

00:05:28.140  -->  00:05:29.630
Lowest number here is seven.

84

00:05:29.640  -->  00:05:31.990
It was mashed but not less than.

85

00:05:32.010  -->  00:05:39.150
So we go out through this entire list and we actually take seven as the smallest number so that iterations

86

00:05:39.150  -->  00:05:40.190
complete.

87

00:05:40.220  -->  00:05:43.100
So the pivots now actually have a sort of position.

88

00:05:43.170  -->  00:05:49.020
So when you put that number is going to be 43 we noted that we had a 23 that was less than 43.

89

00:05:49.170  -->  00:05:53.580
And so now we're doing those splits that's almost the same as when the left and right Mark were meeting

90

00:05:53.580  -->  00:05:55.250
each other.

91

00:05:55.320  -->  00:05:55.670
OK.

92

00:05:55.770  -->  00:05:59.520
So I encourage you to go ahead and check out this on visual.

93

00:05:59.520  -->  00:06:01.310
I'll go ahead and pass this now.

94

00:06:01.730  -->  00:06:07.620
And you can see that there's always some pseudo code here as well as an explanation of what's happening

95

00:06:07.620  -->  00:06:08.090
.

96

00:06:08.100  -->  00:06:14.550
So this Web super useful mixture in exploration mode to be able to explore and you can create and sort

97

00:06:15.180  -->  00:06:19.230
various things as far as the arrays that you're going to be sorting through.

98

00:06:19.650  -->  00:06:25.380
OK thanks everyone and I'll see you at the next lecture where we're going to be implementing our own

99

00:06:25.440  -->  00:06:28.040
quick search algorithm in Python.

100

00:06:28.050  -->  00:06:29.730
Thanks and I'll see you at the next lecture
