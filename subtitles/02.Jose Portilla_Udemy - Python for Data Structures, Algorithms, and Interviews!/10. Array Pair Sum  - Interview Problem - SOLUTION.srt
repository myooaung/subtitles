1

00:00:00,990  -->  00:00:06,900
Hello everyone and welcome to the solution for the great pear some problem just to get over the problem

2

00:00:06,900  -->  00:00:07,790
statement again.

3

00:00:07,950  -->  00:00:13,590
It was given an integer array output all the unique pairs that sum up to a specific value k.

4

00:00:14,100  -->  00:00:19,800
So in this case the array is a list of Pi finalists and then the second argument is just an integer

5

00:00:19,860  -->  00:00:24,220
that specific value k and you to return pairs.

6

00:00:24,270  -->  00:00:26,820
So let's go ahead and go with the solution.

7

00:00:26,860  -->  00:00:29,860
The solution we're going to go over is order n.

8

00:00:30,210  -->  00:00:33,210
So it's going to use the set data structure.

9

00:00:33,360  -->  00:00:38,280
We're going to do is perform a linear pass from the beginning and for each element we check whether

10

00:00:38,280  -->  00:00:41,490
K element is in the set of scene numbers.

11

00:00:41,490  -->  00:00:45,830
If it is then we found the pair of some k and add it to the output.

12

00:00:45,930  -->  00:00:48,480
If not this element doesn't belong to a period.

13

00:00:48,630  -->  00:00:51,360
And we added to the set of scene elements.

14

00:00:51,360  -->  00:00:54,800
The algorithm is really simple to figure out using a set.

15

00:00:54,900  -->  00:01:00,270
So the complexity is order and because we do a single linear scan of the array and for each element

16

00:01:00,300  -->  00:01:06,060
we check we check whether the corresponding number to form a pair is in the set or add the current element

17

00:01:06,060  -->  00:01:07,440
to the set.

18

00:01:07,440  -->  00:01:13,530
Incertain find operations of a set are both average order one constant and we'll look at that later

19

00:01:13,530  -->  00:01:15,020
and why it's Order 1.

20

00:01:15,600  -->  00:01:20,350
But the algorithm and totals since we're just doing and passes is order n.

21

00:01:20,640  -->  00:01:21,960
So here's the solution.

22

00:01:21,990  -->  00:01:26,900
Let's go ahead and go over it and explain all of this as we code along.

23

00:01:26,910  -->  00:01:29,130
So go ahead and jump over.

24

00:01:29,130  -->  00:01:37,620
So first thing we're going to do is create a function and have it take that array in that specific integer

25

00:01:37,620  -->  00:01:45,390
k we can do an edge case check in case there's less than two elements in the array by just saying if

26

00:01:45,390  -->  00:01:52,530
the length of array is less than 2 we can even just say return.

27

00:01:52,530  -->  00:01:55,090
That means it's just not going to return anything.

28

00:01:55,440  -->  00:01:58,720
But you can have it return a string or print the statement.

29

00:01:59,020  -->  00:02:01,520
No error less than two in the array.

30

00:02:01,530  -->  00:02:02,300
That kind of thing.

31

00:02:02,370  -->  00:02:03,870
It's up to you.

32

00:02:03,870  -->  00:02:06,930
Then let's go ahead to make or sets for tracking.

33

00:02:07,320  -->  00:02:17,740
So we'll make a scene equal to a sets and make output equal to an empty sets.

34

00:02:17,790  -->  00:02:22,480
So this sort of scene equals set using a set for tracking.

35

00:02:22,490  -->  00:02:26,870
It's something that you're going to see over and over again as a strategy for interview problems.

36

00:02:26,880  -->  00:02:28,710
This is the first time we've seen it so far.

37

00:02:28,710  -->  00:02:34,560
But keep this in mind it's a really great strategy at converting things that might seem like take order

38

00:02:34,650  -->  00:02:38,200
and squared and reducing it down to a linear order.

39

00:02:39,030  -->  00:02:39,820
OK.

40

00:02:39,870  -->  00:02:40,680
Continuing on.

41

00:02:40,680  -->  00:02:44,650
Let's go ahead and get to the meat of our solution.

42

00:02:44,690  -->  00:02:46,770
I'm going to say for every number in our array.

43

00:02:46,800  -->  00:02:52,650
So for now I'm in OUR I'm going to set the target difference.

44

00:02:52,650  -->  00:02:59,370
And what I mean by that isn't going to create a variable called target and an equal to the difference

45

00:02:59,370  -->  00:03:01,310
between k and that number.

46

00:03:01,350  -->  00:03:06,280
So remember K is the integer we're trying to find the two numbers that sum up to it.

47

00:03:06,480  -->  00:03:11,870
And right now k minus numb is the target we're reaching for.

48

00:03:11,880  -->  00:03:19,140
So if that target is not in the numbers we've already seen we're going to add it

49

00:03:22,200  -->  00:03:23,540
the number that is.

50

00:03:24,780  -->  00:03:30,560
Otherwise if it isn't seen we can add the tuple with the minimum corresponding pair.

51

00:03:30,570  -->  00:03:37,430
So remember I asked you to actually keep track of those pairs will return the length of the output.

52

00:03:37,530  -->  00:03:43,350
But in this case I actually want you to output the pairs themselves as well just so we know we're able

53

00:03:43,350  -->  00:03:44,080
to do it.

54

00:03:44,460  -->  00:03:47,570
So we're not going to add a tuple.

55

00:03:47,980  -->  00:03:54,900
So we're going to do that is by saying take the minimum between the number and the target

56

00:03:57,840  -->  00:04:02,370
and then take the max between the name and the target.

57

00:04:03,270  -->  00:04:12,450
And that's going to be the tuple we add to the output and then engineers say return length of the output

58

00:04:12,450  -->  00:04:13,550
.

59

00:04:13,680  -->  00:04:17,100
In this case let's go ahead and check it out.

60

00:04:17,610  -->  00:04:20,500
So we have our solution let's make sure it works.

61

00:04:20,550  -->  00:04:33,660
I'm going to say here some let's go 1 3 2 2 to put in four.

62

00:04:33,660  -->  00:04:37,370
We should get AUPs looks like we have an error.

63

00:04:37,470  -->  00:04:39,590
Takes exactly one argument.

64

00:04:40,050  -->  00:04:44,910
Let's go ahead and make sure that we have enough to make this a tuple which we forgot.

65

00:04:45,530  -->  00:04:47,970
Now I'll go over this line in just a second.

66

00:04:48,420  -->  00:04:48,790
OK.

67

00:04:48,870  -->  00:04:49,560
So that's correct.

68

00:04:49,560  -->  00:04:52,880
Now we are missing a set of parentheses here.

69

00:04:53,700  -->  00:04:54,780
OK.

70

00:04:54,780  -->  00:05:01,650
Now let's go ahead and add a one liner to print out the actual tuple.

71

00:05:01,710  -->  00:05:06,950
So I cannot comment this out and say return.

72

00:05:07,410  -->  00:05:09,720
This is a little trick to print a new line.

73

00:05:09,750  -->  00:05:17,490
England join and then lets you map a string to the list of the output.

74

00:05:17,520  -->  00:05:21,570
So this is kind of a bit of a python trick just for printing stuff out.

75

00:05:21,570  -->  00:05:23,470
So it looks nice and it's legible.

76

00:05:23,880  -->  00:05:31,910
So for run this WIPs we don't want to return this we actually want to print this.

77

00:05:31,950  -->  00:05:32,660
There we go.

78

00:05:32,940  -->  00:05:33,850
OK.

79

00:05:34,350  -->  00:05:39,280
So here we have the two pairs as a tuple.

80

00:05:39,300  -->  00:05:44,660
Let's go ahead and go over a solution again so we can really break down this line.

81

00:05:44,670  -->  00:05:51,390
And the logic here as far as what's this line is doing is just taking the output converting into a list

82

00:05:51,810  -->  00:05:53,610
making sure all those tuples are strings.

83

00:05:53,610  -->  00:06:00,960
By mapping the SDR function which converts to a string to every element in that list and then joining

84

00:06:00,960  -->  00:06:03,720
them with new lines in between.

85

00:06:03,720  -->  00:06:09,780
So if you print it you get these strings of tuples which have been converted in to just a print sees

86

00:06:09,780  -->  00:06:13,560
one comma the integer and another prints.

87

00:06:13,690  -->  00:06:17,290
OK so let's break down the important stuff.

88

00:06:17,580  -->  00:06:21,460
So we have an edge case check in case there is less than two elements.

89

00:06:21,810  -->  00:06:27,240
And then we have our sets for tracking the numbers we've seen in our output.

90

00:06:27,240  -->  00:06:33,210
So we're going along the array and we're saying for that number in the array the target number we're

91

00:06:33,210  -->  00:06:36,230
looking for will be k minus numb.

92

00:06:36,360  -->  00:06:38,520
So that makes sense right.

93

00:06:38,520  -->  00:06:40,910
So for instance if we have four.

94

00:06:41,310  -->  00:06:47,100
Now we're at the first digit which will be one that we're looking for for minus one is three on the

95

00:06:47,100  -->  00:06:49,320
first number we haven't seen it.

96

00:06:49,380  -->  00:06:54,040
You'll see on the second pass we'll add that scene and be able to find it.

97

00:06:54,090  -->  00:06:59,640
So then we say if Target is not seen we haven't seen that number yet we go ahead and add it to that

98

00:06:59,640  -->  00:07:05,360
set and then else what we do is we add it to the output.

99

00:07:05,400  -->  00:07:12,010
So we say output the ad and we take the minimum between the current number and the target.

100

00:07:12,180  -->  00:07:13,260
As one of the pairs.

101

00:07:13,470  -->  00:07:16,370
And then we take the maxim between the number and the target.

102

00:07:16,710  -->  00:07:19,350
So we want to find out which was the minimum.

103

00:07:19,350  -->  00:07:23,910
So whichever was less between that number we're currently on the target we're seeking.

104

00:07:24,420  -->  00:07:29,040
As one of the items in the pair and the other integer in the pair will just be the one that's greater

105

00:07:29,100  -->  00:07:31,980
between the number and the target.

106

00:07:31,980  -->  00:07:32,690
OK.

107

00:07:33,330  -->  00:07:34,990
That's it for the solution.

108

00:07:35,280  -->  00:07:40,920
Again just remember in order to test your solution on the test cell you had to return the number like

109

00:07:41,250  -->  00:07:42,580
this format.

110

00:07:42,690  -->  00:07:45,480
So you got something like this.

111

00:07:45,540  -->  00:07:46,330
All right.

112

00:07:46,650  -->  00:07:49,730
That's it for the solution to the pair some problem.

113

00:07:49,770  -->  00:07:55,710
Go ahead and read the entire solution note book in case you want explanation of the logic even further

114

00:07:55,710  -->  00:07:55,890
.

115

00:07:55,890  -->  00:07:57,760
But that's it for the solution.

116

00:07:57,780  -->  00:07:59,700
Thanks everyone and I'll see you at the next lecture
