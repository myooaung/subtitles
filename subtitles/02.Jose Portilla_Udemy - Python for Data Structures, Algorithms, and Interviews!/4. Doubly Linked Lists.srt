1

00:00:01,110  -->  00:00:06,760
Hello everyone and welcome to the doubly linked list lecture in the previous lecture we implemented

2

00:00:06,840  -->  00:00:11,970
using Python nodes and create a singly linked list from those nodes and the structural talked about

3

00:00:11,970  -->  00:00:13,770
what doubly linked lists are.

4

00:00:13,770  -->  00:00:20,400
And then the next lecture will go over an implementation in Python of doubly linked lists.

5

00:00:20,400  -->  00:00:24,810
So as I mentioned we're going to have an overview and we're also going to focus on some specific topics

6

00:00:25,350  -->  00:00:29,890
that occur in a linked list known as header and trailer Sentinel's.

7

00:00:30,870  -->  00:00:36,120
OK so what is a doubly linked lists in a doubly linked list.

8

00:00:36,120  -->  00:00:41,760
We define a linked list in which each node keeps an explicit reference to the node before it and the

9

00:00:41,760  -->  00:00:44,460
reference to the node after it.

10

00:00:44,490  -->  00:00:49,140
These lists allow a greater variety of constant time update operations.

11

00:00:49,140  -->  00:00:52,060
This includes insertions and deletions.

12

00:00:52,110  -->  00:00:57,630
We continue to use the term next for the reference to the no that follows and another will have a new

13

00:00:57,630  -->  00:01:05,420
term however called previous or P R E V for short for the reference to the no that precedes it.

14

00:01:07,340  -->  00:01:14,670
OK so we add special nodes at both ends of the list so that Hetter and that trailer a header node at

15

00:01:14,670  -->  00:01:17,280
the beginning of the list in a trailer note at the end of the list.

16

00:01:17,280  -->  00:01:19,170
You can check the diagram here.

17

00:01:19,210  -->  00:01:21,400
Now this looks similar to that singly linked list.

18

00:01:21,420  -->  00:01:28,070
Except now we're referencing previous lists as well not just what comes next but what was previous.

19

00:01:28,350  -->  00:01:32,430
These dummy nodes are known as the Sentinel's or guards.

20

00:01:32,550  -->  00:01:34,850
So we have the sedulous the center node.

21

00:01:35,010  -->  00:01:43,710
This header Sentinel in this trailer node or trailer Sentinel every insertion into a doubly linked list

22

00:01:43,770  -->  00:01:49,830
representation will take place between a pair of existing nodes when a new element is inserted at the

23

00:01:49,830  -->  00:01:51,220
front of the sequence.

24

00:01:51,270  -->  00:01:57,640
We simply add the new node between the header and the No that is currently after the header.

25

00:01:57,660  -->  00:02:02,840
So for instance let's go ahead and take a look at what and the inserting and deleting would look like

26

00:02:02,840  -->  00:02:04,370
in a doubly linked list.

27

00:02:05,250  -->  00:02:12,660
Here if you're at the top we have our header sentinel or trailer Sentinel and then three nodes and know

28

00:02:12,660  -->  00:02:18,240
how they all point at least all the nodes in the middle point to a previous node and the next node if

29

00:02:18,240  -->  00:02:19,970
you want to insert a new node.

30

00:02:20,130  -->  00:02:26,430
What we can do is just change the header or the next pointer in the previous pointer to accommodate

31

00:02:26,430  -->  00:02:29,730
the new node.

32

00:02:29,790  -->  00:02:34,240
So the steps are a what it looks like before the operation B.

33

00:02:34,290  -->  00:02:40,300
After creating this new node and then see after linking the neighbors the new node pointing the next

34

00:02:40,300  -->  00:02:45,110
and the previous to the corresponding nodes.

35

00:02:45,120  -->  00:02:48,190
Now imagine we wanted to insert a note to the front.

36

00:02:48,210  -->  00:02:49,410
What would this look like.

37

00:02:49,440  -->  00:02:52,600
Its actually a pretty similar process.

38

00:02:52,780  -->  00:02:58,560
So what it looks like before the operation after we create a new node and then we just really think

39

00:02:58,740  -->  00:03:06,110
the heter sentinel to that new node and also then you know then points previous to the node and the

40

00:03:06,120  -->  00:03:14,190
similar situation happens to the node that it just replaced the no that used to be at the front right

41

00:03:14,190  -->  00:03:16,570
next to the header.

42

00:03:17,190  -->  00:03:19,520
Now is talk about deleting a node.

43

00:03:19,620  -->  00:03:25,470
The two neighbors of the node to be deleted are linked directly to each other as a result that node

44

00:03:25,470  -->  00:03:31,380
will no longer be considered part of the list and it can be reclaimed by the system because of Sentinel's

45

00:03:31,560  -->  00:03:37,450
same implementation can be used when deleting the first or last element of a sequence.

46

00:03:37,530  -->  00:03:40,620
For example here we have three figures.

47

00:03:41,160  -->  00:03:44,430
A is what it looks like before we actually delete a node.

48

00:03:44,940  -->  00:03:51,200
And if we want to delete a node we just link the out the old node.

49

00:03:51,210  -->  00:03:53,910
So in this instance we're linking up PVD.

50

00:03:53,910  -->  00:04:00,840
So we point J.F.K. to SFO and then that node we say the previous note is actually J.F.K. no longer PVD

51

00:04:00,840  -->  00:04:01,650
.

52

00:04:01,650  -->  00:04:06,470
So all you have to do is just link our old nodes.

53

00:04:06,470  -->  00:04:07,060
OK.

54

00:04:07,260  -->  00:04:12,630
So we learned about doubly linked list notes how they point to both what's coming up next and what came

55

00:04:12,630  -->  00:04:16,590
up previously we learned about insertion and deletion.

56

00:04:17,010  -->  00:04:23,110
And now next we're going to implement a doubly linked list using node classes in Python.

57

00:04:23,740  -->  00:04:25,690
OK thanks everyone.

58

00:04:25,740  -->  00:04:31,170
And this will make a lot more sense when you actually see it coded out in the next lecture or see it

59

00:04:31,170  -->  00:04:31,420
there
