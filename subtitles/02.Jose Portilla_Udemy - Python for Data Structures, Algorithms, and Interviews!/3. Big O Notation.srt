1

00:00:00,990  -->  00:00:07,980
Hello everyone and welcome to the Big O notation lecture in this section of the course in this lecture

2

00:00:07,980  -->  00:00:12,900
what we're going to be doing is just going over the corresponding Jupiter notebook that accompanies

3

00:00:12,900  -->  00:00:13,970
this lecture.

4

00:00:14,070  -->  00:00:19,230
We won't be doing that much or really any live coding we'll just be discussing the functions that we

5

00:00:19,230  -->  00:00:25,880
previously looked that okay with that being said let's go ahead and jump to the Jupiter notebook.

6

00:00:25,950  -->  00:00:26,370
All right.

7

00:00:26,430  -->  00:00:31,980
This is the Big O notation notebook and I recommend that you actually read through this notebook and

8

00:00:31,980  -->  00:00:37,320
then if anything does it make sense to come back to this video lecture where we're all going to be going

9

00:00:37,320  -->  00:00:38,170
over it.

10

00:00:38,520  -->  00:00:38,970
All right.

11

00:00:38,970  -->  00:00:46,080
So we previously discussed these two functions And now remember these functions take in an end and then

12

00:00:46,080  -->  00:00:49,310
they return the sum of the numbers from 0 to end.

13

00:00:49,830  -->  00:00:57,420
The first one that it really and the second one took this algorithm the end times and plus one divided

14

00:00:57,420  -->  00:00:58,360
by two.

15

00:00:58,800  -->  00:01:05,100
So what we want to do is develop some sort of notation to objectively compare the efficiency of these

16

00:01:05,100  -->  00:01:06,840
two algorithms.

17

00:01:06,840  -->  00:01:11,700
And a good place to start would be to compare the number of assignments or operations each algorithm

18

00:01:11,700  -->  00:01:12,760
makes.

19

00:01:13,350  -->  00:01:15,680
So let's start with just assignments in general.

20

00:01:15,840  -->  00:01:23,550
So if we look here the original Some one function will create in assignments n plus one times and we

21

00:01:23,550  -->  00:01:27,500
can see this from that x range or range based functions.

22

00:01:27,570  -->  00:01:28,470
Just a quick note.

23

00:01:28,500  -->  00:01:36,150
This is since this is in Python 2 we're using x range which is just a generator but range in Python

24

00:01:36,150  -->  00:01:37,160
3 is the same.

25

00:01:37,170  -->  00:01:41,960
So don't worry about that detail or really just discussing Big-O notation here.

26

00:01:42,060  -->  00:01:45,990
So continuing on this original function will create that assignment.

27

00:01:46,050  -->  00:01:47,790
And plus one times.

28

00:01:47,820  -->  00:01:52,350
So this means we will assign that final underscore some variable.

29

00:01:52,410  -->  00:01:56,430
This one right here is going to sign it and plus one times.

30

00:01:56,430  -->  00:02:02,160
So here is the 0 and then it assigns it and plus 1 times.

31

00:02:02,160  -->  00:02:08,130
So we can say that for a problem of any size here it's input.

32

00:02:08,130  -->  00:02:11,630
This function will take that one plus and steps for that.

33

00:02:11,640  -->  00:02:20,850
And plus 1 steps and this n notation right here allows us to compare solutions and algorithms relative

34

00:02:20,850  -->  00:02:23,250
to the size of the problem.

35

00:02:23,280  -->  00:02:31,600
So since someone this first function of 10 will be different than someone of let's say a million.

36

00:02:31,620  -->  00:02:36,230
If an equals 10 or nickels a million they could take very different run times.

37

00:02:36,270  -->  00:02:44,520
But if we get some sort of Big O notation that's relative or in terms of the input we can objectively

38

00:02:44,520  -->  00:02:51,040
measure it across any sort of input as long as the Big O notation is relative to the input.

39

00:02:51,240  -->  00:02:56,340
So that's where this end is going to come into play and we'll see that when we actually formalized the

40

00:02:56,340  -->  00:02:57,570
notation.

41

00:02:58,170  -->  00:03:08,490
OK so let's go ahead and scroll down here and zoom in a bit so we can discuss the formality of BIG N

42

00:03:08,730  -->  00:03:09,930
or Big O notation.

43

00:03:09,930  -->  00:03:11,160
Scuse me.

44

00:03:11,160  -->  00:03:13,530
So Big O notation.

45

00:03:13,600  -->  00:03:22,110
Formally we can say it's describes how quickly runtime will grow relative to the inputs as the input

46

00:03:22,110  -->  00:03:24,570
gets arbitrarily large.

47

00:03:24,570  -->  00:03:26,060
So there's three points there.

48

00:03:26,070  -->  00:03:28,920
Let's go ahead and examine them more closely.

49

00:03:28,920  -->  00:03:35,670
So first point this first bullet we want to compare how quickly runtime will grow not compare exact

50

00:03:35,670  -->  00:03:39,380
run times since those can vary depending on the hardware.

51

00:03:39,390  -->  00:03:48,730
So as you mentioned before we want to compare objectively these two algorithms not based on runtime

52

00:03:48,770  -->  00:03:51,170
.

53

00:03:51,780  -->  00:03:55,830
And what I mean by not based on runtime is not based on exact runtime.

54

00:03:55,830  -->  00:03:58,530
We just want to compare how quickly runtime will grow.

55

00:03:58,530  -->  00:04:03,700
So I don't want to compare let's say 10 seconds versus 12 seconds.

56

00:04:03,780  -->  00:04:08,760
I want to compare something objectively and that can be how quickly runtime will grow.

57

00:04:08,760  -->  00:04:14,100
Second point we want to make is since we want to compare the variety of input sizes we're only concerned

58

00:04:14,100  -->  00:04:19,860
with runtime growth relative to input and that's going to be where this and notation comes into play

59

00:04:19,860  -->  00:04:20,510
.

60

00:04:20,820  -->  00:04:26,010
And then the third point is as it gets arbitrarily large we only worry about terms that will grow the

61

00:04:26,010  -->  00:04:33,750
fastest and it gets large and to this point we can think of Big O analysis as sometimes also known as

62

00:04:34,200  -->  00:04:36,390
asymptotic analysis.

63

00:04:36,900  -->  00:04:37,880
OK.

64

00:04:38,250  -->  00:04:45,110
So let's go ahead and scroll down to the table where you can see how this syntax works.

65

00:04:46,050  -->  00:04:56,460
So the syntax for that first function can be said to be big O N since it's runtime grows linearly with

66

00:04:56,460  -->  00:04:57,950
the input size.

67

00:04:58,110  -->  00:05:04,560
In this next lecture we'll go over more specific examples of these big O types and types.

68

00:05:04,590  -->  00:05:11,250
But just to note this is what the format of the Big O notation is going to look like it's going to have

69

00:05:11,250  -->  00:05:12,200
a big O.

70

00:05:12,480  -->  00:05:18,500
And then the Big-O notation or performance inside the print Decies.

71

00:05:19,140  -->  00:05:24,600
So here's some common run times of big functions.

72

00:05:24,600  -->  00:05:35,850
So the common ones are constants logarithmic linear log linear quadratic cubic and exponential.

73

00:05:35,850  -->  00:05:41,790
So what I'm going to do now is use a library called Map plot live to plot out the differences between

74

00:05:41,790  -->  00:05:43,910
these big O's.

75

00:05:45,060  -->  00:05:48,420
So you can go ahead and check out that code yourself but don't worry about it we're just discussing

76

00:05:48,450  -->  00:05:49,470
Big O notation here.

77

00:05:49,480  -->  00:05:55,140
Not that lib but I use that code to create this plot here.

78

00:05:55,500  -->  00:06:02,780
So here we can compare the growth of relative runtime versus the size of the input.

79

00:06:02,970  -->  00:06:09,330
So you can see here in constant time you'd have a straight line and then you'd also have logarithmic

80

00:06:12,330  -->  00:06:17,450
log linear quadratic and cubic and exponential.

81

00:06:17,460  -->  00:06:21,100
So let's go in and zoom out a bit so we can see him all.

82

00:06:21,180  -->  00:06:22,060
Here we go.

83

00:06:22,200  -->  00:06:25,040
So you can see that there's a big impact.

84

00:06:25,110  -->  00:06:29,770
If you don't have a good big 0 for your algorithm.

85

00:06:30,060  -->  00:06:36,270
So there's a huge difference a big O efficiency can make for the same end value against some sort of

86

00:06:36,270  -->  00:06:37,840
project at runtime.

87

00:06:38,010  -->  00:06:43,270
And clearly you want to choose algorithms that stay away from any exponential quadratic or Cubitt behavior

88

00:06:43,290  -->  00:06:51,660
these guys seem to grow so fast you can note that for small input sizes so very low values of n they're

89

00:06:51,660  -->  00:06:55,030
all very similar and to each other.

90

00:06:55,080  -->  00:07:02,490
So if you only expect the deal flow n for maybe for certain cases the Big O doesn't actually matter

91

00:07:02,490  -->  00:07:03,140
to you.

92

00:07:03,300  -->  00:07:08,730
But as you can see as and grows larger you'll get huge differences the pending on the efficiency of

93

00:07:08,730  -->  00:07:10,350
your algorithm.

94

00:07:10,350  -->  00:07:14,610
So in the next lecture we're going to do our how to properly denote this big O.

95

00:07:14,910  -->  00:07:19,720
And then we'll look at examples of various problems and calculate the big O of them.

96

00:07:19,740  -->  00:07:26,490
So what we see in this lecture we just saw a quick kind of almost a preview of the various big-O types

97

00:07:27,180  -->  00:07:36,540
why it's so important to choose or try to create an algorithm that has a inefficient Big O relative

98

00:07:36,600  -->  00:07:39,060
to its performance and runtime.

99

00:07:39,060  -->  00:07:39,650
OK.

100

00:07:40,110  -->  00:07:44,090
So in the next lecture we're going to see a bunch of examples and break down.

101

00:07:44,180  -->  00:07:44,740
Big.

102

00:07:45,840  -->  00:07:46,380
All right.

103

00:07:46,560  -->  00:07:48,380
Thanks and I'll see you at the next lecture
