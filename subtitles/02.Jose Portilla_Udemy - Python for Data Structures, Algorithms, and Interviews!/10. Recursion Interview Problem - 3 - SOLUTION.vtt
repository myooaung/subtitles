WEBVTT
1

00:00:01.740  -->  00:00:08.130
Hello everyone and welcome to the recursion interview solution to the Fibonacci Sequence interview problem

2

00:00:08.130  -->  00:00:09.360
.

3

00:00:09.360  -->  00:00:15.090
All right before we get started just again a reminder as always there is a full solution notebook for

4

00:00:15.090  -->  00:00:17.130
this interview question.

5

00:00:17.400  -->  00:00:23.690
The recursion problems folder recursion problems solutions folder here.

6

00:00:23.700  -->  00:00:27.340
So this is the notebook that has the solutions for all three of them.

7

00:00:27.480  -->  00:00:31.200
All three requests and the tester solution cell.

8

00:00:31.260  -->  00:00:32.020
All right.

9

00:00:32.220  -->  00:00:39.210
So let's go ahead and begin what I'm going to do is go through the problem statement makes sure we understand

10

00:00:39.210  -->  00:00:44.990
that and then do a walkthrough of the three separate solutions for this problem.

11

00:00:45.000  -->  00:00:52.740
Now the question itself was implement the Fibonacci sequence in three different ways using recursion

12

00:00:53.310  -->  00:00:59.730
using dynamic programming so using them zation to store the results and then using just a straight iterative

13

00:00:59.850  -->  00:01:00.820
approach.

14

00:01:01.170  -->  00:01:06.630
So remember it's a reminder of the Fibonacci sequence there's a link here to the Wikipedia article is

15

00:01:06.630  -->  00:01:12.990
just when you take the two previous numbers and add them to get your next number in that sequence.

16

00:01:12.990  -->  00:01:18.960
Now that the base case checks to see if there's a zero or a 1 in that case it returns 0 1 otherwise

17

00:01:18.960  -->  00:01:23.880
it returns this fit and minus one plus fit and plus two.

18

00:01:24.420  -->  00:01:31.770
So in this specific case what I wanted you to do was for the n that was input you would return the nth

19

00:01:32.130  -->  00:01:34.550
number in the Fibonacci sequence.

20

00:01:34.560  -->  00:01:35.460
All right.

21

00:01:35.460  -->  00:01:37.300
So let's go ahead and get started.

22

00:01:37.710  -->  00:01:43.560
What I'm going to do is start by going over the iterative solution first.

23

00:01:43.560  -->  00:01:46.920
So if you scroll down to the bottom of the notebook that's this one.

24

00:01:46.920  -->  00:01:52.320
After that we'll go through the recursion solution and then the dynamic programming solution.

25

00:01:52.320  -->  00:01:55.870
So we're going to do is first walk through the entire solution.

26

00:01:56.220  -->  00:02:02.520
Since that's the most straightforward one and it also shows that as far as approaches to a particular

27

00:02:02.520  -->  00:02:07.830
problem you don't always have to do it a classic way or a certain way.

28

00:02:07.890  -->  00:02:12.270
There's multiple ways to solve a single problem and that's really the main point of this interview question

29

00:02:12.270  -->  00:02:12.530
.

30

00:02:12.780  -->  00:02:16.040
Is the show three separate approaches to solving a problem.

31

00:02:16.050  -->  00:02:22.320
So in a interview scenario you could easily get asked this problem of a Fibonacci sequence and you could

32

00:02:22.320  -->  00:02:25.140
also be asked to solve it every single way here.

33

00:02:25.410  -->  00:02:27.710
So start off with the solution.

34

00:02:27.900  -->  00:02:30.910
So I'll call this fib underscore I.

35

00:02:30.940  -->  00:02:37.630
TR It takes an input and and we're going to go ahead and set a starting point.

36

00:02:37.740  -->  00:02:47.340
And this case started at 0 8 0 0 and then after that all we have do is just follow the algorithm that's

37

00:02:47.340  -->  00:02:47.930
in place.

38

00:02:47.970  -->  00:02:52.110
So for i in range remember going all the way.

39

00:02:52.170  -->  00:03:00.180
And since we want the nth number and in this case we can actually use the tuple and packing method in

40

00:03:00.300  -->  00:03:01.990
Python.

41

00:03:03.090  -->  00:03:10.040
I can simply say a B as an equal to be a plus b.

42

00:03:11.160  -->  00:03:13.160
And I just have to return.

43

00:03:13.630  -->  00:03:16.830
Hey let me fix something real quick.

44

00:03:16.830  -->  00:03:18.820
This should be a one.

45

00:03:19.320  -->  00:03:26.220
And if we actually want to use tuple and packing further I can say A B equals zero comma 1 and that

46

00:03:26.220  -->  00:03:27.270
will assign things.

47

00:03:27.270  -->  00:03:34.140
This is using a very Pythonic solution to say A equals equal zero and B equals 1.

48

00:03:34.140  -->  00:03:38.890
All right so let's quickly review what's going on here.

49

00:03:38.920  -->  00:03:45.600
I go ahead and run that cell and then input 5 underscore that were put in 10.

50

00:03:45.990  -->  00:03:47.810
I get in return 55.

51

00:03:48.020  -->  00:03:48.670
OK.

52

00:03:49.050  -->  00:03:54.780
So all of this is doing is just saying is going to be equal to B and B is going to be well to a plus

53

00:03:54.780  -->  00:03:58.050
b and at the end return a.

54

00:03:58.560  -->  00:04:04.170
So this is just using just the very simple looping technique using a for loop here to loop through the

55

00:04:04.170  -->  00:04:11.720
range and then using tuple and packing to set the new Fibonacci number at the end.

56

00:04:11.730  -->  00:04:12.340
All right.

57

00:04:12.450  -->  00:04:18.720
So that's the most straightforward solution what I want to to make you aware of is this nice little

58

00:04:18.870  -->  00:04:22.710
link and I'll add it to the solution notebook.

59

00:04:23.040  -->  00:04:27.960
But if you actually just google Python are five ways of Fibonacci in Python.

60

00:04:28.290  -->  00:04:31.010
Here's the complete your else on Tecno beans.

61

00:04:31.020  -->  00:04:37.210
But if you Google five ways of Fibonacci in python we can go and do a google search for that.

62

00:04:38.070  -->  00:04:44.610
That will take you to this page is techno beans page and I'll show you five different ways of calculating

63

00:04:44.610  -->  00:04:47.010
the Fibonacci sequence in Python.

64

00:04:47.010  -->  00:04:48.360
So you can use that looping technique.

65

00:04:48.360  -->  00:04:51.670
This is actually what we just did in his case is start at 1 1.

66

00:04:51.930  -->  00:04:54.650
Let's go in and zoom in here so you can see better.

67

00:04:55.470  -->  00:04:57.750
You can also use recursion which we're about to go over.

68

00:04:57.780  -->  00:05:00.320
You can do it using generator's which is an interesting way.

69

00:05:00.420  -->  00:05:03.380
And then you can use memorization which will also go over.

70

00:05:03.840  -->  00:05:09.140
And finally he shows using the migration as a decorator which we actually go over in the memorization

71

00:05:09.150  -->  00:05:12.740
lecture itself for the factorial problem.

72

00:05:12.750  -->  00:05:21.990
All right jumping back to the solutions we can now go ahead and tackle the recursive version of this

73

00:05:21.990  -->  00:05:23.100
problem.

74

00:05:23.670  -->  00:05:26.960
So how do we do this recursively.

75

00:05:27.540  -->  00:05:29.070
Let's go ahead and get started.

76

00:05:30.790  -->  00:05:34.590
We'll call our solution fib underscore or easy

77

00:05:37.860  -->  00:05:43.450
and what we need to do is have a base case and a

78

00:05:45.850  -->  00:05:47.420
recursive case.

79

00:05:47.830  -->  00:05:51.110
So what is our base case.

80

00:05:51.430  -->  00:05:55.610
Well we know we need to start with either 0 or 1.

81

00:05:56.020  -->  00:06:03.970
And in that case we can just say if an is equal to zero or if and is equal to 1

82

00:06:07.030  -->  00:06:12.730
return and that's it for a base case which makes sense because that's how the Fibonacci sequence starts

83

00:06:12.730  -->  00:06:14.230
.

84

00:06:14.230  -->  00:06:16.060
What about the recursion case.

85

00:06:16.060  -->  00:06:20.810
Well that's actually just writing the algorithm for the Fibonacci sequence.

86

00:06:20.830  -->  00:06:30.250
All we have to do is return the recursive call of our function on and minus one plus the recursive call

87

00:06:30.250  -->  00:06:33.810
of our function on and minus two.

88

00:06:34.210  -->  00:06:41.520
And let's make sure that works in a call in on 10 and then we get 55 out.

89

00:06:41.890  -->  00:06:48.790
So what might be interesting to explore is using time it or any other sort of timing library in Python

90

00:06:49.180  -->  00:06:51.970
to see which one of these solutions runs faster.

91

00:06:52.420  -->  00:06:58.650
Again for iteration all we're doing is setting a call to 0 0 and then for I in range all the way up

92

00:06:58.650  -->  00:06:58.740
to.

93

00:06:58.770  -->  00:07:02.320
And you're just setting a b and then B equals a plus.

94

00:07:02.320  -->  00:07:09.760
Be very similar here except using recursion you set your base case first and then in the recursive case

95

00:07:09.820  -->  00:07:15.060
you recursively call this function on and minus 1 and minus 2.

96

00:07:15.070  -->  00:07:18.670
So those previous two numbers then you add them up.

97

00:07:18.820  -->  00:07:22.610
That gets you your final solution there.

98

00:07:23.080  -->  00:07:24.140
All right.

99

00:07:24.250  -->  00:07:28.390
Finally you want to explore dynamic programming using memorisation.

100

00:07:28.930  -->  00:07:36.040
So in the form of about implementing here I'm going to set the cache beforehand and it's based on the

101

00:07:36.040  -->  00:07:39.060
desired end of the number of the Fibonacci sequence.

102

00:07:39.310  -->  00:07:43.520
So this is only going to work for this specific and that I know beforehand.

103

00:07:43.570  -->  00:07:45.830
So just keep that in mind.

104

00:07:46.780  -->  00:07:49.000
All right let's go ahead and get started.

105

00:07:49.360  -->  00:07:55.870
It's going to look pretty similar to the recursion problem we already have but it's going to be a lot

106

00:07:55.870  -->  00:08:04.000
more efficient because we're storing stuff or previous known results in memory.

107

00:08:04.000  -->  00:08:05.800
So it's going to get started.

108

00:08:06.190  -->  00:08:10.540
I'm going to go ahead and start with the cash information.

109

00:08:10.660  -->  00:08:15.520
Now the particular way I'm doing it now is I'm sending it on an and that I already know I'm going to

110

00:08:15.520  -->  00:08:16.780
ask for it.

111

00:08:17.650  -->  00:08:25.240
And there's quite a few notes on why I'm doing this in the solution note book itself and how that affects

112

00:08:25.240  -->  00:08:27.230
your test cell in that notebook.

113

00:08:27.280  -->  00:08:33.310
So make sure you go ahead and review that before continuing on and I'll set my cash equal to a list

114

00:08:33.310  -->  00:08:38.660
of Nunn's length and plus 1 or 11.

115

00:08:39.520  -->  00:08:40.850
So I multiply it by that.

116

00:08:41.020  -->  00:08:41.720
OK.

117

00:08:42.070  -->  00:08:50.410
And then we'll have to do all have to do three things here to figure out my base cases off the check

118

00:08:50.410  -->  00:08:59.890
my cash in out to basically keep setting that cash.

119

00:09:00.730  -->  00:09:07.840
And then finally when I'm going to do it since I'm using minimization is return that number on that

120

00:09:07.840  -->  00:09:08.750
cash.

121

00:09:09.130  -->  00:09:09.740
OK.

122

00:09:10.360  -->  00:09:11.890
So we've got three cases here.

123

00:09:12.100  -->  00:09:13.720
Let's go ahead and get started.

124

00:09:13.750  -->  00:09:16.670
Base case that's going to be the same as the normal recursion problem.

125

00:09:16.700  -->  00:09:23.780
When the say if an equal to zero or an equal to one just return then.

126

00:09:23.820  -->  00:09:25.070
So that's pretty straightforward.

127

00:09:25.170  -->  00:09:28.300
The first numbers in the Fibonacci sequence.

128

00:09:28.300  -->  00:09:29.860
Now checking the cash.

129

00:09:29.950  -->  00:09:42.980
So I know that if my cash at that particular end is not equal to none.

130

00:09:43.090  -->  00:09:50.800
All I have to do is return that cash because it means I haven't filled it out yet or haven't said it

131

00:09:50.800  -->  00:09:52.080
.

132

00:09:52.090  -->  00:09:59.290
And finally how am I going to set that cash so that cash of N here is just going to be equal to the

133

00:09:59.290  -->  00:10:08.710
recursive call which is the exact same thing we just did in the recursive solution.

134

00:10:10.240  -->  00:10:19.150
So basically all I'm doing here is the recursive case but I'm making sure to check my cash for us and

135

00:10:19.150  -->  00:10:25.030
instead of just producing these in a recursive fashion I'm actually keeping track of them by adding

136

00:10:25.030  -->  00:10:27.240
them to this list.

137

00:10:27.550  -->  00:10:33.420
And in this case instead of using a pens I've set my cash first.

138

00:10:33.430  -->  00:10:36.050
I already know what and I'm going to ask for.

139

00:10:36.430  -->  00:10:45.310
So if I run this and then say fed the lion for they Nemec and ask 10 I'm going to get 55 out.

140

00:10:45.340  -->  00:10:51.790
Now what happens if I choose another and I will get an error because you notice I get an indexer because

141

00:10:51.790  -->  00:10:53.390
the list index is at a range.

142

00:10:53.560  -->  00:10:58.120
And that's because the way I've set it up here to make it really obvious that we're having a cash is

143

00:10:58.180  -->  00:11:05.140
that the cash instantiation outside I would have to set the end value to wherever and I'm going to run

144

00:11:05.140  -->  00:11:10.480
first one for four in this case for 12.

145

00:11:10.480  -->  00:11:11.060
All right.

146

00:11:11.320  -->  00:11:12.520
So how could you fix that.

147

00:11:12.520  -->  00:11:19.180
Well you would fix that by using a pen here and being able to create that cache on the fly as you go

148

00:11:19.180  -->  00:11:19.870
along.

149

00:11:20.080  -->  00:11:24.300
You wouldn't reset it or set it since the beginning here.

150

00:11:24.340  -->  00:11:25.090
All right.

151

00:11:25.300  -->  00:11:28.210
So those are the solutions for all three of them.

152

00:11:28.210  -->  00:11:31.510
You'll notice that actual coding is very simple.

153

00:11:31.570  -->  00:11:36.280
It's the thinking that's the most difficult part of this problem and that's the case for a lot of these

154

00:11:36.280  -->  00:11:37.720
recursion problems.

155

00:11:37.900  -->  00:11:42.700
Thinking about the problem is much much harder in the actual code you're going to write.

156

00:11:42.700  -->  00:11:47.500
So let's go ahead and jump to the solutions notebook and make sure I really understand everything we

157

00:11:47.500  -->  00:11:48.610
just went over.

158

00:11:48.850  -->  00:11:54.100
So the interim solution we set a starting point in this case equals zero equals zero.

159

00:11:54.340  -->  00:11:56.940
And we just follow the Fibonacci algorithm.

160

00:11:56.950  -->  00:12:01.360
We set a will to B and then B's equal to a plus b.

161

00:12:01.990  -->  00:12:08.180
Notice with tuple in unpacking I can save myself a temporary variable.

162

00:12:08.350  -->  00:12:14.460
So I'm actually not setting a equal to be first otherwise this will just be a B plus B.

163

00:12:14.800  -->  00:12:23.560
So that's a really nice Pythonic solution here as far as setting this all in one line.

164

00:12:23.560  -->  00:12:28.720
This basically automatically takes care of the ordering so you don't have any errors of setting be equal

165

00:12:28.720  -->  00:12:33.620
to B plus B or setting a equal to the new B instead of the old B.

166

00:12:33.670  -->  00:12:34.980
All right.

167

00:12:36.160  -->  00:12:43.480
And then for the recursive solution all you have to do is think about the base case and then just follow

168

00:12:43.570  -->  00:12:49.330
the formula or the algorithm by calling it recursively on and minus one and two.

169

00:12:49.540  -->  00:12:54.370
Since you are concerned with the last two numbers of that sequence in order to come up with the next

170

00:12:54.370  -->  00:13:00.280
number of the sequence in in a really similar fashion here and I've instantiated the cache information

171

00:13:00.280  -->  00:13:06.020
first just so it looks really similar to the recursion solution we check for that base case.

172

00:13:06.220  -->  00:13:10.440
And we set a cache by calling that recursion function.

173

00:13:10.810  -->  00:13:13.690
If it equals none.

174

00:13:13.690  -->  00:13:14.310
All right.

175

00:13:14.530  -->  00:13:19.780
So make sure you go ahead and walk through this entire solutions book to get a really good understanding

176

00:13:20.140  -->  00:13:22.340
of the Fibonacci sequence problem.

177

00:13:22.360  -->  00:13:25.980
It's a pretty common interview problem at least on the basic level.

178

00:13:26.200  -->  00:13:31.390
Can you can learn a lot especially on learning how to solve a single problem in a bunch different ways

179

00:13:31.400  -->  00:13:31.740
.

180

00:13:32.020  -->  00:13:37.450
And I encourage you as a homework assignment to use some sort of time it feature in Python or some sort

181

00:13:37.450  -->  00:13:42.430
of timeout library in order to see which one of these runs the fastest.

182

00:13:42.850  -->  00:13:45.820
OK so that's it for this interview problem.

183

00:13:45.820  -->  00:13:46.880
Good job everyone.

184

00:13:46.930  -->  00:13:48.210
And I'll see you at the next lecture
