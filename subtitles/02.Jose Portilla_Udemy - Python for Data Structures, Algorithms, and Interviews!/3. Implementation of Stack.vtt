WEBVTT
1

00:00:01.320  -->  00:00:05.970
Hello everyone and welcome to the implementation of a stack lecture and this lecture we're going to

2

00:00:05.970  -->  00:00:08.370
be implementing our own stack class.

3

00:00:08.370  -->  00:00:15.060
As always there's a Jupiter notebook with notes and full code free to check out as well as some examples

4

00:00:15.060  -->  00:00:17.670
of using our own stack class.

5

00:00:17.670  -->  00:00:22.380
So before we begin on implementing this we want to do is just do a quick review of the properties and

6

00:00:22.380  -->  00:00:23.630
methods of a stack.

7

00:00:23.640  -->  00:00:25.880
We're going to be implementing.

8

00:00:25.890  -->  00:00:33.810
So just a reminder from the last lecture the stack data type is defined by being structured in a way

9

00:00:34.110  -->  00:00:38.730
that they're last in elements are also the first ones out.

10

00:00:38.730  -->  00:00:44.340
So it's an ordered collection of items or items are added to and removed from the end the called the

11

00:00:44.340  -->  00:00:45.480
top.

12

00:00:45.480  -->  00:00:49.740
So we're going to do is create a stack class of the following operations.

13

00:00:49.740  -->  00:00:53.960
First one is just going to be stack which creates a new stack that is empty.

14

00:00:54.000  -->  00:00:57.790
It's not going to need any parameters and it's just going to return an empty stack.

15

00:00:58.020  -->  00:01:03.840
The next one is going to be push that's going to add a new item to the top of the stack that needs the

16

00:01:03.840  -->  00:01:06.780
item and then just returns nothing.

17

00:01:06.990  -->  00:01:10.560
Pop is going to remove the top item from the stack.

18

00:01:10.650  -->  00:01:13.970
It doesn't need any parameters and it will just return the item.

19

00:01:14.100  -->  00:01:16.320
The stack is then modified.

20

00:01:16.770  -->  00:01:22.560
Peak returns the top item from the stack but doesn't actually remove it doesn't need any parameters

21

00:01:22.560  -->  00:01:22.710
.

22

00:01:22.710  -->  00:01:29.550
And no the stack isn't modified so I'll show you the top item but it won't remove is empty is going

23

00:01:29.550  -->  00:01:31.940
to test to see whether the stack is empty.

24

00:01:32.040  -->  00:01:36.420
It won't need any parameters and will return a boolean value either true or false depending if it's

25

00:01:36.420  -->  00:01:37.640
empty or not.

26

00:01:37.770  -->  00:01:41.180
And then finally size will return the number of items on the stack.

27

00:01:41.220  -->  00:01:46.650
It won't need any parameters and it's just going to return an integer depending on the size of the stack

28

00:01:46.650  -->  00:01:47.200
.

29

00:01:47.250  -->  00:01:51.540
So let's go ahead and jump over to the notebook and start implementing this.

30

00:01:51.540  -->  00:01:54.580
Let's go ahead and zoom in a bit so you can get a better view.

31

00:01:55.100  -->  00:01:58.890
OK first thing we're going to do is critter class.

32

00:01:59.120  -->  00:02:03.050
Let's go ahead and make a stack object.

33

00:02:03.570  -->  00:02:14.930
OK let's go ahead and start off by just calling self and we'll say self.

34

00:02:14.940  -->  00:02:19.630
The items is equal to an empty list.

35

00:02:19.630  -->  00:02:25.170
So we're going to be using the list as kind of a base off of the stack so self-taught items we have

36

00:02:25.170  -->  00:02:26.220
an empty list.

37

00:02:26.340  -->  00:02:28.470
So there's no items in the list.

38

00:02:28.500  -->  00:02:33.150
So when we call stack we're just creating an empty stack.

39

00:02:33.480  -->  00:02:42.090
We'll go ahead and maker is empty method just takes and self no other parameters and it's going to return

40

00:02:43.140  -->  00:02:45.390
the boolean self items

41

00:02:48.210  -->  00:02:50.270
equal to empty list.

42

00:02:50.460  -->  00:02:56.490
So notice here we just return the Boolean is the items which when it starts off is just an empty list

43

00:02:56.540  -->  00:02:58.230
is equal to an empty list.

44

00:02:58.260  -->  00:03:04.720
If we push more items into the stack this will not be true and is empty all return false.

45

00:03:05.390  -->  00:03:10.410
OK next let's go ahead and describe how we're going to push items.

46

00:03:10.560  -->  00:03:17.660
So I'm going to say self and then taken an item and that's just going to be self.

47

00:03:17.670  -->  00:03:20.360
The items list.

48

00:03:20.460  -->  00:03:26.940
And I'm going to append to that list and append item to that list.

49

00:03:27.330  -->  00:03:30.830
Next I want to see if I can pop items from the list.

50

00:03:31.080  -->  00:03:33.180
In that case we actually don't need any parameters.

51

00:03:33.180  -->  00:03:36.710
We're just going to take the last one in the first one out.

52

00:03:36.900  -->  00:03:43.850
So we're going to just use the lists built in method of popping so softer items that pop.

53

00:03:43.860  -->  00:03:50.700
You'll notice that illest behaves very much like a stack in general and then go ahead and create peek

54

00:03:51.150  -->  00:03:56.500
which is going to be the top item.

55

00:03:56.670  -->  00:03:58.130
But we're actually not going to pop it out.

56

00:03:58.140  -->  00:04:03.070
We're just going to return what it is without affecting the actual stack.

57

00:04:03.120  -->  00:04:07.500
So in order to do that I'm going to go ahead and use some slicing.

58

00:04:07.500  -->  00:04:12.780
So I have my self-taught items which is that list of all the items in the stack and then I'm going to

59

00:04:12.780  -->  00:04:17.210
say from length of softer items

60

00:04:20.790  -->  00:04:27.160
minus one return that so that's going to return that top item.

61

00:04:27.180  -->  00:04:29.020
The last one that was put in.

62

00:04:29.340  -->  00:04:33.780
Go ahead and check out the slicing for yourself in this indexing to make sure it makes sense to you

63

00:04:33.790  -->  00:04:34.060
.

64

00:04:34.190  -->  00:04:40.010
But basically it's just the length minus one because indexing starts at zero.

65

00:04:41.020  -->  00:04:51.390
Okay and then lastly we're going to make a size method and that's just going to return the length of

66

00:04:51.720  -->  00:04:53.910
softer items.

67

00:04:54.820  -->  00:04:56.420
OK so that's it.

68

00:04:56.460  -->  00:04:57.910
Let's go ahead and try it out.

69

00:04:58.100  -->  00:05:03.200
Then going to create a stack called S..

70

00:05:03.230  -->  00:05:07.210
Well let's zoom in on our time here so we can really see what's going on.

71

00:05:07.210  -->  00:05:10.270
And let's go ahead and prints.

72

00:05:10.530  -->  00:05:15.090
S is empty and confirmed that that's true.

73

00:05:15.900  -->  00:05:16.960
So it is true.

74

00:05:16.980  -->  00:05:21.750
Note how I have the close parentheses since I'm actually calling the method and not passing parameters

75

00:05:21.750  -->  00:05:22.670
.

76

00:05:22.860  -->  00:05:24.040
So is empty right now.

77

00:05:24.050  -->  00:05:27.990
Let's go ahead and push an item to the top of it.

78

00:05:28.050  -->  00:05:31.700
So now we have push and let's go ahead and push another item.

79

00:05:31.720  -->  00:05:35.240
This case will do a string too.

80

00:05:35.880  -->  00:05:39.300
And let's take a peek at our stack.

81

00:05:39.300  -->  00:05:41.620
Notice that shows us too.

82

00:05:41.760  -->  00:05:45.180
Let's go ahead and push in another item we'll push in a boolean this time.

83

00:05:45.180  -->  00:05:46.310
True.

84

00:05:46.860  -->  00:05:52.200
And how about we check the size of our stack.

85

00:05:52.200  -->  00:05:54.640
So we should have 3 items which makes sense.

86

00:05:54.630  -->  00:05:59.520
The integer 1 the string 2 and then that boolean true.

87

00:05:59.640  -->  00:06:01.720
So let's check if it's empty now.

88

00:06:01.920  -->  00:06:02.730
It shouldn't be.

89

00:06:02.880  -->  00:06:07.830
But let's make sure function or our method is working is empty false.

90

00:06:07.840  -->  00:06:10.090
So looks like that's working well.

91

00:06:10.110  -->  00:06:14.580
Let's go ahead and pop up all the items and see if we can empty out the stack.

92

00:06:14.580  -->  00:06:16.550
So I'm going to pop out item.

93

00:06:16.620  -->  00:06:19.660
So that's going to be that boolean we put in.

94

00:06:19.800  -->  00:06:21.530
We pop in another one.

95

00:06:21.540  -->  00:06:24.970
Think for a second what it should be should be that string.

96

00:06:25.530  -->  00:06:26.290
There it is.

97

00:06:26.310  -->  00:06:29.310
And then finally we should pop out the integer.

98

00:06:29.880  -->  00:06:34.310
So go check if it's empty now and it is empty.

99

00:06:34.470  -->  00:06:36.140
OK great.

100

00:06:36.180  -->  00:06:42.660
So it took big advantage of the similarities between a list in Python and its built in properties and

101

00:06:42.660  -->  00:06:43.890
how it relates to a stack.

102

00:06:43.890  -->  00:06:45.190
So just keep that in mind.

103

00:06:45.450  -->  00:06:48.370
But this is a pretty basic implementation of a stack.

104

00:06:48.420  -->  00:06:54.260
Best thing to know about this is that last in first out principle that stacks have OK.

105

00:06:54.600  -->  00:06:57.880
That being said go ahead and follow along with the code.

106

00:06:57.900  -->  00:07:00.280
Either here or in the example notebook.

107

00:07:00.570  -->  00:07:04.200
Mixtura understand how to implement a stack and that's it.

108

00:07:04.200  -->  00:07:06.070
Thanks everyone and I'll see the next lecture
