WEBVTT
1

00:00:01.080  -->  00:00:07.620
Hello everyone and welcome to onsight question to solution for the social network company mock interview

2

00:00:07.630  -->  00:00:08.220
.

3

00:00:08.790  -->  00:00:14.880
So the problem statement was given a list of accounts ID numbers which are just integers which contains

4

00:00:14.880  -->  00:00:21.540
duplicates find the one unique integer and as a caveat the list is guaranteed to only have one unique

5

00:00:21.600  -->  00:00:23.800
non duplicated integer.

6

00:00:23.850  -->  00:00:28.610
So hopefully this problem felt pretty familiar if you went through the array section of the court.

7

00:00:28.980  -->  00:00:31.990
What we're going to do here is use an exclusive or operation.

8

00:00:32.010  -->  00:00:36.600
And in case you're not familiar from exclusive work click this link and it will take you to the Wikipedia

9

00:00:36.600  -->  00:00:37.710
page.

10

00:00:37.710  -->  00:00:40.100
But basically it wasn't exclusive or operation.

11

00:00:40.100  -->  00:00:48.990
Does is that it will take two sets of bits and for each pair it will return a one value if one but not

12

00:00:49.050  -->  00:00:51.590
both of the bits as one.

13

00:00:51.600  -->  00:00:56.550
So in Python That's the carrot symbol but let me show you what I mean by an inclusive or.

14

00:00:56.760  -->  00:01:02.430
So you can see here in the Wikipedia link we have an input A and B and we're only going to return true

15

00:01:03.060  -->  00:01:07.460
if one but not both of the values are true.

16

00:01:07.800  -->  00:01:10.300
Otherwise we return false.

17

00:01:10.320  -->  00:01:17.250
So let's go ahead and see how we can do this and use an exclusive or for our solution.

18

00:01:17.250  -->  00:01:21.600
So for our solution we can simply do an exclusive or on all the integers in the list.

19

00:01:21.600  -->  00:01:28.170
We start with the unique ID set to 0 and then every time we do an exclusive or a new ID from the list

20

00:01:28.290  -->  00:01:29.840
it's going to change the bits.

21

00:01:30.210  -->  00:01:35.520
And then when we do that with the same idea again it's going to cancel out the earlier change and then

22

00:01:35.520  -->  00:01:40.150
by the end we are going to be left with the idea that was unique and only appeared once.

23

00:01:40.170  -->  00:01:44.590
So let's go ahead and see how this works here if copied our solution.

24

00:01:44.880  -->  00:01:53.360
And we have Duff's solution takes in the idealist we initiate the unique ID and then for every eye in

25

00:01:53.370  -->  00:01:59.370
that idealists every idea there we're going to do the exclusive OR operation and we can update unique

26

00:01:59.370  -->  00:02:01.520
IP in this manner.

27

00:02:01.680  -->  00:02:07.800
So we run that solution function and test it out on this list here.

28

00:02:07.800  -->  00:02:09.180
The Unique ID is three.

29

00:02:09.210  -->  00:02:13.570
So if we go ahead and run our solution you'll notice we get out 3.

30

00:02:13.830  -->  00:02:19.060
In case you're having any trouble understanding this we can actually just print out a few things.

31

00:02:19.110  -->  00:02:21.110
So let's go ahead and print out.

32

00:02:21.540  -->  00:02:26.130
This is I will go in and print out this.

33

00:02:26.130  -->  00:02:27.670
So we actually print out.

34

00:02:27.750  -->  00:02:35.290
This is the current ID being checked.

35

00:02:36.800  -->  00:02:38.350
Comma I.

36

00:02:38.430  -->  00:02:42.690
And then let's go head imprints.

37

00:02:42.990  -->  00:02:50.230
This is the current unique ID.

38

00:02:50.270  -->  00:02:54.440
Now we'll put in unique there ID.

39

00:02:55.170  -->  00:02:57.600
And then finally we're going to prints.

40

00:02:58.050  -->  00:03:04.020
This is the results of the exclusive or.

41

00:03:05.400  -->  00:03:09.750
And then let's go ahead and put in unique ID

42

00:03:12.990  -->  00:03:17.990
and then do an exclusive or check.

43

00:03:19.860  -->  00:03:21.790
Let's go ahead and try that.

44

00:03:22.470  -->  00:03:26.420
So we just cleared this box right here.

45

00:03:26.720  -->  00:03:27.710
So we're going to run that.

46

00:03:27.900  -->  00:03:29.350
So now we have an updated solution.

47

00:03:29.400  -->  00:03:30.090
Let's go see.

48

00:03:30.090  -->  00:03:31.620
Go ahead and see the steps.

49

00:03:31.620  -->  00:03:34.980
So these print statements are going to be really useful for us to understand.

50

00:03:35.010  -->  00:03:37.600
So Kirgan idea being checked.

51

00:03:37.650  -->  00:03:41.350
Let me actually fix this and say I spelled being wrong.

52

00:03:41.370  -->  00:03:42.300
There we go.

53

00:03:42.380  -->  00:03:46.830
Ernie the being checked is one against the current unique ID.

54

00:03:46.830  -->  00:03:49.590
So 0 1 that's going to return a 1.

55

00:03:49.880  -->  00:03:55.950
And you know it's currently being checked against the unique ID due to the features of the exclusive

56

00:03:55.950  -->  00:04:05.270
or Z of a 2 and a 1 we're going to return a 3 and then a three against a three then return a 0 0 against

57

00:04:05.280  -->  00:04:06.960
two returns of two.

58

00:04:07.110  -->  00:04:10.050
And then finally two against one is going to return.

59

00:04:10.080  -->  00:04:13.240
The only unique ID in the entire list.

60

00:04:13.620  -->  00:04:14.000
All right.

61

00:04:14.070  -->  00:04:18.620
So the key to understanding this is really understanding how the exclusive OR operation works.

62

00:04:18.870  -->  00:04:25.020
So if you didn't get it go ahead and make sure you read the exclusive OR operation here on the Wikipedia

63

00:04:25.050  -->  00:04:26.290
page.

64

00:04:26.550  -->  00:04:30.030
And keep in mind this is a bit wise operator.

65

00:04:30.030  -->  00:04:37.290
So you have to remember your binary representation of numbers in order to fully understand these sort

66

00:04:37.290  -->  00:04:40.800
of twos versus ones or threes versus threes.

67

00:04:41.160  -->  00:04:48.330
So if you didn't get that part just check again how it bitwise operator works now a binary representation

68

00:04:48.360  -->  00:04:50.390
of a number works OK.

69

00:04:50.670  -->  00:04:52.380
That's it for the solution.

70

00:04:52.380  -->  00:04:53.220
Thanks everyone.

71

00:04:53.220  -->  00:04:54.150
I'll see you at the next lecture
