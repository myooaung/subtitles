1

00:00:01,260  -->  00:00:05,670
Hello everyone and welcome to the lecture on binary search.

2

00:00:05,670  -->  00:00:09,200
So we're going to go over binary search in the next lecture.

3

00:00:09,210  -->  00:00:15,300
We'll do an implementation of binary search and we'll also discuss the iterative and recursive versions

4

00:00:15,300  -->  00:00:17,860
of binary search.

5

00:00:17,940  -->  00:00:24,900
So in the last lecture we talked about implementing sequential search and how we had different implementations

6

00:00:24,900  -->  00:00:30,660
for ordering or ordered lists and unordered lists so we can actually take greater advantage of the ordered

7

00:00:30,660  -->  00:00:31,540
list.

8

00:00:31,650  -->  00:00:36,270
So if we know a this is already ordered instead of searching the list in sequence you can do a binary

9

00:00:36,270  -->  00:00:40,650
search which will start by examining the middle item.

10

00:00:40,830  -->  00:00:46,620
So a binary search will start by examining that middle item if that item is the one we are searching

11

00:00:46,620  -->  00:00:51,300
for or done if the item we're searching for is greater than that middle item.

12

00:00:51,300  -->  00:00:56,670
We know that the entire lower half of that list as well as the middle item can then just be eliminated

13

00:00:56,670  -->  00:00:58,390
from further consideration.

14

00:00:58,440  -->  00:01:03,690
So you can already drop that off of our overall search then the item if it's in the list must be in

15

00:01:03,690  -->  00:01:05,760
the upper half.

16

00:01:05,760  -->  00:01:10,920
So we just keep repeating that process with the upper half Sarnath the middle item of the upper half

17

00:01:10,920  -->  00:01:11,120
.

18

00:01:11,160  -->  00:01:13,600
Compare against what we're looking for.

19

00:01:13,680  -->  00:01:16,920
And again we either find it or split the list in half.

20

00:01:16,920  -->  00:01:21,560
Therefore eliminating another large part of our possible search base.

21

00:01:21,750  -->  00:01:27,340
For example let's look at the previous survey we looked that a couple lectures ago and search for 54

22

00:01:27,400  -->  00:01:28,060
again.

23

00:01:28,560  -->  00:01:32,350
Instead of starting at the beginning here is 17 like a sequential search.

24

00:01:32,550  -->  00:01:38,940
But we're going to do is start right in the middle then we'll check this number against the target value

25

00:01:38,940  -->  00:01:40,300
which is 54.

26

00:01:40,530  -->  00:01:48,090
Since this number is less than 54 It's 44 we know everything in the lower half of the list can now just

27

00:01:48,090  -->  00:01:49,590
be discarded.

28

00:01:49,590  -->  00:01:53,340
Then using the upper half of the list we just continue on.

29

00:01:53,340  -->  00:01:59,670
So we jumped to the middle here which is 65 says it's greater then we can start and keep doing this

30

00:02:00,090  -->  00:02:04,890
basically splitting that list in half which is why it's called binary search and continually go until

31

00:02:04,890  -->  00:02:09,780
we find the actual element that we're looking for.

32

00:02:09,780  -->  00:02:16,140
So binary search uses divide and conquer we divide the problem into smaller pieces solve the smaller

33

00:02:16,140  -->  00:02:20,400
pieces in some way and then reassemble the whole problem to get the results.

34

00:02:20,400  -->  00:02:25,530
So you'll hear that term divide and conquer quite a bit when you're studying data structures and algorithms

35

00:02:25,530  -->  00:02:27,840
.

36

00:02:27,840  -->  00:02:33,180
Let's do a binary search analysis each comparison eliminates about half of the remaining items from

37

00:02:33,180  -->  00:02:35,340
consideration.

38

00:02:35,340  -->  00:02:38,520
Then we want to know what is the maximum number of comparisons.

39

00:02:38,550  -->  00:02:43,470
This algorithm will require to check the entire list.

40

00:02:43,470  -->  00:02:48,770
In this case it depends on the number of comparisons and approximate number of items left.

41

00:02:49,170  -->  00:02:53,280
So if you have to make just one comparison then you have about an over to approximate number of items

42

00:02:53,280  -->  00:03:01,320
left with to you get in over 4 3 and over a eccentric center all the way until you get to I comparison's

43

00:03:01,500  -->  00:03:08,190
just a general term for items and you're doing an over two I tested the power of I approximate number

44

00:03:08,190  -->  00:03:10,530
of items list.

45

00:03:10,590  -->  00:03:11,020
All right.

46

00:03:11,280  -->  00:03:16,740
So up next we'll see how to implement two versions of that binary search and you can check out the Jupiter

47

00:03:16,740  -->  00:03:18,980
notebook book related to this lecture.

48

00:03:19,170  -->  00:03:21,280
For more information on binary search.

49

00:03:21,600  -->  00:03:22,420
Okay.

50

00:03:22,620  -->  00:03:24,570
Thanks everyone and I'll see you at the next lecture
