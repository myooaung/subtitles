1

00:00:01,170  -->  00:00:03,240
Hello everyone and welcome to the tree level.

2

00:00:03,240  -->  00:00:10,710
Order print solution lecture the problem statement was this given a binary tree of integers printed

3

00:00:10,770  -->  00:00:12,110
in level order.

4

00:00:12,210  -->  00:00:15,330
The output will contain space between the numbers and the same level.

5

00:00:15,450  -->  00:00:17,530
And the new line between different levels.

6

00:00:17,580  -->  00:00:22,830
So for example to tree look something like this one with a couple of branches to 3 and then another

7

00:00:22,830  -->  00:00:24,580
level four or five six.

8

00:00:24,590  -->  00:00:28,240
You should be able to take in that tree and then print something out like this.

9

00:00:28,260  -->  00:00:31,660
One two three four five six.

10

00:00:31,680  -->  00:00:35,790
In the Jupiter note book there's a written explanation in good and check out who were actually going

11

00:00:35,790  -->  00:00:41,730
to jump straight to the code take advantage of some decks like structures that are already built into

12

00:00:41,730  -->  00:00:46,400
Python from the collections module and then we'll go ahead and just explain our solution out.

13

00:00:46,450  -->  00:00:48,610
It's good and jumped to a notebook.

14

00:00:49,290  -->  00:00:51,330
All right here I am at the notebook.

15

00:00:51,330  -->  00:00:53,590
I already have the Node class set up.

16

00:00:53,610  -->  00:00:56,430
This is just from the answer solution.

17

00:00:56,460  -->  00:00:57,800
But all we have left right.

18

00:00:57,810  -->  00:01:01,060
And then Vau classic Node class.

19

00:01:01,410  -->  00:01:05,640
OK let's go in and start a fire function to print this in level order.

20

00:01:06,000  -->  00:01:15,480
We'll just call this level order prints and it will accept a tree and right off the bat will say if

21

00:01:15,480  -->  00:01:23,370
not tree just return because we know we no longer need to iterate over that.

22

00:01:23,880  -->  00:01:29,670
OK something to do is take advantage of the dex data structure which you can actually just import from

23

00:01:29,670  -->  00:01:37,190
collections so I'm going to say import collections here and the collections module has the stack Skewes

24

00:01:37,190  -->  00:01:47,780
index built into Python so I'm going to say nodes is equal to collections top deck.

25

00:01:48,160  -->  00:01:56,550
In this case we pass it just that tree as the single item in a list to set up our nodes as a deck.

26

00:01:57,280  -->  00:02:07,080
Ok I'm also going to set up two variables one called current count set it equal to one and another one

27

00:02:07,080  -->  00:02:11,380
called next counts set it equal to zero.

28

00:02:12,000  -->  00:02:13,430
And I'm going to say.

29

00:02:13,680  -->  00:02:19,620
While the length of that deck we just did nodes is not equal to zero.

30

00:02:19,620  -->  00:02:21,420
We're going to do the following.

31

00:02:21,480  -->  00:02:25,290
We're going to say that current node

32

00:02:30,480  -->  00:02:33,480
is a new variable and set that equal to nodes

33

00:02:36,060  -->  00:02:41,370
Pop left and let me go ahead and say no it's here.

34

00:02:41,480  -->  00:02:47,700
And with this pop left allows us to do is since we have a deck remember a deck we can remove from both

35

00:02:47,730  -->  00:02:48,370
ends.

36

00:02:48,540  -->  00:02:52,400
So this allows me to use this pop left method on that deck.

37

00:02:52,410  -->  00:02:55,230
You can go and check it out just by pressing tab later on.

38

00:02:55,470  -->  00:03:02,460
So let me just go ahead and put a new cell here so we can just explore this a little more in case there's

39

00:03:02,460  -->  00:03:08,100
any confusion and I will set the equal to

40

00:03:10,450  -->  00:03:14,910
collection's deck.

41

00:03:14,920  -->  00:03:22,170
I'm going to pass it in a list of 1 to 3 and then if I say the dot and then I press tab.

42

00:03:22,410  -->  00:03:29,850
These are all the methods or attributes I have available for me so I can say Pop left and I can also

43

00:03:29,850  -->  00:03:36,900
say append left versus just a normal append which is goes to the right and then pop will also go to

44

00:03:36,900  -->  00:03:37,480
the right.

45

00:03:37,710  -->  00:03:41,970
So pop in append the normal ones always go from the right end of that deck.

46

00:03:42,090  -->  00:03:46,890
But I can also append left and pop left which I can't do if a normal list.

47

00:03:46,890  -->  00:03:50,890
All right you can go and review the debt collector in case there's any confusion than that.

48

00:03:50,970  -->  00:03:54,950
That is basically a list where I can pop and append things from both ends.

49

00:03:55,170  -->  00:03:56,820
Unlike a queue.

50

00:03:57,300  -->  00:03:57,780
All right.

51

00:03:58,020  -->  00:04:04,680
So I'm going to pop left and set that equal to my current node and then since I'm doing that in a current

52

00:04:04,680  -->  00:04:09,100
count and then subtract 1 from it.

53

00:04:09,180  -->  00:04:20,700
No what I'm just going to do is Prince the current node value and then I'm going to say if the current

54

00:04:22,200  -->  00:04:38,760
node to the left then I'm going to say nodes appends current node left and then I add once the next

55

00:04:38,760  -->  00:04:47,140
counts and I go ahead and go through the overall code in just a second.

56

00:04:47,460  -->  00:04:56,490
But I'm going to say if Currence no rights and remember how we use the stot left and right check just

57

00:04:56,490  -->  00:04:57,160
to see if there is.

58

00:04:57,210  -->  00:05:02,080
If it's basically this is essentially if not none check because it fit there.

59

00:05:02,140  -->  00:05:04,840
There's nothing there it's just going to equal none.

60

00:05:05,280  -->  00:05:13,110
In this case I'll say nodes appends current node writes very similar to what we were just doing.

61

00:05:13,330  -->  00:05:27,780
Current Noda writes and I will say next counts in this case plus equals 1 and I will also say if current

62

00:05:27,780  -->  00:05:28,440
count

63

00:05:33,240  -->  00:05:37,950
is equal to zero then we just finished printing that current levels.

64

00:05:37,970  -->  00:05:40,970
I'm going to go ahead and say prints a new line

65

00:05:43,650  -->  00:05:49,670
and then I'm going to reset the current count and it isn't tuple and packing here in order to do this

66

00:05:51,440  -->  00:05:56,660
as next counts and current counts.

67

00:05:56,670  -->  00:06:01,800
And this is just to make sure I don't have to set up a temporary variable for this sort of switch here

68

00:06:01,810  -->  00:06:01,840
.

69

00:06:01,840  -->  00:06:05,270
So that's a nice little feature of Python to be packing.

70

00:06:05,810  -->  00:06:06,830
And let me make sure.

71

00:06:06,840  -->  00:06:08,430
Looks like I have an error here.

72

00:06:08,510  -->  00:06:14,510

73
9:13 let me go ahead and remove that sorry.

74

00:06:14,610  -->  00:06:17,090
That in cash that should have been a zero.

75

00:06:17,100  -->  00:06:19,560
So while the length is not equal to zero.

76

00:06:19,620  -->  00:06:21,150
My apologies.

77

00:06:21,660  -->  00:06:26,180
I'm going to say this is good and zoom out so we can get a whole picture of the code.

78

00:06:26,690  -->  00:06:29,660
To take in the tree check if there's none there.

79

00:06:29,670  -->  00:06:31,650
Otherwise I'm just going return.

80

00:06:31,640  -->  00:06:33,880
Set up a variable Kloeden called nodes.

81

00:06:33,890  -->  00:06:39,740
It's a deck of that given tree and that's going to set my current count equal to one and my next count

82

00:06:39,770  -->  00:06:41,210
equal to zero.

83

00:06:41,220  -->  00:06:47,340
So while length of nodes is not equal to zero meaning I still still have stuff in that nodes deck.

84

00:06:47,390  -->  00:06:54,930
I set my current note equal to left popped out and the current count is going to be subtracted from

85

00:06:54,930  -->  00:07:01,590
1 or have 1 subtract from it that it is going to print the current note value so I can check it that

86

00:07:01,710  -->  00:07:08,550
are going to say if current no thought left notes that append the current note left next count plus

87

00:07:08,550  -->  00:07:09,650
equals 1.

88

00:07:09,990  -->  00:07:11,940
Similar check for the current note.

89

00:07:11,940  -->  00:07:12,700
Right.

90

00:07:12,960  -->  00:07:17,940
And then finally if my current count is equal to zero I can just print a new line and reset my current

91

00:07:17,940  -->  00:07:25,470
index count to actually make sure the saw is working before we finalize the solution.

92

00:07:25,470  -->  00:07:33,810
So what I'm going to do is just go ahead and set up a tree cell roots equals node and then we'll go

93

00:07:33,810  -->  00:07:39,680
ahead and say root that left and root that right are two more nodes to 3.

94

00:07:39,690  -->  00:07:45,030
So when we print this out we should see one space to three and you can try this out if a larger tree

95

00:07:45,020  -->  00:07:55,260
if you want but now I'm just going to call level order prints on the roots and you notice here we didn't

96

00:07:55,250  -->  00:07:56,990
exactly get the spacing right.

97

00:07:57,000  -->  00:07:58,210
So why is that.

98

00:07:58,520  -->  00:08:05,850
That's because of the print statement up here in Python to what I would have to do is put in a comma

99

00:08:05,970  -->  00:08:09,600
in order to keep printing on the same line there.

100

00:08:10,520  -->  00:08:16,470
So that's essentially just a print formatting issue in Python 3 you may have to adjust this.

101

00:08:16,640  -->  00:08:20,980
What you could do as well is just get a new list and call it something like.

102

00:08:21,060  -->  00:08:27,090
Line two prints equals empty list and then just go ahead and print out that list and have this line

103

00:08:27,090  -->  00:08:32,640
be essentially an Append and then print it later on right before you print that new line.

104

00:08:32,650  -->  00:08:33,550
It's up to you.

105

00:08:33,640  -->  00:08:36,270
That's essentially not what the question is getting at.

106

00:08:36,260  -->  00:08:38,850
That's just a print formatting issue.

107

00:08:39,020  -->  00:08:42,530
So don't worry too much about that as long as your logic.

108

00:08:42,580  -->  00:08:49,790
Higher checking for the current nodes both left and right and then essentially adding to this counts

109

00:08:49,800  -->  00:08:51,890
and being able to print new lines is correct.

110

00:08:51,890  -->  00:08:53,950
That's really the key to this.

111

00:08:54,090  -->  00:08:59,610
The complexity of the solution is linear order and because that's the number of nodes in the tree so

112

00:08:59,610  -->  00:09:04,620
its optimal will have to be able to check each node because we printed at least once.

113

00:09:04,620  -->  00:09:05,060
All right.

114

00:09:05,070  -->  00:09:09,290
So again basically what is going on is to print the new line in the correct place.

115

00:09:09,360  -->  00:09:12,020
We're just counting the number of nodes at each level.

116

00:09:12,120  -->  00:09:17,580
Now we're going to have two counts namely the current level counts and the next level counts that current

117

00:09:17,580  -->  00:09:23,340
level count indicates how many nodes should be printed at this level before printing a new line and

118

00:09:23,340  -->  00:09:28,450
then we just take away from that count every time we pop an elements.

119

00:09:28,560  -->  00:09:30,330
What's the current level count reaches zero.

120

00:09:30,330  -->  00:09:31,610
We just print a new line.

121

00:09:31,800  -->  00:09:36,270
The next little count contains the number of nodes in the next level which will become the current level

122

00:09:36,260  -->  00:09:36,690
count.

123

00:09:36,720  -->  00:09:42,180
After printing the new line which is what this line right here is doing OK.

124

00:09:42,260  -->  00:09:46,290
Then after that we just count the number of nodes in the next level by counting the number of children

125

00:09:46,350  -->  00:09:48,370
of the nodes and the current level.

126

00:09:49,120  -->  00:09:49,470
Right.

127

00:09:49,470  -->  00:09:52,800
You can go in and check out the full explanation of Jupiter notebook.

128

00:09:52,800  -->  00:09:59,270
There's a couple of mentions to something called breadth first search and also depth first search and

129

00:09:59,280  -->  00:10:02,520
we'll discuss those later on in the graphs section of this course.

130

00:10:02,930  -->  00:10:03,520
OK.

131

00:10:03,530  -->  00:10:08,090
So that being said is a pretty common interview problem some actually know it well and there's various

132

00:10:08,100  -->  00:10:09,830
ways of actually solving it.

133

00:10:10,050  -->  00:10:15,310
So go ahead and feel free like you have some flexibility on your actual solution.

134

00:10:15,340  -->  00:10:15,900
OK.

135

00:10:15,950  -->  00:10:18,720
So that being said thanks and I'll see at the next lecture
