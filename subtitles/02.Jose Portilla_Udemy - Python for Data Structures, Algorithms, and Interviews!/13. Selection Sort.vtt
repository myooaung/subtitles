WEBVTT
1

00:00:02.200  -->  00:00:06.750
Hello everyone and welcome to this lecture on selection's swords.

2

00:00:06.750  -->  00:00:11.730
So in this lecture we'll get an explanation of selection's soar and get a look at some visualizations

3

00:00:11.730  -->  00:00:12.990
of selection sort.

4

00:00:13.230  -->  00:00:16.940
And then next lecture will actually implement it using Python.

5

00:00:17.820  -->  00:00:24.030
So the selection of saur improves on the bubble sort by making only one exchange for every pass through

6

00:00:24.030  -->  00:00:25.010
the list.

7

00:00:25.230  -->  00:00:30.870
And in order to do this a selection of saur looks for the largest value as it makes a pass and after

8

00:00:30.870  -->  00:00:35.130
completing the pass places in its proper location.

9

00:00:35.130  -->  00:00:37.760
So as with the bubble sort.

10

00:00:37.800  -->  00:00:41.310
After the first pass the largest item is in the correct place.

11

00:00:41.400  -->  00:00:45.530
And then after a second pass the next largest correct place.

12

00:00:45.540  -->  00:00:52.020
So this process continues and then only requires and minus one passes for a list or array and items

13

00:00:52.620  -->  00:00:59.450
since that final item will be placed after that and minus one Istor if pass.

14

00:00:59.580  -->  00:01:05.640
So let's go ahead and see a figure that shows the entire sorting process.

15

00:01:05.760  -->  00:01:11.630
So on each pass the largest remaining item is selected and then placed into its proper location.

16

00:01:11.640  -->  00:01:17.400
So in this implementation we're looking at the largest in other implementations for selection sort.

17

00:01:17.400  -->  00:01:19.720
You can also look at the minimum.

18

00:01:19.800  -->  00:01:24.060
So the penny on how you actually want to program your algorithm you can either keep track of the largest

19

00:01:24.090  -->  00:01:28.300
elements or the minimum elements the smallest ones.

20

00:01:28.320  -->  00:01:32.850
So in this case if we decide to track the largest element we look at her array.

21

00:01:33.000  -->  00:01:36.500
Notice that 93 is the largest So he placed it at the end.

22

00:01:37.080  -->  00:01:39.530
Then the next largest 77.

23

00:01:39.570  -->  00:01:45.210
So he place it and minus one to the end then 55 is the largest.

24

00:01:45.240  -->  00:01:46.860
So we place it where it goes.

25

00:01:47.050  -->  00:01:51.400
Four is in the next largest place behind 55 44.

26

00:01:51.490  -->  00:01:56.120
It's largest but it actually stays in place sort of at its correct location right after 54.

27

00:01:56.250  -->  00:02:00.040
And this process keeps happening until your list is sorted.

28

00:02:00.060  -->  00:02:06.210
So basically keeping track of in this case your largest elements and then pushing it all the way to

29

00:02:06.210  -->  00:02:10.820
the end and you also have a tracker for where it should go in the array.

30

00:02:11.280  -->  00:02:11.890
OK.

31

00:02:11.910  -->  00:02:14.780
And you're able to do this now and end of minus one passes.

32

00:02:14.850  -->  00:02:20.550
You could have also kept track of the minimum and done this in the reverse instead of placing items

33

00:02:20.550  -->  00:02:24.450
or elements at the end of the array you placed them at the beginning.

34

00:02:24.450  -->  00:02:30.090
So you would start with in this case 17 is the minimum and push all the way to the left and then get

35

00:02:30.090  -->  00:02:33.210
20 and then push it all the way to left etc. etc..

36

00:02:33.480  -->  00:02:37.870
So in the visualisations we're going to see we're going to think about it that way.

37

00:02:37.890  -->  00:02:41.390
How you would implement this using a minimum tracker.

38

00:02:41.940  -->  00:02:43.000
OK.

39

00:02:42.990  -->  00:02:47.780
So let's go ahead and look at some visualizations.

40

00:02:48.180  -->  00:02:53.430
So I jumped to the Jupiter notebook and there is a sorting and searching folder it's called implementation

41

00:02:53.490  -->  00:02:54.820
of selection sort.

42

00:02:55.050  -->  00:02:57.260
There's no book we're actually going to see the next lecture.

43

00:02:57.390  -->  00:03:01.690
When we implement this code for a selection sort.

44

00:03:01.710  -->  00:03:03.700
Here are some resources for review.

45

00:03:03.840  -->  00:03:10.660
And in this case we can go in and check out the visual algo or the selection sort animation.

46

00:03:10.950  -->  00:03:17.340
Let's go in and do the selection sorts animation.

47

00:03:17.340  -->  00:03:23.610
So we get started on that first step we're going to grab the minimum element which was 1 and then place

48

00:03:23.610  -->  00:03:25.040
it at index zero.

49

00:03:25.290  -->  00:03:29.550
And now we're going to go along and look for that next elements.

50

00:03:29.580  -->  00:03:30.500
That's a minimum.

51

00:03:30.540  -->  00:03:31.460
And it was two.

52

00:03:31.500  -->  00:03:35.060
So it gets switched with that index one.

53

00:03:35.060  -->  00:03:38.430
Now we're indexed to have Element 14.

54

00:03:38.610  -->  00:03:43.620
So we're looking for the next smallest number which in this case will be the index for which is three

55

00:03:44.130  -->  00:03:47.900
and then we're going to do the swap that way.

56

00:03:47.890  -->  00:03:55.440
Now we're at index three with elements 12 and we're looking for the next item to put in which will be

57

00:03:55.440  -->  00:03:56.220
four.

58

00:03:56.490  -->  00:03:57.800
So he swapped that way.

59

00:03:57.810  -->  00:04:00.740
So notice where 12 and that up here.

60

00:04:00.780  -->  00:04:04.160
So now we have an index for 14.

61

00:04:04.190  -->  00:04:05.690
Next element is going to be five here.

62

00:04:05.710  -->  00:04:07.100
Index 11.

63

00:04:07.490  -->  00:04:09.850
And you can do the swap that way.

64

00:04:10.020  -->  00:04:12.250
Next index six.

65

00:04:12.330  -->  00:04:20.160
Where is it going to be the next is going to be at 7 7 or 10 here one up here at this index and you

66

00:04:20.160  -->  00:04:25.410
can basically keep running this and do the swaps yourself.

67

00:04:25.410  -->  00:04:26.090
And there you go.

68

00:04:26.100  -->  00:04:28.170
Now you have an entire sorted array.

69

00:04:28.170  -->  00:04:33.810
So this was using the swapping with the minimum.

70

00:04:33.810  -->  00:04:39.010
So if you want to see this almost like in slow motion I encourage you to come and check up visual Alwa

71

00:04:39.040  -->  00:04:41.040
dot net Most do that as a homework assignment.

72

00:04:41.070  -->  00:04:43.630
You can really get a visual.

73

00:04:43.650  -->  00:04:45.920
So let's go good and sort this.

74

00:04:45.930  -->  00:04:52.550
Actually it's already sort of it's it's go and create a new one random go OK.

75

00:04:52.940  -->  00:04:59.390
And then we'll go sort's go and take a look at what's happening here.

76

00:04:59.460  -->  00:05:05.460
So we're going to check if all these numbers here are smaller than the current minimums or current minimum

77

00:05:06.870  -->  00:05:07.840
is three.

78

00:05:07.860  -->  00:05:12.000
So we start on the left we're looking for a current minimum.

79

00:05:12.000  -->  00:05:12.630
There it is.

80

00:05:12.630  -->  00:05:14.400
It's two.

81

00:05:14.400  -->  00:05:19.140
So we're going to push it as the new minimum check the other numbers if they're smaller than the current

82

00:05:19.140  -->  00:05:21.780
minimum.

83

00:05:21.780  -->  00:05:26.980
None of them are not so swap two with three here.

84

00:05:26.980  -->  00:05:30.350
So notice how that swap took place.

85

00:05:30.390  -->  00:05:37.230
So now our current minimum is 38 and it's going to be keep getting reset against all the numbers so

86

00:05:37.230  -->  00:05:38.690
we keep going along.

87

00:05:39.090  -->  00:05:42.390
And now we're looking for that next minimum which will actually end up being three.

88

00:05:42.390  -->  00:05:47.650
The number we just swapped here now three is the current minimum.

89

00:05:48.240  -->  00:05:53.370
And you can follow along here with the pseudo code and the status bar which is actually telling you

90

00:05:53.370  -->  00:05:55.920
what's going on.

91

00:05:55.920  -->  00:05:58.110
And then the swap occurs.

92

00:05:58.140  -->  00:06:04.310
So if we push to speed a little faster you'll notice the swaps taking place.

93

00:06:04.310  -->  00:06:09.210
So it's checking against the minimums and then pushing them to where they belong.

94

00:06:09.210  -->  00:06:09.840
All right.

95

00:06:10.110  -->  00:06:17.560
So unlike the bubble sort it's not doing that pair of a swopping you'll notice way fewer swaps in a

96

00:06:17.550  -->  00:06:18.400
bubble sort.

97

00:06:18.450  -->  00:06:20.700
It was doing swaps all along.

98

00:06:20.940  -->  00:06:25.250
And here we're just checking for the new minimums versus the current minimums.

99

00:06:25.530  -->  00:06:30.360
In the example that I showed you in that presentation we were actually looking for the largest.

100

00:06:30.420  -->  00:06:34.590
So I wanted to be aware that you could implement this both ways either by checking for the minimums

101

00:06:34.680  -->  00:06:40.660
or for the largest and then pushing things you know to left or to the right and doing those swaps the

102

00:06:40.680  -->  00:06:43.830
pending on whether you're checking for maximums or minimums.

103

00:06:43.830  -->  00:06:44.460
All right.

104

00:06:44.640  -->  00:06:46.160
So that list is sorted.

105

00:06:46.200  -->  00:06:47.540
Let's go to implement this.

106

00:06:47.550  -->  00:06:51.190
So we get a better understanding of how selection sort works.

107

00:06:51.210  -->  00:06:53.130
Thanks everyone and I'll see you at the next lecture
