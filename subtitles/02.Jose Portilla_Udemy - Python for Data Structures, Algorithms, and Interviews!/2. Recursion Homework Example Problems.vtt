WEBVTT
1

00:00:01.530  -->  00:00:05.970
Hello everyone and welcome to the recursion homework example problem section.

2

00:00:05.970  -->  00:00:11.550
So in this section you're going to have a homework assignment where you'll have to fill out some simple

3

00:00:11.550  -->  00:00:14.500
example problems using recursion.

4

00:00:14.500  -->  00:00:19.490
So let's go ahead and do a quick overview of what the problems look like in the attached notebook.

5

00:00:19.500  -->  00:00:22.070
Let's go ahead and jump to that notebook now.

6

00:00:23.040  -->  00:00:23.460
OK.

7

00:00:23.490  -->  00:00:30.110
So as always you can find the junior notebooks on the links and be viewer links or hub as well.

8

00:00:30.120  -->  00:00:33.920
So in this case we'll be looking at the recursion homework example problems notebook.

9

00:00:34.320  -->  00:00:36.080
Note there's a solutions notebook.

10

00:00:36.090  -->  00:00:42.190
So be careful not to click on that before you've had a go at the example problems yourself in this video

11

00:00:42.190  -->  00:00:42.210
.

12

00:00:42.210  -->  00:00:47.220
We're just going to quickly explain what the recursion homework problems are looking for.

13

00:00:47.220  -->  00:00:50.480
You can go ahead and just skip this video and read along for yourself.

14

00:00:50.490  -->  00:00:51.730
Everything's in the notebook.

15

00:00:52.080  -->  00:00:56.820
But in this video I'll just explain what the problems asking for for any clarification.

16

00:00:57.390  -->  00:00:58.250
Problem one.

17

00:00:58.320  -->  00:01:04.590
Let's go ahead and zoom in on it says write a recursive function which takes an integer and computes

18

00:01:04.590  -->  00:01:08.010
the cumulative sum of zero to that integer.

19

00:01:08.010  -->  00:01:15.330
So for example if your input equals for what I want you to do is return four plus three plus two plus

20

00:01:15.330  -->  00:01:20.260
1 0 which is 10 C function should return 10.

21

00:01:20.340  -->  00:01:23.140
So this is really similar to that factorial problem.

22

00:01:23.160  -->  00:01:25.500
But instead of multiplying we're adding.

23

00:01:25.590  -->  00:01:31.770
So hopefully this should be a simple introduction and follow along with the base case thinking that

24

00:01:31.770  -->  00:01:35.580
we did when we were creating that factorial problem.

25

00:01:35.850  -->  00:01:37.930
And here's a cell for you to fill out.

26

00:01:37.960  -->  00:01:44.500
Def rec sum are recursion some of a past statement there for you to fill out.

27

00:01:44.550  -->  00:01:50.250
Problem 2 says given an integer create a function which returns the sum of all the individual digits

28

00:01:50.370  -->  00:01:51.870
in that integer.

29

00:01:51.870  -->  00:01:55.560
For example if N equals four thousand three hundred twenty one.

30

00:01:55.570  -->  00:01:59.020
What I wanted to do is return four plus three plus two plus one.

31

00:01:59.610  -->  00:02:01.950
So this might be a little confusing.

32

00:02:01.950  -->  00:02:09.690
So let me go out and break it down for you what you're going to do is given any integer you're going

33

00:02:09.690  -->  00:02:18.380
to break it up first into individual parts and then add up each of those individual digits.

34

00:02:18.480  -->  00:02:22.560
So you're not doing what you did here in problem 1.

35

00:02:22.620  -->  00:02:27.660
Instead you're going to be splitting up that digit itself into individual digits.

36

00:02:27.660  -->  00:02:29.510
So how do you do that recursively.

37

00:02:29.520  -->  00:02:30.990
This is pretty tricky.

38

00:02:30.990  -->  00:02:33.160
So I've set up two hints for you.

39

00:02:33.510  -->  00:02:42.450
The first hint is that you have to use maade and I left you a hint here that 4000 321 mod 10 will return

40

00:02:42.590  -->  00:02:43.990
one.

41

00:02:44.030  -->  00:02:45.170
The second hints I gave you.

42

00:02:45.170  -->  00:02:53.130
Is that 1321 single digit divided by 10 is 432 excuse me.

43

00:02:53.130  -->  00:02:55.140
Single slash divided by 10.

44

00:02:55.710  -->  00:03:02.550
So you'll have to do is in order to think of this function recursively know that this equation is what

45

00:03:02.550  -->  00:03:05.190
it's going to look like for your recursive case.

46

00:03:05.190  -->  00:03:06.970
So these are pretty strong hints here.

47

00:03:06.990  -->  00:03:10.030
Go ahead and think about them as you build out your function.

48

00:03:10.470  -->  00:03:17.800
Let's move along to Problem 3 now Problem 3 is probably a more advanced problem than the previous two

49

00:03:17.820  -->  00:03:18.160
.

50

00:03:18.330  -->  00:03:23.300
And it also has a lot of variation and possibilities and it can be asked in a lot of different ways

51

00:03:23.310  -->  00:03:29.010
so we're going to ignore the strict requirements here and what the question asks for is to create a

52

00:03:29.010  -->  00:03:31.860
function called word underscore split.

53

00:03:31.860  -->  00:03:39.900
So that's this function right here and it's going to take in a string phrase and a set list of words

54

00:03:39.910  -->  00:03:40.290
.

55

00:03:40.740  -->  00:03:45.570
And what I want you to make the function do is the function will determine if it's possible to split

56

00:03:45.570  -->  00:03:51.060
the string in a way in which words can be made from the list of words and you can assume the phrase

57

00:03:51.060  -->  00:03:53.400
will only contain words found in the dictionary.

58

00:03:53.430  -->  00:03:55.380
If it's completely split.

59

00:03:55.650  -->  00:04:00.500
So for example the function should be able to take in a string like this.

60

00:04:00.510  -->  00:04:05.930
The man ran all one word in the string taken a list of words.

61

00:04:05.940  -->  00:04:16.470
The Rand man and then recursively check if it's able to splits that string and output the words that

62

00:04:16.470  -->  00:04:19.770
were in the dictionary.

63

00:04:19.770  -->  00:04:24.090
Another example is I love dogs John.

64

00:04:24.270  -->  00:04:26.560
All one string one giant word.

65

00:04:26.880  -->  00:04:29.660
And here we have a dictionary or a list of words.

66

00:04:29.670  -->  00:04:32.580
Excuse me a list not a dictionary.

67

00:04:32.790  -->  00:04:36.200
A list of words that says I am a dog's lover love John.

68

00:04:36.450  -->  00:04:42.780
So has a bunch of words and what I want to do is recursively check if you can split up this string into

69

00:04:42.780  -->  00:04:45.780
words found in that list of words right here.

70

00:04:45.930  -->  00:04:48.180
So I love dogs John.

71

00:04:48.630  -->  00:04:51.080
The last one is an example of something failing.

72

00:04:51.120  -->  00:04:53.090
So the man ran.

73

00:04:53.100  -->  00:04:57.230
Here we have a list of clown ran and man.

74

00:04:57.630  -->  00:05:02.880
Know notice that the function is not able to split this up into words that are all in the dictionary

75

00:05:02.880  -->  00:05:03.170
.

76

00:05:03.210  -->  00:05:11.280
Since this the phrase is not in the dictionary or anything else that is attached to science only clown

77

00:05:11.280  -->  00:05:14.620
Rain Man so returns an empty list.

78

00:05:14.640  -->  00:05:16.320
Go ahead and take your time with this one.

79

00:05:16.320  -->  00:05:20.160
If you're confused or a little stuck then go ahead and check out the solution.

80

00:05:20.190  -->  00:05:21.070
Notebook.

81

00:05:21.420  -->  00:05:23.970
OK so that's it for this video.

82

00:05:23.970  -->  00:05:26.050
Remember this notebook.

83

00:05:26.340  -->  00:05:32.400
If you go to Jupiter and the viewer or the home page it's called the recursion homework example problems

84

00:05:32.400  -->  00:05:32.460
.

85

00:05:32.460  -->  00:05:37.570
The Python notebook and as always it's under the recursion folder for this course.

86

00:05:37.950  -->  00:05:39.000
OK everyone.

87

00:05:39.000  -->  00:05:40.970
Best of luck on the homework assignment.

88

00:05:40.980  -->  00:05:44.810
Feel free to check out the solutions if you get stuck in the next video.

89

00:05:44.820  -->  00:05:47.400
I'll be briefly going over the solutions.

90

00:05:47.430  -->  00:05:49.940
All right I'll see you at the next lecture.
