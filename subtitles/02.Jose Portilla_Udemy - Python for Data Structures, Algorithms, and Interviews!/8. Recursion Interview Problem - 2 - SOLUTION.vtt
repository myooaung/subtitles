WEBVTT
1

00:00:01.380  -->  00:00:06.300
Hello everyone and welcome to the string permutation solution lecture.

2

00:00:06.330  -->  00:00:12.210
So before we begin we're going to do is check out the problem statement.

3

00:00:12.210  -->  00:00:13.190
Again there there's a solution.

4

00:00:13.210  -->  00:00:19.260
No book fully explaining solution below as well as a commented version of the code.

5

00:00:19.680  -->  00:00:26.710
OK let's go ahead and remind ourselves of the problem statement was given a string right.

6

00:00:26.730  -->  00:00:32.370
A function that uses recursion to output a list of all the possible permutations of that string.

7

00:00:32.370  -->  00:00:35.170
So for example the string is ABC.

8

00:00:35.250  -->  00:00:39.320
The function should return these six permutations of it.

9

00:00:39.330  -->  00:00:40.880
Now there was a special note here.

10

00:00:40.980  -->  00:00:46.560
If the characters repeated what you should do is treat each occurrence as distinct.

11

00:00:46.560  -->  00:00:52.500
And what that meant was if you had an input string of three Xs then you should get six versions of x

12

00:00:52.500  -->  00:00:53.910
x x.

13

00:00:54.120  -->  00:01:00.530
All right so given that we want to fill out a solution below soughing I want to make note of.

14

00:01:00.660  -->  00:01:06.840
If the problem was just to permute a string you really wouldn't write your own function.

15

00:01:06.870  -->  00:01:10.740
In Python you would use the tools library.

16

00:01:10.770  -->  00:01:13.770
So I go ahead and suggest that you check that out.

17

00:01:13.770  -->  00:01:21.050
It's a really really useful library in Python for doing these kind of operations.

18

00:01:21.710  -->  00:01:26.940
OK and I'll get you some bonus points if your interviewer if you mention that you know about it before

19

00:01:26.940  -->  00:01:27.890
you begin.

20

00:01:28.440  -->  00:01:34.320
So let's go ahead and look at the steps we're going to take to solve this problem and to zoom in that

21

00:01:34.410  -->  00:01:35.160
below.

22

00:01:35.400  -->  00:01:42.270
So there's four main steps here that we're going to use to solve the first one is we're going to iterate

23

00:01:42.300  -->  00:01:43.490
through the initial string.

24

00:01:43.550  -->  00:01:49.980
So ABC and that makes sense in order to have any sort of permutation we'll have to iterate through that

25

00:01:49.980  -->  00:01:53.680
string then for each character in that initial string.

26

00:01:53.700  -->  00:01:59.670
So for instance A and B and C will set aside that character and then get a list of all permutations

27

00:01:59.670  -->  00:02:01.140
of the string that's left.

28

00:02:01.440  -->  00:02:07.410
So for example if the current iteration is on B then we want to find all the permutations of the string

29

00:02:07.740  -->  00:02:11.470
A C which would be a C and C.

30

00:02:12.100  -->  00:02:17.340
Then once we have that list from step 2 we would add each element from that list to the character from

31

00:02:17.340  -->  00:02:20.980
the initial string and append the result to Arliss the final results.

32

00:02:21.000  -->  00:02:27.360
So for on be again we've gotten the list AC and CA and then we'll add beats the front of those resulting

33

00:02:27.360  -->  00:02:35.370
in B a C and BCA and each of those we add to our final output list and then we return the list of final

34

00:02:35.370  -->  00:02:36.700
results.

35

00:02:36.840  -->  00:02:41.030
So that's the main thinking I want to do for each of these letters.

36

00:02:41.160  -->  00:02:47.520
Here grab the rest of these letters and then see all the permutations of them and then tack them on

37

00:02:47.940  -->  00:02:51.240
to that first initial letter.

38

00:02:51.240  -->  00:02:57.780
Now hopefully you can see that this starting to become a recursive problem because if you have more

39

00:02:57.780  -->  00:03:03.220
elements or letters in that string and more generic term would be elements.

40

00:03:03.300  -->  00:03:08.820
So if you have more elements in that string you could keep doing this for all those letters until you

41

00:03:08.970  -->  00:03:12.010
come back recursively to that first initial letter.

42

00:03:12.450  -->  00:03:16.500
Sort of give you a better idea of what I'm trying to say here let's go ahead and start coding it out

43

00:03:16.520  -->  00:03:17.070
.

44

00:03:17.550  -->  00:03:24.830
So first thing you want to do is just create the function going to call it permute it takes in the string

45

00:03:25.140  -->  00:03:28.300
and then I'm just going to say pass right now.

46

00:03:28.650  -->  00:03:29.490
All right.

47

00:03:29.880  -->  00:03:34.150
So in this case we're going to do since we're going to output a list.

48

00:03:34.190  -->  00:03:37.290
It specifically asked for a list and the problem statement.

49

00:03:37.290  -->  00:03:42.000
I'm just going to make a variable called out and set it to an empty list.

50

00:03:42.480  -->  00:03:44.360
And let's think of the base case.

51

00:03:44.400  -->  00:03:51.810
Again remember as we iterate through the string and go through all the elements we know similar to the

52

00:03:51.810  -->  00:03:56.550
last interview problem we just did that the base case is going to happen when we just have one letter

53

00:03:56.550  -->  00:04:02.260
left because there aren't going to be any following letters so we can do any sort of permutation line

54

00:04:02.290  -->  00:04:02.610
.

55

00:04:02.910  -->  00:04:05.870
So right off the bat we already know the base case is going to look like.

56

00:04:05.870  -->  00:04:14.400
Just by thinking about it logically we're going to say if length of the input string is equal to 1 then

57

00:04:14.400  -->  00:04:20.560
we know out we would just put that element on there.

58

00:04:20.700  -->  00:04:21.390
All right.

59

00:04:21.540  -->  00:04:24.510
Now for the recursive case.

60

00:04:24.510  -->  00:04:24.960
So.

61

00:04:24.960  -->  00:04:26.850
Else.

62

00:04:26.850  -->  00:04:27.780
So what we want to do.

63

00:04:27.780  -->  00:04:32.580
Just like we were saying in those four steps for every letter in that string.

64

00:04:32.580  -->  00:04:35.940
And I'm actually going to comments what we're doing in plain English.

65

00:04:35.940  -->  00:04:44.760
So for every letter in string and in this case I actually want to keep track Sigmon to be using slicing

66

00:04:44.760  -->  00:04:45.000
.

67

00:04:45.000  -->  00:04:46.500
So I'll use enumerate.

68

00:04:46.500  -->  00:04:49.910
So save for I let's.

69

00:04:49.990  -->  00:05:00.890
In enumerates that string then for every permutation resulting from step 2 and 3 that we described.

70

00:05:01.230  -->  00:05:12.230
So for every permutation resulting from step 2 and 3.

71

00:05:12.410  -->  00:05:19.650
So that would be for all say for perm in and this is where the recursive call comes into play.

72

00:05:20.160  -->  00:05:23.480
For Perman permute.

73

00:05:24.300  -->  00:05:27.650
And I'm gonna type it in then explain when I'm actually passing here.

74

00:05:27.690  -->  00:05:33.380
Let me go and center that plus.

75

00:05:35.130  -->  00:05:37.540
Plus one continued

76

00:05:40.410  -->  00:05:50.310
ongoing to add it to the output going to say out equals plus the letter plus that permutation and then

77

00:05:50.310  -->  00:05:55.620
finally WIPs Once that's done I will return

78

00:05:59.100  -->  00:06:00.610
the output list.

79

00:06:00.660  -->  00:06:06.970
OK so base case should have been pretty straightforward once you have just one letter left.

80

00:06:07.020  -->  00:06:11.760
You just return that letter now.

81

00:06:11.780  -->  00:06:13.080
Else is a little different.

82

00:06:13.080  -->  00:06:18.320
So for every letter in that string So what are we doing here I'm saying using enumerate.

83

00:06:18.360  -->  00:06:25.230
I grabbed the index of my total string and then the letter in enumerate and then for every permutation

84

00:06:25.230  -->  00:06:33.100
resodding were set two and three are going to add it to the out puts.

85

00:06:33.120  -->  00:06:43.880
So I say for perm in permute S and S is going to go all the way from loops.

86

00:06:44.050  -->  00:06:44.860
Should be pi.

87

00:06:44.940  -->  00:06:46.730
Excuse me sorry.

88

00:06:46.890  -->  00:06:56.940
From everything up to the current index we're on here plus the string from I plus 1 all the way to the

89

00:06:57.000  -->  00:06:59.390
end.

90

00:06:59.760  -->  00:07:03.130
So this is kind of tricky to understand so we're going to break it them a little further.

91

00:07:03.180  -->  00:07:09.660
So look what I doing here I'm grabbing everything up to that index and attaching it to that index plus

92

00:07:09.660  -->  00:07:12.590
one all the way to the end.

93

00:07:12.750  -->  00:07:19.680
And so what that will do when I pass into permutation it will if we go back to the solution book

94

00:07:22.800  -->  00:07:30.390
you can see here it's going to basically say OK get a and then pass that b c into the permute function

95

00:07:30.810  -->  00:07:35.730
and then recursively keep calling it all the way until you only get a single element in that string

96

00:07:35.740  -->  00:07:36.340
.

97

00:07:36.930  -->  00:07:41.430
So your homework assignment if you're having trouble understanding what the slice notation is actually

98

00:07:41.430  -->  00:07:45.610
doing in this permutation recursive call.

99

00:07:45.840  -->  00:07:52.560
Go ahead and add print statements to help yourself really visualize this.

100

00:07:52.560  -->  00:08:01.590
So for instance you can add print statements for yourself if you want to know perm is.

101

00:08:01.590  -->  00:08:06.460
You can and that prints well.

102

00:08:06.480  -->  00:08:08.000
Just go ahead and see what that will do.

103

00:08:08.050  -->  00:08:14.580
You run it that way and then go ahead and run it on a very simple and obvious string like one two three

104

00:08:16.440  -->  00:08:21.850
and I'll show you the steps printed out for the permutations that it's doing.

105

00:08:22.380  -->  00:08:25.710
Permis three permits two permits two three permits three two.

106

00:08:25.980  -->  00:08:31.980
And then since you're adding that to let you can actually print that out as well.

107

00:08:32.760  -->  00:08:37.230
So we can go ahead and then put in for instance Prince

108

00:08:39.750  -->  00:08:43.320
current letter is

109

00:08:45.920  -->  00:08:54.420
like T and if we run that we can say current letter I should say elements since I'm actually running

110

00:08:54.420  -->  00:08:56.700
numbers here but I'll say ABC.

111

00:08:56.910  -->  00:09:02.790
So current letter is B the permit C current letter C permits B current letters a.

112

00:09:02.900  -->  00:09:04.500
And notice here.

113

00:09:04.500  -->  00:09:12.050
Now we have the permutations we can add to it b c and c b which will end up being a B C and A C B.

114

00:09:12.180  -->  00:09:16.200
And that's going to be added to that out list.

115

00:09:16.230  -->  00:09:18.750
So use print statements to help you understand this.

116

00:09:18.750  -->  00:09:23.820
I know it's a little confusing if you just look at it a first glance but feel free to print out as many

117

00:09:23.820  -->  00:09:25.770
of these things as you need to.

118

00:09:25.770  -->  00:09:31.260
You can also print out the specific index slices to help you really understand how these recursive calls

119

00:09:31.320  -->  00:09:32.590
are working here.

120

00:09:33.060  -->  00:09:33.790
OK.

121

00:09:34.020  -->  00:09:35.950
So that's it for this solution.

122

00:09:35.970  -->  00:09:41.330
Member you can read the entire solution notebook for a deeper view of how it's actually working.

123

00:09:41.520  -->  00:09:47.340
But all we're basically doing is going through the iteration of the string then for that string we take

124

00:09:47.340  -->  00:09:53.490
off an initial letter look at everything else and then find the permutations of it in which case if

125

00:09:53.490  -->  00:09:59.460
we do this recursively we'll take off that initial string and then find the recursions of that using

126

00:09:59.460  -->  00:10:01.540
that slicing notation we did earlier.

127

00:10:01.890  -->  00:10:02.560
All right.

128

00:10:02.820  -->  00:10:06.560
So go ahead and walk through the solution and make sure you fully understand it.

129

00:10:06.670  -->  00:10:09.870
And other than that I will see you at the next lecture.

130

00:10:09.870  -->  00:10:10.630
Good job everyone
