1

00:00:01,410  -->  00:00:06,270
Hello everyone and welcome to the implementation of binary search lecture.

2

00:00:06,270  -->  00:00:07,950
So here's your example notebook.

3

00:00:07,950  -->  00:00:10,140
It's called implementation of binary search.

4

00:00:10,590  -->  00:00:15,870
And you have two versions in reversion and then a recursive version.

5

00:00:15,870  -->  00:00:17,860
So we're going to go ahead and go through both of them here.

6

00:00:18,030  -->  00:00:20,800
Code them out explain or doing along the way.

7

00:00:21,150  -->  00:00:25,000
And then you have the reference of the notebook in case you want to go back and check it out.

8

00:00:25,380  -->  00:00:27,690
Let's get started.

9

00:00:27,690  -->  00:00:34,680
I went ahead and started a new notebook here and going to start off with my first function just called

10

00:00:34,710  -->  00:00:38,590
binary search.

11

00:00:38,610  -->  00:00:41,530
It's going to take in an array and that element

12

00:00:44,160  -->  00:00:51,180
lets go it and zoom in here then I'm going to say my first and last index values are going to be variables

13

00:00:51,180  -->  00:00:51,260
.

14

00:00:51,270  -->  00:01:00,830
I'll say first equals zero and last equals the length of the array minus one makes.

15

00:01:00,870  -->  00:01:08,400
Indexing starts at zero and then I'll say founds as you call false and we'll just use found as a marker

16

00:01:08,400  -->  00:01:14,910
just like we did for sequential search whether or not if we found that or not the target element that

17

00:01:14,910  -->  00:01:25,340
is then I'm going to say Weil first is less than or equal to last and not found meaning we haven't found

18

00:01:25,340  -->  00:01:28,060
our target element yet.

19

00:01:28,110  -->  00:01:30,420
We'll go ahead and make a middle marker.

20

00:01:30,420  -->  00:01:37,260
That case will call mid a new variable and that's just going to be first close last

21

00:01:39,900  -->  00:01:40,830
divided by two

22

00:01:44,190  -->  00:01:49,950
and then one I'm going to say is check if there's a match found if there's not going to set up new midpoints

23

00:01:51,180  -->  00:01:59,940
meaning and it's going to go ahead and say if at that middle location we found the elements I'll just

24

00:01:59,940  -->  00:02:05,020
say found the true and that's the end of the analysis there.

25

00:02:05,100  -->  00:02:19,230
Otherwise else I'm going to go ahead and say if the elements is less than that value then my last equals

26

00:02:19,380  -->  00:02:20,820
mid minus one

27

00:02:24,540  -->  00:02:25,660
else.

28

00:02:25,800  -->  00:02:30,780
My first variable is going to be equal to mid plus 1.

29

00:02:31,110  -->  00:02:34,990
So all this loop is doing here this block of code.

30

00:02:35,310  -->  00:02:40,020
It's just basically deciding if we're going to use that lower half of the list or the right half of

31

00:02:40,020  -->  00:02:40,890
the list.

32

00:02:40,890  -->  00:02:42,540
This is the case for lower.

33

00:02:42,540  -->  00:02:44,440
This is the case for the right have.

34

00:02:44,670  -->  00:02:51,150
And after that while loop is done executing meaning we've either gone through all the possible elements

35

00:02:51,150  -->  00:02:57,930
of through our binary search and or we just actually found that it equals true at the end we just return

36

00:02:59,190  -->  00:03:00,780
found.

37

00:03:01,800  -->  00:03:05,650
OK let's go ahead and run this make sure we have no errors.

38

00:03:05,830  -->  00:03:08,530
I'm going to go ahead and make an array.

39

00:03:09,960  -->  00:03:12,690
And keep in mind the array must already be sorted.

40

00:03:12,720  -->  00:03:16,030
We're taking further advantage of the fact that we have a sort of the array.

41

00:03:16,080  -->  00:03:18,990
This won't work on an unsorted array.

42

00:03:18,990  -->  00:03:27,000
Now let's go ahead and call binary search on the array and we'll look for.

43

00:03:27,300  -->  00:03:29,670
Let's say for.

44

00:03:30,210  -->  00:03:31,960
Ok perfect that's in there.

45

00:03:32,220  -->  00:03:34,660
Let's look for 10 just to make sure.

46

00:03:34,860  -->  00:03:38,790
And let's look for an item that's not there 13 balls.

47

00:03:39,210  -->  00:03:40,290
Okay great.

48

00:03:40,290  -->  00:03:44,430
So our normal version of binary search implementation is working.

49

00:03:44,430  -->  00:03:48,750
Let's go through it one more time just to make sure we understand what's going on.

50

00:03:48,750  -->  00:03:54,230
We set up a function to take in the array and the target element you're looking for.

51

00:03:54,300  -->  00:03:59,810
We set up two variables first and last which are basically index markers.

52

00:03:59,880  -->  00:04:00,720
Then we set.

53

00:04:00,970  -->  00:04:07,290
Sound is equal to falls and then we're going to continually go until first is Lessner equal to last

54

00:04:07,650  -->  00:04:13,230
and we haven't found the element yet we set a variable called middle which is just first Plus last divided

55

00:04:13,230  -->  00:04:18,000
by two to get that middle index of that list or the sublist.

56

00:04:18,600  -->  00:04:24,140
And then we say if at that middle index we have found the element then it equals true.

57

00:04:24,420  -->  00:04:31,410
Otherwise if the element is less than the target element that is is less than the element at that middle

58

00:04:31,600  -->  00:04:32,020
.

59

00:04:32,170  -->  00:04:37,760
Set last equal to mid minus 1 meaning we've chosen that lower half of the list.

60

00:04:37,800  -->  00:04:43,770
Otherwise we'll set first equal to mid plus 1 meaning we've chosen that higher right half of the list

61

00:04:43,770  -->  00:04:44,970
.

62

00:04:44,970  -->  00:04:48,550
Once you've done through this while loop we'll just returned the found boolean.

63

00:04:48,870  -->  00:04:49,660
Either we found it.

64

00:04:49,680  -->  00:04:55,110
So we said equal to true or it was never changed and we never found that meaning it was equal to false

65

00:04:55,110  -->  00:04:56,280
.

66

00:04:56,280  -->  00:04:56,790
All right.

67

00:04:56,790  -->  00:05:01,870
So let's go ahead and implement implement a recursive version of binary search.

68

00:05:02,730  -->  00:05:10,680
So we're going to do here is start off by just go ahead and clear up these cells

69

00:05:14,850  -->  00:05:24,180
and I'm going to go ahead and say Ari C for recursive B.N. for binary and then search takes in an array

70

00:05:25,560  -->  00:05:32,690
and that elements remember for recursive algorithms when you start off with the base case.

71

00:05:32,790  -->  00:05:43,060
In this case will say if the length of the array is equal to zero return false.

72

00:05:43,290  -->  00:05:51,210
So we're going to be continually doing is basically recursively calling our bin's binary search function

73

00:05:51,210  -->  00:05:51,560
.

74

00:05:51,770  -->  00:05:56,580
But if we finally got an array that's equal to zero as we keep splitting it then we know it never found

75

00:05:56,580  -->  00:05:58,530
the elements so that's our base case.

76

00:05:58,530  -->  00:06:01,090
Let's go over the recursive case.

77

00:06:02,730  -->  00:06:11,430
So we set a mid that middle variable equal to the array the length of the array divided by two.

78

00:06:11,430  -->  00:06:20,010
And similarly to the last implementation we say if the array at that middle index is equal to the elements

79

00:06:20,970  -->  00:06:23,910
then we just return true we found it.

80

00:06:24,490  -->  00:06:25,380
Otherwise we'll say.

81

00:06:25,380  -->  00:06:30,790
Else we're going to call this again on the second half or call it on the first half.

82

00:06:30,840  -->  00:06:41,640
So I'll say is if the elements is less than the value at that middle array are going to return a recursive

83

00:06:41,640  -->  00:06:47,120
call here going to say R-S.C. binary search.

84

00:06:47,740  -->  00:06:55,990
And I'm going to call it on that second half of the array.

85

00:06:56,040  -->  00:06:58,710
Otherwise else

86

00:07:01,300  -->  00:07:14,550
I'll return a recursive call on the array from Midhat plus 1 all the way to the ends.

87

00:07:14,600  -->  00:07:15,870
This is really similar.

88

00:07:15,870  -->  00:07:20,880
This is just a recursive version of choosing which half of the list to continually go on.

89

00:07:20,880  -->  00:07:23,510
So if we scroll up we don't have it anymore.

90

00:07:24,090  -->  00:07:29,460
But if you remember from the previous let me just hop over to Jupiter notebooks or I can show you we

91

00:07:29,460  -->  00:07:35,040
had essentially this set of midpoints where we went either for the lower half the list or the higher

92

00:07:35,040  -->  00:07:36,100
half.

93

00:07:36,480  -->  00:07:41,430
Using this comparison will reset up or last and first the variables were doing the same thing here except

94

00:07:41,430  -->  00:07:47,760
for a recursive call where we use index slicing to passen which half of the list we want to recursively

95

00:07:47,760  -->  00:07:49,030
continue on.

96

00:07:49,630  -->  00:07:55,670
OK let's go ahead and make sure we have the error here and that it worked out.

97

00:07:57,240  -->  00:07:58,470
I'll call it on that same array.

98

00:07:58,480  -->  00:08:01,250
Let's go to print that array make sure it's sorted.

99

00:08:01,320  -->  00:08:03,180
OK we're good.

100

00:08:04,040  -->  00:08:07,690
Call it on that array and I'll search for the item 3.

101

00:08:07,770  -->  00:08:08,990
Great that's in there.

102

00:08:09,090  -->  00:08:13,240
And if I search for 13 we get false because it's not in there.

103

00:08:13,270  -->  00:08:15,580
So looks like it's all working out.

104

00:08:15,630  -->  00:08:20,970
Go ahead and review the Jupiter note book where it has comments at every step put in print statements

105

00:08:20,970  -->  00:08:21,020
.

106

00:08:21,030  -->  00:08:22,850
If anything's not making sense for you.

107

00:08:23,250  -->  00:08:27,600
But again hopefully this should have been a pretty basic idea of just binary search or splitting that

108

00:08:27,600  -->  00:08:32,850
list and hath continually checking if that middle point indexed element is equal to the element you're

109

00:08:32,850  -->  00:08:33,660
looking for.

110

00:08:33,810  -->  00:08:35,870
If not you just split it in half again.

111

00:08:35,990  -->  00:08:45,420
The pinning on whether this is true or not your target is less than the array value at that middle index

112

00:08:45,420  -->  00:08:46,130
.

113

00:08:46,140  -->  00:08:46,660
OK.

114

00:08:46,980  -->  00:08:50,210
That's it for the implementation of binary search and two versions.

115

00:08:50,240  -->  00:08:54,330
Make sure you really understand binary search just the logic behind it because you're going to see that

116

00:08:54,330  -->  00:08:58,770
concept again and again throughout various interview questions.

117

00:08:58,770  -->  00:09:01,680
All right thanks everyone and I'll see you at the next lecture
