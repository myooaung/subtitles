1

00:00:01,830  -->  00:00:06,360
Hello everyone and welcome to the recursions section of this course.

2

00:00:06,390  -->  00:00:11,940
So in this lecture hall we're going to do is quickly go over what you can expect in this entire section

3

00:00:12,480  -->  00:00:16,280
and then we'll go over the introduction to recursion lecture.

4

00:00:16,290  -->  00:00:16,870
OK.

5

00:00:17,190  -->  00:00:19,380
So what's coming up in the section of the course.

6

00:00:19,380  -->  00:00:23,700
First we have an overview of recursion what it is and why we use it.

7

00:00:24,030  -->  00:00:27,990
Then we'll have some basic recursion examples that we'll walk through.

8

00:00:28,260  -->  00:00:34,590
After that we'll get an introduction to memorization and dynamic programming and how it relates to recursion

9

00:00:34,590  -->  00:00:40,920
in general and then we'll end it with for real interview practice questions for you to check your solutions

10

00:00:40,920  -->  00:00:42,070
against.

11

00:00:42,750  -->  00:00:43,420
OK.

12

00:00:43,740  -->  00:00:49,500
So it's going to get started with this lecture where we go over the basics of recursion through an introduction

13

00:00:49,510  -->  00:00:50,710
.

14

00:00:51,030  -->  00:00:53,460
So what is recursion.

15

00:00:53,460  -->  00:00:55,880
There's two main instances of recursion.

16

00:00:55,890  -->  00:01:01,650
The first is one recursion is used as a technique in which a function makes one or more calls to itself

17

00:01:01,660  -->  00:01:02,060
.

18

00:01:02,460  -->  00:01:06,900
This is the main instance we're going to be focusing on throughout this entire section since the one

19

00:01:06,900  -->  00:01:09,890
that comes up most in interview style questions.

20

00:01:10,200  -->  00:01:15,810
It's important to know that a second instance of recursion is when a data structure itself uses smaller

21

00:01:15,840  -->  00:01:20,390
instances of the exact same type of data structure when it represents itself.

22

00:01:20,430  -->  00:01:24,010
We'll focus on this later on in other sections of this course.

23

00:01:24,180  -->  00:01:29,620
But for now we'll focus on when a function makes one or more calls to itself.

24

00:01:30,780  -->  00:01:34,560
OK so why use recursion in general.

25

00:01:34,590  -->  00:01:39,870
Recursion provides a powerful turreted for performing repetitive tasks in which either a for loop or

26

00:01:39,870  -->  00:01:42,380
a WHILE loop isn't really ideal.

27

00:01:42,540  -->  00:01:47,430
Should be noted that most modern programming languages support recursion and recursion serves as a great

28

00:01:47,430  -->  00:01:50,540
tool for building up particular data structures.

29

00:01:51,090  -->  00:01:58,430
So let's go ahead and start this with an introduction by example using a factorial function.

30

00:01:58,980  -->  00:02:03,510
So the factorial function is the noter of an exclamation point and hopefully already familiar with it

31

00:02:03,510  -->  00:02:03,960
.

32

00:02:04,020  -->  00:02:11,970
It's defined as the product of integers from 1 to some number n so and factorial or an exclamation mark

33

00:02:12,240  -->  00:02:17,010
is equal to N times and times 1 Times and Time Times.

34

00:02:17,140  -->  00:02:17,660
Excuse me.

35

00:02:17,700  -->  00:02:22,270
End times and minus one times and minus two times and minus three.

36

00:02:22,300  -->  00:02:25,860
Continued on until you reach 3 times 2 times 1 etc..

37

00:02:26,220  -->  00:02:31,970
Now what's important to know here is if any equals zero that n factorial is equal to 1.

38

00:02:32,250  -->  00:02:37,860
That's important to know because we're going to be using this as our base case later on.

39

00:02:37,860  -->  00:02:45,500
So let's look at his quick example for factorial is equal to 4 times 3 times 2 times 1 equals 24.

40

00:02:45,510  -->  00:02:49,190
So how can we state this in a recursive manner.

41

00:02:49,440  -->  00:02:52,910
And this is where the concept of that base case is really going to come into play.

42

00:02:53,340  -->  00:03:00,210
So we can see that four factorial is equal to 4 times and we can group everything else together 3 times

43

00:03:00,210  -->  00:03:01,290
2 times 1.

44

00:03:01,680  -->  00:03:08,970
So we realize that this is actually equal to 4 factorial is equal to 4 times 3 factorial which is equal

45

00:03:08,970  -->  00:03:10,560
to 24.

46

00:03:10,560  -->  00:03:17,370
So you know here we can keep making recursive calls to this factorial function and to write that formally

47

00:03:17,370  -->  00:03:22,980
we can say n factorial Z could n times and minus 1 factorial.

48

00:03:23,720  -->  00:03:28,280
OK so the base case is the key to understanding this.

49

00:03:28,470  -->  00:03:32,110
If any equals zero and factorial equals 1.

50

00:03:32,250  -->  00:03:35,130
So this means that the base case occurs when N equals zero.

51

00:03:35,370  -->  00:03:39,560
The recursive cases are defined in the previous equation right here.

52

00:03:39,810  -->  00:03:44,940
So we have the recursive cases and then we have a base case and this will be clear when we actually

53

00:03:44,940  -->  00:03:48,090
code this out live in a Jupiter notebook.

54

00:03:48,540  -->  00:03:54,420
So quick reminder whenever you're trying to develop a recursive solution it's very important to think

55

00:03:54,420  -->  00:03:58,400
about the base case as your solution will need a return to the base case.

56

00:03:58,470  -->  00:04:01,500
Once all the recursive cases have been worked through.

57

00:04:01,530  -->  00:04:07,160
So eventually after going through every single recursion case you'll come up to the base case.

58

00:04:07,810  -->  00:04:14,220
OK so let's actually code this out so it becomes a little more clear what a base case is and what the

59

00:04:14,220  -->  00:04:18,570
recursive cases are and how we can build recursive functions off of that.

60

00:04:18,920  -->  00:04:26,790
OK so we're going to jump now to the Jupiter note book and code out the factorial example.

61

00:04:26,850  -->  00:04:27,690
All right everyone.

62

00:04:27,690  -->  00:04:30,270
Now we're at the Jupiter notebooks as always.

63

00:04:30,270  -->  00:04:35,400
You can check out more information on what we just went over in the introduction to recursion notebook

64

00:04:36,240  -->  00:04:39,660
here and it goes over everything we just went over in the slides.

65

00:04:39,840  -->  00:04:44,790
So let's go ahead and get started with some life code which is also in this note book and will be working

66

00:04:44,790  -->  00:04:47,480
out through this sample notebook.

67

00:04:47,840  -->  00:04:54,570
OK so recursion and let's go ahead and tackle this factorial function number the factorial function

68

00:04:54,570  -->  00:04:56,620
states that end factorial.

69

00:04:56,640  -->  00:05:03,150
We write this in a recursive manner is equal to end times and minus one factorial in our base case is

70

00:05:03,240  -->  00:05:07,370
if and is equal to zero then and factorial is equal to 1.

71

00:05:07,620  -->  00:05:13,980
So you can imagine eventually this term here and minus one or minus two and minus three etc etc. will

72

00:05:13,980  -->  00:05:18,580
eventually become an equal zero and we'll have this base case.

73

00:05:18,910  -->  00:05:21,600
OK so let's start out writing or function

74

00:05:24,480  -->  00:05:33,230
we'll call it fact and it will accept the number and it's going to return the factorial event.

75

00:05:33,930  -->  00:05:37,060
So we want to start off with the base case.

76

00:05:37,470  -->  00:05:39,450
So the base case happens like we said.

77

00:05:39,510  -->  00:05:47,260
If n is equal to zero I will return 1.

78

00:05:48,080  -->  00:05:56,370
OK so let's go ahead and mark that through a comet as our base case and then we're going to have an

79

00:05:56,370  -->  00:05:57,250
else statement.

80

00:05:57,300  -->  00:06:04,080
So if the base case isn't met we want to do is return that N times.

81

00:06:04,140  -->  00:06:06,860
And this is where the recursive call comes into play.

82

00:06:06,990  -->  00:06:13,370
We call the function itself and call it on and minus one.

83

00:06:14,160  -->  00:06:15,150
And that's our function.

84

00:06:15,180  -->  00:06:16,410
That's really all there is to it.

85

00:06:16,410  -->  00:06:18,910
This is a pretty basic example of recursion.

86

00:06:19,350  -->  00:06:23,520
Now we can see the factorial of 5 is equal to 120.

87

00:06:23,520  -->  00:06:29,900
So what's important to know is we had an if statement to check if a base case occurred here.

88

00:06:30,450  -->  00:06:34,370
Without this function it wouldn't have successfully completed running.

89

00:06:34,520  -->  00:06:39,360
And there's a figure in the Jupiter note book free to go and check out so we can see what's actually

90

00:06:39,360  -->  00:06:40,920
happening when we run this function.

91

00:06:40,920  -->  00:06:47,670
Sometimes recursion is a little hard to visualize So hopefully this helps you out here so we input our

92

00:06:47,670  -->  00:06:50,710
function and we input 5 into the function.

93

00:06:50,710  -->  00:06:53,410
So it says all right five factorial.

94

00:06:53,460  -->  00:06:55,020
So we pop back here.

95

00:06:55,070  -->  00:06:58,190
We're putting five for five factorial.

96

00:06:58,200  -->  00:07:02,040
I'll check if it's the base case which is not so or else.

97

00:07:02,040  -->  00:07:08,490
And if it's not that then it's going to return end times factorial and minus one.

98

00:07:08,700  -->  00:07:12,810
So it's returning five times for factorial.

99

00:07:12,810  -->  00:07:14,130
Now remember this recursive.

100

00:07:14,130  -->  00:07:16,770
So now it's calling for factorial.

101

00:07:16,770  -->  00:07:23,370
So that becomes four times three factorial etc. Three times two factorial two times one factorial and

102

00:07:23,370  -->  00:07:25,120
then that goes to 1.

103

00:07:25,680  -->  00:07:34,320
Returns 1 two times one equals two returns to three times to 6 returns 6 turns only for returns 120

104

00:07:34,800  -->  00:07:36,750
and that's how we get our final value.

105

00:07:37,080  -->  00:07:38,400
So make sure you take your time.

106

00:07:38,400  -->  00:07:42,350
You can follow this chart for the top of the bottom and or.

107

00:07:42,390  -->  00:07:46,020
Yeah and then back up to reach the base case.

108

00:07:46,020  -->  00:07:50,700
So recursions a really powerful tool and it can be a bit of a tricky concept to implement.

109

00:07:50,700  -->  00:07:57,840
So we're going to do it in case you had a little trouble understanding what just happened here in the

110

00:07:57,840  -->  00:07:58,740
next couple of lectures.

111

00:07:58,740  -->  00:08:03,750
We're going to go over a few more example problems for recursion then afterwards hopefully you'll be

112

00:08:03,750  -->  00:08:08,290
fully prepared to face some real interview questions involving recursion.

113

00:08:08,310  -->  00:08:11,940
What I want you to do is if this was a little bit troublesome for you.

114

00:08:11,940  -->  00:08:14,480
Or are you still not completely understanding it.

115

00:08:14,490  -->  00:08:19,650
See if you can add some print statements to print out all the steps or print out some sort of statement

116

00:08:19,650  -->  00:08:24,320
for yourself so you can see what's actually happening as the function is being run.

117

00:08:24,780  -->  00:08:27,200
OK I'll see you at the next lecture.
