1

00:00:01,440  -->  00:00:06,120
Hello everyone and welcome to lecture on tree traversals.

2

00:00:06,120  -->  00:00:09,090
So we're going to learn how to traverse through a tree.

3

00:00:09,100  -->  00:00:14,430
Andrew's going to be three main methods for this pre order in order in post order.

4

00:00:14,430  -->  00:00:19,320
So we're going to start out by defining these three traversals more carefully and then look at some

5

00:00:19,320  -->  00:00:23,250
examples where these patterns might be useful.

6

00:00:23,250  -->  00:00:26,770
So they're commonly used patterns to visit all nodes in the tree.

7

00:00:26,790  -->  00:00:32,460
These three and basically the difference between these patterns is the order in which each node is visited

8

00:00:32,460  -->  00:00:33,620
.

9

00:00:33,720  -->  00:00:37,810
And like I mentioned before there preorder in order and post order.

10

00:00:38,300  -->  00:00:40,470
So we'll start off with preorder.

11

00:00:40,590  -->  00:00:47,910
So the definition of preorder is that in a pre-order traversal we visit the root node first then recursively

12

00:00:47,910  -->  00:00:56,790
do a pre-order traversal of the left subtree followed by a recursive pre-order of the rights tree in

13

00:00:56,790  -->  00:00:58,440
an in order traversal.

14

00:00:58,530  -->  00:01:02,030
We recursively do it in order traversal on the left subtree.

15

00:01:02,060  -->  00:01:02,970
This is the root node.

16

00:01:03,000  -->  00:01:08,880
And then finally do recursive in order traversal of the right subtree host order recursively do the

17

00:01:08,880  -->  00:01:14,830
Post order traversal on the left so tree in the right subtree followed by a visit to the routine.

18

00:01:15,330  -->  00:01:20,060
So if you notice you're basically just changing when you visit the root node and this will be more clear

19

00:01:20,060  -->  00:01:23,080
when we actually see coded out examples of this.

20

00:01:23,820  -->  00:01:28,610
What we're going to do now is learn through in a quick example on how you might use preorder.

21

00:01:28,620  -->  00:01:34,230
So let's go ahead and check out this tree here.

22

00:01:34,230  -->  00:01:38,290
So here we have a representation of a book as a tree.

23

00:01:38,340  -->  00:01:40,010
The book is the root of the tree.

24

00:01:40,050  -->  00:01:42,740
And each chapter is a child of the root.

25

00:01:42,810  -->  00:01:49,200
Each section within a chapter is a child of the chapter and each subsection is a child of each section

26

00:01:49,380  -->  00:01:50,900
and so on.

27

00:01:50,910  -->  00:01:56,760
So this figure here shows kind of a limited version of a book fall into chapters and note that this

28

00:01:56,760  -->  00:02:00,380
traversal algorithm works for trees of any number of children.

29

00:02:00,420  -->  00:02:04,890
Right now we're just going to stick with binary trees for two children for each node.

30

00:02:05,820  -->  00:02:06,330
All right.

31

00:02:06,630  -->  00:02:08,670
So let's start with.

32

00:02:08,670  -->  00:02:14,460
Suppose you wanted to read this book from front to back and a quick note in the slides.

33

00:02:14,460  -->  00:02:20,760
There's notes about what I'm going to be talking about here with text of what I was saying as far as

34

00:02:20,880  -->  00:02:22,590
the code implementation of this.

35

00:02:22,650  -->  00:02:25,970
But I'm going explain this with just a figure here.

36

00:02:26,160  -->  00:02:30,940
If you want to go in the fall on Tex you can download the slide from this lecture.

37

00:02:31,020  -->  00:02:36,730
But anyways let's go back to the task at hand trying to read this book from front to back.

38

00:02:36,870  -->  00:02:41,100
That's what the preorder traversal gives you exactly for ordering.

39

00:02:41,310  -->  00:02:43,150
You're going to start at the root of the tree.

40

00:02:43,170  -->  00:02:47,590
The book node and then you're going to follow the preorder traversal instructions.

41

00:02:47,670  -->  00:02:50,660
They're going to recursively call preorder on the left child.

42

00:02:50,790  -->  00:02:54,900
In this case it's chapter 1 and then recursively called preorder again.

43

00:02:54,900  -->  00:02:59,930
On the left child to go to section one point one section one point one has children.

44

00:03:00,060  -->  00:03:05,760
You can't make any additional recursive calls there once you're finished with Section 1.1 then you move

45

00:03:05,850  -->  00:03:08,040
up the tree to Chapter 1.

46

00:03:08,040  -->  00:03:14,250
At this point you still need to visit the right subtree of chapter 1 which section 1.2 as before we

47

00:03:14,250  -->  00:03:18,450
visit the left subtree Which brings us to Section 1 point to point 1.

48

00:03:18,510  -->  00:03:24,450
Then we have the note for Section 1 point to point to leave Section 1.2 finished.

49

00:03:24,450  -->  00:03:25,970
We return to Chapter 1.

50

00:03:25,980  -->  00:03:30,600
Then we return to the book mode and follow the same procedure for Chapter 2.

51

00:03:31,260  -->  00:03:37,840
So the code for writing these tree traversals is actually pretty elegant given there's kind of two options

52

00:03:37,870  -->  00:03:38,210
right.

53

00:03:38,220  -->  00:03:40,470
This is the text of what I just said.

54

00:03:40,860  -->  00:03:47,050
So the base case here as far as coding this out is simply a check of the tree exists.

55

00:03:47,100  -->  00:03:52,860
So if trees if we have a tree then if the tree parameter is none the function's going to return without

56

00:03:52,860  -->  00:03:56,320
taking any action.

57

00:03:56,340  -->  00:04:03,570
Something to note here is right now we have this pre-order traversal algorithm as just a function it's

58

00:04:03,570  -->  00:04:04,200
not a method.

59

00:04:04,200  -->  00:04:07,240
So note here how there is no self-calming tree.

60

00:04:07,290  -->  00:04:13,390
This is a function outside of the implementation of binary tree class.

61

00:04:13,560  -->  00:04:18,180
So you could have also implemented this as a method.

62

00:04:18,210  -->  00:04:22,110
So here we can implement a method of the binary tree class.

63

00:04:22,110  -->  00:04:26,610
The internal method must check for the existence of the left and right children before making that recursive

64

00:04:26,610  -->  00:04:27,290
call.

65

00:04:27,420  -->  00:04:29,200
So it would look something like this.

66

00:04:29,430  -->  00:04:31,400
You would have pre-order here self.

67

00:04:31,520  -->  00:04:38,760
Here I'm just printing soft Buckey and then saying if self left child if self-taught right child so

68

00:04:39,810  -->  00:04:44,640
you might be wondering what's the best way to implement this as a function outside of the class or as

69

00:04:44,640  -->  00:04:46,590
a method within the class.

70

00:04:46,590  -->  00:04:52,530
So implementing preorder or any of these traversal algorithms as an external function is probably better

71

00:04:52,530  -->  00:04:53,230
in this case.

72

00:04:53,250  -->  00:04:58,040
And the reason for that is that you're very rarely just wanting to traverse a tree.

73

00:04:58,080  -->  00:05:02,520
In most cases you're going to want to accomplish something else while using one of the basic traversal

74

00:05:02,520  -->  00:05:03,650
patterns.

75

00:05:03,720  -->  00:05:10,500
So for now on we're going to write the rest of the traversals as external functions and moving on the

76

00:05:10,500  -->  00:05:11,640
post order.

77

00:05:11,820  -->  00:05:16,390
This algorithm for the sort of traversal is nearly identical to the preorder except that we're gonna

78

00:05:16,410  -->  00:05:19,680
move the call to print to the end of the function.

79

00:05:19,770  -->  00:05:22,710
So notice here we're going to check if that tree exists.

80

00:05:22,710  -->  00:05:27,970
Then do the recursive calls from Post order on the left and right child.

81

00:05:28,200  -->  00:05:31,730
And then we get that root value for.

82

00:05:31,920  -->  00:05:37,830
In order traversal we visit the left subtree then followed by the root so we're gonna step print value

83

00:05:38,130  -->  00:05:40,180
and then finally the right subtree.

84

00:05:40,290  -->  00:05:44,430
So notice then all through the traversal functions we're simply changing the position of that print

85

00:05:44,430  -->  00:05:45,920
statement.

86

00:05:46,320  -->  00:05:53,660
And here I am actually using pi from 3 printing so the print function just gets a little clear.

87

00:05:54,180  -->  00:05:56,860
So you notice here we have in order recursive calls.

88

00:05:56,910  -->  00:06:02,160
After you check that the tree exists but for n in order that print function we actually getting that

89

00:06:02,430  -->  00:06:07,250
value is in between the left and right calls.

90

00:06:07,490  -->  00:06:14,160
OK so now finally for your homework assignment you're going to implement each of these algorithms as

91

00:06:14,160  -->  00:06:16,100
a function room or not a method of function.

92

00:06:16,140  -->  00:06:18,150
Outside of that binary tree class.

93

00:06:18,360  -->  00:06:22,170
So you can go ahead and use the binary tree class we made in the last lecture.

94

00:06:22,170  -->  00:06:24,350
The code is in the slice for reference.

95

00:06:24,480  -->  00:06:29,910
So if you go throughout this presentation that we just went through you'll see the code for each of

96

00:06:29,910  -->  00:06:30,900
these functions.

97

00:06:31,080  -->  00:06:36,840
Go ahead and implement them and then play with them and see how it changes the ordering of the print

98

00:06:36,840  -->  00:06:37,790
statements.

99

00:06:37,790  -->  00:06:43,230
Notice here I'm using Python 3 style printing which you can import from the future module.

100

00:06:43,350  -->  00:06:46,760
Or if you're just using Python 3 that's what you've been doing all along.

101

00:06:46,770  -->  00:06:48,390
All right so that's it.

102

00:06:48,390  -->  00:06:52,560
Go ahead and download this PowerPoint presentation if you need the code for reference or just look at

103

00:06:52,560  -->  00:06:58,230
the video as you're coding along with your homework is to implement each of these three functions should

104

00:06:58,230  -->  00:07:02,490
be pretty simple once you've done one you're basically just changing where you're getting that value

105

00:07:02,670  -->  00:07:03,960
or that root node.

106

00:07:04,400  -->  00:07:07,200
OK thanks everyone and I'll see you at the next lecture
