WEBVTT
1

00:00:01.410  -->  00:00:05.940
Hello everyone and welcome to the sequential search lecture.

2

00:00:05.940  -->  00:00:11.520
So for sequential search we're going discuss the theory of sequential search later on we'll see an implementation

3

00:00:11.520  -->  00:00:17.550
of sequential search and we'll also do an analysis for Big O on both unordered lists and the ordered

4

00:00:17.550  -->  00:00:19.390
lists.

5

00:00:19.440  -->  00:00:20.090
OK.

6

00:00:20.580  -->  00:00:25.290
So sequential search is just the basic searching technique you sequentially go through the data structure

7

00:00:25.650  -->  00:00:28.260
comparing elements as you go along.

8

00:00:28.260  -->  00:00:30.890
So for example here at the bottom we have an unordered list.

9

00:00:30.900  -->  00:00:33.030
Now we're searching for the element 50.

10

00:00:33.030  -->  00:00:38.820
So we just keep going along the list until we either go throughout the whole list or we find the elements

11

00:00:40.070  -->  00:00:46.350
in this case 50 was not present but we still have to check every element in the array.

12

00:00:46.350  -->  00:00:50.520
Here's a good question though what if the array was ordered.

13

00:00:50.520  -->  00:00:57.660
That means if the array was actually in a sorted order so that the list is ordered we know we only have

14

00:00:57.660  -->  00:01:02.220
to search until we reach an element which is a match or you reach an element which is greater than our

15

00:01:02.220  -->  00:01:03.720
search target.

16

00:01:03.720  -->  00:01:09.250
So for example searching for 50 we can stop here since we know it's a sorted list.

17

00:01:09.420  -->  00:01:13.830
Once you reach 50 for an element which is greater than our search target.

18

00:01:14.850  -->  00:01:18.970
So let's do a quick analysis for an ordered list.

19

00:01:19.080  -->  00:01:25.110
In the case where the item is present our best case for Big O is one that means we hit it on the very

20

00:01:25.110  -->  00:01:26.310
first try.

21

00:01:26.310  -->  00:01:29.880
Worst case is that it's the very last element of the list.

22

00:01:29.950  -->  00:01:31.860
And so we have to go through.

23

00:01:31.920  -->  00:01:34.150
And elements of that list to find it.

24

00:01:34.500  -->  00:01:38.870
So that means the average case is just going to be an over 2.

25

00:01:38.940  -->  00:01:41.130
What about if the item is not present.

26

00:01:41.130  -->  00:01:46.050
That means in both the best case and the worst case you'd have to search through every single item in

27

00:01:46.050  -->  00:01:48.360
the array or that list.

28

00:01:48.360  -->  00:01:50.940
So that means your average case is going to be end.

29

00:01:51.750  -->  00:01:58.380
However on an ordered list if the item is present or not present then you're going to have one an end

30

00:01:59.790  -->  00:02:01.550
as your best case and worst case.

31

00:02:01.560  -->  00:02:05.830
So just to pass over those colonies best case worst case average case.

32

00:02:06.120  -->  00:02:12.030
So your best case if the item is present and not present on an ordered list is one your worst case is

33

00:02:12.030  -->  00:02:13.200
just going to be end.

34

00:02:13.560  -->  00:02:16.090
And then your average case is over 2.

35

00:02:16.770  -->  00:02:21.420
So we're going to do some basic implementations of a sequential search and we'll do both ordered and

36

00:02:21.480  -->  00:02:23.390
unordered implementations.

37

00:02:23.400  -->  00:02:29.670
So we have an implementation for accepting an ordered array and an implementation for accepting an order

38

00:02:29.670  -->  00:02:32.270
to raise and we'll see how those differ.

39

00:02:32.640  -->  00:02:33.320
OK.

40

00:02:33.540  -->  00:02:38.700
So hopefully that was a pretty basic concept just a sequential search you go through the array keep

41

00:02:38.700  -->  00:02:41.410
going through that list looking for the elements.

42

00:02:41.430  -->  00:02:46.080
And then if you find it you find it if you don't find it however you have to go through every single

43

00:02:46.110  -->  00:02:47.410
element in that array.

44

00:02:47.910  -->  00:02:53.160
If you know it's an ordered list though only have to keep going until you find either the element itself

45

00:02:53.220  -->  00:02:58.250
that you're searching for or an element that's bigger than the element you're searching for.

46

00:02:58.260  -->  00:03:03.240
OK so let's go ahead and implement this in the next lecture.

47

00:03:03.240  -->  00:03:04.480
Thanks and I'll see you there
