1

00:00:01,230  -->  00:00:06,330
Hello everyone and welcome to the lecture will be going over the recursion homework example problems

2

00:00:06,360  -->  00:00:07,970
and the solutions.

3

00:00:08,010  -->  00:00:12,740
Here is at the Jupiter notebooks and if you go to the recursion folder you'll notice a Jupiter notebook

4

00:00:12,750  -->  00:00:17,130
called recursion homework example problems Dasch solutions.

5

00:00:17,280  -->  00:00:18,960
You can go ahead and click this notebook.

6

00:00:19,230  -->  00:00:23,550
They'll take you here to the solutions notebook and you can go ahead and read through the solutions

7

00:00:23,550  -->  00:00:25,200
here on your own.

8

00:00:25,410  -->  00:00:31,950
If you're interested in following along OK I'll go ahead and life code the solutions and explain the

9

00:00:31,950  -->  00:00:33,990
thinking through them.

10

00:00:33,990  -->  00:00:37,630
So it's go ahead and start off with Problem 1.

11

00:00:38,940  -->  00:00:44,870
So the first problem said problem one writer occurs a recursive function which takes an integer and

12

00:00:44,870  -->  00:00:50,370
computes the cumulative sum of zero to the integer for example of any calls for return the result of

13

00:00:50,470  -->  00:00:54,070

14
3:04 plus tuples 1.0 which is 10.

15

00:00:54,090  -->  00:00:56,140
So how do we do this.

16

00:00:56,280  -->  00:00:59,170
First thing you want to consider is the base case.

17

00:00:59,190  -->  00:01:05,940
So in this case if we write this recursively we have an plus and minus one plus and minus two all the

18

00:01:05,940  -->  00:01:07,620
way to plus zero.

19

00:01:08,130  -->  00:01:12,580
So regardless how high the end is we know it's going to go all the way down to zero.

20

00:01:12,870  -->  00:01:17,820
So our base case will be then if n is equal to zero.

21

00:01:18,420  -->  00:01:21,320
I want I'm going to return in this case is 0.

22

00:01:21,540  -->  00:01:26,390
Because once I hit 0 I don't want to add anything else to it.

23

00:01:26,520  -->  00:01:32,940
So this is our base case.

24

00:01:33,180  -->  00:01:39,990
After that we have the recursive case which in this case what we're going to do is just return that

25

00:01:40,050  -->  00:01:43,660
N plus our recursive call in that function

26

00:01:47,600  -->  00:01:48,060
some

27

00:01:50,910  -->  00:02:00,460
on and minus one and we can go ahead and check this out if we want to correct some on four.

28

00:02:00,690  -->  00:02:02,820
And you'll know we get 10.

29

00:02:02,820  -->  00:02:03,430
All right.

30

00:02:03,720  -->  00:02:04,950
So go ahead and read through.

31

00:02:04,950  -->  00:02:07,540
Make sure you really understand the solution here.

32

00:02:07,560  -->  00:02:15,990
The big factor here was the base case recognizing it knowing what to return and then being able to transform

33

00:02:16,080  -->  00:02:22,170
this line of thinking and plus and minus one plus and minus two into this line of code return.

34

00:02:22,170  -->  00:02:27,070
And plus the recursive call on the function on end minus 1.

35

00:02:27,090  -->  00:02:31,650
Hopefully this looked familiar to you because it's so similar to that factorial function we created

36

00:02:31,680  -->  00:02:33,530
earlier.

37

00:02:33,540  -->  00:02:38,780
All right moving along we have problem too.

38

00:02:38,870  -->  00:02:44,640
Let's go ahead and make some more space in this cell given an integer create a function which returns

39

00:02:44,640  -->  00:02:47,590
the sum of all the individual digits in the integer.

40

00:02:47,880  -->  00:02:53,790
For example of unequals 4000 turned 21 return four plus three plus two plus one.

41

00:02:54,300  -->  00:02:58,290
OK this one was a little trickier and I gave you a couple of hints.

42

00:02:58,290  -->  00:03:02,980
So let's think of what the base case is here.

43

00:03:03,000  -->  00:03:11,370
The base case will happen as we go along and use maade and division to take and strip these numbers

44

00:03:11,370  -->  00:03:18,240
each individually will be when the remaining length of that N is just one.

45

00:03:18,240  -->  00:03:28,410
So what I mean by that is if length of that digit is an error of this which I'll fix in a second is

46

00:03:28,410  -->  00:03:29,570
equal to 1.

47

00:03:29,610  -->  00:03:34,800
I just want to return that and we will have to strip off any more digits from it.

48

00:03:34,800  -->  00:03:42,060
And what we're going to be doing in the recursive case else is doing something here to basically strip

49

00:03:43,110  -->  00:03:45,210
another digit off of that.

50

00:03:45,270  -->  00:03:50,430
So the error that's going to happen here if I don't fix it is that since it's an integer it actually

51

00:03:50,430  -->  00:03:52,070
doesn't have a length.

52

00:03:52,110  -->  00:03:59,460
So kind of a quick way and thinks to Python I could just cast it to a string and then take the length

53

00:03:59,550  -->  00:04:01,060
and make sure it's equal to 1.

54

00:04:01,320  -->  00:04:06,900
There's other ways to do this but in this case it's a pretty straightforward solution.

55

00:04:07,020  -->  00:04:11,730
So how can I strip another digit If I'm not at the base case let's go ahead and just comment that as

56

00:04:11,730  -->  00:04:14,670
the base case it's clear.

57

00:04:16,230  -->  00:04:25,110
So I wrote about this in the hints and what I can do is return n mod 10 that will be the number I want

58

00:04:25,110  -->  00:04:34,560
to add to the recursive call which in this case will be some underscore func and divided by 10.

59

00:04:34,560  -->  00:04:42,450
Note that I'm dividing by an integer here and since this is Python 2 this will work correctly you'll

60

00:04:42,450  -->  00:04:47,890
have to use the differences between classic division and true division.

61

00:04:47,910  -->  00:04:51,660
So this is going to perform classic division since I'm using Python 2 right now.

62

00:04:51,790  -->  00:04:57,780
If you're using Python 3 you'll have to make sure it is performing class division not actual true division

63

00:04:57,780  -->  00:04:57,810
.

64

00:04:57,810  -->  00:05:01,140
In order for this to work correctly and for you to strip these functions out.

65

00:05:01,490  -->  00:05:02,210
OK.

66

00:05:02,520  -->  00:05:05,670
There's a note about that in the solution book.

67

00:05:05,670  -->  00:05:10,160
So moving along we have the last problem.

68

00:05:10,200  -->  00:05:16,440
Now as I mentioned it's a more advanced problem than the previous two has a lot of variation on possibilities

69

00:05:16,440  -->  00:05:16,490
.

70

00:05:16,530  -->  00:05:19,870
And we're going to go ahead and solve it a particular way.

71

00:05:20,370  -->  00:05:23,460
So let's go ahead and break it down.

72

00:05:24,840  -->  00:05:29,920
So we have this function word underscores split.

73

00:05:29,940  -->  00:05:38,280
So what I'm going to do is have in this case three arguments and no the solution I'm going implement

74

00:05:38,280  -->  00:05:42,570
here makes a lot of use of the Python language.

75

00:05:42,630  -->  00:05:56,720
Now the first thing you do is check if output is none unless the output equal to an empty list.

76

00:05:56,730  -->  00:06:02,460
So the reason I just can't put in output as an empty list into the function here is because I'm going

77

00:06:02,460  -->  00:06:09,780
to call it recursively and if I were to set it at the beginning as a default parameter it would overwrite

78

00:06:09,780  -->  00:06:13,270
the output list that I want to put out every single time.

79

00:06:13,290  -->  00:06:21,000
So basically all this does here if output is none up equals empty list is it just takes care of creating

80

00:06:21,000  -->  00:06:25,020
an empty list on the first instance of that recursion.

81

00:06:25,590  -->  00:06:28,650
So let's go ahead and think of what I want to do here.

82

00:06:28,770  -->  00:06:32,790
I want to say for word in list of words.

83

00:06:32,790  -->  00:06:41,060
So for every word in that list for word in list of words I mean just doing tab complete there.

84

00:06:41,510  -->  00:06:47,010
I don't want to think if the current phrase begins with the word we have a split point.

85

00:06:47,010  -->  00:06:48,750
So remember what we're trying to do here.

86

00:06:48,810  -->  00:06:53,670
Want to create a function that takes in the string phrase in a set list of words and then the function

87

00:06:53,670  -->  00:06:58,020
is going to then determine if it's possible to split the string in a way in which words can be made

88

00:06:58,020  -->  00:06:59,390
from the list of words.

89

00:06:59,730  -->  00:07:06,360
So what I'm doing here is I'm saying for every word in that list of words if the current phrase begins

90

00:07:06,360  -->  00:07:09,390
with the word we have a split point.

91

00:07:10,160  -->  00:07:11,720
There's lots of ways to do this.

92

00:07:11,730  -->  00:07:19,560
You can just use simple indexing but I'm going to use a little Python trick here called starts with

93

00:07:21,840  -->  00:07:27,720
which actually just checks if a string starts with another string.

94

00:07:27,720  -->  00:07:32,820
In other way to do this would just be by indexing so you would check the length of this word if it's

95

00:07:32,820  -->  00:07:37,050
equal to the first index so that phrase given that length.

96

00:07:37,260  -->  00:07:40,500
But this is a little more concise way to do this.

97

00:07:40,500  -->  00:07:45,180
And then when I'm going to do if that phrase starts with that word also but what's nice about using

98

00:07:45,180  -->  00:07:48,810
starts with is it's super legible here you can really read it.

99

00:07:48,810  -->  00:07:50,470
It's almost like pseudo code.

100

00:07:50,910  -->  00:07:59,370
And then I'm going to append that to that output with word and then what I'm going to do now is recursively

101

00:07:59,370  -->  00:08:04,320
call the split function on the remaining portion of the phrase.

102

00:08:04,320  -->  00:08:07,040
So going to return ends right recursive.

103

00:08:07,040  -->  00:08:15,660
Case comes into playing a word underscore splits an input the remaining portion of that phrase which

104

00:08:15,660  -->  00:08:21,200
is phrase index from the length of that word.

105

00:08:21,410  -->  00:08:30,960
Everything else I'm going to passen the list of words since that's not changing it's the same constraint

106

00:08:30,960  -->  00:08:31,820
there.

107

00:08:32,190  -->  00:08:35,400
And then I'm going to input the output.

108

00:08:35,400  -->  00:08:40,780
That sounds a little weird but basically passed the output list that has been appended to.

109

00:08:41,730  -->  00:08:48,390
And then finally I can return the output.

110

00:08:48,390  -->  00:08:52,720
So this will happen if no phrase starts with that word.

111

00:08:53,370  -->  00:08:54,320
OK.

112

00:08:54,720  -->  00:08:56,210
Perfect.

113

00:08:56,250  -->  00:08:57,630
So that's it.

114

00:08:57,660  -->  00:09:02,800
You can go ahead and run the solutions that are in the solutions notebook here.

115

00:09:02,850  -->  00:09:06,020
There's a little more explanation with the comments here.

116

00:09:06,150  -->  00:09:10,680
So you can really get an understanding since is a bit of a confusing problem and there's lots of ways

117

00:09:10,680  -->  00:09:11,590
to do it.

118

00:09:11,790  -->  00:09:14,760
And also as I mentioned it's kind of a pythoness solution.

119

00:09:14,760  -->  00:09:15,770
What I did here.

120

00:09:15,930  -->  00:09:18,950
But it's nice and legible.

121

00:09:19,500  -->  00:09:24,580
I encourage you to try to basically switch out this phrase using indexing.

122

00:09:24,630  -->  00:09:31,920
So it's a little more agnostic as to what language is being used as far as programming languages but

123

00:09:31,920  -->  00:09:33,450
that's it for the examples.

124

00:09:33,540  -->  00:09:38,970
Hopefully they were a little challenging but not too impossible for you to solve.

125

00:09:38,970  -->  00:09:41,810
Again go over them make sure you fully understand them.

126

00:09:42,210  -->  00:09:45,470
And that's it for the recursion homework example problems.

127

00:09:45,510  -->  00:09:51,330
After this you'll be faced if your first real interview questions involving recursion.

128

00:09:51,330  -->  00:09:55,020
All right great job and I will see you at the next lecture.

129

00:09:55,020  -->  00:09:58,230
Thanks everyone.
