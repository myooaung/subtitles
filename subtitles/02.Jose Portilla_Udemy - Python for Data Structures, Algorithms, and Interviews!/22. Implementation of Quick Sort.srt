1

00:00:01,230  -->  00:00:06,530
Hello everyone and welcome to the implementation of quicksort lecture.

2

00:00:06,600  -->  00:00:13,980
So as a reminder the quicksort algorithm first selects a value which is called the pivot value although

3

00:00:13,980  -->  00:00:16,240
there are many different ways to choose the pivot value.

4

00:00:16,260  -->  00:00:22,020
What we do simply is the first item in the list the role of the pivot value is to assist with the splitting

5

00:00:22,020  -->  00:00:23,210
of that list.

6

00:00:23,370  -->  00:00:29,520
The actual position or the value belongs in the final sorted list commonly called that split point is

7

00:00:29,520  -->  00:00:33,870
then use the Vitalist for subsequent calls of the quicksort.

8

00:00:33,870  -->  00:00:39,300
So again you have resources for review and you can check out the previous lecture if you want more coverage

9

00:00:39,360  -->  00:00:45,690
on the theory of quicksort where we're going to go ahead and implement our own quick sort algorithm

10

00:00:45,700  -->  00:00:45,840
.

11

00:00:45,990  -->  00:00:50,720
So this probably would be one of the most involved out of the all the coding of the algorithms so just

12

00:00:50,730  -->  00:00:51,650
keep that in mind.

13

00:00:51,720  -->  00:00:55,270
We're going to have three separate functions in order to make this happen.

14

00:00:55,480  -->  00:01:01,380
So let's go ahead and just dive right into the code before we break it down line by line and explain

15

00:01:01,560  -->  00:01:03,760
what's actually going on.

16

00:01:03,780  -->  00:01:04,240
All right.

17

00:01:04,530  -->  00:01:08,530
So first thing we're going to do is just go ahead and start functions.

18

00:01:08,540  -->  00:01:19,540
We're going to say DCF and say quick underscore sort's And let's go ahead and pass an energy.

19

00:01:19,870  -->  00:01:25,440
You know what I want to say right now is just pass and I want to make this skeleton of all the functions

20

00:01:25,440  -->  00:01:29,790
we're gonna use next and we're going to use is called Quick sorts helper.

21

00:01:29,790  -->  00:01:35,730
So this original quicksort function is going to do in it's going to invoke a recursive function called

22

00:01:35,730  -->  00:01:39,700
quicksort helper which Let's go ahead and do it.

23

00:01:39,720  -->  00:01:48,750
We'll just take a quick underscore sort's help and that will take in an array and then a first and last

24

00:01:49,380  -->  00:01:52,170
marker and we'll say pass right now.

25

00:01:52,170  -->  00:01:55,370
And then finally the last one we're going to say is partition.

26

00:01:55,980  -->  00:02:06,190
This also take the array first and last books and little say pass.

27

00:02:06,260  -->  00:02:06,830
All right.

28

00:02:07,230  -->  00:02:11,500
So we have the quicksort function and then it's going to invoke a recursive function.

29

00:02:11,780  -->  00:02:16,130
Quicksort help which begins at the same base case as that merge sort.

30

00:02:16,140  -->  00:02:20,180
So if the length of the list is less than or equal to one that's already sorted.

31

00:02:20,670  -->  00:02:25,160
If it's greater then we can be partitioning and recursively sorting that array.

32

00:02:25,410  -->  00:02:28,030
So that's what the partition function is going to do.

33

00:02:28,260  -->  00:02:32,020
And it's going to implement that process described in the previous lecture.

34

00:02:32,460  -->  00:02:35,180
So let's go ahead and get started.

35

00:02:35,850  -->  00:02:45,210
So we have quicksort and all it's going to do is like I mention just going to call quick sorts hell

36

00:02:46,980  -->  00:02:53,470
and it's going to take in that array will start off at 0 and then go to lengths of the array minus one

37

00:02:53,480  -->  00:02:56,620
.

38

00:02:56,730  -->  00:03:02,290
And the reason for that being is the way we set up our end of values when we do partition.

39

00:03:02,490  -->  00:03:12,030
So quicksort help we're just going to say if first is lost than last we're going to split up set up

40

00:03:12,030  -->  00:03:13,440
a variable called split point

41

00:03:16,320  -->  00:03:23,100
and then that's going to be returned from the partition call and again partition is just going to take

42

00:03:23,100  -->  00:03:31,940
in the array first and last and then similar to the merge sort.

43

00:03:31,940  -->  00:03:41,010
Here we're going to call a quick help twice on the array first and then all the way to the split points

44

00:03:42,210  -->  00:03:47,660
minus one and then we're going to call it again quick underscore sort.

45

00:03:47,670  -->  00:03:57,320
Underscore help on the array and then from the split points plus 1 all the way to the last element.

46

00:03:57,330  -->  00:04:02,970
So this should look really familiar from the merge sort's implementation where we had that recursive

47

00:04:02,970  -->  00:04:08,010
call one on that first left half than the other one and that right half.

48

00:04:08,020  -->  00:04:13,740
So now let's take advantage of this and use filter partition function to really start doing the merging

49

00:04:13,740  -->  00:04:16,460
in that quick sorting.

50

00:04:16,470  -->  00:04:24,740
So let's go ahead and create a pivot value will say pivot value as a variable and just have it be that

51

00:04:24,750  -->  00:04:25,860
first element.

52

00:04:25,860  -->  00:04:30,170
As I mentioned there's different ways of choosing the pivot value for the simpler implementation we're

53

00:04:30,180  -->  00:04:32,560
just going to use that first element.

54

00:04:32,670  -->  00:04:38,430
So then let's go ahead and make those marks so hopefully remember from those figures we had that left

55

00:04:38,430  -->  00:04:40,780
Mark and that right Mark.

56

00:04:40,980  -->  00:04:46,470
And just like we did in the last lecture theoretically at least I'll say it last Mark equal to that

57

00:04:46,470  -->  00:04:52,400
first plus 1 and then right Mark just equal to last.

58

00:04:53,040  -->  00:04:57,570
And then what I'm going to do is set up a while loop and in order to make this a little more readable

59

00:04:58,200  -->  00:05:03,090
I'll set a variable called done and have it be equal to false.

60

00:05:03,090  -->  00:05:05,820
That way all my while loop can read something like this.

61

00:05:05,820  -->  00:05:15,990
While not done so that allows us to have a really nice readable while loop and then I'll say while that

62

00:05:15,990  -->  00:05:26,790
left Mark is less than or equal to the right mark and the array value at the left Mark is less than

63

00:05:26,790  -->  00:05:29,900
or equal to the pivot value.

64

00:05:30,360  -->  00:05:32,430
Then I'll just say left Mark

65

00:05:35,220  -->  00:05:38,070
is equal to left Mark plus one which I can just write like this

66

00:05:41,340  -->  00:05:44,120
and then I'll say another while loop.

67

00:05:45,180  -->  00:05:53,910
While the value at the right mark in our original array is greater than or equal to the pivot value

68

00:05:54,660  -->  00:06:05,640
and the right mark is greater than or equal to the left Mark and the right mark is going to be subtracted

69

00:06:05,900  -->  00:06:07,570
of one subtract from the right mark.

70

00:06:07,800  -->  00:06:12,660
So remember from that last lecture how we move them closer to each other so left Mark starts moving

71

00:06:12,660  -->  00:06:15,510
to the right and then that right Mark starts moving to the left.

72

00:06:15,510  -->  00:06:21,300
As long as it's two conditions end up being true.

73

00:06:21,300  -->  00:06:26,970
And then finally if we say if right Mark is less than the left marks or remember that was that crossing

74

00:06:26,970  -->  00:06:27,880
point.

75

00:06:28,230  -->  00:06:29,220
And then they're done.

76

00:06:29,230  -->  00:06:37,230
So I will say Dunn equals true otherwise you're not done yet so I'll say else.

77

00:06:37,860  -->  00:06:39,540
And this is where we basically do that.

78

00:06:39,540  -->  00:06:42,180
That switching will say create a temporary variable

79

00:06:44,790  -->  00:06:55,650
of the left Mark value and then set left to mark equal to the right mark and then set the right mark

80

00:06:56,580  -->  00:06:57,330
equal to the temp.

81

00:06:57,330  -->  00:07:02,420
So that's basically just the way we're switching those values once they cross over.

82

00:07:03,270  -->  00:07:03,780
All right.

83

00:07:03,930  -->  00:07:13,590
And then all we're gonna do is outside of these wild loops are essentially outside of this wild done

84

00:07:13,600  -->  00:07:14,220
.

85

00:07:14,460  -->  00:07:24,720
We have to do one last switch here I'll say 10 Zucco to the value at first and then that value at first

86

00:07:24,800  -->  00:07:34,110
is then going to be equal to the right mark or the value at the right mark and then the right mark value

87

00:07:34,170  -->  00:07:39,990
is just equal to scuse me simp here.

88

00:07:40,230  -->  00:07:48,330
And then we can just return the right mark since we're be calling partition here which basically just

89

00:07:48,330  -->  00:07:49,810
returning in a split point.

90

00:07:50,010  -->  00:07:55,520
So partition is just going to be returning that split point after doing these operations.

91

00:07:55,520  -->  00:07:55,720
All right.

92

00:07:55,740  -->  00:07:56,880
I know that was a lot of code.

93

00:07:56,880  -->  00:07:57,990
So let's go ahead and check it out.

94

00:07:57,990  -->  00:08:01,670
Make sure it all worked and then we'll break it down further.

95

00:08:01,980  -->  00:08:04,140
So going to say an array.

96

00:08:04,740  -->  00:08:10,090
Let's go ahead and just copy and paste this from that Jupiter notebook we already have.

97

00:08:10,200  -->  00:08:12,360
Make sure this all worked out OK.

98

00:08:12,360  -->  00:08:14,540
It looks like it's sorted and looks like we're good to go.

99

00:08:14,580  -->  00:08:22,490
So let's go ahead and break down what's going on here in our implementation of quicksort server.

100

00:08:22,530  -->  00:08:28,020
The first thing we had to do in quicksort was select the value which is called that pivot value which

101

00:08:28,020  -->  00:08:29,660
is what we have here.

102

00:08:29,790  -->  00:08:33,750
While we're making the partition we're selecting that pivot value and in this case we're selecting the

103

00:08:33,750  -->  00:08:40,590
first item in this list and the role of the pivot value is to assist with splitting the list.

104

00:08:40,590  -->  00:08:45,450
So the actual position where that pivot value belongs in the sorted list commonly call that split point

105

00:08:45,990  -->  00:08:50,970
which is what you end up returning from a partition function.

106

00:08:50,970  -->  00:08:55,380
That's going to be used to divide the list for subsequent calls of quicksort which is what we're doing

107

00:08:55,380  -->  00:08:56,690
here.

108

00:08:57,600  -->  00:08:58,480
OK.

109

00:08:58,920  -->  00:09:05,580
So we have our first pivot value which is going to be that first elements.

110

00:09:05,580  -->  00:09:08,640
So then this partition process is what's going to happen next.

111

00:09:08,640  -->  00:09:13,400
We have left markers in our right markers and with this partition process is going to do.

112

00:09:13,560  -->  00:09:19,440
It's going to find that split point and at the same time move other items to be on the appropriate side

113

00:09:19,440  -->  00:09:24,780
of the list either less than or greater than that pivot value which is what we're doing with these checks

114

00:09:24,990  -->  00:09:27,450
here and here.

115

00:09:27,450  -->  00:09:32,520
So as I mentioned that partitioning begins by locating those two position markers that left Mark and

116

00:09:32,520  -->  00:09:36,470
the right mark at the beginning and end of the remaining items in the list.

117

00:09:36,630  -->  00:09:41,820
And the goal of this partition process is to move items that are on the wrong side with respect that

118

00:09:41,820  -->  00:09:48,360
pivot value are also converging to that split point which is why we slowly start to move the left Mark

119

00:09:48,600  -->  00:09:52,350
to the right and that right Mark to the left.

120

00:09:53,850  -->  00:09:58,660
And then when specifically we begin this process by just incrementing left Mark here.

121

00:09:58,710  -->  00:10:04,260
Incrementation until we locate a value that is greater than the pivot value which is what we're doing

122

00:10:05,010  -->  00:10:07,090
here.

123

00:10:07,200  -->  00:10:07,890
OK.

124

00:10:08,040  -->  00:10:14,250
So then we decrease the right mark until we find the value that is less than the value which is what

125

00:10:14,250  -->  00:10:15,450
we're doing here.

126

00:10:15,450  -->  00:10:17,240
So basically once it breaks.

127

00:10:17,380  -->  00:10:18,750
So isn't that what we're doing here.

128

00:10:18,750  -->  00:10:21,450
Once it breaks and is greater than the value.

129

00:10:21,660  -->  00:10:28,140
So at this point then we've discovered two items that are out of place of respect to that eventual split

130

00:10:28,140  -->  00:10:34,830
point and then we just exchange those two items which is what we're doing here and repeat the process

131

00:10:34,830  -->  00:10:35,740
again.

132

00:10:36,240  -->  00:10:41,340
So at the point where the right mark becomes less than the left Mark that's when we stop which is our

133

00:10:41,340  -->  00:10:47,050
Done statement here and then we know that the position of the right mark is not split point and that

134

00:10:47,060  -->  00:10:51,900
pivot value can be exchanged with the contents of that split point and the pivot value is now in place

135

00:10:51,900  -->  00:10:52,560
.

136

00:10:52,560  -->  00:10:57,790
And in addition to all this all the items to the left of the split point are now less than the value

137

00:10:57,820  -->  00:10:57,990
.

138

00:10:58,350  -->  00:11:02,100
And the only items to the right of the split point are greater than the pivot value.

139

00:11:02,310  -->  00:11:07,230
So the list can now be divided up to split point and the quicksort can be invoked recursively on the

140

00:11:07,230  -->  00:11:08,150
two halves.

141

00:11:08,220  -->  00:11:14,130
In this case we used Quick's or help on those two halfs here.

142

00:11:14,160  -->  00:11:15,070
OK.

143

00:11:15,540  -->  00:11:22,050
So that's the basics of matching up what we theoretically talked about in the previous lecture to an

144

00:11:22,050  -->  00:11:24,390
actual implementation of the algorithm.

145

00:11:24,600  -->  00:11:31,620
I would really suggest that you use print statements wherever you feel uncomfortable or confused about

146

00:11:31,620  -->  00:11:33,080
our implementation here.

147

00:11:33,150  -->  00:11:36,530
To print out what's actually going on and when you're doing that.

148

00:11:36,570  -->  00:11:41,620
Go ahead and switch this array to the same numbers that we used in the previous lecture.

149

00:11:41,760  -->  00:11:47,820
So you can actually see your Oraibi printed out in the same way that we have the figure in the previous

150

00:11:47,820  -->  00:11:49,620
lecture on those slides.

151

00:11:49,770  -->  00:11:54,060
And that's going to be a really useful way for you to build out your understanding of the algorithm

152

00:11:54,350  -->  00:11:55,130
printout.

153

00:11:55,200  -->  00:12:00,960
Follow along and really understand how the partition and quicksort process is actually working.

154

00:12:01,110  -->  00:12:05,730
And if you still need more help again if you go to the Jupiter notebook there's resources for reviews

155

00:12:05,730  -->  00:12:09,740
such as the Wikipedia page visual algorithm etc..

156

00:12:09,810  -->  00:12:10,270
All right.

157

00:12:10,530  -->  00:12:13,030
So that's the implementation of quicksort.

158

00:12:13,470  -->  00:12:15,750
Thank you everyone and I will see you at the next lecture
