WEBVTT
1

00:00:02.880  -->  00:00:07.240
Hello everyone and welcome to the lecture on introduction to trees.

2

00:00:07.260  -->  00:00:13.680
So this lecture will be going over what the section is about and then we'll get a brief introduction

3

00:00:13.740  -->  00:00:17.580
to the data structure that is called the tree.

4

00:00:17.580  -->  00:00:21.240
So in this section the trees section we learn about tree data structures.

5

00:00:21.360  -->  00:00:25.800
We're going to implement trees of Felis And we're also going to implement trees using object oriented

6

00:00:25.800  -->  00:00:31.980
programming so classes and then we're also going to implement a priority queue data structure and then

7

00:00:31.980  -->  00:00:33.980
we're going to have some interview problems.

8

00:00:34.080  -->  00:00:38.910
There's going to be a lot going on in this section but what I want you to know is the section only covers

9

00:00:38.910  -->  00:00:43.910
basics of trees and what's known as an abstract data type or ADT.

10

00:00:44.560  -->  00:00:49.110
This topic in general is pretty vast and it could easily warrant its own course.

11

00:00:49.140  -->  00:00:50.510
So just keep this in mind.

12

00:00:50.790  -->  00:00:55.560
But throughout the lectures you'll get additional resources to check out in case you want to dive deeper

13

00:00:55.560  -->  00:00:57.920
into trees.

14

00:00:57.990  -->  00:00:59.910
So let's just talk about trees in general.

15

00:01:00.120  -->  00:01:04.050
The tree data structure has a root branches and leaves.

16

00:01:04.260  -->  00:01:08.670
So just like a tree in nature you have a similar structure.

17

00:01:08.670  -->  00:01:12.930
The difference between a tree in nature and a tree computer science though is that a tree data structure

18

00:01:12.930  -->  00:01:18.720
has its root at the top and its leaves at the bottom so it branches downwards.

19

00:01:18.720  -->  00:01:22.270
So you've maybe I've already seen these kind of tree data structures.

20

00:01:22.380  -->  00:01:28.380
So let's just look at a few common examples here we can see a tree as a classification tree from biology

21

00:01:28.380  -->  00:01:28.980
.

22

00:01:28.980  -->  00:01:34.200
So we have biological classification of some animals so a pretty simple example where we can learn about

23

00:01:34.200  -->  00:01:40.820
the properties of trees so this example demonstrates that trees have a hierarchy and their structure

24

00:01:40.820  -->  00:01:47.370
and layers where more general things are near the top and more specific things are near the bottom.

25

00:01:47.400  -->  00:01:52.690
So here we have a hierarchy that's the kingdom the phylum the class etc..

26

00:01:52.830  -->  00:01:59.580
So no matter how deep we go into the classification tree we get all the organisms are still animals

27

00:01:59.580  -->  00:01:59.820
.

28

00:01:59.820  -->  00:02:03.100
So that's important to note here.

29

00:02:03.270  -->  00:02:08.190
Another second property of trees is that all the children of one node are in the pen of the children

30

00:02:08.220  -->  00:02:13.500
of another node and a third property is that each Leafnode is unique.

31

00:02:13.500  -->  00:02:19.860
And we'll go more into what nodes are and what Leif's are what children are in the vocabulary section

32

00:02:19.890  -->  00:02:22.400
of this lecture.

33

00:02:22.440  -->  00:02:27.340
So another example of a tree structure that you probably use every day is a file system.

34

00:02:27.340  -->  00:02:32.190
So in a file system directories or folders or structures tree.

35

00:02:32.190  -->  00:02:38.850
So here we can see an example of this where you basically have just a small part of the UNIX file system

36

00:02:39.150  -->  00:02:45.780
as a hierarchy and just like that biological classification tree you can follow a path from the root

37

00:02:45.780  -->  00:02:50.260
to any directory and that path will uniquely identify that subdirectory.

38

00:02:50.280  -->  00:02:57.150
So all the files in it and another important property of trees also derived from that hierarchy is that

39

00:02:57.150  -->  00:03:04.200
you can move entire sections of a tree called subtrees So there's a tree here to a different position

40

00:03:04.200  -->  00:03:07.530
in the tree without affecting the lower levels of the hierarchy.

41

00:03:07.530  -->  00:03:14.430
So for example in this particular picture you could take the entire SO tree starting with etc..

42

00:03:14.610  -->  00:03:21.430
This ATC slash and you could reattach it to under user here.

43

00:03:21.430  -->  00:03:27.270
Usar in importance to know that it's not going to affect any of the children that are at the same level

44

00:03:27.270  -->  00:03:30.090
of this tree.

45

00:03:30.150  -->  00:03:37.020
OK so one final example is a web page so if you're familiar with HVM l it also has a similar structure

46

00:03:37.770  -->  00:03:44.700
where the tree that corresponds to the email tags you can use that to create it page.

47

00:03:44.800  -->  00:03:45.240
OK.

48

00:03:45.360  -->  00:03:50.490
So I've mentioned some terms such as nodes children parents Well we're going to do now is go over some

49

00:03:50.490  -->  00:03:55.950
common vocabulary terms they should know when discussing trees.

50

00:03:56.280  -->  00:03:58.560
So a note is a fundamental part of a tree.

51

00:03:58.590  -->  00:04:02.490
It can have a name and you can also call that the key.

52

00:04:02.490  -->  00:04:07.440
So a node may also have additional information and you can call that additional information the payload

53

00:04:07.440  -->  00:04:08.160
.

54

00:04:08.160  -->  00:04:12.300
So while the payload information isn't actually central to a lot of the tree algorithms we're going

55

00:04:12.300  -->  00:04:13.420
to be learning about.

56

00:04:13.530  -->  00:04:19.110
It's often critical in applications that make use of trees.

57

00:04:19.110  -->  00:04:22.440
Next term we're going to learn about is edge so an edge.

58

00:04:22.440  -->  00:04:24.610
Again another fundamental part of a tree.

59

00:04:24.730  -->  00:04:30.600
It's an edge connects to nodes that show that there is a relationship between them and then every node

60

00:04:30.660  -->  00:04:36.930
except for that root node is connected by exactly one incoming edge from another node and each node

61

00:04:36.990  -->  00:04:39.270
may have several outgoing edges.

62

00:04:40.240  -->  00:04:44.560
Sort of show you what I mean by this we're going to learn about one more the roots.

63

00:04:44.560  -->  00:04:49.380
So the root of the tree is the only node in the tree that has no in-coming edges.

64

00:04:49.690  -->  00:04:52.170
So here we have kind of an illustration of a tree.

65

00:04:52.420  -->  00:04:54.280
It looks a little different.

66

00:04:54.490  -->  00:04:57.980
The children of the notes are linked and attached to it.

67

00:04:58.000  -->  00:05:00.450
But that's just to show the higher IQ levels.

68

00:05:00.460  -->  00:05:05.000
So here we can see whoops here we can see there is a root node for you.

69

00:05:05.280  -->  00:05:12.880
We have two children and each child has only one edge coming out of it and it goes to the next level

70

00:05:12.880  -->  00:05:18.260
of notes and notice that the root node is the only note here that has no incoming edges.

71

00:05:18.790  -->  00:05:21.800
And then we can see children and then other nodes.

72

00:05:21.880  -->  00:05:26.800
So a path is an ordered list of notes that are connected by edges.

73

00:05:26.800  -->  00:05:34.390
So if you look for example back to the biology tree that we're looking at mammal to carnivores to other

74

00:05:34.390  -->  00:05:35.220
.

75

00:05:35.230  -->  00:05:37.770
PHILLIP DE Felice is a path there.

76

00:05:37.780  -->  00:05:43.810
So as you continue on and have an ordered list of those that are connected by edges you have a path

77

00:05:45.310  -->  00:05:48.150
and then children formally are a set of nodes.

78

00:05:48.160  -->  00:05:54.970
We'll call them see here the have in-coming edges from the same Node 2 and are said to be the children

79

00:05:54.970  -->  00:05:56.590
of that node.

80

00:05:56.590  -->  00:06:05.050
So for example we can see here that the root node has two children and then each of those trials goes

81

00:06:05.050  -->  00:06:06.040
to another node.

82

00:06:06.220  -->  00:06:12.480
No one has three children no two only has one child and then we have parents.

83

00:06:12.580  -->  00:06:17.270
So a node is the parent of all the notes it connects to with outgoing edges.

84

00:06:17.650  -->  00:06:21.430
So here you can see that child one is the parents of node one

85

00:06:24.010  -->  00:06:29.780
sibling nodes in a tree are the children of the same parent are said to be siblings.

86

00:06:29.800  -->  00:06:34.390
So here child one child two and child three are all siblings of note one

87

00:06:37.930  -->  00:06:43.000
and then a tree is a set of nodes and edges comprised of the parent and all the descendants of that

88

00:06:43.000  -->  00:06:43.690
parent.

89

00:06:44.050  -->  00:06:50.470
So you could loop around some subtrees here versus the entire tree.

90

00:06:50.590  -->  00:06:54.100
And then lastly a leaf node is a no that has no children.

91

00:06:54.460  -->  00:06:55.170
So no.

92

00:06:55.170  -->  00:06:58.240
3 4 5 and 6 don't have any children.

93

00:06:58.510  -->  00:07:05.490
So there leaf nodes just like the leaf on a tree that doesn't have a branch extending out of it.

94

00:07:05.530  -->  00:07:08.480
Now we're going to learn about is levels not particular nodes.

95

00:07:08.650  -->  00:07:14.160
So the level of a node n is the number of edges on the path from the root node to end.

96

00:07:14.590  -->  00:07:22.450
So for looking at No 2 here or Node 1 they are both at level 1 since it only takes one path to get back

97

00:07:22.450  -->  00:07:23.170
to the root node

98

00:07:27.670  -->  00:07:32.950
and then the height of a tree is equal to the maximum level of any node tree.

99

00:07:33.010  -->  00:07:34.750
So he described all the parts of a tree.

100

00:07:34.780  -->  00:07:40.330
And now we're going to bring them together to form a full formal definition and something to note here

101

00:07:40.330  -->  00:07:45.940
is the image I've been showing you about a root node if a tree goes along with this particular definition

102

00:07:45.940  -->  00:07:47.120
.

103

00:07:47.260  -->  00:07:53.280
So a tree consists of a set of nodes and a set of edges that connect pairs of nodes.

104

00:07:53.320  -->  00:07:55.420
So a tree has the following properties.

105

00:07:55.810  -->  00:07:58.860
One note of the tree is designated as the root node.

106

00:07:59.080  -->  00:08:04.140
So that was that top note in the picture which if you go to the next slide here it is.

107

00:08:04.420  -->  00:08:11.680
So every note n except the root node is connected by an edge from exactly one other note P where P is

108

00:08:11.680  -->  00:08:19.150
the parent of and a unique path traverses from the root node to each node and if each node in the tree

109

00:08:19.150  -->  00:08:23.510
has a maximum of two children we say that that tree is a binary tree.

110

00:08:23.680  -->  00:08:27.850
And we'll learn a more specifically about binary trees and binary search trees.

111

00:08:27.940  -->  00:08:30.580
Later on this section of the course.

112

00:08:31.240  -->  00:08:34.260
So this figure illustrates that definition of the tree.

113

00:08:34.720  -->  00:08:39.050
The arrow heads on the edges in the direction of the connection.

114

00:08:39.040  -->  00:08:41.510
There's also a recursive definition of a tree.

115

00:08:41.890  -->  00:08:48.580
So you could say a tree is either empty or consists of a root and 0 or more so trees each of which is

116

00:08:48.610  -->  00:08:49.610
also a tree.

117

00:08:49.810  -->  00:08:54.640
So the root of each subtree is connected to the root of the parent tree by an edge.

118

00:08:54.640  -->  00:08:55.970
So you should see what I mean by that.

119

00:08:56.070  -->  00:08:58.120
Here's kind of a simpler figure.

120

00:08:58.120  -->  00:08:59.760
And this is the recursive definition.

121

00:08:59.770  -->  00:09:02.970
So you have roots and then you have subtrees.

122

00:09:03.150  -->  00:09:09.280
And as I mention a trees are empty or consists of a root and zero or more so trees.

123

00:09:09.280  -->  00:09:16.330
So if you remember back to the recursions section of the course I mentioned that recursion can be used

124

00:09:16.330  -->  00:09:21.010
to define trees and the fine tree traversal algorithms.

125

00:09:21.070  -->  00:09:25.520
So it's important to also understand this particular definition.

126

00:09:25.600  -->  00:09:35.690
So here we know that in this figure the tree has at least four nodes since each of these triangles represents

127

00:09:35.700  -->  00:09:38.990
you know subtree must have a root.

128

00:09:39.070  -->  00:09:45.970
So you have the root node and then three so trees and we know each of these three so trees also has

129

00:09:45.970  -->  00:09:48.980
a root since we're dealing with the recursive definition right now.

130

00:09:49.060  -->  00:09:54.490
So we know we have at least four nodes it may have many more notes than that but we don't know until

131

00:09:54.490  -->  00:09:59.340
we look deeper into the tree which basically means making another recursive call.

132

00:10:00.160  -->  00:10:00.600
OK.

133

00:10:00.760  -->  00:10:03.630
So let's just go over a review of everything we learned.

134

00:10:03.640  -->  00:10:07.360
We got a brief overview of what to expect for this section of the course.

135

00:10:07.360  -->  00:10:11.220
We went over some of the basics of trees and real life examples.

136

00:10:11.470  -->  00:10:15.150
We also learned about vocabulary for trees and definitions for trees.

137

00:10:15.430  -->  00:10:22.600
And now we're ready to learn more about trees and learn about them to prepare for interview problems

138

00:10:22.600  -->  00:10:23.380
.

139

00:10:23.380  -->  00:10:26.050
All right thanks everyone and I'll see you at the next lecture
