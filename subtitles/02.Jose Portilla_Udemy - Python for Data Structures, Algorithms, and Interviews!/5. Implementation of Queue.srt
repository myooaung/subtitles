1

00:00:01,350  -->  00:00:07,500
Hello everyone and welcome to the implementation of a cute lecture and this lecture we're going to build

2

00:00:07,500  -->  00:00:11,360
on our previous understanding of Queues by implementing our own class.

3

00:00:11,400  -->  00:00:17,700
Q Before we begin implementing your own Q Go ahead and review the attributes and methods that this q

4

00:00:17,730  -->  00:00:19,380
class will have.

5

00:00:20,190  -->  00:00:23,670
So we're going to have five basic methods and attributes.

6

00:00:23,670  -->  00:00:29,880
The first one which is just the Q class is going to create a new queue that is empty it won't need any

7

00:00:29,880  -->  00:00:37,650
parameters and it's just going to return an empty queue and queue will take in a new item and put it

8

00:00:37,650  -->  00:00:42,630
to the rear of the queue so it's going to need that item parameter but it's not going to return anything

9

00:00:42,740  -->  00:00:45,210
it's just going to affect the queue.

10

00:00:45,480  -->  00:00:48,910
The dequeue item removes the front item from the queue.

11

00:00:49,020  -->  00:00:53,220
It won't need any parameters and it'll just return the item that it does queued.

12

00:00:53,310  -->  00:00:56,850
The queue is then modified is empty.

13

00:00:56,850  -->  00:00:59,940
It's going to test to see whether the queue is empty or not.

14

00:01:00,270  -->  00:01:03,620
That won't need any parameters and will just return a boolean value.

15

00:01:03,630  -->  00:01:07,710
True or false depending on whether the queue is empty or not.

16

00:01:08,070  -->  00:01:11,680
Then the size method will return the number of items in the queue.

17

00:01:11,700  -->  00:01:15,480
It won't need any parameters and it's just going to return an integer.

18

00:01:15,480  -->  00:01:19,280
OK so those are the basic five methods and attributes we're going to do.

19

00:01:19,320  -->  00:01:21,640
So let's go ahead and jump to the code.

20

00:01:22,370  -->  00:01:24,380
Ok so here at the DUPERE no.

21

00:01:24,390  -->  00:01:27,380
So let's go ahead and code this out.

22

00:01:27,720  -->  00:01:37,460
Well first to start by creating a class and we're going to do is go ahead and instantiate our class

23

00:01:37,450  -->  00:01:37,530
.

24

00:01:37,590  -->  00:01:44,550
Going to take sell and we'll do same thing we did for the stat class.

25

00:01:44,550  -->  00:01:47,730
We'll just have items equal to an empty list at first.

26

00:01:47,760  -->  00:01:50,590
So so far we just have an empty queue.

27

00:01:51,270  -->  00:01:54,410
Let's go ahead and create our is empty.

28

00:01:54,840  -->  00:01:57,300
That's going to be the same as what we did for the stack.

29

00:01:57,300  -->  00:02:07,260
We're just going to return the bully and check if the items attribute is equal to an empty list then

30

00:02:07,740  -->  00:02:10,960
next to is going to be on Kure and q.

31

00:02:11,520  -->  00:02:20,620
So we're going to do here is say on Q takes in cell and then that item.

32

00:02:20,640  -->  00:02:23,590
So remember we're doing a first in first out principle.

33

00:02:23,670  -->  00:02:29,190
Just like a regular cue or line as you wait at a cashier or something.

34

00:02:29,190  -->  00:02:34,950
So in order to implement this we're going to do is take advantage of the inserts method that a list

35

00:02:34,950  -->  00:02:38,640
can have and it's going to take two arguments.

36

00:02:38,640  -->  00:02:43,350
One is the index you want to insert at and the other one is the elements or item you want to insert

37

00:02:43,350  -->  00:02:43,900
.

38

00:02:43,980  -->  00:02:50,940
So we're going to have inserted at index 0 and we're going to put in an item.

39

00:02:50,940  -->  00:02:54,420
So as we keep inserting items we basically push the rest of them up

40

00:02:57,870  -->  00:03:05,610
and then for decreasing what we're going to do is not take any arguments there and we're just going

41

00:03:05,610  -->  00:03:09,570
to go ahead and pop off the item

42

00:03:13,650  -->  00:03:25,890
and then finally for checking the size we're going to do is just return the lengths of sauf items and

43

00:03:25,890  -->  00:03:35,400
let's go ahead and make that into the size method.

44

00:03:35,400  -->  00:03:38,800
Sorry I wrote that in a bit of a weird order.

45

00:03:38,920  -->  00:03:43,590
Ok so I ran that let's go ahead and mess around with it and make sure everything is working.

46

00:03:43,710  -->  00:03:49,270
So create a variable Q stands for q.

47

00:03:49,380  -->  00:03:52,650
Let's go ahead and just check right off the bat what its size is.

48

00:03:53,490  -->  00:03:56,310
And let's make sure that it's empty.

49

00:03:57,360  -->  00:03:59,280
OK so that's looking good so far.

50

00:03:59,610  -->  00:04:02,820
Let's go ahead and add an item to it.

51

00:04:02,830  -->  00:04:07,380
We'll add one and we'll add another item.

52

00:04:07,380  -->  00:04:09,170
In this case we'll say two.

53

00:04:09,720  -->  00:04:15,570
So now you should be asking yourself is if a call dequeue what item should I expect to come out.

54

00:04:15,740  -->  00:04:19,170
Well remember it's first in first out principle here.

55

00:04:19,170  -->  00:04:23,210
So I should expect the first item I put in one just has a stack.

56

00:04:23,220  -->  00:04:25,300
We've gotten two out.

57

00:04:25,820  -->  00:04:28,170
OK so go ahead and play around with this.

58

00:04:28,170  -->  00:04:29,800
Make sure you understand.

59

00:04:29,910  -->  00:04:36,570
Basically the first in first out principle here that we've done in our own Q class and make sure you're

60

00:04:36,570  -->  00:04:39,040
actually able to implement this on your own.

61

00:04:39,460  -->  00:04:44,090
OK that being said thanks everyone and I'll see you at the next lecture.
