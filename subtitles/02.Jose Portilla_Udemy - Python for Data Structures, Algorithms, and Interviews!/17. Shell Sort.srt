1

00:00:01,830  -->  00:00:08,580
Hello everyone and welcome to the shelf sort lecture so this lecture will have an explanation and visualization

2

00:00:08,580  -->  00:00:09,550
or shell soar.

3

00:00:09,870  -->  00:00:13,940
And in the next lecture will have an implementation Python of shells.

4

00:00:15,150  -->  00:00:19,260
So let's discuss what the shelf sort algorithm actually does.

5

00:00:19,260  -->  00:00:25,790
It's pretty similar to the insertion sort's algorithm but it improves on it by breaking up that original

6

00:00:25,790  -->  00:00:33,390
list into a number of smaller sublists instead of just that one singular sublist and the unique way

7

00:00:33,390  -->  00:00:39,010
that these sublists are chosen is the real key to shell swords.

8

00:00:39,030  -->  00:00:46,650
So instead of breaking the list into sublists of continuous items the shell sort uses in increments

9

00:00:46,950  -->  00:00:48,200
that will call I.

10

00:00:48,360  -->  00:00:56,460
It's sometimes called the gap and it uses the increments to create a sublist by choosing all items that

11

00:00:56,460  -->  00:00:59,780
are eye items or parts.

12

00:00:59,790  -->  00:01:02,940
So let me go to show you a figure of what I mean by that.

13

00:01:03,810  -->  00:01:09,110
So if you look at this figure this list has nine items.

14

00:01:09,210  -->  00:01:17,880
If we use an increment of three then there are three sublists and each of which can be sorted by an

15

00:01:17,880  -->  00:01:25,170
insertion sort and after completing these sorts we get the list shown here which I'll show you in the

16

00:01:25,170  -->  00:01:27,980
next figure right here.

17

00:01:27,990  -->  00:01:31,620
So although this list isn't completely sorted.

18

00:01:31,770  -->  00:01:35,240
Something really interesting happens by sorting these sublists.

19

00:01:35,310  -->  00:01:39,210
We've moved the items closer to where they actually belong.

20

00:01:39,960  -->  00:01:43,170
So let me go in and show you what a final insertion sort.

21

00:01:43,200  -->  00:01:46,510
Using in increments of one looks like.

22

00:01:47,130  -->  00:01:52,070
So here and this figure right now we have the sublease 1 2 and 3 sorted.

23

00:01:52,080  -->  00:01:55,970
So notice how there's these nine items we have.

24

00:01:55,970  -->  00:01:57,990
I equals three so little sublists.

25

00:01:57,990  -->  00:02:00,230
Three of them three items each.

26

00:02:00,750  -->  00:02:10,560
And if we sort the sublists at an increment of three and go to the final insertion sort gear and this

27

00:02:10,560  -->  00:02:12,600
one is just going to be using in increments of 1.

28

00:02:12,600  -->  00:02:15,420
So in other words just a standard insertion sort.

29

00:02:15,900  -->  00:02:21,240
And then you can note that by performing those earlier sublease sorts we've actually reduced the total

30

00:02:21,240  -->  00:02:26,040
number of shifting operations necessary to put the list in its final order.

31

00:02:26,040  -->  00:02:32,100
So for this case we actually need four more shifts to complete the process one shift for twenty two

32

00:02:32,100  -->  00:02:36,450
shifts for that 31 elements and one more shift for 54.

33

00:02:36,600  -->  00:02:42,830
And then your entire list has finally been sorted.

34

00:02:43,020  -->  00:02:48,420
Now I want to show you one more figure here and we'll actually get to what disfigures actually doing

35

00:02:48,420  -->  00:02:50,560
later on in the implementation.

36

00:02:50,670  -->  00:02:55,710
But I mentioned earlier that the way in which the increments are chosen is one of the unique features

37

00:02:55,710  -->  00:02:56,850
of shell sort.

38

00:02:57,270  -->  00:03:03,780
So we'll show this later in our implementation but which you can actually do is start a first case with

39

00:03:03,810  -->  00:03:10,140
an over two sublists with and being the number of items in your list or array and then on the next pass

40

00:03:10,140  -->  00:03:15,870
perform and over for an X center and then eventually a single list is sorted with that basic insertion

41

00:03:15,870  -->  00:03:17,250
sort.

42

00:03:17,250  -->  00:03:23,190
So right now this shows what the first sublists of the example of implementation are going to do in

43

00:03:23,190  -->  00:03:24,830
the next lecture looks like.

44

00:03:24,840  -->  00:03:26,040
So don't worry about this too much.

45

00:03:26,040  -->  00:03:34,070
Now we'll actually cover this later on when we actually implements our shell swords.

46

00:03:34,080  -->  00:03:40,080
So now let's go ahead and take a quick look at some visualizations that you can check out.

47

00:03:40,080  -->  00:03:44,610
So we're here at the Jupiter notebook for the implementation of shelfs or they'll see some resources

48

00:03:44,610  -->  00:03:45,770
for review.

49

00:03:45,780  -->  00:03:47,250
Go ahead and click the last one.

50

00:03:47,250  -->  00:03:54,530
The sorting algorithms sorting Dasch algorithms dot com and you'll see some shells soar visualisations

51

00:03:54,540  -->  00:03:59,370
free to check out and then keep in mind remember here that the gray values are unsorted.

52

00:03:59,370  -->  00:04:02,340
Black players have been sorted OK.

53

00:04:02,490  -->  00:04:07,550
And then here's a pseudo code for the algorithm and then it shows you the properties as well.

54

00:04:07,560  -->  00:04:14,190
So if we just check how this shell sort looks on a random you'll see they have multiple sublists occurring

55

00:04:14,190  -->  00:04:17,070
here due to the implementation.

56

00:04:17,340  -->  00:04:21,810
And eventually at the end they do one final pass as an insertion sort.

57

00:04:21,840  -->  00:04:22,420
All right.

58

00:04:22,680  -->  00:04:29,730
So when we talk about implementing this we will talk about the properties a little more and why Shell

59

00:04:29,730  -->  00:04:34,500
sort is a little better than just a normal first pass of an insertion sort.

60

00:04:34,540  -->  00:04:37,350
OK thanks everyone and I'll see you at the next lecture
