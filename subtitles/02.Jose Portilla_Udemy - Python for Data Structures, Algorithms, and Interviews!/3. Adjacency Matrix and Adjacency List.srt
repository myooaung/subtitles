1

00:00:01,140  -->  00:00:06,030
Hello everyone and welcome to the lecture discussing what an adjacency matrix is and what in the Jason

2

00:00:06,030  -->  00:00:08,250
C list is.

3

00:00:08,250  -->  00:00:10,930
So we're going to learn how to represent graphs in this lecture.

4

00:00:10,980  -->  00:00:14,880
And as I mentioned we're going to learn how to represent them as an adjacency matrix and an adjacency

5

00:00:14,880  -->  00:00:21,090
list and in the next lecture will actually implement an adjacency list in Python.

6

00:00:21,090  -->  00:00:24,620
So assist us with a matrix adjacency matrix is first.

7

00:00:25,110  -->  00:00:27,420
It's one of the easiest ways to implement a graph.

8

00:00:27,420  -->  00:00:31,860
And we just use a to them ungentle matrix in the matrix implementation.

9

00:00:31,920  -->  00:00:37,500
Each of the rows and columns represent a single vertex in the graph the value that is stored in the

10

00:00:37,500  -->  00:00:44,340
cell at that intersection of row and column w indicates if there is an edge from vertex V to vertex

11

00:00:44,340  -->  00:00:48,170
w and then one to two vertices are connected by an edge.

12

00:00:48,180  -->  00:00:50,350
We say that there are adjacent.

13

00:00:50,370  -->  00:00:57,810
So for example here you can see a matrix in adjacency matrix and the value in each of these particular

14

00:00:57,810  -->  00:01:02,730
cells represents the weight of an edge from that vertex V to vertex.

15

00:01:02,790  -->  00:01:04,800
So that rows that columns.

16

00:01:04,800  -->  00:01:13,020
So for example here we have vertex 0 in the row and Vertex 1 in the column the edge that connects them

17

00:01:13,320  -->  00:01:19,380
has a weight of 5 and then we can go along and see that the two of you are connected with a weight of

18

00:01:19,380  -->  00:01:20,770
four etc..

19

00:01:20,820  -->  00:01:27,080
So that's how we can actually represent a graph in a matrix form which is useful to know.

20

00:01:28,830  -->  00:01:33,750
So the advantage of the adjacency matrix is that it's simple and for small graphs it's really easy to

21

00:01:33,750  -->  00:01:36,170
see which nodes are connected to the other nodes.

22

00:01:36,510  -->  00:01:39,840
However notice that most of the cells that Matrix were empty.

23

00:01:39,990  -->  00:01:43,900
That's because most of the cells are empty because the matrix is sparse.

24

00:01:44,160  -->  00:01:48,720
A matrix is not a very efficient way to store sparse data because you have to store all those empty

25

00:01:48,720  -->  00:01:49,930
cells.

26

00:01:50,040  -->  00:01:54,180
In fact that Python usually have to go out of your way to even create a matrix structure like the one

27

00:01:54,180  -->  00:01:54,870
we just saw

28

00:01:58,010  -->  00:02:00,550
what the adjacency matrix is good for.

29

00:02:00,570  -->  00:02:02,340
It's a good implementation for a graph.

30

00:02:02,370  -->  00:02:07,350
When the numbers of edges is large but what do we mean by large and how many edges would be needed to

31

00:02:07,350  -->  00:02:09,010
fill that matrix.

32

00:02:09,130  -->  00:02:12,960
So there is one row one column for every vertex in the graph.

33

00:02:12,960  -->  00:02:20,200
The number of edges required to fill the Matrix is the magnitude of the squared and a matrix is full

34

00:02:20,280  -->  00:02:23,440
every vertex is connected to another vertex.

35

00:02:23,460  -->  00:02:28,200
There are a few real problems that approach this sort of activity and the problem we're going to look

36

00:02:28,200  -->  00:02:31,890
at in the future all involve graphs that are sparsely connected.

37

00:02:31,950  -->  00:02:36,360
So we're really going to focus on is the adjacency list we won't be in the Matrix just because we're

38

00:02:36,360  -->  00:02:39,980
not going to have any graphs that really have that many edges.

39

00:02:40,290  -->  00:02:43,870
So scuzz want adjacency list is then says what we're going to be using.

40

00:02:43,930  -->  00:02:49,860
So what we're going to be implementing in the next lecture in A-J see list is a more space efficient

41

00:02:49,860  -->  00:02:55,340
way to implement a sparsely connected graph in an adjacency list implementation.

42

00:02:55,380  -->  00:03:00,870
We keep a master list of all the vertices in the graph object and then each vertex object in the graph

43

00:03:00,870  -->  00:03:06,930
maintains a list of the other vertices that it's connected to in the next lecture.

44

00:03:06,960  -->  00:03:11,820
In our implementation the vertex class we're going to use a dictionary rather than a list where the

45

00:03:11,820  -->  00:03:15,300
dictionary keys vertices and the values are the weights.

46

00:03:15,330  -->  00:03:17,010
So keep that in mind.

47

00:03:17,130  -->  00:03:21,230
Let's go ahead and show you an example of what this would actually look like.

48

00:03:21,240  -->  00:03:26,360
So for example here we have our entire graph and it has six vertices.

49

00:03:26,490  -->  00:03:30,120
So if we just look at one of them right now we're just trying this as a list.

50

00:03:30,180  -->  00:03:37,110
You can see that essentially each key of that Vertex the zero then has an ID that the zero in it also

51

00:03:37,110  -->  00:03:41,910
has the adjacent a set with the adjacent vertex vertices to it.

52

00:03:42,000  -->  00:03:42,450
And the weight.

53

00:03:42,450  -->  00:03:45,530
So for example the Zero has zero.

54

00:03:45,560  -->  00:03:52,590
It has adjacent vertices v 1 and v 5 with corresponding edge weights a 5 and 2.

55

00:03:52,620  -->  00:03:58,020
So you can see here we're actually not storing any empty data so list is a much more space efficient

56

00:03:58,020  -->  00:04:01,100
way than the Matrix we previously saw.

57

00:04:01,830  -->  00:04:06,630
So again that advantage of the adjacency list implementation it allows us to compactly represent that

58

00:04:06,630  -->  00:04:12,480
sparse graph and the adjacency list also allows us to easily find the links that are directly connected

59

00:04:12,480  -->  00:04:15,100
to a particular vertex.

60

00:04:15,120  -->  00:04:20,520
So coming up in the next lecture we're actually do an implementation of an adjacency list in Python

61

00:04:20,540  -->  00:04:20,970
.

62

00:04:21,430  -->  00:04:24,620
OK thanks everyone and I'll see you at the next lecture.
