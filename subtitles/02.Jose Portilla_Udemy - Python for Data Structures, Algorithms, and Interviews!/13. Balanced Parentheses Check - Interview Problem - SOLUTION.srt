1

00:00:01,410  -->  00:00:06,580
Hello everyone and welcome to the solution for the balance parentheses check interview problem.

2

00:00:07,050  -->  00:00:11,640
Just as a reminder this is a pretty common interview problem and it's one of the main ways to check

3

00:00:11,640  -->  00:00:13,600
your knowledge of stacks.

4

00:00:13,620  -->  00:00:19,770
So what the problem statement was you were given a string of opening and closing parentheses you had

5

00:00:19,770  -->  00:00:21,960
to check whether it was balanced.

6

00:00:21,990  -->  00:00:26,000
Let's go ahead and go over some logic for our solution.

7

00:00:26,040  -->  00:00:27,630
Let me go ahead and zoom in here.

8

00:00:28,020  -->  00:00:32,640
So as I mentioned this is a common interview problem and we're going to start our solution logic as

9

00:00:32,640  -->  00:00:35,590
such starting with this step.

10

00:00:35,760  -->  00:00:41,480
First we're going to scan the string from left to right now every time we see an opening parentheses

11

00:00:41,480  -->  00:00:41,740
.

12

00:00:41,880  -->  00:00:48,020
We're going to push it to a stack because we want the last opening parentheses to be closed first.

13

00:00:48,320  -->  00:00:52,800
So remember that first in last out structure of a stack.

14

00:00:54,630  -->  00:00:59,580
And that first in last out is just another way of saying Last In First Out.

15

00:01:00,110  -->  00:01:00,880
OK.

16

00:01:01,410  -->  00:01:06,370
So the second step is going to be when we see a closing parentheses.

17

00:01:06,510  -->  00:01:12,240
We're going to check whether the last open one is the corresponding closing match by popping an element

18

00:01:12,270  -->  00:01:13,410
from the stack.

19

00:01:13,470  -->  00:01:16,190
If it's a valid match then we can proceed forward.

20

00:01:16,260  -->  00:01:19,860
Otherwise we just return false because we know it's not balanced.

21

00:01:19,860  -->  00:01:25,920
So if the stack is empty it will also return false because there is no opening parentheses associate

22

00:01:25,920  -->  00:01:27,290
of the closing one.

23

00:01:27,510  -->  00:01:30,450
And in the end we also check whether the stack is empty.

24

00:01:30,480  -->  00:01:32,220
If so we just return true.

25

00:01:32,430  -->  00:01:37,550
Otherwise we return false because there were some open parentheses that were not close.

26

00:01:38,100  -->  00:01:40,540
So that's our basic logic right now.

27

00:01:40,620  -->  00:01:46,070
Let's go ahead and code out the solution for this so we can see this implemented in action.

28

00:01:46,080  -->  00:01:46,840
All right.

29

00:01:47,220  -->  00:01:52,090
So we're going to go ahead and fill out that balance check function.

30

00:01:53,130  -->  00:02:00,510
It takes in a string and first thing we're going to do is just a quick edge case check so we can already

31

00:02:00,510  -->  00:02:03,870
check that if there's an even number of brackets.

32

00:02:04,080  -->  00:02:06,260
We know we can continue on a solution.

33

00:02:06,360  -->  00:02:11,310
Otherwise if there's an odd number of brackets we'll just return false and that's going to be an impossible

34

00:02:11,880  -->  00:02:13,620
string to balance.

35

00:02:13,680  -->  00:02:26,490
So say if the length of that string s mod 2 is not equal to zero then I know we have an odd number of

36

00:02:26,520  -->  00:02:29,820
parentheses and I can just return false.

37

00:02:29,820  -->  00:02:36,000
Keep in mind that we were given the statement that there is no spaces or words or elements besides parentheses

38

00:02:36,000  -->  00:02:37,050
here.

39

00:02:37,050  -->  00:02:41,370
Otherwise you wouldn't be able to do such an easy check.

40

00:02:41,400  -->  00:02:46,080
Next thing we're going to do is create a set of opening brackets.

41

00:02:46,200  -->  00:02:55,230
So I'm going to create a variable called opening and I'll make a sets and I can pass on a string to

42

00:02:55,230  -->  00:03:00,050
the set and I just want the opening brackets.

43

00:03:00,060  -->  00:03:06,000
You'll notice that Jupiter notebooks and I Python in general will auto generate the close brackets.

44

00:03:06,000  -->  00:03:08,370
Don't worry about that right now.

45

00:03:08,490  -->  00:03:11,280
So just to show you what this line is actually doing.

46

00:03:11,280  -->  00:03:16,050
I'm just going to actually run it here so you can see it's basically a nice quick way of creating a

47

00:03:16,050  -->  00:03:19,600
set of these brackets individually.

48

00:03:19,650  -->  00:03:24,230
So it's taking each element in that string and passing it into the set.

49

00:03:24,240  -->  00:03:24,580
All right.

50

00:03:24,690  -->  00:03:26,250
So we have our opening brackets.

51

00:03:26,340  -->  00:03:29,700
Go ahead and delete this.

52

00:03:29,700  -->  00:03:31,470
So I have that opening set of brackets.

53

00:03:31,500  -->  00:03:34,620
Let's go ahead and make a set of the matching pairs.

54

00:03:34,890  -->  00:03:44,820
So I'm going to make another sets I'll call it matches and I'm going to pass in a list here of tuples

55

00:03:44,910  -->  00:03:46,740
of the matches.

56

00:03:46,920  -->  00:03:49,140
So we have three types parentheses.

57

00:03:49,320  -->  00:03:52,130
Which means I can have three tuples.

58

00:03:53,310  -->  00:03:58,460
I'm setting them up here so hopefully you can see the logic that we're doing.

59

00:03:58,500  -->  00:04:08,010
So let's go ahead and make the first match that first match would it be in opening and closing parentheses

60

00:04:08,020  -->  00:04:09,290
.

61

00:04:09,300  -->  00:04:11,640
So that's our first tuple here.

62

00:04:11,650  -->  00:04:14,770
Lee spaces so it's it's a little more clear.

63

00:04:14,820  -->  00:04:21,780
So that's our first basic tuple set or pair and next one is going to be the square brackets.

64

00:04:21,780  -->  00:04:27,340
So there's the open square bracket and there's the clothes square bracket.

65

00:04:27,630  -->  00:04:29,400
And then let's go ahead to do the curly one.

66

00:04:29,520  -->  00:04:33,640
So Curly open and Curly closed.

67

00:04:33,990  -->  00:04:34,710
OK.

68

00:04:35,010  -->  00:04:40,890
Let me go ahead and make sure you guys understand what this is by just running that string or excuse

69

00:04:40,890  -->  00:04:50,350
me running that line and you'll notice we have our sets and it's of tuple pairs here.

70

00:04:50,650  -->  00:04:59,410
Open close open close open close right so that variable is called matches and we're going to do is use

71

00:04:59,410  -->  00:05:01,150
a list as a stack.

72

00:05:01,180  -->  00:05:03,480
So remember we are implementing our stack.

73

00:05:03,490  -->  00:05:07,440
We're basically using all the built in operations of a list.

74

00:05:07,570  -->  00:05:09,790
So that's totally fine in interview setting.

75

00:05:09,790  -->  00:05:15,220
Just make sure the interviewer knows that you realize the Python list to operate same as a stack.

76

00:05:15,280  -->  00:05:20,770
In this situation maybe as an earlier question they ask you to implement your own stack.

77

00:05:20,770  -->  00:05:25,120
So you might want to keep this in mind and a good challenge would be to implement your own stack first

78

00:05:25,780  -->  00:05:30,470
and then do this problem with your own implement stack class.

79

00:05:30,700  -->  00:05:37,870
So continuing on let's go ahead and check every parentheses in the string saying the save for Paran

80

00:05:38,590  -->  00:05:42,580
short print sees in S that string we took in.

81

00:05:42,580  -->  00:05:44,970
What I want to do is check if it's an opening.

82

00:05:45,010  -->  00:05:47,020
I'm going to append that to that list.

83

00:05:47,200  -->  00:05:49,060
Basically push it to the stack.

84

00:05:49,510  -->  00:05:57,430
So I say if print is in opening meaning it's an opening parentheses going to take my stack which was

85

00:05:57,430  -->  00:06:00,710
that list and a pens that print.

86

00:06:00,970  -->  00:06:08,320
So I'm pushing that print sees if it's an opening one else what I'm going to do is check that there

87

00:06:08,320  -->  00:06:10,490
are parentheses in the stack.

88

00:06:10,870  -->  00:06:14,820
So if it's not a opening princes means it's a closing one.

89

00:06:14,890  -->  00:06:22,990
So the first thing you can do is I'm going to say if length of stack at the end there if length of stack

90

00:06:23,110  -->  00:06:31,390
is equal to zero return false because Aretino there wasn't a matching opening print sees for that closing

91

00:06:31,390  -->  00:06:32,280
parentheses.

92

00:06:32,350  -->  00:06:39,140
If the length the stack is already 0 if that's not the case what I want to do is check that last open

93

00:06:39,190  -->  00:06:39,980
prints.

94

00:06:40,030  -->  00:06:50,470
So I'm going to create a variable call it last open and that will be that pop from the stack member

95

00:06:50,470  -->  00:06:50,520
.

96

00:06:50,530  -->  00:06:59,620
Our first and last out or last in first out principle and what I want to do now is check if that has

97

00:06:59,620  -->  00:07:01,330
a closing match.

98

00:07:01,330  -->  00:07:05,620
So say if last open

99

00:07:08,230  -->  00:07:16,670
Uren is not in match's return false.

100

00:07:16,690  -->  00:07:24,340
So hopefully now you can see why we did that tuple set here of these pairings so I can use this sort

101

00:07:24,340  -->  00:07:25,060
of notation.

102

00:07:25,080  -->  00:07:27,280
Last open print not in matches.

103

00:07:27,520  -->  00:07:31,110
There's definitely other ways you could have gone about making this check.

104

00:07:31,420  -->  00:07:36,790
But I like this because it's a little cleaner and it makes a nice use of a set as a one line here for

105

00:07:36,790  -->  00:07:38,570
checking your matches.

106

00:07:39,370  -->  00:07:40,230
OK.

107

00:07:40,570  -->  00:07:48,130
So if none of those ended up returning anything then I'm just going to do a quick check if the stack

108

00:07:48,130  -->  00:07:48,820
is empty.

109

00:07:48,820  -->  00:07:57,240
So when a say return length of stack equal to zero.

110

00:07:57,640  -->  00:08:04,370
And let me go ahead and zoom out a bit so you can see how the code is laid out.

111

00:08:04,420  -->  00:08:04,850
All right.

112

00:08:04,900  -->  00:08:10,540
So you can see that this four lines up of that return for that check if we've emptied out that stack

113

00:08:10,540  -->  00:08:11,670
completely.

114

00:08:12,160  -->  00:08:17,370
So let's go ahead and do some balance checks and make sure this all works out and check we have an error

115

00:08:17,410  -->  00:08:18,800
in our code.

116

00:08:19,630  -->  00:08:20,150
OK.

117

00:08:20,170  -->  00:08:23,180
So looks like this was true make sense to me.

118

00:08:23,800  -->  00:08:25,780
Well check another balance check.

119

00:08:26,140  -->  00:08:28,690
This one should also be true.

120

00:08:29,860  -->  00:08:30,390
All right.

121

00:08:30,460  -->  00:08:35,620
And let's check one that we know is false.

122

00:08:35,620  -->  00:08:36,000
Great.

123

00:08:36,010  -->  00:08:37,970
Now we got false.

124

00:08:37,990  -->  00:08:38,610
All right.

125

00:08:38,860  -->  00:08:40,560
That's always the solution.

126

00:08:40,570  -->  00:08:46,390
So let's go ahead and see it one more time and walk through the steps we're doing.

127

00:08:46,390  -->  00:08:51,160
So remember the first thing we're doing is we're just scanning the string from left to right which is

128

00:08:51,160  -->  00:08:53,120
what this for loop is doing.

129

00:08:53,200  -->  00:08:57,200
And then every time we see an opening parentheses we push it to the stack.

130

00:08:57,370  -->  00:09:04,210
So we created our opening set of prints C's or saying if prend is in the opening I'm going to push it

131

00:09:04,210  -->  00:09:05,170
to that stack.

132

00:09:05,320  -->  00:09:11,370
And in this case and my stack is just a list I'm using the append method of that list.

133

00:09:11,410  -->  00:09:12,180
All right.

134

00:09:12,640  -->  00:09:19,810
We do this because we want the last opening print seems to be closed first then when we see a closing

135

00:09:19,810  -->  00:09:26,110
print sees we're going to check whether the last opened one is the corresponding closing match by popping

136

00:09:26,110  -->  00:09:29,800
an element from the stack which is right here in this case.

137

00:09:29,860  -->  00:09:32,500
If it's a valid match then we proceed forward.

138

00:09:32,500  -->  00:09:34,770
If not we're going to return false.

139

00:09:35,250  -->  00:09:42,960
In other method or step here is that if the stack is empty We're also going to return false because

140

00:09:42,970  -->  00:09:48,520
there is no opening princes snowsuit of that closing line which is what we did here in this check.

141

00:09:48,520  -->  00:09:53,400
So in the end also check whether the stack is empty right here.

142

00:09:53,470  -->  00:09:58,620
If so we'll end up returning true because that means we've balanced out and matched all the princes

143

00:09:58,620  -->  00:09:59,170
.

144

00:09:59,410  -->  00:10:04,050
Otherwise we return false because there are some open princes that were never closed.

145

00:10:04,060  -->  00:10:07,850
At the end of going through the entire string.

146

00:10:08,600  -->  00:10:09,380
OK.

147

00:10:09,520  -->  00:10:12,510
So go ahead and walk out for a walk through that solution.

148

00:10:12,510  -->  00:10:14,300
Make sure you understand it.

149

00:10:14,440  -->  00:10:19,570
Go ahead and see if you can implement your own stack class and use it in the same way as we did with

150

00:10:19,630  -->  00:10:22,070
our list as a substitute.

151

00:10:22,510  -->  00:10:27,700
And if you want you can go ahead and check out other methods or create your own methods for doing this

152

00:10:27,700  -->  00:10:31,330
check right here are the matches with this line.

153

00:10:31,870  -->  00:10:32,650
OK.

154

00:10:33,070  -->  00:10:34,520
That's the solution everyone.

155

00:10:34,630  -->  00:10:37,720
Thanks a lot and I'll see you at the next lecture.

156

00:10:37,720  -->  00:10:38,130
Thanks
