1

00:00:01,230  -->  00:00:07,470
Hello everyone and welcome to the dynamic array exercise lecture in this lecture we're going to be implementing

2

00:00:07,560  -->  00:00:10,030
our own dynamic array class.

3

00:00:10,110  -->  00:00:16,220
So as always there's a notebook associate of this since it's a live coding lecture.

4

00:00:16,440  -->  00:00:22,880
If you go to do if you go to the array sequences folder under dynamic array exercise.

5

00:00:23,060  -->  00:00:24,570
I on a book here.

6

00:00:24,610  -->  00:00:30,580
If you click on that you'll get this dynamic array exercise notebook and it has all the code as well

7

00:00:30,580  -->  00:00:35,040
as some notes and lots of comments for you to fully understand what we're going to go through this lecture

8

00:00:35,040  -->  00:00:35,700
.

9

00:00:35,700  -->  00:00:40,060
So we're going to basically basically be implementing this class dynamic array.

10

00:00:40,500  -->  00:00:43,420
It's going to act similarly to a python list.

11

00:00:43,470  -->  00:00:47,460
So let's go ahead and get started really quickly before we begin.

12

00:00:47,520  -->  00:00:51,590
We're going to be taking advantage of two features of Python.

13

00:00:51,600  -->  00:00:54,920
One is a built in library called C types.

14

00:00:55,020  -->  00:00:59,040
You can check out the documentation link here for more information but it's basically just going to

15

00:00:59,040  -->  00:01:02,780
be used here as a raw array holder.

16

00:01:02,940  -->  00:01:07,500
If you scroll down to the very bottom of the eye of the dynamic array class that we're going to be building

17

00:01:07,500  -->  00:01:07,700
.

18

00:01:07,890  -->  00:01:12,350
That's the only part where we use it where we actually make a new array.

19

00:01:13,220  -->  00:01:13,840
OK.

20

00:01:14,100  -->  00:01:20,640
And then the second note that I want you to be aware of is we used an underscore before method's name

21

00:01:21,870  -->  00:01:23,900
to keep it non-public.

22

00:01:23,970  -->  00:01:33,660
So we'll show a quick example of that by copying and pasting this code into the notebook.

23

00:01:33,750  -->  00:01:41,910
So for instance now if by say lowercase them is equal to an instance of that class.

24

00:01:42,450  -->  00:01:50,850
If I do that tab I will get public help but notice I won't get a list containing private because it

25

00:01:50,850  -->  00:01:56,580
has that underscore I would have to specify underscore in order to see all the special methods available

26

00:01:56,580  -->  00:02:02,610
to me and at the very end one of them will be private.

27

00:02:02,610  -->  00:02:07,020
So we're going to make use of that just because certain methods don't make sense for the users to be

28

00:02:07,020  -->  00:02:08,460
able to call them.

29

00:02:08,640  -->  00:02:09,450
All right.

30

00:02:09,450  -->  00:02:16,470
With that all being said let's go ahead and get started on implementing our own array class.

31

00:02:16,890  -->  00:02:22,380
So we've cleared all the cells and we're going to go in and start our implementation.

32

00:02:22,380  -->  00:02:28,690
First thing imma do is just import that C types and we'll get into that later on why we actually need

33

00:02:28,690  -->  00:02:29,470
to do that.

34

00:02:29,760  -->  00:02:40,240
So let's start building out our class color class dynamic array every number it's PEP 8 to have this

35

00:02:40,290  -->  00:02:44,150
capitalized pass an object.

36

00:02:44,490  -->  00:02:46,700
And let's go ahead and get started.

37

00:02:46,710  -->  00:02:49,530
First we want to initialize.

38

00:02:50,460  -->  00:02:57,850
So underscore underscore in it underscore underscore and we're just going to pass and self.

39

00:02:58,170  -->  00:03:05,200
And there's essentially three attributes that we're going to have here.

40

00:03:05,250  -->  00:03:09,700
We're going to have an We're going to start at zero.

41

00:03:09,700  -->  00:03:13,220
So this is going to be the actual count of the actual elements.

42

00:03:13,260  -->  00:03:15,930
By default it's zero.

43

00:03:15,930  -->  00:03:22,540
We're going to have capacity be another attribute by default.

44

00:03:22,560  -->  00:03:26,140
I'll just be one so can accept only one element by default.

45

00:03:26,340  -->  00:03:33,630
Remember we're going to be using a dynamic array style in order to implement larger capacities and show

46

00:03:33,690  -->  00:03:36,560
methods to do that later on.

47

00:03:36,630  -->  00:03:39,460
And then finally I'm going to say self-taught A.

48

00:03:40,050  -->  00:03:42,230
And that's going to be equal to self.

49

00:03:42,280  -->  00:03:48,130
That's another method which we'll call make array and we'll build that out later.

50

00:03:48,900  -->  00:03:54,250
And it's going to pasan capacity.

51

00:03:55,260  -->  00:03:55,980
OK.

52

00:03:56,190  -->  00:04:03,270
So we have these three attributes that count actual elements with and the capacity default is 1 and

53

00:04:03,270  -->  00:04:08,540
the self-taught A which would call make array which we're going to build out later on.

54

00:04:09,300  -->  00:04:18,080
The next one we want to do is a special method length it's going to pass and just self.

55

00:04:18,210  -->  00:04:21,450
And this is going to return a number of elements stored in the array.

56

00:04:21,750  -->  00:04:26,070
So it's going to do is return self-taught.

57

00:04:26,100  -->  00:04:28,180
Em All right.

58

00:04:28,650  -->  00:04:35,740
And then one more special method we want to do is get item.

59

00:04:36,120  -->  00:04:42,060
This is going to take in self of course and it's also going to take in a k parameter.

60

00:04:42,060  -->  00:04:46,950
And what this is going to do is it's going to return the elements at index k.

61

00:04:47,220  -->  00:04:54,220
So after creating a dynamic array you can use indexing to return the element to index.

62

00:04:54,270  -->  00:04:56,400
So I'm going to say if not

63

00:04:59,170  -->  00:05:04,780
zero Lessner equal to K less than or equal to self-taught.

64

00:05:04,780  -->  00:05:07,760
And remember this the count of the actual elements.

65

00:05:08,170  -->  00:05:15,160
Basically this is saying if that K that index you pass isn't actually in between zero and the count

66

00:05:15,160  -->  00:05:18,650
of the actual elements will have to return some sort of error.

67

00:05:18,940  -->  00:05:25,050
In this case there's a specific error for this index error.

68

00:05:25,390  -->  00:05:28,350
So make sure you go ahead and review errors and exceptions.

69

00:05:28,450  -->  00:05:35,080
If you don't understand what this sort of syntaxes But what this is just going to do it's going to out

70

00:05:35,620  -->  00:05:41,640
KS out of bounds if you happen to ask for a K that's out of bounds of the array.

71

00:05:42,310  -->  00:05:51,080
So if that clears then we're just going to say return self that a.

72

00:05:52,180  -->  00:05:57,400
OK so we're going to retrieve from our labeled a array index k.

73

00:05:57,520  -->  00:06:04,270
And the reason we're using that self-taught a notation is to reflect back on the diagrams from the previous

74

00:06:04,270  -->  00:06:07,760
lecture where we had two arrays a and b array.

75

00:06:07,810  -->  00:06:13,030
So we'll also keep the Beary notation later on as we implement this further.

76

00:06:13,630  -->  00:06:15,250
All right.

77

00:06:15,250  -->  00:06:20,280
Next method we're going to create is the append method.

78

00:06:20,310  -->  00:06:23,950
So this is going to add an element to the end of the array.

79

00:06:24,850  -->  00:06:26,340
So I'm going to say a pen.

80

00:06:26,470  -->  00:06:30,170
We can zoom in here a little bit.

81

00:06:30,820  -->  00:06:31,770
I'm going to say a pen.

82

00:06:31,780  -->  00:06:36,170
It's going to take self argument since we're acting on that instance of the object.

83

00:06:36,340  -->  00:06:39,100
And it's also going to take elete which stands for elements.

84

00:06:39,220  -->  00:06:43,220
So it's going to add the elements that L.E. to the end of the array.

85

00:06:43,870  -->  00:06:46,600
And this is where we're going to have to check our capacity.

86

00:06:46,870  -->  00:06:52,240
So as we mentioned in the previous lecture I'm going to say if self-taught.

87

00:06:52,430  -->  00:06:57,010
So the count of the actual elements if that's equal to the capacity

88

00:06:59,710  -->  00:07:09,730
self-taught capacity was colon then I'm going to say self that and what I'm going to have to do is if

89

00:07:10,150  -->  00:07:15,840
my current count is equal to my capacity I'm going to double the capacity if there isn't enough room

90

00:07:15,850  -->  00:07:16,360
.

91

00:07:16,360  -->  00:07:21,010
So later on when I'm going to do is creates a private method called resize.

92

00:07:21,010  -->  00:07:37,090
So in this case I'll say underscore resize to times self capacity and just keep a note here to X if

93

00:07:38,080  -->  00:07:44,060
capacity isn't enough.

94

00:07:44,060  -->  00:07:44,650
All right.

95

00:07:45,010  -->  00:07:50,650
So what we're going to append an element we check to see if our current count is equal to our capacity

96

00:07:50,650  -->  00:07:51,040
.

97

00:07:51,040  -->  00:07:59,560
If it is we're going to resize and double it after we do that we can say self of our aere

98

00:08:02,260  -->  00:08:06,690
person and set it equal to Ellie.

99

00:08:07,270  -->  00:08:13,060
So we set self-doubt an index to the elements and then since that's equal to the elements I'm going

100

00:08:13,060  -->  00:08:17,520
to have to do is add one to that counts.

101

00:08:17,650  -->  00:08:18,120
All right.

102

00:08:18,580  -->  00:08:21,980
So we double the capacity and then we take that last one.

103

00:08:22,030  -->  00:08:28,510
And that last count said equal to that new element that we're appending here and then add one to n to

104

00:08:28,510  -->  00:08:30,300
our count.

105

00:08:30,300  -->  00:08:35,470
All right so since we mentioned this underscore resize special method here let's go ahead and build

106

00:08:35,470  -->  00:08:36,650
that out.

107

00:08:37,150  -->  00:08:45,850
So when I say the underscore resize it's going to take itself and then it's also going to take in arguments

108

00:08:47,080  -->  00:08:52,180
new cap which is the new capacity which is what we were passing in here that I'm highlighting right

109

00:08:52,180  -->  00:09:00,640
now two times the current capacity self-talk capacity and this is going to resize the internal array

110

00:09:00,970  -->  00:09:05,060
to the capacity of that new underscore cap.

111

00:09:05,200  -->  00:09:10,430
So we're going to use the same sort of notation we use in the last lecture B.

112

00:09:10,640  -->  00:09:14,260
So I'm going to say this betray is equal to self that

113

00:09:16,840  -->  00:09:18,210
make array.

114

00:09:18,490  -->  00:09:24,400
And we're going to be using that C types library that we mentioned earlier to use that Maskerade method

115

00:09:24,640  -->  00:09:29,500
we haven't developed that yet but we'll do it after we finish out this resize method.

116

00:09:29,980  -->  00:09:31,060
So we're going to make array.

117

00:09:31,060  -->  00:09:34,680
And it's going to accept new cap as an arguments.

118

00:09:34,990  -->  00:09:47,150
So we make a new bigger array and call it B and then we say for k in range self-taught.

119

00:09:47,190  -->  00:10:00,250
And so we reference all the existing values on the set B of K equal to self-taught a k.

120

00:10:00,600  -->  00:10:06,600
So here I'm just referencing as we saw in that previous diagram in the previous lecture I'm basically

121

00:10:06,690  -->  00:10:11,480
referencing all these existing values from a into B.

122

00:10:12,360  -->  00:10:19,240
Once we're done with that and I say self that a is now equal to B.

123

00:10:19,320  -->  00:10:20,280
So I call a.

124

00:10:20,280  -->  00:10:21,730
Now that new.

125

00:10:22,200  -->  00:10:30,210
And then I say self that capacity is equal to new cap.

126

00:10:30,210  -->  00:10:33,340
So I reset that capacity.

127

00:10:33,990  -->  00:10:34,770
All right.

128

00:10:35,250  -->  00:10:39,260
And then lastly we're just going to make a method that actually makes arrays.

129

00:10:39,300  -->  00:10:44,340
And this is going to make the raw array that we're actually creating.

130

00:10:45,870  -->  00:10:52,950
And this is going to take itself and new cap and this returns a new array with the new cap capacity

131

00:10:52,950  -->  00:10:53,940
.

132

00:10:53,940  -->  00:10:56,970
And so we're going to be using that C types library here.

133

00:10:57,000  -->  00:11:02,190
It's just going to be a one liner don't worry too much about what we're actually typing and how this

134

00:11:02,190  -->  00:11:03,030
is working.

135

00:11:03,210  -->  00:11:10,330
You can essentially just think about it as grabbing those raw bytes and creating that array.

136

00:11:10,560  -->  00:11:24,810
So it's going to be new cap times see types of pie underscore objects in close parentheses afterwards

137

00:11:24,820  -->  00:11:25,100
.

138

00:11:25,380  -->  00:11:31,890
So just go ahead feel free to copy this line from the Jupiter notebook that's available to you.

139

00:11:32,430  -->  00:11:33,720
So that's it.

140

00:11:33,870  -->  00:11:37,080
That's our entire dynamic array class.

141

00:11:37,080  -->  00:11:42,450
Let's go ahead and run it this cell and make sure we haven't missed anything up.

142

00:11:42,450  -->  00:11:50,240
All right let's make a variable called a r r and instantiate it as a dynamic array.

143

00:11:50,370  -->  00:11:51,180
Run it.

144

00:11:51,240  -->  00:11:51,700
All right.

145

00:11:51,720  -->  00:11:53,400
Looks like it's working so far.

146

00:11:53,580  -->  00:11:55,760
So let's go ahead and do some things to it.

147

00:11:55,770  -->  00:12:04,140
Let's go ahead and say are the pens the pen the integer 1 to it.

148

00:12:04,170  -->  00:12:05,220
All right.

149

00:12:05,220  -->  00:12:09,330
Now let's check the length of our array and it's 1.

150

00:12:09,330  -->  00:12:13,200
So let's go ahead and appends in other array.

151

00:12:13,920  -->  00:12:15,430
Excuse me another integer.

152

00:12:16,350  -->  00:12:19,130
And Alice checked the length of the array.

153

00:12:19,530  -->  00:12:21,550
It looks like the length is not 2.

154

00:12:21,630  -->  00:12:25,530
And now let's see if we can actually access it using indexing methods.

155

00:12:26,240  -->  00:12:27,730
And it looks like we can.

156

00:12:27,740  -->  00:12:31,570
So index 0 we have one and an index one we have two.

157

00:12:31,590  -->  00:12:31,960
All right.

158

00:12:32,010  -->  00:12:32,950
So that was it.

159

00:12:32,970  -->  00:12:35,250
We actually made our own dynamic array.

160

00:12:35,610  -->  00:12:42,210
Let's go ahead and do a quick rundown of all the methods since we created them all.

161

00:12:42,450  -->  00:12:44,220
So we're going to zoom out a bit here.

162

00:12:44,580  -->  00:12:51,080
So starting off with the class dynamic array object we started with some attributes here.

163

00:12:51,110  -->  00:12:55,680
Self-taught and which was the actual count of the elements in the array.

164

00:12:55,680  -->  00:12:57,800
We started off with 0 elements in the array.

165

00:12:58,110  -->  00:12:59,900
Then we have the capacity of the array.

166

00:13:00,000  -->  00:13:05,720
We start off with just bam to hold one element and then we have self-taught a equal to.

167

00:13:05,760  -->  00:13:09,530
Self-taught make array of self-taught capacity.

168

00:13:09,780  -->  00:13:15,990
So in this case when we start out we set a equal to an array of capacity 1.

169

00:13:16,020  -->  00:13:22,350
So we come down here and using that C types library actually make that raw array.

170

00:13:22,440  -->  00:13:29,130
Then we start for some special methods length just to return that counts get item that allows us to

171

00:13:29,130  -->  00:13:29,880
index.

172

00:13:29,910  -->  00:13:36,300
But first we do a check to see if it's actually in bounds for that k if it is we just return a index

173

00:13:36,300  -->  00:13:39,760
k and then we have this appends.

174

00:13:40,170  -->  00:13:46,620
And this is really the key to understanding all of this is that we check our actual counts against the

175

00:13:46,620  -->  00:13:47,790
capacity.

176

00:13:48,480  -->  00:13:55,650
And if it's equal to it then we resize to double the capacity and that's really the main point of this

177

00:13:55,650  -->  00:14:02,760
dynamic array that instead of having this huge array since the beginning we just check as we add elements

178

00:14:03,000  -->  00:14:08,100
if our count is equal to the capacity and we double if the capacity isn't enough.

179

00:14:08,100  -->  00:14:12,760
That's really what makes this array a dynamic array and we can keep adding to it.

180

00:14:12,960  -->  00:14:16,860
And the space that we have will keep growing as we go along.

181

00:14:16,860  -->  00:14:22,650
Then once we do that we just say a softer end is equal to elements and we add a count at that.

182

00:14:22,650  -->  00:14:30,960
And then we created a method called the resize which sets the Sarabi almost like a temporary array equal

183

00:14:30,960  -->  00:14:33,870
to make array at that capacity.

184

00:14:33,960  -->  00:14:36,080
Then it says for K range self-taught.

185

00:14:36,150  -->  00:14:44,250
And we basically re reference everything and a to b and then we set self-taught a equal to be again

186

00:14:44,490  -->  00:14:47,320
and we set the capacity equal to the new cap.

187

00:14:47,640  -->  00:14:53,430
And then finally this make array uses the c types library to make that raw array that we're referencing

188

00:14:53,760  -->  00:14:58,260
throughout the entire class of this dynamic array object.

189

00:14:58,260  -->  00:14:58,820
OK.

190

00:14:59,100  -->  00:15:00,350
So that's it.

191

00:15:00,570  -->  00:15:04,600
What I want you to do now as a little homework assignment is play around with it.

192

00:15:04,740  -->  00:15:07,270
And I want you to see how it all resizes.

193

00:15:07,470  -->  00:15:11,070
So try using the same system get size of.

194

00:15:11,070  -->  00:15:16,920
So if I jump over to the Jupiter note book try using this right here let me zoom in on it for you guys

195

00:15:16,940  -->  00:15:19,010
.

196

00:15:20,050  -->  00:15:27,210
This s y s that get size of as remember if in some previous lectures we use that to see how many bytes

197

00:15:27,210  -->  00:15:28,740
were actually being held.

198

00:15:28,740  -->  00:15:34,980
So go ahead and check the length of the array and then check the size of it and see how it changes and

199

00:15:34,980  -->  00:15:39,360
doubles as you add more elements and reach certain capacities.

200

00:15:39,360  -->  00:15:41,420
All right that's it for the lecture.

201

00:15:41,460  -->  00:15:45,530
I hope it was interesting for you to see our own implementation of a dynamic array.

202

00:15:45,760  -->  00:15:51,960
And remember the key takeaway is really this append the method here where we're checking the capacity

203

00:15:51,960  -->  00:15:58,620
and doubling if there isn't enough room and how are resizing the array by referencing a new array to

204

00:15:58,620  -->  00:16:03,350
all the existing values and then resetting a new array B.

205

00:16:03,780  -->  00:16:08,710
OK thanks everyone so much and I will see you at the next lecture.
