1

00:00:00,960  -->  00:00:05,850
Hello everyone and welcome to solution for the anagram problem and the sequence section of the Course

2

00:00:05,850  -->  00:00:06,490
.

3

00:00:06,720  -->  00:00:11,640
As always there's a full note book of the solution and it explains every step of the way as well as

4

00:00:11,640  -->  00:00:12,570
give you the code.

5

00:00:12,590  -->  00:00:14,700
We're going to go through this video.

6

00:00:15,060  -->  00:00:19,610
So to start off with there's two ways of thinking about this problem.

7

00:00:19,620  -->  00:00:26,490
First off if two strings have the same frequency of letters or elements meaning each letter shows up

8

00:00:26,490  -->  00:00:32,040
the same number of times in both strings then they are anagrams of each other on a similar vein of that

9

00:00:32,040  -->  00:00:32,710
logic.

10

00:00:32,850  -->  00:00:37,890
If two strings are equal to each other once they're sorted then they're are also anagrams of each other

11

00:00:37,890  -->  00:00:38,570
.

12

00:00:38,610  -->  00:00:44,080
So let's go ahead and implement the second solution first and it's the easier one of the two.

13

00:00:44,940  -->  00:00:45,600
So go ahead.

14

00:00:45,590  -->  00:00:46,260
Make her function.

15

00:00:46,260  -->  00:00:54,540
Anagram takes and two strings es one in S to and then we're going to do is just remove spaces and lowercase

16

00:00:54,540  -->  00:00:56,080
all the letters.

17

00:00:56,440  -->  00:01:02,490
So begin to say replace.

18

00:01:02,510  -->  00:01:09,240
And then what this replace method does it say method on a string and it says basically replace all whitespace

19

00:01:09,240  -->  00:01:10,150
right here.

20

00:01:10,410  -->  00:01:14,500
A single white space with no space and space between those single quotes.

21

00:01:14,730  -->  00:01:17,720
And after that I'm also going to lower it.

22

00:01:18,360  -->  00:01:25,370
So let's go ahead and copy this line and then just change it to two.

23

00:01:25,530  -->  00:01:28,130
So we're doing now just taking the strings.

24

00:01:28,140  -->  00:01:34,380
Both of them and reassigning them to remove all the whitespace and the lower case all the letters after

25

00:01:34,380  -->  00:01:34,970
we've done that.

26

00:01:34,980  -->  00:01:39,540
We can simply return a boolean for the sorted match so I can say return

27

00:01:42,760  -->  00:01:51,380
sorted S1 double equal sort in two.

28

00:01:51,390  -->  00:01:56,970
So all I'm doing right now is I'm just comparing the strings that we've replaced after we removed the

29

00:01:56,970  -->  00:01:58,790
spaces and lowercase letter.

30

00:01:58,790  -->  00:02:02,580
I'm saying if they're sorted and then they're equal to each other then we know they're anagrams of each

31

00:02:02,580  -->  00:02:03,110
other.

32

00:02:03,150  -->  00:02:05,720
So let's go ahead and test this out.

33

00:02:05,980  -->  00:02:06,930
You have anagram.

34

00:02:06,930  -->  00:02:14,190
Let's go passen God or whatever God and and say dog.

35

00:02:15,540  -->  00:02:16,490
And that's true.

36

00:02:16,650  -->  00:02:18,210
Let's go ahead and passen

37

00:02:21,210  -->  00:02:30,060
let's say Clint Eastwood the example from the problem the book Clint Eastwood.

38

00:02:30,420  -->  00:02:35,370
And we'll do Old West action so notice are different amount of spaces.

39

00:02:35,370  -->  00:02:37,080
The first one has one space.

40

00:02:37,080  -->  00:02:42,660
The second one has two spaces but that won't matter because we've had this replace method in there and

41

00:02:42,660  -->  00:02:44,150
if we run that that's true.

42

00:02:44,280  -->  00:02:47,000
Another letter and it becomes false.

43

00:02:47,040  -->  00:02:49,930
So we know the solutions are working great.

44

00:02:50,110  -->  00:02:55,310
So the this sorting method is actually really quite simple but it's not the optimal way.

45

00:02:55,410  -->  00:03:00,510
And in an interview setting you're probably going to be asked to implement a more manual solution involving

46

00:03:00,510  -->  00:03:05,370
just counting the number of letters and its string to test your ability to understand hash tables which

47

00:03:05,370  -->  00:03:07,660
we go over later on in this course.

48

00:03:07,770  -->  00:03:13,260
So we're going to do is build out of fooler solution using counting and Python dictionaries.

49

00:03:13,770  -->  00:03:20,420
So let's go ahead and call this anagram 2.

50

00:03:21,210  -->  00:03:22,230
We're going to do the same thing.

51

00:03:22,230  -->  00:03:27,600
Start off with Ripp move the spaces in lowercase the letters and then we're going to start off with

52

00:03:27,990  -->  00:03:32,660
an edge case checks I'm going to say edge case check as a comment.

53

00:03:33,000  -->  00:03:37,770
But I wanted to check if they have the same number of letters with both strings don't have the same

54

00:03:37,770  -->  00:03:40,920
number of letters we can immediately say it's false.

55

00:03:40,930  -->  00:03:42,380
That's not an anagram.

56

00:03:42,480  -->  00:03:46,150
So they need to have at least equal matching number of letters.

57

00:03:47,130  -->  00:03:56,080
So I can do this by saying if the length of S1 doesn't equal the length of s to return false.

58

00:03:56,730  -->  00:03:57,450
OK.

59

00:03:57,450  -->  00:03:59,670
So let's go ahead and continue on.

60

00:03:59,670  -->  00:04:04,980
Next up we're going to create a counting dictionary so we could use a default dict from the collections

61

00:04:04,980  -->  00:04:09,410
module but so that we don't use any special modules in Python.

62

00:04:09,570  -->  00:04:11,830
We're just going to use a straight up dictionary.

63

00:04:12,000  -->  00:04:14,010
Call it count.

64

00:04:14,040  -->  00:04:18,570
So we're basically just going to count the frequency of each letter parents and then check that all

65

00:04:18,570  -->  00:04:20,170
the counts of the same.

66

00:04:20,190  -->  00:04:26,070
So we're going to do is fill the first dictionary with the first string and then fill a dictionary again

67

00:04:26,070  -->  00:04:28,920
for the second string but subtract counts.

68

00:04:28,920  -->  00:04:31,750
So the first time around we're going to add accounts for each letter.

69

00:04:31,950  -->  00:04:35,520
Second time around we're going to subtract counts and then if we check the all the counts are equal

70

00:04:35,520  -->  00:04:36,340
to zero.

71

00:04:36,390  -->  00:04:37,860
We know there anagrams.

72

00:04:37,950  -->  00:04:41,250
So let's go ahead and call this out.

73

00:04:41,850  -->  00:04:43,350
So it's a little bit clear.

74

00:04:43,440  -->  00:04:50,160
So I'm going to say for every letter in s one that string if letter in count

75

00:04:52,980  -->  00:05:04,370
then I'm going to say count letter of that key plus one else count letter equals 1.

76

00:05:04,950  -->  00:05:06,780
OK so what is this doing here.

77

00:05:06,930  -->  00:05:13,620
I'm saying for every letter in that first strain if the letter is already in my dictionary then add

78

00:05:13,710  -->  00:05:18,040
1 to that key that letter killer.

79

00:05:18,060  -->  00:05:20,550
So as we go along let's say it's Clint Eastwood.

80

00:05:20,550  -->  00:05:24,850
So I see C that I say if letters and count.

81

00:05:24,930  -->  00:05:30,240
Well actually see since the first letter as we go along the string is not going to be in count yet.

82

00:05:30,240  -->  00:05:33,140
So we're going to say else that's where I set this.

83

00:05:33,180  -->  00:05:35,730
I said count of that letter which happens to be c.

84

00:05:36,030  -->  00:05:43,350
So at that key C we're going to set it equal to 1 and then we're going to basically do the reverse for

85

00:05:43,350  -->  00:05:50,790
the second string and say four letter in s two if letter in counts

86

00:05:53,400  -->  00:05:54,460
counts.

87

00:05:54,490  -->  00:05:57,210
What're you going to say minus one

88

00:06:00,480  -->  00:06:08,530
else count letter is equal 1.

89

00:06:09,420  -->  00:06:12,990
And I would just want to check that all the counts are 0.

90

00:06:12,990  -->  00:06:18,010
So for Cain counts it counts of k.

91

00:06:18,550  -->  00:06:19,160
It's.

92

00:06:19,220  -->  00:06:20,600
Zoom down a little bit.

93

00:06:20,910  -->  00:06:24,730
If count of k is not equal to zero.

94

00:06:25,350  -->  00:06:28,890
I'm going to return calls.

95

00:06:29,420  -->  00:06:32,620
Otherwise they're anagrams so I can just say return true.

96

00:06:32,700  -->  00:06:34,410
Outside of that for loop.

97

00:06:34,600  -->  00:06:38,060
So let's go ahead to make sure this solution works.

98

00:06:38,090  -->  00:06:41,050
What's that.

99

00:06:41,250  -->  00:06:46,330
OK so if I call this anagram 2 then you run it still false.

100

00:06:46,330  -->  00:06:47,210
That's good.

101

00:06:47,220  -->  00:06:48,520
Let's see if it works here.

102

00:06:48,720  -->  00:06:49,740
And it's true.

103

00:06:49,740  -->  00:06:50,700
Great.

104

00:06:50,760  -->  00:06:53,160
So quick now on this second solution.

105

00:06:53,160  -->  00:06:58,200
Again the use of a default dict form from the collections module in Python would clean up this code

106

00:06:58,650  -->  00:07:01,170
quite a bit by not having to do these checks.

107

00:07:01,470  -->  00:07:06,520
But the thing is we don't want to use things that might only be specific to Python.

108

00:07:06,750  -->  00:07:10,170
So make sure to count every step.

109

00:07:10,170  -->  00:07:12,160
One other thing that might clean up this code.

110

00:07:12,240  -->  00:07:18,010
You could technically put this into the second for loop and build it in.

111

00:07:18,020  -->  00:07:21,980
But I quite like this solution because it's really clear what we're doing here.

112

00:07:21,990  -->  00:07:24,450
So again let's just go over each of the steps.

113

00:07:24,480  -->  00:07:28,570
This is should be your preferred solution if you get asked this in an interview setting.

114

00:07:28,610  -->  00:07:30,830
So check if their anagrams or not.

115

00:07:30,840  -->  00:07:36,420
First off we clean up the strings lowercase all the letters remove any whitespace.

116

00:07:36,580  -->  00:07:37,410
Great.

117

00:07:37,440  -->  00:07:39,150
We do an edge case check.

118

00:07:39,450  -->  00:07:41,980
So this would quickly tell us of our anagrams or not.

119

00:07:42,090  -->  00:07:46,310
So we do if length of us one isn't equal to length to return false.

120

00:07:46,470  -->  00:07:49,700
Otherwise we have a possibility of an anagram.

121

00:07:49,740  -->  00:07:54,010
So moving along we create a dictionary called Count.

122

00:07:54,240  -->  00:07:59,680
Then for every letter in that first string it's the letters already in our counting dictionary.

123

00:07:59,730  -->  00:08:05,270
We're just going to say count at that letter so that key add 1 to that count.

124

00:08:05,280  -->  00:08:11,920
Otherwise set it equal to 1 for letter in S 2 which is that second string do the same thing.

125

00:08:11,940  -->  00:08:13,630
But now we're going to be subtracting.

126

00:08:13,710  -->  00:08:19,430
So if letter counts then we're going to subtract 1 from it else that counts.

127

00:08:19,440  -->  00:08:21,210
That letter is equal to 1.

128

00:08:21,210  -->  00:08:22,860
And this is the setting right here.

129

00:08:23,040  -->  00:08:26,490
That's basically going to trip up this third for loop.

130

00:08:26,520  -->  00:08:28,160
In case it's not an anagram.

131

00:08:28,350  -->  00:08:31,240
That's why this is again a positive equal to 1.

132

00:08:31,410  -->  00:08:33,650
So this is what's going to be going off.

133

00:08:34,050  -->  00:08:42,240
If this is not an anagram along with this as well so then it says for counts if count of k is not equal

134

00:08:42,240  -->  00:08:44,490
to zero return false.

135

00:08:44,490  -->  00:08:51,110
So if it's an anagram then this line should have occurred as many times as this line.

136

00:08:51,120  -->  00:08:52,110
All right.

137

00:08:52,110  -->  00:08:54,870
Hopefully understand should've been pretty straightforward.

138

00:08:54,870  -->  00:08:56,430
Go ahead and code this out.

139

00:08:56,430  -->  00:08:59,810
The tricky part to this question actually is having to do this by hand.

140

00:09:00,030  -->  00:09:01,350
It's a lot tougher.

141

00:09:01,410  -->  00:09:07,170
So I recommend that you go ahead and take out a pen and paper or a white board and cut out the solution

142

00:09:07,230  -->  00:09:08,820
by hand.

143

00:09:08,850  -->  00:09:09,580
All right.

144

00:09:09,630  -->  00:09:10,650
With that being said.

145

00:09:10,920  -->  00:09:11,690
Thanks everyone.

146

00:09:11,730  -->  00:09:12,870
And I'll see you at the next lecture
