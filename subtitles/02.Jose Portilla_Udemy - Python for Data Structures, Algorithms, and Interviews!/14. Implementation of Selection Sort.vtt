WEBVTT
1

00:00:00.390  -->  00:00:05.190
Hello everyone and welcome to the lecture for implementation of selection's sort.

2

00:00:05.190  -->  00:00:10.230
So let's get a brief overview again of what selection sort is the selection sort.

3

00:00:10.230  -->  00:00:16.200
Improves on the bubble sort by making only one exchange for every pass through the list in order to

4

00:00:16.200  -->  00:00:17.500
do this for the selection.

5

00:00:17.510  -->  00:00:24.250
So it's going to do is look for the largest value as it makes a pass and after completing the pass placing

6

00:00:24.260  -->  00:00:30.240
it in its proper location as if a bubble sort after the first pass the large item is in the correct

7

00:00:30.240  -->  00:00:32.400
place after the second pass.

8

00:00:32.430  -->  00:00:34.790
The next largest is in that place.

9

00:00:34.830  -->  00:00:40.560
So this process continues and requires and minus one passes to sort and items since that final item

10

00:00:40.560  -->  00:00:44.790
is actually going to be in place after you do the end minus one passes.

11

00:00:44.790  -->  00:00:48.620
So let's go ahead and see how we can implement this.

12

00:00:48.630  -->  00:00:55.050
Our own selection sort function in python you have resources for review in The Notebook as well as the

13

00:00:55.050  -->  00:00:56.250
code itself.

14

00:00:56.250  -->  00:00:59.690
So let's go ahead and check it out.

15

00:00:59.910  -->  00:01:01.450
So I jumped to a new notebook.

16

00:01:01.450  -->  00:01:11.160
I'm going to say start off my function and say the earth selection underscores sorts with passen summer

17

00:01:11.170  -->  00:01:11.510
rain.

18

00:01:11.520  -->  00:01:13.320
In this case it's going to be a python list.

19

00:01:13.340  -->  00:01:14.750
A R.

20

00:01:15.060  -->  00:01:20.040
So for every slot in the array remember we're talking about fill slots and slots in the theory lecture

21

00:01:20.040  -->  00:01:20.970
.

22

00:01:20.970  -->  00:01:26.520
I'm going to say fill slots in range and we're going to do the exact same thing we did for the bubble

23

00:01:26.520  -->  00:01:27.290
sort.

24

00:01:27.490  -->  00:01:30.090
That's for selecting that range.

25

00:01:30.090  -->  00:01:32.990
So it looks something like this.

26

00:01:33.830  -->  00:01:37.240
And it basically helps you index in a reverse manner.

27

00:01:37.840  -->  00:01:39.360
And remember this selection sort.

28

00:01:39.380  -->  00:01:41.800
Now we're keeping track of the math.

29

00:01:41.800  -->  00:01:46.050
So what I'm going to do is make a variable called position of Max

30

00:01:51.790  -->  00:01:56.360
and I get a set at equal to zero so that it's at the first index essentially.

31

00:01:56.850  -->  00:02:01.020
And then I'm going to say for every set of 0 to that fill slot plus 1.

32

00:02:01.020  -->  00:02:14.060
So in this case 4 in I'll say location in range one to fill slots plus one.

33

00:02:14.160  -->  00:02:18.340
And the reason we're starting at one here is because we already have the position of Max at zero.

34

00:02:18.720  -->  00:02:21.240
So let's go in and set the maximums location.

35

00:02:21.240  -->  00:02:29.970
So when I say if at that location of the array if it's greater than at the position of Max

36

00:02:34.410  -->  00:02:43.570
go ahead and basically reset that position of max 2 position of Max is equal to location.

37

00:02:44.610  -->  00:02:45.330
OK.

38

00:02:45.660  -->  00:02:50.200
And then for the switching We were actually going to do is do it in relation to this for loop.

39

00:02:50.490  -->  00:03:00.210
So I'm going to say 10 equals fill slots so this is really similar to what we're doing in the bubble

40

00:03:00.270  -->  00:03:01.620
sort.

41

00:03:01.980  -->  00:03:03.630
And then said fill slots

42

00:03:06.630  -->  00:03:11.280
equal to position of Max at the index.

43

00:03:11.280  -->  00:03:16.650
And then I to say array at the position of Max equals temp.

44

00:03:16.650  -->  00:03:19.280
So this is essentially just a switch here.

45

00:03:19.860  -->  00:03:23.710
OK let's go ahead and run this and make sure it all works out.

46

00:03:23.790  -->  00:03:25.630
So it's good to make an array.

47

00:03:26.180  -->  00:03:32.130
Just make a random rail say five eighths three 10 and one.

48

00:03:32.130  -->  00:03:39.260
So clearly it's not sorted and we're going to do is call selection's sorts on that Ira.

49

00:03:39.660  -->  00:03:44.550
Go ahead and show the array and notice that I have to ask for this show here because I don't have a

50

00:03:44.550  -->  00:03:47.250
return statement in the sexual function.

51

00:03:47.970  -->  00:03:50.130
So let's go ahead and see it.

52

00:03:50.130  -->  00:03:50.820
All right great.

53

00:03:50.820  -->  00:03:53.240
So sorted out so we know our function is working.

54

00:03:53.490  -->  00:03:56.260
Let's go ahead and walk through it one more time.

55

00:03:56.280  -->  00:04:02.880
So what I'm saying is for every fill slot in range length with the array minus one in a negative step

56

00:04:02.880  -->  00:04:03.300
fashion.

57

00:04:03.300  -->  00:04:05.750
So let's go in make sure we understand this.

58

00:04:05.790  -->  00:04:08.370
So I mean we could show that one more time.

59

00:04:08.400  -->  00:04:11.280
So here we have an array of five elements.

60

00:04:11.280  -->  00:04:16.740
So what this range does as far as indexing is go for three to one essentially backwards through that

61

00:04:16.740  -->  00:04:17.130
array.

62

00:04:17.160  -->  00:04:18.240
Right.

63

00:04:18.240  -->  00:04:21.200
So then I'm saying position of Max equals zero.

64

00:04:21.330  -->  00:04:27.870
And then for the location index in range from 1 to 2 already considering position of Mexico zero all

65

00:04:27.870  -->  00:04:30.540
the way to that fill slot plus 1.

66

00:04:30.540  -->  00:04:34.040
So for instance the first one is going to be up to 1 to 5.

67

00:04:34.110  -->  00:04:41.850
I'll say if at that location that element of the array is greater than at the position of the max reset

68

00:04:41.940  -->  00:04:44.670
the position of Max location.

69

00:04:44.670  -->  00:04:49.620
Once that's done if that we have that is true we'll go ahead and start doing the switch.

70

00:04:49.620  -->  00:04:55.650
So say a temporary variable is equal to that the fill slot location than fill slot location element

71

00:04:56.160  -->  00:04:58.680
equals the element at the position of Max.

72

00:04:58.830  -->  00:05:04.080
And then I reset the position of max index elements to the temporary elements.

73

00:05:04.110  -->  00:05:05.010
OK.

74

00:05:05.070  -->  00:05:06.530
So that's all there is to it.

75

00:05:06.570  -->  00:05:11.550
You can go ahead and check up the note book for explanations and resources for explanations.

76

00:05:11.550  -->  00:05:16.190
There's the Wikipedia link and visualizing the algorithm explanations as well some pseudo code.

77

00:05:16.650  -->  00:05:20.760
Singlehood Cheka also the real code that we just went over as well as some comments there.

78

00:05:21.090  -->  00:05:22.320
And that's basically it.

79

00:05:22.620  -->  00:05:25.680
OK thanks everyone and I will see you at the next lecture
