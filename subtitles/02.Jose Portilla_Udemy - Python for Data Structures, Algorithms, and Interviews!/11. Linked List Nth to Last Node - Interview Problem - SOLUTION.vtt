WEBVTT
1

00:00:01.590  -->  00:00:06.840
Hello everyone and welcome to the linked list and to last node solution.

2

00:00:07.470  -->  00:00:13.650
OK your problem statement was to write a function that takes a head node and an integer value N and

3

00:00:13.650  -->  00:00:17.400
then returns the nth to last node in the linked list.

4

00:00:17.400  -->  00:00:24.030
So for example if you're given a class of no that looks something like this as we've seen before and

5

00:00:24.030  -->  00:00:31.830
you were creating a singly linked list A B C D E with values 1 2 3 4 5 and then you assigned it like

6

00:00:31.830  -->  00:00:40.870
this so it's all in order then your function taking in a value and the head node would then return that

7

00:00:41.210  -->  00:00:42.310
to last node.

8

00:00:42.570  -->  00:00:49.260
In this case 2 which means second to last and that would return the full value of 4.

9

00:00:49.260  -->  00:00:52.680
So if we went ahead and check that out there it is.

10

00:00:52.890  -->  00:00:59.520
All right so now let's go over the solution to this before we actually dive into this code below.

11

00:00:59.760  -->  00:01:02.940
The solution goes a little something like this.

12

00:01:02.970  -->  00:01:08.610
Imagine you have a bunch of notes and they block which is anodes wide.

13

00:01:09.150  -->  00:01:12.580
We can walk this block all the way down the list.

14

00:01:12.720  -->  00:01:17.760
And once the front of the block reached the end then the other end of the block would actually be at

15

00:01:17.760  -->  00:01:19.460
the end node.

16

00:01:19.830  -->  00:01:25.650
So implement this block we would just have to have two pointers left and right pair of pointers.

17

00:01:25.860  -->  00:01:29.490
Again you have a bunch of nodes in a basically a straight line.

18

00:01:29.490  -->  00:01:31.530
We're not worrying about cycles here.

19

00:01:31.530  -->  00:01:37.380
And then you have a block which is and nodes wide which is going to be dictated by this input argument

20

00:01:37.390  -->  00:01:37.660
.

21

00:01:37.950  -->  00:01:44.160
So when you keep moving or walking down this block which is nodes wide all the way until it reaches

22

00:01:44.250  -->  00:01:49.140
the end meaning that the other end of the block would be at the end node.

23

00:01:49.440  -->  00:01:54.780
And we're going to implement this block as just two pointers are left and right pair of pointers.

24

00:01:54.960  -->  00:01:57.220
So we're going to mark up the steps we need to take.

25

00:01:57.330  -->  00:02:00.850
We walk one pointer and nodes from the head.

26

00:02:01.100  -->  00:02:03.390
And that's going to be the right point.

27

00:02:03.450  -->  00:02:09.430
Put the other pointer at the head and this will be the left point we walk or traverse through a length

28

00:02:09.440  -->  00:02:16.380
list and that block as it's being walked symbole both those pointers towards the tail and the de-link

29

00:02:16.380  -->  00:02:17.010
list.

30

00:02:17.250  -->  00:02:20.990
One note at a time we keep a distance n between them.

31

00:02:21.450  -->  00:02:27.570
So they start off separated both pointers essentially making that block of nodes and we keep moving

32

00:02:27.570  -->  00:02:30.780
them one note at a time in sync together.

33

00:02:30.780  -->  00:02:36.570
And once that right point has hit the tail given that we're moving in sync we know that the left point

34

00:02:36.690  -->  00:02:38.020
is at the target.

35

00:02:38.600  -->  00:02:44.880
OK let's go and implement this so we make sure it's really clear.

36

00:02:44.880  -->  00:02:52.770
First thing I'm going to go ahead and do say DPF and I would just say nth to last node.

37

00:02:53.130  -->  00:02:56.190
We taken that end value and then that head node

38

00:02:59.470  -->  00:03:03.400
they're going to make two variables that left pointer and that right pointer.

39

00:03:03.840  -->  00:03:09.610
And these are going to define that essentially that block that's moving along our length list.

40

00:03:09.600  -->  00:03:17.220
So have a rights underscore pointer as well that starts off as that had node.

41

00:03:17.220  -->  00:03:22.600
So we are going to set the right pointer and nodes away from the head.

42

00:03:22.620  -->  00:03:31.670
So in a safe for I in all say x range fusing Python 3 that's just range difference between them as once

43

00:03:31.670  -->  00:03:32.540
a generator ones.

44

00:03:32.560  -->  00:03:33.810
Nah.

45

00:03:34.830  -->  00:03:44.430
We can check for edge case in case we don't have enough nodes so will say if not right pointer the next

46

00:03:44.550  -->  00:03:45.930
node.

47

00:03:46.920  -->  00:03:54.050
And this basically means that we just didn't have enough nodes all raise an error in this case will

48

00:03:54.060  -->  00:03:59.370
actually just raise a lookup error and I'll say

49

00:04:02.460  -->  00:04:08.690
error and is larger than the linked list.

50

00:04:08.730  -->  00:04:13.530
So it is good to think about edge cases as you're programming your interviewer will definitely be checking

51

00:04:13.530  -->  00:04:17.240
out for those and see how aware you are about edge cases.

52

00:04:17.400  -->  00:04:19.250
Again they're not your primary concern.

53

00:04:19.290  -->  00:04:24.810
She should always be coding stuff out and a common strategy is to code out the basic solution and then

54

00:04:24.810  -->  00:04:26.520
think about edge cases verbal.

55

00:04:26.580  -->  00:04:30.700
Along with your interviewer this case this was a pretty obvious one.

56

00:04:30.840  -->  00:04:33.050
So I just put it in right now.

57

00:04:33.060  -->  00:04:33.720
All right.

58

00:04:33.960  -->  00:04:42.930
So if we're not receiving an edge case and we do have enough notes I'll just say writes pointer is equal

59

00:04:42.930  -->  00:04:48.840
to right pointer dots next node.

60

00:04:49.920  -->  00:04:50.240
OK.

61

00:04:50.250  -->  00:04:54.900
Essentially that block in the left and right pointer are now set up the left one starts at the head

62

00:04:55.200  -->  00:04:59.730
and the right pointer has now moved and nodes away from the head.

63

00:04:59.970  -->  00:05:04.980
And we're going to move that block those two pairs of pointers left pointer and right pointer down the

64

00:05:04.980  -->  00:05:06.920
length list.

65

00:05:07.410  -->  00:05:17.550
We're going to use a while loop to do this in a a while writes underscore pointer dot next node essentially

66

00:05:17.550  -->  00:05:20.440
means while it hasn't reached the animal it's not none.

67

00:05:20.670  -->  00:05:26.760
Which is why I'm able to do these if not right pointer and next node while right point turn next node

68

00:05:26.760  -->  00:05:27.260
.

69

00:05:27.360  -->  00:05:32.400
So I'm not putting in the comparison operations because I know that this values essentially are going

70

00:05:32.400  -->  00:05:33.390
to be none.

71

00:05:33.390  -->  00:05:35.730
Eventually meaning it's reached that tail.

72

00:05:35.970  -->  00:05:40.530
That's why I'm able to not have to do any comparisons with that if in a while statement.

73

00:05:40.590  -->  00:05:47.500
So I'm basically saying if not none are while basically it actually still exists and is not unknown

74

00:05:47.510  -->  00:05:48.500
.

75

00:05:48.790  -->  00:05:51.340
So all that still going on we have reached the end yet.

76

00:05:51.690  -->  00:06:00.540
I'll say the left pointer is just equal to left pointer the next node.

77

00:06:02.070  -->  00:06:10.760
And then I'll say right pointer Ziegel to right pointer dot next node.

78

00:06:10.860  -->  00:06:13.980
So that's just moving them along together in sync.

79

00:06:14.040  -->  00:06:18.930
And now we just returned the left pointer because this is going to keep executing until you've reached

80

00:06:18.930  -->  00:06:19.800
the end.

81

00:06:19.800  -->  00:06:25.710
So once that's done finishing executing we just say return left pointer that's going to be at the end

82

00:06:25.710  -->  00:06:27.680
of the last node.

83

00:06:28.620  -->  00:06:30.330
Okay that's all there is to it.

84

00:06:30.330  -->  00:06:33.930
So let's make sure we run it and it all works out.

85

00:06:34.130  -->  00:06:40.730
Going ahead and copy that test cell and let's run this in all test cases pass.

86

00:06:40.860  -->  00:06:42.230
Excellent.

87

00:06:42.240  -->  00:06:42.540
All right.

88

00:06:42.540  -->  00:06:47.810
Let's go real quickly line by line and make sure we fully understand what's going on here.

89

00:06:47.850  -->  00:06:53.820
I'm trying to find the nth to last node in this in the linked list and my basic strategy is going to

90

00:06:53.820  -->  00:07:01.530
have a left pointer at the head and then have a right pointer that starts off and nodes away from left

91

00:07:01.800  -->  00:07:03.910
essentially end nodes down the list.

92

00:07:03.930  -->  00:07:10.320
So we have a block of nodes between left and right that are going to keep moving them along together

93

00:07:10.410  -->  00:07:17.280
in sync with each other until the rights coiner that right and that block has reached the final node

94

00:07:17.640  -->  00:07:24.060
meaning while this is actually still true in some fashion and it's not none after all that we've reached

95

00:07:24.060  -->  00:07:30.530
the last node with the right pointer then we know that the left pointer is at the correct node.

96

00:07:30.810  -->  00:07:35.610
It's the nth to last node in that length list and that's all there is to it.

97

00:07:36.150  -->  00:07:37.140
OK.

98

00:07:37.140  -->  00:07:39.660
Go ahead and code this out yourself.

99

00:07:39.660  -->  00:07:41.280
Make sure you understand it.

100

00:07:41.280  -->  00:07:43.800
Make sure I understand the logic of those two pair of pointers.

101

00:07:43.800  -->  00:07:47.710
Moving down is a pretty common interview question when it comes to linked lists.

102

00:07:47.730  -->  00:07:49.080
They should definitely know it.

103

00:07:49.260  -->  00:07:50.850
All right thanks everyone.

104

00:07:50.850  -->  00:07:52.500
I'll see you at the next lecture
