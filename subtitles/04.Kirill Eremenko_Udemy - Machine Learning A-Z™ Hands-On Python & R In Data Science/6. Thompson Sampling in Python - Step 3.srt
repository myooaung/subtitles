1
00:00:00,270 --> 00:00:01,140
Hello my friends.

2
00:00:01,140 --> 00:00:04,260
Welcome back to this implementation of tonnes and sampling.

3
00:00:04,260 --> 00:00:08,800
So at the end of the previous editorial I asked you to implement by yourself.

4
00:00:08,880 --> 00:00:13,920
Well Step three Now that step one and step two are well implemented.

5
00:00:13,920 --> 00:00:20,190
And so you exercise in is Step three was to indeed figure out the trick to select the ad that has the

6
00:00:20,190 --> 00:00:26,610
highest random drop among all these random draws taken from the different better distributions for each

7
00:00:26,610 --> 00:00:27,210
of the ads.

8
00:00:27,600 --> 00:00:29,170
So I hope that you tried.

9
00:00:29,190 --> 00:00:33,290
Congratulations that you succeeded and even Congratulations if you only tried.

10
00:00:33,300 --> 00:00:36,930
What matters is that you know you practice and no worries.

11
00:00:36,930 --> 00:00:39,060
Now we're going to implement a solution together.

12
00:00:39,210 --> 00:00:40,350
So let's do this.

13
00:00:40,350 --> 00:00:45,180
So the first question I have for you is do we have to stay in this second for loop.

14
00:00:45,180 --> 00:00:46,520
Well yes of course.

15
00:00:46,590 --> 00:00:53,540
Because that trick to keep in memory the maximum of the run draws has to be done through all this.

16
00:00:53,550 --> 00:00:59,130
Second full loop you know iterating through the ads and it's only until we get the final random draw

17
00:00:59,220 --> 00:01:01,860
that we can know which one is the maximum.

18
00:01:01,860 --> 00:01:08,400
So of course we stay inside as full loop and Well very simply since you know we have this random beta

19
00:01:08,400 --> 00:01:15,000
here which is indeed the random draw from the beta distribution of the ad ie we are dealing with right

20
00:01:15,000 --> 00:01:15,650
now.

21
00:01:15,690 --> 00:01:23,580
Well what we have to do now is naturally to compare this random draw to Max random the maximum the run

22
00:01:23,580 --> 00:01:28,950
draw which OK so far is initialized to 0 you know at the beginning of the for loop but then of course

23
00:01:28,950 --> 00:01:36,720
you get that we will update that value of Max random to the new random beta if the new random beta is

24
00:01:36,840 --> 00:01:42,960
higher than the maximum and therefore you know over the iterations of this second loop iterating through

25
00:01:42,960 --> 00:01:50,640
the ad well Max random will be updated each time we get a random beta that is higher than the previous

26
00:01:50,730 --> 00:01:54,540
random beta meaning that is higher than this Max random parameter.

27
00:01:54,630 --> 00:02:00,900
So that's exactly the same trick as before you know with the UCB algorithm when we were updating that

28
00:02:00,960 --> 00:02:05,820
maximum of the upper confidence bound at each iteration of that second for loop.

29
00:02:05,820 --> 00:02:07,560
So here it's exactly the same.

30
00:02:07,560 --> 00:02:09,640
And therefore you know what is the next step.

31
00:02:09,660 --> 00:02:12,540
Now next step I'm going to scroll down a bit.

32
00:02:12,540 --> 00:02:21,000
The next step now is to start of course with an if condition and if condition which will check if well

33
00:02:21,220 --> 00:02:22,870
that random draw.

34
00:02:22,870 --> 00:02:28,600
You know this random beta variable here is higher than this maximum random draw.

35
00:02:28,680 --> 00:02:34,500
And if it is the case then inside this if condition we will say that this maximum random draw has to

36
00:02:34,500 --> 00:02:37,670
be updated to become the new random beta.

37
00:02:37,710 --> 00:02:38,880
That was just higher.

38
00:02:38,880 --> 00:02:39,520
OK.

39
00:02:39,540 --> 00:02:45,420
And at the same time we will select the add of index I inside the same if condition.

40
00:02:45,420 --> 00:02:51,420
Because anyway if we get a new higher random beta Well this ad will be updated as well.

41
00:02:51,420 --> 00:02:52,490
OK so I'll show you.

42
00:02:52,810 --> 00:02:54,280
Let's first write this.

43
00:02:54,280 --> 00:02:55,030
If condition.

44
00:02:55,050 --> 00:03:02,240
So if random underscore beta is larger than Max random.

45
00:03:02,520 --> 00:03:05,350
All right then Collin and inside.

46
00:03:05,370 --> 00:03:11,250
Well what do we do we of course update the value of Max random you know the maximum of the random draws

47
00:03:11,700 --> 00:03:20,760
to become that new random beta which is indeed higher than the maximum random draw collected so far.

48
00:03:20,760 --> 00:03:26,700
And then as we said well if that's the case you know if the ad I return with right now has a random

49
00:03:26,700 --> 00:03:29,430
beta that is higher than the max random draw.

50
00:03:29,670 --> 00:03:34,540
Well we can select this ad to become this index.

51
00:03:34,770 --> 00:03:35,490
All right.

52
00:03:35,610 --> 00:03:38,820
So let's simulate you know the first iterations of this loop.

53
00:03:38,940 --> 00:03:41,230
First Max random is equal to zero.

54
00:03:41,290 --> 00:03:43,330
Then I begins at zero.

55
00:03:43,390 --> 00:03:46,880
So first we're dealing indeed with the first ad of index zero.

56
00:03:46,920 --> 00:03:52,150
We compute the random draw from the beta distribution of this first at zero.

57
00:03:52,230 --> 00:03:55,120
Then of course random beta will be larger than Max random.

58
00:03:55,140 --> 00:04:01,230
So Max random will be updated to become the value of that random drug the first ad and we will select

59
00:04:01,230 --> 00:04:04,420
that first ad then I will be equal to one.

60
00:04:04,470 --> 00:04:10,380
You know the index one meaning the index of the second ad then we will take the random draw from the

61
00:04:10,380 --> 00:04:13,380
beta distribution of this second ad of index 1.

62
00:04:13,500 --> 00:04:20,100
If this random draw is higher than Max random which is equal to the random draw of the previous ad then

63
00:04:20,190 --> 00:04:26,880
we will update Max random to become this new random draw of this new ad and we will select this new

64
00:04:26,880 --> 00:04:33,870
ad to become the ad selected and otherwise if you know this new random draw from this new ad is not

65
00:04:33,960 --> 00:04:39,540
larger than Max random then we will do nothing and we will just keep the previous ad and the produce

66
00:04:39,540 --> 00:04:45,480
Max random and we repeat this you know through the iterations of this second for loop up to the last

67
00:04:45,540 --> 00:04:51,280
ad you know the ad of index 9 and successively will Max random will be updated if needed you know if

68
00:04:51,320 --> 00:04:56,960
the random draw is larger than the maximum random draw and we will select the right ad accordingly.

69
00:04:57,090 --> 00:04:57,620
OK.

70
00:04:57,690 --> 00:04:58,940
So very easy trick.

71
00:04:58,950 --> 00:05:05,190
And you know that's a classic in Python to get the maximum of a list through a for loop so it's really

72
00:05:05,190 --> 00:05:10,170
good that you know this trick and it's really good that you did it twice once with UCB to compute the

73
00:05:10,170 --> 00:05:15,840
maximum of the upper confidence bounds and with Dunson something to compute the maximum of the random

74
00:05:15,840 --> 00:05:16,540
draws.

75
00:05:16,540 --> 00:05:22,590
So now you're all set with getting maximum techniques and therefore time to move on to the next step.

76
00:05:22,590 --> 00:05:26,070
Now by the way congratulations if you got this right.

77
00:05:26,070 --> 00:05:30,540
I know it's not that easy the first time but you know by just repeating this over time it will become

78
00:05:30,540 --> 00:05:31,720
so good at this.

79
00:05:31,800 --> 00:05:35,460
And now what according to you will be the next step here.

80
00:05:35,460 --> 00:05:39,390
Well I imagine some of you are wondering if we need to do one else here.

81
00:05:39,540 --> 00:05:45,320
And the answer to that is no we don't need to do an else because if this condition is not true.

82
00:05:45,600 --> 00:05:51,880
Well we'll just keep the last ad that had this maximum random draw so no need to do an else here.

83
00:05:51,930 --> 00:05:52,740
And in fact.

84
00:05:52,740 --> 00:05:57,100
Well the second for loop is done because it gives us exactly what we want.

85
00:05:57,120 --> 00:06:03,530
It gives us the ad that has the maximum random draw among all the ads from zero to 9.

86
00:06:03,690 --> 00:06:10,530
And therefore that's why I got out of this second full loop and I got back into this first for loop

87
00:06:10,990 --> 00:06:13,880
you know right here I am at this level now.

88
00:06:13,920 --> 00:06:14,310
Right.

89
00:06:14,310 --> 00:06:14,700
OK.

90
00:06:14,910 --> 00:06:16,380
So there we go.

91
00:06:16,380 --> 00:06:22,230
Now we just need to finish this implementation because basically you know step one step two and step

92
00:06:22,230 --> 00:06:23,460
three are done.

93
00:06:23,460 --> 00:06:28,950
I know it's a little bit easier than the UCB algorithm but you're going to see that Indian end the result

94
00:06:29,070 --> 00:06:30,370
might be even better.

95
00:06:30,390 --> 00:06:34,620
I won't tell you exactly if it's gonna be the case but you're going to see we're going to have a good

96
00:06:34,620 --> 00:06:36,000
surprise for the end.

97
00:06:36,190 --> 00:06:36,660
Okay.

98
00:06:36,720 --> 00:06:38,880
So now let's finish this implementation.

99
00:06:38,880 --> 00:06:42,720
Basically we just need to you know update the different variables we have here.

100
00:06:42,720 --> 00:06:49,380
You know we need to update exactly these four variables at selected numbers of rewards one numbers of

101
00:06:49,380 --> 00:06:51,480
rewards zero and total reward.

102
00:06:51,480 --> 00:06:54,940
So I suggest we start by updating at selected.

103
00:06:55,050 --> 00:06:58,590
So I'm going to copy this actually will be simpler.

104
00:06:58,590 --> 00:07:05,160
And then right here you know make sure to be at the right level at the level of this first for loop

105
00:07:05,220 --> 00:07:07,200
you know for and in range zeros.

106
00:07:07,350 --> 00:07:12,930
And now I'm gonna place that at selected variable and so now over to you according to what do we need

107
00:07:12,930 --> 00:07:13,470
to do here.

108
00:07:13,470 --> 00:07:16,770
How do we need to update that at selected variable.

109
00:07:16,770 --> 00:07:24,510
Well exactly the same as in UCB of course since this variable corresponds to the full list of the ads

110
00:07:24,540 --> 00:07:26,130
that are selected over time.

111
00:07:26,130 --> 00:07:32,430
You know it contains all the ads are selected over time up to the ten is round and well each time we

112
00:07:32,430 --> 00:07:39,690
select a new ad we need of course to append this new ad that was just selected which has an index ad

113
00:07:39,690 --> 00:07:46,050
of course into this at selected list and therefore in the append function we of course need to input

114
00:07:46,440 --> 00:07:46,970
at.

115
00:07:47,130 --> 00:07:47,710
All right.

116
00:07:47,760 --> 00:07:48,490
Perfect.

117
00:07:48,510 --> 00:07:55,050
So that appends the ad to this full list of the ad selected which will be remember the input of the

118
00:07:55,050 --> 00:07:56,250
histogram.

119
00:07:56,340 --> 00:08:02,040
Then as we said we need to update these two variables numbers of rewards of 1 and numbers of rewards

120
00:08:02,040 --> 00:08:02,660
zero.

121
00:08:02,670 --> 00:08:04,610
But let's think this through.

122
00:08:04,620 --> 00:08:07,410
How do we need to update these two variables.

123
00:08:07,410 --> 00:08:09,780
Well that actually depends on something.

124
00:08:09,780 --> 00:08:11,090
Something specific.

125
00:08:11,250 --> 00:08:18,660
It is whether when you know we selected that ad at this particular round for a particular customer it

126
00:08:18,660 --> 00:08:26,160
depends on whether the ad was selected got a reward 1 or a reward zero because indeed if it got a reward

127
00:08:26,190 --> 00:08:32,380
one well this needs to be incremented by 1 and if it got a reward zero.

128
00:08:32,400 --> 00:08:35,960
Well this needs to be incremented by zero.

129
00:08:35,970 --> 00:08:36,490
Right.

130
00:08:36,510 --> 00:08:39,370
We can actually see that clearly in step 1.

131
00:08:39,450 --> 00:08:43,500
And I want n is a number of times that I got we were won up to round.

132
00:08:43,540 --> 00:08:46,500
And so if at a new round we get we want one.

133
00:08:46,500 --> 00:08:49,770
Well this has to be incremented by 1 and simple this one.

134
00:08:49,770 --> 00:08:53,060
This is a number of times that I got rewards zero up to round n.

135
00:08:53,340 --> 00:08:58,500
So if I go round and we go to reward zero Well this needs to be incremented by 1.

136
00:08:58,620 --> 00:09:03,210
And therefore what we need to do here since we have you know two different conditions.

137
00:09:03,270 --> 00:09:05,260
Well we need to of course naturally.

138
00:09:05,340 --> 00:09:07,920
And if condition once again.

139
00:09:08,130 --> 00:09:14,090
But a simple one that is if condition that we'll just check if Well the reward is equal to one.

140
00:09:14,130 --> 00:09:18,740
So so far I'm just going to write this reward and then be careful.

141
00:09:18,750 --> 00:09:21,690
Double equal one instead of just one equal.

142
00:09:21,710 --> 00:09:25,270
Because otherwise this would be an affectation than Colin.

143
00:09:25,380 --> 00:09:29,020
But now you're gonna say wait we don't have any reward variable.

144
00:09:29,040 --> 00:09:35,960
Well that's because same as in the UCB implementation I just want to highlight what is this reward remember.

145
00:09:36,300 --> 00:09:38,450
And therefore just above.

146
00:09:38,760 --> 00:09:41,560
I'm gonna specifically say what is this reward.

147
00:09:41,670 --> 00:09:45,580
And that's you know that's exactly the same as in the UCB implementation.

148
00:09:45,750 --> 00:09:52,200
It is the value in the data set corresponding to the row we're dealing with right now in this first

149
00:09:52,200 --> 00:09:59,510
full loop you know with this particular customer and the column of the ad that was just selected right

150
00:09:59,520 --> 00:10:08,150
because the reward is the value we get after selecting this add here to show to the specific user we

151
00:10:08,160 --> 00:10:14,510
are dealing with right now in this first for loop and therefore the reward here is the value in our

152
00:10:14,660 --> 00:10:16,340
data set right.

153
00:10:16,340 --> 00:10:23,360
So I'm taking my data set and then the values attribute and then in square brackets I enter the row

154
00:10:23,420 --> 00:10:28,740
of the user we're dealing with right now which is n so n and then the column of the ad that was just

155
00:10:28,740 --> 00:10:31,070
selected which is at right.

156
00:10:31,100 --> 00:10:36,920
That's exactly the same as in the UCB but I clearly wanted to highlight what is the reward here.

157
00:10:37,000 --> 00:10:42,260
So that then we can check in an if condition if the reward is equal to 1.

158
00:10:42,380 --> 00:10:45,140
And if that's the case well what are we going to do.

159
00:10:45,140 --> 00:10:51,350
Well as we said we are going to increment this by 1 because if the reward is one that means that the

160
00:10:51,350 --> 00:10:56,720
number of times this particular ad got We weren't one just got incremented by 1.

161
00:10:56,840 --> 00:11:02,770
Then of course I'm taking the right index of this list of the different numbers of times each ad got.

162
00:11:02,770 --> 00:11:07,730
We want one but the ad we're dealing with right now has of course the index ad because that's the ad

163
00:11:07,730 --> 00:11:15,800
that was just elected and therefore I just need to copy this and then at equal pace that again and then

164
00:11:15,830 --> 00:11:17,600
add plus 1.

165
00:11:17,600 --> 00:11:18,620
All right.

166
00:11:18,620 --> 00:11:19,330
So all good.

167
00:11:19,340 --> 00:11:22,270
This particular value is updated the right way.

168
00:11:22,430 --> 00:11:29,510
And now back in the else condition meaning the other condition where the reward we got by selecting

169
00:11:29,510 --> 00:11:35,400
this ad at this particular round is equal to zero which can be specified through an else because we

170
00:11:35,440 --> 00:11:39,740
can neither be equal to 1 or zero so l is fine here and then.

171
00:11:40,100 --> 00:11:42,990
Well what we need to do is of course take that.

172
00:11:43,010 --> 00:11:50,390
You know I can just copy all this and paste that and replace of course numbers of rewards one by zero

173
00:11:50,390 --> 00:11:54,560
here and same one by zero here as well.

174
00:11:54,560 --> 00:12:00,710
Because in this alpha condition we are in the condition that the reward we collected is zero and therefore

175
00:12:00,710 --> 00:12:07,220
that variable of the index at here which represents the number of times this ad here got reward zero

176
00:12:07,460 --> 00:12:09,910
needs to be incremented by 1.

177
00:12:09,920 --> 00:12:10,410
All right.

178
00:12:10,430 --> 00:12:11,260
Perfect.

179
00:12:11,270 --> 00:12:14,030
And now we just have one final thing to do.

180
00:12:14,060 --> 00:12:15,260
You know exactly what it is.

181
00:12:15,260 --> 00:12:16,740
Let's not forget about this.

182
00:12:16,850 --> 00:12:23,210
It is to update that particular variable which gives the total reward you know the total accumulated

183
00:12:23,210 --> 00:12:25,140
reward over the round.

184
00:12:25,160 --> 00:12:29,900
And since now we are you know in a new round you know with this first full loop here.

185
00:12:29,900 --> 00:12:35,210
Well of course as soon as we get this new reward we need to update this total reward by incrementing

186
00:12:35,210 --> 00:12:36,770
it by the reward we just got.

187
00:12:36,770 --> 00:12:43,090
Whether it is zero in which case there is no implementation or one in which case we incremented by 1.

188
00:12:43,100 --> 00:12:45,150
So let's do this efficiently.

189
00:12:45,200 --> 00:12:50,220
Total Reward is equal to total reward plus reward.

190
00:12:50,660 --> 00:12:51,090
All right.

191
00:12:51,260 --> 00:12:55,100
And that way we update our total reward variable.

192
00:12:55,100 --> 00:12:56,420
And that's my friends.

193
00:12:56,420 --> 00:12:59,450
Now the implementation of Thompson sampling is over.

194
00:12:59,450 --> 00:13:04,330
So congratulations you just implemented your second reinforcement learning model.

195
00:13:04,370 --> 00:13:10,760
And by the way now the full implementation is done because indeed here we don't have anything to change

196
00:13:10,880 --> 00:13:15,110
we can just plot the histogram because we have the same variable names.

197
00:13:15,110 --> 00:13:22,030
So now it's time for the show time in the next tutorial I will show you the demo of Thompson sampling.

198
00:13:22,040 --> 00:13:24,570
We will of course run all our sales.

199
00:13:24,650 --> 00:13:30,590
And mostly we will compare the two performances between UCB and Thompson sampling.

200
00:13:30,740 --> 00:13:37,250
I remind that UCB was perfectly able to find that best ad you know with the highest click through rate

201
00:13:37,550 --> 00:13:42,230
in 1000 rounds but was not able to do it in 500 rounds.

202
00:13:42,230 --> 00:13:47,190
And so now I'm super excited to check if Thompson sampling will do better than this.

203
00:13:47,190 --> 00:13:52,580
Meaning if it will not only be able to figure out the best ad in 1000 rounds but also if it will be

204
00:13:52,580 --> 00:13:56,630
able to find it in 500 rounds which UCB couldn't do.

205
00:13:56,630 --> 00:13:56,930
All right.

206
00:13:56,930 --> 00:13:59,970
So let's find out about this in a next material.

207
00:14:00,020 --> 00:14:01,600
I can't wait to show you all this.

208
00:14:01,610 --> 00:14:03,560
And until then enjoy machine learning.
