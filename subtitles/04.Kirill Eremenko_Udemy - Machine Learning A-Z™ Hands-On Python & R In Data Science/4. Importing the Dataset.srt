1
00:00:00,330 --> 00:00:01,170
Hello my friends.

2
00:00:01,170 --> 00:00:02,100
Welcome back.

3
00:00:02,100 --> 00:00:07,920
Now let's learn together how to import a dataset as a reminder we're going to learn how to import the

4
00:00:07,920 --> 00:00:14,850
following data set data that CSB which is a very simple data set of let's say a retail company that

5
00:00:14,850 --> 00:00:19,570
is doing some analysis on which clients purchased one of their products.

6
00:00:19,590 --> 00:00:25,830
So the rows in this dataset correspond to different customers of this employee and for each of these

7
00:00:25,830 --> 00:00:31,860
customers we have the country they live in their age their salary and whether or not they purchased

8
00:00:31,950 --> 00:00:32,670
the product.

9
00:00:32,670 --> 00:00:39,360
Okay so we're going to learn how to import that CSB on Python using of course to Bender's library.

10
00:00:39,360 --> 00:00:39,900
Here we go.

11
00:00:40,080 --> 00:00:45,460
So let's first create a new code cell and now let's import this dataset.

12
00:00:45,480 --> 00:00:50,940
So the first thing we have to do is to create a new variable and these variable will contain exactly

13
00:00:51,060 --> 00:00:52,130
the dataset.

14
00:00:52,200 --> 00:00:58,080
So I always like to choose simple names for my variables representing Well what we're creating.

15
00:00:58,080 --> 00:01:02,490
And therefore since now we're importing the dataset and we want to integrate the data set in a variable

16
00:01:02,820 --> 00:01:05,090
I'm gonna call this variable dataset.

17
00:01:05,130 --> 00:01:06,510
Okay as simple as that.

18
00:01:07,050 --> 00:01:09,720
So this horrible what will it be equal to.

19
00:01:09,720 --> 00:01:17,070
Well it will be equal to the output of a certain function by US and the certain function will exactly

20
00:01:17,250 --> 00:01:23,960
read all the values of this dataset and it will create what we call a data frame.

21
00:01:24,000 --> 00:01:28,350
It's a certain format of data whether it is in Python or even R.

22
00:01:28,470 --> 00:01:34,470
So it will create a data frame and it will contain exactly the same rows and columns and values as what

23
00:01:34,470 --> 00:01:38,640
you see here and this data frame will be exactly this dataset variable.

24
00:01:38,850 --> 00:01:39,600
All right.

25
00:01:39,600 --> 00:01:44,400
So there we go in order to create this data frame we're gonna call a certain function by the bender's

26
00:01:44,400 --> 00:01:47,940
library which is called read on the score CSP.

27
00:01:48,090 --> 00:01:54,150
And in this function we will only have to input the name of the dataset with the extension.

28
00:01:54,150 --> 00:02:00,640
So since we're about to call a function of Bender's while the first thing we have to do is call the

29
00:02:00,810 --> 00:02:06,640
library and therefore remember since we gave it the shortcut named PDC in order to call it we need to

30
00:02:06,690 --> 00:02:13,140
add here PD and then to call a function from a library we need to add a dot it's always done like that

31
00:02:13,530 --> 00:02:16,590
and that's where you can call the function you want to use.

32
00:02:16,650 --> 00:02:23,790
And as we said this function is named read underscore CSB and then you add some parenthesis to enter

33
00:02:24,000 --> 00:02:24,920
the argument.

34
00:02:24,930 --> 00:02:25,530
So there we go.

35
00:02:25,530 --> 00:02:26,160
Let's do this.

36
00:02:26,160 --> 00:02:31,200
This will only what you will have to do when using this read on this course as we function you have

37
00:02:31,200 --> 00:02:34,180
to input in quotes the name of the dataset.

38
00:02:34,380 --> 00:02:39,220
As a reminder the name of the dataset is data with the capital did not see as V.

39
00:02:39,330 --> 00:02:42,340
So there we go data that see as.

40
00:02:42,680 --> 00:02:43,100
Okay.

41
00:02:43,110 --> 00:02:48,650
And this will create the data frame you know all the values inside this data set.

42
00:02:48,840 --> 00:02:52,470
And this data frame will be exactly this data set variable.

43
00:02:52,470 --> 00:02:52,800
Okay.

44
00:02:53,280 --> 00:02:59,140
So that's the first step but that's not enough to import data set you know as a first step of data processing.

45
00:02:59,220 --> 00:03:03,350
The next thing that you have to do is create two new entities.

46
00:03:03,390 --> 00:03:06,030
The first one is the matrix of features.

47
00:03:06,030 --> 00:03:09,040
And the second one is the dependent variable vector.

48
00:03:09,060 --> 00:03:14,750
So let me show you exactly what they mean and where they are in the data set right here.

49
00:03:15,010 --> 00:03:15,770
Okay.

50
00:03:15,900 --> 00:03:23,490
So I'm gonna give you now a very first important principle in machine learning in any dataset with which

51
00:03:23,550 --> 00:03:25,510
you're going to train a machinery model.

52
00:03:25,560 --> 00:03:31,020
You have the same entities which are the features and the dependent variable vector.

53
00:03:31,020 --> 00:03:32,340
Can you guess here.

54
00:03:32,340 --> 00:03:35,670
What are the features and what is the dependent variable.

55
00:03:35,670 --> 00:03:43,500
Well very simply the features are the columns with which you're going to predict the dependent variable

56
00:03:43,890 --> 00:03:49,290
and the dependent variable of course is the last column because you know this company would like to

57
00:03:49,290 --> 00:03:56,360
predict if some future customers are going to purchase a certain product based on these informations.

58
00:03:56,400 --> 00:04:03,540
So very simply the features or also called the Independent bobbles are the variables containing some

59
00:04:03,570 --> 00:04:10,110
information with which you can predict what you want to predict which is called the dependent variable.

60
00:04:10,110 --> 00:04:15,420
All right so remember this very important principle in any machinery model that you're going to build

61
00:04:15,720 --> 00:04:17,350
you're going to have separately.

62
00:04:17,430 --> 00:04:24,000
The features usually in the first columns of your data set and the dependent variable usually in the

63
00:04:24,000 --> 00:04:28,620
last column of your dataset you will see that all the data sets will use in this course and most of

64
00:04:28,620 --> 00:04:34,170
the data is that you'll use in your machinery and career will have the same format with first the features

65
00:04:34,170 --> 00:04:38,340
you know in the first columns and the dependent variable vector in the last column.

66
00:04:38,530 --> 00:04:39,360
Okay.

67
00:04:39,450 --> 00:04:45,210
And so right now what we want to create are the two entities we want to create our first the matrix

68
00:04:45,210 --> 00:04:53,130
of features containing separately these three columns here in a country H salary and separately we want

69
00:04:53,130 --> 00:04:58,740
to create the dependent variable vector containing only this last column because that's the column we

70
00:04:58,740 --> 00:05:04,110
want to predict and that's exactly what we always have to do in this first day to be pressing face.

71
00:05:04,140 --> 00:05:05,090
Let's do this.

72
00:05:05,240 --> 00:05:11,990
Let's create these two entities and we are gonna call them X for the matrix of features and y for the

73
00:05:11,990 --> 00:05:13,750
dependent variable vector.

74
00:05:13,790 --> 00:05:16,530
All right let's do this starting with X..

75
00:05:16,700 --> 00:05:18,860
So how are we going to create X.

76
00:05:18,920 --> 00:05:25,550
Basically that simple we have our data set you know containing exactly all this all these columns.

77
00:05:25,550 --> 00:05:31,100
And in order to create X Well we simply have to take the three first columns of this data set because

78
00:05:31,100 --> 00:05:34,120
you know X will be exactly all these values here.

79
00:05:34,130 --> 00:05:35,960
You know with the three first columns.

80
00:05:36,200 --> 00:05:42,050
And so what we're simply going to do is play with the indexes to collect indeed the indexes of these

81
00:05:42,170 --> 00:05:49,050
three first columns basically of the columns of all the columns of the data set except the last one.

82
00:05:49,070 --> 00:05:49,880
So let's do this.

83
00:05:49,880 --> 00:05:52,270
Let me show you how to do this.

84
00:05:52,430 --> 00:05:58,310
First what you're going to do is take your data set that exact same variable which you created in this

85
00:05:58,310 --> 00:05:59,340
first line of code here.

86
00:05:59,420 --> 00:05:59,990
OK.

87
00:06:00,050 --> 00:06:06,020
Data set then from this data set and I'm adding a dot here because we're about to use a function you

88
00:06:06,020 --> 00:06:13,340
know one of the attribute functions of a Bender's data frame and that function is I look and what will

89
00:06:13,340 --> 00:06:14,650
it allow us to do.

90
00:06:14,660 --> 00:06:21,410
Well as you can see I look here stands for locate indexes and therefore what this function will do is

91
00:06:21,410 --> 00:06:27,950
it will take the indexes of the columns we want to extract from the dataset not only the indexes of

92
00:06:27,950 --> 00:06:30,170
the columns but also the indexes of the rows.

93
00:06:30,200 --> 00:06:33,060
And actually we have to start here with the rows.

94
00:06:33,110 --> 00:06:37,060
We can specify the rows that we want to get and put into x.

95
00:06:37,130 --> 00:06:41,200
And of course these are all the rows you know we want to get all the rows into x.

96
00:06:41,210 --> 00:06:45,190
We only want to take the first columns what we want to keep all the rows.

97
00:06:45,230 --> 00:06:51,120
And the trick to take all the rows whatever data set you have with whatever number of rows is to add

98
00:06:51,120 --> 00:06:52,580
here a column.

99
00:06:52,580 --> 00:06:53,450
Why is that.

100
00:06:53,480 --> 00:06:56,270
Because a colon in Python means a range.

101
00:06:56,270 --> 00:07:02,480
And when we specify a range without the lower bound and neither the upper bound that means in Python

102
00:07:02,480 --> 00:07:04,500
that we're taking everything in the range.

103
00:07:04,580 --> 00:07:06,950
Therefore here all the rows.

104
00:07:06,950 --> 00:07:10,360
So that's the trick to take all the rows and you will always have to take all the rows.

105
00:07:10,360 --> 00:07:13,390
So here you won't have anything to change then.

106
00:07:13,400 --> 00:07:19,430
Now we have to specify which columns want to select with the indexes and to separate the rows that we

107
00:07:19,430 --> 00:07:22,950
just took from the columns we need here to add a comma.

108
00:07:23,010 --> 00:07:25,300
And now we can take care of columns.

109
00:07:25,460 --> 00:07:25,960
All right.

110
00:07:25,970 --> 00:07:31,730
So now I'm going to show you a trick in order to take all the columns except the last one because indeed

111
00:07:31,940 --> 00:07:39,050
as I told you most of the data sets you will use to train new machinery models will have first the features

112
00:07:39,080 --> 00:07:41,780
you know in the first columns and last.

113
00:07:41,780 --> 00:07:44,720
The dependent variable vector in the last column.

114
00:07:44,730 --> 00:07:49,490
So now we're going to use a trick so that we can take automatically you know regardless of the number

115
00:07:49,490 --> 00:07:55,490
of columns in your dataset all the columns except the last one because all the columns except the last

116
00:07:55,490 --> 00:07:58,300
one are exactly the matrix of features.

117
00:07:58,370 --> 00:08:05,900
And the trick to do that is to add a new range here which this time will be colon minus one.

118
00:08:05,900 --> 00:08:06,890
So what does it mean.

119
00:08:07,220 --> 00:08:10,760
Well as we said the colon here means the range.

120
00:08:10,760 --> 00:08:13,280
We know we're taking a range here on the left.

121
00:08:13,280 --> 00:08:19,960
We have nothing that means that we're taking the first index in the index 0 because index is in both

122
00:08:19,960 --> 00:08:24,230
and started zero and then you know we're going up to minus one.

123
00:08:24,230 --> 00:08:26,090
So what does this minus one mean.

124
00:08:26,090 --> 00:08:27,900
Well minus one means here.

125
00:08:27,980 --> 00:08:35,420
The last column minus one in Python means the index of the last column however and that's a very important

126
00:08:35,420 --> 00:08:42,780
principle in Python which you must absolutely know a range in Python includes the lower bound therefore

127
00:08:42,810 --> 00:08:48,350
including here the lower bound 0 0 but excludes the upper bound.

128
00:08:48,560 --> 00:08:54,710
And therefore here we're excluding this index minus one meaning the index of the last column and therefore

129
00:08:55,010 --> 00:09:01,070
what this will do is it will take all the columns excluding the last one and that's exactly what we

130
00:09:01,070 --> 00:09:04,060
want for our matrix of features X..

131
00:09:04,400 --> 00:09:05,240
So voila.

132
00:09:05,300 --> 00:09:05,990
There you go.

133
00:09:06,080 --> 00:09:11,870
Now you just collected the right indexes to create a matrix of Features X and the beauty of this is

134
00:09:11,870 --> 00:09:18,410
that you won't have anything to change when creating the future matrices of features X of your future

135
00:09:18,440 --> 00:09:24,260
datasets but make sure that your future data sets indeed have the features in the first columns and

136
00:09:24,260 --> 00:09:26,480
the dependent viable vector in the last column.

137
00:09:26,810 --> 00:09:28,220
Okay perfect.

138
00:09:28,250 --> 00:09:34,730
So in order to finish this line of code which is not adhere dot values and this just means that we're

139
00:09:34,730 --> 00:09:41,570
taking indeed all the values in all the rows of this data set and in all the columns except the last

140
00:09:41,570 --> 00:09:43,490
one of this dataset.

141
00:09:43,700 --> 00:09:44,150
Perfect.

142
00:09:44,150 --> 00:09:45,520
So now you're learning a lot.

143
00:09:45,590 --> 00:09:50,540
Don't worry if this feels a bit overwhelming at the beginning I promise you that we will use this trick

144
00:09:50,540 --> 00:09:51,530
many many times.

145
00:09:51,650 --> 00:09:56,300
So you will just soon be so familiar with it and master it like a pro.

146
00:09:56,300 --> 00:09:56,780
All right.

147
00:09:56,780 --> 00:10:02,610
And now let's do the same for are dependent variable Victor and you know this will be exactly the same

148
00:10:02,610 --> 00:10:08,880
we'll just have to change one little thing so I'm going to copy this and paste it right here.

149
00:10:08,880 --> 00:10:12,100
And now according to you based on what I've just explained.

150
00:10:12,450 --> 00:10:18,990
What do we have to change here in order to get the dependent variable vector which is most of the time

151
00:10:19,320 --> 00:10:21,720
in our data set indeed the last column.

152
00:10:22,760 --> 00:10:23,120
Okay.

153
00:10:23,130 --> 00:10:25,110
So let's see first.

154
00:10:25,400 --> 00:10:25,670
Okay.

155
00:10:25,680 --> 00:10:30,200
We have to take our dataset because we want to extract this tax column from our dataset.

156
00:10:30,210 --> 00:10:36,120
Then we have to use I look to collect the indexes of the rows and columns we want then we indeed want

157
00:10:36,120 --> 00:10:42,780
to take all the rows of the data set because we want to take all the purchase decisions of these customers

158
00:10:42,780 --> 00:10:46,300
whether or not they decided to purchase yes or no the product.

159
00:10:46,530 --> 00:10:51,420
So okay we want all the rows but then which comes that we want to get here.

160
00:10:51,420 --> 00:10:53,810
Well we only want to get the last column.

161
00:10:54,030 --> 00:11:00,480
So according to you what is index we need input here in order to get only the last column.

162
00:11:00,480 --> 00:11:06,240
Well this time since we only want to get one column we definitely don't want to get a range and therefore

163
00:11:06,270 --> 00:11:08,490
I'm going to remove the range here.

164
00:11:08,640 --> 00:11:10,480
And then what are we left here.

165
00:11:10,500 --> 00:11:12,370
We're left here with minus 1.

166
00:11:12,390 --> 00:11:16,500
And as I've told you minus 1 is exactly the index of the last column.

167
00:11:16,770 --> 00:11:17,790
So there we go.

168
00:11:17,790 --> 00:11:22,410
That's exactly what we need to create this dependent variable vector.

169
00:11:22,410 --> 00:11:24,510
And thus this line of code is done.

170
00:11:24,510 --> 00:11:25,790
Congratulations.

171
00:11:25,800 --> 00:11:31,740
Now you know how to import dataset create a matrix of features and create a dependent variable vector

172
00:11:32,040 --> 00:11:37,410
and the cherry on the cake is that any time you want to create these for your data sets you won't have

173
00:11:37,410 --> 00:11:42,660
anything to change because this will automatically take all the first columns for The Matrix of features.

174
00:11:42,810 --> 00:11:45,690
And the last column for the dependent viral vector.

175
00:11:45,690 --> 00:11:46,010
All right.

176
00:11:46,020 --> 00:11:51,530
Now I'm going to show you indeed that X and Y will be well created and in order to do this we're going

177
00:11:51,520 --> 00:11:56,210
to add a new code cell here inside which we're just going to print.

178
00:11:56,220 --> 00:12:01,860
So that's the famous print function which allows you to print anything whether it is a text or you know

179
00:12:01,920 --> 00:12:04,700
an array like X or a vector like Y.

180
00:12:04,740 --> 00:12:10,080
So we're going to first print x and then I'm going to add a new code so here where we're going to print

181
00:12:10,890 --> 00:12:17,580
y and this is just to show you that indeed X and Y will well be created with this code.

182
00:12:17,580 --> 00:12:17,980
Okay.

183
00:12:18,060 --> 00:12:20,600
So let's do this now time for the fun part.

184
00:12:20,640 --> 00:12:25,650
We're going to execute all these cells here because you know so far we've just written the implementations

185
00:12:25,680 --> 00:12:29,220
but we have to run the cells in order to build all this.

186
00:12:29,460 --> 00:12:32,060
So let us first run this code cell.

187
00:12:32,090 --> 00:12:33,340
Empowering the libraries.

188
00:12:34,080 --> 00:12:34,410
All right.

189
00:12:34,410 --> 00:12:36,560
So important as you can see if I click here.

190
00:12:36,570 --> 00:12:36,840
Yes.

191
00:12:36,840 --> 00:12:39,900
This one here means it is executed.

192
00:12:39,900 --> 00:12:41,270
Now time to run the second one.

193
00:12:41,280 --> 00:12:44,510
But before running this we have to do something very important.

194
00:12:44,670 --> 00:12:51,120
It is to upload this data set here and see as we format inside our Google Code that notebook.

195
00:12:51,210 --> 00:12:53,630
And to do this you just need to click false here.

196
00:12:53,640 --> 00:12:56,800
You know this little folder then upload.

197
00:12:57,090 --> 00:13:03,190
Then you're going to go to this whole machine learning a zip folder containing all the codes and data

198
00:13:03,190 --> 00:13:06,200
set and which was provided to you in the first section.

199
00:13:06,210 --> 00:13:10,780
And I will give it to you again in every sections that you make sure not to miss it.

200
00:13:10,830 --> 00:13:17,190
And inside this folder you're going to go now to part 1 data processing in order to get indeed that

201
00:13:17,310 --> 00:13:18,030
data.

202
00:13:18,030 --> 00:13:24,930
See as we file containing the data set we are importing right now so open and now the data set will

203
00:13:24,930 --> 00:13:27,720
be indeed in Google collab your notebook.

204
00:13:27,720 --> 00:13:30,960
And so now we can run this cell to import it.

205
00:13:31,030 --> 00:13:31,800
And there we go.

206
00:13:31,800 --> 00:13:32,900
It is already important.

207
00:13:32,910 --> 00:13:34,600
You know it is executed.

208
00:13:34,620 --> 00:13:40,650
So now we're going to execute this cell in order to print the matrix of features X just to check that

209
00:13:40,650 --> 00:13:45,960
indeed we get all the first columns inside this matrix and indeed.

210
00:13:45,960 --> 00:13:48,790
Well let's check the dataset once again.

211
00:13:48,900 --> 00:13:55,360
Remember the first columns meaning the feature as we wanted to get into this matrix X are first countries

212
00:13:55,410 --> 00:13:57,980
second age and third the salary.

213
00:13:57,990 --> 00:14:03,720
These are the three columns and indeed inside X we have first the country column with all the countries

214
00:14:03,720 --> 00:14:06,150
of these customers their age.

215
00:14:06,150 --> 00:14:10,420
And in the third column their salary or their estimated salary.

216
00:14:10,440 --> 00:14:11,430
So that's perfect.

217
00:14:11,460 --> 00:14:17,960
We get indeed the matrix of features X containing all the features or also called the Independent vote.

218
00:14:18,210 --> 00:14:18,560
All right.

219
00:14:18,560 --> 00:14:20,330
And now let's run this cell to print.

220
00:14:20,340 --> 00:14:21,980
Why the dependent variable vector.

221
00:14:21,990 --> 00:14:28,260
And indeed it gets the dependent variable vector containing all the decisions whether or not the customers

222
00:14:28,260 --> 00:14:29,730
purchased the product.

223
00:14:29,760 --> 00:14:30,030
Right.

224
00:14:30,030 --> 00:14:30,480
We can check.

225
00:14:30,480 --> 00:14:33,630
No Yes No no no.

226
00:14:33,650 --> 00:14:34,030
Yes.

227
00:14:34,040 --> 00:14:34,520
No no.

228
00:14:34,550 --> 00:14:34,940
Okay.

229
00:14:34,970 --> 00:14:36,420
That's in the same order.

230
00:14:36,410 --> 00:14:37,250
That's perfect.

231
00:14:37,250 --> 00:14:39,010
We now have our data set.

232
00:14:39,020 --> 00:14:42,370
Our matrix of features x and our dependent variable vector Y.

233
00:14:42,380 --> 00:14:46,370
And lastly let me remind why we had to create these two entities.

234
00:14:46,370 --> 00:14:53,660
That's because the way we're going to build our future machinery models expect exactly these two entities

235
00:14:53,810 --> 00:14:55,040
in their inputs.

236
00:14:55,040 --> 00:15:00,470
You know we will use some classes to build these models and these classes don't expect the dataset as

237
00:15:00,470 --> 00:15:03,580
a whole but these two separate entities.

238
00:15:03,590 --> 00:15:07,340
And that's the only reason why we had to create these two separate entities.

239
00:15:07,340 --> 00:15:12,470
So now you know and therefore congratulations not only you improve your knowledge of machine learning

240
00:15:12,500 --> 00:15:18,800
but also you now know how important data set and create a matrix of future an independent viable vector.

241
00:15:18,800 --> 00:15:23,480
So now we're going to proceed to the next step which is a new tool which I'm going to teach you and

242
00:15:23,480 --> 00:15:25,830
that is taking care of missing data.

243
00:15:25,910 --> 00:15:30,860
Indeed as you can see the data that contains some missing data right here you can see this is an empty

244
00:15:30,860 --> 00:15:31,650
cell.

245
00:15:31,730 --> 00:15:37,310
So I will teach you exactly how to handle that case which happens most of the time in data sets.

246
00:15:37,880 --> 00:15:39,670
So let's do this in a next material.

247
00:15:39,680 --> 00:15:41,540
And until then enjoy machine learning.
