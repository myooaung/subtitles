WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Another fantastic code recipe

2
00:00:02.001 --> 00:00:04.000
we can implement with GitHub actions

3
00:00:04.000 --> 00:00:07.008
is a build and deploy of a Docker image

4
00:00:07.008 --> 00:00:11.008
from a Spring Boot jar to AWS ECR.

5
00:00:11.008 --> 00:00:16.000
This is the Amazon Elastic Container Registry.

6
00:00:16.000 --> 00:00:19.003
In this video, we're only going to focus

7
00:00:19.003 --> 00:00:21.004
on the GitHub actions necessary

8
00:00:21.004 --> 00:00:26.004
for pushing a Docker image to AWS Docker repository.

9
00:00:26.004 --> 00:00:29.006
So let's go ahead and open up IntelliJ,

10
00:00:29.006 --> 00:00:32.000
and we're using the same project source code

11
00:00:32.000 --> 00:00:33.005
we did from the previous video.

12
00:00:33.005 --> 00:00:36.005
The lab files for this video, if you need to check,

13
00:00:36.005 --> 00:00:42.007
the begin and end state are located 04_05_begin and n.

14
00:00:42.007 --> 00:00:46.008
First, let's go ahead and switch to the main branch,

15
00:00:46.008 --> 00:00:51.005
we'll type git switch main,

16
00:00:51.005 --> 00:00:53.001
okay, I'm already there.

17
00:00:53.001 --> 00:00:56.003
Clear this and then we're going to

18
00:00:56.003 --> 00:01:00.006
create a new branch called Docker workflow AWS.

19
00:01:00.006 --> 00:01:03.006
In the previous video, we merged the WAR workflow

20
00:01:03.006 --> 00:01:08.003
AWS branch with the main and dthat branch now has a number

21
00:01:08.003 --> 00:01:11.000
of changes used for building a WAR.

22
00:01:11.000 --> 00:01:13.004
We're going to clean that up in this video

23
00:01:13.004 --> 00:01:16.007
but first let's go ahead and create our Docker

24
00:01:16.007 --> 00:01:28.006
branch we'll type git checkout -b docker_workflow_aws.

25
00:01:28.006 --> 00:01:30.003
So now we've created the branch

26
00:01:30.003 --> 00:01:32.001
and switched to it in one go,

27
00:01:32.001 --> 00:01:36.006
we're going to go ahead and push these changes.

28
00:01:36.006 --> 00:01:40.006
New branch to GitHub, we'll type git push -u

29
00:01:40.006 --> 00:01:49.005
origin docker_workflow_aws, hit enter.

30
00:01:49.005 --> 00:01:50.003
Now we're going to go

31
00:01:50.003 --> 00:01:52.007
through real quick and clean up this file.

32
00:01:52.007 --> 00:01:55.001
We're going to start with SpringBootApplication.

33
00:01:55.001 --> 00:02:05.003
I'm going to remove code here that was used for a WAR.

34
00:02:05.003 --> 00:02:07.004
Save that one.

35
00:02:07.004 --> 00:02:11.002
I'm going to go down to our bill.gradle.

36
00:02:11.002 --> 00:02:16.001
Going to take out the bootWar and the id war.

37
00:02:16.001 --> 00:02:18.007
Going to scroll down here to provided

38
00:02:18.007 --> 00:02:21.009
and we're going to delete it.

39
00:02:21.009 --> 00:02:24.007
Save that.

40
00:02:24.007 --> 00:02:26.004
We're going to go to our resources

41
00:02:26.004 --> 00:02:30.001
to application properties, and we're going to take

42
00:02:30.001 --> 00:02:34.008
out this server.servlet.contextPath.

43
00:02:34.008 --> 00:02:36.006
Save that.

44
00:02:36.006 --> 00:02:41.009
Okay, let's go back now to our GitHub workflow, open this

45
00:02:41.009 --> 00:02:46.002
up and we want to basically locate the beanstalk deploy

46
00:02:46.002 --> 00:02:48.006
for jar action.

47
00:02:48.006 --> 00:02:51.005
And we're going to remove that entire section.

48
00:02:51.005 --> 00:02:52.006
We're going to replace this

49
00:02:52.006 --> 00:02:57.001
with an action found over in the GitHub marketplace.

50
00:02:57.001 --> 00:03:00.007
If we scroll down the page, you'll see the usages section.

51
00:03:00.007 --> 00:03:02.001
We're going to copy

52
00:03:02.001 --> 00:03:05.004
from this part where it says uses all the way to create.

53
00:03:05.004 --> 00:03:07.000
We'll copy that.

54
00:03:07.000 --> 00:03:08.001
And we're going to go back

55
00:03:08.001 --> 00:03:12.008
to IntelliJand we're going to paste that in.

56
00:03:12.008 --> 00:03:16.002
Now we need to make sure that our spacing is correct

57
00:03:16.002 --> 00:03:18.007
because the formatting and spacing

58
00:03:18.007 --> 00:03:23.005
if it's not done right, GitHub will complain

59
00:03:23.005 --> 00:03:26.004
and none of the builds will work.

60
00:03:26.004 --> 00:03:31.008
We'll fix these real quick.

61
00:03:31.008 --> 00:03:33.009
There's a couple of things that we need to pay attention

62
00:03:33.009 --> 00:03:38.007
to in this new workflow, the first being the region,

63
00:03:38.007 --> 00:03:41.009
we're going to change the region to the region we're using.

64
00:03:41.009 --> 00:03:46.001
I'm using US-east-2, make sure you change that

65
00:03:46.001 --> 00:03:49.002
to the region that you're using.

66
00:03:49.002 --> 00:03:52.005
The second thing that we have here is the repo.

67
00:03:52.005 --> 00:04:00.005
We're going to change the repo to springboot-docker-image

68
00:04:00.005 --> 00:04:03.008
and you'll notice that it says create repo true.

69
00:04:03.008 --> 00:04:08.008
So it will create this repo in the AWS ECR.

70
00:04:08.008 --> 00:04:10.003
And the last thing we need to pay attention

71
00:04:10.003 --> 00:04:13.001
to is the account ID.

72
00:04:13.001 --> 00:04:17.004
So let's go back to AWS for a moment.

73
00:04:17.004 --> 00:04:19.008
We'll click on the username.

74
00:04:19.008 --> 00:04:23.004
We'll go down to security credentials,

75
00:04:23.004 --> 00:04:29.001
we'll click on account identifiers and copy your account.

76
00:04:29.001 --> 00:04:30.008
Now we're going to go over to GitHub

77
00:04:30.008 --> 00:04:36.003
and we're going to click on settings inside of our repository.

78
00:04:36.003 --> 00:04:38.005
Go down to secrets.

79
00:04:38.005 --> 00:04:40.007
And as you can see, we already have two secrets.

80
00:04:40.007 --> 00:04:42.005
We're going to add a third.

81
00:04:42.005 --> 00:04:47.002
And this secret is going to be the AWS account ID.

82
00:04:47.002 --> 00:04:50.009
Paste that in and click add secret.

83
00:04:50.009 --> 00:04:55.001
If you have not added your AWS access key ID

84
00:04:55.001 --> 00:04:58.002
or your AWS secret access key ID,

85
00:04:58.002 --> 00:05:02.003
you do need to do that and you can locate those keys

86
00:05:02.003 --> 00:05:08.003
within the accounts in AWS, the security manager.

87
00:05:08.003 --> 00:05:12.005
Let's go back now to IntelliJ.

88
00:05:12.005 --> 00:05:15.004
We have everything set up within our workflow.

89
00:05:15.004 --> 00:05:19.004
We're going to go ahead and check our branch again,

90
00:05:19.004 --> 00:05:22.009
gitbranch, we're on the Docker branch.

91
00:05:22.009 --> 00:05:31.001
Let's add the changes, admit the changes,

92
00:05:31.001 --> 00:05:35.006
and now let's push them.

93
00:05:35.006 --> 00:05:40.004
Okay, let's go back to GitHub.

94
00:05:40.004 --> 00:05:43.009
We'll click on the code and we're going to

95
00:05:43.009 --> 00:05:49.007
click pull request, new pool request,

96
00:05:49.007 --> 00:05:53.004
we'll change the compare from main to Docker,

97
00:05:53.004 --> 00:05:55.002
as we're able to merge.

98
00:05:55.002 --> 00:05:58.004
Now, if for some reason it said you could not merge,

99
00:05:58.004 --> 00:06:01.005
you can just go ahead and create the pull request

100
00:06:01.005 --> 00:06:05.006
and then you're going to have to resolve the conflicts.

101
00:06:05.006 --> 00:06:10.001
Click create pull request,

102
00:06:10.001 --> 00:06:13.007
merge the pull request and confirm.

103
00:06:13.007 --> 00:06:16.007
Click on our actions.

104
00:06:16.007 --> 00:06:20.000
You can see that two actions have fired off,

105
00:06:20.000 --> 00:06:23.006
one for the pull request and one for the merge.

106
00:06:23.006 --> 00:06:32.003
Look on the build and we can see that we finished

107
00:06:32.003 --> 00:06:35.003
pushing the Docker image.

108
00:06:35.003 --> 00:06:36.008
We did get an error.

109
00:06:36.008 --> 00:06:43.002
Go ahead and see what the error was.

110
00:06:43.002 --> 00:06:46.007
Okay, so this Docker image already exists.

111
00:06:46.007 --> 00:06:50.004
Let's go ahead and take a look at it.

112
00:06:50.004 --> 00:06:56.009
Look at the container registry.

113
00:06:56.009 --> 00:06:59.006
We have a double deploy way that goes on here.

114
00:06:59.006 --> 00:07:03.008
One with the full request and one with the merge.

115
00:07:03.008 --> 00:07:08.005
And what has happened is one has completed

116
00:07:08.005 --> 00:07:13.005
and published the build while the other is running again.

117
00:07:13.005 --> 00:07:15.005
That's no problem.

118
00:07:15.005 --> 00:07:17.001
If we go back

119
00:07:17.001 --> 00:07:20.008
to the Amazon Container Registry and we can see

120
00:07:20.008 --> 00:07:26.000
that our repository now contains our Docker image.

121
00:07:26.000 --> 00:07:30.007
The final step for you all would be to investigate something

122
00:07:30.007 --> 00:07:34.005
like AWS code pipeline, which listens

123
00:07:34.005 --> 00:07:38.005
for new images and then deploys them to elastic beanstalk.

124
00:07:38.005 --> 00:07:40.000
Now I'm not going to do that

125
00:07:40.000 --> 00:07:43.004
for you today because the code pipeline actually

126
00:07:43.004 --> 00:07:47.000
requires considerable more configuration

127
00:07:47.000 --> 00:07:50.000
and there are charges based on the usage.

