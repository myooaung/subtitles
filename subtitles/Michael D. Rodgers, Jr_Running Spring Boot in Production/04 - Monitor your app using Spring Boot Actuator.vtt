WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] As we're thinking about preparing

2
00:00:02.000 --> 00:00:04.002
our Spring Boot application with profiles

3
00:00:04.002 --> 00:00:06.001
for various environments,

4
00:00:06.001 --> 00:00:08.001
once our application hits production,

5
00:00:08.001 --> 00:00:10.008
we want to know about its health.

6
00:00:10.008 --> 00:00:12.009
And monitoring the health of our application

7
00:00:12.009 --> 00:00:15.004
and production is very important.

8
00:00:15.004 --> 00:00:17.001
Ideally, we want to catch issues

9
00:00:17.001 --> 00:00:20.005
before customers or users start complaining.

10
00:00:20.005 --> 00:00:23.002
Monitoring can as well help you evaluate

11
00:00:23.002 --> 00:00:25.002
the health of your application,

12
00:00:25.002 --> 00:00:27.001
your server infrastructure,

13
00:00:27.001 --> 00:00:30.007
and additionally any unexpected errors that may rise.

14
00:00:30.007 --> 00:00:32.007
The Spring documentation tells us

15
00:00:32.007 --> 00:00:36.002
that Spring Boot includes a number of features

16
00:00:36.002 --> 00:00:39.005
to help you monitor and manage your application

17
00:00:39.005 --> 00:00:41.006
when you push it to production.

18
00:00:41.006 --> 00:00:45.003
This is where Spring Boot Actuator comes in.

19
00:00:45.003 --> 00:00:47.002
At this point, you may not be familiar

20
00:00:47.002 --> 00:00:48.009
with what an Actuator is,

21
00:00:48.009 --> 00:00:51.004
but the Spring documentation tells us

22
00:00:51.004 --> 00:00:55.000
that an Actuator comes from a manufacturing term

23
00:00:55.000 --> 00:00:58.006
that refers to a mechanical device for moving

24
00:00:58.006 --> 00:01:00.005
or controlling something.

25
00:01:00.005 --> 00:01:02.008
Actuators can generate a large amount

26
00:01:02.008 --> 00:01:05.005
of motion from a small change.

27
00:01:05.005 --> 00:01:08.003
Spring Boot Actuators similarly

28
00:01:08.003 --> 00:01:12.008
allow you to monitor your health endpoints,

29
00:01:12.008 --> 00:01:16.005
management over HTTP or JMX,

30
00:01:16.005 --> 00:01:19.007
control your loggers and much more.

31
00:01:19.007 --> 00:01:22.000
And what is cool about this sub project

32
00:01:22.000 --> 00:01:26.006
is that you even create custom actuator endpoints.

33
00:01:26.006 --> 00:01:29.003
Let's go ahead and add some health endpoints

34
00:01:29.003 --> 00:01:31.003
to our current project.

35
00:01:31.003 --> 00:01:33.001
For this video,

36
00:01:33.001 --> 00:01:38.004
we are using 01_04_begin code base in IntelliJ.

37
00:01:38.004 --> 00:01:42.003
Once the project code base is open in IntelliJ,

38
00:01:42.003 --> 00:01:46.007
we're going to go ahead and open our build.gradle file.

39
00:01:46.007 --> 00:01:54.005
Inside of this, we're going to add implementation org

40
00:01:54.005 --> 00:02:09.008
springframework boot:springboot starter-actuator.

41
00:02:09.008 --> 00:02:12.008
We'll save that, and with that added, we'll go down

42
00:02:12.008 --> 00:02:21.009
to our terminal, we'll type gradle clean build.

43
00:02:21.009 --> 00:02:30.002
With the project build, type java -jar -Dspring

44
00:02:30.002 --> 00:02:32.007
profiles.active.

45
00:02:32.007 --> 00:02:38.001
We'll set this to prod, point in our build libs directory,

46
00:02:38.001 --> 00:02:41.005
and of course the application.jar.

47
00:02:41.005 --> 00:02:43.006
Hit enter.

48
00:02:43.006 --> 00:02:45.000
With the project running,

49
00:02:45.000 --> 00:02:52.003
we're going to go ahead and open up our browser window again.

50
00:02:52.003 --> 00:02:55.008
I'm going to refresh and here at the top

51
00:02:55.008 --> 00:03:00.006
I'm going to change this to actuator health and hit enter.

52
00:03:00.006 --> 00:03:05.004
This gives us a simple JSON response that says status up.

53
00:03:05.004 --> 00:03:08.009
This actuator health endpoint was given

54
00:03:08.009 --> 00:03:13.006
to us for free by adding the dependency in our build file.

55
00:03:13.006 --> 00:03:19.002
Okay, so if we go back to our application.properties

56
00:03:19.002 --> 00:03:22.002
we can get a little bit more fine grain detail

57
00:03:22.002 --> 00:03:24.004
in this by adding a couple

58
00:03:24.004 --> 00:03:28.006
of entries to our default application.properties.

59
00:03:28.006 --> 00:03:31.005
Now we can add these to only our prod properties

60
00:03:31.005 --> 00:03:34.009
if we want them enabled under prod profil,

61
00:03:34.009 --> 00:03:36.006
but for environment testing,

62
00:03:36.006 --> 00:03:39.007
you might want to go ahead and add them to the default.

63
00:03:39.007 --> 00:03:41.008
You might have this discussion with your team

64
00:03:41.008 --> 00:03:43.008
if it's important.

65
00:03:43.008 --> 00:03:46.003
We can keep actuator endpoint separate

66
00:03:46.003 --> 00:03:49.006
on a different port as well to provide isolation

67
00:03:49.006 --> 00:03:51.004
from the main service endpoint

68
00:03:51.004 --> 00:03:54.002
by adding the following.

69
00:03:54.002 --> 00:04:00.008
We'll type management.server.port

70
00:04:00.008 --> 00:04:03.008
and I'll set this to 9001.

71
00:04:03.008 --> 00:04:06.000
We're also going to change the default port

72
00:04:06.000 --> 00:04:08.001
that the application runs on.

73
00:04:08.001 --> 00:04:16.000
We'll do this by typing server.port equals 9000.

74
00:04:16.000 --> 00:04:18.006
We'll save it.

75
00:04:18.006 --> 00:04:22.004
And then finally, to show more fine grain details

76
00:04:22.004 --> 00:04:28.006
in the general health endpoint, we'll add one more property

77
00:04:28.006 --> 00:04:42.002
and this will be management.endpoint.health.show-details.

78
00:04:42.002 --> 00:04:48.001
And this will equal always, which will show more details.

79
00:04:48.001 --> 00:04:49.003
We'll save it.

80
00:04:49.003 --> 00:04:57.001
Go ahead Control + C, we'll build the application again.

81
00:04:57.001 --> 00:05:01.006
When it's done, we'll use the prod profile

82
00:05:01.006 --> 00:05:03.005
and let's notice a couple

83
00:05:03.005 --> 00:05:08.006
of things first about what we see in the logs.

84
00:05:08.006 --> 00:05:12.005
First of all, we see that Tomcat started on ports

85
00:05:12.005 --> 00:05:18.008
9001 with a context path of this.

86
00:05:18.008 --> 00:05:26.000
And if we scroll up, we see that it also started on 9000.

87
00:05:26.000 --> 00:05:30.004
So let's go ahead and open our browser window again.

88
00:05:30.004 --> 00:05:36.002
We'll change this to 9000, hit enter.

89
00:05:36.002 --> 00:05:38.004
This gives us our webpage.

90
00:05:38.004 --> 00:05:44.006
If we try to add to this, the actuator health.

91
00:05:44.006 --> 00:05:47.009
it should give us a 404 and it does.

92
00:05:47.009 --> 00:05:50.006
We can see there's a 404.

93
00:05:50.006 --> 00:05:53.008
Now this is because we've changed the port

94
00:05:53.008 --> 00:05:56.001
for health to 9001.

95
00:05:56.001 --> 00:05:58.005
We'll do that now and hit enter.

96
00:05:58.005 --> 00:06:04.002
And now we see a more robust list of health indications.

97
00:06:04.002 --> 00:06:07.007
We see that the application is up.

98
00:06:07.007 --> 00:06:11.004
We see that the disk base metrics.

99
00:06:11.004 --> 00:06:15.008
And if we had Spring Boot starter DB added

100
00:06:15.008 --> 00:06:16.008
in our gradle dependencies,

101
00:06:16.008 --> 00:06:21.000
we would even see some database metrics here as well.

