WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] Spring boot provides a large number

2
00:00:02.006 --> 00:00:06.008
of production ready features, especially like actuators

3
00:00:06.008 --> 00:00:08.006
which we have been working on.

4
00:00:08.006 --> 00:00:09.006
I'm showing you here

5
00:00:09.006 --> 00:00:11.009
an official list of spring boot actuators

6
00:00:11.009 --> 00:00:15.001
that you can consume in your applications.

7
00:00:15.001 --> 00:00:18.003
It's a good idea to bookmark this site for future reference

8
00:00:18.003 --> 00:00:19.009
not only for the actuators

9
00:00:19.009 --> 00:00:23.004
but also because there are a number of other great features

10
00:00:23.004 --> 00:00:25.001
to be aware of.

11
00:00:25.001 --> 00:00:28.002
The second link provides an in depth detail

12
00:00:28.002 --> 00:00:32.001
about the differing web actuator endpoints available.

13
00:00:32.001 --> 00:00:34.006
There is quite a bit that spring is provided here

14
00:00:34.006 --> 00:00:37.002
and I recommend you take the time to review

15
00:00:37.002 --> 00:00:38.009
this site as well.

16
00:00:38.009 --> 00:00:41.007
Now, as you can see here in this left panel

17
00:00:41.007 --> 00:00:44.003
there are many prepackaged and configured,

18
00:00:44.003 --> 00:00:46.003
spring boot actuator endpoints

19
00:00:46.003 --> 00:00:48.002
that you can access.

20
00:00:48.002 --> 00:00:50.002
By default however,

21
00:00:50.002 --> 00:00:55.004
the only one available unsecured is the health monitor.

22
00:00:55.004 --> 00:00:58.005
If you want to access these other endpoints

23
00:00:58.005 --> 00:01:01.005
you need to decide with your team if it's worth the risk

24
00:01:01.005 --> 00:01:03.008
of exposing these unsecured

25
00:01:03.008 --> 00:01:06.007
or you can apply some security to them

26
00:01:06.007 --> 00:01:09.002
via spring boot security.

27
00:01:09.002 --> 00:01:11.001
Let's run through a few examples

28
00:01:11.001 --> 00:01:13.000
and see how to add access

29
00:01:13.000 --> 00:01:15.009
to more than just the health endpoint.

30
00:01:15.009 --> 00:01:19.007
We're using 0105 begin for this video.

31
00:01:19.007 --> 00:01:23.006
If you have not opened the code base yet, please do so now.

32
00:01:23.006 --> 00:01:27.002
With the code base loaded and open in intelliJ,

33
00:01:27.002 --> 00:01:30.007
we'll open the application dot properties

34
00:01:30.007 --> 00:01:33.002
and just below the management endpoint health,

35
00:01:33.002 --> 00:01:36.007
show details always, going to hit enter,

36
00:01:36.007 --> 00:01:38.009
and we're going to explicitly indicate

37
00:01:38.009 --> 00:01:41.003
which actuator endpoints are available

38
00:01:41.003 --> 00:01:43.002
outside the security model.

39
00:01:43.002 --> 00:01:45.008
We'll do this by typing,

40
00:01:45.008 --> 00:01:55.000
management, endpoints, web, exposure,

41
00:01:55.000 --> 00:02:03.005
include, health info metrics and loggers.

42
00:02:03.005 --> 00:02:05.001
Now you could expose all of these

43
00:02:05.001 --> 00:02:09.002
by changing this to a wild card and using an asterisks

44
00:02:09.002 --> 00:02:11.005
which would display all endpoints.

45
00:02:11.005 --> 00:02:13.003
Okay, let's save that,

46
00:02:13.003 --> 00:02:16.008
go down to our terminal window,

47
00:02:16.008 --> 00:02:24.002
gradle clean build, hit enter

48
00:02:24.002 --> 00:02:25.004
and we'll run the application

49
00:02:25.004 --> 00:02:33.009
with Java dash jar dash dspring profiles dot active

50
00:02:33.009 --> 00:02:38.000
equals broad build libs,

51
00:02:38.000 --> 00:02:42.005
tab over for the application dot jar, hit enter.

52
00:02:42.005 --> 00:02:44.007
Okay, and finally, let's go ahead

53
00:02:44.007 --> 00:02:48.004
and open our browser window.

54
00:02:48.004 --> 00:02:54.002
We'll type HTTP, colon local host,

55
00:02:54.002 --> 00:02:58.008
let's go down here to this one, actuator hit enter.

56
00:02:58.008 --> 00:03:01.007
And now because spring boot actuator will return

57
00:03:01.007 --> 00:03:03.008
these results in JSON,

58
00:03:03.008 --> 00:03:07.001
we need to make it a little easier to read by formatting it.

59
00:03:07.001 --> 00:03:09.007
Now we can do this by installing a Chrome extension

60
00:03:09.007 --> 00:03:11.005
called JSON formatter.

61
00:03:11.005 --> 00:03:14.004
If you're using postman, even better.

62
00:03:14.004 --> 00:03:17.009
I won't show you postman, but for JSON formatter in Chrome,

63
00:03:17.009 --> 00:03:20.001
I've already opened the extensions.

64
00:03:20.001 --> 00:03:26.002
We're going to search for JSON formatter, hit enter.

65
00:03:26.002 --> 00:03:29.006
First option that comes up is the right one.

66
00:03:29.006 --> 00:03:34.006
We'll click add to Chrome and add the extension.

67
00:03:34.006 --> 00:03:38.007
This'll take just a moment.

68
00:03:38.007 --> 00:03:46.001
Okay, add it, go back to our page and let's refresh.

69
00:03:46.001 --> 00:03:50.003
Much better, the actuator endpoint tells us

70
00:03:50.003 --> 00:03:52.006
which web endpoints from our application

71
00:03:52.006 --> 00:03:54.004
are available to us.

72
00:03:54.004 --> 00:03:56.009
Because we explicitly decided to expose,

73
00:03:56.009 --> 00:03:59.002
health info metrics and loggers,

74
00:03:59.002 --> 00:04:02.003
we see that all of these endpoints are available.

75
00:04:02.003 --> 00:04:07.005
Let's look at the metrics, hit enter,

76
00:04:07.005 --> 00:04:09.006
this gives us a whole host of metrics

77
00:04:09.006 --> 00:04:10.006
we can incorporate

78
00:04:10.006 --> 00:04:13.002
into our application monitoring solutions.

79
00:04:13.002 --> 00:04:17.000
This list is basically the metric URLs that we can look at

80
00:04:17.000 --> 00:04:18.000
with our application.

81
00:04:18.000 --> 00:04:22.009
So for example, if we copy Tomcat sessions active current

82
00:04:22.009 --> 00:04:26.009
and paste it at the end of metrics,

83
00:04:26.009 --> 00:04:28.006
we're going to see information

84
00:04:28.006 --> 00:04:31.005
about active current sessions.

85
00:04:31.005 --> 00:04:35.000
And we could look at any number of metrics here.

86
00:04:35.000 --> 00:04:37.005
Let's go ahead and change all this.

87
00:04:37.005 --> 00:04:41.004
From the metrics we will type in info, hit enter.

88
00:04:41.004 --> 00:04:44.000
And currently this displays nothing.

89
00:04:44.000 --> 00:04:46.001
This endpoint is set up to display,

90
00:04:46.001 --> 00:04:49.005
application specific information that we want exposed,

91
00:04:49.005 --> 00:04:53.009
like name, description, author, bio, et cetera.

92
00:04:53.009 --> 00:04:56.007
Let's add some info, information real quick

93
00:04:56.007 --> 00:05:01.001
to our application dot properties.

94
00:05:01.001 --> 00:05:05.000
I'm going to hit enter here, give a tag for info

95
00:05:05.000 --> 00:05:08.000
and I'm going to pace these to save time.

96
00:05:08.000 --> 00:05:11.003
You can add other details as well,

97
00:05:11.003 --> 00:05:15.000
as long as it begins with info dot.

98
00:05:15.000 --> 00:05:15.009
We'll save that,

99
00:05:15.009 --> 00:05:19.001
we'll come down to our terminal, control+C

100
00:05:19.001 --> 00:05:22.003
and I'll tab up for gradle clean build.

101
00:05:22.003 --> 00:05:25.002
By the way, the up arrows on the keyboard

102
00:05:25.002 --> 00:05:27.006
will scroll through the history of commands.

103
00:05:27.006 --> 00:05:31.004
This will make things quicker for you.

104
00:05:31.004 --> 00:05:38.001
Okay, scroll up again, run the application.

105
00:05:38.001 --> 00:05:41.004
Let's go back to our screen

106
00:05:41.004 --> 00:05:44.001
and if we refresh it,

107
00:05:44.001 --> 00:05:48.002
we see the application specific info that we've added.

108
00:05:48.002 --> 00:05:49.008
Now, this is because we've added it

109
00:05:49.008 --> 00:05:53.001
to the default application dot properties.

110
00:05:53.001 --> 00:05:56.009
Remember, any global properties that we want added

111
00:05:56.009 --> 00:05:59.000
are agnostic of the environment,

112
00:05:59.000 --> 00:06:00.002
and these should be added

113
00:06:00.002 --> 00:06:04.002
to our default application dot properties.

114
00:06:04.002 --> 00:06:05.004
Okay, so one last thing,

115
00:06:05.004 --> 00:06:08.000
we're going to review as an example with actuators,

116
00:06:08.000 --> 00:06:09.002
and that is the loggers.

117
00:06:09.002 --> 00:06:11.003
Go back to the browser again,

118
00:06:11.003 --> 00:06:15.007
we will change the info to loggers, hit enter.

119
00:06:15.007 --> 00:06:19.002
As you can see, this tells us the available logging levels

120
00:06:19.002 --> 00:06:23.000
and loggers that are set per package level.

121
00:06:23.000 --> 00:06:25.006
So far we've only been making query calls

122
00:06:25.006 --> 00:06:27.004
with these actuators

123
00:06:27.004 --> 00:06:31.000
but spring boot actuator can also accept input

124
00:06:31.000 --> 00:06:33.005
and this is one of those circumstances,

125
00:06:33.005 --> 00:06:37.004
where we may want to change the logging level on the fly.

126
00:06:37.004 --> 00:06:40.009
To do this, we're going to use the curl command

127
00:06:40.009 --> 00:06:42.006
and make a post statement

128
00:06:42.006 --> 00:06:45.002
for our new configured logging level.

129
00:06:45.002 --> 00:06:46.002
As I understand it

130
00:06:46.002 --> 00:06:50.007
curl dot EXC is also available on windows 10 and newer.

131
00:06:50.007 --> 00:06:53.007
So let's open up a new terminal window

132
00:06:53.007 --> 00:07:00.003
and we're going to type curl dot HTTP, colon slash slash,

133
00:07:00.003 --> 00:07:08.001
local host colon 9,001 actuator slash loggers

134
00:07:08.001 --> 00:07:09.007
and then the package.

135
00:07:09.007 --> 00:07:20.001
Org spring framework, single quotes dash I, dash capital X

136
00:07:20.001 --> 00:07:25.005
post back slash, we'll give a space dash H,

137
00:07:25.005 --> 00:07:28.001
this is for the header of our post.

138
00:07:28.001 --> 00:07:31.001
We're going to specify the content type now.

139
00:07:31.001 --> 00:07:41.001
Content type, the colon application slash JSON single quotes

140
00:07:41.001 --> 00:07:43.001
another back slash, hit enter.

141
00:07:43.001 --> 00:07:46.004
Space again, D and this is where we're going

142
00:07:46.004 --> 00:07:49.003
to specify the package that we're submitting.

143
00:07:49.003 --> 00:07:52.009
So I use curly bracket as it is JSON,

144
00:07:52.009 --> 00:07:59.005
I configured level, double quotes colon, double quotes again

145
00:07:59.005 --> 00:08:02.009
and currently everything is set to info

146
00:08:02.009 --> 00:08:09.007
but we're going to change this package to debug and hit enter.

147
00:08:09.007 --> 00:08:11.009
It gave us a 204, it's good.

148
00:08:11.009 --> 00:08:14.005
Now to prove my point, if we type debug,

149
00:08:14.005 --> 00:08:16.007
we can see it's only listed here

150
00:08:16.007 --> 00:08:20.009
but if I refresh and I do a search again for debug

151
00:08:20.009 --> 00:08:23.002
we see that we've now modified

152
00:08:23.002 --> 00:08:27.006
the actual package level to debug.

153
00:08:27.006 --> 00:08:30.005
Okay, let's go back and change this again.

154
00:08:30.005 --> 00:08:35.003
Back to info, hit enter.

155
00:08:35.003 --> 00:08:38.006
We'll refresh, we'll find

156
00:08:38.006 --> 00:08:40.000
and we're back to normal again.

