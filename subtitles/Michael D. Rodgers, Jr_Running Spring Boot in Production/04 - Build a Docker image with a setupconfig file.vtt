WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Assuming that Docker has been installed

2
00:00:02.004 --> 00:00:03.009
for your operating system,

3
00:00:03.009 --> 00:00:06.004
and that all the dependencies are fulfilled,

4
00:00:06.004 --> 00:00:10.003
we will now move on to packaging our jar in a Docker image.

5
00:00:10.003 --> 00:00:13.008
If you had not completed the Docker installation procedures

6
00:00:13.008 --> 00:00:17.004
in the introduction, set up your environment video

7
00:00:17.004 --> 00:00:19.002
at the start of this series,

8
00:00:19.002 --> 00:00:21.005
please go back and do that now.

9
00:00:21.005 --> 00:00:25.002
Additionally, we'll need to ensure that Docker is running.

10
00:00:25.002 --> 00:00:27.003
On a Mac, this is pretty easy,

11
00:00:27.003 --> 00:00:29.001
we'll use the Command + space bar

12
00:00:29.001 --> 00:00:32.007
and type Docker and hit Enter.

13
00:00:32.007 --> 00:00:36.004
We will need to do this before we go forward.

14
00:00:36.004 --> 00:00:39.008
With Docker running, let's go back to IntelliJ.

15
00:00:39.008 --> 00:00:42.004
For this video, we will use the source code

16
00:00:42.004 --> 00:00:45.004
found in 0204 Begin.

17
00:00:45.004 --> 00:00:48.004
Now, once that's open and complete,

18
00:00:48.004 --> 00:00:51.000
we're going to start by creating a new file,

19
00:00:51.000 --> 00:00:56.001
clicking on the project root folder, going to new and file.

20
00:00:56.001 --> 00:00:59.007
We'll call this file Docker with a capital D,

21
00:00:59.007 --> 00:01:02.000
file, hit Enter.

22
00:01:02.000 --> 00:01:13.008
We'll start by typing from open jdk:8-jdk-alpine.

23
00:01:13.008 --> 00:01:15.003
Hit Enter.

24
00:01:15.003 --> 00:01:19.005
After the colon, we're specifying the version of JDK

25
00:01:19.005 --> 00:01:24.008
with the specific instance of Alpine Linux OS being used.

26
00:01:24.008 --> 00:01:28.004
Next, we need to specify a maintainer for this image.

27
00:01:28.004 --> 00:01:30.007
For me, I'm putting my website.

28
00:01:30.007 --> 00:01:33.002
For you, please put the organization

29
00:01:33.002 --> 00:01:35.003
that you are doing work for.

30
00:01:35.003 --> 00:01:38.003
This is helpful, especially if you choose to push your image

31
00:01:38.003 --> 00:01:39.008
to Docker hub.

32
00:01:39.008 --> 00:01:46.002
We'll type maintainer and your organization

33
00:01:46.002 --> 00:01:47.008
and hit Enter.

34
00:01:47.008 --> 00:01:48.006
On the next line,

35
00:01:48.006 --> 00:01:50.006
we'll create an ARG section

36
00:01:50.006 --> 00:02:00.003
and we're going to type ARG space JAR underscore file.

37
00:02:00.003 --> 00:02:03.001
And we'll finish that by providing the location

38
00:02:03.001 --> 00:02:09.008
where our springboot prod application jar is been built.

39
00:02:09.008 --> 00:02:22.008
build/libs/SpringBootProdApplication-0.0.1

40
00:02:22.008 --> 00:02:24.004
SNAPSHOT.jar

41
00:02:24.004 --> 00:02:26.006
and hit Enter.

42
00:02:26.006 --> 00:02:29.002
Having the ARG section will make this easier

43
00:02:29.002 --> 00:02:31.004
and more succinct than our Docker file.

44
00:02:31.004 --> 00:02:34.003
Next, we're going to type copy

45
00:02:34.003 --> 00:02:37.006
and we're to use the dollar sign curly brackets

46
00:02:37.006 --> 00:02:43.005
and specify the jar file argument

47
00:02:43.005 --> 00:02:47.006
and copy this to app.jar.

48
00:02:47.006 --> 00:02:50.006
This takes our ARG parameter and copies the name

49
00:02:50.006 --> 00:02:55.006
of our jar file to a more simplified name of app.jar.

50
00:02:55.006 --> 00:02:58.004
There are some security concerns that had been raised

51
00:02:58.004 --> 00:03:00.006
recently about Docker images

52
00:03:00.006 --> 00:03:03.007
with a user running root applications

53
00:03:03.007 --> 00:03:06.003
inside a container to break free

54
00:03:06.003 --> 00:03:09.005
from the container and compromise the host.

55
00:03:09.005 --> 00:03:12.006
The springboot Docker guide recommends using

56
00:03:12.006 --> 00:03:17.003
a non-root account for our applications to run with.

57
00:03:17.003 --> 00:03:19.002
And let's do that now.

58
00:03:19.002 --> 00:03:21.005
Right above the ARG statement

59
00:03:21.005 --> 00:03:24.002
and below the maintainer, we'll hit Enter,

60
00:03:24.002 --> 00:03:34.004
and we're going to type run add group space -S mygroup

61
00:03:34.004 --> 00:03:49.004
&& adduser -S myuser space -G space mygroup.

62
00:03:49.004 --> 00:03:51.007
If you're creating a Windows Docker image,

63
00:03:51.007 --> 00:03:53.009
the specific commands would differ.

64
00:03:53.009 --> 00:04:02.009
Next, we're going to type user space my user: my group.

65
00:04:02.009 --> 00:04:04.009
This will specify the user name

66
00:04:04.009 --> 00:04:09.005
and optionally the user group to use when running the image

67
00:04:09.005 --> 00:04:14.000
and for any run command and entry point

68
00:04:14.000 --> 00:04:16.007
after the specification.

69
00:04:16.007 --> 00:04:18.002
We'll come down to the last line

70
00:04:18.002 --> 00:04:21.006
and now we're going to type entry point.

71
00:04:21.006 --> 00:04:24.009
This is the command that specifies, in order,

72
00:04:24.009 --> 00:04:28.002
what needs to be invoked for the central application

73
00:04:28.002 --> 00:04:29.008
of our Docker image.

74
00:04:29.008 --> 00:04:32.001
This takes an array of commands.

75
00:04:32.001 --> 00:04:48.008
So we're going to type ["Java", "=jar", "Application.jar"],

76
00:04:48.008 --> 00:04:51.005
with the closing bracket.

77
00:04:51.005 --> 00:04:54.007
Now, this is also where we would pass our spring profile,

78
00:04:54.007 --> 00:04:57.006
if needed, by including additional entry

79
00:04:57.006 --> 00:05:02.001
of -d spring.profiles.active equals dev

80
00:05:02.001 --> 00:05:05.002
or whatever the environment may be.

81
00:05:05.002 --> 00:05:07.009
For now, I'm not going add this here

82
00:05:07.009 --> 00:05:10.007
but use a different methodology

83
00:05:10.007 --> 00:05:12.006
after we've built the Docker image

84
00:05:12.006 --> 00:05:16.004
to provide those spring environment profile variables.

85
00:05:16.004 --> 00:05:19.009
So next, we need to go ahead and save the application.

86
00:05:19.009 --> 00:05:27.003
We're going to do a gradle clean build.

87
00:05:27.003 --> 00:05:30.009
And then when this is done, from the same terminal

88
00:05:30.009 --> 00:05:38.004
window, we'll run the Docker build command.

89
00:05:38.004 --> 00:05:51.002
Let's type Docker build -t springboot prod image space dot.

90
00:05:51.002 --> 00:05:54.001
Let me break this down before you hit Enter.

91
00:05:54.001 --> 00:05:57.004
In my example, I type Docker build -t

92
00:05:57.004 --> 00:06:00.004
springboot - prod - image

93
00:06:00.004 --> 00:06:05.007
which uses the tag shorthand option for naming the tag.

94
00:06:05.007 --> 00:06:07.008
This will be important in a moment

95
00:06:07.008 --> 00:06:09.009
for providing a more user-friendly way

96
00:06:09.009 --> 00:06:11.007
of identifying the image.

97
00:06:11.007 --> 00:06:14.006
The last part of this command specifies the path.

98
00:06:14.006 --> 00:06:17.003
In this instance, I include a dot,

99
00:06:17.003 --> 00:06:21.000
which says look here in the local directory.

100
00:06:21.000 --> 00:06:25.000
That's kind of important since the arg uses a relative path

101
00:06:25.000 --> 00:06:26.008
for this directory.

102
00:06:26.008 --> 00:06:32.002
Let's hit Enter and run the build.

103
00:06:32.002 --> 00:06:36.002
All right, now it's time to run the build.

104
00:06:36.002 --> 00:06:41.001
Let's type Docker run -d,

105
00:06:41.001 --> 00:06:44.004
which runs in detached, meaning it won't display

106
00:06:44.004 --> 00:06:45.005
in the window.

107
00:06:45.005 --> 00:06:48.003
And we'll write -p,

108
00:06:48.003 --> 00:06:51.005
which is to specify the port to connect to.

109
00:06:51.005 --> 00:06:54.000
So for us, that would be 9090,

110
00:06:54.000 --> 00:06:57.005
and the springboot app would be 9,000.

111
00:06:57.005 --> 00:06:59.005
And then we're going to type E,

112
00:06:59.005 --> 00:07:00.008
which is for environment.

113
00:07:00.008 --> 00:07:14.004
We'll use "SPRING_PROFILES_ACTIVE=prod".

114
00:07:14.004 --> 00:07:16.001
And then this is going to be followed

115
00:07:16.001 --> 00:07:18.006
with the image tag name.

116
00:07:18.006 --> 00:07:27.008
We'll type springboot prod image

117
00:07:27.008 --> 00:07:30.007
and we'll hit Enter.

118
00:07:30.007 --> 00:07:34.000
This generates a very long sequence of characters

119
00:07:34.000 --> 00:07:37.002
that start with the container ID.

120
00:07:37.002 --> 00:07:39.006
Okay, now we're going to do one more thing

121
00:07:39.006 --> 00:07:41.008
before testing the container,

122
00:07:41.008 --> 00:07:48.002
and that is to type Docker ES - A.

123
00:07:48.002 --> 00:07:53.002
And here we can see our container.

124
00:07:53.002 --> 00:07:55.005
Let's open up our browser.

125
00:07:55.005 --> 00:08:00.006
We'll go to local host:90,90, and hit Enter.

126
00:08:00.006 --> 00:08:03.009
And there we have our application running.

127
00:08:03.009 --> 00:08:06.008
There's one last thing I want to show you

128
00:08:06.008 --> 00:08:10.008
and that is, now we're going to use a built-in

129
00:08:10.008 --> 00:08:14.009
that springboot gradle plugin has to build Docker images

130
00:08:14.009 --> 00:08:19.005
in one go, along with our clean build options.

131
00:08:19.005 --> 00:08:22.007
Now, first, let's go ahead and stop our current

132
00:08:22.007 --> 00:08:23.007
Docker instance.

133
00:08:23.007 --> 00:08:29.006
We'll type Docker container stop.

134
00:08:29.006 --> 00:08:31.007
We'll get the container ID.

135
00:08:31.007 --> 00:08:35.002
Copy that and paste it in.

136
00:08:35.002 --> 00:08:36.001
And stop.

137
00:08:36.001 --> 00:08:42.005
Go back to our Chrome window and refresh.

138
00:08:42.005 --> 00:08:44.004
I stopped the wrong image.

139
00:08:44.004 --> 00:08:45.009
Let's type this again.

140
00:08:45.009 --> 00:08:49.007
Docker container stop.

141
00:08:49.007 --> 00:08:52.002
I have several images sitting on the background here

142
00:08:52.002 --> 00:08:53.008
that I've been working with.

143
00:08:53.008 --> 00:08:57.000
We'll copy this container ID,

144
00:08:57.000 --> 00:08:59.007
paste it in, hit stop.

145
00:08:59.007 --> 00:09:02.003
Go back, refresh.

146
00:09:02.003 --> 00:09:04.000
It stopped.

147
00:09:04.000 --> 00:09:07.008
This springboot gradle plugin functionality

148
00:09:07.008 --> 00:09:10.004
is available out of the box.

149
00:09:10.004 --> 00:09:12.006
And I wanted to show you two ways to build

150
00:09:12.006 --> 00:09:14.002
this Docker container.

151
00:09:14.002 --> 00:09:16.009
The second way with springboot,

152
00:09:16.009 --> 00:09:20.004
it's been available since springboot 2.3.

153
00:09:20.004 --> 00:09:23.006
And all it requires for us is to type

154
00:09:23.006 --> 00:09:31.005
gradle w space boot build image,

155
00:09:31.005 --> 00:09:34.007
pay attention to the YAML case syntax here,

156
00:09:34.007 --> 00:09:39.007
space -- the image name,

157
00:09:39.007 --> 00:09:42.002
and this is where we're going to type our organization

158
00:09:42.002 --> 00:09:43.009
and then our image name.

159
00:09:43.009 --> 00:09:58.005
So we'll say = MDR solutions/ springboot-prod-image,

160
00:09:58.005 --> 00:10:01.002
and then we'll hit Enter.

161
00:10:01.002 --> 00:10:05.004
The boot build image command uses under the hood,

162
00:10:05.004 --> 00:10:06.008
the keto build packs.

163
00:10:06.008 --> 00:10:09.003
And I recommend that you take a look at

164
00:10:09.003 --> 00:10:10.008
the documentation at

165
00:10:10.008 --> 00:10:17.009
https://keto.io/docs.

166
00:10:17.009 --> 00:10:20.001
The interesting thing about this plugin

167
00:10:20.001 --> 00:10:24.004
is that it does not require a Docker file to run.

168
00:10:24.004 --> 00:10:28.003
The boot build image plugin is highly opinionated

169
00:10:28.003 --> 00:10:30.004
and behind the scenes,

170
00:10:30.004 --> 00:10:34.000
it sets the users and the groups to satisfy security

171
00:10:34.000 --> 00:10:37.001
like we did in the Docker file.

172
00:10:37.001 --> 00:10:40.005
You can specify as well in your gradle file

173
00:10:40.005 --> 00:10:43.001
using the boot build image task

174
00:10:43.001 --> 00:10:44.009
and provide a host of other details

175
00:10:44.009 --> 00:10:47.007
like the image name, the build image,

176
00:10:47.007 --> 00:10:51.006
the run image, the environment details, and much more.

177
00:10:51.006 --> 00:10:53.009
Now this will take some time to run

178
00:10:53.009 --> 00:10:55.008
and build the first time.

179
00:10:55.008 --> 00:11:02.001
Subsequent builds will actually go faster.

180
00:11:02.001 --> 00:11:03.007
So with that done,

181
00:11:03.007 --> 00:11:06.008
we can finally run our Docker image that was built

182
00:11:06.008 --> 00:11:10.007
with the boot build image task plugin through gradle.

183
00:11:10.007 --> 00:11:14.000
What I want to show you here is pay attention

184
00:11:14.000 --> 00:11:16.002
to the successfully built image name.

185
00:11:16.002 --> 00:11:20.002
You want to copy that image name

186
00:11:20.002 --> 00:11:34.009
and then type Docker run -p 9090:9000 - E, all quotes again,

187
00:11:34.009 --> 00:11:44.007
upper case SPRING PROFILES ACTIVE=prod, closed quotes.

188
00:11:44.007 --> 00:11:49.004
- t, and we want to paste in the name of our image.

189
00:11:49.004 --> 00:11:54.004
So we'll do paste and hit Enter.

190
00:11:54.004 --> 00:11:58.002
Now, in this instance, we have not run it in detach mode.

191
00:11:58.002 --> 00:12:00.009
If you remember, that is with a -d

192
00:12:00.009 --> 00:12:06.000
so that you can see the application running in the logs.

