WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] For this tutorial, you'll need

2
00:00:02.004 --> 00:00:05.008
to have installed and configured Vagrant.

3
00:00:05.008 --> 00:00:08.009
Please refer to the introduction chapter tutorial

4
00:00:08.009 --> 00:00:12.005
set up your environment on how to do just that.

5
00:00:12.005 --> 00:00:14.004
In the terminal window,

6
00:00:14.004 --> 00:00:16.005
let's start by setting up our Vagrant instance.

7
00:00:16.005 --> 00:00:17.007
First we'll type

8
00:00:17.007 --> 00:00:25.009
make directory ~/vagrang_amzn2.

9
00:00:25.009 --> 00:00:26.007
Hit Enter.

10
00:00:26.007 --> 00:00:30.007
We're going to cd into that directory.

11
00:00:30.007 --> 00:00:33.004
Now we're going to initialize our Vagrant instance

12
00:00:33.004 --> 00:00:43.004
by typing vagrant init gbailey/amzn2.

13
00:00:43.004 --> 00:00:44.008
Hit Enter.

14
00:00:44.008 --> 00:00:48.000
Now, let's start up the Vagrant instance.

15
00:00:48.000 --> 00:00:53.000
This may take a few minutes the first time.

16
00:00:53.000 --> 00:00:56.001
To make transferring our jar file over easier,

17
00:00:56.001 --> 00:00:57.009
we're going to install Vagrant scp.

18
00:00:57.009 --> 00:00:59.003
And we'll do that by typing

19
00:00:59.003 --> 00:01:09.005
vagrant plugin install vagrant-scp.

20
00:01:09.005 --> 00:01:13.008
While this is installing, let's go over to IntelliJ.

21
00:01:13.008 --> 00:01:17.008
Ensure you have 02_03 begin loaded.

22
00:01:17.008 --> 00:01:21.000
Once there, go ahead and build our jar file

23
00:01:21.000 --> 00:01:23.004
inside of the IntelliJ terminal window

24
00:01:23.004 --> 00:01:30.005
by typing gradlew clean build.

25
00:01:30.005 --> 00:01:32.008
Now inside the IntelliJ terminal window,

26
00:01:32.008 --> 00:01:35.006
we're going to copy our jar file

27
00:01:35.006 --> 00:01:39.003
over to the same directory as our Vagrant file.

28
00:01:39.003 --> 00:01:45.008
And we'll do this by typing copy cp build libs

29
00:01:45.008 --> 00:01:50.006
tab over for the project name .jar

30
00:01:50.006 --> 00:01:55.000
and we'll type the till /Vagrant, amazon2 and hit Enter.

31
00:01:55.000 --> 00:01:57.007
With that done, let's switch back over

32
00:01:57.007 --> 00:01:59.009
to our terminal window.

33
00:01:59.009 --> 00:02:04.002
The Vagrant scp command must be run from the same directory

34
00:02:04.002 --> 00:02:08.002
as the Vagrant file, as you can see here.

35
00:02:08.002 --> 00:02:14.005
So let's run vagrant scp, make our newly copied

36
00:02:14.005 --> 00:02:17.001
over file from this directory

37
00:02:17.001 --> 00:02:23.003
and type springBootProdApplication.jar.

38
00:02:23.003 --> 00:02:26.002
You'll notice this is minus the versioning information

39
00:02:26.002 --> 00:02:27.008
and hit Enter.

40
00:02:27.008 --> 00:02:30.007
This will copy over our newly built spring boot jar

41
00:02:30.007 --> 00:02:34.002
to the Linux instance.

42
00:02:34.002 --> 00:02:37.009
Let's clean up our screen by typing clear.

43
00:02:37.009 --> 00:02:43.002
Now we want to start up vagrant we'll type vagrant ssh

44
00:02:43.002 --> 00:02:49.003
and this will allow us to log to the Linux ssh instance.

45
00:02:49.003 --> 00:02:51.007
Inside of vagrant, we need to first update

46
00:02:51.007 --> 00:02:59.004
by running sudo yum update -y and hit Enter.

47
00:02:59.004 --> 00:03:01.002
Next let's install a JDK.

48
00:03:01.002 --> 00:03:02.009
To find a valid jdk,

49
00:03:02.009 --> 00:03:13.003
we will type sudo yum search java | grep jdk.

50
00:03:13.003 --> 00:03:17.005
We're going to use jdk version eight,

51
00:03:17.005 --> 00:03:22.007
the x86.64, highlight it, copy it.

52
00:03:22.007 --> 00:03:28.004
And then in our window type sudo yum install

53
00:03:28.004 --> 00:03:29.009
and will paste in the rest.

54
00:03:29.009 --> 00:03:32.009
Hit Enter.

55
00:03:32.009 --> 00:03:36.008
Type y, hit Enter.

56
00:03:36.008 --> 00:03:38.003
Okay.

57
00:03:38.003 --> 00:03:41.000
Now we need to install the RPM build tools.

58
00:03:41.000 --> 00:03:42.001
We'll do this by typing

59
00:03:42.001 --> 00:03:58.007
sudo yum install -y rpmdev tools rpm-build tree.

60
00:03:58.007 --> 00:04:00.000
With that done,

61
00:04:00.000 --> 00:04:07.004
we're going to run rpmdev-set up tree.

62
00:04:07.004 --> 00:04:11.007
This will set up our rpm file structure.

63
00:04:11.007 --> 00:04:16.009
If we type ls- la now you'll see the rpm macros.

64
00:04:16.009 --> 00:04:21.005
And if we type tree, we'll see a very neat visual display

65
00:04:21.005 --> 00:04:23.003
of the files.

66
00:04:23.003 --> 00:04:28.007
Now let's move our springBootProdApplication jar

67
00:04:28.007 --> 00:04:31.008
over to the sources folder.

68
00:04:31.008 --> 00:04:36.007
So we type move mv SpringBootApplication rpm

69
00:04:36.007 --> 00:04:43.000
build is the directory sources and hit Enter.

70
00:04:43.000 --> 00:04:45.003
Next, we need to create a service script

71
00:04:45.003 --> 00:04:48.008
so that when our rpm is ready to be installed,

72
00:04:48.008 --> 00:04:52.003
we can start and stop and see the status

73
00:04:52.003 --> 00:04:55.003
with the standard system ctl commands.

74
00:04:55.003 --> 00:05:01.004
We'll do this by typing vi rpm build sources

75
00:05:01.004 --> 00:05:02.003
and the name of the script

76
00:05:02.003 --> 00:05:10.000
will be SpringBootProdApplication.service.

77
00:05:10.000 --> 00:05:11.004
Hit Enter.

78
00:05:11.004 --> 00:05:15.008
I'll type I for insert and the first marker is unit

79
00:05:15.008 --> 00:05:17.008
with a square bracket.

80
00:05:17.008 --> 00:05:18.006
Hit Enter.

81
00:05:18.006 --> 00:05:21.002
Next line will be description.

82
00:05:21.002 --> 00:05:27.008
This will be our Spring Boot Prod Application.

83
00:05:27.008 --> 00:05:32.005
I'll load after that will be the after command

84
00:05:32.005 --> 00:05:38.005
network-online target.

85
00:05:38.005 --> 00:05:41.000
Space down two we'll do another square bracket

86
00:05:41.000 --> 00:05:43.008
and type service.

87
00:05:43.008 --> 00:05:48.000
Underneath that, we'll use the type command followed

88
00:05:48.000 --> 00:05:53.009
by simple and we'll specify our working directory.

89
00:05:53.009 --> 00:06:03.006
This will be var opt spring-boot-prod

90
00:06:03.006 --> 00:06:08.004
and this will be the directory that stores our application.

91
00:06:08.004 --> 00:06:10.003
Next, we need an execute command

92
00:06:10.003 --> 00:06:25.000
and this will be ExecStart=/usr/bin/java -jar -Dspring

93
00:06:25.000 --> 00:06:31.002
profiles.active=prod.

94
00:06:31.002 --> 00:06:41.007
And then the location will be /usr/local/spring-boot-prod.

95
00:06:41.007 --> 00:06:42.005
And then the name

96
00:06:42.005 --> 00:06:51.003
of our jar file SpringBootPodApplication.jar.

97
00:06:51.003 --> 00:06:55.001
This of course will be where the jar file is stored.

98
00:06:55.001 --> 00:06:55.009
And you can see that here.

99
00:06:55.009 --> 00:07:01.001
I'm also specifying the Spring Boot profile to be activated.

100
00:07:01.001 --> 00:07:05.004
Now later on, this script could be scripted

101
00:07:05.004 --> 00:07:07.006
through a continuous integration pipeline

102
00:07:07.006 --> 00:07:11.009
or possibly altered through a gradle build script.

103
00:07:11.009 --> 00:07:13.007
Let's go ahead and type the next statement

104
00:07:13.007 --> 00:07:19.009
which is Restart=on-abort.

105
00:07:19.009 --> 00:07:25.009
The user is going to be spring-boot-prod

106
00:07:25.009 --> 00:07:33.002
and the group will also be spring-boot-prod.

107
00:07:33.002 --> 00:07:36.006
Hit space again for the square bracket.

108
00:07:36.006 --> 00:07:38.008
And then the install command.

109
00:07:38.008 --> 00:07:50.007
This statement will be WantedBy=multi-user.target.

110
00:07:50.007 --> 00:07:55.008
With that, we'll press escape colon w, save it.

111
00:07:55.008 --> 00:07:58.000
We're going to pause for a moment and look

112
00:07:58.000 --> 00:08:02.000
at the file to make sure we haven't made any mistakes.

113
00:08:02.000 --> 00:08:04.001
Okay. It looks good to me.

114
00:08:04.001 --> 00:08:06.008
We're going to type colon Q for quit.

115
00:08:06.008 --> 00:08:09.003
Okay, so now we need to work

116
00:08:09.003 --> 00:08:12.001
on our spec file, which is crucial.

117
00:08:12.001 --> 00:08:14.006
I would recommend that yoyu keep both your service

118
00:08:14.006 --> 00:08:16.009
and your spec files with your source code

119
00:08:16.009 --> 00:08:20.001
as a part of your builds and for ease of maintenance

120
00:08:20.001 --> 00:08:23.004
instead of creating them from scratch each time.

121
00:08:23.004 --> 00:08:25.000
To create the spec file,

122
00:08:25.000 --> 00:08:28.007
we're first going to let the RPM dev new spec command

123
00:08:28.007 --> 00:08:29.005
do this for us.

124
00:08:29.005 --> 00:08:31.002
And then later we're going to replace it

125
00:08:31.002 --> 00:08:34.001
with a copy from our lab files.

126
00:08:34.001 --> 00:08:47.004
So we'll type rpmdev-newspec rpmbuild/SPECS

127
00:08:47.004 --> 00:08:57.003
/spring-boot-prod-application.spec.

128
00:08:57.003 --> 00:09:00.003
This command will create the file as a template.

129
00:09:00.003 --> 00:09:02.002
We type tree,

130
00:09:02.002 --> 00:09:04.009
we can now see all the various files that have

131
00:09:04.009 --> 00:09:06.003
been created so far.

132
00:09:06.003 --> 00:09:08.006
Next let's update this spec file

133
00:09:08.006 --> 00:09:10.008
with the appropriate details.

134
00:09:10.008 --> 00:09:15.009
And basically this is a templated spec file working with

135
00:09:15.009 --> 00:09:19.007
but we are going to do something different.

136
00:09:19.007 --> 00:09:22.002
This LinkedIn Learning Course is not so much

137
00:09:22.002 --> 00:09:26.005
about the internal workings of RPMs of building RPMs

138
00:09:26.005 --> 00:09:30.000
as it is about providing packaging alternatives

139
00:09:30.000 --> 00:09:33.004
and recipes for your Spring Boot applications.

140
00:09:33.004 --> 00:09:36.008
Because walking through all of the these details

141
00:09:36.008 --> 00:09:38.005
would be extremely tedious

142
00:09:38.005 --> 00:09:41.004
and take much longer than necessary,

143
00:09:41.004 --> 00:09:45.005
I'm including the spec file in the lab files for us.

144
00:09:45.005 --> 00:09:46.008
Let's go ahead and take a look

145
00:09:46.008 --> 00:09:49.005
at the spec file in IntelliJ.

146
00:09:49.005 --> 00:09:52.005
We're going to Command + A

147
00:09:52.005 --> 00:09:57.009
and copy and go back to our terminal window.

148
00:09:57.009 --> 00:10:05.005
And if I do a vi rpmbuild/SPECS/

149
00:10:05.005 --> 00:10:09.000
we'll see the templated file.

150
00:10:09.000 --> 00:10:13.005
I'm going to go ahead and delete this real quick.

151
00:10:13.005 --> 00:10:19.000
And we will paste in copy.

152
00:10:19.000 --> 00:10:24.004
I for insert, paste it in.

153
00:10:24.004 --> 00:10:30.002
I'm going to escape colon w for quit.

154
00:10:30.002 --> 00:10:33.007
So if you're ready, it's actually time

155
00:10:33.007 --> 00:10:36.006
to build our RPM file.

156
00:10:36.006 --> 00:10:42.009
To do this we'll type rpmbuild -ba

157
00:10:42.009 --> 00:10:50.001
dash the directory, rpmbuild/SPECS/

158
00:10:50.001 --> 00:10:53.003
spring-boot-prod-application.spec.

159
00:10:53.003 --> 00:10:55.003
We'll hit Enter.

160
00:10:55.003 --> 00:10:57.007
And if we've typed everything correctly

161
00:10:57.007 --> 00:11:04.004
we should see an exit zero, which means we have no errors.

162
00:11:04.004 --> 00:11:05.005
Awesome.

163
00:11:05.005 --> 00:11:09.008
With that done, we are now ready to install our RPM.

164
00:11:09.008 --> 00:11:19.001
We'll type sudo yum install rpmbuild

165
00:11:19.001 --> 00:11:31.004
RPMS/noarch/SpringBookApplication-0.0.1-1.noarch.rpm

166
00:11:31.004 --> 00:11:37.000
and we're going to give it a -y.

167
00:11:37.000 --> 00:11:39.001
Okay. I'm excited.

168
00:11:39.001 --> 00:11:41.006
Let's validate that it's running

169
00:11:41.006 --> 00:11:44.003
because it should be started by default

170
00:11:44.003 --> 00:11:45.003
once it's installed.

171
00:11:45.003 --> 00:11:47.008
Now we can do this by typing.

172
00:11:47.008 --> 00:11:50.003
First of all, let's clear our screen.

173
00:11:50.003 --> 00:11:56.005
Let's type sudo systemctl status

174
00:11:56.005 --> 00:12:02.000
SpringBootProdApplication.service,

175
00:12:02.000 --> 00:12:03.009
and hit enter.

176
00:12:03.009 --> 00:12:08.008
Oh, it seems to say that we're missing a Java file.

177
00:12:08.008 --> 00:12:10.007
Let's check this real quick.

178
00:12:10.007 --> 00:12:14.003
Java -version.

179
00:12:14.003 --> 00:12:18.009
We have our Java, but looking at this error closely

180
00:12:18.009 --> 00:12:23.000
it seems to say there's no such file mentioned here.

181
00:12:23.000 --> 00:12:29.004
So let's go back to our Spring Boot application service.

182
00:12:29.004 --> 00:12:39.002
We'll type vi rpmbuild/SOURCES/

183
00:12:39.002 --> 00:12:44.005
/SpringBootProdApplication.sevice and hit Enter.

184
00:12:44.005 --> 00:12:47.009
Okay. Do you see my error?

185
00:12:47.009 --> 00:12:51.000
If you don't, there's no such as a VAT file.

186
00:12:51.000 --> 00:12:53.006
Here is only a var directory.

187
00:12:53.006 --> 00:12:59.003
We'll escape, colon W and Q right again and save.

188
00:12:59.003 --> 00:13:04.003
We're going to have to go back and change in the specs

189
00:13:04.003 --> 00:13:07.007
include a new iteration number.

190
00:13:07.007 --> 00:13:10.003
Currently, this is at dash one.

191
00:13:10.003 --> 00:13:13.007
We'll have to increase this by one.

192
00:13:13.007 --> 00:13:28.003
So we'll go vi rpmbuild/SPECS, add into it, enter.

193
00:13:28.003 --> 00:13:32.002
We go to the release, hit I for insert,

194
00:13:32.002 --> 00:13:37.009
change this to 2, escape, colon w quit.

195
00:13:37.009 --> 00:13:42.008
Now we should be ready to rebuild our RPM.

196
00:13:42.008 --> 00:13:55.000
We'll type rpmbuild -ba rpmbuild/SPECS/ and our spec file

197
00:13:55.000 --> 00:13:56.009
and hit enter.

198
00:13:56.009 --> 00:14:00.008
Looks like I'm missing a D, let's correct that.

199
00:14:00.008 --> 00:14:05.006
And run it again.

200
00:14:05.006 --> 00:14:08.003
We have an exit zero, no errors.

201
00:14:08.003 --> 00:14:11.007
Let's go ahead and install our RPM again.

202
00:14:11.007 --> 00:14:23.001
So we'll type sudo yum install rpmbuild/RPMS/noarch

203
00:14:23.001 --> 00:14:26.005
and SpringBootProdApplication-0.0.1-2,

204
00:14:26.005 --> 00:14:33.004
tab over, -y and hit Enter.

205
00:14:33.004 --> 00:14:36.001
Okay. Let's clear the screen.

206
00:14:36.001 --> 00:14:38.001
I'm getting excited.

207
00:14:38.001 --> 00:14:39.007
Let's validate that this is running

208
00:14:39.007 --> 00:14:41.009
because it should be started by default

209
00:14:41.009 --> 00:14:43.004
once it's installed.

210
00:14:43.004 --> 00:14:52.000
We can do this by typing sudo systemctl status

211
00:14:52.000 --> 00:15:00.000
SpringBootProdApplication.service.

212
00:15:00.000 --> 00:15:01.001
Awesome.

213
00:15:01.001 --> 00:15:05.003
Now what we wanted to see was an active running

214
00:15:05.003 --> 00:15:07.000
and this is good.

215
00:15:07.000 --> 00:15:10.006
Let's go ahead and type a curl command against this.

216
00:15:10.006 --> 00:15:14.006
And before I do, I want to alert you

217
00:15:14.006 --> 00:15:19.003
that it can take a few minutes for the application to come

218
00:15:19.003 --> 00:15:22.001
up inside of this Vagrant window.

219
00:15:22.001 --> 00:15:24.002
So if you're at this point

220
00:15:24.002 --> 00:15:26.004
in the video and you run the curl command

221
00:15:26.004 --> 00:15:30.006
it may come back saying it's not found, but it will

222
00:15:30.006 --> 00:15:32.006
if given enough time.

223
00:15:32.006 --> 00:15:50.007
We'll type curl -svo /dev/null http://localhost:9000

224
00:15:50.007 --> 00:15:52.006
and hit Enter.

225
00:15:52.006 --> 00:15:53.007
And as you can see,

226
00:15:53.007 --> 00:15:59.001
we got the HTTP 200 response, which is what we wanted.

227
00:15:59.001 --> 00:16:02.001
And this shows us that the application is up.

228
00:16:02.001 --> 00:16:05.000
Now, let's test one of the actuator endpoints.

229
00:16:05.000 --> 00:16:07.001
So we'll go back over here again,

230
00:16:07.001 --> 00:16:15.000
we'll change it to 9001/actuator and hit Enter.

231
00:16:15.000 --> 00:16:17.005
And we can see also that this is responding

232
00:16:17.005 --> 00:16:21.003
with an HTTP 200 response.

233
00:16:21.003 --> 00:16:27.000
Now, at this point, you could publish this RPM back

234
00:16:27.000 --> 00:16:30.005
for use in production on your server,

235
00:16:30.005 --> 00:16:33.005
just ensure however that the server location

236
00:16:33.005 --> 00:16:37.000
and the Linux version you build the RPM for

237
00:16:37.000 --> 00:16:38.007
is the same as the server

238
00:16:38.007 --> 00:16:40.000
you'll be running it on.

