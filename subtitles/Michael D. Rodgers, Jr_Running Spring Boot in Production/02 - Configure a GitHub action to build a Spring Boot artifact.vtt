WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] In the last several videos,

2
00:00:02.000 --> 00:00:04.002
we've talked about how to build

3
00:00:04.002 --> 00:00:10.001
and package and deploy our Spring Boot apps.

4
00:00:10.001 --> 00:00:12.001
But now with our basic understanding

5
00:00:12.001 --> 00:00:13.004
of GitHub actions,

6
00:00:13.004 --> 00:00:15.002
we're going to create a workflow

7
00:00:15.002 --> 00:00:17.005
that automates the process

8
00:00:17.005 --> 00:00:21.003
of deploying our code to AWS Beanstalk.

9
00:00:21.003 --> 00:00:24.002
One thing I want to point out as we go forward,

10
00:00:24.002 --> 00:00:26.008
this video and the next several videos

11
00:00:26.008 --> 00:00:30.005
are not meant to be deep dives into GitHub actions,

12
00:00:30.005 --> 00:00:32.003
explaining the intricacies

13
00:00:32.003 --> 00:00:35.003
and how to write custom out-of-the-box solutions.

14
00:00:35.003 --> 00:00:37.008
The attempt here is to expose you, the learner,

15
00:00:37.008 --> 00:00:40.000
at a very high level to the possibilities

16
00:00:40.000 --> 00:00:44.000
of how you can write and create your own GitHub workflows.

17
00:00:44.000 --> 00:00:46.007
We're going to be using a couple of pre-written solutions

18
00:00:46.007 --> 00:00:51.004
in this video to explain how one might automate a build,

19
00:00:51.004 --> 00:00:54.008
packaging and deployment of a Spring Boot app

20
00:00:54.008 --> 00:00:57.004
as a JAR to AWS.

21
00:00:57.004 --> 00:00:58.004
For this exercise,

22
00:00:58.004 --> 00:01:00.000
we're going to start off looking

23
00:01:00.000 --> 00:01:03.009
at the repository that we created locally.

24
00:01:03.009 --> 00:01:06.003
If you followed my previous example,

25
00:01:06.003 --> 00:01:09.003
that project is located in your home directory

26
00:01:09.003 --> 00:01:11.008
called SpringBootProduction.

27
00:01:11.008 --> 00:01:14.002
Although we're going to be working out of Git

28
00:01:14.002 --> 00:01:17.005
and this project folder for the next several videos,

29
00:01:17.005 --> 00:01:19.008
the start and ending state

30
00:01:19.008 --> 00:01:22.007
will still be stored in our lab files.

31
00:01:22.007 --> 00:01:27.009
For example, this lab file still has 04_02_begin

32
00:01:27.009 --> 00:01:30.002
and 04_02_end.

33
00:01:30.002 --> 00:01:34.002
Let's go ahead and open our SpringBootProdApplication,

34
00:01:34.002 --> 00:01:38.007
which is in our home directory SpringBootProduction.

35
00:01:38.007 --> 00:01:40.002
I've already opened mine.

36
00:01:40.002 --> 00:01:44.001
Once you're there, go down to the terminal window

37
00:01:44.001 --> 00:01:48.001
and we're going to type git branch.

38
00:01:48.001 --> 00:01:49.000
As we can see here,

39
00:01:49.000 --> 00:01:50.009
we're on the main branch.

40
00:01:50.009 --> 00:01:53.008
So let's create a new branch,

41
00:01:53.008 --> 00:02:04.000
typing git checkout -b jar_workflow_aws.

42
00:02:04.000 --> 00:02:06.002
We'll hit Enter.

43
00:02:06.002 --> 00:02:07.009
Now, we've created the branch

44
00:02:07.009 --> 00:02:10.007
and switched to it all at the same time.

45
00:02:10.007 --> 00:02:13.007
We'll verify by typing git status.

46
00:02:13.007 --> 00:02:16.009
And as you can see, we're on the newly created branch.

47
00:02:16.009 --> 00:02:20.002
Let's go ahead and push this new branch

48
00:02:20.002 --> 00:02:22.000
to our GitHub repository.

49
00:02:22.000 --> 00:02:33.003
We'll type git push -u origin jar_workflow_aws.

50
00:02:33.003 --> 00:02:34.008
Hit Enter.

51
00:02:34.008 --> 00:02:36.009
Mine went through without errors.

52
00:02:36.009 --> 00:02:39.006
You may be prompted, however, for a password,

53
00:02:39.006 --> 00:02:42.009
and this is where you would use the personal access token

54
00:02:42.009 --> 00:02:45.002
that we created before.

55
00:02:45.002 --> 00:02:46.008
Let's switch back to our browser now

56
00:02:46.008 --> 00:02:50.008
and take a look at the SpringBootProduction repository.

57
00:02:50.008 --> 00:02:55.000
If we go ahead and refresh the browser window,

58
00:02:55.000 --> 00:02:59.001
we should see now that there are two branches.

59
00:02:59.001 --> 00:03:00.008
We click the dropdown for main,

60
00:03:00.008 --> 00:03:05.000
we'll see there's main and now jar_workflows_aws.

61
00:03:05.000 --> 00:03:06.008
Let's switch back to IntelliJ.

62
00:03:06.008 --> 00:03:09.000
And we're going to open the github,

63
00:03:09.000 --> 00:03:11.001
workflows and then gradle file.

64
00:03:11.001 --> 00:03:13.007
Github, workflows and then gradle.

65
00:03:13.007 --> 00:03:16.001
I want you to right click on that file,

66
00:03:16.001 --> 00:03:18.006
go down to Refactor, Rename.

67
00:03:18.006 --> 00:03:21.005
We're going to change the name of this

68
00:03:21.005 --> 00:03:30.007
to build-package-deploy.aws.

69
00:03:30.007 --> 00:03:32.009
And we're going to click refactor.

70
00:03:32.009 --> 00:03:35.000
Next, we're going to go down to the terminal window.

71
00:03:35.000 --> 00:03:37.005
We'll type git status.

72
00:03:37.005 --> 00:03:42.002
And then we're going to type git commit -m

73
00:03:42.002 --> 00:03:46.004
changed the name to match

74
00:03:46.004 --> 00:03:51.007
what this workflow will become.

75
00:03:51.007 --> 00:03:54.004
Close quotes, hit Enter.

76
00:03:54.004 --> 00:03:59.003
Okay, so we're going to add some actions

77
00:03:59.003 --> 00:04:01.001
that will create an artifact

78
00:04:01.001 --> 00:04:04.003
that we can download for our automated builds.

79
00:04:04.003 --> 00:04:07.000
Having code-generated artifacts gives us

80
00:04:07.000 --> 00:04:09.000
a clean build environment

81
00:04:09.000 --> 00:04:10.007
for other testing and deploying

82
00:04:10.007 --> 00:04:12.007
to other environments as well.

83
00:04:12.007 --> 00:04:13.009
Before we do this,

84
00:04:13.009 --> 00:04:17.004
we want a way of marking this artifact

85
00:04:17.004 --> 00:04:20.006
for our version with a timestamp.

86
00:04:20.006 --> 00:04:22.006
And this is also very useful

87
00:04:22.006 --> 00:04:27.001
when we get to tracking our JARs in AWS.

88
00:04:27.001 --> 00:04:31.002
So let's use another GitHub workflow created

89
00:04:31.002 --> 00:04:32.009
for this purpose.

90
00:04:32.009 --> 00:04:36.009
Inside the YAML file, we'll scroll to the bottom.

91
00:04:36.009 --> 00:04:41.001
We're going to hit Enter after the run gradle build.

92
00:04:41.001 --> 00:04:43.002
We're going to back space one spot there

93
00:04:43.002 --> 00:04:47.002
and type - name:

94
00:04:47.002 --> 00:04:49.004
and we want to make sure that we follow the formatting.

95
00:04:49.004 --> 00:04:52.000
The formatting here will get you into trouble

96
00:04:52.000 --> 00:04:53.007
when we run this in GitHub later.

97
00:04:53.007 --> 00:04:56.004
So please pay close attention to the formatting.

98
00:04:56.004 --> 00:05:02.007
We'll call this Create Timestamp for Version Info.

99
00:05:02.007 --> 00:05:03.008
Hit Enter.

100
00:05:03.008 --> 00:05:06.002
We're going to use the id field.

101
00:05:06.002 --> 00:05:09.004
We'll use this id field later on, hit Enter.

102
00:05:09.004 --> 00:05:12.008
We're going to type uses:

103
00:05:12.008 --> 00:05:16.002
and this is the prebuilt GitHub action

104
00:05:16.002 --> 00:05:17.007
that we're going to use.

105
00:05:17.007 --> 00:05:25.003
Nanzm/get-time-action

106
00:05:25.003 --> 00:05:28.008
and the version number, @v1.1.

107
00:05:28.008 --> 00:05:30.002
Hit Enter.

108
00:05:30.002 --> 00:05:33.006
I'm going to type with: hit Enter again.

109
00:05:33.006 --> 00:05:35.002
Make sure you're tabbed over.

110
00:05:35.002 --> 00:05:38.003
IntelliJ does this for us automatically.

111
00:05:38.003 --> 00:05:42.009
We'll type format: single quotes,

112
00:05:42.009 --> 00:05:43.009
close single quotes

113
00:05:43.009 --> 00:05:45.006
and inside of that in all caps,

114
00:05:45.006 --> 00:05:48.000
we'll type YYYY

115
00:05:48.000 --> 00:05:50.009
for the year, MM for the month.

116
00:05:50.009 --> 00:05:54.006
DD for the day, HH for the hour,

117
00:05:54.006 --> 00:05:57.005
lowercase now, mm for the minute,

118
00:05:57.005 --> 00:05:59.008
ss for the seconds.

119
00:05:59.008 --> 00:06:01.008
We're going to use this time format in a moment

120
00:06:01.008 --> 00:06:05.004
not only for our artifact versioning name

121
00:06:05.004 --> 00:06:09.001
but also for our AWS deployment version name.

122
00:06:09.001 --> 00:06:11.000
Okay, right below this,

123
00:06:11.000 --> 00:06:14.002
we're going to hit Enter, back space out again

124
00:06:14.002 --> 00:06:16.007
to be in line with the dashes up top.

125
00:06:16.007 --> 00:06:21.004
I'm going to type - name:

126
00:06:21.004 --> 00:06:25.008
Make Artifact Available.

127
00:06:25.008 --> 00:06:27.003
Hit Enter.

128
00:06:27.003 --> 00:06:30.005
We're going to use another GitHub action created for this.

129
00:06:30.005 --> 00:06:40.007
So type uses: actions/upload-artifact

130
00:06:40.007 --> 00:06:43.002
and the version is @v2.

131
00:06:43.002 --> 00:06:44.003
Hit Enter again.

132
00:06:44.003 --> 00:06:47.008
With: hit Enter again.

133
00:06:47.008 --> 00:06:50.003
Make sure you're tabbed to the right spot.

134
00:06:50.003 --> 00:06:56.004
Type name: put this in double quotes.

135
00:06:56.004 --> 00:07:01.008
Artifact-$ curly bracket, curly bracket,

136
00:07:01.008 --> 00:07:04.003
close curly bracket, close curly bracket.

137
00:07:04.003 --> 00:07:08.008
Inside of this, we'll type steps.time.

138
00:07:08.008 --> 00:07:12.005
Time references the ID that we used up top.

139
00:07:12.005 --> 00:07:16.001
Outputs.time.

140
00:07:16.001 --> 00:07:19.001
So the dollar sign, double curly brackets,

141
00:07:19.001 --> 00:07:22.002
this is used to access special variables

142
00:07:22.002 --> 00:07:26.004
in GitHub with their action YAML files.

143
00:07:26.004 --> 00:07:29.008
The variable has an outputs.time

144
00:07:29.008 --> 00:07:32.003
that we can access in appending it

145
00:07:32.003 --> 00:07:34.004
to the name of our artifact.

146
00:07:34.004 --> 00:07:36.004
Okay, at the end of that line,

147
00:07:36.004 --> 00:07:38.003
we're going to hit Enter again

148
00:07:38.003 --> 00:07:44.008
and we're going to type path: build/libs

149
00:07:44.008 --> 00:07:46.009
and we're going to save.

150
00:07:46.009 --> 00:07:51.000
Now, we're going to test this YAML file first

151
00:07:51.000 --> 00:07:56.000
against our jar_workflow_aws branch.

152
00:07:56.000 --> 00:07:57.004
And in order to do that,

153
00:07:57.004 --> 00:08:01.003
we're going to have to up and modify this.

154
00:08:01.003 --> 00:08:05.007
So let's first go up and change the branch name

155
00:08:05.007 --> 00:08:08.006
that the action depends on

156
00:08:08.006 --> 00:08:14.004
to jar_workflow_aws.

157
00:08:14.004 --> 00:08:16.002
We'll save that, we're going to come all the way

158
00:08:16.002 --> 00:08:17.006
to the bottom.

159
00:08:17.006 --> 00:08:19.003
And we're going to add one more thing

160
00:08:19.003 --> 00:08:21.006
and that is a retention period.

161
00:08:21.006 --> 00:08:26.004
Say retention-days equals five.

162
00:08:26.004 --> 00:08:29.001
When the artifact is created,

163
00:08:29.001 --> 00:08:32.007
the artifact will be there by default by 90 days.

164
00:08:32.007 --> 00:08:36.005
We don't want that to kind of clutter up our environment.

165
00:08:36.005 --> 00:08:38.003
So we're going to set ours to five

166
00:08:38.003 --> 00:08:40.000
and after five, they'll disappear.

167
00:08:40.000 --> 00:08:41.005
Okay, we're going to save that,

168
00:08:41.005 --> 00:08:46.001
we're going to come down here and type git add dot.

169
00:08:46.001 --> 00:08:49.006
Git commit -m

170
00:08:49.006 --> 00:08:55.003
and we're going to say that we have added the changes

171
00:08:55.003 --> 00:08:59.007
to test our workflow.

172
00:08:59.007 --> 00:09:00.006
Now, keep in mind,

173
00:09:00.006 --> 00:09:05.002
we have changed the branch here just temporarily.

174
00:09:05.002 --> 00:09:08.004
We're going to change that back in the next video.

175
00:09:08.004 --> 00:09:09.007
So we have one final step

176
00:09:09.007 --> 00:09:12.006
and now it's to push it to GitHub.

177
00:09:12.006 --> 00:09:16.007
So we'll type git push -u

178
00:09:16.007 --> 00:09:20.006
origin, name of our branch again.

179
00:09:20.006 --> 00:09:25.000
Jar_workflow_aws.

180
00:09:25.000 --> 00:09:28.002
We are pushing it to this branch

181
00:09:28.002 --> 00:09:30.005
and because we've changed the action

182
00:09:30.005 --> 00:09:32.007
that it's listening on,

183
00:09:32.007 --> 00:09:35.009
anything it's pushed to this branch, it should fire off.

184
00:09:35.009 --> 00:09:37.009
So hit Enter.

185
00:09:37.009 --> 00:09:43.000
And we're going to switch over to our browser window again.

186
00:09:43.000 --> 00:09:45.002
I'm going to click on Actions.

187
00:09:45.002 --> 00:09:46.005
And we can see that it's running.

188
00:09:46.005 --> 00:09:48.005
We're going to click on it.

189
00:09:48.005 --> 00:09:51.006
And we have an error

190
00:09:51.006 --> 00:09:53.009
and it looks like I mistyped the S.

191
00:09:53.009 --> 00:09:54.008
It needs to be a Z.

192
00:09:54.008 --> 00:09:58.009
So we're going to go back, save this.

193
00:09:58.009 --> 00:10:00.007
Git add.

194
00:10:00.007 --> 00:10:02.008
Git commit.

195
00:10:02.008 --> 00:10:04.005
And git push.

196
00:10:04.005 --> 00:10:09.002
Okay, go back to our workflow one more time.

197
00:10:09.002 --> 00:10:11.006
Click on this.

198
00:10:11.006 --> 00:10:13.005
Like it's running.

199
00:10:13.005 --> 00:10:16.007
We'll click on the build.

200
00:10:16.007 --> 00:10:24.001
And as we can see, it's building with Gradle.

201
00:10:24.001 --> 00:10:27.000
The timestamp is created.

202
00:10:27.000 --> 00:10:29.004
The artifact is posted.

203
00:10:29.004 --> 00:10:32.001
And it's saying that the job is complete.

204
00:10:32.001 --> 00:10:34.000
So we're going to click on the summary

205
00:10:34.000 --> 00:10:37.000
and now we should see an artifact with a timestamp.

