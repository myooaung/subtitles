WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Although many organizations

2
00:00:01.008 --> 00:00:04.000
are moving away from deploying to Tomcat

3
00:00:04.000 --> 00:00:07.000
because of Spring Boot's embedded server container,

4
00:00:07.000 --> 00:00:09.000
you may find yourself in an organization

5
00:00:09.000 --> 00:00:11.001
that still desires Tomcat.

6
00:00:11.001 --> 00:00:12.005
Microsoft Azure meets

7
00:00:12.005 --> 00:00:14.003
this business functionality requirement

8
00:00:14.003 --> 00:00:17.004
with similar automated creation of GitHub Actions,

9
00:00:17.004 --> 00:00:20.006
just like we covered in the previous video.

10
00:00:20.006 --> 00:00:24.000
First, let's open up IntelliJ

11
00:00:24.000 --> 00:00:26.004
and open our project code we've been working with

12
00:00:26.004 --> 00:00:30.001
in our own personal GitHub accounts.

13
00:00:30.001 --> 00:00:33.006
My code base is in my home directory

14
00:00:33.006 --> 00:00:36.009
under SpringBootProdProduction.

15
00:00:36.009 --> 00:00:39.002
This will map to the lab exercise files

16
00:00:39.002 --> 00:00:43.008
of 0602 begin and end.

17
00:00:43.008 --> 00:00:47.008
Inside the terminal type git branch,

18
00:00:47.008 --> 00:00:49.006
and if you're not on the main branch,

19
00:00:49.006 --> 00:00:52.004
go ahead and switch to the main branch,

20
00:00:52.004 --> 00:00:56.003
git switch main, clear the screen.

21
00:00:56.003 --> 00:01:00.008
Then we'll type git fetch origin,

22
00:01:00.008 --> 00:01:05.001
and this will be followed by git pull origin.

23
00:01:05.001 --> 00:01:08.002
Because we're going to be working with war file deployment

24
00:01:08.002 --> 00:01:10.005
to Tomcat in this video,

25
00:01:10.005 --> 00:01:12.005
we will need to make a few modifications

26
00:01:12.005 --> 00:01:15.006
to our source code just as we did in the past.

27
00:01:15.006 --> 00:01:17.001
But first let's go ahead

28
00:01:17.001 --> 00:01:21.009
and create the new war workflow Azure branch.

29
00:01:21.009 --> 00:01:30.000
We'll type git checkout dash b war workflow Azure

30
00:01:30.000 --> 00:01:31.002
and hit Enter.

31
00:01:31.002 --> 00:01:34.003
This will create a branch and of course, check it out.

32
00:01:34.003 --> 00:01:35.001
Now let's go ahead

33
00:01:35.001 --> 00:01:38.003
and push this branch to our remote repository,

34
00:01:38.003 --> 00:01:49.004
type git push dash u origin, war workflow underscore Azure

35
00:01:49.004 --> 00:01:51.001
and hit Enter.

36
00:01:51.001 --> 00:01:54.001
We'll make our final changes to this project

37
00:01:54.001 --> 00:01:57.005
after Azure has put the new workflow in the project.

38
00:01:57.005 --> 00:02:02.006
Let's go ahead and switch back to Azure.

39
00:02:02.006 --> 00:02:05.007
We'll click on all resources,

40
00:02:05.007 --> 00:02:12.001
we'll click Create and then select Web App, Create.

41
00:02:12.001 --> 00:02:15.000
In the resource group, click Create New.

42
00:02:15.000 --> 00:02:26.008
We'll call this Spring Boot Azure war workflow group,

43
00:02:26.008 --> 00:02:29.002
and click OK.

44
00:02:29.002 --> 00:02:31.004
Our web app name will be very similar,

45
00:02:31.004 --> 00:02:41.005
Spring Boot Azure war workflow web app.

46
00:02:41.005 --> 00:02:45.001
For the runtime, we'll select Java 11

47
00:02:45.001 --> 00:02:46.005
and for the web stack server

48
00:02:46.005 --> 00:02:49.001
we're going to select Tomcat 9.0.

49
00:02:49.001 --> 00:02:51.009
All of the remaining options we'll leave in default.

50
00:02:51.009 --> 00:02:53.006
Click Review and Create,

51
00:02:53.006 --> 00:02:59.000
and if you're happy with your selections, click Create.

52
00:02:59.000 --> 00:03:00.008
Once the deployment of the resource group

53
00:03:00.008 --> 00:03:02.005
and web app service is complete,

54
00:03:02.005 --> 00:03:06.007
we'll go ahead and click on Go To Resource.

55
00:03:06.007 --> 00:03:12.000
Then in the left side menu option, click on Configuration.

56
00:03:12.000 --> 00:03:13.005
Hopefully this is sounding familiar

57
00:03:13.005 --> 00:03:14.006
because Microsoft Azure

58
00:03:14.006 --> 00:03:17.007
has made this process very easy for us.

59
00:03:17.007 --> 00:03:19.009
Under the configurations page,

60
00:03:19.009 --> 00:03:24.007
click on Application Settings, then New Application Setting.

61
00:03:24.007 --> 00:03:27.004
We're going to provide our spring profiles active

62
00:03:27.004 --> 00:03:33.009
and for the value, we type dev comma Azure comma Tomcat,

63
00:03:33.009 --> 00:03:35.006
and then click OK.

64
00:03:35.006 --> 00:03:40.003
This will be followed by clicking Save and Continue.

65
00:03:40.003 --> 00:03:44.002
Next, click on Deployment Center

66
00:03:44.002 --> 00:03:47.002
and we're going to start selecting our source

67
00:03:47.002 --> 00:03:50.007
under Settings, GitHub.

68
00:03:50.007 --> 00:03:53.003
We're already signed in to our GitHub account.

69
00:03:53.003 --> 00:03:55.007
Select the organization,

70
00:03:55.007 --> 00:03:59.002
the repository SpringBootProduction,

71
00:03:59.002 --> 00:04:04.007
and then the branch we created war workflow Azure.

72
00:04:04.007 --> 00:04:06.002
We'll leave the workflow option

73
00:04:06.002 --> 00:04:08.005
add workflow pre-selected.

74
00:04:08.005 --> 00:04:12.001
We'll click Preview File, and as you can see here,

75
00:04:12.001 --> 00:04:14.004
this is the new workflow that will be generated

76
00:04:14.004 --> 00:04:17.006
and inserted into our project.

77
00:04:17.006 --> 00:04:20.006
Again, we'll need to change the build with Maven

78
00:04:20.006 --> 00:04:23.009
as well as the path to our target war.

79
00:04:23.009 --> 00:04:28.001
We'll click Close and Save.

80
00:04:28.001 --> 00:04:29.008
This is going to fire off the changes

81
00:04:29.008 --> 00:04:32.007
to our repository branch that we made.

82
00:04:32.007 --> 00:04:36.000
Next, let's go ahead and go back to IntelliJ.

83
00:04:36.000 --> 00:04:37.005
Let's clear the screen,

84
00:04:37.005 --> 00:04:45.001
type git fetch origin, git pull origin.

85
00:04:45.001 --> 00:04:46.003
This will sync our work

86
00:04:46.003 --> 00:04:48.002
and pull down the new GitHub workflow

87
00:04:48.002 --> 00:04:50.005
that Azure has created for us.

88
00:04:50.005 --> 00:04:53.004
If we scroll to the top and click on workflows,

89
00:04:53.004 --> 00:04:56.004
we now see the two workflows.

90
00:04:56.004 --> 00:04:58.003
We're going to delete the old workflow,

91
00:04:58.003 --> 00:05:00.008
the build package deploy AWS yml.

92
00:05:00.008 --> 00:05:05.009
Right click, select Delete and OK.

93
00:05:05.009 --> 00:05:10.004
Go ahead and open the war workflow Azure Spring Boot.

94
00:05:10.004 --> 00:05:12.005
We'll modify the name build with Maven

95
00:05:12.005 --> 00:05:15.006
to build with Gradle,

96
00:05:15.006 --> 00:05:24.003
we'll change the run to dot slash gradlew clean build

97
00:05:24.003 --> 00:05:26.004
and will change the path

98
00:05:26.004 --> 00:05:38.006
to build slash libs slash SpringBootProdApplication.

99
00:05:38.006 --> 00:05:41.003
We'll save that

100
00:05:41.003 --> 00:05:46.000
and now we'll go to our build Gradle file.

101
00:05:46.000 --> 00:05:51.005
Underneath ID Java, hit Enter, type ID war,

102
00:05:51.005 --> 00:05:53.007
underneath the plugins, hit Enter a couple times

103
00:05:53.007 --> 00:06:00.008
and type boot war, curly brackets, archive file name

104
00:06:00.008 --> 00:06:07.006
equals springbootprodapplication.war.

105
00:06:07.006 --> 00:06:09.002
We'll save that.

106
00:06:09.002 --> 00:06:12.009
We'll go down to the dependencies

107
00:06:12.009 --> 00:06:16.005
underneath the implementation for starter actuator.

108
00:06:16.005 --> 00:06:23.004
We'll type provide a runtime org

109
00:06:23.004 --> 00:06:25.009
springframework.boot

110
00:06:25.009 --> 00:06:35.005
colon Spring Boot dash starter dash Tomcat.

111
00:06:35.005 --> 00:06:38.003
Open up the application properties.

112
00:06:38.003 --> 00:06:45.002
We'll type server servlet context path

113
00:06:45.002 --> 00:06:51.000
equals SpringBootProdApplication.

114
00:06:51.000 --> 00:06:52.006
And the final change we'll make

115
00:06:52.006 --> 00:06:55.005
is to our SpringBootProdApplication class.

116
00:06:55.005 --> 00:07:04.000
We type extends Spring Boot servlet initializer.

117
00:07:04.000 --> 00:07:06.005
Underneath the public static void main method,

118
00:07:06.005 --> 00:07:09.004
we'll add an override.

119
00:07:09.004 --> 00:07:17.001
This will be protected SpringApplicationBuilder.

120
00:07:17.001 --> 00:07:19.008
The name of the method will be configure.

121
00:07:19.008 --> 00:07:23.006
This will accept a SpringApplicationBuilder.

122
00:07:23.006 --> 00:07:28.007
We'll call the parameter builder, the curly brackets.

123
00:07:28.007 --> 00:07:30.005
Now we're going to return

124
00:07:30.005 --> 00:07:35.006
using the parameterbuilder dot the method sources,

125
00:07:35.006 --> 00:07:36.006
and we'll supply this

126
00:07:36.006 --> 00:07:41.008
with SpringBootProdApplication.class.

127
00:07:41.008 --> 00:07:46.003
With all this done, let's go ahead and commit our changes.

128
00:07:46.003 --> 00:07:58.003
Git add.gitcommit dash M changes for Azure war workflow

129
00:07:58.003 --> 00:07:59.007
and we'll push these changes,

130
00:07:59.007 --> 00:08:05.004
git push dash U origin war workflow Azure.

131
00:08:05.004 --> 00:08:08.003
Hit Enter.

132
00:08:08.003 --> 00:08:09.006
I just realized we have one other change

133
00:08:09.006 --> 00:08:10.005
that we need to make.

134
00:08:10.005 --> 00:08:13.000
Let's go back to our workflow

135
00:08:13.000 --> 00:08:14.007
and we're going to change the branch

136
00:08:14.007 --> 00:08:16.006
that this has acted upon here.

137
00:08:16.006 --> 00:08:19.001
We'll change this to main.

138
00:08:19.001 --> 00:08:20.003
We'll save it.

139
00:08:20.003 --> 00:08:22.009
Now keep in mind that since we just committed the code

140
00:08:22.009 --> 00:08:25.001
and pushed the branch with the workflow

141
00:08:25.001 --> 00:08:30.001
specifying the push branch on war workflow Azure,

142
00:08:30.001 --> 00:08:32.009
an action will have kicked off.

143
00:08:32.009 --> 00:08:35.003
We'll go ahead and commit the new changes.

144
00:08:35.003 --> 00:08:40.000
Git add, git commit,

145
00:08:40.000 --> 00:08:45.004
and I'll use my previous commands to speed this up.

146
00:08:45.004 --> 00:08:49.005
Let's go back to our GitHub repository.

147
00:08:49.005 --> 00:08:54.001
We'll click on Code

148
00:08:54.001 --> 00:08:58.005
and we'll click on Compare and Pull Request.

149
00:08:58.005 --> 00:09:02.007
Click Create Pull Request.

150
00:09:02.007 --> 00:09:04.008
This will be followed by merge pull request

151
00:09:04.008 --> 00:09:08.008
and confirm merge.

152
00:09:08.008 --> 00:09:12.000
With that complete, let's click on Actions.

153
00:09:12.000 --> 00:09:16.004
We see that changes for Azure war workflow completed

154
00:09:16.004 --> 00:09:20.003
but let's take a look at our merge pull request.

155
00:09:20.003 --> 00:09:26.003
Click on the Build.

156
00:09:26.003 --> 00:09:28.004
Okay, with the build completed,

157
00:09:28.004 --> 00:09:34.008
we'll click on Deploy Job

158
00:09:34.008 --> 00:09:40.002
and we can see that the artifact was downloaded.

159
00:09:40.002 --> 00:09:44.001
It was deployed to the Azure web app

160
00:09:44.001 --> 00:09:47.000
and we can see it was completed.

161
00:09:47.000 --> 00:09:50.002
So next we can go ahead and click on the link here.

162
00:09:50.002 --> 00:09:51.008
And this will load

163
00:09:51.008 --> 00:09:57.004
the Spring Boot Azure war workflow web app into the browser.

164
00:09:57.004 --> 00:10:01.001
Now keep in mind that on the first time deploy of a web app,

165
00:10:01.001 --> 00:10:03.003
it will take a few minutes.

166
00:10:03.003 --> 00:10:05.000
The other aspect here is

167
00:10:05.000 --> 00:10:09.009
because the web app requires a context path,

168
00:10:09.009 --> 00:10:15.007
when we load the page, we will see this 404 error.

169
00:10:15.007 --> 00:10:21.009
Let's copy our context path and type it in.

170
00:10:21.009 --> 00:10:27.000
Hit Enter, and we have our application.

