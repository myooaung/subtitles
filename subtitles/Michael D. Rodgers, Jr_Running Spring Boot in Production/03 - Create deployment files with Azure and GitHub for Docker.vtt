WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Narrator] Having the ability

2
00:00:01.004 --> 00:00:03.002
to quickly update our code base,

3
00:00:03.002 --> 00:00:06.009
and deploy that code through a CICD pipeline is crucial.

4
00:00:06.009 --> 00:00:09.005
Hopefully, you're seeing how this is much easier now

5
00:00:09.005 --> 00:00:11.006
with Azure and deploying Docker images

6
00:00:11.006 --> 00:00:13.007
through GitHub Actions.

7
00:00:13.007 --> 00:00:17.001
I'm going to show you an important code pipeline recipe

8
00:00:17.001 --> 00:00:21.001
in managing your code and creating Docker images.

9
00:00:21.001 --> 00:00:22.005
Like the previous two videos,

10
00:00:22.005 --> 00:00:25.002
we're going to first open up IntelliJ,

11
00:00:25.002 --> 00:00:28.005
and ensure that our project code is also loaded.

12
00:00:28.005 --> 00:00:30.004
This is the code that we've been working

13
00:00:30.004 --> 00:00:33.001
with in our own personal GitHub accounts.

14
00:00:33.001 --> 00:00:36.000
Mine is located in the home directory

15
00:00:36.000 --> 00:00:40.002
under spring boot production.

16
00:00:40.002 --> 00:00:42.004
This maps to the lab exercise files

17
00:00:42.004 --> 00:00:47.003
of 06_03 begin and end.

18
00:00:47.003 --> 00:00:49.006
In the terminal window inside of IntelliJ,

19
00:00:49.006 --> 00:00:56.009
type git switch main followed by git fetch origin,

20
00:00:56.009 --> 00:01:00.002
and then git pull origin.

21
00:01:00.002 --> 00:01:01.005
Next, we're going to create

22
00:01:01.005 --> 00:01:04.001
a Docker workflow as your branch.

23
00:01:04.001 --> 00:01:05.001
We'll do this by typing

24
00:01:05.001 --> 00:01:13.003
git checkout -b docker_workflow_azure.

25
00:01:13.003 --> 00:01:15.003
And let's go ahead and push this branch

26
00:01:15.003 --> 00:01:17.001
to our remote repository.

27
00:01:17.001 --> 00:01:25.006
We'll type git push -U origin docker_workflow_azure,

28
00:01:25.006 --> 00:01:27.004
and hit Enter.

29
00:01:27.004 --> 00:01:30.003
Let's go back to the Azure portal,

30
00:01:30.003 --> 00:01:33.004
and under All resources,

31
00:01:33.004 --> 00:01:36.001
click to create a new resource,

32
00:01:36.001 --> 00:01:40.002
we'll select Web App and then Create,

33
00:01:40.002 --> 00:01:41.009
and then under the Resource Group,

34
00:01:41.009 --> 00:01:45.004
click Create new, we'll call this resource group

35
00:01:45.004 --> 00:01:57.005
spring-boot-azure-docker-workflow-group, click OK.

36
00:01:57.005 --> 00:01:59.006
For the name of the Web App,

37
00:01:59.006 --> 00:02:01.004
we're going to use a very similar name.

38
00:02:01.004 --> 00:02:10.008
So we'll select this spring-boot-azure-docker-workflow-app.

39
00:02:10.008 --> 00:02:12.000
Under the Publish label,

40
00:02:12.000 --> 00:02:15.009
we going to select Docker instead of Code,

41
00:02:15.009 --> 00:02:17.009
and we'll leave everything else as default,

42
00:02:17.009 --> 00:02:20.003
code, region, and Linux plan.

43
00:02:20.003 --> 00:02:26.000
Click Review and create, and then Create.

44
00:02:26.000 --> 00:02:28.001
With the initial part of our deployment complete,

45
00:02:28.001 --> 00:02:32.000
we'll click on Go to resource,

46
00:02:32.000 --> 00:02:36.007
then we'll scroll down on the left and select Configuration.

47
00:02:36.007 --> 00:02:39.004
We're going to go ahead and add the port

48
00:02:39.004 --> 00:02:40.007
so that the Docker image

49
00:02:40.007 --> 00:02:43.000
will be visible to outside requests.

50
00:02:43.000 --> 00:02:46.004
We'll do this by selecting new application setting,

51
00:02:46.004 --> 00:02:49.003
and typing WEBSITES_PORT.

52
00:02:49.003 --> 00:02:55.003
The port will select the value of 5000, click OK.

53
00:02:55.003 --> 00:02:57.004
We'll add a new application setting,

54
00:02:57.004 --> 00:03:02.002
and we'll add the SPRING_PROFILES_ACTIVE.

55
00:03:02.002 --> 00:03:07.009
For this, we're going to type dev,azure,docker.

56
00:03:07.009 --> 00:03:12.007
We'll click OK, Save, and Continue.

57
00:03:12.007 --> 00:03:14.002
Next, we're going to click

58
00:03:14.002 --> 00:03:16.009
on the Deployment Center on the left,

59
00:03:16.009 --> 00:03:18.008
and we'll start selecting our source code,

60
00:03:18.008 --> 00:03:21.005
just like we did for deploying a JAR.

61
00:03:21.005 --> 00:03:25.003
You'll notice, however, three different sources at the top.

62
00:03:25.003 --> 00:03:28.002
This gives us Container Registry, GitHub Actions,

63
00:03:28.002 --> 00:03:30.002
and Azure Pipelines.

64
00:03:30.002 --> 00:03:32.003
We're going to stick with GitHub Actions,

65
00:03:32.003 --> 00:03:39.003
since we're illustrating how you can create a GitHub Action.

66
00:03:39.003 --> 00:03:43.004
Under the GitHub Actions, ensure you're signed in,

67
00:03:43.004 --> 00:03:47.004
select your organization, select the repository,

68
00:03:47.004 --> 00:03:49.009
which is SpringBootProduction.

69
00:03:49.009 --> 00:03:53.007
For the Branch, we're using docker_workflow_azure,

70
00:03:53.007 --> 00:03:55.004
and for the Workflow Option,

71
00:03:55.004 --> 00:03:57.007
ensure that you're selecting the first radio button

72
00:03:57.007 --> 00:03:59.005
to add a workflow.

73
00:03:59.005 --> 00:04:01.006
This is because we want Azure to create

74
00:04:01.006 --> 00:04:05.008
and add the workflow YAML file for us.

75
00:04:05.008 --> 00:04:08.000
Now, at this point,

76
00:04:08.000 --> 00:04:11.002
things are different from the previous demos.

77
00:04:11.002 --> 00:04:16.001
In the Registry source, select Docker Hub.

78
00:04:16.001 --> 00:04:18.008
Here, you're going to need to use your Docker Hub account.

79
00:04:18.008 --> 00:04:21.007
So let's go into our browsers,

80
00:04:21.007 --> 00:04:24.004
and I've already opened this,

81
00:04:24.004 --> 00:04:32.004
but open https://hub.docker.com.

82
00:04:32.004 --> 00:04:34.002
If you don't have a Docker Hub account,

83
00:04:34.002 --> 00:04:36.006
it's very easy and it's free.

84
00:04:36.006 --> 00:04:38.002
We will need this to go forward

85
00:04:38.002 --> 00:04:41.006
with the rest of the Azure configuration.

86
00:04:41.006 --> 00:04:43.000
After you create the account,

87
00:04:43.000 --> 00:04:48.002
be sure to check your email and confirm the subscription.

88
00:04:48.002 --> 00:04:51.007
Now, once you're done with the Docker Hub creation,

89
00:04:51.007 --> 00:04:55.004
we'll switch back to Azure.

90
00:04:55.004 --> 00:04:58.006
For your login, enter your username,

91
00:04:58.006 --> 00:05:01.000
and then enter your password.

92
00:05:01.000 --> 00:05:03.001
For the image name, I'm going to select

93
00:05:03.001 --> 00:05:08.004
spring-boot-azure-docker-workflow-app.

94
00:05:08.004 --> 00:05:10.006
And we'll keep that the same.

95
00:05:10.006 --> 00:05:13.002
So scroll to the bottom.

96
00:05:13.002 --> 00:05:16.006
You can click Preview file or Save.

97
00:05:16.006 --> 00:05:19.006
Let's go ahead and click Preview file.

98
00:05:19.006 --> 00:05:22.009
And this is the workflow that we'll be adding.

99
00:05:22.009 --> 00:05:24.009
There are a few changes we'll need to make,

100
00:05:24.009 --> 00:05:29.005
like including the Gradle build and a Java setup.

101
00:05:29.005 --> 00:05:32.005
Let's click Close, we'll click Save,

102
00:05:32.005 --> 00:05:35.000
and this begin firing off the changes

103
00:05:35.000 --> 00:05:37.002
to our repository branch.

104
00:05:37.002 --> 00:05:38.009
Now, the next thing that we need to do

105
00:05:38.009 --> 00:05:42.003
is switch back to IntelliJ, and in the terminal,

106
00:05:42.003 --> 00:05:47.000
we're going to type git fetch origin.

107
00:05:47.000 --> 00:05:51.007
This will be followed by git pull origin.

108
00:05:51.007 --> 00:05:53.001
This will sync our work

109
00:05:53.001 --> 00:05:55.000
and pull down the new GitHub workflow

110
00:05:55.000 --> 00:05:57.006
that Azure has created for us.

111
00:05:57.006 --> 00:05:59.005
If we go to our project window,

112
00:05:59.005 --> 00:06:02.009
scroll to the top, and click on the workflows,

113
00:06:02.009 --> 00:06:08.008
we should see the new Docker workflow Azure YAML file.

114
00:06:08.008 --> 00:06:11.003
Now, we need to make a few changes,

115
00:06:11.003 --> 00:06:14.008
but first, we're going to delete the previous YAML file.

116
00:06:14.008 --> 00:06:18.007
Right click on war_workflow_azure,

117
00:06:18.007 --> 00:06:23.004
select Delete, and click OK.

118
00:06:23.004 --> 00:06:27.000
Inside of the Docker workflow YAML file,

119
00:06:27.000 --> 00:06:31.004
we'll first change the branch to main,

120
00:06:31.004 --> 00:06:34.009
then we'll scroll down to right underneath

121
00:06:34.009 --> 00:06:38.001
the actions/checkout@v2,

122
00:06:38.001 --> 00:06:41.002
we'll add a new name and label,

123
00:06:41.002 --> 00:06:46.005
and we'll call this Set up Java Version.

124
00:06:46.005 --> 00:06:51.003
This will be uses, and will use a custom action

125
00:06:51.003 --> 00:07:00.001
called actions/setup-java@v1.

126
00:07:00.001 --> 00:07:03.007
It enter, we'll use the with keyword.

127
00:07:03.007 --> 00:07:06.006
It enter again, take out the dash,

128
00:07:06.006 --> 00:07:18.008
and we'll type java-version:'1.8'

129
00:07:18.008 --> 00:07:23.007
It enter, we'll add a new name label,

130
00:07:23.007 --> 00:07:27.009
and this will be Build with Gradle.

131
00:07:27.009 --> 00:07:39.002
It enter, will use run: ./gradlew cleand build.

132
00:07:39.002 --> 00:07:40.006
The reason we need to do this

133
00:07:40.006 --> 00:07:44.000
is our Docker image needs to package

134
00:07:44.000 --> 00:07:46.004
the spring boot JAR file.

135
00:07:46.004 --> 00:07:51.000
And that JAR file needs to be built.

136
00:07:51.000 --> 00:07:53.004
The next item that we need to modify

137
00:07:53.004 --> 00:07:58.001
is down underneath the build and push container image.

138
00:07:58.001 --> 00:07:59.005
We'll scroll down,

139
00:07:59.005 --> 00:08:02.009
find Build and push container image to registry,

140
00:08:02.009 --> 00:08:06.003
and just beneath the width and above the push,

141
00:08:06.003 --> 00:08:11.004
it enter, we'll type context: .,

142
00:08:11.004 --> 00:08:13.009
this will tell the Docker image where the path

143
00:08:13.009 --> 00:08:18.001
for the build libs directory is located.

144
00:08:18.001 --> 00:08:22.002
We'll scroll on down, and we're done.

145
00:08:22.002 --> 00:08:24.002
I do want to show you right here

146
00:08:24.002 --> 00:08:27.002
that it's using the Docker file.

147
00:08:27.002 --> 00:08:28.008
This is telling us where to find

148
00:08:28.008 --> 00:08:32.006
the Docker file in the context.

149
00:08:32.006 --> 00:08:34.003
Okay, so we need to fix some code

150
00:08:34.003 --> 00:08:39.001
by making some adjustments made for a war file build.

151
00:08:39.001 --> 00:08:42.008
This is because the previous main branch

152
00:08:42.008 --> 00:08:49.005
that this Docker workflow Azure branch was loaned from,

153
00:08:49.005 --> 00:08:52.007
was built for constructing wars.

154
00:08:52.007 --> 00:08:55.003
So we'll touch the build.gradle,

155
00:08:55.003 --> 00:08:57.002
the application.properties,

156
00:08:57.002 --> 00:09:00.000
and the springboot.applicationclass.

157
00:09:00.000 --> 00:09:01.006
Let's scroll down, go ahead,

158
00:09:01.006 --> 00:09:05.005
and open the SpringBootProdApplication.class.

159
00:09:05.005 --> 00:09:09.007
We'll remove the extends SpringBootServletInitializer.

160
00:09:09.007 --> 00:09:13.003
We'll take out this override method,

161
00:09:13.003 --> 00:09:17.004
and we'll also remove these two unused imports now.

162
00:09:17.004 --> 00:09:19.000
We'll save that file.

163
00:09:19.000 --> 00:09:21.007
We'll scroll down to our application.properties,

164
00:09:21.007 --> 00:09:23.008
and we're going to first remove

165
00:09:23.008 --> 00:09:28.005
the servlet.contextPath statement.

166
00:09:28.005 --> 00:09:31.004
We're going to uncommon our server.port,

167
00:09:31.004 --> 00:09:34.007
and we'll change the port to 5000.

168
00:09:34.007 --> 00:09:38.000
This is to match what Docker is using.

169
00:09:38.000 --> 00:09:39.006
Last change that we're going to make

170
00:09:39.006 --> 00:09:41.008
is with the build.gradle.

171
00:09:41.008 --> 00:09:44.005
We'll remove the id war at the top.

172
00:09:44.005 --> 00:09:49.006
We'll take out the bootWar ask.

173
00:09:49.006 --> 00:09:55.000
We'll change the sourceCompatibility to 1.8,

174
00:09:55.000 --> 00:09:59.009
and we'll remove the providedRuntime for tomcat.

175
00:09:59.009 --> 00:10:04.004
We'll save all those file. Save All.

176
00:10:04.004 --> 00:10:08.006
Down in the terminal window, we'll type git status.

177
00:10:08.006 --> 00:10:11.009
We can see the files that we've updated,

178
00:10:11.009 --> 00:10:14.004
then we'll type git add .,

179
00:10:14.004 --> 00:10:17.006
let's type git status again.

180
00:10:17.006 --> 00:10:22.000
We can see that these are ready to be committed.

181
00:10:22.000 --> 00:10:34.004
We'll type git commit -n changes for azure docker workflow,

182
00:10:34.004 --> 00:10:39.001
It enter, we'll type git status one more time.

183
00:10:39.001 --> 00:10:48.001
And then get push -U origin docker_workflow_Azure.

184
00:10:48.001 --> 00:10:53.007
It enter. Now, let's switch back to GitHub,

185
00:10:53.007 --> 00:10:57.000
and we're going to prepare to do a pull request.

186
00:10:57.000 --> 00:11:00.007
GitHub has already alerted us that there are changes ready,

187
00:11:00.007 --> 00:11:03.002
but let's go ahead and run through the pull request process.

188
00:11:03.002 --> 00:11:06.003
We'll click Pull requests.

189
00:11:06.003 --> 00:11:08.006
We'll ensure that we're comparing

190
00:11:08.006 --> 00:11:11.002
when we'll type new pull requests.

191
00:11:11.002 --> 00:11:16.000
We'll compare to the docker_workflow_azure.

192
00:11:16.000 --> 00:11:18.000
We see that we're able to emerge,

193
00:11:18.000 --> 00:11:20.007
and that there are no conflicts.

194
00:11:20.007 --> 00:11:28.005
We'll click pull request, Create pull request,

195
00:11:28.005 --> 00:11:30.004
we'll accept the merge,

196
00:11:30.004 --> 00:11:33.005
and then we'll confirm.

197
00:11:33.005 --> 00:11:35.004
With that all done, we know that it should have

198
00:11:35.004 --> 00:11:37.007
kicked off one of the workflow jobs.

199
00:11:37.007 --> 00:11:39.005
So let's go to the top.

200
00:11:39.005 --> 00:11:42.008
We'll click on Actions.

201
00:11:42.008 --> 00:11:46.006
We'll look at our workflow that's being run,

202
00:11:46.006 --> 00:11:49.004
and we see that there is a build and a deploy job.

203
00:11:49.004 --> 00:11:53.008
We'll click on the build,

204
00:11:53.008 --> 00:11:55.004
and we have an error with our build.

205
00:11:55.004 --> 00:11:59.003
Let's take a look real quick, and see what the error is.

206
00:11:59.003 --> 00:12:02.007
It looks like I have a typo with my command,

207
00:12:02.007 --> 00:12:05.003
so let's go back to IntelliJ.

208
00:12:05.003 --> 00:12:10.009
We'll open up our workflow at the top.

209
00:12:10.009 --> 00:12:14.006
Roll up to the cleand build and you can see my error.

210
00:12:14.006 --> 00:12:16.004
We'll save it.

211
00:12:16.004 --> 00:12:22.006
We'll type git status, git add,

212
00:12:22.006 --> 00:12:33.006
git commit -m fixed a gradlew clean build command.

213
00:12:33.006 --> 00:12:37.002
It enter, git status again to verify,

214
00:12:37.002 --> 00:12:44.007
and then git push -U origin docker_workflow_azure.

215
00:12:44.007 --> 00:12:50.005
Hit Enter. We'll go back to GitHub one more time.

216
00:12:50.005 --> 00:12:51.009
I'm going to go back to my code,

217
00:12:51.009 --> 00:12:55.008
'cause we'll need to do another pull request.

218
00:12:55.008 --> 00:12:58.006
We'll click on our Pull requests.

219
00:12:58.006 --> 00:13:01.001
We'll create new.

220
00:13:01.001 --> 00:13:03.002
We'll select this to do the comparison

221
00:13:03.002 --> 00:13:05.009
to the docker_workflow_azure.

222
00:13:05.009 --> 00:13:13.000
We see the change. We'll create the pull request,

223
00:13:13.000 --> 00:13:14.009
and we'll confirm.

224
00:13:14.009 --> 00:13:18.004
Again, let's go back to our Actions.

225
00:13:18.004 --> 00:13:20.001
We see that the previous had failed.

226
00:13:20.001 --> 00:13:23.005
Let's click on our merge now.

227
00:13:23.005 --> 00:13:32.002
We'll click on build, and we'll watch the process.

228
00:13:32.002 --> 00:13:34.005
Okay, we see that the build was successful.

229
00:13:34.005 --> 00:13:39.000
Let's click on the deploy job.

230
00:13:39.000 --> 00:13:41.000
And GitHub is already showing that it's complete.

231
00:13:41.000 --> 00:13:45.000
I'm going to click on the link again.

232
00:13:45.000 --> 00:13:46.005
We'll click on the Completed job,

233
00:13:46.005 --> 00:13:51.002
and now we can see the URL that is available for testing.

234
00:13:51.002 --> 00:13:59.002
I'm going to copy the link address, and paste and go.

235
00:13:59.002 --> 00:14:00.008
It should be noted that the first time

236
00:14:00.008 --> 00:14:02.006
that these load they take a while,

237
00:14:02.006 --> 00:14:08.003
sometimes it helps to stop the request and reload.

238
00:14:08.003 --> 00:14:12.000
Let's try that.

239
00:14:12.000 --> 00:14:16.004
And after refreshing again, the application loads.

240
00:14:16.004 --> 00:14:18.000
The reason for the initial error,

241
00:14:18.000 --> 00:14:21.001
and sometimes the long load time on the first try

242
00:14:21.001 --> 00:14:24.005
in attempting to access the application URL,

243
00:14:24.005 --> 00:14:27.007
is because the Docker image is often still being pulled

244
00:14:27.007 --> 00:14:30.001
and loaded into Azure.

245
00:14:30.001 --> 00:14:32.009
This is common, and depending on the server location,

246
00:14:32.009 --> 00:14:35.001
load times can vary.

247
00:14:35.001 --> 00:14:38.000
You just have to be patient the first time.

