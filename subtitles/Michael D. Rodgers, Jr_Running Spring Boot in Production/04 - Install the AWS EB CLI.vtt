WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Deploying a Docker image

2
00:00:01.008 --> 00:00:05.003
on AWS Elastic Beanstalk can be easy

3
00:00:05.003 --> 00:00:08.006
but it does require a few extra steps compared

4
00:00:08.006 --> 00:00:10.005
to previous videos.

5
00:00:10.005 --> 00:00:11.007
The best way to do this

6
00:00:11.007 --> 00:00:16.005
is on a Linux instance using AWS EB CLI.

7
00:00:16.005 --> 00:00:20.002
This is their command line interface

8
00:00:20.002 --> 00:00:22.006
for deploying our Docker image

9
00:00:22.006 --> 00:00:26.002
to the AWS Elastic Beanstalk.

10
00:00:26.002 --> 00:00:30.005
Please remember that AWS EB CLI

11
00:00:30.005 --> 00:00:35.007
is not the same as AWS CLI.

12
00:00:35.007 --> 00:00:40.007
The AWS EB CLI presents some unique challenges, however,

13
00:00:40.007 --> 00:00:43.001
when installed on macOS.

14
00:00:43.001 --> 00:00:46.006
So to save headaches for everyone involved,

15
00:00:46.006 --> 00:00:48.009
we'll be using a vagrant instance like we did

16
00:00:48.009 --> 00:00:51.009
when we built the Linux RPM package.

17
00:00:51.009 --> 00:00:54.006
This will also streamline our tutorial

18
00:00:54.006 --> 00:00:57.002
for those using Windows as well.

19
00:00:57.002 --> 00:01:00.000
If you are interested in running through the installation

20
00:01:00.000 --> 00:01:04.006
of AWS EB CLI on your Windows or macOS machines,

21
00:01:04.006 --> 00:01:08.002
please see the GitHub link on the screen.

22
00:01:08.002 --> 00:01:09.006
Let's open our project code

23
00:01:09.006 --> 00:01:16.005
to 03_04_begin/SpringBootProduction in IntelliJ.

24
00:01:16.005 --> 00:01:19.005
Once the project code is open in IntelliJ,

25
00:01:19.005 --> 00:01:22.006
we're going to right click on the root folder

26
00:01:22.006 --> 00:01:24.005
called SpringBootProduction.

27
00:01:24.005 --> 00:01:28.006
We'll click on New, and create a new file.

28
00:01:28.006 --> 00:01:37.002
We're going to call this file docker-composer.yml.

29
00:01:37.002 --> 00:01:38.004
And hit Enter.

30
00:01:38.004 --> 00:01:40.006
This will assist us in setting up some

31
00:01:40.006 --> 00:01:42.007
of the parameters that are necessary

32
00:01:42.007 --> 00:01:47.004
when we use the AWS EB CLI.

33
00:01:47.004 --> 00:01:48.008
Inside this new file,

34
00:01:48.008 --> 00:01:55.008
we'll start by typing version: single quotes three,

35
00:01:55.008 --> 00:01:59.000
which specifies the version that we'll be using.

36
00:01:59.000 --> 00:02:01.006
We'll hit Enter

37
00:02:01.006 --> 00:02:05.000
and then we'll type services

38
00:02:05.000 --> 00:02:06.005
and under services,

39
00:02:06.005 --> 00:02:18.000
we'll type spring-boot-prod-docker-app:

40
00:02:18.000 --> 00:02:19.009
and hit Enter.

41
00:02:19.009 --> 00:02:31.006
Next, we'll type image: spring-boot-docker-image.

42
00:02:31.006 --> 00:02:34.001
Hit Enter again.

43
00:02:34.001 --> 00:02:37.004
This will be followed by build:

44
00:02:37.004 --> 00:02:43.009
new line, context: ./

45
00:02:43.009 --> 00:02:50.001
Then we'll type dockerfile equals Dockerfile.

46
00:02:50.001 --> 00:02:51.005
This is located, of course,

47
00:02:51.005 --> 00:02:55.009
at the same level as our Docker Composer file.

48
00:02:55.009 --> 00:02:57.006
So next, we'll hit Enter

49
00:02:57.006 --> 00:03:02.003
and line this up with the build and type ports.

50
00:03:02.003 --> 00:03:04.003
This is where we'll expose the ports

51
00:03:04.003 --> 00:03:07.004
from the Spring Boot app to the Docker instance.

52
00:03:07.004 --> 00:03:10.004
So we're going to type dash,

53
00:03:10.004 --> 00:03:18.008
space, single quotes, 80:5000, single quotes.

54
00:03:18.008 --> 00:03:20.006
Hit Enter.

55
00:03:20.006 --> 00:03:24.008
And this should actually be on a new line.

56
00:03:24.008 --> 00:03:30.006
Here we'll type environment, slash,

57
00:03:30.006 --> 00:03:39.007
SPRING_PROFILES_ACTIVE equals dev.

58
00:03:39.007 --> 00:03:41.003
We'll save that.

59
00:03:41.003 --> 00:03:45.009
And finally, we're going to edit our Dockerfile

60
00:03:45.009 --> 00:03:46.009
and at the end of this,

61
00:03:46.009 --> 00:03:53.002
we'll type EXPOSE 5000.

62
00:03:53.002 --> 00:03:54.004
The next thing we need to do

63
00:03:54.004 --> 00:03:57.008
is open up our application.properties.

64
00:03:57.008 --> 00:04:02.002
This is located under the resources.

65
00:04:02.002 --> 00:04:06.000
We're going to comment out our port,

66
00:04:06.000 --> 00:04:09.006
server.port and our management port.

67
00:04:09.006 --> 00:04:13.002
So in the terminal window of IntelliJ,

68
00:04:13.002 --> 00:04:15.001
we're going to open this up,

69
00:04:15.001 --> 00:04:19.007
we're going to type cd .. to go up one level.

70
00:04:19.007 --> 00:04:24.002
Now, what we're going to do is zip up this project

71
00:04:24.002 --> 00:04:28.008
and we're going to copy it over to our vagrant instance.

72
00:04:28.008 --> 00:04:40.001
So let's type zip -r ~/vagrant_amzn2,

73
00:04:40.001 --> 00:04:43.002
the name of our zip file,

74
00:04:43.002 --> 00:04:49.005
SpringBootProduction.zip,

75
00:04:49.005 --> 00:04:52.007
space, the name of the directory

76
00:04:52.007 --> 00:04:55.004
that we're desiring to zip.

77
00:04:55.004 --> 00:05:00.004
And when this is finished, hit Enter.

78
00:05:00.004 --> 00:05:03.004
Let's verify that the zip was created

79
00:05:03.004 --> 00:05:05.000
in the vagrant directory.

80
00:05:05.000 --> 00:05:07.000
Let's clear the screen.

81
00:05:07.000 --> 00:05:14.009
Type ls -la ~/vagrant and Tab.

82
00:05:14.009 --> 00:05:16.008
Hit Enter.

83
00:05:16.008 --> 00:05:22.004
And we can see that our SpringBootProduction.zip is there.

84
00:05:22.004 --> 00:05:25.004
Next, we're going to leave IntelliJ behind

85
00:05:25.004 --> 00:05:29.009
and open a command prompt or terminal window.

86
00:05:29.009 --> 00:05:31.001
Inside of this window,

87
00:05:31.001 --> 00:05:35.004
we're going to cd into our vagrant instance

88
00:05:35.004 --> 00:05:37.001
and hit Enter.

89
00:05:37.001 --> 00:05:42.004
We'll type ls -la to see the files.

90
00:05:42.004 --> 00:05:46.000
If you remember, when we created the RPM,

91
00:05:46.000 --> 00:05:48.008
we used this vagrant instance,

92
00:05:48.008 --> 00:05:53.004
which was a gbailey/amzn2.

93
00:05:53.004 --> 00:05:57.001
This vagrant instance uses an Amazon Linux distro,

94
00:05:57.001 --> 00:06:00.006
which helps us to stay as close as possible

95
00:06:00.006 --> 00:06:04.008
to the dependencies for the AWS EB CLI

96
00:06:04.008 --> 00:06:07.002
that is to be next installed.

97
00:06:07.002 --> 00:06:08.008
Let's start this instance

98
00:06:08.008 --> 00:06:16.002
by typing vagrant up.

99
00:06:16.002 --> 00:06:18.000
And with the instance started,

100
00:06:18.000 --> 00:06:19.005
let's copy the project,

101
00:06:19.005 --> 00:06:23.001
which is zipped and staged in the current directory.

102
00:06:23.001 --> 00:06:26.004
We'll do this using the vagrant scp command.

103
00:06:26.004 --> 00:06:33.005
Type vagrant scp SpringBootProduction.zip,

104
00:06:33.005 --> 00:06:40.006
space, SpringBootProduction.zip and hit Enter.

105
00:06:40.006 --> 00:06:43.004
With this done, let's SSH into our instance,

106
00:06:43.004 --> 00:06:48.008
typing vagrant ssh and hit Enter.

107
00:06:48.008 --> 00:06:51.002
Okay, let's take a quick look around.

108
00:06:51.002 --> 00:06:54.007
Type ls -la.

109
00:06:54.007 --> 00:06:58.005
We can see the previous RPM folder structures.

110
00:06:58.005 --> 00:07:01.009
We also see our SpringBootProduction.zip.

111
00:07:01.009 --> 00:07:07.006
Let's go ahead and unzip our Spring Boot project.

112
00:07:07.006 --> 00:07:10.009
Followed by another ls -la.

113
00:07:10.009 --> 00:07:13.002
We see our project.

114
00:07:13.002 --> 00:07:15.008
Now we're going to go ahead and update yum again.

115
00:07:15.008 --> 00:07:23.006
We'll type sudo yum update -y and hit Enter.

116
00:07:23.006 --> 00:07:27.006
This may take a few minutes or it may not.

117
00:07:27.006 --> 00:07:29.004
It looks like I made a mistake.

118
00:07:29.004 --> 00:07:31.004
Let's type this again.

119
00:07:31.004 --> 00:07:37.008
Sudo yum update -y.

120
00:07:37.008 --> 00:07:41.001
Goes to show, even your instructor makes mistakes.

121
00:07:41.001 --> 00:07:43.001
Hit Enter.

122
00:07:43.001 --> 00:07:45.001
Now, this may take a while

123
00:07:45.001 --> 00:07:46.004
and it may not.

124
00:07:46.004 --> 00:07:51.006
It all depends on how many new RPMs are available.

125
00:07:51.006 --> 00:07:53.007
It looks like we're in good luck.

126
00:07:53.007 --> 00:07:58.005
Next, AWS EB CLI has some direct dependencies

127
00:07:58.005 --> 00:08:00.003
that need to be installed.

128
00:08:00.003 --> 00:08:02.003
So we're going to do that next.

129
00:08:02.003 --> 00:08:04.006
Let's first clear the screen.

130
00:08:04.006 --> 00:08:17.001
And we'll type sudo yum install -y zlib-devel

131
00:08:17.001 --> 00:08:22.008
space openssl-devl

132
00:08:22.008 --> 00:08:30.001
space ncurses-devel

133
00:08:30.001 --> 00:08:37.000
space libffi-devel

134
00:08:37.000 --> 00:08:50.003
space sqlite-devel.x86_64

135
00:08:50.003 --> 00:09:02.001
space readline-devel.x86_64

136
00:09:02.001 --> 00:09:14.000
space bzip2-devel.x86_64

137
00:09:14.000 --> 00:09:19.007
space unzip space git.

138
00:09:19.007 --> 00:09:23.005
And hit Enter.

139
00:09:23.005 --> 00:09:27.003
Now, I already see one file that I mistyped.

140
00:09:27.003 --> 00:09:28.005
As soon as this is done,

141
00:09:28.005 --> 00:09:30.000
we'll go back and fix that

142
00:09:30.000 --> 00:09:32.009
and I'll show you which one it was.

143
00:09:32.009 --> 00:09:38.006
If we scroll up in the command terminal window,

144
00:09:38.006 --> 00:09:43.008
you'll notice it says no package for openssl-devl.

145
00:09:43.008 --> 00:09:48.005
This is because I should have typed D-E-V-E-L.

146
00:09:48.005 --> 00:09:51.002
Let's fix that real quick.

147
00:09:51.002 --> 00:10:00.009
Sudo yum install -y openssl-devel

148
00:10:00.009 --> 00:10:08.000
and hit Enter.

149
00:10:08.000 --> 00:10:11.008
Okay, we have so far set up packages needed

150
00:10:11.008 --> 00:10:15.009
to install and run AWS CLI.

151
00:10:15.009 --> 00:10:18.000
And it's time to do that.

152
00:10:18.000 --> 00:10:21.002
Again, let's clear the screen.

153
00:10:21.002 --> 00:10:26.004
We're going to type here git clone

154
00:10:26.004 --> 00:10:51.008
https://github.com/aws/aws-elastic-beanstalk-cli-setup.git.

155
00:10:51.008 --> 00:10:53.004
Hit Enter.

156
00:10:53.004 --> 00:10:55.007
This will pull from the GitHub repository

157
00:10:55.007 --> 00:11:01.000
the necessary AWS EB CLI setup scripts.

158
00:11:01.000 --> 00:11:02.009
Now, once it's complete,

159
00:11:02.009 --> 00:11:05.006
let's type ls -la

160
00:11:05.006 --> 00:11:10.005
and we can see the AWS CLI project script's directory.

161
00:11:10.005 --> 00:11:13.002
The final step is to run the script

162
00:11:13.002 --> 00:11:17.007
and we'll do this by typing ./aws,

163
00:11:17.007 --> 00:11:19.009
tab over to the end,

164
00:11:19.009 --> 00:11:28.003
scripts/bundled_installer and hit Enter.

165
00:11:28.003 --> 00:11:31.003
If by any chance while running this script

166
00:11:31.003 --> 00:11:33.005
and you run into errors,

167
00:11:33.005 --> 00:11:40.001
you might need to install the libffi-devel package

168
00:11:40.001 --> 00:11:45.003
and then, of course, rerun this EB CLI install script again.

169
00:11:45.003 --> 00:11:52.006
Now, this will take quite a while.

170
00:11:52.006 --> 00:11:54.004
And that did take quite a long time

171
00:11:54.004 --> 00:11:56.001
but please, don't be discouraged

172
00:11:56.001 --> 00:11:58.007
by the long downloads and installation.

173
00:11:58.007 --> 00:12:02.004
Once the AWS EB CLI's installed,

174
00:12:02.004 --> 00:12:04.004
first, you shouldn't have to do this again

175
00:12:04.004 --> 00:12:07.006
unless you accidentally delete this vagrant instance.

176
00:12:07.006 --> 00:12:11.004
And second, the process following deploying Docker images

177
00:12:11.004 --> 00:12:14.005
will become pretty much a route process.

178
00:12:14.005 --> 00:12:15.009
Once this script is done,

179
00:12:15.009 --> 00:12:18.004
the AWS folks have provided

180
00:12:18.004 --> 00:12:20.002
some user-friendly echo statements

181
00:12:20.002 --> 00:12:22.006
to update the Bash profile

182
00:12:22.006 --> 00:12:25.009
and .zshrc files.

183
00:12:25.009 --> 00:12:29.007
Let's copy these one at a time

184
00:12:29.007 --> 00:12:34.000
and paste them back in.

185
00:12:34.000 --> 00:12:38.002
The first one, now the second.

186
00:12:38.002 --> 00:12:42.007
We'll go on to the third.

187
00:12:42.007 --> 00:12:46.004
And finally, the fourth one.

188
00:12:46.004 --> 00:12:49.003
Let's clear the screen.

189
00:12:49.003 --> 00:12:56.002
And we're going to type eb --version.

190
00:12:56.002 --> 00:13:02.004
And we can see that we're using EB CLI 3.20.2.

191
00:13:02.004 --> 00:13:04.007
Okay, like I said, that was a lot of work

192
00:13:04.007 --> 00:13:08.008
but now we're ready to use the AWS EB CLI

193
00:13:08.008 --> 00:13:12.000
to deploy our Docker images.

