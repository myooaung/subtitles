WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] So far, the health checks

2
00:00:01.008 --> 00:00:04.003
that we've looked at, we get by default

3
00:00:04.003 --> 00:00:06.005
and of course, by exposing those

4
00:00:06.005 --> 00:00:09.001
that we don't get by default.

5
00:00:09.001 --> 00:00:10.009
If the application is running,

6
00:00:10.009 --> 00:00:14.000
the default health check will consider the application

7
00:00:14.000 --> 00:00:15.009
and the disk health indicator.

8
00:00:15.009 --> 00:00:18.000
If we're using a database in our application

9
00:00:18.000 --> 00:00:22.006
then we would automatically get a database health indicator.

10
00:00:22.006 --> 00:00:25.001
We could as well add any number

11
00:00:25.001 --> 00:00:26.006
of preconfigured actuators

12
00:00:26.006 --> 00:00:30.003
just by adding the appropriate spring boot starter API

13
00:00:30.003 --> 00:00:31.006
like what we see here.

14
00:00:31.006 --> 00:00:35.004
And this would cause the appropriate JSON health indicators

15
00:00:35.004 --> 00:00:39.000
to show up in our overall application health.

16
00:00:39.000 --> 00:00:41.001
The way these health check indicators work,

17
00:00:41.001 --> 00:00:43.007
is that if one is down,

18
00:00:43.007 --> 00:00:48.007
the overall application health will show as down.

19
00:00:48.007 --> 00:00:50.008
You can also create custom health indicators

20
00:00:50.008 --> 00:00:52.002
which can be invaluable

21
00:00:52.002 --> 00:00:56.000
if your application has a dependency upon another service.

22
00:00:56.000 --> 00:00:58.009
And if that service is down, you may want to alert

23
00:00:58.009 --> 00:01:03.001
that this service has a health indicator issue.

24
00:01:03.001 --> 00:01:04.004
Let's go ahead and create,

25
00:01:04.004 --> 00:01:07.002
a quick example demonstrating this.

26
00:01:07.002 --> 00:01:11.004
For this project, we are using 0106 begin,

27
00:01:11.004 --> 00:01:13.002
loaded in intelliJ.

28
00:01:13.002 --> 00:01:15.000
Once the project is open,

29
00:01:15.000 --> 00:01:16.008
let's navigate down to com,

30
00:01:16.008 --> 00:01:19.003
MDR solutions dot spring boot prod,

31
00:01:19.003 --> 00:01:23.002
we'll right click, add new package.

32
00:01:23.002 --> 00:01:26.005
We'll call this health

33
00:01:26.005 --> 00:01:28.007
then we'll right click on the health

34
00:01:28.007 --> 00:01:30.009
and we'll create a new Java class.

35
00:01:30.009 --> 00:01:33.000
We're going to call this Java class,

36
00:01:33.000 --> 00:01:42.008
data web service API health indicator.

37
00:01:42.008 --> 00:01:45.001
We're calling this health indicator,

38
00:01:45.001 --> 00:01:48.001
data web service API health indicator,

39
00:01:48.001 --> 00:01:50.003
because we are supposing

40
00:01:50.003 --> 00:01:52.003
that we have a fictitious web service

41
00:01:52.003 --> 00:01:55.000
that our application will be using

42
00:01:55.000 --> 00:01:57.007
to source some specific data.

43
00:01:57.007 --> 00:01:59.001
And our health indicator

44
00:01:59.001 --> 00:02:02.006
is going to monitor this service API for status.

45
00:02:02.006 --> 00:02:04.004
Okay, with that done,

46
00:02:04.004 --> 00:02:08.004
next let's go ahead and have our health indicator

47
00:02:08.004 --> 00:02:13.007
implement spring boot health indicator.

48
00:02:13.007 --> 00:02:16.008
Now, as you can see, IntelliJ is alerting us that,

49
00:02:16.008 --> 00:02:19.006
we need to implement some of the abstract methods

50
00:02:19.006 --> 00:02:23.002
of that class, specifically the health method.

51
00:02:23.002 --> 00:02:27.007
Let's go ahead and do that.

52
00:02:27.007 --> 00:02:31.008
Currently, the health method is returning null.

53
00:02:31.008 --> 00:02:34.005
We'll fix that in a moment with a stubbed out method

54
00:02:34.005 --> 00:02:40.005
but first, let's go ahead and add at component or a class.

55
00:02:40.005 --> 00:02:43.006
And then, we're going to go down just a few spaces below,

56
00:02:43.006 --> 00:02:51.004
we're going to type private, Boolean is service up,

57
00:02:51.004 --> 00:02:55.003
this is going to return true.

58
00:02:55.003 --> 00:02:58.008
Then we're going to modify our health method.

59
00:02:58.008 --> 00:03:03.009
We're going to start by typing, if is service up,

60
00:03:03.009 --> 00:03:08.001
is not service up and inside of this,

61
00:03:08.001 --> 00:03:10.003
we're going to have a return statement.

62
00:03:10.003 --> 00:03:14.004
We're going to use the health object,

63
00:03:14.004 --> 00:03:18.006
the down method with detail

64
00:03:18.006 --> 00:03:23.009
and we're going to create in a moment, a static final key,

65
00:03:23.009 --> 00:03:27.007
this is going to be message key

66
00:03:27.007 --> 00:03:33.005
and our object value here is going to be down as a string.

67
00:03:33.005 --> 00:03:36.008
We'll finish this with the build syntax.

68
00:03:36.008 --> 00:03:39.006
Below this, we'll have a normal return.

69
00:03:39.006 --> 00:03:46.007
This will be health up with detail,

70
00:03:46.007 --> 00:03:52.003
same message key

71
00:03:52.003 --> 00:03:57.006
and this will include the string up

72
00:03:57.006 --> 00:04:00.003
and we'll call the build method.

73
00:04:00.003 --> 00:04:01.009
Now, the last thing we need to do here

74
00:04:01.009 --> 00:04:04.000
is define this message key.

75
00:04:04.000 --> 00:04:06.005
We'll go here one line

76
00:04:06.005 --> 00:04:12.001
and type private, static, final string,

77
00:04:12.001 --> 00:04:16.008
message key equals

78
00:04:16.008 --> 00:04:20.008
and we're going to give this the name of our service,

79
00:04:20.008 --> 00:04:26.004
data web service API.

80
00:04:26.004 --> 00:04:29.006
Okay, with that done, let's go ahead and save it,

81
00:04:29.006 --> 00:04:32.007
go down to our terminal window,

82
00:04:32.007 --> 00:04:36.004
access the clean build, hit enter.

83
00:04:36.004 --> 00:04:37.009
And when that's done,

84
00:04:37.009 --> 00:04:45.007
we'll go ahead and run the application.

85
00:04:45.007 --> 00:04:48.007
There we go.

86
00:04:48.007 --> 00:04:50.004
Once the application is started,

87
00:04:50.004 --> 00:04:52.009
let's go back to our Chrome browser window,

88
00:04:52.009 --> 00:04:54.007
where we have loggers.

89
00:04:54.007 --> 00:05:02.003
We're going to change this health and we'll hit enter.

90
00:05:02.003 --> 00:05:06.000
So we can see here, our custom health indicator

91
00:05:06.000 --> 00:05:07.006
and the message.

92
00:05:07.006 --> 00:05:09.005
We see our data web service API,

93
00:05:09.005 --> 00:05:13.007
the status is up and the details is the data web service API

94
00:05:13.007 --> 00:05:15.006
with an up status.

95
00:05:15.006 --> 00:05:18.002
Let's go ahead and change this again,

96
00:05:18.002 --> 00:05:20.008
but this time let's change our return value

97
00:05:20.008 --> 00:05:24.007
from true, false,

98
00:05:24.007 --> 00:05:29.007
we'll save it, control+C in the terminal window,

99
00:05:29.007 --> 00:05:33.007
clean and build it.

100
00:05:33.007 --> 00:05:38.008
We'll rerun the application.

101
00:05:38.008 --> 00:05:42.002
We'll open our application again, we'll refresh it.

102
00:05:42.002 --> 00:05:44.001
We can see that the status is down,

103
00:05:44.001 --> 00:05:48.001
the data web service API is down and so forth.

104
00:05:48.001 --> 00:05:50.006
Now this code of course is stubbed out,

105
00:05:50.006 --> 00:05:52.005
but hopefully you see,

106
00:05:52.005 --> 00:05:55.001
how you could create this actuator endpoint

107
00:05:55.001 --> 00:05:58.002
based on a rest template call to another service

108
00:05:58.002 --> 00:06:02.004
and reflect statuses of maybe a 404, a 403,

109
00:06:02.004 --> 00:06:06.004
500 or even 200 HTTP codes.

110
00:06:06.004 --> 00:06:08.004
This example demonstrates how you can go

111
00:06:08.004 --> 00:06:10.009
about creating other needed health checks

112
00:06:10.009 --> 00:06:14.000
for your applications before you go to production.

