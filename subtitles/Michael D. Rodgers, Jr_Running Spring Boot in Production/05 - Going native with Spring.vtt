WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] For this tutorial,

2
00:00:02.002 --> 00:00:05.009
please ensure that SDKMAN! is installed.

3
00:00:05.009 --> 00:00:08.008
If you have not installed SDKMAN!, as of yet,

4
00:00:08.008 --> 00:00:11.006
please go back to the introduction chapter,

5
00:00:11.006 --> 00:00:15.001
set up your environment for installation details.

6
00:00:15.001 --> 00:00:17.002
We'll be using lab exercise files

7
00:00:17.002 --> 00:00:21.002
found in folder 0205 begin for this tutorial.

8
00:00:21.002 --> 00:00:24.007
So please have this open in IntelliJ.

9
00:00:24.007 --> 00:00:26.002
I want to give you a little background

10
00:00:26.002 --> 00:00:29.003
on what we're doing here before we proceed.

11
00:00:29.003 --> 00:00:32.000
The title going native with spring

12
00:00:32.000 --> 00:00:35.008
points to a packaging methodology of our application

13
00:00:35.008 --> 00:00:38.007
that transforms this application to run natively

14
00:00:38.007 --> 00:00:40.007
on the host OS.

15
00:00:40.007 --> 00:00:44.002
And we are able to do this through GraalVM

16
00:00:44.002 --> 00:00:47.001
and a few spring boot Gradle plugins.

17
00:00:47.001 --> 00:00:49.001
The big benefit for us is that

18
00:00:49.001 --> 00:00:51.006
we can increase application throughput

19
00:00:51.006 --> 00:00:55.004
and reduce latency, as well as compile our applications

20
00:00:55.004 --> 00:01:00.006
into very, very small self-contained native binaries.

21
00:01:00.006 --> 00:01:02.009
But first, what we need to do

22
00:01:02.009 --> 00:01:07.009
is download GraalVM runtime for our operating system.

23
00:01:07.009 --> 00:01:13.006
As you can see here on the GraalVM download page

24
00:01:13.006 --> 00:01:16.005
we can use either the community GitHub build

25
00:01:16.005 --> 00:01:19.005
or the enterprise Oracle version.

26
00:01:19.005 --> 00:01:21.006
We'll be using the community GitHub build,

27
00:01:21.006 --> 00:01:25.004
so let's go ahead and click the download

28
00:01:25.004 --> 00:01:29.005
from GitHub and take a look around.

29
00:01:29.005 --> 00:01:35.001
As you can see here as a version 21.3.0,

30
00:01:35.001 --> 00:01:39.000
we have stable versions of Java 11 and Java 17

31
00:01:39.000 --> 00:01:41.006
based on GraalVM.

32
00:01:41.006 --> 00:01:46.007
GraalVM version 21.3.0 does not support Java 8,

33
00:01:46.007 --> 00:01:51.009
so unfortunately we'll be using Java 11 for this tutorial.

34
00:01:51.009 --> 00:01:56.004
GraalVM version 21.2.0 does support Java 8,

35
00:01:56.004 --> 00:01:58.009
but not for a Mac.

36
00:01:58.009 --> 00:02:02.007
At any rate, let's stay at Java 11 for this tutorial.

37
00:02:02.007 --> 00:02:04.006
If you're watching this video later

38
00:02:04.006 --> 00:02:09.001
and version 21.3.0 is not listed downloads,

39
00:02:09.001 --> 00:02:19.009
you can load github.com GraalVM-ce-builds/tags

40
00:02:19.009 --> 00:02:22.002
to see all of the available versions

41
00:02:22.002 --> 00:02:26.004
and if need be a version used for this tutorial.

42
00:02:26.004 --> 00:02:28.005
I recommend spending some time on this site

43
00:02:28.005 --> 00:02:33.000
to read all of the available documentation as well.

44
00:02:33.000 --> 00:02:34.007
I'm showing you these pages,

45
00:02:34.007 --> 00:02:37.009
even though we will not be downloading from here

46
00:02:37.009 --> 00:02:40.008
because the information and details are important

47
00:02:40.008 --> 00:02:43.002
for software engineers to understand

48
00:02:43.002 --> 00:02:46.006
when deciding what tools to use and how to go forward.

49
00:02:46.006 --> 00:02:49.004
Now, armed that information we need,

50
00:02:49.004 --> 00:02:53.007
let's use SDKMAN! to ease the install on our systems.

51
00:02:53.007 --> 00:02:56.003
If we jump over to SDKMAN! in the terminal

52
00:02:56.003 --> 00:03:01.001
and type SDK list Java,

53
00:03:01.001 --> 00:03:08.006
we can see that 8.312.07.1 is installed and in use.

54
00:03:08.006 --> 00:03:11.000
Let's go ahead and update SDK

55
00:03:11.000 --> 00:03:15.004
by typing SDK update.

56
00:03:15.004 --> 00:03:18.007
It says to open a new terminal, so let's do that now.

57
00:03:18.007 --> 00:03:22.004
And now we're going to install GraalVM.

58
00:03:22.004 --> 00:03:27.004
So first let's go back to SDK list Java.

59
00:03:27.004 --> 00:03:30.004
We're going to find the version of GraalVM

60
00:03:30.004 --> 00:03:37.002
which is Graal 21.2.0.r11-graal.

61
00:03:37.002 --> 00:03:42.002
The R 11 refers to the Graal version instance.

62
00:03:42.002 --> 00:03:46.004
Let's use 21.3r11-graal.

63
00:03:46.004 --> 00:03:49.002
We'll copy that, type Q

64
00:03:49.002 --> 00:03:50.009
and now let's install that version.

65
00:03:50.009 --> 00:04:05.005
SDK install Java 21.3.0.r-11-grl.

66
00:04:05.005 --> 00:04:08.000
And here we'll type Y

67
00:04:08.000 --> 00:04:10.002
to set this as the default.

68
00:04:10.002 --> 00:04:16.003
Okay, so let's type SDK list Java.

69
00:04:16.003 --> 00:04:18.006
And now we can see that we're actually using

70
00:04:18.006 --> 00:04:26.001
and the graal 21.3.0.r11 is installed.

71
00:04:26.001 --> 00:04:30.003
We'll type Java-version.

72
00:04:30.003 --> 00:04:36.008
And this as well tells us that we have JDK 11. 13 installed

73
00:04:36.008 --> 00:04:43.005
and graalVM 21.3.0 installed.

74
00:04:43.005 --> 00:04:47.006
Going back to our project code inside of IntelliJ,

75
00:04:47.006 --> 00:04:50.008
we're going to open the build Gradle file.

76
00:04:50.008 --> 00:04:52.009
and let's make some alterations

77
00:04:52.009 --> 00:04:58.002
like changing the source compatibility from 1.8 to 11.

78
00:04:58.002 --> 00:05:02.004
Next we're going to add some plugins after the id.java

79
00:05:02.004 --> 00:05:07.006
we'll type ID space.org,

80
00:05:07.006 --> 00:05:15.007
spring framework.experimental.aot.

81
00:05:15.007 --> 00:05:24.007
And after this, we'll specify a version of 0.1 and .3.

82
00:05:24.007 --> 00:05:26.009
We'll add another ID

83
00:05:26.009 --> 00:05:38.002
and this will be org.graalvm build tools.native.

84
00:05:38.002 --> 00:05:46.002
The version we'll use for this one is 0.9.3.

85
00:05:46.002 --> 00:05:49.005
We need to ensure that our Maven repositories

86
00:05:49.005 --> 00:05:52.003
are pointing at the spring releases.

87
00:05:52.003 --> 00:05:57.003
So we're going to modify our repository section

88
00:05:57.003 --> 00:06:01.004
going to delete this part

89
00:06:01.004 --> 00:06:04.004
and type it again, but this time

90
00:06:04.004 --> 00:06:06.007
we'll put it all on one line.

91
00:06:06.007 --> 00:06:20.009
URL https://repo.springIO/release.

92
00:06:20.009 --> 00:06:23.003
Additionally, we need to add some gradle task

93
00:06:23.003 --> 00:06:26.003
at the bottom of this file.

94
00:06:26.003 --> 00:06:28.003
We'll go down under the test

95
00:06:28.003 --> 00:06:34.005
and we'll type native build early bracket

96
00:06:34.005 --> 00:06:44.004
class path process, aot resources.outputs

97
00:06:44.004 --> 00:06:53.006
comma compile aot Java.outputs.

98
00:06:53.006 --> 00:06:58.006
Following of that will add a native test as well.

99
00:06:58.006 --> 00:07:04.006
Again, we'll type class path process at resources

100
00:07:04.006 --> 00:07:13.005
but we'll change this to test resources dot outputs

101
00:07:13.005 --> 00:07:25.002
compile aot, change this to aot best Java .outputs.

102
00:07:25.002 --> 00:07:28.001
We also need to modify our settings Gradle

103
00:07:28.001 --> 00:07:31.009
and right before the root project name

104
00:07:31.009 --> 00:07:36.009
we'll enter a plugin management section

105
00:07:36.009 --> 00:07:39.000
type curly bracket

106
00:07:39.000 --> 00:07:47.001
repositories curly brackets, again, Maven URL

107
00:07:47.001 --> 00:07:59.004
https://repo spring IO/release.

108
00:07:59.004 --> 00:08:04.005
On the next we'll type Maven central.

109
00:08:04.005 --> 00:08:10.002
And finally we'll type Gradle plugin portal.

110
00:08:10.002 --> 00:08:12.002
We'll save this and we're going to go back

111
00:08:12.002 --> 00:08:16.002
to our build Gradle file.

112
00:08:16.002 --> 00:08:18.002
The last change we need to make is

113
00:08:18.002 --> 00:08:23.001
by adding a dependency for an unimplemented enum constant

114
00:08:23.001 --> 00:08:29.002
which is rough currently from java.annotation.meta.win.

115
00:08:29.002 --> 00:08:32.005
This may not happen in every code instance, but in ours

116
00:08:32.005 --> 00:08:36.004
it has a dependency that we need to satisfy.

117
00:08:36.004 --> 00:08:39.004
We'll scroll up,

118
00:08:39.004 --> 00:08:43.006
here we'll type implementation,

119
00:08:43.006 --> 00:08:49.004
single quotes com.google .code

120
00:08:49.004 --> 00:09:00.008
.find bugs:JSR 305:3.0.2.

121
00:09:00.008 --> 00:09:03.006
And we're also going to remove

122
00:09:03.006 --> 00:09:08.002
the net ultra timely layout dialect.

123
00:09:08.002 --> 00:09:10.000
We'll save this.

124
00:09:10.000 --> 00:09:12.002
And our next step is to build.

125
00:09:12.002 --> 00:09:16.000
Now, in our last video, we generated the Docker image

126
00:09:16.000 --> 00:09:19.007
through great old w boot build image.

127
00:09:19.007 --> 00:09:24.001
Along with the image name, to build a native image

128
00:09:24.001 --> 00:09:32.002
we'll need to run dot slash cradle w native build

129
00:09:32.002 --> 00:09:34.002
and this will generate our native image.

130
00:09:34.002 --> 00:09:37.002
Now just hit enter.

131
00:09:37.002 --> 00:09:39.004
I want to forewarn you,

132
00:09:39.004 --> 00:09:44.001
gradle native builds will take quite a while to complete

133
00:09:44.001 --> 00:09:48.004
and you will possibly see failed verification messages

134
00:09:48.004 --> 00:09:51.005
with many, many warning messages.

135
00:09:51.005 --> 00:09:53.006
This is completely okay.

136
00:09:53.006 --> 00:09:55.006
The long build time here is

137
00:09:55.006 --> 00:09:59.003
because the native build task is removing all

138
00:09:59.003 --> 00:10:03.000
the unnecessary dependencies that will not be needed

139
00:10:03.000 --> 00:10:09.002
for a stripped down minimalist native build.

140
00:10:09.002 --> 00:10:13.009
Wow, that took a really long time to build and compile.

141
00:10:13.009 --> 00:10:17.002
Again, don't worry too much about all the warning messages.

142
00:10:17.002 --> 00:10:20.002
So for me, this build took 14 minutes

143
00:10:20.002 --> 00:10:22.009
and 32 seconds to complete.

144
00:10:22.009 --> 00:10:24.009
That is a crazy long amount of time

145
00:10:24.009 --> 00:10:29.005
but the benefit to these native build images lies

146
00:10:29.005 --> 00:10:32.006
in the sub-second startup times

147
00:10:32.006 --> 00:10:35.005
and the responsiveness of the applications.

148
00:10:35.005 --> 00:10:38.000
I'm not sure how long your build time took

149
00:10:38.000 --> 00:10:41.008
but let's go ahead and run the build located

150
00:10:41.008 --> 00:10:46.000
in the build native native build .

151
00:10:46.000 --> 00:10:48.003
Let's first clear the screen

152
00:10:48.003 --> 00:10:54.000
we'll type build/native

153
00:10:54.000 --> 00:11:05.001
/native build/spring boot broad application

154
00:11:05.001 --> 00:11:16.007
space-D spring.profiles.active equals dev,

155
00:11:16.007 --> 00:11:20.001
and hit enter.

156
00:11:20.001 --> 00:11:25.002
Now, what I hope you're seeing here is the subsecond startup

157
00:11:25.002 --> 00:11:27.005
for this application.

158
00:11:27.005 --> 00:11:32.009
Its started in 0.6 seconds.

159
00:11:32.009 --> 00:11:34.008
If we compare this say

160
00:11:34.008 --> 00:11:39.001
against running the jar let's control C

161
00:11:39.001 --> 00:11:50.005
and do Java jar D spring.profiles.active equals

162
00:11:50.005 --> 00:11:58.001
dev build LIS spring boot prod application dot jar

163
00:11:58.001 --> 00:11:59.007
and hit enter.

164
00:11:59.007 --> 00:12:00.007
You'll notice

165
00:12:00.007 --> 00:12:05.001
that the startup time takes a much, much longer.

166
00:12:05.001 --> 00:12:12.009
In fact, it's still starting and mine shows 5.76 seconds.

167
00:12:12.009 --> 00:12:16.003
As a side note, I've seen law, larger applications take

168
00:12:16.003 --> 00:12:21.002
up to five minutes per app on a Tomcat server

169
00:12:21.002 --> 00:12:23.009
with a complete restart of the Tomcat instance

170
00:12:23.009 --> 00:12:27.007
taking over 30 minutes, which is just horrible.

171
00:12:27.007 --> 00:12:32.002
Spring boot running natively is truly a game changer.

172
00:12:32.002 --> 00:12:33.009
I'm going to control C here.

173
00:12:33.009 --> 00:12:35.008
We're going to run it again

174
00:12:35.008 --> 00:12:39.004
as a native image, we'll hit enter.

175
00:12:39.004 --> 00:12:43.000
Wow, again, 0.666 seconds.

176
00:12:43.000 --> 00:12:45.004
Not an unholy number there at all, right.

177
00:12:45.004 --> 00:12:48.009
Let's go ahead and go to the browser.

178
00:12:48.009 --> 00:12:55.000
We'll test this we'll type local host 9,000,

179
00:12:55.000 --> 00:12:57.004
hit enter,

180
00:12:57.004 --> 00:13:00.006
application came up right away.

181
00:13:00.006 --> 00:13:04.006
All right, let's go ahead and change this to .1

182
00:13:04.006 --> 00:13:06.001
and look at our actuator health,

183
00:13:06.001 --> 00:13:07.008
hit enter.

184
00:13:07.008 --> 00:13:11.004
Look how responsive and how fast it is.

185
00:13:11.004 --> 00:13:13.009
Now, hopefully this demonstrates

186
00:13:13.009 --> 00:13:16.005
some very fascinating possibilities

187
00:13:16.005 --> 00:13:20.007
on how your prod deployments can improve production usage.

188
00:13:20.007 --> 00:13:23.008
Keep in mind that a native build has to be run

189
00:13:23.008 --> 00:13:27.006
on the OS that matches your production environment,

190
00:13:27.006 --> 00:13:30.006
sort of like the RPM build process.

191
00:13:30.006 --> 00:13:34.000
You might think, even of combining the two.

