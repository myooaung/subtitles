WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Depending on your organization,

2
00:00:02.001 --> 00:00:03.002
this is a question

3
00:00:03.002 --> 00:00:05.000
that hopefully you've been trying to answer

4
00:00:05.000 --> 00:00:07.001
for quite some time.

5
00:00:07.001 --> 00:00:09.001
What are the package requirements

6
00:00:09.001 --> 00:00:13.002
for my organization and application?

7
00:00:13.002 --> 00:00:14.004
With Spring Boot,

8
00:00:14.004 --> 00:00:16.003
you can architect your application

9
00:00:16.003 --> 00:00:19.002
in about five different ways.

10
00:00:19.002 --> 00:00:20.007
You could create an uber-jar,

11
00:00:20.007 --> 00:00:23.005
which allows you to package your application in such a way

12
00:00:23.005 --> 00:00:26.009
that it makes it independent of application servers

13
00:00:26.009 --> 00:00:29.007
you might have traditionally used.

14
00:00:29.007 --> 00:00:34.009
Internally, this Spring Boot uber-jar uses Tomcat by default

15
00:00:34.009 --> 00:00:38.003
when you include spring-boot-starter-web,

16
00:00:38.003 --> 00:00:42.002
but you could just as well opt to use Tomcat,

17
00:00:42.002 --> 00:00:46.007
Jetty, Undertow, or Reactor Netty.

18
00:00:46.007 --> 00:00:52.000
Just be sure that you exclude spring-boot-starter-tomcat.

19
00:00:52.000 --> 00:00:55.008
Spring Boot uber-jar includes this embedded web server

20
00:00:55.008 --> 00:00:59.005
as part of creating a self-contained environment.

21
00:00:59.005 --> 00:01:04.009
So far in our demos, we have used the uber-jar methodology.

22
00:01:04.009 --> 00:01:07.009
The second application packaging option

23
00:01:07.009 --> 00:01:09.006
is to use a war file.

24
00:01:09.006 --> 00:01:11.008
This allows rapid development and testing

25
00:01:11.008 --> 00:01:15.005
by executing the war file just like the jar file,

26
00:01:15.005 --> 00:01:17.007
and still being able to deploy it

27
00:01:17.007 --> 00:01:20.005
to traditional web application servers,

28
00:01:20.005 --> 00:01:25.001
like Tomcat, JBoss, GlassFish, or even WebLogic

29
00:01:25.001 --> 00:01:28.003
with a few additional tweaks.

30
00:01:28.003 --> 00:01:29.006
It should be noted, however,

31
00:01:29.006 --> 00:01:32.006
that this pattern of deploying war files

32
00:01:32.006 --> 00:01:35.005
can cause issues with shared class paths

33
00:01:35.005 --> 00:01:38.000
and Tomcat instances.

34
00:01:38.000 --> 00:01:40.006
And so you have to pay attention to those issues

35
00:01:40.006 --> 00:01:43.007
when you're configuring a shared Tomcat instance

36
00:01:43.007 --> 00:01:47.003
to host multiple applications.

37
00:01:47.003 --> 00:01:51.001
Josh Long, the Spring Developer Advocate at Pivotal,

38
00:01:51.001 --> 00:01:54.002
in an interview with InfoQ, points out that,

39
00:01:54.002 --> 00:01:57.003
"You do not need to deploy code into a container.

40
00:01:57.003 --> 00:01:59.002
Just stand up the engine.

41
00:01:59.002 --> 00:02:01.007
It's just a library at that point.

42
00:02:01.007 --> 00:02:04.009
It's all about reducing the surface area."

43
00:02:04.009 --> 00:02:09.007
His mantra is make jar, not war.

44
00:02:09.007 --> 00:02:12.006
The third packaging methodology you could use

45
00:02:12.006 --> 00:02:16.006
is to create an RPM for a specific environment.

46
00:02:16.006 --> 00:02:19.004
There are benefits in this packaging methodology

47
00:02:19.004 --> 00:02:20.007
when you want to control

48
00:02:20.007 --> 00:02:23.003
the start and stopping of an application

49
00:02:23.003 --> 00:02:26.006
through the service system commands, like systemctl.

50
00:02:26.006 --> 00:02:28.006
The installed application,

51
00:02:28.006 --> 00:02:31.001
as a service on the Linux distro,

52
00:02:31.001 --> 00:02:32.009
then can be assigned a role

53
00:02:32.009 --> 00:02:37.004
and restarted via differing listener agents.

54
00:02:37.004 --> 00:02:39.003
Keep in mind that for this approach,

55
00:02:39.003 --> 00:02:41.009
you have to have the Linux distribution

56
00:02:41.009 --> 00:02:44.004
that you're going to build the RPM on

57
00:02:44.004 --> 00:02:47.002
to match the targeted Linux distribution

58
00:02:47.002 --> 00:02:49.002
that you're deploying to.

59
00:02:49.002 --> 00:02:51.000
This can often be handled

60
00:02:51.000 --> 00:02:55.008
through your CI/CD pipelines and build agents.

61
00:02:55.008 --> 00:02:57.006
The fourth packaging methodology

62
00:02:57.006 --> 00:03:00.003
concerns building a jar or a war file

63
00:03:00.003 --> 00:03:03.006
and packaging it on a Docker image.

64
00:03:03.006 --> 00:03:06.000
The obvious benefits of this approach

65
00:03:06.000 --> 00:03:08.007
are that the application and the configuration

66
00:03:08.007 --> 00:03:12.000
are containerized and self-contained,

67
00:03:12.000 --> 00:03:17.002
allowing one to only have to deploy a Docker container.

68
00:03:17.002 --> 00:03:19.003
The fifth, and really the newest,

69
00:03:19.003 --> 00:03:24.009
is to create a native image using Spring Boot and GraalVM.

70
00:03:24.009 --> 00:03:27.007
This is the newest packaging paradigm,

71
00:03:27.007 --> 00:03:30.007
and it's still under development with Spring Native,

72
00:03:30.007 --> 00:03:33.006
but you can quickly create and deploy

73
00:03:33.006 --> 00:03:36.005
applications that run natively.

74
00:03:36.005 --> 00:03:41.000
You can also do this as native apps in Docker.

