WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] For this video and the next several videos,

2
00:00:03.000 --> 00:00:06.003
we'll be using GitHub, creating various repositories

3
00:00:06.003 --> 00:00:08.009
and learning how to use GitHub actions.

4
00:00:08.009 --> 00:00:11.002
If you do not have a GitHub account, you should,

5
00:00:11.002 --> 00:00:13.007
because this really is a great place

6
00:00:13.007 --> 00:00:15.008
for working on personal projects

7
00:00:15.008 --> 00:00:18.004
and honing your skills with Git and GitHub.

8
00:00:18.004 --> 00:00:22.007
GitHub accounts are free, so let's create one.

9
00:00:22.007 --> 00:00:23.007
In your browser,

10
00:00:23.007 --> 00:00:29.001
open to https://github.com.

11
00:00:29.001 --> 00:00:33.003
And in the email address fill, type in an email address

12
00:00:33.003 --> 00:00:38.006
that you prefer.

13
00:00:38.006 --> 00:00:39.005
On the next screen

14
00:00:39.005 --> 00:00:42.004
you should see a page that ask you to enter the email

15
00:00:42.004 --> 00:00:44.002
and press continue.

16
00:00:44.002 --> 00:00:51.005
This will prompt you for a password and then a username.

17
00:00:51.005 --> 00:00:53.003
Click continue.

18
00:00:53.003 --> 00:00:54.007
For the username, choose something

19
00:00:54.007 --> 00:00:56.002
that will make sense to you.

20
00:00:56.002 --> 00:01:04.006
I'm going to use CWM coding and then click continue.

21
00:01:04.006 --> 00:01:05.005
This is up to you

22
00:01:05.005 --> 00:01:08.000
whether or not you want to receive product announcements

23
00:01:08.000 --> 00:01:14.007
and updates, I'm going to click no, and continue.

24
00:01:14.007 --> 00:01:17.008
Next, we need to verify our account.

25
00:01:17.008 --> 00:01:21.005
GitHub is going to ask me to solve a puzzle.

26
00:01:21.005 --> 00:01:34.002
Click start puzzle.

27
00:01:34.002 --> 00:01:36.009
And click create account.

28
00:01:36.009 --> 00:01:40.007
Next, it's going to ask you to enter the code that was sent

29
00:01:40.007 --> 00:01:42.003
to your email.

30
00:01:42.003 --> 00:01:49.001
I'll check my email and enter my launch code.

31
00:01:49.001 --> 00:01:51.001
This screen is asking for information

32
00:01:51.001 --> 00:01:52.004
about the size of your team.

33
00:01:52.004 --> 00:01:53.009
I'm picking just me

34
00:01:53.009 --> 00:02:00.008
and selecting teacher and then continue.

35
00:02:00.008 --> 00:02:03.006
Now, this next prompt gives you various check

36
00:02:03.006 --> 00:02:06.003
boxes that are meant to help you figure

37
00:02:06.003 --> 00:02:09.003
out the right account, whatever you choose here

38
00:02:09.003 --> 00:02:18.008
on the next page, I'm still going to choose free account.

39
00:02:18.008 --> 00:02:22.008
And now we're here on the screen to create a new repository.

40
00:02:22.008 --> 00:02:27.000
Let's click create repository

41
00:02:27.000 --> 00:02:31.005
and we're going to call this repository after the code base

42
00:02:31.005 --> 00:02:36.005
that we have with 04_01 begin SpringBootProduction.

43
00:02:36.005 --> 00:02:38.003
So we'll call this again

44
00:02:38.003 --> 00:02:40.007
the name of the directory inside

45
00:02:40.007 --> 00:02:50.008
of 04_01 SpringBootProduction.

46
00:02:50.008 --> 00:02:51.008
For the rest of the options

47
00:02:51.008 --> 00:02:53.000
I'm not going to click anything.

48
00:02:53.000 --> 00:02:59.000
I will keep it public and then click create repository.

49
00:02:59.000 --> 00:03:03.004
Now, next we want to switch back to our terminal window.

50
00:03:03.004 --> 00:03:04.008
We're going to copy

51
00:03:04.008 --> 00:03:11.005
from chapter 04_01_Begin SpringBootProduction.

52
00:03:11.005 --> 00:03:16.007
For myself, I'm inside the exercise files.

53
00:03:16.007 --> 00:03:22.000
So I'll type cp -r for recursive

54
00:03:22.000 --> 00:03:31.005
Chapter_04/04 begin SpringBootProduction.

55
00:03:31.005 --> 00:03:35.003
And then I'm going to choose my home directory.

56
00:03:35.003 --> 00:03:37.008
This will copy the contents of this directory

57
00:03:37.008 --> 00:03:41.003
and create a new directory with the same name

58
00:03:41.003 --> 00:03:43.007
with all the files in it.

59
00:03:43.007 --> 00:03:44.006
I'm doing this

60
00:03:44.006 --> 00:03:48.002
because I want to keep my exercise files clean

61
00:03:48.002 --> 00:03:49.007
at this point.

62
00:03:49.007 --> 00:03:54.002
Let's change directories.

63
00:03:54.002 --> 00:03:59.000
And inside this directory, if we do ls -la

64
00:03:59.000 --> 00:04:01.008
we can see the files.

65
00:04:01.008 --> 00:04:05.005
Let's type git init,

66
00:04:05.005 --> 00:04:08.004
hit enter,

67
00:04:08.004 --> 00:04:13.000
then we'll type git add dot,

68
00:04:13.000 --> 00:04:18.003
add all the local files to my local repo.

69
00:04:18.003 --> 00:04:21.003
Typing git status shows all

70
00:04:21.003 --> 00:04:26.003
of the files now have been added and are waiting commit.

71
00:04:26.003 --> 00:04:32.007
So now we'll type git commit -m for message.

72
00:04:32.007 --> 00:04:38.008
and then type first commit close quote, hit enter.

73
00:04:38.008 --> 00:04:41.002
Type git status again.

74
00:04:41.002 --> 00:04:44.002
We see that we're on the branch master

75
00:04:44.002 --> 00:04:45.009
and there's nothing to commit.

76
00:04:45.009 --> 00:04:47.007
I'm going to type clear.

77
00:04:47.007 --> 00:04:54.001
And because GitHub likes main branch rather than master

78
00:04:54.001 --> 00:04:55.009
we're going to switch our branch name.

79
00:04:55.009 --> 00:05:03.006
We'll type hit branch -M main.

80
00:05:03.006 --> 00:05:06.000
Type git status again.

81
00:05:06.000 --> 00:05:08.008
Now we can see that we're on the main branch.

82
00:05:08.008 --> 00:05:11.000
Now we're going to make sure we're connected

83
00:05:11.000 --> 00:05:14.000
to our remote GitHub repository

84
00:05:14.000 --> 00:05:19.003
and we're going to do this by typing git remote

85
00:05:19.003 --> 00:05:26.006
add origin https://

86
00:05:26.006 --> 00:05:29.001
Here I want you to type your username.

87
00:05:29.001 --> 00:05:40.007
Mine is cwm-coding@github.com/cwm-coding.

88
00:05:40.007 --> 00:05:43.006
Again, your username.

89
00:05:43.006 --> 00:05:49.004
SpringBootProduction.git

90
00:05:49.004 --> 00:05:50.009
and hit enter.

91
00:05:50.009 --> 00:05:53.005
Then we're going to push what we have

92
00:05:53.005 --> 00:05:56.004
in our local repository to the remote.

93
00:05:56.004 --> 00:06:05.003
We'll do this by typing git push -u origin main.

94
00:06:05.003 --> 00:06:10.004
Now we're getting invalid username and password for this.

95
00:06:10.004 --> 00:06:13.000
So what we're going to do is we're going to switch

96
00:06:13.000 --> 00:06:16.009
over back to our browser window.

97
00:06:16.009 --> 00:06:19.002
We're going to create a personal access token

98
00:06:19.002 --> 00:06:23.003
and we'll do that by clicking on our icon in the top right,

99
00:06:23.003 --> 00:06:28.002
going to settings, we'll scroll to the bottom,

100
00:06:28.002 --> 00:06:30.008
go to developer settings,

101
00:06:30.008 --> 00:06:33.005
we'll click on personal access tokens

102
00:06:33.005 --> 00:06:36.006
and then generate new token.

103
00:06:36.006 --> 00:06:42.000
Inside of this, I'm going to call this CWM access token.

104
00:06:42.000 --> 00:06:45.000
I'll set the expiration for 90 days.

105
00:06:45.000 --> 00:06:47.006
If you want, you can set it to no expiration

106
00:06:47.006 --> 00:06:52.008
but as you can see, GitHub strongly recommends against that.

107
00:06:52.008 --> 00:06:57.008
I'm going to select repo workflow

108
00:06:57.008 --> 00:07:05.000
write packages, delete packages, and user.

109
00:07:05.000 --> 00:07:08.003
Then I'll generate my token.

110
00:07:08.003 --> 00:07:13.000
Now I highly recommend that you copy this token

111
00:07:13.000 --> 00:07:15.000
because you will never see it again

112
00:07:15.000 --> 00:07:18.005
and paste it someplace that you can have access to it.

113
00:07:18.005 --> 00:07:20.001
I've copied mine.

114
00:07:20.001 --> 00:07:25.002
Now let's go back to our terminal window again.

115
00:07:25.002 --> 00:07:26.001
For good measure,

116
00:07:26.001 --> 00:07:29.002
we're going to add the origin again.

117
00:07:29.002 --> 00:07:31.006
I'm going to make sure I've typed everything correctly.

118
00:07:31.006 --> 00:07:35.007
Cwm-coding@github, cwm-coding.

119
00:07:35.007 --> 00:07:38.001
Both of those match I'll hit enter.

120
00:07:38.001 --> 00:07:39.008
It says it already exists.

121
00:07:39.008 --> 00:07:41.000
I'm going to scroll up twice

122
00:07:41.000 --> 00:07:45.003
and push the origin name, asking for my password.

123
00:07:45.003 --> 00:07:52.002
I'm going to right click and paste the token and hit enter.

124
00:07:52.002 --> 00:07:55.007
Now, if we type git status

125
00:07:55.007 --> 00:07:58.007
we see that we're on the main branch

126
00:07:58.007 --> 00:08:02.002
and that our branch is up to date with origin main.

127
00:08:02.002 --> 00:08:06.004
Let's go back to the GitHub repository one more time

128
00:08:06.004 --> 00:08:10.001
and we'll click on the cat icon, the GitHub icon

129
00:08:10.001 --> 00:08:14.009
in the top left.

130
00:08:14.009 --> 00:08:18.009
We'll click on our repository.

131
00:08:18.009 --> 00:08:22.007
And we can see that all of our code has been updated.

132
00:08:22.007 --> 00:08:25.006
The new page will look something like this

133
00:08:25.006 --> 00:08:30.000
and we will be using this repo to get acquainted

134
00:08:30.000 --> 00:08:34.009
with some of the more basic GitHub actions and workflows.

135
00:08:34.009 --> 00:08:38.005
So let's talk about that for a minute.

136
00:08:38.005 --> 00:08:42.007
GitLab and GitHub both provide built in tool sets

137
00:08:42.007 --> 00:08:46.003
for CI/CD or continuous integration

138
00:08:46.003 --> 00:08:49.004
and continuous deployment.

139
00:08:49.004 --> 00:08:53.002
Continuous integration at a high level is the process

140
00:08:53.002 --> 00:08:57.000
of automating the build and testing

141
00:08:57.000 --> 00:09:01.001
of code of every team member that commits changes

142
00:09:01.001 --> 00:09:03.003
to version control.

143
00:09:03.003 --> 00:09:08.008
Continuous integration or CI should encourage developers

144
00:09:08.008 --> 00:09:10.005
to share their code

145
00:09:10.005 --> 00:09:14.004
which will trigger a build, testing, merging

146
00:09:14.004 --> 00:09:19.004
and validation of code back to the main branch.

147
00:09:19.004 --> 00:09:24.001
Continuous deployment, CD, is a software release

148
00:09:24.001 --> 00:09:28.001
process that uses automated testing to validate

149
00:09:28.001 --> 00:09:30.008
if changes to a code base are correct

150
00:09:30.008 --> 00:09:34.001
and stable for immediate autonomous deployment

151
00:09:34.001 --> 00:09:36.007
to a production environment.

152
00:09:36.007 --> 00:09:40.008
GitHub actions allow for automating these workflows

153
00:09:40.008 --> 00:09:43.009
and you can create custom workflows as well

154
00:09:43.009 --> 00:09:47.002
as those that match your team's needs.

155
00:09:47.002 --> 00:09:50.004
GitHub actually makes available a large selection

156
00:09:50.004 --> 00:09:55.009
of published actions that you can consume in your projects.

157
00:09:55.009 --> 00:09:57.009
GitHub actions depend

158
00:09:57.009 --> 00:10:02.007
on an event that occurs in your code repository.

159
00:10:02.007 --> 00:10:04.001
That could be something that happens

160
00:10:04.001 --> 00:10:06.003
in or to your code set.

161
00:10:06.003 --> 00:10:11.000
Event types can be commits, merges, deletes, forks, pushes,

162
00:10:11.000 --> 00:10:14.003
issue creation, and many more.

163
00:10:14.003 --> 00:10:16.000
As you can see here,

164
00:10:16.000 --> 00:10:19.009
there are many published events that you can use to

165
00:10:19.009 --> 00:10:22.009
trigger a workflow.

166
00:10:22.009 --> 00:10:25.000
In GitHub, the workflow is a set

167
00:10:25.000 --> 00:10:29.007
of GitHub actions that you specify that will take place.

168
00:10:29.007 --> 00:10:32.001
And this is where you can take advantage

169
00:10:32.001 --> 00:10:36.005
of a number of professionally prewritten published actions

170
00:10:36.005 --> 00:10:39.005
and workflows for your own consumption.

171
00:10:39.005 --> 00:10:44.000
Some of these could just be linting your project code base

172
00:10:44.000 --> 00:10:48.003
or automating J unit testing, building your code,

173
00:10:48.003 --> 00:10:51.007
and of course deploying your code.

174
00:10:51.007 --> 00:10:54.006
Here's the thing about GitHub and GitLab.

175
00:10:54.006 --> 00:10:58.005
Both provide developer tools to automate the DevOps process

176
00:10:58.005 --> 00:11:02.003
without having a dedicated DevOps engineer.

177
00:11:02.003 --> 00:11:06.001
GitHub works a bit differently than GitLab, but both

178
00:11:06.001 --> 00:11:10.002
of these git repository tools allow you the freedom to

179
00:11:10.002 --> 00:11:13.007
get away from third party server tools like Jenkins

180
00:11:13.007 --> 00:11:18.003
Travis-CI, Bamboo, and many other various tools.

181
00:11:18.003 --> 00:11:22.009
Okay, let's go ahead and create an action.

182
00:11:22.009 --> 00:11:28.005
This action will be to test and build our project.

183
00:11:28.005 --> 00:11:33.006
And at the top of the screen, we see the actions link.

184
00:11:33.006 --> 00:11:36.006
Go ahead and click on this.

185
00:11:36.006 --> 00:11:40.002
The page that loads will list a number

186
00:11:40.002 --> 00:11:45.008
of pre-built professional actions that we can consume

187
00:11:45.008 --> 00:11:47.006
and add to our project.

188
00:11:47.006 --> 00:11:51.007
Let's scroll down the page until we see the more

189
00:11:51.007 --> 00:11:56.003
continuous integrations hyperlink button.

190
00:11:56.003 --> 00:11:59.004
We'll click this

191
00:11:59.004 --> 00:12:05.002
and we want to find the Java with Gradle action.

192
00:12:05.002 --> 00:12:10.001
We'll scroll down.

193
00:12:10.001 --> 00:12:14.006
We'll select set up this workflow

194
00:12:14.006 --> 00:12:16.000
and you should see something

195
00:12:16.000 --> 00:12:18.000
like the screen that is before us.

196
00:12:18.000 --> 00:12:20.004
Now, let me talk through this real quickly.

197
00:12:20.004 --> 00:12:24.007
What we see here are event listeners on push and pull

198
00:12:24.007 --> 00:12:28.004
and this occurs to our main branch.

199
00:12:28.004 --> 00:12:34.000
This triggers a build job that runs on Ubuntu.

200
00:12:34.000 --> 00:12:38.006
It uses a pre-built action that checks out the code

201
00:12:38.006 --> 00:12:42.002
and then we see some Linux permissions being applied

202
00:12:42.002 --> 00:12:45.001
to the gradlew task

203
00:12:45.001 --> 00:12:48.008
which is the script that will be used and then ran.

204
00:12:48.008 --> 00:12:52.000
So let's accept what we see here.

205
00:12:52.000 --> 00:12:54.009
Click start commit.

206
00:12:54.009 --> 00:12:56.005
We'll accept the default message

207
00:12:56.005 --> 00:13:00.007
for our commit and click commit new file.

208
00:13:00.007 --> 00:13:03.009
Again, I want to click on actions

209
00:13:03.009 --> 00:13:06.001
and this time we should see a workflow

210
00:13:06.001 --> 00:13:09.001
that's in process.

211
00:13:09.001 --> 00:13:15.008
Clicking on the build, we see a number of jobs taking place.

212
00:13:15.008 --> 00:13:18.001
We see the JDK set up,

213
00:13:18.001 --> 00:13:20.006
we see the permissions being granted

214
00:13:20.006 --> 00:13:26.000
and now we see the build occurring.

215
00:13:26.000 --> 00:13:27.001
This here shows us

216
00:13:27.001 --> 00:13:31.005
that the process and action was successful.

217
00:13:31.005 --> 00:13:33.000
If there was a failure,

218
00:13:33.000 --> 00:13:35.009
GitHub would send us an email alerting us

219
00:13:35.009 --> 00:13:38.007
that the workflow had failed.

220
00:13:38.007 --> 00:13:41.000
Now, this is about all we're going to show

221
00:13:41.000 --> 00:13:42.003
for the first video,

222
00:13:42.003 --> 00:13:47.000
but here you've created your first GitHub action.

