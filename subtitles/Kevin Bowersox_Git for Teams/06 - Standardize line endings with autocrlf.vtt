WEBVTT
1
00:00:00.050 --> 00:00:02.030
- [Instructor] Storing files using the

2
00:00:02.030 --> 00:00:04.070
appropriate settings for line endings

3
00:00:04.070 --> 00:00:08.020
is one standardization that can benefit teams.

4
00:00:08.020 --> 00:00:10.040
This is important because line endings

5
00:00:10.040 --> 00:00:12.080
vary between operating systems.

6
00:00:12.080 --> 00:00:16.050
Unix and OS X systems only use a line feed

7
00:00:16.050 --> 00:00:18.040
to terminate a line.

8
00:00:18.040 --> 00:00:23.010
Windows systems use both a carriage return and a line feed.

9
00:00:23.010 --> 00:00:25.080
When you mix platforms, such as when you perform your

10
00:00:25.080 --> 00:00:29.010
development on a Windows machine, and then you run your

11
00:00:29.010 --> 00:00:32.060
system on a Unix machine, there can be issues

12
00:00:32.060 --> 00:00:36.010
if line endings are not handled properly.

13
00:00:36.010 --> 00:00:38.030
Git provides a configuration setting

14
00:00:38.030 --> 00:00:44.060
named core.autocrlf that can be used to handle this issue.

15
00:00:44.060 --> 00:00:48.090
Let's take a quick look at it in action.

16
00:00:48.090 --> 00:00:52.080
So within the terminal on an Ubuntu machine,

17
00:00:52.080 --> 00:00:55.080
we're going to look at a file

18
00:00:55.080 --> 00:00:59.070
within a repository named Sample.java.

19
00:00:59.070 --> 00:01:05.010
So I will open the file with vi,

20
00:01:05.010 --> 00:01:08.060
and you'll notice that inside of the file

21
00:01:08.060 --> 00:01:12.020
we see these caret Ms all over the place.

22
00:01:12.020 --> 00:01:15.070
What that represents is the carriage return.

23
00:01:15.070 --> 00:01:18.020
This file was created in Windows,

24
00:01:18.020 --> 00:01:22.020
and then brought over to our Linux system,

25
00:01:22.020 --> 00:01:25.040
and the Linux system doesn't know how to display

26
00:01:25.040 --> 00:01:30.070
the carriage returns so it shows the caret M.

27
00:01:30.070 --> 00:01:34.020
This can cause issues when you are doing things

28
00:01:34.020 --> 00:01:37.060
like compiling code, or, I've seen it a lot

29
00:01:37.060 --> 00:01:41.060
when you are providing configuration files.

30
00:01:41.060 --> 00:01:44.050
An application reading the configuration file

31
00:01:44.050 --> 00:01:48.070
can have problems when it encounters these stray

32
00:01:48.070 --> 00:01:51.010
carriage returns that have been brought over

33
00:01:51.010 --> 00:01:52.080
from a Windows machine.

34
00:01:52.080 --> 00:01:55.040
So now that we took a look at the file,

35
00:01:55.040 --> 00:02:03.020
let's actually navigate out and we'll build our repository.

36
00:02:03.020 --> 00:02:06.050
So I just initialized a new Git repository,

37
00:02:06.050 --> 00:02:10.010
and then inside of the repository,

38
00:02:10.010 --> 00:02:16.030
we're going to set a configuration setting, core.autocrlf,

39
00:02:16.030 --> 00:02:20.060
and we're going to set this to the input value.

40
00:02:20.060 --> 00:02:21.070
We'll talk a little bit more

41
00:02:21.070 --> 00:02:24.020
about what these values mean in a minute.

42
00:02:24.020 --> 00:02:27.040
But I'm going to go ahead, set that property,

43
00:02:27.040 --> 00:02:31.030
and now I'm going to add the file to the stage.

44
00:02:31.030 --> 00:02:33.020
You'll notice we get a warning.

45
00:02:33.020 --> 00:02:35.080
Git's telling us, hey we're gonna take all the carriage

46
00:02:35.080 --> 00:02:40.010
return line feeds and replace them with simply line feeds.

47
00:02:40.010 --> 00:02:42.000
And we're okay with that.

48
00:02:42.000 --> 00:02:46.090
At this point we're then going to commit,

49
00:02:46.090 --> 00:02:50.060
and now what I'm going to do is I'm going to force Git

50
00:02:50.060 --> 00:02:53.070
to re-pull the file from the repository.

51
00:02:53.070 --> 00:02:55.050
So I'll do something like this,

52
00:02:55.050 --> 00:02:59.020
I'll build a new branch in the other branch,

53
00:02:59.020 --> 00:03:04.000
then I'm going to remove the Sample.java file.

54
00:03:04.000 --> 00:03:10.010
We're going to add that change as well as commit it.

55
00:03:10.010 --> 00:03:15.040
And now I'm going to check out the master branch.

56
00:03:15.040 --> 00:03:17.070
Okay, so Git was forced

57
00:03:17.070 --> 00:03:20.030
to pull the file from the repository.

58
00:03:20.030 --> 00:03:23.010
Let's see what it looks like now.

59
00:03:23.010 --> 00:03:27.080
You'll notice that the caret Ms have been removed.

60
00:03:27.080 --> 00:03:31.060
And that's thanks to the autocrlf property

61
00:03:31.060 --> 00:03:34.070
and the input value that we assigned to it.

62
00:03:34.070 --> 00:03:36.050
So now let's talk about

63
00:03:36.050 --> 00:03:39.050
some of the values for that property.

64
00:03:39.050 --> 00:03:41.090
Here are the options you have.

65
00:03:41.090 --> 00:03:47.060
We saw the input value and what that setting does,

66
00:03:47.060 --> 00:03:51.060
is it's going to commit carriage return line feed

67
00:03:51.060 --> 00:03:54.060
to line feed when we commit.

68
00:03:54.060 --> 00:03:57.090
Now if we check out from a repository,

69
00:03:57.090 --> 00:04:00.080
it's not going to do any transformation.

70
00:04:00.080 --> 00:04:02.080
You want to use this setting

71
00:04:02.080 --> 00:04:06.040
when your repository is on a Unix machine

72
00:04:06.040 --> 00:04:10.090
and you're working in a cross platform environment.

73
00:04:10.090 --> 00:04:15.080
Now, the next option we have for the autocrlf setting

74
00:04:15.080 --> 00:04:18.060
is TRUE, what this will do is

75
00:04:18.060 --> 00:04:21.000
it will cause carriage return line feed

76
00:04:21.000 --> 00:04:23.050
to be converted to line feed,

77
00:04:23.050 --> 00:04:28.010
but then when we check out from the repository,

78
00:04:28.010 --> 00:04:29.080
it's going to take line feed

79
00:04:29.080 --> 00:04:33.040
and convert it to carriage return line feed.

80
00:04:33.040 --> 00:04:36.050
So it's going to work well on Windows systems.

81
00:04:36.050 --> 00:04:39.050
So if your repository's sitting on a Windows system,

82
00:04:39.050 --> 00:04:42.020
and you're doing cross platform development,

83
00:04:42.020 --> 00:04:43.090
TRUE is the setting for you.

84
00:04:43.090 --> 00:04:46.090
And then finally, FALSE doesn't do any conversions,

85
00:04:46.090 --> 00:04:49.000
and you'd only use this when you're

86
00:04:49.000 --> 00:04:53.010
working on a single platform across the board.

87
00:04:53.010 --> 00:04:57.030
So, learning how to set the autocrlf setting

88
00:04:57.030 --> 00:04:59.080
can save you some headaches when you're working

89
00:04:59.080 --> 00:05:02.000
in a cross platform environment.

