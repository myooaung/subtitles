WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Instructor] Using a Git ignore file is another best

2
00:00:03.010 --> 00:00:05.040
practice for your team.

3
00:00:05.040 --> 00:00:08.080
It prevents unnecessary files from entering your repository

4
00:00:08.080 --> 00:00:12.050
such as those specific to your IDE that are used for

5
00:00:12.050 --> 00:00:15.020
configuring workspaces.

6
00:00:15.020 --> 00:00:17.040
Let's run a quick demonstration that builds

7
00:00:17.040 --> 00:00:19.090
a Git ignore file.

8
00:00:19.090 --> 00:00:23.010
To perform this demonstration we'll work on an example

9
00:00:23.010 --> 00:00:25.090
Java project that's been built with Eclipse.

10
00:00:25.090 --> 00:00:29.070
You'll find this project in your course materials.

11
00:00:29.070 --> 00:00:34.080
The name of the project is Git-Ignore-Demo.

12
00:00:34.080 --> 00:00:38.070
If we take a look within the project,

13
00:00:38.070 --> 00:00:42.080
you'll see that we have several files and directories

14
00:00:42.080 --> 00:00:47.020
that are specific to the Eclipse workspace.

15
00:00:47.020 --> 00:00:50.040
For example, the class path and the project and

16
00:00:50.040 --> 00:00:56.040
the settings directories and files are all used by Eclipse.

17
00:00:56.040 --> 00:00:59.000
The bin directories just going to contain

18
00:00:59.000 --> 00:01:00.090
our compiled classes.

19
00:01:00.090 --> 00:01:04.040
Those things don't need to go into our repositories.

20
00:01:04.040 --> 00:01:07.060
Let's go ahead and build a Git ignore file to

21
00:01:07.060 --> 00:01:08.090
keep them out.

22
00:01:08.090 --> 00:01:13.060
Most often Git ignore files are placed within the root

23
00:01:13.060 --> 00:01:15.020
of the repository.

24
00:01:15.020 --> 00:01:19.020
So I'm just going to use them to create the file and

25
00:01:19.020 --> 00:01:22.090
then we'll go ahead and add its content.

26
00:01:22.090 --> 00:01:26.050
So the first thing we're going to do is exclude the

27
00:01:26.050 --> 00:01:31.080
.project file found within our project.

28
00:01:31.080 --> 00:01:36.060
So here we're illustrating how you can exclude a file

29
00:01:36.060 --> 00:01:39.040
by using an exact file name.

30
00:01:39.040 --> 00:01:42.060
Within the Git ignore file we're going to add these lines

31
00:01:42.060 --> 00:01:45.080
and each of those lines basically represents a pattern

32
00:01:45.080 --> 00:01:49.090
that tells Git to whether or not to allow a file to be

33
00:01:49.090 --> 00:01:53.030
placed into the repository.

34
00:01:53.030 --> 00:01:57.060
The .project line we just added represents

35
00:01:57.060 --> 00:02:00.000
an exact file name match.

36
00:02:00.000 --> 00:02:03.070
So anywhere within our working directory if there's a

37
00:02:03.070 --> 00:02:08.020
file with the name .project it's not going to be included.

38
00:02:08.020 --> 00:02:13.040
This includes within subdirectories of our working files.

39
00:02:13.040 --> 00:02:17.090
We're going to do the exact same pattern for the class path

40
00:02:17.090 --> 00:02:24.070
file and then we're going to add the settings directory.

41
00:02:24.070 --> 00:02:29.060
So with this pattern, we haven't added a forward slash

42
00:02:29.060 --> 00:02:31.000
at the end of it.

43
00:02:31.000 --> 00:02:35.080
So that means .settings will match both files

44
00:02:35.080 --> 00:02:37.090
and directories.

45
00:02:37.090 --> 00:02:42.040
So both a .settings file and a .settings directory will

46
00:02:42.040 --> 00:02:45.040
be excluded from our repository.

47
00:02:45.040 --> 00:02:49.030
Now if we just want to exclude a directory but allow

48
00:02:49.030 --> 00:02:53.090
files with the same name then we add the forward slash.

49
00:02:53.090 --> 00:02:57.050
Another thing that we can do is add wild carding.

50
00:02:57.050 --> 00:03:01.060
So here we can add and asterisk and say .class.

51
00:03:01.060 --> 00:03:05.020
That's going to excluded any class files from

52
00:03:05.020 --> 00:03:07.040
entering our repository.

53
00:03:07.040 --> 00:03:11.040
So there basically is a globbing pattern that's used

54
00:03:11.040 --> 00:03:16.020
in order to match file names or directories.

55
00:03:16.020 --> 00:03:21.040
You can do things like using two asterisks and that's

56
00:03:21.040 --> 00:03:26.030
going to be able to grab bin in a subdirectory and

57
00:03:26.030 --> 00:03:27.080
exclude that.

58
00:03:27.080 --> 00:03:32.060
So we don't need to do that within this project,

59
00:03:32.060 --> 00:03:34.030
but it's just good to know.

60
00:03:34.030 --> 00:03:37.020
At this point I'm going to write the file,

61
00:03:37.020 --> 00:03:41.050
then we're going to init our Git repository.

62
00:03:41.050 --> 00:03:47.010
And then we'll go ahead and add the files to the

63
00:03:47.010 --> 00:03:52.080
repository and now if we use Git status to inspect the

64
00:03:52.080 --> 00:03:55.010
state of our repository,

65
00:03:55.010 --> 00:03:59.030
you'll see that only the ignore file and our application

66
00:03:59.030 --> 00:04:04.030
source code have been staged for commit into the repository.

67
00:04:04.030 --> 00:04:07.030
And that's thanks to all the work that we did within

68
00:04:07.030 --> 00:04:09.000
the Git ignore file.

69
00:04:09.000 --> 00:04:11.040
As your team sets up its projects,

70
00:04:11.040 --> 00:04:15.050
it's highly recommended that you build a Git ignore file

71
00:04:15.050 --> 00:04:17.070
so that you can keep unwanted files

72
00:04:17.070 --> 00:04:20.000
out of your repositories.

