WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Git's branching model

2
00:00:01.070 --> 00:00:03.080
is one of the most powerful available

3
00:00:03.080 --> 00:00:06.000
amongst version control systems.

4
00:00:06.000 --> 00:00:09.010
Its flexibility allows teams to easily create

5
00:00:09.010 --> 00:00:13.030
various types of branches that establish workflows.

6
00:00:13.030 --> 00:00:16.030
In this lesson, we'll review different types of branches

7
00:00:16.030 --> 00:00:19.060
so that your team can use them when establishing a workflow

8
00:00:19.060 --> 00:00:23.000
for committing into a central repository.

9
00:00:23.000 --> 00:00:25.060
The concept behind branching is pretty simple.

10
00:00:25.060 --> 00:00:28.090
We need to store source code related to some code change

11
00:00:28.090 --> 00:00:32.020
that we'll make in our code base separately

12
00:00:32.020 --> 00:00:34.040
from the existing code base.

13
00:00:34.040 --> 00:00:38.030
Using Git branches, we can quickly fork the code base

14
00:00:38.030 --> 00:00:39.090
to work on a new feature

15
00:00:39.090 --> 00:00:42.040
while maintaining the original source code

16
00:00:42.040 --> 00:00:44.030
in a separate line of code.

17
00:00:44.030 --> 00:00:48.030
So, this allows us to experiment on a new feature

18
00:00:48.030 --> 00:00:50.010
in a separate area.

19
00:00:50.010 --> 00:00:51.080
Depending on our workflow,

20
00:00:51.080 --> 00:00:54.070
we may need to leverage several types of branches.

21
00:00:54.070 --> 00:00:57.010
Let's talk about those now.

22
00:00:57.010 --> 00:01:00.010
First, let's discuss long-running branches.

23
00:01:00.010 --> 00:01:02.090
Long-running branches always remain open,

24
00:01:02.090 --> 00:01:07.010
storing the history of a particular line of development.

25
00:01:07.010 --> 00:01:10.020
Often, a master or trunk branch holds the code

26
00:01:10.020 --> 00:01:13.040
for the current official release of the project.

27
00:01:13.040 --> 00:01:16.070
Another common long-running branch is the develop branch

28
00:01:16.070 --> 00:01:20.060
which allows for integration of changes in progress.

29
00:01:20.060 --> 00:01:23.020
So, if we have a bunch of feature branches

30
00:01:23.020 --> 00:01:25.010
which we're about ready to discuss,

31
00:01:25.010 --> 00:01:26.040
they would be integrated

32
00:01:26.040 --> 00:01:29.000
into our long-running develop branch.

33
00:01:29.000 --> 00:01:31.070
Most workflows typically incorporate

34
00:01:31.070 --> 00:01:34.080
one or both of these branches.

35
00:01:34.080 --> 00:01:36.090
As I mentioned, feature branches,

36
00:01:36.090 --> 00:01:40.050
they're a line of code where source code changes are stored

37
00:01:40.050 --> 00:01:44.010
for a particular system feature under development.

38
00:01:44.010 --> 00:01:47.030
These branches are really short lived and they are closed

39
00:01:47.030 --> 00:01:49.040
once the feature is completed.

40
00:01:49.040 --> 00:01:50.070
Once it's complete,

41
00:01:50.070 --> 00:01:52.090
then it gets merged into that develop branch

42
00:01:52.090 --> 00:01:54.070
as we talked about.

43
00:01:54.070 --> 00:01:58.020
Hotfix branches are created to address a specific issue

44
00:01:58.020 --> 00:02:00.090
occurring in the current production environment.

45
00:02:00.090 --> 00:02:02.080
So, we have this problem

46
00:02:02.080 --> 00:02:05.050
that we need to get fixed right away, so what do we do?

47
00:02:05.050 --> 00:02:09.050
Well, we branch off the master to address the issue

48
00:02:09.050 --> 00:02:12.060
and then we merge it right back into master.

49
00:02:12.060 --> 00:02:15.080
Hotfixes are then required to be merged

50
00:02:15.080 --> 00:02:17.070
into any of our development branches

51
00:02:17.070 --> 00:02:21.020
so that they contain a copy of the fix.

52
00:02:21.020 --> 00:02:24.030
So, these hotfix branches are only for emergencies

53
00:02:24.030 --> 00:02:26.040
and they're really short lived.

54
00:02:26.040 --> 00:02:28.050
It's important that your team understands

55
00:02:28.050 --> 00:02:29.080
these types of branches

56
00:02:29.080 --> 00:02:31.060
because we're going to be leveraging them

57
00:02:31.060 --> 00:02:33.050
as we build out these workflows

58
00:02:33.050 --> 00:02:37.000
for committing changes into our central repository.

