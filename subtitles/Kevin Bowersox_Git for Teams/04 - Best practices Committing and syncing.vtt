WEBVTT
1
00:00:00.040 --> 00:00:02.020
- Following a few best practices

2
00:00:02.020 --> 00:00:06.030
when starting to use Git can set your team up for success.

3
00:00:06.030 --> 00:00:08.040
Let's take a look at a best practice

4
00:00:08.040 --> 00:00:11.090
that will make life easier for your team.

5
00:00:11.090 --> 00:00:14.060
The golden rule of Git and any version control system

6
00:00:14.060 --> 00:00:18.010
you might use is to commit your source code frequently.

7
00:00:18.010 --> 00:00:19.090
When making these frequent commits,

8
00:00:19.090 --> 00:00:22.000
you should keep them small in scope

9
00:00:22.000 --> 00:00:25.000
and focus on a single feature per commit.

10
00:00:25.000 --> 00:00:28.080
Small and frequent commits are very beneficial.

11
00:00:28.080 --> 00:00:31.020
First, you're less likely to lose code

12
00:00:31.020 --> 00:00:34.070
because it's safely stored within source control.

13
00:00:34.070 --> 00:00:36.070
Second, it gives you the opportunity

14
00:00:36.070 --> 00:00:40.030
to push those changes to your teammates more frequently.

15
00:00:40.030 --> 00:00:43.010
Small-scoped commits are so much easier

16
00:00:43.010 --> 00:00:44.090
to share with your team members

17
00:00:44.090 --> 00:00:48.060
than these large, sweeping changes to a system.

18
00:00:48.060 --> 00:00:51.010
By frequently pushing small commits,

19
00:00:51.010 --> 00:00:54.040
you're going to improve the visibility of your changes,

20
00:00:54.040 --> 00:00:57.020
you're going to reduce the potential for merge conflicts,

21
00:00:57.020 --> 00:01:01.030
and it's going to make integrating much easier.

22
00:01:01.030 --> 00:01:03.000
At the same time, it's important

23
00:01:03.000 --> 00:01:05.030
that you stay up to date with the changes

24
00:01:05.030 --> 00:01:07.030
that your team members are making,

25
00:01:07.030 --> 00:01:09.060
so you need to sync frequently

26
00:01:09.060 --> 00:01:13.090
with shared repositories using pulls or fetches.

27
00:01:13.090 --> 00:01:17.040
Syncing often reduces the chances of a merge conflict.

28
00:01:17.040 --> 00:01:19.010
Nobody wants to deal with those.

29
00:01:19.010 --> 00:01:21.030
It also keeps you informed of the changes

30
00:01:21.030 --> 00:01:23.020
that your team members are making

31
00:01:23.020 --> 00:01:25.010
because they could be potentially

32
00:01:25.010 --> 00:01:28.010
impacting the code you're working on.

33
00:01:28.010 --> 00:01:30.020
Let's revisit one of the scenarios

34
00:01:30.020 --> 00:01:32.010
we walked through earlier to see

35
00:01:32.010 --> 00:01:35.080
how it could have easily been avoided by syncing.

36
00:01:35.080 --> 00:01:37.030
Okay, so we're back to our two

37
00:01:37.030 --> 00:01:40.030
team members, User1 and User2.

38
00:01:40.030 --> 00:01:45.000
User1 is going to make changes to the demo file.

39
00:01:45.000 --> 00:01:48.040
So, they open the file with Vim

40
00:01:48.040 --> 00:01:52.040
and then they add their changes.

41
00:01:52.040 --> 00:01:55.010
At this point, they're happy with the changes,

42
00:01:55.010 --> 00:02:01.010
they write the file, and then they make the commit,

43
00:02:01.010 --> 00:02:03.080
adding the changes to the stage,

44
00:02:03.080 --> 00:02:06.090
and providing their commit message.

45
00:02:06.090 --> 00:02:09.070
At this point, they're then going to push

46
00:02:09.070 --> 00:02:14.000
these changes to the central repository shared by the team.

47
00:02:14.000 --> 00:02:15.080
Now, if you remember the scenario,

48
00:02:15.080 --> 00:02:20.070
User2 also wants to make changes to the demo file.

49
00:02:20.070 --> 00:02:23.060
This time, instead of just making their changes,

50
00:02:23.060 --> 00:02:26.010
they're going to come in at the beginning of the day

51
00:02:26.010 --> 00:02:30.030
and they're going to perform a pull.

52
00:02:30.030 --> 00:02:32.070
This is going to give them the changes

53
00:02:32.070 --> 00:02:38.060
that User1 just made, so they're now free to make changes

54
00:02:38.060 --> 00:02:42.010
to the demo file without fear of a merge conflict.

55
00:02:42.010 --> 00:02:44.010
So, let's go in.

56
00:02:44.010 --> 00:02:49.060
We can add User2's changes, write the file,

57
00:02:49.060 --> 00:02:54.090
and then we'll commit those changes,

58
00:02:54.090 --> 00:02:59.040
and then User2 can push them without

59
00:02:59.040 --> 00:03:02.090
any problems, such as a merge conflict.

60
00:03:02.090 --> 00:03:04.010
So, let's review.

61
00:03:04.010 --> 00:03:06.080
By committing frequently and pulling often,

62
00:03:06.080 --> 00:03:09.020
you will stay current on the latest changes

63
00:03:09.020 --> 00:03:13.000
of your repository and those changes made by your team.

64
00:03:13.000 --> 00:03:16.020
I recommend doing several commits a day

65
00:03:16.020 --> 00:03:18.090
and syncing several times a day.

66
00:03:18.090 --> 00:03:21.060
At least do it once a day, and this is going

67
00:03:21.060 --> 00:03:23.080
to help you and your team avoid

68
00:03:23.080 --> 00:03:25.030
a lot of challenges like merge

69
00:03:25.030 --> 00:03:29.000
conflicts and large integrations.

