WEBVTT
1
00:00:00.050 --> 00:00:01.040
- [Instructor] In this lesson,

2
00:00:01.040 --> 00:00:05.010
we'll discuss the trunk-based development workflow.

3
00:00:05.010 --> 00:00:08.010
Trunk-based development is a rather new workflow.

4
00:00:08.010 --> 00:00:10.040
Teams practicing trunk-based development

5
00:00:10.040 --> 00:00:14.030
only collaborate on a single branch named trunk.

6
00:00:14.030 --> 00:00:18.000
Under this strategy, trunk is the only long-lived branch

7
00:00:18.000 --> 00:00:21.090
used by the team for pulling, syncing, or merging.

8
00:00:21.090 --> 00:00:24.060
Some teams practicing trunk-based development

9
00:00:24.060 --> 00:00:27.000
will allow branching from trunk

10
00:00:27.000 --> 00:00:30.020
for release branches or other short-lived branches

11
00:00:30.020 --> 00:00:32.010
used for code reviews.

12
00:00:32.010 --> 00:00:34.040
In general, branching from trunk,

13
00:00:34.040 --> 00:00:37.060
such as when using a feature branch, is not acceptable.

14
00:00:37.060 --> 00:00:41.050
With few exceptions, developers commit directly to trunk.

15
00:00:41.050 --> 00:00:43.060
You might wonder why a team would give up

16
00:00:43.060 --> 00:00:47.010
the flexibility of working in multiple branches.

17
00:00:47.010 --> 00:00:51.030
The selling point behind Trunk-Based Development or TBD

18
00:00:51.030 --> 00:00:54.070
is that it reduces the problems that frequently occur

19
00:00:54.070 --> 00:00:57.000
when merging long-lived branches

20
00:00:57.000 --> 00:00:59.060
such as breaking the build, duplicate work,

21
00:00:59.060 --> 00:01:01.080
and incompatible changes.

22
00:01:01.080 --> 00:01:06.000
By focusing all development work on the lone trunk branch,

23
00:01:06.000 --> 00:01:08.060
the distance between developers is reduced

24
00:01:08.060 --> 00:01:11.080
and changes can be more rapidly released.

25
00:01:11.080 --> 00:01:15.050
At first, trunk-based development may seem unmanageable

26
00:01:15.050 --> 00:01:18.010
or not possible for large teams.

27
00:01:18.010 --> 00:01:21.030
However, large organizations such as Google, Facebook,

28
00:01:21.030 --> 00:01:24.020
and Amazon have made TBD possible

29
00:01:24.020 --> 00:01:26.050
with massive development teams.

30
00:01:26.050 --> 00:01:28.050
Let's talk about some of the strategies

31
00:01:28.050 --> 00:01:32.040
that make trunk-based development successful.

32
00:01:32.040 --> 00:01:36.050
Teams practicing TBD must adopt some common practices

33
00:01:36.050 --> 00:01:38.030
in order to make it work.

34
00:01:38.030 --> 00:01:42.030
First, commits must be kept small and performed frequently.

35
00:01:42.030 --> 00:01:43.070
This shouldn't be a surprise

36
00:01:43.070 --> 00:01:46.050
because it's an all-around good practice

37
00:01:46.050 --> 00:01:48.080
for any development team.

38
00:01:48.080 --> 00:01:51.070
However, for trunk-based development, it's crucial

39
00:01:51.070 --> 00:01:54.060
because the longer your changes sit outside a trunk,

40
00:01:54.060 --> 00:01:59.010
there's a higher potential for nasty merge conflicts.

41
00:01:59.010 --> 00:02:01.080
A good strategy for sticking to small commits

42
00:02:01.080 --> 00:02:04.000
is to keep the tasks small.

43
00:02:04.000 --> 00:02:06.070
TBD teams put a large amount of work

44
00:02:06.070 --> 00:02:10.070
into breaking down their tasks into small manageable pieces

45
00:02:10.070 --> 00:02:12.090
because it avoids the need to create

46
00:02:12.090 --> 00:02:14.070
long-lived feature branches

47
00:02:14.070 --> 00:02:17.090
that violate the core principle of TBD.

48
00:02:17.090 --> 00:02:21.060
Automation of quality assurance is also essential

49
00:02:21.060 --> 00:02:26.020
via a CI/CD pipeline when using TBD.

50
00:02:26.020 --> 00:02:28.080
Developers need to know when tests fail

51
00:02:28.080 --> 00:02:31.050
or the build is broken immediately.

52
00:02:31.050 --> 00:02:35.000
In fact, it's best practice to have your CI platform

53
00:02:35.000 --> 00:02:37.080
integrated with your source code repository

54
00:02:37.080 --> 00:02:41.090
so that it performs an auto rollback when builds fail.

55
00:02:41.090 --> 00:02:45.040
If feedback from your CI platform is not up to par,

56
00:02:45.040 --> 00:02:48.060
it increases the chances of breaking the code in trunk

57
00:02:48.060 --> 00:02:52.010
which must be avoided when practicing TBD.

58
00:02:52.010 --> 00:02:55.070
Trunk-based development strives to keep trunk release ready

59
00:02:55.070 --> 00:02:58.040
or extremely close to release ready

60
00:02:58.040 --> 00:03:02.010
so that changes can quickly be released if necessary.

61
00:03:02.010 --> 00:03:03.090
Any time the build is broke,

62
00:03:03.090 --> 00:03:07.050
teams drop everything to fix it.

63
00:03:07.050 --> 00:03:10.030
So, that's trunk-based development in a nutshell.

64
00:03:10.030 --> 00:03:13.000
In the next lesson, we're gonna talk about Git Flow.

