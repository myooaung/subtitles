WEBVTT
1
00:00:00.040 --> 00:00:01.090
- [Instructor] One of the greatest benefits

2
00:00:01.090 --> 00:00:04.010
of using Git is that it integrates

3
00:00:04.010 --> 00:00:07.010
with many different software development tools.

4
00:00:07.010 --> 00:00:09.020
Today, one of the most important tools

5
00:00:09.020 --> 00:00:11.030
for software development teams use

6
00:00:11.030 --> 00:00:13.000
is their continuous integration

7
00:00:13.000 --> 00:00:16.060
and continuous delivery tool, or CI/CD.

8
00:00:16.060 --> 00:00:19.040
Let's take a few minutes to discuss CI/CD

9
00:00:19.040 --> 00:00:22.050
and its relationship with Git.

10
00:00:22.050 --> 00:00:25.020
Developers working on a software development team

11
00:00:25.020 --> 00:00:27.080
will normally work on code independently

12
00:00:27.080 --> 00:00:29.070
using their local machine.

13
00:00:29.070 --> 00:00:32.030
At some point, that code must be integrated

14
00:00:32.030 --> 00:00:36.050
into a shared code repository with everyone else's changes.

15
00:00:36.050 --> 00:00:38.010
This is often a point of failure

16
00:00:38.010 --> 00:00:40.000
and a pain point for development teams

17
00:00:40.000 --> 00:00:43.050
because conflicts wind up being committed

18
00:00:43.050 --> 00:00:45.040
into the repository.

19
00:00:45.040 --> 00:00:48.060
Continuous integration can alleviate these headaches caused

20
00:00:48.060 --> 00:00:51.000
by Big Bang integrations.

21
00:00:51.000 --> 00:00:53.070
When integrations occur at the end of a project,

22
00:00:53.070 --> 00:00:54.090
it's very painful.

23
00:00:54.090 --> 00:00:58.000
Developers try to merge large blocks of code,

24
00:00:58.000 --> 00:01:00.030
often to meet a deadline.

25
00:01:00.030 --> 00:01:04.070
Continuous integration mandates that we commit our changes

26
00:01:04.070 --> 00:01:07.020
and integrate our code frequently.

27
00:01:07.020 --> 00:01:09.090
With every commit, we build the software

28
00:01:09.090 --> 00:01:12.090
via an automated process that's designed

29
00:01:12.090 --> 00:01:15.010
to ensure its integrity.

30
00:01:15.010 --> 00:01:18.010
This alleviates the issues that teams experience.

31
00:01:18.010 --> 00:01:20.060
By keeping integration small in scope

32
00:01:20.060 --> 00:01:24.020
and identifying issues early in the development process,

33
00:01:24.020 --> 00:01:26.050
we avoid the Big Bang merge.

34
00:01:26.050 --> 00:01:29.040
Integration issues are resolved early

35
00:01:29.040 --> 00:01:32.040
and do not snowball into these unmanageable tasks

36
00:01:32.040 --> 00:01:35.000
completed at the 11th hour.

37
00:01:35.000 --> 00:01:37.040
Your source control system is essential

38
00:01:37.040 --> 00:01:38.090
to a continuous integration.

39
00:01:38.090 --> 00:01:43.000
The CI tool will likely be set up to scan the repository

40
00:01:43.000 --> 00:01:46.020
for any changes, Git's a great choice

41
00:01:46.020 --> 00:01:51.020
because almost every CI tool provides first-class support.

42
00:01:51.020 --> 00:01:54.010
Another key tenet of CI is that code

43
00:01:54.010 --> 00:01:56.080
within the repository is kept in working conditions

44
00:01:56.080 --> 00:01:58.040
at all times.

45
00:01:58.040 --> 00:02:01.070
When builds break, it's a stop-the-world event for a team

46
00:02:01.070 --> 00:02:04.010
and they have to fix it immediately.

47
00:02:04.010 --> 00:02:08.010
Automating builds provides us with a way

48
00:02:08.010 --> 00:02:12.030
to perform integrity checks, or quality assurance,

49
00:02:12.030 --> 00:02:16.020
against our code via a CI pipeline.

50
00:02:16.020 --> 00:02:19.040
This alleviates work on development teams

51
00:02:19.040 --> 00:02:23.020
and reduces errors they may encounter.

52
00:02:23.020 --> 00:02:26.090
This visual depicts continuous integration in action.

53
00:02:26.090 --> 00:02:30.000
Developers push changes to the version control system,

54
00:02:30.000 --> 00:02:31.090
which in our case is Git.

55
00:02:31.090 --> 00:02:34.050
The CI tool monitors the repository,

56
00:02:34.050 --> 00:02:36.070
and once the changes are detected,

57
00:02:36.070 --> 00:02:38.080
it compiles the code on a build server

58
00:02:38.080 --> 00:02:41.080
and conducts automated testing of the code.

59
00:02:41.080 --> 00:02:44.070
If the test failed, the development team is notified

60
00:02:44.070 --> 00:02:48.040
so they can resolve any issues with the code

61
00:02:48.040 --> 00:02:51.000
or role back a possible commit.

62
00:02:51.000 --> 00:02:53.070
Teams can extend their continuous integration efforts

63
00:02:53.070 --> 00:02:56.010
to include continuous delivery.

64
00:02:56.010 --> 00:02:58.050
Continuous delivery simply automates

65
00:02:58.050 --> 00:03:00.070
the deployment process for development

66
00:03:00.070 --> 00:03:02.050
and test environments.

67
00:03:02.050 --> 00:03:05.060
Passing builds are automatically deployed

68
00:03:05.060 --> 00:03:09.030
once quality assurance is completed

69
00:03:09.030 --> 00:03:13.050
so that the code can be reviewed by acceptance testers.

70
00:03:13.050 --> 00:03:15.090
Let's take a moment to discuss why teams

71
00:03:15.090 --> 00:03:18.030
embrace CI/CD practices.

72
00:03:18.030 --> 00:03:20.000
The benefits are pretty obvious.

73
00:03:20.000 --> 00:03:22.090
The sheer amount of automation in CI/CD

74
00:03:22.090 --> 00:03:25.020
improves your team's productivity.

75
00:03:25.020 --> 00:03:28.060
Repeatable tasks focused on building, testing,

76
00:03:28.060 --> 00:03:32.090
and releasing software are now achieved through automation.

77
00:03:32.090 --> 00:03:35.090
This frees your team members from the manual tasks

78
00:03:35.090 --> 00:03:38.000
they were once required to complete

79
00:03:38.000 --> 00:03:41.060
to push software to production through its pipeline.

80
00:03:41.060 --> 00:03:43.060
Productivity is also increased

81
00:03:43.060 --> 00:03:47.020
because we avoid problem-filled massive integrations

82
00:03:47.020 --> 00:03:48.070
late in the game.

83
00:03:48.070 --> 00:03:52.010
With the CI/CD pipeline, automated quality assurance

84
00:03:52.010 --> 00:03:55.040
measures are introduced that maintain the quality

85
00:03:55.040 --> 00:03:56.080
of your product.

86
00:03:56.080 --> 00:04:00.010
Under the CI/CD paradigm, we can be confident

87
00:04:00.010 --> 00:04:03.020
that each change has been subjected

88
00:04:03.020 --> 00:04:05.040
to our quality assurance checks

89
00:04:05.040 --> 00:04:07.080
that are built into our pipeline.

90
00:04:07.080 --> 00:04:10.080
Automation of quality assurance activities increases

91
00:04:10.080 --> 00:04:12.090
the integrity of the source code,

92
00:04:12.090 --> 00:04:14.090
and ultimately, the product.

93
00:04:14.090 --> 00:04:17.000
Issues are flushed out early

94
00:04:17.000 --> 00:04:22.020
and addressed before they pose a large risk

95
00:04:22.020 --> 00:04:24.040
to the new software.

96
00:04:24.040 --> 00:04:27.060
These benefits ultimately create a more Agile

97
00:04:27.060 --> 00:04:29.090
software development team that is able

98
00:04:29.090 --> 00:04:32.020
to better deliver changes.

99
00:04:32.020 --> 00:04:36.010
Finally, let's take a few minutes to review several CI tools

100
00:04:36.010 --> 00:04:38.030
that you have available to you.

101
00:04:38.030 --> 00:04:41.090
Specifically, we'll be taking a look at Jenkins, GitLab,

102
00:04:41.090 --> 00:04:45.030
and Team Foundation Server, or TFS.

103
00:04:45.030 --> 00:04:47.000
First let's cover Jenkins.

104
00:04:47.000 --> 00:04:50.000
Jenkins is a CI server written in Java.

105
00:04:50.000 --> 00:04:52.030
Traditionally, Jenkins was self-hosted,

106
00:04:52.030 --> 00:04:56.060
however, CloudBees now provides a cloud-hosted option.

107
00:04:56.060 --> 00:04:59.090
Jenkins is very popular and is the open-source leader

108
00:04:59.090 --> 00:05:01.040
in the CI space.

109
00:05:01.040 --> 00:05:04.010
There's a vast community of developers that use

110
00:05:04.010 --> 00:05:06.090
and support the product, including a large set

111
00:05:06.090 --> 00:05:08.090
of plugins available to you.

112
00:05:08.090 --> 00:05:11.010
The plugin library provides integration

113
00:05:11.010 --> 00:05:13.040
with common third-party tools.

114
00:05:13.040 --> 00:05:16.070
Now let's talk about GitLab's CI offering.

115
00:05:16.070 --> 00:05:20.080
In addition to GitLab's primary repository management role,

116
00:05:20.080 --> 00:05:23.030
the platform has a CI feature

117
00:05:23.030 --> 00:05:26.080
that relies on a tool called GitLab Runners.

118
00:05:26.080 --> 00:05:29.070
Runners integrate with both self-hosted

119
00:05:29.070 --> 00:05:33.050
and cloud-hosted GitLab repository managers.

120
00:05:33.050 --> 00:05:35.040
Multiple Runners can be established

121
00:05:35.040 --> 00:05:39.050
to distribute the workload of performing tests and builds.

122
00:05:39.050 --> 00:05:43.060
Finally, let's cover Microsoft's Team Foundation Server.

123
00:05:43.060 --> 00:05:46.040
TFS is an incredibly popular collaborative

124
00:05:46.040 --> 00:05:49.020
software development tool that integrates tightly

125
00:05:49.020 --> 00:05:50.080
with Visual Studio.

126
00:05:50.080 --> 00:05:53.020
It is the premiere choice for developers

127
00:05:53.020 --> 00:05:55.030
using the Microsoft stack.

128
00:05:55.030 --> 00:05:58.070
Team Foundation Server is commonly used by Agile teams

129
00:05:58.070 --> 00:06:01.090
for its workload management and testing features.

130
00:06:01.090 --> 00:06:05.050
Within the TFS platform, the CI tool provides all

131
00:06:05.050 --> 00:06:07.090
the capabilities of traditional CI servers,

132
00:06:07.090 --> 00:06:10.090
such as automated builds, tests, and deployments,

133
00:06:10.090 --> 00:06:14.000
however, TFS tightly integrates these products,

134
00:06:14.000 --> 00:06:16.090
providing traceability of the team's work.

135
00:06:16.090 --> 00:06:19.070
Moving forward, we are going to stick with GitLab

136
00:06:19.070 --> 00:06:24.000
and explore the platform's continuous integration features

137
00:06:24.000 --> 00:06:27.000
using GitLab's CI Runner.

