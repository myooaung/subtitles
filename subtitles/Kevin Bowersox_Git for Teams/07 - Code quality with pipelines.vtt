WEBVTT
1
00:00:00.050 --> 00:00:02.090
- [Narrator] Static code analyzers are a great way

2
00:00:02.090 --> 00:00:05.080
to identify quality issues within our code.

3
00:00:05.080 --> 00:00:07.070
So in this lesson, we're going to integrate

4
00:00:07.070 --> 00:00:13.000
the FindBugs Maven plugin into our pipeline as a job.

5
00:00:13.000 --> 00:00:14.080
If you're not familiar with FindBugs,

6
00:00:14.080 --> 00:00:17.080
it's a code analyzer for Java that will identify

7
00:00:17.080 --> 00:00:20.070
quality issues within your code.

8
00:00:20.070 --> 00:00:25.050
Let's take a quick look at our pom.xml file.

9
00:00:25.050 --> 00:00:28.010
Here you'll see that I have included

10
00:00:28.010 --> 00:00:31.070
the FindBugs Maven plugin,

11
00:00:31.070 --> 00:00:35.090
so that will be part of our Maven build,

12
00:00:35.090 --> 00:00:39.000
and we can reference that plugin and run its goals

13
00:00:39.000 --> 00:00:43.010
as part of our pipeline in GitLab CI.

14
00:00:43.010 --> 00:00:46.040
So let's go ahead and put that in place

15
00:00:46.040 --> 00:00:52.010
by modifying our gitlab-ci.yml file.

16
00:00:52.010 --> 00:00:56.030
Within this file, we're going to go ahead and

17
00:00:56.030 --> 00:01:00.050
add another job that we'll call quality.

18
00:01:00.050 --> 00:01:04.060
Within that job we're going to add a script

19
00:01:04.060 --> 00:01:10.000
and that script will use Maven to kick off

20
00:01:10.000 --> 00:01:15.000
the FindBugs Plugins check goal.

21
00:01:15.000 --> 00:01:18.010
This is basically going to go check our code

22
00:01:18.010 --> 00:01:20.000
to see if there's any code defects,

23
00:01:20.000 --> 00:01:23.020
based upon the roles in FindBugs.

24
00:01:23.020 --> 00:01:26.050
The next thing we're going to do is establish a

25
00:01:26.050 --> 00:01:32.010
quality report so when the FindBugs plugin

26
00:01:32.010 --> 00:01:36.030
runs its analysis of our code, it's going to build

27
00:01:36.030 --> 00:01:40.020
an artifact that we can then leverage.

28
00:01:40.020 --> 00:01:44.070
So what we'll do is add a script

29
00:01:44.070 --> 00:01:50.050
and this script will use the Maven site goal

30
00:01:50.050 --> 00:01:54.070
and that's going to build an artifact

31
00:01:54.070 --> 00:01:59.000
that we can make available within GitLab.

32
00:01:59.000 --> 00:02:04.040
So we just need to provide the path to that artifact

33
00:02:04.040 --> 00:02:08.080
and in this case, I'm just going to include

34
00:02:08.080 --> 00:02:12.070
the entire site directory, and that's where we're

35
00:02:12.070 --> 00:02:17.060
going to find the FindBugs report on our code.

36
00:02:17.060 --> 00:02:21.090
So let's go ahead and write this file.

37
00:02:21.090 --> 00:02:25.090
At this point we can perform a commit

38
00:02:25.090 --> 00:02:29.010
we'll say adding FindBugs

39
00:02:29.010 --> 00:02:35.070
and now we can push that commit up to the central repository

40
00:02:35.070 --> 00:02:37.090
provide our credentials, there it goes,

41
00:02:37.090 --> 00:02:41.070
now let's get over to GitLab CI

42
00:02:41.070 --> 00:02:43.080
and we can check out our pipeline,

43
00:02:43.080 --> 00:02:46.060
there we see it just entered.

44
00:02:46.060 --> 00:02:48.040
Dive into that pipeline,

45
00:02:48.040 --> 00:02:51.020
and watch our different jobs run.

46
00:02:51.020 --> 00:02:54.000
We can see the build ran, the test ran,

47
00:02:54.000 --> 00:02:57.040
now the quality job is running

48
00:02:57.040 --> 00:03:00.080
and in a minute we'll have the quality report.

49
00:03:00.080 --> 00:03:02.090
Okay, so the jobs have finished,

50
00:03:02.090 --> 00:03:06.050
but it looks like we have a quality problem.

51
00:03:06.050 --> 00:03:11.070
Let's dive into the quality job to see what happened.

52
00:03:11.070 --> 00:03:16.040
There we can see that FindBugs actually failed our build

53
00:03:16.040 --> 00:03:18.080
because it found a bug.

54
00:03:18.080 --> 00:03:22.000
We can navigate into the quality report

55
00:03:22.000 --> 00:03:24.000
to see what the problem was.

56
00:03:24.000 --> 00:03:27.010
So let's download the artifact,

57
00:03:27.010 --> 00:03:29.040
and we can open it,

58
00:03:29.040 --> 00:03:32.070
and if we take a look within the target directory,

59
00:03:32.070 --> 00:03:37.010
in the site, you'll see the FindBugs.html file

60
00:03:37.010 --> 00:03:39.090
and that is our report.

61
00:03:39.090 --> 00:03:42.080
So if we take a look, now we don't have the styling,

62
00:03:42.080 --> 00:03:47.030
but you can notice that in our code we had

63
00:03:47.030 --> 00:03:49.030
a Dead store to result2,

64
00:03:49.030 --> 00:03:51.040
so that's one of our variables.

65
00:03:51.040 --> 00:03:54.040
At this point, it would be up to our team members

66
00:03:54.040 --> 00:03:59.020
to resolve this quality issue detected by FindBugs.

67
00:03:59.020 --> 00:04:01.000
We're not going to go into that,

68
00:04:01.000 --> 00:04:05.030
because we just wanted to run our static code analysis,

69
00:04:05.030 --> 00:04:09.040
but you can see how with GitLab's pipelines,

70
00:04:09.040 --> 00:04:11.090
and continuous integration features,

71
00:04:11.090 --> 00:04:14.090
we can automate these quality assurance checks

72
00:04:14.090 --> 00:04:17.050
that will be ran consistently.

73
00:04:17.050 --> 00:04:21.060
It's going to ensure the integrity of the product

74
00:04:21.060 --> 00:04:24.040
we're putting out there, and it's automated,

75
00:04:24.040 --> 00:04:29.000
so it happens every time without us lifting a finger.

