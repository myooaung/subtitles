WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] In this lesson, we're going to talk about

2
00:00:02.050 --> 00:00:06.070
one of the pitfalls that new users of Git commonly

3
00:00:06.070 --> 00:00:09.070
experience when they first start collaborating

4
00:00:09.070 --> 00:00:13.030
via a central repository with their team.

5
00:00:13.030 --> 00:00:16.030
So in this scenario, we have two team members,

6
00:00:16.030 --> 00:00:19.010
user one and user two.

7
00:00:19.010 --> 00:00:21.070
They're both working on a very simple repository

8
00:00:21.070 --> 00:00:24.040
that contains a demo file.

9
00:00:24.040 --> 00:00:27.000
If we take a look at the demo file, it's pretty simple.

10
00:00:27.000 --> 00:00:29.040
It just has some content in it.

11
00:00:29.040 --> 00:00:31.090
And let's imagine that user one wants

12
00:00:31.090 --> 00:00:34.000
to make a change to the demo file,

13
00:00:34.000 --> 00:00:36.090
so they open the file with vim

14
00:00:36.090 --> 00:00:42.050
and then they're going to go ahead and add their changes.

15
00:00:42.050 --> 00:00:44.080
Once they're satisfied with their changes,

16
00:00:44.080 --> 00:00:47.010
they can write the file,

17
00:00:47.010 --> 00:00:51.000
then they're going to add those changes to the stage

18
00:00:51.000 --> 00:00:55.060
and then perform the commit.

19
00:00:55.060 --> 00:00:58.020
At this point, they're going to then push

20
00:00:58.020 --> 00:01:02.000
those changes to the central repository

21
00:01:02.000 --> 00:01:05.040
and they're now available for all of the team

22
00:01:05.040 --> 00:01:10.030
to pull into their own local repositories.

23
00:01:10.030 --> 00:01:13.000
Now let's talk about user two.

24
00:01:13.000 --> 00:01:17.080
User two would also like to modify the demo file,

25
00:01:17.080 --> 00:01:20.070
so they open the file with vim,

26
00:01:20.070 --> 00:01:26.000
and now they're going to add their changes.

27
00:01:26.000 --> 00:01:30.020
So their changes are in place, they write the file,

28
00:01:30.020 --> 00:01:33.030
and then at this point they decide they want

29
00:01:33.030 --> 00:01:36.080
to sync with the central repository.

30
00:01:36.080 --> 00:01:42.030
So, they're going to pull the master directory

31
00:01:42.030 --> 00:01:45.040
from the central repository.

32
00:01:45.040 --> 00:01:49.020
You'll notice that Git warns them that they

33
00:01:49.020 --> 00:01:52.050
have untracked changes that would be overwritten

34
00:01:52.050 --> 00:01:55.070
if they were to perform the pull.

35
00:01:55.070 --> 00:02:01.030
This is a common scenario that new users of Git experience.

36
00:02:01.030 --> 00:02:04.030
They start working with a central repository

37
00:02:04.030 --> 00:02:06.090
and they think they can pull at any old time.

38
00:02:06.090 --> 00:02:11.030
Well, you need to either have a clean working directory,

39
00:02:11.030 --> 00:02:14.040
which means at this point we would either need

40
00:02:14.040 --> 00:02:19.020
to perform a Git reset using the hard flag,

41
00:02:19.020 --> 00:02:24.010
or we need to commit our changes and then perform the pull.

42
00:02:24.010 --> 00:02:31.080
So, let's do the commit so we will issue the commit command.

43
00:02:31.080 --> 00:02:36.050
I'm going to use the AM flag here to both add to the stage

44
00:02:36.050 --> 00:02:40.000
and then perform the commit with a message.

45
00:02:40.000 --> 00:02:44.020
So we'll say user two changes, and at this point,

46
00:02:44.020 --> 00:02:49.040
we've done our commit and now let's go ahead

47
00:02:49.040 --> 00:02:54.030
and do the pull from the central repository.

48
00:02:54.030 --> 00:02:57.010
You'll notice that Git is now warning us

49
00:02:57.010 --> 00:02:59.020
about a merge conflict.

50
00:02:59.020 --> 00:03:02.060
And this is a result of not having pulled down

51
00:03:02.060 --> 00:03:07.010
the local changes and two users modifying the same file.

52
00:03:07.010 --> 00:03:10.070
So this is another pitfall that you may have to deal with

53
00:03:10.070 --> 00:03:14.050
when working in a team and that's merge conflicts.

54
00:03:14.050 --> 00:03:19.080
So let's go ahead and work to resolve our merge conflict.

55
00:03:19.080 --> 00:03:24.040
We're going to open the demo file and you'll notice

56
00:03:24.040 --> 00:03:28.020
that Git has put some metadata in the file to help us

57
00:03:28.020 --> 00:03:32.080
so that we can determine how to resolve this conflict.

58
00:03:32.080 --> 00:03:36.020
In this case, I'm going to remove some of this metadata

59
00:03:36.020 --> 00:03:40.050
and then we're going to add our modifications

60
00:03:40.050 --> 00:03:42.080
to resolve this merge conflict.

61
00:03:42.080 --> 00:03:47.080
So let's just say that user one and user two

62
00:03:47.080 --> 00:03:51.090
have modified the file and then we'll take out

63
00:03:51.090 --> 00:03:54.070
that additional line and at this point

64
00:03:54.070 --> 00:04:00.020
I'm gonna write the file and we can now do the commit.

65
00:04:00.020 --> 00:04:05.050
We'll say we resolved the merge conflict

66
00:04:05.050 --> 00:04:10.080
and then we can push these changes back up to master.

67
00:04:10.080 --> 00:04:12.050
Now everything's in sync.

68
00:04:12.050 --> 00:04:16.010
So we resolved two common pitfalls there.

69
00:04:16.010 --> 00:04:19.020
First, we looked at untracked changes in

70
00:04:19.020 --> 00:04:22.010
your working directory and how they affect a pull,

71
00:04:22.010 --> 00:04:24.040
and then we looked at merge conflicts

72
00:04:24.040 --> 00:04:27.000
and saw how to resolve them.

