WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] In this lesson, we'll talk about

2
00:00:02.000 --> 00:00:04.030
the importance of writing a great commit message,

3
00:00:04.030 --> 00:00:06.040
and how they benefit your team.

4
00:00:06.040 --> 00:00:08.080
Well-crafted commit messages are the best way

5
00:00:08.080 --> 00:00:11.030
to communicate why the commit was necessary,

6
00:00:11.030 --> 00:00:14.010
giving some context to the code changes.

7
00:00:14.010 --> 00:00:16.050
Commit messages are also very handy when

8
00:00:16.050 --> 00:00:19.080
looking over recent changes to the code base.

9
00:00:19.080 --> 00:00:22.020
Commit messages can give you a quick idea

10
00:00:22.020 --> 00:00:24.080
of what has changed recently.

11
00:00:24.080 --> 00:00:27.030
Let's walk through a demonstration that will show you

12
00:00:27.030 --> 00:00:30.040
how to write a great commit message.

13
00:00:30.040 --> 00:00:33.030
When writing commit messages, developers often use

14
00:00:33.030 --> 00:00:36.030
the dash M flag to specify the commit message,

15
00:00:36.030 --> 00:00:38.040
using the command line.

16
00:00:38.040 --> 00:00:40.060
Unfortunately, this normally leads to

17
00:00:40.060 --> 00:00:42.030
a poor commit message.

18
00:00:42.030 --> 00:00:43.090
In fact, we've been doing it quite a bit

19
00:00:43.090 --> 00:00:46.010
throughout the course, but it's only for examples

20
00:00:46.010 --> 00:00:47.080
to save us some time.

21
00:00:47.080 --> 00:00:49.060
When working with a real code base,

22
00:00:49.060 --> 00:00:52.000
you need a better tool for the job.

23
00:00:52.000 --> 00:00:54.060
To write a great commit message, we should use

24
00:00:54.060 --> 00:00:57.030
a text editor instead of the command line.

25
00:00:57.030 --> 00:01:01.070
Let's walk through how to configure in editor.

26
00:01:01.070 --> 00:01:05.090
To set up the editor, we use the git config command,

27
00:01:05.090 --> 00:01:09.020
and we can specify this setting as a global setting

28
00:01:09.020 --> 00:01:13.000
that will apply across our Git installation.

29
00:01:13.000 --> 00:01:17.020
We then use the core editor configuration property,

30
00:01:17.020 --> 00:01:21.090
and it accepts the path to our favorite text editor.

31
00:01:21.090 --> 00:01:27.040
In this case, I'm going to be using Gedit on Ubuntu.

32
00:01:27.040 --> 00:01:31.070
Once I set the core dot editor property,

33
00:01:31.070 --> 00:01:34.060
I can then go ahead and issue the commit

34
00:01:34.060 --> 00:01:37.010
without the dash M flag.

35
00:01:37.010 --> 00:01:40.060
This will cause the editor to open

36
00:01:40.060 --> 00:01:43.090
and then I can go ahead within the editor

37
00:01:43.090 --> 00:01:47.030
and specify the commit message.

38
00:01:47.030 --> 00:01:49.050
Now, we'll write a more robust commit

39
00:01:49.050 --> 00:01:50.080
a little bit later.

40
00:01:50.080 --> 00:01:53.040
But I'm just trying to show you that you write the message

41
00:01:53.040 --> 00:01:57.010
within the editor, then go ahead and save the changes,

42
00:01:57.010 --> 00:01:59.000
and then close the editor.

43
00:01:59.000 --> 00:02:03.030
And you'll notice that Git uses the message crafted

44
00:02:03.030 --> 00:02:08.020
within the editor for your commit message.

45
00:02:08.020 --> 00:02:11.000
Now that we have the tool configured,

46
00:02:11.000 --> 00:02:14.010
let's set up a standard message template

47
00:02:14.010 --> 00:02:17.060
so that we can draft commit messages

48
00:02:17.060 --> 00:02:20.040
that are uniform and more robust.

49
00:02:20.040 --> 00:02:23.010
To set up our commit message template,

50
00:02:23.010 --> 00:02:26.080
we once again use the git config command,

51
00:02:26.080 --> 00:02:30.050
and we specify the value for

52
00:02:30.050 --> 00:02:33.030
the commit template property.

53
00:02:33.030 --> 00:02:36.090
Once again, we need to specify a path

54
00:02:36.090 --> 00:02:39.090
to a message template.

55
00:02:39.090 --> 00:02:42.000
Let's take a look at the message template

56
00:02:42.000 --> 00:02:43.050
we'll be using.

57
00:02:43.050 --> 00:02:44.070
This is the template.

58
00:02:44.070 --> 00:02:48.030
It starts out with a subject line that's roughly

59
00:02:48.030 --> 00:02:51.090
50 characters, and then we have several paragraphs

60
00:02:51.090 --> 00:02:54.040
that will describe our commit,

61
00:02:54.040 --> 00:02:55.090
and why it was created.

62
00:02:55.090 --> 00:02:59.020
We can use things like bullets within this template.

63
00:02:59.020 --> 00:03:03.050
And another good idea is to specify the work items

64
00:03:03.050 --> 00:03:06.070
that this message will resolve.

65
00:03:06.070 --> 00:03:10.050
So, having this template handy can be a reminder

66
00:03:10.050 --> 00:03:14.060
of how to structure our commit messages.

67
00:03:14.060 --> 00:03:18.000
So, that template is located at

68
00:03:18.000 --> 00:03:22.050
forward slash home forward slash course

69
00:03:22.050 --> 00:03:27.090
on the desktop within a repose directory I've created.

70
00:03:27.090 --> 00:03:31.060
And it's named gitmessage.txt.

71
00:03:31.060 --> 00:03:35.000
Now, this file is provided within the working files

72
00:03:35.000 --> 00:03:37.070
for the course, so you'll have to place it

73
00:03:37.070 --> 00:03:41.000
on your file system and then reference it

74
00:03:41.000 --> 00:03:42.090
within this command.

75
00:03:42.090 --> 00:03:47.010
Let's now go ahead and add more changes,

76
00:03:47.010 --> 00:03:52.010
and then we will add those changes to the stage.

77
00:03:52.010 --> 00:03:59.030
And then, at this point, I'm going to go ahead and commit.

78
00:03:59.030 --> 00:04:01.080
There we see our message template.

79
00:04:01.080 --> 00:04:05.070
And what I'm going to do is just remove

80
00:04:05.070 --> 00:04:08.000
several of these comments

81
00:04:08.000 --> 00:04:12.000
so that we can show the structure

82
00:04:12.000 --> 00:04:14.040
of what our commit message will look like.

83
00:04:14.040 --> 00:04:16.050
Since we haven't really made a change,

84
00:04:16.050 --> 00:04:20.000
it's not as important that we provide

85
00:04:20.000 --> 00:04:24.060
some real content here.

86
00:04:24.060 --> 00:04:26.070
Developers would be able to reference

87
00:04:26.070 --> 00:04:29.080
this template, though, when drafting their commit,

88
00:04:29.080 --> 00:04:31.090
and it's a good reminder for them of how

89
00:04:31.090 --> 00:04:33.090
the team structures them.

90
00:04:33.090 --> 00:04:37.000
So here you can see that we have prepped

91
00:04:37.000 --> 00:04:38.060
our commit message.

92
00:04:38.060 --> 00:04:41.070
And, once again, with the editor, we just save

93
00:04:41.070 --> 00:04:45.020
and then close.

94
00:04:45.020 --> 00:04:50.020
Okay, so let's go ahead and make this commit.

95
00:04:50.020 --> 00:04:53.020
You'll notice that when the editor opens,

96
00:04:53.020 --> 00:04:58.030
we will have our message template to reference.

97
00:04:58.030 --> 00:05:01.050
We can reference the template as a guide

98
00:05:01.050 --> 00:05:04.070
for how to structure our commit message.

99
00:05:04.070 --> 00:05:08.010
So we know that this is the line

100
00:05:08.010 --> 00:05:11.060
where the subject goes,

101
00:05:11.060 --> 00:05:15.040
at roughly 50 characters.

102
00:05:15.040 --> 00:05:20.010
Then we would add some paragraphs here.

103
00:05:20.010 --> 00:05:24.010
And I'm just going to copy that

104
00:05:24.010 --> 00:05:29.000
to add a little bit more content.

105
00:05:29.000 --> 00:05:29.080
Okay.

106
00:05:29.080 --> 00:05:35.080
And then maybe we wanna put some bullets.

107
00:05:35.080 --> 00:05:42.030
And then, finally, we can say it resolves work items,

108
00:05:42.030 --> 00:05:44.090
let's say one, two, and three.

109
00:05:44.090 --> 00:05:47.060
Okay, so there's how we can structure

110
00:05:47.060 --> 00:05:50.040
our commit message referencing the template.

111
00:05:50.040 --> 00:05:52.070
Let's go ahead and save the message.

112
00:05:52.070 --> 00:05:55.070
And then go ahead and we will close the editor.

113
00:05:55.070 --> 00:05:59.080
And you'll now see that our commit

114
00:05:59.080 --> 00:06:03.090
has been saved with the more robust message.

115
00:06:03.090 --> 00:06:05.040
Now here's the nice thing.

116
00:06:05.040 --> 00:06:07.080
Once we use the log command,

117
00:06:07.080 --> 00:06:10.020
you can really see the benefit of structuring

118
00:06:10.020 --> 00:06:11.080
our commit messages.

119
00:06:11.080 --> 00:06:15.000
It's much easier to read this structured message

120
00:06:15.000 --> 00:06:17.010
and each of our commits is going to have

121
00:06:17.010 --> 00:06:18.060
that same structure.

122
00:06:18.060 --> 00:06:20.080
This conveys more information to somebody

123
00:06:20.080 --> 00:06:22.050
perusing the code base.

124
00:06:22.050 --> 00:06:25.080
Using the configured editor and message template,

125
00:06:25.080 --> 00:06:29.000
you're now set-up to write better commits with Git.

