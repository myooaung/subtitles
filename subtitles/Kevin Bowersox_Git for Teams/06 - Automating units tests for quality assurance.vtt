WEBVTT
1
00:00:01.010 --> 00:00:03.010
- [Instructor] CI pipelines can automate your team's

2
00:00:03.010 --> 00:00:05.010
quality assurance processes.

3
00:00:05.010 --> 00:00:08.090
For example a pipeline can execute unit tests on demand

4
00:00:08.090 --> 00:00:10.030
with each commit,

5
00:00:10.030 --> 00:00:13.030
reducing the workload placed upon your team.

6
00:00:13.030 --> 00:00:16.030
For this lesson we'll continue working with GitLab Runner

7
00:00:16.030 --> 00:00:18.080
to build our simple Java project.

8
00:00:18.080 --> 00:00:22.030
At this point, the codes in a GitLab repository and

9
00:00:22.030 --> 00:00:25.010
we have a simple pipeline established.

10
00:00:25.010 --> 00:00:27.050
Now we're going to expand that pipeline so that

11
00:00:27.050 --> 00:00:30.050
it can execute and report on our unit tests,

12
00:00:30.050 --> 00:00:32.020
as part of the build.

13
00:00:32.020 --> 00:00:35.000
The results of the test will determine whether or not

14
00:00:35.000 --> 00:00:37.040
the build passes or fails.

15
00:00:37.040 --> 00:00:40.040
In order to add the test as part of the build,

16
00:00:40.040 --> 00:00:46.010
we'll need to modify the gitlab-ci file.

17
00:00:46.010 --> 00:00:49.090
Within the file we already have our build job and

18
00:00:49.090 --> 00:00:54.060
we're going to go ahead and add another job named test.

19
00:00:54.060 --> 00:00:59.070
Within the test job, we're going to add a script property

20
00:00:59.070 --> 00:01:04.000
and then within that script property we're going to invoke

21
00:01:04.000 --> 00:01:06.070
the maven test goal.

22
00:01:06.070 --> 00:01:10.080
Now here's one of the useful things about GitLab Runner.

23
00:01:10.080 --> 00:01:17.040
You can collect artifacts that are part of your job.

24
00:01:17.040 --> 00:01:22.050
So for example, maven test is going to cause j unit to

25
00:01:22.050 --> 00:01:24.050
build a test report.

26
00:01:24.050 --> 00:01:29.040
We can grab that test report and include it within

27
00:01:29.040 --> 00:01:32.090
the artifacts that are collected in GitLab.

28
00:01:32.090 --> 00:01:37.060
To do that we add the artifacts property and then we

29
00:01:37.060 --> 00:01:45.010
specify the path where the j unit test will be stored.

30
00:01:45.010 --> 00:01:50.030
So a best practice here is to run your unit test,

31
00:01:50.030 --> 00:01:52.070
find out where they're stored,

32
00:01:52.070 --> 00:01:57.060
then grab that path and use it to

33
00:01:57.060 --> 00:02:01.090
specify within the gitlab-ci file.

34
00:02:01.090 --> 00:02:06.000
I've already done that ahead of time so I know that my

35
00:02:06.000 --> 00:02:12.010
tests are stored within the path you see here.

36
00:02:12.010 --> 00:02:14.020
With these changes in place in our file,

37
00:02:14.020 --> 00:02:16.080
I'm going to go ahead and write the file and

38
00:02:16.080 --> 00:02:22.050
then we're going to commit these changes.

39
00:02:22.050 --> 00:02:26.080
And then we'll push them to the central repository.

40
00:02:26.080 --> 00:02:30.040
Once again I'll use the root user and

41
00:02:30.040 --> 00:02:33.000
provide the credentials and we see the changes are

42
00:02:33.000 --> 00:02:35.030
now sent to the central repository.

43
00:02:35.030 --> 00:02:40.010
And we can see that we have a pipeline that's pending.

44
00:02:40.010 --> 00:02:43.070
We see that our build job has already executed and

45
00:02:43.070 --> 00:02:45.050
now the tests are in progress.

46
00:02:45.050 --> 00:02:49.070
We can click on the test and here we see the results.

47
00:02:49.070 --> 00:02:53.080
And we have a problem, there's an error with our test.

48
00:02:53.080 --> 00:02:56.000
It looks like one of them has failed.

49
00:02:56.000 --> 00:03:01.090
Let's go take a look at the source code within our project

50
00:03:01.090 --> 00:03:05.060
to see if we can fix our broken build.

51
00:03:05.060 --> 00:03:09.040
So here we are at our source code and we can see that

52
00:03:09.040 --> 00:03:13.050
we have an error that's causing our test to fail.

53
00:03:13.050 --> 00:03:17.030
Instead of concatenating a and then b,

54
00:03:17.030 --> 00:03:20.010
we are concatenating b to a.

55
00:03:20.010 --> 00:03:22.070
We need to switch that around in order to fix our

56
00:03:22.070 --> 00:03:24.060
concatenate function.

57
00:03:24.060 --> 00:03:27.080
Let's go ahead and save the changes to this file

58
00:03:27.080 --> 00:03:32.090
now that our bug is fixed and we'll go ahead and

59
00:03:32.090 --> 00:03:35.070
then commit those changes.

60
00:03:35.070 --> 00:03:40.050
We'll say we fixed the failing test and

61
00:03:40.050 --> 00:03:45.010
we'll push those back to the central repository

62
00:03:45.010 --> 00:03:49.050
so that we can launch our CI pipeline.

63
00:03:49.050 --> 00:03:54.020
Now returning to GitLab you'll notice that with our

64
00:03:54.020 --> 00:03:59.000
push to the remote we're now running our pipeline

65
00:03:59.000 --> 00:03:59.080
once again.

66
00:03:59.080 --> 00:04:03.060
The build job has passed and we're on to the test.

67
00:04:03.060 --> 00:04:07.060
And this time the tests were successful.

68
00:04:07.060 --> 00:04:12.080
We can also go in and view our report.

69
00:04:12.080 --> 00:04:16.020
So here you can see we can pull down a zip file

70
00:04:16.020 --> 00:04:22.020
that will contain our test results in the artifacts

71
00:04:22.020 --> 00:04:25.020
that we provided within the build job.

72
00:04:25.020 --> 00:04:28.010
So that concludes our lesson on conducting unit tests

73
00:04:28.010 --> 00:04:29.090
with GitLab CI.

74
00:04:29.090 --> 00:04:33.040
Using this approach you can be sure unit tests are ran

75
00:04:33.040 --> 00:04:36.040
with each commit to your code base and the best part

76
00:04:36.040 --> 00:04:38.000
is it's all automated.

