WEBVTT
1
00:00:00.050 --> 00:00:03.040
- [Instructor] The next workflow we'll review is Git Flow.

2
00:00:03.040 --> 00:00:06.010
Git Flow is a popular workflow for Git

3
00:00:06.010 --> 00:00:08.090
that centers around two long-lived branches,

4
00:00:08.090 --> 00:00:11.000
master and develop.

5
00:00:11.000 --> 00:00:12.040
The master branch contains

6
00:00:12.040 --> 00:00:14.050
a copy of the current production code

7
00:00:14.050 --> 00:00:16.060
and is tightly controlled.

8
00:00:16.060 --> 00:00:19.090
Develop is the parent branch for feature branches

9
00:00:19.090 --> 00:00:23.080
that are created to address a particular line of work.

10
00:00:23.080 --> 00:00:25.050
Once a feature is complete,

11
00:00:25.050 --> 00:00:29.080
its branch is then merged back into the develop branch.

12
00:00:29.080 --> 00:00:33.020
When develop contains enough features to warrant a release,

13
00:00:33.020 --> 00:00:36.070
a new release branch is branched from develop.

14
00:00:36.070 --> 00:00:38.000
In the release branch,

15
00:00:38.000 --> 00:00:40.090
bug fixes can be made prior to the release

16
00:00:40.090 --> 00:00:45.080
in parallel to new work being performed in develop.

17
00:00:45.080 --> 00:00:48.080
The release branch is merged into master

18
00:00:48.080 --> 00:00:51.040
after the code is sent to production.

19
00:00:51.040 --> 00:00:55.020
Finally, develop is synced with the release.

20
00:00:55.020 --> 00:00:58.060
Additionally, Git Workflow allows hotfix branches

21
00:00:58.060 --> 00:01:02.010
to be created for master for emergency resolution

22
00:01:02.010 --> 00:01:04.080
to any production bugs that pop up.

23
00:01:04.080 --> 00:01:06.070
Git Flow centers around releases

24
00:01:06.070 --> 00:01:09.060
that deliver a releasable piece of software

25
00:01:09.060 --> 00:01:11.070
from the short-lived feature branches

26
00:01:11.070 --> 00:01:15.010
that get promoted to develop, release, and master.

27
00:01:15.010 --> 00:01:17.030
Once the release is performed,

28
00:01:17.030 --> 00:01:19.010
the master branch is updated

29
00:01:19.010 --> 00:01:22.020
to contain the live production code.

30
00:01:22.020 --> 00:01:24.050
Git Flow is extremely flexible.

31
00:01:24.050 --> 00:01:27.020
While your team is performing final preparations

32
00:01:27.020 --> 00:01:30.080
for a release, they are free to work on feature branches

33
00:01:30.080 --> 00:01:34.060
without impacting code in the release branch.

34
00:01:34.060 --> 00:01:37.050
Production bugs can be worked in hotfix branches

35
00:01:37.050 --> 00:01:41.090
independent of develop which means merged feature branches

36
00:01:41.090 --> 00:01:44.070
won't be deployed with the hotfix.

37
00:01:44.070 --> 00:01:47.070
Git Flow allows work to be completed in parallel

38
00:01:47.070 --> 00:01:51.080
by separating lines of code at various stages of maturity.

39
00:01:51.080 --> 00:01:54.070
That's one of its major strengths.

40
00:01:54.070 --> 00:01:57.080
Git Flow provides teams with confidence and stability

41
00:01:57.080 --> 00:02:00.080
because it doesn't allow direct modification

42
00:02:00.080 --> 00:02:02.040
of master and develop.

43
00:02:02.040 --> 00:02:04.060
That's done by maintainers.

44
00:02:04.060 --> 00:02:07.080
Instead, permissions on these branches are controlled

45
00:02:07.080 --> 00:02:11.000
and limited to repository maintainers.

46
00:02:11.000 --> 00:02:14.060
New code is introduced to these key historical branches

47
00:02:14.060 --> 00:02:16.080
through merge and pull requests

48
00:02:16.080 --> 00:02:20.080
instead of those direct commits by the contributors.

49
00:02:20.080 --> 00:02:23.090
Finally, let's circle back to compare key differences

50
00:02:23.090 --> 00:02:26.060
between TBD and Git Flow.

51
00:02:26.060 --> 00:02:30.090
TBD leverages a single branch that's used by all developers

52
00:02:30.090 --> 00:02:32.070
to avoid the distance

53
00:02:32.070 --> 00:02:35.060
created by long-lived feature branches.

54
00:02:35.060 --> 00:02:36.060
On the other hand,

55
00:02:36.060 --> 00:02:40.060
Git Flow achieves flexibility and supports experimentation

56
00:02:40.060 --> 00:02:43.010
by using many development branches,

57
00:02:43.010 --> 00:02:48.040
particularly two long-lived branches and feature branches.

58
00:02:48.040 --> 00:02:50.010
In trunk-based development,

59
00:02:50.010 --> 00:02:53.020
trunks should always be ready to be shipped to production.

60
00:02:53.020 --> 00:02:54.060
However, in Git Flow,

61
00:02:54.060 --> 00:02:58.020
the only branch that is production ready is master

62
00:02:58.020 --> 00:03:01.040
which is a copy of current production code.

63
00:03:01.040 --> 00:03:04.040
The more incremental nature of trunk-based development

64
00:03:04.040 --> 00:03:08.040
supports the practice of continuous deployment rather well.

65
00:03:08.040 --> 00:03:11.030
With a highly automated CD pipeline,

66
00:03:11.030 --> 00:03:14.090
developers are looking to ship code quickly.

67
00:03:14.090 --> 00:03:18.050
Git Flow is a solution that is better suited for agile teams

68
00:03:18.050 --> 00:03:22.000
that plan iterations and releases.

69
00:03:22.000 --> 00:03:23.060
Moving forward with the course,

70
00:03:23.060 --> 00:03:25.020
we will be leveraging Git Flow

71
00:03:25.020 --> 00:03:28.030
because it is more common of the two approaches.

72
00:03:28.030 --> 00:03:31.060
However, both workflows provide excellent choices

73
00:03:31.060 --> 00:03:35.000
for establishing how your team collaborates with Git.

