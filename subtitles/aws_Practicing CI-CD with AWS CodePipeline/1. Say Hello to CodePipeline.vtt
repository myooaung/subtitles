WEBVTT
1
00:00:00.940 --> 00:00:06.470
Hello there, and welcome to this course, Practicing CI/CD with AWS CodePipeline.

2
00:00:06.470 --> 00:00:07.720
My name is Ryan Lewis,

3
00:00:07.720 --> 00:00:11.080
and I've been using CodePipeline for several years to build and

4
00:00:11.080 --> 00:00:14.460
deploy applications in my role is a cloud engineer.

5
00:00:14.460 --> 00:00:15.780
If you're watching this course,

6
00:00:15.780 --> 00:00:19.510
you're either considering CodePipeline for your CI/CD needs,

7
00:00:19.510 --> 00:00:23.140
or maybe you're just curious what the service is and how it works.

8
00:00:23.140 --> 00:00:25.950
Well, either way, this course is for you.

9
00:00:25.950 --> 00:00:29.480
To walk you through all the features and uses of CodePipeline,

10
00:00:29.480 --> 00:00:33.640
I'm going to use an example scenario that could be similar to your own.

11
00:00:33.640 --> 00:00:36.740
Emma is a software engineer working in a small team

12
00:00:36.740 --> 00:00:39.040
at Hamster Ball Fantasy League.

13
00:00:39.040 --> 00:00:42.670
Her team has been tasked with launching a new cuttingâ€‘edge web

14
00:00:42.670 --> 00:00:46.560
experience for the HBFL web application.

15
00:00:46.560 --> 00:00:50.410
Unfortunately, they recently had several team members leave,

16
00:00:50.410 --> 00:00:54.440
and so there's more work than there are engineers.

17
00:00:54.440 --> 00:00:58.780
One area the team is struggling in is getting their code out into production.

18
00:00:58.780 --> 00:01:03.420
They currently have a laborious manual process to deploy that application.

19
00:01:03.420 --> 00:01:07.260
Emma's been doing some research on this and has presented

20
00:01:07.260 --> 00:01:11.100
the idea of using continuous integration and continuous

21
00:01:11.100 --> 00:01:12.890
deployment to automate this.

22
00:01:12.890 --> 00:01:18.140
The team is all for it and has left it up to Emma to set this up for the team.

23
00:01:18.140 --> 00:01:20.600
Her team is already using AWS,

24
00:01:20.600 --> 00:01:26.230
so using CodePipeline for CI/CD seems like a great candidate.

25
00:01:26.230 --> 00:01:30.410
CodePipeline is one of AWS's developer tools that acts as the

26
00:01:30.410 --> 00:01:34.180
glue and processor for other AWS services.

27
00:01:34.180 --> 00:01:39.570
It uses CodeCommit or another external source control to pull in

28
00:01:39.570 --> 00:01:43.040
source code and trigger a pipeline execution.

29
00:01:43.040 --> 00:01:46.560
CodeBuild is used to run code, build software,

30
00:01:46.560 --> 00:01:50.350
and do basically anything else you need to do in your pipeline.

31
00:01:50.350 --> 00:01:52.770
It'll usually end up being one of the most

32
00:01:52.770 --> 00:01:55.940
essential pieces in your CI/CD process.

33
00:01:55.940 --> 00:02:00.180
At any point in your pipeline, you can trigger Lambda functions to run,

34
00:02:00.180 --> 00:02:04.040
expanding the possibilities for what you can do with that pipeline.

35
00:02:04.040 --> 00:02:08.180
And finally, there are numerous deployment services that work with CodePipeline,

36
00:02:08.180 --> 00:02:12.350
such as CodeDeploy, Elastic Beanstalk, ECS,

37
00:02:12.350 --> 00:02:13.540
and Fargate.

38
00:02:13.540 --> 00:02:17.370
The many integrations that CodePipeline provides ensures that

39
00:02:17.370 --> 00:02:20.940
any scenario you need can be accomplished.

40
00:02:20.940 --> 00:02:26.190
Emma doesn't want to arbitrarily picked CodePipeline for the team's CI/CD tool,

41
00:02:26.190 --> 00:02:30.220
so she did some research into other competitors in the space,

42
00:02:30.220 --> 00:02:33.210
such as CircleCI and Travis CI.

43
00:02:33.210 --> 00:02:37.720
Let's take a look at how they compared to CodePipeline. Circle CI and

44
00:02:37.720 --> 00:02:41.820
Travis CI are very similar to CodePipeline in that they provide

45
00:02:41.820 --> 00:02:44.600
automated continuous integration services.

46
00:02:44.600 --> 00:02:49.260
You can define a workflow and a file, and that workflow will run when triggered,

47
00:02:49.260 --> 00:02:55.300
often from a change to source control. CircleCI and Travis CI aren't tied down

48
00:02:55.300 --> 00:02:59.190
to any one cloud provider or even a cloud provider at all,

49
00:02:59.190 --> 00:03:03.540
so they can work with AWS or without AWS. Through the

50
00:03:03.540 --> 00:03:07.900
robust and flexible AWS API, CircleCI and Travis CI can

51
00:03:07.900 --> 00:03:10.370
interact with resources in AWS,

52
00:03:10.370 --> 00:03:14.780
but it would have to be manually configured and written.

53
00:03:14.780 --> 00:03:17.120
Emma's been working in AWS for some time,

54
00:03:17.120 --> 00:03:20.740
and the team is much more familiar with how AWS works.

55
00:03:20.740 --> 00:03:24.600
In addition, CodePipeline only costs $1 per pipeline,

56
00:03:24.600 --> 00:03:30.560
excluding any processing time with CodeBuild or Storage in S3. She decides

57
00:03:30.560 --> 00:03:34.200
the extra time of setting up an external CI service,

58
00:03:34.200 --> 00:03:38.770
learning how it works, and onboarding the team wouldn't really be worth it.

59
00:03:38.770 --> 00:03:42.390
So she shares her research with the team, and they all agree to

60
00:03:42.390 --> 00:03:45.940
go with CodePipeline for their CI/CD needs.

61
00:03:45.940 --> 00:03:48.100
Now that CodePipeline has been selected,

62
00:03:48.100 --> 00:03:50.590
let's take a quick look at what we'll be covering in this

63
00:03:50.590 --> 00:03:54.100
course. In this module we'll be focusing on the basics of

64
00:03:54.100 --> 00:03:55.580
working with CodePipeline.

65
00:03:55.580 --> 00:03:59.670
We'll start by building a pipeline out with the AWS console.

66
00:03:59.670 --> 00:04:05.040
Then we'll add stages to it and see how running tests and manual approvals work.

67
00:04:05.040 --> 00:04:05.580
Finally,

68
00:04:05.580 --> 00:04:09.020
we'll build out the same pipeline with CloudFormation so we can

69
00:04:09.020 --> 00:04:13.040
ensure our pipelines are reproducible in the future.

70
00:04:13.040 --> 00:04:16.500
In the next module we'll focus on more advanced CodePipeline

71
00:04:16.500 --> 00:04:20.650
techniques such as arbitrary Lambda invocations,

72
00:04:20.650 --> 00:04:29.000
stage transitions, monitoring, and notifications. Now let's get started doing CI/CD with CodePipeline.

