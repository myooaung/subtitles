1
00:00:00,940 --> 00:00:03,700
Building code and deploying it to production as soon as

2
00:00:03,700 --> 00:00:08,010
code is pushed to a repo sounds great, but let's be honest,

3
00:00:08,010 --> 00:00:09,860
no one writes perfect code,

4
00:00:09,860 --> 00:00:14,040
and it's important to test an application before it goes to production.

5
00:00:14,040 --> 00:00:14,550
Luckily,

6
00:00:14,550 --> 00:00:19,340
we can also use CodePipeline to run our automated tests before deployment.

7
00:00:19,340 --> 00:00:24,640
If any tests fail, then the code won't be deployed and we can fix the issue.

8
00:00:24,640 --> 00:00:27,300
Let's start by adding a test action.

9
00:00:27,300 --> 00:00:30,130
You may remember that I mentioned in a previous video that

10
00:00:30,130 --> 00:00:33,340
stage transitions do add some latency.

11
00:00:33,340 --> 00:00:38,100
Because of this, I want to add the test action to the existing build stage.

12
00:00:38,100 --> 00:00:41,740
So first, let's go to the hbfl pipeline.

13
00:00:41,740 --> 00:00:47,220
Click the Edit button in the upper right‑hand corner. On the build stage box,

14
00:00:47,220 --> 00:00:50,040
click the Edit stage button.

15
00:00:50,040 --> 00:00:53,320
Here we have the option to either add testing as a

16
00:00:53,320 --> 00:00:56,660
parallel action or as a serial action.

17
00:00:56,660 --> 00:01:00,640
We want to test the built application that's going to be deployed,

18
00:01:00,640 --> 00:01:04,640
so let's set it up to run after the build action.

19
00:01:04,640 --> 00:01:08,180
Click the Add action group button under the build action.

20
00:01:08,180 --> 00:01:11,240
We'll call this action test.

21
00:01:11,240 --> 00:01:17,840
The action provider will be under the test section, and select AWS CodeBuild.

22
00:01:17,840 --> 00:01:22,940
Then for the input artifacts, we want to select the BuildArtifact.

23
00:01:22,940 --> 00:01:27,140
Now we need to create a new CodeBuild project to run our tests.

24
00:01:27,140 --> 00:01:29,330
Click on the Create project button.

25
00:01:29,330 --> 00:01:32,810
We'll name this one hbfl‑test.

26
00:01:32,810 --> 00:01:36,750
We're going to go with the same environment as our build project.

27
00:01:36,750 --> 00:01:41,440
Select Amazon Linux 2 in the Operating system drop‑down.

28
00:01:41,440 --> 00:01:44,640
Then in the Runtime drop‑down select Standard,

29
00:01:44,640 --> 00:01:50,530
and in the Image drop‑down, select the one with x86 ending in 2.0.

30
00:01:50,530 --> 00:01:54,040
Then scroll down to the Buildspec section.

31
00:01:54,040 --> 00:01:57,520
I've already created a buildspec file for this testing job,

32
00:01:57,520 --> 00:02:00,840
but we do need to define the file name here,

33
00:02:00,840 --> 00:02:03,330
since it's not going to be the same as the default

34
00:02:03,330 --> 00:02:05,740
one we used in our build step.

35
00:02:05,740 --> 00:02:10,640
In the Buildspec name field, enter buildspec_test.yml,

36
00:02:10,640 --> 00:02:14,940
and it'll run the correct one.

37
00:02:14,940 --> 00:02:18,470
Now scroll to the bottom and click Continue to CodePipeline.

38
00:02:18,470 --> 00:02:22,760
Back in the action creation screen, we don't need to change anything else,

39
00:02:22,760 --> 00:02:24,810
so go ahead and click Done.

40
00:02:24,810 --> 00:02:29,010
Then click Save and then Save again.

41
00:02:29,010 --> 00:02:34,160
And now our pipeline will run automated tests before deploying.

42
00:02:34,160 --> 00:02:37,170
Let's try out the newest incarnation of our pipeline.

43
00:02:37,170 --> 00:02:40,540
Click the Release change button and then Release.

44
00:02:40,540 --> 00:02:46,050
I'll speed my video up here and then uh, uh, oh, no.

45
00:02:46,050 --> 00:02:51,700
Okay, um, looks like our pipeline execution failed.

46
00:02:51,700 --> 00:02:54,040
Well, that wasn't supposed to happen.

47
00:02:54,040 --> 00:02:57,640
Uh, well, let's make this a good learning experience.

48
00:02:57,640 --> 00:03:00,670
You can see the entire build stage failed,

49
00:03:00,670 --> 00:03:05,370
and inside the build action succeeded, but the testing action failed,

50
00:03:05,370 --> 00:03:06,900
the one that we just added.

51
00:03:06,900 --> 00:03:10,470
We should figure out what went wrong in this testing action.

52
00:03:10,470 --> 00:03:14,270
This Details link will take us to the specific CodeBuild job

53
00:03:14,270 --> 00:03:17,710
execution that failed so we can troubleshoot it.

54
00:03:17,710 --> 00:03:22,840
So go ahead and click that and then click Link to execution details.

55
00:03:22,840 --> 00:03:24,920
Now, here are all the details.

56
00:03:24,920 --> 00:03:28,140
We're most interested in the logs portion here.

57
00:03:28,140 --> 00:03:32,500
If we scroll to the bottom, let's see, ah, yes, okay.

58
00:03:32,500 --> 00:03:36,820
So looks like the test that I put in to fail on purpose and give

59
00:03:36,820 --> 00:03:39,970
us a chance to troubleshoot failed as expected.

60
00:03:39,970 --> 00:03:41,600
Well, we can fix that.

61
00:03:41,600 --> 00:03:44,520
But let me quickly explain what we're looking at.

62
00:03:44,520 --> 00:03:48,340
Whenever your CodeBuild job runs, it outputs a lot of things.

63
00:03:48,340 --> 00:03:50,770
These logs are all saved in CloudWatch,

64
00:03:50,770 --> 00:03:56,140
and the first thousand lines are visible in the CodeBuild execution details.

65
00:03:56,140 --> 00:04:00,660
You can see CodeBuild is very explicit about what phase it's in,

66
00:04:00,660 --> 00:04:04,490
any output from commands you run and why the job failed,

67
00:04:04,490 --> 00:04:05,380
if it did.

68
00:04:05,380 --> 00:04:09,210
This is really good info if you're trying to figure out why a failure happened.

69
00:04:09,210 --> 00:04:11,390
Now let's fix that test failure.

70
00:04:11,390 --> 00:04:15,500
Open up your code editor with the demo project and go to the

71
00:04:15,500 --> 00:04:20,790
handlers folder and open the hamster.test.js file.

72
00:04:20,790 --> 00:04:26,140
Comment out lines 8 or 11 to disable the failing test.

73
00:04:26,140 --> 00:04:30,140
Now save the file, switch over to your command line,

74
00:04:30,140 --> 00:04:32,260
and we're going to commit that change with the

75
00:04:32,260 --> 00:04:41,240
command git commit ‑am "fixed test".

76
00:04:41,240 --> 00:04:46,740
Now run that, and then we're going to push that commit up to CodeCommit,

77
00:04:46,740 --> 00:04:50,280
which is going to kick off the pipeline by running

78
00:04:50,280 --> 00:04:55,240
the command git push aws master.

79
00:04:55,240 --> 00:04:57,610
If you switch back over to your pipeline detail,

80
00:04:57,610 --> 00:05:01,940
you can watch it in real time as the pipeline runs again.

81
00:05:01,940 --> 00:05:05,140
This is a good time to mention that when the test action failed,

82
00:05:05,140 --> 00:05:07,520
the pipeline did not continue.

83
00:05:07,520 --> 00:05:08,250
That's perfect,

84
00:05:08,250 --> 00:05:13,340
because you don't want to deploy code to production that has failing tests.

85
00:05:13,340 --> 00:05:15,130
Now the test action has passed,

86
00:05:15,130 --> 00:05:20,140
and our code update is being deployed to Elastic Beanstalk.

87
00:05:20,140 --> 00:05:21,890
Unit tests are great,

88
00:05:21,890 --> 00:05:25,080
but the gold standard of testing is integration tests,

89
00:05:25,080 --> 00:05:28,110
where tests are run on a live environment.

90
00:05:28,110 --> 00:05:31,220
If you wanted to do something like that with CodePipeline,

91
00:05:31,220 --> 00:05:35,750
you'd ideally want to deploy your built code to a testing environment first

92
00:05:35,750 --> 00:05:39,140
and run some integration tests against that environment.

93
00:05:39,140 --> 00:05:40,850
Then, if those tests pass,

94
00:05:40,850 --> 00:05:50,000
you'd deploy that same built code to a production environment. Here's basically what a CodePipeline with that setup would look like.

