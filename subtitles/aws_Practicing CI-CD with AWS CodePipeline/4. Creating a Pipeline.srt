1
00:00:00,940 --> 00:00:04,180
Let's build our first pipeline with CodePipeline.

2
00:00:04,180 --> 00:00:08,090
In this video, we're going to build a simple pipeline with two stages.

3
00:00:08,090 --> 00:00:10,800
The first stage, as required by CodePipeline,

4
00:00:10,800 --> 00:00:14,430
will contain a source action that pulls in code from

5
00:00:14,430 --> 00:00:17,440
that CodeCommit repository we created.

6
00:00:17,440 --> 00:00:22,060
Then that action will output the source code as an output artifact.

7
00:00:22,060 --> 00:00:25,410
The next stage will just have one build type action that uses

8
00:00:25,410 --> 00:00:28,990
CodeBuild to install our application dependencies and build

9
00:00:28,990 --> 00:00:31,080
the client code with webpack.

10
00:00:31,080 --> 00:00:35,540
The demo project for this course is the new web experience for Hamster Ball

11
00:00:35,540 --> 00:00:39,340
Fantasy League that Emma and her team are developing.

12
00:00:39,340 --> 00:00:42,440
All of the basic functionality is already completed,

13
00:00:42,440 --> 00:00:46,140
and only the pipeline needs to be built out.

14
00:00:46,140 --> 00:00:50,030
Go to the CodePipeline dashboard in your browser,

15
00:00:50,030 --> 00:00:53,520
then click on the Create pipeline button.

16
00:00:53,520 --> 00:00:55,370
First we'll name the pipeline.

17
00:00:55,370 --> 00:00:58,230
Enter hbfl here.

18
00:00:58,230 --> 00:01:03,050
AWS will prepopulate a name for a new service role to be

19
00:01:03,050 --> 00:01:05,990
created specifically for this pipeline.

20
00:01:05,990 --> 00:01:09,940
It'll also attach all the necessary policies for the role.

21
00:01:09,940 --> 00:01:12,550
If you had an existing role you wanted to use,

22
00:01:12,550 --> 00:01:14,040
this is where you'd attach it,

23
00:01:14,040 --> 00:01:18,840
but we're just going to use the AWS‑created one in this demo.

24
00:01:18,840 --> 00:01:21,900
Now if you expand the Advanced settings section,

25
00:01:21,900 --> 00:01:27,430
you'll see you can define a custom S3 bucket for the Artifact store or

26
00:01:27,430 --> 00:01:30,840
change the encryption key used for those artifacts.

27
00:01:30,840 --> 00:01:34,410
The defaults here are fine for us, so go ahead and click Next.

28
00:01:34,410 --> 00:01:36,750
Now we need to add a source stage.

29
00:01:36,750 --> 00:01:41,340
This is a requirement for all pipelines, which is why you can't skip it.

30
00:01:41,340 --> 00:01:44,990
In the drop‑down, you can see the available providers.

31
00:01:44,990 --> 00:01:50,620
This list has actually grown in the past couple of years as AWS releases new

32
00:01:50,620 --> 00:01:54,940
services and adds functionality for third‑party providers.

33
00:01:54,940 --> 00:01:58,420
Select AWS CodeCommit.

34
00:01:58,420 --> 00:02:00,290
Now you'll have some new prompts.

35
00:02:00,290 --> 00:02:02,840
Click into the Repository name prompt,

36
00:02:02,840 --> 00:02:05,840
and it will open an autocomplete drop‑down.

37
00:02:05,840 --> 00:02:08,950
If you only have a few repos in CodeCommit,

38
00:02:08,950 --> 00:02:13,180
then you should see hbfl here without having to type it in.

39
00:02:13,180 --> 00:02:15,840
Select hbfl.

40
00:02:15,840 --> 00:02:20,120
Now we need to select which branch in the hbfl repo that

41
00:02:20,120 --> 00:02:22,620
this source action will actually pull from.

42
00:02:22,620 --> 00:02:26,340
Click into the input box and select master.

43
00:02:26,340 --> 00:02:30,550
Now there are two detection options here for detecting changes,

44
00:02:30,550 --> 00:02:34,720
using CloudWatch Events or polling for changes.

45
00:02:34,720 --> 00:02:38,060
Polling was previously the only available option for

46
00:02:38,060 --> 00:02:40,560
initiating a CodePipeline execution,

47
00:02:40,560 --> 00:02:45,790
but now CloudWatch Events are the default and recommended method.

48
00:02:45,790 --> 00:02:48,840
Leave this selected and click Next.

49
00:02:48,840 --> 00:02:52,340
Now we have the option to set up a build stage and action.

50
00:02:52,340 --> 00:02:53,440
Click in the drop‑down,

51
00:02:53,440 --> 00:02:58,640
and you'll see the available build providers. Select AWS CodeBuild.

52
00:02:58,640 --> 00:03:03,240
The region will default to whatever region you're currently in, which is fine.

53
00:03:03,240 --> 00:03:07,280
Now we have to designate a CodeBuild project to run here,

54
00:03:07,280 --> 00:03:09,530
but we haven't actually built one yet,

55
00:03:09,530 --> 00:03:15,040
so we can use this Create project button to build that, so click it.

56
00:03:15,040 --> 00:03:18,540
This will open a new window to create this new project.

57
00:03:18,540 --> 00:03:24,770
Let's name it hbfl‑build. No need for a description. And

58
00:03:24,770 --> 00:03:28,040
then next we'll define the environment that we need for our

59
00:03:28,040 --> 00:03:30,200
CodeBuild project to run on.

60
00:03:30,200 --> 00:03:32,530
We're going to use a managed image,

61
00:03:32,530 --> 00:03:37,770
and we'll just use a regular version of AWS Linux. In the Operating

62
00:03:37,770 --> 00:03:43,150
system drop‑down select Amazon Linux 2. In the Runtime drop‑down select

63
00:03:43,150 --> 00:03:48,840
Standard. And then and the Image drop‑down, select the option using the

64
00:03:48,840 --> 00:03:53,640
x86 architecture that ends in 2.0.

65
00:03:53,640 --> 00:03:58,050
The rest of these options are fine as is. Now, CodeBuild uses

66
00:03:58,050 --> 00:04:01,840
build commands to know what to do. It runs them.

67
00:04:01,840 --> 00:04:04,480
I've already created a buildspec YAML file,

68
00:04:04,480 --> 00:04:07,440
which is in the HBFL source code,

69
00:04:07,440 --> 00:04:10,720
and we can use that to actually build our project, so

70
00:04:10,720 --> 00:04:14,990
leave the box that says Use a buildspec file selected.

71
00:04:14,990 --> 00:04:17,790
Buildspec.yml is the default name,

72
00:04:17,790 --> 00:04:22,150
so we don't actually need to define a special name for it here.

73
00:04:22,150 --> 00:04:25,840
The default CloudWatch logs is fine for us.

74
00:04:25,840 --> 00:04:29,990
And now that we've defined the environment and what needs to run for the job,

75
00:04:29,990 --> 00:04:34,240
go ahead and click the Continue to CodePipeline button.

76
00:04:34,240 --> 00:04:35,270
After some time,

77
00:04:35,270 --> 00:04:38,720
the popup will close, and the job we just created will

78
00:04:38,720 --> 00:04:41,540
be populated in our build action.

79
00:04:41,540 --> 00:04:44,540
Now we can click Next to continue.

80
00:04:44,540 --> 00:04:47,600
Here's where we could add a deploy stage,

81
00:04:47,600 --> 00:04:51,660
but we're just going to skip this for now and add one in a later video in this

82
00:04:51,660 --> 00:04:57,440
module, so click the Skip deploy stage button and then Skip.

83
00:04:57,440 --> 00:05:01,150
Finally, here are all the details of the pipeline we configured.

84
00:05:01,150 --> 00:05:02,630
If everything looks good,

85
00:05:02,630 --> 00:05:06,910
go ahead and click Create pipeline. And now your pipeline is

86
00:05:06,910 --> 00:05:10,040
complete, and it'll kick off its first execution.

87
00:05:10,040 --> 00:05:15,360
You can watch it in real time, as the UI will update as the execution proceeds.

88
00:05:15,360 --> 00:05:16,900
And when it's completed,

89
00:05:16,900 --> 00:05:25,000
it will have pulled your code from the CodeCommit repository and then built it on CodeBuild in that build action.

