WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.760
friends here.

2
00:00:02.760 --> 00:00:04.090
We're going to discuss a boat.

3
00:00:04.090 --> 00:00:04.810
Loops.

4
00:00:04.810 --> 00:00:05.740
Basically,

5
00:00:05.740 --> 00:00:10.450
loops are useful to execute a block off court many times.

6
00:00:10.450 --> 00:00:12.500
Why we need eggs.

7
00:00:12.500 --> 00:00:12.900
Good.

8
00:00:12.900 --> 00:00:17.090
Some block off court or number off lines.

9
00:00:17.090 --> 00:00:18.710
Or maybe sometimes one line.

10
00:00:18.710 --> 00:00:20.120
Why?

11
00:00:20.120 --> 00:00:22.150
We need to exclude many number of times,

12
00:00:22.150 --> 00:00:23.950
right?

13
00:00:23.950 --> 00:00:24.950
See that?

14
00:00:24.950 --> 00:00:27.150
Let me take one simple example first.

15
00:00:27.150 --> 00:00:31.270
So I'm going to save my programmers some introduction to lose the people.

16
00:00:31.270 --> 00:00:31.830
Now,

17
00:00:31.830 --> 00:00:33.250
let me take my list.

18
00:00:33.250 --> 00:00:35.180
You can take with any example.

19
00:00:35.180 --> 00:00:36.450
I'm picking somebody as a list.

20
00:00:36.450 --> 00:00:38.550
This is a list.

21
00:00:38.550 --> 00:00:39.370
No.

22
00:00:39.370 --> 00:00:44.550
My intention is I want to take one by one value from my list and then I want to print.

23
00:00:44.550 --> 00:00:46.320
Right?

24
00:00:46.320 --> 00:00:47.040
So first,

25
00:00:47.040 --> 00:00:49.470
let me take one by one value from my list.

26
00:00:49.470 --> 00:00:49.850
See,

27
00:00:49.850 --> 00:00:51.770
this is your foster value.

28
00:00:51.770 --> 00:00:53.850
Universalist taking one way yuan value.

29
00:00:53.850 --> 00:00:55.500
Then after taking that,

30
00:00:55.500 --> 00:00:56.350
I want to print it.

31
00:00:56.350 --> 00:00:57.550
Yes,

32
00:00:57.550 --> 00:00:59.050
I am bending support in this way.

33
00:00:59.050 --> 00:01:03.950
Then I want to take one more value than printed.

34
00:01:03.950 --> 00:01:08.680
Then Then we have one more value than let me do it.

35
00:01:08.680 --> 00:01:11.290
That's it.

36
00:01:11.290 --> 00:01:13.060
I'll admit an agency.

37
00:01:13.060 --> 00:01:13.550
The output?

38
00:01:13.550 --> 00:01:15.130
No,

39
00:01:15.130 --> 00:01:23.370
I assume that I hold Suppose two more values in my list then as off no.

40
00:01:23.370 --> 00:01:24.650
Whatever the court we how?

41
00:01:24.650 --> 00:01:25.350
Because of that,

42
00:01:25.350 --> 00:01:26.770
we are getting only 1st 3 values.

43
00:01:26.770 --> 00:01:32.450
Now I need to take fourth value and then 50 value and I want to print there late Monday

44
00:01:32.450 --> 00:01:36.240
Fourth value for value indexes.

45
00:01:36.240 --> 00:01:36.510
Three.

46
00:01:36.510 --> 00:01:37.570
I'm taking 100.

47
00:01:37.570 --> 00:01:38.200
I'm printing,

48
00:01:38.200 --> 00:01:41.830
then Same way How to take 50 value and then I want to print it.

49
00:01:41.830 --> 00:01:45.400
So taking your foot 50 value within the next four on.

50
00:01:45.400 --> 00:01:46.250
Then I am printing.

51
00:01:46.250 --> 00:01:53.850
I'll see here you are taking one by one value from your list and then you are printing

52
00:01:53.850 --> 00:01:55.920
taking second blue printing,

53
00:01:55.920 --> 00:01:57.650
taking dollar value printing right,

54
00:01:57.650 --> 00:01:59.890
taking 4 12 and then printing.

55
00:01:59.890 --> 00:02:03.370
Breaking 50 well on imprinting who want your ring.

56
00:02:03.370 --> 00:02:06.820
Same action you're repeating again and again immediately.

57
00:02:06.820 --> 00:02:08.750
Of course it is correct.

58
00:02:08.750 --> 00:02:14.950
But instead of repeating your logic again and again immediately,

59
00:02:14.950 --> 00:02:18.490
we know what if you get this type of situation at the time,

60
00:02:18.490 --> 00:02:19.850
Python is providing one.

61
00:02:19.850 --> 00:02:20.490
Excellent.

62
00:02:20.490 --> 00:02:21.550
The syntax for us.

63
00:02:21.550 --> 00:02:22.930
What is that mean?

64
00:02:22.930 --> 00:02:23.600
Simply Luke.

65
00:02:23.600 --> 00:02:25.930
Why it is calling a movement.

66
00:02:25.930 --> 00:02:27.400
See taking,

67
00:02:27.400 --> 00:02:27.850
printing,

68
00:02:27.850 --> 00:02:28.680
taking,

69
00:02:28.680 --> 00:02:29.210
printing.

70
00:02:29.210 --> 00:02:32.550
You are repeating same action by So it's simply a loop.

71
00:02:32.550 --> 00:02:34.050
No.

72
00:02:34.050 --> 00:02:34.720
First,

73
00:02:34.720 --> 00:02:37.110
let me write my syntax So while writing syntax,

74
00:02:37.110 --> 00:02:40.650
what I'm writing is for each value.

75
00:02:40.650 --> 00:02:41.630
This is a variable case.

76
00:02:41.630 --> 00:02:42.410
You can take anything,

77
00:02:42.410 --> 00:02:43.180
interrupt each other.

78
00:02:43.180 --> 00:02:44.020
You can take X rays,

79
00:02:44.020 --> 00:02:45.600
er in your list.

80
00:02:45.600 --> 00:02:47.210
So in separating list as off No.

81
00:02:47.210 --> 00:02:51.470
For your understanding purpose You conveyed your variable name or that if you can also

82
00:02:51.470 --> 00:02:52.870
write the one list no problem,

83
00:02:52.870 --> 00:02:54.450
but will use same result.

84
00:02:54.450 --> 00:02:55.850
Right?

85
00:02:55.850 --> 00:02:56.850
Fine.

86
00:02:56.850 --> 00:03:00.230
Then offer that inside off your Lou.

87
00:03:00.230 --> 00:03:01.160
What was the logic?

88
00:03:01.160 --> 00:03:03.880
You want to repeat that tree logic in it too?

89
00:03:03.880 --> 00:03:09.100
Right inside off a loop now for is a loop inside of the loopy hard right.

90
00:03:09.100 --> 00:03:13.150
Your logic which has to repeat so inside a for loop.

91
00:03:13.150 --> 00:03:14.000
If you underwrite,

92
00:03:14.000 --> 00:03:15.350
you need to provide some space.

93
00:03:15.350 --> 00:03:15.780
So actually,

94
00:03:15.780 --> 00:03:16.670
what is our intention?

95
00:03:16.670 --> 00:03:22.580
Ease print e Were each value first under the output for your wind Again,

96
00:03:22.580 --> 00:03:24.420
you're going to get all your values.

97
00:03:24.420 --> 00:03:25.460
You can increase it.

98
00:03:25.460 --> 00:03:28.250
Let me increase my list off values here.

99
00:03:28.250 --> 00:03:31.910
If I increase this main number of values,

100
00:03:31.910 --> 00:03:32.270
right,

101
00:03:32.270 --> 00:03:34.960
I'm not going to write extra print statements.

102
00:03:34.960 --> 00:03:38.700
I'm doing this action requirement with only one print statement.

103
00:03:38.700 --> 00:03:44.650
See the result right then how your loop is going to work.

104
00:03:44.650 --> 00:03:49.080
See why nobody feel on your bite on skip.

105
00:03:49.080 --> 00:03:49.450
Anyway,

106
00:03:49.450 --> 00:03:51.000
This We're not using this variable.

107
00:03:51.000 --> 00:03:51.850
Don't worry aboard that.

108
00:03:51.850 --> 00:03:52.890
What is there?

109
00:03:52.890 --> 00:03:53.850
Right?

110
00:03:53.850 --> 00:03:59.650
So whenever Pitre and identifies this word called for our key work,

111
00:03:59.650 --> 00:04:02.430
then immediately or Brighton will go and look here.

112
00:04:02.430 --> 00:04:04.810
What is there after we were in as off?

113
00:04:04.810 --> 00:04:04.950
No,

114
00:04:04.950 --> 00:04:05.700
it is a list.

115
00:04:05.700 --> 00:04:07.500
That's why very first of all,

116
00:04:07.500 --> 00:04:12.180
it will take your bite on on that valuable assigned to this variable so that what you're

117
00:04:12.180 --> 00:04:12.450
doing,

118
00:04:12.450 --> 00:04:17.920
you're taking faster value with help off your for on that value we're printing so that

119
00:04:17.920 --> 00:04:23.000
you're getting first value after completion off the lines or line which are there under

120
00:04:23.000 --> 00:04:24.050
river for Lou.

121
00:04:24.050 --> 00:04:26.850
Then you're fightin will go on.

122
00:04:26.850 --> 00:04:30.750
Take that Italy Second value on this value will going to store and they were each.

123
00:04:30.750 --> 00:04:33.000
Then again,

124
00:04:33.000 --> 00:04:33.850
we're bringing that.

125
00:04:33.850 --> 00:04:38.480
Then second values were then you're part and will goto on take third value on this value

126
00:04:38.480 --> 00:04:40.920
will go on and store into this variable on.

127
00:04:40.920 --> 00:04:42.140
We're printing something.

128
00:04:42.140 --> 00:04:42.320
What?

129
00:04:42.320 --> 00:04:44.220
We're printing same variable we're printing.

130
00:04:44.220 --> 00:04:45.270
Likewise.

131
00:04:45.270 --> 00:04:49.200
You're repeating this action for all values once.

132
00:04:49.200 --> 00:04:52.590
If your values are warmer than your bite on will stop this loop.

133
00:04:52.590 --> 00:04:54.050
Execution off this loop.

134
00:04:54.050 --> 00:04:55.830
Right,

135
00:04:55.830 --> 00:04:56.440
guys,

136
00:04:56.440 --> 00:04:59.880
what you're doing here you are repeating taking a value,

137
00:04:59.880 --> 00:05:06.620
storing that value India variable and then printing that variable then taking for storing

138
00:05:06.620 --> 00:05:09.230
that in the each variable and printing that taking,

139
00:05:09.230 --> 00:05:09.670
fight,

140
00:05:09.670 --> 00:05:11.670
storing and each variable and then printing.

141
00:05:11.670 --> 00:05:13.960
So you are repeating here itself.

142
00:05:13.960 --> 00:05:14.820
You are logic,

143
00:05:14.820 --> 00:05:15.550
right?

144
00:05:15.550 --> 00:05:23.750
So the repetition each and every repetition is called one alteration innovation.

145
00:05:23.750 --> 00:05:27.040
Right.

146
00:05:27.040 --> 00:05:27.430
So,

147
00:05:27.430 --> 00:05:30.460
doctor duration we are using in your loops.

148
00:05:30.460 --> 00:05:35.710
This conference will now be recorded

149
00:05:35.710 --> 00:06:06.340
friends

150
00:06:06.340 --> 00:06:06.890
here.

151
00:06:06.890 --> 00:06:09.010
We're going to discuss a boat loops.

152
00:06:09.010 --> 00:06:10.440
First of all,

153
00:06:10.440 --> 00:06:17.950
loops are useful to repeat some block to execute a block off court many times.

154
00:06:17.950 --> 00:06:22.850
Why we need to execute a block off court many times.

155
00:06:22.850 --> 00:06:23.850
Block off court.

156
00:06:23.850 --> 00:06:26.350
Nothing but maybe a single line or multiple alliance.

157
00:06:26.350 --> 00:06:27.870
But why?

158
00:06:27.870 --> 00:06:32.000
We need to eggs good again and again This block off court.

159
00:06:32.000 --> 00:06:33.050
What is the need?

160
00:06:33.050 --> 00:06:34.050
Right?

161
00:06:34.050 --> 00:06:37.400
Let me explain this with the 1st 1 Simple example,

162
00:06:37.400 --> 00:06:38.930
right?

163
00:06:38.930 --> 00:06:39.530
See,

164
00:06:39.530 --> 00:06:43.480
I'm goingto say we a program named Coral introduction to lose the baby weight.

165
00:06:43.480 --> 00:06:47.190
And here what I'm doing is I'm taking some list somewhere.

166
00:06:47.190 --> 00:06:49.750
I didn't that I have a list off some values.

167
00:06:49.750 --> 00:06:51.610
No year,

168
00:06:51.610 --> 00:06:52.400
actually.

169
00:06:52.400 --> 00:06:53.600
Have a small requirement,

170
00:06:53.600 --> 00:06:57.970
Not requirement is I need to bring the values off your list one by one.

171
00:06:57.970 --> 00:06:58.820
Not after time.

172
00:06:58.820 --> 00:06:59.790
All your entire list.

173
00:06:59.790 --> 00:07:00.260
I mean,

174
00:07:00.260 --> 00:07:05.050
I don't want to print your values in this way.

175
00:07:05.050 --> 00:07:06.950
You're getting on board as a list.

176
00:07:06.950 --> 00:07:07.730
No,

177
00:07:07.730 --> 00:07:08.870
I don't want to print in that way.

178
00:07:08.870 --> 00:07:11.070
I want to print faster for then five,

179
00:07:11.070 --> 00:07:11.850
then six.

180
00:07:11.850 --> 00:07:15.930
Then what you're doing to get that?

181
00:07:15.930 --> 00:07:16.170
First,

182
00:07:16.170 --> 00:07:18.730
you are to take festival from your list with index.

183
00:07:18.730 --> 00:07:19.900
I'm taking First of all,

184
00:07:19.900 --> 00:07:20.150
you.

185
00:07:20.150 --> 00:07:23.840
Then I want to take second value than I want to print it.

186
00:07:23.840 --> 00:07:25.180
So taking second well,

187
00:07:25.180 --> 00:07:26.950
is nothing but my list off one.

188
00:07:26.950 --> 00:07:28.910
Then you're printing.

189
00:07:28.910 --> 00:07:31.850
Then take toward Value 100 printed.

190
00:07:31.850 --> 00:07:35.000
See that put?

191
00:07:35.000 --> 00:07:35.430
Yes.

192
00:07:35.430 --> 00:07:37.050
You're getting one by one value.

193
00:07:37.050 --> 00:07:39.880
Okay for this list,

194
00:07:39.880 --> 00:07:41.800
suppose you're having three prints treatments,

195
00:07:41.800 --> 00:07:42.770
just our gender.

196
00:07:42.770 --> 00:07:43.220
You know,

197
00:07:43.220 --> 00:07:46.750
at least you How some This many number off values?

198
00:07:46.750 --> 00:07:48.850
No,

199
00:07:48.850 --> 00:07:50.310
I need to write a home.

200
00:07:50.310 --> 00:07:51.750
Any number of prince statements,

201
00:07:51.750 --> 00:07:55.240
how many values you have in your list?

202
00:07:55.240 --> 00:07:57.550
That many number off prince statements I need to write.

203
00:07:57.550 --> 00:07:58.740
So finally,

204
00:07:58.740 --> 00:08:03.640
what is the purpose to write your prince statement that many number of times simply You're

205
00:08:03.640 --> 00:08:07.520
taking one by one value from your list on your printing.

206
00:08:07.520 --> 00:08:15.410
That taking second blueprint the third value fourth value 50 lug ways You are taking one by

207
00:08:15.410 --> 00:08:16.750
100 or printing it.

208
00:08:16.750 --> 00:08:21.430
So if we have a more number of values in your least unit,

209
00:08:21.430 --> 00:08:21.720
right,

210
00:08:21.720 --> 00:08:28.660
More number of prince statements I don't want right in that because python is providing not

211
00:08:28.660 --> 00:08:30.180
only bite on in all languages,

212
00:08:30.180 --> 00:08:32.060
we held this concept anyway.

213
00:08:32.060 --> 00:08:41.540
Bite on is providing a simple logic just to take one by one value from your list just to

214
00:08:41.540 --> 00:08:43.650
take one by one value from your list.

215
00:08:43.650 --> 00:08:47.410
How you can take one by one value from your list automatically,

216
00:08:47.410 --> 00:08:47.980
right?

217
00:08:47.980 --> 00:08:49.610
See that as off?

218
00:08:49.610 --> 00:08:49.890
No.

219
00:08:49.890 --> 00:08:51.300
For you were Mr any purpose.

220
00:08:51.300 --> 00:08:56.750
Currently I am writing a syntax call for each value in your list.

221
00:08:56.750 --> 00:08:58.550
So you converted your variable.

222
00:08:58.550 --> 00:09:01.090
Here are you can also read directly your list.

223
00:09:01.090 --> 00:09:04.180
Both will find for time being am reading.

224
00:09:04.180 --> 00:09:05.090
They really were variable.

225
00:09:05.090 --> 00:09:14.060
Sorry your values then after that your great colon then and the first of all what these you

226
00:09:14.060 --> 00:09:21.240
are What is the action off your for here means because off this,

227
00:09:21.240 --> 00:09:23.200
for what it will do moment,

228
00:09:23.200 --> 00:09:26.850
it will take one by one value from your list.

229
00:09:26.850 --> 00:09:28.160
First,

230
00:09:28.160 --> 00:09:28.950
it will take four.

231
00:09:28.950 --> 00:09:32.010
Number four on it will store automatically into your very will.

232
00:09:32.010 --> 00:09:36.670
Call each variable offer that in case if you write any number off lines inside off,

233
00:09:36.670 --> 00:09:40.490
your for these lines will exclude ones.

234
00:09:40.490 --> 00:09:41.680
Then,

235
00:09:41.680 --> 00:09:46.750
after execution off this part ones your python will automatically takes second value on

236
00:09:46.750 --> 00:09:50.990
this valley will go on the story and Dodi then whatever the lines,

237
00:09:50.990 --> 00:09:55.230
you how under they were for those lanes will execute so as off.

238
00:09:55.230 --> 00:09:55.570
No,

239
00:09:55.570 --> 00:09:58.010
My intention is I want to print all the values,

240
00:09:58.010 --> 00:09:58.890
right?

241
00:09:58.890 --> 00:10:06.610
That's why what I'm doing is simply print each value so that this print is nothing but just

242
00:10:06.610 --> 00:10:07.160
your printing.

243
00:10:07.160 --> 00:10:11.420
Your each value variable each value a variable.

244
00:10:11.420 --> 00:10:12.750
In this you have some value.

245
00:10:12.750 --> 00:10:18.650
And I am writing this prince treatment under your for Luke under They were for Luke.

246
00:10:18.650 --> 00:10:23.780
So because off this what will happen means observed that we're number if you run your pipe

247
00:10:23.780 --> 00:10:24.350
down strip,

248
00:10:24.350 --> 00:10:28.890
imagine that there is no first line has off no margin that there is no first line.

249
00:10:28.890 --> 00:10:29.750
Okay,

250
00:10:29.750 --> 00:10:36.840
then whenever there is a key word at the very first in a given line by ton will immediately

251
00:10:36.840 --> 00:10:37.390
go on.

252
00:10:37.390 --> 00:10:39.510
Look after in whatever it is,

253
00:10:39.510 --> 00:10:40.490
they're forced.

254
00:10:40.490 --> 00:10:41.850
Your partner will absurdities?

255
00:10:41.850 --> 00:10:42.780
Yes,

256
00:10:42.780 --> 00:10:43.520
it is a list.

257
00:10:43.520 --> 00:10:45.850
That's why in list,

258
00:10:45.850 --> 00:10:46.670
whatever the value,

259
00:10:46.670 --> 00:10:53.970
we hope faster value that valley will automatically store into that No very first time

260
00:10:53.970 --> 00:10:59.560
You're each value each value variable east number four on offer.

261
00:10:59.560 --> 00:11:01.940
Taking that What would the number off lines you?

262
00:11:01.940 --> 00:11:05.090
How inside off your for those lands.

263
00:11:05.090 --> 00:11:05.420
Legs?

264
00:11:05.420 --> 00:11:06.180
Good ones.

265
00:11:06.180 --> 00:11:06.880
But as off No,

266
00:11:06.880 --> 00:11:08.210
I'm taking only one line.

267
00:11:08.210 --> 00:11:13.940
So while excluding that line what I'm doing I am bringing the variable off each well,

268
00:11:13.940 --> 00:11:17.050
whatever you hope in this.

269
00:11:17.050 --> 00:11:21.650
So that what you will get you will get number four right?

270
00:11:21.650 --> 00:11:24.890
Then after printing offered exclusion,

271
00:11:24.890 --> 00:11:30.170
all for this line you're fighting will automatically take second value on this valley will

272
00:11:30.170 --> 00:11:31.350
store into this variable.

273
00:11:31.350 --> 00:11:37.850
After storing your second value indo this variable this block will exclude one second But

274
00:11:37.850 --> 00:11:41.460
while excluding what we're doing this variable valley we're printing.

275
00:11:41.460 --> 00:11:46.190
That's why you're going to get second value like ways your python will take one by one

276
00:11:46.190 --> 00:11:50.350
value from here on that valuable store in tow.

277
00:11:50.350 --> 00:11:55.850
This variable first offer that only this block will excuse.

278
00:11:55.850 --> 00:11:58.310
So because of dark,

279
00:11:58.310 --> 00:11:59.410
see what it is doing.

280
00:11:59.410 --> 00:12:02.210
You're getting all well,

281
00:12:02.210 --> 00:12:04.050
this one by one after running your court.

282
00:12:04.050 --> 00:12:06.150
So no,

283
00:12:06.150 --> 00:12:08.720
that's actually what you're doing.

284
00:12:08.720 --> 00:12:09.050
I mean,

285
00:12:09.050 --> 00:12:11.080
your python taking foster value,

286
00:12:11.080 --> 00:12:12.020
storing into that,

287
00:12:12.020 --> 00:12:13.090
excluding this block,

288
00:12:13.090 --> 00:12:15.230
then taking second value,

289
00:12:15.230 --> 00:12:17.710
storing into this variable than excluding this law.

290
00:12:17.710 --> 00:12:18.080
Ah,

291
00:12:18.080 --> 00:12:20.680
block taking third value,

292
00:12:20.680 --> 00:12:23.550
storing into this variable and then executing this block,

293
00:12:23.550 --> 00:12:25.340
she got a building here itself.

294
00:12:25.340 --> 00:12:25.640
Right?

295
00:12:25.640 --> 00:12:26.850
That's where this is like a loop.

296
00:12:26.850 --> 00:12:29.570
That's why this is called Luke.

297
00:12:29.570 --> 00:12:35.120
And one more thing executing your block off course,

298
00:12:35.120 --> 00:12:36.150
right?

299
00:12:36.150 --> 00:12:37.930
With help off your Lou.

300
00:12:37.930 --> 00:12:39.250
How many number of times?

301
00:12:39.250 --> 00:12:41.280
How many number off lose you?

302
00:12:41.280 --> 00:12:41.490
How?

303
00:12:41.490 --> 00:12:42.540
Inside off a list.

304
00:12:42.540 --> 00:12:48.350
That many number of times you are repeating on each repetition is called iteration.

305
00:12:48.350 --> 00:12:54.230
It'll ation right.

306
00:12:54.230 --> 00:12:55.230
So supple.

307
00:12:55.230 --> 00:12:57.110
Assume that in my list I have four values.

308
00:12:57.110 --> 00:12:57.770
Just a gender.

309
00:12:57.770 --> 00:12:59.110
Then you're going to it.

310
00:12:59.110 --> 00:13:01.280
Rate it rate this logic,

311
00:13:01.280 --> 00:13:03.650
this line You're going to repeat this line.

312
00:13:03.650 --> 00:13:06.010
Four number off times are four.

313
00:13:06.010 --> 00:13:09.250
IT rations will be happened if you have four values.

314
00:13:09.250 --> 00:13:11.430
Not only this,

315
00:13:11.430 --> 00:13:12.680
simply your variable.

316
00:13:12.680 --> 00:13:12.940
See,

317
00:13:12.940 --> 00:13:17.270
I can also do something like Prince in this way.

318
00:13:17.270 --> 00:13:18.350
Just I'm doing this one.

319
00:13:18.350 --> 00:13:20.350
Let me invite three prints treatments.

320
00:13:20.350 --> 00:13:22.760
Not only print statements,

321
00:13:22.760 --> 00:13:24.380
you can write anything but as off,

322
00:13:24.380 --> 00:13:25.590
not just for our understanding.

323
00:13:25.590 --> 00:13:25.990
Purpose.

324
00:13:25.990 --> 00:13:27.150
I'm writing simple lines.

325
00:13:27.150 --> 00:13:28.010
No,

326
00:13:28.010 --> 00:13:29.450
let me remove this list.

327
00:13:29.450 --> 00:13:30.750
Okay.

328
00:13:30.750 --> 00:13:31.680
Very firstly,

329
00:13:31.680 --> 00:13:32.670
Itself or loop.

330
00:13:32.670 --> 00:13:34.350
I don't want this man number of values.

331
00:13:34.350 --> 00:13:34.900
Let me write.

332
00:13:34.900 --> 00:13:36.080
Suppose three values,

333
00:13:36.080 --> 00:13:38.430
Same action will be repeat for all values.

334
00:13:38.430 --> 00:13:40.050
In case if you have any number of Alice,

335
00:13:40.050 --> 00:13:42.950
know what will happen?

336
00:13:42.950 --> 00:13:44.330
Fascinating.

337
00:13:44.330 --> 00:13:45.870
Whenever If you're executing,

338
00:13:45.870 --> 00:13:48.420
your python will look very first world right?

339
00:13:48.420 --> 00:13:50.980
If it is a far than for is a loop,

340
00:13:50.980 --> 00:13:56.380
that's why you're fighting will immediately look in the same line after in whatever you

341
00:13:56.380 --> 00:13:56.790
have,

342
00:13:56.790 --> 00:13:58.650
your pattern will look that place first.

343
00:13:58.650 --> 00:14:03.520
Then what you're having here list which consist off three values.

344
00:14:03.520 --> 00:14:08.950
Then python will emerge to take foster value on this world little store into this variable

345
00:14:08.950 --> 00:14:14.240
After studying that the number off lines which you how inside off your loop.

346
00:14:14.240 --> 00:14:20.460
Those lines will exclude ones while excluding in case If you want to you this variable,

347
00:14:20.460 --> 00:14:21.070
you can use it.

348
00:14:21.070 --> 00:14:26.390
Otherwise no problem As off no pre print statements forced to print statement simply some

349
00:14:26.390 --> 00:14:31.000
string You're printing second Prince Chairman Your branding some variable value that value

350
00:14:31.000 --> 00:14:33.810
is nothing but the valley which is there currently in this variable.

351
00:14:33.810 --> 00:14:35.070
Then after that,

352
00:14:35.070 --> 00:14:35.950
we are getting our printing.

353
00:14:35.950 --> 00:14:38.980
This like No,

354
00:14:38.980 --> 00:14:40.460
let me write a different symbol.

355
00:14:40.460 --> 00:14:41.810
So that will be clear for you.

356
00:14:41.810 --> 00:14:44.700
No,

357
00:14:44.700 --> 00:14:48.850
like meat and you can see the output first time.

358
00:14:48.850 --> 00:14:53.620
Second time third time You are repeating your logic three times.

359
00:14:53.620 --> 00:14:54.750
This is for first time.

360
00:14:54.750 --> 00:14:56.360
This is for second time,

361
00:14:56.360 --> 00:15:03.260
and this is for third time while repeating while excluding this first time value.

362
00:15:03.260 --> 00:15:08.800
This variable is for and we're executing their That's why you're getting output as a four.

363
00:15:08.800 --> 00:15:09.720
No,

364
00:15:09.720 --> 00:15:13.230
I don't want to use this each variable inside off my loop.

365
00:15:13.230 --> 00:15:13.560
Yes,

366
00:15:13.560 --> 00:15:14.390
money to use that.

367
00:15:14.390 --> 00:15:15.180
It's not mannered.

368
00:15:15.180 --> 00:15:16.850
Repairs on requirement will use it.

369
00:15:16.850 --> 00:15:18.350
I am writing simply.

370
00:15:18.350 --> 00:15:23.240
This sees a generation anymore,

371
00:15:23.240 --> 00:15:24.250
says also I converted.

372
00:15:24.250 --> 00:15:27.610
Let me save it.

373
00:15:27.610 --> 00:15:32.180
Another the output I'm running while excluding first time.

374
00:15:32.180 --> 00:15:34.360
Three print statements high for iPhone,

375
00:15:34.360 --> 00:15:37.000
the his reiteration and then some lane.

376
00:15:37.000 --> 00:15:42.660
That is for each value for then second time five early.

377
00:15:42.660 --> 00:15:47.250
We defy you are repeating this sixth year reporting that that's why I'm getting three times

378
00:15:47.250 --> 00:15:47.250
.

379
00:15:47.250 --> 00:15:49.160
So this year not only take,

380
00:15:49.160 --> 00:15:50.600
I mean you can take any variable.

381
00:15:50.600 --> 00:15:52.530
Not only each value I can take simply excels.

382
00:15:52.530 --> 00:15:52.570
Oh,

383
00:15:52.570 --> 00:15:53.120
no problem.

384
00:15:53.120 --> 00:15:56.450
So don't put not sick.

385
00:15:56.450 --> 00:15:57.640
Okay,

386
00:15:57.640 --> 00:16:00.150
so this is called simply were for Luke.

387
00:16:00.150 --> 00:16:01.820
So finally,

388
00:16:01.820 --> 00:16:08.910
you have to understand that this for loop is useful to repeat some block off corps or some

389
00:16:08.910 --> 00:16:13.950
sort off lines based on your requirement How many times you want to repeat?

390
00:16:13.950 --> 00:16:18.250
So that is decided by the value which you're providing here.

391
00:16:18.250 --> 00:16:19.850
Not only list.

392
00:16:19.850 --> 00:16:21.500
You can take some other things as well.

393
00:16:21.500 --> 00:16:22.250
I will show you that.

394
00:16:22.250 --> 00:16:23.370
Right?

395
00:16:23.370 --> 00:16:24.450
Fine.

396
00:16:24.450 --> 00:16:28.390
So why look for useful guys?

397
00:16:28.390 --> 00:16:30.160
So,

398
00:16:30.160 --> 00:16:31.620
in all programming languages,

399
00:16:31.620 --> 00:16:37.920
we have a requirement to exclude some block off court number off times many times so that

400
00:16:37.920 --> 00:16:39.410
we were using loops concepts,

401
00:16:39.410 --> 00:16:40.880
no invite on.

402
00:16:40.880 --> 00:16:43.140
We have two types off loops for Lupin.

403
00:16:43.140 --> 00:16:43.490
Well,

404
00:16:43.490 --> 00:16:46.020
you okay?

405
00:16:46.020 --> 00:16:46.330
No,

406
00:16:46.330 --> 00:16:46.960
for Luke,

407
00:16:46.960 --> 00:16:49.960
for Lupin by Tunney's usedto it great.

408
00:16:49.960 --> 00:16:58.250
Our execute many number of times over a sequence that sequence maybe a list or topple

409
00:16:58.250 --> 00:17:03.250
lasting or any other terrible objects as off.

410
00:17:03.250 --> 00:17:03.450
No,

411
00:17:03.450 --> 00:17:05.950
don't worry about the terrible objects.

412
00:17:05.950 --> 00:17:13.430
You're going to repeat some block off court using loop on while repeating.

413
00:17:13.430 --> 00:17:13.970
See,

414
00:17:13.970 --> 00:17:15.660
previously we use somewhere here list,

415
00:17:15.660 --> 00:17:15.950
right?

416
00:17:15.950 --> 00:17:19.790
Not only list You can also provide a list.

417
00:17:19.790 --> 00:17:21.700
Couple are a string.

418
00:17:21.700 --> 00:17:26.020
Let me show you that this is using list,

419
00:17:26.020 --> 00:17:26.350
right?

420
00:17:26.350 --> 00:17:27.920
I can also use,

421
00:17:27.920 --> 00:17:28.560
you know,

422
00:17:28.560 --> 00:17:30.070
loop a couple also.

423
00:17:30.070 --> 00:17:41.230
No problem that we do that now with help off couple four value in this is a variable gaze.

424
00:17:41.230 --> 00:17:45.240
You can take anything based on your requirement in your topple.

425
00:17:45.240 --> 00:17:46.100
Let me write charity.

426
00:17:46.100 --> 00:17:51.450
My couple 456 Then come on high.

427
00:17:51.450 --> 00:17:53.850
Know how many values are there in your temple?

428
00:17:53.850 --> 00:17:55.790
Four values.

429
00:17:55.790 --> 00:17:56.740
This is a string,

430
00:17:56.740 --> 00:18:00.350
but this string is the one value for the work Couple four values.

431
00:18:00.350 --> 00:18:01.990
But no,

432
00:18:01.990 --> 00:18:10.360
simply I'm writing print high are simply I'm reading this equal Then because off your loo

433
00:18:10.360 --> 00:18:13.080
for Luke you are repeating this line.

434
00:18:13.080 --> 00:18:14.480
You're printing this line.

435
00:18:14.480 --> 00:18:15.850
You're repeating this line.

436
00:18:15.850 --> 00:18:17.620
How many miles you have?

437
00:18:17.620 --> 00:18:18.400
Four values.

438
00:18:18.400 --> 00:18:19.960
So four times you're going toe.

439
00:18:19.960 --> 00:18:22.490
Exclude this line again and again immediately.

440
00:18:22.490 --> 00:18:28.720
No seat output four times you're getting but why excluding the block,

441
00:18:28.720 --> 00:18:31.220
which is there under your loop at that time?

442
00:18:31.220 --> 00:18:35.000
In case if you need a variable value off value,

443
00:18:35.000 --> 00:18:35.760
you can use it.

444
00:18:35.760 --> 00:18:36.510
No.

445
00:18:36.510 --> 00:18:38.800
See that not to.

446
00:18:38.800 --> 00:18:42.260
So whether you want to use your variable,

447
00:18:42.260 --> 00:18:44.580
whatever you hear that variable,

448
00:18:44.580 --> 00:18:46.050
you can use it or you can skip it,

449
00:18:46.050 --> 00:18:47.850
right?

450
00:18:47.850 --> 00:18:49.060
No.

451
00:18:49.060 --> 00:18:50.550
Let me do one simple example.

452
00:18:50.550 --> 00:18:53.870
Imagine that.

453
00:18:53.870 --> 00:18:54.280
Yeah.

454
00:18:54.280 --> 00:18:54.860
Before,

455
00:18:54.860 --> 00:18:57.620
before going toe that example I will take one more thing.

456
00:18:57.620 --> 00:18:58.200
String.

457
00:18:58.200 --> 00:18:59.240
As of now,

458
00:18:59.240 --> 00:19:01.500
we worked with the list of top will then let with extreme.

459
00:19:01.500 --> 00:19:03.490
After that,

460
00:19:03.490 --> 00:19:12.510
I will go with one example for let me take you for each character in Let me take fight on

461
00:19:12.510 --> 00:19:16.830
scripting space is also your string right then,

462
00:19:16.830 --> 00:19:17.350
Colon.

463
00:19:17.350 --> 00:19:21.710
Then what I'm doing is print each character are.

464
00:19:21.710 --> 00:19:23.160
If you don't want to do that,

465
00:19:23.160 --> 00:19:28.450
let me simply simply fight on.

466
00:19:28.450 --> 00:19:29.260
Okay,

467
00:19:29.260 --> 00:19:30.950
then simply print.

468
00:19:30.950 --> 00:19:32.990
I'm bringing hyphens.

469
00:19:32.990 --> 00:19:34.450
So no,

470
00:19:34.450 --> 00:19:39.810
you are going to repeat this line based on how many characters are there.

471
00:19:39.810 --> 00:19:40.660
Niggle string.

472
00:19:40.660 --> 00:19:42.780
So how it is going to rip?

473
00:19:42.780 --> 00:19:47.670
It means immediately whenever If you run your pipe landscape because this is a loop for

474
00:19:47.670 --> 00:19:49.980
your partner will take first a character from here.

475
00:19:49.980 --> 00:19:50.750
If it is a list,

476
00:19:50.750 --> 00:19:52.660
it will take first of value from your list.

477
00:19:52.660 --> 00:19:53.980
Or if it is a trouble,

478
00:19:53.980 --> 00:19:55.810
it will take first value from your trouble.

479
00:19:55.810 --> 00:19:57.200
But now this is a string,

480
00:19:57.200 --> 00:19:59.180
so it will take First.

481
00:19:59.180 --> 00:20:05.080
The character automatically on that character will store into this variable after storing

482
00:20:05.080 --> 00:20:07.110
that whatever the logic,

483
00:20:07.110 --> 00:20:08.040
whatever that block,

484
00:20:08.040 --> 00:20:09.410
what are the lines you have under?

485
00:20:09.410 --> 00:20:10.020
They were Luke.

486
00:20:10.020 --> 00:20:13.830
Those lines will exclude ones while executing.

487
00:20:13.830 --> 00:20:15.300
If you want to use this variable,

488
00:20:15.300 --> 00:20:15.900
you can use it.

489
00:20:15.900 --> 00:20:18.310
Otherwise you can skip it as off.

490
00:20:18.310 --> 00:20:18.470
No,

491
00:20:18.470 --> 00:20:20.050
I am not using simply what I'm doing.

492
00:20:20.050 --> 00:20:21.250
See that?

493
00:20:21.250 --> 00:20:22.270
Put your getting hyphens.

494
00:20:22.270 --> 00:20:22.900
How many times?

495
00:20:22.900 --> 00:20:23.440
Six time?

496
00:20:23.440 --> 00:20:27.980
Because you're six characters Know what I'm doing is along with your high funds.

497
00:20:27.980 --> 00:20:29.100
I'm also going toe.

498
00:20:29.100 --> 00:20:33.610
Bring the characters which is stored in your each character.

499
00:20:33.610 --> 00:20:34.250
Variable.

500
00:20:34.250 --> 00:20:34.490
No,

501
00:20:34.490 --> 00:20:42.140
citizen B Y t hatchway In the first time you're fighting is taking letter p character p and

502
00:20:42.140 --> 00:20:43.450
it is storing into this variable.

503
00:20:43.450 --> 00:20:46.000
After storing into this variable,

504
00:20:46.000 --> 00:20:50.220
this line will execute once frustration.

505
00:20:50.220 --> 00:20:51.610
This is called foster situation.

506
00:20:51.610 --> 00:20:52.080
Then,

507
00:20:52.080 --> 00:20:52.650
because of that,

508
00:20:52.650 --> 00:20:53.330
you're getting hyphen,

509
00:20:53.330 --> 00:20:54.230
hyphen and MP.

510
00:20:54.230 --> 00:20:56.250
Then fighting will immediately Go on,

511
00:20:56.250 --> 00:20:57.680
take next to character.

512
00:20:57.680 --> 00:20:58.160
Why?

513
00:20:58.160 --> 00:21:01.820
Then why is going to start into this variable after that year by them?

514
00:21:01.820 --> 00:21:03.110
Let's could this land once?

515
00:21:03.110 --> 00:21:05.590
So why excluding?

516
00:21:05.590 --> 00:21:10.330
Now you're printing this variable currently the value which is there in your each car

517
00:21:10.330 --> 00:21:11.340
preventable is white,

518
00:21:11.340 --> 00:21:12.350
That's where getting white.

519
00:21:12.350 --> 00:21:13.520
Likewise,

520
00:21:13.520 --> 00:21:14.610
it goto opinion,

521
00:21:14.610 --> 00:21:15.450
right?

522
00:21:15.450 --> 00:21:18.850
As in that you just know printed am I mean with help off your Luke.

523
00:21:18.850 --> 00:21:20.210
Offer that again.

524
00:21:20.210 --> 00:21:23.320
Your pattern will try to get next character from your string.

525
00:21:23.320 --> 00:21:24.680
But you don't have anything.

526
00:21:24.680 --> 00:21:26.160
All characters are over.

527
00:21:26.160 --> 00:21:27.300
That's why you put.

528
00:21:27.300 --> 00:21:28.450
Then we come back.

529
00:21:28.450 --> 00:21:32.420
Come out from your low on after loop If you have any lines,

530
00:21:32.420 --> 00:21:33.660
those lines will excuse,

531
00:21:33.660 --> 00:21:36.050
right?

532
00:21:36.050 --> 00:21:37.660
Nothing.

533
00:21:37.660 --> 00:21:41.110
So days print the statement I want to repeat.

534
00:21:41.110 --> 00:21:43.850
That's why that line should be there under this for Luke.

535
00:21:43.850 --> 00:21:46.050
That's why I'm providing some space.

536
00:21:46.050 --> 00:21:49.950
Suppose if I write one more line drink.

537
00:21:49.950 --> 00:21:55.160
We are working with loops.

538
00:21:55.160 --> 00:21:56.090
No,

539
00:21:56.090 --> 00:22:02.350
see that this line will exclude only once when it is going to exclude that one time is

540
00:22:02.350 --> 00:22:08.280
offer completely excursion off your loop because this print statement is outside of your

541
00:22:08.280 --> 00:22:08.510
look.

542
00:22:08.510 --> 00:22:10.410
There is no relation between this line.

543
00:22:10.410 --> 00:22:11.310
And you're far,

544
00:22:11.310 --> 00:22:11.550
Lou.

545
00:22:11.550 --> 00:22:17.060
So in case if you have a relation between this for lope on this line,

546
00:22:17.060 --> 00:22:19.450
this line should be there inside off your loop.

547
00:22:19.450 --> 00:22:22.840
If you want to write this last line inside off your loop,

548
00:22:22.840 --> 00:22:27.040
you have to provide some space on the lines which are there under your loop.

549
00:22:27.040 --> 00:22:29.160
Should house same space for each and every line.

550
00:22:29.160 --> 00:22:30.340
First,

551
00:22:30.340 --> 00:22:31.660
let me run it and see the output.

552
00:22:31.660 --> 00:22:37.780
So these last linear getting only once because that is the not depart off your loop.

553
00:22:37.780 --> 00:22:39.010
It is outside off your look,

554
00:22:39.010 --> 00:22:42.050
only the lines which are there under your loop.

555
00:22:42.050 --> 00:22:45.240
Those lines will execute right now.

556
00:22:45.240 --> 00:22:49.920
I wondered that line also inside off my look then right here for all your lines.

557
00:22:49.920 --> 00:22:51.050
Same space,

558
00:22:51.050 --> 00:22:52.730
right?

559
00:22:52.730 --> 00:22:55.350
So that these two lines are there now under the would look.

560
00:22:55.350 --> 00:23:02.080
Now you're Luke will repeat these two lines based on how many characters you in your string

561
00:23:02.080 --> 00:23:02.080
.

562
00:23:02.080 --> 00:23:03.470
So six characters.

563
00:23:03.470 --> 00:23:03.840
Now,

564
00:23:03.840 --> 00:23:06.820
these two lines we are going to repeat six times.

565
00:23:06.820 --> 00:23:07.950
See that?

566
00:23:07.950 --> 00:23:09.270
That's it,

567
00:23:09.270 --> 00:23:12.450
right?

568
00:23:12.450 --> 00:23:13.800
Fine.

569
00:23:13.800 --> 00:23:15.910
No.

570
00:23:15.910 --> 00:23:17.640
Let me go with one simple example.

571
00:23:17.640 --> 00:23:22.350
As off No June dark.

572
00:23:22.350 --> 00:23:26.940
I have a A list which consist off some values.

573
00:23:26.940 --> 00:23:27.410
Otherwise,

574
00:23:27.410 --> 00:23:28.190
you can also really,

575
00:23:28.190 --> 00:23:28.520
What list?

576
00:23:28.520 --> 00:23:29.490
From your command line.

577
00:23:29.490 --> 00:23:30.190
Right.

578
00:23:30.190 --> 00:23:31.520
Using your level input.

579
00:23:31.520 --> 00:23:32.400
Enter your list off.

580
00:23:32.400 --> 00:23:32.660
Alice.

581
00:23:32.660 --> 00:23:33.690
You contribute as off.

582
00:23:33.690 --> 00:23:33.820
No,

583
00:23:33.820 --> 00:23:34.850
I'm taking my list.

584
00:23:34.850 --> 00:23:37.760
I don't know what of the values are there in my list.

585
00:23:37.760 --> 00:23:41.070
Okay.

586
00:23:41.070 --> 00:23:42.420
Maybe any number of values?

587
00:23:42.420 --> 00:23:43.830
No.

588
00:23:43.830 --> 00:23:44.640
My requirement.

589
00:23:44.640 --> 00:23:45.050
These.

590
00:23:45.050 --> 00:23:53.660
I want to brink all the values from your loop from your list.

591
00:23:53.660 --> 00:23:54.800
But first,

592
00:23:54.800 --> 00:23:58.850
let me print that for each in your my list.

593
00:23:58.850 --> 00:24:04.050
Then let me print each right?

594
00:24:04.050 --> 00:24:05.140
Yes,

595
00:24:05.140 --> 00:24:05.760
I'm printing.

596
00:24:05.760 --> 00:24:08.220
Now I'm able to get one by one value,

597
00:24:08.220 --> 00:24:10.350
but before printing,

598
00:24:10.350 --> 00:24:14.160
I want to decide whether it is a even number or number.

599
00:24:14.160 --> 00:24:15.870
If it is even number,

600
00:24:15.870 --> 00:24:17.230
I want to print your number.

601
00:24:17.230 --> 00:24:19.690
Then even if it is our number,

602
00:24:19.690 --> 00:24:22.930
I want to print your number and then are right.

603
00:24:22.930 --> 00:24:25.980
So that's why what I'm doing is before printing.

604
00:24:25.980 --> 00:24:36.680
I am finding remainder reminder with two so each percentile to and you've reminder value if

605
00:24:36.680 --> 00:24:37.140
it is equal.

606
00:24:37.140 --> 00:24:40.860
So you know I can say that That is a even number Now,

607
00:24:40.860 --> 00:24:41.130
guys,

608
00:24:41.130 --> 00:24:42.690
disciplined these under your youth.

609
00:24:42.690 --> 00:24:46.440
Be clear If this condition is satisfied,

610
00:24:46.440 --> 00:24:47.920
then only I want to print this line.

611
00:24:47.920 --> 00:24:52.170
That's why I'm writing this line under You were if condition.

612
00:24:52.170 --> 00:24:52.650
So.

613
00:24:52.650 --> 00:24:53.650
If it is Jiro,

614
00:24:53.650 --> 00:24:56.930
then then I want to write hyphen iPhone.

615
00:24:56.930 --> 00:24:57.890
Let Mary deaf string.

616
00:24:57.890 --> 00:24:58.490
That's better.

617
00:24:58.490 --> 00:25:01.850
So whatever the variable you have,

618
00:25:01.850 --> 00:25:11.270
each he's even Nothing is else means Reminder is not in question zero.

619
00:25:11.270 --> 00:25:19.020
Then I can say you are Number then is our simple example.

620
00:25:19.020 --> 00:25:20.050
But it is useful.

621
00:25:20.050 --> 00:25:24.160
Why means I'm writing number off lines inside off your loop.

622
00:25:24.160 --> 00:25:29.490
Now all these lines are going to repeat based on how many violence you have in your list as

623
00:25:29.490 --> 00:25:29.630
off.

624
00:25:29.630 --> 00:25:29.800
No,

625
00:25:29.800 --> 00:25:30.510
this is a list.

626
00:25:30.510 --> 00:25:33.450
It may be a list or string bought couple.

627
00:25:33.450 --> 00:25:36.360
For time being No.

628
00:25:36.360 --> 00:25:36.470
One,

629
00:25:36.470 --> 00:25:40.120
you can see the output Frieze Art 47 30 47.

630
00:25:40.120 --> 00:25:40.400
Yes,

631
00:25:40.400 --> 00:25:41.450
it's working perfectly.

632
00:25:41.450 --> 00:25:42.450
Right?

633
00:25:42.450 --> 00:25:49.490
They try to understand this loop concept by practicing again and again.

634
00:25:49.490 --> 00:25:50.350
Same court.

635
00:25:50.350 --> 00:25:51.500
See,

636
00:25:51.500 --> 00:25:54.490
while writing your toe Think what we are doing.

637
00:25:54.490 --> 00:25:55.160
What is that?

638
00:25:55.160 --> 00:25:58.740
Step Your loop is performing right?

639
00:25:58.740 --> 00:26:00.590
If you are able to think about it,

640
00:26:00.590 --> 00:26:02.100
then you can easily understand your look.

641
00:26:02.100 --> 00:26:04.720
Seeing your real time loops are very,

642
00:26:04.720 --> 00:26:05.450
very important,

643
00:26:05.450 --> 00:26:07.090
right?

644
00:26:07.090 --> 00:26:07.360
So well,

645
00:26:07.360 --> 00:26:10.050
you know you're going to write some 100 lines off for some script.

646
00:26:10.050 --> 00:26:14.440
So if you're going to write some 100 lines are 200 lines off by transcript,

647
00:26:14.440 --> 00:26:17.160
then definitely are going to use if conditions and loops.

648
00:26:17.160 --> 00:26:19.390
Max.

649
00:26:19.390 --> 00:26:20.450
Okay.

650
00:26:20.450 --> 00:26:22.240
Okay.

651
00:26:22.240 --> 00:26:24.260
Thank you for watching this video on.

652
00:26:24.260 --> 00:26:26.180
One more thing is we have a loop as well,

653
00:26:26.180 --> 00:26:27.550
but this will discuss later.

654
00:26:27.550 --> 00:26:28.380
So,

655
00:26:28.380 --> 00:26:28.770
actually,

656
00:26:28.770 --> 00:26:29.000
why?

657
00:26:29.000 --> 00:26:33.590
Loop is used to exclude a block off statements repeatedly until a given condition is

658
00:26:33.590 --> 00:26:34.190
satisfied.

659
00:26:34.190 --> 00:26:36.090
As I don't Don't go with your while.

660
00:26:36.090 --> 00:26:38.370
You just think I would look for low,

661
00:26:38.370 --> 00:26:39.630
Okay.

662
00:26:39.630 --> 00:26:41.660
And we'll discuss award your while loop later.

663
00:26:41.660 --> 00:26:44.030
Okay.

664
00:26:44.030 --> 00:26:44.470
Thank you.

665
00:26:44.470 --> 00:26:45.050
Bye.

