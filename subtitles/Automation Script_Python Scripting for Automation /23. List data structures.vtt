WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.170
friends here.

2
00:00:04.170 --> 00:00:08.750
We're going to discuss the very first a data structure off your python that is listed data

3
00:00:08.750 --> 00:00:09.250
structure.

4
00:00:09.250 --> 00:00:10.810
So first,

5
00:00:10.810 --> 00:00:14.250
let me weapon my note pad and I will show you how to define a list.

6
00:00:14.250 --> 00:00:15.720
So,

7
00:00:15.720 --> 00:00:16.140
guys,

8
00:00:16.140 --> 00:00:19.620
any nickname you can take simply I'm taking my list.

9
00:00:19.620 --> 00:00:20.350
Icos Two.

10
00:00:20.350 --> 00:00:22.170
This one.

11
00:00:22.170 --> 00:00:23.390
This is an empty list.

12
00:00:23.390 --> 00:00:26.500
So if you want to create any list with some values,

13
00:00:26.500 --> 00:00:26.810
right,

14
00:00:26.810 --> 00:00:27.940
let me take my listo.

15
00:00:27.940 --> 00:00:37.550
One equals two so you can provide any type of data night?

16
00:00:37.550 --> 00:00:39.620
No.

17
00:00:39.620 --> 00:00:43.100
So this is the way how you can be finalised,

18
00:00:43.100 --> 00:00:45.340
I guess the very first thing,

19
00:00:45.340 --> 00:00:46.110
your real time.

20
00:00:46.110 --> 00:00:46.590
I mean,

21
00:00:46.590 --> 00:00:50.340
a very important point in your real time from list is sometimes you need to come what you

22
00:00:50.340 --> 00:00:52.210
were listing to bullion.

23
00:00:52.210 --> 00:00:53.120
All right,

24
00:00:53.120 --> 00:00:55.990
you cannot gone already ordered I and do some indeed,

25
00:00:55.990 --> 00:00:57.840
your floor tar string or complex,

26
00:00:57.840 --> 00:01:01.350
Because lister data structure is the combination of data,

27
00:01:01.350 --> 00:01:03.700
right?

28
00:01:03.700 --> 00:01:04.750
Fine.

29
00:01:04.750 --> 00:01:05.510
Now,

30
00:01:05.510 --> 00:01:09.500
in case if I convert our daytime too bullion,

31
00:01:09.500 --> 00:01:10.150
what will happen?

32
00:01:10.150 --> 00:01:11.190
Right?

33
00:01:11.190 --> 00:01:12.380
So for that,

34
00:01:12.380 --> 00:01:15.310
let me take Let me open my command line off.

35
00:01:15.310 --> 00:01:15.950
Fight on,

36
00:01:15.950 --> 00:01:20.140
right?

37
00:01:20.140 --> 00:01:21.400
Simply let me copy.

38
00:01:21.400 --> 00:01:23.740
This has one listener.

39
00:01:23.740 --> 00:01:25.100
This is empty list.

40
00:01:25.100 --> 00:01:25.840
Be clear.

41
00:01:25.840 --> 00:01:26.650
Embry list.

42
00:01:26.650 --> 00:01:36.740
So if I try to convert them the list right Indo 1,000,000,000 see that false?

43
00:01:36.740 --> 00:01:37.490
This is very,

44
00:01:37.490 --> 00:01:38.260
very important.

45
00:01:38.260 --> 00:01:40.780
Empty if anything is empty.

46
00:01:40.780 --> 00:01:42.080
If you convert into bullion,

47
00:01:42.080 --> 00:01:43.050
that is false.

48
00:01:43.050 --> 00:01:44.940
No engine off empty.

49
00:01:44.940 --> 00:01:50.510
Let's see some random data state Any data never died broken what you'll get it through.

50
00:01:50.510 --> 00:01:52.270
So these two points are very,

51
00:01:52.270 --> 00:01:53.050
very important.

52
00:01:53.050 --> 00:01:54.050
Okay,

53
00:01:54.050 --> 00:01:59.450
so m bullion off empty list.

54
00:01:59.450 --> 00:02:07.350
He's It was too false.

55
00:02:07.350 --> 00:02:17.080
Bullion off non empty list it closed toe through.

56
00:02:17.080 --> 00:02:18.730
It's very useful case.

57
00:02:18.730 --> 00:02:19.790
No real time This.

58
00:02:19.790 --> 00:02:26.620
Okay,

59
00:02:26.620 --> 00:02:27.050
fine.

60
00:02:27.050 --> 00:02:28.950
No ways.

61
00:02:28.950 --> 00:02:40.190
So you know the string operations with the index values or based on index values in your

62
00:02:40.190 --> 00:02:40.750
string,

63
00:02:40.750 --> 00:02:46.980
you are taking your displaying particular character from your string.

64
00:02:46.980 --> 00:02:53.120
Let's say how they were to call Hello already We know this just I'm recollecting that

65
00:02:53.120 --> 00:02:53.600
concert.

66
00:02:53.600 --> 00:02:54.050
Hello.

67
00:02:54.050 --> 00:02:57.240
So once If you define your string in this way,

68
00:02:57.240 --> 00:02:57.890
what will happen?

69
00:02:57.890 --> 00:03:05.030
Your python will assign the index value for hatches Jiro the yeas for one second ELT Auriol

70
00:03:05.030 --> 00:03:06.700
and then fourth.

71
00:03:06.700 --> 00:03:07.150
Right?

72
00:03:07.150 --> 00:03:14.400
So filers are there Geritol Four indexes are there in a positive way are in the 90 way

73
00:03:14.400 --> 00:03:19.140
minus one minus two minus three minus four under,

74
00:03:19.140 --> 00:03:23.050
then minus white So you can go with the negative are positive,

75
00:03:23.050 --> 00:03:24.840
Right?

76
00:03:24.840 --> 00:03:30.050
So these are the index values for your strings the same way when number if you define a

77
00:03:30.050 --> 00:03:32.530
list for list awful,

78
00:03:32.530 --> 00:03:34.820
is also python will assign some index values.

79
00:03:34.820 --> 00:03:38.210
Let's say this is your list,

80
00:03:38.210 --> 00:03:38.590
then.

81
00:03:38.590 --> 00:03:40.150
Three That index Jiro,

82
00:03:40.150 --> 00:03:41.660
who is that?

83
00:03:41.660 --> 00:03:46.150
Index one four is an index three started to this entire thing.

84
00:03:46.150 --> 00:03:51.950
Is one data in your list the seas that index three and they see that index of four,

85
00:03:51.950 --> 00:03:54.310
right?

86
00:03:54.310 --> 00:03:55.350
I really one thing.

87
00:03:55.350 --> 00:03:57.660
Even when they do,

88
00:03:57.660 --> 00:03:58.220
they also.

89
00:03:58.220 --> 00:03:59.850
So this is a minus one.

90
00:03:59.850 --> 00:04:07.800
They say that minus two four is a minus three who is at minus four and then five years at

91
00:04:07.800 --> 00:04:08.550
minus fight,

92
00:04:08.550 --> 00:04:12.410
I would take I would write a simple by town skip toe,

93
00:04:12.410 --> 00:04:17.320
Give the clarity on this saw list with index operations.

94
00:04:17.320 --> 00:04:19.310
Let me open my sublime text.

95
00:04:19.310 --> 00:04:37.980
So I'm taking this as my working with a list find after the first thing how to print a word

96
00:04:37.980 --> 00:04:38.450
list.

97
00:04:38.450 --> 00:04:43.140
So I'm going to print my list and I want to see type off.

98
00:04:43.140 --> 00:04:44.660
You are data structure anyone?

99
00:04:44.660 --> 00:04:46.450
We know that there is a list of data structure,

100
00:04:46.450 --> 00:04:47.820
but through bite on,

101
00:04:47.820 --> 00:04:50.920
you can find that to that.

102
00:04:50.920 --> 00:04:56.850
You're getting class as a list night.

103
00:04:56.850 --> 00:04:58.250
Fine.

104
00:04:58.250 --> 00:05:00.080
Now let me come in This.

105
00:05:00.080 --> 00:05:01.980
So,

106
00:05:01.980 --> 00:05:02.340
guys,

107
00:05:02.340 --> 00:05:08.150
we're saying that by Tony's are signing some index values for the world list off values.

108
00:05:08.150 --> 00:05:10.390
So very first values.

109
00:05:10.390 --> 00:05:11.890
Three threes that index way.

110
00:05:11.890 --> 00:05:15.450
Shinjiro know if I want to print very first value from your list.

111
00:05:15.450 --> 00:05:18.120
What if I want to take first value from your list?

112
00:05:18.120 --> 00:05:21.680
I have to take the next geo right.

113
00:05:21.680 --> 00:05:22.090
See,

114
00:05:22.090 --> 00:05:25.020
that would put 40 or getting three.

115
00:05:25.020 --> 00:05:26.170
Then I want to get suppose,

116
00:05:26.170 --> 00:05:26.500
um,

117
00:05:26.500 --> 00:05:27.280
fight on.

118
00:05:27.280 --> 00:05:28.750
I want to display this output.

119
00:05:28.750 --> 00:05:30.500
So python,

120
00:05:30.500 --> 00:05:31.350
is it?

121
00:05:31.350 --> 00:05:35.960
12 3/4 value for two elements indexes three.

122
00:05:35.960 --> 00:05:36.480
Because,

123
00:05:36.480 --> 00:05:36.880
you know,

124
00:05:36.880 --> 00:05:38.430
in lecture starts from Joe,

125
00:05:38.430 --> 00:05:39.630
this is Jiro,

126
00:05:39.630 --> 00:05:43.850
who is one four days after two on fight on his r three.

127
00:05:43.850 --> 00:05:50.430
Right now I want to get fourth.

128
00:05:50.430 --> 00:05:52.550
The value means indexes Three.

129
00:05:52.550 --> 00:05:54.720
Yes,

130
00:05:54.720 --> 00:05:55.580
you are getting on.

131
00:05:55.580 --> 00:06:00.380
This is the way how you can get your particular value from your list based on positive

132
00:06:00.380 --> 00:06:01.250
index values.

133
00:06:01.250 --> 00:06:02.300
Of course,

134
00:06:02.300 --> 00:06:03.410
you can also use negative.

135
00:06:03.410 --> 00:06:08.250
Let me take brain my list off minus one.

136
00:06:08.250 --> 00:06:08.940
You know,

137
00:06:08.940 --> 00:06:10.820
minus one means biting for last value.

138
00:06:10.820 --> 00:06:11.910
It may be string,

139
00:06:11.910 --> 00:06:14.080
or it may be list while going for it.

140
00:06:14.080 --> 00:06:18.650
Maybe a couple also see that.

141
00:06:18.650 --> 00:06:26.050
Or let's say I want to get from last second value I want to get.

142
00:06:26.050 --> 00:06:28.910
That means index values minus two.

143
00:06:28.910 --> 00:06:30.590
You for take minus two.

144
00:06:30.590 --> 00:06:34.750
You will get lot from last second value.

145
00:06:34.750 --> 00:06:35.850
That's it.

146
00:06:35.850 --> 00:06:37.740
Right Now,

147
00:06:37.740 --> 00:06:39.550
let me commend all this.

148
00:06:39.550 --> 00:06:49.490
So this is the way how you can access the world list off values based on index on one more

149
00:06:49.490 --> 00:06:49.850
thing.

150
00:06:49.850 --> 00:06:52.590
See you as have no you fired Lundy's.

151
00:06:52.590 --> 00:06:54.180
Maybe with minus two.

152
00:06:54.180 --> 00:06:55.580
Or I can take this also.

153
00:06:55.580 --> 00:06:56.250
No problem.

154
00:06:56.250 --> 00:06:59.820
What will you send?

155
00:06:59.820 --> 00:07:00.130
Result?

156
00:07:00.130 --> 00:07:00.480
Right,

157
00:07:00.480 --> 00:07:01.760
Because in positive,

158
00:07:01.760 --> 00:07:05.650
your python indexes three in negative indexes minus two.

159
00:07:05.650 --> 00:07:06.700
Right.

160
00:07:06.700 --> 00:07:07.770
You can take anything.

161
00:07:07.770 --> 00:07:08.630
No bottom I'm doing.

162
00:07:08.630 --> 00:07:12.450
Some would pause to next and see the airport body or getting fight on.

163
00:07:12.450 --> 00:07:13.820
No,

164
00:07:13.820 --> 00:07:16.950
guys in guest if I ask Right there.

165
00:07:16.950 --> 00:07:21.750
Soon Bags to get from your list.

166
00:07:21.750 --> 00:07:26.550
This data on in that I want to display only violator.

167
00:07:26.550 --> 00:07:30.380
If I write something that has a display only way.

168
00:07:30.380 --> 00:07:32.680
So first of all.

169
00:07:32.680 --> 00:07:35.570
You have to get this data to get that dead.

170
00:07:35.570 --> 00:07:35.820
Already.

171
00:07:35.820 --> 00:07:39.350
We have a syntax on that is a string in string ways.

172
00:07:39.350 --> 00:07:41.090
Second in the airport,

173
00:07:41.090 --> 00:07:42.250
just after this output?

174
00:07:42.250 --> 00:07:43.090
No,

175
00:07:43.090 --> 00:07:46.380
because off this you're getting this or put in this or port.

176
00:07:46.380 --> 00:07:47.250
Why is that?

177
00:07:47.250 --> 00:07:50.640
Second ablation means indexes one.

178
00:07:50.640 --> 00:07:50.950
No,

179
00:07:50.950 --> 00:07:51.750
no.

180
00:07:51.750 --> 00:07:55.850
See that what I'm doing and see what you're getting by doing this,

181
00:07:55.850 --> 00:08:02.210
we're getting letter white because that is a string against things we can access with both

182
00:08:02.210 --> 00:08:03.150
index values,

183
00:08:03.150 --> 00:08:04.590
right?

184
00:08:04.590 --> 00:08:05.110
Yes.

185
00:08:05.110 --> 00:08:07.250
We just try to practice in the history also.

186
00:08:07.250 --> 00:08:11.540
Then you know,

187
00:08:11.540 --> 00:08:14.570
you never list,

188
00:08:14.570 --> 00:08:14.950
right?

189
00:08:14.950 --> 00:08:16.650
I'm in strings.

190
00:08:16.650 --> 00:08:18.440
If I read something like this,

191
00:08:18.440 --> 00:08:21.700
what is the meaning of this one day?

192
00:08:21.700 --> 00:08:24.250
I want to get from starting to anything.

193
00:08:24.250 --> 00:08:25.670
This is the way,

194
00:08:25.670 --> 00:08:28.350
are simply cannot simply my list also will work.

195
00:08:28.350 --> 00:08:31.250
This also will go your entire list.

196
00:08:31.250 --> 00:08:40.780
But if I want to print something like first index to last one Colon now you will get to

197
00:08:40.780 --> 00:08:41.140
four.

198
00:08:41.140 --> 00:08:41.890
Bite on fine art.

199
00:08:41.890 --> 00:08:42.250
Six.

200
00:08:42.250 --> 00:08:43.760
Because we're mentioning one.

201
00:08:43.760 --> 00:08:47.270
No one means Index one index wanted nothing but to data to four.

202
00:08:47.270 --> 00:08:48.800
Fight on fight at 60 will get.

203
00:08:48.800 --> 00:08:53.250
See that put right.

204
00:08:53.250 --> 00:08:55.650
I want to get from here over the last,

205
00:08:55.650 --> 00:08:57.250
same as you were.

206
00:08:57.250 --> 00:08:59.640
So guys,

207
00:08:59.640 --> 00:09:05.800
distant packs or regulate all this center access because I always give same visit.

208
00:09:05.800 --> 00:09:08.200
This will be helpful for your online exams.

209
00:09:08.200 --> 00:09:15.350
My list or print my list calling.

210
00:09:15.350 --> 00:09:16.690
See,

211
00:09:16.690 --> 00:09:18.350
on the results are seen.

212
00:09:18.350 --> 00:09:20.160
So if you want a printed list,

213
00:09:20.160 --> 00:09:23.770
you can follow anyone of this not fine.

214
00:09:23.770 --> 00:09:26.010
Know what my intention is?

215
00:09:26.010 --> 00:09:29.430
I want to print to something like,

216
00:09:29.430 --> 00:09:29.790
you know,

217
00:09:29.790 --> 00:09:35.270
first index to only three more values.

218
00:09:35.270 --> 00:09:43.850
Print my list from first in next three more values than one place 34 Then you will get

219
00:09:43.850 --> 00:09:48.350
three more violence from one three values.

220
00:09:48.350 --> 00:09:50.500
So,

221
00:09:50.500 --> 00:09:50.730
guys,

222
00:09:50.730 --> 00:09:51.890
you can also consider like,

223
00:09:51.890 --> 00:09:53.360
four minus one means ranges.

224
00:09:53.360 --> 00:09:53.700
Three.

225
00:09:53.700 --> 00:09:54.810
You're getting three values.

226
00:09:54.810 --> 00:09:55.150
That's it.

227
00:09:55.150 --> 00:09:58.050
Okay,

228
00:09:58.050 --> 00:09:59.550
fine.

229
00:09:59.550 --> 00:10:00.150
No,

230
00:10:00.150 --> 00:10:01.450
this is all about Yeah,

231
00:10:01.450 --> 00:10:09.850
we have one more thing so that if I want to change a list off loose based on index,

232
00:10:09.850 --> 00:10:11.190
let's say as off No.

233
00:10:11.190 --> 00:10:13.750
In next Jiro value is three.

234
00:10:13.750 --> 00:10:18.500
But I want to make it as some other value than my list off Jiro,

235
00:10:18.500 --> 00:10:19.950
I'm writing some 45.

236
00:10:19.950 --> 00:10:21.750
See the output?

237
00:10:21.750 --> 00:10:23.300
Yeah,

238
00:10:23.300 --> 00:10:23.660
After that,

239
00:10:23.660 --> 00:10:24.300
I need to print it.

240
00:10:24.300 --> 00:10:24.580
No,

241
00:10:24.580 --> 00:10:25.450
let me print.

242
00:10:25.450 --> 00:10:28.630
Let me come in this line.

243
00:10:28.630 --> 00:10:29.570
Because if you print,

244
00:10:29.570 --> 00:10:31.010
then only you can see the modification.

245
00:10:31.010 --> 00:10:31.350
Right?

246
00:10:31.350 --> 00:10:36.380
So after your operation just tried to print your list and see the output while you're

247
00:10:36.380 --> 00:10:39.110
getting you were next zero value.

248
00:10:39.110 --> 00:10:42.410
You're modifying into 45 right?

249
00:10:42.410 --> 00:10:42.910
You're in.

250
00:10:42.910 --> 00:10:43.530
Next value.

251
00:10:43.530 --> 00:10:46.550
Your modifying into 45 right?

252
00:10:46.550 --> 00:10:54.880
Fine,

253
00:10:54.880 --> 00:10:57.720
No.

254
00:10:57.720 --> 00:11:02.590
Let me come into all these lines on one more thing,

255
00:11:02.590 --> 00:11:02.920
guys.

256
00:11:02.920 --> 00:11:04.640
Because off this data,

257
00:11:04.640 --> 00:11:06.330
I mean this syntax,

258
00:11:06.330 --> 00:11:08.950
you're able to modify your list value,

259
00:11:08.950 --> 00:11:10.200
right?

260
00:11:10.200 --> 00:11:11.590
You are able to modify it.

261
00:11:11.590 --> 00:11:17.100
Were list value that means lists or mutable.

262
00:11:17.100 --> 00:11:23.350
But any time you can change your list off while use part off your list,

263
00:11:23.350 --> 00:11:24.120
right?

264
00:11:24.120 --> 00:11:24.850
So this is very,

265
00:11:24.850 --> 00:11:25.550
very important.

266
00:11:25.550 --> 00:11:28.650
So let's or mutable.

267
00:11:28.650 --> 00:11:32.530
And once again,

268
00:11:32.530 --> 00:11:33.000
you know,

269
00:11:33.000 --> 00:11:33.820
string sore,

270
00:11:33.820 --> 00:11:34.930
immutable.

271
00:11:34.930 --> 00:11:35.230
Once,

272
00:11:35.230 --> 00:11:36.550
if we defend your string,

273
00:11:36.550 --> 00:11:39.700
you cannot take the part off your string.

274
00:11:39.700 --> 00:11:45.000
But see that you can change the part off your list because this operation is alone.

275
00:11:45.000 --> 00:11:45.160
No,

276
00:11:45.160 --> 00:11:47.250
that means you're changing some value in your list.

277
00:11:47.250 --> 00:11:49.150
So let's or mutable.

278
00:11:49.150 --> 00:11:50.750
Fine.

279
00:11:50.750 --> 00:11:52.850
So these are based on index days.

280
00:11:52.850 --> 00:11:54.650
All prisons on the list.

281
00:11:54.650 --> 00:11:58.050
Let me take some other operations.

282
00:11:58.050 --> 00:12:01.650
My list I'm taking,

283
00:12:01.650 --> 00:12:07.700
Let's say 345 something value I want to explain in a different way.

284
00:12:07.700 --> 00:12:09.550
Fine.

285
00:12:09.550 --> 00:12:11.350
No.

286
00:12:11.350 --> 00:12:13.480
First of all,

287
00:12:13.480 --> 00:12:15.430
what are the options available with your list?

288
00:12:15.430 --> 00:12:18.250
How you come to know that,

289
00:12:18.250 --> 00:12:19.440
right?

290
00:12:19.440 --> 00:12:23.170
Nothing is there Just to go to your common line fight on common line.

291
00:12:23.170 --> 00:12:24.540
Already we have in my list,

292
00:12:24.540 --> 00:12:24.830
right?

293
00:12:24.830 --> 00:12:25.090
Some.

294
00:12:25.090 --> 00:12:25.650
This is there.

295
00:12:25.650 --> 00:12:28.150
Simply load the air off your list.

296
00:12:28.150 --> 00:12:30.850
See,

297
00:12:30.850 --> 00:12:34.820
as these are your documentation purpose,

298
00:12:34.820 --> 00:12:38.910
because the list is actually helped an object for you or some of the python classes.

299
00:12:38.910 --> 00:12:39.380
Okay,

300
00:12:39.380 --> 00:12:41.560
That's why these are the documentation,

301
00:12:41.560 --> 00:12:42.550
the later things.

302
00:12:42.550 --> 00:12:44.920
So you have to know only without underscore.

303
00:12:44.920 --> 00:12:46.050
Whatever you have that are,

304
00:12:46.050 --> 00:12:47.050
you are operations,

305
00:12:47.050 --> 00:12:51.050
right?

306
00:12:51.050 --> 00:12:54.160
Don't see one of the opens up there upended.

307
00:12:54.160 --> 00:12:55.940
Clear copy count.

308
00:12:55.940 --> 00:12:58.080
Extra in index insert pop removed.

309
00:12:58.080 --> 00:12:58.950
We were some sort.

310
00:12:58.950 --> 00:13:00.800
First,

311
00:13:00.800 --> 00:13:02.650
let me go with a friend.

312
00:13:02.650 --> 00:13:06.250
Insert extent.

313
00:13:06.250 --> 00:13:07.500
Yeah,

314
00:13:07.500 --> 00:13:10.150
I would go with first index because there is also one of the important one.

315
00:13:10.150 --> 00:13:10.940
See,

316
00:13:10.940 --> 00:13:17.650
let me indexes nothing about getting an index value off a particular value index off.

317
00:13:17.650 --> 00:13:20.150
Let's say five hundreds.

318
00:13:20.150 --> 00:13:21.270
What is the next?

319
00:13:21.270 --> 00:13:23.150
So fight one Because fires occurring there.

320
00:13:23.150 --> 00:13:26.140
First of all,

321
00:13:26.140 --> 00:13:28.050
he started second value means in next is one right?

322
00:13:28.050 --> 00:13:29.950
Okay.

323
00:13:29.950 --> 00:13:31.250
No.

324
00:13:31.250 --> 00:13:35.360
Then that is one thing.

325
00:13:35.360 --> 00:13:37.910
You may get doubt in case it fell.

326
00:13:37.910 --> 00:13:39.950
Multiple fights in your list,

327
00:13:39.950 --> 00:13:41.160
right?

328
00:13:41.160 --> 00:13:41.790
Somebody house,

329
00:13:41.790 --> 00:13:42.650
some very year fight.

330
00:13:42.650 --> 00:13:47.370
No,

331
00:13:47.370 --> 00:13:48.010
I am running.

332
00:13:48.010 --> 00:13:48.600
You're getting in.

333
00:13:48.600 --> 00:13:50.290
Next one means this index value.

334
00:13:50.290 --> 00:13:51.350
Then what about this fight?

335
00:13:51.350 --> 00:13:52.990
So,

336
00:13:52.990 --> 00:13:54.190
in case you were getting one?

337
00:13:54.190 --> 00:13:54.440
No.

338
00:13:54.440 --> 00:13:58.720
Just tried to such after index one.

339
00:13:58.720 --> 00:14:03.970
That means from Index to just try to search and see if there if there is anyone more fight

340
00:14:03.970 --> 00:14:03.970
.

341
00:14:03.970 --> 00:14:04.410
Yes,

342
00:14:04.410 --> 00:14:04.760
it is.

343
00:14:04.760 --> 00:14:05.060
There.

344
00:14:05.060 --> 00:14:07.750
Six to index mean seventh value.

345
00:14:07.750 --> 00:14:10.650
Okay,

346
00:14:10.650 --> 00:14:12.110
fine.

347
00:14:12.110 --> 00:14:14.180
So we don't worry our body,

348
00:14:14.180 --> 00:14:15.420
if you have multiple values,

349
00:14:15.420 --> 00:14:16.400
how to work,

350
00:14:16.400 --> 00:14:17.120
work with that?

351
00:14:17.120 --> 00:14:18.710
We have a separate section for that.

352
00:14:18.710 --> 00:14:20.670
There will discuss it for timing.

353
00:14:20.670 --> 00:14:22.180
If Alice are unique,

354
00:14:22.180 --> 00:14:23.250
how to work with them?

355
00:14:23.250 --> 00:14:25.050
Okay,

356
00:14:25.050 --> 00:14:26.750
fine.

357
00:14:26.750 --> 00:14:27.980
No,

358
00:14:27.980 --> 00:14:28.550
Actually,

359
00:14:28.550 --> 00:14:29.790
the good thing is Reddick's.

360
00:14:29.790 --> 00:14:31.160
We have regular expressions there.

361
00:14:31.160 --> 00:14:32.550
We can do a lot off things.

362
00:14:32.550 --> 00:14:33.720
Meanwhile,

363
00:14:33.720 --> 00:14:36.650
we just try to no minimum things from your list.

364
00:14:36.650 --> 00:14:38.900
Okay,

365
00:14:38.900 --> 00:14:39.750
Index Done.

366
00:14:39.750 --> 00:14:41.390
Then let me take account.

367
00:14:41.390 --> 00:14:41.850
Also,

368
00:14:41.850 --> 00:14:42.950
see,

369
00:14:42.950 --> 00:14:45.280
county is nothing but let me print.

370
00:14:45.280 --> 00:14:47.790
Ah,

371
00:14:47.790 --> 00:14:52.390
you were at least two dot count off any number.

372
00:14:52.390 --> 00:14:54.890
Let's say I want to count Number 10.

373
00:14:54.890 --> 00:14:56.850
How many times it is there in my given list?

374
00:14:56.850 --> 00:14:59.150
Gino Times.

375
00:14:59.150 --> 00:15:00.930
I don't have any 10 in my list,

376
00:15:00.930 --> 00:15:01.340
right?

377
00:15:01.340 --> 00:15:02.510
That's why are getting older.

378
00:15:02.510 --> 00:15:03.550
But as a zero,

379
00:15:03.550 --> 00:15:04.700
No,

380
00:15:04.700 --> 00:15:05.580
let's say somewhat.

381
00:15:05.580 --> 00:15:11.960
I want to count a number which is having suppose three times five,

382
00:15:11.960 --> 00:15:12.320
is there?

383
00:15:12.320 --> 00:15:12.650
No.

384
00:15:12.650 --> 00:15:15.100
Now I'm going to call number five.

385
00:15:15.100 --> 00:15:17.250
How many times it is there in my given list?

386
00:15:17.250 --> 00:15:19.250
Three times.

387
00:15:19.250 --> 00:15:20.850
That's it.

388
00:15:20.850 --> 00:15:22.450
Okay,

389
00:15:22.450 --> 00:15:24.150
fine.

390
00:15:24.150 --> 00:15:26.350
Now that is a boat Conch.

391
00:15:26.350 --> 00:15:30.950
Any next to the little operation?

392
00:15:30.950 --> 00:15:34.730
Yeah,

393
00:15:34.730 --> 00:15:35.230
Clear.

394
00:15:35.230 --> 00:15:35.850
But it's simple.

395
00:15:35.850 --> 00:15:37.050
One clear is nothing back.

396
00:15:37.050 --> 00:15:37.900
So,

397
00:15:37.900 --> 00:15:38.180
guys,

398
00:15:38.180 --> 00:15:40.530
before running my clear operation,

399
00:15:40.530 --> 00:15:41.750
I am printing my list.

400
00:15:41.750 --> 00:15:45.110
Then my list,

401
00:15:45.110 --> 00:15:46.650
lord clear.

402
00:15:46.650 --> 00:15:50.450
Then print my list.

403
00:15:50.450 --> 00:15:52.080
See the output?

404
00:15:52.080 --> 00:15:54.940
You're simply clearing your list.

405
00:15:54.940 --> 00:15:58.740
So there is a uses off your clear guys.

406
00:15:58.740 --> 00:15:59.650
If you Abdur,

407
00:15:59.650 --> 00:16:04.540
sometimes I'm doing operation in print itself.

408
00:16:04.540 --> 00:16:06.760
Sometimes I'm doing operations separately.

409
00:16:06.760 --> 00:16:13.040
The reason is here you are trying to get the fits the information.

410
00:16:13.040 --> 00:16:14.290
This operation is like counting.

411
00:16:14.290 --> 00:16:15.900
Know your counting your not modifying.

412
00:16:15.900 --> 00:16:19.350
So modifying operations don't do with print.

413
00:16:19.350 --> 00:16:22.090
Okay?

414
00:16:22.090 --> 00:16:22.730
Definitely.

415
00:16:22.730 --> 00:16:23.800
Whatever the operation,

416
00:16:23.800 --> 00:16:25.610
you are performing that modification,

417
00:16:25.610 --> 00:16:30.870
really modifying the original data itself because lists or mutable,

418
00:16:30.870 --> 00:16:32.780
whatever the operation you're performing,

419
00:16:32.780 --> 00:16:36.450
that operation will modify the virginal data itself,

420
00:16:36.450 --> 00:16:38.870
right?

421
00:16:38.870 --> 00:16:42.350
So that's why I'm not using this in print statement when you lose spring.

422
00:16:42.350 --> 00:16:44.770
If you want to see the existing information,

423
00:16:44.770 --> 00:16:49.450
that type of operations you are to work with drink or you can also start that result into

424
00:16:49.450 --> 00:16:51.560
some variable and that variable you can print.

425
00:16:51.560 --> 00:16:54.140
Let's say I want to call number times.

426
00:16:54.140 --> 00:16:56.220
Why is there so directly?

427
00:16:56.220 --> 00:17:01.850
I'm printing the cone injured off that what I will do come to fight any variable,

428
00:17:01.850 --> 00:17:06.160
then in this way and I can print this variable.

429
00:17:06.160 --> 00:17:08.460
So why should we take extra variable?

430
00:17:08.460 --> 00:17:09.680
And why should we printed that?

431
00:17:09.680 --> 00:17:11.630
That's why I'm badly printing.

432
00:17:11.630 --> 00:17:14.050
But don't print this data.

433
00:17:14.050 --> 00:17:16.640
This is operation.

434
00:17:16.640 --> 00:17:18.160
You're modifying something.

435
00:17:18.160 --> 00:17:24.070
So if any operation the letter to modification that directly performing this way don't use

436
00:17:24.070 --> 00:17:29.760
print for that getting me after some practice you will come to know that but mean way.

437
00:17:29.760 --> 00:17:33.290
Just remember that so clear is done.

438
00:17:33.290 --> 00:17:34.850
Then let me go with copy.

439
00:17:34.850 --> 00:17:36.130
All right,

440
00:17:36.130 --> 00:17:37.040
See you guys.

441
00:17:37.040 --> 00:17:39.250
If you want to assign one variable value to other.

442
00:17:39.250 --> 00:17:42.740
Let's say X equals 24 and I want the same way.

443
00:17:42.740 --> 00:17:43.960
Ah,

444
00:17:43.960 --> 00:17:46.160
x value to way I cannot send in this way.

445
00:17:46.160 --> 00:17:47.250
Right,

446
00:17:47.250 --> 00:17:47.900
Simba?

447
00:17:47.900 --> 00:17:52.950
I suppose my new list I'm taking it goes to my list.

448
00:17:52.950 --> 00:17:57.100
Okay.

449
00:17:57.100 --> 00:18:03.450
Or my one more list I'm taking equals to my list dot copy.

450
00:18:03.450 --> 00:18:05.730
Both are same.

451
00:18:05.730 --> 00:18:08.820
Nothing There you're You're you're assigning this well used to this one.

452
00:18:08.820 --> 00:18:10.500
This values to this one,

453
00:18:10.500 --> 00:18:13.020
but that same.

454
00:18:13.020 --> 00:18:14.760
But there is a small difference that is,

455
00:18:14.760 --> 00:18:17.260
whenever refer directly are signing this way.

456
00:18:17.260 --> 00:18:23.020
You are not going to create a new memory location in giraffe dark inch Enough dark.

457
00:18:23.020 --> 00:18:23.760
Be clear.

458
00:18:23.760 --> 00:18:25.400
Some margin dirty word list.

459
00:18:25.400 --> 00:18:27.410
Is there somewhere in drumroll Graham memory.

460
00:18:27.410 --> 00:18:30.770
Same address is pointing to this variable also.

461
00:18:30.770 --> 00:18:31.390
Actually,

462
00:18:31.390 --> 00:18:33.050
this is for your weird little variable.

463
00:18:33.050 --> 00:18:35.810
Same on Brussels pointing to this variable.

464
00:18:35.810 --> 00:18:38.300
But if you do copy,

465
00:18:38.300 --> 00:18:43.100
other memory location will be created that are just memory location will be point auto.

466
00:18:43.100 --> 00:18:44.950
This variable That is the use off copy.

467
00:18:44.950 --> 00:18:49.760
They let me pull that.

468
00:18:49.760 --> 00:18:53.600
Bring ideal fighting.

469
00:18:53.600 --> 00:18:54.850
Means are this location,

470
00:18:54.850 --> 00:18:55.160
right?

471
00:18:55.160 --> 00:19:05.040
My list other than my let me take idea off my new list then I'm bringing the last one

472
00:19:05.040 --> 00:19:05.670
separately.

473
00:19:05.670 --> 00:19:15.660
Bring idea my one list.

474
00:19:15.660 --> 00:19:17.110
Just see the output.

475
00:19:17.110 --> 00:19:18.880
See,

476
00:19:18.880 --> 00:19:19.800
for these two were getting,

477
00:19:19.800 --> 00:19:21.090
say might be locations,

478
00:19:21.090 --> 00:19:22.550
but for last one different.

479
00:19:22.550 --> 00:19:27.570
So that is the use off copy operation like Fine.

480
00:19:27.570 --> 00:19:30.950
So this is about copy or are spending one list to other list.

481
00:19:30.950 --> 00:19:36.510
So there are two ways when he's assigning same memory location or just referring to,

482
00:19:36.510 --> 00:19:36.720
say,

483
00:19:36.720 --> 00:19:40.970
memory location or create a new member location and store the results.

484
00:19:40.970 --> 00:19:41.830
Then that result.

485
00:19:41.830 --> 00:19:43.260
We are assigned to different variables.

486
00:19:43.260 --> 00:19:45.480
That's fine.

487
00:19:45.480 --> 00:19:46.000
No,

488
00:19:46.000 --> 00:19:51.780
let me go with I will go with now.

489
00:19:51.780 --> 00:19:52.260
Happened,

490
00:19:52.260 --> 00:19:56.570
Happened is nothing but So as of now,

491
00:19:56.570 --> 00:19:57.550
what is your data?

492
00:19:57.550 --> 00:19:59.400
See that print on my list?

493
00:19:59.400 --> 00:20:05.650
3527389 date No,

494
00:20:05.650 --> 00:20:10.440
I want to add some new data at the end off my list.

495
00:20:10.440 --> 00:20:11.250
That is nothing.

496
00:20:11.250 --> 00:20:13.910
But generally that operation is called generally opening.

497
00:20:13.910 --> 00:20:17.290
So are pending is nothing but for existing information at the end,

498
00:20:17.290 --> 00:20:19.600
your adding something that is a meaning off happening.

499
00:20:19.600 --> 00:20:21.920
Same thing is applicable with your list.

500
00:20:21.920 --> 00:20:22.380
Also,

501
00:20:22.380 --> 00:20:25.160
let's say my list door open.

502
00:20:25.160 --> 00:20:26.850
So that's for this operation.

503
00:20:26.850 --> 00:20:27.070
Also,

504
00:20:27.070 --> 00:20:30.530
I'm not using prince treatment because this is going to Marty for your data,

505
00:20:30.530 --> 00:20:32.550
but nobody for modifying your list.

506
00:20:32.550 --> 00:20:35.550
That operation don't go with Prince.

507
00:20:35.550 --> 00:20:38.420
My list open.

508
00:20:38.420 --> 00:20:43.760
I want to open some number for physics so often upending just after the result.

509
00:20:43.760 --> 00:20:48.260
56 our guardian.

510
00:20:48.260 --> 00:20:55.490
But I want you are the statistics somewhere between three and fight are between 217

511
00:20:55.490 --> 00:20:57.130
anywhere in case,

512
00:20:57.130 --> 00:21:02.860
if I insert between three and five offer inserting my number whatever.

513
00:21:02.860 --> 00:21:05.090
I'm going to insert that insert,

514
00:21:05.090 --> 00:21:09.210
er data index will be one because 305 is one as off.

515
00:21:09.210 --> 00:21:09.560
No,

516
00:21:09.560 --> 00:21:12.980
but if I insert between this you're getting right,

517
00:21:12.980 --> 00:21:17.870
So see that my list insert,

518
00:21:17.870 --> 00:21:27.450
Let's say index one value 45.

519
00:21:27.450 --> 00:21:30.620
They offer inserting and see your list.

520
00:21:30.620 --> 00:21:36.710
See between three.

521
00:21:36.710 --> 00:21:40.260
And if I You inserted your data based on index position,

522
00:21:40.260 --> 00:21:42.740
our plan is going to add at the end.

523
00:21:42.740 --> 00:21:45.950
But instead he's going to are based on in exposition.

524
00:21:45.950 --> 00:21:47.450
Where do you want to insert?

525
00:21:47.450 --> 00:21:49.760
So one index one.

526
00:21:49.760 --> 00:21:51.980
I should have a value called 45.

527
00:21:51.980 --> 00:21:56.660
Then see that three 45 5 So 30 45 is one.

528
00:21:56.660 --> 00:21:57.470
Right?

529
00:21:57.470 --> 00:22:01.660
So a pen inside are used to our your data to your list.

530
00:22:01.660 --> 00:22:06.560
Our friend is going to argue that our dear inside he's going to rt or data to your existing

531
00:22:06.560 --> 00:22:09.050
list based on your required in exposition.

532
00:22:09.050 --> 00:22:11.260
Right?

533
00:22:11.260 --> 00:22:12.180
Fine.

534
00:22:12.180 --> 00:22:14.860
Now you have one more thing called extend operation.

535
00:22:14.860 --> 00:22:15.350
See that?

536
00:22:15.350 --> 00:22:17.850
Some very how Extend extent.

537
00:22:17.850 --> 00:22:20.240
Right.

538
00:22:20.240 --> 00:22:32.200
So we have seen insert let me go with Ex turn So suppose I have a one new list to call five

539
00:22:32.200 --> 00:22:43.850
and six If I simply do my lister daughter pen my new list And after this operation just

540
00:22:43.850 --> 00:22:50.090
after your output all you're getting your list upend means rd in your writing your fight

541
00:22:50.090 --> 00:22:57.350
Come on six data as a list often see last values Also one list You're getting square

542
00:22:57.350 --> 00:22:57.680
Riggers.

543
00:22:57.680 --> 00:22:57.950
No,

544
00:22:57.950 --> 00:23:00.480
but instead of upend enough,

545
00:23:00.480 --> 00:23:01.040
upenn,

546
00:23:01.040 --> 00:23:04.830
if I take extended No,

547
00:23:04.830 --> 00:23:07.210
see the result You don't know the score records directly.

548
00:23:07.210 --> 00:23:08.240
It is a normal data.

549
00:23:08.240 --> 00:23:12.660
You are adding your list as a normal data into your existing list.

550
00:23:12.660 --> 00:23:13.660
That's it,

551
00:23:13.660 --> 00:23:16.260
right,

552
00:23:16.260 --> 00:23:20.160
So that is all about the work extent?

553
00:23:20.160 --> 00:23:25.660
Fine.

554
00:23:25.660 --> 00:23:34.040
So we done with ah parent Clear copy context Earn index also done in such a done no papa

555
00:23:34.040 --> 00:23:38.330
and removed the money is going to remove your value directly.

556
00:23:38.330 --> 00:23:39.510
Poppy is going to remove.

557
00:23:39.510 --> 00:23:40.700
It is done in exploitation.

558
00:23:40.700 --> 00:23:43.660
Let's say I'm doing foster thing.

559
00:23:43.660 --> 00:23:45.100
You're list.

560
00:23:45.100 --> 00:23:45.770
So as I know.

561
00:23:45.770 --> 00:23:46.450
What is your least?

562
00:23:46.450 --> 00:23:47.110
Let me check it.

563
00:23:47.110 --> 00:23:50.710
So this is your list?

564
00:23:50.710 --> 00:23:54.920
They So I'm doing some operation.

565
00:23:54.920 --> 00:23:56.850
Called my list removed.

566
00:23:56.850 --> 00:23:59.660
Let's a value called 10.

567
00:23:59.660 --> 00:24:02.600
Right after this.

568
00:24:02.600 --> 00:24:03.470
I'm trying to print.

569
00:24:03.470 --> 00:24:03.880
Actually,

570
00:24:03.880 --> 00:24:05.640
you don't have a number 10 in your list.

571
00:24:05.640 --> 00:24:06.910
But if I do that,

572
00:24:06.910 --> 00:24:10.860
see that or you are getting X is not in the list.

573
00:24:10.860 --> 00:24:12.870
That means whatever the value you're removing,

574
00:24:12.870 --> 00:24:13.990
that is not in the list.

575
00:24:13.990 --> 00:24:14.820
Right?

576
00:24:14.820 --> 00:24:16.160
So a new real time.

577
00:24:16.160 --> 00:24:16.330
I know.

578
00:24:16.330 --> 00:24:18.170
But if you're doing this operation before that,

579
00:24:18.170 --> 00:24:19.310
it will take some condition.

580
00:24:19.310 --> 00:24:20.080
If conditions,

581
00:24:20.080 --> 00:24:20.940
then we will remove it.

582
00:24:20.940 --> 00:24:21.770
If it is there,

583
00:24:21.770 --> 00:24:22.500
then only will remain.

584
00:24:22.500 --> 00:24:23.280
If it is not there,

585
00:24:23.280 --> 00:24:26.060
we don't remove it in case.

586
00:24:26.060 --> 00:24:29.350
Whatever the value you are having that value I want to remove.

587
00:24:29.350 --> 00:24:30.890
Right?

588
00:24:30.890 --> 00:24:32.310
So what are the values were having?

589
00:24:32.310 --> 00:24:33.180
35 to 7.

590
00:24:33.180 --> 00:24:36.630
Let me take a No.

591
00:24:36.630 --> 00:24:37.040
See that.

592
00:24:37.040 --> 00:24:38.610
Put off the removal operation.

593
00:24:38.610 --> 00:24:39.950
You are removing number eight,

594
00:24:39.950 --> 00:24:42.050
right?

595
00:24:42.050 --> 00:24:43.530
No.

596
00:24:43.530 --> 00:24:54.350
Let me come in to remove now What I'm doing is you help pop operation first.

597
00:24:54.350 --> 00:24:55.210
Let me do this.

598
00:24:55.210 --> 00:24:59.550
My list dot Pop I'm not giving any in expiration.

599
00:24:59.550 --> 00:25:01.190
First seed output.

600
00:25:01.190 --> 00:25:04.530
What it is doing So before,

601
00:25:04.530 --> 00:25:04.850
Pop,

602
00:25:04.850 --> 00:25:06.540
this is the data after pop.

603
00:25:06.540 --> 00:25:09.350
This is the data night.

604
00:25:09.350 --> 00:25:12.950
So by the Ford Pop will remove the last data.

605
00:25:12.950 --> 00:25:15.380
If you do in expiration,

606
00:25:15.380 --> 00:25:18.620
let's say I'm giving in next to next to or let's say next.

607
00:25:18.620 --> 00:25:19.050
Jiro.

608
00:25:19.050 --> 00:25:20.370
No.

609
00:25:20.370 --> 00:25:20.720
See that?

610
00:25:20.720 --> 00:25:23.640
Put if you provide index equation,

611
00:25:23.640 --> 00:25:24.940
it will remove that data.

612
00:25:24.940 --> 00:25:26.730
If you don't provide by default,

613
00:25:26.730 --> 00:25:28.610
it will remove the last two data.

614
00:25:28.610 --> 00:25:32.560
Last index value right on.

615
00:25:32.560 --> 00:25:35.550
One important point is there with your pop operation.

616
00:25:35.550 --> 00:25:39.950
Let me show you that.

617
00:25:39.950 --> 00:25:42.810
So as off know what is our list?

618
00:25:42.810 --> 00:25:45.160
This is your least right drink.

619
00:25:45.160 --> 00:25:47.100
Actually,

620
00:25:47.100 --> 00:25:49.450
your poppies modifying your data.

621
00:25:49.450 --> 00:25:50.640
All right.

622
00:25:50.640 --> 00:25:52.320
That's why actually you should not use you.

623
00:25:52.320 --> 00:25:56.160
Are that operation my list too dark pop into print.

624
00:25:56.160 --> 00:26:03.240
But the daily special property with your pop that is your parts will remove your data at

625
00:26:03.240 --> 00:26:04.070
the same time.

626
00:26:04.070 --> 00:26:05.490
It also gives What is that?

627
00:26:05.490 --> 00:26:06.580
The night is going to remove.

628
00:26:06.580 --> 00:26:15.420
That's why I can use it in my Prince statement see the output it is removing mine.

629
00:26:15.420 --> 00:26:16.180
That is,

630
00:26:16.180 --> 00:26:20.310
it is giving Are the same time that data is removed from your list,

631
00:26:20.310 --> 00:26:20.850
That's why.

632
00:26:20.850 --> 00:26:22.050
Sit output.

633
00:26:22.050 --> 00:26:28.850
So only pop operation will do the data.

634
00:26:28.850 --> 00:26:29.270
What?

635
00:26:29.270 --> 00:26:31.750
It is moving at the same time it will remove in.

636
00:26:31.750 --> 00:26:33.050
We know what General data,

637
00:26:33.050 --> 00:26:34.950
Right.

638
00:26:34.950 --> 00:26:36.730
So that is a use off,

639
00:26:36.730 --> 00:26:37.260
pop.

640
00:26:37.260 --> 00:26:38.770
No.

641
00:26:38.770 --> 00:26:39.990
Let me come in this.

642
00:26:39.990 --> 00:26:45.610
Now we help rewards and sort.

643
00:26:45.610 --> 00:26:53.070
Let me go with sort first other ways as I know what he's ordered.

644
00:26:53.070 --> 00:26:53.600
A grace.

645
00:26:53.600 --> 00:26:54.130
See that?

646
00:26:54.130 --> 00:26:54.830
Output ones.

647
00:26:54.830 --> 00:26:55.850
This is your data.

648
00:26:55.850 --> 00:26:58.240
Okay?

649
00:26:58.240 --> 00:26:59.000
No,

650
00:26:59.000 --> 00:27:03.960
I'm doing something called my list,

651
00:27:03.960 --> 00:27:05.510
not let me do the worst.

652
00:27:05.510 --> 00:27:09.460
First on offer reverse.

653
00:27:09.460 --> 00:27:09.940
See,

654
00:27:09.940 --> 00:27:10.870
what is your list?

655
00:27:10.870 --> 00:27:11.350
Is there?

656
00:27:11.350 --> 00:27:16.890
See before reverse operation on offer rewards operation.

657
00:27:16.890 --> 00:27:17.920
So it is like,

658
00:27:17.920 --> 00:27:18.090
you know,

659
00:27:18.090 --> 00:27:21.570
middle image off your data right now.

660
00:27:21.570 --> 00:27:23.690
Let me comment your rewards operation,

661
00:27:23.690 --> 00:27:27.550
and I'm going to do my list dot sort operation.

662
00:27:27.550 --> 00:27:29.520
So sort is nothing,

663
00:27:29.520 --> 00:27:33.600
but it is going to arrange your data in ascending order.

664
00:27:33.600 --> 00:27:35.050
See that?

665
00:27:35.050 --> 00:27:38.450
No.

666
00:27:38.450 --> 00:27:42.130
If you want to get to data in descending order first to perform,

667
00:27:42.130 --> 00:27:45.270
sort on then do you were reverse operation?

668
00:27:45.270 --> 00:27:48.080
No.

669
00:27:48.080 --> 00:27:50.350
See the output listening order.

670
00:27:50.350 --> 00:27:51.650
Arles.

671
00:27:51.650 --> 00:27:55.350
You can also use shortcut ass my least dot sort.

672
00:27:55.350 --> 00:27:56.430
Here again,

673
00:27:56.430 --> 00:27:56.700
right.

674
00:27:56.700 --> 00:27:58.160
Reverse equals toe group.

675
00:27:58.160 --> 00:27:59.600
So engine off,

676
00:27:59.600 --> 00:28:01.160
performing rivers separately.

677
00:28:01.160 --> 00:28:02.450
You can also do in this way.

678
00:28:02.450 --> 00:28:02.980
Now,

679
00:28:02.980 --> 00:28:03.150
see,

680
00:28:03.150 --> 00:28:03.970
that is a yes.

681
00:28:03.970 --> 00:28:05.050
You're getting in the reverse order.

682
00:28:05.050 --> 00:28:06.480
Right?

683
00:28:06.480 --> 00:28:07.120
So,

684
00:28:07.120 --> 00:28:07.440
guys,

685
00:28:07.440 --> 00:28:10.050
these all over the operations on the white list.

686
00:28:10.050 --> 00:28:11.050
Okay,

687
00:28:11.050 --> 00:28:12.380
So in the next video,

688
00:28:12.380 --> 00:28:13.610
we'll discuss about a couple.

689
00:28:13.610 --> 00:28:16.050
All right?

690
00:28:16.050 --> 00:28:17.150
Okay,

691
00:28:17.150 --> 00:28:17.460
guys,

692
00:28:17.460 --> 00:28:18.950
thank you for watching this video.

