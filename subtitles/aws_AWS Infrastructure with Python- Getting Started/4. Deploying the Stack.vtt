WEBVTT
1
00:00:01.540 --> 00:00:03.440
Now that we have created our stack,

2
00:00:03.440 --> 00:00:07.940
let's actually add the stack to our app.py file.

3
00:00:07.940 --> 00:00:09.020
So, as usual,

4
00:00:09.020 --> 00:00:14.600
I'm going to change the imports and I'm going to import our networking stack,

5
00:00:14.600 --> 00:00:16.220
which we just created.

6
00:00:16.220 --> 00:00:18.400
So I'm going to have an import for network_stack,

7
00:00:18.400 --> 00:00:24.140
and I'm importing again the network_stack class.

8
00:00:24.140 --> 00:00:30.890
Secondly, I need to declare a network_stack class in the application,

9
00:00:30.890 --> 00:00:33.840
So I'm going to again copy the EcsStack,

10
00:00:33.840 --> 00:00:40.240
and I'm going to replace this EcsStack with our network_stack class.

11
00:00:40.240 --> 00:00:45.840
I'm going to rename it as well as a NetworkStack.

12
00:00:45.840 --> 00:00:46.090
Now,

13
00:00:46.090 --> 00:00:50.160
the interesting thing about the CDK is we can actually link

14
00:00:50.160 --> 00:00:56.640
stacks together by linking the classes directly.

15
00:00:56.640 --> 00:01:00.140
So what I can do is I can actually save this

16
00:01:00.140 --> 00:01:04.790
NetworkStack in a variable called NETWORK.

17
00:01:04.790 --> 00:01:11.740
And I can actually pass as an argument to the

18
00:01:11.740 --> 00:01:17.740
EcsStack, the vpc created by the network.

19
00:01:17.740 --> 00:01:23.970
All I need to do is add vpc to the constructor of the ecs class.

20
00:01:23.970 --> 00:01:26.270
Afterwards, for the cluster,

21
00:01:26.270 --> 00:01:32.250
I can actually specify that I want this Globomantics cluster

22
00:01:32.250 --> 00:01:37.340
to be in the vpc that we just created.

23
00:01:37.340 --> 00:01:42.110
So this is how you would create a custom network for your resources.

24
00:01:42.110 --> 00:01:49.440
You can create your network stack separately from your other instance,

25
00:01:49.440 --> 00:01:53.640
container, or even serverless stacks.

26
00:01:53.640 --> 00:01:56.780
Now you see, if I run cdk ls,

27
00:01:56.780 --> 00:02:01.620
I now have three stacks that I can provision: a LambdaStack,

28
00:02:01.620 --> 00:02:05.660
a NetworkStack, and an EcsStack.

29
00:02:05.660 --> 00:02:10.930
To show you one of the quirks of the CDK,

30
00:02:10.930 --> 00:02:15.000
let me actually move this terminal to a bigger

31
00:02:15.000 --> 00:02:19.840
screen so that you see what happens.

32
00:02:19.840 --> 00:02:25.550
And what I'm going to do is I'm not going to deploy the NetworkStack.

33
00:02:25.550 --> 00:02:28.780
I'm actually going to deploy the EcsStack.

34
00:02:28.780 --> 00:02:35.640
And let me show you what happens when I try and deploy the EcsStack.

35
00:02:35.640 --> 00:02:41.650
Notice that the first thing it actually does is it creates the NetworkS.

36
00:02:41.650 --> 00:02:47.840
So it creates all of the resources from the NetworkStack.

37
00:02:47.840 --> 00:02:55.240
Take note though, that unlike the previous examples in the previous modules,

38
00:02:55.240 --> 00:03:00.140
this did not ask for confirmation.

39
00:03:00.140 --> 00:03:03.300
It just started creating the NetworkStack,

40
00:03:03.300 --> 00:03:08.740
even if I didn't give it a confirmation.

41
00:03:08.740 --> 00:03:13.420
That is the current behavior of the CDK at this time.

42
00:03:13.420 --> 00:03:22.140
It will deploy stacks that your other stacks depend on, without confirmation.

43
00:03:22.140 --> 00:03:29.530
Now as you can see here, when the NetworkStack finishes provisioning,

44
00:03:29.530 --> 00:03:35.240
then it asks permission to deploy the EcsStack.

45
00:03:35.240 --> 00:03:41.760
At this point, I can actually say no; however, it will not roll back.

46
00:03:41.760 --> 00:03:47.140
It will not delete the NetworkStack that was just created.

47
00:03:47.140 --> 00:03:50.140
If we actually go to CloudFormation,

48
00:03:50.140 --> 00:03:54.840
you can actually see that the NetworkStack is here.

49
00:03:54.840 --> 00:03:57.780
You can see all of the VPCs.

50
00:03:57.780 --> 00:04:08.340
You can see all of the subnets created by this CDK app.

51
00:04:08.340 --> 00:04:14.240
So be careful when you set up dependencies across your stacks.

52
00:04:14.240 --> 00:04:19.690
Remember that the CDK will create the other stacks that your

53
00:04:19.690 --> 00:04:24.340
target depends on without confirmation.

54
00:04:24.340 --> 00:04:27.760
Also notice that when we clean up and we call cdk destroy NetworkStack,

55
00:04:27.760 --> 00:04:35.340
it will also destroy dependent stacks.

56
00:04:35.340 --> 00:04:36.600
In this case,

57
00:04:36.600 --> 00:04:43.740
you'll notice that it specifies that you will destroy depending stacks,

58
00:04:43.740 --> 00:04:47.740
particularly the EcsStack.

59
00:04:47.740 --> 00:04:52.050
The destruction of the EcsStack is very fast, because we

60
00:04:52.050 --> 00:05:03.000
actually never provisioned it. However, it will continue on and destroy all of your networking resources.

