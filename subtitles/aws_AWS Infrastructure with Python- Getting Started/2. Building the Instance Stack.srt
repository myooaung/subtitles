1
00:00:00,940 --> 00:00:02,540
Now in this demo,

2
00:00:02,540 --> 00:00:06,880
we are first going to create a bastion host using the

3
00:00:06,880 --> 00:00:12,700
BastionHostLinux construct that is available on the CDK.

4
00:00:12,700 --> 00:00:13,410
Secondly,

5
00:00:13,410 --> 00:00:21,140
we'll create an autoscaling group and attach a role to this autoscaling group.

6
00:00:21,140 --> 00:00:28,240
This will allow us to connect to the autoscaling group via Systems Manager.

7
00:00:28,240 --> 00:00:28,930
Lastly,

8
00:00:28,930 --> 00:00:32,480
we're going to implement automatic checking for termination

9
00:00:32,480 --> 00:00:36,940
protection by implementing a JSII interface.

10
00:00:36,940 --> 00:00:41,310
What this will do is it will check all of our stacks if

11
00:00:41,310 --> 00:00:45,740
they have termination protection enabled.

12
00:00:45,740 --> 00:00:51,230
You can see here I now have a user_data folder which contains a

13
00:00:51,230 --> 00:00:57,440
shell script called user_data.sh, and what this shell script does

14
00:00:57,440 --> 00:01:00,210
is it installs an Apache web server,

15
00:01:00,210 --> 00:01:05,450
downloads some assets from GitHub, and then transfers them to

16
00:01:05,450 --> 00:01:11,300
my HTTP web server folder. It then starts the HTTP web server

17
00:01:11,300 --> 00:01:15,140
and serves it up to your customers.

18
00:01:15,140 --> 00:01:19,900
Let's start as we usually do and create the instance_stack that will

19
00:01:19,900 --> 00:01:25,340
hold all of our constructs for that environment.

20
00:01:25,340 --> 00:01:32,240
Now from here, we're going to be importing the EC2 library from CDK.

21
00:01:32,240 --> 00:01:37,710
We'll also be importing the Elastic Load Balancer library from

22
00:01:37,710 --> 00:01:42,430
CDK, the autoscaling library from the CDK,

23
00:01:42,430 --> 00:01:47,840
as well as the IAM library from the CDK.

24
00:01:47,840 --> 00:01:54,340
And, of course, we're going to add these dependencies to the CDK setup file.

25
00:01:54,340 --> 00:01:58,920
We won't need to add the EC2 dependency anymore, because the

26
00:01:58,920 --> 00:02:04,100
EC2 dependency is already here from our previous stack.

27
00:02:04,100 --> 00:02:07,780
Going back to the instance_stack,

28
00:02:07,780 --> 00:02:14,140
we are going to include some arguments that may help with customizing the stack.

29
00:02:14,140 --> 00:02:18,330
First off, we're going to include a vpc.

30
00:02:18,330 --> 00:02:24,540
Next, we're going to include an asg_min parameter with a default value of 2,

31
00:02:24,540 --> 00:02:31,170
then an asg_max argument with a default value of 5, an EC2

32
00:02:31,170 --> 00:02:36,020
instance type that defaults to t3.micro, and lastly,

33
00:02:36,020 --> 00:02:44,140
we're going to specify the user_data, which our web app instances will be using.

34
00:02:44,140 --> 00:02:47,090
Now that we've set up our constructor arguments,

35
00:02:47,090 --> 00:02:50,240
let's create some actual constructs.

36
00:02:50,240 --> 00:02:54,370
The first construct we're going to create is the bastion construct,

37
00:02:54,370 --> 00:03:00,230
and the CDK has an excellent construct for this called BastionHostLinux.

38
00:03:00,230 --> 00:03:08,140
We actually don't need to specify anything else except for the vpc,

39
00:03:08,140 --> 00:03:13,630
the subnet which our bastion host will be provisioned in, which is

40
00:03:13,630 --> 00:03:20,280
represented by this SubnetSelection, the instance name for this

41
00:03:20,280 --> 00:03:24,640
bastion host, and the type for this instance.

42
00:03:24,640 --> 00:03:27,410
AWS will take care of everything else,

43
00:03:27,410 --> 00:03:31,480
including the role attached to this instance for a session

44
00:03:31,480 --> 00:03:37,540
manager and the OS used by this instance.

45
00:03:37,540 --> 00:03:38,930
Take note, though,

46
00:03:38,930 --> 00:03:44,200
that the SubnetSelection here uses something different from the SubnetSelection

47
00:03:44,200 --> 00:03:53,280
we talked about in the Network Environment module This SubnetSelection uses a

48
00:03:53,280 --> 00:04:02,110
subnet_type field which specifies that this bastion host will be provisioned in

49
00:04:02,110 --> 00:04:07,640
the first private subnet within this vpc.

50
00:04:07,640 --> 00:04:12,510
So it will look through this vpc, look for a private subnet class,

51
00:04:12,510 --> 00:04:18,340
and provision this bastion host in that subnet.

52
00:04:18,340 --> 00:04:24,840
The next construct we're going to provision is an ssm_policy.

53
00:04:24,840 --> 00:04:31,050
This is the policy that our autoscaling instances will be using so

54
00:04:31,050 --> 00:04:34,840
that we can connect to them via Session Manager.

55
00:04:34,840 --> 00:04:39,290
So in this policy we're going to specify that were going to allow these

56
00:04:39,290 --> 00:04:46,300
particular actions on all resources, and we're going to specify the actions

57
00:04:46,300 --> 00:04:54,490
that are needed for ssm. These are actually the minimum actions needed for ssm.

58
00:04:54,490 --> 00:04:58,540
Next we're going to specify the alb resource.

59
00:04:58,540 --> 00:05:03,520
Now in this alb resource, as usual we just need to give this alb

60
00:05:03,520 --> 00:05:09,860
resource a name, and then we need to specify the vpc that this

61
00:05:09,860 --> 00:05:15,510
resource will be provisioned in, whether or not this alb is internet

62
00:05:15,510 --> 00:05:20,580
facing, in this case we will make it internet facing, and the name

63
00:05:20,580 --> 00:05:22,570
for this load_balancer.

64
00:05:22,570 --> 00:05:26,280
So the name for this load_balancer here is actually going to be added to the

65
00:05:26,280 --> 00:05:32,380
load_balancer_name tag, and it's different from the resource name we specified

66
00:05:32,380 --> 00:05:40,180
first. We also need to specify that we're allowing all IPv4 addresses to connect

67
00:05:40,180 --> 00:05:44,140
to this ApplicationLoadBalancer on port 80.

68
00:05:44,140 --> 00:05:48,190
This is because this ApplicationLoadBalancer is going to be

69
00:05:48,190 --> 00:05:54,840
what our customers will be accessing, so it needs to be publicly accessible.

70
00:05:54,840 --> 00:05:59,330
We also need to add a listener for this load_balancer so that

71
00:05:59,330 --> 00:06:05,940
we open up port 80 on this load_balancer.

72
00:06:05,940 --> 00:06:11,440
Next, we have to create our AutoScalingGroup.

73
00:06:11,440 --> 00:06:15,720
Now the CDK has a construct for an AutoScalingGroup, and

74
00:06:15,720 --> 00:06:19,280
similar to the bastion host construct, we just need to

75
00:06:19,280 --> 00:06:23,890
specify the vpc, the SubnetSelection,

76
00:06:23,890 --> 00:06:28,530
which, again, we're going to say is just the private

77
00:06:28,530 --> 00:06:32,940
subnet in this particular vpc.

78
00:06:32,940 --> 00:06:33,510
So, again,

79
00:06:33,510 --> 00:06:39,840
the CDK will detect all private subnets in this vpc and add

80
00:06:39,840 --> 00:06:43,840
that to the autoscaling configuration.

81
00:06:43,840 --> 00:06:46,820
We're also going to specify the instance_type,

82
00:06:46,820 --> 00:06:50,990
which, again, will use the EC2 type parameter that

83
00:06:50,990 --> 00:06:53,940
we specified in the constructor.

84
00:06:53,940 --> 00:07:00,760
Now we will also need to specify a machine_image that this AutoScalingGroup is

85
00:07:00,760 --> 00:07:10,340
going to use. Now how do we specify an AMI image for the CDK?

86
00:07:10,340 --> 00:07:15,910
Now we can actually create a separate variable above this asg called

87
00:07:15,910 --> 00:07:22,540
linux_ami, and we're going to create an AmazonLinux object which takes in as

88
00:07:22,540 --> 00:07:28,500
input the generation of this AmazonLinux instance, in this case we're going

89
00:07:28,500 --> 00:07:35,610
to use AMAZON_LINUX_2; the edition for this AmazonLinux instance, we should

90
00:07:35,610 --> 00:07:41,200
be fine with the STANDARD edition; the virtualization technology for this

91
00:07:41,200 --> 00:07:47,970
instance, in this case we're going to use HVM; and finally, the storage for

92
00:07:47,970 --> 00:07:53,250
this instance, in this case AmazonLinux GENERAL_PURPOSE storage should be

93
00:07:53,250 --> 00:07:54,740
fine.

94
00:07:54,740 --> 00:08:00,090
Notice that there's no need to actually indicate a specific ID. If

95
00:08:00,090 --> 00:08:03,760
you've actually used CloudFormation before, you know that the ID is

96
00:08:03,760 --> 00:08:08,840
one of the most difficult things to actually specify in an automation

97
00:08:08,840 --> 00:08:13,910
tool, so in this case the CDK actually takes care of identifying that

98
00:08:13,910 --> 00:08:16,540
ID for you automatically.

99
00:08:16,540 --> 00:08:21,170
So now we can just pass this linux_ami variable to the constructor of the

100
00:08:21,170 --> 00:08:27,370
AutoScalingGroup. Next, we just need to specify the user_data, and we're going

101
00:08:27,370 --> 00:08:34,240
to read this again from the input from the constructor.

102
00:08:34,240 --> 00:08:39,840
And lastly, we need to specify the capacities for this AutoScalingGroup.

103
00:08:39,840 --> 00:08:45,640
First, we set the desired_capacity to be equal to the minimum_capacity.

104
00:08:45,640 --> 00:08:51,040
This is considered normal best practice when working with AutoScalingGroups.

105
00:08:51,040 --> 00:09:00,640
We then set the min_capacity to be asg_min and the max_capacity to be asg_max.

106
00:09:00,640 --> 00:09:02,840
After creating the AutoScalingGroup,

107
00:09:02,840 --> 00:09:10,840
we can use the policy we created earlier to add a role to this AutoScalingGroup.

108
00:09:10,840 --> 00:09:14,230
So with this add_to_role_policy function,

109
00:09:14,230 --> 00:09:19,810
we can actually add this ssm_policy to the role attached to the

110
00:09:19,810 --> 00:09:26,700
instances in this AutoScalingGroup. We will also need to allow

111
00:09:26,700 --> 00:09:34,480
connections from the load_balancer to this EC2 instance in this group.

112
00:09:34,480 --> 00:09:40,720
So notice we can actually pass the alb object itself without even

113
00:09:40,720 --> 00:09:45,240
referring to the ID or the name of the load_balancer, just the

114
00:09:45,240 --> 00:09:48,740
variable of the AutoScalingGroup.

115
00:09:48,740 --> 00:09:53,990
This is another thing that is considered a pain point with normal

116
00:09:53,990 --> 00:10:00,640
provisioning options, so the CDK makes this much simpler for you.

117
00:10:00,640 --> 00:10:01,530
Lastly,

118
00:10:01,530 --> 00:10:05,710
for the listener for the load_balancer, we need to add a

119
00:10:05,710 --> 00:10:11,260
target group to this listener, and we can pass port 80 of the

120
00:10:11,260 --> 00:10:16,640
asg as our target for this listener.

121
00:10:16,640 --> 00:10:22,950
So the target's argument for add_targets actually takes in as input

122
00:10:22,950 --> 00:10:27,110
an array, but if we pass in the AutoScalingGroup,

123
00:10:27,110 --> 00:10:35,270
it will just apply to the entire AutoScalingGroup. We'll also add a CfnOutput,

124
00:10:35,270 --> 00:10:40,080
and this should be familiar for those of you who have used CloudFormation

125
00:10:40,080 --> 00:10:47,830
before. This CfnOutput is just a value that the output section of

126
00:10:47,830 --> 00:10:55,930
CloudFormation will actually display, in this case we're outputting the alb dns

127
00:10:55,930 --> 00:10:59,840
name so that we can access it more easily.

128
00:10:59,840 --> 00:11:04,840
Let me just go over the code one more time to make sure there are no typos.

129
00:11:04,840 --> 00:11:10,610
So I really suggest doing this at least once, because the CDK does come

130
00:11:10,610 --> 00:11:14,890
with a lot of complex naming conventions, and checking your code after

131
00:11:14,890 --> 00:11:27,000
writing it is always good practice. So now we have created the instance_stack class that our app can provision.

