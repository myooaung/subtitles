1
00:00:01,040 --> 00:00:07,040
So now that we created the stack for our instances, on our app file,

2
00:00:07,040 --> 00:00:14,390
we'll just import the instant stack, and we'll read the user_data from

3
00:00:14,390 --> 00:00:19,640
the file we have in our local machine.

4
00:00:19,640 --> 00:00:25,940
Afterwards, we can create our instant stack class.

5
00:00:25,940 --> 00:00:29,140
We'll just name it InstanceStack,

6
00:00:29,140 --> 00:00:36,580
and we're going to specify that the NETWORK.vpc construct

7
00:00:36,580 --> 00:00:41,960
is going to be the VPC for this stack, and the user_data

8
00:00:41,960 --> 00:00:46,640
will come from our local file.

9
00:00:46,640 --> 00:00:46,870
Now,

10
00:00:46,870 --> 00:00:52,620
to show you the full benefits of the CDK, let me actually provision this

11
00:00:52,620 --> 00:01:01,710
for you on a larger screen, and you can see again if I run cdk ls, we have

12
00:01:01,710 --> 00:01:06,140
all four stacks available for you to provision.

13
00:01:06,140 --> 00:01:10,540
And if we deploy the InstanceStack,

14
00:01:10,540 --> 00:01:16,050
you can see, like what we saw in the networking module, it

15
00:01:16,050 --> 00:01:20,840
actually deploys the NetworkStack first.

16
00:01:20,840 --> 00:01:27,020
So after deploying all of these subnets and the VPC, it then

17
00:01:27,020 --> 00:01:31,190
asks if we want to deploy the InstantStack.

18
00:01:31,190 --> 00:01:34,240
I just need to say yes.

19
00:01:34,240 --> 00:01:38,980
And then after deploying this InstanceStack, we can again go to

20
00:01:38,980 --> 00:01:43,470
CloudFormation and view the InstanceStack from there.

21
00:01:43,470 --> 00:01:49,920
If we go to Outputs, we can again go visit this DNS, and we

22
00:01:49,920 --> 00:02:00,000
see that the load balancer redirects to our web servers hosted on our application instances.

