1
00:00:01,534 --> 00:00:04,449
Here we are in the first demo of this module.

2
00:00:04,449 --> 00:00:08,153
Here I will show you how to use SpEL with the @Value

3
00:00:08,153 --> 00:00:10,557
annotation to wire bean properties.

4
00:00:10,557 --> 00:00:14,068
We will specifically look at writing literal expressions,

5
00:00:14,068 --> 00:00:18,816
using basic operators, calling bean properties and methods,

6
00:00:18,816 --> 00:00:21,461
how to do setter method wiring, and, finally,

7
00:00:21,461 --> 00:00:25,689
using @Value annotation in constructor parameters.

8
00:00:25,689 --> 00:00:30,247
I'm going to demonstrate all of this through our E-Commerce application.

9
00:00:30,247 --> 00:00:33,659
We will extend the application by adding an Order bean to it.

10
00:00:33,659 --> 00:00:36,713
Then we'll write SpEL expressions in User and Order

11
00:00:36,713 --> 00:00:39,700
beans to demonstrate all of the above.

12
00:00:39,700 --> 00:00:41,516
If you remember in module 1,

13
00:00:41,516 --> 00:00:44,229
we created this application to be a Spring web application.

14
00:00:44,229 --> 00:00:48,489
So we can now add a RestController class and some services to

15
00:00:48,489 --> 00:00:52,420
demonstrate our SpEL usages in this application.

16
00:00:52,420 --> 00:00:55,662
Finally, we will call the RESTful APIs from a REST client.

17
00:00:55,662 --> 00:00:59,675
I will be using the Advanced REST Client available in Google Chrome.

18
00:00:59,675 --> 00:01:02,531
You can use your favorite REST client.

19
00:01:02,531 --> 00:01:05,761
And then we can see the results that we get.

20
00:01:05,761 --> 00:01:10,667
I'm in the Spring Boot project that we created in the first part of this course.

21
00:01:10,667 --> 00:01:17,046
So let's go ahead and add a bean named Order.

22
00:01:17,046 --> 00:01:23,834
Create these properties, amount, discount, daysToDeliver, origin.

23
00:01:23,834 --> 00:01:29,194
Create getters and setters for them.

24
00:01:29,194 --> 00:01:32,072
Let's leave that for a bit and go to our User bean,

25
00:01:32,072 --> 00:01:33,692
which is already created,

26
00:01:33,692 --> 00:01:37,563
and let's go ahead and use the @Value annotation and write an

27
00:01:37,563 --> 00:01:46,234
expression like this with a literal string and a literal integer to

28
00:01:46,234 --> 00:01:51,927
set default values to those two fields.

29
00:01:51,927 --> 00:01:57,305
Notice the syntax here, hash, open curly brace and close curly brace.

30
00:01:57,305 --> 00:01:59,201
Let's go back to the Order bean.

31
00:01:59,201 --> 00:02:01,330
And to the amount field,

32
00:02:01,330 --> 00:02:05,868
let's use the @Value annotation and give a simple expression

33
00:02:05,868 --> 00:02:09,233
like this with a mathematical operator, addition.

34
00:02:09,233 --> 00:02:13,505
Of course, if you are implementing this for production use,

35
00:02:13,505 --> 00:02:16,871
you'd not use hardcoded values like this.

36
00:02:16,871 --> 00:02:21,213
You'll probably add up values coming from some other bean's property.

37
00:02:21,213 --> 00:02:21,768
But here,

38
00:02:21,768 --> 00:02:25,086
I just want to demonstrate the capability of doing the

39
00:02:25,086 --> 00:02:29,096
mathematical operation of adding in SpEL.

40
00:02:29,096 --> 00:02:34,506
Moving on, let's do another operator, this time on the discount property.

41
00:02:34,506 --> 00:02:37,236
Let's write this expression to give a 5 percent discount

42
00:02:37,236 --> 00:02:40,623
if the order amount is 1000 or more.

43
00:02:40,623 --> 00:02:45,896
Notice here we are using the value of the amount property,

44
00:02:45,896 --> 00:02:51,810
a relational operator, as well as mathematical operators in this expression.

45
00:02:51,810 --> 00:02:55,117
You can also see that I've used the ternary operator here.

46
00:02:55,117 --> 00:03:00,095
Then let's go to the daysToDeliver property.

47
00:03:00,095 --> 00:03:03,052
So say we want to set it based on the user's country.

48
00:03:03,052 --> 00:03:09,889
Let's write the expression as if the user's country is US,

49
00:03:09,889 --> 00:03:15,277
and the time zone is New York, it will take three days to deliver.

50
00:03:15,277 --> 00:03:17,430
If not, 14 days.

51
00:03:17,430 --> 00:03:22,075
So there's the logical 'and' operator in action.

52
00:03:22,075 --> 00:03:25,383
Next, let's go ahead and set the origin property.

53
00:03:25,383 --> 00:03:28,507
We want to set it to the user's country.

54
00:03:28,507 --> 00:03:32,003
So we write an expression in the @Value annotation to

55
00:03:32,003 --> 00:03:36,193
call the User bean's country property.

56
00:03:36,193 --> 00:03:37,263
So there you go.

57
00:03:37,263 --> 00:03:39,253
That's how you call a bean property.

58
00:03:39,253 --> 00:03:44,093
Now let's look at how we can do a method call.

59
00:03:44,093 --> 00:03:50,098
So for this, let's first add a property called formattedAmount.

60
00:03:50,098 --> 00:03:55,473
Basically, we want to format the amount value according to the user's locale.

61
00:03:55,473 --> 00:03:58,509
So we are going to write the expression for it like this.

62
00:03:58,509 --> 00:04:05,112
We are going to get the currency instance of the NumberFormat class.

63
00:04:05,112 --> 00:04:09,137
GetCurrencyInstance is a static method,

64
00:04:09,137 --> 00:04:14,283
so we put a T in front of the fully qualified class name.

65
00:04:14,283 --> 00:04:16,134
To the getCurrencyInstance method,

66
00:04:16,134 --> 00:04:19,946
we pass the default locale of the user by calling the

67
00:04:19,946 --> 00:04:27,501
getDefault method of the Locale class, which is again a static method.

68
00:04:27,501 --> 00:04:30,236
Then we call the format method and pass in the

69
00:04:30,236 --> 00:04:33,793
order amount to it to be formatted.

70
00:04:33,793 --> 00:04:36,290
This returns the formatted value as a string,

71
00:04:36,290 --> 00:04:41,834
which will be assigned to the property formattedAmount.

72
00:04:41,834 --> 00:04:48,448
Now, to see a setter method wiring in action, let's go back to the User bean.

73
00:04:48,448 --> 00:04:54,463
Here, we already have a setter method created for the timeZone property.

74
00:04:54,463 --> 00:04:59,741
So let's go ahead and wire it by giving the @Value annotation.

75
00:04:59,741 --> 00:05:02,556
We will use the user's timezone from the systemProperties

76
00:05:02,556 --> 00:05:08,482
predefined variable and write an expression like this.

77
00:05:08,482 --> 00:05:13,335
This should wire the property with the user's timezone value.

78
00:05:13,335 --> 00:05:14,349
Finally, in this demo,

79
00:05:14,349 --> 00:05:17,685
we are going to look at how @Value annotation can be

80
00:05:17,685 --> 00:05:20,825
used in constructor parameters.

81
00:05:20,825 --> 00:05:23,817
So let's say we want to initialize the country and language

82
00:05:23,817 --> 00:05:28,104
properties of the User bean in the constructor.

83
00:05:28,104 --> 00:05:32,699
So let's go ahead and add a constructor to the User class.

84
00:05:32,699 --> 00:05:35,121
In constructor parameters,

85
00:05:35,121 --> 00:05:38,681
we will write expressions like this to initialize the country

86
00:05:38,681 --> 00:05:43,656
property to the value of the user's country and the language

87
00:05:43,656 --> 00:05:49,165
property to the value of the user's language from the

88
00:05:49,165 --> 00:05:51,250
systemProperties predefined variable.

89
00:05:51,250 --> 00:05:55,043
So that's it for this demo.

90
00:05:55,043 --> 00:05:59,957
Now let's add a RestController class called OrderController.

91
00:05:59,957 --> 00:06:03,397
And in it, we would need to auto-wire the Order and User beans,

92
00:06:03,397 --> 00:06:08,900
and just add a few basic services to get the customer's name,

93
00:06:08,900 --> 00:06:13,554
the order amount, the discount, the origin,

94
00:06:13,554 --> 00:06:19,087
days to deliver, and the order amount formatted in the user's currency.

95
00:06:19,087 --> 00:06:21,921
Let's run the application.

96
00:06:21,921 --> 00:06:25,875
Then go to Chrome Advanced REST client and call the APIs,

97
00:06:25,875 --> 00:06:28,503
and you'll see the results like this.

98
00:06:28,503 --> 00:06:36,000
So there you saw bean wiring with SpEL. More to come in the next demos.

