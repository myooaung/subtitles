WEBVTT
1
00:00:01.702 --> 00:00:07.436
Now let's look at how collections can be accessed and manipulated using SpEL.

2
00:00:07.436 --> 00:00:10.808
Here, we will look at lists and maps.

3
00:00:10.808 --> 00:00:11.320
In addition,

4
00:00:11.320 --> 00:00:16.727
I will show you how to perform collection selection on lists and maps.

5
00:00:16.727 --> 00:00:19.888
So the first step here would be to add two more beans,

6
00:00:19.888 --> 00:00:24.654
Shipping and City, into our E-Commerce application.

7
00:00:24.654 --> 00:00:29.230
Then add collection manipulation SpEL expressions in the code.

8
00:00:29.230 --> 00:00:32.039
Add a few more RESTful services to our controller and,

9
00:00:32.039 --> 00:00:37.071
finally, call the API and see the results.

10
00:00:37.071 --> 00:00:41.956
First of all, let's add two new beans to our project, City and Shipping.

11
00:00:41.956 --> 00:00:43.010
First, City.

12
00:00:43.010 --> 00:00:48.988
Add these properties to it and the getters and setters.

13
00:00:48.988 --> 00:00:52.429
We'll have to put the getter and setter for isCapital as

14
00:00:52.429 --> 00:00:57.031
getIsCapital and setIsCapital for it to work correctly.

15
00:00:57.031 --> 00:01:00.861
Add a constructor to initialize the fields.

16
00:01:00.861 --> 00:01:08.580
The add class Shipping with two maps, locationsByCountry and chargesByLocation.

17
00:01:08.580 --> 00:01:12.522
These maps will hold data about shipping locations of countries

18
00:01:12.522 --> 00:01:16.734
and shipping charges by locations respectively.

19
00:01:16.734 --> 00:01:19.887
Add getters and setters.

20
00:01:19.887 --> 00:01:25.386
I'm going to add this code in the constructor to initialize the two maps with

21
00:01:25.386 --> 00:01:29.356
some hardcoded data like this for the purpose of our demo.

22
00:01:29.356 --> 00:01:32.736
You'll soon see how we are going to use it.

23
00:01:32.736 --> 00:01:36.591
Now let's go to the Order bean and add a new property,

24
00:01:36.591 --> 00:01:39.561
shippingLocations, of type List(City).

25
00:01:39.561 --> 00:01:42.742
Add getters and setters.

26
00:01:42.742 --> 00:01:45.365
Now say we want to populate this list with available

27
00:01:45.365 --> 00:01:48.482
shipping locations for the user's country.

28
00:01:48.482 --> 00:01:53.306
So let's go ahead and write this expression inside @Value annotation.

29
00:01:53.306 --> 00:01:58.086
We created a map called locationsByCountry in the Shipping bean earlier.

30
00:01:58.086 --> 00:02:08.884
So I'm saying shipping.locationsByCountry and pass user.country as the map key.

31
00:02:08.884 --> 00:02:12.311
This will populate shippingLocations list with the

32
00:02:12.311 --> 00:02:15.031
locations based on the user's country.

33
00:02:15.031 --> 00:02:19.907
Here, what we've done is access the map using our SpEL expression.

34
00:02:19.907 --> 00:02:23.274
Now to check this out, I'm going to go to the OrderController,

35
00:02:23.274 --> 00:02:31.622
inject the Shipping and City beans, and create a simple REST service.

36
00:02:31.622 --> 00:02:38.597
Run the application and check out the APIs on REST client to see the result.

37
00:02:38.597 --> 00:02:42.715
Change the VM options and run the application to see the

38
00:02:42.715 --> 00:02:47.037
results changing according to the user's locale.

39
00:02:47.037 --> 00:02:51.060
Now let's go ahead and add another property to the Order bean called

40
00:02:51.060 --> 00:02:55.844
nonCapitalShippingLocations of type List once again.

41
00:02:55.844 --> 00:03:01.114
We need to populate this list with the shipping locations out

42
00:03:01.114 --> 00:03:04.492
of the capital city of the user's country.

43
00:03:04.492 --> 00:03:05.145
For this,

44
00:03:05.145 --> 00:03:08.849
we need to write an expression that filters the

45
00:03:08.849 --> 00:03:11.527
shippingLocations list that we already have,

46
00:03:11.527 --> 00:03:13.418
which means a list selection.

47
00:03:13.418 --> 00:03:19.621
So we use the period and question mark operator.

48
00:03:19.621 --> 00:03:23.534
Let's go ahead and check the output as usual.

49
00:03:23.534 --> 00:03:28.409
Here is the filtered list of non-capital shipping locations for the user.

50
00:03:28.409 --> 00:03:31.659
Now I want to show you a few more examples of

51
00:03:31.659 --> 00:03:34.608
accessing and manipulating lists and maps.

52
00:03:34.608 --> 00:03:42.178
For this, let's add a property, westernShippingLocations, to the Order bean.

53
00:03:42.178 --> 00:03:46.473
This will be a map of shipping locations in the western countries.

54
00:03:46.473 --> 00:03:50.231
So we'll have to do a map selection here by filtering the

55
00:03:50.231 --> 00:03:56.612
locationsByCountry map in the Shipping bean like this,

56
00:03:56.612 --> 00:04:06.565
key=='UK' or key=='US' or key=='DK'.

57
00:04:06.565 --> 00:04:09.225
Once again, test the application as usual,

58
00:04:09.225 --> 00:04:15.766
and you can see the western shipping locations filtered from the original map.

59
00:04:15.766 --> 00:04:17.686
Let's do one more expression.

60
00:04:17.686 --> 00:04:21.334
Let's say we want to show the number of cheap shipping locations to

61
00:04:21.334 --> 00:04:24.978
the user where the shipping cost is less than $10.

62
00:04:24.978 --> 00:04:29.363
So add a property named noOfCheapShippingLocations.

63
00:04:29.363 --> 00:04:35.407
Then write the expression like this with the selection operator on the list

64
00:04:35.407 --> 00:04:39.208
to filter it where the shipping cost is less than $10.

65
00:04:39.208 --> 00:04:48.163
Then get the size of the filtered list and assign it to the property.

66
00:04:48.163 --> 00:04:53.646
When you run it, the result looks like this.

67
00:04:53.646 --> 00:04:58.099
In fact, we've done a collection selection on the shippingLocations list.

68
00:04:58.099 --> 00:05:01.244
And on the resulting list, we've called the size method,

69
00:05:01.244 --> 00:05:12.000
which means we've performed an accessing operation on the collection as well. So two in one, accessing a collection and collection manipulation in action.

