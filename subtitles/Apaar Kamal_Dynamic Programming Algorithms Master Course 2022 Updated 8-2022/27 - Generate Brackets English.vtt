WEBVTT

00:01.300 --> 00:01.880
Hi, everyone.

00:01.900 --> 00:04.340
So now let's discuss another problem.

00:04.360 --> 00:06.060
It's generating brackets.

00:06.070 --> 00:07.240
Very interesting problem.

00:07.240 --> 00:09.040
On Generating Springs.

00:09.340 --> 00:18.220
We need to write a function to generate all possible strings which contain n pair  of balance parentheses.

00:18.220 --> 00:24.280
So we can use these opening and closing brackets to generate strings which contain n such pairs.

00:24.280 --> 00:24.460
Okay.

00:24.460 --> 00:32.140
So for example, if n is two, we know we only have 2 such pairs and these are two pairs.

00:32.140 --> 00:35.680
Okay, so input will be a number and output will be these strings.

00:35.680 --> 00:35.970
Okay.

00:36.580 --> 00:38.740
So let's see one more example.

00:39.010 --> 00:43.840
Also, you cannot generate something like this because it's not a valid expression.

00:43.840 --> 00:44.860
Okay, or like this.

00:45.010 --> 00:46.750
These are not valid ones.

00:48.350 --> 00:57.080
So if n is 3 then we have five such pairs and you can verify that all of the parentheses are balanced.

00:57.080 --> 01:02.870
That means opening is matching with the corresponding closing bracket.

01:03.320 --> 01:10.520
The one thing to observe is if you have input of length n or if input is 3 you need to fill

01:11.300 --> 01:12.010
six places.

01:12.020 --> 01:12.260
Okay.

01:12.620 --> 01:18.140
You can we apply the recursion funda to solve this problem recursively?

01:18.770 --> 01:21.470
How can we think recursion in such problems?

01:21.800 --> 01:23.830
That is what we want to learn

01:24.170 --> 01:25.840
So the idea is similar.

01:25.940 --> 01:26.580
What you can do?

01:26.600 --> 01:33.350
You fill one position with maybe an opening bracket or with the closing bracket, and you make a recursive

01:33.350 --> 01:35.810
call for the remaining part.

01:35.810 --> 01:36.050
Okay.

01:36.590 --> 01:38.390
Now there is one problem.

01:38.390 --> 01:40.670
all the combinations are not valid.

01:40.670 --> 01:40.850
Okay.

01:40.850 --> 01:44.540
For example, a string cannot start with the closing bracket.

01:44.540 --> 01:52.190
So there are some rules that we need to think of while placing the placing these brackets in the corresponding

01:52.190 --> 01:52.640
position.

01:52.710 --> 01:52.910
Okay.

01:52.910 --> 01:53.870
So this is true.

01:53.900 --> 01:58.310
We can use recursion, we can fill for an index.

01:58.310 --> 02:03.050
i or fill out the starting position and make a recursive call for the remaining sub problem.

02:03.080 --> 02:03.710
That is true.

02:03.740 --> 02:09.440
Okay, so what are the rules we should keep in mind while filling these, so the first rule is

02:09.920 --> 02:15.830
Whenever you are placing a opening bracket or whenever you are placing a closing bracket.

02:17.460 --> 02:22.980
We must have some opening bracket which has come before the closing bracket.

02:22.980 --> 02:29.970
That means if I'm making a string like this, I want to put a closing bracket here can I put a closing

02:29.970 --> 02:30.900
bracket here.

02:30.900 --> 02:31.200
the answer is

02:31.200 --> 02:38.820
Yes, because we have till now we have three opening brackets and closing brackets till now is zero.

02:39.180 --> 02:40.560
We can put this closing bracket.

02:40.560 --> 02:43.260
Okay, maybe I put, I'll go to the next position.

02:43.680 --> 02:45.210
I put a closing bracket here.

02:45.660 --> 02:46.770
I go to the next position.

02:46.770 --> 02:47.970
I put a closing bracket here.

02:47.970 --> 02:49.210
I go to the next position.

02:49.590 --> 02:55.440
can I put a closing bracket here, the answer is no because we had three opening and we had three

02:55.440 --> 02:56.250
closing till now.

02:56.580 --> 02:58.830
We cannot put a closing bracket.

02:59.040 --> 02:59.340
Okay.

02:59.730 --> 03:00.330
Let us say.

03:00.330 --> 03:01.350
The value of an is four.

03:01.600 --> 03:06.720
In that case, we will not put our closing bracket here, although we have both the options.

03:06.720 --> 03:10.800
But putting a closing bracket does not follow the rule.

03:11.100 --> 03:14.370
That closing should come after opening bracket.

03:14.370 --> 03:15.660
Okay, so this is wrong.

03:16.530 --> 03:18.090
can i put a opening bracket here?.

03:18.630 --> 03:19.950
The answer is yes.

03:19.950 --> 03:21.480
I can put a opening bracket here.

03:21.870 --> 03:25.320
I go to the next index, can I put a opening bracket here.

03:25.470 --> 03:26.400
The answer is no.

03:26.730 --> 03:27.080
Why?

03:27.330 --> 03:32.730
Because the count of opening bracket must be less than N.

03:32.730 --> 03:34.800
if we want to place an opening bracket.

03:34.800 --> 03:40.710
Okay, so if you have placed 3 opening brackets and N is four, then you can add one.

03:40.710 --> 03:45.900
But if you have already placed one, two, three, four opening brackets, you cannot place one more

03:45.900 --> 03:46.560
opening bracket.

03:46.560 --> 03:46.740
Okay.

03:46.740 --> 03:49.020
So ultimately you will try placing a closing bracket.

03:49.440 --> 03:54.300
Can we put a closing bracket, the answer is yes, because opening is 4 closing is 3.

03:54.750 --> 03:56.250
We can put a closing bracket here.

03:57.360 --> 03:58.660
so what I'm trying to say.

03:59.080 --> 04:07.090
You try to put both opening and closing, but one of these rules may restrict, either placing an opening

04:07.090 --> 04:09.080
bracket or placing a closing bracket.

04:09.140 --> 04:09.310
Okay.

04:09.310 --> 04:15.700
So in order to do, just to simplify these rules, the count of close should be less than the count

04:15.700 --> 04:17.110
of current opening brackets.

04:17.260 --> 04:18.760
Then you can place a closing bracket.

04:19.210 --> 04:25.150
And for opening bracket, the count of open should be less than the number of brackets you can place

04:25.150 --> 04:25.720
that is N.

04:26.290 --> 04:27.670
Then you can place an opening bracket.

04:27.670 --> 04:27.850
Okay.

04:27.850 --> 04:29.830
So these two are independent conditions.

04:29.860 --> 04:30.100
Okay.

04:30.490 --> 04:33.620
We have to take these two conditions independently.

04:33.670 --> 04:39.530
If one of these or both of these conditions are true, then you can place the corresponding bracket.

04:39.730 --> 04:40.000
Okay.

04:40.840 --> 04:42.310
So this is what we are going to do.

04:42.640 --> 04:48.040
Now, let us try to solve this for a small example.

04:48.040 --> 04:51.810
Let's say we have an equal to 2 and I need to fill four positions.

04:51.820 --> 04:52.060
Okay.

04:52.600 --> 04:57.950
So in the beginning, can I put a closing bracket here the answer is NO, can i put a  opening bracket here?.

04:57.950 --> 04:58.830
The answer is yes.

04:58.930 --> 05:01.990
We put an open you make a call on this part.

05:03.000 --> 05:03.540
We are here.

05:04.020 --> 05:05.900
Can we put a closing bracket here?

05:05.970 --> 05:07.200
The answer is yes.

05:07.620 --> 05:09.780
Can we put the opening record here than three?

05:09.780 --> 05:10.060
Yes.

05:10.080 --> 05:17.400
So both of the conditions are true because opening count is one which is less than two and closing count

05:17.400 --> 05:19.740
is zero, which is less than one.

05:20.250 --> 05:20.520
Okay.

05:20.520 --> 05:24.660
So we will make two calls, one for the opening bracket.

05:25.680 --> 05:27.900
And one for the closing bracket.

05:28.320 --> 05:34.650
We make call like this and now we're left with this sub problem and this sub problem.

05:34.660 --> 05:39.030
So what we do here, can we put a opening bracket here, the answer is.

05:39.030 --> 05:41.730
No, can we put a closing bracket here, the.

05:41.730 --> 05:42.030
answer is

05:42.030 --> 05:44.440
Yes, we put the closing bracket.

05:44.440 --> 05:45.720
here, we come here

05:46.080 --> 05:47.850
Can we put a opening bracket here?

05:47.850 --> 05:48.490
the answer is no

05:48.510 --> 05:50.370
Can we put a closing bracket, the answer is

05:50.370 --> 05:50.700
Yes.

05:51.180 --> 05:52.740
So we get this one.

05:53.340 --> 05:53.660
Okay.

05:54.090 --> 05:56.430
So we get the first output.

05:56.820 --> 05:57.810
And what about this?

05:58.230 --> 05:59.370
The opening is one.

06:00.120 --> 06:01.080
Closing is one.

06:02.790 --> 06:03.990
Can we put a opening

06:04.530 --> 06:04.900
Yes.

06:04.920 --> 06:06.390
Can we put a closing the 

06:06.390 --> 06:07.220
answer is no

06:07.230 --> 06:09.030
We can put a opening bracket here.

06:11.010 --> 06:12.120
Can we put a closing?

06:12.240 --> 06:12.720
No.

06:12.750 --> 06:13.980
Can we put a opening?

06:14.280 --> 06:14.680
No.

06:14.700 --> 06:15.780
Can we put a closing?

06:16.140 --> 06:17.190
Yes, we can.

06:17.190 --> 06:21.630
put, so this is the second output that we get.

06:21.990 --> 06:24.960
Now, you can see this is actually a brute force algorithm.

06:25.560 --> 06:25.890
Okay.

06:26.640 --> 06:30.330
And we are using recursion to build this brute force logic.

06:30.660 --> 06:37.290
And in this logic, we are adding some conditions to restrict the branches that are not valid.

06:37.320 --> 06:37.580
Okay.

06:37.800 --> 06:41.750
We are not going to into branches that lead to wrong output.

06:41.970 --> 06:44.760
So we are actually doing some kind of tree proning here.

06:45.630 --> 06:46.560
So this is.

06:48.020 --> 06:50.330
The way to solve this particular problem.

06:50.360 --> 06:53.730
And in the next video, we will see the implementation.

06:53.750 --> 06:55.880
That's all see you guys in the next video.