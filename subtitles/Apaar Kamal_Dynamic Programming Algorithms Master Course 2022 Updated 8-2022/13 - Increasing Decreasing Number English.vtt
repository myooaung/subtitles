WEBVTT

0
00:01.430 --> 00:02.030
Hi, everyone.

1
00:02.030 --> 00:06.800
In this lecture I'm going to talk about a very simple problem, but it's very important to take up this

2
00:06.800 --> 00:09.890
problem for strengthening your concept of recursion.

3
00:09.890 --> 00:15.980
Okay, so we will understand the concept of going towards the base case and coming back from the base case

4
00:15.980 --> 00:16.940
through this example.

5
00:17.420 --> 00:20.840
So you can also try this problem on your own before we dive into the code.

6
00:21.380 --> 00:22.760
So the question is very simple.

7
00:22.760 --> 00:27.530
We just need to simulate the same functionality as off of a for loop.

8
00:27.650 --> 00:36.230
Using this particular problem, we have to print all the numbers one to N recursively in decreasing

9
00:36.230 --> 00:38.360
order and in increasing order.

10
00:38.360 --> 00:39.890
So we need to write two methods.

11
00:39.890 --> 00:41.960
One let's say N is 5 

12
00:42.380 --> 00:45.140
The first method should print one, two, three, four, five.

13
00:45.320 --> 00:48.230
Okay, the second method, that is for the increasing one.

14
00:49.220 --> 00:54.490
And the second method if N is 5 then it should print output, like 5 4 3 .

15
00:54.530 --> 00:57.050
2 1 that is the decreasing one.

16
00:57.080 --> 00:57.290
Okay.

17
00:58.730 --> 01:01.250
Now let's see how we can actually do it.

18
01:01.340 --> 01:02.870
So let's see.

19
01:02.930 --> 01:08.780
We have a method decreasing which prints the numbers in the decreasing order.

20
01:08.780 --> 01:08.990
Okay.

21
01:08.990 --> 01:15.550
So what we discussed was we will take one step and the rest of the steps will be taken by the recursion.

22
01:15.560 --> 01:21.470
So what I can do in this decreasing method, I can say, okay, I know, the value of n, I will first print the

23
01:21.470 --> 01:22.070
value of n.

24
01:23.190 --> 01:23.490
Okay.

25
01:23.940 --> 01:30.360
And then I will call the method decreasing of N-1 that will automatically print all the numbers

26
01:30.870 --> 01:32.550
from n minus one till one.

27
01:32.610 --> 01:32.940
Okay.

28
01:33.300 --> 01:40.290
And in the base case, we can have a case that, okay, if we are reducing and if we react a point when the

29
01:40.290 --> 01:41.730
number is zero, we can return.

30
01:41.730 --> 01:41.970
Okay.

31
01:42.420 --> 01:45.900
So let us see what is going to happen if let's say N is five.

32
01:47.090 --> 01:50.390
This is this is for the recursive case and for the base case.

33
01:50.390 --> 01:51.140
I can check.

34
01:51.950 --> 01:54.620
If N is zero, we can return.

35
01:56.170 --> 01:57.060
We don't do anything.

36
01:57.070 --> 01:57.330
Okay.

37
01:58.030 --> 02:02.980
You also have another case like if N is one print one and then return that is also fine.

38
02:03.430 --> 02:08.170
Both of either of these cases would work I can start from let’s say N = 5.

39
02:08.920 --> 02:09.490
What I will do.

40
02:09.490 --> 02:09.940
I will print n

41
02:09.940 --> 02:12.180
i.e I will print five.

42
02:12.220 --> 02:13.870
I will make a call on N equal to four.

43
02:14.720 --> 02:15.680
I'll print four.

44
02:15.800 --> 02:17.350
I'll make a call on N = 3.

45
02:17.540 --> 02:19.700
I will print 3 and make a call on N equal to two.

46
02:20.210 --> 02:22.400
I’ll print 2 and make a call on an equal to one.

47
02:23.000 --> 02:24.380
I’ll print 1 and

48
02:24.380 --> 02:25.940
I'll make a call on N equal to zero.

49
02:25.970 --> 02:26.780
I will say return

50
02:26.900 --> 02:27.740
It will say return

51
02:27.770 --> 02:28.610
It will say return

52
02:28.610 --> 02:29.390
It will say return

53
02:29.390 --> 02:30.110
It will say return

54
02:30.620 --> 02:35.690
Finally, what I got in the output is nothing but five, four, three, two, one.

55
02:36.200 --> 02:38.090
That's how easy it is going to be.

56
02:38.090 --> 02:38.350
Okay.

57
02:38.720 --> 02:38.970
For

58
02:38.990 --> 02:39.830
The increasing order.

59
02:39.830 --> 02:40.550
What we need to do.

60
02:40.550 --> 02:42.740
We need to do the work in this direction.

61
02:42.800 --> 02:43.460
I will tell you

62
02:46.190 --> 02:47.450
what changes we would make.

63
02:47.450 --> 02:50.330
So let us first write the function for decreasing.

64
02:50.330 --> 02:55.760
So I can say void decreasing int n so we have a base case.

65
02:56.150 --> 02:58.520
If n is zero, we will stop.

66
02:58.940 --> 03:01.310
That is return and.

67
03:02.370 --> 03:05.610
Otherwise I can okay cout the value of n

68
03:06.780 --> 03:10.170
And followed by a function call to dec(N-1)

69
03:10.350 --> 03:10.920
That's it.

70
03:12.270 --> 03:16.500
So any statements that are written before the function call	.

71
03:16.770 --> 03:17.100
Okay.

72
03:17.550 --> 03:21.750
So these are executed when you're going towards the base case.

73
03:22.140 --> 03:22.440
Okay.

74
03:23.730 --> 03:25.920
And you're going towards the base case.

75
03:26.230 --> 03:31.500
So anything that is coming before the function call will be executed when you're going towards the base case.

76
03:31.920 --> 03:34.980
Now let me also run this code and

77
03:34.980 --> 03:38.010
Show it to you ./ increasing decreasing.

78
03:38.370 --> 03:43.590
And I think we should take input the value of N and then we should call this function.

79
03:47.280 --> 03:49.200
Let's say N is 5 I get the output.

80
03:49.200 --> 03:50.520
as five, four, three, two, one.

81
03:51.090 --> 03:57.900
Now I also want to make a similar function for increasing part, but the good thing is there will be only

82
03:57.900 --> 03:58.890
one line of change.

83
03:59.100 --> 04:03.810
That is, you will change the order in which this statement is executed.

84
04:03.840 --> 04:10.170
So if I put this statement here and, just to make it more clear, I'm going to rename the function as

85
04:10.170 --> 04:10.830
increasing.

86
04:11.940 --> 04:17.160
And you will see this is going to work perfectly fine and we will see why it is going to work.

87
04:17.160 --> 04:17.430
Okay.

88
04:19.050 --> 04:22.560
So let us try to think what this function is going to do.

89
04:23.620 --> 04:30.060
So let us let me call decreasing and maybe then endl and let me call as increasing function

90
04:30.060 --> 04:30.450
as well.

91
04:31.200 --> 04:37.470
So if I say okay, five, I get the numbers in the decreasing order, I get the numbers and then increasing

92
04:37.470 --> 04:38.160
order as well.

93
04:38.670 --> 04:42.050
Let us try to see what this function is saying there.

94
04:42.090 --> 04:47.520
So it is saying if you want to print the numbers in the increasing order from 1 to n, you will first print

95
04:47.520 --> 04:51.420
all the numbers in the increasing order from 1 to n-1

96
04:52.140 --> 04:52.480
Okay.

97
04:53.130 --> 04:54.950
And then you will print the number n.

98
04:55.620 --> 05:00.750
This is the work that is done by the recursion and this is the work that is done by you in the previous

99
05:00.750 --> 05:01.360
code what you said.

100
05:01.380 --> 05:07.650
you'll first print the number n and then you will print the numbers from n-1 till 1 in the

101
05:07.650 --> 05:08.430
decreasing order.

102
05:08.460 --> 05:08.730
Okay.

103
05:09.420 --> 05:18.810
Now, you might be surprised how this single swapping of one line of code actually changed the order

104
05:18.810 --> 05:21.240
in which the output is coming.

105
05:21.690 --> 05:26.070
Effectively, what is happening is both the functions will have a same call stack

106
05:26.190 --> 05:27.420
So first of all, you have main.

107
05:28.430 --> 05:34.790
Then you call the function with let’s say n = 5 okay, so decreasing function first prints the values

108
05:34.790 --> 05:37.700
So it prints five it makes a call on n = 4

109
05:38.210 --> 05:39.350
Then it prints four.

110
05:39.380 --> 05:41.060
It makes a call on n = 3

111
05:41.180 --> 05:43.430
Then it makes a call on n = 2

112
05:46.780 --> 05:51.010
Then it makes a call to n=1 and then it makes a call to n = 0

113
05:51.510 --> 05:54.790
The same calls are being made by the increasing function as well.

114
05:54.790 --> 05:54.950
Okay.

115
05:54.970 --> 05:59.980
So if you pass in n and it makes a call to five, then it makes a call to four, then makes call to,

116
05:59.980 --> 06:00.840
3 2 1.

117
06:00.850 --> 06:01.180
Okay.

118
06:01.660 --> 06:06.780
But the change is it is printing the statement after the call has been executed.

119
06:06.790 --> 06:10.030
Okay, so after we have returned from the base case, it is going to print one.

120
06:10.450 --> 06:14.410
After we have returned from one, it is going to print two, then it is going to print three, then

121
06:14.410 --> 06:18.430
it is going to print four, then it is going to print five and that's it.

122
06:18.430 --> 06:20.020
Okay, so this output.

123
06:21.540 --> 06:25.650
Is generated by the increasing function and this output five, four, three, two, one.

124
06:25.830 --> 06:28.230
It is generated by the decreasing function.

125
06:28.230 --> 06:32.250
So here anything that is written before the function call.

126
06:33.460 --> 06:34.390
Is executed.

127
06:36.030 --> 06:39.900
While going toward the base case that is from the top to the bottom.

128
06:40.020 --> 06:40.380
Okay.

129
06:40.830 --> 06:42.900
I'm calling bottom as the base case.

130
06:42.900 --> 06:43.200
Okay.

131
06:43.560 --> 06:47.760
And when you're coming from the bottom, towards the main thing that is top

132
06:47.850 --> 06:48.180
Okay.

133
06:48.660 --> 06:51.600
This is top is n and base case is 0

134
06:52.480 --> 06:54.310
The top is n and base case is 0

135
06:54.310 --> 06:57.520
So when you're coming from a smaller problem, towards a bigger problem.

136
06:57.970 --> 07:01.480
Then that code is written after the function call.

137
07:01.520 --> 07:08.050
Okay, so that is something you should always remember and it is going to help you a lot while solving

138
07:08.070 --> 07:14.890
recursion problems when you need some problem solutions to be solved first and then combined, then


139
07:14.890 --> 07:17.640
you would be doing this work after your function call.

140
07:17.650 --> 07:23.230
Okay, so I hope these two concepts are now clear and that's all for this lecture.