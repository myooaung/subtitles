WEBVTT

00:02.620 --> 00:05.020
So let me quickly code it.

00:05.820 --> 00:06.270
And.

00:09.040 --> 00:13.120
So initially what we'll do is we'll just of course.

00:13.450 --> 00:14.650
So there are two things here, right?

00:14.890 --> 00:19.630
First is whether you want to print the number of steps or you actually want to print the steps.

00:19.900 --> 00:26.960
Let's do both or what we can do is we can just print these steps and then we can realize this, are

00:27.760 --> 00:28.510
realize this.

00:28.730 --> 00:29.020
tower

00:30.220 --> 00:35.770
So what we'll do is we'll write a function called tower of Hanoi and.

00:38.050 --> 00:42.670
Let me write down tower of Hanoi int n

00:43.930 --> 00:49.690
so what we have is we have ABC, rod, helper rod, to rod, from rod 

00:50.050 --> 00:51.430
So instead of.

00:52.400 --> 00:52.730
Okay.

00:53.030 --> 00:57.200
If you want to keep ABC only, then, uh, we need to keep them as characters.

00:57.230 --> 01:00.000
Otherwise, we could have taken int, which is from to rod 

01:00.020 --> 01:00.810
number

01:01.340 --> 01:02.930
Let's take characters only.

01:02.990 --> 01:04.220
It doesn't matter much.

01:04.820 --> 01:07.040
So character from adored.

01:08.690 --> 01:14.030
Character helper rod, character to rod

01:14.480 --> 01:15.830
This is my recursive.

01:17.380 --> 01:17.680
I mean.

01:19.770 --> 01:21.120
This is my recursive function.

01:21.600 --> 01:22.800
So initially what will happen?

01:22.830 --> 01:27.630
I'll just take n, let’s just take n, according to 

01:27.630 --> 01:29.390
this it is initially 10, instead of 10

01:29.400 --> 01:31.350
Let's make it one initially.

01:31.350 --> 01:31.550
Right?

01:31.560 --> 01:34.380
So we'll start from one, then we'll see two, then we'll see three.

01:34.380 --> 01:36.900
So we realize how is this  recursion working?

01:37.140 --> 01:42.990
Actually, I'm going deeper into this because I want you to understand this because it will come very

01:42.990 --> 01:45.170
handy in writing programming later on.

01:46.400 --> 01:50.770
That’s’ why I’m giving much time to this initially, let’s say I'm moving from A.

01:51.140 --> 01:53.260
I want I want B to help.

01:53.270 --> 01:59.700
And I want to move all those N to C so initial state is disk are on A

02:00.230 --> 02:00.490
right.

02:01.860 --> 02:06.030
So what's the first step that I want this to do what’s a sub problem that I wanted to solve?

02:06.420 --> 02:07.290
I want it to.

02:08.270 --> 02:12.530
Place me N-1 disk on, pick it

02:12.710 --> 02:16.370
From this only where I want it to be placed.

02:16.370 --> 02:17.960
I want it to be placed on the.

02:18.930 --> 02:19.380
helper.

02:19.560 --> 02:22.870
so let me place on the helper.

02:24.430 --> 02:24.690
Yeah.

02:24.700 --> 02:25.000
Sorry.

02:25.540 --> 02:27.610
I want it to be placed on the helper.

02:27.700 --> 02:32.540
So then the new two, that is character two will become helper.

02:32.540 --> 02:32.780
Right?

02:33.010 --> 02:33.430
That means.

02:34.030 --> 02:36.660
Place n-1 rod from 

02:36.670 --> 02:38.830
to helper rod

02:39.160 --> 02:40.480
by using the to rod.

02:41.500 --> 02:45.040
So basically to becomes the helper and helper becomes the to right.

02:45.370 --> 02:52.180
In a case, it was B and C initially I was placing n on C by using B, but now I am saying it’s N-1

02:52.180 --> 02:53.950
on B using C.

02:54.670 --> 02:55.840
cool now.

02:57.130 --> 02:59.410
When I reached here and I have reached here.

02:59.440 --> 03:00.400
What does it mean?

03:01.150 --> 03:08.710
It means that I have placed N-1 rods on the B by using the C.

03:08.710 --> 03:11.080
So that's what recursion is right? it means.

03:11.080 --> 03:12.190
I'm already placed.

03:12.640 --> 03:13.210
that means we can.

03:13.220 --> 03:18.730
Imagine that all those rods are lined up on B only one rod is remaining on C which was the nth

03:18.730 --> 03:19.870
rod and.

03:21.490 --> 03:22.450
Now what I'll do.

03:22.450 --> 03:29.950
I’ll move this nth rod to B so let's move this nth rod to C, nth rod to C

03:31.530 --> 03:33.400
Or instead of C let’s say to

03:33.630 --> 03:38.160
So what I'll do is I'll just make a move and we’ll say cout from rod

03:39.540 --> 03:42.120
Make this move to to rod.

03:43.140 --> 03:47.010
So from wherever the nth one was there, just move it to the to rod.

03:47.550 --> 03:49.230
And now I have made a move.

03:49.230 --> 03:50.580
I placed it over there.

03:50.610 --> 03:57.540
Now, what we need to do is we have we know that right now there are N-1 rods on the helper rod

03:57.540 --> 03:57.930
right

03:57.960 --> 04:01.470
So we want to pick them from the helper rod and move to the to rod.

04:01.830 --> 04:04.950
by using the current rod, which is the from rod.

04:05.490 --> 04:12.330
So what will be my new recursion here it will be N-1 were on the helper rod, pick them from

04:12.330 --> 04:13.080
the helper road.

04:13.500 --> 04:15.750
Use the current rod which is from.

04:17.140 --> 04:20.050
And place them on the to rod

04:21.270 --> 04:21.570
Right.

04:22.050 --> 04:22.380
And.

04:23.790 --> 04:25.350
Let's write some base cases also.

04:26.320 --> 04:28.650
But what are these base cases?

04:29.070 --> 04:29.700
What's the base case, guys?

04:29.970 --> 04:30.300
Nothing.

04:30.300 --> 04:31.440
If N = 0

04:31.440 --> 04:32.280
If there is no.

04:32.280 --> 04:32.550
rod.

04:32.550 --> 04:35.160
Because you know N is always reducing.

04:35.160 --> 04:35.340
So.

04:35.340 --> 04:36.120
There is no rod, return zero.

04:37.170 --> 04:39.570
And let's see what we get.

04:40.620 --> 04:42.750
If N is 0, okay sorry, not return 0

04:42.750 --> 04:43.590
It's a void function.

04:43.590 --> 04:45.840
I just return that because I don't want to do anything.

04:46.450 --> 04:50.000
So if I have exactly one rod, that means there's only one rod on A.

04:50.010 --> 04:53.370
then I can simply pick that.

04:53.370 --> 04:56.010
Rod from A and place it on C, right?

04:56.010 --> 04:57.660
Let's see what happens on to.

04:59.800 --> 05:01.720
On to what's happening firstly.

05:01.760 --> 05:04.010
I'm picking that rod from two.

05:05.160 --> 05:05.600
Okay.

05:05.670 --> 05:06.270
Let me.

05:08.170 --> 05:08.860
What's happening.

05:09.270 --> 05:11.320
A to B we already discussed this.

05:11.320 --> 05:13.150
I guess A to B

05:15.970 --> 05:17.830
A to C and B to C.

05:18.460 --> 05:20.260
So as you can see, guys, what's happening?

05:21.900 --> 05:27.420
The small rod from A to B the second rod from A to C and the smaller rod again from A to B

05:28.050 --> 05:29.070
But so can you.

05:29.070 --> 05:31.050
Can you realize that.

05:34.570 --> 05:41.430
This the first call for this that means pick one rod from this by using C place it on B

05:41.500 --> 05:47.290
so I'm just placing your directly on B because it is exactly one rod so isn't it a sub problem to solve?

05:47.290 --> 05:51.940
2, first solve one right, to solve one first solve zero, so basically for.

05:52.210 --> 05:58.850
Let's talk about three to solve 3 rods Solve 2 rods to B, so right now what we are saying.

05:58.850 --> 05:59.860
is just ignore 3rd rod.

05:59.960 --> 06:03.460
place the 2 rods on the helper rod.

06:04.440 --> 06:06.460
tha's a sub problem right, so that now.

06:07.410 --> 06:16.330
solve it for 2 and place it on helper rod and by using the final rod, pick the last rod and place it there and then put all

06:16.330 --> 06:16.990
those two back.

06:17.620 --> 06:19.120
So that's what tower of hanoi is doing.

06:19.660 --> 06:22.240
And let's try about three.

06:24.840 --> 06:25.620
Of course you can.

06:25.920 --> 06:26.340
Okay.

06:26.370 --> 06:27.430
Do you want me to print.

06:27.510 --> 06:28.290
What's going on?

06:28.860 --> 06:29.850
Okay, let's print.

06:29.850 --> 06:30.960
as I said

06:31.650 --> 06:34.890
I know it's a little tough to understand.

06:37.050 --> 06:38.280
I'm doing my best here.

06:38.630 --> 06:38.970
So.

06:39.930 --> 06:40.200
Yeah.

06:42.570 --> 06:43.110
Okay.

06:43.690 --> 06:43.980
Okay.

06:44.670 --> 06:49.130
So three ABC will call 2 ACB, which will call one ABC right.

06:49.140 --> 06:51.030
So that means three.

06:51.030 --> 06:59.960
ABC goes here, calls 2 ACB, which calls one ABC, which calls zero ACB.

06:59.970 --> 07:02.130
But, you know, we don't have to worry about zero.

07:02.130 --> 07:05.860
So I'm just I'll just print it down that we don't get zero value cases.

07:05.880 --> 07:06.140
Yeah.

07:06.870 --> 07:08.820
The three ABC calls 2 ACB calls.

07:08.820 --> 07:09.030
one

07:09.030 --> 07:09.600
ABC.

07:10.110 --> 07:11.670
so now, when, one ABC is called.

07:12.780 --> 07:14.370
Will, just what does it mean?

07:14.640 --> 07:18.380
It just place one rod from A using B to C.

07:18.390 --> 07:21.180
So what we have done is we have just placed that one word from A to C.

07:22.230 --> 07:23.970
And now what will happen?

07:23.970 --> 07:30.060
and now what will happen will go back once because as you can easily see if there's just one rod to place 

07:30.060 --> 07:35.090
right now, this will be called which is N-1 helper from to, right.

07:35.100 --> 07:38.850
So again, that will be so for one that will be a zero thing, right.

07:38.970 --> 07:44.970
That's why returning from the base case and now will just place A to B now.

07:45.710 --> 07:47.670
So I don't know if I can.

07:49.450 --> 07:51.250
Like try harder here

07:51.260 --> 07:53.590
But I hope you understood well.

07:54.130 --> 07:57.890
And this is just one small thing to keep in mind.

07:57.910 --> 08:00.000
It is just dividing into sub problems.

08:00.790 --> 08:05.170
And yes, that sub problems are independent of my current problem.

08:06.130 --> 08:09.460
If I have 3 disks and I'm solving it for 2 disks.

08:10.450 --> 08:14.650
Those two disks are actually considering that these three disks are not there.

08:14.920 --> 08:16.150
That the 3rd disk is not there.

08:17.330 --> 08:20.780
to solve that for 2 disk somehow by ignoring the third disk.

08:21.110 --> 08:25.940
And if the two disk is solved, keep the third disk wherever it wants to be.

08:26.120 --> 08:28.940
And now again solve for those two disks by ignoring the third.

08:30.440 --> 08:30.890
And.

08:32.420 --> 08:33.560
Let me comment it.

08:35.310 --> 08:36.420
Let me make it.

08:36.420 --> 08:36.890
4

08:36.900 --> 08:38.370
So one thing that you'll realize there.

08:39.760 --> 08:47.050
One thing you realize that for 3 there were seven steps that we could have done right for 4.

08:48.280 --> 08:50.740
We have 15 steps for five.

08:50.920 --> 08:51.940
We have 16.

08:52.270 --> 08:52.660
We have.

08:53.560 --> 08:54.920
32, 31.

08:55.000 --> 08:57.310
steps for six.

08:57.490 --> 08:58.120
We have.

09:00.140 --> 09:01.190
63 steps.

09:01.190 --> 09:06.770
So is this something that you can realize that the answer is always equal 2 raise to  the power 

09:06.770 --> 09:07.850
N-1

09:12.430 --> 09:12.740
Yeah.

09:12.760 --> 09:14.890
So For 10 it will be 2 raise to the power.

09:14.890 --> 09:16.840
10, 1024 - 1

09:16.990 --> 09:22.060
So you can see that I don't think any human would be able to solve this.

09:22.930 --> 09:24.790
tower of hanoi for 10

09:25.810 --> 09:27.400
I mean, they can solve it but.

09:29.980 --> 09:31.330
They might not solve it as well.

09:31.720 --> 09:33.810
So it's taking 1023 steps.

09:33.820 --> 09:36.310
And if you perform all these steps one by one.

09:37.280 --> 09:41.630
You perform all these steps on by one, you'll realize that, yes, this is the final solution

09:42.050 --> 09:43.550
That's what recursion is doing.

09:44.030 --> 09:44.060
right.

09:45.580 --> 09:48.770
That's how we want to use recursion.

09:49.300 --> 09:51.280
We want we don't want to think how he's doing.

09:51.760 --> 09:52.990
We just want him to do it.

09:53.500 --> 09:54.280
that okay this do.

09:55.060 --> 09:55.840
This I will do.

09:55.870 --> 09:56.440
And then this.

09:56.440 --> 09:57.040
You do it again.

09:58.030 --> 09:58.540
Nothing else.

09:59.440 --> 09:59.680
cool.

10:00.280 --> 10:01.780
So thank you, everyone.

10:01.930 --> 10:04.300
And see you in the next part.