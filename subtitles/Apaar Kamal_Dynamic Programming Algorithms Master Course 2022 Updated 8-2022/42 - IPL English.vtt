WEBVTT

00:00.720 --> 00:02.070
Hello everyone, welcome back.

00:02.490 --> 00:03.750
So this is the second problem.

00:04.260 --> 00:05.370
And just remember this.

00:05.430 --> 00:12.180
The problem, I bring here, it is a follow up problem, the follow problem for SUPW.

00:13.020 --> 00:15.090
Just think of it in such a way.

00:16.240 --> 00:17.560
As we have discussed earlier.

00:18.190 --> 00:22.030
So there is always a follow up problem of a problem.

00:24.450 --> 00:24.660
Yeah.

00:24.940 --> 00:29.790
So in this, it says that there's an IPL auction something.

00:30.790 --> 00:36.640
And the match fees for them for each match in new season have been announced in advance.

00:37.180 --> 00:41.950
Each team has to enforce a mandatory rotation policy so that no player ever gets 3 matches in a row

00:43.330 --> 00:45.010
Just a little, little opposite.

00:45.490 --> 00:46.540
that here it say that

00:46.990 --> 00:49.090
Each player cannot.

00:50.430 --> 00:51.950
Play 3 matches in a row right.

00:52.540 --> 00:55.400
so nikhil is the captain chooses the team for each match.

00:55.580 --> 01:02.390
He wants to allocate a playing schedule for himself to maximize his earnings through match fees during

01:02.390 --> 01:02.750
the season.

01:04.090 --> 01:04.660
Basically.

01:05.590 --> 01:07.060
Let's say I have ten matches.

01:07.540 --> 01:08.630
I can be play matches.

01:08.630 --> 01:08.920
Right.

01:10.090 --> 01:15.250
I have to find out the maximum subset of this array, basically.

01:15.460 --> 01:18.640
It's a subset right, a SUPW problem as well.

01:18.970 --> 01:20.850
It was a subset indirectly.

01:21.100 --> 01:21.340
Right.

01:22.410 --> 01:29.400
So in that problem what happened we had to find out minimum such that no like no.

01:30.780 --> 01:35.370
So I have to pick at least one from the consecutive into the 3 days right?.

01:35.370 --> 01:36.690
In this What we have to do is just the opposite.

01:37.050 --> 01:38.520
I cannot play three days in a row.

01:38.760 --> 01:39.960
I can play two days in a row.

01:39.960 --> 01:40.590
One day in a row.

01:41.460 --> 01:41.790
But.

01:42.880 --> 01:43.030
Here.

01:43.100 --> 01:48.320
I have to find out the maximum value, you just try it yourself first and then we'll move on to this.

01:49.850 --> 01:53.080
It's very, very similar to the previous one.

01:53.960 --> 01:56.300
You can apply it any programming solution in this as well.

01:56.720 --> 01:59.340
But here's a slight trick involved.

01:59.360 --> 01:59.600
Right.

02:01.060 --> 02:01.240
Right.

02:01.600 --> 02:03.490
So let's discuss this.

02:03.670 --> 02:03.880
Okay.

02:04.450 --> 02:04.780
Okay.

02:08.290 --> 02:14.230
You can make some DP values, DP arrays then try to find the value or the best approach for this problem

02:14.230 --> 02:16.420
would be to learn from the previous problem.

02:17.380 --> 02:20.980
The previous problem was just a complement problem of this.

02:21.880 --> 02:27.190
In this, I cannot play three days in a row, in that I cannot leave three days in a row.

02:28.420 --> 02:32.290
It is a complement problem in that I have to maximize things in that I've do minimize things.

02:32.290 --> 02:36.300
So why don't I just pick up the sum of this whole array?

02:36.450 --> 02:42.710
let's say sum of all the values minus the answer to the previous problem, which is the SUPW

02:42.730 --> 02:43.240
 problem.

02:43.720 --> 02:44.610
For this array

02:45.620 --> 02:45.880
Right.

02:46.310 --> 02:48.200
What does SUPW problem gives me.

02:48.500 --> 02:49.280
It gives me.

02:49.640 --> 02:49.880
Okay.

02:49.880 --> 02:52.250
So that problem gives me this, which is the minimum.

02:54.720 --> 02:56.940
The minimum, sum such that.

02:56.940 --> 02:59.510
No three days in a row are not played kind of right.

02:59.700 --> 03:03.210
But in this, what I have to do is what if I just subtract everything from this?

03:03.900 --> 03:08.730
What if I subtract this subset from the sum, what I'll get, I get these values?

03:09.640 --> 03:13.480
Right, which is three, two, two, three, three, two.

03:13.990 --> 03:15.130
Which means it.

03:15.940 --> 03:18.420
By not playing these games one, one.

03:18.430 --> 03:19.420
And this and this one.

03:19.810 --> 03:20.800
What you can do is you can.

03:22.420 --> 03:22.770
Play.

03:22.900 --> 03:27.310
You can earn the maximum and also you will not played 3 days in a row.

03:27.550 --> 03:29.200
It's just the compliment of the previous problem.

03:29.200 --> 03:33.310
If you think about it, it's a very simple problem you can code it as well.

03:33.310 --> 03:35.500
Well, actually, we've already coded this.

03:35.500 --> 03:37.840
You just have to in the code.

03:37.840 --> 03:38.860
what you have to do is just.

03:40.150 --> 03:41.470
print sum - something

03:41.800 --> 03:43.060
And you have to find sum of the array.

03:45.170 --> 03:47.560
And I hope you got this.

03:47.570 --> 03:51.190
And sometimes problem are like this,  just remember this.

03:51.200 --> 03:55.610
Every DP problem is a follow up problem of a previous problem.

03:56.120 --> 04:02.240
So these are very basic problem and all the problems are kind of a follow up based on that basic problem.

04:03.880 --> 04:07.450
And we'll see more about this in the later sections as well.

04:08.080 --> 04:09.610
So thank you, everyone.

04:09.790 --> 04:10.420
See you In the next part.