WEBVTT

00:00.620 --> 00:01.320
Everyone.

00:01.320 --> 00:02.100
Welcome back.

00:02.280 --> 00:04.590
The last time we left the problem, we were here.

00:05.400 --> 00:08.520
You can see the complexity of the solution will be after.

00:09.570 --> 00:10.860
It will be identity.

00:10.860 --> 00:12.420
And how many eyes and how many Jews are.

00:12.420 --> 00:13.980
There are easy questions.

00:13.980 --> 00:16.530
What size and genes equals question period?

00:16.590 --> 00:17.580
I think so it will be.

00:18.600 --> 00:25.650
All Animal aid, if any evidence, I then must either say it is or end into him, which is a fairly

00:25.650 --> 00:26.610
good complexity.

00:27.120 --> 00:27.390
They.

00:28.620 --> 00:33.870
But of course, I can always reduce the space complexity of these solutions of all the new programming

00:34.770 --> 00:35.430
problems.

00:35.490 --> 00:40.830
We can always reduce their face complexity, space, complexities, memory, complexity, the memory

00:40.830 --> 00:48.840
they are taking up or that please, you know, just because they're down in the in the in the other

00:48.840 --> 00:51.660
section, there's a section called Tips and Tricks.

00:51.660 --> 00:58.740
I guess in this section, please see the lecture named Reduce Memory Complexity.

00:59.310 --> 01:03.090
So you can always reduce the memory complexity of this solution.

01:03.510 --> 01:10.890
But there's one thing that I noticed in in spite of here is what is very high constraints, right?

01:11.220 --> 01:16.580
So of course, the memory complexity will reduce, but you can complexity will still be seen eight,

01:16.680 --> 01:21.270
which is 500 and is about four square eight, which is too much.

01:22.110 --> 01:28.470
What I would suggest is I would suggest of not solving this problem on spot but instead move to lead

01:28.470 --> 01:34.650
could like and just solve this problem longest common subsequent from lead code because this is standard

01:34.650 --> 01:35.760
running programming problem.

01:36.180 --> 01:37.860
But even this is a very standard.

01:38.510 --> 01:44.100
I mean, the problems are same, but with the bigger constraints it requires some additional things

01:44.100 --> 01:46.230
which is actually not dynamic programming.

01:47.250 --> 01:47.580
Alright.

01:48.000 --> 01:49.230
So this requires.

01:51.180 --> 01:52.770
Knowledge of some automaton.

01:53.070 --> 01:58.920
And of course, which is not any programming, but I've already made a video on it, but it's not in

01:58.920 --> 01:59.340
discourse.

01:59.970 --> 02:05.430
So just don't solve this problem, but try and solve it on our little code.

02:05.640 --> 02:07.290
And it is.

02:08.500 --> 02:08.730
Yeah.

02:08.770 --> 02:11.230
The land is only 24,000.

02:11.230 --> 02:12.220
2000 will, of course.

02:12.260 --> 02:15.260
Look, and this is a standard unemployment problem rate.

02:15.760 --> 02:22.180
Similarly, I just say that if you're trying the longest common substring problem, you can try it yourself.

02:22.210 --> 02:23.360
It's a very easy problem.

02:23.390 --> 02:29.320
I try to just leave it up to you or not explain this, but please again, don't try it spot because

02:29.720 --> 02:33.010
you'll try the longest common substring problem you'll find with the code on spot.

02:33.050 --> 02:35.540
The test cases are very cute, right?

02:35.980 --> 02:41.770
So with this constraint, the dynamic programming solution will not work for the longest comments.

02:42.490 --> 02:47.170
Because again, the longest comments of things dynamic programming solution is off and interim.

02:47.530 --> 02:49.120
Or we can say of of and square.

02:50.380 --> 02:53.020
But here we can see and is still huge.

02:53.020 --> 02:57.040
We just went to ten is about five eight.

02:57.040 --> 02:58.330
So of course it will not work.

02:58.810 --> 03:03.460
So in this case, again, these are specific data structure which is required, which is called.

03:04.350 --> 03:05.580
Automata or.

03:06.520 --> 03:09.490
Suffix automata or end suffix eddies affixes.

03:09.490 --> 03:10.030
All of the.

03:10.120 --> 03:14.110
All of them can work in this case because the constraints are very high.

03:14.440 --> 03:19.240
But this problem can also be solved using dynamic programming with lower constraints.

03:20.260 --> 03:24.940
If they're constrained this thousand or 2000, basically Orphan Square solution would work with dynamic

03:24.940 --> 03:25.420
programming.

03:26.360 --> 03:27.200
Oh, yeah.

03:27.350 --> 03:29.210
Do not try this problem over here as well.

03:29.930 --> 03:36.890
And if you are very excited or interesting, then of course you can read about automata suffix any subject

03:36.890 --> 03:37.100
for you.

03:37.100 --> 03:41.480
Then how do they work and or check out according to the programming course.

03:42.710 --> 03:50.630
And similarly for Hong Kong and subsequent write on legal rate and the relation is very easy, very

03:50.630 --> 03:51.050
small.

03:51.050 --> 03:52.640
So I'm not pointing it out.

03:53.000 --> 03:54.710
I'll just leave it up to you to quote it.

03:56.540 --> 03:57.230
In the next part.
