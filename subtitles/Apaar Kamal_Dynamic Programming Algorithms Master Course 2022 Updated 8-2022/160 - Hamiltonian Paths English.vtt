WEBVTT

00:00.910 --> 00:01.750
Hi, everyone.

00:01.960 --> 00:05.940
So let's begin with DP with bird masking, right?

00:06.160 --> 00:13.300
So it is actually just normal dynamic programming, but the special thing is that we will use bit mask

00:13.720 --> 00:16.350
just for the sake of memorization.

00:16.600 --> 00:20.710
So it will speed up things and that's why it's termed as deep with bird masking.

00:21.160 --> 00:28.810
So generally what happens is when there are some problems whose brute force solution requires or is

00:28.810 --> 00:35.570
a n factorial solution, let's if a brute force solution is an factorial generally, then we can apply

00:36.070 --> 00:37.330
DP with bit mask, right?

00:37.690 --> 00:45.370
So let's understand what is high Hamiltonian part and then we can move ahead with this solution, right?

00:45.370 --> 00:49.960
So initially, you know, I won't directly jump to the pivot bit, but initially we'll see.

00:49.960 --> 00:51.760
The brute force will go into brute force.

00:52.150 --> 00:53.380
Then we move on to DP.

00:53.680 --> 01:01.030
Right, so Hamiltonian path, this is about in the direct undirected graph that results each vertex

01:01.030 --> 01:01.880
exactly once.

01:01.900 --> 01:02.800
So this is important.

01:03.580 --> 01:05.350
We can't visit any vertex trace.

01:05.680 --> 01:06.010
Right.

01:06.370 --> 01:13.630
And the problem to check with the problem to check whether a graph, whether it's are detected or undirected

01:13.840 --> 01:18.640
contains the Hamiltonian path is an empty and b complete problem, which we all know rather than be

01:18.640 --> 01:19.090
complete.

01:20.020 --> 01:24.670
So so is the problem of finding all the Hamiltonian parts in a graph, right?

01:24.670 --> 01:27.010
So there can be various Hamiltonian bonds in the graph.

01:27.250 --> 01:31.660
But right now what we will do is we'll just we just want to find out whether.

01:32.920 --> 01:34.810
Hamiltonian paths exist.

01:35.840 --> 01:37.130
Hamiltonian, but.

01:39.230 --> 01:40.820
Exist in this graph.

01:45.080 --> 01:45.330
Right.

01:45.980 --> 01:47.360
So this is the problem.

01:47.990 --> 01:50.820
So how to check whether Hamiltonian paths will exist in the graph?

01:50.840 --> 01:52.610
So what is a Hamiltonian by, first of all?

01:52.640 --> 01:54.560
So we'll start from and you one word axes.

01:54.900 --> 01:59.780
Then we will see simply traverse the graph and check whether a part exists in this graph.

02:00.050 --> 02:00.320
Right.

02:00.680 --> 02:04.460
So, for example, if I start from zero, then I can go to one.

02:04.790 --> 02:07.040
I can go to three and I can go to two.

02:07.400 --> 02:13.550
This is in Hamiltonian path because I visited 01113 once, two once, and I have visited all the nodes

02:13.550 --> 02:14.060
in my graph.

02:14.690 --> 02:14.990
Right.

02:15.170 --> 02:16.970
So which visits each vertex?

02:17.180 --> 02:17.780
Exactly.

02:17.840 --> 02:19.580
And so this is the important part.

02:20.090 --> 02:23.030
The second one can be 0 to 1 to 2 to 3.

02:24.030 --> 02:33.410
Other ones can be two, two, three, two, one, two, zero and 32221208.

02:33.840 --> 02:37.290
So can you figure out any other Hamiltonian path?

02:37.300 --> 02:39.750
So will there be a bar that starts from one?

02:40.170 --> 02:46.020
So if I go from one, I go to two, I go to three that I can not go to zero from three, because otherwise

02:46.020 --> 02:47.340
I have to traverse one again.

02:47.970 --> 02:52.860
I cannot reverse one one again because I have to land on each one of them exactly once.

02:53.460 --> 02:53.850
Correct.

02:55.270 --> 03:00.910
So we can see that there are four Hamiltonian paths which exist in this graph.

03:01.150 --> 03:02.780
But how many parts are possible?

03:02.800 --> 03:08.320
For example, let's just say that how many parts can be possible in this, right?

03:08.500 --> 03:13.420
So we can see there can be four factorial parts in this because this is a graph of four.

03:13.420 --> 03:13.810
Right.

03:14.080 --> 03:15.640
So four factorial is how much?

03:15.640 --> 03:16.240
24.

03:17.500 --> 03:17.830
Correct.

03:17.980 --> 03:23.110
So out of 24 parts, we had only four parts that were possible that are Hamiltonian parts.

03:23.110 --> 03:23.410
Right.

03:23.770 --> 03:27.520
So what will be the brute force solution of this particular problem?

03:27.520 --> 03:32.530
If I want you to, let's see if I ask you to call it a brute force solution of this and how will you

03:32.530 --> 03:33.910
call it of what we recorded?

03:34.570 --> 03:36.700
So the brute force audition will be very simple.

03:36.910 --> 03:38.000
What we will do is will.

03:38.650 --> 03:40.750
It will be basically backtracking.

03:41.110 --> 03:41.530
Right.

03:41.530 --> 03:48.260
And if not backtracking, then we can also apply a brute force solution by using factories.

03:48.790 --> 03:49.120
Right.

03:49.630 --> 03:50.890
So let's discuss both.

03:50.920 --> 03:52.540
So in backtracking, what will happen?

03:52.540 --> 03:58.060
I would start from a node and we can start from any node and we will start from every node because as

03:58.060 --> 04:01.240
we saw that there is no Hamiltonian path possible from one, right.

04:01.480 --> 04:07.240
So that's why for any graph, if I am trying to find a Hamiltonian, but there's a normal backtracking

04:07.240 --> 04:07.750
solution.

04:07.990 --> 04:13.630
Just keep on going in the DFS and just keep the visited.

04:14.050 --> 04:17.170
Let's say if it is visitor, then market visitor, then move on.

04:17.320 --> 04:24.040
And finally, let's just, you know, never visit any element trace and finally figure out whether all

04:24.040 --> 04:26.050
of the vertices are used in the graph or not.

04:26.470 --> 04:26.740
Right.

04:26.920 --> 04:32.380
So I'm not quoting the backtracking solution, which is very, very, very, very easy.

04:32.560 --> 04:32.890
Right.

04:33.190 --> 04:34.960
So I will leave it to you to call it.

04:35.410 --> 04:39.230
But I will I will miserably call the factorial solution.

04:39.410 --> 04:41.200
So what is the factorial solution?

04:41.590 --> 04:43.780
So what we do is we have this for the numbers.

04:43.780 --> 04:44.890
One, two, three, four, eight.

04:45.100 --> 04:47.680
And what we can do is we can try all factorial.

04:49.320 --> 04:50.700
Bump permutations, basically.

04:50.700 --> 04:50.970
Right.

04:51.240 --> 04:58.560
So we can try all permutations of this, which is sorry, 301230231 and so on.

04:58.560 --> 05:01.200
There will be 24 such permutations.

05:01.530 --> 05:02.190
Such a.

05:03.490 --> 05:05.560
Different combinations, right?

05:05.920 --> 05:11.650
And after that, what we can do is when we when we have found one particular combination, we can simply

05:11.650 --> 05:13.030
try to iterate over the graph.

05:13.540 --> 05:16.000
If I start from zero, I go to one, I go to do I go to three?

05:16.240 --> 05:19.430
That means we don't have to keep this check.

05:19.450 --> 05:26.680
Now, that is if an element is visited twice or not, because we see that in fact, no particular vertex

05:26.680 --> 05:27.670
will be visited twice.

05:28.060 --> 05:31.440
And secondly, yeah.

05:31.690 --> 05:36.430
Secondly, what we can do is we can just, you know, simply keep a check of.

05:38.150 --> 05:44.560
We just have to keep a check that whether the conjugative elements for example in this spot 0123, whether

05:44.560 --> 05:49.900
0 to 1 is connected or not, 1 to 3 is connected or not 1 to 2 and 2 to 3 is connected or not.

05:50.170 --> 05:50.430
Right.

05:50.560 --> 05:54.420
For that, we can just keep the edges in the list and quickly check it.

05:54.490 --> 05:55.960
So I hope this is very possible.

05:55.960 --> 05:56.320
Right?

05:56.560 --> 05:58.180
I hope this is very understandable.

05:58.420 --> 06:01.270
And you all must have understood this brute force solution.

06:01.570 --> 06:04.180
For all Victorians, just try that.

06:04.180 --> 06:06.340
But just try reversing that by then.

06:06.340 --> 06:09.790
Check whether edges between these two exist or not.

06:10.090 --> 06:12.760
If it's possible, that means there was a particular.

06:14.920 --> 06:17.650
There was this graph in which I was able to visit it.

06:18.100 --> 06:18.400
Right.

06:19.150 --> 06:21.620
So there's a Hamiltonian path that we have found.

06:21.640 --> 06:23.740
So in the next we will quickly code it.

06:23.740 --> 06:28.900
And after that, we'll try a third brute force solution, which is a recursive approach.

06:29.470 --> 06:29.710
Right.

06:30.350 --> 06:32.830
Which should be very similar to the backtracking.

06:32.830 --> 06:39.610
But in that we will just keep that which node is visited and which naught is not and which is left and

06:39.610 --> 06:40.150
other things.

06:40.960 --> 06:41.260
Cool.

06:41.440 --> 06:43.090
So see in the next part and.
