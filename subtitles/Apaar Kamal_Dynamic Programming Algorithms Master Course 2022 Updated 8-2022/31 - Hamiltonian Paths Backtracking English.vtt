WEBVTT

00:00.780 --> 00:01.500
Hello, everyone.

00:01.680 --> 00:08.130
Let's understand what our Hamiltonian spots so Hamiltonian path is about in a directed or undirected

00:08.130 --> 00:11.650
graph that visits each vertex exactly once.

00:12.120 --> 00:17.580
A problem to check whether a graph which is undirected or directed contains a Hamiltonian bothered an

00:17.580 --> 00:18.780
and b complete problem.

00:19.410 --> 00:23.830
So is the problem of finding all Hamiltonian paths in the graph, right?

00:24.090 --> 00:28.410
So the Hamiltonian part is a very simple thing.

00:28.420 --> 00:33.420
It says it's a normal part where we have to visit every vertex.

00:33.420 --> 00:35.250
Exactly what that means.

00:35.250 --> 00:36.840
I cannot visit any vertex trace.

00:37.260 --> 00:37.610
Correct.

00:38.040 --> 00:44.970
So for example, as per this graph, if I start from zero, let's I go to one, I go to two and I go

00:44.970 --> 00:45.450
to three.

00:45.930 --> 00:48.990
So I visited all the world, all the verdict.

00:48.990 --> 00:49.830
Exactly once.

00:49.900 --> 00:50.070
Right.

00:50.130 --> 00:51.630
So there's no condition for edge.

00:52.140 --> 00:52.440
Right.

00:52.560 --> 00:55.410
You may leave some edges in the path, of course.

00:56.310 --> 00:57.380
And yeah.

00:57.690 --> 00:59.370
Then let's see if I start from one.

00:59.880 --> 01:03.360
If I start from when I let's say I go to two, I go to three.

01:03.570 --> 01:07.440
But then I will not be able to go to zero without going through one.

01:07.440 --> 01:07.770
Right.

01:07.770 --> 01:09.420
So it will be one and then zero.

01:09.570 --> 01:11.340
So this is not a Hamiltonian, but.

01:11.760 --> 01:12.120
Correct.

01:12.420 --> 01:13.770
Why is this not a Hamiltonian?

01:13.770 --> 01:14.520
But because.

01:15.900 --> 01:18.330
The simple reason I'm visiting one place.

01:18.630 --> 01:25.110
I have to visit every vertex exactly once, and they can be either Hamiltonian bonds here as well.

01:25.110 --> 01:27.960
So starting from one, I will not get any Hamiltonian but.

01:28.320 --> 01:30.570
But starting from three.

01:30.900 --> 01:31.920
Yes I can get it.

01:31.920 --> 01:33.780
Three, two, one, zero.

01:35.700 --> 01:36.000
Right.

01:36.360 --> 01:41.310
So there can be various, like many Hamiltonian paths in a particular graph.

01:41.880 --> 01:47.010
And what we have to do is we just have to check that if I have been given a graph, will there be a

01:47.010 --> 01:48.640
Hamiltonian path in it or not?

01:49.190 --> 01:51.350
I just have to check whether there will be a part or not.

01:51.370 --> 01:51.890
Nothing else.

01:52.290 --> 01:52.560
Right.

01:53.190 --> 01:55.800
So what's the best way to do that?

01:55.800 --> 01:56.050
Right.

01:56.080 --> 01:59.100
So before moving forward, let's understand the brute force approach.

01:59.640 --> 02:03.870
So what will be the brute force approach to check if a Hamiltonian by exist or not?

02:04.470 --> 02:12.740
So if if there's an Hamiltonian part, it will be one of the permutations of or all the vertex is right.

02:12.750 --> 02:15.590
For example, basically here we have forward, right?

02:15.600 --> 02:21.270
So we will have four factorial different combinations of these vertex is there can be four factorial

02:21.270 --> 02:21.960
different parts.

02:22.470 --> 02:25.650
So for all the paths, what I can do is I can go and try it out.

02:26.280 --> 02:28.680
Let's see, this is one of the examples.

02:28.920 --> 02:30.360
Let's say I have zero one, two, three.

02:30.360 --> 02:32.580
Then what a good thing to simply check from zero.

02:32.580 --> 02:33.690
Can I go to one or not?

02:33.720 --> 02:34.920
Yes, I can from one.

02:34.920 --> 02:35.880
Can I go to two or not.

02:35.880 --> 02:38.460
Yes I can from to get negative three or not.

02:38.460 --> 02:42.000
And from trig and A from three, I don't have to go anywhere.

02:43.020 --> 02:49.560
So what I can do is for every consecutive pair of all the four factorial different combinations, what

02:49.560 --> 02:54.510
I can do is I can check for all the consecutive pairs, like there's an edge between these pairs or

02:54.510 --> 02:54.710
not.

02:54.750 --> 02:58.770
If there's an edge between these figures, that means the answer is possible.

02:59.120 --> 02:59.320
Right.

02:59.340 --> 03:00.840
So that is a brute force solution.

03:00.840 --> 03:06.210
And what is the dang complexity of the solution that will have for the first solution will have and

03:06.210 --> 03:11.400
factorial different combinations into n for checking whether the edge exists or not.

03:11.850 --> 03:12.210
Correct.

03:12.510 --> 03:14.910
So this is a very high complexity solution.

03:14.910 --> 03:16.440
That is the preferred solution.

03:16.710 --> 03:17.770
But can we do better?

03:19.020 --> 03:24.730
Yes, we can try and do the backtrack solution.

03:24.990 --> 03:27.150
Of course, there are other solutions for this problem.

03:27.150 --> 03:29.970
For example, there is a solution which is recursive.

03:31.380 --> 03:31.740
Right.

03:32.040 --> 03:35.220
I'm not saying it is backtracking, but it is a recursive solution.

03:35.220 --> 03:41.420
Will see this recursive solution in the later sections in DP with big mosque section of the schools

03:41.420 --> 03:41.780
state.

03:41.940 --> 03:45.120
So that said exemplars memory memory solution that we'll see.

03:45.120 --> 03:51.280
And then after that we can see we can also see in the in the follow up problem that I've taken the pivot

03:51.300 --> 03:57.450
bit mask there, we have used dynamic programming and took help of math to solve the same problem.

03:58.020 --> 04:00.990
Right, which reduces down the complexity even further.

04:01.920 --> 04:07.500
So yeah, but before moving there, let's just concentrate on the backtracking solution.

04:07.800 --> 04:09.960
So for the backtracking solution, what can I do?

04:09.960 --> 04:14.760
What is the best way to backtrack and figure out whether a Hamiltonian by the exist or not?

04:16.090 --> 04:18.130
So it's very simple, right?

04:18.250 --> 04:22.240
I can start from any node straight or I can start from every node.

04:22.600 --> 04:23.770
So let's start from zero.

04:23.980 --> 04:26.230
And then what I'll do is I'll just keep up with the genetic.

04:27.540 --> 04:27.840
Right.

04:28.020 --> 04:29.250
I can keep it straight, Eddie.

04:29.430 --> 04:33.660
For example, let's say the system is genetic, and this will mean whether a node is visited or not

04:33.660 --> 04:35.040
so that I don't visit it again.

04:35.700 --> 04:36.030
Correct.

04:36.390 --> 04:40.110
So initially, let's say the arrays filled with zeros.

04:40.110 --> 04:43.320
And finally, I'll start from I'll initially start from zero.

04:43.320 --> 04:45.130
I just perform the backtrack.

04:45.150 --> 04:46.920
Basically, I perform the recursion.

04:46.920 --> 04:48.900
I'll go deeper insight.

04:48.900 --> 04:53.730
And when I'm visiting a node, when I'm on a particular vertex, I'll market as visited so that I don't

04:53.730 --> 04:54.480
visit it again.

04:55.050 --> 04:55.380
Correct.

04:55.560 --> 05:00.120
And also, I'll keep a count count of the number of nodes that I visited.

05:00.450 --> 05:00.670
Right.

05:00.900 --> 05:04.350
So count of nodes over this is that I have visited.

05:06.490 --> 05:07.490
I have visited yet.

05:08.620 --> 05:14.320
And then let's do a dry run over here so that there's no confusion on what's happening.

05:14.330 --> 05:17.350
Let's let it take some time for more minutes.

05:18.390 --> 05:18.690
Good.

05:19.050 --> 05:22.180
So what I'll do is I'll start from ten one zero.

05:22.200 --> 05:28.530
I'll market has visited a utility market with my it has visited so I'm just removing zeros from one.

05:28.800 --> 05:31.140
So I've marked this zero as visited.

05:31.830 --> 05:35.220
Now what I'll do is the number, the count of the nodes have.

05:36.430 --> 05:36.940
Being one.

05:36.940 --> 05:38.830
That means the number of nodes I visited is one.

05:39.130 --> 05:41.920
Now from zero I can go to one because one was not visited.

05:41.950 --> 05:44.890
So I just go to and then from one I can go to two.

05:45.870 --> 05:46.290
Correct.

05:46.650 --> 05:49.710
And from two, I can go to three because it was not visible.

05:49.890 --> 05:56.100
So here you'll see that the count of note in the end will be four that will have visited all the nodes

05:56.100 --> 05:56.910
in my graph.

05:56.910 --> 05:58.260
So here I'll get in Hamiltonian.

05:58.260 --> 06:04.410
But now let's try a different approach, which is starting from one letter and starting from one or

06:04.410 --> 06:04.920
number one.

06:05.250 --> 06:06.060
So I'll market it.

06:06.150 --> 06:08.400
Visited the number of nodes I visited is one.

06:08.730 --> 06:10.390
Then from one I can go to zero.

06:10.400 --> 06:12.420
Else I can go towards I can do three also.

06:12.420 --> 06:12.720
Right?

06:12.780 --> 06:14.190
So let's go to zero.

06:14.850 --> 06:17.460
So from when I'm moving to zero I'll Margaret is visited.

06:17.460 --> 06:21.240
So the number of nodes that I visited is two, then I'll come back.

06:21.900 --> 06:22.220
Right.

06:22.680 --> 06:24.570
So what is the meaning of coming back.

06:24.570 --> 06:28.230
That means if, if I'm going from 1 to 0, I'm going to come back.

06:28.440 --> 06:31.590
So coming back means any Margaret is unvisited.

06:31.590 --> 06:38.340
Again, this is the most important part because let's say this, this was also an edge, right?

06:38.640 --> 06:44.490
So when I'm visiting some particular node I and when I'm coming back from it, that means I did not

06:44.490 --> 06:49.740
find any further angle or a further pod from that particular node.

06:49.770 --> 06:53.280
So if I did not find any path and just marketed and visited, right.

06:53.580 --> 06:58.770
So when I visited a node I'll market is visited and when I come back, when I return back from the node,

06:59.040 --> 07:01.410
I simply market is unvisited.

07:01.800 --> 07:04.950
This is the most important part of this bag tracking, right?

07:05.130 --> 07:08.700
That if you're going through a part that's good going find a path.

07:08.700 --> 07:11.040
If it exists, that's great return true.

07:11.250 --> 07:17.520
Otherwise if you don't find it, you unvisited, you unlock the same thing or you change its value to

07:17.520 --> 07:18.180
something else.

07:18.180 --> 07:24.750
That means I did not go through the line, but I come back and I try going on to the different path,

07:25.140 --> 07:25.470
right?

07:26.310 --> 07:28.190
So I ultimately unvisited right.

07:28.410 --> 07:30.450
So the solution is very simple.

07:31.680 --> 07:38.730
Go to a node or let's say let's call it DFS only or we can call it back, dig late or let's call it

07:38.730 --> 07:39.030
port.

07:39.030 --> 07:40.830
So I learned a function called part.

07:41.190 --> 07:46.080
And in this what I'll do is whenever I'm going to any normal market, that market is visited.

07:46.440 --> 07:51.810
I go to some other nodes, let's say part of X, that means all the other bits are connected to it and

07:53.070 --> 07:55.080
the visited of x is zero.

07:55.980 --> 07:56.400
Correct?

07:56.400 --> 07:57.600
That means it was not visited.

07:57.600 --> 08:01.110
I just go and visited and also, you know, increment the count.

08:01.500 --> 08:02.510
I have to keep this going.

08:02.520 --> 08:04.430
Otherwise I have to just check again in again there.

08:04.440 --> 08:05.670
How many were also visited?

08:05.910 --> 08:07.740
So much better just to keep a count.

08:08.070 --> 08:15.030
And finally, when I'm coming back from when I'm just returning back from the dead node, I simply market

08:15.030 --> 08:16.440
as unvisited.

08:17.550 --> 08:21.560
So in the next problem, in the next tutorial, let's just implement it.
