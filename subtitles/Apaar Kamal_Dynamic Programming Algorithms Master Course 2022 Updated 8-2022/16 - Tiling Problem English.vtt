WEBVTT

00:01.120 --> 00:03.100
so you have learned the basics of recursion.

00:03.180 --> 00:09.880
Now we would be looking at some quick thinking problems and would will see how you can create recurrences

00:09.880 --> 00:11.800
for some of these problems.

00:12.040 --> 00:16.750
So the idea is how do you break down a problem and you find out the recurrence?

00:16.800 --> 00:18.760
Okay, let's go through this question.

00:18.910 --> 00:26.890
Given a 4 X n board, we are given a 4 X n board and there are tiles of size four,

00:26.890 --> 00:27.430
cross one.

00:27.970 --> 00:32.010
We need to find the number of ways to fill the given board using four cross one tiles.

00:32.080 --> 00:32.350
Okay.

00:32.860 --> 00:36.400
So basically there is a tile of four cross one.

00:36.910 --> 00:39.820
Or it could be like this also one cross four.

00:40.450 --> 00:47.380
Or tile can be placed horizontally as one cross four or it can be placed vertically as four cross one

00:47.380 --> 00:47.980
tile as well.

00:48.550 --> 00:49.450
So let's see.

00:49.450 --> 00:51.150
Let's see how we can solve this problem.

00:51.160 --> 00:51.850
So we are given.

00:53.070 --> 00:53.880
Board like this.

00:55.860 --> 01:01.110
So it is four units long and N units wide.

01:01.800 --> 01:08.940
What you can do, you can put a tile inside this boat either vertically like this, or you can place

01:08.940 --> 01:11.520
tiles horizontally like this.

01:12.300 --> 01:16.110
So to fill up this vertical space, you would need four tiles in this case.

01:16.710 --> 01:20.580
Or maybe again, you can put vertically, vertically, vertically or horizontally.

01:21.150 --> 01:23.130
We need to find out in how many ways.

01:24.400 --> 01:27.190
How many ways are there to fill this board?

01:27.490 --> 01:27.760
Okay.

01:28.870 --> 01:35.080
So what we have learnt in recursion is, we will try to break down this problem into smaller sub problems.

01:35.620 --> 01:36.340
So what I can say.

01:36.340 --> 01:38.170
Okay, let's say we have a board.

01:38.590 --> 01:38.920
Okay.

01:39.680 --> 01:42.730
And what can we possibilities of filling this board.

01:42.760 --> 01:50.180
Let's say this is the board of size N, and let's suppose we put the first tile in the vertical orientation.

01:50.210 --> 01:51.520
Okay, we fixed this tile.

01:52.360 --> 01:55.000
So what we are left with, we are left with a sub problem.

01:55.030 --> 01:56.200
So what is a sub problem?

01:56.740 --> 01:59.570
This is the sub problem of size.

01:59.590 --> 01:59.930
What?

02:00.210 --> 02:04.180
What would be the number of ways to fill the remaining board?

02:04.450 --> 02:04.750
Okay.

02:05.350 --> 02:12.790
So this sub problem is of size N minus one because we have already put one tile in this orientation.

02:12.790 --> 02:13.010
Okay.

02:14.250 --> 02:14.610
So.

02:15.180 --> 02:16.950
Or what could be another option?

02:16.950 --> 02:21.510
Another option could be we first put the tile in the.

02:23.640 --> 02:24.920
Horizontal layout.

02:25.050 --> 02:30.090
So if you put a tile like this, then you cannot place tiles vertically on the top of it.

02:30.110 --> 02:36.630
You have only one options to place tiles on the top of it, and that is you have to place all these

02:36.630 --> 02:37.830
four tiles horizontally.

02:37.830 --> 02:39.920
So we have placed four tiles.

02:39.990 --> 02:41.520
T1 T2 T3 T4

02:42.060 --> 02:43.620
But this is only one combination.

02:43.620 --> 02:43.790
Okay?

02:43.800 --> 02:44.850
This is one combination.

02:45.300 --> 02:50.670
And we also need to find out in how many ways we can filled out the remaining board.

02:51.810 --> 02:54.450
Now we know this tile and this four units.

02:55.170 --> 02:59.910
This is also four units and this is what this is N minus four units.

03:00.880 --> 03:07.950
can I say if F(n) is the number of ways to fill this entire board then.

03:09.160 --> 03:12.250
f(n) would be equal to some of these two options.

03:12.280 --> 03:14.290
There are only two options to start with.

03:14.800 --> 03:18.010
Either you place the tile vertically or you placed it horizontally.

03:18.310 --> 03:21.520
So the number of ways to fill this board would be F of N minus one.

03:22.300 --> 03:26.140
And the number of ways to fill this board would be a f of N minus four.

03:27.040 --> 03:33.940
so can I say F(n) is nothing but sum of these two options that is equal to F of n minus one plus

03:34.510 --> 03:35.650
f of n minus four.

03:36.900 --> 03:37.800
That makes sense.

03:38.100 --> 03:38.330
Okay.

03:38.910 --> 03:41.570
That is a recurrence that you can easily code up.

03:42.060 --> 03:45.840
to find out in how many ways board can be filled.

03:46.260 --> 03:47.660
Now you got the recurrence.

03:48.090 --> 03:50.070
You need to think of the base case.

03:50.380 --> 03:52.680
You need to think of the base case.

03:53.780 --> 03:55.670
So can you say if N is zero.

03:56.540 --> 03:57.350
If N is zero.

03:58.190 --> 04:00.260
There would be only one way.

04:00.920 --> 04:01.130
Okay.

04:02.150 --> 04:05.870
Or if N is one, then also there would be only one way.

04:06.800 --> 04:08.180
What about N equal to two?

04:09.690 --> 04:11.040
for N Equal to 2, is also one way.

04:12.330 --> 04:16.350
Because if you have a board of size two, you can only place two tiles.

04:16.890 --> 04:19.890
If you have N equal to three, then also you have only one way.

04:20.640 --> 04:22.170
If you have N equal to four.

04:22.720 --> 04:22.970
Okay.

04:24.150 --> 04:26.340
So N equal to three is also one way.

04:27.090 --> 04:33.510
But if you have N equal to four, then you have 2 ways either place, all of them as vertically or

04:33.630 --> 04:36.660
you place them as horizontally, like on top of each other.

04:36.990 --> 04:44.520
It would be a 4 X 4 grid, but in this case I can say that for, N that is less than equal to

04:44.520 --> 04:45.360
three the answer is one.

04:45.360 --> 04:46.600
so base case would be if.

04:47.190 --> 04:48.810
N is less than equal to three.

04:50.010 --> 04:50.940
I will return one.

04:51.810 --> 04:52.110
Okay.

04:52.680 --> 04:57.300
Otherwise I will return answer as F of an minus one plus F of n minus four.

04:57.820 --> 04:59.010
This is your base case.

05:00.330 --> 05:02.070
And this is your recursive case.

05:02.550 --> 05:08.820
So you can also verify from the recursive case that if board length is four then your answer is f(n-1)

05:08.820 --> 05:12.840
that is F of three, that is one plus f(n-4).

05:12.840 --> 05:13.530
That is zero.

05:14.170 --> 05:15.060
That is also one.

05:16.290 --> 05:20.100
That means for N equal to four, using this recurrence, you get the answer as two.

05:20.640 --> 05:23.850
Which is also true because we have seen these diagrams.

05:25.170 --> 05:30.360
I hope you've understood this problem and you can easily solve it using recursion.

05:30.630 --> 05:38.460
And later on, once you learn dynamic programming, you will find that this problem also has overlapping

05:38.580 --> 05:39.120
sub problems.

05:39.490 --> 05:39.810
Right.

05:40.290 --> 05:45.110
So let me tell you what happens if you compute for N equal to lets say 6.

05:45.810 --> 05:49.500
So you make a call on N minus one and N minus four.

05:50.040 --> 05:51.010
You're making two calls.

05:51.030 --> 05:52.110
You make a call on five.

05:52.860 --> 05:53.820
And you're making a call.

05:53.820 --> 05:55.140
on two from five.

05:55.140 --> 05:56.430
You're making a call on four.

05:56.910 --> 06:00.090
And you're making a call on one from two you're making a call on one.

06:00.270 --> 06:02.700
And 2 is actually a base case.

06:02.700 --> 06:04.170
Okay, so it is less than three.

06:04.170 --> 06:06.420
You're not making a call from four.

06:08.250 --> 06:09.990
You would be making a call to three.

06:10.530 --> 06:13.350
And from four you're also going to make a call to zero.

06:13.850 --> 06:15.290
Let's take a bigger example.

06:15.300 --> 06:16.230
lets say N is seven.

06:16.320 --> 06:19.740
So seven minus one, six and seven minus four.

06:19.740 --> 06:20.340
That is three.

06:20.340 --> 06:25.800
So what you can observe is there would be some states which you are computing again and again.

06:26.010 --> 06:31.800
That is a concept of overlapping sub problems that we would do in dynamic programming and.

06:34.090 --> 06:39.820
And in that case you can add some optimization to just make it work in linear time, that we're not concerned

06:39.820 --> 06:40.180
right now.

06:40.180 --> 06:45.100
The only thing was you should know how to derive the recurrence and how to solve this problem.

06:45.100 --> 06:46.060
I hope that is cleared.