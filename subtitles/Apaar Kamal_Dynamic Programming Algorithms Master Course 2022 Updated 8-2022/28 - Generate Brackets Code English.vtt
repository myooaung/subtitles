WEBVTT

00:01.810 --> 00:02.140
All right.

00:02.320 --> 00:06.120
So let's discuss the implementation for general practice problem.

00:06.130 --> 00:11.410
So what we are going to do, we are going to write this function that will take an empty string that

00:11.410 --> 00:12.910
is that I am calling as output.

00:13.360 --> 00:19.990
And during recursive calls this output is going to get generated and every time we hit the base case

00:20.350 --> 00:21.400
will bring this output.

00:21.400 --> 00:25.510
Okay, so we get the output we get and we get.

00:25.510 --> 00:28.720
How many opening records have been there till now?

00:28.720 --> 00:33.250
How many closing records we have, and what is the current index event history.

00:33.610 --> 00:37.090
So I will fill the win positions in this output.

00:37.720 --> 00:45.130
So once you are reached this point, you can take the string as full and we can print it so that will

00:45.130 --> 00:46.810
form our base case.

00:47.530 --> 00:55.390
So I did not add what index I am if I equals two n that means we have completely failed this output.

00:55.390 --> 00:59.140
Ready to be output and we return.

00:59.140 --> 00:59.440
Okay.

00:59.770 --> 01:01.660
Otherwise we have two options.

01:02.050 --> 01:08.770
We can play the opening bracket at I position and we can also place a closing bracket at the eighth

01:08.770 --> 01:09.310
position.

01:09.730 --> 01:17.020
But there is a condition if the count of opening bracket is less than and then we can put the opening

01:17.020 --> 01:17.440
bracket.

01:17.560 --> 01:22.690
So let's see in your output you are the opening bracket like this.

01:23.410 --> 01:31.060
Then you pass in and count of open will become open plus Â£1 of close will become close and I will move

01:31.060 --> 01:34.240
to the next index, eight plus one for the closing bracket.

01:34.240 --> 01:37.150
If count of close is less, then count of open.

01:37.540 --> 01:39.250
You can call it in rate brackets.

01:39.850 --> 01:42.880
Output less a closing bracket.

01:45.750 --> 01:53.490
And then we have open and kind of closed will be closed plus one and I plus one.

01:53.970 --> 01:54.540
That's it.

01:55.380 --> 01:56.370
Let's build the code.

01:57.480 --> 01:59.160
Let's try to run the code.

01:59.850 --> 02:01.440
And let me see.

02:01.830 --> 02:02.700
I have three.

02:03.210 --> 02:04.800
I get these.

02:04.920 --> 02:05.700
Which is correct.

02:06.150 --> 02:07.110
I have two.

02:07.650 --> 02:08.400
Which is correct.

02:08.410 --> 02:09.300
I have five.

02:09.780 --> 02:11.770
These are also correct.

02:11.790 --> 02:12.090
Okay.

02:12.540 --> 02:14.790
So let's just verify.

02:15.540 --> 02:17.850
Yes, this is correct.

02:17.850 --> 02:18.330
Output.

02:19.470 --> 02:25.620
Now, one possible mistake that people can make is this.

02:25.740 --> 02:28.110
So let me just tell you what I am doing, okay?

02:28.470 --> 02:29.160
So I am.

02:30.240 --> 02:32.520
In the beginning, the output is empty material.

02:32.670 --> 02:36.710
So when I make a recursive call, I modified this output area.

02:36.720 --> 02:40.050
I also get an email address opening record.

02:40.410 --> 02:42.510
This call is not made from here.

02:42.510 --> 02:47.280
I make maybe two calls because both of the conditions are true.

02:47.370 --> 02:53.220
So I put another opening record and in another call I say the output is like this.

02:53.740 --> 02:53.970
Okay.

02:54.160 --> 02:58.530
So this is the output that is being received by my new function called look.

02:59.310 --> 03:00.930
And this works.

03:01.290 --> 03:01.870
Well, okay.

03:01.890 --> 03:03.690
This is completely fine.

03:04.170 --> 03:09.540
One thing that some people may do, instead of doing it like this, people might do it like this.

03:10.110 --> 03:19.620
Output plus equals opening bracket and they will send the output and people will do like output plus

03:19.680 --> 03:24.540
equals a closing bracket and they will send the output.

03:24.870 --> 03:32.600
Now this will lead to wrong and let's see how I guess what if I had now run this code, maybe I and

03:32.640 --> 03:35.790
three you can see this is not the correct output.

03:36.100 --> 03:38.610
And what is the difference in writing code like this?

03:39.120 --> 03:41.460
And the way I have to look is now what are you doing?

03:41.640 --> 03:42.660
You are in this call.

03:43.380 --> 03:47.580
You say, Look, in my output area, I will add the opening record user look.

03:47.580 --> 03:55.110
Okay, I had an open opening bracket and give it to a new function that receives like this.

03:55.860 --> 04:02.460
And from this you make another call in which you have already added opening bracket.

04:02.470 --> 04:06.690
So you are another closing recorded and you give it to this function also.

04:07.050 --> 04:10.320
Okay, now this will do wrong answer.

04:10.320 --> 04:10.560
Okay.

04:11.550 --> 04:12.330
Or from it.

04:13.020 --> 04:18.300
You are opening record and then you are the closing record and you give it to a new function.

04:18.450 --> 04:24.600
Now, this is not going to be true because you're not removing this one and you're adding actually to

04:24.600 --> 04:29.080
the record in a single function, you're adding opening followed by closing, which is incorrect.

04:29.100 --> 04:33.240
We want to add disclosing in place of opening record like this.

04:33.870 --> 04:34.230
Okay.

04:35.350 --> 04:38.110
We want to make it like this, not like this.

04:38.780 --> 04:40.540
So this is actually a mistake.

04:40.960 --> 04:47.380
We are modifying the same old pottery, which has been already been modified at this particular point.

04:47.750 --> 04:53.200
Now, if you want to fix such kind of a solution, one one way we have already seen another way to fix

04:53.200 --> 05:01.660
this is you remove the last corrective that you added by using or maybe a pop back statement that will

05:01.660 --> 05:02.980
undo this statement.

05:02.980 --> 05:03.130
Okay.

05:03.130 --> 05:05.200
So this is also called us backtracking.

05:05.200 --> 05:10.450
We while going back from this function goal, we can actually remove this opening bracket.

05:11.920 --> 05:13.690
And clear, clear about output.

05:13.990 --> 05:16.450
So we can do this.

05:17.590 --> 05:23.040
And you can see if I do this fix then my on that is correct.

05:23.050 --> 05:23.300
Okay.

05:23.860 --> 05:26.680
To either use this way or the other way.

05:26.950 --> 05:34.060
In this way we're modifying the same output string and in the previous way we are signing to modify

05:34.070 --> 05:34.750
the copies.

05:35.300 --> 05:35.530
Okay.

05:35.620 --> 05:37.120
So all of this is also copy.

05:37.130 --> 05:38.160
This is also copy.

05:38.170 --> 05:40.870
But these two outputs are common.

05:40.870 --> 05:41.120
Okay?

05:41.680 --> 05:43.510
These two outputs are common.

05:43.510 --> 05:49.180
That's why doing this ball back and lose this operation and then we are able to get the corrections

05:49.180 --> 05:49.480
added.

05:50.260 --> 05:50.590
But.

05:52.670 --> 05:55.460
In the implementation that we have seen.

05:55.790 --> 05:58.660
What you can do is, uh.

06:01.740 --> 06:10.260
We have one output ready and we are modifying it in two different ways before sending to the next function

06:10.270 --> 06:17.420
maybe once by putting a opening record here and once by dingo loading recorder.

06:17.430 --> 06:17.660
Okay.

06:17.670 --> 06:19.320
So this is also coming from somewhere.

06:20.440 --> 06:22.660
So this is also going to be a sounding.

06:24.740 --> 06:25.870
This as an output.

06:25.880 --> 06:26.720
This is output.

06:27.080 --> 06:28.780
And then we have a string object.

06:28.790 --> 06:30.860
It is passed by value.

06:31.340 --> 06:33.200
It passed by value.

06:33.830 --> 06:38.720
We are making two copies of this particular string and that's it.

06:39.170 --> 06:48.140
So I hope you really understood the logic and you will avoid potential pitfalls that we have discussed.

06:48.590 --> 06:50.360
That's all for this lecture.

06:50.390 --> 06:50.810
Thank you.
