WEBVTT

0
00:01.810 --> 00:07.360
Hii Everyone in this lecture, we will see how we can reduce the space and time complexity of this program

1
00:07.600 --> 00:08.620
that we have just done.

2
00:09.130 --> 00:13.570
Now, the question is, we cannot reduce the space & time without changing the recurrence.

3
00:13.570 --> 00:13.810
Okay.

4
00:14.110 --> 00:17.800
So we need to think, is there any other way to write the power function?

5
00:18.190 --> 00:26.380
Can we break down this function (a,N) and maybe in terms of some other term, instead of saying n-1

6
00:26.380 --> 00:30.860
can we reduce it in terms of f(a, N/2)	

7
00:30.880 --> 00:31.210
Okay.

8
00:32.020 --> 00:33.730
So the answer is yes, it is doable.

9
00:34.780 --> 00:43.060
How, let me just tell you so I can write something raise to the power N as something raise to the power

10
00:43.060 --> 00:43.600
N/2

11
00:43.600 --> 00:46.780
And square of this term.

12
00:46.780 --> 00:47.470
When N is even.

13
00:48.890 --> 00:49.820
And if N is odd

14
00:49.910 --> 00:52.170
Then I will multiply this result with another a

15
00:53.500 --> 00:55.060
Okay when

16
00:55.060 --> 00:55.770
is odd.

17
00:57.220 --> 00:57.380
Okay.

18
00:57.850 --> 01:02.770
So you can easily see if it is like 2 raise to the power 7, then you can say it is nothing

19
01:02.770 --> 01:05.620
But 2 x 2 raise to the power 7/2

20
01:05.620 --> 01:07.780
i.e. is 3 and square of this term

21
01:08.170 --> 01:12.640
Effectively what we are doing, we are reducing a problem of size N to a problem of size N/2

22
01:12.640 --> 01:19.360
from here we are doing it to N/4, N/8 and eventually ending up at one or zero.

23
01:19.430 --> 01:19.750
Okay.

24
01:20.320 --> 01:25.240
Effectively, if we talk about the number of steps that would be needed, that would be log(N)

25
01:25.270 --> 01:25.570
Okay.

26
01:25.900 --> 01:31.240
Instead of doing in N steps, we can actually do this problem in log(N) steps

27
01:31.870 --> 01:37.810
Effectively, we are going to use this as of a recurrence to solve this problem and let's see how this

28
01:37.810 --> 01:38.530
is going to work.

29
01:38.920 --> 01:46.330
So maybe I can say end fast power I get a I get and biscuits will remain same.

30
01:46.330 --> 01:51.160
If N is zero I'm going to return one then I'm going to check if N is odd.

31
01:51.160 --> 01:52.210
So if N & 1

32
01:52.210 --> 01:53.650
That means it's odd number.

33
01:53.920 --> 01:59.200
We are checking the last set bit, then I can compute the answer for the sub problem.

34
01:59.200 --> 02:06.730
I can say okay sub problem is nothing but fastpower of a, n/2, and I am also going to square

35
02:06.730 --> 02:09.280
this up so sub problem square.

36
02:10.510 --> 02:13.930
So that is going to be sub problem X sub problem.

37
02:14.200 --> 02:20.090
Now we already know the squared answer if N is odd we are going to multiply the squared answered with

38
02:20.090 --> 02:26.030
a that is a multiplied by sub problem square and if N is even we are simply going to return the sub

39
02:26.150 --> 02:27.130
problem square.

40
02:27.190 --> 02:27.700
That's it.

41
02:28.060 --> 02:29.410
That is our final answer.

42
02:30.460 --> 02:31.360
And we are done.

43
02:31.690 --> 02:36.300
So if I now run this code, cout fastpower a, n

44
02:36.700 --> 02:38.890
endl and.

45
02:40.880 --> 02:41.900
We are going to.

46
02:44.330 --> 02:47.810
run this one so ./power.

47
02:48.830 --> 02:51.410
If I give 2 and 10, then I get the same answer.

48
02:51.680 --> 02:54.870
If I give three and six, I get the same answer.

49
02:54.890 --> 02:56.090
Okay

50
02:56.120 --> 02:57.970
Both of them are returning the same answer.

51
02:57.980 --> 03:01.700
But the thing is here, we're taking a less number of steps.

52
03:01.700 --> 03:04.610
For example, I am computing 2 raise to the power 10

53
03:05.340 --> 03:11.680
Okay, then it gets broken as 2 X 2 raise to the power 5 and square of this term

54
03:11.700 --> 03:17.450
We are only computing this term so here it gets broken as 2 X 2 raise to the power square and square 

55
03:17.450 --> 03:18.050
of this term 

56
03:18.560 --> 03:18.860
Okay.

57
03:19.550 --> 03:20.120
So.

58
03:21.350 --> 03:27.170
This is written as 2 X 2 raise to the power, not 2, 2 raise to the power 1

59
03:27.200 --> 03:28.310
And square of this term

60
03:28.940 --> 03:32.360
And this is written as 2 X 2 raise to the power 0 and 

61
03:32.510 --> 03:33.520
square of this term

62
03:34.340 --> 03:35.750
This answer is now.

63
03:35.780 --> 03:40.700
What this answer is 2 and this answer is 2 square 

64
03:40.700 --> 03:47.750
i.e 4, this is 4,4 is added here that is 4 square i.e is 16 x 2 = 32.

65
03:48.230 --> 03:50.990
And if you put 32 square something something like this.

66
03:52.060 --> 03:55.750
So that would be, I think, 32 X 32.

67
03:56.710 --> 03:57.100
That is.

68
04:13.550 --> 04:14.860
This is 2 square 4 

69
04:15.740 --> 04:16.040
Sorry.

70
04:16.040 --> 04:17.070
This should be 16.

71
04:17.990 --> 04:19.340
This should be 16.

72
04:19.970 --> 04:24.260
And 16 square is 256 X 2 is 512

73
04:25.260 --> 04:27.210
So we are we are actually doing 512.

74
04:27.360 --> 04:28.920
X 2 that is 1024.

75
04:29.580 --> 04:31.200
So I hope you're getting this one.

76
04:31.260 --> 04:32.550
We are we are doing it right.

77
04:33.120 --> 04:35.420
And this is actually perfectly fine.

78
04:36.940 --> 04:44.710
But the idea is it is going to take log(N) steps both in terms of space and in terms of time,

79
04:45.670 --> 04:47.320
though that is an optimization.

80
04:47.710 --> 04:51.140
And I hope, you now really understood this problem.

81
04:51.670 --> 04:53.680
thatâ€™s it, see you in the next lecture.