WEBVTT

0
00:00.960 --> 00:04.620
Everyone in this lecture, we are going to talk about recursion basics.

1
00:05.010 --> 00:10.710
So many people get fear when they hear the word recursion because it's a pretty confusing technique,

2
00:10.710 --> 00:11.910
especially for the beginners.

3
00:12.360 --> 00:17.670
But we will try to explain it in a simplified manner with the help of certain examples.

4
00:18.000 --> 00:20.760
And we will do a lot of problem solving on recursion as well.

5
00:21.130 --> 00:22.080
So let's see, what is

6
00:22.080 --> 00:27.390
A recursion. So as I said it's a technique in computer science where a solution to a problem.

7
00:27.480 --> 00:27.760
Okay.

8
00:28.650 --> 00:32.970
Depends upon solution to smaller instances of the same problem.

9
00:33.020 --> 00:35.280
Again, this is something that what you need to remember.

10
00:35.610 --> 00:40.530
Let's say you have a problem and that problem is a complex problem.

11
00:40.530 --> 00:42.030
That means that it has a larger input.

12
00:42.030 --> 00:48.360
Let's say And you want to break this problem into maybe smaller instances of the same problem.

13
00:48.540 --> 00:54.870
Maybe you break this into three sub problems of size n/3 and n/3 and n/3.

14
00:54.870 --> 00:55.120
Okay.

15
00:55.530 --> 01:01.710
So our idea would be to solve sub problems and combine the answers of the sub problems to get the answer for

16
01:01.710 --> 01:02.460
a bigger problem.

17
01:02.460 --> 01:02.620
Okay.

18
01:02.640 --> 01:08.400
So that this is something what we would be doing and what is the meaning of smaller instances of the

19
01:08.400 --> 01:09.090
same problem?

20
01:09.090 --> 01:10.920
Let's say we want to compute some function F.

21
01:11.970 --> 01:17.400
Then the smaller problem will also be on the same function F something like this.

22
01:18.440 --> 01:24.470
So I try to explain, with the help of one very simple example, let us see the most classical example

23
01:24.470 --> 01:25.850
that is taken to.

24
01:28.020 --> 01:30.500
each recursion that is the factorial question.

25
01:30.510 --> 01:30.740
Okay.

26
01:30.930 --> 01:36.060
So let's say I want to compute a factorial of a number n and okay, let's say that number n is five.

27
01:37.140 --> 01:41.460
And I want to compute F(N) that is equal to N!.

28
01:41.550 --> 01:43.230
This is something what I want to compute.

29
01:43.650 --> 01:48.960
Now, although this is a easier problem, but still we can break this problem recursively.

30
01:48.960 --> 01:51.810
We can break it into a smaller sub problem of the same type.

31
01:52.380 --> 01:54.810
So you know, what is the property of factorial?

32
01:54.810 --> 02:01.550
So N factorial is nothing but it can be written as N*(N-1)!

33
02:01.550 --> 02:02.100
What is (N-1)!

34
02:02.100 --> 02:04.560
it is nothing but F(N-1)

35
02:04.800 --> 02:06.930
So it can be written as like this.

36
02:08.640 --> 02:14.340
So what we have done, we have written a larger problem in terms of a smaller sub problem of the same

37
02:14.340 --> 02:14.640
type.

38
02:14.790 --> 02:17.730
Now, how do we compute it algorithmically?

39
02:17.760 --> 02:23.890
For example, if I want to compute five factorial, this will be written as 5 X 4!

40
02:25.020 --> 02:28.620
This 4! can be written as 4 X 3!

41
02:29.010 --> 02:31.860
This can be written as 3 X 2!

42
02:32.400 --> 02:35.130
This can be written as 2 X 1!

43
02:35.490 --> 02:39.600
This can be written as 1 X 0! at 0!.

44
02:39.720 --> 02:44.620
We know we have reached a point where the problem cannot be breaker down further.

45
02:44.640 --> 02:46.890
So such a point is known as base case.

46
02:47.840 --> 02:49.520
So let us see.

47
02:49.520 --> 02:50.660
What are these terms?

48
02:53.300 --> 02:58.570
So at this point we would say we have reached a guess which is known as base case.

49
02:58.580 --> 03:01.920
That means we we cannot reduce of a problem further.

50
03:02.270 --> 03:06.650
And the base case is the case where we know the answer of the sub problem ok so 0! Is nothing but 1

51
03:06.650 --> 03:07.880
is nothing but one.

52
03:08.480 --> 03:13.130
So what we will return, we will return 1 X 1 = 1, and this one will go back here.

53
03:13.250 --> 03:14.920
So this would become 2 X 1  

54
03:14.930 --> 03:15.770
i.e 2

55
03:16.220 --> 03:17.630
And this two will go back here.

56
03:18.260 --> 03:19.810
This is nothing but 3 X 2.

57
03:19.820 --> 03:20.960
That is equal to six.

58
03:21.350 --> 03:22.760
And this six will go here.

59
03:23.240 --> 03:25.410
So 3! will get replaced by six.

60
03:25.430 --> 03:26.940
This would become 4 X 6.

61
03:26.960 --> 03:27.920
That is 24.

62
03:28.460 --> 03:31.040
This 24 will go here and 5 X.

63
03:31.040 --> 03:32.930
24 would be 120.

64
03:34.670 --> 03:40.040
So when we would be dealing with recursion, we will see two directions in one direction.

65
03:40.040 --> 03:44.240
We are breaking the problem and we are trying to simplifying it.

66
03:44.720 --> 03:47.990
So that means we are moving towards the base case.

67
03:48.140 --> 03:56.780
and another direction would be in which we are again coming back from

68
03:56.780 --> 03:59.430
the base case towards the main problem.

69
03:59.510 --> 03:59.590
Okay.

70
03:59.600 --> 04:01.970
So this is from top to down.

71
04:03.190 --> 04:05.200
And this is from down to top.

72
04:05.650 --> 04:05.840
Okay.

73
04:06.400 --> 04:08.750
So we would be doing work in two directions.

74
04:08.770 --> 04:11.380
First, we would be breaking and simplifying the problem.

75
04:11.830 --> 04:17.890
Then we would be combining the solutions to form the answers of the bigger sub  problem that we have left.

76
04:17.980 --> 04:20.530
So this is how this recursion is going to work.

77
04:20.970 --> 04:25.060
Now, you may ask how does it will work in the form of a program?

78
04:25.360 --> 04:25.600
Okay.

79
04:25.600 --> 04:26.920
So when we'll write the code.

80
04:27.760 --> 04:32.470
We will take the help of call stack, function call stack.

81
04:32.770 --> 04:33.040
Okay.

82
04:33.490 --> 04:37.200
So I hope you remember call stack concept.

83
04:37.210 --> 04:43.150
So what happens is let's say you have a function main and it makes a call to the function.

84
04:43.150 --> 04:43.540
Hello?

85
04:44.110 --> 04:48.180
Which further makes the function call to the, let's say, to a function 

86
04:48.190 --> 04:48.420
Hii.

87
04:48.940 --> 04:55.420
So what happened is in the call stack, you will see that these functions will get started on top of

88
04:55.420 --> 04:55.870
each other.

89
04:55.930 --> 04:56.230
Okay.

90
04:57.480 --> 05:02.490
And in the order in which they're called, and once the function hi is complete, it will go off.

91
05:02.640 --> 05:04.890
Once the function hello is completed, it will go off.

92
05:05.190 --> 05:09.360
And once the main is completed, it will also go off the recursion.

93
05:09.360 --> 05:15.960
actually uses the concept of call stack, to store  all the states of these variables that we are

94
05:15.960 --> 05:16.560
going to have.

95
05:17.520 --> 05:20.790
So it will become more clear as we go through some more examples.

96
05:21.150 --> 05:27.370
But for this video, the concept is, you understand at high level what recursion is going to do.

97
05:27.390 --> 05:31.110
It is going to break down your complex problems into smaller problems.

98
05:31.440 --> 05:34.320
We are going to solve those sub problems and get back our answer 

99
05:34.320 --> 05:34.740
Answers.

100
05:34.740 --> 05:37.140
Okay, so let us see another example.

101
05:37.620 --> 05:40.500
For example, we want to define an operation.

102
05:40.500 --> 05:41.100
Go to home.

103
05:41.220 --> 05:42.630
Let's say you are standing at.

104
05:44.100 --> 05:51.110
Some coordinate, let's say some X coordinate and your home is at some value that is equal to N 

105
05:51.330 --> 05:59.550
And you want to reach this home and what you will do, one is you put a loop and you can simply do

106
05:59.940 --> 06:01.110
take one step everytime.

107
06:01.110 --> 06:05.850
But another thing you can do is you will see, okay, I will just take one step and I will ask

108
06:05.850 --> 06:13.350
recursion to take me home from X + 1 till the end and okay, so the idea is you take one step and leave

109
06:13.410 --> 06:15.260
the rest of the work for the recursion.

110
06:15.270 --> 06:15.420
Okay?

111
06:15.420 --> 06:20.280
So at this point can be solved recursively again in this part what you would be doing, take one step,

112
06:20.670 --> 06:24.720
leave the rest work for recursion again take one step leave the rest, work for recursion okay.

113
06:24.930 --> 06:26.240
And what would be the base case?

114
06:26.280 --> 06:29.550
The base case would be if you are at the home, stop moving.

115
06:29.760 --> 06:32.400
You don't need to go anywhere. in the recursive case.

116
06:32.400 --> 06:32.640
Okay.

117
06:32.640 --> 06:38.460
The other case in which we defined a recurrence like F(N) is nothing but N x F(N-1). 

118
06:38.820 --> 06:44.250
This case is known as the recursive case, but what would be recursive case for this problem?

119
06:44.580 --> 06:48.270
You will take one step towards home and you will call the same function.

120
06:48.300 --> 06:50.640
Go to home from X + 1

121
06:50.640 --> 06:56.700
Okay, so if I show you in the form of a little bit of a pseudocode, so this is how the code would

122
06:56.700 --> 06:57.120
look like.

123
06:57.120 --> 07:04.380
So there is a method go go home which gets the current location and it also gets where the home is located

124
07:04.410 --> 07:09.750
So you check if we have already reached the home, we will say, okay, we have reached the home and we return.

125
07:09.750 --> 07:11.610
and we don't do anything for there.

126
07:12.300 --> 07:16.650
Otherwise, what we do, we take one step and we call go home.

127
07:16.950 --> 07:18.240
But that particular step.

128
07:18.240 --> 07:23.100
Okay, so this is how a recursive code would look like.

129
07:24.090 --> 07:31.140
So you can see we're calling the same function because we said that we are going to break down the problem

130
07:31.920 --> 07:34.580
in terms of a smaller sub problem here.

131
07:34.590 --> 07:38.780
Also, we have breaking down if we need N steps to reach the home.

132
07:38.790 --> 07:44.280
So we have taken one step and we said, okay, the remaining and N-1 steps will be taken by the

133
07:44.280 --> 07:45.930
same recursive function.

134
07:46.410 --> 07:48.480
So this is a pseudocode.

135
07:48.690 --> 07:54.600
And the idea is you understand at high level what is recursion and is going to do so.

136
07:54.600 --> 07:59.250
Recursion is also related with the idea of principle of mathematical induction.

137
07:59.640 --> 08:03.420
So you might have studied about this principle while in your school or in college.

138
08:03.930 --> 08:09.150
So in this principle, what we actually try to do is we first figure out the smallest case.

139
08:09.150 --> 08:13.980
Maybe we see what could be the smallest possible solution for the given problem, maybe what could 

140
08:13.980 --> 08:15.360
the value of F(0) 

141
08:15.630 --> 08:17.640
Maybe what could be the value of a F of one?

142
08:17.970 --> 08:20.690
So this will depend upon what kind of question it is.

143
08:20.700 --> 08:20.970
Okay.

144
08:21.240 --> 08:25.020
So in some cases we may have F(0), F(1), maybe F(2) as well.

145
08:25.500 --> 08:28.170
So we want to figure out what is the value of the smallest case.

146
08:28.170 --> 08:32.550
For example, in case of a factorial, the smallest cases, zero factorial.

147
08:32.550 --> 08:33.170
That is one.

148
08:33.450 --> 08:33.710
Okay.

149
08:33.870 --> 08:40.380
In case of a Fibonacci, there would be two smallest cases because to build Fibonacci series we need two initial

150
08:40.380 --> 08:42.150
values, zero and one only.

151
08:42.150 --> 08:43.740
Then we can build the next value.

152
08:44.520 --> 08:47.190
So this we will look at later on as well.

153
08:47.880 --> 08:50.160
First Step is always figured out the smallest case.

154
08:50.700 --> 08:56.130
Then when you are writing code for the recursion, one assumption that you have always you always need

155
08:56.130 --> 08:56.730
to take this.

156
08:57.390 --> 09:04.320
Suppose you are breaking down your problem F(N) in maybe two sub problems f(N/3) 

157
09:04.320 --> 09:06.030
and maybe F(2N/3)

158
09:06.540 --> 09:10.140
What do you need to assume that sub problems can be solved?

159
09:10.140 --> 09:10.420
Okay.

160
09:10.800 --> 09:15.870
So you have to assume that these two problems will be solved recursively.

161
09:15.960 --> 09:18.600
Using this assumption, you have to write the recurrence.

162
09:18.700 --> 09:18.980
Okay.

163
09:19.320 --> 09:21.660
You have to write a recurrence for F(N).

164
09:21.660 --> 09:21.960
Okay.

165
09:22.260 --> 09:27.390
How I can combine the solutions of the smaller sub problems to get the answer of F(N).

166
09:27.390 --> 09:30.270
So once you do this, your code will work fine.

167
09:30.540 --> 09:34.230
And you can also verify and think why your code works.

168
09:34.380 --> 09:34.650
Okay.

169
09:34.950 --> 09:38.910
So you have to solve the current problem, assuming this a problem solution exists.

170
09:38.940 --> 09:39.210
Okay.

171
09:39.210 --> 09:39.840
So this is.

172
09:41.510 --> 09:44.390
Our assumption, but it will actually work and we will prove it.

173
09:44.390 --> 09:44.570
Why?

174
09:44.570 --> 09:45.020
It works.

175
09:45.680 --> 09:47.090
So we have to find out.

176
09:47.090 --> 09:52.280
Okay, let's assume that some F(N-1) is true.

177
09:52.770 --> 09:54.470
Or using this, we will find out.

178
09:54.470 --> 09:54.680
Okay.

179
09:54.680 --> 09:55.550
What is F(N)

180
09:55.730 --> 10:00.350
In terms of F(N-1) or and minus or something.

181
10:00.360 --> 10:00.620
Okay.

182
10:00.620 --> 10:02.330
So it could be an easy problem.

183
10:02.330 --> 10:05.240
It can be broken down in any, any way.

184
10:05.540 --> 10:10.610
And it will depend upon problem to problem how we break down the problem into sub problems.

185
10:11.680 --> 10:15.550
So this is a high level introduction about recursion.

186
10:15.550 --> 10:19.570
And in the next lecture we will actually see an example along with the code.

187
10:19.600 --> 10:20.860
That's all for this lecture.

188
10:20.890 --> 10:21.370
Thank you.