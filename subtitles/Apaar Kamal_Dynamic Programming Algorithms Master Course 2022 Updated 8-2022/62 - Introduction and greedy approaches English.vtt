WEBVTT

00:00.500 --> 00:01.220
And everyone.

00:01.400 --> 00:07.280
So we will begin with the world's most famous problem, which is the knapsack problem.

00:07.760 --> 00:13.220
And in upcoming few lectures, we will dive deeper into the knapsack problem.

00:13.640 --> 00:19.190
But I won't try to, you know, memory optimize it or do some tips and tricks on this, which I have

00:19.190 --> 00:20.570
done on this absurd problem.

00:21.020 --> 00:24.170
So feel free to do that on any of the next problems.

00:24.170 --> 00:24.560
Will do.

00:24.890 --> 00:30.920
But what I'll do is I'll try to relate all the dynamics of all the knapsack problems to some dynamic

00:30.920 --> 00:33.080
programming stage eight and.

00:34.250 --> 00:34.640
Here.

00:34.910 --> 00:39.650
I've already written so many different variations of the next problem will be solving all of them.

00:40.190 --> 00:46.970
Firstly, we will see the zero one knapsack problem and then we'll move on to zero and knapsack problem,

00:46.970 --> 00:49.190
which is also called unbounded knapsack problem.

00:49.730 --> 00:51.590
Today's colourful knapsack problem.

00:51.590 --> 00:54.590
It is my favourite problem from all the knapsack problems.

00:54.920 --> 00:56.810
And the fourth one is that.

00:59.270 --> 01:00.710
Generally we have an absolute problem.

01:00.710 --> 01:06.770
We have some stewards, but later what we do is we change the state of the problem.

01:07.610 --> 01:10.660
Basically, we always define it adding programming statewide.

01:10.670 --> 01:11.480
So we'll change.

01:11.480 --> 01:18.590
The state will take some other variables and try to solve the knapsack problem because that's what constraints

01:18.590 --> 01:20.030
will force us to do.

01:20.630 --> 01:23.210
So we'll will work according to some different constraints.

01:23.360 --> 01:23.840
We'll see.

01:25.070 --> 01:25.340
So.

01:26.780 --> 01:28.170
This is the starting part.

01:28.190 --> 01:30.710
And let's begin with this zero one knapsack problem.

01:31.010 --> 01:32.720
Eight oh.

01:35.280 --> 01:37.070
Let me quickly open one note.

01:41.970 --> 01:42.180
Well.

01:42.300 --> 01:46.890
So this is the knapsack problem and we know the famous knapsack problem.

01:47.670 --> 01:49.140
What does this problem say?

01:49.410 --> 01:54.360
And guys, believe me or not, if you have understood this absurd sum problem, then this problem becomes

01:54.360 --> 01:57.170
one of the easiest problems you'll do in general.

01:57.170 --> 02:01.350
And this is a very basic problem, but it's a very important problem.

02:02.220 --> 02:08.550
So let's see, you're packing for a vacation on a seaside and you're going to carry only one bag with

02:08.550 --> 02:09.690
a knapsack capacity.

02:10.440 --> 02:13.480
So the constraints I mentioned here, it is less.

02:13.500 --> 02:15.580
Then it goes to 2002.

02:15.600 --> 02:18.330
We have a bag and it has a capacity.

02:18.340 --> 02:19.470
Basically, it's a knapsack.

02:20.340 --> 02:27.150
And you also have in what is in here the number of items that you might want to take with you to the

02:27.150 --> 02:27.630
seaside.

02:28.110 --> 02:35.530
Unfortunately, you can not fit all of them in the knapsack, so you will have to choose eight.

02:35.700 --> 02:38.310
So basically we have lots of items, but we just have a bag.

02:38.820 --> 02:41.910
But each item you are given its size and its value.

02:41.940 --> 02:45.600
You want to maximize the total value of all the items you're going to bring.

02:45.900 --> 02:47.880
What is the maximum grade?

02:48.030 --> 02:49.060
So basically, it's a.

02:50.140 --> 02:55.030
A problem in which we have to determine that we have a particular bag.

02:55.030 --> 02:56.560
We have to push items in the bag.

02:57.080 --> 02:59.800
But the only problem is we cannot push all the items.

03:00.160 --> 03:03.610
And the second thing is every item has a size associated with it.

03:03.940 --> 03:11.830
We have to pick up some subset of the items that's that the total sum of their sizes is less than equal

03:11.830 --> 03:12.330
to us.

03:13.360 --> 03:15.160
That means they fit into the knapsack.

03:15.460 --> 03:20.620
And right beside what we have to do is we have to maximize the total value of all the items.

03:21.730 --> 03:24.610
So let's see the input on the first line you're given.

03:24.610 --> 03:28.600
Essendon and lines follow two integers describing one of your items.

03:29.110 --> 03:30.280
First number is a sizeable item.

03:30.280 --> 03:32.380
In the next is the value of the item.

03:32.860 --> 03:40.030
You should output a single integer on one line like the total maximum value from the best choice of

03:40.030 --> 03:41.200
your items for your trip.

03:42.460 --> 03:44.170
So this is the input.

03:44.170 --> 03:45.450
Let me just copy this.

03:45.460 --> 03:45.750
Okay.

03:47.280 --> 03:49.260
Every carpet is input for five.

03:52.580 --> 03:56.570
And it is 18243025.

04:01.200 --> 04:01.490
Three.

04:03.300 --> 04:06.750
Basically what it says is that the value of the knapsack.

04:06.750 --> 04:07.600
I'm calling your time.

04:07.950 --> 04:08.300
Okay.

04:08.340 --> 04:09.120
It says this.

04:09.210 --> 04:10.190
So let me take your desk.

04:10.200 --> 04:12.900
Only size of the knapsack is for.

04:13.320 --> 04:14.250
And it's five.

04:14.250 --> 04:15.700
And now we have five items.

04:15.750 --> 04:16.620
What is item?

04:16.620 --> 04:17.340
What we are given?

04:17.850 --> 04:21.000
The first number is the size of the item and the next to the value of the item.

04:21.350 --> 04:22.740
So this is the size of the item.

04:22.920 --> 04:28.920
Basically, if I'm picking this item, then I will need this much size in my knapsack.

04:29.340 --> 04:29.590
Right?

04:29.970 --> 04:35.880
And if I'm picking this item, that means size of two should be available in the knapsack, and this

04:35.880 --> 04:38.140
item will give me a profit of photocopies.

04:39.660 --> 04:44.160
So instead of, you know, framing it this way that you're going to do a vacation or this this frame

04:44.160 --> 04:50.160
it that way that you add a little you had a tip full and you just have one bag.

04:50.340 --> 04:56.460
And then there are some sizes of the items you're going to pick and they have their own some values.

04:57.510 --> 05:05.250
And so on the basis of that, what items you will pick so that you have you get the maximum value and

05:05.610 --> 05:08.540
all of those items fit in your knapsack and you run away.

05:09.420 --> 05:11.850
That seems better for the situation.

05:12.870 --> 05:13.260
Oh, yeah.

05:13.920 --> 05:14.550
Let's see.

05:15.420 --> 05:17.360
Let's try to break right here first.

05:17.370 --> 05:18.630
In the knapsack problem eight.

05:18.960 --> 05:24.280
So here we can see is that this is this size and this is the weight.

05:24.930 --> 05:26.430
837 Yeah.

05:27.510 --> 05:28.080
Um.

05:28.320 --> 05:28.830
The first.

05:29.100 --> 05:29.340
Yeah.

05:29.610 --> 05:31.860
The first is the size, and the second is value.

05:32.220 --> 05:34.650
That means one is the size and it is a value.

05:35.520 --> 05:36.720
Liz, can we see that?

05:37.500 --> 05:42.690
Maybe we can pick up the element which has the most value by size of issue.

05:43.260 --> 05:45.570
That means what is its value per unit size.

05:45.990 --> 05:49.380
If it is more, then we want to pick a trade.

05:49.380 --> 05:58.140
Because if I know of gold or if I pick a ten gauge of diamond but then gives you a diamond will have

05:58.140 --> 05:58.860
more value, right?

05:58.860 --> 06:03.330
Because their value by size is far better than gold.

06:03.330 --> 06:03.630
Right.

06:04.810 --> 06:05.920
So greedily.

06:05.920 --> 06:09.250
If you want to try it greedily, then we can also do.

06:09.700 --> 06:12.490
You can try this like on the basis of value by size.

06:12.490 --> 06:13.510
So it will be eight.

06:13.600 --> 06:14.250
This is true.

06:14.260 --> 06:14.950
This is zero.

06:14.960 --> 06:17.790
This is 2.5 and this is 1.5.

06:18.250 --> 06:21.280
On the basis of value besides that issue, we can.

06:22.230 --> 06:23.790
Try to pick the elements.

06:24.120 --> 06:25.080
Let's figure the elements.

06:25.500 --> 06:26.220
But what?

06:26.220 --> 06:28.440
What has the maximum value by size it.

06:29.680 --> 06:31.180
You can only let me write it also.

06:31.450 --> 06:34.110
Currently my knapsack is a capacity of four eight.

06:34.540 --> 06:38.950
What is the maximum value besides element in this whole list?

06:38.980 --> 06:42.040
We have this by aid rate and its size is one.

06:42.040 --> 06:48.880
That means I can pick up this element and right now my cab capacity of my knapsack is four.

06:48.910 --> 06:50.050
So I'm picking this element.

06:50.080 --> 06:54.460
Let's say I pick this element, the capacity of my knapsack history.

06:54.820 --> 06:55.900
And what is the.

06:57.400 --> 07:00.550
Value that I'm picking it it right now.

07:00.910 --> 07:02.110
I picked up this element.

07:02.110 --> 07:04.690
As you can see, the size of the element is only one eight.

07:05.230 --> 07:08.270
And also this is a01 knapsack.

07:08.290 --> 07:08.520
Right?

07:08.620 --> 07:13.810
That means that I can pick up the element or I will not pick up the element zero or one binding knapsack.

07:14.290 --> 07:17.350
Basically, you cannot be an element multiple number of times in this.

07:17.530 --> 07:22.420
That will be a zero and knapsack problem where you can pick up any element, multiple number of frames.

07:23.380 --> 07:23.650
Well.

07:24.650 --> 07:28.210
This is a01682 in zero one knapsack.

07:28.220 --> 07:31.340
We can either pick it or not pick it then picking it up.

07:31.760 --> 07:34.370
Now my was the size of an EPS I get city.

07:34.370 --> 07:39.730
So what is the second most value giving item which is 2.58?

07:40.010 --> 07:40.320
Value.

07:40.340 --> 07:42.590
The size of this item is better than others.

07:42.920 --> 07:50.360
Now, now, if I pick up this item, it has a capacity of it has a size of two and the value of the

07:50.360 --> 07:53.540
item is five and the capacity of my knapsack history.

07:53.540 --> 07:55.790
That means I can still pick up this item.

07:55.790 --> 08:02.850
If I pick up this item, the capacity of my knapsack remains one and the value that I will get is a

08:03.140 --> 08:03.460
fight five.

08:03.950 --> 08:05.570
So what is the total number?

08:05.630 --> 08:11.930
The capacity of an exec is one, but basically the capacity of my knapsack is one to tell me one thing.

08:12.710 --> 08:15.370
What is the third most valuable size item?

08:15.530 --> 08:22.010
It is two, but I cannot good because its size is two and the remaining capacity in my knapsack is only

08:22.010 --> 08:22.250
one.

08:22.520 --> 08:25.820
Similarly, I will not be able to pick it up and I will not be able to pick this up.

08:26.810 --> 08:27.620
So here you can see.

08:29.590 --> 08:31.810
I have used space three of my knapsack.

08:31.810 --> 08:33.020
And what is the total maximum value?

08:33.020 --> 08:36.400
What I'm getting at it is 13 and the answer.

08:38.060 --> 08:39.830
The answer is also 38.

08:40.010 --> 08:44.850
So here you can see that the greedy bugs that face body gives gifts.

08:45.070 --> 08:51.110
Let's discuss this so that people try at least once by giving it a great shot and then realize that,

08:51.110 --> 08:53.960
okay, they'll get wrong answers.

08:53.960 --> 08:54.260
Right?

08:54.260 --> 08:55.280
Because they'll realize that.

08:55.280 --> 08:56.900
Okay, greedy will not always work.

08:57.440 --> 08:58.530
Let's find it.

08:58.550 --> 08:59.070
Excuse me.

08:59.070 --> 08:59.450
Is greedy.

08:59.450 --> 09:00.110
Will not work.

09:02.280 --> 09:04.800
But just think about it in this way.

09:06.270 --> 09:07.800
What if I pick an element?

09:08.250 --> 09:08.820
Of course.

09:09.030 --> 09:13.770
Value by size of that element is, let's say, maximum, let's say the highest.

09:14.160 --> 09:17.310
But it is not fulfilling my whole capacity.

09:18.990 --> 09:19.710
What example?

09:21.770 --> 09:22.820
Let's take this example.

09:22.820 --> 09:23.380
Let's see.

09:23.390 --> 09:30.620
Forward is the capacity of the knapsack and I have items of three and its value is 30.

09:31.430 --> 09:40.460
So value by sizes ten and we can say to 15 and to 18 what is the value sizes and when fighting the value

09:40.460 --> 09:42.640
besides there is nine eight.

09:43.040 --> 09:45.380
Okay, here you can see if I tried greedy.

09:45.590 --> 09:50.900
That means initially I have four and the maximum value by size of ten and which has a size of three.

09:50.900 --> 09:52.010
That means I can pick it up.

09:52.460 --> 09:53.240
If I pick it up.

09:53.240 --> 09:57.590
The knapsack is a value one remaining become 30.

09:59.070 --> 09:59.760
Right now.

09:59.760 --> 10:00.810
I can not pick this up.

10:00.810 --> 10:01.620
Not pick this up.

10:02.160 --> 10:02.370
Okay.

10:02.550 --> 10:05.790
So here you will realize one thing that.

10:07.020 --> 10:10.710
You can see that there is this one space left in the knapsack.

10:11.700 --> 10:12.000
But.

10:13.450 --> 10:17.990
If there were spaces left, I picked up the element with the maximum value besides.

10:18.490 --> 10:20.770
But now that one space will remain empty.

10:20.770 --> 10:24.260
But that that could have been filled if I picked these two up.

10:24.280 --> 10:27.330
So if I pick these two up, and what would I have figured?

10:28.120 --> 10:32.620
Let's have big fuss to go to 15 and then I will pick Newcomer.

10:37.860 --> 10:40.050
Then I will pick Duke on March 18.

10:41.710 --> 10:46.990
Eight and this will mean zero, basically 18 bills, 15 will be 33.

10:47.650 --> 10:49.750
So tell me, is 30 where there are 33?

10:50.290 --> 10:51.190
Of course, 33.

10:51.190 --> 10:51.400
Right.

10:51.550 --> 10:53.610
So here you can easily see that the grid will not work.

10:53.620 --> 10:55.930
And of course, guys, this is a very small example.

10:56.920 --> 11:00.880
The list of the items can go to 2008.

11:01.130 --> 11:05.310
So this was a particular tree and it goes to tree, this one book.

11:05.930 --> 11:07.240
Well, so I hope you understand.

11:07.240 --> 11:08.560
Why would greedy not work?

11:09.340 --> 11:13.420
Because what we are trying to do is we are trying to select item on the basis of.

11:14.470 --> 11:17.380
PBS is well overseas, but.

11:19.150 --> 11:21.190
But I will take some particular size.

11:21.190 --> 11:22.360
What about the other size?

11:22.390 --> 11:28.540
Maybe that other size could have been utilized by some other different combination, which could have

11:28.540 --> 11:31.660
given me in the end, a greater value.

11:31.990 --> 11:34.810
I basically plus this is greater than this.

11:36.100 --> 11:38.470
So the grids won't always work.

11:38.870 --> 11:38.980
Okay.

11:39.100 --> 11:42.100
So now let's move on to the epi approach.

11:42.670 --> 11:44.560
You'll go in the next lecture.

11:44.560 --> 11:47.650
We'll start with the drip, drip approach of the knapsack problem.
