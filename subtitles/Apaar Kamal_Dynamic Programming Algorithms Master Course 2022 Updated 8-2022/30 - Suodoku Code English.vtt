WEBVTT

00:01.470 --> 00:02.010
Everyone.

00:02.020 --> 00:07.050
So let us go through the implementation for to look at all of it as we have just discussed.

00:07.500 --> 00:13.170
So what I have in this boilerplate is I have then put really this is the metric that I want to fill

00:13.590 --> 00:16.950
and I want to replace all the rows with valid numbers.

00:17.400 --> 00:19.980
And this is the Boolean function that I have created.

00:20.400 --> 00:25.100
If it would have been count the number of ways in which you can fill this Aluko.

00:25.410 --> 00:27.690
I could have made the return type as INT.

00:27.840 --> 00:31.050
But for now we are looking for only one solution.

00:31.560 --> 00:35.100
This bool will work fine and we will stop.

00:35.100 --> 00:39.210
We will stop backtracking once we found out the right solution.

00:39.210 --> 00:39.420
Okay.

00:39.810 --> 00:47.010
What we just discussed is what we will do will try to move forward in the grid.

00:47.580 --> 00:54.210
And at some point we realize that, okay, we are not able to place a right number.

00:54.240 --> 01:00.720
So in that case we say, okay, we return false, that false and propagate back and maybe we fill the

01:00.720 --> 01:01.340
number hit.

01:01.350 --> 01:04.350
We try to update that number, but it still doesn't work.

01:04.920 --> 01:07.140
That again returns false.

01:07.440 --> 01:09.750
And at this point we wish we had placed five.

01:10.500 --> 01:18.690
Then we try to update it six or seven or eight, maybe eight in it is a valid number that we can place

01:18.690 --> 01:18.900
here.

01:19.440 --> 01:21.090
What will replace?

01:22.380 --> 01:23.670
Uh, it it.

01:24.240 --> 01:26.250
And we again, may go forward.

01:26.490 --> 01:27.030
Look, these.

01:27.090 --> 01:27.300
Okay?

01:27.900 --> 01:30.980
Go and solve the rest of the puzzle, okay?

01:31.260 --> 01:34.740
So this is how we're going to proceed to this one action.

01:34.740 --> 01:38.410
Instead of going this in a zigzag manner, we are going in this particular manner.

01:38.430 --> 01:38.590
Okay.

01:38.610 --> 01:39.610
We're going like this.

01:40.080 --> 01:40.800
Like this.

01:41.190 --> 01:41.790
Like this.

01:42.090 --> 01:43.920
At this point, a problem happens.

01:44.190 --> 01:46.870
Then we again backtrack in the similar direction.

01:46.890 --> 01:47.170
Okay.

01:47.190 --> 01:47.820
Like this.

01:50.080 --> 01:54.010
So let's see how we can actually implement this problem.

01:54.670 --> 01:57.250
So let's go through the code.

01:59.100 --> 02:04.530
So first of all, I need to write some base case, some recursive case.

02:05.310 --> 02:07.650
So this is what I do for every problem.

02:08.100 --> 02:10.440
So let us think of the base case.

02:11.010 --> 02:20.760
So maybe I can say if I was in, which is nine, in this case, we have a nine gross nine grid.

02:21.790 --> 02:23.230
On what we can do.

02:23.620 --> 02:24.290
We can take it.

02:24.310 --> 02:26.320
We found out the solution.

02:26.560 --> 02:34.590
We we can print the solution at this particular point, and we can get it done and we can be done.

02:35.090 --> 02:37.630
So it's going to be an easy one.

02:37.990 --> 02:43.030
And we're going to return to if we find out the solution, we will bring the solution later.

02:43.120 --> 02:44.950
That means we will print the matrix.

02:46.780 --> 02:49.360
And in the recursive case, let's see what happens.

02:52.500 --> 02:56.480
So in the recursive case, one case could be wired.

02:56.490 --> 02:58.110
I'd go and of the two.

02:58.440 --> 02:58.680
Okay.

02:59.070 --> 03:02.650
So we can see if Dick was in.

03:02.650 --> 03:08.160
And that means we need to shift to the next rule we considered done solve so.

03:09.850 --> 03:17.970
Local the semantics I was as I plus one the column goes as zero and remains same.

03:19.530 --> 03:22.410
So if you are at this particular point.

03:22.410 --> 03:24.780
Okay, so if you just cross the boundary.

03:25.440 --> 03:25.680
Okay.

03:25.950 --> 03:28.680
So you want to shift to this particular point.

03:28.680 --> 03:31.070
So this is the equals nine.

03:31.080 --> 03:38.750
So you say, okay, this is I call my G, this becomes a plus one and it becomes zero.

03:39.270 --> 03:40.140
This is what you do.

03:40.620 --> 03:49.380
So when this cell makes a call next, you see, okay, return whatever is returned by this problem,

03:49.830 --> 03:53.790
which is starting at this particular cell.

03:54.000 --> 03:54.390
Okay.

03:55.260 --> 03:56.250
This is what we do.

03:57.480 --> 03:58.540
So I hope this cleared.

03:58.770 --> 03:59.760
This case is cleared.

04:00.330 --> 04:04.290
And in either case could be if the cell is already filled.

04:04.410 --> 04:05.940
If it is a prefilled cell.

04:06.600 --> 04:15.810
So we need to skip the prefilled cell to how we can find that if matrix of it is not zero.

04:16.200 --> 04:17.910
That means it is a preferred value.

04:17.940 --> 04:24.420
We do not need to do anything at that, so we just need to make a recursive call on the next cell.

04:25.020 --> 04:28.770
And it is possible that the next cell is also preferred.

04:29.040 --> 04:29.340
Okay.

04:29.340 --> 04:31.440
So in that case, we will again add this case.

04:32.670 --> 04:36.120
And we will make a recursive call to the next look.

04:36.720 --> 04:42.130
Otherwise, we are on the cell to be filled on for the cell.

04:42.150 --> 04:42.610
You.

04:43.010 --> 04:45.020
You don't know what is the right number.

04:45.030 --> 04:48.540
So you have to try out all possibilities.

04:50.870 --> 04:58.640
So you sail forward and number equals one number less than equals and number plus, plus.

04:59.480 --> 05:04.670
And now you need to check whether on it is safe.

05:06.350 --> 05:13.400
To place the number or not by looking at the rule column and the A grid.

05:13.970 --> 05:14.750
So if.

05:16.430 --> 05:17.210
Is safe.

05:17.240 --> 05:25.040
I can make a helper method that will check if it is safe to place number i position I go my G.

05:25.670 --> 05:28.100
Then only I will place that particular number.

05:28.130 --> 05:28.370
Okay.

05:28.370 --> 05:31.130
So now we are going to place that particular number.

05:31.490 --> 05:40.790
We are going to say, let us try to solve this puzzle by placing this number I like on my D on making

05:40.790 --> 05:41.840
a recursive call.

05:43.050 --> 05:45.300
To solve the problem.

05:45.720 --> 05:45.960
Okay.

05:46.230 --> 05:48.420
So this variable is also a problem.

05:48.870 --> 05:56.100
Will be true if the remaining problem can be solved by placing this number otherwise.

05:57.790 --> 05:58.120
Okay.

05:58.630 --> 06:01.840
Let us see if salsa problem is true.

06:02.110 --> 06:04.210
We can say okay, return true.

06:04.600 --> 06:09.070
If it is false, then you can clearly see that this file look will work.

06:09.640 --> 06:12.490
So let me just tell you what we are trying to do.

06:12.970 --> 06:14.560
Let's say we're at a particular cell.

06:15.070 --> 06:19.330
I think it let us place one where we see one is already there.

06:19.410 --> 06:19.660
I see.

06:19.660 --> 06:21.850
Okay, let me place say two.

06:21.850 --> 06:23.350
But later, two is already built.

06:23.860 --> 06:24.310
Let me see.

06:24.310 --> 06:25.720
Okay, let me play three.

06:26.140 --> 06:26.840
Yes, three again.

06:27.190 --> 06:28.210
Three can be placed.

06:28.210 --> 06:32.950
So we place three here and we make a recursive call on this part.

06:33.550 --> 06:34.990
Now the problem arises.

06:34.990 --> 06:36.460
Maybe by putting three.

06:36.460 --> 06:37.660
We cannot solve this grid.

06:38.410 --> 06:38.740
Okay.

06:39.640 --> 06:40.750
We cannot form a solution.

06:40.750 --> 06:44.140
If three is presented, maybe the solution should contain five.

06:44.890 --> 06:51.700
What we do this problem will automatically return false if and what we will do.

06:52.030 --> 06:56.320
This loop will work and we will try to place four here, maybe before it is presented.

06:56.320 --> 06:57.040
We will skip it.

06:57.370 --> 07:01.930
We will place five it, and once we place five, we may cause a problem.

07:02.860 --> 07:07.630
We make a recursive call and let us see this matrix get solved.

07:08.260 --> 07:12.880
And we hit the base case and in the base case we are going to print the solution.

07:12.940 --> 07:19.660
Okay, so whatever the values are that they will be contained in this matrix and we can just print that

07:19.660 --> 07:20.200
matrix.

07:21.170 --> 07:24.500
So we can return true if the problem is or look if it does not.

07:24.500 --> 07:26.360
So we return false.

07:26.720 --> 07:28.610
We try six seven.

07:28.620 --> 07:30.290
We try it with nine.

07:30.770 --> 07:37.880
If it it is still not sold, we make this sale as zero and we're done false to the previous calls.

07:38.210 --> 07:41.030
This step is going to be called backtracking.

07:41.030 --> 07:43.940
Okay, so we will write the backtracking step now.

07:45.020 --> 07:46.520
So if.

07:47.970 --> 07:51.090
If no option works, then you.

07:51.090 --> 07:51.620
What do you do?

07:51.630 --> 07:53.610
You make the currency as a zero.

07:55.490 --> 07:55.850
Okay.

07:56.210 --> 08:02.690
And you tell the previous call that you need to change something and redone it.

08:02.720 --> 08:04.640
Okay, so we go back.

08:04.640 --> 08:06.890
We again try something on the previous cell.

08:07.220 --> 08:08.900
We come to the current cell again.

08:09.500 --> 08:11.510
If it doesn't work, we again go back.

08:12.350 --> 08:14.950
We may again go back further and so on.

08:14.960 --> 08:17.150
Because of this, this goes on like this.

08:18.140 --> 08:21.440
So maybe we come here.

08:21.470 --> 08:23.450
Come here and.

08:24.750 --> 08:26.250
At this point, we go back.

08:27.800 --> 08:29.120
And maybe it does.

08:29.120 --> 08:30.110
It still doesn't work.

08:30.140 --> 08:31.760
Maybe we go further back.

08:32.150 --> 08:33.640
We try to change something here.

08:34.250 --> 08:35.810
Then we again, come here.

08:36.050 --> 08:39.560
We update these values again.

08:39.570 --> 08:40.600
We may get stuck.

08:40.610 --> 08:42.160
We can again come back.

08:42.170 --> 08:43.700
We can change it and so on.

08:43.770 --> 08:44.000
Okay.

08:44.480 --> 08:56.630
So you don't need to diving into how this is working, but if you have an idea, if you can assume that

08:56.630 --> 08:59.720
this always works, then it will be easy for you.

09:00.980 --> 09:02.090
To write code.

09:02.090 --> 09:08.540
Okay, so while writing good, you don't need to think how this backtracking is going to work if you

09:08.540 --> 09:13.460
are new or if you are a beginner in solving these type of problems.

09:13.730 --> 09:19.220
Once you know, once you've written the code and it works, you can easily verify how this code is working

09:19.550 --> 09:27.530
or why it is working on that thing you can do very easy for beginners, I suggest try to break the problem

09:27.530 --> 09:34.850
in simpler cases, write the code and then try to think what is your code doing while it is working?

09:34.850 --> 09:41.150
Okay, so it's I know it's a bit tricky to explain it, but tricky for the beginners to think.

09:41.540 --> 09:48.800
But this is the beauty of recursion and by tracking it you can solve complex problems very easily by

09:48.800 --> 09:51.380
writing just simple logic, okay?

09:52.220 --> 09:57.800
And everything is done by this magical function and solve the problem, which is indeed the function

09:57.800 --> 09:59.180
that we have written.

09:59.180 --> 10:03.200
Okay, so do it for one cell and the rest because it will do it for you.

10:03.200 --> 10:03.470
Okay.

10:03.470 --> 10:08.570
So this is the point that you need to keep in mind how I handle for one set.

10:08.570 --> 10:14.060
Look, if I cannot fit any of these numbers in my current cell, what I will do, I will say, okay,

10:14.420 --> 10:20.450
just make it zero hundred and five to the previous cell and that's it.

10:20.450 --> 10:20.720
Okay.

10:21.680 --> 10:27.140
So now what we need to do, we need to write this function is safe and it's going to be a pretty easy

10:27.140 --> 10:27.590
function.

10:28.070 --> 10:31.220
So let us quickly write the code for this one as well.

10:31.910 --> 10:33.890
So let me see.

10:35.600 --> 10:37.490
Boule is safe.

10:37.520 --> 10:38.930
I get the matrix.

10:43.920 --> 10:48.870
I get the coordinates, I get the number I get.

10:48.870 --> 10:55.140
And the first thing is I need to check whether this number is present in the lower column.

10:55.230 --> 10:59.370
So for that, I can simply put a loop like this.

11:00.210 --> 11:01.860
I can check for the Roman column.

11:02.430 --> 11:09.840
So it's going to be pretty easy if I check if the number is either present in the role or in the column

11:10.200 --> 11:11.640
I consider done false.

11:12.160 --> 11:16.590
And another thing we can do is we can check for the upgrade.

11:17.040 --> 11:19.190
Now comes the tricky thing.

11:19.200 --> 11:20.430
How do we find out?

11:22.930 --> 11:25.580
In which submarine this number is contained.

11:25.700 --> 11:25.860
Okay.

11:25.900 --> 11:28.450
So let us also learn about.

11:29.440 --> 11:31.300
This calculation that we are going to do.

11:31.810 --> 11:32.110
Okay.

11:32.590 --> 11:37.600
So, for example, let's say I want to find out for this particular cell.

11:38.020 --> 11:41.650
This is zero one, two, three, four, five.

11:41.950 --> 11:43.150
This is four comma one.

11:43.720 --> 11:46.480
And there's a grid for the cell start side.

11:46.510 --> 11:48.050
This particular cell, if.

11:49.610 --> 11:53.550
So if you look carefully, you can easily find out this upgrade.

11:54.870 --> 11:57.600
This is a six on this way.

11:57.930 --> 12:04.680
The starting point of the upgrade and this is X, the A6 would be nothing but it would be a six by three

12:05.130 --> 12:05.820
into three.

12:06.090 --> 12:07.920
So let me show you.

12:08.070 --> 12:10.560
Four by three is one into three.

12:10.560 --> 12:11.700
It is going to be three.

12:12.210 --> 12:16.830
And as way is going to be one by three into three.

12:17.490 --> 12:18.570
That is going to be zero.

12:18.720 --> 12:20.700
So this is actually 310.

12:21.480 --> 12:21.720
Okay.

12:22.230 --> 12:25.500
And you can verify that this formula is going to work for everything.

12:25.530 --> 12:25.830
Okay.

12:26.220 --> 12:30.030
So how this is going to work, I will just give you an idea.

12:30.540 --> 12:36.050
So you have a grid upsizing and it is divided into three parts.

12:36.060 --> 12:36.330
Okay.

12:36.330 --> 12:44.200
So we have three grids and by three and same holds true for the horizontal and vertical axis.

12:44.220 --> 12:44.490
Okay.

12:44.910 --> 12:53.820
If I want to number these three words from zero, I can give them number that zero, one and two.

12:54.360 --> 12:54.660
Okay.

12:55.680 --> 12:59.790
So if I do and by three, I get the starting.

12:59.970 --> 13:01.380
I get the grid number.

13:01.470 --> 13:01.770
Okay.

13:01.770 --> 13:08.040
So if this is zero one, two, three, four, five, six, seven, eight.

13:08.580 --> 13:12.660
If you just divide them by three, six by three is two seven batteries.

13:12.660 --> 13:15.200
Do it by three, stoop for them.

13:15.210 --> 13:16.380
You get two for them.

13:16.380 --> 13:18.750
You get one for them, you get zero.

13:19.020 --> 13:19.320
Okay.

13:20.630 --> 13:21.320
And.

13:23.130 --> 13:27.620
And from this do you you can see the starting point is at six.

13:27.960 --> 13:28.800
How do you get six?

13:28.800 --> 13:30.080
You multiply it by three.

13:30.450 --> 13:31.050
For this one.

13:31.050 --> 13:32.600
You see the starting point is three.

13:32.610 --> 13:33.870
How do you get this?

13:34.230 --> 13:36.870
You multiply it by three, you multiply this by three.

13:37.320 --> 13:38.760
This gives us the starting points.

13:38.760 --> 13:41.790
Okay, so let us try for this particular cell.

13:42.180 --> 13:44.460
This is five, six, seven.

13:44.940 --> 13:46.590
So this should be the starting point.

13:46.710 --> 13:48.720
So this is seven, comma four.

13:49.170 --> 13:51.570
Let us find the starting point for seven on four.

13:51.570 --> 13:57.210
So what we do seven by four, seven by three and two, three and four were drawn to three.

13:57.630 --> 14:01.140
So seven by three is six.

14:02.520 --> 14:05.940
And four by three is one and three is three.

14:06.280 --> 14:06.420
Okay.

14:07.290 --> 14:09.750
So you can see this point is actually six commentary.

14:10.890 --> 14:12.210
So this formula really works.

14:12.570 --> 14:14.760
Once you know the starting point of this upgrade.

14:14.820 --> 14:19.620
You can hydrate in a square of three by three from that starting point.

14:19.670 --> 14:23.370
Okay, so let us see this logic in the code.

14:24.560 --> 14:25.700
So what I'm going to do?

14:26.150 --> 14:27.680
I'm going to find out.

14:30.060 --> 14:33.150
The square root or I can simply do.

14:33.660 --> 14:36.160
I can assume that it's a three by three upgrade.

14:36.180 --> 14:37.710
So as X is going to be.

14:40.010 --> 14:40.910
I buy.

14:43.020 --> 14:44.100
Three industry.

14:44.900 --> 14:48.890
So let us assume that end is nine in this case.

14:51.710 --> 14:53.480
And that's why it's going to be.

14:55.330 --> 14:57.160
Jay by three into three.

14:58.210 --> 15:01.210
And four index equals to six.

15:02.760 --> 15:03.930
X less than.

15:05.230 --> 15:06.580
Ethics plus three.

15:08.070 --> 15:09.030
X plus plus.

15:10.180 --> 15:16.750
Four and like was s y y less than is y plus three.

15:18.740 --> 15:19.760
Five plus plus.

15:20.510 --> 15:24.980
If my traits of x y contains.

15:26.950 --> 15:28.060
This particular number.

15:29.330 --> 15:30.920
Then we return false.

15:31.340 --> 15:37.310
Otherwise we return true that this number is not present in the local memoranda subgroup.

15:38.530 --> 15:43.960
This is a word helper function and we are done.

15:44.470 --> 15:45.880
Let us bring the solution.

15:46.210 --> 15:48.960
Four and I equals zero.

15:48.970 --> 15:49.750
I less ten.

15:49.750 --> 15:51.310
Nine, eight plus, plus.

15:54.680 --> 16:03.260
For in the equals zero day less than nine day plus plus vote matrix of a J.

16:15.730 --> 16:16.990
One thing I need to change.

16:17.110 --> 16:20.590
This is the recursive call that is actually also local.

16:21.040 --> 16:21.370
Okay.

16:22.000 --> 16:24.790
So this is also local.

16:28.320 --> 16:30.470
And we are able to vote.

16:31.170 --> 16:34.710
So let's build our code and write it on it.

16:35.730 --> 16:39.180
So I want to solve Sudoku.

16:43.560 --> 16:45.990
So you can see this is the output I'm getting.

16:46.400 --> 16:54.120
And let us just verify for a few random grids if we have all the numbers from 1 to 9, one, two, three,

16:54.120 --> 16:56.760
four, five, six, seven, eight and nine.

16:57.060 --> 16:57.990
That seems fine.

16:58.330 --> 17:00.240
Do we also have the numbers?

17:00.240 --> 17:00.870
Which are.

17:03.440 --> 17:07.220
So we should have five and nine, so we should not replace the original numbers.

17:07.220 --> 17:11.930
We have five or nine here and let us look at each at.

17:12.920 --> 17:13.610
So.

17:15.050 --> 17:15.770
You look at this.

17:16.430 --> 17:18.050
It contains all the numbers.

17:18.620 --> 17:26.180
You look at this row and this column or you look at this row, it contains all the numbers from 1 to

17:26.180 --> 17:26.390
9.

17:26.870 --> 17:29.060
And we able to look at this sub grade.

17:29.450 --> 17:32.990
It contains all the numbers in the range 1 to 9.

17:33.380 --> 17:42.200
And this is true for all this upgrades and that means our solution seems correct.

17:42.200 --> 17:44.870
Okay, so we got the correct solution.

17:45.310 --> 17:52.260
I hope you really understood this logic and you are now able to implement this.

17:52.280 --> 17:52.940
So Lucas all.

17:54.170 --> 17:58.910
And this is the backtracking step that you should not miss.

17:59.390 --> 18:04.730
And another mistake that people do is they will they forget to add the written statements.

18:04.850 --> 18:05.960
This is very important.

18:06.260 --> 18:12.620
Otherwise, you will not able to propagate true or false that you are getting from this problem to the

18:12.620 --> 18:15.440
previous call and you will get stuck.

18:15.770 --> 18:20.040
So the either done statements are actually important here.

18:21.260 --> 18:24.050
So that's it for this particular.

18:25.670 --> 18:26.180
Problem.

18:26.510 --> 18:26.900
Thank you.

18:26.900 --> 18:28.790
I hope you learned a lot of new content.
