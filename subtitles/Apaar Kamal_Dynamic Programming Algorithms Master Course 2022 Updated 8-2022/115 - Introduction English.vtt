WEBVTT

00:00.700 --> 00:01.070
Hii all.

00:01.480 --> 00:04.900
Let's have a quick introduction on DP on trees .

00:04.900 --> 00:09.760
And in this section we will solve some very good basic problems on dp on trees.

00:10.150 --> 00:14.140
Once we understood that, then we'll solve some very advanced problems regarding it.

00:14.680 --> 00:21.430
And before moving further, I just like to give a small introduction on what is dp on trees.

00:22.300 --> 00:26.540
So dp on trees is nothing but we have a tree data structure

00:26.560 --> 00:27.850
We all know what a tree is right?

00:28.270 --> 00:30.100
Trees have some special properties.

00:30.130 --> 00:30.970
There are N nodes.

00:32.170 --> 00:33.280
And there will be.

00:33.280 --> 00:33.760
Exactly.

00:33.760 --> 00:35.590
N minus one edges.

00:36.250 --> 00:36.610
Correct.

00:37.120 --> 00:39.670
And a tree is nothing but a connected.

00:40.660 --> 00:44.950
It is connected and there are some very special basic properties.

00:44.950 --> 00:49.150
I want you all to already know these properties regarding trees.

00:49.160 --> 00:49.480
Right.

00:49.780 --> 00:52.620
Then only you can understand what is DP on trees and how will it work.

00:53.050 --> 00:56.470
But first understand what is trees, a Trees data structure.

00:57.690 --> 00:59.670
And then we'll move on with DP on trees

01:01.150 --> 01:03.640
So basically I'll be using few terms in this.

01:03.640 --> 01:09.250
For example, the first time is DAG, which is nothing but directed acyclic graph.

01:09.460 --> 01:13.540
This is important, so every dynamic programming solution.

01:13.540 --> 01:14.530
As we can see in this.

01:14.530 --> 01:16.430
This is nothing but a Fibonacci series, right?

01:16.450 --> 01:20.290
I've taken the example of Fibonacci series, this Fibonacci series.

01:20.500 --> 01:26.860
We can see this is a simple recursive Tree of Fibonacci series, when N = 5.

01:26.860 --> 01:28.450
I just made a part of the tree.

01:29.470 --> 01:36.650
So in directed acyclic graphs, what I'll say is that every recursive relation is a directed acyclic graph

01:36.970 --> 01:37.480
that means.

01:39.500 --> 01:39.830
Yeah.

01:39.890 --> 01:41.420
So the first thing is that.

01:43.220 --> 01:50.690
It is directed because we know that if let's say a f(n) calling f(n-1), then f(n-1)

01:50.690 --> 01:52.630
will not call f(n), right?.

01:53.210 --> 01:58.390
So it's it's one directional you can easily see in this tree.

01:58.520 --> 02:01.820
So basically, this is a tree, but I will convert it to a graph right.

02:01.850 --> 02:02.810
I'll show you how.

02:03.260 --> 02:05.780
So you can easily see that it's moving downwards.

02:05.780 --> 02:07.490
It's directed right there.

02:07.580 --> 02:11.560
There is no Uni directional edges, bi-directional edges.

02:12.320 --> 02:13.250
So it's a directed.

02:14.900 --> 02:17.030
Now, the second thing is, acyclic

02:17.240 --> 02:19.610
That means this should not have a cycle.

02:19.610 --> 02:27.610
But that means if I have a state, let's say f(x) and it depends on a state, called f(y), then f(y) let's say

02:27.920 --> 02:31.690
depends on state f(z) then f(z) cannot depend on f(x).

02:31.700 --> 02:34.220
So here we will see that there is a cycle in the graph.

02:35.330 --> 02:40.370
So there shouldn't be these type of situations in our dynamic programming solution.

02:40.370 --> 02:46.250
There will never be these type of situation because if I apply a recursion and I try to do f - x,y,z

02:46.250 --> 02:48.350
then it will go on till infinity, right?

02:48.650 --> 02:55.400
Because to calculate x I  want y and for y, I want z and for z, i want x again, and then it will be an infinite loop.

02:55.840 --> 02:58.580
And so the graph here is directed.

02:58.580 --> 03:01.970
It should be acyclic and it is a graph, right?

03:02.300 --> 03:04.320
Why is it a graph why not a tree.

03:04.340 --> 03:05.810
Why can't we say it as a tree?

03:05.810 --> 03:06.080
Right.

03:06.290 --> 03:10.760
Because here we can easily see that it is a recursive tree.

03:11.030 --> 03:13.430
But actually this is not a proper way to represent.

03:14.150 --> 03:16.370
The proper way would be that if I don't have.

03:17.370 --> 03:21.780
Let's try to reduce the duplicacy in this tree.

03:21.780 --> 03:22.080
Right.

03:22.260 --> 03:23.790
So I have F5.

03:24.600 --> 03:27.620
Okay, let me make it over here f4.

03:27.960 --> 03:32.160
Let's say I have f3, I have f2, I have f1, right.

03:32.160 --> 03:32.760
So I have these.

03:32.760 --> 03:37.530
many, for f5 i call f4 and f3, for f4 i call f3 and f2, for f3.

03:38.190 --> 03:40.200
I call f2 and F1.

03:41.060 --> 03:41.390
Correct.

03:41.900 --> 03:49.640
So this I can say this to be a proper representation of Fibonacci series, dynamic programming directed

03:49.640 --> 03:51.050
acyclic graph.

03:51.320 --> 03:53.900
Here you can see it is acyclic there's no cycle in this.

03:54.140 --> 03:55.100
This is not a cycle.

03:55.100 --> 03:55.400
Right?

03:55.490 --> 03:58.880
Because if I talk about directed graph, this will never be a cycle.

03:58.880 --> 04:00.880
I cannot start from a particular node.

04:00.890 --> 04:02.060
Let's say I start from f5.

04:02.300 --> 04:08.060
I cannot reach f5 by any of the path, but here you can see it's a detected acyclic graph.

04:08.060 --> 04:08.780
And this was a.

04:09.950 --> 04:12.530
I can say that this has a cool representation.

04:12.890 --> 04:14.180
This is a recursive tree.

04:15.170 --> 04:18.440
And from this, you can easily understand what function calls are being made.

04:18.740 --> 04:22.580
But this is actually a representation of a Fibonacci

04:22.580 --> 04:28.070
directed acyclic graph because I haven't duplicated I haven't duplicated the states here.

04:28.700 --> 04:29.030
Correct.

04:29.970 --> 04:35.430
So what will happen in all the problems that we have solved till now and will be solving further

04:35.760 --> 04:37.560
There will be a directed acyclic graph.

04:38.370 --> 04:42.030
Some states will depend on other states and it will be a graph.

04:42.300 --> 04:45.940
So that's why I'm calling it a graph and not a tree, I'm not saying it a directed acyclic tree.

04:45.940 --> 04:48.980
It's a directed acyclic graph, right?

04:48.990 --> 04:54.480
So as we can see, this is not a tree because the one and only condition of the trees is N nodes and 

04:54.480 --> 04:56.130
N minus one edges and it should be connected.

04:56.760 --> 04:57.050
Correct?

04:57.510 --> 05:01.590
I know this is connected, but if it has n nodes, it does not have n minus one edges.

05:02.730 --> 05:03.270
It's a graph.

05:04.620 --> 05:04.860
So.

05:05.370 --> 05:05.670
Yeah.

05:06.150 --> 05:06.680
Thank you all.

05:06.780 --> 05:10.470
And in this section, we'll learn more about Dp on Trees.

05:10.710 --> 05:12.930
In the next section, we'll learn more about DP on graphs