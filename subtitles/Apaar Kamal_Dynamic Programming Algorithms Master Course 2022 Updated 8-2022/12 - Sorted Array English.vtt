WEBVTT

0
00:01.030 --> 00:01.830
Hi everyone.

1
00:01.840 --> 00:07.750
So now we have already looked at two examples in which we use the recursion to bring the solution.

2
00:08.470 --> 00:13.240
Now we are going to look at the third question in which we are not given a number, but we have to work

3
00:13.240 --> 00:13.690
on an array.

4
00:13.780 --> 00:14.080
Okay.

5
00:14.090 --> 00:21.220
For example, we need to write a recursive function that checks whether a given array is sorted or not.

6
00:21.250 --> 00:21.490
Okay.

7
00:21.670 --> 00:25.600
So you may think how do I apply recursion on an array, so the idea is very simple

8
00:25.870 --> 00:33.010
Like we said, for a problem of size N, we can break it into one unit work we will

9
00:33.010 --> 00:40.630
do and remaining N-1 units of work recursion will do and similar thing we can apply here as well.

10
00:41.050 --> 00:43.510
So let's see how we can actually handle this problem.

11
00:44.110 --> 00:50.640
So let us let me draw an array and let's say we have certain elements.

12
00:51.280 --> 00:57.460
Let's say one, two, three, five, four and six.

13
00:58.240 --> 00:58.320
.

14
00:58.360 --> 00:59.050
Let’s say this is the array.

15
00:59.050 --> 01:00.890
And I want to check if it is sorted or not

16
01:02.090 --> 01:03.200
Now what you can do is.

17
01:04.720 --> 01:09.400
The first step you can take and you can ask recursion to tell whether the remaining array is sorted

18
01:09.400 --> 01:09.460
Or not

19
01:09.730 --> 01:09.940
Okay.

20
01:10.210 --> 01:15.180
So the first step would be you compare the first, the zeroth element with the first element that you

21
01:15.190 --> 01:15.520
check.

22
01:16.030 --> 01:23.590
If one is less than two and the remaining array is sorted, then you can say the entire array is going to be

23
01:23.590 --> 01:23.920
sorted.

24
01:23.960 --> 01:24.160
Okay.

25
01:24.160 --> 01:27.640
So what is the condition for array of size N

26
01:27.820 --> 01:35.680
Let's say you have an array of size N and you can check it is sorted if array[0] < array[1].

27
01:36.070 --> 01:36.400
Okay.

28
01:37.180 --> 01:41.380
And let's say there is a function F that returns whether this array is sorted or not.

29
01:41.410 --> 01:45.730
So what we will need to do, we need to check if this is the case and.

30
01:46.890 --> 01:51.780
The remaining array is also sorted okay so the remaining array of the size 	N-1

31
01:52.110 --> 01:59.270
If it is also sorted then we can say yes, the entire array is going to be sorted okay

32
01:59.280 --> 02:03.960
So what I’m going to tell if one is less than two and two, three, five, four, six.

33
02:04.200 --> 02:05.310
This is the remaining array.

34
02:05.820 --> 02:06.900
Is this array sorted?

35
02:07.590 --> 02:09.570
Again, I will make a recursive call.

36
02:09.600 --> 02:09.870
Okay.

37
02:09.870 --> 02:11.100
So I am breaking down this code.

38
02:11.520 --> 02:12.390
two is less than three.

39
02:12.390 --> 02:12.750
Yes.

40
02:13.590 --> 02:15.690
Then we will make a call on the remaining array.

41
02:15.720 --> 02:18.030
i.e 3,5,4,6

42
02:19.100 --> 02:20.420
Then we break it down.

43
02:20.690 --> 02:22.940
Now for this, A[0] < A[1]

44
02:22.940 --> 02:24.500
Yes, three is less than five.

45
02:25.310 --> 02:26.480
And we can check.

46
02:27.710 --> 02:32.360
That the remaining array that is five four six is sorted or not?

47
02:33.600 --> 02:38.010
Now at this point we are going to check is five less than four the answer is no

48
02:38.310 --> 02:38.600
Okay.

49
02:39.120 --> 02:40.920
As soon as we get this as 

50
02:40.970 --> 02:47.520
No, we don't need to make any further calls and we can return calls from this particular point.

51
02:47.550 --> 02:50.010
So this basically tells okay this condition is false.

52
02:50.670 --> 02:53.040
It tells its parent that this condition is false.

53
02:53.460 --> 02:55.710
So here we are doing and of true and false.

54
02:55.740 --> 03:01.770
That means that output would be false, that we are doing and of true and false, the output would be

55
03:01.770 --> 03:02.190
false.

56
03:02.550 --> 03:08.580
And hence to the main call we will tell okay no this array is not sorted and we're going to return

57
03:09.630 --> 03:12.840
This is the case for when.

58
03:12.840 --> 03:13.860
The array is not sorted.

59
03:14.280 --> 03:17.850
Now, let us also look at the case when the array is sorted.

60
03:17.910 --> 03:18.900
What is going to happen?

61
03:19.200 --> 03:20.860
Let's let me take a small example.

62
03:21.150 --> 03:24.420
One, two, three, and let's say five.

63
03:25.040 --> 03:27.240
So we are going to check one is less than two?

64
03:27.480 --> 03:27.930
Yes.

65
03:28.740 --> 03:29.820
Remaining array is sorted.

66
03:30.000 --> 03:31.560
We don't know recursion will check.

67
03:32.040 --> 03:33.480
It will say 2 < 3

68
03:34.020 --> 03:35.250
Is the remaining array sorted.

69
03:35.850 --> 03:36.420
We don't know.

70
03:36.430 --> 03:40.620
recursion is going to check three is less than five and is the remaining array is sorted.

71
03:42.380 --> 03:42.830
Remaining.

72
03:42.830 --> 03:43.980
array  has only one element.

73
03:44.000 --> 03:45.800
Yes, it's one element array is ordered.

74
03:46.190 --> 03:46.970
This is true.

75
03:47.000 --> 03:47.620
this is true

76
03:47.620 --> 03:48.440
It return true.

77
03:49.010 --> 03:49.660
This is true.

78
03:49.670 --> 03:50.220
This is true.

79
03:50.240 --> 03:51.110
It return true.

80
03:51.470 --> 03:52.070
This is true.

81
03:52.070 --> 03:52.610
This is true.

82
03:52.610 --> 03:53.600
It returns true.

83
03:53.900 --> 03:55.790
Hence this array is going to be sorted.

84
03:56.300 --> 03:59.000
Now, from here you can figure out the base case.

85
03:59.480 --> 04:00.040
So if.

86
04:00.040 --> 04:02.030
If only one element is left.

87
04:03.260 --> 04:06.070
Then you can say, yes, it is a sorted array

88
04:06.460 --> 04:06.830
Okay.

89
04:07.490 --> 04:10.180
In the recursive case, you have to check for two conditions.

90
04:10.190 --> 04:12.680
One is, if A[0] < A[1] 

91
04:14.200 --> 04:16.840
And the remaining array is sorted.

92
04:17.180 --> 04:17.320
Okay.

93
04:17.990 --> 04:23.380
Remaining array, you can make a recursive call to check whether that array is sorted or not.

94
04:24.010 --> 04:26.470
So that's all for this concept.

95
04:26.840 --> 04:28.300
Now we will look into the code.

96
04:31.490 --> 04:36.670
Hii, Now let's see the code for this problem, whether the array is sorted or not?

97
04:36.840 --> 04:38.750
So there are multiple ways to write the code.

98
04:38.780 --> 04:41.330
I'm going to discuss a few of the ways.

99
04:41.330 --> 04:41.630
Okay.

100
04:41.900 --> 04:47.360
So in the first function, I'm going to write a boolean function that tells whether array is sorted or not

101
04:47.450 --> 04:52.850
I take input the array and I also take input the number of elements the array is currently containing.

102
04:52.880 --> 04:53.210
Okay.

103
04:53.630 --> 04:57.860
We talked about we will have a base case and we also talked about we will have a recursive case.

104
04:58.610 --> 04:59.960
What happened in the base case?

105
04:59.960 --> 05:07.820
We said if only one element is left or maybe 0 elements are there in the array, then it would be sorted

106
05:07.820 --> 05:07.940
array.

107
05:08.000 --> 05:09.680
So I can return true

108
05:09.680 --> 05:15.500
What we have already discussed in the recursive case, we talked about we will check if arr[0]

109
05:16.570 --> 05:18.640
Is less than arr[1]

110
05:19.830 --> 05:24.080
And the remaining array is sorted is sorted the remaining array

111
05:24.080 --> 05:24.320
Okay.

112
05:24.570 --> 05:26.970
So now let's say this is the array

113
05:28.660 --> 05:32.290
And the remaining array I want to start from this particular point.

114
05:32.980 --> 05:40.540
I can pass this point as arr + 1 because it will take my array starting address for the remaining

115
05:40.540 --> 05:48.490
problem to the next index so I can check if the array that starts from arr + 1 is sorted and this

116
05:48.490 --> 05:52.420
array contains how many elements this contains  N-1 elements

117
05:52.420 --> 05:52.660
Okay.

118
05:52.960 --> 05:56.110
If this is the case, then I can say return true.

119
05:56.410 --> 05:59.650
If one of these conditions is false, then I can say return false.

120
06:00.190 --> 06:00.640
That's it.

121
06:00.670 --> 06:02.200
That's the entire code.

122
06:02.620 --> 06:06.280
Now we can try to run and check for this example.

123
06:06.520 --> 06:13.780
Maybe I can say cout is sorted and I give the array and I give the value n.

124
06:16.100 --> 06:20.160
Let's build the code and let's try to run it.

125
06:20.160 --> 06:22.220
./ sorted array

126
06:23.000 --> 06:23.870
And I'm getting a zero.

127
06:23.870 --> 06:25.520
That means this array  is not sorted.

128
06:25.560 --> 06:27.680
Maybe a let me make it as.

129
06:29.740 --> 06:30.100
Six.

130
06:30.100 --> 06:30.510
Seven.

131
06:31.060 --> 06:31.570
Then.

132
06:32.490 --> 06:33.510
I should get an answer.

133
06:33.510 --> 06:35.460
One that, yes, this array is sorted

134
06:36.090 --> 06:39.060
Now you can see that this code is working perfectly fine.

135
06:39.510 --> 06:41.850
And this is exactly how we have discussed.

136
06:42.510 --> 06:43.840
And the code should be implemented.

137
06:43.860 --> 06:44.100
Okay.

138
06:44.460 --> 06:47.530
So some people may find another way to implement it.

139
06:47.550 --> 06:49.470
Let me also go through that way.

140
06:49.980 --> 06:55.010
Some people may find this arr + 1 and N-1 consuming, confusing.

141
06:55.020 --> 07:00.030
Then maybe is sorted and you may like to pass an index.

142
07:01.190 --> 07:01.460
Okay.

143
07:01.970 --> 07:03.710
Let me tell you one more way.

144
07:04.500 --> 07:10.550
So in this way, you're not changing the value of N so what we are going to do, we are going to pass

145
07:10.550 --> 07:12.620
the address in the form of an index.

146
07:12.620 --> 07:12.890
Okay.

147
07:13.220 --> 07:20.900
Let's say we're checking whether arr[i] < arr[I + 1]and we can say, okay, let's check

148
07:21.230 --> 07:24.970
the remaining sub array that starts from I + 1 is sorted or not.

149
07:24.980 --> 07:25.250
Okay.

150
07:25.460 --> 07:30.230
And when I reaches this value, okay, we're going to make sub problems sub.

151
07:30.230 --> 07:34.850
Problems sub problems sub problem when i is equal to N-1

152
07:34.850 --> 07:38.420
That means we have array which contains exactly one element.

153
07:39.080 --> 07:45.320
So let me write the same code in a different manner so I can check if  I = N-1

154
07:45.320 --> 07:47.840
That means we are at the last index we can return.

155
07:47.840 --> 07:48.140
True.

156
07:49.310 --> 07:49.840
otherwise

157
07:49.850 --> 07:50.960
We can check if.

158
07:52.150 --> 08:01.300
Arr[i] < arr[i+1] and the remaining array is sorted is sorted maybe is sorted

159
08:01.750 --> 08:02.080
to.

160
08:03.830 --> 08:04.820
This is a second way.

161
08:05.600 --> 08:07.040
Then we pass in the array.

162
08:07.190 --> 08:10.280
Instead of changing the array address what we can do.

163
08:10.280 --> 08:12.560
We can move the index pointer one step forward.

164
08:13.010 --> 08:14.120
That is a plus one.

165
08:14.720 --> 08:19.580
And instead of reducing the size of N we can say the array is from i + 1 till N-1.

166
08:19.610 --> 08:23.720
So we keep it as N and we can check we can say return true.

167
08:24.170 --> 08:26.090
Otherwise we can return false.

168
08:26.600 --> 08:29.330
This could be another way of writing.

169
08:34.770 --> 08:37.320
okay what is not declared.

170
08:42.080 --> 08:43.260
Sorry this should be arr

171
08:43.340 --> 08:44.200
This should be arr.

172
08:45.390 --> 08:49.290
So maybe I can call this method is sorted2.

173
08:51.530 --> 08:55.430
And here I need to pass in value of I initially it is going to be zero.

174
08:56.300 --> 08:59.240
And if I run this code now, I get yes, it is sorted.

175
08:59.660 --> 09:05.600
But suppose if I put it 16 here and I run this now you can see it is going to return zero.

176
09:06.470 --> 09:10.430
So both the methods are almost same.

177
09:10.460 --> 09:15.890
The only thing is in the first method we are not explicitly passing the address.

178
09:16.160 --> 09:16.930
We are

179
09:18.010 --> 09:20.650
Changing the base address of array in every call.

180
09:20.650 --> 09:23.920
We are making a copy of the address and we are updating it.

181
09:24.730 --> 09:24.970
Okay.

182
09:24.970 --> 09:28.990
But in the second address, instead of changing the base address of the array, we have kept a variable i.

183
09:29.620 --> 09:34.630
Which tells us in the current function call we are going to start our array from an index I and we are going

184
09:34.630 --> 09:37.690
to do the work till N-1.

185
09:37.810 --> 09:41.890
Okay, so that's all for the two approaches.

186
09:41.890 --> 09:46.330
And I hope the codes are very simple and they should be clear to you now.

187
09:47.590 --> 09:48.790
That's all for this lecture.

188
09:48.820 --> 09:49.330
Thank you.