WEBVTT

00:00.880 --> 00:01.420
Hello Everyone.

00:01.670 --> 00:04.990
Welcome to this section, which is about one dimensional deep.

00:05.470 --> 00:11.770
In this section we learn what is one dimensional DP and we will see various problems associated with

00:11.770 --> 00:11.950
it.

00:12.790 --> 00:15.480
So firstly, let's understand what is one dimensional DP

00:15.490 --> 00:18.880
It is nothing but, when our dimensional programming state.

00:18.880 --> 00:20.290
So we talked about states.

00:20.290 --> 00:22.810
Right, states have dependencies on each other.

00:23.650 --> 00:27.280
So basically the recursive approach, the recursive part of dynamic programming.

00:27.840 --> 00:33.610
When dynamic programming state contains only one independent variable, just remember this it's one

00:34.210 --> 00:38.260
independent is an important term here and variable as well.

00:39.370 --> 00:44.920
So, when it is only one independent variable, then it's 1D dimensional, one dimensional dynamic programming

00:44.920 --> 00:45.310
problem.

00:46.150 --> 00:50.310
For example, the best example is fibonacci numbers so in fibonacci numbers.

00:50.310 --> 00:52.720
what we had is nth fibonacci numbers equals

00:53.880 --> 00:55.680
fibonacci of till n-1 + 

00:55.980 --> 00:57.570
fibonacci till n-2

00:58.020 --> 01:00.240
So here we can see the recursive.

01:01.920 --> 01:03.480
The recursive function, right?

01:03.510 --> 01:10.050
It has only one independent variable, which is N, it does not depend upon some ABC x, y, z right?

01:10.080 --> 01:13.340
Just one independent variable cool, so.

01:14.610 --> 01:21.570
Generally a one dimensional program, one dimensional, I will just say 1D DP, right a 1D DP problem

01:21.570 --> 01:24.180
will always have one independent variable.

01:25.020 --> 01:29.350
Let's take another example, a very basic example, which is of which is about factorial.

01:29.850 --> 01:34.200
But how a recursive approach for factorial can be done here.

01:34.980 --> 01:41.970
We can simply say that f(n) is equal to f(n-1) that n factorial is equals two n

01:41.970 --> 01:45.510
minus one factorial X (into) n, correct?

01:46.300 --> 01:47.260
This is another.

01:48.600 --> 01:49.260
1D.

01:49.800 --> 01:50.380
DP problem.

01:50.880 --> 01:55.290
If I want to find the nth factorial number, I can simply write this recursion into my code.

01:55.290 --> 01:57.990
I simply code it and optimize it by memoization, cool.

01:59.160 --> 02:06.150
And let's talk about 3rd approach, 3rd example, which is, let's say, nth triangular number.

02:07.090 --> 02:10.360
So you all must have heard about this.

02:11.320 --> 02:14.110
So if you don't know it by the name, you will know it by its face.

02:14.260 --> 02:14.560
So.

02:14.980 --> 02:16.160
nth triangular number

02:16.160 --> 02:19.210
is nothing but sum of first n natural numbers.

02:20.260 --> 02:21.640
So why is it called triangular number?

02:21.640 --> 02:22.550
so let me tell you.

02:22.630 --> 02:23.050
So.

02:24.110 --> 02:28.250
sum of one is one, sum till 2 is equal to this.

02:28.250 --> 02:31.670
And this right sum till three is equal to, 6.

02:37.000 --> 02:38.450
And then sosum till 4 is.

02:38.470 --> 02:39.520
How much 10.

02:40.470 --> 02:40.710
Right?

02:42.200 --> 02:48.800
So I hope you are getting this point that this is the nth triangular number right? so the first triangular number is

02:48.800 --> 02:49.130
one.

02:49.520 --> 02:52.760
2nd triangular number is three, 3rd triangular number is six.

02:52.760 --> 02:57.200
And the fourth triangular number is 10, so it is basically 1, 1+2

03:00.690 --> 03:02.730
Or here we can say 1 + 2

03:02.730 --> 03:06.520
Here we can say one plus three, one plus two plus three plus four.

03:06.870 --> 03:08.130
What is the recursive approach for?

03:08.130 --> 03:09.660
This can be very easy.

03:09.840 --> 03:10.530
It is simple.

03:10.890 --> 03:13.440
f(n) = f(n-1) + n

03:14.100 --> 03:14.340
.

03:16.100 --> 03:16.520
Again.

03:16.520 --> 03:21.680
This is if I want to calculate this, I can use this recursive approach and memoize it again.

03:21.680 --> 03:23.380
It becomes a simple 1D.

03:23.380 --> 03:24.170
DP problem.

03:24.710 --> 03:25.010
Cool.

03:25.250 --> 03:26.600
So of course you all might be wondering.

03:26.600 --> 03:30.400
That is a very simple formula about it, which is n(n+1)/2

03:30.840 --> 03:35.930
So of course I know that too, but I'm just here explaining you what is 1D DP

03:36.320 --> 03:40.610
And now, after this lecture, what we'll do is we'll do will solve some problems.

03:41.820 --> 03:43.540
Right we'll solve some problems.

03:43.540 --> 03:45.850
And I have handpicked those problems specially.

03:46.240 --> 03:52.990
And those problems will tell you some various aspects of 1D DP

03:53.950 --> 03:54.250
So.

03:55.430 --> 03:57.110
There are optimization.

03:57.110 --> 04:00.440
Optimization problems, optimization problems.

04:01.510 --> 04:04.240
Cool, there are some combinatorial problems.

04:04.360 --> 04:08.500
All of them will be related to 1D DP only

04:08.530 --> 04:11.410
You don't have to worry about any other DP being involved here.

04:11.740 --> 04:13.900
All of them will have one recursive relation.

04:14.110 --> 04:17.680
All of them will have recursive relation with only one independent variable.

04:18.760 --> 04:19.030
So.

04:20.340 --> 04:22.530
And optimization problems.

04:22.530 --> 04:26.520
Combinatorial problems will have some game theory problems as well in this.

04:28.770 --> 04:29.050
Right.

04:29.490 --> 04:30.000
And.

04:31.020 --> 04:31.290
Yeah.

04:31.830 --> 04:38.810
Also, we'll have some you know, there are some problems that if you start from a particular location,

04:38.820 --> 04:41.280
you want to go to a particular location in an array.

04:41.280 --> 04:45.510
 by making some number of steps, how you solve it.

04:45.750 --> 04:48.380
And lots, lots of varieties of problems.

04:48.390 --> 04:48.720
Right.

04:49.200 --> 04:53.090
So let's get going with it Thank You!