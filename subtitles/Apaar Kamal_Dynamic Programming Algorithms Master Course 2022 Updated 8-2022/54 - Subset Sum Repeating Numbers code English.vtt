WEBVTT

00:01.260 --> 00:02.370
So let's code this.

00:02.700 --> 00:05.010
We already have the subset sum code.

00:05.010 --> 00:05.340
Right?

00:05.760 --> 00:07.020
so What I'll simply do is.

00:07.830 --> 00:08.520
What was this?

00:08.550 --> 00:09.450
It was include.

00:09.450 --> 00:09.630
It was

00:09.630 --> 00:10.110
Exclude

00:10.410 --> 00:11.580
Exclude will remain same.

00:11.580 --> 00:16.980
which is x mile and instead of include into the sum once.

00:17.250 --> 00:20.190
What we'll do is includ in your sum multiple number of time.

00:20.730 --> 00:21.450
Multiple times.

00:21.540 --> 00:23.160
That means this.

00:23.790 --> 00:28.440
I just remove index over here, simple just remove minus one.

00:28.680 --> 00:29.850
And now what is this doing?

00:29.850 --> 00:35.010
If something is greater than the index, it will call it so there will be a time when what will happen.

00:35.010 --> 00:40.010
sum will might be less than index and this won't be called and this will be called this.

00:40.050 --> 00:42.300
Go back and tell me what this sum is.

00:43.780 --> 00:43.950
cool.

00:44.050 --> 00:45.850
So I just removed minus one over there.

00:46.210 --> 00:51.370
We know that it will never be an infinite loop either a index is reducing.

00:51.980 --> 00:53.420
That's why it was mentioned.

00:53.440 --> 01:00.310
It was mentioned in the starting of the problem that it's the array of non-negative number right and

01:01.120 --> 01:04.930
so either this will reduce or this will reduce right.

01:05.250 --> 01:11.680
so in this case, what I have is I don't want to use 0 because if I'm using zero here, then it might

01:11.710 --> 01:16.540
go into a serious problem right because sum-0 will be zero only.

01:16.810 --> 01:22.510
And we're not reducing index as well so if index, sum will then call index, sum right so just

01:22.510 --> 01:25.090
make sure one thing that this array doesn't contain any zero.

01:25.360 --> 01:32.180
Because if even if the array contains zero, it doesn't make sense right because that zero is redundant.

01:32.220 --> 01:33.100
We don't want it.

01:33.100 --> 01:34.050
It's the seventh.

01:34.060 --> 01:38.860
Wheel basically even if it's there, then also its fine, if it's not there then also it's fine.

01:39.340 --> 01:42.120
Just make sure that zero is not there.

01:42.710 --> 01:42.960
right.

01:43.970 --> 01:44.390
And.

01:45.700 --> 01:46.780
for the 2nd problem?

01:47.140 --> 01:50.570
When the values are Repeating, I will just say that now the array is not.

01:50.590 --> 01:53.800
not of non-negative integers, but just positive.

01:53.800 --> 01:54.100
integers.

01:54.370 --> 01:55.930
That means there shouldn't be any.

01:57.710 --> 02:01.550
If there's a zero, it will go on forever right and now let me build it.

02:04.040 --> 02:10.580
cool, now you can easily see that the 22 sum is possible from these array and when when you

02:10.580 --> 02:13.240
can use any of them multiple number of times.

02:13.860 --> 02:14.170
so guys

02:15.930 --> 02:16.470
subset

02:16.470 --> 02:16.920
sum.

02:19.160 --> 02:21.410
Repeating numbers.

02:21.980 --> 02:26.660
So actually this is another problem which is called the coin change problem.

02:26.840 --> 02:28.340
I don't know if you have heard about it or not.

02:29.120 --> 02:36.710
It's called coin change problem and it says that you want to change a particular sum and you have some

02:36.710 --> 02:37.160
coins.

02:37.160 --> 02:42.650
You have a finite supply of coins of 1,2,5,10,20

02:42.830 --> 02:46.730
So instead of one, two, five, ten, 20, what you have is you're going to have an infinite supply

02:46.730 --> 02:52.640
of some particular number of coins let's say 3,7,4 maybe and so on.

02:53.420 --> 02:56.210
And yeah, and you have been given a sum.

02:56.510 --> 02:59.990
Let's say I give you sum 150 and I want a change.

02:59.990 --> 03:05.180
And then you have to figure out whether the change is possible from the number of rupees that we have.

03:06.340 --> 03:06.640
cool.

03:07.770 --> 03:13.110
So this subset sum Repeating is also a coin change problem.

03:13.110 --> 03:14.760
So I've covered the coin change problem here.

03:14.760 --> 03:19.800
Only what you're going to do is you go ahead and try to, you know.

03:20.820 --> 03:21.480
Formulate this.

03:22.370 --> 03:23.660
All right, go go on.

03:23.660 --> 03:28.730
And just read the coin change problem with the Internet and you will instantly realize that it's the

03:28.730 --> 03:34.430
same and in the next video, what we'll do is we'll simply optimize it further.

03:34.790 --> 03:41.090
We will try to go bottom up and then we'll optimize the memory complexity because it's not easy to optimize

03:41.090 --> 03:43.430
the memory complexity while coding it.

03:45.340 --> 03:48.490
So we'll code it bottom up in the tabular form and.

03:50.320 --> 03:52.090
great! see you in the next part guys, thank you!