WEBVTT

0
00:01.480 --> 00:02.080
Hi, everyone.

1
00:02.170 --> 00:07.480
In this lecture, we're going to learn how to write a recursive function to compute nth Fibonacci number

2
00:07.930 --> 00:12.820
Okay, so if you have not heard about Fibonacci series, I will tell you it is a very simple mathematical

3
00:12.820 --> 00:18.340
series in which the first two terms are zero and one and every term.

4
00:18.550 --> 00:22.000
Every ith term is the sum of previous two terms.

5
00:22.000 --> 00:29.230
Okay, so I can say the nth term is nothing but it is the sum of previous two terms i.e F(N-1)

6
00:29.710 --> 00:31.180
+ F(N-2).

7
00:31.750 --> 00:34.810
And if I talk about what would be the next term, it would be some of these two.

8
00:34.960 --> 00:36.040
That is one.

9
00:36.530 --> 00:37.540
what would be the next term?

10
00:37.540 --> 00:42.910
Some of these two that is 2 the next term would be 3, the next would be 5, next would be 8,

11
00:43.330 --> 00:45.340
the next would be 13 and so on.

12
00:45.370 --> 00:50.860
Okay, so what we are given, we are given a particular value of N and we want to tell okay what is

13
00:50.860 --> 00:53.410
the nth term of this particular series.

14
00:54.700 --> 00:59.860
So for example 01234567.

15
01:00.220 --> 01:02.740
The seventh term of the series is going to be 13.

16
01:03.100 --> 01:05.260
The 11th term is going to be some X, Y, Z.

17
01:05.650 --> 01:07.660
The fifth term is nothing but five.

18
01:08.320 --> 01:09.640
So we need to figure it out.

19
01:09.850 --> 01:10.150
Okay.

20
01:10.600 --> 01:14.050
So as I said, when we are dealing with recursion, we will need two things.

21
01:14.050 --> 01:16.970
One is the recursive case that we've already seen.

22
01:16.990 --> 01:18.580
We already know about this problem.

23
01:19.030 --> 01:20.410
And second is the base case.

24
01:20.720 --> 01:20.940
okay.

25
01:21.980 --> 01:27.470
So the idea of picking this problem is not to teach you the code, because code  is very simple the idea is to teach

26
01:27.470 --> 01:31.610
you the concept of recursion when there is more than one call.

27
01:31.610 --> 01:35.600
In the previous question we saw there is only one call happening from each function.

28
01:36.410 --> 01:40.030
But in this case, from each function call, two calls are going to happen.

29
01:40.040 --> 01:40.310
Okay.

30
01:40.700 --> 01:46.730
So we will talk about how the recursion tree would look like in this case and what would happen to the

31
01:46.730 --> 01:47.840
call stack and so on.

32
01:48.830 --> 01:50.750
Let's talk a little bit about the base case

33
01:51.080 --> 01:57.170
The base case is going to be two cases of let's say you are computing for N = 2.

34
01:57.200 --> 02:01.310
So it was going to make two calls, one on one and one on zero.

35
02:02.260 --> 02:04.420
But now at one what you are going to do.

36
02:04.780 --> 02:06.160
Will you make two more calls?

37
02:06.610 --> 02:09.660
Will you make a call on 0 and -1 the answer is no.

38
02:09.700 --> 02:12.910
We cannot make calls on the negative indices.

39
02:13.030 --> 02:18.250
That means we have to take one as a base case and we have to take zero as a base case.

40
02:18.280 --> 02:19.540
So this part is not needed.

41
02:19.540 --> 02:20.840
So we will have two base cases here.

42
02:20.890 --> 02:28.630
The value of N = 0 is going to be 0 and the value of N = 1 is going to be

43
02:28.630 --> 02:28.870
one.

44
02:29.230 --> 02:30.760
So let me first show you the code.

45
02:31.120 --> 02:36.190
And then along with the code, we will try to dry run how this code is going to work.

46
02:36.460 --> 02:36.730
Okay.

47
02:37.720 --> 02:41.350
So let's let's make a new program for Fibonacci.

48
02:45.010 --> 02:48.220
And let's copy a little bit from here.

49
02:51.340 --> 02:51.760
This is now fib.

50
02:51.970 --> 02:52.960
And this is now fib

51
02:54.540 --> 02:55.820
And this is now fib

52
02:56.870 --> 02:59.790
So as I said, we are going to have two base cases.

53
03:00.020 --> 03:00.290
Okay.

54
03:00.290 --> 03:02.600
So I can put both of them in a single condition.

55
03:02.600 --> 03:06.080
If N is zero or N is one, we can return N.

56
03:06.110 --> 03:10.880
That means if N is 0 we are returning zero, if N is one, we are returning 1 actually.

57
03:11.360 --> 03:15.680
Otherwise we are going to say we are going to compute two values.

58
03:15.680 --> 03:18.380
One is f1, that is fib(N-1).

59
03:18.830 --> 03:21.980
Another value is f2 i.e fib(N-2).

60
03:22.460 --> 03:25.160
And our answer would be nothing but f1 + f2.

61
03:25.670 --> 03:25.910
Okay.

62
03:26.510 --> 03:32.910
So we could have directly written return fib(N-1) + fib(N-2) 

63
03:33.380 --> 03:38.550
But just to make things easier for you, for the first time, I have written the code like this.

64
03:38.590 --> 03:38.840
Okay.

65
03:40.520 --> 03:47.210
Now this this will also make the understanding of call stack more clear what is exactly happening.

66
03:47.820 --> 03:48.750
Now, this is the code.

67
03:48.830 --> 03:50.030
Let us first run it.

68
03:51.250 --> 03:52.200
And the

69
03:54.290 --> 03:55.430
./Fibonacci.

70
03:55.430 --> 03:59.570
And if I say, okay, tell me the 7th term it is 13, tell me the 5th term it is 5.

71
04:00.020 --> 04:01.850
That means it is working perfectly fine.

72
04:02.840 --> 04:05.000
Now let us see what happens.

73
04:05.000 --> 04:06.230
At the call stack level.

74
04:10.890 --> 04:15.330
So let's say this is our call stack.

75
04:18.170 --> 04:22.670
And I'm going to run it for a small example, let's say, for N = 4

76
04:23.090 --> 04:23.360
Okay.

77
04:24.110 --> 04:28.250
And now in the in the beginning, we had only main.

78
04:30.000 --> 04:35.970
What happened is from Main, we made a call to Fibonacci for N = 4

79
04:36.720 --> 04:41.910
So we called Fibonacci with the value of N = 4 and it tried to compute the value of

80
04:41.910 --> 04:42.390
F1.

81
04:42.420 --> 04:43.860
So it made a call to three.

82
04:44.800 --> 04:47.730
It called Fib(N = 3)	

83
04:48.960 --> 04:49.050
Okay.

84
04:49.750 --> 04:52.960
And that three, what it did base case is not true.

85
04:53.350 --> 04:54.850
It tried to make a call.

86
04:55.120 --> 05:01.060
So another call it will make, but it will make later on that is to N = 2, these call that not

87
05:01.060 --> 05:03.670
executed yet, this will be executed later.

88
05:04.210 --> 05:05.380
3 made a call to 2

89
05:05.890 --> 05:07.090
3 made a call to 2

90
05:09.070 --> 05:09.370
Okay.

91
05:10.210 --> 05:12.170
And what happened at 2

92
05:13.330 --> 05:14.830
2 must have made a call to.

93
05:14.910 --> 05:15.160
One.

94
05:15.430 --> 05:17.380
Okay, so fib(2)

95
05:17.620 --> 05:21.710
It made a call to f(N=1), so at N = 1

96
05:21.730 --> 05:23.200
We saw that this function.

97
05:24.160 --> 05:25.080
Hits the base case

98
05:25.090 --> 05:26.550
And it will not execute this code.

99
05:26.560 --> 05:30.210
It will return a value of n that is one one actually returned one.

100
05:30.940 --> 05:35.380
This actually got removed from the memory.

101
05:35.650 --> 05:35.980
Okay.

102
05:37.270 --> 05:39.610
So this actually got removed from the memory.

103
05:40.240 --> 05:41.920
And now what happened is.

104
05:44.120 --> 05:45.890
This branch is also gone.

105
05:45.990 --> 05:46.280
Okay.

106
05:46.850 --> 05:51.290
So this branch returned 1and is now gone from the call stack.

107
05:51.530 --> 05:51.830
Okay.

108
05:52.100 --> 05:58.880
So what is going to happen is, 2 computed the value of  F(1) 2 is not going to compute.

109
05:58.880 --> 06:03.680
The value of F(2), this function will now execute line number ten for the first time.

110
06:03.680 --> 06:08.000
At this particular point, so it will make a call on zero and zero will return the value zero

111
06:08.480 --> 06:14.120
It will make a call on fib with N equal to zero and this is going to return zero and this is again

112
06:14.120 --> 06:15.500
going to get popped off.

113
06:15.860 --> 06:19.700
This is going to get removed from the call stack at this point.

114
06:20.060 --> 06:25.070
This is how the call stack is going to look like, and 2 knows that my answer is 1 + 0 i.e 1

115
06:25.070 --> 06:28.220
Two is going to tell three that my answer is one.

116
06:28.890 --> 06:32.000
So three now only knows one of the answers.

117
06:32.000 --> 06:33.080
Okay, so three knows done.

118
06:33.080 --> 06:33.980
the answer of F(1).

119
06:34.010 --> 06:39.470
for three is 1 now three is going to compute F2 for which it is going to make another call.

120
06:40.520 --> 06:43.010
So this is going to get removed.

121
06:43.610 --> 06:47.180
This is going to get removed and what is it going to do?

122
06:47.210 --> 06:48.980
Three is going to make a call on.

123
06:50.110 --> 06:50.810
Fib(1)

124
06:50.830 --> 06:51.040
Okay.

125
06:51.040 --> 06:52.780
So it is going to make Fib(1)

126
06:52.810 --> 06:57.580
So Fib(1) will get added in the call stack and it will again return	

127
06:58.150 --> 06:59.960
One, two, three.

128
06:59.980 --> 07:00.780
So it will return.

129
07:00.820 --> 07:01.660
My answer is.

130
07:02.880 --> 07:03.510
Also one.

131
07:03.930 --> 07:04.160
Okay.

132
07:04.350 --> 07:09.510
So at three, what it is going to do now three knows that I know one answer was one the another 

133
07:09.510 --> 07:13.560
answer was also one so it is going to return one plus one that is two.

134
07:14.220 --> 07:19.920
And now Four knows that my F1 is 2, four gets to know that one of the answers.

135
07:20.790 --> 07:21.090
Okay.

136
07:21.930 --> 07:24.960
And now Four is going to make a call for F2.

137
07:25.260 --> 07:28.680
That is this line number ten and this call will get executed.

138
07:28.840 --> 07:29.100
Okay.

139
07:29.460 --> 07:33.780
So we make a call at 2 so, same story going to repeat, we are going to make a call on one.

140
07:33.780 --> 07:37.610
One is going to tell and that my answer is 1 and will get added to the call stack.

141
07:37.620 --> 07:39.870
And then once it returns, it will get removed.

142
07:40.290 --> 07:46.080
Then two will make a call to zero, zero will return again zero and one + zero is going to be one.

143
07:46.470 --> 07:52.980
And at four we earlier knew that one answer was two and F2 is now one.

144
07:53.430 --> 07:54.960
So it is going to return two plus one.

145
07:54.960 --> 07:55.530
That is three.

146
07:55.530 --> 08:02.280
So, Fib(4) is going to be so I'm not drawn the call stack completely.

147
08:02.760 --> 08:09.870
But what I am trying to tell you is if you want to make it easy, if you want to see how many calls

148
08:09.870 --> 08:11.220
are made or what calls are made.

149
08:11.460 --> 08:14.760
So the ideal way is to draw it using the recursion tree.

150
08:15.660 --> 08:20.310
And from this you can easily estimate the space time complexity of the program as well.

151
08:20.770 --> 08:22.590
What happened at N = 4

152
08:22.590 --> 08:25.740
let us do it for N equal to five.

153
08:26.340 --> 08:30.330
If I will make two calls for 4 and 3	, this call will happen later on.

154
08:30.330 --> 08:32.490
4 will make two calls, three and two.

155
08:33.270 --> 08:35.130
This call will happen later on.

156
08:35.130 --> 08:36.870
It will make two calls 2 and 1.

157
08:37.350 --> 08:39.510
This call will happen later on.

158
08:39.510 --> 08:43.200
It will make two calls, 1 and 0, one will execute first.

159
08:43.800 --> 08:50.790
So one will return one, zero will return zero, two will return one and one will return one.

160
08:51.120 --> 08:54.270
3 will return 2 one plus one i.e two.

161
08:54.390 --> 08:59.130
Now 2 is not going to return anything directly because it is not the base case.

162
08:59.130 --> 09:00.480
So we need to further expand.

163
09:00.480 --> 09:01.890
It, so 2 will make two calls.

164
09:02.400 --> 09:04.710
It is going to return one, it is going to return zero.

165
09:05.130 --> 09:08.160
It is going to return 1 + 0.

166
09:08.160 --> 09:09.350
That is one and four.

167
09:09.370 --> 09:10.650
It is going to return two plus one.

168
09:10.650 --> 09:13.320
That is three and five is going to make a call.

169
09:13.320 --> 09:13.920
on three.

170
09:13.920 --> 09:15.300
Three is not our base case.

171
09:15.300 --> 09:18.960
It's going to call on two and one.

172
09:19.260 --> 09:21.120
It's going to call on one and zero.

173
09:21.330 --> 09:22.380
It will return one.

174
09:22.440 --> 09:23.640
It will return zero.

175
09:24.030 --> 09:30.060
It will return one, it will return one, it will return two and five is going to return three plus two.

176
09:30.060 --> 09:30.690
That is five.

177
09:31.820 --> 09:32.090
Okay.

178
09:32.420 --> 09:37.940
Now, these are the number of calls that we have made and roughly the number of calls in this case.

179
09:37.940 --> 09:41.540
If I talk about on the first level, I have one goal.

180
09:41.570 --> 09:47.630
On the 2nd  level, I have 2 call on the next level Iâ€™ve four calls, it is a GP and we have roughly

181
09:47.630 --> 09:48.200
N levels.

182
09:48.610 --> 09:52.010
So approximately we are making exponential number of calls.

183
09:52.490 --> 09:57.210
The time taken would be the number of calls, plus time in each call.

184
09:57.230 --> 10:00.440
So in each call we are doing a constant work that is adding two numbers.

185
10:01.370 --> 10:03.290
So it is O(2^N)

186
10:03.290 --> 10:05.030
And what about the space?

187
10:05.090 --> 10:06.830
How much memory we have taken?

188
10:07.340 --> 10:12.050
In the worst case, the maximum depth of the call stack would be this much.

189
10:12.230 --> 10:12.540
Okay.

190
10:13.810 --> 10:14.160
Okay.

191
10:14.380 --> 10:21.040
Because at any point only one of the branch is going to exist in the call stack so the memory of the program

192
10:21.040 --> 10:22.310
would look something like this.

193
10:22.330 --> 10:27.340
It is increasing, then maybe decreasing, then increasing, decreasing, increasing, decreasing and

194
10:27.340 --> 10:28.090
finally zero.

195
10:29.170 --> 10:32.380
In this particular branch, the utilization is maximum.

196
10:32.390 --> 10:32.650
Okay.

197
10:32.680 --> 10:39.250
So it would be something like of this, this is one N equal to one was at this point and this was

198
10:39.250 --> 10:41.260
N equal to zero was it, something like this.

199
10:43.200 --> 10:46.380
At these two points, the space utilization is maximum.

200
10:46.800 --> 10:51.630
So the time is O(2^N) space utilization is O(N).

201
10:53.000 --> 10:56.480
This is how the Fibonacci is going to work.

202
10:57.080 --> 10:58.970
I hope the concepts are clear.

203
10:59.030 --> 11:00.410
That's all for this lecture.

204
11:00.440 --> 11:00.920
Thank you.