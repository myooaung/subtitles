WEBVTT

0
00:00.480 --> 00:00.990
Cool guys.

1
00:01.020 --> 00:09.120
So right now, let's go inside some shortcuts and some tips and tricks that we should use.

2
00:09.150 --> 00:10.910
But it's not mandatory to use.

3
00:10.920 --> 00:16.710
But yeah, we should use, uh, to save time during the time of contest and other stuff.

4
00:17.620 --> 00:23.490
But, uh, what I want you to understand is that it's not necessary for you to do it.

5
00:23.880 --> 00:27.570
It's not mandatory for you to follow this particular tutorial.

6
00:27.930 --> 00:37.010
But yes, if you do it, it might give you some insights of how to like save time and get more in

7
00:37.020 --> 00:37.260
CP.

8
00:37.350 --> 00:43.170
Right, because in competitive programming, we want to work more on the logical part.

9
00:43.410 --> 00:51.060
We want to work more on the logic thinking, logic building part, right instead of code part, right.

10
00:51.060 --> 00:52.680
So we want to work less on code.

11
00:52.920 --> 00:54.240
Let's say there's a problem.

12
00:54.240 --> 00:56.400
I want to work 20 minutes on the logical part.

13
00:56.400 --> 01:00.810
I want to think for 20 minutes, but I just want to code it out in 5 minutes.

14
01:00.810 --> 01:04.770
If I've got the logic in my mind, I want to code it out in just 5 minutes.

15
01:04.770 --> 01:05.550
Not more than that.

16
01:06.210 --> 01:13.620
So to code it out in 5 minutes and to avoid some errors, I'll be using some small tips and tricks so

17
01:14.970 --> 01:16.230
you can use them wisely.

18
01:16.230 --> 01:17.660
It's like a bonus video for you.

19
01:17.980 --> 01:19.440
You use it or you do not use it.

20
01:19.440 --> 01:20.640
It depends on you, right?

21
01:21.240 --> 01:26.550
The first thing is guys that there this particular int and whenever I take int.

22
01:28.160 --> 01:31.340
I take a variable call int and what is its limit?

23
01:31.550 --> 01:34.430
Its limit is like two to the power 31, right.

24
01:34.430 --> 01:38.750
We all know what are the ranges of int and long long int,  character, strings right?.

25
01:39.620 --> 01:41.810
But guys, what happens is I want to.

26
01:42.910 --> 01:49.480
I do not want my int to be of length, 10 to the power 9 only, and I want it to extend to 10 to the 

27
01:49.480 --> 01:50.910
power 18.

28
01:50.990 --> 01:52.990
So what I can do is I can simply.

29
01:54.950 --> 01:56.480
Let's define it here.

30
01:57.320 --> 02:00.350
Let's define int as.

31
02:00.740 --> 02:01.820
Okay, let me give a space.

32
02:02.270 --> 02:03.290
Let's define.

33
02:04.220 --> 02:06.440
ll as long long.

34
02:07.040 --> 02:08.630
Instead of writing long long int.

35
02:08.750 --> 02:09.650
What is the long long int?

36
02:10.080 --> 02:11.690
Because these are like basic parts.

37
02:11.690 --> 02:13.730
And I'm not going deep into this long long.

38
02:13.790 --> 02:15.920
Int has a range of 2 to the power 63.

39
02:15.920 --> 02:18.380
That is approximately 10 to the power 18.

40
02:19.190 --> 02:23.160
So that's the maximum a integer can hold in.

41
02:23.540 --> 02:26.840
That's a maximum that a long long integer can hold in C++.

42
02:26.840 --> 02:27.140
Right.

43
02:27.440 --> 02:31.820
So you won't be like printing answers more than these many digits ever.

44
02:32.110 --> 02:38.960
So if you want to use long long int, you can define ll as long long int and simply now define ll n.

45
02:40.110 --> 02:40.510
Right.

46
02:40.530 --> 02:42.210
And let's  cout n.

47
02:45.380 --> 02:47.870
As you can see, it will give me a garbage value initially.

48
02:47.870 --> 02:49.460
So let's define it till 1e18.

49
02:49.460 --> 02:52.190
What is, 1e18, it is 10 to the  power 18?, what will be 2e18

50
02:52.460 --> 02:53.960
2* 10 to the power 18

51
02:54.120 --> 02:54.440
Right.

52
02:54.920 --> 02:57.440
Let's print this so what I'm getting.

53
02:57.440 --> 03:00.710
I'm getting I'm getting an integer of length.

54
03:01.400 --> 03:08.300
18 So it is 10 to the power 18 but if I don't define this as, let's say I, I just write int over here.

55
03:09.740 --> 03:12.800
so this won't work why because it will give me an error value.

56
03:13.340 --> 03:15.740
It will give me a wrong value, a garbage value.

57
03:15.740 --> 03:21.890
Adding value by because the length of n is approximately ten to the power nine, that is 2 to the power

58
03:21.890 --> 03:22.370
31.

59
03:23.060 --> 03:27.980
It won't be storing numbers more than that that is 1e18.

60
03:27.980 --> 03:32.150
So the maximum length of an integer in this is INT MAX.

61
03:32.540 --> 03:32.830
Right.

62
03:33.200 --> 03:35.270
You can't store integers more than this.

63
03:35.270 --> 03:43.700
That is 2147483647 can't store more a value more than this in the integer variable.

64
03:43.940 --> 03:45.650
You need a long long integer variable.

65
03:46.190 --> 03:47.080
This is a INT_MAX.

66
03:47.090 --> 03:49.150
It's in-built constant value.

67
03:49.160 --> 03:50.990
In C++ you can use it directly.

68
03:51.570 --> 03:54.300
It is 2 to the power 13 -1  Right.

69
03:54.350 --> 03:56.180
So as we can see, seven for a reason.

70
03:57.990 --> 03:58.470
Right.

71
03:58.770 --> 04:01.980
And they like other ways also, let's say.

72
04:02.490 --> 04:02.790
Okay.

73
04:02.790 --> 04:03.840
So we'll do this later.

74
04:05.080 --> 04:08.390
And I said, guys, let's define it back now.

75
04:08.560 --> 04:16.160
What happens is when we define ll as long long int generally a habit of writing integer 

76
04:16.810 --> 04:19.470
We get a bad habit of writing ll instead, right?

77
04:19.860 --> 04:27.610
But what I want to do is I want to write int only and use long long int for that I can do is I can simply

78
04:27.610 --> 04:29.260
define int here.

79
04:29.290 --> 04:31.180
i.e define int as long long int 

80
04:31.420 --> 04:35.230
Now, wherever I write, int will get the long, long int.

81
04:35.790 --> 04:39.850
So my habit of writing int doesn't go away.

82
04:39.850 --> 04:43.900
So that whenever I face an interview in which I'm trying to code something out.

83
04:45.050 --> 04:46.100
At that particular time.

84
04:46.100 --> 04:53.840
I don't use ll because it's not a good habit, not a good practice to use ll in interviews

85
04:53.840 --> 04:54.470
and other stuff.

86
04:54.860 --> 04:55.760
So I want my.

87
04:57.010 --> 04:58.560
Habit of writing int to be there.

88
04:58.570 --> 05:00.340
But as we can see, we got an error.

89
05:01.010 --> 05:02.230
But let's check this error.

90
05:03.170 --> 05:03.470
Okay.

91
05:03.470 --> 05:08.090
So we have int written over here, that is line number seven in line number seven.

92
05:08.090 --> 05:11.390
If I have int written here, that means it's a long long int

93
05:11.390 --> 05:16.850
So we know that whenever a compiler searches, whenever compiler starts execution, it starts from the

94
05:16.850 --> 05:18.310
main function, right?

95
05:18.860 --> 05:22.370
So if it start from the int main function, right.

96
05:22.370 --> 05:28.710
So if this function is returning a long long int, as we know that, int has become long long int

97
05:28.790 --> 05:29.330
and right.

98
05:29.330 --> 05:34.600
If I, if I like trying something like try to return something over here, it will return a long, long

99
05:34.670 --> 05:34.850
int.

100
05:35.330 --> 05:37.760
But that's not what the compiler wants, right?.

101
05:39.360 --> 05:41.790
What's that error, main must return int

102
05:42.770 --> 05:43.030
cool.

103
05:43.610 --> 05:46.940
So right now,  main, is returning a long long int

104
05:46.940 --> 05:48.530
Because it is defined as long long int.

105
05:48.540 --> 05:56.020
So what we'll do is I cast it back to 32 bit int right so a long long int is a 64

106
05:56.020 --> 06:00.650
bit int, right,  64 bit means that means it has 64 bits to store the integers.

107
06:01.160 --> 06:04.880
That's why the range of 2 to the power 64 right now.

108
06:05.150 --> 06:08.400
What I'll do is I'll convert it back to the 32 bit int .

109
06:08.420 --> 06:16.490
So what I'll do is you to int32_t  again, this is again a variable in C++, it's also in C and

110
06:16.760 --> 06:17.900
what does this do?

111
06:19.070 --> 06:19.400
It.

112
06:19.850 --> 06:22.370
It means int32_t means.

113
06:23.920 --> 06:25.390
int only, a normal int.

114
06:25.960 --> 06:26.210
Right.

115
06:26.300 --> 06:27.040
So it means.

116
06:27.040 --> 06:29.210
An integer, nothing else.

117
06:29.320 --> 06:36.910
I'm just converting the long long int back to this particular part so that we return our 32 bit integer

118
06:36.910 --> 06:38.950
only from the int main, so let's build it again.

119
06:38.950 --> 06:39.210
Guys.

120
06:40.660 --> 06:40.950
Right.

121
06:41.140 --> 06:45.970
So now we can easily see that I have a integer defined over here because a int means a long, long

122
06:45.970 --> 06:46.210
int.

123
06:46.750 --> 06:50.800
And that integer  is storing a range of 10 to the power 18.

124
06:51.130 --> 06:57.910
And I said, guys, it's a hack it's not a good practice to use to do this in the what's the best

125
06:57.910 --> 07:03.430
practice to do it if you if you want numbers of more than ten to the power nine, if you want to use more

126
07:03.430 --> 07:08.490
than more numbers than integer can hold, then simply use long, long.

127
07:08.560 --> 07:10.030
And that's a good practice.

128
07:10.030 --> 07:16.600
But it's a normal hack just to save your time and so that you don't waste your time in this small stuff.

129
07:17.920 --> 07:24.380
So I hope you understood this part that by why I'm using integer over here why I'm using int over here, but it is

130
07:24.620 --> 07:26.980
storing our length very really big.

131
07:27.520 --> 07:29.350
cool, this is the first part, guys.

132
07:29.740 --> 07:32.290
Now, the second part is I don't want to.

133
07:34.610 --> 07:34.800
Okay.

134
07:35.000 --> 07:38.830
So I think that rest part is also not mandatory.

135
07:38.880 --> 07:43.970
Let's say I'm defining some terms here I define F is first what happens is.

136
07:45.400 --> 07:46.150
Whenever I'm.

137
07:47.560 --> 07:52.330
Using a pair in a vector a pair of array, so a pair has a first and second.

138
07:52.480 --> 07:59.820
So instead of writing first FIRST or second as SECOND  again and again, I simply use F or S.

139
08:00.400 --> 08:02.530
So let's say s SECOND.

140
08:03.400 --> 08:10.030
And okay, so generally we use vectors and in vectors we use push_back right what I'll say is.

141
08:11.190 --> 08:12.360
I'll also look.

142
08:14.080 --> 08:17.230
Let's define pb as pushback.

143
08:17.620 --> 08:24.160
These are some small hacks that you can use, but it's not mandatory just for those who really want to

144
08:24.160 --> 08:24.640
use this.

145
08:25.240 --> 08:29.140
And also, you guys, you can define it on your own purposes, like whatever.

146
08:29.450 --> 08:34.960
If there's a variable that you use very often and you want it to be used to be defining to some other

147
08:34.960 --> 08:36.670
thing, you can use it directly.

148
08:37.030 --> 08:42.280
So people also use type defines instead of defines which define a particular type.

149
08:42.610 --> 08:48.610
Like you can define a vector int as VI, we will be using type define right.

150
08:49.580 --> 08:49.940
And.

151
08:51.350 --> 08:51.680
Go on.

152
08:51.740 --> 08:51.970
Right.

153
08:51.980 --> 08:58.100
So if you see some other codes, you will see a lot of defines already there.

154
08:58.100 --> 08:58.390
Right.

155
08:58.430 --> 09:06.020
So what people do is okay I'll show you an example in the next video of different defines that people use.

156
09:06.470 --> 09:09.020
But here are a few of them that you can use.

157
09:09.730 --> 09:09.940
Cool!

158
09:10.370 --> 09:14.540
So I'll be using only these four I think I won't be using any else

159
09:15.170 --> 09:17.150
So let's make a snippet out of this.

160
09:18.140 --> 09:19.250
So let's copy it.

161
09:19.940 --> 09:21.980
Tools Developer snippet.

162
09:23.100 --> 09:28.590
And I'll make this as cp snippet not cpsimple snippet.

163
09:29.700 --> 09:30.510
CP Right.

164
09:30.990 --> 09:33.660
And let me save this cp dot(.)

165
09:34.500 --> 09:42.960
Sublime snippet cp.sublimesnippet cool, and now what I'll say cp and what is my cp

166
09:42.960 --> 09:43.320
simple.

167
09:43.800 --> 09:45.720
This is my cp simple and this is cp

168
09:47.550 --> 09:47.850
Okay.

169
09:48.270 --> 09:49.480
So that's it, guys.

170
09:49.720 --> 09:50.460
See you In the next part.