WEBVTT

00:00.540 --> 00:01.190
So let's code.

00:01.230 --> 00:02.970
The solution to this problem.

00:02.970 --> 00:09.120
And here we can see that I have taken the input so initially we have N and then we have m, then we have the number of

00:09.150 --> 00:11.300
vertex and the number of edges.

00:11.790 --> 00:16.930
So for all the edges, I just take an X and Y in the input and I pushed it into my adjacency list of the graph.

00:17.530 --> 00:21.730
cool, so now what we do is we have graph ready and we just have to traverse the graph.

00:21.960 --> 00:24.600
So let's code a function called paths().

00:25.140 --> 00:25.440
Right.

00:25.620 --> 00:29.790
And yeah, so let's make it a void function and let's call it.

00:29.790 --> 00:31.590
paths, what will happen?

00:31.590 --> 00:35.460
I simply say we will pass two values to it, current and count

00:35.760 --> 00:38.850
Okay, so before moving there, let's just finalize this part.

00:39.640 --> 00:40.740
So I'll start from zero.

00:40.740 --> 00:44.680
I'll go till N and I'll say, okay, find the path that is starting from I.

00:45.150 --> 00:51.480
That means I'm just asking you to go over all the path which starts from I and initially I'll pass the count

00:51.480 --> 00:51.960
as one.

00:51.960 --> 00:55.530
That means there's one vertex that has been visited that is I right.

00:55.770 --> 00:59.250
So when I'm moving I'm going to a vertex I'll just mark it as visited.

01:01.160 --> 01:01.360
Okay.

01:01.550 --> 01:02.990
I haven't taken the visited array.

01:02.990 --> 01:04.100
Let's take it quickly.

01:04.220 --> 01:05.280
Visited N cool.

01:06.710 --> 01:11.530
So when I'm going to a vertex and mark it as visited and when I am leaving it I simply market is as unvisited.

01:12.960 --> 01:13.260
correct.

01:13.830 --> 01:17.580
So in the middle, what we do is we just perform this.

01:18.570 --> 01:19.280
Backtracking.

01:19.650 --> 01:26.700
And what I'll simply say is if I have not visited X, that means just go and visit it.

01:26.790 --> 01:27.120
Right?

01:27.360 --> 01:30.300
So just go and visit X and count will be count plus one.

01:31.530 --> 01:32.850
And what will be the base case?

01:32.850 --> 01:34.050
The base case will be nothing.

01:34.060 --> 01:37.890
But if I have visited all the nodes, that means the count.

01:38.070 --> 01:43.620
If this count, the number of node visited is equal to N, that means I have visited all the nodes.

01:43.620 --> 01:49.140
That means I visited all the node and exactly once why once because I have never went to any node twice

01:49.950 --> 01:54.450
because it was if it was marked visited, then I'm not going on it again.

01:54.450 --> 01:54.780
Correct.

01:55.140 --> 01:56.730
So I'm never visiting.

01:56.730 --> 02:00.210
any vertex twice and I'm visiting all the vertex exactly once.

02:00.660 --> 02:04.410
So if current equals to N, I simply say Hamiltonian.

02:05.730 --> 02:13.470
path is equal to true that means there wasn't Hamiltonian path and let's say take this variable called Hamiltonian

02:13.470 --> 02:13.800
path.

02:14.160 --> 02:19.160
Also, what you can do is you can write this function which returns a boolean variable.

02:19.440 --> 02:23.160
You can make it bool also so that it returns whether a path exists or not.

02:23.430 --> 02:24.930
Both of them works fine for me.

02:25.830 --> 02:27.310
So this is easy to code.

02:27.330 --> 02:33.030
That's why I picked it up and I leave the other implementation to you where you can fulfill this path.

02:34.710 --> 02:35.680
bool paths

02:36.210 --> 02:36.470
Okay.

02:36.540 --> 02:37.020
So just.

02:37.440 --> 02:37.680
Yeah.

02:38.070 --> 02:45.690
And here you can see it's a very easy, very easy and very, you know, simple backtracking solution.

02:45.900 --> 02:48.060
So this is the part where backtracking is done.

02:48.630 --> 02:48.840
Right.

02:49.230 --> 02:49.560
Okay.

02:49.710 --> 02:51.600
So I think this should be over here.

02:53.150 --> 02:58.120
Right, because, okay this should be over here only because, you know, if I'm mariking any node as 

02:58.130 --> 03:00.470
visited, I will have to market it as unvisited.

03:00.650 --> 03:02.150
I cannot just directly return.

03:03.680 --> 03:04.410
so if count.

03:04.430 --> 03:07.160
is equal to N I say, Hamiltonian path is true and I'll return it back.

03:07.910 --> 03:10.760
So this is the main step, which is backtrack.

03:11.960 --> 03:13.440
so in the backtracking

03:13.440 --> 03:17.760
You will see one thing that we are performing an action and we are underperforming it again.

03:18.570 --> 03:19.350
So that's the.

03:20.360 --> 03:25.490
Major point of backtracking sp that's why it takes more time because we are underperforming it as well.

03:26.330 --> 03:28.730
So there's not a special complexity to the solution.

03:29.390 --> 03:35.690
So the complexity of the solution for this particular function is nothing but the number of Hamiltonian

03:35.690 --> 03:40.490
path O of number of Hamiltonian

03:40.970 --> 03:41.510
paths.

03:42.520 --> 03:42.800
Right.

03:43.070 --> 03:50.720
So we can say that if we have many paths and it will try to traverse all the paths starting from a node

03:50.800 --> 03:51.090
i.

03:51.460 --> 03:53.020
And finally, I can also.

03:54.780 --> 03:56.720
print whether the path exist or not

03:56.730 --> 03:57.510
Let's build it.

03:58.020 --> 03:58.500
Okay.

03:59.490 --> 03:59.790
Yes.

03:59.790 --> 04:02.050
So the path exists in this graph, right?

04:02.250 --> 04:05.820
what if i take this graph here also, it exist.

04:05.820 --> 04:07.380
And I just leave it to you.

04:08.640 --> 04:10.920
And, yeah, so we can do one thing.

04:10.920 --> 04:16.320
Why don't I try and ask this to start the path from one.

04:16.950 --> 04:18.590
So if I start the path from one.

04:18.600 --> 04:21.210
Okay, this is the previous graph.

04:22.200 --> 04:23.880
This is 0 and this is 1.

04:25.060 --> 04:27.270
so path shouldn't exist let me see.

04:28.080 --> 04:28.350
Yeah.

04:28.470 --> 04:31.950
So the path does not exist if I just start from one, cool.

04:32.160 --> 04:36.120
So I hope this is a very clear solution for all of us.

04:36.150 --> 04:36.480
It's.

04:37.080 --> 04:38.940
And see you in the next part.