WEBVTT

00:00.900 --> 00:01.220
Hi.

00:01.320 --> 00:06.450
So now we're going to talk about an interesting problem, which is known as an Queens problem.

00:06.930 --> 00:09.180
So let's understand what this question is.

00:09.750 --> 00:17.490
So it's a problem of placing and test queens on a neuroscientist board so that no two queens are going

00:17.490 --> 00:18.800
to attack each other.

00:18.820 --> 00:19.080
Okay.

00:20.310 --> 00:22.860
So we are given and cross and just bought.

00:23.280 --> 00:25.140
For example, this is an equal to four.

00:28.020 --> 00:28.640
So.

00:29.400 --> 00:36.270
Yeah, so what we want, we want to place four queens on this chessboard so that no queens are dark

00:36.270 --> 00:39.750
each other and can be eight and can be seven, it can be 11.

00:40.260 --> 00:41.090
So it's a variable.

00:41.340 --> 00:48.450
So we are given input and and in the output we need to print this configuration of the chessboard.

00:48.690 --> 00:51.810
Okay, this is what is expected in the output.

00:52.890 --> 00:58.200
So now if you look carefully in this configuration, no queen is going to take you to that.

00:58.200 --> 00:58.470
Okay.

00:58.470 --> 01:06.120
So if you know about a queen, a queen can move along a row, it can move along a column, or it can

01:06.120 --> 01:08.690
also move or attack along a diagonal.

01:08.880 --> 01:09.130
Okay.

01:09.840 --> 01:16.530
If you see all all of these if you talk about this diagonally, this queen is not going to attack anyone.

01:16.530 --> 01:16.800
Okay?

01:17.490 --> 01:19.920
In each row, there is one queen that is under observation.

01:19.920 --> 01:23.160
You can have and it's not going to attack anyone in the row.

01:23.160 --> 01:24.990
It's not going to attack anyone in the column.

01:25.440 --> 01:29.490
Similarly for this queen, the diagonal rows and columns are empty.

01:30.330 --> 01:38.220
And for this queen also, there is nothing, no queen that it can attack and similar for this one as

01:38.220 --> 01:38.430
well.

01:38.550 --> 01:38.790
Okay.

01:39.600 --> 01:45.540
So we need to come up with a configuration that satisfies these constraints.

01:45.540 --> 01:45.840
Okay.

01:46.140 --> 01:53.220
So again, you can see it is about finding an optimal configuration that satisfies these particular

01:53.220 --> 01:53.940
constraints.

01:53.940 --> 01:58.530
And we discussed and backtracking can be used to solve these kind of problems.

01:59.490 --> 02:06.020
So let's see how we would solve this problem and let's try to come up with a logical game.

02:06.510 --> 02:09.870
And there could be different variations of this problem.

02:09.870 --> 02:16.350
So a common variation could be put any one configuration that satisfies these requirements.

02:16.350 --> 02:18.900
Okay, another variant could be current.

02:18.900 --> 02:22.740
All possible solutions of this particular problem or another could be.

02:22.950 --> 02:27.810
Instead of printing the solutions, you can simply count how many solutions exist for a given problem.

02:27.810 --> 02:33.300
So we are going to look at all these variants one by one on what are the changes we need to make in

02:33.300 --> 02:35.040
the code in order to make them work?

02:36.090 --> 02:40.740
So let us let's see actually what we can do.

02:41.790 --> 02:42.540
So.

02:44.190 --> 02:44.700
Let's see.

02:45.060 --> 02:47.970
So let's assume that we have a board.

02:48.630 --> 02:49.260
We have.

02:50.660 --> 02:53.840
And growth and world order for growth forward for now.

02:55.230 --> 02:57.480
And we will try to solve this problem.

02:57.660 --> 02:57.960
Okay.

03:02.990 --> 03:10.180
What what is the idea that to firstly we need know that in every door so let us fill this great Roberto.

03:11.060 --> 03:14.630
So in every door there would be one green or gas or one green.

03:15.750 --> 03:23.910
But what we need to do, we need to finalize at what index the Queen should be placed in the Iron Throne.

03:23.940 --> 03:25.800
This is what we need to think.

03:26.940 --> 03:28.230
So what happened is.

03:32.600 --> 03:32.820
Yeah.

03:32.840 --> 03:33.470
So let's see.

03:34.190 --> 03:37.910
So, as we discussed, we need one queen for every role.

03:37.940 --> 03:40.220
Okay, so we need one queen.

03:41.370 --> 03:43.230
For each role.

03:44.700 --> 03:49.660
So now let us try to start fixing Queens in each row.

03:49.720 --> 03:53.050
So what I will do, I am starting at zero zero and I will do.

03:53.050 --> 03:58.870
Okay, let me play the Queen in the first column and let me try to solve the remaining problem.

03:59.620 --> 04:00.910
What is the remaining problem?

04:00.910 --> 04:04.090
The remaining problem is actually this grid.

04:04.390 --> 04:07.810
Okay, this is the remaining problem.

04:08.410 --> 04:14.530
So what we can do, we can try to solve the problem for the next row that is equal to one.

04:15.100 --> 04:22.010
So what we will do is, okay, let us go and try to place a queen at an optimal column in the current

04:22.010 --> 04:22.300
draw.

04:22.330 --> 04:24.820
So what I will do, I will say, okay, I go ahead.

04:25.120 --> 04:27.190
Can I play the queen hit non-traditional.

04:27.790 --> 04:28.990
Can I play the queen hit?

04:29.170 --> 04:32.620
The answer is again, no can replace a queen here.

04:32.770 --> 04:33.880
The answer is yes.

04:34.510 --> 04:37.830
I will place it and I will say it for this rule.

04:37.840 --> 04:43.540
I'm done because when I place the Queen on this index, I don't have a queen in a column.

04:43.540 --> 04:46.240
I don't have a queen in a in a diagonal.

04:46.330 --> 04:46.660
Okay.

04:47.710 --> 04:54.250
I don't have a green in that role because for Rovian we don't need to check because we're not placing

04:54.250 --> 04:55.240
any green in the same room.

04:55.870 --> 04:56.920
So this is actually done.

04:57.460 --> 05:02.370
Now what we will do, we will go to the next group and we will take any place again here.

05:02.480 --> 05:05.260
Nonetheless, no cannibalism going here.

05:05.260 --> 05:07.720
Dan Terrace, no cannibalism going here.

05:07.810 --> 05:08.590
The answer is no.

05:09.040 --> 05:10.990
Can I place a green here, Dan?

05:10.990 --> 05:11.500
That is no.

05:12.030 --> 05:16.330
Now, this right around all possibilities in Ecuador, Colorado.

05:16.900 --> 05:21.770
And we could not find that this rogue and bizarre look.

05:22.120 --> 05:23.120
So now what we will do.

05:23.260 --> 05:26.470
This rule is going to tell the previous caller.

05:26.470 --> 05:26.770
Okay.

05:26.770 --> 05:28.480
So this is this was the first call.

05:29.890 --> 05:31.390
This was the second call.

05:31.750 --> 05:33.030
And this is a third recursive.

05:33.250 --> 05:40.660
So the third recursive call is going to tell the parent call that there is something wrong with your

05:40.660 --> 05:41.470
configuration.

05:41.470 --> 05:42.340
Go and correct.

05:42.460 --> 05:44.590
So what we are going to do, we are going to backtrack.

05:44.920 --> 05:47.530
We are going to go back to the previous row.

05:47.560 --> 05:47.880
Okay.

05:48.190 --> 05:53.410
So when we are going back to the previous row, this function call is over and we don't have any information

05:53.410 --> 05:54.730
about this at all as of now.

05:55.270 --> 05:58.090
And we will say, okay, whatever you were trying.

05:58.300 --> 06:02.470
Okay, so this and all this function call will maintain what column?

06:02.470 --> 06:06.140
I have already tried placing the green so it will log.

06:06.390 --> 06:13.000
I will do later to we had tried and now this value of G will move to the next index.

06:13.000 --> 06:13.240
Okay.

06:13.720 --> 06:14.290
What we will do?

06:14.290 --> 06:18.280
We come back to this row and we will erase of election that we did.

06:18.370 --> 06:20.980
So this step is actually going to be a backtracking step.

06:21.580 --> 06:23.470
We are going to remove this going from here.

06:24.580 --> 06:26.410
And we are going to.

06:28.190 --> 06:30.380
See this configured.

06:30.500 --> 06:32.900
This is not the optimal location.

06:33.230 --> 06:34.760
Maybe you should place a green here.

06:34.910 --> 06:36.560
Okay, so we place knew.

06:37.010 --> 06:38.240
Now again, what we are going to do.

06:38.570 --> 06:42.380
We are going to again call on the next row so we can replace the green here.

06:42.500 --> 06:44.480
Don, that is no Don.

06:44.480 --> 06:45.800
We place a green here.

06:46.100 --> 06:47.870
No can replace a green hit.

06:48.140 --> 06:48.440
No.

06:48.440 --> 06:51.470
Because it's going to be attacked by this green.

06:52.390 --> 06:54.710
Can replace a hit on tourism again.

06:54.760 --> 06:55.750
What is going to happen?

06:56.170 --> 07:01.090
The third arrow is when you tell the second row that, okay, this configuration is not possible, there

07:01.090 --> 07:02.430
is something wrong that you have done.

07:02.470 --> 07:02.800
Okay.

07:03.280 --> 07:05.620
So it's going to let let's go back.

07:06.010 --> 07:06.970
Let's backtrack.

07:08.230 --> 07:13.020
And again, we are coming back here and in this role, we have already seen that.

07:13.030 --> 07:13.260
Okay.

07:13.570 --> 07:16.960
The fourth column is also not suitable for the configuration.

07:16.960 --> 07:17.200
Okay.

07:17.200 --> 07:18.190
So what is going to happen?

07:18.190 --> 07:25.330
We have tried all possibilities in this rule, then we have tried all possibilities in the current row

07:25.750 --> 07:27.790
and the solution is not possible.

07:28.090 --> 07:35.890
We are going to send a message to the previous rule so that messages false again that this is not possible.

07:37.050 --> 07:38.760
This is not possible.

07:39.270 --> 07:45.390
This falls we will send by maybe having a return type in the function that may be a boolean.

07:46.260 --> 07:47.290
What is going to happen?

07:47.340 --> 07:52.770
Each row is going to try some configuration and if it is not successful then it is going to return.

07:53.400 --> 07:57.750
Also true to the previous rule, depending upon the configuration was successful or not.

07:58.560 --> 08:02.010
We will return true if the remaining result.

08:02.010 --> 08:05.760
If the remaining rate is sold, we will return true.

08:06.090 --> 08:08.620
If the remaining root is not sold, we will return false.

08:08.640 --> 08:10.710
That is the whole idea of passing this message.

08:11.380 --> 08:18.090
The what we are going to do, we are again going to be going back in the first row and we are saying,

08:18.090 --> 08:22.350
okay, let us the first row knows what is the state.

08:22.620 --> 08:22.860
Okay.

08:22.860 --> 08:25.020
What is the state of the variables that we have seen?

08:25.060 --> 08:25.230
Okay.

08:25.230 --> 08:29.790
That means the first function call will actually store that.

08:29.790 --> 08:30.180
Okay.

08:30.450 --> 08:34.410
I have already seen Delta column number zero.

08:34.530 --> 08:37.170
So let me try the next column in the first row.

08:37.830 --> 08:43.440
What it will do, it will say, okay, let us remove the queen from the zero index and we will try to

08:43.440 --> 08:45.810
place a queen at the first index.

08:45.810 --> 08:46.110
Okay.

08:46.200 --> 08:49.680
It was okay, get go and try and solve the remaining problems.

08:49.680 --> 08:51.390
It will make a call on equal to one.

08:51.960 --> 08:53.820
Then this row what we will do will take it.

08:54.000 --> 08:55.530
This location is not possible.

08:56.190 --> 08:57.750
This location is not possible.

08:58.140 --> 08:59.670
This location is not possible.

09:00.060 --> 09:04.890
Because if you place these locations, it will be attacked by this queen.

09:04.920 --> 09:09.840
Okay, so what we will do will play the queen hit and we will make a quality equal to two.

09:10.230 --> 09:16.530
And you are going to ask, okay, next row, go and try to solve the entire subgroup that is pending

09:17.280 --> 09:18.540
and tell me an answer.

09:18.540 --> 09:19.290
True or false?

09:19.380 --> 09:21.050
If it is true, well and good.

09:21.060 --> 09:24.850
I will tell everyone, my parent, that the grade was ordered.

09:24.870 --> 09:29.910
If it is false, then I need to try something different and maybe the solution does not exist.

09:30.890 --> 09:31.790
So what we will do is.

09:31.790 --> 09:33.860
Okay, let us play the queen hit.

09:34.250 --> 09:35.040
Is it possible?

09:35.040 --> 09:35.540
Dancers?

09:35.540 --> 09:35.870
Yes.

09:36.080 --> 09:39.710
If you play the queen head, it cannot be attacked by these two queens.

09:39.920 --> 09:40.250
Okay.

09:40.850 --> 09:45.530
And then we don't need to do any work in this at all.

09:45.560 --> 09:45.830
Okay.

09:45.830 --> 09:48.470
We will just jump to the next row equal to three.

09:49.070 --> 09:50.730
Let us try to place the Queen here.

09:51.170 --> 09:51.940
Can we Blizzard?

09:51.980 --> 09:52.340
No.

09:53.060 --> 09:55.460
This will be Magnus invalid.

09:55.730 --> 09:56.780
Can we play the Queen here?

09:56.850 --> 09:59.540
And there is no Gandhi plays the queen here?

09:59.720 --> 10:04.190
Yes, because we don't see anything in the diagonal.

10:05.870 --> 10:08.210
And yes, the queen can be placed here again.

10:08.240 --> 10:15.020
It is when you make a call on April four to as soon as your eye becomes equal to in what you're going

10:15.020 --> 10:16.490
to do, you're going to they're done.

10:17.420 --> 10:17.750
Okay.

10:18.050 --> 10:19.430
So who is going to return to.

10:19.850 --> 10:21.840
So you made another function call.

10:21.840 --> 10:24.350
Look, let us go and complete the next row.

10:24.740 --> 10:26.300
So you made a call from here to here.

10:26.570 --> 10:28.040
So this becomes a base case.

10:28.910 --> 10:33.470
In the base case, you check if I equals to end, that means that problem was solved.

10:33.740 --> 10:35.570
We are not going to make any further calls.

10:35.960 --> 10:38.570
We are going to return to this rule.

10:38.570 --> 10:44.030
Get get to know that the remaining problem, which is the empty grid, was sold.

10:44.450 --> 10:47.770
And I should tell my parent that the remaining grid destroyed.

10:47.780 --> 10:52.520
So this will return to this group will be returned back to second row.

10:52.880 --> 10:57.320
This will be returned back to the first row and this will be returned back to the mean.

10:57.380 --> 10:57.680
Okay.

10:58.010 --> 11:02.840
And finally, Main will get to know the solution of this problem exists.

11:03.320 --> 11:08.420
And in the base case, when the base case was hit, we had the state of the world.

11:09.440 --> 11:10.790
We are the state of the world.

11:11.660 --> 11:15.220
And we could easily print this particular solution.

11:15.230 --> 11:15.500
Okay.

11:15.890 --> 11:20.000
What we will do, we will print this solution.

11:20.210 --> 11:20.600
Okay.

11:21.380 --> 11:22.580
And we are done.

11:23.480 --> 11:24.560
That that's what we are going to do.

11:24.860 --> 11:27.350
So this is for the problem.

11:27.350 --> 11:29.870
We are we need to print one configuration.

11:29.870 --> 11:30.140
Okay.

11:30.620 --> 11:30.910
So we are.

11:30.920 --> 11:31.760
We need to print.

11:32.700 --> 11:37.920
One configuration or we need to check whether the configuration is possible or not.

11:37.920 --> 11:44.250
So this code will serve both the purposes and we can solve this problem by this.

11:44.250 --> 11:48.480
Okay, so in the next lecture I will write the code along with it.

11:48.610 --> 11:51.390
We will try to understand how that code is going to work.

11:51.780 --> 11:53.130
So see you in the next video.
