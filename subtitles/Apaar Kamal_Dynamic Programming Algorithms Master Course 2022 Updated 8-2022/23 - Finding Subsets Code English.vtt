WEBVTT

00:02.060 --> 00:02.520
Hii, Everyone.

00:02.540 --> 00:06.350
So now let's look at the implementation of finding subsets using recursion.

00:06.950 --> 00:10.670
So first of all, we're going to take input some string.

00:11.770 --> 00:14.950
And then for that string what we are going to do.

00:14.980 --> 00:22.840
We are going to call this method find subsets that will have a single output array that is shared across

00:22.840 --> 00:24.070
all the function calls.

00:24.760 --> 00:30.070
And we will try to fill that array and we'll try to print the output every time we hit the base case.

00:30.070 --> 00:30.310
Okay.

00:31.120 --> 00:39.010
So what we're going to do, we are going to say we are going to have base case and we are going to have

00:39.010 --> 00:39.850
a recursive case.

00:40.210 --> 00:47.260
In the base case, what you can think of is if input of i is NULL, that means you have reached till the end

00:47.260 --> 00:48.010
of the string.

00:48.970 --> 00:52.030
Let say you have ABC and NULL, let's say this is your input.

00:52.510 --> 00:59.710
So if your input of i is actually NULL, then that means your work is done and in the output.

00:59.860 --> 01:05.620
You have already filled some value and your j is already pointing to the right place.

01:05.620 --> 01:10.270
We are going to fill the value and you're going to fill this and you're going to print this.

01:10.270 --> 01:14.860
Okay, so this is what we are going to do in the output and this is what we have in the input.

01:15.430 --> 01:20.020
So for a NULL input, we don't need to make any further recursive calls.

01:20.170 --> 01:29.050
So if input[i] is equal to null, then we can say cout output

01:29.740 --> 01:39.880
But before printing output, you should also set output of j equal to null in order to avoid garbage

01:39.880 --> 01:41.110
getting printed and.

01:41.110 --> 01:43.600
we can say return, that's it

01:44.960 --> 01:45.740
Otherwise.

01:45.740 --> 01:51.300
In the recursive case, what we can do, we can say, let us do two things.

01:51.530 --> 01:59.840
Let us include the ith letter or let us exclude the ith letter from input.

02:00.080 --> 02:01.100
These are the two options.

02:01.100 --> 02:01.370
Okay.

02:01.810 --> 02:05.060
So if you want to include A, then how you will do it you will say.

02:05.060 --> 02:05.330
Okay.

02:05.330 --> 02:09.140
Output of j should be equal to input of I.

02:09.770 --> 02:10.340
That's it.

02:11.090 --> 02:13.850
And you make a recursive call on the remaining string.

02:13.850 --> 02:21.530
So if you include A this is the remaining string and i would go to i+1, j would go to j plus

02:21.530 --> 02:23.880
one so you can say find subsets.

02:24.590 --> 02:32.930
Input output i + 1 and j + 1, if you want to exclude the ith letter

02:32.930 --> 02:33.200
Okay.

02:33.560 --> 02:34.550
Then what you should do.

02:34.670 --> 02:36.830
You should say that.

02:36.830 --> 02:37.040
Okay.

02:37.040 --> 02:40.210
I don't want I don't care about what is presented at the ith.

02:40.220 --> 02:50.060
index I will simpliy find subsets starting from the index i + 1  and I will not update j, so

02:50.060 --> 02:56.690
This call will actually overwrite what was written at the jth index and in this particular line number

02:56.690 --> 02:57.100
15.

02:57.110 --> 02:57.290
Okay.

02:57.290 --> 03:03.410
So this is actually going to do the overwriting okay if you you're not sure if you want to see

03:04.100 --> 03:04.850
how we can do it.

03:04.850 --> 03:10.640
You can also write output[j] = '\0' so instead of A getting overwritten or B getting overwritten

03:10.640 --> 03:17.990
you first overwrite A with null then null with c or you can do A with C that's not going

03:17.990 --> 03:18.480
to matter.

03:18.500 --> 03:20.600
a lot, this step is optional.

03:20.990 --> 03:24.380
But I'm just telling you that since we have not moved.

03:24.380 --> 03:30.320
j so whatever was the output in the previous state of the array, that will be getting overwritten

03:30.320 --> 03:33.440
because in the next call you would be overwriting at the jth location.

03:33.440 --> 03:35.510
Okay, because we are not changing j.

03:37.400 --> 03:39.470
So I think that's the complete code.

03:39.500 --> 03:43.760
Now we can test our code and we can call the method, find subsets, okay?

03:44.450 --> 03:48.680
And we can give input output.

03:48.980 --> 03:51.800
So in the beginning I is zero and J is also zero.

03:51.800 --> 03:54.680
Okay, so let us try to run our code.

03:57.360 --> 03:59.740
Let us try to run our code here.

04:02.530 --> 04:05.620
And let me show you the input and output.

04:05.860 --> 04:07.060
So if I give ABC.

04:08.150 --> 04:13.790
Then you will see the output is abc, ab, ac, a, bc, b and c

04:14.060 --> 04:18.020
And finally there is a NULL output as well which is not visible.

04:18.140 --> 04:21.650
So maybe we can check if.

04:24.320 --> 04:25.490
Output of zero.

04:28.960 --> 04:30.550
Is just null.

04:30.910 --> 04:36.130
Then we can cout NULL just to make sure that this is visible like this.

04:37.320 --> 04:37.610
Okay.

04:40.300 --> 04:41.140
This is output.

04:44.050 --> 04:48.820
So we are getting a null at the last index, you can see.

04:49.450 --> 04:55.060
Now, let me draw the recursion tree once again to explain how this code is going to work.

04:56.210 --> 04:58.710
In the beginning, we have an output at array which is NULL.

04:59.440 --> 05:01.120
We have input string, which is ABC.

05:01.750 --> 05:03.400
So i is here.

05:03.610 --> 05:04.710
J is Here we say.

05:04.730 --> 05:07.240
Okay, let's make two calls in the first call.

05:07.240 --> 05:14.440
we say output of j is equal to, input of i so it copies A here and the next call will happen later on.

05:14.440 --> 05:16.480
But we are not copying anything.

05:16.480 --> 05:18.850
But this A will be a part of this.

05:19.420 --> 05:21.430
This A will go here, but j would be here.

05:21.430 --> 05:21.610
Okay.

05:21.610 --> 05:24.400
So just assuming that this is not there, okay.

05:25.150 --> 05:25.900
j would be here.

05:25.920 --> 05:27.150
In this case, j would be here.

05:27.160 --> 05:27.480
Okay.

05:28.060 --> 05:29.740
And again, you make two calls.

05:30.100 --> 05:32.320
You say ok either include B or don't include B.

05:32.320 --> 05:34.570
So if you include B, it would be AB.

05:34.930 --> 05:38.290
If you don't include B, it would be A, if you include B would be B.

05:38.290 --> 05:39.730
If you don't include, it would be NULL.

05:41.280 --> 05:44.160
And if you include C, it would be ABC.

05:44.250 --> 05:51.480
If you don't include it would be AB similarly AC and A, similarly BC and.

05:53.600 --> 05:56.180
B and C and NULL.

05:57.020 --> 05:59.060
Finally, we say ok input.

05:59.060 --> 05:59.810
of is going to be null.

05:59.990 --> 06:01.460
So you are going to make another call

06:01.790 --> 06:01.990
You.

06:02.000 --> 06:05.690
say ok let me put ABC\0 and print it let me put AB\0 

06:06.210 --> 06:15.110
and print it let me put AC\0 and print it A\0 print it BC\0, B\0, C\0.

06:16.820 --> 06:17.880
And finally, this is.

06:17.900 --> 06:18.890
This is nothing but NULL.

06:19.050 --> 06:25.560
Okay, so if you look carefully, the output order is exactly the same as this one.

06:25.580 --> 06:29.840
ABC, AB, AC, A, BC, B, C and NULL

06:30.670 --> 06:36.530
And that means this is how quickly you can actually draw a recursion tree and verify.

06:36.560 --> 06:40.250
So when we're drawing quickly, we're assuming that these call are happening in parallel, but actually

06:40.250 --> 06:40.790
they are not.

06:41.120 --> 06:43.150
We are going in a left to right order.

06:43.160 --> 06:44.540
So first we are going like this.

06:46.910 --> 06:48.680
And then like this.

06:48.680 --> 06:49.760
Then like this.

06:50.240 --> 06:51.370
Then like this.

06:52.130 --> 06:53.090
Then like this.

06:54.260 --> 06:55.190
Then like this.

06:56.390 --> 06:59.690
And finally will terminate at this particular point.

06:59.690 --> 06:59.900
Okay.

07:00.440 --> 07:05.240
If you finally print the output array in the main what you will get, you are actually going to get the

07:05.240 --> 07:08.690
output for the array, which is actually NULL NULL NULL.

07:08.960 --> 07:12.400
So the entire output array would be actually null in the main.

07:12.410 --> 07:14.780
So you can verify by printing an output here.

07:15.560 --> 07:18.410
Now that's all for this lecture.

07:18.890 --> 07:25.460
And in the next lecture I will show you how you can actually print this output maybe in a sorted order

07:26.240 --> 07:27.050
and that.

07:27.050 --> 07:28.070
We will see in the next video.