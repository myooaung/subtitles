WEBVTT

00:00.760 --> 00:01.420
Hello, everyone.

00:01.780 --> 00:03.910
Welcome to this problem, Stone Division.

00:04.540 --> 00:06.310
So let's read this quickly.

00:06.340 --> 00:08.950
First of all, I strongly suggest you all do.

00:09.910 --> 00:10.870
Do it by yourself.

00:11.680 --> 00:16.480
Do you read out completed by yourself and then will move on to the solution?

00:17.440 --> 00:18.930
So consider the following game.

00:19.250 --> 00:24.430
The first point is there are two players first and second sitting in front of and behind the first player.

00:24.430 --> 00:26.380
Always a first, always plays first.

00:26.500 --> 00:31.960
Of course, the data set s of m distinct integers defined as s.

00:32.630 --> 00:38.710
We have a set of m indigenous rates of what is m m is only like ten.

00:39.100 --> 00:41.260
So it's not a big value.

00:41.740 --> 00:44.600
We have a set of ten listing integers eight.

00:45.850 --> 00:47.820
So the player moves in and returns.

00:48.460 --> 00:54.130
During each turn, a player choose some essay which belongs to that said.

00:54.130 --> 01:00.700
So he chooses one of those distinct integers on the set and splits one of the piles into exactly say

01:00.790 --> 01:04.030
smaller pipes of equal size eight to.

01:05.810 --> 01:07.340
Let me give you an example.

01:12.310 --> 01:23.890
Well it's it initially and was then and it's it is able the SEC is looking make the SEC exist it has

01:23.890 --> 01:27.460
to in five and three also eight.

01:27.730 --> 01:33.040
What a player can do is he can divide this and it goes to ten into.

01:34.560 --> 01:35.370
Smaller games.

01:35.590 --> 01:41.490
So it's a big game is dividing this surge into smaller games and which community choose to.

01:41.730 --> 01:47.130
So he divides this into two games of five, five length each.

01:48.640 --> 01:56.780
In case the let's say if he chose fight, then what happens is he divides then into five games of 2

01:56.780 --> 01:57.580
to 2 each.

02:01.140 --> 02:01.410
Eight.

02:01.650 --> 02:03.840
And what if it was three from the sect?

02:04.290 --> 02:07.710
Then it cannot be divided by because three does not divide.

02:08.220 --> 02:08.600
Ten.

02:08.680 --> 02:09.000
Holy.

02:09.950 --> 02:10.370
Well, these.

02:11.340 --> 02:14.700
So yes, we have understood this point.

02:15.090 --> 02:17.160
If no essay exists, then we will split.

02:17.400 --> 02:21.410
Then that will split one of the available points to equal smaller base.

02:21.420 --> 02:22.230
The player loses.

02:22.470 --> 02:25.320
So if we won't be able to make a move, that's a losing position.

02:25.320 --> 02:25.980
We all know about it.

02:26.780 --> 02:30.540
And both players play optimally, right?

02:31.140 --> 02:31.650
Of course.

02:32.840 --> 02:37.160
Given and in him and the contents of his find in print.

02:37.160 --> 02:43.000
The winner of the game if first wins print first are the voice print second release.

02:43.520 --> 02:49.400
The first line contains two spaced separated integers describing or whatever and an m and then will

02:49.400 --> 02:49.670
have to.

02:49.970 --> 02:53.480
So it is 15 three and 523 is the same.

02:53.750 --> 02:55.670
So initially we have 15 students.

02:56.830 --> 03:02.620
We have 15 stones initially and the set contains five, two and three.

03:04.270 --> 03:04.720
So.

03:05.870 --> 03:08.420
The first player can make a move here.

03:08.540 --> 03:09.530
What is the move?

03:12.430 --> 03:16.630
So what we'll do is we'll just we can like do it recursively.

03:16.630 --> 03:19.830
Also we can fine print the guarantee number is also the guarantee.

03:19.840 --> 03:22.170
We can also make the guarantee function very easy.

03:22.180 --> 03:25.180
We have done many problems of this type.

03:25.930 --> 03:26.230
So.

03:27.930 --> 03:28.680
Why am I saying so?

03:28.710 --> 03:31.170
Because we just have to write a recursion and memorize it.

03:31.170 --> 03:31.890
And I think it's right.

03:31.890 --> 03:33.270
But still, let me explain you.

03:33.270 --> 03:34.890
Why would the negotiation work?

03:35.760 --> 03:37.380
So here's 15, right?

03:37.380 --> 03:39.120
So let's say if he chose five.

03:39.660 --> 03:41.010
So there are two options.

03:41.010 --> 03:45.190
Now at eight, let me make two options, which are five and three eight.

03:45.240 --> 03:48.720
So you cannot make a choice of two eight.

03:48.900 --> 03:56.910
So in the first choice of five, this game of of 15 is being divided into three in five games of three

03:56.910 --> 03:57.150
it.

04:01.080 --> 04:01.380
Eight.

04:01.560 --> 04:03.760
And the second option, this is five move.

04:03.810 --> 04:09.390
And if he is the player one chooses the second option, then the game is actually divided into three

04:09.390 --> 04:10.470
games of five which.

04:12.490 --> 04:13.850
Eight noses.

04:14.590 --> 04:16.970
Now, here's the most important part of this problem.

04:17.320 --> 04:23.500
What this problem wants to convey is that why would I need to calculate correctly values of all these

04:24.040 --> 04:26.620
five different problems?

04:26.620 --> 04:33.130
And why should I calculate the values of all these to resolve problems when the problems I see ain't

04:33.610 --> 04:34.230
go away?

04:34.560 --> 04:40.600
As we have already seen that if I have some games and I have to play all these games, so what I do

04:40.600 --> 04:44.950
is I take more than the sum of all the games when I do play all the games.

04:45.730 --> 04:51.520
So it's not this that if you play this three or you play this three, you have to play all these games,

04:51.520 --> 04:51.820
right?

04:52.960 --> 04:55.430
That means the party is divided, but the party is still there.

04:55.440 --> 04:56.740
You need to make a move on that fight.

04:57.430 --> 05:00.580
But if I'm playing all the games, it's a combination of all the games here.

05:00.790 --> 05:08.950
When I play the interim board, what happens is we'll have this large sum of all these smaller games,

05:09.190 --> 05:09.880
the sub games.

05:10.540 --> 05:13.540
So if I have, let's say I have a guarantee of three.

05:13.810 --> 05:15.010
I have guarantee of three.

05:15.010 --> 05:16.180
I have guarantee of three.

05:17.060 --> 05:17.450
Tim.

05:18.110 --> 05:19.880
Tim So I have five guarantees of three.

05:20.030 --> 05:25.770
And guys, of course, this and these all guarantee values will be seen because the state seem so vanity

05:25.910 --> 05:27.580
sort of all these five values.

05:27.590 --> 05:32.740
What value in these will cancel out because of our cancel out in base rate?

05:32.750 --> 05:34.460
What remains is geometry.

05:35.450 --> 05:36.800
So I hope you're getting this point.

05:37.310 --> 05:40.940
Weisz Why would I calculate a guarantee of three, five times?

05:41.230 --> 05:46.430
I'll just include one time guarantee of three eight similar links for these five.

05:47.030 --> 05:50.930
Why would I calculate guarantee values of this Phi Phi Phi three times eight?

05:50.930 --> 05:53.960
Because it's even it's an odd number of times.

05:54.140 --> 05:58.070
That means I just have to get a guarantee of by only one eight.

05:58.460 --> 06:06.560
Now, guys, what if what if this and let's say I had this guys there to have 20 and the set contains

06:06.830 --> 06:07.580
two, right?

06:08.120 --> 06:11.390
So the game is divided into two games of ten fights.

06:12.380 --> 06:15.340
Now, please tell me I have to play all the games.

06:15.350 --> 06:17.780
I have to take the name some of the grindy values of these games.

06:18.120 --> 06:24.470
So if I take the name Sum of ten and Jaeden Martell Goodies, I get zero.

06:25.710 --> 06:25.960
Right.

06:26.760 --> 06:27.090
So.

06:28.150 --> 06:34.600
If it's my chance, let's say I'm the first player to make a move and I'm able to divide the game into

06:34.600 --> 06:35.770
equal numbers.

06:36.400 --> 06:39.490
That means in this case, I'm doing the game under two parts.

06:39.760 --> 06:41.510
Or what?

06:41.530 --> 06:48.520
It basically means that if AC is even eight and so divides and is the condition, of course.

06:48.910 --> 06:52.240
So in case of 20, I'm dividing the game into two parts.

06:52.870 --> 06:53.980
Of course I'll win, right?

06:54.010 --> 06:58.450
Because now I'm giving the other player and losing position no matter what he plays on this, I'll play

06:58.450 --> 06:58.840
on this.

07:00.060 --> 07:00.390
Eight.

07:00.510 --> 07:03.360
Simple as it is, we understood this concept already.

07:03.360 --> 07:10.020
Name some concept that the granny value the name sum of this is zero.

07:10.050 --> 07:12.180
That means it's a losing position.

07:12.360 --> 07:13.570
So it's a losing position.

07:13.570 --> 07:15.570
Then this has to be a winning position.

07:15.570 --> 07:15.900
Right.

07:16.720 --> 07:18.900
So not going deeper into that.

07:18.960 --> 07:21.210
But yes, I hope you understood this advice.

07:21.210 --> 07:23.730
Would I not be calculating the guarantee values of tenure?

07:24.180 --> 07:27.230
Why would I say that if I am able to divide?

07:28.880 --> 07:34.550
Failing to equal games, equal number of games for so even number of games then.

07:34.970 --> 07:36.890
Then it will be a winning position for me.

07:37.820 --> 07:40.250
Because the name sum offered is zero.

07:40.250 --> 07:42.500
Because those are the losing position.

07:43.220 --> 07:44.700
I hope you got this first point.

07:44.730 --> 07:49.460
Then why would we have an evolution if I were to divide the game into equal even parts?

07:50.150 --> 07:54.530
And if I'm not able to divide the game in two even parts?

07:54.530 --> 07:55.070
Let's see.

07:56.300 --> 07:57.980
It's for this case, only 15.

07:58.160 --> 08:00.710
And I'm not able to divide 15 and do some equal parts.

08:00.710 --> 08:05.000
Eight other the parts of five or the parts that three.

08:05.870 --> 08:06.170
Eight.

08:07.400 --> 08:12.350
If the parts of five, that means the number of parts of five or the number of parts or the sub games

08:12.350 --> 08:12.830
are three.

08:13.160 --> 08:17.450
Then what we'll do is we have to calculate the guarantee values of three and five.

08:18.840 --> 08:19.140
I.

08:20.000 --> 08:25.640
So the important thing that I was going to share with you is that I would not calculate and devalues.

08:27.000 --> 08:29.700
Why would I not get great reviews of these functions?

08:29.700 --> 08:30.150
Because.

08:31.940 --> 08:34.940
I don't have I don't have to use them.

08:35.220 --> 08:41.930
I I'm not taking sort of any of the gritty values because I know if there aren't, I, I lose that position,

08:41.930 --> 08:45.560
whether it be and or and people generally it's a winning or losing position.

08:46.370 --> 08:46.670
Right.

08:47.210 --> 08:52.730
And if it does get into even games, then of course, it's a winning position.

08:53.490 --> 08:56.030
I don't need the granny values and never the kings or.

08:57.140 --> 08:57.440
Eight.

08:57.680 --> 09:02.390
If I'm not taking kings or I'm not including all the games because I know they will cancel out because

09:02.390 --> 09:03.530
they are equal games.

09:04.790 --> 09:09.530
I will just be using a boolean function which will discover whether it's a losing position or a winning

09:09.530 --> 09:10.010
position.

09:10.910 --> 09:12.980
And I will not be using the going to do with this.

09:13.730 --> 09:16.940
Well, because if you are going to guarantee values, you can use it.

09:16.940 --> 09:17.270
Right.

09:17.270 --> 09:21.740
But it's of no use because we are never be kings are in the code because.

09:23.200 --> 09:26.560
A game is divided into some number of sub games, but.

09:27.490 --> 09:35.650
Finally, all those numbers are if I take the sort of gritty values of all those games, then it will

09:35.650 --> 09:37.670
only determine one game eight.

09:38.110 --> 09:41.020
It's kind of like, I'm not going five games.

09:41.280 --> 09:42.280
I'm just going one day.

09:42.460 --> 09:47.980
All of the five games, if I if I'm not using the Values VI to calculate them, right?

09:48.010 --> 09:52.720
If I'm not taking sort of the Values VI to calculate them, just find out whether it's a losing position

09:52.720 --> 09:55.180
or of being beaten towards the losing version.

09:55.770 --> 09:56.200
But you guys.

09:57.100 --> 09:58.480
So what's a losing position?

09:59.440 --> 10:02.800
A losing position is a politician where he's not able to make a move.

10:04.000 --> 10:07.120
So that's what we'll finally go down to.

10:07.450 --> 10:08.600
Let me give you an example.

10:08.620 --> 10:09.490
In this case only.

10:20.330 --> 10:25.520
So if I divide it into five games or there will be three, and if I divide them into three games, it

10:25.520 --> 10:26.840
will be five eight.

10:27.110 --> 10:35.390
And if this three and if this five is like further divided, the further divided five will be divided

10:35.390 --> 10:38.050
into five games off by each.

10:38.620 --> 10:38.740
Okay.

10:38.880 --> 10:40.460
So it will be five games.

10:40.470 --> 10:40.690
Games.

10:40.700 --> 10:42.080
I'm not writing all five games.

10:42.830 --> 10:46.470
And here we have three and of course, only three.

10:46.480 --> 10:47.420
Three with the lottery.

10:47.600 --> 10:50.840
So again, we'll have three games of one eight.

10:51.110 --> 10:53.180
So what what is one?

10:53.180 --> 10:55.220
One is a losing position, right?

10:55.760 --> 11:00.470
If I'm able to make making go to a losing position, then I'm the then it's a winning position.

11:01.340 --> 11:05.990
If it's a winning position, this is also a winning operation, then this has to be a losing patience.

11:05.990 --> 11:06.650
And it's sick.

11:07.660 --> 11:07.960
Yeah.

11:08.320 --> 11:11.020
So if your phone is a losing potion and its first place chance.

11:11.020 --> 11:12.520
So who will win second.

11:13.530 --> 11:13.690
Well.

11:14.020 --> 11:16.070
So all the rules follow, right?

11:16.090 --> 11:16.510
If I.

11:16.510 --> 11:20.200
If I get even one of the losing positions, it's a winning position.

11:20.610 --> 11:20.770
Now.

11:21.960 --> 11:22.140
Right.

11:22.660 --> 11:24.490
Well, let me call this out.

11:25.370 --> 11:26.510
And let's do it a little.

11:27.470 --> 11:29.300
Quick because it's very easy.

11:31.400 --> 11:32.960
But in all the games you are doing the same part.

11:32.960 --> 11:37.610
In this particular problem, we just realized one more thing, that if the game is being divided into

11:37.610 --> 11:43.550
some equal games, equivalent games with same states, then don't calculate gravity values of all the

11:43.550 --> 11:49.520
states and pigs or hey, don't do that, just a little grindy value of one game.

11:50.150 --> 11:53.420
And if it is being divided into even games, then the guarantees.

11:53.930 --> 12:00.230
So then the guarantee of whole game is zero because even games something began as is zero.

12:00.770 --> 12:06.350
And if it is art then I know whether it's a losing vision or a winning vision and move accordingly.

12:06.660 --> 12:11.840
Ain't not let's not calculate grinding this nix all this without using grindy function.

12:12.110 --> 12:12.350
Right?

12:12.560 --> 12:22.400
So let's write the boolean function and let's say give when you w l so give whether it's a winning vision

12:22.400 --> 12:23.420
or a losing position.

12:23.840 --> 12:25.520
So what I do here is it will have.

12:26.520 --> 12:29.580
It will dig in and is the number of files.

12:30.580 --> 12:31.900
And what else is required.

12:31.930 --> 12:32.200
Okay.

12:32.200 --> 12:36.260
Let me quickly go here and amend the Eddie eight.

12:38.140 --> 12:39.040
Yeah, let's take it to.

12:39.520 --> 12:40.210
And.

12:41.990 --> 12:46.490
The input rule for the end of their two year tenure.

12:48.050 --> 12:52.700
So some of you might be wondering that any standard about it being an essay standard deliberating but

12:52.700 --> 12:57.170
also seen that Emmys penalty rate and yeah.

12:58.310 --> 13:00.410
So let me give you a factor.

13:00.620 --> 13:00.980
So.

13:01.910 --> 13:09.290
What a number and we have approximately and the root and cube root of any number of pieces.

13:11.730 --> 13:11.960
Hey.

13:12.090 --> 13:13.660
Which is not big, right?

13:13.700 --> 13:15.510
So what is cube root of the end of the body between.

13:16.590 --> 13:17.660
This end of the bargain.

13:18.610 --> 13:21.990
But even if we go to all, it's already visas of the end of the border.

13:22.260 --> 13:22.950
They will be on it.

13:22.950 --> 13:26.250
And it's about 60 visas, which is like reachable for us.

13:26.370 --> 13:27.840
It works within 1/2 date.

13:28.650 --> 13:30.210
So that should not be an issue.

13:33.190 --> 13:37.300
Now let's take this area and watch the land of the race then only.

13:38.370 --> 13:39.970
So let's say s and.

13:41.090 --> 13:43.520
Optimistic are constant and.

13:46.690 --> 13:47.470
But still ten.

13:48.620 --> 13:49.040
Buddy.

13:52.510 --> 13:55.120
And now what we'll do is build assembly, complete identical evolution.

13:55.120 --> 13:56.740
So what happens is if.

13:58.020 --> 14:00.960
Let's see whether it's a winning or losing position.

14:00.960 --> 14:02.940
So if if it's a winning position.

14:04.940 --> 14:10.700
If we're not in and it's opposition to it, if it's a winning position, we will simply be out.

14:11.670 --> 14:12.140
First.

14:13.310 --> 14:21.050
Or we scout picking when we are wondering about winning or losing positions.

14:21.350 --> 14:21.830
We don't.

14:23.310 --> 14:28.200
Take into consideration of Draw eight because it's a winning push in order to lose inflation.

14:28.230 --> 14:29.400
There's no middle way.

14:30.490 --> 14:31.680
Eight you need.

14:34.730 --> 14:35.870
Let's read this.

14:36.110 --> 14:36.980
Let's come to your discord.

14:36.990 --> 14:38.060
It's a brilliant function.

14:38.210 --> 14:40.910
So, yeah, let's move forward and.

14:42.130 --> 14:45.630
It retails size of this at eight so it should be in.

14:45.640 --> 14:48.220
So let me take this M and the top.

14:48.520 --> 14:55.180
Yeah they will be using it over here so I'm just iterating over all it's divisors of n what else is

14:55.180 --> 14:56.200
if and mod.

14:57.800 --> 14:58.250
Is.

14:59.430 --> 14:59.760
Zero.

14:59.760 --> 15:04.770
That means it divides in its eternity with that means and can be divided into some.

15:06.390 --> 15:10.830
As they boils it, they say it's because it's activism.

15:11.370 --> 15:14.610
And what's interesting is Benjamin ventured at it and true.

15:16.760 --> 15:23.870
If essays even because then the number of sub games that even if the number of sub games are even,

15:23.960 --> 15:30.140
that means it's a losing position, but it's a winning position for this guy because the number of games

15:30.140 --> 15:33.130
that even the other guy will like have even number of games.

15:33.650 --> 15:34.480
So awesome of all.

15:34.490 --> 15:36.050
All of them will be zero.

15:36.050 --> 15:36.290
Right?

15:36.290 --> 15:38.110
So what else I simply didn't do?

15:39.120 --> 15:39.980
It's what we discussed.

15:40.080 --> 15:41.970
Guys, if I find at least one.

15:44.320 --> 15:49.910
Savage divide sin and can be divided into even subsets, even games.

15:50.230 --> 15:52.180
Then it will be a winning position for me.

15:52.480 --> 15:52.760
Eight.

15:53.290 --> 15:54.220
And what's next?

15:54.730 --> 15:59.530
When as it can be true its let's talk about winning and losing patience.

15:59.770 --> 16:00.850
I hate it when.

16:00.850 --> 16:01.150
When I.

16:01.150 --> 16:02.470
When I have a winning position.

16:02.710 --> 16:03.280
That means.

16:04.880 --> 16:09.260
If I can move that guy to a losing position, then it's a winning vision.

16:09.860 --> 16:15.980
So what I do here is that if any more essay goes to zero, that means as I usually visit, often I can

16:15.980 --> 16:16.610
make a move.

16:17.000 --> 16:18.050
And the next is.

16:20.510 --> 16:25.850
Give winning or losing and what will be the next it will be essay.

16:26.390 --> 16:31.100
So this is the next sub and each event is been divided into five games.

16:31.490 --> 16:37.430
So it is end by five, which is the next number off by eight, which is the next stage basically.

16:38.000 --> 16:43.600
So the game is beginning right into NBC Games eight, so I'll see if this is false.

16:43.610 --> 16:44.450
What does this mean?

16:45.770 --> 16:47.440
It is a losing state.

16:48.160 --> 16:49.590
Next, it is a losing state.

16:49.600 --> 16:55.000
So if I can go to at least one of the losing states, then my current state is a winning state.

16:55.870 --> 17:00.790
So firstly, I've just separated this out and then I've separated this part out.

17:01.460 --> 17:02.860
Well, it should not be a problem.

17:02.860 --> 17:03.910
You can even merge them.

17:04.300 --> 17:05.290
But yeah.

17:06.160 --> 17:07.420
But I hope you understood this.

17:08.020 --> 17:09.130
This is an almost of that.

17:09.130 --> 17:09.520
We do.

17:09.820 --> 17:12.610
If I've got at least one losing state, it's a winning state.

17:13.060 --> 17:17.950
And this is the main stuff that we are doing kind of basic is basically that if.

17:19.370 --> 17:23.570
And it's been divided and can be divided into even number of games.

17:24.050 --> 17:26.420
And that's a losing position made.

17:27.340 --> 17:28.600
Or the other player.

17:29.380 --> 17:30.400
So I'll just return it.

17:30.400 --> 17:31.300
I'll return to form.

17:31.510 --> 17:35.500
Otherwise, if both these conditions don't hold true, then what they'll do is I lied and false.

17:36.250 --> 17:37.060
It was.

17:37.060 --> 17:37.720
I'm not winning here.

17:37.720 --> 17:39.130
I'm not meaning it and I lose.

17:39.460 --> 17:42.910
I'm not able to make a move basically, or whatever.

17:42.910 --> 17:44.230
My making is true.

17:44.260 --> 17:46.150
That means all other winning quotations.

17:46.480 --> 17:47.530
So let's be this one's.

17:50.360 --> 17:52.970
Is it a problem floating point exception?

17:54.040 --> 17:55.210
And more to say.

17:56.370 --> 17:57.280
Oh, my word.

17:57.300 --> 17:59.970
I haven't taken the input of essay.

18:01.320 --> 18:02.190
Happens with me, sir.

18:03.220 --> 18:04.600
It happens in the teaching.

18:06.500 --> 18:06.770
Yeah.

18:06.860 --> 18:08.360
So here we go to second rate.

18:08.690 --> 18:09.080
Now, what?

18:09.080 --> 18:10.310
What's the problem in this case?

18:10.340 --> 18:14.300
That we can move to some and multiple times?

18:14.300 --> 18:15.830
There are overlapping problems.

18:16.400 --> 18:19.010
Let's say I was hundred and then let's move to 50.

18:20.050 --> 18:26.200
Then I moved to ten or so from one direction that illegal and that means there are overlapping problems

18:26.200 --> 18:27.730
so we need to memorize it.

18:28.150 --> 18:28.720
Nothing much.

18:29.080 --> 18:35.140
It's Alexa to memorize it so we can see that and go straight into what it means so we cannot make an

18:35.140 --> 18:35.440
edit.

18:35.830 --> 18:37.750
What we'll do is it simply.

18:39.410 --> 18:42.980
Pick a map and instead of intended stick it as boolean.

18:42.980 --> 18:45.210
Because this function today says William H.

18:45.230 --> 18:51.560
So what I do is if Embry wrote count in it means if it's and is already calculated return.

18:52.830 --> 18:54.540
MP in other ways.

18:55.050 --> 18:56.010
Let's copy this.

18:56.790 --> 18:57.870
Yeah, see, we're there.

18:59.040 --> 19:01.560
Always whenever I'm returning through, let's see it.

19:02.160 --> 19:03.480
Let's memorize it, basically.

19:04.380 --> 19:06.510
So this is called final.

19:07.480 --> 19:08.560
And yes, it's working.

19:08.560 --> 19:09.310
It's copy.

19:10.350 --> 19:10.950
But back.

19:12.350 --> 19:13.340
Submit it over here.

19:15.390 --> 19:15.780
Great.

19:16.290 --> 19:19.050
And it is C++ or D.

19:24.800 --> 19:25.220
Penguin.

19:25.220 --> 19:27.080
Let's run it and we'll summit it.

19:30.830 --> 19:32.960
Samples just submitted.

19:35.930 --> 19:36.190
Cool.

19:36.480 --> 19:38.750
So we were able to pass all the test cases.

19:39.150 --> 19:45.680
Either problem initially would seem a little trickier or tougher, or like it was going, let's not

19:45.680 --> 19:46.100
do it.

19:46.670 --> 19:51.530
But it's not that great because you can easily see we haven't done anything.

19:51.950 --> 19:56.450
You're just you're utilize the property of the law and even games.

19:56.780 --> 19:57.470
Do you know if.

19:57.470 --> 19:58.010
Audience.

19:58.130 --> 19:59.060
Final answer.

19:59.240 --> 20:01.490
And the important thing to note is that.

20:02.950 --> 20:03.760
The number of.

20:06.390 --> 20:11.340
States that can be for a particular and is under Rudolph excuse Rudolph in.

20:12.170 --> 20:13.370
So it's not a big deal, right?

20:13.410 --> 20:18.210
So if I'm just going to some cube root of N states and any standard about it, it will have tended to

20:18.210 --> 20:18.980
be over six here.

20:19.250 --> 20:24.440
And of course, guys, in all the states, we are doing this type of calculation, which is Wolfram

20:24.830 --> 20:27.480
and M10 only multiplied by ten.

20:27.500 --> 20:31.650
So this tended to be over seven complexity and of course is going to be amazing.

20:32.300 --> 20:39.710
Okay, so this map takes our log of low of anything to memorize it so it to be a minimum was intended

20:39.710 --> 20:40.580
to be over six numbers.

20:40.580 --> 20:46.240
In worst case it becomes log of ten to the power six because of you minimizing it.

20:46.250 --> 20:48.080
So and logging for that.

20:48.470 --> 20:50.720
This is the overall complexity.

20:51.320 --> 20:52.570
It's not a big complexity.

20:52.580 --> 20:53.900
It's eight.

20:55.260 --> 20:56.520
I understood this.

20:57.310 --> 20:59.820
I think you wait and see in the next part.
