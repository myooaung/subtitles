WEBVTT

0
00:01.940 --> 00:02.230
Hi.

1
00:02.240 --> 00:03.190
And welcome back.

2
00:03.280 --> 00:08.840
And now we are going to deal with the first example of recursion and that is how to compute the factorial

3
00:08.840 --> 00:09.410
of a number.

4
00:09.920 --> 00:16.280
So we have already seen that F(N) for factorial can be written as 

5
00:16.280 --> 00:16.970
N x F(N-1).

6
00:17.760 --> 00:23.810
And for example, if we have 5!, it can be written as 5 x 4!.

7
00:24.380 --> 00:29.780
And we discussed when we are going to solve a recursive problem, we will figure out two cases.

8
00:29.930 --> 00:31.130
One is a base case.

9
00:32.740 --> 00:34.360
And second, the recursive case.

10
00:34.420 --> 00:34.720
Okay.

11
00:35.440 --> 00:41.590
So in the base case I know when the value N is equal to zero, the answer of factorial should be

12
00:41.590 --> 00:41.920
one.

13
00:42.460 --> 00:48.130
And in the recursive case I know the formula is nothing but N x F(N-1) .

14
00:48.580 --> 00:50.440
These are the only two things that we need to know.

15
00:50.770 --> 00:53.770
The ones we know, these two things we can write the code on.

16
00:53.800 --> 00:53.890
And.

17
00:54.520 --> 01:00.540
While After writing the code, I will tell you how the call stack works and why we are getting the right answer.

18
01:00.550 --> 01:00.730
Okay.

19
01:00.730 --> 01:06.730
So we will also talk about call stack in recursion and why it is correct.

20
01:07.300 --> 01:10.810
So let us first dive into the code and then we will see.

21
01:11.230 --> 01:14.530
So I'm going to make a recursive program for factorial.

22
01:15.850 --> 01:18.850
So let's say we have a function int factorial.

23
01:19.360 --> 01:22.930
The return type is integer because the function is going to return an integer.

24
01:22.930 --> 01:24.370
So we get some value input.

25
01:25.400 --> 01:29.720
And we have a base case and we also have a recursive case.

26
01:31.440 --> 01:33.210
So what is going to happen in the base case?

27
01:33.210 --> 01:35.100
We are going to say, if N is, zero.

28
01:35.280 --> 01:37.050
Then we know the answer is going to be one.

29
01:37.140 --> 01:37.680
That's it.

30
01:38.070 --> 01:45.930
In the recursive case, we know that the given problem F(N) can be written as

31
01:45.930 --> 01:47.950
N x fact(N-1)

32
01:47.970 --> 01:48.530
That's it.

33
01:48.540 --> 01:50.100
And we can say return this answer.

34
01:51.130 --> 01:51.580
And we are done

35
01:51.820 --> 01:52.090
Okay.

36
01:52.090 --> 01:57.590
So this is the complete factorial program and now we are going to test our code.

37
01:58.240 --> 02:04.360
So maybe take input from the user and then print the factorial of that particular number and.

38
02:05.890 --> 02:07.660
The build's successful.

39
02:09.350 --> 02:10.310
So let's run it.

40
02:11.700 --> 02:14.400
So if I give 5, I get the answer as 120.

41
02:14.400 --> 02:19.410
If I give 6 the answer is  720, that means it's working perfectly fine.

42
02:19.920 --> 02:23.370
And now let's also look what happened, actually.

43
02:23.940 --> 02:25.650
So then your program started.

44
02:25.860 --> 02:26.160
Okay.

45
02:27.270 --> 02:29.670
So there is a call stack.

46
02:29.910 --> 02:32.460
There is a concept of call stack.

47
02:32.880 --> 02:36.310
So what is call stack, stack is a special memory.

48
02:36.750 --> 02:42.150
So it's like a container and all the functions that are called there.

49
02:42.180 --> 02:43.380
They go inside the stack.

50
02:43.380 --> 02:45.900
So first of all, the main function.

51
02:46.410 --> 02:47.880
It went into the stack.

52
02:49.830 --> 02:51.870
And all the local variables like N.

53
02:51.990 --> 02:54.510
And here we have only one local variable.

54
02:54.510 --> 02:55.590
So that's defined it.

55
02:55.590 --> 03:01.560
And let's say we took this value as input so N is defined as five from where we call the fact function

56
03:01.830 --> 03:08.330
and we tell okay, we have to compute the factorial of any N = 5 So this checks

57
03:08.670 --> 03:11.370
whether the base case is true so this is not true.

58
03:11.640 --> 03:17.100
It makes another recursive call okay, you can see it compute the value answer.

59
03:17.520 --> 03:20.430
So there is a variable answer that is not yet computed.

60
03:20.850 --> 03:26.400
There it is 5 x something so that something is what that is 4!

61
03:26.400 --> 03:32.760
So we make another recursive call to the fact total that call gets pushed into the stack where N is four.

62
03:34.040 --> 03:35.240
And here we also create

63
03:35.240 --> 03:40.310
another local variable, because answer is a local variable in every call stack that we are going to create

64
03:40.310 --> 03:41.270
these local variables.

65
03:41.780 --> 03:46.710
So here the value of answer is 4 x something that something is another function call will return

66
03:47.420 --> 03:48.380
So N = 3

67
03:48.410 --> 03:53.240
Here we have answer equal to 3 x something that something is nothing but another function.

68
03:53.240 --> 03:58.280
Call N = 2, answer = 2 x something that is F(1).

69
03:58.920 --> 04:00.380
So we make another function call.

70
04:02.790 --> 04:05.130
And that answer is 1 x 0!.

71
04:05.280 --> 04:08.310
So we make another function call with N = 0

72
04:08.850 --> 04:11.490
Now N = 0 we say return one.

73
04:11.490 --> 04:16.160
So this function actually returns one, it gets removed from the call stack.

74
04:16.170 --> 04:18.510
So here I will change my colour.

75
04:18.540 --> 04:20.790
Now we're going to work in the different direction.

76
04:20.790 --> 04:22.650
Now we have reached the base case.

77
04:22.650 --> 04:22.950
Okay.

78
04:23.490 --> 04:27.930
And the base case says you're return 1 to the point from where it was called.

79
04:27.930 --> 04:29.130
So it was called from here.

80
04:29.160 --> 04:30.330
So we return a one.

81
04:30.330 --> 04:36.920
So it becomes answer is 1 x 1, now F(1) is going to return one and you can see return answer

82
04:37.050 --> 04:37.170
.

83
04:37.200 --> 04:44.250
Now this statement earlier, what happened is when you were computing 	this answered, this function was

84
04:44.250 --> 04:51.930
pause at line number 12 and it was waiting for the value of fact(N-1) once it got the value

85
04:51.930 --> 04:55.410
from fact(N-1) it return the answer that is one into one.

86
04:55.770 --> 04:56.370
That is one.

87
04:56.700 --> 05:02.550
This gets removed from the call stack and this answer one is stored here so it is 2 x 1

88
05:02.820 --> 05:09.720
And this function was waiting for the value of F(1) and now it has got the value because this function

89
05:09.720 --> 05:10.950
returned to its parent.

90
05:11.430 --> 05:12.950
This will get removed.

91
05:12.960 --> 05:15.810
So it will return 2 x 1 that is 2 to 2 will come here.

92
05:16.470 --> 05:19.290
Similarly, this function was waiting for F(2).

93
05:19.320 --> 05:22.590
Now that value has arrived and it will return.

94
05:23.070 --> 05:24.780
6 so 6 will come here.

95
05:25.260 --> 05:26.880
So it will become 4 x 6 .

96
05:26.880 --> 05:30.060
That is 24 and it would return 24 here.

97
05:30.060 --> 05:31.740
It would become 5 x 24.

98
05:32.250 --> 05:33.270
That is 120.

99
05:33.570 --> 05:37.890
And this value would come here because main is waiting for this value.

100
05:37.890 --> 05:40.590
So here you will get an answer of 120.

101
05:41.130 --> 05:41.610
That's it.

102
05:42.780 --> 05:49.090
And finally, once your main is also over, this also gets removed from the call stack.

103
05:49.800 --> 05:53.970
If I talk about how much time it will take, we actually.

104
05:55.240 --> 05:57.820
Made a call stack of n levels deep.

105
05:58.030 --> 06:00.850
So we are making N number of calls.

106
06:01.240 --> 06:03.490
Each call takes constant time.

107
06:03.700 --> 06:05.980
So the time taken is O(N).

108
06:06.400 --> 06:06.700
Okay.

109
06:07.210 --> 06:09.160
Time is O(N)

110
06:09.460 --> 06:11.170
And what about the space complexity?

111
06:11.170 --> 06:11.410
Okay.

112
06:11.420 --> 06:12.370
So if I talk about.

113
06:13.350 --> 06:16.640
How is this space complexity changing through the entire program?

114
06:16.650 --> 06:23.280
So initially, you can see there was only one stack frame that increased to two, three, four,

115
06:23.280 --> 06:24.130
five, six.

116
06:25.230 --> 06:28.170
So then it came back to again like zero.

117
06:28.820 --> 06:37.560
So during the point when the base case was hit, the space utilization was maximum and that was equal

118
06:37.560 --> 06:38.310
to O(N)

119
06:38.500 --> 06:38.670
Okay.

120
06:38.910 --> 06:46.470
So in the worst case during this entire execution and this is space and this is time of execution,

121
06:47.910 --> 06:51.840
at a particular point, the space utilization was maximum.

122
06:52.410 --> 06:58.140
So we would say the space complexity of this program is also O(N) although we're not taking any

123
06:58.140 --> 06:58.530
Extra array

124
06:58.920 --> 07:01.890
But we are using the call stack.

125
07:02.910 --> 07:09.810
Which takes memory and you can see for maximum depth of N we have created N number of answer variables

126
07:10.230 --> 07:11.670
each storing a different value.

127
07:11.670 --> 07:11.910
Okay.

128
07:11.910 --> 07:16.890
So at a particular point in the program, the space utilization went up to linear.

129
07:17.490 --> 07:22.140
So we can say both space and time are going to be O(N) for this problem.

130
07:22.890 --> 07:29.790
And one point you need to remember that all recursive problems will take up extra space.

131
07:29.790 --> 07:30.060
Okay?

132
07:30.090 --> 07:36.690
So because it actually takes extra space because of the concept of this implicit stack.

133
07:39.070 --> 07:40.540
So that's it.

134
07:41.290 --> 07:42.610
That's all for this lecture.

135
07:42.610 --> 07:48.280
07:42.607:48.3
And now I hope you understood how recursion actually works for this particular problem.