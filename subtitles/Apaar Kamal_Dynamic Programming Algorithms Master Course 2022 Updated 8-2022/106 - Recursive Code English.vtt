WEBVTT

00:00.430 --> 00:00.680
Okay.

00:00.760 --> 00:02.860
So let's call this out and.

00:04.190 --> 00:04.770
Let's begin.

00:04.790 --> 00:05.150
Yes.

00:05.900 --> 00:11.930
So the number that we have to print it is 243782437.

00:12.950 --> 00:13.200
Well.

00:13.910 --> 00:18.230
And what we can do is we can take this number as an integer also.

00:18.230 --> 00:20.180
We can take this number as a string also.

00:20.190 --> 00:22.040
It completely depends on us rate.

00:22.040 --> 00:23.480
We can use it anywhere.

00:24.500 --> 00:28.730
So what I do is I take this number resisting because.

00:29.760 --> 00:30.330
You'll see.

00:30.600 --> 00:35.730
You're going to get it as any way you can integrate as a integer also, because why am I taking as a

00:35.730 --> 00:36.120
string?

00:36.120 --> 00:40.050
Because let's say there's a huge number which goes through ten duplicating.

00:40.350 --> 00:42.840
Of course we won't be printing it, but.

00:44.410 --> 00:46.450
We have to store those numbers in strings.

00:47.710 --> 00:48.040
So.

00:51.810 --> 00:55.680
And also there's another thing that viavi and why storing anything.

00:55.680 --> 00:59.280
Because the third thing is that I have to check.

00:59.280 --> 01:01.620
Right, whether it is the last digit or not.

01:02.100 --> 01:02.330
Right.

01:02.580 --> 01:07.950
So if how we like to check it, if it's the last digit of that particular number, if I ever intend,

01:08.250 --> 01:09.600
then it won't be easy.

01:09.600 --> 01:09.900
Right.

01:09.930 --> 01:16.110
Because for that indent, I can't iterate over its indexes, but in the string I can always iterate

01:16.110 --> 01:19.920
over the indexes as zero, as one as to history eight.

01:19.950 --> 01:24.780
So that is also another quick use of strings here.

01:25.590 --> 01:26.460
I take this string.

01:26.940 --> 01:30.090
Now what I need to do is I need to just write a function.

01:30.240 --> 01:31.410
Let's call it fine.

01:31.950 --> 01:38.970
And what it will do is it will print all the digits from print, all the numbers from 0 to 2, four,

01:38.970 --> 01:39.870
three, seven, eight.

01:40.390 --> 01:44.130
And initially, let's pass empty.

01:45.650 --> 01:48.110
In it as a number and these numbers are all together.

01:48.110 --> 01:53.720
I'm trying to formulate this on whether the string only eight or don't be worried about the complexity

01:53.720 --> 01:54.020
there.

01:54.880 --> 01:57.230
So what I'll do is I do avoid for good.

01:57.230 --> 02:03.390
I know some of you might be thinking that I'm just, you know, executed, exaggerating this problem.

02:04.280 --> 02:09.710
I'm just trying to solve this problem from a higher difficulty perspective.

02:09.710 --> 02:12.770
I can't do this on a loop and print it because.

02:13.310 --> 02:15.140
So what do I do?

02:15.740 --> 02:20.390
I will just say this, that this is just an example, right?

02:20.660 --> 02:22.750
This is not even the introduction of digital.

02:22.760 --> 02:26.150
P This is we are not even beginning with digit DP here.

02:26.150 --> 02:26.420
Right?

02:26.420 --> 02:32.090
We just understanding a recursion which is involved recording digit DB later in digital B will come.

02:32.090 --> 02:35.240
You will automatically understand why was this recursion very important?

02:36.130 --> 02:37.450
Well, so.

02:37.900 --> 02:38.470
And this.

02:38.650 --> 02:38.880
Okay.

02:38.920 --> 02:39.790
This is the index.

02:40.300 --> 02:41.080
So let me.

02:42.040 --> 02:45.820
They sing answer, let's call index.

02:46.630 --> 02:49.630
And what else should I pass?

02:50.170 --> 02:51.730
Whether it is the last.

02:54.470 --> 02:56.350
Whether it is the last branch or not.

02:56.360 --> 02:56.630
Right.

02:56.810 --> 02:59.780
So initially, I will posit, yes, it is the last branch.

03:00.140 --> 03:00.980
Why am I saying that?

03:00.980 --> 03:03.290
It is the last grant I am passing through here?

03:03.380 --> 03:09.740
Let me quickly say last thing I'm passing through over here, because right now I am going to fill the

03:09.740 --> 03:10.440
first index.

03:10.440 --> 03:15.140
And so in the first index, I cannot fill any number from 0 to 9.

03:15.140 --> 03:16.970
I have to fill numbers from 0 to 2 only.

03:16.970 --> 03:17.270
Right.

03:17.780 --> 03:18.770
In the first index it.

03:19.880 --> 03:20.180
So.

03:21.190 --> 03:27.350
That's what I'll do is I'm passing through over there so that it just fills the numbers from 0 to 8.

03:27.430 --> 03:29.710
Now, let's just quickly make the regression.

03:31.700 --> 03:38.150
What I do is I formulate and in detail it will be either the number or the last number.

03:38.150 --> 03:38.350
Right.

03:38.680 --> 03:39.260
So if.

03:41.230 --> 03:41.500
Yeah.

03:42.100 --> 03:43.240
I hope you know about this.

03:44.350 --> 03:47.320
In re operators and what it does is nothing.

03:47.320 --> 03:47.950
But it is.

03:48.310 --> 03:54.130
If last is true, that means if last is there, then what happens?

03:55.870 --> 03:56.140
Yeah.

03:57.050 --> 03:59.450
If loss is true, then simple.

04:00.610 --> 04:05.170
Yes, they still would love the numbers that it will be filling and will only go down.

04:06.540 --> 04:07.080
Let me.

04:08.090 --> 04:08.330
Yeah.

04:08.360 --> 04:12.350
The numbers that it is trying to fill, that means that tell you a deal here.

04:12.530 --> 04:17.120
That means whether it is the last branch or not is the last branch of the.

04:18.710 --> 04:24.680
If it is the last branch of the tree, then the numbers will only go down as index -0.

04:24.800 --> 04:25.020
Right.

04:25.070 --> 04:25.780
By -0.

04:25.790 --> 04:29.510
I'm doing you all know, right, that this is a character in character.

04:29.510 --> 04:30.590
I am subtracting zero.

04:30.590 --> 04:32.390
It will give me the actual integer value.

04:32.900 --> 04:34.040
So don't get confused here.

04:34.520 --> 04:38.390
And if the loss is not true, then it will fill in a question.

04:38.660 --> 04:38.930
Right?

04:40.130 --> 04:40.580
We wait.

04:40.640 --> 04:41.720
So I hope you understand.

04:41.720 --> 04:44.900
Understood why I use index, why I use a string.

04:45.200 --> 04:48.200
Because it's so easy to access the index of the string.

04:49.580 --> 04:50.710
And this is right.

04:50.930 --> 04:52.320
Not what I do is simple.

04:52.340 --> 04:54.110
I start from I0.

04:54.140 --> 04:58.040
I keep placing numbers till till date.

04:58.460 --> 05:01.550
So this loop will start from zero and go straight.

05:02.150 --> 05:06.110
If it is the last branch, then it will only place in a question s.

05:07.150 --> 05:12.100
ofAnd let's say for the first indexer, this tool, for the second index, it is for three and seven.

05:12.430 --> 05:14.740
Otherwise it will try and place all in a muslim name.

05:16.050 --> 05:25.140
Well, now what I'll do is I'll simply call fun and I will say okay, in string answered, just add.

05:26.550 --> 05:27.660
The number they took.

05:27.660 --> 05:33.390
I just quickly figured out how to add the particular number in the in the string answer.

05:33.900 --> 05:36.860
And secondly, index will be increment by one.

05:36.870 --> 05:40.050
That means now go on and fill on the next index.

05:40.470 --> 05:41.810
Now, what about last case?

05:41.820 --> 05:47.310
How will I figure out whether it is the last branch of my code or not?

05:48.180 --> 05:48.450
Right.

05:49.260 --> 05:50.350
So it's very simple.

05:50.400 --> 05:51.930
Eight for the last.

05:52.530 --> 05:53.010
Okay, let's.

05:53.010 --> 05:54.450
Let's think of it this way.

05:55.650 --> 05:55.920
Yeah.

05:56.490 --> 05:58.440
So how is this a last branch?

05:58.440 --> 06:04.620
Because previously it was the last branch and it is the last number that I am placing it.

06:05.340 --> 06:05.670
Right.

06:05.970 --> 06:08.550
The last number that I'm placing is equal to till.

06:09.240 --> 06:10.710
And previously it was.

06:12.260 --> 06:12.980
Last branch.

06:13.850 --> 06:14.330
That means.

06:15.460 --> 06:17.350
This last should be true.

06:17.860 --> 06:22.230
If it is the last one and then only the next branch can be a large branch, read more.

06:22.240 --> 06:23.140
The second condition.

06:23.650 --> 06:26.230
The next recursive call can be the last branch.

06:26.230 --> 06:31.430
Only if I is equals to this last number, which is eight.

06:32.130 --> 06:32.590
So what else?

06:32.600 --> 06:34.830
Simply if I is equals to it.

06:35.290 --> 06:36.300
I hope you got this.

06:36.310 --> 06:37.360
Don't get confused here.

06:37.750 --> 06:40.510
Let me quickly add one more record.

06:41.170 --> 06:47.560
There's no confusion, and I will figure out how to add a string here.

06:47.800 --> 06:48.310
Don't worry.

06:48.910 --> 06:50.490
So just understand this part.

06:50.500 --> 06:51.340
This is very important.

06:52.360 --> 06:53.800
It is the last branch.

06:53.830 --> 06:55.090
I'm already on the last breath.

06:55.090 --> 06:55.570
That means.

06:56.750 --> 06:58.550
It's the last number that I'm going to place.

06:58.790 --> 07:01.580
Eight, as you can see over here.

07:02.690 --> 07:02.960
Yeah.

07:03.320 --> 07:04.730
Let me quickly raise this.

07:06.770 --> 07:07.130
Okay.

07:07.480 --> 07:10.120
When I played this too, it was the last print rate.

07:10.390 --> 07:12.700
But what this zero for this one?

07:12.700 --> 07:13.930
For this tool, for this tree.

07:13.930 --> 07:15.490
I could replace any number.

07:15.490 --> 07:17.110
I fought all these the.

07:17.500 --> 07:18.670
What last is not true.

07:18.670 --> 07:22.410
As you can see, it is blue, but it is only true before rate.

07:22.420 --> 07:27.640
So that means if I place for after this now just place the numbers from 0 to 3.

07:28.800 --> 07:30.650
That means this is the last most branch.

07:30.950 --> 07:33.970
So the previous has to be the last means.

07:34.470 --> 07:36.510
It is already on the last branch.

07:36.510 --> 07:43.270
And secondly, the number that I'm placing here, that means for in this case is the last number eight

07:43.440 --> 07:45.150
and it is equals to till basically.

07:46.450 --> 07:47.380
I hope you got this.

07:48.660 --> 07:49.180
So.

07:51.560 --> 07:54.470
And now this remains read how to add.

07:57.290 --> 08:01.730
The index is in a string eight.

08:02.300 --> 08:05.810
So what I can do here is I can see that.

08:09.380 --> 08:09.680
Okay.

08:10.520 --> 08:10.870
So.

08:12.150 --> 08:13.290
Just give me 1/2.

08:14.590 --> 08:14.740
Okay.

08:14.890 --> 08:19.870
So I remember using a function all to a stingray.

08:20.530 --> 08:21.720
What does this function do?

08:21.730 --> 08:26.350
If I pass an integer to it, it buildings are then me a string part of it.

08:26.450 --> 08:27.250
Thing version of it.

08:27.700 --> 08:27.950
Right.

08:28.220 --> 08:29.550
So I just pass it to it.

08:29.860 --> 08:30.640
What it does, it.

08:30.640 --> 08:36.440
It will convert this I to a string and it will be appended after answer late.

08:37.030 --> 08:42.400
So let me quickly figure out the base case or does a base case base.

08:44.040 --> 08:49.950
I'm starting at the zero eight index, western Mexican Index Card Index now on default index.

08:50.640 --> 08:57.090
If I'm going over history on default index means after default death of the tree, I would have formed

08:57.090 --> 08:57.940
a four digit number.

08:58.550 --> 09:05.220
They and see that if index is equals two as dot size, that means right now we have reached the end

09:05.220 --> 09:06.030
of the string a.

09:07.020 --> 09:10.920
And so what I will simply do, I'll simply sio dancer and I'll return.

09:12.170 --> 09:12.830
Let's build it.

09:15.690 --> 09:18.930
So as we can see, the first number is 0000.

09:19.020 --> 09:20.160
So it's an extreme form.

09:20.160 --> 09:21.720
So that's why we have bleeding zeros.

09:22.110 --> 09:24.600
But don't worry, we'll always have leading zeros.

09:25.170 --> 09:27.160
But we shouldn't have it affected until eight.

09:27.840 --> 09:32.010
Here we can see I have print or I've tried to print all the numbers.

09:32.010 --> 09:33.210
And how many numbers we have printed?

09:33.210 --> 09:37.350
2438 numbers eight, including zero.

09:37.860 --> 09:41.100
So that's why we have bounded 2438.

09:42.790 --> 09:44.950
So I hope this part is very clear.

09:45.010 --> 09:46.530
This this is the most important part.

09:46.540 --> 09:51.550
If you understood this next question that I'll be going to discuss will be very easy for you.

09:52.870 --> 09:56.440
And if it's a very short code also.

09:56.440 --> 09:56.670
Right.

09:56.680 --> 09:59.140
If you think about it, it's very, very short.

09:59.740 --> 10:07.210
Lester Gilbert, is this whether it is the last branch or not and this conversion from string and converting

10:07.210 --> 10:17.020
it back to end because this was very easy to convert it to take the input as a string because of this

10:17.020 --> 10:22.480
simple conversion rate, the symbol conversion and the symbol can go from next time.

10:22.480 --> 10:28.330
The problems were to ask you to print all the numbers, but will ask you to find out the count of numbers

10:28.330 --> 10:31.480
with some special properties and you'll see it from the next problem.

10:31.480 --> 10:31.750
Right.

10:32.620 --> 10:35.020
So let's discuss it in the next lecture only.

10:35.200 --> 10:35.530
Thanks.
