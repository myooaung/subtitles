WEBVTT

00:00.630 --> 00:05.880
So let's discuss what can be done in this solution so that I know what's happening.

00:05.880 --> 00:08.210
I'm going for all the reasons a list of I carry.

00:08.220 --> 00:11.040
Note that okay, these are the nodes in which you can go.

00:11.430 --> 00:14.220
So only go to the node, which is not in this moment.

00:14.300 --> 00:15.570
That means it's not visited.

00:15.570 --> 00:15.870
Right?

00:16.200 --> 00:21.690
So the only problem that I can see here is this set that we are passing this set again and again.

00:21.690 --> 00:23.010
Of course, it will take a lot of time.

00:23.010 --> 00:26.280
Let's say the values are huge, right?

00:26.550 --> 00:34.110
If the values are huge, it will try various possible combinations and it will tell us whether the answer

00:34.110 --> 00:34.950
is possible or not.

00:35.280 --> 00:35.550
Right.

00:35.880 --> 00:39.510
So this will take a lot of time because we are also pushing this in math.

00:39.520 --> 00:45.960
But just in Dennis said and I just said, can at most contain an element but can optimize this further,

00:46.140 --> 00:47.910
can optimize this further and.

00:49.220 --> 00:49.910
Do some things.

00:49.940 --> 00:54.380
Yes, I can use bit manipulation for this eight, which is also called bit musk.

00:54.710 --> 00:54.980
Right.

00:55.160 --> 01:00.530
So what I am going to do is I will simply say that to keep the track of one, two, three, four, where

01:00.530 --> 01:03.410
I'll use this, I'll use a number.

01:04.430 --> 01:04.760
Right.

01:05.030 --> 01:07.910
So this is a particular bit mosque.

01:09.210 --> 01:09.990
Big musk.

01:11.510 --> 01:20.060
So these bids, a particular number will be actually of storing it will actually store whether a particular

01:20.480 --> 01:22.130
vertex was visited or not.

01:22.480 --> 01:24.650
And so it will tell whether zero was visited or not.

01:24.650 --> 01:26.540
One was reached on or two of its on order.

01:26.540 --> 01:29.600
Three of is determined by distorting a integer.

01:29.900 --> 01:30.230
Right.

01:30.440 --> 01:32.000
So what is this integer?

01:32.000 --> 01:35.360
If if I want to represent this in decimal, this becomes.

01:36.380 --> 01:36.890
15.

01:37.310 --> 01:37.700
Correct.

01:37.940 --> 01:44.430
So this particular integer called 15, which has all four bits and which is a zero bit set.

01:44.480 --> 01:44.690
Okay.

01:44.690 --> 01:47.120
Let me reverse it in zero one, two, three.

01:47.330 --> 01:49.280
It has a zero bits and that means it.

01:49.610 --> 01:53.480
This set that is contained by 15 is contains zero.

01:53.510 --> 01:54.170
Contains one.

01:54.170 --> 01:55.340
Contains two, contains three.

01:55.910 --> 01:56.270
Correct.

01:56.480 --> 02:00.470
So if I say if I says if I say let's say ten.

02:00.980 --> 02:03.050
So ten is nothing but 1010.

02:03.050 --> 02:08.480
That means right now in my asset was one commentary.

02:08.510 --> 02:13.870
That means I have only visited to naught, which is one common that I'm putting ten as an integer eight.

02:14.240 --> 02:15.980
So just tell me one thing.

02:15.980 --> 02:24.890
If I have any words to store, to mask these, and where does this to mask as a bit then what?

02:26.520 --> 02:34.600
What should be the maximum value of the integer that I want them to store later?

02:34.710 --> 02:37.080
If I have a and vertices, that means I will have n ones.

02:37.440 --> 02:45.540
And what is this if if a particular decimal or an integer as and once, then it is nothing but to raise

02:45.540 --> 02:51.810
to the power in minus one correct as this is to this to the power for -158.

02:51.930 --> 02:59.460
So to store or to keep account of four two to make a bit masquerade offer up four vertices.

02:59.460 --> 03:01.010
I want 58.

03:01.140 --> 03:02.970
Similarly we can yeah.

03:02.970 --> 03:03.630
So this is it.

03:03.900 --> 03:07.110
So initially what I will do is initially my set is empty.

03:07.320 --> 03:08.370
So what is an empty set.

03:08.430 --> 03:09.870
It is zero, right.

03:10.110 --> 03:13.860
And let's say that it's passing.

03:14.070 --> 03:18.270
Let's say I'm currently I'm on the vertex one and I've just visited one only.

03:18.420 --> 03:19.850
So what will be my departure?

03:19.860 --> 03:23.190
It will be one comma, one right after this, what will happen?

03:23.880 --> 03:25.080
Okay, let me go back.

03:27.090 --> 03:27.260
Yeah.

03:27.360 --> 03:28.440
This was the great parade.

03:28.680 --> 03:31.470
So let me just make fun graph.

03:34.540 --> 03:38.270
So after one or two, my reaction goes down to this one.

03:38.500 --> 03:38.760
Right?

03:39.010 --> 03:40.540
That means now I am on.

03:40.790 --> 03:41.030
Okay.

03:41.050 --> 03:43.020
Initially I was in zero and zero.

03:43.030 --> 03:43.670
Nobody said.

03:43.690 --> 03:45.760
That's why the number in Moscow is one.

03:46.090 --> 03:49.390
Now what happens is now we're doing in this state, which is this one.

03:49.420 --> 03:50.860
That means now I've reached one.

03:50.860 --> 03:53.410
And this, it said, becomes so that.

03:54.870 --> 03:57.660
The bind of my state will be this correct.

03:57.960 --> 04:01.080
And what what is this Red Mosque?

04:01.080 --> 04:01.920
And as a number.

04:01.950 --> 04:03.000
It is nothing but tree.

04:03.300 --> 04:05.640
So right now my state will be one comma tree.

04:05.970 --> 04:08.400
That means I am on vertex one.

04:08.610 --> 04:09.570
I'm on vertex one.

04:09.810 --> 04:15.900
And the second values tree three means 0011, which means zero in one word, exquisite word.

04:15.900 --> 04:16.770
Two in three are not.

04:17.120 --> 04:17.340
Right.

04:17.460 --> 04:20.670
So from let's say from this one, I go to tree.

04:21.420 --> 04:21.660
Cool.

04:21.870 --> 04:25.920
So from one, if I go to tree, I'll set this bit also of this tree.

04:25.920 --> 04:26.280
Right.

04:26.370 --> 04:29.010
So if I said this word of tree, then what will be my state?

04:29.520 --> 04:30.410
It will be simple.

04:30.550 --> 04:37.140
Right now my current word exists tree and the integer that is representing this big mask, which is

04:37.740 --> 04:41.130
which will be eight plus two plus one, which is 11.

04:42.150 --> 04:43.730
So I hope this is very clear.

04:43.730 --> 04:44.010
Right.

04:44.370 --> 04:45.900
So what is the meaning of 11?

04:45.910 --> 04:50.160
11 if I didn't find it means is 10118.

04:51.120 --> 04:55.800
And this 1011 will be is 11.

04:55.800 --> 04:58.200
And this would be representing the zero one and three.

04:58.440 --> 05:02.090
All these three elements are in my state, so I won't visit them again.

05:02.100 --> 05:02.330
Right.

05:02.340 --> 05:07.830
I can very easily check of whether an element is in my set or not, whether I visited them or not.

05:08.010 --> 05:12.900
My quickly checking whether they are yet to build of the mask is set or not.

05:13.290 --> 05:13.590
Right.

05:13.860 --> 05:16.530
So let's move on to the code.

05:16.530 --> 05:19.260
Let's quickly optimize it all.

05:19.260 --> 05:20.400
Let's do it in the next part.
