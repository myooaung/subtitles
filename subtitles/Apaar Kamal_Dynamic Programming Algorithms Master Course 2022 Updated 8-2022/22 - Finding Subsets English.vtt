WEBVTT

00:02.020 --> 00:02.720
Everyone.

00:02.770 --> 00:09.010
So now we're going to discuss the first problem in which we need to find the subsets of a given string

00:09.820 --> 00:11.600
of sample input as ABC.

00:11.860 --> 00:14.770
And you can see these are the possible subsets that we can have.

00:15.430 --> 00:16.450
So what is substrate?

00:16.450 --> 00:21.370
So substrate as a small part of the string, which may or may not contain continuous letters?

00:21.370 --> 00:21.630
Okay.

00:22.210 --> 00:26.650
So if we have like the three letters, then for every letter we have two options.

00:27.220 --> 00:29.950
Either it will be a part of the substrate or it will be not.

00:30.160 --> 00:33.530
It will be part of the substrate, are not part of the subject or not.

00:33.550 --> 00:33.790
Okay.

00:34.390 --> 00:41.740
So that means we have to enter to and do that as a number of options to create subjects.

00:42.250 --> 00:46.780
And, you know, if we exclude all, then it is a null subset of include all.

00:46.780 --> 00:47.830
Then it is ABC.

00:48.160 --> 00:53.950
If you include ABC, then it as we see if included B, then it is maybe if we have this one, ignore

00:53.950 --> 01:00.790
this one or take this one, then it is a similarly we have a B, ABC, a B, so these are the eight

01:00.790 --> 01:02.230
possible options that we can have.

01:02.770 --> 01:08.290
Now we need an algorithm that computes this and prints all the subjects.

01:09.340 --> 01:11.650
So let's see how we can do it.

01:11.830 --> 01:14.550
So first of all, we had having input.

01:15.910 --> 01:16.150
Okay.

01:16.390 --> 01:22.030
So the idea here is if you try to break this problem recursively, what are you going to do in order

01:22.030 --> 01:24.580
to find subsets of ABC?

01:25.060 --> 01:30.190
I can see I will make this as a sub problem.

01:30.820 --> 01:34.090
Finding subsets of the remaining string as is a problem led to the string.

01:34.090 --> 01:37.490
Start from I then from my plus one the the last.

01:38.440 --> 01:40.630
Is this a problem that will be solved by recursion?

01:41.050 --> 01:46.990
And I'm only worried about what I can do at this particular point with I can actually make two copies,

01:46.990 --> 01:51.520
a subset in which is present a subset and which is not present.

01:51.610 --> 01:55.060
And I can do a get going, find the subsets of b c, okay.

01:55.570 --> 02:02.620
So null with subsets of b c and how do you find subsets of B C, let us recursively we have the subsets

02:02.620 --> 02:02.970
of these.

02:02.980 --> 02:12.460
These are it would be B or it would be C or it would be busy or it would be null.

02:12.610 --> 02:19.750
So if you append to avoid them, it would give you a B, it would give you a C, it would give you a,

02:19.750 --> 02:22.780
b, c, and it would give you an error.

02:22.990 --> 02:25.840
If you find subsets of b, c, it's b c.

02:26.110 --> 02:26.650
B c.

02:26.650 --> 02:27.880
And not okay.

02:28.150 --> 02:33.640
I'm not writing at a rate and in no particular order, but if you add a null with all of them, that

02:33.640 --> 02:34.960
means you have not taken.

02:34.990 --> 02:36.730
Okay, so here we say okay.

02:37.000 --> 02:46.160
EG along with subsets of B.C and there we say don't take it, don't take it, but subsets of bases.

02:46.270 --> 02:51.110
So it becomes nothing but b c messy and null.

02:52.200 --> 02:52.460
Okay.

02:52.890 --> 02:59.070
If you talk about these food and these food, these are the age subsets that we were talking about.

02:59.070 --> 03:02.640
I guess ABC will give you to do that as all subjects.

03:03.180 --> 03:08.160
And with these four, you actually make two copies, one with it and one without.

03:09.430 --> 03:11.010
One with and one without.

03:11.580 --> 03:14.400
So this gives us a hint of how.

03:14.460 --> 03:18.030
How to compute or how to solve this problem effectively.

03:18.390 --> 03:24.480
Let's again that I draw that equation three and see how this problem will actually get solved.

03:25.020 --> 03:26.610
So let's say we have this in.

03:28.300 --> 03:33.440
That is initially A, B, C and analytic.

03:34.030 --> 03:37.720
Let's have another output area that is initially empty.

03:38.230 --> 03:39.490
Let me call it as input.

03:39.940 --> 03:41.750
Let me call it as output again.

03:43.010 --> 03:45.290
This is also empty.

03:45.360 --> 03:45.590
Okay.

03:45.930 --> 03:50.700
Now I put the pointer variable equal to zero hit and I put a j equal to zero ahead.

03:50.720 --> 03:51.020
Okay.

03:51.460 --> 03:53.420
So in the beginning, I'm going to make two calls.

03:53.850 --> 03:58.070
Look, I'm going to pass this error in the calls.

03:58.520 --> 04:02.810
If that means if I'm using the error, it will be shared across all the function calls.

04:03.200 --> 04:05.900
I really need to have do some work as well.

04:06.110 --> 04:09.950
So when it's okay, let's make a function call and we will take a.

04:11.110 --> 04:15.820
So what we will get we will get ahead on this input point that I will move to.

04:16.300 --> 04:16.700
Okay.

04:16.720 --> 04:23.740
So we are standing at B again in this call, what we're going to do and in this call that will happen

04:23.740 --> 04:28.300
a little later on, what we are going to do, we are not going to take it.

04:28.480 --> 04:32.560
So if if you take it, then they will move to this index.

04:32.920 --> 04:35.590
And if you don't take, they will still remain here.

04:35.970 --> 04:38.140
They will still remain here.

04:39.100 --> 04:45.730
So now what is going to happen, as we discussed, when you're going to come back from this call to

04:45.730 --> 04:48.610
this call, this call will actually have a hit.

04:48.940 --> 04:50.440
And then you're going to make this call.

04:50.440 --> 04:52.030
This call will also have it here.

04:52.750 --> 04:57.250
But that it is not going to matter a lot because we are going to override it.

04:57.610 --> 04:57.940
Okay.

04:58.480 --> 04:59.920
Just make our daughter stay here.

05:00.460 --> 05:07.030
We don't want to take this, but it will be present because of the backtracking that is same across

05:07.030 --> 05:08.020
all the function calls.

05:09.130 --> 05:11.260
So now let us first focus on this goal.

05:11.590 --> 05:14.580
So at this point, I moved to one place ahead.

05:14.580 --> 05:21.100
I will go ahead and also jump to one index I had because by reading one input letter, you have copied

05:21.310 --> 05:23.050
one letter in the output.

05:23.350 --> 05:23.680
Okay.

05:24.860 --> 05:28.160
Now in this function, call what you're going to see.

05:28.160 --> 05:32.420
Okay, I will take B and I will not take you will again make to function calls.

05:32.870 --> 05:36.080
If you take B, then we will come here.

05:36.530 --> 05:42.230
And if you don't take B, then this would look something like this.

05:43.490 --> 05:43.820
Okay.

05:44.780 --> 05:47.720
And if you take me, the G will move one step ahead.

05:48.020 --> 05:48.290
Okay.

05:48.710 --> 05:53.060
Then in the next function call, I will jump to one more step ahead.

05:53.540 --> 05:53.840
Okay.

05:54.350 --> 05:58.110
And similarly here also, we will be doing the same calls.

05:58.130 --> 06:01.070
If you take me, it would look something like this.

06:01.760 --> 06:04.070
If you don't take me, it would look something like this.

06:04.340 --> 06:04.610
Okay.

06:06.440 --> 06:13.880
I'm now in the final step we have I would as equal to see some of you may ask why are we trying these

06:13.880 --> 06:14.780
calls in parallel?

06:15.740 --> 06:17.300
These calls will not win by little.

06:17.300 --> 06:20.930
They would be in the left right outlet, but just not.

06:20.930 --> 06:22.400
We will forget the state.

06:22.400 --> 06:24.410
Then we will come back to this particular point.

06:24.770 --> 06:26.060
I'm just drawing in parallel.

06:26.060 --> 06:26.270
Okay.

06:26.270 --> 06:28.520
So J will be it on J would be here.

06:28.700 --> 06:29.000
Okay.

06:29.540 --> 06:32.570
And if you take C here, it would be something like this.

06:32.960 --> 06:34.070
A, b, c.

06:35.500 --> 06:46.630
And David jump here if you don't think it would be like this a be and you can see they would be here

06:47.050 --> 06:53.740
if you take C, it would be like a c if you don't see it would be like it.

06:53.740 --> 06:56.650
Only if you take it it would be b c.

06:57.680 --> 06:59.660
And if you don't take, it would be like me.

07:02.730 --> 07:06.600
If you take C, it would be like C, if you don't X, it would be like, no.

07:06.890 --> 07:07.200
Okay.

07:07.830 --> 07:09.990
So this is going to be not necessary.

07:11.180 --> 07:12.410
So I've drawn it here.

07:12.530 --> 07:12.860
Okay.

07:14.240 --> 07:19.850
So now we're going to jump to the final point in the final set.

07:20.030 --> 07:22.550
This I would be this index.

07:22.740 --> 07:23.990
I that is note.

07:24.020 --> 07:29.180
So if it is null, we will put the null at the G8 index and we will print this out.

07:29.360 --> 07:31.160
So we put an alert on.

07:31.280 --> 07:34.430
We are going to print as we put an allele and we're going to print this.

07:35.670 --> 07:41.230
But this is this is actually the recall agenda for this particular problem.

07:41.250 --> 07:41.490
Okay.

07:42.180 --> 07:46.010
But some of you may ask how how these calls are being made.

07:46.020 --> 07:52.890
And so what will happen is, firstly, now I will show you the exact flow of records and actually will

07:52.890 --> 07:53.280
work.

07:56.450 --> 07:59.490
Firstly, this call will happen from here.

07:59.500 --> 08:01.680
This call will happen from here.

08:01.710 --> 08:05.640
This call will happen when you're in this particular call.

08:05.670 --> 08:06.030
Rest.

08:06.030 --> 08:07.490
Everything has not happened yet.

08:07.500 --> 08:07.830
Okay?

08:07.860 --> 08:11.610
Remember that everything is yet to happen from this step.

08:13.260 --> 08:14.580
This is all it is happening.

08:14.610 --> 08:14.880
Okay.

08:15.300 --> 08:16.740
So at this particular point.

08:19.070 --> 08:23.700
You have your buddies here and you have accepted all the letters from them.

08:23.720 --> 08:27.050
But like before there it is, the ABC.

08:27.210 --> 08:30.320
No, but from this point we have done the printing.

08:30.320 --> 08:34.790
We will get our first output, that is ABC on the basis of this.

08:34.790 --> 08:35.540
It had done so.

08:35.540 --> 08:37.850
When we that are done, we will go back.

08:38.330 --> 08:40.520
One step back, we'll go one, one step back.

08:40.520 --> 08:40.760
Okay.

08:41.690 --> 08:50.980
So I've actually that would have been one more step like this one ABC and all was not hit.

08:50.990 --> 08:56.540
And from here we go, one step back in which J is going to come here and J was actually it.

08:57.140 --> 08:59.240
So this is actually the base case again.

08:59.300 --> 09:00.500
This is actually the base case.

09:00.560 --> 09:02.180
So I had less space to draw.

09:02.600 --> 09:08.030
So I draw the base is in the same output, but that would be another call for the base case than the

09:08.030 --> 09:09.110
base case we are building on.

09:09.350 --> 09:15.270
We are pending downward and we are going back to when you are going back, this array and this area

09:15.290 --> 09:21.350
are actually same, so you will actually have an earlier okay, but j will be at this from it.

09:21.350 --> 09:22.370
You will not get my work.

09:22.610 --> 09:23.420
My work is done.

09:23.420 --> 09:28.730
I have printed whatever is to be done for the remaining output and we will again go back.

09:29.570 --> 09:29.870
Okay.

09:30.110 --> 09:34.520
So when you are coming back in this particular array, what you will see, you will have actually a

09:34.520 --> 09:36.320
C here and you will actually have a null.

09:36.590 --> 09:36.920
Okay.

09:37.430 --> 09:40.280
But J would be at this particular index.

09:40.700 --> 09:47.990
And when you're going to make this call, you are going to say, let us put output of G equal to null.

09:48.110 --> 09:48.410
Okay.

09:48.410 --> 09:49.340
So basically.

09:51.270 --> 09:59.010
This value was already nil and you are overwriting this particular C with null and then you are making

09:59.010 --> 10:01.760
a call in the base case in which you are doing okay.

10:01.810 --> 10:07.980
AB null and you're making this at this particular index, which is again and you are printing this output

10:07.980 --> 10:13.980
which evaluates to Abby again when you're going to come back from here, this is actually going to be

10:13.980 --> 10:21.480
Abby Nail and that is what is going to you're going to see that Abby NULL But again, when you're going

10:21.480 --> 10:24.960
to make a call here, the value of J is not going to change.

10:24.990 --> 10:26.100
The value of J would be.

10:27.060 --> 10:31.200
So when you include something in your input, you said J goes to J plus one.

10:31.770 --> 10:35.240
But when you don't include something in your output, sorry.

10:35.250 --> 10:36.780
When you include something in your output.

10:37.200 --> 10:38.460
J goes to the plus one.

10:39.030 --> 10:42.710
And if you don't include did you mean that's the same index?

10:42.710 --> 10:47.240
T Now this array will be actually Abby here even.

10:47.760 --> 10:48.060
Okay.

10:48.570 --> 10:53.550
And you are going to override the data index with some extra information.

10:53.560 --> 11:01.260
Now your input I in this call is that actually see what you're going to do, you're going to override

11:01.260 --> 11:08.610
the data index with C, so this B will get overwritten with the value of C and you will end up getting

11:08.610 --> 11:09.950
like AC here.

11:09.960 --> 11:12.330
Okay, this is what is going to happen.

11:12.360 --> 11:15.510
Then again, when you're going to back this out, it would be actually easy.

11:15.810 --> 11:19.800
Then you again come here, you will override it and then you again come back.

11:19.800 --> 11:20.850
You again come back.

11:20.850 --> 11:24.060
It would be something like anal null and you again go back.

11:24.060 --> 11:28.890
It would be like anal and then you go ahead.

11:29.070 --> 11:30.360
But J is not changed.

11:30.420 --> 11:31.860
J is at this particular index.

11:32.370 --> 11:39.360
Then you get the error and you're going to override this with the value of B, because in this function

11:39.360 --> 11:45.360
call, the AI is at particular index B, so this is actually how it's a little complex.

11:45.360 --> 11:45.630
Okay.

11:45.870 --> 11:49.460
But just for the sake of simplicity, I forced Broderick Legendary.

11:49.860 --> 11:52.350
Now I'm telling you what is happening.

11:52.620 --> 12:00.180
I believe not when you're going back on how we're overwriting the existing values in the edit and this

12:00.180 --> 12:06.420
rule I will not need a backtracking step, but what we are actually doing is we are overwriting the

12:06.420 --> 12:08.280
previous output with the new output.

12:08.280 --> 12:08.550
Okay.

12:09.580 --> 12:15.760
So what you would have also done is you could have overwritten the previous output with a null and rendered

12:15.760 --> 12:16.510
and then you output.

12:16.660 --> 12:20.650
But overwriting a previous output with the new output is also fine.

12:20.770 --> 12:21.130
Okay.

12:21.370 --> 12:23.680
So we had overriding previous output.

12:25.000 --> 12:26.650
With new output again.

12:27.970 --> 12:30.280
But this is actually about tracking problem, right?

12:30.610 --> 12:36.100
Because when we're going back, we need to do some changes in the area and we are exploring the entire

12:36.130 --> 12:36.980
search space.

12:37.000 --> 12:41.920
We are trying to find all possible solutions using backtracking.

12:42.400 --> 12:45.370
We are finding all possible solutions.

12:45.550 --> 12:45.860
Okay.

12:46.630 --> 12:49.960
And these are all possible solutions that we are looking at.

12:50.380 --> 12:52.690
So I hope you understood the concept.

12:52.900 --> 13:00.250
And in the next lecture, I will show you how you can write the code for this problem using a character

13:00.260 --> 13:00.580
editing.

13:00.700 --> 13:01.030
Okay.

13:01.510 --> 13:03.430
So let's see in the next lecture.
