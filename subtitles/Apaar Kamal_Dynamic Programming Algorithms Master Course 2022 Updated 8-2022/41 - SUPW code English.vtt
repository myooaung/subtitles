WEBVTT

00:00.670 --> 00:03.040
Hello, Everyone, let's code this problem.

00:04.300 --> 00:09.160
And so here is an input that I have taken this one and let's take this input.

00:09.520 --> 00:12.280
And also you can submit this problem on code chef.

00:12.820 --> 00:16.660
It's a ZCO problem, but you can also submit it on code chef.

00:16.930 --> 00:22.240
What you can do is you can just say SUPW, code chef just write SUPW code chef.

00:22.510 --> 00:28.300
It will take you to a problem and just click on the submit button and you can test your code there.

00:28.300 --> 00:28.570
Right.

00:29.000 --> 00:30.220
Let me code it first.

00:31.110 --> 00:31.500
And.

00:31.650 --> 00:31.880
Yeah.

00:32.810 --> 00:35.900
Let's take the a array, which is.

00:37.180 --> 00:38.950
which will contain the number of minutes.

00:39.190 --> 00:40.720
And let's also take the DP array.

00:41.560 --> 00:43.240
What is this DP array represent?

00:43.270 --> 00:44.350
I've already explained this.

00:44.950 --> 00:51.280
The F(i) represents the answer if the minimum number of minutes spend in SUPW duty.

00:51.400 --> 00:53.740
If the first i days are considered.

00:54.190 --> 00:57.310
So here I'm just taking zero base indexing, so just don't get confused.

00:58.870 --> 01:00.160
Let's take the input first.

01:01.340 --> 01:04.460
I've taken the input, now we know for the first three days.

01:06.070 --> 01:10.560
f(i) = a(i) because for the first day it's going to first day and 2nd day, 2nd and 3rd day

01:10.560 --> 01:10.990
3rd day right.

01:11.640 --> 01:16.060
So let me just simply fix the, mark the end of DP.

01:18.180 --> 01:18.930
for zero.

01:21.970 --> 01:22.630
For one.

01:24.570 --> 01:31.440
For 2 right, I've filled the first three DP values, and now what I need to do is I simply.

01:34.710 --> 01:36.900
I simply start from 3rd index.

01:36.930 --> 01:38.550
So 012 is filled.

01:38.580 --> 01:43.840
So from the third index, I go till n-1 , and I simply apply my recursive relation.

01:43.860 --> 01:47.220
It is this that f(i).

01:47.790 --> 01:48.720
Here it is DP[i].

01:49.110 --> 01:50.910
DP[i] equals to minimum of.

01:52.390 --> 01:53.080
DP.

01:54.230 --> 02:02.660
I Minus one, DP i minus two, DP I minus three and whatever is a minimal of them.

02:03.200 --> 02:04.640
That is my second last day.

02:06.890 --> 02:10.890
The second last working day and the current which is a[i].

02:12.180 --> 02:19.070
cool guys, so current is hours at a[i], so DP[i] will always contain a[i] because we are going on the current day.

02:20.320 --> 02:20.740
And.

02:22.450 --> 02:23.440
What will be the answer?

02:23.590 --> 02:25.090
The answer will be simple.

02:25.090 --> 02:25.630
Nothing but.

02:27.260 --> 02:34.520
Minimum of the last three days, so minimum of n-1, n-2 and n-3

02:34.910 --> 02:41.300
So of course, whenever we are taking the minimum of some values, then we can, we can only take a minimum

02:41.300 --> 02:42.770
of couple of values, right?

02:42.770 --> 02:43.610
Only two values.

02:44.030 --> 02:51.350
But of course, you can use this minimum by initializing it by a parenthesis.

02:51.590 --> 02:51.860
cool.

02:53.930 --> 03:00.140
So if you have these parenthesis, you can add any  number of values here, right so you can take any number

03:00.140 --> 03:01.280
of values here inside the statement.

03:01.280 --> 03:02.510
It will give you the minimum value.

03:03.170 --> 03:08.390
There is what you have to do is you'll have to write two minimums to calculate the minimum of three

03:08.390 --> 03:08.780
values.

03:09.290 --> 03:10.970
Right so this is better, of course.

03:12.000 --> 03:13.080
so lets build this.

03:14.920 --> 03:15.130
right?.

03:15.400 --> 03:16.510
So here the answer is five.

03:16.690 --> 03:17.800
And how is the answer five?

03:18.010 --> 03:20.230
Okay, let's try to figure this out as well.

03:23.730 --> 03:24.480
The answer is three.

03:24.480 --> 03:24.840
Right?

03:24.900 --> 03:28.320
Let's let's also print out the DP values that I'm getting.

03:31.660 --> 03:31.820
cool.

03:32.050 --> 03:33.970
And then let's print out.

03:34.870 --> 03:35.380
backslash n.

03:37.420 --> 03:37.690
Right.

03:37.900 --> 03:41.490
So the DP value that I'm getting is 3 2 3 for the first three days.

03:41.530 --> 03:41.860
Cool.

03:42.310 --> 03:43.070
4 here.

03:43.090 --> 03:48.850
That means if I'm going on this 2, that means it's coming from this 2, this five value.

03:48.850 --> 03:50.530
It comes from this 2.

03:50.530 --> 03:50.910
Right.

03:51.880 --> 03:54.910
2nd day plus the 5th day is five.

03:55.980 --> 03:56.310
Right.

03:56.820 --> 03:58.890
And similarly, you can see this 5.

03:59.670 --> 04:01.050
It's coming from this 3

04:01.680 --> 04:07.170
So it is 3rd day plus 6th day, 3rd and 6th day is giving me eight and so on.

04:07.380 --> 04:08.970
so what is the minimum of the last 3, it is 5

04:10.020 --> 04:12.300
So this 5 means this day.

04:13.460 --> 04:13.790
Right.

04:13.790 --> 04:18.860
And it came it must have come from some four which is this day right.

04:19.310 --> 04:21.540
And this, 2, has come from this, 2.

04:21.590 --> 04:25.360
They took 2, 2 and 1, so in DP.

04:25.370 --> 04:26.310
You can also trace back.

04:26.360 --> 04:30.490
Oh, of course, I made a separate section for that later, but you don't have to trace .

04:30.680 --> 04:35.740
back right now you just have to worry about the recursive relations and the optimization.

04:36.320 --> 04:36.560
right.

04:38.280 --> 04:38.510
So.

04:38.940 --> 04:39.720
Thank you, everyone.

04:39.960 --> 04:43.110
And let's see you in the next part.

04:43.800 --> 04:46.160
Of course, guys, you can try the.

04:46.740 --> 04:49.670
Because, of course, this is also a recursive approach.

04:49.680 --> 04:53.760
But here I've done a bottom up DP, which is the tabulation DP right?.

04:53.940 --> 04:59.350
But you can also try the memoization way and top down approach right.

05:00.250 --> 05:00.410
So.

05:00.490 --> 05:00.700
Yeah.

05:01.510 --> 05:06.250
Just try to write some recursive function by using this recursive relation and see the answer.

05:06.850 --> 05:08.680
Make a base case and print the answer.

05:09.790 --> 05:12.310
And don't forget to memoize it.

05:13.100 --> 05:14.470
cool, thank you.

05:14.570 --> 05:15.370
See you in the next part.