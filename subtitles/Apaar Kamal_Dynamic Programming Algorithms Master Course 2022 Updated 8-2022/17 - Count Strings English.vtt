WEBVTT

00:01.790 --> 00:02.290
Hii Everyone.

00:02.420 --> 00:05.390
So welcome to the yet another video on recursion problem.

00:05.390 --> 00:08.270
So this time we are discussing the problem binary strings

00:08.810 --> 00:13.220
The question is we need to count the number of binary strings, basically all the strings which are

00:13.220 --> 00:18.410
formed using zero and one and with no consecutive.

00:18.410 --> 00:23.750
ones that can be formed using a string of length N.

00:23.750 --> 00:29.000
okay, for example, let's say if I give you N as to how many binary strings you can form, you

00:29.000 --> 00:35.600
can form lets say 00, 01, 10, 11.

00:36.120 --> 00:41.120
This is a binary string that is not valid in this case, so will cross it for N equal to two.

00:41.120 --> 00:43.220
We have three binary string.

00:43.220 --> 00:43.490
Okay.

00:44.180 --> 00:45.770
And what about N equal to three?

00:46.160 --> 00:48.050
So total we know we can form eight strings.

00:48.530 --> 00:50.420
lets say we have 000.

00:50.420 --> 00:54.530
It is valid, we have 001 valid 010.

00:55.130 --> 00:55.880
Again valid.

00:56.890 --> 00:59.210
Uh, 011.

00:59.230 --> 00:59.870
Not valid.

00:59.890 --> 01:00.150
Okay.

01:00.740 --> 01:03.760
Or that's what we are going to have.

01:04.270 --> 01:06.490
Or maybe we can have 101.

01:07.210 --> 01:08.920
This is this is also valid.

01:09.070 --> 01:09.370
Okay.

01:09.880 --> 01:18.460
Invalid change would be 111 011 110 and 100.

01:18.490 --> 01:19.450
It is also valid.

01:19.600 --> 01:19.900
Okay.

01:20.380 --> 01:24.310
We have one, two, three, four, five, six, seven, eight.

01:24.550 --> 01:25.250
So out of 8

01:25.550 --> 01:27.580
We we we don't have this one.

01:27.790 --> 01:28.630
This is invalid.

01:28.660 --> 01:29.560
This is invalid.

01:29.590 --> 01:30.430
This is invalid.

01:31.030 --> 01:33.490
We have one, two, three, four, five.

01:33.970 --> 01:36.760
We have five strings which are valid.

01:37.030 --> 01:37.360
Okay.

01:38.230 --> 01:39.130
So a brute force.

01:39.130 --> 01:44.860
way would be you generate all possible strings and then eliminate those which which are not valid.

01:45.340 --> 01:50.080
But let us think if we can come up with a better algorithm to solve this.

01:51.130 --> 01:54.910
So now let's try to break down this problem recursively.

01:55.000 --> 01:55.680
So what I want.

01:55.690 --> 01:59.050
I want to generate a string of length N, okay?

02:00.520 --> 02:03.160
I want to generate a string of length N.

02:03.160 --> 02:11.740
so what I can do is I can say okay, I will I can put the first bit the first letter as either one.

02:11.740 --> 02:13.720
Or I can put that as zero.

02:14.110 --> 02:14.380
I can.

02:14.420 --> 02:14.650
Okay.

02:14.980 --> 02:18.970
I'll put the first thing as one and I will count.

02:22.180 --> 02:27.880
Let me just put this thing like this and let me say I will put the first thing as zero.

02:28.840 --> 02:30.520
The first number is zero.

02:31.170 --> 02:32.890
What what is going to happen in this case?

02:33.670 --> 02:36.220
We are left with the remaining N minus one positions.

02:39.640 --> 02:42.430
We are left with remaining N minus one position.

02:42.670 --> 02:46.360
Here also we are left with remaining N minus one positions.

02:46.870 --> 02:52.090
What I can do, I have two options at the first index and we are trying to form sup problem.

02:52.990 --> 03:01.210
If you put the first number as zero, then you clearly know that the remaining sub problem can be solved.

03:02.230 --> 03:09.820
If I said the total number of ways form number of binary string without consecutive ones for this problem

03:09.820 --> 03:10.360
of size.

03:10.360 --> 03:16.210
N if this answer is a f(n), okay I can say this answer would be nothing but f of n minus one.

03:16.560 --> 03:16.810
Okay.

03:18.140 --> 03:20.480
Because you can put zero here, one here.

03:20.480 --> 03:21.200
It doesn't matter.

03:21.200 --> 03:22.130
You can put anything.

03:23.280 --> 03:24.180
That will not matter.

03:24.190 --> 03:32.760
But this sub problem will make sure that there are no consecutive ones in this array of size N minus

03:32.760 --> 03:32.970
one.

03:33.930 --> 03:35.250
But here there is a problem.

03:35.400 --> 03:41.160
If you put a one here, okay, there would be a consecutive one and that would lead to an invalid case.

03:41.210 --> 03:42.030
So what do you need to do?

03:42.060 --> 03:46.320
You need to say that this position would always be zero.

03:46.350 --> 03:50.970
If you have one at the first index, then the next index must be zero.

03:51.510 --> 03:52.290
Then what are you going to do?

03:52.890 --> 03:54.790
Now, this is a very similar problem.

03:54.810 --> 03:56.970
Now you have you have a fixed zero.

03:56.970 --> 03:59.280
Here you have a fixed a zero here.

03:59.490 --> 03:59.820
Okay.

04:00.360 --> 04:01.140
And what you can see.

04:01.500 --> 04:05.340
We can solve this problem, which is of the size N minus two.

04:06.930 --> 04:08.330
In a f of N minus two ways.

04:08.400 --> 04:08.610
Okay.

04:08.820 --> 04:14.160
So now it doesn't matter whether we put a zero here or one here, but this recursive property will make

04:14.160 --> 04:19.290
sure that we don't have consecutive ones in this array of N minus two.

04:19.290 --> 04:22.500
So we have no consecutive ones here.

04:23.400 --> 04:29.310
So what we can say f(N) nothing but sum of these to cases F(N-2) + F(N-1)

04:29.310 --> 04:34.440
so you can say and f(N-1) + f(N-2)

04:34.960 --> 04:39.660
What would be the smallest case if N is zero we can say one, the null array is one way

04:40.440 --> 04:43.200
If N is one, there are how many ways.

04:43.800 --> 04:44.580
There are two ways.

04:44.610 --> 04:44.900
Okay.

04:45.300 --> 04:47.670
Either we put it as zero or we put it as one.

04:48.090 --> 04:48.900
If N is two.

04:50.180 --> 04:52.800
We saw that there are three ways.

04:52.820 --> 04:56.540
So if you use the recurrence, that F of two is nothing.

04:56.540 --> 05:01.120
but f of N minus one that is F of zero, plus f of one.

05:01.580 --> 05:01.910
Okay.

05:02.540 --> 05:05.090
So this is coming to be how much 1 + 2

05:05.090 --> 05:05.630
That is three.

05:05.900 --> 05:06.440
That's great.

05:06.860 --> 05:07.340
What about.

05:08.500 --> 05:10.450
N = 3, so for N = 3

05:10.450 --> 05:12.880
We know we're making a call on 2 and 1.

05:13.450 --> 05:14.560
The three plus two is five.

05:14.560 --> 05:21.310
And we just saw the example that for, N equal to three we have five ways and for N equal to four it

05:21.310 --> 05:23.890
would be five plus three 8 ways and so on.

05:24.190 --> 05:26.380
So this is how you can easily solve this problem.

05:26.440 --> 05:28.000
You can use recursion.

05:28.450 --> 05:33.760
And if you know about a little bit about dynamic programming, you can top down or bottom UP DP

05:34.120 --> 05:36.780
to improve the complexity of the recursive solution.

05:36.790 --> 05:40.000
Okay, so what would be the complexity of the recursive solution?

05:40.450 --> 05:43.840
So you are making two calls at every node N minus one.

05:43.840 --> 05:44.710
N minus two.

05:45.040 --> 05:46.660
N minus three N minus four.

05:48.350 --> 05:54.740
And this is going to take order of how much two raise to power N because it is very same as

05:55.220 --> 05:57.980
fibonacci order of two raise to the power N time.

05:58.370 --> 06:03.500
But using memoization, this can be reduced to linear complexity as well.

06:04.080 --> 06:05.750
And using matrix 

06:05.750 --> 06:07.880
exponentiation, which you have already learned.

06:08.260 --> 06:10.220
Okay, you have already learned.

06:11.330 --> 06:12.860
But maybe if you have not learned, okay.

06:13.880 --> 06:20.120
Depending upon if you know your technique to solve linear occurrences, you can also reduce it down

06:20.120 --> 06:26.750
to order of K cube log N, so k is the number of terms on which this N is depending.

06:27.200 --> 06:27.530
Okay.

06:28.400 --> 06:32.120
And this is this is 2 in this case.

06:32.150 --> 06:37.580
So order of 8 into log of N this can be solved in logarithmic time as well.

06:37.610 --> 06:37.940
Okay.

06:38.750 --> 06:43.940
If you use this technique matrix exponentiation for linear occurrences.

06:45.400 --> 06:49.930
If you're learning the basics of data structures, you're not supposed to know this.

06:49.930 --> 06:54.240
But if you're doing competitive programming, you are supposed to know this technique.

06:55.370 --> 06:58.790
And this is the basic recursion complexity.

06:58.820 --> 07:01.370
If you use DP, it can be done in order of N.

07:01.700 --> 07:05.870
And using matrix exponentiation, it can be done in order of k cube.

07:06.710 --> 07:08.530
Log of N time.

07:09.110 --> 07:10.610
I hope that is clear to you.

07:10.610 --> 07:12.230
And that's all for this video.