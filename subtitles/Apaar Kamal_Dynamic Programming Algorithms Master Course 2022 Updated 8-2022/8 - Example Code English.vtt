WEBVTT

0
00:00.800 --> 00:01.490
Hello, everyone.

1
00:01.610 --> 00:02.570
So welcome back.

2
00:02.700 --> 00:09.680
And listen, I would be showing you some really wonderful codes that would like interest you to make

3
00:09.680 --> 00:13.790
your own personalized codes that would always help you in competitive programming.

4
00:14.450 --> 00:14.720
Right.

5
00:15.170 --> 00:17.070
So let's move on to my friend's code.

6
00:17.090 --> 00:19.930
So this was the very simple code that we saw.

7
00:19.940 --> 00:25.580
I would be using this code throughout the whole course and we would be like modifying and coding of

8
00:25.580 --> 00:28.910
other stuff in this code on the right that is the two codes.

9
00:29.000 --> 00:31.040
One is CP and the other is CP.

10
00:32.320 --> 00:32.980
Simple, right?

11
00:33.040 --> 00:34.660
Just personalized for me.

12
00:35.170 --> 00:42.280
cool!, now let's move on to the next code, which is one of my close friends code and his name is

13
00:42.280 --> 00:42.730
Saurabh 

14
00:43.860 --> 00:49.010
And yeah, so as you can see, guys, the code becomes a little fancier here.

15
00:49.020 --> 00:54.270
But yes, of course it is quite useful too, but not for everyone, right?

16
00:54.540 --> 00:57.210
Everyone has their own choices and their own preferences.

17
00:57.720 --> 01:02.430
Right So above we can see it is a commented out sanskrit shlok

18
01:02.790 --> 01:06.240
It might be his favorite shlok, or maybe this motivates him both.

19
01:06.370 --> 01:10.440
Accordingly, you can write your favorite lines of some particular poem.

20
01:10.440 --> 01:10.830
Or.

21
01:11.860 --> 01:14.080
From a motivation quote by someone.

22
01:14.380 --> 01:15.110
Anything, right?

23
01:15.130 --> 01:15.430
Whatever.

24
01:15.430 --> 01:15.760
You wish.

25
01:15.760 --> 01:16.360
It's your code.

26
01:17.500 --> 01:19.970
Then of course you need to comment it out guys.

27
01:19.990 --> 01:22.360
Otherwise it will given compilation error.

28
01:22.840 --> 01:29.460
After this, what happens is that just a single header file for all the other header files that I used to.

29
01:29.950 --> 01:32.470
Then again, namespace 

30
01:32.890 --> 01:35.020
After this, we can see so many defines over here.

31
01:35.020 --> 01:35.320
Right?

32
01:35.440 --> 01:39.400
So I'll show you all these defines one by one, and I tell you how those work.

33
01:39.790 --> 01:41.500
And, yeah, so these.

34
01:41.500 --> 01:43.890
He's a regular competitive programmer.

35
01:43.900 --> 01:45.690
with like to 2-3 years of experience.

36
01:45.700 --> 01:50.620
So of course he has made this code after thinking after like having a good experience.

37
01:50.620 --> 01:50.890
Right.

38
01:51.460 --> 01:55.810
So after having a good experience, he might have thought that these are the things that he would be

39
01:55.810 --> 01:58.360
using in his daily life while coding it out.

40
01:59.140 --> 02:04.510
Coding this stuff so for set he's using si, pb, f,s so the top four parts.

41
02:04.510 --> 02:05.950
are like the same as I.

42
02:08.070 --> 02:12.060
Mentioned in my cpsimple the top four are the same.

43
02:12.540 --> 02:20.820
And then this is set and then vector int and pair int , then vector of pair and vector of pair pair.

44
02:21.570 --> 02:22.710
And there are a lot of things.

45
02:22.710 --> 02:23.400
It's a map.

46
02:23.400 --> 02:27.130
Map of pairs, set, set of pairs, then he's defined endl as "\n".

47
02:28.050 --> 02:33.240
So I'll be telling you the differences between endl which is end line and "\n", which is moved to

48
02:33.240 --> 02:34.410
the next line.

49
02:34.590 --> 02:40.770
Now both of them are different things, and I'll be discussing this in more detail in the section of

50
02:40.770 --> 02:41.640
policy based.

51
02:42.210 --> 02:48.840
Okay, not policy based interactive problems, section in the course later so there are interactive

52
02:48.840 --> 02:53.010
problems in that section will be covering this in detail what is endl and "\n ", what the differences

53
02:53.010 --> 02:53.610
between them.

54
02:54.090 --> 02:59.760
Then we generally use size right that v.size() , I want to iterate over a vector I'll iterate till

55
02:59.760 --> 03:00.630
size of the vector.

56
03:01.110 --> 03:07.800
So for that he is using using this small function, then all is like begin to end whenever we used

57
03:07.800 --> 03:10.290
to like sort a vector or other things.

58
03:10.290 --> 03:14.100
So it's like start from beginning go till end sort

59
03:14.100 --> 03:14.650
All right.

60
03:14.650 --> 03:20.200
So instead of writing sort p.begin() to p.end() just write sort, all right.

61
03:20.220 --> 03:23.190
And all will be replaced by this particular name.

62
03:23.550 --> 03:27.210
So it's just a double has been defined as long double.

63
03:27.210 --> 03:31.440
So you don't want to take any of this in the precision values, right?

64
03:31.480 --> 03:34.680
Like while calculating some long double values or answers.

65
03:35.130 --> 03:36.330
Then he has Max.

66
03:36.330 --> 03:37.980
priority queue, min priority queue

67
03:37.980 --> 03:43.260
And instead of writing all of this in a particular coding round, because of course, as I told you,

68
03:43.290 --> 03:44.610
he's lot of these.

69
03:44.700 --> 03:47.490
He has a lot of experience and he's a pretty good coder.

70
03:47.490 --> 03:50.460
And he he likes to do fancy stuff, of course.

71
03:50.550 --> 03:50.910
Right.

72
03:50.910 --> 03:53.790
And so he's just trying to save his time.

73
03:54.210 --> 03:57.490
Let me have this bug function I'll tell you how this works in this video itself.

74
03:57.510 --> 04:04.170
So it's a recursive function and it takes multiple arguments and I'll show you how it works you can also

75
04:04.170 --> 04:10.380
use that's pretty good I also use that and then it is print so what is here.

76
04:10.860 --> 04:14.490
He is simply printing a particular vector then print one is.

77
04:15.740 --> 04:16.520
He simply.

78
04:17.480 --> 04:21.350
printing a pair right, a pair of vector which has a first and second.

79
04:21.350 --> 04:26.060
And then what is print2,  print2 is like from X to Y i.e for a particular range.

80
04:26.060 --> 04:30.670
print an array so there are  lot of stuffs that you might be near to these guys.

81
04:30.680 --> 04:33.050
Of course you might not be getting it right now.

82
04:33.170 --> 04:34.220
This is a power function.

83
04:34.220 --> 04:37.310
We'll be discussing this in more detail in the mathematics section.

84
04:37.940 --> 04:38.360
And.

85
04:39.320 --> 04:39.620
Yeah.

86
04:40.610 --> 04:41.960
Well, where was I?

87
04:41.990 --> 04:47.570
Yeah, I was telling you that you might not be doing all this stuff that he has defined a way.

88
04:47.570 --> 04:54.690
But just and just as I said, I would be discussing a lot of examples of different codes that are there.

89
04:54.710 --> 04:56.960
So it's his personalized codes.

90
04:57.530 --> 05:01.280
So whenever he codes, he uses vpi, pii, vi, si.

91
05:01.640 --> 05:04.820
So it should be engraved in your mind if you want to use a a MAP, MPI.

92
05:05.120 --> 05:05.630
It's for him

93
05:05.630 --> 05:05.870
Right.

94
05:05.870 --> 05:08.470
But it's not necessarily for you to do it, too.

95
05:08.900 --> 05:15.270
guy's what happens is when these things like come in the back of your mind, then during the interviews

96
05:15.290 --> 05:21.080
also it simply slips out of our hands we code it like mpi  Vi in the interviews, which

97
05:21.080 --> 05:23.120
is not a good practice, as I already told you.

98
05:24.040 --> 05:24.330
Right.

99
05:25.060 --> 05:25.630
So.

100
05:26.600 --> 05:29.630
It is a power function he has defined because he might be using it a lot.

101
05:30.050 --> 05:32.230
And then this is a good template.

102
05:32.240 --> 05:33.230
You should use this.

103
05:33.330 --> 05:34.670
I'll tell you how this works.

104
05:34.940 --> 05:38.390
As we know, there's ff, okay, I'll come to this later.

105
05:38.390 --> 05:41.270
And after this what happens, he has defined a constant int

106
05:41.270 --> 05:42.530
It's really useful.

107
05:42.530 --> 05:50.360
I'll be using this throughout the whole course too, right  a constant int  and whenever we move on to the old stuff,

108
05:50.660 --> 05:52.130
I will be like simply.

109
05:53.110 --> 05:55.720
Adding particular things in this code right.

110
05:56.570 --> 05:59.280
Well, then he has a function called solve.

111
05:59.300 --> 06:00.560
So let's see, how does this work?

112
06:00.580 --> 06:03.250
So this is a this is another.

113
06:04.600 --> 06:09.700
trick to like take bulk input and write bulk output.

114
06:09.700 --> 06:11.710
So it helps to save your time.

115
06:12.310 --> 06:14.290
It reduces the time limit to something.

116
06:14.290 --> 06:16.840
What happens when you're trying a long, challenging codechef

117
06:18.160 --> 06:24.000
There's a very strict time limit for somebody, the problems so to overcome those particular big

118
06:24.150 --> 06:24.820
time limits.

119
06:25.030 --> 06:26.470
You can use this particular function.

120
06:26.840 --> 06:30.330
It will like take big bulky input and give the bulk output again.

121
06:30.610 --> 06:31.360
I'll be using.

122
06:31.630 --> 06:33.340
I'll be explaining all of this in the.

123
06:35.340 --> 06:36.660
Interactive Problems Guide.

124
06:37.170 --> 06:42.690
So I make a section called Interactive Problems in which I'll be telling you what interactive problems,

125
06:42.690 --> 06:44.940
how to overcome those interactive problems.

126
06:44.940 --> 06:46.740
And let's bring you the coding stuff.

127
06:46.740 --> 06:47.490
They are only right.

128
06:47.910 --> 06:49.950
This has already been told to you.

129
06:50.520 --> 06:51.180
What he does is.

130
06:51.180 --> 06:53.900
Is like to check this that.

131
06:54.820 --> 06:55.360
He likes.

132
06:55.390 --> 06:58.330
Okay, so we have this c e r r.

133
06:58.360 --> 06:59.680
What is this c error?

134
06:59.770 --> 07:04.630
So as we know, we have certain terms which are let me right here it is cin.

135
07:05.710 --> 07:08.410
So the other term is cout 

136
07:08.410 --> 07:10.420
So these are for standard input and output.

137
07:10.720 --> 07:14.540
But then he has this thing called cerr, which is C error.

138
07:14.800 --> 07:21.430
Right? not input not output but error, what is C  error do C error does not does not write in the standard

139
07:21.430 --> 07:24.820
output c error does not read from standard input.

140
07:24.830 --> 07:26.380
So it's a different stream overall.

141
07:27.010 --> 07:29.260
So is this standard error stream.

142
07:29.260 --> 07:30.310
So let me build these guys.

143
07:30.310 --> 07:31.240
Let's build this code.

144
07:31.330 --> 07:32.170
So I build this code.

145
07:32.170 --> 07:39.940
So what we can see is that he has got a runtime that this was the time that my code took to run

146
07:40.420 --> 07:48.460
who started a clock at this particular location called 69 and it's 75 after going in this all function.

147
07:48.460 --> 07:51.310
So I'll explain you why he has done this the t nad other things

148
07:51.580 --> 07:52.120
No problem.

149
07:52.540 --> 07:58.360
These are simply printing out like what is the total time my code took to ran the above stuff?

150
07:58.870 --> 08:00.130
So again, affensive stuff.

151
08:00.130 --> 08:01.270
You can use it, you can not.

152
08:01.270 --> 08:04.120
You may right but do not print in the output stream.

153
08:04.480 --> 08:10.660
Always use the standard error editor steam rate if you want to do this because in output stream a judge

154
08:10.660 --> 08:16.910
will like an online judge will compare this with the given output and then you will face various problems

155
08:16.910 --> 08:17.710
there later.

156
08:17.710 --> 08:21.280
Don't use it or what you can do is you can simply like.

157
08:22.230 --> 08:26.130
Sometimes what happens is you're writing a code and you got stuck in it.

158
08:26.400 --> 08:28.230
You want to check out the books?

159
08:28.860 --> 08:30.540
They do check out the bus.

160
08:30.540 --> 08:32.610
What you're going to do is you can have a third file.

161
08:33.000 --> 08:36.900
It is after you open a third file, let's say at Adobe XD.

162
08:39.450 --> 08:42.630
What are you going to do is you can write to that file and what do you have to do?

163
08:42.780 --> 08:44.520
What you can write, it's standard at it.

164
08:45.580 --> 08:47.230
Well, guys, I hope you're getting this.

165
08:47.230 --> 08:51.540
So I'm opening a third file called Standard Error so I can make a third file called editor.

166
08:52.090 --> 08:54.940
And I didn't write standard error to that.

167
08:55.240 --> 08:55.530
Right.

168
08:55.960 --> 08:57.070
So you can do it yourself.

169
08:57.790 --> 08:58.600
It's not a big deal.

170
08:58.630 --> 09:01.960
All has been already explained to you or you can use it this way.

171
09:02.250 --> 09:07.270
Okay, so now let's come on to this party line number 71, 72 and 73.

172
09:07.270 --> 09:08.520
So why is this comment out?

173
09:08.530 --> 09:10.110
Because there are no test cases.

174
09:10.340 --> 09:15.820
Whenever you give contest, when you try to give contests or you will see that there are many test cases.

175
09:16.420 --> 09:22.090
So it's like initially and then they are given five as a number of testcases and then you have five

176
09:22.510 --> 09:26.140
times the input, right,  you want your code to run on five different test cases.

177
09:26.440 --> 09:29.980
Let's say in the input I give five as a test cases.

178
09:29.980 --> 09:35.470
And in every test case I'm taking an integer let's say two, three, four, five, six, these are the five

179
09:35.470 --> 09:36.880
integers in every test case.

180
09:37.540 --> 09:40.330
I want my I want my code to run like five times.

181
09:40.330 --> 09:41.920
So what I do is I simply comment it out .

182
09:42.520 --> 09:43.300
What will this do?

183
09:44.550 --> 09:46.270
Earlier t was one.

184
09:46.300 --> 09:46.990
No problem.

185
09:46.990 --> 09:53.710
Then I overwrite t by taking input from the input.txt so t becomes five right now what happens is

186
09:53.710 --> 09:58.870
this solve function it runs five times so here whar I'll do is take n, let's input n

187
10:00.300 --> 10:01.740
And let's print n.

188
10:03.950 --> 10:04.160
Right.

189
10:05.350 --> 10:10.740
What I get is two, three, four, five, six, five why because this while loop ran five times and for all the 

190
10:10.740 --> 10:15.320
five times, solve function was called, whenever this solve function was called 

191
10:15.330 --> 10:20.370
I took an integer as an input. Let's say you have been given an array as an input

192
10:20.370 --> 10:27.000
and you have only two test let's say 2 and the length of array is 3, so 1 2 3

193
10:27.000 --> 10:30.090
is the first array, length of the other array is five so 1 2 3 4 5

194
10:30.540 --> 10:34.140
And what do you want to do is you want to reverse the array and print for each of the testcases.

195
10:34.890 --> 10:36.840
right, how can you do that again?

196
10:36.840 --> 10:37.410
Same thing.

197
10:38.160 --> 10:40.020
If I comment it out, guys, what does this mean?

198
10:40.650 --> 10:43.200
There are no test cases that t is equal to one.

199
10:43.200 --> 10:49.080
You have only one input, so you won't take anything as an input and just calls solve function once all

200
10:49.080 --> 10:52.710
the coding stuff is done in this solve function, not in the main function for him.

201
10:54.060 --> 10:55.440
What I do is I simply.

202
10:57.030 --> 10:57.390
int n

203
10:58.720 --> 11:00.790
Then let's take this as an input.

204
11:03.490 --> 11:05.650
Let's take an array for length n

205
11:06.970 --> 11:08.650
Okay, so you might be confused.

206
11:09.130 --> 11:13.450
So what I'm done is I have made a sublime snippet for for function right.

207
11:14.510 --> 11:15.320
So that's it.

208
11:15.890 --> 11:17.930
Or what I can do is I can use this to print.

209
11:18.660 --> 11:19.520
But right now, I'm just.

210
11:20.640 --> 11:21.390
Going my way.

211
11:22.020 --> 11:25.290
so, let's input array so I've taken this array as an input.

212
11:25.290 --> 11:26.550
And now reverse the array 

213
11:27.180 --> 11:29.160
So how to reverse the array

214
11:29.160 --> 11:31.980
a,a+n, let's pass the array to this and 

215
11:36.400 --> 11:36.700
Yeah.

216
11:37.420 --> 11:37.810
cout << a[i]

217
11:39.480 --> 11:40.380
Let's give it space.

218
11:40.620 --> 11:42.840
And after all of this has been printed , let's.

219
11:44.360 --> 11:44.840
Give a.

220
11:45.880 --> 11:49.930
\n so guys, if he codes it out, he won't be writing \n here.

221
11:50.140 --> 11:50.920
He won't be like.

222
11:52.480 --> 11:58.390
printing it all of it he would be simply writing printa.

223
11:59.740 --> 12:00.070
Right.

224
12:00.550 --> 12:01.420
We can also try that.

225
12:01.420 --> 12:02.560
Not a big issue.

226
12:03.790 --> 12:04.320
So.

227
12:04.900 --> 12:05.160
Yeah.

228
12:05.360 --> 12:06.620
Okay, so there's a problem here.

229
12:06.660 --> 12:09.460
What I what I'm getting is I'm getting one three in output.

230
12:09.850 --> 12:11.090
Okay, so I commented it out.

231
12:11.110 --> 12:11.980
So what does this mean?

232
12:11.980 --> 12:17.470
That there's only one testcase and what is the testcase it is, 2 

233
12:18.590 --> 12:20.220
So I haven't taken that as an input.

234
12:20.240 --> 12:22.070
So 2 is the length of the array guys

235
12:22.610 --> 12:23.570
It's a length of the array

236
12:23.830 --> 12:26.470
Then in the array is taken as an input, which is of length 2.

237
12:26.480 --> 12:28.010
So it is three and one as an input.

238
12:28.460 --> 12:34.280
After that I reverse the array,  so 3 1 was the input, so teh array reverse is 1 3 and  I am printing the array which is 

239
12:34.280 --> 12:35.390
one three, right.

240
12:35.540 --> 12:37.610
So instead of that, let's comment it out.

241
12:38.680 --> 12:39.430
And let's build this.

242
12:40.350 --> 12:42.630
so, right now you might be thinking that it's a big stuff.

243
12:42.630 --> 12:45.120
It's so much, but it's not.

244
12:45.120 --> 12:52.170
Actually, if you like sit for like half an hour and you try it again and again, you'll get friendly

245
12:52.170 --> 12:52.500
with it.

246
12:52.980 --> 12:53.240
Right.

247
12:53.760 --> 12:58.860
And I would like I would suggest you to make a solve function.

248
12:58.860 --> 13:01.240
And solve testcase like this

249
13:01.260 --> 13:01.650
Right.

250
13:01.650 --> 13:03.630
So let me change it in my code only.

251
13:04.170 --> 13:05.790
Let's do this and.

252
13:07.160 --> 13:07.730
void solve

253
13:09.010 --> 13:12.130
right, so this will be my new snippet if I want to have

254
13:15.430 --> 13:16.420
Different testcases.

255
13:16.480 --> 13:16.750
Right?

256
13:16.750 --> 13:22.390
But right now it's I'm just doing things here for teaching purposes, for like educational purposes.

257
13:22.870 --> 13:27.790
I won't be like saving it because I won't be using many testcases here for that purpose.

258
13:27.790 --> 13:30.670
For test cases purposes, I've already told you what's the best way.

259
13:31.180 --> 13:37.030
It is always good to write a function, to make a method and solving that method.

260
13:37.330 --> 13:41.470
If you code everything in int main, your code would look pretty bad.

261
13:41.980 --> 13:49.000
And if the code looks very bad, like and let's say after some particular time your code is not even

262
13:49.000 --> 13:51.220
right, your code is not giving a right answer.

263
13:51.670 --> 13:54.550
Then you will face a lot of difficulty in like.

264
13:55.680 --> 13:57.150
Fixing it, fixing the code.

265
13:57.650 --> 13:57.840
Right.

266
13:57.870 --> 14:03.960
So what I would suggest to you is always like, if you want to go do something new, just write a new

267
14:03.960 --> 14:04.680
method for it.

268
14:04.680 --> 14:07.590
Call that method, give input to take output from it.

269
14:07.860 --> 14:09.360
It becomes easier to debug.

270
14:09.360 --> 14:10.890
It becomes easier to understand.

271
14:11.400 --> 14:11.690
Right.

272
14:12.300 --> 14:14.700
And I know it's not for everyone.

273
14:14.700 --> 14:15.200
It's for you.

274
14:15.210 --> 14:16.740
And it will become easier for you.

275
14:16.770 --> 14:17.610
It won't be right.

276
14:18.420 --> 14:21.390
So this was about reversing and other  stuff.

277
14:22.200 --> 14:27.870
So let's say you guys, as I said, I would be explaining you this template to this is a debugging template,

278
14:27.870 --> 14:28.100
right?

279
14:28.110 --> 14:29.430
Let me show you here.

280
14:29.550 --> 14:35.040
He has defined a bug where he has called this function once and is passing these variable arguments

281
14:36.000 --> 14:37.760
into this function __F

282
14:37.920 --> 14:38.200
Right.

283
14:38.370 --> 14:40.700
So it's a recursive function guys I'll show you.

284
14:40.770 --> 14:46.560
See this is a function and here it is calling f again right, so it's a recursive function.

285
14:47.680 --> 14:50.590
If you want to do like going deep inside, you can go.

286
14:50.650 --> 14:51.520
It's not a big deal.

287
14:52.150 --> 14:55.480
But what happens from this is see, let me show you.

288
14:55.900 --> 14:57.580
Let's say 've one test case and 

289
14:58.750 --> 14:59.050
Here.

290
14:59.050 --> 15:01.000
I have two variables.

291
15:01.000 --> 15:02.380
10 and 20

292
15:02.860 --> 15:04.980
Let's take them as inout in n,

293
15:04.990 --> 15:05.290
M.

294
15:08.740 --> 15:09.570
So what happens, guys?

295
15:09.580 --> 15:12.250
I can print n and m

296
15:12.550 --> 15:17.470
But guys, what happens is when you're trying to debug your code, when you're struggling to code,

297
15:17.470 --> 15:20.080
you want to print many values together.

298
15:20.770 --> 15:22.600
At this particular point of time, I is this.

299
15:22.600 --> 15:26.800
j is This dpij is this the cost value is  this other stuff, right?

300
15:27.370 --> 15:33.400
So for that, we cannot use cout again and again like cout cout cout , and then it will take a lot of time

301
15:33.400 --> 15:34.390
and then we'll remove it.

302
15:34.390 --> 15:35.680
It will again take a lot of time.

303
15:35.680 --> 15:38.010
So for ease of use, right.

304
15:38.020 --> 15:38.560
So for.

305
15:39.630 --> 15:42.240
Like, well, not taking a lot of headache.

306
15:42.360 --> 15:47.550
What we do is we define a recursive function and we just call it like a bug.

307
15:47.820 --> 15:49.620
Let's say I'm passing n to it.

308
15:50.250 --> 15:55.950
What will it do is it will just print the value of n that n is this right.

309
15:56.520 --> 16:03.060
So that's defined here only get this this particular you can change this you can make it a dash, you

310
16:03.060 --> 16:05.730
can make it , you can make it whatever you wish.

311
16:05.740 --> 16:07.440
You can change it according to you.

312
16:07.440 --> 16:07.790
Right?

313
16:08.100 --> 16:09.570
Similarly, you can change it over here.

314
16:09.570 --> 16:10.500
You can change it over here.

315
16:10.500 --> 16:10.760
Right.

316
16:11.100 --> 16:13.790
And let me show you why is it ending right.

317
16:14.490 --> 16:19.870
Let's say I'm printing two values now n m and so I just put a comma and pass the variable to bug.

318
16:19.890 --> 16:26.370
So this function bug a bug is actually a define and it is calling in __F and __F is

319
16:26.370 --> 16:27.600
taking multiple.

320
16:28.550 --> 16:29.850
arguments.

321
16:30.560 --> 16:31.240
You can see this.

322
16:31.250 --> 16:32.510
It's a multiple argument thing.

323
16:32.960 --> 16:35.710
And here I can pass on other variables too.

324
16:35.720 --> 16:36.530
If I have some.

325
16:36.860 --> 16:38.000
Whenever I'll be like.

326
16:41.390 --> 16:42.100
What do you say?

327
16:42.340 --> 16:42.610
Yeah.

328
16:42.620 --> 16:46.720
So whenever I'll be like, I stuck at some place, I want to print out new things.

329
16:46.930 --> 16:47.620
New stuff.

330
16:47.920 --> 16:49.420
check , what is the value of this?

331
16:49.420 --> 16:58.120
This if I and j is this again, like simply add commas and print stuff here and like check them at once

332
16:58.570 --> 17:00.520
instead of writing cout again and again.

333
17:00.790 --> 17:07.090
And whenever I submit the code I'll simply comment it out by pressing control and slash right, forward

334
17:07.090 --> 17:07.420
slash.

335
17:09.010 --> 17:09.240
Cool.

336
17:09.670 --> 17:12.960
So these are like some small tips and tricks.

337
17:12.970 --> 17:18.540
And for competitive programming, they are really handy and they will help you a lot.

338
17:18.550 --> 17:21.320
So of course it's like a bonus thing for you guys.

339
17:21.340 --> 17:25.250
It's out of the course content, right?

340
17:25.300 --> 17:26.770
Out of data structures and algorithms.

341
17:26.770 --> 17:32.590
But these are some small, small things which saves you a lot of time because let's say, let's say.

342
17:33.130 --> 17:39.930
Let's like call it mathematically, let's say these small things are saving one minute of the day.

343
17:40.450 --> 17:41.470
Okay, just one minute.

344
17:41.470 --> 17:45.790
So and you're doing cp for an year so you it's actually saving 365 minutes.

345
17:46.920 --> 17:47.370
per year

346
17:47.370 --> 17:51.570
And of course, guys, believe me, this would be saving a lot of time.

347
17:52.050 --> 17:53.400
A lot of time.

348
17:53.640 --> 17:53.990
Right.

349
17:54.540 --> 17:59.520
Whenever you go inside competitive programming, you solve some problems and give some contest.

350
18:00.450 --> 18:00.880
cool guys.

351
18:01.080 --> 18:02.640
So that's it.

352
18:02.820 --> 18:05.250
see you in the next part, thank you for attending this lecture.