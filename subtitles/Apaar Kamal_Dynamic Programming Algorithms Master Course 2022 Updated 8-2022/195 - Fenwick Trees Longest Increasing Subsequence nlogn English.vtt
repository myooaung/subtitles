WEBVTT

00:01.330 --> 00:06.460
Let's begin with the longest and creating subsequent problem and let's see how to optimize its complexity.

00:06.820 --> 00:12.340
So we have seen a solution in which what happens is we we have the EPA and the thing with max of lipids

00:12.340 --> 00:16.030
and diesel as a name, whereas EGY is less than equal to it.

00:17.260 --> 00:22.840
So let's say for the sake of our understanding, let's say all these eyes are distinct.

00:24.220 --> 00:24.730
Distinct.

00:25.330 --> 00:29.410
That means all of them are unique and have to find the longest increasing subsequent rate.

00:29.800 --> 00:33.790
So before moving on to this, let me give some space.

00:35.710 --> 00:36.100
Okay.

00:42.380 --> 00:44.090
And some more space.

00:44.810 --> 00:45.440
But --.

00:48.310 --> 00:49.420
Full and.

00:52.100 --> 00:54.010
So this is one of the examples.

00:54.020 --> 00:56.240
And let me just copy this example quickly.

00:56.420 --> 01:02.780
And then what we'll do is we will try to have a will try to apply something very.

01:03.980 --> 01:06.440
Interesting on this eight and.

01:08.110 --> 01:08.380
Yeah.

01:08.530 --> 01:11.560
So what we can do is we have this simple recursive relation.

01:11.710 --> 01:14.320
That means I have to find out the maximum of some previous values.

01:14.650 --> 01:14.870
But.

01:15.280 --> 01:15.600
Or.

01:15.640 --> 01:17.170
But for those previous I lose.

01:17.170 --> 01:20.830
I don't have to find out the maximum of of all the previous release rate.

01:21.220 --> 01:25.210
I have to find the maximum of the indexes which are on the left of it.

01:25.630 --> 01:26.140
Where.

01:27.210 --> 01:33.900
E.g. eight where AJ is less integral to it because there can be some for example for this one.

01:34.230 --> 01:35.550
We can see that part is greater.

01:35.760 --> 01:37.650
So I don't want to DP evaluate.

01:37.920 --> 01:40.260
I don't want it for 22.

01:40.260 --> 01:41.670
I don't want this to be value.

01:41.670 --> 01:43.690
I don't want it to be value added.

01:44.280 --> 01:46.050
What can I do to avoid this?

01:46.260 --> 01:53.280
What can I do to avoid using the deep values of the elements which are greater than the current element?

01:54.390 --> 01:54.660
Eight.

01:54.990 --> 01:58.080
Just think about it for a moment, because of course, I'll tell it.

01:58.530 --> 01:59.520
But yeah.

02:00.450 --> 02:01.380
Just think about it once.

02:02.170 --> 02:05.640
Well, so let's understand this.

02:05.910 --> 02:08.940
And what we will do is I will try to go in and order.

02:09.210 --> 02:09.960
This is important.

02:10.950 --> 02:17.330
So this this thing that I'm going to tell you, I have personally used it in more than 23 problems.

02:18.000 --> 02:19.620
And those are very good problems.

02:20.460 --> 02:23.950
But in this, what will happen is I try to go in and order.

02:24.570 --> 02:26.100
What is the meaning of going in?

02:26.100 --> 02:33.090
And order means whinging in order means that I will not start updating the deep values on the left.

02:33.510 --> 02:38.550
I start updating DP values from the way in the way I want it to be updated.

02:38.550 --> 02:38.850
Right.

02:39.060 --> 02:45.120
For example, let me quickly copy this once more and then I'll show you an example.

02:49.700 --> 02:57.720
But so let's try to formulate some deep values and then we will understand that what I actually mean.

02:58.350 --> 03:04.770
So we know that for any element, for adding element I, what I want is I want, I want, let's say

03:04.770 --> 03:09.570
for any element, I want some maximum of some previous values for some previous range.

03:09.990 --> 03:17.370
But what if I see that only those values are updated on the left of it, which are smaller than the

03:17.370 --> 03:18.090
current element?

03:18.810 --> 03:23.400
Let's see, if only those values are updated, then I'll get the maximum rate and then I get the correct

03:23.400 --> 03:23.910
maximum.

03:24.480 --> 03:27.150
So let's say initially the whole array is filled with zero.

03:28.250 --> 03:28.670
The hole.

03:28.670 --> 03:30.580
This is a deep hole.

03:30.920 --> 03:35.300
And just try to understand what I'm trying to explain here, because it's very important.

03:35.570 --> 03:40.820
And then what I'll do is I'll start with the smallest element, and then I'll move on to some bigger

03:40.820 --> 03:41.270
elements.

03:41.660 --> 03:43.520
Well, so what is the smallest element in the array?

03:43.520 --> 03:45.530
Let me write it in increasing order.

03:45.620 --> 03:47.990
So we have seven, eight, nine.

03:48.530 --> 03:49.790
Then I think it is 15.

03:51.130 --> 03:56.830
Never need 915 and 2223.

03:57.550 --> 03:59.380
We have 2223.

03:59.590 --> 04:01.900
We have one more 23 and.

04:04.920 --> 04:05.130
So said.

04:05.160 --> 04:06.660
I know we are just considering that.

04:07.890 --> 04:11.760
All the elements are unique to let me just make it 20 foot.

04:12.710 --> 04:15.920
Well, we have 124 and 49.

04:16.960 --> 04:18.130
We have 49 over here.

04:19.500 --> 04:21.630
Horse race, gender, and that is done.

04:21.960 --> 04:23.010
We have 28.

04:24.410 --> 04:26.240
2830.

04:28.280 --> 04:33.410
1044, 40, 44, 49, 40, 44 and 49.

04:34.070 --> 04:35.900
Well, you know what I try to do?

04:35.930 --> 04:38.720
I'll try to move in an order in easily.

04:38.730 --> 04:39.800
My address will be zero.

04:39.950 --> 04:42.800
And then I'll try to find the IP values of seven.

04:43.340 --> 04:45.010
What is the deep value of seven for?

04:45.020 --> 04:48.020
To calculate the deep value of seven, which is on index zero.

04:48.050 --> 04:55.150
What I want is I want the minimum of all those JS which are on left of it, and where it is less than

04:55.790 --> 04:57.200
that is less than seven.

04:57.350 --> 04:59.360
So we can see that seven is already on the.

05:00.320 --> 05:01.820
I left most part of this area.

05:02.120 --> 05:03.800
That means nothing of that would work.

05:03.800 --> 05:04.070
Right.

05:04.310 --> 05:09.310
And I have to add, plus one already had eight because of whatever the mix among them we have to add

05:09.320 --> 05:09.680
plus one.

05:09.690 --> 05:10.370
That's the whole legal.

05:11.480 --> 05:15.680
So what I do this for the seven I simply updated by one because there's nothing on the left of it.

05:15.680 --> 05:17.750
I don't have to find anything maximum.

05:18.200 --> 05:21.220
Now let's go on to this eight before this.

05:21.230 --> 05:23.990
It this eight is on which index it's on.

05:25.540 --> 05:30.350
Zero window three turtlenecks though this eight isn't hard index so they know their time.

05:30.350 --> 05:33.880
One third index over here would look for this.

05:33.880 --> 05:34.250
Eight.

05:34.270 --> 05:39.640
What I want is I want the maximum of the previous DPI values data field.

05:39.760 --> 05:40.770
So what is the maximum?

05:40.960 --> 05:42.430
Whatever it is for right now.

05:42.520 --> 05:43.090
It is one.

05:43.570 --> 05:44.600
I hope you are getting this.

05:44.620 --> 05:48.520
Why am I only getting one as the maximum in this case?

05:49.000 --> 05:49.420
Because.

05:50.380 --> 05:52.720
Only seven was four and seven was less than it.

05:52.840 --> 06:00.400
So for any element in this, let's say 23, let's I want 23 and if I want to find note of the maximum

06:00.400 --> 06:04.980
of whatever it is on the left return to Trinity P values only these value would be filled.

06:05.380 --> 06:05.710
Correct.

06:05.830 --> 06:09.820
So these value can be anywhere can be on left, on D3, on right from D3.

06:10.060 --> 06:12.370
But I'm just taking the maximum on the left of it.

06:12.850 --> 06:18.630
Eight which will guarantee two things can maximum on the left will guarantee this that these less than

06:18.640 --> 06:25.060
I and going in in order filling these deep values in an order we get into this that AJ is less than

06:25.060 --> 06:31.300
the eight only but only those is there deep values for eight for example in this case for eight I can

06:31.300 --> 06:36.670
see that the maximum to be values one eight and that's coming from seven, of course, and I simply

06:36.670 --> 06:38.890
ability to do it.

06:38.900 --> 06:40.660
Now let's move on to the next, which is nine.

06:40.660 --> 06:41.830
So nine is over here.

06:41.920 --> 06:43.000
It is on index nine.

06:44.340 --> 06:45.570
What a Nixon word I want is.

06:45.570 --> 06:46.530
I want the.

06:47.930 --> 06:49.760
Maximum of these values.

06:50.540 --> 06:51.560
Maximum on the left.

06:52.080 --> 06:56.510
So as we can see, whatever elements are less than nine, only those values are free.

06:57.230 --> 06:58.890
That means seven is fairly disputed.

06:58.970 --> 07:00.710
And what does the maximum these two it is two.

07:01.200 --> 07:02.840
What will be the value for nine?

07:02.840 --> 07:05.660
It will be the maximum on whatever is on the left of it.

07:05.660 --> 07:06.170
Plus one.

07:07.080 --> 07:07.450
Correct.

07:07.470 --> 07:08.370
So it will be three.

07:09.120 --> 07:13.650
I hope you are seeing that the correct liberals are getting it because we are operating in an order.

07:14.340 --> 07:17.220
Let's move to the next one, which is 15 vs 15.

07:17.760 --> 07:20.760
The last one before 15 one.

07:20.760 --> 07:22.070
The maximum on the left of it.

07:22.080 --> 07:23.760
What is the maximum on the left over this.

07:23.760 --> 07:24.540
One, two, three.

07:25.150 --> 07:25.920
These are maximum.

07:25.920 --> 07:27.920
So the answer will be 48.

07:28.140 --> 07:31.030
And finally, I want to go on to the just 22.

07:31.050 --> 07:32.340
So this is an interesting case.

07:32.610 --> 07:34.680
This I know we are on five.

07:35.070 --> 07:36.420
We want to max on the left.

07:36.770 --> 07:37.530
It's right now.

07:37.530 --> 07:42.960
You can see that we are not considering those elements which are also less than 22, but they are on

07:42.960 --> 07:43.530
the right of it.

07:43.530 --> 07:44.220
We don't want them.

07:44.580 --> 07:48.360
We only want the maximum for all those elements which are on the left of it.

07:49.560 --> 07:54.290
And by going in order, this guarantees that only those values are filled.

07:54.310 --> 07:57.960
Those values are updated in the deep area, which are smaller than the current.

07:58.680 --> 07:59.400
What is the maximum?

07:59.400 --> 08:01.460
Just one plus one will be three.

08:01.830 --> 08:06.630
So you can see this and finally you can, you know, fill the whole value in this way.

08:07.350 --> 08:07.640
Correct.

08:07.650 --> 08:13.680
So this is not a very tricky stuff, but it is a very important rate because.

08:14.590 --> 08:21.010
Segment will only give me a range of range, a range gradient range update rate and a point upgrade

08:21.010 --> 08:21.370
as well.

08:21.710 --> 08:22.820
What a range quality.

08:23.380 --> 08:27.430
We don't want that range to be filled with some other values that I don't need.

08:27.940 --> 08:32.590
I will only build those values we need in those ranges and ask for the answer.

08:33.730 --> 08:37.680
So in that way you can, you know, maintain an order and all this.

08:37.910 --> 08:44.470
So for every index, what I'm doing is mostly I'm trying to going in order and going in order.

08:44.470 --> 08:50.350
What I have to do is I have to actually make these elements as a pair sard them and go according to

08:50.350 --> 08:55.960
the indexes after starting them and then follow the values over here, the starting, then build again,

08:55.960 --> 08:56.710
log in time.

08:56.890 --> 08:59.110
Okay, we'll just go through then complexity after record it.

08:59.620 --> 09:03.460
And in the next prob in the next material, I'll just call it out.

09:03.880 --> 09:04.390
Thank you all.
