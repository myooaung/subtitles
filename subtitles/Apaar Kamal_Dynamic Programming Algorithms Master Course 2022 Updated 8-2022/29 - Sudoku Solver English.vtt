WEBVTT

00:01.420 --> 00:04.180
Everyone, welcome to another lecture on problem solving.

00:04.180 --> 00:09.670
And in this lecture, we're going to solve a very interesting problem, which is this solution to the

00:09.700 --> 00:10.030
look.

00:10.450 --> 00:15.400
So in this solution, what we are given, we are given by the slippery to local metrics.

00:15.670 --> 00:22.660
So it says a local game and we need to write the function to fill the empty cells and we should follow

00:22.660 --> 00:25.750
the two local rules while filling the cells again.

00:25.750 --> 00:31.420
So for the input part, you can assume that all the cells which are not food, they will contain the

00:31.420 --> 00:32.050
values zero.

00:32.680 --> 00:38.140
So you need to replace these values which are zero then some valid value.

00:38.140 --> 00:41.140
Okay, so there can be multiple solutions possible.

00:41.620 --> 00:44.590
We want to print one possible solution.

00:44.620 --> 00:44.980
Okay.

00:45.400 --> 00:51.190
So let us let me give you a quick recap of what we do in this look.

00:51.190 --> 00:51.470
Okay.

00:51.940 --> 01:00.700
So if it is a nine gross nine grid, then every row should contain the numbers from 1 to 9 and every

01:00.700 --> 01:04.480
column should also contain numbers from 1 to 9.

01:04.930 --> 01:10.570
And also every sub grid, which is a three by three separate in this case.

01:10.660 --> 01:10.990
Okay.

01:11.350 --> 01:14.830
So this upgrade, this upgrade, this upgrade.

01:15.280 --> 01:20.530
So they should also contain numbers from 1 to 9 and no number should repeat.

01:20.770 --> 01:21.160
Okay.

01:21.160 --> 01:26.920
So no numbers should repeat either in the row or in the column or in the sub grid.

01:26.920 --> 01:27.190
Okay.

01:27.190 --> 01:36.130
So if I give you one example, so maybe can you put one here, maybe we can maybe put in one may not

01:36.130 --> 01:37.240
create a valid solution.

01:37.240 --> 01:37.420
Okay.

01:37.420 --> 01:38.260
So we don't know.

01:38.260 --> 01:46.120
So what we have to do is we have to try all possible numbers at all possible locations.

01:46.120 --> 01:46.270
Okay?

01:46.270 --> 01:47.920
So this is what we will do.

01:47.920 --> 01:48.160
Okay.

01:48.160 --> 01:50.590
So we will what will do, let me tell you.

01:50.590 --> 01:50.830
Okay.

01:50.830 --> 01:57.910
So let us think in terms of a brute force solution, how we can try out all possibilities.

01:57.910 --> 01:58.150
Okay.

01:58.150 --> 02:02.710
So how we can try out all possibilities.

02:02.710 --> 02:02.920
Okay.

02:02.920 --> 02:10.780
So this is the only thing that we can think of in this case, and we will stop when we get one valid

02:10.780 --> 02:11.230
solution.

02:11.230 --> 02:11.440
Okay?

02:11.440 --> 02:15.050
So we will stop once we get one valid solution.

02:15.070 --> 02:15.820
So what are you going to do?

02:16.180 --> 02:21.940
You started reading this great from left to right or from top to bottom.

02:21.940 --> 02:29.590
So let's say we're going to go sail Brazil and latest standard and we see this is already filled.

02:29.610 --> 02:32.620
Okay, so we will not modify the cells which are pre-filled.

02:32.980 --> 02:34.030
So we jump to the cell.

02:34.240 --> 02:36.820
It is again preferred we jump to this particular cell.

02:37.240 --> 02:41.620
Now add this cell, you have an option to place all the numbers from 1 to 9.

02:41.620 --> 02:41.860
Okay?

02:41.860 --> 02:49.210
So you will say, okay, let me place one and let me try to solve this problem recursively and I will

02:49.210 --> 02:51.850
come to know if a solution exists or not.

02:51.850 --> 02:53.830
So how we can solve that is a problem.

02:54.190 --> 02:58.200
We can make a recursive call on this sub.

02:58.210 --> 02:58.390
Right?

02:58.420 --> 02:58.600
Okay.

02:58.600 --> 03:06.610
So if the cell is a comedy, that means we're making a recursive call on i, i comma.

03:06.730 --> 03:07.720
Duplass one Okay.

03:07.720 --> 03:12.730
So we are making a recursive call on the next column and recursion will do its work.

03:12.730 --> 03:13.980
So what it will do, it will.

03:13.990 --> 03:16.810
Okay, let me try to place a number here.

03:17.080 --> 03:23.800
And by placing a number here, what we will check for is we need to check whether that number is valid

03:23.800 --> 03:24.190
or not.

03:24.190 --> 03:25.480
So can we place one here?

03:25.690 --> 03:30.250
And this is because one is already there and the rule can replace the two here.

03:30.790 --> 03:31.720
Maybe we can.

03:31.720 --> 03:32.550
Maybe we can't.

03:32.560 --> 03:32.770
Okay.

03:32.950 --> 03:38.200
By looking at this row, this column and this abbreviated do doesn't come.

03:38.200 --> 03:43.240
So let us please do and let us go to the next cell and try to solve this problem.

03:43.240 --> 03:44.680
So this will be this problem.

03:46.720 --> 03:47.980
This will be just a problem.

03:48.380 --> 03:49.930
Now, these are problems.

03:50.740 --> 03:58.780
They are going to tell the cell from which we made a call whether this problem can be solved by placing

03:58.780 --> 03:59.310
do or not.

03:59.400 --> 03:59.530
Okay.

03:59.530 --> 04:00.400
So what do you do?

04:00.520 --> 04:08.500
You say you check out given I accommodate if a number can be placed.

04:08.560 --> 04:12.040
If a number can be placed.

04:12.250 --> 04:12.520
Okay.

04:13.180 --> 04:15.910
And what what is going do with that number?

04:15.910 --> 04:21.190
So you will try for all the numbers for number in the range 1 to 9.

04:21.580 --> 04:23.200
You check at a given cell.

04:23.560 --> 04:27.070
If this number can be placed, that means it doesn't occur in draw.

04:27.460 --> 04:29.140
It doesn't occur in column.

04:29.560 --> 04:32.260
And it doesn't occur in the sub grid.

04:32.290 --> 04:32.620
Okay.

04:33.580 --> 04:36.370
If it can be placed, then you placed it.

04:36.460 --> 04:37.210
You place it.

04:37.360 --> 04:44.680
That means you say array of I call magic equals to that number and you solve this problem.

04:44.870 --> 04:45.820
So you may be there.

04:45.820 --> 04:46.480
Solve.

04:47.200 --> 04:55.750
I come to the plus one and now this sub problem will tell you whether the number that you placed is

04:55.750 --> 04:59.020
the right number for the optimal solution or not.

04:59.050 --> 05:02.200
Okay, so maybe you might not be the best number.

05:02.260 --> 05:05.790
Maybe we want to put five or six or seven or eight or nine something else.

05:05.800 --> 05:06.040
Okay.

05:06.440 --> 05:13.850
This function will tell you again either this is going to be true or this or this is going to be false.

05:13.870 --> 05:18.640
You can make it a boolean function to tell whether this problem could be solved or not.

05:18.670 --> 05:18.940
Okay.

05:19.270 --> 05:22.810
If this problem could not be solved, you would write the next number.

05:22.810 --> 05:24.460
If this problem can be solved.

05:24.760 --> 05:25.330
You return.

05:25.540 --> 05:25.840
Okay.

05:26.710 --> 05:27.100
So what?

05:27.100 --> 05:29.440
I will say try next.

05:30.460 --> 05:32.200
If so, I'll return.

05:32.200 --> 05:32.710
False.

05:32.980 --> 05:33.300
Okay.

05:35.750 --> 05:38.840
Otherwise you can simply say return to.

05:40.170 --> 05:43.080
If that means your problem could be easily solved.

05:43.110 --> 05:43.380
Okay.

05:43.830 --> 05:46.500
So return true.

05:47.040 --> 05:47.760
Otherwise.

05:48.090 --> 05:48.290
Okay.

05:49.510 --> 05:56.610
To try next basically means you go to the next step in the a look on try to do the work for the next

05:56.610 --> 05:59.230
time but okay so this is how we're going to solve the problem.

05:59.240 --> 06:01.270
So I hope you got an idea.

06:01.810 --> 06:04.740
So the logic is very straightforward.

06:04.740 --> 06:06.680
The only thing is you need to think of cognitive.

06:07.060 --> 06:07.300
Okay.

06:07.570 --> 06:11.410
Now let us also talk about basic is what would be the basic is okay.

06:12.190 --> 06:15.940
So in the base case, you know, you keep on going like this.

06:16.090 --> 06:16.450
Okay.

06:17.320 --> 06:23.170
One corner gives not the basics, but one corner case would be when you reach end of the rule, you

06:23.170 --> 06:26.380
need to convert this call into this court.

06:26.380 --> 06:28.870
Look, so you can you can put it something like this.

06:29.290 --> 06:36.400
If the column that is G becomes equal to nine, you go to the next rule, that means you put equal to

06:36.400 --> 06:36.790
zero.

06:37.300 --> 06:42.280
And so the equal to one and you put Jake will do zero.

06:42.790 --> 06:46.750
So you do this step and you keep on going Roberto this way.

06:47.170 --> 06:50.260
And finally you will end up at this particular rule.

06:50.260 --> 06:50.530
Okay.

06:50.530 --> 06:51.280
So you will end up.

06:52.570 --> 06:53.920
Just after the last row.

06:54.340 --> 06:57.640
And if you reach this particular point, that means your problem has been.

06:57.940 --> 06:58.330
So.

06:58.340 --> 07:02.020
So your final guess would be if I equals to nine.

07:02.560 --> 07:06.940
That is, you have covered all the nine rows number from 0 to 8.

07:07.390 --> 07:15.100
That means your your cross the last row then you're going to implicit are true that this problem can

07:15.100 --> 07:15.550
be solved.

07:15.550 --> 07:15.790
Okay.

07:16.360 --> 07:20.950
And one final guess could be like this if you could not get any number.

07:20.950 --> 07:25.950
Okay, so if you have tried all the number that you have placed, you could not get any number.

07:25.990 --> 07:30.670
Then what you will get in that case you will say, okay, whatever number I have written.

07:31.270 --> 07:34.300
Finally again, maybe you tried one, it didn't work.

07:34.420 --> 07:38.800
Okay, let me just draw draw this particular cell you said.

07:38.800 --> 07:40.570
Okay, let me put one here.

07:40.570 --> 07:41.320
It doesn't work.

07:41.320 --> 07:42.460
Let me put two here.

07:42.490 --> 07:43.210
Doesn't work.

07:43.480 --> 07:44.290
Let me put three.

07:44.290 --> 07:45.010
Doesn't work.

07:45.010 --> 07:47.320
Four, five, six, seven, eight, nine.

07:47.320 --> 07:48.220
It doesn't work.

07:48.610 --> 07:49.150
Then what?

07:49.150 --> 07:51.250
Okay, so you have to write all the numbers here.

07:51.730 --> 07:52.630
Now what?

07:52.630 --> 07:53.410
What do you need to do?

07:53.410 --> 07:56.860
You need to go back and find some other look.

07:56.870 --> 07:57.010
Yes.

07:57.010 --> 08:01.780
In that case, if you have tried all possibilities at the current position, that means there could

08:01.780 --> 08:04.120
be some mistake in the beginning.

08:04.150 --> 08:08.950
Maybe you have put the wrong number in the previous call or in the previous caller in the previous call.

08:09.280 --> 08:16.160
You can simply say whatever number I have placed does make it zero because it doesn't work and return

08:16.180 --> 08:18.970
false under false.

08:19.660 --> 08:23.080
This we can we will do after this loop.

08:23.080 --> 08:23.350
Okay.

08:23.350 --> 08:24.070
So that means.

08:26.820 --> 08:27.120
Yeah.

08:27.210 --> 08:29.660
So that means we are going to do the backtracking.

08:30.290 --> 08:34.530
We are going to go back and do some corrections.

08:34.650 --> 08:34.920
Okay.

08:34.980 --> 08:38.890
We are going to go back and do some corrections.

08:38.910 --> 08:39.120
Okay.

08:39.370 --> 08:40.980
So this is a very high level logic.

08:41.280 --> 08:47.880
And I will again give you a quick recap of what we are thinking of what we are going to do.

08:48.360 --> 08:53.430
So the idea is you go to every cell, you place a number, you start with one.

08:53.700 --> 08:55.520
If one can be placed, you place one.

08:55.530 --> 09:00.240
If one cannot be placed, you place two, maybe two can replace.

09:00.240 --> 09:01.840
But two is not the right number.

09:01.860 --> 09:03.300
So how you will continue that?

09:03.750 --> 09:06.960
By making a recursive call on the cell problem.

09:07.260 --> 09:10.350
This problem will tell you whether two is right.

09:10.380 --> 09:11.860
It says do is right.

09:12.180 --> 09:14.910
You delete parent or the previous function.

09:14.910 --> 09:18.150
Call that okay, this problem can be solved.

09:18.150 --> 09:18.420
Okay.

09:18.690 --> 09:22.950
If this says no, you cannot place two because I cannot solve this upgrade.

09:23.310 --> 09:25.290
Then you say, okay, no, let me try three.

09:25.590 --> 09:26.820
But three cannot be placed.

09:26.820 --> 09:32.400
So you just give it three and you go with forward and you check for cannot four is not coming in the

09:32.400 --> 09:37.650
role for it is not coming in the column but is not coming in the upgrade you place for you.

09:37.650 --> 09:43.170
Make a recursive call that recursive call tell you whether you could solve the problem or not if let's

09:43.180 --> 09:47.190
it's against as far as you put five five can replace you will do six.

09:47.640 --> 09:50.940
Six cannot replace because it is here you go to seven.

09:50.940 --> 09:53.130
Seven cannot replace because it is in the row.

09:53.640 --> 09:54.510
You go to eight.

09:54.750 --> 09:56.880
It cannot replace because it is in the column.

09:56.880 --> 10:00.330
You go to nine, nine get on replace because it is in the sub grid.

10:00.660 --> 10:06.210
Now what again, you still have a number for head and you need to remove this number.

10:06.210 --> 10:09.180
You want to make it zero and you need to go back.

10:09.180 --> 10:14.010
Okay, maybe you are to empty cell yet, but if in this case it doesn't work, you will still get it

10:14.020 --> 10:14.220
done.

10:14.220 --> 10:14.670
False.

10:14.940 --> 10:18.690
So this returns false here this returns file where this returns filed here.

10:19.020 --> 10:23.750
And this basically is the function that no such solution exists.

10:23.760 --> 10:30.870
Okay, so this is how it is going to do the backtracking and the solution is going to really work well.

10:31.230 --> 10:38.090
So in the next video, let us see the implementation with the recursion and a backtracking approach.

10:38.100 --> 10:38.370
Okay.

10:38.790 --> 10:40.290
So thank you.
