WEBVTT

00:00.450 --> 00:00.780
Okay.

00:00.780 --> 00:04.680
So here we discussed about the industry and packages right now.

00:04.680 --> 00:05.940
Let's see how to call it out.

00:06.420 --> 00:09.000
So it's open sublime text and.

00:10.270 --> 00:11.530
It's never too simple.

00:12.340 --> 00:15.820
Now, guys, let me show you my way of making graphs.

00:15.820 --> 00:19.900
And this way it will be used a lot.

00:20.110 --> 00:25.960
So whenever you are doing computer programming, you can easily make graphs using this way, right?

00:25.960 --> 00:28.570
So what we do is we generally take a constant.

00:31.020 --> 00:31.440
And.

00:33.890 --> 00:34.880
Let's look at Berlin.

00:34.880 --> 00:39.140
And this will be equal to the size of the number of nodes that we're going to have.

00:39.140 --> 00:39.440
Right.

00:39.710 --> 00:43.610
So let's if there's a graph and it has been said that there are only five edges.

00:44.120 --> 00:45.950
So 25 nodes, right.

00:45.950 --> 00:48.050
That means tainted by five nodes can be there.

00:48.260 --> 00:53.180
So we make plus when we do it, we will say it is equal to 25 plus one.

00:53.180 --> 00:53.380
Right.

00:53.390 --> 00:56.620
Because not a number from when to when.

00:56.660 --> 00:57.030
If I.

00:57.410 --> 00:57.620
So.

00:57.620 --> 01:02.810
If so, here I'll be taking a adjacency list of these nodes eight.

01:03.080 --> 01:10.280
So I'm explaining all of this because it's my I think the first time I'm like in this course, the first

01:10.280 --> 01:11.600
time I'm trying to choreograph.

01:11.660 --> 01:11.990
Right.

01:12.350 --> 01:14.870
So we will take this into list here.

01:15.620 --> 01:18.770
So it will be a vector and so it will be an array of vectors.

01:19.190 --> 01:19.490
Okay.

01:19.850 --> 01:22.130
So a distance you have list.

01:22.580 --> 01:26.710
A distance, your one will be in this graph one which is will be a vector eight.

01:26.720 --> 01:28.410
So how many number of notes will be there?

01:28.410 --> 01:29.360
It will be in their distance.

01:29.360 --> 01:30.620
A list of what?

01:31.640 --> 01:31.920
Right.

01:32.510 --> 01:34.070
So cool.

01:34.310 --> 01:36.740
So let's take this graph as an input first.

01:36.830 --> 01:37.280
So.

01:38.660 --> 01:43.250
It's remove input and output and how we used this seven already rate.

01:44.120 --> 01:45.020
And how many ideas?

01:46.700 --> 01:47.290
It is.

01:48.780 --> 01:53.340
So what we do is firstly we have a number of nodes, then we have number of edges and after that.

01:54.310 --> 01:54.570
We?

01:55.620 --> 02:00.690
Take all their ideas and push them into their just in the list to make it up very easy.

02:01.050 --> 02:02.550
But stages between one and two.

02:03.450 --> 02:04.200
One in three.

02:05.140 --> 02:05.830
Two Entry three.

02:05.830 --> 02:07.690
So here, I'm telling you a simple way, right?

02:07.990 --> 02:10.330
See, there can be various ways, but people do it.

02:10.330 --> 02:16.990
They make classes, they make methods in the classes which will take input as a graph, perform to be

02:16.990 --> 02:18.550
a first performer, DFS rate.

02:18.850 --> 02:25.450
All of that is really good and it's like it's like an industry work and you are coding for some but

02:25.600 --> 02:27.310
I think for some industry and all.

02:27.490 --> 02:30.890
But here is what we are doing is we are trying to compete with people.

02:31.120 --> 02:33.550
So what we do is we try to have.

02:34.660 --> 02:38.410
We try to use most of their time in thinking not coding.

02:38.710 --> 02:39.060
Right.

02:39.160 --> 02:41.260
So we'll take more and code less.

02:42.070 --> 02:46.630
So here we have the best ways to code a graph for computer programming.

02:47.210 --> 02:51.760
Because it's very easy just to go and just insulate and push all that just into this place.

02:51.790 --> 02:52.060
Right.

02:52.480 --> 02:53.920
So what are the edges?

02:53.930 --> 02:55.300
1.13, two, three.

02:55.630 --> 02:57.190
Then we have a 2 to 4 edge.

02:57.760 --> 02:59.230
Then we have 4 to 5 edge.

03:00.660 --> 03:03.060
526526 edge.

03:04.880 --> 03:08.600
6 to 7 inch and then we have seven to footage.

03:09.170 --> 03:10.550
This will be an undetected graph.

03:10.550 --> 03:10.840
Right.

03:10.850 --> 03:12.080
So what didn't they and it up.

03:12.260 --> 03:15.890
Already been discussed would say we can travel both ways.

03:15.890 --> 03:16.220
Right?

03:16.220 --> 03:24.260
So let's iterate over the end times and let's take edges as an input.

03:25.960 --> 03:26.220
Cool.

03:26.500 --> 03:35.260
Now, in a sea of x, I will simply push back by because by same two eggs and and dozens of I will simply

03:35.260 --> 03:36.310
push back x.

03:37.890 --> 03:46.350
Claes so in exile was back via and via push back X so here that complete input of graphics don't they.

03:46.380 --> 03:49.210
So basically let me save this code, right.

03:49.230 --> 03:53.430
Because I will only be using this code for all the graphics graph.

03:55.750 --> 03:56.230
Input.

04:00.200 --> 04:02.900
And yeah so grew would typically.

04:04.160 --> 04:04.400
Put.

04:06.000 --> 04:07.170
So let's open a new file.

04:08.130 --> 04:08.670
The call it.

04:09.580 --> 04:15.010
Now this is a good often but normal file where I have taken number of notes, number of edges and all

04:15.010 --> 04:18.040
the edges as an input, push them into the edges.

04:18.040 --> 04:23.200
Insulins that I have already created in the global level by have I created in the global level case

04:23.440 --> 04:29.020
because they're performing a the first search which will be a function like although you can write functions

04:29.020 --> 04:35.230
in mental by using lambda functions, but the better approach to the better approach for it will be

04:35.230 --> 04:36.820
to write a separate method.

04:36.820 --> 04:37.150
Right?

04:38.350 --> 04:38.640
Good.

04:38.680 --> 04:39.280
So here.

04:39.730 --> 04:39.970
Here.

04:39.970 --> 04:42.250
I'll be leading a normal DFS function.

04:43.880 --> 04:46.580
Corinne will be my coroner where I'm on currently.

04:46.760 --> 04:48.230
And there will be a.

04:49.420 --> 04:51.940
It's okay and it's still not called parent.

04:53.080 --> 04:58.320
So for now, let's ignore it and let's just wait current when the user pattern will come along.

04:59.530 --> 05:00.150
I'll take it.

05:00.240 --> 05:00.550
Good.

05:01.960 --> 05:03.960
So, guys, what we do is photograph.

05:03.970 --> 05:05.410
Let's see if it is connected.

05:05.440 --> 05:06.940
It's a completely connected graph.

05:06.970 --> 05:11.300
Then we can only then begin performative as from when we started.

05:11.770 --> 05:12.700
One, two, three, four.

05:12.700 --> 05:12.970
And any.

05:12.980 --> 05:13.170
No.

05:13.180 --> 05:13.510
Right.

05:13.810 --> 05:21.220
But if the graph, if the graph was like broken into some smaller graphs, then we have to perform this

05:21.250 --> 05:23.620
BFS from all the different notes.

05:24.130 --> 05:27.130
Then we have to perform from all the nodes in the node is not visited.

05:27.130 --> 05:28.660
Performative is right.

05:29.380 --> 05:33.840
So if the graph was this case, then there would be slight change in our code.

05:34.090 --> 05:34.370
Right?

05:34.570 --> 05:35.860
So it's better to write.

05:37.020 --> 05:41.040
It's like better to generalize everything for bigger cases, eh?

05:41.580 --> 05:42.240
So.

05:42.780 --> 05:42.930
So.

05:42.930 --> 05:47.100
What I'll do here is instead of writing, this will simply iterate from one to in.

05:49.580 --> 05:58.010
And we will simply say DFS will simply say if not visited, if it is not visited in the DFS, then performative

05:58.010 --> 05:58.280
is.

05:59.560 --> 06:00.060
Ladies.

06:01.080 --> 06:05.040
So if my graph was broken, then the DFS will be performed over all the graph.

06:05.730 --> 06:06.020
Right.

06:06.390 --> 06:08.370
So here, let me take one more.

06:09.660 --> 06:11.940
Edit Go visit it again.

06:12.510 --> 06:14.050
Now here's the use of and rate.

06:14.070 --> 06:19.200
We have this constant indent, so whatever will be declaring it will be degrading for all the nodes

06:19.890 --> 06:20.730
by using it in.

06:21.880 --> 06:26.680
So it really helps us to like it really eases our use of code.

06:28.350 --> 06:29.730
So here we are performing a DFS.

06:30.890 --> 06:33.280
From when doing the performing or the Office and India.

06:33.290 --> 06:39.290
This idea of what we do is firstly, when I go to any normal market visited, I say, okay, this has

06:39.290 --> 06:40.580
been visited now.

06:41.360 --> 06:43.520
And whenever I reach on a note, I implicit.

06:44.640 --> 06:48.570
Let's go into Edison's list of current nodes, which is a graph of current.

06:48.810 --> 06:50.940
And I simply say if it is not visited.

06:52.210 --> 06:55.540
Then simply DFS X rides.

06:56.670 --> 07:00.270
A very simple idea is there can't be anything simpler than this.

07:00.630 --> 07:02.580
Hey, so it's the normality of this.

07:02.670 --> 07:07.530
What I'm doing is when I'm moving to a node marking it visited and then going on its existing nodes

07:07.530 --> 07:08.730
which were not visited.

07:09.180 --> 07:10.560
So let's put in this first.

07:10.650 --> 07:12.720
Let's see what is the output we are getting.

07:15.210 --> 07:16.830
What is our place for?

07:16.860 --> 07:18.050
And usually we are in one.

07:18.060 --> 07:18.960
Then we go to do.

07:18.990 --> 07:19.860
Then we go to three.

07:20.100 --> 07:21.600
So let's come back here.

07:21.900 --> 07:23.550
One, two, three.

07:23.630 --> 07:24.690
Then I cannot go to one.

07:24.690 --> 07:24.980
Right.

07:24.990 --> 07:26.430
Because it was already visited.

07:26.940 --> 07:29.490
Then I'll come back to two and then I'll go to four.

07:29.790 --> 07:30.600
So I go to four.

07:31.230 --> 07:32.820
Then I go to five, then six.

07:32.820 --> 07:33.510
And then seven.

07:33.780 --> 07:34.520
Daniel to five.

07:34.520 --> 07:34.980
Then six.

07:34.980 --> 07:35.580
And then seven.

07:35.860 --> 07:36.680
See this?

07:36.700 --> 07:39.600
The first traversal that I'm going from 1 to 2.

07:39.750 --> 07:43.070
This completely depends on the way I'm taking it as then.

07:43.080 --> 07:46.050
But mostly I have taken this idea since he has the input.

07:46.230 --> 07:47.160
That is 1 to 2.

07:47.520 --> 07:48.880
So that's where two is coming.

07:48.900 --> 07:54.210
Frank two is coming above three because I have already inserted two before three and that just entails

07:54.210 --> 07:54.600
for one.

07:54.900 --> 07:56.880
If it was vice versa, let's, let's do it.

07:56.880 --> 07:57.510
Vice versa.

07:58.930 --> 08:04.240
One in three right now it's performative it's so as you can see three in do it also teams.

08:04.660 --> 08:10.540
It completely depends on the way we have taken that input because here we are iterating over all the

08:10.540 --> 08:10.870
edges.

08:10.870 --> 08:14.080
NC list clears its anomaly.

08:14.080 --> 08:17.710
If there's nothing done in this, if it is just a DFS photograph, good.

08:19.110 --> 08:22.050
Now let's consider the cases four packages eight.

08:23.940 --> 08:25.140
So what is the biggest case?

08:25.980 --> 08:32.100
If I want to know, and I've got an niche which is pointing to a node which is already visited.

08:32.310 --> 08:34.290
That means if I write LCA.

08:35.630 --> 08:38.930
Hate writing elsewhere means that it's a Beckett's.

08:40.420 --> 08:41.140
Agreeing or not.

08:42.490 --> 08:42.880
Yes.

08:42.880 --> 08:44.090
It's a package date.

08:44.620 --> 08:49.900
That means if the node was visited, that means if it is already issued and it is currently in their

08:49.900 --> 08:53.680
dispensing of the current node, that means this is a package that I'm facing.

08:54.520 --> 08:57.180
So guys are very little problem.

08:57.190 --> 08:58.330
The problem is that.

08:59.340 --> 09:00.000
Very simple.

09:00.300 --> 09:06.100
If I go from 1 to 2, then in two there will be this edge, which you'll be pointing to one eight.

09:06.540 --> 09:09.060
So is this a package, guys, between one and two?

09:09.990 --> 09:10.260
No.

09:10.260 --> 09:10.590
Right.

09:11.130 --> 09:12.030
This is not a package.

09:12.060 --> 09:13.980
This is an edge between a parent and a child.

09:14.820 --> 09:21.180
So always remember, a package cannot be between a parent and a child undetected growth rate.

09:21.390 --> 09:23.390
It will always be between it's bit.

09:24.000 --> 09:29.370
If I have some child, then it will always be between each child and sisters, not parents.

09:30.120 --> 09:30.420
Right.

09:30.690 --> 09:31.320
It's a parent.

09:31.560 --> 09:32.550
Hold a special.

09:34.450 --> 09:34.810
Oh.

09:35.870 --> 09:38.650
They were in a special place in Lake Charles.

09:40.160 --> 09:40.400
What?

09:40.400 --> 09:40.910
For the soul.

09:40.920 --> 09:41.240
Right.

09:41.660 --> 09:42.950
So here we have this, too.

09:43.370 --> 09:44.600
So this cannot be a Beckett.

09:44.750 --> 09:47.070
You see what I mean from this is when.

09:47.090 --> 09:47.300
If.

09:47.300 --> 09:49.640
Let's say I only have this edge between one and two.

09:50.090 --> 09:54.500
So an existential one I had pushed to add the sense you have to I pushed one.

09:54.920 --> 09:55.220
Right.

09:55.400 --> 09:59.630
So when I'm performing it to your face, firstly I'm on one, I go to two because I was not registered,

09:59.960 --> 10:03.440
but from two I can easily see that one is visited.

10:03.440 --> 10:07.070
Right, and one is the parent of this two.

10:07.580 --> 10:12.230
So this cannot be a back edge, guys, because it is already visited and it's apparent.

10:12.710 --> 10:13.010
Right.

10:13.220 --> 10:14.990
So back edges are always between.

10:17.180 --> 10:18.740
And sisters, not parents.

10:19.310 --> 10:24.080
What I need to do here is I need to exclude it into a range of other.

10:24.080 --> 10:25.100
Let's pass the bidding.

10:25.730 --> 10:31.190
So for any note, if I'm starting a deficit, let's pass an imaginary bidding, which is a zero, right?

10:31.250 --> 10:35.480
Zero cannot be a period of any note because all the notes are starting from one eight.

10:36.440 --> 10:41.750
So let's let's say India will have written parent.

10:41.870 --> 10:46.730
I'm passing a parent or whenever I perform a DFS X, if I'm going on X, the period becomes.

10:47.830 --> 10:49.120
Karen becomes the new parent.

10:49.540 --> 10:50.470
This is the career note.

10:50.470 --> 10:51.480
I'm moving on to x.

10:51.490 --> 10:51.830
So.

10:52.570 --> 10:54.850
With the pain in forex there is no trade.

10:55.210 --> 10:56.650
So here what else?

10:56.800 --> 10:59.710
If X is not equal to spirit?

10:59.820 --> 11:00.090
Right.

11:00.160 --> 11:01.000
What does this mean?

11:02.010 --> 11:03.150
What does this elusive mean?

11:03.420 --> 11:04.380
It is not visited.

11:04.650 --> 11:05.700
So it is visited.

11:05.700 --> 11:07.590
And it is also not equal to Benin.

11:07.590 --> 11:08.820
That means I got a package.

11:09.390 --> 11:10.020
So let's see.

11:10.020 --> 11:12.270
What are the back edges that I get in my above graph?

11:12.510 --> 11:15.370
So let's see out current index.

11:16.230 --> 11:18.950
So they will be back as we were doing current index late.

11:18.960 --> 11:19.320
So.

11:20.790 --> 11:21.340
Um.

11:21.420 --> 11:21.740
Yeah.

11:21.750 --> 11:22.350
So double.

11:25.020 --> 11:30.630
So here what we have is we have got a back edge between two in one, as we can see from when I go to

11:30.630 --> 11:33.270
three Diego to and from today.

11:33.480 --> 11:33.690
Okay.

11:33.690 --> 11:34.560
Let me bring that to.

11:40.680 --> 11:43.320
So from when I went to three, then I went to two.

11:43.350 --> 11:45.000
So this is a graph here, guys.

11:45.330 --> 11:46.620
One, two, three, three, two, two.

11:46.630 --> 11:51.300
And then from two I can see there is a backwards which is being pointed to one.

11:52.100 --> 11:56.130
Now I've got a baggage you need that is from 2 to 1.

11:56.550 --> 11:58.830
Now, I'm not reversing one, right?

11:58.830 --> 12:00.830
I'm not going to do one because it is already busy.

12:00.840 --> 12:02.010
I'm just printing the baggage.

12:02.370 --> 12:05.040
So I've got a four, I got a five, I got a six.

12:05.040 --> 12:07.260
I got seven at eight.

12:08.650 --> 12:11.530
So I would have four, five, six and seven.

12:12.130 --> 12:12.940
So I'm going to four.

12:13.630 --> 12:14.920
I'm going to five, going to six.

12:14.920 --> 12:15.610
Going to seven.

12:16.250 --> 12:18.280
Then from seven, I can see I've got a package.

12:18.700 --> 12:20.050
And what is this package, guys?

12:21.240 --> 12:22.560
This package is pointing to.

12:24.700 --> 12:27.250
This is finding between seven and four, right.

12:27.940 --> 12:28.930
So this is the Bakers.

12:28.930 --> 12:29.350
And then.

12:30.490 --> 12:35.950
So then from seven I come back to six, come back to five, come back to four.

12:36.010 --> 12:38.710
And then from four days, another eight, which is pointing to seven.

12:39.490 --> 12:39.650
Right.

12:39.760 --> 12:40.600
And it has visited.

12:41.080 --> 12:43.240
So this is, again, a baggage rate.

12:44.140 --> 12:45.220
So these are.

12:47.570 --> 12:47.870
Great.

12:48.380 --> 12:49.220
Now tell me.

12:50.230 --> 12:52.800
And now here we are getting a very important thing.

12:52.810 --> 12:54.230
Very, very, very important thing.

12:54.250 --> 12:56.770
If you notice, it will really help you a lot.

12:57.400 --> 13:00.720
So this tell me is 4 to 7 objects.

13:01.690 --> 13:04.260
Of course, the age between four and seven is a bit scary.

13:04.320 --> 13:08.740
But if I specifically say that 4 to 7 is a package.

13:09.340 --> 13:11.170
No sort of is right.

13:11.950 --> 13:12.250
Why?

13:12.310 --> 13:15.250
Because this is not pointing somewhere backwards.

13:15.490 --> 13:15.740
See?

13:15.790 --> 13:17.260
724 is a package.

13:17.530 --> 13:18.330
Don't get confused.

13:18.340 --> 13:19.330
I'm talking about.

13:19.510 --> 13:22.720
I'm just making some special case about director graphs right here.

13:22.720 --> 13:27.010
We're talking about connected groups, but right now, I'm just making some special guesses just to

13:27.040 --> 13:28.930
make you understand little things.

13:29.320 --> 13:34.510
Note to tell me if 4 to 7 is a back right, this 4 to 7 is a package.

13:34.510 --> 13:38.610
a3724 is a package degree, but 4 to 7 is not a back.

13:38.630 --> 13:39.610
It is not pointing.

13:39.610 --> 13:40.450
So I'm going backwards.

13:41.320 --> 13:41.540
Right.

13:42.400 --> 13:44.040
When did I get 4 to 7 days?

13:44.050 --> 13:47.590
Because when I from four I went to five, six, seven.

13:47.590 --> 13:48.520
I got this package.

13:48.970 --> 13:49.630
I went back.

13:49.630 --> 13:50.320
I went back.

13:50.320 --> 13:51.100
I went back.

13:51.580 --> 13:52.960
Like the equation unfolded.

13:53.530 --> 14:00.850
And then from here I'm getting and advertising 4 to 7 is the baggage rate, but 4 to 7 is not the package.

14:00.850 --> 14:03.280
Right, because it is not pointing backwards.

14:04.290 --> 14:04.550
Cool.

14:05.100 --> 14:07.350
So how will I determine that?

14:07.440 --> 14:09.300
What is a package in media history?

14:10.890 --> 14:11.180
Right.

14:11.200 --> 14:19.050
So so guys, clearly being very frank here, I would say that it completely first of all, it completely

14:19.470 --> 14:25.200
depends on the route, knowing that what are the packages, what other directions of the packages.

14:25.450 --> 14:25.740
Right.

14:26.190 --> 14:29.370
So if I'm going so I'm going backwards, it will be a package.

14:29.550 --> 14:34.320
If I'm not going somewhere backwards, I'm going somewhere forward which has already been visited.

14:34.320 --> 14:36.630
But it is not pointing backwards.

14:37.140 --> 14:38.520
That means it's not a package.

14:39.090 --> 14:39.390
Right.

14:40.580 --> 14:43.830
So I hope this part is clear then.

14:43.910 --> 14:47.420
Like how to find packages for undirected graphs.

14:47.910 --> 14:48.200
Right.

14:48.200 --> 14:51.380
So these are this interconnected graph and we are printing packages.

14:51.380 --> 14:51.650
Right.

14:52.130 --> 14:57.820
So if I want to detect signal in this graph, then I can simply say this is true.

14:58.730 --> 14:59.210
And.

15:00.400 --> 15:00.760
I can.

15:00.790 --> 15:02.530
This actually goes to group.

15:03.580 --> 15:03.930
Sorry.

15:04.060 --> 15:05.750
In Italy I would say it is false.

15:05.770 --> 15:11.310
I have not found a second and if even I word even a single package guys, that means I will say single

15:11.380 --> 15:11.770
is true.

15:11.770 --> 15:16.960
And after performing this DFS, I will simply say if cycle C out.

15:18.380 --> 15:18.890
Yes.

15:19.250 --> 15:21.320
Cycle found.

15:22.760 --> 15:23.660
Right else.

15:25.160 --> 15:25.610
See out.

15:26.880 --> 15:27.540
Not found.

15:29.490 --> 15:29.790
Right.

15:31.190 --> 15:31.750
So.

15:31.790 --> 15:32.060
Yeah.

15:34.850 --> 15:35.140
Yes.

15:35.140 --> 15:38.060
So we have got to cycle here because we have got one baggage.

15:38.510 --> 15:41.450
We have got many baggage, but we have got at least one baggage.

15:41.480 --> 15:42.470
That's what matters.

15:42.980 --> 15:43.340
Right.

15:43.820 --> 15:45.950
So this is about undirected graph, guys.

15:45.980 --> 15:46.770
These are these.

15:46.820 --> 15:47.960
This is about baggage.

15:47.960 --> 15:49.250
Isn't undirected graphs.

15:50.000 --> 15:54.960
After this bill we're talking about, baggage is in detector graphs so that we can easily understand

15:54.970 --> 15:58.460
the strongly connected components algorithms.

15:59.180 --> 15:59.480
Nate.

15:59.930 --> 16:04.100
And after this, what we'll be doing is baggage is graphs.

16:04.790 --> 16:07.430
And after that, we will be completing articulation.

16:07.430 --> 16:11.180
Boynton Bridges, which will be using dynamic programming over trees.

16:12.270 --> 16:17.520
Made the anime programming in graphs, which is also completed using the inventory only.

16:17.730 --> 16:25.890
So DFC is the main main personnel which will help us understand various different algorithms in graphs.

16:27.550 --> 16:28.040
Cool guys.

16:28.060 --> 16:33.730
So a short sexual addiction algorithm for an addictive drug which will help you understand what is the

16:34.120 --> 16:35.650
baggage rate.

16:36.870 --> 16:37.980
So great.

16:38.010 --> 16:39.600
See you in the next part.
