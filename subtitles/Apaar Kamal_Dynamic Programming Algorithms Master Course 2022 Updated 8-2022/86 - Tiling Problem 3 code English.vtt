WEBVTT

00:00.610 --> 00:02.250
hello, Everyone, let's code this problem.

00:02.850 --> 00:08.910
And for the sake of simplicity, what we'll do is we'll take one extra base case, which is F(2)

00:09.210 --> 00:12.210
and what is F(2), F(2) means 2X2 board

00:12.220 --> 00:14.100
And I want to fill them by using these tiles.

00:14.100 --> 00:15.470
And we all know what the.

00:17.010 --> 00:17.760
Answer for this.

00:17.880 --> 00:21.030
It is 2 right, either place 2 horizontally or 2 vertically.

00:21.390 --> 00:24.450
I cannot use an L-shaped to completely fill a 2X2

00:25.750 --> 00:29.220
And what is g(2), g(2) is nothing.

00:29.220 --> 00:32.220
But now it can easily be derived from this right?

00:32.610 --> 00:35.280
Which is g(2) is equal to

00:36.970 --> 00:42.440
g(1) + f(1) and which is equal to one plus one.

00:42.460 --> 00:42.730
Two.

00:43.630 --> 00:44.380
so g(2) is also

00:44.380 --> 00:44.920
Equal to two

00:46.240 --> 00:51.130
And now let's code this and find the values.

00:53.220 --> 00:53.460
cool.

00:54.630 --> 00:55.160
so just

00:55.170 --> 00:56.370
Let me erase this.

00:56.790 --> 00:57.180
And.

00:59.460 --> 01:03.060
so here, what we do is we take a value of n and lets say n is 10.

01:03.060 --> 01:03.330
Right Now.

01:16.500 --> 01:18.030
It's from zero to n.

01:18.060 --> 01:23.490
Before that, let's have a f array with n+1, g+1.

01:23.850 --> 01:29.010
so, f(0) is 0 and g(0) is also 0

01:29.760 --> 01:31.920
g(1) is 1 and f(1) is also 1

01:31.920 --> 01:32.340
Okay.

01:33.460 --> 01:35.200
equals to g(0) = 

01:36.790 --> 01:45.410
0 right similarly will have g(1) = f(1) = 1 and similarly will have a f(2).

01:46.460 --> 01:47.640
= g(2) = 2

01:47.920 --> 01:50.170
We have already seen this right.

01:51.110 --> 01:56.510
Now let's start the loop from three then and let's fill it.

01:57.380 --> 01:59.360
So we don't need this case for f(0) right.

01:59.490 --> 02:05.750
We won't be actually using it because I'm starting from three and the previous dependencies for any

02:05.750 --> 02:09.200
n is at most n minus two and it's not n minus three.

02:09.770 --> 02:10.970
It is at most n minus two.

02:11.690 --> 02:12.040
So yeah.

02:13.210 --> 02:16.510
So let's fill this, f(i) = f(i-1).

02:18.750 --> 02:20.400
+ f(i-2)

02:22.280 --> 02:23.750
+ two into 

02:25.200 --> 02:25.680
g(i-2)

02:27.680 --> 02:28.970
This is the first equation.

02:29.120 --> 02:32.670
And the second equation was to fill the g value 

02:33.170 --> 02:39.710
so what was g value, it is nothing but g(i) =  g(i-1) + f(i-1)

02:41.070 --> 02:41.670
We have seen this.

02:43.010 --> 02:45.660
So f will be calculated and g will be calculated.

02:45.720 --> 02:50.300
And then and in all the iterations will be using previous f's and previous g's.

02:51.560 --> 02:52.400
I hope this is clear.

02:52.820 --> 02:58.100
And finally, let's print f(n) because in the end, we want to find out f(n) only.

02:59.780 --> 03:09.200
So the number of ways in which I can tile I can tile area 2Xn which is 2X10 by using

03:09.200 --> 03:15.340
an L-shaped tile and 1 2X1 tile is 1255

03:16.070 --> 03:19.160
I hope this problem is clear to you because it's a.

03:20.240 --> 03:21.900
Follow up problem of the tiling problem.

03:21.920 --> 03:25.460
What I've always wanted to discuss this because it's an interesting problem.

03:26.260 --> 03:34.700
right it shows you that dynamic programming might also involve two states, right 2 different states, which

03:34.910 --> 03:36.350
might be independent on each other.

03:38.300 --> 03:39.410
So this was the code.

03:39.560 --> 03:41.360
And see you Everyone in the next part.

03:41.480 --> 03:41.840
Thank you.