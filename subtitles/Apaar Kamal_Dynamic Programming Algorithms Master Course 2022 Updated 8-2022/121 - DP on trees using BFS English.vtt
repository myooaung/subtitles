WEBVTT

0
00:00.460 --> 00:06.100
So everyone let's code the BFS approach using dynamic programming in the same problem so that you

1
00:06.100 --> 00:09.400
can get a variety of things and choose the best among them.

2
00:09.400 --> 00:12.310
try everything and choose the best one.

3
00:13.060 --> 00:14.320
So yeah.

4
00:14.320 --> 00:15.480
So how will I do the BFS?

5
00:15.490 --> 00:17.990
Just the same way I have performed

6
00:18.490 --> 00:22.390
I have filled these values here right, that is firstly I will fill the values for

7
00:23.450 --> 00:24.110
The leaf nodes.

8
00:24.230 --> 00:28.280
I'll push the leaf nodes into my BFS and I'll not start the BFS from the root node

9
00:28.430 --> 00:32.330
Because if I start the BFS from the root node, BFS will go downwards.

10
00:32.330 --> 00:34.070
But it will never come up like that.

11
00:34.130 --> 00:34.520
The DFS.

12
00:35.540 --> 00:35.720
So.

13
00:36.750 --> 00:42.450
Instead of performing BFS from one, I will perform the BFS from the leaf nodes right.

14
00:42.840 --> 00:47.670
So firstly I'll fill the leaf nodes, then I'll fill its adjacent then again fill its adjacent and so on.

15
00:48.720 --> 00:49.650
Right and.

16
00:50.970 --> 00:51.270
Yeah.

17
00:51.540 --> 00:53.820
So let's do the BFS thing here.

18
00:53.820 --> 00:54.030
so

19
00:55.310 --> 00:57.850
a BFS is performed using a queue.

20
00:57.860 --> 01:00.590
Let's take a queue and let's just pass

21
01:00.650 --> 01:04.840
some, will pass leaf nodes in it before they are

22
01:04.850 --> 01:05.840
Let's take.

23
01:05.850 --> 01:08.330
an array called dp [N] [2]

24
01:09.080 --> 01:12.170
And also we will be needing one more array.

25
01:13.700 --> 01:16.310
If you don't want to use that array, you can use the current array also.

26
01:16.310 --> 01:21.500
let me just take a visited array, which will tell me whether I  have visited a node or not, because

27
01:21.800 --> 01:23.150
we have to move upwards.

28
01:23.630 --> 01:31.090
If I have already calculated values of some variable, then I will not calculate it again.

29
01:31.640 --> 01:34.100
So I've taken a queue and what I'll do is nothing.

30
01:34.100 --> 01:37.460
But let's just iterate it from, it's the first time I am coding it.

31
01:38.300 --> 01:40.430
Let's just iterate from 1 and go till n.

32
01:40.430 --> 01:42.080
And do what?

33
01:43.070 --> 01:47.790
We know that the degree of the Leaf node, like how will we realize that it's a leaf node?

34
01:48.500 --> 01:51.230
By simply saying that its degree should be equal to one.

35
01:52.040 --> 01:54.860
Only leaf nodes will have the degree equal to one.

36
01:55.800 --> 02:01.860
So if degree, what is the degree, simple if graph gr[i] 

37
02:01.890 --> 02:06.360
adjacency list .size , that means there's only one node in it, if it is equal to one.

38
02:07.440 --> 02:12.920
That means it is a leaf node so if it is a leaf node, I'll simply push it into the queue.

39
02:13.050 --> 02:14.640
I'll simply push it into the queue.

40
02:14.640 --> 02:15.680
Right now nothing.

41
02:15.710 --> 02:18.930
Just perform a normal DFS by !Q.empty().

42
02:20.730 --> 02:22.080
So, until this Q is not empty.

43
02:22.080 --> 02:25.920
What I'll do is, pick the current node and the current node is Q.

44
02:26.940 --> 02:28.560
I think it's front()

45
02:29.820 --> 02:31.440
And Q.pop()

46
02:31.440 --> 02:34.200
I'll simply remove it and what I'll do is just fill the DP.

47
02:34.200 --> 02:34.620
Values.

48
02:36.180 --> 02:38.510
so  dp[cur] [0] is zero.

49
02:39.670 --> 02:41.200
dp [cur] [1] is

50
02:42.190 --> 02:42.570
One.

51
02:43.090 --> 02:43.350
Right.

52
02:43.510 --> 02:50.950
And after doing this, what I'll do is I'll just iterate over all it's children so gr[cur]

53
02:51.640 --> 02:51.880
right

54
02:52.120 --> 02:54.100
So now here, here we have two things.

55
02:54.460 --> 02:59.740
So the first thing is the thing that I use if X is not equal to parent something like this.

56
03:00.800 --> 03:01.140
And.

57
03:02.520 --> 03:04.500
You all know, we are performing BFS upwards.

58
03:04.890 --> 03:07.350
So how will we realize that...

59
03:08.610 --> 03:13.810
if current node is a parent or if current node is a child. So we know that in BFS ,what will happen

60
03:14.160 --> 03:19.380
We are moving upwards and let's I'm marking the nodes as visited.

61
03:20.930 --> 03:26.360
So for any current node, if I want to know whether it's child node is visited or not, it will be simple,

62
03:26.360 --> 03:26.660
right?

63
03:26.990 --> 03:33.770
Because what I will simply say I will simply say I'll make current node "is visited" whenever I'm visiting

64
03:33.770 --> 03:34.220
that note.

65
03:35.360 --> 03:39.100
So I know it will be a slightly tricky so this will not be too right.

66
03:39.110 --> 03:45.530
So I would simply say that visited current = 1 ,that I'm visiting it. now I'm going in the

67
03:45.930 --> 03:51.470
adjacency list of every note and I'm, you know, we are performing BFS upwards. So how will I know

68
03:51.770 --> 03:52.160
that

69
03:54.890 --> 03:55.880
The next one.

70
03:55.880 --> 03:58.790
The value that I want to use are the child node.

71
03:58.970 --> 04:03.170
I simply say if they are visited, if they are visited, they are.

72
04:03.530 --> 04:06.170
child nodes, because that's how I'm performing the BFS.

73
04:07.280 --> 04:11.210
And if they're not visited, then it means that it's a parent node.

74
04:12.170 --> 04:15.080
So if it is a parent node, I'll simply push it into the queue.

75
04:15.110 --> 04:18.080
I simply say x is a parent node, just push it into the queue.

76
04:18.110 --> 04:21.380
So that the BFS goes on and if it is a child node

77
04:22.970 --> 04:24.050
What I can say is.

78
04:24.050 --> 04:25.850
I can simply say.

79
04:29.420 --> 04:29.650
Yeah.

80
04:29.810 --> 04:33.320
So if it's a child node, I firstly I don't have to push it into the queue.

81
04:33.590 --> 04:38.660
The second thing is I would simply say dp[cur] [0]

82
04:38.700 --> 04:40.340
I just make the whole.

83
04:42.220 --> 04:42.970
a recursive relation.

84
04:43.330 --> 04:44.280
So what was the dp[cur] [0]

85
04:44.290 --> 04:45.340
I am not taking it

86
04:45.340 --> 04:49.450
I have to take dp[x][1] and let me simply add it.

87
04:52.630 --> 04:53.680
For all the nodes.

88
04:53.680 --> 04:54.670
Otherwise, if I am.

89
04:56.040 --> 04:57.420
Including the current node.

90
04:58.110 --> 05:00.240
That means I will not

91
05:00.450 --> 05:02.310
I may and may not include the child nodes.

92
05:02.370 --> 05:05.100
which is dp[x] [0] ,

93
05:06.130 --> 05:07.210
dp[x][1]

94
05:08.670 --> 05:08.870
right.

95
05:09.660 --> 05:16.740
So the only thing here to realize is that I can only use x if x is filled dp[x] is filled and dp[x] will 

96
05:16.740 --> 05:21.690
only be filled if it is visited because if it is visited , I'll fill its DP and also calculate

97
05:22.260 --> 05:22.770
this thing.

98
05:23.670 --> 05:23.930
right.

99
05:24.030 --> 05:25.890
So this was normal.

100
05:26.010 --> 05:26.930
BFS solution.

101
05:26.950 --> 05:30.330
I think this is the pretty easiest way of a solution you will ever see.

102
05:31.080 --> 05:33.690
But of course, BFS might be tricky.

103
05:33.700 --> 05:41.010
So from next problem onwards, I'll be using a DFS approach only in DP on trees, not recursion

104
05:41.010 --> 05:42.630
plus memorization or BFS.

105
05:42.870 --> 05:46.230
I'll just use a DFS ,normal DFS and fill the values.

106
05:47.130 --> 05:48.860
And finally, what is the final value

107
05:48.870 --> 05:51.120
It is nothing but dp[cur]

108
05:52.380 --> 05:52.740
Okay.

109
05:53.190 --> 05:53.580
So

110
05:55.090 --> 05:55.420
Yeah

111
05:55.480 --> 05:58.920
So again, we are over here right .Now,

112
05:58.930 --> 06:03.250
How will we know whether a note is a root node or a child node?

113
06:03.250 --> 06:03.520
So.

114
06:05.280 --> 06:07.350
Again, we have a slight confusion here.

115
06:07.500 --> 06:08.550
The confusion is simple.

116
06:09.150 --> 06:15.060
So, for example, for example, let me give you the confusion, which is let's say this is the tree,

117
06:15.060 --> 06:16.290
one, two, three and four.

118
06:16.950 --> 06:21.480
So we know we pushed that by saying that this is a leaf node, this is a leaf node.

119
06:22.620 --> 06:22.880
right.

120
06:23.220 --> 06:28.950
And we have said that both of these are the leaf nodes and we have pushed them into the Queue.

121
06:29.340 --> 06:30.900
That means I moved upwards.

122
06:30.900 --> 06:31.800
I moved upwards.

123
06:32.050 --> 06:33.750
Now, how do I know which is the root node

124
06:34.080 --> 06:37.560
The root node is the node which is visited last in the BFS.

125
06:37.560 --> 06:40.530
Correct because I'm starting from the leaf node, I'm going upwards

126
06:40.800 --> 06:46.770
I do not know which is the correct leaf node, but we can say that the root node will be the one,

127
06:48.410 --> 06:52.040
The node which is visited.

128
06:54.140 --> 06:58.310
Visited in the end in the BFS

129
06:59.370 --> 07:00.390
can be the root node 

130
07:00.390 --> 07:01.350
Root node format tree

131
07:01.720 --> 07:03.930
So how will I know which is visited in the end?

132
07:04.080 --> 07:04.590
Simple.

133
07:04.620 --> 07:07.050
I'll just take the another variable and let me call it

134
07:08.310 --> 07:10.470
Root and what I'll say is

135
07:11.560 --> 07:18.460
I will simply whenever I am visiting a node, I simply say that , root = cur.

136
07:19.270 --> 07:24.550
So the last current will be stored in the root and I will simply cout.

137
07:25.690 --> 07:27.460
The min(dp[root]).

138
07:28.830 --> 07:29.220
Root.

139
07:30.520 --> 07:33.850
,zero and dp[root].

140
07:34.790 --> 07:35.130
,

141
07:35.990 --> 07:36.230
one

142
07:39.650 --> 07:40.730
Right and.

143
07:41.180 --> 07:42.710
Okay, let me.