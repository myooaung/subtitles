WEBVTT

00:01.860 --> 00:05.100
So now we're going to look at the implementation of Angwin problem.

00:05.130 --> 00:07.110
So first of all, we will create a board.

00:07.740 --> 00:13.400
So let's say we have a maximum of 2020 world because I had four hired inputs.

00:13.410 --> 00:18.690
This call will not run because the complexity is huge and will be after 11 or 12 or 13.

00:20.220 --> 00:26.160
This is going to be very difficult to process in a 1/2 because we have a small, bold letter of 2020.

00:26.580 --> 00:35.280
The input would be maximum rated 13 or 11, and we will take input the value of and I know what we are

00:35.280 --> 00:35.730
going to do.

00:36.030 --> 00:44.910
We are going to create a function let solve and queen on the let me show it to you so we will have a

00:44.910 --> 00:51.210
boolean function let's solve in Queen and here we are going to give the value of and we are going to

00:51.210 --> 00:57.270
give the board and we are also going to give the current row in which we are currently not.

00:57.480 --> 00:59.160
Again, because that is needed.

01:00.300 --> 01:06.120
I now we discussed about the base case and we also discussed about the recursive case.

01:06.630 --> 01:09.840
In the recursive case we said we will try to place.

01:11.330 --> 01:13.490
A queen in every role.

01:13.730 --> 01:14.050
Okay.

01:14.510 --> 01:22.190
And in the best case, we said that if we reach a role that is equal to end, that means we are done.

01:22.550 --> 01:28.970
In this case, we will print the board and we will read and will not make any further calls, and we

01:28.970 --> 01:32.340
will terminate our equation from that particular base case.

01:32.360 --> 01:32.590
Okay.

01:32.600 --> 01:41.030
So maybe we will create we can create a function void print board that is going to take input in and

01:41.030 --> 01:41.510
board.

01:43.810 --> 01:50.230
And yeah, so it is going to blow over all the doors.

01:53.870 --> 01:56.540
And it is going to read over all the columns.

02:00.050 --> 02:03.820
Then we're going to see out more of it.

02:04.420 --> 02:04.670
Yeah.

02:05.600 --> 02:06.830
Followed by space.

02:07.220 --> 02:08.780
And followed by.

02:09.140 --> 02:09.400
And.

02:12.840 --> 02:21.390
So now in the base case, what we need to do, we simply need to call the method rent board and we give

02:21.390 --> 02:22.380
in on the board.

02:22.680 --> 02:23.150
That's it.

02:23.160 --> 02:23.670
We are done.

02:24.210 --> 02:27.470
But in the recursive case, we need to try every column.

02:27.480 --> 02:33.750
So what we will do, we will say, okay, let us say the column start from zero.

02:34.170 --> 02:37.740
Column is less than ten and we do a plus plus.

02:39.070 --> 02:40.540
And here's what we will do.

02:40.660 --> 02:48.670
We will say, I need to check whether the current position is safe or not, whether the current idea

02:48.670 --> 02:50.980
is safe or not.

02:51.460 --> 02:54.010
So what does it mean by safe?

03:01.290 --> 03:02.760
Let me just tell it to you.

03:03.850 --> 03:05.280
They said this is our great.

03:06.700 --> 03:08.770
And lots of you are currently in the air.

03:09.340 --> 03:09.640
Okay.

03:10.790 --> 03:14.570
It's a this is the role in which we are putting a queen here.

03:14.630 --> 03:16.460
It said this is where we are putting our green.

03:16.940 --> 03:21.680
If I want to place the green and the iron through and the death column, what I need to do it.

03:21.680 --> 03:24.410
I need to check that there is no green.

03:25.750 --> 03:27.190
In this particular column.

03:28.370 --> 03:31.340
And there is no green in this particular diagonal.

03:32.430 --> 03:35.280
And there is no green in this particular barnoldswick.

03:35.680 --> 03:37.920
So these are the three things where we need to check.

03:38.300 --> 03:41.700
Now, you may ask why we are not checking along this direction.

03:43.750 --> 03:44.810
And this direction.

03:44.830 --> 03:51.550
So this is because we are putting only one green in a row and we are not checking here because this

03:51.550 --> 03:53.800
part of the board is yet to be filled.

03:53.860 --> 03:54.110
Okay.

03:54.130 --> 03:56.920
This part is yet to be filled.

03:58.260 --> 04:04.500
There is no point of taking civil medical help on matters that will check whether a green is present

04:04.500 --> 04:06.480
in these diagnosed or on this column.

04:06.990 --> 04:12.390
So what we will do will define this method and let us assume that this method is scandalous.

04:13.110 --> 04:13.410
Okay.

04:13.860 --> 04:22.200
So if a green can be placed in the board of say and art index on G only then we are going to place a

04:22.200 --> 04:22.530
green.

04:22.560 --> 04:22.800
Okay.

04:22.800 --> 04:26.170
So how do we place a green since it is out in the world?

04:26.190 --> 04:28.560
Maybe we can mark that location as one.

04:28.920 --> 04:29.270
It has two.

04:29.280 --> 04:30.240
Everything is zero.

04:30.930 --> 04:39.120
If that green can be placed, then place it, then begin to board off it equals one and check for the

04:39.120 --> 04:40.110
remaining problem.

04:40.180 --> 04:40.380
Okay.

04:41.400 --> 04:48.330
So bool success there denote whether the remaining board could be successfully sorted or not.

04:48.840 --> 04:50.730
So we can call soil when green.

04:51.330 --> 04:52.380
And we give.

04:53.280 --> 04:53.850
What we give.

04:53.850 --> 04:54.330
We give.

04:54.330 --> 04:56.070
And we give board.

04:57.200 --> 04:58.580
And we give the wrong number.

04:58.640 --> 05:00.080
That is now eight plus one.

05:00.200 --> 05:00.560
Okay.

05:01.200 --> 05:03.910
And now this success will tell us what to write.

05:04.160 --> 05:04.430
Okay.

05:04.430 --> 05:11.210
So we will assume that, okay, this is this row is calling to the next door to check whether it was

05:11.210 --> 05:15.050
successful in solving the remaining problem or not.

05:15.770 --> 05:16.600
This success.

05:16.610 --> 05:22.520
If it is true, then you will return true and this position will be released.

05:23.000 --> 05:28.740
But if it is false, then you will try out the next position for the Queen.

05:28.760 --> 05:31.070
If it is false, you will try out the next position.

05:31.550 --> 05:34.310
And if it is false, then you move out of this particular row.

05:34.730 --> 05:37.630
Then you will return false to the parent.

05:37.640 --> 05:37.970
Okay.

05:38.390 --> 05:39.650
To the parent function call.

05:39.740 --> 05:41.390
So look, look carefully.

05:41.930 --> 05:46.730
If you got success from the remaining grade, then you return.

05:46.730 --> 05:47.000
True.

05:47.630 --> 05:47.990
Okay.

05:48.590 --> 05:50.870
I'm not writing as return false.

05:50.870 --> 05:53.660
I'm not writing like this else return false.

05:54.020 --> 05:55.880
Because this is not that we are going to do.

05:56.540 --> 06:02.660
If it does not success, then this loop will take their to the next location.

06:03.320 --> 06:07.010
And what do you need to do if it does not true?

06:07.040 --> 06:08.510
You already place the queen hit.

06:08.930 --> 06:10.460
But this is not the right location.

06:10.490 --> 06:12.590
Okay, so you need to backtrack.

06:12.650 --> 06:13.880
You need to update.

06:15.130 --> 06:16.390
You need to remove this.

06:16.690 --> 06:16.960
Okay.

06:16.990 --> 06:21.520
You made a function call and I said my tracking will come after the function call.

06:21.520 --> 06:23.320
That means you made a call here.

06:23.770 --> 06:24.940
This call returned.

06:24.940 --> 06:25.390
False.

06:25.630 --> 06:28.360
That means you will update this green index.

06:28.870 --> 06:29.650
You'll put it here.

06:29.920 --> 06:30.310
Okay.

06:30.730 --> 06:34.880
So let us make mode of ID equal to zero.

06:34.900 --> 06:41.080
That means we are removing this queen from here on in the next iteration of this for Loop.

06:41.230 --> 06:44.980
We are going to the equality plus one and we are putting a queen here.

06:45.010 --> 06:48.880
I'll give you a recording of Queen at this particular index.

06:48.920 --> 06:49.120
Okay.

06:49.130 --> 06:50.470
We were putting a queen.

06:50.920 --> 06:53.890
And then again, we are going to make a call here and check for success.

06:54.310 --> 06:57.290
Maybe let's assume that this time we got a success.

06:57.310 --> 07:02.080
We are going to tell the parent, call, well, give you got successful and let's not make any changes

07:02.080 --> 07:04.750
and let us propagate true back to the mean.

07:04.780 --> 07:07.060
So this would give true, true, true and so on.

07:07.600 --> 07:10.690
So this is how this problem is going to get solved.

07:11.230 --> 07:19.780
But now there is still one case that is left that cases when you have finished the entire row and you

07:19.780 --> 07:27.880
could not place a queen successfully, that means if you somehow come out of this follow, that means

07:28.300 --> 07:34.930
you will come out of this for a loop if and only if there was no position in the row that could satisfy

07:34.930 --> 07:35.590
the constraint.

07:35.590 --> 07:35.860
Okay.

07:36.130 --> 07:39.010
That means there is something wrong with the parent.

07:39.370 --> 07:45.750
And you should tell the parent call that you need to update the you need to update your location.

07:45.760 --> 07:53.020
So if this row returns are false, then that means something will get updated in the parent call.

07:53.050 --> 07:54.940
Maybe the parent called the Queen, was it?

07:55.360 --> 07:58.630
Then you will say, Let us remove this.

07:58.780 --> 08:06.130
So this line of parent call will get executed and in the next iteration they will take the next value

08:06.130 --> 08:07.480
and you will place a queen hit.

08:07.780 --> 08:11.200
And again, you will make a call on this rule again and again.

08:11.200 --> 08:13.630
You will start from zero to land minus one.

08:13.660 --> 08:13.900
Okay.

08:13.900 --> 08:15.730
So this is what what is going to happen.

08:16.720 --> 08:21.750
So this is the complete backtracking code for the end queen problem.

08:21.940 --> 08:22.840
One thing is left.

08:22.870 --> 08:29.770
We need to implement this function down place board and ID, so let's implement this method as well.

08:30.310 --> 08:32.800
So what we are going to do, we are going to say.

08:36.050 --> 08:36.320
Yeah.

08:36.410 --> 08:37.730
So we are going to say.

08:39.860 --> 08:40.910
Mulligan Bliss.

08:41.600 --> 08:45.680
Ball game plays and I get the ball.

08:47.200 --> 08:52.690
I get the and I get the X come away where I'm placing a queen.

08:52.710 --> 08:56.560
Okay, so we need to check for the column first.

08:58.160 --> 09:00.980
So in the same column for Antigay Equality Zero.

09:03.210 --> 09:04.980
Girls, then let's say X.

09:06.830 --> 09:11.810
Cabela's plus if word of geek on my way.

09:12.830 --> 09:15.170
If this is equal to one, we can done.

09:15.860 --> 09:16.610
It's okay.

09:17.330 --> 09:19.550
We can have left diagonal.

09:20.590 --> 09:23.500
And we can have a check for the right diagonal as well.

09:24.190 --> 09:25.990
What I'm going to do, I'm going to copy.

09:27.500 --> 09:30.350
The variable, the coordinates in a variable.

09:31.990 --> 09:38.780
I do and I can take while I is greater than equal to zero and j is greater than equal to zero.

09:39.440 --> 09:41.960
If more of AJ.

09:42.960 --> 09:44.370
If this is equal to one.

09:47.100 --> 09:50.280
Then that means ugliness present and we should return.

09:50.280 --> 09:50.700
False.

09:52.080 --> 09:59.430
And we should update is a minus minus the FDA minus minus and let us do the work for the right diagonal

09:59.430 --> 09:59.820
as well.

10:00.330 --> 10:07.920
So is equal to X, is equal to Y and they can put a loop while I is greater than equal to zero and is

10:07.920 --> 10:08.490
less than ten.

10:08.520 --> 10:12.930
So don't worry, I will explain these conditions if board of it.

10:14.130 --> 10:22.650
If this is equal to one, then we consider done false and we can do a minus, minus and de plus plus.

10:23.100 --> 10:26.460
And if none of these conditions is false, then we should return.

10:26.460 --> 10:26.780
True.

10:26.790 --> 10:31.320
That means we could not find a green in the column, left diagonal or in the right diagonal.

10:31.710 --> 10:33.090
And we should return false.

10:33.540 --> 10:36.870
So let's see what we have done and can bless method.

10:37.380 --> 10:38.910
So we have this board.

10:39.880 --> 10:41.590
We have this rule.

10:42.340 --> 10:43.930
We have this column.

10:44.680 --> 10:53.740
And here we have this as a clean first we checked gaikwad zero killers in the exit door and divide column.

10:54.130 --> 11:01.240
We write rating from zero below, less than zero, retreating over these rows and the column is fixed

11:01.240 --> 11:01.600
as well.

11:01.660 --> 11:05.230
So we are iterating over this entire area.

11:05.740 --> 11:10.360
And if we could see there is a green here, we would simply done false.

11:10.470 --> 11:11.350
Oh, it's only this one.

11:12.310 --> 11:16.450
Then we are trading from equal to actually equal to white.

11:16.660 --> 11:18.490
While this is greater than equals.

11:18.490 --> 11:18.760
Zero.

11:18.790 --> 11:24.760
Basically, though, this particular point, we are saying we should not go beyond zero zero because

11:24.910 --> 11:28.870
that would mean indices that don't exist in the world.

11:29.470 --> 11:35.170
What we are doing, we are saying, okay, let us we have this cell x ray, so we want to go to diagonally

11:35.530 --> 11:36.380
one step back.

11:36.400 --> 11:41.530
So that is if this is I.D., then this is a minus one and minus one.

11:41.890 --> 11:45.330
Then again, we go one step back by doing a minus one and then minus one.

11:45.340 --> 11:48.820
So this this loop allows us to move in this particular diagonal.

11:49.150 --> 11:52.960
Similarly, the right loop allows us to move in this particular diagonal.

11:52.960 --> 11:53.250
Okay.

11:54.210 --> 11:59.820
So when we are going right, we are reducing the number of rules, but we are increasing the number

11:59.820 --> 12:02.130
of columns because we have to go towards right.

12:02.490 --> 12:05.100
But on the left we have to reduce the number of columns as well.

12:05.640 --> 12:11.070
We are checking if we could find something in the left diagonal or in the right diagonal.

12:11.700 --> 12:14.280
We should have done what look.

12:14.370 --> 12:15.090
We should have done.

12:15.870 --> 12:16.260
But.

12:17.530 --> 12:23.920
And if all of these conditions, none of these conditions are done default, we are going to return.

12:23.920 --> 12:24.220
True.

12:24.610 --> 12:26.890
That means there was no such going on.

12:27.490 --> 12:30.290
We can easily, safely place a green here.

12:30.330 --> 12:30.640
Okay.

12:31.870 --> 12:34.450
So this is the commonplace method.

12:35.250 --> 12:36.720
So quite a bit longer.

12:37.150 --> 12:37.750
So maybe.

12:37.750 --> 12:39.010
Let's try to call.

12:40.120 --> 12:40.870
And queen.

12:40.900 --> 12:44.560
And we give the value of an as and.

12:44.860 --> 12:48.130
And we give the board as board and the starting row.

12:48.790 --> 12:51.130
We can give I as zero.

12:51.220 --> 12:51.580
Okay.

12:53.560 --> 12:59.210
And let's give some input, maybe a forecast for the world and let us try to.

13:00.070 --> 13:00.370
Okay.

13:00.370 --> 13:01.210
We got.

13:04.000 --> 13:04.320
Okay.

13:04.450 --> 13:05.740
We should return to.

13:07.120 --> 13:09.760
That we could solve this problem.

13:12.830 --> 13:13.190
Okay.

13:13.190 --> 13:15.800
We have this as well.

13:18.260 --> 13:18.770
All right.

13:18.770 --> 13:22.340
So you can see we've got one possible configuration.

13:22.340 --> 13:25.400
And if we look carefully, then this.

13:27.140 --> 13:28.100
Configuration.

13:30.400 --> 13:31.930
Looks like a valid configuration.

13:31.930 --> 13:33.370
Look, this looks like a.

13:35.960 --> 13:36.850
Valid config.

13:36.860 --> 13:41.930
So this is what we had designed a kill kill until.

13:42.080 --> 13:43.700
So this is kill kill.

13:44.060 --> 13:44.900
You aren't kill.

13:45.200 --> 13:49.640
So yes, it exactly matches this output that we have derived.

13:50.240 --> 13:54.530
And that means this code is working perfectly fine.

13:54.830 --> 13:55.190
Okay.

13:55.370 --> 13:57.730
So a quick recap of what we have done.

13:57.740 --> 13:59.900
So this part of the code is the main part.

14:01.410 --> 14:07.320
And what we are doing it is that is something that you need to look at.

14:07.890 --> 14:14.880
So for every role we are trying to place the queen in every column.

14:15.060 --> 14:15.380
Okay.

14:16.660 --> 14:19.780
So here we are saying, okay, let us go to every column.

14:20.350 --> 14:24.640
And in every column there could be certain locations which are invalid.

14:24.670 --> 14:25.630
We discard those.

14:26.080 --> 14:32.800
There are certain locations which are valid for now, but maybe they're not part of the solution.

14:33.100 --> 14:39.430
So what we do for those configurations, we first place the Queen, then we check all the remaining

14:39.430 --> 14:40.030
the problem.

14:40.450 --> 14:45.580
The remaining problem tells whether it was successful or not, if it was successful.

14:45.910 --> 14:51.280
We tell the parent calls that the problem was solved just to propagate a true back to the mean.

14:51.760 --> 14:53.800
And we'll get to know where that is.

14:53.800 --> 14:54.730
The problem is solved.

14:55.300 --> 15:01.960
But if the problem is not solved by using that particular row and column, let's say we had that particular

15:01.960 --> 15:03.550
row and we are right.

15:04.450 --> 15:10.810
Then we say, okay, let us remove the Queen from this particular day and let us make Diaz de plus one

15:11.770 --> 15:12.910
and we put the queen here.

15:12.940 --> 15:13.270
Okay.

15:14.140 --> 15:16.540
So this is like putting the queen on.

15:16.540 --> 15:21.340
This is like removing the queen and even after completing the entire row.

15:21.370 --> 15:21.670
Okay.

15:21.670 --> 15:24.900
So this is after finishing entire row.

15:24.910 --> 15:26.590
If the queen could not be placed.

15:27.250 --> 15:31.180
Then we will tell the previous row something is wrong with the other configuration.

15:31.360 --> 15:35.020
Go and updated and this is a signal to the previous.

15:35.250 --> 15:35.560
Okay.

15:36.550 --> 15:43.720
This is also a signal to the previous row where the followed signal should be sent after the loop.

15:43.840 --> 15:44.140
Okay.

15:44.140 --> 15:51.690
After you have tried all possible configurations, after all columns have been checked in the current.

15:51.940 --> 15:54.820
Okay, so that's all for this lecture.

15:54.820 --> 15:56.830
I hope you really understood this problem.

15:57.130 --> 15:57.640
Thank you.
