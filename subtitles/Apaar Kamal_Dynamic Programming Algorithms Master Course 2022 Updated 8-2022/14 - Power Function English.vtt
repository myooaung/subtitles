WEBVTT

0
00:01.550 --> 00:06.950
Everyone in this lecture, we're going to talk about a very simple problem that is finding the power

1
00:06.950 --> 00:07.510
of a number.

2
00:07.520 --> 00:07.820
Okay.

3
00:08.180 --> 00:11.010
So let me just tell you what the problem statement is.

4
00:11.030 --> 00:17.330
We are given a number A and we are also given a number N and we want to compute A^N

5
00:17.330 --> 00:25.850
for example, let's say a is 2 and n is 10, then 2^10 = 1024.

6
00:26.630 --> 00:29.380
So let's see how we can write this.

7
00:29.390 --> 00:29.690
Okay.

8
00:29.690 --> 00:30.860
So a^N

9
00:30.860 --> 00:33.110
Can be written as

10
00:33.740 --> 00:37.520
If we talk about the recursive break down, it can be written as 

11
00:38.620 --> 00:43.540
a x a^N-1 so this can become our sub problem.

12
00:43.960 --> 00:50.290
And once we know the answer for this problem, we multiply it with a and get a^N

13
00:50.320 --> 00:53.050
And so that is one way of breaking down this problem.

14
00:53.680 --> 00:54.970
First, let's see this way.

15
00:55.150 --> 01:00.250
And in the next video, I will teach you an optimized way of doing the same.

16
01:00.280 --> 01:07.270
Okay, so let's quickly code this up and we will also verify how this power function is going to work

17
01:07.640 --> 01:10.210
and how much time and space it is going to take.

18
01:10.600 --> 01:12.650
So let's think about the basis.

19
01:12.670 --> 01:14.770
So what is the smallest possible value of N?

20
01:14.770 --> 01:16.720
And so it could be zero.

21
01:16.750 --> 01:19.150
If it is zero, then a raise to the power

22
01:19.150 --> 01:20.440
Zero is going to be one.

23
01:20.440 --> 01:21.700
We can simply return 1 

24
01:22.090 --> 01:27.900
Otherwise I can return a x power(a, N-1)

25
01:27.910 --> 01:28.450
That's it.

26
01:29.460 --> 01:30.330
And we are done.

27
01:30.930 --> 01:35.820
So we will take input a and N and we will compute.

28
01:35.970 --> 01:37.110
a raise to the power N

29
01:37.200 --> 01:41.160
so, yes, we are going to do it.

30
01:43.530 --> 01:44.400
Let's build the code.

31
01:45.860 --> 01:47.720
And let me show it to you.

32
01:51.310 --> 02:00.280
So maybe three and five, 3 raise to the power 5 is 243 and maybe two and ten is 1024 working

33
02:00.280 --> 02:01.030
perfectly fine.

34
02:01.420 --> 02:05.290
So let's have a quick look how this is working.

35
02:05.290 --> 02:08.620
So basically, let's say you're doing.

36
02:09.610 --> 02:10.960
Three raise to the power five

37
02:11.770 --> 02:15.210
So you have main from main.

38
02:15.250 --> 02:18.970
You make a call as to this power function.

39
02:19.570 --> 02:20.410
a is three.

40
02:21.280 --> 02:22.400
So a is always three.

41
02:22.450 --> 02:26.170
So you see it 3 raise to the power 5

42
02:26.170 --> 02:27.020
So it says.

43
02:27.040 --> 02:28.300
Let me break it into

44
02:28.300 --> 02:29.680
3 X 3 raise to the power 4

45
02:30.280 --> 02:32.110
It says, okay, here N is five.

46
02:32.140 --> 02:35.290
Here we will compute 3 raise to the power 4

47
02:35.440 --> 02:37.660
It will make a call on 

48
02:38.260 --> 02:38.950
3 raise to the power 3

49
02:38.950 --> 02:40.990
will make a call on 

50
02:41.000 --> 02:43.360
3 raise to the power 2 

51
02:43.360 --> 02:45.520
Here it will make a call on 3 raise to the power 1

52
02:46.000 --> 02:49.300
And from here it will make a call on 3 raise to the power 0

53
02:49.510 --> 02:52.450
So the when this is zero, it is going to return 3 raise to the power 0.

54
02:52.450 --> 02:53.080
That is one.

55
02:53.500 --> 02:57.850
One multiplied by three is three, three comes here,  3 x 3  = 9

56
02:57.880 --> 03:07.340
So it becomes 3 x 9 = 27 and 27 x 3 = 81 and 81 x 3 = 243.

57
03:07.360 --> 03:12.910
Thatâ€™s it, this is how we get this particular answer, talking about how much time it will take.

58
03:13.150 --> 03:15.790
It has performed N number of steps.

59
03:16.150 --> 03:19.150
It is O(N) how much space it is going to take.

60
03:19.210 --> 03:20.550
It is also O(N)

61
03:21.100 --> 03:21.380
Okay.

62
03:22.030 --> 03:29.380
I hope this is now clear to you and in the next lecture I will teach you an optimised way in which you

63
03:29.380 --> 03:35.680
can reduce the time and the space complexity of this program in the next lecture.