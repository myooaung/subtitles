WEBVTT

00:00.650 --> 00:01.310
Hello, everyone.

00:01.490 --> 00:01.970
Welcome.

00:02.600 --> 00:04.640
And here we'll be solving this problem.

00:04.640 --> 00:09.380
palindrome partitioning II and.

00:11.400 --> 00:13.700
For me, it is one of the easiest problems.

00:13.710 --> 00:14.900
But let's say.

00:14.910 --> 00:16.470
Let's see how to solve it.

00:17.100 --> 00:18.930
so, here again, we have to take a partitioning.

00:18.930 --> 00:25.230
But the problem says that given a string s, partition s such that every substring of the partition

00:25.230 --> 00:26.040
is a palindrome.

00:26.670 --> 00:31.360
right And return the minimum cuts needed for the palindromic partitioning of s.

00:31.860 --> 00:34.560
So what I'll do is I'll also do a follow up of this.

00:35.440 --> 00:40.780
And the follow up of this is nothing, but, we have this minimum cut right.

00:41.960 --> 00:49.810
But then we'll also see how to print that string, how to print them palindromic partitioning, which gives

00:49.830 --> 00:53.210
the minimum cut cool so we will print the final answer as well

00:55.370 --> 00:58.670
So let's discuss this a little bit.

01:00.010 --> 01:10.030
And the first input is aab, so we know that we can always partition this string into a, a and b,

01:10.030 --> 01:10.320
right?

01:10.450 --> 01:15.460
So if there's any string of length n, then we can always partition it into n partitions.

01:17.030 --> 01:17.250
Right.

01:17.840 --> 01:20.330
So just give me a second.

01:21.410 --> 01:21.680
Yeah.

01:21.710 --> 01:22.050
cool.

01:22.310 --> 01:25.010
So we can always partition into n partition.

01:25.010 --> 01:29.890
So partitioning into n partitions will require n-1 cuts.

01:31.230 --> 01:31.530
Right.

01:31.870 --> 01:39.210
In this case, if I'm partitioning it like at three places, then it requires 2 cuts, as you can

01:39.210 --> 01:39.680
easily see.

01:39.690 --> 01:39.980
Right.

01:40.380 --> 01:46.110
So there's another partitioning possible, which is aa and b, it requires only one cut right.

01:46.350 --> 01:50.520
So there can be a partitioning that is possible, which requires only zero cuts.

01:51.390 --> 01:52.410
I hope you know this right.

01:52.620 --> 01:56.540
Because let's say if the whole string is a palindrome, let's say aabaa

01:57.810 --> 01:59.460
So this does not require any cuts.

01:59.470 --> 02:01.620
This does not require any partitioning.

02:01.920 --> 02:06.960
But example we can see a is a palindrome itself, it require 0 cuts.

02:07.350 --> 02:08.040
ab is.

02:08.990 --> 02:13.100
Not a palindrome, but it can be partitioned into two different palindromes.

02:14.450 --> 02:16.820
So again, how we'll will solve this.

02:16.820 --> 02:18.950
how we will approach this problem simple.

02:19.170 --> 02:21.140
right so will start from the 0th index.

02:21.530 --> 02:25.880
And what we will do is we will try to make all the possible partitions.

02:27.020 --> 02:29.800
So how will we make all possible partitions that?

02:29.880 --> 02:31.130
is Starting from 2nd index.

02:32.890 --> 02:36.960
Will simply iterate, will simply keep on iterating and we'll check that.

02:36.980 --> 02:37.330
Okay.

02:37.570 --> 02:40.240
Now, this substring is a palindrome.

02:40.240 --> 02:42.280
We'll check it by calling the recursive function.

02:42.640 --> 02:43.960
That's again, very easy.

02:44.470 --> 02:48.400
And when we have got that, right that this is a palindrome.

02:48.410 --> 02:48.910
Let's say.

02:49.720 --> 02:51.010
lets say this is a string s

02:53.400 --> 03:00.600
And right now my i is this and my j is this and I'm just checking whether I to j is a palindrome or not.

03:00.690 --> 03:04.380
And it is a palindrome right? so if i to j is a palindrome.

03:04.590 --> 03:10.650
I would simply ask that okay from j plus one give me what is the minimum cuts right.

03:10.890 --> 03:13.560
So whatever is the minimum cuts from j plus one.

03:13.830 --> 03:15.600
That means I'm adding a cut over.

03:16.380 --> 03:16.680
here.

03:17.550 --> 03:17.770
right.

03:17.980 --> 03:19.730
So I'm having one partition.

03:19.740 --> 03:23.930
I'll say, okay, I had a cut, give me the minimum cuts possible from the j plus one.

03:24.420 --> 03:25.440
add one to it, right.

03:25.590 --> 03:28.800
And for all these j's I will try and find the minimum answer.

03:29.130 --> 03:32.310
right, so basically what, what's the final step.

03:32.730 --> 03:32.950
It.

03:34.110 --> 03:35.700
what will DP[i] represent here?

03:35.720 --> 03:39.930
dp[i] will represent the minimum cuts required.

03:43.700 --> 03:44.450
for Palindromic.

03:45.590 --> 03:46.430
Palindromic.

03:47.190 --> 03:48.030
Partitioning.

03:52.610 --> 03:56.290
s i to n and basically the suffix of s starting at.

03:56.300 --> 04:00.590
Ith index right and what is the recursive relation that we will simplify form.

04:01.160 --> 04:01.550
It is.

04:01.580 --> 04:04.100
DP[i] is nothing but minimum of.

04:06.140 --> 04:08.660
let's run a loop

04:09.830 --> 04:14.600
So j starts from i, j will go till, n right.

04:15.140 --> 04:19.040
It's a one way index sum and then I would simply say it is equals to.

04:21.920 --> 04:25.330
cool, we don't have a summation here right.

04:26.150 --> 04:30.350
it is nothing but equal to minimum of dp((j+1))

04:30.860 --> 04:36.020
for all those cuts that will start from I will ask what is the minimum from j plus one

04:36.320 --> 04:40.040
I will simply add one right out out of all those minimums.

04:40.040 --> 04:41.690
And here j will go from.

04:43.610 --> 04:44.420
j will go from.

04:49.300 --> 04:52.240
j starts from i and j will go till less than n.

04:52.930 --> 04:57.550
cool, I hope this is very clear that won't be doing anything.

04:57.560 --> 05:00.460
We just have to make a partition and we'll make a partition.

05:00.460 --> 05:02.490
We'll check whether i to j is a palindrome or not.

05:02.500 --> 05:03.610
If it is a palindrome.

05:04.070 --> 05:04.690
Do nothing.

05:05.870 --> 05:07.360
Just give me the best answer.

05:07.370 --> 05:09.740
The minimum gets acquired from j plus one and add one.

05:11.130 --> 05:13.670 
And in the next part will also code this.

05:14.730 --> 05:21.180
This problem will also require checking whether I to j is a palindrome or not.

05:21.180 --> 05:21.400
Right.

05:21.870 --> 05:24.900
If I want to check whether i to j is a palindrome or not, there are two ways.

05:25.620 --> 05:29.880
So the first way is simple iterative way that we can simply.

05:31.380 --> 05:34.200
Start I and start j and keep on decreasing them.