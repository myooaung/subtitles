WEBVTT
1
00:00:01.769 --> 00:00:07.253
Logging has been unnecessarily complex for Java and not just Spring.

2
00:00:07.253 --> 00:00:11.855
We have Commons logging, Log4j, SLF4J, JBoss logging,

3
00:00:11.855 --> 00:00:17.736
and of course Java util logging just to name the big players in that space.

4
00:00:17.736 --> 00:00:19.555
Spring hasn't solved this problem either,

5
00:00:19.555 --> 00:00:22.748
but now changed how they work with other APIs.

6
00:00:22.748 --> 00:00:24.426
Up until this point,

7
00:00:24.426 --> 00:00:28.719
Spring would integrate with other third party APIs that had their dependency

8
00:00:28.719 --> 00:00:32.552
and would thus force you to use their logging approach.

9
00:00:32.552 --> 00:00:37.247
I personally have had applications that had both commons logging configuration,

10
00:00:37.247 --> 00:00:43.149
as well as Log4j configurations in there to just get the logs to work correctly.

11
00:00:43.149 --> 00:00:44.521
As of Spring 5,

12
00:00:44.521 --> 00:00:49.810
they have removed this tight coupling by including their own Spring JCL jar,

13
00:00:49.810 --> 00:00:53.371
which does this logging bridge for you.

14
00:00:53.371 --> 00:00:56.202
What this logging bridge is meant to be used for is

15
00:00:56.202 --> 00:00:58.193
just the frameworks logging purposes,

16
00:00:58.193 --> 00:01:02.622
both in the core framework and in its extensions.

17
00:01:02.622 --> 00:01:03.544
For your applications,

18
00:01:03.544 --> 00:01:15.000
they still prefer you to use a direct use of Log4j or SLF4J. Let's go ahead and look at a logging example now.

