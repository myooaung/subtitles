1
00:00:01,778 --> 00:00:06,914
You can now use assertions to handle and expect an exception being thrown.

2
00:00:06,914 --> 00:00:10,165
The other nice feature of the way that they are being programmed now

3
00:00:10,165 --> 00:00:14,002
and the main reason that they were moved to the assertions class and

4
00:00:14,002 --> 00:00:18,269
not the test annotation is that you can now use lambdas to write the

5
00:00:18,269 --> 00:00:20,023
expected outcome of the test.

6
00:00:20,023 --> 00:00:26,940
Let's look at a demo of JUnit 4 exception handling versus JUnit 5.

7
00:00:26,940 --> 00:00:30,570
I've gone ahead and created two classes to illustrate the

8
00:00:30,570 --> 00:00:34,501
difference between exception handling in JUnit 5 and 4.

9
00:00:34,501 --> 00:00:39,579
On the left, I have the JUnit 5 test, and on the right, I have the JUnit 4 test.

10
00:00:39,579 --> 00:00:44,169
The key differences here, as you can see on the right on line 7,

11
00:00:44,169 --> 00:00:50,379
we have a test with a value of expected = Exception.

12
00:00:50,379 --> 00:00:50,944
class.

13
00:00:50,944 --> 00:00:53,598
And on the left, we only have the @Test annotation,

14
00:00:53,598 --> 00:00:57,630
and we've moved that code down to the Assertions.

15
00:00:57,630 --> 00:00:59,787
assertThrows on line 12.

16
00:00:59,787 --> 00:01:02,413
So you can see that the assertion here is saying that

17
00:01:02,413 --> 00:01:04,720
we're expecting an exception to be thrown,

18
00:01:04,720 --> 00:01:08,434
and then there's a lambda expression that illustrates what that

19
00:01:08,434 --> 00:01:12,270
exception's going to be and how we should handle that.

20
00:01:12,270 --> 00:01:14,536
Let me combine these two so that you can see the code a

21
00:01:14,536 --> 00:01:17,029
little bit better in the JUnit 5 example.

22
00:01:17,029 --> 00:01:22,212
Now this test does look a little bit more complex than what you had in 4,

23
00:01:22,212 --> 00:01:25,306
and that's because we've started to embrace lambdas in here.

24
00:01:25,306 --> 00:01:30,175
Let's run this test and you can see what this looks like and

25
00:01:30,175 --> 00:01:35,286
the code that gets returned based off of whether it was a

26
00:01:35,286 --> 00:01:36,890
successful code or an error code.

27
00:01:36,890 --> 00:01:39,746
So let's right-click and say Run As, JUnit Test.

28
00:01:39,746 --> 00:01:42,573
And our error came back handled,

29
00:01:42,573 --> 00:01:48,625
and we got a green test because the exception was expected to be thrown,

30
00:01:48,625 --> 00:01:50,527
and the assertion caught it.

31
00:01:50,527 --> 00:01:52,377
Now let's look at a little slightly different example,

32
00:01:52,377 --> 00:01:54,893
and that's at the bottom here, we have a timeout.

33
00:01:54,893 --> 00:01:58,456
So we're saying that we expect a timeout to happen inside of our

34
00:01:58,456 --> 00:02:00,121
application and to handle that accordingly.

35
00:02:00,121 --> 00:02:04,275
So we can say if this longer than 10 ms,

36
00:02:04,275 --> 00:02:08,654
then we want to catch an exception being thrown or an

37
00:02:08,654 --> 00:02:10,163
interrupted exception being thrown,

38
00:02:10,163 --> 00:02:15,150
so the thread is going to wake up if it's a duration of 10 ms.

39
00:02:15,150 --> 00:02:20,434
And what that would look like in JUnit 4 is a little bit different.

40
00:02:20,434 --> 00:02:22,661
It wasn't exactly clear what the timeout was,

41
00:02:22,661 --> 00:02:29,326
so we get to use that Duration API and we get to use the Assertions API as well.

42
00:02:29,326 --> 00:02:32,636
If we run this, it's going to work as expected as well.

43
00:02:32,636 --> 00:02:34,878
Right-click, Run As, JUnit Test.

44
00:02:34,878 --> 00:02:37,568
And that will succeed as well.

45
00:02:37,568 --> 00:02:41,272
And you can see that the timeout was handled the correct way.

46
00:02:41,272 --> 00:02:46,448
And the key point that I want to point out here is that we can

47
00:02:46,448 --> 00:02:49,320
begin handling lambdas with our exceptions,

48
00:02:49,320 --> 00:03:01,000
and let's talk a little bit more about assertions and the power of lambdas inside those assertions.

