1
00:00:01,777 --> 00:00:03,774
To demonstrate the logging configuration,

2
00:00:03,774 --> 00:00:09,670
I went ahead and copied the default methods example that we used

3
00:00:09,670 --> 00:00:13,583
previously into a logging project just called LoggingExample.

4
00:00:13,583 --> 00:00:18,343
And just as a reminder, all of these projects are in the exercise files,

5
00:00:18,343 --> 00:00:23,176
as well as the GitHub repo that we mentioned in the first module.

6
00:00:23,176 --> 00:00:28,431
To start the configuration, I went ahead and added to the pom.

7
00:00:28,431 --> 00:00:32,548
xml these five dependencies, the log4j-api and the log4j-core,

8
00:00:32,548 --> 00:00:36,639
which if I was just using a properties file configuration,

9
00:00:36,639 --> 00:00:39,229
this is all I would've needed to have added,

10
00:00:39,229 --> 00:00:43,355
but I decided to mix it up since you've probably already seen a Log4j

11
00:00:43,355 --> 00:00:48,364
configuration for XML and one using the properties files,

12
00:00:48,364 --> 00:00:51,916
I went ahead and used a JSON configuration.

13
00:00:51,916 --> 00:00:56,773
And in doing so, I had to add the jackson-core,

14
00:00:56,773 --> 00:00:58,593
jackson-databind, and jackson-annotations dependencies.

15
00:00:58,593 --> 00:01:03,559
The next thing I had to do was create a log4j2.

16
00:01:03,559 --> 00:01:04,498
json file.

17
00:01:04,498 --> 00:01:09,903
And this file looks very similar to the XML or properties files

18
00:01:09,903 --> 00:01:12,795
configurations you've probably seen in the past.

19
00:01:12,795 --> 00:01:16,540
I added a configuration section in here where I

20
00:01:16,540 --> 00:01:23,307
defined the Appenders and the Loggers, and then I just tied those to the System.

21
00:01:23,307 --> 00:01:23,767
out.

22
00:01:23,767 --> 00:01:26,907
The other thing that I had to do was just go in and create a private

23
00:01:26,907 --> 00:01:32,855
static final Logger in the class and begin saying logger.

24
00:01:32,855 --> 00:01:33,450
trace.

25
00:01:33,450 --> 00:01:36,903
And you'll notice that it's tied to trace and that our log level and

26
00:01:36,903 --> 00:01:40,876
our JSON configuration is set at trace as well.

27
00:01:40,876 --> 00:01:41,709
Let's run this,

28
00:01:41,709 --> 00:01:45,392
and I'll tell you right off the bat we're going to see one

29
00:01:45,392 --> 00:01:47,843
problem with this inside of our application.

30
00:01:47,843 --> 00:01:51,442
If I right-click and Run As, Java Application,

31
00:01:51,442 --> 00:01:57,199
you're going to see a lot of information logged to the console now.

32
00:01:57,199 --> 00:02:01,237
So now we have all of this trace debug information

33
00:02:01,237 --> 00:02:03,256
dumped out to our application.

34
00:02:03,256 --> 00:02:06,127
We clearly don't want that all the time,

35
00:02:06,127 --> 00:02:10,427
so we can easily tune our logging, and this is why I like Log4j.

36
00:02:10,427 --> 00:02:11,768
It's really simple to do.

37
00:02:11,768 --> 00:02:13,320
Other ones are just as simple.

38
00:02:13,320 --> 00:02:15,908
You may be even more familiar with one over another.

39
00:02:15,908 --> 00:02:20,275
I just think that the Log4j configuration is very simple to do this.

40
00:02:20,275 --> 00:02:26,024
I'm going to go ahead and add another logger inside of here.

41
00:02:26,024 --> 00:02:29,031
And I already have the code written, so I'm just going to copy and paste it in.

42
00:02:29,031 --> 00:02:30,952
And you'll see that I've defined a logger.

43
00:02:30,952 --> 00:02:32,431
Its name is org.

44
00:02:32,431 --> 00:02:32,800
springframework.

45
00:02:32,800 --> 00:02:38,939
Well its name ties to the package that I want to tune that specific logging for.

46
00:02:38,939 --> 00:02:44,686
And you can see I've set the level there on line 14 to level: error,

47
00:02:44,686 --> 00:02:49,233
and then I've tied it to the appender for the console.

48
00:02:49,233 --> 00:02:51,524
So I'm still going to log it to the console,

49
00:02:51,524 --> 00:02:54,725
and I honestly could have it log out to files,

50
00:02:54,725 --> 00:02:58,446
to emails, to rolling file appenders, whatever I wanted to.

51
00:02:58,446 --> 00:03:00,329
This isn't a course on logging.

52
00:03:00,329 --> 00:03:01,517
That's a separate course.

53
00:03:01,517 --> 00:03:05,466
But I can now tune and tweak this in here using this configuration.

54
00:03:05,466 --> 00:03:08,078
I'm going to go ahead and save this.

55
00:03:08,078 --> 00:03:13,659
Now all of the Spring console messages that are logged to trace here down

56
00:03:13,659 --> 00:03:19,037
below are going to be tuned to only show if there is an error.

57
00:03:19,037 --> 00:03:26,447
Let me go back to our application and run that again.

58
00:03:26,447 --> 00:03:32,121
And you'll see that we've lost all of that information and only show our traces.

59
00:03:32,121 --> 00:03:34,901
So we have our trace for our application starting up.

60
00:03:34,901 --> 00:03:36,182
There's a warning message.

61
00:03:36,182 --> 00:03:38,423
This is actually a Spring configuration problem.

62
00:03:38,423 --> 00:03:39,650
It's not ours.

63
00:03:39,650 --> 00:03:42,921
It's a known logged bug inside of Spring.

64
00:03:42,921 --> 00:03:46,229
And then our post construct and our test message and

65
00:03:46,229 --> 00:03:49,013
then our trace for the shutdown.

66
00:03:49,013 --> 00:03:55,373
So really easy to configure that logging level inside of our application,

67
00:03:55,373 --> 00:04:00,248
as well as to tune logging for the entire application and all the

68
00:04:00,248 --> 00:04:03,864
different APIs that are used inside of our app as well.

69
00:04:03,864 --> 00:04:04,787
So it's really easy.

70
00:04:04,787 --> 00:04:08,751
They've cleaned a lot of this up and allow us to tune it all

71
00:04:08,751 --> 00:04:12,547
using just one tried and true logging mechanism,

72
00:04:12,547 --> 00:04:13,022
Log4j.

73
00:04:13,022 --> 00:04:25,000
You can also use Commons logging or the Java util logging, but they recommend either Log4c or Commons logging for your own applications.

