WEBVTT
1
00:00:01.724 --> 00:00:05.293
Creating the component index is actually quite simple.

2
00:00:05.293 --> 00:00:08.695
I've created a simple Spring boot project here.

3
00:00:08.695 --> 00:00:12.468
And inside of the pom.

4
00:00:12.468 --> 00:00:19.259
xml, I have added the code for the spring-context-indexer.

5
00:00:19.259 --> 00:00:22.762
You can see below here on lines 22 through 26,

6
00:00:22.762 --> 00:00:26.162
it's just a simple dependency inside of our application.

7
00:00:26.162 --> 00:00:31.880
The version of it is being included through the parent of our Spring boot

8
00:00:31.880 --> 00:00:36.486
starter project you can see above here where we have 2.

9
00:00:36.486 --> 00:00:36.906
0.

10
00:00:36.906 --> 00:00:37.327
0.

11
00:00:37.327 --> 00:00:37.748
BUILD.

12
00:00:37.748 --> 00:00:38.169
SNAPSHOT,

13
00:00:38.169 --> 00:00:42.304
and it will pull down the most latest version of that

14
00:00:42.304 --> 00:00:44.755
indexer to build inside of our application.

15
00:00:44.755 --> 00:00:50.468
Now all I've done is created some fake components inside of here.

16
00:00:50.468 --> 00:00:53.609
I wrote a little script to auto generate these,

17
00:00:53.609 --> 00:00:55.480
and there's really nothing in here.

18
00:00:55.480 --> 00:00:58.776
But I'm just doing it to show you how it will create

19
00:00:58.776 --> 00:01:00.688
this index for us automatically.

20
00:01:00.688 --> 00:01:05.356
So all 200 of these files look just like this with a different name.

21
00:01:05.356 --> 00:01:07.567
Let me switch over to my command line,

22
00:01:07.567 --> 00:01:11.920
and we'll run the indexer to see what this done on our code.

23
00:01:11.920 --> 00:01:20.674
From the command line, all I need to do is run mvn clean compile package,

24
00:01:20.674 --> 00:01:23.341
and you don't even have to run clean and compile.

25
00:01:23.341 --> 00:01:26.574
I just like to to make sure that I've recreated

26
00:01:26.574 --> 00:01:28.431
that index from scratch each time.

27
00:01:28.431 --> 00:01:31.828
And it will go through and scan the entire source tree,

28
00:01:31.828 --> 00:01:37.120
compile all of those files, and then build that index for us.

29
00:01:37.120 --> 00:01:44.479
And if we navigate down into our target directory, there is a classes directory.

30
00:01:44.479 --> 00:01:48.113
And since the package type of this application is jar,

31
00:01:48.113 --> 00:01:51.857
there will just be this META-INF folder in here.

32
00:01:51.857 --> 00:01:58.166
So if we cd into it, we can see that there is a spring.

33
00:01:58.166 --> 00:01:59.581
components index file.

34
00:01:59.581 --> 00:02:06.133
Let me open up this file in my text editor just so you can see

35
00:02:06.133 --> 00:02:08.977
what the index looks like that's created.

36
00:02:08.977 --> 00:02:11.936
Here is the index that it's created for us.

37
00:02:11.936 --> 00:02:16.345
Notice that there is not a specific order that this gets created.

38
00:02:16.345 --> 00:02:18.163
You can manipulate this if you want,

39
00:02:18.163 --> 00:02:20.949
and you could create this by hand if you want.

40
00:02:20.949 --> 00:02:24.175
All it's doing is going through and giving the fully

41
00:02:24.175 --> 00:02:28.679
qualified package name and class name and then saying what

42
00:02:28.679 --> 00:02:30.980
type of stereotype annotation it is.

43
00:02:30.980 --> 00:02:33.870
So the first line in this is com.

44
00:02:33.870 --> 00:02:34.310
example.

45
00:02:34.310 --> 00:02:34.750
service.

46
00:02:34.750 --> 00:02:39.479
gen1, which is the package, and it's the class Component1_8,

47
00:02:39.479 --> 00:02:44.102
and it is a component stereotype.

48
00:02:44.102 --> 00:02:50.197
And it goes clear down through all 200 of these components that we've created.

49
00:02:50.197 --> 00:02:54.452
Since it was a jar, you would just package that up.

50
00:02:54.452 --> 00:02:56.013
In fact, it's already done for us.

51
00:02:56.013 --> 00:02:59.376
We could go explore the jar, but it's really not that interesting.

52
00:02:59.376 --> 00:03:04.206
Now instead of our application having to go through and scan all of

53
00:03:04.206 --> 00:03:07.781
those classes at runtime to build this index for us,

54
00:03:07.781 --> 00:03:10.520
it just looks for this file, loads it in,

55
00:03:10.520 --> 00:03:11.433
then it's done.

56
00:03:11.433 --> 00:03:12.857
So it's a lot faster startup.

57
00:03:12.857 --> 00:03:15.903
Like I said, the magic number seems to be around 200.

58
00:03:15.903 --> 00:03:19.345
To really get good performance metrics on it though,

59
00:03:19.345 --> 00:03:22.751
we should do this will real-world examples and not generated

60
00:03:22.751 --> 00:03:30.000
classes because it doesn't really tell us a lot when the files themselves are just empty.

