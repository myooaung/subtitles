WEBVTT
1
00:00:01.857 --> 00:00:08.162
One of the key reasons of rewriting main pieces of the API is that

2
00:00:08.162 --> 00:00:13.007
we could now move some of that functionality out of the @Test

3
00:00:13.007 --> 00:00:15.659
annotation and down into the Assertions API.

4
00:00:15.659 --> 00:00:20.409
And the reason for doing this is that we can now use the

5
00:00:20.409 --> 00:00:22.885
power of lambdas inside of our code.

6
00:00:22.885 --> 00:00:25.918
As we started covering with exceptions,

7
00:00:25.918 --> 00:00:31.222
assertions now can heavily take advantage of the use of lambdas in them.

8
00:00:31.222 --> 00:00:34.833
Let's look at both a simple example, such as we have on this slide here,

9
00:00:34.833 --> 00:00:38.848
and a more complex example where we aggregate multiple

10
00:00:38.848 --> 00:00:42.710
assertions together inside of one statement.

11
00:00:42.710 --> 00:00:45.552
I've gone ahead and created two tests here to show you

12
00:00:45.552 --> 00:00:47.313
some of the changes with assertions.

13
00:00:47.313 --> 00:00:51.299
The first one's a very basic test where we have an assertTrue,

14
00:00:51.299 --> 00:00:56.441
and you can see we have a value that says 4 == 2 + 2.

15
00:00:56.441 --> 00:01:01.664
And obviously that is a true statement, and it's going to assert to true.

16
00:01:01.664 --> 00:01:03.528
It's going to evaluate to a true value,

17
00:01:03.528 --> 00:01:06.689
but you'll notice that we have the use of lambdas here where we

18
00:01:06.689 --> 00:01:09.112
can say that we want to dump this expression,

19
00:01:09.112 --> 00:01:13.206
Numbers 4 and 2 + 2 are equal, back out.

20
00:01:13.206 --> 00:01:15.306
We can also do some more complex things here,

21
00:01:15.306 --> 00:01:19.486
but you can see how easy it is to start using lambdas in this expression.

22
00:01:19.486 --> 00:01:23.677
The test below that is where we say we should assert all of

23
00:01:23.677 --> 00:01:26.271
these equal to true or to evaluate true.

24
00:01:26.271 --> 00:01:33.058
And you can see, we've passed in a couple of simple integers into an Arrays.

25
00:01:33.058 --> 00:01:38.123
asList method that will give us back a list of type Integer,

26
00:01:38.123 --> 00:01:41.093
and we can do multiple assertions on all these.

27
00:01:41.093 --> 00:01:44.554
So on line 21 we're saying let's assert that all of these

28
00:01:44.554 --> 00:01:46.604
assertions are going to evaluate to true,

29
00:01:46.604 --> 00:01:49.902
and this is where the power of those assertions and

30
00:01:49.902 --> 00:01:52.101
lambdas really start to come together.

31
00:01:52.101 --> 00:01:56.578
You can see that on lines 22, 23, 24, 25,

32
00:01:56.578 --> 00:01:58.369
and down to 28,

33
00:01:58.369 --> 00:02:03.340
we have multiple assertions testing various things inside of this list.

34
00:02:03.340 --> 00:02:06.137
The first three statements are looking to see that those values are,

35
00:02:06.137 --> 00:02:12.106
in fact, correct, and the fourth one is expecting an exception to get thrown.

36
00:02:12.106 --> 00:02:16.643
So we could've tested whether or not an index out of bounds exception is

37
00:02:16.643 --> 00:02:22.246
going to get thrown or some illegal modifier or any number of things that

38
00:02:22.246 --> 00:02:24.570
we want to based off of that collection.

39
00:02:24.570 --> 00:02:26.960
And you really start to get a feel of some of the more

40
00:02:26.960 --> 00:02:29.001
complex things we can do with assertions here.

41
00:02:29.001 --> 00:02:33.483
Let's run this so you can get an idea of what this code with

42
00:02:33.483 --> 00:02:36.641
execute and look like as a successful test.

43
00:02:36.641 --> 00:02:40.628
I'm just going to right-click inside the body of this and say Run As,

44
00:02:40.628 --> 00:02:44.239
JUnit Test, and that should run both of my tests for me.

45
00:02:44.239 --> 00:02:49.871
You'll see we have the shouldAssertAll and the numbersShouldEqual test as well,

46
00:02:49.871 --> 00:02:55.113
and those both assert to true, and we've got our green successful test out of it.

47
00:02:55.113 --> 00:02:57.799
Also, notice how fast these tests are executing.

48
00:02:57.799 --> 00:03:00.361
I'm not doing a lot of things in here,

49
00:03:00.361 --> 00:03:04.000
but there's a big performance improvement in JUnit 5 as well.

50
00:03:04.000 --> 00:03:18.000
Let's look at a new API that was added and enhanced as JUnit 5 came out dealing with assumptions instead of just assertions.

