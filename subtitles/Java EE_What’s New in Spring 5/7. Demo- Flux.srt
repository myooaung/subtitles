1
00:00:01,819 --> 00:00:04,505
Going back to our controller,

2
00:00:04,505 --> 00:00:10,520
I'm going to stop our application and give ourselves some room in

3
00:00:10,520 --> 00:00:14,972
between the repository declaration and the findById method that we

4
00:00:14,972 --> 00:00:21,214
just created and paste in here some code that I've already written

5
00:00:21,214 --> 00:00:25,337
on dealing with a Flux object.

6
00:00:25,337 --> 00:00:28,206
Import the classes that we need here.

7
00:00:28,206 --> 00:00:36,046
And you can see to do a GetMapping for all of the people under the Person URL,

8
00:00:36,046 --> 00:00:38,531
so a standard RESTful syntax.

9
00:00:38,531 --> 00:00:40,515
If I just ask for /person,

10
00:00:40,515 --> 00:00:45,056
it will return all the persons or people that we have inside of our database.

11
00:00:45,056 --> 00:00:49,043
And you can see on line 28 here, we do a repository.

12
00:00:49,043 --> 00:00:49,499
findAll,

13
00:00:49,499 --> 00:00:56,510
and you can see on line 30 here that I can use the helper method

14
00:00:56,510 --> 00:01:01,644
fromIterable that I pass in an Iterable object or a collection,

15
00:01:01,644 --> 00:01:07,451
and it will go through and stream those through a Flux object back to my UI.

16
00:01:07,451 --> 00:01:13,463
That's all I have to do to create a Flux object that responds with a collection.

17
00:01:13,463 --> 00:01:18,605
Now one thing that caught me off guard when I first started using this

18
00:01:18,605 --> 00:01:22,642
is that notice I'm returning a Flux of type person,

19
00:01:22,642 --> 00:01:25,593
not a Flux of type list.

20
00:01:25,593 --> 00:01:32,676
So this will stream back those requests, but it's doing it as the Person object.

21
00:01:32,676 --> 00:01:35,725
May make sense to you, may not.

22
00:01:35,725 --> 00:01:39,489
The Flux object itself is handling the iterable

23
00:01:39,489 --> 00:01:42,940
underneath the hood of that object.

24
00:01:42,940 --> 00:01:44,898
So under the covers, there is a list,

25
00:01:44,898 --> 00:01:48,598
but all you care about is the Flux of type person.

26
00:01:48,598 --> 00:01:54,063
Let's go ahead and save this and exit our full screen.

27
00:01:54,063 --> 00:01:57,802
We'll start our application back up.

28
00:01:57,802 --> 00:02:02,787
I'm going to switch back to my browser.

29
00:02:02,787 --> 00:02:07,197
And now rather than requesting a person with the id of 1,

30
00:02:07,197 --> 00:02:12,302
I can change that URL to just /person and hit Enter,

31
00:02:12,302 --> 00:02:17,378
and you'll receive a stream back with all of those objects in there.

32
00:02:17,378 --> 00:02:18,987
So I have bryan, dan,

33
00:02:18,987 --> 00:02:23,232
and alex that all get retrieved from that database

34
00:02:23,232 --> 00:02:25,360
and displayed through a stream.

35
00:02:25,360 --> 00:02:30,196
Really easy for me to use this stream and not have to

36
00:02:30,196 --> 00:02:32,641
iterate through those individual objects.

37
00:02:32,641 --> 00:02:35,685
And if for some reason it takes a while to build that,

38
00:02:35,685 --> 00:02:38,659
it will retrieve those records one at a time.

39
00:02:38,659 --> 00:02:42,613
If you're wondering why that request may take a long time,

40
00:02:42,613 --> 00:02:44,925
if you've ever dealt with Hibernate for very long,

41
00:02:44,925 --> 00:02:46,859
you've ran into the N+1 select problem.

42
00:02:46,859 --> 00:02:49,579
And if that doesn't make any sense to you,

43
00:02:49,579 --> 00:02:50,812
it's not a big deal,

44
00:02:50,812 --> 00:02:53,581
but that's where I have to go retrieve data from multiple

45
00:02:53,581 --> 00:02:55,707
data stores based off of each request,

46
00:02:55,707 --> 00:02:58,758
and those can take a long time to stream back.

47
00:02:58,758 --> 00:03:03,985
If I do that as a stream, I can respond with these as I get them,

48
00:03:03,985 --> 00:03:13,000
and my UI will still be responsive. Let's now dive into what some of the problems are with using streams.

