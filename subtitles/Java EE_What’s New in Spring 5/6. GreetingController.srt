1
00:00:01,850 --> 00:00:07,665
The last bit of code that we need to add to our application is the controller.

2
00:00:07,665 --> 00:00:11,474
And this is probably the most complex file out of all the ones that we have,

3
00:00:11,474 --> 00:00:15,101
but it's still pretty simple all things considered.

4
00:00:15,101 --> 00:00:19,935
This controller takes advantage of the greeting class that we just created.

5
00:00:19,935 --> 00:00:21,688
Once we have all of this in place,

6
00:00:21,688 --> 00:00:24,045
we can also run our application and see the results.

7
00:00:24,045 --> 00:00:27,393
Let's go ahead and add this code in our GreetingController

8
00:00:27,393 --> 00:00:31,777
and then run our SpringBootApplication.

9
00:00:31,777 --> 00:00:35,594
Like our previous demos, I've gone ahead and opened up the GreetingController,

10
00:00:35,594 --> 00:00:40,316
and I'm going to paste in that code for our controller.

11
00:00:40,316 --> 00:00:44,682
You'll notice it looks pretty similar to what a Java-configured controller

12
00:00:44,682 --> 00:00:48,909
would look like in Spring with a few things just being relaxed.

13
00:00:48,909 --> 00:00:51,587
Our class definition is more relaxed.

14
00:00:51,587 --> 00:00:55,888
Our variable names don't require a type and our

15
00:00:55,888 --> 00:00:58,905
obvious lack of use of semicolons.

16
00:00:58,905 --> 00:01:01,393
And our function down below here on line 14,

17
00:01:01,393 --> 00:01:03,931
we don't have to define a return type.

18
00:01:03,931 --> 00:01:09,268
We don't have to define that it's a public, a void, or whatever it is.

19
00:01:09,268 --> 00:01:12,380
We can just say it's a function, its name is Greeting,

20
00:01:12,380 --> 00:01:15,307
here's the parameters we're going to pass in,

21
00:01:15,307 --> 00:01:20,489
and then you can see that it's returned as signified by the equals sign and

22
00:01:20,489 --> 00:01:23,563
saying that it's going to return the Greeting object.

23
00:01:23,563 --> 00:01:26,087
And this will automatically figure out that we're

24
00:01:26,087 --> 00:01:29,129
going to return that file as a JSON,

25
00:01:29,129 --> 00:01:34,914
so that Greeting object is going to get returned as a JSON request.

26
00:01:34,914 --> 00:01:39,821
Let's switch over to our command line and run this,

27
00:01:39,821 --> 00:01:47,445
and we run this command by just typing in gradlew bootRun.

28
00:01:47,445 --> 00:01:52,307
And just like before, if you haven't ran this before,

29
00:01:52,307 --> 00:01:54,206
it's going to download a few things.

30
00:01:54,206 --> 00:01:57,146
It'll take it a few seconds to start up,

31
00:01:57,146 --> 00:02:01,397
and then our application will be up and ready to run.

32
00:02:01,397 --> 00:02:07,005
So now our application has started like a regular Spring application has,

33
00:02:07,005 --> 00:02:12,485
and I can switch over to our browser and hit that

34
00:02:12,485 --> 00:02:14,973
service and see what it returns.

35
00:02:14,973 --> 00:02:18,409
And I can hit that service by typing localhost:8080/greeting?

36
00:02:18,409 --> 00:02:28,932
name=Bryan, or whatever name you want to pass into it,

37
00:02:28,932 --> 00:02:33,607
and this ties to the parameters that we had passed into our GreetingController.

38
00:02:33,607 --> 00:02:39,940
When I hit Enter, it'll return back a JSON response with an id of 1 and Hello,

39
00:02:39,940 --> 00:02:40,367
Bryan.

40
00:02:40,367 --> 00:02:45,191
If I change that to another name, so we'll do Steve,

41
00:02:45,191 --> 00:02:50,697
it'll have an incremented id of 2 because that atomic

42
00:02:50,697 --> 00:02:53,668
counter is still in our session and alive,

43
00:02:53,668 --> 00:02:56,885
and I've changed the name, so I've made multiple requests.

44
00:02:56,885 --> 00:02:58,075
You get the idea.

45
00:02:58,075 --> 00:03:00,117
it's a pretty basic application,

46
00:03:00,117 --> 00:03:04,594
but it only took us three files and a Gradle configuration

47
00:03:04,594 --> 00:03:09,648
file to have a complete application up and running using this

48
00:03:09,648 --> 00:03:12,089
syntax and this configuration.

49
00:03:12,089 --> 00:03:13,724
Pretty straightforward and pretty simple.

50
00:03:13,724 --> 00:03:17,675
It's a lot less code than if you were to just do

51
00:03:17,675 --> 00:03:19,663
this in a regular Java application.

52
00:03:19,663 --> 00:03:22,303
SpringBoot does a lot of that heavy lifting for you,

53
00:03:22,303 --> 00:03:24,969
but if you're tired of that Java syntax,

54
00:03:24,969 --> 00:03:30,527
you can go ahead and use Kotlin to make that a lot lighter and a lot simpler.

55
00:03:30,527 --> 00:03:32,143
And if you're doing Android development,

56
00:03:32,143 --> 00:03:34,142
you want to be a full stack developer,

57
00:03:34,142 --> 00:03:43,000
you can keep them in the same languages and exercise some of that flexibility in your whole stack.

