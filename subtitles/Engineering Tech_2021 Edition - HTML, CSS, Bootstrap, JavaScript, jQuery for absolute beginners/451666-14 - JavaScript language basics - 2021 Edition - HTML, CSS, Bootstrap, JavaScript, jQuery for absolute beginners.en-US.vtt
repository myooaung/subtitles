WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.110 --> 00:00:04.710
We now understand JavaScript basics using java script,

00:00:04.710 --> 00:00:06.885
we can are the intelligence to the page.

00:00:06.885 --> 00:00:09.840
We can make the page interactive.

00:00:09.840 --> 00:00:14.685
Before we dive into manipulating HTML and CSS elements with JavaScript,

00:00:14.685 --> 00:00:17.925
let's understand the JavaScript language basics.

00:00:17.925 --> 00:00:21.630
So there are various ways you can practice JavaScript.

00:00:21.630 --> 00:00:26.760
The best ways to add a script tag and write your JavaScript code.

00:00:26.760 --> 00:00:32.615
Within that, we'll declare a variable,

00:00:32.615 --> 00:00:35.405
correlates a red one.

00:00:35.405 --> 00:00:38.040
And we'll say Hello World.

00:00:38.500 --> 00:00:42.200
To learn any language, The base case to print something

00:00:42.200 --> 00:00:45.920
to the console and see the output.

00:00:45.920 --> 00:00:51.245
For a webpage. We can do the same by doing console.log.

00:00:51.245 --> 00:00:52.715
As you might have guessed,

00:00:52.715 --> 00:00:56.610
this will get printed to the console up to browser.

00:00:57.520 --> 00:01:02.915
We have written this chordal in the script element of Contact Us pitch.

00:01:02.915 --> 00:01:05.930
Let's see the output. When we load the page,

00:01:05.930 --> 00:01:10.260
we'll right click and say inspect element.

00:01:20.590 --> 00:01:24.905
Now you can see that hello world is getting printed to the console.

00:01:24.905 --> 00:01:31.085
So this is the way you can try out different JavaScript syntax and see the output.

00:01:31.085 --> 00:01:33.410
You can also directly code here.

00:01:33.410 --> 00:01:38.615
For example, I can write VAD one

00:01:38.615 --> 00:01:44.960
equals hello and print VR1.

00:01:44.960 --> 00:01:52.800
It'll get printed. And I can even say Y1 plus World.

00:01:53.200 --> 00:01:56.330
And it will print your I can write.

00:01:56.330 --> 00:02:00.200
I can do some arithmetic operations and see the output here.

00:02:00.200 --> 00:02:04.370
You can do Control L to clear the console.

00:02:04.370 --> 00:02:07.595
So you can also practice so JavaScript directly the

00:02:07.595 --> 00:02:12.560
Console tab of the browser when you do the inspect element.

00:02:12.560 --> 00:02:16.880
But let's write all our code here and see the output in JavaScript,

00:02:16.880 --> 00:02:21.229
the sentences with a semicolon.

00:02:21.229 --> 00:02:23.030
So that is optional.

00:02:23.030 --> 00:02:26.150
We'll make it a practice to art semicolon.

00:02:26.150 --> 00:02:30.200
Let's look at what else is there in the language.

00:02:30.200 --> 00:02:33.410
It's like java or any other programming language.

00:02:33.410 --> 00:02:35.315
The syntax is very close.

00:02:35.315 --> 00:02:45.800
And Java, okay, let's do some arithmetic operation, 5X plus nine.

00:02:45.800 --> 00:02:50.345
And we can do multiplication and division.

00:02:50.345 --> 00:02:54.170
Just remember that variables are declared using LET.

00:02:54.170 --> 00:02:57.200
We can also say let v two

00:02:57.200 --> 00:03:07.820
equals three, equals six.

00:03:07.820 --> 00:03:17.270
And then now we can say that for.

00:03:17.270 --> 00:03:26.220
And therefore equals 2x plus three.

00:03:26.440 --> 00:03:32.435
And we can now try to print VAR for.

00:03:32.435 --> 00:03:35.585
We can put up ten plus six.

00:03:35.585 --> 00:03:38.880
You can declare a boolean type.

00:03:45.790 --> 00:03:51.150
And we can write if that fails.

00:03:53.290 --> 00:03:58.740
Then console dot log.

00:03:59.080 --> 00:04:02.280
This is true.

00:04:03.160 --> 00:04:05.375
These are your AD block,

00:04:05.375 --> 00:04:07.250
like any other programming language.

00:04:07.250 --> 00:04:16.680
Hell's console, dot log is false.

00:04:24.070 --> 00:04:31.010
And if we change verify to false, should print.

00:04:31.010 --> 00:04:37.310
This is false. This is an example of how you can declare Boolean variables.

00:04:37.310 --> 00:04:39.410
Let's see how to declare an array.

00:04:39.410 --> 00:04:45.920
We live at 61234.

00:04:45.920 --> 00:04:48.320
So this is an area we've declared.

00:04:48.320 --> 00:04:53.060
We can also have combination of integer and string in an array.

00:04:53.060 --> 00:04:56.375
Javascript is flexible on that.

00:04:56.375 --> 00:05:02.210
We can say one, ABC PQR.

00:05:02.210 --> 00:05:04.175
It would not complain.

00:05:04.175 --> 00:05:07.670
Nor to print an element of direct.

00:05:07.670 --> 00:05:17.660
We'll say console.log verse 70, which is one.

00:05:17.660 --> 00:05:20.615
And if we do that 71,

00:05:20.615 --> 00:05:23.190
it should print abc.

00:05:23.500 --> 00:05:27.725
Now you can write JavaScript code and see the output.

00:05:27.725 --> 00:05:29.060
If you've done programming,

00:05:29.060 --> 00:05:31.565
you'll find it very easy to pick up.

00:05:31.565 --> 00:05:33.590
Syntax is very simple.

00:05:33.590 --> 00:05:35.060
It's like Java language.

00:05:35.060 --> 00:05:37.340
You can play D flow for loop while loop.

00:05:37.340 --> 00:05:39.395
To get started on JavaScript programming,

00:05:39.395 --> 00:05:41.840
you need to know the language basics.

00:05:41.840 --> 00:05:44.704
And after that, you need to apply JavaScript

00:05:44.704 --> 00:05:48.409
to make your pace dynamic or to make your page intelligent.

00:05:48.409 --> 00:05:50.540
So that's the part you should focus on.

00:05:50.540 --> 00:05:53.735
Language basics is really easy to pick up.

00:05:53.735 --> 00:05:57.485
You can write comments in your code like this.

00:05:57.485 --> 00:06:00.210
This is a comment.

00:06:00.610 --> 00:06:04.385
So it would not print this lane.

00:06:04.385 --> 00:06:06.290
But if we move it outside,

00:06:06.290 --> 00:06:10.640
and now liquid is getting printed.

00:06:10.640 --> 00:06:16.460
You can also write command single-line comment with 2's classes.

00:06:16.460 --> 00:06:20.540
This is also one of

00:06:20.540 --> 00:06:24.455
the things that we'll be doing quite frequently in JavaScript is writing new function.

00:06:24.455 --> 00:06:28.910
So let's say we have a function which takes in two input parameters

00:06:28.910 --> 00:06:38.120
and equals a plus b will give some name to it, my sum function.

00:06:38.120 --> 00:06:42.890
It takes a and b and a plus b declared.

00:06:42.890 --> 00:06:46.170
Now we can print this to console.

00:06:48.010 --> 00:06:52.220
Print the sum of a plus b.

00:06:52.220 --> 00:06:56.580
This should be a comma. We need to return this sum.

00:06:59.050 --> 00:07:02.130
Now it should print out.

00:07:02.590 --> 00:07:05.480
You can see 12V is getting printed.

00:07:05.480 --> 00:07:08.210
So these are, you can write a function and invoke it from

00:07:08.210 --> 00:07:12.830
your CT function contains reusable code which can be invoked again and again.

00:07:12.830 --> 00:07:16.474
And in JavaScript, this is how you can write functions.

00:07:16.474 --> 00:07:19.670
These are some basic syntax of JavaScript is not everything,

00:07:19.670 --> 00:07:20.960
but hopefully this has given

00:07:20.960 --> 00:07:24.845
a good starting point and you can explore more on JavaScript.

00:07:24.845 --> 00:07:26.810
But the key thing, as I said,

00:07:26.810 --> 00:07:31.130
you need to understand how to make use of JavaScript to give intelligence to your page.

00:07:31.130 --> 00:07:33.725
Javascript is the language for wave.

00:07:33.725 --> 00:07:35.570
There is angular, there is react,

00:07:35.570 --> 00:07:39.590
that is jQuery and does so many other front-end languages.

00:07:39.590 --> 00:07:42.330
They're all based on JavaScript.
