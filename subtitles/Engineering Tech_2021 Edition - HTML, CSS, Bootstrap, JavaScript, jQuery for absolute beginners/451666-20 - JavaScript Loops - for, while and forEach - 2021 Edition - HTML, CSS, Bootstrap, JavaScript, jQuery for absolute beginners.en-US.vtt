WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.130 --> 00:00:06.510
Let's look at different types of loops available in JavaScript.

00:00:06.510 --> 00:00:12.870
Ruby again opened the contact dot HTML and also the page on life server.

00:00:12.870 --> 00:00:16.320
Let's inspect and open the console.

00:00:16.320 --> 00:00:19.695
Now let's try our for loop.

00:00:19.695 --> 00:00:22.050
This is how you can write a for loop in

00:00:22.050 --> 00:00:29.535
JavaScript or lose ensure

00:00:29.535 --> 00:00:32.970
the code to come out of the loop is written first.

00:00:32.970 --> 00:00:38.280
Otherwise it might get into an infinite loop before I finish writing i plus plus,

00:00:38.280 --> 00:00:44.135
which will increment i and ensure i is greater than two d after looping through 20 times,

00:00:44.135 --> 00:00:47.855
the pace got loaded and the for loop get executed.

00:00:47.855 --> 00:00:52.865
Now it has gone into an infinite loop and the pages continuously loading.

00:00:52.865 --> 00:00:57.240
Now it would not stop unless you stop the labour server.

00:00:57.340 --> 00:01:01.760
To just be very careful while working with loop in

00:01:01.760 --> 00:01:05.435
JavaScript because they automatically load it fewer.

00:01:05.435 --> 00:01:10.370
Loop is in a function it's fine for loop is getting executed when the page loads,

00:01:10.370 --> 00:01:13.700
there's a risk that loop will start before you're finished your code.

00:01:13.700 --> 00:01:15.485
To stop lifesaver, place,

00:01:15.485 --> 00:01:21.110
Control Shift P, and type stoplight server.

00:01:21.110 --> 00:01:24.860
The command is called C to stop the server.

00:01:24.860 --> 00:01:27.185
If the server doesn't stop,

00:01:27.185 --> 00:01:30.395
go to your task manager and kill the Chrome process.

00:01:30.395 --> 00:01:34.745
That is the only way it can kill the page and stop it from running.

00:01:34.745 --> 00:01:37.610
So let's now look at wild loop and refer.

00:01:37.610 --> 00:01:39.770
We write the condition,

00:01:39.770 --> 00:01:41.825
let's increment the variable.

00:01:41.825 --> 00:01:48.650
Let j equal j is less than ten.

00:01:48.650 --> 00:01:52.775
And it can show will print j.

00:01:52.775 --> 00:01:56.030
Now let's start the server again.

00:01:56.030 --> 00:01:57.680
This time it loaded fine.

00:01:57.680 --> 00:01:59.540
Let's go to console.

00:01:59.540 --> 00:02:04.535
We can see that i and j values are getting printed in the loop.

00:02:04.535 --> 00:02:12.080
I 20 times starting from 0 all the way up to 19 and J five times sin a while loop.

00:02:12.080 --> 00:02:15.530
You check whether condition and then make changes to

00:02:15.530 --> 00:02:19.894
the variable so that the condition on we've made up to certain number of execution.

00:02:19.894 --> 00:02:22.670
There is a for each loop also,

00:02:22.670 --> 00:02:24.965
let's declare an array.

00:02:24.965 --> 00:02:29.030
And you can say had dot for each.

00:02:29.030 --> 00:02:33.349
We'll say print function.

00:02:33.349 --> 00:02:37.820
You declare a function called print function.

00:02:37.820 --> 00:02:43.040
We'll pass item and print that in the console.

00:02:43.040 --> 00:02:46.880
You can see that 10203040 are getting printed.

00:02:46.880 --> 00:02:50.450
So this is how you can iterate through an array using for each,

00:02:50.450 --> 00:02:52.355
you can also do that using a for loop,

00:02:52.355 --> 00:02:54.859
but for each allows you to directly

00:02:54.859 --> 00:02:59.940
apply some function on the array without having an additional four loop.

00:03:00.580 --> 00:03:04.970
You can also grab the item index.

00:03:04.970 --> 00:03:08.645
At what index a particular value is.

00:03:08.645 --> 00:03:11.280
We'll try to print that.

00:03:13.330 --> 00:03:16.445
You can notice for each element,

00:03:16.445 --> 00:03:19.535
the index is getting printed for 100 is the index,

00:03:19.535 --> 00:03:22.385
for 21 is the index and so on.

00:03:22.385 --> 00:03:26.060
This is how you can work with for each in JavaScript,

00:03:26.060 --> 00:03:29.209
with foreach, you are able to call a function.

00:03:29.209 --> 00:03:32.180
And the function takes the item in index.

00:03:32.180 --> 00:03:34.580
And based on your requirement,

00:03:34.580 --> 00:03:40.350
you can grab item ended decks and do your programming here.
