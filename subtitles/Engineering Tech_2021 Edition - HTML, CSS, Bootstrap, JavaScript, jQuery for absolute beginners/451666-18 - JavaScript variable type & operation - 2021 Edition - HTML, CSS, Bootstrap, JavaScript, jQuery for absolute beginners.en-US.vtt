WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.250
Now that we understand how to manipulate HTML elements using JavaScript,

00:00:05.250 --> 00:00:09.195
and also we learned the basics of JavaScript syntax.

00:00:09.195 --> 00:00:12.285
Let's see what else we can do with JavaScript.

00:00:12.285 --> 00:00:15.420
We have opened the contact us page,

00:00:15.420 --> 00:00:18.450
which is a very simple page with just one element,

00:00:18.450 --> 00:00:22.380
will be trying out different HTML element manipulation

00:00:22.380 --> 00:00:25.020
with JavaScript to unknown data element.

00:00:25.020 --> 00:00:29.705
So let's comment some of these chord.

00:00:29.705 --> 00:00:33.150
So that will focus on what is new.

00:00:37.810 --> 00:00:41.360
And we'll also remove the footer element.

00:00:41.360 --> 00:00:45.500
So now we have the navigation and only one statement in

00:00:45.500 --> 00:00:50.420
the main body will be modifying this element with JavaScript.

00:00:50.420 --> 00:00:55.020
We'll say ID, contact us.

00:00:55.480 --> 00:00:58.640
Let's add another script element.

00:00:58.640 --> 00:01:02.345
Will get the Contact Us element and we know how to do that.

00:01:02.345 --> 00:01:05.360
Document.getelementbyid.

00:01:05.360 --> 00:01:09.510
And then this particular AD

00:01:13.150 --> 00:01:22.260
in our HTML changed.

00:01:23.230 --> 00:01:28.880
So now we can see that the text has been changed to.

00:01:28.880 --> 00:01:37.710
Since tau will remove this.

00:01:38.950 --> 00:01:43.410
We can put this within a function.

00:01:43.870 --> 00:01:47.970
Change, Contact Us.

00:01:52.720 --> 00:01:57.210
We'll pass the string as a variable.

00:01:59.320 --> 00:02:06.994
And here we would call this change,

00:02:06.994 --> 00:02:15.270
contact us. With new text.

00:02:17.080 --> 00:02:19.505
We'll put a semicolon.

00:02:19.505 --> 00:02:21.875
That's still best practice.

00:02:21.875 --> 00:02:26.690
Now let's see if that text is getting modified. New text.

00:02:26.690 --> 00:02:28.610
We have a function that can modify

00:02:28.610 --> 00:02:34.080
this three element with ID contact us and we are calling that on the page.

00:02:34.080 --> 00:02:40.780
And we'll also print the actual Mrs. being passed to the console.

00:02:40.780 --> 00:02:47.740
Console.log contact so that

00:02:47.740 --> 00:02:52.825
we can see what is the value in the memory which is getting printed in the console,

00:02:52.825 --> 00:02:56.620
and also how it is getting shown in the page.

00:02:56.620 --> 00:02:59.540
Let's declare a variable.

00:03:00.090 --> 00:03:02.860
And we do that using elite.

00:03:02.860 --> 00:03:07.585
Let, LET contact us.

00:03:07.585 --> 00:03:12.160
And typically we write the variables sin camelCase

00:03:12.160 --> 00:03:17.625
starting with small letter and then every ward for slit Rubin caps.

00:03:17.625 --> 00:03:22.370
And it's a standard practice to initialize variables when we declared.

00:03:22.370 --> 00:03:27.170
And we'll call this function

00:03:27.170 --> 00:03:33.800
using contact

00:03:33.800 --> 00:03:40.490
us valuable new text 123.

00:03:40.490 --> 00:03:44.670
Let's move the function to side George JS.

00:03:48.310 --> 00:03:53.960
And as soon as we move it to displace the original contact us.

00:03:53.960 --> 00:03:57.440
And it says that since Contact Us is not defined,

00:03:57.440 --> 00:03:59.825
we'll paste it in the script.

00:03:59.825 --> 00:04:02.900
Then that arrow should go away.

00:04:02.900 --> 00:04:06.575
Let's come back to the page.

00:04:06.575 --> 00:04:12.125
There is still there because we have not included the script in the Contact Us HTML.

00:04:12.125 --> 00:04:13.685
Let's do that.

00:04:13.685 --> 00:04:19.350
Will copy it and paste it in contact dot HTML.

00:04:20.920 --> 00:04:23.855
Now that error is gone.

00:04:23.855 --> 00:04:26.405
It we just met send.

00:04:26.405 --> 00:04:30.740
Makes sure all variables follow camel case naming convinced.

00:04:30.740 --> 00:04:35.135
And they can also start with dollar underscore.

00:04:35.135 --> 00:04:37.520
But it's a good practice to start it with

00:04:37.520 --> 00:04:41.535
a letter and then use camel casing naming convention.

00:04:41.535 --> 00:04:43.480
You can't start variables with number.

00:04:43.480 --> 00:04:47.200
If I change this to three, Contact Us.

00:04:47.200 --> 00:04:50.650
It says invalid or unexpected token

00:04:50.650 --> 00:04:54.385
because it's not expecting the variable to start with a number.

00:04:54.385 --> 00:04:58.030
So let's first try to modify contact us.

00:04:58.030 --> 00:05:03.260
And we'll say contact us here.

00:05:04.650 --> 00:05:07.720
So we are able to modify it.

00:05:07.720 --> 00:05:11.695
We can also declared constants.

00:05:11.695 --> 00:05:15.080
Constraint is something that cannot be modified.

00:05:16.500 --> 00:05:23.540
Contact store, contact store.

00:05:23.580 --> 00:05:30.590
We'll try to pass contact store to change Contact Us function.

00:05:35.010 --> 00:05:39.680
Okay, now if we try to modify contracts stored,

00:05:42.750 --> 00:05:47.830
contact tomorrow, as you can see,

00:05:47.830 --> 00:05:51.430
your assignment to constraint variable two that is not allowed.

00:05:51.430 --> 00:05:54.460
We cannot change constant time,

00:05:54.460 --> 00:05:57.770
we can only change variable types in JavaScript.

00:05:58.980 --> 00:06:01.330
So remember the difference between

00:06:01.330 --> 00:06:05.035
the two tape LEDs for the variable constant is what construct.

00:06:05.035 --> 00:06:09.545
If want to declare some variables which you do not want to modify,

00:06:09.545 --> 00:06:11.825
change them to type constant.

00:06:11.825 --> 00:06:18.590
Otherwise you declared them as variables using LED will remove this for now.

00:06:18.590 --> 00:06:23.060
You can also declare multiple variables in a single lane.

00:06:23.060 --> 00:06:31.969
Let a equal to B equal PQR,

00:06:31.969 --> 00:06:38.270
which is of String type comma c equal 10.3,

00:06:38.270 --> 00:06:40.355
which is of float type.

00:06:40.355 --> 00:06:49.500
So this is allowed. We can print console.log.

00:06:51.100 --> 00:06:57.770
A plus B plus C.

00:06:57.770 --> 00:07:00.905
So when we print a plus b plus c,

00:07:00.905 --> 00:07:02.615
the values that are getting printed,

00:07:02.615 --> 00:07:04.445
and because we have one stream,

00:07:04.445 --> 00:07:08.060
it treats all three strings.

00:07:08.060 --> 00:07:11.225
The result is also a string.

00:07:11.225 --> 00:07:13.760
The key thing that we're trying to highlight here is

00:07:13.760 --> 00:07:16.310
variables can be declared in a single lane,

00:07:16.310 --> 00:07:19.220
which is allowed in JavaScript.

00:07:19.220 --> 00:07:22.685
Let's now understand a skip character.

00:07:22.685 --> 00:07:27.710
If we want to display CT unit to put any skip character,

00:07:27.710 --> 00:07:30.740
then the court would be visible.

00:07:30.740 --> 00:07:33.230
Backslash. You can have a skip character,

00:07:33.230 --> 00:07:36.710
otherwise it will treat this section is a string and then it

00:07:36.710 --> 00:07:40.340
will complain that you are not concatenating or zip code two,

00:07:40.340 --> 00:07:41.630
which is not expected.

00:07:41.630 --> 00:07:44.000
You can use glasses in a skip character.

00:07:44.000 --> 00:07:50.285
You can go to developer dot mozilla.org to see the full list of escape characters.

00:07:50.285 --> 00:07:55.520
There is another way to declare string that is with back ticks.

00:07:55.520 --> 00:08:00.335
And let's say that instead of double quotes,

00:08:00.335 --> 00:08:01.985
we can add back ticks,

00:08:01.985 --> 00:08:08.280
which is usually available on the lip corner of the laptop or desktop keyboard.

00:08:08.770 --> 00:08:12.005
Contact store.

00:08:12.005 --> 00:08:22.180
Tomorrow. You can declare like that.

00:08:22.180 --> 00:08:25.900
And there is no change in the behaviour.

00:08:25.900 --> 00:08:28.360
It's still getting displayed.

00:08:28.360 --> 00:08:30.040
Using tactics.

00:08:30.040 --> 00:08:32.785
You can have string interpolation. For example.

00:08:32.785 --> 00:08:37.990
You can have any variable included in this string using dollar and curly braces.

00:08:37.990 --> 00:08:40.705
And it, the runtime, it'll get populated.

00:08:40.705 --> 00:08:43.150
So let's pass.

00:08:43.150 --> 00:08:44.695
One of these variables.

00:08:44.695 --> 00:08:47.005
Would pass c.

00:08:47.005 --> 00:08:50.440
Now it says contact store 10.3.

00:08:50.440 --> 00:08:52.420
Tomorrow. You'll be using

00:08:52.420 --> 00:08:56.380
strings very frequently in JavaScript are web-based development.

00:08:56.380 --> 00:09:00.460
String is lot of functions or methods.

00:09:00.460 --> 00:09:03.040
We'll see some of the example of that.

00:09:03.040 --> 00:09:06.640
Contact us toward closed.

00:09:06.640 --> 00:09:11.260
And instead of passing contact us,

00:09:11.260 --> 00:09:17.275
we can do to lowercase and pass that.

00:09:17.275 --> 00:09:25.285
We need to put the parenthesis here. Store closed.

00:09:25.285 --> 00:09:30.290
We can also do that right here to lowercase.

00:09:30.510 --> 00:09:35.300
Similar to lowercase, we also have uppercase.

00:09:38.230 --> 00:09:42.260
You can go to developer dot mozilla dot hard,

00:09:42.260 --> 00:09:45.440
or just do a Google search and see all the methods

00:09:45.440 --> 00:09:49.410
that are available on JavaScript strings.

00:09:51.040 --> 00:09:57.810
Let's try out another function which is substring.

00:09:59.290 --> 00:10:03.990
And we'd say substring starting from position one.

00:10:08.170 --> 00:10:12.485
So it started from first character.

00:10:12.485 --> 00:10:16.820
Character is this fast characteristic which started from there.

00:10:16.820 --> 00:10:21.635
And we are seeing the output both in console and both on the page.

00:10:21.635 --> 00:10:24.185
There is something called typeof,

00:10:24.185 --> 00:10:33.530
using which you can see the type of any variable, console.log type of.

00:10:33.530 --> 00:10:38.010
And we'd say contact us, that's available.

00:10:39.700 --> 00:10:43.110
Contact us.

00:10:45.250 --> 00:10:47.825
It's of type string.

00:10:47.825 --> 00:10:53.405
And if we do that of a, it shows number.

00:10:53.405 --> 00:10:56.765
So using typeof, you can check the type of any variable.

00:10:56.765 --> 00:11:02.120
Let's declare another variable and will not initialize it.

00:11:02.120 --> 00:11:07.565
And Let's see what happens when we pass it to the page.

00:11:07.565 --> 00:11:10.249
On the screen it says undefined.

00:11:10.249 --> 00:11:12.545
And in the console also it printed undefined

00:11:12.545 --> 00:11:15.725
because we have not really defined this variable.

00:11:15.725 --> 00:11:18.919
And if you want to display blank on the page,

00:11:18.919 --> 00:11:23.000
you can simply do new contact equal null.

00:11:23.000 --> 00:11:26.765
This is the way of removing certain variables from the page.

00:11:26.765 --> 00:11:29.850
You can just set it to null and that will go.

00:11:31.330 --> 00:11:34.205
And in the console you can see the value null,

00:11:34.205 --> 00:11:37.895
but on the page it doesn't display anything.

00:11:37.895 --> 00:11:41.315
So that's the way to clear any content from the page.

00:11:41.315 --> 00:11:43.790
Nothing would show up on the website.

00:11:43.790 --> 00:11:46.625
But if it is not declared,

00:11:46.625 --> 00:11:50.390
then you'd see undefined edge we just saw earlier.

00:11:50.390 --> 00:11:54.455
We can also declare objects in JavaScript.

00:11:54.455 --> 00:11:56.225
Let's see how we can do that.

00:11:56.225 --> 00:11:58.250
Will have a object called store,

00:11:58.250 --> 00:12:00.290
and we'll say equal.

00:12:00.290 --> 00:12:04.130
Within curly braces, we can have different properties.

00:12:04.130 --> 00:12:08.970
Stored name, colon, stored one,

00:12:09.520 --> 00:12:12.950
and give a comma.

00:12:12.950 --> 00:12:17.135
And you can declare another field at this,

00:12:17.135 --> 00:12:20.645
which can be addressed one.

00:12:20.645 --> 00:12:22.400
Now to get a particular field,

00:12:22.400 --> 00:12:24.950
app.js, we can simply say store,

00:12:24.950 --> 00:12:35.220
store name and stored one is getting printed.

00:12:40.390 --> 00:12:47.940
And we can also print the address by simply saying store dot atlas.

00:12:48.190 --> 00:12:52.835
So these are, you can have an object and I have different fields,

00:12:52.835 --> 00:12:58.380
and then extract values from that store data.
