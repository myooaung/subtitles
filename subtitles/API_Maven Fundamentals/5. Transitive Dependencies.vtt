WEBVTT
1
00:00:00.840 --> 00:00:02.910
Transitive dependencies, without a doubt,

2
00:00:02.910 --> 00:00:05.940
are the main reason people begin using Maven.

3
00:00:05.940 --> 00:00:09.340
If we add a dependency, something like bibernate,

4
00:00:09.340 --> 00:00:12.860
it will go ahead and pull down any and all transitive

5
00:00:12.860 --> 00:00:15.340
dependencies that Hibernate needs.

6
00:00:15.340 --> 00:00:17.070
Now if there are any conflicts,

7
00:00:17.070 --> 00:00:21.840
it will also try and resolve those too by always choosing the newer version.

8
00:00:21.840 --> 00:00:23.190
That doesn't always work,

9
00:00:23.190 --> 00:00:26.140
and we'll talk more about how to exclude dependencies here in a minute,

10
00:00:26.140 --> 00:00:29.110
but transitive dependencies are a great thing because,

11
00:00:29.110 --> 00:00:31.570
as you can see from this example I posted up here,

12
00:00:31.570 --> 00:00:35.810
If I put hibernate‑core, and I want to use hibernate‑core,

13
00:00:35.810 --> 00:00:38.330
just that artifact, inside my application,

14
00:00:38.330 --> 00:00:42.440
well, there's all these other JARs that Hibernate needs,

15
00:00:42.440 --> 00:00:47.220
antler, dom4j, the hibernate‑commons annotations,core,

16
00:00:47.220 --> 00:00:51.210
the jpa specifications, a bunch of logging APIs,

17
00:00:51.210 --> 00:00:55.740
those will automatically be downloaded into my application.

18
00:00:55.740 --> 00:00:59.970
Now transitive dependencies often scare or frighten people because they

19
00:00:59.970 --> 00:01:02.590
don't know where all of these things are coming from.

20
00:01:02.590 --> 00:01:06.980
When the people who created Hibernate, or whatever library you're using,

21
00:01:06.980 --> 00:01:11.540
sat down and programmed it, they knew what libraries it needed to work with.

22
00:01:11.540 --> 00:01:14.530
Who better then to decide what versions and what different libraries

23
00:01:14.530 --> 00:01:17.420
it should pull in for your application then the people who are

24
00:01:17.420 --> 00:01:19.740
creating the framework that you're using?

25
00:01:19.740 --> 00:01:20.780
In this case,

26
00:01:20.780 --> 00:01:27.810
Hibernate 5.4.1 specifically needs antler 2.7.7, dom4j 2.1.1,

27
00:01:27.810 --> 00:01:32.700
they know the JPA specification it's supposed to work with. The

28
00:01:32.700 --> 00:01:35.530
POM that you download from them actually defines those

29
00:01:35.530 --> 00:01:37.440
dependencies that it's looking for,

30
00:01:37.440 --> 00:01:43.000
and only in the case where there's a conflict will it try and override it with something newer.

