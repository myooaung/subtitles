1
00:00:00,840 --> 00:00:04,730
In this module we went through a bunch of the nuances with dependencies and

2
00:00:04,730 --> 00:00:08,800
we started looking at particular things like versions and that version

3
00:00:08,800 --> 00:00:10,840
numbers are really up to your corporate strategy.

4
00:00:10,840 --> 00:00:16,960
If you have a 1.0 release or a 1.0.0 you can name it final or release,

5
00:00:16,960 --> 00:00:18,020
it really doesn't matter.

6
00:00:18,020 --> 00:00:22,280
We had that hibernate example that was using final in their

7
00:00:22,280 --> 00:00:27,210
own unique way. The only one that has a unique meaning on

8
00:00:27,210 --> 00:00:28,990
the naming convention really,

9
00:00:28,990 --> 00:00:32,740
truthfully, is SNAPSHOT. SNAPSHOTS are always good to force you

10
00:00:32,740 --> 00:00:34,560
to download the latest version of the code,

11
00:00:34,560 --> 00:00:37,800
which is great if you're doing development and things are very volatile and

12
00:00:37,800 --> 00:00:40,340
you want to always be checking for the latest source code.

13
00:00:40,340 --> 00:00:44,040
You never want to go to production with any SNAPSHOTS in your application.

14
00:00:44,040 --> 00:00:47,990
We also looked at supported types and what they mean to your application.

15
00:00:47,990 --> 00:00:51,300
And 99% of the time you're probably just going to be using a jar

16
00:00:51,300 --> 00:00:54,540
dependency, but other than that what's very unique and kind of

17
00:00:54,540 --> 00:00:58,160
interesting is the POM dependency to where you can create a POM file that

18
00:00:58,160 --> 00:01:01,890
will be pulled in with all of the dependencies listed in it and use those

19
00:01:01,890 --> 00:01:03,160
inside of your application.

20
00:01:03,160 --> 00:01:06,520
We saw that POM dependency when we pulled in JUnit,

21
00:01:06,520 --> 00:01:10,640
and it pulled in two other POMs that had all the dependencies listed there.

22
00:01:10,640 --> 00:01:13,820
We also looked at transitive dependencies and how they are downloading. And

23
00:01:13,820 --> 00:01:17,650
the demo we saw that if we pulled down hibernate it would pull all of the

24
00:01:17,650 --> 00:01:20,720
transitive dependencies of hibernate down for us.

25
00:01:20,720 --> 00:01:22,670
In fact, there was even a conflict in there,

26
00:01:22,670 --> 00:01:26,360
and you can see that it resolved and looked for the newest version, which is

27
00:01:26,360 --> 00:01:29,140
generally what we want to do inside of our application.

28
00:01:29,140 --> 00:01:33,110
We also looked at scopes and how they allow us to compile our test code,

29
00:01:33,110 --> 00:01:37,140
but not include artifacts that shouldn't be packaged in our final resource.

30
00:01:37,140 --> 00:01:39,660
So when we include JUnit inside of our application,

31
00:01:39,660 --> 00:01:40,970
we can mark it as test scope,

32
00:01:40,970 --> 00:01:48,000
which is one of the most common ones that we typically scope, and it wouldn't be packaged into our final resource.

