WEBVTT
1
00:00:00.940 --> 00:00:05.240
Maven at its simplest is just a build tool.

2
00:00:05.240 --> 00:00:09.720
If you've used tools like Ant before or just written custom batch files,

3
00:00:09.720 --> 00:00:13.000
it's a tool to build source code and produce an artifact

4
00:00:13.000 --> 00:00:16.340
or produce and have an output of it.

5
00:00:16.340 --> 00:00:21.040
Maven always produces one output that is called an artifact.

6
00:00:21.040 --> 00:00:24.480
You can think of it as a component or a jar,

7
00:00:24.480 --> 00:00:29.140
even a .zip file, and Maven will help us manage our dependencies.

8
00:00:29.140 --> 00:00:31.040
And, as mentioned earlier,

9
00:00:31.040 --> 00:00:33.900
that dependency management is probably the number one reason that

10
00:00:33.900 --> 00:00:36.890
people get into using Maven as managing all the different

11
00:00:36.890 --> 00:00:39.940
dependencies you need is inside an application.

12
00:00:39.940 --> 00:00:42.230
If you are using a tool like Hibernate,

13
00:00:42.230 --> 00:00:44.430
there is one Hibernate jar that you need to import,

14
00:00:44.430 --> 00:00:48.120
but it has 13 or more transitive dependencies.

15
00:00:48.120 --> 00:00:50.410
In other words, other libraries that it needs,

16
00:00:50.410 --> 00:00:53.140
like Commons IO, Commons Lang,

17
00:00:53.140 --> 00:00:57.960
those types of dependencies to be able to use that inside your application.

18
00:00:57.960 --> 00:00:59.490
With Maven,

19
00:00:59.490 --> 00:01:01.720
you can tell it that you want to use this, and it will go and

20
00:01:01.720 --> 00:01:04.840
download all of the transitive dependencies.

21
00:01:04.840 --> 00:01:08.970
We'll go into detail a little bit more in a later module on dependencies

22
00:01:08.970 --> 00:01:13.410
and transitive dependencies and their management. At a macro level, Maven

23
00:01:13.410 --> 00:01:18.590
can be used as a project management tool in the sense that it handles the

24
00:01:18.590 --> 00:01:21.840
management or versioning of your code.

25
00:01:21.840 --> 00:01:24.970
Maven has a version number associated with each

26
00:01:24.970 --> 00:01:26.970
component, and as I mentioned earlier,

27
00:01:26.970 --> 00:01:30.240
we only produce one version of an artifact.

28
00:01:30.240 --> 00:01:35.850
So we can use Maven to tell it that if it is version 1.0 or version 2.0,

29
00:01:35.850 --> 00:01:40.740
those types of clarifications on the artifact that we produce.

30
00:01:40.740 --> 00:01:44.810
It will also help us describe things like what our source control module is,

31
00:01:44.810 --> 00:01:48.800
or where our documentation is stored, who the developers are.

32
00:01:48.800 --> 00:01:53.840
It has some made information also tied to what your project is.

33
00:01:53.840 --> 00:01:57.490
The other nice benefit of using Maven for builds is that,

34
00:01:57.490 --> 00:02:00.360
as mentioned earlier, it can produce extra information.

35
00:02:00.360 --> 00:02:03.840
You can produce the Javadocs,

36
00:02:03.840 --> 00:02:08.060
the source code, and jar file with all of the extra

37
00:02:08.060 --> 00:02:15.280
information your IDE will use. Who owns Maven? It's actually

38
00:02:15.280 --> 00:02:18.410
managed by the Apache Software Foundation.

39
00:02:18.410 --> 00:02:22.560
You can go to maven.apache.org to download it,

40
00:02:22.560 --> 00:02:26.970
and an interesting side note is that Maven sites are actually built with

41
00:02:26.970 --> 00:02:32.520
Maven. Maven's also open source, and it's freely available.

42
00:02:32.520 --> 00:02:37.250
You can get it there and download and change the source if you want.

43
00:02:37.250 --> 00:02:40.060
If you go to a Maven web page, all the layout is done

44
00:02:40.060 --> 00:02:42.240
with their site generation plugin.

45
00:02:42.240 --> 00:02:45.120
That's one of those extra benefits that you can easily produce.

46
00:02:45.120 --> 00:02:47.490
Like we mentioned earlier with Javadocs,

47
00:02:47.490 --> 00:02:53.240
you can generate a website for your code base and structure.

48
00:02:53.240 --> 00:02:55.540
Why do we want to use Maven?

49
00:02:55.540 --> 00:02:59.650
There's a lot of reasons. Repeatable builds, so if you start talking

50
00:02:59.650 --> 00:03:04.500
about source control management or configuration management, or the newer

51
00:03:04.500 --> 00:03:10.910
term of DevOps or SysOps. It's the ability for us to be able to recreate

52
00:03:10.910 --> 00:03:14.360
our build for any environment, as well as to not have to change our

53
00:03:14.360 --> 00:03:16.440
settings for each environment.

54
00:03:16.440 --> 00:03:19.780
So Maven lets us externalize a lot of our settings to

55
00:03:19.780 --> 00:03:21.670
where we can now develop on Windows,

56
00:03:21.670 --> 00:03:25.010
test on Linux box, and deploy to a different flavor

57
00:03:25.010 --> 00:03:27.140
of Linux or Unix in production.

58
00:03:27.140 --> 00:03:31.340
We can also utilize tools like Docker to help us do this inside of our

59
00:03:31.340 --> 00:03:35.350
application. We have all of our properties externalized to where our

60
00:03:35.350 --> 00:03:39.010
code isn't dependent on the environment that it's being built in.

61
00:03:39.010 --> 00:03:43.020
Another really nice feature of Maven, and I alluded to this earlier, is

62
00:03:43.020 --> 00:03:44.940
transitive dependencies.

63
00:03:44.940 --> 00:03:49.040
Downloading a dependency will also pull other items it needs in.

64
00:03:49.040 --> 00:03:53.540
This is the number one reason without a doubt that people start using Maven.

65
00:03:53.540 --> 00:03:58.760
A third benefit is that it contains everything you need for your environment.

66
00:03:58.760 --> 00:04:02.730
So whether I'm building in my IDE, building from the command line,

67
00:04:02.730 --> 00:04:09.040
it contains all the information I need to build our code and reproduce our code.

68
00:04:09.040 --> 00:04:12.240
This fourth bullet point might confuse you a little bit.

69
00:04:12.240 --> 00:04:14.460
It works with a local repo.

70
00:04:14.460 --> 00:04:15.520
Historically,

71
00:04:15.520 --> 00:04:18.900
you've always downloaded all of your jars or other resources

72
00:04:18.900 --> 00:04:21.240
and kept them right inside your project,

73
00:04:21.240 --> 00:04:25.280
which would result into if I had 20 projects, I could possibly

74
00:04:25.280 --> 00:04:28.440
have the same jar downloaded at least 20 times.

75
00:04:28.440 --> 00:04:31.440
It needs that for each one of those environments.

76
00:04:31.440 --> 00:04:34.240
Well, Maven works from a local repo,

77
00:04:34.240 --> 00:04:38.820
just a local structure that enables me to download it once and then just

78
00:04:38.820 --> 00:04:42.040
reference it from there and use it from that location.

79
00:04:42.040 --> 00:04:46.130
It saves on disk space and saves on overhead. Not a huge

80
00:04:46.130 --> 00:04:48.850
deal at first, but when you start doing a lot of builds, it

81
00:04:48.850 --> 00:04:51.340
actually adds up really quick.

82
00:04:51.340 --> 00:04:54.640
Another benefit is that it works very well with your IDE.

83
00:04:54.640 --> 00:05:00.550
It doesn't matter if your IDE is NetBeans, IntelliJ, or Eclipse, we're going

84
00:05:00.550 --> 00:05:03.970
to focus on Eclipse and Spring STS in this training, but it works well with

85
00:05:03.970 --> 00:05:07.140
your IDE, and you can also use it standalone.

86
00:05:07.140 --> 00:05:10.280
What I mean by that is that I can build from the command line,

87
00:05:10.280 --> 00:05:12.360
and the same functions that I call from the command

88
00:05:12.360 --> 00:05:15.340
line are also being called by my IDE.

89
00:05:15.340 --> 00:05:19.240
It doesn't have a different path for the different environment.

90
00:05:19.240 --> 00:05:21.470
You've set up your job environment variables,

91
00:05:21.470 --> 00:05:24.340
and it's all derived from your Maven files.

92
00:05:24.340 --> 00:05:28.930
One last item is that it is the preferred choice for working with build

93
00:05:28.930 --> 00:05:34.400
tools like Jenkins or CruiseControl, Hudson, Bamboo, any of the various

94
00:05:34.400 --> 00:05:39.940
automated build tools that are out there for doing continuous integration.

95
00:05:39.940 --> 00:05:43.690
Maven is, without a doubt, the first class resident that they want you to

96
00:05:43.690 --> 00:05:45.540
use for that type of stuff.

97
00:05:45.540 --> 00:05:47.590
It works with all of those tools,

98
00:05:47.590 --> 00:05:56.000
and there is also a lot of additional plugins that you can use that are also integrated with those continuous integration tools.

