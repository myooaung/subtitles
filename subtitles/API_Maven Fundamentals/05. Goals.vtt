WEBVTT
1
00:00:00.940 --> 00:00:04.690
This is the basic POM file of our HelloWorld application that

2
00:00:04.690 --> 00:00:07.530
we just referenced while discussing our source and target

3
00:00:07.530 --> 00:00:10.440
directories to show you the defaults.

4
00:00:10.440 --> 00:00:12.730
There are a lot of things being assumed here.

5
00:00:12.730 --> 00:00:17.640
Remember that conversation around convention over configuration.

6
00:00:17.640 --> 00:00:21.060
We're going to pick this apart some and show you what those defaults are,

7
00:00:21.060 --> 00:00:24.030
and right now, it doesn't say anything about our package structure,

8
00:00:24.030 --> 00:00:26.520
it doesn't say anything about our directory structure,

9
00:00:26.520 --> 00:00:28.900
and that's because we are assuming all of those

10
00:00:28.900 --> 00:00:32.040
defaults that are associated with our POM.

11
00:00:32.040 --> 00:00:35.530
Now our POM file can actually be divided into four basic parts.

12
00:00:35.530 --> 00:00:38.020
We have our project information.

13
00:00:38.020 --> 00:00:42.500
This is really the meat of what we're looking at for our application.

14
00:00:42.500 --> 00:00:44.140
There's things outside of the project,

15
00:00:44.140 --> 00:00:46.930
but really everything we're concerned about is

16
00:00:46.930 --> 00:00:50.040
contained within these project elements.

17
00:00:50.040 --> 00:00:52.600
Let's start with our groupId.

18
00:00:52.600 --> 00:00:55.470
The groupId is often the same as our package,

19
00:00:55.470 --> 00:00:58.140
and that's what's inside of our application.

20
00:00:58.140 --> 00:01:02.100
Packages like com.acme or com.pluralsight,

21
00:01:02.100 --> 00:01:07.810
such as our example here, are commonly what you would use for your groupId.

22
00:01:07.810 --> 00:01:13.660
They designate your business name or your application name as

23
00:01:13.660 --> 00:01:16.340
you would reference it as a web address.

24
00:01:16.340 --> 00:01:20.470
Our artifactId is the same thing as these name of our application.

25
00:01:20.470 --> 00:01:22.540
They're synonymous with one another.

26
00:01:22.540 --> 00:01:25.750
So our application was Hello, capital H,

27
00:01:25.750 --> 00:01:30.440
World, capital W, and that's what our artifact will be named.

28
00:01:30.440 --> 00:01:35.620
It should also be the same as what our element being produced will be named,

29
00:01:35.620 --> 00:01:37.920
and how it's going to be released.

30
00:01:37.920 --> 00:01:40.850
The next thing we care about is our version.

31
00:01:40.850 --> 00:01:45.740
The version is very simply what we want to call it.

32
00:01:45.740 --> 00:01:49.390
So 1.0, 2.0, 3.0, or if it's a maintenance release,

33
00:01:49.390 --> 00:01:51.840
something like 1.0.1,

34
00:01:51.840 --> 00:01:54.900
We're going to dive into the difference between snapshots

35
00:01:54.900 --> 00:01:57.110
versus releases later in this course,

36
00:01:57.110 --> 00:02:01.370
but it's just what we want to name our application,

37
00:02:01.370 --> 00:02:04.540
and they're usually sequential in nature.

38
00:02:04.540 --> 00:02:07.480
The last part of our project is the packaging.

39
00:02:07.480 --> 00:02:10.540
Packaging is how we want to distribute our application.

40
00:02:10.540 --> 00:02:15.340
Is it a JAR, is it a WAR, a RAR, or an EAR file?

41
00:02:15.340 --> 00:02:19.460
These are just some of the common file types associated with Java applications.

42
00:02:19.460 --> 00:02:22.830
We could use the default packaging, which is a jar,

43
00:02:22.830 --> 00:02:25.350
and not specify it inside of our application,

44
00:02:25.350 --> 00:02:29.700
but I've gone ahead and hard coded it in here so that you can see that

45
00:02:29.700 --> 00:02:37.000
it's specifically using a packaging type of JAR. Let's talk about our dependencies next.

