WEBVTT
1
00:00:00.840 --> 00:00:02.850
Let's discuss Ant versus Maven.

2
00:00:02.850 --> 00:00:05.700
A lot of people think that Ant and Maven are meant

3
00:00:05.700 --> 00:00:07.870
to compete against each other, and really,

4
00:00:07.870 --> 00:00:10.640
they could be used in conjunction with one another,

5
00:00:10.640 --> 00:00:13.740
but they're trying to solve two different problems.

6
00:00:13.740 --> 00:00:17.140
Ant was developed originally to be a replacement for a build

7
00:00:17.140 --> 00:00:20.640
tool called Make that wasn't cross platform.

8
00:00:20.640 --> 00:00:23.660
Make was designed to work on one platform,

9
00:00:23.660 --> 00:00:27.640
and we've tried to adapt it to other platforms over the years.

10
00:00:27.640 --> 00:00:31.800
Ant was built on top of Java and using XML,

11
00:00:31.800 --> 00:00:35.840
both tools that were meant to be used cross platform.

12
00:00:35.840 --> 00:00:38.540
So regardless of whether you're on a Windows machine,

13
00:00:38.540 --> 00:00:40.700
Mac, Linux, or some other environment,

14
00:00:40.700 --> 00:00:43.220
you can build things and have them be able to transfer

15
00:00:43.220 --> 00:00:45.240
from one environment to another.

16
00:00:45.240 --> 00:00:49.090
Make was built around a UNIX environment and was somewhat brittle,

17
00:00:49.090 --> 00:00:52.720
ran into problems like white space and hidden characters, it was

18
00:00:52.720 --> 00:00:55.130
very powerful was used for a lot of years,

19
00:00:55.130 --> 00:00:57.740
in fact, it's still used today a little bit.

20
00:00:57.740 --> 00:01:00.910
It's very brittle in nature and not very cross platform

21
00:01:00.910 --> 00:01:06.540
compliant. As mentioned earlier, Ant is built on top of Java and

22
00:01:06.540 --> 00:01:09.570
is XML based, but it's very procedural.

23
00:01:09.570 --> 00:01:12.940
You have a hard time inheriting anything, you have to go

24
00:01:12.940 --> 00:01:15.080
out of your way to use different pieces,

25
00:01:15.080 --> 00:01:18.550
and it's a stretch to be able to use composition or things like

26
00:01:18.550 --> 00:01:23.420
that inside of your Ant scripts. With Ant,

27
00:01:23.420 --> 00:01:26.010
you have to explicitly code everything.

28
00:01:26.010 --> 00:01:28.820
You have to call out what your targets are,

29
00:01:28.820 --> 00:01:31.980
what goal we're going to do next if we're going to chain

30
00:01:31.980 --> 00:01:35.980
goals. I've got a little code snippet here what an Ant

31
00:01:35.980 --> 00:01:38.540
target is just for doing a clean.

32
00:01:38.540 --> 00:01:42.080
It's very clear that we're calling clean, we even have a description of

33
00:01:42.080 --> 00:01:44.640
what it is, and there is a comment thrown in there,

34
00:01:44.640 --> 00:01:48.330
and we're going to clearly delete this directory, that's our build directory,

35
00:01:48.330 --> 00:01:52.770
by the way. You can see that the build directory is a variable that we're

36
00:01:52.770 --> 00:01:57.350
passing in and it's going to get evaluated at runtime, but notice we have to

37
00:01:57.350 --> 00:02:00.440
define everything the way we want to do it.

38
00:02:00.440 --> 00:02:03.840
This actually can lead us to some problems.

39
00:02:03.840 --> 00:02:08.210
What if we like the word clean and you like the word clear, and somebody

40
00:02:08.210 --> 00:02:12.320
else wants the phrase clean up for this target? It can be left to any

41
00:02:12.320 --> 00:02:15.020
number of variations and it's not a standard.

42
00:02:15.020 --> 00:02:17.610
You have to go into every file and know that this is what

43
00:02:17.610 --> 00:02:20.540
you need to call to perform a clean.

44
00:02:20.540 --> 00:02:26.070
This is what you're going to call for clear or clean up. Init is another

45
00:02:26.070 --> 00:02:29.910
one that we've seen people use from time to time as to what they would like

46
00:02:29.910 --> 00:02:34.640
to have their clean up procedure run as word delete or dissed and delete

47
00:02:34.640 --> 00:02:37.040
distribution and that type of stuff.

48
00:02:37.040 --> 00:02:42.540
So Ant leads us to a lot of variations that can be problematic.

49
00:02:42.540 --> 00:02:46.000
There is also a lot of tribal or organizational

50
00:02:46.000 --> 00:02:48.340
knowledge that gets built into Ant,

51
00:02:48.340 --> 00:02:52.140
not specifically because you can rename variables or certain things,

52
00:02:52.140 --> 00:02:55.140
but because everybody does it a little bit different.

53
00:02:55.140 --> 00:02:58.440
There is not a standard out there for what things are called, each

54
00:02:58.440 --> 00:03:02.350
organization ends up having a large repository of these scripts that are

55
00:03:02.350 --> 00:03:06.220
unique to them, nothing will carry over from one job to another,

56
00:03:06.220 --> 00:03:09.740
or necessarily even to one project to another.

57
00:03:09.740 --> 00:03:12.570
If you go to share this with another project too,

58
00:03:12.570 --> 00:03:14.760
you have to go in and copy and paste all of these

59
00:03:14.760 --> 00:03:17.340
files to be able to reuse them.

60
00:03:17.340 --> 00:03:21.420
There is not a lot of reuse, there is not really the notion of inheritance,

61
00:03:21.420 --> 00:03:27.160
and there is no structure, nothing like that with Ant. Maven is more

62
00:03:27.160 --> 00:03:30.460
than a scripting tool, it's a full‑featured build tool.

63
00:03:30.460 --> 00:03:34.020
We're going to dive more into that throughout the rest of the training,

64
00:03:34.020 --> 00:03:38.170
but you get a lot of implicit functionality built into Maven. Maven's

65
00:03:38.170 --> 00:03:42.290
clean is Maven's clean, it doesn't matter if we're deleting the target

66
00:03:42.290 --> 00:03:45.840
directory, generated sources, whatever we're doing,

67
00:03:45.840 --> 00:03:47.990
whatever we're going to clean up inside of this application,

68
00:03:47.990 --> 00:03:52.340
it's always going to be called the goal clean.

69
00:03:52.340 --> 00:03:56.670
You get a lot of consistency across projects that way. You're also able to

70
00:03:56.670 --> 00:04:00.380
achieve inheritance in your projects by using parent palms or an inherited

71
00:04:00.380 --> 00:04:04.240
palm through composition, those types of things.

72
00:04:04.240 --> 00:04:06.930
You also get transitive dependencies. In some of the

73
00:04:06.930 --> 00:04:08.550
other slides that we've covered so far,

74
00:04:08.550 --> 00:04:11.350
we've mentioned that if you use Maven for one reason at all,

75
00:04:11.350 --> 00:04:13.400
it should be for transitive dependencies,

76
00:04:13.400 --> 00:04:15.890
meaning that if you need to pull down a jar,

77
00:04:15.890 --> 00:04:18.310
it's going to pull in all the jars that it needs to

78
00:04:18.310 --> 00:04:20.740
work with in your application.

79
00:04:20.740 --> 00:04:26.850
Now you can do this using Ant and Ivy, the add‑on for Ant that tries to do

80
00:04:26.850 --> 00:04:32.050
dependency management, but every project that is a major project using Ivy

81
00:04:32.050 --> 00:04:35.940
has since migrated to a pure Maven approach.

82
00:04:35.940 --> 00:04:40.360
Another key point worth mentioning is that Maven is

83
00:04:40.360 --> 00:04:42.740
built around a versioning system.

84
00:04:42.740 --> 00:04:47.060
What is meant by that is that handles things, calling something at a snapshot

85
00:04:47.060 --> 00:04:50.620
inside of a Maven project actually has some context behind it.

86
00:04:50.620 --> 00:04:53.350
We've got a whole section coming up on versioning.

87
00:04:53.350 --> 00:04:55.400
Let's not dive into that too much right now,

88
00:04:55.400 --> 00:04:59.840
but it's one of the key goals that Maven had in mind when it was designed.

89
00:04:59.840 --> 00:05:03.090
Let's rather talk about some of the pros and cons a little bit closer and

90
00:05:03.090 --> 00:05:06.170
actually show you some of the things that maybe aren't so great about

91
00:05:06.170 --> 00:05:10.240
Maven or that it has a steeper learning curve.

92
00:05:10.240 --> 00:05:15.770
Pros and cons of Maven versus Ant, Maven could be a bit of a black box,

93
00:05:15.770 --> 00:05:18.910
meaning that you don't necessarily see where all of the stuff is

94
00:05:18.910 --> 00:05:23.430
defined at, it has a little steeper learning curve and you've got

95
00:05:23.430 --> 00:05:27.830
the convention over configuration, meaning that if you follow Maven's convention,

96
00:05:27.830 --> 00:05:28.980
it works really well.

97
00:05:28.980 --> 00:05:31.670
But if you try to step outside of their boundaries,

98
00:05:31.670 --> 00:05:34.940
things really start to crumble quite a bit.

99
00:05:34.940 --> 00:05:39.830
There is considerably better IDE integration with Maven more so than Ant. In

100
00:05:39.830 --> 00:05:46.210
Ant, you call targets from the IDE and Maven has a much better,

101
00:05:46.210 --> 00:05:48.690
much richer integration.

102
00:05:48.690 --> 00:05:52.640
There is also a lot less overhead through the use of repos now.

103
00:05:52.640 --> 00:05:53.440
Traditionally,

104
00:05:53.440 --> 00:05:58.290
Ant would require us to download all of these files multiple times. With Maven,

105
00:05:58.290 --> 00:06:02.310
we typically use a local or corporate repository so you don't have to download

106
00:06:02.310 --> 00:06:05.700
the same file 20 times because you have 20 projects using it.

107
00:06:05.700 --> 00:06:11.440
One last pro is that it also is somewhat of a con is that Maven is a different

108
00:06:11.440 --> 00:06:17.970
mindset of a problem that occurs and people trying to make Maven act like Ant,

109
00:06:17.970 --> 00:06:21.640
one is a scripting tool and one is a build tool.

110
00:06:21.640 --> 00:06:25.080
Biggest complaint you'll see is, well, I can do this with Ant,

111
00:06:25.080 --> 00:06:27.000
but I can't do this with Maven.

112
00:06:27.000 --> 00:06:31.040
You need to quit making Maven try to act like Ant.

113
00:06:31.040 --> 00:06:36.230
Let's cover some actual pros for Ant. Ant is really clear and very

114
00:06:36.230 --> 00:06:38.550
straightforward, you know exactly what you're doing,

115
00:06:38.550 --> 00:06:41.030
and you can easily trace through your files.

116
00:06:41.030 --> 00:06:44.610
You can see every step through the targets that you explicitly call,

117
00:06:44.610 --> 00:06:46.520
and it's a lot quicker to learn,

118
00:06:46.520 --> 00:06:51.770
but it's also very copy and paste intensive. If you forget to change a

119
00:06:51.770 --> 00:06:56.180
variable or something inherited that you weren't expecting to get in an

120
00:06:56.180 --> 00:07:00.200
inherited file, problems occur. And finally,

121
00:07:00.200 --> 00:07:04.180
you have a larger project size using source control using Ant over

122
00:07:04.180 --> 00:07:07.870
Maven. You're going to copy those files and store them in Git

123
00:07:07.870 --> 00:07:12.300
Subversion or some other source code control tool like Bitbucket, and

124
00:07:12.300 --> 00:07:14.740
that's just the nature of what Ant does.

125
00:07:14.740 --> 00:07:20.850
Let's look at a basic Ant build file now. Let's walk through an Ant build file.

126
00:07:20.850 --> 00:07:25.530
You can see that we've got a clean, compile, and jar target and it's a pretty

127
00:07:25.530 --> 00:07:29.540
straightforward build file. The clean obviously deletes our directory.

128
00:07:29.540 --> 00:07:33.350
Compile makes our directory first to make sure that it didn't exist and

129
00:07:33.350 --> 00:07:37.200
executes a javac task that compiles the code and the specified source

130
00:07:37.200 --> 00:07:40.240
directory into the destination directory.

131
00:07:40.240 --> 00:07:40.840
And lastly,

132
00:07:40.840 --> 00:07:44.830
we've got a jar target that gathers up everything in the build/classes directory

133
00:07:44.830 --> 00:07:50.440
and packages it up into a named jar file of HelloWorld.jar.

134
00:07:50.440 --> 00:07:54.910
Without looking at this, this looks like a complete Ant build file.

135
00:07:54.910 --> 00:07:57.190
There is actually a lot of problems with this file.

136
00:07:57.190 --> 00:08:01.780
I could call jar first because we haven't set up the previous goals that this

137
00:08:01.780 --> 00:08:05.740
one depends on and my compiler clean may have not ran yet.

138
00:08:05.740 --> 00:08:08.510
We can actually get an erroneous jar that doesn't contain the

139
00:08:08.510 --> 00:08:12.340
information I want to build for this application.

140
00:08:12.340 --> 00:08:15.740
This is actually a very brittle build file and can enable me to skip

141
00:08:15.740 --> 00:08:18.840
steps while running my application or building it.

142
00:08:18.840 --> 00:08:21.350
It's not really a good contract about what we're

143
00:08:21.350 --> 00:08:24.170
trying to do with our application, but as you can see,

144
00:08:24.170 --> 00:08:27.840
it's pretty clearly laid out of what we're intending to do.

145
00:08:27.840 --> 00:08:30.940
If we follow the steps, it can achieve our build.

146
00:08:30.940 --> 00:08:34.390
This is where we're talking about tribal knowledge that comes into play,

147
00:08:34.390 --> 00:08:37.030
and what we mean by that is that we have to call our Ant

148
00:08:37.030 --> 00:08:41.100
clean, Ant compile, and Ant jar specifically in that order

149
00:08:41.100 --> 00:08:43.440
for our application to work.

150
00:08:43.440 --> 00:08:46.010
Now that's a little bit of a false sense of security because we

151
00:08:46.010 --> 00:08:49.480
shouldn't have to know anything if our Build tool is doing what it's

152
00:08:49.480 --> 00:08:52.240
supposed to be doing, at least at that level.

153
00:08:52.240 --> 00:08:55.840
Let's look at a Maven POM file instead.

154
00:08:55.840 --> 00:08:58.950
Now the Maven POM file can do all of those goals that we just

155
00:08:58.950 --> 00:09:02.040
ran in the Ant file on this same application.

156
00:09:02.040 --> 00:09:03.530
We can clean,

157
00:09:03.530 --> 00:09:07.510
compile. and package the jar and it will all work because it knows

158
00:09:07.510 --> 00:09:10.740
looking at our code just from this Maven POM file.

159
00:09:10.740 --> 00:09:13.920
This is what we're talking about that it can be kind of a black box.

160
00:09:13.920 --> 00:09:17.920
You don't see all the setup declaration, if you follow their conventions,

161
00:09:17.920 --> 00:09:20.790
their naming conventions, their directory structures,

162
00:09:20.790 --> 00:09:24.640
this type of information, this application will just run.

163
00:09:24.640 --> 00:09:27.740
So it's a little bit non‑descriptive at first until you

164
00:09:27.740 --> 00:09:30.940
understand the semantics of how Maven works.

165
00:09:30.940 --> 00:09:35.010
This is clearly a lot simpler, but it could also be more confusing at first.

166
00:09:35.010 --> 00:09:38.140
The convention over configuration is what we will discuss

167
00:09:38.140 --> 00:09:44.000
throughout the rest of this course. Let's now look at some of Maven's installation best practices.

