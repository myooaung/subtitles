1
00:00:00,940 --> 00:00:05,540
Versions are the release number of the artifact that we want to use.

2
00:00:05,540 --> 00:00:09,290
There's really only one version that warrants taking time to discuss,

3
00:00:09,290 --> 00:00:11,540
and that is SNAPSHOT.

4
00:00:11,540 --> 00:00:15,370
All of your internal development should start off as a SNAPSHOT.

5
00:00:15,370 --> 00:00:20,040
You should also be aware of using SNAPSHOTS from other third‑party libraries.

6
00:00:20,040 --> 00:00:24,010
Say you're using a version of Spring or some other third‑party tool out there,

7
00:00:24,010 --> 00:00:25,710
and you want the latest code.

8
00:00:25,710 --> 00:00:28,540
You can pull it down as a SNAPSHOT.

9
00:00:28,540 --> 00:00:32,030
Now SNAPSHOT allows us to push new code up to a

10
00:00:32,030 --> 00:00:36,040
repository or a development team every time.

11
00:00:36,040 --> 00:00:38,290
So when we say we're using a SNAPSHOT version,

12
00:00:38,290 --> 00:00:42,070
and it has to be labeled specifically that in all capital letters,

13
00:00:42,070 --> 00:00:44,640
I'm going to show you an example of this.

14
00:00:44,640 --> 00:00:46,260
Every time we go to compile,

15
00:00:46,260 --> 00:00:50,840
it will look to see if there's new code that it should pull down and use.

16
00:00:50,840 --> 00:00:52,540
Besides SNAPSHOT releases,

17
00:00:52,540 --> 00:00:56,240
everything else of a naming convention is left up to the end user.

18
00:00:56,240 --> 00:01:01,750
Here's an example of an application we could create, myapp‑1.0‑SNAPSHOT.

19
00:01:01,750 --> 00:01:07,330
Myapp is the artifactId, as we talked about in the previous slide,

20
00:01:07,330 --> 00:01:12,640
and 1.0 is the version, but it's also a type of SNAPSHOT.

21
00:01:12,640 --> 00:01:18,000
So it's a 1.0‑SNAPSHOT, and it has to be all capital letters, as I've

22
00:01:18,000 --> 00:01:23,580
mentioned a few times. It does not work If it's lowercase. Our changes

23
00:01:23,580 --> 00:01:26,530
are always downloaded by using this convention.

24
00:01:26,530 --> 00:01:29,650
This is the key reason to use it though. It saves us from a

25
00:01:29,650 --> 00:01:31,940
re‑releasing versions of development.

26
00:01:31,940 --> 00:01:34,800
I've worked with a lot of organizations that have started off saying,

27
00:01:34,800 --> 00:01:35,070
Oh,

28
00:01:35,070 --> 00:01:38,650
SNAPSHOTS scare us, so we're going to release every time we make a

29
00:01:38,650 --> 00:01:42,670
change, and you end up having tons of releases, so your versionId

30
00:01:42,670 --> 00:01:47,410
ends up being something like 1.0.143.

31
00:01:47,410 --> 00:01:50,640
There are 143 maintenance releases.

32
00:01:50,640 --> 00:01:53,630
So you've got this long number instead of SNAPSHOT,

33
00:01:53,630 --> 00:01:57,920
which then people aren't always the latest or stuck on an older version,

34
00:01:57,920 --> 00:01:59,870
and it kind of defeats the purpose of it.

35
00:01:59,870 --> 00:02:04,740
SNAPSHOTS are good, you just have to be aware of what they are and how you

36
00:02:04,740 --> 00:02:07,430
should consider using them in your development lifecycle.

37
00:02:07,430 --> 00:02:11,150
You never want to deploy to production with a SNAPSHOT because we can't

38
00:02:11,150 --> 00:02:15,960
reproduce or recreate the code. The next time they go to compile it,

39
00:02:15,960 --> 00:02:18,180
the functionality could be different underneath for

40
00:02:18,180 --> 00:02:20,510
us. As we mentioned a minute ago,

41
00:02:20,510 --> 00:02:25,480
a release doesn't have to be a specific naming convention.

42
00:02:25,480 --> 00:02:31,010
Our final release could be myapp‑1.0.jar,

43
00:02:31,010 --> 00:02:33,840
which is very common for a naming convention.

44
00:02:33,840 --> 00:02:39,880
And as we do maintenance releases, that could upgrade to 1.0.1 just because

45
00:02:39,880 --> 00:02:43,640
we did a bug fix and didn't release any new functionality.

46
00:02:43,640 --> 00:02:45,510
As we release new functionality,

47
00:02:45,510 --> 00:02:49,700
it would maybe be 1.1. Now some industry‑common terms

48
00:02:49,700 --> 00:02:51,110
that don't really affect Maven,

49
00:02:51,110 --> 00:02:54,160
but it kind of helps you conceptualize or wrap your head around how

50
00:02:54,160 --> 00:02:57,310
this works are things like milestone releases.

51
00:02:57,310 --> 00:03:04,840
Often you'll see open source projects use 1.0‑M1 for a milestone release,

52
00:03:04,840 --> 00:03:11,350
or RC1, or RC2, or RC3 for release candidates. Again,

53
00:03:11,350 --> 00:03:14,300
not something that you should probably go to production on, but if you're

54
00:03:14,300 --> 00:03:17,950
tired of SNAPSHOTS possibly breaking your code, and you want people to

55
00:03:17,950 --> 00:03:19,570
know that you're going to release something,

56
00:03:19,570 --> 00:03:24,750
but it's not completely stable yet, then use a milestone or a release candidate.

57
00:03:24,750 --> 00:03:28,540
You'll also see some people, when they do their final release, name it as

58
00:03:28,540 --> 00:03:33,230
release, just because they want the convention of a SNAPSHOT where you can

59
00:03:33,230 --> 00:03:35,980
see whether it's a SNAPSHOT or a release,

60
00:03:35,980 --> 00:03:45,000
and in the final version, they'll name it ‑RELEASE. Also, some people will choose FINAL for the final release.

