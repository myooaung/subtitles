WEBVTT
1
00:00:00.640 --> 00:00:04.490
We finished off the last example showing you that if we ran Maven

2
00:00:04.490 --> 00:00:07.500
without a project we would get a build failure.

3
00:00:07.500 --> 00:00:11.340
Let's show you one more command before we dive into building our project.

4
00:00:11.340 --> 00:00:17.440
If I type mvn ‑version and hit Enter I'll get the printout

5
00:00:17.440 --> 00:00:20.730
of the Maven version that I'm using, its location,

6
00:00:20.730 --> 00:00:22.740
the Java version that I'm using.

7
00:00:22.740 --> 00:00:23.620
This is just a good,

8
00:00:23.620 --> 00:00:29.240
quick check for you to see exactly what your configuration is.

9
00:00:29.240 --> 00:00:31.350
Now let's go ahead and create that project to get

10
00:00:31.350 --> 00:00:32.920
our application up and running.

11
00:00:32.920 --> 00:00:34.830
I'm using Spring STS.

12
00:00:34.830 --> 00:00:39.760
You can use Spring, you can use Eclipse, you can use IntelliJ.

13
00:00:39.760 --> 00:00:43.140
You can honestly just use Notepad for this example if you want.

14
00:00:43.140 --> 00:00:46.840
I like Spring STS so I've gone ahead and used it.

15
00:00:46.840 --> 00:00:49.760
And when I first launch it it's going to ask me for a workspace.

16
00:00:49.760 --> 00:00:52.550
So I've gone ahead and created a directory of

17
00:00:52.550 --> 00:00:59.090
C:\dev\workspace. I want to go ahead and launch our IDE.

18
00:00:59.090 --> 00:01:01.050
It'll take it a second to come up.

19
00:01:01.050 --> 00:01:04.750
We're going to go ahead and create a project inside of here and we're

20
00:01:04.750 --> 00:01:07.080
going to start with just a very simple project.

21
00:01:07.080 --> 00:01:11.180
We're not going to choose any of the preconfigured ones for us because we

22
00:01:11.180 --> 00:01:16.240
want to demonstrate the simplest example we can. Okay,

23
00:01:16.240 --> 00:01:19.420
now that our application's up I want to go ahead and

24
00:01:19.420 --> 00:01:24.240
click File, New, and just choose Project.

25
00:01:24.240 --> 00:01:29.920
Don't choose any of the other ones, just a simple project. Underneath

26
00:01:29.920 --> 00:01:32.900
there we can click Project again and click Next.

27
00:01:32.900 --> 00:01:40.220
We're going to give it a name of HelloWorld, and click Finish.

28
00:01:40.220 --> 00:01:42.990
Now that this is up we can go ahead and right‑click on

29
00:01:42.990 --> 00:01:49.240
our project and choose New, File.

30
00:01:49.240 --> 00:01:53.540
And we want to call this pom.xml.

31
00:01:53.540 --> 00:01:59.790
We'll select Finish. And Spring STS is going to try and convert this to a

32
00:01:59.790 --> 00:02:04.430
project for us and so it's going to try and download plugins on the back end

33
00:02:04.430 --> 00:02:08.140
and figure out what we want to do with our POM file.

34
00:02:08.140 --> 00:02:12.240
Now we have our empty pom.xml file.

35
00:02:12.240 --> 00:02:14.050
We can go ahead and start adding elements inside of here,

36
00:02:14.050 --> 00:02:15.780
and there's five things that we need.

37
00:02:15.780 --> 00:02:21.410
We're going to start by giving it our outermost element of project And

38
00:02:21.410 --> 00:02:24.510
when we close that off it will automatically put the closing tag in

39
00:02:24.510 --> 00:02:28.140
there for us. It's one of the nice features of using an IDE like this.

40
00:02:28.140 --> 00:02:30.570
We'll start with adding the groupId.

41
00:02:30.570 --> 00:02:34.730
And you can tell it's already identified that I'm in a XML

42
00:02:34.730 --> 00:02:38.920
file, and specifically I'm in a Maven POM file so it's going

43
00:02:38.920 --> 00:02:41.840
to start suggesting tags for me.

44
00:02:41.840 --> 00:02:43.510
Let's start by adding our groupId.

45
00:02:43.510 --> 00:02:49.040
And since this is for Pluralsight we're going to do com.pluralsight.

46
00:02:49.040 --> 00:02:55.540
If your business was abc.org, you would put in org.abc.

47
00:02:55.540 --> 00:03:01.580
Next thing we'll add is our artifactId. And inside of here

48
00:03:01.580 --> 00:03:04.560
it's just the name of what our application's going to be,

49
00:03:04.560 --> 00:03:07.640
so we'll call it HelloWorld.

50
00:03:07.640 --> 00:03:11.300
The next thing we want to add is the version of our

51
00:03:11.300 --> 00:03:12.600
application that we're writing.

52
00:03:12.600 --> 00:03:15.240
So we're just going to type version.

53
00:03:15.240 --> 00:03:23.340
And we want to call this 1.0‑SNAPSHOT. And SNAPSHOT is all caps. Versions

54
00:03:23.340 --> 00:03:26.500
have a specific naming convention that we want to follow,

55
00:03:26.500 --> 00:03:31.540
and for this example we're going to do 1.0‑SNAPSHOT.

56
00:03:31.540 --> 00:03:35.800
The next thing we need to add is a version of our model for

57
00:03:35.800 --> 00:03:39.940
this POM. So we're going to do modelVersion.

58
00:03:39.940 --> 00:03:42.420
We want to choose 4.0.0.

59
00:03:42.420 --> 00:03:48.020
This has honestly always been 4.0.0 since I've ever used Maven. It does

60
00:03:48.020 --> 00:03:50.260
refer to this type of project that we're building.

61
00:03:50.260 --> 00:03:54.440
I'm not aware of anybody using anything else outside of that.

62
00:03:54.440 --> 00:03:58.160
Then we want to choose our packaging of type jar.

63
00:03:58.160 --> 00:04:02.770
So we can save this. And now we can right‑click on

64
00:04:02.770 --> 00:04:07.740
our project and say New, Folder.

65
00:04:07.740 --> 00:04:08.030
Now,

66
00:04:08.030 --> 00:04:11.090
even though we're just doing a folder it's going to try and

67
00:04:11.090 --> 00:04:13.840
start treating this like a Java application. And we're

68
00:04:13.840 --> 00:04:16.140
going to build that out later.

69
00:04:16.140 --> 00:04:22.590
We can also add another folder underneath our src folder of main. And this is

70
00:04:22.590 --> 00:04:28.440
named specifically the way that it is because this is the default for Maven.

71
00:04:28.440 --> 00:04:31.300
And we're going to do one more folder of java.

72
00:04:31.300 --> 00:04:34.890
So src/main/java is the directory structure that Maven is

73
00:04:34.890 --> 00:04:39.340
looking for in regards to our class files.

74
00:04:39.340 --> 00:04:45.240
So now we can right‑click on src/main/java and do New, File again.

75
00:04:45.240 --> 00:04:50.920
And we can call this HelloWorld.java. And it's going to

76
00:04:50.920 --> 00:04:53.250
start trying to compile things for us.

77
00:04:53.250 --> 00:04:56.470
So we are going to get an error that pops up as we're doing

78
00:04:56.470 --> 00:04:58.520
this that it wants to add it to a working set.

79
00:04:58.520 --> 00:05:00.640
We're just trying to get the simplest file that we can

80
00:05:00.640 --> 00:05:03.390
working so don't worry about that.

81
00:05:03.390 --> 00:05:10.140
We want to call this public class HelloWorld {. And then we

82
00:05:10.140 --> 00:05:15.010
want to add a method in here of public static void main and

83
00:05:15.010 --> 00:05:18.040
pass in an array of strings,

84
00:05:18.040 --> 00:05:24.870
String arg. And then we're going to put a System.out.println on here, and

85
00:05:24.870 --> 00:05:31.840
this will give us an error when we try to add this. Out.println. It

86
00:05:31.840 --> 00:05:35.940
really wants to compile our application for us.

87
00:05:35.940 --> 00:05:41.980
We're going to just print out Hello World and then add our semicolon on the end.

88
00:05:41.980 --> 00:05:46.810
And that is it for what we need for our application.

89
00:05:46.810 --> 00:05:48.240
Let's save this file.

90
00:05:48.240 --> 00:05:51.040
We're going to go back out to our command line,

91
00:05:51.040 --> 00:05:58.540
and we're going to cd to \dev\workspace.

92
00:05:58.540 --> 00:06:02.510
And underneath here you will see that we have our HelloWorld project.

93
00:06:02.510 --> 00:06:06.440
So we're going to cd into that HelloWorld project.

94
00:06:06.440 --> 00:06:09.730
And now we can start off with our first Maven command.

95
00:06:09.730 --> 00:06:14.250
We want to run mvn clean. And I will tell you that the first time

96
00:06:14.250 --> 00:06:19.470
you run this it's going to go out and download a bunch of plugins

97
00:06:19.470 --> 00:06:22.030
and dependencies from the Maven repo.

98
00:06:22.030 --> 00:06:23.630
So all this stuff that's rolling off your screen,

99
00:06:23.630 --> 00:06:25.570
it's downloading all this stuff for the first time.

100
00:06:25.570 --> 00:06:29.790
So it successfully ran the clean command. And all clean

101
00:06:29.790 --> 00:06:33.510
does is initialize your directory structure and delete any

102
00:06:33.510 --> 00:06:36.030
previously generated files.

103
00:06:36.030 --> 00:06:40.050
So it's cleaned up our directory and set everything up for us to run it

104
00:06:40.050 --> 00:06:44.240
now. The next thing we want to do is type mvn compile.

105
00:06:44.240 --> 00:06:47.970
And, as you might guess, this is going to compile our source code for us.

106
00:06:47.970 --> 00:06:51.530
So if we type mvn compile it will go out and also download more

107
00:06:51.530 --> 00:06:55.740
dependencies and other plugins that are out there. And you'll notice

108
00:06:55.740 --> 00:06:58.900
some brief pauses every now and then. That's it going out and checking

109
00:06:58.900 --> 00:07:03.950
against versions of current things out there, pulling new repos down,

110
00:07:03.950 --> 00:07:08.240
new locations of files. So Maven's going out and checking all of those

111
00:07:08.240 --> 00:07:10.720
dependencies and versions that we have for the configuration we

112
00:07:10.720 --> 00:07:12.040
currently have.

113
00:07:12.040 --> 00:07:17.610
Once this is done downloading all of those plugins it will

114
00:07:17.610 --> 00:07:22.230
then have compiled our source code for us and we can go in

115
00:07:22.230 --> 00:07:24.540
and run that Java application.

116
00:07:24.540 --> 00:07:26.690
And this only happens the first time you run it.

117
00:07:26.690 --> 00:07:28.620
That's the beauty of Maven, it will only download

118
00:07:28.620 --> 00:07:30.840
what it needs when it needs it.

119
00:07:30.840 --> 00:07:33.150
The unfortunate thing is the first time you run it it

120
00:07:33.150 --> 00:07:36.840
does download a lot of plugins for you.

121
00:07:36.840 --> 00:07:40.440
We ran our build, but you'll notice we got an error.

122
00:07:40.440 --> 00:07:47.320
This is actually an update for this course, and Maven changed a few things that

123
00:07:47.320 --> 00:07:51.180
it will no longer build with just the default source option.

124
00:07:51.180 --> 00:07:57.000
So we need to actually add a section to our POM file. Let's go talk about that right now.

