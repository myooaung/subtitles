1
00:00:00,840 --> 00:00:04,790
When we left off our previous example, we were getting a build failure,

2
00:00:04,790 --> 00:00:09,850
and we just talked about why, and that's that as of Java 10+,

3
00:00:09,850 --> 00:00:12,600
Java 5 was no longer supported,

4
00:00:12,600 --> 00:00:18,000
and the default compiled version before was Java 5. So now it's forcing you to

5
00:00:18,000 --> 00:00:22,840
use 7 or later because there is no longer support for 5.

6
00:00:22,840 --> 00:00:26,430
This is done on purpose, and it's actually helping you.

7
00:00:26,430 --> 00:00:28,360
It may not feel like that because you have to jump through

8
00:00:28,360 --> 00:00:30,730
another step to get your application to work,

9
00:00:30,730 --> 00:00:33,240
which previously you wouldn't have had to have done this,

10
00:00:33,240 --> 00:00:36,130
but they're forcing you to understand which version of

11
00:00:36,130 --> 00:00:39,340
code you're compiling your classes to.

12
00:00:39,340 --> 00:00:43,710
Let's switch back to our IDE, and inside of our POM,

13
00:00:43,710 --> 00:00:46,820
we want to go behind packaging,

14
00:00:46,820 --> 00:00:51,590
but before the closing project tag, and we're going to add a build

15
00:00:51,590 --> 00:00:54,990
section in here. Now, I already have this code written,

16
00:00:54,990 --> 00:00:57,660
and you probably don't want to watch me type it all out,

17
00:00:57,660 --> 00:01:03,340
so I'm going to grab it and I'm going to paste it in my application,

18
00:01:03,340 --> 00:01:05,290
and I'll walk through it here with you.

19
00:01:05,290 --> 00:01:08,660
There's a build section, and then you create a plugin section.

20
00:01:08,660 --> 00:01:08,810
Now,

21
00:01:08,810 --> 00:01:11,740
the biggest thing I see people make a mistake doing

22
00:01:11,740 --> 00:01:14,370
here is they add the plugins section,

23
00:01:14,370 --> 00:01:16,730
but don't add the plugin element after that.

24
00:01:16,730 --> 00:01:21,130
So, notice that there is a nested plugins plugin section, and then

25
00:01:21,130 --> 00:01:23,110
inside of there we go through and add everything,

26
00:01:23,110 --> 00:01:24,400
just like we have before.

27
00:01:24,400 --> 00:01:29,090
We add a groupId, an org, apache, Maven, plugins, an artifactId

28
00:01:29,090 --> 00:01:34,290
of maven‑compiler‑plugin, a version of 3.8.0, and a

29
00:01:34,290 --> 00:01:38,030
configuration specifying a release of 12.

30
00:01:38,030 --> 00:01:40,480
Now I am using Java 12 in this course.

31
00:01:40,480 --> 00:01:46,840
If you're using Java 11, that's fine, just change your release to specify 11

32
00:01:46,840 --> 00:01:51,640
versus 12 or whatever corresponding Java release you are using.

33
00:01:51,640 --> 00:01:56,940
Let's save this and go back out to our command line

34
00:01:56,940 --> 00:02:00,360
and run that compilation again,

35
00:02:00,360 --> 00:02:05,660
and you'll see that we now have a compiled class. And we can

36
00:02:05,660 --> 00:02:10,610
verify that by cd‑ing down into our target directory, and

37
00:02:10,610 --> 00:02:13,200
you'll see a classes directory,

38
00:02:13,200 --> 00:02:18,660
we'll cd into classes, and we'll have our

39
00:02:18,660 --> 00:02:21,850
HelloWorld.class here. And we can, actually,

40
00:02:21,850 --> 00:02:23,720
because we're using the default package,

41
00:02:23,720 --> 00:02:30,110
just say java HelloWorld and run that, and you'll see that it prints

42
00:02:30,110 --> 00:02:32,810
out Hello World to our command line interface.

43
00:02:32,810 --> 00:02:36,140
So we have our application fully working.

44
00:02:36,140 --> 00:02:38,980
And let's step through those few steps that we had

45
00:02:38,980 --> 00:02:40,380
to do to get that working again.

46
00:02:40,380 --> 00:02:42,440
We created a simple project.

47
00:02:42,440 --> 00:02:46,460
We added a pom.xml, specified our group, artifact,

48
00:02:46,460 --> 00:02:48,740
version, model, and packaging type.

49
00:02:48,740 --> 00:02:52,540
We did have to add this build section for Java 12 in here.

50
00:02:52,540 --> 00:02:56,120
Then we created our src, main, java directory structure, and

51
00:02:56,120 --> 00:03:00,680
added our HelloWorld.java file that just simply prints out

52
00:03:00,680 --> 00:03:03,540
Hello World to the command line.

53
00:03:03,540 --> 00:03:09,090
From there we were able to run our Maven clean and compile targets that would

54
00:03:09,090 --> 00:03:13,710
go through and download all of the dependencies and plugins that it needed to

55
00:03:13,710 --> 00:03:18,110
for our project to be cleaned and compiled.

56
00:03:18,110 --> 00:03:21,840
We can also do the same thing and run package at that project level as

57
00:03:21,840 --> 00:03:28,000
well, and it will now generate our artifact for us, too. So we can say mvn

58
00:03:28,000 --> 00:03:35,870
package, cd back into our target directory, and it will have our Hello

59
00:03:35,870 --> 00:03:39,460
World jar file already produced for us.

60
00:03:39,460 --> 00:03:44,110
If you remember, the packaging type inside of our POM was a jar.

61
00:03:44,110 --> 00:03:47,720
It will go ahead and create that for us. So we can go into cd

62
00:03:47,720 --> 00:03:53,420
target and do a dir here, and you'll see there is our artifact idea

63
00:03:53,420 --> 00:04:03,000
of HelloWorld, our version of 1.0‑SNAPSHOT, our packaging type of .jar, all specified in our file.

