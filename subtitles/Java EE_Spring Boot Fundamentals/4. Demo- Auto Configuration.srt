1
00:00:02,590 --> 00:00:05,640
The magic of Spring Boot. I briefly mentioned

2
00:00:05,640 --> 00:00:08,110
auto‑configuration in the last module.

3
00:00:08,110 --> 00:00:12,950
Auto‑configuration is a very useful and powerful feature of Spring Boot,

4
00:00:12,950 --> 00:00:16,820
which takes a convention‑over‑configuration approach.

5
00:00:16,820 --> 00:00:21,370
This is a huge time saver that helps boost productivity when you're building

6
00:00:21,370 --> 00:00:29,250
Java applications. Auto‑configuration looks at the JARs on the class path and

7
00:00:29,250 --> 00:00:33,670
auto‑configures beans automatically. For example,

8
00:00:33,670 --> 00:00:37,700
it auto‑configures a data source if a Hibernate JAR is found on

9
00:00:37,700 --> 00:00:42,300
the class path, or it auto‑configures a DispatcherServlet if a

10
00:00:42,300 --> 00:00:47,040
Spring MVC JAR is found on the class path. Auto‑configuration is

11
00:00:47,040 --> 00:00:49,180
designed to be non‑invasive.

12
00:00:49,180 --> 00:00:50,000
For example,

13
00:00:50,000 --> 00:00:53,910
if you add your beans, like a data source bean, the default embedded

14
00:00:53,910 --> 00:00:57,870
database support backs away and uses what you've provided.

15
00:00:57,870 --> 00:01:01,010
Auto‑configuration is always applied after

16
00:01:01,010 --> 00:01:05,240
user‑defined beans have been registered.

17
00:01:05,240 --> 00:01:08,650
If you need to find out what auto‑configuration is currently being

18
00:01:08,650 --> 00:01:14,280
applied and why, start your application with a debug switch. Or

19
00:01:14,280 --> 00:01:18,250
you can turn on debug logging by adding a simple property value to

20
00:01:18,250 --> 00:01:22,640
application.properties, which I will demo for you in a moment.

21
00:01:22,640 --> 00:01:32,340
Or you can use the Spring Boot Actuator, which we will cover in detail later.

22
00:01:32,340 --> 00:01:36,310
Let's look at adding the property to the application.properties file.

23
00:01:36,310 --> 00:01:40,940
In the demo, we're going to turn on debug level logging for all logging.

24
00:01:40,940 --> 00:01:45,090
Doing so enables debug logs and reports to the console and

25
00:01:45,090 --> 00:01:50,600
helps us better understand auto‑configuration.

26
00:01:50,600 --> 00:01:54,660
Let's find out what auto‑configuration is currently being applied.

27
00:01:54,660 --> 00:01:57,610
I've opened the fundamentals project in IntelliJ,

28
00:01:57,610 --> 00:02:02,230
and I've navigated to the application.properties file.

29
00:02:02,230 --> 00:02:03,270
In this example,

30
00:02:03,270 --> 00:02:09,390
I'm turning on debug level for all logging by simply using DEBUG here.

31
00:02:09,390 --> 00:02:13,330
This enables debug logs and reports it to the console.

32
00:02:13,330 --> 00:02:16,640
So let's restart our application,

33
00:02:16,640 --> 00:02:22,190
and we should eventually see an auto‑configuration report printed in the log.

34
00:02:22,190 --> 00:02:28,190
So let's scroll back up because this is the entire report right here.

35
00:02:28,190 --> 00:02:33,480
So it says CONDITIONS EVALUATION REPORT and Positive matches.

36
00:02:33,480 --> 00:02:37,040
So it shows all of the auto‑configuration that it's doing.

37
00:02:37,040 --> 00:02:42,400
Jackson, DispatcherServlet, all of that's common with Spring.

38
00:02:42,400 --> 00:02:45,490
Now if you continue to scroll down,

39
00:02:45,490 --> 00:02:51,120
you will also see what wasn't auto‑configured.

40
00:02:51,120 --> 00:02:52,920
So there we go.

41
00:02:52,920 --> 00:02:55,260
If you look for negative matches,

42
00:02:55,260 --> 00:02:58,800
it shows what it did not auto‑configure for you, and

43
00:02:58,800 --> 00:03:00,840
this could be helpful as well.

44
00:03:00,840 --> 00:03:09,000
It also shows specifics about why a specific bean is auto‑configured and why it wasn't auto‑configured.

