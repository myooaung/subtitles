WEBVTT
1
00:00:01.340 --> 00:00:04.990
Let's look at exception handling. I've opened the project

2
00:00:04.990 --> 00:00:08.540
and have navigated to the ApplicationNotFoundException

3
00:00:08.540 --> 00:00:12.940
found in the exception package.

4
00:00:12.940 --> 00:00:15.110
Let's take a look at it.

5
00:00:15.110 --> 00:00:18.140
This is a very simple exception.

6
00:00:18.140 --> 00:00:22.600
It extends the runtime exception, and in the constructor, we're simply

7
00:00:22.600 --> 00:00:28.240
passing in a string that represents the exception.

8
00:00:28.240 --> 00:00:32.470
So let's go to where we actually use this exception.

9
00:00:32.470 --> 00:00:36.650
So if you navigate down to TzaController,

10
00:00:36.650 --> 00:00:42.060
there is a method on line 50 called getApplication. Notice, I'm

11
00:00:42.060 --> 00:00:47.250
using the @GetMapping annotation. Any time there's a get request to

12
00:00:47.250 --> 00:00:52.590
this path, application and an id being passed in, its going to map

13
00:00:52.590 --> 00:00:54.780
to this getApplication method,

14
00:00:54.780 --> 00:01:00.620
and it's going to retrieve the path variable of the id. Notice here on line

15
00:01:00.620 --> 00:01:06.100
52, I'm using the applicationService to find that particular application

16
00:01:06.100 --> 00:01:09.580
passing in the id, so let's look more closely.

17
00:01:09.580 --> 00:01:17.240
Let's go to the implementation. Here, I'm in the applicationService on line 23.

18
00:01:17.240 --> 00:01:23.430
Here, on line 24, I'm using the applicationRepository.findById, passing in the

19
00:01:23.430 --> 00:01:28.350
id, and notice this returns an optional. And this simply says there could be a

20
00:01:28.350 --> 00:01:31.650
value or there could not be a value.

21
00:01:31.650 --> 00:01:36.100
And so on line 26, I'm testing to see if a value is present.

22
00:01:36.100 --> 00:01:38.520
If it is, I'm returning that value.

23
00:01:38.520 --> 00:01:40.570
If a value is not present,

24
00:01:40.570 --> 00:01:44.750
then I'm returning a new ApplicationNotFoundException, and I'm

25
00:01:44.750 --> 00:01:52.390
passing in the text Application Not Found. Here, going back to the

26
00:01:52.390 --> 00:01:58.240
TzaController, the getApplication method down on line 50, I'm

27
00:01:58.240 --> 00:02:01.340
catching this ApplicationNotFoundException.

28
00:02:01.340 --> 00:02:04.950
Then, I'm throwing a new ResponseStatusException.

29
00:02:04.950 --> 00:02:08.990
I'm passing in the HttpStatus of NOT_FOUND, and then I'm

30
00:02:08.990 --> 00:02:12.840
sending back the message Application Not Found.

31
00:02:12.840 --> 00:02:16.890
So I've already launched and deployed the application.

32
00:02:16.890 --> 00:02:21.440
So this time, we're going to use a tool called cURL to test it.

33
00:02:21.440 --> 00:02:25.640
CURL is a command line tool that lets you call APIs.

34
00:02:25.640 --> 00:02:31.360
Here, I'm using the keyword curl and then the URL of the API I'm trying to call.

35
00:02:31.360 --> 00:02:38.240
So in this case, we're just listing out the applications. And this looks right.

36
00:02:38.240 --> 00:02:42.220
It's all of the applications found in the database.

37
00:02:42.220 --> 00:02:48.370
So now let's retrieve a single application.

38
00:02:48.370 --> 00:02:53.050
And so it's going to be curl again, the URL. In this case,

39
00:02:53.050 --> 00:02:57.630
let's retrieve the first application, and it's what we expect.

40
00:02:57.630 --> 00:03:02.300
It's the Trackzilla application with an id of 1.

41
00:03:02.300 --> 00:03:07.320
So now let's retrieve one that we know doesn't exist with an

42
00:03:07.320 --> 00:03:11.650
id of 76. And look at what we get back.

43
00:03:11.650 --> 00:03:15.730
We get a status of 404, an error Not Found, and a

44
00:03:15.730 --> 00:03:23.000
message, Application Not Found. So this is a look at how you can add exception handling to your APIs.

