1
00:00:00,950 --> 00:00:05,390
RESTful APIs are easier to create and easier for many clients to

2
00:00:05,390 --> 00:00:09,230
consume when we compare them to something like SOAP.

3
00:00:09,230 --> 00:00:13,060
They are used a lot for web integration and mobile device applications,

4
00:00:13,060 --> 00:00:18,740
so let's look at how we build REST APIs using Spring Boot.

5
00:00:18,740 --> 00:00:21,240
So this is the TrackZilla application.

6
00:00:21,240 --> 00:00:27,140
The TrackZilla application is now updated to use RESTful APIs.

7
00:00:27,140 --> 00:00:34,470
So let's look at the TzaController, and here on line 23 I'm using the

8
00:00:34,470 --> 00:00:40,290
@RestController annotation. This simplifies creating RESTful web services. The

9
00:00:40,290 --> 00:00:45,600
controller now simply returns object data that is written directly to the HTTP

10
00:00:45,600 --> 00:00:53,770
response as JSON. Here on line 24, this @RequestMapping is an important

11
00:00:53,770 --> 00:00:59,030
annotation because it maps HTTP requests to the correct handler methods in the

12
00:00:59,030 --> 00:01:06,370
controller. Tza will be the root of all requests coming into this API. Now these

13
00:01:06,370 --> 00:01:11,580
two, the @RestController and the @RequestMapping annotations, these are Spring

14
00:01:11,580 --> 00:01:13,110
MVC annotations.

15
00:01:13,110 --> 00:01:15,640
They are not specific to Spring Boot.

16
00:01:15,640 --> 00:01:21,280
Spring also offer shortcut annotations where each method can be annotated.

17
00:01:21,280 --> 00:01:28,740
So let's scroll down to getAllTickets on line 38 look at this @GetMapping.

18
00:01:28,740 --> 00:01:33,430
So this @GetMapping annotation specifically handles get requests

19
00:01:33,430 --> 00:01:36,800
and get requests coming into the tickets path.

20
00:01:36,800 --> 00:01:39,560
So anytime there's a get request to tickets,

21
00:01:39,560 --> 00:01:43,140
it will be mapped to this method getAllTickets.

22
00:01:43,140 --> 00:01:44,740
Now let's scroll back up.

23
00:01:44,740 --> 00:01:47,540
If you remember from the previous lesson,

24
00:01:47,540 --> 00:01:52,080
we annotated our controller with the @Controller annotation.

25
00:01:52,080 --> 00:01:53,320
But in this case,

26
00:01:53,320 --> 00:01:57,820
I'm using @RestController. Now @RestController is really just a

27
00:01:57,820 --> 00:02:01,840
convenience annotation that does nothing more than add the

28
00:02:01,840 --> 00:02:05,510
@Controller and the @ResponseBody annotations.

29
00:02:05,510 --> 00:02:09,655
I do want to note that @RestController doesn't work with our view

30
00:02:09,655 --> 00:02:16,760
technology Thymeleaf, so methods cannot return models. Notice here

31
00:02:16,760 --> 00:02:19,720
this method is returning a ResponseEntity.

32
00:02:19,720 --> 00:02:22,990
Now it can't return models because of the inclusion of the

33
00:02:22,990 --> 00:02:28,070
@ResponseBody annotation. @ResponseBody on a controller indicates

34
00:02:28,070 --> 00:02:31,910
to Spring that the return value of the method is serialized

35
00:02:31,910 --> 00:02:35,060
directly to the body of the HTTP request.

36
00:02:35,060 --> 00:02:39,300
That's fine because what we are building is meant to be consumed as an API.

37
00:02:39,300 --> 00:02:43,820
So here on line 44 let's talk more about ResponseEntity.

38
00:02:43,820 --> 00:02:48,210
ResponseEntity represents the entire HTTP response. That

39
00:02:48,210 --> 00:02:53,500
includes status code. Here on line 46 I'm passing a status code

40
00:02:53,500 --> 00:02:59,500
of OK. So it includes the status code, headers, and the response body.

41
00:02:59,500 --> 00:03:07,000
Now the HTTP response is fully configurable. All I need to do is return it from the endpoint, and Spring handles the rest.

