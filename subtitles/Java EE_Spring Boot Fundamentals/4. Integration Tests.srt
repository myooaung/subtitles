1
00:00:03,980 --> 00:00:08,270
Integration testing allows for testing of the entire application and

2
00:00:08,270 --> 00:00:11,880
all of its layers and not just individual units,

3
00:00:11,880 --> 00:00:14,510
and it is useful to be able to do this without

4
00:00:14,510 --> 00:00:17,370
requiring deployment of the application.

5
00:00:17,370 --> 00:00:20,860
The @SpringBootTest annotation is useful for integration

6
00:00:20,860 --> 00:00:26,240
testing and is chosen over @WebMVCTest because @SpringBootTest

7
00:00:26,240 --> 00:00:30,220
starts the full application context, including the server,

8
00:00:30,220 --> 00:00:35,470
and does not customize component scanning at all. @SpringBootTest

9
00:00:35,470 --> 00:00:38,030
will look for the main configuration class,

10
00:00:38,030 --> 00:00:42,680
annotated with the @SpringBootApplication annotation, and use that to start

11
00:00:42,680 --> 00:00:49,250
a Spring ApplicationContext, simulating a client call.

12
00:00:49,250 --> 00:00:52,740
Let's look at integration testing. I've opened the project and

13
00:00:52,740 --> 00:00:56,800
navigated to the TzaControllerIntegrationTest.java file.

14
00:00:56,800 --> 00:01:01,940
Let's take a look at it.

15
00:01:01,940 --> 00:01:10,910
Let's go to the very top. Here on line 19 we've seen this @RunWith annotation

16
00:01:10,910 --> 00:01:17,077
before. On line 20 there is the @SpringBootTest annotation.

17
00:01:17,077 --> 00:01:22,130
Notice here we are passing in a RANDOM_PORT.

18
00:01:22,130 --> 00:01:24,660
This is very helpful when you're working in a test

19
00:01:24,660 --> 00:01:27,740
environment to avoid conflicts.

20
00:01:27,740 --> 00:01:34,020
And here on line 21 I'm using the @AutoConfigureMockMvc annotation.

21
00:01:34,020 --> 00:01:37,820
This annotation simulates calling the code from the client exactly the

22
00:01:37,820 --> 00:01:42,980
same way as if we were processing a real HTTP request.

23
00:01:42,980 --> 00:01:45,420
And let's scroll down to line 27.

24
00:01:45,420 --> 00:01:48,460
Here we're using a TestRestTemplate.

25
00:01:48,460 --> 00:01:50,870
This is perfect for integration testing,

26
00:01:50,870 --> 00:01:56,350
and it allows us to consume a REST API from this test case.

27
00:01:56,350 --> 00:02:00,985
The neat thing is Spring Boot provides this TestRestTemplate automatically,

28
00:02:00,985 --> 00:02:04,445
and all I have to do is autowire it.

29
00:02:04,445 --> 00:02:06,955
Let's scroll down to line 30.

30
00:02:06,955 --> 00:02:11,185
Let's take a look at the getAllApplications test. Notice on line

31
00:02:11,185 --> 00:02:16,125
32 I'm using the getForEntity of the REST template. The

32
00:02:16,125 --> 00:02:20,175
getForEntity invokes a get request on an API,

33
00:02:20,175 --> 00:02:23,315
and the response is converted and then stored in this

34
00:02:23,315 --> 00:02:28,005
response object, which is of type ResponseEntity. Scroll

35
00:02:28,005 --> 00:02:31,635
down. On line 34 there's an assertion.

36
00:02:31,635 --> 00:02:36,225
I simply assert that the status returned is OK. So let's

37
00:02:36,225 --> 00:02:43,635
execute this by clicking Run Test.

38
00:02:43,635 --> 00:02:47,065
And let's expand this window so that we can see the output of the

39
00:02:47,065 --> 00:02:51,415
integration test. In a moment we should see a green check mark saying

40
00:02:51,415 --> 00:02:55,995
this test passed. And there we have it.

41
00:02:55,995 --> 00:03:00,745
We have the green check mark, and this test was successful.

42
00:03:00,745 --> 00:03:04,185
The next unit test that we have is called getAllTickets,

43
00:03:04,185 --> 00:03:07,125
and it's simply testing that we receive tickets.

44
00:03:07,125 --> 00:03:10,575
So let's execute this one.

45
00:03:10,575 --> 00:03:13,955
And in a moment we should see that green check mark saying that our

46
00:03:13,955 --> 00:03:18,385
integration test passed. And there you have it,

47
00:03:18,385 --> 00:03:25,000
a green check mark for the test passing. And that was a look at integration testing with Spring Boot.

