WEBVTT
1
00:00:01.290 --> 00:00:04.800
The last topic we're going to cover is Spring Boot profiles.

2
00:00:04.800 --> 00:00:08.740
Profiles are fundamental to the Spring framework.

3
00:00:08.740 --> 00:00:12.290
Let's say we have an application that we need to deploy to

4
00:00:12.290 --> 00:00:14.630
different environments such as development,

5
00:00:14.630 --> 00:00:16.410
test, and production.

6
00:00:16.410 --> 00:00:21.240
The application configuration in each of these environments will be different.

7
00:00:21.240 --> 00:00:23.780
For example, when running in dev,

8
00:00:23.780 --> 00:00:26.740
you want the app to connect to the development database.

9
00:00:26.740 --> 00:00:29.680
Or if you're deploying your application to production,

10
00:00:29.680 --> 00:00:34.700
you'll want to connect to the production database.

11
00:00:34.700 --> 00:00:39.120
Spring Boot supports all of the Spring profile configurations with a few

12
00:00:39.120 --> 00:00:44.220
additional features like the spring.profiles.active configuration.

13
00:00:44.220 --> 00:00:47.540
This is used to define the currently active profile.

14
00:00:47.540 --> 00:00:51.800
This is a standard property that Spring Boot will pick up automatically.

15
00:00:51.800 --> 00:00:55.070
But the most important profile‑related feature that Spring Boot

16
00:00:55.070 --> 00:00:58.440
brings is profile‑specific property files.

17
00:00:58.440 --> 00:01:01.290
These have to be named in a specific format,

18
00:01:01.290 --> 00:01:07.730
applications‑profile.properties. For example, for development,

19
00:01:07.730 --> 00:01:12.140
you would use applications‑ dev.properties. For test,

20
00:01:12.140 --> 00:01:16.300
you would use applications‑test.properties, and for production,

21
00:01:16.300 --> 00:01:21.000
applications‑prod.properties. Spring Boot will automatically load the

22
00:01:21.000 --> 00:01:29.000
properties in an applications.properties file for all profiles and then the ones in profile‑specific properties files.

