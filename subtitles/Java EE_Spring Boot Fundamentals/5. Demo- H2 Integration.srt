1
00:00:00,080 --> 00:00:04,640
I've opened the code for Module4 and navigated to the pom.xml file.

2
00:00:04,640 --> 00:00:07,110
Let's take a look at the dependencies.

3
00:00:07,110 --> 00:00:11,640
First, on line 24, we have the spring‑boot‑starter.

4
00:00:11,640 --> 00:00:14,890
Next, on line 29, we have the spring‑boot‑starter‑test.

5
00:00:14,890 --> 00:00:17,190
We've seen these two before.

6
00:00:17,190 --> 00:00:22,634
Notice here on line 34, there's now a dependency for the H2 in‑memory database,

7
00:00:22,634 --> 00:00:30,640
and its scope is set at runtime. And here on line 41, there's also a dependency

8
00:00:30,640 --> 00:00:35,740
for the spring‑boot‑starter‑data‑jpa. This adds the Spring Data JPA so that we

9
00:00:35,740 --> 00:00:38,050
can communicate with the database.

10
00:00:38,050 --> 00:00:41,070
Now let's look more closely at the TrackZilla Application.

11
00:00:41,070 --> 00:00:45,590
TrackZilla has three domain entities that represent the business

12
00:00:45,590 --> 00:00:48,870
data captured by the system, so Application,

13
00:00:48,870 --> 00:00:50,480
Release, and Ticket.

14
00:00:50,480 --> 00:00:57,700
Let's take a look at Application. For Application, this domain

15
00:00:57,700 --> 00:01:01,250
entity represents the application that a bug or enhancement

16
00:01:01,250 --> 00:01:04,880
request or ticket will be tracked against. Notice here on line

17
00:01:04,880 --> 00:01:07,540
5, the @Entity annotation.

18
00:01:07,540 --> 00:01:11,500
This is just indicating that it's a JPA entity. For a lack of

19
00:01:11,500 --> 00:01:15,130
a table annotation, it assumes that this entity will be mapped

20
00:01:15,130 --> 00:01:17,920
to a table named Application.

21
00:01:17,920 --> 00:01:21,070
Let's look at the id property here on line 11.

22
00:01:21,070 --> 00:01:24,810
The id property is annotated with @Id so that JPA

23
00:01:24,810 --> 00:01:27,790
will recognize it as an object's ID.

24
00:01:27,790 --> 00:01:33,440
The object property is also annotated here on line 9 with the @GeneratedValue

25
00:01:33,440 --> 00:01:38,080
to indicate that the ID should be generated automatically.

26
00:01:38,080 --> 00:01:41,220
There's another domain entity called a Ticket.

27
00:01:41,220 --> 00:01:44,800
Let's look at that. Again, it's annotated with @Entity.

28
00:01:44,800 --> 00:01:47,660
The Ticket simply represents the actual bug or

29
00:01:47,660 --> 00:01:50,470
enhancement request for a given application.

30
00:01:50,470 --> 00:01:53,530
So notice it has an ID, it has a title,

31
00:01:53,530 --> 00:01:58,080
and it has a description. And the last entity is a Release.

32
00:01:58,080 --> 00:02:01,195
Again, we're using the @Entity annotation,

33
00:02:01,195 --> 00:02:04,275
and the Release represents a software release.

34
00:02:04,275 --> 00:02:09,495
So notice there's an ID, a releaseDate, and a description.

35
00:02:09,495 --> 00:02:11,395
Now let's talk about repositories.

36
00:02:11,395 --> 00:02:15,315
The Spring Data repository abstraction greatly reduces the

37
00:02:15,315 --> 00:02:19,955
need to have boilerplate code to implement data access for an

38
00:02:19,955 --> 00:02:23,325
H2 in‑memory database, and, really, for any database.

39
00:02:23,325 --> 00:02:25,295
So let's take a look at that.

40
00:02:25,295 --> 00:02:28,710
There are actually three here, ApplicationRepository,

41
00:02:28,710 --> 00:02:31,785
ReleaseRepository, and TicketRepository.

42
00:02:31,785 --> 00:02:35,913
Let's look at the ApplicationRepository. The Spring Data JPA

43
00:02:35,913 --> 00:02:40,585
repository allows us to access data by creating JPA queries

44
00:02:40,585 --> 00:02:44,095
automatically from a method name.

45
00:02:44,095 --> 00:02:47,345
So let's look at this in more detail.

46
00:02:47,345 --> 00:02:50,405
Notice this is an interface. And, as a matter of fact,

47
00:02:50,405 --> 00:02:56,035
all three of these are interfaces. But notice there's no implementation.

48
00:02:56,035 --> 00:03:01,435
That's because Spring Boot automatically provides the implementation for us.

49
00:03:01,435 --> 00:03:02,795
So let's look at this.

50
00:03:02,795 --> 00:03:07,455
All we need to do is extend CrudRepository and pass in the

51
00:03:07,455 --> 00:03:11,015
domain class or the entity class to be managed and then the

52
00:03:11,015 --> 00:03:13,425
ID of the domain class type.

53
00:03:13,425 --> 00:03:14,365
And that's it.

54
00:03:14,365 --> 00:03:17,605
Spring Data JPA handles the rest for us.

55
00:03:17,605 --> 00:03:20,525
Now let's test this out.

56
00:03:20,525 --> 00:03:23,795
Navigate to the Main application class. In our example,

57
00:03:23,795 --> 00:03:30,855
it's FundamentalsApplication. Notice here on line 23,

58
00:03:30,855 --> 00:03:33,115
I've added a CommandLineRunner.

59
00:03:33,115 --> 00:03:36,645
This makes it a simple command line base application.

60
00:03:36,645 --> 00:03:40,155
So, first, it fetches the ApplicationRepository from the Spring

61
00:03:40,155 --> 00:03:45,145
application context. And then on lines 25 through 28, I'm just

62
00:03:45,145 --> 00:03:48,995
simply saving new Applications to the database,

63
00:03:48,995 --> 00:03:54,115
and I'm using the save method on the ApplicationRepository, so three

64
00:03:54,115 --> 00:03:58,905
applications, TrackZilla, Expenses, and Notifications with additional

65
00:03:58,905 --> 00:04:06,864
detail like the owner and the description. Next, here on lines 29

66
00:04:06,864 --> 00:04:11,344
through 31, I'm fetching all of the application objects and printing

67
00:04:11,344 --> 00:04:14,304
it out to the screen.

68
00:04:14,304 --> 00:04:18,204
In order to execute this, simply click the green arrow here,

69
00:04:18,204 --> 00:04:27,314
or you can click the Run here, and we'll see the output in the bottom window.

70
00:04:27,314 --> 00:04:33,584
And I'm copying that so I can search for it when it finally comes up.

71
00:04:33,584 --> 00:04:36,264
And so let's search for it in here.

72
00:04:36,264 --> 00:04:40,094
We're printing out the three applications that we just added,

73
00:04:40,094 --> 00:04:52,000
TrackZilla, Expenses, and Notifications. So that's a look at how easy it is to access databases from Spring Boot.

