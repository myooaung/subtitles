WEBVTT
1
00:00:02.890 --> 00:00:06.410
Instead of using the Spring Initializr to generate a project,

2
00:00:06.410 --> 00:00:09.620
we can also use the Spring Boot's CLI,

3
00:00:09.620 --> 00:00:12.950
you do not need to use the CLI to work with Spring Boot,

4
00:00:12.950 --> 00:00:16.940
but some developers prefer this over the Spring Initializr.

5
00:00:16.940 --> 00:00:25.210
Since I'm on a Mac, I use the Homebrew package manager to install the CLI.

6
00:00:25.210 --> 00:00:28.330
Let's look at initializing a new project using the

7
00:00:28.330 --> 00:00:35.580
CLI and executing an application.

8
00:00:35.580 --> 00:00:37.610
I've navigated to a terminal window,

9
00:00:37.610 --> 00:00:41.210
and I want to check my version of the Spring Boot CLI before I

10
00:00:41.210 --> 00:00:44.200
get started so I'm up with the latest release.

11
00:00:44.200 --> 00:00:48.080
Okay, you can initialize a new project using the init command,

12
00:00:48.080 --> 00:00:50.640
which lets you create a project by using the Spring

13
00:00:50.640 --> 00:00:54.110
Initializr without leaving this terminal window.

14
00:00:54.110 --> 00:00:59.680
So that would be spring init, and let's call it fundamentals2.

15
00:00:59.680 --> 00:01:02.680
So this is calling out to the Spring Initializr,

16
00:01:02.680 --> 00:01:09.130
and it created a project and it's stored in fundamentals2.

17
00:01:09.130 --> 00:01:13.840
So let's take a look at that.

18
00:01:13.840 --> 00:01:15.600
It generated several files.

19
00:01:15.600 --> 00:01:19.140
Let's just look at the Maven POM file.

20
00:01:19.140 --> 00:01:21.610
This should be familiar to you.

21
00:01:21.610 --> 00:01:26.680
There is the spring‑boot‑starter and the spring‑boot‑starter‑test.

22
00:01:26.680 --> 00:01:32.270
Now in that example, there were no dependencies,

23
00:01:32.270 --> 00:01:35.690
but you could easily include them using the spring init

24
00:01:35.690 --> 00:01:39.380
and passing in the dependencies option.

25
00:01:39.380 --> 00:01:44.755
So here we here we see the dependencies of web and data‑jpa,

26
00:01:44.755 --> 00:01:49.540
and we're calling it fundamentals3.

27
00:01:49.540 --> 00:01:52.020
So there again, it called out to the Spring Initializr.

28
00:01:52.020 --> 00:01:58.010
Let's go to the fundamentals3 folder.

29
00:01:58.010 --> 00:02:01.590
Let's take a look at the POM file,

30
00:02:01.590 --> 00:02:04.420
and notice now it includes the correct dependencies,

31
00:02:04.420 --> 00:02:09.985
the data‑jpa and the web, along with the test.

32
00:02:09.985 --> 00:02:16.390
You can also run applications with the CLI using Groovy scripts.

33
00:02:16.390 --> 00:02:19.930
So the Spring Boot CLI is completely self‑contained so you do

34
00:02:19.930 --> 00:02:23.180
not need any external Groovy installation.

35
00:02:23.180 --> 00:02:30.190
So let's go to the CLI folder.

36
00:02:30.190 --> 00:02:32.510
So I've navigated to the CLI folder.

37
00:02:32.510 --> 00:02:38.810
Let's review the app.groovy script. So it's a very simple application that

38
00:02:38.810 --> 00:02:42.660
creates a RESTful API that's mapped to the default path,

39
00:02:42.660 --> 00:02:48.170
and it returns a string of Hello Pluralsight. So let's see this.

40
00:02:48.170 --> 00:02:55.940
And to run it, all I need to type is run app.groovy. And it is going to

41
00:02:55.940 --> 00:03:06.100
launch the RESTful API. Notice it starts Tomcat on port 8080 so let's test

42
00:03:06.100 --> 00:03:10.760
out the API. We're going to navigate to a web browser,

43
00:03:10.760 --> 00:03:22.000
go to localhost:8080, and we see the result of Hello Pluralsight. That was a look at using the CLI to create a Spring Boot application.

