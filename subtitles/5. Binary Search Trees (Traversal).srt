1
1

00:00:00,298  -->  00:00:02,534
(playful melody)
2

2

00:00:02,534  -->  00:00:05,258
(typing)
3

3

00:00:05,258  -->  00:00:08,863
<v Sarah>All right, so let's talk about traversing trees.</v>
4

4

00:00:08,863  -->  00:00:11,578
Now, there are four ways you can traverse a tree,
5

5

00:00:11,578  -->  00:00:14,974
one isn't used very often and the other three are.
6

6

00:00:14,974  -->  00:00:17,757
So the first way which isn't used very often,
7

7

00:00:17,757  -->  00:00:20,037
is called a Level Traversal.
8

8

00:00:20,037  -->  00:00:23,858
And what we do is we visit nodes on each level in order,
9

9

00:00:23,858  -->  00:00:25,168
starting from the top.
10

10

00:00:25,168  -->  00:00:28,030
So we'd visit the root, 'cause that's at level zero
11

11

00:00:28,030  -->  00:00:30,455
and then we visit the nodes at level one
12

12

00:00:30,455  -->  00:00:33,135
going from left to right and then we'd visit the nodes
13

13

00:00:33,135  -->  00:00:35,756
at level two from left to right, et cetera,
14

14

00:00:35,756  -->  00:00:38,004
until we've visited all the nodes in the tree.
15

15

00:00:38,004  -->  00:00:39,996
The second way is called Pre-order,
16

16

00:00:39,996  -->  00:00:42,263
and with Pre-order we always visit
17

17

00:00:42,263  -->  00:00:44,831
the root of every subtree first.
18

18

00:00:44,831  -->  00:00:46,611
And so we're gonna visit the root
19

19

00:00:46,611  -->  00:00:49,313
and then we're gonna visit the root of the left subtree
20

20

00:00:49,313  -->  00:00:51,963
and the root of its left subtree, et cetera,
21

21

00:00:51,963  -->  00:00:55,733
and until we get down to the first leaf.
22

22

00:00:55,733  -->  00:00:58,708
And then we visit the leaves of each subtree
23

23

00:00:58,708  -->  00:01:00,570
working back up the tree, and don't worry
24

24

00:01:00,570  -->  00:01:03,018
I'm gonna show you an example of this in a minute.
25

25

00:01:03,018  -->  00:01:05,752
With Post-order traversal we do the opposite,
26

26

00:01:05,752  -->  00:01:07,650
we visit the root last.
27

27

00:01:07,650  -->  00:01:09,470
And so instead of starting at the root,
28

28

00:01:09,470  -->  00:01:12,558
we travel all the way down to the tree to the first leaf
29

29

00:01:12,558  -->  00:01:14,651
and that's where we start our traversal.
30

30

00:01:14,651  -->  00:01:16,301
And then there's In-order traversal
31

31

00:01:16,301  -->  00:01:18,929
and that means that we visit the left child first
32

32

00:01:18,929  -->  00:01:19,982
and then we visit the root
33

33

00:01:19,982  -->  00:01:21,944
and then we visit the right child.
34

34

00:01:21,944  -->  00:01:23,805
So this is one case where pictures
35

35

00:01:23,805  -->  00:01:25,357
will hopefully make this clear,
36

36

00:01:25,357  -->  00:01:27,836
so let's go to the next slide.
37

37

00:01:27,836  -->  00:01:30,187
And we're gonna look at the level traversal here.
38

38

00:01:30,187  -->  00:01:34,300
And for the level traversal we start at level zero
39

39

00:01:34,300  -->  00:01:35,788
and then we move to level one
40

40

00:01:35,788  -->  00:01:37,044
and we move from left to right,
41

41

00:01:37,044  -->  00:01:39,561
and then we go to level two and we move from left to right,
42

42

00:01:39,561  -->  00:01:41,775
and we go to three and we move from left to right.
43

43

00:01:41,775  -->  00:01:44,358
So we visit 25, then 20 and 27,
44

44

00:01:45,529  -->  00:01:47,362
then 15, 22, 26 and 30
45

45

00:01:49,272  -->  00:01:51,266
and then 29 and 32.
46

46

00:01:51,266  -->  00:01:53,048
So that's a level order traversal
47

47

00:01:53,048  -->  00:01:54,839
and it's not used very often.
48

48

00:01:54,839  -->  00:01:57,300
So now we have pre-order, and with pre-order
49

49

00:01:57,300  -->  00:02:00,240
we always visit the root of a subtree first.
50

50

00:02:00,240  -->  00:02:02,805
And so we're gonna start at 25
51

51

00:02:02,805  -->  00:02:04,570
and then we're going to go to 20,
52

52

00:02:04,570  -->  00:02:06,320
and then we go to 15.
53

53

00:02:07,489  -->  00:02:10,557
15 doesn't have any children and so we go back up
54

54

00:02:10,557  -->  00:02:14,015
to the root which we've already visited and we visit 22.
55

55

00:02:14,015  -->  00:02:16,848
So the order so far is 25, 20, 15,
56

56

00:02:18,227  -->  00:02:21,394
22 and then we go back up, we visit 27
57

57

00:02:22,328  -->  00:02:26,258
and then 26, we go back to the root and visit 30
58

58

00:02:26,258  -->  00:02:28,990
and then 29 and then 32.
59

59

00:02:28,990  -->  00:02:31,768
So each time we look at a node,
60

60

00:02:31,768  -->  00:02:34,885
we visit the node before we look at its children.
61

61

00:02:34,885  -->  00:02:38,319
So we visited 25 before we looked at 20.
62

62

00:02:38,319  -->  00:02:42,292
We visited 20 before we looked at 15 and 22.
63

63

00:02:42,292  -->  00:02:47,078
And then we visited 27 before we looked at 26 and 30.
64

64

00:02:47,078  -->  00:02:50,520
And we visited 30 before 29 and 32.
65

65

00:02:50,520  -->  00:02:52,044
So that's pre-order.
66

66

00:02:52,044  -->  00:02:55,066
Pre meaning the root is done first.
67

67

00:02:55,066  -->  00:02:57,260
Okay, so with an in-order traversal,
68

68

00:02:57,260  -->  00:03:01,093
we completely visit the left side and then we visit the root
69

69

00:03:01,093  -->  00:03:03,447
and then we completely visit the right side.
70

70

00:03:03,447  -->  00:03:06,816
And so we don't start with 25, we don't start with 20,
71

71

00:03:06,816  -->  00:03:10,383
we start with 15, because that's the left side.
72

72

00:03:10,383  -->  00:03:11,957
15 doesn't have any children,
73

73

00:03:11,957  -->  00:03:15,085
so at that point we move up to the root and visit 20,
74

74

00:03:15,085  -->  00:03:17,817
then we visit the right side which is 22.
75

75

00:03:17,817  -->  00:03:20,170
And then we are finished with the complete left side
76

76

00:03:20,170  -->  00:03:22,811
for the root, and so now we visit the root.
77

77

00:03:22,811  -->  00:03:24,567
And now we do the same thing on the right side,
78

78

00:03:24,567  -->  00:03:27,569
we wanna visit the left side first
79

79

00:03:27,569  -->  00:03:29,819
then the roots and then the right side.
80

80

00:03:29,819  -->  00:03:31,620
And so we don't visit 27 yet
81

81

00:03:31,620  -->  00:03:35,545
because it has 26 on the left, so we visit 26
82

82

00:03:35,545  -->  00:03:37,308
then we move up to the 27
83

83

00:03:37,308  -->  00:03:40,725
because now we can visit the root for this subtree.
84

84

00:03:40,725  -->  00:03:43,326
And now we wanna do the same thing with the right.
85

85

00:03:43,326  -->  00:03:47,723
And so we don't visit 30 yet because 30 has a left child,
86

86

00:03:47,723  -->  00:03:50,545
and so we visit 29 then we visit the root
87

87

00:03:50,545  -->  00:03:52,024
and then we visit 32.
88

88

00:03:52,024  -->  00:03:56,854
So with in-order, it's always do the entire left side
89

89

00:03:56,854  -->  00:04:00,844
then the root, then the entire right side for every node.
90

90

00:04:00,844  -->  00:04:02,427
And so it's 15, 20,
91

91

00:04:03,546  -->  00:04:07,963
22, 25, 26, 'cause we need to do the left side first,
92

92

00:04:09,018  -->  00:04:13,215
27, 29, because we do the left side first,
93

93

00:04:13,215  -->  00:04:14,048
30 and 32.
94

94

00:04:15,540  -->  00:04:19,389
Now notice something here, the data is sorted,
95

95

00:04:19,389  -->  00:04:22,556
15, 20, 22, 25, 26, 27, 29, 30 and 32,
96

96

00:04:25,299  -->  00:04:27,662
and that's why it's called in-order.
97

97

00:04:27,662  -->  00:04:30,016
And so because of the characteristics
98

98

00:04:30,016  -->  00:04:33,789
of a binary search tree, if we do an in-order traversal
99

99

00:04:33,789  -->  00:04:35,199
the data is sorted.
100

100

00:04:35,199  -->  00:04:39,226
And so it's really easy to get the sorted data
101

101

00:04:39,226  -->  00:04:41,517
once you've inserted them into a binary search tree.
102

102

00:04:41,517  -->  00:04:44,271
You just have to do an in-order traversal of the tree.
103

103

00:04:44,271  -->  00:04:46,541
If you wanna sort an array for example,
104

104

00:04:46,541  -->  00:04:49,259
you could insert the values into a binary search tree
105

105

00:04:49,259  -->  00:04:50,571
and then traverse the tree.
106

106

00:04:50,571  -->  00:04:52,079
And that would actually be faster
107

107

00:04:52,079  -->  00:04:54,285
than some of the sort algorithms we looked at.
108

108

00:04:54,285  -->  00:04:56,529
And so that's in-order, for every node
109

109

00:04:56,529  -->  00:05:00,004
you visit the entire left subtree first
110

110

00:05:00,004  -->  00:05:02,018
then you visit the node and then you visit
111

111

00:05:02,018  -->  00:05:03,774
the entire right subtree.
112

112

00:05:03,774  -->  00:05:06,061
And finally, we have post-order.
113

113

00:05:06,061  -->  00:05:09,746
We had pre-order back here where we visited the root first
114

114

00:05:09,746  -->  00:05:13,474
or the node, and then the left and then the right.
115

115

00:05:13,474  -->  00:05:15,812
In post-order the root goes last,
116

116

00:05:15,812  -->  00:05:19,305
and so you visit the entire left subtree for a node
117

117

00:05:19,305  -->  00:05:21,755
and then the entire right subtree for the node
118

118

00:05:21,755  -->  00:05:23,504
and finally you hit the node.
119

119

00:05:23,504  -->  00:05:25,990
And so we're gonna start here at 15,
120

120

00:05:25,990  -->  00:05:29,720
'cause we have to visit the entire left subtree
121

121

00:05:29,720  -->  00:05:31,771
and right subtree for the root first
122

122

00:05:31,771  -->  00:05:34,900
and then we have to visit the left or right subtree for 20,
123

123

00:05:34,900  -->  00:05:38,825
so we get 15 and then 22 because we do the subtrees
124

124

00:05:38,825  -->  00:05:39,939
before the node.
125

125

00:05:39,939  -->  00:05:41,758
And then 20 and then we have to do
126

126

00:05:41,758  -->  00:05:43,936
the entire right subtree before we do the root.
127

127

00:05:43,936  -->  00:05:46,500
So we're gonna go 26 and then we've gotta do
128

128

00:05:46,500  -->  00:05:49,780
the entire right subtree for 27 first
129

129

00:05:49,780  -->  00:05:52,728
and then the entire left and right for 30,
130

130

00:05:52,728  -->  00:05:57,231
so we're gonna go to 29, 32, now we can do the roots,
131

131

00:05:57,231  -->  00:05:58,398
30, 27 and 25.
132

132

00:06:01,047  -->  00:06:05,766
So in pre-order you visit the root first or the node.
133

133

00:06:05,766  -->  00:06:08,027
So if we have the concept of a current node,
134

134

00:06:08,027  -->  00:06:09,795
you're gonna visit the current node first
135

135

00:06:09,795  -->  00:06:12,305
and then its entire left subtree
136

136

00:06:12,305  -->  00:06:14,892
and then its entire right subtree.
137

137

00:06:14,892  -->  00:06:17,499
And so we visit 25 and then we're gonna do
138

138

00:06:17,499  -->  00:06:20,283
its entire left subtree and right subtree.
139

139

00:06:20,283  -->  00:06:22,234
So we visit 20 and then we're gonna do
140

140

00:06:22,234  -->  00:06:25,734
its entire left subtree, its entire right subtree.
141

141

00:06:25,734  -->  00:06:28,317
And so we get 25, 20, 15 and 22
142

142

00:06:29,504  -->  00:06:31,070
and then we do the same thing on the right side,
143

143

00:06:31,070  -->  00:06:35,499
we do 27 and then we do its left subtree 26,
144

144

00:06:35,499  -->  00:06:36,808
and then its right subtree.
145

145

00:06:36,808  -->  00:06:39,437
So we're gonna do 30, its left subtree
146

146

00:06:39,437  -->  00:06:41,439
and then its right subtree.
147

147

00:06:41,439  -->  00:06:43,970
That's pre-order, the root goes first.
148

148

00:06:43,970  -->  00:06:46,887
In in-order it's left, root, right.
149

149

00:06:47,985  -->  00:06:49,555
And so when we're talking about roots
150

150

00:06:49,555  -->  00:06:51,557
we're talking about the root of every subtree.
151

151

00:06:51,557  -->  00:06:55,057
And in post-order, it's left, right, root.
152

152

00:06:56,071  -->  00:07:00,034
And so in this case we do 15, go to the right,
153

153

00:07:00,034  -->  00:07:02,491
22 and then we do 20,
154

154

00:07:02,491  -->  00:07:04,795
and then we don't do the root yet,
155

155

00:07:04,795  -->  00:07:05,869
because the root goes last.
156

156

00:07:05,869  -->  00:07:08,284
So we come here, 27 is gonna go last,
157

157

00:07:08,284  -->  00:07:11,011
so 26 and then we go to the right,
158

158

00:07:11,011  -->  00:07:14,753
30 is gonna go last, 29, 32 and then we can start
159

159

00:07:14,753  -->  00:07:16,920
going back up, 30, 27, 25.
160

160

00:07:18,120  -->  00:07:21,052
And so those are the four ways that we can traverse trees,
161

161

00:07:21,052  -->  00:07:25,094
level, pre-order, in-order and post-order.
162

162

00:07:25,094  -->  00:07:27,538
And so let's go back to IntelliJ now
163

163

00:07:27,538  -->  00:07:28,982
and we're going to write a method
164

164

00:07:28,982  -->  00:07:32,399
to do the in-order traversal of our tree.
165

165

00:07:36,232  -->  00:07:38,215
And so here I am back in IntelliJ
166

166

00:07:38,215  -->  00:07:41,596
and I'm going to go to the tree node class,
167

167

00:07:41,596  -->  00:07:43,325
because as we saw in the slides,
168

168

00:07:43,325  -->  00:07:45,856
each node can be a root of a subtree.
169

169

00:07:45,856  -->  00:07:48,303
And we're gonna add the traversal method in here.
170

170

00:07:48,303  -->  00:07:51,808
So right here, I'm gonna say, public void
171

171

00:07:51,808  -->  00:07:52,781
(typing)
172

172

00:07:52,781  -->  00:07:56,610
traverse in-order and I don't need to pass anything,
173

173

00:07:56,610  -->  00:07:58,781
'cause we're just gonna start at this node.
174

174

00:07:58,781  -->  00:08:01,674
And remember, for in-order we visit the left child
175

175

00:08:01,674  -->  00:08:02,986
and then we visit the root
176

176

00:08:02,986  -->  00:08:04,478
and then we visit the right child.
177

177

00:08:04,478  -->  00:08:06,349
And so we're gonna say if the left child
178

178

00:08:06,349  -->  00:08:09,627
is not equal to null, well, we need to traverse
179

179

00:08:09,627  -->  00:08:13,530
the left child before we wanna traverse this node.
180

180

00:08:13,530  -->  00:08:17,532
And so we're gonna say leftChild.traverseInOrder.
181

181

00:08:17,532  -->  00:08:19,801
Then we wanna visit this node and so we'll say,
182

182

00:08:19,801  -->  00:08:24,384
system.out.println and we'll say data equals plus data.
183

183

00:08:26,079  -->  00:08:29,345
And in fact I'll make this print
184

184

00:08:29,345  -->  00:08:33,824
and I'll add, change that to a semicolon first,
185

185

00:08:33,824  -->  00:08:36,553
keep hitting L instead, and I'll add a comma here,
186

186

00:08:36,553  -->  00:08:38,303
so plus comma equals.
187

187

00:08:40,235  -->  00:08:42,554
And then finally 'cause we're doing in-order traverse
188

188

00:08:42,554  -->  00:08:44,066
so we wanna visit the right child.
189

189

00:08:44,066  -->  00:08:48,066
So we'll say if right child is not equal to null
190

190

00:08:48,920  -->  00:08:50,081
visit the right child.
191

191

00:08:50,081  -->  00:08:52,029
(typing)
192

192

00:08:52,029  -->  00:08:56,027
And that's it, that's our traverse in-order for the node.
193

193

00:08:56,027  -->  00:08:58,595
And so when we're doing this node
194

194

00:08:58,595  -->  00:09:02,110
we wanna do, we're examining this node and its subtree.
195

195

00:09:02,110  -->  00:09:06,011
And for in-order we wanna do the left child,
196

196

00:09:06,011  -->  00:09:08,548
visit this node and then do the right child.
197

197

00:09:08,548  -->  00:09:09,758
And by left child and right child,
198

198

00:09:09,758  -->  00:09:11,229
of course, they can have children.
199

199

00:09:11,229  -->  00:09:14,042
So this is saying we're gonna visit the left subtree
200

200

00:09:14,042  -->  00:09:17,539
of this node first, then we're gonna visit this node
201

201

00:09:17,539  -->  00:09:19,558
and that's when we print out its data
202

202

00:09:19,558  -->  00:09:21,970
and then we're gonna visit the right subtree.
203

203

00:09:21,970  -->  00:09:26,093
And so back in our tree class we need a method for this.
204

204

00:09:26,093  -->  00:09:29,676
So we'll say public void, traverse in order
205

205

00:09:35,954  -->  00:09:38,448
and all we wanna do here is traverse the root.
206

206

00:09:38,448  -->  00:09:42,324
So if the root isn't null, isn't equal to null.
207

207

00:09:42,324  -->  00:09:44,990
(typing)
208

208

00:09:44,990  -->  00:09:48,796
Then we'll traverse the root, and that's it.
209

209

00:09:48,796  -->  00:09:51,526
And so when we call this with the root
210

210

00:09:51,526  -->  00:09:53,391
we'll check whether the root has a left child
211

211

00:09:53,391  -->  00:09:56,763
and if it does we're gonna handle its left subtree first
212

212

00:09:56,763  -->  00:09:58,561
and then we'll visit the root,
213

213

00:09:58,561  -->  00:10:00,441
and then we'll handle its right subtree.
214

214

00:10:00,441  -->  00:10:03,731
And so keep in mind that for in-order
215

215

00:10:03,731  -->  00:10:06,963
as we saw in the slides, every node's left subtree
216

216

00:10:06,963  -->  00:10:09,514
will be printed out before we actually
217

217

00:10:09,514  -->  00:10:11,311
print out the data for the node
218

218

00:10:11,311  -->  00:10:13,454
and then every node's right subtree.
219

219

00:10:13,454  -->  00:10:15,798
So let's go back to our main method and call this now.
220

220

00:10:15,798  -->  00:10:18,828
So we'll say inTree.traverseInOrder
221

221

00:10:18,828  -->  00:10:22,282
and we should see these values printed out in sorted order,
222

222

00:10:22,282  -->  00:10:25,231
because remember, when we traverse a tree in-order,
223

223

00:10:25,231  -->  00:10:27,248
we actually end up with the values
224

224

00:10:27,248  -->  00:10:28,767
coming out in sorted order.
225

225

00:10:28,767  -->  00:10:29,850
So let's run.
226

226

00:10:33,429  -->  00:10:35,994
It will probably be easier actually, looking at that,
227

227

00:10:35,994  -->  00:10:40,293
if I didn't do this, if I just had the data and a comma.
228

228

00:10:40,293  -->  00:10:42,293
So let's run that again,
229

229

00:10:43,204  -->  00:10:44,066
and there we go.
230

230

00:10:44,066  -->  00:10:47,483
So 15, 20, 22, 25, 26, 27, 29, 30 and 32.
231

231

00:10:52,827  -->  00:10:55,294
And so our nodes were inserted,
232

232

00:10:55,294  -->  00:10:58,788
one, two, three, four, five, six, seven, eight, nine
233

233

00:10:58,788  -->  00:11:01,236
and we have one, two, three, four, five,
234

234

00:11:01,236  -->  00:11:03,605
six, seven, eight, nine values
235

235

00:11:03,605  -->  00:11:05,821
and they were inserted where we expected
236

236

00:11:05,821  -->  00:11:09,519
them to be inserted and our in-order traversal is working.
237

237

00:11:09,519  -->  00:11:11,567
Because when we traverse in-order we'll get
238

238

00:11:11,567  -->  00:11:14,476
the values in the tree in sorted order.
239

239

00:11:14,476  -->  00:11:16,760
Okay, so now that we can build a tree and we can look
240

240

00:11:16,760  -->  00:11:19,475
at what's in it, we should write a method
241

241

00:11:19,475  -->  00:11:22,194
for finding a value in the tree.
242

242

00:11:22,194  -->  00:11:23,870
And we'll do that in the next video.
