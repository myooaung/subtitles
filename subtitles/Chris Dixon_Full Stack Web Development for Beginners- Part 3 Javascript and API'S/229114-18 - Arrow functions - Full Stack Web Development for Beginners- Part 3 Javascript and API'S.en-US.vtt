WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.535
Like most programming languages,

00:00:02.535 --> 00:00:04.725
JavaScript evolves over time,

00:00:04.725 --> 00:00:08.865
and this can change or add new features and syntax.

00:00:08.865 --> 00:00:13.260
JavaScript is based on a scripting language called ECMA Scripts,

00:00:13.260 --> 00:00:17.185
which aims to standardize the implementation of JavaScript.

00:00:17.185 --> 00:00:19.700
This is why you will often hear versions of

00:00:19.700 --> 00:00:23.615
JavaScript being referred to as things such as ES5,

00:00:23.615 --> 00:00:26.695
ES6 or ES7, for example.

00:00:26.695 --> 00:00:31.430
ES5 or ECMA script version five is a version which is

00:00:31.430 --> 00:00:37.345
currently fully implemented in all browsers without the need for any tools.

00:00:37.345 --> 00:00:39.890
To confuse things even further,

00:00:39.890 --> 00:00:44.015
you will also hear them referred to as the year of each release.

00:00:44.015 --> 00:00:47.150
ES6 came out in 2015,

00:00:47.150 --> 00:00:51.070
so you may also hear this called ES 2015.

00:00:51.070 --> 00:00:52.820
As we go through this course,

00:00:52.820 --> 00:00:59.180
we'll use modern features or syntax from the ES6 specification and above.

00:00:59.180 --> 00:01:05.200
This just means a more modern way of writing JavaScript or a newer feature.

00:01:05.200 --> 00:01:10.230
Starting, in this video we will look at the ES6 arrow function.

00:01:10.230 --> 00:01:13.715
An arrow function is a way of writing a function,

00:01:13.715 --> 00:01:15.155
which you've already seen,

00:01:15.155 --> 00:01:18.040
but with a shorter, cleaner syntax.

00:01:18.040 --> 00:01:23.840
If we go to the starter files into the arrow functions section, if we scroll down,

00:01:23.840 --> 00:01:25.970
we'll see the values of number one and number

00:01:25.970 --> 00:01:29.555
two multiplied inside of an anonymous function,

00:01:29.555 --> 00:01:31.660
which we see just here.

00:01:31.660 --> 00:01:38.030
An ES6 arrow function allows us to run the same code inside of these curly braces,

00:01:38.030 --> 00:01:40.985
but using a shorter syntax.

00:01:40.985 --> 00:01:44.620
So we can still keep our variable of anonymous function,

00:01:44.620 --> 00:01:46.730
but rather than having the word function,

00:01:46.730 --> 00:01:50.015
we can just use the parentheses like this,

00:01:50.015 --> 00:01:53.980
and then the equals and greater than symbol,

00:01:53.980 --> 00:01:59.075
and all the rest of the code inside the curly braces just stays the same.

00:01:59.075 --> 00:02:02.135
If we save this and then reload,

00:02:02.135 --> 00:02:05.825
we still see the value of 50 in the browser.

00:02:05.825 --> 00:02:09.635
You may often hear this called a fat arrow function too,

00:02:09.635 --> 00:02:15.080
because of how the syntax looks with this equal symbol and the right angle brackets.

00:02:15.080 --> 00:02:18.560
These brackets or parentheses which we have here,

00:02:18.560 --> 00:02:23.230
can still take in any parameters and arguments, like we've already seen.

00:02:23.230 --> 00:02:30.060
So if we delete our two variables up here and instead pass these in as arguments.

00:02:30.060 --> 00:02:32.460
So let's add an num, one,

00:02:32.460 --> 00:02:34.845
and then num, two.

00:02:34.845 --> 00:02:39.560
We can then pass in these values as arguments when we call the function.

00:02:39.560 --> 00:02:41.690
So 5 and 10,

00:02:41.690 --> 00:02:43.985
save, and then over to the browser.

00:02:43.985 --> 00:02:47.155
This still works exactly the same as before.

00:02:47.155 --> 00:02:51.185
If we do only have one argument to pass in,

00:02:51.185 --> 00:02:56.875
we can show on this syntax even further by completely removing the parentheses.

00:02:56.875 --> 00:02:59.735
So if we only wanted to pass in one number,

00:02:59.735 --> 00:03:04.010
such as five, two of our second parameter here.

00:03:04.010 --> 00:03:08.810
We can also remove the brackets or the parentheses and just leave

00:03:08.810 --> 00:03:13.350
our parameter name inside of here and then to avoid any errors,

00:03:13.350 --> 00:03:16.355
we'll just remove this number two from here,

00:03:16.355 --> 00:03:21.000
reload the browser, and now we'll get the value of five.

00:03:21.170 --> 00:03:24.725
So this is now a shorter, cleaner syntax,

00:03:24.725 --> 00:03:26.660
and this is how we'll write functions for

00:03:26.660 --> 00:03:30.065
a lot of the rest of the code during this course.

00:03:30.065 --> 00:03:32.675
So this is all great and working fine now,

00:03:32.675 --> 00:03:36.390
and this is how we can use an ES6 arrow function.
