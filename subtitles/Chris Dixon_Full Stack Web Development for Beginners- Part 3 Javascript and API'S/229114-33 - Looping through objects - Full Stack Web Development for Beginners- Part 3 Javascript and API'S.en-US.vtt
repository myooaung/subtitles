WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.080 --> 00:00:03.465
Just like when we were working with arrays,

00:00:03.465 --> 00:00:06.285
if you have lots of properties on an object,

00:00:06.285 --> 00:00:08.340
we may want to loop through them.

00:00:08.340 --> 00:00:13.845
This is more efficient and less code than selecting each property separately.

00:00:13.845 --> 00:00:16.050
Inside of our starter file,

00:00:16.050 --> 00:00:18.195
which is looping through objects,

00:00:18.195 --> 00:00:22.755
we have a character object just here, which you can loop through.

00:00:22.755 --> 00:00:26.370
I'm going to create an empty variable to start with,

00:00:26.370 --> 00:00:27.990
the store the results.

00:00:27.990 --> 00:00:34.665
Let's say Var results and satisfy me an empty string.

00:00:34.665 --> 00:00:36.950
This is going to store the results of

00:00:36.950 --> 00:00:41.120
each object property which will loop through as a string.

00:00:41.120 --> 00:00:43.910
The loop we're used to loop through object is called

00:00:43.910 --> 00:00:47.315
the for in loop and it looks like this.

00:00:47.315 --> 00:00:52.300
We start off with a standard looking for loop just like before.

00:00:52.300 --> 00:00:56.885
Then we go off to the premises and set our variable of i,

00:00:56.885 --> 00:00:59.960
but this time say in character.

00:00:59.960 --> 00:01:04.225
Character is the name of our object which is here.

00:01:04.225 --> 00:01:08.840
Now inside the loop body we can do some console logs.

00:01:08.840 --> 00:01:16.350
Let's start with a console.log for the value of i and see what we get.

00:01:17.030 --> 00:01:20.340
Let's open this up inside the console.

00:01:20.340 --> 00:01:26.225
Right-click inspect and now we can see we get the values of firstName,

00:01:26.225 --> 00:01:28.600
lastName, image in color.

00:01:28.600 --> 00:01:32.310
This is because the value of i is the key.

00:01:32.310 --> 00:01:37.070
This is basically the values on the left-hand side of our properties.

00:01:37.070 --> 00:01:41.599
If we wanted to access the values on the right-hand side of our properties,

00:01:41.599 --> 00:01:44.990
we could then do a second console log.

00:01:44.990 --> 00:01:47.465
This time instead of i,

00:01:47.465 --> 00:01:50.040
we do the character (i);

00:01:51.620 --> 00:01:56.130
semicolon at the end, refresh.

00:01:56.130 --> 00:01:58.860
We can see each pair is now on the screen.

00:01:58.860 --> 00:02:02.325
FirstName of bugs, lastName of bunny.

00:02:02.325 --> 00:02:03.970
If we wanted to see these better,

00:02:03.970 --> 00:02:10.325
we could do a third console log and just add something to separate these values,

00:02:10.325 --> 00:02:15.395
such as some dashes and there we go.

00:02:15.395 --> 00:02:17.165
There's our properties.

00:02:17.165 --> 00:02:19.610
Okay. Good, so now we have access to all of

00:02:19.610 --> 00:02:23.570
these properties and also the names and values individually.

00:02:23.570 --> 00:02:25.655
We can now go ahead and construct

00:02:25.655 --> 00:02:29.705
our results and creates a string to display on the screen.

00:02:29.705 --> 00:02:34.565
Let's go down to our for loop and below these console logs.

00:02:34.565 --> 00:02:36.500
It's construct our string.

00:02:36.500 --> 00:02:41.790
We can access these result variable add this with plus equals.

00:02:41.790 --> 00:02:44.690
First of all, let's set the value of i,

00:02:44.690 --> 00:02:48.850
which is our property names such as firstName and lastName,

00:02:48.850 --> 00:02:55.345
add today's a string with a colon in between and space.

00:02:55.345 --> 00:03:00.700
Then just after this, we can add our property name such as bugs and bunny.

00:03:00.700 --> 00:03:03.740
Just like we're seeing with this console log here.

00:03:03.740 --> 00:03:11.440
Let's add character i and then add these onto their own separate line with a break tag.

00:03:13.220 --> 00:03:16.960
We've created a result which is a string of all of

00:03:16.960 --> 00:03:20.545
our characters properties with the names and values.

00:03:20.545 --> 00:03:24.230
We can now open this the browser inside an empty div.

00:03:24.230 --> 00:03:26.865
Let's go up to the body section,

00:03:26.865 --> 00:03:34.735
create a div and add id of outputs is going to be the location where we're outputs,

00:03:34.735 --> 00:03:40.210
our results string and then go down to the bottom outside of the for loop.

00:03:40.210 --> 00:03:44.110
Let's do a document.getElementById,

00:03:44.110 --> 00:03:46.810
we want to grab the outputs,

00:03:46.810 --> 00:03:56.600
which is our empty div and then set the innerHTML to be equal to our result variable.

00:03:57.120 --> 00:04:01.045
If we save this and then over to our browser,

00:04:01.045 --> 00:04:05.080
reload, we now see the string we've

00:04:05.080 --> 00:04:09.925
created with the property name value followed by a break tag.

00:04:09.925 --> 00:04:13.355
This is a string which we created just here.

00:04:13.355 --> 00:04:16.100
This is repeated for each item inside of

00:04:16.100 --> 00:04:20.300
our objects because we've added this to a for in loop.

00:04:20.300 --> 00:04:24.455
This is how we can loop through objects and it's really convenient,

00:04:24.455 --> 00:04:27.455
especially when objects become really large.

00:04:27.455 --> 00:04:30.185
In the next video, we're going to continue to look at

00:04:30.185 --> 00:04:34.620
objects and how to build them using the constructor function.
