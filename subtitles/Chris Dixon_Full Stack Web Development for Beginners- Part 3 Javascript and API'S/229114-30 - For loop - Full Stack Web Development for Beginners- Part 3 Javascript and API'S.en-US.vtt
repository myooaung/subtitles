WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.100
In the next few videos,

00:00:02.100 --> 00:00:04.935
we're going to look at some different types of loops.

00:00:04.935 --> 00:00:09.330
The loops we have previously looked at are intended to be used with arrays.

00:00:09.330 --> 00:00:11.115
However, the For and while loop,

00:00:11.115 --> 00:00:16.725
which we're going to look at is a bit more general purpose and not exclusive to arrays.

00:00:16.725 --> 00:00:22.110
Let's say we wanted to grab one of these characters and add it to the unordered list.

00:00:22.110 --> 00:00:24.405
Let's go to data.

00:00:24.405 --> 00:00:27.270
Have our empty or unordered list here.

00:00:27.270 --> 00:00:30.975
Our array of characters, just like before.

00:00:30.975 --> 00:00:35.215
If we wanted to add these characters to this empty UL.

00:00:35.215 --> 00:00:38.480
To do this, we need to loop through each item inside

00:00:38.480 --> 00:00:44.420
this array at li tags and then place them inside unordered list.

00:00:44.420 --> 00:00:50.485
First, we can create an empty variable to store these character names with the li tags.

00:00:50.485 --> 00:00:53.000
Let's say on the characters,

00:00:53.000 --> 00:00:58.790
create a variable called item and set this to be a empty string.

00:00:58.790 --> 00:01:02.525
If we were to do this manually without using a loop,

00:01:02.525 --> 00:01:04.550
we need to do something like this.

00:01:04.550 --> 00:01:06.874
We'll grab our empty item,

00:01:06.874 --> 00:01:08.630
which is this variable here,

00:01:08.630 --> 00:01:10.570
and then use plus equals.

00:01:10.570 --> 00:01:15.635
Plus equals will add the value on the right to this item on the left.

00:01:15.635 --> 00:01:20.140
Let's say characters, which is our array here,

00:01:20.140 --> 00:01:22.365
and then position zero.

00:01:22.365 --> 00:01:25.040
This would assign our Roger Rabbit value,

00:01:25.040 --> 00:01:28.205
which is just here, to our variable of item.

00:01:28.205 --> 00:01:31.055
We could then add this onto a new line by adding

00:01:31.055 --> 00:01:35.610
a break tag and then a semicolon at the end.

00:01:35.610 --> 00:01:40.515
If we copy this and add the same three more times.

00:01:40.515 --> 00:01:45.390
Again, manually we need to do one, two and three.

00:01:45.390 --> 00:01:52.980
Then we'll add these items to this unordered list with a document.getElementByID.

00:01:53.210 --> 00:01:57.480
Want to lacked the idea of characters

00:01:57.680 --> 00:02:04.230
and then set the inner HTML to be equal to our item.

00:02:04.340 --> 00:02:08.445
If we say this and then reload the browser, good.

00:02:08.445 --> 00:02:12.320
Our array items are now on the page but this way is not

00:02:12.320 --> 00:02:16.910
ideal because you may have hundreds of items inside the array.

00:02:16.910 --> 00:02:19.505
This would mean a lot of repetition.

00:02:19.505 --> 00:02:24.935
Would need to repeat these lines multiple times for each item in the array.

00:02:24.935 --> 00:02:28.255
This is a problem in which a loop could solve for us.

00:02:28.255 --> 00:02:31.965
We create a for loop just like this.

00:02:31.965 --> 00:02:36.905
Let's add the for keyword, the parentheses,

00:02:36.905 --> 00:02:42.375
and then open and close the curly braces inside of these parentheses here.

00:02:42.375 --> 00:02:45.065
The for loop takes in three statements.

00:02:45.065 --> 00:02:48.170
First is what is called the initializer.

00:02:48.170 --> 00:02:56.450
Let's say it's our initial value of i to be equal to zero with the semicolon at the end.

00:02:56.450 --> 00:02:58.880
Here we can set a variable with

00:02:58.880 --> 00:03:02.840
our initial value is common to see this variable called i,

00:03:02.840 --> 00:03:04.655
which stands for increment.

00:03:04.655 --> 00:03:09.750
This is because this is incremented with each loop after the semicolon.

00:03:09.750 --> 00:03:11.840
Second is the condition.

00:03:11.840 --> 00:03:15.815
The loop will continue as long as this condition is true.

00:03:15.815 --> 00:03:20.975
We want keep looping for the length of the characters inside of this array.

00:03:20.975 --> 00:03:27.630
We can say while i is less than the characters dot length,

00:03:28.250 --> 00:03:30.705
semicolon at the end.

00:03:30.705 --> 00:03:35.300
Third, we say how we want to increase the value of i with each loop.

00:03:35.300 --> 00:03:41.290
If we say i++, this will increase the value by one each time.

00:03:41.290 --> 00:03:44.595
The first loop, i begins at the value of zero.

00:03:44.595 --> 00:03:50.505
Then after the second loop i will be one the third loop i will be two, and so on.

00:03:50.505 --> 00:03:52.340
Then just like a function,

00:03:52.340 --> 00:03:56.225
we can add the code we want to run between the curly braces.

00:03:56.225 --> 00:03:59.915
This code is repeated for each loop, or in our case,

00:03:59.915 --> 00:04:03.925
it will be repeated for each item inside the array.

00:04:03.925 --> 00:04:05.810
If this is confusing,

00:04:05.810 --> 00:04:10.010
let's console log the value of i to see what's going on.

00:04:10.010 --> 00:04:15.510
Console log the value of i,

00:04:15.700 --> 00:04:18.780
open to the browser.

00:04:19.850 --> 00:04:22.440
Open up our console.

00:04:22.440 --> 00:04:24.135
Okay, we've got zero,

00:04:24.135 --> 00:04:25.855
one, two and three.

00:04:25.855 --> 00:04:28.700
Remember we initialized i to be zero.

00:04:28.700 --> 00:04:30.515
This is the starting value.

00:04:30.515 --> 00:04:33.610
We then have four items inside the array.

00:04:33.610 --> 00:04:36.285
There are four different values here.

00:04:36.285 --> 00:04:41.145
These four values of zero through to three should also look familiar.

00:04:41.145 --> 00:04:43.940
It's the same as what we did right at the start.

00:04:43.940 --> 00:04:46.520
We have our values of zero through to

00:04:46.520 --> 00:04:50.515
three as our index positions inside the square brackets.

00:04:50.515 --> 00:04:53.570
Rather than having these four lines of code,

00:04:53.570 --> 00:04:57.845
we can simply copy one of these lines.

00:04:57.845 --> 00:04:59.600
Instead of the console log,

00:04:59.600 --> 00:05:02.065
we can now add it inside of our for loop.

00:05:02.065 --> 00:05:03.560
Delete these four lines,

00:05:03.560 --> 00:05:05.030
we don't need this anymore.

00:05:05.030 --> 00:05:07.415
We're going to be using this with our loop now.

00:05:07.415 --> 00:05:12.710
Then the hard coded value of zero can now be replaced with the value of i,

00:05:12.710 --> 00:05:15.125
which as we know, is zero,

00:05:15.125 --> 00:05:18.065
one, two and three and so on.

00:05:18.065 --> 00:05:21.170
Now if we save this and then reload,

00:05:21.170 --> 00:05:24.200
we still have the same four names up on the screen

00:05:24.200 --> 00:05:28.945
here but this time we're using the for loop with a lot less code.

00:05:28.945 --> 00:05:34.100
This is good because this will be repeated for as long as we have items in the array.

00:05:34.100 --> 00:05:39.790
For example, if we were to go and add any new value on here,

00:05:39.790 --> 00:05:42.940
so that should say, "Hello," inside there.

00:05:42.940 --> 00:05:46.530
This will also be added to the end of the array.

00:05:47.170 --> 00:05:50.260
I'll just remove these for now.

00:05:50.260 --> 00:05:54.515
Since the characters container is a unordered list,

00:05:54.515 --> 00:05:55.925
which is just here,

00:05:55.925 --> 00:06:02.155
we can improve this loop by surrounding each item inside of the list item tags.

00:06:02.155 --> 00:06:03.945
Just before characters.

00:06:03.945 --> 00:06:10.365
Let's other string of li the plus symbol.

00:06:10.365 --> 00:06:12.485
Then right at the very end,

00:06:12.485 --> 00:06:16.960
change our break tag to be our closing list item.

00:06:16.960 --> 00:06:20.050
give that a save, reload,

00:06:20.050 --> 00:06:25.070
now we see this is a list item because we have the bullets on the left-hand side.

00:06:25.070 --> 00:06:28.490
If we also right-click and inspect,

00:06:28.490 --> 00:06:33.170
Click on the inspector and choose any one of these list items.

00:06:33.170 --> 00:06:35.240
We can now see on the screen we have

00:06:35.240 --> 00:06:40.505
our unordered list and then next inside we have our four list items,

00:06:40.505 --> 00:06:42.740
just like standard HTML.

00:06:42.740 --> 00:06:46.505
If you remember back in the DOM manipulation video,

00:06:46.505 --> 00:06:49.270
we looked at query selector all.

00:06:49.270 --> 00:06:51.945
If we go back into our starter files.

00:06:51.945 --> 00:06:54.050
If you scroll up to number 10,

00:06:54.050 --> 00:06:55.940
which is DOM manipulation,

00:06:55.940 --> 00:06:59.395
let's quickly open up the index page.

00:06:59.395 --> 00:07:02.235
Down at the very bottom we had query,

00:07:02.235 --> 00:07:06.535
select all, where we selected our two images by the index position.

00:07:06.535 --> 00:07:09.490
Remember we said we can access all our images by

00:07:09.490 --> 00:07:15.035
this index number but this is also not ideal because we're repeating code.

00:07:15.035 --> 00:07:17.845
Rather than duplicating code like this,

00:07:17.845 --> 00:07:21.175
these are the things which a for loop would be useful for.

00:07:21.175 --> 00:07:25.690
If we close this down and then go back to our for loop starter file,

00:07:25.690 --> 00:07:30.775
which is down here, I've provided two different images inside this folder.

00:07:30.775 --> 00:07:33.545
We can go ahead and add these in now.

00:07:33.545 --> 00:07:35.550
Close the sidebar.

00:07:35.550 --> 00:07:39.835
If we go to our unordered lists at the top inside the HTML,

00:07:39.835 --> 00:07:41.860
let's add an image.

00:07:41.860 --> 00:07:45.710
First of all with the source of bugs bunny,

00:07:45.920 --> 00:07:50.250
which has the dot PNG extension.

00:07:50.250 --> 00:07:52.805
Then our second image,

00:07:52.805 --> 00:08:01.695
this time with the source of daffy duck.PNG. Close this off.

00:08:01.695 --> 00:08:04.125
Now I have our two images.

00:08:04.125 --> 00:08:09.070
I'm going to go ahead and store these reference inside a variable called images.

00:08:09.070 --> 00:08:11.790
Down to our script.

00:08:11.790 --> 00:08:18.769
Lets go right down to the very bottom and let's select a variable called images.

00:08:18.769 --> 00:08:21.545
Set these to be document.query,

00:08:21.545 --> 00:08:29.620
select all, and then grab all the images with the IMG tag.

00:08:29.620 --> 00:08:31.330
Then we can use the loop again,

00:08:31.330 --> 00:08:33.685
do anything we want with these images.

00:08:33.685 --> 00:08:38.100
I'm going to grab the name of each of these image files on the screen.

00:08:38.100 --> 00:08:40.435
Just below our images variable.

00:08:40.435 --> 00:08:43.060
Let's create a new for-loop.

00:08:43.060 --> 00:08:46.175
Construct this just like we did before.

00:08:46.175 --> 00:08:48.840
Then we can add our three values.

00:08:48.840 --> 00:08:51.450
First of all, let's set our initializer,

00:08:51.450 --> 00:08:54.480
i is going to be equal to zero;

00:08:54.480 --> 00:09:00.055
we're going to run this loop while i is less than images,

00:09:00.055 --> 00:09:04.690
which is our variable here.length.

00:09:05.000 --> 00:09:07.800
This will be two elements long

00:09:07.800 --> 00:09:10.655
because you have two different image elements on the screen.

00:09:10.655 --> 00:09:14.630
This will run twice the semicolon at the end.

00:09:14.630 --> 00:09:18.025
Then we're going to increment this one on each loop.

00:09:18.025 --> 00:09:21.720
Now let's check out the outputs with a console log.

00:09:21.720 --> 00:09:26.100
The value we want to display is the images.

00:09:26.100 --> 00:09:28.595
Our images variable here,

00:09:28.595 --> 00:09:31.745
inside the square brackets, we can add i.

00:09:31.745 --> 00:09:35.675
This will access the first image on the first loop.

00:09:35.675 --> 00:09:41.270
Then on the second loop we will access the second image because i will be equal to one.

00:09:41.270 --> 00:09:44.510
First let's check this out in the browser.

00:09:44.510 --> 00:09:47.075
Head over to the console.

00:09:47.075 --> 00:09:50.360
There's our two images which we just lived through.

00:09:50.360 --> 00:09:53.375
If you wanted to grab the name of the source,

00:09:53.375 --> 00:09:56.645
we could use the.getattributes.

00:09:56.645 --> 00:09:58.850
Then inside the brackets,

00:09:58.850 --> 00:10:01.750
the attribute we want to grab is the source.

00:10:01.750 --> 00:10:03.825
Now back over to the browser.

00:10:03.825 --> 00:10:07.985
We now get the source attribute name for each image.

00:10:07.985 --> 00:10:10.520
Again, if had lots of different images,

00:10:10.520 --> 00:10:13.475
loop would be really useful for something like this.

00:10:13.475 --> 00:10:18.155
Loops can really save us a lot of time when performing repetitive tasks.

00:10:18.155 --> 00:10:20.435
This is how a for loop works.

00:10:20.435 --> 00:10:23.460
Next we will look at the while loop.
