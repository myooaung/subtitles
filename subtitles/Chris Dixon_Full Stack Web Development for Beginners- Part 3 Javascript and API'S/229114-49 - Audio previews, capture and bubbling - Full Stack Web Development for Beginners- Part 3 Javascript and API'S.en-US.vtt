WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:02.850
Welcome back. In the last video,

00:00:02.850 --> 00:00:07.635
we mentioned that we want to pause any audio players when we click on a ''New one''.

00:00:07.635 --> 00:00:11.730
This will avoid multiple previews all playing at the same time.

00:00:11.730 --> 00:00:16.335
To do this, down at the bottom of our script.js file.

00:00:16.335 --> 00:00:19.605
Let's go right down to the very bottom.

00:00:19.605 --> 00:00:23.550
We are going to listen out for the play events on the documents.

00:00:23.550 --> 00:00:29.775
Rather than addEventListener to one of the single buttons on our audio player.

00:00:29.775 --> 00:00:33.090
Instead, we're going to add this to the documents.

00:00:33.090 --> 00:00:37.265
It is because there is multiple play buttons all at the same time.

00:00:37.265 --> 00:00:42.285
It makes sense to add this to the document rather than each individual button.

00:00:42.285 --> 00:00:45.080
This will list now if when the playback has begun

00:00:45.080 --> 00:00:48.485
on audio elements and then it will run function.

00:00:48.485 --> 00:00:51.545
Let's start by selecting the ''document.addEventListener''.

00:00:51.545 --> 00:00:59.090
The event listener we want to listen out for is the play events,

00:00:59.090 --> 00:01:03.220
which will be triggered each time the audio started playing.

00:01:03.220 --> 00:01:08.080
Then we're going to trigger a function which is going to take in the events.

00:01:08.080 --> 00:01:10.550
This will be an ES 6 arrow function,

00:01:10.550 --> 00:01:14.620
which will run each time a audio has played.

00:01:14.620 --> 00:01:21.770
Inside this function, we first want to store all of our audio elements into a constant.

00:01:21.770 --> 00:01:24.470
Also a constant called audio.

00:01:24.470 --> 00:01:31.795
Then set is to document.getElements ByTagName.

00:01:31.795 --> 00:01:36.905
The type name we want to select is the audio tag.

00:01:36.905 --> 00:01:39.830
This will select all the audio players on

00:01:39.830 --> 00:01:44.375
the screen and store them inside a constant called audio.

00:01:44.375 --> 00:01:46.610
We then want to loop through

00:01:46.610 --> 00:01:51.065
all these audio instances and check if any are already playing.

00:01:51.065 --> 00:01:54.360
To do this, we can create a for loop.

00:01:55.010 --> 00:02:02.435
For going to set the initial value of i to be equal to zero.

00:02:02.435 --> 00:02:08.790
We want the square root and while i is less than the audio.Length,

00:02:08.810 --> 00:02:12.850
and then i plus plus.

00:02:14.120 --> 00:02:16.430
Now inside this loop,

00:02:16.430 --> 00:02:19.880
we'll want to do, we want to check if the audio player,

00:02:19.880 --> 00:02:23.045
which is currently playing is equal to the

00:02:23.045 --> 00:02:28.685
event.target.. Now inside here I'm going to create a if statement.

00:02:28.685 --> 00:02:33.200
We'll just type this out first and then we'll explain for each path is given.

00:02:33.200 --> 00:02:38.615
If audio i is not equal to the events,

00:02:38.615 --> 00:02:43.560
so targets and open up the braces.

00:02:43.700 --> 00:02:50.195
When we're inside of the browser and we click on ''Play'' on any of the songs.

00:02:50.195 --> 00:02:52.145
The reference to the audio player,

00:02:52.145 --> 00:02:57.160
which we've clicked will be available as information inside of the events.

00:02:57.160 --> 00:03:00.000
We can select this with event.target,

00:03:00.000 --> 00:03:01.890
which we looked at in the past.

00:03:01.890 --> 00:03:03.990
Back over in our loop,

00:03:03.990 --> 00:03:11.575
we checking if each individual audio elements is not equal to the event.target.

00:03:11.575 --> 00:03:13.625
Therefore we have filtering down

00:03:13.625 --> 00:03:18.110
the audio players which had not the one which we've clicked.

00:03:18.110 --> 00:03:21.365
Anything we run inside of the loop will apply to

00:03:21.365 --> 00:03:25.240
all audio players except the one we want.

00:03:25.240 --> 00:03:32.230
Any audio players which are currently playing with audio i, we can set.pause.

00:03:32.230 --> 00:03:34.325
Suppose all audio players,

00:03:34.325 --> 00:03:36.245
which are not the one we've clicked on.

00:03:36.245 --> 00:03:41.065
Therefore, only one of these audio players playing at the same time.

00:03:41.065 --> 00:03:44.240
If we give the save and go over to the browser,

00:03:44.240 --> 00:03:47.700
it'll reload and perform a search.

00:03:48.050 --> 00:03:52.840
Click on ''Search'', and I click on any of these.

00:03:55.700 --> 00:03:59.420
Now, if we click on two of the audio previews,

00:03:59.420 --> 00:04:03.530
we can see this isn't working just yet. It is to work.

00:04:03.530 --> 00:04:08.345
The final thing we need to do is add a third parameter to the event listener.

00:04:08.345 --> 00:04:11.245
Let's go back to our function.

00:04:11.245 --> 00:04:13.725
Then right down at the very end,

00:04:13.725 --> 00:04:16.120
is after the final curly brace,

00:04:16.120 --> 00:04:18.995
let's add a third parameter of true.

00:04:18.995 --> 00:04:21.400
To understand what this will do.

00:04:21.400 --> 00:04:26.390
Personally to look at something called event capture and bubbling,

00:04:27.290 --> 00:04:30.760
you will see a tree-like representation of

00:04:30.760 --> 00:04:34.740
the path right from the window down to the audio player.

00:04:34.740 --> 00:04:37.885
Remember early we looked at how we receive a lot of

00:04:37.885 --> 00:04:40.950
information about the events when it's triggered.

00:04:40.950 --> 00:04:42.790
Such as the event target,

00:04:42.790 --> 00:04:44.290
which is looked up before,

00:04:44.290 --> 00:04:48.310
and even things such as the mouse X and Y position.

00:04:48.310 --> 00:04:53.595
Well, not only did we receive information about the elements which five events,

00:04:53.595 --> 00:04:55.585
such as an audio player?

00:04:55.585 --> 00:05:00.640
We also receive information about all events in the tree. It will too.

00:05:00.640 --> 00:05:02.585
When the event is triggered,

00:05:02.585 --> 00:05:05.150
it begins at the top of the tree,

00:05:05.150 --> 00:05:10.150
at the window objects and creates a path all the way down.

00:05:10.150 --> 00:05:13.555
This is called the capturing phase.

00:05:13.555 --> 00:05:16.670
Then it goes all the way back up to the top.

00:05:16.670 --> 00:05:19.790
And this is called the bubbling phase.

00:05:19.790 --> 00:05:22.580
For the example we just seen in the project,

00:05:22.580 --> 00:05:26.425
we touched our event listener to the document for a good reason.

00:05:26.425 --> 00:05:29.900
If we added this to the individual audio player,

00:05:29.900 --> 00:05:35.240
we would need a new event listener for each audio player in our project.

00:05:35.240 --> 00:05:40.825
Adding it to the document works better because we just need to add it once.

00:05:40.825 --> 00:05:45.050
Then all of the audio plays below it in the tree will notify you

00:05:45.050 --> 00:05:49.420
because of this events information being passed up and down.

00:05:49.420 --> 00:05:51.470
First, there is a small problem.

00:05:51.470 --> 00:05:54.815
Now, some events don't actually bubble.

00:05:54.815 --> 00:05:59.460
Against it, the play event is one of these which doesn't.

00:06:00.770 --> 00:06:02.930
To solve this little problem,

00:06:02.930 --> 00:06:07.580
we've added the value of true as the third parameter here.

00:06:07.580 --> 00:06:11.980
This will execute the event handler in the capture phase.

00:06:11.980 --> 00:06:15.065
By default, this is set to false,

00:06:15.065 --> 00:06:18.860
which executes the event handler in the bubbling phase.

00:06:18.860 --> 00:06:20.450
As we just mentioned,

00:06:20.450 --> 00:06:22.795
the play events cannot bubble.

00:06:22.795 --> 00:06:25.265
Now, we'll have the third value of true.

00:06:25.265 --> 00:06:31.970
Let's give this a save and then go over to the browser and perform a search.

00:06:31.970 --> 00:06:37.290
Now let's go ahead and click on two of the ''Audio previews''.

00:06:42.080 --> 00:06:46.060
Great. Now, we click on a second ''Audio preview''.

00:06:46.060 --> 00:06:48.680
All of the existing audio players will stop.

00:06:48.680 --> 00:06:54.265
We can maybe understand this better by logging events to the console.

00:06:54.265 --> 00:06:56.505
Back to our script.

00:06:56.505 --> 00:06:58.060
Just under the pause,

00:06:58.060 --> 00:07:00.500
let's do a console log.

00:07:00.920 --> 00:07:04.045
That's log the value of the events,

00:07:04.045 --> 00:07:06.980
which is passed just here.

00:07:07.760 --> 00:07:12.135
Then over to the browser. Then let's open up the console.

00:07:12.135 --> 00:07:16.290
Right click "Inspect'', open up the console tab.

00:07:16.290 --> 00:07:21.160
Then let's click on one of the ''Audio players''.

00:07:23.570 --> 00:07:27.295
As soon as we file one of the audio players,

00:07:27.295 --> 00:07:36.410
we can see inside the console we have nine events listeners filed 1,2,3,4,5,6,7,8,9.

00:07:36.410 --> 00:07:40.040
We get nine because we only get the ones back,

00:07:40.040 --> 00:07:41.735
which we have not clicked on.

00:07:41.735 --> 00:07:46.795
Remember, restricted the number of songs returned to us to be 10.

00:07:46.795 --> 00:07:51.335
We've clicked on ''One'' and then we get the remaining nine in the console.

00:07:51.335 --> 00:07:53.675
Because we checked in size of the loop.

00:07:53.675 --> 00:07:57.995
If the current audio player is not the event or target,

00:07:57.995 --> 00:08:00.340
i e, the one which you've clicked on.

00:08:00.340 --> 00:08:02.895
If you open up one of these.

00:08:02.895 --> 00:08:07.295
Back to the console and then click on the little drop down here.

00:08:07.295 --> 00:08:09.320
We can see, as I mentioned before,

00:08:09.320 --> 00:08:11.975
that the bubble events is set to false.

00:08:11.975 --> 00:08:15.265
Therefore, the play event won't bubble.

00:08:15.265 --> 00:08:19.179
Excellent and Well done for finishing this projects,

00:08:19.179 --> 00:08:25.025
working with external data sources such as APIs and external databases,

00:08:25.025 --> 00:08:26.345
which we'll look at soon,

00:08:26.345 --> 00:08:31.225
really opens up the possibilities of what we can do with our projects.

00:08:31.225 --> 00:08:35.550
Bye for now, and I will see you in the next section.
