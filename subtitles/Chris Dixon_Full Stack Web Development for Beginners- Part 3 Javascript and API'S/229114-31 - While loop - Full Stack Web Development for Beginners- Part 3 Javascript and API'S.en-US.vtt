WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.435
Inside of our while loop starts the file.

00:00:03.435 --> 00:00:08.085
We have the same example which we looked at in the last video with the for loop.

00:00:08.085 --> 00:00:09.765
We have our images.

00:00:09.765 --> 00:00:11.535
We have an unordered list,

00:00:11.535 --> 00:00:16.800
we have a character's array and then we're pushing our characters into this empty div.

00:00:16.800 --> 00:00:19.800
Then we have our two images just below.

00:00:19.800 --> 00:00:21.825
This for loop which we looked at before,

00:00:21.825 --> 00:00:26.925
will continue to run as long as this condition is true, which is just here.

00:00:26.925 --> 00:00:30.840
So while Larry's items inside the array, this will keep running.

00:00:30.840 --> 00:00:34.125
A while loop, which we're going to look at now,

00:00:34.125 --> 00:00:35.625
does a similar job.

00:00:35.625 --> 00:00:37.620
But this time a while loop runs,

00:00:37.620 --> 00:00:40.125
while a condition evaluates to true.

00:00:40.125 --> 00:00:46.700
We can modify this to be a wild loop by changing the fall to be while.

00:00:46.700 --> 00:00:53.215
We can also remove the first and also the third statement from the brackets.

00:00:53.215 --> 00:00:57.475
So remove this data and i plus, plus.

00:00:57.475 --> 00:01:02.420
This is because a wild loop only receives the condition inside of here,

00:01:02.420 --> 00:01:05.710
and it will keep running while this condition is true.

00:01:05.710 --> 00:01:09.755
We still need to initialize the first value of i,

00:01:09.755 --> 00:01:12.605
and we can do this outside of the loop.

00:01:12.605 --> 00:01:14.240
So just above the loop,

00:01:14.240 --> 00:01:19.130
let's say var i is equal to zero.

00:01:19.130 --> 00:01:22.310
Finally, we can increment i on each loop,

00:01:22.310 --> 00:01:23.645
right at the very bottom,

00:01:23.645 --> 00:01:25.010
select say i plus,

00:01:25.010 --> 00:01:27.730
plus, and give us save.

00:01:27.730 --> 00:01:32.270
So to recap, this loop will begin at zero,

00:01:32.270 --> 00:01:33.725
which you suggest here.

00:01:33.725 --> 00:01:36.830
It will then add the first array item,

00:01:36.830 --> 00:01:38.605
which is this first line here.

00:01:38.605 --> 00:01:42.520
And then after it's done, AC will then increment i to be one.

00:01:42.520 --> 00:01:45.545
This will also continue to run until the value of

00:01:45.545 --> 00:01:49.240
i is no longer less than the length of the array.

00:01:49.240 --> 00:01:54.560
So if we do that, say we should still have our four names on the screen from our array.

00:01:54.560 --> 00:01:57.665
But this time using the while loop.

00:01:57.665 --> 00:01:59.690
Having the i plus,

00:01:59.690 --> 00:02:03.095
plus writes at the very end is really important.

00:02:03.095 --> 00:02:06.170
If we forget increases on each loop,

00:02:06.170 --> 00:02:10.100
i will always be less than the length of the array,

00:02:10.100 --> 00:02:15.895
meaning the condition will always be true and this will result in an infinite loop.

00:02:15.895 --> 00:02:18.800
This will cause the browser to crush.

00:02:18.800 --> 00:02:22.085
So if we were to remove this and then save,

00:02:22.085 --> 00:02:26.960
refresh, we can see that the browser is struggling to load.

00:02:26.960 --> 00:02:30.350
We can still see the spinning in the corner and also we have

00:02:30.350 --> 00:02:34.285
the option to stop loading the page and the browser will crush.

00:02:34.285 --> 00:02:37.760
However, a lot of modern browsers will also detect that this is

00:02:37.760 --> 00:02:42.775
the case and will stop running after a period of time, which you can see here.

00:02:42.775 --> 00:02:46.909
So now let's just add this back end solos no more problems,

00:02:46.909 --> 00:02:51.260
and then reload and our looped items are back on the screen.

00:02:51.260 --> 00:02:53.630
Before we wrap this video up,

00:02:53.630 --> 00:02:56.830
let's take a look at one more example.

00:02:56.830 --> 00:03:02.915
So let's go down to the very bottom and let's creates more variables for some numbers.

00:03:02.915 --> 00:03:09.760
Let's say x is equal to five and Y is equals 10.

00:03:09.760 --> 00:03:11.810
Then create our while loop,

00:03:11.810 --> 00:03:17.145
just like we did before and then we can create our condition.

00:03:17.145 --> 00:03:21.260
So let say if the value of x is less than y,

00:03:21.260 --> 00:03:23.300
then we can run our loop.

00:03:23.300 --> 00:03:29.595
So let's do a console.log the value of x,

00:03:29.595 --> 00:03:33.360
and then we create increment x by one each time.

00:03:33.360 --> 00:03:36.125
So while the value of x is less than y,

00:03:36.125 --> 00:03:41.030
we can output it to the console and then incremented by one each time.

00:03:41.030 --> 00:03:45.300
So save this over to the console.

00:03:46.550 --> 00:03:49.500
Refresh and there we go.

00:03:49.500 --> 00:03:52.590
That's values of five right through to nine.

00:03:52.590 --> 00:03:55.790
If we wanted this to go all the way to 10,

00:03:55.790 --> 00:03:57.320
just like the value of y.

00:03:57.320 --> 00:04:03.705
We could set this to be less than or equal to and this will now go up to 10.

00:04:03.705 --> 00:04:07.790
So this is how we use a while loop in JavaScript,

00:04:07.790 --> 00:04:12.510
and in the next video we're going to move on to looking at JavaScript objects.
