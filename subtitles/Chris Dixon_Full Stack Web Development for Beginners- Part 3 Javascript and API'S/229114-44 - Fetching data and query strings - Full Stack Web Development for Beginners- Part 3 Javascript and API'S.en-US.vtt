WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.890 --> 00:00:07.140
Earlier in the course, we created a HTML structure for our song, find the layout.

00:00:07.140 --> 00:00:10.335
I also challenged you to add some styling and layout

00:00:10.335 --> 00:00:14.130
using the CSS grid to make things look even better.

00:00:14.130 --> 00:00:17.955
In this section, we're going to be completing this project by using

00:00:17.955 --> 00:00:23.925
an API to pull in some real song data which we can use from iTunes.

00:00:23.925 --> 00:00:27.430
We'll also be using the JavaScript Fetch API,

00:00:27.430 --> 00:00:30.830
which will allow us to fetch a resource or in our case,

00:00:30.830 --> 00:00:34.369
we want to fetch the data from iTunes.

00:00:34.369 --> 00:00:36.845
Let's begin by opening up our song,

00:00:36.845 --> 00:00:38.785
find a project from earlier.

00:00:38.785 --> 00:00:40.685
If you haven't already done so,

00:00:40.685 --> 00:00:44.570
open up the song final project in Visual Studio Code,

00:00:44.570 --> 00:00:47.945
and then open up the index page in the browser.

00:00:47.945 --> 00:00:50.480
In the index.html file,

00:00:50.480 --> 00:00:54.145
we created some sample data for our songs.

00:00:54.145 --> 00:00:57.980
We're going to be creating this section dynamically using

00:00:57.980 --> 00:01:03.295
JavaScript and then grabbing the song data from the iTunes API.

00:01:03.295 --> 00:01:07.010
We can go ahead and remove the contents of this main section,

00:01:07.010 --> 00:01:09.895
but we'll just leave one in for reference.

00:01:09.895 --> 00:01:16.150
Let's go to the index page and then scroll down to the main section with the ID of songs.

00:01:16.150 --> 00:01:19.235
I'm going to leave in one of these articles

00:01:19.235 --> 00:01:23.210
and then remove the five extra once in from below,

00:01:23.210 --> 00:01:32.560
for five right down to the bottom of the closing main sunk, I bring this up.

00:01:32.560 --> 00:01:35.660
We're left with just one song.

00:01:35.660 --> 00:01:39.160
Give that save, and refresh the browser.

00:01:39.160 --> 00:01:42.240
The next step is to create our script file.

00:01:42.240 --> 00:01:44.460
This is going to be a JavaScript file.

00:01:44.460 --> 00:01:51.150
Right-click new file and call this the script.js.

00:01:51.150 --> 00:01:55.365
Then we need to link to this in the index.html,

00:01:55.365 --> 00:02:00.095
so scroll down to the bottom and just before the closing body tag,

00:02:00.095 --> 00:02:02.790
let's add our script,

00:02:03.620 --> 00:02:07.730
closes this off, then add the script source.

00:02:07.730 --> 00:02:09.515
This is in the same directory,

00:02:09.515 --> 00:02:13.585
so we can just reference this by script.js.

00:02:13.585 --> 00:02:17.435
If I save. Now we're ready to get going.

00:02:17.435 --> 00:02:20.495
Let's head over to the iTunes documentation

00:02:20.495 --> 00:02:23.210
and take a look at what we're going to be using.

00:02:23.210 --> 00:02:26.070
Head over to Google.

00:02:28.280 --> 00:02:38.895
Let's do a search for the iTunes, search API. Let's scroll down.

00:02:38.895 --> 00:02:42.429
What we need is the iTunes search API,

00:02:42.429 --> 00:02:47.600
which is on the Apple Developer website. Let's click on this.

00:02:48.530 --> 00:02:52.975
Let's start by selecting the search from the menu,

00:02:52.975 --> 00:02:57.050
the cyclic, and then we can click on construct a search.

00:02:57.050 --> 00:03:00.040
When we discussed APIs in the last video,

00:03:00.040 --> 00:03:05.260
we mentioned that we usually fetch the data by connecting to a URL,

00:03:05.260 --> 00:03:07.060
which is called an endpoints.

00:03:07.060 --> 00:03:12.565
Here we can also see the API endpoints provided by iTunes, which is just here.

00:03:12.565 --> 00:03:17.480
It's itunes.apple.com, forward slash search.

00:03:17.480 --> 00:03:19.310
Then after this endpoint,

00:03:19.310 --> 00:03:23.765
we can add some key value pairs to get the information we want.

00:03:23.765 --> 00:03:27.440
Notice at the end of this URL is a question mark.

00:03:27.440 --> 00:03:33.380
This is just a separator to separate the URL from the queries which you want to ask.

00:03:33.380 --> 00:03:36.275
We'll take a look at these in just a moment.

00:03:36.275 --> 00:03:40.780
This URL with the parameters on the end is called a query string.

00:03:40.780 --> 00:03:42.425
If we scroll down,

00:03:42.425 --> 00:03:46.120
we can see some key value pairs in this table here.

00:03:46.120 --> 00:03:48.980
Starting with the search term,

00:03:48.980 --> 00:03:52.595
this is probably the most important for our use.

00:03:52.595 --> 00:03:57.364
Its term which we are going to be searching for to find our songs from the database.

00:03:57.364 --> 00:04:00.950
Scrolling down, we can also search by media

00:04:00.950 --> 00:04:04.520
2 or we can narrow this down to search for on a music.

00:04:04.520 --> 00:04:08.800
Or we can even include things such as movies, all podcasts.

00:04:08.800 --> 00:04:13.550
We can also limit our search too so we don't get too many return values.

00:04:13.550 --> 00:04:17.330
If we scroll down, we can also see this limit parameter here.

00:04:17.330 --> 00:04:19.190
I'll also use limit too,

00:04:19.190 --> 00:04:23.045
so we don't get too many search results returned back to us.

00:04:23.045 --> 00:04:25.250
To see these working in action,

00:04:25.250 --> 00:04:27.710
we can simply type these into the browser.

00:04:27.710 --> 00:04:29.570
Let's go up to the top.

00:04:29.570 --> 00:04:35.405
Let's copy this URL and then add this in a new tab.

00:04:35.405 --> 00:04:36.980
Before we press enter,

00:04:36.980 --> 00:04:41.195
we need to add some key value pairs with the search to work.

00:04:41.195 --> 00:04:42.980
If you go back to the documentation,

00:04:42.980 --> 00:04:46.480
we can use any of these key value pairs which looked at before,

00:04:46.480 --> 00:04:48.665
such as a search term.

00:04:48.665 --> 00:04:50.110
After the question mark,

00:04:50.110 --> 00:04:53.065
we can add a term and then equal.

00:04:53.065 --> 00:04:55.960
Let's go for Beyoncé and I hit enter.

00:04:55.960 --> 00:04:59.835
Then I have a text file which is downloaded.

00:04:59.835 --> 00:05:03.640
We can open this up and see the contents.

00:05:04.190 --> 00:05:07.900
We can be a little bit hard to read at the moment,

00:05:07.900 --> 00:05:11.890
but we can see at the top we have 50 results returned to us,

00:05:11.890 --> 00:05:17.190
follow by an array of our results with all the information about each song.

00:05:17.190 --> 00:05:18.850
If we wanted to limit this,

00:05:18.850 --> 00:05:21.175
we can then add some extra values.

00:05:21.175 --> 00:05:27.930
Then paste in our query again the term equal Beyoncé.

00:05:27.930 --> 00:05:30.930
Then we can add more key value pairs.

00:05:30.930 --> 00:05:34.305
This query string separated by the ampersand,

00:05:34.305 --> 00:05:36.600
so add the ampersand here.

00:05:36.600 --> 00:05:38.125
Then we can use limits,

00:05:38.125 --> 00:05:43.880
which we also looked at before and set this to free results, hit "Enter".

00:05:43.880 --> 00:05:46.355
We have a new text file download in.

00:05:46.355 --> 00:05:53.150
Let's open this up. Now have a result counts of free and a lot less data.

00:05:53.150 --> 00:05:57.485
We just have free individual tracks inside of the array.

00:05:57.485 --> 00:06:02.360
To see this more clearly, let's copy all information from our text file,

00:06:02.360 --> 00:06:06.350
then I close this. Go to Google.

00:06:06.350 --> 00:06:09.840
Then let's search for code beautify.

00:06:13.420 --> 00:06:19.810
This is what we need, a codebeautifty.org. Open this up.

00:06:23.450 --> 00:06:28.190
We're going to use the JSON Viewer to see how this looks.

00:06:28.190 --> 00:06:33.230
On the left we have the JSON inputs which you can paste in our information from

00:06:33.230 --> 00:06:36.260
a text file and then we can click on

00:06:36.260 --> 00:06:40.680
beautify in the middle and see the results on the right-hand side.

00:06:40.840 --> 00:06:44.480
Click on the cross in the top corner to make this even bigger.

00:06:44.480 --> 00:06:49.600
Now, we can see more clearly the information which is returned from iTunes.

00:06:49.600 --> 00:06:52.325
We have the results counts which we've seen before.

00:06:52.325 --> 00:06:55.535
So we have a result array with free values.

00:06:55.535 --> 00:07:00.880
This first one is an object which contains all the information about the song.

00:07:00.880 --> 00:07:05.990
We have some URLs for the artwork and we'll use these in our application.

00:07:05.990 --> 00:07:08.605
To get the images for each truck,

00:07:08.605 --> 00:07:13.370
we also have the truck ID of the artist name of Beyoncé.

00:07:13.370 --> 00:07:18.340
We have a truck name and lots more information about the song.

00:07:18.340 --> 00:07:23.195
This is all JSON data which we can use in our application.

00:07:23.195 --> 00:07:26.840
We know how to get this data using the URL.

00:07:26.840 --> 00:07:31.885
We can now use Fetch to actually bring this data into our project.

00:07:31.885 --> 00:07:36.485
Let's go back over to Visual Studio Code and then into the

00:07:36.485 --> 00:07:41.975
script.js about a topic onto access the Fetch API.

00:07:41.975 --> 00:07:45.235
Then inside of here we pass in the URL,

00:07:45.235 --> 00:07:48.405
which wants access, so paste in.

00:07:48.405 --> 00:07:53.930
Whoops, in fact, we need to go back over to iTunes and then copy

00:07:53.930 --> 00:08:01.470
the API endpoints and paste this in between causations.

00:08:01.520 --> 00:08:08.120
If we give this a save and then go over to our application, reload the browser.

00:08:08.120 --> 00:08:12.005
If we refresh, we don't see anything different so far.

00:08:12.005 --> 00:08:14.450
But we can go ahead and assign this fetch to a

00:08:14.450 --> 00:08:17.930
variable and see what's happening with a console log.

00:08:17.930 --> 00:08:24.310
Set a constant called data and set this equal to a fetch.

00:08:24.310 --> 00:08:27.550
Below this we can console.log.

00:08:27.800 --> 00:08:30.905
Then that's passing the data,

00:08:30.905 --> 00:08:33.935
which is the data returned by this fetch,

00:08:33.935 --> 00:08:35.720
then over to the browser.

00:08:35.720 --> 00:08:40.310
Then if we right-click in "Inspect" and check this out in the console,

00:08:40.310 --> 00:08:43.820
so let's refresh, so we can see we have

00:08:43.820 --> 00:08:47.390
something called a promise returned as a response,

00:08:47.390 --> 00:08:49.745
which appears to be pending.

00:08:49.745 --> 00:08:51.995
Before we go into any more detail,

00:08:51.995 --> 00:08:53.870
let's try one more thing.

00:08:53.870 --> 00:08:55.940
Just after this console log,

00:08:55.940 --> 00:08:59.375
let's do a JavaScript set time out,

00:08:59.375 --> 00:09:04.280
which is going to run the same console log after two seconds.

00:09:04.280 --> 00:09:08.375
Inside here we can pass in a ES_6 [inaudible] function.

00:09:08.375 --> 00:09:11.785
Then we can copy this console log,

00:09:11.785 --> 00:09:16.565
paste this in, add a comma,

00:09:16.565 --> 00:09:20.095
and we'll run this after 2,000 milliseconds.

00:09:20.095 --> 00:09:25.865
Give us save and then let's return back to the console and then reload.

00:09:25.865 --> 00:09:27.995
If we wait two seconds,

00:09:27.995 --> 00:09:30.830
we now see there is a second promise.

00:09:30.830 --> 00:09:34.600
But this time it resolved with a response.

00:09:34.600 --> 00:09:39.275
These results which you see inside the console because of two things.

00:09:39.275 --> 00:09:41.150
First of all, when using fetch,

00:09:41.150 --> 00:09:43.675
it will return what is called a promise,

00:09:43.675 --> 00:09:45.080
and second of all,

00:09:45.080 --> 00:09:48.985
because the request is what is called asynchronous.

00:09:48.985 --> 00:09:53.960
Don't worry if you don't understand what either of these concepts mean at the moment,

00:09:53.960 --> 00:09:58.080
we're going to cover what both of these mean in the next video.
