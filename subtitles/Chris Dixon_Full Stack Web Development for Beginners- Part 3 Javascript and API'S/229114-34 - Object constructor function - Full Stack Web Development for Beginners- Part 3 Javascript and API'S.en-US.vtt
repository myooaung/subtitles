WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.540
We've already looked at a few ways to create objects.

00:00:03.540 --> 00:00:07.155
These are fine if we just want to create a single object,

00:00:07.155 --> 00:00:08.805
like we've done previously.

00:00:08.805 --> 00:00:13.470
However, if we want to create multiple objects with the same properties,

00:00:13.470 --> 00:00:16.679
there is another way using a constructor,

00:00:16.679 --> 00:00:21.434
rather than constructing a object and adding names and values,

00:00:21.434 --> 00:00:25.650
we can use the constructor function to basically create a blueprint,

00:00:25.650 --> 00:00:28.425
or a template for each object.

00:00:28.425 --> 00:00:33.565
This will allow us to then create multiple objects using the same structure.

00:00:33.565 --> 00:00:39.675
For example, if I had multiple characters that would usually contain the same properties,

00:00:39.675 --> 00:00:42.015
such as a name and a color.

00:00:42.015 --> 00:00:43.800
Let's give this a go over,

00:00:43.800 --> 00:00:47.805
and I'll start a file for object constructor function.

00:00:47.805 --> 00:00:49.695
Down in our scripts,

00:00:49.695 --> 00:00:55.010
the constructor function is created just like a normal function which we looked at.

00:00:55.010 --> 00:01:01.320
We use the function keyword and then set a name, such as character.

00:01:02.510 --> 00:01:07.550
Constructor functions usually have an uppercase first letter,

00:01:07.550 --> 00:01:09.460
just like we see here.

00:01:09.460 --> 00:01:13.100
So we can distinguish them from regular functions.

00:01:13.100 --> 00:01:15.575
We'll come back to this in just a moment.

00:01:15.575 --> 00:01:18.890
But first we can create a new object based on

00:01:18.890 --> 00:01:23.170
this constructor function by using the new keyword.

00:01:23.170 --> 00:01:28.185
Just below this, let's use the new keyword,

00:01:28.185 --> 00:01:30.945
we say, new character.

00:01:30.945 --> 00:01:36.415
This character here, must match the name of our function just above.

00:01:36.415 --> 00:01:42.515
Then inside the brackets we can add some values which we want to use in objects.

00:01:42.515 --> 00:01:45.860
So the first name, let's say Mickey,

00:01:45.860 --> 00:01:48.530
separated by a comma,

00:01:48.530 --> 00:01:52.075
a second value of Mouse, for the second name.

00:01:52.075 --> 00:01:54.855
We can then add an array of colors.

00:01:54.855 --> 00:01:57.525
Mickey Mouse, we can use red,

00:01:57.525 --> 00:02:00.670
we can also say yellow,

00:02:01.760 --> 00:02:04.920
and also black too.

00:02:04.920 --> 00:02:07.335
Make this a little bit smaller.

00:02:07.335 --> 00:02:09.965
Just after the array, we can add a comma,

00:02:09.965 --> 00:02:12.725
and then we can add a name for our image.

00:02:12.725 --> 00:02:20.015
Let's say mickey-mouse.png, and then add a semicolon at the end.

00:02:20.015 --> 00:02:22.925
Now we've created this new character.

00:02:22.925 --> 00:02:26.740
We can now assign it to a variable called mickey.

00:02:26.740 --> 00:02:30.149
Great. We've constructed a new character,

00:02:30.149 --> 00:02:33.380
we've passed in some values inside the parentheses,

00:02:33.380 --> 00:02:35.840
but how do pass them in?

00:02:35.840 --> 00:02:39.200
The answer is the same as a regular function.

00:02:39.200 --> 00:02:41.870
We can pass them in as arguments.

00:02:41.870 --> 00:02:45.770
Inside the constructor, we can say first,

00:02:45.770 --> 00:02:50.225
last, color, and image,

00:02:50.225 --> 00:02:53.620
which is in the same order as you created down here.

00:02:53.620 --> 00:02:57.170
Down here we have our values for the first name,

00:02:57.170 --> 00:02:59.615
last name, color, and image.

00:02:59.615 --> 00:03:03.025
But these are not yet linked to our names above.

00:03:03.025 --> 00:03:06.645
We can do this inside of the function body.

00:03:06.645 --> 00:03:15.000
First of all, let's say this dot first name equals first.

00:03:15.000 --> 00:03:17.905
This may look a little strange at first,

00:03:17.905 --> 00:03:21.849
but what we're doing for the first value is we're passing in a string of Mickey,

00:03:21.849 --> 00:03:24.580
which is stored in this first variable.

00:03:24.580 --> 00:03:27.845
Then will set in the first name to be Mickey.

00:03:27.845 --> 00:03:33.685
Also in JavaScript, this keyword can be a little complicated to understand.

00:03:33.685 --> 00:03:35.500
When used in this way,

00:03:35.500 --> 00:03:39.020
the keyword of this refers to these objects.

00:03:39.020 --> 00:03:46.790
We can see this by doing a console.log and login the value of this,

00:03:46.800 --> 00:03:50.600
and then go to our console.

00:03:53.330 --> 00:03:59.650
We can see that this keyword is referring to our character with the firstName of Mickey.

00:03:59.650 --> 00:04:02.545
Here we can also see our property with

00:04:02.545 --> 00:04:05.800
the name value pass, which we've have already added.

00:04:05.800 --> 00:04:09.370
However, if we go ahead and move our console.log to

00:04:09.370 --> 00:04:12.785
be outside of the current object, just like this.

00:04:12.785 --> 00:04:15.620
Now we go back over to our browser.

00:04:15.620 --> 00:04:18.825
We now see we don't get our object returned,

00:04:18.825 --> 00:04:24.280
instead, that this keyword now refers to the window objects.

00:04:24.280 --> 00:04:28.645
This window object represents the browser's window.

00:04:28.645 --> 00:04:32.770
Any global functions, objects and variables which will create,

00:04:32.770 --> 00:04:35.490
will then become parts of this window.

00:04:35.490 --> 00:04:40.380
If we go ahead and clear the console and type in window,

00:04:42.160 --> 00:04:46.125
hit ''Enter'', we now get our window returned,

00:04:46.125 --> 00:04:47.555
and if we open this up,

00:04:47.555 --> 00:04:51.005
we can also see the properties on this window objects.

00:04:51.005 --> 00:04:53.945
Inside here we can see our character function,

00:04:53.945 --> 00:04:56.110
which is just here.

00:04:56.110 --> 00:04:59.870
Also remember, we created a variable called Mickey.

00:04:59.870 --> 00:05:03.170
This will also be stalled on the global object too.

00:05:03.170 --> 00:05:05.344
If we scroll down,

00:05:05.344 --> 00:05:08.405
here's our variable of Mickey.

00:05:08.405 --> 00:05:13.395
Inside the console can have access to any of these by their name.

00:05:13.395 --> 00:05:17.060
Let's say window.mickey.

00:05:18.990 --> 00:05:24.250
Hit ''Enter'', and there's our character with the first name of Mickey.

00:05:24.250 --> 00:05:28.085
We also have access to a lot more properties of the browser,

00:05:28.085 --> 00:05:33.335
such as window.innerWidth. Hit ''Enter''.

00:05:33.335 --> 00:05:37.105
We can see in pixels the inner width of the browser.

00:05:37.105 --> 00:05:40.425
Let's now go back over to our constructor.

00:05:40.425 --> 00:05:42.910
First we can remove this console.log,

00:05:42.910 --> 00:05:46.055
and then we can add the rest of our property names.

00:05:46.055 --> 00:05:50.010
Second of all, we have this.lastName,

00:05:50.010 --> 00:05:53.140
and this is equal to last.

00:05:55.010 --> 00:05:59.685
This dark color is equal to color.

00:05:59.685 --> 00:06:06.345
Then finally we have this.image is equal to image.

00:06:06.345 --> 00:06:12.870
Now let's see what Mickey looks like inside the browser, with a console.log.

00:06:15.650 --> 00:06:20.715
That's with console.log with the value of our variable,

00:06:20.715 --> 00:06:23.835
which is Mickey, refresh.

00:06:23.835 --> 00:06:25.950
There's our character objects,

00:06:25.950 --> 00:06:27.570
with our first name of Mickey,

00:06:27.570 --> 00:06:28.965
last name of Mouse.

00:06:28.965 --> 00:06:32.054
We have a color array with free different values,

00:06:32.054 --> 00:06:34.950
and then our image at the very end,

00:06:34.950 --> 00:06:40.400
because Mickey now has all the names and values added to the object.

00:06:40.400 --> 00:06:43.970
These properties can also be accessed individually.

00:06:43.970 --> 00:06:47.300
For example, if we wanted to select the first color,

00:06:47.300 --> 00:06:49.800
we could say mickey.color,

00:06:50.770 --> 00:06:54.955
and then access the index position of 0.

00:06:54.955 --> 00:07:00.170
Refresh, and there is our first value in the array of red.

00:07:00.170 --> 00:07:04.460
Now, this blueprints or this constructor which we have here,

00:07:04.460 --> 00:07:05.935
it now sets up.

00:07:05.935 --> 00:07:10.759
We can go ahead and create multiple objects based of these templates,

00:07:10.759 --> 00:07:13.370
just like we did with Mickey.

00:07:13.370 --> 00:07:17.089
Just below Mickey here, we can create a new variable,

00:07:17.089 --> 00:07:20.045
and this time we can call it daffy.

00:07:20.045 --> 00:07:23.900
This is also a new character object.

00:07:23.900 --> 00:07:27.325
Then inside we can pass in our values,

00:07:27.325 --> 00:07:29.940
the first name of Daffy,

00:07:29.940 --> 00:07:33.090
the second name of Duck,

00:07:33.090 --> 00:07:36.150
and then our array of colors.

00:07:36.150 --> 00:07:41.890
Now let's set the colors inside here to be black, and then orange.

00:07:43.700 --> 00:07:46.575
A comma just after our array.

00:07:46.575 --> 00:07:48.695
This is going to be for our image,

00:07:48.695 --> 00:07:56.520
which is daffy-duck.png, a semicolon at the ends.

00:07:56.520 --> 00:08:01.310
Then let's do one more, so let's say variable of bugs is equal to

00:08:01.310 --> 00:08:06.585
a new character, at our values.

00:08:06.585 --> 00:08:09.669
The first one is string of Bugs,

00:08:09.800 --> 00:08:12.705
the last name of Bunny.

00:08:12.705 --> 00:08:18.600
Our array with our colors of gray, and also white.

00:08:18.600 --> 00:08:23.070
A comma again, just after the array,

00:08:23.070 --> 00:08:26.650
and the final image of bugs-bunny.png.

00:08:31.310 --> 00:08:35.445
Let's just zoom-out and check this all out.

00:08:35.445 --> 00:08:38.115
That's all looking fine.

00:08:38.115 --> 00:08:45.495
Now if we console.log any of these extra values, so console.log.

00:08:45.495 --> 00:08:48.440
Then we can do something such as bugs,

00:08:48.440 --> 00:08:51.445
which is our third object just here.

00:08:51.445 --> 00:08:54.220
Target the last name,

00:08:55.000 --> 00:08:59.505
which should output to the console the value of Bunny,

00:08:59.505 --> 00:09:02.500
save and refresh, and there we go.

00:09:02.500 --> 00:09:05.275
There's Bunny inside of the console.

00:09:05.275 --> 00:09:08.670
Good, this all looks like it's working fine,

00:09:08.670 --> 00:09:11.825
and this is the object constructor function,

00:09:11.825 --> 00:09:17.610
which is a really useful way of creating multiple objects with the same structure.
