WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.525
If we head over to the start file for this video,

00:00:03.525 --> 00:00:05.460
which is function arguments,

00:00:05.460 --> 00:00:09.060
inside here we have our p elements from the last video,

00:00:09.060 --> 00:00:10.650
with the idea of text.

00:00:10.650 --> 00:00:13.170
Then a simple named function,

00:00:13.170 --> 00:00:15.540
which is going to set the inner HTML,

00:00:15.540 --> 00:00:17.700
to be textual function.

00:00:17.700 --> 00:00:21.870
So in the last video, we've seen some basic function uses.

00:00:21.870 --> 00:00:24.720
But functions can become even more useful,

00:00:24.720 --> 00:00:27.000
if we pass in some data.

00:00:27.000 --> 00:00:30.285
We can pass in this data when calling the function,

00:00:30.285 --> 00:00:31.935
by adding some values,

00:00:31.935 --> 00:00:33.975
inside of these brackets here.

00:00:33.975 --> 00:00:38.040
These values are passed to the function are called arguments,

00:00:38.040 --> 00:00:40.545
so if we wants to pass in a name,

00:00:40.545 --> 00:00:43.330
we could do it just like this.

00:00:43.790 --> 00:00:47.400
Now the function has access to these arguments,

00:00:47.400 --> 00:00:50.070
by passing the name we want to reference it by,

00:00:50.070 --> 00:00:52.920
inside of these function parenthesis.

00:00:52.920 --> 00:00:55.560
So that's add Name inside a here,

00:00:55.560 --> 00:00:57.120
and this name here,

00:00:57.120 --> 00:00:58.770
acts like a variable.

00:00:58.770 --> 00:01:01.545
We can references inside the function,

00:01:01.545 --> 00:01:05.535
the name give this data inside is a here is called a parameter.

00:01:05.535 --> 00:01:08.325
Now we can use this name inside of our function,

00:01:08.325 --> 00:01:10.545
in any way which you choose.

00:01:10.545 --> 00:01:16.650
So for example, we can use it to set the inner HTML rather than texts from function,

00:01:16.650 --> 00:01:21.630
I should say hi, and then other variable name at the end.

00:01:21.630 --> 00:01:26.265
If we save that, we now have the value of hi Chris,

00:01:26.265 --> 00:01:29.775
and Chris been the arguments which are passed in.

00:01:29.775 --> 00:01:34.020
We can pass in multiple arguments too, for example,

00:01:34.020 --> 00:01:37.125
if the job of this function was to do a calculation,

00:01:37.125 --> 00:01:39.945
such as multiplying two numbers.

00:01:39.945 --> 00:01:43.470
Let's change this to be multiply,

00:01:43.470 --> 00:01:46.780
and also the function call.

00:01:47.660 --> 00:01:52.335
Let's say we wanted to pass in two numbers, rather than a string.

00:01:52.335 --> 00:01:55.575
Let's go for 23, and 15.

00:01:55.575 --> 00:01:59.070
We can then name our parameters inside here.

00:01:59.070 --> 00:02:03.240
Let's go for number one, and number two.

00:02:03.240 --> 00:02:06.090
Then we can update our p elements here,

00:02:06.090 --> 00:02:10.780
with the values of number 1 multiplied by number 2.

00:02:11.990 --> 00:02:16.710
So give that a save, and then out to the browser.

00:02:16.710 --> 00:02:20.475
We now get the value of 345.

00:02:20.475 --> 00:02:22.845
If we were to make a mistake,

00:02:22.845 --> 00:02:26.309
such as only passing in one of these arguments,

00:02:26.309 --> 00:02:30.360
let's say 23, reload.

00:02:30.360 --> 00:02:33.180
We get the value of not a number,

00:02:33.180 --> 00:02:37.485
because the function is still trying to multiply our two values together.

00:02:37.485 --> 00:02:40.290
However, if we only pass in one value,

00:02:40.290 --> 00:02:43.875
and we only need one value inside here,

00:02:43.875 --> 00:02:48.030
reload, we still get the value of 23.

00:02:48.030 --> 00:02:51.570
However though we don't have our second value passed in,

00:02:51.570 --> 00:02:53.130
which is number 2.

00:02:53.130 --> 00:02:54.765
So instead if whose output,

00:02:54.765 --> 00:02:56.490
the value of number 2,

00:02:56.490 --> 00:03:01.530
save this, reload, we'll get the value of undefined.

00:03:01.530 --> 00:03:04.305
So it won't cause any major problems,

00:03:04.305 --> 00:03:06.180
such as our website crushing.

00:03:06.180 --> 00:03:11.580
It just means a function can't do its job without all the data in which needs.

00:03:11.580 --> 00:03:15.165
Alternatively, we can also use the return keyword,

00:03:15.165 --> 00:03:18.225
to return the value after the calculation.

00:03:18.225 --> 00:03:21.345
This may be useful if you want to store a value,

00:03:21.345 --> 00:03:24.795
for example, in a variable, for future use.

00:03:24.795 --> 00:03:27.839
So first, let's go back over to our function,

00:03:27.839 --> 00:03:30.150
and add in our second arguments.

00:03:30.150 --> 00:03:34.260
Then instead of updating the DOM without get element ById,

00:03:34.260 --> 00:03:36.285
wouldn't comment this out.

00:03:36.285 --> 00:03:40.410
Instead we can return the calculation of number

00:03:40.410 --> 00:03:46.080
1 multiplied by number 2 semicolon at the end.

00:03:46.080 --> 00:03:49.335
Now if we give that a save and then reload the browser,

00:03:49.335 --> 00:03:52.140
we see the DOM has not been updated.

00:03:52.140 --> 00:03:55.665
Instead now this value is being returned.

00:03:55.665 --> 00:03:59.385
We can store it inside a variable for future use.

00:03:59.385 --> 00:04:01.800
We can do this down at the bottom,

00:04:01.800 --> 00:04:04.335
by art in a variable called sum,

00:04:04.335 --> 00:04:07.365
and certainly is to our function call.

00:04:07.365 --> 00:04:09.809
Then we can check this is working,

00:04:09.809 --> 00:04:12.090
by doing a console log,

00:04:12.090 --> 00:04:15.820
and login the value of some,

00:04:16.220 --> 00:04:20.125
add variable of sum inside here,

00:04:20.125 --> 00:04:26.320
open up the console and there's our return value of 345.

00:04:26.320 --> 00:04:29.280
Now have this stored inside available,

00:04:29.280 --> 00:04:31.680
and it's now up to us what we want to do,

00:04:31.680 --> 00:04:33.660
which is return value.

00:04:33.660 --> 00:04:38.560
Adding arguments is a great way to extend the capability of a function.

00:04:38.560 --> 00:04:45.600
Next up, we will look at two important JavaScript concepts called Scope and hoisting.
