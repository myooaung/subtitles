WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.380 --> 00:00:05.400
In the last video, we fetched some data using the iTunes API.

00:00:05.400 --> 00:00:09.360
We outputted the same data twice in a console.

00:00:09.360 --> 00:00:13.980
One immediately, and then a second one after two seconds.

00:00:13.980 --> 00:00:16.724
This gave us two different results,

00:00:16.724 --> 00:00:18.120
which are both Promises.

00:00:18.120 --> 00:00:21.360
We'll take a look at what these are very soon.

00:00:21.360 --> 00:00:23.970
The first one we can see had a result of

00:00:23.970 --> 00:00:28.440
pending and then the later one has a response of resolved.

00:00:28.440 --> 00:00:31.830
To understand why this is happening in the first place,

00:00:31.830 --> 00:00:33.480
and why we need promises,

00:00:33.480 --> 00:00:37.545
we first need to understand what asynchronous code is.

00:00:37.545 --> 00:00:42.270
Some programming languages, such as PHP are the opposite.

00:00:42.270 --> 00:00:46.440
PHP is classed as synchronous This means when

00:00:46.440 --> 00:00:51.265
our code is ready it is read from the top of the file to the bottom.

00:00:51.265 --> 00:00:56.780
Synchronous code such as PHP will begin on the first line.

00:00:56.780 --> 00:01:00.140
It will then run this code on the first line and then only

00:01:00.140 --> 00:01:03.860
move onto the next line when the operation has finished.

00:01:03.860 --> 00:01:06.740
Basically, the program will stop and wait for

00:01:06.740 --> 00:01:10.750
the operation to finish before moving on to the next line of code.

00:01:10.750 --> 00:01:15.815
However, a lot of JavaScript code works asynchronously.

00:01:15.815 --> 00:01:18.140
Take our fetch for example.

00:01:18.140 --> 00:01:22.930
If the request for the data takes a long time to return back to us,

00:01:22.930 --> 00:01:25.430
we'll be blocking the rest of the code from

00:01:25.430 --> 00:01:28.460
running while we wait for this data to come back.

00:01:28.460 --> 00:01:32.605
Instead, what will happen is this line of code will still run,

00:01:32.605 --> 00:01:35.075
and before waiting for the response,

00:01:35.075 --> 00:01:38.540
will then move on to the next line of the program or script,

00:01:38.540 --> 00:01:41.890
therefore not blocking the rest of the code.

00:01:41.890 --> 00:01:45.180
Now we have sent the request for this data.

00:01:45.180 --> 00:01:48.740
We're expecting a response at sometime in the future.

00:01:48.740 --> 00:01:52.505
We don't know when this data will be returned back to us,

00:01:52.505 --> 00:01:56.455
or if the data from iTunes will come back at all.

00:01:56.455 --> 00:01:59.795
For this case, we have what is called Promises,

00:01:59.795 --> 00:02:03.470
and this is what returned back to us from before.

00:02:03.470 --> 00:02:05.975
When we looked at fetch in the last video,

00:02:05.975 --> 00:02:08.785
we sent off the request for our data.

00:02:08.785 --> 00:02:14.060
We immediately run a console log and this had the result of pending,

00:02:14.060 --> 00:02:15.665
which you can see here.

00:02:15.665 --> 00:02:21.115
This is because the program ran the console log before the data was returned.

00:02:21.115 --> 00:02:23.315
After waiting two seconds,

00:02:23.315 --> 00:02:29.360
our data must have been returned because this console log was then resolved.

00:02:29.360 --> 00:02:33.085
Over to our code in Visual Studio.

00:02:33.085 --> 00:02:35.790
Let's close this sidebar down.

00:02:35.790 --> 00:02:39.590
Let's take a look at how we can handle this Promise.

00:02:39.590 --> 00:02:43.565
First, we are going to remove these console logs and clean up our code,

00:02:43.565 --> 00:02:46.195
leaving just the fetch at the top.

00:02:46.195 --> 00:02:50.760
Also we going to remove this constant here,

00:02:50.760 --> 00:02:53.085
add a semicolon at the end.

00:02:53.085 --> 00:02:56.660
A promise is just a way to declare what we want to

00:02:56.660 --> 00:03:00.245
do when the data is eventually returned.

00:03:00.245 --> 00:03:03.290
When the data has been returned successfully,

00:03:03.290 --> 00:03:06.870
we run the code inside of.then.

00:03:07.640 --> 00:03:11.405
Dot then can be chained on the end, just like this.

00:03:11.405 --> 00:03:13.385
Or to make it more readable,

00:03:13.385 --> 00:03:15.230
you often see it on its own line.

00:03:15.230 --> 00:03:19.015
Let's add enter and drop this on to the line below.

00:03:19.015 --> 00:03:23.885
Then inside of.then, we can add a function which you want to run.

00:03:23.885 --> 00:03:28.555
I'm going to add a ES6 arrow function, just like this.

00:03:28.555 --> 00:03:32.205
This works just like functions we have already seen.

00:03:32.205 --> 00:03:37.195
It takes in the response inside of these parentheses as an argument.

00:03:37.195 --> 00:03:40.005
Add response inside of here.

00:03:40.005 --> 00:03:44.025
The name is up to us, but response is fairly descriptive.

00:03:44.025 --> 00:03:46.320
I'm going to leave it as this.

00:03:46.320 --> 00:03:50.490
The response is just a HTTP response, therefore,

00:03:50.490 --> 00:03:57.690
we need to extract the Json data from the response body using the.Json method.

00:03:57.690 --> 00:04:04.110
Inside of here, say response.Json.

00:04:04.110 --> 00:04:08.680
Then we can go ahead and return this Json data.

00:04:08.680 --> 00:04:13.205
Or alternatively, when using arrow functions,

00:04:13.205 --> 00:04:16.880
if the function only has one statement like in here,

00:04:16.880 --> 00:04:21.560
we can even remove the return keyword and also the curly braces.

00:04:21.560 --> 00:04:23.795
Add this onto one line,

00:04:23.795 --> 00:04:26.560
so we're going to remove the curly braces.

00:04:26.560 --> 00:04:33.505
We're going to remove the return keyword and then pull this response onto the same line.

00:04:33.505 --> 00:04:37.865
This will do exactly the same but keep our code a little bit more cleaner.

00:04:37.865 --> 00:04:43.460
We can also chain as many.then cases onto the end as we like.

00:04:43.460 --> 00:04:45.380
Then let's add one more,

00:04:45.380 --> 00:04:48.305
which will run after the first one has finished,

00:04:48.305 --> 00:04:52.565
and then taking the Json data so we can do something with it.

00:04:52.565 --> 00:04:58.405
Add a second.then, which takes in a function.

00:04:58.405 --> 00:05:03.865
Again, this is going to be an ES6 arrow function which takes in the data.

00:05:03.865 --> 00:05:07.460
This data is passed to it from the line above,

00:05:07.460 --> 00:05:09.790
which is the extracted Json.

00:05:09.790 --> 00:05:11.940
Okay. Back down to our function,

00:05:11.940 --> 00:05:15.870
we can then console log the data from our API,

00:05:15.870 --> 00:05:20.585
Console.log and then pass in our data.

00:05:20.585 --> 00:05:23.915
One last thing before we go over to the console,

00:05:23.915 --> 00:05:26.425
we need to add a search term,

00:05:26.425 --> 00:05:28.170
so up at the top.

00:05:28.170 --> 00:05:30.860
Remember from before we need to add a search term,

00:05:30.860 --> 00:05:33.425
just like we looked at inside the browser.

00:05:33.425 --> 00:05:36.530
Let's go for Beyonce once more.

00:05:36.530 --> 00:05:40.060
You can of course change it to be anything which you prefer.

00:05:40.060 --> 00:05:43.470
Give that, "Save" and then reload the browser.

00:05:43.470 --> 00:05:47.430
Okay. Now we have our response with the 50 results.

00:05:47.430 --> 00:05:53.320
We could see returned to us we have a results array with 50 values inside of there.

00:05:53.320 --> 00:05:59.385
Let's go ahead and open this up and then open up our results.

00:05:59.385 --> 00:06:02.900
We can see the individual data from each song.

00:06:02.900 --> 00:06:05.050
Again, just like before when we open this up,

00:06:05.050 --> 00:06:07.790
we can see all the artists information and also

00:06:07.790 --> 00:06:11.320
some artwork which we'll get to using in our application soon.

00:06:11.320 --> 00:06:15.660
If we want to narrow this down and only show the results inside the console,

00:06:15.660 --> 00:06:19.305
we can say data.results.

00:06:19.305 --> 00:06:22.620
Give that "Save" and then refresh.

00:06:22.620 --> 00:06:25.500
Now we just have our 50 results.

00:06:25.500 --> 00:06:31.015
Then I'm also going to remove this query string from inside of the fetch.

00:06:31.015 --> 00:06:36.455
Cut this out and then we're going to create a constant called URL.

00:06:36.455 --> 00:06:39.845
Have in store this query string inside of here.

00:06:39.845 --> 00:06:43.370
Then all we need to do is pass in the URL as

00:06:43.370 --> 00:06:48.820
our variable and then refresh and check everything is still working okay.

00:06:48.820 --> 00:06:51.440
Okay. Great. There's our 50 results,

00:06:51.440 --> 00:06:53.315
which is the same as before.

00:06:53.315 --> 00:06:56.180
Everything is still working okay.

00:06:56.180 --> 00:07:03.230
The.then section of the promise handles what to do when a response is resolved.

00:07:03.230 --> 00:07:07.085
If we have an error and the response is rejected,

00:07:07.085 --> 00:07:12.530
we can go ahead and chain a.catch onto the end to handle this outcome.

00:07:12.530 --> 00:07:17.260
Right at the bottom we can say.catch.

00:07:17.260 --> 00:07:20.960
This is a function which is going to take in the error,

00:07:20.960 --> 00:07:23.945
and we'll create this as an ES6 arrow function,

00:07:23.945 --> 00:07:26.665
which simply does a console log.

00:07:26.665 --> 00:07:29.730
Then inside here we can say,

00:07:29.730 --> 00:07:35.645
let's go for request fails, then a comma.

00:07:35.645 --> 00:07:41.955
Then after here we can pass in our error message like this. If we give that a save.

00:07:41.955 --> 00:07:47.120
If we reload the browser, we don't see any difference because the request is working.

00:07:47.120 --> 00:07:50.215
We're not getting any errors passed back to us.

00:07:50.215 --> 00:07:53.975
However, if we create a typing mistake in the URL,

00:07:53.975 --> 00:07:59.550
so let's delete the e from there and then reload.

00:07:59.550 --> 00:08:04.625
We now see our error message has been caught with the.catch statement.

00:08:04.625 --> 00:08:08.165
This is running our texts of request fails.

00:08:08.165 --> 00:08:11.035
Then we have our error past the function.

00:08:11.035 --> 00:08:15.950
Okay. Let's go back to Visual Studio and reinstate our URL,

00:08:15.950 --> 00:08:19.570
check everything is working fine and we're good to go.

00:08:19.570 --> 00:08:25.640
Great. We now have our data which we're pulling in from iTunes and in the next video,

00:08:25.640 --> 00:08:28.759
we'll begin to use this data to create our elements,

00:08:28.759 --> 00:08:31.980
to display our songs in the browser.
