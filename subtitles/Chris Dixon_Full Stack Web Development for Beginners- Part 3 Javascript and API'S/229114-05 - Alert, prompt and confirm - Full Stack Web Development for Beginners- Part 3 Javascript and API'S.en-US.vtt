WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.260 --> 00:00:04.545
We've already looked at using the console log in this section.

00:00:04.545 --> 00:00:08.025
This is useful for printing out things and debugging.

00:00:08.025 --> 00:00:11.220
During development, It's not intended as

00:00:11.220 --> 00:00:15.000
a way to communicate with uses of our websites or apps.

00:00:15.000 --> 00:00:17.850
However, there are some ways, multiple,

00:00:17.850 --> 00:00:23.145
more precise, some more methods we can use to communicate with the user.

00:00:23.145 --> 00:00:25.920
The first of these is an alert.

00:00:25.920 --> 00:00:29.610
An alert is used to pop up an alert box to the user.

00:00:29.610 --> 00:00:32.010
Alerts are like a pop-up box with

00:00:32.010 --> 00:00:36.715
some information and an okay button to click on to close this popup.

00:00:36.715 --> 00:00:38.430
At its most basic,

00:00:38.430 --> 00:00:41.220
we can simply output something to the user.

00:00:41.220 --> 00:00:46.660
Lets go over to our scripts inside of our starter file.

00:00:46.660 --> 00:00:48.455
Let's go to number three,

00:00:48.455 --> 00:00:50.615
alerts, prompts and confirm.

00:00:50.615 --> 00:00:56.130
Now open this up and then go to copy the path and then paste

00:00:56.130 --> 00:01:02.670
is inside the browser or you can simply double-click on the index file inside the folder.

00:01:03.080 --> 00:01:06.245
Down under the alert common tier,

00:01:06.245 --> 00:01:09.980
which is going to output a alert Popup and then inside

00:01:09.980 --> 00:01:13.910
here we can do anything we want such as a calculation.

00:01:13.910 --> 00:01:22.645
Ten modulus and then three gives a save and open up this index page in the browser.

00:01:22.645 --> 00:01:28.700
Refresh. and there's our Alert box on the screen with the value of one.

00:01:28.700 --> 00:01:33.395
We can use this to add some tax also instead of a calculation.

00:01:33.395 --> 00:01:36.620
Remember the text strings have the quotations.

00:01:36.620 --> 00:01:41.490
So let's say hello, refresh.

00:01:41.490 --> 00:01:44.035
As our text just here,

00:01:44.035 --> 00:01:50.945
this alert can even contain variables too such as our name example from before.

00:01:50.945 --> 00:01:58.480
We had a variable of name equals Chris.

00:01:58.480 --> 00:02:02.240
We could go ahead and add this to the end of our string.

00:02:02.240 --> 00:02:06.575
Hello plus our variable name.

00:02:06.575 --> 00:02:12.625
Save that and there we'll go says hello Chris, inside the alert.

00:02:12.625 --> 00:02:16.955
If we go ahead and add even more text to our alert,

00:02:16.955 --> 00:02:20.165
let's add some more text just after this.

00:02:20.165 --> 00:02:25.110
Let's say please login to continue,

00:02:25.750 --> 00:02:29.884
save that and reload. By default.

00:02:29.884 --> 00:02:33.010
All this stays on the one single line.

00:02:33.010 --> 00:02:37.310
We can break this onto a new line using a backslash and

00:02:37.310 --> 00:02:41.600
then an N. Inside of our string here,

00:02:41.600 --> 00:02:48.440
let's add the backslash and the N. This backslash followed by an N,

00:02:48.440 --> 00:02:50.660
may look a little unusual,

00:02:50.660 --> 00:02:54.080
but we'll cover what this is and also some similar

00:02:54.080 --> 00:02:57.820
ones later when we look at regular expressions.

00:02:57.820 --> 00:03:00.315
For now let's give that save,

00:03:00.315 --> 00:03:04.130
reload and now is a line break just after this

00:03:04.130 --> 00:03:08.225
N. The next one I want to show you is prompt.

00:03:08.225 --> 00:03:12.310
This will pop up on prompt the user for some input.

00:03:12.310 --> 00:03:16.280
Let's go on, comment these two out with

00:03:16.280 --> 00:03:22.015
forward slashes and then go down to this prom section.

00:03:22.015 --> 00:03:25.440
Let's begin with a simple prompts which is

00:03:25.440 --> 00:03:29.130
the name of prompts and then the brackets just after.

00:03:29.130 --> 00:03:33.480
Inside here we can add a text string so hello,

00:03:33.480 --> 00:03:35.850
what is your name?

00:03:35.850 --> 00:03:44.190
With a question mark, index page and this is how a prompt looks by default.

00:03:44.190 --> 00:03:47.720
We get a text, which we did just here and then we get

00:03:47.720 --> 00:03:51.505
an input section where the user can type in some information.

00:03:51.505 --> 00:03:54.910
This can even be canceled or click on okay.

00:03:54.910 --> 00:03:58.800
If we enter our name such as Chris inside here,

00:03:58.800 --> 00:04:00.690
and then press 'okay',

00:04:00.690 --> 00:04:03.105
nothing appears to happen.

00:04:03.105 --> 00:04:07.125
This is because we need a way to store the user's input.

00:04:07.125 --> 00:04:10.640
We already know we can do this by using a variable.

00:04:10.640 --> 00:04:14.715
Let's set this prompts to equal to a variable.

00:04:14.715 --> 00:04:22.060
Let's say var name equals prompts and then to see this in action,

00:04:22.060 --> 00:04:25.610
we can do a console log

00:04:26.900 --> 00:04:32.920
and then log the value of our name just to recap,

00:04:32.920 --> 00:04:35.965
we're prompting the user to input their name,

00:04:35.965 --> 00:04:40.180
will install all these inputs inside of a variable called name,

00:04:40.180 --> 00:04:43.445
and then displaying this inside the console.

00:04:43.445 --> 00:04:47.635
Let's save that and try this out.

00:04:47.635 --> 00:04:54.870
Say Chris, okay, right-click and inspect.

00:04:55.000 --> 00:04:59.845
Open up the console and there's our value of Chris.

00:04:59.845 --> 00:05:02.595
Let's try one more.

00:05:02.595 --> 00:05:09.845
Just type in anything inside here and there's the value stored inside this name variable.

00:05:09.845 --> 00:05:13.310
This prompt if returns the value entered by the user,

00:05:13.310 --> 00:05:16.810
like we just seen or we can select console.

00:05:16.810 --> 00:05:18.915
We click console button here,

00:05:18.915 --> 00:05:22.160
we then get the value of null returned.

00:05:22.160 --> 00:05:25.970
You will often come across both null and undefined.

00:05:25.970 --> 00:05:29.320
They both generally mean something is missing.

00:05:29.320 --> 00:05:33.620
Both null and undefined also considered data types too,

00:05:33.620 --> 00:05:36.920
just like number and string which you've already seen.

00:05:36.920 --> 00:05:41.785
Let's go over to our text editor and create an alert.

00:05:41.785 --> 00:05:47.734
Let's welcome the new user with the textile welcome space

00:05:47.734 --> 00:05:54.775
as our variable name and then add a string at the very end with an exclamation mark.

00:05:54.775 --> 00:05:58.425
If we save that, reload,

00:05:58.425 --> 00:06:00.360
we can add our name,

00:06:00.360 --> 00:06:03.890
hit "Okay" and there's our text string of welcome,

00:06:03.890 --> 00:06:06.970
Chris, with the exclamation at the end.

00:06:06.970 --> 00:06:10.835
If we reload the browser and instead hit "Cancel",

00:06:10.835 --> 00:06:13.465
we'll get the word welcome null.

00:06:13.465 --> 00:06:16.695
Null refers to a blank object reference.

00:06:16.695 --> 00:06:19.370
It may not make too much sense at the moment

00:06:19.370 --> 00:06:22.310
because we've not looked to what objects are yet.

00:06:22.310 --> 00:06:25.450
But it generally means something is missing.

00:06:25.450 --> 00:06:28.995
Basically, prompt returns even nothing.

00:06:28.995 --> 00:06:31.645
All the value which is typed in,

00:06:31.645 --> 00:06:34.565
undefined is a little bit more generic.

00:06:34.565 --> 00:06:38.635
An example of undefined is when a variable is empty.

00:06:38.635 --> 00:06:41.510
If we go ahead and create a new variable,

00:06:41.510 --> 00:06:46.310
let's say new name and then we don't set a value to this.

00:06:46.310 --> 00:06:55.370
If we alert the value of new name and then save that,

00:06:55.370 --> 00:06:58.310
refresh, says our initial alerts,

00:06:58.310 --> 00:07:02.535
let's cancel list and then we get our second alert which say is

00:07:02.535 --> 00:07:07.415
undefined and this is the value of our undefined variable here.

00:07:07.415 --> 00:07:11.315
Next we want to take a look at some fairly similar to prompt.

00:07:11.315 --> 00:07:14.090
Let's comment out these three lines here.

00:07:14.090 --> 00:07:16.850
If using Visual Studio Code command and

00:07:16.850 --> 00:07:20.380
forward slash will comment out all lines together.

00:07:20.380 --> 00:07:23.790
Now let's go down to confirm.

00:07:23.790 --> 00:07:28.520
Just under here, we can take a look at how a confirm is used.

00:07:28.520 --> 00:07:30.215
Just like the first two,

00:07:30.215 --> 00:07:34.435
we type in the name and then the brackets just afterwards.

00:07:34.435 --> 00:07:37.785
Lets begin by adding in a text string.

00:07:37.785 --> 00:07:45.090
You must be over 16 enter, let's say,

00:07:45.090 --> 00:07:54.645
please confirm and then obviously browser close it down from before, reload.

00:07:54.645 --> 00:07:56.760
That's the text that we see here.

00:07:56.760 --> 00:08:00.000
We also have a cancel and an okay button.

00:08:00.000 --> 00:08:03.990
Let's click on the cancel and also okay.

00:08:03.990 --> 00:08:07.565
Nothing appears to happen when we click on these buttons.

00:08:07.565 --> 00:08:10.535
Since confirm has no input field,

00:08:10.535 --> 00:08:12.095
it will return true.

00:08:12.095 --> 00:08:13.940
If the user clicks okay,

00:08:13.940 --> 00:08:17.290
all falls is the cancel button is selected.

00:08:17.290 --> 00:08:21.550
We can again see this by setting this to a variable.

00:08:21.550 --> 00:08:27.255
Let's say var age equals confirm.

00:08:27.255 --> 00:08:30.370
Then a console log,

00:08:30.370 --> 00:08:37.175
which passes in our age variable. Then this check this out.

00:08:37.175 --> 00:08:46.415
Open up the cancel Click on the console. Let's reload.

00:08:46.415 --> 00:08:47.990
If we click on okay,

00:08:47.990 --> 00:08:52.040
we'll get the value of true then if we click on cancel,

00:08:52.040 --> 00:08:54.295
we get the value of false.

00:08:54.295 --> 00:08:56.960
This true or false value is also

00:08:56.960 --> 00:09:01.975
another important JavaScript dates type which is called Boolean.

00:09:01.975 --> 00:09:05.610
Boolean to simply a true or false value.

00:09:05.610 --> 00:09:08.180
Once we get these true or false values,

00:09:08.180 --> 00:09:10.445
we need a way to do something with them.

00:09:10.445 --> 00:09:13.639
For example, if the users over 16,

00:09:13.639 --> 00:09:17.525
we can let them view the page or if the user is logged in,

00:09:17.525 --> 00:09:22.670
we can let them see the admin section to help decide what to do in these cases,

00:09:22.670 --> 00:09:24.575
we have conditional statements,

00:09:24.575 --> 00:09:28.110
and this is what we'll begin to look at next.
