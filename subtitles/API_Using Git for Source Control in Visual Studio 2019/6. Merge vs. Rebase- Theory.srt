1
00:00:01,609 --> 00:00:04,569
You can update a feature branch with the latest changes

2
00:00:04,569 --> 00:00:08,559
from master by using a merge or a rebase.

3
00:00:08,559 --> 00:00:11,629
If you are familiar with the differences between a merge and a rebase,

4
00:00:11,629 --> 00:00:13,619
you can skip this clip.

5
00:00:13,619 --> 00:00:16,589
But if you can't remember exactly what a rebase is,

6
00:00:16,589 --> 00:00:20,579
or if you have never used a rebase, this clip is for you.

7
00:00:20,579 --> 00:00:22,539
Let's go.

8
00:00:22,539 --> 00:00:23,599
At the beginning of this module,

9
00:00:23,599 --> 00:00:27,591
the master branch pointed to the commit from user Thomas in

10
00:00:27,591 --> 00:00:30,549
which he merged Julia's help message.

11
00:00:30,549 --> 00:00:34,589
Then we continued with the user Thomas and we created a feature branch.

12
00:00:34,589 --> 00:00:39,579
On that feature branch, we created a commit to handle the coffee shop commands.

13
00:00:39,579 --> 00:00:42,539
Then we continued with the user Julia.

14
00:00:42,539 --> 00:00:47,559
Julia created another feature branch and she created the commit to add

15
00:00:47,559 --> 00:00:49,619
the PaperCupsInStock property to the coffee shops.

16
00:00:49,619 --> 00:00:52,539
As Julia was done with that feature,

17
00:00:52,539 --> 00:00:55,559
she merged her feature branch into the master branch,

18
00:00:55,559 --> 00:00:59,599
which means that the master branch points now to that merge commit.

19
00:00:59,599 --> 00:01:04,549
As the commits of the paperCupsInStock feature are part of the master branch,

20
00:01:04,549 --> 00:01:06,599
she deleted her feature branch.

21
00:01:06,599 --> 00:01:09,569
After that, we continued with the user Thomas,

22
00:01:09,569 --> 00:01:13,057
and we crated another commit on his feature branch where

23
00:01:13,057 --> 00:01:15,549
we introduced the command handlers.

24
00:01:15,549 --> 00:01:17,599
Now Thomas is done with his feature too,

25
00:01:17,599 --> 00:01:21,579
and he thinks it's ready for being merged back to master.

26
00:01:21,579 --> 00:01:26,549
Let's assume now that Thomas asked Julia to review his feature branch.

27
00:01:26,549 --> 00:01:27,069
Of course,

28
00:01:27,069 --> 00:01:30,599
Julia would expect that her changes from the master branch are

29
00:01:30,599 --> 00:01:34,335
also in that feature branch because Thomas said his branch is

30
00:01:34,335 --> 00:01:37,559
ready for being merged back to master.

31
00:01:37,559 --> 00:01:39,898
That's why you should update the feature branch so

32
00:01:39,898 --> 00:01:44,619
that Julia can test your feature, including the latest changes from master.

33
00:01:44,619 --> 00:01:47,916
Another reason for updating your feature branch with the

34
00:01:47,916 --> 00:01:51,210
latest changes from master is that you can solve all the

35
00:01:51,210 --> 00:01:53,559
conflicts in your feature branch.

36
00:01:53,559 --> 00:01:56,539
When the feature branch will be merged back to master,

37
00:01:56,539 --> 00:01:59,916
the merge won't have any conflicts as the feature branch

38
00:01:59,916 --> 00:02:02,619
includes already the latest changes from master.

39
00:02:02,619 --> 00:02:04,619
If you send out a pull request,

40
00:02:04,619 --> 00:02:08,529
you'll definitely want to ensure that your feature branch is up to

41
00:02:08,529 --> 00:02:11,629
date so that it can be merged smoothly to master.

42
00:02:11,629 --> 00:02:13,589
To update a feature branch,

43
00:02:13,589 --> 00:02:16,609
you can merge the master branch into the feature branch,

44
00:02:16,609 --> 00:02:20,609
or you can rebase the feature branch onto the master branch.

45
00:02:20,609 --> 00:02:23,549
Let's look first at the merge.

46
00:02:23,549 --> 00:02:26,589
With the merge, you merge the master branch into the feature branch,

47
00:02:26,589 --> 00:02:30,569
and the feature branch will point to that merge commit.

48
00:02:30,569 --> 00:02:33,596
This means you have to create an additional commit in the feature

49
00:02:33,596 --> 00:02:37,539
branch to bring in the changes from the master branch.

50
00:02:37,539 --> 00:02:39,579
Now let's go even one step further.

51
00:02:39,579 --> 00:02:42,584
Let me show you what the structure looks like when you

52
00:02:42,584 --> 00:02:45,539
merge your feature branch into master.

53
00:02:45,539 --> 00:02:48,539
Then the master branch points to that merge commit.

54
00:02:48,539 --> 00:02:52,459
Then you can see the history is now a bit hard to read because we have

55
00:02:52,459 --> 00:02:55,599
that additional merge commit in the feature branch.

56
00:02:55,599 --> 00:02:58,609
If you want to have a cleaner, more linear history,

57
00:02:58,609 --> 00:03:02,395
you should do a rebase instead of a merge to update your feature

58
00:03:02,395 --> 00:03:05,619
branch with the latest changes from the master branch.

59
00:03:05,619 --> 00:03:07,559
So let's go back.

60
00:03:07,559 --> 00:03:09,629
Let's reset master to its previous state,

61
00:03:09,629 --> 00:03:12,724
and let's reset the feature branch to its previous

62
00:03:12,724 --> 00:03:14,599
state before that merge commit.

63
00:03:14,599 --> 00:03:15,469
In a rebase,

64
00:03:15,469 --> 00:03:18,443
you replay the commits from the feature branch onto

65
00:03:18,443 --> 00:03:20,619
the branch on which you rebase.

66
00:03:20,619 --> 00:03:25,569
In this case, we rebase the feature branch onto the master branch.

67
00:03:25,569 --> 00:03:29,539
When you start rebasing the feature branch onto the master branch,

68
00:03:29,539 --> 00:03:34,539
the feature branch is first set to the latest commit of the master branch.

69
00:03:34,539 --> 00:03:34,836
Next,

70
00:03:34,836 --> 00:03:38,619
the handle coffee shop commands commit is replayed on top of it

71
00:03:38,619 --> 00:03:42,549
and the feature branch points to that commit.

72
00:03:42,549 --> 00:03:43,745
If you have conflicts,

73
00:03:43,745 --> 00:03:47,619
you have to solve them now and then you have to continue with the rebase.

74
00:03:47,619 --> 00:03:49,482
If you don't have conflicts,

75
00:03:49,482 --> 00:03:53,569
the rebase continues automatically with the next commit.

76
00:03:53,569 --> 00:03:54,418
So next,

77
00:03:54,418 --> 00:03:57,574
the introduce command handlers commit is replayed and the

78
00:03:57,574 --> 00:04:00,569
feature branch points now to that commit.

79
00:04:00,569 --> 00:04:03,822
Note that the two commits that were replayed as part of

80
00:04:03,822 --> 00:04:06,629
the rebase will have new commit IDs.

81
00:04:06,629 --> 00:04:09,937
Now the rebase is done, and as you can see,

82
00:04:09,937 --> 00:04:13,629
the two orange commits from Julia are now part of the feature branch.

83
00:04:13,629 --> 00:04:17,569
The history has a nice linear structure and no merge

84
00:04:17,569 --> 00:04:20,344
commit was necessary to update the feature branch with the

85
00:04:20,344 --> 00:04:22,539
commits from the master branch.

86
00:04:22,539 --> 00:04:26,569
Now to bring back the commits from the feature branch to the master branch,

87
00:04:26,569 --> 00:04:30,229
you could do a fast forward merge that just points the master

88
00:04:30,229 --> 00:04:33,539
branch to the latest commit of the feature branch.

89
00:04:33,539 --> 00:04:36,549
This is nice, but when you delete the feature branch,

90
00:04:36,549 --> 00:04:39,629
it looks like you made the two commits directly on master.

91
00:04:39,629 --> 00:04:41,589
So let's go back.

92
00:04:41,589 --> 00:04:43,599
Instead of a fast forward merge,

93
00:04:43,599 --> 00:04:47,566
you can also create an explicit merge commit to merge the

94
00:04:47,566 --> 00:04:49,579
feature branch into the master branch.

95
00:04:49,579 --> 00:04:53,549
And then the master branch points to that merge commit.

96
00:04:53,549 --> 00:04:57,175
Now you can delete the feature branch and the merge commit on the master

97
00:04:57,175 --> 00:05:00,599
branch makes it clear that you create it with two commits to implement the

98
00:05:00,599 --> 00:05:03,589
coffee shop commands on a separate branch.

99
00:05:03,589 --> 00:05:06,569
I like this approach with an explicit merge commit,

100
00:05:06,569 --> 00:05:09,273
and this is actually what happens by default in Azure

101
00:05:09,273 --> 00:05:12,912
DevOps when you merge the feature branch into the master

102
00:05:12,912 --> 00:05:15,539
branch by completing a pull request.

103
00:05:15,539 --> 00:05:19,599
You will see this in the next module, but here, let's go back one step.

104
00:05:19,599 --> 00:05:20,407
In the next clip,

105
00:05:20,407 --> 00:05:24,122
you will learn how to use Visual Studio to update a feature

106
00:05:24,122 --> 00:05:33,000
branch with a merge and with a rebase. The rebase will lead to the structure that you see on this slide.

