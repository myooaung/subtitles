WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.810 --> 00:00:05.850
We're now going to cover a technique to reduce

00:00:05.850 --> 00:00:08.715
an array down to one single value.

00:00:08.715 --> 00:00:11.520
I'm going to do this using the reduced method.

00:00:11.520 --> 00:00:14.220
The reduced method, like previous ones we've looked at,

00:00:14.220 --> 00:00:15.900
will take in a function and

00:00:15.900 --> 00:00:18.385
run this function for each array value.

00:00:18.385 --> 00:00:20.075
It's more simple.

00:00:20.075 --> 00:00:22.360
We could add together an array of numbers,

00:00:22.360 --> 00:00:24.030
and then return back the total of

00:00:24.030 --> 00:00:26.025
them all added together.

00:00:26.025 --> 00:00:27.690
Of course, we can go much more

00:00:27.690 --> 00:00:29.310
complex if we need to as well.

00:00:29.310 --> 00:00:30.870
Let's take a look at some examples

00:00:30.870 --> 00:00:32.890
over in these data files.

00:00:32.890 --> 00:00:35.810
Head into this one which is the reducers.

00:00:35.810 --> 00:00:38.940
You can see, inside of a script we have a simple

00:00:38.940 --> 00:00:42.205
numbers array containing five different values.

00:00:42.205 --> 00:00:44.540
If all we want to do is to add together all

00:00:44.540 --> 00:00:46.670
of these values and return the total,

00:00:46.670 --> 00:00:49.210
the reduced method is perfect for this.

00:00:49.210 --> 00:00:51.690
As with other methods, just below we can call

00:00:51.690 --> 00:00:54.285
the reduced method onto the array's name.

00:00:54.285 --> 00:00:56.205
Which in our case is numbers.

00:00:56.205 --> 00:00:59.910
Call reduce, add the brackets,

00:00:59.910 --> 00:01:01.790
and then we're going to run a function for

00:01:01.790 --> 00:01:04.790
each value inside of this array.

00:01:04.790 --> 00:01:07.640
This function could be passed directly into

00:01:07.640 --> 00:01:10.274
the brackets just like we've done previously,

00:01:10.274 --> 00:01:12.190
or just as with all of the methods,

00:01:12.190 --> 00:01:14.900
we could also keep these separate if we wanted to.

00:01:14.900 --> 00:01:17.030
This also has the added benefit of,

00:01:17.030 --> 00:01:18.350
it's more reusable,

00:01:18.350 --> 00:01:20.365
if we want to use it elsewhere too.

00:01:20.365 --> 00:01:22.040
Either way is completely fine.

00:01:22.040 --> 00:01:23.150
But for this example,

00:01:23.150 --> 00:01:25.340
we want to show you the alternative approach,

00:01:25.340 --> 00:01:28.150
which is to create the function separately.

00:01:28.150 --> 00:01:31.260
Create our function just below this.

00:01:31.260 --> 00:01:33.170
Since this will add together all of

00:01:33.170 --> 00:01:35.120
the numbers and return back the total,

00:01:35.120 --> 00:01:37.190
we'll give this a name of total,

00:01:37.190 --> 00:01:40.600
add the parentheses, and then the curly braces.

00:01:40.600 --> 00:01:43.235
For this, this is going to take in

00:01:43.235 --> 00:01:46.565
two parameters inside of the function's brackets.

00:01:46.565 --> 00:01:50.330
This is going to be the total separated by comma.

00:01:50.330 --> 00:01:53.110
The next one will be the current value.

00:01:53.110 --> 00:01:56.885
Then inside of the brackets or inside the braces,

00:01:56.885 --> 00:02:00.230
we're going to return the total,

00:02:00.230 --> 00:02:03.355
added to the current value.

00:02:03.355 --> 00:02:05.380
I'll explain what this all does in

00:02:05.380 --> 00:02:06.910
more detail in just a moment.

00:02:06.910 --> 00:02:08.560
But for now, since this function

00:02:08.560 --> 00:02:10.510
is separate from the reduced method,

00:02:10.510 --> 00:02:13.685
we also need to call this inside of the brackets.

00:02:13.685 --> 00:02:15.400
Again, just to clarify,

00:02:15.400 --> 00:02:16.780
this is exactly the same.

00:02:16.780 --> 00:02:19.975
Let's place this directly inside of here.

00:02:19.975 --> 00:02:21.955
Back to this function,

00:02:21.955 --> 00:02:25.570
and this is called once for each one of the array values.

00:02:25.570 --> 00:02:28.325
For this example, it will run five times.

00:02:28.325 --> 00:02:31.780
This is where these two parameters will come into play.

00:02:31.780 --> 00:02:34.135
For each loop, the current number

00:02:34.135 --> 00:02:36.655
over on the right is pretty self-explanatory.

00:02:36.655 --> 00:02:40.925
This is the current array value such as 72 and 33.

00:02:40.925 --> 00:02:44.085
But first, we have a total row over on the left.

00:02:44.085 --> 00:02:46.850
This is the total from the previous loop,

00:02:46.850 --> 00:02:48.665
often called the accumulator,

00:02:48.665 --> 00:02:51.565
since it accumulates the previous results.

00:02:51.565 --> 00:02:54.770
Just to clarify what's going on here, we'll take a look.

00:02:54.770 --> 00:02:57.040
We'll add a quick comment inside here.

00:02:57.040 --> 00:02:59.070
The first time this function will run,

00:02:59.070 --> 00:03:02.180
this will be the loop number 1, and the total,

00:03:02.180 --> 00:03:03.590
which is this one here,

00:03:03.590 --> 00:03:05.270
will be equal to zero,

00:03:05.270 --> 00:03:08.485
since we've not added together any values just yet.

00:03:08.485 --> 00:03:11.165
The second value of current value,

00:03:11.165 --> 00:03:13.250
this will be 72, since this is

00:03:13.250 --> 00:03:16.810
the very first value inside of the array.

00:03:16.810 --> 00:03:20.955
Then move on to loop number 2.

00:03:20.955 --> 00:03:23.210
First of all, again, we have the total,

00:03:23.210 --> 00:03:25.810
which is these two values added together.

00:03:25.810 --> 00:03:29.930
These two values added together will be equal to 72.

00:03:29.930 --> 00:03:34.260
Then the current value for this one is number 33.

00:03:34.330 --> 00:03:38.065
Again, exactly the same for loop 3.

00:03:38.065 --> 00:03:41.255
This time we'll add these two values together,

00:03:41.255 --> 00:03:44.225
which will give us the result of a 105.

00:03:44.225 --> 00:03:48.445
Then the current value this time is a 108.

00:03:48.445 --> 00:03:51.200
You can see a pattern here for each loop we're

00:03:51.200 --> 00:03:53.765
going to add together both of the values.

00:03:53.765 --> 00:03:56.600
This time on loop number 4.

00:03:56.600 --> 00:03:58.310
These two added together,

00:03:58.310 --> 00:04:02.125
for loop number 4, will be 213.

00:04:02.125 --> 00:04:06.850
The current value for loop number 4 is 222.

00:04:06.850 --> 00:04:10.140
Then finally, loop number 5.

00:04:10.140 --> 00:04:12.350
These two values added together for loop

00:04:12.350 --> 00:04:15.860
5 is going to equal 435,

00:04:15.860 --> 00:04:18.985
with the current value being number 6.

00:04:18.985 --> 00:04:21.230
Of course, so don't take my word for this.

00:04:21.230 --> 00:04:23.030
We're going to log into the console,

00:04:23.030 --> 00:04:25.160
and check what the values are.

00:04:25.160 --> 00:04:26.750
Remember, we are returning

00:04:26.750 --> 00:04:29.080
this final value back from the function.

00:04:29.080 --> 00:04:32.045
We can store this inside of a variable.

00:04:32.045 --> 00:04:36.110
Say const result is equal to this return value,

00:04:36.110 --> 00:04:38.500
and then a console log.

00:04:38.500 --> 00:04:41.200
Just so you know too, that Visual Studio Code

00:04:41.200 --> 00:04:42.575
will run a console log,

00:04:42.575 --> 00:04:43.820
or a shortcut to this,

00:04:43.820 --> 00:04:47.135
if we just type the word log and then hit "Enter",

00:04:47.135 --> 00:04:48.950
pass in the result.

00:04:48.950 --> 00:04:52.195
We can check this out over inside the browser.

00:04:52.195 --> 00:04:55.785
Inspect, into the Console,

00:04:55.785 --> 00:04:58.370
and we see the value of 441,

00:04:58.370 --> 00:05:01.810
which is the final two values added together.

00:05:01.810 --> 00:05:05.065
This is added to get the all five of these numbers,

00:05:05.065 --> 00:05:08.650
and then return the final value inside of this function.

00:05:08.650 --> 00:05:10.640
We can also do anything else we want to with

00:05:10.640 --> 00:05:13.855
these two values, such as subtracting.

00:05:13.855 --> 00:05:16.305
Let's change this to be a negative.

00:05:16.305 --> 00:05:18.920
Give this a test, and we get the return value of

00:05:18.920 --> 00:05:21.460
negative 297.

00:05:21.460 --> 00:05:22.860
This will do exactly the same,

00:05:22.860 --> 00:05:24.290
we'll run through five times,

00:05:24.290 --> 00:05:25.550
but this time we'll

00:05:25.550 --> 00:05:27.230
deduct the current value from the total,

00:05:27.230 --> 00:05:29.885
which is why we get this negative value.

00:05:29.885 --> 00:05:32.320
I'll just reinstate this to be plus.

00:05:32.320 --> 00:05:34.810
This adds up our array values from

00:05:34.810 --> 00:05:37.630
left to right as we've just seen with this example.

00:05:37.630 --> 00:05:40.270
We also do have a similar method which will work

00:05:40.270 --> 00:05:42.730
from right to left. This is very simple.

00:05:42.730 --> 00:05:46.755
All we need to do is to change reduce to be reduceRight.

00:05:46.755 --> 00:05:48.660
Give this a save and refresh,

00:05:48.660 --> 00:05:51.330
and we get the same value of 441,

00:05:51.330 --> 00:05:53.260
because we're adding together the same numbers,

00:05:53.260 --> 00:05:56.180
but this time it's just in a different order.

00:05:56.180 --> 00:05:58.950
To double-check, this is going from right to left.

00:05:58.950 --> 00:06:00.430
We're completely sure even though we've

00:06:00.430 --> 00:06:02.020
got the same value just here.

00:06:02.020 --> 00:06:05.315
We can also add in an optional index number.

00:06:05.315 --> 00:06:09.435
Add this in as the third parameter to our reducer.

00:06:09.435 --> 00:06:11.200
Then just before we return this,

00:06:11.200 --> 00:06:13.070
we can do a console log.

00:06:13.070 --> 00:06:15.555
Log the value of the index.

00:06:15.555 --> 00:06:17.540
We should see the index number going from the

00:06:17.540 --> 00:06:19.670
highest to the lowest number.

00:06:19.670 --> 00:06:22.415
This is the last number which is index number 3,

00:06:22.415 --> 00:06:24.925
all the way down to zero.

00:06:24.925 --> 00:06:27.450
Both of these functions, the reduceRight,

00:06:27.450 --> 00:06:31.305
and also the reduce are useful for lots of reasons.

00:06:31.305 --> 00:06:33.500
We may want to keep track of a user score

00:06:33.500 --> 00:06:34.600
or points this way,

00:06:34.600 --> 00:06:37.945
and then total all of these values together at the end.

00:06:37.945 --> 00:06:40.835
This information can then be used in other ways too,

00:06:40.835 --> 00:06:43.345
maybe to find the average score.

00:06:43.345 --> 00:06:45.005
To do this to find out the

00:06:45.005 --> 00:06:47.135
average number inside of this array.

00:06:47.135 --> 00:06:50.390
Just below our reduceRight method here,

00:06:50.390 --> 00:06:51.860
I'll create a new constant.

00:06:51.860 --> 00:06:54.115
Just all this in call the average,

00:06:54.115 --> 00:06:57.540
and set this equal to a calculation.

00:06:57.540 --> 00:06:59.510
The calculation which we want to do

00:06:59.510 --> 00:07:01.400
is to grab the full results,

00:07:01.400 --> 00:07:04.945
which is the value of all of these added together.

00:07:04.945 --> 00:07:08.150
This is step 1, and then we need to divide this

00:07:08.150 --> 00:07:11.375
by the number of items inside of the array.

00:07:11.375 --> 00:07:13.430
Again, we can do this pretty simple.

00:07:13.430 --> 00:07:16.010
We need to access our full numbers array,

00:07:16.010 --> 00:07:17.315
and then the property,

00:07:17.315 --> 00:07:20.075
which is length, which we've looked at in the past.

00:07:20.075 --> 00:07:23.340
We can then console log the average,

00:07:23.360 --> 00:07:26.295
head over to the browser and refresh.

00:07:26.295 --> 00:07:30.060
We can now see the average is 88.2.
