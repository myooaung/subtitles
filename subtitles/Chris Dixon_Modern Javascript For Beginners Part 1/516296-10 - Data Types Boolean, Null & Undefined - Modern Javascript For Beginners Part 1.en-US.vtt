WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.610 --> 00:00:04.230
In the previous video, we covered

00:00:04.230 --> 00:00:06.630
somewhat primitive JavaScript dates types which

00:00:06.630 --> 00:00:09.420
include the number and also the string.

00:00:09.420 --> 00:00:11.910
We're now going to look at some more primitive data types

00:00:11.910 --> 00:00:13.724
available in JavaScript.

00:00:13.724 --> 00:00:15.990
This is going to be a Boolean in

00:00:15.990 --> 00:00:18.435
null value and also undefined.

00:00:18.435 --> 00:00:20.505
Make sure you head into the current

00:00:20.505 --> 00:00:22.860
lessons folder which is number 7,

00:00:22.860 --> 00:00:26.100
and the data types Boolean, null and undefined.

00:00:26.100 --> 00:00:27.870
I already have this open and also

00:00:27.870 --> 00:00:30.135
open in the browser too.

00:00:30.135 --> 00:00:32.460
When playing around with codes like this,

00:00:32.460 --> 00:00:33.870
we have something available for

00:00:33.870 --> 00:00:36.575
testing called the console log.

00:00:36.575 --> 00:00:40.505
In between the script tags all you need to do is type in

00:00:40.505 --> 00:00:45.710
console.log and then open the brackets, just like this.

00:00:45.710 --> 00:00:47.540
We briefly worked in the console

00:00:47.540 --> 00:00:49.580
earlier and this log will allow us

00:00:49.580 --> 00:00:51.320
to output a certain value to

00:00:51.320 --> 00:00:53.630
the console inside the browser.

00:00:53.630 --> 00:00:58.095
For example, we can say is 10 greater than five

00:00:58.095 --> 00:00:59.870
and if we save this and

00:00:59.870 --> 00:01:01.510
then right-click and inspect

00:01:01.510 --> 00:01:03.875
to open up the Developer Tools,

00:01:03.875 --> 00:01:08.000
click on the Console tab, refresh.

00:01:08.000 --> 00:01:10.685
This returns the value of true.

00:01:10.685 --> 00:01:12.650
The console log will output

00:01:12.650 --> 00:01:14.630
any value inside this console image,

00:01:14.630 --> 00:01:16.280
great testing and quickly

00:01:16.280 --> 00:01:18.425
finding out the result or the value.

00:01:18.425 --> 00:01:20.870
We also have a new operator which is

00:01:20.870 --> 00:01:23.490
the less than, save this.

00:01:23.490 --> 00:01:26.000
This would be the opposite, which is false.

00:01:26.000 --> 00:01:27.815
These true and false values

00:01:27.815 --> 00:01:30.125
are the dates type of Boolean.

00:01:30.125 --> 00:01:31.670
With Boolean a true and a

00:01:31.670 --> 00:01:33.560
false is the only two outcomes,

00:01:33.560 --> 00:01:36.535
so it's really useful for checking things just like this.

00:01:36.535 --> 00:01:38.270
For example, in the Speedy Chef

00:01:38.270 --> 00:01:39.875
project which you have coming up,

00:01:39.875 --> 00:01:43.180
we're going to have a variable called gameStarted.

00:01:43.180 --> 00:01:44.780
Before the game is started,

00:01:44.780 --> 00:01:46.490
this Boolean will be set to be

00:01:46.490 --> 00:01:48.680
false and then when we start the game,

00:01:48.680 --> 00:01:51.650
we reassigned this variable to be true.

00:01:51.650 --> 00:01:53.300
This allows us at any point in

00:01:53.300 --> 00:01:54.785
the game to be able to check

00:01:54.785 --> 00:01:56.330
if the game is started and

00:01:56.330 --> 00:01:58.430
have certain features available.

00:01:58.430 --> 00:02:00.770
For example, we would have something like this,

00:02:00.770 --> 00:02:03.455
we could set up a variable.

00:02:03.455 --> 00:02:05.450
I'm going to give us any names such

00:02:05.450 --> 00:02:07.970
as gameStarted this is

00:02:07.970 --> 00:02:09.770
equal initiate to be

00:02:09.770 --> 00:02:12.500
false and then inside of our console log,

00:02:12.500 --> 00:02:14.510
first of all, we can check the data type of

00:02:14.510 --> 00:02:17.770
this variable using the type of property.

00:02:17.770 --> 00:02:22.200
Refresh and we'll see Boolean just inside of here.

00:02:22.730 --> 00:02:26.464
How can we use this in a real situation?

00:02:26.464 --> 00:02:28.610
Well, Boolean values are often

00:02:28.610 --> 00:02:30.950
used together with an if statement.

00:02:30.950 --> 00:02:33.065
An if statement looks like this,

00:02:33.065 --> 00:02:35.110
we'll have the if keyword,

00:02:35.110 --> 00:02:37.730
open up the brackets just like this,

00:02:37.730 --> 00:02:40.270
and then open up some curly braces.

00:02:40.270 --> 00:02:42.530
Now you will see this pattern

00:02:42.530 --> 00:02:44.885
followed a lot inside of JavaScript.

00:02:44.885 --> 00:02:46.820
We have a certain keywords,

00:02:46.820 --> 00:02:48.620
we have some round brackets and then we'll have

00:02:48.620 --> 00:02:51.505
some curly braces where we want to run our code,

00:02:51.505 --> 00:02:53.075
so you will see this a lot

00:02:53.075 --> 00:02:54.920
as we progress through the course.

00:02:54.920 --> 00:02:56.840
But in particular for this if

00:02:56.840 --> 00:02:58.655
statements what we're going to do,

00:02:58.655 --> 00:03:01.465
we're going to check if something is true or false.

00:03:01.465 --> 00:03:02.955
In our case, we want to check if

00:03:02.955 --> 00:03:05.490
gameStarted is equal to true or false.

00:03:05.490 --> 00:03:08.120
What we do, we pass this inside of here

00:03:08.120 --> 00:03:10.910
and if this results to true,

00:03:10.910 --> 00:03:13.450
the code inside of here will then run.

00:03:13.450 --> 00:03:15.380
In my case, I'm just going to put in

00:03:15.380 --> 00:03:20.425
a simple console log with the text of gameStarted.

00:03:20.425 --> 00:03:22.880
Now if we save this,

00:03:22.880 --> 00:03:24.390
then refresh the browser,

00:03:24.390 --> 00:03:25.970
we don't see anything inside

00:03:25.970 --> 00:03:29.065
the console because this is not true.

00:03:29.065 --> 00:03:32.910
However, let's flip this over to be true,

00:03:32.910 --> 00:03:36.100
refresh, and our console log has now run.

00:03:36.100 --> 00:03:39.260
Of course, we'll cover if statements in more detail soon

00:03:39.260 --> 00:03:40.610
but this is how they can work with

00:03:40.610 --> 00:03:42.680
a simple Boolean value.

00:03:42.680 --> 00:03:48.385
But if we have also a second variable, well, playerName.

00:03:48.385 --> 00:03:52.830
Say let playerName is equal to

00:03:52.830 --> 00:03:54.770
Chris and then we change

00:03:54.770 --> 00:03:58.015
our if statement to check this player name.

00:03:58.015 --> 00:04:00.350
We have a playerName set,

00:04:00.350 --> 00:04:02.165
we're going to log to the console.

00:04:02.165 --> 00:04:05.170
The message of username is set.

00:04:05.170 --> 00:04:07.310
Let's just take a step back and

00:04:07.310 --> 00:04:09.065
think about what we're doing here.

00:04:09.065 --> 00:04:10.970
We check in. First of all,

00:04:10.970 --> 00:04:12.050
last time we'll check in if

00:04:12.050 --> 00:04:14.135
the gameStarted is equal to true.

00:04:14.135 --> 00:04:16.705
This was a simple Boolean value,

00:04:16.705 --> 00:04:18.885
however though for this playerName,

00:04:18.885 --> 00:04:21.300
this is equal to a string.

00:04:21.300 --> 00:04:24.875
Do you think this will result to true or false?

00:04:24.875 --> 00:04:27.890
Well, let's save this and check this in

00:04:27.890 --> 00:04:31.415
the browser and we see that this runs inside the console.

00:04:31.415 --> 00:04:33.320
Well, the reason we see this inside

00:04:33.320 --> 00:04:35.750
the console is because generally an if statement

00:04:35.750 --> 00:04:39.965
or a Boolean will result to true if a value exists.

00:04:39.965 --> 00:04:42.140
Here we have a value of Chris,

00:04:42.140 --> 00:04:44.005
so this definitely exists.

00:04:44.005 --> 00:04:46.895
Let's see what happens if we remove this name

00:04:46.895 --> 00:04:50.630
and leave this as an empty string, save and refresh.

00:04:50.630 --> 00:04:53.900
Now, this must be resulting in false.

00:04:53.900 --> 00:04:55.880
One thing to note here that having

00:04:55.880 --> 00:04:58.490
an empty value such as our empty string,

00:04:58.490 --> 00:05:00.470
just like this, should not be confused with

00:05:00.470 --> 00:05:02.675
not having a value at all.

00:05:02.675 --> 00:05:04.850
A variable without a value is

00:05:04.850 --> 00:05:08.449
another primitive data type called undefined.

00:05:08.449 --> 00:05:11.960
If we have no value at all assigned to this variable

00:05:11.960 --> 00:05:13.790
and if we were to remove this string just

00:05:13.790 --> 00:05:15.995
like this and then instead,

00:05:15.995 --> 00:05:17.870
we'll do a console log for

00:05:17.870 --> 00:05:22.855
the playerName and we'll also remove this if statements,

00:05:22.855 --> 00:05:26.120
so we couldn't run this console log first time,

00:05:26.120 --> 00:05:27.890
save and over to the browser we see

00:05:27.890 --> 00:05:30.055
this value of undefined.

00:05:30.055 --> 00:05:31.630
As mentioned before, this is

00:05:31.630 --> 00:05:34.455
another primitive type such as string, number,

00:05:34.455 --> 00:05:35.830
and Boolean and this

00:05:35.830 --> 00:05:37.370
undefined is displayed because we have

00:05:37.370 --> 00:05:41.095
a variable which doesn't have a value assigned to it.

00:05:41.095 --> 00:05:42.980
This was like earlier when we looked

00:05:42.980 --> 00:05:45.635
at $0 inside the browser.

00:05:45.635 --> 00:05:48.290
If we initially type in $0,

00:05:48.290 --> 00:05:51.095
when we don't have any elements selected on the page,

00:05:51.095 --> 00:05:53.690
we get back the value of undefined.

00:05:53.690 --> 00:05:55.340
The final data type which we're

00:05:55.340 --> 00:05:56.975
going to look at in this video

00:05:56.975 --> 00:06:00.545
is also primitive and this is the value of null.

00:06:00.545 --> 00:06:04.250
Null also indicates that something is missing too.

00:06:04.250 --> 00:06:06.200
If we set our variable of

00:06:06.200 --> 00:06:08.550
playerName to be equal

00:06:08.550 --> 00:06:11.280
to null and then refresh the browser,

00:06:11.280 --> 00:06:14.315
as expected we get back this value of null.

00:06:14.315 --> 00:06:17.150
We had a brief look at objects in an earlier video,

00:06:17.150 --> 00:06:19.870
and null is related to these objects.

00:06:19.870 --> 00:06:23.000
It indicates that this object is empty and

00:06:23.000 --> 00:06:26.375
often when working with databases or back-end services,

00:06:26.375 --> 00:06:27.980
a common example of this is when

00:06:27.980 --> 00:06:30.160
requesting some user data.

00:06:30.160 --> 00:06:31.910
If the user is logged in,

00:06:31.910 --> 00:06:33.815
we get back an object containing

00:06:33.815 --> 00:06:35.945
all of that users information.

00:06:35.945 --> 00:06:38.030
If they are not logged in however,

00:06:38.030 --> 00:06:39.830
we'll often see null

00:06:39.830 --> 00:06:42.785
since they user object will be empty.

00:06:42.785 --> 00:06:45.770
We looked at three different data types in this video,

00:06:45.770 --> 00:06:47.810
we've looked at Boolean to begin with

00:06:47.810 --> 00:06:50.330
which is a simple true or false value.

00:06:50.330 --> 00:06:53.000
This primitive data type is really useful and

00:06:53.000 --> 00:06:55.900
often seen combined with an if statement.

00:06:55.900 --> 00:06:57.855
We have undefined,

00:06:57.855 --> 00:06:59.675
again a primitive data type which

00:06:59.675 --> 00:07:01.955
indicates that something is missing.

00:07:01.955 --> 00:07:04.010
In our example, we took a look at

00:07:04.010 --> 00:07:07.415
a variable which has null value assigned to it.

00:07:07.415 --> 00:07:09.650
Finally, we also discovered null,

00:07:09.650 --> 00:07:12.095
which is again a primitive data type

00:07:12.095 --> 00:07:13.655
and it's more specific than

00:07:13.655 --> 00:07:15.800
undefined and it refers to

00:07:15.800 --> 00:07:18.740
an object which is absence of any values.

00:07:18.740 --> 00:07:20.990
You can see at the bottom here that undefined is

00:07:20.990 --> 00:07:23.075
a more generic result and

00:07:23.075 --> 00:07:26.430
null is more specific to an object.
