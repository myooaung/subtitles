WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.230 --> 00:00:06.990
Let's now take a look at JavaScript functions.

00:00:06.990 --> 00:00:09.495
A function is like a task

00:00:09.495 --> 00:00:12.255
or a set of tasks grouped together.

00:00:12.255 --> 00:00:15.495
For example, in our upcoming speedy shaft project,

00:00:15.495 --> 00:00:18.975
we'll have many functions which perform a certain task.

00:00:18.975 --> 00:00:21.330
Such as generating a new pizza,

00:00:21.330 --> 00:00:23.685
we'll have one for creating a new order,

00:00:23.685 --> 00:00:26.730
and also one to check if the event is full.

00:00:26.730 --> 00:00:29.430
These functions can either run immediately

00:00:29.430 --> 00:00:32.845
or more often when we call them at a later stage.

00:00:32.845 --> 00:00:34.340
Just like arrays and objects,

00:00:34.340 --> 00:00:36.480
which we've looked at in the previous two videos,

00:00:36.480 --> 00:00:37.920
we will have a more detailed

00:00:37.920 --> 00:00:40.155
functions section coming up in the course.

00:00:40.155 --> 00:00:42.770
But for now having a basic function knowledge

00:00:42.770 --> 00:00:45.100
will really help us with some of the steps.

00:00:45.100 --> 00:00:47.260
Also just like these arrays and objects,

00:00:47.260 --> 00:00:48.560
which we just looked at,

00:00:48.560 --> 00:00:53.330
a function also falls into the same object type Group 2.

00:00:53.330 --> 00:00:54.860
For this lesson head into

00:00:54.860 --> 00:00:57.830
the last folder inside of our JavaScript basics.

00:00:57.830 --> 00:01:01.280
This is number 13, introduction to functions.

00:01:01.280 --> 00:01:04.465
Open us up and also in the browser too.

00:01:04.465 --> 00:01:06.665
What we're going to do is first of all,

00:01:06.665 --> 00:01:09.020
we have two arrays just here which we can

00:01:09.020 --> 00:01:11.675
ignore and we can go just below these.

00:01:11.675 --> 00:01:14.060
We'll come back to these in just a moment.

00:01:14.060 --> 00:01:16.880
Although we'll take a look at how a function works and we

00:01:16.880 --> 00:01:20.030
begin by using the function keyword.

00:01:20.030 --> 00:01:23.480
The function keyword is then followed by a name,

00:01:23.480 --> 00:01:25.550
which we want to give this function.

00:01:25.550 --> 00:01:27.260
Just like a variable above,

00:01:27.260 --> 00:01:29.540
we then assign a name and for this example,

00:01:29.540 --> 00:01:31.765
let's go for random number.

00:01:31.765 --> 00:01:34.370
This is a name which we call a function

00:01:34.370 --> 00:01:37.840
by each time we want to run the code inside.

00:01:37.840 --> 00:01:40.940
Immediately after this name we pass in some brackets,

00:01:40.940 --> 00:01:42.755
which is called parentheses.

00:01:42.755 --> 00:01:44.630
Inside of these brackets we can pass in

00:01:44.630 --> 00:01:46.910
some extra information to the function,

00:01:46.910 --> 00:01:49.085
but more on this in a moment.

00:01:49.085 --> 00:01:51.560
The last part of this type of function is

00:01:51.560 --> 00:01:55.340
the curly braces and this is the function body.

00:01:55.340 --> 00:01:58.760
These braces inside of here contain all of

00:01:58.760 --> 00:02:00.500
the code which you want to run when we

00:02:00.500 --> 00:02:02.805
call this function by its name.

00:02:02.805 --> 00:02:05.860
These braces can also be thought of as a set of

00:02:05.860 --> 00:02:09.130
gates that contain all of the function code inside.

00:02:09.130 --> 00:02:12.625
This is what is called a function declaration.

00:02:12.625 --> 00:02:16.110
Inside we can place in any code which you want to run.

00:02:16.110 --> 00:02:19.430
Now let's place in a simple browser alert.

00:02:19.430 --> 00:02:22.290
Save this and over to the browser.

00:02:22.290 --> 00:02:25.240
If we refresh, we don't see this alert

00:02:25.240 --> 00:02:28.480
running inside of here. It actually run this code.

00:02:28.480 --> 00:02:29.860
Just like we mentioned, we need to call

00:02:29.860 --> 00:02:31.540
the function by its name,

00:02:31.540 --> 00:02:34.280
followed by these brackets just here.

00:02:34.280 --> 00:02:38.010
Just below this, call our random number,

00:02:38.010 --> 00:02:40.780
add the brackets or these parentheses.

00:02:40.780 --> 00:02:42.940
This should now call our function code

00:02:42.940 --> 00:02:46.130
and then display the alert inside the browser.

00:02:46.130 --> 00:02:48.490
Another good example of a function would

00:02:48.490 --> 00:02:50.365
be a calculator to convert

00:02:50.365 --> 00:02:54.100
a dog age to a human age. Let's start again.

00:02:54.100 --> 00:02:57.175
We'll go back to our original function keyword.

00:02:57.175 --> 00:03:01.655
This time we'll call this dogToHuman,

00:03:01.655 --> 00:03:04.365
add the brackets or the parentheses.

00:03:04.365 --> 00:03:06.300
Then the function body.

00:03:06.300 --> 00:03:08.080
Just above create a new variable,

00:03:08.080 --> 00:03:10.475
which is going to be our dogAge.

00:03:10.475 --> 00:03:13.675
Let's set this to any values, such as three.

00:03:13.675 --> 00:03:15.610
We can then access this variable

00:03:15.610 --> 00:03:17.290
inside of our function and

00:03:17.290 --> 00:03:21.010
then do a multiplication to convert it to human years.

00:03:21.010 --> 00:03:22.660
To access this variable all we nee

00:03:22.660 --> 00:03:24.070
to do is to access it by

00:03:24.070 --> 00:03:27.600
its name., so the dogAge.

00:03:27.600 --> 00:03:31.430
Then multiply this value to 7 to give us the human years.

00:03:31.430 --> 00:03:34.400
We can also store this inside of a constant.

00:03:34.400 --> 00:03:36.900
Let's go for humanEquiv.

00:03:38.360 --> 00:03:40.805
For now, looking at this function,

00:03:40.805 --> 00:03:44.315
all this is doing is grabbing our dog age variable,

00:03:44.315 --> 00:03:46.375
multiplying this by 7.

00:03:46.375 --> 00:03:48.555
But we also need to tell a function to

00:03:48.555 --> 00:03:50.925
actually send back this new value.

00:03:50.925 --> 00:03:54.545
The way do this is to use the return keyword.

00:03:54.545 --> 00:03:59.940
We can return our humanEquiv variable, just like before.

00:03:59.940 --> 00:04:01.680
We then call this function,

00:04:01.680 --> 00:04:03.810
which was the dogToHuman.

00:04:03.810 --> 00:04:06.230
If we save this and over to the browser,

00:04:06.230 --> 00:04:08.045
refresh, we don't see

00:04:08.045 --> 00:04:10.380
anything different inside the browser.

00:04:10.380 --> 00:04:12.010
We don't see anything different

00:04:12.010 --> 00:04:14.830
because in the first function we looked at,

00:04:14.830 --> 00:04:16.710
it contained an alert.

00:04:16.710 --> 00:04:19.990
This was a visual cue that the function was running.

00:04:19.990 --> 00:04:21.760
But this one, we don't have an alert,

00:04:21.760 --> 00:04:23.050
we don't have a console log,

00:04:23.050 --> 00:04:26.185
we'd not set in a Level 1 heading with it in the text.

00:04:26.185 --> 00:04:29.145
All we're doing is returning back a value.

00:04:29.145 --> 00:04:32.140
To actually use this value, if we wanted to,

00:04:32.140 --> 00:04:33.430
we could wrap this inside of

00:04:33.430 --> 00:04:37.285
a console log and see it return value inside the console.

00:04:37.285 --> 00:04:40.000
Or more commonly, we could store

00:04:40.000 --> 00:04:43.770
this inside of a constant called result.

00:04:43.770 --> 00:04:47.245
This result will then contain this return value,

00:04:47.245 --> 00:04:49.975
which is the dogAge multiplied by 7.

00:04:49.975 --> 00:04:51.370
If we wanted to, we could do

00:04:51.370 --> 00:04:54.760
a simple console log with the value of the result.

00:04:54.760 --> 00:04:56.360
But let's go one step further and

00:04:56.360 --> 00:04:58.535
convert this into a string.

00:04:58.535 --> 00:05:00.830
If we use the back ticks, we can also make

00:05:00.830 --> 00:05:03.080
use of this result variable.

00:05:03.080 --> 00:05:06.320
We'll say, My dog is aged.

00:05:06.320 --> 00:05:08.180
Remember to pass in a variable,

00:05:08.180 --> 00:05:11.745
we use a $ symbol, the curly braces.

00:05:11.745 --> 00:05:14.910
Then insert the variable name and then

00:05:14.910 --> 00:05:18.915
continue the string to say in human years.

00:05:18.915 --> 00:05:21.420
This should say My dog is aged,

00:05:21.420 --> 00:05:25.025
and in our case, this would be 21 in human years.

00:05:25.025 --> 00:05:28.920
Over to the browser and open up the console.

00:05:29.420 --> 00:05:32.690
Refresh the page and there we go.

00:05:32.690 --> 00:05:33.860
There's our new string with

00:05:33.860 --> 00:05:36.260
the variable contained inside.

00:05:36.260 --> 00:05:39.110
Just to recap, we've created a function.

00:05:39.110 --> 00:05:40.490
This function is going to

00:05:40.490 --> 00:05:42.865
access our dogAge variable of three.

00:05:42.865 --> 00:05:44.535
Multiply it by 7,

00:05:44.535 --> 00:05:46.220
we then store this inside of

00:05:46.220 --> 00:05:47.600
a variable and then

00:05:47.600 --> 00:05:50.305
return these results back from the function.

00:05:50.305 --> 00:05:53.040
We then call this function below and store

00:05:53.040 --> 00:05:56.195
this returned value inside of our results.

00:05:56.195 --> 00:05:59.225
Results can then be used anywhere inside of our code,

00:05:59.225 --> 00:06:03.335
such as just here when we insert it inside of a string.

00:06:03.335 --> 00:06:06.155
Also do be aware that this return keyword should

00:06:06.155 --> 00:06:08.990
only be used once inside of a function,

00:06:08.990 --> 00:06:11.920
since it signals that the function should stop running.

00:06:11.920 --> 00:06:13.850
There are however some exceptions,

00:06:13.850 --> 00:06:17.030
such as when using this inside of an if else statement,

00:06:17.030 --> 00:06:19.010
which we'll learn about later.

00:06:19.010 --> 00:06:21.950
But generally return is the end of the function

00:06:21.950 --> 00:06:25.345
and any code which you place after it will be ignored.

00:06:25.345 --> 00:06:28.695
We could see this if we add an alert.

00:06:28.695 --> 00:06:31.590
Then run this in the browser,

00:06:31.590 --> 00:06:34.655
refresh the page, and we see our console log.

00:06:34.655 --> 00:06:37.190
But we don't see any alert on the page because this

00:06:37.190 --> 00:06:39.920
falls after our return statement.

00:06:39.920 --> 00:06:43.815
This effectively ends our function. Let's remove this.

00:06:43.815 --> 00:06:45.290
At the beginning of this video,

00:06:45.290 --> 00:06:46.999
we mentioned that these brackets

00:06:46.999 --> 00:06:48.650
just after the function name,

00:06:48.650 --> 00:06:52.525
we can also pass in extra information to this function.

00:06:52.525 --> 00:06:55.295
In the bracket, we set up one or more parameters,

00:06:55.295 --> 00:06:57.770
which you can think of as variables.

00:06:57.770 --> 00:07:02.450
Instead of our dogAge just above, we can comma this out.

00:07:02.450 --> 00:07:04.280
We can pass in a variable or

00:07:04.280 --> 00:07:08.865
a parameter called dogAge directly into our function.

00:07:08.865 --> 00:07:12.350
We can also pass in multiple values separated by a comma.

00:07:12.350 --> 00:07:14.120
Then we could access this inside of

00:07:14.120 --> 00:07:16.225
our function, just like before.

00:07:16.225 --> 00:07:20.175
But this dogAge had a value of three assigned to it.

00:07:20.175 --> 00:07:23.690
How do we actually pass this value to this parameter?

00:07:23.690 --> 00:07:25.430
Well, we do this when we actually

00:07:25.430 --> 00:07:27.275
call a function just here.

00:07:27.275 --> 00:07:30.230
Let's go for a different example this time of five.

00:07:30.230 --> 00:07:32.330
Its actual value which you pass from

00:07:32.330 --> 00:07:35.300
a call function is called an argument.

00:07:35.300 --> 00:07:37.280
You don't need to remember this at the moment,

00:07:37.280 --> 00:07:40.160
but this is an argument and this is a parameter.

00:07:40.160 --> 00:07:42.050
Let's try this out. Give this

00:07:42.050 --> 00:07:44.015
a save and over to the browser.

00:07:44.015 --> 00:07:48.660
Now we see the different value of 35 inside of our log.

00:07:49.060 --> 00:07:51.140
As we've gone through this video,

00:07:51.140 --> 00:07:53.510
there has been a few key words involved.

00:07:53.510 --> 00:07:56.375
You don't need to remember all of these at this stage.

00:07:56.375 --> 00:07:58.820
People do often confuse parameters and

00:07:58.820 --> 00:08:01.970
arguments and also use them interchangeably.

00:08:01.970 --> 00:08:03.470
It's not a huge problem.

00:08:03.470 --> 00:08:04.565
But just to clarify,

00:08:04.565 --> 00:08:06.710
a parameter is the variable or

00:08:06.710 --> 00:08:10.490
the placeholder inside of our function declaration.

00:08:10.490 --> 00:08:13.565
We can then access them inside of our function body,

00:08:13.565 --> 00:08:16.285
which is inside of the curly braces.

00:08:16.285 --> 00:08:18.110
We then have arguments, which are

00:08:18.110 --> 00:08:22.025
the actual values we pass in when we call this function,

00:08:22.025 --> 00:08:25.219
such as our number in this example.

00:08:25.219 --> 00:08:27.560
Let's take this a little bit further by using

00:08:27.560 --> 00:08:30.125
our two arrays at the very top.

00:08:30.125 --> 00:08:34.085
Let's clean this up and move all of this function code.

00:08:34.085 --> 00:08:36.095
We're now going to make a function

00:08:36.095 --> 00:08:37.340
which is going to check

00:08:37.340 --> 00:08:40.510
for any allergies inside of these recipes.

00:08:40.510 --> 00:08:42.830
The function will take in it the recipe,

00:08:42.830 --> 00:08:44.825
such as bread and brownies.

00:08:44.825 --> 00:08:46.220
Then we can also pass in

00:08:46.220 --> 00:08:50.365
a particular ingredient which a person is allergic to.

00:08:50.365 --> 00:08:52.700
The function will then loop through all of

00:08:52.700 --> 00:08:54.380
these values and check if

00:08:54.380 --> 00:08:56.600
this is contained inside the recipe.

00:08:56.600 --> 00:08:59.975
Just like before, create our function.

00:08:59.975 --> 00:09:03.310
Give this a name of checkAllergies,

00:09:03.310 --> 00:09:06.900
the parentheses, and then the curly braces.

00:09:06.900 --> 00:09:09.050
For this function to work correctly,

00:09:09.050 --> 00:09:11.050
it needs to take in it two things.

00:09:11.050 --> 00:09:14.510
First of all, the actual recipe to check against.

00:09:14.510 --> 00:09:16.310
We'll call this the recipe

00:09:16.310 --> 00:09:19.240
perimeter and separate it by a comma.

00:09:19.240 --> 00:09:22.115
It also needs to be passed a certain ingredient,

00:09:22.115 --> 00:09:24.900
check if it's contained inside.

00:09:25.490 --> 00:09:28.245
Open up the function body.

00:09:28.245 --> 00:09:31.160
The first step is to access our recipe,

00:09:31.160 --> 00:09:34.655
which is either the bread or the brownies array.

00:09:34.655 --> 00:09:36.320
Since this is an array,

00:09:36.320 --> 00:09:39.445
we can then make use of the includes method.

00:09:39.445 --> 00:09:41.360
We did quickly take a look at

00:09:41.360 --> 00:09:43.880
the includes method earlier and this will check if

00:09:43.880 --> 00:09:46.010
a certain value is contained inside of

00:09:46.010 --> 00:09:49.930
this array and then return a true or false value.

00:09:49.930 --> 00:09:53.000
We want to check if this ingredient is contained,

00:09:53.000 --> 00:09:55.700
which is passed as a parameter.

00:09:55.700 --> 00:09:57.890
Although we have these variables,

00:09:57.890 --> 00:09:59.945
we have the recipe and the ingredients,

00:09:59.945 --> 00:10:02.495
this is exactly the same as if we were to

00:10:02.495 --> 00:10:05.700
access our bread array just above.

00:10:05.700 --> 00:10:08.670
Then call the includes method, just like this.

00:10:08.670 --> 00:10:11.965
Then we could check if the flour is contained inside.

00:10:11.965 --> 00:10:14.490
If it is, which is the case here,

00:10:14.490 --> 00:10:16.965
this would then return the value of true.

00:10:16.965 --> 00:10:18.950
If it wasn't found inside of the array,

00:10:18.950 --> 00:10:21.580
we'll get back the value of false.

00:10:21.580 --> 00:10:24.470
Both of these lines of code do exactly the same.

00:10:24.470 --> 00:10:26.000
The difference is we can pass in at

00:10:26.000 --> 00:10:28.565
different values to our function.

00:10:28.565 --> 00:10:30.740
Next, store this inside of

00:10:30.740 --> 00:10:34.820
a constant called hasIngredients.

00:10:34.910 --> 00:10:37.500
They should only ever be true or

00:10:37.500 --> 00:10:41.600
false and then we can return this back from our function.

00:10:41.670 --> 00:10:43.900
To see this return value,

00:10:43.900 --> 00:10:46.280
we can create a console log.

00:10:46.490 --> 00:10:49.125
Then inside of here caller function,

00:10:49.125 --> 00:10:51.360
which is called checkAllergies,

00:10:51.360 --> 00:10:53.700
add the brackets or the parentheses.

00:10:53.700 --> 00:10:56.085
Then we need to pass in two arguments.

00:10:56.085 --> 00:10:57.870
First of all, the recipe,

00:10:57.870 --> 00:10:59.550
which is either the bread or

00:10:59.550 --> 00:11:02.745
the brownies. Let's go for bread.

00:11:02.745 --> 00:11:05.190
Then pass in our ingredient which you want to

00:11:05.190 --> 00:11:08.125
check if it's contained inside of this recipe.

00:11:08.125 --> 00:11:10.165
Let's go for flour.

00:11:10.165 --> 00:11:12.640
We know this is contained inside of bread,

00:11:12.640 --> 00:11:15.245
so this should return a value of true.

00:11:15.245 --> 00:11:18.330
Let's save this and refresh the browser.

00:11:18.330 --> 00:11:21.205
Now we see our value inside the console.

00:11:21.205 --> 00:11:23.620
Let's try a false value.

00:11:23.620 --> 00:11:29.070
We'll go for eggs. This is false.

00:11:29.070 --> 00:11:32.860
But we know eggs is contained inside of brownies.

00:11:33.690 --> 00:11:36.460
Let's try this one and it should

00:11:36.460 --> 00:11:39.320
once again be a value of true.

00:11:40.010 --> 00:11:42.325
Just as a recap, if this is

00:11:42.325 --> 00:11:43.720
all a bit much at the moment,

00:11:43.720 --> 00:11:46.270
we are creating a function called checkAllergies,

00:11:46.270 --> 00:11:48.160
where we're going to check if an ingredient is

00:11:48.160 --> 00:11:50.510
contained inside of a recipe.

00:11:50.510 --> 00:11:52.290
We then access this recipe,

00:11:52.290 --> 00:11:54.390
which is either the bread or the brownies.

00:11:54.390 --> 00:11:57.835
We check if includes this particular ingredient.

00:11:57.835 --> 00:12:01.060
If it does, this will return back a true value.

00:12:01.060 --> 00:12:03.205
If it doesn't, it will return false,

00:12:03.205 --> 00:12:06.230
which will then display inside of the logs.

00:12:06.230 --> 00:12:09.575
Hopefully you should start to see the power of functions.

00:12:09.575 --> 00:12:11.280
But there is a lot more to functions,

00:12:11.280 --> 00:12:13.075
which we'll soon discover.

00:12:13.075 --> 00:12:14.740
One of the big benefits of

00:12:14.740 --> 00:12:17.245
functions is they are reusable.

00:12:17.245 --> 00:12:19.200
If we have codes in our programs

00:12:19.200 --> 00:12:21.105
which we repeated multiple times,

00:12:21.105 --> 00:12:23.560
we could grab all of our code and move into

00:12:23.560 --> 00:12:25.570
a standalone function and

00:12:25.570 --> 00:12:28.205
then call the function in place of this code.

00:12:28.205 --> 00:12:30.125
The function can also be passed

00:12:30.125 --> 00:12:32.530
different values in the form of arguments,

00:12:32.530 --> 00:12:34.360
which we've just discovered here.

00:12:34.360 --> 00:12:36.670
You can also think of a function as

00:12:36.670 --> 00:12:39.930
a building block for all program too.

00:12:39.930 --> 00:12:42.650
Each one is assigned a particular task,

00:12:42.650 --> 00:12:45.380
so we can make our code more organized.

00:12:45.380 --> 00:12:48.665
Functions can also be in many of the forms too.

00:12:48.665 --> 00:12:51.500
This example here is a more traditional form of

00:12:51.500 --> 00:12:53.150
a JavaScript function and

00:12:53.150 --> 00:12:55.190
there are other types available too,

00:12:55.190 --> 00:12:56.510
such as arrow function,

00:12:56.510 --> 00:12:58.405
which we will cover later on.

00:12:58.405 --> 00:13:00.350
As a general guide though, if possible,

00:13:00.350 --> 00:13:03.050
it is beneficial to try and keep all functions as

00:13:03.050 --> 00:13:06.830
small as possible and only focusing on one task.

00:13:06.830 --> 00:13:08.510
This makes it much easier to

00:13:08.510 --> 00:13:10.235
know what a function is doing,

00:13:10.235 --> 00:13:11.880
makes it more reusable.

00:13:11.880 --> 00:13:13.370
It also helps with debugging

00:13:13.370 --> 00:13:14.870
because if there is an issue,

00:13:14.870 --> 00:13:16.430
we can focus down this problem

00:13:16.430 --> 00:13:18.095
onto one particular function,

00:13:18.095 --> 00:13:20.730
so it's much easier to find.
