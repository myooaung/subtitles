WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.490 --> 00:00:04.350
In ES2015, we were given

00:00:04.350 --> 00:00:08.325
a new optional way of creating function expressions.

00:00:08.325 --> 00:00:10.530
These are called arrow functions.

00:00:10.530 --> 00:00:13.649
These were a shorter way to write function expressions.

00:00:13.649 --> 00:00:15.540
But it's not just this shorter syntax

00:00:15.540 --> 00:00:16.610
which is different,

00:00:16.610 --> 00:00:20.430
they also behave differently to regular functions too.

00:00:20.430 --> 00:00:23.010
At the top of the starter files,

00:00:23.010 --> 00:00:25.845
head into the arrow functions file and at the top here,

00:00:25.845 --> 00:00:28.935
we have a regular function expression.

00:00:28.935 --> 00:00:31.500
This is a function which is anonymous.

00:00:31.500 --> 00:00:34.515
Then we store this inside of a variable.

00:00:34.515 --> 00:00:36.450
What we're now going to do is to

00:00:36.450 --> 00:00:39.195
transform this into an arrow function.

00:00:39.195 --> 00:00:40.740
We looked at these briefly

00:00:40.740 --> 00:00:42.170
earlier and the way we need to do

00:00:42.170 --> 00:00:45.395
this is to first, remove the function key.

00:00:45.395 --> 00:00:48.140
Then after the brackets we add in our arrow,

00:00:48.140 --> 00:00:49.280
and it's consisted of

00:00:49.280 --> 00:00:52.480
the equals and the greater than symbol.

00:00:52.480 --> 00:00:54.030
Call this and run

00:00:54.030 --> 00:00:56.895
the alert when it's called by it's variable name,

00:00:56.895 --> 00:01:00.720
followed by the function brackets, save and refresh.

00:01:00.720 --> 00:01:03.180
Now function will now run correctly.

00:01:03.180 --> 00:01:04.790
At the beginning of this video,

00:01:04.790 --> 00:01:06.020
we started by saying how

00:01:06.020 --> 00:01:08.360
arrow functions were a shorter syntax,

00:01:08.360 --> 00:01:10.970
but this doesn't look much different at the moment.

00:01:10.970 --> 00:01:13.235
This is still classed as an arrow function,

00:01:13.235 --> 00:01:16.420
but we can also make it even shorter too.

00:01:16.420 --> 00:01:19.760
If we only have a single line of code nested inside,

00:01:19.760 --> 00:01:22.520
we can remove these curly braces

00:01:22.520 --> 00:01:25.620
and we can bring it onto the same line.

00:01:25.910 --> 00:01:28.295
Refresh the browser and this still works

00:01:28.295 --> 00:01:30.845
exactly the same as before.

00:01:30.845 --> 00:01:33.230
If you only have a single line like this,

00:01:33.230 --> 00:01:35.000
we also don't need to add in

00:01:35.000 --> 00:01:38.320
the return keyword as this is done automatically.

00:01:38.320 --> 00:01:40.490
If we did have multiple lines of code though,

00:01:40.490 --> 00:01:43.430
we would need to return something from the function and

00:01:43.430 --> 00:01:47.110
also wrap the multiple lines inside of the curly braces.

00:01:47.110 --> 00:01:49.130
Arrow functions can also take in

00:01:49.130 --> 00:01:52.145
parameters too just like a regular function.

00:01:52.145 --> 00:01:54.170
We can pass in as many of these as we want

00:01:54.170 --> 00:01:56.485
to separated by a comma.

00:01:56.485 --> 00:01:59.615
If we only had a single parameter just like this,

00:01:59.615 --> 00:02:02.855
we can also remove the surrounding brackets.

00:02:02.855 --> 00:02:05.120
This is how an arrow function looks.

00:02:05.120 --> 00:02:06.905
Let's refactor one of our methods

00:02:06.905 --> 00:02:08.680
from the previous video.

00:02:08.680 --> 00:02:11.050
We can remove these two lines of code,

00:02:11.050 --> 00:02:13.610
and then below this will have the same example as

00:02:13.610 --> 00:02:16.395
we've looked at in the previous video.

00:02:16.395 --> 00:02:19.780
I'll comment out all of this code to make it active.

00:02:19.780 --> 00:02:21.480
Remember, previously we created

00:02:21.480 --> 00:02:25.699
our check objects and it contained various properties,

00:02:25.699 --> 00:02:27.515
just like our primitives here.

00:02:27.515 --> 00:02:30.245
Also since we moved the standalone functions

00:02:30.245 --> 00:02:31.835
to be part of this object,

00:02:31.835 --> 00:02:34.315
these are now referred to as methods.

00:02:34.315 --> 00:02:36.260
What we're going to do inside of this object

00:02:36.260 --> 00:02:37.775
is to transform

00:02:37.775 --> 00:02:39.770
this recipesLeft method and

00:02:39.770 --> 00:02:41.960
I'll make use of an arrow function.

00:02:41.960 --> 00:02:44.980
Just like before, we can move the function keyword

00:02:44.980 --> 00:02:47.955
since this is just one single line of code.

00:02:47.955 --> 00:02:50.560
We can also remove the curly braces,

00:02:50.560 --> 00:02:52.810
bring this onto the same line,

00:02:52.810 --> 00:02:54.550
and remember that single lines are

00:02:54.550 --> 00:02:56.905
automatically returned back follows.

00:02:56.905 --> 00:02:59.005
We also need the arrow.

00:02:59.005 --> 00:03:02.230
Let's try logging to the console and see what happens.

00:03:02.230 --> 00:03:05.065
We still have the console log of recipesLeft.

00:03:05.065 --> 00:03:08.590
Refresh the browser and we get an unexpected token,

00:03:08.590 --> 00:03:10.670
which is the semicolon.

00:03:10.670 --> 00:03:13.425
This is just this one here.

00:03:13.425 --> 00:03:16.269
If we remove this and refresh,

00:03:16.269 --> 00:03:19.400
we see the value of not a number.

00:03:19.400 --> 00:03:22.795
Obviously, this method is not working as it did before.

00:03:22.795 --> 00:03:24.100
This is because of the way

00:03:24.100 --> 00:03:27.020
arrow functions handle the this keyword.

00:03:27.020 --> 00:03:29.390
More precisely, arrow functions

00:03:29.390 --> 00:03:31.070
don't have their own this,

00:03:31.070 --> 00:03:32.780
and this is why we don't see the number

00:03:32.780 --> 00:03:34.535
inside of the console.

00:03:34.535 --> 00:03:36.170
See this we can also place in

00:03:36.170 --> 00:03:39.205
a console log inside of this method.

00:03:39.205 --> 00:03:41.720
So move these onto a separate lines,

00:03:41.720 --> 00:03:43.925
log the value of this.

00:03:43.925 --> 00:03:46.280
Then since we are now on multiple lines,

00:03:46.280 --> 00:03:50.225
we also need to wrap these in the curly braces,

00:03:50.225 --> 00:03:53.680
making sure that this comma is also removed.

00:03:53.680 --> 00:03:56.190
Let's try this. Refresh and now we

00:03:56.190 --> 00:03:58.905
see this points to the window object,

00:03:58.905 --> 00:04:00.575
unlike in the last video,

00:04:00.575 --> 00:04:02.330
where the value of this referred to

00:04:02.330 --> 00:04:04.835
the parent object which was checkRecipes.

00:04:04.835 --> 00:04:07.720
Arrow functions don't have their own this.

00:04:07.720 --> 00:04:10.475
This means that this refers to the global object,

00:04:10.475 --> 00:04:12.410
so it is often advised to not use

00:04:12.410 --> 00:04:14.330
an arrow function when creating methods like

00:04:14.330 --> 00:04:15.860
this because it cannot

00:04:15.860 --> 00:04:19.285
access over properties on this object.

00:04:19.285 --> 00:04:20.900
Although like when we use

00:04:20.900 --> 00:04:22.835
the arrow functions in a previous video,

00:04:22.835 --> 00:04:25.040
that can be useful to combine weird things like

00:04:25.040 --> 00:04:28.175
array methods because of the shorter syntax.

00:04:28.175 --> 00:04:30.440
If we take a look at an example of this,

00:04:30.440 --> 00:04:32.240
down at the very bottom.

00:04:32.240 --> 00:04:36.695
If we access the brownies or map,

00:04:36.695 --> 00:04:38.990
and then with the regular function syntax,

00:04:38.990 --> 00:04:40.150
it would look just like this.

00:04:40.150 --> 00:04:41.810
We pass in a function.

00:04:41.810 --> 00:04:43.625
This function would then take in

00:04:43.625 --> 00:04:47.150
each ingredients and then

00:04:47.150 --> 00:04:49.280
inside we could return anything which you want to.

00:04:49.280 --> 00:04:51.275
Let's go for our ingredients,

00:04:51.275 --> 00:04:54.780
which has been transformed to uppercase.

00:04:55.130 --> 00:04:57.540
This is a way of writing this with

00:04:57.540 --> 00:04:59.120
a regular function and in fact,

00:04:59.120 --> 00:05:01.625
it's still my preferred way of doing things.

00:05:01.625 --> 00:05:04.264
However, though the arrow function equivalents

00:05:04.264 --> 00:05:06.870
would go like this, brownies.map,

00:05:06.870 --> 00:05:09.260
and then instead of typing the function keyword,

00:05:09.260 --> 00:05:11.300
we can pass in an arrow function,

00:05:11.300 --> 00:05:14.960
which is the brackets, the arrow syntax.

00:05:14.960 --> 00:05:16.670
We don't need the return keyword

00:05:16.670 --> 00:05:18.350
since this is all on its own line.

00:05:18.350 --> 00:05:20.135
We can then just copy this,

00:05:20.135 --> 00:05:23.270
paste this in, and both of these are equivalent.

00:05:23.270 --> 00:05:25.130
We can't see why the shorter version

00:05:25.130 --> 00:05:26.615
is often used with things like

00:05:26.615 --> 00:05:28.190
array methods and also

00:05:28.190 --> 00:05:30.965
some people just right arrow functions by default.

00:05:30.965 --> 00:05:33.770
Sometimes because it's just a newer syntax.

00:05:33.770 --> 00:05:37.085
This can be fine if this is the syntax which you'd prefer

00:05:37.085 --> 00:05:38.780
and they do have some benefits as we've

00:05:38.780 --> 00:05:40.410
just seen with the shorter form.

00:05:40.410 --> 00:05:42.170
But remember, just because

00:05:42.170 --> 00:05:44.780
arrow functions are a newer way of doing things,

00:05:44.780 --> 00:05:47.935
it doesn't mean we should always use them exclusively.

00:05:47.935 --> 00:05:50.900
You will notice that they are also anonymous.

00:05:50.900 --> 00:05:52.265
Which means they don't have

00:05:52.265 --> 00:05:54.230
a unique identifier over them.

00:05:54.230 --> 00:05:56.410
May be available which we assigned to them.

00:05:56.410 --> 00:05:59.330
This can make debugging a little bit trickier too.

00:05:59.330 --> 00:06:00.770
Also remember that we have

00:06:00.770 --> 00:06:02.840
the difference between the way it handles

00:06:02.840 --> 00:06:07.230
the this keyword from the regular function declaration.
