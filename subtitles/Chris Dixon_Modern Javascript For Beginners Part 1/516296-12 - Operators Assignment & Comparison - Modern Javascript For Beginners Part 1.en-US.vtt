WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.240 --> 00:00:04.665
Operators are something we use

00:00:04.665 --> 00:00:06.585
all the time in JavaScript.

00:00:06.585 --> 00:00:08.460
In fact, we've already used some

00:00:08.460 --> 00:00:10.545
of them already during this course.

00:00:10.545 --> 00:00:12.210
You will notice for this video I'm

00:00:12.210 --> 00:00:13.470
already in the correct file,

00:00:13.470 --> 00:00:14.985
which is lesson number 9,

00:00:14.985 --> 00:00:17.545
Operators: Assignment and Comparison.

00:00:17.545 --> 00:00:20.450
Also open this up inside the browser.

00:00:20.450 --> 00:00:23.220
Scrolling down to our script section,

00:00:23.220 --> 00:00:26.430
we already have some simple variables already setup.

00:00:26.430 --> 00:00:29.130
You'll notice the common thing between all four of

00:00:29.130 --> 00:00:33.045
these variables is they all use the equals operator.

00:00:33.045 --> 00:00:36.030
This is the assignment operator because we assign

00:00:36.030 --> 00:00:37.620
the value on the right to

00:00:37.620 --> 00:00:40.150
the variable name over on the left.

00:00:40.150 --> 00:00:43.210
But there are other assignment operators too,

00:00:43.210 --> 00:00:45.920
which you can see up here from this comment.

00:00:45.920 --> 00:00:47.645
We've looked at this equals.

00:00:47.645 --> 00:00:50.720
Let's now move on to this plus equals symbol.

00:00:50.720 --> 00:00:53.660
Let's say we wanted to add together the value of number

00:00:53.660 --> 00:00:56.570
1 and also the value of number 2,

00:00:56.570 --> 00:00:59.195
and then store the newly returned value.

00:00:59.195 --> 00:01:01.300
Well, we could do it like this.

00:01:01.300 --> 00:01:03.885
We'll call this the new number.

00:01:03.885 --> 00:01:09.810
Set this equal to the value of number 1 plus number 2.

00:01:10.000 --> 00:01:12.260
If I scroll down a little bit further,

00:01:12.260 --> 00:01:14.390
we have this getElementByID,

00:01:14.390 --> 00:01:15.890
which is already setup,

00:01:15.890 --> 00:01:18.470
which is just this level 1 heading up at the top.

00:01:18.470 --> 00:01:19.940
What we're going to do here is I'll put

00:01:19.940 --> 00:01:22.000
the value of new number.

00:01:22.000 --> 00:01:25.010
Add this into here, give this a "Save",

00:01:25.010 --> 00:01:26.825
and now we can "Refresh" the browser.

00:01:26.825 --> 00:01:29.060
We see this newly returned value of 20,

00:01:29.060 --> 00:01:32.255
which is the 15 and the five added together.

00:01:32.255 --> 00:01:34.775
There's no surprise with this one.

00:01:34.775 --> 00:01:36.920
But JavaScript also provides us

00:01:36.920 --> 00:01:39.080
with some shorter ways of doing this,

00:01:39.080 --> 00:01:41.810
rather than adding the number 1 on the number 2 variables

00:01:41.810 --> 00:01:44.930
together and then assigning this to a variable.

00:01:44.930 --> 00:01:46.915
We can instead do it like this.

00:01:46.915 --> 00:01:48.470
We can remove our comment out

00:01:48.470 --> 00:01:50.630
this line with the two forward slashes.

00:01:50.630 --> 00:01:54.110
Also, if you are using Visual Studio Code on a Mac,

00:01:54.110 --> 00:01:56.120
you can use command and forward slash.

00:01:56.120 --> 00:01:58.475
This will toggle this automatically.

00:01:58.475 --> 00:02:00.080
If you're using Windows, this will

00:02:00.080 --> 00:02:01.880
be control with forward slash.

00:02:01.880 --> 00:02:03.845
This will do exactly the same.

00:02:03.845 --> 00:02:05.840
Instead a short option.

00:02:05.840 --> 00:02:07.565
If you wanted to amend

00:02:07.565 --> 00:02:10.325
the number 1 variable or update this,

00:02:10.325 --> 00:02:13.449
we can use the plus equals operator

00:02:13.449 --> 00:02:16.065
and then pass in number 2.

00:02:16.065 --> 00:02:17.855
What this will do, it will add

00:02:17.855 --> 00:02:19.625
both of these numbers together

00:02:19.625 --> 00:02:23.455
and assign a new value to the variable over on the left.

00:02:23.455 --> 00:02:25.310
Both of these same lines will still

00:02:25.310 --> 00:02:27.485
come with the same result of 20.

00:02:27.485 --> 00:02:29.150
The difference being the top one is

00:02:29.150 --> 00:02:31.100
being stored inside a new variable,

00:02:31.100 --> 00:02:34.550
and the bottom one is updating this existing one.

00:02:34.550 --> 00:02:38.095
We can check this by updating this to be number one.

00:02:38.095 --> 00:02:42.670
"Save" and "Refresh". We still see the same value of 20.

00:02:42.670 --> 00:02:45.320
Also up at the top with our variables,

00:02:45.320 --> 00:02:47.750
we have this forename and the surname.

00:02:47.750 --> 00:02:50.570
If we wanted to display the full name on the screen,

00:02:50.570 --> 00:02:52.975
we may come up with something like this.

00:02:52.975 --> 00:02:57.020
First of all, we could set the forename and then using

00:02:57.020 --> 00:02:59.240
Command or Control C to copy

00:02:59.240 --> 00:03:02.075
and then Command or Control V to paste.

00:03:02.075 --> 00:03:05.860
We can then also output the value of surname.

00:03:05.860 --> 00:03:07.980
"Save" this, and over to

00:03:07.980 --> 00:03:11.600
the browser we only see the value of our surname.

00:03:11.600 --> 00:03:14.555
This approach doesn't work because the surname is

00:03:14.555 --> 00:03:18.745
last known code and therefore it overrides the forename.

00:03:18.745 --> 00:03:21.170
Instead, what we can do is make use of

00:03:21.170 --> 00:03:23.960
the plus equals operator to add this

00:03:23.960 --> 00:03:27.580
to our elements rather than replace the existing one.

00:03:27.580 --> 00:03:29.905
If we "Save" this and "Refresh",

00:03:29.905 --> 00:03:32.705
we see the value of both of our variables.

00:03:32.705 --> 00:03:35.660
We could also add an empty space between each one of

00:03:35.660 --> 00:03:37.130
these words using some of

00:03:37.130 --> 00:03:39.380
the techniques which we've used in the past,

00:03:39.380 --> 00:03:42.680
pass in an empty string with a space.

00:03:42.680 --> 00:03:44.750
Then the plus operator to add

00:03:44.750 --> 00:03:47.095
this just before our surname.

00:03:47.095 --> 00:03:49.400
"Save" this file. Now we have a space

00:03:49.400 --> 00:03:51.710
between our two variable names.

00:03:51.710 --> 00:03:55.655
This is adding values and then reassigning the new value.

00:03:55.655 --> 00:03:59.200
But we can also do the opposite with subtraction.

00:03:59.200 --> 00:04:01.380
We can see it is just up here.

00:04:01.380 --> 00:04:02.560
This works exactly the same,

00:04:02.560 --> 00:04:06.400
but we use the negative symbol rather than the plus.

00:04:06.400 --> 00:04:08.740
We can use this with our number example from

00:04:08.740 --> 00:04:12.095
below by doing the opposite with a subtraction.

00:04:12.095 --> 00:04:15.510
Let's remove this second, getElementByID.

00:04:15.510 --> 00:04:19.540
Replace the forename with the value of number 1.

00:04:20.270 --> 00:04:22.680
"Save" and "Refresh", and we now

00:04:22.680 --> 00:04:25.200
have the new value of 10.

00:04:25.200 --> 00:04:27.730
Just to recap, what we've done here is we've

00:04:27.730 --> 00:04:30.490
taken the number 1, which is 15.

00:04:30.490 --> 00:04:33.670
We've then taken away the value of five to give us 10,

00:04:33.670 --> 00:04:37.190
and the new value of 10 has been reassigned to number 1.

00:04:37.190 --> 00:04:40.530
We also have multiply exactly the same.

00:04:40.530 --> 00:04:42.830
We can change this, "Refresh",

00:04:42.830 --> 00:04:44.770
and we have the value of 75.

00:04:44.770 --> 00:04:46.460
We can also use divide,

00:04:46.460 --> 00:04:48.185
which is the forward slash.

00:04:48.185 --> 00:04:50.750
This is 15 divided by 5,

00:04:50.750 --> 00:04:54.200
which will reassign number 1 to be equal to 3.

00:04:54.200 --> 00:04:57.455
An interesting one is this last one we can see here,

00:04:57.455 --> 00:04:59.635
which is the percent symbol.

00:04:59.635 --> 00:05:01.370
This percent symbol is

00:05:01.370 --> 00:05:04.460
the remainder assignments after the division.

00:05:04.460 --> 00:05:06.170
What this is doing here, we have our number

00:05:06.170 --> 00:05:07.805
1 and our number 2,

00:05:07.805 --> 00:05:11.050
which is a result of 15 divided by 5.

00:05:11.050 --> 00:05:13.655
Five goes into 15 three times

00:05:13.655 --> 00:05:16.100
and therefore there is no remainder.

00:05:16.100 --> 00:05:17.600
If we were to save this,

00:05:17.600 --> 00:05:20.110
there should be a remainder value of zero.

00:05:20.110 --> 00:05:22.520
But what about if we change one of these numbers?

00:05:22.520 --> 00:05:25.310
Let's say four. Four goes into

00:05:25.310 --> 00:05:28.625
15 three times with the remainder of three.

00:05:28.625 --> 00:05:32.090
Another type of operator which we have is comparison.

00:05:32.090 --> 00:05:33.770
Currently we know when we're setting

00:05:33.770 --> 00:05:35.555
variables just like these bonds,

00:05:35.555 --> 00:05:37.715
when we use a single equals,

00:05:37.715 --> 00:05:39.230
we assign the value over on

00:05:39.230 --> 00:05:42.065
the right to the value over on the left.

00:05:42.065 --> 00:05:45.200
Here, number 1 was originally 15,

00:05:45.200 --> 00:05:47.525
and now if we set this equal to number 2,

00:05:47.525 --> 00:05:50.030
it should now be the value of four.

00:05:50.030 --> 00:05:51.830
But sometimes this can look a

00:05:51.830 --> 00:05:53.810
little bit strange for beginners.

00:05:53.810 --> 00:05:57.050
Because if we were to read this as a beginner,

00:05:57.050 --> 00:05:58.940
this may look like we're checking if number

00:05:58.940 --> 00:06:01.270
1 is equal to number 2.

00:06:01.270 --> 00:06:03.000
As we know, this is not the case.

00:06:03.000 --> 00:06:06.000
This will assign number 2 to be equal to number 1.

00:06:06.000 --> 00:06:07.640
But if we did want to compare

00:06:07.640 --> 00:06:09.650
if these two values are the same,

00:06:09.650 --> 00:06:12.460
we do this with the double equals.

00:06:12.460 --> 00:06:14.280
We're going to install this inside of

00:06:14.280 --> 00:06:16.890
our value, let's say results.

00:06:16.890 --> 00:06:22.875
Then output this to the browser, "Save" and "Refresh".

00:06:22.875 --> 00:06:26.000
We see the value is a Boolean of false.

00:06:26.000 --> 00:06:28.520
We know this is false because number 1 is equal to

00:06:28.520 --> 00:06:31.370
15 and number 2 is equal to 4.

00:06:31.370 --> 00:06:33.770
We can also do the exact opposite,

00:06:33.770 --> 00:06:36.950
which is to add an exclamation mark inside of here.

00:06:36.950 --> 00:06:39.845
This will check if the values are not equal.

00:06:39.845 --> 00:06:42.260
You will find this a lot of the times with JavaScript,

00:06:42.260 --> 00:06:43.820
if we use the exclamation mark,

00:06:43.820 --> 00:06:47.315
this will do the opposite of the original case.

00:06:47.315 --> 00:06:49.715
"Save" this, "Refresh".

00:06:49.715 --> 00:06:51.910
The opposite of course, is true.

00:06:51.910 --> 00:06:54.560
Something, however, to watch out for is if we

00:06:54.560 --> 00:06:57.400
are comparing two different data types.

00:06:57.400 --> 00:07:00.800
For example, if both of these were five,

00:07:00.800 --> 00:07:02.930
but one of these fives were surrounded inside of

00:07:02.930 --> 00:07:06.050
the quotations to turn this into a string.

00:07:06.050 --> 00:07:08.240
For this example, it doesn't matter if we're using the

00:07:08.240 --> 00:07:11.155
single or the double quotations.

00:07:11.155 --> 00:07:13.785
It changes back to the equals.

00:07:13.785 --> 00:07:16.655
Let's see what the result is inside the browser.

00:07:16.655 --> 00:07:21.140
If we "Refresh" this, we see this is a value of true.

00:07:21.140 --> 00:07:23.120
Even though we have a string of

00:07:23.120 --> 00:07:25.295
five and a number of five,

00:07:25.295 --> 00:07:26.930
the double equals will only check

00:07:26.930 --> 00:07:29.600
the values and not the data types.

00:07:29.600 --> 00:07:32.030
Number 1 and number 2 is considered to be

00:07:32.030 --> 00:07:35.615
equal even though one is a string and one is a number.

00:07:35.615 --> 00:07:37.850
However, though if we did want to also

00:07:37.850 --> 00:07:39.950
check the value on the data type,

00:07:39.950 --> 00:07:42.890
there is a way we can do this using the triple equals.

00:07:42.890 --> 00:07:45.695
The triple equals means strict equality.

00:07:45.695 --> 00:07:48.330
"Save" this, "Refresh".

00:07:48.330 --> 00:07:50.770
Now since they have different data types,

00:07:50.770 --> 00:07:53.075
this now returns a false value.

00:07:53.075 --> 00:07:56.390
If we are using the strict equality just like this,

00:07:56.390 --> 00:07:59.150
we can also still use the exclamation mark just

00:07:59.150 --> 00:08:02.245
like before to return the exact opposite.

00:08:02.245 --> 00:08:04.350
Change this to an exclamation mark.

00:08:04.350 --> 00:08:06.125
Now if we "Refresh" the browser,

00:08:06.125 --> 00:08:08.800
this is the opposite value of true.

00:08:08.800 --> 00:08:10.670
Comparison like this is often

00:08:10.670 --> 00:08:12.305
combined with if statements,

00:08:12.305 --> 00:08:14.075
which we'll again cover later.

00:08:14.075 --> 00:08:16.490
But some other comparison operators include

00:08:16.490 --> 00:08:19.010
the less than and the greater than symbols,

00:08:19.010 --> 00:08:21.220
which are the left and right arrows.

00:08:21.220 --> 00:08:24.050
We did briefly look at these in a previous video.

00:08:24.050 --> 00:08:25.640
All we need to do is we can

00:08:25.640 --> 00:08:28.655
change our two values to be different.

00:08:28.655 --> 00:08:33.035
Let's first check if number 1 is greater than number 2.

00:08:33.035 --> 00:08:35.000
We know this is true, so we expect to

00:08:35.000 --> 00:08:37.130
see this inside the browser.

00:08:37.130 --> 00:08:40.970
The opposite is the less than symbol,

00:08:40.970 --> 00:08:44.380
which, of course, will return the value of false.

00:08:44.380 --> 00:08:46.610
Finally, the last thing we want to take a look at

00:08:46.610 --> 00:08:48.380
in this video is we can also

00:08:48.380 --> 00:08:50.060
combine these less than and

00:08:50.060 --> 00:08:52.960
greater than symbols with the equals.

00:08:52.960 --> 00:08:58.215
We can check if number 1 is less or equal to number 2.

00:08:58.215 --> 00:09:00.030
This one will be false.

00:09:00.030 --> 00:09:02.930
But we can't change these variables to be the same.

00:09:02.930 --> 00:09:05.030
These are both equal.

00:09:05.030 --> 00:09:07.630
This should be a value of true.

00:09:07.630 --> 00:09:09.845
We also have access to the greater

00:09:09.845 --> 00:09:12.505
or the equal to version as well.

00:09:12.505 --> 00:09:16.145
Operators like these are useful for things such as games,

00:09:16.145 --> 00:09:19.070
where we can check if a player's health is zero or less,

00:09:19.070 --> 00:09:20.765
which will then end the game.

00:09:20.765 --> 00:09:24.005
Next, we'll stick with the subject of operators,

00:09:24.005 --> 00:09:25.220
but this time we'll take a look

00:09:25.220 --> 00:09:28.050
at logical and arithmetic.
