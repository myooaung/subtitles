WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.510 --> 00:00:05.685
In the previous video, the methods we looked at

00:00:05.685 --> 00:00:08.130
all had something in common and

00:00:08.130 --> 00:00:09.340
that was we modified

00:00:09.340 --> 00:00:11.670
the existing array even

00:00:11.670 --> 00:00:13.470
if they did return some in any way,

00:00:13.470 --> 00:00:15.040
like a true or false value,

00:00:15.040 --> 00:00:18.075
the original array was still modified too.

00:00:18.075 --> 00:00:19.620
This video is going to

00:00:19.620 --> 00:00:21.645
continue with some more array methods,

00:00:21.645 --> 00:00:23.325
but the difference is this time,

00:00:23.325 --> 00:00:25.680
the original array will stay intact,

00:00:25.680 --> 00:00:28.620
and something new will be created or returned.

00:00:28.620 --> 00:00:31.395
An example of this is something we've already used,

00:00:31.395 --> 00:00:33.285
which is the includes method.

00:00:33.285 --> 00:00:35.790
Includes will return a true or false

00:00:35.790 --> 00:00:38.760
if a particular value is included in the array;

00:00:38.760 --> 00:00:42.330
therefore, it doesn't modify the original array.

00:00:42.330 --> 00:00:44.720
We also have the join method, too,

00:00:44.720 --> 00:00:46.490
which takes our array values and

00:00:46.490 --> 00:00:49.505
joins them together as a string.

00:00:49.505 --> 00:00:51.440
Inside of our project,

00:00:51.440 --> 00:00:53.630
in the Returning New Values file,

00:00:53.630 --> 00:00:56.680
down to the script, we have this example just here.

00:00:56.680 --> 00:00:59.070
This is an example of includes.

00:00:59.070 --> 00:01:01.760
We're checking if this pizza array includes any dough.

00:01:01.760 --> 00:01:04.970
If it does, this will be returned value of true;

00:01:04.970 --> 00:01:07.105
if not, it will be false.

00:01:07.105 --> 00:01:09.060
We then output two values.

00:01:09.060 --> 00:01:11.610
The first one is the pizza array; and therefore,

00:01:11.610 --> 00:01:12.840
we can check if this has been

00:01:12.840 --> 00:01:14.910
modified and then isIncluded,

00:01:14.910 --> 00:01:17.010
which is the return value.

00:01:17.010 --> 00:01:20.500
Save this, and open this up inside the browser.

00:01:20.500 --> 00:01:22.080
Refresh, and we can see

00:01:22.080 --> 00:01:24.555
the original array is still unmodified,

00:01:24.555 --> 00:01:27.120
and then we get the value of true.

00:01:27.120 --> 00:01:29.430
As you would expect, if we were to change

00:01:29.430 --> 00:01:31.265
this to be something else,

00:01:31.265 --> 00:01:34.430
this would then be the value of false.

00:01:34.430 --> 00:01:36.830
We can see this includes method

00:01:36.830 --> 00:01:38.210
will leave the original array

00:01:38.210 --> 00:01:41.485
intact as does the join method too.

00:01:41.485 --> 00:01:43.760
Join will also leave the original array as

00:01:43.760 --> 00:01:45.740
it was and returns back a new

00:01:45.740 --> 00:01:47.180
string containing all of

00:01:47.180 --> 00:01:50.240
the array values separated by a comma.

00:01:50.240 --> 00:01:52.610
Let's comment out this line just here,

00:01:52.610 --> 00:01:55.555
set up a second constant called string,

00:01:55.555 --> 00:01:58.570
and this is going to be equal to pizza.join,

00:01:59.470 --> 00:02:02.990
which is going to grab all of the values inside of

00:02:02.990 --> 00:02:06.650
our array and join them together as a single string.

00:02:06.650 --> 00:02:09.260
Change this value to be string,

00:02:09.260 --> 00:02:14.365
refresh, and there's our new string separated by commas.

00:02:14.365 --> 00:02:16.040
If we didn't want to use commas,

00:02:16.040 --> 00:02:17.750
if we wanted a different character

00:02:17.750 --> 00:02:19.400
to separate these values,

00:02:19.400 --> 00:02:22.100
all we need to do is to pass in a new character as

00:02:22.100 --> 00:02:25.115
a string inside of this join method.

00:02:25.115 --> 00:02:27.380
For example, if we wanted a dash,

00:02:27.380 --> 00:02:29.840
we could use this and

00:02:29.840 --> 00:02:31.490
also just like with any other string,

00:02:31.490 --> 00:02:33.140
we could also add spaces inside of

00:02:33.140 --> 00:02:37.050
here to add some space around each one of these words.

00:02:37.610 --> 00:02:39.620
Next up, we're going to work with

00:02:39.620 --> 00:02:41.470
the array's index position.

00:02:41.470 --> 00:02:44.300
Since array values are stored numerically,

00:02:44.300 --> 00:02:46.130
we often need to access a value

00:02:46.130 --> 00:02:48.205
in a certain index number,

00:02:48.205 --> 00:02:50.060
but if we don't know the exact

00:02:50.060 --> 00:02:51.620
index number to begin with,

00:02:51.620 --> 00:02:55.465
we can use a method called indexOf to find this for us.

00:02:55.465 --> 00:02:57.150
In this first example,

00:02:57.150 --> 00:03:00.570
we pass indexOf the string value of source,

00:03:00.570 --> 00:03:02.805
then we get back the index number,

00:03:02.805 --> 00:03:05.130
and since arrays begin at position 0,

00:03:05.130 --> 00:03:07.380
sauce is position 1.

00:03:07.380 --> 00:03:10.545
The second example shows lastIndexOf,

00:03:10.545 --> 00:03:12.060
and it may sound like this is for

00:03:12.060 --> 00:03:14.355
selecting the very last array value.

00:03:14.355 --> 00:03:18.140
However, it's to find the last occurrence of a value.

00:03:18.140 --> 00:03:21.440
This array has the value of dough place inside twice,

00:03:21.440 --> 00:03:24.110
so it looks for the last occurrence of this word,

00:03:24.110 --> 00:03:26.965
which is index position 3.

00:03:26.965 --> 00:03:30.920
Back to our editor, let's take a look at some examples.

00:03:30.920 --> 00:03:33.740
We can remove this string and this time,

00:03:33.740 --> 00:03:34.760
we're going to search for

00:03:34.760 --> 00:03:37.735
the index number of a particular item.

00:03:37.735 --> 00:03:40.550
For example, if we were looking for the sauce

00:03:40.550 --> 00:03:42.935
if this was a really long array,

00:03:42.935 --> 00:03:46.190
we wanted to find exactly what position this was at.

00:03:46.190 --> 00:03:48.950
For this, we can set our constant

00:03:48.950 --> 00:03:53.170
equal to pizza.indexOf,

00:03:53.170 --> 00:03:57.635
and then find the index number by the name of sauce,

00:03:57.635 --> 00:04:01.105
and this would then be stored inside of this constant,

00:04:01.105 --> 00:04:05.875
pass this into our console log and save, refresh.

00:04:05.875 --> 00:04:08.725
As we know, this is the index number of 1.

00:04:08.725 --> 00:04:11.420
We can go for cheese,

00:04:12.170 --> 00:04:15.135
and this will also be updated,

00:04:15.135 --> 00:04:17.040
and then once we have the index number

00:04:17.040 --> 00:04:18.460
of any array value,

00:04:18.460 --> 00:04:20.020
we can then do anything we want with it,

00:04:20.020 --> 00:04:21.070
such as selecting it,

00:04:21.070 --> 00:04:24.830
we can remove it, and also even replace it too.

00:04:24.830 --> 00:04:27.270
Next, we have lastIndexOf.

00:04:27.270 --> 00:04:30.575
Make sure the I and the O is capital letters.

00:04:30.575 --> 00:04:32.560
Remember, as mentioned with the slides,

00:04:32.560 --> 00:04:35.635
this doesn't find the last index value of our array,

00:04:35.635 --> 00:04:37.690
instead it will find the last occurrence

00:04:37.690 --> 00:04:39.520
of a particular value.

00:04:39.520 --> 00:04:41.080
By this, it would mean if

00:04:41.080 --> 00:04:43.235
the word cheese was placed in twice,

00:04:43.235 --> 00:04:46.970
so let's also add cheese at the beginning of our array.

00:04:46.970 --> 00:04:50.050
We now have two occurrences of the same value.

00:04:50.050 --> 00:04:51.710
lastIndexOf will

00:04:51.710 --> 00:04:54.025
return the last occurrence of this word,

00:04:54.025 --> 00:04:56.320
so rather than this being position 0,

00:04:56.320 --> 00:05:00.630
it will return index number 3. Let's check this out.

00:05:00.630 --> 00:05:03.870
Refresh, and there's our value of three.

00:05:03.870 --> 00:05:07.780
If this was moved to just before our sauce,

00:05:08.270 --> 00:05:12.440
the last occurrence would now be index number 2.

00:05:12.440 --> 00:05:14.405
Also, for this one,

00:05:14.405 --> 00:05:17.300
the lastIndexOf and also the indexOf,

00:05:17.300 --> 00:05:19.790
if it doesn't find any matching values,

00:05:19.790 --> 00:05:22.535
it will return a value of negative 1,

00:05:22.535 --> 00:05:24.470
so if we change this to be a value

00:05:24.470 --> 00:05:26.030
which is not in the array,

00:05:26.030 --> 00:05:29.510
the returned value would be negative 1.

00:05:30.920 --> 00:05:33.820
The last two methods we're going to look at is going

00:05:33.820 --> 00:05:36.205
to be slice and concat.

00:05:36.205 --> 00:05:40.015
Slice is a way to slice out some value from the array,

00:05:40.015 --> 00:05:42.130
and this example shows passing into

00:05:42.130 --> 00:05:44.660
values which is 1 and 2.

00:05:44.660 --> 00:05:48.090
The first value of 1 is the starting position,

00:05:48.090 --> 00:05:51.005
and for this example, this would be our sauce.

00:05:51.005 --> 00:05:54.630
The second value of 2 is the optional end position,

00:05:54.630 --> 00:05:56.710
so it will slice all values up

00:05:56.710 --> 00:05:59.290
to but not including this position,

00:05:59.290 --> 00:06:02.855
so this results in only the value of sauce being sliced.

00:06:02.855 --> 00:06:05.865
If the n value was number 3 instead of 2,

00:06:05.865 --> 00:06:09.090
it would slice out both the sauce and the cheese.

00:06:09.090 --> 00:06:11.330
The second example is concat,

00:06:11.330 --> 00:06:14.930
and this joins together the values of two or more arrays.

00:06:14.930 --> 00:06:18.800
We have the pizza array and also some optional extras.

00:06:18.800 --> 00:06:21.830
If we wanted to combine these into one single array,

00:06:21.830 --> 00:06:24.845
we'll call one of these arrays such as the pizza,

00:06:24.845 --> 00:06:26.645
we add the concat method,

00:06:26.645 --> 00:06:29.180
then we'll pass in the extras array to join all of

00:06:29.180 --> 00:06:32.760
the values into one single array.

00:06:32.950 --> 00:06:36.380
Let's take a look at these over in our project folder.

00:06:36.380 --> 00:06:38.915
We can remove the lastIndexOf,

00:06:38.915 --> 00:06:41.630
and take a look at how slice works.

00:06:41.630 --> 00:06:46.620
We'll access our pizza.slice and inside of here,

00:06:46.620 --> 00:06:48.815
if we only add one value just like this,

00:06:48.815 --> 00:06:51.680
this would be the starting position; so therefore,

00:06:51.680 --> 00:06:54.230
this would slice all of the values out of the array

00:06:54.230 --> 00:06:57.790
from position 1 right to the end of the array.

00:06:57.790 --> 00:07:01.050
We can store this inside of a variable,

00:07:02.300 --> 00:07:05.325
then log this to the console, initiate slice.

00:07:05.325 --> 00:07:07.050
All of the values from index number

00:07:07.050 --> 00:07:09.735
1 right through to the end of the array.

00:07:09.735 --> 00:07:12.390
We have dough, cheese, and sauce.

00:07:12.390 --> 00:07:15.345
Refresh, and there we go.

00:07:15.345 --> 00:07:17.660
As with all of the methods in this video,

00:07:17.660 --> 00:07:20.465
we still see that the original array is still intact.

00:07:20.465 --> 00:07:22.070
Instead, we can return back

00:07:22.070 --> 00:07:25.300
a new array with these slice values.

00:07:25.300 --> 00:07:28.205
Also, just as we've seen inside of these slides,

00:07:28.205 --> 00:07:31.210
we can pass in a optional end position.

00:07:31.210 --> 00:07:34.290
This will start our index number 1 and end

00:07:34.290 --> 00:07:36.935
our position at number 3, but remember,

00:07:36.935 --> 00:07:39.710
this third and final value will not be included,

00:07:39.710 --> 00:07:43.290
so this should only return the dough and the cheese,

00:07:43.490 --> 00:07:46.650
and this is what we see in the console.

00:07:46.650 --> 00:07:48.710
In these last few videos, we've looked at

00:07:48.710 --> 00:07:50.330
the slice method and

00:07:50.330 --> 00:07:53.060
also a similar one, which was splice.

00:07:53.060 --> 00:07:55.070
On the surface, both of these methods

00:07:55.070 --> 00:07:56.330
do look pretty similar,

00:07:56.330 --> 00:07:58.430
but the difference is splice removes

00:07:58.430 --> 00:08:00.515
or adds to the original array,

00:08:00.515 --> 00:08:03.260
and the splice method keeps the original array

00:08:03.260 --> 00:08:05.060
intact and instead returns

00:08:05.060 --> 00:08:07.510
a new one with the selected values.

00:08:07.510 --> 00:08:09.230
The use case of both of these

00:08:09.230 --> 00:08:10.490
depends on if we want to keep

00:08:10.490 --> 00:08:13.610
the original array or if we want to modify it.

00:08:13.610 --> 00:08:17.095
Finally, we're going to look at the concat method.

00:08:17.095 --> 00:08:20.060
To do this, as we've seen inside the slides,

00:08:20.060 --> 00:08:22.655
we need a second array to merge in.

00:08:22.655 --> 00:08:25.715
This would create a second array called extras,

00:08:25.715 --> 00:08:28.550
which will contain some additional toppings.

00:08:28.550 --> 00:08:32.940
Let's add in some peppers and also some onions.

00:08:32.940 --> 00:08:36.675
We can then comment out the value from before.

00:08:36.675 --> 00:08:39.375
Create our newPizza,

00:08:39.375 --> 00:08:41.690
and the newPizza is going to be equal

00:08:41.690 --> 00:08:44.495
to both of these arrays merged together.

00:08:44.495 --> 00:08:46.760
To do this, we'll first access one of

00:08:46.760 --> 00:08:48.980
our arrays, such as pizza,

00:08:48.980 --> 00:08:52.000
we then call the method which was concat,

00:08:52.000 --> 00:08:54.945
and then merge in the extras.

00:08:54.945 --> 00:08:57.450
Save and over to the browser.

00:08:57.450 --> 00:09:01.810
Oops, we just need to log the new pizza.

00:09:02.150 --> 00:09:04.875
Refresh, and into the console,

00:09:04.875 --> 00:09:07.460
and like with all of the methods in this video,

00:09:07.460 --> 00:09:09.545
the original array stays intact.

00:09:09.545 --> 00:09:11.490
We're logging the pizza just here.

00:09:11.490 --> 00:09:14.495
We have a newly returned newPizza array,

00:09:14.495 --> 00:09:15.830
which is a combination of

00:09:15.830 --> 00:09:19.860
the pizza array and also the extras too.
