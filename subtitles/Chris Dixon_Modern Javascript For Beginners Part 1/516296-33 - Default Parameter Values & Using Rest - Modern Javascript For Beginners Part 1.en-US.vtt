WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.970 --> 00:00:04.590
This video is going to be focusing on

00:00:04.590 --> 00:00:06.030
function parameters and

00:00:06.030 --> 00:00:07.980
a few useful tricks when using them,

00:00:07.980 --> 00:00:09.450
which were made available with

00:00:09.450 --> 00:00:12.075
the introduction of ES 2015.

00:00:12.075 --> 00:00:14.610
Remember a parameter is a placeholder for

00:00:14.610 --> 00:00:17.730
the value we are going to be passing into a function,

00:00:17.730 --> 00:00:20.385
and you can think of this like a variable.

00:00:20.385 --> 00:00:21.780
First, we want to take a look at

00:00:21.780 --> 00:00:23.940
default parameter values,

00:00:23.940 --> 00:00:25.710
and to see this will create

00:00:25.710 --> 00:00:26.940
a new function which is going to

00:00:26.940 --> 00:00:28.560
take in a currency amount,

00:00:28.560 --> 00:00:30.720
a currency symbol, and then return

00:00:30.720 --> 00:00:34.180
a new string to display the price back to the user.

00:00:34.180 --> 00:00:36.495
Into this lesson's folder,

00:00:36.495 --> 00:00:38.355
which is default parameter values,

00:00:38.355 --> 00:00:39.870
and using Rest,

00:00:39.870 --> 00:00:42.685
we have an empty script tag down at the bottom,

00:00:42.685 --> 00:00:44.780
where we can create our function,

00:00:44.780 --> 00:00:47.225
which I'm going to call format money.

00:00:47.225 --> 00:00:48.710
This is going to take the end,

00:00:48.710 --> 00:00:52.115
of the amount which we need to format and also

00:00:52.115 --> 00:00:56.285
the currency to the function body.

00:00:56.285 --> 00:00:59.150
This is simply going to return a new string.

00:00:59.150 --> 00:01:02.750
Since we need to access both of these variables,

00:01:02.750 --> 00:01:05.870
we can place this inside of the backticks and

00:01:05.870 --> 00:01:07.610
use the $ symbol and the curly braces

00:01:07.610 --> 00:01:09.110
to insert a variable.

00:01:09.110 --> 00:01:13.360
First, the currency and the amount.

00:01:13.360 --> 00:01:15.815
The string which will be returned will look

00:01:15.815 --> 00:01:18.160
something just like this.

00:01:18.160 --> 00:01:20.990
All function name just below the name then it's

00:01:20.990 --> 00:01:24.205
passing the amount and also the currency.

00:01:24.205 --> 00:01:29.450
Let's go for 100 and the currency symbol as a string and

00:01:29.450 --> 00:01:30.710
store this inside of

00:01:30.710 --> 00:01:35.060
a variable. Like this to the console.

00:01:35.060 --> 00:01:37.970
Save this and we would expect back the value of

00:01:37.970 --> 00:01:41.600
100 with the $ symbol just in front.

00:01:41.600 --> 00:01:44.660
We could also go one further too by

00:01:44.660 --> 00:01:47.510
changing the price to be two decimal places.

00:01:47.510 --> 00:01:50.270
We can do this using a JavaScript Number method

00:01:50.270 --> 00:01:51.965
called toFixed.

00:01:51.965 --> 00:01:53.900
Just after the amount we can pass in it

00:01:53.900 --> 00:01:55.805
toFixed and then set this to be

00:01:55.805 --> 00:02:00.015
two decimal places. There we go.

00:02:00.015 --> 00:02:02.270
What about if we had a site which only

00:02:02.270 --> 00:02:04.310
had one single currency?

00:02:04.310 --> 00:02:06.140
Well, for this, rather than passing

00:02:06.140 --> 00:02:08.210
in the second value every time,

00:02:08.210 --> 00:02:09.470
we could instead pass in

00:02:09.470 --> 00:02:13.490
a default parameter so up to our parameters,

00:02:13.490 --> 00:02:16.850
we can set this equal to our default string.

00:02:16.850 --> 00:02:20.495
Now we could either lay this off or instead,

00:02:20.495 --> 00:02:21.920
we want to override this.

00:02:21.920 --> 00:02:24.335
We could change this to be a different value,

00:02:24.335 --> 00:02:28.965
so this would override the default just like that.

00:02:28.965 --> 00:02:30.980
Also if we remove this,

00:02:30.980 --> 00:02:34.355
it would then revert back to our default $ symbol.

00:02:34.355 --> 00:02:37.160
This also works exactly the same if you wanted to

00:02:37.160 --> 00:02:40.340
store our default inside of a variable.

00:02:40.340 --> 00:02:44.570
Create a constant at the top called currency symbol

00:02:45.230 --> 00:02:49.170
and set this equal to our default.

00:02:49.170 --> 00:02:51.660
Variables also work inside of

00:02:51.660 --> 00:02:53.510
here we could set this equal to

00:02:53.510 --> 00:02:58.425
our variable name of currency symbol. Save this.

00:02:58.425 --> 00:03:01.990
Refresh. We now see the default of our $ symbol,

00:03:01.990 --> 00:03:05.155
even though we've not passed this in as an argument.

00:03:05.155 --> 00:03:06.950
So this kind of approach would be really

00:03:06.950 --> 00:03:08.300
useful if you wanted to keep

00:03:08.300 --> 00:03:10.695
a single central value which we

00:03:10.695 --> 00:03:13.460
wanted to use in different areas of our site.

00:03:13.460 --> 00:03:15.140
Next, we're going to take a look at how we can

00:03:15.140 --> 00:03:16.925
use the Rest operator.

00:03:16.925 --> 00:03:19.490
The Rest operator gives us an easy way to deal with

00:03:19.490 --> 00:03:21.020
a function which is going to

00:03:21.020 --> 00:03:23.285
have lots of different parameters.

00:03:23.285 --> 00:03:24.740
Here, we only have two,

00:03:24.740 --> 00:03:26.795
so this is not too hard to manage.

00:03:26.795 --> 00:03:29.179
But imagine if we had a lot more parameters

00:03:29.179 --> 00:03:30.800
which we wanted to include,

00:03:30.800 --> 00:03:32.490
with this we can write a new function,

00:03:32.490 --> 00:03:35.305
so let's comment out all this existing code

00:03:35.305 --> 00:03:37.940
and then we'll create a new function down at the bottom,

00:03:37.940 --> 00:03:39.710
which is going to be responsible for

00:03:39.710 --> 00:03:41.530
calculating an average age,

00:03:41.530 --> 00:03:43.370
so the function keyword,

00:03:43.370 --> 00:03:46.800
the name of average age,

00:03:46.840 --> 00:03:50.670
and below call it by the function name.

00:03:50.800 --> 00:03:53.780
We could also pass in lots of different numbers,

00:03:53.780 --> 00:03:57.065
which is the ages of all of our different users.

00:03:57.065 --> 00:04:00.070
Passing lots of different arguments.

00:04:00.070 --> 00:04:02.870
With all of these arguments being passed to the function,

00:04:02.870 --> 00:04:04.610
it wouldn't make sense to create

00:04:04.610 --> 00:04:07.850
a new parameter name for each one of these values.

00:04:07.850 --> 00:04:09.830
Instead, it will be useful if we could just pass in

00:04:09.830 --> 00:04:12.680
one single value and to handle this,

00:04:12.680 --> 00:04:14.855
we have the rest operator.

00:04:14.855 --> 00:04:17.675
So what we can do is use the three dots.

00:04:17.675 --> 00:04:20.150
Personnel parameter name and this is basically

00:04:20.150 --> 00:04:22.370
like a variable with the three dots

00:04:22.370 --> 00:04:24.440
placed before we can now

00:04:24.440 --> 00:04:27.215
access our ages inside of the function.

00:04:27.215 --> 00:04:30.335
Let's try this inside of a console log,

00:04:30.335 --> 00:04:32.870
refresh, and we now have

00:04:32.870 --> 00:04:35.590
six values stored inside of an array.

00:04:35.590 --> 00:04:37.820
This is really useful if we don't want to create

00:04:37.820 --> 00:04:40.520
a new variable name for each one of the values.

00:04:40.520 --> 00:04:42.995
Or if we didn't know exactly how many values

00:04:42.995 --> 00:04:45.710
was going to be passed to this function.

00:04:45.710 --> 00:04:48.050
Going back to the purpose of our function,

00:04:48.050 --> 00:04:49.490
which is the average age,

00:04:49.490 --> 00:04:52.310
we can now use this ages array to calculate

00:04:52.310 --> 00:04:54.045
this by using a method which you've

00:04:54.045 --> 00:04:56.425
looked at in the past called reduced.

00:04:56.425 --> 00:04:58.770
So remove this console log,

00:04:58.770 --> 00:05:00.865
access our age is variable,

00:05:00.865 --> 00:05:02.990
and then call the reduced method.

00:05:02.990 --> 00:05:05.690
Remember in the previous video which we looked at this,

00:05:05.690 --> 00:05:07.790
this takes in two different things.

00:05:07.790 --> 00:05:10.145
We want to create this as an arrow function.

00:05:10.145 --> 00:05:12.455
This will take in the total and

00:05:12.455 --> 00:05:17.255
also the current value that's our arrow,

00:05:17.255 --> 00:05:19.880
which is going to add together both of these values

00:05:19.880 --> 00:05:22.720
so the current will say total.

00:05:22.720 --> 00:05:26.250
Then we can solve this inside of a variable.

00:05:26.990 --> 00:05:30.050
This is going to loop through each one of the values

00:05:30.050 --> 00:05:32.480
inside of ages which is these ones just here.

00:05:32.480 --> 00:05:34.010
It's going to select

00:05:34.010 --> 00:05:35.465
the current value and then

00:05:35.465 --> 00:05:37.190
add this to the previous total.

00:05:37.190 --> 00:05:38.900
Make sure that all of these values are

00:05:38.900 --> 00:05:41.140
combined into one single number.

00:05:41.140 --> 00:05:44.120
Now what we need to do is to take this total and

00:05:44.120 --> 00:05:47.435
divide it by the number of entries inside of the array,

00:05:47.435 --> 00:05:50.150
will return this back from the function.

00:05:50.150 --> 00:05:52.430
The total of all the numbers added

00:05:52.430 --> 00:05:55.930
together divided by the length of the array.

00:05:55.930 --> 00:05:58.440
How do we get the length of the array?

00:05:58.440 --> 00:06:01.700
Well, we do this with the length property,

00:06:01.700 --> 00:06:04.625
which in our case is the value of six.

00:06:04.625 --> 00:06:07.205
Since this function is returning a value,

00:06:07.205 --> 00:06:10.190
we can also store this inside of a variable.

00:06:10.190 --> 00:06:12.440
Let's call this the average.

00:06:12.440 --> 00:06:15.260
Set this equal to the return value,

00:06:15.260 --> 00:06:18.480
and then display this inside the logs.

00:06:19.250 --> 00:06:22.845
Save this, refresh,

00:06:22.845 --> 00:06:26.290
and the average of all of our numbers is 43.

00:06:26.290 --> 00:06:28.430
This is how the Rest parameter works by

00:06:28.430 --> 00:06:31.520
selecting all of the values which is passed to it.

00:06:31.520 --> 00:06:34.430
But if we didn't want to capture all of these values,

00:06:34.430 --> 00:06:36.200
let's say for example if we wanted

00:06:36.200 --> 00:06:39.080
a separate variable for the very first value,

00:06:39.080 --> 00:06:41.060
we could insert the first parameter just like

00:06:41.060 --> 00:06:43.490
this and then the value of ages would

00:06:43.490 --> 00:06:45.680
be all of the remaining values from

00:06:45.680 --> 00:06:48.470
45 to the end of the array.

00:06:48.470 --> 00:06:52.145
You could go even further and store multiple items,

00:06:52.145 --> 00:06:54.140
such as the second value,

00:06:54.140 --> 00:06:56.810
but always remember the rest parameter must be last,

00:06:56.810 --> 00:06:57.890
since as it sounds,

00:06:57.890 --> 00:07:01.010
it collects all of the rest of the remaining values.

00:07:01.010 --> 00:07:03.305
These three dots may also look familiar from

00:07:03.305 --> 00:07:06.860
earlier when we looked at the structure in arrays.

00:07:06.860 --> 00:07:09.430
This example is what we looked at earlier

00:07:09.430 --> 00:07:12.155
and this is an example of using spread.

00:07:12.155 --> 00:07:13.790
Rest and spread are very

00:07:13.790 --> 00:07:16.015
similar and both have three dots.

00:07:16.015 --> 00:07:17.420
Spread means we can take

00:07:17.420 --> 00:07:19.190
something which we can loop over,

00:07:19.190 --> 00:07:21.350
such as this array of posts,

00:07:21.350 --> 00:07:22.490
and we can pull out values and

00:07:22.490 --> 00:07:24.530
spread them into something else.

00:07:24.530 --> 00:07:26.300
For example, they can be spreading into

00:07:26.300 --> 00:07:29.740
a new object or array to copy over the values,

00:07:29.740 --> 00:07:32.545
this makes it useful for things like duplicating

00:07:32.545 --> 00:07:34.430
arrays or just generally

00:07:34.430 --> 00:07:37.055
grabbing in values and copying them over.

00:07:37.055 --> 00:07:39.050
Then we have the Rest parameter which

00:07:39.050 --> 00:07:40.790
we've just looked at and this makes

00:07:40.790 --> 00:07:42.800
bundling all of the argument values

00:07:42.800 --> 00:07:46.640
together into one single array value really easy.

00:07:46.640 --> 00:07:48.350
Then below this will have the default

00:07:48.350 --> 00:07:50.240
parameters and this default is

00:07:50.240 --> 00:07:54.305
created by setting a value such as a number or a string.

00:07:54.305 --> 00:07:56.780
Remember it all, this is just the default value

00:07:56.780 --> 00:07:59.285
and if we provide a value when we call a function,

00:07:59.285 --> 00:08:01.920
this will be then used instead.
