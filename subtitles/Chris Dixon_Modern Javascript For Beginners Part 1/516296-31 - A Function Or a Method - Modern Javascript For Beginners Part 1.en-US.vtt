WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.210 --> 00:00:04.230
JavaScript has a lot of

00:00:04.230 --> 00:00:07.290
terminology which can take a while to get used to,

00:00:07.290 --> 00:00:09.390
such as the function expressions

00:00:09.390 --> 00:00:10.965
and function declarations,

00:00:10.965 --> 00:00:13.560
which we've looked at during this section.

00:00:13.560 --> 00:00:15.960
Something else we use quite a lot is

00:00:15.960 --> 00:00:18.810
the words of function and also method.

00:00:18.810 --> 00:00:21.840
They can appear to be the same and they pretty much are,

00:00:21.840 --> 00:00:24.060
but there is a key difference.

00:00:24.060 --> 00:00:25.785
Over the starter files,

00:00:25.785 --> 00:00:28.395
which is a function or a method.

00:00:28.395 --> 00:00:31.110
Jump down into the Script section.

00:00:31.110 --> 00:00:33.930
This is all familiar from the previous sections,

00:00:33.930 --> 00:00:35.220
we have our two arrays.

00:00:35.220 --> 00:00:37.170
We now have our function to check if

00:00:37.170 --> 00:00:39.945
an ingredient is included in any of these.

00:00:39.945 --> 00:00:41.595
Well, let's also create

00:00:41.595 --> 00:00:43.640
a new function and this one is just

00:00:43.640 --> 00:00:45.515
going to check how many ingredients

00:00:45.515 --> 00:00:47.510
a particular recipe has.

00:00:47.510 --> 00:00:50.730
We'll also need to pass in a recipe.

00:00:51.440 --> 00:00:54.230
Then inside, all we're going to do is to return

00:00:54.230 --> 00:00:57.400
a value which is the length of the recipe.

00:00:57.400 --> 00:01:00.000
We've looked at this length property previously,

00:01:00.000 --> 00:01:01.850
this will tell us how many items

00:01:01.850 --> 00:01:04.175
are stored inside of an array.

00:01:04.175 --> 00:01:07.105
We can test this blow with a console log,

00:01:07.105 --> 00:01:10.360
passing the number of ingredients,

00:01:11.810 --> 00:01:15.345
and then any one of our arrays.

00:01:15.345 --> 00:01:18.790
Save this and open a pre-console.

00:01:19.310 --> 00:01:21.800
We can now see that the bread array

00:01:21.800 --> 00:01:24.380
has four different values.

00:01:24.380 --> 00:01:26.900
But let's say we were creating

00:01:26.900 --> 00:01:29.765
even more functions related to the same array.

00:01:29.765 --> 00:01:31.670
You may have lots more functions to do

00:01:31.670 --> 00:01:34.345
lots of different checks on our recipes.

00:01:34.345 --> 00:01:36.980
If all of these functions were related,

00:01:36.980 --> 00:01:38.300
it would be good to group

00:01:38.300 --> 00:01:40.375
all of these functions together.

00:01:40.375 --> 00:01:42.170
How do you think we group together

00:01:42.170 --> 00:01:43.655
lots of related values?

00:01:43.655 --> 00:01:45.815
Well, for this, we use an object.

00:01:45.815 --> 00:01:48.275
We've looked at objects so far.

00:01:48.275 --> 00:01:51.380
An object we've looked at has been something like this,

00:01:51.380 --> 00:01:53.740
we've had a user,

00:01:53.740 --> 00:01:56.750
moves that this equal to our curly braces.

00:01:56.750 --> 00:01:58.700
But I'm passing the properties which are

00:01:58.700 --> 00:02:00.200
a combination of keys and

00:02:00.200 --> 00:02:05.000
values and each one is separated by a comma.

00:02:05.000 --> 00:02:07.340
Object are not just used for storing

00:02:07.340 --> 00:02:10.010
simple primitive values like our strings here.

00:02:10.010 --> 00:02:13.430
They can also store over object types too.

00:02:13.430 --> 00:02:15.440
We can place in over objects,

00:02:15.440 --> 00:02:19.175
we can place in arrays and also our functions.

00:02:19.175 --> 00:02:21.770
Since these are all related to our recipes,

00:02:21.770 --> 00:02:25.250
we're going to name this object, "checkrecipes".

00:02:25.250 --> 00:02:27.650
Since we currently have two functions,

00:02:27.650 --> 00:02:29.885
we're going to place in it two properties.

00:02:29.885 --> 00:02:33.480
The first one is going to be check allergies,

00:02:33.520 --> 00:02:37.860
and the second one is going to be number of ingredients.

00:02:37.860 --> 00:02:41.370
We also need to pass in a value to these two properties.

00:02:41.370 --> 00:02:45.260
Of this, we can cut and paste our functions as well,

00:02:45.260 --> 00:02:49.810
check allergies as in the just after the first line.

00:02:49.810 --> 00:02:51.440
As with all other properties,

00:02:51.440 --> 00:02:54.170
we then need to separate these with a comma.

00:02:54.170 --> 00:02:55.820
The same for our second function,

00:02:55.820 --> 00:02:57.710
which is number of ingredients.

00:02:57.710 --> 00:03:01.495
Put this out in places just after our name.

00:03:01.495 --> 00:03:03.200
Something else we can also do,

00:03:03.200 --> 00:03:05.600
is to transform these to be anonymous.

00:03:05.600 --> 00:03:07.640
Since we have a property name of

00:03:07.640 --> 00:03:09.725
"checkallergies" and "numberofingredients",

00:03:09.725 --> 00:03:12.410
we have a way to access these functions,

00:03:12.410 --> 00:03:15.905
so we can remove the function names on both of these.

00:03:15.905 --> 00:03:19.340
Now since these two functions are placed on an object,

00:03:19.340 --> 00:03:22.910
they're both now considered methods and now any of

00:03:22.910 --> 00:03:24.740
these methods can now be called from

00:03:24.740 --> 00:03:27.865
the object name, which is "checkrecipes".

00:03:27.865 --> 00:03:30.630
In fact, this should just be a capital R. So now,

00:03:30.630 --> 00:03:32.120
if we go down to

00:03:32.120 --> 00:03:33.890
our console log base in

00:03:33.890 --> 00:03:36.875
the object name, which is "checkRecipes".

00:03:36.875 --> 00:03:38.840
Using the dot notation,

00:03:38.840 --> 00:03:41.120
we can then call any one of these properties,

00:03:41.120 --> 00:03:44.390
so just check allergies or number of ingredients and we

00:03:44.390 --> 00:03:45.410
can also see this with the

00:03:45.410 --> 00:03:47.935
auto-complete inside of the editor.

00:03:47.935 --> 00:03:49.400
Let's go for a number of

00:03:49.400 --> 00:03:51.020
ingredients and just like above,

00:03:51.020 --> 00:03:53.390
we also need to pass in this recipe,

00:03:53.390 --> 00:03:56.060
so the brackets or the parentheses.

00:03:56.060 --> 00:03:58.490
Let's go for bread and then

00:03:58.490 --> 00:04:01.030
scroll up we'll also remove this console log.

00:04:01.030 --> 00:04:03.045
There's no issue it's just there.

00:04:03.045 --> 00:04:05.775
Save this and reload browser,

00:04:05.775 --> 00:04:08.660
and we still get back returned the value before.

00:04:08.660 --> 00:04:11.570
But this time, it's been called as our method from

00:04:11.570 --> 00:04:15.325
the object rather than the original standalone function.

00:04:15.325 --> 00:04:19.490
This is in fact how all methods work in our object types.

00:04:19.490 --> 00:04:21.680
If we take a look just above,

00:04:21.680 --> 00:04:24.550
we've created our two arrays just here,

00:04:24.550 --> 00:04:25.865
and as we already know,

00:04:25.865 --> 00:04:28.405
arrays are a special object type.

00:04:28.405 --> 00:04:30.845
Since both of these are an object,

00:04:30.845 --> 00:04:32.140
this is why we'll also have

00:04:32.140 --> 00:04:34.285
access to these array methods.

00:04:34.285 --> 00:04:35.990
If we go into the console and

00:04:35.990 --> 00:04:39.150
type brownies and then dot,

00:04:39.150 --> 00:04:40.850
just like with any other object,

00:04:40.850 --> 00:04:43.820
we can use this dot notation to access any one of

00:04:43.820 --> 00:04:45.515
the properties or the methods

00:04:45.515 --> 00:04:47.995
which are available on this object.

00:04:47.995 --> 00:04:50.600
This is where all of these come from behind the scenes,

00:04:50.600 --> 00:04:51.920
is exactly the same,

00:04:51.920 --> 00:04:55.010
our array is an object just like this.

00:04:55.010 --> 00:04:57.410
Then we access individual properties or

00:04:57.410 --> 00:05:01.350
methods which we see inside of the browser.

00:05:01.430 --> 00:05:03.530
Back to this object,

00:05:03.530 --> 00:05:05.720
even though we've had two separate functions

00:05:05.720 --> 00:05:07.430
or methods passed inside of here,

00:05:07.430 --> 00:05:11.530
it can also be mixed with any of the datatypes too.

00:05:11.530 --> 00:05:13.835
We can also mix in primitives

00:05:13.835 --> 00:05:16.715
such as the maximum number of recipes,

00:05:16.715 --> 00:05:19.805
and we can store this as a simple primitive value,

00:05:19.805 --> 00:05:22.655
and this technique is a great way to group together lots

00:05:22.655 --> 00:05:26.065
of related information and functionality.

00:05:26.065 --> 00:05:28.580
Just like with the methods, we can also access

00:05:28.580 --> 00:05:31.730
max recipes with this dot notation.

00:05:31.730 --> 00:05:33.860
Since this one doesn't relate to a function,

00:05:33.860 --> 00:05:35.165
we don't need the brackets,

00:05:35.165 --> 00:05:37.480
we'll just call it by the property name.

00:05:37.480 --> 00:05:41.890
Refresh and we now see the value of 1,000.

00:05:41.990 --> 00:05:46.100
We now know that a function placed as a property on

00:05:46.100 --> 00:05:49.789
an object is considered a method in JavaScript.

00:05:49.789 --> 00:05:52.850
Sometimes though, we need these methods to also

00:05:52.850 --> 00:05:56.165
refer to other properties on the same objects.

00:05:56.165 --> 00:05:59.165
For example, we may also have a property called

00:05:59.165 --> 00:06:00.800
"currentRecipes" and this is

00:06:00.800 --> 00:06:02.300
the total number of recipes

00:06:02.300 --> 00:06:04.510
which is currently on our site.

00:06:04.510 --> 00:06:06.635
Then we may also want a method which

00:06:06.635 --> 00:06:09.230
accesses both of these properties and checks that

00:06:09.230 --> 00:06:11.420
we have not exceeded the maximum number of

00:06:11.420 --> 00:06:14.650
recipes before a new one can be uploaded.

00:06:14.650 --> 00:06:16.595
To do this add any property,

00:06:16.595 --> 00:06:20.375
at the bottom of this object will say "recipesLeft",

00:06:20.375 --> 00:06:22.850
and as it sounds we'll calculate the number of

00:06:22.850 --> 00:06:26.700
recipes we still have left at to our site.

00:06:26.720 --> 00:06:29.235
This is relatively straightforward,

00:06:29.235 --> 00:06:30.860
all we need to do is to return

00:06:30.860 --> 00:06:32.765
the value of our max recipes.

00:06:32.765 --> 00:06:35.670
Takeaway the column recipes.

00:06:39.200 --> 00:06:42.390
Now, we can try this out over in the browser.

00:06:42.390 --> 00:06:45.935
Let's log this but this time we'll log the return value

00:06:45.935 --> 00:06:50.280
of recipes left. Save and refresh.

00:06:50.280 --> 00:06:52.520
We've taken straight to the sources tab

00:06:52.520 --> 00:06:54.905
because this will then trigger an error.

00:06:54.905 --> 00:06:57.110
We see that the maximum recipes is

00:06:57.110 --> 00:06:59.390
not defined and in the call stack,

00:06:59.390 --> 00:07:02.170
we can see this has been caused by "recipesLeft".

00:07:02.170 --> 00:07:03.890
The reason this happens, it may

00:07:03.890 --> 00:07:05.450
not be immediately obvious,

00:07:05.450 --> 00:07:06.980
but this is because to access

00:07:06.980 --> 00:07:09.245
other properties on our object,

00:07:09.245 --> 00:07:10.865
such as these two here,

00:07:10.865 --> 00:07:13.795
we also need to use this keyword

00:07:13.795 --> 00:07:17.800
so at this before each one of our property names.

00:07:17.800 --> 00:07:19.790
Now inside the browser,

00:07:19.790 --> 00:07:21.545
if we head into the console,

00:07:21.545 --> 00:07:24.200
this now all works completely fine.

00:07:24.200 --> 00:07:26.510
Obviously, you may want to know what the value

00:07:26.510 --> 00:07:28.040
of this even points to.

00:07:28.040 --> 00:07:30.380
Well, let's go over to our object and take

00:07:30.380 --> 00:07:33.860
a look into this function based on

00:07:33.860 --> 00:07:36.110
a console log and we can output the value of

00:07:36.110 --> 00:07:40.575
this, save and refresh.

00:07:40.575 --> 00:07:42.365
We can see these points to

00:07:42.365 --> 00:07:44.150
our current object and it has all of

00:07:44.150 --> 00:07:45.980
the available properties which

00:07:45.980 --> 00:07:48.520
we've just created inside of here.

00:07:48.520 --> 00:07:51.485
This keyword can be a really complex thing to

00:07:51.485 --> 00:07:54.410
understand but in this current context,

00:07:54.410 --> 00:07:56.540
this keyword will point to any one of

00:07:56.540 --> 00:07:59.695
the properties available on this current object.

00:07:59.695 --> 00:08:01.340
There will be more information on this

00:08:01.340 --> 00:08:03.320
as we progress through the course.

00:08:03.320 --> 00:08:05.900
Next, we're going to take a look at the arrow function,

00:08:05.900 --> 00:08:07.940
which we briefly looked at previously,

00:08:07.940 --> 00:08:09.470
and how it also acts differently

00:08:09.470 --> 00:08:12.060
to inside of this object.
