WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.060 --> 00:00:05.490
For this video, jump into lesson number 11,

00:00:05.490 --> 00:00:08.895
which is the introduction to arrays and object types.

00:00:08.895 --> 00:00:11.625
Also open this up inside the browser.

00:00:11.625 --> 00:00:14.070
In JavaScript, there are two groups

00:00:14.070 --> 00:00:16.260
we can place our types into.

00:00:16.260 --> 00:00:19.425
It is both primitive and object types.

00:00:19.425 --> 00:00:21.690
The previous data types which we've looked at

00:00:21.690 --> 00:00:23.730
such as a string, number,

00:00:23.730 --> 00:00:25.680
Boolean would define the null,

00:00:25.680 --> 00:00:29.105
all fall into a group called primitive types.

00:00:29.105 --> 00:00:32.015
There is also big int and symbol too,

00:00:32.015 --> 00:00:33.785
which we have not yet covered.

00:00:33.785 --> 00:00:36.640
We're now going to discover the object types.

00:00:36.640 --> 00:00:39.170
The first one is an array.

00:00:39.170 --> 00:00:41.720
The previous primitive values we've looked at

00:00:41.720 --> 00:00:44.240
store one single value such as a string,

00:00:44.240 --> 00:00:46.385
or text, or one number.

00:00:46.385 --> 00:00:49.535
But an array can hold multiple values.

00:00:49.535 --> 00:00:52.415
If you think of a shopping list, a to-do list,

00:00:52.415 --> 00:00:55.085
or generally any list with multiple values,

00:00:55.085 --> 00:00:58.090
an array is ideal for this type of data.

00:00:58.090 --> 00:01:00.170
Let's take a look at our first array

00:01:00.170 --> 00:01:02.240
inside of the project folder.

00:01:02.240 --> 00:01:04.265
Head down to the script section.

00:01:04.265 --> 00:01:07.295
We're creating an array with these square brackets.

00:01:07.295 --> 00:01:10.685
Arrays can hold any data type such as a string,

00:01:10.685 --> 00:01:13.340
just like this, separated by comma,

00:01:13.340 --> 00:01:15.290
we add multiple values inside of here.

00:01:15.290 --> 00:01:17.870
We can place in numbers.

00:01:17.870 --> 00:01:19.370
We can place in objects

00:01:19.370 --> 00:01:20.720
which we're going to look at next,

00:01:20.720 --> 00:01:23.480
or you could also nest inside an array too.

00:01:23.480 --> 00:01:25.460
To do this, we just create

00:01:25.460 --> 00:01:28.380
a new set of square brackets just like this.

00:01:28.380 --> 00:01:31.630
Then we continue to add our information inside.

00:01:31.630 --> 00:01:34.485
If we wanted to place in two strings,

00:01:34.485 --> 00:01:36.385
we would do it just like this.

00:01:36.385 --> 00:01:40.340
Or if we wanted to use an array for a list, let's say,

00:01:40.340 --> 00:01:42.230
a list of pizza ingredients,

00:01:42.230 --> 00:01:44.350
we would just do it by adding multiple strings

00:01:44.350 --> 00:01:46.100
separated by a comma.

00:01:46.100 --> 00:01:49.300
Let's say dough, cheese,

00:01:49.300 --> 00:01:53.315
sauce, and also some pepperoni too.

00:01:53.315 --> 00:01:56.890
Now, how do we access any of these values?

00:01:56.890 --> 00:01:59.470
Well, just like we did with any other values,

00:01:59.470 --> 00:02:02.515
we can also store this inside of a variable.

00:02:02.515 --> 00:02:06.235
We'll say let pizza to be equal to this new array.

00:02:06.235 --> 00:02:08.559
Then down at the bottom we have our documents.

00:02:08.559 --> 00:02:10.420
We select a new title and then

00:02:10.420 --> 00:02:13.325
suddenly in a text to be equal to this string.

00:02:13.325 --> 00:02:15.940
Instead, we can replace this string with

00:02:15.940 --> 00:02:19.185
the value of our pizza array.

00:02:19.185 --> 00:02:21.380
Refresh the browser, and then we see

00:02:21.380 --> 00:02:23.600
a list of all of our ingredients.

00:02:23.600 --> 00:02:25.720
Reading individual values from

00:02:25.720 --> 00:02:27.745
this pizza array is simple too.

00:02:27.745 --> 00:02:30.850
Array values are numbered from position 0,

00:02:30.850 --> 00:02:33.500
and this is called the index position.

00:02:33.500 --> 00:02:36.800
The first one of dough is index position 0.

00:02:36.800 --> 00:02:39.125
This is 1, 2, and 3.

00:02:39.125 --> 00:02:40.610
We can use this inside of

00:02:40.610 --> 00:02:42.230
the square brackets to access

00:02:42.230 --> 00:02:44.585
any one of these ingredients.

00:02:44.585 --> 00:02:47.530
Position 0, which is the dough.

00:02:47.530 --> 00:02:50.210
We can access this individually and

00:02:50.210 --> 00:02:53.125
also any one of the other values too.

00:02:53.125 --> 00:02:56.959
Arrays also have something which is called a property.

00:02:56.959 --> 00:03:00.230
As we get into much more detail about these object types,

00:03:00.230 --> 00:03:03.380
you will discover that object types such as an array

00:03:03.380 --> 00:03:06.880
will have multiple properties or methods available.

00:03:06.880 --> 00:03:09.260
These allow us to perform certain actions,

00:03:09.260 --> 00:03:12.265
or also access some information too.

00:03:12.265 --> 00:03:14.000
First of all, let's take a look at

00:03:14.000 --> 00:03:15.920
a property called length.

00:03:15.920 --> 00:03:19.145
Rather than accessing it, just take the value here.

00:03:19.145 --> 00:03:23.055
We can chain onto the end the length, refresh.

00:03:23.055 --> 00:03:26.270
We see there's four values contained inside of here.

00:03:26.270 --> 00:03:28.580
We could do this anyway which you wanted to.

00:03:28.580 --> 00:03:30.500
For example, if we wanted to place

00:03:30.500 --> 00:03:32.855
this variable inside of a string,

00:03:32.855 --> 00:03:35.035
we could open up the backticks.

00:03:35.035 --> 00:03:39.440
We say this pizza has used a template string.

00:03:39.440 --> 00:03:42.110
We can pass in a variable with the $ symbol,

00:03:42.110 --> 00:03:43.970
then the curly braces.

00:03:43.970 --> 00:03:46.860
Pass in the pizza.length.

00:03:48.110 --> 00:03:50.340
Then ingredients. Let's just say

00:03:50.340 --> 00:03:53.415
this pizza has four ingredients.

00:03:53.415 --> 00:03:57.120
Over to the browser, and there we go.

00:03:57.120 --> 00:04:00.080
Arrays also have some built-in methods available

00:04:00.080 --> 00:04:03.365
too which we can use to perform some common tasks,

00:04:03.365 --> 00:04:06.200
such as pushing a new item to this array.

00:04:06.200 --> 00:04:08.780
We can remove values and also check if

00:04:08.780 --> 00:04:11.740
the array contains a certain value too.

00:04:11.740 --> 00:04:14.015
For example, let's check if our pizza

00:04:14.015 --> 00:04:16.189
contains the value of pepperoni.

00:04:16.189 --> 00:04:20.260
To do this, we first access our array by the name.

00:04:20.260 --> 00:04:22.155
We then use dot includes;

00:04:22.155 --> 00:04:23.310
an inside of the brackets,

00:04:23.310 --> 00:04:26.240
we can pass in a value which you want to check.

00:04:26.240 --> 00:04:29.845
In our case, we want to check if this contains pepperoni.

00:04:29.845 --> 00:04:31.235
This will then return back

00:04:31.235 --> 00:04:34.640
either a true or false value if this is contained.

00:04:34.640 --> 00:04:37.745
We can also store this inside of a variable too.

00:04:37.745 --> 00:04:40.560
Let's call this hasPepperoni.

00:04:42.040 --> 00:04:44.900
Then below we can replace this inner text.

00:04:44.900 --> 00:04:48.230
Let's remove this template string and replace

00:04:48.230 --> 00:04:51.770
it with our variable. Give this a save.

00:04:51.770 --> 00:04:54.080
If you do see a jump just like we had there,

00:04:54.080 --> 00:04:56.240
this is just the text editor saving

00:04:56.240 --> 00:04:58.550
and reformatting the document.

00:04:58.550 --> 00:05:01.220
Make sure this is saved and over to the browser.

00:05:01.220 --> 00:05:02.930
This is true because the value of

00:05:02.930 --> 00:05:06.065
pepperoni is contained inside of this array.

00:05:06.065 --> 00:05:08.345
We can change this to be an incorrect spelling

00:05:08.345 --> 00:05:10.375
and this will be a false value.

00:05:10.375 --> 00:05:12.590
Or if we did have the correct spelling,

00:05:12.590 --> 00:05:14.765
we could also use the exclamation mark

00:05:14.765 --> 00:05:16.265
just in front of this,

00:05:16.265 --> 00:05:18.070
like we looked on the previous video.

00:05:18.070 --> 00:05:20.330
This will then return the opposite value,

00:05:20.330 --> 00:05:22.625
which is also false too.

00:05:22.625 --> 00:05:25.840
There's also many more of these methods available too.

00:05:25.840 --> 00:05:28.340
There is also a dedicated array section

00:05:28.340 --> 00:05:31.980
coming up to go into these in more detail.
