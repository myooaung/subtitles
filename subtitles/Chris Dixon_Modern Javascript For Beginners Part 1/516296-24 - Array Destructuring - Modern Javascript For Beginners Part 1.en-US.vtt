WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.090 --> 00:00:05.550
Yes, 2015 introduced destructuring,

00:00:05.550 --> 00:00:07.935
which is a simple way to pull out arrays or

00:00:07.935 --> 00:00:11.370
object values and store them into variables.

00:00:11.370 --> 00:00:13.890
To start a project, which is array

00:00:13.890 --> 00:00:16.410
destructuring contains an array of blog posts,

00:00:16.410 --> 00:00:18.480
just like we had in the last video.

00:00:18.480 --> 00:00:21.060
If we wanted to store each array value

00:00:21.060 --> 00:00:22.365
into a new variable,

00:00:22.365 --> 00:00:24.930
we can do this by adding destructuring.

00:00:24.930 --> 00:00:28.095
We can do this on the left-hand side of this equals.

00:00:28.095 --> 00:00:29.820
Instead of storing all of this

00:00:29.820 --> 00:00:31.950
into a single post variable,

00:00:31.950 --> 00:00:33.705
what we can do is

00:00:33.705 --> 00:00:35.610
add the square brackets just like this,

00:00:35.610 --> 00:00:37.800
and then we can create a new variable value

00:00:37.800 --> 00:00:40.505
for each one of these array items.

00:00:40.505 --> 00:00:42.950
The first one we can call post1,

00:00:42.950 --> 00:00:46.585
post2, then post3.

00:00:46.585 --> 00:00:49.670
These separate array value should now be stored

00:00:49.670 --> 00:00:53.135
into these three variables. Let's test this.

00:00:53.135 --> 00:00:58.350
Your console log with the value of post1.

00:00:58.490 --> 00:01:02.370
Refresh, and there is our single blog post.

00:01:02.370 --> 00:01:07.830
Let's try number 3. There we go.

00:01:07.830 --> 00:01:11.255
We can see each one of these three values is now unique,

00:01:11.255 --> 00:01:14.780
is destructure, and can also take place separately too.

00:01:14.780 --> 00:01:18.640
We could also set up exactly the same result like this.

00:01:18.640 --> 00:01:21.470
We could create a new variable and

00:01:21.470 --> 00:01:24.605
then store our values inside of these square brackets.

00:01:24.605 --> 00:01:27.190
Just like before, we can store post1,

00:01:27.190 --> 00:01:29.865
post2, and post 3,

00:01:29.865 --> 00:01:32.315
and set them equal to all posts.

00:01:32.315 --> 00:01:34.410
Again, with one of our single posts already

00:01:34.410 --> 00:01:36.870
selected, we can check this out.

00:01:36.870 --> 00:01:41.130
Post3 and also post2,

00:01:41.130 --> 00:01:42.500
so this is the same thing we just

00:01:42.500 --> 00:01:44.590
wrote in two different ways.

00:01:44.590 --> 00:01:46.745
Doing it in this style also means that we have

00:01:46.745 --> 00:01:49.355
access to these three destructured variables,

00:01:49.355 --> 00:01:51.620
we also maintain the original reference

00:01:51.620 --> 00:01:52.780
to this full array,

00:01:52.780 --> 00:01:56.125
if we wanted to also do some fun with this later on too.

00:01:56.125 --> 00:02:00.000
You can think of this destructuring as a shortcut.

00:02:00.000 --> 00:02:02.900
Doing this is exactly the same as something like this.

00:02:02.900 --> 00:02:05.230
We could set them up individually by creating

00:02:05.230 --> 00:02:08.815
post1 and set this equal to our posts array,

00:02:08.815 --> 00:02:11.515
selecting the original index value.

00:02:11.515 --> 00:02:14.345
Let's duplicate this two more times.

00:02:14.345 --> 00:02:18.165
Post2 will be equal to our first index position,

00:02:18.165 --> 00:02:22.170
and then post3 is equal to index number 2.

00:02:22.170 --> 00:02:25.735
Now with post2 already selected, over to the console.

00:02:25.735 --> 00:02:27.280
It still works just like before,

00:02:27.280 --> 00:02:28.870
but we'll have a longer way of doing

00:02:28.870 --> 00:02:30.830
things. Let's remove this.

00:02:30.830 --> 00:02:33.040
Something else we can also do is to make

00:02:33.040 --> 00:02:36.080
use of the JavaScript rest syntax.

00:02:36.080 --> 00:02:38.440
The rest syntax is a way to

00:02:38.440 --> 00:02:41.590
access a single value or multiple values,

00:02:41.590 --> 00:02:43.180
and then a way to grab all of

00:02:43.180 --> 00:02:45.910
the rest of the values to the end of the array.

00:02:45.910 --> 00:02:49.795
For example, if we just wanted to setup a variable,

00:02:49.795 --> 00:02:51.290
again, we need the square brackets.

00:02:51.290 --> 00:02:52.945
If we just wanted to access

00:02:52.945 --> 00:02:54.820
our first post and keep this with

00:02:54.820 --> 00:02:57.310
a separate variable name just like this.

00:02:57.310 --> 00:02:58.810
Then we may want to grab all of

00:02:58.810 --> 00:03:00.865
the rest of the remaining values,

00:03:00.865 --> 00:03:02.860
we can do this by separating this with

00:03:02.860 --> 00:03:05.570
a comma using the three dots,

00:03:05.570 --> 00:03:07.270
and then store the rest of the values

00:03:07.270 --> 00:03:09.410
into a separate variable,

00:03:09.410 --> 00:03:12.225
set this equal to all posts array.

00:03:12.225 --> 00:03:15.190
Let's confirm this inside of our console log.

00:03:15.190 --> 00:03:18.440
Post1 is this one just here.

00:03:19.170 --> 00:03:22.690
There we go. That's our first blog post just here.

00:03:22.690 --> 00:03:25.165
Then inside of this others variable,

00:03:25.165 --> 00:03:28.095
we should have the contents of the remaining values,

00:03:28.095 --> 00:03:30.815
which is blog post2 and 3.

00:03:30.815 --> 00:03:35.715
Changes to our variable of others, refresh.

00:03:35.715 --> 00:03:39.265
This is a new array with our two remaining values.

00:03:39.265 --> 00:03:41.030
This destructuring is really

00:03:41.030 --> 00:03:43.189
useful for creating shortcuts,

00:03:43.189 --> 00:03:45.065
to store different variables.

00:03:45.065 --> 00:03:47.825
Destructuring can also be used with objects too,

00:03:47.825 --> 00:03:50.090
and we'll cover this later on in the course.

00:03:50.090 --> 00:03:52.715
One thing to make sure of is when using rest,

00:03:52.715 --> 00:03:55.985
that we also add this as the last variable value.

00:03:55.985 --> 00:03:57.440
We couldn't, for example,

00:03:57.440 --> 00:03:59.150
place this at the very beginning,

00:03:59.150 --> 00:04:01.010
because as the name suggests,

00:04:01.010 --> 00:04:04.175
this will grab all of the rest of the remaining values.

00:04:04.175 --> 00:04:05.750
If we do this,

00:04:05.750 --> 00:04:07.250
and then save and refresh,

00:04:07.250 --> 00:04:09.845
we see an error inside the console.

00:04:09.845 --> 00:04:12.575
This happens because as the name suggests,

00:04:12.575 --> 00:04:15.410
this is used to grab the rest of the remaining values.

00:04:15.410 --> 00:04:16.970
Therefore, it makes no sense

00:04:16.970 --> 00:04:18.535
to have this at the beginning.

00:04:18.535 --> 00:04:21.740
Destructuring can also be used on objects too,

00:04:21.740 --> 00:04:23.630
and we'll take a look at this on a close look at

00:04:23.630 --> 00:04:26.640
rest in the rest of the course.
