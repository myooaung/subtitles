WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.470 --> 00:00:06.630
Although array methods are not strictly

00:00:06.630 --> 00:00:09.000
grouped into any form of category,

00:00:09.000 --> 00:00:11.700
some of them share some characteristics.

00:00:11.700 --> 00:00:14.910
For example, some array method which we'll perform,

00:00:14.910 --> 00:00:17.205
involves something called iteration.

00:00:17.205 --> 00:00:19.290
We will look at this in a future video,

00:00:19.290 --> 00:00:22.170
but you can think of this as repeating the process,

00:00:22.170 --> 00:00:24.345
for each item inside the array,

00:00:24.345 --> 00:00:26.955
just like a loop, if you've used them before.

00:00:26.955 --> 00:00:28.920
Also, some methods take

00:00:28.920 --> 00:00:32.070
our original array and modify it, and some,

00:00:32.070 --> 00:00:34.920
will leave our original array intact and return

00:00:34.920 --> 00:00:38.430
a new array of value based off the original.

00:00:38.430 --> 00:00:42.120
What we're now going to look at is modifying arrays.

00:00:42.120 --> 00:00:44.960
We have already looked at some array methods,

00:00:44.960 --> 00:00:46.805
which modify existing arrays,

00:00:46.805 --> 00:00:49.240
such as push and pop.

00:00:49.240 --> 00:00:51.720
We've used the push methods as

00:00:51.720 --> 00:00:53.810
a new item to the end of an array.

00:00:53.810 --> 00:00:56.600
There is also the pop method

00:00:56.600 --> 00:00:59.495
which will remove the last item from the array.

00:00:59.495 --> 00:01:01.550
Not only do we need to be concerned

00:01:01.550 --> 00:01:03.455
with modifying the original array,

00:01:03.455 --> 00:01:05.180
the value which is returned back

00:01:05.180 --> 00:01:07.685
can also be important too.

00:01:07.685 --> 00:01:09.610
Over to the project folder,

00:01:09.610 --> 00:01:12.575
head into this lesson which is modifying arrays,

00:01:12.575 --> 00:01:15.515
and also open this up inside the browser.

00:01:15.515 --> 00:01:17.660
Inside the script, we'll have three lines

00:01:17.660 --> 00:01:19.115
of code already setup.

00:01:19.115 --> 00:01:21.860
One is used a pizza array with three values.

00:01:21.860 --> 00:01:23.540
We then select this,

00:01:23.540 --> 00:01:26.375
push a new value to the end of pepperoni,

00:01:26.375 --> 00:01:28.990
and then we'll log this to the console.

00:01:28.990 --> 00:01:33.780
If we go over to the browser into the console.

00:01:33.780 --> 00:01:36.575
We see here, we got the new array value

00:01:36.575 --> 00:01:39.340
of pepperoni pushed on to the end.

00:01:39.340 --> 00:01:41.730
Well, what about the return value we get

00:01:41.730 --> 00:01:44.320
back after running this method?

00:01:44.320 --> 00:01:48.110
See this, we can store this inside of a variable.

00:01:48.110 --> 00:01:52.960
Let's say, const, call this returned,

00:01:52.960 --> 00:01:54.740
and set this equal to the value which is

00:01:54.740 --> 00:01:58.150
returned after this method has been performed.

00:01:58.150 --> 00:02:00.330
Then if we grab this and

00:02:00.330 --> 00:02:02.500
place it inside the console log,

00:02:02.500 --> 00:02:06.815
refresh, we now get the value of four.

00:02:06.815 --> 00:02:08.870
The returned value after we use

00:02:08.870 --> 00:02:10.940
the push method is a number of

00:02:10.940 --> 00:02:12.770
items inside of the array

00:02:12.770 --> 00:02:15.395
after this new item has been pushed.

00:02:15.395 --> 00:02:17.795
In our case, we now have four values.

00:02:17.795 --> 00:02:20.350
We get this value of four returned.

00:02:20.350 --> 00:02:22.340
As you can see, not only is

00:02:22.340 --> 00:02:24.770
the array methods useful in itself,

00:02:24.770 --> 00:02:26.690
but often returned value which we get

00:02:26.690 --> 00:02:29.555
back can also be useful too.

00:02:29.555 --> 00:02:32.255
Next, we also have the pop method

00:02:32.255 --> 00:02:35.240
to remove the last value from the array.

00:02:35.240 --> 00:02:37.820
Let's comment out this line just here.

00:02:37.820 --> 00:02:40.370
We'll select our pizza once more,

00:02:40.370 --> 00:02:42.785
access the pop method,

00:02:42.785 --> 00:02:47.260
and then we'll do a console log for the original pizza.

00:02:47.260 --> 00:02:50.060
As you would expect when we use the pop method,

00:02:50.060 --> 00:02:51.935
this will remove the cheese value,

00:02:51.935 --> 00:02:54.155
leaving only the dough and sauce.

00:02:54.155 --> 00:02:57.215
Again, what would the return value be after

00:02:57.215 --> 00:03:01.120
running the pop method? Well, let's check this.

00:03:01.120 --> 00:03:03.770
Again, we'll store this return value

00:03:03.770 --> 00:03:06.490
and then log this to the console.

00:03:06.490 --> 00:03:08.870
Let's check this out, refresh,

00:03:08.870 --> 00:03:11.345
and we'll get the value of cheese.

00:03:11.345 --> 00:03:12.980
Rather than the length of

00:03:12.980 --> 00:03:14.525
the array which we've seen before,

00:03:14.525 --> 00:03:17.120
after we use pop, we get back the value

00:03:17.120 --> 00:03:20.125
which has been removed from the end of this array.

00:03:20.125 --> 00:03:22.250
Both of these methods which we just looked at,

00:03:22.250 --> 00:03:23.690
the push and the pop,

00:03:23.690 --> 00:03:25.925
will affect the end of the array.

00:03:25.925 --> 00:03:28.970
Do the opposite and affect the beginning of the array.

00:03:28.970 --> 00:03:31.265
We also have two other methods.

00:03:31.265 --> 00:03:32.930
I'm not going to type this out since

00:03:32.930 --> 00:03:34.520
these work exactly the same,

00:03:34.520 --> 00:03:36.860
but unshift adds a new value

00:03:36.860 --> 00:03:38.510
to the beginning of the array,

00:03:38.510 --> 00:03:41.290
and shift removes the first value.

00:03:41.290 --> 00:03:44.360
The return values also mirror push and pop.

00:03:44.360 --> 00:03:46.820
When we add a new value using unshift,

00:03:46.820 --> 00:03:49.690
we'll get back the land of the new array.

00:03:49.690 --> 00:03:52.085
When we remove an item with shifts,

00:03:52.085 --> 00:03:54.365
it returns the value which has been removed,

00:03:54.365 --> 00:03:56.530
which would be dough.

00:03:56.530 --> 00:03:58.935
Next up, we have the splice method,

00:03:58.935 --> 00:04:00.155
and this is something which we've

00:04:00.155 --> 00:04:01.700
already looked at to remove and

00:04:01.700 --> 00:04:05.065
replace items at any position in the array.

00:04:05.065 --> 00:04:06.770
These previous ones we looked at,

00:04:06.770 --> 00:04:09.965
we'll work with the beginning or the end of an array.

00:04:09.965 --> 00:04:13.145
Splice will select any item which you want to.

00:04:13.145 --> 00:04:15.395
It can take a multiple parameters

00:04:15.395 --> 00:04:17.075
and it's really flexible.

00:04:17.075 --> 00:04:20.040
This example here has three parameters.

00:04:20.040 --> 00:04:21.460
First, we have number 1,

00:04:21.460 --> 00:04:24.410
and this is the array's index number to begin with,

00:04:24.410 --> 00:04:26.770
which for us is the sauce.

00:04:26.770 --> 00:04:29.475
Next, the number of items to remove.

00:04:29.475 --> 00:04:31.460
In our case, one will only

00:04:31.460 --> 00:04:33.955
remove this single value of sauce.

00:04:33.955 --> 00:04:37.775
The third parameter, insert a new value at this position,

00:04:37.775 --> 00:04:41.285
resulting in the new array we see down at the bottom.

00:04:41.285 --> 00:04:43.175
Let's take a look at some more examples

00:04:43.175 --> 00:04:45.760
over in Visual Studio Code.

00:04:45.760 --> 00:04:48.765
We can comment out this line just here.

00:04:48.765 --> 00:04:50.955
Down below, select our pizza.

00:04:50.955 --> 00:04:53.870
Then we'll take a deeper look at splice.

00:04:53.870 --> 00:04:56.440
If we just add in the first parameter

00:04:56.440 --> 00:04:58.675
which is the starting position of one,

00:04:58.675 --> 00:05:00.625
and then we'll log

00:05:00.625 --> 00:05:03.975
the pizza after this method has taken effect.

00:05:03.975 --> 00:05:06.485
Let's see what happens inside the browser.

00:05:06.485 --> 00:05:09.850
Refresh and we only see the value of dough.

00:05:09.850 --> 00:05:14.455
This is because we've started with position 1,

00:05:14.455 --> 00:05:16.150
and then remove all items which

00:05:16.150 --> 00:05:18.625
follow right to the end of the array.

00:05:18.625 --> 00:05:20.470
A positive number like this will

00:05:20.470 --> 00:05:22.480
start at the beginning of an array.

00:05:22.480 --> 00:05:24.310
We can also use negative values

00:05:24.310 --> 00:05:26.525
to start at the end of the array.

00:05:26.525 --> 00:05:29.235
Let's take a look at negative one.

00:05:29.235 --> 00:05:31.855
This will remove the last array item of cheese,

00:05:31.855 --> 00:05:34.600
even our dough and our source.

00:05:34.600 --> 00:05:37.270
If we change this to be negative two,

00:05:37.270 --> 00:05:39.550
this will remove the final two items,

00:05:39.550 --> 00:05:42.410
leaving us with only the dough.

00:05:42.560 --> 00:05:45.675
As we know, we can add a second parameter,

00:05:45.675 --> 00:05:47.910
we'll just start this again on number 1.

00:05:47.910 --> 00:05:49.930
We can add a second parameter to only

00:05:49.930 --> 00:05:52.570
remove a certain number of values.

00:05:52.570 --> 00:05:55.510
Let's say we wanted to replace the regular sauce just

00:05:55.510 --> 00:05:58.495
here with some barbecue sauce instead,

00:05:58.495 --> 00:06:00.560
just like we've seen over in the slide.

00:06:00.560 --> 00:06:02.350
What we need to do is to remove

00:06:02.350 --> 00:06:05.260
this one and only item I placed in one,

00:06:05.260 --> 00:06:08.170
and then replace this with a optional value.

00:06:08.170 --> 00:06:09.670
Inside the quotes, we can replace

00:06:09.670 --> 00:06:11.800
this with barbecue sauce.

00:06:11.800 --> 00:06:15.555
Save. Refresh. Now,

00:06:15.555 --> 00:06:18.340
our second value, our index position 1,

00:06:18.340 --> 00:06:21.055
has been replaced with our barbecue sauce.

00:06:21.055 --> 00:06:22.810
If you wanted to also

00:06:22.810 --> 00:06:25.030
insert another value at the same position,

00:06:25.030 --> 00:06:26.980
your stuff towards, all we need to do

00:06:26.980 --> 00:06:29.185
is to add this at the very end,

00:06:29.185 --> 00:06:31.225
separated by a comma.

00:06:31.225 --> 00:06:33.770
Let's go for peppers.

00:06:33.770 --> 00:06:37.775
They should add just after our barbecue sauce.

00:06:37.775 --> 00:06:40.045
As you can see, this splice method is

00:06:40.045 --> 00:06:42.190
really flexible for adding and

00:06:42.190 --> 00:06:46.940
removing values at any index position inside of an array.

00:06:46.940 --> 00:06:49.620
Next up, we have sort which will sort

00:06:49.620 --> 00:06:52.080
the array values alphanumerically.

00:06:52.080 --> 00:06:54.465
Basically, in alphabetical order.

00:06:54.465 --> 00:06:57.610
These will also be in ascending order, and also,

00:06:57.610 --> 00:06:59.510
the reverse method which, as it sounds,

00:06:59.510 --> 00:07:02.435
reverses the order of the array values.

00:07:02.435 --> 00:07:05.540
We also need to be careful when using sort with numbers.

00:07:05.540 --> 00:07:08.600
We'll take a look at why in just a second.

00:07:08.600 --> 00:07:11.270
First of all, what we're going to do is to comment this

00:07:11.270 --> 00:07:13.880
out and access our pizza.

00:07:13.880 --> 00:07:17.470
Then it just call the sort method on its own.

00:07:17.470 --> 00:07:19.890
Log the pizza, and let's see what happens.

00:07:19.890 --> 00:07:22.155
We have dough, sauce, and cheese.

00:07:22.155 --> 00:07:24.620
Let's see what happens over in the browser.

00:07:24.620 --> 00:07:28.235
Refresh. These are now in alphabetical order.

00:07:28.235 --> 00:07:30.685
This all works as expected.

00:07:30.685 --> 00:07:33.050
However, though, this is fine because we're using

00:07:33.050 --> 00:07:35.450
a string of text for each array value.

00:07:35.450 --> 00:07:37.505
But if this was an array of numbers,

00:07:37.505 --> 00:07:39.410
it would cause an issue.

00:07:39.410 --> 00:07:43.160
The reason is because even if our array contains numbers,

00:07:43.160 --> 00:07:46.190
all of the values will be converted to be strings,

00:07:46.190 --> 00:07:49.980
and then arranged alphanumerically, so the series.

00:07:49.980 --> 00:07:52.305
Let's go back to the editor.

00:07:52.305 --> 00:07:54.845
Instead of these strings, we're going to go down,

00:07:54.845 --> 00:07:57.870
and instead, it creates an array of numbers.

00:07:59.000 --> 00:08:01.490
These can be any values inside of here.

00:08:01.490 --> 00:08:03.350
I'm going to go for 12,

00:08:03.350 --> 00:08:06.750
1,000, and then three.

00:08:07.040 --> 00:08:09.380
Now, we need to access

00:08:09.380 --> 00:08:14.460
the numbers array and also log this to the console.

00:08:14.980 --> 00:08:18.155
Just like before, we call in the sauce method.

00:08:18.155 --> 00:08:19.400
But let's see what happens now,

00:08:19.400 --> 00:08:21.595
these are all as numbers.

00:08:21.595 --> 00:08:24.030
Say this, and now,

00:08:24.030 --> 00:08:25.410
we get the value of 1,000,

00:08:25.410 --> 00:08:27.195
12, and three.

00:08:27.195 --> 00:08:29.190
What we should get back is three,

00:08:29.190 --> 00:08:30.630
12, and 1,000.

00:08:30.630 --> 00:08:32.785
This is all completely wrong.

00:08:32.785 --> 00:08:34.610
But the reason this happens is

00:08:34.610 --> 00:08:36.710
because all of these numbers are converted

00:08:36.710 --> 00:08:40.805
to strings and then sorted as these string values.

00:08:40.805 --> 00:08:42.740
In just the same way as if

00:08:42.740 --> 00:08:44.390
all of these numbers were words,

00:08:44.390 --> 00:08:47.650
the sorting begins at the very first character.

00:08:47.650 --> 00:08:49.440
Here, we see the value of

00:08:49.440 --> 00:08:51.445
one and also the value of one,

00:08:51.445 --> 00:08:53.510
which is why these two numbers begin at

00:08:53.510 --> 00:08:56.300
the start because one is lower than three.

00:08:56.300 --> 00:08:58.855
Three is placed at the very end.

00:08:58.855 --> 00:09:02.370
But then, why is 1,000 lower than 12?

00:09:02.370 --> 00:09:04.080
Well, this is because again,

00:09:04.080 --> 00:09:05.390
just like with text,

00:09:05.390 --> 00:09:07.850
if the first character is exactly the same,

00:09:07.850 --> 00:09:09.440
just like these two ones,

00:09:09.440 --> 00:09:11.885
it will then compare the second character.

00:09:11.885 --> 00:09:14.460
With 1,000, this is the value of

00:09:14.460 --> 00:09:16.880
zero and this is the value of two,

00:09:16.880 --> 00:09:18.710
meaning that two was a higher value

00:09:18.710 --> 00:09:21.340
placed on this after the 1,000.

00:09:21.340 --> 00:09:23.480
Obviously, this is not a good way

00:09:23.480 --> 00:09:25.190
for sorting arrays of numbers.

00:09:25.190 --> 00:09:27.350
For this, the sort method can

00:09:27.350 --> 00:09:30.160
also take in a comparison function.

00:09:30.160 --> 00:09:32.000
Remember, from earlier, we took a look

00:09:32.000 --> 00:09:33.845
at how a function works.

00:09:33.845 --> 00:09:36.110
A function looks just like this,

00:09:36.110 --> 00:09:38.060
we have the function keyword.

00:09:38.060 --> 00:09:41.245
Then we give this function a name.

00:09:41.245 --> 00:09:44.060
We use the brackets or the parentheses,

00:09:44.060 --> 00:09:47.545
and then the curly braces to run some code inside.

00:09:47.545 --> 00:09:50.695
Optionally, this can also take in some values,

00:09:50.695 --> 00:09:52.285
and I'm going to, for now,

00:09:52.285 --> 00:09:54.665
pass in the values of a and b.

00:09:54.665 --> 00:09:56.130
Don't worry about these for now,

00:09:56.130 --> 00:09:56.860
we'll take a look at what

00:09:56.860 --> 00:09:59.155
this is in just a second.

00:09:59.155 --> 00:10:00.910
What we can do is we can cut

00:10:00.910 --> 00:10:02.740
this function out and instead,

00:10:02.740 --> 00:10:07.865
place it inside of the sort method. Place this in.

00:10:07.865 --> 00:10:10.150
If we wanted to, we could also

00:10:10.150 --> 00:10:12.370
optionally remove this function name

00:10:12.370 --> 00:10:13.960
since it's automatically going to be

00:10:13.960 --> 00:10:16.720
called from this sort method.

00:10:16.720 --> 00:10:18.710
Then inside of this function body,

00:10:18.710 --> 00:10:22.780
what we're going to do is to return a takeaway b.

00:10:22.780 --> 00:10:25.130
Now, this may look a little bit confusing

00:10:25.130 --> 00:10:27.230
but what's actually happening here is

00:10:27.230 --> 00:10:28.670
we're going to call this function for

00:10:28.670 --> 00:10:31.775
each value inside of this numbers array,

00:10:31.775 --> 00:10:33.380
we pass in a and b,

00:10:33.380 --> 00:10:35.420
and these can be any names of our choice.

00:10:35.420 --> 00:10:37.460
It doesn't matter this is called a and b,

00:10:37.460 --> 00:10:38.480
it could be number one,

00:10:38.480 --> 00:10:40.720
number two, it could be anything which you want to.

00:10:40.720 --> 00:10:42.920
But the key factor here is we're

00:10:42.920 --> 00:10:45.470
going to compare two numbers at a time.

00:10:45.470 --> 00:10:46.790
When this first begins,

00:10:46.790 --> 00:10:48.540
the sort function will replace a and

00:10:48.540 --> 00:10:51.980
b with the first two values of 12 and 1,000.

00:10:51.980 --> 00:10:54.890
This will be exactly the same as returning

00:10:54.890 --> 00:10:58.575
12, take away 1,000.

00:10:58.575 --> 00:11:01.500
Then the second time, it will be 1,000 of three,

00:11:01.500 --> 00:11:04.795
and this will keep going until the end of the array.

00:11:04.795 --> 00:11:07.815
For the first one which is 12, take away 1,000.

00:11:07.815 --> 00:11:10.610
This is obviously going to result in a negative number.

00:11:10.610 --> 00:11:14.380
This will be pushed back to the start of the array.

00:11:14.380 --> 00:11:16.130
It will then go through and repeat this

00:11:16.130 --> 00:11:17.720
for each pair of numbers,

00:11:17.720 --> 00:11:21.025
sorting these in the correct order by comparison.

00:11:21.025 --> 00:11:22.880
Now, if we remove this line,

00:11:22.880 --> 00:11:24.290
we still console log in

00:11:24.290 --> 00:11:28.010
the new array value, save and refresh.

00:11:28.010 --> 00:11:30.745
These are now in the correct order.

00:11:30.745 --> 00:11:32.810
As you can see, this is really useful

00:11:32.810 --> 00:11:34.580
if we have an array of numbers.

00:11:34.580 --> 00:11:37.730
We don't want to rely on the alphabetical conversion,

00:11:37.730 --> 00:11:40.145
which we've seen in the previous example.

00:11:40.145 --> 00:11:43.070
Finally, we're going to take a look at reverse.

00:11:43.070 --> 00:11:44.420
Reverse, by comparison,

00:11:44.420 --> 00:11:46.250
is pretty simple compared to this.

00:11:46.250 --> 00:11:50.420
All we need to do is we'll comment out this example,

00:11:50.420 --> 00:11:52.400
access our numbers, and then call

00:11:52.400 --> 00:11:54.475
the reverse array method.

00:11:54.475 --> 00:11:56.390
Save this. Now, instead of having

00:11:56.390 --> 00:11:58.400
the value of 12, 1,000,

00:11:58.400 --> 00:12:01.205
and three, we now have the value of three,

00:12:01.205 --> 00:12:04.830
1,000, and 12, which is the reverse order.
