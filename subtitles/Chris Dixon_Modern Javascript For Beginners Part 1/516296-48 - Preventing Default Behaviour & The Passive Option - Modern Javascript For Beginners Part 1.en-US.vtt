WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.540 --> 00:00:04.710
When we trigger an event,

00:00:04.710 --> 00:00:06.645
it also has some default behavior

00:00:06.645 --> 00:00:08.865
which occurs inside the browser.

00:00:08.865 --> 00:00:10.860
This makes sense because we want

00:00:10.860 --> 00:00:13.080
the event to actually do something.

00:00:13.080 --> 00:00:15.870
A simple example is a checkbox.

00:00:15.870 --> 00:00:18.990
Let's jump into the correct start files which is

00:00:18.990 --> 00:00:21.630
Prevent Default Behavior & The Passive

00:00:21.630 --> 00:00:24.795
Option and open up the index.html.

00:00:24.795 --> 00:00:28.530
Let's go down to the bottom after the very last section,

00:00:28.530 --> 00:00:30.690
and just above our scripts we'll

00:00:30.690 --> 00:00:32.910
create an input with the type of

00:00:32.910 --> 00:00:38.830
checkbox and ID of the checkbox too.

00:00:39.050 --> 00:00:42.000
Let's save this and open up inside

00:00:42.000 --> 00:00:44.970
the same folder the events.js.

00:00:44.970 --> 00:00:47.835
We can begin to grab this element.

00:00:47.835 --> 00:00:50.370
Anywhere inside of here is fine and we'll

00:00:50.370 --> 00:00:52.800
grab a reference to this checkbox,

00:00:52.800 --> 00:00:55.245
store this inside of a constant.

00:00:55.245 --> 00:00:59.295
We write document.queryselector,

00:00:59.295 --> 00:01:02.985
and then we're going to pass it in the ID using hash.

00:01:02.985 --> 00:01:06.405
The ID we gave to the input was the checkbox,

00:01:06.405 --> 00:01:11.130
and then we can access our checkbox using a method which

00:01:11.130 --> 00:01:13.215
is addEventListener and then we're going to

00:01:13.215 --> 00:01:16.110
listen out for a click on this element.

00:01:16.110 --> 00:01:17.700
This also needs to trigger

00:01:17.700 --> 00:01:20.040
a function which we'll call handleClick,

00:01:20.040 --> 00:01:23.085
and then set this function up just above.

00:01:23.085 --> 00:01:29.250
The function handleClick and

00:01:29.250 --> 00:01:32.520
its function also needs to access the event data,

00:01:32.520 --> 00:01:35.190
so pass this in as a parameter and for now we'll do

00:01:35.190 --> 00:01:38.470
a simple console log with e.target.

00:01:38.930 --> 00:01:41.430
Since this is a checkbox,

00:01:41.430 --> 00:01:44.415
we can also access the checked property.

00:01:44.415 --> 00:01:47.460
This should return a true or false value

00:01:47.460 --> 00:01:49.770
if the input is checked or not.

00:01:49.770 --> 00:01:51.885
Over to the browser,

00:01:51.885 --> 00:01:54.840
refresh, and we'll also make this a little bit bigger.

00:01:54.840 --> 00:01:57.850
Jump into the console.

00:01:59.600 --> 00:02:02.730
We can just well, see this at the very bottom,

00:02:02.730 --> 00:02:04.620
so click on this and we

00:02:04.620 --> 00:02:07.050
see this is checked because it's true.

00:02:07.050 --> 00:02:10.500
We can uncheck this and this will be the result of false.

00:02:10.500 --> 00:02:12.060
We can toggle list and

00:02:12.060 --> 00:02:14.790
this toggling action is the default behavior,

00:02:14.790 --> 00:02:17.760
but if we didn't want this default behavior we could

00:02:17.760 --> 00:02:19.620
prevent the default and handle

00:02:19.620 --> 00:02:21.870
exactly what we want to happen ourselves.

00:02:21.870 --> 00:02:24.855
We go back to our script which is the events

00:02:24.855 --> 00:02:28.275
and scroll up to the function which is addToFavourites.

00:02:28.275 --> 00:02:30.780
Earlier we accessed the event data and

00:02:30.780 --> 00:02:33.600
used a method called stopPropagation.

00:02:33.600 --> 00:02:35.790
Similar to this, we can also make use of

00:02:35.790 --> 00:02:38.550
another method called preventDefault.

00:02:38.550 --> 00:02:40.410
As you would expect, this is also

00:02:40.410 --> 00:02:42.825
available on the event object.

00:02:42.825 --> 00:02:46.020
We can use this inside of our handleClick function.

00:02:46.020 --> 00:02:48.915
At the top access our events,

00:02:48.915 --> 00:02:50.700
we'll call the method which is

00:02:50.700 --> 00:02:54.120
preventDefault which will in

00:02:54.120 --> 00:02:56.820
turn stop the default behavior inside the browser,

00:02:56.820 --> 00:02:59.340
which will also toggle the checkbox value.

00:02:59.340 --> 00:03:01.965
We'll give this a go. If we refresh,

00:03:01.965 --> 00:03:04.380
check outbox at the bottom; this is true.

00:03:04.380 --> 00:03:08.550
If we keep clicking, this is only ever a result of true.

00:03:08.550 --> 00:03:10.320
We don't see a false value,

00:03:10.320 --> 00:03:11.790
and also we don't ever see that

00:03:11.790 --> 00:03:14.460
this checkbox has a tick inside.

00:03:14.460 --> 00:03:17.160
Living us now free to do whatever we want with

00:03:17.160 --> 00:03:19.860
this event inside of our function.

00:03:19.860 --> 00:03:22.665
Also down in the addEventListener method,

00:03:22.665 --> 00:03:25.500
we can also add in a third value which is

00:03:25.500 --> 00:03:27.270
an options object where we can set

00:03:27.270 --> 00:03:30.315
the passive option to be equal to true.

00:03:30.315 --> 00:03:33.510
Setting this equal to true will always stop

00:03:33.510 --> 00:03:36.960
the preventDefault from ever being called.

00:03:36.960 --> 00:03:40.185
I save this and see what happens inside the browser.

00:03:40.185 --> 00:03:43.125
Refresh and if we click on our checkbox,

00:03:43.125 --> 00:03:44.760
we can see we're unable to

00:03:44.760 --> 00:03:47.955
preventDefault inside of the EventListener.

00:03:47.955 --> 00:03:51.555
This is because if we set passive to be equal to true,

00:03:51.555 --> 00:03:55.200
this will stop the preventDefault from ever being called.

00:03:55.200 --> 00:03:56.790
We can see this, we'll reinstate

00:03:56.790 --> 00:03:59.310
our original behavior of toggling between true and

00:03:59.310 --> 00:04:03.555
false and we also see the tick inside the checkbox too.

00:04:03.555 --> 00:04:05.460
You may be wondering why we are

00:04:05.460 --> 00:04:07.650
preventing the default inside the function,

00:04:07.650 --> 00:04:11.130
but we are overriding this inside of the EventListener.

00:04:11.130 --> 00:04:12.900
Well, one reason could be,

00:04:12.900 --> 00:04:14.160
we may be want to stop other

00:04:14.160 --> 00:04:15.780
developers from doing something in

00:04:15.780 --> 00:04:19.785
the future when we're relying on the default behavior.

00:04:19.785 --> 00:04:21.810
Using the passive option can

00:04:21.810 --> 00:04:24.225
also lead to better performance too.

00:04:24.225 --> 00:04:26.070
An example of this is on

00:04:26.070 --> 00:04:28.530
mobile devices where as sometimes developers

00:04:28.530 --> 00:04:31.005
prevent the default scroll behavior

00:04:31.005 --> 00:04:34.155
to implement some custom fancy way of scrolling.

00:04:34.155 --> 00:04:37.040
But if we're not doing something custom like this

00:04:37.040 --> 00:04:38.160
it is bad to let

00:04:38.160 --> 00:04:40.620
the browser know by adding the passive option,

00:04:40.620 --> 00:04:41.940
therefore the browser doesn't

00:04:41.940 --> 00:04:42.990
have to figure things out for

00:04:42.990 --> 00:04:44.820
itself which can take time

00:04:44.820 --> 00:04:47.290
and also hinder the performance.

00:04:47.290 --> 00:04:49.490
Back over to our Index page and we

00:04:49.490 --> 00:04:51.080
can remove this input just here,

00:04:51.080 --> 00:04:52.940
and we're going to now take a look at

00:04:52.940 --> 00:04:55.730
a more commonly used example of preventing

00:04:55.730 --> 00:04:59.215
the default behavior which use when used with forms.

00:04:59.215 --> 00:05:02.085
An example of this is a sign up form,

00:05:02.085 --> 00:05:06.910
so create a new section with the class of signup.

00:05:08.660 --> 00:05:12.480
Inside here, a level 3 heading with

00:05:12.480 --> 00:05:16.990
the title of Sign up or we can rest this via our inbox.

00:05:20.740 --> 00:05:24.205
Just below this we can start to construct our form,

00:05:24.205 --> 00:05:26.745
and then inside the form elements we'll

00:05:26.745 --> 00:05:30.080
create a new div for each one of these sections.

00:05:30.080 --> 00:05:31.790
First of all, the label is

00:05:31.790 --> 00:05:34.270
going to be for the user's name,

00:05:34.270 --> 00:05:36.660
so we'll say for name passing

00:05:36.660 --> 00:05:39.345
the name label with the colon.

00:05:39.345 --> 00:05:42.855
The inputs, this is the type of tax.

00:05:42.855 --> 00:05:44.715
To match up with our label,

00:05:44.715 --> 00:05:47.280
we'll also pass in the ID of name.

00:05:47.280 --> 00:05:50.820
This second div is just going to be for the email,

00:05:50.820 --> 00:05:52.725
so we'll copy and paste

00:05:52.725 --> 00:05:54.690
and change each one of these to

00:05:54.690 --> 00:05:57.130
be the corresponding email.

00:05:59.960 --> 00:06:02.580
The third and the final div

00:06:02.580 --> 00:06:04.395
is going to be for the submit,

00:06:04.395 --> 00:06:07.440
so create an input with the type of

00:06:07.440 --> 00:06:11.955
submit and also the ID of submit too.

00:06:11.955 --> 00:06:15.390
Since we have also removed our checkbox from before,

00:06:15.390 --> 00:06:17.250
we can also go back to the events

00:06:17.250 --> 00:06:20.295
and remove our function and the EventListener.

00:06:20.295 --> 00:06:21.810
Let's say this end test,

00:06:21.810 --> 00:06:24.645
this is all looking good inside the browser.

00:06:24.645 --> 00:06:27.030
There's our title, and the name,

00:06:27.030 --> 00:06:30.330
and the email inputs along with our submit.

00:06:30.330 --> 00:06:32.040
When we submit the form,

00:06:32.040 --> 00:06:34.680
the default behavior is to send the form to

00:06:34.680 --> 00:06:37.140
a back-end web server and then maybe do

00:06:37.140 --> 00:06:39.900
something like redirect to a success page.

00:06:39.900 --> 00:06:41.190
Obviously, we don't have

00:06:41.190 --> 00:06:42.780
an additional page to redirect to,

00:06:42.780 --> 00:06:44.580
so we're going to redirect to

00:06:44.580 --> 00:06:48.555
the same page which will in turn cause a page reload.

00:06:48.555 --> 00:06:50.880
The page reload loses all of

00:06:50.880 --> 00:06:53.280
the form data which is nested inside.

00:06:53.280 --> 00:06:55.665
If we add something inside here;

00:06:55.665 --> 00:06:57.540
just any example is fine,

00:06:57.540 --> 00:07:00.180
hit "Submit", we can see an example of this.

00:07:00.180 --> 00:07:02.730
We see the page has reloaded and we

00:07:02.730 --> 00:07:05.655
also lose the form data from these fields too.

00:07:05.655 --> 00:07:07.380
Well, there maybe occurrences

00:07:07.380 --> 00:07:08.580
where we want to first capture

00:07:08.580 --> 00:07:11.895
this data and make use of it before it's all gone.

00:07:11.895 --> 00:07:14.520
An example of this would be to maybe validate

00:07:14.520 --> 00:07:17.640
the form data before it's sent to the server.

00:07:17.640 --> 00:07:19.950
As we just looked up before if we do want

00:07:19.950 --> 00:07:22.215
to capture this data before the reload,

00:07:22.215 --> 00:07:25.380
we need to prevent the default form behavior.

00:07:25.380 --> 00:07:26.970
To do this, go back over

00:07:26.970 --> 00:07:28.320
to our events and we're going to

00:07:28.320 --> 00:07:32.250
start by capturing the form and the input elements.

00:07:32.250 --> 00:07:35.520
Say const form is going to be equal

00:07:35.520 --> 00:07:41.235
to document.querySelector where we select form element.

00:07:41.235 --> 00:07:44.655
If we copy and paste this in two more times,

00:07:44.655 --> 00:07:46.380
the second one is for

00:07:46.380 --> 00:07:48.960
the userName and we also

00:07:48.960 --> 00:07:52.750
give this an ID which is equal to name.

00:07:53.150 --> 00:07:57.160
The third one is for the userEmail.

00:08:00.050 --> 00:08:02.670
Next up, we'll grab our form

00:08:02.670 --> 00:08:04.725
and we'll add an EventListener,

00:08:04.725 --> 00:08:07.470
which is going to this now for the form submit.

00:08:07.470 --> 00:08:09.510
The reason we can do this and listen out for

00:08:09.510 --> 00:08:13.110
the submit event is because inside of our Index page,

00:08:13.110 --> 00:08:15.705
we've added the type of submit.

00:08:15.705 --> 00:08:17.970
Separate it by comma, we'll trigger

00:08:17.970 --> 00:08:21.310
a function called handleFormSubmit,

00:08:22.070 --> 00:08:25.660
and then set this up just above.

00:08:28.460 --> 00:08:31.455
As you would expect since we need to prevent

00:08:31.455 --> 00:08:35.205
the default behavior we'll access our event object,

00:08:35.205 --> 00:08:39.250
then create a console log which grabs our userName.

00:08:39.640 --> 00:08:43.280
All we've done here is grab our userName element,

00:08:43.280 --> 00:08:45.620
but if we want to get the value which is input by

00:08:45.620 --> 00:08:48.950
the user we need to access the value.

00:08:48.950 --> 00:08:51.515
As for results, refresh.

00:08:51.515 --> 00:08:56.550
Inside the console, place any name inside of here.

00:08:56.550 --> 00:09:00.700
To any email, name and submit.

00:09:01.400 --> 00:09:04.440
You'll see it very quickly there that the username of

00:09:04.440 --> 00:09:06.765
Chris was placed inside the console,

00:09:06.765 --> 00:09:10.320
and then very quickly all of the data will disappear.

00:09:10.320 --> 00:09:13.230
As you would expect the way to prevent this is to access

00:09:13.230 --> 00:09:15.240
our event object and just like

00:09:15.240 --> 00:09:18.730
before we can prevent the default behavior.

00:09:19.430 --> 00:09:22.455
We'll say this and try this out once more,

00:09:22.455 --> 00:09:27.585
add the name, and email is fine and then hit "Submit".

00:09:27.585 --> 00:09:30.270
Now our data is still in place.

00:09:30.270 --> 00:09:31.770
We have our console log,

00:09:31.770 --> 00:09:33.570
and also inside the input we have

00:09:33.570 --> 00:09:36.010
the name and the email inputs.

00:09:36.010 --> 00:09:37.910
Good. Now we have access to

00:09:37.910 --> 00:09:40.190
all this information before it disappears.

00:09:40.190 --> 00:09:42.890
We can now validate the name and the email,

00:09:42.890 --> 00:09:44.570
and check it in the correct format

00:09:44.570 --> 00:09:46.630
before sending it to the server.

00:09:46.630 --> 00:09:49.560
I'm just going to do a very simple validation check for

00:09:49.560 --> 00:09:51.780
this example to see if the user has

00:09:51.780 --> 00:09:54.720
entered a name using an if statement.

00:09:54.720 --> 00:09:57.270
We've not covered if statements just yet,

00:09:57.270 --> 00:10:00.570
but they are simply way to check if something is true.

00:10:00.570 --> 00:10:02.430
The way we can do this inside of

00:10:02.430 --> 00:10:04.050
our function is to access the if

00:10:04.050 --> 00:10:07.795
keyword and then place a condition inside the brackets.

00:10:07.795 --> 00:10:09.755
We want to check if the

00:10:09.755 --> 00:10:13.730
userName.value which is the text string,

00:10:13.730 --> 00:10:16.510
is equal to an empty string.

00:10:16.510 --> 00:10:19.590
If it is we'll open up some curly braces just like

00:10:19.590 --> 00:10:20.940
the function body and

00:10:20.940 --> 00:10:23.595
place in something which you want to run.

00:10:23.595 --> 00:10:26.130
Let's just place an alert which says

00:10:26.130 --> 00:10:29.080
Please enter your name,

00:10:29.830 --> 00:10:33.415
and then return out of this statement.

00:10:33.415 --> 00:10:36.105
Now, let's save this and

00:10:36.105 --> 00:10:39.240
reload the browser, hit the "Submit".

00:10:39.240 --> 00:10:42.015
Our alert has been run up at the top,

00:10:42.015 --> 00:10:49.800
let's try this with some data placed inside. There we go.

00:10:49.800 --> 00:10:52.895
Now the username has a value rather than an empty string.

00:10:52.895 --> 00:10:56.195
We no longer see this alert running inside the browser,

00:10:56.195 --> 00:10:58.940
so this gives us a chance to do whatever we want with

00:10:58.940 --> 00:11:01.630
the data before we send it to the server.

00:11:01.630 --> 00:11:04.610
Remember though since the page is no longer reloading,

00:11:04.610 --> 00:11:06.320
we also need to handle empty

00:11:06.320 --> 00:11:08.570
and these form inputs ourselves.

00:11:08.570 --> 00:11:11.345
This is also pretty simple, we can do this inside

00:11:11.345 --> 00:11:14.240
of our function just below the if statement.

00:11:14.240 --> 00:11:17.480
What we need to do is to grab our userName,

00:11:17.480 --> 00:11:21.835
access the value, and set this equal to an empty string.

00:11:21.835 --> 00:11:24.550
The same with the email,

00:11:25.010 --> 00:11:27.540
also to an empty string.

00:11:27.540 --> 00:11:30.080
Then below this we could go ahead and send this to

00:11:30.080 --> 00:11:33.125
our server with any way which you wanted to.

00:11:33.125 --> 00:11:34.940
Let's try this out. We can check

00:11:34.940 --> 00:11:36.665
the form inputs, we'll clear.

00:11:36.665 --> 00:11:42.875
Refresh, add in our data,

00:11:42.875 --> 00:11:45.630
hit "Submit" and it's all worked successfully.

00:11:45.630 --> 00:11:49.225
It also removes our name and the email data.

00:11:49.225 --> 00:11:51.230
It is common to see this thing

00:11:51.230 --> 00:11:53.180
when using frameworks or libraries.

00:11:53.180 --> 00:11:54.635
If you've ever used something like

00:11:54.635 --> 00:11:57.005
React or Vue.js in the past,

00:11:57.005 --> 00:11:58.670
you may have used this in the past when

00:11:58.670 --> 00:12:00.670
working with form inputs.

00:12:00.670 --> 00:12:03.350
Next, we're going to finish off our look at

00:12:03.350 --> 00:12:05.570
events by removing any events

00:12:05.570 --> 00:12:07.980
when they're no longer needed.
