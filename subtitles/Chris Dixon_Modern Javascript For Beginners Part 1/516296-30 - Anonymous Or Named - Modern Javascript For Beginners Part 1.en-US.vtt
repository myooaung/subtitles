WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.520 --> 00:00:03.570
In the past couple of videos,

00:00:03.570 --> 00:00:06.075
we've talked a bit about function expressions.

00:00:06.075 --> 00:00:07.470
When we've created these,

00:00:07.470 --> 00:00:09.570
we've left out the function name and

00:00:09.570 --> 00:00:12.540
therefore refer to these functions as anonymous.

00:00:12.540 --> 00:00:14.550
But is provided no

00:00:14.550 --> 00:00:17.710
function name the best approach to creating functions.

00:00:17.710 --> 00:00:19.820
Well, creating function without

00:00:19.820 --> 00:00:21.170
a name is certainly shorter,

00:00:21.170 --> 00:00:23.345
involves writing less code.

00:00:23.345 --> 00:00:26.720
We can also still run these functions when we want to.

00:00:26.720 --> 00:00:29.425
Why do we even add one name?

00:00:29.425 --> 00:00:31.295
Well, let's take a look in

00:00:31.295 --> 00:00:33.440
the starter files which is less than number 4

00:00:33.440 --> 00:00:38.095
for anonymous or names inside of the functions section.

00:00:38.095 --> 00:00:40.490
If we scroll down to the script section,

00:00:40.490 --> 00:00:42.680
we have two different arrays.

00:00:42.680 --> 00:00:45.770
We also have a example of a named function which

00:00:45.770 --> 00:00:48.995
is a regular function declaration which we've looked at.

00:00:48.995 --> 00:00:51.205
This involves creating a function,

00:00:51.205 --> 00:00:54.860
then we call this function whenever we want by this name.

00:00:54.860 --> 00:00:57.230
Then blow an anonymous example,

00:00:57.230 --> 00:01:00.020
and this example is referred to as anonymous.

00:01:00.020 --> 00:01:03.280
Since we don't pass the function and name directly.

00:01:03.280 --> 00:01:06.665
Instead, we created without name just like this,

00:01:06.665 --> 00:01:09.980
and then we store it inside of a variable.

00:01:09.980 --> 00:01:11.870
We also have some examples,

00:01:11.870 --> 00:01:14.585
blow this we'll come back to this later on.

00:01:14.585 --> 00:01:16.550
But what we are going to do is open up

00:01:16.550 --> 00:01:18.940
this file inside of the console,

00:01:18.940 --> 00:01:24.025
right-click, Inspect and then into the Console tab.

00:01:24.025 --> 00:01:26.944
When we have access to a function,

00:01:26.944 --> 00:01:29.600
functions have a property which is called name,

00:01:29.600 --> 00:01:32.020
and this is a read-only property.

00:01:32.020 --> 00:01:34.545
We can use this by first all

00:01:34.545 --> 00:01:36.150
accessing of function name which

00:01:36.150 --> 00:01:38.740
is number of ingredients.

00:01:39.650 --> 00:01:42.780
Then we can access the name.

00:01:42.780 --> 00:01:46.660
Hit Enter it is pretty simple and unsurprisingly,

00:01:46.660 --> 00:01:49.160
we ask for the name and we get the function name back.

00:01:49.160 --> 00:01:52.020
But what about instead,

00:01:52.020 --> 00:01:54.340
if we remove all this and we call

00:01:54.340 --> 00:01:57.860
our second function which was checked outages.

00:01:57.860 --> 00:02:00.610
As we know, this isn't directly a function name

00:02:00.610 --> 00:02:03.160
because we haven't passed it inside of here.

00:02:03.160 --> 00:02:04.540
But all we're doing here is

00:02:04.540 --> 00:02:07.150
storing this inside of a variable.

00:02:07.150 --> 00:02:09.755
What do you think we'll get back?

00:02:09.755 --> 00:02:14.430
Well, let's try this, bring this over.

00:02:14.430 --> 00:02:17.220
Then also called the name property.

00:02:17.220 --> 00:02:18.940
We can also see for this example,

00:02:18.940 --> 00:02:21.490
we get back the name of check Allergies.

00:02:21.490 --> 00:02:24.010
This may go against what you would expect

00:02:24.010 --> 00:02:27.005
because this doesn't have function name.

00:02:27.005 --> 00:02:29.480
The reason this happens is because of something

00:02:29.480 --> 00:02:31.910
called inferred function name.

00:02:31.910 --> 00:02:35.680
Since the function is stored inside of this variable,

00:02:35.680 --> 00:02:38.120
JavaScript has basically guessed that

00:02:38.120 --> 00:02:40.715
this is a name which you want to use for our function.

00:02:40.715 --> 00:02:43.850
As we start to understand functions and the way

00:02:43.850 --> 00:02:47.140
we can refer to them can take on many forms.

00:02:47.140 --> 00:02:49.370
This inferred name is not always

00:02:49.370 --> 00:02:51.775
reliable in some situations.

00:02:51.775 --> 00:02:53.315
There is certain times or

00:02:53.315 --> 00:02:56.690
edge cases when the name is not inferred.

00:02:56.690 --> 00:02:58.640
Other reasons you may want to add

00:02:58.640 --> 00:03:00.410
a specific name to the function

00:03:00.410 --> 00:03:04.250
is for debugging areas inside the console the series.

00:03:04.250 --> 00:03:07.705
But let's create a error inside of this function.

00:03:07.705 --> 00:03:09.470
Create an error here with

00:03:09.470 --> 00:03:11.495
includes and then just blow this,

00:03:11.495 --> 00:03:13.520
create a console log which has gone to

00:03:13.520 --> 00:03:15.470
log the value of check allergies.

00:03:15.470 --> 00:03:17.210
Then we also need to pass in the recipe

00:03:17.210 --> 00:03:19.350
and the ingredients.

00:03:19.850 --> 00:03:22.050
Just like the earlier examples,

00:03:22.050 --> 00:03:25.355
this is going to refer to our two arrays at the top.

00:03:25.355 --> 00:03:28.285
So we can access any of these.

00:03:28.285 --> 00:03:30.590
If we now say this and see what

00:03:30.590 --> 00:03:32.660
happens over in the console,

00:03:32.660 --> 00:03:34.060
we can see straight whether

00:03:34.060 --> 00:03:36.065
the Chrome Developer Tools has detected

00:03:36.065 --> 00:03:40.130
an error and take notes directly into the Sources tab.

00:03:40.130 --> 00:03:42.590
This has a lot of information and

00:03:42.590 --> 00:03:44.765
we can open this up to expand this.

00:03:44.765 --> 00:03:47.855
It points to lots of different parts of our code.

00:03:47.855 --> 00:03:49.580
But one of the things to watch out for is

00:03:49.580 --> 00:03:51.805
something called this call stack.

00:03:51.805 --> 00:03:53.420
This call stack is a way for

00:03:53.420 --> 00:03:55.970
the browser which is running the JavaScript to

00:03:55.970 --> 00:03:57.590
keep track of the functions which had been

00:03:57.590 --> 00:04:00.350
called and also they order to.

00:04:00.350 --> 00:04:02.690
It's pointing here to the check allergies

00:04:02.690 --> 00:04:06.525
function allows know exactly where the issue lies.

00:04:06.525 --> 00:04:09.635
But when we think about it in a slightly different way,

00:04:09.635 --> 00:04:11.645
check allergies which we have here,

00:04:11.645 --> 00:04:15.820
was intended to store the return value of this billion.

00:04:15.820 --> 00:04:17.600
Check allergies was never

00:04:17.600 --> 00:04:19.190
intended on being a function name.

00:04:19.190 --> 00:04:21.350
It was only ever intended on being

00:04:21.350 --> 00:04:24.335
available which holds a true or false value.

00:04:24.335 --> 00:04:26.240
This may start to confuse things

00:04:26.240 --> 00:04:28.705
especially in a bigger project.

00:04:28.705 --> 00:04:30.830
What we can do instead,

00:04:30.830 --> 00:04:32.540
we can create this constant

00:04:32.540 --> 00:04:34.075
to be a more descriptive name.

00:04:34.075 --> 00:04:38.750
We'll say includes bad ingredients.

00:04:38.780 --> 00:04:40.850
Then this is always going to be

00:04:40.850 --> 00:04:43.700
the true or false value and instead,

00:04:43.700 --> 00:04:47.045
we can pass in a function name just as normal.

00:04:47.045 --> 00:04:49.900
This splits up our two sections.

00:04:49.900 --> 00:04:52.520
We now have a function reference which will

00:04:52.520 --> 00:04:55.265
always point to all of this code just here.

00:04:55.265 --> 00:04:57.590
Then we have a true or false value which was

00:04:57.590 --> 00:05:00.565
originally intended as our variable.

00:05:00.565 --> 00:05:02.910
Now we've changed this variable name.

00:05:02.910 --> 00:05:04.770
We also need to copy this and

00:05:04.770 --> 00:05:07.290
change the name inside of our console Log.

00:05:07.290 --> 00:05:11.430
If we save this, and then refresh,

00:05:11.430 --> 00:05:13.630
again we've taken directly to the Sources tab

00:05:13.630 --> 00:05:16.000
because we still have this error.

00:05:16.000 --> 00:05:18.190
But now, if we take a look at the call stack,

00:05:18.190 --> 00:05:19.780
check Allergies now points to

00:05:19.780 --> 00:05:22.755
the function name rather than the variable.

00:05:22.755 --> 00:05:24.930
This is not any hard and fast rule.

00:05:24.930 --> 00:05:27.200
We don't have to add in a function name like this.

00:05:27.200 --> 00:05:28.480
If you may want to do this

00:05:28.480 --> 00:05:29.950
if you want some clear separation

00:05:29.950 --> 00:05:33.910
between the function reference and our variable name.

00:05:33.910 --> 00:05:35.590
Let's now scroll down to

00:05:35.590 --> 00:05:38.915
our second example inside of the comments.

00:05:38.915 --> 00:05:42.115
If we uncomment out all this section,

00:05:42.115 --> 00:05:44.200
this is the same example we used in

00:05:44.200 --> 00:05:46.945
the previous video to look at array methods.

00:05:46.945 --> 00:05:48.730
We have all blogposts,

00:05:48.730 --> 00:05:51.125
which is re-contained objects.

00:05:51.125 --> 00:05:53.370
Then below this we call it two separate methods.

00:05:53.370 --> 00:05:55.030
We have the map function,

00:05:55.030 --> 00:05:57.745
which is going to loop over all of the posts,

00:05:57.745 --> 00:05:59.950
transform the title to be uppercase,

00:05:59.950 --> 00:06:02.320
and then return the new value,

00:06:02.320 --> 00:06:05.440
chain onto the end defined index function,

00:06:05.440 --> 00:06:07.840
which is going to return an index number if

00:06:07.840 --> 00:06:10.715
a match for this uppercase title is found.

00:06:10.715 --> 00:06:12.790
There's quite a bit going on inside here.

00:06:12.790 --> 00:06:15.640
This section contains two anonymous functions.

00:06:15.640 --> 00:06:17.230
If there was an error inside of

00:06:17.230 --> 00:06:18.780
here, debugging may start,

00:06:18.780 --> 00:06:20.485
become a little bit difficult,

00:06:20.485 --> 00:06:23.420
especially if this section was even longer.

00:06:23.420 --> 00:06:25.060
Just before we check this out,

00:06:25.060 --> 00:06:26.980
I'm going to comment out the console log from

00:06:26.980 --> 00:06:30.470
above and also remove the error.

00:06:31.320 --> 00:06:34.775
This, we now have our single console log,

00:06:34.775 --> 00:06:38.365
which is get index, refresh.

00:06:38.365 --> 00:06:40.850
Just like with all were taken directly to

00:06:40.850 --> 00:06:43.340
the Sources tab because we have an issue.

00:06:43.340 --> 00:06:45.560
We can see it down in the call stack

00:06:45.560 --> 00:06:48.005
that the function name is anonymous.

00:06:48.005 --> 00:06:50.215
This is where the issue lies.

00:06:50.215 --> 00:06:53.780
Since both of these two function names are anonymous,

00:06:53.780 --> 00:06:55.850
we don't know exactly which one of

00:06:55.850 --> 00:06:58.870
these functions would be causing the issue.

00:06:58.870 --> 00:07:00.350
Of course if we look around

00:07:00.350 --> 00:07:01.580
all of the rest of the sections,

00:07:01.580 --> 00:07:04.160
we can get some additional clues to where the error

00:07:04.160 --> 00:07:07.270
lies with the pointers and not always obvious.

00:07:07.270 --> 00:07:08.900
It would be nice to immediately see

00:07:08.900 --> 00:07:11.575
which function is causing the issue.

00:07:11.575 --> 00:07:13.280
The issue lies here in

00:07:13.280 --> 00:07:15.770
the first function inside of the map.

00:07:15.770 --> 00:07:20.065
The problem is to uppercase needs to be a capital U.

00:07:20.065 --> 00:07:22.080
If you point exactly to

00:07:22.080 --> 00:07:24.410
this function inside of the developer tools.

00:07:24.410 --> 00:07:27.325
We can add a name to this function.

00:07:27.325 --> 00:07:31.580
First, we call this one transform to upper.

00:07:31.580 --> 00:07:34.670
Then a descriptive name for this anonymous function.

00:07:34.670 --> 00:07:37.920
Let's go for get Index from title.

00:07:38.630 --> 00:07:41.090
Now if we go back over to

00:07:41.090 --> 00:07:43.685
the developer tools again we see an error.

00:07:43.685 --> 00:07:45.860
But now straight away we can see we have a clue to

00:07:45.860 --> 00:07:48.200
which function is causing the issue.

00:07:48.200 --> 00:07:51.295
We can narrow this down to this section here.

00:07:51.295 --> 00:07:55.835
It's like RNA label to our function to help identify it.

00:07:55.835 --> 00:07:58.910
Lets fix this, changes there capital U.

00:07:58.910 --> 00:08:01.580
If you don't see any errors inside of

00:08:01.580 --> 00:08:03.170
the console and instead we see

00:08:03.170 --> 00:08:04.910
this returned value of two,

00:08:04.910 --> 00:08:06.410
which is the index number which

00:08:06.410 --> 00:08:09.040
matches this section just here.

00:08:09.040 --> 00:08:11.420
As with a lot of things, the choice of naming

00:08:11.420 --> 00:08:13.160
functions are leaving them as

00:08:13.160 --> 00:08:15.455
anonymous is completely your choice.

00:08:15.455 --> 00:08:17.960
Often it's not an issue to leave the name off

00:08:17.960 --> 00:08:21.545
and slightly reduce the amount of code which we write.

00:08:21.545 --> 00:08:23.150
But if you prefer to be more

00:08:23.150 --> 00:08:26.225
descriptive and want some extra pointers when deep again,

00:08:26.225 --> 00:08:27.710
you can add them to your functions

00:08:27.710 --> 00:08:29.790
to be more descriptive.
