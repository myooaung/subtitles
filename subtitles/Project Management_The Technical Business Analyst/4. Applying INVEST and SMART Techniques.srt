1
00:00:00,780 --> 00:00:03,800
Let's discuss the good traits of a user story.

2
00:00:03,800 --> 00:00:04,820
These are known as INVEST,

3
00:00:04,820 --> 00:00:09,820
since each of the words I will discuss spell out the word invest.

4
00:00:09,820 --> 00:00:10,384
Independent.

5
00:00:10,384 --> 00:00:14,607
Now, independence means that a story can be coded,

6
00:00:14,607 --> 00:00:16,840
tested, and even delivered all on its own.

7
00:00:16,840 --> 00:00:20,810
That is, it is not waiting for another story to be completed.

8
00:00:20,810 --> 00:00:24,670
And what also makes independence important is that

9
00:00:24,670 --> 00:00:26,820
it can be independently valued.

10
00:00:26,820 --> 00:00:27,262
Negotiable.

11
00:00:27,262 --> 00:00:31,929
A user story is a placeholder for requirements to be discussed

12
00:00:31,929 --> 00:00:33,810
and potentially accepted for development.

13
00:00:33,810 --> 00:00:36,302
In the traditional waterfall approach,

14
00:00:36,302 --> 00:00:38,810
requirements were basically contracted to implement.

15
00:00:38,810 --> 00:00:42,530
So a process of negotiation is conducted between the

16
00:00:42,530 --> 00:00:44,780
product owner and the development team.

17
00:00:44,780 --> 00:00:46,167
And very important here,

18
00:00:46,167 --> 00:00:50,120
each respects and jointly collaborates to arrive at

19
00:00:50,120 --> 00:00:51,770
the best approach and solution,

20
00:00:51,770 --> 00:00:55,790
aware of each other's potential limitations and strengths.

21
00:00:55,790 --> 00:00:56,219
Valuable.

22
00:00:56,219 --> 00:01:00,800
The full team's most important goal is to deliver the most value

23
00:01:00,800 --> 00:01:03,800
given their available resources and time certainly.

24
00:01:03,800 --> 00:01:08,790
Therefore, I will suggest to you that is one of the most important INVEST traits.

25
00:01:08,790 --> 00:01:12,170
Remember, the backlog is prioritized by value and value alone,

26
00:01:12,170 --> 00:01:14,790
hence the importance of this trait.

27
00:01:14,790 --> 00:01:19,850
Estimable, a good and well-written and discussed user story is estimable.

28
00:01:19,850 --> 00:01:22,820
Backlog items can be any size really.

29
00:01:22,820 --> 00:01:24,315
But let's face it,

30
00:01:24,315 --> 00:01:27,640
more decompose user stories are much more likely to be

31
00:01:27,640 --> 00:01:31,456
estimated with more accuracy in the event that you are facing a

32
00:01:31,456 --> 00:01:32,909
challenge of coming up with an estimate,

33
00:01:32,909 --> 00:01:36,414
then it may be likely that you need to decompose or break

34
00:01:36,414 --> 00:01:39,810
down the user story into smaller stories.

35
00:01:39,810 --> 00:01:40,309
Small.

36
00:01:40,309 --> 00:01:42,802
So how big is small?

37
00:01:42,802 --> 00:01:43,800
Well, small.

38
00:01:43,800 --> 00:01:47,770
That is a user story you can finish in one iteration.

39
00:01:47,770 --> 00:01:50,780
Most iterations that I have observed are two to three weeks.

40
00:01:50,780 --> 00:01:53,790
That gives you an order of magnitude from the lapsed time perspective.

41
00:01:53,790 --> 00:01:57,810
Smaller stories in your sprints are more likely to come out faster.

42
00:01:57,810 --> 00:01:58,211
Testable.

43
00:01:58,211 --> 00:02:01,820
In the agile world, all code is tested code.

44
00:02:01,820 --> 00:02:04,290
But if you think that the user story cannot be

45
00:02:04,290 --> 00:02:05,820
tested in the sprint or iteration,

46
00:02:05,820 --> 00:02:08,830
then it is quite likely that the story is not well-written,

47
00:02:08,830 --> 00:02:12,810
or maybe linked to other user stories, or just too complex.

48
00:02:12,810 --> 00:02:16,205
Vague and fuzzy words in user stories will usually come to

49
00:02:16,205 --> 00:02:18,830
light when discussing if something is testable.

50
00:02:18,830 --> 00:02:19,163
Okay,

51
00:02:19,163 --> 00:02:23,860
don't worry if not all six attributes apply to every one of your user stories.

52
00:02:23,860 --> 00:02:25,189
This is a guideline,

53
00:02:25,189 --> 00:02:28,522
so use the INVEST convention as a checklist against every

54
00:02:28,522 --> 00:02:31,977
user story you write and it will greatly improve your

55
00:02:31,977 --> 00:02:32,860
team's ability to write them.

56
00:02:32,860 --> 00:02:36,850
Now, better stories result in better outcomes,

57
00:02:36,850 --> 00:02:41,810
yielding value to the business much quicker.

58
00:02:41,810 --> 00:02:42,825
SMART, like INVEST,

59
00:02:42,825 --> 00:02:45,830
is a checklist of traits or characteristics to follow

60
00:02:45,830 --> 00:02:47,840
and order the right quality tasks.

61
00:02:47,840 --> 00:02:49,989
SMART is not for user stories,

62
00:02:49,989 --> 00:02:53,830
but for the technical tasks required to develop and complete a user story.

63
00:02:53,830 --> 00:02:57,810
These are written by the dev team and not by the technical BA normally.

64
00:02:57,810 --> 00:03:00,850
But for completeness, I felt it is important to include these.

65
00:03:00,850 --> 00:03:04,780
Please note the sample task at the bottom of the slide.

66
00:03:04,780 --> 00:03:07,780
Okay, the first is for S, specific.

67
00:03:07,780 --> 00:03:11,810
A task needs to be specific enough so that everyone can understand it.

68
00:03:11,810 --> 00:03:16,455
It helps to keep other tasks from overlapping and also helps people to

69
00:03:16,455 --> 00:03:19,780
understand either the tasks add up to the full story or not.

70
00:03:19,780 --> 00:03:23,810
In this example it seems quite specific enough, so check.

71
00:03:23,810 --> 00:03:26,770
The next is M for measurable.

72
00:03:26,770 --> 00:03:29,810
The key of measure is can we mark it as done?

73
00:03:29,810 --> 00:03:32,780
The development team needs to agree on what that means,

74
00:03:32,780 --> 00:03:36,275
but it should also include what is it intended to do,

75
00:03:36,275 --> 00:03:38,775
are tests included, is the code refactored,

76
00:03:38,775 --> 00:03:39,780
and things like that.

77
00:03:39,780 --> 00:03:42,860
So in this example, it seems specific enough, so check.

78
00:03:42,860 --> 00:03:44,163
A for achievable.

79
00:03:44,163 --> 00:03:48,850
The task owner must be able to achieve, that is complete the task.

80
00:03:48,850 --> 00:03:53,850
It may be achievable, but is it achievable within the time box of the sprint?

81
00:03:53,850 --> 00:03:56,256
If so, check, if not hmm,

82
00:03:56,256 --> 00:04:00,850
maybe then it's possible to decompose into more subtasks.

83
00:04:00,850 --> 00:04:02,614
Next, R for relevant.

84
00:04:02,614 --> 00:04:07,810
Every task must be relevant and contribute directly to the story.

85
00:04:07,810 --> 00:04:11,840
User stories are broken into tasks for the developer's benefit certainly,

86
00:04:11,840 --> 00:04:14,959
but the product owner should still be able to presume that

87
00:04:14,959 --> 00:04:18,412
each task can be justified and explained.

88
00:04:18,412 --> 00:04:20,770
Once again, check.

89
00:04:20,770 --> 00:04:22,121
Next, T for time-boxed.

90
00:04:22,121 --> 00:04:26,830
A task should be limited to a specific duration, and usually in hours.

91
00:04:26,830 --> 00:04:30,770
This doesn't need to be a formal estimate in hours or days,

92
00:04:30,770 --> 00:04:34,810
but there must be an expectation, so people know when they should seek help.

93
00:04:34,810 --> 00:04:37,770
If a task is harder than the expectation,

94
00:04:37,770 --> 00:04:40,441
then the team needs to split the task, change players,

95
00:04:40,441 --> 00:04:44,163
or do something to help the task, and therefore the story,

96
00:04:44,163 --> 00:04:44,850
get done.

97
00:04:44,850 --> 00:04:45,180
Also,

98
00:04:45,180 --> 00:04:49,850
in any part of your technical BA job if you are enumerating the list of tasks,

99
00:04:49,850 --> 00:04:51,800
well, why not follow this model?

100
00:04:51,800 --> 00:04:54,830
It can be applied on more than just tasks for user stories.

101
00:04:54,830 --> 00:05:02,000
If you'd like to know more about the SMART characteristics, check out the writings by Bill Wakes.

