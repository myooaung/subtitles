1

00:00:00,920  -->  00:00:08,070
Hi and wel come back in the city we're talking about binary trees a binary tree is another data structure

2

00:00:08,550  -->  00:00:14,560
that is not sequential like lists or stacks or cubes.

3

00:00:14,580  -->  00:00:17,250
So what is a binary tree.

4

00:00:17,250  -->  00:00:23,550
Well as I said is unlike any other data structure it is unlike a sequence of items or a group of items

5

00:00:23,550  -->  00:00:24,000
.

6

00:00:24,000  -->  00:00:28,190
It's a branching structure just like the tree would be.

7

00:00:28,530  -->  00:00:35,100
For example when you look at a tree out in nature I mean like a real tree it has branches and the branches

8

00:00:35,100  -->  00:00:40,200
then divide into more branches and that branch divides into more branches and so on.

9

00:00:40,350  -->  00:00:48,240
It is not never ending but it can branch a few times or also at the end of the branch you have leaves

10

00:00:49,110  -->  00:00:52,270
or nodes in the case of programming.

11

00:00:53,040  -->  00:01:01,890
In the case of programming binary trees have two branches in each part in each section where they branch

12

00:01:01,890  -->  00:01:02,660
out.

13

00:01:03,150  -->  00:01:12,330
So what is a tree could have one branch dividing into 10 other branches a binary tree each branch divided

14

00:01:12,360  -->  00:01:17,880
into two branches and then each of those branches divide into two more branches and so on.

15

00:01:18,390  -->  00:01:25,860
So at each division point we have a node and each node points to two other nodes which right child and

16

00:01:25,860  -->  00:01:33,700
its left child nodes are ordered with a key that we can select when we program our tree.

17

00:01:34,740  -->  00:01:42,660
And in all cases the right child will have a greater key than the parent and the left child helps apologies

18

00:01:45,630  -->  00:01:49,230
the left child will have a smaller kid in the parent.

19

00:01:49,290  -->  00:01:58,440
So to recap each node points to two other nodes the right node has a greater key on the left node has

20

00:01:58,440  -->  00:01:59,780
a smaller key.

21

00:01:59,820  -->  00:02:01,350
Now how does that work.

22

00:02:01,350  -->  00:02:02,530
Why is that important.

23

00:02:02,550  -->  00:02:12,120
Well let's imagine we have our tree out in nature and it have a trunk a sort of root and that root grows

24

00:02:12,120  -->  00:02:12,630
up.

25

00:02:12,690  -->  00:02:19,620
It's a single thing and then it divides into a few branches and then each branch divide into more with

26

00:02:19,620  -->  00:02:20,500
a binary tree.

27

00:02:20,610  -->  00:02:21,990
It is the same way.

28

00:02:21,990  -->  00:02:35,220
We also have a starting node and root node and greater nodes larger nodes always go to the right.

29

00:02:36,900  -->  00:02:43,580
So you can see the numbers are increasing and smaller nodes always go for the left.

30

00:02:45,250  -->  00:02:45,900
OK.

31

00:02:45,930  -->  00:02:53,280
Next Slide is going to have a smaller and a larger node as you can see 13 is larger than 10 and 8 is

32

00:02:53,280  -->  00:02:55,500
smaller than 10.

33

00:02:55,560  -->  00:03:03,920
So for any given node larger nodes always go to the right and smaller nodes always go to the left.

34

00:03:03,930  -->  00:03:11,280
Now when you see a tree out in nature each of the branches doesn't have a different size or weight or

35

00:03:11,280  -->  00:03:17,960
value so it's not exactly like a tree but the binary tree is useful.

36

00:03:18,090  -->  00:03:23,380
And we're going to see exactly in which scenarios it is useful.

37

00:03:23,490  -->  00:03:27,110
So a node and node points to to node it's right.

38

00:03:27,120  -->  00:03:33,750
Child and it's left child and the nodes are ordered with a key that we select the right child always

39

00:03:33,750  -->  00:03:38,400
has a greater key and the left child always has a smaller key.

40

00:03:38,400  -->  00:03:40,140
Let's look at why this can be interesting.

41

00:03:40,140  -->  00:03:42,270
Let's look at adding a new node.

42

00:03:42,540  -->  00:03:46,880
Let's say we have this tree here and we want to add a node to it.

43

00:03:47,460  -->  00:03:50,130
Let's say we want to add at the node 16.

44

00:03:50,640  -->  00:03:55,170
I'm sure you can already see where that node should go.

45

00:03:57,120  -->  00:03:58,700
But the computer cannot.

46

00:03:58,800  -->  00:04:06,210
So it's important that the computer knows how to get to the place where 16 should go.

47

00:04:07,110  -->  00:04:09,510
Let's make this larger for your convenience.

48

00:04:09,510  -->  00:04:16,420
And remember 16 is the nodo we're adding and we are at the root.

49

00:04:16,440  -->  00:04:21,560
We always start at the top of the tree or the bottom depending on which direction you want to go.

50

00:04:21,570  -->  00:04:27,880
But it doesn't matter where we stand at the root node larger nodes are to the right smaller nodes onto

51

00:04:27,930  -->  00:04:28,770
the left.

52

00:04:28,770  -->  00:04:35,180
So is 16 greater than 15 number 16 is the one we're adding.

53

00:04:35,940  -->  00:04:37,470
Well yes.

54

00:04:37,470  -->  00:04:45,210
So we go to the right now we are at 17 is 16 greater than 17.

55

00:04:45,900  -->  00:04:46,840
No.

56

00:04:46,860  -->  00:04:49,290
So what to do is now we go to the left.

57

00:04:49,290  -->  00:04:58,470
So everything shifts apart and we add another child child under 17 which is on the left and then we

58

00:04:58,470  -->  00:05:01,330
put the node 16.

59

00:05:02,460  -->  00:05:10,770
So my traversing the tree we have found or the program has found a way to put the node 16.

60

00:05:10,770  -->  00:05:16,720
This is a bit weird and a bit kind of surreal I would say am.

61

00:05:16,740  -->  00:05:24,990
How does the program know how these nodes are structured or which one is the child of which or how does

62

00:05:24,990  -->  00:05:26,860
it travel from one note to another.

63

00:05:27,060  -->  00:05:31,200
And we're going to be looking at all of those things in the programming video so please don't worry

64

00:05:31,500  -->  00:05:35,000
about the implementations or how the computer does things.

65

00:05:35,070  -->  00:05:40,920
Just what about you yourself understanding how a binary tree works.

66

00:05:41,350  -->  00:05:44,260
Again to add the new node we have a node that we're trying to add.

67

00:05:44,660  -->  00:05:51,120
And if it's key is greater than the current node such as the top node at the beginning then we go down

68

00:05:51,120  -->  00:05:53,690
to the right and we stop at the next node.

69

00:05:53,700  -->  00:05:56,650
And that now becomes the current node.

70

00:05:57,360  -->  00:06:00,240
If the key is smaller than the current node then we do the opposite.

71

00:06:00,270  -->  00:06:05,910
We go down to the left and make that the current node and then we check again and then we maybe go to

72

00:06:05,910  -->  00:06:07,640
the right or maybe go to the left again.

73

00:06:07,650  -->  00:06:16,400
And so if the key is the same we stop and we give an error because we don't want X in this tree.

74

00:06:16,440  -->  00:06:21,650
And finally if the current node is no then we can make that equal to the node that will it.

75

00:06:21,930  -->  00:06:30,360
So once we reach an empty node somewhere where there isn't a node then we can say OK there is no node

76

00:06:30,390  -->  00:06:35,580
here but there should be because this is know that we're trying to add should go there and then we put

77

00:06:35,580  -->  00:06:37,360
that new node in there.

78

00:06:37,650  -->  00:06:41,640
We're going to look at exactly how to do that soon.

79

00:06:41,640  -->  00:06:45,130
Finding a node is similar to adding a node.

80

00:06:46,200  -->  00:06:50,180
Once again if the key of the node we're looking for is greater than the current no we all to the right

81

00:06:50,200  -->  00:06:50,250
.

82

00:06:50,280  -->  00:06:55,800
And if not we go to the left and if the current node at any point is null it means that we've reached

83

00:06:55,860  -->  00:06:59,080
a branch but we haven't found that no.

84

00:06:59,130  -->  00:07:06,510
We're looking for and if at any point in our search the current nodes key is equal to the No the key

85

00:07:06,510  -->  00:07:10,610
of the node or trend we're looking for then and we have found the node.

86

00:07:11,610  -->  00:07:18,690
So to find just traverse the tree as normal looking for a value going left or right and eventually you

87

00:07:18,690  -->  00:07:25,050
will arrive at a node has of the key that you're looking for or you will not arrive at anoda has that

88

00:07:25,050  -->  00:07:30,960
key that you're looking for in which case you have not found a note to add a node just traverse the

89

00:07:30,960  -->  00:07:37,090
tree until you find an empty slot where the new node could go and put it.

90

00:07:38,060  -->  00:07:39,890
And that's everything for this video.

91

00:07:39,900  -->  00:07:44,610
Just wanted to quickly introduce to you the concept of binary trees how they're structured how they

92

00:07:44,610  -->  00:07:49,020
work and remember always go to the left if they're smaller.

93

00:07:49,020  -->  00:07:49,930
Always go to the right.

94

00:07:49,950  -->  00:07:51,360
If it's bigger.

95

00:07:51,590  -->  00:07:57,510
There's always going to allow some order in your tree which is great because computers love order it

96

00:07:57,510  -->  00:08:00,780
allows them to be very quick when doing things.

97

00:08:00,930  -->  00:08:06,350
When I look at how exactly that order affects us and affects our programs in the very next video.

98

00:08:06,510  -->  00:08:08,450
So I'll see you there.
