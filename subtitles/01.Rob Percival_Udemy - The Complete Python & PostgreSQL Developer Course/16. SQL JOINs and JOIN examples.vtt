WEBVTT
1

00:00:00.210  -->  00:00:05.630
Hi and welcome come back in this video we're looking at some sequel joined examples.

2

00:00:05.960  -->  00:00:12.330
Notice that the data that we've got in our sample data base is more complex than the data that we saw

3

00:00:12.330  -->  00:00:20.040
in the lecture video and that's nice because it's going to let us try out a joint with three tables

4

00:00:20.040  -->  00:00:21.300
.

5

00:00:21.300  -->  00:00:26.190
The first thing I wanted to do is to build the query step by step so you guys are confident that you

6

00:00:26.190  -->  00:00:31.620
understand exactly all of the different parts of the sequel the query.

7

00:00:32.220  -->  00:00:36.940
The first query that we've got here is select start from purchases.

8

00:00:36.960  -->  00:00:44.850
Remember our purchases table gives us a purchase ID an item ID and a customer ID.

9

00:00:45.030  -->  00:00:52.110
So the purchase is stable lets us get the item that was bought and the customer who bought that item

10

00:00:53.610  -->  00:00:54.780
the items table

11

00:00:57.990  -->  00:01:00.220
has the item name as well as the price.

12

00:01:00.240  -->  00:01:08.580
And naturally an ID as well on the Customers table Customers table has the first name and the last name

13

00:01:08.640  -->  00:01:09.880
as well as an IP.

14

00:01:09.930  -->  00:01:15.540
So the IDs in all these tables are used to link in here.

15

00:01:15.540  -->  00:01:17.300
In this purchase is table.

16

00:01:18.000  -->  00:01:28.410
That means that if I wanted to get those per those items that have been bought then I could do a join

17

00:01:29.280  -->  00:01:40.440
from items and then I want to join on purchases and find out which items have purchases associated with

18

00:01:40.440  -->  00:01:42.290
those items.

19

00:01:42.750  -->  00:01:47.610
Which type of join should I use for this should be a left join.

20

00:01:47.610  -->  00:01:49.260
Should it be a right to join.

21

00:01:49.290  -->  00:01:51.840
It to be a full join should it be enjoying

22

00:01:55.770  -->  00:01:59.980
the answer as I'm sure you got it is in join.

23

00:02:00.180  -->  00:02:08.160
That's because I want to give those items that have purchases associated with them and I don't want

24

00:02:08.610  -->  00:02:12.370
to get those items that have no purchases associated with them.

25

00:02:12.450  -->  00:02:19.680
So let's go over the difference once again I want to select from items in a joint purchases on items

26

00:02:19.680  -->  00:02:31.380
that ID equals purchases not item underscore ID and one that gives me is the items details and then

27

00:02:31.470  -->  00:02:34.940
links up with the purchase details there.

28

00:02:35.670  -->  00:02:39.030
If instead of in a joint I do a left join.

29

00:02:39.330  -->  00:02:45.590
What do you think is going to happen here.

30

00:02:45.900  -->  00:02:51.270
The answer is that I'm going to get the items that have no purchases associated with them too.

31

00:02:51.920  -->  00:02:58.290
So in this case I get a pin because I went back and deleted a purchase so I could show you this.

32

00:02:58.920  -->  00:03:06.360
If they do a left join I get all the data from items and then I have to it the purchase data.

33

00:03:06.360  -->  00:03:12.900
If there is a purchase date and because the pin has no purchases associated with it it doesn't have

34

00:03:12.930  -->  00:03:19.280
any rows in purchases with an item id of one then that is blank.

35

00:03:19.380  -->  00:03:27.060
If I do an inner join then the pain disappears because there's only data that matches in both tables

36

00:03:27.060  -->  00:03:30.030
.

37

00:03:30.560  -->  00:03:31.470
OK.

38

00:03:32.370  -->  00:03:40.320
Remember also that I'm doing items left join purchases left when purchases and that gives me the item

39

00:03:40.410  -->  00:03:41.550
and then poaches data.

40

00:03:41.550  -->  00:03:48.960
But I could also do purchases right join items and that gives me the same stuff but just the other way

41

00:03:48.960  -->  00:03:49.480
around.

42

00:03:49.560  -->  00:03:53.660
But the performance is identical and there is no real problem there.

43

00:03:54.030  -->  00:03:54.500
So I am.

44

00:03:54.570  -->  00:03:56.600
You can do it either way.

45

00:03:57.720  -->  00:04:03.420
OK now let's find out which customers did purchases.

46

00:04:04.050  -->  00:04:10.830
So I'm going to delete that and I'm going to let you pause the video and give it a go essentially find

47

00:04:10.830  -->  00:04:20.370
out which customers have purchases associated to them and which purchases they've got.

48

00:04:20.370  -->  00:04:21.910
And the answer I'm sure you've got it is.

49

00:04:21.930  -->  00:04:30.540
Select start from customers in a join purchases on customers thought Id equals purchaser's dot customer

50

00:04:30.720  -->  00:04:31.940
underscore ID.

51

00:04:32.220  -->  00:04:38.820
Notice that their own carry caps or not caps it doesn't matter when you do this.

52

00:04:38.820  -->  00:04:43.790
You get those customers that have purchases associated with them.

53

00:04:43.800  -->  00:04:47.020
Once again something you may want to try and will left join instead.

54

00:04:47.040  -->  00:04:51.500
And that's going to get customer data and then put the purchase data on it.

55

00:04:51.510  -->  00:04:58.800
If it matches and this happens quite often it bugs out it thinks there's some sort of error you have

56

00:04:58.800  -->  00:05:01.550
to retype the thing and then it works.

57

00:05:01.540  -->  00:05:02.380
So there we go.

58

00:05:02.460  -->  00:05:08.670
And that gives me the customers that have no purchases as well as those that do

59

00:05:12.890  -->  00:05:21.900
OK next stop let's see how we can get only the item data or rather only the customer data for those

60

00:05:21.900  -->  00:05:23.910
customers that have purchases.

61

00:05:23.910  -->  00:05:32.970
So we've got what we've got here is an in a joint and this gives me the customer data and the purchase

62

00:05:32.970  -->  00:05:33.680
date.

63

00:05:33.720  -->  00:05:35.820
So I'm not really concerned about purchase data.

64

00:05:35.820  -->  00:05:43.080
I just want to know which of my customers have made purchases what I could do here is instead of select

65

00:05:43.090  -->  00:05:50.310
stock I could do select customers dot first name Komer customers dot last name and what that's going

66

00:05:50.310  -->  00:05:55.350
to give me is the first name and last name of the customers that have date the have purchases rather

67

00:05:57.150  -->  00:06:01.680
and then again Rolf's Smith Rocksmith Michael out of Michael Adam Rick Scott Rick Scott Michael Adam

68

00:06:01.740  -->  00:06:03.860
.

69

00:06:03.930  -->  00:06:08.340
Now there's a few things that we could do to sanitize the data or remove duplicates things like that

70

00:06:08.340  -->  00:06:08.510
.

71

00:06:08.610  -->  00:06:11.520
We're going to be looking at those in the next few videos.

72

00:06:11.580  -->  00:06:14.600
But for now this is what we've got.

73

00:06:14.700  -->  00:06:20.430
Finally I also wanted to show you how you can do a joint using three tables simultaneously because that's

74

00:06:20.700  -->  00:06:23.450
something you're going to encounter quite often.

75

00:06:24.120  -->  00:06:32.460
I'm going to select stock from items now as you know this is going to just give me my items and then

76

00:06:32.460  -->  00:06:41.720
when I'm going to do is in a joint purchases on items that ID equals purchases no item on the ID unit

77

00:06:41.760  -->  00:06:47.490
where this is going to do it's going to give me my items and it's going to give me the purchases.

78

00:06:47.510  -->  00:06:49.140
And for those items.

79

00:06:49.200  -->  00:06:53.160
So it's only going to give me items that have purchases in them.

80

00:06:53.400  -->  00:06:58.290
So the pain is going to disappear and I'm going to get a bunch of duplicates for each of their purchases

81

00:06:58.290  -->  00:06:59.400
.

82

00:06:59.460  -->  00:07:00.620
So the pin has disappeared.

83

00:07:00.630  -->  00:07:02.390
You can see there's no pin in there.

84

00:07:02.940  -->  00:07:10.590
And we've got a fountain pen wise we've got hard drive twice we've put in twice and now each of these

85

00:07:10.590  -->  00:07:18.000
items also have a customer I.D. which is the customer that performed the purchase of this item.

86

00:07:18.000  -->  00:07:26.090
So now the resultant table which is this one here I can join that table with another table.

87

00:07:26.130  -->  00:07:35.490
So what I'll do is in adjoining customers on purchases dot customer ID equals customers ID.

88

00:07:36.000  -->  00:07:43.630
Do remember what I'm doing is I'm joining the customers table with the resultant table.

89

00:07:43.740  -->  00:07:46.840
I am not joining customers with purchases.

90

00:07:46.840  -->  00:07:49.050
I am not joining customers with items.

91

00:07:49.050  -->  00:07:54.610
What I'm doing is I'm performing this joint first and then I'm joining to it the customers table.

92

00:07:54.660  -->  00:08:01.970
So that is why in this join I have access to purchases dot customer ID because that's already been joined

93

00:08:02.020  -->  00:08:03.080
before.

94

00:08:03.780  -->  00:08:07.350
So when I press play when I get the same date as before.

95

00:08:07.350  -->  00:08:13.680
Up to here and then I get my customer data that has been joined onto that which is Ralph Smith rose

96

00:08:13.700  -->  00:08:21.330
Smith and so similarly just as before I could instead of select stock I could select specific columns

97

00:08:21.420  -->  00:08:23.440
if I was only interested in a few things.

98

00:08:23.520  -->  00:08:27.240
And indeed when you do a select like this you're probably only going to be interested in something which

99

00:08:27.240  -->  00:08:35.660
is customers not first name customers don't last name items start name items not price.

100

00:08:35.670  -->  00:08:36.550
Most likely.

101

00:08:36.810  -->  00:08:42.850
That's probably all you're interested in the customer's name and the item name of the item price.

102

00:08:42.980  -->  00:08:49.600
If we run that we can Rocksmith bought a screen for 275 and then he bought a hard drive for 1899 and

103

00:08:49.600  -->  00:08:57.780
showed what we are going to be looking in the next few videos is at how you can get the total spending

104

00:08:57.780  -->  00:08:57.820
.

105

00:08:57.850  -->  00:09:03.780
Author of Smith which would be adding these two together we're going to look at how many orders he did

106

00:09:04.050  -->  00:09:09.150
which we know is too but we're going to ask sequel to give us the count of orders and we are going to

107

00:09:09.240  -->  00:09:11.080
be learning how to do that.

108

00:09:11.170  -->  00:09:14.390
So there's still quite a lot that we can do for us.

109

00:09:14.400  -->  00:09:19.590
It's not limited to just data withdrawal but it can also perform some operations on the data.

110

00:09:19.590  -->  00:09:23.450
And we're going to look at how we can do those things in the next few videos.

111

00:09:24.090  -->  00:09:30.690
So I do apologize for the long video and it was quite a lot to process and joins are essential essential

112

00:09:30.690  -->  00:09:35.220
for relational databases so it's very important that you know the different types and how they work

113

00:09:35.220  -->  00:09:35.580
.

114

00:09:35.580  -->  00:09:43.800
My suggestion going to PD admin and do a bunch of Joines and play around with them until you fully understand

115

00:09:44.250  -->  00:09:48.480
and inherently get what they are about and how they work.

116

00:09:48.480  -->  00:09:52.120
Once you've done that please move on to the next video and I'll be seeing you your
