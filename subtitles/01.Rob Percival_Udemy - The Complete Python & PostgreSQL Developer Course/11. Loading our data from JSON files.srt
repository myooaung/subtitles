1

00:00:00,690  -->  00:00:07,000
Hi will come back in this video we're going to be loading from an adjacent file.

2

00:00:07,020  -->  00:00:12,050
What I'm going to do is I'm going to work the other way around.

3

00:00:12,180  -->  00:00:17,820
I'm going to first define what my laptop is going to do and then I'm going to implement the methods

4

00:00:17,820  -->  00:00:23,040
in user and movie to match that we've got my file that takes the.

5

00:00:23,310  -->  00:00:25,460
Which has the Jesus that we want to load.

6

00:00:25,560  -->  00:00:26,630
So I'm going to change this.

7

00:00:26,640  -->  00:00:32,570
OPEN TO BE IN read mode which is going to then allow me to read the file.

8

00:00:32,610  -->  00:00:41,870
Now if the file pointer to a file that can be read because we were using read more than me the Jason

9

00:00:41,890  -->  00:00:49,500
rende the data that we're reading in which is now a dictionary when we load it is going to be Jasen

10

00:00:49,920  -->  00:00:56,850
don't load F and Jason data is now a python dictionary.

11

00:00:56,940  -->  00:01:02,510
I'm going to go into my follow to actually look at how we're watched in the movie is false.

12

00:01:02,790  -->  00:01:04,690
With a lowercase f.

13

00:01:04,800  -->  00:01:10,590
When we load it that's going to be Python false with the uppercase f it's going to be proper boolean

14

00:01:10,590  -->  00:01:11,600
stuff.

15

00:01:11,910  -->  00:01:15,320
So we're no longer dealing with big strings and CACs.

16

00:01:15,450  -->  00:01:20,990
Now we've got a better data structure in the background dealing with this stuff.

17

00:01:21,090  -->  00:01:23,410
So we've got a python dictionary there.

18

00:01:24,170  -->  00:01:33,440
And now what I'm going to do is say user from Jason Jason Day and I'm going to see user is that

19

00:01:36,850  -->  00:01:37,600
OK.

20

00:01:37,700  -->  00:01:47,630
So let's create that method that's going to use up and create the from Jason method from GX.

21

00:01:50,070  -->  00:01:55,290
Now I think you guys are able to actually complete this fully.

22

00:01:55,290  -->  00:02:03,390
I don't think you need my help at all because what we have to do now is get the Jason data that is a

23

00:02:03,390  -->  00:02:08,910
dictionary and we can access things like Jason data name because you know this is a dictionary.

24

00:02:08,910  -->  00:02:11,090
This is how we access things in a dictionary.

25

00:02:11,430  -->  00:02:18,780
If we go into my father 60 you know that name is somewhere in here there of the end also as an aside

26

00:02:18,990  -->  00:02:21,230
remember Jason is not ordered.

27

00:02:21,480  -->  00:02:24,000
So the name can be at the end or it can be at the beginning.

28

00:02:24,090  -->  00:02:31,110
It doesn't matter because this is a set a set of key value pairs and remember sets are an ordered.

29

00:02:32,010  -->  00:02:34,530
So we've got the name there and we've got Jose.

30

00:02:34,560  -->  00:02:38,600
So if we go into our user Jason Deighton name we'll give you Jose.

31

00:02:38,850  -->  00:02:46,650
So now you can make this a class method you can load up and create a new user give it to the username

32

00:02:46,770  -->  00:02:49,420
from Jackson data and you can do the same with movies.

33

00:02:49,530  -->  00:02:55,190
I would recommend giving yourself a few minutes and actually doing this.

34

00:02:55,350  -->  00:02:57,330
Convert this to a class method.

35

00:02:57,330  -->  00:03:00,920
Use decent data to create the user and the movies.

36

00:03:01,080  -->  00:03:07,380
Put the movies in the User object and then return that to be honest I think you can do all that if you

37

00:03:07,380  -->  00:03:14,960
give yourself some time pause a video and go for it because by doing will be the best way to learn.

38

00:03:17,610  -->  00:03:22,390
Now hopefully you've attempted that and I'm sure you've succeeded.

39

00:03:22,410  -->  00:03:28,740
I'm going to make this into a class method and I'm going to call this CLX because that's the standard

40

00:03:28,750  -->  00:03:29,140
.

41

00:03:29,820  -->  00:03:36,650
And what I'm going to do is say user is user Jason data name.

42

00:03:37,800  -->  00:03:49,820
And then the movies are going to be an empty list for more for movie in self Tom not of the movies my

43

00:03:49,940  -->  00:03:50,100
.

44

00:03:50,160  -->  00:03:53,930
Jason Dade adult movies isn't the movies.

45

00:03:55,350  -->  00:04:04,930
I'm going to say movies not Penn movie and the movie details are in this movie dictionary.

46

00:04:05,040  -->  00:04:06,650
We are iterating over.

47

00:04:06,820  -->  00:04:13,000
Jason Chordata movies which is here and it's a list.

48

00:04:13,000  -->  00:04:18,470
So when we read off the list each of the elements in the list is a dictionary.

49

00:04:18,560  -->  00:04:23,460
So are we going to get that dictionary and then we're going to get this dictionary which tells us that

50

00:04:23,460  -->  00:04:29,110
movie's going to be a dictionary that has the details that we saved the genre watched.

51

00:04:29,180  -->  00:04:41,620
I mean so this is going to be movie movie name movie Shannara movie watched.

52

00:04:41,850  -->  00:04:45,550
And we don't have to do any Boullion conversion because that's already a.

53

00:04:46,380  -->  00:04:51,210
Finally user Daut movie is movies return user

54

00:04:55,050  -->  00:04:57,010
and I'm sure you got that as well.

55

00:04:57,870  -->  00:05:01,530
Just read over the movies penned each movie.

56

00:05:01,560  -->  00:05:08,120
Object to that list and then send that to me the use of movies and finally return user.

57

00:05:08,160  -->  00:05:14,070
Let's go back into our app and print you said Jason because that's going to give us everything we need

58

00:05:14,460  -->  00:05:16,170
to verify that it worked.

59

00:05:16,440  -->  00:05:19,810
Let's press play and there we have it.

60

00:05:20,160  -->  00:05:20,940
Movies.

61

00:05:21,210  -->  00:05:30,120
And then the name of the end doesn't matter whether name is let's However improve this a wee bit something

62

00:05:30,120  -->  00:05:40,990
I don't like is the fact that I have to instantiate the movie object inside of user inside user.

63

00:05:41,040  -->  00:05:46,980
Instantiating a movie object and you won't feel this way yet because of lack of experience but to me

64

00:05:46,980  -->  00:05:49,510
that just feels a bit like the bit wrong.

65

00:05:49,890  -->  00:05:56,680
It feels like the users shouldn't really be creating movie objects that it's loaded from a file.

66

00:05:56,700  -->  00:06:05,190
I think the movie should have a from Jason method as well and that should be used to load up the movie

67

00:06:05,190  -->  00:06:06,320
from Hajis.

68

00:06:07,050  -->  00:06:08,110
So I'm going to go into that.

69

00:06:08,160  -->  00:06:09,450
I'm going to go into a movie.

70

00:06:09,450  -->  00:06:15,470
My class movie and create a class method which is going to be from Jason that except some Jason data

71

00:06:16,890  -->  00:06:28,620
and what it returns is a movie with Jason data name Jason data John-Roger and Giese and data watched

72

00:06:31,260  -->  00:06:33,800
assuming that Jason data has the right keys.

73

00:06:33,810  -->  00:06:43,740
Naturally then we go back to our user what we are pained to this movie's list is movie don't from Jason

74

00:06:44,700  -->  00:06:48,120
movie and this movie remember is a dictionary.

75

00:06:48,330  -->  00:06:54,660
I'm going to rename movie just so it's a bit clearer by pressing shift f six shift an F six Let's me

76

00:06:54,660  -->  00:06:55,680
rename something.

77

00:06:55,680  -->  00:06:57,130
Movie date.

78

00:06:58,050  -->  00:07:00,270
And that gets renamed in both places.

79

00:07:00,270  -->  00:07:05,820
So where we are spending now is movie from Jason which creates the movie object but we don't create

80

00:07:05,820  -->  00:07:08,050
it here in the user which looks a bit ugly.

81

00:07:08,070  -->  00:07:15,720
Instead we're telling the movie see how you can deal with it Jason yourself and the good thing about

82

00:07:15,720  -->  00:07:24,050
that is if we do then and more properties of the movie and we change the Jason method we change the

83

00:07:24,060  -->  00:07:27,900
from Jason method then this bit will work here.

84

00:07:27,900  -->  00:07:34,320
The user is not concerned with what properties are in a movie it's just concerned with calling from

85

00:07:34,320  -->  00:07:37,560
Jason if we want to make changes to the properties of a movie.

86

00:07:37,710  -->  00:07:42,600
We have to make the changes in this file and not in the user file.

87

00:07:42,600  -->  00:07:45,670
And that's always a good thing.

88

00:07:45,780  -->  00:07:51,870
With that said I know that this was also a long way to you but it was essential to make sure that there

89

00:07:51,870  -->  00:07:57,480
was an explanation of the complete flow of loading from a Jason File.

90

00:07:57,990  -->  00:08:03,540
What we're going to be looking at in the next video is argument unpacking which is exciting and also

91

00:08:03,540  -->  00:08:04,650
it's a bit confusing.

92

00:08:04,650  -->  00:08:07,750
So I don't want to put it in this video which means I'll see you in the next one
