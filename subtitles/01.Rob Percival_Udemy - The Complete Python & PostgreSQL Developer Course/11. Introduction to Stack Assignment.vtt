WEBVTT
1

00:00:00.270  -->  00:00:05.280
High we'll come back and there's video we're looking at the stack assignment which is going to be fairly

2

00:00:05.280  -->  00:00:11.750
similar to the Q assignment only We're going to be implementing a stack in stand now.

3

00:00:12.120  -->  00:00:18.570
We've learned a stack is and we know it's really similar to Q Except instead of adding and removing

4

00:00:18.570  -->  00:00:22.670
from opposite ends the stack adds and removes from the same end.

5

00:00:22.910  -->  00:00:24.040
I can be the start.

6

00:00:24.150  -->  00:00:32.340
Or it can be the end in this assignment we're going to be implementing four methods one method inside

7

00:00:32.340  -->  00:00:41.340
the linked list which is remove start from list and it's going to add sorry and remove the first node

8

00:00:41.670  -->  00:00:45.900
of the linked list and I'm not sure why there's an out there now but nevertheless.

9

00:00:46.260  -->  00:00:52.230
And that three methods from the stack which are going to be push pop and boolean which are the standardized

10

00:00:52.230  -->  00:00:55.690
names for these actions.

11

00:00:56.280  -->  00:01:01.190
The only complicated method here is the remove start from list and it's not really that difficult either

12

00:01:01.200  -->  00:01:01.460
.

13

00:01:01.500  -->  00:01:04.690
So let's have a look at some pseudocode.

14

00:01:04.860  -->  00:01:09.210
Ramba the removed start from list is going to remove the root.

15

00:01:09.600  -->  00:01:14.870
And that's going to be happening by making it points to its own next node.

16

00:01:15.000  -->  00:01:18.130
But you have to remember to return the removed node as well.

17

00:01:18.600  -->  00:01:23.910
So here we're going to do if the root does not have a value already.

18

00:01:24.090  -->  00:01:25.780
That means it is none.

19

00:01:25.860  -->  00:01:28.290
We're going to raise an error because the list is empty.

20

00:01:28.320  -->  00:01:29.760
The root is none.

21

00:01:30.450  -->  00:01:38.130
If not then we can set a new variable called removed node and make it equal to the root and then make

22

00:01:38.130  -->  00:01:41.670
sure that the root of this list is equal to the roots.

23

00:01:41.670  -->  00:01:49.030
Next node that skips its own root and makes it equal to the next node.

24

00:01:49.080  -->  00:01:53.880
And finally we return the remove node which is the one we stored earlier.

25

00:01:54.090  -->  00:01:57.040
The stack methods we just call the linked list methods.

26

00:01:57.040  -->  00:02:02.130
So there's really nothing new there except renaming them essentially.

27

00:02:02.380  -->  00:02:06.720
And finally you can get started by just downloading the zip file and doing as usual.

28

00:02:06.740  -->  00:02:12.870
So just go ahead download that and open it up and we will be ready to begin.

29

00:02:12.870  -->  00:02:14.480
Let's look at the code that is in there.

30

00:02:14.490  -->  00:02:20.850
Just quickly so you can have a bit more of an idea as to what I'd expect you to do.

31

00:02:20.850  -->  00:02:25.880
I've opened the VI assignment here in pide charm and you will see something like this.

32

00:02:25.980  -->  00:02:30.280
That for files linked list that we know and love the link stack.

33

00:02:30.300  -->  00:02:33.180
Which is going to be the stack a node on the tests.

34

00:02:33.180  -->  00:02:34.420
Let's look at the node first.

35

00:02:34.440  -->  00:02:36.060
Just so you know what you're dealing with.

36

00:02:36.480  -->  00:02:43.770
And in this case the node only has a piece of text that can be any text just names phone numbers or

37

00:02:43.950  -->  00:02:45.430
anything like that.

38

00:02:45.840  -->  00:02:49.670
And it also has the underscore underscore next which is the next node.

39

00:02:49.680  -->  00:02:57.590
As you know and there's the set next and get next and also some print detail methods and that's it really

40

00:02:57.590  -->  00:02:57.720
.

41

00:02:57.780  -->  00:03:03.300
There's not much new insight to know so let's go right into the linked list.

42

00:03:03.300  -->  00:03:09.890
The linked list has the things that we already know the root which is initialized to none in the unit

43

00:03:09.900  -->  00:03:13.710
method and they get Taruta method which we don't have.

44

00:03:13.710  -->  00:03:18.410
We've used before but nevertheless is there so we can retrieve the root if we need to.

45

00:03:19.230  -->  00:03:24.750
And then we have the ABS start to list which you can reuse the method from the last assignment.

46

00:03:24.840  -->  00:03:28.630
I would encourage you to not copy and paste it but write it again.

47

00:03:28.710  -->  00:03:30.560
But you can do whatever you choose.

48

00:03:30.750  -->  00:03:35.250
The remove start from list would is going to remove it from the beginning and what that is going to

49

00:03:35.250  -->  00:03:38.810
do is if the root is none.

50

00:03:39.090  -->  00:03:42.100
We're going to raise an error because the list is empty.

51

00:03:42.390  -->  00:03:45.850
Then we're going to create a variable which stores the route we're going to set.

52

00:03:45.870  -->  00:03:48.840
Self don't root to be equal to the roots.

53

00:03:48.840  -->  00:03:50.100
Next note.

54

00:03:50.220  -->  00:03:56.280
And finally we're going to return the variable we created previously and then the find method which

55

00:03:56.280  -->  00:03:57.210
you can reuse.

56

00:03:57.240  -->  00:04:01.790
The one we implemented before and the size method which you can also reuse again.

57

00:04:02.010  -->  00:04:06.490
Do write those again as opposed to copying and pasting.

58

00:04:06.510  -->  00:04:13.020
Finally we've also got the linked stack which is just a stack a wrapper around the linked list.

59

00:04:13.050  -->  00:04:19.020
This is an object which has a property linked list which is a linked list and that it has a few methods

60

00:04:19.050  -->  00:04:24.640
push pull on the lane which are going to be pretty much identical to the last assignment.

61

00:04:24.720  -->  00:04:31.500
Remembering to call the appropriate methods at to start and remove from start and the Len should just

62

00:04:31.500  -->  00:04:33.970
call the size.

63

00:04:34.070  -->  00:04:35.370
Funnily as usual.

64

00:04:35.400  -->  00:04:41.640
Once you are ready just right click the tests file and run the unit tests and you should see 9 tests

65

00:04:41.690  -->  00:04:43.110
all passed.

66

00:04:43.170  -->  00:04:47.820
If you don't that means something went wrong somewhere and you can have a look at the code again.

67

00:04:47.820  -->  00:04:48.710
Have a look at the test.

68

00:04:48.720  -->  00:04:54.360
If you want although it's not written for you it's written just for your verification.

69

00:04:54.420  -->  00:04:56.530
Or ask a question in the course Q and A.

70

00:04:56.730  -->  00:05:00.760
As I'm always there to respond to anything and that's it really.

71

00:05:00.840  -->  00:05:01.660
Give it a go.

72

00:05:01.710  -->  00:05:07.530
In the very next answer lecture which has the text contents of the assignment and downloadable files

73

00:05:08.160  -->  00:05:13.080
and once you are ready and once you feel like you've implemented this correctly please go on to the

74

00:05:13.080  -->  00:05:17.320
following video which will cover the implementation.

75

00:05:17.610  -->  00:05:18.560
That's it for this video.

76

00:05:18.630  -->  00:05:22.120
So good luck and see you in the next one.
