1

00:00:00,370  -->  00:00:04,290
And will come back in this video we're going to be talking about dates.

2

00:00:04,350  -->  00:00:10,570
Dates have always been a problem in databases and there's a few reasons for that.

3

00:00:10,590  -->  00:00:14,430
The first reason is that dates can be formatted in many ways.

4

00:00:14,430  -->  00:00:23,390
For example the American way to format a date would be something like this where 2005 is the year 10

5

00:00:23,400  -->  00:00:24,070
is the month.

6

00:00:24,090  -->  00:00:30,330
October 10 is the day so I will be the 10th of October 2005.

7

00:00:30,330  -->  00:00:39,270
They can be formatted like soap where 10 is the day 10 is the month and 2005 is a year that can also

8

00:00:39,270  -->  00:00:45,350
be formatted like so where 10 is the month 10 is the day 2005 is the year.

9

00:00:46,080  -->  00:00:50,010
And many other ways like this one and so on.

10

00:00:50,080  -->  00:00:57,200
Anyway that's one of the problems some of those formats are ambiguous which makes it a problem.

11

00:00:57,600  -->  00:01:02,460
The second problem is that dates can have a time zone attached to them.

12

00:01:02,490  -->  00:01:10,860
For example the data right now is 21st of May 6 o'clock but if you were watching this live which you

13

00:01:10,860  -->  00:01:14,610
evidently are not the date for you could be different.

14

00:01:14,610  -->  00:01:16,950
It could be 21st of May 8:00.

15

00:01:17,070  -->  00:01:23,880
If you were in GMT or it could be 9:00 if you were in Russia in time.

16

00:01:23,880  -->  00:01:25,730
I think so.

17

00:01:26,040  -->  00:01:30,180
I'm not really good when my time comes but nevertheless I hope you get the gist of it which is that

18

00:01:30,810  -->  00:01:35,960
the current time is not the same depending on the user.

19

00:01:36,000  -->  00:01:37,750
So that's also a problem.

20

00:01:37,800  -->  00:01:43,820
Your database and doesn't necessarily know which timezone is correct for the user.

21

00:01:44,850  -->  00:01:52,290
And the third is a big issue which is daylight saving and when the clocks go forward or backward for

22

00:01:52,290  -->  00:01:59,340
an hour which is done so that we have more daylight and during the day so we can save money and electricity

23

00:01:59,800  -->  00:02:05,640
will lose or gain an hour there in the middle of the night which is unaccounted for.

24

00:02:05,730  -->  00:02:08,030
And our data base doesn't know that that's going to happen.

25

00:02:08,040  -->  00:02:12,220
It doesn't know what to do with an extra hour or without missing hour.

26

00:02:12,270  -->  00:02:19,780
So during those days whether daylight saving occurs you're going to suddenly have a gap of an hour.

27

00:02:19,830  -->  00:02:25,850
And your data or you're going to suddenly have double the amount of data for that hour.

28

00:02:25,950  -->  00:02:30,380
And because you can the hours won't happen twice.

29

00:02:30,420  -->  00:02:36,300
So these problems are reasonably large problems and they make dates a bit of a pain to deal with in

30

00:02:36,300  -->  00:02:38,640
databases.

31

00:02:38,820  -->  00:02:47,490
I recommend that you store dates in your database without timezone information and then when a user

32

00:02:47,490  -->  00:02:55,770
retrieves data from the database the database or your Python application can convert that times on with

33

00:02:55,860  -->  00:03:02,760
and that that time and date without a timezone information into a date and time with time and information

34

00:03:02,760  -->  00:03:03,420
.

35

00:03:03,420  -->  00:03:04,990
Here's what I mean.

36

00:03:05,220  -->  00:03:13,310
Say that I am in British time which I am which is an hour ahead or behind I think I think as I had it

37

00:03:13,340  -->  00:03:17,800
which is an hour ahead of the universal time at least right now.

38

00:03:18,240  -->  00:03:25,950
When I save a date to the is the date Icesave is going to be an hour earlier.

39

00:03:25,950  -->  00:03:33,600
So if I were to see the current date which is 6 o'clock I would want to say 5:00 because that is the

40

00:03:34,200  -->  00:03:37,520
date time without a time zone attached to it.

41

00:03:37,680  -->  00:03:44,280
When I retrieve the data it should say six o'clock but if I went to Russia and I retrieve the data then

42

00:03:44,280  -->  00:03:48,910
as you say 9:00 or 10:00 or whatever it is.

43

00:03:48,910  -->  00:03:55,170
So that's a solution to the problem of time and depending on where your users are your application can

44

00:03:55,170  -->  00:04:03,020
convert a naive date time a day time without time zones into a date time with times.

45

00:04:04,570  -->  00:04:12,000
OK the other two solutions we're going to be exploring throughout this video possible sequel has a few

46

00:04:12,000  -->  00:04:20,640
data types that are used to store dates and times and they are things like time stamp date time and

47

00:04:20,700  -->  00:04:21,640
interval.

48

00:04:21,960  -->  00:04:24,790
These are the four main data types.

49

00:04:24,930  -->  00:04:35,850
Let's say that I want to select a timestamp I can do select timestamp and then I can give it am which

50

00:04:36,210  -->  00:04:39,060
time it should convert from.

51

00:04:39,060  -->  00:04:44,820
So what I'm going to do now is I'm going to see possible sequel give me a timestamp coming from this

52

00:04:44,910  -->  00:04:45,640
day.

53

00:04:45,900  -->  00:04:55,770
So the day that I'm going to put in is 2005 of October 10th and it's going to be for example 5 am at

54

00:04:55,830  -->  00:04:57,750
16 minutes and 45 seconds

55

00:05:01,500  -->  00:05:06,670
and here's where we got exactly what I put in naturally.

56

00:05:07,320  -->  00:05:17,100
But I'm telling you that this is 2005 October 10th but it could equally be 2005 10th of October if these

57

00:05:17,100  -->  00:05:19,530
days we're different.

58

00:05:19,590  -->  00:05:26,170
So to make it clear this is the 8th of October and not the 10th of August.

59

00:05:26,500  -->  00:05:29,530
So this is the format that you should be using.

60

00:05:29,580  -->  00:05:39,990
This is ISO 8 6 0 or 1 which defines the standard of dates stored in databases which is year month day

61

00:05:40,120  -->  00:05:48,410
hour minute second and optionally milliseconds they add are the but that's optional.

62

00:05:48,480  -->  00:05:53,090
Ideally if you can use this format and that it's going to save you a lot of trouble because possumus

63

00:05:53,090  -->  00:05:55,390
sequel is going to use it by default as well.

64

00:05:55,920  -->  00:05:59,850
If you want to use a different format then you're going to have to do a bunch of changes.

65

00:05:59,910  -->  00:06:05,670
So I recommend that you stick to the format that is by default even though it's the American format

66

00:06:05,670  -->  00:06:05,810
.

67

00:06:05,940  -->  00:06:11,130
If you're not in America it may feel a bit strange to use this but nevertheless it is the default.

68

00:06:11,340  -->  00:06:18,810
And I would recommend using it this is part of the standard AM and it's one of the least ambiguous dates

69

00:06:18,850  -->  00:06:20,640
.

70

00:06:20,670  -->  00:06:33,160
OK let's talk about and how you can convert a timestamp into a more readable string.

71

00:06:33,930  -->  00:06:40,650
Here's how you save or how you figure it out and read timestamped.

72

00:06:40,770  -->  00:06:48,720
But now we want to convert a timestamp into a readable string that isn't necessarily like like this

73

00:06:48,750  -->  00:06:49,330
.

74

00:06:49,890  -->  00:06:52,900
So the first thing is to select now.

75

00:06:54,190  -->  00:06:58,160
And what that does is it gives us the current data and time.

76

00:06:58,870  -->  00:07:08,730
So you can see it on 16 May 21st six 15 15 seconds and a bunch of nanoseconds there were milliseconds

77

00:07:08,740  -->  00:07:09,820
.

78

00:07:10,440  -->  00:07:18,300
If we want to display this string in a nice format for example because I'm in the UK I would like to

79

00:07:18,390  -->  00:07:20,160
see the days first.

80

00:07:20,430  -->  00:07:21,590
We can do that.

81

00:07:21,720  -->  00:07:31,720
We select now which is the current time and we can enclose it in a to underscore car to character.

82

00:07:32,060  -->  00:07:38,640
And this is going to convert the NOW function into a character but naturally we have to tell it the

83

00:07:38,640  -->  00:07:41,640
format that we want to display it as.

84

00:07:41,880  -->  00:07:48,720
So after that now we put it coma and then inside quotation marks we're going to type in the format that

85

00:07:48,720  -->  00:07:51,160
we want the date to be displayed.

86

00:07:51,470  -->  00:07:54,690
As I said I'm in the UK and I won the days first.

87

00:07:54,690  -->  00:08:00,270
So I type D in caps and that stands for day of the month.

88

00:08:00,840  -->  00:08:05,930
So if I pressed play then I get 21 which is the current day of the month.

89

00:08:06,450  -->  00:08:13,320
And then I can say Dasch or indeed any other separator M M and I press play and that's going to give

90

00:08:13,320  -->  00:08:16,490
me 21 0 5 which is the 21st of May.

91

00:08:16,990  -->  00:08:25,530
And then I can do dash Y Y Y Y all in caps and that's going to give me the year as 4 digits.

92

00:08:25,530  -->  00:08:29,340
I can also only use two if you prefer although that's a bit confusing.

93

00:08:29,340  -->  00:08:37,180
Now if it was 20 21 then it could be the 16th of May of 2021 depending on what sort of data you are

94

00:08:37,170  -->  00:08:39,660
using.

95

00:08:39,680  -->  00:08:49,360
Ok then we can do something like ours and that will give us the hours and I'm going to separate my hours

96

00:08:49,360  -->  00:08:50,960
and minutes and seconds using a colon.

97

00:08:50,970  -->  00:08:56,900
But it doesn't have to be a colon if you don't want an eye for minutes.

98

00:08:57,210  -->  00:08:58,630
Next to me 17.

99

00:08:59,040  -->  00:09:04,090
And finally as as four seconds and that gives me the number of seconds

100

00:09:06,630  -->  00:09:11,130
optionally I can also do day like so just day.

101

00:09:11,380  -->  00:09:14,560
And that gives me an error.

102

00:09:15,150  -->  00:09:16,460
Now we go now.

103

00:09:16,470  -->  00:09:25,740
Gives me the day off of the week and notice how there's a space after the AM Saturday and before the

104

00:09:25,750  -->  00:09:27,880
coma but there isn't one up there.

105

00:09:28,220  -->  00:09:36,310
And that's because the longest day of the week is Thursday I think Wednesday probably Wednesday and

106

00:09:36,660  -->  00:09:40,090
that is one character more than Saturday.

107

00:09:40,150  -->  00:09:46,470
So in order to make it so all the days of the week are the same length Pascua adds a space at the end

108

00:09:46,870  -->  00:09:54,390
of those weekdays that are not as long as the longest weekday and we can get rid of them by adding em

109

00:09:54,850  -->  00:10:01,930
in front of day FM and that just removes the fill mode and it removes the space at the end so that you

110

00:10:01,920  -->  00:10:06,100
can see I've pressed play and that's disappeared.

111

00:10:07,200  -->  00:10:10,600
And there's this a few other things you can do.

112

00:10:10,600  -->  00:10:17,680
For example month and then you get to May and once again and probably September or maybe December or

113

00:10:17,670  -->  00:10:19,770
November are the longest months.

114

00:10:19,870  -->  00:10:26,510
So we can put him there again.

115

00:10:26,500  -->  00:10:40,770
And you know we can Saturday AM DD th and TH and simply substitutes into now the appropriate ending

116

00:10:41,080  -->  00:10:41,930
for DD.

117

00:10:41,970  -->  00:10:42,890
That's quite smart.

118

00:10:42,900  -->  00:10:50,670
So is Saturday Twenty-First me and so on and so we could now remove the day in the month and we could

119

00:10:50,670  -->  00:10:53,260
end up with something like that.

120

00:10:53,280  -->  00:11:01,370
So as you can see it's not difficult to convert these dates into a correct.

121

00:11:01,670  -->  00:11:06,420
Not correct but rather more readable string or character.

122

00:11:06,900  -->  00:11:08,080
So that's quite useful.

123

00:11:08,080  -->  00:11:10,600
And also we can do it the other way around.

124

00:11:10,650  -->  00:11:15,190
So I'm going to copy all of this if I can.

125

00:11:15,750  -->  00:11:18,500
And what I'm going to do is the opposite just to show you how it's done.

126

00:11:18,780  -->  00:11:20,420
Instead of two car.

127

00:11:20,450  -->  00:11:30,910
When to say to timestamp to timestamp like so and instead of now we're going to put in here the timestamp

128

00:11:31,000  -->  00:11:39,670
that we got from here as you can see because I printed out this timestamp using this format then you

129

00:11:39,660  -->  00:11:46,350
should be able to reverse itself and read a timestamp using this form.

130

00:11:47,670  -->  00:11:53,680
And naturally it doesn't look like it unless I retype it.

131

00:11:53,730  -->  00:11:55,020
So there you go.

132

00:11:55,200  -->  00:12:02,750
Now it's home selected the appropriate time stamp thing.

133

00:12:03,510  -->  00:12:12,490
Notice how it says plus 0 1 because I am in use in BSD which is British Standard Time which adds an

134

00:12:12,480  -->  00:12:13,010
hour.

135

00:12:13,260  -->  00:12:15,790
And on top of UTC.

136

00:12:15,930  -->  00:12:18,050
So that's why that's happening there.

137

00:12:19,070  -->  00:12:20,060
OK.

138

00:12:20,520  -->  00:12:26,220
So this is how you can select the current time stamp using And now the function.

139

00:12:26,220  -->  00:12:31,500
Now how you can convert it to a string and how you can do the opposite.

140

00:12:31,770  -->  00:12:39,700
As long as you provide the correct format as the formatting string and a string which displays the time

141

00:12:40,140  -->  00:12:41,980
in the correct format.

142

00:12:42,040  -->  00:12:49,770
So once again we could do 2015 10 10 or 1 or 2 or 3.

143

00:12:50,280  -->  00:12:58,790
And if we run this we get an error because this format here is not in the correct form any.

144

00:12:59,160  -->  00:13:08,100
So from what we've seen so far you should already be able to recall how you could convert this to a

145

00:13:08,100  -->  00:13:08,820
time stamp.

146

00:13:08,910  -->  00:13:14,930
What is the format string that should go in here in order to be able to convert this timestamp there

147

00:13:15,000  -->  00:13:19,290
.

148

00:13:20,860  -->  00:13:31,770
And the answer is Y Y Y Y for the year M M for the month DD for the day H.H. for the hour am I for a

149

00:13:31,780  -->  00:13:43,500
minute and s s for the seconds and then as you can see we get the time stamp and that's everything for

150

00:13:43,500  -->  00:13:44,190
this video.

151

00:13:44,250  -->  00:13:54,520
But we have attached a PTF that has a bit more information for you to download and printout or have

152

00:13:54,510  -->  00:14:00,000
a look at and it shows just a bit of a reference as to how you might go about this.

153

00:14:00,100  -->  00:14:06,120
And also has some information about operations that you can do and functions that you can use on dates

154

00:14:06,120  -->  00:14:06,410
.

155

00:14:06,450  -->  00:14:11,700
I'm not going to go into it in the video because I haven't really found much use to it but nevertheless

156

00:14:11,700  -->  00:14:16,920
I wanted to give you a document that outlines some of the things you can do and just for your benefit

157

00:14:16,930  -->  00:14:17,410
.

158

00:14:17,880  -->  00:14:20,540
So with that said Thanks for watching and I'll see you on the next video
