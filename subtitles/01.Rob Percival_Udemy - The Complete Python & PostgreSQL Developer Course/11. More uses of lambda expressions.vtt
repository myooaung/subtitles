WEBVTT


00:00:00.110  -->  00:00:04.350
I will come back in this with you will talk in a bit more about lammed as I'm going to give you a few

2

00:00:04.350  -->  00:00:10.740
more examples just to give you a bit more experience about lambdas and about programming in general

3

00:00:10.740  -->  00:00:11.970
.

4

00:00:11.970  -->  00:00:14.950
First things first I'm going to clean up this code a bit.

5

00:00:15.120  -->  00:00:23.970
So just to remove some unnecessary things from there I'm going to go back to our code.

6

00:00:24.000  -->  00:00:30.540
Are they closer to the end of the last video and just go over it once more.

7

00:00:30.540  -->  00:00:36.960
What we've got here is we've created an older method which takes in a set of values an array a list

8

00:00:37.500  -->  00:00:43.890
and a check function which is a lambda expression or a function that we've defined elsewhere.

9

00:00:44.460  -->  00:00:51.660
And then we use English comprehension create a new list where the values in the list are each of the

10

00:00:51.660  -->  00:00:54.710
values in the original list.

11

00:00:54.840  -->  00:01:03.630
If the check function is true for that specific value down here we can hold that value with the list

12

00:01:03.930  -->  00:01:07.030
with numbers from 1 to 5 and the lambda expression was.

13

00:01:07.200  -->  00:01:11.330
X is not equal to 5 for numbers 1 to 4.

14

00:01:11.460  -->  00:01:12.960
They were not equal to 5.

15

00:01:13.020  -->  00:01:18.140
So they were included in the final list but the number 5 is equal to 5.

16

00:01:18.300  -->  00:01:22.920
So this is not true which means it was not included.

17

00:01:22.920  -->  00:01:30.380
Finally we printed that and we saw the numbers 1 2 4 come out and we can see.

18

00:01:31.050  -->  00:01:37.950
Now I wanted to mention a special Python method called the filter method here as a sort of guest of

19

00:01:38.010  -->  00:01:38.840
honor.

20

00:01:39.390  -->  00:01:44.520
In other programming languages that do not have list comprehension they will sometimes use the filter

21

00:01:44.520  -->  00:01:49.120
method the filter method does exactly the same as this list comprehension does.

22

00:01:49.320  -->  00:01:53.010
But instead of having the values then the iteration.

23

00:01:53.010  -->  00:01:58.820
And finally the check the filter method has to check first and then the values.

24

00:01:58.860  -->  00:02:00.610
And it does exactly the same thing.

25

00:02:00.690  -->  00:02:15.090
If we do return a list of that if we return a list of the filtered values we can't the same as our list

26

00:02:15.090  -->  00:02:16.220
comprehension.

27

00:02:16.590  -->  00:02:19.720
And as you can see down there.

28

00:02:19.720  -->  00:02:26.910
So what this is doing is it's filtering using the check function over the set of values passed in the

29

00:02:26.910  -->  00:02:30.180
second parameters the check is the first parameter the values.

30

00:02:30.180  -->  00:02:35.810
The second parameter and that returns a filter object which we then can convert to a list.

31

00:02:36.090  -->  00:02:40.510
And that just time gives us a list of values.

32

00:02:41.120  -->  00:02:41.400
OK.

33

00:02:41.400  -->  00:02:47.460
So these two are the same thing but normally in python we use list comprehension it's more pythonic

34

00:02:47.700  -->  00:02:51.150
than Python and through she asks I think it's more readable.

35

00:02:51.360  -->  00:02:55.770
So if you agree and you want to use list comprehension instead then that's what you should do.

36

00:02:55.920  -->  00:03:00.480
It's more pythonic thing to do but in other programming languages and if you're working with people

37

00:03:00.480  -->  00:03:07.560
who come from other backgrounds sometimes using the filter method may be more beneficial for everybody

38

00:03:07.560  -->  00:03:08.010
.

39

00:03:08.010  -->  00:03:12.930
So just take that into account remember these two are identical and we normally use less comprehension

40

00:03:12.960  -->  00:03:15.580
but either is fine.

41

00:03:16.890  -->  00:03:17.380
OK.

42

00:03:17.520  -->  00:03:23.570
Now that we have the old method which is essentially just calling the filter method really.

43

00:03:23.680  -->  00:03:29.520
But now that we've gone that we can use that to learn a bit more about things that we can do using lambda

44

00:03:29.520  -->  00:03:36.060
functions sort of things that might need to be useful in some instances for example especially useful

45

00:03:36.060  -->  00:03:40.260
one might be a method to remove numbers from a string

46

00:03:44.670  -->  00:03:49.970
like so we have a method called remove numbers takes in a value.

47

00:03:50.190  -->  00:03:54.190
And what this method is going to do is going to return the result of the ultimate.

48

00:03:54.210  -->  00:04:01.820
And for that value the lambda function is going to be one that you are going to be programming now.

49

00:04:01.830  -->  00:04:09.840
So what we want to do is to iterate over each of the values which we're doing here and only include

50

00:04:09.840  -->  00:04:11.310
the value in the list.

51

00:04:11.550  -->  00:04:17.030
If it is not a number and that way we will remove the numbers.

52

00:04:17.670  -->  00:04:23.610
So we want this lambda function to check whether X is a number or not.

53

00:04:24.270  -->  00:04:31.570
The way we want to do with the way we want it to work is we want to return true if x is not a number

54

00:04:32.220  -->  00:04:36.820
and we want to return false if x is a number.

55

00:04:37.170  -->  00:04:42.510
So there's lambda function should return whether X is not a number.

56

00:04:43.050  -->  00:04:45.330
Go ahead and post the video and try that.

57

00:04:45.330  -->  00:04:47.750
And please take your time.

58

00:04:47.790  -->  00:04:52.920
Go on the internet go on Google find how to do it by doing it yourself and learning it like that is

59

00:04:52.920  -->  00:04:58.800
going to stick a lot better and then come back and we'll go over it and I'll go over how I did it and

60

00:04:58.800  -->  00:04:59.160
why

61

00:05:03.370  -->  00:05:09.450
well kids are hopefully you got that what we are going to do is check that X is not a number.

62

00:05:10.080  -->  00:05:13.360
So we're going to do x not in.

63

00:05:14.010  -->  00:05:18.030
And then in four and in range 10.

64

00:05:19.020  -->  00:05:23.250
So what this does is first of all we create a new list.

65

00:05:23.310  -->  00:05:27.220
This list has in four and in range 10.

66

00:05:27.210  -->  00:05:33.880
So what range 10 does is it gives us the values from 0 to 9 and then we create a list using those values

67

00:05:33.880  -->  00:05:33.960
.

68

00:05:33.970  -->  00:05:41.430
So we have a list of numbers from 0 to 9 and then we're returning that X is not inside to that list

69

00:05:41.440  -->  00:05:42.160
.

70

00:05:42.660  -->  00:05:49.930
So it will return true if x is not one of the digits between 0 9 it will return false if X is one of

71

00:05:49.920  -->  00:05:57.190
the deeds and that's all we want because we want to make sure that the values are only included if x

72

00:05:57.250  -->  00:05:59.520
is not one of the numbers.

73

00:06:00.040  -->  00:06:05.850
However remember that and for n in range 10 is going to return a list of integers and not of strings

74

00:06:05.860  -->  00:06:06.190
.

75

00:06:06.190  -->  00:06:10.990
So normally we will want to convert this to a string.

76

00:06:11.010  -->  00:06:18.720
And finally we can print something like hell 5 low but we want to remove the numbers from it or remove

77

00:06:18.720  -->  00:06:21.860
numbers like so.

78

00:06:22.020  -->  00:06:27.400
And what this will do is remove the numbers from the string here which gets passed in as value it goes

79

00:06:27.390  -->  00:06:32.800
into the altar method alongside this function and this function is going to only return true if each

80

00:06:32.790  -->  00:06:37.970
of the characters is a set each string which actually not a digit.

81

00:06:37.990  -->  00:06:43.980
So when we check that here in the list comprehension we are going to only include the values that pass

82

00:06:43.990  -->  00:06:49.390
the check and the junkie's that X is not a digit.

83

00:06:49.470  -->  00:06:53.490
Please do pause the video and take your time to think about this.

84

00:06:53.500  -->  00:06:56.850
Make sure you understand what's going on and think like the computer.

85

00:06:57.060  -->  00:06:58.830
What is going to happen with age.

86

00:06:58.950  -->  00:07:00.280
Where is it going to get checked.

87

00:07:00.270  -->  00:07:04.910
What does the check method do understand every little step that you can think of.

88

00:07:05.280  -->  00:07:10.170
But of course if anything does not make sense or you have any questions please do ask away as I'm always

89

00:07:10.170  -->  00:07:11.970
here to help.

90

00:07:12.030  -->  00:07:12.830
Let's run this.

91

00:07:12.880  -->  00:07:19.830
And as you can see we do get the hello word even though it's a list because this thing here builds the

92

00:07:19.830  -->  00:07:24.520
list and it is without the five.

93

00:07:24.510  -->  00:07:31.570
Also remember that for vowel in values is going to be iterating over each of the characters of the string

94

00:07:31.560  -->  00:07:31.970
.

95

00:07:32.070  -->  00:07:40.990
Strings are not lists but they are also iterable You can also iterate over them using a for loop.

96

00:07:41.000  -->  00:07:46.730
Another potentially interesting method could be one to skip a certain letter.

97

00:07:49.560  -->  00:07:56.200
And what this will do is skip one of the letters in our string so it will return old and then value

98

00:07:56.670  -->  00:07:58.930
and then the lambda expression.

99

00:07:59.190  -->  00:08:02.350
The way I'm going to call this method is Skip letter.

100

00:08:03.100  -->  00:08:06.680
Hello E for example.

101

00:08:06.800  -->  00:08:12.690
And what I expect to come out is H L L O with Albert E.

102

00:08:12.700  -->  00:08:15.990
So I expect you to be skipped.

103

00:08:16.050  -->  00:08:21.420
So another question is What do you think the lambda function is going to have to be in order to skip

104

00:08:21.540  -->  00:08:25.190
the E.

105

00:08:28.480  -->  00:08:29.720
Hopefully you got that.

106

00:08:29.980  -->  00:08:36.570
The lambda expression is going to be X is not equal to B

107

00:08:39.210  -->  00:08:46.300
but instead of sticking to e only Let's use the letter parameter which in our case is e.

108

00:08:46.330  -->  00:08:48.200
But it could be anything else.

109

00:08:48.210  -->  00:08:49.370
Now we're going to run this.

110

00:08:49.550  -->  00:08:57.550
And as you can see we get H L L O without the E which is what we wanted.

111

00:08:57.540  -->  00:09:04.270
So now we've learned about a couple of things we've learned about the filter method and we've also looked

112

00:09:04.260  -->  00:09:11.220
at a couple more examples on how we can use lambda expression how we can build them to do certain number

113

00:09:11.230  -->  00:09:13.930
of things such as removing numbers skipping letters.

114

00:09:13.920  -->  00:09:23.950
We can do things like them potentially skipping symbols in a string or removing full stops or removing

115

00:09:23.940  -->  00:09:24.960
commas.

116

00:09:25.020  -->  00:09:27.580
You know we can do all sorts of things with these.

117

00:09:27.900  -->  00:09:33.880
But the most important thing is to remember just that lambda functions can be passed from one function

118

00:09:33.880  -->  00:09:39.580
to another as parameters and arguments and that can be sometimes really useful and we're going to be

119

00:09:39.580  -->  00:09:43.910
looking at exactly when it can be really useful.

120

00:09:44.000  -->  00:09:50.850
With more examples in the next figure we're going to be looking at a bit more of the sort of example

121

00:09:51.340  -->  00:09:56.730
in the next video instead of sticking to the filter function which is only used to remove values.

122

00:09:56.860  -->  00:10:01.280
We're going to look at another function which is sometimes more useful.

123

00:10:01.500  -->  00:10:03.730
So I won't say any more.

124

00:10:03.780  -->  00:10:05.060
I'll see you in the very next video.

125

00:10:05.140  -->  00:10:10.170
Well we're going to be looking at another set of examples and hopefully you'll find that very interesting

126

00:10:10.170  -->  00:10:11.040
as well.

127

00:10:11.070  -->  00:10:13.090
I'll see you in the next one.
