WEBVTT
1

00:00:00.170  -->  00:00:04.770
Time will come back in this video we're quickly going to talk about the cereal type.

2

00:00:05.190  -->  00:00:10.920
We've learned how to create auto incrementing fields by using sequences.

3

00:00:10.920  -->  00:00:13.960
And that was a bit complicated and required a few steps.

4

00:00:14.310  -->  00:00:22.350
Fortunately now that we know how that works I can tell you that Pascua sequel has a shortcut so you

5

00:00:22.350  -->  00:00:24.030
don't have to create a sequence.

6

00:00:24.090  -->  00:00:30.660
And you know and give it to the owner and set it to start at a certain number and things like that instead

7

00:00:30.670  -->  00:00:43.540
when you create your table to medical test you can just type in an ID type serial and that creates the

8

00:00:43.540  -->  00:00:48.110
sequence for you and all that stuff.

9

00:00:50.430  -->  00:00:55.430
So this would create an auto incriminating IDs starting from 1.

10

00:00:55.470  -->  00:00:57.500
I think maybe it's zero.

11

00:00:58.230  -->  00:00:59.610
One of those I think is one.

12

00:01:00.030  -->  00:01:05.940
And then a name column which is a text and text is just the same as character varying but it doesn't

13

00:01:05.940  -->  00:01:09.330
have an upper limit in terms of the size.

14

00:01:09.330  -->  00:01:16.530
So if you want to limit the size remember to use connecter varying then you can add card to varying

15

00:01:16.560  -->  00:01:19.970
and then you can type in the upper limit of the size of the field.

16

00:01:20.140  -->  00:01:23.630
And but if you don't want an upper limit you can use text.

17

00:01:23.670  -->  00:01:28.370
So this creates a serial type and it gives it a primary key constraint.

18

00:01:28.650  -->  00:01:31.060
And then the street name there

19

00:01:35.100  -->  00:01:38.510
and naturally have to retype that.

20

00:01:38.850  -->  00:01:39.730
And there we go.

21

00:01:39.750  -->  00:01:47.250
So that creates your table and then when we insert into Test am and here we are going to only specify

22

00:01:47.250  -->  00:01:54.850
the name remember that name values Jose.

23

00:01:56.730  -->  00:02:00.520
And of course this has to be a single quotation mark apologies

24

00:02:03.220  -->  00:02:08.320
and then that gives it the ID one.

25

00:02:08.340  -->  00:02:10.250
So it is one it is not zero.

26

00:02:10.700  -->  00:02:11.150
OK.

27

00:02:11.310  -->  00:02:16.550
So this is how you can simplify that sequence and auto incrementing IDs.

28

00:02:16.620  -->  00:02:23.790
But I did not want to introduce this to you initially because the sequence is how the serial type is

29

00:02:23.790  -->  00:02:29.070
beat in the background so it is important that you know that the sequence is there in the background

30

00:02:29.520  -->  00:02:33.710
and therefore And that's how the ID is generated.

31

00:02:34.100  -->  00:02:39.690
And this one is only going to generate numbers one after another and and that's it.

32

00:02:39.690  -->  00:02:46.230
So the sequence itself does not guarantee unique and numbers being generated it just guarantees that

33

00:02:46.230  -->  00:02:47.460
there one after another.

34

00:02:47.880  -->  00:02:53.460
So if you want to make sure that the ID is always unique you can give it the primary key constraint

35

00:02:53.820  -->  00:02:57.320
or you can give it a unique constraint in the case of this table.

36

00:02:57.330  -->  00:02:59.610
We've given it to the primary key constraint.

37

00:02:59.640  -->  00:03:05.380
So if the cereal field generates a number that is already there it will just go into the next one.

38

00:03:05.520  -->  00:03:07.000
So that's going next as well.

39

00:03:07.630  -->  00:03:08.140
OK.

40

00:03:08.280  -->  00:03:09.280
That's everything for this video.

41

00:03:09.330  -->  00:03:11.430
That's how you use the serial data type.

42

00:03:11.520  -->  00:03:13.180
And I'll see you on the next video.
