WEBVTT
1

00:00:00.140  -->  00:00:04.620
High we'll come back in this video we're looking at implementing the binary tree.

2

00:00:04.620  -->  00:00:08.300
And I hope that you did attempt that on your own first.

3

00:00:09.450  -->  00:00:12.270
Hopefully you did and hopefully your tests passed.

4

00:00:12.270  -->  00:00:16.470
And then there's not much that you have to do in this video except have a look at what I've done and

5

00:00:16.470  -->  00:00:19.890
why I've done the things that I've done and maybe learn something.

6

00:00:19.890  -->  00:00:24.570
Or maybe you think your solution is better and you can put something in the course Q&A.

7

00:00:24.660  -->  00:00:30.600
And I'm always interested in looking at your solutions and maybe we can all learn a thing or two.

8

00:00:31.020  -->  00:00:35.170
I gave you quite a lot of code already for the binary tree.

9

00:00:35.220  -->  00:00:40.260
It's a bit more complicated than the linked list based data structures which is why I wanted to help

10

00:00:40.260  -->  00:00:41.730
you out a bit more.

11

00:00:42.270  -->  00:00:47.790
So what we're going to be doing in this video is just implementing those things that raised not implemented

12

00:00:47.790  -->  00:00:49.600
errors.

13

00:00:50.160  -->  00:00:58.500
Remember the added method should add a note to the binary tree following the path that is suitable.

14

00:00:58.500  -->  00:01:07.350
For example if we have a root node that is something like has a value 5 and then it has a left no Has

15

00:01:07.350  -->  00:01:08.630
the value for.

16

00:01:08.790  -->  00:01:12.320
And then we want to add a node with the value 3.

17

00:01:12.450  -->  00:01:19.880
The node should go to the root then move over to the left and finally get added to the left of the 4

18

00:01:19.900  -->  00:01:20.650
.

19

00:01:21.420  -->  00:01:29.190
If it was the opposite and 5 pointed in its right to 6 and we wanted to add a node say 7 then we would

20

00:01:29.190  -->  00:01:30.150
start at the root.

21

00:01:30.210  -->  00:01:36.310
We would move to the right and then we would add the 7 to the right of 6.

22

00:01:36.990  -->  00:01:43.960
If we had five point to eight which is to the right and we wanted to add seven we would solve the root

23

00:01:43.960  -->  00:01:44.200
.

24

00:01:44.310  -->  00:01:51.660
We would go to the right and then we would add 7 to the left of 8 but I'm sure you all know this already

25

00:01:51.680  -->  00:01:51.760
.

26

00:01:51.770  -->  00:01:53.460
That was just a refresher.

27

00:01:53.850  -->  00:01:57.260
And that's what going to be doing in this video.

28

00:01:57.300  -->  00:02:02.660
We've got the ad method which I'm going to delete that for now and we've got a couple of comments.

29

00:02:02.670  -->  00:02:06.560
If the route is none we'd have to sent to the root to be the new node.

30

00:02:06.720  -->  00:02:09.770
That's because there is no left and right at the very beginning.

31

00:02:09.810  -->  00:02:12.060
There's only one massive trunk.

32

00:02:12.090  -->  00:02:16.450
If you wish in a normal tree and this is the root the root is empty.

33

00:02:16.470  -->  00:02:17.650
There is nothing there.

34

00:02:17.910  -->  00:02:25.770
We'll just set the route to be the new node but if the route does have a value already then we have

35

00:02:25.770  -->  00:02:30.350
to start iterating and seeing whether we have to go left or right.

36

00:02:30.420  -->  00:02:34.330
We start by creating a variable called marker and setting that to either route.

37

00:02:34.860  -->  00:02:41.400
And then while marker has a value we can iterate if at any point we reach a moment where the market

38

00:02:41.400  -->  00:02:44.640
doesn't have a value then we're going to be adding a mode.

39

00:02:44.970  -->  00:02:47.480
OK let's implement that here.

40

00:02:47.550  -->  00:02:53.190
First of all if the nodes value the where we're adding if than the one where adding value is equal to

41

00:02:53.190  -->  00:02:59.400
the marker's value that means we've made a mistake or something like that because we don't want duplicate

42

00:02:59.400  -->  00:03:01.290
values in a binary tree.

43

00:03:01.290  -->  00:03:02.790
Where would it go.

44

00:03:03.240  -->  00:03:07.820
There's only left for smaller values and right for larger values.

45

00:03:07.980  -->  00:03:11.330
If the value is equal there is no place for it.

46

00:03:11.370  -->  00:03:15.450
It can't go directly under or anything like that.

47

00:03:15.600  -->  00:03:18.830
So here it raised are not implemented because we were meant to implement this.

48

00:03:18.960  -->  00:03:20.890
But it should really raise a value error.

49

00:03:20.910  -->  00:03:31.470
That's a more suitable exception so let's raise a value error and say a node with that value with that

50

00:03:31.500  -->  00:03:34.890
value Franek already exists.

51

00:03:34.890  -->  00:03:36.430
There we go.

52

00:03:36.810  -->  00:03:42.240
If the nodes value is greater than the marker's value it means the node we're adding should be going

53

00:03:42.240  -->  00:03:46.330
towards the right.

54

00:03:46.410  -->  00:03:52.230
So what we're going to do is see if the markers right node is empty.

55

00:03:52.230  -->  00:03:56.500
If there is a slot then if not Mark or donga right.

56

00:03:56.640  -->  00:04:02.850
This means if the markers right node doesn't have a value that means that it has spaces there for the

57

00:04:02.850  -->  00:04:04.090
new node.

58

00:04:04.380  -->  00:04:12.320
When say marker set right then you know it and return this return just returns.

59

00:04:12.330  -->  00:04:17.700
None is the same thing but we can just leave it as the returned keyword and that just means exit the

60

00:04:17.700  -->  00:04:18.960
method and end.

61

00:04:19.110  -->  00:04:20.670
Really.

62

00:04:20.670  -->  00:04:25.890
Else we're going to say Markert equal marker get right.

63

00:04:25.950  -->  00:04:31.100
So if the markers right is empty then we're going to set it right.

64

00:04:31.110  -->  00:04:34.630
Note to be the new node because there was a space there for it.

65

00:04:34.800  -->  00:04:38.380
But if it's not empty then that means we kind of have to move to the right.

66

00:04:38.430  -->  00:04:45.790
We have to go down that path in order to find the suitable space where we can put the new node.

67

00:04:45.930  -->  00:04:51.780
So if that is the case we're going to a marker equal market or get right without the return keyword

68

00:04:51.960  -->  00:04:57.090
without the return keyword and that's just going to make it go back to the top of the while loop and

69

00:04:57.090  -->  00:05:00.680
then we're going to continue do the same thing again.

70

00:05:00.690  -->  00:05:06.220
Similarly if the nodes value is less than the marker's value we're going to do the opposite.

71

00:05:06.360  -->  00:05:18.180
If not marker don't get left marker offset left left node return else mockery call marker don't get

72

00:05:18.180  -->  00:05:19.520
left.

73

00:05:19.520  -->  00:05:21.190
So what this does is the opposite.

74

00:05:21.210  -->  00:05:27.120
If this is space Well first of all if the nodes value is less than the markers value and there is a

75

00:05:27.120  -->  00:05:30.720
space to the left you're going to just put on you know there.

76

00:05:31.230  -->  00:05:37.680
And if not we're going to move down towards the left making the marker equal the markers get left and

77

00:05:37.680  -->  00:05:39.710
then we're going to go back to the top of the While loop.

78

00:05:39.870  -->  00:05:41.750
We're going to be doing the same thing again.

79

00:05:42.180  -->  00:05:44.730
Think about this code a few times.

80

00:05:44.730  -->  00:05:46.980
Run it through with some samples.

81

00:05:47.010  -->  00:05:52.080
I normally have a piece of paper in front of me when I'm working with binary trees where I draw the

82

00:05:52.080  -->  00:05:57.030
binary tree and then I calculate the paths for each node that I'm adding to make sure that I'm adding

83

00:05:57.030  -->  00:05:59.210
the right things in the right places.

84

00:05:59.220  -->  00:06:02.490
I recommend you do that too.

85

00:06:02.490  -->  00:06:08.150
Finally we've got the find method as well which is similar but it doesn't have to add notes.

86

00:06:08.180  -->  00:06:10.210
I think it has to do is find them.

87

00:06:10.320  -->  00:06:16.170
So once again the market is going to be the root and while the marker has a value we're going to be

88

00:06:16.260  -->  00:06:18.650
iterating or traversing the tree.

89

00:06:19.440  -->  00:06:25.620
If the value that we're looking for this value up there is equal to the marker's value we're going to

90

00:06:25.620  -->  00:06:30.810
return the marker because we found it in the Add method.

91

00:06:30.810  -->  00:06:36.270
We raised an error because we were going to add a node that was a duplicate in the find the method we

92

00:06:36.270  -->  00:06:43.860
returned the marker because we found the node we were looking for L if the value is greater than the

93

00:06:43.860  -->  00:06:45.900
marker's value.

94

00:06:45.930  -->  00:06:49.350
We're going to move to the right marker equal marker get right

95

00:06:52.650  -->  00:06:59.360
and that's just gonna let us restart the while loop in the next available right node.

96

00:07:00.270  -->  00:07:06.360
Finally if none of these are true that means the value is less than the marker's value.

97

00:07:06.360  -->  00:07:13.920
And what we'll do is a marker equal marker get left and that will move us to the left and then we will

98

00:07:13.920  -->  00:07:19.770
run the loop again with the next node then which will eventually we will go left and then go right on

99

00:07:19.770  -->  00:07:22.970
the left and right and so on until we find the vnode.

100

00:07:22.980  -->  00:07:25.030
And that's what we are going to be returning.

101

00:07:25.590  -->  00:07:33.090
However if we end up at a marker that is none we are going to just exit the loop potentially without

102

00:07:33.090  -->  00:07:34.200
returning anything.

103

00:07:34.440  -->  00:07:43.590
So what we want to do there is raise a lookup era inode with value must not be found and then we format

104

00:07:43.590  -->  00:07:47.210
that with a value we were looking for.

105

00:07:48.750  -->  00:07:50.980
Now think about this code carefully.

106

00:07:51.060  -->  00:07:59.580
Take some time to think it through take some time to draw your binary trees calculate adding notes.

107

00:07:59.670  -->  00:08:02.040
Maybe you'll find there's a mistake in here somewhere.

108

00:08:02.040  -->  00:08:03.500
It's happened before.

109

00:08:04.250  -->  00:08:11.490
And do post in the course Kewney if you do find any errors or you have any ideas or you think your solution

110

00:08:11.490  -->  00:08:17.900
is better or you think your solution is wrong and you want some ideas on how to fix it.

111

00:08:17.970  -->  00:08:25.110
Once that's done just write the tests file and run the unit tests there and you should see all six tests

112

00:08:25.110  -->  00:08:26.160
passed.

113

00:08:26.160  -->  00:08:33.630
If you do then good job you have essentially implemented all of it are structures that we asked you

114

00:08:33.810  -->  00:08:34.760
in this course.

115

00:08:35.070  -->  00:08:40.740
And really that's quite a bit of knowledge that you've now acquired about a really important topic in

116

00:08:40.740  -->  00:08:44.400
computer science and in interviews and in jobs.

117

00:08:44.490  -->  00:08:46.350
So good job congratulations.

118

00:08:46.440  -->  00:08:53.520
You've reached the end of this section where we looked at data structures and there's more things to

119

00:08:53.520  -->  00:08:58.670
do with binary trees that you could look at such as deleting nodes from binary trees.

120

00:08:58.680  -->  00:09:03.570
That's an especially complicated subject that we're not touching on yet but we may do in the future

121

00:09:03.580  -->  00:09:04.480
.

122

00:09:05.610  -->  00:09:11.840
So that's it for now and thanks for joining me and I'll see you soon.
