WEBVTT
1

00:00:00.250  -->  00:00:02.670
Hi will come back in this video we're looking at.

2

00:00:02.670  -->  00:00:10.290
Create table you may be wondering when we've got this graphical interface why are we concerned about

3

00:00:10.290  -->  00:00:12.670
creating tables using sequel.

4

00:00:13.200  -->  00:00:18.240
And the answer is your programs are not really going to be running in your own computer most of the

5

00:00:18.240  -->  00:00:19.180
time.

6

00:00:19.230  -->  00:00:22.640
Normally you'll write a program and then you put it on a server on the internet.

7

00:00:22.650  -->  00:00:29.340
If it's a web application or you'll distribute it and handed over to your users if it's a desktop application

8

00:00:29.820  -->  00:00:35.190
and neither of those cases can you rely on your users to use the graphical interface to create your

9

00:00:35.190  -->  00:00:41.910
data and your tables therefore your program must be able to create those tables and programmatically

10

00:00:41.910  -->  00:00:42.780
.

11

00:00:42.780  -->  00:00:47.400
That's why sequel provides these commands to be able to create tables and databases and things like

12

00:00:47.400  -->  00:00:56.310
that let alone in this video how to create tables and in that we're also going to learn what Primary

13

00:00:56.310  -->  00:00:57.890
Key No.

14

00:00:58.100  -->  00:01:02.580
And a bunch of other things which are also very useful.

15

00:01:02.580  -->  00:01:04.470
We've got here our three tables.

16

00:01:04.740  -->  00:01:11.550
So what we can do to learn more about creating tables is right click one of the tables and click on

17

00:01:11.550  -->  00:01:13.990
scripts and realize you can really see this very well.

18

00:01:14.130  -->  00:01:17.150
But nevertheless you've got to create script there.

19

00:01:17.490  -->  00:01:23.920
And that tells you some information about how you might go about creating a table that has the data

20

00:01:23.920  -->  00:01:23.960
.

21

00:01:23.970  -->  00:01:31.260
This table contains So as you can see it starts with create table then it has the schema dot the table

22

00:01:31.260  -->  00:01:32.190
name.

23

00:01:32.190  -->  00:01:35.340
And then it's got the columns that are in the table.

24

00:01:36.030  -->  00:01:37.510
Let's start with something simpler.

25

00:01:37.710  -->  00:01:42.910
So I can explain to you what how you construct these commands.

26

00:01:43.140  -->  00:01:47.940
I'm going to select everything here and just remove it and I'm going to show you how you might go about

27

00:01:47.940  -->  00:01:55.150
creating a simple table that only has an ID and identifier and a name as columns.

28

00:01:55.170  -->  00:02:01.410
The first thing to do is to create a table that tells sequel that you want to create a table and not

29

00:02:01.410  -->  00:02:03.310
something else like a database or a view.

30

00:02:03.360  -->  00:02:05.140
We're going to look at those later on.

31

00:02:05.870  -->  00:02:08.660
And then you can specify the schema.

32

00:02:08.880  -->  00:02:15.370
But if you're using the default public schema this is optional so you don't have to say public don't

33

00:02:15.380  -->  00:02:15.470
.

34

00:02:15.480  -->  00:02:18.080
You can just see the database name if you prefer.

35

00:02:18.090  -->  00:02:22.300
It's good practice to put the schema in there as well.

36

00:02:22.380  -->  00:02:26.880
So I'm going to leave it in but you can omit it if you've only got that one and you're using the default

37

00:02:26.880  -->  00:02:31.170
scheme and then you would use the table name.

38

00:02:31.170  -->  00:02:32.830
I'm going to call it users.

39

00:02:33.030  -->  00:02:36.440
The table name we've got already in there it's called customers.

40

00:02:37.050  -->  00:02:41.490
So we're going to create one called users just for the sake of testing.

41

00:02:42.180  -->  00:02:50.070
And then you open a bracket and the closing bracket and remember new lines and things like that and

42

00:02:50.070  -->  00:02:51.430
sequel are not important.

43

00:02:51.430  -->  00:02:54.360
So I'm just putting a new line in here for the sake of readability.

44

00:02:54.360  -->  00:02:57.410
But you can put it all in one line if you prefer.

45

00:02:57.660  -->  00:03:03.000
And then what I'm going to put in here is the name of the first column which in my case is going to

46

00:03:03.000  -->  00:03:04.990
be ID for an identifier.

47

00:03:05.310  -->  00:03:06.480
You can call it whatever you want.

48

00:03:06.500  -->  00:03:15.360
Naturally then you specify the data type and for identify as a Jew usually integer unless you have a

49

00:03:15.360  -->  00:03:16.450
lot of users.

50

00:03:16.650  -->  00:03:19.470
In that case it can be beacon.

51

00:03:20.100  -->  00:03:22.460
But for that you need to have a lot of users.

52

00:03:22.470  -->  00:03:28.510
So normally you would use integer because that's just a bit more performing when you've got integer

53

00:03:28.510  -->  00:03:29.000
.

54

00:03:29.160  -->  00:03:34.880
Here we can specify whether the ID is going to be a primary key.

55

00:03:35.250  -->  00:03:44.220
And we've talked about primary keys slightly before and but with a primary key is is just a unique row

56

00:03:44.620  -->  00:03:52.130
unique value that is used to identify each row in the database.

57

00:03:52.140  -->  00:03:57.000
So in this case if the ID is going to be unique for each user we may want to use the ID to identify

58

00:03:57.000  -->  00:03:58.920
each user individually.

59

00:03:58.920  -->  00:04:04.560
For example we could also use the name but some users may have the same name as others optionally instead

60

00:04:04.560  -->  00:04:07.730
of ID we could choose something like username or email.

61

00:04:07.770  -->  00:04:12.290
If all the users are going to have unique user names or emails Mike is going to choose IDB.

62

00:04:12.420  -->  00:04:14.240
That's a very standard thing to do.

63

00:04:14.250  -->  00:04:22.260
So then after the integer you type primary key and that tells sequel or post-grads rather that this

64

00:04:22.260  -->  00:04:29.580
ID column is an integer and you want it to be a primary key primary keys are unique by default.

65

00:04:30.030  -->  00:04:33.100
And that's going to be important later.

66

00:04:33.840  -->  00:04:37.700
Then as I said earlier the second column that I wanted to create was a name.

67

00:04:37.870  -->  00:04:44.070
This can be a username or a first name doesn't matter and the column name is going to be name and then

68

00:04:44.070  -->  00:04:47.890
the data type is going to be character varying.

69

00:04:48.840  -->  00:04:56.580
And then I'm going to type in the size of the end of the row with the data which will be 100 characters

70

00:04:56.580  -->  00:04:58.850
long at maximum.

71

00:04:59.340  -->  00:05:05.220
And finally I'm going to tell you that the name cannot be empty because we need a name after all creating

72

00:05:05.220  -->  00:05:08.640
a user with only an ID doesn't tell us much about that user.

73

00:05:08.700  -->  00:05:11.630
So the name cannot be empty it cannot be null.

74

00:05:11.730  -->  00:05:15.240
So I type in not to know at the end.

75

00:05:15.240  -->  00:05:22.230
So again what this does is it creates a table called users with two columns ID and name the ID and integer

76

00:05:22.230  -->  00:05:22.650
.

77

00:05:22.650  -->  00:05:25.560
The name is a Cannata varying of site 100.

78

00:05:26.220  -->  00:05:27.450
And the name is not known.

79

00:05:27.480  -->  00:05:32.460
And the ID is a primary key this is one way to do it.

80

00:05:32.920  -->  00:05:40.510
But instead if we wanted instead of setting primary key here alongside the column we can also set it

81

00:05:40.510  -->  00:05:41.800
at the end.

82

00:05:41.800  -->  00:05:47.260
So I'm going to type in a coma and then I'm going to say as well as these two columns there.

83

00:05:47.500  -->  00:05:53.300
I also want to add a constraint into this table and a constraint can be primary key or it can be not

84

00:05:53.300  -->  00:05:56.490
null amongst a number of others.

85

00:05:57.580  -->  00:06:04.720
So the way we would do that that we would add a primary key to the ID is by saying constraint and then

86

00:06:04.720  -->  00:06:07.480
we give this constraint a name.

87

00:06:07.480  -->  00:06:13.560
So this can be for example users ID peaky key for primary key it doesn't matter what you call it.

88

00:06:13.570  -->  00:06:22.120
But as long as it's unique and then primary key id between brackets and now you're probably wondering

89

00:06:22.140  -->  00:06:23.910
well why would you ever want to do that.

90

00:06:23.910  -->  00:06:30.730
And you know what's the point and the point is that you can have multi-column primary keys which is

91

00:06:30.730  -->  00:06:36.910
why you sometimes have to do it this way if you wanted both your ID and your name to be a primary key

92

00:06:37.230  -->  00:06:45.130
and multi-column you would do this and we're not really going to get too much yet into what a multi-column

93

00:06:45.130  -->  00:06:53.620
primary key is but just know that you can set the primary keys for multiple columns together and that

94

00:06:54.610  -->  00:06:58.200
maybe it's not that useful but nevertheless it can be done.

95

00:06:58.210  -->  00:07:02.710
And we're going to look into why you might want to do that later on AM and this is how you would do

96

00:07:02.710  -->  00:07:06.550
that if you only have one primary key.

97

00:07:06.820  -->  00:07:12.390
Then I would just recommend doing it the normal way which is setting the primary key up there.

98

00:07:12.940  -->  00:07:20.050
And when we press play we get a syntax error because we have too many commas and then that works when

99

00:07:20.050  -->  00:07:22.620
we delete the comma and we return successfully.

100

00:07:22.750  -->  00:07:28.820
And now we can go and select start from public users.

101

00:07:29.020  -->  00:07:34.820
And as you can see there's no data about we can't back now two columns which is great.

102

00:07:35.110  -->  00:07:43.520
And now we are ready to learn about some of the mean more complex which is foreign keys.

103

00:07:43.810  -->  00:07:49.060
So I'd say we've got our users there and then we wanted to have something like

104

00:07:52.570  -->  00:07:54.970
videos that the user has uploaded.

105

00:07:54.970  -->  00:07:56.950
I'm going to go with videos because it's an easy

106

00:07:59.590  -->  00:08:05.490
concept what we would want to do is create another table for videos.

107

00:08:05.560  -->  00:08:13.750
So let's start with that create table public top videos and then we specify the columns.

108

00:08:13.750  -->  00:08:15.490
Each video is going to have an ID.

109

00:08:16.000  -->  00:08:17.640
So you know how to do this.

110

00:08:17.950  -->  00:08:20.910
And each of you is going to have a name and you also know how to do that.

111

00:08:21.100  -->  00:08:23.570
Essentially just copying what we just did in the last table.

112

00:08:23.620  -->  00:08:29.140
I would recommend once again pausing giving it a go just to make sure that it sticks

113

00:08:32.500  -->  00:08:34.290
OK.

114

00:08:34.450  -->  00:08:40.360
Once that's done remember the way to create the ID is to say ID and then interject which is a data type

115

00:08:40.750  -->  00:08:47.210
and then primary key video name which is going to be a character varying.

116

00:08:47.350  -->  00:08:53.680
I'm going to say of size 255 that's quite standard size and it's reasonably long and I'm going to say

117

00:08:53.680  -->  00:08:58.120
it's not Noal because I don't want the name of the video to be empty.

118

00:08:59.440  -->  00:09:07.690
And then what also has to come in here is which user uploaded this video or created this video.

119

00:09:08.020  -->  00:09:13.750
So I'm going to put the user that created a video between these two columns so after the idea and before

120

00:09:13.750  -->  00:09:14.130
the name.

121

00:09:14.170  -->  00:09:17.360
And it doesn't really matter where and where you put it.

122

00:09:18.190  -->  00:09:23.840
It's just slightly nicer when you retrieve the data to have that data ordered nicely.

123

00:09:23.860  -->  00:09:28.400
And we're going to look at some data that is not ordered and actually later on.

124

00:09:29.140  -->  00:09:31.220
So you know what's a user on this Friday.

125

00:09:31.900  -->  00:09:37.840
And this is also going to be an integer because it is going to be referencing the users table and the

126

00:09:37.840  -->  00:09:40.490
user id table.

127

00:09:40.510  -->  00:09:47.500
So what this is saying now is we have an ID which is an integer and that's the primary key for the videos

128

00:09:47.500  -->  00:09:48.290
table.

129

00:09:48.730  -->  00:09:53.170
Then we've got a user ID which is an integer and then we've got a name for the video which is a character

130

00:09:53.170  -->  00:09:56.380
varying of lines 255 that cannot be null.

131

00:09:57.160  -->  00:09:59.040
The user ID right now is just a number.

132

00:09:59.050  -->  00:10:04.260
So really here we could put anything we wanted him and pushcarts would accept it as long as it's a number

133

00:10:04.480  -->  00:10:14.110
naturally which is not really what we want because we could put in there the idea of a user and then

134

00:10:14.230  -->  00:10:18.740
that would make sense we could put in there the idea of the user who uploaded the video.

135

00:10:19.030  -->  00:10:24.970
But as it stands we could put in there any other number we could put in the number of a user that doesn't

136

00:10:24.970  -->  00:10:26.680
exist.

137

00:10:26.680  -->  00:10:33.880
So if we want to allow postscripts sequel to tell us whether what we're doing is valid then we have

138

00:10:33.880  -->  00:10:36.030
to give it a bit more information.

139

00:10:36.100  -->  00:10:45.340
We have to tell it this user id column should be a valid column in the Users table.

140

00:10:45.340  -->  00:10:52.270
And the way we do that is we just say reference's public dot users.

141

00:10:52.570  -->  00:11:01.810
And what that says is make sure that this user ID is a valid column in public dock users and by default

142

00:11:01.990  -->  00:11:05.840
the column that it checks is the primary key of the users table.

143

00:11:05.840  -->  00:11:12.530
So whether it is doing is saying make sure they use an ID is a valid column is a valid role in the users

144

00:11:12.530  -->  00:11:16.310
user's ID call them.

145

00:11:16.330  -->  00:11:18.550
So let's do that as press play.

146

00:11:19.150  -->  00:11:20.370
And that works.

147

00:11:20.680  -->  00:11:24.250
So now we've got our video stable and our user stable.

148

00:11:24.280  -->  00:11:31.150
So what to do in the next video is we're going to be enjoying some data and then we're going to be verifying

149

00:11:31.150  -->  00:11:32.520
that all of this works.

150

00:11:32.530  -->  00:11:34.750
So without further ado now see in the next video
