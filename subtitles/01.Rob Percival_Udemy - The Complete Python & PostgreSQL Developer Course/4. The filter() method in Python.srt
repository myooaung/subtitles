1

00:00:00,590  -->  00:00:02,460
Hi will come back in this video.

2

00:00:02,460  -->  00:00:08,670
We're going to be looking at the time method the filter method is one of various Python methods that

3

00:00:08,670  -->  00:00:11,270
are extremely useful.

4

00:00:11,310  -->  00:00:13,570
So let's start by looking at the filter method.

5

00:00:13,590  -->  00:00:20,940
And as you may guess the filter method is used to filter things out from a list.

6

00:00:21,360  -->  00:00:29,340
The first thing I want to do is move it forward with the objective of this app which is allowing the

7

00:00:29,340  -->  00:00:37,020
user to keep track of what movies they've watched in order for the user to know which movies they've

8

00:00:37,020  -->  00:00:38,140
watched.

9

00:00:38,160  -->  00:00:44,480
Naturally the movie has to have a property say in whether it has been watched or not.

10

00:00:45,180  -->  00:00:52,080
Alternatively the user could have a list of movies that have already been watched.

11

00:00:52,580  -->  00:01:01,290
So the user could have a list of movies and then a list of watched movies or the movie can have a property

12

00:01:01,620  -->  00:01:08,310
which he's watched and then it is true if the movie has been watched and falls if it has not been watched

13

00:01:08,310  -->  00:01:08,950
.

14

00:01:08,970  -->  00:01:12,130
Those are two possible ways of implementing this.

15

00:01:12,780  -->  00:01:18,470
I'm going to opt for setting whether the movie has been watched or not.

16

00:01:18,570  -->  00:01:26,010
So I'm going to add another property here watched and then I'm going to say self-taught watched is watched

17

00:01:28,200  -->  00:01:36,210
and what this will do is if self-taught watched is true then I'll assume that the user has watched this

18

00:01:36,210  -->  00:01:44,600
movie and if self-taught watched is false then I'll assume the user has not watched the movie.

19

00:01:45,130  -->  00:01:49,550
OK so now when we come here to our apt up he why.

20

00:01:49,560  -->  00:01:55,680
Notice that Pitre gives us a faint yellow background on this bracket and it says that prompter watch

21

00:01:55,680  -->  00:01:56,810
these on field.

22

00:01:56,940  -->  00:02:01,570
So we have to say here whether it has been watched or not.

23

00:02:01,680  -->  00:02:06,460
And you know I'm going to say false because it has not been watched.

24

00:02:08,230  -->  00:02:08,870
OK.

25

00:02:08,880  -->  00:02:12,330
So this allows me to specify what that movie has been watched or not.

26

00:02:12,330  -->  00:02:19,890
But it doesn't let me get which movies the user has watched or which movies the user has not watched

27

00:02:19,890  -->  00:02:20,210
.

28

00:02:20,250  -->  00:02:21,380
So that's what we're going to be doing.

29

00:02:21,380  -->  00:02:21,630
Now

30

00:02:24,540  -->  00:02:32,930
I'm going to create a method in the User class that will give me the movies that have been watched and

31

00:02:32,940  -->  00:02:37,080
I think you can do this already using a for loop and a list.

32

00:02:37,590  -->  00:02:41,340
Let's I'll get you started.

33

00:02:41,470  -->  00:02:55,530
Watched movies and what I want this method to do is calculate or gather the A list of movies that have

34

00:02:55,530  -->  00:02:56,890
been watched.

35

00:02:57,570  -->  00:02:59,430
And I'm going to give you a couple more hints.

36

00:02:59,520  -->  00:03:08,490
You may want to initialize an empty list then iterate over self-dual movies.

37

00:03:08,910  -->  00:03:18,180
If the movie watched is true add it to the list return the list.

38

00:03:19,470  -->  00:03:22,460
A few hints there for you.

39

00:03:22,460  -->  00:03:26,100
What I would recommend now is to pause the video and give that a shot.

40

00:03:26,100  -->  00:03:27,430
It's the best way to learn.

41

00:03:27,620  -->  00:03:28,040
Honestly

42

00:03:33,960  -->  00:03:38,580
once that has been done let's implement this method here.

43

00:03:38,730  -->  00:03:42,660
There are two ways there are many ways but two ways to implement this.

44

00:03:42,660  -->  00:03:47,700
The first way which is the way I would expect you to have implemented it and there is a second way that

45

00:03:47,700  -->  00:03:58,500
is the aim of this video that's first implemented the first way we define a list of watched movies which

46

00:03:58,500  -->  00:04:01,020
is going to be an empty list and then we're going to iterate

47

00:04:03,930  -->  00:04:13,890
over self-taught movies and say if movie top watched then watched movies sliced up and movie and then

48

00:04:14,730  -->  00:04:17,640
return watched the movies released.

49

00:04:17,670  -->  00:04:22,350
This is the way that I would have expected you to complete and implement this method.

50

00:04:22,350  -->  00:04:28,710
First the fist and define an empty list and then iterate over self-edit movies check for each movie

51

00:04:28,710  -->  00:04:33,560
it has if it has been watched and then append the watch to movie to this list.

52

00:04:33,570  -->  00:04:34,820
And finally the list

53

00:04:37,530  -->  00:04:45,200
naturally if we then print huge or not watched movies we should get nothing.

54

00:04:45,450  -->  00:04:46,330
And indeed we do.

55

00:04:46,470  -->  00:04:48,700
Because the movie has not been watched.

56

00:04:48,750  -->  00:04:53,640
If we change this to true which says that it has been watched and we press play again we should get

57

00:04:53,760  -->  00:04:56,770
that movie print it out and we do.

58

00:04:56,820  -->  00:05:00,720
That's great.

59

00:05:00,720  -->  00:05:06,450
The aim of this video was to introduce the film method which is really useful for doing exactly this

60

00:05:06,450  -->  00:05:07,080
.

61

00:05:07,080  -->  00:05:14,070
So let's go over how we could implement this using the filter method.

62

00:05:14,070  -->  00:05:24,450
The way I do this is say movies watched is filter and the filter method is a builtin method in Python

63

00:05:24,450  -->  00:05:25,970
.

64

00:05:26,250  -->  00:05:37,710
And then what it requires is first a function and then the list that we want to filter the function

65

00:05:37,890  -->  00:05:49,740
here is a lamp but the function lammed x x watched and then Safdar movies.

66

00:05:49,800  -->  00:05:54,320
So let's explain exactly what's going on here.

67

00:05:54,510  -->  00:05:58,750
The filter method takes in a list of movies that's fine.

68

00:05:59,010  -->  00:06:07,620
And it also takes in the Lumb definition a lambda function is just like a normal function but it is

69

00:06:07,620  -->  00:06:11,030
defined here in just one line without the death and things like that.

70

00:06:11,550  -->  00:06:14,010
A lambda function also doesn't have a name.

71

00:06:14,220  -->  00:06:17,950
So you cannot save it and then call it again later.

72

00:06:18,960  -->  00:06:26,540
This lambda function takes in one parameter which is X just like the init method takes in name.

73

00:06:26,710  -->  00:06:36,710
There's lambda function takes an X and then it returns true if X dot watched it's true and false if

74

00:06:36,780  -->  00:06:40,080
X dot watched is false.

75

00:06:40,080  -->  00:06:49,830
So this lambda function returns whether the parameter passed to it is watched or not and X is each of

76

00:06:49,830  -->  00:06:52,260
the elements in self-taught movies

77

00:06:57,060  -->  00:07:02,220
and then we return movies watched and we get a small error.

78

00:07:02,520  -->  00:07:10,180
But let's go back to our app and run that and what we get is a filter object not very useful.

79

00:07:10,320  -->  00:07:18,540
What we have to do is go back into user and convert this filter object to a list.

80

00:07:19,050  -->  00:07:24,230
And now when we run the app again we get the movie The Matrix.

81

00:07:25,080  -->  00:07:26,750
Let's once again go over this.

82

00:07:26,790  -->  00:07:33,570
The film that is extremely powerful because it is so short it has essentially compressed the method

83

00:07:33,570  -->  00:07:34,400
that we wrote before.

84

00:07:34,410  -->  00:07:37,110
By a factor of three.

85

00:07:37,710  -->  00:07:40,560
What it does is it takes in a list.

86

00:07:40,590  -->  00:07:48,360
In this case movies and then passes each of the elements in that list to the function that we defined

87

00:07:48,360  -->  00:07:50,730
previously.

88

00:07:50,730  -->  00:07:55,410
This function takes in one parameter which is that movie and I'm calling it X but you can call it movie

89

00:07:55,620  -->  00:07:56,690
if you want.

90

00:07:57,060  -->  00:07:58,120
That may be simpler.

91

00:07:58,350  -->  00:07:59,750
Sorry about that.

92

00:08:00,510  -->  00:08:07,080
Each of the movies goes into this lambda function and the lambda function then returns whether it has

93

00:08:07,080  -->  00:08:08,730
been watched or not.

94

00:08:09,000  -->  00:08:17,570
The filter function removes from this list all elements that match this to be false.

95

00:08:17,640  -->  00:08:24,750
So all elements that have not been watched then get removed from the list with the filter method and

96

00:08:24,760  -->  00:08:35,090
reconvert that then two ways we can then further decrease the size of this by just returning this there

97

00:08:35,100  -->  00:08:37,090
.

98

00:08:38,760  -->  00:08:39,320
OK.

99

00:08:39,540  -->  00:08:46,860
So if we go back to our app and run this again we get the matrix if we change false we should get nothing

100

00:08:46,860  -->  00:08:47,430
.

101

00:08:47,430  -->  00:08:50,270
And indeed we do.

102

00:08:50,910  -->  00:08:58,560
While I appreciate the VCs a bit more complicated it's just a bit more strange and abstract than before

103

00:08:58,560  -->  00:08:59,610
.

104

00:08:59,610  -->  00:09:05,700
I think you guys can get a hold of that and grasp that each of the elements in the movies is past the

105

00:09:05,700  -->  00:09:10,800
function and then the function performs a check if the check returns false the element gets removed

106

00:09:10,800  -->  00:09:14,640
from the list and that's all there is to the filter function.

107

00:09:14,790  -->  00:09:22,860
Really useful function with that said we now have a method that returns the watched movies of the user

108

00:09:23,580  -->  00:09:28,580
and now we can use that to show the user some more relevant information.

109

00:09:29,250  -->  00:09:29,640
OK.

110

00:09:29,700  -->  00:09:32,440
So with that said let's move on to the next video see you there
