WEBVTT
1

00:00:00.230  -->  00:00:06.870
Hi welcome back in this video we're looking at indexes and indexes are really useful because they allow

2

00:00:06.870  -->  00:00:12.140
our table to perform searches a lot faster for example.

3

00:00:12.150  -->  00:00:15.360
So we've got this select staff from public domain users.

4

00:00:15.630  -->  00:00:23.430
Imagine we have millions of users as opposed to only three if I wanted to select a specific user searching

5

00:00:23.430  -->  00:00:24.890
by username.

6

00:00:24.960  -->  00:00:32.550
Note not ID but the name I would have to do something like select staff from public users where name

7

00:00:32.940  -->  00:00:36.620
equals Ralph Smith for example.

8

00:00:38.130  -->  00:00:43.860
And now down here at the bottom right we get the amount of time that it takes to perform this search

9

00:00:44.310  -->  00:00:46.100
which was 18 milliseconds.

10

00:00:46.410  -->  00:00:48.260
That's quite quick.

11

00:00:48.960  -->  00:00:55.970
If we had millions of users to perform this search it would take a long time and here's why.

12

00:00:56.490  -->  00:01:01.600
The name is just kind of a normal column if you wish.

13

00:01:01.620  -->  00:01:06.060
The idea is a primary key and that makes it special but the name is just normal column that has some

14

00:01:06.060  -->  00:01:07.160
data.

15

00:01:07.530  -->  00:01:12.720
And this is kind of like to some extent.

16

00:01:12.720  -->  00:01:20.550
Think of the ID as the word in a dictionary and the name as the definition of the word you would never

17

00:01:20.850  -->  00:01:23.420
search a dictionary by definition.

18

00:01:23.450  -->  00:01:24.950
It just doesn't make sense.

19

00:01:24.960  -->  00:01:32.190
You would always search by the word because the word tends to be alphabetically ordered and therefore

20

00:01:32.190  -->  00:01:34.980
it's easy to search.

21

00:01:35.040  -->  00:01:40.500
This is kind of like telling our table search by definition.

22

00:01:40.500  -->  00:01:46.050
And naturally the only way to do that is to go through every row in the table until you find one that

23

00:01:46.050  -->  00:01:47.660
matches.

24

00:01:47.700  -->  00:01:57.060
Now if we have limit one that is a lot better because as soon as it finds one row with Ralph Smith then

25

00:01:57.060  -->  00:01:57.810
it stops.

26

00:01:57.810  -->  00:02:03.680
But if we don't have a limit one it has to go through absolutely every row of our table.

27

00:02:03.810  -->  00:02:08.870
Now that is not very good it's not very fast.

28

00:02:09.000  -->  00:02:18.810
So what we want to do is allow our table to know that the names are ordered in a way that it can search

29

00:02:18.960  -->  00:02:20.950
Nic.

30

00:02:20.970  -->  00:02:26.100
So what we're going to do is indeed ordered the names kind of alphabetically it's not really like that

31

00:02:26.100  -->  00:02:27.270
but you can think of it like that.

32

00:02:27.390  -->  00:02:31.360
Really what it's going to happen if you know a bit about algorithms and things like that.

33

00:02:31.440  -->  00:02:35.140
What's going to happen is that we're going to order the names in a binary tree.

34

00:02:35.310  -->  00:02:39.900
But if you don't know what that is don't worry about it just know that an index order is the data in

35

00:02:39.900  -->  00:02:46.670
such a way and it allows possible sequel to perform searches a lot faster and more efficiently.

36

00:02:46.710  -->  00:02:48.350
So that's what an index is for.

37

00:02:48.660  -->  00:02:54.090
It's just like the index in a dictionary the huddle the words the index allows us to search faster more

38

00:02:54.090  -->  00:02:56.880
efficiently.

39

00:02:56.890  -->  00:02:59.970
However an index is not free.

40

00:03:00.300  -->  00:03:05.860
Not that you have to pay for it but indexes take disk space but you have to store that binary tree somewhere

41

00:03:05.870  -->  00:03:06.230
.

42

00:03:06.990  -->  00:03:10.880
And overhead it's slow to insert data.

43

00:03:10.890  -->  00:03:15.840
It's not really slow but it's a bit slower to insert data and to update data because then the binary

44

00:03:15.840  -->  00:03:21.300
tree that holds that structure that allows us to search has to be updated as well.

45

00:03:21.300  -->  00:03:28.230
Whenever we perform an insert or an update in our table so do not create indexes for things that you're

46

00:03:28.230  -->  00:03:34.390
not going to search by and if possible don't create indexes at all and just search by ID.

47

00:03:34.440  -->  00:03:37.950
But I appreciate that sometimes that's not possible.

48

00:03:37.980  -->  00:03:44.460
For example if you have a table with weather information each row might have an ID but you would probably

49

00:03:44.460  -->  00:03:50.480
also want to search by location so it would make sense to give the location an index as well.

50

00:03:50.520  -->  00:03:54.930
You may not want to search by temperature so it may not make sense to give the temperature an index

51

00:03:54.990  -->  00:03:55.610
.

52

00:03:55.980  -->  00:03:56.740
That sort of stuff.

53

00:03:56.760  -->  00:04:01.230
Don't be silly with creating indexes and you'll be fine.

54

00:04:01.230  -->  00:04:05.970
The primary key as I mentioned is an index by default and is in fact a unique index which is a special

55

00:04:05.970  -->  00:04:07.940
type of index when I look at that.

56

00:04:08.730  -->  00:04:13.300
OK so let's create an index for our username so that we can search by user name.

57

00:04:13.350  -->  00:04:14.250
Fast.

58

00:04:14.620  -->  00:04:17.570
What are we going to do is create index.

59

00:04:17.650  -->  00:04:21.430
Then we're going to give the index a name and once again this has to be unique.

60

00:04:21.610  -->  00:04:23.090
But you can call it whatever you want.

61

00:04:23.100  -->  00:04:32.340
For my case I'm going to call it user's name index and then we see on and then we specify the table

62

00:04:32.570  -->  00:04:39.320
then we are creating the index on public users and then the column that was specifying that we're creating

63

00:04:39.330  -->  00:04:39.960
the index funds.

64

00:04:39.960  -->  00:04:41.810
In this case name.

65

00:04:42.790  -->  00:04:46.960
OK so when we do that then that says OK that's fine.

66

00:04:47.640  -->  00:04:54.120
Now if we perform the search again is not really going to be much faster in fact it's 90 milliseconds

67

00:04:54.120  -->  00:04:55.260
more of the same.

68

00:04:55.260  -->  00:04:58.540
And because there so few rows it just doesn't take any time at all.

69

00:04:58.620  -->  00:05:02.240
But trust me it would be faster if we had a lot of data.

70

00:05:04.090  -->  00:05:11.860
I mentioned that the ID is a unique index because each of the items on that binary tree are unique because

71

00:05:11.860  -->  00:05:18.430
the IDs are unique row and you can call them if you have your data that is unique.

72

00:05:18.430  -->  00:05:22.920
I'm just saying this for your knowledge and username is not unique.

73

00:05:22.930  -->  00:05:30.230
But if we had another piece of data that is unique we could create a unique index in just the same way

74

00:05:30.330  -->  00:05:38.080
create a unique index index name on a table column and that's how you create a unique index just in

75

00:05:38.080  -->  00:05:41.930
case you need that at some point later on when you're when you're programming.

76

00:05:41.950  -->  00:05:44.310
So that's how you do that.

77

00:05:46.030  -->  00:05:46.490
OK.

78

00:05:46.660  -->  00:05:51.800
You can also create multi-column indices or indexes.

79

00:05:51.830  -->  00:05:53.390
I never know which ones right.

80

00:05:53.700  -->  00:05:54.410
OK.

81

00:05:54.460  -->  00:05:55.000
Forgot about that.

82

00:05:55.010  -->  00:06:01.370
You can you can get multi-column indexes them which are useful only in one scenario.

83

00:06:01.510  -->  00:06:09.490
So don't create multi-column indexes an arbitrarily select start from

84

00:06:12.310  -->  00:06:22.380
public movies where ID equals one and user ID equals two.

85

00:06:22.660  -->  00:06:33.380
For example say you were always performing your search on an ID and user ID for your movies.

86

00:06:33.670  -->  00:06:36.970
You were never performing searches on user ID alone.

87

00:06:37.630  -->  00:06:40.800
And you usually don't perform searches on ID alone.

88

00:06:41.350  -->  00:06:47.350
So you always do your searches on both of these columns simultaneously.

89

00:06:47.350  -->  00:06:55.340
It's more efficient to create a multi-column index if you are doing and filtering.

90

00:06:56.050  -->  00:06:59.380
So select staff from public don't movies.

91

00:06:59.670  -->  00:07:00.350
Right.

92

00:07:00.640  -->  00:07:02.120
That's not what I meant to do.

93

00:07:02.150  -->  00:07:06.970
So when you're doing that you want to create a multi-column index which is to create index and then

94

00:07:06.970  -->  00:07:11.970
use give it an index name on the movies table.

95

00:07:11.980  -->  00:07:20.890
And here you can specify multi column and the column is to specify your index which are the ID and the

96

00:07:21.820  -->  00:07:25.090
user ID.

97

00:07:25.480  -->  00:07:27.360
So that's how you specify multi-column index.

98

00:07:27.370  -->  00:07:34.610
And once again this is only useful if you are doing and filtering on your data.

99

00:07:34.990  -->  00:07:43.420
If you are filtering data by user id only work by an ID only do not have a multi-column index doesn't

100

00:07:43.420  -->  00:07:52.000
make sense just have an index on ID and add seperate index on the user id and that's fine as an extra

101

00:07:52.000  -->  00:07:52.910
bit of information.

102

00:07:53.080  -->  00:08:00.290
If you have an index on ID and a separate index on user id Pontmercy equal is not stupid.

103

00:08:00.460  -->  00:08:09.190
And it does increase performance substantially when you do wear ID and user ID if you have separate

104

00:08:09.850  -->  00:08:12.060
indices for these two.

105

00:08:12.160  -->  00:08:16.270
This is still faster than if you had that no indices.

106

00:08:16.510  -->  00:08:21.670
It's a bit slower than if you had a multi-column index but you know in some scenarios it may be better

107

00:08:21.670  -->  00:08:28.000
to create separate and Azeez than to create a multi-column index and have all of this is way over your

108

00:08:28.000  -->  00:08:29.930
head and you're like I knew it was going on.

109

00:08:29.940  -->  00:08:30.800
Don't worry about it.

110

00:08:30.910  -->  00:08:34.500
Don't create multi-column indexes and you'll be fine.

111

00:08:34.830  -->  00:08:35.390
OK.

112

00:08:35.680  -->  00:08:36.910
Last bit of information.

113

00:08:36.910  -->  00:08:41.500
And remember I'm seeing these things because in the future you're going to be learning more and more

114

00:08:41.500  -->  00:08:49.750
about Patras equally going to be using it in your apps and you're going to be like I wish I could create

115

00:08:50.020  -->  00:08:55.360
an index that is more performing when I'm doing a search and if I didn't tell you about multi-column

116

00:08:55.390  -->  00:08:59.810
indexes you may never realize that you can create multiple indices.

117

00:08:59.890  -->  00:09:06.760
So there's just for you to keep in the macro you had in mind for the future maybe you will find a use

118

00:09:06.760  -->  00:09:08.100
case for it.

119

00:09:08.510  -->  00:09:16.270
The last bit of info in this can become corrupted in some scenarios which is unfortunate and but when

120

00:09:16.270  -->  00:09:22.780
they do become corrupted then your next search won't work and all your searches will be a lot slower

121

00:09:23.680  -->  00:09:30.650
and you can fix that by doing re-index and then you can re-index a specific mix and then give it the

122

00:09:30.650  -->  00:09:39.140
index name such as user's ID index where users name index.

123

00:09:39.340  -->  00:09:43.580
So you can re-index specific index and that will delete the index and rebuild it.

124

00:09:43.600  -->  00:09:48.480
And this takes a bit of time but it will fix any index problems that you've got.

125

00:09:48.610  -->  00:09:54.190
And also in some scenarios if you're performing a lot of updates and in search the index can become

126

00:09:54.190  -->  00:09:57.260
really big and occupy a lot of disk space.

127

00:09:57.400  -->  00:09:59.610
And so it helps to do this.

128

00:09:59.740  -->  00:10:06.050
If you are doing a lot of updates it just reduces the size of your index.

129

00:10:06.070  -->  00:10:13.050
You can also re index a table which does the re-index index for all of the indices in your table.

130

00:10:13.180  -->  00:10:20.350
You can re-index a database which does the same thing for all the indices in your database.

131

00:10:20.350  -->  00:10:28.600
This is especially useful re-index database when your indices that the database depends on become corrupted

132

00:10:28.610  -->  00:10:28.740
.

133

00:10:28.930  -->  00:10:36.670
So the database depends on a number of indices which are called System indices and if they become corrupted

134

00:10:36.760  -->  00:10:41.370
your database will just not start up and then you've got a big problem.

135

00:10:42.010  -->  00:10:49.570
So what you can do is tell postscripts to not use any indices and then your data will start up and then

136

00:10:49.570  -->  00:10:57.760
you can re-index your database and then that will take a while and then you can restart pushcarts telling

137

00:10:57.760  -->  00:10:59.400
it to use indices.

138

00:10:59.650  -->  00:11:04.210
We're not going to look at how you can start and stop progress with or without indices because that's

139

00:11:04.210  -->  00:11:06.050
just a bit more advanced.

140

00:11:06.190  -->  00:11:10.000
But the Pasqua sequel documentation is very helpful in these cases.

141

00:11:10.000  -->  00:11:12.110
And once again I'm just telling you all this stuff.

142

00:11:12.160  -->  00:11:16.730
So in the future when you encounter a problem you know that you can fix it.

143

00:11:17.290  -->  00:11:17.770
But that's it.

144

00:11:17.770  -->  00:11:22.780
Regarding indices I know there's a lot to take and if you're not really interested by all the complicated

145

00:11:23.350  -->  00:11:30.850
indexing and stuff then just kind of forget about it just know that it exists and that's it.

146

00:11:31.640  -->  00:11:36.120
Without said that's how you create indices and that's how you re-index them.

147

00:11:36.220  -->  00:11:42.940
And that's how you create multi-column indexes which are also useful if you are performing and filtering

148

00:11:43.060  -->  00:11:44.470
on your table.

149

00:11:44.980  -->  00:11:45.760
OK.

150

00:11:45.760  -->  00:11:52.260
Thanks for watching and listening to me babble on about indices and I'll see you in the next video.
