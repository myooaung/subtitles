WEBVTT
1

00:00:00.680  -->  00:00:04.960
Hi we'll come back in this video we're looking at all off now.

2

00:00:04.980  -->  00:00:05.860
I apologize.

3

00:00:05.880  -->  00:00:11.500
This is another of these presentations but it is going to be short I promise.

4

00:00:11.530  -->  00:00:15.130
First question is why does all exist.

5

00:00:15.240  -->  00:00:18.670
And the answer to that is nobody likes creating accounts.

6

00:00:18.780  -->  00:00:24.660
If you go into these Web sites that want you to create an account but you are not really sure if you're

7

00:00:24.660  -->  00:00:28.350
going to use it or not then you don't really want to create an account and you have to come up with

8

00:00:28.350  -->  00:00:33.960
a new secure unique password and it's just a faff really it's a hassle.

9

00:00:33.960  -->  00:00:39.960
Not only that but social media is a big cutis meaning everyone really has a social media profile be

10

00:00:39.960  -->  00:00:43.910
it Twitter Facebook Google Plus or a bunch of others.

11

00:00:44.010  -->  00:00:47.160
That means nobody likes reading accounts.

12

00:00:47.160  -->  00:00:52.100
Everyone already has an account so why not use that as a passport.

13

00:00:52.270  -->  00:00:56.930
Loggin we've seems like a good idea right.

14

00:00:56.970  -->  00:01:06.780
There was actually quite a bit of worry about sharing your social media password logging with Facebook

15

00:01:06.780  -->  00:01:07.270
.

16

00:01:07.290  -->  00:01:12.550
They then have your password they can logon with your Facebook and do bad things.

17

00:01:13.000  -->  00:01:17.740
Well fortunately no you don't share your social media password.

18

00:01:18.510  -->  00:01:24.530
You can log in with Twitter in Web Site X Y Zand without giving them your Twitter password.

19

00:01:24.960  -->  00:01:29.880
And there's a bit of a contrived process in order to make that happen.

20

00:01:29.940  -->  00:01:36.480
But instead all you have to do is ask Twitter to generate a unique token just a number and you share

21

00:01:36.480  -->  00:01:37.280
that.

22

00:01:37.830  -->  00:01:44.550
So you have your Twitter account and you ask Twitter Twitter please generate a number that is unique

23

00:01:44.550  -->  00:01:52.920
to my account so that those people that know that number can represent my account in their web sites

24

00:01:54.410  -->  00:01:57.700
and you may not really understand what that means.

25

00:01:57.870  -->  00:01:58.620
And that's totally fine.

26

00:01:58.620  -->  00:02:02.310
We're going to be going into how it works.

27

00:02:02.310  -->  00:02:03.390
So how does it work.

28

00:02:03.690  -->  00:02:10.950
Well you have a user that arrived at your Web site which I'm calling Web site X ways and your web design

29

00:02:10.950  -->  00:02:13.820
has a sign in with Twitter button.

30

00:02:13.830  -->  00:02:19.500
So they use operettas that because they don't want to create an account as soon as they press that button

31

00:02:19.500  -->  00:02:19.800
.

32

00:02:20.010  -->  00:02:25.150
The user leave your website and they go to this website.

33

00:02:25.290  -->  00:02:30.140
This is Twitter and it has a message saying authorize and then your Web site.

34

00:02:30.150  -->  00:02:35.490
In this case it's an example just as card ops but it says authorize your Web site to use your account

35

00:02:36.510  -->  00:02:40.520
and then you can say Simon Yes or cancel.

36

00:02:40.560  -->  00:02:41.360
No.

37

00:02:41.790  -->  00:02:45.010
And then it also tells you what the application will be able to do.

38

00:02:45.120  -->  00:02:48.070
Read tweets and see who you follow and so on.

39

00:02:48.990  -->  00:02:58.080
So if the user presses sign in then they are redirected back to your web site with some data which is

40

00:02:58.290  -->  00:03:03.600
what allows your Web site to represent that user input.

41

00:03:04.410  -->  00:03:06.960
And then the user is happy they have now logged in.

42

00:03:06.960  -->  00:03:10.120
They're no longer orange with anger.

43

00:03:11.280  -->  00:03:13.770
Now I realize I haven't really told you how it really works.

44

00:03:13.770  -->  00:03:16.430
I've only told you kind of what the user has to do.

45

00:03:17.010  -->  00:03:18.130
So how does it really work.

46

00:03:18.270  -->  00:03:22.740
I'll give you the technical details and it's going to be a bit smaller attacks just because it doesn't

47

00:03:22.740  -->  00:03:24.470
fit on one screen.

48

00:03:25.260  -->  00:03:30.420
The first thing your application has to do is tell Twitter that you're going to try to log in a user

49

00:03:30.420  -->  00:03:31.680
.

50

00:03:31.680  -->  00:03:32.840
Now why.

51

00:03:32.910  -->  00:03:36.220
Why do you have to tell Twitter that we're going to try to log in to use.

52

00:03:36.570  -->  00:03:40.540
And that is because Twitter is stateless it doesn't know who is who.

53

00:03:40.800  -->  00:03:47.520
So you have to say Twitter please generate a unique number for me and for a few seconds we're going

54

00:03:47.520  -->  00:03:50.690
to use that number to refer to this user.

55

00:03:51.570  -->  00:03:52.110
OK.

56

00:03:52.110  -->  00:03:55.400
So Twitter generates a small unique number which is called the request token.

57

00:03:55.410  -->  00:04:02.580
So it doesn't get confused and the user then authorizes log in via Twitter by clicking the blue button

58

00:04:03.720  -->  00:04:04.810
that says seinen.

59

00:04:05.070  -->  00:04:09.430
And then Twitter now says OK another user has logged in via Twitter.

60

00:04:09.540  -->  00:04:15.010
This small unique number the request token isn't really large enough.

61

00:04:15.070  -->  00:04:17.820
There's a lot of log in with Twitter buttons around.

62

00:04:17.850  -->  00:04:20.550
So we need to generate a longer term.

63

00:04:20.580  -->  00:04:27.040
So Twitter generates an authorization code for that specific logging which is going to allow the request

64

00:04:27.040  -->  00:04:36.630
to can and the user to authorize each other our application receives the authorization blue site the

65

00:04:36.630  -->  00:04:38.990
authorization code.

66

00:04:39.450  -->  00:04:45.290
And then we send that code to Twitter and they generate a long random number which is the access to

67

00:04:45.320  -->  00:04:48.260
care which is the number that represents the use.

68

00:04:49.140  -->  00:04:55.320
Whenever we make a request to Twitter if we put that access token in that request today will know we

69

00:04:55.320  -->  00:04:57.320
represented this user.

70

00:04:58.160  -->  00:04:58.890
OK.

71

00:04:59.250  -->  00:05:06.960
So the first thing is we generate a request token then Twitter generates an authorization code and then

72

00:05:07.170  -->  00:05:13.770
we send that request token and that the authorization code to Twitter and they generate the access token

73

00:05:14.040  -->  00:05:15.650
which is what we used to represent.

74

00:05:15.660  -->  00:05:23.150
They use the authorization code can be received in one of two ways.

75

00:05:23.550  -->  00:05:30.630
If our application is a web application meaning we have a Web site the user gets redirected to our application

76

00:05:30.870  -->  00:05:39.990
and Twitter includes in that redirection the authorization code or if our application is not a web application

77

00:05:39.990  -->  00:05:41.180
we dont have a website.

78

00:05:41.430  -->  00:05:45.210
The user has to manually enter a PIN code.

79

00:05:45.600  -->  00:05:54.810
So let's summarize first with X we ask for a request token then the user signs in with Twitter authorizing

80

00:05:54.870  -->  00:05:59.350
our application then we get an authorization code.

81

00:05:59.610  -->  00:06:03.960
If we are a web application we're going to be looking into how to do that later on.

82

00:06:04.200  -->  00:06:07.700
Then we get a redirect the user accidentally pressed the button.

83

00:06:07.710  -->  00:06:12.800
They get redirected to our application and our application is not a web application.

84

00:06:12.810  -->  00:06:14.550
We get a pin code.

85

00:06:14.550  -->  00:06:17.780
The user has to type in the PIN code themselves.

86

00:06:17.790  -->  00:06:24.390
Finally we also have the access token which gets generated using the request token and the authorization

87

00:06:24.390  -->  00:06:29.150
code the access token is used to represent that they use.

88

00:06:29.670  -->  00:06:30.840
What does that mean.

89

00:06:30.960  -->  00:06:36.150
Once we have the access token we can request from the Twitter API.

90

00:06:36.390  -->  00:06:42.660
Sending in the access token and then Twitter will send us back for example the direct messages of the

91

00:06:42.660  -->  00:06:51.750
user that the access token is for the access token is used to represent a user in Twitter and all that

92

00:06:51.750  -->  00:06:54.910
is necessary because Twitter is a rest API.

93

00:06:54.960  -->  00:06:56.220
It is stateless.

94

00:06:56.220  -->  00:06:57.780
It doesn't know who we are.

95

00:06:57.780  -->  00:07:01.740
Just because we've done a request previously because we're locked in.

96

00:07:02.150  -->  00:07:04.590
So there we go.

97

00:07:04.920  -->  00:07:07.490
First the best you can then the user signs in.

98

00:07:07.530  -->  00:07:09.280
Then we get an authorization code.

99

00:07:09.360  -->  00:07:14.360
And finally we get the access token generated and we can use that to represent the user.

100

00:07:14.900  -->  00:07:16.120
That's the end of this video.

101

00:07:16.200  -->  00:07:21.710
We're going to be looking at more of this and doing it in python over the next few videos.

102

00:07:21.990  -->  00:07:24.480
So I'll see you there.
