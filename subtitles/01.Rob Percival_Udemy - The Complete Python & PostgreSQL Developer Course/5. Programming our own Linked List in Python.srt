1

00:00:00,270  -->  00:00:01,650
Hi we'll come back.

2

00:00:01,650  -->  00:00:07,160
Hopefully you've managed to attempt and successfully implemented your linked list.

3

00:00:07,160  -->  00:00:12,870
Remember once you have implemented your list all you have to do is right click the test file and run

4

00:00:12,990  -->  00:00:14,910
unit tests in Tests.

5

00:00:15,120  -->  00:00:21,310
Once you do that you should see this bar go green and no tests failed.

6

00:00:21,720  -->  00:00:27,830
Well we're going to be doing in this video is naturally implement these two methods and tell you how

7

00:00:27,920  -->  00:00:31,270
I would go about implementation.

8

00:00:31,290  -->  00:00:35,580
It is possible that you've implemented them slightly differently if the tests pass.

9

00:00:35,640  -->  00:00:40,890
It means that you've done a good job and if you think that something is substantially different and

10

00:00:40,890  -->  00:00:46,200
you're not sure how it works or you think your solution is better which is a possibility or you think

11

00:00:46,200  -->  00:00:50,710
your solution is worse and you want some tips on how to improve it please do post it to the forums.

12

00:00:50,720  -->  00:00:57,750
I've always interested in looking at what you've done without further ado let's go about implementing

13

00:00:57,840  -->  00:01:00,260
this linked list.

14

00:01:00,450  -->  00:01:07,380
The add to list method as we know from the lecture should add at the beginning of the linked list.

15

00:01:07,380  -->  00:01:12,750
This means that the root should become the new unit.

16

00:01:12,810  -->  00:01:16,970
The root is always the first node of the linked list.

17

00:01:17,070  -->  00:01:25,080
So this method should make sure the root is now the new node that is the parameter.

18

00:01:25,110  -->  00:01:27,720
How do we make the root equal to the new node.

19

00:01:28,040  -->  00:01:32,770
Well it's fairly simple self-doubt on the or on the root equals node.

20

00:01:33,780  -->  00:01:37,720
This we make the root equal to the new node.

21

00:01:38,430  -->  00:01:41,860
However what happens if the root already had a value.

22

00:01:42,150  -->  00:01:50,230
Well it will get overwritten and the old root deleted or lost and we don't want to do that.

23

00:01:50,280  -->  00:01:58,410
We want to make sure that the new node becomes the root bought the new node points to or has as a next

24

00:01:58,410  -->  00:02:02,240
node the previous root.

25

00:02:02,280  -->  00:02:04,070
So how do we do that node.

26

00:02:04,080  -->  00:02:08,340
Don't sent next self don't on this one particular route.

27

00:02:08,580  -->  00:02:18,720
And what this does is it says send to the next node of the new node to be the current root and then

28

00:02:19,110  -->  00:02:22,420
we sentence the roots to be equal to the new node.

29

00:02:23,430  -->  00:02:30,710
The root may be none but that's not a problem because the next node of any node can also be none.

30

00:02:30,750  -->  00:02:33,500
And that just means there isn't a node there.

31

00:02:33,900  -->  00:02:36,970
So this is how we would implement the add to list method.

32

00:02:37,200  -->  00:02:44,730
Although if you want to be explicit and clear you could do if self dot underscore underscore root and

33

00:02:44,730  -->  00:02:45,440
then do that.

34

00:02:45,510  -->  00:02:47,070
It's not necessary.

35

00:02:47,220  -->  00:02:53,790
I like this because it kind of makes it a bit clearer that we are checking that the root is set before

36

00:02:53,790  -->  00:03:00,990
setting it so set is not necessary because we can set the next to be none and that's fine but I like

37

00:03:00,990  -->  00:03:05,720
this better because it kind of makes a bit more sense to hear what we're doing.

38

00:03:06,000  -->  00:03:08,070
If the route currently exists.

39

00:03:08,250  -->  00:03:12,100
Make sure that the new nodes next node is the root.

40

00:03:12,180  -->  00:03:17,520
So it kind of joins in at the beginning and then make this variable here.

41

00:03:17,520  -->  00:03:19,350
This route to be equal to the new node.

42

00:03:19,380  -->  00:03:26,100
So the route will now point to the node we're adding and that node will point to what was before the

43

00:03:26,100  -->  00:03:30,270
root.

44

00:03:30,270  -->  00:03:37,560
I know this is complicated and it is a bit of a sort of mind twisting concept at this pointing between

45

00:03:37,560  -->  00:03:43,880
classes and objects but due to your time to understand it and do ask any questions if you have any.

46

00:03:44,070  -->  00:03:47,090
The find method apologies are deleted at ibiquity.

47

00:03:47,330  -->  00:03:51,030
The find method should find a node in the linked list with the given name.

48

00:03:51,060  -->  00:03:57,420
Remember each node has a name which is the name of the student so the parameter name which is described

49

00:03:57,420  -->  00:04:06,310
here is the name of the node to find in this list and it will return the node found or a lookup error

50

00:04:06,810  -->  00:04:10,820
if no node was found with the given name.

51

00:04:10,820  -->  00:04:14,610
OK let's delete that and try to implement this find method.

52

00:04:15,330  -->  00:04:22,130
We have to iterate over each node so we have to start at the root and then we need a way to move on

53

00:04:22,130  -->  00:04:27,240
to the next node and then into the next node and then to the next node and so on.

54

00:04:27,240  -->  00:04:33,210
So what to do with that is create a martyr a variable called marker which is going to be initialized

55

00:04:33,210  -->  00:04:41,160
to people root this marker variable is what I'm going to call each of the nodes in sequence in my list

56

00:04:41,170  -->  00:04:42,190
.

57

00:04:42,240  -->  00:04:50,550
So while marker this means while marker is not none remember while marker.

58

00:04:50,730  -->  00:05:00,630
Same thing then I'll do if Mark or dot name equally will name return marker and what this does is it

59

00:05:00,630  -->  00:05:07,470
first it sets a variable marker to be the root and then it initializes a while loop which is going to

60

00:05:07,470  -->  00:05:14,930
repeat the contents of the loop for as long as marker is not known if root has none.

61

00:05:15,030  -->  00:05:17,140
Then this is not going to run at all.

62

00:05:17,730  -->  00:05:24,720
If root is a node then this will run at least once and the first time it runs is going to check if the

63

00:05:24,720  -->  00:05:28,030
marker name is equal to the name we're looking for the parameter.

64

00:05:28,320  -->  00:05:34,770
And if it is it's going to return the marker which in the first instance would be the root in the next

65

00:05:34,770  -->  00:05:35,500
instance.

66

00:05:35,610  -->  00:05:40,870
We want the marker to be the roots next node and then the next node and then the next minute.

67

00:05:40,920  -->  00:05:49,260
So what we do is marker equal marker get next to what this does is and the first time the while loop

68

00:05:49,260  -->  00:05:49,890
runs.

69

00:05:49,920  -->  00:05:55,650
This will be the route it will check for the Monken name and return it if it's necessary.

70

00:05:55,650  -->  00:06:02,490
If it's not then we will set the market to be equal to the markers next so the marker now will be the

71

00:06:02,490  -->  00:06:05,800
second node of the list and we will run this again.

72

00:06:05,910  -->  00:06:10,260
Then it will be the third node and we will run this again and then will be the fourth node and so on

73

00:06:10,260  -->  00:06:10,590
.

74

00:06:10,770  -->  00:06:16,920
If at any point we find the marker we are going to return it and that's going to exit the loop and the

75

00:06:16,920  -->  00:06:17,420
method.

76

00:06:17,550  -->  00:06:23,420
So we're only going to go as far as finding the name in the list.

77

00:06:23,460  -->  00:06:28,800
Do remember that we could have multiple students with the same name and this is only going to find the

78

00:06:28,800  -->  00:06:34,350
first student with that name and not all of them.

79

00:06:34,590  -->  00:06:39,270
If we exit the while loop it means that we have not returned.

80

00:06:39,270  -->  00:06:45,870
If we've not returned it means that we've not found a node with the name that we are looking for.

81

00:06:45,870  -->  00:06:52,880
So if we do reach at some point the end of the is why loop we have to then to the code.

82

00:06:53,760  -->  00:07:02,370
Then here we raise a lookup error and we see name was not found in the linked list

83

00:07:05,500  -->  00:07:12,900
like so if we exit the while loop that means we have not found a node and then we raise the lookup error

84

00:07:13,290  -->  00:07:20,460
and we say as an error message that the name we were looking for was not found in the linked list and

85

00:07:20,460  -->  00:07:23,150
that's all that is the find method.

86

00:07:23,160  -->  00:07:30,240
And now once you run the tests they should all pass and you should see all six tests passed on the green

87

00:07:30,240  -->  00:07:32,470
bar there.

88

00:07:32,760  -->  00:07:40,310
If you do things like get a bit of the code such as a raising then the tests will not pass fully.

89

00:07:40,430  -->  00:07:49,420
So make sure to include all of the requirements that I wrote in the assignment text.

90

00:07:49,470  -->  00:07:55,170
Hopefully you were able to do something like this and your tests did pass but if they didn't then that's

91

00:07:55,200  -->  00:08:01,080
absolutely fine because you have now learned how to implement a linked list and how it works over the

92

00:08:01,080  -->  00:08:02,610
next few data structures.

93

00:08:02,610  -->  00:08:08,430
We were going to be implementing this knowledge is going to be essential for you to continue developing

94

00:08:08,430  -->  00:08:11,490
the data structures that I'm going to be suggesting.

95

00:08:11,970  -->  00:08:15,450
They are all fairly similar except the last one.

96

00:08:15,900  -->  00:08:21,690
So for the next two more data structures you can reuse this knowledge that you've gained here and that's

97

00:08:21,690  -->  00:08:26,250
going to be essential for you to be able to implement those new data structures.

98

00:08:26,700  -->  00:08:31,350
The next day the structure is going to be looking at is the queue which is going to be using a linked

99

00:08:31,350  -->  00:08:36,390
list is going to work slightly differently but a lot of things are going to be similar.

100

00:08:36,540  -->  00:08:38,650
So please do move on to the next video.

101

00:08:38,670  -->  00:08:44,430
Well we're going to be looking at Qs and I'm sure you will quickly understand that and be able to implement

102

00:08:44,430  -->  00:08:45,650
it.

103

00:08:45,660  -->  00:08:47,800
I'll see you in the very next video.
