WEBVTT
1

00:00:00.120  -->  00:00:05.350
Hi and welcome back in this video we're going to be looking at generating random integers.

2

00:00:05.910  -->  00:00:14.550
The Magic Numbers list that we created in the last you contains two integers and that is that no matter

3

00:00:15.500  -->  00:00:16.770
who that runs the program.

4

00:00:16.770  -->  00:00:20.240
So the magic number at least is always going to be three or nine.

5

00:00:20.250  -->  00:00:27.540
In this case that means that after a few attempts the user knows the magic numbers and therefore it

6

00:00:27.540  -->  00:00:29.890
no longer is as fun.

7

00:00:29.910  -->  00:00:36.420
So what we want to do is generate the numbers in the program randomly so that the user can never guess

8

00:00:36.960  -->  00:00:41.380
what the numbers are going to be in order to do that.

9

00:00:41.400  -->  00:00:49.740
We are going to need to do our first import and import in Python just putting in some code that somebody

10

00:00:49.740  -->  00:00:54.260
else wrote and allows us to use it in our program.

11

00:00:54.270  -->  00:01:01.950
So in this case what we want to do is import a module called random and we're going to be using the

12

00:01:01.950  -->  00:01:06.360
random module in our program to generate random integers

13

00:01:09.600  -->  00:01:10.740
before we do that.

14

00:01:10.770  -->  00:01:17.730
Let's go into IDL E and try out the random module here and then we can put it in our program.

15

00:01:17.730  -->  00:01:20.030
This is a very common sort of workflow.

16

00:01:20.220  -->  00:01:22.460
You'll go into idealy to try something out.

17

00:01:22.500  -->  00:01:24.780
Verify that everything works the way you thought.

18

00:01:24.990  -->  00:01:27.430
And then you use it in your program.

19

00:01:28.200  -->  00:01:32.400
So let's import random here and just move the cursor out the way.

20

00:01:32.910  -->  00:01:33.550
There we go.

21

00:01:33.550  -->  00:01:40.050
I noticed how Python doesn't do anything because it's just an import it doesn't give us any output.

22

00:01:40.050  -->  00:01:48.900
However now we can use methods we can use commands that are inside this random module and random contains

23

00:01:48.900  -->  00:01:51.150
a number of commands.

24

00:01:51.300  -->  00:01:57.780
These commands are all specified in the documentation for the random module and you can access this

25

00:01:57.810  -->  00:01:58.980
implementation online

26

00:02:01.890  -->  00:02:12.060
the way we generate random integers is using the random dot Rand in method and this doesn't give us

27

00:02:12.540  -->  00:02:15.120
a random integer just by itself.

28

00:02:15.120  -->  00:02:19.140
We need to specify the range between which we want integers.

29

00:02:19.140  -->  00:02:22.090
So in this case we want integers between 0 and 9.

30

00:02:22.110  -->  00:02:23.420
Both inclusive.

31

00:02:23.880  -->  00:02:28.010
So if we run that we get 6 which is one of the random integers.

32

00:02:28.170  -->  00:02:35.760
And then what we wanted to do is random run it between 0 and 9 again and we get a different random integer

33

00:02:36.060  -->  00:02:39.600
which is what we wanted from the documentation.

34

00:02:39.600  -->  00:02:44.860
We know that the number generated includes both 0 and 9.

35

00:02:44.940  -->  00:02:49.880
So that is the entire range we're generating any number between 0 and 9 both inclusive.

36

00:02:50.610  -->  00:02:50.900
OK.

37

00:02:50.940  -->  00:02:59.380
So let's go back into our program and now we can say random dot brand end in 0 9.

38

00:02:59.940  -->  00:03:05.830
And here we can say random dot Rand and between 0 and 9.

39

00:03:05.950  -->  00:03:12.030
So is we've got the same code twice and that is not ideal but it'll do for now.

40

00:03:12.300  -->  00:03:13.930
Let's say van't and run it.

41

00:03:14.100  -->  00:03:18.590
And now we can type 3 which we didn't quite get 5.

42

00:03:18.690  -->  00:03:20.420
We didn't quite get it 7.

43

00:03:20.430  -->  00:03:21.590
We didn't quite get it.

44

00:03:21.780  -->  00:03:23.140
So let's try that again.

45

00:03:23.190  -->  00:03:25.650
So if we manage to just put the numbers in.

46

00:03:25.690  -->  00:03:28.990
And in this case 3 was the right number.

47

00:03:29.100  -->  00:03:30.410
So there we go.

48

00:03:31.250  -->  00:03:32.040
And that's it.

49

00:03:32.040  -->  00:03:37.170
So the numbers are being generated randomly and we can verify that because in the second run we got

50

00:03:37.170  -->  00:03:38.970
the three as me the right number.

51

00:03:39.180  -->  00:03:41.450
And in the first round we did not.

52

00:03:41.460  -->  00:03:44.940
So this is how you generate random integers.

53

00:03:45.090  -->  00:03:54.030
And is a small challenge for you generally 10 random numbers and keep track of the minimum number that

54

00:03:54.030  -->  00:04:00.320
you've generated at the end of the generation prints the minimum number out.

55

00:04:00.450  -->  00:04:09.090
So I'll repeat myself printout will calculate 10 random numbers and keep track of the minimum number

56

00:04:09.150  -->  00:04:11.090
that you are generating.

57

00:04:11.490  -->  00:04:20.310
Then at the end printout the minimum number and recomposing the video on trying this for a few minutes

58

00:04:20.310  -->  00:04:20.980
.

59

00:04:21.180  -->  00:04:25.200
See if you can get a solution that works.

60

00:04:25.530  -->  00:04:32.930
And if you don't post the video now then we'll continue and solve it here.

61

00:04:33.030  -->  00:04:37.110
So the problem was to generate 10 random numbers.

62

00:04:37.110  -->  00:04:43.170
Keeping track of the minimum number generated and then Ivey and print that minimum number.

63

00:04:43.980  -->  00:04:51.550
So what I'm going to do is I'm going to generate random numbers from 0 between 0 and 100 see.

64

00:04:52.050  -->  00:04:58.110
So the minimum number is going to be of those 10 random numbers generated.

65

00:04:58.170  -->  00:04:59.850
The smallest one.

66

00:05:00.680  -->  00:05:06.070
So I'm going to initialize minimum number to 100.

67

00:05:06.120  -->  00:05:12.540
And the reason I'm initializing to 100 is because when I generate a number I'm going to say if this

68

00:05:12.540  -->  00:05:19.620
number that I've generated is smaller than the minimum assigned minimum to be this number and we'll

69

00:05:19.620  -->  00:05:22.550
see why I'm doing that in just a moment.

70

00:05:23.370  -->  00:05:33.410
The next step is to say for index in range 10 and this is going to generate 10 numbers whether it's

71

00:05:33.450  -->  00:05:38.590
going to iterate through this loop 10 times random number.

72

00:05:38.700  -->  00:05:40.800
It's going to be equal to random.

73

00:05:40.810  -->  00:05:44.710
Don't run in between 0 and 100.

74

00:05:45.060  -->  00:05:46.630
So that's my random number.

75

00:05:47.340  -->  00:05:56.010
And then I'm going to say Print the number generated is not format random number.

76

00:05:56.010  -->  00:06:02.160
The reason I'm printing the random number out is just so I can have a look at the number and make sure

77

00:06:02.160  -->  00:06:04.660
that the minimum is working.

78

00:06:05.340  -->  00:06:09.690
And then I'm going to say if random number is less than minimum

79

00:06:12.660  -->  00:06:19.740
in fact I'm going to say less than or equal to minimum then I'm going to say a minimum equals random

80

00:06:19.740  -->  00:06:20.640
number.

81

00:06:21.390  -->  00:06:28.190
For example so if we generate the number 50 This would be 50 then I would print the number generated

82

00:06:28.200  -->  00:06:31.500
is 50 and 50 is less than 100.

83

00:06:31.680  -->  00:06:34.760
And then I would assign a minimum to be 50.

84

00:06:34.830  -->  00:06:36.460
Next time we generate 60.

85

00:06:36.480  -->  00:06:37.770
So a random number is 60.

86

00:06:37.860  -->  00:06:41.260
I pronounce 60 is 60 less than 50.

87

00:06:41.310  -->  00:06:41.870
No.

88

00:06:41.880  -->  00:06:44.060
So that would not overwrite.

89

00:06:44.130  -->  00:06:48.110
So then we generate 25 is 25 less than 50.

90

00:06:48.210  -->  00:06:48.660
Yes.

91

00:06:48.660  -->  00:06:50.520
So I would set a minimum to be 25.

92

00:06:50.520  -->  00:06:54.990
So this is keeping track of the minimum number generated.

93

00:06:55.830  -->  00:06:57.110
OK.

94

00:06:58.170  -->  00:07:02.310
So that's going to do the entire loop.

95

00:07:03.150  -->  00:07:09.630
And now I'm going to say print minimum and that print 1 which is the smallest number generator.

96

00:07:09.630  -->  00:07:13.050
There you can see in the middle.

97

00:07:13.050  -->  00:07:14.840
So this could be the challenge.

98

00:07:14.850  -->  00:07:21.540
This could be a solution to the challenge which is quite effective and reasonably quick as we can see

99

00:07:21.870  -->  00:07:26.760
it printed the numbers out and then instantly knew the minimum because we had been keeping track of

100

00:07:26.760  -->  00:07:29.400
it in that variable.

101

00:07:30.570  -->  00:07:30.830
OK.

102

00:07:30.840  -->  00:07:37.320
So in this video we've looked at generating random integers and we've made sure that we understand how

103

00:07:37.320  -->  00:07:44.190
to generate random integers and also we've changed our program to use two random integers instead of

104

00:07:44.310  -->  00:07:51.720
two hardcoded or static numbers three and nine which were there before now are replaced by two random

105

00:07:51.780  -->  00:07:53.000
integers.

106

00:07:52.990  -->  00:08:00.870
Do notice that in some cases these and these may be the same which is a bit of a problem but nevertheless

107

00:08:01.270  -->  00:08:03.400
is something that you can keep into account.

108

00:08:03.870  -->  00:08:06.110
But we won't be fixing that just now.

109

00:08:06.630  -->  00:08:08.090
That's everything for this video.

110

00:08:08.160  -->  00:08:15.270
And in the next few videos we're going to be cleaning up this program by defining our own methods so

111

00:08:15.320  -->  00:08:16.090
to use the next video
