1

00:00:00,400  -->  00:00:06,900
Hi and welcome back in this video we're looking at what is a database and I'm sure that you already

2

00:00:06,930  -->  00:00:11,000
know what a database is you think that you know what a database is.

3

00:00:11,070  -->  00:00:12,870
And chances are you probably do.

4

00:00:13,020  -->  00:00:18,300
Databases have been around for a long time but nevertheless let's take a quick look at what our data

5

00:00:18,300  -->  00:00:25,020
bases and also a couple more things about databases and about specifically the database system.

6

00:00:25,160  -->  00:00:32,230
We're going to be using when we talk about databases we tend to think of these things.

7

00:00:32,310  -->  00:00:37,320
This is a table and as you can see it has four columns.

8

00:00:37,590  -->  00:00:43,970
The ones going from top to bottom ID which can be an identifier some sort of unique number.

9

00:00:44,280  -->  00:00:53,740
The first name last name and an email address so here could be for different users of a product or of

10

00:00:53,740  -->  00:00:58,550
a business and user with ID 1 2 3 and 4.

11

00:00:58,560  -->  00:01:01,130
And you've got their names and their e-mail addresses.

12

00:01:01,180  -->  00:01:06,050
This is a very normal table to have in a database system.

13

00:01:06,270  -->  00:01:13,620
So we normally think of these things now in database systems nowadays they've evolved substantially

14

00:01:13,620  -->  00:01:20,370
over the last few decades and now we are not limited to just storing data in a table and then retrieving

15

00:01:20,370  -->  00:01:21,000
it.

16

00:01:21,000  -->  00:01:22,410
There's a bunch more things we can do.

17

00:01:22,470  -->  00:01:26,610
And one of those things is what I'm going to show you now.

18

00:01:26,850  -->  00:01:32,220
So table should store data related to one thing only and that's the key premise.

19

00:01:32,220  -->  00:01:39,000
So just for example customers or items or you know that sort of stuff if it belongs to a larger entity

20

00:01:39,030  -->  00:01:44,760
such as a business or a web application then it may store related data in separate tables.

21

00:01:44,760  -->  00:01:51,410
And what I mean with related data is customers items purchases stores they're all somehow related.

22

00:01:51,420  -->  00:01:58,280
Customers can purchase items and items can be inside stores and so on.

23

00:01:58,290  -->  00:02:02,660
So we have related dates and I'm going to show you three tables customers purchases and items.

24

00:02:02,700  -->  00:02:09,510
Let's start with customers let's say we've got a customer table that has four columns like we saw before

25

00:02:09,660  -->  00:02:13,690
with an identifier which is a unique number for each row.

26

00:02:14,010  -->  00:02:17,520
And then if got a first name last name on an e-mail.

27

00:02:17,520  -->  00:02:25,470
The first customer in your table could be ID number one with first name Jose last names and email there

28

00:02:26,190  -->  00:02:30,000
and then you can have more customers as well.

29

00:02:30,000  -->  00:02:38,160
So then you have for customers for example let's now move on to the items table an item could have for

30

00:02:38,160  -->  00:02:40,410
example an I.D. a unique identifier.

31

00:02:40,410  -->  00:02:45,690
Once again a name of the item and a price.

32

00:02:45,690  -->  00:02:51,960
For example one of your items could be with identifying number one a check that cost a hundred or 55

33

00:02:52,260  -->  00:03:00,220
units Maccabi dollars it could be pounds euros etc. and you could have more items as well naturally

34

00:03:00,220  -->  00:03:01,770
.

35

00:03:02,190  -->  00:03:08,250
Finally the more interesting column toy the more interesting table is not the customer or the items

36

00:03:08,250  -->  00:03:10,430
table but rather the purchases table.

37

00:03:10,560  -->  00:03:16,740
And to put it in the middle for a specific reason let's say that this purchase this table has once again

38

00:03:16,770  -->  00:03:22,990
three columns but now there is no information related to the purchase itself.

39

00:03:23,010  -->  00:03:32,220
For example say how much it was paid how much a customer paid in that purchase but rather only an identifier

40

00:03:32,220  -->  00:03:33,450
for the purchase.

41

00:03:33,450  -->  00:03:39,450
The customer I.D. the customer that made the purchase and the item I.D. which is the item that was bought

42

00:03:39,540  -->  00:03:41,200
in that purchase.

43

00:03:41,250  -->  00:03:47,890
This is assuming each customer can only buy one item per purchase.

44

00:03:48,060  -->  00:03:54,780
For example in your first purchase customer number one bought item number one in your second purchase

45

00:03:55,110  -->  00:03:56,000
.

46

00:03:56,070  -->  00:03:56,980
Top try that.

47

00:03:57,190  -->  00:03:59,640
This is a bit of animation there.

48

00:03:59,910  -->  00:04:06,270
So this links up the first customer with the first item in the second purchase.

49

00:04:06,270  -->  00:04:09,680
We had the first customer buying the third item.

50

00:04:09,680  -->  00:04:17,480
Item number three in the third purchase we had Customer Number Two buying item number four.

51

00:04:17,820  -->  00:04:23,530
And in your last purchase we had customer number for buying item number four.

52

00:04:24,750  -->  00:04:29,010
So as you can see there are relations between the staples.

53

00:04:29,010  -->  00:04:33,740
This data is related to one another and we call this relational data.

54

00:04:34,650  -->  00:04:39,730
The purchase is stable performs the relationship between customers and items.

55

00:04:40,020  -->  00:04:49,050
But in a more basic way the customer's table is related to the purchases table and the purchases table

56

00:04:49,230  -->  00:04:51,200
is related to the items table.

57

00:04:51,240  -->  00:04:54,350
So there is no relationship between customers and items.

58

00:04:54,350  -->  00:04:59,310
There's only relationships between customers and purchases and between purchases and items.

59

00:04:59,310  -->  00:05:07,530
And that's a key distinction related data is something that we can model these relationships with so

60

00:05:07,520  -->  00:05:14,010
we can model relationships between tables and columns using data based systems designed for modeling

61

00:05:14,000  -->  00:05:19,700
these relationships and there are some other data systems which do not allow for relational data.

62

00:05:19,920  -->  00:05:26,780
And I may sound wild you may think well why would you not want to allow for data that is related to

63

00:05:26,790  -->  00:05:27,690
one another.

64

00:05:28,130  -->  00:05:34,560
And the reason is because not allowing for relational data and gives you other advantages such as increased

65

00:05:34,560  -->  00:05:37,610
speed or simply scalability among others.

66

00:05:37,920  -->  00:05:43,470
If your system doesn't have to cope with the ability to relate to data one to another then it can be

67

00:05:43,470  -->  00:05:46,790
a simpler system and therefore it can be faster.

68

00:05:47,670  -->  00:05:54,120
Now although we're talking about scalability Let's quickly mention a bit about scalability.

69

00:05:54,140  -->  00:05:57,180
Don't worry about scalability as the first thing.

70

00:05:57,180  -->  00:06:00,830
At least not until you are forced to.

71

00:06:01,620  -->  00:06:03,050
Here's a few things to remember.

72

00:06:03,380  -->  00:06:09,570
A database management system such as Pascola sequel which is the one we are going to be using is installed

73

00:06:09,600  -->  00:06:17,690
and runs on a computer for example your own computer and applications such as your Python apps then

74

00:06:17,690  -->  00:06:22,660
connect to that computer and ask it to retrieve data for them.

75

00:06:23,040  -->  00:06:29,000
So the database by itself is not particularly useful unless you've got somebody directly communicating

76

00:06:29,000  -->  00:06:29,820
with it.

77

00:06:29,810  -->  00:06:34,820
Normally you're going to make an app and the app is going to communicate with a computer and that is

78

00:06:34,820  -->  00:06:39,810
going to ask the database to retrieve data for it.

79

00:06:39,810  -->  00:06:44,580
If there's too many requests for data for example too many applications then the computer can end up

80

00:06:44,690  -->  00:06:48,580
unable to cope with a load and that is why we need scalability.

81

00:06:48,810  -->  00:06:57,630
Scalability entails enabling the database to be spread across multiple computers and then our apps can

82

00:06:57,620  -->  00:07:05,420
request in more places at once which reduces the load on each individual server for example or another

83

00:07:05,430  -->  00:07:05,800
option.

84

00:07:05,810  -->  00:07:11,610
Instead of splitting across multiple servers we can make it we can just make one of the servers a lot

85

00:07:11,610  -->  00:07:13,200
bigger and not more powerful.

86

00:07:13,280  -->  00:07:19,230
And then it can deal with more load due to the two ways that we can perform scalability.

87

00:07:19,230  -->  00:07:26,640
But this is not a course about scalability relational database management systems which are the RDBMS

88

00:07:26,630  -->  00:07:33,420
is which is Pasqua equal if one of them tend to not scale as well as non-relational database management

89

00:07:33,410  -->  00:07:34,820
systems.

90

00:07:34,860  -->  00:07:39,530
So what this means is that things like Pasqua sequel or my sequel we're going to be looking at that

91

00:07:40,110  -->  00:07:43,650
tend to not scale as well which makes sense.

92

00:07:43,680  -->  00:07:49,050
The non-relational systems are simpler and therefore it's easier to make them scale.

93

00:07:49,530  -->  00:07:51,470
There's a few more reasons for it.

94

00:07:51,480  -->  00:07:53,080
It's not just because they're simpler.

95

00:07:53,370  -->  00:07:58,880
But we won't be getting into the reasons why because that would be more on a course about non-relational

96

00:07:59,100  -->  00:08:01,720
database management systems.

97

00:08:02,060  -->  00:08:03,710
So is gullability important.

98

00:08:04,010  -->  00:08:09,020
Yes it is important because it enables the servers to serve more clients.

99

00:08:09,240  -->  00:08:14,090
So either you have more servers or you have more powerful servers and that's what capability is about

100

00:08:14,660  -->  00:08:16,580
and your clients are your applications.

101

00:08:16,590  -->  00:08:22,150
So that's what scalability is important because if if your server or your database doesn't scale at

102

00:08:22,140  -->  00:08:28,400
all you may end up not being able to cope with an increased load.

103

00:08:28,610  -->  00:08:35,950
However RDBMS is allow you to interact and retrieve data easily a lot easier than it would be with a

104

00:08:35,940  -->  00:08:38,140
non-relational system.

105

00:08:38,370  -->  00:08:42,130
As an example and we're going to be looking at a lot of examples throughout the next couple of sections

106

00:08:42,870  -->  00:08:47,450
as an example using the table shown earlier with your customers items and purchases.

107

00:08:47,660  -->  00:08:54,330
It is a lot easier to get something like the revenue generated per customer in total using an RDBMS

108

00:08:54,480  -->  00:09:00,890
rather than a non-relational system and with a lot easier I mean substantially easier.

109

00:09:01,010  -->  00:09:06,060
You can get the revenue generated per customer just asking the database for it.

110

00:09:06,060  -->  00:09:07,850
What is with a non-relational system.

111

00:09:07,860  -->  00:09:10,170
You cannot with a non-relational system.

112

00:09:10,160  -->  00:09:17,420
Your application would have to get multiple bits of data and then join them together in the app as opposed

113

00:09:17,420  -->  00:09:19,370
to in the database.

114

00:09:20,450  -->  00:09:24,060
So should you use a relational database.

115

00:09:24,330  -->  00:09:31,080
If your data is simple and there are few to no relationships between them then don't use a relational

116

00:09:31,080  -->  00:09:31,590
system.

117

00:09:31,590  -->  00:09:33,270
Use something else.

118

00:09:33,260  -->  00:09:35,390
I hope that's not the case because you're already here.

119

00:09:35,420  -->  00:09:39,200
So that means you think you need a relational system.

120

00:09:39,200  -->  00:09:47,270
If your data is related expect that as the applications grow and more data is collected you as a developer

121

00:09:47,270  -->  00:09:53,270
will find more and more relationships and the relationships will grow and your data will be more interrelated

122

00:09:53,610  -->  00:09:56,720
and there will be more and more need for a relational system.

123

00:09:56,730  -->  00:10:03,980
If you have really good data use a relational system and a word of warning if you're not sure use a

124

00:10:03,990  -->  00:10:06,200
relational system.

125

00:10:06,200  -->  00:10:10,800
Just use an non-relational system if you're sure that your data is not related.

126

00:10:10,820  -->  00:10:16,450
If you're not sure use a relational system at least to begin with.

127

00:10:16,440  -->  00:10:21,470
So a couple of other elements of relational database management systems and we are going to be looking

128

00:10:21,480  -->  00:10:23,720
at these throughout the course.

129

00:10:23,790  -->  00:10:29,960
Are things like views which non-relational systems don't tend to have functions which are not original

130

00:10:29,970  -->  00:10:36,290
systems sometimes do have to be give you a lot of power and specific Pasquier sequel has a lot of these

131

00:10:36,290  -->  00:10:42,060
and that they're very useful aggregation which some non-relational systems have but a lot of others

132

00:10:42,060  -->  00:10:43,310
don't.

133

00:10:43,320  -->  00:10:47,970
Then there is things like adding data together in the database and we're going to be looking at how

134

00:10:47,970  -->  00:10:54,780
to do that and Joines which allow you to link tables together and retrieve data from all of them simultaneously

135

00:10:54,770  -->  00:10:54,990
.

136

00:10:55,110  -->  00:10:59,260
And we're really going to be looking at that in the course and there's a lot more things.

137

00:10:59,580  -->  00:11:05,540
Relational database management systems are a lot more a lot older than non-relational and they are a

138

00:11:05,550  -->  00:11:06,440
lot more mature.

139

00:11:06,440  -->  00:11:09,240
In general they are reasonably fast.

140

00:11:09,260  -->  00:11:14,350
They give you a lot of ease of use in terms of retrieving and interacting with your data.

141

00:11:14,370  -->  00:11:20,400
The really great systems and a lot of people nowadays think that relational systems are just outdated

142

00:11:20,420  -->  00:11:22,040
but really they're not.

143

00:11:23,060  -->  00:11:23,280
OK.

144

00:11:23,270  -->  00:11:26,560
There are various relational database management systems.

145

00:11:26,610  -->  00:11:33,500
There's my sequel which is arguably the most popular and that is because a few years back back when

146

00:11:33,500  -->  00:11:38,070
my sequel was on version for plotting the sequel The main competitor which is the one we're looking

147

00:11:38,070  -->  00:11:43,260
at wasn't version 7 and possibly sequel was not very good.

148

00:11:43,430  -->  00:11:44,950
But nowadays Patras equals vision.

149

00:11:44,950  -->  00:11:50,420
Nine point five has come a long way and possibly sequel I'd say is arguably the best.

150

00:11:50,570  -->  00:11:57,240
So if you are just learning about relational data using porticos equal scores is perfect for you because

151

00:11:57,410  -->  00:12:02,510
Patras equal is arguably the best system nowadays in terms of performance in terms of adherence to sequel

152

00:12:02,510  -->  00:12:05,400
standards and a bunch more things.

153

00:12:05,390  -->  00:12:08,680
You've also got Secret Service which is also very good but it's not free.

154

00:12:08,880  -->  00:12:15,380
So if your company has a Microsoft subscription then you can maybe use sequel server instead.

155

00:12:15,380  -->  00:12:21,660
But it is quite expensive and there's a few more such as made by Oracle but these three here are the

156

00:12:21,650  -->  00:12:23,170
main ones.

157

00:12:23,790  -->  00:12:29,080
Now that we're here we've quickly looked at a few things related to database management systems.

158

00:12:29,170  -->  00:12:35,420
So just scalability how they're structured how you can link data together and a few of the relational

159

00:12:35,420  -->  00:12:37,080
database management systems available.

160

00:12:37,290  -->  00:12:41,880
And in this cause as I mentioned we're looking into possible yes and that is arguably the best system

161

00:12:41,970  -->  00:12:47,610
there is right now and certainly the only one that is as good and free.

162

00:12:47,630  -->  00:12:48,530
So without further ado.

163

00:12:48,540  -->  00:12:49,740
Thanks for listening in.

164

00:12:49,940  -->  00:12:50,870
And I see you in the next video
