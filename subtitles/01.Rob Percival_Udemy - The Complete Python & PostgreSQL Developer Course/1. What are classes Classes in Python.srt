1

00:00:00,380  -->  00:00:06,460
One will come back in this video we're going to talk about classes in Python.

2

00:00:06,510  -->  00:00:13,440
In the last section we created a program that allowed us to create students at marks to the students

3

00:00:13,440  -->  00:00:18,370
and calculate the average marks and we make that and it works.

4

00:00:18,600  -->  00:00:22,960
However there are a couple of things that could be improved.

5

00:00:23,040  -->  00:00:34,650
And one of those things is this student data dictionary in general when you are modeling with data something

6

00:00:34,650  -->  00:00:36,950
that could exist in real life.

7

00:00:37,650  -->  00:00:40,820
It is best to use a class for that.

8

00:00:40,980  -->  00:00:47,740
And here's the reason why using a class for these would be better than using a dictionary.

9

00:00:47,820  -->  00:00:57,780
And the reason is using a class allows you not only to have properties and values for those properties

10

00:00:57,810  -->  00:01:05,170
like we do here but also actions that the model can do.

11

00:01:05,670  -->  00:01:06,850
Here's what I mean with this.

12

00:01:06,960  -->  00:01:14,160
The student data has a name and a set of marks and inside a dictionary we've got values for the name

13

00:01:14,160  -->  00:01:17,000
and values for the marks as well.

14

00:01:18,210  -->  00:01:24,940
However we have a separate method used to calculate the average mark.

15

00:01:24,990  -->  00:01:37,530
Now this method acts on the dictionary and therefore it would be ideal if we didn't have to tell it

16

00:01:37,950  -->  00:01:40,010
which dictionary it is acting on.

17

00:01:40,170  -->  00:01:45,710
What I mean with it is it would be ideal if I could do in this dictionary something like this.

18

00:01:45,950  -->  00:01:52,170
Average mark and here put a method that when Rand

19

00:01:55,680  -->  00:02:02,710
this doesn't work but put a method that when run calculated the average of the marks inside the dictionary

20

00:02:02,720  -->  00:02:03,600
.

21

00:02:04,350  -->  00:02:10,500
And what that would allow us to do is NOT have to go looking for the dictionary to calculate the average

22

00:02:10,600  -->  00:02:20,400
of instead the dictionary itself would hold the ability to calculate to the average of itself and what

23

00:02:20,400  -->  00:02:29,310
that simply means is that it simplifies the entire process instead of down here selecting the student

24

00:02:29,850  -->  00:02:32,300
of which we want to calculate the average.

25

00:02:32,670  -->  00:02:39,480
We could just say student calculate your own average and then it would print it out so it would simplify

26

00:02:39,480  -->  00:02:42,410
things a bit.

27

00:02:42,900  -->  00:02:48,750
Creating a class for the students is actually really simple and using and creating the classes is the

28

00:02:48,750  -->  00:02:50,700
best way to learn about them.

29

00:02:50,940  -->  00:02:56,040
So that's what we're going to be doing in this video what we're going to convert this program into a

30

00:02:56,040  -->  00:03:02,430
program that uses classes because that's the best way for you to truly understand what I mean with what

31

00:03:02,430  -->  00:03:05,870
I've just said in the last couple of minutes.

32

00:03:08,340  -->  00:03:09,680
So let's do just that.

33

00:03:09,960  -->  00:03:18,090
Let's create a class and that class is going to represent a student just like this dictionary here represents

34

00:03:18,120  -->  00:03:19,260
a student.

35

00:03:19,260  -->  00:03:23,260
We're going to create a class that represents a student as well.

36

00:03:23,340  -->  00:03:28,350
So I'm going to create the class by saying class and then the class name.

37

00:03:28,350  -->  00:03:32,070
So in this case a student and then a colon.

38

00:03:32,370  -->  00:03:41,580
And here we can define what a student looks like now just like in this dictionary where we find that

39

00:03:41,640  -->  00:03:51,360
it has properties of name and marks the class also has to define what properties a student has.

40

00:03:51,360  -->  00:03:58,530
And we do that inside the special method which is underscore underscore in that underscore underscore

41

00:03:58,920  -->  00:03:59,970
.

42

00:04:00,520  -->  00:04:08,730
Notice these are two underscores separately there and this method gets called whenever we create a new

43

00:04:08,730  -->  00:04:11,680
student of this type.

44

00:04:11,670  -->  00:04:13,560
And what we type in say this method.

45

00:04:13,750  -->  00:04:21,820
Let's just type that first and then I'll explain what it does is we'll say self dot name equals John

46

00:04:21,820  -->  00:04:21,880
.

47

00:04:21,880  -->  00:04:32,120
For example self dot marks equals an empty list.

48

00:04:32,190  -->  00:04:38,570
So what this is doing is it's saying when we create a student it's going to give us essentially a new

49

00:04:39,100  -->  00:04:45,680
new student data with the name John and the marks empty list.

50

00:04:45,720  -->  00:04:54,690
It's not a dictionary however it is an object and they behave in pretty much identical ways.

51

00:04:54,720  -->  00:05:02,310
The student object to the class also has properties just like the dictionary we've got name and marks

52

00:05:02,760  -->  00:05:10,950
just like the dictionary has name and marks and the self just means the student that we aren't talking

53

00:05:10,950  -->  00:05:12,090
about.

54

00:05:12,090  -->  00:05:20,090
So for example we could have two one called John and one called Anna and self means John.

55

00:05:20,220  -->  00:05:22,390
When we are in the context of John.

56

00:05:22,590  -->  00:05:24,110
So let's use it.

57

00:05:24,240  -->  00:05:26,720
That will surely make things clear.

58

00:05:28,730  -->  00:05:38,460
This student data instead of creating a dictionary what we're going to do is say student OK.

59

00:05:38,750  -->  00:05:44,310
Notice that we're not using the name just now and we're going to get exactly to how we can use the name

60

00:05:44,310  -->  00:05:46,280
in a moment.

61

00:05:46,360  -->  00:05:48,890
So student data is now a student object.

62

00:05:48,940  -->  00:05:52,720
It is no longer a dictionary.

63

00:05:54,970  -->  00:06:03,070
Now whenever we want to interact with one of the properties of an object we don't do it like we did

64

00:06:03,060  -->  00:06:10,430
with a dictionary with a dictionary we had to access the keys using this square bracket notation but

65

00:06:10,440  -->  00:06:13,580
with objects we use dot notation.

66

00:06:13,890  -->  00:06:19,160
So it would be student dot marks dot a pen and similarly down here.

67

00:06:19,300  -->  00:06:25,780
We're also accessing the property and it would also be the dot and here as well.

68

00:06:26,500  -->  00:06:28,340
Here we're accessing the name of the student.

69

00:06:28,380  -->  00:06:29,890
And once again it has to be that dot

70

00:06:33,750  -->  00:06:34,430
and that's it.

71

00:06:34,460  -->  00:06:40,450
That's the only places where we're accessing properties of the Shoot-In dictionary and we've changed

72

00:06:40,500  -->  00:06:42,800
the dictionary to be an object now.

73

00:06:43,240  -->  00:06:47,390
But notice that the students always have the name John.

74

00:06:47,620  -->  00:06:57,820
So let's run the app and I'm going to add in you student and we're going to enter a name like Anna and

75

00:06:57,810  -->  00:07:03,980
then we're going to print the student list and notice how we get John and the average market zero.

76

00:07:04,030  -->  00:07:05,770
But we can add a mark.

77

00:07:06,130  -->  00:07:12,090
We're going to enter zero and the market's going to be 90 and then we can print the list again and the

78

00:07:12,100  -->  00:07:14,040
marks are there.

79

00:07:14,630  -->  00:07:22,790
And that's really the student is called John because we've specified the name of the object self dot

80

00:07:22,810  -->  00:07:25,170
name to be John.

81

00:07:25,240  -->  00:07:31,090
However when we create a specific object like we do in here student and then open and close brackets

82

00:07:31,810  -->  00:07:39,090
we can also specify that object's name we can specify properties to be passed to that object.

83

00:07:39,150  -->  00:07:45,660
So we're going to put the name in here and then in the init method after cells we also put the name

84

00:07:45,750  -->  00:07:50,990
in there and that gets passed in as a argument as we know.

85

00:07:51,070  -->  00:07:53,080
And finally we can also use that.

86

00:07:53,230  -->  00:07:58,760
So let's rerun the app now and add a new student like so.

87

00:08:00,370  -->  00:08:03,920
And there we have Anna appearing because we've passed the name.

88

00:08:04,020  -->  00:08:08,750
And when we create that object the name that we passed gets use.

89

00:08:08,980  -->  00:08:13,070
Let's create another student just to make sure that that is working.

90

00:08:13,480  -->  00:08:19,890
And when we print we get banner and then John it's important to realize now that the class the term

91

00:08:19,880  -->  00:08:27,070
means the structure of the data and all of them of the thing that we're modeling in this case it determines

92

00:08:27,460  -->  00:08:30,270
that it has a name and that it has marks.

93

00:08:30,430  -->  00:08:40,300
But when we create an object that instantiates a new set of data and there we can specify a name for

94

00:08:40,300  -->  00:08:44,400
that specific object and a set of marks for that specific object.

95

00:08:44,500  -->  00:08:48,840
They are not shared amongst objects.

96

00:08:50,160  -->  00:08:54,520
So what else can we do with this.

97

00:08:54,510  -->  00:09:01,690
We've got a method calculate average mark which takes in a student object and then calculates the average

98

00:09:01,720  -->  00:09:04,840
mark for that student.

99

00:09:04,920  -->  00:09:11,380
Let's move this method away from here and instead put it inside the class because that's part of the

100

00:09:11,380  -->  00:09:16,570
power of objects the object itself the student itself.

101

00:09:16,570  -->  00:09:24,840
Like John or Anna can tell us their average mark so I'm going to define a method inside the student

102

00:09:24,930  -->  00:09:31,370
do notice that that's indented to tell them that this is inside the class.

103

00:09:33,630  -->  00:09:41,520
And now because the method is inside the class it has access to self and Self is the currently being

104

00:09:41,520  -->  00:09:42,710
used object.

105

00:09:42,930  -->  00:09:51,520
So we if we ask John for his average mock self not Marks is going to be Jones Marx if we ask Anna for

106

00:09:51,510  -->  00:09:58,510
her marks or her average mark self-doubt market is going to be and as marks so we can use this generically

107

00:09:58,500  -->  00:10:02,980
without worrying about which object we are talking about.

108

00:10:02,980  -->  00:10:09,470
So what we're going to do here is get the calculate average market contents copy them put them in them

109

00:10:10,470  -->  00:10:18,460
but now instead of Shoot-In dot marks we can refer to the current student so self-taught marks and that

110

00:10:18,460  -->  00:10:20,330
would refer to John's marker and Asmara.

111

00:10:20,380  -->  00:10:26,990
Or whatever students marks we're talking about and now we can delete calculate average marks from that

112

00:10:27,000  -->  00:10:28,770
.

113

00:10:29,530  -->  00:10:34,690
And now the more interesting part comes when we print the student details and we want to print the average

114

00:10:34,680  -->  00:10:42,100
mark instead of doing this cumbersome calculate average mark and then passing in the students that we

115

00:10:42,100  -->  00:10:49,300
want to calculate the average mark of we can just say student don't average mocke and that calculates

116

00:10:49,410  -->  00:10:58,080
the average mark using the student's data and we know that because it uses self.

117

00:10:59,530  -->  00:11:05,640
The aim of this video was just to show you what classes are and sort of the power of them.

118

00:11:05,670  -->  00:11:09,810
But it is by no means a complete view on everything.

119

00:11:09,880  -->  00:11:11,670
Object oriented programming related.

120

00:11:11,980  -->  00:11:14,380
That's what we're going to be covering throughout the next section.

121

00:11:14,380  -->  00:11:20,800
So please if you're not 100 percent sure on what I'm talking about don't despair.

122

00:11:20,910  -->  00:11:27,100
Bear with me in the next few videos we're going to be constructing an app that uses classes from the

123

00:11:27,100  -->  00:11:32,830
ground up we're not going to get started with any other code and we're going to build on that slowly

124

00:11:33,660  -->  00:11:39,010
but for now I just wanted to show you what the relationship between a dictionary and a class can be

125

00:11:39,000  -->  00:11:39,450
.

126

00:11:39,610  -->  00:11:48,280
A dictionary can be used to store some data a class and objects can be used to store data but also to

127

00:11:48,310  -->  00:11:51,190
perform actions on themselves.

128

00:11:51,250  -->  00:11:54,510
And that's part of the power of objects.

129

00:11:55,120  -->  00:11:59,830
Without further ado let's move onto the next video where we're going to be as I said building an app

130

00:11:59,980  -->  00:12:01,200
that uses classes.

131

00:12:01,390  -->  00:12:03,310
But starting from the ground up.

132

00:12:03,490  -->  00:12:04,920
So what are you in the next video.
