1

00:00:00,360  -->  00:00:03,620
Hi welcome back another we have these constants.

2

00:00:03,630  -->  00:00:10,980
It means that we don't have to go back to the Web sites and get them when we are ready to proceed and

3

00:00:10,980  -->  00:00:13,690
start creating our Twitter log in.

4

00:00:14,130  -->  00:00:17,970
Let's go into the project right click that and create a new Peyton and file which I'm going to call

5

00:00:18,180  -->  00:00:21,240
logon dot p y.

6

00:00:21,720  -->  00:00:26,940
And this is going to be essentially what's going to allow us to log in with Twitter.

7

00:00:27,840  -->  00:00:29,850
There's a couple of things we need.

8

00:00:29,850  -->  00:00:33,730
One of them is the Constance files or import Constans.

9

00:00:33,870  -->  00:00:38,560
The other one is the off to library import auth to.

10

00:00:39,830  -->  00:00:40,500
OK.

11

00:00:40,860  -->  00:00:44,070
We're going to need a third library but we're going to do that a bit later on.

12

00:00:44,070  -->  00:00:46,080
We don't need it immediately.

13

00:00:46,850  -->  00:00:47,150
OK.

14

00:00:47,160  -->  00:00:50,800
So there's a few steps that we have to follow in order to log in with Twitter.

15

00:00:51,180  -->  00:00:54,160
The first thing is to create a consumer.

16

00:00:54,300  -->  00:00:59,420
The consumer is an object which represents our application.

17

00:00:59,790  -->  00:01:03,170
And this is part of the oath to liberty.

18

00:01:03,360  -->  00:01:08,490
So the consumer equals off to dot consumer.

19

00:01:09,120  -->  00:01:16,080
So this consumer is a class inside the auth to library and we're putting this consumer inside a variable

20

00:01:16,080  -->  00:01:18,480
called consumer or lowercase.

21

00:01:18,540  -->  00:01:19,650
This can be anything you want.

22

00:01:19,720  -->  00:01:28,900
Remember in order to be able to identify our app we need to use the app constants.

23

00:01:29,070  -->  00:01:32,820
Essentially these secrets here these consumer key and consumer seek.

24

00:01:33,180  -->  00:01:40,300
So let's pass those in to the consumer.

25

00:01:41,030  -->  00:01:45,980
So we're Pozen and Constans the consumer key which is the consumer key we've read from our constants

26

00:01:46,500  -->  00:01:52,590
and after the comma Constans not consume a secret which is the secret key that we've passed in from

27

00:01:52,590  -->  00:01:59,210
our constant together those to allow Twitter to identify this app.

28

00:01:59,250  -->  00:02:04,900
So this tweet analyzer app that we've just created.

29

00:02:04,900  -->  00:02:08,270
However the consumer is just used to identify the app.

30

00:02:08,310  -->  00:02:13,830
It can be used to make requests so it can be used to request things from an API.

31

00:02:14,010  -->  00:02:15,700
Instead we have to create a client.

32

00:02:15,720  -->  00:02:18,430
So let's create a client.

33

00:02:21,170  -->  00:02:24,740
So I not see small c.

34

00:02:24,840  -->  00:02:32,370
So the client is going to be a client object which lives inside the author to library and it needs the

35

00:02:32,370  -->  00:02:34,380
parameter which is the consumer.

36

00:02:34,380  -->  00:02:39,620
The application that this client is going to be making requests for.

37

00:02:40,740  -->  00:02:43,850
Then we can do client request.

38

00:02:43,860  -->  00:02:47,070
Now this is different from the way we were requesting things before.

39

00:02:47,100  -->  00:02:52,950
Before we were doing requests dog get for example by using the requests library.

40

00:02:52,950  -->  00:02:58,150
Now we are using this client that we've created to do the request instead.

41

00:02:58,410  -->  00:03:01,530
This is because Twitter goes very well with this.

42

00:03:01,530  -->  00:03:05,460
Off to library it makes sense to use this library instead of request.

43

00:03:05,700  -->  00:03:11,310
But normally when you want to retrieve pages from the internet or interact with other API as you would

44

00:03:11,310  -->  00:03:18,930
be using the requests library which is why I showed you it inside these request method when you to put

45

00:03:18,930  -->  00:03:22,410
in the you or I that we wouldn't request.

46

00:03:22,620  -->  00:03:30,030
So do you remember the first you were Elda we need to request in this off process.

47

00:03:31,830  -->  00:03:37,200
The answer is until you get it is the request token you are able.

48

00:03:37,750  -->  00:03:46,650
And this is going to make Twitter create a request token going back to safari.

49

00:03:46,830  -->  00:03:52,100
We can see that at the request token your role is a post you were real.

50

00:03:52,350  -->  00:03:58,590
So at the end of this bracket after the coma we're going to put in post.

51

00:03:58,740  -->  00:04:04,080
So the first parameter the first argument that we're passing the request method claimed the request

52

00:04:04,530  -->  00:04:05,610
is that you are l.

53

00:04:05,820  -->  00:04:12,510
The second parameter is what type of verb we want to use for that request and this case it's a post

54

00:04:13,130  -->  00:04:15,370
that's what Twitter expects.

55

00:04:15,370  -->  00:04:26,370
However in this case the Twitter and saltless going to request during the week even though it's a post

56

00:04:26,640  -->  00:04:31,850
the Twitter API does not expect anything in the post body.

57

00:04:31,860  -->  00:04:37,630
So the post-party has come up empty and we don't have to send anything back.

58

00:04:38,070  -->  00:04:42,580
Sorry we don't have to send anything to the API there.

59

00:04:43,530  -->  00:04:44,150
OK.

60

00:04:44,430  -->  00:04:46,180
So what is this going to do.

61

00:04:46,500  -->  00:04:50,690
Well we would expect it to return something and indeed it does.

62

00:04:50,760  -->  00:04:56,530
It returns a response and also returns some content.

63

00:04:56,650  -->  00:05:00,840
So we're going to see a response my content equals that.

64

00:05:01,680  -->  00:05:08,880
And then these two variables here are going to get populated with the thing that gets returned by this

65

00:05:08,970  -->  00:05:11,380
request method.

66

00:05:11,580  -->  00:05:18,330
We're assuming that the content is going to be some sort of identification some sort of request token

67

00:05:19,110  -->  00:05:24,150
and the response is going to give us some details as to what happened during this exchange.

68

00:05:24,150  -->  00:05:27,590
So basically did the exchange succeed or not.

69

00:05:29,630  -->  00:05:37,200
OK and then we're going to see if response and Dot status is not two hundred.

70

00:05:37,380  -->  00:05:41,500
If you remember the two hundred code means that everything went well.

71

00:05:41,520  -->  00:05:45,970
So if this Summer school is not 200 it means something didn't go well.

72

00:05:46,380  -->  00:05:57,260
We can say print an error occurred requesting gaining the request tokens from Twitter.

73

00:05:59,790  -->  00:06:03,890
And finally let us sign the request token to a variable.

74

00:06:03,900  -->  00:06:11,810
I'm going to create a variable called request token and I'm going to give it to be equal to dict.

75

00:06:12,330  -->  00:06:17,970
And here is where we are going to be needing our second library and there's going to be you Arel parse

76

00:06:18,130  -->  00:06:18,860
.

77

00:06:19,200  -->  00:06:20,220
There's a library we need.

78

00:06:20,220  -->  00:06:27,830
So let's import your parse import your ad lib dot parse as you autoparts.

79

00:06:28,050  -->  00:06:35,330
Now if you're using Python 2.7 you will just have to import your old parts because we're using them

80

00:06:35,350  -->  00:06:36,210
3.5.

81

00:06:36,360  -->  00:06:37,160
We have to import.

82

00:06:37,170  -->  00:06:46,020
You are a lib dot parse and we as just renames it so that we can call it your Parsky.

83

00:06:47,160  -->  00:06:53,100
So we're accessing the you are a lib dot parser library but we're calling it your parsed in this file

84

00:06:53,100  -->  00:06:59,400
so we can access it like that and then we're doing a parser not parsing QSL.

85

00:07:00,210  -->  00:07:03,210
And then we're going to put in the content there.

86

00:07:04,140  -->  00:07:08,520
OK so what is this.

87

00:07:08,520  -->  00:07:16,620
Well the content is in the format of a query string parameter.

88

00:07:16,620  -->  00:07:19,900
So this is used to parse the query string.

89

00:07:20,750  -->  00:07:21,200
OK.

90

00:07:21,270  -->  00:07:26,350
And then we're going to convert that query string into a dictionary.

91

00:07:26,580  -->  00:07:32,080
So let's look at this in a bit more detail.

92

00:07:32,310  -->  00:07:38,880
Right now it's not really clear what content is.

93

00:07:38,950  -->  00:07:40,470
And I and I appreciate that.

94

00:07:40,470  -->  00:07:42,940
We don't know what content is unless we've used this before.

95

00:07:42,990  -->  00:07:45,300
I've used it before and I know what it is but you don't.

96

00:07:45,300  -->  00:07:52,660
So what I'm going to do is I'm going to click here on this gray area and that's going to create a breakpoint

97

00:07:53,810  -->  00:08:00,920
and add up that red circle there and then instead of pressing play we're going to press the we bug icon

98

00:08:01,440  -->  00:08:03,540
that starts the debugger.

99

00:08:03,540  -->  00:08:10,840
So let's press it and notice how we get down to this line here and we've got a blue line around it.

100

00:08:10,890  -->  00:08:13,850
There's some gray text about it everywhere.

101

00:08:14,130  -->  00:08:17,880
And then we sort of get this thing here.

102

00:08:17,910  -->  00:08:19,170
So what is happening.

103

00:08:19,350  -->  00:08:23,500
Well we've stopped the program at this point.

104

00:08:23,520  -->  00:08:30,370
So now we can go and see what variables we've got available for us.

105

00:08:30,390  -->  00:08:34,670
For example this consumer variable that we created is available here.

106

00:08:34,850  -->  00:08:37,110
And we can open it up and look at the properties.

107

00:08:37,110  -->  00:08:39,850
It's got a key and a secret which we passed in.

108

00:08:40,440  -->  00:08:42,160
Similarly for that client.

109

00:08:42,210  -->  00:08:47,730
It also exists down here and it has a few a bunch of variables and so on.

110

00:08:47,790  -->  00:08:53,740
But what's more important for us is what is content the content.

111

00:08:54,150  -->  00:08:57,740
As you can see is just a string of bytes.

112

00:08:57,750  -->  00:08:59,380
Let's have a look at it.

113

00:08:59,520  -->  00:09:01,570
This is what it looks like.

114

00:09:01,890  -->  00:09:11,960
It is auth token equals a bunch of text and or token secrets equals another bunch of text and or Colback

115

00:09:11,970  -->  00:09:14,090
confirmed it's true.

116

00:09:14,100  -->  00:09:15,470
So it's this thing here.

117

00:09:15,960  -->  00:09:23,040
And notice how it is in the format of something equals something else and something equals something

118

00:09:23,040  -->  00:09:28,740
else and something equals something else that's in the form of a query string.

119

00:09:28,740  -->  00:09:34,130
So this parse QSL is going to convert it to something else.

120

00:09:34,140  -->  00:09:40,200
So what I'm going to do is I'm going to select you parse dot parse on the school QSL uncondemned and

121

00:09:40,200  -->  00:09:45,670
then I'm going to press the calculator icon there and press evaluate.

122

00:09:46,020  -->  00:09:49,140
And here is what we get when we run that.

123

00:09:49,140  -->  00:09:55,830
So when we run this come on here we can use this calculator evaluate expression window to see what we

124

00:09:55,830  -->  00:10:01,270
would get if our program runs this and this is the result of that.

125

00:10:01,530  -->  00:10:06,770
The result is a list and each element of the list is a couple.

126

00:10:06,840  -->  00:10:08,760
And with that we know what a table is.

127

00:10:08,760  -->  00:10:11,220
It's just an immutable list.

128

00:10:11,430  -->  00:10:19,770
The first element of the table is the name auth token and the second element is the contents.

129

00:10:19,980  -->  00:10:25,980
So the second item in here is that long a number and then the second element of the list is at the auth

130

00:10:25,980  -->  00:10:26,850
token secret.

131

00:10:26,880  -->  00:10:30,680
In the first part and this other thing in the second part.

132

00:10:30,770  -->  00:10:36,270
And finally the last one is or callback confirmed and true.

133

00:10:36,690  -->  00:10:45,480
So when we run the parse dot parse underscore QSL and we pass it in the content we get back this list

134

00:10:45,510  -->  00:10:53,460
of tuples where each of the tables has the name and then a value.

135

00:10:53,490  -->  00:10:58,140
Now the DEQ method can be used to do that.

136

00:10:58,140  -->  00:11:05,100
So I'm gonna once again run the calculator and type in dict and then I'm going to put in a list of tuples

137

00:11:06,030  -->  00:11:06,730
OK.

138

00:11:07,170  -->  00:11:12,140
And in the first couple I'm going to put high and then one two three.

139

00:11:12,630  -->  00:11:20,310
So I'm running the dict method on a list where the list contains a tuple and the first element of the

140

00:11:20,310  -->  00:11:21,580
top all is high.

141

00:11:21,720  -->  00:11:23,340
And the second element is 1 2 3.

142

00:11:23,610  -->  00:11:28,620
So what do you think is going to come out when we run this.

143

00:11:28,860  -->  00:11:38,810
Take a wild guess and the answer is we get a dictionary with the key high and the value 1 to 3.

144

00:11:39,030  -->  00:11:40,320
If we add another one

145

00:11:45,480  -->  00:11:47,160
then we get another key.

146

00:11:47,400  -->  00:11:49,970
We get the key hand and the key high.

147

00:11:50,280  -->  00:11:52,260
And they have their values there.

148

00:11:52,320  -->  00:11:59,460
So the Dichter method can be ran on a list of couples to convert tables in this format.

149

00:11:59,550  -->  00:12:06,450
Key value into a dictionary and that's quite handy because a lot of things can be expressed in this

150

00:12:06,450  -->  00:12:07,470
sort of format.

151

00:12:07,650  -->  00:12:14,790
Key value key value and the fact that we can convert those to a dictionary easily is nice because dictionaries

152

00:12:14,790  -->  00:12:18,100
are just a bit nicer to interact with in Python.

153

00:12:19,280  -->  00:12:28,270
OK so if we run all this then what we get is a dictionary of oarth callback confirmed as true or tokens

154

00:12:28,320  -->  00:12:31,070
that ortho can see couldn't miss that.

155

00:12:31,080  -->  00:12:35,670
Notice how they are all bytes and they have that B in front.

156

00:12:35,670  -->  00:12:44,040
That tells us they are bite's if we wanted to convert them to strings in Python 3.5 then we have to

157

00:12:44,040  -->  00:12:45,510
do another step.

158

00:12:45,600  -->  00:12:51,480
If you using by them to win 7 I don't think you have this problem but if you are using Python 3.5 we

159

00:12:51,480  -->  00:13:00,190
can stop the debug on and hear the content we can do dot decode UTF Dash 8.

160

00:13:00,570  -->  00:13:03,950
And that is going to convert those two strings as opposed to bytes.

161

00:13:03,960  -->  00:13:05,100
So is a debugger again

162

00:13:07,880  -->  00:13:12,860
and now we stopped here we're going to select all that plus the calculator I can evaluate.

163

00:13:12,960  -->  00:13:14,220
And now we have strings.

164

00:13:14,220  -->  00:13:18,960
Notice the SDR there as opposed to bytes as it was before.

165

00:13:18,960  -->  00:13:29,880
Now this process of running the debugger often is really fantastic and you should do it using the debugger

166

00:13:29,880  -->  00:13:35,220
is one of the key skills for programming if you can use a debugger that means you can essentially find

167

00:13:35,220  -->  00:13:40,470
out what the problem is that any point you can always pause the program at some point run things with

168

00:13:40,470  -->  00:13:47,250
your calculator figure things out and then continue programming and you don't have to ever wonder what

169

00:13:47,250  -->  00:13:47,990
it is.

170

00:13:48,000  -->  00:13:48,890
For example content.

171

00:13:48,900  -->  00:13:50,340
What does it contain.

172

00:13:50,610  -->  00:13:51,560
What is respons.

173

00:13:51,570  -->  00:13:57,030
We can just press the calculator I can type in response here and then we get the result of the response

174

00:13:57,120  -->  00:14:05,160
variable which is we can see has a status property in there which is what we're accessing and we know

175

00:14:05,160  -->  00:14:06,870
it's 200.

176

00:14:06,870  -->  00:14:14,520
So you can always create a breakpoint by just clicking on the gray area and then pressing the bug icon

177

00:14:14,610  -->  00:14:20,330
and start looking at what things are using to calculate it.

178

00:14:20,460  -->  00:14:24,810
I'm going to pause a debugger at this point and we're going to stop here for this video because we've

179

00:14:25,230  -->  00:14:28,350
made it a bit long now and we've looked at put a lot of stuff.

180

00:14:28,590  -->  00:14:30,580
So that's it for now.

181

00:14:30,660  -->  00:14:38,160
We've looked at making this logon file creating our consumer client which is used to make requests.

182

00:14:38,250  -->  00:14:44,680
Then we've got the request token you Arel which has to be a post as per the API documentation.

183

00:14:44,730  -->  00:14:52,270
And finally we've also managed to get a dictionary of the request token which has in there a request

184

00:14:52,260  -->  00:14:58,410
token and the request token secret which are going to be used later on for authorization.

185

00:14:59,160  -->  00:15:03,030
So and so you the next video we're going to be looking at more things and we're going to be sending

186

00:15:03,030  -->  00:15:07,880
the user over to Twitter to press the signing button there.

187

00:15:08,210  -->  00:15:10,990
So what's the next video.
