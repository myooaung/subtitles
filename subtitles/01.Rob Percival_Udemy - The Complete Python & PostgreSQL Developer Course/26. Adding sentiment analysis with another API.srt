
Again this course is not intended to teach you how to make websites or or the amount and CSSA but there
1

00:14:39,180  -->  00:14:44,760
are a lot of ways that you could make this better such as adding a menu bars and improper logging and

2

00:14:44,760  -->  00:14:52,060
registration areas not only using Twitter but also maybe Facebook integration.

3

00:14:52,420  -->  00:14:54,640
There's a lot more things that we could do.

4

00:14:54,690  -->  00:15:00,120
But nevertheless I think it has achieved its purpose which was to teach about auth about API about Twitter

5

00:15:00,130  -->  00:15:04,590
logging and also about creating an interface with flask.

6

00:15:04,590  -->  00:15:10,500
Now if you'd know which TMLC a sense that is endless amount you can do with this sort of knowledge in

7

00:15:10,500  -->  00:15:16,130
terms of interacting with your program through the web but that said for this section.

8

00:15:16,140  -->  00:15:17,450
So I hope you enjoyed that.

9

00:15:17,820  -->  00:15:25,010
And we're going to leave it here for now in terms of flask and we're going to be moving on to more advanced

10

00:15:25,050  -->  00:15:32,340
life and stuff over the next couple of sections and I'm excited about that because it's going to take

11

00:15:32,340  -->  00:15:37,320
you from sort of someone who can write a bit of Python code to do some things to someone who really

12

00:15:37,320  -->  00:15:44,880
understands the algorithms data structures behind the different areas of computing.

13

00:15:44,880  -->  00:15:47,140
So without further ado let's go there.

14

00:15:47,280  -->  00:15:52,440
I'm excited to get you introduced to algorithms and data structures and I'll see you in the very next

15

00:15:52,440  -->  00:15:53,900
video.0:01:35.930
And that comes out with a label negative and then they have the text.

16

00:01:35,940  -->  00:01:36,820
Hi friend.

17

00:01:36,840  -->  00:01:40,800
And that ends up being more or less neutral.

18

00:01:41,100  -->  00:01:41,910
OK.

19

00:01:42,510  -->  00:01:49,560
So this is quite interesting and we're going to we're going to be doing is calling this API on our tweets

20

00:01:50,280  -->  00:01:53,580
and then coloring the field differently.

21

00:01:53,630  -->  00:02:00,830
The list field lists index items like this item different depending on the label.

22

00:02:00,900  -->  00:02:05,130
So if it's positive we're going to collect green if it's negative we're going to color it red and if

23

00:02:05,130  -->  00:02:07,770
it's neutral already blue.

24

00:02:09,120  -->  00:02:15,670
Let's go over to pite charm and have a look at how we might go about doing that.

25

00:02:15,720  -->  00:02:22,420
We've got a list of tweet text and this is the tweet content essentially.

26

00:02:22,470  -->  00:02:26,470
So we want to pass that through their API.

27

00:02:26,470  -->  00:02:27,800
OK.

28

00:02:29,400  -->  00:02:37,930
To analyze the sentiment of some text the documentation says do an hasty T.P. post to this address here

29

00:02:38,550  -->  00:02:42,860
with form encoded data containing the text you want to analyze.

30

00:02:43,140  -->  00:02:46,560
And we're going to get back just an object responds with two attributes.

31

00:02:46,590  -->  00:02:49,970
The label on the probability like we see here.

32

00:02:51,030  -->  00:02:52,830
OK.

33

00:02:52,830  -->  00:02:54,220
So let's do that.

34

00:02:54,330  -->  00:03:02,330
Let's perform a hasty post on some of that text in order to perform HAGE-ALI post.

35

00:03:02,400  -->  00:03:06,610
We are going to be using this time because this is not using auth.

36

00:03:06,730  -->  00:03:10,990
We're going to be using the requests library as we learned previously.

37

00:03:11,310  -->  00:03:17,990
Now notice this is requests with an S at the end and I say it's not request without this.

38

00:03:18,330  -->  00:03:21,300
This variable here is part of flask requests.

39

00:03:21,320  -->  00:03:23,420
It's a different library entirely.

40

00:03:23,430  -->  00:03:26,420
We're going to be for me before we're able to import that library.

41

00:03:26,420  -->  00:03:28,600
We're going to have to put it in our requirements.

42

00:03:28,650  -->  00:03:36,660
So let's go there and put requests here then go back to app and I just should tell you that you should

43

00:03:36,660  -->  00:03:39,610
install requests if you don't have it already installed.

44

00:03:39,780  -->  00:03:41,950
But it's possible though you already do.

45

00:03:42,330  -->  00:03:43,670
And I do.

46

00:03:43,810  -->  00:03:50,640
So if you do have it installed then you won't be prompted to install it.

47

00:03:50,650  -->  00:03:56,460
But if you don't have install that you will let's import that import this name and you want to import

48

00:03:56,460  -->  00:04:00,000
requests like so and we're going to do a post.

49

00:04:00,600  -->  00:04:01,780
And then what are we going to do.

50

00:04:01,890  -->  00:04:09,850
Is the Eurail that we want to send data to and retrieve data from which is this API you are ill as the

51

00:04:10,800  -->  00:04:22,830
documentation tells us and then the data that we want to send a Says form encoded data containing the

52

00:04:22,830  -->  00:04:25,030
text you want to our allies.

53

00:04:25,740  -->  00:04:32,220
So it has to be a text equal the text that we want to analyze.

54

00:04:32,220  -->  00:04:36,410
So this is a dictionary of data that we want to send.

55

00:04:36,600  -->  00:04:41,770
And in this case the text that we want to send is that the tweet itself.

56

00:04:42,630  -->  00:04:42,840
OK.

57

00:04:42,870  -->  00:04:45,830
So here will be the tweet itself.

58

00:04:46,860  -->  00:04:50,580
When we do this we're going to be assigning that to a variable

59

00:04:54,160  -->  00:04:58,690
and then what we're going to get back is a Jason response which is going to be equal to our Don.

60

00:04:58,690  -->  00:05:03,790
Jason this is going to retrieve the Jason contents of the request.

61

00:05:03,910  -->  00:05:11,290
I'm going to assign those two Jewson response variable and the label is going to be Jason responds label

62

00:05:11,290  -->  00:05:12,660
.

63

00:05:13,120  -->  00:05:23,050
So the label field that is in here is inside the Jason and we wanna put that in the label there and

64

00:05:23,050  -->  00:05:27,850
then we want to associate that label with a specific tweet.

65

00:05:27,880  -->  00:05:32,290
So the way we're going to do that in this instance is we're going to put these tweets in a dictionary

66

00:05:33,000  -->  00:05:39,790
where it's going to be tweet and label

67

00:05:42,670  -->  00:05:44,140
like so.

68

00:05:44,170  -->  00:05:46,750
So we've modified the list comprehension.

69

00:05:46,750  -->  00:05:52,840
So instead of only the tweet text now we are appending a dictionary for each tweet and the dictionary

70

00:05:52,840  -->  00:05:59,730
contains the tweet content under the key tweet and the label under the key label.

71

00:05:59,750  -->  00:06:05,520
In this case the key the label is always neutral but we're going to be changing that down here.

72

00:06:06,210  -->  00:06:06,930
OK.

73

00:06:07,370  -->  00:06:16,330
So how would we iterate over the tweets in here in this list as I'm sure you know we've done plenty

74

00:06:16,330  -->  00:06:20,710
of times for tweet in tweet texts.

75

00:06:20,920  -->  00:06:26,340
We're going to be doing all of this only instead of the text being the tweet itself.

76

00:06:26,380  -->  00:06:36,700
It's going to be tweet tweet so we're accessing the key tweet inside each of the tweets in the list

77

00:06:36,700  -->  00:06:37,700
that we are creating

78

00:06:41,230  -->  00:06:47,680
and the label is then going to go into tweet label equals label.

79

00:06:48,450  -->  00:06:49,890
OK.

80

00:06:50,470  -->  00:06:57,000
So to recap what we've changed this instead of getting only the text and putting those in a list.

81

00:06:57,070  -->  00:07:04,060
We are now creating a list of dictionaries where each dictionary has the tweet content and also a label

82

00:07:04,120  -->  00:07:10,780
which is neutral by default then we're iterating over the tweets and for each tweet we are performing

83

00:07:10,780  -->  00:07:19,390
that request to the text processing API with data equal to a text key that has the tweet contents and

84

00:07:19,400  -->  00:07:22,120
that has to be a dictionary there.

85

00:07:22,540  -->  00:07:25,060
Then we're getting the Jason in that response.

86

00:07:25,880  -->  00:07:29,950
We're getting the label that is in that Jason and we are assigning that to a variable label.

87

00:07:29,950  -->  00:07:34,430
And finally we're putting that label inside the tweet label.

88

00:07:35,410  -->  00:07:37,960
Then we're going to return the tweets.

89

00:07:37,960  -->  00:07:38,490
OK.

90

00:07:38,710  -->  00:07:42,680
Take your time to read through that and understand it or make sure to know what's going on there.

91

00:07:43,060  -->  00:07:49,920
But that's everything we need them and then what we're going to do is go over to the search file here

92

00:07:51,880  -->  00:07:56,260
and we're going to color things in differently depending on the label.

93

00:07:56,380  -->  00:07:59,800
But first of all let's just run the app.

94

00:07:59,800  -->  00:08:00,970
Go in there.

95

00:08:00,970  -->  00:08:02,940
Log with Twitter.

96

00:08:03,000  -->  00:08:09,800
And notice how I'm there and perform a search.

97

00:08:10,800  -->  00:08:16,150
So this takes a bit longer because now we're not only getting the tweets back.

98

00:08:16,150  -->  00:08:23,620
We're also getting a label which has positive label positive or label neutral or sometimes label negative

99

00:08:23,640  -->  00:08:24,910
.

100

00:08:24,940  -->  00:08:33,990
So now we have a label as well as a Tweet what we want to print out here is just the tweet.

101

00:08:34,030  -->  00:08:42,260
So in our For loop where we're printing up the list items we're going to say element tweet like so.

102

00:08:42,600  -->  00:08:47,370
And now all that's going to get printed out is the tweet content itself.

103

00:08:47,620  -->  00:08:55,160
But we want to make sure that we can change the color of the background depending on the label.

104

00:08:55,150  -->  00:09:01,040
So we're going to change the color of the background by doing something like this instead of Plast equal

105

00:09:01,120  -->  00:09:02,650
list group item.

106

00:09:02,650  -->  00:09:07,520
We're going to give this list element to see SS classes.

107

00:09:07,540  -->  00:09:14,590
So we're going to say list group item and then space and then we're going to put a different class in

108

00:09:14,710  -->  00:09:19,130
CSSA you can add multiple classes by just separating them with a space.

109

00:09:19,150  -->  00:09:27,080
So here we're going to say list group item danger.

110

00:09:28,620  -->  00:09:29,760
OK.

111

00:09:30,500  -->  00:09:36,110
And when we do that all of these list items are going to be read.

112

00:09:36,640  -->  00:09:40,950
So let's save that on refresh.

113

00:09:42,440  -->  00:09:44,270
So now we should see all of them been red

114

00:09:48,810  -->  00:09:59,820
keep Now we are only seeing the text content and we've only got read labels or read Field List items

115

00:09:59,820  -->  00:10:00,640
.

116

00:10:01,350  -->  00:10:03,390
So we don't want them to be read.

117

00:10:03,420  -->  00:10:04,590
We want them to be read.

118

00:10:04,650  -->  00:10:10,700
If the label is negative or green if it is positive I'm blue if it is neutral.

119

00:10:11,070  -->  00:10:20,830
So I'm going to do a bit of Jinja sort of magic here where I'm going to inside these percent calibrates

120

00:10:20,840  -->  00:10:24,450
percent thing sort of tokens.

121

00:10:24,450  -->  00:10:35,420
I'm going to put in set see I set on the school class equal list group item default instead of default

122

00:10:35,460  -->  00:10:44,220
let's use info default I think has been discontinued now and then this class is going to be equal to

123

00:10:44,400  -->  00:10:45,670
list group item info.

124

00:10:45,670  -->  00:10:48,160
So what we're doing here is we're just creating a new variable.

125

00:10:48,180  -->  00:10:52,160
And in ginger too we need to use the word set.

126

00:10:52,170  -->  00:10:57,840
So basically what this is doing is setting a new variable called CSX class to be equal to list group

127

00:10:57,880  -->  00:11:03,120
item in instead of down here having that class.

128

00:11:03,270  -->  00:11:10,080
We can just have CSL on the school class and that is going to be replacing the value of that variable

129

00:11:10,230  -->  00:11:13,290
in there.

130

00:11:13,290  -->  00:11:18,390
So if we were to refresh now everything would be blue but let's not do that because you should believe

131

00:11:18,390  -->  00:11:21,730
me when I when I say that is what's going to.

132

00:11:22,550  -->  00:11:35,040
Then we want to do if because in ginger too we can also do if statements if element label is negative

133

00:11:37,170  -->  00:11:47,320
and naturally we're going to want to put this inside the for loop if the element label is negative.

134

00:11:47,400  -->  00:11:55,560
We want to set CSSA class to be equal to list group item danger.

135

00:11:55,590  -->  00:11:57,870
So that's going to make it red.

136

00:11:58,930  -->  00:12:14,790
And then if just like in Python element label is positive we want to set the class to be the list group

137

00:12:14,910  -->  00:12:16,740
item and then bootstrap.

138

00:12:16,740  -->  00:12:19,020
This is called success.

139

00:12:19,320  -->  00:12:24,920
And finally and if so let's go over this again just to make sure that everything is clear.

140

00:12:25,560  -->  00:12:31,050
What we're doing now is we first of all create a CSX class variable a variable just called CSX class

141

00:12:31,440  -->  00:12:33,660
and we give it a value list item.

142

00:12:33,670  -->  00:12:43,470
In fact this is a bootstrap class that colours in the list Gloup item blue plothole it does essentially

143

00:12:43,470  -->  00:12:44,000
.

144

00:12:44,160  -->  00:12:51,810
And then we're going to iterate over each of the tweets and if the tweets label is Knigge which is for

145

00:12:51,810  -->  00:12:58,440
negative then we're going to set the CSSA class to be list group item danger which once again is a bootstrap

146

00:12:58,440  -->  00:13:01,790
class that colors it red.

147

00:13:02,190  -->  00:13:09,660
Elif if this is not true but the element label is positive then we're going to set the squares as class

148

00:13:09,660  -->  00:13:12,360
to B list group items success.

149

00:13:12,540  -->  00:13:18,340
And finally we're ending the if so by default the CSSA class is going to be listening to and and info

150

00:13:18,350  -->  00:13:18,610
.

151

00:13:18,900  -->  00:13:21,470
But if the label is negative we're going to change it to danger.

152

00:13:21,480  -->  00:13:25,020
And if it's positive we're going to change it to success.

153

00:13:25,260  -->  00:13:32,580
And finally we're going to just as before and create that list item with the class list group item and

154

00:13:32,730  -->  00:13:35,570
the class defined above.

155

00:13:36,350  -->  00:13:38,130
OK let's refresh

156

00:13:44,850  -->  00:13:48,500
and it turns out that most of these were positive except for the last one.

157

00:13:48,600  -->  00:13:52,800
And these are actually these aren't live from Twitter so they're coming through really quickly.

158

00:13:53,130  -->  00:13:59,970
So we can try and refresh and see if we can add a different set of orders or it is quite slow.

159

00:14:00,060  -->  00:14:01,440
We're not getting a difference at this time.

160

00:14:01,440  -->  00:14:03,480
We're too quick.

161

00:14:03,660  -->  00:14:08,670
This is quite slow because it is not only retrieving the tweets from Twitter but also it is performing

162

00:14:09,120  -->  00:14:14,880
that API call of the sentiment analysis for each of these tweets.

163

00:14:14,940  -->  00:14:17,110
So it does take a while.

164

00:14:18,060  -->  00:14:18,560
OK.

165

00:14:18,660  -->  00:14:25,950
But that is how we could introduce a bit of sentiment analysis on this code and that is also how we

166

00:14:25,950  -->  00:14:32,430
can show all the tweets different colors for them and start making a bit of a nicer interface.

167
00:14:32.430 --> 00:14
