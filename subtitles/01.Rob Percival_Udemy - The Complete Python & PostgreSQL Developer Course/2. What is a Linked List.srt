1

00:00:00,820  -->  00:00:05,610
Hi and will come back in this video we're looking at creating a linked list and we're going to answer

2

00:00:05,610  -->  00:00:14,490
the question what is a linked list a linked list is a base for many data structures.

3

00:00:14,490  -->  00:00:20,820
So we're going to be constructing other data structures like the cue or the stack using linked lists

4

00:00:22,010  -->  00:00:27,870
a linked list is actually fairly similar to a normal list except it may be a bit more optimal in some

5

00:00:27,870  -->  00:00:28,350
cases.

6

00:00:28,350  -->  00:00:30,440
Let's have a look.

7

00:00:30,760  -->  00:00:37,380
The linked list is just a sequence of items just as your normal list would be.

8

00:00:37,380  -->  00:00:44,820
However instead of all the items being kind of there in the list all accessible.

9

00:00:44,820  -->  00:00:49,620
For example you could do my list and then inside the square brackets you could put a 5 and that would

10

00:00:49,620  -->  00:00:53,430
get you the sixth element in the list in the linked list.

11

00:00:53,430  -->  00:00:59,150
Each item knows where the next item is and hence the linked part.

12

00:00:59,190  -->  00:01:03,310
So let's have a look at how that works.

13

00:01:03,420  -->  00:01:10,820
And really what that means let's imagine we have a linked list of students.

14

00:01:11,040  -->  00:01:17,250
Each element of the list which we're calling a node holds with the name matriculation number and year

15

00:01:17,250  -->  00:01:18,900
of study for each student.

16

00:01:18,900  -->  00:01:21,980
So just some data for each student.

17

00:01:22,890  -->  00:01:25,710
And it also holds the next node.

18

00:01:25,800  -->  00:01:30,420
Remember each of the items in the linked list knows where the next element is and we're going to look

19

00:01:30,420  -->  00:01:33,540
at exactly what that means.

20

00:01:33,540  -->  00:01:33,880
OK.

21

00:01:33,900  -->  00:01:41,610
So that's our node class and it has the name Mattrick number and year of study as well as the next node

22

00:01:41,630  -->  00:01:41,880
.

23

00:01:42,120  -->  00:01:50,880
Now I've specified that the next is F-Type node the next variable has to be also a node object.

24

00:01:50,880  -->  00:01:56,610
Now we don't have a way to enforce that in Python but it should be that way when we are interacting

25

00:01:56,730  -->  00:01:59,000
with our link list.

26

00:01:59,040  -->  00:02:03,160
So the first node we create could be for example this one.

27

00:02:03,390  -->  00:02:04,530
And the name is George.

28

00:02:04,530  -->  00:02:07,800
The magic number is 1 5 7 5 4 6 5 G.

29

00:02:08,070  -->  00:02:19,680
And the years of these two and the next node is another node which is Anna 3 3 2 4 5 1 5 P and 3 for

30

00:02:19,680  -->  00:02:20,350
your study.

31

00:02:20,370  -->  00:02:26,430
And it also has a next node and the next note here is another node which in this case is Philipe and

32

00:02:26,430  -->  00:02:32,490
eventually you're going to have infinite number of nodes and eventually the next node ends up being

33

00:02:32,580  -->  00:02:33,450
none.

34

00:02:33,570  -->  00:02:35,640
Which means there is no next node.

35

00:02:36,000  -->  00:02:38,910
So here we've got a linked list of three nodes.

36

00:02:39,360  -->  00:02:47,570
The first one which is called the head or the root is George and then George's next node is Anna and

37

00:02:47,640  -->  00:02:48,790
Anna's next notice.

38

00:02:48,790  -->  00:02:51,630
Phillip So George knows where Anna is.

39

00:02:51,630  -->  00:02:58,080
George does not know anything about Phillip as far George knows Philip doesn't even exist.

40

00:02:58,080  -->  00:03:05,850
However if we know George then we can get Anna because we can go to the next node if we know and then

41

00:03:05,850  -->  00:03:08,760
we can get Phillip because we can get that next.

42

00:03:09,320  -->  00:03:09,800
OK.

43

00:03:09,990  -->  00:03:12,060
So that's how a linked list works.

44

00:03:12,060  -->  00:03:17,820
So in your linked list you would not be able to get Philip directly you would have to start with George

45

00:03:18,120  -->  00:03:20,420
then go to Amur then go to Philly.

46

00:03:20,580  -->  00:03:25,890
Now you may think that is very bad and in some instances yes I would agree.

47

00:03:25,990  -->  00:03:31,830
I mean it is not the most optimal thing to do but in other cases having this limitation actually might

48

00:03:31,830  -->  00:03:35,570
improve performance and we're going to look at exactly how.

49

00:03:36,380  -->  00:03:44,420
So to implement a linked list we need two classes the node which holds the data and the next node on

50

00:03:44,460  -->  00:03:46,920
the linked list class which manages the nodes.

51

00:03:47,130  -->  00:03:54,480
And most importantly hold the first node if we have just a node floating about as an object then that's

52

00:03:54,480  -->  00:04:01,260
not very sort of easy to use if we have a list object that should hold the first note.

53

00:04:01,290  -->  00:04:05,580
We're going to look at how to program this as well.

54

00:04:05,580  -->  00:04:12,540
So the linked list class has methods to find a node in the linked list for which we need to supply the

55

00:04:12,540  -->  00:04:19,140
student name for example and to add a new node at the beginning of the linked list.

56

00:04:20,240  -->  00:04:21,160
OK.

57

00:04:22,050  -->  00:04:26,820
So let's look at the interaction between the looks dominant we've called the linked list here and the

58

00:04:26,820  -->  00:04:29,890
linked list has a variable called head.

59

00:04:30,000  -->  00:04:34,860
But I have said there is a type node but again in python we don't have a way to enforce this because

60

00:04:34,980  -->  00:04:39,690
we don't have pipes where we don't have static typing.

61

00:04:39,690  -->  00:04:41,710
So the hand is initially none.

62

00:04:41,760  -->  00:04:48,810
When you create your linked list object we don't have any nodes in the list and we have the node there

63

00:04:48,810  -->  00:04:54,570
as we know which has the name the metric number and the year of study as well as the next node the linked

64

00:04:54,570  -->  00:04:56,180
list also has the two other methods.

65

00:04:56,260  -->  00:05:03,060
Add to list which takes in a node and we'll add it to the list and a Find method which sticks in a string

66

00:05:03,750  -->  00:05:07,470
and we find a node inside the list.

67

00:05:07,470  -->  00:05:15,480
So the add to list method is going to take a node as a parameter and then it's going to do something

68

00:05:15,540  -->  00:05:16,250
with that node.

69

00:05:16,260  -->  00:05:21,320
So the node is going to go into the list in one of two ways.

70

00:05:21,390  -->  00:05:26,390
If the head is not in that means our linked list is empty.

71

00:05:26,710  -->  00:05:27,230
Right.

72

00:05:27,310  -->  00:05:30,130
If the head is on we don't have any node already there.

73

00:05:30,450  -->  00:05:35,790
So the head is not our linked list is empty and we're going to make the head of the linked list equal

74

00:05:35,790  -->  00:05:37,910
to the new node.

75

00:05:37,920  -->  00:05:42,610
So what we're going to be doing is say our linked list has no elements.

76

00:05:42,810  -->  00:05:50,190
Let's make the link let's hand equal to the new node that is going to put the new node essentially in

77

00:05:50,280  -->  00:05:52,190
the hand of the list.

78

00:05:52,980  -->  00:05:58,790
If the linked list is not empty then we will put this new node at the beginning by making the new nodes

79

00:05:58,800  -->  00:06:04,230
in the head of the linked list and making it point to the next node in the linked list.

80

00:06:04,230  -->  00:06:09,560
Now I know this is a mouthful and it's not really very easy to understand without going into the programming

81

00:06:09,560  -->  00:06:09,600
.

82

00:06:09,600  -->  00:06:11,740
So we are going to go into programming shortly.

83

00:06:12,450  -->  00:06:19,030
So if the linked list is not empty it means that the hand has a node and what we're going to do is we're

84

00:06:19,050  -->  00:06:25,140
going to say the new node is going to become the head and the new node which is not a hand is going

85

00:06:25,140  -->  00:06:28,880
to point to what was previously a head.

86

00:06:29,640  -->  00:06:33,140
OK let's have a look at an example we've got a linked list here.

87

00:06:33,300  -->  00:06:40,250
When the head is initially none and then we're going to call this method add to the list we're going

88

00:06:40,300  -->  00:06:46,400
to happen is that we're going to create a new node and put it in place of the head.

89

00:06:46,980  -->  00:06:55,390
So the head is now going to be this node object here which is George.

90

00:06:55,500  -->  00:07:01,110
And now we're going to call the Atlas method again and what's going to happen is that we're going to

91

00:07:01,110  -->  00:07:09,480
get a new node and we're going to make that new node the hand and that new node is going to point to

92

00:07:10,140  -->  00:07:12,300
what was previously the head.

93

00:07:12,300  -->  00:07:15,410
So basically this is going to we've got a new node.

94

00:07:15,420  -->  00:07:21,930
We've put it and made in the hand and that new node points to what was previously the head George was

95

00:07:21,930  -->  00:07:28,000
previously the head of the new node now points to George and the new node is the head.

96

00:07:28,000  -->  00:07:30,450
So what we've done is essentially added something at the beginning

97

00:07:33,840  -->  00:07:40,380
to create a new node and it points to the previous head and the head is now the new note that we've

98

00:07:40,380  -->  00:07:42,090
added.

99

00:07:43,470  -->  00:07:43,930
Ok.

100

00:07:43,980  -->  00:07:48,150
The find method is going to go over all of the items in a linked list.

101

00:07:48,160  -->  00:07:54,240
When I iterate over our linked list and if any node has the same student name as the one we're looking

102

00:07:54,240  -->  00:07:58,350
for we're going to tell a user some information about that.

103

00:07:59,120  -->  00:08:02,410
So imagine we have this linked list here which has three elements.

104

00:08:02,520  -->  00:08:04,200
The first one is George.

105

00:08:04,200  -->  00:08:05,020
Second one is Annah.

106

00:08:05,040  -->  00:08:11,370
The third one is Phillip and then Phillip points to none which means there is no more elements let's

107

00:08:11,400  -->  00:08:13,060
call find Anna.

108

00:08:13,080  -->  00:08:16,300
So what we're looking for really is the second node.

109

00:08:16,580  -->  00:08:22,400
And what we're going to do is we're going to go to the head of the first node in the list and check

110

00:08:24,050  -->  00:08:25,440
and we are going to be there.

111

00:08:25,740  -->  00:08:29,950
And then we're going to compare the node name with the name we're looking for which is Anna.

112

00:08:30,120  -->  00:08:31,860
Are we going to see that it's not there.

113

00:08:32,100  -->  00:08:37,080
So then we're going to go over to the next node and then we're going to compare the nodes name to the

114

00:08:37,080  -->  00:08:39,630
thing we're looking for and we'll show you that it is there.

115

00:08:39,630  -->  00:08:43,820
So then what we do is just pulling things out and then stop iterating over.

116

00:08:44,070  -->  00:08:48,870
We're going to look at how we can iterate over a linked list as well in the next video.

117

00:08:49,290  -->  00:08:50,910
And that's really everything for this video.

118

00:08:50,910  -->  00:08:52,920
So I hope you enjoyed that and learn something.

119

00:08:53,100  -->  00:08:56,340
And this is how you create a linked list and how it works.

120

00:08:56,340  -->  00:09:01,700
Each element knows what the next element is but not where any of the other elements are.

121

00:09:01,920  -->  00:09:04,080
And you actually need a starting point.

122

00:09:04,080  -->  00:09:08,830
So the node hand of the linked list can be your starting point.

123

00:09:09,300  -->  00:09:11,430
Without further ado I know this is a bit confusing.

124

00:09:11,430  -->  00:09:12,610
Let's go into the next video.

125

00:09:12,630  -->  00:09:16,110
We're going to be programming this up to you there.
