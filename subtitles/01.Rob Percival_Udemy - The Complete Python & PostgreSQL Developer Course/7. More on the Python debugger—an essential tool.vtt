WEBVTT
1

00:00:01.130  -->  00:00:05.370
Plan will come back and there's where you were quickly looking at a bit more information about the debugger

2

00:00:05.760  -->  00:00:10.860
just because it's such a greatly useful tool that I didn't want to go any further without talking to

3

00:00:10.860  -->  00:00:13.230
you a bit more about it.

4

00:00:13.290  -->  00:00:19.960
We've looked that about setting up the breakpoint here at the very end and then pressing the bug icon

5

00:00:20.190  -->  00:00:22.140
and that starts up the debugger.

6

00:00:22.140  -->  00:00:29.130
And I did mention this stops the program here and we could look at the different variables that we've

7

00:00:29.130  -->  00:00:34.550
got available and we could also execute arbitrary Python code here as well.

8

00:00:34.560  -->  00:00:37.950
We can do things like five plus five and we get 10 back and things like that.

9

00:00:37.990  -->  00:00:39.720
We also look at variables.

10

00:00:39.720  -->  00:00:45.420
We've got like content and we can also execute things like this.

11

00:00:45.420  -->  00:00:52.690
You are Pascua QSL thing whether we can also stop the program before the last line.

12

00:00:52.790  -->  00:00:53.600
That kind of makes sense.

13

00:00:53.610  -->  00:00:58.050
But let's look at how we might do that and why that might be useful.

14

00:00:58.050  -->  00:01:02.900
So I'm just going to restart the debugger by pressing this icon here.

15

00:01:03.830  -->  00:01:06.690
And Norristown other blue appears on the first line.

16

00:01:06.720  -->  00:01:10.230
Well not the first one but the first line of code.

17

00:01:10.530  -->  00:01:19.230
Now we are up here which means we still have not executed this line.

18

00:01:19.230  -->  00:01:20.310
OK.

19

00:01:21.250  -->  00:01:28.290
That means we have three variables available to us the constants off to a new are the parse these three

20

00:01:28.290  -->  00:01:29.940
things that we've imported.

21

00:01:29.940  -->  00:01:33.030
Notice how they have a type of module.

22

00:01:33.660  -->  00:01:36.600
We do not have a consumer variable.

23

00:01:36.600  -->  00:01:43.470
And if we open up the calculator and we type in consumer we get a name error.

24

00:01:43.470  -->  00:01:49.300
This is not defined because we haven't executed this line yet.

25

00:01:49.320  -->  00:01:53.430
See our program was failing and we didn't really know why.

26

00:01:54.000  -->  00:02:00.390
What we might do is stop somewhere before it starts failing.

27

00:02:00.390  -->  00:02:02.050
Maybe that's the beginning of the program.

28

00:02:02.070  -->  00:02:07.290
Maybe that's somewhere in the middle that we know is working so we stop somewhere there and then what

29

00:02:07.290  -->  00:02:12.410
we can do is before running any code select this thing here.

30

00:02:12.630  -->  00:02:14.810
This is creating a consumer object.

31

00:02:14.820  -->  00:02:16.560
It's creating something.

32

00:02:16.560  -->  00:02:22.200
And if we want to verify that it works we can just select it pressed the calculator icon press evaluate

33

00:02:22.220  -->  00:02:22.590
.

34

00:02:23.070  -->  00:02:24.300
OK that created something.

35

00:02:24.300  -->  00:02:25.650
It didn't give us an error.

36

00:02:25.830  -->  00:02:27.910
So we know that works.

37

00:02:27.960  -->  00:02:33.090
So now we can move onto the next line and what that's going to do is it's going to execute this line

38

00:02:33.090  -->  00:02:33.680
here.

39

00:02:33.990  -->  00:02:38.610
It's once again going to run this thing going to create a consumer and it's going to assign it to the

40

00:02:38.610  -->  00:02:39.920
consumer variable.

41

00:02:40.410  -->  00:02:42.180
So how do we move on to the next line.

42

00:02:42.500  -->  00:02:46.410
Well this icon here it says step over.

43

00:02:46.410  -->  00:02:51.210
And when we press it we move onto the next line and this one gets executed.

44

00:02:51.210  -->  00:02:56.610
Notice how now we have a blue variable down here which is where we've just executed just created and

45

00:02:56.610  -->  00:02:58.580
that's a consumer object.

46

00:02:58.920  -->  00:03:06.270
And this consumer here has the key and the secret that we have assigned to it.

47

00:03:07.020  -->  00:03:11.060
And now if we didn't know if the client is working we can do the same thing evaluate that.

48

00:03:11.080  -->  00:03:16.310
OK that seems to be working fine so let's move on to the next line and then we've got this one here

49

00:03:16.310  -->  00:03:16.530
.

50

00:03:16.710  -->  00:03:21.180
We can select this request and see if that works.

51

00:03:21.270  -->  00:03:22.480
And it seems like it does.

52

00:03:22.500  -->  00:03:25.990
It isn't returning an error which means it's probably fine.

53

00:03:26.100  -->  00:03:30.570
We have a set of bytes which is the content of the response.

54

00:03:30.630  -->  00:03:33.960
We can close that and press the next line.

55

00:03:33.960  -->  00:03:41.010
Now we can see the response status by selecting it and pressing the calculator back on its 200 which

56

00:03:41.010  -->  00:03:44.710
means we should not go into this line.

57

00:03:45.190  -->  00:03:46.680
It should go straight into this one.

58

00:03:46.680  -->  00:03:50.610
So when we press the next line that is correctly what happens.

59

00:03:50.610  -->  00:03:57.930
So we know that this thing work here and now we can finally run this code here and see if that does

60

00:03:57.930  -->  00:03:59.030
what we want.

61

00:03:59.160  -->  00:04:00.210
And it seems like it does.

62

00:04:00.240  -->  00:04:05.430
So we can go into the next line and that's the end of the program and then we go into Python code only

63

00:04:05.700  -->  00:04:12.320
so we can just press this button here resume program and that just goes to your next breakpoint.

64

00:04:12.360  -->  00:04:16.440
We don't have a next breakpoint because we're down here so we can just press play.

65

00:04:16.770  -->  00:04:20.210
And that just ends our program.

66

00:04:20.280  -->  00:04:24.630
So that was a bit more information on using the debugger moving onto the next line and how you might

67

00:04:24.630  -->  00:04:27.610
go about using it to fix your programs.

68

00:04:27.630  -->  00:04:34.380
A debugger is used to debug remove bugs and is extremely useful when you have approach a problem.

69

00:04:34.380  -->  00:04:37.620
Your program can of breaks or stops or you've got an error.

70

00:04:37.890  -->  00:04:40.410
There you go through and try to fix it like that.

71

00:04:40.410  -->  00:04:43.920
Obviously you can always ask a question in the course Kuban as well.

72

00:04:43.920  -->  00:04:46.270
And we're there to help too.

73

00:04:46.500  -->  00:04:50.310
That's everything for this video and I'll see you on the next one.
