1

00:00:00,120  -->  00:00:07,020
Hi will come back in this video we're looking at the connection Puni class which is a step towards allowing

2

00:00:07,020  -->  00:00:12,960
us to use the with statement here as we recall.

3

00:00:13,110  -->  00:00:20,580
We created a connection pool and then we were able to successfully get a connection from the pool and

4

00:00:20,580  -->  00:00:28,260
put it back which meant our pool was not getting depleted but the load from D-B we were getting a connection

5

00:00:28,650  -->  00:00:36,240
because we were then returning something we were not able to put it back when we return we exit the

6

00:00:36,240  -->  00:00:42,750
method so we can't execute anything after the return which meant we couldn't return the connection.

7

00:00:42,750  -->  00:00:48,630
So what we want to do is make sure that we can use the with statement so that it is simpler to do that

8

00:00:48,660  -->  00:00:50,240
.

9

00:00:50,400  -->  00:00:58,060
There's other ways as well but and this is this is the way that is simplest I believe.

10

00:00:58,060  -->  00:01:00,230
So what we want to be able to do is something like.

11

00:01:00,230  -->  00:01:13,050
With connection pool as conn sorry assed connection we want to be able to do something along these lines

12

00:01:16,260  -->  00:01:23,520
so that we can do something like this get a connection and then at the end it closes itself and it you

13

00:01:23,510  -->  00:01:25,560
know it returns to the pool and all that.

14

00:01:25,860  -->  00:01:30,080
And here the same with a connection pool thing that we haven't created yet.

15

00:01:30,270  -->  00:01:35,520
We want to be able to do this and get a connection and then so that at the end it puts it back itself

16

00:01:35,520  -->  00:01:36,750
.

17

00:01:36,840  -->  00:01:47,670
So we want to be able to do this now the first step is to have this class this this thing this connection

18

00:01:47,670  -->  00:01:48,470
pool thing.

19

00:01:48,630  -->  00:01:55,400
So from the database I'm going to import connection pool and that also doesn't exist.

20

00:01:55,470  -->  00:01:58,920
So we have to go into a database and create it.

21

00:01:58,920  -->  00:02:05,070
So I'm going to create this class called Connection Pool and the objective of this class is just to

22

00:02:05,070  -->  00:02:07,920
teach you how to use the with.

23

00:02:07,920  -->  00:02:16,710
Statement this connection pool class should have a connection pool associated with it.

24

00:02:16,770  -->  00:02:24,770
So I'm gonna have it in that method where self-dual connection pool is this thing.

25

00:02:25,470  -->  00:02:32,010
I'm going to delete it from the app and then I'm going to just format the code and with old command

26

00:02:32,030  -->  00:02:32,130
.

27

00:02:32,220  -->  00:02:35,680
L I think that's some way here.

28

00:02:35,940  -->  00:02:40,710
They're inside code reformat code and that just makes it a bit nicer.

29

00:02:40,950  -->  00:02:44,860
And I'm going to delete that now.

30

00:02:45,540  -->  00:02:48,680
So now we have a class that has a connection pool in it.

31

00:02:48,690  -->  00:02:52,240
This is exactly the same as having our permission pool outside.

32

00:02:52,440  -->  00:03:00,300
Except now if we want to access the connection pool we would do that with like so cp is Connection Pool

33

00:03:01,290  -->  00:03:02,580
C.P. connection pool

34

00:03:04,560  -->  00:03:07,060
.

35

00:03:08,160  -->  00:03:09,680
It doesn't do anything that's right.

36

00:03:09,720  -->  00:03:10,820
I was wondering why was the yellow.

37

00:03:10,980  -->  00:03:12,640
But yeah it doesn't do anything naturally.

38

00:03:12,720  -->  00:03:16,890
But nevertheless this is how we would access this connection pool here.

39

00:03:16,890  -->  00:03:19,010
Right.

40

00:03:19,080  -->  00:03:27,050
So how do we now make sure that this can be done.

41

00:03:27,630  -->  00:03:31,070
Because I'm going to delete this thing from here.

42

00:03:31,610  -->  00:03:39,550
If I if we run the app now we get an error saying attribute error underscores underscore exit underscore

43

00:03:39,550  -->  00:03:46,560
underscore in this line here which tells us it doesn't know what to do with this connection pool class

44

00:03:47,460  -->  00:03:48,120
surely.

45

00:03:48,120  -->  00:03:56,440
And I told you before we have to specifically program the width construct to be able to be used.

46

00:03:56,610  -->  00:03:57,120
That's right.

47

00:03:57,120  -->  00:03:59,400
We have to.

48

00:03:59,460  -->  00:04:03,360
So how do we.

49

00:04:03,360  -->  00:04:06,960
Well fortunately for us it's quite simple.

50

00:04:06,990  -->  00:04:12,510
The first thing we have to do is define an entire method and what I a pass because it doesn't do anything

51

00:04:12,510  -->  00:04:19,080
for now and an exit method more of a pass because it doesn't do anything for now what happens if we

52

00:04:19,080  -->  00:04:20,570
run the app now.

53

00:04:21,360  -->  00:04:22,200
OK.

54

00:04:22,200  -->  00:04:30,120
Now given a different era now it gives an error on the second line with connection not cursor as cursor

55

00:04:30,120  -->  00:04:30,800
.

56

00:04:30,950  -->  00:04:32,310
It says None.

57

00:04:32,310  -->  00:04:35,880
Type object has no attribute cursor.

58

00:04:35,880  -->  00:04:43,430
It's basically trying to access an attribute called Carcer But this thing here is none.

59

00:04:43,470  -->  00:04:50,920
It is not something that has a cursor property which means that when we create this variable up here

60

00:04:51,510  -->  00:04:52,650
this is not.

61

00:04:52,980  -->  00:04:56,860
Which means that this thing here is returning none.

62

00:04:57,600  -->  00:05:04,430
And the reason why is retaining none is because this is not calling the unit's method.

63

00:05:04,800  -->  00:05:11,670
It is calling the enemy and the entire method doesn't do anything.

64

00:05:11,670  -->  00:05:18,200
For example say we return 1 to 3 which has a number an integer and we press play.

65

00:05:18,240  -->  00:05:22,220
Now it says impt object has no such a beaut cursor.

66

00:05:22,300  -->  00:05:25,890
This number here that we have returned doesn't have a cursor.

67

00:05:25,920  -->  00:05:31,040
So what we have to return here is a connection to the database.

68

00:05:31,110  -->  00:05:33,570
The connection does have a cursor.

69

00:05:33,900  -->  00:05:44,980
So let's wrap return self dot connection pool gets calm this gets a new connection and then returns

70

00:05:44,990  -->  00:05:47,390
it right.

71

00:05:47,400  -->  00:05:49,070
Let's press play.

72

00:05:50,640  -->  00:05:51,730
And there we go.

73

00:05:52,260  -->  00:05:56,630
We now have the program working.

74

00:05:57,090  -->  00:05:58,860
This is a bit of a red herring.

75

00:05:59,130  -->  00:06:04,630
Rummer our app is doing seems to be in its looing load from D-B by email and then it's doing seemed

76

00:06:04,630  -->  00:06:07,470
to be against us doing three operations three connections

77

00:06:11,310  -->  00:06:16,380
the connection pool that we create only has one connection available.

78

00:06:16,410  -->  00:06:17,530
How is this happening.

79

00:06:17,550  -->  00:06:19,440
This seems magical.

80

00:06:19,440  -->  00:06:23,640
There's three connections available but we are only using one up here.

81

00:06:23,640  -->  00:06:29,290
We've only created one and we've certainly not cold put corn anywhere.

82

00:06:29,310  -->  00:06:36,180
So how are the connections going back into the pool and now is the time you wish that this was magical

83

00:06:36,180  -->  00:06:38,130
and it just worked.

84

00:06:38,130  -->  00:06:41,310
But unfortunately it is not the case.

85

00:06:41,670  -->  00:06:43,690
It never is in programming.

86

00:06:44,370  -->  00:06:45,680
Earlier I lied.

87

00:06:45,960  -->  00:06:53,470
I said that when this gets called the init method does not get called and that's a lie.

88

00:06:53,910  -->  00:06:56,040
The method gets called.

89

00:06:56,040  -->  00:06:59,230
And then we enter method gets called.

90

00:06:59,280  -->  00:07:06,620
So the thing that gets assigned to the connection is the result of the Enter method.

91

00:07:07,080  -->  00:07:11,870
But before the end method we call the init method.

92

00:07:12,180  -->  00:07:17,710
I think now you can guess why we have three connections available.

93

00:07:17,760  -->  00:07:20,480
Can you give it a bit of thought.

94

00:07:20,550  -->  00:07:22,920
Why do we have three connections available.

95

00:07:23,010  -->  00:07:28,910
With what I've just told you that the init method does get called.

96

00:07:31,170  -->  00:07:34,380
Well here's why we don't have the connections available.

97

00:07:34,410  -->  00:07:37,110
What we have is three connection pools available.

98

00:07:37,110  -->  00:07:42,690
We're creating one connection pool every time that we call this thing here.

99

00:07:42,690  -->  00:07:46,260
So this is even worse than what we had before.

100

00:07:46,320  -->  00:07:50,730
Now we no longer have the overhead of creating three connections.

101

00:07:50,730  -->  00:07:55,920
Now we have the overhead of creating three connection pools and each one creates one connection.

102

00:07:55,920  -->  00:07:59,250
So that's essentially double the overhead.

103

00:07:59,250  -->  00:08:02,380
This is not a good solution.

104

00:08:02,700  -->  00:08:16,020
So down here we really should be returning the connections but how how can we do that when we are creating

105

00:08:16,020  -->  00:08:19,280
a new connection pool each time.

106

00:08:19,440  -->  00:08:22,680
And the answer is this is not the answer.

107

00:08:23,850  -->  00:08:25,270
So that's everything for this video.

108

00:08:25,560  -->  00:08:30,790
I wanted to show you how simple it is to make something that works.

109

00:08:30,960  -->  00:08:32,790
And do you think is correct.

110

00:08:33,000  -->  00:08:37,420
That really isn't so sure to question everything.

111

00:08:37,470  -->  00:08:38,980
This is not the answer.

112

00:08:39,150  -->  00:08:41,490
But it was not a complete waste of time.

113

00:08:41,490  -->  00:08:44,320
It is getting closer and closer to the answer.

114

00:08:44,400  -->  00:08:49,140
And the reason why I'm beating this up is I don't want to throw you in the deep end too quickly but

115

00:08:49,170  -->  00:08:55,710
I do want you to see the sort of thought process that goes into designing this sort of stuff.

116

00:08:55,710  -->  00:08:57,800
So this is not the answer but it's getting there.

117

00:08:57,990  -->  00:09:00,300
Now we're going to look at that in the very next few videos.

118

00:09:00,300  -->  00:09:00,930
So it's either
