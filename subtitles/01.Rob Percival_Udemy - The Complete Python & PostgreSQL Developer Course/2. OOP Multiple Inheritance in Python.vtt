WEBVTT
1

00:00:00.330  -->  00:00:06.270
Hiawatha back in this video we're talking about multiple inheritance and a lot of people will tell you

2

00:00:06.270  -->  00:00:12.290
multiple inheritance is evil because it is unnecessarily confusing.

3

00:00:12.300  -->  00:00:19.560
Python has a nice mechanism for multiple inheritance but if I'm honest with you I have never once encountered

4

00:00:19.560  -->  00:00:22.850
a situation where I had to use multiple inheritance.

5

00:00:22.920  -->  00:00:32.040
I'm still going to explain it to you just so you can have a wee think about it but I'm not really sure

6

00:00:32.310  -->  00:00:37.260
if this is very useful but nevertheless I'm going to create a new file here in this project called multiple

7

00:00:37.260  -->  00:00:43.800
inheritance and we're going to go over how you do multiple inheritance in Python.

8

00:00:43.800  -->  00:00:51.000
I can't think of any good examples so I'm just going to go and revert back to the standard example.

9

00:00:51.000  -->  00:01:01.010
I'm going to create class a class B and I'm going to get class c.

10

00:01:01.730  -->  00:01:08.460
Ok I appreciate this may be unnecessarily confusing because I've just never used multiple inheritance

11

00:01:08.460  -->  00:01:09.090
before.

12

00:01:09.270  -->  00:01:14.370
Not sure when I would use it but nevertheless maybe one day you will find a situation where this is

13

00:01:14.370  -->  00:01:20.310
useful and if so by all means don't use it in class.

14

00:01:20.330  -->  00:01:26.080
A I'm going to define a method called chi and this method is going to print Hello.

15

00:01:26.400  -->  00:01:31.330
So just a normal sort of method that does something in class B.

16

00:01:31.590  -->  00:01:43.230
I'm also going to define a method high but in this case it prints hello with an A OK and class C is

17

00:01:43.230  -->  00:01:49.450
going to inherit from both class A and class B.

18

00:01:49.590  -->  00:01:50.810
In Python This is how we do it.

19

00:01:50.820  -->  00:01:54.980
We simply separate the classes with a comma on the brackets for inheritance.

20

00:01:54.990  -->  00:02:00.510
So the brackets after class C we can put their class a comma class B.

21

00:02:00.520  -->  00:02:09.050
Ok so I'm going to create an object of type C and then I'm going to do C. dot.

22

00:02:09.060  -->  00:02:15.960
Hi what do you think is going to get printed out.

23

00:02:15.960  -->  00:02:20.250
Would it be hello or would it be hello.

24

00:02:22.020  -->  00:02:25.250
Well let's give it a run.

25

00:02:25.790  -->  00:02:26.840
It.

26

00:02:27.750  -->  00:02:28.890
There we go up.

27

00:02:29.100  -->  00:02:30.470
Hello.

28

00:02:30.480  -->  00:02:38.340
So it is the first one and in Python the way it works is whenever you try to execute a method or access

29

00:02:38.340  -->  00:02:45.150
a property it will go into Class A and it will see if it's there and if it's not there the little go

30

00:02:45.150  -->  00:02:46.680
into class B and see if it's there.

31

00:02:46.800  -->  00:02:50.320
But as soon as it finds it it will just return that.

32

00:02:51.030  -->  00:02:57.030
Naturally if we reverted to the order of class A in class B where we get printed out is bloat with an

33

00:02:57.090  -->  00:03:00.030
A.

34

00:03:00.030  -->  00:03:05.070
Also something to remember is that if Class A also inherits from something else

35

00:03:16.410  -->  00:03:24.030
then it will be this high method that gets called Unless class A overwrites it.

36

00:03:24.030  -->  00:03:26.860
So if Class A doesn't overwrite it.

37

00:03:27.060  -->  00:03:31.440
What will get printed out is you are here because we go into Class A.

38

00:03:31.710  -->  00:03:34.090
We don't find it there so we go into classes.

39

00:03:34.110  -->  00:03:39.870
A parent class and we find it there and it would continue doing that until it doesn't have a super class

40

00:03:39.870  -->  00:03:39.920
.

41

00:03:39.960  -->  00:03:43.450
So this class doesn't have a super class so it stops there.

42

00:03:43.980  -->  00:03:46.200
OK let's remove that

43

00:03:49.680  -->  00:03:50.390
and then do that.

44

00:03:50.400  -->  00:03:54.040
Hi.

45

00:03:56.130  -->  00:04:03.790
And now we are going to create another method here in Class B which just prints in class B.

46

00:04:04.300  -->  00:04:08.080
And as you probably would expect if we type C..

47

00:04:08.090  -->  00:04:11.200
Got another even though we see is a Class C.

48

00:04:11.510  -->  00:04:15.780
What's going to happen is we're going to go into Class A looking for this method.

49

00:04:15.810  -->  00:04:18.690
We're not going to find it so then we're going to go into class B.

50

00:04:18.710  -->  00:04:19.830
We're going to find a way.

51

00:04:19.940  -->  00:04:27.400
So you would expect in class B to be printed out and that is indeed what happens.

52

00:04:27.420  -->  00:04:30.880
So this is how you do multiple inheritance in Python.

53

00:04:31.060  -->  00:04:37.380
And just remember that we start with the first class and go into each of the parent classes and then

54

00:04:37.500  -->  00:04:40.980
go into the next one and into each of the parent classes and so on.

55

00:04:41.640  -->  00:04:43.550
And that's how you do multiple inheritance.

56

00:04:43.550  -->  00:04:48.180
As I said I've never used it before and a lot of people find it very confusing.

57

00:04:48.190  -->  00:04:49.750
It's not that confusing.

58

00:04:49.770  -->  00:04:51.060
That's just what happens.

59

00:04:51.270  -->  00:04:55.400
But there's not that many use cases for it at least not that I found.

60

00:04:55.500  -->  00:04:58.330
But if you do find one by all means go ahead and use that.

61

00:04:58.340  -->  00:05:00.920
So nothing nothing bad with it.

62

00:05:01.110  -->  00:05:05.230
And let me know if you do find one and I will be quite curious as well.

63

00:05:05.470  -->  00:05:09.210
So that's everything for this video and I'll see you in the very next one.
