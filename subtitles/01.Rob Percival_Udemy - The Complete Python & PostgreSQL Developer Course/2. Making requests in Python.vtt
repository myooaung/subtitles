WEBVTT
1

00:00:00.210  -->  00:00:04.810
Hyde will come back and there's video we're looking at making requests.

2

00:00:04.860  -->  00:00:06.180
The last video was quite long.

3

00:00:06.180  -->  00:00:07.500
Apologies for that.

4

00:00:07.590  -->  00:00:11.090
And also we have a lot of information that was talking there for 25 minutes.

5

00:00:11.310  -->  00:00:19.500
And I appreciate it may get a bit boring and it probably didn't really clear out all your doubts and

6

00:00:19.500  -->  00:00:20.740
that's totally fine.

7

00:00:20.970  -->  00:00:25.770
In this video we're going to be looking at making those requests and hopefully cleaning out a bit more

8

00:00:26.190  -->  00:00:32.370
of the doubts that you may have in order to make requests using Python.

9

00:00:32.370  -->  00:00:35.190
We need a library called requests.

10

00:00:35.190  -->  00:00:36.800
We can solve that very easily.

11

00:00:36.900  -->  00:00:49.830
If you open up the terminal on Mac or the get bash on Windows and then type up install requests if you

12

00:00:49.830  -->  00:00:55.770
type that if you are in Windows and if you're a Mac you may have to do three point five install requests

13

00:00:56.970  -->  00:01:00.390
so let's do that and then it'll install and Mike is already installed.

14

00:01:00.390  -->  00:01:05.790
So it says requirement already satisfied but if you don't have it already installed and it will install

15

00:01:05.820  -->  00:01:07.240
and then that's it.

16

00:01:07.740  -->  00:01:14.150
Then let's open up the idea early and make sure you're opening up ideally version three point five.

17

00:01:14.160  -->  00:01:20.340
So I'm going to go ahead and hear make sure that when you open up ideally you see Python three point

18

00:01:20.340  -->  00:01:25.550
five point one of the top and then import requests.

19

00:01:25.860  -->  00:01:29.390
And that if that works then you're fine.

20

00:01:29.760  -->  00:01:32.510
If you get an error then please ask a question in the course forums.

21

00:01:32.550  -->  00:01:35.930
Hopefully it won't happen but it may.

22

00:01:36.120  -->  00:01:41.710
Once that's done we now can use this library to do requests.

23

00:01:41.790  -->  00:01:45.210
Now I've said what a request is in the lecture.

24

00:01:45.210  -->  00:01:55.680
Essentially the request is doing get the DP version to w w w dot example dot com and what that is is

25

00:01:55.680  -->  00:01:55.950
.

26

00:01:55.950  -->  00:01:58.190
Please get me.

27

00:01:58.440  -->  00:01:59.600
W w w dot.

28

00:01:59.610  -->  00:02:04.320
Example dot com using HTTP version 2.

29

00:02:04.980  -->  00:02:07.740
Unfortunately if we do that it doesn't work in Python.

30

00:02:08.190  -->  00:02:09.880
But what does work is.

31

00:02:09.990  -->  00:02:13.570
Requests don't get.

32

00:02:13.580  -->  00:02:19.710
So we're using the requests library there and we're going to perform a get request and then inside the

33

00:02:19.710  -->  00:02:26.700
brackets of the GET request we need to put in what uniform Leto's identifier we want to get.

34

00:02:26.700  -->  00:02:35.420
So in this case w w w dot example dot com and we are going to need in the front page of.

35

00:02:36.240  -->  00:02:38.530
So here is the P colon slash slash.

36

00:02:38.550  -->  00:02:43.250
What was left was last w w w dot exampled dot com.

37

00:02:43.590  -->  00:02:47.880
When we do that we get this.

38

00:02:48.150  -->  00:02:56.450
This is an object of type response and it has the code 200 at the end.

39

00:02:57.060  -->  00:03:04.350
When talking about haste TTP Hypertext Transfer Protocol the code 200 is the most common code on the

40

00:03:04.350  -->  00:03:07.740
internet and it means everything worked OK.

41

00:03:07.980  -->  00:03:11.590
And here you have the content of your page.

42

00:03:11.730  -->  00:03:15.090
In this case double double dot example dot com.

43

00:03:15.270  -->  00:03:17.980
So I'm going to show you quickly what that page looks like.

44

00:03:18.050  -->  00:03:19.820
No it looks like this.

45

00:03:19.860  -->  00:03:21.140
This is an example domain.

46

00:03:21.180  -->  00:03:23.650
W w w dot example dot com.

47

00:03:24.120  -->  00:03:30.510
And we aren't requesting that using a GET request to what we did was requests library.

48

00:03:30.510  -->  00:03:35.490
I'm going to call the get method that lives inside you and the you are right.

49

00:03:35.490  -->  00:03:41.950
The Uniform Resource identifier but I won't request is Hastey P colon slash slash.

50

00:03:41.970  -->  00:03:48.140
That tells us that we're using hates d w w w dot exampled Ockham.

51

00:03:48.210  -->  00:03:55.740
We did that on the request as liberty gave us back in response object which contains the page and a

52

00:03:55.740  -->  00:03:59.930
code 200 which tells us everything is OK.

53

00:04:00.000  -->  00:04:02.970
There's a lot of other code we may be looking into some of those.

54

00:04:03.120  -->  00:04:08.640
However because we did not assign this to a variable we have no way of accessing that.

55

00:04:08.640  -->  00:04:10.570
So let's let's assign that were variable.

56

00:04:10.680  -->  00:04:13.390
R equals request.

57

00:04:13.410  -->  00:04:18.550
Get into dippie example Dockum.

58

00:04:19.230  -->  00:04:24.910
OK now we don't get anything back because of the contents of that went into the variable.

59

00:04:24.940  -->  00:04:28.190
Or we've haven't used ideally for a while.

60

00:04:28.380  -->  00:04:30.360
But please bear with me for now.

61

00:04:30.750  -->  00:04:31.630
So if we type our.

62

00:04:31.650  -->  00:04:35.920
Now we should expect to see this coming out right.

63

00:04:36.850  -->  00:04:42.000
Yes OK so what other things can we do with our.

64

00:04:42.030  -->  00:04:44.480
Apart from seeing that it worked well.

65

00:04:44.700  -->  00:04:54.720
We can who are not content and that gives us a bunch of stuff and if we've never looked at page DML

66

00:04:54.720  -->  00:04:57.670
before then this is Chinese.

67

00:04:57.900  -->  00:05:01.980
But it has some some structure here.

68

00:05:01.980  -->  00:05:05.730
For example we've got page 1 example domain.

69

00:05:05.940  -->  00:05:12.630
Each one and then HDMI with that means is a big header header One is the largest sort of title that

70

00:05:12.630  -->  00:05:17.520
you can have and the forward slash each one just closes the header.

71

00:05:17.670  -->  00:05:20.590
So what does he say in his big header example domain.

72

00:05:20.640  -->  00:05:23.650
Close the big head to we go back to safari.

73

00:05:23.850  -->  00:05:30.710
We see that example domain is indeed a header I'm going to write an example domain and go to inspect

74

00:05:30.740  -->  00:05:31.250
element.

75

00:05:31.280  -->  00:05:38.930
And you may not have that in Safari unless you enable the develop toolbar in the system in the preferences

76

00:05:38.930  -->  00:05:39.660
of Safari.

77

00:05:39.890  -->  00:05:42.090
If you're using Google Chrome that should be there.

78

00:05:42.650  -->  00:05:47.210
And then when we do that we get this nice window down here with no one to really worry about what is

79

00:05:47.330  -->  00:05:48.030
all of this.

80

00:05:48.140  -->  00:05:53.440
But just know that the example domain is ahead or one there.

81

00:05:53.870  -->  00:06:00.290
So what we know is that the request did get this page successfully.

82

00:06:00.290  -->  00:06:05.800
So once again to recap these requests don't get what it is doing.

83

00:06:05.820  -->  00:06:07.550
Is this thing here.

84

00:06:08.330  -->  00:06:17.630
The server that is hosting W.W. for example dot com knows that when somebody performs a get request

85

00:06:18.110  -->  00:06:20.970
it has to return this code here.

86

00:06:21.980  -->  00:06:29.390
So when we made that get request up here the server received our request which looks like that and said

87

00:06:29.420  -->  00:06:34.900
Okay I know how to do and how to deal with this and I'm going to return this content here.

88

00:06:35.240  -->  00:06:36.480
So that's what it did.

89

00:06:36.980  -->  00:06:44.900
And then the browser knows that this content here is HDMI code so it can render it it can display it

90

00:06:44.900  -->  00:06:46.290
nicely like this.

91

00:06:47.060  -->  00:06:50.080
But naturally Python doesn't have a HDMI renderer.

92

00:06:50.120  -->  00:06:54.890
So what we get back is just the code and that's fine.

93

00:06:54.890  -->  00:07:01.250
So that is how we make a get request using Piscean if we wanted to do a post request.

94

00:07:01.310  -->  00:07:06.300
Well you can take a guess as to how you might go about doing that.

95

00:07:06.410  -->  00:07:11.960
I'm sure you're going to request top post and then here we would put the you Arel the Uniform Resource

96

00:07:11.960  -->  00:07:15.630
Locator uniform Wieters identifier both similar.

97

00:07:16.160  -->  00:07:18.200
And then we can send that some data.

98

00:07:18.230  -->  00:07:25.750
If you under the POST request was used for example to do some authentication and we can send in and

99

00:07:26.000  -->  00:07:29.580
data related to the usual That will authenticate him for example.

100

00:07:29.930  -->  00:07:33.030
But in this case we don't have a website to do a post request on.

101

00:07:33.140  -->  00:07:40.220
So we're just going to leave that now something else I wanted to show you in this video is the Twitter

102

00:07:40.400  -->  00:07:41.790
rest API.

103

00:07:41.900  -->  00:07:45.410
So let's go back to Safari and go in here.

104

00:07:45.600  -->  00:07:52.700
The you are real for this is Dave dot dot dot com slash vest slash public.

105

00:07:52.880  -->  00:07:58.490
And what that'll do is it will essentially show you this page here.

106

00:07:58.790  -->  00:08:07.520
And what we have is the public API the the sort of methods the ways that Twitter gives us to interact

107

00:08:07.520  -->  00:08:09.110
with it.

108

00:08:09.200  -->  00:08:13.860
So there's a few for example get status is slash user timeline.

109

00:08:14.120  -->  00:08:18.650
You would expect that to get the tweets posted to your timeline.

110

00:08:18.860  -->  00:08:27.740
You have state to see slasher retreats of me you have things like get searched last tweets you can get

111

00:08:28.010  -->  00:08:29.760
direct underscore messages.

112

00:08:29.840  -->  00:08:31.000
There's a lot of things here.

113

00:08:31.070  -->  00:08:37.010
And all of them are reasonably self-explanatory if you've used Twitter before but if not you can press

114

00:08:37.010  -->  00:08:43.520
on it and it kind of tells you what it is about returns the 20 most recent direct messages sent to the

115

00:08:43.520  -->  00:08:44.890
authenticating user.

116

00:08:45.230  -->  00:08:46.780
That's you by the way.

117

00:08:47.420  -->  00:08:47.830
OK.

118

00:08:47.870  -->  00:08:52.390
So we have here the Twitter API documentation.

119

00:08:52.460  -->  00:08:58.860
It tells us what the API is how it works how we can interact with it and so on.

120

00:08:59.840  -->  00:09:08.190
So here I have this resource you are Rayle which is what we can request using our requests library.

121

00:09:08.240  -->  00:09:19.710
Let's copy that and then go back to idealy and do our equals requests don't get and put that in.

122

00:09:19.720  -->  00:09:24.380
Now what do you think is going to happen when I do this.

123

00:09:24.380  -->  00:09:27.620
Am I missing something.

124

00:09:27.620  -->  00:09:33.060
And if so what.

125

00:09:33.110  -->  00:09:41.100
Some of you may have realized that something that's naturally missing from that is the users that were

126

00:09:41.140  -->  00:09:46.430
getting direct messages for remember the server is stateless.

127

00:09:46.610  -->  00:09:48.120
It doesn't know who I am.

128

00:09:48.530  -->  00:09:54.680
So even though I'm logged in here in Twitter the server does not know who I am.

129

00:09:54.680  -->  00:10:00.670
So if I just do a get request for direct messages the server is going to be like a very good messages

130

00:10:00.680  -->  00:10:01.710
for you.

131

00:10:02.300  -->  00:10:08.050
So we need to send the information regarding the user that is requesting this.

132

00:10:08.450  -->  00:10:12.990
That is in the API the authenticating user.

133

00:10:13.460  -->  00:10:20.820
If we do this him it seems to work and then we do our and then we get response 400.

134

00:10:20.930  -->  00:10:22.390
In this case.

135

00:10:22.760  -->  00:10:33.960
So if we do our content we get this and it has a code 2 1 5 and the message is bad authentication data

136

00:10:34.000  -->  00:10:34.490
.

137

00:10:34.890  -->  00:10:36.250
Yes we didn't log in.

138

00:10:36.260  -->  00:10:37.900
So Twitter doesn't know who we are.

139

00:10:37.890  -->  00:10:42.770
We're requesting messages for a user that's not logged in users that are not locked in don't have messages

140

00:10:42.980  -->  00:10:44.860
because they don't have an account.

141

00:10:44.960  -->  00:10:47.450
So that is not going to work.

142

00:10:47.900  -->  00:10:54.740
And I wanted to show you this because in order to get direct messages or other information from Twitter

143

00:10:55.310  -->  00:11:03.920
we need to first logon to Twitter and in order to do that we need to look at all off the open authorization

144

00:11:04.010  -->  00:11:07.890
format that we looked at in the last view and the lecture towards the end.

145

00:11:07.910  -->  00:11:13.730
So in the next video I apologize again we're going to be looking quickly at what on earth is and how

146

00:11:13.730  -->  00:11:15.490
we can log in with Twitter.

147

00:11:15.800  -->  00:11:18.880
And then we're going to be implementing that in Python.

148

00:11:19.190  -->  00:11:22.530
So a bunch of theory in these first few videos.

149

00:11:22.550  -->  00:11:24.140
Please deal with deal with it.

150

00:11:24.140  -->  00:11:30.500
Bear with me because it is really important to understand how EPA work and it's really important to

151

00:11:30.500  -->  00:11:36.860
know how things like Twitter Facebook Google Plus and so on have their inner workings so that you can

152

00:11:36.860  -->  00:11:39.250
then log in with them and interact with those.

153

00:11:39.770  -->  00:11:43.820
So without further ado I'll see you in the next video and we're going to be looking at all Warth
