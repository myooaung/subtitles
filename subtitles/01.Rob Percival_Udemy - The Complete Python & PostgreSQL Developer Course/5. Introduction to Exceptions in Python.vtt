WEBVTT
1

00:00:01.110  -->  00:00:01.950
And welcome back.

2

00:00:01.980  -->  00:00:08.040
In this video we're talking about exceptions and I'm quite chuffed I managed to go through what a lot

3

00:00:08.040  -->  00:00:12.060
of the course without going into exceptions.

4

00:00:12.060  -->  00:00:13.400
It wasn't a requirement.

5

00:00:13.470  -->  00:00:19.380
You know we could have explained the exceptions earlier on but it wasn't 100 percent required.

6

00:00:19.630  -->  00:00:25.820
And nevertheless now it is because exceptions really are something you should know about.

7

00:00:25.830  -->  00:00:30.510
So let's end this project with a new director and now we're going to be moving on to exceptions and

8

00:00:30.510  -->  00:00:33.100
I'm going to call it exceptions.

9

00:00:34.140  -->  00:00:34.570
OK.

10

00:00:34.590  -->  00:00:41.390
And then here I'm going to create a python file called intro exceptions.

11

00:00:42.300  -->  00:00:44.020
First of all what is an exception.

12

00:00:44.130  -->  00:00:50.340
Well an exception is just an error that happens in your program and therefore your program should stop

13

00:00:50.340  -->  00:00:51.240
.

14

00:00:51.240  -->  00:01:01.500
For example say that you tried to convert a string to a number and it fails.

15

00:01:01.680  -->  00:01:02.950
Your program should stop.

16

00:01:03.210  -->  00:01:13.210
Here's an example int or rather enter a number or number equals input into a number.

17

00:01:14.070  -->  00:01:17.210
And then we do print int number.

18

00:01:17.660  -->  00:01:18.120
OK.

19

00:01:18.270  -->  00:01:22.220
Something basic something we've done plenty of times over.

20

00:01:22.560  -->  00:01:27.980
We ask the user for something and we put that into a variable and then we convert that to a number.

21

00:01:27.990  -->  00:01:36.150
For example if we were trying to say multiply by 2 let's press play into our number five then we get

22

00:01:36.150  -->  00:01:37.350
10 printed out.

23

00:01:37.350  -->  00:01:38.730
Fabulous.

24

00:01:38.790  -->  00:01:41.370
Let's play that again and for a number a

25

00:01:44.430  -->  00:01:45.200
value error.

26

00:01:45.240  -->  00:01:49.710
This is an exception and this is a builtin exception in Python.

27

00:01:49.830  -->  00:01:51.180
And what it says is invalid.

28

00:01:51.180  -->  00:01:53.410
Let's rule for int with base 10.

29

00:01:53.670  -->  00:01:54.320
A.

30

00:01:54.510  -->  00:02:00.900
Basically I was expecting a number with base 10 in number between 0 9 and we gave it a which is not

31

00:02:00.900  -->  00:02:01.490
one of those.

32

00:02:01.500  -->  00:02:11.330
So it failed and he gave us a bunch of red text a traceback and the value era and the message the traceback

33

00:02:11.340  -->  00:02:14.990
just tells you in which line the error happened.

34

00:02:15.110  -->  00:02:21.100
In this case it's line to second line the value arrowed is the type of exception the happened.

35

00:02:21.150  -->  00:02:22.910
And this is the message.

36

00:02:23.640  -->  00:02:24.100
OK.

37

00:02:24.220  -->  00:02:28.860
However we can not stop the program.

38

00:02:28.860  -->  00:02:39.530
You see we can say you try to do this and then except value error.

39

00:02:40.080  -->  00:02:43.830
I'm going to press that and say print.

40

00:02:43.950  -->  00:02:48.500
You did not enter a base 10 number.

41

00:02:48.780  -->  00:02:50.730
Try again.

42

00:02:52.190  -->  00:02:58.160
OK then if I press play and I tap a.

43

00:02:59.400  -->  00:03:03.140
What happens is no longer we get red text and a program clashes.

44

00:03:03.150  -->  00:03:11.370
Now we go straight into this except part and we print this out what the letters do is let us handle

45

00:03:11.430  -->  00:03:13.780
arrows a bit more gracefully.

46

00:03:13.800  -->  00:03:19.590
Normally the program would crash and it would stop and if the program was doing more things below those

47

00:03:19.590  -->  00:03:20.950
things would never happen.

48

00:03:21.270  -->  00:03:22.020
But now

49

00:03:26.790  -->  00:03:28.380
we can enter a.

50

00:03:28.380  -->  00:03:33.300
And then we still get the code that happens after because the program no longer crashes.

51

00:03:33.300  -->  00:03:36.660
Now what happens is that it tries to do this thing here.

52

00:03:37.020  -->  00:03:45.440
If a value ever occurs then we print this out and then we continue normally.

53

00:03:45.720  -->  00:03:47.930
So no crashing involved.

54

00:03:48.390  -->  00:03:49.150
OK.

55

00:03:49.560  -->  00:03:55.190
So instead of a value error we are accepting lookup error which is a different type of error.

56

00:03:55.590  -->  00:03:56.630
We press play.

57

00:03:56.760  -->  00:03:57.780
We enter the a.

58

00:03:57.990  -->  00:04:05.640
What do you think is going to happen at this point what would you expect.

59

00:04:05.640  -->  00:04:06.980
Think like a computer.

60

00:04:07.140  -->  00:04:08.850
We're trying to do this.

61

00:04:09.180  -->  00:04:12.100
And then we are except look up era.

62

00:04:12.240  -->  00:04:14.560
What happens if a lookup error is raised.

63

00:04:14.790  -->  00:04:19.430
We print this out.

64

00:04:19.800  -->  00:04:21.700
What would you expect that to happen.

65

00:04:21.750  -->  00:04:31.050
We're only accepting if there is a lookup error we get read text value error value error is not the

66

00:04:31.050  -->  00:04:32.360
same as lookup error.

67

00:04:32.700  -->  00:04:39.830
So we still crash because what we are accepting here is not what was raised.

68

00:04:39.840  -->  00:04:41.780
Notice how Halo was not printed out.

69

00:04:41.790  -->  00:04:46.180
Our program effectively stopped after here.

70

00:04:46.470  -->  00:04:51.450
We can however look at it is a special type of error that is never going to get raised by this code

71

00:04:51.450  -->  00:04:51.550
.

72

00:04:51.630  -->  00:04:55.140
But we could accept multiple errors

73

00:04:58.110  -->  00:05:00.680
and look up error.

74

00:05:00.960  -->  00:05:05.070
This should never happen.

75

00:05:05.190  -->  00:05:07.840
We can do this so we can accept a lookup error.

76

00:05:07.920  -->  00:05:13.590
We can accept Valuator we can accept many different types of errors and then we can deal with them differently

77

00:05:13.590  -->  00:05:17.210
depending on what the error is.

78

00:05:17.210  -->  00:05:22.480
So once again we get our error message and then we continue after.

79

00:05:22.900  -->  00:05:24.150
OK.

80

00:05:28.090  -->  00:05:36.730
Now something else that's tends to happen is obviously when something like this happens and it's fairly

81

00:05:36.730  -->  00:05:41.760
simple to to have and accept they're trying except as a good thing to do.

82

00:05:42.880  -->  00:05:50.320
But something else that happens is that when we use existing code like other libraries those libraries

83

00:05:50.350  -->  00:05:54.740
also raise errorless and we have to be able to deal with them.

84

00:05:54.790  -->  00:06:03.960
For example let's revisit the requests library request the post and post and I'm going to import that

85

00:06:03.970  -->  00:06:05.330
I may have to install it.

86

00:06:05.680  -->  00:06:06.190
Yes.

87

00:06:06.220  -->  00:06:17.210
So I will open up the preferences and type in requests and install that.

88

00:06:17.260  -->  00:06:19.940
Now what will likely happen.

89

00:06:20.740  -->  00:06:21.980
I know my code didn't get bigger.

90

00:06:22.020  -->  00:06:23.280
OK that's fine.

91

00:06:23.290  -->  00:06:27.160
Normally what happens is that my code grows in size every time I access the preferences.

92

00:06:27.320  -->  00:06:35.920
And let's import that request post and where we're putting it here is HTP slash tax slash processing

93

00:06:37.950  -->  00:06:47.040
dot com slash API slash sentiment and the data we're sending is text Hello world.

94

00:06:47.080  -->  00:06:48.630
Surely you remember this.

95

00:06:48.850  -->  00:06:51.840
This was when we were doing sentiment analysis on our tweet.

96

00:06:52.060  -->  00:06:58.390
We can send them some text and then they can analyze and sort of if it's positive or negative or not

97

00:06:58.390  -->  00:07:00.280
.

98

00:07:00.280  -->  00:07:07.330
Now we can do Jason responds equals are don't Jason that's fine.

99

00:07:07.330  -->  00:07:12.580
We can do label is our Jason label.

100

00:07:13.030  -->  00:07:18.720
So now would get us the label stored in the Jasen for this request.

101

00:07:18.930  -->  00:07:20.440
The response.

102

00:07:21.000  -->  00:07:22.300
OK let's print that out.

103

00:07:22.300  -->  00:07:27.970
Print the label and for now I'm going to comment that out

104

00:07:30.430  -->  00:07:35.700
a ha there's an error there.

105

00:07:36.010  -->  00:07:39.940
We don't know what that is but there is an error.

106

00:07:41.040  -->  00:07:43.310
So what is happening.

107

00:07:44.530  -->  00:07:52.360
Maybe we made a mistake maybe this wasn't the right thing to send maybe there was an error there for

108

00:07:52.360  -->  00:07:55.120
some reason maybe we failed again.

109

00:07:55.180  -->  00:07:59.040
Jason for some reason maybe the label doesn't exist.

110

00:07:59.070  -->  00:08:07.300
We are not really sure what it is but what we know is that an arrow was raised and therefore we should

111

00:08:07.300  -->  00:08:09.360
be protecting ourselves against that.

112

00:08:09.370  -->  00:08:14.230
We should be protecting our program against complete failure.

113

00:08:14.410  -->  00:08:19.400
And the way we do that is here in the traceback we would find our code.

114

00:08:19.660  -->  00:08:24.580
Notice how this one here we did not write that code so we don't we can't really do anything about that

115

00:08:24.580  -->  00:08:25.060
.

116

00:08:25.090  -->  00:08:29.580
We didn't write that code object and equal self-taught wrote the code.

117

00:08:29.590  -->  00:08:30.250
We didn't write that.

118

00:08:30.260  -->  00:08:31.270
We don't care about that.

119

00:08:31.510  -->  00:08:32.620
We didn't write that.

120

00:08:32.920  -->  00:08:34.140
We didn't write that.

121

00:08:34.930  -->  00:08:37.030
But we did write that.

122

00:08:37.090  -->  00:08:44.860
So the error was raised in this line here we should now be able to defend ourselves against this Jason

123

00:08:44.860  -->  00:08:45.660
decoder.

124

00:08:45.670  -->  00:08:49.120
That doesn't mean forget about the error catch it.

125

00:08:49.120  -->  00:08:51.490
And then if it happens again just doesn't matter.

126

00:08:51.490  -->  00:08:54.810
Doesn't mean that it means protect your program against failure.

127

00:08:54.850  -->  00:09:06.190
So try this except Jason the code era print.

128

00:09:06.460  -->  00:09:12.700
We could not decode the Jason Ross bombs.

129

00:09:12.970  -->  00:09:19.990
We have to import this Jason the code error which we can do like that.

130

00:09:20.980  -->  00:09:26.760
Now when we do that again we again we cannot decode rejection response.

131

00:09:26.950  -->  00:09:34.660
And because a label is assigned to in there then the label there is undefined.

132

00:09:34.750  -->  00:09:37.540
So it says name error label is not defined.

133

00:09:37.690  -->  00:09:42.760
What we should do really is not print the label down there but rather print it down here and then.

134

00:09:42.820  -->  00:09:45.530
This won't happen.

135

00:09:47.230  -->  00:09:48.320
OK.

136

00:09:49.660  -->  00:09:54.690
I'm not really sure what the problem is but at this point in time it doesn't really matter.

137

00:09:54.790  -->  00:10:00.970
The purpose of this video is not to teach you more why and this sentimentalities thing is not working

138

00:10:00.970  -->  00:10:07.720
but rather that you should keep in mind that these things can raise errors and you should protect your

139

00:10:07.720  -->  00:10:10.290
application against complete failure.

140

00:10:11.050  -->  00:10:13.950
Another type of error that could happen is a key error.

141

00:10:14.170  -->  00:10:19.990
For example if Jason comes back but it does not have a key label.

142

00:10:20.050  -->  00:10:25.800
So in that case he would say exempt key era print.

143

00:10:26.290  -->  00:10:30.130
We got Jason back from sentiment analysis.

144

00:10:31.060  -->  00:10:40.560
But it did not have a label or a key label for example.

145

00:10:40.660  -->  00:10:46.330
That way when your application does fail you'll get a nice message.

146

00:10:46.330  -->  00:10:49.990
They are telling you what went wrong.

147

00:10:49.990  -->  00:10:56.440
However that's probably not the best way to go about things because if you have a lot of printing going

148

00:10:56.440  -->  00:10:58.810
on you may miss some errors.

149

00:10:59.200  -->  00:11:09.400
So in some instances it is better to raise the errors or let them proceed without essentially just continuing

150

00:11:09.400  -->  00:11:09.430
.

151

00:11:09.430  -->  00:11:15.040
So letting your application crash so that you can notice the errors we're going to look at that in the

152

00:11:15.040  -->  00:11:15.980
very next video.

153

00:11:16.060  -->  00:11:17.150
So stay tuned.

154

00:11:17.230  -->  00:11:17.650
See you there
