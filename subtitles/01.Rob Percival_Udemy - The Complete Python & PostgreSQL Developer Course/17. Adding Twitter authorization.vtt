WEBVTT
1

00:00:00.270  -->  00:00:06.570
Hi welcome back in this video we're going to be creating the authorization endpoint so that users can

2

00:00:06.570  -->  00:00:12.360
come back to our application without having to enter a PIN code and all that stuff.

3

00:00:12.360  -->  00:00:18.390
So as you can remember what we've done so far is got a request token and then censor to the users over

4

00:00:18.390  -->  00:00:21.070
to Twitter so that they can press the button.

5

00:00:21.300  -->  00:00:29.310
And then what should happen is that they should come back to our application with the verifier to verify

6

00:00:29.310  -->  00:00:31.030
it is going to get sent to us.

7

00:00:31.320  -->  00:00:40.230
So the user doesn't have to enter a PIN code the way we do that is we have to go into the Twitter apps

8

00:00:41.490  -->  00:00:42.110
page.

9

00:00:42.150  -->  00:00:45.300
So let's do that.

10

00:00:45.300  -->  00:00:49.500
Let's go over to Safari and the here in apps not Twitter dot com.

11

00:00:49.500  -->  00:00:57.300
Make sure to open up your app and in the Settings tab change the callback you are able to be this one

12

00:00:57.300  -->  00:01:04.320
here hasted to be Colan for which last fall which lash 6:59 point or point or point one goal on 4 9

13

00:01:04.320  -->  00:01:07.580
9 5 slash or slash Twitter.

14

00:01:07.590  -->  00:01:12.580
So this has to be that the port that you're using in your application.

15

00:01:12.600  -->  00:01:17.750
In my case I'm using 4 9 5 and then slash Auth. slash Twitter.

16

00:01:18.330  -->  00:01:21.780
OK then we can go back to Python and create that endpoint.

17

00:01:21.960  -->  00:01:27.210
So app route off Twitter.

18

00:01:29.070  -->  00:01:33.270
And then we create a method that is going to be run when we access that endpoint.

19

00:01:33.270  -->  00:01:33.870
Remember that

20

00:01:36.890  -->  00:01:38.120
and I'm just going to return.

21

00:01:38.160  -->  00:01:42.760
We are here because now we're going to be very find that it does work.

22

00:01:42.810  -->  00:01:46.580
So let's press play go there.

23

00:01:46.860  -->  00:01:52.170
And now we're going to go over to loggin Twitter and whether it is going to do is it's going to redirect

24

00:01:52.170  -->  00:01:55.040
us to Twitter.

25

00:01:55.040  -->  00:01:58.760
And as you can see we are in the process of redirection and we're here now.

26

00:01:58.800  -->  00:02:03.610
So what has happened so far is we have arrived at this point in our app.

27

00:02:03.960  -->  00:02:05.510
We've executed this code here.

28

00:02:05.520  -->  00:02:13.080
We've got the request token and we've stored that in the session and then we've got redirected to the

29

00:02:13.080  -->  00:02:14.480
Twitter you RL.

30

00:02:15.020  -->  00:02:21.060
So we're here now when we press the button if we've saved our preferences in Twitter we should be able

31

00:02:21.120  -->  00:02:26.930
to go back to our app and indeed we can see there that we're here.

32

00:02:26.970  -->  00:02:35.270
So we were redirected successfully drawn out you know what this method should do we have the request

33

00:02:35.290  -->  00:02:39.880
Okan and I'm tell you we have the author verifier although we haven't seen it yet.

34

00:02:40.020  -->  00:02:46.610
What should this method do now that we've called the request Okan and the oath very fine.

35

00:02:47.400  -->  00:02:48.530
I'm sure you've got it.

36

00:02:48.570  -->  00:02:51.940
This method has to get the access to can.

37

00:02:52.080  -->  00:02:55.970
So the first thing to do is to see where the author verifier is.

38

00:02:56.010  -->  00:02:57.930
Let's go back to Safari.

39

00:02:57.940  -->  00:03:05.700
And as you can see this you were well up here has not only slash author slushed Twitter but it also

40

00:03:05.700  -->  00:03:12.790
has a query string parameter which is auth token and it has another crimsoning parameter which is off

41

00:03:12.880  -->  00:03:17.080
verifier and that has a bunch of numbers there that is the author verifier.

42

00:03:17.080  -->  00:03:18.740
We're going to be using.

43

00:03:18.800  -->  00:03:25.290
So let's go back to pide Champ and the first thing we have to do is get that off verifier out of the

44

00:03:25.290  -->  00:03:26.420
query string.

45

00:03:26.910  -->  00:03:29.810
Fortunately it is fairly simple to do with flask.

46

00:03:29.820  -->  00:03:35.010
Let's create a variable I'm going to call it or the verifier file and the contents of the variable are

47

00:03:35.010  -->  00:03:39.070
going to be request don't we have to import request.

48

00:03:39.150  -->  00:03:40.170
So let's go up here.

49

00:03:40.180  -->  00:03:49.500
From flask an import request and diyan is going to be request which is the incoming request to our application

50

00:03:49.500  -->  00:03:49.680
.

51

00:03:49.680  -->  00:04:00.510
So one or seven put up in one form and a five on Facebook or Twitter or the verifier equals blah blah

52

00:04:00.510  -->  00:04:01.300
blah blah blah blah.

53

00:04:01.470  -->  00:04:02.340
OK.

54

00:04:02.790  -->  00:04:12.660
The request that is incoming to our server is when the user arrives at this endpoint information regarding

55

00:04:12.750  -->  00:04:18.320
the request that they have done is in the request for the request.

56

00:04:18.420  -->  00:04:20.700
A variable of flask.

57

00:04:20.820  -->  00:04:28.060
What we have here is also a property called args and the args are the query string parameters.

58

00:04:28.530  -->  00:04:34.490
So we can do request dot args don't get Auth. verify.

59

00:04:35.430  -->  00:04:41.250
And when that's going to do is extract the value of the author verifier and put it inside this variable

60

00:04:41.290  -->  00:04:45.620
then the next thing we want to do is get the access token.

61

00:04:45.930  -->  00:04:52.500
Fortunately inside our Twitter utils we already have something to get the access to Granites down here

62

00:04:53.160  -->  00:04:59.010
called get access token and we know that that deals with getting it from Twitter image to parameters

63

00:04:59.010  -->  00:05:04.440
which aren't request token and the or the very fine and we have both of those now.

64

00:05:04.770  -->  00:05:13.660
So let's go back into our app and say access token equals get access token which we need to import so

65

00:05:13.660  -->  00:05:20.320
make sure to go up here on from Twitter utilize import get access to it and it needs two parameters

66

00:05:20.320  -->  00:05:26.200
as we know which our request to can and the or verifier the request organising the session so we can

67

00:05:26.200  -->  00:05:31.340
just type session request token and that's going to retrieve that value from the session.

68

00:05:31.360  -->  00:05:34.290
Remember the session is unique to the user.

69

00:05:34.510  -->  00:05:40.330
So if two people log in at the same time they're going to have the correct request token for their cookie

70

00:05:42.160  -->  00:05:44.980
and the other thing we need is the author verifier.

71

00:05:45.640  -->  00:05:52.330
And that's it gets the access token and puts it in that variable and now the next thing to do is to

72

00:05:52.900  -->  00:06:00.390
make sure that we create the users and store them in the database so they don't have to logon constantly

73

00:06:00.390  -->  00:06:01.330
.

74

00:06:01.360  -->  00:06:07.900
So let's go into the user Doppie file and have a look at what is there.

75

00:06:08.350  -->  00:06:13.960
A user has an email first name and a last name as well as the token and or token secret.

76

00:06:13.960  -->  00:06:19.360
We've got these two from the access token but we don't really have any of these three.

77

00:06:19.390  -->  00:06:22.280
We don't have a way to get an e-mail the first name and the last name.

78

00:06:22.660  -->  00:06:23.820
Now we could do that.

79

00:06:23.830  -->  00:06:28.820
We could we could have a Web site at page that asks the user for those details.

80

00:06:28.840  -->  00:06:33.220
Now we don't have one just now and it's not been in our best interest right now to do that.

81

00:06:33.220  -->  00:06:35.880
It's not the focus of the section.

82

00:06:36.100  -->  00:06:41.730
So instead of email first name a last name I'm going to use a screen name that's the Twitter user name

83

00:06:42.070  -->  00:06:43.800
instead of those three properties.

84

00:06:43.990  -->  00:06:50.480
Now we have to do is go and change the properties here in the user.

85

00:06:50.500  -->  00:06:55.480
So instead of email first name a last name we're passing on a screen name and we are done doing self-taught

86

00:06:55.480  -->  00:06:56.910
screen name equals screen name.

87

00:06:57.120  -->  00:07:00.680
So each user object is going to have a screen name associated with them.

88

00:07:00.850  -->  00:07:06.190
And I'm going to tell you how we can get that screen name in a moment when we insert into the users

89

00:07:06.190  -->  00:07:12.610
table we're going to have to make sure that we're inserting the screen name column we have to create

90

00:07:12.610  -->  00:07:13.280
that.

91

00:07:13.900  -->  00:07:15.850
And now we only have three parameters.

92

00:07:15.850  -->  00:07:20.310
So we only need 3 percent Essie's and that we don't need self-doubting e-mails out the first name and

93

00:07:20.620  -->  00:07:25.690
last name the whole thing we need is a screen name.

94

00:07:26.920  -->  00:07:28.920
Load from D-B by email.

95

00:07:28.930  -->  00:07:30.150
We no longer have an email.

96

00:07:30.160  -->  00:07:34.770
So instead of searching by email maybe we can search by screen name instead.

97

00:07:34.870  -->  00:07:39.480
So I'm going to change the method name to be load from the screen name and we're going to be calling

98

00:07:39.490  -->  00:07:45.380
that the parameter could be called the email if we wanted the parameter name doesn't matter.

99

00:07:45.610  -->  00:07:50.800
But I'm going to rename it to be screen name and then I'm going to copy that and paste it down there

100

00:07:50.880  -->  00:07:54.030
and down there as well.

101

00:07:54.070  -->  00:08:00.770
So now what we are missing is this CLX the constructor here for the new user that we're creating.

102

00:08:01.030  -->  00:08:02.420
It has an email first name and last name.

103

00:08:02.470  -->  00:08:04.470
So we wanted to not have those.

104

00:08:04.580  -->  00:08:09.940
Instead we're going to be deleting them and only accepting a screen name which is going to be the second

105

00:08:09.940  -->  00:08:12.640
column of our tables is going to be user data one

106

00:08:16.810  -->  00:08:21.040
and then the auth token is going to be the third column and the author can see that the fourth column

107

00:08:21.310  -->  00:08:24.300
with the ID being the first column.

108

00:08:24.340  -->  00:08:34.520
Now we should be go into PGE admin 3 and making sure this table exists within that schema.

109

00:08:35.870  -->  00:08:50.230
So open up the sequel query editor and say grop table users and then create table users and we're going

110

00:08:50.230  -->  00:08:54.460
to give it an idea which is going to be a serial type primary key and going quickly here because we

111

00:08:54.460  -->  00:09:01.840
know all this stuff and it's going to be a screen name which is going to be text and or token which

112

00:09:01.850  -->  00:09:07.240
is going to be text and an auth token secret which is going to be text as well.

113

00:09:07.240  -->  00:09:10.830
Make sure you don't misspell any of these things that could be a bit problematic.

114

00:09:11.010  -->  00:09:17.110
And then just press play and then create your table as we know and then we can close this down for now

115

00:09:17.120  -->  00:09:18.220
.

116

00:09:19.300  -->  00:09:22.150
OK so now the table exists this should work.

117

00:09:22.140  -->  00:09:24.400
The last thing remaining is this repr method.

118

00:09:24.390  -->  00:09:29.790
Make sure to change that to screen name as well and any place that we are using email first name or

119

00:09:29.790  -->  00:09:31.720
last name that's no longer going to exist.

120

00:09:31.780  -->  00:09:37.270
So for example the log in Doppie y file we created in the last few videos is no longer going to work

121

00:09:37.360  -->  00:09:40.250
unless we change it to use this.

122

00:09:40.330  -->  00:09:43.620
Let's go back to our app Doppie Y and create our user.

123

00:09:43.780  -->  00:09:47.100
The first thing we want to do is make sure that our user doesn't exist already.

124

00:09:47.110  -->  00:09:53.510
So let's say user equals user not load from the screen name we have to import user.

125

00:09:53.520  -->  00:10:01.170
So let's go to the top and down hearsay from user import user so now we're going to be loading a user

126

00:10:01.160  -->  00:10:02.480
by screen name.

127

00:10:02.530  -->  00:10:05.810
And as we know let's go into the user Doppie file.

128

00:10:05.810  -->  00:10:12.060
What that does is it gets a cursor from the connection from Pugel up to last and then it executes the

129

00:10:12.050  -->  00:10:15.810
select and it puts that in saying the variable user data.

130

00:10:15.800  -->  00:10:22.630
The first row and if user data does not it's not empty it's not not in.

131

00:10:22.670  -->  00:10:28.260
So there is some user data then it's going to return a user object and if usually data is none.

132

00:10:28.310  -->  00:10:30.410
Nothing was found then it's going to return None.

133

00:10:30.410  -->  00:10:33.850
Which is the default for all Python methods.

134

00:10:34.670  -->  00:10:38.940
The way we get the screen name is fortunately through the access token.

135

00:10:39.290  -->  00:10:47.970
So the access token is a dictionary which has the screen name in it so we can just do that and then

136

00:10:47.970  -->  00:10:54.920
we'll see if not the user if the user is none.

137

00:10:54.920  -->  00:11:03.180
Then we want to create a new one is also a or equals user and he will put in access to open screen name

138

00:11:05.510  -->  00:11:14.370
access token auth token access token auth token secret and none.

139

00:11:14.510  -->  00:11:18.280
The idea is none it gets generated for us by.

140

00:11:18.280  -->  00:11:20.610
So we don't need to put anything in there.

141

00:11:21.440  -->  00:11:25.550
And finally use are not safe to D-B to make sure that it gets saved.

142

00:11:25.550  -->  00:11:31.610
The next thing I'm going to do is save the screen name to the session just so we remember who is who

143

00:11:31.740  -->  00:11:32.750
when they come back.

144

00:11:32.850  -->  00:11:38.670
So session screen name equals user don't screen it.

145

00:11:38.730  -->  00:11:45.890
And finally what I want to do is return the user screen name so that when the user authorizes us we

146

00:11:45.890  -->  00:11:47.240
are able to see that it does work.

147

00:11:47.250  -->  00:11:51.680
So I'm going to return user screen name.

148

00:11:51.990  -->  00:11:53.570
Now there's a lot of stuff going on here.

149

00:11:53.580  -->  00:11:54.790
I do appreciate that.

150

00:11:55.130  -->  00:11:59.980
I'm hoping that you're pausing the video every now and then and going along and writing this down.

151

00:12:00.000  -->  00:12:04.550
That would be the best thing to do.

152

00:12:04.550  -->  00:12:09.950
We're going to send the users away to Twitter where they're going to verify them we're going to receive

153

00:12:09.950  -->  00:12:12.260
back a redirection.

154

00:12:12.260  -->  00:12:16.530
They usually get to come back with a or other verifier.

155

00:12:16.550  -->  00:12:21.350
We're going to get to that or the very fire from the query string parameters using request dot args

156

00:12:21.390  -->  00:12:21.490
.

157

00:12:21.530  -->  00:12:22.370
We can't.

158

00:12:22.520  -->  00:12:28.160
And then the parameter name which in this case is Aurthur verify and then we're going to use that and

159

00:12:28.160  -->  00:12:33.900
the request token which we've saved in the session to get an access token and then we're going to load

160

00:12:33.890  -->  00:12:36.140
the user by the screen name.

161

00:12:36.440  -->  00:12:40.830
And if it doesn't exist then we're going to create a new one and we're going to save that to the beat

162

00:12:40.850  -->  00:12:41.550
.

163

00:12:41.610  -->  00:12:46.110
And finally we're going to send the screen name in a session and return the user's screen name.

164

00:12:46.350  -->  00:12:55.560
And if we see the user screen name when we run through this it means that it worked before we continue

165

00:12:55.550  -->  00:12:56.420
.

166

00:12:56.420  -->  00:13:04.380
There is a small problem that I kind of hinted at I didn't really have but I mentioned barely on passing

167

00:13:05.850  -->  00:13:08.570
and it would be fantastic if you realized the problem.

168

00:13:08.580  -->  00:13:10.130
Before we continue.

169

00:13:10.350  -->  00:13:14.750
But if you do not that's totally fine.

170

00:13:15.770  -->  00:13:22.500
Have a moment to think about it and I'm going to restart the app and run through this.

171

00:13:25.700  -->  00:13:31.850
OK we're going over to Twitter we are authorizing the app and I'm telling you this is not going to work

172

00:13:31.860  -->  00:13:32.720
.

173

00:13:32.730  -->  00:13:35.120
Hopefully you managed to figure out why not

174

00:13:37.660  -->  00:13:40.900
.

175

00:13:41.300  -->  00:13:43.970
We get internal server error.

176

00:13:43.980  -->  00:13:49.210
The error code in hate DTP for internal 7 error is code 500 you can see that up here.

177

00:13:50.340  -->  00:13:51.490
That's also an important area.

178

00:13:51.500  -->  00:13:52.670
Happens quite often.

179

00:13:52.740  -->  00:13:54.370
So we've got a server error.

180

00:13:54.380  -->  00:13:57.160
We Something went wrong in our server.

181

00:13:57.890  -->  00:14:06.050
Now that usually means that something failed in our code or we did something that we shouldn't have

182

00:14:06.050  -->  00:14:09.770
done or we didn't do something that we should.

183

00:14:10.430  -->  00:14:13.440
There are now two ways that we can figure this out.

184

00:14:13.500  -->  00:14:17.590
The first way is to stop the app and use the debugger.

185

00:14:18.380  -->  00:14:25.760
And if you have absolutely no idea why this may or may not be working this may be the best way to go

186

00:14:25.760  -->  00:14:26.510
about.

187

00:14:26.720  -->  00:14:27.620
Use a debugger.

188

00:14:27.620  -->  00:14:31.150
Set a breakpoint in the beginning of this method.

189

00:14:31.160  -->  00:14:36.260
The first line and then we're going to step through it and find out what the problem is.

190

00:14:36.380  -->  00:14:40.370
Once we found out what the problem is I'm going to show you the other way which is a bit quicker but

191

00:14:40.380  -->  00:14:42.090
it doesn't give us much information.

192

00:14:42.200  -->  00:14:51.290
So let's go back into our app logon with Twitter and remember what has happened now is that we've gone

193

00:14:51.290  -->  00:14:52.920
to this end point here.

194

00:14:53.340  -->  00:14:58.110
We've created the request can we put that into session and then we've redirected to Twitter.

195

00:14:58.110  -->  00:15:01.010
Twitter is going to redirect back to us in this point.

196

00:15:01.040  -->  00:15:06.140
So as soon as I press the button our app should stop and should go into this line.

197

00:15:06.140  -->  00:15:07.580
So let's press the button.

198

00:15:10.070  -->  00:15:17.060
An hour it stops here which is great and we are now able to step over and go line by line seeing what

199

00:15:17.060  -->  00:15:17.650
happened.

200

00:15:17.840  -->  00:15:19.060
OK.

201

00:15:19.760  -->  00:15:30.370
I would recommend that you select a calculator and evaluate to verify if things work as press next.

202

00:15:31.040  -->  00:15:38.480
And now this thing here if we do evaluate it that's going to be a bit of a problem because we can only

203

00:15:38.480  -->  00:15:44.180
request an access token once for a given verifier and request can.

204

00:15:44.570  -->  00:15:51.170
So if we do evaluate this and then we press next that's going to evaluate it again which means the variable

205

00:15:51.170  -->  00:15:52.670
isn't going to have a value.

206

00:15:52.700  -->  00:15:53.880
I'll show you what I mean.

207

00:15:54.350  -->  00:15:59.660
I'm going to select this code here that I'm going to press the calculator I can get evaluated to see

208

00:15:59.660  -->  00:16:03.350
if it works.

209

00:16:03.500  -->  00:16:11.510
And as you can see it does work I get back dictionary has the token secret and the auth token and it

210

00:16:11.510  -->  00:16:15.370
also has a screen name at the end which is what we're using.

211

00:16:16.130  -->  00:16:19.360
But now I've already used the verifier.

212

00:16:19.610  -->  00:16:24.370
So when I press next remember I still haven't executed this line of code.

213

00:16:24.440  -->  00:16:31.840
When I press next it's going to execute it again and assign the output of this to the access token.

214

00:16:33.710  -->  00:16:40.070
But our access token is now empty because Twitter realizes we've used this already and it would be unsafe

215

00:16:40.100  -->  00:16:43.740
to allow us to reuse that many times.

216

00:16:43.940  -->  00:16:45.760
So instead the access token is empty.

217

00:16:45.920  -->  00:16:51.090
And now we're going to fail here because the screen name isn't going to be a thing.

218

00:16:51.530  -->  00:16:54.590
And as you can see I'm just in a press continues so we can see the error.

219

00:16:54.800  -->  00:16:57.830
And here we see an error 500 error.

220

00:16:58.340  -->  00:17:02.220
However it is an error of 500 but it's not the same error as before.

221

00:17:02.270  -->  00:17:06.800
Because we know that we've messed up we didn't have a screen name in the access token because we used

222

00:17:06.800  -->  00:17:07.610
it twice.

223

00:17:07.910  -->  00:17:10.660
So what to do is put the breakpoint in the user.

224

00:17:10.760  -->  00:17:13.390
We know these two lines work.

225

00:17:13.550  -->  00:17:16.420
It just doesn't work twice but we know it works once.

226

00:17:16.550  -->  00:17:20.450
So let's set the breakpoint there after we've got the access token and see what happens.

227

00:17:21.070  -->  00:17:21.580
OK.

228

00:17:21.770  -->  00:17:28.790
I'm going to go back to the log in with Twitter.

229

00:17:32.150  -->  00:17:38.430
And this seems boring but it's essential for you to know how to debug and fix your application.

230

00:17:39.710  -->  00:17:41.990
So now I should get stopped here.

231

00:17:42.110  -->  00:17:44.180
But the access token is no longer empty.

232

00:17:44.210  -->  00:17:47.850
Now it has stuff in it which is great.

233

00:17:48.110  -->  00:17:53.290
So let's now run this one here and see what happens.

234

00:17:53.510  -->  00:17:55.000
And there we have the error.

235

00:17:55.160  -->  00:17:57.740
And you guys know this area already.

236

00:17:57.740  -->  00:17:59.250
You know what this means.

237

00:17:59.270  -->  00:18:01.050
And you know how to fix that error.

238

00:18:01.390  -->  00:18:05.990
Well yes you should because we've encountered it a few times before.

239

00:18:06.200  -->  00:18:08.330
It says none type object has no attributes.

240

00:18:08.330  -->  00:18:14.810
Get can not just get corn and if I get connection.

241

00:18:14.810  -->  00:18:21.590
Now surely you remember that this comes from our database stop why file it comes in fact from here.

242

00:18:21.590  -->  00:18:27.750
What it's telling us is this doesn't have an attribute this.

243

00:18:27.950  -->  00:18:32.160
So what is saying is there is none which is none.

244

00:18:32.180  -->  00:18:35.180
We defined it as being none up there.

245

00:18:36.080  -->  00:18:42.940
But we re we give it a new value down there when we run the initialize method.

246

00:18:43.520  -->  00:18:50.810
What does this tell us that we didn't run the initialize method and indeed we didn't.

247

00:18:50.810  -->  00:18:56.540
This database is never going to be initialized because we're never telling it to be initialized.

248

00:18:56.540  -->  00:19:00.420
What I'm going to do is just press continue and then I get the error of 500.

249

00:19:00.650  -->  00:19:06.830
But down here we are going to have to say database not initialize and then we are going to have to import

250

00:19:06.830  -->  00:19:07.150
data.

251

00:19:07.160  -->  00:19:13.520
So let's type from database import database at the top of the file and then it needs a few things like

252

00:19:13.520  -->  00:19:24.290
the host which is local host that database which is learning the user which is passed us and the password

253

00:19:24.410  -->  00:19:25.820
which is 1 2 3 4.

254

00:19:25.820  -->  00:19:28.980
In my case although it may be different for you.

255

00:19:30.200  -->  00:19:33.880
OK let's restart this debugger.

256

00:19:34.190  -->  00:19:35.840
Go back here.

257

00:19:35.840  -->  00:19:45.360
Go to logon with Twitter and then authorize the app.

258

00:19:45.360  -->  00:19:46.600
And now we've got the breakpoint.

259

00:19:46.970  -->  00:19:50.480
Let's see if that works.

260

00:19:51.170  -->  00:19:54.570
And it's seeing non-time object is not scriptable.

261

00:19:55.910  -->  00:19:56.500
OK.

262

00:19:56.750  -->  00:19:58.750
We don't know what's going on right now.

263

00:19:59.020  -->  00:20:07.100
So what are we going to do is go into that method and we can do that by pressing this icon there step

264

00:20:07.160  -->  00:20:09.680
into when we press that in.

265

00:20:09.680  -->  00:20:15.870
We're going to leave this Twitter off method and instead we're going to go into load from D-B by screen

266

00:20:15.870  -->  00:20:16.910
name.

267

00:20:17.660  -->  00:20:21.010
OK.

268

00:20:23.420  -->  00:20:27.330
So we are stepping through with the cursor object.

269

00:20:27.410  -->  00:20:32.320
Now we're going to execute the connection user data is numb.

270

00:20:32.870  -->  00:20:47.240
And here is a small error that when done checked essentially if not user data that means user data is

271

00:20:47.270  -->  00:20:48.530
none.

272

00:20:49.250  -->  00:20:57.500
So if user data is none which it does then we're going to go in there but we cannot get Elliman number

273

00:20:57.500  -->  00:21:02.390
one element number two element number three of user data because it is none.

274

00:21:02.390  -->  00:21:06.270
So what we wanted was if user data.

275

00:21:07.490  -->  00:21:16.800
OK let's now press continue restart and go through it again and see if that fixes it.

276

00:21:16.890  -->  00:21:18.690
Logon to Twitter.

277

00:21:19.590  -->  00:21:21.050
Well there's the app

278

00:21:24.140  -->  00:21:25.990
which should now stop here.

279

00:21:26.030  -->  00:21:29.350
So now when we run this again this should not work.

280

00:21:29.450  -->  00:21:31.180
It is none which is correct.

281

00:21:31.190  -->  00:21:33.610
We don't currently have a user in our database.

282

00:21:34.130  -->  00:21:36.570
So we not a user we we're going to go in there.

283

00:21:36.590  -->  00:21:38.610
We're going to be creating a user.

284

00:21:39.110  -->  00:21:43.430
And now we're going to see that the data database we're going to set it in the session.

285

00:21:43.640  -->  00:21:48.410
And finally we're going to return it so I'm going to just press continue which is the green button and

286

00:21:48.410  -->  00:21:57.620
go back to Safari and there we have my Twitter username now and getting the Twitter username wasn't

287

00:21:57.650  -->  00:22:00.770
really the main aim of this video although it was.

288

00:22:01.150  -->  00:22:07.670
But really the most important part is for you to use a debugger learn about fixing your errors find

289

00:22:07.670  -->  00:22:10.790
the errors and understand what your program is doing.

290

00:22:10.790  -->  00:22:16.010
It's important that you start thinking like a computer in order to be able to fix problems that will

291

00:22:16.010  -->  00:22:17.160
arise.

292

00:22:17.570  -->  00:22:20.050
And it does take expedience it takes time.

293

00:22:20.110  -->  00:22:23.510
It's not easy but you can do it.

294

00:22:23.660  -->  00:22:27.200
And the the main the best way to do that is by practicing.

295

00:22:27.590  -->  00:22:32.810
So hopefully you found it OK to bear with the couple of errors that we threw in there.

296

00:22:33.270  -->  00:22:38.170
And I actually think that this era there is not something that you'll have in your code.

297

00:22:38.450  -->  00:22:42.590
But it was there now anyway so hopefully you've learned something.

298

00:22:42.620  -->  00:22:48.320
And now we can proceed over to the next few videos where we're going to be looking at some more of this

299

00:22:48.320  -->  00:22:49.360
stuff.

300

00:22:49.460  -->  00:22:54.260
And also I did mention that we show you the easier way to find out these arrows and you can try that

301

00:22:54.380  -->  00:22:55.200
yourselves.

302

00:22:55.380  -->  00:22:59.740
You can just type in debug equals true down here.

303

00:22:59.810  -->  00:23:02.570
After the port and that will give you a bit more information.

304

00:23:02.570  -->  00:23:03.970
When something does go wrong.

305

00:23:04.400  -->  00:23:05.840
So we're going to leave that there.

306

00:23:06.140  -->  00:23:11.790
And you can use that and throughout your development as well it'll help you.

307

00:23:12.040  -->  00:23:12.860
Yes that's it.

308

00:23:12.860  -->  00:23:16.010
So thanks for watching and I'll see you in the very next video.
