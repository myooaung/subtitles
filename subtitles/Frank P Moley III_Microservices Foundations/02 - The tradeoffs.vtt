WEBVTT
1
00:00:00.050 --> 00:00:02.080
- I have said it many times

2
00:00:02.080 --> 00:00:05.070
that building a microservices architecture

3
00:00:05.070 --> 00:00:10.090
is not a silver bullet when it comes to developing software.

4
00:00:10.090 --> 00:00:14.070
I have also spent a significant amount of time talking

5
00:00:14.070 --> 00:00:19.060
about what the issues that can arise in this model are.

6
00:00:19.060 --> 00:00:23.000
I want to talk about these from the perspective of comparing

7
00:00:23.000 --> 00:00:26.040
and contrasting the tradeoffs.

8
00:00:26.040 --> 00:00:29.090
Many thought leaders like Mark Richards and Martin Fowler

9
00:00:29.090 --> 00:00:33.080
have significant documentation on these tradeoffs.

10
00:00:33.080 --> 00:00:37.030
So I'm just going to apply some of my personal experiences

11
00:00:37.030 --> 00:00:40.090
to the information that I have gathered from them.

12
00:00:40.090 --> 00:00:44.040
We have talked a lot about the distribution tax.

13
00:00:44.040 --> 00:00:46.010
There's a significant cost

14
00:00:46.010 --> 00:00:48.090
of building out a distributed system,

15
00:00:48.090 --> 00:00:52.010
but you get several benefits from this.

16
00:00:52.010 --> 00:00:54.030
One of the biggest benefits

17
00:00:54.030 --> 00:00:57.060
is well-defined module boundaries.

18
00:00:57.060 --> 00:01:01.010
It is a lot harder to write tightly coupled code

19
00:01:01.010 --> 00:01:03.090
when you have to go across the service boundary

20
00:01:03.090 --> 00:01:05.080
to make a call.

21
00:01:05.080 --> 00:01:08.080
In addition, you get a much easier path

22
00:01:08.080 --> 00:01:11.020
of scaling your system.

23
00:01:11.020 --> 00:01:14.040
These are real tradeoffs that you need to manage

24
00:01:14.040 --> 00:01:18.060
and they may be some of the most critical in the system.

25
00:01:18.060 --> 00:01:20.060
We have talked a lot about this

26
00:01:20.060 --> 00:01:24.080
and various solutions like event-driven asynchronous models

27
00:01:24.080 --> 00:01:27.090
because it is so critical.

28
00:01:27.090 --> 00:01:30.020
Think about a company like Amazon

29
00:01:30.020 --> 00:01:32.040
that does business globally

30
00:01:32.040 --> 00:01:35.070
and clearly has spikes in order activity

31
00:01:35.070 --> 00:01:38.000
around Christmas for instance.

32
00:01:38.000 --> 00:01:40.030
And for them to manage their system

33
00:01:40.030 --> 00:01:42.090
in a monolithic deployment,

34
00:01:42.090 --> 00:01:45.060
it would be next to impossible.

35
00:01:45.060 --> 00:01:49.000
They have managed the cost of distribution

36
00:01:49.000 --> 00:01:51.070
in order to leverage a clear benefit

37
00:01:51.070 --> 00:01:53.090
of doing business globally

38
00:01:53.090 --> 00:01:57.060
and under a highly available model.

39
00:01:57.060 --> 00:02:01.030
One of the other dichotomies to evaluate in microservices

40
00:02:01.030 --> 00:02:03.080
is deployment complexity.

41
00:02:03.080 --> 00:02:05.030
We have discussed the ability

42
00:02:05.030 --> 00:02:07.090
to scale in this architecture style.

43
00:02:07.090 --> 00:02:10.090
However, that ability to scale

44
00:02:10.090 --> 00:02:14.040
increases the complexity of our deployments.

45
00:02:14.040 --> 00:02:16.090
Now, I would argue that deployments

46
00:02:16.090 --> 00:02:20.000
are always a hard part of software delivery.

47
00:02:20.000 --> 00:02:24.070
But in microservices, there are just so many moving parts

48
00:02:24.070 --> 00:02:28.050
that the complexity increases dramatically.

49
00:02:28.050 --> 00:02:32.030
We've also talked about ways to solve this complexity

50
00:02:32.030 --> 00:02:34.090
through continuous delivery.

51
00:02:34.090 --> 00:02:38.080
The benefits of scale and reduce waste over that scale

52
00:02:38.080 --> 00:02:43.070
can be measured and the financial benefits often can be used

53
00:02:43.070 --> 00:02:48.050
to built out a path and increase the savings even more.

54
00:02:48.050 --> 00:02:51.010
The final tradeoff that I will talk about

55
00:02:51.010 --> 00:02:55.040
is the ability to have diversity in your technology stack.

56
00:02:55.040 --> 00:02:59.060
We talked about microservices being a heterogeneous model,

57
00:02:59.060 --> 00:03:04.060
but this ability to write your services in any technology

58
00:03:04.060 --> 00:03:08.000
comes with real operational costs.

59
00:03:08.000 --> 00:03:12.020
You can fully embrace polyglot development if you want,

60
00:03:12.020 --> 00:03:16.000
but managing these services in production

61
00:03:16.000 --> 00:03:18.020
when they follow different rules

62
00:03:18.020 --> 00:03:20.070
can be a huge challenge.

63
00:03:20.070 --> 00:03:25.020
From my experiences, it is often better in these cases

64
00:03:25.020 --> 00:03:28.030
to embrace a smaller set of technologies

65
00:03:28.030 --> 00:03:33.020
to improve your ability to manage the operations.

66
00:03:33.020 --> 00:03:35.050
I have said this several times as well,

67
00:03:35.050 --> 00:03:38.000
but you have to spend some serious time

68
00:03:38.000 --> 00:03:42.040
evaluating these tradeoffs within your system.

69
00:03:42.040 --> 00:03:46.050
Manage to the strengths and control the weaknesses

70
00:03:46.050 --> 00:03:51.000
and you will achieve significantly better results.

71
00:03:51.000 --> 00:03:53.040
I really hope that I'm imparting in you

72
00:03:53.040 --> 00:03:58.000
a real need to plan and not just jump in.

