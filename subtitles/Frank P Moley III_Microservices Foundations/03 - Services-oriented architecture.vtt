WEBVTT
1
00:00:00.050 --> 00:00:02.060
- I want to start this conversation

2
00:00:02.060 --> 00:00:05.010
by stating that I have spent a significant part

3
00:00:05.010 --> 00:00:08.050
of my professional career writing and consuming

4
00:00:08.050 --> 00:00:12.030
SOAP services, utilizing solo platforms,

5
00:00:12.030 --> 00:00:14.030
and, of course, service buses.

6
00:00:14.030 --> 00:00:17.070
So my biases come from experience.

7
00:00:17.070 --> 00:00:20.040
I don't want to spend too much time on SOAP,

8
00:00:20.040 --> 00:00:23.080
but I do think it's important to discuss it some.

9
00:00:23.080 --> 00:00:26.060
SOAP, as a communication mechanism,

10
00:00:26.060 --> 00:00:30.040
between systems is not inherently bad.

11
00:00:30.040 --> 00:00:33.040
Like I just mentioned, I have done a lot of valuable

12
00:00:33.040 --> 00:00:36.030
work leveraging SOAP.

13
00:00:36.030 --> 00:00:39.000
I also don't feel like many do,

14
00:00:39.000 --> 00:00:41.070
that XML is overly verbose.

15
00:00:41.070 --> 00:00:45.070
The verbosity of XML adds some validation value

16
00:00:45.070 --> 00:00:49.050
that in some places is very critical.

17
00:00:49.050 --> 00:00:52.010
Most of my criticisms about SOAP

18
00:00:52.010 --> 00:00:54.030
come from how it was implemented.

19
00:00:54.030 --> 00:00:56.090
But more on that in a moment.

20
00:00:56.090 --> 00:01:02.000
SOAP's values, in my opinion, come from its strong contract.

21
00:01:02.000 --> 00:01:05.030
There is no doubt in my mind that WSDL

22
00:01:05.030 --> 00:01:08.040
is the single best part of SOAP.

23
00:01:08.040 --> 00:01:12.050
The definition language not only provides a strong contract

24
00:01:12.050 --> 00:01:14.030
that can be validated,

25
00:01:14.030 --> 00:01:18.010
but it also provides an inherent documentation layer.

26
00:01:18.010 --> 00:01:21.080
These benefits often get ignored when discussing SOAP.

27
00:01:21.080 --> 00:01:24.060
But it really aids business processing,

28
00:01:24.060 --> 00:01:27.020
especially in SOA.

29
00:01:27.020 --> 00:01:30.090
My issues from SOAP come from the implementation.

30
00:01:30.090 --> 00:01:34.050
The envelope, in my view, is wasted space on the wire

31
00:01:34.050 --> 00:01:38.000
that could have been handled in more efficient manners.

32
00:01:38.000 --> 00:01:40.050
My biggest issue with SOAP, however,

33
00:01:40.050 --> 00:01:44.050
is that everything is either OK, or a 200 response,

34
00:01:44.050 --> 00:01:47.080
or a Fault, which is a 500 response.

35
00:01:47.080 --> 00:01:49.060
There is nothing in between.

36
00:01:49.060 --> 00:01:52.080
And in the real world, flow control requires

37
00:01:52.080 --> 00:01:57.000
much more granularity than working or not.

38
00:01:57.000 --> 00:02:00.080
The promise of SOA, even with the deficiencies of SOAP,

39
00:02:00.080 --> 00:02:03.020
was amazing, in my opinion.

40
00:02:03.020 --> 00:02:06.040
Well-defined contracts of desperate systems

41
00:02:06.040 --> 00:02:09.070
communicating over a common protocol.

42
00:02:09.070 --> 00:02:12.050
The ability to build and deploy services

43
00:02:12.050 --> 00:02:17.060
and consume systems through the simple contract was amazing.

44
00:02:17.060 --> 00:02:20.030
Many of the deployment issues with monoliths

45
00:02:20.030 --> 00:02:24.050
were solved with SOA and we could simply do work.

46
00:02:24.050 --> 00:02:27.030
Once a service was built and deployed,

47
00:02:27.030 --> 00:02:30.000
then we would wire all of the communications

48
00:02:30.000 --> 00:02:34.030
through standard business processing known as BPO.

49
00:02:34.030 --> 00:02:36.070
And here is where the real weakness of SOA,

50
00:02:36.070 --> 00:02:39.080
in my mind, comes into play.

51
00:02:39.080 --> 00:02:43.060
The promise of business users wiring services

52
00:02:43.060 --> 00:02:46.010
only worked in certain situations.

53
00:02:46.010 --> 00:02:48.090
And even then the work they were doing

54
00:02:48.090 --> 00:02:52.020
was abstracted from the web services code.

55
00:02:52.020 --> 00:02:56.040
As BPO got bigger, so did the coupling of systems.

56
00:02:56.040 --> 00:03:00.020
The wiring became just as much part of the code base

57
00:03:00.020 --> 00:03:02.030
as the traditional code did,

58
00:03:02.030 --> 00:03:06.010
and it was mostly hidden from view of the developers.

59
00:03:06.010 --> 00:03:09.070
The bloated systems became riddled with spaghetti code,

60
00:03:09.070 --> 00:03:13.020
painful deployments, and fragile systems,

61
00:03:13.020 --> 00:03:16.060
all of which restricted agility.

62
00:03:16.060 --> 00:03:19.010
The industry noted these issues as well,

63
00:03:19.010 --> 00:03:22.000
and SOA's astronomic rise in use

64
00:03:22.000 --> 00:03:26.010
was only matched by its crash.

65
00:03:26.010 --> 00:03:30.020
It really became easier to just manage the monolith

66
00:03:30.020 --> 00:03:34.060
than to manage services and wiring in separate code bases

67
00:03:34.060 --> 00:03:38.080
along with the costs associated with these systems.

68
00:03:38.080 --> 00:03:43.000
It just wasn't worth it in many people's eyes.

