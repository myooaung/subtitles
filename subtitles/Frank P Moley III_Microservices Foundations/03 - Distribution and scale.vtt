WEBVTT
1
00:00:00.050 --> 00:00:03.050
- The communication pattern of microservices

2
00:00:03.050 --> 00:00:07.010
lends itself to a truly distributed model.

3
00:00:07.010 --> 00:00:09.060
While distribution beyond a single data center

4
00:00:09.060 --> 00:00:13.060
is not a requirement for microservices architecture,

5
00:00:13.060 --> 00:00:16.070
it definitely is one of the benefits of this model,

6
00:00:16.070 --> 00:00:18.060
as a whole.

7
00:00:18.060 --> 00:00:21.040
Along with the ability to easily distribute your system,

8
00:00:21.040 --> 00:00:25.010
as a whole, the microservices architecture model

9
00:00:25.010 --> 00:00:28.060
provides for a highly scalable system.

10
00:00:28.060 --> 00:00:31.090
Both of these properties are very powerful

11
00:00:31.090 --> 00:00:34.050
for a modern application suite.

12
00:00:34.050 --> 00:00:39.020
But as usual with software, they also come with a price.

13
00:00:39.020 --> 00:00:42.070
Let's start by discussing distribution.

14
00:00:42.070 --> 00:00:46.050
Each service is accessed over remote network call,

15
00:00:46.050 --> 00:00:50.070
regardless of being in a local or remote data center.

16
00:00:50.070 --> 00:00:54.050
Therefore, you can theoretically move the services

17
00:00:54.050 --> 00:00:56.050
anywhere you want around the globe,

18
00:00:56.050 --> 00:00:58.060
and the system will work.

19
00:00:58.060 --> 00:01:01.000
Now from a reality perspective,

20
00:01:01.000 --> 00:01:04.030
putting services all over the world is costly,

21
00:01:04.030 --> 00:01:05.070
both in infrastructure

22
00:01:05.070 --> 00:01:09.060
and also the latency of the calls themselves.

23
00:01:09.060 --> 00:01:12.030
The benefit of this ability, however,

24
00:01:12.030 --> 00:01:16.060
shouldn't be lost on the individual service to service call.

25
00:01:16.060 --> 00:01:20.000
Microservices distribution solves the problem

26
00:01:20.000 --> 00:01:24.010
of getting infrastructure and services globally available,

27
00:01:24.010 --> 00:01:29.050
when needed without making all services globally available.

28
00:01:29.050 --> 00:01:33.020
Look at this model from the enterprise perspective.

29
00:01:33.020 --> 00:01:37.010
You may have customer-facing applications and services

30
00:01:37.010 --> 00:01:40.010
that need to be regionally or globally distributed

31
00:01:40.010 --> 00:01:44.070
to support high availability, or geo-spatial needs.

32
00:01:44.070 --> 00:01:48.020
You may also have a set of applications and services

33
00:01:48.020 --> 00:01:52.020
that are solely enterprise focused.

34
00:01:52.020 --> 00:01:55.060
These lines often get blurred as your business grows

35
00:01:55.060 --> 00:01:58.020
and you expand your operations,

36
00:01:58.020 --> 00:02:01.050
so building out a system of microservices,

37
00:02:01.050 --> 00:02:05.040
capable of global distribution from day one,

38
00:02:05.040 --> 00:02:09.040
prepares your enterprise for the future.

39
00:02:09.040 --> 00:02:11.090
Likewise, the ability to scale

40
00:02:11.090 --> 00:02:15.030
is part of this architectural style.

41
00:02:15.030 --> 00:02:19.050
In a microservices architecture, each application

42
00:02:19.050 --> 00:02:24.060
is independent of every other application in the system.

43
00:02:24.060 --> 00:02:29.040
As such, when an individual service comes under load,

44
00:02:29.040 --> 00:02:32.070
it can be individually scaled.

45
00:02:32.070 --> 00:02:36.080
Let's take a quick look at how the scaling works.

46
00:02:36.080 --> 00:02:40.050
Consider a microservice that serves customer data.

47
00:02:40.050 --> 00:02:43.000
This is a well-defined domain that handles

48
00:02:43.000 --> 00:02:45.080
all of the requests throughout your system

49
00:02:45.080 --> 00:02:48.000
for this type of data.

50
00:02:48.000 --> 00:02:51.070
Now, imagine that your company releases the hottest

51
00:02:51.070 --> 00:02:55.010
new product and you start seeing a large number

52
00:02:55.010 --> 00:02:58.090
of new customers interacting with your system.

53
00:02:58.090 --> 00:03:01.070
Therefore, your customer service starts taking

54
00:03:01.070 --> 00:03:04.020
significant load.

55
00:03:04.020 --> 00:03:07.020
Now in a traditional model, you would have to scale

56
00:03:07.020 --> 00:03:11.030
every component in your system to handle the load increases

57
00:03:11.030 --> 00:03:13.090
on a single service.

58
00:03:13.090 --> 00:03:17.020
A microservices architecture, allows you to simply

59
00:03:17.020 --> 00:03:21.030
increase the number of instances of your customer service

60
00:03:21.030 --> 00:03:24.030
when you experience that load.

61
00:03:24.030 --> 00:03:28.010
Assuming you were using a solid API proxy layer,

62
00:03:28.010 --> 00:03:30.050
which we will discuss later,

63
00:03:30.050 --> 00:03:33.080
your system will have zero changes needed

64
00:03:33.080 --> 00:03:36.050
outside the increased instance count

65
00:03:36.050 --> 00:03:39.060
of your customer service.

66
00:03:39.060 --> 00:03:43.010
To experience the real power of this scaling model,

67
00:03:43.010 --> 00:03:46.060
consider how you plan your infrastructure today.

68
00:03:46.060 --> 00:03:49.060
Traditionally, you build your system

69
00:03:49.060 --> 00:03:52.030
planning for your busiest day.

70
00:03:52.030 --> 00:03:55.070
In a well-defined microservices architecture,

71
00:03:55.070 --> 00:03:59.060
with the right platform, you can build your system

72
00:03:59.060 --> 00:04:03.060
for an average day, and allow scalability

73
00:04:03.060 --> 00:04:06.070
to solve for the increases or decreases

74
00:04:06.070 --> 00:04:09.000
in traffic volumes.

75
00:04:09.000 --> 00:04:11.030
This so-called elastic scalability,

76
00:04:11.030 --> 00:04:15.020
is very hard, if not impossible,

77
00:04:15.020 --> 00:04:18.020
for a monolithic application.

78
00:04:18.020 --> 00:04:21.030
I mention that all this comes with a price,

79
00:04:21.030 --> 00:04:25.090
and in the next video, we'll discuss some of those problems.

80
00:04:25.090 --> 00:04:28.010
But I do want to stress that these two topics,

81
00:04:28.010 --> 00:04:30.070
scalability and distribution,

82
00:04:30.070 --> 00:04:36.000
are the most valuable benefits of this architecture.

