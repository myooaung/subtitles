WEBVTT
1
00:00:00.050 --> 00:00:03.050
- We cannot have a discussion on modern application

2
00:00:03.050 --> 00:00:06.040
architectures without taking a brief look

3
00:00:06.040 --> 00:00:08.060
at where we have come from.

4
00:00:08.060 --> 00:00:11.020
When I started writing code professionally,

5
00:00:11.020 --> 00:00:14.030
end-tier architectures and monolithic applications

6
00:00:14.030 --> 00:00:16.010
were the norm.

7
00:00:16.010 --> 00:00:19.000
We used to build a single binary web artifact

8
00:00:19.000 --> 00:00:23.050
and then decompose the application internally into layers.

9
00:00:23.050 --> 00:00:25.040
You would build a data access layer

10
00:00:25.040 --> 00:00:27.020
and then a business process layer,

11
00:00:27.020 --> 00:00:30.040
and then a presentation layer on top of that.

12
00:00:30.040 --> 00:00:33.070
Each of these layers would often then decompose

13
00:00:33.070 --> 00:00:35.050
into layers themselves,

14
00:00:35.050 --> 00:00:39.020
often in threes again, over and over.

15
00:00:39.020 --> 00:00:42.010
This layered architecture still gives me chills

16
00:00:42.010 --> 00:00:43.030
down my spine.

17
00:00:43.030 --> 00:00:45.090
To think of the crazy pass through layers

18
00:00:45.090 --> 00:00:49.070
that we would build just to satisfy the architecture.

19
00:00:49.070 --> 00:00:53.070
What we did get, however, was separation of concerns

20
00:00:53.070 --> 00:00:58.080
and decomposition of our code into functional components.

21
00:00:58.080 --> 00:01:02.010
As monoliths continue to rule the environment,

22
00:01:02.010 --> 00:01:04.030
we started to see an anti-pattern

23
00:01:04.030 --> 00:01:08.020
that still hinders us today in many situations.

24
00:01:08.020 --> 00:01:12.040
The coupling of code in monoliths make changes hard

25
00:01:12.040 --> 00:01:14.070
and the older the application was,

26
00:01:14.070 --> 00:01:17.030
the more coupling would develop.

27
00:01:17.030 --> 00:01:19.070
In addition to the coupling issues,

28
00:01:19.070 --> 00:01:22.070
monolithic applications require considerable time

29
00:01:22.070 --> 00:01:26.040
to build, test, and deploy.

30
00:01:26.040 --> 00:01:28.070
The issues with monolithic applications

31
00:01:28.070 --> 00:01:33.080
compounded on top of itself as coupling causes code issues,

32
00:01:33.080 --> 00:01:36.050
which could only be fixed with long cycles

33
00:01:36.050 --> 00:01:38.050
from code fix to deploy

34
00:01:38.050 --> 00:01:41.020
and the issues go on and on.

35
00:01:41.020 --> 00:01:44.060
We then saw a shift, and that shift was to service-based

36
00:01:44.060 --> 00:01:45.090
architectures,

37
00:01:45.090 --> 00:01:50.020
specifically SOA, or service-oriented architecture.

38
00:01:50.020 --> 00:01:52.030
While these decomposed our applications

39
00:01:52.030 --> 00:01:56.080
into smaller modules, it brought about two new issues.

40
00:01:56.080 --> 00:02:00.080
One is the web service technology was based on soap,

41
00:02:00.080 --> 00:02:03.040
and while not a deal-breaker on its own,

42
00:02:03.040 --> 00:02:07.020
it makes a lot of compromises to how the web works.

43
00:02:07.020 --> 00:02:10.080
Every request for instance is not either okay

44
00:02:10.080 --> 00:02:12.080
or an internal server error.

45
00:02:12.080 --> 00:02:16.020
There are recoverable errors that can occur.

46
00:02:16.020 --> 00:02:18.080
The second and more prevalent issue

47
00:02:18.080 --> 00:02:22.000
is the aggregation layer itself.

48
00:02:22.000 --> 00:02:25.070
While the aggregation layer can be written very thin,

49
00:02:25.070 --> 00:02:28.040
the reality is that transformations of XML

50
00:02:28.040 --> 00:02:32.090
and logic operations start getting added to the bus itself.

51
00:02:32.090 --> 00:02:35.010
This added a new level of coupling,

52
00:02:35.010 --> 00:02:37.070
now between internal and external elements

53
00:02:37.070 --> 00:02:39.080
of the system as a whole.

54
00:02:39.080 --> 00:02:43.000
SOA was however the hottest architecture pattern

55
00:02:43.000 --> 00:02:44.060
of the time.

56
00:02:44.060 --> 00:02:47.040
Enter into the picture microservices.

57
00:02:47.040 --> 00:02:48.070
Now I would be the first to state

58
00:02:48.070 --> 00:02:50.090
that microservices-based architectures

59
00:02:50.090 --> 00:02:52.090
are not the silver bullet.

60
00:02:52.090 --> 00:02:56.090
In fact, they bring their own sets of problems.

61
00:02:56.090 --> 00:03:00.080
They do however have the promise of a more agile framework

62
00:03:00.080 --> 00:03:03.070
that can be extended into a cloud native world

63
00:03:03.070 --> 00:03:07.000
much easier than either monolithic applications

64
00:03:07.000 --> 00:03:09.070
or SOA-based architectures.

65
00:03:09.070 --> 00:03:13.060
The new rage of microservices is not an accident either.

66
00:03:13.060 --> 00:03:15.090
The model fits well in both a web developer

67
00:03:15.090 --> 00:03:17.090
and web service developer,

68
00:03:17.090 --> 00:03:22.060
in part because HTTP is at the heart of the model.

69
00:03:22.060 --> 00:03:24.040
As we begin to dig in,

70
00:03:24.040 --> 00:03:27.030
keep in mind the trade-offs we take in microservices

71
00:03:27.030 --> 00:03:30.090
and use that to evaluate if this architecture pattern

72
00:03:30.090 --> 00:03:33.010
is for you.

73
00:03:33.010 --> 00:03:35.020
Now we will dig into each of the patterns

74
00:03:35.020 --> 00:03:36.090
in a little more depth

75
00:03:36.090 --> 00:03:39.070
so we can focus on the lessons of the past

76
00:03:39.070 --> 00:03:42.000
to make for a better future.

