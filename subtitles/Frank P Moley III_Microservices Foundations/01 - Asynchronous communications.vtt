WEBVTT
1
00:00:00.040 --> 00:00:02.080
- One of the best strategies for dealing

2
00:00:02.080 --> 00:00:06.080
with reducing latency on a microservices-based

3
00:00:06.080 --> 00:00:10.060
system is to not rely on a purely

4
00:00:10.060 --> 00:00:13.060
synchronous communication model.

5
00:00:13.060 --> 00:00:16.070
Leveraging event driven asynchronous

6
00:00:16.070 --> 00:00:20.050
communications is a fantastic way to improve

7
00:00:20.050 --> 00:00:23.070
system health as well as support

8
00:00:23.070 --> 00:00:26.020
long-term objectives of moving

9
00:00:26.020 --> 00:00:29.070
large amounts of data over long distances

10
00:00:29.070 --> 00:00:32.080
in a fairly timely fashion.

11
00:00:32.080 --> 00:00:37.010
Asynchronous communications however are not easy,

12
00:00:37.010 --> 00:00:39.030
and you need to put sufficient work

13
00:00:39.030 --> 00:00:42.090
into ensuring that your communications reach

14
00:00:42.090 --> 00:00:47.030
their destination and are processed in accordance

15
00:00:47.030 --> 00:00:50.030
with predetermined tolerances.

16
00:00:50.030 --> 00:00:52.080
Learning how to appropriately handle

17
00:00:52.080 --> 00:00:57.010
and respond to error conditions is critical

18
00:00:57.010 --> 00:01:00.020
to keeping the system healthy.

19
00:01:00.020 --> 00:01:02.030
Most often when you hear mentions

20
00:01:02.030 --> 00:01:04.060
of asynchronous communications

21
00:01:04.060 --> 00:01:07.030
in a microservices architecture,

22
00:01:07.030 --> 00:01:09.020
people are specifically referring

23
00:01:09.020 --> 00:01:13.090
to event-driven microservices as a way to support

24
00:01:13.090 --> 00:01:17.000
eventual consistency of the data.

25
00:01:17.000 --> 00:01:20.040
In this model, the services put a message

26
00:01:20.040 --> 00:01:23.000
into an asynchronous message broker

27
00:01:23.000 --> 00:01:27.030
or a temporary data store and then drive events

28
00:01:27.030 --> 00:01:29.030
from this new state.

29
00:01:29.030 --> 00:01:33.010
The downstream event processors will process the data

30
00:01:33.010 --> 00:01:35.090
and eventually cause the data to be stored

31
00:01:35.090 --> 00:01:38.030
in its final data store.

32
00:01:38.030 --> 00:01:41.020
Conversions will then occur through either

33
00:01:41.020 --> 00:01:46.000
distributed data patterns or subsequent event processing.

34
00:01:46.000 --> 00:01:49.060
While this model is the most common one discussed,

35
00:01:49.060 --> 00:01:53.040
it is definitely not the only one.

36
00:01:53.040 --> 00:01:57.070
Stream data platforms are a very strong pattern

37
00:01:57.070 --> 00:02:00.030
when building out a large system,

38
00:02:00.030 --> 00:02:05.060
especially with many different but interesting operations.

39
00:02:05.060 --> 00:02:09.090
In a stream data platform, events are written

40
00:02:09.090 --> 00:02:11.040
to a central message broker.

41
00:02:11.040 --> 00:02:15.010
These events then trigger listener operations

42
00:02:15.010 --> 00:02:19.030
that take action on that data if it applies to them.

43
00:02:19.030 --> 00:02:22.090
These events can trigger operations that format the data,

44
00:02:22.090 --> 00:02:27.070
cause other downstream events, or various other activities.

45
00:02:27.070 --> 00:02:31.000
These stream data platforms, in my experience,

46
00:02:31.000 --> 00:02:35.000
can be highly useful in large distributed systems

47
00:02:35.000 --> 00:02:38.030
because often events trigger multiple operations

48
00:02:38.030 --> 00:02:40.050
and not just one.

49
00:02:40.050 --> 00:02:43.000
By leveraging a platform like this,

50
00:02:43.000 --> 00:02:46.050
you can do more work with less overall stress

51
00:02:46.050 --> 00:02:49.090
on the system which of course improves

52
00:02:49.090 --> 00:02:54.040
overall performance, especially in activities like logging,

53
00:02:54.040 --> 00:02:57.050
auditing, or inspections.

54
00:02:57.050 --> 00:03:01.010
One of the most overlooked patterns in this space

55
00:03:01.010 --> 00:03:04.000
from my experience is the transition

56
00:03:04.000 --> 00:03:06.040
from pure synchronous operations

57
00:03:06.040 --> 00:03:09.010
to asynchronous processing.

58
00:03:09.010 --> 00:03:11.070
We are impatient by nature and we seem

59
00:03:11.070 --> 00:03:16.000
to always want systems that have immediate feedback.

60
00:03:16.000 --> 00:03:18.070
But it is not always needed.

61
00:03:18.070 --> 00:03:22.010
Many times we can simply defer the processing

62
00:03:22.010 --> 00:03:25.020
to occur in an asynchronous manner.

63
00:03:25.020 --> 00:03:28.060
When we do this, we reduce the latency constraints

64
00:03:28.060 --> 00:03:31.090
on the functions that actually are required

65
00:03:31.090 --> 00:03:34.060
to be executed in real time.

66
00:03:34.060 --> 00:03:37.000
Part of the goal to moving to asynchronous

67
00:03:37.000 --> 00:03:41.000
operations is load reduction, but as I mentioned,

68
00:03:41.000 --> 00:03:44.040
it isn't always just a simple move.

69
00:03:44.040 --> 00:03:47.010
When moving to asynchronous operations,

70
00:03:47.010 --> 00:03:50.080
you need to take care to handle error states correctly

71
00:03:50.080 --> 00:03:53.010
and recover from them.

72
00:03:53.010 --> 00:03:56.080
If messages cannot be processed for any reason,

73
00:03:56.080 --> 00:03:59.030
you cannot simply ignore them.

74
00:03:59.030 --> 00:04:02.010
Dead letter queues must be monitored

75
00:04:02.010 --> 00:04:06.060
and action must be taken to process the messages,

76
00:04:06.060 --> 00:04:09.050
even if it's manual processing.

77
00:04:09.050 --> 00:04:13.060
Data should be routinely monitored for correctness

78
00:04:13.060 --> 00:04:15.070
in an automated fashion.

79
00:04:15.070 --> 00:04:19.080
And performance must be evaluated to ensure

80
00:04:19.080 --> 00:04:23.060
that the message brokers are not getting behind.

81
00:04:23.060 --> 00:04:26.020
Now I encourage you to take some real time

82
00:04:26.020 --> 00:04:30.000
in your system design and investigate how leveraging

83
00:04:30.000 --> 00:04:32.040
asynchronous communications can help

84
00:04:32.040 --> 00:04:36.000
your team achieve scale.

