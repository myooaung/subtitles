WEBVTT
1
00:00:00.050 --> 00:00:02.010
- Throughout this course,

2
00:00:02.010 --> 00:00:05.000
we've talked a lot about managing tradeoffs

3
00:00:05.000 --> 00:00:08.010
in a microservices architecture.

4
00:00:08.010 --> 00:00:11.040
I have talked about the various improvements to a system

5
00:00:11.040 --> 00:00:14.010
that can be achieved through microservices

6
00:00:14.010 --> 00:00:17.020
as well as the potential impacts.

7
00:00:17.020 --> 00:00:19.080
I have also talked about the operational costs

8
00:00:19.080 --> 00:00:24.020
and the need to build out a continuous delivery model.

9
00:00:24.020 --> 00:00:25.060
All of what we have discussed

10
00:00:25.060 --> 00:00:30.040
boils down to one major thing, culture.

11
00:00:30.040 --> 00:00:33.060
The single most effective way to be successful

12
00:00:33.060 --> 00:00:36.030
in a microservices architecture

13
00:00:36.030 --> 00:00:39.010
is to build it into your culture.

14
00:00:39.010 --> 00:00:42.040
A devops culture is a perfect fit

15
00:00:42.040 --> 00:00:45.050
for building out a microservices architecture

16
00:00:45.050 --> 00:00:48.090
because the two compliment each other's strengths

17
00:00:48.090 --> 00:00:51.060
while mitigating the weaknesses.

18
00:00:51.060 --> 00:00:54.030
Devops aims to bring the conversation

19
00:00:54.030 --> 00:00:59.020
between operations and development into the same sphere.

20
00:00:59.020 --> 00:01:03.040
It is from this perspective that we will spend some time.

21
00:01:03.040 --> 00:01:07.040
I've talked a lot about increased operational complexity

22
00:01:07.040 --> 00:01:10.010
of a microservices architecture.

23
00:01:10.010 --> 00:01:12.010
From the distribution tax

24
00:01:12.010 --> 00:01:15.040
to the large deployment counts for a full system,

25
00:01:15.040 --> 00:01:18.040
most of the issues from microservices

26
00:01:18.040 --> 00:01:22.030
can be seen as operational issues.

27
00:01:22.030 --> 00:01:25.090
The distribution tax in a microservices architecture

28
00:01:25.090 --> 00:01:29.000
is one that must be closely monitored

29
00:01:29.000 --> 00:01:33.060
to ensure lag in the system doesn't have major impacts.

30
00:01:33.060 --> 00:01:36.030
There are several architectural mitigations

31
00:01:36.030 --> 00:01:40.050
we have discussed, but regardless of the mitigations,

32
00:01:40.050 --> 00:01:45.080
monitoring the system remains the most important aspect.

33
00:01:45.080 --> 00:01:50.060
A platform of continuous monitoring and automated responses

34
00:01:50.060 --> 00:01:54.050
become a necessity for operations.

35
00:01:54.050 --> 00:01:58.000
Devops aims to leverage automation

36
00:01:58.000 --> 00:02:02.050
and embed the work into the development function.

37
00:02:02.050 --> 00:02:05.010
We spent a significant amount of time

38
00:02:05.010 --> 00:02:09.060
talking about common logging and tracing for a reason.

39
00:02:09.060 --> 00:02:15.020
They lead to a simpler use case for automated monitoring.

40
00:02:15.020 --> 00:02:16.080
Once we have the data

41
00:02:16.080 --> 00:02:20.030
and have it in a unified and structured format,

42
00:02:20.030 --> 00:02:25.000
we can write code to respond in an automated fashion.

43
00:02:25.000 --> 00:02:27.050
Consider increased response times

44
00:02:27.050 --> 00:02:30.040
or increased 500 response codes

45
00:02:30.040 --> 00:02:33.050
triggering re-paving of the infrastructure

46
00:02:33.050 --> 00:02:36.070
or at the very least a pager call.

47
00:02:36.070 --> 00:02:39.030
By automating these routines,

48
00:02:39.030 --> 00:02:41.030
your culture will drive ways

49
00:02:41.030 --> 00:02:45.030
to make these automated responses even more efficient,

50
00:02:45.030 --> 00:02:50.080
which in turn gives you better responses to system events.

51
00:02:50.080 --> 00:02:54.000
Consider also the complexity of deployments

52
00:02:54.000 --> 00:02:57.020
in a microservices architecture.

53
00:02:57.020 --> 00:03:00.090
Managing the deployment and releases of code manually

54
00:03:00.090 --> 00:03:03.090
becomes impossible in this style.

55
00:03:03.090 --> 00:03:08.090
Again, we discussed CICD as a requirement of microservices

56
00:03:08.090 --> 00:03:10.060
for a reason.

57
00:03:10.060 --> 00:03:13.040
Automation of deployments and testing

58
00:03:13.040 --> 00:03:16.070
improves the agility of the team.

59
00:03:16.070 --> 00:03:19.040
The operational events that are manual

60
00:03:19.040 --> 00:03:23.040
in a traditional model are improved with automation

61
00:03:23.040 --> 00:03:26.060
which in turn provides more throughput

62
00:03:26.060 --> 00:03:29.000
from the team as a whole.

63
00:03:29.000 --> 00:03:32.080
Ultimately, much of what we have discussed in this course

64
00:03:32.080 --> 00:03:35.010
has been about culture.

65
00:03:35.010 --> 00:03:39.040
We want to maximize the positives like scaling, agility,

66
00:03:39.040 --> 00:03:42.080
and the ability to globally distribute our system.

67
00:03:42.080 --> 00:03:45.090
To do that, we have to automate.

68
00:03:45.090 --> 00:03:48.060
We also need to mitigate the latency

69
00:03:48.060 --> 00:03:53.000
and complexity of deployments as well as general operations.

70
00:03:53.000 --> 00:03:57.030
Once again, to do that, we have to automate.

71
00:03:57.030 --> 00:03:58.080
The devops culture

72
00:03:58.080 --> 00:04:03.020
breeds a more successful microservices platform

73
00:04:03.020 --> 00:04:06.020
and a more successful platform

74
00:04:06.020 --> 00:04:08.090
breeds a deeper devops culture.

75
00:04:08.090 --> 00:04:11.030
They go hand in hand for a reason

76
00:04:11.030 --> 00:04:15.000
so don't fight it, embrace it.

