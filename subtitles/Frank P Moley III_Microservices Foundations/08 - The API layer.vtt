WEBVTT
1
00:00:00.050 --> 00:00:03.050
- The API layer is a common component

2
00:00:03.050 --> 00:00:06.020
of a microservices architecture.

3
00:00:06.020 --> 00:00:10.000
But, I want to start with a warning.

4
00:00:10.000 --> 00:00:13.090
If you find your API layer is doing transformations

5
00:00:13.090 --> 00:00:15.090
or executing logic,

6
00:00:15.090 --> 00:00:17.060
you're doing it wrong

7
00:00:17.060 --> 00:00:19.050
and you will eventually get yourself

8
00:00:19.050 --> 00:00:25.080
into the same situation as exists for people in SOA.

9
00:00:25.080 --> 00:00:27.050
I know there are products that allow you

10
00:00:27.050 --> 00:00:31.030
to do transformative operations in an API layer.

11
00:00:31.030 --> 00:00:33.020
But I highly encourage you

12
00:00:33.020 --> 00:00:36.060
to not walk down that path.

13
00:00:36.060 --> 00:00:38.050
My experience tells me

14
00:00:38.050 --> 00:00:40.070
that this will never end well

15
00:00:40.070 --> 00:00:43.050
for the overall health of your system,

16
00:00:43.050 --> 00:00:48.010
or for the mental health of your development staff.

17
00:00:48.010 --> 00:00:50.050
That being said, let's talk some

18
00:00:50.050 --> 00:00:54.030
about what the API layer really is about.

19
00:00:54.030 --> 00:00:56.020
We've talked now a couple of times

20
00:00:56.020 --> 00:00:59.020
where the API layer is of a huge benefit

21
00:00:59.020 --> 00:01:01.060
to the overall system health.

22
00:01:01.060 --> 00:01:04.020
We're now going to get a little deeper.

23
00:01:04.020 --> 00:01:07.060
In a pure microservices architecture,

24
00:01:07.060 --> 00:01:10.050
an API layer is nothing more

25
00:01:10.050 --> 00:01:12.070
than an aggregated proxy

26
00:01:12.070 --> 00:01:15.040
of all of your service offerings.

27
00:01:15.040 --> 00:01:19.040
The API layer is used to shield the outside world

28
00:01:19.040 --> 00:01:23.010
or your clients from knowing the structure,

29
00:01:23.010 --> 00:01:27.010
organization, or even what exact service

30
00:01:27.010 --> 00:01:30.010
is exposing a specific operation

31
00:01:30.010 --> 00:01:33.060
which is actually very useful.

32
00:01:33.060 --> 00:01:38.080
The API layer provides a standardized proxy interface

33
00:01:38.080 --> 00:01:41.040
that will expose whatever service endpoints

34
00:01:41.040 --> 00:01:46.070
and API operations we configure it to expose.

35
00:01:46.070 --> 00:01:48.030
We need to be careful here

36
00:01:48.030 --> 00:01:51.020
that we aren't transforming the API's.

37
00:01:51.020 --> 00:01:52.070
There's a better way to do that

38
00:01:52.070 --> 00:01:56.000
for say a mobile client versus a desktop client.

39
00:01:56.000 --> 00:01:59.050
The API layer is, in my opinion,

40
00:01:59.050 --> 00:02:02.060
a pure proxy.

41
00:02:02.060 --> 00:02:04.030
Consider our use cases around

42
00:02:04.030 --> 00:02:06.090
scaling up our system under load

43
00:02:06.090 --> 00:02:10.000
or scaling down under a lull.

44
00:02:10.000 --> 00:02:13.000
If our service consumption model is one

45
00:02:13.000 --> 00:02:16.080
in which we are bound directly to the hosts,

46
00:02:16.080 --> 00:02:18.090
managing this infrastructure

47
00:02:18.090 --> 00:02:21.030
becomes extremely painful,

48
00:02:21.030 --> 00:02:24.070
especially across multiple data centers.

49
00:02:24.070 --> 00:02:27.020
Now, there are some service discovery tools

50
00:02:27.020 --> 00:02:29.050
that will aid in this process,

51
00:02:29.050 --> 00:02:31.020
but in my opinion,

52
00:02:31.020 --> 00:02:35.040
these are really nothing more than a synthetic API layer.

53
00:02:35.040 --> 00:02:37.020
In this scaling model

54
00:02:37.020 --> 00:02:40.030
the API layer isolates the client

55
00:02:40.030 --> 00:02:43.080
from needing to know the direct IP address and port

56
00:02:43.080 --> 00:02:46.020
of the service it's calling.

57
00:02:46.020 --> 00:02:48.000
From the API layer,

58
00:02:48.000 --> 00:02:51.000
we're calling hundreds of different endpoints

59
00:02:51.000 --> 00:02:52.090
without really knowing which service

60
00:02:52.090 --> 00:02:56.030
produces the endpoint itself.

61
00:02:56.030 --> 00:02:58.060
Let's consider another use case

62
00:02:58.060 --> 00:03:01.060
and that is isolation from change.

63
00:03:01.060 --> 00:03:04.070
Regardless of whether we are strangling a monolith,

64
00:03:04.070 --> 00:03:07.010
or refactoring a system that was developed

65
00:03:07.010 --> 00:03:10.040
in an over-granular fashion.

66
00:03:10.040 --> 00:03:14.050
If our first step is to implement an API layer,

67
00:03:14.050 --> 00:03:18.080
clients will have minimal, if any, changes

68
00:03:18.080 --> 00:03:21.070
to make in response to underlying refactoring

69
00:03:21.070 --> 00:03:24.000
of the code base.

70
00:03:24.000 --> 00:03:28.050
If every service is exposed through an API proxy layer,

71
00:03:28.050 --> 00:03:30.050
you can break the services up

72
00:03:30.050 --> 00:03:34.010
or aggregate them and simply have the proxy

73
00:03:34.010 --> 00:03:36.010
configuration changed

74
00:03:36.010 --> 00:03:38.090
to match the development operations.

75
00:03:38.090 --> 00:03:42.070
The clients will not be impacted, period,

76
00:03:42.070 --> 00:03:46.040
unless, of course, you make a breaking change.

77
00:03:46.040 --> 00:03:50.040
I previously said not to make breaking API changes.

78
00:03:50.040 --> 00:03:53.000
Instead to leverage versioning.

79
00:03:53.000 --> 00:03:58.010
An API layer can assist you in versioning operations.

80
00:03:58.010 --> 00:04:00.010
Now, I'm not going to be prescriptive

81
00:04:00.010 --> 00:04:03.050
about how to handle version changes in your system,

82
00:04:03.050 --> 00:04:06.070
because there's more than one valid way.

83
00:04:06.070 --> 00:04:11.000
But, your API layer can help you

84
00:04:11.000 --> 00:04:14.050
by directing to the legacy versions of a service

85
00:04:14.050 --> 00:04:17.090
without forcing a client to make changes.

86
00:04:17.090 --> 00:04:21.080
Even if the deployment model makes a change.

87
00:04:21.080 --> 00:04:24.060
While the API layer is usually denoted

88
00:04:24.060 --> 00:04:27.050
as being completely optional,

89
00:04:27.050 --> 00:04:31.020
I find that it's one of the most crucial components

90
00:04:31.020 --> 00:04:33.070
if you want to reduce the overall impact

91
00:04:33.070 --> 00:04:35.090
of moving to this architecture model.

92
00:04:35.090 --> 00:04:39.000
So please consider it.

