WEBVTT
1
00:00:00.050 --> 00:00:03.010
- One of the first questions I am always asked

2
00:00:03.010 --> 00:00:05.060
when discussing microservices

3
00:00:05.060 --> 00:00:09.000
is what makes a microservice just that?

4
00:00:09.000 --> 00:00:12.060
And in reality, it's a compound answer.

5
00:00:12.060 --> 00:00:14.050
I want to start by stressing

6
00:00:14.050 --> 00:00:18.020
that it isn't as much about the size of the service,

7
00:00:18.020 --> 00:00:22.060
but the operation of the service that really matters.

8
00:00:22.060 --> 00:00:26.030
There isn't a finite requirement on size.

9
00:00:26.030 --> 00:00:29.010
Before we get into the size question, however,

10
00:00:29.010 --> 00:00:32.020
let me answer one of the easiest parts of the question,

11
00:00:32.020 --> 00:00:36.010
and that is how the services communicate.

12
00:00:36.010 --> 00:00:38.080
In a microservices architecture,

13
00:00:38.080 --> 00:00:41.050
all communication between services

14
00:00:41.050 --> 00:00:45.030
leverages REST over HTTP.

15
00:00:45.030 --> 00:00:49.000
There are other methods like event-based communications.

16
00:00:49.000 --> 00:00:53.070
However, the intra-service calls are all REST based.

17
00:00:53.070 --> 00:00:56.010
This is a powerful proposition,

18
00:00:56.010 --> 00:00:59.080
especially for large organizations.

19
00:00:59.080 --> 00:01:03.070
Consider a company the size of Amazon or Netflix.

20
00:01:03.070 --> 00:01:05.040
Both of these companies leverage

21
00:01:05.040 --> 00:01:08.060
microservices-based architectures.

22
00:01:08.060 --> 00:01:12.040
Each of their teams can build software as they see fit,

23
00:01:12.040 --> 00:01:16.090
as long as the services are exposed via REST.

24
00:01:16.090 --> 00:01:21.010
Each team can them consume the services of another team

25
00:01:21.010 --> 00:01:25.010
because they all communicate in a common way.

26
00:01:25.010 --> 00:01:27.000
Now I hope you can see the need

27
00:01:27.000 --> 00:01:30.010
to unify service documentation.

28
00:01:30.010 --> 00:01:34.070
There is no standard way of documenting RESTful services

29
00:01:34.070 --> 00:01:38.000
like we had with WSDL in the SOAP world,

30
00:01:38.000 --> 00:01:40.000
so developing common means

31
00:01:40.000 --> 00:01:42.070
of service documentation is critical,

32
00:01:42.070 --> 00:01:45.090
especially in large organizations.

33
00:01:45.090 --> 00:01:50.010
Along with documentation is service discovery,

34
00:01:50.010 --> 00:01:53.090
but we will talk more on that later on.

35
00:01:53.090 --> 00:01:57.030
So let's return to our size conversation.

36
00:01:57.030 --> 00:01:59.030
In a microservices world,

37
00:01:59.030 --> 00:02:03.060
size isn't as critical as operations.

38
00:02:03.060 --> 00:02:08.040
A microservice handles one set of related functions

39
00:02:08.040 --> 00:02:12.080
with little or no cross-domain operations.

40
00:02:12.080 --> 00:02:14.010
This is where concepts

41
00:02:14.010 --> 00:02:17.040
like domain-driven design come into play,

42
00:02:17.040 --> 00:02:20.000
and we will spend a significant amount of time

43
00:02:20.000 --> 00:02:23.090
talking about domains in a little bit.

44
00:02:23.090 --> 00:02:26.030
I like to use the analogy of good

45
00:02:26.030 --> 00:02:29.040
object-oriented programming practices

46
00:02:29.040 --> 00:02:32.040
when describing microservices.

47
00:02:32.040 --> 00:02:35.070
In a well-defined OOP space,

48
00:02:35.070 --> 00:02:39.010
a class is built to handle one type of thing

49
00:02:39.010 --> 00:02:42.060
and provide the operations for that type.

50
00:02:42.060 --> 00:02:45.040
In a microservices architecture,

51
00:02:45.040 --> 00:02:50.010
a service operates on a well-defined domain.

52
00:02:50.010 --> 00:02:52.060
Operations aren't defined on data objects

53
00:02:52.060 --> 00:02:54.040
or business objects.

54
00:02:54.040 --> 00:02:58.000
Instead, it's the domain as a whole.

55
00:02:58.000 --> 00:03:01.000
Now you can and probably should

56
00:03:01.000 --> 00:03:05.030
provide very low-level, data-focused services

57
00:03:05.030 --> 00:03:08.050
in a microservices architecture.

58
00:03:08.050 --> 00:03:14.020
Often, these services expose domain-specific CRUD operations

59
00:03:14.020 --> 00:03:16.010
on the domain object,

60
00:03:16.010 --> 00:03:18.090
but that domain can span

61
00:03:18.090 --> 00:03:21.080
multiple data objects.

62
00:03:21.080 --> 00:03:23.090
You can also build a service

63
00:03:23.090 --> 00:03:27.080
to handle a set of related business processes

64
00:03:27.080 --> 00:03:31.070
that may spin one or more domains.

65
00:03:31.070 --> 00:03:34.000
The answer here, to the size question,

66
00:03:34.000 --> 00:03:37.060
should be domain operation-focused.

67
00:03:37.060 --> 00:03:42.000
In my opinion, this is one of the hardest parts to learn.

68
00:03:42.000 --> 00:03:44.070
All too often, when a company or team

69
00:03:44.070 --> 00:03:47.070
moves into a microservices architecture,

70
00:03:47.070 --> 00:03:51.060
they build their services either too fine grained

71
00:03:51.060 --> 00:03:54.010
or not fine grained enough.

72
00:03:54.010 --> 00:03:57.040
Usually, however, it's the former.

73
00:03:57.040 --> 00:03:59.000
This is a common occurrence.

74
00:03:59.000 --> 00:04:03.020
And quickly, the distribution tax will hit you hard

75
00:04:03.020 --> 00:04:06.080
as the latency of calls really kicks in.

76
00:04:06.080 --> 00:04:09.060
As you start building these services,

77
00:04:09.060 --> 00:04:12.020
don't be afraid to refactor.

78
00:04:12.020 --> 00:04:15.080
And my hope is that, by the end of this course,

79
00:04:15.080 --> 00:04:19.030
you will be more willing to experiment.

80
00:04:19.030 --> 00:04:22.000
The ability to experiment comes

81
00:04:22.000 --> 00:04:24.090
from the size of these services.

82
00:04:24.090 --> 00:04:28.050
Yes, size isn't part of the answer,

83
00:04:28.050 --> 00:04:30.040
but logic will tell you

84
00:04:30.040 --> 00:04:34.020
that, as you start decomposing these services down,

85
00:04:34.020 --> 00:04:37.020
they become smaller in size.

86
00:04:37.020 --> 00:04:39.090
Smaller services build faster,

87
00:04:39.090 --> 00:04:42.000
have fewer test scenarios,

88
00:04:42.000 --> 00:04:45.020
and deploy and start up much quicker.

89
00:04:45.020 --> 00:04:47.020
All of these aid in the willingness

90
00:04:47.020 --> 00:04:50.040
to experiment and make mistakes

91
00:04:50.040 --> 00:04:53.060
because you can fix those mistakes much faster

92
00:04:53.060 --> 00:04:57.000
in smaller components of code.

