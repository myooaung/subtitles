WEBVTT
1
00:00:00.050 --> 00:00:02.030
- Let me just start by saying,

2
00:00:02.030 --> 00:00:05.070
I have done distributed transactions professionally

3
00:00:05.070 --> 00:00:08.060
and not only were they painful to get right,

4
00:00:08.060 --> 00:00:11.070
they were also extremely hard to manage.

5
00:00:11.070 --> 00:00:13.050
I do understand the desire,

6
00:00:13.050 --> 00:00:15.070
especially in a SOA model,

7
00:00:15.070 --> 00:00:18.060
to drive for distributed transactions,

8
00:00:18.060 --> 00:00:22.010
but this really should be considered a nonstarter

9
00:00:22.010 --> 00:00:25.010
in a microservices architecture.

10
00:00:25.010 --> 00:00:27.090
Traditional systems aimed for transactions

11
00:00:27.090 --> 00:00:30.020
that were ACID compliant.

12
00:00:30.020 --> 00:00:34.080
ACID, or Atomic, Consistent, Isolated,

13
00:00:34.080 --> 00:00:37.090
and Durable, is the concept of making sure

14
00:00:37.090 --> 00:00:41.070
that you have data integrity across multiple tables

15
00:00:41.070 --> 00:00:45.020
in a traditional relational database.

16
00:00:45.020 --> 00:00:48.080
An atomic operation is one that has the properties

17
00:00:48.080 --> 00:00:51.000
of either succeeding completely

18
00:00:51.000 --> 00:00:56.010
or failing completely with no gray area in between.

19
00:00:56.010 --> 00:00:58.090
A consistent operation is one

20
00:00:58.090 --> 00:01:01.070
that guarantees all of the constraints

21
00:01:01.070 --> 00:01:05.050
or data model rules will be enforced.

22
00:01:05.050 --> 00:01:07.060
An isolated operation is one

23
00:01:07.060 --> 00:01:11.000
in which the visibility rules are well-defined,

24
00:01:11.000 --> 00:01:15.010
such that no other transaction can read data

25
00:01:15.010 --> 00:01:18.040
that is not in the correct state.

26
00:01:18.040 --> 00:01:22.050
A durable operation is one that, once completed,

27
00:01:22.050 --> 00:01:26.030
will be guaranteed to be in the datastore permanently

28
00:01:26.030 --> 00:01:29.000
until it is modified in the future.

29
00:01:29.000 --> 00:01:31.020
These properties work beautifully

30
00:01:31.020 --> 00:01:33.060
in a monolithic application

31
00:01:33.060 --> 00:01:36.040
where there is no distribution.

32
00:01:36.040 --> 00:01:40.020
In a SOA model, they become painful.

33
00:01:40.020 --> 00:01:44.070
In a microservices model, they simply don't exist.

34
00:01:44.070 --> 00:01:47.040
In a microservices architecture,

35
00:01:47.040 --> 00:01:51.050
we strive for BASE instead of ACID.

36
00:01:51.050 --> 00:01:56.030
In a BASE model, we strive for eventual consistency

37
00:01:56.030 --> 00:01:59.090
across the highly available distributed platform,

38
00:01:59.090 --> 00:02:04.020
which is the exact use case a microservices architecture

39
00:02:04.020 --> 00:02:06.000
aims to work in.

40
00:02:06.000 --> 00:02:08.080
In this eventual consistency model,

41
00:02:08.080 --> 00:02:12.010
we are not guaranteed immediate, atomic,

42
00:02:12.010 --> 00:02:15.020
or isolated consistent transactions.

43
00:02:15.020 --> 00:02:18.090
Instead, we aim for a situation where,

44
00:02:18.090 --> 00:02:21.060
assuming the data isn't modified again,

45
00:02:21.060 --> 00:02:25.020
we will eventually achieve the end state in all

46
00:02:25.020 --> 00:02:28.090
of the nodes across our distributed datastore.

47
00:02:28.090 --> 00:02:32.080
ACID is, in all honestly, a much easier paradigm

48
00:02:32.080 --> 00:02:36.080
to work in as a developer or an architect.

49
00:02:36.080 --> 00:02:40.060
You know that when you read or write data,

50
00:02:40.060 --> 00:02:43.020
that you are guaranteed of its state

51
00:02:43.020 --> 00:02:45.090
by the underlying datastore.

52
00:02:45.090 --> 00:02:50.020
This guarantee allows you complete control

53
00:02:50.020 --> 00:02:53.000
of how to handle high-throughput systems

54
00:02:53.000 --> 00:02:55.070
where data changes occur often

55
00:02:55.070 --> 00:02:58.080
and must be immediately available.

56
00:02:58.080 --> 00:03:01.060
In a microservices architecture,

57
00:03:01.060 --> 00:03:05.080
you need to identify where you truly need ACID transactions

58
00:03:05.080 --> 00:03:10.060
and wrap service boundaries around those operations.

59
00:03:10.060 --> 00:03:13.080
You cannot leverage any other model

60
00:03:13.080 --> 00:03:18.020
with any real success in this type of architecture,

61
00:03:18.020 --> 00:03:20.080
but before you just go out

62
00:03:20.080 --> 00:03:22.080
and make everything transactional,

63
00:03:22.080 --> 00:03:25.080
and create a system of monoliths,

64
00:03:25.080 --> 00:03:32.050
I urge you to evaluate if you really need ACID transactions.

65
00:03:32.050 --> 00:03:35.090
More often than not, you may find that

66
00:03:35.090 --> 00:03:38.060
what people perceive as a need

67
00:03:38.060 --> 00:03:45.010
for immediacy is instead just an unnatural expectation.

68
00:03:45.010 --> 00:03:48.080
We often expect that users need immediate access

69
00:03:48.080 --> 00:03:52.010
to the data when in reality,

70
00:03:52.010 --> 00:03:54.070
they never view the data immediately

71
00:03:54.070 --> 00:03:57.080
and we can solve the same use case

72
00:03:57.080 --> 00:04:00.050
by directing them to some other place

73
00:04:00.050 --> 00:04:03.090
if they really need to view that data.

74
00:04:03.090 --> 00:04:07.000
Now, as I mentioned, there are times

75
00:04:07.000 --> 00:04:10.050
when you do really need ACID transactions.

76
00:04:10.050 --> 00:04:13.000
Take for a moment a banking system

77
00:04:13.000 --> 00:04:15.070
where debits and credits must occur for,

78
00:04:15.070 --> 00:04:20.020
say, a balance transfer in a single transaction.

79
00:04:20.020 --> 00:04:22.080
In these use cases, you will need

80
00:04:22.080 --> 00:04:25.040
to model your domains and services

81
00:04:25.040 --> 00:04:29.090
to continue to allow these transactions to be atomic,

82
00:04:29.090 --> 00:04:32.070
but there may be other places,

83
00:04:32.070 --> 00:04:34.070
say, applying for a loan,

84
00:04:34.070 --> 00:04:38.090
that already have some level of asynchronous operation.

85
00:04:38.090 --> 00:04:43.070
These can benefit from a form of eventual consistency.

86
00:04:43.070 --> 00:04:46.060
Now, there are ways to design a system

87
00:04:46.060 --> 00:04:48.090
for eventual consistency,

88
00:04:48.090 --> 00:04:51.040
including appropriate role backs

89
00:04:51.040 --> 00:04:54.060
that will help you in this process.

90
00:04:54.060 --> 00:04:56.080
And while we discuss some of the tenets

91
00:04:56.080 --> 00:04:58.040
of those designs,

92
00:04:58.040 --> 00:05:02.030
it really is outside the scope of this course.

93
00:05:02.030 --> 00:05:04.090
There are plenty of good materials online

94
00:05:04.090 --> 00:05:07.080
and other resources available when you're ready

95
00:05:07.080 --> 00:05:11.050
to tackle these problems in the real world.

96
00:05:11.050 --> 00:05:16.030
Aim for eventual consistency in as many places as possible

97
00:05:16.030 --> 00:05:21.000
and it will improve system health as a whole.

