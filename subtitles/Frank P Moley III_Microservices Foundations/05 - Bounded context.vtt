WEBVTT
1
00:00:00.050 --> 00:00:03.060
- When deciding how to size your microservices,

2
00:00:03.060 --> 00:00:08.030
one common strategy is to leverage domain-driven design

3
00:00:08.030 --> 00:00:12.010
and as such to focus on the bounded context

4
00:00:12.010 --> 00:00:15.080
when decomposing a large multi-domain system

5
00:00:15.080 --> 00:00:18.080
into individual services.

6
00:00:18.080 --> 00:00:22.030
Understanding how to properly decompose an application

7
00:00:22.030 --> 00:00:26.070
for a microservices implementation is not an easy task

8
00:00:26.070 --> 00:00:30.010
and this design pattern can help you.

9
00:00:30.010 --> 00:00:34.050
The core concept is to investigate your working system

10
00:00:34.050 --> 00:00:36.050
and determine the domains.

11
00:00:36.050 --> 00:00:40.040
Then, focus on the boundaries of those domains

12
00:00:40.040 --> 00:00:43.030
as well as the inner workings of them.

13
00:00:43.030 --> 00:00:47.050
Use that knowledge to break your services up.

14
00:00:47.050 --> 00:00:51.070
Most of the early mistakes in migrating an existing monolith

15
00:00:51.070 --> 00:00:54.040
into a microservices architecture

16
00:00:54.040 --> 00:00:57.080
comes from either making your services too granular

17
00:00:57.080 --> 00:01:00.030
or not granular enough.

18
00:01:00.030 --> 00:01:04.000
The key to finding the sweet spot on granularity

19
00:01:04.000 --> 00:01:06.070
is to leverage domain-driven design,

20
00:01:06.070 --> 00:01:11.000
but to do so in an educated manner first.

21
00:01:11.000 --> 00:01:14.040
So let's talk about determining the bounded context

22
00:01:14.040 --> 00:01:16.040
for your domains.

23
00:01:16.040 --> 00:01:20.080
The gut reaction may be to just break your data domains up

24
00:01:20.080 --> 00:01:22.080
and focus on that alone,

25
00:01:22.080 --> 00:01:27.090
but you run the real risk of having latency creep up

26
00:01:27.090 --> 00:01:29.080
when you do this.

27
00:01:29.080 --> 00:01:32.020
You really need to spend some time

28
00:01:32.020 --> 00:01:35.040
and analyze the traffic patterns in your code

29
00:01:35.040 --> 00:01:40.010
based on real-world use cases of your system.

30
00:01:40.010 --> 00:01:44.060
Once you identify the actual use cases of your system,

31
00:01:44.060 --> 00:01:49.060
then you can start evaluating the interaction boundaries.

32
00:01:49.060 --> 00:01:53.010
Part of the goal in building on your bounded contexts

33
00:01:53.010 --> 00:01:58.040
is to reduce your cross-domain calls where appropriate.

34
00:01:58.040 --> 00:02:00.090
Say for instance you have a customer domain

35
00:02:00.090 --> 00:02:03.040
that is fairly well-defined,

36
00:02:03.040 --> 00:02:08.020
but you also have a user domain for your login information.

37
00:02:08.020 --> 00:02:09.090
As you look at traffic patterns,

38
00:02:09.090 --> 00:02:14.000
you note that every time your user domain is called,

39
00:02:14.000 --> 00:02:16.040
it calls your customer domain.

40
00:02:16.040 --> 00:02:17.080
Now this would be an argument

41
00:02:17.080 --> 00:02:20.000
for putting both of these domains

42
00:02:20.000 --> 00:02:22.070
into a single bounded context,

43
00:02:22.070 --> 00:02:25.080
but you may need to investigate a little deeper.

44
00:02:25.080 --> 00:02:28.020
What if there are only 1% of the calls

45
00:02:28.020 --> 00:02:31.070
to your customer domain from your user domain?

46
00:02:31.070 --> 00:02:33.040
And at the same time,

47
00:02:33.040 --> 00:02:35.070
there is data in your user domain

48
00:02:35.070 --> 00:02:38.080
that needs to be secured in a different manner.

49
00:02:38.080 --> 00:02:41.040
These may be sufficient arguments

50
00:02:41.040 --> 00:02:45.060
for separating them into different bounded contexts.

51
00:02:45.060 --> 00:02:48.010
There is no clear-cut pattern here,

52
00:02:48.010 --> 00:02:51.030
but once again knowledge is key.

53
00:02:51.030 --> 00:02:52.040
So you may have a feeling

54
00:02:52.040 --> 00:02:56.030
about why bounded context matter at this point.

55
00:02:56.030 --> 00:03:00.030
Latency is such a pain point in microservices.

56
00:03:00.030 --> 00:03:04.020
There is no real need to add extra calls

57
00:03:04.020 --> 00:03:06.080
when they make zero sense.

58
00:03:06.080 --> 00:03:08.050
By evaluating the domains

59
00:03:08.050 --> 00:03:11.060
and building strong bounded contexts,

60
00:03:11.060 --> 00:03:14.060
you can reduce the number of calls made

61
00:03:14.060 --> 00:03:17.000
in your system as a whole.

62
00:03:17.000 --> 00:03:20.070
By reducing the distribution tax on your system,

63
00:03:20.070 --> 00:03:25.010
you will have better overall system health which in turn

64
00:03:25.010 --> 00:03:29.050
will make your microservices implementation more successful.

65
00:03:29.050 --> 00:03:32.020
One other reason to have strong definitions

66
00:03:32.020 --> 00:03:34.030
of the bounded contexts

67
00:03:34.030 --> 00:03:37.080
is for better contracts between services.

68
00:03:37.080 --> 00:03:41.070
With well-defined boundaries of your contexts,

69
00:03:41.070 --> 00:03:46.020
you get a self-discovery of your system as a whole.

70
00:03:46.020 --> 00:03:50.020
Because you have taken the time to build out these domains

71
00:03:50.020 --> 00:03:52.080
and structured them precisely,

72
00:03:52.080 --> 00:03:56.000
a consumer of a service on your system

73
00:03:56.000 --> 00:03:57.090
should be able to determine

74
00:03:57.090 --> 00:04:01.000
the correct location to search for the services

75
00:04:01.000 --> 00:04:03.030
they need to consume.

76
00:04:03.030 --> 00:04:07.060
So while this process is aimed at improving performance

77
00:04:07.060 --> 00:04:09.080
on the system as a whole,

78
00:04:09.080 --> 00:04:12.050
it can also improve your agility

79
00:04:12.050 --> 00:04:15.040
and speed in your development processes

80
00:04:15.040 --> 00:04:19.000
which every team ultimately strives for.

