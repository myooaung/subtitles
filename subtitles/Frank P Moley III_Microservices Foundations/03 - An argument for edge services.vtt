WEBVTT
1
00:00:00.050 --> 00:00:03.020
- If you remember when we discussed SOA,

2
00:00:03.020 --> 00:00:06.050
the BPEL layer allows you to expose various services

3
00:00:06.050 --> 00:00:08.080
over a common BUS.

4
00:00:08.080 --> 00:00:11.080
This BUS brought about significant problems

5
00:00:11.080 --> 00:00:13.060
in managing your code

6
00:00:13.060 --> 00:00:16.090
as it often became bloated with code itself

7
00:00:16.090 --> 00:00:20.010
and that bloat decrease the ability

8
00:00:20.010 --> 00:00:22.070
to manage the infrastructure.

9
00:00:22.070 --> 00:00:25.010
In a microservices architecture,

10
00:00:25.010 --> 00:00:28.000
you often leverage an API proxy

11
00:00:28.000 --> 00:00:30.050
to hide your service implementations

12
00:00:30.050 --> 00:00:33.010
behind a common proxy layer.

13
00:00:33.010 --> 00:00:36.080
But again, this layer can become bloated

14
00:00:36.080 --> 00:00:39.090
if you start transforming your service offerings

15
00:00:39.090 --> 00:00:41.070
based on client needs,

16
00:00:41.070 --> 00:00:46.000
which is a common approach many are tempted to take.

17
00:00:46.000 --> 00:00:46.090
With all of this,

18
00:00:46.090 --> 00:00:51.020
you may ask how you can solve multiple client needs

19
00:00:51.020 --> 00:00:54.040
for underlying services and I'll use this

20
00:00:54.040 --> 00:00:59.020
as a chance to discuss the need for edge services.

21
00:00:59.020 --> 00:01:02.050
There really are two distinct types of edge services

22
00:01:02.050 --> 00:01:06.080
in my view and we will talk about them separately.

23
00:01:06.080 --> 00:01:12.040
The first and most common is the outbound edge service.

24
00:01:12.040 --> 00:01:17.020
These services are used to expose your client-specific needs

25
00:01:17.020 --> 00:01:19.060
to the outside world.

26
00:01:19.060 --> 00:01:21.000
The other edge service,

27
00:01:21.000 --> 00:01:24.050
often called inbound or translation services,

28
00:01:24.050 --> 00:01:26.040
are more important to me

29
00:01:26.040 --> 00:01:28.090
in that they are designed to abstract you

30
00:01:28.090 --> 00:01:31.080
from third party dependencies.

31
00:01:31.080 --> 00:01:36.000
Let's talk about the inbound edge services first.

32
00:01:36.000 --> 00:01:37.030
Think for a moment

33
00:01:37.030 --> 00:01:41.000
about the third party systems you contract with

34
00:01:41.000 --> 00:01:45.010
and imagine how often those contracts change.

35
00:01:45.010 --> 00:01:47.070
I want to talk about a real use case

36
00:01:47.070 --> 00:01:51.020
and that is an email marketing scenario.

37
00:01:51.020 --> 00:01:56.010
Your company most likely leverages a third party send system

38
00:01:56.010 --> 00:01:59.030
to handle outgoing email communications

39
00:01:59.030 --> 00:02:03.010
so you don't thrash your internal email system.

40
00:02:03.010 --> 00:02:06.060
Sometimes these communications are transactional

41
00:02:06.060 --> 00:02:10.000
like an order fulfillment or a status notification,

42
00:02:10.000 --> 00:02:14.000
but sometimes these communications are marketing based.

43
00:02:14.000 --> 00:02:17.020
Either way, you will have some set of content

44
00:02:17.020 --> 00:02:19.060
and you will leverage these systems

45
00:02:19.060 --> 00:02:24.010
to simply handle the SMTP operations.

46
00:02:24.010 --> 00:02:26.070
When you consume these services,

47
00:02:26.070 --> 00:02:29.040
you can either call the APIs directly

48
00:02:29.040 --> 00:02:33.040
or build an edge service that you own

49
00:02:33.040 --> 00:02:36.020
to interact with the third party.

50
00:02:36.020 --> 00:02:39.070
If you build the abstraction layer or edge service,

51
00:02:39.070 --> 00:02:43.090
you control not only the vendor API changes,

52
00:02:43.090 --> 00:02:47.090
but also provide yourself a much easier path

53
00:02:47.090 --> 00:02:50.090
for vendor replacement if the need arises.

54
00:02:50.090 --> 00:02:53.090
And hey, most likely it will.

55
00:02:53.090 --> 00:02:58.080
After all, technology and pricing changes like crazy.

56
00:02:58.080 --> 00:03:01.070
When you build an abstraction layer like this,

57
00:03:01.070 --> 00:03:04.050
you minimize the impact of changes

58
00:03:04.050 --> 00:03:09.010
which is critical to the health of your system as a whole.

59
00:03:09.010 --> 00:03:13.030
Imagine a breaking API change from the vendor.

60
00:03:13.030 --> 00:03:17.050
Now, you can roll that change out in one service

61
00:03:17.050 --> 00:03:19.060
or hundreds of them.

62
00:03:19.060 --> 00:03:22.020
I prefer the single service.

63
00:03:22.020 --> 00:03:25.020
It is true that you have now introduced

64
00:03:25.020 --> 00:03:29.030
one more hop in every call to the remote service,

65
00:03:29.030 --> 00:03:33.090
but you can manage that through asynchronous operations

66
00:03:33.090 --> 00:03:37.080
especially on a service like email sending.

67
00:03:37.080 --> 00:03:40.010
Even if you cannot manage the latency

68
00:03:40.010 --> 00:03:42.060
through asynchronous operations,

69
00:03:42.060 --> 00:03:45.060
the reduction of code changes alone

70
00:03:45.060 --> 00:03:48.010
makes this a benefit.

71
00:03:48.010 --> 00:03:52.000
Now let's talk about the outbound edge service use case.

72
00:03:52.000 --> 00:03:55.050
Not every client that consumes your service

73
00:03:55.050 --> 00:03:58.050
needs the same data payload.

74
00:03:58.050 --> 00:04:03.030
Mobile scenarios tend to thrive on smaller payloads of data,

75
00:04:03.030 --> 00:04:06.010
but you need a place to manage this.

76
00:04:06.010 --> 00:04:09.020
You could manage it in your proxy layer

77
00:04:09.020 --> 00:04:11.050
or through an API gateway,

78
00:04:11.050 --> 00:04:15.020
but I hope you understand how bad this can be.

79
00:04:15.020 --> 00:04:18.060
If, however, you manage your own edge services

80
00:04:18.060 --> 00:04:23.010
specific for clients and simply proxy them,

81
00:04:23.010 --> 00:04:25.080
you get several key benefits.

82
00:04:25.080 --> 00:04:28.020
The first is that you are managing

83
00:04:28.020 --> 00:04:30.080
the transformations in code

84
00:04:30.080 --> 00:04:34.070
similar to all the other code in your system.

85
00:04:34.070 --> 00:04:39.050
This immediately makes managing this code much easier.

86
00:04:39.050 --> 00:04:42.070
You also gain another key benefit.

87
00:04:42.070 --> 00:04:44.010
Think back a few videos ago

88
00:04:44.010 --> 00:04:46.080
when I talked about how critical it was

89
00:04:46.080 --> 00:04:52.000
to make your API changes passive or to leverage versioning.

90
00:04:52.000 --> 00:04:55.020
This is even more critical for your clients

91
00:04:55.020 --> 00:04:58.070
especially those that you cannot immediately update

92
00:04:58.070 --> 00:05:01.040
like mobile and desktop clients.

93
00:05:01.040 --> 00:05:03.070
By building out edge services,

94
00:05:03.070 --> 00:05:08.010
you can continue to provide them a consistent interface

95
00:05:08.010 --> 00:05:11.080
even if the underlying services change.

96
00:05:11.080 --> 00:05:16.000
Designing your services so they are isolated from changes

97
00:05:16.000 --> 00:05:18.040
cannot be underestimated.

98
00:05:18.040 --> 00:05:20.000
Spend a little extra effort

99
00:05:20.000 --> 00:05:22.080
when designing and coding for these use cases

100
00:05:22.080 --> 00:05:26.000
and you will reap the rewards downstream.

