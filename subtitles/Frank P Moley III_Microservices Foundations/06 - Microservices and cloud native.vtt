WEBVTT
1
00:00:00.050 --> 00:00:03.060
- Often, when we talk about microservices,

2
00:00:03.060 --> 00:00:06.000
we're talking about cloud native.

3
00:00:06.000 --> 00:00:08.030
But that isn't always the case.

4
00:00:08.030 --> 00:00:10.040
It's important for us to level set

5
00:00:10.040 --> 00:00:14.060
on what the two have in common and what they don't.

6
00:00:14.060 --> 00:00:17.070
Cloud-native architectures are based loosely

7
00:00:17.070 --> 00:00:20.000
on building applications according

8
00:00:20.000 --> 00:00:22.070
to the Twelve-Factor Methodologies.

9
00:00:22.070 --> 00:00:25.030
If you aren't familiar with this concept,

10
00:00:25.030 --> 00:00:27.000
please take a look at my course

11
00:00:27.000 --> 00:00:30.030
on Twelve-Factor application development.

12
00:00:30.030 --> 00:00:34.000
This course focuses on microservices

13
00:00:34.000 --> 00:00:36.000
and not cloud native,

14
00:00:36.000 --> 00:00:38.050
but often they do go together.

15
00:00:38.050 --> 00:00:39.080
So let's spend a few minutes

16
00:00:39.080 --> 00:00:42.050
and discuss this at a high level.

17
00:00:42.050 --> 00:00:45.040
Cloud-native architectures include patterns

18
00:00:45.040 --> 00:00:50.060
for designing systems to run in cloud-based infrastructure.

19
00:00:50.060 --> 00:00:54.020
Now cloud infrastructure is a very loose term.

20
00:00:54.020 --> 00:00:56.090
Often, when people hear cloud,

21
00:00:56.090 --> 00:00:59.080
they assume AWS or Azure,

22
00:00:59.080 --> 00:01:02.060
but that's only part of the story.

23
00:01:02.060 --> 00:01:05.060
Cloud infrastructures can be public,

24
00:01:05.060 --> 00:01:09.060
but they can also be private or even a hybrid.

25
00:01:09.060 --> 00:01:11.080
Cloud computing is a pattern

26
00:01:11.080 --> 00:01:14.020
of globally distributing systems

27
00:01:14.020 --> 00:01:18.000
to provide increased uptime, increased scalability,

28
00:01:18.000 --> 00:01:20.050
and increased distribution.

29
00:01:20.050 --> 00:01:22.010
You can build cloud systems

30
00:01:22.010 --> 00:01:24.030
that run in a single data center

31
00:01:24.030 --> 00:01:27.050
with plans on building out more globally.

32
00:01:27.050 --> 00:01:31.040
Or you can build systems that run in a public cloud

33
00:01:31.040 --> 00:01:34.040
that can further be distributed when needed.

34
00:01:34.040 --> 00:01:37.030
Microservices tend to fit very nicely

35
00:01:37.030 --> 00:01:39.060
into a cloud-native architecture

36
00:01:39.060 --> 00:01:42.090
because they tend to be a very smooth transition

37
00:01:42.090 --> 00:01:45.040
to a Twelve-Factor application.

38
00:01:45.040 --> 00:01:47.060
But I do want to be clear

39
00:01:47.060 --> 00:01:51.010
that they are two very distinct concepts.

40
00:01:51.010 --> 00:01:55.060
You can build monolithic cloud-native applications,

41
00:01:55.060 --> 00:01:58.090
and you can build microservices

42
00:01:58.090 --> 00:02:02.090
that are not capable of moving to the cloud at all.

43
00:02:02.090 --> 00:02:07.010
I hear all too often people confusing the two patterns.

44
00:02:07.010 --> 00:02:09.080
To be honest, that concerns me.

45
00:02:09.080 --> 00:02:12.050
We must keep the delineation clear

46
00:02:12.050 --> 00:02:15.030
so as not to confuse the topics,

47
00:02:15.030 --> 00:02:17.080
which is why I am spending this much time

48
00:02:17.080 --> 00:02:20.070
discussing it in this course.

49
00:02:20.070 --> 00:02:24.000
For all of their differences, as I've said,

50
00:02:24.000 --> 00:02:26.040
they do tend to go together.

51
00:02:26.040 --> 00:02:28.000
In my professional life,

52
00:02:28.000 --> 00:02:30.070
every microservice we build today

53
00:02:30.070 --> 00:02:35.050
is aimed at delivering to a cloud-native platform.

54
00:02:35.050 --> 00:02:38.050
We started our microservices journey

55
00:02:38.050 --> 00:02:43.050
before our cloud journey, but the two have quickly merged.

56
00:02:43.050 --> 00:02:47.010
Let's take a look at where they fit together.

57
00:02:47.010 --> 00:02:49.040
A microservice-based application

58
00:02:49.040 --> 00:02:52.060
is usually stored in a single code base,

59
00:02:52.060 --> 00:02:56.040
which is a requirement for Twelve-Factor.

60
00:02:56.040 --> 00:02:58.050
A microservice often is also

61
00:02:58.050 --> 00:03:01.070
a completely self-contained unit,

62
00:03:01.070 --> 00:03:05.000
making the move to the cloud much easier.

63
00:03:05.000 --> 00:03:08.000
Usually, there are only a few changes

64
00:03:08.000 --> 00:03:10.010
with how dependencies are managed

65
00:03:10.010 --> 00:03:12.090
and the leveraging of backing services,

66
00:03:12.090 --> 00:03:17.040
both of which come naturally in a microservices model.

67
00:03:17.040 --> 00:03:21.040
The biggest challenge is if your microservice itself

68
00:03:21.040 --> 00:03:24.000
does work with the file system.

69
00:03:24.000 --> 00:03:27.040
These use cases usually require a migration

70
00:03:27.040 --> 00:03:29.060
to something like Amazon S3

71
00:03:29.060 --> 00:03:32.050
or some other remote file system.

72
00:03:32.050 --> 00:03:34.090
Throughout the rest of this course

73
00:03:34.090 --> 00:03:38.040
I will be focused solely on microservices.

74
00:03:38.040 --> 00:03:41.070
But as I just mentioned, in my professional life

75
00:03:41.070 --> 00:03:46.070
we deploy our microservices to a cloud-native platform.

76
00:03:46.070 --> 00:03:49.050
I will try to share tidbits of information

77
00:03:49.050 --> 00:03:51.090
that will help you make this transition

78
00:03:51.090 --> 00:03:55.060
from VM or big iron-based microservices

79
00:03:55.060 --> 00:03:57.080
to a cloud-native version.

80
00:03:57.080 --> 00:04:01.000
But again, our primary focus is indeed

81
00:04:01.000 --> 00:04:04.000
the microservices themselves.

