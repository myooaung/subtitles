WEBVTT
1
00:00:00.050 --> 00:00:03.020
- Microservices-based architectures

2
00:00:03.020 --> 00:00:05.050
are really the new kid on the block,

3
00:00:05.050 --> 00:00:07.020
but they aren't babies.

4
00:00:07.020 --> 00:00:11.070
In fact, many of the concepts of microservices architecture

5
00:00:11.070 --> 00:00:14.060
can be traced to core roots of SOA

6
00:00:14.060 --> 00:00:18.000
and other service-based architecture patterns.

7
00:00:18.000 --> 00:00:20.060
As with all patterns in software development,

8
00:00:20.060 --> 00:00:23.010
there is no silver bullet,

9
00:00:23.010 --> 00:00:24.090
and that is the theme that we will discuss

10
00:00:24.090 --> 00:00:27.000
throughout this course.

11
00:00:27.000 --> 00:00:31.010
Let's start the discussion with a 50,000-foot view

12
00:00:31.010 --> 00:00:34.010
of what microservices means.

13
00:00:34.010 --> 00:00:38.080
At its core, microservices are about decomposing the system

14
00:00:38.080 --> 00:00:41.080
into more discrete units of work.

15
00:00:41.080 --> 00:00:44.070
In my view, microservice development

16
00:00:44.070 --> 00:00:48.050
is about making the architecture at a component level

17
00:00:48.050 --> 00:00:51.030
work the way good development practices do

18
00:00:51.030 --> 00:00:54.090
with modularization of the code itself.

19
00:00:54.090 --> 00:00:58.010
When we are taught how to solve problems in software,

20
00:00:58.010 --> 00:01:02.010
we're taught to decompose the problem into smaller problems

21
00:01:02.010 --> 00:01:04.050
and then solve each of these problems

22
00:01:04.050 --> 00:01:07.070
in a modular and decoupled fashion.

23
00:01:07.070 --> 00:01:10.090
Microservices simply takes this concept

24
00:01:10.090 --> 00:01:13.080
and applies it to the system as a whole.

25
00:01:13.080 --> 00:01:17.020
There is no real size requirement on microservices.

26
00:01:17.020 --> 00:01:20.070
It's about building the services the right size

27
00:01:20.070 --> 00:01:23.010
for the use cases.

28
00:01:23.010 --> 00:01:25.080
Microservices embraces the concept

29
00:01:25.080 --> 00:01:30.000
of protocol-aware heterogeneous interoperability

30
00:01:30.000 --> 00:01:32.070
to handle all communications.

31
00:01:32.070 --> 00:01:36.060
This means that every call within the service boundaries

32
00:01:36.060 --> 00:01:38.070
are solved via REST.

33
00:01:38.070 --> 00:01:42.010
This common communication allows microservices

34
00:01:42.010 --> 00:01:45.080
to be implemented in a true polyglot fashion

35
00:01:45.080 --> 00:01:48.070
as long as the language provides some mechanism

36
00:01:48.070 --> 00:01:51.040
for creating, responding to,

37
00:01:51.040 --> 00:01:55.000
and executing against RESTful endpoints.

38
00:01:55.000 --> 00:01:58.060
Microservices are just as much about the communication

39
00:01:58.060 --> 00:02:01.000
as the services themselves.

40
00:02:01.000 --> 00:02:04.000
In a pure microservices architecture,

41
00:02:04.000 --> 00:02:06.020
each unit of work can be called

42
00:02:06.020 --> 00:02:09.040
from any other unit of work within the system.

43
00:02:09.040 --> 00:02:11.070
This ability to call any service

44
00:02:11.070 --> 00:02:13.070
provides a lot of flexibility,

45
00:02:13.070 --> 00:02:15.080
but can also lead to headaches,

46
00:02:15.080 --> 00:02:18.020
and often hybrid architectures are leveraged

47
00:02:18.020 --> 00:02:21.010
to solve these concerns.

48
00:02:21.010 --> 00:02:22.070
This architecture pattern

49
00:02:22.070 --> 00:02:25.070
has really gained incredibly popularity

50
00:02:25.070 --> 00:02:29.090
in both the traditional enterprise and startup communities,

51
00:02:29.090 --> 00:02:33.030
and it has done so for a good reason.

52
00:02:33.030 --> 00:02:37.020
SOA was expensive to implement and get off the ground.

53
00:02:37.020 --> 00:02:40.000
Microservices, however, are cheap.

54
00:02:40.000 --> 00:02:44.010
In fact, the entire execution and proxy environment

55
00:02:44.010 --> 00:02:48.070
can be done entirely with open source software.

56
00:02:48.070 --> 00:02:51.080
Even if you choose to build a cloud-native platform

57
00:02:51.080 --> 00:02:54.020
to execute your services in,

58
00:02:54.020 --> 00:02:58.040
you can do this entirely as open source.

59
00:02:58.040 --> 00:03:01.030
The more you dig into the framework as a whole,

60
00:03:01.030 --> 00:03:05.000
the more power you will see in leveraging the OSS model.

61
00:03:05.000 --> 00:03:08.000
There is, after all,

62
00:03:08.000 --> 00:03:11.050
no better experience than learning from the mistakes

63
00:03:11.050 --> 00:03:14.070
and successes of your peers.

64
00:03:14.070 --> 00:03:18.000
We did see this level of hotness before with SOA,

65
00:03:18.000 --> 00:03:19.060
but it really only applied

66
00:03:19.060 --> 00:03:22.010
to enterprise shops for the most part.

67
00:03:22.010 --> 00:03:24.070
But that excitement quickly fizzled out,

68
00:03:24.070 --> 00:03:28.090
whereas with microservices, so far, it hasn't.

69
00:03:28.090 --> 00:03:31.050
While there are many reasons for this,

70
00:03:31.050 --> 00:03:33.010
I believe agility

71
00:03:33.010 --> 00:03:35.090
and the ability to distribute these systems

72
00:03:35.090 --> 00:03:38.030
are the most critical reasons

73
00:03:38.030 --> 00:03:41.050
why the level of interest continues.

74
00:03:41.050 --> 00:03:43.060
As we go through this course,

75
00:03:43.060 --> 00:03:45.090
we will definitely focus on the positives

76
00:03:45.090 --> 00:03:48.010
that this pattern brings,

77
00:03:48.010 --> 00:03:51.060
but we must temper our excitement some

78
00:03:51.060 --> 00:03:56.000
and look at what we pay for in moving to this pattern.

