WEBVTT
1
00:00:00.050 --> 00:00:04.000
- Often when we discuss microservices architecture,

2
00:00:04.000 --> 00:00:08.050
the monolithic application is the primary target of our ire.

3
00:00:08.050 --> 00:00:11.030
So let's spend a moment and consider what is

4
00:00:11.030 --> 00:00:13.090
a monolithic application.

5
00:00:13.090 --> 00:00:16.000
Much of my experiences with monoliths

6
00:00:16.000 --> 00:00:18.080
comes in two distinct flavors.

7
00:00:18.080 --> 00:00:22.030
The first and probably most prevalent for me

8
00:00:22.030 --> 00:00:24.080
is large EAR deployments.

9
00:00:24.080 --> 00:00:27.060
As a Java developer for much of my life,

10
00:00:27.060 --> 00:00:29.040
we used to package our deployments

11
00:00:29.040 --> 00:00:34.060
for large J2EE application servers using EAR files.

12
00:00:34.060 --> 00:00:37.010
All of the components were built into the common

13
00:00:37.010 --> 00:00:39.010
EAR file structure.

14
00:00:39.010 --> 00:00:42.080
Components were packaged along with both very similar

15
00:00:42.080 --> 00:00:46.010
and very different components.

16
00:00:46.010 --> 00:00:48.080
These components would solve many uses,

17
00:00:48.080 --> 00:00:52.070
but the issues were in both how the code operated

18
00:00:52.070 --> 00:00:55.000
and how it was packaged.

19
00:00:55.000 --> 00:00:58.040
A single deployment may contain internal data access

20
00:00:58.040 --> 00:00:59.080
components,

21
00:00:59.080 --> 00:01:04.020
business processes, web applications, web services,

22
00:01:04.020 --> 00:01:06.090
and even some remote procedure calls.

23
00:01:06.090 --> 00:01:11.060
All this packaged into one very large artifact.

24
00:01:11.060 --> 00:01:13.050
Now let's take a look at code use

25
00:01:13.050 --> 00:01:16.060
in a traditional monolithic application.

26
00:01:16.060 --> 00:01:21.040
Now I often say that as a profession, developers are lazy.

27
00:01:21.040 --> 00:01:24.010
If there's a shortcut, we take it.

28
00:01:24.010 --> 00:01:26.060
Now this isn't an indictment of our community.

29
00:01:26.060 --> 00:01:29.040
It's really simply a statement of fact.

30
00:01:29.040 --> 00:01:32.040
If I can use an object designed for a purpose outside

31
00:01:32.040 --> 00:01:35.070
my use case, but shoehorn my use case in

32
00:01:35.070 --> 00:01:37.060
without writing a lot of code,

33
00:01:37.060 --> 00:01:40.000
I often will try to do just that.

34
00:01:40.000 --> 00:01:43.040
It saves time and energy, often with little immediate

35
00:01:43.040 --> 00:01:44.070
side-effects.

36
00:01:44.070 --> 00:01:47.070
But trust me, the side-effects exist.

37
00:01:47.070 --> 00:01:51.020
That component or object now serves two masters,

38
00:01:51.020 --> 00:01:54.090
and any enhancements or corrections in that component

39
00:01:54.090 --> 00:01:57.070
has to solve the needs of both.

40
00:01:57.070 --> 00:02:00.090
Often, this causes us to have very fragile code

41
00:02:00.090 --> 00:02:03.000
that is so tightly coupled

42
00:02:03.000 --> 00:02:07.020
that getting out of the mess is next to impossible.

43
00:02:07.020 --> 00:02:09.010
Now that we have discussed the issues

44
00:02:09.010 --> 00:02:11.020
of inter-code workings,

45
00:02:11.020 --> 00:02:14.050
let's look at how that impacts delivery.

46
00:02:14.050 --> 00:02:17.030
Let's say we need to make a change to our highly coupled

47
00:02:17.030 --> 00:02:18.090
component.

48
00:02:18.090 --> 00:02:21.090
That change, assuming it is well tested,

49
00:02:21.090 --> 00:02:24.000
can pass all unit tests

50
00:02:24.000 --> 00:02:28.000
and still break expected uses downstream.

51
00:02:28.000 --> 00:02:30.010
So in order to deal with this,

52
00:02:30.010 --> 00:02:35.020
we must test the entire deployment as part of the bug fix.

53
00:02:35.020 --> 00:02:39.050
This requires massive resources for every code change

54
00:02:39.050 --> 00:02:43.090
in order to just package the fixer enhancement.

55
00:02:43.090 --> 00:02:47.020
We then tend to group enhancements and bug fixes

56
00:02:47.020 --> 00:02:50.060
into large scale releases packaged together,

57
00:02:50.060 --> 00:02:53.060
which of course impacts our speed to market

58
00:02:53.060 --> 00:02:57.090
of delivering a single business critical feature.

59
00:02:57.090 --> 00:03:00.090
Now let's say we have handled the coupling in our code

60
00:03:00.090 --> 00:03:03.020
and handled the testing and packaging needs

61
00:03:03.020 --> 00:03:05.030
of our monolithic artifact.

62
00:03:05.030 --> 00:03:07.090
It's now time to deploy.

63
00:03:07.090 --> 00:03:10.080
I have seen and heard of deployments of monoliths

64
00:03:10.080 --> 00:03:14.000
that take days to actually do the deployment,

65
00:03:14.000 --> 00:03:18.080
and then many more days of production validation.

66
00:03:18.080 --> 00:03:22.070
In the monolithic world, this pain is even more apparent

67
00:03:22.070 --> 00:03:25.080
if a feature coded in day one of the cycle

68
00:03:25.080 --> 00:03:29.030
has been broken by the time we get to the deployment stage,

69
00:03:29.030 --> 00:03:32.090
because now the whole cycle starts over again.

70
00:03:32.090 --> 00:03:37.090
Simply put, agility and maintainability suffer dramatically

71
00:03:37.090 --> 00:03:40.030
in a monolithic world.

72
00:03:40.030 --> 00:03:44.030
Scalability is often impacted as well.

73
00:03:44.030 --> 00:03:48.090
Scaling out a monolith takes deploying the entire package

74
00:03:48.090 --> 00:03:53.070
even if only one set of functions is actually under load.

75
00:03:53.070 --> 00:03:57.080
Considering the costs associated with monolithic deployments

76
00:03:57.080 --> 00:04:00.090
as well as hardware and other infrastructure costs,

77
00:04:00.090 --> 00:04:04.050
the monolithic application has lost a lot of favor

78
00:04:04.050 --> 00:04:07.000
in the development community.

