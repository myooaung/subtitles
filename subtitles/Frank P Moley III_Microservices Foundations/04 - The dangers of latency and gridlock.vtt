WEBVTT
1
00:00:00.050 --> 00:00:04.060
- The communication pattern of a microservices architecture

2
00:00:04.060 --> 00:00:07.050
definitely improves the ability to scale

3
00:00:07.050 --> 00:00:12.000
and distribute the system, but it comes with a cost.

4
00:00:12.000 --> 00:00:15.090
Blindly moving into this without acknowledging these costs

5
00:00:15.090 --> 00:00:18.050
and working to mitigate them can cause

6
00:00:18.050 --> 00:00:20.090
a catastrophic failure.

7
00:00:20.090 --> 00:00:25.060
Every service invocation in a microservices architecture

8
00:00:25.060 --> 00:00:28.040
is over remote network call.

9
00:00:28.040 --> 00:00:32.070
As such, there is connection setup, tear down,

10
00:00:32.070 --> 00:00:37.000
and wire latency on every single call.

11
00:00:37.000 --> 00:00:41.090
This latency is relatively insignificant for a single call,

12
00:00:41.090 --> 00:00:45.060
but as the code path becomes more and more complex,

13
00:00:45.060 --> 00:00:49.020
that single call can become many.

14
00:00:49.020 --> 00:00:51.050
In addition to the latency increases

15
00:00:51.050 --> 00:00:55.060
of the calls themselves, as the traffic increases

16
00:00:55.060 --> 00:00:58.050
and services come under more load,

17
00:00:58.050 --> 00:01:02.080
the risk of latency in response time increases.

18
00:01:02.080 --> 00:01:05.050
In a system based on remote invocation

19
00:01:05.050 --> 00:01:07.060
of all service calls,

20
00:01:07.060 --> 00:01:10.060
any latency added to the normal flow

21
00:01:10.060 --> 00:01:14.050
can be detrimental to the system as a whole.

22
00:01:14.050 --> 00:01:17.040
Latency in a low-level service,

23
00:01:17.040 --> 00:01:19.060
or any service for that matter,

24
00:01:19.060 --> 00:01:23.040
can become exponentially exaggerated in a model

25
00:01:23.040 --> 00:01:26.010
where every call is remote.

26
00:01:26.010 --> 00:01:30.000
At a certain point, this latency can develop

27
00:01:30.000 --> 00:01:33.050
into a gridlock of the system as a whole.

28
00:01:33.050 --> 00:01:37.000
While calls are waiting for responses,

29
00:01:37.000 --> 00:01:40.010
delays can become unbearable.

30
00:01:40.010 --> 00:01:43.030
When this occurs, there can be a catastrophic failure

31
00:01:43.030 --> 00:01:46.000
of the entire system.

32
00:01:46.000 --> 00:01:48.080
Another path to gridlock can arise

33
00:01:48.080 --> 00:01:51.050
due to circular calls.

34
00:01:51.050 --> 00:01:55.050
In a pure microservices architecture, any service

35
00:01:55.050 --> 00:01:58.090
can call any other service.

36
00:01:58.090 --> 00:02:02.020
This call stack can become circular

37
00:02:02.020 --> 00:02:06.010
when a calling service is subsequently called

38
00:02:06.010 --> 00:02:08.090
by some downstream service.

39
00:02:08.090 --> 00:02:12.070
When this occurs, latency can become a problem

40
00:02:12.070 --> 00:02:16.000
much more quickly, as multiple services

41
00:02:16.000 --> 00:02:18.040
can depend on a service involved

42
00:02:18.040 --> 00:02:21.050
in this circular call stack.

43
00:02:21.050 --> 00:02:25.030
When deciding to move to a microservices architecture,

44
00:02:25.030 --> 00:02:28.010
you must spend a significant amount of time

45
00:02:28.010 --> 00:02:31.090
evaluating how to control such negative reactions

46
00:02:31.090 --> 00:02:34.090
to gridlock and latency.

47
00:02:34.090 --> 00:02:37.020
One such pattern is to use

48
00:02:37.020 --> 00:02:40.040
a circuit breaker within your code.

49
00:02:40.040 --> 00:02:43.000
In this pattern you build a standard flow

50
00:02:43.000 --> 00:02:45.000
through your application,

51
00:02:45.000 --> 00:02:48.000
and when latency rears its ugly head

52
00:02:48.000 --> 00:02:50.000
and timeouts start occurring,

53
00:02:50.000 --> 00:02:55.030
you then trip the circuit and execute a default behavior.

54
00:02:55.030 --> 00:02:57.040
While you may suffer from reduced

55
00:02:57.040 --> 00:02:59.060
functionality of your system,

56
00:02:59.060 --> 00:03:01.090
it's often better to do that

57
00:03:01.090 --> 00:03:04.080
than suffer a complete failure.

58
00:03:04.080 --> 00:03:07.030
When the services are back to normal,

59
00:03:07.030 --> 00:03:10.000
the circuit closes and the normal operation

60
00:03:10.000 --> 00:03:12.080
through your systems returns.

61
00:03:12.080 --> 00:03:15.020
Netflix, for instance, offers Hystrix

62
00:03:15.020 --> 00:03:17.080
as an implementation of this pattern

63
00:03:17.080 --> 00:03:20.060
to support their offerings.

64
00:03:20.060 --> 00:03:22.080
If search is down, for instance,

65
00:03:22.080 --> 00:03:25.060
the platform should still be able to allow users

66
00:03:25.060 --> 00:03:27.080
to view movies.

67
00:03:27.080 --> 00:03:31.010
By offering such a pattern within their software,

68
00:03:31.010 --> 00:03:33.070
the web application or mobile applications

69
00:03:33.070 --> 00:03:37.040
can still function even if search doesn't,

70
00:03:37.040 --> 00:03:40.000
as this degraded level of performance

71
00:03:40.000 --> 00:03:42.050
is the desired state.

72
00:03:42.050 --> 00:03:45.000
Now you don't have to implement a circuit breaker

73
00:03:45.000 --> 00:03:47.050
to solve for latency issues,

74
00:03:47.050 --> 00:03:50.080
but at the very least you need a strong timeout logic

75
00:03:50.080 --> 00:03:54.010
throughout your system to prevent gridlock

76
00:03:54.010 --> 00:03:57.040
from crippling the system as a whole.

77
00:03:57.040 --> 00:04:00.010
Strong timeouts, global distribution

78
00:04:00.010 --> 00:04:02.010
of all service offerings,

79
00:04:02.010 --> 00:04:05.030
scaling of individual services under load,

80
00:04:05.030 --> 00:04:08.030
and leveraging patterns like circuit breaker

81
00:04:08.030 --> 00:04:11.080
will help alleviate the issues when they do occur.

82
00:04:11.080 --> 00:04:16.000
Again, knowledge is key to this.

