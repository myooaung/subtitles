WEBVTT
1
00:00:00.050 --> 00:00:03.090
- Previously, we talked about bounded contexts

2
00:00:03.090 --> 00:00:06.080
and leveraging domain-driven design

3
00:00:06.080 --> 00:00:11.050
for appropriate boundaries on microservices in general.

4
00:00:11.050 --> 00:00:14.050
When it gets to the data access layer itself,

5
00:00:14.050 --> 00:00:16.090
the so called data services,

6
00:00:16.090 --> 00:00:19.080
things get a little different at times.

7
00:00:19.080 --> 00:00:23.050
In the data layer, you have to take more into account

8
00:00:23.050 --> 00:00:26.090
than simply the bounded context of your domain

9
00:00:26.090 --> 00:00:31.070
because now you have to deal with data transactions.

10
00:00:31.070 --> 00:00:35.020
We are going to talk about base versus asset later on,

11
00:00:35.020 --> 00:00:37.060
but one of the hardest changes

12
00:00:37.060 --> 00:00:41.030
especially for larger enterprise systems

13
00:00:41.030 --> 00:00:43.080
is removing the transactional boundaries

14
00:00:43.080 --> 00:00:46.030
in an existing database.

15
00:00:46.030 --> 00:00:50.070
It isn't easy to just quit doing operations transactionally

16
00:00:50.070 --> 00:00:53.040
and if you think you can just leverage

17
00:00:53.040 --> 00:00:56.080
distributed transactions to solve these problems

18
00:00:56.080 --> 00:00:59.000
in a microservices architecture,

19
00:00:59.000 --> 00:01:02.080
stop now, stick with your monolith,

20
00:01:02.080 --> 00:01:06.020
as I promise you this will be nothing but pain

21
00:01:06.020 --> 00:01:08.030
for you and your team.

22
00:01:08.030 --> 00:01:11.070
Again, we're going to talk about this more later,

23
00:01:11.070 --> 00:01:13.070
but it is important to understand

24
00:01:13.070 --> 00:01:17.020
this places a constraint on the design decisions

25
00:01:17.020 --> 00:01:19.050
for data domains.

26
00:01:19.050 --> 00:01:23.020
Building data domains for low-level services

27
00:01:23.020 --> 00:01:27.030
is one of the hardest parts of a microservices architecture

28
00:01:27.030 --> 00:01:29.070
for various reasons.

29
00:01:29.070 --> 00:01:33.010
This usually is because it involves decomposing

30
00:01:33.010 --> 00:01:38.070
a monolithic database into smaller individual systems.

31
00:01:38.070 --> 00:01:41.010
Now, there are a couple of different ways

32
00:01:41.010 --> 00:01:45.040
of tackling this problem and we're going to look at both.

33
00:01:45.040 --> 00:01:48.060
The first strategy is to simply start

34
00:01:48.060 --> 00:01:50.030
with the database itself

35
00:01:50.030 --> 00:01:53.020
and break it up into smaller databases

36
00:01:53.020 --> 00:01:57.030
and then build the associated services.

37
00:01:57.030 --> 00:02:01.000
Now, while this may yield a quicker result,

38
00:02:01.000 --> 00:02:05.050
it tends to put you in a bind if you make a mistake.

39
00:02:05.050 --> 00:02:09.010
If you are well-versed in your system utilization,

40
00:02:09.010 --> 00:02:12.040
it can be a quicker path

41
00:02:12.040 --> 00:02:15.030
so it really depends on what you know

42
00:02:15.030 --> 00:02:18.040
and how well you know it.

43
00:02:18.040 --> 00:02:24.000
Migrating data is significantly harder in a live system

44
00:02:24.000 --> 00:02:26.010
than building services,

45
00:02:26.010 --> 00:02:32.010
especially if you leverage an API layer for those services.

46
00:02:32.010 --> 00:02:34.020
This brings us to the second

47
00:02:34.020 --> 00:02:38.090
and more recommended pattern of building your data domains

48
00:02:38.090 --> 00:02:42.000
and that is to start with the services

49
00:02:42.000 --> 00:02:44.010
instead of the database.

50
00:02:44.010 --> 00:02:46.030
By starting with the services

51
00:02:46.030 --> 00:02:51.000
and having them all connect to the monolithic database,

52
00:02:51.000 --> 00:02:55.010
you'll start to see if your domains are well-defined.

53
00:02:55.010 --> 00:02:57.080
You can see the traffic flows across the network

54
00:02:57.080 --> 00:03:00.010
and leverage that knowledge

55
00:03:00.010 --> 00:03:03.060
to start modeling your data itself.

56
00:03:03.060 --> 00:03:06.040
The overall objective is to minimize

57
00:03:06.040 --> 00:03:10.000
the cross-domain calls where possible,

58
00:03:10.000 --> 00:03:13.020
enforce your needed transaction boundaries,

59
00:03:13.020 --> 00:03:17.020
and then you can start decomposing your databases

60
00:03:17.020 --> 00:03:19.090
into smaller instances.

61
00:03:19.090 --> 00:03:23.040
Building strong data domains is critical

62
00:03:23.040 --> 00:03:26.090
to a solid microservices architecture.

63
00:03:26.090 --> 00:03:30.070
Most if not all operations through the system

64
00:03:30.070 --> 00:03:33.060
will touch one or more data domains.

65
00:03:33.060 --> 00:03:37.010
They can become a large source of pain

66
00:03:37.010 --> 00:03:40.090
if you don't take the time up front to solidify them.

67
00:03:40.090 --> 00:03:43.060
Take your time with these components

68
00:03:43.060 --> 00:03:46.080
and ensure you focus on the most efficient operations

69
00:03:46.080 --> 00:03:48.050
throughout your system.

70
00:03:48.050 --> 00:03:51.000
You'll thank me later.

