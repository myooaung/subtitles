WEBVTT
1
00:00:00.050 --> 00:00:04.010
- A pure microservices architecture can be,

2
00:00:04.010 --> 00:00:08.000
to many teams, a very daunting task.

3
00:00:08.000 --> 00:00:09.080
In addition to the work comprised

4
00:00:09.080 --> 00:00:12.060
of moving to this architecture,

5
00:00:12.060 --> 00:00:15.030
the unknown unknown, so to speak,

6
00:00:15.030 --> 00:00:18.040
can be hard to wrap into a roadmap.

7
00:00:18.040 --> 00:00:19.090
In addition to this,

8
00:00:19.090 --> 00:00:22.080
there are some really hard problems to solve,

9
00:00:22.080 --> 00:00:26.070
like database segmentation and service boundaries,

10
00:00:26.070 --> 00:00:29.050
that in the untrained eye of your customers

11
00:00:29.050 --> 00:00:33.060
may offer no real, tangible value.

12
00:00:33.060 --> 00:00:37.080
As such, there are concrete steps you can take

13
00:00:37.080 --> 00:00:41.030
in the interim to gain some of the benefits

14
00:00:41.030 --> 00:00:43.090
of a microservices architecture

15
00:00:43.090 --> 00:00:48.000
without going full bore into the matrix.

16
00:00:48.000 --> 00:00:51.090
One of my favorite hybrid architectures in this space

17
00:00:51.090 --> 00:00:54.090
is a hierarchical service model.

18
00:00:54.090 --> 00:00:57.060
While many thought leaders in this space

19
00:00:57.060 --> 00:01:00.000
will strongly advise against this

20
00:01:00.000 --> 00:01:03.080
because of the dynamics around team coupling that can occur,

21
00:01:03.080 --> 00:01:06.070
it does prevent some of the risks

22
00:01:06.070 --> 00:01:09.030
of circular dependencies in the network,

23
00:01:09.030 --> 00:01:11.020
which, as we have discussed,

24
00:01:11.020 --> 00:01:14.000
can bring a system to its knees.

25
00:01:14.000 --> 00:01:17.050
In a hierarchical microservices architecture,

26
00:01:17.050 --> 00:01:21.010
you define rules about which service types can

27
00:01:21.010 --> 00:01:25.000
or cannot consume other service types.

28
00:01:25.000 --> 00:01:29.030
One common pattern is based off the old n-tier model

29
00:01:29.030 --> 00:01:31.040
and it's the one that I personally

30
00:01:31.040 --> 00:01:33.070
have had success in working in,

31
00:01:33.070 --> 00:01:37.050
especially during the migration of the system

32
00:01:37.050 --> 00:01:40.030
to a microservices model.

33
00:01:40.030 --> 00:01:43.000
In the n-tier hierarchy model,

34
00:01:43.000 --> 00:01:47.030
you may define a few different classes of services.

35
00:01:47.030 --> 00:01:50.040
One common class is the Data Service

36
00:01:50.040 --> 00:01:54.050
that exposes data domain-specific logic completely

37
00:01:54.050 --> 00:01:56.060
to the outside world.

38
00:01:56.060 --> 00:02:00.050
Another common class is the Business Process Services

39
00:02:00.050 --> 00:02:03.070
that define high-level business processes

40
00:02:03.070 --> 00:02:05.090
that are well-defined.

41
00:02:05.090 --> 00:02:08.090
You may also create Gateway Services

42
00:02:08.090 --> 00:02:12.050
that build abstractions to external dependencies.

43
00:02:12.050 --> 00:02:15.060
And finally, you may define Edge Services

44
00:02:15.060 --> 00:02:18.080
that expose your data and business processes

45
00:02:18.080 --> 00:02:20.080
to the outside world.

46
00:02:20.080 --> 00:02:24.010
Once you have a clear taxonomy build about

47
00:02:24.010 --> 00:02:27.030
what tasks each of these services do,

48
00:02:27.030 --> 00:02:30.070
you can then start to build out rules about

49
00:02:30.070 --> 00:02:33.050
what services can consume.

50
00:02:33.050 --> 00:02:35.030
You may want to look at the risks

51
00:02:35.030 --> 00:02:37.070
of a circular call tree

52
00:02:37.070 --> 00:02:40.030
and make a rule that no data service

53
00:02:40.030 --> 00:02:43.010
can consume another data service

54
00:02:43.010 --> 00:02:46.070
without being involved in a business process.

55
00:02:46.070 --> 00:02:49.060
And all consumption of Gateway Services is

56
00:02:49.060 --> 00:02:52.010
through the same business processes,

57
00:02:52.010 --> 00:02:54.090
but not between each other.

58
00:02:54.090 --> 00:02:59.070
Now, this complex set of rules may, at face value,

59
00:02:59.070 --> 00:03:03.040
seem like an easy way to prevent issues.

60
00:03:03.040 --> 00:03:07.030
The reality is that they come with risks.

61
00:03:07.030 --> 00:03:10.000
Often, you have to adjust your logic

62
00:03:10.000 --> 00:03:12.070
and flow through the system

63
00:03:12.070 --> 00:03:17.030
to accommodate your artificially imposed rules.

64
00:03:17.030 --> 00:03:19.000
You may find yourself building

65
00:03:19.000 --> 00:03:23.080
and defining business processes that don't really exist

66
00:03:23.080 --> 00:03:27.000
in order to play nice in your own sandbox,

67
00:03:27.000 --> 00:03:31.090
sometimes to the point of simple pass-through services,

68
00:03:31.090 --> 00:03:36.070
which do nothing but add artificial latency.

69
00:03:36.070 --> 00:03:39.030
Take this hybrid model lightly

70
00:03:39.030 --> 00:03:44.020
and consider only doing it as a transition method.

71
00:03:44.020 --> 00:03:47.080
Another very common architecture is the

72
00:03:47.080 --> 00:03:50.080
so-called service-based architecture.

73
00:03:50.080 --> 00:03:54.090
In my mind, this is very similar to the SOA model

74
00:03:54.090 --> 00:03:58.040
in which you leave the underlying databases alone

75
00:03:58.040 --> 00:04:01.070
and simply carve out your services.

76
00:04:01.070 --> 00:04:03.040
By migrating your architecture

77
00:04:03.040 --> 00:04:05.080
to this service-based flow,

78
00:04:05.080 --> 00:04:08.030
you can gain some of the agility improvements

79
00:04:08.030 --> 00:04:10.050
of the microservices model

80
00:04:10.050 --> 00:04:14.080
without sharding your data into separate datastores.

81
00:04:14.080 --> 00:04:18.080
Again, while this hybrid model has some value,

82
00:04:18.080 --> 00:04:20.030
take it lightly.

83
00:04:20.030 --> 00:04:22.080
While this does start you down the journey

84
00:04:22.080 --> 00:04:26.020
to microservices and is a great starting point,

85
00:04:26.020 --> 00:04:28.030
as I had previously mentioned,

86
00:04:28.030 --> 00:04:31.060
it can also lead to the so-called monolith

87
00:04:31.060 --> 00:04:33.090
of monolith system.

88
00:04:33.090 --> 00:04:36.000
When your service offering extend

89
00:04:36.000 --> 00:04:38.000
beyond the original scope

90
00:04:38.000 --> 00:04:41.020
because you don't have well-defined domains,

91
00:04:41.020 --> 00:04:44.060
you end up hurting yourself in the long run.

92
00:04:44.060 --> 00:04:48.060
There are many other hybrid models you can see patterned

93
00:04:48.060 --> 00:04:52.040
by leading companies or even in your own mind,

94
00:04:52.040 --> 00:04:55.010
and while they may solve some issues,

95
00:04:55.010 --> 00:04:59.030
they probably come with some baggage as well.

96
00:04:59.030 --> 00:05:02.090
Consider all the benefits and risks

97
00:05:02.090 --> 00:05:06.080
of any model before diving in head first.

98
00:05:06.080 --> 00:05:09.050
Make sure you can manage the risks

99
00:05:09.050 --> 00:05:12.000
and maximize your rewards.

