WEBVTT
1
00:00:00.050 --> 00:00:04.010
- When starting the process of designing your microservices,

2
00:00:04.010 --> 00:00:07.000
there are a few key points to consider

3
00:00:07.000 --> 00:00:10.050
before you write a single line of code.

4
00:00:10.050 --> 00:00:13.030
Where I have mentioned most of this already,

5
00:00:13.030 --> 00:00:16.080
I want to roll it up into a clear, concise picture

6
00:00:16.080 --> 00:00:19.050
and explain how your designs

7
00:00:19.050 --> 00:00:23.010
should account for this material from the ground floor.

8
00:00:23.010 --> 00:00:26.050
One of the first aspects you should consider

9
00:00:26.050 --> 00:00:30.080
when designing microservices is your continuous integration

10
00:00:30.080 --> 00:00:34.020
and continuous delivery pipelines.

11
00:00:34.020 --> 00:00:38.000
Don't write any code until you have a plan

12
00:00:38.000 --> 00:00:40.060
on how you will handle this task.

13
00:00:40.060 --> 00:00:44.040
In my opinion, it is such an important concept

14
00:00:44.040 --> 00:00:47.000
in a microservices architecture

15
00:00:47.000 --> 00:00:51.040
that it honestly should be task number one.

16
00:00:51.040 --> 00:00:53.050
Model a sample pipeline,

17
00:00:53.050 --> 00:00:55.090
and ensure you have the most critical steps

18
00:00:55.090 --> 00:00:58.040
of your STLC documented

19
00:00:58.040 --> 00:01:01.040
and automated if possible.

20
00:01:01.040 --> 00:01:03.050
Consider at least those tasks

21
00:01:03.050 --> 00:01:06.030
that must be performed in every artifact

22
00:01:06.030 --> 00:01:08.030
in your environment.

23
00:01:08.030 --> 00:01:12.020
Secondly, consider spending some real time

24
00:01:12.020 --> 00:01:15.060
designing your logging and tracing frameworks.

25
00:01:15.060 --> 00:01:19.090
This should really be a primary function of every service,

26
00:01:19.090 --> 00:01:22.080
so the code required to do this work

27
00:01:22.080 --> 00:01:27.090
should be in a common library for every artifact to consume.

28
00:01:27.090 --> 00:01:29.090
Consider how you will aggregate

29
00:01:29.090 --> 00:01:32.040
and evaluate your logs and metrics,

30
00:01:32.040 --> 00:01:36.080
and design your code to solve that need.

31
00:01:36.080 --> 00:01:39.020
Consider the uses of log aggregators

32
00:01:39.020 --> 00:01:43.020
and search mechanisms for those logs early on

33
00:01:43.020 --> 00:01:44.080
so you can structure your data

34
00:01:44.080 --> 00:01:48.040
in your logs messages appropriately.

35
00:01:48.040 --> 00:01:51.030
Now, as it gets to your service code,

36
00:01:51.030 --> 00:01:56.010
you really should consider leveraging domain-driven design.

37
00:01:56.010 --> 00:01:59.090
You need to do some real analysis on the system as a whole

38
00:01:59.090 --> 00:02:01.070
and use that knowledge

39
00:02:01.070 --> 00:02:04.070
to help you define your service boundaries.

40
00:02:04.070 --> 00:02:07.030
Consider how you will build your services

41
00:02:07.030 --> 00:02:10.050
and what functions they will perform.

42
00:02:10.050 --> 00:02:13.040
Will you leverage dedicated data services

43
00:02:13.040 --> 00:02:18.070
or wrap the data access into business processes?

44
00:02:18.070 --> 00:02:21.060
Should you consider moving services together

45
00:02:21.060 --> 00:02:24.090
to allow for ACID transactions where you need them?

46
00:02:24.090 --> 00:02:27.070
Or will you build out a strategy

47
00:02:27.070 --> 00:02:30.080
based on eventual consistency?

48
00:02:30.080 --> 00:02:33.030
As you build out these services,

49
00:02:33.030 --> 00:02:36.060
plan for designing mechanisms to evaluate

50
00:02:36.060 --> 00:02:40.010
and eventually control your latency.

51
00:02:40.010 --> 00:02:44.080
Evaluate the use of non-blocking code when possible,

52
00:02:44.080 --> 00:02:47.040
but consider standardizing your stack

53
00:02:47.040 --> 00:02:50.020
no matter which way you go.

54
00:02:50.020 --> 00:02:52.020
I know many developers may not like

55
00:02:52.020 --> 00:02:54.040
to hear the term standardize,

56
00:02:54.040 --> 00:02:58.050
but the reality is that the most successful teams,

57
00:02:58.050 --> 00:03:01.040
when moving into a microservices architecture,

58
00:03:01.040 --> 00:03:03.050
have standardized.

59
00:03:03.050 --> 00:03:05.040
You can leverage a different standard

60
00:03:05.040 --> 00:03:07.030
than you currently use,

61
00:03:07.030 --> 00:03:11.030
but standardization will allow you to shift resources

62
00:03:11.030 --> 00:03:15.040
much more easily as the business needs change.

63
00:03:15.040 --> 00:03:18.060
I also encourage you to design your systems

64
00:03:18.060 --> 00:03:21.060
to be asynchronous first.

65
00:03:21.060 --> 00:03:23.090
By that, I mean try to create every service

66
00:03:23.090 --> 00:03:26.040
as an asynchronous operation

67
00:03:26.040 --> 00:03:30.000
until you prove that you need it synchronously.

68
00:03:30.000 --> 00:03:32.020
This is probably contrary

69
00:03:32.020 --> 00:03:35.060
to how you are currently doing things.

70
00:03:35.060 --> 00:03:38.090
Having a solid plan for asynchronous activity

71
00:03:38.090 --> 00:03:42.070
will not only reduce latency on your system as a whole

72
00:03:42.070 --> 00:03:46.010
but will allow you to improve your skills

73
00:03:46.010 --> 00:03:50.000
on these operations while reducing error rates.

74
00:03:50.000 --> 00:03:54.040
Designing a microservices architecture is less about code

75
00:03:54.040 --> 00:03:59.000
and more about the supporting operations and infrastructure.

