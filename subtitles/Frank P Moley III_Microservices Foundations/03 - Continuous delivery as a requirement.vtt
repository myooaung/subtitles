WEBVTT
1
00:00:00.050 --> 00:00:04.000
- When building out a microservices architecture,

2
00:00:04.000 --> 00:00:08.090
one of the goals is agility of your development teams.

3
00:00:08.090 --> 00:00:11.040
As your system grows in size,

4
00:00:11.040 --> 00:00:14.050
maintaining agility of your team

5
00:00:14.050 --> 00:00:19.090
in all aspects of development can become a challenge.

6
00:00:19.090 --> 00:00:24.010
We all know that writing code is only one aspect

7
00:00:24.010 --> 00:00:26.070
of the software development life cycle.

8
00:00:26.070 --> 00:00:31.020
And while smaller artifacts make development easier,

9
00:00:31.020 --> 00:00:35.000
deployments can become a nightmare.

10
00:00:35.000 --> 00:00:36.090
As a rule of thumb,

11
00:00:36.090 --> 00:00:39.020
you need to invest time

12
00:00:39.020 --> 00:00:42.020
in building out a continuous delivery model

13
00:00:42.020 --> 00:00:44.030
early in the process.

14
00:00:44.030 --> 00:00:46.090
Microservices-based architectures

15
00:00:46.090 --> 00:00:49.050
have so many moving parts,

16
00:00:49.050 --> 00:00:53.050
that the chances of success greatly decrease

17
00:00:53.050 --> 00:00:56.050
if you don't have an automated way

18
00:00:56.050 --> 00:01:00.020
of building and deploying these services.

19
00:01:00.020 --> 00:01:02.070
So let's take a look at what it means

20
00:01:02.070 --> 00:01:07.060
to build out a CICD, or continuous integration

21
00:01:07.060 --> 00:01:11.020
and continuous delivery pipeline.

22
00:01:11.020 --> 00:01:14.000
A CICD pipeline starts

23
00:01:14.000 --> 00:01:16.070
with the most basic aspects

24
00:01:16.070 --> 00:01:19.010
of building your committed code base

25
00:01:19.010 --> 00:01:21.050
in an automated fashion.

26
00:01:21.050 --> 00:01:24.010
Building your code can be as simple

27
00:01:24.010 --> 00:01:25.090
as executing a script

28
00:01:25.090 --> 00:01:28.080
that manages the build cycle itself

29
00:01:28.080 --> 00:01:32.090
to as complex as a large distributed model

30
00:01:32.090 --> 00:01:37.020
of containerization and sandbox build operations.

31
00:01:37.020 --> 00:01:40.020
The build step compiles

32
00:01:40.020 --> 00:01:43.040
and, often, executes unit tests

33
00:01:43.040 --> 00:01:45.080
to ensure that the code is ready

34
00:01:45.080 --> 00:01:48.070
for further testing and deployment.

35
00:01:48.070 --> 00:01:51.060
Once the build step has completed,

36
00:01:51.060 --> 00:01:55.030
we often add a step of automated deployment

37
00:01:55.030 --> 00:01:58.060
to a non-production environment.

38
00:01:58.060 --> 00:02:01.010
This automated deployment step

39
00:02:01.010 --> 00:02:03.040
moves the compiled artifact

40
00:02:03.040 --> 00:02:06.090
to a runtime that often mimics production,

41
00:02:06.090 --> 00:02:10.090
but does not take production traffic.

42
00:02:10.090 --> 00:02:14.030
In this environment, we often see integration

43
00:02:14.030 --> 00:02:16.050
and system testing occurring,

44
00:02:16.050 --> 00:02:20.050
as well as security penetration testing.

45
00:02:20.050 --> 00:02:24.030
These operations should provide a clear indication

46
00:02:24.030 --> 00:02:28.040
of safety around moving the code to production.

47
00:02:28.040 --> 00:02:32.080
Again, automating as much as possible.

48
00:02:32.080 --> 00:02:37.010
So while there may be manual gates in the process,

49
00:02:37.010 --> 00:02:40.050
the end goal is automation.

50
00:02:40.050 --> 00:02:43.020
When the code has been sufficiently validated,

51
00:02:43.020 --> 00:02:45.040
it will be deployed to production

52
00:02:45.040 --> 00:02:47.060
and, through either routing techniques

53
00:02:47.060 --> 00:02:49.070
or blue-green deployments,

54
00:02:49.070 --> 00:02:53.040
the code will start taking production traffic.

55
00:02:53.040 --> 00:02:57.040
Obviously, this is the overall goal of the process,

56
00:02:57.040 --> 00:03:00.020
but in order to make it most effective,

57
00:03:00.020 --> 00:03:01.090
each and every opportunity

58
00:03:01.090 --> 00:03:05.030
to automate a task should be taken.

59
00:03:05.030 --> 00:03:07.070
Now, you may wonder why I state

60
00:03:07.070 --> 00:03:12.010
that this process should be considered a requirement.

61
00:03:12.010 --> 00:03:13.090
As previously mentioned,

62
00:03:13.090 --> 00:03:18.010
one of the goals of microservices is agility.

63
00:03:18.010 --> 00:03:20.020
If you build microservices

64
00:03:20.020 --> 00:03:23.060
but don't do the automation around delivery,

65
00:03:23.060 --> 00:03:26.080
there is no real improvement in agility

66
00:03:26.080 --> 00:03:30.040
when you look at the development process as a whole.

67
00:03:30.040 --> 00:03:34.050
Agility is such a strong improvement in this space,

68
00:03:34.050 --> 00:03:38.000
you owe it to yourself and your team

69
00:03:38.000 --> 00:03:42.050
to make this a priority when moving to microservices.

70
00:03:42.050 --> 00:03:44.010
Start small.

71
00:03:44.010 --> 00:03:47.020
Focus on building, deploying,

72
00:03:47.020 --> 00:03:51.030
and basic testing, and then expand from there.

73
00:03:51.030 --> 00:03:54.080
Consider integration into your ticketing system,

74
00:03:54.080 --> 00:04:00.010
your chat system, and other testing frameworks and systems.

75
00:04:00.010 --> 00:04:02.020
Advanced automation include things

76
00:04:02.020 --> 00:04:04.020
like self-registering your deployment

77
00:04:04.020 --> 00:04:06.030
with monitoring or routing systems.

78
00:04:06.030 --> 00:04:09.090
And this should be your long-term vision

79
00:04:09.090 --> 00:04:14.000
to maximize the value to your team.

