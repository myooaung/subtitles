WEBVTT
1
00:00:00.050 --> 00:00:03.010
- In a microservices architecture,

2
00:00:03.010 --> 00:00:05.070
the interservice communications

3
00:00:05.070 --> 00:00:08.060
can be a source of freedom for growth,

4
00:00:08.060 --> 00:00:11.090
but it can also be a source of great pain.

5
00:00:11.090 --> 00:00:13.030
I want to spend a little time

6
00:00:13.030 --> 00:00:15.050
looking at the network traffic

7
00:00:15.050 --> 00:00:19.050
that takes place in a microservices-based system

8
00:00:19.050 --> 00:00:23.060
and focus on some of these potential pains.

9
00:00:23.060 --> 00:00:27.000
All communications between individual services

10
00:00:27.000 --> 00:00:33.020
in a microservices architecture is over HTTP using ReST.

11
00:00:33.020 --> 00:00:36.050
This communication framework allows any service

12
00:00:36.050 --> 00:00:39.050
to be developed using any coding language

13
00:00:39.050 --> 00:00:43.050
or framework that supports ReSTful services.

14
00:00:43.050 --> 00:00:46.090
Each service can consume any other service

15
00:00:46.090 --> 00:00:50.000
over the same communication strategy.

16
00:00:50.000 --> 00:00:53.010
This strategy, as previously mentioned,

17
00:00:53.010 --> 00:00:58.030
is called protocol-aware heterogeneous interoperability.

18
00:00:58.030 --> 00:01:02.080
In a nutshell, this explains that the services are bound

19
00:01:02.080 --> 00:01:06.090
to a protocol, in this case HTTP,

20
00:01:06.090 --> 00:01:10.070
and execute communication over that protocol

21
00:01:10.070 --> 00:01:13.030
in a way that works in a mixed,

22
00:01:13.030 --> 00:01:16.050
or heterogeneous, environment.

23
00:01:16.050 --> 00:01:19.080
This has a lot of power when we get down to it.

24
00:01:19.080 --> 00:01:22.010
The development team is often composed

25
00:01:22.010 --> 00:01:26.030
of developers with many different skillsets.

26
00:01:26.030 --> 00:01:30.030
You may have backend developers working in Java or C+.

27
00:01:30.030 --> 00:01:33.010
You may have front-end developers working in JavaScript

28
00:01:33.010 --> 00:01:34.080
with NodeJS.

29
00:01:34.080 --> 00:01:38.080
You may also have data scientists working in Python.

30
00:01:38.080 --> 00:01:42.010
The beauty of a microservices architecture

31
00:01:42.010 --> 00:01:45.030
is that each team member can build the services

32
00:01:45.030 --> 00:01:48.010
in a language native to them,

33
00:01:48.010 --> 00:01:50.060
and then expose those services for others

34
00:01:50.060 --> 00:01:54.000
to consume using ReST.

35
00:01:54.000 --> 00:01:57.030
Other teams that need to consume those services

36
00:01:57.030 --> 00:02:01.000
need to have zero knowledge of how the services

37
00:02:01.000 --> 00:02:04.070
themselves work, nor they need to learn

38
00:02:04.070 --> 00:02:08.000
some special communication technology.

39
00:02:08.000 --> 00:02:12.010
They simply leverage ReST the same way they would

40
00:02:12.010 --> 00:02:15.040
if they were calling their own services.

41
00:02:15.040 --> 00:02:19.040
This emphasizes one of the primary problems

42
00:02:19.040 --> 00:02:24.050
this architecture tries to solve, and that is agility.

43
00:02:24.050 --> 00:02:28.050
The agility of this model comes from each team

44
00:02:28.050 --> 00:02:33.060
working in a language and framework that is natural to them.

45
00:02:33.060 --> 00:02:35.090
They can deliver code quickly

46
00:02:35.090 --> 00:02:40.050
because they aren't constrained by artificial boundaries

47
00:02:40.050 --> 00:02:45.000
imposed by the rules of the architecture pattern.

48
00:02:45.000 --> 00:02:49.040
Every modern system leverage ReST.

49
00:02:49.040 --> 00:02:51.060
The same cannot be said

50
00:02:51.060 --> 00:02:55.050
for communication protocols like SOAP.

51
00:02:55.050 --> 00:02:58.030
As the teams work in their own domain

52
00:02:58.030 --> 00:03:03.050
as effeciently as possible, they deliver code quicker.

53
00:03:03.050 --> 00:03:07.030
Once the code is delivered, they expose the contract

54
00:03:07.030 --> 00:03:11.070
so others can consume the services just as quickly,

55
00:03:11.070 --> 00:03:14.070
because there is no learning curve.

56
00:03:14.070 --> 00:03:17.030
Now this communications dance

57
00:03:17.030 --> 00:03:19.080
does come with problems.

58
00:03:19.080 --> 00:03:22.020
We are going to spend some time talking about them

59
00:03:22.020 --> 00:03:27.010
in depth as they can quickly sour the system as a whole.

60
00:03:27.010 --> 00:03:31.080
But for now, we will simply acknowledge that they exist.

61
00:03:31.080 --> 00:03:35.070
In this model, at least in its purest form,

62
00:03:35.070 --> 00:03:38.040
each service is capable of calling

63
00:03:38.040 --> 00:03:41.010
any other service in the system.

64
00:03:41.010 --> 00:03:44.030
There are no constraints on who can call what,

65
00:03:44.030 --> 00:03:47.020
which means orchestration is key.

66
00:03:47.020 --> 00:03:51.020
Each service must maintain a certain level

67
00:03:51.020 --> 00:03:54.020
of passivity in their APIs

68
00:03:54.020 --> 00:03:57.070
or there's a risk of system failure.

69
00:03:57.070 --> 00:04:01.060
Because any service can call any other service,

70
00:04:01.060 --> 00:04:07.000
there is no clear delineation of who is calling you.

71
00:04:07.000 --> 00:04:10.020
You must either have a solid versioning strategy

72
00:04:10.020 --> 00:04:14.020
or maintain perfectly passive APIs

73
00:04:14.020 --> 00:04:17.020
to prevent calling systems from failing

74
00:04:17.020 --> 00:04:20.060
when you release a new version of your API.

75
00:04:20.060 --> 00:04:23.000
In a monolithic infrastructure,

76
00:04:23.000 --> 00:04:27.000
breaking API changes are usually more apparent

77
00:04:27.000 --> 00:04:30.080
than in a microservices architecture.

78
00:04:30.080 --> 00:04:35.040
So you need to stay focused on this issue from day one.

79
00:04:35.040 --> 00:04:39.000
I recommend a solid version and strategy,

80
00:04:39.000 --> 00:04:41.070
along with strong passivity rules,

81
00:04:41.070 --> 00:04:43.050
to prevent this from becoming

82
00:04:43.050 --> 00:04:46.020
a major concern in your system.

83
00:04:46.020 --> 00:04:50.020
Ultimately, enhance your knowledge of this dance

84
00:04:50.020 --> 00:04:52.060
and you will be much more equipped

85
00:04:52.060 --> 00:04:57.000
to handle the issues when they do arise.

