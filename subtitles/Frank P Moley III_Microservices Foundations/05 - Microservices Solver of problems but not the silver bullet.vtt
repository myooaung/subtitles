WEBVTT
1
00:00:00.050 --> 00:00:04.000
- Every architecture decision that is made

2
00:00:04.000 --> 00:00:06.080
ultimately comes down to compromises.

3
00:00:06.080 --> 00:00:09.050
There is no single silver bullet

4
00:00:09.050 --> 00:00:11.080
that solves every use case you have,

5
00:00:11.080 --> 00:00:14.020
and even within a pattern

6
00:00:14.020 --> 00:00:17.070
there are compromises that need to be made.

7
00:00:17.070 --> 00:00:20.010
As I previously alluded to,

8
00:00:20.010 --> 00:00:21.080
there are costs to pay for moving

9
00:00:21.080 --> 00:00:24.030
to microservices architecture,

10
00:00:24.030 --> 00:00:27.080
and I feel it is critical to discuss these some

11
00:00:27.080 --> 00:00:30.060
before we dig into the pattern.

12
00:00:30.060 --> 00:00:33.030
You and your organization must decide

13
00:00:33.030 --> 00:00:36.010
if the benefits you gain from moving

14
00:00:36.010 --> 00:00:40.020
to microservices is worth the cost you pay.

15
00:00:40.020 --> 00:00:43.010
No matter how hot this pattern is,

16
00:00:43.010 --> 00:00:47.040
if it isn't right for you, don't force it.

17
00:00:47.040 --> 00:00:50.010
One of the biggest costs you will pay,

18
00:00:50.010 --> 00:00:54.030
especially early in the process, is complexity.

19
00:00:54.030 --> 00:00:57.030
In a monolithic system, you have one,

20
00:00:57.030 --> 00:01:00.020
or maybe a few components to manage.

21
00:01:00.020 --> 00:01:02.080
Those components may be large,

22
00:01:02.080 --> 00:01:04.090
but if your processes or procedures

23
00:01:04.090 --> 00:01:09.000
require a lot of gates in the software lifecycle,

24
00:01:09.000 --> 00:01:11.080
microservices architectures will dramatically

25
00:01:11.080 --> 00:01:15.020
cost you time and money as you move

26
00:01:15.020 --> 00:01:18.080
from a few deployed artifacts to many.

27
00:01:18.080 --> 00:01:21.090
In addition to the deployment complexity,

28
00:01:21.090 --> 00:01:25.000
determining where all the code lives and operates

29
00:01:25.000 --> 00:01:28.030
in a microservices architecture can increase

30
00:01:28.030 --> 00:01:32.060
the complexity and the costs associated with it.

31
00:01:32.060 --> 00:01:36.030
If your churn to production is not a simple case

32
00:01:36.030 --> 00:01:38.070
of packaging and deployment,

33
00:01:38.070 --> 00:01:41.070
but instead a complicated process,

34
00:01:41.070 --> 00:01:44.040
walk lightly with microservices,

35
00:01:44.040 --> 00:01:49.010
unless you are willing to update your process.

36
00:01:49.010 --> 00:01:53.000
Now if I were the architect consulting your organization

37
00:01:53.000 --> 00:01:56.010
and you were dealing with a complex set of processes

38
00:01:56.010 --> 00:01:58.040
and gates around deployments,

39
00:01:58.040 --> 00:02:00.060
I would investigate those steps

40
00:02:00.060 --> 00:02:03.020
and determine how much can be automated

41
00:02:03.020 --> 00:02:05.080
and how much can be trimmed.

42
00:02:05.080 --> 00:02:07.020
I don't want to make it sound

43
00:02:07.020 --> 00:02:09.050
like a complex process should limit

44
00:02:09.050 --> 00:02:11.080
microservices development.

45
00:02:11.080 --> 00:02:15.040
You just need to take it into account.

46
00:02:15.040 --> 00:02:18.060
Another cost you pay with microservices

47
00:02:18.060 --> 00:02:22.000
is the so-called distribution tax.

48
00:02:22.000 --> 00:02:25.060
As you build a microservices architecture out,

49
00:02:25.060 --> 00:02:29.040
there is a dramatic increase in network communications

50
00:02:29.040 --> 00:02:32.030
between the individual services.

51
00:02:32.030 --> 00:02:36.020
This increases the total latency of calls

52
00:02:36.020 --> 00:02:38.080
across the network as a whole.

53
00:02:38.080 --> 00:02:42.080
In addition to individual calls taking more time

54
00:02:42.080 --> 00:02:45.000
from the client perspective,

55
00:02:45.000 --> 00:02:47.050
the increase in call volume

56
00:02:47.050 --> 00:02:49.070
tends to risk congestion,

57
00:02:49.070 --> 00:02:54.050
causing catastrophic latency across the whole network.

58
00:02:54.050 --> 00:02:57.020
A single slow call in the stack

59
00:02:57.020 --> 00:03:02.000
can cause thread blocking that impacts other client calls.

60
00:03:02.000 --> 00:03:06.030
Often, you will see teams move to reactive technologies

61
00:03:06.030 --> 00:03:10.040
to alleviate the single threaded blocking calls.

62
00:03:10.040 --> 00:03:15.000
However, the distribution tax still persists.

63
00:03:15.000 --> 00:03:20.030
Another similar problem is the reduction of reliability.

64
00:03:20.030 --> 00:03:22.070
This is one area where technologies

65
00:03:22.070 --> 00:03:26.010
can dramatically help, but as you put more

66
00:03:26.010 --> 00:03:28.020
moving parts into a system,

67
00:03:28.020 --> 00:03:31.060
there is a decrease in the overall reliability

68
00:03:31.060 --> 00:03:34.010
of the system as a whole.

69
00:03:34.010 --> 00:03:38.060
If one microservice is sick, the impacts can

70
00:03:38.060 --> 00:03:44.010
and often are extended to multiple client calls.

71
00:03:44.010 --> 00:03:49.020
It becomes critical to evaluate your most core services

72
00:03:49.020 --> 00:03:54.040
and determine if they can withstand system unreliability.

73
00:03:54.040 --> 00:03:57.050
Again, there are ways to build your system

74
00:03:57.050 --> 00:04:01.020
to be more reliable, but if you need the system

75
00:04:01.020 --> 00:04:06.040
to be either up or down, and not in a partial state,

76
00:04:06.040 --> 00:04:09.040
you may need to evaluate if microservices

77
00:04:09.040 --> 00:04:12.020
are the right pattern for you.

78
00:04:12.020 --> 00:04:16.020
Ultimately, as we progress through this course,

79
00:04:16.020 --> 00:04:17.070
I will continue to point out

80
00:04:17.070 --> 00:04:21.000
where these risks come into play.

81
00:04:21.000 --> 00:04:24.060
Your ability to make decisions that maximize benefit

82
00:04:24.060 --> 00:04:28.010
while reducing risks and complications

83
00:04:28.010 --> 00:04:31.080
will help spell success for your organization.

84
00:04:31.080 --> 00:04:36.030
But making blind decisions will risk failure.

85
00:04:36.030 --> 00:04:38.060
Throughout the rest of this course,

86
00:04:38.060 --> 00:04:40.090
as I bring up the potential pitfalls

87
00:04:40.090 --> 00:04:43.000
of this architecture pattern,

88
00:04:43.000 --> 00:04:45.040
my intention is not to discourage you

89
00:04:45.040 --> 00:04:47.030
from moving this direction,

90
00:04:47.030 --> 00:04:51.010
but instead to arm you with the knowledge needed

91
00:04:51.010 --> 00:04:53.030
to make the correct compromises

92
00:04:53.030 --> 00:04:56.000
that will lead you to success.

