WEBVTT
1
00:00:00.640 --> 00:00:03.970
JPA stands for the Java Persistence API.

2
00:00:03.970 --> 00:00:09.440
And much like Spring's roots, JPA was designed to make things easier.

3
00:00:09.440 --> 00:00:12.660
JPA focused on an object‑relational mapping,

4
00:00:12.660 --> 00:00:16.940
or commonly referred to as just an ORM design principle.

5
00:00:16.940 --> 00:00:19.890
Originally, it was part of the EJB specification,

6
00:00:19.890 --> 00:00:23.940
but was later extracted out to be available just on its own.

7
00:00:23.940 --> 00:00:26.140
So, what is JPA?

8
00:00:26.140 --> 00:00:26.580
Well,

9
00:00:26.580 --> 00:00:30.270
there's a little debate on whether or not JPA started off as

10
00:00:30.270 --> 00:00:32.870
Hibernate because there were some other frameworks that had an

11
00:00:32.870 --> 00:00:35.540
influence into that design as well.

12
00:00:35.540 --> 00:00:36.530
But for our course,

13
00:00:36.530 --> 00:00:40.240
we're going to be using Hibernate for our implementation anyway.

14
00:00:40.240 --> 00:00:43.990
It is an ORM, or an object‑relational mapping tool,

15
00:00:43.990 --> 00:00:49.540
and this is how we map our object‑oriented language to our relational database.

16
00:00:49.540 --> 00:00:50.520
Much like Spring,

17
00:00:50.520 --> 00:00:54.600
it is POJO based and has a focus that's around being

18
00:00:54.600 --> 00:00:57.540
built on the object‑oriented development.

19
00:00:57.540 --> 00:01:00.280
So if you've used things like JDBC or some of the

20
00:01:00.280 --> 00:01:02.440
other Java persistence frameworks,

21
00:01:02.440 --> 00:01:05.740
they have a tendency to focus more on the database side of things.

22
00:01:05.740 --> 00:01:08.730
Not saying that they're more powerful for that,

23
00:01:08.730 --> 00:01:12.820
but they tend to make you have some bad object‑oriented development practices,

24
00:01:12.820 --> 00:01:20.340
where JPA and the JPA specification really focus on good OO design.

25
00:01:20.340 --> 00:01:25.210
You can use XML configuration for POJOs much like Spring,

26
00:01:25.210 --> 00:01:28.820
or you can do the annotation‑based configuration

27
00:01:28.820 --> 00:01:30.940
that we'll be doing in this course.

28
00:01:30.940 --> 00:01:32.500
Since it is like Spring,

29
00:01:32.500 --> 00:01:35.190
everything is going to be built around these best

30
00:01:35.190 --> 00:01:37.470
practices and how we want to design our code,

31
00:01:37.470 --> 00:01:42.240
keeping a better OO design inside of our application.

32
00:01:42.240 --> 00:01:46.950
And lastly, we also have pluggable persistence providers.

33
00:01:46.950 --> 00:01:48.580
Now, this is kind of an interesting point.

34
00:01:48.580 --> 00:01:50.260
I've had people ask me before,

35
00:01:50.260 --> 00:01:54.640
why do I care if I can swap out a persistence provider?

36
00:01:54.640 --> 00:01:58.540
And I actually have on three different projects swapped out the entire

37
00:01:58.540 --> 00:02:02.620
persistence provider that I was using from one framework to another because

38
00:02:02.620 --> 00:02:05.640
it worked better with the database that I was using.

39
00:02:05.640 --> 00:02:08.420
So for this example, we are going to be using Hibernate,

40
00:02:08.420 --> 00:02:11.100
but there's TopLink or EclipseLink.

41
00:02:11.100 --> 00:02:14.140
And I won't say that they're better or worse than Hibernate,

42
00:02:14.140 --> 00:02:17.640
but they've been around, and they actually kind of solve some different problems.

43
00:02:17.640 --> 00:02:27.000
So that we can have these swappable persistence providers is actually a good thing and keeps everybody in check.

