1
00:00:00,040 --> 00:00:03,850
Setter injection using the Java configuration approach is

2
00:00:03,850 --> 00:00:06,940
really is as simple as a method call.

3
00:00:06,940 --> 00:00:10,900
Some of the mystery of injection just goes away.

4
00:00:10,900 --> 00:00:14,120
A lot of developers I talk to are concerned with the black box

5
00:00:14,120 --> 00:00:17,800
fail of dependency injection or inversion of control, and with

6
00:00:17,800 --> 00:00:19,630
the Java configuration approach,

7
00:00:19,630 --> 00:00:23,900
it's more visible as to what's actually going on. With XML, there's a

8
00:00:23,900 --> 00:00:28,130
lot of wondering what's wired up and what's calling in, who and how this

9
00:00:28,130 --> 00:00:31,510
auto wiring is all taking place, and that just kind of goes away with

10
00:00:31,510 --> 00:00:34,240
the Java configuration approach.

11
00:00:34,240 --> 00:00:38,440
Setter injection is simply a matter of calling a setter on a bean.

12
00:00:38,440 --> 00:00:41,420
We're going to define a bean using the @Bean annotation,

13
00:00:41,420 --> 00:00:44,810
and you can see here that we've got our getCustomerService

14
00:00:44,810 --> 00:00:48,380
method that returns a bean of type customerService, or a

15
00:00:48,380 --> 00:00:50,640
bean named customerService.

16
00:00:50,640 --> 00:00:54,320
And notice, though, that we have the setter injection in here.

17
00:00:54,320 --> 00:00:55,830
As we're building our beans,

18
00:00:55,830 --> 00:00:59,440
we're going to call this setCustomerRepository method

19
00:00:59,440 --> 00:01:02,440
on our customerService instance.

20
00:01:02,440 --> 00:01:03,200
To do that,

21
00:01:03,200 --> 00:01:08,550
we need to have a method called getCustomerRepository in our configuration

22
00:01:08,550 --> 00:01:13,510
that returns the customerRepository bean. This is going to wire the

23
00:01:13,510 --> 00:01:17,940
customerRepository inside of our customerService.

24
00:01:17,940 --> 00:01:19,540
Let me say that again.

25
00:01:19,540 --> 00:01:25,480
We're not going to call an instance or create, we're going to call and get an

26
00:01:25,480 --> 00:01:29,040
instance of the bean from the Spring configuration file.

27
00:01:29,040 --> 00:01:32,500
So when we define a bean such as our customerRepository here

28
00:01:32,500 --> 00:01:35,260
that returns an instance of customerRepository,

29
00:01:35,260 --> 00:01:38,640
you can see that those methods now line up.

30
00:01:38,640 --> 00:01:43,320
I'm going to call getCustomerRepository that's registered as a Spring bean,

31
00:01:43,320 --> 00:01:48,420
and that's going to return an instance for our setCustomerRepository instance

32
00:01:48,420 --> 00:01:54,380
on our service instance. Take note, Spring is still doing a lot of heavy

33
00:01:54,380 --> 00:01:56,680
lifting behind the scenes when a bean is registered,

34
00:01:56,680 --> 00:02:00,330
such as these beans are all by default a singleton and will only

35
00:02:00,330 --> 00:02:03,130
execute the method the first time it's called.

36
00:02:03,130 --> 00:02:06,540
It's a very key point because if I didn't have this set up this way,

37
00:02:06,540 --> 00:02:11,610
it would create a new bean every time we call this. Since it is in Spring,

38
00:02:11,610 --> 00:02:15,940
it's going to register this is as a singleton and only return one instance.

39
00:02:15,940 --> 00:02:22,000
Let's look at what the code would look like not using Spring since it's really the same code.

