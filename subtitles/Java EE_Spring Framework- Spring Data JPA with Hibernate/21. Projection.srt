1
00:00:00,740 --> 00:00:04,570
It's not often that we want to go through like our report and display

2
00:00:04,570 --> 00:00:07,940
every filled and every element to the end user.

3
00:00:07,940 --> 00:00:08,450
In fact,

4
00:00:08,450 --> 00:00:11,330
some people will subscribe to the notion of never showing

5
00:00:11,330 --> 00:00:14,440
an ID to the end user for them to see.

6
00:00:14,440 --> 00:00:18,300
There's a really great way using a technique called projection

7
00:00:18,300 --> 00:00:21,840
that we can select the fields that we want to and build an

8
00:00:21,840 --> 00:00:24,090
object based off of that request.

9
00:00:24,090 --> 00:00:27,000
We can do complex joins and things like that.

10
00:00:27,000 --> 00:00:29,570
So we're going to actually do two things here in one

11
00:00:29,570 --> 00:00:31,940
example to show you how this works.

12
00:00:31,940 --> 00:00:36,960
Projection is a great way to present objects to the UI. We have an object

13
00:00:36,960 --> 00:00:40,640
that represents exactly what we want to show to the UI.

14
00:00:40,640 --> 00:00:44,190
Objects are added using JPQL syntax.

15
00:00:44,190 --> 00:00:49,240
So we go through and build our query using JPQL, and I'll show you how that

16
00:00:49,240 --> 00:00:52,240
works and what that looks like here in just a second.

17
00:00:52,240 --> 00:00:55,330
And then projection objects can be JPA entities,

18
00:00:55,330 --> 00:00:58,640
but they don't have to be a JPA entity.

19
00:00:58,640 --> 00:01:00,560
This is the other reason I like this,

20
00:01:00,560 --> 00:01:04,140
and I'll talk through that design issue here with you in a second.

21
00:01:04,140 --> 00:01:08,840
You can do this using a constructor for the projection.

22
00:01:08,840 --> 00:01:12,910
So what happens is your JPQL ends up looking like this code up above

23
00:01:12,910 --> 00:01:17,970
here. You have a Select new, and I've created an object that we don't

24
00:01:17,970 --> 00:01:21,240
even have here yet called RegistrationReport.

25
00:01:21,240 --> 00:01:24,490
That takes three parameters in it, three arguments. We've got

26
00:01:24,490 --> 00:01:27,940
name, the course name, and the description.

27
00:01:27,940 --> 00:01:31,010
You can also look and see that we're selecting from

28
00:01:31,010 --> 00:01:36,960
registration and course where the id equal to the r

29
00:01:36,960 --> 00:01:40,140
.registration id in the course object.

30
00:01:40,140 --> 00:01:45,210
So I've joined these two together and done that query. Got the information back.

31
00:01:45,210 --> 00:01:48,500
This is actually a lot more efficient query than what we were doing

32
00:01:48,500 --> 00:01:52,460
before where we had a collection of registrations and then a collection

33
00:01:52,460 --> 00:01:56,540
of course objects that we were going down into.

34
00:01:56,540 --> 00:01:59,860
If I had three or four or five registrations,

35
00:01:59,860 --> 00:02:02,810
it was going to run through that query five, six, or seven times.

36
00:02:02,810 --> 00:02:08,700
And they actually call that an N + 1 select problem. Using projection,

37
00:02:08,700 --> 00:02:12,400
I can go get what I need in one query and one join in the database.

38
00:02:12,400 --> 00:02:18,000
It's a lot more efficient database operation, and it's only showing the fields I want to to the UI.

