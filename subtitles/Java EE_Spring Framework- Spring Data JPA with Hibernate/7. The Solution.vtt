WEBVTT
1
00:00:00.440 --> 00:00:03.640
The solution is obviously JPA.

2
00:00:03.640 --> 00:00:07.240
It removes a lot of the boilerplate code,

3
00:00:07.240 --> 00:00:11.110
helps developers build objects and bridge that gap between our

4
00:00:11.110 --> 00:00:14.740
relational database and our object‑oriented code,

5
00:00:14.740 --> 00:00:18.510
Spring will handle all of our configuration and our

6
00:00:18.510 --> 00:00:20.810
transactions behind the scene,

7
00:00:20.810 --> 00:00:26.570
our code can just focus on testing and testability if we want to, we're

8
00:00:26.570 --> 00:00:29.130
not going to cover a lot of testing in this course,

9
00:00:29.130 --> 00:00:31.970
but we'll show you how some of it works just so you've seen

10
00:00:31.970 --> 00:00:35.090
it and you'll understand how you can build your code so that

11
00:00:35.090 --> 00:00:37.840
it's more easily unit tested.

12
00:00:37.840 --> 00:00:40.880
Transactions are also transparent to the developer,

13
00:00:40.880 --> 00:00:44.060
so when your code stops and starts a transaction,

14
00:00:44.060 --> 00:00:46.580
and now it's not just muddled throughout your code,

15
00:00:46.580 --> 00:00:48.950
you can just write your code how you normally would

16
00:00:48.950 --> 00:00:52.040
and apply transactions to it.

17
00:00:52.040 --> 00:00:55.290
You also get the option to do annotation‑based development,

18
00:00:55.290 --> 00:00:58.370
and for me this is a big one because development is a lot

19
00:00:58.370 --> 00:01:01.940
faster and a lot easier using annotations.

20
00:01:01.940 --> 00:01:05.710
As we go through our samples, you'll see us generate tables in the database and

21
00:01:05.710 --> 00:01:10.040
you'll be amazed at how easy it is to generate a data model.

22
00:01:10.040 --> 00:01:13.220
So, now I talked before about the business focus,

23
00:01:13.220 --> 00:01:16.540
let's look at that example again.

24
00:01:16.540 --> 00:01:20.350
Here's our JDBC example that we had before and all

25
00:01:20.350 --> 00:01:22.640
the problems that it has with it.

26
00:01:22.640 --> 00:01:26.640
Using JPA and Spring, all of this code ends up turning into this

27
00:01:26.640 --> 00:01:31.310
method here where I say I want to get a car by its Id,

28
00:01:31.310 --> 00:01:34.220
and literally that's all the code for it.

29
00:01:34.220 --> 00:01:38.410
I'm still going to have my car object, just like I had to have on the other side,

30
00:01:38.410 --> 00:01:41.970
but this is all I need to do to execute this query.

31
00:01:41.970 --> 00:01:43.840
It handles the transactions,

32
00:01:43.840 --> 00:01:48.850
it handles all the JDBC or SQL associated with it, and then

33
00:01:48.850 --> 00:01:51.990
we'll see as we go through these examples how it just wraps

34
00:01:51.990 --> 00:01:53.950
this all up into our object for us,

35
00:01:53.950 --> 00:02:02.000
but look at how much simpler this code is and our focus is just on getting back what the business needs.

