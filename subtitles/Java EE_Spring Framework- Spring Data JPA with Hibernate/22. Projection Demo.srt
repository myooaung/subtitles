1
00:00:00,140 --> 00:00:03,020
I've gone ahead and shut down my server and closed all the

2
00:00:03,020 --> 00:00:06,140
open files that we had just so we can focus on implementing

3
00:00:06,140 --> 00:00:08,640
projection inside of our application.

4
00:00:08,640 --> 00:00:12,670
Let's right‑click on our model package, so com.pluralsight.conference,

5
00:00:12,670 --> 00:00:16,540
model, and create a new Java class.

6
00:00:16,540 --> 00:00:23,250
We're going to call this RegistrationReport and hit Enter.

7
00:00:23,250 --> 00:00:26,740
I'm going to add three member variables at the top here.

8
00:00:26,740 --> 00:00:37,140
We'll say private String name, private String courseName,

9
00:00:37,140 --> 00:00:47,740
and the last one we'll do private String courseDescription.

10
00:00:47,740 --> 00:00:50,100
And then we're going to give ourselves some white space below those,

11
00:00:50,100 --> 00:00:54,340
and we can right‑click and say Generate,

12
00:00:54,340 --> 00:00:56,340
Constructor.

13
00:00:56,340 --> 00:00:58,560
We'll choose all three of those.

14
00:00:58,560 --> 00:01:01,940
Hit OK.

15
00:01:01,940 --> 00:01:07,650
And then we will right‑click below that and go to Generate again and choose

16
00:01:07,650 --> 00:01:12,440
Getter and Setter and choose all three of them again.

17
00:01:12,440 --> 00:01:15,550
So we've created our basic object,

18
00:01:15,550 --> 00:01:19,470
just a simple POJO for our RegistrationReport that contains our name,

19
00:01:19,470 --> 00:01:19,800
courseName,

20
00:01:19,800 --> 00:01:24,640
and courseDescription and the constructor we're going to use for projection.

21
00:01:24,640 --> 00:01:26,340
So let's save this.

22
00:01:26,340 --> 00:01:28,770
Let's open up our RegistrationController,

23
00:01:28,770 --> 00:01:36,140
and I'm going to grab our registrations method that we created in

24
00:01:36,140 --> 00:01:43,440
the previous demo and just copy it and paste this.

25
00:01:43,440 --> 00:01:50,420
I'm going to change the GetMapping to registration‑reports and

26
00:01:50,420 --> 00:01:55,840
change this to a list of RegistrationReports.

27
00:01:55,840 --> 00:01:58,740
We'll call this getRegistrationReports.

28
00:01:58,740 --> 00:02:12,130
And the same thing down here, we'll change the list type and the return.

29
00:02:12,130 --> 00:02:18,460
And finally, we'll change the method that it calls to findAllReports.

30
00:02:18,460 --> 00:02:20,010
We haven't created this yet.

31
00:02:20,010 --> 00:02:21,080
We're about to.

32
00:02:21,080 --> 00:02:24,540
So I'll save this class,

33
00:02:24,540 --> 00:02:31,090
and let's do the quickfix on it and go to Create method findAllReports,

34
00:02:31,090 --> 00:02:35,540
and it'll take us to our RegistrationService interface.

35
00:02:35,540 --> 00:02:36,520
I can save this.

36
00:02:36,520 --> 00:02:39,440
And when I open up our RegistrationServiceImpl,

37
00:02:39,440 --> 00:02:41,850
it'll tell us that we're missing a method.

38
00:02:41,850 --> 00:02:44,340
And if we do the hot fix for it,

39
00:02:44,340 --> 00:02:50,360
we can say Implement methods, choose that, click OK. It'll give us a space at

40
00:02:50,360 --> 00:02:53,030
the bottom here. We're going to do the same exact thing.

41
00:02:53,030 --> 00:02:56,160
And again, I realize that we're copying and pasting this for the course.

42
00:02:56,160 --> 00:02:59,380
You could put some query logic inside of here for

43
00:02:59,380 --> 00:03:03,340
pagination or those types of things, filtering.

44
00:03:03,340 --> 00:03:07,340
This will work for the example that we have though. Say

45
00:03:07,340 --> 00:03:14,940
findAllReports. And if we do the hot fix on it,

46
00:03:14,940 --> 00:03:18,880
say Create method and save it and open up our

47
00:03:18,880 --> 00:03:23,580
RegistrationRepositoryImpl, we're going to run into the same exact

48
00:03:23,580 --> 00:03:28,290
thing of it telling us that we need to implement this method.

49
00:03:28,290 --> 00:03:37,200
So we'll choose that, and I'm going to grab this method that we had here

50
00:03:37,200 --> 00:03:41,980
up above and use the body of it to help us create this.

51
00:03:41,980 --> 00:03:49,040
So we're going to return a list of RegistrationReports,

52
00:03:49,040 --> 00:03:58,170
RegistrationReports. Because we're starting to scroll off the screen

53
00:03:58,170 --> 00:04:05,170
here, I'm going to create a string and just call it jpql. Set that

54
00:04:05,170 --> 00:04:15,810
equal to this and grab the body out of this method here, jpql. And

55
00:04:15,810 --> 00:04:18,940
we'll define what that is up above here.

56
00:04:18,940 --> 00:04:25,410
So we're going to set up the class name where we call Select new. And

57
00:04:25,410 --> 00:04:27,730
we do have to fully qualify the package in here.

58
00:04:27,730 --> 00:04:30,550
That's one thing that is a little bit confusing.

59
00:04:30,550 --> 00:04:48,340
So we'll say com.pluralsight.conference.model.RegistrationReport.

60
00:04:48,340 --> 00:04:49,560
And from here,

61
00:04:49,560 --> 00:04:54,090
we actually get to specify in the constructor

62
00:04:54,090 --> 00:05:00,940
arguments. So we're going to say r.name,

63
00:05:00,940 --> 00:05:13,880
c.name, c.description. And then let's return that down to a new line.

64
00:05:13,880 --> 00:05:36,150
We're going to pull all of that from registration r, Course c where r.id =

65
00:05:36,150 --> 00:05:47,510
c.registration.id. And then let's put our semicolon on the end of that. I'm

66
00:05:47,510 --> 00:05:52,900
going to give you a second to look and see how I have that typed in. And

67
00:05:52,900 --> 00:05:55,840
notice that at the end of each of these lines,

68
00:05:55,840 --> 00:05:57,610
I do have some white space.

69
00:05:57,610 --> 00:06:02,500
So there is a space at the end of r.name, c.name, description in

70
00:06:02,500 --> 00:06:05,980
between that and that closing parenthesis and the same at the end

71
00:06:05,980 --> 00:06:07,960
of our from clause because if not,

72
00:06:07,960 --> 00:06:12,160
it would be all bunched together and actually wouldn't query correctly.

73
00:06:12,160 --> 00:06:13,990
So make sure you have that typed in there.

74
00:06:13,990 --> 00:06:20,620
You can also opt to grab this query out of the exercise files or the GitHub

75
00:06:20,620 --> 00:06:24,270
repo where I've got this all typed out for you as well,

76
00:06:24,270 --> 00:06:26,120
just in case you're having any problems with it.

77
00:06:26,120 --> 00:06:33,930
So I'm going to say this. I'm going to fire up my server. And

78
00:06:33,930 --> 00:06:39,740
as this loads, I'm going to open up Postman and do a query on

79
00:06:39,740 --> 00:06:43,840
that new URL that we typed in here.

80
00:06:43,840 --> 00:06:48,050
Okay, picking up where we left off in Postman, I'm going to change

81
00:06:48,050 --> 00:06:55,630
this to registration‑reports and just hit the Send button. And

82
00:06:55,630 --> 00:07:00,020
you'll notice the structure that we had before where we were pulling

83
00:07:00,020 --> 00:07:03,120
back a collection and then it had a collection inside of it, that's

84
00:07:03,120 --> 00:07:04,100
going to flatten out.

85
00:07:04,100 --> 00:07:08,430
So when I click Send on this now, you'll notice that we're just one layer deep.

86
00:07:08,430 --> 00:07:11,340
So it's a lot more performant of a query.

87
00:07:11,340 --> 00:07:13,900
It just gets back the fields that we want if we wanted to leave the

88
00:07:13,900 --> 00:07:17,540
course name out or the description out. Notice the IDs aren't showing up

89
00:07:17,540 --> 00:07:22,780
here, any of those things. So it allowed us to create a much more

90
00:07:22,780 --> 00:07:25,990
specific object for what we wanted to return.

91
00:07:25,990 --> 00:07:32,640
I should also note to you that this is a common technique used for searching.

92
00:07:32,640 --> 00:07:35,060
So one thing that people often don't realize in web

93
00:07:35,060 --> 00:07:39,880
applications is that your search is an object,

94
00:07:39,880 --> 00:07:43,650
and that's how you can save search history for people as well.

95
00:07:43,650 --> 00:07:53,000
So searching oftentimes is a JPA entity, and the report back or the results back can be done very well with projection.

