1
00:00:01,240 --> 00:00:07,250
Let's add the code necessary to get our courses tied to our registration.

2
00:00:07,250 --> 00:00:09,340
We're really close to having this done,

3
00:00:09,340 --> 00:00:11,100
but there's a few things were going to tweak to make

4
00:00:11,100 --> 00:00:12,890
it actually easier in the long run.

5
00:00:12,890 --> 00:00:14,020
First of all,

6
00:00:14,020 --> 00:00:18,080
let's change our GeneratedValue that goes with our Id on

7
00:00:18,080 --> 00:00:22,000
our registration to a different strategy.

8
00:00:22,000 --> 00:00:30,440
So we're going to go into the GeneratedValue(strategy = GenerationType,

9
00:00:30,440 --> 00:00:32,360
and we want to select IDENTITY.

10
00:00:32,360 --> 00:00:38,740
And what this is going to do is use the auto‑incrementing IDs in

11
00:00:38,740 --> 00:00:42,140
MySQL to automatically populate our objects.

12
00:00:42,140 --> 00:00:45,910
This is a nicer strategy for when we're cascading things.

13
00:00:45,910 --> 00:00:48,220
The other thing we were doing was working just fine.

14
00:00:48,220 --> 00:00:51,890
This is better for what we're trying to cascade saves across multiple

15
00:00:51,890 --> 00:00:55,840
objects and one‑to‑many mapping such as we're doing now.

16
00:00:55,840 --> 00:00:57,940
Let's do the same thing over on Course.

17
00:00:57,940 --> 00:01:02,640
Let's open it up and change the GeneratedValue here.

18
00:01:02,640 --> 00:01:13,390
I'll say strategy, and the identity here will be GenerationType.IDENTITY.

19
00:01:13,390 --> 00:01:15,240
There's an enum for that.

20
00:01:15,240 --> 00:01:17,840
So everything is saved there.

21
00:01:17,840 --> 00:01:23,390
Now let's go into our RegistrationServiceImpl,

22
00:01:23,390 --> 00:01:30,190
and I want to go here because this is where your business logic should reside.

23
00:01:30,190 --> 00:01:32,960
So let's say that everybody who registers for our

24
00:01:32,960 --> 00:01:38,640
conference should attend an introductory course.

25
00:01:38,640 --> 00:01:40,480
So what we're going to do is we're still going to leave

26
00:01:40,480 --> 00:01:44,250
our registrationRepository setting here,

27
00:01:44,250 --> 00:01:48,640
but what we're going to do is get rid of that return for now and

28
00:01:48,640 --> 00:01:56,040
say registration is equal to that object that gets returned from

29
00:01:56,040 --> 00:01:58,380
the registrationRepository.save.

30
00:01:58,380 --> 00:01:59,530
And if you'll remember,

31
00:01:59,530 --> 00:02:03,460
I very subtly mentioned earlier that I like to always return the object.

32
00:02:03,460 --> 00:02:04,810
This is why.

33
00:02:04,810 --> 00:02:08,840
We're going to actually use that object here now.

34
00:02:08,840 --> 00:02:13,240
So let's get our return registration back inside of here,

35
00:02:13,240 --> 00:02:19,240
and let's go create a repository layer for our course.

36
00:02:19,240 --> 00:02:25,140
So we'll right‑click on Repository and say New, Java Class.

37
00:02:25,140 --> 00:02:31,240
And this will be the CourseRepositoryImpl.

38
00:02:31,240 --> 00:02:33,520
And this is going to be just like the other ones that we did.

39
00:02:33,520 --> 00:02:35,940
You're starting to see a little bit of pattern here.

40
00:02:35,940 --> 00:02:38,940
I'll say Repository.

41
00:02:38,940 --> 00:02:40,400
We'll go inside of here.

42
00:02:40,400 --> 00:02:51,940
We'll inject our PersistenceContext, store that to an EntityManager,

43
00:02:51,940 --> 00:02:55,540
and then we'll create a method that is public,

44
00:02:55,540 --> 00:03:01,540
returns Course, and we'll call this save.

45
00:03:01,540 --> 00:03:06,740
It's going to take Course as a parameter,

46
00:03:06,740 --> 00:03:16,940
and then we will use our entityManager to persist it.

47
00:03:16,940 --> 00:03:23,340
And then finally, we will return our course object that we just created.

48
00:03:23,340 --> 00:03:24,450
So now that we have this,

49
00:03:24,450 --> 00:03:30,140
let's right‑click and refactor and extract an interface.

50
00:03:30,140 --> 00:03:36,920
We'll call this CourseRepository and include that save method,

51
00:03:36,920 --> 00:03:42,510
Refactor, and have it look for any places that it can change.

52
00:03:42,510 --> 00:03:43,150
There are none.

53
00:03:43,150 --> 00:03:44,740
Everything's okay there.

54
00:03:44,740 --> 00:03:48,340
Go back to our RegistrationService.

55
00:03:48,340 --> 00:03:50,630
And now that we're in our RegistrationService,

56
00:03:50,630 --> 00:03:56,440
we can actually auto wire our new repository that we just created in here.

57
00:03:56,440 --> 00:04:03,380
So we'll say @Autowired private CourseRepositoryImpl,

58
00:04:03,380 --> 00:04:07,540
except we want to choose the interface, not the implementation.

59
00:04:07,540 --> 00:04:13,140
Say CourseRepository and save that.

60
00:04:13,140 --> 00:04:15,060
And now since we're just going to create this

61
00:04:15,060 --> 00:04:16,800
course for anybody that comes along,

62
00:04:16,800 --> 00:04:18,970
we could actually retrieve one out of the database,

63
00:04:18,970 --> 00:04:20,950
but this will work for our example.

64
00:04:20,950 --> 00:04:29,840
We'll say Course course = to new Course,

65
00:04:29,840 --> 00:04:41,540
and we'll just set the name on that to Intro,

66
00:04:41,540 --> 00:04:49,240
and we'll say course.setDescription.

67
00:04:49,240 --> 00:04:58,060
Every attendee the must complete the intro.

68
00:04:58,060 --> 00:05:09,780
And then we will now say course.setRegistration,

69
00:05:09,780 --> 00:05:12,970
and this is the registration we saved up above,

70
00:05:12,970 --> 00:05:19,240
and that will pass in registration.

71
00:05:19,240 --> 00:05:21,920
Now we can use the repository we just created.

72
00:05:21,920 --> 00:05:33,940
So I'll courseRepository.save, pass in our course, and those will now be bound.

73
00:05:33,940 --> 00:05:40,640
I want to point out if we go look at our RegistrationRepositoryImplementation,

74
00:05:40,640 --> 00:05:44,900
we are using a pass‑by‑reference here.

75
00:05:44,900 --> 00:05:49,910
Registration gets altered when it gets persisted and handed back

76
00:05:49,910 --> 00:05:54,460
to us to when we use it, over in our service,

77
00:05:54,460 --> 00:05:58,040
it will have the ID stored in there.

78
00:05:58,040 --> 00:05:59,540
So let's fire up our server.

79
00:05:59,540 --> 00:06:01,030
Our web page will pull up.

80
00:06:01,030 --> 00:06:02,020
We'll add a registration.

81
00:06:02,020 --> 00:06:07,040
And you'll see we'll have this course now bound to our registration.

82
00:06:07,040 --> 00:06:08,650
Now that our server has started up,

83
00:06:08,650 --> 00:06:13,140
I can go into our app and click on Add Registration,

84
00:06:13,140 --> 00:06:20,520
type in my name and Add Registration and now switch over to our MySQL Workbench,

85
00:06:20,520 --> 00:06:22,630
and this should all be synced up.

86
00:06:22,630 --> 00:06:22,990
First,

87
00:06:22,990 --> 00:06:28,660
I can click on our registration and run that select * from REGISTRATION

88
00:06:28,660 --> 00:06:30,620
and see that I've got a couple of entries in there.

89
00:06:30,620 --> 00:06:32,540
I've ran it a few times.

90
00:06:32,540 --> 00:06:38,640
And then I can see that I've got ID 1 and ID 2 since I ran it twice.

91
00:06:38,640 --> 00:06:43,340
If I click on select * from COURSE and run it,

92
00:06:43,340 --> 00:06:47,710
I can see that I have associated those correctly.

93
00:06:47,710 --> 00:06:51,890
I've got ID 1 or Course 1. It says that every attendee must

94
00:06:51,890 --> 00:06:56,020
complete the intro, and intro is the name, and it's tied back

95
00:06:56,020 --> 00:06:59,550
to the registration 1. And the same thing, the second one is

96
00:06:59,550 --> 00:07:01,250
tied back to registration 2.

97
00:07:01,250 --> 00:07:07,090
So I have all of my associations correct, and the one‑to‑many and the

98
00:07:07,090 --> 00:07:10,640
many‑to‑one mapping all synced up across my objects.

99
00:07:10,640 --> 00:07:16,070
Now if we deleted our registration since we have that cascade set to ALL,

100
00:07:16,070 --> 00:07:20,870
it would actually delete the course from this table as well.

101
00:07:20,870 --> 00:07:24,900
So we have everything synced up, our cascading set up, our

102
00:07:24,900 --> 00:07:35,000
generated strategy for our IDs synced up correctly. Everything is now wired up for this one‑to‑many, many‑to‑one join.

