1
00:00:00,040 --> 00:00:04,580
When using an annotation like OneToMany or one of the other join types,

2
00:00:04,580 --> 00:00:09,140
we can choose at what time we want to fetch that data.

3
00:00:09,140 --> 00:00:11,320
There are two types of fetch.

4
00:00:11,320 --> 00:00:15,580
There is a lazy, which queries the database when that property is called.

5
00:00:15,580 --> 00:00:19,170
So when I call getCourses on the registration object,

6
00:00:19,170 --> 00:00:22,740
it's going to then go out and populate that collection.

7
00:00:22,740 --> 00:00:27,640
It will wait until we actually call that getter to query the database.

8
00:00:27,640 --> 00:00:31,550
And then there is eager. Eager queries the database when

9
00:00:31,550 --> 00:00:34,040
that object was originally created,

10
00:00:34,040 --> 00:00:37,540
and this is one of those that does vary by implementation.

11
00:00:37,540 --> 00:00:41,670
Hibernate does limit you to only having two eagerly fetched

12
00:00:41,670 --> 00:00:45,250
collections on an object. Usually not a big deal,

13
00:00:45,250 --> 00:00:48,040
but it is different between implementations.

14
00:00:48,040 --> 00:00:52,490
So let's look at what this means for our registration object that we just

15
00:00:52,490 --> 00:00:58,780
created. The OneToMany annotation we had mapped by registration had a cascade

16
00:00:58,780 --> 00:01:03,420
type all. If we tack on fetch = fetchType.lazy,

17
00:01:03,420 --> 00:01:08,510
which is the default, it will wait until we call getCourses on our

18
00:01:08,510 --> 00:01:12,340
registration object before it queries the database.

19
00:01:12,340 --> 00:01:15,960
Up until now, we haven't had an example to read from the database,

20
00:01:15,960 --> 00:01:22,000
so we don't have any code out there yet that will demonstrate this. We're going to change that now.

