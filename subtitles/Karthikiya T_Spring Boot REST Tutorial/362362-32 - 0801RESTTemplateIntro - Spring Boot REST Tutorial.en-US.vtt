WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.740
Okay,

00:00:00.740 --> 00:00:02.450
let's talk about rest template.

00:00:02.450 --> 00:00:08.200
We already know that we can send requests from the browser or from a client application

00:00:08.200 --> 00:00:11.170
like postman out any JavaScript application.

00:00:11.170 --> 00:00:17.510
But there might be instances where to Web services needs to talk to each other and exchange

00:00:17.510 --> 00:00:19.950
data to perform a business task.

00:00:19.950 --> 00:00:23.650
So how does to Web services come and get each other?

00:00:23.650 --> 00:00:29.450
There is no user interface for you to enter the U Earl and then send the request.

00:00:29.450 --> 00:00:32.350
We have to communicate programmatically.

00:00:32.350 --> 00:00:38.560
Some of the instances were to Web services would talk to each other is see that you're

00:00:38.560 --> 00:00:40.480
having a food delivery application.

00:00:40.480 --> 00:00:43.810
You may want to make Web service calls to another Web service,

00:00:43.810 --> 00:00:45.910
maybe a weather forecast service,

00:00:45.910 --> 00:00:49.890
because you want to deliver the food depending on the weather conditions.

00:00:49.890 --> 00:00:54.100
Or you may want to notify the user regarding the weather conditions and hence the delay in

00:00:54.100 --> 00:00:55.360
the delivery off the food.

00:00:55.360 --> 00:00:57.480
Another example is,

00:00:57.480 --> 00:00:59.150
when you're having micro services,

00:00:59.150 --> 00:01:01.820
how do these micro services talk to each other?

00:01:01.820 --> 00:01:06.520
Maybe if you're having any commerce application like Amazon human have multiple micro

00:01:06.520 --> 00:01:07.350
services,

00:01:07.350 --> 00:01:09.440
one for managing users,

00:01:09.440 --> 00:01:11.110
other for managing products,

00:01:11.110 --> 00:01:12.150
other for delivery,

00:01:12.150 --> 00:01:12.970
etcetera,

00:01:12.970 --> 00:01:18.440
and often times all these micro services needs to talk to each other in order to perform a

00:01:18.440 --> 00:01:19.400
business task.

00:01:19.400 --> 00:01:21.480
So how do they communicate?

00:01:21.480 --> 00:01:22.340
Well,

00:01:22.340 --> 00:01:24.900
one of the answers is rest template.

00:01:24.900 --> 00:01:29.010
So in order to demonstrate this with an example,

00:01:29.010 --> 00:01:31.280
here are the steps that we're going to follow.

00:01:31.280 --> 00:01:33.400
We're going to have a Web service running,

00:01:33.400 --> 00:01:35.750
and it's going to expose Cry Baby I.

00:01:35.750 --> 00:01:37.290
And for this purpose,

00:01:37.290 --> 00:01:40.460
we're just going to use our existing crowd FBI.

00:01:40.460 --> 00:01:45.660
And we'll try to make a Web service call from another application called Web Service to

00:01:45.660 --> 00:01:47.220
which is step number two.

00:01:47.220 --> 00:01:52.450
So we'll have a Web service to make a Web service called the Web service one using rest

00:01:52.450 --> 00:01:53.050
template.

00:01:53.050 --> 00:01:55.460
So let's take a look at how it's done.

00:01:55.460 --> 00:01:59.370
So here is our existing crowd FBI.

00:01:59.370 --> 00:02:08.650
How this application is doing is to expose few endpoints to perform crowd operations,

00:02:08.650 --> 00:02:15.870
but one that we're going to use is simply this one to retrieve all the list of products

00:02:15.870 --> 00:02:16.510
available.

00:02:16.510 --> 00:02:19.130
So let's first run this application.

00:02:19.130 --> 00:02:32.230
Let us go toe postman in order to save your time.

00:02:32.230 --> 00:02:34.100
I already have everything ready.

00:02:34.100 --> 00:02:39.190
Let me fire the requests and make sure that were able to extract the products.

00:02:39.190 --> 00:02:43.370
I'm ascended again.

00:02:43.370 --> 00:02:47.980
Let's see.

00:02:47.980 --> 00:02:54.640
Not sure why it is not working.

00:02:54.640 --> 00:02:57.200
All right.

00:02:57.200 --> 00:02:58.250
The problem is,

00:02:58.250 --> 00:03:02.020
we just started the other application.

00:03:02.020 --> 00:03:07.380
Let me just open this particle of file and run it.

00:03:07.380 --> 00:03:18.350
So the Tomcats over has started.

00:03:18.350 --> 00:03:24.960
Let's run this application.

00:03:24.960 --> 00:03:28.950
Sorry about that.

00:03:28.950 --> 00:03:37.460
So we have our Tom gets over running in Port 80 80.

00:03:37.460 --> 00:03:37.820
Now,

00:03:37.820 --> 00:03:43.850
let's try to fire the clearly and see if it works.

00:03:43.850 --> 00:03:46.150
So here are the list off products.

00:03:46.150 --> 00:03:53.410
What we're going to do next is to introduce another Web service that would make a call to

00:03:53.410 --> 00:04:01.360
this end point in order to retrieve all the list of products available by using off course

00:04:01.360 --> 00:04:02.250
Rest template.

00:04:02.250 --> 00:04:08.650
You can just simply create a springboard project with spring Web dependency.

00:04:08.650 --> 00:04:12.180
But one thing that you had to make sure is,

00:04:12.180 --> 00:04:15.180
since we're going to run these two applications in the same host,

00:04:15.180 --> 00:04:24.190
you do have to make sure to start off chain the port off the Tomcat silver to something

00:04:24.190 --> 00:04:24.780
else.

00:04:24.780 --> 00:04:25.900
By default,

00:04:25.900 --> 00:04:30.840
it would default to 80 80 on which were already running an application.

00:04:30.840 --> 00:04:32.750
So for this application,

00:04:32.750 --> 00:04:34.250
spring app,

00:04:34.250 --> 00:04:40.550
I'm going to launch it in this sport otherwise would have a conflict.

00:04:40.550 --> 00:04:47.760
So once you add this property and start your application would have our application running

00:04:47.760 --> 00:04:48.550
in the sport.

00:04:48.550 --> 00:04:52.450
I also added a controller.

00:04:52.450 --> 00:04:53.680
Basically,

00:04:53.680 --> 00:04:58.450
I just cooperated from outright application and made some changes in it.

00:04:58.450 --> 00:05:03.550
And it just has one single method with test as a mapping,

00:05:03.550 --> 00:05:07.070
and here we're going to use the rest template.

00:05:07.070 --> 00:05:08.400
But before you do,

00:05:08.400 --> 00:05:11.590
so do make sure that you configure that being,

00:05:11.590 --> 00:05:15.320
if you're using springboard wash in,

00:05:15.320 --> 00:05:16.790
that is less than wondered.

00:05:16.790 --> 00:05:17.340
Three.

00:05:17.340 --> 00:05:18.620
You don't have to do this,

00:05:18.620 --> 00:05:21.920
but if you're using one about four or a bow,

00:05:21.920 --> 00:05:27.090
then you have to configure this bean and spring doesn't do it automatically.

00:05:27.090 --> 00:05:30.330
So once you have it taken,

00:05:30.330 --> 00:05:30.840
dependence,

00:05:30.840 --> 00:05:33.000
inject and use that object.

00:05:33.000 --> 00:05:37.250
And all I'm trying to do is calling this method.

00:05:37.250 --> 00:05:40.060
Get for entity your power,

00:05:40.060 --> 00:05:47.750
the your basically the exact same your Candace copy it and have it in here,

00:05:47.750 --> 00:05:49.980
which is what I've done.

00:05:49.980 --> 00:05:56.880
And the second argument in here you would specify the type of the written value in this

00:05:56.880 --> 00:05:57.110
case.

00:05:57.110 --> 00:06:00.550
I'm trying to keep things simple and make it as a string,

00:06:00.550 --> 00:06:09.490
and we're going to respond back with the same type as part of the response entity.

00:06:09.490 --> 00:06:12.390
Now let's launch this application.

00:06:12.390 --> 00:06:26.770
So it is this file and make sure that the Tom gets over it started in 80 81.

00:06:26.770 --> 00:06:30.210
We know have to applications running on the same host.

00:06:30.210 --> 00:06:37.150
Let's go back to postman in another time.

00:06:37.150 --> 00:06:44.350
I'm just going to make it a Stabia call with the get method to our new web service.

00:06:44.350 --> 00:06:46.950
And sure enough,

00:06:46.950 --> 00:06:48.900
the result is,

00:06:48.900 --> 00:06:50.060
as expected,

00:06:50.060 --> 00:06:52.330
I've already experimented this before,

00:06:52.330 --> 00:06:52.850
by the way,

00:06:52.850 --> 00:06:57.330
in this case,

00:06:57.330 --> 00:06:59.290
I'm trying to respond back as a string.

00:06:59.290 --> 00:07:01.980
But you could actually create a poor Joe.

00:07:01.980 --> 00:07:03.850
For example,

00:07:03.850 --> 00:07:09.270
if you go to the actual controller off the lip service,

00:07:09.270 --> 00:07:12.520
what we're trying to written is off by product.

00:07:12.520 --> 00:07:18.820
You could create the same Poggio inside your project are another Web application and use it

00:07:18.820 --> 00:07:21.350
in here just as you're using in here.

00:07:21.350 --> 00:07:23.640
And it should be fine as well.

00:07:23.640 --> 00:07:27.820
We're going to explore more such options in coming time.

00:07:27.820 --> 00:07:29.010
But for now,

00:07:29.010 --> 00:07:33.150
I hope you got the sense off how to Web services can actually talk to each other.

00:07:33.150 --> 00:07:34.240
And anyway,

00:07:34.240 --> 00:07:40.380
this is very crucial for you to understand before moving on to understand Micro services

00:07:40.380 --> 00:07:42.540
hope it makes sense

