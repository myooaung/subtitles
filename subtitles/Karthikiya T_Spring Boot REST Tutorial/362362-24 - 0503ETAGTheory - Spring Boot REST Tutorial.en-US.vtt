WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.010
In some cases,

00:00:02.010 --> 00:00:07.540
it may not be ideal to let the silver decide as to how long should the resources be

00:00:07.540 --> 00:00:09.800
deciding UN declined machine,

00:00:09.800 --> 00:00:11.070
for example.

00:00:11.070 --> 00:00:11.660
That's declined,

00:00:11.660 --> 00:00:15.750
is requesting for list off products now on the solar side.

00:00:15.750 --> 00:00:17.600
We cannot have a fixed value.

00:00:17.600 --> 00:00:18.140
How many?

00:00:18.140 --> 00:00:24.560
Can't say we want this to be reciting there for 30 seconds or 30 minutes or whatever,

00:00:24.560 --> 00:00:30.740
how we're having a mechanism where client will try to fetch the resources from its cache

00:00:30.740 --> 00:00:31.350
memory,

00:00:31.350 --> 00:00:33.080
But before doing so,

00:00:33.080 --> 00:00:38.070
it will take constant from the server to check to see if there are any update on that

00:00:38.070 --> 00:00:38.680
resource.

00:00:38.680 --> 00:00:43.440
If there are any updates than several would respond back with the latest details or the

00:00:43.440 --> 00:00:44.050
data.

00:00:44.050 --> 00:00:45.030
Otherwise,

00:00:45.030 --> 00:00:49.850
I would just say Go ahead and fetch from your cache memory because they're no updates,

00:00:49.850 --> 00:00:53.400
and that's where e tag will come into picture.

00:00:53.400 --> 00:01:00.560
So the way it works is initially the first time somebody visits a website to take a look at

00:01:00.560 --> 00:01:01.420
a list of products.

00:01:01.420 --> 00:01:07.730
Let's say client would send the request so we will fetch all the list of products available

00:01:07.730 --> 00:01:11.850
from the database and before sending it to the client.

00:01:11.850 --> 00:01:13.930
So what would apply the hashing ill,

00:01:13.930 --> 00:01:19.420
guarded them on the response and create a string that looks something like this.

00:01:19.420 --> 00:01:23.780
This is essentially a string that's going to represent that resource.

00:01:23.780 --> 00:01:28.170
You can think of it as a unique value that represents that resource.

00:01:28.170 --> 00:01:31.410
You can explode about hashing mechanism if you wish,

00:01:31.410 --> 00:01:40.960
and the Southern would make this cord as part off the E tag response header along with this

00:01:40.960 --> 00:01:41.610
off course.

00:01:41.610 --> 00:01:43.680
So we will also send the list off.

00:01:43.680 --> 00:01:46.110
Product has part of the response body,

00:01:46.110 --> 00:01:52.230
but the next time client tries to access the same resource before fetching the products

00:01:52.230 --> 00:01:53.650
from the cache memory,

00:01:53.650 --> 00:01:58.550
it will send a request to the silver with the falling header.

00:01:58.550 --> 00:02:00.390
If non match,

00:02:00.390 --> 00:02:08.770
with its value being the same hash code that was received from the server solvable again

00:02:08.770 --> 00:02:14.220
tried to fetch the resources from the database applied the hashing ill guarded them to

00:02:14.220 --> 00:02:16.140
create a hash rally something like this,

00:02:16.140 --> 00:02:18.250
and it will see if they both match.

00:02:18.250 --> 00:02:20.210
If the boat do not match,

00:02:20.210 --> 00:02:25.910
then that means there are updates on the requested resource and so the sub over respond

00:02:25.910 --> 00:02:27.870
back with a list of products.

00:02:27.870 --> 00:02:29.450
As part of the response body.

00:02:29.450 --> 00:02:30.600
However,

00:02:30.600 --> 00:02:37.590
if these two hash code matches then so would just respond back with three or four response

00:02:37.590 --> 00:02:41.950
code without including anything in the body.

00:02:41.950 --> 00:02:43.200
So that way,

00:02:43.200 --> 00:02:50.170
trying to signal that whatever is the resources that it is requesting for the same as the

00:02:50.170 --> 00:02:53.640
resource that it is already having in its cache memory.

00:02:53.640 --> 00:02:59.710
So plant would just simply fetch all the data from the cache memory and would be rendered.

00:02:59.710 --> 00:03:01.870
The idea here is that,

00:03:01.870 --> 00:03:05.050
and there's no change in the request resource,

00:03:05.050 --> 00:03:09.270
so it doesn't have to send a huge chunk of data.

00:03:09.270 --> 00:03:12.780
Instrument can just respond back with the state of scored,

00:03:12.780 --> 00:03:14.460
which is pretty lightweight,

00:03:14.460 --> 00:03:17.310
and it's going to save a lot of bandwidth.

00:03:17.310 --> 00:03:20.570
This mechanism does come with a drawback,

00:03:20.570 --> 00:03:22.120
for example,

00:03:22.120 --> 00:03:23.680
for each and every request.

00:03:23.680 --> 00:03:29.150
So what still needs to fight equity in order to fetch the requested resources,

00:03:29.150 --> 00:03:29.890
which will,

00:03:29.890 --> 00:03:30.350
of course,

00:03:30.350 --> 00:03:32.850
cost some performance on the suicide,

00:03:32.850 --> 00:03:38.850
But still it would save bandwidth as well as the response time.

00:03:38.850 --> 00:03:43.750
The next thing that we're going to do is to take a look at an example of the same

