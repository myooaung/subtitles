WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.410
Let's talk about parallel streams.

00:00:02.410 --> 00:00:06.000
I think this can be better demonstrated with an example,

00:00:06.000 --> 00:00:11.890
but but the idea is that instruct crossing all the stream elements under one single thread

00:00:11.890 --> 00:00:11.890
.

00:00:11.890 --> 00:00:16.170
We're going to be split in the stream into multiple Palo streams.

00:00:16.170 --> 00:00:21.250
And then we're going to have multiple threats handling each one of these streams and all

00:00:21.250 --> 00:00:23.060
this stretch would be running Palaly.

00:00:23.060 --> 00:00:24.610
Basically,

00:00:24.610 --> 00:00:28.800
we're trying to read the benefits off Java multi threading again.

00:00:28.800 --> 00:00:31.380
You understand this better with an example,

00:00:31.380 --> 00:00:32.420
Let's go to eclipse.

00:00:32.420 --> 00:00:35.100
So here we are,

00:00:35.100 --> 00:00:36.110
inside the eclipse,

00:00:36.110 --> 00:00:43.160
and what I'm trying to do here is I'm trying to generate values 1 to 4 in the form of a

00:00:43.160 --> 00:00:43.780
stream.

00:00:43.780 --> 00:00:46.920
I'm using the subscribe method,

00:00:46.920 --> 00:00:48.800
passing the matter difference,

00:00:48.800 --> 00:00:52.550
which is right here and in order to similar it.

00:00:52.550 --> 00:00:55.970
Something is being processed and is taking a while.

00:00:55.970 --> 00:00:58.570
I'm waiting for five seconds.

00:00:58.570 --> 00:01:00.170
Along with that,

00:01:00.170 --> 00:01:03.660
I'm also printing processing water.

00:01:03.660 --> 00:01:05.000
Delmon that gets passed.

00:01:05.000 --> 00:01:23.950
I've been on this application and see how it's going to look like P notice.

00:01:23.950 --> 00:01:28.150
A message would be displayed every five seconds.

00:01:28.150 --> 00:01:34.880
That means all these elements are being processed under single thread.

00:01:34.880 --> 00:01:41.350
No parallel processing came into picture,

00:01:41.350 --> 00:01:45.170
so it almost took us 20 seconds to complete,

00:01:45.170 --> 00:01:47.260
because for each and every element,

00:01:47.260 --> 00:01:50.140
it took us five seconds to process.

00:01:50.140 --> 00:01:55.450
Now what I'm going to do next is to spread the stream into multiple parallel streams,

00:01:55.450 --> 00:01:59.010
and then we'll have multiple threads handling all those streams.

00:01:59.010 --> 00:01:59.940
For that,

00:01:59.940 --> 00:02:03.450
I have to add his additional statements.

00:02:03.450 --> 00:02:08.040
The key matter that will help us accomplish this task is right here.

00:02:08.040 --> 00:02:13.350
Run on and then we're going to use one of the classes available as part of the reactor core

00:02:13.350 --> 00:02:14.710
schedulers.

00:02:14.710 --> 00:02:19.190
And here we get to choose the more at which we want to handle the stream.

00:02:19.190 --> 00:02:22.350
We have been as different options,

00:02:22.350 --> 00:02:28.550
battling in order to create multiple threats to handle the barrel streams.

00:02:28.550 --> 00:02:33.150
Single would mean that would create another thread,

00:02:33.150 --> 00:02:38.880
and the same dread would be handled to process all the elements from the streams.

00:02:38.880 --> 00:02:42.110
And then you have idiots are the Mort's.

00:02:42.110 --> 00:02:50.930
But the one that we're interested in right now is this want to run the streams battle early

00:02:50.930 --> 00:02:50.930
,

00:02:50.930 --> 00:02:56.050
but in harmony threats is what you would specify with this method call.

00:02:56.050 --> 00:03:03.830
So this time we went to have four threats that would handle each one of these elements.

00:03:03.830 --> 00:03:06.750
And since all these were running Palaly,

00:03:06.750 --> 00:03:16.760
we're going to be seeing some efficient usage off resources and would be very evident once

00:03:16.760 --> 00:03:20.180
we send the request.

00:03:20.180 --> 00:03:26.650
You would notice that all these elements are being processed simultaneously and regard the

00:03:26.650 --> 00:03:29.370
result in just 5 to 6 seconds.

00:03:29.370 --> 00:03:40.580
But now let's say that our silver resources are not so significant that they're able to

00:03:40.580 --> 00:03:41.630
handle so much off.

00:03:41.630 --> 00:03:42.160
Lord,

00:03:42.160 --> 00:03:43.680
guess what?

00:03:43.680 --> 00:03:48.370
We have to apply back pressure and so will be able to.

00:03:48.370 --> 00:03:56.190
Reggie is the frequency at which the data is being streamed from the producer flux.

00:03:56.190 --> 00:03:59.450
So with this instruction,

00:03:59.450 --> 00:04:07.140
we're asking the producer to produce on the one element with the gap off one second or 1000

00:04:07.140 --> 00:04:08.050
milliseconds.

00:04:08.050 --> 00:04:11.170
That's long your application again.

00:04:11.170 --> 00:04:27.150
And this time will process the elements once in every second.

00:04:27.150 --> 00:04:37.610
And all these elements are processed paddle only.

00:04:37.610 --> 00:04:45.850
I hope it makes sense

