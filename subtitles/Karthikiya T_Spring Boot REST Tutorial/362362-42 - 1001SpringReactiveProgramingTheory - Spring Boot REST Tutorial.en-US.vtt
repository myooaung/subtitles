WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.130
this talk about reactive programming in the context off spring framework.

00:00:05.130 --> 00:00:07.350
Let's start with the real time example.

00:00:07.350 --> 00:00:09.510
Hasn't that you own a restaurant?

00:00:09.510 --> 00:00:14.020
And when the only restaurant it would obviously hire a bunch off servants to solve your

00:00:14.020 --> 00:00:14.560
customers,

00:00:14.560 --> 00:00:14.950
right?

00:00:14.950 --> 00:00:19.900
So I assume that all these white doors that you're seeing in here are servants.

00:00:19.900 --> 00:00:25.490
And the black box that you're seeing in here is a servant room where all the servants would

00:00:25.490 --> 00:00:28.530
be reciting unless of that your restaurant has,

00:00:28.530 --> 00:00:32.450
one policy would say is dedicated servant.

00:00:32.450 --> 00:00:37.970
What that means is each and every servant would be dedicated toe only one particular

00:00:37.970 --> 00:00:38.650
customer.

00:00:38.650 --> 00:00:41.080
Let me try to explain it with an example,

00:00:41.080 --> 00:00:46.450
say that one customer enters the restaurant so one of the servants would be located to that

00:00:46.450 --> 00:00:47.450
particular customer.

00:00:47.450 --> 00:00:49.770
The servant will take the order,

00:00:49.770 --> 00:00:52.950
and he will place that order in the kitchen.

00:00:52.950 --> 00:00:57.350
Servant will wait until the dishes being prepared by the chefs.

00:00:57.350 --> 00:00:59.160
And was the dishes prepared?

00:00:59.160 --> 00:01:01.300
He will go back to the customer,

00:01:01.300 --> 00:01:06.050
and so the dish what's even worse is the servant will keep waiting,

00:01:06.050 --> 00:01:07.950
handle the customer,

00:01:07.950 --> 00:01:10.250
eats the dish or finishes eating,

00:01:10.250 --> 00:01:13.190
and only after customer leaves the restaurant.

00:01:13.190 --> 00:01:14.020
Well,

00:01:14.020 --> 00:01:19.120
this oven go back toe servant room in order to make himself available to serve other

00:01:19.120 --> 00:01:19.850
customers.

00:01:19.850 --> 00:01:23.770
That's what this dedicated servant policy Saiz.

00:01:23.770 --> 00:01:29.990
You clearly see some inefficiencies here because let's say that there 10 servants and

00:01:29.990 --> 00:01:32.210
they're 10 customers went off the restaurant.

00:01:32.210 --> 00:01:36.550
How this 10 servants are occupied with all those 10 customers.

00:01:36.550 --> 00:01:39.280
If there is 11 customer who enters the restaurant,

00:01:39.280 --> 00:01:41.050
there's nobody to solve him.

00:01:41.050 --> 00:01:44.550
So that's one problem now.

00:01:44.550 --> 00:01:45.090
Obviously,

00:01:45.090 --> 00:01:47.250
this may not be true in Deal time restaurant,

00:01:47.250 --> 00:01:49.470
but just for the sake of this example,

00:01:49.470 --> 00:01:50.850
let us assume so.

00:01:50.850 --> 00:01:52.650
Another problem is,

00:01:52.650 --> 00:01:53.030
let's say,

00:01:53.030 --> 00:01:56.190
one customer places an order for 200 pizzas,

00:01:56.190 --> 00:01:58.970
and so seventh will go to the kitchen,

00:01:58.970 --> 00:02:01.010
place his order for 200 pieces,

00:02:01.010 --> 00:02:05.200
and chefs will prepare all those 200 piece US.

00:02:05.200 --> 00:02:09.000
The servant would carry all those 20 pieces back to the restaurant,

00:02:09.000 --> 00:02:13.650
only to notice that they're not enough tables to accommodate all those pieces.

00:02:13.650 --> 00:02:21.060
What so ever should have done is he should have notified getting staff to produce only 10

00:02:21.060 --> 00:02:24.890
pieces at a time until all the stone the pieces are sold.

00:02:24.890 --> 00:02:26.390
But currently,

00:02:26.390 --> 00:02:28.220
that's not happening again.

00:02:28.220 --> 00:02:31.150
All this won't happen in real time restaurants,

00:02:31.150 --> 00:02:31.790
that is,

00:02:31.790 --> 00:02:32.150
as Jim.

00:02:32.150 --> 00:02:33.750
So for the sake of this example,

00:02:33.750 --> 00:02:36.380
we have yet another problem.

00:02:36.380 --> 00:02:44.490
Let's say somehow customers started loving your piece us and a lot off orders Save 1000

00:02:44.490 --> 00:02:50.140
piece us and your current kitchen infrastructure is not capable off preparing so many

00:02:50.140 --> 00:02:51.150
pieces at a time.

00:02:51.150 --> 00:02:56.150
And so what you have decided is he wanted to skill your kitchen.

00:02:56.150 --> 00:03:02.360
You're create another kitchen like this in order to prepare more peace us to cope with the

00:03:02.360 --> 00:03:02.960
demand.

00:03:02.960 --> 00:03:08.660
But you cannot do so because of the fact that they're not enough servants to serve the

00:03:08.660 --> 00:03:09.850
customers anyway.

00:03:09.850 --> 00:03:11.310
So essentially,

00:03:11.310 --> 00:03:15.200
you have all these three problems with inefficient and blocking,

00:03:15.200 --> 00:03:21.270
meaning that servants would be blocked while customer is eating as well as while the dish

00:03:21.270 --> 00:03:22.190
is being prepared.

00:03:22.190 --> 00:03:24.150
You cannot scale the kitchen.

00:03:24.150 --> 00:03:26.800
You do not have control on harmony.

00:03:26.800 --> 00:03:28.000
Peace us at a time.

00:03:28.000 --> 00:03:31.650
Do you need according to what the restaurant can accommodate.

00:03:31.650 --> 00:03:36.210
This is exact same problem we have with current applications.

00:03:36.210 --> 00:03:43.200
Just replace this restaurant with application that runs on a server and replace the servant

00:03:43.200 --> 00:03:49.150
room with a thread pool and all the servants in here are individual threads,

00:03:49.150 --> 00:03:54.390
and all these customers in here are the requests that are hitting the silver and the

00:03:54.390 --> 00:03:56.950
kitchen in here is some kind off a data source.

00:03:56.950 --> 00:03:59.270
It could be another Web service,

00:03:59.270 --> 00:04:02.110
or it could be some form for data source.

00:04:02.110 --> 00:04:05.150
So this is how it's going to look like.

00:04:05.150 --> 00:04:09.500
And just as we had dedicated seven policy in a restaurant example,

00:04:09.500 --> 00:04:15.550
the model that we're following in our application is called Thread for request model.

00:04:15.550 --> 00:04:19.590
The way it works is as soon as a request hits the silver.

00:04:19.590 --> 00:04:25.130
Our application a thread would be picked up from the Threat pool in order to solve that

00:04:25.130 --> 00:04:25.750
request.

00:04:25.750 --> 00:04:29.630
Let's that you requested for some data,

00:04:29.630 --> 00:04:32.390
maybe a bunch off products available in the database.

00:04:32.390 --> 00:04:35.450
The request would be delegated to next layer,

00:04:35.450 --> 00:04:37.130
which is the data source.

00:04:37.130 --> 00:04:39.650
It could be another service order data store.

00:04:39.650 --> 00:04:41.270
Whatever it is,

00:04:41.270 --> 00:04:48.950
the thread will not be available to process other requests until the data is retrieved back

00:04:48.950 --> 00:04:52.350
and the response is sold back to the client.

00:04:52.350 --> 00:04:58.750
The inefficiency here is that let's say there are 200 threats,

00:04:58.750 --> 00:05:03.330
which would typically be the case in a threat pool and their 200 records that would hit the

00:05:03.330 --> 00:05:04.050
silver.

00:05:04.050 --> 00:05:10.140
And let's say that all those requests would take a while to process and all those threats

00:05:10.140 --> 00:05:11.210
are occupied.

00:05:11.210 --> 00:05:13.110
Toe handle those requests,

00:05:13.110 --> 00:05:20.050
which means if there is 20 want request that enters the silver of the application,

00:05:20.050 --> 00:05:23.450
then there are no threats available to process it.

00:05:23.450 --> 00:05:24.890
At the same time,

00:05:24.890 --> 00:05:26.650
threats are not really doing anything.

00:05:26.650 --> 00:05:30.550
They're just waiting for the data to be retrieved and processed.

00:05:30.550 --> 00:05:33.400
That's clearly an inefficient approach.

00:05:33.400 --> 00:05:38.350
And just as you're not able to scale kitchens in our restaurant example,

00:05:38.350 --> 00:05:39.950
he cannot skill.

00:05:39.950 --> 00:05:46.810
Other applications are other Web service because of the fact that they're not enough

00:05:46.810 --> 00:05:48.660
threads to solve the requests.

00:05:48.660 --> 00:05:51.550
This is especially true in Gets Off Micro Services,

00:05:51.550 --> 00:05:57.980
where you want to multiply the instances off one particular service where there's too much

00:05:57.980 --> 00:06:01.850
off Lord using docker continue ization or Cuban it is,

00:06:01.850 --> 00:06:10.270
but you're not able to do so again for the very reason and problem Number three is,

00:06:10.270 --> 00:06:14.800
let's say that you have too many data sources,

00:06:14.800 --> 00:06:18.800
and if all that data comes in one go,

00:06:18.800 --> 00:06:21.050
your application may not be able to handle it,

00:06:21.050 --> 00:06:23.350
just as with our restaurant example,

00:06:23.350 --> 00:06:27.250
if the customer places an order for 200 pieces at that time,

00:06:27.250 --> 00:06:30.050
there aren't enough tables to accommodate all the speeds,

00:06:30.050 --> 00:06:33.250
as and in the same day are.

00:06:33.250 --> 00:06:39.160
Several may not be having enough resources to process all the data so clearly.

00:06:39.160 --> 00:06:41.350
These are all problems,

00:06:41.350 --> 00:06:45.250
so we have synchro nous and blocking operations.

00:06:45.250 --> 00:06:49.150
Synchronous meeting thread will wait under the data,

00:06:49.150 --> 00:06:51.250
gets retrieved and gets processed.

00:06:51.250 --> 00:06:55.800
You cannot scale the application are individual micro services.

00:06:55.800 --> 00:06:58.670
And there is no concept off back pressure,

00:06:58.670 --> 00:07:01.580
which is a technical term for application,

00:07:01.580 --> 00:07:08.150
not having the capabilities to restrict amount of data that it can consume from the

00:07:08.150 --> 00:07:10.150
downstream layers.

00:07:10.150 --> 00:07:12.600
So what's the solution?

00:07:12.600 --> 00:07:15.500
Reactor programming.

00:07:15.500 --> 00:07:19.650
These are the major problems that reactor programming addresses.

00:07:19.650 --> 00:07:27.040
Let's talk about them So the really active programming walks is will completely get rid off

00:07:27.040 --> 00:07:28.060
thread for request.

00:07:28.060 --> 00:07:28.550
Moral.

00:07:28.550 --> 00:07:30.310
But what we're going to have,

00:07:30.310 --> 00:07:30.700
though,

00:07:30.700 --> 00:07:33.550
is thread per processor court.

00:07:33.550 --> 00:07:36.570
If your service having 16 core Cebu,

00:07:36.570 --> 00:07:40.850
then there will be 16 threats that are dedicated to each core.

00:07:40.850 --> 00:07:44.430
So now whenever there is a request,

00:07:44.430 --> 00:07:51.090
jbm will pick one of the threads from one of the core in orderto handle that request But

00:07:51.090 --> 00:07:57.460
this time our application is going to tell the data store that I'm not going to wait until

00:07:57.460 --> 00:07:58.750
the data gets retrieved.

00:07:58.750 --> 00:08:01.990
Once the data is available for me to consume,

00:08:01.990 --> 00:08:03.310
do let me know,

00:08:03.310 --> 00:08:10.100
do notify me and our picket only for have enough resources to handle it and mostly because

00:08:10.100 --> 00:08:17.640
gets delegated to next layer thread will go back to where it belongs the prosecutor or in

00:08:17.640 --> 00:08:23.390
order for it to so other incoming requests and all the application says that it has other

00:08:23.390 --> 00:08:24.360
things to handle,

00:08:24.360 --> 00:08:26.600
and it cannot wait for the data to be retrieved.

00:08:26.600 --> 00:08:32.500
It will actually keep an eye to see if the data is available for it to consume.

00:08:32.500 --> 00:08:33.110
I mean,

00:08:33.110 --> 00:08:36.450
just as you're walking on computer will still keep an eye on your cat or dog,

00:08:36.450 --> 00:08:38.110
right in a similar fashion.

00:08:38.110 --> 00:08:39.650
It is smart enough to do that,

00:08:39.650 --> 00:08:42.040
and once the data is available,

00:08:42.040 --> 00:08:46.940
the data store will notify the application regarding the same.

00:08:46.940 --> 00:08:48.080
It says,

00:08:48.080 --> 00:08:49.850
I have data available to serve you,

00:08:49.850 --> 00:08:51.650
but you like me to send it,

00:08:51.650 --> 00:08:54.050
and several respond back,

00:08:54.050 --> 00:08:55.620
but saying Yes,

00:08:55.620 --> 00:08:56.490
I might be needing it,

00:08:56.490 --> 00:08:59.250
and I think I have enough resources to process that data.

00:08:59.250 --> 00:09:05.200
It is when the data will be transmitted in the form off it data stream that our application

00:09:05.200 --> 00:09:09.450
can consume once the data is processed again.

00:09:09.450 --> 00:09:14.010
While the threat from the process corse one of the available threats from the prosecutors

00:09:14.010 --> 00:09:18.580
would be picked up in order to send back some form off the response to the client.

00:09:18.580 --> 00:09:23.850
But I mentioned that the application must be able to come way to the data store toe,

00:09:23.850 --> 00:09:25.950
let it know of the data availability,

00:09:25.950 --> 00:09:32.890
and only then will it process in which get the data store must be able to react to it.

00:09:32.890 --> 00:09:33.160
I mean,

00:09:33.160 --> 00:09:34.750
it has to say yes or no.

00:09:34.750 --> 00:09:36.330
At the same time,

00:09:36.330 --> 00:09:38.580
in the data store makes the data available.

00:09:38.580 --> 00:09:42.550
It needs to be able to notify the application regarding the same,

00:09:42.550 --> 00:09:44.020
and based on that,

00:09:44.020 --> 00:09:45.200
it has to react to it.

00:09:45.200 --> 00:09:47.650
It can be done like our current applications,

00:09:47.650 --> 00:09:52.510
and that intelligence is actually given by the reactor library.

00:09:52.510 --> 00:09:58.420
So you have to have this react to capabilities in each and every component in the entire

00:09:58.420 --> 00:10:00.700
stack in order to reap the benefits off,

00:10:00.700 --> 00:10:01.850
react to programming.

00:10:01.850 --> 00:10:07.590
But ultimately these two components come and get each other and understand each other using

00:10:07.590 --> 00:10:11.390
this reactor libraries with the Help off bunch off event.

00:10:11.390 --> 00:10:16.460
The concept off event will be more evident down the line once we explore examples,

00:10:16.460 --> 00:10:17.140
etcetera.

00:10:17.140 --> 00:10:23.410
But this mechanism is called and even blue because they're able to communicate each other

00:10:23.410 --> 00:10:24.690
and understand each other.

00:10:24.690 --> 00:10:30.350
That's possible because off all these events generated between these two parties,

00:10:30.350 --> 00:10:31.680
so ultimately,

00:10:31.680 --> 00:10:32.930
with reactive programming,

00:10:32.930 --> 00:10:34.140
we got it off.

00:10:34.140 --> 00:10:35.250
All this problems.

00:10:35.250 --> 00:10:38.850
The threats are no longer blocking and are a synchronous.

00:10:38.850 --> 00:10:45.980
And we can even scare the individual micro services and gets if it wanted to,

00:10:45.980 --> 00:10:50.400
because we don't have any restrictions or bad years in terms.

00:10:50.400 --> 00:10:50.750
Self.

00:10:50.750 --> 00:10:55.350
How maney request we can handle so scalability is not a problem,

00:10:55.350 --> 00:10:57.660
and even there is a back pressure,

00:10:57.660 --> 00:11:01.970
and we'll talk about back pressure with examples in coming time.

00:11:01.970 --> 00:11:03.510
But yes,

00:11:03.510 --> 00:11:09.250
application does have control on how much data it wants to receive from the data source,

00:11:09.250 --> 00:11:12.290
depending on what it's capable off crossing.

00:11:12.290 --> 00:11:17.050
And when I say that we have to use react to libraries in all this component,

00:11:17.050 --> 00:11:23.050
then all these libraries must follow one common specification that's reactive

00:11:23.050 --> 00:11:27.640
specifications created by a bunch of companies like Netflix people,

00:11:27.640 --> 00:11:28.650
it'll etcetera.

00:11:28.650 --> 00:11:36.760
The reactor specifications will have the following basic interfaces called publisher

00:11:36.760 --> 00:11:37.690
subscriber,

00:11:37.690 --> 00:11:39.950
subscription and processor.

00:11:39.950 --> 00:11:44.190
And here are the corresponding methods.

00:11:44.190 --> 00:11:47.840
It's better that you write down all this in a piece off paper.

00:11:47.840 --> 00:11:54.020
This may be helpful down the line and bear with me for next one or two minutes because I'm

00:11:54.020 --> 00:12:00.450
just going to explain how it all works and my bring in some complexity in your mind.

00:12:00.450 --> 00:12:02.450
So initially,

00:12:02.450 --> 00:12:03.660
the publisher,

00:12:03.660 --> 00:12:05.720
the publisher is nothing but the data store.

00:12:05.720 --> 00:12:07.750
Because they're going to publish some data,

00:12:07.750 --> 00:12:11.030
the interface will have subscribe.

00:12:11.030 --> 00:12:12.210
This isn't mattered,

00:12:12.210 --> 00:12:14.250
which should be used by the subscriber,

00:12:14.250 --> 00:12:16.400
which is from our application.

00:12:16.400 --> 00:12:21.670
We're going to call this method subscribe and send the subscriber object.

00:12:21.670 --> 00:12:23.350
By doing so,

00:12:23.350 --> 00:12:29.760
the publisher will call the on subscribe matter off subscriber and give him the

00:12:29.760 --> 00:12:31.130
subscription object,

00:12:31.130 --> 00:12:34.900
which the subscriber can use in order to request the data.

00:12:34.900 --> 00:12:39.310
One of the matters that is available as part of subscription is request.

00:12:39.310 --> 00:12:42.950
If you notice this request method takes in one para meter.

00:12:42.950 --> 00:12:43.560
Well,

00:12:43.560 --> 00:12:46.050
this is where the magic off back pressure happens.

00:12:46.050 --> 00:12:47.850
The subscriber,

00:12:47.850 --> 00:12:53.580
which is going to be out application can restrict how much data it needs.

00:12:53.580 --> 00:12:58.850
That's already requested for a result set off bunch of products available in the data store

00:12:58.850 --> 00:13:01.550
unless it there are 100 products available.

00:13:01.550 --> 00:13:02.960
But right now,

00:13:02.960 --> 00:13:07.350
our applications only capable off crossing only 10 products at a time,

00:13:07.350 --> 00:13:13.570
In which case we can call this method request and send the perimeter 10 so that we get back

00:13:13.570 --> 00:13:16.450
only 10 products from the stream off data.

00:13:16.450 --> 00:13:22.770
And the subscriber can also use the cancel method in order to cancel subscription this into

00:13:22.770 --> 00:13:25.770
a kind of works like our magazine subscription.

00:13:25.770 --> 00:13:27.850
If you can manage to correlate it,

00:13:27.850 --> 00:13:33.340
the bunch of other matters which will be called by the publisher are right here.

00:13:33.340 --> 00:13:34.980
We have on next event,

00:13:34.980 --> 00:13:38.650
which will be called for each and every data element in the stream.

00:13:38.650 --> 00:13:40.200
And we have oh,

00:13:40.200 --> 00:13:41.450
never mattered.

00:13:41.450 --> 00:13:45.780
In case if we have another was streaming the data from the data store.

00:13:45.780 --> 00:13:47.950
Maybe database server went down.

00:13:47.950 --> 00:13:52.550
Are the web service from there were requesting the data crashed?

00:13:52.550 --> 00:13:56.830
Are there some earthquake in that location which I wish will not happen.

00:13:56.830 --> 00:13:58.670
But if that happens,

00:13:58.670 --> 00:14:00.350
then we'll have some gonna Panatta.

00:14:00.350 --> 00:14:04.260
So are never method off subscriber would be called by the publisher.

00:14:04.260 --> 00:14:07.050
And here you may have some handing logic,

00:14:07.050 --> 00:14:11.950
and you will write down some logic to deal with what you want to do in case off another.

00:14:11.950 --> 00:14:18.480
The on complete even would be triggered once the publisher delivers word subscriber has

00:14:18.480 --> 00:14:19.350
requested for.

00:14:19.350 --> 00:14:22.750
And then we have processor interface,

00:14:22.750 --> 00:14:29.670
which extends both publishing subscriber so basically would use the processor to be able to

00:14:29.670 --> 00:14:35.060
have control on both publisher and subscriber operations again.

00:14:35.060 --> 00:14:38.650
This will be more evident once we take a look at an example,

00:14:38.650 --> 00:14:42.450
but I hope you got some sense off how it all works.

00:14:42.450 --> 00:14:45.550
I'm very sure that this all looks very complex.

00:14:45.550 --> 00:14:46.820
Unfortunately,

00:14:46.820 --> 00:14:53.490
a lot of the complexity would be taken care by the project called Project Reactor.

00:14:53.490 --> 00:14:56.950
It's a reactor library for spring framework,

00:14:56.950 --> 00:14:59.280
which follows these specifications.

00:14:59.280 --> 00:15:05.550
And flocks and mono are the publisher classes that are part of the project reactor,

00:15:05.550 --> 00:15:10.370
which we can use in our code in order to read the benefits off react to programming.

00:15:10.370 --> 00:15:14.800
So next thing they're going to do is to take a look at some of the really cool flux and

00:15:14.800 --> 00:15:20.780
more examples to bring in all those reactor capabilities as well as will talk about some of

00:15:20.780 --> 00:15:22.020
the drawbacks off,

00:15:22.020 --> 00:15:25.640
react to programming when to use it and when not to use it,

00:15:25.640 --> 00:15:26.680
etcetera.

00:15:26.680 --> 00:15:29.890
Hope it makes sense.

