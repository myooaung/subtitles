WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.380
Let's talk about restaurant Web services in order to understand what is the rest of Web

00:00:06.380 --> 00:00:07.050
service.

00:00:07.050 --> 00:00:10.910
So here's the definition defining what is the rest for Web service?

00:00:10.910 --> 00:00:16.240
A service which is built on the stock director is called Arrest Will Web service Now,

00:00:16.240 --> 00:00:16.780
Obviously,

00:00:16.780 --> 00:00:18.700
this may not make complete sense to you,

00:00:18.700 --> 00:00:23.710
because there are a lot of terminologies and principles that we should be a bit off in

00:00:23.710 --> 00:00:24.510
order to understand.

00:00:24.510 --> 00:00:26.350
What exactly is restaurant conjecture?

00:00:26.350 --> 00:00:27.100
By the way,

00:00:27.100 --> 00:00:29.980
restaurants for representational state transfer,

00:00:29.980 --> 00:00:32.110
and we'll understand it as well.

00:00:32.110 --> 00:00:38.510
Incoming SLIDES The first time that you need to know is something called a resource.

00:00:38.510 --> 00:00:40.830
Now there are a lot of definitions to define.

00:00:40.830 --> 00:00:41.860
What is the resource?

00:00:41.860 --> 00:00:43.360
Industrial architecture?

00:00:43.360 --> 00:00:44.990
But according to me,

00:00:44.990 --> 00:00:46.650
I want to put it very simple.

00:00:46.650 --> 00:00:50.680
You can think off resource as something that you can manipulate with a.

00:00:50.680 --> 00:00:51.210
You are.

00:00:51.210 --> 00:00:52.300
For example,

00:00:52.300 --> 00:00:56.710
a resource can be a document which contribute or the Internet with a You'll.

00:00:56.710 --> 00:00:59.910
Or it could also be a row in the database,

00:00:59.910 --> 00:01:04.880
which you can manipulate with your if you're not exposed to Web services.

00:01:04.880 --> 00:01:09.830
This might sound strange that you'll be able to manipulate a database record with a UAL.

00:01:09.830 --> 00:01:13.960
But that's what rest is meant for investable Web services,

00:01:13.960 --> 00:01:20.760
even a record in a database systems as a resource because you can manipulate it with a year

00:01:20.760 --> 00:01:21.100
earlier,

00:01:21.100 --> 00:01:27.550
an example off which can be seen in here assuming that you are having a school management

00:01:27.550 --> 00:01:28.130
application,

00:01:28.130 --> 00:01:28.930
for instance,

00:01:28.930 --> 00:01:34.580
and let's that you'd like to retrieve all the students available in the database for which

00:01:34.580 --> 00:01:37.350
you would use a You are that looks something like this.

00:01:37.350 --> 00:01:41.110
You'd say Whatever is the domain and then slash students.

00:01:41.110 --> 00:01:44.250
This riposte would land in a controller logic,

00:01:44.250 --> 00:01:47.640
which will have a your mapping that maps with this,

00:01:47.640 --> 00:01:48.650
your whole Patton,

00:01:48.650 --> 00:01:51.540
and it would get that call to business.

00:01:51.540 --> 00:01:52.020
Logical.

00:01:52.020 --> 00:01:52.650
Whatever.

00:01:52.650 --> 00:01:58.290
Ultimate ID will retrieve all the students in the form off the XML or Jason.

00:01:58.290 --> 00:02:03.660
The data would look something like this if errors in Jason and then would be sent back to

00:02:03.660 --> 00:02:04.280
the client.

00:02:04.280 --> 00:02:05.760
It is up to the client.

00:02:05.760 --> 00:02:06.720
Depending on the client,

00:02:06.720 --> 00:02:07.890
it could be a silver.

00:02:07.890 --> 00:02:09.600
It could be a JavaScript technology,

00:02:09.600 --> 00:02:10.310
etcetera.

00:02:10.310 --> 00:02:12.120
Whatever it is ultimate,

00:02:12.120 --> 00:02:15.460
it's going to consume that data and do whatever it wants to do.

00:02:15.460 --> 00:02:17.210
Another example is,

00:02:17.210 --> 00:02:17.470
let's say,

00:02:17.470 --> 00:02:21.070
you wanted to access a specific record off a student,

00:02:21.070 --> 00:02:23.040
bypassing the identifier.

00:02:23.040 --> 00:02:23.910
So in this case,

00:02:23.910 --> 00:02:27.760
we're trying to retrieve a student having the following i D.

00:02:27.760 --> 00:02:30.800
And this over would respond back,

00:02:30.800 --> 00:02:34.870
or the Web service would respond back with defaulting Jason Data.

00:02:34.870 --> 00:02:35.820
Likewise,

00:02:35.820 --> 00:02:37.630
inside Web services,

00:02:37.630 --> 00:02:41.130
you would be able to seek all the services offered by Web service.

00:02:41.130 --> 00:02:42.290
With you are,

00:02:42.290 --> 00:02:45.480
Let's talk about rest ful methods.

00:02:45.480 --> 00:02:48.980
Restroom Web services relies on extradicted methods,

00:02:48.980 --> 00:02:53.500
so you can pretty much use all the standard of stripping methods in order to manage plate

00:02:53.500 --> 00:02:54.550
with the resource.

00:02:54.550 --> 00:02:56.040
For example,

00:02:56.040 --> 00:02:59.670
he could use has to do to get method like we did earlier,

00:02:59.670 --> 00:03:06.390
in order to access or get a resource from this over are you could use the post method in

00:03:06.390 --> 00:03:09.610
order to create a resource on the server you can use.

00:03:09.610 --> 00:03:15.980
Put in order to update a resource on the silver or delete in order to delete a record in

00:03:15.980 --> 00:03:18.380
the silver or resource in the silver.

00:03:18.380 --> 00:03:20.840
For example,

00:03:20.840 --> 00:03:22.690
If elected the leader store into card,

00:03:22.690 --> 00:03:24.970
you pretty much send the same request,

00:03:24.970 --> 00:03:28.600
but using it delayed method instead off get mattered,

00:03:28.600 --> 00:03:29.650
and obviously,

00:03:29.650 --> 00:03:30.670
as you might have guessed.

00:03:30.670 --> 00:03:35.450
We can't use these methods from the browser because browser's would only support get in

00:03:35.450 --> 00:03:39.110
post methods would have some additional tools to do their job.

00:03:39.110 --> 00:03:39.480
For us,

00:03:39.480 --> 00:03:40.250
for example,

00:03:40.250 --> 00:03:44.750
we have a chrome plug in called Postman How we convey trauma to like coal.

00:03:44.750 --> 00:03:47.270
You know,

00:03:47.270 --> 00:03:51.410
some of the other elements in just for architecture that we should be aware off.

00:03:51.410 --> 00:03:53.370
We have request headers.

00:03:53.370 --> 00:03:58.950
This is where you would include authorization and authentication information because in

00:03:58.950 --> 00:04:02.830
most cases you don't want pep services to be accessible by everyone.

00:04:02.830 --> 00:04:05.730
That has to be some kind of authentication or authorization.

00:04:05.730 --> 00:04:11.410
Maybe I won't expose my Web service to only paid audience who have the credentials.

00:04:11.410 --> 00:04:16.910
So this is where you will include those authorization authentication details so that my

00:04:16.910 --> 00:04:19.360
service can provide services to you are declined.

00:04:19.360 --> 00:04:24.550
The request body is something very would include the data,

00:04:24.550 --> 00:04:30.190
how you would essentially include a representation off a resource in order to perform some

00:04:30.190 --> 00:04:30.990
operation,

00:04:30.990 --> 00:04:33.550
for example,

00:04:33.550 --> 00:04:36.220
you might have and data that looks something like this,

00:04:36.220 --> 00:04:41.050
and you're going to use the post matter off extra DP in order to send the request.

00:04:41.050 --> 00:04:46.350
So that way the student entry will be stored as a record in the database.

00:04:46.350 --> 00:04:48.890
Now this brings me to talk about what is rest.

00:04:48.890 --> 00:04:52.180
Rest stands for presentational state transfer.

00:04:52.180 --> 00:04:55.850
What that means is when you're trying to retrieve the student information,

00:04:55.850 --> 00:05:02.880
the record that is present in the database is represented in in the form of Jason or

00:05:02.880 --> 00:05:03.510
example,

00:05:03.510 --> 00:05:05.130
whichever declined requests.

00:05:05.130 --> 00:05:08.870
So that is essentially representation off a state off,

00:05:08.870 --> 00:05:11.150
a particular object reciting on the silver.

00:05:11.150 --> 00:05:16.720
And you're transferring it from this over to the client in a former that normal human can

00:05:16.720 --> 00:05:17.490
understand.

00:05:17.490 --> 00:05:21.360
And then you have response body,

00:05:21.360 --> 00:05:22.320
I mean magnified.

00:05:22.320 --> 00:05:23.100
To get request,

00:05:23.100 --> 00:05:24.960
you're going to get back with some response.

00:05:24.960 --> 00:05:27.520
Typical in the form off XML or Jason.

00:05:27.520 --> 00:05:30.490
All this information would be part of the Esther Dip.

00:05:30.490 --> 00:05:31.630
It responds body,

00:05:31.630 --> 00:05:33.650
and that's what this means.

00:05:33.650 --> 00:05:35.680
An investable architecture.

00:05:35.680 --> 00:05:39.750
We would use the extra devastated scored in order to show the status.

00:05:39.750 --> 00:05:40.690
For example,

00:05:40.690 --> 00:05:43.210
if you're able to retrieve a record from the server,

00:05:43.210 --> 00:05:45.040
then you're going to see 200.

00:05:45.040 --> 00:05:45.430
Okay,

00:05:45.430 --> 00:05:47.280
status off extra DP.

00:05:47.280 --> 00:05:48.340
Similarly,

00:05:48.340 --> 00:05:52.770
if you're able to update or put their record using post method,

00:05:52.770 --> 00:05:57.050
then you'll be able to see 201 created as a status.

00:05:57.050 --> 00:06:00.320
And if your authorization and authentication is invalid,

00:06:00.320 --> 00:06:03.850
then you may see the several code for one are not authorized.

00:06:03.850 --> 00:06:06.920
Now I'm pretty sure that if you're a beginner,

00:06:06.920 --> 00:06:08.120
pop up services,

00:06:08.120 --> 00:06:11.160
all this mess sound a little complicated.

00:06:11.160 --> 00:06:12.690
But actually it isn't.

00:06:12.690 --> 00:06:15.130
Once we take a look at an example in future,

00:06:15.130 --> 00:06:19.260
you'll definitely be able to connect the dots and understand what's happening.

00:06:19.260 --> 00:06:20.510
Well,

00:06:20.510 --> 00:06:22.050
rest is not any standard.

00:06:22.050 --> 00:06:22.820
Like,

00:06:22.820 --> 00:06:23.370
for example,

00:06:23.370 --> 00:06:24.590
if you're talking about soap,

00:06:24.590 --> 00:06:26.860
there is a particular form it off a message.

00:06:26.860 --> 00:06:28.110
In case off rest,

00:06:28.110 --> 00:06:30.910
you don't have toe follow any standards.

00:06:30.910 --> 00:06:32.440
But that being said,

00:06:32.440 --> 00:06:37.190
it's necessary that you need to follow these principles if you want your Web services.

00:06:37.190 --> 00:06:41.050
Toby Arrest for Web Service If you break this principles,

00:06:41.050 --> 00:06:41.680
you can.

00:06:41.680 --> 00:06:43.480
But it is you who will pay the price,

00:06:43.480 --> 00:06:46.250
so it's always better that you follow this principles.

00:06:46.250 --> 00:06:48.660
If you want to leverage the benefits off,

00:06:48.660 --> 00:06:49.780
rest will architecture,

00:06:49.780 --> 00:06:53.310
the first of which is something called stateless,

00:06:53.310 --> 00:07:00.040
which means silver or the Web service should not keep any client information because Arabs

00:07:00.040 --> 00:07:05.120
services publicly available over the Internet and many clients can send request to it if

00:07:05.120 --> 00:07:10.070
the server stores all the time and information to maintain the conversation state that's

00:07:10.070 --> 00:07:11.940
going to cause a lot of resource drain.

00:07:11.940 --> 00:07:15.100
So it's necessary industrial architecture.

00:07:15.100 --> 00:07:20.650
Every request that comes from the client should be treated as a brand new request,

00:07:20.650 --> 00:07:24.340
even if the previous request had come just a moment ago.

00:07:24.340 --> 00:07:30.900
And it's the responsibility of the client to provide all the necessary information in order

00:07:30.900 --> 00:07:32.350
to process the request.

00:07:32.350 --> 00:07:35.370
The second principle is so called cashing,

00:07:35.370 --> 00:07:43.150
which means the plane must be able to store the retrieved data are cash the retreat data?

00:07:43.150 --> 00:07:44.660
What that means is,

00:07:44.660 --> 00:07:45.400
let's ascent,

00:07:45.400 --> 00:07:48.460
I get requests and I got back with some response from the server.

00:07:48.460 --> 00:07:53.780
I should be able to store that information in the client machine so that if trying send the

00:07:53.780 --> 00:07:54.950
same request again,

00:07:54.950 --> 00:07:57.650
the request doesn't have to go all the way to the server.

00:07:57.650 --> 00:08:01.350
But instruction retrieved from within the client itself.

00:08:01.350 --> 00:08:02.470
And of course,

00:08:02.470 --> 00:08:04.140
salvo can configure.

00:08:04.140 --> 00:08:07.100
How much time should the response be cashed,

00:08:07.100 --> 00:08:07.850
etcetera?

00:08:07.850 --> 00:08:11.550
The third principle is called a layered system.

00:08:11.550 --> 00:08:14.710
What this simply means is your website.

00:08:14.710 --> 00:08:19.170
We should be able to split up into multiple modules and they can be deciding on multiple

00:08:19.170 --> 00:08:19.910
servers.

00:08:19.910 --> 00:08:21.900
But from decline Prospect toe,

00:08:21.900 --> 00:08:27.160
it has to send requests to only one entity and shouldn't be bothered about all the

00:08:27.160 --> 00:08:28.890
different entities.

00:08:28.890 --> 00:08:30.060
So essentially,

00:08:30.060 --> 00:08:35.100
Klein doesn't have to bother about how the Web services managed on the sour end.

00:08:35.100 --> 00:08:38.480
It just has to be able to send a request with a your.

00:08:38.480 --> 00:08:43.250
The fourth principle is so called uniform contract.

00:08:43.250 --> 00:08:46.750
This is actually a combination of multiple other principles,

00:08:46.750 --> 00:08:49.910
and the first of which is identification off resource,

00:08:49.910 --> 00:08:51.620
which we've already talked about.

00:08:51.620 --> 00:08:54.050
A resource must be identified with a you'll.

00:08:54.050 --> 00:08:55.570
That's what this means.

00:08:55.570 --> 00:09:00.150
And then we have resource manipulation through representation.

00:09:00.150 --> 00:09:03.620
When you're trying to start a record or update and existent record,

00:09:03.620 --> 00:09:08.450
you're essentially manipulating a resource with the representation you're going to send a

00:09:08.450 --> 00:09:13.380
Jason Data in order to manipulate a resource on the server side.

00:09:13.380 --> 00:09:16.250
That's what the Saiz next off,

00:09:16.250 --> 00:09:18.390
which is self descriptive mess age,

00:09:18.390 --> 00:09:20.750
and it's something that we're all that we talked about.

00:09:20.750 --> 00:09:26.460
It just simply means that the line has to provide all the required information in order for

00:09:26.460 --> 00:09:28.200
Silver to process the request.

00:09:28.200 --> 00:09:29.490
Next,

00:09:29.490 --> 00:09:34.150
we have hyper media as engine off applications state or simply Ha dios.

00:09:34.150 --> 00:09:35.340
Well,

00:09:35.340 --> 00:09:36.670
to put it simply,

00:09:36.670 --> 00:09:38.580
whenever client sends a request,

00:09:38.580 --> 00:09:43.440
the response from the server must have enough information to let the client take for their

00:09:43.440 --> 00:09:44.150
actions.

00:09:44.150 --> 00:09:47.830
We're going to take a look at a quick example off at the next slide and then you'll

00:09:47.830 --> 00:09:48.750
understand better.

00:09:48.750 --> 00:09:51.250
Next we have playing silver.

00:09:51.250 --> 00:09:53.460
We just simply means so over,

00:09:53.460 --> 00:09:56.240
not care about the presentation logic.

00:09:56.240 --> 00:09:59.100
So it doesn't care about how your data is present there,

00:09:59.100 --> 00:09:59.880
etcetera.

00:09:59.880 --> 00:10:00.940
And at the same time,

00:10:00.940 --> 00:10:03.080
client does not have to take care off.

00:10:03.080 --> 00:10:06.650
Storing the data is the responsibility off the Web service.

00:10:06.650 --> 00:10:12.150
So here is a quick example of hyper media as engine off application state,

00:10:12.150 --> 00:10:14.260
when we get into examples,

00:10:14.260 --> 00:10:15.870
will understand this even better.

00:10:15.870 --> 00:10:17.210
But here is what it is,

00:10:17.210 --> 00:10:17.950
roughly.

00:10:17.950 --> 00:10:20.090
So whenever you're trying to say,

00:10:20.090 --> 00:10:22.990
retrieve the account information off,

00:10:22.990 --> 00:10:25.250
a person has done that phone number,

00:10:25.250 --> 00:10:28.270
you're not only going to get how much is the balance left,

00:10:28.270 --> 00:10:30.450
but the soldier has also responded,

00:10:30.450 --> 00:10:34.250
but bunch off links using which the client can take action.

00:10:34.250 --> 00:10:35.380
For example,

00:10:35.380 --> 00:10:35.880
using this,

00:10:35.880 --> 00:10:42.130
your you can deposit some money are using this you convict drove some money or transfer of

00:10:42.130 --> 00:10:42.650
clothes.

00:10:42.650 --> 00:10:43.470
But then,

00:10:43.470 --> 00:10:44.950
if you don't have enough funds,

00:10:44.950 --> 00:10:47.100
are few balances in negative,

00:10:47.100 --> 00:10:51.950
then you shouldn't be prompted with other links apart from the deposit,

00:10:51.950 --> 00:10:54.460
because when your funds are negative,

00:10:54.460 --> 00:10:57.850
you should not be able to transfer money or withdraw money.

00:10:57.850 --> 00:11:01.570
And that's why those links should not be shown well.

00:11:01.570 --> 00:11:04.050
This is what is hot deals essentially.

00:11:04.050 --> 00:11:08.910
So when you have a restaurant Web service that follows all these principles,

00:11:08.910 --> 00:11:11.160
he can say that your architecture is arrestable,

00:11:11.160 --> 00:11:12.990
architectural and develop services.

00:11:12.990 --> 00:11:14.280
The rest will be up service.

00:11:14.280 --> 00:11:16.400
Now you might be wondering,

00:11:16.400 --> 00:11:20.390
what is the real difference between soap and rest?

00:11:20.390 --> 00:11:21.370
Web services?

00:11:21.370 --> 00:11:21.710
Will.

00:11:21.710 --> 00:11:26.220
You cannot really compare rest with soap because soap is a protocol.

00:11:26.220 --> 00:11:27.530
It's a messaging protocol,

00:11:27.530 --> 00:11:29.730
while rest is an architectural style.

00:11:29.730 --> 00:11:30.670
In fact,

00:11:30.670 --> 00:11:34.550
he can use so protocol inside the restaurant architecture as well.

00:11:34.550 --> 00:11:35.220
But again,

00:11:35.220 --> 00:11:37.400
maybe you would be limited with a maximal data.

00:11:37.400 --> 00:11:38.960
But what we can compare,

00:11:38.960 --> 00:11:39.510
though,

00:11:39.510 --> 00:11:43.900
is we can compare Estelle Web services with so based Web services.

00:11:43.900 --> 00:11:46.120
So here are some of the differences.

00:11:46.120 --> 00:11:48.380
The rest is an architectural style.

00:11:48.380 --> 00:11:54.640
Soap is a protocol so is based on XML and just would support multiple of the formats like

00:11:54.640 --> 00:11:55.630
Jason XML,

00:11:55.630 --> 00:11:56.500
Plain text,

00:11:56.500 --> 00:11:57.250
etcetera.

00:11:57.250 --> 00:11:58.100
In fact,

00:11:58.100 --> 00:12:00.480
the plant application can ask server.

00:12:00.480 --> 00:12:05.110
What kind of data is expecting and based on that themselves will respond.

00:12:05.110 --> 00:12:08.450
Back with the data at cribbage is an ex similar pain text.

00:12:08.450 --> 00:12:09.960
Similarly,

00:12:09.960 --> 00:12:17.010
rest exposes FBI with your mapping while soap Use annotations dressed Walks with Jiao Step

00:12:17.010 --> 00:12:19.080
technologies like Angular You,

00:12:19.080 --> 00:12:19.460
Jess,

00:12:19.460 --> 00:12:19.850
React,

00:12:19.850 --> 00:12:20.620
etcetera.

00:12:20.620 --> 00:12:22.050
Combat to Soap.

00:12:22.050 --> 00:12:27.770
One of the good reasons for that is the presentation of data in Jason Format,

00:12:27.770 --> 00:12:29.750
which is native to JavaScript.

00:12:29.750 --> 00:12:32.270
And since there is no overhead off,

00:12:32.270 --> 00:12:37.960
using XML in order to wrap the data rest requires very few resources.

00:12:37.960 --> 00:12:38.710
Combat,

00:12:38.710 --> 00:12:39.070
too,

00:12:39.070 --> 00:12:41.390
so best architectural and,

00:12:41.390 --> 00:12:42.170
moreover,

00:12:42.170 --> 00:12:44.510
rest responses can be cashed by the client,

00:12:44.510 --> 00:12:49.920
and soap will not support cashing Horrell.

00:12:49.920 --> 00:12:56.960
Rest is clearly a winner compact toe on my or soap and would allow us to have distributed

00:12:56.960 --> 00:13:03.000
applications and plan can be anyone who want to see the data from the Web service and our

00:13:03.000 --> 00:13:03.700
dimension.

00:13:03.700 --> 00:13:08.250
It is perfect option for single page applications and distributed applications

