WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.710
Let's talk about time out and this template.

00:00:02.710 --> 00:00:06.380
Imagine that you have an e commerce application.

00:00:06.380 --> 00:00:07.140
Let's call it.

00:00:07.140 --> 00:00:08.510
He comes service,

00:00:08.510 --> 00:00:13.400
which might want to talk to other Web services that are available on the Internet.

00:00:13.400 --> 00:00:19.040
Maybe your service want to talkto shipping and tracking service in order to track the

00:00:19.040 --> 00:00:20.200
shipping off the product.

00:00:20.200 --> 00:00:21.510
For example,

00:00:21.510 --> 00:00:26.180
maybe customer has requested toe check the status of shipping by entering the cord.

00:00:26.180 --> 00:00:31.140
You would send the cord to this shipping and tracking service and then get back.

00:00:31.140 --> 00:00:31.920
Some data,

00:00:31.920 --> 00:00:33.650
which will be shown to the user,

00:00:33.650 --> 00:00:34.670
similarly,

00:00:34.670 --> 00:00:36.450
might want to use other services like,

00:00:36.450 --> 00:00:37.190
for example,

00:00:37.190 --> 00:00:40.540
an email service in order to send out the transaction.

00:00:40.540 --> 00:00:43.380
Details received are shipping status etcetera.

00:00:43.380 --> 00:00:44.260
Likewise,

00:00:44.260 --> 00:00:48.820
you would typically get to work with other Web services that are available on the Internet

00:00:48.820 --> 00:00:48.820
.

00:00:48.820 --> 00:00:50.350
In such a scenario,

00:00:50.350 --> 00:00:54.050
would use arrest template in order to programmatically call.

00:00:54.050 --> 00:00:58.250
I'm not the Web servers and get back with some response and do something with it.

00:00:58.250 --> 00:00:59.560
And typically,

00:00:59.560 --> 00:01:03.050
the way it works is for each and every client request.

00:01:03.050 --> 00:01:05.850
There is a new threat which will be created,

00:01:05.850 --> 00:01:11.870
and this trade will not be available for other requests until this request gets processed

00:01:11.870 --> 00:01:12.650
completely,

00:01:12.650 --> 00:01:13.870
for example,

00:01:13.870 --> 00:01:18.010
it so that the client has requested to check the status off shipping of the product.

00:01:18.010 --> 00:01:21.000
Then there's a new threat which will be created,

00:01:21.000 --> 00:01:25.350
and the call would be delegated to the shipping and tracking service.

00:01:25.350 --> 00:01:31.270
But what if something is wrong on the server side and it is taking too long to get back the

00:01:31.270 --> 00:01:32.130
response?

00:01:32.130 --> 00:01:32.800
Well,

00:01:32.800 --> 00:01:36.580
insert scenario Thread was still wait for the response,

00:01:36.580 --> 00:01:40.990
which means this thread is not available to so any other requests.

00:01:40.990 --> 00:01:42.650
It will keep waiting forever.

00:01:42.650 --> 00:01:48.710
The real problem is you cannot get to create unlimited threats due to resource limitations

00:01:48.710 --> 00:01:50.510
and enhance the performance.

00:01:50.510 --> 00:01:56.740
You would have a triple with limited set off threats which will be re used to solve the

00:01:56.740 --> 00:01:57.850
incoming requests.

00:01:57.850 --> 00:02:00.530
The limit off threads can be configured,

00:02:00.530 --> 00:02:02.650
but it would typically be 200 or so.

00:02:02.650 --> 00:02:09.030
Now what if there are 200 threads inside the threat poor and there are 200 requests

00:02:09.030 --> 00:02:10.680
requesting for this service,

00:02:10.680 --> 00:02:12.970
Then all those threats would be occupied,

00:02:12.970 --> 00:02:15.650
and all those threats would be waiting forever,

00:02:15.650 --> 00:02:22.660
which means all the other requests which will hit the server will not have any threats toe

00:02:22.660 --> 00:02:23.590
handle them,

00:02:23.590 --> 00:02:26.240
and ultimately it would impact the end user.

00:02:26.240 --> 00:02:28.030
They'll have bad experiences,

00:02:28.030 --> 00:02:28.750
etcetera.

00:02:28.750 --> 00:02:31.050
Same is the case.

00:02:31.050 --> 00:02:32.720
In case off micro services,

00:02:32.720 --> 00:02:36.150
you may have multiple micro services like product micro service,

00:02:36.150 --> 00:02:39.180
echoing micro service and a bunch off other micro services,

00:02:39.180 --> 00:02:41.960
which will talk to each other using rest template.

00:02:41.960 --> 00:02:46.930
And you cannot risk having a micro service wait for the response from another micro service

00:02:46.930 --> 00:02:47.650
forever.

00:02:47.650 --> 00:02:53.620
It might degrade the performance off the oral application it may even result in and that

00:02:53.620 --> 00:02:56.650
application going down to the lack of resources.

00:02:56.650 --> 00:03:00.110
So surely this has to be addressed in some way or the other.

00:03:00.110 --> 00:03:02.600
So what's the solution?

00:03:02.600 --> 00:03:03.270
Well,

00:03:03.270 --> 00:03:06.090
the solution is configure time out.

00:03:06.090 --> 00:03:09.130
So whenever we delegate,

00:03:09.130 --> 00:03:12.250
the call is in the rest template from one Web service.

00:03:12.250 --> 00:03:14.250
We'll also set a time out.

00:03:14.250 --> 00:03:18.050
If we do not receive the response within that time period,

00:03:18.050 --> 00:03:22.890
then we're just trying to deal with the other instead of waiting forever and causing in

00:03:22.890 --> 00:03:24.690
that application to get impacted.

00:03:24.690 --> 00:03:29.400
So let's take a look at how we can country the time out in case of rest template.

00:03:29.400 --> 00:03:34.590
This is how we would configured the bean and return the rest template object.

00:03:34.590 --> 00:03:40.390
But this time we're going to send the perimeter to the constructor of rest template like so

00:03:40.390 --> 00:03:43.670
it is an instance off Hester deeply Components Client,

00:03:43.670 --> 00:03:45.070
Extra Deputy Quest Factory.

00:03:45.070 --> 00:03:46.600
It's a pretty long name,

00:03:46.600 --> 00:03:47.900
but that's how it is.

00:03:47.900 --> 00:03:53.350
You're instance She ate this class and then set a couple of properties.

00:03:53.350 --> 00:03:55.430
One is Toe said.

00:03:55.430 --> 00:03:59.350
The connection time out and the other is to set the re time out.

00:03:59.350 --> 00:04:00.420
Great time.

00:04:00.420 --> 00:04:04.440
What is applicable when you're reading the input stream connection.

00:04:04.440 --> 00:04:06.850
Time out is what is relevant for us now.

00:04:06.850 --> 00:04:12.050
And you would just pass this object as an argument to the constructor of rest template.

00:04:12.050 --> 00:04:15.400
And when spring creates instance off rest template,

00:04:15.400 --> 00:04:21.170
we now have the time outset from inside the controller logic.

00:04:21.170 --> 00:04:25.950
We're going to somehow simulate the behavior where the Web service is going to take.

00:04:25.950 --> 00:04:28.050
We're longer than expected.

00:04:28.050 --> 00:04:29.960
I'm going to use this website,

00:04:29.960 --> 00:04:31.840
it says to Lippestad dot years.

00:04:31.840 --> 00:04:34.780
This will allow me to gender it all these to depict codes,

00:04:34.780 --> 00:04:37.770
and I can also configure the sleep time.

00:04:37.770 --> 00:04:39.410
In this case,

00:04:39.410 --> 00:04:41.430
if I send to get too close to this,

00:04:41.430 --> 00:04:44.720
your old then I would get back 200.

00:04:44.720 --> 00:04:45.450
Okay.

00:04:45.450 --> 00:04:47.750
After waiting for 10 seconds,

00:04:47.750 --> 00:04:51.570
this is to simulate that this over is taking longer than expected.

00:04:51.570 --> 00:04:54.400
So essentially,

00:04:54.400 --> 00:04:59.940
this is equal into we sending the request to shipping service and it is taken 10 seconds to

00:04:59.940 --> 00:05:00.560
respond.

00:05:00.560 --> 00:05:02.660
But we're not willing to wait for that long.

00:05:02.660 --> 00:05:06.720
And if you remember,

00:05:06.720 --> 00:05:09.500
we said the time out to five seconds,

00:05:09.500 --> 00:05:12.680
so we'll wait for five seconds after sending the request.

00:05:12.680 --> 00:05:14.280
If we get the response,

00:05:14.280 --> 00:05:15.420
that's well and good.

00:05:15.420 --> 00:05:16.550
Otherwise,

00:05:16.550 --> 00:05:20.850
we would just handle the editor by using the other handler.

00:05:20.850 --> 00:05:26.050
Let's go back to eclipse and credit on our program and see it working.

00:05:26.050 --> 00:05:28.260
So he does a bean.

00:05:28.260 --> 00:05:32.350
And here is the controller logic.

00:05:32.350 --> 00:05:35.260
But before it on this application,

00:05:35.260 --> 00:05:41.950
I just would like to show you what is already configured inside the rest template.

00:05:41.950 --> 00:05:50.170
If you go to the constructor off rest Template one off its constructor takes in the

00:05:50.170 --> 00:05:52.750
instance off client unsuitability Chris factory,

00:05:52.750 --> 00:05:56.850
which is an interface if you check all its implementations.

00:05:56.850 --> 00:06:00.390
One off the implementation is simple.

00:06:00.390 --> 00:06:02.510
Client s to depict Chris factory,

00:06:02.510 --> 00:06:06.190
which is the default one used by rest template.

00:06:06.190 --> 00:06:12.070
And if you notice the connection time out as well as a free time out is configured to minus

00:06:12.070 --> 00:06:12.250
one,

00:06:12.250 --> 00:06:14.550
which means we'll have to wait forever.

00:06:14.550 --> 00:06:18.830
You can actually use one of the methods available last part off this class in order to

00:06:18.830 --> 00:06:20.290
configure these time outs.

00:06:20.290 --> 00:06:30.550
But we're going to be using this implementation right here.

00:06:30.550 --> 00:06:33.480
In order to do that.

00:06:33.480 --> 00:06:34.220
Well,

00:06:34.220 --> 00:06:36.370
you could use any off these implementations,

00:06:36.370 --> 00:06:38.800
but this is the one which is popularly used.

00:06:38.800 --> 00:06:44.000
Let me run out application.

00:06:44.000 --> 00:07:02.940
Let me go to Postman and send the get requests to our Web service,

00:07:02.940 --> 00:07:07.950
which will internally send the get requests to another Web service.

00:07:07.950 --> 00:07:16.250
So because it has been sent,

00:07:16.250 --> 00:07:19.010
it took longer than expected.

00:07:19.010 --> 00:07:25.650
And so we gotten better saying every time out.

00:07:25.650 --> 00:07:29.550
And we got fined internals over ever,

00:07:29.550 --> 00:07:35.960
which is a general carer if something is wrong on the solar side and the time actually took

00:07:35.960 --> 00:07:41.850
6.65 6.67 seconds while the computer price second,

00:07:41.850 --> 00:07:47.240
it's because because this time is calculated right when we send the request from this

00:07:47.240 --> 00:07:47.780
client,

00:07:47.780 --> 00:07:53.270
whereas whatever we had configure is how much time it should take from this over before we

00:07:53.270 --> 00:07:54.350
see the response.

00:07:54.350 --> 00:08:01.070
Now let me just change the court just a little bit and so that the silver is going to take

00:08:01.070 --> 00:08:02.290
just four seconds.

00:08:02.290 --> 00:08:04.080
Media,

00:08:04.080 --> 00:08:15.850
launch the application and now let's fire the equity or the request.

00:08:15.850 --> 00:08:23.190
And this time it's stoned it.

00:08:23.190 --> 00:08:23.770
Okay,

00:08:23.770 --> 00:08:24.700
which is expected.

00:08:24.700 --> 00:08:35.080
So whenever you're using this template to make sure that you add this extra peas off code,

00:08:35.080 --> 00:08:36.950
which is a lifesaver,

00:08:36.950 --> 00:08:38.750
hope it makes sense.

