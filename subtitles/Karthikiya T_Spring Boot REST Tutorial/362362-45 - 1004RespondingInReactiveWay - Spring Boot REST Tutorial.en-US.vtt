WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.850
Let's take a look at how we can send response and react away.

00:00:03.850 --> 00:00:05.100
But before that,

00:00:05.100 --> 00:00:09.790
let us try to understand how it works in non react away or in traditional way.

00:00:09.790 --> 00:00:15.400
Imagine that the client had requested for all the products that ever existed.

00:00:15.400 --> 00:00:21.420
So we would have to fetch all the parts from a data store and would have to wait until all

00:00:21.420 --> 00:00:23.630
those products are accumulated on the server,

00:00:23.630 --> 00:00:29.690
and it would then translate all the spirits and equal and Jason format to send it back to

00:00:29.690 --> 00:00:30.400
the client.

00:00:30.400 --> 00:00:32.620
Now there are two problems in here,

00:00:32.620 --> 00:00:35.250
since so what is dealing with so many records,

00:00:35.250 --> 00:00:39.050
and it would have to translate those objects into equal and Jason files.

00:00:39.050 --> 00:00:43.610
It's definitely going to drain the resources it may run out of RAM,

00:00:43.610 --> 00:00:49.320
and the worst part off this is it might actually impact other crucial operations that needs

00:00:49.320 --> 00:00:50.800
to take place on the server.

00:00:50.800 --> 00:00:54.000
So this is clearly a problem to be addressed.

00:00:54.000 --> 00:00:58.550
So this is have you write core in traditional way.

00:00:58.550 --> 00:01:02.380
You would fetch all the parts on the repository and only after.

00:01:02.380 --> 00:01:03.780
If it's all the products,

00:01:03.780 --> 00:01:05.940
even if it means one million products,

00:01:05.940 --> 00:01:08.260
you would wait for all the products to be fished.

00:01:08.260 --> 00:01:11.050
Only then you will send the response,

00:01:11.050 --> 00:01:13.850
so this is clearly inefficient.

00:01:13.850 --> 00:01:15.430
However,

00:01:15.430 --> 00:01:17.650
if you deal with this and react away,

00:01:17.650 --> 00:01:20.110
that line would ask for list off products.

00:01:20.110 --> 00:01:24.610
But this time you're actually going to stream the data back to that line,

00:01:24.610 --> 00:01:29.070
and the Silverado application will not wait until all the records off.

00:01:29.070 --> 00:01:33.050
Fresh application would just subscribe to the stream from the publisher,

00:01:33.050 --> 00:01:34.380
which is the data store,

00:01:34.380 --> 00:01:39.210
and it's utilizes each item and send it back to the plant in smaller chunks.

00:01:39.210 --> 00:01:42.640
And since this is not blocking operation,

00:01:42.640 --> 00:01:48.270
we're just going to eat less the threats that are not being utilized and is surely an

00:01:48.270 --> 00:01:51.250
efficient way to send huge chunks off later.

00:01:51.250 --> 00:01:58.050
And this is how the court would look like the only primary differences that,

00:01:58.050 --> 00:02:01.250
instead of responding back with standard at a list,

00:02:01.250 --> 00:02:05.060
were just responding back with the publish interface.

00:02:05.060 --> 00:02:07.530
So this could be flux or more no.

00:02:07.530 --> 00:02:09.050
Whatever is a publisher,

00:02:09.050 --> 00:02:10.500
and on top of that,

00:02:10.500 --> 00:02:11.750
we have an instruction.

00:02:11.750 --> 00:02:12.790
The stream.

00:02:12.790 --> 00:02:18.630
All the list of products from the data store are to ask the data store to provide a list of

00:02:18.630 --> 00:02:19.350
products.

00:02:19.350 --> 00:02:26.280
So we have flux dot generate method and this matter would just help us generate unlimited

00:02:26.280 --> 00:02:27.320
number of objects.

00:02:27.320 --> 00:02:28.250
In this case,

00:02:28.250 --> 00:02:31.950
I'm just trying to generate an unlimited number off product objects.

00:02:31.950 --> 00:02:37.940
And then we have the take method to take just as much as we need.

00:02:37.940 --> 00:02:38.660
In this case,

00:02:38.660 --> 00:02:45.190
I'm just asking for 10 products from the stream and then returning that flux object back to

00:02:45.190 --> 00:02:46.250
the client.

00:02:46.250 --> 00:02:49.390
Let's go to eclipse and see how it works.

00:02:49.390 --> 00:02:54.400
So here I have the exact same chord.

00:02:54.400 --> 00:02:57.600
Let me just launch the application.

00:02:57.600 --> 00:03:02.830
And since this is just to get mapping,

00:03:02.830 --> 00:03:06.450
you could send the request from the browser as well.

00:03:06.450 --> 00:03:17.380
But I'm just going to be using both man and there you have it.

00:03:17.380 --> 00:03:20.440
Although with this example,

00:03:20.440 --> 00:03:26.490
you won't be able to see much off a difference between traditional way and react away.

00:03:26.490 --> 00:03:28.370
But in real time applications,

00:03:28.370 --> 00:03:30.350
where the data is huge,

00:03:30.350 --> 00:03:33.460
this would really mean making a huge difference.

00:03:33.460 --> 00:03:36.790
Enough course.

00:03:36.790 --> 00:03:38.250
In order for this to work,

00:03:38.250 --> 00:03:45.350
I've actually created a poor Joe which is going to be our product object with the one

00:03:45.350 --> 00:03:51.710
battle mattress constructor that just takes in the name and you know,

00:03:51.710 --> 00:03:54.190
kiss All the broke names are same.

00:03:54.190 --> 00:03:56.080
This is just a symbol.

00:03:56.080 --> 00:03:59.650
It We have a huge chunk of products in the data store.

00:03:59.650 --> 00:04:02.550
This is not a real time scenario,

00:04:02.550 --> 00:04:03.950
of course.

