WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.330
Let's take a look at an example off cash mechanism in order to simulate a real time

00:00:06.330 --> 00:00:07.190
scenario.

00:00:07.190 --> 00:00:09.740
Imagine that we're trying to access a weather forecast.

00:00:09.740 --> 00:00:10.870
So with where?

00:00:10.870 --> 00:00:16.650
I'm trying to fetch the current temperature off my location so I would send the request,

00:00:16.650 --> 00:00:23.590
the question for this resource get temperature and then the sober would respond back with

00:00:23.590 --> 00:00:24.780
the falling data,

00:00:24.780 --> 00:00:31.890
the current temperature as well as the time at which I received this response from the

00:00:31.890 --> 00:00:32.450
server.

00:00:32.450 --> 00:00:38.250
We're going to need this information just so that will understand the concept better.

00:00:38.250 --> 00:00:39.480
Now,

00:00:39.480 --> 00:00:42.290
you're not any astronaut or something that you need to know.

00:00:42.290 --> 00:00:43.970
The very precise information.

00:00:43.970 --> 00:00:45.100
It's okay.

00:00:45.100 --> 00:00:46.820
Forget the data that is,

00:00:46.820 --> 00:00:48.290
like 30 seconds old.

00:00:48.290 --> 00:00:54.790
So what we're going to do on the suicide is when we respond back with this data,

00:00:54.790 --> 00:01:01.330
we can instruct the browser to keep this information in its cache memory for not more than

00:01:01.330 --> 00:01:02.350
30 seconds.

00:01:02.350 --> 00:01:05.790
So let's take a look at the core and try to understand it.

00:01:05.790 --> 00:01:12.960
What I have here is the crowd example that were talked about in previous chapters.

00:01:12.960 --> 00:01:14.200
In addition to that,

00:01:14.200 --> 00:01:19.300
I just introduced this new method with the falling mapping get temperature.

00:01:19.300 --> 00:01:27.000
I'm using this class cash control in order to specify the cash static tooth in this cousin

00:01:27.000 --> 00:01:30.710
specifying the max age and setting it to 30 seconds.

00:01:30.710 --> 00:01:33.150
He considered any time off your choice.

00:01:33.150 --> 00:01:36.220
This could be 30 minutes or 30 years or whatever it is.

00:01:36.220 --> 00:01:40.450
But do make sure that it makes sense based on your scenario.

00:01:40.450 --> 00:01:47.960
And I'm trying to gender to random number between 10 to 60 isn't the Java's math class.

00:01:47.960 --> 00:01:50.450
This is to simulate the current temperature.

00:01:50.450 --> 00:01:57.300
And ultimately I'm just trying to create a bunch of esteem attacks with all these details

00:01:57.300 --> 00:02:02.750
integrated so that the user will see the response.

00:02:02.750 --> 00:02:06.650
I also included one hyperlink,

00:02:06.650 --> 00:02:08.560
which does nothing.

00:02:08.560 --> 00:02:10.720
And when somebody clicks on this,

00:02:10.720 --> 00:02:13.210
it would pretty much request for the same resource.

00:02:13.210 --> 00:02:22.100
And finally I'm using the response entered the object in order to set the status as well as

00:02:22.100 --> 00:02:26.110
we are specifying the cash control directors.

00:02:26.110 --> 00:02:26.920
So ultimately,

00:02:26.920 --> 00:02:29.450
this would be part off the response headers.

00:02:29.450 --> 00:02:36.500
I'm also start off sending the string as part of the response body which will be rendered

00:02:36.500 --> 00:02:37.280
on the browser.

00:02:37.280 --> 00:02:40.170
So with this,

00:02:40.170 --> 00:02:42.080
let me reload the page.

00:02:42.080 --> 00:02:46.920
Regard this current details No no matter how many times he would send the records,

00:02:46.920 --> 00:02:51.580
you would see the same response because all these details were actually fished from the

00:02:51.580 --> 00:02:52.800
local cache memory,

00:02:52.800 --> 00:02:54.650
not from the silver.

00:02:54.650 --> 00:02:55.850
However,

00:02:55.850 --> 00:02:57.650
if you wait for 30 seconds,

00:02:57.650 --> 00:02:59.150
you would get the fresh details,

00:02:59.150 --> 00:03:05.050
because by that time all these details would be expired from the local cache memory.

00:03:05.050 --> 00:03:22.110
So let's wait for 30 seconds and there you have it.

00:03:22.110 --> 00:03:26.250
If you go to the network stab,

00:03:26.250 --> 00:03:35.220
you would notice that there is a header response center that saves cash control and max.

00:03:35.220 --> 00:03:38.110
Age is set toe 30 seconds.

00:03:38.110 --> 00:03:40.950
This is what I was talking about.

00:03:40.950 --> 00:03:48.600
There might be certain scenarios where you don't want to store details in the cache memory

00:03:48.600 --> 00:03:48.600
,

00:03:48.600 --> 00:03:49.430
for example,

00:03:49.430 --> 00:03:52.700
so that you're trying to perform some transaction.

00:03:52.700 --> 00:03:57.060
Maybe you're trying to send funds to your friend or whatever once after you send funds to

00:03:57.060 --> 00:04:00.990
your friend in to see the econ balance reflecting immediately,

00:04:00.990 --> 00:04:01.970
right,

00:04:01.970 --> 00:04:07.320
you don't want to send say $100 you see in your record that nothing has changed.

00:04:07.320 --> 00:04:09.160
That would be very inefficient,

00:04:09.160 --> 00:04:12.250
and it's going to result in bad user experience.

00:04:12.250 --> 00:04:17.880
So there are cases where you don't want to store the details in cache memory,

00:04:17.880 --> 00:04:24.650
especially since two data and there are scenarios where it's OK to store like in this case

00:04:24.650 --> 00:04:24.650
.

