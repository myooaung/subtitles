1
00:00:01,740 --> 00:00:05,940
You can download the latest version of Keycloak from their web page.

2
00:00:05,940 --> 00:00:08,570
Unzip it in a folder of your choice.

3
00:00:08,570 --> 00:00:12,280
To run it, in the bin directory,

4
00:00:12,280 --> 00:00:15,510
run the following command with the following Java

5
00:00:15,510 --> 00:00:20,230
argument to set the port to 8081, as by default,

6
00:00:20,230 --> 00:00:25,740
it uses port 8080, and that clashes with our demo application.

7
00:00:25,740 --> 00:00:28,240
If it's the first time you are accessing it,

8
00:00:28,240 --> 00:00:31,640
you will need to set up an admin username and password.

9
00:00:31,640 --> 00:00:34,640
The Keycloak GUI is very comprehensive.

10
00:00:34,640 --> 00:00:37,040
You can do everything here.

11
00:00:37,040 --> 00:00:40,140
The first thing we need to do is create our realm.

12
00:00:40,140 --> 00:00:45,740
A realm represents a set of users, credentials, roles, clients, and groups.

13
00:00:45,740 --> 00:00:50,850
You can configure many realms, but each one is isolated from one another.

14
00:00:50,850 --> 00:00:57,060
Now, in the new realm, you can set up your application as a client of Keycloak,

15
00:00:57,060 --> 00:01:00,220
giving it a name, protocol, in this case,

16
00:01:00,220 --> 00:01:02,160
we'll be using OpenID Connect,

17
00:01:02,160 --> 00:01:05,820
for Access Type set confidential as our application is a

18
00:01:05,820 --> 00:01:08,830
multi‑page application and runs server side,

19
00:01:08,830 --> 00:01:13,140
hence it can securely store the client ID and secret.

20
00:01:13,140 --> 00:01:16,540
Next, we set the redirect URI.

21
00:01:16,540 --> 00:01:22,010
If you recall, this is the path of the authorization endpoint within Spring,

22
00:01:22,010 --> 00:01:23,110
more specifically,

23
00:01:23,110 --> 00:01:28,400
the OAuthLoginAuthenticationFilter looks out for requests to this path.

24
00:01:28,400 --> 00:01:32,140
It's when the authorization server has authenticated the user,

25
00:01:32,140 --> 00:01:37,440
got their consent, and then redirected the user's browser back to the client,

26
00:01:37,440 --> 00:01:40,590
to this path, along with the authorization code,

27
00:01:40,590 --> 00:01:43,210
which Spring can then use against the token endpoint

28
00:01:43,210 --> 00:01:49,200
to exchange for the access token, you can add multiple redirect URIs here,

29
00:01:49,200 --> 00:01:53,700
but Keycloak will only redirect to a URI white‑listed here.

30
00:01:53,700 --> 00:01:57,910
Now, this is to prevent any injection attacks, like someone trying to change

31
00:01:57,910 --> 00:02:03,100
the redirect URI via a malicious browser plug‑in perhaps, as, if you recall,

32
00:02:03,100 --> 00:02:08,450
the authorization redirect request initially sent to Keycloak from our client

33
00:02:08,450 --> 00:02:14,120
included the desired redirect URI the application wants Keycloak to send the

34
00:02:14,120 --> 00:02:19,570
authorization code to after the user is authenticated, hence this is a kind of

35
00:02:19,570 --> 00:02:21,240
added security measure.

36
00:02:21,240 --> 00:02:24,440
Save. Okay, job done.

37
00:02:24,440 --> 00:02:28,270
We now have our application registered as a client with Keycloak.

38
00:02:28,270 --> 00:02:29,370
In the Credentials tab,

39
00:02:29,370 --> 00:02:33,240
you can see, we have a Client ID and Secret as we selected a

40
00:02:33,240 --> 00:02:36,410
confidential type. We now can create a user,

41
00:02:36,410 --> 00:02:40,720
Victoria, set the first and last name, give her an email,

42
00:02:40,720 --> 00:02:51,000
let's also give her a password, okay, done. Next, let's configure our application to use our new authorization server.

