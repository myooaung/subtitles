WEBVTT
1
00:00:01.740 --> 00:00:01.970
Now,

2
00:00:01.970 --> 00:00:04.230
I have stripped all the user registration

3
00:00:04.230 --> 00:00:07.110
authentication code out of the application.

4
00:00:07.110 --> 00:00:11.330
It also no longer stores user's passwords and credentials and is now

5
00:00:11.330 --> 00:00:14.470
more aligned with the single responsibility principle.

6
00:00:14.470 --> 00:00:18.530
In fact, this application no longer handles usernames and passwords.

7
00:00:18.530 --> 00:00:21.450
The dev team can now focus on the business functionality,

8
00:00:21.450 --> 00:00:23.540
which actually pay the bills,

9
00:00:23.540 --> 00:00:27.540
rather than the non‑functional authentication requirements.

10
00:00:27.540 --> 00:00:30.120
To configure this application to use Keycloak,

11
00:00:30.120 --> 00:00:33.410
all we need to do is, in our application.yml file,

12
00:00:33.410 --> 00:00:36.740
under security, oauth, client, registration,

13
00:00:36.740 --> 00:00:39.720
we register the client we created Keycloak,

14
00:00:39.720 --> 00:00:44.260
providing its client ID and secret, let's give it a name,

15
00:00:44.260 --> 00:00:46.260
let's set the redirect‑uri.

16
00:00:46.260 --> 00:00:46.730
Now,

17
00:00:46.730 --> 00:00:50.080
make sure this redirect‑uri matches what we put in

18
00:00:50.080 --> 00:00:53.610
Keycloak otherwise Keycloak will reject it.

19
00:00:53.610 --> 00:00:57.140
For authorization‑grant‑type, set the auth code,

20
00:00:57.140 --> 00:01:00.210
and under scope, include OpenID Connect,

21
00:01:00.210 --> 00:01:03.140
as this will be the protocol we are using.

22
00:01:03.140 --> 00:01:07.940
We also need to include the authorization server detail.

23
00:01:07.940 --> 00:01:10.810
So under provider, we can give it a name,

24
00:01:10.810 --> 00:01:16.050
so keycloak, and then add the provider to our client.

25
00:01:16.050 --> 00:01:20.470
Now, we could provide all the URIs to the endpoints,

26
00:01:20.470 --> 00:01:26.640
like the jwk endpoint where the client can bootstrap the public keys of the

27
00:01:26.640 --> 00:01:30.380
authorization server so we can verify the access tokens offline,

28
00:01:30.380 --> 00:01:33.810
the token endpoint, and user‑info endpoints,

29
00:01:33.810 --> 00:01:36.000
and the name of the ID field.

30
00:01:36.000 --> 00:01:39.210
If we were using an OAuth 2 provider, like Facebook,

31
00:01:39.210 --> 00:01:41.270
we would have to add all these.

32
00:01:41.270 --> 00:01:44.290
But we are using OpenID Connect,

33
00:01:44.290 --> 00:01:49.820
so all we have to do is add an issuer‑uri under the provider,

34
00:01:49.820 --> 00:01:53.100
which is basically the domain of the auth server.

35
00:01:53.100 --> 00:01:57.240
Now, in Keycloak, it also includes the path to the realm.

36
00:01:57.240 --> 00:02:01.240
Now, if you recall the previous modules when we described OpenID Connect,

37
00:02:01.240 --> 00:02:04.870
the spec defines a number of key endpoints,

38
00:02:04.870 --> 00:02:07.940
one is the discovery endpoint,

39
00:02:07.940 --> 00:02:13.850
and it's always to the path .well‑known/openid‑configuration for

40
00:02:13.850 --> 00:02:17.510
all OpenID Connect providers, so Spring will know to simply

41
00:02:17.510 --> 00:02:19.750
append that to the end of this URI.

42
00:02:19.750 --> 00:02:23.640
If you go to the Keycloak console for our realm,

43
00:02:23.640 --> 00:02:26.140
the endpoint is actually described here.

44
00:02:26.140 --> 00:02:29.130
And if you click on this link, you can see that path.

45
00:02:29.130 --> 00:02:32.040
And here is everything the client needs to bootstrap

46
00:02:32.040 --> 00:02:34.490
itself to use this authorization server,

47
00:02:34.490 --> 00:02:37.930
the authentication, token_endpoint,

48
00:02:37.930 --> 00:02:40.940
the introspection_endpoint if you want to validate tokens by

49
00:02:40.940 --> 00:02:43.640
sending them to the authorization server,

50
00:02:43.640 --> 00:02:48.400
or the jwk endpoint if you want to validate tokens offline by checking their

51
00:02:48.400 --> 00:02:52.300
signature using the public key of the authorization server,

52
00:02:52.300 --> 00:02:54.140
and much more.

53
00:02:54.140 --> 00:02:57.190
In our SecurityConfiguration class that extends the

54
00:02:57.190 --> 00:03:01.840
web security configuration adapter, everything is a lot more simpler now.

55
00:03:01.840 --> 00:03:07.490
We instruct Spring Security via the builder method that we want, oauth2Login.

56
00:03:07.490 --> 00:03:10.820
We still want an authenticationSuccessHandler,

57
00:03:10.820 --> 00:03:12.080
but this time,

58
00:03:12.080 --> 00:03:17.120
our application only deals with one type of authentication token and principal,

59
00:03:17.120 --> 00:03:24.440
and that's the OpenID Connect version, no longer any form or oauth2login tokens.

60
00:03:24.440 --> 00:03:27.340
So all we have to do is check if the user has a portfolio,

61
00:03:27.340 --> 00:03:31.810
and if not, we can register them with the claims on the OidcUser object.

62
00:03:31.810 --> 00:03:33.340
Job done.

63
00:03:33.340 --> 00:03:34.550
And in our controllers,

64
00:03:34.550 --> 00:03:39.560
we can now use the AuthenticatedPrincipal annotation for the OidcUser,

65
00:03:39.560 --> 00:03:43.540
which Spring will map for us, nice and simple.

66
00:03:43.540 --> 00:03:47.340
Okay, back to our SecurityConfiguration class.

67
00:03:47.340 --> 00:03:49.670
If the user is not authenticated,

68
00:03:49.670 --> 00:03:53.420
rather than showing them a link to log in with Keycloak, we

69
00:03:53.420 --> 00:03:56.190
can just put the redirect endpoint path,

70
00:03:56.190 --> 00:03:58.610
which is the one that the OAuth2 redirect, the

71
00:03:58.610 --> 00:04:01.840
/oauth2/authorization filter, looks out for.

72
00:04:01.840 --> 00:04:06.940
And if the user is not authenticated, it will redirect them straight to Keycloak.

73
00:04:06.940 --> 00:04:09.440
Okay, let's test this out.

74
00:04:09.440 --> 00:04:14.510
There, job done. A few lines of code, and you have authentication done.

75
00:04:14.510 --> 00:04:19.340
Now, of course, we are only scratching the surface of cloak's functionality.

76
00:04:19.340 --> 00:04:21.610
You can have multi‑factor authentication,

77
00:04:21.610 --> 00:04:22.990
user registration forms,

78
00:04:22.990 --> 00:04:26.940
email verification, they're even working on face recognition, you

79
00:04:26.940 --> 00:04:30.880
can also style the Keycloak Login page so it looks exactly like your

80
00:04:30.880 --> 00:04:34.640
application, all via the admin console.

81
00:04:34.640 --> 00:04:38.740
Okay, now, in the previous module, we had form and social login.

82
00:04:38.740 --> 00:04:43.440
So in the Keycloak console, under Identity Providers,

83
00:04:43.440 --> 00:04:48.040
let's select Facebook, put in the Client ID and Secret,

84
00:04:48.040 --> 00:04:52.110
the Scopes, so you have a lot more options here,

85
00:04:52.110 --> 00:04:53.990
but for now, that will do.

86
00:04:53.990 --> 00:04:56.840
Let's make sure it's also Enabled and then save it.

87
00:04:56.840 --> 00:05:00.940
If we restart our application and Keycloak,

88
00:05:00.940 --> 00:05:06.140
the user can now log in with form or with Facebook. Job done.

89
00:05:06.140 --> 00:05:06.920
Now, as mentioned,

90
00:05:06.920 --> 00:05:10.040
we are only scratching the surface of Keycloak here.

91
00:05:10.040 --> 00:05:13.040
Configuring it can be a whole course in itself.

92
00:05:13.040 --> 00:05:16.180
And the good news is, Keycloak has great documentation,

93
00:05:16.180 --> 00:05:20.110
so you will be able to easily find out how to tailor it to your

94
00:05:20.110 --> 00:05:29.000
application's security requirements, all via the Keycloak GUI. Next, let's wrap up this module.

