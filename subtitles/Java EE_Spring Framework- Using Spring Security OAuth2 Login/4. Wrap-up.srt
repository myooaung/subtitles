1
00:00:01,740 --> 00:00:04,560
Persistent login and session management can be a

2
00:00:04,560 --> 00:00:06,980
whole course in itself; however,

3
00:00:06,980 --> 00:00:09,620
the key is to understand the different sessions between

4
00:00:09,620 --> 00:00:11,670
user's browser, client application,

5
00:00:11,670 --> 00:00:14,940
authorization server, and social login providers,

6
00:00:14,940 --> 00:00:19,640
which will make your life easier when debugging issues or deciding how and

7
00:00:19,640 --> 00:00:23,130
where to implement persistent login in your application.

8
00:00:23,130 --> 00:00:25,460
Tokens also have their own expiry,

9
00:00:25,460 --> 00:00:29,740
so you could have an active session with an expired token.

10
00:00:29,740 --> 00:00:33,450
Refresh tokens can be used to get new access tokens without

11
00:00:33,450 --> 00:00:37,820
bothering the resource owner; however, they need to be kept secure.

12
00:00:37,820 --> 00:00:42,790
You shouldn't share them with other services as it's like sharing a password,

13
00:00:42,790 --> 00:00:47,040
and it's not recommended to use refresh tokens in public clients.

14
00:00:47,040 --> 00:00:49,350
Once a user is authenticated,

15
00:00:49,350 --> 00:00:53,820
the next stage is to restrict them to what they are entitled to in

16
00:00:53,820 --> 00:01:01,000
accordance with the principle of least privilege. So next, let's look at authorization with OAuth 2.

