WEBVTT
1
00:00:01.740 --> 00:00:04.210
Generally, for user authentication,

2
00:00:04.210 --> 00:00:08.510
you only need the access token initially to source the user's details from the

3
00:00:08.510 --> 00:00:12.450
userinfo endpoint and populate the principal object; however,

4
00:00:12.450 --> 00:00:15.610
you might need to use the access token against the /userinfo

5
00:00:15.610 --> 00:00:18.540
endpoint in your code at a later stage,

6
00:00:18.540 --> 00:00:22.140
perhaps to see if the user details have changed or to use the

7
00:00:22.140 --> 00:00:24.610
access token against other services or APIs,

8
00:00:24.610 --> 00:00:25.320
for example,

9
00:00:25.320 --> 00:00:29.580
hence it's important to understand that the access token also has an

10
00:00:29.580 --> 00:00:33.340
expiry time which is independent of the session.

11
00:00:33.340 --> 00:00:35.350
Your session could be active,

12
00:00:35.350 --> 00:00:39.570
and the user logged into your application with an expired access token,

13
00:00:39.570 --> 00:00:42.230
and when you attempt to use that token against,

14
00:00:42.230 --> 00:00:45.140
say, the /userinfo endpoint or another service,

15
00:00:45.140 --> 00:00:48.840
you end up with a 401 unauthorized; however,

16
00:00:48.840 --> 00:00:52.440
the user is still logged into the application via the sessions.

17
00:00:52.440 --> 00:00:56.340
Now, in this scenario, you could use a refresh token,

18
00:00:56.340 --> 00:01:00.150
which in OAuth is a token that can be used against the authorization

19
00:01:00.150 --> 00:01:04.050
server via the client to request a new access token.

20
00:01:04.050 --> 00:01:08.040
Now, you're probably thinking, why not just extend the life of the access token?

21
00:01:08.040 --> 00:01:10.370
Well, the benefit of this approach,

22
00:01:10.370 --> 00:01:14.570
it allows the access token to actually have a shorter expiry as

23
00:01:14.570 --> 00:01:17.500
access tokens are added in the headers of requests,

24
00:01:17.500 --> 00:01:20.240
hence they're handled by third parties,

25
00:01:20.240 --> 00:01:23.040
so there's a greater chance that they are leaked.

26
00:01:23.040 --> 00:01:27.070
And the shorter the lifespan, the less damage an attack can do,

27
00:01:27.070 --> 00:01:32.080
while the refresh token can have a longer expiry time as it's only ever used

28
00:01:32.080 --> 00:01:36.340
against the authorization server to get a new access token,

29
00:01:36.340 --> 00:01:39.820
so your application can secure it and have more confidence

30
00:01:39.820 --> 00:01:42.650
that no malicious party has access to it.

31
00:01:42.650 --> 00:01:45.370
In OAuth 2, for API access,

32
00:01:45.370 --> 00:01:49.250
it also saves you having to request the resource owner to

33
00:01:49.250 --> 00:01:52.520
reconsent each time the access token is required.

34
00:01:52.520 --> 00:01:54.740
Now, to request a refresh token,

35
00:01:54.740 --> 00:01:59.440
you simply put in the offline_access scope in your authorization request.

36
00:01:59.440 --> 00:02:02.720
The resource owner will then have to consent to this.

37
00:02:02.720 --> 00:02:04.860
Now, to get a new access token,

38
00:02:04.860 --> 00:02:07.950
you can use a refresh token against the token endpoint,

39
00:02:07.950 --> 00:02:10.200
along with the client ID and secret.

40
00:02:10.200 --> 00:02:13.910
Spring Security will actually automatically refresh tokens for

41
00:02:13.910 --> 00:02:17.530
you if the refresh token is present; however,

42
00:02:17.530 --> 00:02:21.940
that's out of the scope of this course and a topic for future courses.

43
00:02:21.940 --> 00:02:24.270
Now, if you're interested, you can check out my previous course,

44
00:02:24.270 --> 00:02:27.870
which goes over accessing stateless microservices with access

45
00:02:27.870 --> 00:02:30.640
tokens and deals with these kind of scenarios.

46
00:02:30.640 --> 00:02:34.890
And in stateless clients or public clients that deal with access tokens,

47
00:02:34.890 --> 00:02:39.240
it's generally not recommended to handle refresh tokens.

48
00:02:39.240 --> 00:02:39.410
Now,

49
00:02:39.410 --> 00:02:43.330
this is because you cannot securely store them in a public client and

50
00:02:43.330 --> 00:02:46.210
public clients cannot handle client IDs in secret,

51
00:02:46.210 --> 00:02:48.190
and without a client ID and secret,

52
00:02:48.190 --> 00:02:52.590
the auth server can't authenticate the client and ensure its

53
00:02:52.590 --> 00:02:55.440
giving the access token to the intended recipient.

54
00:02:55.440 --> 00:02:56.950
And if a refresh token is leaked,

55
00:02:56.950 --> 00:03:01.640
it can actually be worse than a password as you can always reset a password.

56
00:03:01.640 --> 00:03:09.000
Okta, for example, will not issue refresh tokens to public clients. Next, let's wrap up.

