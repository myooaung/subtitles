1
00:00:01,840 --> 00:00:06,547
In the first interaction of the OAuth 2 Auth Code grant,

2
00:00:06,547 --> 00:00:11,809
three parties are involved, the resource owner, clients,

3
00:00:11,809 --> 00:00:13,590
and the authorization server.

4
00:00:13,590 --> 00:00:17,470
Now they are all using the browser as an intermediary

5
00:00:17,470 --> 00:00:19,510
to communicate between each other.

6
00:00:19,510 --> 00:00:25,245
Now to see this in action, in your browser, select Inspect, Network

7
00:00:25,245 --> 00:00:28,560
tab. Now this will show you all the browser traffic.

8
00:00:28,560 --> 00:00:33,230
If you access the portfolio web page, use localhost in the filter are

9
00:00:33,230 --> 00:00:38,540
to remove some of the noise. As you can see, Spring Security redirected

10
00:00:38,540 --> 00:00:43,360
the browser to Facebook. This is the first part of the Auth Code grant,

11
00:00:43,360 --> 00:00:49,600
when the client redirects the resource owner to the authorization

12
00:00:49,600 --> 00:00:54,580
server for authentication. And this is the URL to Facebook's

13
00:00:54,580 --> 00:00:55,090
authorization server.

14
00:00:55,090 --> 00:01:00,871
Typically, you would need to preconfigure Spring Security with this URL,

15
00:01:00,871 --> 00:01:06,851
but because we are using Spring Boot, we get the configuration for free. In

16
00:01:06,851 --> 00:01:12,334
the CommonOAuth2Provider enum, you can see there's Google, Facebook,

17
00:01:12,334 --> 00:01:17,812
GitHub, and Okta, all currently supported out of the box. And here is that

18
00:01:17,812 --> 00:01:22,367
URL. Now if we were using some other provider that's not in this enum, then

19
00:01:22,367 --> 00:01:26,433
we would have had to provide this detail to Spring. Now there are a number

20
00:01:26,433 --> 00:01:31,034
of key parameters like the response_type=code, which indicates that we

21
00:01:31,034 --> 00:01:34,750
actually want to use the Authorization Code grant; the client_id,

22
00:01:34,750 --> 00:01:38,540
which is what we added to our configuration.

23
00:01:38,540 --> 00:01:42,230
It's our application's unique identifier with Facebook.

24
00:01:42,230 --> 00:01:46,989
The scope. Now in OAuth, scopes define the scope of the access the

25
00:01:46,989 --> 00:01:50,550
client is requesting to the user's protected resources.

26
00:01:50,550 --> 00:01:55,390
Now in this case, the app is asking for the user's public profile and

27
00:01:55,390 --> 00:01:57,650
the email address. Now on the Facebook website,

28
00:01:57,650 --> 00:02:01,110
you can see the types of scope supported by Facebook and

29
00:02:01,110 --> 00:02:04,400
the fields each of these would return.

30
00:02:04,400 --> 00:02:07,260
Next is the states and redirect URL. We will come

31
00:02:07,260 --> 00:02:10,080
back to this at the later stage.

32
00:02:10,080 --> 00:02:14,030
Our browser is now redirected to Facebook's login screen.

33
00:02:14,030 --> 00:02:20,570
We are now no longer interacting with cryptoportfolio. As outlined in the OAuth

34
00:02:20,570 --> 00:02:25,450
2 spec, Facebook's OAuth server needs to first authenticate us to confirm our

35
00:02:25,450 --> 00:02:30,470
identity and ensure we are in fact the resource owner and can authorize

36
00:02:30,470 --> 00:02:34,100
cryptoportfolio access to the protected resources.

37
00:02:34,100 --> 00:02:37,410
Now if you're already signed into Facebook, obviously have a cookie,

38
00:02:37,410 --> 00:02:42,448
you will not see the login screen. In this case, we'll sign into Facebook, and

39
00:02:42,448 --> 00:02:48,621
now it will ask us to authorize cryptoportfolio with the following fields,

40
00:02:48,621 --> 00:02:53,574
which line up with the requested scopes we previously asked for. Facebook even

41
00:02:53,574 --> 00:02:56,980
allows you to edit this and perhaps reduce what we provide to the client,

42
00:02:56,980 --> 00:02:59,470
which is kind of a cool feature.

43
00:02:59,470 --> 00:03:02,990
Now if we agree, you can see Facebook now sends a

44
00:03:02,990 --> 00:03:05,080
redirect back to cryptoportfolio.

45
00:03:05,080 --> 00:03:09,790
The redirect is to the URL that was provided in the initial

46
00:03:09,790 --> 00:03:12,160
authorization request from cryptoportfolio.

47
00:03:12,160 --> 00:03:16,830
Now one important thing to know is that most authorization

48
00:03:16,830 --> 00:03:20,077
servers, including Facebook, will only redirect to URLs that

49
00:03:20,077 --> 00:03:22,160
are preregistered with them.

50
00:03:22,160 --> 00:03:26,920
So, if we go back to the Facebook developer page,

51
00:03:26,920 --> 00:03:32,053
Facebook Login setup, here in the redirect URL validator, now currently

52
00:03:32,053 --> 00:03:36,983
we don't have an entry as Facebook simply, by default, approves localhost

53
00:03:36,983 --> 00:03:41,330
domains as they are most commonly used for local development. But in a

54
00:03:41,330 --> 00:03:46,610
production instance, the app would have to preregister the redirect URI.

55
00:03:46,610 --> 00:03:51,372
This is effectively a whitelist of all the redirect URLs Facebook will

56
00:03:51,372 --> 00:03:55,656
accept and protects against any malicious party changing this value,

57
00:03:55,656 --> 00:04:00,760
which could result in the user being redirected to some malicious page.

58
00:04:00,760 --> 00:04:05,108
Another parameter worth mentioning is the state parameter. In

59
00:04:05,108 --> 00:04:10,174
the original redirect, Spring Security generated a random value

60
00:04:10,174 --> 00:04:12,210
and included it in the request.

61
00:04:12,210 --> 00:04:14,960
Facebook simply included it back in the response.

62
00:04:14,960 --> 00:04:19,510
Now this is to protect against crossâ€‘site request forgery attacks, where some

63
00:04:19,510 --> 00:04:23,950
malicious party tries to send someone forged redirects to the server with

64
00:04:23,950 --> 00:04:26,440
another user's authorization code, for example.

65
00:04:26,440 --> 00:04:31,240
And since the malicious party won't have the original state parameter,

66
00:04:31,240 --> 00:04:33,700
Spring Security will just reject it.

67
00:04:33,700 --> 00:04:38,210
Next is the authorization code, not to be mistaken for the access token,

68
00:04:38,210 --> 00:04:43,740
as there is still one more step to perform for our application to get

69
00:04:43,740 --> 00:04:49,240
the access token, which is to exchange this auth code for the access

70
00:04:49,240 --> 00:04:50,940
token at the authorization server.

71
00:04:50,940 --> 00:04:54,530
You might be wondering, why the extra step? Wouldn't the

72
00:04:54,530 --> 00:04:58,624
authorization server simply sent back the access token instead of

73
00:04:58,624 --> 00:05:01,709
this authorization code? Well, up this point,

74
00:05:01,709 --> 00:05:06,130
the communication has been between multiple parties,

75
00:05:06,130 --> 00:05:10,640
user, client, and authorization, over the front channel using the

76
00:05:10,640 --> 00:05:12,940
browser, effectively using the browser's address bar.

77
00:05:12,940 --> 00:05:16,710
Now this works really well when you need to involve multiple

78
00:05:16,710 --> 00:05:20,030
parties in a transaction, and some of them might not have an IP

79
00:05:20,030 --> 00:05:21,800
address, but it's not very secure.

80
00:05:21,800 --> 00:05:26,360
Can you really trust the browser as it stores URLs in its

81
00:05:26,360 --> 00:05:30,507
history, and a malicious plugin could intercept or even alter

82
00:05:30,507 --> 00:05:32,920
it? Hence, to get the access token,

83
00:05:32,920 --> 00:05:37,430
the OAuth 2 spec requires the clients to go directly to

84
00:05:37,430 --> 00:05:40,908
the authorization server, providing the auth code along

85
00:05:40,908 --> 00:05:42,400
with its client ID and secret.

86
00:05:42,400 --> 00:05:46,590
So even if the auth code was to be intercepted,

87
00:05:46,590 --> 00:05:50,519
it's useless without the client ID and secret, which is only

88
00:05:50,519 --> 00:05:52,780
known to the client and the authorization server.

89
00:05:52,780 --> 00:05:59,880
This is why you won't see this exchange in the browser. But in the background,

90
00:05:59,880 --> 00:06:05,726
Spring Security is making direct calls, ideally in production over TLS, to

91
00:06:05,726 --> 00:06:11,047
Facebook's token URI, which Spring Boot has conveniently configured for us in

92
00:06:11,047 --> 00:06:17,360
the CommonOAuth2Provider enum. Our demo app can then use this access token to

93
00:06:17,360 --> 00:06:18,490
retrieve the user's personal data.

94
00:06:18,490 --> 00:06:20,810
Now, to see this in action,

95
00:06:20,810 --> 00:06:22,959
let's put a breakpoint in the

96
00:06:22,959 --> 00:06:28,089
OAuth2AuthorizationCodeAuthenticationProvider and restart and reaccess

97
00:06:28,089 --> 00:06:28,880
the application.

98
00:06:28,880 --> 00:06:34,020
We can now extract the access token returned back from Facebook, and we can

99
00:06:34,020 --> 00:06:37,020
use that to request the user's details from Facebook.

100
00:06:37,020 --> 00:06:43,177
So using the userinfo URI from the enum, we can make a simple get request

101
00:06:43,177 --> 00:06:45,500
to this URI, providing the access token in the header.

102
00:06:45,500 --> 00:06:49,880
As you can see, we get the user's info back. As this is a bearer token,

103
00:06:49,880 --> 00:06:54,200
anybody who has access to this token has access to the protected resource.

104
00:06:54,200 --> 00:06:57,865
Providers like Facebook built their own authentication implementation on

105
00:06:57,865 --> 00:07:02,190
top of OAuth 2. The problem with this is each provider of OAuth signâ€‘in

106
00:07:02,190 --> 00:07:07,440
did things their own way, making life hard for developers.

107
00:07:07,440 --> 00:07:12,694
Hence, OpenID Connect, which is a standard for authentication

108
00:07:12,694 --> 00:07:16,538
built on top of OAuth 2 to consolidate all these best practices

109
00:07:16,538 --> 00:07:22,740
and rules into a common spec so it's consistent across all OpenID

110
00:07:22,740 --> 00:07:26,440
Connect certified providers, making life easier for developers.

111
00:07:26,440 --> 00:07:30,111
And Spring Security also supports OpenID Connect, so

112
00:07:30,111 --> 00:07:36,000
it's even easier to use OpenID Connect. Let's check this out next.

