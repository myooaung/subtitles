WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.210
so far,

00:00:08.210 --> 00:00:11.070
we've seen how dependence is resolved by 11.

00:00:11.070 --> 00:00:14.730
We've seen the resolution of a simple dependency in other words,

00:00:14.730 --> 00:00:15.980
a dependency which isn't dependent.

00:00:15.980 --> 00:00:16.680
Anything else,

00:00:16.680 --> 00:00:18.980
it's just resolved as a simple jar file on.

00:00:18.980 --> 00:00:21.870
We've seen the resolution off a more complex dependency,

00:00:21.870 --> 00:00:26.280
which does depend on other dependencies to on this brought in so called transitive

00:00:26.280 --> 00:00:27.020
dependencies.

00:00:27.020 --> 00:00:30.180
So in addition to being a top level dependency included in the project,

00:00:30.180 --> 00:00:34.940
it also brought in some other jar files to which it depended upon in order to function on.

00:00:34.940 --> 00:00:39.740
We know that even achieves its dependency resolution mechanism by inspecting the Palm Files

00:00:39.740 --> 00:00:44.290
that are deployed and packaged along with the artifacts that deployed to 11 repository.

00:00:44.290 --> 00:00:47.750
So just as you specify the gaffe co ordinance in your project,

00:00:47.750 --> 00:00:51.260
that is the group Heidi artifact of the Inversion which tellme Evan,

00:00:51.260 --> 00:00:55.430
where the artifacts of the project is going to live inside madam repositories.

00:00:55.430 --> 00:01:00.280
This project can then be included is the dependency by using those same gap coordinates on

00:01:00.280 --> 00:01:04.380
this is what makes me even very flexible and makes a very sophisticated model for building

00:01:04.380 --> 00:01:04.850
software.

00:01:04.850 --> 00:01:09.070
We also had a look at the search for intended for the Melbourne Central repository as an

00:01:09.070 --> 00:01:13.070
easy means to be able to inspect those Palm Files on Look at the dependence of section on,

00:01:13.070 --> 00:01:16.400
figure out how dependencies were resolved by looking at a given artifact.

00:01:16.400 --> 00:01:18.750
Dependence is section in its palm file.

00:01:18.750 --> 00:01:19.270
However,

00:01:19.270 --> 00:01:22.130
there's a much easier way on this is to use the dependency plug in.

00:01:22.130 --> 00:01:26.700
So the dependency plugging in May even allows you to inspect dependencies on a project.

00:01:26.700 --> 00:01:28.600
So if we have a look in our project here,

00:01:28.600 --> 00:01:31.250
this is the weather project we have from before in here,

00:01:31.250 --> 00:01:34.650
we can see that we included Spring Web and we saw that brought in some more jar files.

00:01:34.650 --> 00:01:38.810
We can actually find out where those John Files come from in a much easier way by using the

00:01:38.810 --> 00:01:40.400
dependency plug into inspectors,

00:01:40.400 --> 00:01:41.990
and it will give us a dependency graph.

00:01:41.990 --> 00:01:43.090
So to do this,

00:01:43.090 --> 00:01:46.440
we type and be in dependency.

00:01:46.440 --> 00:01:50.880
This is a dependency plugging and then tree on.

00:01:50.880 --> 00:01:54.350
This is going to give us a dependency tree effectively a prince out off the graph of

00:01:54.350 --> 00:01:56.750
dependencies and then we can see where they come from.

00:01:56.750 --> 00:02:04.690
So if I answer so from here we have the actual project artifact at the very top,

00:02:04.690 --> 00:02:06.420
which is the root of the dependency tree.

00:02:06.420 --> 00:02:08.890
This is my Web app 10 snapshot.

00:02:08.890 --> 00:02:11.350
Then we have to top level dependencies directly under there,

00:02:11.350 --> 00:02:15.200
which are Spring Web and genuine it J units,

00:02:15.200 --> 00:02:17.860
a test dependency that so that won't make its way into the war file.

00:02:17.860 --> 00:02:18.240
It's over.

00:02:18.240 --> 00:02:21.220
Just focus on Spring Web For now and under leave Spring Web,

00:02:21.220 --> 00:02:24.390
we see that it required four dependencies itself.

00:02:24.390 --> 00:02:26.790
These were springing up E spring beans,

00:02:26.790 --> 00:02:30.720
spring context on spring core and of those four dependencies,

00:02:30.720 --> 00:02:34.460
both of those each headed dependency on one other dependency.

00:02:34.460 --> 00:02:36.000
In the case of spring context,

00:02:36.000 --> 00:02:37.930
it depended upon the spring expression on.

00:02:37.930 --> 00:02:39.140
In the case of spring core,

00:02:39.140 --> 00:02:40.750
it depended upon Commons logging.

00:02:40.750 --> 00:02:45.800
And so all of those together when we inspected the contents of the wall file and we'll do

00:02:45.800 --> 00:02:46.190
that again.

00:02:46.190 --> 00:02:59.560
Now resulted in these seven jar files being included in the Web INF Lib directory and this

00:02:59.560 --> 00:03:00.320
is how you inspects.

00:03:00.320 --> 00:03:01.680
Dependence is in Mervan,

00:03:01.680 --> 00:03:03.050
using the dependency plug in

