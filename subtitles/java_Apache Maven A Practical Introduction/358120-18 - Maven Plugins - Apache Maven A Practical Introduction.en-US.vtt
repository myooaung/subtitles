WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.370
So in this video,

00:00:08.370 --> 00:00:10.810
we're just going to talk about how we can use plug ins.

00:00:10.810 --> 00:00:16.010
Some even abstracts all of its build functionality away and packages them up into plug ins

00:00:16.010 --> 00:00:16.010
,

00:00:16.010 --> 00:00:17.730
which provide different,

00:00:17.730 --> 00:00:20.980
discrete sets of build functionality for a typical bill tasks.

00:00:20.980 --> 00:00:21.440
So,

00:00:21.440 --> 00:00:21.940
for example,

00:00:21.940 --> 00:00:24.670
if you look here on the main website in the plugging of section,

00:00:24.670 --> 00:00:27.760
then we'll see a whole lot of plug ins for doing different types of things.

00:00:27.760 --> 00:00:38.220
So if a compiling Java source card with the compile a plug in for making jar files using

00:00:38.220 --> 00:00:43.100
the job plug in a war files with the war plug in are executing tests with the show if I

00:00:43.100 --> 00:00:43.560
plug in.

00:00:43.560 --> 00:00:49.140
So these are just some examples of plug ins that you can use in Melbourne projects on this

00:00:49.140 --> 00:00:49.970
particular site,

00:00:49.970 --> 00:00:52.070
the section of the movement website Melvin Dogpatch.

00:00:52.070 --> 00:00:56.690
Dog slash plug ins is a great place to come to give you an idea off which plug ins you

00:00:56.690 --> 00:00:57.390
might want to use.

00:00:57.390 --> 00:00:58.960
It is to have a look around on this page.

00:00:58.960 --> 00:01:01.290
Whenever you want to do something in American build on,

00:01:01.290 --> 00:01:02.620
there's probably a plug in there for you,

00:01:02.620 --> 00:01:06.670
which you can use so this part of the movement website is a really great place to come to

00:01:06.670 --> 00:01:09.860
find out either which plug ins you might want to include into a built if you want to do

00:01:09.860 --> 00:01:11.590
with some new aspect to the build.

00:01:11.590 --> 00:01:12.660
Alternatively,

00:01:12.660 --> 00:01:17.080
if you want to configure or override the default behavior often existing plugging,

00:01:17.080 --> 00:01:18.190
which has already been used.

00:01:18.190 --> 00:01:23.290
So two examples of this if I want to include integration tests in my build,

00:01:23.290 --> 00:01:27.060
I'd come over here and click the failsafe,

00:01:27.060 --> 00:01:27.950
plug in on,

00:01:27.950 --> 00:01:29.510
have a read through the documentation here,

00:01:29.510 --> 00:01:32.470
which will tell me how to use that particular plug in.

00:01:32.470 --> 00:01:36.090
It will give an overview of the goals than it has,

00:01:36.090 --> 00:01:41.940
so you can see there to the failsafe integration tests and feel safe.

00:01:41.940 --> 00:01:45.720
Very fine on will Give me some sample usage and some examples to.

00:01:45.720 --> 00:01:46.600
So normally,

00:01:46.600 --> 00:01:48.150
whenever you go to the usage page,

00:01:48.150 --> 00:01:52.350
there's a snippet that you can include in the pond XML file.

00:01:52.350 --> 00:01:57.290
Here is how I have used the failsafe plugging in the pom XML file in the build section of

00:01:57.290 --> 00:01:58.170
the Pom XML.

00:01:58.170 --> 00:02:01.520
There was a plug in section on inside the plug in section.

00:02:01.520 --> 00:02:04.960
We have the actual plug in configuration for a given plug in.

00:02:04.960 --> 00:02:05.810
In this case,

00:02:05.810 --> 00:02:09.680
it's the Maven failsafe plug in on their You define a so called execution,

00:02:09.680 --> 00:02:12.150
which binds the goal off that plug in,

00:02:12.150 --> 00:02:14.290
which in this case is integration test.

00:02:14.290 --> 00:02:18.430
So that's like a method which is executed on the plug in itself to a particular phase of

00:02:18.430 --> 00:02:19.470
the build phase.

00:02:19.470 --> 00:02:23.410
Unless the blood in itself includes the default for is that it's going to buy into which,

00:02:23.410 --> 00:02:24.220
in this case,

00:02:24.220 --> 00:02:24.750
to feel safe.

00:02:24.750 --> 00:02:27.990
Plug in does as you can see here,

00:02:27.990 --> 00:02:31.750
where it says the failsafe plugging can be a vote by calling the very fine phase of the

00:02:31.750 --> 00:02:32.550
build life cycle.

00:02:32.550 --> 00:02:35.550
But we'll see more about that in the build life cycles video.

00:02:35.550 --> 00:02:36.650
If I go up,

00:02:36.650 --> 00:02:40.280
account to the plug in section,

00:02:40.280 --> 00:02:44.530
Let's stay the second example where I actually want to configure an existing plugging that

00:02:44.530 --> 00:02:45.850
has been used in the build.

00:02:45.850 --> 00:02:52.490
So let's consider the compiler plug him so the compiler plugging is used by default in

00:02:52.490 --> 00:02:54.270
Melbourne builds to compile the source code,

00:02:54.270 --> 00:02:58.650
so I could again click the usage section to look at the configuration.

00:02:58.650 --> 00:03:04.350
So if I wanted to put an extra configuration,

00:03:04.350 --> 00:03:05.440
I could put it in here.

00:03:05.440 --> 00:03:10.520
One such example of this is if I wanted to change the source code level so you can change

00:03:10.520 --> 00:03:11.560
the level of Java,

00:03:11.560 --> 00:03:13.560
which to compile a plug in is expecting.

00:03:13.560 --> 00:03:14.240
So I can say,

00:03:14.240 --> 00:03:14.750
for example,

00:03:14.750 --> 00:03:18.150
I want to compile 1.6 source code,

00:03:18.150 --> 00:03:19.110
and above that,

00:03:19.110 --> 00:03:23.780
he's source code that's been betting against the Jugic a 1.6 the 1.6 J.

00:03:23.780 --> 00:03:23.900
T.

00:03:23.900 --> 00:03:24.310
K.

00:03:24.310 --> 00:03:27.050
That I can also specify the output for that as well.

00:03:27.050 --> 00:03:31.180
So the actual resulting class files and what version off the JV em they're gonna be

00:03:31.180 --> 00:03:32.020
compatible with.

00:03:32.020 --> 00:03:34.750
And we can see this in the example section here to the left,

00:03:34.750 --> 00:03:39.750
so compile using source and target Jarvik options.

00:03:39.750 --> 00:03:41.390
In this case,

00:03:41.390 --> 00:03:42.410
it's slightly more complicated.

00:03:42.410 --> 00:03:46.910
The plugging gives you two separate ways to configure those properties I threw.

00:03:46.910 --> 00:03:51.780
Some global properties defined at the root level of the project are defining them on the

00:03:51.780 --> 00:03:53.450
configuration of the plug in itself.

00:03:53.450 --> 00:03:54.680
On with this information,

00:03:54.680 --> 00:03:58.480
you should be able to get started using and configuring plug ins in your heaven builds

