WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.060
So in this video,

00:00:06.060 --> 00:00:09.900
we're going to see how to create a Web project using a different method archetype in the

00:00:09.900 --> 00:00:11.160
quick start when we've seen already,

00:00:11.160 --> 00:00:14.140
which produces projects which ultimately will produce jar files.

00:00:14.140 --> 00:00:16.650
This time we're gonna use the Melbourne Web archetype,

00:00:16.650 --> 00:00:18.830
which produces projects which are Web apps,

00:00:18.830 --> 00:00:20.430
which can be then packaged.

00:00:20.430 --> 00:00:21.270
Oppose war files,

00:00:21.270 --> 00:00:23.360
which will run on a container like Tomcat or Jabo,

00:00:23.360 --> 00:00:24.200
for example.

00:00:24.200 --> 00:00:26.150
So we're gonna go to Melvin,

00:00:26.150 --> 00:00:30.910
archetype generates,

00:00:30.910 --> 00:00:36.730
and we're gonna pass in this minus d filter again just to make sure that we only have the

00:00:36.730 --> 00:00:38.980
archetypes.

00:00:38.980 --> 00:00:44.010
Which out of the box with Melvin so they can American standard archetypes,

00:00:44.010 --> 00:00:44.550
if you will.

00:00:44.550 --> 00:00:49.690
Okay,

00:00:49.690 --> 00:00:51.080
so here we can see that again.

00:00:51.080 --> 00:00:52.000
As usual,

00:00:52.000 --> 00:00:55.170
it's trying to auto select the quick start archetype,

00:00:55.170 --> 00:00:55.980
which is number nine.

00:00:55.980 --> 00:00:57.730
We're gonna override it with the one on the bottom,

00:00:57.730 --> 00:01:00.710
which is number 12 which is the Web Parker time.

00:01:00.710 --> 00:01:01.970
So just enter 12.

00:01:01.970 --> 00:01:02.660
Yeah,

00:01:02.660 --> 00:01:03.070
the version.

00:01:03.070 --> 00:01:04.530
We're happy to have the last version,

00:01:04.530 --> 00:01:05.620
which is 1.0,

00:01:05.620 --> 00:01:08.050
which is the most recent version group I D.

00:01:08.050 --> 00:01:09.780
Will just type calm dissension.

00:01:09.780 --> 00:01:15.020
Training for the artifact only will call the project might went up diversions.

00:01:15.020 --> 00:01:16.710
Find at 10 snapshot on the packages.

00:01:16.710 --> 00:01:17.990
Find as well just hit.

00:01:17.990 --> 00:01:18.280
Yes,

00:01:18.280 --> 00:01:19.950
there to confirm and create the project.

00:01:19.950 --> 00:01:21.010
Okay,

00:01:21.010 --> 00:01:24.590
so now it's created a project called My Web Out of the archetype.

00:01:24.590 --> 00:01:28.650
So if I just clear this out and if we go into the Might Web up directory,

00:01:28.650 --> 00:01:30.750
we should see a project there,

00:01:30.750 --> 00:01:33.790
and we do this a Pond XML file on a source directory.

00:01:33.790 --> 00:01:36.220
So let's just take a quick look at this in sublime text.

00:01:36.220 --> 00:01:41.370
So if we're going to the pom XML file,

00:01:41.370 --> 00:01:45.980
then we see a couple of differences from the usual project created of the quick start

00:01:45.980 --> 00:01:47.400
archetype that we've seen before.

00:01:47.400 --> 00:01:49.180
First off is the packaging type,

00:01:49.180 --> 00:01:50.930
so the packaging tight before was jar,

00:01:50.930 --> 00:01:54.250
which means that the project would produce a jar file when it's built.

00:01:54.250 --> 00:01:54.620
Are you?

00:01:54.620 --> 00:01:57.590
When the Melvin Package fairs is run on for this project,

00:01:57.590 --> 00:01:59.660
that has changed the packaging type to war,

00:01:59.660 --> 00:02:03.050
which basically means it's gonna create a war file when the movement package fears it's one

00:02:03.050 --> 00:02:03.050
.

00:02:03.050 --> 00:02:07.420
The only other difference we have is the fact that we have on override here of the final

00:02:07.420 --> 00:02:08.500
name of the artifact.

00:02:08.500 --> 00:02:10.100
So in the build section here,

00:02:10.100 --> 00:02:11.600
you can see that the final name tag,

00:02:11.600 --> 00:02:15.960
which overrides the name off the actual artifact that it's building so the warfare will be

00:02:15.960 --> 00:02:16.770
called my Web app.

00:02:16.770 --> 00:02:18.670
That war as opposed to my Web,

00:02:18.670 --> 00:02:20.580
up 10 snapshot Don't war on.

00:02:20.580 --> 00:02:22.850
The reason for this is it just keeps things a little bit more manageable.

00:02:22.850 --> 00:02:23.620
The war file.

00:02:23.620 --> 00:02:26.830
When it auto expands into a Web Apps directory in Tomcat,

00:02:26.830 --> 00:02:27.540
for example,

00:02:27.540 --> 00:02:29.400
it's nice if it doesn't have the version.

00:02:29.400 --> 00:02:31.510
Suffix keeps things nice and straightforward.

00:02:31.510 --> 00:02:35.230
It also isn't available on the concepts path without the version suffix,

00:02:35.230 --> 00:02:36.500
which is easier for typing the U.

00:02:36.500 --> 00:02:38.350
R L into the browser and that kind of thing.

00:02:38.350 --> 00:02:40.260
So just keep things a little bit more manageable with that.

00:02:40.260 --> 00:02:44.350
Let's have a look beyond the pond XML father and have a look in the source directory.

00:02:44.350 --> 00:02:46.020
So if we're going to source,

00:02:46.020 --> 00:02:50.240
men will see we actually have two other directories now,

00:02:50.240 --> 00:02:51.600
instead of source Main Java,

00:02:51.600 --> 00:02:53.110
we have source hman resources.

00:02:53.110 --> 00:02:55.060
There's nothing in there currently,

00:02:55.060 --> 00:02:58.660
but we could put files in here which we wanted to have placed in the webbing of classes

00:02:58.660 --> 00:03:02.740
directory off the wall file alongside any compiled Java source files wanting to have in

00:03:02.740 --> 00:03:03.280
there as well.

00:03:03.280 --> 00:03:04.840
So if we wanted to include a servant,

00:03:04.840 --> 00:03:05.440
for example,

00:03:05.440 --> 00:03:07.640
would also create a Java subdirectory,

00:03:07.640 --> 00:03:11.460
a sibling directory to resources and Web app So it would be sourced me in Java,

00:03:11.460 --> 00:03:14.220
the usual standard job of production sources.

00:03:14.220 --> 00:03:15.210
Directory and move in.

00:03:15.210 --> 00:03:19.080
And we put the servant files in there or any driver files wanting to have compiled and made

00:03:19.080 --> 00:03:21.110
available to the webbing of classes subdirectory.

00:03:21.110 --> 00:03:21.460
Um,

00:03:21.460 --> 00:03:23.750
Evan Webber Parker type by default doesn't do that,

00:03:23.750 --> 00:03:25.350
But if you want to have that done,

00:03:25.350 --> 00:03:26.860
then you can certainly do that anyway.

00:03:26.860 --> 00:03:28.580
If we're going to the Web site directory,

00:03:28.580 --> 00:03:30.410
we see there's an index dot jsp,

00:03:30.410 --> 00:03:32.310
which is a simple hello World Chance P.

00:03:32.310 --> 00:03:35.130
This will appear in the route off the war file on.

00:03:35.130 --> 00:03:39.340
Then we see there's a Web in subdirectory and inside there that the usual deployment of

00:03:39.340 --> 00:03:40.510
Scripture would expect to see,

00:03:40.510 --> 00:03:42.090
which is the web dot XML file.

00:03:42.090 --> 00:03:46.550
Let's go back out to the command line and build a wall file with moving package on.

00:03:46.550 --> 00:03:51.250
Let's take a look inside If I just time Evan package.

00:03:51.250 --> 00:03:57.140
Then we can see here it's created my Web app.

00:03:57.140 --> 00:03:57.720
That war.

00:03:57.720 --> 00:03:59.060
Remember that was the build over right?

00:03:59.060 --> 00:04:00.220
We had with the final name,

00:04:00.220 --> 00:04:02.420
which was put there to suppress the version.

00:04:02.420 --> 00:04:03.690
Suffix in the file name.

00:04:03.690 --> 00:04:08.290
Let's just take a quick look inside the war TV if,

00:04:08.290 --> 00:04:13.390
which means list of contents of the wall file,

00:04:13.390 --> 00:04:16.040
why we wanted more quickness.

00:04:16.040 --> 00:04:18.810
And here we can see the end experience P foil,

00:04:18.810 --> 00:04:22.020
which is at the root of the war File a weapon of classes directory,

00:04:22.020 --> 00:04:25.890
which would have any files which were included in source Mint resources on any compiled

00:04:25.890 --> 00:04:26.840
Java source files.

00:04:26.840 --> 00:04:31.420
If we had included a source Men Java directory with some drama classes under their on.

00:04:31.420 --> 00:04:31.740
Finally,

00:04:31.740 --> 00:04:34.960
we have the Web Inform XML deployment descriptor At this point.

00:04:34.960 --> 00:04:37.250
Now we have a wall fire which could be deployed into a Web content.

00:04:37.250 --> 00:04:40.100
That's how you create a Melvin Ware about projects using them.

00:04:40.100 --> 00:04:41.250
Evan Webber archetype

