WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.160
in this video,

00:00:08.160 --> 00:00:12.660
we're going to take a look at the project structure which Melvin uses on A great way to do

00:00:12.660 --> 00:00:17.230
this is by looking at the project which we created earlier from the quick start archetype.

00:00:17.230 --> 00:00:19.950
I'll just open this up in sublime so we can take a quick,

00:00:19.950 --> 00:00:21.670
a quick look at what's in there.

00:00:21.670 --> 00:00:28.950
So let's just open up everything in the left hand now so you can see the structure which

00:00:28.950 --> 00:00:31.010
Melvin has given us for this new project.

00:00:31.010 --> 00:00:35.020
There's a few things to point out here that the root of all maven projects we have a pom

00:00:35.020 --> 00:00:35.910
XML file.

00:00:35.910 --> 00:00:38.480
This stands for projects object model on.

00:00:38.480 --> 00:00:40.380
This is basically the model of the project,

00:00:40.380 --> 00:00:41.870
as Member would like to see it.

00:00:41.870 --> 00:00:44.090
So it defines some properties about the project.

00:00:44.090 --> 00:00:46.260
Here we can see the group Heidi Artifact,

00:00:46.260 --> 00:00:51.090
Any inversion these with so called gaffe co ordinates Gap standing for the first initials

00:00:51.090 --> 00:00:53.000
of group idea artifact Daddy inversion.

00:00:53.000 --> 00:00:57.760
These properties together define where the archetype will live in Melbourne repositories.

00:00:57.760 --> 00:00:59.450
So when you have a 1,000,000 project,

00:00:59.450 --> 00:01:04.010
ultimately you want to be able to publish that up to 11 repository so that it can be used

00:01:04.010 --> 00:01:04.830
by other people,

00:01:04.830 --> 00:01:05.570
for example,

00:01:05.570 --> 00:01:07.330
or the projects rather on.

00:01:07.330 --> 00:01:07.980
When you do that,

00:01:07.980 --> 00:01:12.650
you'll find that the artifact will live under these so called CAF co ordinates.

00:01:12.650 --> 00:01:14.740
So they'll be available under a folder structure,

00:01:14.740 --> 00:01:17.040
which is comprising off the group I D.

00:01:17.040 --> 00:01:18.250
Then the artifact tidy,

00:01:18.250 --> 00:01:20.550
and then the version We'll see that little let's run.

00:01:20.550 --> 00:01:21.050
In fact,

00:01:21.050 --> 00:01:22.680
you also see dependencies,

00:01:22.680 --> 00:01:27.790
which the project requires thes air software components that the project needs to be able

00:01:27.790 --> 00:01:28.210
to run.

00:01:28.210 --> 00:01:29.220
Eso.

00:01:29.220 --> 00:01:30.590
We'll look at those a little bit later.

00:01:30.590 --> 00:01:31.060
But for now,

00:01:31.060 --> 00:01:35.440
just think of the most jar files that the project needs to to be able to compile and run.

00:01:35.440 --> 00:01:37.110
It's a little bit more complicated than that,

00:01:37.110 --> 00:01:38.670
but that's a good enough definition for now.

00:01:38.670 --> 00:01:41.020
So aside from the Palm the XML file,

00:01:41.020 --> 00:01:44.800
we have two men director trees to go up here.

00:01:44.800 --> 00:01:46.460
You can see we have a source.

00:01:46.460 --> 00:01:49.590
Men java on and a source test.

00:01:49.590 --> 00:01:50.800
Java source.

00:01:50.800 --> 00:01:51.310
Main job.

00:01:51.310 --> 00:01:53.860
This is the path we put all of your production source code.

00:01:53.860 --> 00:01:54.250
So,

00:01:54.250 --> 00:01:54.670
in other words,

00:01:54.670 --> 00:01:55.310
the source code,

00:01:55.310 --> 00:01:58.270
which actually comprises the product developing one,

00:01:58.270 --> 00:02:00.650
sits in whatever distributed more former,

00:02:00.650 --> 00:02:01.870
it might need to be in a cell,

00:02:01.870 --> 00:02:02.380
for example,

00:02:02.380 --> 00:02:03.210
Ajar foil.

00:02:03.210 --> 00:02:07.090
It's used by the projects or war file if it's gonna be deployed into Web content,

00:02:07.090 --> 00:02:08.480
that kind of thing.

00:02:08.480 --> 00:02:09.690
So that's the source men.

00:02:09.690 --> 00:02:11.040
Java directory structure.

00:02:11.040 --> 00:02:12.130
That's production source.

00:02:12.130 --> 00:02:12.410
Good.

00:02:12.410 --> 00:02:13.150
In addition,

00:02:13.150 --> 00:02:15.780
you have a source test Java Director tree on.

00:02:15.780 --> 00:02:17.930
This is where you put all of your test code.

00:02:17.930 --> 00:02:19.430
So all of the test you write,

00:02:19.430 --> 00:02:20.500
these could be unit tests.

00:02:20.500 --> 00:02:21.720
Integration tests,

00:02:21.720 --> 00:02:22.770
system tests,

00:02:22.770 --> 00:02:23.480
content attests.

00:02:23.480 --> 00:02:24.930
Whatever type of testing you want to do.

00:02:24.930 --> 00:02:28.280
The source code of this should be separate from the production source.

00:02:28.280 --> 00:02:28.530
Good.

00:02:28.530 --> 00:02:31.070
And this is where those source files live.

00:02:31.070 --> 00:02:34.000
The reason that should be separate is because it's a separation of concerns.

00:02:34.000 --> 00:02:38.950
So you don't want to mix up test code with production code in case you accidentally package

00:02:38.950 --> 00:02:40.140
it up into a war file.

00:02:40.140 --> 00:02:40.810
You wouldn't want to have,

00:02:40.810 --> 00:02:41.360
for example,

00:02:41.360 --> 00:02:42.850
J unit jar files and such,

00:02:42.850 --> 00:02:45.150
like making the way into a production wal file.

00:02:45.150 --> 00:02:49.190
So this is why Melvin makes the separation between the two director structures.

00:02:49.190 --> 00:02:52.450
So a source Men Java production source card source test,

00:02:52.450 --> 00:02:53.810
Java Test source code.

00:02:53.810 --> 00:02:54.890
In addition,

00:02:54.890 --> 00:02:57.950
Memon also gives us two classes to start with,

00:02:57.950 --> 00:03:07.000
which are capital Java and a protest or java.

00:03:07.000 --> 00:03:09.860
So after Java is basically,

00:03:09.860 --> 00:03:10.740
um,

00:03:10.740 --> 00:03:12.660
hello world application if you like.

00:03:12.660 --> 00:03:18.130
It's just a class which emits Hello world when it's run and the AP test.

00:03:18.130 --> 00:03:22.510
Java is a test which doesn't really test anything in all fairness,

00:03:22.510 --> 00:03:27.300
but it's just an example of how you can create a test using the existing J Unit dependency

00:03:27.300 --> 00:03:27.300
,

00:03:27.300 --> 00:03:29.630
which is provided in the pom XML file.

00:03:29.630 --> 00:03:31.570
So by default,

00:03:31.570 --> 00:03:33.440
middle includes actually,

00:03:33.440 --> 00:03:34.970
a rather old version of J Unit,

00:03:34.970 --> 00:03:41.730
which is Version 381 on this is used in the AP test file.

00:03:41.730 --> 00:03:45.800
Here you can see it's importing injury unit dot framework doc test on in this class.

00:03:45.800 --> 00:03:51.940
It's got a sweet method which gathers together any methods which are prefixed with word

00:03:51.940 --> 00:03:54.770
test and executes those as a test suites.

00:03:54.770 --> 00:03:55.230
In other words,

00:03:55.230 --> 00:03:58.460
it will run the test app method on just assert.

00:03:58.460 --> 00:03:58.850
True.

00:03:58.850 --> 00:04:00.270
So these two classes,

00:04:00.270 --> 00:04:02.260
enough themselves aren't particular interesting,

00:04:02.260 --> 00:04:07.330
but they do allow us to see how we can build a maven project on also how we contested as

00:04:07.330 --> 00:04:09.290
well on We'll see those in the next videos,

00:04:09.290 --> 00:04:09.970
but For now,

00:04:09.970 --> 00:04:14.810
this was just a quick overview to show you what's generated in the project was generated

00:04:14.810 --> 00:04:17.150
from the Melvin quick starts archetype.

