WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:08.520
So in this video,

00:00:08.520 --> 00:00:11.580
I just want to talk about the local Melvin Repo Cash.

00:00:11.580 --> 00:00:12.660
Whenever you do,

00:00:12.660 --> 00:00:16.000
a building maven and maven is attempting to resolve dependencies.

00:00:16.000 --> 00:00:16.790
Within that build,

00:00:16.790 --> 00:00:20.980
the general procedure is going to be this Megan's first of all gonna look on the local

00:00:20.980 --> 00:00:23.170
system and see if it has that dependency.

00:00:23.170 --> 00:00:25.240
If it doesn't have the dependency,

00:00:25.240 --> 00:00:27.430
it's going to go out to the repositories,

00:00:27.430 --> 00:00:29.210
which we defined in the Project Object model,

00:00:29.210 --> 00:00:30.950
which in the default case is just one.

00:00:30.950 --> 00:00:32.910
It's just the MEV in central Repository.

00:00:32.910 --> 00:00:36.740
Thanks for the guard there and trying resolve that dependency and find it in that

00:00:36.740 --> 00:00:40.870
repository on if it confined in the repository is gonna download it back under the local

00:00:40.870 --> 00:00:41.410
system,

00:00:41.410 --> 00:00:46.530
and it's gonna cash it ready for use in subsequent builds on even subsequent steps of the

00:00:46.530 --> 00:00:47.560
only executing build.

00:00:47.560 --> 00:00:52.580
So where Melvin maintains this cash off artifacts that it's downloaded is in the folder,

00:00:52.580 --> 00:00:54.810
which is known as the local maven Report cash,

00:00:54.810 --> 00:00:57.750
and this is located inside the home directory.

00:00:57.750 --> 00:01:02.350
And then there's a dot m two repository folder inside there.

00:01:02.350 --> 00:01:04.480
So if I just open this up in Finder,

00:01:04.480 --> 00:01:10.870
so this is the local maven report cash on my system just to give you an idea of how big

00:01:10.870 --> 00:01:14.140
this is on how Maney artifacts have been cashed.

00:01:14.140 --> 00:01:15.860
If I just get in following this,

00:01:15.860 --> 00:01:24.620
we see that there's close to three gigabytes of space taken up on close to 11,000 items.

00:01:24.620 --> 00:01:28.990
So there's a lot of artifacts here which have been cashed by Melvin for use in subsequent

00:01:28.990 --> 00:01:30.220
Built on this cash,

00:01:30.220 --> 00:01:35.440
by the way as well is a cash which is built up across all of the different builds.

00:01:35.440 --> 00:01:37.770
So from the minute you install Melvin,

00:01:37.770 --> 00:01:42.410
it's gonna start downloading dependencies with each subsequent build if it needs to on the

00:01:42.410 --> 00:01:46.790
artifacts into this folder on every time you do a new build on Devon doesn't have a

00:01:46.790 --> 00:01:49.790
dependency is gonna go out to the repositories that I defined.

00:01:49.790 --> 00:01:52.060
Grab the dependencies in cash them back here,

00:01:52.060 --> 00:01:54.630
so this is gonna get pretty large pretty quickly.

00:01:54.630 --> 00:01:55.870
But that's OK.

00:01:55.870 --> 00:01:56.810
So they've changes are,

00:01:56.810 --> 00:01:57.200
of course,

00:01:57.200 --> 00:01:59.530
the fact that it's quick then for future builds,

00:01:59.530 --> 00:02:03.850
women doesn't have to go back out to the repositories and re download artifact that its

00:02:03.850 --> 00:02:05.260
cash previously this saves,

00:02:05.260 --> 00:02:05.620
of course,

00:02:05.620 --> 00:02:07.050
on network bandwidth as well.

00:02:07.050 --> 00:02:10.030
On the other advantage is that you can then do builds,

00:02:10.030 --> 00:02:11.060
which are offline.

00:02:11.060 --> 00:02:11.810
In other words,

00:02:11.810 --> 00:02:16.300
you don't have to have connectivity to the Internet to be able to do builds.

00:02:16.300 --> 00:02:19.930
It doesn't need to do it anymore because it's cash them here in this local maven report

00:02:19.930 --> 00:02:20.330
cash.

00:02:20.330 --> 00:02:25.630
So three really good reasons why the local maven report cash is is a good thing to have.

00:02:25.630 --> 00:02:28.550
So underneath this repository folder,

00:02:28.550 --> 00:02:32.160
we see all of the dependencies that members encountered across all of the bills that I've

00:02:32.160 --> 00:02:35.190
done on this system and how these folders air arranged.

00:02:35.190 --> 00:02:39.190
It's basically the gaffe coordinates off the dependencies that have been downloaded.

00:02:39.190 --> 00:02:41.290
So will recall we have the gap coordinates,

00:02:41.290 --> 00:02:42.760
which specify a dependency.

00:02:42.760 --> 00:02:47.780
So a gap standing for Group I D artifact tightly inversion while these folders,

00:02:47.780 --> 00:02:53.060
which are inside this repository of essentially the same Lao as the gaffe co ordinance.

00:02:53.060 --> 00:02:54.710
So let me just explain what I mean by that.

00:02:54.710 --> 00:02:55.540
If we take,

00:02:55.540 --> 00:02:56.260
for example,

00:02:56.260 --> 00:03:01.550
the spring Web dependency which enables you to use Spring NBC from the Spring Framework,

00:03:01.550 --> 00:03:06.950
this is under a Group I D of awg dot spring framework and the artifact ideas spring web

00:03:06.950 --> 00:03:10.440
we'll find this year so we can navigate to the group.

00:03:10.440 --> 00:03:13.090
Idea is okay,

00:03:13.090 --> 00:03:15.950
spring framework.

00:03:15.950 --> 00:03:21.700
So these 1st 2 folders effectively make up the group I d off this dependency.

00:03:21.700 --> 00:03:24.630
Then underneath this group,

00:03:24.630 --> 00:03:25.070
Heidi,

00:03:25.070 --> 00:03:29.750
are all of the artifacts which are part of that group I d on the woman we're talking about

00:03:29.750 --> 00:03:29.750
.

00:03:29.750 --> 00:03:30.770
Now it's spring web.

00:03:30.770 --> 00:03:32.250
So this is the artifact I.

00:03:32.250 --> 00:03:32.550
D.

00:03:32.550 --> 00:03:35.330
So this folder is now named after the artifact tidy,

00:03:35.330 --> 00:03:38.110
which were interested in for this dependency on.

00:03:38.110 --> 00:03:38.760
Then finally,

00:03:38.760 --> 00:03:40.520
under this artifact I d folder,

00:03:40.520 --> 00:03:45.160
we have the various different versions which are known to this particular installation of

00:03:45.160 --> 00:03:46.850
Melvin in its current step,

00:03:46.850 --> 00:03:50.900
which in this case just to 44 released and 437 release.

00:03:50.900 --> 00:03:53.240
So if we look at the 437 release one,

00:03:53.240 --> 00:03:54.050
for example,

00:03:54.050 --> 00:03:59.210
then here we see the actual end artifact,

00:03:59.210 --> 00:04:00.450
which is expressed,

00:04:00.450 --> 00:04:00.850
boy,

00:04:00.850 --> 00:04:06.570
that dependency swing in the words when we have a pom XML file and we have a dependence in

00:04:06.570 --> 00:04:06.890
there,

00:04:06.890 --> 00:04:12.720
which has a group idea of August Spring framework on an artifact idea of spring web on then

00:04:12.720 --> 00:04:14.550
a version of 437 release.

00:04:14.550 --> 00:04:19.910
Then this jar file is the artifact that's being referenced in the build on.

00:04:19.910 --> 00:04:24.410
This is how may even knows how to pinpoint a specific dependency that it requires at any

00:04:24.410 --> 00:04:25.050
one time.

00:04:25.050 --> 00:04:26.090
This layer,

00:04:26.090 --> 00:04:26.480
by the way,

00:04:26.480 --> 00:04:30.110
is also identical inthe e external repositories as well.

00:04:30.110 --> 00:04:35.900
So it's always the same idea of having a group i d folder structure and inside there you

00:04:35.900 --> 00:04:37.030
have on artifact I.

00:04:37.030 --> 00:04:41.250
D folder and inside that you have the various versions which have been deployed to the

00:04:41.250 --> 00:04:43.040
repository or installed.

00:04:43.040 --> 00:04:45.840
I mean the repository in the case of the local memory pour cash.

00:04:45.840 --> 00:04:46.840
And ultimately,

00:04:46.840 --> 00:04:47.780
inside those folders,

00:04:47.780 --> 00:04:50.060
you have the actual end artifact itself,

00:04:50.060 --> 00:04:51.380
the actual proper dependency.

00:04:51.380 --> 00:04:55.780
So they should give you an idea of how may even cashes the dependency artifacts locally to

00:04:55.780 --> 00:04:58.440
make subsequent builds a lot faster and efficient.

00:04:58.440 --> 00:05:01.990
And this is all thanks to this concept of the local 11 report cash.

00:05:01.990 --> 00:05:04.190
I will see more about this in subsequent videos

