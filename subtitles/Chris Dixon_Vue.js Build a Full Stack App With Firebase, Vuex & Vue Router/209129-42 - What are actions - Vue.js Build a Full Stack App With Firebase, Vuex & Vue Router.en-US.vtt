WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.890 --> 00:00:06.930
So far, we've looked at using getters to retrieve state from inside of our central store.

00:00:06.930 --> 00:00:10.275
Also, mutations, which we just looked at,

00:00:10.275 --> 00:00:12.375
commit changes to our stall.

00:00:12.375 --> 00:00:15.270
Mutations do their job perfectly fine,

00:00:15.270 --> 00:00:17.925
but to have one thing to bear in mind,

00:00:17.925 --> 00:00:21.030
mutations must be synchronous.

00:00:21.030 --> 00:00:25.710
We can't add any asynchronous code inside of a mutation.

00:00:25.710 --> 00:00:28.185
If you are not sure what this means,

00:00:28.185 --> 00:00:30.870
with synchronous code, we have to wait for

00:00:30.870 --> 00:00:34.410
the task to finish before moving on to the next one.

00:00:34.410 --> 00:00:36.405
We have an asynchronous task,

00:00:36.405 --> 00:00:39.930
we don't have to wait for a previous task to finish first.

00:00:39.930 --> 00:00:42.860
These can run alongside each other.

00:00:42.860 --> 00:00:46.250
It does make sense that mutations run synchronously.

00:00:46.250 --> 00:00:50.720
However, if multiple mutations happen at the same time,

00:00:50.720 --> 00:00:55.905
we won't to be able to track which one most responsible for each change of states.

00:00:55.905 --> 00:00:58.420
If we were running an asynchronous code,

00:00:58.420 --> 00:01:01.885
we can't tell how long this process will take.

00:01:01.885 --> 00:01:08.345
Therefore, a mutation which was started first may not necessarily finish first.

00:01:08.345 --> 00:01:12.440
Having a mutation which runs synchronously means it

00:01:12.440 --> 00:01:16.820
needs to completely finish first before the next ones begins,

00:01:16.820 --> 00:01:20.375
and this makes tracking it changes more predictable.

00:01:20.375 --> 00:01:22.530
This is where actions come in.

00:01:22.530 --> 00:01:28.205
Actions can contain asynchronous code and are a bit like mutations.

00:01:28.205 --> 00:01:31.720
However, actions don't directly mutate the state,

00:01:31.720 --> 00:01:34.735
instead they commit a mutation.

00:01:34.735 --> 00:01:38.390
This means it will have the needs to run asynchronous code,

00:01:38.390 --> 00:01:41.615
such as requesting data from a server.

00:01:41.615 --> 00:01:44.705
An action will be used over a mutation.

00:01:44.705 --> 00:01:48.645
We can use actions whether they have asynchronous or not,

00:01:48.645 --> 00:01:50.300
and you can even keep things more

00:01:50.300 --> 00:01:54.320
consistent by always going through an action if you prefer,

00:01:54.320 --> 00:01:57.010
so this is the theory behind actions.

00:01:57.010 --> 00:02:01.680
Next, we'll put this into practice inside of our application.
