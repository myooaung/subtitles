WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.610 --> 00:00:05.925
Before we dive into code splitting and lazy loading,

00:00:05.925 --> 00:00:09.060
first, let's take a quick look at why we may need it.

00:00:09.060 --> 00:00:14.625
The first thing to note is that the Vue CLI uses web park behind the scenes.

00:00:14.625 --> 00:00:18.180
It abstracts away all of the configuration so we can

00:00:18.180 --> 00:00:22.440
focus on developments or the versions of the Vue CLI,

00:00:22.440 --> 00:00:26.160
you stand a web pack config file available to those in

00:00:26.160 --> 00:00:30.330
our project directory which we could inspect and modify.

00:00:30.330 --> 00:00:35.220
This new version we are using in this course does not have it available but we can

00:00:35.220 --> 00:00:40.755
still see the contents of this file by using the output command from the Vue CLI.

00:00:40.755 --> 00:00:45.920
We can do this if we go down to the terminal and let's open up a new tab

00:00:45.920 --> 00:00:51.220
to keep the server running and the command we can use is view inspect.

00:00:51.220 --> 00:00:53.490
The greater than arrow.

00:00:53.490 --> 00:00:57.245
The file we want to select is the output JS.

00:00:57.245 --> 00:01:03.910
It enter and this will generate an output JS file follows inside of our project.

00:01:03.910 --> 00:01:05.670
Once It's being generated,

00:01:05.670 --> 00:01:08.960
we can go into our sidebar and into our project.

00:01:08.960 --> 00:01:10.910
Here's our output.js file,

00:01:10.910 --> 00:01:12.455
which we just generated.

00:01:12.455 --> 00:01:14.720
Now if we scroll up and down through the file,

00:01:14.720 --> 00:01:18.920
there is a lot going on here but we can use the text editors search

00:01:18.920 --> 00:01:23.920
facility with command or control F. I don't want to search for entry.

00:01:23.920 --> 00:01:28.060
Entry will take us to near the bottom of the file and point to

00:01:28.060 --> 00:01:33.415
the main entry point of our application which is located in the main.js file.

00:01:33.415 --> 00:01:39.035
This file is the top level of our application and contains everything for all projects.

00:01:39.035 --> 00:01:44.679
Web pack them bundles together everything inside of these projects include all files,

00:01:44.679 --> 00:01:48.955
all of our assets and then I'll put some into one single file.

00:01:48.955 --> 00:01:51.895
Which is called the build.js.

00:01:51.895 --> 00:01:55.570
We can also see this output location by the union of

00:01:55.570 --> 00:01:59.470
research for outputs and this will point to a file path,

00:01:59.470 --> 00:02:01.390
which is our project directory.

00:02:01.390 --> 00:02:04.505
Then it will generate a disk folder follows.

00:02:04.505 --> 00:02:07.075
Now we know about this input and output.

00:02:07.075 --> 00:02:13.940
I'm going to remove our output.js file since it is not needed inside our application.

00:02:13.940 --> 00:02:16.570
This single bundled.js file,

00:02:16.570 --> 00:02:18.385
which is stored in our disk folder,

00:02:18.385 --> 00:02:19.925
which we're going to create soon,

00:02:19.925 --> 00:02:25.145
is downloaded from the server the first time a user visits our website or application.

00:02:25.145 --> 00:02:29.240
This is completely fine if they build it relatively small.

00:02:29.240 --> 00:02:34.025
But in some applications which include lots of code and assets,

00:02:34.025 --> 00:02:38.630
this file can become really big and take a long time to download from the server,

00:02:38.630 --> 00:02:41.470
particularly on mobile devices.

00:02:41.470 --> 00:02:45.080
This can lead to a poor user experience.

00:02:45.080 --> 00:02:49.175
This leads us on to the subject of code splitting.

00:02:49.175 --> 00:02:54.020
Which is the process of breaking up these bundled file or our application

00:02:54.020 --> 00:02:59.410
into smaller bundles which we can then only download as in when we need them.

00:02:59.410 --> 00:03:03.350
We need to decide what is the bare minimum or

00:03:03.350 --> 00:03:06.470
most important contents which the user needs to

00:03:06.470 --> 00:03:10.805
initially download to keep the bundle as small as possible.

00:03:10.805 --> 00:03:15.860
We can then split up the rest of the application to be only downloaded when

00:03:15.860 --> 00:03:21.260
needed such as any additional menu links which are not commonly used,

00:03:21.260 --> 00:03:24.725
and only download a nice extra parts when needed.

00:03:24.725 --> 00:03:27.110
Is what is called lazy loading.

00:03:27.110 --> 00:03:32.490
If we go into the browser and head over to the homepage of our application.

00:03:33.350 --> 00:03:36.250
When the user first visits our app,

00:03:36.250 --> 00:03:38.690
we need to include this homepage because this is

00:03:38.690 --> 00:03:44.155
the main entry points and also the links at the top so the user can navigate.

00:03:44.155 --> 00:03:48.440
We do not need to include the components or the contents of these links.

00:03:48.440 --> 00:03:54.440
However, they could be a separate bundle to only download if a user clicks on them.

00:03:54.440 --> 00:03:56.900
Another example to save on

00:03:56.900 --> 00:04:01.745
the initial download size is to download the homepage components,

00:04:01.745 --> 00:04:05.045
but only the contents to the page fold.

00:04:05.045 --> 00:04:07.370
The fold is the bottom of

00:04:07.370 --> 00:04:10.140
the visible browser area so we could

00:04:10.140 --> 00:04:14.115
only download the content we can see before the user scrolls.

00:04:14.115 --> 00:04:15.830
Apps such as Twitter,

00:04:15.830 --> 00:04:19.175
we'll do something very similar by only loading up tweets.

00:04:19.175 --> 00:04:20.705
As you scroll down the page,

00:04:20.705 --> 00:04:22.460
which will speed things up.

00:04:22.460 --> 00:04:25.670
There are also lots more way to split up our code

00:04:25.670 --> 00:04:29.705
too and the load depends on the design of your application.

00:04:29.705 --> 00:04:34.310
For example, we may want to exclude the contents of a pop up or

00:04:34.310 --> 00:04:38.905
even the contents of a section on a page which was rendered by an if statement.

00:04:38.905 --> 00:04:41.660
As you can see, there are lots of ways to think

00:04:41.660 --> 00:04:45.840
about and we'll cover some of these in this section.
