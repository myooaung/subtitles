WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.410 --> 00:00:05.850
We can apply code splitting and letter loading when using the view router.

00:00:05.850 --> 00:00:08.820
This is relatively easy to implement as

00:00:08.820 --> 00:00:12.660
our pages are already in their own separate files.

00:00:12.660 --> 00:00:15.030
This means we can separate this page

00:00:15.030 --> 00:00:19.575
components and only load them when a user visits that link.

00:00:19.575 --> 00:00:22.110
For example, on the homepage,

00:00:22.110 --> 00:00:26.070
we may only want to load this home components anything menu,

00:00:26.070 --> 00:00:31.020
contact, and about us components until a user clicks on them.

00:00:31.020 --> 00:00:36.430
First, let's go over to the developer tools will right-click and inspect.

00:00:36.620 --> 00:00:41.309
An incident networked up it reloads

00:00:41.309 --> 00:00:46.100
and make sure the JavaScript button is clicked so we only see our JavaScript files.

00:00:46.100 --> 00:00:48.980
Inside here we see our app dot JS file which

00:00:48.980 --> 00:00:52.445
contains all of our JavaScript for all projects.

00:00:52.445 --> 00:00:56.420
We can see that if we click on any additional menu links,

00:00:56.420 --> 00:01:00.035
the normal files are downloaded meaning we currently have

00:01:00.035 --> 00:01:04.400
all of the applications JavaScript inside of one file.

00:01:04.400 --> 00:01:08.330
This is important to remember that no other files have been loaded

00:01:08.330 --> 00:01:12.320
here and this will become more clear very soon.

00:01:12.320 --> 00:01:16.445
If you want to split up our projects and only load

00:01:16.445 --> 00:01:20.570
these components inside the menu when a user clicks on them,

00:01:20.570 --> 00:01:24.340
we need to make a change to our routes dot JS file.

00:01:24.340 --> 00:01:27.590
We can take advantage of web packs code splitting

00:01:27.590 --> 00:01:32.270
syntax by using a dynamic import which is a replacement

00:01:32.270 --> 00:01:35.880
for our original component import slatted

00:01:35.880 --> 00:01:40.840
over to our route dot JS file inside of the text editor.

00:01:41.480 --> 00:01:45.575
We are going to save we import our normal components.

00:01:45.575 --> 00:01:50.815
We're going to replace these with a function which is going to be a dynamic imports,

00:01:50.815 --> 00:01:53.465
and this function is responsible for importing

00:01:53.465 --> 00:01:56.980
our components as and when they are called.

00:01:56.980 --> 00:02:00.005
First of all, let's replace the menu link.

00:02:00.005 --> 00:02:02.180
I'm going to comment this out,

00:02:02.180 --> 00:02:06.480
and then setup a function called menu,

00:02:07.520 --> 00:02:10.050
which is going to use web packs

00:02:10.050 --> 00:02:16.370
dynamic imports syntax to import the menu from the same file path as above.

00:02:16.370 --> 00:02:18.970
We copy this as a string,

00:02:18.970 --> 00:02:22.460
paste this into our import and then we can do

00:02:22.460 --> 00:02:26.405
exactly the same for our contact and about those links.

00:02:26.405 --> 00:02:31.870
Comments out the about creates a about function.

00:02:32.300 --> 00:02:38.270
Where are we going to create an import and the file path is exactly the same as above.

00:02:38.270 --> 00:02:40.700
Copy this link and paste this in,

00:02:40.700 --> 00:02:45.465
and then finally we have contact two comment this out.

00:02:45.465 --> 00:02:55.060
We can do exactly the same create our function and grab our file path for contact.

00:02:56.600 --> 00:02:59.780
This now means we don't immediately

00:02:59.780 --> 00:03:03.125
import each components when the application is loaded.

00:03:03.125 --> 00:03:06.170
Instead, they are now functions and they are

00:03:06.170 --> 00:03:09.605
only imported when needed by calling this function,

00:03:09.605 --> 00:03:12.710
this is all taken care of behind the scenes by web pack.

00:03:12.710 --> 00:03:16.790
Now if we go back over to the browser developer tools,

00:03:16.790 --> 00:03:20.105
save this file, reload the browser,

00:03:20.105 --> 00:03:23.005
we can clear our history and then reload.

00:03:23.005 --> 00:03:28.730
Once again, we see our initial apps because we're on the home components.

00:03:28.730 --> 00:03:31.250
Let's click on the menu and we'll see

00:03:31.250 --> 00:03:36.845
a new JavaScript file has been imported with the contents of this components.

00:03:36.845 --> 00:03:44.165
Let's try the contacts and the about and we'll renew files being generated.

00:03:44.165 --> 00:03:47.195
These have been loaded on demand from the server,

00:03:47.195 --> 00:03:52.445
meaning that the code for these three components is no longer in our original apps,

00:03:52.445 --> 00:03:57.185
meaning we have a smaller bundle size when the app is first loaded.

00:03:57.185 --> 00:04:00.425
If we click on all of our components again,

00:04:00.425 --> 00:04:03.410
we see that these files are not duplicated since

00:04:03.410 --> 00:04:06.080
we've already downloaded them and this is

00:04:06.080 --> 00:04:08.720
an efficient way to separate our bundle into

00:04:08.720 --> 00:04:12.445
smaller files and only load them when required.

00:04:12.445 --> 00:04:14.990
In the next video, we will look at how to use

00:04:14.990 --> 00:04:19.170
named chunks to group our components together.
