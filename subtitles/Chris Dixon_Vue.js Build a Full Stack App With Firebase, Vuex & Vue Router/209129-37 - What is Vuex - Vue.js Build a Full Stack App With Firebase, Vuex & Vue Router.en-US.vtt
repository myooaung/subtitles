WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.500 --> 00:00:03.900
When working with Vue.js projects,

00:00:03.900 --> 00:00:07.485
we can manage the application state in a number of ways.

00:00:07.485 --> 00:00:10.800
When sharing a passing state between components,

00:00:10.800 --> 00:00:13.620
there are multiple ways we can achieve this.

00:00:13.620 --> 00:00:19.350
Data can be passed from a child to a parent components using Custom Events,

00:00:19.350 --> 00:00:20.850
and from the parent,

00:00:20.850 --> 00:00:23.475
the child by passing props.

00:00:23.475 --> 00:00:27.645
We can also improve on this by adding an Event Bus.

00:00:27.645 --> 00:00:31.155
This Event Bus acts as a single central store,

00:00:31.155 --> 00:00:37.290
told our states and is basically a separate file containing a view instance,

00:00:37.290 --> 00:00:39.300
which we can had our state to,

00:00:39.300 --> 00:00:42.495
and import to each component when needed.

00:00:42.495 --> 00:00:46.805
It's a great solution for smaller to medium-size applications.

00:00:46.805 --> 00:00:49.520
But a single file like this however,

00:00:49.520 --> 00:00:55.895
can quickly become really large and more difficult to maintain for large projects.

00:00:55.895 --> 00:01:00.845
This leads us on to the subject of this section, which is the UX.

00:01:00.845 --> 00:01:06.950
UX is a state management pattern plus library for managing our states,

00:01:06.950 --> 00:01:11.495
with the state being basically the data which is held in our components.

00:01:11.495 --> 00:01:14.195
It's ideal for managing large projects,

00:01:14.195 --> 00:01:16.865
and it's wrote by the Vue.js call Team,

00:01:16.865 --> 00:01:21.295
so integrates perfectly into your Vue.js projects.

00:01:21.295 --> 00:01:23.265
Like the Event Bus,

00:01:23.265 --> 00:01:27.110
it also acts as a single central stall for our state,

00:01:27.110 --> 00:01:30.415
but it has some benefits over the Event Bus.

00:01:30.415 --> 00:01:35.420
For example, allow you access a single source for our states.

00:01:35.420 --> 00:01:41.045
We can still break it up into different files on modules to organize our code,

00:01:41.045 --> 00:01:43.060
and we'll take a look at this soon.

00:01:43.060 --> 00:01:46.120
We don't use props and events with Vue.UX.

00:01:46.120 --> 00:01:51.110
We use different methods which will also cover these dedicated methods,

00:01:51.110 --> 00:01:55.930
make it easier to track and manage changes made to our states.

00:01:55.930 --> 00:01:59.390
Use an Event Bus if multiple components keep

00:01:59.390 --> 00:02:02.705
making changes to the stall using custom events,

00:02:02.705 --> 00:02:05.215
these changes can be hard to track.

00:02:05.215 --> 00:02:08.930
We may not know which component made which change,

00:02:08.930 --> 00:02:11.569
and this may cause problems updating.

00:02:11.569 --> 00:02:14.120
Also, as we will see in this section,

00:02:14.120 --> 00:02:19.120
not only does Vue.UX act as a single data source for our application state,

00:02:19.120 --> 00:02:24.020
it can also be used to gather required data from other sources.

00:02:24.020 --> 00:02:30.124
We will be using it to hold our component states along with our data from Firebase.

00:02:30.124 --> 00:02:37.450
This makes our store one single convenient place to access all of the data which we need.

00:02:37.450 --> 00:02:40.045
With all of this being said however,

00:02:40.045 --> 00:02:43.760
if you build in a smaller or a medium-sized application,

00:02:43.760 --> 00:02:46.795
Vue.UX is not always the best solution.

00:02:46.795 --> 00:02:50.300
It can often be a case of adding it when you feel it's

00:02:50.300 --> 00:02:54.650
needed or when other solutions are causing problems.

00:02:54.650 --> 00:02:57.200
Now we know what Vue.UX is,

00:02:57.200 --> 00:03:00.720
let's get to work on adding it to our project.
