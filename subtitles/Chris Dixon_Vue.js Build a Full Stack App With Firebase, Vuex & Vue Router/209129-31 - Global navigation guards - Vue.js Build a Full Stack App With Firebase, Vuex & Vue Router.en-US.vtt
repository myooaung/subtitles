WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.590 --> 00:00:03.960
Sometimes when navigating between routes,

00:00:03.960 --> 00:00:09.915
we want to perform an action even before the route is navigated too, or just afterwards.

00:00:09.915 --> 00:00:12.405
As an example, we will be setting

00:00:12.405 --> 00:00:17.205
open alert to load up just before the admin page is navigated too,

00:00:17.205 --> 00:00:20.655
which will tell the user this is a restricted area,

00:00:20.655 --> 00:00:23.115
and they will first need to login.

00:00:23.115 --> 00:00:25.290
Also, when leaving the admin,

00:00:25.290 --> 00:00:27.315
an alert will also pop up,

00:00:27.315 --> 00:00:29.730
which will tell the user they'll be automatically

00:00:29.730 --> 00:00:32.775
logged out when leaving this admin area.

00:00:32.775 --> 00:00:35.565
This is for security reasons.

00:00:35.565 --> 00:00:42.270
VueRouter hazards covered this use case by providing us with navigation guards,

00:00:42.270 --> 00:00:44.880
like the Vue instance hooks.

00:00:44.880 --> 00:00:50.425
Navigation guards allow us to hook into certain stages of the navigation.

00:00:50.425 --> 00:00:53.070
Also, we can add to them either globally for

00:00:53.070 --> 00:00:57.500
our whole app or apply them locally to certain routes.

00:00:57.500 --> 00:01:01.835
Let's start by taking a look at the global before-each guards.

00:01:01.835 --> 00:01:05.255
I'm looking at this in the main.js.

00:01:05.255 --> 00:01:07.580
After our router here,

00:01:07.580 --> 00:01:12.515
we can access our routes available and then access it before each hook.

00:01:12.515 --> 00:01:15.570
This is going to take in a function,

00:01:16.070 --> 00:01:19.100
and it also takes in three arguments,

00:01:19.100 --> 00:01:21.620
which we'll take a look at in a moment.

00:01:21.620 --> 00:01:24.215
Also, as this is a global hook,

00:01:24.215 --> 00:01:30.220
the code which you add in is executed each time any routing action is triggered.

00:01:30.220 --> 00:01:36.100
For example, look at adds an alert who detects off navigation triggered.

00:01:36.410 --> 00:01:39.995
If we now save this and go over to the browser,

00:01:39.995 --> 00:01:42.605
we see the alerts pop up straight away,

00:01:42.605 --> 00:01:46.540
and also for each navigation link which we click on.

00:01:46.540 --> 00:01:51.725
This works fine, but notice there are no page components on the screen.

00:01:51.725 --> 00:01:54.680
This is because the routing action will not be

00:01:54.680 --> 00:01:58.550
completed until we call a function called next.

00:01:58.550 --> 00:02:03.160
Next is one of the three arguments which we can pass into before each.

00:02:03.160 --> 00:02:05.565
The first one is to,

00:02:05.565 --> 00:02:08.885
and this is the route which we navigate into.

00:02:08.885 --> 00:02:11.420
The second one is from,

00:02:11.420 --> 00:02:14.300
and this is the route which we're leaving.

00:02:14.300 --> 00:02:17.380
Then finally we have the next function,

00:02:17.380 --> 00:02:20.945
and it's this next function which you can pass in to complete

00:02:20.945 --> 00:02:24.700
the navigation and load up the page components.

00:02:24.700 --> 00:02:26.385
If we now go over,

00:02:26.385 --> 00:02:30.015
click on the alert, the routing action is completed.

00:02:30.015 --> 00:02:34.085
We then move to the page components which we've clicked on.

00:02:34.085 --> 00:02:39.600
This next function will tell the Vue router to move on to the next navigation hook,

00:02:39.600 --> 00:02:41.560
if there is one available.

00:02:41.560 --> 00:02:43.850
If no more hooks are available,

00:02:43.850 --> 00:02:45.440
then as we've seen here,

00:02:45.440 --> 00:02:48.020
the navigation is unconfirmed.

00:02:48.020 --> 00:02:52.370
We can also stop this navigation if we have a use case for this,

00:02:52.370 --> 00:02:55.490
by passing in a Boolean value of false.

00:02:55.490 --> 00:02:59.690
This will then stop the page components from loading up.

00:02:59.690 --> 00:03:02.980
This will be the same for each navigation routes.

00:03:02.980 --> 00:03:08.315
We mentioned before we also have access to the to and from data,

00:03:08.315 --> 00:03:10.810
which we also passed in as arguments.

00:03:10.810 --> 00:03:13.835
To see these, we can pass in a console log,

00:03:13.835 --> 00:03:15.845
taking in the to value,

00:03:15.845 --> 00:03:19.565
and we can see exactly what data is provided here.

00:03:19.565 --> 00:03:25.765
So let's do this over to the browser and right-click on Inspect,

00:03:25.765 --> 00:03:28.365
and then click on the console.

00:03:28.365 --> 00:03:30.830
Also, as a side note, if reduced again,

00:03:30.830 --> 00:03:33.935
no console error message in the browser.

00:03:33.935 --> 00:03:36.835
This is a setting in ESLint.

00:03:36.835 --> 00:03:41.010
ESLint is provided when setting up the Vue CLI.

00:03:41.010 --> 00:03:43.615
This is used to check the code for errors.

00:03:43.615 --> 00:03:46.525
Sometimes by default, when using ESLint,

00:03:46.525 --> 00:03:49.445
the console messages will provide an error.

00:03:49.445 --> 00:03:51.440
So if you need to disable this,

00:03:51.440 --> 00:03:54.880
head over to the package.js on file,

00:03:54.880 --> 00:04:00.000
open this up, and inside here we'll have an ES named config objects.

00:04:00.000 --> 00:04:02.500
Inside this object, if we scroll down,

00:04:02.500 --> 00:04:04.385
inside of the rules objects,

00:04:04.385 --> 00:04:09.020
we need to add a name value par of no console and off.

00:04:09.020 --> 00:04:13.600
If you add this, save the file and then restart the development server.

00:04:13.600 --> 00:04:16.625
You should then have no problems viewing the console,

00:04:16.625 --> 00:04:19.915
unable to continue with the rest of the course.

00:04:19.915 --> 00:04:22.075
Also, again, with ESLint,

00:04:22.075 --> 00:04:27.140
we may need to remove any unused variables slash remove from a next,

00:04:27.140 --> 00:04:30.780
and take look at the object inside the console.

00:04:30.890 --> 00:04:34.370
Let's, for example, click on the menu and

00:04:34.370 --> 00:04:37.705
open up this object which is provided from before each.

00:04:37.705 --> 00:04:40.820
So this is the path which we navigate into.

00:04:40.820 --> 00:04:42.140
We're going to the menu.

00:04:42.140 --> 00:04:43.955
This is the router name.

00:04:43.955 --> 00:04:46.835
We can see if any parameters have been passed in,

00:04:46.835 --> 00:04:51.070
and we have access to any of these properties inside of our code.

00:04:51.070 --> 00:04:54.350
So rather than using the console log, for example,

00:04:54.350 --> 00:04:58.700
you could add an if statement to check if to and access

00:04:58.700 --> 00:05:04.175
the path is going to be equal to the screen or forward slash menu.

00:05:04.175 --> 00:05:09.320
If it is, we're going to continue on to the routes and we'll say else.

00:05:09.320 --> 00:05:12.220
Next is going to be equal to false.

00:05:12.220 --> 00:05:15.530
This will now allow the router to only go to

00:05:15.530 --> 00:05:19.445
the menu components and any of the pages will be blocked.

00:05:19.445 --> 00:05:21.440
Since we now making use of next,

00:05:21.440 --> 00:05:24.200
we can also pass in the rest of our arguments.

00:05:24.200 --> 00:05:29.535
So from next, let's say even head over to the browser.

00:05:29.535 --> 00:05:32.330
So now if we click on the home routes,

00:05:32.330 --> 00:05:34.400
we don't see any components.

00:05:34.400 --> 00:05:35.960
If we click on menu,

00:05:35.960 --> 00:05:40.300
we've allowed these to load up since the path is equal to menu.

00:05:40.300 --> 00:05:43.425
Let's try contacts and this is blocked.

00:05:43.425 --> 00:05:44.865
The same with about us,

00:05:44.865 --> 00:05:48.590
and also returning back to home along with before each.

00:05:48.590 --> 00:05:52.960
We also have available the after-each global guard to.

00:05:52.960 --> 00:05:55.070
As the name suggests,

00:05:55.070 --> 00:05:58.390
this is called after each navigation is confirmed.

00:05:58.390 --> 00:06:00.590
This cannot affect the navigation because it's

00:06:00.590 --> 00:06:03.890
performed after the navigation has been completed.

00:06:03.890 --> 00:06:07.685
Therefore, it doesn't receive the next function as an argument.

00:06:07.685 --> 00:06:10.990
So calling in next function is not needed too.

00:06:10.990 --> 00:06:14.255
We can see this again by passing in an alert,

00:06:14.255 --> 00:06:16.565
and any text inside here,

00:06:16.565 --> 00:06:18.850
we'll say after each,

00:06:18.850 --> 00:06:21.810
save and over to the browser.

00:06:21.810 --> 00:06:24.300
Again, we may not use need to argument,

00:06:24.300 --> 00:06:26.655
so we may need to remove these.

00:06:26.655 --> 00:06:29.955
We see the alert, click on Okay,

00:06:29.955 --> 00:06:33.285
contact us, and this is loaded okay too.

00:06:33.285 --> 00:06:36.305
So as you can see, even without the next call,

00:06:36.305 --> 00:06:39.260
the pages components is still rendered,

00:06:39.260 --> 00:06:41.695
and we see the alert displayed as expected.

00:06:41.695 --> 00:06:45.290
This is a never useful hook which may be needed if we need to

00:06:45.290 --> 00:06:49.340
perform an action after the route has finished taking place.

00:06:49.340 --> 00:06:54.140
Again, these are both global guards which are going to be used for each route.

00:06:54.140 --> 00:06:58.370
In the next video, we're going to take a look at component guards,

00:06:58.370 --> 00:07:03.270
which will only affect the components we're navigating to and from.
