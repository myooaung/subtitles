WEBVTT
1
00:00:01.140 --> 00:00:03.420
[Autogenerated] security in step functions is similar

2
00:00:03.420 --> 00:00:05.510
to any other service in the Amazon.

3
00:00:05.510 --> 00:00:09.270
Web service is eco system step functions uses identity

4
00:00:09.270 --> 00:00:12.790
and access management control to access other service's

5
00:00:12.790 --> 00:00:15.650
and resource is that it needs, for example,

6
00:00:15.650 --> 00:00:18.880
drinker London function or other linked service is that we might

7
00:00:18.880 --> 00:00:21.510
be using in our work clothes when we breathe.

8
00:00:21.510 --> 00:00:25.680
A new workflow based on the service, is that we use on this workflow.

9
00:00:25.680 --> 00:00:27.910
If we decide to create a neural,

10
00:00:27.910 --> 00:00:32.020
it will look at our service is that we use and create appropriate permissions.

11
00:00:32.020 --> 00:00:35.540
Let's look at one off our report generation work floors.

12
00:00:35.540 --> 00:00:39.600
Let's edit it on saving by creating a new role on the permission section.

13
00:00:39.600 --> 00:00:45.050
Less troops crave a neuro and go ahead and save you once the workflow is safe.

14
00:00:45.050 --> 00:00:45.330
Now,

15
00:00:45.330 --> 00:00:48.520
this navigate to the role that was created for us on

16
00:00:48.520 --> 00:00:50.410
the permission sections for a role,

17
00:00:50.410 --> 00:00:53.420
we can see that we have only one policy attached to this role,

18
00:00:53.420 --> 00:00:57.480
which is a custom policy created by AWS for us.

19
00:00:57.480 --> 00:01:00.940
If we never get to the policy and open, it's Jason file,

20
00:01:00.940 --> 00:01:05.380
we can see that it only has access to invoke the least off London functions.

21
00:01:05.380 --> 00:01:08.550
These are only the London functions that were used to out our work,

22
00:01:08.550 --> 00:01:12.570
so we can also do the same ourselves by going in and creating a new policy.

23
00:01:12.570 --> 00:01:17.500
And then you said policy for the roles used in the AWS step functions.

24
00:01:17.500 --> 00:01:21.340
When we use activities with our workflow, they are a little different.

25
00:01:21.340 --> 00:01:23.190
Since they run on a different machine,

26
00:01:23.190 --> 00:01:26.340
they need to be authenticated using secret keys.

27
00:01:26.340 --> 00:01:28.130
So our pontificate and activity,

28
00:01:28.130 --> 00:01:31.190
we should create the newly dedicated user for that activity.

29
00:01:31.190 --> 00:01:34.400
Or we can share the user throughout multiple activities.

30
00:01:34.400 --> 00:01:37.320
Let's not forget to the user section and creating you want.

31
00:01:37.320 --> 00:01:40.340
Let's name this user activity user on access time.

32
00:01:40.340 --> 00:01:43.500
We're going to choose programmatic access because we are

33
00:01:43.500 --> 00:01:46.230
going to need an access key I D and a secret.

34
00:01:46.230 --> 00:01:50.280
And also this user will not be accessing the AWS console.

35
00:01:50.280 --> 00:01:52.300
Now let's move to the next step here.

36
00:01:52.300 --> 00:01:55.540
We're going to choose, but that's existing policy directly.

37
00:01:55.540 --> 00:01:57.240
Once we kick that create policy,

38
00:01:57.240 --> 00:02:01.000
brother shows up and we can create a new policy less

39
00:02:01.000 --> 00:02:03.680
true step functions for our service.

40
00:02:03.680 --> 00:02:04.170
Next,

41
00:02:04.170 --> 00:02:08.200
we need to select the access levels for this user on activity

42
00:02:08.200 --> 00:02:10.400
is going to need to least available tasks,

43
00:02:10.400 --> 00:02:14.880
sending heartbeat, san task, success and failures.

44
00:02:14.880 --> 00:02:16.170
Next, we need to choose.

45
00:02:16.170 --> 00:02:18.530
The resource is this policy has access to.

46
00:02:18.530 --> 00:02:19.650
To make things simple.

47
00:02:19.650 --> 00:02:24.590
We're going to create a user that has access toe all activities on dhe on Lee

48
00:02:24.590 --> 00:02:28.240
to the following permissions that we selected previously.

49
00:02:28.240 --> 00:02:33.470
Best truth, older resources and move to the next step.

50
00:02:33.470 --> 00:02:37.740
Let's name it activity execute on Lee and create a new policy.

51
00:02:37.740 --> 00:02:39.280
Once the policy has been created,

52
00:02:39.280 --> 00:02:43.750
let's not get back to our users and attach it once

53
00:02:43.750 --> 00:02:45.250
that that's the policy to the user.

54
00:02:45.250 --> 00:02:46.530
Let's move to the next step.

55
00:02:46.530 --> 00:02:49.210
We won't be setting any tax for this user.

56
00:02:49.210 --> 00:02:51.640
And finally, let's create the user.

57
00:02:51.640 --> 00:02:53.780
Once we greet the user, we get access T I.

58
00:02:53.780 --> 00:02:54.200
D.

59
00:02:54.200 --> 00:02:55.870
On the secret access key.

60
00:02:55.870 --> 00:02:59.270
Let's download them so we can use them later.

61
00:02:59.270 --> 00:03:02.950
These credentials that we just breathe it can be used with AWS sdk.

62
00:03:02.950 --> 00:03:08.770
Step functions get activity tasks or san task success failure or heartbeats.

63
00:03:08.770 --> 00:03:13.440
Step functions also support tax based policies like many other service is,

64
00:03:13.440 --> 00:03:14.050
For example,

65
00:03:14.050 --> 00:03:17.300
we could use tax to define permissions for things like development

66
00:03:17.300 --> 00:03:20.900
and production environment this policy will deny the ability to

67
00:03:20.900 --> 00:03:23.110
delete state machines or activities.

68
00:03:23.110 --> 00:03:25.240
Start and stop executions,

69
00:03:25.240 --> 00:03:28.310
add or delete new tax for all resources that have been

70
00:03:28.310 --> 00:03:30.540
tagged with the environment production.

71
00:03:30.540 --> 00:03:33.380
As we can see using attack based policy,

72
00:03:33.380 --> 00:03:37.630
we can achieve almost any scenario that we need to cover for permission schema.

73
00:03:37.630 --> 00:03:41.740
Another problem, when it comes to security, is sensitive information.

74
00:03:41.740 --> 00:03:42.620
For example,

75
00:03:42.620 --> 00:03:47.440
if credentials or sensitive information is needed to be passed as a perimeter,

76
00:03:47.440 --> 00:03:50.020
that bomb either will be available on the logs and

77
00:03:50.020 --> 00:03:51.890
also visible on the steppe designer,

78
00:03:51.890 --> 00:03:55.160
where we could see each step and its input and output.

79
00:03:55.160 --> 00:03:57.630
For example, in our report generation workflow,

80
00:03:57.630 --> 00:04:00.420
we can clearly see the client email and if there

81
00:04:00.420 --> 00:04:03.890
were other sensitive information, we would be able to see those as well,

82
00:04:03.890 --> 00:04:08.840
and anyone who has access to this workflow designer would be able to see those.

83
00:04:08.840 --> 00:04:09.790
As of this moment,

84
00:04:09.790 --> 00:04:13.240
Step functions does not offer any whales and creeping or hiding para

85
00:04:13.240 --> 00:04:16.550
meters from the Visualize er and the execution history tow.

86
00:04:16.550 --> 00:04:17.340
Avoid these.

87
00:04:17.340 --> 00:04:21.310
We can use a different data store for parameters, for example.

88
00:04:21.310 --> 00:04:24.880
We could use an increased the database or we can choose an increase.

89
00:04:24.880 --> 00:04:25.690
That s Reebok.

90
00:04:25.690 --> 00:04:29.680
It just for this purpose where as a pi a meter would be the file

91
00:04:29.680 --> 00:04:33.280
pointing to the payload and the underlying function would know what to

92
00:04:33.280 --> 00:04:37.950
do with it and read it so we can make sure that only people who are

93
00:04:37.950 --> 00:04:41.930
allowed to confuse sensitive information and not mistaken we make them

94
00:04:41.930 --> 00:04:43.880
available in the locks.

95
00:04:43.880 --> 00:04:45.620
That is all for managing security.

96
00:04:45.620 --> 00:04:47.540
For in ws step functions.

97
00:04:47.540 --> 00:04:49.980
We have a variety of options for handling accessed

98
00:04:49.980 --> 00:04:52.140
from and towards the function.

99
00:04:52.140 --> 00:04:54.280
They support all different security options.

100
00:04:54.280 --> 00:04:58.960
Other AWS service's support it security case is different from here.

101
00:04:58.960 --> 00:05:02.720
You can try to pass par meters between your steps using an encrypted extra

102
00:05:02.720 --> 00:05:11.000
pocket or a database and give access to your different were close to different users to get more familiar with security.

