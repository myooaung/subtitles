1
00:00:01,460 --> 00:00:03,680
[Autogenerated] as with any other business workflow,

2
00:00:03,680 --> 00:00:05,940
and our handling is crucial.

3
00:00:05,940 --> 00:00:07,960
When an error occurs, we have toe.

4
00:00:07,960 --> 00:00:11,340
Either we drive the action or call some other business

5
00:00:11,340 --> 00:00:15,630
service in case off specific errors and with AWS step

6
00:00:15,630 --> 00:00:18,080
functions and or handling is very easy.

7
00:00:18,080 --> 00:00:21,430
We can define our air or catching logic in each off our steps and

8
00:00:21,430 --> 00:00:24,540
decide what to do when a specific error occurs,

9
00:00:24,540 --> 00:00:29,090
which in most cases is to move to another state based on the error type.

10
00:00:29,090 --> 00:00:30,120
For this day more,

11
00:00:30,120 --> 00:00:34,090
we are going to use the work for we created in the previous clip for a report,

12
00:00:34,090 --> 00:00:36,400
generation workflow and at an ER,

13
00:00:36,400 --> 00:00:40,540
handing and retry logic to our steps in case something goes wrong.

14
00:00:40,540 --> 00:00:43,580
We are going to use the errors toe at branching logic.

15
00:00:43,580 --> 00:00:45,240
Poor workflow.

16
00:00:45,240 --> 00:00:48,610
Let's not forget to our workflow and added the definition.

17
00:00:48,610 --> 00:00:51,060
Clicking on the edit button will open up the workload

18
00:00:51,060 --> 00:00:54,200
definition where we can edit it toe, add error,

19
00:00:54,200 --> 00:00:55,530
handling four steps.

20
00:00:55,530 --> 00:00:57,660
We just need to add a catch property,

21
00:00:57,660 --> 00:01:01,650
which is an array off error handling logic for which state toe point,

22
00:01:01,650 --> 00:01:04,570
when a specific error occurs for our demo,

23
00:01:04,570 --> 00:01:07,570
we're going to add some error handling in the email step.

24
00:01:07,570 --> 00:01:08,560
If it fails,

25
00:01:08,560 --> 00:01:11,520
we're still going to go toe gene up step so we can clean up

26
00:01:11,520 --> 00:01:14,550
the generated PDF files For the email step.

27
00:01:14,550 --> 00:01:16,760
I have created a domino lender function,

28
00:01:16,760 --> 00:01:21,240
which throws an email sending failure exception regardless off the input.

29
00:01:21,240 --> 00:01:24,090
We are going to use these to simulate a failure on our

30
00:01:24,090 --> 00:01:26,000
email step to make things easier.

31
00:01:26,000 --> 00:01:30,470
Let's go be the function Aaron and change in our workflow now that

32
00:01:30,470 --> 00:01:33,040
our e mails that points were right Lambda function.

33
00:01:33,040 --> 00:01:36,950
Let's add our error handing logic on the email step.

34
00:01:36,950 --> 00:01:37,960
Let's add a catch.

35
00:01:37,960 --> 00:01:40,460
Property for the error equals value.

36
00:01:40,460 --> 00:01:43,230
We need to specify email sending failure,

37
00:01:43,230 --> 00:01:47,440
which is the error that we're throwing from our ____ Yolanda function.

38
00:01:47,440 --> 00:01:51,330
And for the next date, we're going to specify the cleanup state.

39
00:01:51,330 --> 00:01:53,330
So even email fares to sand.

40
00:01:53,330 --> 00:01:55,420
We're still going to clean up our files.

41
00:01:55,420 --> 00:02:00,160
Also, one more thing that we need to do is specify a result value.

42
00:02:00,160 --> 00:02:01,050
So we met.

43
00:02:01,050 --> 00:02:03,270
The exception results into a variable.

44
00:02:03,270 --> 00:02:06,870
Otherwise it will override the entire state machine out.

45
00:02:06,870 --> 00:02:09,240
Let's name it emails sending error.

46
00:02:09,240 --> 00:02:12,110
Up to this point, we are only handling a specific error.

47
00:02:12,110 --> 00:02:15,970
Email sending failure in case another type of error occurs.

48
00:02:15,970 --> 00:02:17,170
We won't move to the cleanup.

49
00:02:17,170 --> 00:02:21,010
State step functions also provide us with task state errors

50
00:02:21,010 --> 00:02:23,330
that we can use to handle task failures,

51
00:02:23,330 --> 00:02:26,200
which is more high level than handling the underlying

52
00:02:26,200 --> 00:02:28,020
service errors like London functions.

53
00:02:28,020 --> 00:02:32,440
In our case, here are all the space that we can use for error handling.

54
00:02:32,440 --> 00:02:34,240
We have states that old.

55
00:02:34,240 --> 00:02:37,940
This is a wild card and can be used to catch all errors.

56
00:02:37,940 --> 00:02:40,080
Next, we have states that run time.

57
00:02:40,080 --> 00:02:43,010
This error means that the execution failed because often

58
00:02:43,010 --> 00:02:44,710
exception that could not be processed.

59
00:02:44,710 --> 00:02:49,710
For example, when we try to apply an input or output path on Al Jason payload,

60
00:02:49,710 --> 00:02:54,540
this error cannot be retried and will always cause the workflow to end in error.

61
00:02:54,540 --> 00:02:54,980
Next,

62
00:02:54,980 --> 00:02:58,180
we have states that time out an error coast when the task

63
00:02:58,180 --> 00:03:00,700
grant's longer than the amount it's allowed to.

64
00:03:00,700 --> 00:03:03,140
We also have staged the past failed.

65
00:03:03,140 --> 00:03:06,770
This is used to catch tasks that failed their execution and

66
00:03:06,770 --> 00:03:09,550
finally we have states that permissions.

67
00:03:09,550 --> 00:03:11,930
This error occurs when a task fails to execute.

68
00:03:11,930 --> 00:03:15,670
Some called you do not having all the needed permissions in our workflow.

69
00:03:15,670 --> 00:03:16,820
On the email step,

70
00:03:16,820 --> 00:03:21,450
we're goingto also use the states that all which will act like a catch all

71
00:03:21,450 --> 00:03:25,570
options and catch any errors that we did not handle previously.

72
00:03:25,570 --> 00:03:29,230
That safe and execute our work floor and see what happens to start our work.

73
00:03:29,230 --> 00:03:29,940
The execution.

74
00:03:29,940 --> 00:03:33,440
We're going to use the same payload as we did in the previous clip.

75
00:03:33,440 --> 00:03:36,670
We are going to pass the data in a property called report Options,

76
00:03:36,670 --> 00:03:39,000
and we need to specify a client email, email,

77
00:03:39,000 --> 00:03:41,330
subject, female body and should increase.

78
00:03:41,330 --> 00:03:42,030
In our case,

79
00:03:42,030 --> 00:03:45,290
it does not matter if we said the shooting crew property to true or false.

80
00:03:45,290 --> 00:03:47,560
Since we only care about the email step,

81
00:03:47,560 --> 00:03:51,990
let's execute our floor and see the results as we can see the image step failed.

82
00:03:51,990 --> 00:03:54,940
But the cleanup step was executed regardless.

83
00:03:54,940 --> 00:03:57,370
And if we check the email step details,

84
00:03:57,370 --> 00:03:59,920
we can see that it's hard to say it's called error,

85
00:03:59,920 --> 00:04:02,080
which means the error handling took over and the

86
00:04:02,080 --> 00:04:04,140
workload execution was successful.

87
00:04:04,140 --> 00:04:08,800
For our email step, we want to retry in case the email standing face email,

88
00:04:08,800 --> 00:04:10,430
standing feels for so many reasons,

89
00:04:10,430 --> 00:04:14,030
so we want to try at least three times before we call it a failure.

90
00:04:14,030 --> 00:04:15,930
We're trying in AWS step function.

91
00:04:15,930 --> 00:04:18,240
Work clothes is also very straightforward.

92
00:04:18,240 --> 00:04:19,600
To add retrial logic,

93
00:04:19,600 --> 00:04:23,010
we need to use the retry property similar to the catch property.

94
00:04:23,010 --> 00:04:25,690
We need to specify the error time we are looking for.

95
00:04:25,690 --> 00:04:26,350
Next.

96
00:04:26,350 --> 00:04:28,890
We want to specify the amount of time we want to wait

97
00:04:28,890 --> 00:04:31,050
before starting the retry process.

98
00:04:31,050 --> 00:04:34,200
We also can specify the number off a tense we can retry.

99
00:04:34,200 --> 00:04:38,740
The default value is three, and finally we have a bank all free.

100
00:04:38,740 --> 00:04:41,260
This is a multiplier used to increase the interval

101
00:04:41,260 --> 00:04:43,380
between replies in this example.

102
00:04:43,380 --> 00:04:44,270
The first we try,

103
00:04:44,270 --> 00:04:48,480
we look her after 10 seconds and the second we try will occur 20

104
00:04:48,480 --> 00:04:51,630
seconds after the 1st 1 And if we had the third,

105
00:04:51,630 --> 00:04:54,980
that would be 40 seconds and so on on a work floor,

106
00:04:54,980 --> 00:04:56,460
we wanted to try on Lee.

107
00:04:56,460 --> 00:04:59,850
If the emails that frozen error email sending failure,

108
00:04:59,850 --> 00:05:02,740
let's add our retry property.

109
00:05:02,740 --> 00:05:06,170
The retry property can be specified together with a catch property.

110
00:05:06,170 --> 00:05:10,330
After the retry has finished, the catch will take over them for the error name.

111
00:05:10,330 --> 00:05:13,360
We need to specify the same error we did in the CAT state email.

112
00:05:13,360 --> 00:05:16,140
Sending failure, image sending can take time.

113
00:05:16,140 --> 00:05:19,210
So foreign interval That's put it as 15 seconds.

114
00:05:19,210 --> 00:05:22,340
We also want to try to send the email three times.

115
00:05:22,340 --> 00:05:26,770
So in the Mexican property, we need to specify the value to to retry attempts.

116
00:05:26,770 --> 00:05:30,650
Plus, the original run makes three and finally for the bank off.

117
00:05:30,650 --> 00:05:32,110
Great, let's set it before.

118
00:05:32,110 --> 00:05:33,850
If the first attempt fails,

119
00:05:33,850 --> 00:05:36,560
let's wait one minute before we try to send the email again.

120
00:05:36,560 --> 00:05:38,870
Now that we have set up a retrial logic,

121
00:05:38,870 --> 00:05:41,200
let's save our workflow and executed again.

122
00:05:41,200 --> 00:05:43,640
And after the workload has finished running,

123
00:05:43,640 --> 00:05:45,430
if we look at the execution history,

124
00:05:45,430 --> 00:05:47,980
we should see that the workflow was executed three times.

125
00:05:47,980 --> 00:05:51,510
We can see that the first retry has started 15 seconds

126
00:05:51,510 --> 00:05:53,940
after the original run had failed,

127
00:05:53,940 --> 00:05:57,430
and if we compare the first retry with the second to retry,

128
00:05:57,430 --> 00:05:59,380
they should have 60 seconds in between.

129
00:05:59,380 --> 00:06:02,720
And indeed, they have 60 seconds in between.

130
00:06:02,720 --> 00:06:06,830
One was started at four away and the other at 409 after

131
00:06:06,830 --> 00:06:08,740
which the cleanup step was start.

132
00:06:08,740 --> 00:06:10,270
That's all for catching errors,

133
00:06:10,270 --> 00:06:13,810
enhancing retrial logic in AWS step function work flows.

134
00:06:13,810 --> 00:06:16,740
It's a very powerful way off making work through decision based

135
00:06:16,740 --> 00:06:19,350
on errors to make our work close more robust.

136
00:06:19,350 --> 00:06:20,420
Using this knowledge,

137
00:06:20,420 --> 00:06:23,280
try throwing different hair types and making different decision.

138
00:06:23,280 --> 00:06:32,000
Using this workflow or your own work clothes that you have desired, we'll dive into other interesting topics in the clips to come.

