1
00:00:02,280 --> 00:00:03,470
[Autogenerated] at its core A.

2
00:00:03,470 --> 00:00:06,260
W and step functions are state machines.

3
00:00:06,260 --> 00:00:09,630
Estate is what we used to tell it what to do next.

4
00:00:09,630 --> 00:00:13,760
They are seven types off AWS states that we can utilize to

5
00:00:13,760 --> 00:00:16,390
build our work flows in a step function.

6
00:00:16,390 --> 00:00:20,480
A task represents a single unit off work performed by a state machine.

7
00:00:20,480 --> 00:00:25,090
Any work that is to be done is performed uniform off a desk.

8
00:00:25,090 --> 00:00:27,310
Tasks belonged to three categories.

9
00:00:27,310 --> 00:00:31,580
A Lambda Function Step functions can call Lamda functions directly.

10
00:00:31,580 --> 00:00:34,570
We could use this easy integration to write our logic in

11
00:00:34,570 --> 00:00:37,920
a server less lambda function toe build our work flows

12
00:00:37,920 --> 00:00:40,790
tasks can also be activities.

13
00:00:40,790 --> 00:00:43,840
Activity is a program that run somewhere else.

14
00:00:43,840 --> 00:00:46,360
Maybe Izzy Poole or um, Premise.

15
00:00:46,360 --> 00:00:49,810
The activity continuously pulls for pending tasks,

16
00:00:49,810 --> 00:00:53,750
runs them and post the information back to the step function so

17
00:00:53,750 --> 00:00:56,130
the workflow can continue to the next state.

18
00:00:56,130 --> 00:01:01,050
And also we have other supported AWS service is when you reference or

19
00:01:01,050 --> 00:01:04,940
connected resource step functions directly called the P I.

20
00:01:04,940 --> 00:01:07,310
On that resource, for example,

21
00:01:07,310 --> 00:01:10,880
we can run any ws patch job publisher topic in Amazon.

22
00:01:10,880 --> 00:01:13,930
Simple notification service Send messages to Amazon.

23
00:01:13,930 --> 00:01:17,270
Simple Q service trigger glue jobs, et cetera.

24
00:01:17,270 --> 00:01:21,810
No workflow would be complete without the ability to make decisions on dhe.

25
00:01:21,810 --> 00:01:24,340
For step functions, we use the choice they tow.

26
00:01:24,340 --> 00:01:28,470
Add branching logic to our work so we can use and or

27
00:01:28,470 --> 00:01:30,760
and not operators for our logic.

28
00:01:30,760 --> 00:01:35,370
Currently, we can compare billions, strings, numbers and time stamps.

29
00:01:35,370 --> 00:01:36,700
Let's look at an example.

30
00:01:36,700 --> 00:01:40,720
Here we have a choice state that looks for a property called in grief.

31
00:01:40,720 --> 00:01:43,210
If the angry property is set to true,

32
00:01:43,210 --> 00:01:46,340
we goto the angry Steptoe encrypt our document First.

33
00:01:46,340 --> 00:01:48,740
If the ankle properties that falls,

34
00:01:48,740 --> 00:01:52,940
then we go directly to the email step and send the document.

35
00:01:52,940 --> 00:01:55,470
And if none of these conditions meet,

36
00:01:55,470 --> 00:01:58,400
we go directly to the e mails that the weight state,

37
00:01:58,400 --> 00:01:59,810
as the name suggests,

38
00:01:59,810 --> 00:02:04,020
it delays the state machine execution for a specified amount of time.

39
00:02:04,020 --> 00:02:06,250
We have two types off ways.

40
00:02:06,250 --> 00:02:08,830
We can wait for an amount of time in seconds,

41
00:02:08,830 --> 00:02:13,290
which works like a delay, or we can wait until a specified times them,

42
00:02:13,290 --> 00:02:16,990
for example, wait until December 31 to execute.

43
00:02:16,990 --> 00:02:20,510
Here's an example off how we would define awaits state.

44
00:02:20,510 --> 00:02:21,640
We specify the type.

45
00:02:21,640 --> 00:02:27,340
Wait and we can either specify a value in seconds or a time stamp.

46
00:02:27,340 --> 00:02:30,010
The weight duration can also be dynamic.

47
00:02:30,010 --> 00:02:33,850
We can use values from the input as para meters for the times time duration.

48
00:02:33,850 --> 00:02:38,390
For example, we can use the property expired date as our times time property,

49
00:02:38,390 --> 00:02:42,340
using the times, time path setting on the steppe definition.

50
00:02:42,340 --> 00:02:45,780
This way we can have our work flows be more dynamic.

51
00:02:45,780 --> 00:02:48,790
Next, we have the best state A pest.

52
00:02:48,790 --> 00:02:51,140
Lee doesn't perform any work.

53
00:02:51,140 --> 00:02:55,280
The main purpose is to pass its input to the output.

54
00:02:55,280 --> 00:02:59,310
They are mostly used for constructing and debugging state machines.

55
00:02:59,310 --> 00:03:03,440
Let's say we want to add some data out of the state machine result.

56
00:03:03,440 --> 00:03:06,360
We can use the best state and we can pass the data in

57
00:03:06,360 --> 00:03:08,560
the result property off the past day.

58
00:03:08,560 --> 00:03:11,570
We also have the option to use a result path.

59
00:03:11,570 --> 00:03:16,840
This will group our data into a property that we specify in the result path.

60
00:03:16,840 --> 00:03:20,430
So in our case, we specify first name and last name.

61
00:03:20,430 --> 00:03:25,010
And in the result path, we specify that we want our data Toby under identity.

62
00:03:25,010 --> 00:03:27,700
Once this step is executed in the result,

63
00:03:27,700 --> 00:03:30,080
we would see an identity object with the first name

64
00:03:30,080 --> 00:03:31,990
on the last name for properties.

65
00:03:31,990 --> 00:03:36,310
Each workflow has to have an end and succeeded and failed.

66
00:03:36,310 --> 00:03:39,540
States are used to stop the execution off a workflow.

67
00:03:39,540 --> 00:03:42,320
When our workflow execution comes to a land,

68
00:03:42,320 --> 00:03:46,210
we can either use a succeeded or failed state to mark our workflow.

69
00:03:46,210 --> 00:03:48,250
Accordingly on the fields tape,

70
00:03:48,250 --> 00:03:51,440
you can specify a cause and an error for the field.

71
00:03:51,440 --> 00:03:55,460
It helps with better visualization and understanding work flows.

72
00:03:55,460 --> 00:03:58,210
There are cases where we might want to run some

73
00:03:58,210 --> 00:04:00,820
parts off our workflow in parallel.

74
00:04:00,820 --> 00:04:03,300
These are cold branches, for example.

75
00:04:03,300 --> 00:04:06,600
We can have a work for where we can look up the address and

76
00:04:06,600 --> 00:04:09,170
the phone number in parallel for a customer.

77
00:04:09,170 --> 00:04:12,380
We can run this in parallel using a parallel state.

78
00:04:12,380 --> 00:04:14,700
It's branch must be self contained.

79
00:04:14,700 --> 00:04:18,850
Estate in one branch cannot target field in another branch.

80
00:04:18,850 --> 00:04:22,150
Here is how we might achieve above example.

81
00:04:22,150 --> 00:04:24,800
We start by specifying a parallel state.

82
00:04:24,800 --> 00:04:27,690
In this case, it's name look up customer info.

83
00:04:27,690 --> 00:04:31,650
The state itself has branches, and each branch has its own states.

84
00:04:31,650 --> 00:04:35,220
So each branch is like its own isolated work floor,

85
00:04:35,220 --> 00:04:38,840
which executes in parallel with other branches in our case.

86
00:04:38,840 --> 00:04:41,340
Each branch has only one state.

87
00:04:41,340 --> 00:04:42,920
Look up a dress and look up.

88
00:04:42,920 --> 00:04:45,950
Phone both the steps with executing parallel,

89
00:04:45,950 --> 00:04:49,870
which allows for work flows to complete with optimal performance.

90
00:04:49,870 --> 00:04:54,950
And finally, we have the maps D, sometimes even an import.

91
00:04:54,950 --> 00:04:57,660
We might want to run a set of steps multiple times

92
00:04:57,660 --> 00:04:59,560
to eat a rate over that import.

93
00:04:59,560 --> 00:05:02,860
For example, if we have a list of items we want to process,

94
00:05:02,860 --> 00:05:06,360
we can use the next day to run a series of steps for all the

95
00:05:06,360 --> 00:05:09,290
elements off the input array and Matt Steed.

96
00:05:09,290 --> 00:05:10,160
Well, it's a raid,

97
00:05:10,160 --> 00:05:14,910
a serious off steps to run for each item in the in pottery and passed

98
00:05:14,910 --> 00:05:18,500
each element off the ray tweet steps as an import.

99
00:05:18,500 --> 00:05:20,280
Let's look at an example off a map.

100
00:05:20,280 --> 00:05:22,050
Steve has any put.

101
00:05:22,050 --> 00:05:23,530
We have a date Object,

102
00:05:23,530 --> 00:05:27,430
which has an email is for our clients that we want to send e mails to.

103
00:05:27,430 --> 00:05:28,840
In our email step.

104
00:05:28,840 --> 00:05:32,890
We have said the type as man, and we need to define the input bath,

105
00:05:32,890 --> 00:05:36,510
which tells it where the data is and the items bath,

106
00:05:36,510 --> 00:05:40,190
which specifies the least the data resides in in this case,

107
00:05:40,190 --> 00:05:42,730
the input path is data and items bath.

108
00:05:42,730 --> 00:05:45,540
His e mails, where are email least resides.

109
00:05:45,540 --> 00:05:48,890
We then specify the steps that need to run inside the operator.

110
00:05:48,890 --> 00:05:52,640
They, the raider, can have as many steps as I needed for our case.

111
00:05:52,640 --> 00:05:56,580
This gives as a convenient way when we need to reiterate over an

112
00:05:56,580 --> 00:05:59,630
input rather than call the workflow multiple times.

113
00:05:59,630 --> 00:06:00,780
In our case,

114
00:06:00,780 --> 00:06:04,320
this will iterated through each email and execute the emails

115
00:06:04,320 --> 00:06:07,540
that passing the email object as a perimeter.

116
00:06:07,540 --> 00:06:19,000
This is all the different states AWS step functions currently supports. We'll see the states in the actions in the cliffs to calm.

