1
00:00:01,440 --> 00:00:02,340
[Autogenerated] hi.

2
00:00:02,340 --> 00:00:03,080
In this clip,

3
00:00:03,080 --> 00:00:05,340
I'm going to look at some of the best practices when it

4
00:00:05,340 --> 00:00:07,070
comes to building step functions.

5
00:00:07,070 --> 00:00:08,940
First, we have time out.

6
00:00:08,940 --> 00:00:12,340
Time outs are very important in any type of obligation,

7
00:00:12,340 --> 00:00:14,640
and step functions are no exception.

8
00:00:14,640 --> 00:00:18,250
If there is an obvious run time, there's something should take to run.

9
00:00:18,250 --> 00:00:21,340
Then we should limit our steps to that amount of time.

10
00:00:21,340 --> 00:00:24,140
We should make something timeout, a common practice.

11
00:00:24,140 --> 00:00:28,250
So if something goes wrong or we have some sort of Lupin are code,

12
00:00:28,250 --> 00:00:31,640
it's your time out so we could investigate quickly.

13
00:00:31,640 --> 00:00:32,710
While in development.

14
00:00:32,710 --> 00:00:35,420
Time out won't be much use to US scenes.

15
00:00:35,420 --> 00:00:38,840
We mostly run tests on a controlled environment,

16
00:00:38,840 --> 00:00:41,340
but in production they could be invaluable.

17
00:00:41,340 --> 00:00:44,300
We could easily identify failed jobs by the time out

18
00:00:44,300 --> 00:00:46,820
status and also save some resources.

19
00:00:46,820 --> 00:00:49,730
In the meantime, in a complex work floor,

20
00:00:49,730 --> 00:00:52,770
the payloads for some steps could become quite large.

21
00:00:52,770 --> 00:00:56,270
We should avoid using large payloads, and instead we could use,

22
00:00:56,270 --> 00:00:56,930
for example,

23
00:00:56,930 --> 00:00:59,540
Amazon simple storage or a database to store their

24
00:00:59,540 --> 00:01:01,940
data and move it between state.

25
00:01:01,940 --> 00:01:04,260
So instead of passing a payload,

26
00:01:04,260 --> 00:01:09,540
we could pass a file I D or a database I D Errors will always happen

27
00:01:09,540 --> 00:01:13,830
something sometime we'll go wrong being that the code that we wrote or

28
00:01:13,830 --> 00:01:16,640
a network issue or in AWS service issue,

29
00:01:16,640 --> 00:01:17,250
for example,

30
00:01:17,250 --> 00:01:21,590
sometimes aws some the functions can experience transit service error,

31
00:01:21,590 --> 00:01:24,590
in which case it will throw all 500 a roll call.

32
00:01:24,590 --> 00:01:28,640
It's a very good practice toe handle errors on the workflow level based on

33
00:01:28,640 --> 00:01:33,370
which we can either make a decision to go to some cleanup step where we can

34
00:01:33,370 --> 00:01:37,320
clean up previously generated files and undo any actions that we might need

35
00:01:37,320 --> 00:01:40,010
to undo or terminate the workflow.

36
00:01:40,010 --> 00:01:42,450
And also based on the aero time.

37
00:01:42,450 --> 00:01:44,790
You can also retry failed steps.

38
00:01:44,790 --> 00:01:45,470
For example,

39
00:01:45,470 --> 00:01:49,590
we can retry steps that are prone to errors that can benefit from a retrial,

40
00:01:49,590 --> 00:01:53,540
for example, e mails sending or other network related desks.

41
00:01:53,540 --> 00:01:55,030
The Get Activity task.

42
00:01:55,030 --> 00:01:59,640
FBI is designed to provide a task token on Lee once,

43
00:01:59,640 --> 00:02:03,480
if a task talking his drop while communicating with an activity worker.

44
00:02:03,480 --> 00:02:08,050
A number off get activity task request can be blocked for up to 60 seconds,

45
00:02:08,050 --> 00:02:12,440
waiting for a response until get activity task times out.

46
00:02:12,440 --> 00:02:15,460
So it's very important that the task token is received

47
00:02:15,460 --> 00:02:18,200
properly and there is no communication issues.

48
00:02:18,200 --> 00:02:20,360
And finally we need to to the correct work.

49
00:02:20,360 --> 00:02:24,520
So type step Functions offers a standard work slow as a default work.

50
00:02:24,520 --> 00:02:28,250
So type with the option to choose express were floors we need to to

51
00:02:28,250 --> 00:02:30,830
stand that were close when we need long running,

52
00:02:30,830 --> 00:02:33,640
durable and auditable work flows.

53
00:02:33,640 --> 00:02:36,460
Or we need to choose express work flows for high

54
00:02:36,460 --> 00:02:38,900
volume event processing work floors.

55
00:02:38,900 --> 00:02:41,410
State machine execution will behave differently

56
00:02:41,410 --> 00:02:43,890
depending on which type we select,

57
00:02:43,890 --> 00:02:47,700
and the type of truth cannot be changed afterwards.

58
00:02:47,700 --> 00:02:50,500
Make sure you spend some time to decide if your workflow

59
00:02:50,500 --> 00:02:53,920
should be expressed or standard so you can get the best

60
00:02:53,920 --> 00:02:55,500
performance out of your work.

61
00:02:55,500 --> 00:02:57,650
Slow to continue this further.

62
00:02:57,650 --> 00:03:00,440
Try applying this information to our previously created work

63
00:03:00,440 --> 00:03:04,140
clothes and update each accordingly if needed,

64
00:03:04,140 --> 00:03:10,000
so you can get a better handle on the different aspect off work. So desire

