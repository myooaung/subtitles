WEBVTT
1
00:00:00.050 --> 00:00:02.090
- [Instructor] H+ Sport IT department has moved forward

2
00:00:02.090 --> 00:00:04.090
with quite a few changes, adopting the use

3
00:00:04.090 --> 00:00:07.090
of Tomcat, WebLogic, JBoss WildFly,

4
00:00:07.090 --> 00:00:11.010
and now there's intent interest on GlassFish,

5
00:00:11.010 --> 00:00:14.030
and especially using Payara's licensed support version.

6
00:00:14.030 --> 00:00:17.050
So, what is the deal with Payara

7
00:00:17.050 --> 00:00:19.090
and its antecedent, GlassFish?

8
00:00:19.090 --> 00:00:21.080
Well, there's a long history building up to Payara

9
00:00:21.080 --> 00:00:25.020
through GlassFish from many earlier servery names.

10
00:00:25.020 --> 00:00:26.090
Let's step back in time for a moment

11
00:00:26.090 --> 00:00:29.030
and quickly walk through this.

12
00:00:29.030 --> 00:00:31.090
Back in 1996, Kiva Software released

13
00:00:31.090 --> 00:00:35.020
the Kiva Enterprise Server, which was the very first

14
00:00:35.020 --> 00:00:37.000
Java application server.

15
00:00:37.000 --> 00:00:40.060
Interestingly, Java.10 was released that same year,

16
00:00:40.060 --> 00:00:44.000
and Kiva Enterprise Server predates Tomcat,

17
00:00:44.000 --> 00:00:46.090
which was first released in 1998.

18
00:00:46.090 --> 00:00:49.060
Kiva customers included Bank of America,

19
00:00:49.060 --> 00:00:52.020
E-Trade, Travelocity, Internet Shopping Network,

20
00:00:52.020 --> 00:00:54.010
Hong Kong Telecom and a few others,

21
00:00:54.010 --> 00:00:57.020
but their success came with a price.

22
00:00:57.020 --> 00:00:59.090
In 1997, Netscape acquired Kiva

23
00:00:59.090 --> 00:01:03.070
and renamed the app server the Netscape Application Server,

24
00:01:03.070 --> 00:01:05.010
or NAS.

25
00:01:05.010 --> 00:01:08.010
NAS, again, grew in popularity when, in 1999,

26
00:01:08.010 --> 00:01:11.060
Sun and Netscape form an alliance

27
00:01:11.060 --> 00:01:16.050
and released NAS4 including early support for a version

28
00:01:16.050 --> 00:01:22.050
of J2EE API with serverless CJBs, JSPs, and JDBC.

29
00:01:22.050 --> 00:01:26.040
Sun Microsystems had their own server at the time

30
00:01:26.040 --> 00:01:29.020
called NetDynamics, and for a while,

31
00:01:29.020 --> 00:01:33.010
there was thought about merging the libraries with NAS4.

32
00:01:33.010 --> 00:01:39.060
Instead, NAS4 was renamed to iPlanet Application Server 5.

33
00:01:39.060 --> 00:01:43.000
Netscape became AOL and Sun continued

34
00:01:43.000 --> 00:01:46.050
to support the iPlanet suite.

35
00:01:46.050 --> 00:01:49.050
In 2002, this alliance between AOL

36
00:01:49.050 --> 00:01:52.030
that started with Netscape and Sun ended

37
00:01:52.030 --> 00:01:55.060
and Sun parted, taking with them the iPlanet

38
00:01:55.060 --> 00:01:58.080
and renaming it to the Stanford University Network

39
00:01:58.080 --> 00:02:01.090
Open Net Environment Application Server.

40
00:02:01.090 --> 00:02:03.080
Phew, what a mouthful.

41
00:02:03.080 --> 00:02:05.070
Luckily, this was done so they could call it

42
00:02:05.070 --> 00:02:09.080
the Sun ONE Application Server Version 7 for short.

43
00:02:09.080 --> 00:02:12.090
I'll let you absorb that for a moment.

44
00:02:12.090 --> 00:02:16.080
Interestingly, this new Sun ONE App Server Version 7

45
00:02:16.080 --> 00:02:20.070
was closed source, but it now contained source code

46
00:02:20.070 --> 00:02:24.080
from Tomcat 4, which was open-source.

47
00:02:24.080 --> 00:02:27.050
For version 8, the name was changed again

48
00:02:27.050 --> 00:02:30.070
to Sun Java Application Server Version 8,

49
00:02:30.070 --> 00:02:35.050
and it was declared J2EE 1.4 compatible.

50
00:02:35.050 --> 00:02:38.050
At this, Sun began calling this

51
00:02:38.050 --> 00:02:41.070
the reference implementation.

52
00:02:41.070 --> 00:02:43.050
Okay, moving right along.

53
00:02:43.050 --> 00:02:47.090
In 2005, the open-source project GlassFish was formed,

54
00:02:47.090 --> 00:02:53.070
and the source code from SJSAS9 was donated

55
00:02:53.070 --> 00:02:57.010
to the project GlassFish Application Server.

56
00:02:57.010 --> 00:03:00.020
In 2006, version one of GlassFish was released,

57
00:03:00.020 --> 00:03:05.000
declaring that it was Java EE 5 compatible.

58
00:03:05.000 --> 00:03:08.060
From there, two more versions were released in 2011.

59
00:03:08.060 --> 00:03:11.050
Sun Microsystems was acquired by Oracle.

60
00:03:11.050 --> 00:03:13.080
Oracle already had acquired WebLogic,

61
00:03:13.080 --> 00:03:15.060
so there was a number of questions

62
00:03:15.060 --> 00:03:18.020
to the fate of GlassFish.

63
00:03:18.020 --> 00:03:22.010
Oracle continued making bug fixes and released GlassFish 4,

64
00:03:22.010 --> 00:03:25.000
which was Java EE 7 compatible,

65
00:03:25.000 --> 00:03:30.010
but it included no major updates to the functionality.

66
00:03:30.010 --> 00:03:33.000
The question concerning GlassFish's fate were right

67
00:03:33.000 --> 00:03:35.020
to be asked because Oracle announced a couple

68
00:03:35.020 --> 00:03:38.060
of years later, in 2017, that it no longer wanted

69
00:03:38.060 --> 00:03:43.000
to be responsible for JavaEE and/or GlassFish anymore.

70
00:03:43.000 --> 00:03:46.040
So, in 2018, a deal was made between Oracle

71
00:03:46.040 --> 00:03:51.090
and Eclipse Foundation to transfer GlassFish as EE4J,

72
00:03:51.090 --> 00:03:54.030
to which it happened.

73
00:03:54.030 --> 00:03:56.020
The deal between Oracle and Eclipse

74
00:03:56.020 --> 00:03:59.070
included a further release at version 5.1,

75
00:03:59.070 --> 00:04:02.010
completely rebuilt by Eclipse organization

76
00:04:02.010 --> 00:04:05.050
with relicensed components, making GlassFish

77
00:04:05.050 --> 00:04:09.020
fully Java EE 8 certified.

78
00:04:09.020 --> 00:04:11.050
This is where Payara enters the picture.

79
00:04:11.050 --> 00:04:14.050
Payara Services began assisting in the code transfer

80
00:04:14.050 --> 00:04:16.030
with the Eclipse Foundation,

81
00:04:16.030 --> 00:04:18.040
specifically contributing to transferring

82
00:04:18.040 --> 00:04:24.000
of several API projects and associated implementations.

83
00:04:24.000 --> 00:04:26.080
By the way, Payara is the name

84
00:04:26.080 --> 00:04:28.090
for a fish found in the Amazon basin,

85
00:04:28.090 --> 00:04:31.050
sometimes called the vampire fish

86
00:04:31.050 --> 00:04:33.010
because of its long fangs.

87
00:04:33.010 --> 00:04:34.060
Of course, this does not mean

88
00:04:34.060 --> 00:04:38.000
that Payara App Server is sucking the life from GlassFish,

89
00:04:38.000 --> 00:04:41.000
but actually, breathing new life into the framework,

90
00:04:41.000 --> 00:04:44.060
which, as you can see, GlassFish has had many names

91
00:04:44.060 --> 00:04:48.020
and transitional software forms in its past lives.

92
00:04:48.020 --> 00:04:51.070
The Payara App Server is a fork of GlassFish,

93
00:04:51.070 --> 00:04:55.010
under Eclipse Foundation, and a drop-in replacement

94
00:04:55.010 --> 00:04:57.010
for GlassFish as well.

95
00:04:57.010 --> 00:05:00.070
Payara includes quarterly bug fixes and improvements

96
00:05:00.070 --> 00:05:04.040
that outpace the current GlassFish release schedule.

97
00:05:04.040 --> 00:05:08.000
The other nice piece here is Payara's support service plan.

98
00:05:08.000 --> 00:05:13.030
You can use the app server for free or by support.

99
00:05:13.030 --> 00:05:17.020
Because Oracle is not providing paid support anymore

100
00:05:17.020 --> 00:05:22.010
for GlassFish, most organizations need to manage the risks

101
00:05:22.010 --> 00:05:23.080
of unsupported servers.

102
00:05:23.080 --> 00:05:27.040
Payara is a great choice, especially if your environment

103
00:05:27.040 --> 00:05:30.000
is already based on GlassFish.

