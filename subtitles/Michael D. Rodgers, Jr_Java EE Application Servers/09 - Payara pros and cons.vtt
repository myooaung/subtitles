WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Instructor] H+ Sport IT Department has now requested

2
00:00:03.010 --> 00:00:05.080
that you weigh the advantages and disadvantages

3
00:00:05.080 --> 00:00:08.080
of H+ Sport drink using Payara.

4
00:00:08.080 --> 00:00:11.000
There are many things to take in account.

5
00:00:11.000 --> 00:00:15.080
Let's consider the advantages of using Payara for a moment.

6
00:00:15.080 --> 00:00:18.090
Payara is a drop-in replacement for GlassFish.

7
00:00:18.090 --> 00:00:20.040
This means that if you're needing

8
00:00:20.040 --> 00:00:24.060
to replace your GlassFish server instances due to licensing,

9
00:00:24.060 --> 00:00:26.050
support, or whatever the reason,

10
00:00:26.050 --> 00:00:29.000
you can simply download, install, configure,

11
00:00:29.000 --> 00:00:33.060
and your existing JEE web applications will just run

12
00:00:33.060 --> 00:00:36.010
on Payara without making tweaks

13
00:00:36.010 --> 00:00:39.060
to your application's code base or dependencies.

14
00:00:39.060 --> 00:00:42.070
Because it's a drop-in replacement for GlassFish,

15
00:00:42.070 --> 00:00:44.050
this also means that it can perform

16
00:00:44.050 --> 00:00:50.070
at the same certification level of GlassFish 5, at JEE 8.

17
00:00:50.070 --> 00:00:55.010
Payara can't claim specifically a Java certification due

18
00:00:55.010 --> 00:00:58.040
to other constraints, so Payara addresses

19
00:00:58.040 --> 00:01:00.050
the JEE certification question

20
00:01:00.050 --> 00:01:04.050
by stating that Payara is compatible at the same level

21
00:01:04.050 --> 00:01:08.000
of certification of GlassFish.

22
00:01:08.000 --> 00:01:10.090
Payara is also downstream of GlassFish,

23
00:01:10.090 --> 00:01:13.070
meaning that it has all of the bug fixes

24
00:01:13.070 --> 00:01:16.090
and releases from GlassFish,

25
00:01:16.090 --> 00:01:21.000
but it also provides quarter releases for community

26
00:01:21.000 --> 00:01:24.030
and monthly patches for customers.

27
00:01:24.030 --> 00:01:26.060
Payara's relationship to GlassFish means

28
00:01:26.060 --> 00:01:29.060
that it not only incorporates upstream bug fixes

29
00:01:29.060 --> 00:01:33.030
and patches, but Payara contains tooling

30
00:01:33.030 --> 00:01:37.010
that's not available in GlassFish, like deployment groups,

31
00:01:37.010 --> 00:01:42.000
which enhances GlassFish's server clustering capabilities.

32
00:01:42.000 --> 00:01:45.080
Speaking of clustering, Payara uses, behind the scenes,

33
00:01:45.080 --> 00:01:50.020
Hazelcast and In-Memory Data Grid to cache sessions.

34
00:01:50.020 --> 00:01:52.060
Storing sessions in Hazelcast means

35
00:01:52.060 --> 00:01:55.070
that session data is stored in multiple copies

36
00:01:55.070 --> 00:01:58.080
and kept synchronized across server group members,

37
00:01:58.080 --> 00:02:01.070
which provides session availability if

38
00:02:01.070 --> 00:02:04.080
and when a Payara node goes down for maintenance

39
00:02:04.080 --> 00:02:07.080
or other unforeseen issues.

40
00:02:07.080 --> 00:02:10.070
Another nice feature of Payara is its administrative

41
00:02:10.070 --> 00:02:12.020
web console.

42
00:02:12.020 --> 00:02:15.000
It maintains a similar layout to GlassFish,

43
00:02:15.000 --> 00:02:18.020
making it easy to navigate, but also attempts

44
00:02:18.020 --> 00:02:20.030
to put common tasks up front

45
00:02:20.030 --> 00:02:23.010
so you don't have to drill down in the left navigation

46
00:02:23.010 --> 00:02:26.030
for frequent tasks like deploying an app,

47
00:02:26.030 --> 00:02:29.030
altering a user credential, monitoring logs,

48
00:02:29.030 --> 00:02:32.090
or modifying database resources.

49
00:02:32.090 --> 00:02:36.060
Payara, additionally, incorporates long-standing support

50
00:02:36.060 --> 00:02:39.070
for GlassFish's command-line interface, the CLI,

51
00:02:39.070 --> 00:02:43.040
which is very important in modern server infrastructures

52
00:02:43.040 --> 00:02:45.080
for maintaining and quickly sending commands

53
00:02:45.080 --> 00:02:49.030
to Payara without navigating the browser.

54
00:02:49.030 --> 00:02:51.040
There are probably much more that can be said,

55
00:02:51.040 --> 00:02:54.020
like paid support available for Payara,

56
00:02:54.020 --> 00:02:58.080
the availability to use JDKs other than Oracle's JDK,

57
00:02:58.080 --> 00:03:03.010
Payara IDE integration with Eclipse, Netbeans, and IntelliJ,

58
00:03:03.010 --> 00:03:05.030
or Payara's Docker support.

59
00:03:05.030 --> 00:03:07.060
So, those are some of the advantages,

60
00:03:07.060 --> 00:03:10.050
but what about the disadvantages?

61
00:03:10.050 --> 00:03:13.060
We touched on this somewhat, but Payara can't claim,

62
00:03:13.060 --> 00:03:18.030
per se, a Java EE 7 or 8 certification.

63
00:03:18.030 --> 00:03:21.090
It gets around this by talking about this in terms

64
00:03:21.090 --> 00:03:25.040
of drop-in replacement for GlassFish.

65
00:03:25.040 --> 00:03:27.000
Is this a disadvantage?

66
00:03:27.000 --> 00:03:30.030
Not sure, but Payara seems to sidestep the question,

67
00:03:30.030 --> 00:03:33.000
maybe for legal reasons, in all their official

68
00:03:33.000 --> 00:03:36.070
developer blogs and customer-facing sites.

69
00:03:36.070 --> 00:03:39.050
Another issue that could, again, be a showstopper

70
00:03:39.050 --> 00:03:42.070
for many is that Payara, as of this video,

71
00:03:42.070 --> 00:03:47.030
can currently only run on JDK8.

72
00:03:47.030 --> 00:03:49.070
It will not run on nine or above.

73
00:03:49.070 --> 00:03:52.000
If your organization is constrained

74
00:03:52.000 --> 00:03:53.090
by using more recent Java versions,

75
00:03:53.090 --> 00:03:57.060
well, this is something to consider.

76
00:03:57.060 --> 00:04:00.050
So, some closing thoughts here for Payara.

77
00:04:00.050 --> 00:04:02.060
There is a low cost of entry for using Payara

78
00:04:02.060 --> 00:04:05.030
since it's open-source, but you can also purchase

79
00:04:05.030 --> 00:04:07.030
paid support as well.

80
00:04:07.030 --> 00:04:10.000
And Payara has a long history through GlassFish,

81
00:04:10.000 --> 00:04:12.000
and I hope to see that continue.

