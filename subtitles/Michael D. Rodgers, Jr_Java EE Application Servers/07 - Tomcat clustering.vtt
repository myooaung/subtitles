WEBVTT
1
00:00:00.000 --> 00:00:02.020
- [Instructor] Web application server clustering

2
00:00:02.020 --> 00:00:04.070
offers some nice benefits in sharing user session

3
00:00:04.070 --> 00:00:07.040
when combined with load balancing,

4
00:00:07.040 --> 00:00:10.050
thus providing scalability and high availability

5
00:00:10.050 --> 00:00:13.000
of the application to its users.

6
00:00:13.000 --> 00:00:15.030
Although it's pretty common to talk about load balancing

7
00:00:15.030 --> 00:00:18.000
using Apache HTTP Server,

8
00:00:18.000 --> 00:00:21.040
or some other load balancing appliance like BIG-IP,

9
00:00:21.040 --> 00:00:23.050
for this video we're going to stay focused

10
00:00:23.050 --> 00:00:25.050
on how to cluster two Tomcat servers,

11
00:00:25.050 --> 00:00:28.050
and not necessarily on load balancing.

12
00:00:28.050 --> 00:00:33.050
First, let's create a directory in our terminal window,

13
00:00:33.050 --> 00:00:34.090
we'll call this

14
00:00:34.090 --> 00:00:39.050
our tomcat9_cluster,

15
00:00:39.050 --> 00:00:42.040
we'll cd into the tomcat_9 cluster,

16
00:00:42.040 --> 00:00:45.040
and then we're going to copy

17
00:00:45.040 --> 00:00:50.060
our apache Tomcat 9 directory into our cluster

18
00:00:50.060 --> 00:00:51.050
directory,

19
00:00:51.050 --> 00:00:54.070
and we'll call it, node_a.

20
00:00:54.070 --> 00:00:57.010
Then we're going to copy,

21
00:00:57.010 --> 00:01:00.000
again using the -Rf

22
00:01:00.000 --> 00:01:00.090
node_a,

23
00:01:00.090 --> 00:01:04.040
and we'll call this one node_b,

24
00:01:04.040 --> 00:01:08.050
if we do a ls -la on

25
00:01:08.050 --> 00:01:09.040
node_b,

26
00:01:09.040 --> 00:01:12.030
you'll notice that all of the Tomcat configuration

27
00:01:12.030 --> 00:01:14.070
directories are available.

28
00:01:14.070 --> 00:01:15.050
With this done,

29
00:01:15.050 --> 00:01:17.050
we ar going to modify the port

30
00:01:17.050 --> 00:01:20.080
in our node_b server XML file.

31
00:01:20.080 --> 00:01:22.050
We'll do this by typing

32
00:01:22.050 --> 00:01:29.050
vi node_b/conf/server.xml.

33
00:01:29.050 --> 00:01:33.040
We'll do quick search for our 8090,

34
00:01:33.040 --> 00:01:35.030
go to insert mode,

35
00:01:35.030 --> 00:01:39.010
and we're going to change this to 9090,

36
00:01:39.010 --> 00:01:42.040
then we're going to go down and search for 8005,

37
00:01:42.040 --> 00:01:44.080
go back to insert mode,

38
00:01:44.080 --> 00:01:47.070
and change this to 8006.

39
00:01:47.070 --> 00:01:49.070
We'll write these changes.

40
00:01:49.070 --> 00:01:52.060
The reason we're doing this is as both clusters start up,

41
00:01:52.060 --> 00:01:55.000
we don't want port conflicts.

42
00:01:55.000 --> 00:01:59.080
The quick and easy way to set up a cluster,

43
00:01:59.080 --> 00:02:03.010
is what Tomcat provides in this commented out section.

44
00:02:03.010 --> 00:02:06.010
It' called a SimpleTCPCluster.

45
00:02:06.010 --> 00:02:08.060
According to the Tomcat documentation,

46
00:02:08.060 --> 00:02:12.040
this tag can either be in the engine section,

47
00:02:12.040 --> 00:02:14.010
or in the host section.

48
00:02:14.010 --> 00:02:16.040
As you can see it's commented out.

49
00:02:16.040 --> 00:02:18.070
In production environment though however,

50
00:02:18.070 --> 00:02:20.080
we really need to do a bit more.

51
00:02:20.080 --> 00:02:22.000
For the sake of time,

52
00:02:22.000 --> 00:02:23.010
and to make this easier,

53
00:02:23.010 --> 00:02:26.010
I've already provided a standard cluster configuration

54
00:02:26.010 --> 00:02:30.000
in our our practice files under

55
00:02:30.000 --> 00:02:33.040
01_08_configs,

56
00:02:33.040 --> 00:02:36.050
and this is called the

57
00:02:36.050 --> 00:02:39.020
cluster sample text.

58
00:02:39.020 --> 00:02:41.070
Going back to our server config,

59
00:02:41.070 --> 00:02:43.020
if we go down and look

60
00:02:43.020 --> 00:02:45.010
at the cluster configuration that I've already

61
00:02:45.010 --> 00:02:46.080
provided for you,

62
00:02:46.080 --> 00:02:48.040
you'll first notice that

63
00:02:48.040 --> 00:02:52.070
the cluster is set up to use multicast,

64
00:02:52.070 --> 00:02:54.040
there are other options that you could use here,

65
00:02:54.040 --> 00:02:56.070
like a static membership service,

66
00:02:56.070 --> 00:02:58.090
which give you the ability to statically assign

67
00:02:58.090 --> 00:03:00.020
by IP or port,

68
00:03:00.020 --> 00:03:02.030
additional Tomcat instances,

69
00:03:02.030 --> 00:03:05.040
however using multicast for both of these Tomcat clusters

70
00:03:05.040 --> 00:03:09.000
makes it very easy to stay on the cluster route.

71
00:03:09.000 --> 00:03:11.020
If you're interested in looking into these capabilities,

72
00:03:11.020 --> 00:03:14.050
head over to the Tomcate.apache.com website,

73
00:03:14.050 --> 00:03:17.050
the URL should be listed on the screen,

74
00:03:17.050 --> 00:03:19.060
and you can find the detailed information

75
00:03:19.060 --> 00:03:22.080
you would need concerning this type of configuration.

76
00:03:22.080 --> 00:03:24.010
The last thing you need to do

77
00:03:24.010 --> 00:03:27.030
is add the distributable tag to the web XML.

78
00:03:27.030 --> 00:03:30.000
Let's switch over to our IntelliJ instance,

79
00:03:30.000 --> 00:03:34.000
I've already loaded the 01_08_begin

80
00:03:34.000 --> 00:03:36.010
project in our practice files,

81
00:03:36.010 --> 00:03:39.000
and we're basically going to take the web XML

82
00:03:39.000 --> 00:03:42.000
and right above the closing web-app tag,

83
00:03:42.000 --> 00:03:43.050
we're going to type

84
00:03:43.050 --> 00:03:45.050
distributable,

85
00:03:45.050 --> 00:03:47.060
closing tag.

86
00:03:47.060 --> 00:03:50.020
Keep in mind that any data objects that you would like

87
00:03:50.020 --> 00:03:54.060
to have passed in the session to or from Tomcat instances

88
00:03:54.060 --> 00:03:55.090
in this cluster,

89
00:03:55.090 --> 00:03:59.000
you must make those classes serializable.

90
00:03:59.000 --> 00:04:00.060
This is very simple to do,

91
00:04:00.060 --> 00:04:02.050
by making the class implement

92
00:04:02.050 --> 00:04:05.080
java.io.Serializable interface.

93
00:04:05.080 --> 00:04:08.090
The reason for this is that class objects will be converted

94
00:04:08.090 --> 00:04:12.010
to byte code by the current Tomcat JVM

95
00:04:12.010 --> 00:04:15.010
and sent to another Tomcat instance on the cluster,

96
00:04:15.010 --> 00:04:17.080
to be reinterpreted by the JVM.

97
00:04:17.080 --> 00:04:20.000
Without the classes being serializable,

98
00:04:20.000 --> 00:04:22.000
expect errors in your logs.

