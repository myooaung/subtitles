WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] Here's a good deal of information

2
00:00:02.000 --> 00:00:04.080
that we have covered here with JBoss WildFly.

3
00:00:04.080 --> 00:00:06.090
The hope was that we could explore

4
00:00:06.090 --> 00:00:09.040
some of the high level details needed to install,

5
00:00:09.040 --> 00:00:12.010
start up, configure, and deploy applications,

6
00:00:12.010 --> 00:00:15.050
but honestly there is a good deal I had to skip over as well

7
00:00:15.050 --> 00:00:20.010
because JBoss WildFly could be a video series unto itself.

8
00:00:20.010 --> 00:00:21.090
Let's pause for a moment

9
00:00:21.090 --> 00:00:24.030
and consider some of the high level advantages

10
00:00:24.030 --> 00:00:26.050
to using WildFly.

11
00:00:26.050 --> 00:00:28.030
Starting with JDK 11,

12
00:00:28.030 --> 00:00:31.020
the modularization features have affected areas

13
00:00:31.020 --> 00:00:33.050
like class loading and reflection,

14
00:00:33.050 --> 00:00:37.040
which are hugely important to any Java application sever.

15
00:00:37.040 --> 00:00:41.050
WildFly has readily addressed this in the latest edition.

16
00:00:41.050 --> 00:00:45.050
WildFly also uses a new flexible performance web server

17
00:00:45.050 --> 00:00:47.020
called Undertow.

18
00:00:47.020 --> 00:00:52.020
Undertow uses NIO's non-blocking and buffer ability.

19
00:00:52.020 --> 00:00:54.060
The traditional IO API

20
00:00:54.060 --> 00:00:57.080
is streamed, and so you can't move backwards and forward,

21
00:00:57.080 --> 00:00:59.020
in the data stream.

22
00:00:59.020 --> 00:01:01.000
The traditional IO, as well,

23
00:01:01.000 --> 00:01:04.080
is also blocking when a read or an execute is invoked

24
00:01:04.080 --> 00:01:08.080
and so the thread can do nothing else until released.

25
00:01:08.080 --> 00:01:11.050
Because Undertow uses NIO

26
00:01:11.050 --> 00:01:14.050
and not IO, this means that WildFly

27
00:01:14.050 --> 00:01:18.040
can scale to over a million connections.

28
00:01:18.040 --> 00:01:22.040
Wildfly, according to their site, has taken a memory diet,

29
00:01:22.040 --> 00:01:24.020
grabbing up less cache

30
00:01:24.020 --> 00:01:27.000
so applications have more room to run.

31
00:01:27.000 --> 00:01:30.000
This is in part because of WildFly's use

32
00:01:30.000 --> 00:01:33.070
of a modular class loading which prevents duplicate classes

33
00:01:33.070 --> 00:01:37.060
and loading more than the system configuration requires.

34
00:01:37.060 --> 00:01:43.000
Additionally, the management console is 100% stateless.

35
00:01:43.000 --> 00:01:45.020
We looked at some of the other advantages

36
00:01:45.020 --> 00:01:48.000
of standalone and domain mode earlier.

37
00:01:48.000 --> 00:01:51.060
These modes enable the ability to quickly tune the server

38
00:01:51.060 --> 00:01:55.090
for running either a simple Java EE web profile

39
00:01:55.090 --> 00:01:58.030
or full certified app server.

40
00:01:58.030 --> 00:02:01.040
Not to mention the ease in creating domain

41
00:02:01.040 --> 00:02:04.080
or high availability cluster servers.

42
00:02:04.080 --> 00:02:07.070
Another interesting problem that WildFly is solving

43
00:02:07.070 --> 00:02:10.020
is the developer Jar Hell

44
00:02:10.020 --> 00:02:12.020
by using JBoss modules

45
00:02:12.020 --> 00:02:15.060
to provide true applications isolation.

46
00:02:15.060 --> 00:02:18.050
Hiding server implementation classes

47
00:02:18.050 --> 00:02:22.010
from the deployed application and only linking with jars

48
00:02:22.010 --> 00:02:24.060
that your application needs.

49
00:02:24.060 --> 00:02:25.090
This is huge.

50
00:02:25.090 --> 00:02:27.050
This also means WildFly

51
00:02:27.050 --> 00:02:31.050
is eliminating problematic hierarchical classloaders

52
00:02:31.050 --> 00:02:33.030
which in turn affects performance,

53
00:02:33.030 --> 00:02:36.010
making class loading work faster.

54
00:02:36.010 --> 00:02:38.010
And, of course, we mentioned this at the start,

55
00:02:38.010 --> 00:02:42.000
but WildFly is upstream of JBoss EAP development.

56
00:02:42.000 --> 00:02:44.020
This means that WildFly makes available

57
00:02:44.020 --> 00:02:48.030
some of the latest Java EE features that JBoss EAP,

58
00:02:48.030 --> 00:02:51.030
in version seven, still can't support.

59
00:02:51.030 --> 00:02:55.050
What kind of disadvantages, though, should I be aware of?

60
00:02:55.050 --> 00:02:58.060
WildFly 15 is the latest and greatest,

61
00:02:58.060 --> 00:03:00.020
and so, over the course of the year,

62
00:03:00.020 --> 00:03:02.050
issues will be found and addressed.

63
00:03:02.050 --> 00:03:05.040
This means that because you're using the latest release,

64
00:03:05.040 --> 00:03:09.030
you may run into issues that others have not yet solved.

65
00:03:09.030 --> 00:03:11.080
This brings me to the next issue.

66
00:03:11.080 --> 00:03:15.000
If you decide to use WildFly in production,

67
00:03:15.000 --> 00:03:19.000
keep in mind that Red Hat does not sell support for WildFly,

68
00:03:19.000 --> 00:03:20.020
according to Red Hat.

69
00:03:20.020 --> 00:03:23.040
If you need enterprise level support from Red Hat,

70
00:03:23.040 --> 00:03:24.060
you'll need the subscription

71
00:03:24.060 --> 00:03:28.010
to JBoss Enterprise Application Platform.

72
00:03:28.010 --> 00:03:30.050
That is, JBoss EAP.

73
00:03:30.050 --> 00:03:33.020
Now this does not mean you can't purchase support,

74
00:03:33.020 --> 00:03:36.000
because other companies sell service contracts

75
00:03:36.000 --> 00:03:40.000
to support WildFly, but just not Red Hat.

