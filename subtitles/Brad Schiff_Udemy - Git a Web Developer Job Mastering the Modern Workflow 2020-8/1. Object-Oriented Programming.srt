1
00:00:05,070 --> 00:00:06,630
Hello everyone.

2
00:00:06,630 --> 00:00:11,990
In this section of the course we will learn how to write highly organized javascript.

3
00:00:12,000 --> 00:00:18,210
We will kick things off in this lesson by familiarizing ourselves with something called Object Oriented

4
00:00:18,210 --> 00:00:19,420
Programming.

5
00:00:19,440 --> 00:00:24,480
So let's begin with a question what in the world is object oriented programming.

6
00:00:24,930 --> 00:00:27,620
Well I think the best way to answer that is for you and I.

7
00:00:27,630 --> 00:00:33,190
To jump into our text editors together and begin writing a bit of JavaScript together.

8
00:00:33,210 --> 00:00:33,530
OK.

9
00:00:33,560 --> 00:00:38,780
So I want you to jump into our main JavaScript file to refresh your memory.

10
00:00:38,790 --> 00:00:47,690
It lives in the app folder and then in assets and then in scripts and it's named app dot J Yes.

11
00:00:47,760 --> 00:00:53,700
So far we just have this bit of code in the file and I absolutely want you to keep these lines of code

12
00:00:54,060 --> 00:00:55,140
in just a moment from now.

13
00:00:55,140 --> 00:01:01,080
This lesson will appear as if I'm typing in an empty JavaScript file but I do not want you to delete

14
00:01:01,110 --> 00:01:02,670
these lines right.

15
00:01:02,670 --> 00:01:07,610
This line adds in our CSX and this line enables hot module replacement.

16
00:01:07,680 --> 00:01:14,550
So why don't we do this maybe at the very bottom of this file lets out a comment and say lesson example

17
00:01:14,550 --> 00:01:16,810
code below this line.

18
00:01:17,420 --> 00:01:17,750
OK.

19
00:01:17,760 --> 00:01:19,890
And then right here where my cursor is blinking.

20
00:01:19,890 --> 00:01:25,200
This is where you can follow along with the remainder of this video lesson and let's begin by simply

21
00:01:25,200 --> 00:01:33,270
logging a test message to the console so we can say console dot log quotes.

22
00:01:33,300 --> 00:01:35,900
This is a test.

23
00:01:36,030 --> 00:01:41,910
Now if we save this and jumped to the browser we can view our web browsers console by right clicking

24
00:01:41,940 --> 00:01:47,430
anywhere on the page and clicking inspect which will open up your developer tools.

25
00:01:47,430 --> 00:01:51,250
And from here you can simply click on console.

26
00:01:51,570 --> 00:01:54,360
And here we see this is a test.

27
00:01:54,450 --> 00:01:55,020
All right.

28
00:01:55,020 --> 00:02:00,010
And now let's jump back to our text editor and try something a bit more interesting.

29
00:02:00,090 --> 00:02:03,360
Let's log another message to the console that reads.

30
00:02:03,360 --> 00:02:10,380
Hello my name is John Doe and my favorite color is blue.

31
00:02:11,100 --> 00:02:17,400
And then let's actually copy and paste this entire line and in the second copy let's change the name

32
00:02:17,550 --> 00:02:23,430
to Jane Smith and let's change her favorite color to green.

33
00:02:23,460 --> 00:02:27,570
Now if we save this and then back in the browser no surprises here.

34
00:02:27,570 --> 00:02:29,730
This is exactly what we would expect.

35
00:02:29,850 --> 00:02:37,090
But as a developer as a programmer this code should drive you insane because it is very repetitive.

36
00:02:37,140 --> 00:02:43,550
The only unique aspects of each line are the named values and the color values.

37
00:02:43,710 --> 00:02:49,380
Everything else is part of a pattern that we can define once and then recycle.

38
00:02:49,380 --> 00:02:54,560
So let's delete all of this code and let's create a function that we can use.

39
00:02:54,560 --> 00:02:55,870
Time and time again.

40
00:02:55,890 --> 00:02:59,700
So let's give this new function a name of person.

41
00:02:59,970 --> 00:03:03,270
And what do we want this function to actually do.

42
00:03:03,270 --> 00:03:07,500
We want to log a message to the console that reads.

43
00:03:07,500 --> 00:03:19,420
Hello my name is blank and my favorite color is blank.

44
00:03:19,620 --> 00:03:25,320
And we want to include a closing period and we want to end this line with a semicolon.

45
00:03:25,320 --> 00:03:25,810
OK.

46
00:03:25,920 --> 00:03:30,300
Now we can simply call this function once for John and once for Jane.

47
00:03:30,330 --> 00:03:34,620
So down on a new line let's call the person function that we just created.

48
00:03:34,620 --> 00:03:42,240
Let's fill in this first blank value by passing an argument of John Doe and then we can fill in the

49
00:03:42,240 --> 00:03:49,680
next blank by including a comma and passing an argument of blue let's add a semicolon here and now let's

50
00:03:49,680 --> 00:03:52,380
call the person function again for Jane.

51
00:03:52,380 --> 00:03:55,870
So the first argument is her name Jane Smith.

52
00:03:56,130 --> 00:04:00,220
And the second argument will be her favorite color green.

53
00:04:00,240 --> 00:04:05,820
So if each time we are calling the person function we are passing it to arguments a name and a color

54
00:04:06,360 --> 00:04:12,780
we better make sure that up in our function definition we include two parameters to receive those incoming

55
00:04:12,780 --> 00:04:14,130
two arguments.

56
00:04:14,130 --> 00:04:20,170
Let's call the first one name and let's call the second one fave color.

57
00:04:20,190 --> 00:04:20,710
OK.

58
00:04:20,820 --> 00:04:27,270
Now within the actual body of our function we can access the argument values that are being passed in

59
00:04:27,750 --> 00:04:31,690
by replacing these blanks with the name of our parameters.

60
00:04:31,710 --> 00:04:34,380
There is no magical variable named blank.

61
00:04:34,440 --> 00:04:37,400
I only added that temporarily as a placeholder.

62
00:04:37,470 --> 00:04:44,820
So let's replace this first blank with our name parameter and let's replace the second blank with our

63
00:04:44,820 --> 00:04:47,070
fave color parameter.

64
00:04:47,100 --> 00:04:53,610
So if I save this and then back in the browser we see that nothing changes the exact same two sentences

65
00:04:53,610 --> 00:04:59,010
are being output but behind the scenes we know that our code is less repetitive.

66
00:04:59,010 --> 00:05:03,510
Let's go ahead and take things a step further and continue to improve our code.

67
00:05:03,510 --> 00:05:08,820
So within this hypothetical application we can imagine that maybe in the future we would need to reference

68
00:05:08,850 --> 00:05:15,360
John's name again or his favorite color again now because we didn't store these values anywhere if we

69
00:05:15,360 --> 00:05:21,330
wanted to reference these values outside of this function we would have to manually type out John Doe

70
00:05:21,330 --> 00:05:26,780
again and we would have to manually type out blue again and that would be repetitive.

71
00:05:26,790 --> 00:05:31,200
Now one way around that would be to create individual variables.

72
00:05:31,200 --> 00:05:42,290
So for example we could say let John name equal John Doe and then we could create another variable.

73
00:05:42,300 --> 00:05:51,960
So say let John fave color equal blue and then we can use these variables throughout our entire application.

74
00:05:51,960 --> 00:05:58,170
So for example when we call the person function for John instead of actually spelling out any values

75
00:05:58,440 --> 00:06:02,290
we can simply pass in those variable names as arguments.

76
00:06:02,460 --> 00:06:12,060
So we could say John name comma John fave color and if I save this and then back in the browser we see

77
00:06:12,060 --> 00:06:14,090
the exact same result.

78
00:06:14,100 --> 00:06:20,640
So our code is technically working we are storing data about John within these variables and then we

79
00:06:20,640 --> 00:06:25,110
are accessing that data later on but we can do better.

80
00:06:25,110 --> 00:06:31,170
This code just feels a bit sloppy or disorganized to me because you and I know that these two variables

81
00:06:31,260 --> 00:06:33,520
are intrinsically related to each other.

82
00:06:33,570 --> 00:06:39,570
They are both about John but currently we don't see that relationship reflected in our code.

83
00:06:39,600 --> 00:06:44,250
So the question becomes how do we add structure to our data.

84
00:06:44,250 --> 00:06:48,620
Well remember that this is a lesson on object oriented programming.

85
00:06:48,690 --> 00:06:53,870
So surprise surprise the thing that is going to save us here is an object.

86
00:06:54,060 --> 00:07:01,980
So let's delete these two individual variables and instead create an object for John so we can say let

87
00:07:02,100 --> 00:07:07,950
John equal and a pair of curly brackets will create an object.

88
00:07:07,980 --> 00:07:14,340
Now within this single object we can add anything and everything that has to do with John so we can

89
00:07:14,340 --> 00:07:23,850
give this John object a property of name and we can give it a value of John Doe and we can give this

90
00:07:23,910 --> 00:07:31,380
object another property named favorite color and give it a value of blue.

91
00:07:31,470 --> 00:07:39,120
So now all of our data about John lives within a single unified John object and accessing these object

92
00:07:39,120 --> 00:07:41,240
properties is a piece of cake.

93
00:07:41,250 --> 00:07:46,530
So for example down within this function call these variables no longer exist.

94
00:07:46,530 --> 00:07:51,210
So we want to replace these with references to the object properties.

95
00:07:51,270 --> 00:07:59,130
So if we want to access John's name we can reference this property by simply typing John dot and then

96
00:07:59,130 --> 00:08:00,620
the name of the property that we want.

97
00:08:00,630 --> 00:08:01,750
So name.

98
00:08:01,950 --> 00:08:02,290
All right.

99
00:08:02,310 --> 00:08:07,250
And we can access the favorite color property by simply typing the name of the object.

100
00:08:07,290 --> 00:08:11,310
John dot favorite color.

101
00:08:11,310 --> 00:08:17,190
So if I save this and then back in the browser once again we see the exact same result.

102
00:08:17,240 --> 00:08:21,840
Now at this point you might be wondering why there's a big fuss over objects.

103
00:08:21,860 --> 00:08:23,380
What's the big deal.

104
00:08:23,390 --> 00:08:29,130
I mean yeah it's nice that we added a bit of structure to our data but this doesn't feel earth shattering.

105
00:08:29,150 --> 00:08:33,530
You might be thinking that object oriented programming is a bit overhyped.

106
00:08:33,530 --> 00:08:39,860
But what if I told you that we can store more than just simple properties or variables like this within

107
00:08:39,860 --> 00:08:40,920
an object.

108
00:08:40,940 --> 00:08:47,000
What if I told you that we can also store functions within an object.

109
00:08:47,120 --> 00:08:50,030
So this is where things get a bit exciting.

110
00:08:50,030 --> 00:08:56,180
Let's go ahead and delete this function that we've been working on and let's also delete these two calls

111
00:08:56,180 --> 00:09:02,570
to that function and let's go ahead and add a function within this John object.

112
00:09:02,660 --> 00:09:05,380
So at the end of this line let's add a comma.

113
00:09:05,600 --> 00:09:12,890
Let's create a new piece of this object named greet and greet is not going to contain data like these

114
00:09:12,890 --> 00:09:13,770
two lines.

115
00:09:14,120 --> 00:09:22,520
Gary is going to contain behavior so Gary will be a function as a quick example let's make this function

116
00:09:22,520 --> 00:09:26,040
log out a bit of text to the console console log.

117
00:09:26,510 --> 00:09:28,790
Oh hello.

118
00:09:28,790 --> 00:09:31,580
Now if I save this we will not see that.

119
00:09:31,610 --> 00:09:34,280
Oh hello message in the console.

120
00:09:34,280 --> 00:09:39,680
And that's because we defined the function but we never called the function.

121
00:09:39,680 --> 00:09:46,460
Now just like we access these properties by typing John dot name or John dot favorite color we can call

122
00:09:46,460 --> 00:09:51,790
this function by simply typing John dot greet.

123
00:09:51,830 --> 00:09:57,110
So if we save this and check out the browser we see oh hello.

124
00:09:57,110 --> 00:10:05,940
This means that one variable or object can contain all of the data and behavior that it needs to operate.

125
00:10:06,050 --> 00:10:12,350
So object oriented programming is about getting into a mindset where you stop thinking in terms of individual

126
00:10:12,350 --> 00:10:20,890
loose variables and functions and you begin thinking in terms of cohesive self-sufficient objects and

127
00:10:20,890 --> 00:10:25,110
an object is just an entity that has data and behavior.

128
00:10:25,220 --> 00:10:30,720
Or another way of thinking about it is that it's an entity that has nouns and verbs.

129
00:10:30,770 --> 00:10:39,800
So in our example John is the object name is a noun favorite color as a noun GRI is a verb it's an action

130
00:10:39,830 --> 00:10:44,380
it's a behavior we use the function to make something happen.

131
00:10:44,420 --> 00:10:49,820
Now just a really quick vocabulary note in the programming world when we have a function that belongs

132
00:10:49,820 --> 00:10:56,540
to an object like this we no longer refer to it as a function but instead we call it a method and we

133
00:10:56,540 --> 00:11:00,350
could add as many different methods to this object as we wanted.

134
00:11:00,350 --> 00:11:03,980
So John as a person what sort of things can a person do.

135
00:11:03,980 --> 00:11:08,300
We could add a walk method or a run method or a jump method.

136
00:11:08,390 --> 00:11:09,620
You get the idea.

137
00:11:09,620 --> 00:11:15,540
So now that we have a general understanding of what an object is let's go ahead and complete the agreed

138
00:11:15,560 --> 00:11:26,990
method because we didn't just wanted to say Oh hello we wanted it to say hello my name is John Dot.

139
00:11:27,000 --> 00:11:42,330
Name and my favorite color is John dot favorite color and then add in a closing period and if we save

140
00:11:42,330 --> 00:11:48,300
this and then back in the browser we see our same old trusted sentence.

141
00:11:48,360 --> 00:11:49,050
That's great.

142
00:11:49,080 --> 00:11:52,950
But remember we didn't just have John whose favorite color is blue.

143
00:11:52,980 --> 00:11:56,820
We also had Jane Smith whose favorite color is green.

144
00:11:56,820 --> 00:12:00,120
So how do we want to create a new object for Jane.

145
00:12:00,120 --> 00:12:06,660
Well I mean we could just copy and paste this so copy paste and then within this new copy we could just

146
00:12:06,660 --> 00:12:10,950
change the variable name to Jane and fill in these values.

147
00:12:10,950 --> 00:12:20,520
So Jane Smith favorite color green you get the idea we could update all of this for Jane but let's not

148
00:12:20,520 --> 00:12:21,230
do that.

149
00:12:21,270 --> 00:12:26,910
It would be very repetitive because the Greek method for both John and Jane is identical and there's

150
00:12:26,910 --> 00:12:30,870
no good reason to spell out functionality like that more than once.

151
00:12:30,870 --> 00:12:32,040
So this was a bad idea.

152
00:12:32,070 --> 00:12:33,220
Let's delete it.

153
00:12:33,360 --> 00:12:39,240
Now there are several different ways to create an object the way that we created the John object gets

154
00:12:39,240 --> 00:12:45,540
the job done but it isn't the most efficient tool for the job when we want to create multiple objects

155
00:12:45,570 --> 00:12:47,740
that are very similar to each other.

156
00:12:47,790 --> 00:12:52,260
So let's actually delete everything that we have and try something new.

157
00:12:52,380 --> 00:13:00,260
Let's create a reusable blueprint or recipe that spells out what a person objects should be in JavaScript.

158
00:13:00,270 --> 00:13:07,410
We can create a reusable blueprint like that by leveraging something called a constructor function.

159
00:13:07,410 --> 00:13:14,260
So let's create a new function let's name it person and in the programming world.

160
00:13:14,280 --> 00:13:19,040
It's a common convention to begin our blueprint name with a capital letter.

161
00:13:19,080 --> 00:13:20,450
We don't have to do this.

162
00:13:20,490 --> 00:13:26,010
It's just a stylistic thing that will make our code easier to understand for other developers.

163
00:13:26,010 --> 00:13:29,500
Now you might be thinking that this looks like a regular function.

164
00:13:29,550 --> 00:13:32,600
What makes it a constructor function.

165
00:13:32,610 --> 00:13:36,780
Well it all depends on the way that we actually use the function.

166
00:13:36,810 --> 00:13:37,930
So check this out.

167
00:13:38,040 --> 00:13:44,490
We know that we are going to want to create an object named John but instead of opening up a pair of

168
00:13:44,490 --> 00:13:52,770
curly brackets and listing all of the properties and methods that we want we can simply say new person

169
00:13:53,100 --> 00:14:00,540
the word new in Javascript is an operator that will create a new instance of our person object type

170
00:14:00,960 --> 00:14:01,790
or in other words.

171
00:14:01,800 --> 00:14:06,510
This will create a new object using our person blueprint.

172
00:14:06,510 --> 00:14:12,510
This means that our John object will contain anything that we list within this constructor function.

173
00:14:12,510 --> 00:14:19,510
So let's say that all person objects should have a method named greet within this constructor function.

174
00:14:19,530 --> 00:14:26,330
We can simply say this dot Gary we will learn what the keyword this means in just a moment.

175
00:14:26,370 --> 00:14:34,350
But for now let's complete this method equals and then create a function as a quick example let's just

176
00:14:34,350 --> 00:14:40,020
log out a bit of text to the console that says Hello there.

177
00:14:40,020 --> 00:14:46,530
Now because we added this method to our blueprint or recipe this means that our John object now has

178
00:14:46,530 --> 00:14:48,190
a method named Gary.

179
00:14:48,210 --> 00:14:49,230
So let's test it out.

180
00:14:49,230 --> 00:14:50,830
Let's take it for a spin.

181
00:14:50,970 --> 00:14:53,950
Let's say John dot Gary.

182
00:14:54,510 --> 00:14:55,430
So if we save.

183
00:14:55,470 --> 00:14:57,450
And then back in the browser.

184
00:14:57,570 --> 00:14:58,310
Hello there.

185
00:14:59,640 --> 00:15:03,470
So we know that we are also going to want to create a Jain object.

186
00:15:03,600 --> 00:15:08,350
So let's say var Jain equals new person.

187
00:15:08,520 --> 00:15:13,300
And we can rest assured that Jain also has a method named Gary.

188
00:15:13,320 --> 00:15:19,120
So if I save this we see Hello there once from John and once from Jane.

189
00:15:19,200 --> 00:15:24,470
Now just a moment ago I promised that we would learn what the this keyword means.

190
00:15:24,580 --> 00:15:30,750
The this keyword is what allows our blueprint function to be flexible to be recyclable.

191
00:15:30,750 --> 00:15:37,860
The value of this changes depending on how when and where this function is called.

192
00:15:37,860 --> 00:15:44,130
So let's walk through an example when we create the John object and we call the constructor function

193
00:15:44,610 --> 00:15:46,560
in that particular instance.

194
00:15:46,660 --> 00:15:54,660
The this keyword refers to our John object but when we call this function again to create the Jain object

195
00:15:55,050 --> 00:16:01,340
in that instance when this function runs the keyword this has a value of the gene object.

196
00:16:01,350 --> 00:16:07,410
So I think you get the idea we can use the this keyword to refer to whichever object is currently being

197
00:16:07,410 --> 00:16:08,420
created.

198
00:16:08,430 --> 00:16:08,810
All right.

199
00:16:08,820 --> 00:16:12,670
Now let's get back to the task at hand because our work is not complete yet.

200
00:16:12,690 --> 00:16:19,380
Remember that we also wanted each person object to store the person's full name and their favorite color.

201
00:16:19,380 --> 00:16:25,050
So let's add a couple of properties to our blueprint in order to store that data so we can add a new

202
00:16:25,050 --> 00:16:25,930
line.

203
00:16:25,950 --> 00:16:27,930
Let's begin with their name.

204
00:16:27,960 --> 00:16:36,900
So this dot name equals and we can't just type John Doe because we want our blueprint to be recyclable.

205
00:16:36,930 --> 00:16:41,230
We want this to make sense for all objects not just the John object.

206
00:16:41,720 --> 00:16:47,080
So what we can do instead is include each person's full name as an argument.

207
00:16:47,210 --> 00:16:49,610
When we call our person constructor function.

208
00:16:49,940 --> 00:16:56,480
So down on this line for John we can include an argument with his full name John Doe and let's do the

209
00:16:56,480 --> 00:17:05,340
same thing for Jane Jane Smith and then within the signature for our constructor function we can add

210
00:17:05,340 --> 00:17:07,870
a parameter to receive that incoming name.

211
00:17:07,980 --> 00:17:10,350
We could name the parameter anything we'd like.

212
00:17:10,350 --> 00:17:12,990
Let's just go with full name.

213
00:17:12,990 --> 00:17:19,590
And then within this function on this line we can just say this dot name equals full name.

214
00:17:19,590 --> 00:17:19,970
All right.

215
00:17:19,980 --> 00:17:23,280
Now let's also store each person's favorite color.

216
00:17:23,280 --> 00:17:29,010
So down here when we call the constructor function once for each object let's include another argument

217
00:17:29,040 --> 00:17:30,120
with their favorite color.

218
00:17:30,180 --> 00:17:34,040
So John's is blue and Jane's favorite color is green.

219
00:17:34,050 --> 00:17:40,080
Let's add a second parameter to our person function to receive that income and color value.

220
00:17:40,110 --> 00:17:42,730
Let's call it fave color.

221
00:17:42,780 --> 00:17:43,130
All right.

222
00:17:43,140 --> 00:17:51,180
And then let's add a property for each object named favorite color and it should simply equal the color

223
00:17:51,210 --> 00:17:52,410
that is getting passed in.

224
00:17:52,440 --> 00:17:54,840
So fave color.

225
00:17:54,840 --> 00:17:55,220
All right.

226
00:17:55,230 --> 00:18:00,930
Now at this point anywhere within our application if we wanted to access John's name we could simply

227
00:18:00,930 --> 00:18:08,280
type John dot name or if we wanted to access Jane's favorite color we could simply type Jane dot favorite

228
00:18:08,280 --> 00:18:10,390
color but we don't need to do that.

229
00:18:10,440 --> 00:18:16,560
What we do need to do is update our grief method to use our old trusted text so we didn't just want

230
00:18:16,560 --> 00:18:18,300
this to say hello there.

231
00:18:18,300 --> 00:18:24,630
We wanted it to say hello my name is this dot.

232
00:18:24,630 --> 00:18:25,110
Name

233
00:18:27,760 --> 00:18:37,030
and my favorite color is this dot favorite color and then add a closing period.

234
00:18:37,120 --> 00:18:42,850
So if we save this and then back in the browser we see the two sentences that we were hoping to see

235
00:18:43,210 --> 00:18:47,340
only this time our code is object oriented.

236
00:18:47,440 --> 00:18:54,180
So now that we have these clean objects with these useful methods our code down here feels squeaky clean.

237
00:18:54,200 --> 00:18:57,710
It's very easy to read and immediately understand what's going on.

238
00:18:57,820 --> 00:19:02,240
And now that this code is complete we don't really need to look at it or think about it.

239
00:19:02,350 --> 00:19:08,560
Now really quickly I want to point out that in other programming languages like C++ or Java this thing

240
00:19:08,560 --> 00:19:14,590
that I've been referring to as a blueprint would actually be called a class but technically javascript

241
00:19:14,620 --> 00:19:21,250
doesn't have classes anyways long story short it would be nice if we could tuck this class code away

242
00:19:21,580 --> 00:19:25,410
into a separate file so that it's out of sight out of mind.

243
00:19:25,480 --> 00:19:29,290
And that way our main JavaScript file would be squeaky clean.

244
00:19:29,470 --> 00:19:33,700
And that is exactly what we are going to learn how to do in our next lesson.

245
00:19:33,730 --> 00:19:36,160
Let's keep things rolling and I will see you then.
