WEBVTT
1
00:00:02.340 --> 00:00:03.680
Hello everyone.

2
00:00:03.810 --> 00:00:08.590
In this lesson we are going to push our website up onto the Web.

3
00:00:08.610 --> 00:00:15.270
So by the end of this video you will have a U.R.L. that you can share with your friends family and colleagues.

4
00:00:15.270 --> 00:00:18.990
Before we push our files up there's a few changes I want to make first.

5
00:00:19.080 --> 00:00:26.790
So if you find your travel site folder or your project folder go into the app folder and we don't actually

6
00:00:26.790 --> 00:00:31.530
need the about on each temple or the contact HMO.

7
00:00:31.530 --> 00:00:38.790
We only needed these multiple HMO files as a test to make sure that our build process could handle multiple

8
00:00:38.790 --> 00:00:39.270
files.

9
00:00:39.270 --> 00:00:47.440
But we really only have the one home page so I'm going to delete these two files OK and then back up

10
00:00:47.440 --> 00:00:53.750
a folder we named our public folder dist dist is a very popular name.

11
00:00:53.770 --> 00:01:01.390
However since we are using the github pages service they require that the public folder be named docs

12
00:01:01.810 --> 00:01:08.770
D O C S most other services besides get up pages let you choose whatever you want to name this folder.

13
00:01:08.770 --> 00:01:12.100
But in this case we do need to play by GitHub rules.

14
00:01:12.100 --> 00:01:13.330
So do this with me right now.

15
00:01:13.330 --> 00:01:19.940
I want you to manually delete the entire dist folder ok.

16
00:01:19.960 --> 00:01:26.590
And then we need to go into our web pack config file and tell it to output to DOCS instead of dist.

17
00:01:26.590 --> 00:01:33.070
So in web packed config we just need to replace the word dist with docs in two locations.

18
00:01:33.070 --> 00:01:37.000
So first is in our run after compile class.

19
00:01:37.000 --> 00:01:42.060
So on this line of code we are copying our images from app to decide.

20
00:01:42.070 --> 00:01:50.030
So right here change Dawe to instead be docs D O C S OK.

21
00:01:50.050 --> 00:01:57.060
And then the one other change down towards the bottom within our if current task equals build.

22
00:01:57.070 --> 00:02:02.460
If we scroll down a bit we are looking for config dot output within output.

23
00:02:02.490 --> 00:02:03.640
Here we see path.

24
00:02:03.670 --> 00:02:05.490
And at the end here we see dist.

25
00:02:05.530 --> 00:02:08.660
So just change this to DoCS.

26
00:02:08.740 --> 00:02:09.100
OK.

27
00:02:09.100 --> 00:02:13.240
Now let's save this file and run a fresh build process.

28
00:02:13.300 --> 00:02:18.580
So in the command line just run NPM run build

29
00:02:21.900 --> 00:02:28.460
so if we check our folder cool we have app and instead of dist now we have docs again.

30
00:02:28.470 --> 00:02:34.620
Usually you can name this whatever you want it just so happens that the github pages service requires

31
00:02:34.620 --> 00:02:36.060
this name.

32
00:02:36.060 --> 00:02:36.570
Cool.

33
00:02:36.570 --> 00:02:40.800
At this point let's use GID to push up our changes first.

34
00:02:40.830 --> 00:02:43.080
Let's take care of our branches.

35
00:02:43.080 --> 00:02:45.780
We are currently on the build process branch.

36
00:02:45.900 --> 00:02:47.770
We've completed our work here.

37
00:02:47.940 --> 00:02:56.450
So let's add all of our changes to the staging area get add dash uppercase a OK.

38
00:02:56.450 --> 00:03:03.610
Then let's commit our changes get commit dash lowercase m to provide a message quotes.

39
00:03:03.890 --> 00:03:11.410
I will just say completed our build process configuration closing quote.

40
00:03:11.540 --> 00:03:17.660
Presenter OK now that we've committed those changes we can switch back over to the master branch because

41
00:03:17.660 --> 00:03:26.270
we want to merge build process in the master so get check out master OK.

42
00:03:26.290 --> 00:03:35.630
And then to merge the other branch in we just say yep merge the name of the branch build dash process.

43
00:03:36.430 --> 00:03:45.400
Cool so now our master branch is good to go let's go ahead and push this up to get hub so get push origin

44
00:03:45.730 --> 00:03:50.130
master as soon as your push completes.

45
00:03:50.130 --> 00:03:56.430
Now I want you to go to GitHub dot com in your web browser navigate to the overview screen for the current

46
00:03:56.430 --> 00:03:57.870
repo that you're working with.

47
00:03:57.870 --> 00:04:03.540
For me it's travel dash site but it could be something different for you but whichever repo you just

48
00:04:03.540 --> 00:04:04.640
pushed too.

49
00:04:04.680 --> 00:04:11.400
Now we just need to enable one setting and our Web site will be ready up on the web from this overview

50
00:04:11.400 --> 00:04:17.670
screen we need to click on settings from this main setting screen.

51
00:04:17.670 --> 00:04:25.720
We want to scroll down and in the main column we're looking for a feature named GitHub pages at the

52
00:04:25.720 --> 00:04:30.600
time of this recording it's about three quarters of the way down the page GitHub pages.

53
00:04:30.640 --> 00:04:35.160
Here we see a source option and a dropdown to select different options.

54
00:04:35.170 --> 00:04:43.240
You just want to click on this and change it to the option that says master branch slash docs folder.

55
00:04:43.240 --> 00:04:47.860
So the subtext says use only the docs folder forget hub pages.

56
00:04:47.860 --> 00:04:49.530
That's exactly what we want right.

57
00:04:49.630 --> 00:04:52.230
The docs folder is our public folder.

58
00:04:52.360 --> 00:04:52.630
Ok.

59
00:04:52.630 --> 00:04:57.490
Once I selected that you can see it sort of reloaded the page but if you scroll back down to where the

60
00:04:57.490 --> 00:05:03.220
github pages section is you will now find a link to your Web site.

61
00:05:03.730 --> 00:05:10.270
So it's typically going to be your user name and then get hub dot IO and then the name of your repo

62
00:05:10.930 --> 00:05:13.290
so obviously your link will be different than mine.

63
00:05:13.300 --> 00:05:18.940
But let's go ahead and open this up in a new tab awesome.

64
00:05:18.950 --> 00:05:22.340
This is our website live on the web.

65
00:05:22.340 --> 00:05:25.520
You can share this U.R.L. with your friends and family.

66
00:05:25.580 --> 00:05:31.970
Now if you don't see your Web site and you instead see a GitHub forum for error screen don't panic.

67
00:05:32.000 --> 00:05:37.220
Oftentimes GitHub can take 10 to 20 minutes for your Web site to show up.

68
00:05:37.220 --> 00:05:39.060
I just got lucky this time.

69
00:05:39.110 --> 00:05:46.040
If you are receiving the forum for error at the very end of your address you can try manually typing

70
00:05:46.160 --> 00:05:48.470
index dot HDMI.

71
00:05:48.740 --> 00:05:54.230
Sometimes that will allow you to view your site but you should not need to do this because then you're

72
00:05:54.300 --> 00:05:56.150
U.R.L. look sloppy.

73
00:05:56.150 --> 00:06:02.360
So the other trick to get your website working immediately is just to perform another commit pushing

74
00:06:02.360 --> 00:06:07.640
a new commit will trigger GitHub to redeploy your files and often oftentimes that will get rid of the

75
00:06:07.640 --> 00:06:12.230
initial 10 to 20 minute delay for your you or else to start working.

76
00:06:12.230 --> 00:06:13.780
I'll walk through that with you right now.

77
00:06:13.790 --> 00:06:17.350
So just for a minor change just to have something to push.

78
00:06:17.360 --> 00:06:20.180
Let's imagine we don't want the period after this.

79
00:06:20.210 --> 00:06:21.860
Your clarity.

80
00:06:21.860 --> 00:06:27.110
So within our HD PML file in the app folder towards the top.

81
00:06:27.110 --> 00:06:29.870
For me it's around line number forty seven.

82
00:06:29.960 --> 00:06:33.560
But I will remove that period after your clarity.

83
00:06:33.560 --> 00:06:37.170
Save that let's run NPM run build.

84
00:06:37.240 --> 00:06:44.510
So our public docs folder is updated so NPM run build OK.

85
00:06:44.520 --> 00:06:51.320
Then let's add all of our changes get add dash uppercase a get commit with a new message.

86
00:06:51.590 --> 00:06:57.040
Changed primary headline closing quote.

87
00:06:57.530 --> 00:06:59.360
And then we just push that back up to get up.

88
00:06:59.370 --> 00:07:06.050
So get push origin master OK.

89
00:07:06.090 --> 00:07:13.730
And then if I try to visit my U.R.L. again you can see it might take GitHub 10 to 30 seconds for that

90
00:07:13.730 --> 00:07:21.000
change to go through but if I refresh again could we see that period is gone.

91
00:07:21.100 --> 00:07:27.640
So hopefully after you pushed your second commit your GitHub pages U.R.L. begins to work and you can

92
00:07:27.640 --> 00:07:32.410
even go purchase a real dot com domain and use that for your Web site.

93
00:07:32.440 --> 00:07:38.920
You would just tell your domain company to point towards the github pages servers so GitHub pages is

94
00:07:38.920 --> 00:07:40.000
great.

95
00:07:40.000 --> 00:07:41.350
It's completely free.

96
00:07:41.350 --> 00:07:42.810
It's easy to use.

97
00:07:42.880 --> 00:07:45.920
They don't add any weird advertisements to our website.

98
00:07:45.940 --> 00:07:46.990
It's great.

99
00:07:47.020 --> 00:07:54.500
However in my opinion there is a service that is even 10 times better than GitHub pages and that service

100
00:07:54.500 --> 00:07:57.550
is named net lo fi.

101
00:07:57.550 --> 00:08:03.370
We will learn what makes net LA fi so great in our very next lesson but I don't want to completely steal

102
00:08:03.370 --> 00:08:09.460
the thunder of you having a U.R.L. that you can now share with your friends family and colleagues.

103
00:08:09.610 --> 00:08:11.680
So enjoy your GitHub pages link.

104
00:08:11.800 --> 00:08:14.440
You have pushed a website up onto the Web.

105
00:08:14.440 --> 00:08:15.920
Congratulations.

106
00:08:16.120 --> 00:08:22.390
But I must say that now that I'm aware that net LA fi exists I can't see myself ever using GitHub pages

107
00:08:22.390 --> 00:08:23.410
again.

108
00:08:23.470 --> 00:08:25.250
There's nothing wrong with GitHub pages.

109
00:08:25.540 --> 00:08:32.230
It's just that net Lafite has a few features that are incredible and they offer these features even

110
00:08:32.230 --> 00:08:34.320
on their completely free plans.

111
00:08:34.330 --> 00:08:36.400
You don't even need to enter a credit card.

112
00:08:36.590 --> 00:08:40.420
Now I am not affiliated with net LA fi in any way shape or form.

113
00:08:40.990 --> 00:08:45.450
It's just one of the coolest products and services that I've seen in a long time.

114
00:08:45.640 --> 00:08:49.600
Not to get you a bit excited to jump into the next lesson on net low fi.

115
00:08:49.660 --> 00:08:54.820
We are going to set things up so that our build process is completely automated.

116
00:08:54.820 --> 00:08:58.820
You won't even need a disk or docs folder on your personal computer.

117
00:08:59.050 --> 00:09:04.210
You can just work with the source code in your app folder and then anytime you push your changes up

118
00:09:04.600 --> 00:09:11.350
net lo fi will run our build process for us right and generate the public folder on its own.

119
00:09:11.540 --> 00:09:19.060
And once that's set up we are also going to learn about cloud functions or a W S lambda functions essentially

120
00:09:19.090 --> 00:09:23.970
even though we are just working with a static HDL front end based Web site.

121
00:09:24.490 --> 00:09:32.590
Well net lo fi makes it super easy to add cloud functions where you could perform server side tasks.

122
00:09:32.590 --> 00:09:34.000
Trust me this is amazing.

123
00:09:34.000 --> 00:09:39.160
I'm a huge fan of net lo fi and in our next lesson we are going to open up the door to all of these

124
00:09:39.160 --> 00:09:40.550
possibilities.

125
00:09:40.570 --> 00:09:44.920
Let's keep our momentum rolling and I will see you in the next lesson.
