1
00:00:02,150 --> 00:00:03,400
Hello everyone.

2
00:00:03,500 --> 00:00:10,100
In this lesson we are going to learn how to integrate react into our project or I should say into our

3
00:00:10,100 --> 00:00:12,380
web pack powered workflow.

4
00:00:12,380 --> 00:00:15,140
If you've never heard of react that's OK.

5
00:00:15,140 --> 00:00:18,550
It is an incredibly popular front end library.

6
00:00:18,680 --> 00:00:25,350
Now we're not going to actually learn react that is completely outside the scope of this course.

7
00:00:25,640 --> 00:00:30,020
React really deserves its own course dedicated to react.

8
00:00:30,020 --> 00:00:36,530
This lesson is just about integrating react into a typical workflow that already exists.

9
00:00:36,590 --> 00:00:42,020
If you read a few react tutorials you'll quickly find out that they almost all tell you to just use

10
00:00:42,020 --> 00:00:45,900
a package called Create react app.

11
00:00:46,010 --> 00:00:47,910
Now there's nothing wrong with this package.

12
00:00:47,930 --> 00:00:49,910
I think it's a phenomenal tool.

13
00:00:49,910 --> 00:00:54,360
However in the real world you're not always going to get to start from scratch.

14
00:00:54,470 --> 00:01:00,060
Oftentimes you'll want to integrate react into a workflow that you've already set up.

15
00:01:00,170 --> 00:01:04,250
So that's exactly what we're going to learn how to do in this video.

16
00:01:04,250 --> 00:01:09,110
Now even if you've never heard of react before this video and you have no idea what it's used for.

17
00:01:09,260 --> 00:01:12,260
I still want you to follow along with this lesson.

18
00:01:12,320 --> 00:01:17,150
So right now all you need to know is that React is incredibly popular.

19
00:01:17,210 --> 00:01:24,800
It's incredibly in demand and it can make our life a lot easier when it comes to writing front end javascript.

20
00:01:24,800 --> 00:01:30,870
If by the end of this video you're even 1 percent impressed or interested or intrigued by react.

21
00:01:30,950 --> 00:01:35,990
Then I encourage you to seek out other learning materials on react cool.

22
00:01:35,990 --> 00:01:38,660
Without further ado let's get started.

23
00:01:38,660 --> 00:01:44,660
So we're going to add react into our existing travel Web site and workflow to begin.

24
00:01:44,660 --> 00:01:50,990
Let's jump over to our command line and we want to install two packages to run this command with me

25
00:01:51,440 --> 00:02:04,940
npm install react space because we want a second package named react dash Dom react is the core of the

26
00:02:04,940 --> 00:02:06,770
library and react.

27
00:02:06,770 --> 00:02:10,930
Dom is specifically for the web browser environment.

28
00:02:11,060 --> 00:02:16,970
We don't need to include dash dash save Dev because these are direct dependencies that we want our visitors

29
00:02:16,970 --> 00:02:18,570
to actually download.

30
00:02:18,650 --> 00:02:22,500
Go ahead and press enter OK.

31
00:02:22,500 --> 00:02:25,020
Now let's go leverage those packages.

32
00:02:25,020 --> 00:02:32,190
So right now I want you to jump into your main JavaScript file that lives in app assets scripts and

33
00:02:32,190 --> 00:02:39,020
is named app got J.S. maybe below these first several lines where we import packages in we could even

34
00:02:39,020 --> 00:02:47,000
write a comment to ourselves and say react related code goes here.

35
00:02:47,800 --> 00:02:56,860
OK let's import the overall react library so import react from quotes the lowercase NPM package name.

36
00:02:57,030 --> 00:03:06,540
We also want to import react Dom's import react Dom from the NPM name of react dash Dom.

37
00:03:07,520 --> 00:03:07,950
OK.

38
00:03:07,950 --> 00:03:15,600
And now to actually output a react powered component onto our Web site we need to add an empty div somewhere

39
00:03:15,600 --> 00:03:17,370
within our each team e-mail.

40
00:03:17,600 --> 00:03:18,320
So do this with me.

41
00:03:18,330 --> 00:03:23,950
Let's open up indexed on HDMI all which lives in our app folder.

42
00:03:24,100 --> 00:03:29,950
You can add an empty div anywhere but in my case I'm going to scroll down to the very bottom and maybe

43
00:03:29,950 --> 00:03:33,120
right before the footer I will add a new div.

44
00:03:33,370 --> 00:03:36,460
So do this with me div closing div tag.

45
00:03:36,460 --> 00:03:38,080
We just want it to be empty.

46
00:03:38,260 --> 00:03:42,130
You can give this a really unique class name where we could even just give it an I.D..

47
00:03:42,220 --> 00:03:47,860
So I.D. equals let's say my react example.

48
00:03:48,940 --> 00:03:49,180
OK.

49
00:03:49,210 --> 00:03:51,150
Let's go ahead and save this file.

50
00:03:52,200 --> 00:03:52,510
OK.

51
00:03:52,510 --> 00:03:58,120
Now let's jump back into our main JavaScript file and right below these to react lines let's add another

52
00:03:58,120 --> 00:04:01,160
line and type this in with me.

53
00:04:01,510 --> 00:04:05,770
React Dom dot render.

54
00:04:06,010 --> 00:04:10,770
So we're using the render method of the react on package within these parentheses.

55
00:04:10,780 --> 00:04:16,260
We provide two arguments so we could say a comma B as place holders.

56
00:04:16,420 --> 00:04:21,640
The first argument is a component that you want to render to the page in react.

57
00:04:21,670 --> 00:04:25,100
Everything really boils down to the idea of components.

58
00:04:25,120 --> 00:04:28,970
For now you can just think of a component as a reusable feature.

59
00:04:28,990 --> 00:04:32,680
Again we're not actually learning react in this course.

60
00:04:32,680 --> 00:04:34,290
That's outside of our scope.

61
00:04:34,330 --> 00:04:40,720
I just want to show you how to integrate react into our project or our workflow or technology stack.

62
00:04:40,720 --> 00:04:40,960
OK.

63
00:04:40,990 --> 00:04:46,630
So this first argument should be a component we haven't created a component yet but we will in about

64
00:04:46,630 --> 00:04:48,000
30 seconds from now.

65
00:04:48,010 --> 00:04:58,310
So instead of a placeholder type this in with me less than symbol and let's say my amazing component

66
00:04:59,090 --> 00:05:02,690
space forward slash greater than symbol.

67
00:05:02,880 --> 00:05:03,340
OK.

68
00:05:03,380 --> 00:05:09,050
And then for the second argument instead of this b place holder this is the element on the page that

69
00:05:09,050 --> 00:05:10,610
you want to render to.

70
00:05:10,760 --> 00:05:17,170
In other words that empty div that we just added to our H T.M. L so instead of the B type this in with

71
00:05:17,170 --> 00:05:27,460
me document dot query selector inside these parentheses we say quotes to select an element based on

72
00:05:27,460 --> 00:05:36,000
its I.D. we just say hash tag and remember we gave it an I.D. of my dash react dash example.

73
00:05:36,880 --> 00:05:43,120
OK now you might notice that this almost looks like an H T.M. l tag that's sort of the whole idea.

74
00:05:43,150 --> 00:05:49,810
So instead of a heading level three tag or a paragraph tag we can create a component with its own custom

75
00:05:49,810 --> 00:05:53,160
name and custom features custom behavior.

76
00:05:53,320 --> 00:05:57,090
So let's do this right above this line right here.

77
00:05:57,130 --> 00:06:00,020
Let's create a function with this matching name.

78
00:06:00,190 --> 00:06:01,670
So let's say your function.

79
00:06:01,900 --> 00:06:08,040
My amazing component parentheses curly brackets.

80
00:06:08,140 --> 00:06:09,960
Obviously you could chose any name here.

81
00:06:10,010 --> 00:06:11,660
I just made this name up.

82
00:06:12,100 --> 00:06:12,390
Okay.

83
00:06:12,400 --> 00:06:18,040
Now within the body of this function let's say we want to return parentheses.

84
00:06:18,040 --> 00:06:23,950
Here's where things get interesting in between these two parentheses I want you to drop down and now

85
00:06:23,950 --> 00:06:29,980
even though we're not within quotes or back ticks we can actually start writing what would seemingly

86
00:06:29,980 --> 00:06:31,770
look like h tmr.

87
00:06:32,230 --> 00:06:38,870
So let's create an overall wrapper div and inside that div we could create a heading Level 1.

88
00:06:38,920 --> 00:06:48,700
This is my amazing react component below that but still within our overall div we could create a paragraph

89
00:06:49,570 --> 00:06:52,820
and say react is great.

90
00:06:52,930 --> 00:06:56,740
Sky is blue grass is green okay.

91
00:06:56,770 --> 00:07:00,700
Now this might look like each CML but it's not.

92
00:07:00,700 --> 00:07:03,430
It's something called J S x.

93
00:07:03,430 --> 00:07:09,280
Now again since we're not actually going to learn react in this course unfortunately we can't dive into

94
00:07:09,280 --> 00:07:11,770
the details of JSA X for now.

95
00:07:11,800 --> 00:07:18,880
All we really need to know is that the web browser would be tremendously confused by J as X and not

96
00:07:18,880 --> 00:07:24,250
only the web browser but our web packed workflow would probably throw an error message if our dev task

97
00:07:24,250 --> 00:07:26,750
was watching and we tried to save this file.

98
00:07:26,800 --> 00:07:34,210
However luckily for us we already have a tool at our disposal that can look at javascript analyze it

99
00:07:34,270 --> 00:07:37,060
and then convert it or trans pilot.

100
00:07:37,060 --> 00:07:43,240
Remember we used a tool named babble to look at our javascript and turn it into something that is backwards

101
00:07:43,240 --> 00:07:45,620
compatible with older browsers.

102
00:07:45,640 --> 00:07:52,300
Well even though web browsers would not be able to understand J.S. X we can just download a babble tool

103
00:07:52,570 --> 00:07:57,170
that is specifically designed for react and the J.S. X syntax.

104
00:07:57,280 --> 00:08:03,280
Then whenever web pack bundles up our code it will convert this into something that does make sense

105
00:08:03,550 --> 00:08:09,760
to JavaScript interpreters and web browsers in general so do this with me we can save this file but

106
00:08:09,760 --> 00:08:18,730
go into your command line and we need to install just one more package so let's run npm install in the

107
00:08:18,730 --> 00:08:29,440
name of the packages at Symbol babble forward slash preset dash react and this time we do want to include

108
00:08:29,440 --> 00:08:34,650
dash dash save Dev because the visitors of our site do not need to download this.

109
00:08:34,720 --> 00:08:36,450
This is just for our workflow.

110
00:08:36,460 --> 00:08:42,680
As the developer of the site let's go ahead and push enter okay into leverage that package.

111
00:08:42,770 --> 00:08:51,660
We just need to jump into our web pack dot config dot J.S. file now previously we set things up so that

112
00:08:51,960 --> 00:08:57,300
only our built task but not our dev task leveraged babble.

113
00:08:57,330 --> 00:09:02,550
This made sense because you and I are always going to have the latest version of our web browser so

114
00:09:02,550 --> 00:09:03,860
we didn't need to transpire.

115
00:09:03,860 --> 00:09:09,540
Our code locally but we did want to convert it to be backwards compatible before pushing it up onto

116
00:09:09,540 --> 00:09:10,540
the Web.

117
00:09:10,620 --> 00:09:17,120
However we want to apply the react babble tool to both our dev and build workflows.

118
00:09:17,520 --> 00:09:21,360
So let's go find the babble code that's down in our build task.

119
00:09:22,110 --> 00:09:24,290
So for me it's around line number sixty seven.

120
00:09:24,300 --> 00:09:32,490
We see if current task equals build right and then we said config dot module dot rules dot push.

121
00:09:32,490 --> 00:09:36,030
Here's what I want you to do inside that parentheses for push.

122
00:09:36,030 --> 00:09:43,070
I want you to begin selecting this curly bracket down to this closing curly bracket.

123
00:09:43,260 --> 00:09:43,640
Okay.

124
00:09:43,650 --> 00:09:46,720
And then go ahead and cut this into your clipboard.

125
00:09:46,800 --> 00:09:51,600
You'll know that you cut the right code if it now just looks like this an empty push call.

126
00:09:51,600 --> 00:09:53,870
So we can delete this line entirely.

127
00:09:55,770 --> 00:09:56,450
Okay.

128
00:09:56,630 --> 00:10:01,730
Now I want you to scroll back up to our common config object right.

129
00:10:01,730 --> 00:10:07,610
This is the shared config that is the same between both our dev and build tasks.

130
00:10:07,610 --> 00:10:12,950
Well all we need to do within the module and then rules within this array.

131
00:10:12,950 --> 00:10:21,910
Right after C Ss config you can just add a comma dropdown and then just paste in your clipboard.

132
00:10:22,010 --> 00:10:26,170
OK so we've added a rule that is only for JavaScript files.

133
00:10:26,290 --> 00:10:31,120
We're using the Babbage loader and we were already using this preset that will make our code a bit more

134
00:10:31,120 --> 00:10:32,420
backwards compatible.

135
00:10:32,830 --> 00:10:39,670
Well this is an array that can have multiple presets so let's just add the react preset to the beginning

136
00:10:39,670 --> 00:10:41,050
of this.

137
00:10:41,350 --> 00:10:49,630
So add a pair of quotes add a comma in between and in these quotes say at Symbol babble forward slash

138
00:10:49,930 --> 00:10:58,810
preset dash react cool let's go ahead and save this and again make sure your main app dot J.S. file

139
00:10:58,810 --> 00:11:06,200
has been saved and let's fire up our NPM run dev and VM run Dev

140
00:11:10,330 --> 00:11:10,690
OK.

141
00:11:10,730 --> 00:11:17,180
If we jump back over to the Web browser just to be safe go ahead and perform a manual refresh and then

142
00:11:17,180 --> 00:11:25,000
if we scroll down to where we added that empty div awesome you can see that our ReACT component rendered

143
00:11:25,000 --> 00:11:26,440
into that div.

144
00:11:26,500 --> 00:11:31,930
Now even though we're not going to actually learn react or J.S. X in this lesson I do want to show you

145
00:11:31,930 --> 00:11:32,940
a few tips.

146
00:11:32,980 --> 00:11:39,340
So back in our code within our function for my amazing component we need to remember that this might

147
00:11:39,340 --> 00:11:42,460
look like h TMF But it's not HDMI.

148
00:11:42,820 --> 00:11:49,210
So imagine I wanted to add a class to this heading to make it blue and large and centered so I could

149
00:11:49,210 --> 00:11:57,790
say class equals S. dash title S. dashed title dash dash blue.

150
00:11:57,820 --> 00:12:06,370
Well this code would make sense in HMO but this will break JSA X since JSA X is actually just JavaScript.

151
00:12:06,370 --> 00:12:11,440
We need to realize that the word class is reserved in javascript.

152
00:12:11,440 --> 00:12:19,420
So when we want to apply a C Ss class to one of our elements here we need to say class name and capitalized

153
00:12:19,420 --> 00:12:21,490
the N in name.

154
00:12:21,500 --> 00:12:25,900
Okay let's go ahead and save this then back in the browser.

155
00:12:25,900 --> 00:12:26,410
Cool.

156
00:12:26,410 --> 00:12:32,320
We don't need to refresh our web PAC just injects the newest version of our code can see it's blue and

157
00:12:32,320 --> 00:12:33,690
it's large.

158
00:12:33,770 --> 00:12:40,500
OK another quick JSF ex tip is that you can only have one route or top level element.

159
00:12:40,840 --> 00:12:42,220
It doesn't need to be a div.

160
00:12:42,220 --> 00:12:45,010
You could use something called a react fragment.

161
00:12:45,010 --> 00:12:49,840
But again we're not going to get into that because we're not actually learning react here.

162
00:12:49,840 --> 00:12:54,700
Essentially I just want to let you know that if you tried to have this top level div and then if I tried

163
00:12:54,700 --> 00:13:00,450
to add another element down here this would break everything.

164
00:13:00,450 --> 00:13:02,820
This is not valid JSA ex.

165
00:13:03,130 --> 00:13:06,340
You can only have one top level or root level element.

166
00:13:06,760 --> 00:13:12,310
OK before we bring this lesson to a close I want to show you how you could tuck this component code

167
00:13:12,640 --> 00:13:15,840
away into its own separate file right.

168
00:13:16,010 --> 00:13:19,970
So that way our main JavaScript file stays super clean.

169
00:13:19,970 --> 00:13:22,910
We import the files we need and that's it.

170
00:13:22,910 --> 00:13:26,660
So do this with me within our scripts modules folder.

171
00:13:26,780 --> 00:13:30,600
Let's create a new file let's name it.

172
00:13:30,600 --> 00:13:34,860
My amazing component Doc J.

173
00:13:34,880 --> 00:13:36,070
Yes.

174
00:13:36,850 --> 00:13:37,130
OK.

175
00:13:37,170 --> 00:13:43,260
Back in app Doc J ust just copy this entire function for my amazing component.

176
00:13:43,350 --> 00:13:49,500
Let's cut that into our clipboard back in our new empty file we can just paste it in and then down at

177
00:13:49,500 --> 00:13:57,240
the very bottom here say export default my amazing component right.

178
00:13:57,270 --> 00:14:03,450
So that if any file tries to import this file that's what we want the official export to be before we

179
00:14:03,450 --> 00:14:06,170
save this file though up at the very very top.

180
00:14:06,180 --> 00:14:14,940
We do need to import in the core react library so import react from react.

181
00:14:15,000 --> 00:14:21,040
Don't worry it's not like including react both here and in the main file is going to bloat the bundle.

182
00:14:21,140 --> 00:14:25,250
Westpac is super efficient and it just points towards the same instance.

183
00:14:25,280 --> 00:14:33,030
OK at this point we can save this file and then back in our main act J.S. Right below when we imported

184
00:14:33,030 --> 00:14:34,000
react and react.

185
00:14:34,010 --> 00:14:36,810
Dom we can just import our component file.

186
00:14:36,870 --> 00:14:38,790
We could even write a comment to ourselves.

187
00:14:38,790 --> 00:14:40,500
Stay organized.

188
00:14:40,620 --> 00:14:47,150
Import react components that we created.

189
00:14:47,400 --> 00:14:54,130
Then we can just say import my amazing components from.

190
00:14:54,200 --> 00:15:01,830
Give it a file path dot slash into the modules folder my amazing components.

191
00:15:02,730 --> 00:15:03,230
Okay.

192
00:15:03,240 --> 00:15:07,570
And then this line will be able to access that component or that function.

193
00:15:08,160 --> 00:15:13,080
Let's go ahead and also save this file and then to prove that things are working now that we've split

194
00:15:13,080 --> 00:15:18,270
it into its own file we could go into that file and just change any of the text so I'll change this

195
00:15:18,270 --> 00:15:22,530
paragraph to just say react is great with three exclamations.

196
00:15:22,590 --> 00:15:26,580
I save that back in the browser we see that change reflected.

197
00:15:27,250 --> 00:15:27,660
Okay.

198
00:15:27,670 --> 00:15:34,140
And then finally I do want to let you know that it's not as if react Dom dot render is the only thing

199
00:15:34,140 --> 00:15:39,000
that can list a component using this HDMI tag style.

200
00:15:39,000 --> 00:15:47,670
So for example in our component file within our J OSX here below this paragraph we could say my cool

201
00:15:47,670 --> 00:15:54,150
photo box and then we could create a functioning component with this matching name in a separate file

202
00:15:54,360 --> 00:15:56,640
just like we did with this component.

203
00:15:56,700 --> 00:15:59,670
Let me go ahead and delete this example.

204
00:15:59,670 --> 00:16:05,310
Now I realize we didn't do anything truly interesting or exciting with react in this lesson.

205
00:16:05,310 --> 00:16:07,060
That wasn't the point of this lesson.

206
00:16:07,080 --> 00:16:12,270
I'm not here to advertise or to quote sell you on react.

207
00:16:12,270 --> 00:16:18,000
However it's such a popular library that I felt like I'd be doing you a disservice if I didn't show

208
00:16:18,000 --> 00:16:23,880
you how to integrate it into our existing workflow if react has piqued your interest at all.

209
00:16:23,910 --> 00:16:29,060
I strongly strongly encourage you to continue learning about react.

210
00:16:29,310 --> 00:16:33,990
In particular I'd encourage you to research the reactive topics of props.

211
00:16:34,140 --> 00:16:40,290
Once the idea of props makes sense then I would encourage you to research hooks and specifically the

212
00:16:40,440 --> 00:16:42,690
use state hook.

213
00:16:42,690 --> 00:16:43,980
Anyways big picture.

214
00:16:43,980 --> 00:16:47,520
Do a bit of react research and if it excites you at all.

215
00:16:47,580 --> 00:16:55,710
Dive into it because I can't overstate how popular and in demand react is right now in the industry.

216
00:16:55,710 --> 00:17:02,640
Anyways that's going to bring this lesson and our coverage of react in this particular course to a close.

217
00:17:02,640 --> 00:17:08,040
Now in our next lesson we will pretend we are working with a team of other developers to keep this site

218
00:17:08,130 --> 00:17:09,120
updated.

219
00:17:09,150 --> 00:17:13,350
We will learn how to handle something called a get merge conflict.

220
00:17:13,350 --> 00:17:15,370
We'll learn why it's nothing to be afraid of.

221
00:17:15,390 --> 00:17:21,330
And more importantly we'll learn how to avoid as many conflicts as possible in the first place.

222
00:17:21,330 --> 00:17:26,340
We've come a long way in this course and we've almost reached the end where I will begin to share some

223
00:17:26,340 --> 00:17:28,230
big picture tips with you.

224
00:17:28,230 --> 00:17:32,070
Let's keep rolling along and I will see you in the next lesson.
