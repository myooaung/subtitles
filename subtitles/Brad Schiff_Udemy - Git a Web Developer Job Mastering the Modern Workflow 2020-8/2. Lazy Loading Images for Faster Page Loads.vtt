WEBVTT
1
00:00:04.920 --> 00:00:06.290
Hello everyone.

2
00:00:06.420 --> 00:00:12.480
In this lesson we will learn how to improve our sight speed and make it load faster by using a technique

3
00:00:12.510 --> 00:00:14.620
named lazy loading.

4
00:00:14.640 --> 00:00:19.020
Let's begin with the obvious question and ask what is lazy loading.

5
00:00:19.020 --> 00:00:22.650
To answer that let's hop into our web browser from here.

6
00:00:22.650 --> 00:00:25.860
I want to open up the browsers developer tools.

7
00:00:25.860 --> 00:00:32.540
The simplest way to do that is to right click anywhere on the page and click inspect that will open

8
00:00:32.540 --> 00:00:33.620
your developer tools.

9
00:00:33.620 --> 00:00:37.710
And from here I want you to click on the Network tab.

10
00:00:37.840 --> 00:00:42.190
All right with that open now I want you to refresh the page from your keyboard.

11
00:00:42.190 --> 00:00:48.160
If you're using Windows you can press control and are if you're using a Mac you can press command and

12
00:00:48.190 --> 00:00:50.340
are.

13
00:00:50.550 --> 00:00:51.030
All right.

14
00:00:51.030 --> 00:00:53.190
So what is this giant list.

15
00:00:53.190 --> 00:00:57.510
Well these are all of the you are URLs and files that our page has requested.

16
00:00:57.510 --> 00:01:02.490
Now the reason I'm showing this to you is because I want to point out that by default when we visit

17
00:01:02.490 --> 00:01:07.860
a site our Web browser will try to download everything on the page immediately.

18
00:01:07.860 --> 00:01:13.650
Now that may be the web browsers default behavior but as a developer we can customize it and make it

19
00:01:13.650 --> 00:01:14.460
better.

20
00:01:14.460 --> 00:01:19.440
So for example let's focus on the way that the browser downloads are image files.

21
00:01:19.440 --> 00:01:26.840
So if we click on this icon we can filter the list and lets say that we only want to see the image files.

22
00:01:26.840 --> 00:01:28.550
Now here's my question for you.

23
00:01:28.610 --> 00:01:33.680
Do we really need to download all of these image files as soon as the page loads.

24
00:01:33.710 --> 00:01:40.160
So for example here are the three testimonial images we know that the testimonials are at the very bottom

25
00:01:40.160 --> 00:01:41.270
of the page.

26
00:01:41.330 --> 00:01:45.100
So do we really need to download these files as soon as the page loads.

27
00:01:45.110 --> 00:01:49.000
Or could we wait until a user has scrolled down the page a bit.

28
00:01:49.010 --> 00:01:53.000
What if a visitor closes our page before they even scroll to the bottom.

29
00:01:53.120 --> 00:01:56.210
In that case we just forced them to download image files.

30
00:01:56.210 --> 00:01:57.620
They never even saw.

31
00:01:58.040 --> 00:02:00.680
That's a complete waste of their data plan.

32
00:02:00.680 --> 00:02:07.810
So the idea behind lazy loading is to only download assets as they become necessary in this lesson we

33
00:02:07.810 --> 00:02:14.090
are going to focus on lazy loading our images we only want to download images as they are getting ready

34
00:02:14.090 --> 00:02:16.360
to be scrolled into view.

35
00:02:16.370 --> 00:02:16.750
All right.

36
00:02:16.760 --> 00:02:19.350
So now we know what our goal is for this lesson.

37
00:02:19.370 --> 00:02:21.950
Let's roll up our sleeves and make it happen.

38
00:02:21.980 --> 00:02:27.220
Let's begin by jumping over to the command line and let's take care of our get branches.

39
00:02:27.220 --> 00:02:32.810
So in our previous lesson we completed the create modal functionality so let's merge this branch back

40
00:02:32.810 --> 00:02:34.010
into Master.

41
00:02:34.040 --> 00:02:36.770
Let's run it get status to see what has changed.

42
00:02:36.920 --> 00:02:38.510
All of these changes look good to me.

43
00:02:38.530 --> 00:02:41.480
Let's add them to our staging area.

44
00:02:41.480 --> 00:02:49.700
Let's commit that staging area and include a message completed the modal overlay.

45
00:02:49.700 --> 00:02:50.050
All right.

46
00:02:50.060 --> 00:02:53.760
Now that we've committed those changes we can jump back to our master branch.

47
00:02:53.780 --> 00:02:56.940
So get check out master.

48
00:02:57.080 --> 00:03:00.380
And now we just want to merge the create mobile branch into it.

49
00:03:00.710 --> 00:03:05.110
So get merge create modal.

50
00:03:05.120 --> 00:03:09.200
Now just in case our computer blows up tonight we don't want to lose our progress.

51
00:03:09.230 --> 00:03:19.100
So why don't we push our repo up to GitHub so we can say get push origin master All right.

52
00:03:19.110 --> 00:03:22.500
So now GitHub has our latest copy of the master branch.

53
00:03:22.500 --> 00:03:26.780
Now let's go ahead and create a new branch for this lazy loading feature.

54
00:03:26.790 --> 00:03:29.080
Why don't we try something a little different this time.

55
00:03:29.130 --> 00:03:32.340
Let's say get branch and then the name of the branch.

56
00:03:32.340 --> 00:03:33.510
We want to create.

57
00:03:33.630 --> 00:03:35.950
Let's just call it lazy loading.

58
00:03:36.540 --> 00:03:41.250
So that created the new branch but now we need to check out the new branch or switch to it so we can

59
00:03:41.250 --> 00:03:45.630
just say get check out lazy loading.

60
00:03:45.630 --> 00:03:46.020
All right.

61
00:03:46.020 --> 00:03:48.320
So now we are working within a new branch.

62
00:03:48.330 --> 00:03:49.610
Let's get to work.

63
00:03:49.620 --> 00:03:55.140
We can actually stay in the command line for now because the first thing we want to do is download a

64
00:03:55.140 --> 00:03:57.940
lazy loading library from NPM.

65
00:03:58.020 --> 00:04:09.300
So type in this command with me npm install in the name of the package is lazy sizes we do not need

66
00:04:09.300 --> 00:04:15.510
to include dash dash save Dev at the end because this is not a package that makes our workflow easier.

67
00:04:15.540 --> 00:04:19.500
This is a package that we actually want the visitors to download.

68
00:04:19.500 --> 00:04:23.720
In other words this is a direct dependency not a death dependency.

69
00:04:23.730 --> 00:04:25.050
Let's go ahead and press enter

70
00:04:28.600 --> 00:04:30.850
as soon as the package finishes downloading.

71
00:04:30.850 --> 00:04:33.750
Let's be sure to start our web pack task up again.

72
00:04:33.790 --> 00:04:39.310
So NPM run Dev OK.

73
00:04:39.320 --> 00:04:44.070
Now leveraging the lazy sizes packages could not be any simpler.

74
00:04:44.120 --> 00:04:52.700
We just need to go into our main JavaScript file so that's app assets scripts app dot J.S. and towards

75
00:04:52.700 --> 00:04:55.900
the very top maybe right after the line where we import our CSF.

76
00:04:55.910 --> 00:05:02.010
We can just say import and we don't need to name it we can just import the entire module.

77
00:05:02.020 --> 00:05:04.670
So just quotes and the name of the package.

78
00:05:04.850 --> 00:05:07.570
Lazy sizes and that's it.

79
00:05:07.580 --> 00:05:09.850
We don't need to create a new instance of it.

80
00:05:09.890 --> 00:05:11.750
The package will take care of everything.

81
00:05:12.140 --> 00:05:14.460
So let's go ahead and save this file.

82
00:05:14.630 --> 00:05:22.100
And now we just need to jump into our HDMI file to tell lazy sizes which images we want to be lazy loaded

83
00:05:22.220 --> 00:05:25.590
as opposed to just loading the standard or typical way.

84
00:05:25.610 --> 00:05:32.420
So do this with me jump into your index that HDMI file so towards the very top.

85
00:05:32.450 --> 00:05:34.630
We don't need the lazy load anything right.

86
00:05:34.630 --> 00:05:40.740
Because even if someone's on a very small screen they're going to be able to see this photo immediately.

87
00:05:40.820 --> 00:05:45.410
I think the first image we would want to lazy load would be this image.

88
00:05:45.410 --> 00:05:51.170
So in our HD CML Let's scroll down to about line number fifty five.

89
00:05:51.170 --> 00:05:53.220
That is the our beginning area.

90
00:05:53.330 --> 00:05:57.960
And for me it's around line number sixty one where we actually see that image.

91
00:05:58.040 --> 00:06:05.030
Now to tell the lazy sizes packages to do its job we just need to give this image an extra class currently

92
00:06:05.030 --> 00:06:06.490
this image doesn't have any classes.

93
00:06:06.500 --> 00:06:12.980
So let's give it an attribute class and let's give it a value of lazy load.

94
00:06:13.220 --> 00:06:20.420
So the lazy sizes packages will look for any image on the page that has this class lazy load on this

95
00:06:20.420 --> 00:06:21.720
same image element.

96
00:06:21.740 --> 00:06:26.390
We also need to find the source set attribute.

97
00:06:26.420 --> 00:06:32.270
Now by default when a Web browser sees the source set or the source attribute is going to try to download

98
00:06:32.270 --> 00:06:33.920
this immediately.

99
00:06:33.920 --> 00:06:43.010
However if we change this attribute to instead be data dash source said well web browsers are not programmed

100
00:06:43.010 --> 00:06:45.560
to immediately download this attribute.

101
00:06:45.560 --> 00:06:47.720
So that takes care of that image.

102
00:06:47.720 --> 00:06:50.990
Let's scroll down and find this image.

103
00:06:50.990 --> 00:06:55.040
So for me that begins around line number 66.

104
00:06:55.040 --> 00:06:58.400
So on this source element here is source set right.

105
00:06:58.430 --> 00:07:00.690
That's what's listing the actual J pigs.

106
00:07:00.710 --> 00:07:03.180
So just change that to be data Dash.

107
00:07:03.250 --> 00:07:09.080
Sources do the same thing for this day to dash around line number sixty nine we see the actual image

108
00:07:09.110 --> 00:07:09.950
element.

109
00:07:09.950 --> 00:07:13.310
So change that to data source set as well.

110
00:07:13.310 --> 00:07:19.020
And finally on the actual image element let's give it a class of lazy load.

111
00:07:19.940 --> 00:07:20.500
OK.

112
00:07:20.540 --> 00:07:26.120
Now you could apply lazy loading to our SPG images if you wanted to but they're so small.

113
00:07:26.120 --> 00:07:32.210
I'm not going to worry about it for now let's apply lazy loading to the three images down in the testimonials

114
00:07:32.210 --> 00:07:33.320
section.

115
00:07:33.320 --> 00:07:38.560
So around line number 123 we begin the testimonials area.

116
00:07:38.750 --> 00:07:41.190
So here is the first of three images.

117
00:07:41.300 --> 00:07:43.520
Let's change source that could be data Dash.

118
00:07:43.520 --> 00:07:50.020
Source set and give the image element a class of lazy loan.

119
00:07:50.970 --> 00:07:51.230
OK.

120
00:07:51.260 --> 00:07:54.410
Let's take care of the other two testimonial photos.

121
00:07:54.410 --> 00:08:00.870
So change this to data dash so asset class should be lazy load.

122
00:08:00.920 --> 00:08:09.710
Here's the third and final testimonial photo data dash class people's lazy load.

123
00:08:09.730 --> 00:08:17.020
Let's go ahead and save this and then back in your browser go ahead and scroll up to the very top and

124
00:08:17.020 --> 00:08:19.830
perform a manual refresh.

125
00:08:19.930 --> 00:08:26.020
Actually first make sure that your developer tools network tab is open so inspect and then open up the

126
00:08:26.020 --> 00:08:31.220
network tab and then perform another refresh right now OK.

127
00:08:31.290 --> 00:08:36.840
Now depending on the size of your browser window and depending on how zoomed in or zoomed out you are

128
00:08:37.140 --> 00:08:42.180
that's going to affect what lazy sizes thinks that it should download ahead of time.

129
00:08:42.210 --> 00:08:47.490
So at my current zoom level and the size of my browser report I believe it's going to download all of

130
00:08:47.490 --> 00:08:51.680
the images except for the three testimonials in the very bottom.

131
00:08:51.720 --> 00:08:55.330
The easiest way to test this is back in your network tab.

132
00:08:55.380 --> 00:09:02.260
You can click this clear icon it's a circle with a line through it that will clear the list of files

133
00:09:02.260 --> 00:09:09.610
that have been downloaded and then let me resize my windows so I can see my network tab even while I'm

134
00:09:09.610 --> 00:09:10.690
viewing the Web site.

135
00:09:11.500 --> 00:09:11.820
OK.

136
00:09:11.820 --> 00:09:16.600
So I will refresh again and clear the network history once again.

137
00:09:16.600 --> 00:09:18.070
And now as I scroll down

138
00:09:22.110 --> 00:09:23.490
you'll see right about here.

139
00:09:23.700 --> 00:09:27.470
Lazy sizes just loaded the first testimonial image.

140
00:09:27.600 --> 00:09:32.520
If I scroll down a tiny bit further it loads the second testimonial and finally if I scroll down a bit

141
00:09:32.520 --> 00:09:38.190
further it loads the final and third testimonial image.

142
00:09:38.320 --> 00:09:38.700
Cool.

143
00:09:38.740 --> 00:09:44.410
And that's all it takes to implement lazy loading for your images lazy sizes is a great package that's

144
00:09:44.410 --> 00:09:50.230
already thought of every detail I've read their documentation and they've even made sure that your search

145
00:09:50.230 --> 00:09:54.170
engine optimization score with Google will not be affected.

146
00:09:54.190 --> 00:09:57.250
Images are not actually hidden from the Google crawler.

147
00:09:57.430 --> 00:10:03.340
The lazy sizes JavaScript can detect if the current device that's access in your website can scroll

148
00:10:03.340 --> 00:10:04.020
or not.

149
00:10:04.180 --> 00:10:11.140
If the device cannot scroll it just actually lets the image load immediately so it's a great package.

150
00:10:11.140 --> 00:10:15.400
It has tremendous attention to detail and our job here is done.

151
00:10:15.430 --> 00:10:21.040
More importantly give yourself a pat on the back maybe throw a party because we just finished creating

152
00:10:21.130 --> 00:10:25.420
our travel Web site and that's a pretty big milestone now in our next lesson.

153
00:10:25.420 --> 00:10:27.770
We will get ready to go live.

154
00:10:27.820 --> 00:10:33.550
We will need to prep our site files before we go ahead and deploy them to get hubs free hosting so that

155
00:10:33.550 --> 00:10:35.420
the world can view our site.

156
00:10:35.440 --> 00:10:40.480
This is the one remaining step we have before we can share our site with the entire world.

157
00:10:40.480 --> 00:10:42.230
We are almost to the finish line.

158
00:10:42.250 --> 00:10:45.910
Let's keep rolling and I will see you in the next lesson.
