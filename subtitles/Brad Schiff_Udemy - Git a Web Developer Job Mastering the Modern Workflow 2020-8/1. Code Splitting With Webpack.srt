1
00:00:02,350 --> 00:00:03,540
Hello everyone.

2
00:00:03,640 --> 00:00:10,270
In this lesson we are going to learn about code splitting within web back before we worry about what

3
00:00:10,270 --> 00:00:12,040
code splitting is.

4
00:00:12,040 --> 00:00:18,460
We just need to remember that our overall goal is to have the visitors of our Web site download as little

5
00:00:18,460 --> 00:00:24,030
data as possible so that things load as quickly as possible for them.

6
00:00:24,040 --> 00:00:31,360
So with that in mind when someone first visits our Web site immediately they have no need for the javascript

7
00:00:31,360 --> 00:00:32,820
that powers the modal.

8
00:00:33,070 --> 00:00:34,530
Now in our specific case.

9
00:00:34,540 --> 00:00:42,370
Yes the modal javascript is only 58 lines of code so it's not like that's a ton of extra data for someone

10
00:00:42,370 --> 00:00:43,110
to download.

11
00:00:43,390 --> 00:00:45,070
But that's not the point.

12
00:00:45,070 --> 00:00:52,030
So in this lesson I want you to use your imagination and picture that our modal javascript was 200 or

13
00:00:52,030 --> 00:00:54,160
300 lines of code.

14
00:00:54,250 --> 00:01:00,850
So imagine you have this sizable bit of code that the user doesn't need to download right away.

15
00:01:01,030 --> 00:01:07,240
In that scenario there's no sense in including that code in the main javascript bundle that the user

16
00:01:07,240 --> 00:01:08,410
downloads right away.

17
00:01:08,890 --> 00:01:11,150
So here's what we're going to do in this lesson.

18
00:01:11,200 --> 00:01:16,910
I want you to jump into our main or overall app dot J.S. JavaScript file.

19
00:01:17,020 --> 00:01:18,970
So this is the main entry point.

20
00:01:18,970 --> 00:01:20,270
That web pack looks at.

21
00:01:20,290 --> 00:01:20,530
Right.

22
00:01:20,540 --> 00:01:26,050
And Web pack is bundling up everything that we are importing end up at the top.

23
00:01:26,050 --> 00:01:30,360
We are indeed importing our modal JavaScript file.

24
00:01:30,400 --> 00:01:36,490
Now again imagine that our modal was powered by three hundred lines of JavaScript and we wanted to prevent

25
00:01:36,490 --> 00:01:39,770
the user from having to download that right away.

26
00:01:39,820 --> 00:01:45,820
Well do this with me right now within our app dot J.S. I want you to delete this line completely.

27
00:01:45,820 --> 00:01:51,010
Where we are importing the modal class and then I also want you to delete the line where we are creating

28
00:01:51,010 --> 00:01:55,370
a new instance of the modal class OK.

29
00:01:55,380 --> 00:02:03,360
Now if I save this obviously back in the browser if I refresh the modal feature no longer works.

30
00:02:03,360 --> 00:02:11,450
So now let's set things up within this main app dot J.S. file so that when you click on one of the buttons.

31
00:02:11,610 --> 00:02:17,170
Well then on demand or on the fly we load in the modal JavaScript file.

32
00:02:17,340 --> 00:02:19,920
That way they only download it if they need it.

33
00:02:20,610 --> 00:02:28,320
So back in app dot J.S. maybe below all of these lines where we are creating new instances of classes

34
00:02:28,890 --> 00:02:34,420
right below that let's set up the code that loads in the modal code at just the right moment.

35
00:02:34,440 --> 00:02:37,470
So first we're going to need to handle the Click event.

36
00:02:37,590 --> 00:02:40,320
When you click on one of the buttons that should open the modal.

37
00:02:40,590 --> 00:02:45,300
So let's just say document got query selector all.

38
00:02:46,170 --> 00:02:49,360
Any element that has a class of open modal.

39
00:02:49,440 --> 00:02:53,250
Now this is going to return a collection or multiple elements.

40
00:02:53,250 --> 00:02:56,510
So then we want to call for each on that.

41
00:02:57,240 --> 00:03:00,330
And then let's give this an arrow function with exactly one parameter.

42
00:03:00,360 --> 00:03:06,230
Let's say E L for element arrow function for each one of those elements.

43
00:03:06,240 --> 00:03:10,240
Let's add an event listener.

44
00:03:10,240 --> 00:03:14,210
The type of event we're listening for is a click comma.

45
00:03:14,250 --> 00:03:17,880
And then let's also give that an arrow function with one parameter.

46
00:03:17,880 --> 00:03:20,470
Let's have the parameter be called E for event.

47
00:03:20,490 --> 00:03:25,380
So we can prevent the default behavior and then arrow symbol curly brackets.

48
00:03:25,740 --> 00:03:33,600
So first let's say e dot prevent default so that way when you click on one of the links it doesn't actually

49
00:03:33,600 --> 00:03:41,580
try to take you to a u r allocation of hash tag and then below this we can actually load in the modal

50
00:03:41,580 --> 00:03:49,380
file so we can use the import method inside these parentheses we give it a path to quotes dot forward

51
00:03:49,380 --> 00:03:52,920
slash modules slash modal.

52
00:03:52,920 --> 00:03:55,620
Now this is going to return a promise.

53
00:03:55,620 --> 00:04:01,350
Meaning we don't know how long this is going to take to complete but once it does finish loading that

54
00:04:01,350 --> 00:04:06,900
file then we want to actually use it to create a new instance of the class.

55
00:04:06,900 --> 00:04:12,900
So at the very end of this line since this is a promise we can say dot then and then after that we can

56
00:04:12,900 --> 00:04:15,990
say dot catch.

57
00:04:15,990 --> 00:04:18,720
Now if this is your first time ever working with a promise.

58
00:04:18,720 --> 00:04:25,200
Essentially we provide functions in both the then parentheses and the catch parentheses.

59
00:04:25,200 --> 00:04:29,010
The idea is that we don't know how long it's going to take to load this file.

60
00:04:29,010 --> 00:04:35,520
It could take 10 milliseconds or it could take a thousand milliseconds but when it is successfully retrieved

61
00:04:35,990 --> 00:04:41,370
right if things go as planned then whenever that happens the function we provide and then is going to

62
00:04:41,370 --> 00:04:47,370
get called or if there is a problem in the file never loads and for some reason there's an error then

63
00:04:47,370 --> 00:04:50,190
whatever function we provide and catch will be called.

64
00:04:50,730 --> 00:04:53,290
So let's actually start with the catch.

65
00:04:53,370 --> 00:04:59,880
For now we can just provide an arrow function and just log a message to the console that says there

66
00:04:59,880 --> 00:05:01,080
was a problem.

67
00:05:01,850 --> 00:05:02,370
OK.

68
00:05:02,400 --> 00:05:06,950
But if things go as planned the then function is going to run.

69
00:05:07,050 --> 00:05:13,020
So within the then parentheses let's give this an arrow function with exactly one parameter.

70
00:05:13,020 --> 00:05:15,710
Let's use a parameter name of x.

71
00:05:15,990 --> 00:05:22,060
So X and then a space and then the arrow function symbol and then let's add curly brackets and in-between

72
00:05:22,230 --> 00:05:28,580
them let's dropdown the X represents the file that we just imported or loaded.

73
00:05:28,830 --> 00:05:33,300
So we want to use this to create a new instance of the modal class.

74
00:05:33,300 --> 00:05:40,740
So on this line we can just say create a new instance of X and then due to the way web packed imports

75
00:05:40,740 --> 00:05:47,370
the file in this situation we do need to say X dot default parentheses.

76
00:05:47,370 --> 00:05:51,200
So this will create a new instance of our modal class.

77
00:05:51,210 --> 00:05:56,400
Now we don't just want that new instance sitting in outer space we want to save it to a variable so

78
00:05:56,400 --> 00:05:58,360
we can reference it later on.

79
00:05:58,980 --> 00:06:05,100
However we don't want to create a variable using the word left here because it would only be available

80
00:06:05,100 --> 00:06:07,680
within this current scope down here.

81
00:06:07,680 --> 00:06:13,760
So let's do this maybe right below these lines where we're creating new instances of classes.

82
00:06:13,770 --> 00:06:20,320
Let's write a brand new line and we can just say let lowercase modal and that's it.

83
00:06:20,520 --> 00:06:22,210
That's the entire line of code.

84
00:06:22,230 --> 00:06:27,060
This is just creating a variable with this name in the global scope.

85
00:06:27,600 --> 00:06:33,780
So now down here when we're saying create a new instance of X dot default at the start of this line

86
00:06:33,780 --> 00:06:42,200
we can just say lowercase modal equals and just for organization this line of code should be indented.

87
00:06:42,330 --> 00:06:42,780
Okay.

88
00:06:42,810 --> 00:06:48,630
I do want to point out though that it's not as if every single time you click an open modal button we

89
00:06:48,630 --> 00:06:51,300
would want to try to load or import the file.

90
00:06:51,420 --> 00:06:56,310
For example what if you opened the model once and then closed the modal and then click the button to

91
00:06:56,310 --> 00:06:57,730
open it again.

92
00:06:57,840 --> 00:06:59,400
Right that second time you click it.

93
00:06:59,400 --> 00:07:05,010
We don't need to load the file again the browser already would have that modal code in memory.

94
00:07:05,220 --> 00:07:07,110
So let's do this.

95
00:07:07,170 --> 00:07:09,950
I want you to select these three lines of code.

96
00:07:10,020 --> 00:07:16,620
So starting from import and then down until the end of the catch line like this let's cut this into

97
00:07:16,620 --> 00:07:17,430
our clipboard

98
00:07:20,000 --> 00:07:26,180
OK and let's write an if statement to determine if the modal file has already been downloaded or not.

99
00:07:26,370 --> 00:07:31,930
So we can say if parentheses curly brackets after the closing curly bracket.

100
00:07:31,950 --> 00:07:34,690
Let's also set up an else block.

101
00:07:35,000 --> 00:07:36,870
Else curly brackets.

102
00:07:36,870 --> 00:07:48,090
Now for the condition in these parentheses only if type of modal double equal sign to check for equality.

103
00:07:48,090 --> 00:07:50,940
Only if that equals undefined.

104
00:07:51,900 --> 00:07:55,890
So to review we are first creating a variable named modal.

105
00:07:55,890 --> 00:07:59,520
And at first its type is going to be undefined.

106
00:07:59,520 --> 00:08:05,730
Now if that's the case then within the curly brackets for this if statement this is where we can paste

107
00:08:05,730 --> 00:08:06,970
back in our clipboard.

108
00:08:07,200 --> 00:08:13,980
So go ahead and paste so on demand we are loading in that file that we need and we are updating the

109
00:08:13,980 --> 00:08:19,000
value of that modal variable right to be a new instance of our class.

110
00:08:19,020 --> 00:08:25,350
So then the next time you would click on open modal button this would evaluate to false.

111
00:08:25,380 --> 00:08:25,530
Right.

112
00:08:25,530 --> 00:08:29,290
Because now modal is an object not undefined.

113
00:08:29,400 --> 00:08:34,410
So within the else block this is where we would just open the modal.

114
00:08:34,410 --> 00:08:36,140
We don't need to load in the file again.

115
00:08:36,150 --> 00:08:43,470
We can just say lowercase modal dot and call its method named open the modal.

116
00:08:43,470 --> 00:08:46,410
Now we would also want to open the modal within our if block.

117
00:08:47,010 --> 00:08:52,740
So right below this line where we're creating a new instance of it only in this situation we would probably

118
00:08:52,740 --> 00:08:58,520
want to give the browser a few milliseconds to create the object before we try to do something.

119
00:08:58,560 --> 00:09:02,610
So I would actually set a time out set time out.

120
00:09:02,610 --> 00:09:07,680
This allows you to give it a function that you want to run but also then tell it how many milliseconds

121
00:09:07,680 --> 00:09:10,190
to wait before you do that.

122
00:09:10,200 --> 00:09:20,300
So first I would give it an arrow function where I call modal dot open the modal after that comma.

123
00:09:20,310 --> 00:09:23,570
I would just want to wait maybe 20 milliseconds.

124
00:09:23,570 --> 00:09:23,740
Right.

125
00:09:23,760 --> 00:09:30,270
Just to let the browser create that new object and inject the HDMI all into the Dom and just be ready

126
00:09:30,810 --> 00:09:33,360
at this point let's go ahead and save this file.

127
00:09:33,360 --> 00:09:39,660
But before we jump right into the browser let's be sure to jump into our modal file and update things

128
00:09:39,660 --> 00:09:45,360
a bit because now our main JavaScript file is handling the on click event.

129
00:09:45,360 --> 00:09:51,420
So up in our constructor we no longer need to select the open modal buttons we can get rid of this line

130
00:09:53,520 --> 00:09:57,020
and within our events method we also no longer need this.

131
00:09:57,150 --> 00:10:02,930
Listen for open click event so we can delete all of that.

132
00:10:03,000 --> 00:10:08,790
And finally I want you to go down and find our open the modal method and we no longer need to worry

133
00:10:08,790 --> 00:10:10,820
about preventing the default behavior.

134
00:10:10,860 --> 00:10:11,100
Right.

135
00:10:11,100 --> 00:10:13,610
That's being handled in our main JavaScript file.

136
00:10:14,010 --> 00:10:18,990
So within the parentheses for this method we don't need the E parameter and we definitely do not need

137
00:10:18,990 --> 00:10:22,090
this line where we say prevent default.

138
00:10:23,160 --> 00:10:29,160
Ok let's go ahead and save this and back in the browser go ahead and perform a refresh.

139
00:10:29,190 --> 00:10:32,670
So we're dealing with all new event handlers OK.

140
00:10:32,670 --> 00:10:39,180
And if I try to open the modal perfect but to illustrate what's really going on and why this is impressive

141
00:10:39,420 --> 00:10:42,870
we need to use our developer tools in our web browser.

142
00:10:42,900 --> 00:10:48,000
So I want you to do this go ahead and perform one more manual refresh.

143
00:10:48,030 --> 00:10:54,960
So at this current state the browser has not loaded the modal code and what I want you to do is right

144
00:10:54,960 --> 00:11:01,440
click anywhere and choose inspect right that will open your developer tools and then instead of clicking

145
00:11:01,440 --> 00:11:06,880
on elements or console we're actually interested in the network tab.

146
00:11:07,050 --> 00:11:11,490
If you don't see network you might just need to click on the arrows it might be hidden under the other

147
00:11:11,490 --> 00:11:11,960
options.

148
00:11:11,970 --> 00:11:15,680
But we are looking for the network tab and your developer tools.

149
00:11:16,560 --> 00:11:16,940
OK.

150
00:11:17,020 --> 00:11:21,480
Now if you refresh the page with this network tab open.

151
00:11:21,540 --> 00:11:24,000
So on P.C. that's control are on Mac.

152
00:11:24,000 --> 00:11:31,400
That's command are you will see a list of every asset that your browser downloaded.

153
00:11:31,440 --> 00:11:31,640
Right.

154
00:11:31,650 --> 00:11:35,630
So every CSX file every J Pag every JavaScript file.

155
00:11:35,670 --> 00:11:39,060
Now at this point I want you to click on this clear icon.

156
00:11:39,060 --> 00:11:42,860
It looks like a circle with an X through it.

157
00:11:42,880 --> 00:11:47,710
You didn't have to do that but it makes it easier to see if any new files are downloaded.

158
00:11:47,860 --> 00:11:53,530
Now at this point go ahead and click the button that will open your modal and now back in your developer

159
00:11:53,530 --> 00:11:55,450
tools Network tab.

160
00:11:55,450 --> 00:12:01,000
If you're like me you've resized this window to be quite small you might need to close the bottom console

161
00:12:01,030 --> 00:12:07,460
draw but notice the list of files that our browser has downloaded is updated.

162
00:12:07,620 --> 00:12:14,820
So as soon as we actually opened the modal in the browser it fetched a new JavaScript file named zero

163
00:12:14,820 --> 00:12:22,570
dash bundle the J S and it also obviously loaded the SPG icons that the modal displays.

164
00:12:22,570 --> 00:12:23,280
This is great.

165
00:12:23,290 --> 00:12:29,480
This proves that the browser is not downloading the extra modal code until we actually click on that.

166
00:12:29,530 --> 00:12:35,440
Now if he didn't want that separate JavaScript file to be named Zero dash bundled let me show you what

167
00:12:35,440 --> 00:12:38,130
you can do back in app dot.

168
00:12:38,130 --> 00:12:43,710
J.S. when we call import and give it a file path right at the start of this.

169
00:12:43,720 --> 00:12:48,340
So in the parentheses but before the quotes you can actually write a comment.

170
00:12:48,370 --> 00:12:57,300
So slash asterisk and then space asterisk slash to close out the comment inside the comment.

171
00:12:57,310 --> 00:13:06,400
We can say Web Park uppercase chunk uppercase name colon quotes and then you can give it whatever name

172
00:13:06,400 --> 00:13:09,120
you want let's call it modal OK.

173
00:13:09,130 --> 00:13:10,710
Let's save this file.

174
00:13:10,750 --> 00:13:16,770
But in order for this change to actually take place we need to restart our web pack task.

175
00:13:16,770 --> 00:13:21,120
So in the command line just press control C and then just fire it up again.

176
00:13:21,130 --> 00:13:23,200
So NPM run Dev

177
00:13:25,820 --> 00:13:26,180
OK.

178
00:13:26,190 --> 00:13:28,390
Now back in the web browser.

179
00:13:28,440 --> 00:13:31,830
Be sure to perform a manual refresh.

180
00:13:31,830 --> 00:13:34,680
And let's check our network tab.

181
00:13:34,710 --> 00:13:41,340
We do not see the modal file or any of its SPG icons in this list of files but if we clear that out

182
00:13:41,730 --> 00:13:51,210
using this icon and then open the modal back in our developer tools perfect we see that new file using

183
00:13:51,210 --> 00:13:56,100
our custom name mode old Dot bundle that dot J Yes.

184
00:13:56,130 --> 00:13:59,250
Now before we bring this lesson to a close I want to review.

185
00:13:59,250 --> 00:14:06,060
So yes in this particular instance our mobile file is not a very large file so we technically don't

186
00:14:06,060 --> 00:14:11,220
really need to do this but it's important that you have this tool in your tool box.

187
00:14:11,220 --> 00:14:16,820
If you have a large and complex javascript module that you don't need right away.

188
00:14:16,950 --> 00:14:23,430
The idea is that you can load it on the fly so that when the visitor first comes to your Web site everything

189
00:14:23,430 --> 00:14:25,350
loads very quickly.

190
00:14:25,350 --> 00:14:28,740
And one final additional note before we close out this video.

191
00:14:29,280 --> 00:14:36,630
If we jump back into app dot J.S. in our previous video I promised I would explain when we need to store

192
00:14:36,870 --> 00:14:40,580
a new instance of an object into a variable or not.

193
00:14:40,590 --> 00:14:47,700
Well as we learned in this lesson you do want to save a new instance of a class into a variable.

194
00:14:47,700 --> 00:14:54,240
If you're going to need to access it or call its methods later on right in this case any time the user

195
00:14:54,240 --> 00:15:01,260
clicks on one of those open buttons we are actually running the objects open the modal method.

196
00:15:01,260 --> 00:15:08,490
So in this case we absolutely wanted to save that new instance of a class into a variable but for everything

197
00:15:08,490 --> 00:15:14,700
else in our example application for example the sticky header that does not need to live in a variable

198
00:15:14,730 --> 00:15:20,510
so we can get rid of that first part of this line in the same thing is true of our mobile menu.

199
00:15:20,670 --> 00:15:23,160
We don't need to store that in a variable.

200
00:15:23,580 --> 00:15:27,940
So I can save this and nothing on our Web site is going to break.

201
00:15:28,050 --> 00:15:34,470
However you would want to get in the habit of storing these into variables if your different modules

202
00:15:34,470 --> 00:15:37,010
would need to interact with each other.

203
00:15:37,020 --> 00:15:42,300
Now for our travel Web site that's not the case but if in another project you are building something

204
00:15:42,300 --> 00:15:48,210
rather complex where different modules should trigger other events inside of other modules.

205
00:15:48,210 --> 00:15:54,210
Well I would encourage you to look up a package on NPM named event emitter.

206
00:15:54,240 --> 00:15:58,760
You can see just in the last week it was downloaded two point three million times.

207
00:15:58,800 --> 00:16:03,050
And the idea here is that inside one of your modules.

208
00:16:03,120 --> 00:16:03,320
Right.

209
00:16:03,320 --> 00:16:07,830
So for example inside our modal module if something happens right.

210
00:16:07,830 --> 00:16:15,780
If a certain event happens you can emit an event back to your main JavaScript file and then when your

211
00:16:15,780 --> 00:16:22,060
main JavaScript file detects that event it could call a method on another object.

212
00:16:22,140 --> 00:16:28,180
This way your individual modules don't need to import or even be aware of the other modules.

213
00:16:28,230 --> 00:16:28,500
Right.

214
00:16:28,500 --> 00:16:30,750
Each module self-contained.

215
00:16:30,750 --> 00:16:37,220
But your main JavaScript file is sort of the puppeteer you can broadcast certain events to it.

216
00:16:37,410 --> 00:16:43,440
And then if you've been storing your objects in variables as we saw here it's very easy to begin working

217
00:16:43,440 --> 00:16:46,260
with that and then call a certain method.

218
00:16:46,290 --> 00:16:49,280
Again we don't need that sort of complexity for our travel Web site.

219
00:16:49,280 --> 00:16:51,590
So going to delete that.

220
00:16:51,810 --> 00:16:54,870
But that's just a tip for your future projects anyways.

221
00:16:54,870 --> 00:17:00,960
That's going to bring this lesson to a close in our next lesson we are going to learn about lazy loading

222
00:17:01,050 --> 00:17:02,610
our images.

223
00:17:02,610 --> 00:17:07,880
We are getting very close to pushing our Web site up onto the Web to share with our friends and family.

224
00:17:07,890 --> 00:17:11,880
So let's keep things rolling and I will see you in the next lesson.
