1
00:00:02,270 --> 00:00:03,570
Hello everyone.

2
00:00:03,680 --> 00:00:11,090
In this lesson we're going to learn about web pack web pack is at the center of all of the automation

3
00:00:11,090 --> 00:00:13,750
that we're going to be setting up in the course.

4
00:00:13,750 --> 00:00:19,340
Let's begin by asking ourselves what exactly is web back.

5
00:00:19,340 --> 00:00:25,640
Well if we take a look at the official web pack Web site we see that it says bundle your assets bundle

6
00:00:25,640 --> 00:00:32,590
your scripts bundle your images and bundle your styles.

7
00:00:33,020 --> 00:00:36,210
So Web backed bundles things that means that it's a bundler.

8
00:00:36,290 --> 00:00:38,180
But what in the world does that mean.

9
00:00:38,180 --> 00:00:39,770
What's a bundler.

10
00:00:39,770 --> 00:00:42,630
Well to completely oversimplify things.

11
00:00:42,680 --> 00:00:50,490
Remember how we were able to use the NPM install command to pull in packages from the NPM grocery store.

12
00:00:50,540 --> 00:00:56,600
Well web PAC can help us bundle up those packages that our Web site depends on in a way that is easy

13
00:00:56,600 --> 00:00:59,930
for visitors of our Web site to download and consume.

14
00:00:59,930 --> 00:01:05,640
Now granted that's just one of about 5000 different things that web pack can do for us.

15
00:01:05,810 --> 00:01:07,590
But it is an important one.

16
00:01:07,610 --> 00:01:12,590
Now before we move on any further I want to let you know that if you're anything like me during the

17
00:01:12,590 --> 00:01:20,150
next few chapters web pack might seem overly complicated or like it's not worth the effort but trust

18
00:01:20,150 --> 00:01:25,970
me by the end of the course you'll be wondering how you ever lived as a web developer without web back

19
00:01:26,500 --> 00:01:28,160
and you don't need to take my word for it.

20
00:01:28,190 --> 00:01:36,920
So here on the NPM page for the web back package we can see that just in the last week web Park has

21
00:01:36,920 --> 00:01:41,430
been downloaded over eight point three million times.

22
00:01:41,510 --> 00:01:47,780
This lets you know that web pack is absolutely an industry standard and not just an obscure tool that

23
00:01:47,780 --> 00:01:49,420
I'm a big fan of.

24
00:01:49,430 --> 00:01:49,790
All right.

25
00:01:49,790 --> 00:01:54,170
Now at this point in order to understand what web pack actually does.

26
00:01:54,170 --> 00:01:55,890
Let's get our hands dirty.

27
00:01:56,060 --> 00:01:59,390
So first let's make sure that we have something worth bundling.

28
00:01:59,870 --> 00:02:06,170
So I want you to jump into your text editor and open up the travel site folder that we set up in a previous

29
00:02:06,170 --> 00:02:06,590
lesson.

30
00:02:07,250 --> 00:02:13,520
So in my case I have this folder on my desktop named sites and then I have the travel site folder.

31
00:02:13,520 --> 00:02:20,930
So go ahead and drag this onto your V.S. code or within V.S. code you can click file and then open or

32
00:02:20,960 --> 00:02:24,350
open folder and just choose that directory.

33
00:02:24,350 --> 00:02:28,940
So within the travel site folder we have a folder named app.

34
00:02:28,940 --> 00:02:34,620
And within this app folder let's create something that we would want web pack to bundle for us.

35
00:02:34,670 --> 00:02:38,240
Now web back can work with all sorts of different file types.

36
00:02:38,240 --> 00:02:46,430
But out of the box without any extra configuration web pack only understands JavaScript files.

37
00:02:46,430 --> 00:02:53,100
So right now let's create a new JavaScript file that we would want web pack to process for us.

38
00:02:53,180 --> 00:02:59,740
So to stay organized within our app folder let's jump into the assets folder.

39
00:02:59,750 --> 00:03:01,380
Currently we just have the images folder.

40
00:03:01,390 --> 00:03:02,410
Let's close that.

41
00:03:02,660 --> 00:03:08,300
And within the assets folder let's create a brand new folder just for JavaScript files.

42
00:03:08,390 --> 00:03:16,160
So right click on assets and choose New Folder we could name anything but just so you and I are on the

43
00:03:16,160 --> 00:03:17,330
same page.

44
00:03:17,360 --> 00:03:22,120
Let's name this new folder scripts OK.

45
00:03:22,160 --> 00:03:25,840
And let's create a new JavaScript file within this new scripts folder.

46
00:03:25,940 --> 00:03:29,690
So right click on scripts choose new file.

47
00:03:29,780 --> 00:03:39,140
Again we could name anything but let's name it uppercase a let's call it app dot J S OK.

48
00:03:39,140 --> 00:03:45,500
Now within this new empty javascript file let's write a bit of test or example code so just for a quick

49
00:03:45,500 --> 00:03:49,970
test maybe let's create an annoying alert pop up in the web browser.

50
00:03:49,970 --> 00:03:54,560
So to do that we can just say alert in parentheses in those parentheses.

51
00:03:54,560 --> 00:03:58,090
Let's say quotes and then hello.

52
00:03:58,370 --> 00:04:01,700
This is just a test.

53
00:04:01,700 --> 00:04:03,610
Let's go ahead and save this file.

54
00:04:03,650 --> 00:04:08,780
Now this code is so simple that we don't actually need web back.

55
00:04:08,780 --> 00:04:09,190
Right.

56
00:04:09,200 --> 00:04:15,530
We didn't split our code into multiple files to stay organized nor are we leveraging any packages from

57
00:04:15,560 --> 00:04:18,340
NPM but that's not the point.

58
00:04:18,410 --> 00:04:21,370
That complexity will come later in the course.

59
00:04:21,440 --> 00:04:28,430
For now we just want a javascript file no matter how simple or complex it is so that we can practice

60
00:04:28,640 --> 00:04:33,500
telling web pack to look at it process it and bundle it.

61
00:04:33,530 --> 00:04:38,080
So the question becomes how do we begin actually using Web pack.

62
00:04:38,100 --> 00:04:41,080
And the answer is we go to our command line.

63
00:04:41,240 --> 00:04:46,910
If you're using V.S. code you can open your command line by just clicking on the View menu and then

64
00:04:46,910 --> 00:04:51,070
selecting terminal or for a keyboard shortcut.

65
00:04:51,110 --> 00:04:53,780
And this works on both windows in Mac.

66
00:04:53,780 --> 00:04:59,690
You can just hold down the control key and then simultaneously press the tilde key which is the key

67
00:04:59,690 --> 00:05:03,490
to the left of the number one or right above the tab key.

68
00:05:03,670 --> 00:05:05,690
And that will toggle your command line.

69
00:05:06,560 --> 00:05:07,030
OK.

70
00:05:07,250 --> 00:05:10,970
Within your command line I want you to run the following command with me.

71
00:05:11,660 --> 00:05:21,290
So type this out npm install and we want to install two packages the first package is named Web pack

72
00:05:21,680 --> 00:05:29,690
as you might have guessed at a space in the second package we want to install is named Web pack Dash.

73
00:05:29,780 --> 00:05:35,420
S.L. I CLIA stands for command line interface.

74
00:05:35,510 --> 00:05:44,210
And finally at the end of the command enter a space and then dash dash save dash Dev after you've typed

75
00:05:44,210 --> 00:05:45,920
in this entire command.

76
00:05:45,920 --> 00:05:52,900
Go ahead and press enter now even if you're using a very fast computer and internet connection this

77
00:05:52,900 --> 00:05:55,990
installation could take upwards of 30 seconds or so.

78
00:05:55,990 --> 00:05:57,400
So be patient.

79
00:05:57,400 --> 00:06:02,190
But once it completes this means we now have web pack within our local project.

80
00:06:02,200 --> 00:06:07,110
So now the question becomes how do we actually use or leverage web pack.

81
00:06:07,120 --> 00:06:12,970
And the answer is that we want to create a configuration file within the route of our folder.

82
00:06:12,970 --> 00:06:19,270
So not even within our app folder just within the root of our travel site folder I want you to right

83
00:06:19,270 --> 00:06:22,190
click and choose new file.

84
00:06:22,240 --> 00:06:25,450
Now the name of this file absolutely matters.

85
00:06:25,450 --> 00:06:35,950
It needs to be lowercase web Park dot config dot J Yes go ahead and press enter.

86
00:06:35,950 --> 00:06:42,640
Now web PAC will know to look for a file with this exact name and within this new file we essentially

87
00:06:42,640 --> 00:06:45,070
tell Web PAC what we want it to do.

88
00:06:45,730 --> 00:06:49,590
And in order to do that we will begin by typing a pair of curly brackets.

89
00:06:49,840 --> 00:06:55,810
So we're creating a javascript object and we give it different properties to tell web packed what to

90
00:06:55,810 --> 00:07:00,610
do to create this character you just hold down the shift key and press the key to the right of your

91
00:07:00,610 --> 00:07:01,690
peaky.

92
00:07:02,030 --> 00:07:02,220
OK.

93
00:07:02,230 --> 00:07:07,540
Within these two curly brackets let's dropdown just to stay organized and to start out we only needed

94
00:07:07,540 --> 00:07:10,930
to find one property and its name is entry.

95
00:07:11,780 --> 00:07:16,100
So type in entry colon and then a pair of quotes.

96
00:07:16,180 --> 00:07:22,330
And now this is where we type a path that points towards our JavaScript file that we want to bundle.

97
00:07:22,330 --> 00:07:22,510
Right.

98
00:07:22,510 --> 00:07:26,080
So we want to point towards this file app dot J Yes.

99
00:07:26,170 --> 00:07:28,350
The file we created a few moments ago.

100
00:07:28,480 --> 00:07:33,140
So it lives within the app folder and then assets and then scripts.

101
00:07:33,550 --> 00:07:39,520
So for our file path here within these quotes let's say dot slash.

102
00:07:39,520 --> 00:07:45,090
To start with the current root directory and then go into the app folder Slash.

103
00:07:45,130 --> 00:07:48,160
And then go into the assets folder slash.

104
00:07:48,160 --> 00:07:55,500
And then go into the scripts folder slash and then look for the file that is named uppercase app dot

105
00:07:55,630 --> 00:07:57,300
yes right.

106
00:07:57,340 --> 00:08:02,440
So we're saying the entry point to our javascript application or we're saying the file that we want

107
00:08:02,440 --> 00:08:07,560
web pack to watch and process and bundle lives at this path.

108
00:08:07,870 --> 00:08:08,120
All right.

109
00:08:08,120 --> 00:08:12,040
Now for the time being this is the only property we need to setup.

110
00:08:12,040 --> 00:08:18,520
So now the question becomes how do we actually tell web pack to use this file as its instructions and

111
00:08:18,520 --> 00:08:22,720
actually run actually process and bundle our file.

112
00:08:22,720 --> 00:08:29,890
Well first up at the very top of this file on the very first line of code even right before the opening

113
00:08:29,890 --> 00:08:38,080
curly bracket I want you to type out module dot exports equals OK.

114
00:08:38,140 --> 00:08:40,450
And now we can go ahead and save this file.

115
00:08:40,450 --> 00:08:46,090
So this just sets things up so that when Web packet loads this file it knows that there's javascript

116
00:08:46,120 --> 00:08:50,130
object we just created is what should be exported and used.

117
00:08:50,170 --> 00:08:50,440
All right.

118
00:08:50,440 --> 00:08:56,410
Now we're on to the final step to get web pack to actually run what we need to do now is jump into our

119
00:08:56,410 --> 00:09:05,770
package dot Jason File within this package dot JS on file we have properties such as name version dependencies

120
00:09:05,800 --> 00:09:07,690
Deb dependencies.

121
00:09:07,690 --> 00:09:14,200
And right now we're looking for a section or property named scrips you will likely already have a property

122
00:09:14,200 --> 00:09:18,750
name scripts but if you don't have one you can just add one like this.

123
00:09:18,760 --> 00:09:24,670
So after maybe version or name right after the comma you can just drop down to a new line and say quotes

124
00:09:25,240 --> 00:09:33,960
Scripps colon and then curly brackets and then right after those curly brackets add a comma OK and then

125
00:09:33,960 --> 00:09:40,560
within those curly brackets we can create as many different NPM scripts as we want to essentially and

126
00:09:40,620 --> 00:09:46,480
NPM script is a command that we will be able to run from the command line.

127
00:09:46,500 --> 00:09:52,710
Now your package got Jason File probably already contained something like this a test script within

128
00:09:52,710 --> 00:09:55,160
the pre-existing scripts section.

129
00:09:55,320 --> 00:09:56,460
That's OK.

130
00:09:56,460 --> 00:10:01,600
What we can do maybe right above that line but still within these scripts objects are just like this.

131
00:10:01,740 --> 00:10:05,880
We can create a new script and we can give it any name we want.

132
00:10:05,880 --> 00:10:14,250
Let's name it dev so quote dev and then a colon and then quotes and all we need within the quotes is

133
00:10:14,250 --> 00:10:20,350
simply Web pack and then be sure to include a comma after those quotes.

134
00:10:20,490 --> 00:10:20,850
Cool.

135
00:10:20,850 --> 00:10:26,280
The reason we needed to do this is because we don't want to have to install web pack globally on our

136
00:10:26,280 --> 00:10:27,270
computer.

137
00:10:27,300 --> 00:10:33,240
So if we just went to the command line and tried to run Web PAC directly from the command line our computer

138
00:10:33,240 --> 00:10:34,840
would have no idea what we mean.

139
00:10:35,370 --> 00:10:42,570
However if we create an NPM script like this well it will have no trouble looking within our node modules

140
00:10:42,570 --> 00:10:45,870
folder and finding the web pack package.

141
00:10:45,870 --> 00:10:51,750
So check this out go ahead and save this current file that we're in and then open up your command line.

142
00:10:53,040 --> 00:10:59,850
Now check this out if we want to run this script that we just created named Dev we can just say in the

143
00:10:59,850 --> 00:11:05,270
command line NPM run and then the name of the script.

144
00:11:05,280 --> 00:11:11,180
So that's dev and then go ahead and press enter cool.

145
00:11:11,240 --> 00:11:18,670
So notice in your sidebar that just created a brand new folder named dist and within that folder there's

146
00:11:18,680 --> 00:11:20,860
a new file named Main dot J.

147
00:11:20,860 --> 00:11:21,850
Yes.

148
00:11:21,890 --> 00:11:28,370
So Web pack looked at our app dot J.S. file and it processed it and bundled it and created this new

149
00:11:28,370 --> 00:11:30,440
main J.S. file.

150
00:11:30,440 --> 00:11:31,060
This is great.

151
00:11:31,070 --> 00:11:37,280
But what if we don't want the new generated file to be named Main dot J S what if we want to control

152
00:11:37,280 --> 00:11:42,360
what it's named and also what if we don't want it to go into this disk folder.

153
00:11:42,440 --> 00:11:47,560
What if we just wanted the newly generated or bundled file to live within our app folder.

154
00:11:47,570 --> 00:11:49,510
Well let's set that up right now.

155
00:11:49,580 --> 00:11:57,230
So jump back into your web Park dot config dot J.S. file and right at the end of this entry line let's

156
00:11:57,230 --> 00:12:05,360
add a comma and then we can drop down after the comma to a new line and let's add a property named output

157
00:12:05,780 --> 00:12:13,280
so output colon and then curly brackets to create a javascript object in between then we can dropdown

158
00:12:13,850 --> 00:12:20,150
first lets out a property named file name so file name called in quotes and then this is where we can

159
00:12:20,150 --> 00:12:25,480
control what the bundled file should be named just so you and I are on the same page.

160
00:12:25,550 --> 00:12:28,240
Let's name it bundled Dot.

161
00:12:28,250 --> 00:12:29,590
J Yes.

162
00:12:29,830 --> 00:12:30,250
Okay.

163
00:12:30,260 --> 00:12:34,790
And then in order to control where the newly generated file is placed.

164
00:12:34,790 --> 00:12:40,400
So if we didn't want it to be in this disk folder we can just say comma at the end of this line and

165
00:12:40,400 --> 00:12:48,830
then say part colon and imagine we want the bundled copy to sit in the app folder directly.

166
00:12:48,860 --> 00:12:53,040
So sitting side by side our index start each PML file.

167
00:12:53,570 --> 00:13:03,350
So to do that we'd say path colon and then type this out with me path dot resolve parentheses underscore

168
00:13:03,440 --> 00:13:10,030
underscored dir name short for directory name comma and then quotes and then add.

169
00:13:10,880 --> 00:13:16,790
If you're wondering why this path looks like a different syntax from this path it's because web pact

170
00:13:16,790 --> 00:13:20,260
requires an absolute path for the output.

171
00:13:20,260 --> 00:13:27,600
Now in order for this code to work we do need to manually import or require in the know J.S. path package.

172
00:13:27,800 --> 00:13:33,850
So up at the very top of this file up at the start of Line 1 Let's press enter and create a new line

173
00:13:33,850 --> 00:13:43,190
up here and just say const path equals and then require parentheses within these parentheses.

174
00:13:43,190 --> 00:13:44,480
Let's just say quotes.

175
00:13:44,720 --> 00:13:46,360
Path.

176
00:13:46,400 --> 00:13:49,550
We do not need to npm install path.

177
00:13:49,550 --> 00:13:52,600
This is just part of the node library.

178
00:13:52,610 --> 00:13:58,130
This makes sure that no matter what operating system you're on Windows Mac or Linux it will be able

179
00:13:58,130 --> 00:14:02,030
to generate an absolute path to the correct folder.

180
00:14:02,240 --> 00:14:02,790
Okay.

181
00:14:02,810 --> 00:14:07,460
And finally while we're at it let's make sure we address this annoying warning message that we see in

182
00:14:07,460 --> 00:14:08,500
the command line.

183
00:14:09,050 --> 00:14:12,430
So it's just warning us that we didn't set the mode of web back.

184
00:14:12,530 --> 00:14:20,090
So to fix that maybe right after the output property so right after this inner closing curly bracket

185
00:14:20,090 --> 00:14:28,640
you can say comma and then let's add a property named mode call in quotes and let's set the mode to

186
00:14:28,640 --> 00:14:34,550
development right because we're just still developing things we're not ready to deliver these files

187
00:14:34,550 --> 00:14:38,030
to the public or up to a live web host yet.

188
00:14:38,030 --> 00:14:43,280
So go ahead and save this file if you need to pause the video to make sure that your web page config

189
00:14:43,280 --> 00:14:45,200
file looks like mine that's OK.

190
00:14:45,260 --> 00:14:51,770
Now before we test this out again let's be sure to delete the disk folder in the left hand sidebar.

191
00:14:52,130 --> 00:14:55,010
Right we didn't want the bundled file to be output there any longer.

192
00:14:55,070 --> 00:15:02,740
So I'm just going to right click on dist and choose Delete OK and then down in our command line let's

193
00:15:02,740 --> 00:15:05,170
tell Webb pack to run again.

194
00:15:05,170 --> 00:15:12,380
So we just run NPM run Dev go ahead and press enter cool.

195
00:15:12,390 --> 00:15:18,540
So notice now within the route of our app folder right alongside index the HMO we have the brand new

196
00:15:18,540 --> 00:15:22,110
generated bundled dot J.S. file.

197
00:15:22,350 --> 00:15:28,510
Let's actually jump into our HD PML file and load or import in the javascript file.

198
00:15:28,620 --> 00:15:36,060
So jump in the index dot HDMI L and scroll down to the very bottom of this file down at the very bottom

199
00:15:36,300 --> 00:15:40,470
right above this closing body tag type this in with me.

200
00:15:40,500 --> 00:15:43,020
So let's create a new line and let's say.

201
00:15:43,260 --> 00:15:47,990
Script tag your text editor should automatically create the closing script tag.

202
00:15:48,050 --> 00:15:55,830
Now on the opening script tag let's just point towards that new bundled file so S.R. C equals quotes

203
00:15:56,530 --> 00:16:02,930
in the name of the file is bundled dot J yes OK go ahead and save this file.

204
00:16:03,330 --> 00:16:08,150
And now let's go load or preview this HD AML file in our web browser.

205
00:16:08,250 --> 00:16:09,700
So here's my web browser.

206
00:16:09,750 --> 00:16:12,940
And then if I go find that HD PML file on my computer.

207
00:16:12,940 --> 00:16:20,970
So Sites Travel site app there is index dot HDMI I'll just go ahead and drag out on top of your web

208
00:16:20,970 --> 00:16:21,970
browser.

209
00:16:21,990 --> 00:16:22,380
Cool.

210
00:16:22,380 --> 00:16:26,710
We see that annoying alert pop up from our app that J.S. file.

211
00:16:27,080 --> 00:16:27,310
Right.

212
00:16:27,420 --> 00:16:27,960
Hello.

213
00:16:27,960 --> 00:16:29,700
This is just a test.

214
00:16:29,700 --> 00:16:35,890
Let's practice updating this pop up message and having Web pack generate the bundle again.

215
00:16:36,040 --> 00:16:43,890
So in our text editor jump into app dot J yes let's change this so that it ends with three exclamation

216
00:16:43,890 --> 00:16:45,210
marks instead of a period.

217
00:16:45,570 --> 00:16:47,160
So go ahead and save that.

218
00:16:47,820 --> 00:16:51,700
And now if you refresh in the browser you will not see that change.

219
00:16:51,720 --> 00:16:55,380
So we need to tell web pack to generate the bundle again.

220
00:16:55,440 --> 00:17:02,960
To do that we would just jump back into our command line and run NPM run Dev.

221
00:17:02,960 --> 00:17:05,270
So that will run Web pack once again.

222
00:17:05,280 --> 00:17:09,380
And now if we refresh in the browser we do see the latest message right.

223
00:17:09,390 --> 00:17:11,970
We see those three exclamation marks.

224
00:17:11,970 --> 00:17:14,640
Now you might be thinking that's really inconvenient.

225
00:17:14,640 --> 00:17:19,790
I don't want to have to jump to my command line every time I make a change to a file.

226
00:17:19,800 --> 00:17:21,830
Well luckily for us we don't need to.

227
00:17:21,910 --> 00:17:28,920
So check this out jump back into your web pack config dot J.S. file and maybe right underneath this

228
00:17:28,920 --> 00:17:36,660
mode line let's add a comma at the end of that line then dropdown and if we just say watch colon and

229
00:17:36,660 --> 00:17:40,710
set it to true and then save this file.

230
00:17:40,710 --> 00:17:41,490
Check this out.

231
00:17:41,760 --> 00:17:51,900
Now if we run our web pack task so in the command line if you run NPM run Dev well because we set the

232
00:17:51,900 --> 00:17:59,580
watch option to true Web pack will stay running and it will watch and detect any time we save a change

233
00:17:59,580 --> 00:18:02,920
to our source file or our entry file.

234
00:18:02,940 --> 00:18:08,490
So check this out if we go back into app that yes and maybe if I remove these exclamations entirely

235
00:18:08,490 --> 00:18:14,070
and then save the file that triggers a fresh rebuild or re bundle.

236
00:18:14,070 --> 00:18:19,770
So if we go back to the web browser refresh you see the updated text or if we go back and change this

237
00:18:19,770 --> 00:18:21,740
text entirely.

238
00:18:22,200 --> 00:18:27,510
The sky is blue and hit save web pack is actively watching us.

239
00:18:27,660 --> 00:18:33,720
So we don't need to run the command manually again and again if we go back and refresh we can see that

240
00:18:33,720 --> 00:18:40,470
Web pack has already bundled it for us now because we told web pack to watch our files for us it's going

241
00:18:40,470 --> 00:18:44,390
to continue to run in the command line until we tell it to stop.

242
00:18:44,400 --> 00:18:50,670
So when we are ready for the web pack task to stop watching us in your command line you just press the

243
00:18:50,700 --> 00:18:54,130
control key and then simultaneously press the C key.

244
00:18:54,150 --> 00:18:57,520
So control C and it stops now.

245
00:18:57,540 --> 00:19:04,470
I will be the first one to admit that this specific example is not impressive at all but that's only

246
00:19:04,470 --> 00:19:07,950
because our update J.S. file is so simple.

247
00:19:08,190 --> 00:19:08,380
Right.

248
00:19:08,370 --> 00:19:10,270
We just have the annoying alert.

249
00:19:10,440 --> 00:19:16,830
If we were actually doing something complex in this file then Westpac would be a lifesaver because now

250
00:19:16,890 --> 00:19:23,670
every time we save a change to this file we have an automated workflow tool that magically makes everything

251
00:19:23,670 --> 00:19:26,600
happen in a matter of milliseconds.

252
00:19:26,610 --> 00:19:33,420
In other words now that we have Westpac watching and processing and bundling this file for us we can

253
00:19:33,420 --> 00:19:40,830
start to build our project and Web site and gradually add complexity and new features as needed and

254
00:19:40,910 --> 00:19:45,210
Westpac will be along for the ride with us in our very next lesson.

255
00:19:45,210 --> 00:19:51,960
Things are going to get very real and concrete and useful because we're going to be implementing CSX

256
00:19:52,260 --> 00:19:54,130
into our web pack workflow.

257
00:19:54,160 --> 00:19:55,630
It should be a lot of fun.

258
00:19:55,650 --> 00:19:57,080
Let's keep things rolling.

259
00:19:57,150 --> 00:19:57,930
I'll see you then.
