1
00:00:02,550 --> 00:00:03,700
Hello everyone.

2
00:00:03,870 --> 00:00:07,730
In this video we're going to pick up right where we left off.

3
00:00:07,890 --> 00:00:14,040
So as of this moment we know how to visit the U.R.L. for our cloud function but just doing this isn't

4
00:00:14,040 --> 00:00:15,230
very useful.

5
00:00:15,240 --> 00:00:22,050
We need to learn how to send data along with our request to this you are out because a bit later in

6
00:00:22,050 --> 00:00:28,530
this lesson we're going to set things up so that when the user submits this form we programmed the web

7
00:00:28,530 --> 00:00:36,630
browser to send a request to this U.R.L. but also send along with it whatever value the user typed into

8
00:00:36,630 --> 00:00:37,950
this field.

9
00:00:37,950 --> 00:00:43,110
Now before we worry about learning how to program the web browser to send a request like that let's

10
00:00:43,170 --> 00:00:48,660
first learn how to make our cloud function work with any incoming data.

11
00:00:48,660 --> 00:00:54,180
Now when it comes to experimenting with sending requests to different you are ELLs and sending along

12
00:00:54,180 --> 00:00:56,280
different data with those requests.

13
00:00:56,280 --> 00:01:01,140
There is no better tool than postman if you've never heard of postman.

14
00:01:01,140 --> 00:01:01,790
That's OK.

15
00:01:01,800 --> 00:01:08,070
But if you don't already have postman installed on your computer please pause this video and you can

16
00:01:08,070 --> 00:01:15,570
either visit get postman dot com or just google for postman so we can download this tool completely

17
00:01:15,570 --> 00:01:16,230
free.

18
00:01:16,230 --> 00:01:20,190
We don't need to register or sign up or enter any payment information.

19
00:01:20,220 --> 00:01:22,590
It's a completely free download.

20
00:01:22,620 --> 00:01:26,650
Go ahead and pause this video while you download and install post man.

21
00:01:26,730 --> 00:01:31,870
But at this point I'm going to assume moving forward that everyone has postman on their computer.

22
00:01:32,520 --> 00:01:32,830
OK.

23
00:01:32,850 --> 00:01:36,700
So here is the postman application running on my computer.

24
00:01:36,810 --> 00:01:42,130
So we just want to click this button here to create a new tab for a new request.

25
00:01:42,270 --> 00:01:47,100
If you can't see this button it might be because your sidebar is open and if your screen is small the

26
00:01:47,100 --> 00:01:48,760
sidebar would cover that up.

27
00:01:48,900 --> 00:01:54,480
So you can click view and then toggle sidebar to hide the sidebar if your screen is small.

28
00:01:54,630 --> 00:01:59,710
But we just want to click this icon to create a new tab for a request.

29
00:01:59,750 --> 00:02:00,020
OK.

30
00:02:00,020 --> 00:02:06,930
So we're going to use postmen to simulate a web browser sending a request to a U.R.L..

31
00:02:06,980 --> 00:02:12,950
So first of all instead of a get request let's send a post request because we want to post or send a

32
00:02:12,950 --> 00:02:15,580
bit of data along with the request.

33
00:02:15,860 --> 00:02:16,730
So click on this.

34
00:02:16,730 --> 00:02:22,040
Change it from get to post and then in terms of the actual U.R.L..

35
00:02:22,190 --> 00:02:25,760
This is where you can just copy and paste your cloud function you are now.

36
00:02:26,180 --> 00:02:31,180
So this you are all that at the moment is just saying Welcome to the supersecret area.

37
00:02:31,400 --> 00:02:36,840
Copy the actual you are L into your clipboard and back and postman paste that in here.

38
00:02:37,570 --> 00:02:37,820
OK.

39
00:02:37,850 --> 00:02:42,050
But we also want to send along a bit of data with the request.

40
00:02:42,050 --> 00:02:47,030
So in this area click on body from this selection.

41
00:02:47,060 --> 00:02:52,220
We want to choose raw and then we can begin typing in this area.

42
00:02:52,300 --> 00:02:55,110
So let's just send a bit of Jason data.

43
00:02:55,120 --> 00:02:58,540
So curly brackets inside the curly brackets.

44
00:02:58,540 --> 00:03:01,960
In Jason you want to wrap your property names in quotes.

45
00:03:01,960 --> 00:03:09,520
So for example we could have a property named Sky color and give it a value of blue comma and then we

46
00:03:09,520 --> 00:03:15,220
could have a property named grass color and give it a value of green.

47
00:03:16,030 --> 00:03:21,000
So this Jason format is a very common way to send data along with your request.

48
00:03:21,190 --> 00:03:25,060
But in this case we don't actually want sky color and grass color.

49
00:03:25,060 --> 00:03:31,060
We would want a property name that makes sense for this value whatever the user typed in as the secret

50
00:03:31,060 --> 00:03:33,190
password or passphrase.

51
00:03:33,220 --> 00:03:34,900
So in postman why don't we do this.

52
00:03:34,900 --> 00:03:39,090
Let's get rid of these two example properties inside our curly brackets.

53
00:03:39,100 --> 00:03:46,420
Let's just have one property quotes and let's name it password quotes colon.

54
00:03:46,420 --> 00:03:51,560
And for a test let's just give it a value of 1 2 3.

55
00:03:51,710 --> 00:03:53,460
ABC doesn't matter.

56
00:03:53,460 --> 00:03:56,350
You can type anything here within these quotes.

57
00:03:56,350 --> 00:03:56,700
OK.

58
00:03:56,710 --> 00:04:04,670
And now let's actually send this request to just click this send button and then down at the very bottom

59
00:04:04,670 --> 00:04:05,440
of post man.

60
00:04:05,450 --> 00:04:09,500
If your screen is small you might need to scroll down the overall screen.

61
00:04:09,500 --> 00:04:12,850
But here we see the response from the server.

62
00:04:13,220 --> 00:04:19,220
Now at the moment our cloud function is programmed to always send this as the response.

63
00:04:19,220 --> 00:04:25,250
So right now let's jump into our text editor and let's learn how to send a different response depending

64
00:04:25,250 --> 00:04:29,210
on what password value the user sends along.

65
00:04:29,330 --> 00:04:29,600
Right.

66
00:04:29,600 --> 00:04:36,440
So let's imagine that the correct password should be a value of JavaScript.

67
00:04:36,680 --> 00:04:40,680
Any other string of text is considered the incorrect password.

68
00:04:40,790 --> 00:04:48,590
So I'll let you know that the event parameter contains information about the incoming request so we

69
00:04:48,590 --> 00:04:53,040
can use this parameter to extract the data that the user sent along.

70
00:04:53,150 --> 00:04:57,530
So right above this line where we call callback but still within the function.

71
00:04:57,530 --> 00:04:59,300
Let's do this.

72
00:04:59,300 --> 00:05:02,790
Let's create a variable let's name it body.

73
00:05:02,960 --> 00:05:05,360
And for now we don't need to set it to equal anything.

74
00:05:05,360 --> 00:05:08,880
We're just declaring this name in this scope.

75
00:05:08,940 --> 00:05:09,140
OK.

76
00:05:09,350 --> 00:05:12,080
And then below this let's write an if statement.

77
00:05:12,170 --> 00:05:20,460
So if parentheses curly brackets after those brackets let's also add in else block before we worry about

78
00:05:20,460 --> 00:05:22,020
the password value.

79
00:05:22,020 --> 00:05:27,690
Let's first make sure that the incoming request has any body data whatsoever.

80
00:05:27,690 --> 00:05:33,910
So for the condition I would say if event dot body if that even exists.

81
00:05:34,110 --> 00:05:38,430
Well then I would want to pass that data as Jason data.

82
00:05:38,430 --> 00:05:45,950
In other words event dot body is going to be the literal text characters that the visitor sent along.

83
00:05:45,990 --> 00:05:51,300
So the actual Curly rackets and the quotations and the semicolon we don't want that.

84
00:05:51,300 --> 00:05:57,750
We want to understand it as if it's actual javascript not just a literal string of text.

85
00:05:57,750 --> 00:06:05,670
So what we can do is say a body should now equal and then javascript environments have access to all

86
00:06:05,700 --> 00:06:13,890
uppercase Jason dot because that has a method named pass within these parentheses we give it a string

87
00:06:13,890 --> 00:06:19,230
of text and it's going to pass it or convert it into actual javascript.

88
00:06:19,230 --> 00:06:19,480
Right.

89
00:06:19,500 --> 00:06:25,630
A javascript object so we can just say event dot body else.

90
00:06:25,650 --> 00:06:33,540
Otherwise if there is no incoming body data on the request let's just set body to equal an empty object.

91
00:06:34,040 --> 00:06:34,550
OK.

92
00:06:34,650 --> 00:06:39,910
Now below all of this we can actually now pay attention to the password value.

93
00:06:39,990 --> 00:06:40,710
So do this with me.

94
00:06:40,710 --> 00:06:44,300
Let's have one more if statement after that.

95
00:06:44,310 --> 00:06:55,000
Let's also have an else block and within the condition let's say only if body dot password double equals

96
00:06:55,000 --> 00:06:56,920
sign to check for equality.

97
00:06:56,920 --> 00:07:00,700
Only if that equals javascript.

98
00:07:00,700 --> 00:07:07,310
So now if this evaluates to true we can send the user the supersecret content else.

99
00:07:07,390 --> 00:07:11,720
Otherwise we can say sorry that password is incorrect.

100
00:07:11,890 --> 00:07:12,910
So let's just do this.

101
00:07:12,910 --> 00:07:18,120
Let's cut this callback call to just select these four lines of code.

102
00:07:18,280 --> 00:07:22,420
Cut that in your clipboard in the F block.

103
00:07:22,420 --> 00:07:30,660
Just paste it in in the else block pasted in once again only this time if they typed the incorrect password

104
00:07:31,140 --> 00:07:38,610
let's change the status code from 200 which means success to maybe for a 1 which means unauthorized.

105
00:07:39,570 --> 00:07:43,840
And since we're sending a failed status code we actually don't even need a message here.

106
00:07:43,860 --> 00:07:49,430
So we can get rid of the body property and this comma after for a one as well.

107
00:07:49,470 --> 00:07:49,740
OK.

108
00:07:49,740 --> 00:07:55,290
Now if they send the correct password while we're at it instead of this just welcome to the super secret

109
00:07:55,290 --> 00:07:55,930
area.

110
00:07:56,190 --> 00:08:00,650
Let's include the HDMI all that you saw in my finished product example.

111
00:08:00,960 --> 00:08:06,210
You could just type a bunch of HDMI all right here but to stay organized we could also go up to the

112
00:08:06,210 --> 00:08:09,440
very top of this file and maybe right above.

113
00:08:09,440 --> 00:08:20,070
When we say let body we can say contest secret content equals and then back ticks two of them in between

114
00:08:20,070 --> 00:08:24,900
the two back ticks we can drop down and begin typing each CML.

115
00:08:24,960 --> 00:08:35,760
So for example maybe we want a heading level three that says Welcome to the secret area and then maybe

116
00:08:35,760 --> 00:08:38,300
a paragraph below that.

117
00:08:39,090 --> 00:08:48,040
Here we can tell you that the sky is blue and two plus two equals four.

118
00:08:48,180 --> 00:08:53,160
And just to really drive home the fact that we're sending each t AML maybe we want the word blue to

119
00:08:53,160 --> 00:08:58,920
be bold so we can wrap that in a strong tag.

120
00:08:58,960 --> 00:09:05,470
You don't have to have your server send back HDMI all you could just send back raw data or Jason data

121
00:09:06,040 --> 00:09:11,740
and then have the front end or the web browser pass that Jason data to create its own HDMI.

122
00:09:11,890 --> 00:09:15,490
There's a million different ways we could do this but this is just a quick example.

123
00:09:16,050 --> 00:09:16,330
OK.

124
00:09:16,330 --> 00:09:19,700
So now we can leverage this secret content variable.

125
00:09:20,170 --> 00:09:29,090
If the password is correct instead of body being this string we can just replace this with secret content.

126
00:09:29,110 --> 00:09:32,170
OK let's go ahead and save this.

127
00:09:32,170 --> 00:09:37,450
But before we push this to get hub I do want to let you know that you should probably go make your GitHub

128
00:09:37,450 --> 00:09:45,290
repo private because even though net lo fi and Amazon Web Services will keep our code private and safe.

129
00:09:45,790 --> 00:09:51,640
Well if you're get a hub repository as public then obviously the secret password value will be leaked

130
00:09:51,640 --> 00:09:52,700
to the public.

131
00:09:52,870 --> 00:09:55,940
And that's not net lo fi or Amazon's fault.

132
00:09:55,960 --> 00:10:03,610
Now luckily for us as of the beginning of 2019 even free get hub accounts can make a repo private.

133
00:10:03,610 --> 00:10:06,160
So just go to the overview screen for your GitHub repo.

134
00:10:06,160 --> 00:10:11,770
Click on settings and then down towards the very bottom you'll see an option to make that particular

135
00:10:11,770 --> 00:10:13,930
repo private cool.

136
00:10:13,930 --> 00:10:19,420
Now in this case it doesn't really matter because it's not like Javascript is an actually secure password

137
00:10:19,420 --> 00:10:21,530
anyways but you get the idea.

138
00:10:21,550 --> 00:10:25,940
You wouldn't want to leak your secret password value to the entire world.

139
00:10:26,050 --> 00:10:29,330
OK with this file saved let's push it up to get hub.

140
00:10:29,860 --> 00:10:36,300
So in the command line I will add everything to the staging area get add dash uppercase a.

141
00:10:36,310 --> 00:10:37,150
Then I will commit

142
00:10:39,610 --> 00:10:47,110
updated cloud function to check password and then push it up to get up.

143
00:10:47,110 --> 00:10:56,370
So get push origin master OK if we jump back over to the net lo fi overview screen for this project

144
00:10:56,370 --> 00:11:03,690
we can click on deploys you can see in real time it's still building OK.

145
00:11:03,690 --> 00:11:07,600
I just waited maybe 20 or 30 seconds and now it's published.

146
00:11:07,710 --> 00:11:10,700
So let's jump back over to postman and test it out again.

147
00:11:11,340 --> 00:11:18,330
So currently our test request is going to send a password value of 1 to 3 ABC which is obviously incorrect.

148
00:11:18,330 --> 00:11:26,660
So if we send out again click on send cool so we don't see response body text but we can't see that

149
00:11:26,660 --> 00:11:39,350
the status is for a one unauthorized however if we go up and change this password value to be Java script

150
00:11:40,460 --> 00:11:46,090
and then send that off again check the response from the server.

151
00:11:46,600 --> 00:11:47,090
Awesome.

152
00:11:47,090 --> 00:11:50,590
There's that successful H TMF message.

153
00:11:50,590 --> 00:11:56,620
So at this point our cloud function is up and running now that we know that it works as we would expect.

154
00:11:56,620 --> 00:12:03,610
We are ready to begin programming the browser the front end to actually send along the data of this

155
00:12:03,610 --> 00:12:04,420
form.

156
00:12:04,420 --> 00:12:09,910
When you submit it now I realize we have not actually added this form to our page yet.

157
00:12:09,910 --> 00:12:12,150
This is the example of the finished product.

158
00:12:12,250 --> 00:12:12,470
Right.

159
00:12:12,490 --> 00:12:16,600
As of right now our Web site still has just the bottom footer.

160
00:12:16,600 --> 00:12:25,630
So in our very next lesson we are going to work on the H all CSX and front end javascript to begin powering

161
00:12:25,630 --> 00:12:28,190
this secret client area.

162
00:12:28,330 --> 00:12:33,190
It should be fun to see all of the different puzzle pieces come together.

163
00:12:33,250 --> 00:12:35,590
Let's keep things rolling and I'll see you then.
