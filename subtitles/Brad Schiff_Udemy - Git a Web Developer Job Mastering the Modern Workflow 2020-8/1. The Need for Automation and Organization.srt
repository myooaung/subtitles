1
00:00:05,550 --> 00:00:07,070
Hello everyone.

2
00:00:07,170 --> 00:00:14,760
In this next section of the course we will learn about a couple of new tools named node dot J.S. and

3
00:00:14,850 --> 00:00:16,500
NPM.

4
00:00:16,560 --> 00:00:22,800
Let's not worry about the names of these tools for now and instead let's begin with a few questions.

5
00:00:22,890 --> 00:00:28,330
So the first question that you might have is are all of these tools really necessary.

6
00:00:28,350 --> 00:00:32,260
Why are we not writing H TMX CSX in JavaScript yet.

7
00:00:32,400 --> 00:00:36,070
Why can't we just get started building the actual Web site.

8
00:00:36,090 --> 00:00:37,490
That's a fair question.

9
00:00:37,500 --> 00:00:42,250
I know that it's one I personally asked when I first heard about these other tools.

10
00:00:42,480 --> 00:00:43,800
And here is the answer.

11
00:00:43,800 --> 00:00:46,000
Here is why we need a few other tools.

12
00:00:46,010 --> 00:00:55,620
It's because while we build the site we want automation and organization automation will save us time

13
00:00:56,010 --> 00:00:59,900
and organization will save us from pulling our hair out.

14
00:00:59,910 --> 00:01:02,560
So let me elaborate on those two terms a bit.

15
00:01:02,580 --> 00:01:06,720
Automation just means to take a task and make it automatic.

16
00:01:06,840 --> 00:01:09,670
Make the computer be able to do it for us.

17
00:01:09,810 --> 00:01:15,600
So when we are building a Web site if there is a small task that we find ourselves performing again

18
00:01:15,630 --> 00:01:20,790
and again and again even if it only takes a few seconds imagine how much time we can save throughout

19
00:01:20,790 --> 00:01:21,720
the course of a day.

20
00:01:21,990 --> 00:01:26,770
If we can find a way to make the computer perform that task for us automatically.

21
00:01:26,940 --> 00:01:29,520
Let me give you a few real world examples.

22
00:01:29,970 --> 00:01:37,560
So whenever we save a change to one of our HDMI LCROSS or JavaScript files we then want to see what

23
00:01:37,560 --> 00:01:40,200
those changes look like in the web browser.

24
00:01:40,230 --> 00:01:45,660
Now instead of hopping into your browser and hitting control R or command R or hitting the refresh button

25
00:01:45,990 --> 00:01:52,500
wouldn't it be nice if your computer could detect that you had saved changes to a file and then automatically

26
00:01:52,500 --> 00:01:55,530
trigger a refresh in the browser for you.

27
00:01:55,560 --> 00:01:58,020
Your computer definitely can do that for you.

28
00:01:58,020 --> 00:02:00,260
And that is an example of automation.

29
00:02:00,390 --> 00:02:07,250
For another example of automation we could setup something called CSX auto prefix or now.

30
00:02:07,350 --> 00:02:12,810
In recent years we don't need to use CSX vendor prefixes as much as we used to.

31
00:02:12,960 --> 00:02:16,240
But for certain properties they are still necessary.

32
00:02:16,320 --> 00:02:22,320
Now instead of wasting the time of typing out all of these messy vendor prefix names or even wasting

33
00:02:22,320 --> 00:02:28,620
the time of trying to memorize which properties need prefixes and which don't we can set up our computer

34
00:02:28,800 --> 00:02:35,970
to watch for any saved changes to a CSX file and then it will automatically trigger a filter to run

35
00:02:35,970 --> 00:02:42,060
on our CSX files and the computer is intelligent enough to know which properties need to be prefixed

36
00:02:42,420 --> 00:02:46,820
and it will automatically add those prefixes to our CSX.

37
00:02:47,040 --> 00:02:50,180
That will save us a lot of headache that will save us a lot of time.

38
00:02:50,310 --> 00:02:52,730
And it's another example of automation.

39
00:02:52,920 --> 00:02:55,450
So that's automation in a nutshell.

40
00:02:55,470 --> 00:03:02,670
There are a lot of different tasks that we can automate using Node J.S. and NPM that will save us a

41
00:03:02,670 --> 00:03:05,620
ton of time on a daily basis.

42
00:03:05,640 --> 00:03:13,410
Next let's talk a little bit about organization and how no doubt J.S. and NPM can help us stay organized.

43
00:03:13,410 --> 00:03:19,630
Let's begin with CSX organization as we write the CSX for our Web site.

44
00:03:19,650 --> 00:03:26,220
We don't want to place all of the code within one single huge CSX file.

45
00:03:26,220 --> 00:03:34,210
Instead we want to stay organized by keeping our CSX separated in multiple bite sized files.

46
00:03:34,260 --> 00:03:41,550
So for example any CSX code related to the header of the Web site would go in its own file named header

47
00:03:41,550 --> 00:03:43,160
dot CSX.

48
00:03:43,260 --> 00:03:49,240
Any styles related to the footage of the Web site would go in a file named footer dot CSX.

49
00:03:49,260 --> 00:03:56,100
This way if we need to revisit and update the Web site six months or even a year down the road we will

50
00:03:56,100 --> 00:04:01,320
know exactly where to find that little bit of CSX that we want to update.

51
00:04:01,320 --> 00:04:07,110
Having said all of that we still don't want to litter the head section of our Web site with calls to

52
00:04:07,110 --> 00:04:15,210
40 different CSX files even though we as the developer want to work with multiple bite sized CSX files

53
00:04:15,570 --> 00:04:20,280
at the end of the day we still want to serve the web browser and the visitors of our Web site.

54
00:04:20,280 --> 00:04:22,860
One single CSX file.

55
00:04:23,100 --> 00:04:26,740
The good news is that we can have the best of both worlds.

56
00:04:26,820 --> 00:04:33,870
And this ties back into automation we can setup our computer to watch for any saved changes to any of

57
00:04:33,870 --> 00:04:41,520
our multiple bite sized CSX files and when a save is detected the computer will automatically in the

58
00:04:41,520 --> 00:04:47,970
matter of a few milliseconds combine all of our little CSX files into the one single file that we can

59
00:04:47,970 --> 00:04:53,970
serve to the browser while still leaving all of our little CSX files intact.

60
00:04:53,970 --> 00:04:59,420
This way our Web site will load quickly and we as the developer can still stay organized.

61
00:04:59,460 --> 00:05:03,080
So that's one example of CSX organization.

62
00:05:03,090 --> 00:05:08,620
We will learn about many others throughout this course but for the time being before we bring this lesson

63
00:05:08,620 --> 00:05:09,460
to an end.

64
00:05:09,460 --> 00:05:16,600
There's one final type of project or code organization that I want to talk about and that is package

65
00:05:16,600 --> 00:05:17,750
management.

66
00:05:17,830 --> 00:05:21,220
We will learn about package management in detail throughout the course.

67
00:05:21,220 --> 00:05:23,920
But for now I want to keep things really simple.

68
00:05:23,920 --> 00:05:26,410
So what is package management.

69
00:05:26,410 --> 00:05:33,640
Well if you've created a Web site in the last few years odds are that you used bootstrap or maybe low

70
00:05:33,640 --> 00:05:40,960
dash or maybe you used the popular CSI as reset named normalized CSX.

71
00:05:40,960 --> 00:05:43,330
Now what do those three things have in common.

72
00:05:43,330 --> 00:05:46,900
The answer is you didn't write or create any of them.

73
00:05:46,990 --> 00:05:55,360
They are pieces of code or packages that someone else maintains and you might use 5 10 or 20 different

74
00:05:55,360 --> 00:05:58,000
packages on a Web site that you create.

75
00:05:58,030 --> 00:06:03,070
Now as you're going to Google and searching for load ash or going to Google and searching for bootstrap

76
00:06:03,250 --> 00:06:08,710
to get the files to download if you've ever thought to yourself there's got to be a better way of doing

77
00:06:08,710 --> 00:06:09,470
this.

78
00:06:09,490 --> 00:06:15,240
There's got to be a faster more automated way of getting access to all of these different files.

79
00:06:15,250 --> 00:06:21,190
Well if you've ever thought that you were absolutely correct there is a better faster way of getting

80
00:06:21,190 --> 00:06:22,250
all of those files.

81
00:06:22,270 --> 00:06:24,840
And it's called package management.

82
00:06:24,880 --> 00:06:28,440
We will learn all about package management in the next few lessons.

83
00:06:28,450 --> 00:06:31,600
But for now this lesson has come to a close.

84
00:06:31,690 --> 00:06:33,380
Let's review what we've covered.

85
00:06:33,400 --> 00:06:39,430
We learned that when we build a Web site we want automation an organization now that we know what's

86
00:06:39,430 --> 00:06:40,290
possible.

87
00:06:40,390 --> 00:06:45,550
Now that we know that we can configure our computer to do all of these neat automatic things for us.

88
00:06:45,730 --> 00:06:48,980
It's just a matter of learning how to make the computer do all of that.

89
00:06:49,000 --> 00:06:54,340
The key to turning your computer into your own little robot assistant is learning a few tools named

90
00:06:54,430 --> 00:07:02,530
node J.S. and NPM in our next lesson we will learn what in the world no dot J.S. even is.

91
00:07:02,530 --> 00:07:03,640
You will get your hands dirty.

92
00:07:03,640 --> 00:07:09,070
I will help you install node on your computer and we will walk through a few code examples together

93
00:07:09,220 --> 00:07:10,480
step by step.

94
00:07:10,690 --> 00:07:11,860
It's going to be a lot of fun.

95
00:07:11,920 --> 00:07:14,460
And I will see you in the next lesson.
