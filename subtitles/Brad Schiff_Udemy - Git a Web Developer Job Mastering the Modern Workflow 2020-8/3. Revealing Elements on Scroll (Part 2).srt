1
00:00:02,360 --> 00:00:03,800
Hello everyone.

2
00:00:03,920 --> 00:00:08,690
In this lesson we are going to improve our Reveal on scroll feature.

3
00:00:08,690 --> 00:00:11,420
First let's improve its performance.

4
00:00:11,420 --> 00:00:18,350
Or in other words we want to use as little web browser or computer processing horsepower as possible.

5
00:00:18,350 --> 00:00:24,690
I want to begin by showing you an example of how our current code is super inefficient.

6
00:00:24,740 --> 00:00:32,540
So right now do this with me within your reveal on scroll dot J.S. file within our events method.

7
00:00:32,540 --> 00:00:37,190
When we add an event listener for scroll on the window object.

8
00:00:37,190 --> 00:00:42,560
Well we see this line ends with an opening curly bracket right below that lets drop down and create

9
00:00:42,590 --> 00:00:52,490
a brand new line and just say console dot log and let's log out a message that says scroll function

10
00:00:52,590 --> 00:00:54,030
ran.

11
00:00:54,290 --> 00:00:57,670
Let's go ahead and save this and then back in the browser.

12
00:00:57,680 --> 00:01:02,450
Be sure to perform a manual refresh.

13
00:01:02,450 --> 00:01:10,480
Now watch this as we begin scrolling in the browser's console we see that message scroll function ran.

14
00:01:10,480 --> 00:01:14,380
And this number next to it is how many times that message has appeared.

15
00:01:14,380 --> 00:01:18,550
So you can see as I scroll that number is just climbing.

16
00:01:18,580 --> 00:01:24,820
This means the web browser is calling our function for every single pixel We scroll.

17
00:01:24,820 --> 00:01:30,640
Well every web browser is a bit different so maybe not every single pixel but you get the idea it is

18
00:01:30,640 --> 00:01:33,100
calling our function way too often.

19
00:01:33,100 --> 00:01:37,630
And we are wasting a lot of web browser or processing horsepower.

20
00:01:37,660 --> 00:01:40,860
Now you might be thinking to yourself Does this really matter.

21
00:01:40,870 --> 00:01:42,050
Who cares.

22
00:01:42,070 --> 00:01:45,330
There are actually several reasons why we should care.

23
00:01:45,340 --> 00:01:51,970
I would ask you Have you ever felt your laptop or smartphone feel hot to the touch especially on a smartphone

24
00:01:51,970 --> 00:01:55,560
if you visit a simple or well coded Web site.

25
00:01:55,630 --> 00:02:00,400
Your phone is not going to feel hot in the palm of your hand but if you visit a Web site where there's

26
00:02:00,400 --> 00:02:07,030
a lot going on or it's coded terribly inefficiently you will feel the heat from your phone in the palm

27
00:02:07,030 --> 00:02:10,810
of your hand because your phone is having to work too hard.

28
00:02:10,840 --> 00:02:14,470
The Web site is really stressing the processor in your device.

29
00:02:14,560 --> 00:02:18,090
In my opinion that reflects poorly on a Web site and a brand.

30
00:02:18,220 --> 00:02:22,010
It makes it seem like the people who created the Web site don't know what they're doing.

31
00:02:22,150 --> 00:02:27,270
So that's reason number one why we would want to avoid terribly inefficient code.

32
00:02:27,280 --> 00:02:30,360
Reason number two is a bit more timeless.

33
00:02:30,430 --> 00:02:37,840
So let's imagine where in the future 5 10 20 years where processors are super powerful and no matter

34
00:02:37,840 --> 00:02:41,730
how hard you stress them they really don't generate that much heat.

35
00:02:41,890 --> 00:02:45,070
So the end user would never know that your code is inefficient.

36
00:02:45,520 --> 00:02:52,360
Well even in that scenario we still don't want to write inefficient code why you might ask well it's

37
00:02:52,360 --> 00:02:57,820
just sort of the way programmers are built as a programmer you are always striving to write the most

38
00:02:57,820 --> 00:03:00,200
efficient well thought out code.

39
00:03:00,280 --> 00:03:05,200
For example imagine we were writing code that's going to run on the server side instead of the browser

40
00:03:05,200 --> 00:03:06,530
or client side.

41
00:03:06,670 --> 00:03:12,670
In that case the programmer that can write more efficient code is going to save the company money.

42
00:03:12,670 --> 00:03:16,540
Big picture it's just a good idea to get used to writing efficient code.

43
00:03:16,690 --> 00:03:18,900
So hopefully that covers the why.

44
00:03:18,940 --> 00:03:23,470
Now let's get into the how how can we make this code more efficient.

45
00:03:23,470 --> 00:03:30,280
Well in terms of this scrolling action what we want to do is throttle the scroll call.

46
00:03:30,280 --> 00:03:36,070
So instead of letting the web browser call our scroll function as many times as it wants to as we scroll

47
00:03:36,370 --> 00:03:43,280
we want to throttle it so that it's only called maybe every 100 milliseconds as we scroll or every 200

48
00:03:43,300 --> 00:03:45,460
milliseconds as we scroll.

49
00:03:45,460 --> 00:03:52,210
Now we could write our own throttle function that sets up that limitation but there's already an industry

50
00:03:52,210 --> 00:03:58,270
standard we're going to use a package from NPM named lo dash.

51
00:03:58,270 --> 00:04:05,140
So here on the NPM page for load Ash you can see that just in the last week it was downloaded over 25

52
00:04:05,470 --> 00:04:07,320
million times.

53
00:04:07,420 --> 00:04:12,550
So that lets you know that load ash is not some obscure library that I like but rather it's an industry

54
00:04:12,550 --> 00:04:13,090
standard.

55
00:04:13,660 --> 00:04:18,910
So right now let's jump into our text editor let's open up our command line.

56
00:04:19,120 --> 00:04:25,120
If you're like me and your Web pack task is running go ahead and press control see and let's install

57
00:04:25,170 --> 00:04:26,310
load ash.

58
00:04:26,580 --> 00:04:37,210
So type this command in with me npm install low dash this time around we do not need the dash dash save

59
00:04:37,210 --> 00:04:38,580
dash death.

60
00:04:38,710 --> 00:04:44,450
This is because load ash is not a package that makes our workflow or development process easier.

61
00:04:44,470 --> 00:04:49,310
Rather it's a package that we actually want to send along to our visitors.

62
00:04:49,330 --> 00:04:52,710
It's an actual direct dependency of our application.

63
00:04:52,810 --> 00:04:54,520
So let's go ahead and run this command

64
00:04:58,360 --> 00:04:58,740
OK.

65
00:04:58,750 --> 00:05:00,940
And then we can tell Webb pack to begin running again.

66
00:05:00,950 --> 00:05:05,740
So NPM run Dev OK.

67
00:05:05,750 --> 00:05:13,200
And now back in our JavaScript file let's leverage low dash up at the very top of this file.

68
00:05:13,380 --> 00:05:18,140
We are interested in importing the throttle functionality of low dash.

69
00:05:18,140 --> 00:05:18,800
So let's do this.

70
00:05:18,800 --> 00:05:28,200
Let's say import throttle from and then inside these quotes we just say low dash the name of the package.

71
00:05:28,370 --> 00:05:31,920
And then we don't need to import the entire load Ash library.

72
00:05:31,940 --> 00:05:34,700
We can just say slash throttle.

73
00:05:35,870 --> 00:05:38,480
So now we have this function named throttle.

74
00:05:38,480 --> 00:05:40,260
That's very easy to leverage.

75
00:05:40,280 --> 00:05:42,110
You just give it to arguments.

76
00:05:42,110 --> 00:05:44,910
The first argument is a function that you want to run.

77
00:05:44,930 --> 00:05:51,890
The second argument is how many milliseconds you want to have to wait before that function can run again.

78
00:05:51,890 --> 00:05:58,570
Now we could absolutely go ahead and use the throttle function directly in our ad event listener call.

79
00:05:58,820 --> 00:05:59,030
Right.

80
00:05:59,030 --> 00:06:03,290
So the type of event we're listening for is scroll in the second argument here is a function.

81
00:06:03,320 --> 00:06:06,910
So instead of this aero function we could just use the throttle function.

82
00:06:07,010 --> 00:06:11,590
However I want to give our ad event listener a named function.

83
00:06:11,660 --> 00:06:16,430
My reasoning for this has nothing to do with throttle but has to do with a bit of performance savings

84
00:06:16,430 --> 00:06:18,830
we're going to set up later in the lesson.

85
00:06:18,830 --> 00:06:23,340
Essentially once you've scrolled so that all hidden elements are now revealed.

86
00:06:23,360 --> 00:06:28,130
Well I don't want there to be a scroll handler attached to the window object at all.

87
00:06:28,130 --> 00:06:34,130
I want to be able to remove this listener completely and in order to do that we need this to be a named

88
00:06:34,130 --> 00:06:35,720
function that we can reference.

89
00:06:36,170 --> 00:06:40,940
So even though that has nothing directly to do with throttling let me show you how I would set all of

90
00:06:40,940 --> 00:06:43,400
this up within our constructor.

91
00:06:43,400 --> 00:06:45,760
Right above this line where we call events.

92
00:06:45,770 --> 00:06:52,280
So right here I would create a new property you can name it anything but I'm going to name it scroll

93
00:06:52,700 --> 00:06:55,760
throttle and say that it should equal.

94
00:06:55,760 --> 00:07:01,700
And then I'm going to use the low dash throttle tool and this method doesn't exist yet.

95
00:07:01,720 --> 00:07:03,320
But we will create it in just a moment.

96
00:07:03,320 --> 00:07:10,340
So I'm going to say this dot calc caller that's the function I want to run comma.

97
00:07:10,430 --> 00:07:14,840
The second argument is how many milliseconds you want to wait before this can be called again.

98
00:07:15,380 --> 00:07:18,200
So I would say 200 milliseconds.

99
00:07:18,200 --> 00:07:23,780
So this way for every one second that the user scrolls the page we know that our function is only going

100
00:07:23,780 --> 00:07:27,800
to be called five times at the most at the very end of this line.

101
00:07:27,800 --> 00:07:32,170
I will add dot bind with the value of this.

102
00:07:32,270 --> 00:07:37,340
This will make sure that no matter how this function is called the this keyword will still be pointing

103
00:07:37,340 --> 00:07:39,830
towards our overall object.

104
00:07:39,890 --> 00:07:45,160
Now within our events area I want you to cut and paste these four lines of code here.

105
00:07:45,200 --> 00:07:50,120
So from console dot log and then these three lines that power our for each.

106
00:07:50,120 --> 00:07:56,710
So with these four lines highlighted go ahead and cut them into your clipboard and let's create a brand

107
00:07:56,710 --> 00:07:59,550
new method with this name calc caller.

108
00:07:59,800 --> 00:08:05,770
So right below events or right above this calculator scroll to method create a brand new method named

109
00:08:06,220 --> 00:08:16,010
calc caller parentheses curly brackets inside the curly brackets you can paste in your clipboard OK.

110
00:08:16,020 --> 00:08:20,460
And now back in the events method let's get rid of this arrow function.

111
00:08:20,940 --> 00:08:23,370
So this line of code should look like this.

112
00:08:23,370 --> 00:08:27,150
We're adding an event listener to window and we need to give it to arguments.

113
00:08:27,150 --> 00:08:33,060
We just have the one argument of scroll comma and now we're ready to give it the second argument.

114
00:08:33,060 --> 00:08:37,500
So this is where we will use our property named scroll throttle.

115
00:08:37,510 --> 00:08:44,830
We can say this dot scroll throttle if the last couple of minutes didn't make perfect sense.

116
00:08:44,880 --> 00:08:45,780
That's OK.

117
00:08:45,870 --> 00:08:52,380
I think studying this line of code and working backwards will allow things to make sense essentially

118
00:08:52,380 --> 00:08:55,890
every time the browser detects a scroll event.

119
00:08:55,890 --> 00:08:58,740
It's going to call this function.

120
00:08:58,740 --> 00:09:05,640
We set that up so that that function uses the low dash throttle tool which is only going to allow this

121
00:09:05,730 --> 00:09:09,630
to run once every 200 milliseconds.

122
00:09:09,630 --> 00:09:15,810
And then remember we set up calc caller to be the code that actually runs our calculations to see if

123
00:09:15,960 --> 00:09:18,120
the elements have been scrolled to yet.

124
00:09:18,120 --> 00:09:21,700
So let's go ahead and save this and then back in the browser.

125
00:09:21,810 --> 00:09:23,780
Let's perform a manual refresh.

126
00:09:23,790 --> 00:09:31,770
So our old event handlers are gone and now as I begin scrolling you can see it's not as if hundreds

127
00:09:31,770 --> 00:09:37,650
and hundreds of the same event are being fired for every one second that I scroll the function is only

128
00:09:37,650 --> 00:09:39,870
being called about five times.

129
00:09:40,140 --> 00:09:42,540
And if I scroll down to the hidden elements

130
00:09:45,320 --> 00:09:45,820
perfect.

131
00:09:45,830 --> 00:09:47,690
So our code is still working.

132
00:09:47,840 --> 00:09:54,320
And now it's not as if our calculations are being called hundreds and hundreds of times but we can still

133
00:09:54,320 --> 00:09:55,250
do better.

134
00:09:55,280 --> 00:10:01,580
Let's set things up so that once an item is revealed we don't continue to calculate if it should be

135
00:10:01,580 --> 00:10:05,090
revealed any longer before we set up this solution.

136
00:10:05,090 --> 00:10:12,020
Let's first add a console dot log line so that we can see when our calculation is actually running back

137
00:10:12,020 --> 00:10:13,820
in our text editor.

138
00:10:13,820 --> 00:10:20,680
I want you to find the method that is named calculate if scrolled to within the body of this function.

139
00:10:20,690 --> 00:10:29,350
Let's just add a line and say console dot log let's say element was calculated.

140
00:10:30,050 --> 00:10:37,370
Let's go ahead and save and then be sure to manually refresh in the browser and you'll notice that even

141
00:10:37,370 --> 00:10:44,810
once I scroll and reveal all of my items if I continue to scroll in the console you can see that that

142
00:10:44,810 --> 00:10:50,420
message keeps appearing since it's just the same exact message over and over again it's hard to see

143
00:10:50,420 --> 00:10:55,400
if it's actually being called you'll know that it's being called because you can see the scroll bar

144
00:10:55,400 --> 00:10:58,480
for the console keeps getting smaller and smaller.

145
00:10:58,700 --> 00:11:03,800
Or if you selected and highlighted one of these and then scroll your browser you can see it move up

146
00:11:03,860 --> 00:11:05,030
out of you.

147
00:11:05,060 --> 00:11:10,790
So for performance reasons once we've revealed an item we don't need to continue to calculate for it

148
00:11:11,790 --> 00:11:14,160
so let me show you how I would set things up.

149
00:11:14,250 --> 00:11:20,250
Back in our text editor I want you to scroll down and find our hide initially method.

150
00:11:20,250 --> 00:11:24,070
We've already written a bit of code that loops through the collection of items.

151
00:11:24,210 --> 00:11:28,250
And for each item it adds a class.

152
00:11:28,290 --> 00:11:34,260
Well if we're already doing something once for each item why don't we create a property on each item

153
00:11:34,500 --> 00:11:36,930
named is revealed.

154
00:11:36,930 --> 00:11:39,350
And by default it's set to false.

155
00:11:39,780 --> 00:11:44,690
But then once we actually calculate that it should be visible we can set it to true.

156
00:11:44,820 --> 00:11:51,150
That way we can set up an if statement so that we only bother calculating an item if it hasn't already

157
00:11:51,150 --> 00:11:52,420
been revealed.

158
00:11:52,440 --> 00:11:53,490
Let me show you what I mean.

159
00:11:54,030 --> 00:12:00,060
Let's adjust our arrow function down here to have curly brackets so we can have more than one statement.

160
00:12:00,180 --> 00:12:08,260
So right after the arrow symbol we can add an opening curly bracket here and dropdown and then in between

161
00:12:08,260 --> 00:12:14,020
these two closing parentheses here we can add a closing curly bracket right before that closing curly

162
00:12:14,020 --> 00:12:16,020
bracket we can drop to a new line.

163
00:12:16,810 --> 00:12:17,310
OK.

164
00:12:17,380 --> 00:12:22,930
Now within the body of this function or within these curly brackets after this line of code let's add

165
00:12:22,930 --> 00:12:28,770
a new line and we can just say the current element that's been looped to and Dot.

166
00:12:28,810 --> 00:12:36,120
Let's add a new property to it named is revealed in just by default.

167
00:12:36,130 --> 00:12:38,250
Set it to false.

168
00:12:38,350 --> 00:12:38,890
OK.

169
00:12:38,950 --> 00:12:45,110
Now up in this function calculate if scrolled to if this is true and we add the class that makes it

170
00:12:45,110 --> 00:12:46,120
visible.

171
00:12:46,180 --> 00:12:48,880
Well then we can also just set that property to True.

172
00:12:49,390 --> 00:12:55,300
So E L dot is revealed equals true.

173
00:12:56,130 --> 00:12:56,430
OK.

174
00:12:56,440 --> 00:13:03,880
Now let's scroll up to our calc column method and within this for each we have this line that calls

175
00:13:03,880 --> 00:13:05,220
the calculation method.

176
00:13:05,260 --> 00:13:08,700
And this is going to run once for each element in the collection.

177
00:13:08,740 --> 00:13:15,940
So just select this line and let's cut it into our clipboard and we're essentially wrapping it in an

178
00:13:16,000 --> 00:13:16,740
if statement.

179
00:13:16,750 --> 00:13:25,930
So say if parentheses curly brackets for the condition say if the current element if it's property of

180
00:13:26,050 --> 00:13:30,940
is revealed double equal sign to check for equality.

181
00:13:30,940 --> 00:13:32,760
Only if it equals false.

182
00:13:33,460 --> 00:13:38,290
Only if that's the case then inside the if curly brackets just paste back in your clipboard.

183
00:13:38,320 --> 00:13:43,720
Now you might be thinking Did we really need this is revealed property couldn't we have just checked

184
00:13:43,720 --> 00:13:47,840
to see if it didn't have the CSX class that makes it revealed.

185
00:13:47,860 --> 00:13:50,670
Well yes absolutely we could have done that instead.

186
00:13:50,800 --> 00:13:56,980
But I'm quite certain that checking if a single value is true or false is going to be a good deal faster

187
00:13:57,400 --> 00:14:02,840
than seeing if an array of CSX classes contains a certain string match or not.

188
00:14:02,920 --> 00:14:06,970
Anyways let's go ahead and save this and back in the browser.

189
00:14:07,000 --> 00:14:09,190
Be sure to perform a manual refresh.

190
00:14:09,370 --> 00:14:11,910
So all of your old event listeners are gone.

191
00:14:12,130 --> 00:14:17,860
Now as I scroll down you'll see this element was calculated message keeps appearing.

192
00:14:17,860 --> 00:14:21,560
But once I scroll down so that all of them have been revealed.

193
00:14:21,730 --> 00:14:26,300
Now when I continue to scroll we no longer see element was calculated.

194
00:14:26,380 --> 00:14:30,310
We only see our generic scroll function Rand perfect.

195
00:14:30,310 --> 00:14:32,640
So now let's take things one step further.

196
00:14:32,710 --> 00:14:36,790
Once the final item that needs to be revealed has been revealed.

197
00:14:36,790 --> 00:14:40,990
Let's completely remove the scroll event listener.

198
00:14:40,990 --> 00:14:48,140
So back in the text editor first we need to be able to determine once every single item has been revealed.

199
00:14:48,160 --> 00:14:50,600
There are a hundred different ways you could set this up.

200
00:14:50,620 --> 00:14:57,370
But here's what I'm going to do within our hide initially method after this for each loop.

201
00:14:57,370 --> 00:15:05,920
So right after this closing parentheses here I would drop down and say this dot items to reveal.

202
00:15:06,340 --> 00:15:08,680
So this will give me the collection of items.

203
00:15:09,130 --> 00:15:15,180
And then if we use square brackets we can select a particular element from this collection.

204
00:15:15,190 --> 00:15:19,450
So we want the very last or final element in the collection.

205
00:15:19,450 --> 00:15:24,550
So we could put a number here but we don't want a hard code this to a number.

206
00:15:24,550 --> 00:15:29,190
So instead what we can do is grab the overall length of this collection.

207
00:15:29,260 --> 00:15:38,490
So this dot items to reveal dot length so length will be a count of how many items are in the collection.

208
00:15:38,620 --> 00:15:43,500
And then just subtract one because arrays are zero based.

209
00:15:43,720 --> 00:15:46,630
So this will give us the final item in the collection.

210
00:15:46,630 --> 00:15:54,370
Once we've got that element we can just tack on and add a property to it named is last item and set

211
00:15:54,370 --> 00:15:55,080
it to true.

212
00:15:56,440 --> 00:15:57,020
OK.

213
00:15:57,100 --> 00:16:05,030
Now up within our calculate if scrolled to method if we've calculated an item should be revealed.

214
00:16:05,110 --> 00:16:11,080
Well then after this line but still within the curly brackets from the if we can dropdown and let's

215
00:16:11,080 --> 00:16:19,180
set up another if statement so if parentheses curly brackets for the if condition if the current element

216
00:16:19,540 --> 00:16:20,840
dot is.

217
00:16:20,980 --> 00:16:28,960
Last item only if that's true then we would want to remove the scroll event listener.

218
00:16:28,960 --> 00:16:38,650
So the overall browser window object and instead of add event listener we can use remove event listener.

219
00:16:38,770 --> 00:16:45,250
So the type of event we're trying to remove is scroll comma and this is why earlier we gave add event

220
00:16:45,250 --> 00:16:51,460
listener a named function that we can point towards or reference because we want to reference it again

221
00:16:51,460 --> 00:16:52,330
to remove it.

222
00:16:52,780 --> 00:16:58,500
So it was this dot scroll throttle.

223
00:16:58,810 --> 00:17:00,220
Let's give this a save.

224
00:17:00,430 --> 00:17:02,920
Back in the browser manually refresh.

225
00:17:03,640 --> 00:17:12,600
So as I scroll we are seeing both element was calculated and scroll function ran but as soon as I reveal

226
00:17:12,690 --> 00:17:14,340
all of the items.

227
00:17:14,560 --> 00:17:18,660
Now when I continue to scroll we don't see anything in the console.

228
00:17:18,660 --> 00:17:21,310
You can prove this by maybe selecting a few.

229
00:17:21,420 --> 00:17:25,300
And then if I continue to scroll in the browser console doesn't change.

230
00:17:25,320 --> 00:17:26,640
Perfect.

231
00:17:26,640 --> 00:17:33,120
That's going to bring this video but not this lesson to a close in the next video we'll continue this

232
00:17:33,120 --> 00:17:39,570
lesson Don't worry we are ninety five percent done with our performance or efficiency improvements we

233
00:17:39,570 --> 00:17:44,850
just have five more percent to go on that effort and then we can change gears and learn how to make

234
00:17:44,940 --> 00:17:54,360
our Reveal on scroll module recyclable so that we can also use it to hide and reveal these testimonials.

235
00:17:54,540 --> 00:17:57,750
Let's keep things rolling and I will see you in the next video.
