WEBVTT
1
00:00:01.810 --> 00:00:03.210
Hello everyone.

2
00:00:03.340 --> 00:00:09.640
In this lesson we will use Web PAC to set up an automated CSX workflow.

3
00:00:09.640 --> 00:00:11.660
Here's an overview for this lesson.

4
00:00:11.680 --> 00:00:16.390
First we will go over what a CSX workflow even is.

5
00:00:16.420 --> 00:00:18.570
So we are all on the same page.

6
00:00:18.580 --> 00:00:23.920
After that we'll have an idea of what we're trying to set up and why we're setting it up.

7
00:00:23.920 --> 00:00:30.390
So then we will be ready to actually add CSF support to our Web pack configuration.

8
00:00:30.490 --> 00:00:32.640
So let's get started from the top.

9
00:00:32.680 --> 00:00:35.480
What is a CSX workflow.

10
00:00:35.650 --> 00:00:40.990
In a previous lesson I mentioned something named CSX auto prefix sir.

11
00:00:41.230 --> 00:00:48.850
It's an automation tool that lets us write CSX like this and automatically turns it into this for us

12
00:00:49.300 --> 00:00:51.960
auto prefix or can save us a ton of time.

13
00:00:52.000 --> 00:00:54.420
And we will be setting it up in this lesson.

14
00:00:54.490 --> 00:01:00.700
But even beyond auto prefix sir there are a lot of other things we wish we could do while writing CSX

15
00:01:00.970 --> 00:01:04.300
that we can't do because web browsers don't support it.

16
00:01:04.300 --> 00:01:09.550
This is where things like sass or less or stylists come into play.

17
00:01:09.550 --> 00:01:10.980
If you've never heard of any of those.

18
00:01:10.980 --> 00:01:12.240
That's a OK.

19
00:01:12.280 --> 00:01:16.660
They are tools that let us do some of the following things in CSX.

20
00:01:16.660 --> 00:01:23.950
So for example maybe we want to save a certain hexadecimal color code of a blue shade to a variable

21
00:01:24.250 --> 00:01:32.710
named Main blue so that we can easily reuse that exact color throughout our CSX or maybe we wish that

22
00:01:32.710 --> 00:01:35.530
we could write nested CSX.

23
00:01:35.620 --> 00:01:40.660
So instead of writing CSX that looks like this we wish we could write CSX.

24
00:01:40.660 --> 00:01:42.160
That looks like this.

25
00:01:42.310 --> 00:01:48.100
But normally we can't do that because 0 percent of Web browsers today support that.

26
00:01:48.100 --> 00:01:55.480
So tools like sass and less and stylists let us write CSX the way we wish we could write it even though

27
00:01:55.480 --> 00:01:57.230
it won't work in a web browser.

28
00:01:57.310 --> 00:02:04.660
And then these tools pass our code through a filter that spits out a new file and in that new file it

29
00:02:04.720 --> 00:02:08.610
automatically converts our code into regular CSX.

30
00:02:08.680 --> 00:02:10.970
That will work in Web browsers.

31
00:02:11.020 --> 00:02:12.900
So it's the best of both worlds.

32
00:02:12.910 --> 00:02:19.390
So in this course in order to get all of those neat CSX features that we just discussed we are not going

33
00:02:19.390 --> 00:02:22.120
to use SAS or less or stylus.

34
00:02:22.300 --> 00:02:26.730
We are going to use something called Post CSX post.

35
00:02:26.740 --> 00:02:34.330
CSX is the trendy new kid on the block in the CSX World but it also has the objective benefit of being

36
00:02:34.330 --> 00:02:40.180
the fastest to compile out of all of the CSX pre and post processors.

37
00:02:40.180 --> 00:02:40.540
All right.

38
00:02:40.870 --> 00:02:44.860
So now we have a general idea of what we want to do in this lesson.

39
00:02:44.860 --> 00:02:50.640
Now it's time to get our hands dirty and actually make it happen with web pack.

40
00:02:50.680 --> 00:02:57.040
Now before we go ahead and start adding CSX support to our Web pack setup let's begin by making sure

41
00:02:57.040 --> 00:03:01.290
that we even have a CSX file that we want to bundle.

42
00:03:01.300 --> 00:03:06.010
So right now do this with me within our travel sites app folder.

43
00:03:06.010 --> 00:03:09.400
Let's dig into the assets folder.

44
00:03:09.400 --> 00:03:13.060
At the moment it contains images and scripts.

45
00:03:13.060 --> 00:03:16.930
Let's go ahead and create a new folder named Stiles.

46
00:03:16.960 --> 00:03:21.650
So I would right click on the assets folder and choose New Folder.

47
00:03:21.850 --> 00:03:23.080
And so we're on the same page.

48
00:03:23.080 --> 00:03:26.480
Let's name this folder lowercase Stiles.

49
00:03:27.400 --> 00:03:27.820
OK.

50
00:03:27.850 --> 00:03:32.120
And then within that new styles folder that's right click and choose new file.

51
00:03:32.140 --> 00:03:37.500
Let's go ahead and name it lowercase Stiles dot C..

52
00:03:38.070 --> 00:03:38.350
All right.

53
00:03:38.350 --> 00:03:44.950
Now within this brand new file let's add a tiny bit of sample or test CSX just so we will know when

54
00:03:44.950 --> 00:03:45.780
things are working.

55
00:03:46.090 --> 00:03:52.870
So let's target the body element and let's just say body should have color orange.

56
00:03:52.870 --> 00:04:00.790
Let's go ahead and save this file and now our first instinct might be to go into our HDMI file and in

57
00:04:00.790 --> 00:04:06.160
the head section load in this CSX file and technically that would work right.

58
00:04:06.160 --> 00:04:09.130
That would add this styling to this web page.

59
00:04:09.130 --> 00:04:11.190
So this text would become orange.

60
00:04:11.470 --> 00:04:18.450
However that's sort of a setup would not leave any room for an automated workflow.

61
00:04:18.460 --> 00:04:23.980
So what we actually want to do and trust me I realize how unintuitive or weird this is going to seem

62
00:04:23.980 --> 00:04:24.540
at first.

63
00:04:24.550 --> 00:04:32.330
But what we actually want to do is load this CSX file from within our main JavaScript file.

64
00:04:32.560 --> 00:04:34.490
First let me show you what I mean.

65
00:04:34.600 --> 00:04:40.570
And then a bit later on in this lesson we'll understand why we're doing this and the benefits behind

66
00:04:40.570 --> 00:04:41.250
it.

67
00:04:41.290 --> 00:04:45.550
So right now do this with me within our app assets folder.

68
00:04:45.550 --> 00:04:51.300
Dig into the scripts folder and I want you to open up app dot J Yes.

69
00:04:51.970 --> 00:04:58.630
So up at the top let's add a brand new line of code and type this in with me in Port and then a pair

70
00:04:58.630 --> 00:05:04.520
of quotes and then within the quotes we want to point towards our new CSX file.

71
00:05:04.670 --> 00:05:12.350
So dot dot slash to go up out of the scripts folder into the assets folder and then we want to go into

72
00:05:12.350 --> 00:05:18.910
the styles folder and then we're interested in the file named styles dot CSX.

73
00:05:19.120 --> 00:05:19.440
Okay.

74
00:05:19.460 --> 00:05:21.220
Now go ahead and save this file.

75
00:05:21.350 --> 00:05:24.350
Now at the moment if we tried to run Web back.

76
00:05:24.590 --> 00:05:30.150
So tell web pack to process and bundle this javascript file it would run into an error.

77
00:05:30.200 --> 00:05:32.300
So we're not even going to try yet.

78
00:05:32.510 --> 00:05:38.690
It would run into an error because remember out of the box without any extra configuration web pack

79
00:05:38.840 --> 00:05:43.890
only understands JavaScript files not CSI files.

80
00:05:43.940 --> 00:05:51.810
However if we make a trip to the NPM grocery store we can easily add CSF support to our Web pack setup

81
00:05:52.250 --> 00:06:00.230
so open up your command line and then type this command in with me npm install and we're going to install

82
00:06:00.230 --> 00:06:08.920
two packages the name of the first package is C S S dash loader space okay.

83
00:06:08.930 --> 00:06:15.020
And then the name of the second package we want is style dash loader.

84
00:06:15.020 --> 00:06:23.230
And then at the very end at a space and type dash dash save dash Dev OK.

85
00:06:23.240 --> 00:06:26.570
Now that we've downloaded those two packages let's go leverage them.

86
00:06:26.900 --> 00:06:35.840
So to do that I want you to jump into your web pack dot config dot J.S. file within this configuration

87
00:06:35.840 --> 00:06:36.560
object.

88
00:06:36.620 --> 00:06:43.700
We can tell web pack what to do when it runs into certain files by adding a property named module so

89
00:06:43.700 --> 00:06:50.690
down at the bottom here maybe at the end of this watch line let's add a comma and then let's dropdown

90
00:06:50.930 --> 00:06:57.830
and lets out a new property named module so module colon and then create a javascript object with curly

91
00:06:57.830 --> 00:06:59.980
brackets within the brackets.

92
00:06:59.990 --> 00:07:03.310
Let's drop down OK inside this object.

93
00:07:03.320 --> 00:07:05.930
We just need a property named rules.

94
00:07:05.930 --> 00:07:07.240
So type in rules.

95
00:07:07.240 --> 00:07:10.460
Colon and then this is going to be an array.

96
00:07:10.460 --> 00:07:12.800
So square brackets.

97
00:07:12.800 --> 00:07:19.310
So within our array within these square brackets we can dropdown to stay organized and let's create

98
00:07:19.370 --> 00:07:20.300
an object here.

99
00:07:20.330 --> 00:07:26.480
So curly brackets now for the time being we're only going to have this one object in the array.

100
00:07:26.480 --> 00:07:31.880
But the idea is that you can have multiple objects in this array where you tell Westpac to do something

101
00:07:31.880 --> 00:07:34.720
different depending on the file type.

102
00:07:34.730 --> 00:07:38.350
So right now we're interested in the C Ss file type.

103
00:07:38.420 --> 00:07:38.820
Right.

104
00:07:38.840 --> 00:07:44.270
We want to tell Webb pack what it should do if we run into a C Ss file.

105
00:07:44.420 --> 00:07:48.680
So within this innermost object that we've created we're going to give it to properties.

106
00:07:48.800 --> 00:07:51.440
The first property is named test.

107
00:07:51.440 --> 00:07:56.030
So feel free to drop down in between these curly brackets and give it a property name of.

108
00:07:56.040 --> 00:07:58.410
Test test colon.

109
00:07:58.670 --> 00:08:07.880
And now we give this a regular expression forward slash and then a backslash and then dot c SS and then

110
00:08:07.880 --> 00:08:14.750
a dollar sign and then a forward slash and then the letter I essentially this is telling web pack that

111
00:08:14.750 --> 00:08:19.640
within this rule we're only interested in files that pass the following test.

112
00:08:19.640 --> 00:08:19.910
Right.

113
00:08:19.910 --> 00:08:24.560
Only if the file name ends in dot CSX.

114
00:08:24.590 --> 00:08:29.330
OK so if a file does end in dot CSX what do we want to do.

115
00:08:29.360 --> 00:08:34.680
Well at the end of this line lets out a comma and let's add one more property named.

116
00:08:34.850 --> 00:08:38.470
So use colon and then this is going to be an array.

117
00:08:38.490 --> 00:08:40.520
So square brackets.

118
00:08:40.520 --> 00:08:45.800
Now this is where we can leverage those packages that we just downloaded from NPM.

119
00:08:45.860 --> 00:08:53.630
So remember the first package that we downloaded was named so quotes it was named C S S dash loader.

120
00:08:54.290 --> 00:08:55.720
So now I think you're getting the idea.

121
00:08:55.730 --> 00:08:59.890
We're saying only if a file ends in dot CSX.

122
00:09:00.050 --> 00:09:03.240
Only then would we want to use the CSX loader.

123
00:09:03.290 --> 00:09:03.660
Cool.

124
00:09:03.680 --> 00:09:10.350
So we have now configured Westpac to be able to understand and process CSX files.

125
00:09:10.370 --> 00:09:13.250
Let's go ahead and save this and test it out.

126
00:09:13.250 --> 00:09:19.430
So once you've saved this file go ahead and open up your command line and to refresh your memory to

127
00:09:19.430 --> 00:09:21.280
tell Westpac to begin running.

128
00:09:21.280 --> 00:09:29.550
We just type in the command and P.M. run Dev cool.

129
00:09:29.580 --> 00:09:32.640
So at this point I have a bit of good news and bad news.

130
00:09:32.700 --> 00:09:38.730
The good news is that we did not run into any errors in the command line meaning Westpac was not confused

131
00:09:38.730 --> 00:09:45.090
or upset that we imported a CSX file from within our JavaScript file and if we take a look at the bundled

132
00:09:45.090 --> 00:09:46.770
file that it generated for us.

133
00:09:47.190 --> 00:09:51.930
So within our app folder if you open up bundled the DOT J.S. don't worry.

134
00:09:51.930 --> 00:09:56.400
This is an auto generated file so I don't expect you to be able to dig through the file and make sense

135
00:09:56.400 --> 00:09:56.880
of it.

136
00:09:57.090 --> 00:10:04.830
But if you press control f or command F to search for orange right remember we added the CSX rule of

137
00:10:05.160 --> 00:10:07.120
body color should be orange.

138
00:10:07.320 --> 00:10:10.570
You can see that bundled in this file.

139
00:10:10.650 --> 00:10:15.870
So we successfully bundled CSX into this javascript bundle file.

140
00:10:15.990 --> 00:10:23.880
So that's the good news The bad news is if you load up your Web page and if you refresh we still see

141
00:10:23.880 --> 00:10:25.250
the annoying alert pop up.

142
00:10:25.260 --> 00:10:28.310
But notice that the text is not orange.

143
00:10:28.320 --> 00:10:34.800
So even though we included and bundled that CSX it's not actually being used in the browser.

144
00:10:34.860 --> 00:10:35.900
So that's the bad news.

145
00:10:35.910 --> 00:10:42.720
But I guess the second dose of good news is that that's very easy to fix if we want to actually apply

146
00:10:42.720 --> 00:10:45.990
that styling in the browser all we need to do is this.

147
00:10:45.990 --> 00:10:52.230
So back in our web pack dot config dot J.S. file within our use array.

148
00:10:52.230 --> 00:10:52.530
Right.

149
00:10:52.530 --> 00:10:56.430
So we have these square brackets and then the quote CSX loader.

150
00:10:56.430 --> 00:11:01.170
Well right before this opening quote for CSX loader let's add a comma.

151
00:11:01.170 --> 00:11:07.800
And then before the comma add another pair of quotes and type in style dash loader.

152
00:11:07.890 --> 00:11:17.340
So CSX loader lets Webb pack understand or bundle CSX files and then style loader actually applies or

153
00:11:17.340 --> 00:11:20.940
uses that CSX in the browser itself.

154
00:11:20.940 --> 00:11:26.280
So with this in place let's go ahead and save this file again and then we need to open up the command

155
00:11:26.280 --> 00:11:31.670
line and tell the old instance of Webb pack to stop running or to stop watching us.

156
00:11:32.160 --> 00:11:38.220
So press control see to quit that task and then we just want to fire up Webb pack again using the latest

157
00:11:38.220 --> 00:11:39.200
configuration.

158
00:11:39.210 --> 00:11:50.370
So just run NPM run dev and now back in the browser if I refresh so we still see that annoying alert.

159
00:11:50.370 --> 00:11:54.360
But if I scroll down to a bit of text you can see it's orange.

160
00:11:54.360 --> 00:11:54.720
Cool.

161
00:11:54.720 --> 00:12:02.530
And because our web PAC is using the watch feature if we go into our CSX file styles that CSX and maybe

162
00:12:02.530 --> 00:12:10.090
if I change this color from Orange to green and hit save that's going to trigger a brand new Web pack

163
00:12:10.120 --> 00:12:10.630
bundle.

164
00:12:11.170 --> 00:12:16.200
So we don't have to do anything if we just go back to the browser and refresh cool.

165
00:12:16.230 --> 00:12:17.800
Now the text is green.

166
00:12:18.120 --> 00:12:23.010
Now that we've confirmed that the bundled JavaScript files loading in the browser let's go get rid of

167
00:12:23.010 --> 00:12:25.320
this annoying alert message.

168
00:12:25.410 --> 00:12:30.060
So within our app dot J.S. file you can just get rid of the test alert line

169
00:12:34.040 --> 00:12:34.930
cool.

170
00:12:35.240 --> 00:12:36.620
Now that things are working.

171
00:12:36.710 --> 00:12:40.600
Let's take a moment to address why we're doing this right.

172
00:12:40.610 --> 00:12:44.540
Why are we loading CSX from within our javascript.

173
00:12:45.050 --> 00:12:49.580
Well actually before we even get into the benefits or reasons why we're doing this I want to begin by

174
00:12:49.580 --> 00:12:56.600
saying Don't worry when it comes time to actually serve our Web site to the public we will set things

175
00:12:56.600 --> 00:13:03.680
up so that our CSX lives in its own traditional separate CSX file that's included in the head of our

176
00:13:03.690 --> 00:13:04.970
HDMI.

177
00:13:05.180 --> 00:13:07.330
So we will get to that a bit later on.

178
00:13:07.370 --> 00:13:13.970
However during our development right while we're building the site there are many speed and performance

179
00:13:13.970 --> 00:13:21.600
advantages to having our CSX handled by our javascript for example in a future chapter we will set up

180
00:13:21.620 --> 00:13:29.330
Web packs development server so that when we save a change to our CSX we don't even need to refresh

181
00:13:29.360 --> 00:13:30.740
in the web browser.

182
00:13:30.740 --> 00:13:36.800
The new styles will just be applied without a refresh even on the fly.

183
00:13:36.800 --> 00:13:39.020
For now let's not worry about that.

184
00:13:39.050 --> 00:13:41.160
So we need to walk before we can run.

185
00:13:41.240 --> 00:13:45.240
For now it's OK that we need to refresh to see the latest changes.

186
00:13:45.260 --> 00:13:49.430
I just want you to see what we can look forward to in future chapters.

187
00:13:49.430 --> 00:13:56.210
The idea is that by letting web pack handle all or as many of our assets as possible we are getting

188
00:13:56.210 --> 00:13:58.400
many benefits in return.

189
00:13:58.400 --> 00:14:05.570
Anyways back to the task at hand at this point we've added basic CSF support to our Web pack setup.

190
00:14:05.570 --> 00:14:09.170
Now it's time to add post CSF support.

191
00:14:09.490 --> 00:14:15.370
So in the command line go ahead and stop the current task by pressing control C..

192
00:14:15.550 --> 00:14:15.890
OK.

193
00:14:15.890 --> 00:14:25.070
And then let's download the post CSX loader for web PAC so run this command with me npm install the

194
00:14:25.070 --> 00:14:35.030
name of the package is post CSX dash loader at the end let's include dash dash save dash Devon push

195
00:14:35.060 --> 00:14:37.390
enter OK.

196
00:14:37.410 --> 00:14:37.940
Now let's go.

197
00:14:37.940 --> 00:14:39.950
Leverage that package or loader.

198
00:14:40.020 --> 00:14:47.550
So jump back into our web pack dot config dot J.S. file and if a file ends in dot CSX we just want to

199
00:14:47.550 --> 00:14:49.750
use an additional loader.

200
00:14:49.950 --> 00:14:55.920
So at the end of this use array right after these quotes for CSX loader out a comma and we want to add

201
00:14:56.130 --> 00:14:58.100
post CSX loader.

202
00:14:58.230 --> 00:14:59.900
However it's a bit different.

203
00:14:59.940 --> 00:15:05.430
Instead of simply listing its name like we did for these two loaders with post CSX we need to give it

204
00:15:05.430 --> 00:15:07.820
a few options or plug ins.

205
00:15:07.890 --> 00:15:08.880
Let me show you what I mean.

206
00:15:08.910 --> 00:15:15.420
So instead of just a name we actually need to provide an object so curly brackets and then we need to

207
00:15:15.420 --> 00:15:16.670
give it a few options.

208
00:15:16.680 --> 00:15:18.520
First option is loader.

209
00:15:18.540 --> 00:15:20.070
So loader colon.

210
00:15:20.070 --> 00:15:21.610
And this is just quotes.

211
00:15:21.630 --> 00:15:28.500
And then the name of the loader so post CSX dash loader and then right after those quotes add a comma

212
00:15:28.770 --> 00:15:32.150
we also need another property named options.

213
00:15:32.220 --> 00:15:35.760
So options colon and then another javascript object.

214
00:15:35.790 --> 00:15:38.380
So an additional pair of curly brackets.

215
00:15:38.520 --> 00:15:45.000
And then within this object we give it a property named plugins so plug ins colon.

216
00:15:45.000 --> 00:15:49.990
And now this is where we list all of the post CSF features that we want.

217
00:15:50.010 --> 00:15:55.270
This is because out of the box post CSX doesn't really enable anything.

218
00:15:55.410 --> 00:16:01.770
It's sort of an empty canvas and then it's up to us to load in whichever post CSX plug ins we want.

219
00:16:02.340 --> 00:16:08.190
So right after plugins Coleman let's create a variable that will be an array we can name it anything

220
00:16:08.190 --> 00:16:10.140
we want but just so we're on the same page.

221
00:16:10.140 --> 00:16:16.240
Let's name it post CSX plug ins towards the top of the file.

222
00:16:16.240 --> 00:16:19.130
Let's go create a variable with this matching name.

223
00:16:19.230 --> 00:16:24.570
So I'm going to scroll up towards the top of this file maybe on line number two let's add a new line

224
00:16:24.570 --> 00:16:31.470
and let's say const post CSX plug ins should equal an array.

225
00:16:31.470 --> 00:16:38.530
So square brackets and then we just list whichever plug ins or features we want before we list any plug

226
00:16:38.530 --> 00:16:39.120
ins here.

227
00:16:39.120 --> 00:16:47.950
Let's go download the plug ins so in our command line let's run npm install and let's grab three packages.

228
00:16:47.970 --> 00:16:59.250
So the first one is post CSX dash simple dash VARs the second plug in is named post CSX dash nested

229
00:16:59.730 --> 00:17:04.080
in the third plug is simply named auto prefix fixer.

230
00:17:04.200 --> 00:17:07.320
Then at the very end let's add dash dash save dash.

231
00:17:07.330 --> 00:17:09.590
Def press enter.

232
00:17:09.710 --> 00:17:10.060
OK.

233
00:17:10.080 --> 00:17:13.360
Now let's list these packages within our array.

234
00:17:13.350 --> 00:17:21.330
So let's require in post CSX dash simple VARs after the parentheses.

235
00:17:21.330 --> 00:17:22.470
Let's add a comma.

236
00:17:22.480 --> 00:17:29.350
Let's also require in post CSX dash nested comma new line.

237
00:17:29.350 --> 00:17:32.250
Let's also require an auto prefix.

238
00:17:33.190 --> 00:17:33.480
OK.

239
00:17:33.520 --> 00:17:35.340
Now let's save this file.

240
00:17:35.470 --> 00:17:43.280
And now jump back into our styles dot CSX file and let's test out these post CSX features.

241
00:17:43.300 --> 00:17:45.030
Let's start with variables.

242
00:17:45.040 --> 00:17:50.260
Well now creating a variable in CSX is as simple as just saying dollar sign.

243
00:17:50.440 --> 00:17:51.720
And then we can make up a name.

244
00:17:51.730 --> 00:17:54.880
Let's call it main blue colon.

245
00:17:55.000 --> 00:18:00.820
And then let's say it has a value of pound to f 5 5 7 2.

246
00:18:01.550 --> 00:18:01.960
Okay.

247
00:18:01.960 --> 00:18:05.180
And now let's imagine we want to use this exact shade of blue.

248
00:18:05.710 --> 00:18:13.360
So imagine we want to select a div with a class of large hero and style any of its heading level 2 elements

249
00:18:13.420 --> 00:18:15.500
and make them have a blue color.

250
00:18:15.550 --> 00:18:22.820
Well we could write a selector like this but while we're at it let's also test out our nested CSX.

251
00:18:22.870 --> 00:18:27.140
So imagine we want to look within the data with the class of large hero.

252
00:18:27.400 --> 00:18:31.290
And then inside this we can have another selector.

253
00:18:31.360 --> 00:18:35.330
So we could say heading level to give that its own curly brackets.

254
00:18:35.410 --> 00:18:40.940
And now we could say a color should use dollar sign main blue.

255
00:18:41.050 --> 00:18:48.160
Now this code is absolutely not valid CSX and the web browser will have no idea what this means.

256
00:18:48.310 --> 00:18:55.540
But because we have an automated workflow Now Westpac will create a file that the web browser does understand.

257
00:18:55.960 --> 00:19:01.100
So let's save this file and then in the command line let's tell web pack to begin running.

258
00:19:01.120 --> 00:19:06.960
So NPM run Dev presenter OK.

259
00:19:06.990 --> 00:19:10.260
And then if we go to the Web browser and refresh.

260
00:19:10.420 --> 00:19:10.750
Cool.

261
00:19:10.750 --> 00:19:16.150
So if you scroll down a bit and find the headline that reads one trip away you can see that it is now

262
00:19:16.150 --> 00:19:17.290
blue.

263
00:19:17.290 --> 00:19:24.190
The fact that this is blue lets us know that we have successfully configured our post CSX plug ins and

264
00:19:24.190 --> 00:19:27.200
that brings this lesson to a close.

265
00:19:27.370 --> 00:19:33.880
Now in our next lesson we will finally break free from all of these hypothetical exercises and we will

266
00:19:33.880 --> 00:19:40.310
begin writing the actual CSX and HMO for the fictional travel agency Web site.

267
00:19:40.330 --> 00:19:41.500
It's gonna be a lot of fun.

268
00:19:41.500 --> 00:19:44.850
This is where the course really starts to move at a much faster pace.

269
00:19:44.860 --> 00:19:47.540
I'm looking forward to building the site out together with you.

270
00:19:47.560 --> 00:19:52.300
We've come a long way so far in the course we've learned about a lot of new technologies and tools but

271
00:19:52.300 --> 00:19:54.930
at the same time we are just now getting started.

272
00:19:54.940 --> 00:19:58.660
Let's keep trucking and I will see you in the next lesson.
