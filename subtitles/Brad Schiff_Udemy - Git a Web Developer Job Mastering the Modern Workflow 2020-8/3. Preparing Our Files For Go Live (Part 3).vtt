WEBVTT
1
00:00:02.250 --> 00:00:03.400
Hello everyone.

2
00:00:03.600 --> 00:00:07.330
In this video we're going to pick up right where we left off.

3
00:00:07.500 --> 00:00:11.280
So we have our automatically generated dist folder.

4
00:00:11.280 --> 00:00:16.930
And as of this moment it contains our javascript and our CSX at this point.

5
00:00:16.930 --> 00:00:22.830
Let's set things up so that it also copies over our HDMI all from the app folder.

6
00:00:22.830 --> 00:00:30.240
However we need to be aware of the fact that in each TMM file needs to know the names of these SS and

7
00:00:30.240 --> 00:00:32.830
JavaScript files that it wants to load.

8
00:00:32.910 --> 00:00:39.870
And remember we added these chunk hash values and there is no way for our HD PML file to be able to

9
00:00:40.110 --> 00:00:44.670
predict the future and magically know the chunk cache values.

10
00:00:44.670 --> 00:00:45.840
Let me show you what I'm getting at.

11
00:00:45.870 --> 00:00:52.950
So within our app folder if you open up indexed on HDMI all and scroll down to the very bottom well

12
00:00:52.980 --> 00:00:55.730
you'll see we have this script tag.

13
00:00:55.740 --> 00:01:02.310
This worked in the past because we knew that the file was going to be named bundled dot J Yes.

14
00:01:02.670 --> 00:01:09.600
But now that our file names are unpredictable how are we going to load the assets in our HDMI now.

15
00:01:09.840 --> 00:01:16.500
Well this might seem super unintuitive but check this out within your index dot each PML file.

16
00:01:16.500 --> 00:01:20.250
I actually want you to delete this script tag.

17
00:01:20.910 --> 00:01:22.500
Go ahead and save this file.

18
00:01:22.530 --> 00:01:31.250
Now clearly if you ran NPM run dev to preview your site you would not be seeing any javascript or CSX.

19
00:01:31.350 --> 00:01:31.550
Right.

20
00:01:31.560 --> 00:01:33.540
Because we just remove the reference to it.

21
00:01:33.960 --> 00:01:39.570
However we can use a very popular Web pack plug in to save the day.

22
00:01:39.840 --> 00:01:43.730
Right now in your command line I want you to install a package with me.

23
00:01:43.890 --> 00:01:57.000
So run npm install in the name of the package is h t M.L. dash web pack dash plug in.

24
00:01:57.000 --> 00:02:02.060
Be sure to include dash dash save Dev.

25
00:02:02.140 --> 00:02:04.370
OK now let's go leverage that plug in.

26
00:02:04.370 --> 00:02:09.430
So jump back into web pack config J.S. and up at the very top.

27
00:02:09.440 --> 00:02:19.810
Let's load in that package so I will say const HDMI all web Park plug in should equal.

28
00:02:19.810 --> 00:02:28.260
And then just require it require parentheses quotes HDMI l dash web pack dash plug.

29
00:02:29.560 --> 00:02:36.580
I forgot to mention that just in the last week this plug in has been downloaded over 4 million times.

30
00:02:36.580 --> 00:02:38.920
It's a reliable industry standard.

31
00:02:38.950 --> 00:02:45.010
Now we want to leverage this plug in for both our dev and our build tasks.

32
00:02:45.010 --> 00:02:46.080
So let's do this.

33
00:02:46.090 --> 00:02:49.360
Let's find our config variable right.

34
00:02:49.390 --> 00:02:52.200
This code is used for both dev and build.

35
00:02:52.570 --> 00:02:54.910
And maybe right after this entry line.

36
00:02:54.940 --> 00:03:02.430
So after this comma we can drop down to a new line and let's say plug ins colon.

37
00:03:02.680 --> 00:03:04.890
And we know that plug ins should be an array.

38
00:03:04.900 --> 00:03:06.340
So square brackets.

39
00:03:06.460 --> 00:03:09.180
And then at the very end comma.

40
00:03:09.250 --> 00:03:14.470
Now you might remember that we've already set the plug ins option within our if statement for the build

41
00:03:14.470 --> 00:03:15.670
task.

42
00:03:15.670 --> 00:03:16.360
That's OK.

43
00:03:16.360 --> 00:03:22.610
In just a moment we can modify the code down there to push onto this existing array instead.

44
00:03:22.660 --> 00:03:30.580
However within this shared config within this array let's just create a new instance of the HDMI plug

45
00:03:30.580 --> 00:03:30.880
in.

46
00:03:30.940 --> 00:03:41.230
So new HD CML web Park plug in parentheses inside these parentheses we give it an object to configure

47
00:03:41.230 --> 00:03:41.370
it.

48
00:03:41.410 --> 00:03:48.490
So curly brackets and we just need to give it to properties file name is the name of the file that we

49
00:03:48.490 --> 00:03:50.380
want it to generate.

50
00:03:50.380 --> 00:03:57.180
So let's say quotes and for now let's just say indexed on HDMI all after the quotes include a comma.

51
00:03:57.280 --> 00:04:01.600
We need one more property named template colon.

52
00:04:01.600 --> 00:04:07.090
And this is where we point towards the file that we wanted to use as its basis which is our index dot

53
00:04:07.120 --> 00:04:12.080
HDMI all file that contains all of our actual content and HDMI out.

54
00:04:12.100 --> 00:04:21.030
So quotes dot slash go into the app folder slash grab the file named index dot HDMI out.

55
00:04:21.400 --> 00:04:27.040
OK now we just need to go into the if statement for our build task and adjust the plug ins to be added

56
00:04:27.040 --> 00:04:28.770
on to this array.

57
00:04:28.840 --> 00:04:37.430
So scroll down we're looking for if current task equals build in towards the bottom of that we see config

58
00:04:37.430 --> 00:04:39.620
dot plug ins equals.

59
00:04:39.920 --> 00:04:44.680
Well we no longer want to completely modify or replace the value of plug ins.

60
00:04:44.750 --> 00:04:50.510
Instead we just want to add these on to that array that already exists from up above.

61
00:04:50.510 --> 00:04:53.780
So here's what I want you to do inside these square brackets.

62
00:04:53.780 --> 00:04:55.600
I want you to select everything.

63
00:04:55.760 --> 00:05:00.860
So we don't need to select and highlight the square bracket but just begin with new and then scroll

64
00:05:00.860 --> 00:05:05.890
all the way to the end of this line right before the closing square bracket.

65
00:05:05.900 --> 00:05:06.150
OK.

66
00:05:06.170 --> 00:05:12.610
Then go ahead and cut that into your clipboard you'll know that you selected and cut the right code.

67
00:05:12.630 --> 00:05:18.690
If now it just looks like this config dot plug ins equals an empty square bracket pair.

68
00:05:18.690 --> 00:05:26.550
Now we can get rid of the equal sign in the square brackets so config dot plug ins dot push.

69
00:05:26.560 --> 00:05:26.760
Right.

70
00:05:26.760 --> 00:05:32.940
We want to add on or push more items onto this array that already exists.

71
00:05:32.940 --> 00:05:37.380
So within these parentheses we can just paste in our clipboard.

72
00:05:37.380 --> 00:05:38.040
Cool.

73
00:05:38.040 --> 00:05:41.550
Let's go ahead and save this file and test it out.

74
00:05:41.550 --> 00:05:47.250
So in the command line let's say NPM run build

75
00:05:50.100 --> 00:05:50.400
OK.

76
00:05:50.440 --> 00:05:53.370
Let's go check our dist folder cool.

77
00:05:53.370 --> 00:05:56.560
We see a file named index start HDMI out.

78
00:05:56.970 --> 00:05:58.510
Now here's the moment of truth.

79
00:05:58.530 --> 00:06:05.320
Let's drag this static HDMI file on top of an open web browser to open a preview.

80
00:06:06.030 --> 00:06:07.580
So here I have an open web browser.

81
00:06:07.590 --> 00:06:08.760
Google dot com.

82
00:06:08.850 --> 00:06:12.250
And if I drag index down each team L on top of that.

83
00:06:13.240 --> 00:06:16.710
Well you see that annoying alert test message that I forgot to get rid of.

84
00:06:16.740 --> 00:06:22.890
But if we click OK things look a bit weird because we haven't copied over the images or photographs

85
00:06:23.130 --> 00:06:24.260
to the disk folder yet.

86
00:06:24.570 --> 00:06:29.540
But you'll notice that our C Ss and JavaScript are both loading perfectly right.

87
00:06:29.550 --> 00:06:35.220
So I can click on get in touch and it opens the modal if you're curious how this works.

88
00:06:35.290 --> 00:06:41.590
Well you can open this generated index dot HDL file write the one that lives in our dist folder you

89
00:06:41.590 --> 00:06:48.190
can open this in your text editor cool around line number 9 you can see that that web pack HDMI plug

90
00:06:48.190 --> 00:06:52.920
in automatically added this reference to the CSF file.

91
00:06:53.060 --> 00:06:53.310
Right.

92
00:06:53.320 --> 00:06:56.890
And Web Park has access to that chunk cash value.

93
00:06:56.980 --> 00:07:03.700
And then if we scroll down to the very bottom perfect web pack also knew the perfect chunk cash value

94
00:07:04.030 --> 00:07:08.740
of the latest copies for our main javascript and our vendor javascript.

95
00:07:08.800 --> 00:07:10.430
This is excellent.

96
00:07:10.540 --> 00:07:11.700
We can close that.

97
00:07:11.770 --> 00:07:16.710
Now clearly we still need to work on copying over the images into the disk folder.

98
00:07:16.870 --> 00:07:22.870
But before we get to that I want to address the common question of well what if we have more than one

99
00:07:22.870 --> 00:07:24.610
each tmx file.

100
00:07:24.700 --> 00:07:24.830
Right.

101
00:07:24.880 --> 00:07:28.360
What if we had a small Web site with three or five or ten pages.

102
00:07:28.870 --> 00:07:30.450
Well that's a great question.

103
00:07:30.490 --> 00:07:37.330
I would say if you have more than 10 pages you should probably be using a static site generator or something

104
00:07:37.330 --> 00:07:38.960
a bit more dynamic.

105
00:07:38.980 --> 00:07:43.650
However for less than 10 pages you probably don't need a static site generator.

106
00:07:43.780 --> 00:07:48.640
And instead we can just configure this web packed scenario to work perfectly.

107
00:07:48.640 --> 00:07:54.160
Let me show you what I would do first of all we need to have more than one each CML file to practice

108
00:07:54.160 --> 00:07:54.930
with.

109
00:07:54.940 --> 00:07:56.550
So right now I want you to go into your.
