WEBVTT
1
00:00:05.190 --> 00:00:06.090
Hello everyone.

2
00:00:06.510 --> 00:00:12.990
Welcome to part two of our two part lesson on how to write super organized CSX.

3
00:00:13.260 --> 00:00:20.460
In part one we learned about file architecture and in this lesson part two we will learn about identifying

4
00:00:20.460 --> 00:00:26.910
patterns in our design and we will also learn about a few rules and guidelines that we want to follow

5
00:00:27.000 --> 00:00:31.730
when coming up with class names and writing our CSF selectors.

6
00:00:31.740 --> 00:00:34.170
Let's cut the intro and get started.

7
00:00:34.170 --> 00:00:39.870
So here we are in part two of the lesson and let's pick up right where we left off so let's continue

8
00:00:39.870 --> 00:00:45.330
working on this large hero section now that we have this text positioned correctly.

9
00:00:45.660 --> 00:00:50.320
Let's focus on styling the text so that it looks like this.

10
00:00:50.340 --> 00:00:55.850
So let's begin with this your clarity line in the HMO.

11
00:00:55.860 --> 00:00:59.670
We see that that is a heading Level 1 element.

12
00:00:59.670 --> 00:01:04.000
So if we want to begin styling this element how would we do that.

13
00:01:04.050 --> 00:01:08.980
We would probably go into our large Hero Doc CSX file and create a new rule.

14
00:01:09.030 --> 00:01:11.580
And what would our selector look like.

15
00:01:11.580 --> 00:01:17.330
We'd probably say go into the large hero div and then target any H1 element.

16
00:01:17.340 --> 00:01:23.280
So for example let's make the text be not bold so font weight 300.

17
00:01:23.360 --> 00:01:23.660
OK.

18
00:01:23.700 --> 00:01:27.930
Let's head over to the command line and make sure that our web pack task is running.

19
00:01:27.960 --> 00:01:31.300
So just type NPM run Dev.

20
00:01:31.320 --> 00:01:35.340
Let's go back to the text editor and save this CSX file.

21
00:01:35.340 --> 00:01:43.320
And if we refresh in the browser watch this text it is no longer bold which means our selector is working

22
00:01:43.770 --> 00:01:47.060
and let's actually talk about this selector for a moment.

23
00:01:47.070 --> 00:01:54.300
So this is how myself and an entire generation of developers were taught to write CSX.

24
00:01:54.300 --> 00:02:01.000
However in recent years there has been a move away from using type and descendant selectors like this.

25
00:02:01.140 --> 00:02:06.570
And instead we've seen a move towards a more systematic way of targeting elements.

26
00:02:06.570 --> 00:02:13.190
One of the most popular systems or methodologies for coming up with selectors is named Bem.

27
00:02:13.320 --> 00:02:20.010
And in this course we are going to follow a lot of the basic Bem principles Bem is an acronym and I

28
00:02:20.010 --> 00:02:25.920
will explain what it stands for in just a second but first I want to point out that in Bem we would

29
00:02:25.920 --> 00:02:28.070
not write a selector like this.

30
00:02:28.710 --> 00:02:36.900
Instead the Bem way of doing it would be to go into the HMO and just give this element a class.

31
00:02:37.200 --> 00:02:45.480
Let's go with large hero underscore underscore title and then we would simply target the element with

32
00:02:45.480 --> 00:02:51.240
that class in our CSF large hero underscore underscore title.

33
00:02:51.240 --> 00:02:57.060
Now some of you might be squirming in your seats right now because this is going against everything

34
00:02:57.300 --> 00:03:01.670
you were originally taught about writing clean semantic HDMI.

35
00:03:01.670 --> 00:03:05.400
Well I know that's how I felt when I first learned about them.

36
00:03:05.550 --> 00:03:11.910
But the truth is that I think we were misguided in the past about what it means to write semantic HDMI

37
00:03:11.920 --> 00:03:12.810
PML.

38
00:03:12.960 --> 00:03:16.060
I will circle back to that topic later on in the lesson.

39
00:03:16.140 --> 00:03:20.550
But first you're probably wondering what these two underscores mean.

40
00:03:20.700 --> 00:03:26.180
And that's a perfect segue way into what the letters B E M stand for.

41
00:03:26.190 --> 00:03:33.780
So first of all Bem is an abstract way of thinking about our design or interface this philosophy or

42
00:03:33.780 --> 00:03:36.930
way of thinking can be broken up into three concepts.

43
00:03:36.930 --> 00:03:46.770
The first is the B in Bem which stands for block a block is an independent reusable part of our design.

44
00:03:46.860 --> 00:03:51.230
So for an example let's look at the design file that the designer sent to us.

45
00:03:51.360 --> 00:03:57.190
This large hero section that we've been working on is a block as we scroll down the design.

46
00:03:57.210 --> 00:04:03.900
I think the next best example of a block would be in the features section we see there are four features

47
00:04:03.900 --> 00:04:07.500
here here here and here.

48
00:04:07.620 --> 00:04:11.160
So I would say that this is an example of a block.

49
00:04:11.250 --> 00:04:16.210
This block is independent it can stand on its own and it can be reused.

50
00:04:16.350 --> 00:04:19.650
If we scroll down a bit further we see the testimonials area.

51
00:04:19.680 --> 00:04:27.270
There are three testimonials and I would say that this is a testimonial block and this block is reused

52
00:04:27.360 --> 00:04:30.560
an additional two times for the other two testimonials.

53
00:04:30.630 --> 00:04:32.520
So B is for block.

54
00:04:32.730 --> 00:04:35.570
Let's move on to the e in Bam.

55
00:04:35.700 --> 00:04:43.740
It stands for element an element belongs to a block it is dependent on a block which means it cannot

56
00:04:43.740 --> 00:04:47.130
be used outside of the block that it belongs to.

57
00:04:47.130 --> 00:04:54.000
So for example if we scroll back up to the top of our design within this large hero block this heading

58
00:04:54.210 --> 00:04:55.770
is an element.

59
00:04:55.770 --> 00:04:58.040
This heading is also an element.

60
00:04:58.170 --> 00:05:04.410
These headings use font styles and margins that aren't reused anywhere else in the design.

61
00:05:04.410 --> 00:05:07.340
They are unique to this large hero block.

62
00:05:07.470 --> 00:05:14.220
Perhaps a clearer example of what an element is would be down here at the bottom in the testimonials

63
00:05:14.220 --> 00:05:15.030
area.

64
00:05:15.030 --> 00:05:20.850
So this image that is cropped in a circle is horizontally centered and vertically violates.

65
00:05:20.850 --> 00:05:27.010
This box is an element that belongs to the testimonial block.

66
00:05:27.150 --> 00:05:32.950
We will never want to use this image outside the context of a testimonial.

67
00:05:32.970 --> 00:05:38.190
So conceptually we think of this image as an element that belongs to this block.

68
00:05:38.190 --> 00:05:46.860
So E is for element let's move on to the M in Bam which stands for modifier a modifier can be used on

69
00:05:46.860 --> 00:05:48.780
a block or an element.

70
00:05:49.050 --> 00:05:54.840
And we use a modifier to indicate a change to the default state of an object.

71
00:05:54.840 --> 00:06:01.080
So for example let's imagine we have a mobile menu on a Web site and by default the menu is hidden or

72
00:06:01.080 --> 00:06:02.220
closed.

73
00:06:02.220 --> 00:06:09.540
But when a user taps on the menu icon we want to use javascript to add a modifier class to the menu

74
00:06:09.540 --> 00:06:11.340
block of Dash.

75
00:06:11.340 --> 00:06:19.260
Dash is open that modifier class will modify the block from being closed or invisible to being open

76
00:06:19.350 --> 00:06:24.880
invisible when the user taps on the menu icon a second time to hide the menu.

77
00:06:24.960 --> 00:06:31.590
We will simply use javascript to remove that modifier class in the menu block will be hidden once again

78
00:06:31.770 --> 00:06:33.690
which is its default state.

79
00:06:33.690 --> 00:06:37.830
Let's look at another example of how we can use modifiers.

80
00:06:37.830 --> 00:06:43.110
So for example I'm noticing a button style used throughout our design.

81
00:06:43.110 --> 00:06:49.400
Here is one button here's another button and then down in the footer.

82
00:06:49.510 --> 00:06:50.980
Here is another button.

83
00:06:50.980 --> 00:06:57.670
So because the button is reused throughout the design conceptually let's consider it a block and let's

84
00:06:57.670 --> 00:07:04.340
say that this medium sized blue button in the header is the default state of the button block.

85
00:07:04.390 --> 00:07:11.930
So this button would simply have a class of button the button that's down in the footer could use that

86
00:07:11.930 --> 00:07:20.300
same class of button but we would add a modifier class of button dash dash Orange to get it to look

87
00:07:20.300 --> 00:07:20.860
this way.

88
00:07:21.170 --> 00:07:29.960
And this large orange button could also use a class of button but we would maybe add two modifiers one

89
00:07:29.990 --> 00:07:36.240
named button dash dash orange and another named button dash dash large.

90
00:07:36.410 --> 00:07:39.120
And that is modifiers in a nutshell.

91
00:07:39.140 --> 00:07:39.610
All right.

92
00:07:39.620 --> 00:07:43.090
So now we know what the letters in Bem stand for.

93
00:07:43.100 --> 00:07:47.990
Now let's talk about a few of the other key concepts and advantages to using them.

94
00:07:48.140 --> 00:07:55.190
All of our CSF selectors should target elements directly with classes instead of relying on generic

95
00:07:55.190 --> 00:07:59.450
type selectors descendant selectors and the cascade.

96
00:07:59.450 --> 00:08:06.770
This means that we are somewhat eliminating the C from C Ss since we are limiting the cascading and

97
00:08:06.770 --> 00:08:09.120
trickling down of styles on the page.

98
00:08:09.200 --> 00:08:15.860
We are creating a one on one relationship between a block of H PML and its C Ss.

99
00:08:15.860 --> 00:08:20.840
We don't need to worry about any parent elements trickling their styles down to our blocks and hurting

100
00:08:20.840 --> 00:08:24.470
the predictability of our blocks styles.

101
00:08:24.470 --> 00:08:30.560
This means that our blocks are independent self-contained and we are free to move them around and reuse

102
00:08:30.560 --> 00:08:32.330
them throughout the page.

103
00:08:32.330 --> 00:08:37.810
Another important concept is that blocks can be nested inside of other blocks.

104
00:08:37.820 --> 00:08:44.840
The idea is to identify patterns in our design and then create single responsibility blocks that can

105
00:08:44.840 --> 00:08:46.490
be used together.

106
00:08:46.490 --> 00:08:49.520
What does that phrase single responsibility mean.

107
00:08:49.850 --> 00:08:57.190
Well if we look at our design file really quickly if we scroll down I see two columns here.

108
00:08:57.410 --> 00:09:02.600
This text column takes up about two thirds of the width and this image takes up about one third of the

109
00:09:02.600 --> 00:09:03.220
width.

110
00:09:03.320 --> 00:09:04.470
We scroll down further.

111
00:09:04.520 --> 00:09:09.000
I see columns once again in this our features area.

112
00:09:09.020 --> 00:09:13.710
This column takes up about half the width and this column takes up about half the width.

113
00:09:13.850 --> 00:09:15.770
We scroll down further.

114
00:09:15.770 --> 00:09:16.910
Again I see columns.

115
00:09:16.910 --> 00:09:19.690
There are three columns one for each testimonial.

116
00:09:19.820 --> 00:09:24.020
So clearly columns are a pattern that we have identified in the design.

117
00:09:24.230 --> 00:09:27.890
And there is no reason to code a pattern more than once.

118
00:09:27.890 --> 00:09:33.460
So what I would do is create a block that is responsible for creating column layouts.

119
00:09:33.500 --> 00:09:39.680
I would use that block here to create three empty columns and then within each column block I would

120
00:09:39.680 --> 00:09:42.050
nest a testimonial block.

121
00:09:42.110 --> 00:09:48.620
That way the column block has the single responsibility of creating column layouts and we can reuse

122
00:09:48.620 --> 00:09:50.600
that block throughout the page.

123
00:09:50.720 --> 00:09:57.210
And the testimonial block has the single responsibility of creating the unique styling for the testimonials.

124
00:09:57.230 --> 00:09:57.710
All right.

125
00:09:57.710 --> 00:10:00.950
And let me give you one last reason to use bam.

126
00:10:01.040 --> 00:10:07.640
It is that beam makes the relationship between our H T amount and our CSX crystal clear.

127
00:10:07.640 --> 00:10:08.960
Why does that matter.

128
00:10:08.960 --> 00:10:14.270
Well if you've ever tried to update a Web site that you haven't touched in a year or if you've ever

129
00:10:14.270 --> 00:10:17.840
inherited a Web site that someone else originally built.

130
00:10:17.930 --> 00:10:24.140
If that Web site doesn't use some sort of naming methodology trying to edit the Web site CSX is like

131
00:10:24.290 --> 00:10:26.600
untangling a plate of spaghetti.

132
00:10:26.660 --> 00:10:32.450
You don't have the confidence to actually edit any of the existing CSX because you don't know where

133
00:10:32.450 --> 00:10:36.030
the styles are being used and what your changes might break.

134
00:10:36.140 --> 00:10:39.790
And if you can't edit the existing CSX What do you end up doing.

135
00:10:39.800 --> 00:10:42.270
You throw more spaghetti on top of the plate.

136
00:10:42.350 --> 00:10:42.710
Right.

137
00:10:42.740 --> 00:10:48.530
So you end up creating brand new styles and sloppily throwing them at the very bottom of a huge CSX

138
00:10:48.530 --> 00:10:49.130
file.

139
00:10:49.280 --> 00:10:51.050
And that is not organized at all.

140
00:10:51.050 --> 00:10:54.910
It is not maintainable and it is a developer's nightmare with them.

141
00:10:54.920 --> 00:10:58.910
The relationship between h t AML and CSX is clear.

142
00:10:58.910 --> 00:11:05.150
So you can come back to a Web site a year later and confidently edit the existing styles since you know

143
00:11:05.150 --> 00:11:09.520
exactly where and how those rules will affect the page.

144
00:11:09.530 --> 00:11:10.040
All right.

145
00:11:10.070 --> 00:11:12.350
So that's enough Bem theory for now.

146
00:11:12.470 --> 00:11:18.530
Let's get back to actually writing CSX but really quickly before we do I want to address the one big

147
00:11:18.530 --> 00:11:24.830
concern that you might have because you might be thinking this Bem stuff is all well and good but what

148
00:11:24.830 --> 00:11:31.760
about the semantics of our HMO out is adding all of these extra classes with presentational names making

149
00:11:31.760 --> 00:11:34.180
our HDMI less semantic.

150
00:11:34.190 --> 00:11:35.450
That's a fair question.

151
00:11:35.480 --> 00:11:36.970
The answer is no.

152
00:11:36.980 --> 00:11:42.410
Now instead of me arguing and explaining why that's the case I will just go ahead and quote someone

153
00:11:42.440 --> 00:11:48.500
who is 100 times smarter than I am and a million times more of an authority in the web development community

154
00:11:48.500 --> 00:11:49.350
than I am.

155
00:11:49.370 --> 00:11:51.170
His name is Nicholas Gallagher.

156
00:11:51.170 --> 00:11:54.500
He is the creator of normalized CSX.

157
00:11:54.500 --> 00:11:58.230
He's very well-known and super respected in the web development community.

158
00:11:58.340 --> 00:12:02.750
And he has an excellent blog post on each t semantics.

159
00:12:02.780 --> 00:12:04.670
And here are a few quotes for you.

160
00:12:04.760 --> 00:12:10.320
So Nicholas says that class names cannot be on semantic.

161
00:12:10.370 --> 00:12:18.470
Nicholas says that content layer semantics are already served by each TMF elements plus names impart

162
00:12:18.500 --> 00:12:24.140
little or no useful semantic information to machines or human visitors.

163
00:12:24.140 --> 00:12:29.480
The primary purpose of a class name is to be a hook for C Ss and JavaScript.

164
00:12:29.510 --> 00:12:34.860
Class names should communicate useful information to developers.

165
00:12:34.940 --> 00:12:35.440
All right.

166
00:12:35.450 --> 00:12:36.420
So there you have it.

167
00:12:36.440 --> 00:12:41.990
If adding extra presentational classes doesn't bother Nicolas GALLAGHER It definitely shouldn't bother

168
00:12:41.990 --> 00:12:43.920
us when you have a free moment.

169
00:12:43.940 --> 00:12:46.970
I recommend checking out the full blog post by Nicholas.

170
00:12:46.970 --> 00:12:47.910
It's a great read.

171
00:12:48.020 --> 00:12:53.290
But for now let's get back to actually working on the travel agency Web site.

172
00:12:53.300 --> 00:12:55.520
So here is what we have so far.

173
00:12:55.520 --> 00:13:01.760
We want this your clarity line to be blue and large to match the design.

174
00:13:01.760 --> 00:13:11.180
So over in our CSX file within this title rule let's apply the hexadecimal code for the main blue color

175
00:13:11.590 --> 00:13:14.160
that we will be using throughout the design.

176
00:13:14.210 --> 00:13:20.510
And let's also bump up the font size to four point a ram if you've never seen REM before.

177
00:13:20.510 --> 00:13:27.950
Don't worry we will cover how Ram works in detail shortly but for now let's go ahead and save this and

178
00:13:27.950 --> 00:13:30.850
refresh in the browser looks good.

179
00:13:31.220 --> 00:13:34.910
Let's go ahead and begin styling this one trip away heading.

180
00:13:34.910 --> 00:13:42.050
So first let's jump over to our H T demo here is that element and let's give it a class so that we can

181
00:13:42.050 --> 00:13:44.460
target it the BAM way.

182
00:13:44.580 --> 00:13:46.250
Let's go with large hero.

183
00:13:46.250 --> 00:13:48.440
That's the block that it belongs to.

184
00:13:48.440 --> 00:13:54.360
And this is an element that belongs to the block so to indicate that it is an element we say under or

185
00:13:54.390 --> 00:13:56.740
underscore and then the name of the element.

186
00:13:56.820 --> 00:14:06.360
Let's go with subtitle and over in our CSX we can create a new rule large hero underscore underscore

187
00:14:06.360 --> 00:14:14.370
subtitle we can actually just copy and paste these three declarations and just change the font size

188
00:14:14.370 --> 00:14:16.380
to two point nine REM.

189
00:14:16.860 --> 00:14:19.830
Go ahead and save that and refresh in the browser.

190
00:14:19.830 --> 00:14:20.970
Looks good.

191
00:14:20.970 --> 00:14:25.050
There might be a bit too much margin or spacing between the two headings.

192
00:14:25.050 --> 00:14:31.830
We can adjust that in just a moment but first before we go any further I want to show you a neat post

193
00:14:31.860 --> 00:14:34.530
CSX nesting trick.

194
00:14:34.530 --> 00:14:42.660
So normally when we write post CSX or SAS we like to make use of the nesting feature to conceptually

195
00:14:42.660 --> 00:14:45.240
group code that is related to each other.

196
00:14:45.240 --> 00:14:53.340
So for example here is the main rule for the large hero block and these three rules are selecting elements

197
00:14:53.370 --> 00:14:56.130
that belong to this block.

198
00:14:56.130 --> 00:15:02.790
So conceptually it would make sense to take one of these for example and try to nest it within this

199
00:15:02.790 --> 00:15:05.140
large hero rule.

200
00:15:05.160 --> 00:15:12.270
Now if I save this and we take a look at these CSX file that post CSX generates for us we see that the

201
00:15:12.270 --> 00:15:16.610
nesting feature gets compiled into a descendant selector.

202
00:15:16.650 --> 00:15:18.860
And while this will work in the browser.

203
00:15:18.890 --> 00:15:26.400
So if I refresh the positioning stays intact descendant selectors go against the beam philosophy.

204
00:15:26.400 --> 00:15:33.150
We want to avoid descendant selectors whenever we can because they often create specificity wars if

205
00:15:33.150 --> 00:15:37.050
we instead select elements with direct class selectors.

206
00:15:37.050 --> 00:15:42.190
We can maintain a very flat C Ss architecture or a flat specificity tree.

207
00:15:42.240 --> 00:15:43.980
We will talk about why that's important.

208
00:15:44.010 --> 00:15:45.110
Later on in the course.

209
00:15:45.120 --> 00:15:50.000
But for now the question becomes how can we have the best of both worlds.

210
00:15:50.040 --> 00:15:57.390
How can we write nested CSX to help us stay organized conceptually without having Web pack compile things

211
00:15:57.390 --> 00:15:59.550
down to a descendant selector.

212
00:15:59.550 --> 00:16:01.480
Well check out this little trick.

213
00:16:01.500 --> 00:16:08.840
So back in our large hero file within this nested rule let's change its selector to simply and ampersand

214
00:16:08.850 --> 00:16:11.080
is go ahead and hit save.

215
00:16:11.100 --> 00:16:17.580
Now if we check out the CSF that gets generated for us we see that the ampersand was replaced with the

216
00:16:17.580 --> 00:16:19.650
route rules selector.

217
00:16:19.650 --> 00:16:29.550
So for example if we say Ampersand Hello World and hit save that gets compiled into the route selector

218
00:16:30.120 --> 00:16:36.990
and then it just adds on whatever we type hello world so we can adapt this behavior to fit the Bem philosophy

219
00:16:37.020 --> 00:16:38.160
perfectly.

220
00:16:38.160 --> 00:16:44.130
So we know that just the ampersand will give us large hero and then we can say underscore underscore

221
00:16:44.400 --> 00:16:51.320
text content go ahead and hit save that will generate the exact bam class name.

222
00:16:51.350 --> 00:16:59.830
So if we refresh in the browser things still look good we are following the Bem philosophy and we now

223
00:16:59.830 --> 00:17:02.600
get to use nested CSX.

224
00:17:02.600 --> 00:17:05.100
So we are having our cake and eating it too.

225
00:17:05.110 --> 00:17:14.070
Let's go ahead and move these other two rules into the main block rule so let's copy this pasted into

226
00:17:14.070 --> 00:17:20.340
this block rule and replace dot large hero with an ampersand.

227
00:17:20.340 --> 00:17:25.220
Let's do the same thing for this subtitle rule pasted in here.

228
00:17:25.260 --> 00:17:29.900
Remove the DOT large hero Ampersand Excellent.

229
00:17:30.120 --> 00:17:38.490
So we can already see how organized our CSX is becoming our main CSX file imports in different single

230
00:17:38.490 --> 00:17:47.130
responsibility CSX files and within our CSX modules folder we will have a new file for each block of

231
00:17:47.130 --> 00:17:48.090
the design.

232
00:17:48.090 --> 00:17:55.650
So within this module or block file we have our base block rule and then we can nest all of the Ben

233
00:17:55.710 --> 00:18:02.370
elements within that one rule and that will bring this lesson to a close now that we speak the same

234
00:18:02.370 --> 00:18:07.630
beam language and are familiar with the basic beam syntax rules.

235
00:18:07.770 --> 00:18:11.850
We can begin making a ton of progress in our next lesson.

236
00:18:11.850 --> 00:18:18.420
We will finish the styling for the large hero block and we will also begin and complete the styling

237
00:18:18.420 --> 00:18:20.370
for the button block.

238
00:18:20.460 --> 00:18:21.740
It's gonna be a lot of fun.

239
00:18:21.750 --> 00:18:27.210
There won't be as much theory weighing us down and I will see you in the next lesson.
