WEBVTT
1
00:00:05.630 --> 00:00:10.510
Hello everyone in this lesson we will continue to learn about it.

2
00:00:10.850 --> 00:00:13.020
So we have two main goals in this lesson.

3
00:00:13.100 --> 00:00:17.230
Number one we want to grow our get vocabulary.

4
00:00:17.270 --> 00:00:22.470
This just means we will learn about key terms and phrases that are used quite often and good.

5
00:00:22.730 --> 00:00:26.970
And our other goal is to simply see get in action.

6
00:00:27.170 --> 00:00:33.010
So I will share my screen and I will walk through a real world example of using it.

7
00:00:33.080 --> 00:00:33.560
All right.

8
00:00:33.560 --> 00:00:36.570
So let's get started here on my desktop.

9
00:00:36.590 --> 00:00:40.000
I have a folder named most advanced site.

10
00:00:40.220 --> 00:00:47.380
It's a bit of a joke name all that it contains is a single HMO file and CSSA folder with one CSSA file.

11
00:00:47.630 --> 00:00:51.020
Ok so here's what that looks like in a web browser.

12
00:00:51.410 --> 00:00:59.240
And let's imagine that the CEO of this amazing company and Web site has asked us to remove this line

13
00:00:59.240 --> 00:01:01.080
of text that says single page.

14
00:01:01.160 --> 00:01:09.290
And to make this header orange so in our text editor we would simply open up the HMO file it would delete

15
00:01:09.290 --> 00:01:13.400
that line of code that says single page in the CSSA file.

16
00:01:13.400 --> 00:01:19.750
Maybe we'd add a rule that says target the H-1 color orange save it.

17
00:01:19.790 --> 00:01:21.490
Refresh it.

18
00:01:21.510 --> 00:01:23.760
All right so this is nothing new.

19
00:01:23.760 --> 00:01:25.370
This is not exciting.

20
00:01:25.590 --> 00:01:29.930
What we want to see is how it comes into the equation.

21
00:01:29.970 --> 00:01:34.020
We know that get can track changes made to our project files.

22
00:01:34.020 --> 00:01:41.430
So how do we make sure that the changes we just made get saved into gets history to answer that we're

23
00:01:41.430 --> 00:01:43.850
going to take a quick vocab a time out.

24
00:01:44.010 --> 00:01:52.320
OK so first off and get we don't call something a project we call it a repository or a repo.

25
00:01:52.560 --> 00:01:58.530
A repository is where it saves all of the data all of the history all of the changes that it tracks

26
00:01:58.740 --> 00:02:00.540
for a particular project.

27
00:02:00.840 --> 00:02:01.340
OK.

28
00:02:01.470 --> 00:02:10.290
Our next term is the working directory the working directory is simply the folder location on your computer

29
00:02:10.740 --> 00:02:12.660
where your project lives.

30
00:02:12.660 --> 00:02:17.290
So in this case we had a folder on the desktop named most advanced site.

31
00:02:17.340 --> 00:02:21.840
This is the working directory for this repository.

32
00:02:21.870 --> 00:02:29.060
So good job for this repo is to track any changes we make to any of the files within this folder.

33
00:02:29.310 --> 00:02:29.770
OK.

34
00:02:29.850 --> 00:02:33.280
So our next term is commit.

35
00:02:33.540 --> 00:02:34.690
What does a commit.

36
00:02:34.920 --> 00:02:44.940
Well get doesn't save or store changes we make into its history until we actively commit those changes.

37
00:02:44.970 --> 00:02:48.390
You can think of a commit as a secondary save.

38
00:02:48.390 --> 00:02:48.740
Right.

39
00:02:48.810 --> 00:02:52.200
So in our text editor when we edit a file we save it.

40
00:02:52.200 --> 00:02:54.330
We hit command s or control.

41
00:02:54.340 --> 00:03:00.540
So we go to File Save and that saves the files to our hard drive like normal but we get nothing gets

42
00:03:00.540 --> 00:03:01.270
saved.

43
00:03:01.820 --> 00:03:05.880
History database until we make a commit.

44
00:03:06.000 --> 00:03:09.050
Now we will commit our changes in just a moment.

45
00:03:09.060 --> 00:03:12.740
But first there's one last term we need to learn about.

46
00:03:12.990 --> 00:03:19.410
And that term is staging in good before we are allowed to commit changes.

47
00:03:19.410 --> 00:03:23.070
We first have to stage our changes.

48
00:03:23.100 --> 00:03:24.360
So what does that mean.

49
00:03:24.420 --> 00:03:29.100
Well I like to think of real estate sometimes before you can sell a home.

50
00:03:29.190 --> 00:03:36.710
You first have to stage the home staging just means getting something ready or preparing something now

51
00:03:36.760 --> 00:03:42.800
and get staging is our chance to have fine grained control on what we are committing.

52
00:03:42.960 --> 00:03:43.860
Here's an example.

53
00:03:43.890 --> 00:03:50.930
So let's say we are working on a larger project and we have made edits to 12 different files.

54
00:03:51.000 --> 00:03:58.230
Maybe we were experimenting and trying new things with code but we only want to commit 4 of those files

55
00:03:58.350 --> 00:04:01.980
into gets history maybe in the other eight files.

56
00:04:01.980 --> 00:04:06.540
We made mistakes or we realized that those files weren't even necessary.

57
00:04:06.540 --> 00:04:11.960
Whatever the case the point is is that we don't we just want to push every change we've made into a

58
00:04:11.970 --> 00:04:12.660
commit.

59
00:04:12.810 --> 00:04:16.000
So staging is our chance to say you know what.

60
00:04:16.200 --> 00:04:17.120
I don't want all of these.

61
00:04:17.130 --> 00:04:24.430
I only want this file this file this file and this file those get moved into the staging area.

62
00:04:24.450 --> 00:04:26.730
I take a second to review what I've staged.

63
00:04:26.760 --> 00:04:31.120
I'm happy with it so I commit those staged files.

64
00:04:31.410 --> 00:04:34.790
Ok so now we've covered all of the terms that we needed to learn.

65
00:04:34.920 --> 00:04:40.370
Let's get back to sharing my screen and actually committing the changes we made to this page.

66
00:04:40.380 --> 00:04:46.710
All right so in order to tell good which files I want to stage I'm going to need to do something that

67
00:04:46.710 --> 00:04:49.140
might seem a bit scary at first.

68
00:04:50.730 --> 00:04:52.900
I'm going to open my terminal.

69
00:04:53.190 --> 00:04:56.190
Also known as the command line.

70
00:04:56.490 --> 00:05:02.790
Every computer whether you're running Windows or Mac or Linux has a command line the command line is

71
00:05:02.790 --> 00:05:07.500
simply a place where we can type commands.

72
00:05:07.500 --> 00:05:11.960
Now some of you are thinking is this really how we need to interact with get.

73
00:05:12.000 --> 00:05:15.770
Isn't there an app or a program that would make interacting with get easier.

74
00:05:16.020 --> 00:05:19.730
Well this lesson is neither the time nor place for that conversation.

75
00:05:19.980 --> 00:05:26.700
In our next lesson I will try to convince you why using get from the command line is in your very very

76
00:05:26.700 --> 00:05:28.140
very best interest.

77
00:05:28.260 --> 00:05:34.280
Also in this lesson I don't want you to worry about trying to follow along step by step on your computer.

78
00:05:34.380 --> 00:05:40.290
And I don't want you to worry about trying to memorize each individual little step in our next lesson.

79
00:05:40.290 --> 00:05:42.820
I will help you install get on your computer.

80
00:05:42.930 --> 00:05:48.480
I will help you find a command line on your computer and we can walk through all of these technical

81
00:05:48.480 --> 00:05:51.150
steps at a much slower pace together.

82
00:05:51.360 --> 00:05:56.910
But in this lesson I want you to sit back a bit relax and just try to observe the general flow of what's

83
00:05:56.910 --> 00:05:57.740
going on.

84
00:05:57.750 --> 00:05:59.720
Don't worry about memorizing everything.

85
00:06:00.060 --> 00:06:07.470
All right so first I get to give me a recap of what I've changed lately so if I type good and then a

86
00:06:07.470 --> 00:06:14.890
new word status gets status get lets me know that these are the two files that have been modified.

87
00:06:14.910 --> 00:06:18.430
OK so I know that I want to stage both of those files.

88
00:06:18.660 --> 00:06:24.650
Ok so instead of having to pick which files I want to stage I can just say get ADD.

89
00:06:24.750 --> 00:06:28.660
I want to add to the staging area get add hyphen a.

90
00:06:28.680 --> 00:06:32.190
This will add all changes to the staging area.

91
00:06:32.340 --> 00:06:36.100
So now if I run get status again get tells us that.

92
00:06:36.130 --> 00:06:39.630
OK here are your changes that are ready to be committed.

93
00:06:39.660 --> 00:06:43.020
These are the files that I had in mind so this staging area looks good to me.

94
00:06:43.010 --> 00:06:44.120
I'm ready to commit it.

95
00:06:44.250 --> 00:06:50.270
So I just typed get commit and it's always a good idea to include a message with your commit.

96
00:06:50.310 --> 00:06:59.670
So I'll type HIF and am in a bit of a quote and I will say I made the header orange and removed a line

97
00:06:59.670 --> 00:07:00.620
of text.

98
00:07:01.830 --> 00:07:06.230
And we've successfully committed those changes in its history.

99
00:07:06.240 --> 00:07:12.510
The reason this is so nice is now even if in the middle of the night our cat sneaks onto our laptop

100
00:07:12.810 --> 00:07:15.180
and deletes all of our code and says ha ha ha.

101
00:07:15.180 --> 00:07:23.440
Cats rule and they erase our CSSA file and just say purring and sitting in the sun.

102
00:07:23.800 --> 00:07:27.970
OK and we refresh and our hard work is gone.

103
00:07:27.990 --> 00:07:32.460
All we need to do is come into our command line and type.

104
00:07:32.550 --> 00:07:33.400
Check out

105
00:07:37.120 --> 00:07:42.680
our files are right back to the state that they were in when we made our last commit.

106
00:07:43.020 --> 00:07:49.680
And even if your cat is especially evil and delete your files outright in the middle of night moves

107
00:07:49.680 --> 00:07:56.460
them to the trash and your cat is even intelligent enough to empty your trash and even close out your

108
00:07:56.460 --> 00:07:57.590
text editor.

109
00:08:00.910 --> 00:08:02.930
Get has still got us covered.

110
00:08:03.040 --> 00:08:06.200
So we just go over to the command line.

111
00:08:06.350 --> 00:08:11.360
Check out the files are restored.

112
00:08:11.830 --> 00:08:20.350
OK so now we know that the files in our repository are cat proof but are they disaster proof meaning

113
00:08:20.560 --> 00:08:26.260
if we accidentally throw our laptop into a pool of water or off the side of a cliff would we be able

114
00:08:26.260 --> 00:08:28.330
to still access the files.

115
00:08:28.600 --> 00:08:30.410
Let's answer that question right now.

116
00:08:30.430 --> 00:08:35.100
In the final section of this lesson titled push and pull.

117
00:08:35.410 --> 00:08:36.810
OK so good.

118
00:08:36.850 --> 00:08:43.000
Stores all of its history data in a hidden folder in the root of your get repository.

119
00:08:43.120 --> 00:08:49.880
So for example in the project that we've been working on this lesson is most advanced site folder get

120
00:08:49.970 --> 00:08:54.450
actually has a hidden system folder that we can't see right now.

121
00:08:54.650 --> 00:09:01.410
And in that folder it stores all of the commits all of the changes all of the history for our repo gets

122
00:09:01.460 --> 00:09:06.320
stores all of this locally meaning on your computer's hard drive.

123
00:09:06.320 --> 00:09:09.920
Now if all of this data is only on your hard drive that means a few things.

124
00:09:09.920 --> 00:09:15.030
Number one if your computer blows up your repository is completely lost.

125
00:09:15.290 --> 00:09:21.110
And number two collaborating with a team of others is going to be pretty difficult considering only

126
00:09:21.110 --> 00:09:23.190
you have access to your computer.

127
00:09:23.240 --> 00:09:30.970
Now we can solve both of these issues by hosting our get repository on a server somewhere.

128
00:09:30.980 --> 00:09:37.880
This is exactly what the popular service name to get hub offers there's a good chance you've heard of

129
00:09:37.880 --> 00:09:44.980
get her before and really quickly I want to point out that good does not equal get hub get hub.

130
00:09:45.020 --> 00:09:51.440
It's just one of many many many services that can host your repositories get hub just happens to be

131
00:09:51.440 --> 00:09:56.450
the most popular service and it's also the one that we will be using throughout this course.

132
00:09:56.450 --> 00:10:01.330
Let's take our first Super quick look at Get hub right now.

133
00:10:01.400 --> 00:10:04.930
So in a web browser I'm just going to go to get club dot com.

134
00:10:04.940 --> 00:10:09.730
And then from there visit the particular repository or project that I want to work on.

135
00:10:09.860 --> 00:10:12.080
So here is the super advanced web site.

136
00:10:12.070 --> 00:10:15.700
You'll remember that name from the one we were working on earlier.

137
00:10:15.860 --> 00:10:20.980
So here's the good of overview page for this repository you can see here are the files here in the index

138
00:10:20.980 --> 00:10:26.160
that each TNL file that we edited earlier can even preview the code in the browser.

139
00:10:26.420 --> 00:10:33.290
But if we go back to the overview page and click on commits you can see here are all of the commits

140
00:10:33.500 --> 00:10:39.290
in this project's history and you will notice that the commit we made earlier in this lesson where we

141
00:10:39.290 --> 00:10:44.460
made the text orange and removed a line that's not showing up here in this list of commits.

142
00:10:44.540 --> 00:10:48.890
And that's because we committed that to our local copy of the repository.

143
00:10:48.950 --> 00:10:53.030
But now we need to take what's on our computers hard drive.

144
00:10:53.130 --> 00:10:57.870
We need to take that get repository and push it up to the server.

145
00:10:58.100 --> 00:11:04.610
So I will jump back over to my command line and I'll just type get push origin master again don't worry

146
00:11:04.610 --> 00:11:08.480
about what I'm typing we will learn about this in the next lesson.

147
00:11:08.540 --> 00:11:18.050
But for now I typed that in and if we go back to get hub and refresh this page we see here is the commit

148
00:11:18.050 --> 00:11:24.120
that we worked on earlier and if I click it we can see the details get hub even tells us you change

149
00:11:24.130 --> 00:11:29.780
two files and if we scroll down it even highlights in green the lines of code that we added and it highlights

150
00:11:29.780 --> 00:11:31.970
in red the line of code that we removed.

151
00:11:32.270 --> 00:11:36.830
Now the only thing that I want you to absolutely remember from the last minute is that what we just

152
00:11:36.830 --> 00:11:39.230
did is called a push.

153
00:11:39.230 --> 00:11:44.390
We took the repository that was on our hard drive and we pushed it up to the server.

154
00:11:44.390 --> 00:11:47.860
So now the server is up today and has our latest changes.

155
00:11:48.110 --> 00:11:49.990
OK so that's a push.

156
00:11:50.120 --> 00:11:51.690
What is a poll.

157
00:11:51.920 --> 00:11:59.450
Well let's imagine that we go on vacation for a week and while we're gone our coworker makes a few updates

158
00:11:59.450 --> 00:12:00.860
to the Web site's code.

159
00:12:01.040 --> 00:12:08.000
So a week later we get back from our vacation we go to get Herb we click on commits and we see that

160
00:12:08.000 --> 00:12:13.760
there are two new comments from our coworker named John Doe we can click on each commit and see what

161
00:12:13.760 --> 00:12:14.290
he did.

162
00:12:14.330 --> 00:12:21.270
So in this commit he changed the heading to be about dogs and he changed all of the bullet points to

163
00:12:21.270 --> 00:12:22.480
be about dogs.

164
00:12:22.740 --> 00:12:29.390
And in this other commit it looks like he just swapped out a few new colors.

165
00:12:29.390 --> 00:12:35.210
Now imagine that our boss asks us to remove the line of text about being very loyal.

166
00:12:35.450 --> 00:12:41.000
Well the files on our computer for the web site don't even contain the word loyal because while we were

167
00:12:41.000 --> 00:12:46.620
on vacation our files don't automatically get updated from the server.

168
00:12:46.640 --> 00:12:54.260
So what we need to do is pull in the latest changes from the server into our local repository so that

169
00:12:54.260 --> 00:12:57.180
we are working with the most updated files.

170
00:12:57.590 --> 00:13:02.750
So we head to the command line and I'm going to pull the keyword here is pull Don't worry about any

171
00:13:02.750 --> 00:13:07.130
of the other syntax for now but I'm just pulling in the latest changes from the server.

172
00:13:07.460 --> 00:13:09.620
We can see that the poll was successful.

173
00:13:09.620 --> 00:13:16.460
So if I go back to my web browser of my local copy of the site and I refresh we see the color changes

174
00:13:16.490 --> 00:13:21.120
that our coworker made and we also see this line of text that says is very loyal.

175
00:13:21.410 --> 00:13:23.540
So our boss wants us to remove that.

176
00:13:23.540 --> 00:13:29.110
So in our text editor he's going to delete that line save it.

177
00:13:29.300 --> 00:13:30.190
That looks good.

178
00:13:30.200 --> 00:13:32.820
So now I want to stage that change.

179
00:13:33.020 --> 00:13:35.370
So let's do a status.

180
00:13:36.140 --> 00:13:38.060
Yep that's the only file that I want to add.

181
00:13:38.060 --> 00:13:41.630
I'm going to add it to the staging area.

182
00:13:42.470 --> 00:13:43.230
That looks good.

183
00:13:43.250 --> 00:13:54.920
We want to commit that get commit our message will be remove line about being loyal and then now that

184
00:13:54.920 --> 00:13:58.610
that's committed Remember we want to push that to the server.

185
00:13:58.700 --> 00:14:05.150
So get push or master we will review the syntax in the next lesson so don't worry about that but we're

186
00:14:05.150 --> 00:14:08.780
pushing it.

187
00:14:08.890 --> 00:14:16.140
K now if we go back to get click on commits Here's the change that we just made.

188
00:14:16.270 --> 00:14:21.180
And that wraps up the basic get work flow that you would use on a daily basis.

189
00:14:21.400 --> 00:14:25.990
Let's review what we learned in this lesson we learned what a repository is.

190
00:14:26.050 --> 00:14:30.480
We learned that nothing gets saved into gets history until we commit.

191
00:14:30.610 --> 00:14:36.910
And we learned that before we can commit we have to stage our changes or stage our files and we also

192
00:14:36.910 --> 00:14:41.440
learned that working with a server involves pushing and pulling.

193
00:14:41.800 --> 00:14:47.200
So we learned quite a bit now in our next lesson you will begin to get your hands dirty.

194
00:14:47.230 --> 00:14:53.390
So I will help you install it on your computer and we will work on command line basics.

195
00:14:53.410 --> 00:14:57.400
This is where things start to get fun and I will see you in the next lesson.
