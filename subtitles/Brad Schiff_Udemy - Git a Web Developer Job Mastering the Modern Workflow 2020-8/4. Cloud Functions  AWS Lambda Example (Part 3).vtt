WEBVTT
1
00:00:02.610 --> 00:00:03.760
Hello everyone.

2
00:00:03.940 --> 00:00:10.540
In this video we are going to complete our client area feature so down at the very bottom of our Web

3
00:00:10.540 --> 00:00:10.970
site.

4
00:00:10.990 --> 00:00:17.530
We're going to add the area where visitors can type in the secret password to see the secret content.

5
00:00:17.530 --> 00:00:18.850
Let's get started.

6
00:00:18.850 --> 00:00:26.010
So if you're not already running your web backed task Be sure to run NPM run Dev.

7
00:00:26.080 --> 00:00:32.740
All right let's begin by creating a javascript file that will insert the necessary each CML down at

8
00:00:32.740 --> 00:00:34.490
the bottom of our page.

9
00:00:34.600 --> 00:00:43.450
So within app Assets Scripts and then in the modules folder let's create a new file.

10
00:00:44.190 --> 00:00:47.850
The name could be anything but just so you and I are on the same page.

11
00:00:47.860 --> 00:00:48.860
Let's name it.

12
00:00:49.120 --> 00:00:56.320
Client area dot J.S. inside this file let's start a class.

13
00:00:56.350 --> 00:00:57.070
Let's name it.

14
00:00:57.130 --> 00:01:04.760
Client area curly brackets down below that let's export that class from this file.

15
00:01:04.970 --> 00:01:08.920
So export default client area.

16
00:01:10.270 --> 00:01:11.620
Let's give this a save.

17
00:01:11.680 --> 00:01:17.000
And now before we forget let's go import this file within our main JavaScript file.

18
00:01:17.260 --> 00:01:30.340
So within our app dot J.S. towards the top your let's import it import client area from quotes dot slash

19
00:01:30.340 --> 00:01:33.730
modules slash client area.

20
00:01:34.560 --> 00:01:34.900
Okay.

21
00:01:34.900 --> 00:01:40.390
And then let's just be sure to create a new instance of new client area.

22
00:01:40.420 --> 00:01:40.710
Cool.

23
00:01:40.720 --> 00:01:43.900
Let's give that a save and then jump back in the client area.

24
00:01:43.910 --> 00:01:52.200
J.S. within our class let's create a constructor parentheses curly brackets.

25
00:01:52.300 --> 00:01:52.640
Okay.

26
00:01:52.660 --> 00:01:58.450
Inside the constructor let's begin by calling a method that we will name inject HDMI out.

27
00:01:58.480 --> 00:02:03.730
So this dot inject HDMI all parentheses to call it.

28
00:02:03.730 --> 00:02:08.050
Now below the constructor let's create a method with that matching name.

29
00:02:08.110 --> 00:02:15.970
Inject HDMI all parentheses curly brackets and let's just insert a bit of H T.M. out the very bottom

30
00:02:15.970 --> 00:02:28.570
of the page so document dot body dot insert adjacent H PML parentheses to call that the first argument

31
00:02:28.600 --> 00:02:31.920
is before and comma.

32
00:02:32.080 --> 00:02:38.650
And the second argument will be to back takes in between these two we are free to include HDMI out so

33
00:02:38.650 --> 00:02:40.860
you can even dropdown in between them.

34
00:02:41.260 --> 00:02:41.630
Okay.

35
00:02:41.650 --> 00:02:47.110
Now instead of spending a bunch of time typing out the HDMI all at this point I don't feel like that

36
00:02:47.110 --> 00:02:49.060
would be very educational.

37
00:02:49.060 --> 00:02:55.540
So instead if you pause this video and look in the associated resources for this lesson you'll see a

38
00:02:55.540 --> 00:02:57.060
file that you can download.

39
00:02:57.610 --> 00:03:03.610
So it should say reference HDMI L or example HDMI or copy and paste HDMI out.

40
00:03:04.120 --> 00:03:09.130
So again go ahead and take a moment to copy that into your clipboard and then within these back ticks

41
00:03:09.290 --> 00:03:12.360
just go ahead and paste OK.

42
00:03:12.390 --> 00:03:18.300
Let's give this a save and then if we jump back over to the web browser at first it looks like nothing

43
00:03:18.300 --> 00:03:23.160
changed but if I scroll down there we see the new content.

44
00:03:23.160 --> 00:03:28.890
Now before we write the javascript to make this form talk with our cloud function let's first write

45
00:03:28.890 --> 00:03:33.000
a bit of CSX to fix this positioning and sizing.

46
00:03:33.000 --> 00:03:43.970
So do this with me back in app assets styles let's create a new file in the modules folder let's name

47
00:03:43.970 --> 00:03:51.440
it underscore client dash area dot CSX.

48
00:03:51.440 --> 00:03:55.360
Before we forget let's include this file within our main style sheet.

49
00:03:55.390 --> 00:03:59.170
So in styles dot CSX down at the bottom.

50
00:03:59.240 --> 00:04:05.870
Import modules underscore client area semicolon.

51
00:04:06.380 --> 00:04:06.920
Save that.

52
00:04:06.920 --> 00:04:09.620
Let's jump back into client area CSX.

53
00:04:09.620 --> 00:04:18.550
Let's set up our baseline rule or selector so Doc client dash area code in the brackets.

54
00:04:18.710 --> 00:04:23.570
Let's begin by giving it a bit of padding 30 pixels.

55
00:04:23.570 --> 00:04:26.540
Then let's create a rule inside this rule.

56
00:04:26.850 --> 00:04:32.360
So Ampersand underscore underscore form curly brackets.

57
00:04:32.360 --> 00:04:37.170
Let's tell that to use flex box display flex.

58
00:04:37.370 --> 00:04:43.550
After that rule but still within our overall rule it's again create a new sub rule so Ampersand underscore

59
00:04:43.580 --> 00:04:45.800
underscore input.

60
00:04:46.580 --> 00:04:50.740
Curly brackets we want that to take up all of the available extra space.

61
00:04:50.740 --> 00:04:57.620
So just tell it to flex with the value of one and then one more rule Ampersand underscore underscore.

62
00:04:57.650 --> 00:05:02.750
Error curly brackets give that a color of red.

63
00:05:02.750 --> 00:05:03.980
Let's give that a save.

64
00:05:03.990 --> 00:05:05.730
And back in the browser.

65
00:05:05.780 --> 00:05:06.130
Cool.

66
00:05:06.200 --> 00:05:11.380
I think this looks better at this point let's switch our focus back to JavaScript.

67
00:05:11.630 --> 00:05:17.930
Now before we write JavaScript to communicate with our cloud function we first need to capture the event

68
00:05:18.200 --> 00:05:20.620
of this form being submitted.

69
00:05:20.750 --> 00:05:28.580
So do this with me back in our client area dot J S file within our constructor let's select a few elements

70
00:05:28.580 --> 00:05:29.610
from the dom.

71
00:05:30.560 --> 00:05:31.990
So let's create a few properties.

72
00:05:32.000 --> 00:05:35.140
Let's say this dot form should equal.

73
00:05:35.150 --> 00:05:42.470
And then just select the HDL form element so document dot query selector.

74
00:05:42.590 --> 00:05:50.990
It has a class of client dash area underscore underscore form while we're at it let's also create a

75
00:05:50.990 --> 00:05:53.460
property that points towards the input field.

76
00:05:53.510 --> 00:05:57.530
So let's say this dot field equals.

77
00:05:57.530 --> 00:06:03.120
And you could just copy and paste this to save a bit of typing only instead of underscore underscore

78
00:06:03.120 --> 00:06:10.620
form its underscore underscore input and let's also create one more property that points towards this

79
00:06:10.710 --> 00:06:12.150
empty div.

80
00:06:12.330 --> 00:06:21.060
Inside this empty div we want to display either these successful secret HCM l content or the red error

81
00:06:21.060 --> 00:06:24.780
text that says sorry that password is incorrect.

82
00:06:24.990 --> 00:06:28.460
So let's select this div up here we can create a property.

83
00:06:28.650 --> 00:06:36.510
Let's say this dot content area equals again you can just recycle this code to save typing so you could

84
00:06:36.510 --> 00:06:43.260
paste that in instead of underscore underscore form its underscore underscore content dash area.

85
00:06:43.870 --> 00:06:46.440
OK at this point let's create a new method.

86
00:06:46.470 --> 00:06:54.000
So below the constructor and let's name this new method events parentheses curly brackets at the very

87
00:06:54.000 --> 00:06:55.170
end of our constructor.

88
00:06:55.170 --> 00:06:58.980
Let's be sure to call the events method.

89
00:06:58.980 --> 00:07:05.430
So this dot events parentheses now in the events method we just want to listen for this.

90
00:07:05.470 --> 00:07:08.940
Each PML form element being submitted.

91
00:07:08.940 --> 00:07:20.010
So this dot form dot ad event listener to type of event we're listening for is not click but this time

92
00:07:20.010 --> 00:07:23.540
it is submit comma.

93
00:07:23.550 --> 00:07:28.680
The second argument is a function that we want to run in response to this event.

94
00:07:28.920 --> 00:07:34.470
Let's give it an arrow function with exactly one parameter so a parameter of E.

95
00:07:34.470 --> 00:07:41.850
Arrow symbol curly brackets I will dropdown first let's prevent the default behavior of submitting an

96
00:07:41.850 --> 00:07:43.670
HDMI form right.

97
00:07:43.710 --> 00:07:52.060
Because by default when you submit this form if I enter a value of ABC 1 2 3 and click submit you'll

98
00:07:52.080 --> 00:07:55.740
see that the browser performs a full page reload or refresh.

99
00:07:55.740 --> 00:07:57.720
This is not what we want.

100
00:07:57.810 --> 00:08:01.160
It also added a question mark at the end of the U.R.L. let me get rid of that.

101
00:08:02.610 --> 00:08:03.110
OK.

102
00:08:03.250 --> 00:08:10.800
Instead we want to use javascript to handle this form being submitted in other words we want to prevent

103
00:08:10.830 --> 00:08:13.430
this default or traditional behavior.

104
00:08:13.590 --> 00:08:22.530
So within the body of our arrow function we can just say e dot prevent default.

105
00:08:22.580 --> 00:08:23.180
OK.

106
00:08:23.220 --> 00:08:24.160
Right below that.

107
00:08:24.240 --> 00:08:28.970
Let's call a method that doesn't exist yet but one that we will create in just a moment.

108
00:08:29.010 --> 00:08:31.290
So let's say this dot.

109
00:08:31.500 --> 00:08:34.130
We could make up any name but just so we're on the same page.

110
00:08:34.140 --> 00:08:38.180
Let's call it send request.

111
00:08:38.720 --> 00:08:39.070
OK.

112
00:08:39.090 --> 00:08:42.270
Now let's go create a method with this matching name.

113
00:08:42.540 --> 00:08:51.150
So maybe right here we can just say send request parentheses curly brackets and this is where we will

114
00:08:51.150 --> 00:08:55.050
actually communicate with our cloud function.

115
00:08:55.050 --> 00:09:02.280
Now we could use the web browsers fetch functionality to send off an asynchronous request but I actually

116
00:09:02.280 --> 00:09:06.420
like to use a third party package named axioms.

117
00:09:06.450 --> 00:09:12.360
I just feel like it's syntax is a lot cleaner and easier to work with than the fetch API.

118
00:09:12.470 --> 00:09:18.270
I must not be alone in that sentiment because you can see from the NPM page 4 axioms just in the last

119
00:09:18.270 --> 00:09:22.640
week it was downloaded six point three million times.

120
00:09:22.770 --> 00:09:28.740
So right now let's do this within our command line let's press control C to stop our web pack dev server

121
00:09:29.310 --> 00:09:31.500
and let's install a package.

122
00:09:31.500 --> 00:09:36.900
So let's run npm install act.

123
00:09:37.050 --> 00:09:43.960
We do not need dash dash save Dev because this is a direct dependency of our app that we want visitors

124
00:09:43.960 --> 00:09:45.690
to have to download.

125
00:09:45.690 --> 00:09:46.950
So go ahead and press enter

126
00:09:49.620 --> 00:09:49.980
okay.

127
00:09:49.990 --> 00:09:52.350
Then let's start our web pack dev server up again.

128
00:09:52.360 --> 00:10:02.720
So NPM run Dev OK now up at the very top of this javascript file that's import in the axioms library.

129
00:10:03.270 --> 00:10:12.070
So I will say import axioms from and then the NPM package name was lowercase axioms.

130
00:10:12.710 --> 00:10:14.330
OK this package is great.

131
00:10:14.370 --> 00:10:17.050
It makes sending off an asynchronous request.

132
00:10:17.130 --> 00:10:18.900
Super easy.

133
00:10:18.900 --> 00:10:19.610
So check this out.

134
00:10:19.610 --> 00:10:29.170
Down in our send request method within its body we can just say act CEOs dot post right.

135
00:10:29.220 --> 00:10:35.610
We want to send a post request to a U R L before we worry about filling in these parentheses at the

136
00:10:35.610 --> 00:10:37.110
very end of this line.

137
00:10:37.140 --> 00:10:47.610
I want you to say dot then parentheses and then at the very end of that dot catch parentheses so the

138
00:10:47.610 --> 00:10:51.670
axiom is post method is going to result in a promise.

139
00:10:51.720 --> 00:10:55.620
The idea with a promise is we don't know how long it's going to take right.

140
00:10:55.620 --> 00:11:00.780
So communicating with our cloud function might take five milliseconds or it could take five thousand

141
00:11:00.780 --> 00:11:07.490
milliseconds but eventually it's either going to complete successfully or it's going to fail.

142
00:11:07.650 --> 00:11:10.390
So within the then parentheses we provide a function.

143
00:11:10.530 --> 00:11:17.190
If things go as planned within catch we provide a function for if things fail let's actually begin with

144
00:11:17.190 --> 00:11:23.840
the catch function so this will occur if the password does not match our desired javascript string right

145
00:11:23.850 --> 00:11:29.850
because our cloud function is going to send back a status code of 4 0 1 or unauthorized.

146
00:11:30.150 --> 00:11:37.560
So within the catch parentheses let's just provide an arrow function parentheses arrow symbol curly

147
00:11:37.560 --> 00:11:39.780
brackets.

148
00:11:39.900 --> 00:11:45.780
Now what we would want to do is add a bit of text that says that secret phrase is not correct.

149
00:11:45.780 --> 00:11:55.920
Please try again so we can just say this dot content area dot inner H PML should equal and then let's

150
00:11:55.920 --> 00:11:58.960
use back ticks and then let's add a bit of HDMI out.

151
00:11:59.820 --> 00:12:09.810
Let's create a P for paragraph and let's give it a class of client dash area underscore underscore error.

152
00:12:09.810 --> 00:12:19.390
So the text will be read inside the paragraph tag let's say that secret phrase is not correct.

153
00:12:19.410 --> 00:12:20.730
Try again.

154
00:12:21.590 --> 00:12:22.200
OK.

155
00:12:22.290 --> 00:12:27.550
Now right below this line let's clear out the value of the input field right.

156
00:12:27.560 --> 00:12:33.000
Because if someone types in an incorrect password and then they submit the form well instead of the

157
00:12:33.000 --> 00:12:39.540
user having to select or backspace we should just delete that incorrect value for them so we can say

158
00:12:39.960 --> 00:12:48.360
this dot field dot value should equal just an empty pair of quotes.

159
00:12:48.360 --> 00:12:52.940
Also let's make sure that input field is focused so they can just begin typing again.

160
00:12:53.800 --> 00:12:57.960
So this dot field and then call the focus method.

161
00:12:57.990 --> 00:12:58.220
OK.

162
00:12:58.230 --> 00:13:04.630
So that will run if the cloud function responds with a 4 or 1 unauthorized result.

163
00:13:04.650 --> 00:13:10.550
However if we type in the correct password then the then function will run.

164
00:13:10.590 --> 00:13:14.400
So let's give it an arrow function with exactly one parameter.

165
00:13:14.400 --> 00:13:23.410
Let's name the parameter response so then arrow symbol curly brackets let's drop down in between.

166
00:13:23.430 --> 00:13:30.120
Now if they type in the correct password we can actually delete the form from the page and then also

167
00:13:30.150 --> 00:13:34.730
insert the secret content into that content area div.

168
00:13:34.860 --> 00:13:41.390
So to get rid of the form we can just say this dot form dot remove.

169
00:13:41.700 --> 00:13:49.110
And then below that we can say this dot content area right that same area where we would add the error

170
00:13:49.110 --> 00:13:50.180
message.

171
00:13:50.310 --> 00:13:51.950
In this case we are successful.

172
00:13:51.960 --> 00:14:04.320
So content area dot enter each CML should now equal response dot data so this will be the value that

173
00:14:04.320 --> 00:14:06.530
the cloud function responds with.

174
00:14:06.540 --> 00:14:13.020
And remember we set it up to respond with a bit of each PML saying Welcome to the secret area the sky

175
00:14:13.020 --> 00:14:13.550
is blue.

176
00:14:13.560 --> 00:14:15.830
Two plus two equals four.

177
00:14:15.940 --> 00:14:16.430
OK.

178
00:14:16.530 --> 00:14:20.280
All that remains is the parentheses for post.

179
00:14:20.280 --> 00:14:24.690
So inside these parentheses we want to give it to arguments.

180
00:14:24.690 --> 00:14:31.170
So you could say a column would be as placeholders the first argument is the U.R.L. that you want to

181
00:14:31.170 --> 00:14:32.880
send a request to.

182
00:14:32.940 --> 00:14:39.330
So you can just go back to post man and that is this you are all or if you don't have postman open any

183
00:14:39.330 --> 00:14:45.450
longer you can always go into your net the fire control panel jump into the project click on functions

184
00:14:45.660 --> 00:14:52.200
and look for its end point value if you wanted to you could just grab from the forward slash dot net

185
00:14:52.200 --> 00:14:58.800
lo fi forward so that way if you actually purchased a real dot com domain for your net lo fi site this

186
00:14:58.800 --> 00:15:03.630
would be a relative link instead of an absolute link that depends on the domain.

187
00:15:03.630 --> 00:15:10.900
In my case though I'm just going to grab the entire U.R.L. back in our text editor for the first argument

188
00:15:11.230 --> 00:15:17.700
say quote Be sure to include the quotes and then paste in your clipboard OK.

189
00:15:17.710 --> 00:15:24.910
And then for the second argument instead of this be place holder we give it an object so curly brackets

190
00:15:25.690 --> 00:15:31.120
and remember and post man when we sent a bit of Jason data along with our request we just want to have

191
00:15:31.120 --> 00:15:41.340
one property named password so within this empty object we can just say password colon and give it a

192
00:15:41.340 --> 00:15:45.030
value of whatever the user has typed into the field.

193
00:15:45.180 --> 00:15:48.730
So this dot field dot value.

194
00:15:49.460 --> 00:15:49.910
OK.

195
00:15:49.920 --> 00:15:50.970
And that's it.

196
00:15:50.970 --> 00:15:56.970
But before we save this file I do want to point out that I misspelled value down here within the catch

197
00:15:56.970 --> 00:15:59.580
function when I said this dot field.

198
00:15:59.580 --> 00:16:01.780
Make sure you spell the value correctly here.

199
00:16:03.660 --> 00:16:03.940
OK.

200
00:16:03.960 --> 00:16:06.160
Let's save this file.

201
00:16:06.210 --> 00:16:12.630
Also we're not actually going to test this functionality locally on our computer due to a web browser

202
00:16:12.630 --> 00:16:21.270
security protocol named cause c o r s which stands for cross origin resource sharing this network request

203
00:16:21.330 --> 00:16:22.790
would not go through.

204
00:16:22.800 --> 00:16:27.860
The reason is because we would be on local host and this is a different domain.

205
00:16:27.900 --> 00:16:33.060
Now I realize that in the real world you definitely want to test your code locally before pushing it

206
00:16:33.060 --> 00:16:34.320
up live.

207
00:16:34.320 --> 00:16:40.560
However I don't want us diving into the tangent of cause but if you really want to be able to test this

208
00:16:40.830 --> 00:16:47.310
locally after this video lesson you'll find a text article with a bit of sample code so that you can

209
00:16:47.310 --> 00:16:53.490
modify your cloud function so that it would be accessible from our local dev environment.

210
00:16:53.490 --> 00:16:55.710
However that's not the perfect solution.

211
00:16:55.950 --> 00:17:02.520
The perfect solution is to use Net lift his tool named net LA fi Dev which makes previewing all of your

212
00:17:02.520 --> 00:17:04.600
code locally a piece of cake.

213
00:17:05.010 --> 00:17:10.050
However we're not going to set that up because this course is not really about Natalie Fi.

214
00:17:10.200 --> 00:17:15.220
We're just trying to see the bigger picture of workflow and how everything fits together.

215
00:17:15.420 --> 00:17:19.980
All that is to say that we're not going to worry about previewing this locally let's just go ahead and

216
00:17:19.980 --> 00:17:24.290
push it up to get hub and test it out on our net lo fi Web site.

217
00:17:24.330 --> 00:17:33.150
So in the command line I will stop our web PAC task control C and then get add everything and then get

218
00:17:33.480 --> 00:17:47.720
commit added clients area feature and then push get push origin master we can jump over to our net La

219
00:17:47.720 --> 00:17:50.620
Vie control panel and click on deploys.

220
00:17:50.760 --> 00:17:53.140
See right now it's currently building.

221
00:17:53.140 --> 00:17:53.460
Okay.

222
00:17:53.490 --> 00:17:57.030
A bit in the future I can see that this was successfully published.

223
00:17:57.120 --> 00:18:05.680
So if I visit my public Nettlefold website and refresh down at the very bottom we see secret client

224
00:18:05.710 --> 00:18:06.250
area.

225
00:18:06.550 --> 00:18:13.420
If I type in a password that's incorrect on purpose and submit code that secret phrase is not correct.

226
00:18:13.420 --> 00:18:14.390
Try again.

227
00:18:14.540 --> 00:18:19.400
But if I type in JavaScript awesome.

228
00:18:19.430 --> 00:18:21.700
Welcome to the secret area.

229
00:18:21.770 --> 00:18:24.620
This means that we have completed this feature.

230
00:18:24.830 --> 00:18:30.680
Now obviously our cloud function didn't do anything actually complex or super interesting.

231
00:18:30.680 --> 00:18:33.530
Remember within that cloud function you can do anything.

232
00:18:33.530 --> 00:18:35.240
You could talk to a database.

233
00:18:35.360 --> 00:18:41.390
You could send off an e-mail anything that a server would normally do you're free to do they're actually

234
00:18:41.390 --> 00:18:46.930
learning about back end or server side development is way outside the scope of this course.

235
00:18:46.940 --> 00:18:53.000
I just wanted you to see the bigger picture and workflow of how the front end can communicate with the

236
00:18:53.000 --> 00:18:54.260
back end.

237
00:18:54.290 --> 00:18:59.780
This cloud function architecture that net defined makes so simple the set up is becoming more and more

238
00:18:59.780 --> 00:19:01.730
popular each year.

239
00:19:01.730 --> 00:19:07.460
Anyways that's going to bring this lesson to a close in our next lesson we're gonna change gears and

240
00:19:07.460 --> 00:19:15.470
briefly talk about react react is a very popular front end library now actually taking the time to understand

241
00:19:15.470 --> 00:19:20.440
react and learn how to use it is way outside the scope of this course.

242
00:19:20.540 --> 00:19:26.750
However I do want to show you how we can integrate react into our web pack workflow and then if you

243
00:19:26.750 --> 00:19:31.580
want to continue learning about react through other learning materials I think that would be a great

244
00:19:31.580 --> 00:19:32.440
idea.

245
00:19:32.510 --> 00:19:36.650
Let's keep our momentum rolling and I will see you in the next lesson.
