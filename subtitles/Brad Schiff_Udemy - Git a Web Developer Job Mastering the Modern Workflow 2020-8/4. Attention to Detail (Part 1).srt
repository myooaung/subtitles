1
00:00:05,100 --> 00:00:10,860
Hello everyone in this lesson we are going to work on our attention to detail.

2
00:00:11,070 --> 00:00:13,420
Let's get started and dive right in.

3
00:00:13,440 --> 00:00:19,550
So in our next lesson we are going to begin tackling this blew our features section.

4
00:00:19,740 --> 00:00:25,830
But before we do that in this lesson let's work on perfecting this content.

5
00:00:26,010 --> 00:00:33,060
Let's make our first task to add a bit of vertical spacing or margin between these two images.

6
00:00:33,060 --> 00:00:37,320
Now we know that this first image lives within its own wrapper div.

7
00:00:37,530 --> 00:00:41,320
So why don't we just add a bit of bottom margin to that element.

8
00:00:41,370 --> 00:00:49,010
So over in our HTL mail we can find that element by searching for ever since.

9
00:00:49,020 --> 00:00:54,390
So you can press Command F or control f and type ever since.

10
00:00:54,390 --> 00:00:56,940
All right so for reference there is that heading.

11
00:00:57,260 --> 00:01:00,530
So we know that the very next element is the image.

12
00:01:00,750 --> 00:01:03,710
Let's add the bottom margin to this wrapper div.

13
00:01:03,720 --> 00:01:07,820
So let's just add another modifier class to the wrapper div.

14
00:01:08,010 --> 00:01:13,210
Let's say a wrapper dash dash B for bottom margin.

15
00:01:13,470 --> 00:01:14,560
What save this.

16
00:01:14,580 --> 00:01:20,030
And then within our CSL modules folder Let's open up wrapper got c.

17
00:01:20,430 --> 00:01:27,420
Let's create a new rule for that modifier Class B margin margin bottom.

18
00:01:27,660 --> 00:01:29,990
So how large do we think the margins should be.

19
00:01:30,150 --> 00:01:38,760
Well if we look at our design file that looks like 62 pixels to me but we want that in terms of REM

20
00:01:39,030 --> 00:01:43,260
so we can take 62 pixels and divide it by 16.

21
00:01:43,260 --> 00:01:45,220
That gives us three point eight seven five.

22
00:01:45,220 --> 00:01:50,040
So let's copy that to our clipboard paste it in and type Renn.

23
00:01:50,280 --> 00:01:51,770
Let's go ahead and save this.

24
00:01:51,810 --> 00:01:53,490
And check out the browser.

25
00:01:53,970 --> 00:01:54,950
Looks good.

26
00:01:55,230 --> 00:01:57,790
Let's see how this looks on a small screen.

27
00:01:58,850 --> 00:01:59,120
All right.

28
00:01:59,120 --> 00:02:03,070
So on a small screen that looks like way too much vertical spacing.

29
00:02:03,320 --> 00:02:05,250
So why don't we do this.

30
00:02:05,330 --> 00:02:14,540
Why don't we wrap this amount in a media query mix in a mix in at small use that amount that we specified.

31
00:02:14,840 --> 00:02:18,540
But our baseline margin bottom should be much smaller.

32
00:02:18,560 --> 00:02:20,280
Let's just try one round.

33
00:02:20,630 --> 00:02:22,590
Let's see how that looks in the browser.

34
00:02:22,940 --> 00:02:25,370
This looks much better for small screens.

35
00:02:25,370 --> 00:02:25,910
All right.

36
00:02:25,910 --> 00:02:33,120
The next thing that I want to work on is I want to fine tune the exact with values of these two columns.

37
00:02:33,140 --> 00:02:40,130
So for example in our previous lesson we set up this column to be exactly thirty three point three three

38
00:02:40,130 --> 00:02:42,080
percent of the available width.

39
00:02:42,290 --> 00:02:49,340
However if we compare this to our design file our image in the browser looks a bit smaller or squished

40
00:02:49,340 --> 00:02:51,940
compared to the design file.

41
00:02:51,980 --> 00:02:58,730
This is because in the design file this image is technically a little bit wider than Exactly 33 percent

42
00:02:59,120 --> 00:03:00,530
of the available width.

43
00:03:00,650 --> 00:03:07,160
So let's create a few modifier classes to adjust the width distribution of these columns a bit.

44
00:03:07,190 --> 00:03:13,270
We want this column to be a little bit larger and we want this column to be a little bit smaller.

45
00:03:13,430 --> 00:03:18,210
So over in our HMO Here is our road block.

46
00:03:18,470 --> 00:03:27,440
Let's add a modifier to the first column of row underscore underscore medium for dash dash larger.

47
00:03:27,650 --> 00:03:35,560
Let's also add a modifier class to the second column row underscore underscore medium a dash dash smaller.

48
00:03:35,600 --> 00:03:42,050
Let's save this and within our modules CSSA folder Let's open up road up CSX.

49
00:03:42,050 --> 00:03:50,500
So after our normal medium for Roulettes create a new rule medium for dash dash larger.

50
00:03:50,810 --> 00:03:58,040
And let's just increase the width from thirty three point three three to 37 percent.

51
00:03:58,040 --> 00:04:08,520
Let's also create a new rule underneath this regular medium eight on eight dash dash smaller instead

52
00:04:08,520 --> 00:04:10,320
of sixty six point six six.

53
00:04:10,320 --> 00:04:13,190
Let's go with 63 percent.

54
00:04:13,320 --> 00:04:18,450
Before I say this let me resize my text editor so we can see the browser in the background and we can

55
00:04:18,450 --> 00:04:19,800
see the change in real time.

56
00:04:19,800 --> 00:04:22,530
So I'm going to save it right now.

57
00:04:22,530 --> 00:04:25,450
It was a subtle change but I think it looks a lot better.

58
00:04:25,500 --> 00:04:33,600
Now the reason we used a modifier classes instead of just adjusting 33 percent and 66 percent is because

59
00:04:33,600 --> 00:04:42,950
later on in our design file down here in the testimonial section These truly are exactly 33 percent

60
00:04:43,040 --> 00:04:44,480
each.

61
00:04:44,480 --> 00:04:47,750
So we do want to keep that rule in place.

62
00:04:47,750 --> 00:04:53,540
And I wanted to show you that it's OK to override your column grid when necessary.

63
00:04:53,540 --> 00:04:59,990
I'm not a fan of completely locking yourself into a completely rigid inflexible grid if you need to

64
00:04:59,990 --> 00:05:02,720
adjust things a bit here and there to match the design.

65
00:05:02,720 --> 00:05:04,060
I say go for it.

66
00:05:04,100 --> 00:05:10,140
In fact in my opinion that's one of the things that separates a good developer from a great developer.

67
00:05:10,160 --> 00:05:13,640
We don't want our website to look like a program or created it.

68
00:05:13,640 --> 00:05:17,290
We don't want things to feel overly rigid and locked in place.

69
00:05:17,390 --> 00:05:23,510
We want it to feel like a designer created it and sometimes that means going the extra mile to customize

70
00:05:23,510 --> 00:05:24,270
things.

71
00:05:24,440 --> 00:05:24,800
All right.

72
00:05:24,800 --> 00:05:28,960
So let's jump back to the browser and continue to make improvements.

73
00:05:29,030 --> 00:05:35,390
So the next thing that I want to address is the max width value that we gave to our wrapper element.

74
00:05:35,390 --> 00:05:43,460
So in our text editor in our wrapper CSSA file several lessons ago we gave this element a max width

75
00:05:43,520 --> 00:05:45,440
of twelve hundred pixels.

76
00:05:45,440 --> 00:05:52,240
Now since then we applied box sizing border box globally to all elements on the page.

77
00:05:52,370 --> 00:05:59,700
And when we did that we actually decreased the max width of this wrapper element by 36 pixels.

78
00:05:59,750 --> 00:06:03,310
Right so that's the padding left plus the padding right.

79
00:06:03,410 --> 00:06:09,890
So to keep up our attention to detail what's account for that change and what's add 36 pixels to this

80
00:06:09,890 --> 00:06:11,840
max width value.

81
00:06:11,840 --> 00:06:19,090
So let's say this so we saw that that was a subtle change but it gave our design a little bit extra

82
00:06:19,090 --> 00:06:20,650
room to breathe.

83
00:06:20,650 --> 00:06:21,190
All right.

84
00:06:21,220 --> 00:06:26,080
I think our next task should be to make this image responsive.

85
00:06:26,080 --> 00:06:29,260
So this cropping and aspect ratio worked well for this.

86
00:06:29,260 --> 00:06:31,770
To call them lay out on a large screen.

87
00:06:31,960 --> 00:06:38,320
But if we look at a small screen or mobile device I think it would look better if this image wasn't

88
00:06:38,350 --> 00:06:39,400
as tall.

89
00:06:39,400 --> 00:06:43,370
I think it would look better if it was landscape instead of portrait.

90
00:06:43,390 --> 00:06:45,420
So over in our HDMI.

91
00:06:45,460 --> 00:06:47,130
Let's find that image.

92
00:06:47,320 --> 00:06:48,470
Here it is.

93
00:06:48,520 --> 00:06:55,870
And let's actually just delete this image line and start fresh with a picture element within the picture

94
00:06:55,870 --> 00:06:56,320
element.

95
00:06:56,320 --> 00:06:59,850
Let's begin with the smallest image first.

96
00:06:59,950 --> 00:07:06,010
So we'll just use the traditional image element will say image source look inside our assets folder

97
00:07:06,190 --> 00:07:07,780
and then the images folder.

98
00:07:07,960 --> 00:07:12,400
And let's actually pull open that folder to see which images we can choose from.

99
00:07:12,400 --> 00:07:17,950
So here is the travel site app assets images.

100
00:07:18,100 --> 00:07:24,640
So we're looking for a file that begins with our start.

101
00:07:24,670 --> 00:07:32,120
So here is our start slash landscape so let's type our start landscape.

102
00:07:32,180 --> 00:07:40,130
Jay peg and let's give this image an alt value of our founder Jane Doe.

103
00:07:40,630 --> 00:07:43,990
All right so let's say this and check out the browser.

104
00:07:44,830 --> 00:07:47,630
I think that looks a lot better on smartphones.

105
00:07:47,740 --> 00:07:52,340
However on larger screens it definitely looks odd.

106
00:07:52,690 --> 00:08:00,640
To fix that within our picture element we can just add a new source element and create a media query

107
00:08:01,060 --> 00:08:08,190
that says if a screen is larger than 800 pixels use a different image source.

108
00:08:08,240 --> 00:08:15,360
So then we can just say or set assets images our star got dot pig.

109
00:08:15,660 --> 00:08:17,920
Let's save that.

110
00:08:17,920 --> 00:08:23,570
So now the image looks great on large screens and on tiny screens.

111
00:08:23,590 --> 00:08:27,010
But what about medium sized screens.

112
00:08:27,010 --> 00:08:33,610
So for example if I shrink this browser window a bit we see the column start shrinking to fit within

113
00:08:33,610 --> 00:08:42,240
the browser with and things start to look a bit awkward are single column lead doesn't kick in until

114
00:08:42,730 --> 00:08:43,560
there.

115
00:08:44,070 --> 00:08:50,990
So for this screen size the image aspect ratio looks a bit odd on a medium sized screen like this.

116
00:08:51,000 --> 00:08:57,300
I think it would look nice if the image was narrower and taller and if we look in our images folder

117
00:08:57,720 --> 00:09:03,090
we see a file named our start portrait which just happens to be cropped that way.

118
00:09:03,270 --> 00:09:05,240
So in each T.M. home.

119
00:09:05,430 --> 00:09:09,230
Let's go ahead and duplicate this source line that we just created.

120
00:09:09,390 --> 00:09:16,890
And within the top source element let's change its media query to be 1020 pixels and we will leave that

121
00:09:16,890 --> 00:09:20,370
source to continue pointing towards this image.

122
00:09:20,370 --> 00:09:27,330
However on this second source element let's change that file to the our star portrait that J.

123
00:09:27,340 --> 00:09:31,440
Peg and we will leave this media query at 800 pixels.

124
00:09:31,440 --> 00:09:38,310
So if we save this and check out the browser we see the new portrait image that is narrower and taller.

125
00:09:38,550 --> 00:09:46,620
And if we make our screen a bit larger here we see the traditional image and we still receive the landscape

126
00:09:46,650 --> 00:09:48,670
image on mobile screens.

127
00:09:48,810 --> 00:09:51,520
So this responsive image is almost complete.

128
00:09:51,540 --> 00:09:57,860
The one final thing that I want to do is add high DPMI copies for each cropping.

129
00:09:58,020 --> 00:10:01,380
So let's start on this top source and work our way down.

130
00:10:01,380 --> 00:10:07,470
We can just select the name of the file in the path to the file and copy it and then add a comma and

131
00:10:07,470 --> 00:10:08,370
paste it in.

132
00:10:08,580 --> 00:10:10,740
And right before the dot J page just add.

133
00:10:10,750 --> 00:10:12,380
Hi DPMI.

134
00:10:12,570 --> 00:10:18,810
You will remember that I've created IDBI copies for all of our images in the image folder and if we

135
00:10:18,810 --> 00:10:25,020
remember back to our responsive images lesson we need to tell the browser the size of each of these

136
00:10:25,020 --> 00:10:27,960
images so it knows which one to use.

137
00:10:27,960 --> 00:10:34,220
So this regular image has a width of 404 pixels so we say 404 w.

138
00:10:34,410 --> 00:10:38,280
And the Hy-Vee API copy is double that 808.

139
00:10:38,280 --> 00:10:42,060
Now you might think that we are done with this source element but we're not.

140
00:10:42,090 --> 00:10:46,950
I have a bit of a confession back in our original responsive image lesson.

141
00:10:47,130 --> 00:10:52,890
I was able to oversimplify things a bit because I knew that the image we were dealing with back in that

142
00:10:52,890 --> 00:10:54,780
lesson we were dealing with this image.

143
00:10:54,900 --> 00:10:58,910
I knew that it was always going to be full browser window with.

144
00:10:59,200 --> 00:11:05,740
However the image that we are currently dealing with this image is only full browser window with on

145
00:11:05,910 --> 00:11:07,940
small tiny devices.

146
00:11:07,950 --> 00:11:09,150
Why does this matter.

147
00:11:09,300 --> 00:11:13,410
Well before I tried to explain it in words let me just show you visually.

148
00:11:13,890 --> 00:11:25,790
So if we add the dash I to both these images and save we see that this is the Heidy API copy 808 pixels

149
00:11:25,790 --> 00:11:26,450
wide.

150
00:11:26,450 --> 00:11:34,550
However I am not using a Heidy monitor so I only want to have to download the image that is 404 pixels

151
00:11:34,550 --> 00:11:35,270
wide.

152
00:11:35,330 --> 00:11:38,920
So why is the browser trying to send me the high API copy.

153
00:11:38,930 --> 00:11:41,080
The answer is because web browsers.

154
00:11:41,120 --> 00:11:48,260
Unless we tell them otherwise assume that all responsive images need to take up the entire browser window

155
00:11:48,260 --> 00:11:54,380
width so if Google Chrome thinks that this image needs to be this wide it's obviously going to reach

156
00:11:54,380 --> 00:11:56,430
for the largest copy of the image.

157
00:11:56,450 --> 00:12:02,690
It's up to us as the developer to tell the web browser Hey Chrome this particular source of the image

158
00:12:02,780 --> 00:12:06,950
is never going to display larger than 404 pixels.

159
00:12:07,040 --> 00:12:12,870
Thanks to RC SS Right the web browser is not intelligent enough to figure that out on its own.

160
00:12:12,890 --> 00:12:16,450
We can tell the web browser what size the image will be rendered at.

161
00:12:16,490 --> 00:12:26,460
By doing this in our HTL on this source element we can simply say sizes equals 404 pixels.

162
00:12:26,570 --> 00:12:29,420
So let's save this and check out the browser.

163
00:12:30,020 --> 00:12:35,920
Now we still see the Heidy API copy but that's because Chrome has that copy cached so behind the scenes

164
00:12:35,930 --> 00:12:38,090
really quickly let me clear my cache.

165
00:12:38,090 --> 00:12:41,280
All right so now we are using the standard image.

166
00:12:41,360 --> 00:12:46,680
Next let's add a hide the API copy for the next source of the image.

167
00:12:46,700 --> 00:12:50,640
This source is used for screens that are a bit smaller.

168
00:12:52,020 --> 00:12:53,720
Like this for example.

169
00:12:54,030 --> 00:13:01,950
So we can just copy and paste the file name and file path a comma pasted in and right before the dot

170
00:13:01,950 --> 00:13:02,870
J page.

171
00:13:02,880 --> 00:13:04,860
Hi DPMI.

172
00:13:05,010 --> 00:13:08,840
Next we want to tell the browser the size of each of these images.

173
00:13:08,970 --> 00:13:14,030
So the standard copy is 382 pixels wide.

174
00:13:14,100 --> 00:13:23,670
So W in the hi DP I copy is double the 764 for testing purposes why don't we go ahead and add the dash

175
00:13:23,780 --> 00:13:30,650
II to the end of both filenames so we can easily see which copy is being used in the browser.

176
00:13:31,790 --> 00:13:35,430
And we see that the high API copy is being used.

177
00:13:35,480 --> 00:13:37,060
So practice makes perfect.

178
00:13:37,070 --> 00:13:42,650
We need to tell the browser that this image is not going to be displayed at the full width of the browser

179
00:13:42,650 --> 00:13:43,250
window.

180
00:13:43,490 --> 00:13:49,250
So we need to find out what is the widest that this source of the image will ever need to be displayed

181
00:13:49,250 --> 00:13:49,710
at.

182
00:13:49,880 --> 00:13:54,560
So let's resize our browser window to right before this break point occurs.

183
00:13:55,760 --> 00:13:57,100
Which is right about here.

184
00:13:57,560 --> 00:14:03,120
And let's measure this image so thanks to our CSSA column grid laya.

185
00:14:03,890 --> 00:14:10,430
It looks to me like this source of the image will never need to be wider than about 320 pixels.

186
00:14:10,610 --> 00:14:20,180
So over in our HVM melt on this source we can simply say sizes equals 320 pixels.

187
00:14:20,450 --> 00:14:22,780
Save that.

188
00:14:22,790 --> 00:14:30,140
And if I clear my cache we see the standard copy of the image which makes sense from my monitor's DPMI.

189
00:14:30,200 --> 00:14:30,530
All right.

190
00:14:30,530 --> 00:14:35,620
Next let's move on to adding the Heidy API copy for this crop.

191
00:14:35,630 --> 00:14:42,500
So the first thing we want to do is change this from source to source set so we can add on an additional

192
00:14:42,500 --> 00:14:43,110
image.

193
00:14:43,220 --> 00:14:50,750
So let's copy this Atacama paste and then right for the DOT JPEG add.

194
00:14:50,780 --> 00:14:52,540
Hi DPA.

195
00:14:52,940 --> 00:14:56,370
Let's tell the browser the sizes of both these images.

196
00:14:56,510 --> 00:15:00,500
So the standard copy is 100 pixels wide.

197
00:15:00,510 --> 00:15:03,600
The Heidi API copy is double that at sixteen hundred.

198
00:15:03,850 --> 00:15:06,210
Let's say this and check out the browser.

199
00:15:08,140 --> 00:15:14,770
We don't need to worry about the sizes attribute on this crop of the image because this crop is only

200
00:15:14,770 --> 00:15:21,520
used when the layout collapses to a single column view which means in this instance it's OK that the

201
00:15:21,520 --> 00:15:26,470
browser assumes that the image needs to take up the full width of the browser.

202
00:15:26,740 --> 00:15:27,000
All right.

203
00:15:27,010 --> 00:15:31,080
So we have completed this responsive image really quickly.

204
00:15:31,120 --> 00:15:35,110
Let's move on and make this image responsive.

205
00:15:35,110 --> 00:15:39,120
So back in our HMO we look up just a few lines.

206
00:15:39,130 --> 00:15:40,850
We see that image here.

207
00:15:41,050 --> 00:15:47,650
And if we look in our projects image folder the name of this image is first trip so it looks like we

208
00:15:47,650 --> 00:15:55,060
have a standard version A Heidi API version and a low res version for smaller screens and all three

209
00:15:55,060 --> 00:15:57,250
of these are cropped exactly the same.

210
00:15:57,250 --> 00:15:59,120
They are just different resolutions.

211
00:15:59,290 --> 00:16:05,250
So in our HMO we do not need the picture element because we only need to switch resolutions.

212
00:16:05,380 --> 00:16:12,190
So let's change this from a source to a source set and let's copy and paste the path to the image a

213
00:16:12,190 --> 00:16:13,360
few times.

214
00:16:13,360 --> 00:16:16,350
Comma paste comma paste.

215
00:16:16,360 --> 00:16:20,970
Let's change this first file to the low rez copy.

216
00:16:21,130 --> 00:16:24,500
It has a width of 565.

217
00:16:24,550 --> 00:16:27,240
We can leave this next file name untouched.

218
00:16:27,250 --> 00:16:33,130
But we can specify that it's width is 976 and what's changed.

219
00:16:33,130 --> 00:16:36,330
This third mention of the image to first trip.

220
00:16:36,340 --> 00:16:37,800
Hi GPI.

221
00:16:38,110 --> 00:16:42,230
And it has a width of 1952.

222
00:16:42,400 --> 00:16:49,330
Let's go ahead and add the dash I before the dot J page to all three image files so we can clearly see

223
00:16:49,330 --> 00:16:51,570
in the browser which one is being used.

224
00:16:51,770 --> 00:16:53,050
Let's save this.

225
00:16:53,050 --> 00:16:54,490
Check out the browser.

226
00:16:54,910 --> 00:16:57,930
So far these are the image sizes that I would expect to see.

227
00:16:57,940 --> 00:17:05,080
But if I make this browser window larger we see that even though my monitor is not high API I'm being

228
00:17:05,080 --> 00:17:07,240
served the high DPMI copy.

229
00:17:07,240 --> 00:17:10,470
We know how to address this within this image element.

230
00:17:10,480 --> 00:17:16,360
We can simply give it the size attribute and let the browser know that this image needs to be about

231
00:17:16,390 --> 00:17:20,640
976 pixels wide instead of full screen.

232
00:17:20,860 --> 00:17:25,510
And if I clear my cache we now see the standard version of the image.

233
00:17:25,510 --> 00:17:32,290
However if we look at things on a smartphone we see that the sizes attribute we just added forces even

234
00:17:32,290 --> 00:17:37,960
tiny smart phones to download the medium sized image instead of the low rez copy.

235
00:17:37,960 --> 00:17:45,250
This is because this code is telling the browser that all screen sizes need to display the image at

236
00:17:45,250 --> 00:17:47,760
this size and this is not what we want.

237
00:17:47,860 --> 00:17:50,470
So instead check this out.

238
00:17:50,470 --> 00:17:58,150
We can add a media query and we can say only for screens that are 970 pixels or larger.

239
00:17:58,180 --> 00:18:06,400
Does the image need to be 976 pixels comma otherwise for screens that are smaller than this.

240
00:18:06,430 --> 00:18:15,350
The image just needs to be 100 percent of the device with 100 VW which stands for viewport width.

241
00:18:15,400 --> 00:18:20,020
So for example if a small screen is only 360 pixels wide.

242
00:18:20,080 --> 00:18:25,170
This is our way of saying that this image only needs to be 360 pixels wide.

243
00:18:25,330 --> 00:18:32,920
So if we save this and clear our cash we see that the low rez copy is successfully being sent to small

244
00:18:32,920 --> 00:18:38,890
screens which means this responsive image is now complete and that's actually going to bring.

245
00:18:38,890 --> 00:18:43,560
Part 1 of this two part lesson to a close in part two.

246
00:18:43,600 --> 00:18:48,610
We will work on fine tuning the type Griffy for this content.

247
00:18:48,910 --> 00:18:52,440
Let's keep rolling along and I will see you in part 2.
