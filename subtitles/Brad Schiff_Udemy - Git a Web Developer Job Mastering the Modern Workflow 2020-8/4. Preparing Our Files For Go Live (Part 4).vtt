WEBVTT
1
00:00:00.330 --> 00:00:06.150
However for less than 10 pages you probably don't need a static site generator and instead we can just

2
00:00:06.150 --> 00:00:09.990
configure this web pack scenario to work perfectly.

3
00:00:09.990 --> 00:00:15.510
Let me show you what I would do first of all we need to have more than one each PML file to practice

4
00:00:15.510 --> 00:00:15.870
with.

5
00:00:16.290 --> 00:00:22.600
So right now I want you to go into your app folder so up out of the disk folder into our app folder.

6
00:00:22.600 --> 00:00:24.780
Write our source code.

7
00:00:24.780 --> 00:00:31.020
And right now we just have indexed on HDL but I want you to copy and paste or duplicate this file.

8
00:00:31.290 --> 00:00:37.920
So just create a duplicate copy of it and I will name to duplicate copy about done HDMI all and then

9
00:00:37.920 --> 00:00:42.240
you can even duplicate that and name the third copy contact.

10
00:00:42.240 --> 00:00:47.580
OK now we're not actually going to customize these pages we just want something to practice with to

11
00:00:47.580 --> 00:00:51.690
make sure that our setup would work with multiple pages.

12
00:00:51.690 --> 00:00:58.950
So our first step is to use node to create an array of the different HDMI files we're working with.

13
00:00:58.950 --> 00:01:06.320
Technically we could use the built in node F S module but I prefer the package named F S extra.

14
00:01:06.540 --> 00:01:08.580
It's just a lot easier to work with.

15
00:01:08.640 --> 00:01:15.270
I'm not alone in feeling this way because the package F S extra has been downloaded 20 million times

16
00:01:15.270 --> 00:01:16.250
in the last week.

17
00:01:16.800 --> 00:01:19.100
So right now do this with me in the command line.

18
00:01:19.110 --> 00:01:21.510
Let's install the new package.

19
00:01:21.510 --> 00:01:28.110
So we're going to say npm install F S dash extra.

20
00:01:28.200 --> 00:01:30.330
Be sure to include dash dash save.

21
00:01:30.330 --> 00:01:32.760
Def OK.

22
00:01:32.770 --> 00:01:36.010
Now up at the very top of our Web pack config file.

23
00:01:36.110 --> 00:01:45.170
Let's import in that new package concept let's say FSB for file system extra let's set that to equal.

24
00:01:45.190 --> 00:01:50.850
And then just require in the package that was named F S dash extra.

25
00:01:51.680 --> 00:01:59.440
OK now let's leverage this package to search for any h t AML files we know that we only have these three

26
00:01:59.440 --> 00:02:05.080
and you and I are aware of their names but we want our setup to be flexible so that no matter what these

27
00:02:05.080 --> 00:02:09.740
files were named or even if we had 10 or 15 of them this would still work.

28
00:02:09.790 --> 00:02:13.480
So let's find our shared config object right.

29
00:02:13.480 --> 00:02:16.450
This is used for both dev and build.

30
00:02:16.450 --> 00:02:22.650
And remember we just set up plug ins call in and then we wrote this code to work with the HDMI plug

31
00:02:22.650 --> 00:02:23.280
in.

32
00:02:23.440 --> 00:02:28.470
Well believe it or not actually want you to delete the rest of this line after plugins colon

33
00:02:31.840 --> 00:02:37.400
so it should look like this now and instead of clogging this area of the file up with a bunch of code

34
00:02:37.610 --> 00:02:43.760
let's just point towards a variable we can name in anything but let's name it pages and be sure to include

35
00:02:43.760 --> 00:02:44.990
a comma after that.

36
00:02:46.370 --> 00:02:53.240
OK now let's just create a variable with this matching name and what we want this variable to be is

37
00:02:53.540 --> 00:03:03.380
an array where we use the Web pack HDMI all plug in once for each HDMI l file that we have.

38
00:03:03.380 --> 00:03:04.980
Let me show you how we can do that.

39
00:03:05.180 --> 00:03:06.830
So right above let config.

40
00:03:06.830 --> 00:03:14.870
We can say let pages equal and we're going to begin by working with filesystem extra.

41
00:03:14.900 --> 00:03:24.630
So F S E dot and we want to use a method named read dir sync within these parentheses.

42
00:03:24.640 --> 00:03:27.180
Let's begin working with our app folder right.

43
00:03:27.210 --> 00:03:30.870
Because that's where all of our HDMI all files will live.

44
00:03:30.870 --> 00:03:34.470
So quotes dot slash app.

45
00:03:34.550 --> 00:03:34.820
OK.

46
00:03:34.830 --> 00:03:42.330
Then after these parentheses let's say dot filter essentially this code is going to return an array

47
00:03:42.540 --> 00:03:49.920
of all the files in the app folder and then in JavaScript every array has access to the filter method.

48
00:03:49.980 --> 00:03:53.700
Now filter will return a new array that we can customize.

49
00:03:53.790 --> 00:04:00.480
So big picture this will include every single file and then it's the job of filter to say we only want

50
00:04:00.480 --> 00:04:03.950
files that end with dot each t M.L..

51
00:04:04.170 --> 00:04:07.560
So within these parentheses let's provide an anonymous function.

52
00:04:07.560 --> 00:04:10.400
Function parentheses curly brackets.

53
00:04:10.500 --> 00:04:13.380
Feel free to dropdown inside these parentheses.

54
00:04:13.380 --> 00:04:18.960
Let's include a parameter we can name it anything but I will name it file and then inside the body of

55
00:04:18.960 --> 00:04:28.350
this function we can say return the current file that we've looped to file dot ans with inside these

56
00:04:28.350 --> 00:04:32.350
parentheses quotes dot HDMI all cool.

57
00:04:32.370 --> 00:04:38.250
So altogether this will return an array with all of the files that end in dot HDMI.

58
00:04:38.610 --> 00:04:45.900
So at the very end of this where my cursor is right now we can say dot map map or let us generate a

59
00:04:45.900 --> 00:04:52.980
new array based on this array because instead of an array of just the file names we want an array of

60
00:04:53.040 --> 00:04:56.660
multiple HDMI web pack plug ins.

61
00:04:56.660 --> 00:05:01.910
Right we want to use the Web pack plug in once for each of our HDMI templates.

62
00:05:02.120 --> 00:05:05.420
So inside the map parentheses we give it an anonymous function.

63
00:05:05.470 --> 00:05:10.170
Function parentheses currently brackets within these parentheses.

64
00:05:10.170 --> 00:05:16.950
Let's give it a parameter page and then in the body of this function we can just return a new instance

65
00:05:17.040 --> 00:05:22.530
of the h t AML web pack plug in within these parentheses.

66
00:05:22.530 --> 00:05:28.110
Remember we give that plug in a configuration object in between these curly brackets we can dropdown.

67
00:05:28.170 --> 00:05:31.460
First we need to give it a property of file name.

68
00:05:31.470 --> 00:05:36.690
This is the file that gets generated automatically so that can literally just be the exact same name

69
00:05:36.690 --> 00:05:37.880
as our template.

70
00:05:38.010 --> 00:05:42.990
So that would be indexed on HDMI all or about Dot HDMI all comma.

71
00:05:42.990 --> 00:05:45.740
We also want to give it a property of template.

72
00:05:46.050 --> 00:05:49.960
So this is where we point towards the current file that we've looped to.

73
00:05:50.010 --> 00:05:53.090
I'm going to use back ticks instead of quotes.

74
00:05:53.280 --> 00:06:00.510
So right above the tab key on your keyboard and let's say dot slash go into the app folder slash and

75
00:06:00.510 --> 00:06:01.380
then dollar sign.

76
00:06:01.380 --> 00:06:04.090
Curly brackets page.

77
00:06:04.620 --> 00:06:04.950
OK.

78
00:06:04.980 --> 00:06:10.260
Now before we save this file I just realized that I spelled width wrong on this line of code.

79
00:06:10.260 --> 00:06:14.580
This should not be width as in the width of the rectangle.

80
00:06:14.580 --> 00:06:16.310
So get rid of the D.

81
00:06:16.350 --> 00:06:18.720
It should be W I T H.

82
00:06:18.870 --> 00:06:23.190
We are interested in the file that ends with DOT HDMI out.

83
00:06:23.280 --> 00:06:23.580
Cool.

84
00:06:23.610 --> 00:06:26.260
Let's go ahead and save this and test it out.

85
00:06:26.280 --> 00:06:31.110
So in the command line NPM run build

86
00:06:34.260 --> 00:06:34.510
OK.

87
00:06:34.520 --> 00:06:36.910
Let's check out our dist folder.

88
00:06:36.910 --> 00:06:37.760
So I was an app.

89
00:06:37.770 --> 00:06:44.570
If I go back up go into dist awesome we see index about in contact.

90
00:06:44.720 --> 00:06:47.550
Let me try opening up contact dot HDMI out.

91
00:06:48.200 --> 00:06:54.080
Let's go ahead and get rid of this annoying testing alert message within my main app dot J.S. remember

92
00:06:54.080 --> 00:06:55.920
I added alert testing.

93
00:06:56.030 --> 00:06:56.990
Get rid of that.

94
00:06:57.050 --> 00:07:01.010
Give that to save and you can run NPM run build one more time

95
00:07:05.920 --> 00:07:07.140
cool.

96
00:07:07.150 --> 00:07:11.200
So now you're free to create different separate pages at this point.

97
00:07:11.200 --> 00:07:17.390
Let's set things up so that our images or photographs get copied over to the dist folder.

98
00:07:17.440 --> 00:07:24.130
So back in our web pack config file we would only need to copy the images for our build task not our

99
00:07:24.130 --> 00:07:25.570
dev task.

100
00:07:25.570 --> 00:07:33.100
So down in if current task equals build down in this area where we are working with the plugins let's

101
00:07:33.100 --> 00:07:36.820
set things up so that each plug in call is on its own line.

102
00:07:36.820 --> 00:07:38.080
So this is easier to read.

103
00:07:38.110 --> 00:07:47.240
So maybe right before this first word of new push enter and then after this comma we can drop down and

104
00:07:47.240 --> 00:07:50.370
then in between these two closing parentheses here.

105
00:07:50.570 --> 00:07:56.370
In between those two we can add a comma and dropdown again OK.

106
00:07:56.380 --> 00:08:02.330
And now on this line let's call one more plug in so let's create a new instance.

107
00:08:02.470 --> 00:08:03.970
And I'm going to make up a name.

108
00:08:04.000 --> 00:08:06.590
But let's use the same names or on the same page.

109
00:08:06.610 --> 00:08:13.840
Let's call it run after compiled parentheses.

110
00:08:13.900 --> 00:08:14.290
OK.

111
00:08:14.320 --> 00:08:19.730
And now we can just go create our own plug in for web pack with this matching name.

112
00:08:19.750 --> 00:08:22.870
Why don't we go up to the very top of our file.

113
00:08:22.870 --> 00:08:31.750
It doesn't matter where but maybe right below our post CSX plug ins let's create a class with that matching

114
00:08:31.750 --> 00:08:38.320
name of run after compile curly brackets.

115
00:08:38.320 --> 00:08:44.650
Again you could have chose any name I chose a generic name like this so you could also perform any other

116
00:08:44.650 --> 00:08:51.050
tasks other than just copying the images folder within this class let's call apply.

117
00:08:51.250 --> 00:08:55.560
So apply parentheses curly brackets within these parentheses.

118
00:08:55.570 --> 00:09:06.190
Let's include compiler and then inside these curly brackets let's say compiler dot hooks dot done dot

119
00:09:06.250 --> 00:09:10.150
tap inside these parentheses we give it to arguments.

120
00:09:10.150 --> 00:09:12.880
The first is the name of our plug in.

121
00:09:12.970 --> 00:09:17.430
You could call it anything you call it your name or you could just say hello world.

122
00:09:17.500 --> 00:09:24.970
I will say copy images OK after that comma we want one more argument and this is a function that should

123
00:09:24.970 --> 00:09:26.280
actually run.

124
00:09:26.460 --> 00:09:32.890
So anonymous function function in parentheses curly brackets and I'm just going to use the FSC package

125
00:09:32.890 --> 00:09:33.180
again.

126
00:09:33.190 --> 00:09:39.820
So FSC dot copy sync so you can just give this to arguments.

127
00:09:39.820 --> 00:09:49.750
The first is the directory that you want to copy quotes dot slash go into app go into assets grab the

128
00:09:49.750 --> 00:09:52.420
images folder comma.

129
00:09:52.480 --> 00:09:56.050
The second argument is where you would want to copy it too.

130
00:09:56.290 --> 00:10:04.420
So quotes dot slash dist slash assets slash images.

131
00:10:04.420 --> 00:10:04.690
Cool.

132
00:10:04.690 --> 00:10:07.620
So that will copy everything inside the images folder.

133
00:10:07.640 --> 00:10:10.210
Let's go ahead and save this and test it out.

134
00:10:10.450 --> 00:10:14.890
So in the command line NPM run build.

135
00:10:15.160 --> 00:10:18.130
Let's look at our disk folder.

136
00:10:18.130 --> 00:10:18.610
Awesome.

137
00:10:18.610 --> 00:10:22.620
We see assets inside it images there are the files.

138
00:10:22.630 --> 00:10:24.100
So back in the browser.

139
00:10:24.100 --> 00:10:28.780
Remember I was previewing the contact file by refresh.

140
00:10:28.910 --> 00:10:30.270
Perfect.

141
00:10:30.320 --> 00:10:34.250
We just need to do one more thing before we can bring this lesson to a close.

142
00:10:34.640 --> 00:10:41.440
So you and DI as web developers are always going to be using the newest version of our web browser.

143
00:10:41.690 --> 00:10:46.070
Meaning we will have access to the latest and greatest javascript features.

144
00:10:46.130 --> 00:10:50.020
However we can't assume that everyone in our audience right.

145
00:10:50.060 --> 00:10:54.880
Everyone viewing our Web site will also be on the latest and greatest web browser.

146
00:10:54.950 --> 00:11:01.640
So let's set things up so that when we run our build task web pack adjusts our javascript so that it's

147
00:11:01.640 --> 00:11:09.010
backwards compatible we can continue to use modern javascript features like Arrow functions classes.

148
00:11:09.320 --> 00:11:10.450
So on and so forth.

149
00:11:10.460 --> 00:11:15.530
But our generated bundled file we'll use similar but older features.

150
00:11:15.530 --> 00:11:20.810
Big picture we don't need to change the way we are writing javascript but our code will work in a wider

151
00:11:20.810 --> 00:11:23.330
range of older browsers.

152
00:11:23.330 --> 00:11:24.760
Let me show you how to set this up.

153
00:11:24.800 --> 00:11:28.090
So in our command line we need to install a few packages.

154
00:11:28.250 --> 00:11:40.250
So npm install at Symbol babble forward slash core space for another package at Symbol babble forward

155
00:11:40.250 --> 00:11:50.750
slash preset dash EMV a space for one more package no at symbol this time just babble dash loader at

156
00:11:50.750 --> 00:11:55.050
the end be sure to include dash dash save dash Dev.

157
00:11:56.630 --> 00:11:58.520
OK let's go leverage these packages.

158
00:11:58.520 --> 00:12:07.670
So within our web pack config file within the if statement for our build task let's add a new line and

159
00:12:07.670 --> 00:12:16.640
we can say config dot module dot rules and we want to push a new item onto that array inside these parentheses

160
00:12:16.670 --> 00:12:20.630
let's add curly brackets to create a configuration object.

161
00:12:20.630 --> 00:12:23.360
So we want a property named test.

162
00:12:23.360 --> 00:12:31.040
This is where we say we only want this rule to apply for JavaScript files so forward slash backslash

163
00:12:31.130 --> 00:12:42.350
dot J S dollar sign forwards slash comma we want another property named exclude colon and we want to

164
00:12:42.350 --> 00:12:45.160
basically ignore the node modules folder.

165
00:12:45.380 --> 00:12:45.580
Right.

166
00:12:45.590 --> 00:12:50.250
Because there are JavaScript files in that folder that we don't want to worry about converting or trans

167
00:12:50.250 --> 00:12:59.330
piling so forward slash parentheses node underscore modules after the parentheses at a forward slash

168
00:12:59.330 --> 00:12:59.970
in a comma.

169
00:13:00.570 --> 00:13:00.850
OK.

170
00:13:00.860 --> 00:13:04.650
We also want a property named use colon.

171
00:13:04.730 --> 00:13:09.720
Curly brackets dropdown let's give it a property named loader.

172
00:13:09.770 --> 00:13:17.520
Give that a value of quotes babble dash loader comma the property of options.

173
00:13:17.540 --> 00:13:24.360
Set that to an object inside that we can drop down give it a property named presets colon.

174
00:13:24.410 --> 00:13:25.860
This will be an array.

175
00:13:26.000 --> 00:13:34.850
We only need one item in the arrays of quotes at symbol babble slash preset dash envy.

176
00:13:35.010 --> 00:13:40.400
OK let's go ahead and save this and just run one more build to make sure our javascript is still working

177
00:13:40.410 --> 00:13:45.770
so in the command line NPM run build.

178
00:13:45.920 --> 00:13:46.280
OK.

179
00:13:46.290 --> 00:13:49.270
And if I refresh my dist HDMI I'll file.

180
00:13:49.370 --> 00:13:51.410
You can see the javascript still works.

181
00:13:51.530 --> 00:13:59.090
Only now this generated file will work in a wider variety of Web browsers and that will bring this lesson

182
00:13:59.150 --> 00:14:00.530
to a close.

183
00:14:00.530 --> 00:14:02.550
This means that our disk folder.

184
00:14:02.570 --> 00:14:09.620
So if I go into travel site here it is dist the fact that this lesson is complete means that this folder

185
00:14:09.620 --> 00:14:13.160
is ready for us to send to a web host.

186
00:14:13.160 --> 00:14:19.610
And then our Web site will be made publicly available to the world to our friends family and colleagues

187
00:14:20.150 --> 00:14:24.140
pushing the Web site up onto the Web is a big milestone.

188
00:14:24.170 --> 00:14:26.930
So I'm really looking forward to our next lesson.

189
00:14:26.960 --> 00:14:29.330
Let's keep things rolling and I'll see you then.
