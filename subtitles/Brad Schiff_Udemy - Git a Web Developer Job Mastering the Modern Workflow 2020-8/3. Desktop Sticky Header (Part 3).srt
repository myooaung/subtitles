1
00:00:00,300 --> 00:00:05,290
So let's save this file and then jump in to app assets.

2
00:00:05,390 --> 00:00:09,750
Scripps modules sticky header.

3
00:00:10,080 --> 00:00:10,490
All right.

4
00:00:10,530 --> 00:00:12,320
Let's write some javascript.

5
00:00:12,480 --> 00:00:18,630
So the first thing we should do within our constructor is to create a new property that is a collection

6
00:00:18,870 --> 00:00:22,170
of all of our actual page section elements.

7
00:00:22,170 --> 00:00:30,600
So for example back in our HDMI all all of the actual page section divs have a class of page section.

8
00:00:30,840 --> 00:00:36,880
So within our javascript let's create a new property and name it page sections.

9
00:00:37,200 --> 00:00:39,030
And it should equal.

10
00:00:39,030 --> 00:00:43,610
Document doc query selector all.

11
00:00:43,710 --> 00:00:50,820
Be sure to include the all here because we want to select multiple elements parentheses quotes and dot

12
00:00:50,850 --> 00:00:55,210
because it has a class of page dash section.

13
00:00:55,620 --> 00:00:55,980
OK.

14
00:00:56,010 --> 00:00:59,940
So now we have this collection of all of our page sections.

15
00:00:59,940 --> 00:01:06,300
Now within our run on scroll method every time we scroll we just want to run a calculation once for

16
00:01:06,300 --> 00:01:10,740
each of those page sections to see if it has been scrolled to or not.

17
00:01:10,770 --> 00:01:16,560
So after the if else but still within the run on scroll method let's just start working with that collection

18
00:01:16,560 --> 00:01:23,000
of elements of this dot page sections and we want to do something once for each of them.

19
00:01:23,010 --> 00:01:31,080
So dot for each and let's give it an arrow function with exactly one parameter parameter of L short

20
00:01:31,080 --> 00:01:33,450
for element arrow symbol.

21
00:01:34,020 --> 00:01:37,760
And then this method doesn't exist yet but we can create it in just a moment.

22
00:01:37,800 --> 00:01:44,040
Let's say this dot calc section parentheses to call that method.

23
00:01:44,040 --> 00:01:45,860
I just made up this method name.

24
00:01:45,870 --> 00:01:51,250
The idea is we're going to calculate if the current page section has been scrolled to.

25
00:01:51,510 --> 00:01:58,800
Now when we call this method within the parentheses we want to pass it the current element so e l All

26
00:01:58,800 --> 00:01:59,000
right.

27
00:01:59,010 --> 00:02:02,480
Now let's go create a method with this matching name.

28
00:02:02,550 --> 00:02:06,920
So after our run on scroll method but still within our class.

29
00:02:06,930 --> 00:02:15,240
So right here let's create a new method with that name calc section parentheses curly brackets within

30
00:02:15,240 --> 00:02:16,300
these parentheses.

31
00:02:16,320 --> 00:02:19,530
Let's be sure to include a parameter to receive that argument.

32
00:02:19,560 --> 00:02:27,240
So you know short for element and within the body of this method before we even perform any extra calculations

33
00:02:27,480 --> 00:02:29,790
let's begin with an if statement.

34
00:02:29,850 --> 00:02:36,180
So if parentheses curly brackets and only if the following conditions are met do we need to perform

35
00:02:36,270 --> 00:02:43,680
any other calculations so the condition for this if statement will be only if the user has scrolled

36
00:02:43,680 --> 00:02:49,190
down far enough so that a section has entered into the viewport at all.

37
00:02:49,290 --> 00:02:57,300
And only if they have not scrolled down so far that the bottom edge of a section is now not in the browser's

38
00:02:57,300 --> 00:02:58,890
viewport at all.

39
00:02:58,890 --> 00:03:04,410
In other words if the section isn't in the browser's viewport at all we don't need to worry about any

40
00:03:04,410 --> 00:03:06,030
other calculations.

41
00:03:06,030 --> 00:03:16,790
So for the condition it will be if window dot scroll y plus window dot inner height.

42
00:03:17,400 --> 00:03:24,530
If those two combined are greater than the current elements offset top right.

43
00:03:24,540 --> 00:03:31,020
So if you scroll down far enough so you can at least see the very top edge of the section and so double

44
00:03:31,020 --> 00:03:34,290
Ampersand to include another condition that must be true.

45
00:03:34,470 --> 00:03:39,990
And I'm actually going to temporarily decrease the font size so this will all fit on a single line for

46
00:03:39,990 --> 00:03:41,160
the sake of this video.

47
00:03:41,610 --> 00:03:45,600
I know this font size might be difficult to read but at least it will all fit on the screen.

48
00:03:45,850 --> 00:03:51,270
And if you need to pause the video and magnify it or zoom in or get really close to the screen that's

49
00:03:51,270 --> 00:03:58,140
OK but Ampersand Ampersand for the second condition window dot scroll.

50
00:03:58,230 --> 00:04:04,080
Why should be less than the bottom edge of the current element.

51
00:04:04,080 --> 00:04:09,750
Now the web browser doesn't have a simple easy property that stores the bottom edge position but what

52
00:04:09,750 --> 00:04:18,430
we can do is grab the elements top position so l dot offset top plus the height of that element.

53
00:04:18,450 --> 00:04:21,300
So element dot offset height.

54
00:04:22,020 --> 00:04:27,870
OK so that is our long winded condition to make sure the element is on the screen at least if you need

55
00:04:27,870 --> 00:04:28,950
to pause the video.

56
00:04:28,980 --> 00:04:29,480
Go ahead.

57
00:04:29,490 --> 00:04:33,860
But in just a second I'm going to zoom back in the font size so it's easy to read.

58
00:04:33,950 --> 00:04:34,250
OK.

59
00:04:34,260 --> 00:04:40,110
Now within the curly brackets for the if statement we want to calculate how far down an element has

60
00:04:40,110 --> 00:04:41,010
been scrolled to.

61
00:04:41,520 --> 00:04:46,560
So for example let's take the transition as you're scrolling from our beginning and you're scrolling

62
00:04:46,560 --> 00:04:52,290
down into our features when we're about here we would want our beginning to still be selected as the

63
00:04:52,290 --> 00:05:00,100
current section but maybe once you scroll until about this threshold then we would want to select our

64
00:05:00,100 --> 00:05:03,190
features as the yellow or selected item.

65
00:05:03,190 --> 00:05:09,460
So we need to be aware of how tall the browser window is and what percent or how far you've scrolled

66
00:05:09,460 --> 00:05:11,060
the element into view.

67
00:05:11,110 --> 00:05:16,780
So this calculation is going to be a bit similar to what we set up when we were deciding when to reveal

68
00:05:16,780 --> 00:05:17,800
an item.

69
00:05:17,830 --> 00:05:26,680
So back in our Ed in the if statement let's create a variable let's name it scroll percent and set it

70
00:05:26,680 --> 00:05:27,920
to equal.

71
00:05:28,150 --> 00:05:31,380
And this is the same formula we used in our previous lesson.

72
00:05:31,450 --> 00:05:40,120
So the current element and then you'd get bounding client rect call it and then we want the Y property

73
00:05:40,570 --> 00:05:47,290
and then we want to divide that by the height of the web browser window dot enter height and then we

74
00:05:47,290 --> 00:05:49,470
want to multiply that by 100.

75
00:05:49,510 --> 00:05:52,660
So it seems like a percentage instead of a decimal.

76
00:05:52,660 --> 00:05:57,850
Now in a previous lesson we learned that if we can avoid asking the browser for information it's a good

77
00:05:57,850 --> 00:05:58,230
idea.

78
00:05:58,240 --> 00:05:58,510
Right.

79
00:05:58,570 --> 00:06:01,390
So instead of asking the browser how tall it is.

80
00:06:01,390 --> 00:06:06,580
That's something that we can store in memory and then we only need to update that if the user resize

81
00:06:06,580 --> 00:06:08,050
is the browser window.

82
00:06:08,050 --> 00:06:13,750
So before we move forward and actually use this value let's do this let's scroll up to the top of our

83
00:06:13,750 --> 00:06:18,340
file and in our constructor let's create a property named browser height.

84
00:06:18,340 --> 00:06:25,930
So this thought browser type and let's set that to equal window dot inner height and then we do need

85
00:06:25,930 --> 00:06:27,280
to babysit this property.

86
00:06:27,280 --> 00:06:27,520
Right.

87
00:06:27,550 --> 00:06:30,900
So when the user resize is the browser window we need to update this.

88
00:06:31,030 --> 00:06:36,970
Now in order to save a bunch of typing we can actually just copy and paste that function from our previous

89
00:06:36,970 --> 00:06:45,050
file write our Reveal on scroll file so within your app assets scripts modules folder jump in to reveal

90
00:06:45,050 --> 00:06:48,510
on scroll and down in the events method.

91
00:06:48,520 --> 00:06:54,370
Remember we have this area where we added an event listener to the window object for the V size event

92
00:06:54,910 --> 00:06:58,600
so you can just select these four lines of code that I've selected here.

93
00:06:58,720 --> 00:07:05,780
Copy them into your clipboard and then back in sticky header dot J.S. well within its events method.

94
00:07:05,950 --> 00:07:12,040
Right after this line just paste in your clipboard we don't need this console dot log line for testing

95
00:07:12,040 --> 00:07:19,960
purposes and in order for this to work we need to make sure that this file or module has access to D

96
00:07:19,960 --> 00:07:25,630
bounds so up at the top of this file we just need to import that it we've already imported throttle

97
00:07:25,990 --> 00:07:32,510
so you can just copy that line pasted in change throttle to D bounce then within load asked to change

98
00:07:32,500 --> 00:07:33,980
this to D bounce.

99
00:07:34,600 --> 00:07:40,860
OK so now down within our calculation instead of using window to enter height we can just use our property.

100
00:07:40,870 --> 00:07:41,430
Right.

101
00:07:41,470 --> 00:07:46,000
This dot browser hiked do the same thing here as well.

102
00:07:46,000 --> 00:07:50,100
So instead of window to enter height this dot browser right.

103
00:07:51,080 --> 00:07:51,360
OK.

104
00:07:51,370 --> 00:07:56,980
Now we can actually use this scroll percent value to determine if you've scrolled down far enough that

105
00:07:56,980 --> 00:08:01,430
a section should be considered the current or highlighted yellow section.

106
00:08:01,570 --> 00:08:07,930
So right below this line let's begin another if statement if it sees curly brackets this time for the

107
00:08:07,930 --> 00:08:20,980
condition let's say if scroll percent is less than 18 and so double Ampersand and scroll percent is

108
00:08:20,980 --> 00:08:24,510
greater than negative zero point one.

109
00:08:24,520 --> 00:08:28,350
Now these are values that I've already experimented and these numbers seem to work for me.

110
00:08:28,360 --> 00:08:31,450
But you're free to tweak these values a bit to your liking.

111
00:08:31,540 --> 00:08:37,210
So once a section has been scrolled into this sweet spot we want to consider it the current or highlighted

112
00:08:37,210 --> 00:08:39,130
yellow links section.

113
00:08:39,130 --> 00:08:46,060
So within the body of this if statement let's begin by giving a dom reference to the matching link that

114
00:08:46,090 --> 00:08:48,940
corresponds with the section that's been scrolled to.

115
00:08:49,030 --> 00:08:49,930
Let me show you what I mean.

116
00:08:49,930 --> 00:08:56,740
So let's create a variable and call it matching link and set it to equal.

117
00:08:56,740 --> 00:09:03,930
And then we can work with the current page section element so yell and then say dot get attributes.

118
00:09:04,120 --> 00:09:12,040
And remember earlier in this lesson in the HDL file we gave it a custom data attribute named data dash

119
00:09:12,460 --> 00:09:14,570
matching link.

120
00:09:14,610 --> 00:09:14,820
OK.

121
00:09:14,860 --> 00:09:18,180
So this value is going to be a CSX like selector.

122
00:09:18,190 --> 00:09:18,580
Right.

123
00:09:18,640 --> 00:09:25,240
A hash tag and then an I.D. and that will be able to select an element or the link up in the header.

124
00:09:25,240 --> 00:09:31,390
So now right below this that's the element that we want to select and give it a CSX modifier class to

125
00:09:31,390 --> 00:09:32,620
make it yellow.

126
00:09:32,620 --> 00:09:37,400
So we can just say document dot query selector.

127
00:09:37,720 --> 00:09:38,730
We don't need quotes.

128
00:09:38,740 --> 00:09:42,580
We want our selector to literally just be this value.

129
00:09:42,730 --> 00:09:47,990
So matching link and then we want to work with its class list.

130
00:09:48,040 --> 00:09:54,300
So dot class list dot add and let's give it a CSX modifier.

131
00:09:54,310 --> 00:09:58,340
Class of is current link.

132
00:09:58,450 --> 00:09:58,810
OK.

133
00:09:58,840 --> 00:10:04,310
However if you scrolled through the entire page that would eventually make all three links yellow.

134
00:10:04,320 --> 00:10:04,590
Right.

135
00:10:04,590 --> 00:10:09,820
By the time you scroll down to the bottom instead we only want the current link to be yellow.

136
00:10:09,870 --> 00:10:16,260
So anytime we make a new link the active link we want to remove that active yellow class from the other

137
00:10:16,260 --> 00:10:17,420
links.

138
00:10:17,550 --> 00:10:20,420
So right above this line that we just wrote.

139
00:10:21,270 --> 00:10:27,670
Let's remove this class from any of the site header links that are not the current matching link.

140
00:10:27,810 --> 00:10:34,860
So to do that we can just say document dot query selector all the all is important here because we're

141
00:10:34,860 --> 00:10:41,290
selecting multiple elements and instead of quotes here let's actually use to back ticks.

142
00:10:41,310 --> 00:10:45,820
So this character is to the left or the one key or right above the tab key.

143
00:10:46,050 --> 00:10:54,900
And let's say dot primary nav space for a descendant selector any element colon any element that is

144
00:10:54,900 --> 00:10:56,250
not.

145
00:10:56,250 --> 00:11:02,190
And then parentheses and then dollar sign signed curly brackets matching link.

146
00:11:02,550 --> 00:11:02,850
Okay.

147
00:11:02,880 --> 00:11:07,500
So that will give us a collection of elements that at the very end of this line we want to loop through

148
00:11:07,500 --> 00:11:07,770
them.

149
00:11:07,770 --> 00:11:13,160
So dot for each within these parentheses will give it an arrow function with one parameter.

150
00:11:13,170 --> 00:11:18,130
So element arrow symbol and then we'd want to work with that current element.

151
00:11:18,210 --> 00:11:25,190
Work with its class list and remove a class of is current link.

152
00:11:25,200 --> 00:11:25,780
OK.

153
00:11:25,800 --> 00:11:32,220
Now this code makes sense if you're scrolling down the page but we need to realize that the calculations

154
00:11:32,220 --> 00:11:35,870
should be different if you're scrolling back in the direction of up.

155
00:11:36,000 --> 00:11:41,430
So really quick let's adjust our code to be able to determine if you're scrolling up or if you're scrolling

156
00:11:41,430 --> 00:11:47,370
down within our run on scroll method right at the very start of the body of this method.

157
00:11:47,790 --> 00:11:51,570
Let's just call a method that doesn't exist yet but we will create in just a moment.

158
00:11:51,630 --> 00:11:57,180
So this dot determine scroll direction.

159
00:11:57,400 --> 00:11:57,710
Okay.

160
00:11:57,720 --> 00:12:05,520
Now let's just go create a method with this matching name so brand new method determine scroll direction

161
00:12:07,080 --> 00:12:09,270
to determine if you're scrolling up or down.

162
00:12:09,270 --> 00:12:14,990
We just need to compare the current scroll y value with the previous scroll y value.

163
00:12:15,090 --> 00:12:17,520
So here's what I would do up in the constructor.

164
00:12:17,520 --> 00:12:20,840
Let's take note of the initial scroll y value.

165
00:12:20,960 --> 00:12:25,920
So in the constructor before we call the events let's just create the properties so this dot and let's

166
00:12:25,920 --> 00:12:32,940
call it previous scroll Y instead it's equal window dot scroll y.

167
00:12:33,690 --> 00:12:39,420
Okay then down in our determined scroll direction method we can just start and if statements.

168
00:12:39,450 --> 00:12:49,230
So if let's also have an LS block for the condition if window dots scroll Y is greater than the previous

169
00:12:49,230 --> 00:12:49,680
value.

170
00:12:49,710 --> 00:12:56,730
So this dot previous scroll y if it's greater then that means you're scrolling down so we can store

171
00:12:56,730 --> 00:13:00,710
a new property on our overall object named scroll direction and set it to down.

172
00:13:01,050 --> 00:13:12,190
This dot scroll direction equals down else otherwise this dot scroll direction equals up.

173
00:13:12,390 --> 00:13:18,060
And then after the else block but still within this method let's update the previous value.

174
00:13:18,090 --> 00:13:24,870
So this dot previous scroll y should now equal the current window dot scroll on.

175
00:13:25,710 --> 00:13:25,950
Cool.

176
00:13:25,950 --> 00:13:31,410
Now let me show you how we're going to use this value down within our calculation for the if statement

177
00:13:31,410 --> 00:13:37,920
when we said scroll percent must be between 18 and negative zero point one right after that one.

178
00:13:37,920 --> 00:13:39,070
I want you to say.

179
00:13:39,270 --> 00:13:44,360
And so Ampersand Ampersand we're going to say and the scroll direction must be down.

180
00:13:44,370 --> 00:13:52,620
So this dot scroll direction double equals sign down then let's say or so right after the quotes four

181
00:13:52,620 --> 00:14:00,660
down will say pipe pipe to say or if we're scrolling back up we want to use different threshold values

182
00:14:00,870 --> 00:14:03,290
to determine if you've scrolled to the sweet spot.

183
00:14:03,510 --> 00:14:12,210
So let's say scroll percent should be less than thirty three and double ampersand.

184
00:14:12,210 --> 00:14:14,670
This is only if the scroll direction is up.

185
00:14:14,700 --> 00:14:21,230
So this dot scroll direction double equals sign up all right.

186
00:14:21,230 --> 00:14:22,920
Let's go ahead and save this file.

187
00:14:23,030 --> 00:14:29,240
But before we test things out in the browser let's first write a bit of CSX so that this is current

188
00:14:29,240 --> 00:14:33,110
link class actually makes the links yellow or orange.

189
00:14:33,110 --> 00:14:39,280
So within app assets styles modules let's open up.

190
00:14:39,280 --> 00:14:48,680
Primary nav CSX if we scroll down to the very bottom here is the rule targeting the link elements.

191
00:14:48,680 --> 00:14:53,780
And remember that our sticky NAV is only for medium screens and larger and it just so happens that we

192
00:14:53,780 --> 00:14:56,320
already have a media query here.

193
00:14:56,360 --> 00:15:03,350
So within this media query let's create a new rule and use the ampersand which will give us this selector

194
00:15:03,860 --> 00:15:13,520
and then we can simply say only if it has a class of is current link and we just want to give the currently

195
00:15:13,610 --> 00:15:14,630
a color.

196
00:15:14,630 --> 00:15:17,060
Here's a value for a nice light orange.

197
00:15:17,120 --> 00:15:20,670
So F A B B 6 9.

198
00:15:20,720 --> 00:15:24,190
Let's go ahead and save this and check things out in the browser.

199
00:15:24,260 --> 00:15:27,790
So if I refresh up at the top notice none of the links are yellow.

200
00:15:28,070 --> 00:15:35,210
But as I start scrolling down once the hour beginning section is in the viewport it becomes highlighted

201
00:15:35,750 --> 00:15:43,040
and as soon as a scroll down until the features area is taking up the majority of the screen you see

202
00:15:43,100 --> 00:15:44,600
it becomes highlighted.

203
00:15:44,600 --> 00:15:45,430
Perfect.

204
00:15:45,470 --> 00:15:49,780
If I keep scrolling down until testimonials is the main focus.

205
00:15:49,790 --> 00:15:51,170
Awesome.

206
00:15:51,230 --> 00:15:53,860
All right now before we bring this lesson to a close.

207
00:15:53,960 --> 00:15:56,770
There's one final feature that I want to implement.

208
00:15:56,900 --> 00:16:03,650
So currently if we actually click on these header links we are immediately within the course of one

209
00:16:03,650 --> 00:16:06,880
millisecond taken to the appropriate section.

210
00:16:07,250 --> 00:16:13,520
But I think the cherry on top for this page would be smooth scrolling so that way when we click on features

211
00:16:13,700 --> 00:16:18,020
the browser automatically smoothly scrolls to that section.

212
00:16:18,080 --> 00:16:21,600
Implementing this feature is a lot easier than you might think.

213
00:16:21,650 --> 00:16:24,200
So do this with me within our text editor.

214
00:16:24,200 --> 00:16:33,260
Within your styles folder look in the base folder for global dot see SS and up at the very top even

215
00:16:33,260 --> 00:16:41,480
above our body selector lets select the H CML element and we just need to give it one property which

216
00:16:41,480 --> 00:16:48,910
is scroll behavior colon and just set it to smooth.

217
00:16:49,820 --> 00:16:51,770
Let's go ahead and save this.

218
00:16:51,890 --> 00:16:56,630
Back in the browser I refresh and go up to the top when I click on our beginning.

219
00:16:58,200 --> 00:17:05,280
Perfect it smoothly scrolls to the destination instead of just instantly teleporting you perfect and

220
00:17:05,280 --> 00:17:11,310
that's actually going to bring this lesson to a close in our next lesson we will learn how to create

221
00:17:11,340 --> 00:17:14,490
our own modal or lightbox or overlay.

222
00:17:14,490 --> 00:17:19,410
If our visitors click the get in touch button in the header and overlay will appear that they can close

223
00:17:19,410 --> 00:17:25,620
out of and we will also open up that overlay if they click get started today in the large hero or if

224
00:17:25,620 --> 00:17:29,340
they click on get in touch in the footer.

225
00:17:29,340 --> 00:17:30,800
This should be a lot of fun.

226
00:17:30,810 --> 00:17:34,080
Let's keep rolling and I will see you in the next lesson.
