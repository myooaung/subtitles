1
00:00:02,250 --> 00:00:03,390
Hello everyone.

2
00:00:03,600 --> 00:00:07,360
In this video we're going to pick up right where we left off.

3
00:00:07,590 --> 00:00:13,590
So we're creating a copy of our Web site that we're going to send to a web host for the public to download

4
00:00:13,590 --> 00:00:19,140
and view so far within this automatically generated disk folder.

5
00:00:19,200 --> 00:00:26,040
We've set up our build task to output our bundled code in a few minutes from now we will set things

6
00:00:26,040 --> 00:00:34,650
up to extract our CSX from this big bundled file into its own separate traditional CSX file.

7
00:00:34,650 --> 00:00:42,030
However before we get to that I first want to enable a feature in web back only for our build task that

8
00:00:42,030 --> 00:00:45,940
will help our visitors download less data in the long run.

9
00:00:45,960 --> 00:00:47,600
Let me show you what I mean.

10
00:00:47,670 --> 00:00:52,010
So right now do this with me within our web pack config file.

11
00:00:52,050 --> 00:00:56,480
Let's find the if statement for our build task right.

12
00:00:56,610 --> 00:01:05,200
So if current task equals build maybe right after this config mode equals production we can just drop

13
00:01:05,200 --> 00:01:11,220
down and let's say config dot optimization.

14
00:01:12,060 --> 00:01:20,820
So this should equal an object within this object let's say split chunks.

15
00:01:21,150 --> 00:01:25,640
Colon and that should be set to an object itself.

16
00:01:25,690 --> 00:01:28,840
And let's just give it one property named chunks.

17
00:01:28,840 --> 00:01:32,330
Colon and then give it a value of quotes all.

18
00:01:32,920 --> 00:01:36,440
So all in all I just added these three highlighted lines of code.

19
00:01:36,670 --> 00:01:38,640
If you need to pause the video to type this in.

20
00:01:38,650 --> 00:01:39,730
That's OK.

21
00:01:39,880 --> 00:01:46,780
But once we're ready let's go ahead and save this and let's run our NPM run build task again.

22
00:01:46,840 --> 00:01:53,880
So in the command line let's test out our build process so NPM run build.

23
00:01:54,640 --> 00:01:57,220
Let's see what's different this time around.

24
00:01:57,250 --> 00:02:03,380
So if we go back into our disk folder instead of only two files we now have three.

25
00:02:03,430 --> 00:02:06,130
So this is our main overall bundle.

26
00:02:06,130 --> 00:02:10,570
This is the modal javascript module that should be loaded on the fly.

27
00:02:10,630 --> 00:02:12,380
And this brand new file.

28
00:02:12,490 --> 00:02:14,600
This is our vendor code.

29
00:02:14,860 --> 00:02:18,850
In this case vendor just means code that we didn't write.

30
00:02:18,880 --> 00:02:26,830
So for example the load Ash throttle and d bounce functions and also the lazy sizes javascript.

31
00:02:26,830 --> 00:02:28,960
Why would we want these in a separate file.

32
00:02:28,960 --> 00:02:36,040
Well imagine the scenario where the code that we write ourselves write our sticky header our Reveal

33
00:02:36,040 --> 00:02:37,550
on scroll.

34
00:02:37,660 --> 00:02:43,480
Imagine that that code is going to change very frequently so the visitors of our Web site would need

35
00:02:43,480 --> 00:02:47,190
to be continually downloading a new copy of this file.

36
00:02:47,200 --> 00:02:54,310
However if the load ash does bounce and throttle and if the lazy sizes packages if that code that we

37
00:02:54,310 --> 00:03:00,310
didn't write doesn't get updated very often there's no sense in forcing our visitors to re download

38
00:03:00,310 --> 00:03:05,980
that every time we want them to read download the code that we write in the long run.

39
00:03:05,980 --> 00:03:10,300
This can save our visitors from downloading quite a bit of unnecessary data.

40
00:03:10,900 --> 00:03:11,130
OK.

41
00:03:11,140 --> 00:03:18,280
Now with this in mind we need to think about the way that web browsers handle caching of files.

42
00:03:18,280 --> 00:03:24,960
So imagine we make a change to our Reveal on scrawl J.S. file and then we need to create a new bundle.

43
00:03:24,970 --> 00:03:30,790
Well we'd probably want that new bundle there generated file to in some way have a slightly different

44
00:03:30,790 --> 00:03:31,900
file name.

45
00:03:31,960 --> 00:03:37,150
So the web browser would know that it's different that it's changed and that it should read download

46
00:03:37,150 --> 00:03:41,860
the file from the server instead of using its own local cached copy.

47
00:03:41,860 --> 00:03:43,750
So let me show you what we can do.

48
00:03:43,990 --> 00:03:51,310
Back in our web packet config within the if statement for our build the task I want you to find the

49
00:03:51,340 --> 00:03:53,940
config dot output area.

50
00:03:54,070 --> 00:03:57,510
So instead of the file name just being bundled dot J.

51
00:03:57,520 --> 00:03:58,620
Yes.

52
00:03:58,780 --> 00:04:06,460
Well let's hollow out these quotes and instead type this in with me square brackets inside the square

53
00:04:06,460 --> 00:04:15,100
brackets type name and then dot after the square brackets new set of square brackets and inside these

54
00:04:15,100 --> 00:04:23,750
say chunk hash and then after the square brackets say dot J Yes.

55
00:04:23,760 --> 00:04:24,030
OK.

56
00:04:24,030 --> 00:04:31,740
Now at the very end of this line Let's go ahead and create a new line and let's say chunk file name

57
00:04:32,130 --> 00:04:37,230
colon quotes and at the end of the quotes at the very end of this line while we're at it.

58
00:04:37,230 --> 00:04:38,610
Be sure to include a comma.

59
00:04:39,420 --> 00:04:39,750
OK.

60
00:04:39,750 --> 00:04:44,240
Now within these quotes we can just use the exact same value that we used on this line.

61
00:04:44,850 --> 00:04:49,730
So you can just copy within these quotes and then paste that within these quotes.

62
00:04:50,680 --> 00:04:50,930
OK.

63
00:04:50,970 --> 00:04:53,520
Let's go ahead and save this.

64
00:04:53,640 --> 00:05:00,210
But before we run our build task in the command line I want you to go into your dist folder and go ahead

65
00:05:00,210 --> 00:05:07,730
and manually delete these three files just moving to the trash OK.

66
00:05:07,730 --> 00:05:10,220
Now back in our command line let's test things out.

67
00:05:10,250 --> 00:05:15,710
Let's run our build process so NPM run build

68
00:05:18,310 --> 00:05:18,760
OK.

69
00:05:18,770 --> 00:05:21,550
And then let's go check out our disk folder.

70
00:05:21,550 --> 00:05:22,210
Perfect.

71
00:05:22,210 --> 00:05:28,930
So we see two new changes instead of every file having just the basic name of bundled bundled one bundled

72
00:05:28,930 --> 00:05:29,670
two.

73
00:05:29,680 --> 00:05:31,840
Now we actually see their names right.

74
00:05:31,840 --> 00:05:36,750
Main modal the vendor's file for the main file.

75
00:05:36,910 --> 00:05:43,560
And then after that name we also see a string of characters that is the chunk hash.

76
00:05:43,720 --> 00:05:45,370
What in the world is a chunk cache.

77
00:05:45,910 --> 00:05:53,020
Well if we ran NPM run build once again these seemingly randomly generated strings of characters would

78
00:05:53,020 --> 00:05:58,090
stay exactly the same because none of our actual files changed.

79
00:05:58,270 --> 00:06:08,550
However do this with me if we go into our main app dot J.S. and just write an alert that says testing

80
00:06:09,310 --> 00:06:12,880
and we save that and we run NPM run build once again

81
00:06:17,490 --> 00:06:17,750
well.

82
00:06:17,760 --> 00:06:23,870
Notice now that I have a new copy of that main bundled file with a different chunk cash right.

83
00:06:23,910 --> 00:06:27,000
So its main dot and then the chunk cash string.

84
00:06:27,270 --> 00:06:28,250
So this is a new one.

85
00:06:28,800 --> 00:06:32,970
However nothing in these two files actually changed.

86
00:06:32,970 --> 00:06:36,370
So they have the identical or same chunk hash.

87
00:06:36,450 --> 00:06:37,420
This is great.

88
00:06:37,440 --> 00:06:44,310
This allows us to perform cash busting for the web browser visitors web browsers will see that the file

89
00:06:44,310 --> 00:06:46,800
has a new name and know that hey.

90
00:06:46,800 --> 00:06:49,220
Something must have changed in that file.

91
00:06:49,290 --> 00:06:52,050
I need to download the newest version of the file.

92
00:06:52,650 --> 00:06:57,110
However we obviously don't want to have two copies of the same file.

93
00:06:57,140 --> 00:07:03,790
So right now let's set things up so that every time we run our build process it begins by completely

94
00:07:03,790 --> 00:07:10,400
deleting this folder so that then only the most recent latest copies of each file exist.

95
00:07:10,450 --> 00:07:14,040
I would have thought that this is a feature that web pack includes by default.

96
00:07:14,050 --> 00:07:21,100
But as of today we actually need to go download a plug in to do this with me in your command line run

97
00:07:21,100 --> 00:07:33,050
the following command npm install in the name of the package is clean dash web pack dash plug in and

98
00:07:33,050 --> 00:07:35,960
be sure to include dash dash save Dev

99
00:07:38,760 --> 00:07:45,280
OK within our Web pack config file let's leverage that new plug in up at the very top.

100
00:07:45,520 --> 00:07:55,350
I will say contest let's say curly brackets clean web pack plug in let's set that to equal.

101
00:07:55,360 --> 00:08:02,100
And then just require it and so require in the exact name of the package was lowercase clean dash web

102
00:08:02,120 --> 00:08:03,530
pack dash plug in.

103
00:08:04,540 --> 00:08:05,020
OK.

104
00:08:05,110 --> 00:08:08,480
Now we can go leverage this within our build process.

105
00:08:08,500 --> 00:08:11,080
So let's find the if statement.

106
00:08:11,200 --> 00:08:20,200
So if current task equals build and then maybe below this configure optimization we can just say config

107
00:08:20,320 --> 00:08:23,740
dot plugins equals.

108
00:08:23,860 --> 00:08:28,750
And this should be an array so you can have multiple plugins if you'd like to.

109
00:08:28,810 --> 00:08:35,270
For now we can just have one item in this array so we would just create a new instance of.

110
00:08:35,270 --> 00:08:43,480
And then the name we gave it is clean web path plug in and instead of parentheses.

111
00:08:43,660 --> 00:08:43,930
OK.

112
00:08:43,940 --> 00:08:47,740
Let's give this a save and then to really test it out.

113
00:08:47,750 --> 00:08:54,400
Let's make another random change in our main JavaScript file so that it will have a new chunk cache.

114
00:08:54,470 --> 00:08:58,780
So you could just add a few random strings in this alert message just so it's different.

115
00:08:58,850 --> 00:09:00,090
Save that.

116
00:09:00,090 --> 00:09:02,490
And now let's run a fresh build process.

117
00:09:02,490 --> 00:09:07,100
So in the command line NPM run build

118
00:09:11,740 --> 00:09:17,060
cool so on my screen we saw there was an old copy of Maine and then it got deleted.

119
00:09:17,110 --> 00:09:21,930
Actually all the files were deleted but these two were instantly replaced.

120
00:09:21,940 --> 00:09:26,090
They still have the exact same chunk hash because they didn't actually change.

121
00:09:26,150 --> 00:09:33,130
And here we see the brand new latest copy of our main bundle with a new chunk cash value at this point

122
00:09:33,130 --> 00:09:39,820
let's change gears a bit and let's work on extracting the CSX out of this main bundle.

123
00:09:40,540 --> 00:09:45,730
And have it instead live in its own separate traditional CSX file.

124
00:09:45,850 --> 00:09:51,610
That way if we make a change to our CSX it doesn't force our visitors to have to download the entire

125
00:09:51,610 --> 00:09:52,590
bundle again.

126
00:09:52,720 --> 00:09:58,900
They could just re download the CSX file so let's go download the industry standard package to make

127
00:09:58,900 --> 00:10:03,180
that possible jump back into your command line and run this with me.

128
00:10:03,310 --> 00:10:15,790
Let's say npm install the package name is mini dash C S S dash extract dash plugin.

129
00:10:16,330 --> 00:10:21,010
Let's be sure to include dash dash saved EV and this package is great.

130
00:10:21,010 --> 00:10:25,930
Just in the last week alone it's been downloaded over 5 million times.

131
00:10:25,930 --> 00:10:34,120
So go ahead and press enter OK and then back in our web pack config file up at the very top.

132
00:10:34,130 --> 00:10:44,120
Let's import in that new package so contest mini C Ss extract plug in should equal.

133
00:10:44,120 --> 00:10:53,740
And then just require it in or require mini dash SSD dash track dash plug in.

134
00:10:53,960 --> 00:10:54,290
Okay.

135
00:10:54,290 --> 00:11:00,670
Now we actually need to leverage this plug in in two different locations in this config file.

136
00:11:00,860 --> 00:11:08,330
So first within our generic or shared configuration within the module property we see rules and then

137
00:11:08,330 --> 00:11:16,100
we have a rule that only applies to C Ss files and it's using the style loader and the CSX loader in

138
00:11:16,100 --> 00:11:18,520
the post CSX loader.

139
00:11:18,530 --> 00:11:23,540
Well we want to use a loader that that new extract plug in offers to us.

140
00:11:23,540 --> 00:11:30,140
However we only want to use it for our build task not for our dev task.

141
00:11:30,140 --> 00:11:38,600
Also we only want to use this style loader for dev but not for build so to handle the different situations

142
00:11:38,600 --> 00:11:40,090
here's what I would do.

143
00:11:40,130 --> 00:11:42,850
We can see that rules is an array right.

144
00:11:42,850 --> 00:11:44,410
The square brackets now.

145
00:11:44,450 --> 00:11:52,040
Right now there's only one rule the rule for our CSX files but what we can do is make this a variable

146
00:11:52,490 --> 00:11:57,020
and then modify it in the if statements for Dev and build accordingly.

147
00:11:57,020 --> 00:11:59,390
So here's what I would do within this array.

148
00:11:59,390 --> 00:12:00,660
The square bracket.

149
00:12:00,740 --> 00:12:03,140
Select the one rule that we have.

150
00:12:03,180 --> 00:12:10,810
So from Curly bracket to curly bracket like this and cut this into your clipboard in its place.

151
00:12:10,830 --> 00:12:13,580
Say C Ss config.

152
00:12:13,740 --> 00:12:19,170
Okay now we just need to create a variable with this matching name so maybe right above config we can

153
00:12:19,170 --> 00:12:27,110
say left CSX config equal and then paste in our clipboard.

154
00:12:27,130 --> 00:12:29,680
OK now in the code that we just pasted in.

155
00:12:29,700 --> 00:12:33,640
Be sure to delete style loader like this.

156
00:12:34,150 --> 00:12:41,940
OK now we can just modify this within the dev if statement to add style loader back in and also modify

157
00:12:41,940 --> 00:12:48,790
it within the build if statement to add in the C Ss extract plug we just download it.

158
00:12:48,870 --> 00:12:55,620
So first let's go into our if statement for the dev task and maybe write inside the curly brackets for

159
00:12:55,620 --> 00:13:02,290
that if statement we can just say C Ss config dot use.

160
00:13:02,370 --> 00:13:09,960
Remember that is an array so we can say dot on shift to add an item to the beginning of the array.

161
00:13:10,560 --> 00:13:17,700
So for the dev task we can just say quotes style dash loader OK and then let's scroll down to the if

162
00:13:17,700 --> 00:13:20,340
statement for our build task.

163
00:13:20,340 --> 00:13:27,240
If current task equals build right inside there we can just say C S S config doc.

164
00:13:27,240 --> 00:13:35,190
Use dot on shift and in this case we want to use the loader that came with that package we just downloaded

165
00:13:35,220 --> 00:13:44,220
from NPM so many CSX extract plug in dot loader.

166
00:13:45,150 --> 00:13:48,250
Okay that takes care of the loader situation.

167
00:13:48,270 --> 00:13:51,270
Now we just need to actually add this as a plug in.

168
00:13:52,230 --> 00:13:58,200
Luckily for us down here we already have config dot plug ins equals.

169
00:13:58,200 --> 00:14:03,720
So right now we just have one item in this array of plugins but right after we call the clean web back

170
00:14:04,080 --> 00:14:05,690
right here we can say comma.

171
00:14:06,540 --> 00:14:15,990
And then just create a new instance of mini CSX extract plug in parentheses at the end.

172
00:14:15,990 --> 00:14:22,380
Now inside these parentheses we want to give it an object so curly brackets and we just need to give

173
00:14:22,380 --> 00:14:30,630
it one option and that is file name so file name colon because I want to have fine grained control over

174
00:14:30,630 --> 00:14:33,960
the name of the CSX file that gets generated.

175
00:14:34,110 --> 00:14:35,770
So let's say quotes.

176
00:14:35,900 --> 00:14:43,050
So inside these quotes let's say styles dot and then square brackets inside the square brackets let's

177
00:14:43,050 --> 00:14:49,450
say chunk hash after the square brackets a dot CSX.

178
00:14:50,100 --> 00:14:59,540
OK let's go ahead and save this and test out our new build process so in the command line just run NPM

179
00:15:00,050 --> 00:15:01,550
run build

180
00:15:04,550 --> 00:15:04,860
OK.

181
00:15:04,900 --> 00:15:07,210
Let's go check our dist folder.

182
00:15:07,210 --> 00:15:07,900
Perfect.

183
00:15:07,900 --> 00:15:15,460
Here we see a separate traditional CSX SS file now by default it will not be compressed or mystified.

184
00:15:15,490 --> 00:15:20,540
So if I check the file size currently it's about 21 kilobytes.

185
00:15:20,650 --> 00:15:26,650
Let me show you how we can set things up so this file is modified or compressed back in our command

186
00:15:26,650 --> 00:15:27,010
line.

187
00:15:27,010 --> 00:15:38,190
I want you to install one more post CSF plug in with me to run this command npm install C S S nano.

188
00:15:38,200 --> 00:15:43,860
Be sure to include dash dash save Dev OK.

189
00:15:43,900 --> 00:15:50,470
Now we only want to run this nano package that will compress our C Ss within our bill the task not our

190
00:15:50,470 --> 00:15:51,880
dev task.

191
00:15:51,880 --> 00:15:58,960
So within if current task equals build maybe right below that C Ss config line we just wrote We can

192
00:15:58,960 --> 00:16:03,730
just say post CSX plug ins.

193
00:16:03,730 --> 00:16:09,460
Remember at the very top of this file we have a collection of plug ins with this name so we can just

194
00:16:09,460 --> 00:16:18,390
say dot push to add an item onto the end of this array of post plug ins and within these parentheses

195
00:16:18,420 --> 00:16:29,110
what we want to add is that CSX nano package so we can just say require quotes C S S nano.

196
00:16:29,740 --> 00:16:31,670
Let's go ahead and save this file.

197
00:16:31,810 --> 00:16:37,270
And now let's run our build process again and see how many kilobytes we saved on that CSX file.

198
00:16:37,510 --> 00:16:47,100
So NPM run build and if I inspect the newest CSX file.

199
00:16:47,100 --> 00:16:47,560
Cool.

200
00:16:47,580 --> 00:16:50,680
Now it's only 13 kilobytes now.

201
00:16:50,730 --> 00:16:56,340
Sure if you open up this generated file in a text editor there is zero white spacing.

202
00:16:56,340 --> 00:17:00,090
And this is impossible for humans to read but that doesn't matter.

203
00:17:00,090 --> 00:17:01,750
This is not our source code.

204
00:17:01,770 --> 00:17:06,270
This is just for the web browser to download and apply cool.

205
00:17:06,410 --> 00:17:11,890
That's going to bring this video but not this lesson to a close in the next video.

206
00:17:11,900 --> 00:17:19,520
We will set things up so that our disk folder also copies over our h t AML files as well as our images

207
00:17:19,520 --> 00:17:20,990
or photographs.

208
00:17:21,020 --> 00:17:23,260
Let's keep things rolling and I'll see you then.
