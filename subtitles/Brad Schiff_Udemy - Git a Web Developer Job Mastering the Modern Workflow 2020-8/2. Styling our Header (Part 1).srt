1
00:00:05,010 --> 00:00:06,510
Hello everyone.

2
00:00:06,510 --> 00:00:12,390
In this lesson we will begin styling one of the most important areas of our site the header.

3
00:00:12,450 --> 00:00:18,660
So in this lesson we will be transforming this very top section of content into what we see in the design

4
00:00:18,660 --> 00:00:21,390
file which is this.

5
00:00:21,390 --> 00:00:28,080
Now before we begin working on setting up the logo or the transparent blue bar or the navigation why

6
00:00:28,080 --> 00:00:34,250
don't we first make sure that we are working within a new get branch dedicated to this header effort.

7
00:00:34,290 --> 00:00:40,680
So over in the command line we can't create a brand new branch and switch to it in one move by typing

8
00:00:40,680 --> 00:00:47,610
get check out dash B and let's name this new branch simply header.

9
00:00:47,790 --> 00:00:55,380
All right and if you haven't already make sure that NPM run dev is running in one of your command lines.

10
00:00:55,430 --> 00:00:55,740
OK.

11
00:00:55,740 --> 00:01:01,350
At this point we have a new get branch and our Web packed dev server is up and running.

12
00:01:01,350 --> 00:01:04,510
Let's go ahead and begin styling this content.

13
00:01:04,680 --> 00:01:10,140
So let's jump into our text editor and within our each team e-mail file.

14
00:01:10,140 --> 00:01:12,460
Let's look for the header content.

15
00:01:12,750 --> 00:01:15,140
So right underneath the opening body tag.

16
00:01:15,140 --> 00:01:17,190
Here we see the header.

17
00:01:17,220 --> 00:01:22,660
Let's go ahead and give this header element a class so we can target it with our CSX.

18
00:01:22,680 --> 00:01:26,260
Let's give it a class name of site dash header.

19
00:01:26,310 --> 00:01:28,090
All right let's save this file.

20
00:01:28,140 --> 00:01:34,050
And now let's create a brand new CSX file dedicated to this new class name.

21
00:01:34,140 --> 00:01:44,950
So within our app assets styles modules folder let's create a new file let's name it underscore site

22
00:01:45,040 --> 00:01:55,020
dash header dot CSX let's create these selector for that class so dot site header let's save this file

23
00:01:55,080 --> 00:02:01,970
and before we forget let's go into our main style sheet and import in the new file.

24
00:02:01,970 --> 00:02:09,510
So import modules underscore site header let's save this and then jump back to our brand new site header

25
00:02:09,510 --> 00:02:10,390
file.

26
00:02:10,440 --> 00:02:11,000
All right.

27
00:02:11,010 --> 00:02:14,250
And what's the first bit of CSX that we should write.

28
00:02:14,280 --> 00:02:20,820
Well if we look at the design file the first thing that I notice is that the header content is overlapping

29
00:02:20,910 --> 00:02:24,360
or is overlaid on top of the large hero section.

30
00:02:24,540 --> 00:02:29,820
And currently in the browser our header section is occupying its own space.

31
00:02:29,940 --> 00:02:33,150
And then the large hero section begins.

32
00:02:33,150 --> 00:02:39,270
So it's almost as if we need to take the header out of the normal flow of the page so that the large

33
00:02:39,270 --> 00:02:42,090
hero section can slide up underneath it.

34
00:02:42,090 --> 00:02:48,630
We can do that by telling the site header to be positioned absolutely so position absolute.

35
00:02:48,720 --> 00:02:51,330
So let's save this and check the browser.

36
00:02:51,330 --> 00:02:51,630
All right.

37
00:02:51,630 --> 00:02:57,990
So it appears that our header has disappeared but really it's layered underneath the large hero section.

38
00:02:57,990 --> 00:03:04,170
This is because by default when two HDMI elements are positioned in a way where they will overlap the

39
00:03:04,170 --> 00:03:08,250
element that comes later in the HMO will sit on top.

40
00:03:08,280 --> 00:03:09,700
It will be the top layer.

41
00:03:09,750 --> 00:03:15,760
However we can customize which piece of content will sit on top by using z index.

42
00:03:15,780 --> 00:03:22,680
So on site header we can simply say z index to the large hero block that is currently overlapping our

43
00:03:22,680 --> 00:03:25,500
site header doesn't have a z index value at all.

44
00:03:25,650 --> 00:03:29,850
And whichever element has a higher z index value will be placed on top.

45
00:03:30,360 --> 00:03:37,170
So if we save this we see that our z index value brought the site header to the front.

46
00:03:37,230 --> 00:03:42,510
I think the next thing we should work on is the transparent blue background that we see in the design

47
00:03:42,510 --> 00:03:43,470
file.

48
00:03:43,470 --> 00:03:51,440
So over in our CSX let's give our site header a background color because we want the color to be transparent.

49
00:03:51,450 --> 00:03:53,590
We will use RGA.

50
00:03:53,670 --> 00:04:02,500
Now I know that the red green blue values for our main blue variable are actually 47 85 114.

51
00:04:02,580 --> 00:04:07,230
And in terms of Alpha transparency let's set this to be only 30 percent visible.

52
00:04:07,800 --> 00:04:13,980
So let's check this out in the browser we see that the transparent blue is being applied successfully

53
00:04:14,400 --> 00:04:17,650
but really quickly I want to address a question you might have.

54
00:04:17,790 --> 00:04:23,840
You might be wondering how you were supposed to figure out the red green and blue values of a color.

55
00:04:23,880 --> 00:04:32,070
So for example in our styles base folder within variables that CSX we know that our main blue color

56
00:04:32,100 --> 00:04:35,610
has a hexadecimal color code of this value.

57
00:04:35,610 --> 00:04:38,850
But how do we find the RG B equivalent of this color.

58
00:04:39,240 --> 00:04:45,870
Well you could paste this value into an app like photoshop or illustrator or sketch but what if you

59
00:04:45,870 --> 00:04:48,390
don't have access to an app like that.

60
00:04:48,390 --> 00:04:50,300
Well let me show you another way.

61
00:04:50,340 --> 00:04:53,330
So back in our site headed up CSX.

62
00:04:53,520 --> 00:04:59,550
Wouldn't it be nice if instead of listing the RG B values we could simply include a hexadecimal color

63
00:04:59,550 --> 00:05:04,680
code here so we could say main blue and make it only 30 percent visible.

64
00:05:04,680 --> 00:05:05,840
Now this is not valid.

65
00:05:05,850 --> 00:05:13,670
CSX the web browser would have no idea how to interpret this but post CSX can save the day.

66
00:05:13,800 --> 00:05:20,970
We can install a post CSX plug in that will automatically convert hexadecimal color codes inside an

67
00:05:20,970 --> 00:05:25,650
RGA parentheses into the corresponding red green and blue values.

68
00:05:25,740 --> 00:05:28,350
So then we can write code like this.

69
00:05:28,350 --> 00:05:35,160
So in order to download and install a new post CSX plug in let's jump to the command line in this one

70
00:05:35,160 --> 00:05:36,900
where we're running our web pack task.

71
00:05:36,900 --> 00:05:39,090
You can just press control see.

72
00:05:39,090 --> 00:05:39,480
All right.

73
00:05:39,480 --> 00:05:42,540
And what we want to do is install a package from NPM.

74
00:05:42,690 --> 00:05:53,270
So npm install packages post CSX dash hacks r g b a.

75
00:05:53,490 --> 00:05:58,980
And then at the end be sure to include dash dash save dash death.

76
00:05:59,040 --> 00:05:59,400
All right.

77
00:05:59,400 --> 00:06:02,390
Now that we have that package let's go leverage it.

78
00:06:02,430 --> 00:06:09,300
So to do that jump into your web pack dot config dot J.S. file towards the top.

79
00:06:09,300 --> 00:06:16,110
We have this array named post CSX plug ins maybe right before the final auto prefix or lines right above

80
00:06:16,110 --> 00:06:26,830
that line with a new one and say require parentheses quotes and its name was post CSX dash hacks.

81
00:06:26,830 --> 00:06:28,150
RG B.A..

82
00:06:28,350 --> 00:06:32,360
Be sure to include a comma at the very end of that new line.

83
00:06:32,420 --> 00:06:36,330
All right let's go ahead and save this file and then back in the command line.

84
00:06:36,330 --> 00:06:38,610
Let's tell Webb pack to begin running again.

85
00:06:38,640 --> 00:06:42,580
So NPM run Dev.

86
00:06:42,750 --> 00:06:42,990
All right.

87
00:06:42,990 --> 00:06:46,580
That will allow us to preview the site in the web browser once again.

88
00:06:46,590 --> 00:06:51,310
And now if we jump back to our site header dot CSX file.

89
00:06:51,330 --> 00:06:54,490
Let's take this code syntax for a spin.

90
00:06:54,490 --> 00:07:00,160
So let's just test it out and say that it should be 95 percent visible.

91
00:07:00,210 --> 00:07:01,100
Looks like it's working.

92
00:07:01,110 --> 00:07:07,370
So we can try 50 percent and we can put it back to 30 percent.

93
00:07:07,370 --> 00:07:13,760
So I know that was a bit of a tangent about RGA and hex colors but hopefully you find this syntax useful

94
00:07:13,880 --> 00:07:16,400
and you can even use it in future projects.

95
00:07:16,400 --> 00:07:16,670
All right.

96
00:07:16,670 --> 00:07:18,490
So back to the task at hand.

97
00:07:18,710 --> 00:07:22,860
The next thing that we should probably work on is making our site header.

98
00:07:22,880 --> 00:07:25,400
Use the full available width.

99
00:07:25,400 --> 00:07:29,030
Currently we see that it's only using this much horizontal space.

100
00:07:29,030 --> 00:07:35,510
And this is because when an element is positioned absolutely by default it will try to shrink wrap and

101
00:07:35,510 --> 00:07:39,380
only use as much space as it needs to fit its content.

102
00:07:39,380 --> 00:07:48,340
We can adjust this in our CSX by simply telling this element to have a width of 100 percent.

103
00:07:48,360 --> 00:07:48,930
All right.

104
00:07:48,930 --> 00:07:55,070
Next why don't we adjust things so that this content doesn't sit up against the very far left edge.

105
00:07:55,080 --> 00:08:00,780
Why don't we go ahead and leverage our wrapper class so that way our header will use the same universal

106
00:08:00,780 --> 00:08:03,640
margin we've been using throughout the design.

107
00:08:03,750 --> 00:08:09,750
So over in our H2 CML we want to wrap all of this content within a new div.

108
00:08:09,750 --> 00:08:18,600
So let's cut this to our clipboard and create a div that has a class of wrapper and then we can simply

109
00:08:18,600 --> 00:08:23,210
paste the content back in all right.

110
00:08:23,210 --> 00:08:28,970
If we check out the design file again the next thing that I notice is that the get in touch button should

111
00:08:28,970 --> 00:08:35,390
be positioned against the right edge of the header and currently in the browser it is positioned here.

112
00:08:35,480 --> 00:08:36,390
So let's do this.

113
00:08:36,410 --> 00:08:38,880
Let's jump over to our h t demo.

114
00:08:39,020 --> 00:08:41,120
Here is the get in touch button.

115
00:08:41,180 --> 00:08:44,520
Let's actually wrap it in its own div.

116
00:08:44,570 --> 00:08:52,450
Let's give that div a class of site header underscore underscore button container.

117
00:08:52,670 --> 00:08:53,860
Let's close out that div.

118
00:08:53,870 --> 00:08:55,790
Let's indent the button.

119
00:08:55,790 --> 00:08:56,700
Let's save this.

120
00:08:56,720 --> 00:08:59,420
And then over in our site header CSX file.

121
00:08:59,420 --> 00:09:02,860
Let's create a new rule that targets that element.

122
00:09:02,900 --> 00:09:09,350
So button container and let's simply float it to the right.

123
00:09:09,360 --> 00:09:09,740
All right.

124
00:09:09,750 --> 00:09:12,520
So we see that that change is in place next.

125
00:09:12,720 --> 00:09:17,640
Let's go ahead and position these navigation links so that they sit here.

126
00:09:17,640 --> 00:09:25,390
Let's jump into our HMO here is the NAV element for those navigation links.

127
00:09:25,410 --> 00:09:29,580
Let's give this element a class so we can target it with our CSX.

128
00:09:29,580 --> 00:09:34,440
Now we could consider this nav an element that belongs to the site header block.

129
00:09:34,830 --> 00:09:40,650
But remember that in Bem it's OK to nest one block inside another block.

130
00:09:40,650 --> 00:09:46,280
And if we look at the design file to me this link styling feels very generic.

131
00:09:46,350 --> 00:09:50,770
It feels like a design pattern that might be used in the future on another page.

132
00:09:50,820 --> 00:09:51,150
Right.

133
00:09:51,150 --> 00:09:56,790
Because having links in an unordered list and wanting them to be displayed horizontally like this is

134
00:09:56,790 --> 00:09:58,850
a pretty common occurrence in web design.

135
00:09:59,100 --> 00:10:03,930
So I'm going to consider that it's own block and let's name it.

136
00:10:04,020 --> 00:10:13,300
Primary nav let's save this file and next let's create a brand new CSX file dedicated to this class.

137
00:10:13,370 --> 00:10:18,360
So within our styles modules folder let's create a new file.

138
00:10:18,690 --> 00:10:20,630
Let's name it underscore.

139
00:10:20,700 --> 00:10:30,240
Primary nav dot CSX let's create the selector for that class of DOT primary nav.

140
00:10:30,240 --> 00:10:31,180
Let's save that.

141
00:10:31,200 --> 00:10:39,380
And before we forget let's jump into our main styles dot CSX file and import that new file.

142
00:10:39,380 --> 00:10:42,770
So modules underscore.

143
00:10:42,770 --> 00:10:44,530
Primary nav.

144
00:10:44,840 --> 00:10:47,450
And let's jump back to the new primary now file.

145
00:10:47,930 --> 00:10:51,140
So what's the first bit of CSX that we want to write.

146
00:10:51,140 --> 00:10:56,600
Well if we check out the browser we want to go ahead and float this content to the right so that it's

147
00:10:56,600 --> 00:10:57,920
positioned here.

148
00:10:57,920 --> 00:11:04,480
However because we are trying to create a reusable block for this navigation I don't want the baseline

149
00:11:04,490 --> 00:11:07,100
styling to be floated to the right.

150
00:11:07,100 --> 00:11:16,160
So I'm actually going to give that element in our HDD CML a modified class of primary nav dash dash

151
00:11:16,800 --> 00:11:17,490
pull.

152
00:11:17,600 --> 00:11:18,310
Right.

153
00:11:18,350 --> 00:11:19,180
Let's save that.

154
00:11:19,190 --> 00:11:26,220
And now back in primary nav CSX let's create a modifier rule so dash dash pull.

155
00:11:26,270 --> 00:11:27,410
Right.

156
00:11:27,560 --> 00:11:31,390
And we can simply tell it to float to the right next.

157
00:11:31,400 --> 00:11:37,430
Why don't we adjust the default margin and padding and bulleted list styling of these elements.

158
00:11:37,490 --> 00:11:44,930
So if we check our HMO we want to remove the default padding and margin on this unordered list and then

159
00:11:44,930 --> 00:11:48,230
we want to tell the list items to no longer have a bullet.

160
00:11:48,680 --> 00:11:55,760
Now if I was going to follow the Bem philosophy 100 percent I would give a class to this element named

161
00:11:55,910 --> 00:12:03,110
primary nav underscore underscore list and I would give each list item element a class of primary nav

162
00:12:03,290 --> 00:12:10,360
underscore underscore item and I would even give each link a class like primary nav underscore underscore

163
00:12:10,360 --> 00:12:11,330
the link.

164
00:12:11,330 --> 00:12:16,280
However this is one area where I actually disagree with the best methodology.

165
00:12:16,280 --> 00:12:24,080
Our primary nav block has a very specific purpose to styled lists of navigation links so I can't imagine

166
00:12:24,080 --> 00:12:31,280
a situation where we don't use this exact H TMM pattern or in other words I fail to see how using generic

167
00:12:31,280 --> 00:12:37,600
type selectors and descendants selectors in this situation would have any undesired side effects.

168
00:12:37,670 --> 00:12:43,940
So I'm just going to jump to our primary nav file and I'm going to say that any unordered lists that

169
00:12:43,940 --> 00:12:50,790
live within the primary nav should have zero margin and zero padding.

170
00:12:50,950 --> 00:12:58,210
And then I'm going to say that any list items within primary nav should have list style none to remove

171
00:12:58,210 --> 00:12:59,180
the bullets.

172
00:12:59,320 --> 00:13:05,400
And I also want them to be floated to the left so that they will all sit on one line.

173
00:13:05,410 --> 00:13:11,190
And because I floated all of them I want the parent element the unordered list to use our clear fix.

174
00:13:11,530 --> 00:13:15,130
So I can say mix in clear fix.

175
00:13:15,130 --> 00:13:17,980
Let's check this out in the browser.

176
00:13:18,110 --> 00:13:22,610
Let's go ahead and add horizontal spacing in between each of these links.

177
00:13:22,670 --> 00:13:32,130
So within our CSX for each list item I'm just going to say padding right 20 pixels.

178
00:13:32,360 --> 00:13:33,490
That looks better.

179
00:13:33,500 --> 00:13:36,660
Let's go ahead and make these links white instead of orange.

180
00:13:36,680 --> 00:13:42,740
And let's also remove their underline so we can create a new rule that targets any links within primary

181
00:13:42,740 --> 00:13:49,050
nav color should be white and we can say text decoration.

182
00:13:49,220 --> 00:13:50,600
None.

183
00:13:50,600 --> 00:13:56,310
Let's save this the font for these links actually looks a bit too bold to me.

184
00:13:56,310 --> 00:14:04,080
So let's reduce that let's say font weight 300 that looks better.

185
00:14:04,080 --> 00:14:09,420
We can fine tune the vertical positioning of these links in just a moment but for now I want to check

186
00:14:09,420 --> 00:14:16,230
out the design file and I want to point out that the height of this transparent blue bar is determined

187
00:14:16,290 --> 00:14:23,000
by the height of this content not of the logo but in the browser.

188
00:14:23,310 --> 00:14:27,770
We see that because our logo is taller than any of this content.

189
00:14:27,930 --> 00:14:32,230
The transparent blue bar is expanding vertically to fit the logo.

190
00:14:32,250 --> 00:14:38,670
So I think what we need to do if we check out the design file again is remove the logo from the natural

191
00:14:38,670 --> 00:14:40,120
flow of the page.

192
00:14:40,140 --> 00:14:45,690
That way the containing element that gives us the transparent blue background won't even be aware that

193
00:14:45,690 --> 00:14:47,930
the logo exists.

194
00:14:47,940 --> 00:14:55,770
So in order to do that let's go ahead and target this logo area in our HDMI URL.

195
00:14:55,790 --> 00:14:57,940
Here is the logo graphic.

196
00:14:58,010 --> 00:15:05,690
Let's go ahead and wrap it in a new div and let's give that new div a class of site header underscore

197
00:15:05,690 --> 00:15:07,820
underscore logo.

198
00:15:07,820 --> 00:15:11,750
Let's close out that new div and indent the image.

199
00:15:11,750 --> 00:15:16,730
Let's go ahead and save this and then jump into our site header CSX file.

200
00:15:16,760 --> 00:15:21,620
Let's create a new rule that targets the logo.

201
00:15:21,620 --> 00:15:28,370
And in order to take it out of the natural flow of the page like this let's just tell it to be positioned.

202
00:15:28,370 --> 00:15:31,910
Absolutely perfect.

203
00:15:31,910 --> 00:15:37,520
So now the height of the transparent blue bar is being determined by this content.

204
00:15:37,520 --> 00:15:40,030
Let's finish styling the logo area.

205
00:15:40,670 --> 00:15:45,500
So if we check out the design file we want to give that area a blue background.

206
00:15:45,500 --> 00:15:47,720
This looks like our main blue color.

207
00:15:47,720 --> 00:15:56,930
So back in our CSX within the logo rule let's say background color should use our main blue variable

208
00:15:59,150 --> 00:16:03,950
all right so that gave us the background color but now we need to add a bit of padding around the logo

209
00:16:03,950 --> 00:16:04,820
image.

210
00:16:04,820 --> 00:16:09,650
So let's say padding if we check the design file.

211
00:16:09,680 --> 00:16:20,650
This looks like about 25 pixels of vertical padding and about 36 pixels of horizontal padding.

212
00:16:20,650 --> 00:16:27,600
So we can just say 25 pixels and 36 pixels looks good.

213
00:16:27,610 --> 00:16:33,340
Next let's work on the vertical spacing above and below this content.

214
00:16:33,760 --> 00:16:39,730
If we reference the design file above and below the get in touch button it looks like there is about

215
00:16:40,150 --> 00:16:42,610
10 pixels of vertical spacing.

216
00:16:42,610 --> 00:16:49,900
So in order to add that spacing in the browser let's simply give our main site header rule a bit of

217
00:16:49,900 --> 00:16:50,890
vertical padding.

218
00:16:50,890 --> 00:16:52,630
So 10 pixels.

219
00:16:52,630 --> 00:16:54,580
And it doesn't need any horizontal padding.

220
00:16:54,610 --> 00:16:57,720
So we can say zero.

221
00:16:57,730 --> 00:16:58,150
All right.

222
00:16:58,150 --> 00:17:03,970
So that gave us the vertical spacing we wanted in terms of this button but it also pushed our logo down

223
00:17:04,000 --> 00:17:05,410
10 pixels.

224
00:17:05,410 --> 00:17:12,550
Now we can fix the positioning of this logo by jumping into the logo rule and simply saying that its

225
00:17:12,550 --> 00:17:16,680
top position should be zero.

226
00:17:16,800 --> 00:17:17,780
Perfect.

227
00:17:17,790 --> 00:17:23,130
The next thing that I notice is that we should adjust the vertical positioning of these links.

228
00:17:23,130 --> 00:17:28,460
We want the links to appear as if they are vertically centered within the available transparent blue

229
00:17:28,470 --> 00:17:33,320
height we can achieve that by simply giving the links a bit of vertical padding.

230
00:17:33,320 --> 00:17:40,980
So within our CSX we are interested in the primary nav file and within the rule that targets links we

231
00:17:40,980 --> 00:17:43,420
want to add a bit of vertical padding.

232
00:17:43,980 --> 00:17:45,440
Let's say five pixels.

233
00:17:45,450 --> 00:17:48,840
And we don't need any horizontal padding.

234
00:17:48,860 --> 00:17:49,280
All right.

235
00:17:49,280 --> 00:17:52,290
So that five pixels clearly wasn't enough.

236
00:17:52,310 --> 00:17:57,500
Now in situations like this where it's difficult to guess and fine tune the padding value.

237
00:17:57,500 --> 00:18:04,250
What I like to do is right click on one of these links and click inspect that will open your developer

238
00:18:04,250 --> 00:18:04,860
tools.

239
00:18:04,880 --> 00:18:11,180
And with that link selected in the right hand section of the screen we see all of the CSX being applied

240
00:18:11,180 --> 00:18:15,220
to the element we can actually click on this padding declaration.

241
00:18:15,350 --> 00:18:22,640
And if we place our text cursor on that five pixel value we can actually use the arrow keys on our keyboard

242
00:18:23,360 --> 00:18:25,850
to increase or decrease that value.

243
00:18:25,850 --> 00:18:31,520
And you can see that the links are being adjusted in real time so you can use this to find that perfect

244
00:18:31,520 --> 00:18:33,240
sweet spot value.

245
00:18:33,290 --> 00:18:40,130
So to me it looks like twelve is the perfect value so we can just go back into our text editor and adjust

246
00:18:40,130 --> 00:18:41,060
that to twelve

247
00:18:43,610 --> 00:18:49,640
perfect and that will actually bring part one of this lesson to a close at this point.

248
00:18:49,640 --> 00:18:54,950
Our hairstyles look good on a large screen so you might have guessed that in part two of the lesson

249
00:18:55,190 --> 00:19:01,010
we will test our header on a small screen and make any design adjustments that are necessary.

250
00:19:01,010 --> 00:19:02,590
It should be a lot of fun.

251
00:19:02,600 --> 00:19:06,080
Let's keep rolling along and I will see you in part to.
