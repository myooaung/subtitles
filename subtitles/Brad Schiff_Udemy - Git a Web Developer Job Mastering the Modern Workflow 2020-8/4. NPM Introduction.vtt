WEBVTT
1
00:00:05.520 --> 00:00:06.880
Hello everyone.

2
00:00:07.020 --> 00:00:15.750
In this lesson we will learn about NPM NPM stands for node package manager and in this lesson we will

3
00:00:15.750 --> 00:00:17.940
cover three main things.

4
00:00:17.940 --> 00:00:24.150
Number one we will answer the question of not only what is node package manager but what is package

5
00:00:24.150 --> 00:00:25.530
management in general.

6
00:00:25.530 --> 00:00:27.500
And why would we use it.

7
00:00:27.510 --> 00:00:34.710
Number two we will review what types of files and packages we hope to find on NPM.

8
00:00:34.710 --> 00:00:38.970
And finally number three we will have a hands on demo.

9
00:00:38.970 --> 00:00:41.630
We will see NPM in action.

10
00:00:41.730 --> 00:00:45.950
You will follow along step by step on your computer should be a lot of fun.

11
00:00:46.020 --> 00:00:47.700
But let's start up at the top.

12
00:00:47.700 --> 00:00:50.960
Number one what is package management.

13
00:00:51.150 --> 00:00:59.150
To begin I want you to think of NPM as a grocery store that contains code instead of food.

14
00:00:59.310 --> 00:01:04.410
I guess that would make it a code store not a grocery store but stick with me on this analogy.

15
00:01:04.410 --> 00:01:11.400
So for example if we were going to bake a cake we would need flour sugar vanilla extract maybe baking

16
00:01:11.400 --> 00:01:12.210
powder.

17
00:01:12.240 --> 00:01:15.240
Now how are we going to get all of those ingredients.

18
00:01:15.360 --> 00:01:16.770
For example with flour.

19
00:01:16.770 --> 00:01:20.800
Are we going to start with wheat and turn it into flour ourselves.

20
00:01:20.820 --> 00:01:26.430
Maybe some of us will do that but instead I think the vast majority of us will go to the grocery store

21
00:01:26.460 --> 00:01:28.310
and pick up some flour.

22
00:01:28.410 --> 00:01:32.460
We probably aren't going to grow our own sugar cane and turn it into sugar.

23
00:01:32.460 --> 00:01:35.590
We will go to the grocery store and pick up some sugar.

24
00:01:35.670 --> 00:01:36.840
You get the idea.

25
00:01:36.840 --> 00:01:41.080
Now the same thing is true in development with code.

26
00:01:41.130 --> 00:01:46.920
So for example if there are a few tasks that we want to automate with node we don't need to write a

27
00:01:46.920 --> 00:01:47.940
bunch of code.

28
00:01:47.940 --> 00:01:56.280
Instead we can just go to the grocery store NPM and pick up a package that helps with automation a package

29
00:01:56.280 --> 00:01:59.640
that already has all of the code we will need.

30
00:01:59.640 --> 00:02:08.010
So NPM is a centralized place where developers share their code with the world and everything in this

31
00:02:08.010 --> 00:02:11.250
centralized store is completely free.

32
00:02:11.250 --> 00:02:16.220
The idea is that if we come together and share our code with each other we can all create better work

33
00:02:16.260 --> 00:02:19.590
and we can all avoid constantly reinventing the wheel.

34
00:02:20.430 --> 00:02:24.560
OK so NPM is a place where a bunch of code lives.

35
00:02:24.660 --> 00:02:27.050
But what is package management.

36
00:02:27.120 --> 00:02:30.160
Let's go back to our cake baking analogy.

37
00:02:30.240 --> 00:02:37.860
So with out package management you might need to go to one store for flour and vanilla extract and then

38
00:02:37.860 --> 00:02:43.230
go all the way across town to another store for sugar and maybe even a third store.

39
00:02:43.230 --> 00:02:47.550
On the other side of town for a special type of baking powder that you like.

40
00:02:47.550 --> 00:02:52.740
This is the equivalent of googling for bootstrap and going to their website to download it and then

41
00:02:53.010 --> 00:02:56.050
googling for load ash and going to their Web site to download it.

42
00:02:56.340 --> 00:03:02.250
It's not the most efficient way of doing things or with package management.

43
00:03:02.400 --> 00:03:08.460
You can just sit at home and create a grocery list and then give that list to your personal robot assistant

44
00:03:08.910 --> 00:03:12.300
and it will go fetch all of the ingredients for you.

45
00:03:12.300 --> 00:03:19.920
Also food ingredients can expire and go bad just like code packages can become outdated or sometimes

46
00:03:19.920 --> 00:03:26.400
they might have a mistake or a bug in them and maybe the author of a script we are using fixes a bug

47
00:03:26.840 --> 00:03:31.380
after we have already saved the package to our computer with package management.

48
00:03:31.380 --> 00:03:37.470
We can just run a single command and our robot assistant will automatically check every single item

49
00:03:37.470 --> 00:03:44.040
on our recipe ingredient list to see if it has expired and if it can go grab a newer fresher copy for

50
00:03:44.040 --> 00:03:50.070
us so hopefully that convinces you that there are great benefits to using package management.

51
00:03:50.070 --> 00:03:56.190
For now let's move on to the second part of the lesson where we talk about what types of files and code

52
00:03:56.190 --> 00:03:59.820
packages we hope to find on NPM.

53
00:03:59.820 --> 00:04:05.490
I would say that most packages on NPM fall into one of two categories.

54
00:04:05.580 --> 00:04:11.970
The first category might be a bit obvious considering what the letters NPM stand for but the first category

55
00:04:12.180 --> 00:04:19.020
is simply node packages packages of code that help us do things in node so we know that node can be

56
00:04:19.020 --> 00:04:22.290
used for a lot of things we can use it to automate tasks.

57
00:04:22.290 --> 00:04:25.250
We can use it to make our life as a developer easier.

58
00:04:25.260 --> 00:04:28.150
We can do things on the server level with node.

59
00:04:28.290 --> 00:04:35.270
We can do just about anything with node and there is a package for just about anything on NPM.

60
00:04:35.280 --> 00:04:42.770
The second category of packages that we can find on NPM may be a bit less obvious in this category.

61
00:04:42.770 --> 00:04:50.880
We can find packages that have nothing to do with node packages like low dash bootstrap normalize dot

62
00:04:50.910 --> 00:04:52.140
CSX.

63
00:04:52.140 --> 00:04:53.140
You get the idea.

64
00:04:53.160 --> 00:05:01.070
So these are packages of JavaScript and CSX that we need for our Web site to actually run in a web browser.

65
00:05:01.080 --> 00:05:07.690
The point that I'm trying to drive home here is that NPM is a lot bigger than just node and we can use

66
00:05:07.690 --> 00:05:11.710
NPM as our one stop shop for any code we need.

67
00:05:11.710 --> 00:05:15.710
Now having said that I think it's time to move on to the fun part of the lesson.

68
00:05:15.880 --> 00:05:20.210
The part where we get our hands dirty and actually begin to use NPM.

69
00:05:20.410 --> 00:05:20.730
All right.

70
00:05:20.760 --> 00:05:21.990
So let's get started.

71
00:05:22.000 --> 00:05:25.880
The first thing I want you to do is to open your command line.

72
00:05:26.020 --> 00:05:32.680
Next I want you to navigate in the command line to the folder for the fictional travel agency Web site

73
00:05:32.890 --> 00:05:35.240
that we created a few lessons ago.

74
00:05:35.410 --> 00:05:41.960
So within your generic sites or projects folder you will remember that we created a travel site folder.

75
00:05:41.950 --> 00:05:44.800
This contains the starter files for the project.

76
00:05:44.800 --> 00:05:47.050
We will be building together in the course.

77
00:05:47.050 --> 00:05:51.870
We even configured this to push to your own personal github account.

78
00:05:51.910 --> 00:05:58.540
So in my case I'm just going to type C.D. and then drag that travel site directory onto my command line.

79
00:06:00.030 --> 00:06:00.580
All right.

80
00:06:00.610 --> 00:06:06.480
Now I know that once we begin building the Web site we are going to use low dash.

81
00:06:06.480 --> 00:06:14.080
So right now let's go ahead and use NPM to download low dash into our travel site folder.

82
00:06:14.340 --> 00:06:23.940
To do that in the command line just type npm install low dash hit enter in our previous lesson.

83
00:06:23.940 --> 00:06:31.190
When we installed no J.S. on our computer that also gave us access to these NPM commands.

84
00:06:31.290 --> 00:06:38.850
And now if we check the travel site folder we will see a new folder named node modules and within that

85
00:06:39.090 --> 00:06:44.390
there are the load Ash files NPM went onto the Internet and downloaded this for us.

86
00:06:44.400 --> 00:06:48.230
It's that simple to use NPM to download a package.

87
00:06:48.270 --> 00:06:53.280
However there is one extra step we should perform to stay organized.

88
00:06:53.280 --> 00:07:01.390
So let's go back and let's undo what we just did and delete this node modules folder and let's try a

89
00:07:01.390 --> 00:07:05.000
more organized way of downloading packages.

90
00:07:05.020 --> 00:07:12.550
Let's begin a grocery list or a recipe ingredients list of all the packages we will need for our project.

91
00:07:12.550 --> 00:07:19.440
To do that let's go back to the command line and let's say NPM init.

92
00:07:19.630 --> 00:07:25.300
And then one more space and then dash why go ahead and press enter.

93
00:07:25.300 --> 00:07:32.620
And once that's done if we go to the travel site folder we will see this new file named package Dot.

94
00:07:32.620 --> 00:07:37.680
Jason this file is our projects grocery list or recipe.

95
00:07:37.750 --> 00:07:42.220
This file keeps track of all of the packages that our project uses.

96
00:07:42.250 --> 00:07:47.830
You will want to create one of these package dot Jason files for each one of your projects or for each

97
00:07:47.830 --> 00:07:49.520
one of your get repos.

98
00:07:49.540 --> 00:07:52.840
Go ahead and open it in your favorite text editor.

99
00:07:52.840 --> 00:07:58.280
Currently it only contains the info on our project that the computer generated automatically.

100
00:07:58.330 --> 00:08:03.550
Now the reason this file is so great is because we can use it to keep track of which packages we are

101
00:08:03.550 --> 00:08:04.500
using.

102
00:08:04.510 --> 00:08:07.100
So check this out back in the command line.

103
00:08:07.270 --> 00:08:19.370
Let's download load Ash again so npm install low dash press enter just like before.

104
00:08:19.430 --> 00:08:23.340
That will create a node modules folder and there's load ash.

105
00:08:23.420 --> 00:08:30.020
But more importantly back in our text editor we see that this new dependencies area was created automatically

106
00:08:30.230 --> 00:08:32.220
with load Ash listed.

107
00:08:32.270 --> 00:08:35.450
Let's try to install and save another package.

108
00:08:35.450 --> 00:08:42.540
So in the command line let's try npm install normalized dot CSX.

109
00:08:42.560 --> 00:08:45.200
This is a package that I know we will use in the course.

110
00:08:45.200 --> 00:08:47.180
Go ahead and press enter.

111
00:08:47.320 --> 00:08:53.840
If we check our folder within the node modules folder there is normalize and it is automatically added

112
00:08:53.840 --> 00:08:56.270
to our grocery list or to our recipe.

113
00:08:56.270 --> 00:08:58.520
Let me show you why this is such a cool feature.

114
00:08:58.580 --> 00:09:03.870
So in our folder let's go ahead and delete the node modules folder.

115
00:09:04.010 --> 00:09:08.450
So this will delete both the load ash and normalize packages.

116
00:09:08.450 --> 00:09:15.320
Now because we have this recipe file that lists the packages we want all we need to do to get both of

117
00:09:15.320 --> 00:09:17.380
them back is in the command line.

118
00:09:17.390 --> 00:09:20.430
Just type npm install.

119
00:09:20.570 --> 00:09:21.430
That's it.

120
00:09:21.500 --> 00:09:29.760
Hit enter and if we go to our folder and drill down into node modules there they both are.

121
00:09:29.870 --> 00:09:36.680
When we run npm install node looks in the directory that our command line is currently pointed at and

122
00:09:36.680 --> 00:09:39.290
it looks for a file named package Jason.

123
00:09:39.290 --> 00:09:46.640
And whether we have two or two hundred packages listed here NPM will go and automatically download all

124
00:09:46.640 --> 00:09:49.220
of them for us in one fell swoop.

125
00:09:49.280 --> 00:09:54.800
And that actually will bring this hands on demo of getting started with NPM to a close.

126
00:09:54.800 --> 00:09:58.820
Now let's cover a few common questions that you might have at this point.

127
00:09:58.820 --> 00:10:05.120
Question number one how am I supposed to know the exact name of packages that I should type into the

128
00:10:05.120 --> 00:10:06.230
command line.

129
00:10:06.230 --> 00:10:07.460
That's a fair question.

130
00:10:07.460 --> 00:10:11.270
So in this course I will let you know which packages we need.

131
00:10:11.270 --> 00:10:15.890
But out in the wild there won't be someone whispering in your ear the name of packages.

132
00:10:15.920 --> 00:10:22.880
So what you can do is you can go to the NPM Web site NPM J.S. dot com and you can search and browse

133
00:10:22.880 --> 00:10:28.700
for packages or you can even just google for what you're hoping to achieve with the package and then

134
00:10:28.700 --> 00:10:35.060
include NPM at the end of your search string that will usually take you to a popular package on the

135
00:10:35.060 --> 00:10:36.260
NPM Web site.

136
00:10:36.320 --> 00:10:39.380
And from there you can find out the name of the package.

137
00:10:39.380 --> 00:10:40.970
Question number two.

138
00:10:40.990 --> 00:10:41.300
OK.

139
00:10:41.300 --> 00:10:45.260
So we have all of these package files in the node modules folder.

140
00:10:45.380 --> 00:10:48.080
But how do we actually use these files.

141
00:10:48.080 --> 00:10:54.380
Should we manually move the files out of the node modules folder and into a folder that's easier to

142
00:10:54.380 --> 00:10:57.170
access from our HDMI pages.

143
00:10:57.170 --> 00:10:59.380
The answer is no don't do that.

144
00:10:59.540 --> 00:11:04.100
Leave the package files exactly where they are in the node modules folder.

145
00:11:04.280 --> 00:11:10.970
In future lessons we will learn about elegant ways of importing the package code into our own code.

146
00:11:10.970 --> 00:11:18.830
Question number three why is it that if I run get status in my command line right now do none of these

147
00:11:18.830 --> 00:11:22.540
new package files in the node modules folder show up.

148
00:11:22.550 --> 00:11:23.570
That's a good question.

149
00:11:23.600 --> 00:11:26.250
So let me run a get status with you right now.

150
00:11:26.270 --> 00:11:28.190
So in my command line get status.

151
00:11:28.190 --> 00:11:30.340
Let's see what has changed recently.

152
00:11:30.410 --> 00:11:36.440
We see that the only file that Gates says has changed is the package dot Jason File.

153
00:11:36.440 --> 00:11:41.040
But we know that we added all kinds of new files in this node modules folder.

154
00:11:41.090 --> 00:11:43.930
Why is get not tracking those files.

155
00:11:44.240 --> 00:11:50.480
We can find the answer to this question by simply opening up our travel site folder itself in our favorite

156
00:11:50.480 --> 00:11:51.710
text editor.

157
00:11:51.740 --> 00:11:57.460
You can try to drag the travel site folder on top of your text editor icon or within your text editor

158
00:11:57.470 --> 00:12:03.170
you can go to file open and there should be some sort of open directory or open folder feature instead

159
00:12:03.170 --> 00:12:05.060
of just opening a file.

160
00:12:05.120 --> 00:12:11.960
So once we've used the text editor to open the entire project folder we will see a hidden file named

161
00:12:12.080 --> 00:12:15.830
get ignore within this file.

162
00:12:15.860 --> 00:12:21.740
We can tell our get repo to ignore certain kinds of files that are not important.

163
00:12:21.740 --> 00:12:29.000
So for example on line 17 we see thumbs dot D.B. this is a file that the Windows operating system will

164
00:12:29.000 --> 00:12:31.710
create in any folder that has images.

165
00:12:31.730 --> 00:12:36.590
So that's a random operating system feature that has nothing to do with our code.

166
00:12:36.590 --> 00:12:41.990
And the Web site that we are building DSA store is a system file that Mac creates.

167
00:12:41.990 --> 00:12:44.180
So again we don't need that in our repo.

168
00:12:44.180 --> 00:12:46.850
It has nothing to do with our projects code.

169
00:12:46.940 --> 00:12:51.920
And lo and behold online 12:00 we see node modules.

170
00:12:51.950 --> 00:12:58.780
So this means we have configured our repo to completely ignore the node modules folder.

171
00:12:58.820 --> 00:12:59.960
Why would we do that.

172
00:13:00.110 --> 00:13:05.780
Well we do it because it's a best practice and it's a best practice because as long as we have the package

173
00:13:05.820 --> 00:13:10.210
dot Jace on file that lists which packages we need.

174
00:13:10.450 --> 00:13:17.090
There's no sense in bloating the get repo with all of those actual package files because even if our

175
00:13:17.090 --> 00:13:23.330
computer blew up and we lost all of our files all we would need to do is get a new computer clone down

176
00:13:23.330 --> 00:13:25.310
our repo from GitHub.

177
00:13:25.310 --> 00:13:32.050
And as long as we have this package that Jason File we just run in npm install and we are back in business.

178
00:13:32.450 --> 00:13:35.410
So that illustrates just how important the package.

179
00:13:35.480 --> 00:13:37.000
Jason File is.

180
00:13:37.010 --> 00:13:41.240
It's the recipe to our project now because this file is so important.

181
00:13:41.330 --> 00:13:45.260
Before we close out this lesson I want you to take care of your business and get.

182
00:13:45.440 --> 00:13:49.840
I want you to add our package that Jason file to your repo.

183
00:13:49.970 --> 00:13:52.490
So I want you to add it to your staging area.

184
00:13:52.640 --> 00:13:54.600
Then I want you to create a commit.

185
00:13:54.770 --> 00:14:00.500
And then I want you to push your repo up to your GitHub account if you need to re watch the last lesson

186
00:14:00.500 --> 00:14:02.870
from the get section to do all of that.

187
00:14:02.870 --> 00:14:03.840
That's OK.

188
00:14:03.980 --> 00:14:07.230
But make sure you do that before moving on to the next lesson.

189
00:14:07.310 --> 00:14:15.290
And in our next lesson we will learn about a super important package named Web PAC web PAC is at the

190
00:14:15.290 --> 00:14:20.420
heart of all automation that we will be setting up in this course.

191
00:14:20.420 --> 00:14:22.640
It is going to save us a lot of time.

192
00:14:22.880 --> 00:14:25.280
And I will see you in the next lesson.
