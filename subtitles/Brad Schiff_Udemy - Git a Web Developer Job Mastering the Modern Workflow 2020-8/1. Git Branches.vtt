WEBVTT
1
00:00:05.070 --> 00:00:06.510
Hello everyone.

2
00:00:06.510 --> 00:00:12.960
In this lesson we will take a break from styling our Web site and we will use this time to learn about

3
00:00:12.970 --> 00:00:14.820
get branches.

4
00:00:14.910 --> 00:00:20.010
Our goals for this lesson are to understand what in the world a branch is.

5
00:00:20.010 --> 00:00:23.130
We want to learn how to create a new branch.

6
00:00:23.190 --> 00:00:27.450
We want to learn how to switch between or check out different branches.

7
00:00:27.450 --> 00:00:32.010
And finally we want to learn how to merge one branch into another.

8
00:00:32.010 --> 00:00:36.980
All right so let's cut this introduction and get started in order to answer the question.

9
00:00:37.080 --> 00:00:39.180
What is a get branch.

10
00:00:39.180 --> 00:00:45.180
I want you to jump into your command line and run a few commands with me now currently in my command

11
00:00:45.180 --> 00:00:52.560
line I am running the Web pack Dev task which means at the moment I'm not able to type in any new commands

12
00:00:52.560 --> 00:00:53.200
here.

13
00:00:53.220 --> 00:01:00.090
Now I could press control C to quit this web pack task but I actually want to let that continue to run

14
00:01:00.360 --> 00:01:07.010
so that we can access the web pack dev server from this local host calling 3000 address in the browser.

15
00:01:07.320 --> 00:01:13.780
So if I want to leave this task running what I can do is just open up another command line.

16
00:01:13.780 --> 00:01:17.480
Now luckily V.S. code makes this very easy to do.

17
00:01:17.550 --> 00:01:23.460
We have a couple of options we can click this plus symbol icon and that will open up a brand new command

18
00:01:23.460 --> 00:01:27.780
line and you can use this drop down menu to switch between the two instances.

19
00:01:27.810 --> 00:01:32.070
So this is the one command line and this is the new command line.

20
00:01:32.130 --> 00:01:37.320
You can always get rid of an extra command line by clicking into it and then clicking on the trash icon

21
00:01:37.770 --> 00:01:42.960
or to have multiple command lines you can also click this icon if you hover over it.

22
00:01:42.960 --> 00:01:49.200
It says split terminals if you click that now you have two command lines but they're side by side.

23
00:01:49.200 --> 00:01:49.940
So it's up to you.

24
00:01:49.950 --> 00:01:53.040
But big picture we just want to have two command lines.

25
00:01:53.040 --> 00:01:59.220
This one will continue to run our NPM run Dev task and in the other command line we are free to type

26
00:01:59.220 --> 00:02:00.950
in commands.

27
00:02:00.990 --> 00:02:01.320
All right.

28
00:02:01.350 --> 00:02:03.560
So let's get back to the topic at hand.

29
00:02:03.600 --> 00:02:04.980
Get branches.

30
00:02:04.980 --> 00:02:12.420
I want you to run the following command get and then a space and then branch go ahead and press enter

31
00:02:13.320 --> 00:02:17.890
this command will list all of the branches in our repository.

32
00:02:17.940 --> 00:02:24.460
Now at the moment it's not much of a list because we only have one branch and its name is Master.

33
00:02:24.600 --> 00:02:28.320
We can think of a branch as a version of our project.

34
00:02:28.410 --> 00:02:35.790
And typically we think of the master branch as our primary or main or live or production version of

35
00:02:35.790 --> 00:02:36.880
our project.

36
00:02:36.990 --> 00:02:43.080
And this means that usually we don't want to commit work in progress code to the master branch.

37
00:02:43.170 --> 00:02:49.260
What we want to do instead is to create a new branch for each new feature or experiment that we want

38
00:02:49.260 --> 00:02:55.020
to work on this way within those new branches we are free to try new things without running the risk

39
00:02:55.080 --> 00:02:58.470
of breaking something within our master branch.

40
00:02:58.500 --> 00:03:02.300
So let's go ahead and learn how to create a new branch.

41
00:03:02.310 --> 00:03:08.190
Now before we create a new branch we want to make sure that we currently have a clean working directory.

42
00:03:08.190 --> 00:03:12.000
That just means we don't want to have any uncommitted changes.

43
00:03:12.090 --> 00:03:19.670
So if we go ahead and run get status you can see that I personally have several files that haven't been

44
00:03:19.670 --> 00:03:20.750
committed yet.

45
00:03:20.870 --> 00:03:24.980
If you've been diligent and have been committing your progress at the end of each lesson.

46
00:03:24.980 --> 00:03:26.090
Kudos to you.

47
00:03:26.450 --> 00:03:27.200
But if you haven't.

48
00:03:27.200 --> 00:03:28.980
That's not a problem right now.

49
00:03:29.000 --> 00:03:36.020
Let's go ahead and add any uncommitted files to our staging area if we want we can add them one by one.

50
00:03:36.080 --> 00:03:42.650
So for example if I wanted to add this file to my staging area I can just type get add and then the

51
00:03:42.650 --> 00:03:43.790
path to that file.

52
00:03:43.850 --> 00:03:47.560
So app slash index start each TMM.

53
00:03:47.620 --> 00:03:53.670
Now if I run get status once again we see that that file has been staged to be committed.

54
00:03:53.780 --> 00:03:54.550
Perfect.

55
00:03:54.650 --> 00:03:58.000
But adding each of these files one by one is a bit of a hassle.

56
00:03:58.010 --> 00:04:06.110
So instead you can just type get add dash uppercase a and that will add everything to the staging area

57
00:04:06.170 --> 00:04:07.670
in one fell swoop.

58
00:04:07.670 --> 00:04:13.670
So now if I type get status I have the chance to review my staging area before committing this.

59
00:04:13.730 --> 00:04:19.610
Now this looks good to me but maybe in your instance you see a file on this list that you actually don't

60
00:04:19.610 --> 00:04:20.700
want to commit.

61
00:04:20.720 --> 00:04:26.870
So maybe along the way you accidentally created a bogus file or you have an extra misspelled file name

62
00:04:27.140 --> 00:04:31.120
and let's say that you want to remove a file from the staging area.

63
00:04:31.190 --> 00:04:39.320
So just as an example if I wanted to onstage the h t email file I can just type get reset and then the

64
00:04:39.320 --> 00:04:46.430
path to the file so app slash indexed on each t amount and if I run get status again we see that that

65
00:04:46.430 --> 00:04:49.280
removed the file from the staging area.

66
00:04:49.280 --> 00:04:52.600
So hopefully that helps you manage your staging area a bit.

67
00:04:52.600 --> 00:04:59.210
Now in my case I do actually want to stage this file so I'll just say get at all once again.

68
00:04:59.210 --> 00:05:04.580
So at this point I'm happy with my staging area and I want to make a comment so I can just type get

69
00:05:04.640 --> 00:05:13.550
commit dash n and include a message for this comment let's say completed large hero block and intro

70
00:05:13.550 --> 00:05:15.530
content block.

71
00:05:15.970 --> 00:05:16.220
All right.

72
00:05:16.220 --> 00:05:19.230
So after we make a commit here's the moment we've been waiting for.

73
00:05:19.310 --> 00:05:23.200
If we type get status now this is what we've been looking for.

74
00:05:23.210 --> 00:05:27.360
This is music to our ears working directory clean.

75
00:05:27.440 --> 00:05:34.100
So now at this point we are ready to create a new branch creating a new branch is as simple as typing

76
00:05:34.130 --> 00:05:39.230
get branch and then the name of the new branch that you want to create.

77
00:05:39.230 --> 00:05:44.970
So in this case let's say that we want to work on a new feature where at the very beginning of our H

78
00:05:45.060 --> 00:05:50.300
PML we add a bulleted list that counts from 1 to 10.

79
00:05:50.360 --> 00:05:55.430
We would never do this in the real world but let's just use it as an example exercise.

80
00:05:55.700 --> 00:06:03.930
So let's name our new branch count dash two dash 10 count to 10.

81
00:06:04.010 --> 00:06:04.340
All right.

82
00:06:04.340 --> 00:06:11.330
So now if we run get branch to see a list of all of the branches in our repo we see count to 10 and

83
00:06:11.330 --> 00:06:17.090
master the star next to master indicates that it's the branch we are currently working with.

84
00:06:17.090 --> 00:06:24.140
So our next step is to switch over to the new count to ten branch or in get terminology we want to check

85
00:06:24.140 --> 00:06:25.960
out the count to ten branch.

86
00:06:26.210 --> 00:06:32.150
So to do that we just type get check out and then the name of the branch that we are interested in.

87
00:06:32.180 --> 00:06:34.660
So count to 10.

88
00:06:34.670 --> 00:06:35.090
All right.

89
00:06:35.090 --> 00:06:37.200
So now we are working with the new branch.

90
00:06:37.220 --> 00:06:42.030
Let's jump to our text editor and OPEN UP index dot HDMI.

91
00:06:42.830 --> 00:06:49.660
And right after the opening body tag let's create an unordered list and begin counting to 10.

92
00:06:49.670 --> 00:06:54.530
So one two three four.

93
00:06:54.560 --> 00:06:58.440
Let's go ahead and save this and check out the browser.

94
00:06:58.470 --> 00:07:02.550
Now let's imagine that counting to four took a lot of time and energy.

95
00:07:02.550 --> 00:07:07.320
So let's say it's 5 p.m. and it's time to stop working for the day before we call it quits.

96
00:07:07.320 --> 00:07:10.270
Let's go ahead and commit this change.

97
00:07:10.650 --> 00:07:12.870
So let's run get status.

98
00:07:12.870 --> 00:07:15.670
Let's go ahead and add this file to our staging area.

99
00:07:16.150 --> 00:07:19.230
So get add everything get.

100
00:07:19.230 --> 00:07:20.460
Status.

101
00:07:20.460 --> 00:07:20.730
All right.

102
00:07:20.760 --> 00:07:22.620
So this staging area looks good to me.

103
00:07:22.620 --> 00:07:25.740
I'm ready to commit get commit.

104
00:07:25.980 --> 00:07:30.360
Let's make the message counted to four.

105
00:07:30.570 --> 00:07:31.020
All right.

106
00:07:31.020 --> 00:07:36.930
Now let's imagine that it's the next morning and I can't work on my count to 10 project right away.

107
00:07:36.930 --> 00:07:42.120
There's a few pressing issues back in the master branch that I want to work on so I can switch back

108
00:07:42.120 --> 00:07:47.190
to my master branch get check out master.

109
00:07:47.430 --> 00:07:52.620
And now that we are working with the master branch we see that our count to ten list is gone because

110
00:07:52.710 --> 00:07:55.990
it only exists in the count to ten branch.

111
00:07:56.010 --> 00:08:01.200
So let's imagine that we are working on the master branch for a few hours and we find a break in our

112
00:08:01.200 --> 00:08:04.470
day where we can work on our count to ten feature again.

113
00:08:04.530 --> 00:08:08.520
So we just jump back to the command line and switch back to that branch.

114
00:08:08.550 --> 00:08:10.410
So get check out.

115
00:08:10.470 --> 00:08:18.690
Count to 10 we see that our list is back let's start counting again.

116
00:08:18.700 --> 00:08:26.890
Five six seven maybe that's all we have time for that day looking good.

117
00:08:27.370 --> 00:08:33.370
So before we head out for the day we commit those changes add everything to the staging area go ahead

118
00:08:33.370 --> 00:08:38.180
and committed get commit counted to seven.

119
00:08:38.230 --> 00:08:44.780
Let's imagine it's the next morning and we can continue to work on our count to 10 project and this

120
00:08:44.780 --> 00:08:47.330
time we actually have time to finish it.

121
00:08:47.360 --> 00:08:52.400
So a 9 10 amazing.

122
00:08:53.030 --> 00:08:55.010
So let's go ahead and commit those changes

123
00:08:58.530 --> 00:09:02.850
completed that count to 10.

124
00:09:02.870 --> 00:09:03.370
All right.

125
00:09:03.380 --> 00:09:08.750
So now that our count to ten feature is complete it's no longer a work in progress.

126
00:09:08.750 --> 00:09:09.890
It's good to go.

127
00:09:09.920 --> 00:09:13.190
We can merge it into our master branch.

128
00:09:13.340 --> 00:09:16.820
So to do that let's switch back to our master branch.

129
00:09:17.060 --> 00:09:20.350
Get check out master.

130
00:09:20.350 --> 00:09:21.740
So back in the master branch.

131
00:09:21.770 --> 00:09:29.840
Obviously that list doesn't exist but we can add it to the master branch by using gets merge feature.

132
00:09:29.930 --> 00:09:33.880
So in the command line while we have the master branch check it out.

133
00:09:34.070 --> 00:09:40.830
Let's run get merge and then the name of the branch that we want to merge into master.

134
00:09:40.940 --> 00:09:44.420
So count to ten.

135
00:09:44.420 --> 00:09:46.690
So we still have the master branch checked out.

136
00:09:46.700 --> 00:09:49.910
But if we check the browser there's the list.

137
00:09:50.060 --> 00:09:56.120
Now let's go ahead and push our master branch up to get hub so we can see a visualization of all the

138
00:09:56.120 --> 00:09:57.460
comments.

139
00:09:57.560 --> 00:10:06.420
So let's run get push origin master and let's visit get hub dot com.

140
00:10:06.440 --> 00:10:09.210
So here is my travel site repo on github.

141
00:10:09.230 --> 00:10:14.930
Yours would be located at GitHub dot com and then your user name instead of this user name and then

142
00:10:14.930 --> 00:10:17.030
whatever repo name you chose.

143
00:10:17.030 --> 00:10:17.360
All right.

144
00:10:17.390 --> 00:10:24.120
So if we click here on commits we see that here is the comment we made at the beginning of this lesson

145
00:10:24.690 --> 00:10:28.070
to the master branch right after we made this comment.

146
00:10:28.230 --> 00:10:34.620
We created a new branch off of master count to 10 and in that count to 10 branch we made these three

147
00:10:34.620 --> 00:10:35.730
comments.

148
00:10:35.730 --> 00:10:42.210
Now these comments were not a part of the master branch until we performed the merge.

149
00:10:42.210 --> 00:10:48.690
Once we merged get took the commit history of the count to ten branch and added it to the master branch

150
00:10:48.690 --> 00:10:49.550
history.

151
00:10:49.560 --> 00:10:49.910
All right.

152
00:10:49.940 --> 00:10:53.730
So that's one example of how to merge one branch into another.

153
00:10:53.730 --> 00:10:56.680
We used the command line to perform the merge.

154
00:10:56.820 --> 00:11:00.370
Really quickly I want to show you another way to merge branch.

155
00:11:00.420 --> 00:11:04.320
We can actually have get hub perform the merge for us.

156
00:11:04.830 --> 00:11:08.990
So let's go ahead and create another brand new branch as another example.

157
00:11:09.000 --> 00:11:17.520
Currently we are on the master branch so let's branch off of it create a new branch named count to 15

158
00:11:19.390 --> 00:11:23.710
let's go ahead and switch over to that new branch or check out the new branch.

159
00:11:23.710 --> 00:11:29.160
So get check out count to 15.

160
00:11:29.380 --> 00:11:33.880
And in this new branch let's expand this list to count up to 15

161
00:11:36.490 --> 00:11:46.000
so eleven twelve thirteen maybe that's all we can get done in a day so we commit that change before

162
00:11:46.000 --> 00:11:51.640
we head out and here's a quick commit tip if you know that you only made a few small changes and you

163
00:11:51.640 --> 00:11:57.520
don't want to have to deal with the staging area in detail you can actually stage and commit your files

164
00:11:57.610 --> 00:12:06.910
in one move so we can run get commit dash a.m. So this will commit all changes to our tracked files

165
00:12:07.000 --> 00:12:12.550
and then we can include a message like always counted to 13.

166
00:12:12.700 --> 00:12:15.040
All right so we committed that change.

167
00:12:15.040 --> 00:12:21.850
Now before we go home for the day we can actually push this individual branch up to get hub so that

168
00:12:21.850 --> 00:12:27.400
way even if our computer explodes our code will be safe to push this branch up to get her.

169
00:12:27.400 --> 00:12:35.620
We can just say get push origin which points towards our remote repo up on github and then the name

170
00:12:35.620 --> 00:12:37.270
of the branch that we want to push.

171
00:12:37.270 --> 00:12:46.720
So in this case instead of Master we want to push count to 15 now if I jump over to GitHub dot com and

172
00:12:46.720 --> 00:12:49.030
check out the page for my travel site repo.

173
00:12:49.390 --> 00:12:51.970
We can click on commits.

174
00:12:52.150 --> 00:12:57.350
Now we don't see our latest commit here because we are currently looking at the master branch.

175
00:12:57.580 --> 00:13:05.270
So if we click this and switch it to the new count to 15 branch that we just pushed there is our latest

176
00:13:05.270 --> 00:13:06.580
commit.

177
00:13:06.590 --> 00:13:06.860
All right.

178
00:13:06.860 --> 00:13:11.110
Now let's jump back to our text editor and complete this feature.

179
00:13:11.150 --> 00:13:15.970
So 14 15 this new feature is complete.

180
00:13:16.610 --> 00:13:26.840
Let's go ahead and commit our change get commit dash am completed the count to 15.

181
00:13:26.840 --> 00:13:29.710
So this new count to 15 feature is complete.

182
00:13:29.780 --> 00:13:32.990
Which means it's ready to be merged into the master branch.

183
00:13:33.140 --> 00:13:38.870
But this time around instead of using our command line to perform the merge let's just push the count

184
00:13:38.870 --> 00:13:49.130
to 15 branch up to get hub and let GitHub handle the merging get push origin count to 15.

185
00:13:50.270 --> 00:13:57.680
So if we jump back to get hub and visit the home page for this repo we see that get hub added this row

186
00:13:58.070 --> 00:14:00.770
that reads your recently pushed branches.

187
00:14:01.100 --> 00:14:06.940
Here's our count to 15 branch and on the far right we see a compare and pull request button.

188
00:14:06.950 --> 00:14:15.400
Let's go ahead and click that so on this screen we are creating a pull request a pull request is basically

189
00:14:15.400 --> 00:14:18.610
a request to merge one branch into another.

190
00:14:18.610 --> 00:14:24.340
So we are considering the master branch our base and the count to 15 branch is the branch that we want

191
00:14:24.340 --> 00:14:25.430
to merge in.

192
00:14:25.510 --> 00:14:30.790
Now often when you use get hub you will be working together with other developers on a team.

193
00:14:30.790 --> 00:14:37.960
So this is your chance to write a bit of a comment so you could say Hey team in this amazing branch

194
00:14:38.230 --> 00:14:40.390
I counted to 15.

195
00:14:40.480 --> 00:14:44.840
I'm very proud of this amazing code.

196
00:14:44.890 --> 00:14:47.820
Let's add it to master Hall right.

197
00:14:47.830 --> 00:14:52.420
And you would usually assign this poor request to someone else on your team.

198
00:14:52.510 --> 00:14:57.820
That way they can do a bit of a peer review on your code and make sure that things truly look good before

199
00:14:57.820 --> 00:14:59.380
merging it in the master.

200
00:14:59.380 --> 00:15:03.080
Now in this course or on this project we are running so low.

201
00:15:03.160 --> 00:15:06.020
So let's just go ahead and assign this to ourselves.

202
00:15:06.070 --> 00:15:13.190
So click a signings and then you can just click your own name here scroll down a bit and then click

203
00:15:13.340 --> 00:15:14.720
Create pull request

204
00:15:17.340 --> 00:15:21.230
so here is the review screen for that poll request that we just created.

205
00:15:21.270 --> 00:15:22.290
Here's a nice summary.

206
00:15:22.290 --> 00:15:28.060
It says that we want to merge two comets into master from count to 15.

207
00:15:28.080 --> 00:15:33.330
Now because we are the only developer on this project and we assigned to this poor request to ourselves

208
00:15:33.660 --> 00:15:38.720
we have the authority to scroll down and click merge pull request.

209
00:15:38.730 --> 00:15:45.880
We can go ahead and click this confirm merge button and we see that the pull request was successfully

210
00:15:45.880 --> 00:15:47.620
merged and closed.

211
00:15:47.620 --> 00:15:51.220
We also see a convenient delete branch button here.

212
00:15:51.220 --> 00:15:56.330
Once a branch has been merged in the master there's not much of a reason to keep that extra branch around.

213
00:15:56.350 --> 00:16:00.250
It's a good practice to keep your repo clean and delete unnecessary branches.

214
00:16:00.250 --> 00:16:02.680
So let's go ahead and click delete branch.

215
00:16:02.680 --> 00:16:03.760
Perfect.

216
00:16:03.760 --> 00:16:12.190
Now if we jump back to our command line and check out our master branch get check out master we see

217
00:16:12.190 --> 00:16:14.330
that our list stopped at 10.

218
00:16:14.350 --> 00:16:17.350
We don't have the latest 11 to 15 code.

219
00:16:17.350 --> 00:16:24.150
This is because the merge happened on get hubs servers not on our local copy of the repo.

220
00:16:24.190 --> 00:16:30.970
So all we need to do is pull in the latest copy of master from GitHub down to our machine.

221
00:16:31.120 --> 00:16:42.430
So get pull origin master and now our local copy of the master branch has the latest code.

222
00:16:42.430 --> 00:16:47.590
Let's keep the local copy of our repo clean by deleting unnecessary branches.

223
00:16:47.650 --> 00:16:54.400
So if we run the get branch command to list all of the branches we see count to 15 which was deleted

224
00:16:54.400 --> 00:16:58.870
on the Github servers but it wasn't deleted in our local copy of the repo.

225
00:16:58.870 --> 00:17:01.360
So let's go ahead and delete that locally.

226
00:17:01.360 --> 00:17:08.230
We can just type get branch dash D and then the name of the branch we want to delete.

227
00:17:08.320 --> 00:17:11.530
So count to 15.

228
00:17:11.530 --> 00:17:12.520
Perfect.

229
00:17:12.520 --> 00:17:19.890
Let's also delete the count to 10 branch get branch dash D count to 10.

230
00:17:20.950 --> 00:17:25.930
So if we run get branch again we see we are right back where we started.

231
00:17:25.960 --> 00:17:29.550
We only have one branch and its name is M..

232
00:17:29.560 --> 00:17:33.550
The only difference is that now we have these completely pointless numbers.

233
00:17:33.550 --> 00:17:35.140
We didn't actually want these.

234
00:17:35.170 --> 00:17:36.730
They were just an example exercise.

235
00:17:36.730 --> 00:17:42.120
So let's go ahead and delete those right now delete that unordered list.

236
00:17:42.280 --> 00:17:44.960
Go ahead and save that.

237
00:17:44.980 --> 00:17:45.820
Perfect.

238
00:17:45.820 --> 00:17:49.660
Let's go ahead and commit that change get commit.

239
00:17:49.820 --> 00:17:52.790
Dash am removed.

240
00:17:52.840 --> 00:17:55.150
Test numbers.

241
00:17:55.510 --> 00:18:01.080
And now we truly are right where we started at the beginning of this lesson except at this point.

242
00:18:01.090 --> 00:18:04.430
We now have an understanding of get branches.

243
00:18:04.450 --> 00:18:10.150
Now there are a few other topics related to branches that I want to cover namely the no fast forward

244
00:18:10.150 --> 00:18:13.680
option and also how to deal with merge conflicts.

245
00:18:13.810 --> 00:18:18.400
But we will have to cover those in a future lesson because I feel like there's already been more than

246
00:18:18.400 --> 00:18:20.610
enough to absorb in this lesson.

247
00:18:21.010 --> 00:18:26.890
But before we bring this lesson to a close we know that in our next lesson we will be transforming this

248
00:18:27.010 --> 00:18:31.600
our features section from this into how it should look.

249
00:18:31.600 --> 00:18:34.300
Based on our design file which is this.

250
00:18:34.780 --> 00:18:39.880
So in this lesson while we are still on the topic of branches why don't we jump to the command line

251
00:18:40.180 --> 00:18:43.810
and create a new branch named our features.

252
00:18:43.810 --> 00:18:49.000
So we know that we can create a new branch by typing get branch and then the name of the branch we want

253
00:18:49.210 --> 00:18:55.330
our features but instead let me show you a trick where we can create a new branch and switch to it or

254
00:18:55.330 --> 00:18:57.580
check it out in one move.

255
00:18:57.580 --> 00:19:04.620
We can type get check out dash be for branch and then the name of the new branch that we want to create.

256
00:19:04.630 --> 00:19:07.420
So our features.

257
00:19:07.420 --> 00:19:07.830
All right.

258
00:19:07.840 --> 00:19:11.590
So we created a new branch and we switched over to it.

259
00:19:11.920 --> 00:19:15.670
So now we are ready to begin working on the our feature section.

260
00:19:15.670 --> 00:19:18.250
I'm looking forward to styling and building that out with you.

261
00:19:18.340 --> 00:19:19.510
It's going to be a lot of fun.

262
00:19:19.630 --> 00:19:23.530
Let's keep rolling along and I will see you in the next lesson.
