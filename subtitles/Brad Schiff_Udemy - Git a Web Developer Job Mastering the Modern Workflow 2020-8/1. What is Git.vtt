WEBVTT
1
00:00:06.440 --> 00:00:11.370
Hello everyone in this section of the course we will learn about it.

2
00:00:11.720 --> 00:00:13.160
Let's begin with a few questions.

3
00:00:13.160 --> 00:00:17.100
So in this first lesson here is what we are going to answer together.

4
00:00:17.120 --> 00:00:19.860
Number one what is good.

5
00:00:19.880 --> 00:00:22.690
Number two why should we learn good.

6
00:00:23.060 --> 00:00:25.740
And number three where do we begin.

7
00:00:25.760 --> 00:00:27.980
So we are going to answer all three of these one by one.

8
00:00:27.980 --> 00:00:35.060
Let's begin with what is good get get is the world's most popular version control system.

9
00:00:35.330 --> 00:00:39.750
But that phrase is just empty words So instead let's talk about what does get do.

10
00:00:39.830 --> 00:00:43.170
Why is get so useful and why do so many people love it.

11
00:00:43.520 --> 00:00:48.860
So really get just helps us manage our projects files.

12
00:00:48.980 --> 00:00:51.320
Now a project could be anything.

13
00:00:51.530 --> 00:00:56.240
Let's imagine that we are building a web site so our project would have all kinds of files that would

14
00:00:56.240 --> 00:01:02.240
have HVM files C Ss files javascript files images.

15
00:01:02.360 --> 00:01:03.340
You get the idea.

16
00:01:03.380 --> 00:01:05.260
You've got a whole lot of files.

17
00:01:05.270 --> 00:01:10.750
Now the question becomes what does get do that makes managing our files easier.

18
00:01:10.850 --> 00:01:17.690
And the biggest one that I want to talk about first is history so history just means that it keeps track

19
00:01:17.780 --> 00:01:21.050
of every change we make to our project.

20
00:01:21.050 --> 00:01:22.990
Here's an example of why that's amazing.

21
00:01:23.180 --> 00:01:25.930
Let's imagine that we adjust the CSSA on a Web site.

22
00:01:25.940 --> 00:01:29.560
Maybe we delete a few styles and add a few new styles.

23
00:01:29.630 --> 00:01:31.060
We think that everything's great.

24
00:01:31.100 --> 00:01:36.280
But a month later we discover that our code changes broked lay out on a few pages.

25
00:01:36.560 --> 00:01:41.720
Now instead of scratching our heads and trying to remember what code we adjusted a month ago and involving

26
00:01:41.720 --> 00:01:44.280
a bit of guesswork Instead we can have good.

27
00:01:44.300 --> 00:01:51.110
Tell us exactly on which day we changed which files and it will even show us which lines of code we

28
00:01:51.110 --> 00:01:53.610
added and which lines of code we removed.

29
00:01:53.660 --> 00:01:54.530
So this is great.

30
00:01:54.530 --> 00:01:56.770
This means you can rest a little easier at night.

31
00:01:56.780 --> 00:01:59.710
Now knowing the good has got your back.

32
00:01:59.870 --> 00:02:05.090
If you need to revert changes you can if you want to look back and see how a file has evolved over the

33
00:02:05.090 --> 00:02:06.110
past year.

34
00:02:06.140 --> 00:02:07.150
You can.

35
00:02:07.160 --> 00:02:09.620
Nothing is ever lost or nothing is ever final.

36
00:02:09.620 --> 00:02:11.390
Thanks to gets history.

37
00:02:11.630 --> 00:02:17.140
OK so let's move on to the next reason that people love get and that is collaboration.

38
00:02:17.150 --> 00:02:22.160
Now if you've ever tried to create something on the computer with a group of people or a team of people

39
00:02:22.460 --> 00:02:29.360
you know that a common concern is trying to avoid accidentally deleting or overwriting each other's

40
00:02:29.360 --> 00:02:30.560
progress.

41
00:02:30.560 --> 00:02:35.240
To illustrate this let's look at collaboration without get in the picture.

42
00:02:35.240 --> 00:02:40.280
So a quick example would be let's imagine we're writing a book and we finished the first one and a half

43
00:02:40.280 --> 00:02:47.080
chapters and we send an email to our friend was a word processing file attached and we say hey buddy

44
00:02:47.330 --> 00:02:48.890
Here's the first chapter and a half.

45
00:02:48.920 --> 00:02:55.460
Do you mind maybe making a few edits and finishing the second chapter for me and then sending the attachment

46
00:02:55.460 --> 00:02:57.070
back to me now.

47
00:02:57.110 --> 00:03:01.570
The moment you send that email you are frozen you are stuck.

48
00:03:01.580 --> 00:03:07.610
You can no longer work on the book yourself until your friend emails you back with the updated book

49
00:03:07.610 --> 00:03:08.600
file.

50
00:03:08.600 --> 00:03:09.110
Why.

51
00:03:09.140 --> 00:03:10.000
Why is that.

52
00:03:10.040 --> 00:03:14.030
Well it's because you want to make sure that you aren't stepping on each other's toes so let's imagine

53
00:03:14.180 --> 00:03:17.050
that you did make a few edits right after sending that email.

54
00:03:17.060 --> 00:03:22.010
What if you edited the first paragraph and maybe fix a few typos in the last paragraph.

55
00:03:22.010 --> 00:03:26.730
Well that would mean that your friend then wasn't working with the most updated copy of the book.

56
00:03:26.930 --> 00:03:31.640
So then when they send the file back to you both of your copies are out of date.

57
00:03:31.880 --> 00:03:38.240
So you would almost have to ask your friend to manually step by step summarize what exactly they change.

58
00:03:38.390 --> 00:03:44.660
Hey buddy can you list out the specific changes you made so I can kind of replay those changes to my

59
00:03:44.960 --> 00:03:50.960
updated copy and when you do that your friend will probably reply by saying no I will not do that for

60
00:03:50.960 --> 00:03:51.170
you.

61
00:03:51.170 --> 00:03:52.270
Get lost.

62
00:03:52.300 --> 00:03:53.590
Write your friend will be frustrated.

63
00:03:53.590 --> 00:03:58.670
They don't want to go through and recap every single change they made and you're frustrated because

64
00:03:58.670 --> 00:04:00.620
now you would have to go through both files.

65
00:04:00.620 --> 00:04:06.890
Word by word and sort of compare them and see what change and either copy and mushed them together yourself.

66
00:04:06.890 --> 00:04:08.340
So no matter how it's sliced.

67
00:04:08.350 --> 00:04:15.230
One of you is going to have to do a bit of tedious miserable work of combing through things and merging

68
00:04:15.230 --> 00:04:16.220
them together.

69
00:04:16.370 --> 00:04:23.750
And that process of tracking the changes and comparing and merging is exactly what good does for us.

70
00:04:23.750 --> 00:04:30.410
So that example was just a long winded way of saying that get makes collaboration very easy and it allows

71
00:04:30.410 --> 00:04:33.380
you to be more productive when working in a team.

72
00:04:33.380 --> 00:04:37.170
You don't need to sit around waiting for someone else to make their changes.

73
00:04:37.190 --> 00:04:43.730
You can continue working on your changes and rest assured that when it comes time to sort of merge everyone's

74
00:04:43.730 --> 00:04:49.140
changes together so that everyone has the most updated copy of the files get has got your back.

75
00:04:49.160 --> 00:04:53.750
Get will take care of merging any conflicts get we'll save the day.

76
00:04:53.750 --> 00:05:00.860
Now let's cover one final reason why I think people love get so much and that is something called feature

77
00:05:00.890 --> 00:05:02.030
branches.

78
00:05:02.150 --> 00:05:06.930
OK so what in the world is a feature branch what does that mean.

79
00:05:06.930 --> 00:05:08.280
What is a branch.

80
00:05:08.490 --> 00:05:11.940
Well the best way to explain that is to look at an example.

81
00:05:12.180 --> 00:05:18.600
So let's imagine that we have an existing web site that we are responsible for editing and updating

82
00:05:18.600 --> 00:05:20.640
and making improvements too.

83
00:05:20.680 --> 00:05:23.920
And let's imagine that we were just assigned to tasks.

84
00:05:24.240 --> 00:05:31.920
Number one we need to redesign the header of the Web site maybe add a new logo change the slogan change

85
00:05:31.920 --> 00:05:39.530
the colors and task number two we need to adjust the styling and ordering of the links in the footer.

86
00:05:39.890 --> 00:05:44.600
OK so how would things play out if we were not using get.

87
00:05:44.760 --> 00:05:47.060
It would probably look something like this.

88
00:05:47.100 --> 00:05:53.370
Day one we get started on both tasks but we don't complete either task so we can't go live with our

89
00:05:53.370 --> 00:05:54.450
changes.

90
00:05:54.570 --> 00:05:58.270
Day 2 rolls around and we continue working on both tasks.

91
00:05:58.470 --> 00:06:01.980
By the end of the day we actually finish the footer changes.

92
00:06:02.250 --> 00:06:05.110
But our Hetter is nowhere near complete.

93
00:06:05.340 --> 00:06:11.970
So now we are in this weird position where we wish we could go live with the updated footer but we can't

94
00:06:11.970 --> 00:06:17.490
because our code is all lumped together and if we uploaded the files to the live Web site right now

95
00:06:17.670 --> 00:06:22.380
the footer would look great but the header would look broken and we might not finish the header for

96
00:06:22.380 --> 00:06:23.400
another week.

97
00:06:23.570 --> 00:06:23.880
OK.

98
00:06:23.880 --> 00:06:28.750
And you never want one piece of your code holding another piece of your code hostage.

99
00:06:28.980 --> 00:06:33.420
So clearly this is not the most productive or efficient workflow.

100
00:06:33.420 --> 00:06:41.180
Now instead let's look at the good way of doing things the way of implementing multiple tasks or features.

101
00:06:41.190 --> 00:06:46.860
All right if we were using get and we were just assigned the header and footer tasks Here's how it would

102
00:06:46.860 --> 00:06:47.400
look.

103
00:06:47.610 --> 00:06:50.120
Let's think of our project as a tree.

104
00:06:50.190 --> 00:06:55.200
We want to create two new branches one for each task.

105
00:06:55.260 --> 00:06:57.170
So we create one branch and name it.

106
00:06:57.170 --> 00:07:00.430
Header changes and we would create another new branch and name it.

107
00:07:00.430 --> 00:07:03.900
Footer changes when we feel like working on the header.

108
00:07:03.900 --> 00:07:08.880
We check out the header changes branch when we make any changes related to the footer we check out the

109
00:07:08.880 --> 00:07:15.420
footer changes branch we can hop back and forth between these two branches or between these two versions

110
00:07:15.420 --> 00:07:21.250
of our project throughout the day get tracks the branches separately from one another.

111
00:07:21.510 --> 00:07:25.270
So it is not a big deal if we finish one feature first.

112
00:07:25.290 --> 00:07:29.420
So let's say we finished the footer changes and we are ready to go live with them.

113
00:07:29.460 --> 00:07:36.090
All we do is we take that branch that put her changes branch and we just fold it back up into our tree

114
00:07:36.510 --> 00:07:44.280
or we merge it into the tree maybe a week later or even a month later we finish the header redesign

115
00:07:44.550 --> 00:07:45.690
whenever that time comes.

116
00:07:45.690 --> 00:07:49.030
We just fold that branch back up into the tree as well.

117
00:07:49.350 --> 00:07:52.590
And that is feature branches in a nutshell.

118
00:07:52.890 --> 00:07:56.420
OK so we've answered the question what is good.

119
00:07:56.460 --> 00:08:02.370
We know that get helps us manage our files get basically tracks changes which just three big things

120
00:08:02.370 --> 00:08:02.970
for us.

121
00:08:03.030 --> 00:08:04.620
It gives us history.

122
00:08:04.800 --> 00:08:10.530
It makes it easy to collaborate with other people and it makes it easy to work on multiple features

123
00:08:10.590 --> 00:08:12.020
at once.

124
00:08:12.060 --> 00:08:16.830
Moving on to the next question Why should we learn good.

125
00:08:17.160 --> 00:08:20.880
I can't think of a single reason not to learn good.

126
00:08:21.210 --> 00:08:28.620
Every job I've had in the last five years I've used get every single day in the developer world.

127
00:08:28.620 --> 00:08:32.070
It's just sort of assumed that you know good.

128
00:08:32.430 --> 00:08:38.280
So whether you want to become more attractive to employers or you want to fly solo but bring a bit of

129
00:08:38.280 --> 00:08:44.090
structure and organization to your code learning good is truly a must.

130
00:08:44.100 --> 00:08:46.970
Which brings us to where do we begin.

131
00:08:47.310 --> 00:08:52.380
Well the good news is you've already begun you've made it through this lesson which means you know what

132
00:08:52.380 --> 00:08:55.680
good is in the first place and what it does for us.

133
00:08:55.830 --> 00:08:58.630
The next step is to seek get in.

134
00:08:58.860 --> 00:09:01.870
And that is exactly what we are going to do in the next lesson.

135
00:09:01.890 --> 00:09:09.000
I will share my screen I will walk through the basic steps of actually quote using yet we can see some

136
00:09:09.000 --> 00:09:10.370
of its features come to life.

137
00:09:10.380 --> 00:09:12.180
We can get our feet wet together.

138
00:09:12.270 --> 00:09:15.920
It's going to be a lot of fun and I will see you in the next lesson.
