WEBVTT
1
00:00:04.920 --> 00:00:06.180
Hello everyone.

2
00:00:06.180 --> 00:00:12.350
I've got some good news in this lesson we will not be learning about yet another tool.

3
00:00:12.360 --> 00:00:17.870
So far we've learned about get node NPM and web back.

4
00:00:17.880 --> 00:00:22.770
And while knowing how to use these tools is an essential part of being a developer today.

5
00:00:22.890 --> 00:00:28.370
You are not going to land your dream job just by knowing how to use these things at the end of the day

6
00:00:28.380 --> 00:00:32.760
the thing that is going to make you stand out from all of the other developers.

7
00:00:32.760 --> 00:00:39.510
Aside from having a good attitude is your ability to create amazing Web sites and in order to do that

8
00:00:39.540 --> 00:00:46.170
you need to be able to write amazing CSX which is exactly what we are going to learn about in this lesson

9
00:00:46.590 --> 00:00:50.120
we are going to begin building the travel agency Web site together.

10
00:00:50.190 --> 00:00:57.000
And we are going to kick things off in this lesson by learning how to write super organized CSX.

11
00:00:57.000 --> 00:01:00.360
Here are three key concepts that we will cover in this lesson.

12
00:01:00.480 --> 00:01:03.310
Number one file architecture.

13
00:01:03.420 --> 00:01:10.470
We want to organize our CSX code into multiple files and we want each file to be relatively small and

14
00:01:10.470 --> 00:01:12.390
have a specific purpose.

15
00:01:12.390 --> 00:01:18.600
Number two we will learn how to identify patterns in the design that we are working on and we will learn

16
00:01:18.600 --> 00:01:20.720
by doing so is so important.

17
00:01:20.790 --> 00:01:27.300
And number three we want to give ourselves a few rules or guidelines to follow as we are coming up with

18
00:01:27.300 --> 00:01:31.840
class names and writing our CSF selectors.

19
00:01:31.890 --> 00:01:32.420
All right.

20
00:01:32.460 --> 00:01:33.950
It's time to get started.

21
00:01:33.960 --> 00:01:35.970
Let's build a Web site together.

22
00:01:36.000 --> 00:01:39.420
The first thing I want you to do is open up a web browser.

23
00:01:39.480 --> 00:01:43.560
After you've done that I want you to go to the travel site folder.

24
00:01:43.650 --> 00:01:45.870
You created this folder towards the end of the.

25
00:01:45.900 --> 00:01:47.880
Get section in the course.

26
00:01:47.880 --> 00:01:51.960
Let's go into this folder and then go into the app folder.

27
00:01:51.960 --> 00:01:58.630
And I want you to drag the index thought H PML file on top of your web browser.

28
00:01:58.650 --> 00:01:59.130
All right.

29
00:01:59.130 --> 00:02:02.030
So this is our starter page.

30
00:02:02.100 --> 00:02:07.020
You and I are starting with this exact same file and we are going to move forward together.

31
00:02:07.050 --> 00:02:15.210
Currently this page is nothing but super simple raw h t AML with a few image elements added in there

32
00:02:15.210 --> 00:02:19.980
is not even a single ounce of CSX being applied to this page.

33
00:02:20.040 --> 00:02:22.860
The question becomes what is our goal.

34
00:02:23.190 --> 00:02:27.060
Well let's imagine we work for a company and we're the developer.

35
00:02:27.060 --> 00:02:33.090
And on our team there is a designer who sent us this file and the openness.

36
00:02:33.090 --> 00:02:35.540
This is just one big giant image file.

37
00:02:35.580 --> 00:02:39.710
But let's imagine that the designer wants the Web site to look like this.

38
00:02:39.870 --> 00:02:45.660
Now as the developer it is our job to make this come to life with code.

39
00:02:45.660 --> 00:02:46.820
So this is our goal.

40
00:02:48.570 --> 00:02:52.380
This is how things should look.

41
00:02:52.430 --> 00:02:58.950
There's only one way to move forward and that is to begin writing CSX to bring this design to life.

42
00:02:58.970 --> 00:03:06.800
So let's go ahead and open the entire travel site folder in your text editor and let's open up our main

43
00:03:06.860 --> 00:03:08.360
CSX file.

44
00:03:08.390 --> 00:03:16.910
It lives in the app folder and then the assets folder the styles folder and there it is styles dot CSX.

45
00:03:16.910 --> 00:03:21.170
All of this was just dummy or test code from our Web pack.

46
00:03:21.170 --> 00:03:23.300
And post CSX lesson.

47
00:03:23.390 --> 00:03:30.260
So let's go ahead and select everything in this file and delete it and let's begin with a bit of global

48
00:03:30.260 --> 00:03:36.080
CSX that we want to trickle down or cascade down to every element on the page.

49
00:03:36.170 --> 00:03:40.980
So let's target the body element and let's assign a global font.

50
00:03:41.360 --> 00:03:49.220
The designer told me that they want to use a font named rubato and we will use a sans serif fallback

51
00:03:49.250 --> 00:03:50.800
if that isn't available.

52
00:03:51.140 --> 00:03:55.120
And let's set the default text color for the page to a dark gray.

53
00:03:55.640 --> 00:03:57.340
Let's go ahead and save this.

54
00:03:57.380 --> 00:04:04.550
And now remember our HDMI web page is not actually pointing towards this CSX file.

55
00:04:04.550 --> 00:04:10.190
So in order for this new code to actually be applied to the page we would need to start our web pack

56
00:04:10.220 --> 00:04:11.300
command.

57
00:04:11.300 --> 00:04:11.540
Right.

58
00:04:11.540 --> 00:04:17.930
And then Web pack will watch us and recreate our bundled file whenever we save changes to a source file

59
00:04:17.930 --> 00:04:19.100
like this.

60
00:04:19.100 --> 00:04:28.300
So right now do this with me jump into your command line and run the following command with me NPM run

61
00:04:28.510 --> 00:04:29.200
dev

62
00:04:32.840 --> 00:04:34.520
all right that task is now running.

63
00:04:34.970 --> 00:04:40.880
So let's go over to the browser and refresh and we see that we are now using the rubato font.

64
00:04:40.880 --> 00:04:42.330
And it's a dark gray.

65
00:04:42.380 --> 00:04:48.650
If we scroll up to the top of the page we see that this image here is so large that it's forcing the

66
00:04:48.650 --> 00:04:51.200
browser to scroll horizontally.

67
00:04:51.260 --> 00:04:54.550
Let's write a global CSX rule to fix that.

68
00:04:54.680 --> 00:05:00.890
So let's target all images on the page and give them a max width of 100 percent.

69
00:05:01.070 --> 00:05:03.860
And let's tell it to use a height of autumn.

70
00:05:03.860 --> 00:05:07.670
Go ahead and save that and refresh the browser.

71
00:05:07.810 --> 00:05:08.740
That looks better.

72
00:05:08.890 --> 00:05:09.390
OK.

73
00:05:09.430 --> 00:05:11.550
What do we want to work on next.

74
00:05:11.560 --> 00:05:16.250
To answer that let's look at the design file that the designer sent to us for now.

75
00:05:16.270 --> 00:05:20.920
I don't think there are any other global styles that we would want to trickle down to every element

76
00:05:20.920 --> 00:05:22.100
on the page.

77
00:05:22.120 --> 00:05:27.420
I think our next step is to simply choose a unique part of this design and begin building it.

78
00:05:27.430 --> 00:05:34.370
So for the time being let's skip this very top header navigation bar and let's choose this banner area.

79
00:05:34.390 --> 00:05:39.370
This image of the water with text layered on top as the first thing that we will build.

80
00:05:39.370 --> 00:05:39.800
All right.

81
00:05:39.820 --> 00:05:43.730
If we hop back to the browser we can see there is the image.

82
00:05:43.750 --> 00:05:48.600
And here is the text that we want to sit on top of the image.

83
00:05:48.610 --> 00:05:52.060
Let's take a look at this section of the page in our text editor.

84
00:05:52.150 --> 00:05:55.480
So back in the index dot HDMI whole file.

85
00:05:55.630 --> 00:06:01.880
If we scroll down a bit we see this area with a class of large hero.

86
00:06:02.270 --> 00:06:10.780
So let's go ahead and write CSX that targets the class of large hero that will turn this into this.

87
00:06:10.880 --> 00:06:11.150
All right.

88
00:06:11.180 --> 00:06:17.990
So in our CSX file we could go down to the bottom and create a new rule targeting large hero.

89
00:06:18.080 --> 00:06:23.930
But if we think back to the key concepts of this lesson we remember that we wanted to pay attention

90
00:06:23.930 --> 00:06:31.280
to file architecture which means we don't want to just dump all of our CSX within this one file so let's

91
00:06:31.280 --> 00:06:38.040
delete this and this is actually where post CSX and imports come into play.

92
00:06:38.090 --> 00:06:39.080
So follow along.

93
00:06:39.080 --> 00:06:46.370
I want you to find the main travel site folder and within the app folder and then within the assets

94
00:06:46.370 --> 00:06:54.590
folder and within the styles folder I want you to create a new folder named modules.

95
00:06:54.590 --> 00:07:00.520
OK and then back in our text editor within the styles folder here is the new modules folder.

96
00:07:00.830 --> 00:07:11.490
Let's create a new file within this new folder and name it underscore large dash hero dot CSX.

97
00:07:11.610 --> 00:07:14.120
There's nothing special about this file name.

98
00:07:14.160 --> 00:07:19.140
It was my opinionated choice to begin the file with an underscore in the programming world.

99
00:07:19.140 --> 00:07:24.840
If you begin a file name with an underscore you are indicating to other developers that that file is

100
00:07:24.840 --> 00:07:31.230
considered a partial file which just means you probably won't use this file in and of itself but instead

101
00:07:31.230 --> 00:07:33.890
you will import this file into some other file.

102
00:07:33.900 --> 00:07:40.710
So for example if we had a bit of CSX within this file for the time being let's just say position relative

103
00:07:41.130 --> 00:07:47.040
how do we import this large hero CSX file into our main style sheet.

104
00:07:47.040 --> 00:07:54.000
It's as simple as using the at symbol and then saying import quotes and then we want to drill into the

105
00:07:54.000 --> 00:07:59.700
modules folder that we just created and then we list out the large hero file.

106
00:07:59.700 --> 00:08:06.850
We actually do not need to include the DOT CSX and be sure to include a semicolon to save you a bit

107
00:08:06.850 --> 00:08:07.840
of frustration.

108
00:08:07.930 --> 00:08:12.020
Make sure you include the import line at the top of your file.

109
00:08:12.160 --> 00:08:13.900
Not down at the bottom.

110
00:08:13.960 --> 00:08:20.980
Now it's important to point out that import is a native CSX feature but we don't want the web browser

111
00:08:20.980 --> 00:08:24.280
to have to download multiple CSX files.

112
00:08:24.280 --> 00:08:32.380
Instead we want web pack and post CSX to see this import line and actually replace this line with the

113
00:08:32.380 --> 00:08:39.350
contents of this large hero file and we can very easily setup post CSX to do that.

114
00:08:39.370 --> 00:08:42.530
Let's do that right now by hopping over to the command line.

115
00:08:42.670 --> 00:08:47.540
Go ahead and press control C to stop Webb pack from watching us.

116
00:08:47.740 --> 00:08:57.370
And now we can run a command and we want to install a post CSX package so lets type npm install the

117
00:08:57.370 --> 00:09:02.440
name of the package that we want is post CSX dash import.

118
00:09:02.740 --> 00:09:10.510
And be sure to include dash dash save Dev go ahead and hit enter and once that download completes we

119
00:09:10.510 --> 00:09:13.150
then want to go leverage that package.

120
00:09:13.390 --> 00:09:21.630
So to do that we need to hop into our web Park dot config dot J.S. file towards the top of this file.

121
00:09:21.630 --> 00:09:25.420
Remember we created this array named post CSX.

122
00:09:25.430 --> 00:09:26.640
Plug ins.

123
00:09:26.880 --> 00:09:29.190
So let's do this at the very start of this array.

124
00:09:29.190 --> 00:09:32.170
So maybe right at the beginning of this first require line.

125
00:09:32.190 --> 00:09:40.110
Let's add a new line and let's require n so require parentheses in the name of the package was post

126
00:09:40.200 --> 00:09:43.660
CSX dash import.

127
00:09:43.710 --> 00:09:47.110
Be sure to include a comma at the end of that line.

128
00:09:47.290 --> 00:09:54.420
Okay then let's go ahead and save this file and then also in my case I need to be sure to save my style's

129
00:09:54.420 --> 00:10:00.470
dot CSX file and now to make sure that this import is working just as a test.

130
00:10:00.480 --> 00:10:06.300
Let's go into our large hero file and just to make it abundantly clear that it's working let's add a

131
00:10:06.300 --> 00:10:10.290
line and say color should be purple all right.

132
00:10:10.320 --> 00:10:15.140
Let's give that a save and then let's start up our web pack task again.

133
00:10:15.180 --> 00:10:19.380
So in the command line let's run NPM run Dev

134
00:10:22.250 --> 00:10:22.600
okay.

135
00:10:22.640 --> 00:10:28.100
Then if I go to the browser and refresh if we scroll down a bit here's that large hero area.

136
00:10:28.100 --> 00:10:28.490
Cool.

137
00:10:28.550 --> 00:10:34.940
It's purple now that we know our import is working we don't actually need color purple so let's delete

138
00:10:34.940 --> 00:10:41.750
that and let's jump back into our main styles dot CSX file.

139
00:10:41.900 --> 00:10:48.890
Why don't we take things one step further and move these to global rules into their own file dedicated

140
00:10:48.890 --> 00:10:50.370
to global rules.

141
00:10:50.390 --> 00:10:56.870
So go ahead and copy these rules to your clipboard and let's create a new folder that sit side by side

142
00:10:56.880 --> 00:11:03.410
the modules folder that we created just a moment ago and let's name this new folder base within our

143
00:11:03.410 --> 00:11:04.760
text editor.

144
00:11:04.760 --> 00:11:15.080
Let's create a new file in that base folder and let's name this file underscore global dot CSX and let's

145
00:11:15.080 --> 00:11:17.990
go ahead and paste in those rules that we wrote earlier.

146
00:11:18.050 --> 00:11:23.740
Go ahead and save this file and back in our main style sheet up on the very top line.

147
00:11:23.750 --> 00:11:31.130
Let's create another import drill into the base folder that we just created and grab the global file.

148
00:11:31.160 --> 00:11:31.930
Perfect.

149
00:11:31.940 --> 00:11:37.510
So now our main CSX file doesn't contain any CSX itself.

150
00:11:37.520 --> 00:11:44.090
Instead this main file is like a recipe pointing towards other ingredients ingredients that each have

151
00:11:44.090 --> 00:11:47.540
their own specific focused purpose.

152
00:11:47.540 --> 00:11:53.810
This will let us keep our code super organized and let me show you one last reason why I love the way

153
00:11:53.810 --> 00:11:57.000
that post CSX handles imports.

154
00:11:57.020 --> 00:12:04.850
You might remember earlier in the course I mentioned a popular CSX package named normalized CSX.

155
00:12:04.970 --> 00:12:12.720
We haven't used normalized CSX yet but we did install it when we were first learning how to use NPM.

156
00:12:12.740 --> 00:12:19.130
So for example if you open up the package dot Jace on file that sits in the route of our project folder

157
00:12:19.700 --> 00:12:23.780
under dependencies you will see normalized CSX.

158
00:12:23.780 --> 00:12:30.230
Now currently that means that the CSX for that package lives within the very base of our project in

159
00:12:30.230 --> 00:12:35.150
the node modules folder within this normalized CSX folder.

160
00:12:35.390 --> 00:12:40.820
There is the style sheet so you might think that it's tricky to navigate to this folder in order to

161
00:12:40.820 --> 00:12:43.240
import normalize but watch out.

162
00:12:43.250 --> 00:12:48.050
Easy post CSX makes this within our main style sheet.

163
00:12:48.740 --> 00:12:50.770
We can just say import.

164
00:12:51.080 --> 00:12:58.670
And then we'd literally just type the name of the NPM package normalized dot CSX semicolon go ahead

165
00:12:58.670 --> 00:13:00.200
and hit save.

166
00:13:00.410 --> 00:13:06.440
And if we go back to the web browser before I refresh I want you to pay attention to this tiny white

167
00:13:06.440 --> 00:13:10.630
margin you see on the left and right side of the browser.

168
00:13:10.700 --> 00:13:19.070
So if I refresh you can see it's gone and we can think normalized dot CSX for that normalize is an alternative

169
00:13:19.070 --> 00:13:27.050
to CSX resets it adjusts the styles of certain elements in an effort to make all web browsers render

170
00:13:27.050 --> 00:13:33.090
things more consistently normalizes is excellent I recommend using it on all of your projects.

171
00:13:33.110 --> 00:13:33.520
All right.

172
00:13:33.530 --> 00:13:37.720
So that was a crazy seven minute tangent on file architecture.

173
00:13:37.790 --> 00:13:40.510
Let's get back to the actual task at hand.

174
00:13:40.610 --> 00:13:46.420
We want to write CSX for this part of the design the image with text on top of it.

175
00:13:46.490 --> 00:13:52.760
And if we jump back to our text editor we created a file dedicated to that sole purpose.

176
00:13:52.760 --> 00:13:56.600
So here we are in the large hero CSX file.

177
00:13:56.630 --> 00:13:57.920
Let's get to work.

178
00:13:57.950 --> 00:14:04.450
So the first thing that I want to do is position this text so that it sits on top of the image.

179
00:14:04.550 --> 00:14:08.120
So to do that let's head over to our h t AML.

180
00:14:08.150 --> 00:14:10.280
Here is the large hero area.

181
00:14:10.280 --> 00:14:16.550
Now this image can stay where it is but if we want to position this text to sit on top of the image

182
00:14:16.820 --> 00:14:23.570
we want to wrap these elements these heading in paragraph elements in their own unique div so that we

183
00:14:23.570 --> 00:14:29.780
can position that div as a whole instead of positioning each one of these elements independently.

184
00:14:29.780 --> 00:14:32.590
So let's create a div sandwich.

185
00:14:32.660 --> 00:14:33.630
Here's the beginning.

186
00:14:33.650 --> 00:14:40.640
Let's indent these lines and then let's close that new div and let's give this div a unique class name

187
00:14:40.640 --> 00:14:43.600
so that we can target it with our CSX.

188
00:14:43.640 --> 00:14:50.530
Let's go with large hero underscore underscore text content.

189
00:14:50.780 --> 00:14:56.450
If you are wondering how I chose this exact name and what the underscores mean don't worry we will get

190
00:14:56.450 --> 00:14:58.000
to that in due time.

191
00:14:58.100 --> 00:15:05.930
But for now let's go ahead and save this file and then hop into our CSX file and say large hero underscore

192
00:15:05.960 --> 00:15:14.270
underscore text content and we want to write CSX that positions the text on top of the image.

193
00:15:14.330 --> 00:15:25.410
So if we say position absolute top zero left zero that will position the text in the very top left corner

194
00:15:25.530 --> 00:15:26.630
of the image.

195
00:15:26.820 --> 00:15:33.720
But we want it to be centered both horizontally and vertically centering it horizontally is as simple

196
00:15:33.720 --> 00:15:38.700
as saying width 100 percent and then text align center

197
00:15:41.190 --> 00:15:44.610
centering the content vertically is a bit trickier.

198
00:15:44.820 --> 00:15:47.760
Every developer has their own specific way of doing it.

199
00:15:47.760 --> 00:15:55.740
Let me show you mine so we can start out by changing the top value to 50 percent.

200
00:15:55.840 --> 00:16:02.200
So now the top edge of our text div which is right about here is center aligned vertically with the

201
00:16:02.200 --> 00:16:03.940
overall container element.

202
00:16:04.090 --> 00:16:06.220
But our content certainly isn't.

203
00:16:06.220 --> 00:16:09.600
So to fix that we just need to pull this content up a bit.

204
00:16:09.700 --> 00:16:16.300
Specifically we want to pull it up about half of its own height so to do that we can use a property

205
00:16:16.330 --> 00:16:18.170
named transform.

206
00:16:18.460 --> 00:16:25.150
And then we can leverage a function named translate why this will let us position an element vertically

207
00:16:25.360 --> 00:16:27.310
relative to itself.

208
00:16:27.310 --> 00:16:34.420
So for example if we say 100 percent that will push the content down.

209
00:16:34.420 --> 00:16:37.020
However Tall the content is.

210
00:16:37.030 --> 00:16:42.940
So for example if this div of text is about one hundred and ninety pixels tall it will be pushed down

211
00:16:42.960 --> 00:16:45.300
one hundred and ninety pixels.

212
00:16:45.340 --> 00:16:48.700
So let's set this value temporarily to zero.

213
00:16:50.110 --> 00:16:56.100
If this is the content neutral positioning we just want to pull it up about half of its own height.

214
00:16:56.770 --> 00:17:04.740
So to pull it up we can use a negative value and let's say 50 percent excellent.

215
00:17:04.750 --> 00:17:09.760
Now some of you might be yelling at the screen right now and wondering why we didn't just apply this

216
00:17:09.760 --> 00:17:16.330
image as a CSA as background image if we would have done that instead of having this image be an actual

217
00:17:16.390 --> 00:17:21.300
image element we wouldn't have had to deal with all of this positioning nonsense.

218
00:17:21.310 --> 00:17:25.720
Well that's a great question both routes definitely have their advantages.

219
00:17:25.720 --> 00:17:31.930
I decided to use a real image element instead of a background image because in a few lessons from now

220
00:17:32.020 --> 00:17:38.470
we will be learning about responsive images and I feel that the advantages that responsive images bring

221
00:17:38.470 --> 00:17:42.720
to the table tip the pros and cons scale in favor of this route.

222
00:17:43.030 --> 00:17:47.910
But there is no right or wrong way to overlay text on top of an image.

223
00:17:47.920 --> 00:17:50.380
This is just one way to do it.

224
00:17:50.380 --> 00:17:56.480
Now having said that I think this is a good stopping point for this video but not for this lesson.

225
00:17:56.500 --> 00:18:01.080
This is actually a two part lesson because there is a lot to digest.

226
00:18:01.090 --> 00:18:06.280
You will remember back at the beginning of this video we mentioned that there are three key points to

227
00:18:06.280 --> 00:18:14.170
keeping our CSX very organized and in this video part one we spent a lot of our time on file architecture

228
00:18:14.740 --> 00:18:16.020
in the next video.

229
00:18:16.030 --> 00:18:22.930
Part two of this lesson we will focus on how to identify patterns in our design and why doing so well

230
00:18:22.930 --> 00:18:24.660
let us write better code.

231
00:18:24.700 --> 00:18:30.070
We will also learn about a few rules and guidelines that we want to follow when we come up with class

232
00:18:30.070 --> 00:18:34.510
names and also when we write our CSF selectors.

233
00:18:34.660 --> 00:18:40.570
And I hope it goes without saying that we will also continue to build the travel agency website together.

234
00:18:40.600 --> 00:18:44.740
So this lesson will continue when I see you in the next video.
