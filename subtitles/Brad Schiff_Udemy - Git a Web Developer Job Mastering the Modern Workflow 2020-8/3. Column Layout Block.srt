1
00:00:05,190 --> 00:00:12,990
Hello everyone in this lesson we will build a re-usable block that we can use to create column layouts

2
00:00:13,230 --> 00:00:14,790
throughout our page.

3
00:00:15,030 --> 00:00:17,240
Let's dive right in and get started.

4
00:00:17,250 --> 00:00:22,790
So in this lesson we want to focus on this content.

5
00:00:22,890 --> 00:00:28,430
If we look at our design file we see that that content you use a two column layout.

6
00:00:29,130 --> 00:00:35,160
So basically we want this content here to be placed next to the image.

7
00:00:35,400 --> 00:00:38,100
And what do these two columns belong to.

8
00:00:38,370 --> 00:00:41,340
They belong to a row right.

9
00:00:41,400 --> 00:00:43,030
So if we think of a spreadsheet.

10
00:00:43,200 --> 00:00:44,930
This would be Column A.

11
00:00:45,180 --> 00:00:50,340
This would be column B and they're grouped together in a row.

12
00:00:50,610 --> 00:00:52,140
So in our TMI.

13
00:00:52,230 --> 00:00:59,670
Let's wrap all of this content in a new div that has a class of row we can find that content in our

14
00:00:59,670 --> 00:01:03,680
each team all by searching for how we got started.

15
00:01:04,020 --> 00:01:06,250
OK so here is that image.

16
00:01:06,720 --> 00:01:14,700
Let's open our div and give it a class of row and then if we scroll down a bit after this paragraph

17
00:01:14,700 --> 00:01:20,370
let's close that divide that we just opened and let's be sure to indent all of the content within that

18
00:01:20,370 --> 00:01:22,090
new div next.

19
00:01:22,110 --> 00:01:27,760
Let's go ahead and create a new CSSA file for our row class.

20
00:01:27,810 --> 00:01:33,630
So in our assets styles and then modules.

21
00:01:33,750 --> 00:01:42,640
Let's create a new file name this new file underscore row Ducey assets.

22
00:01:42,650 --> 00:01:46,740
Let's create a new class and then go ahead and save this file.

23
00:01:46,880 --> 00:01:55,880
And before we forget let's go into our main styles not CSSA file and import this new file underscore

24
00:01:56,020 --> 00:01:56,940
row.

25
00:01:57,200 --> 00:01:59,470
Go ahead and say that next.

26
00:01:59,480 --> 00:02:06,240
Let's wrap each section of content that we want to be a call them in their own device.

27
00:02:06,260 --> 00:02:11,620
So in our age team out within a row let's create two new divs.

28
00:02:12,680 --> 00:02:22,630
Let's cut and paste the image into the first div and let's cut and paste from the heading level to down

29
00:02:22,630 --> 00:02:26,860
to this paragraph into the second div.

30
00:02:26,990 --> 00:02:31,320
Paste it in and be sure to get rid of these empty lines.

31
00:02:33,630 --> 00:02:39,540
All right so now the question becomes what should the class name be for these two new divs that we just

32
00:02:39,540 --> 00:02:40,980
created.

33
00:02:41,010 --> 00:02:43,600
We know that they belong to the road block.

34
00:02:43,650 --> 00:02:48,050
So their class names should begin with row and then underscore underscore.

35
00:02:48,130 --> 00:02:52,700
But what do we actually want to name each of these column elements.

36
00:02:52,950 --> 00:02:56,300
Well let's look at our design file for just a moment.

37
00:02:56,400 --> 00:03:01,710
Why don't we go ahead and think of our row in terms of a 12 column grid.

38
00:03:01,770 --> 00:03:09,470
So this image for our first column looks like it's taking up about one third of the width of the row.

39
00:03:09,660 --> 00:03:12,870
Or to put that in the context of the 12 column grid.

40
00:03:12,930 --> 00:03:15,410
What is one third of 12.

41
00:03:15,420 --> 00:03:21,870
The answer is 4 and it just so happens that it looks like this image column is taking up four of the

42
00:03:21,870 --> 00:03:23,840
12 column grid bars.

43
00:03:23,910 --> 00:03:29,550
Our second column looks like it's taking up about two thirds of the available with.

44
00:03:29,550 --> 00:03:31,890
And what is two thirds of 12.

45
00:03:31,890 --> 00:03:32,990
The answer is 8.

46
00:03:33,240 --> 00:03:39,450
And it looks like this column is taking up eight of our 12 column grid bars so we could call this layout

47
00:03:39,510 --> 00:03:41,740
a 4 8 split.

48
00:03:41,940 --> 00:03:43,780
So over an hour each time.

49
00:03:43,800 --> 00:03:50,970
Now why don't we just give this element a class of row underscore underscore for end and give this column

50
00:03:51,060 --> 00:03:54,230
a class of row underscore underscore 8.

51
00:03:54,510 --> 00:04:01,320
Let's go ahead and save this file and jump over to our row does CSSA file and write a bit of CSSA to

52
00:04:01,320 --> 00:04:03,710
make the call them lay out come to life.

53
00:04:03,750 --> 00:04:08,510
So let's begin with the underscore underscore for class.

54
00:04:08,790 --> 00:04:15,900
Let's tell it to float to the left let's give it a width and let's actually open our calculators if

55
00:04:15,900 --> 00:04:23,470
we think of our rows available with as 100 percent and then divide that up amongst our 12 column grid.

56
00:04:23,490 --> 00:04:31,760
So 100 divided by 12 that means that each one of our 12 grid bars is eight and a third percent.

57
00:04:31,770 --> 00:04:38,410
So for our for class we can just take that in a third and multiply it by four.

58
00:04:38,610 --> 00:04:43,220
And no surprise that gives us thirty three point three three which is what we expect.

59
00:04:43,230 --> 00:04:47,450
Considering we wanted this class to take up a third of the available with.

60
00:04:47,490 --> 00:04:50,970
So let's go with thirty three point three three percent.

61
00:04:50,970 --> 00:04:59,710
All right let's create the rule for our underscore underscore a class floated to the left give it a.

62
00:05:00,220 --> 00:05:02,260
And we don't need a calculator.

63
00:05:02,310 --> 00:05:08,220
If this is one third and we know that two thirds would be sixty six point six six percent.

64
00:05:08,520 --> 00:05:16,590
Let's save this file and check the browser so we do see two columns this content and the image are now

65
00:05:16,590 --> 00:05:19,660
side by side but we also see a problem.

66
00:05:19,680 --> 00:05:26,250
The blue background feature section has moved up and is now sitting behind our content.

67
00:05:26,250 --> 00:05:31,650
This is because we forgot to clear our floats when we float an element.

68
00:05:31,650 --> 00:05:34,660
We take it out of the normal flow of the page.

69
00:05:34,800 --> 00:05:39,330
And in this instance our road div only has two direct children.

70
00:05:39,450 --> 00:05:45,300
The two columns and if both of these elements have been taken out of the flow of the page it's almost

71
00:05:45,300 --> 00:05:51,420
as if our main road div has no idea how tall it should be because as far as it's concerned in terms

72
00:05:51,420 --> 00:05:54,960
of sizing and styling it thinks that it's empty.

73
00:05:54,960 --> 00:06:02,310
So for example we can tell the main road give to have a background color of yellow and if we save this

74
00:06:02,310 --> 00:06:07,110
and check the browser We don't even see one pixel of yellow anywhere.

75
00:06:07,110 --> 00:06:10,010
Now there are several different ways to fix this.

76
00:06:10,200 --> 00:06:14,140
Let's look at the sloppy not ideal way first.

77
00:06:14,160 --> 00:06:23,400
So in our HTL right before the main road div ends we can create another element and give it a class

78
00:06:23,490 --> 00:06:25,110
of clear me.

79
00:06:25,110 --> 00:06:30,800
The key here is that this element comes after all of it's floated siblings.

80
00:06:30,810 --> 00:06:34,830
So let's save this file and jump into CSX.

81
00:06:34,920 --> 00:06:41,420
Let's create a rule that targets that element and let's say Clear left or clear both.

82
00:06:41,460 --> 00:06:46,790
So if we say this and check the browser we see that that got the job done.

83
00:06:46,920 --> 00:06:52,980
The main parent road div now knows how tall it should be because all of its floated children have been

84
00:06:52,980 --> 00:06:54,240
cleared.

85
00:06:54,240 --> 00:07:00,600
Now the reason I called that the sloppy or not ideal way of clearing our floats is because we added

86
00:07:00,870 --> 00:07:07,620
an empty element to our markup and whenever possible you should avoid empty elements that only exist

87
00:07:07,710 --> 00:07:09,420
for styling purposes.

88
00:07:09,420 --> 00:07:17,100
So let's delete this save this file and jump back into our CSSA file and delete this clear me rule and

89
00:07:17,100 --> 00:07:21,160
let me show you a more ideal way of clearing our floats.

90
00:07:21,360 --> 00:07:26,520
So up at the top of this row rule let's create a new selector.

91
00:07:26,910 --> 00:07:34,950
We can say calling Cohen after to create a bit of pseudo or fake content with CSX.

92
00:07:35,010 --> 00:07:41,910
So let's say content double quotes with nothing in between the quotes and then let's tell this empty

93
00:07:41,910 --> 00:07:48,230
fake space to be set to clear both for a bit of added extra browser support.

94
00:07:48,230 --> 00:07:51,420
We can also just a display table.

95
00:07:51,540 --> 00:08:00,270
So this VSS selector will add this blank space after all of the content in the main road div or in other

96
00:08:00,270 --> 00:08:05,490
words it will create that content right where we used to have our empty div..

97
00:08:05,700 --> 00:08:13,160
So if we go ahead and save this and check the browser we see that our floats are still cleared and we

98
00:08:13,160 --> 00:08:15,880
got to keep our HMO clean.

99
00:08:15,920 --> 00:08:17,560
Now let's clean up a little bit.

100
00:08:17,600 --> 00:08:21,270
So we didn't actually want the background color to be yellow.

101
00:08:21,290 --> 00:08:28,040
Delete that and this code that we used to clear the floats should probably be moved into a mix and so

102
00:08:28,040 --> 00:08:30,640
we can easily reuse this code whenever we want.

103
00:08:30,860 --> 00:08:38,720
So let's go ahead and cut this code into our clipboard and within app assets styles and then the base

104
00:08:38,720 --> 00:08:39,790
folder.

105
00:08:40,010 --> 00:08:42,800
Let's open up mixdowns CSX.

106
00:08:42,920 --> 00:08:52,310
Let's go to the bottom and say at symbol the fine mixin and let's call this mix in clear fix and then

107
00:08:52,310 --> 00:08:55,400
just go ahead and paste your clipboard.

108
00:08:55,400 --> 00:08:56,060
All right looks good.

109
00:08:56,060 --> 00:09:00,320
Let's save this mixdowns file and back and wrote up CSSA.

110
00:09:00,320 --> 00:09:06,430
Now we can just say mix in clear fix what saved this file and check the browser.

111
00:09:06,680 --> 00:09:11,750
Looks good but now I'm noticing that the two columns but up directly against each other.

112
00:09:11,870 --> 00:09:16,360
And I think it would look a lot better if there was a gutter or margin between the two.

113
00:09:16,440 --> 00:09:21,770
And if we look at the design file we see that there is indeed supposed to be a margin.

114
00:09:21,800 --> 00:09:25,870
Now there might be situations where we do want our columns to touch like this.

115
00:09:26,030 --> 00:09:33,200
So I think the best way to handle this is to go into our each team and go in on our main road give give

116
00:09:33,200 --> 00:09:37,770
it a modifier class of road dash dash gutters.

117
00:09:38,000 --> 00:09:44,540
So by default we will not have gutters or margins if we want them we just add this modifier class next.

118
00:09:44,600 --> 00:09:51,020
Let's write a bit of CSSA so that if this modifier class is used a bit of horizontal padding will be

119
00:09:51,020 --> 00:09:57,190
added to all of the columns and that will create the margin or Gunnar's effect that we are looking for.

120
00:09:57,410 --> 00:10:03,890
So in our CSX let's create a rule for that gutters modifier.

121
00:10:04,010 --> 00:10:08,050
But we don't want to select or style the actual parent row div.

122
00:10:08,240 --> 00:10:15,490
We want to select all of its direct children or in other words all of the columns so we can use the

123
00:10:15,490 --> 00:10:22,060
greater than symbol to select all direct children that use a tag of div and then we can just say padding

124
00:10:22,060 --> 00:10:24,590
right 65 pixels.

125
00:10:24,850 --> 00:10:28,840
So let's save this and check the browser.

126
00:10:28,840 --> 00:10:32,700
Now there's no need to panic but we see that our column layout broke.

127
00:10:32,800 --> 00:10:36,700
So our second column is now getting pushed to a second line.

128
00:10:36,940 --> 00:10:43,150
And this is because the padding values that we just added upset the arithmetic that we set up earlier.

129
00:10:43,150 --> 00:10:49,840
We cannot let the combined with of our columns be more than 100 percent otherwise they won't be able

130
00:10:49,840 --> 00:10:52,230
to both fit on a single line.

131
00:10:52,270 --> 00:10:58,810
Now by default web browsers calculate the true with an element by taking the declared width and then

132
00:10:58,870 --> 00:11:01,310
adding on any padding or borders.

133
00:11:01,540 --> 00:11:10,300
So clearly this value plus this value plus an extra 130 pixels is more than 100 percent of the available

134
00:11:10,630 --> 00:11:12,020
horizontal space.

135
00:11:12,310 --> 00:11:17,750
However we can change the way that web browsers calculate the true with of elements.

136
00:11:18,010 --> 00:11:27,040
If we say box sizing border box web browsers will actually honor our declared with values our padding

137
00:11:27,040 --> 00:11:31,130
will still be applied but it won't affect the calculated width values.

138
00:11:31,270 --> 00:11:35,040
So let's go ahead and say this and check out the browser.

139
00:11:35,500 --> 00:11:41,350
And we're back in business now I don't know about you but this box sizing border box way of calculating

140
00:11:41,590 --> 00:11:43,660
values makes sense to me.

141
00:11:43,750 --> 00:11:45,940
I prefer it over the browser default.

142
00:11:46,150 --> 00:11:52,000
Now in recent years something that a lot of web developers have been doing is applying this globally

143
00:11:52,030 --> 00:11:54,460
to all elements on the page.

144
00:11:54,460 --> 00:11:56,770
So for example let's delete this line.

145
00:11:57,010 --> 00:12:06,880
And within app assets styles and in the base form there let's open up global does CSX create a new rule

146
00:12:07,660 --> 00:12:14,450
where the selector is the star or asterisk meaning we want to select every single element on the page

147
00:12:14,890 --> 00:12:18,350
and let's say box sizing bordered box.

148
00:12:18,430 --> 00:12:19,950
Go ahead and save.

149
00:12:20,350 --> 00:12:25,210
So with that in place managing our with values just got a lot easier.

150
00:12:25,270 --> 00:12:30,140
We set that property once in the global file and we can forget about it at this point.

151
00:12:30,160 --> 00:12:32,950
Our column layout is shaping up nicely.

152
00:12:32,980 --> 00:12:35,930
There are just a few more things that I want to fine tune.

153
00:12:36,130 --> 00:12:42,490
So for example there is currently a margin or gutter here and here.

154
00:12:43,570 --> 00:12:47,120
Now you might not be able to notice the one that I'm currently highlighting.

155
00:12:47,410 --> 00:12:54,890
So let me make it obvious by jumping into our text editor in road of SS and giving the main parent road

156
00:12:54,890 --> 00:12:59,500
div a background color of yellow.

157
00:12:59,720 --> 00:13:06,140
So we obviously want a margin or gutter between the two columns but we definitely do not need a gutter

158
00:13:06,140 --> 00:13:08,630
or margin on this far right edge.

159
00:13:08,810 --> 00:13:10,370
That's a waste of space.

160
00:13:10,370 --> 00:13:17,150
Now we created these margins or gutters by applying padding right to each column.

161
00:13:17,150 --> 00:13:22,910
We did this so even if we have a row that has three or four or five columns there will automatically

162
00:13:22,910 --> 00:13:24,800
be a gutter between each of them.

163
00:13:25,040 --> 00:13:29,280
So the question becomes how do we remove this final gutter on the end.

164
00:13:29,600 --> 00:13:36,350
Our first instinct might be to select the last column in a row and tell it to have zero padding but

165
00:13:36,350 --> 00:13:40,490
doing that would actually affect the ratio of our columns.

166
00:13:40,490 --> 00:13:40,840
Right.

167
00:13:40,850 --> 00:13:47,960
So currently this column is exactly one third of the available width and this column is exactly two

168
00:13:47,960 --> 00:13:49,130
thirds.

169
00:13:49,130 --> 00:13:56,010
But if we told the final call them to not have any padding it would no longer be exactly two thirds.

170
00:13:56,300 --> 00:13:59,630
So let me show you how I like to handle this situation.

171
00:13:59,720 --> 00:14:07,250
We can counteract this padding rate by selecting the main parent row with a modifier class of gutters

172
00:14:07,640 --> 00:14:12,480
and giving it a negative right margin that matches the padding value.

173
00:14:12,560 --> 00:14:17,060
So we can say negative 65 pixels.

174
00:14:17,190 --> 00:14:21,440
The second column still has the gutter or margin that we need to get rid of.

175
00:14:21,510 --> 00:14:23,740
So clearly we are not done yet.

176
00:14:23,740 --> 00:14:31,050
However the negative margin has made the row in general 65 pixels wider than it should be.

177
00:14:31,050 --> 00:14:32,060
What do I mean by that.

178
00:14:32,100 --> 00:14:37,590
Well the row is supposed to be constrained by the width of our wrapper div right.

179
00:14:37,590 --> 00:14:44,370
So for example if we open up wrapper got CSX and give it a background color of green

180
00:14:47,040 --> 00:14:53,700
you can see that the yellow of our rogue element is protruding outside the right edge of the wrapper

181
00:14:54,240 --> 00:14:56,700
and this is thanks to the negative right margin.

182
00:14:56,880 --> 00:15:03,120
So now within wrapper does CSSA we can simply say overflow.

183
00:15:03,120 --> 00:15:04,360
Hidden.

184
00:15:04,470 --> 00:15:06,340
Go ahead and say this.

185
00:15:06,600 --> 00:15:09,460
And the negative margin still exists.

186
00:15:09,480 --> 00:15:12,790
It's where the padding or gutter for this second column is.

187
00:15:13,140 --> 00:15:17,640
But because we told the wrapper to have overflow hidden we can't see it.

188
00:15:17,640 --> 00:15:23,580
So in other words we can remove the silly background colors that we were using for demonstration purposes

189
00:15:25,350 --> 00:15:28,630
and we now have a very clean column laya.

190
00:15:29,010 --> 00:15:35,070
Now before we bring this lesson to a close let's see how things look on a mobile or small screen.

191
00:15:35,520 --> 00:15:37,110
Let me scroll up a little bit.

192
00:15:38,530 --> 00:15:43,240
And we see that the column layout looks very odd on a small screen.

193
00:15:43,330 --> 00:15:49,150
There just isn't enough horizontal space to have multiple columns sit side by side.

194
00:15:49,150 --> 00:15:54,380
Let's go ahead and adjust this so that small screens use a single column layout.

195
00:15:54,700 --> 00:16:01,180
So on small screens we want each section to use the full available width and simply stack on top of

196
00:16:01,180 --> 00:16:02,750
each other vertically.

197
00:16:03,010 --> 00:16:07,760
But we do want to maintain the multiple call lay up on larger screens.

198
00:16:08,170 --> 00:16:11,000
So why don't we do this over an hour each.

199
00:16:11,000 --> 00:16:11,630
TMF.

200
00:16:11,950 --> 00:16:16,170
Let's adjust the class names on our column elements.

201
00:16:16,210 --> 00:16:23,590
So for example we don't want this element to use four of our 12 column grid bars for all screen sizes

202
00:16:24,130 --> 00:16:25,150
on a small screen.

203
00:16:25,150 --> 00:16:29,570
We want this element to use the full available horizontal wit.

204
00:16:29,860 --> 00:16:30,850
So why don't we do this.

205
00:16:30,850 --> 00:16:36,790
Why don't we adjust this name to say row underscore underscore medium for.

206
00:16:37,060 --> 00:16:41,030
And this way we will adjust our CSSA to use media queries.

207
00:16:41,200 --> 00:16:47,320
So only if a screen is considered medium or larger will we apply the width and tell it to float to the

208
00:16:47,320 --> 00:16:57,060
left but do the same thing to this element so medium 8 and then over in our road of CSSA file.

209
00:16:57,130 --> 00:17:02,440
Let's simply change the name for these two rules and then wrap them in a media query.

210
00:17:02,440 --> 00:17:07,530
So let's change this to medium for an medium 8.

211
00:17:07,870 --> 00:17:14,250
And now we can use a mediacorp mixin so we can say mix in at medium.

212
00:17:14,380 --> 00:17:20,180
So only when a screen is medium or larger Do we want these rules to be applied.

213
00:17:20,200 --> 00:17:24,130
So let's just cut and paste these into that mix in.

214
00:17:24,460 --> 00:17:29,430
Let's go ahead and save this file and check out the browser.

215
00:17:29,490 --> 00:17:30,360
Looks good.

216
00:17:30,480 --> 00:17:37,380
So on the small screen the image takes up the full available window and so does the section below it.

217
00:17:37,890 --> 00:17:43,920
And we still maintain that to call them lay out on larger screens and that will bring this lesson to

218
00:17:43,920 --> 00:17:46,670
a close in our next lesson.

219
00:17:46,680 --> 00:17:50,910
We will adjust this topography to match the design file.

220
00:17:50,910 --> 00:17:57,330
We will also add a bit of much needed vertical spacing between these two images and we will also convert

221
00:17:57,330 --> 00:18:01,110
both of these images to become responsive images.

222
00:18:01,320 --> 00:18:05,430
Let's keep rolling along and I will see you in the next lesson.
