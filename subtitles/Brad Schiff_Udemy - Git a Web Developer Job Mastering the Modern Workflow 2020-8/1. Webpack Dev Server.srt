1
00:00:01,870 --> 00:00:03,240
Hello everyone.

2
00:00:03,370 --> 00:00:08,620
In this lesson we're going to take our web pack automation to another level.

3
00:00:08,650 --> 00:00:11,490
Here's an overview of what we're going to set up.

4
00:00:11,500 --> 00:00:18,130
First we will adjust things so that whenever we save a change to see SS or JavaScript files that code

5
00:00:18,130 --> 00:00:25,980
is automatically updated or injected into the browser's memory without a full reload even being necessary.

6
00:00:25,990 --> 00:00:32,530
After that we will set things up so web pack reloads the browser for us automatically when we save a

7
00:00:32,530 --> 00:00:35,410
change to our H CML file.

8
00:00:35,410 --> 00:00:41,740
And finally we will learn how to view our development site on any device connected to the same Wi-Fi

9
00:00:41,800 --> 00:00:44,790
network as the computer we're working on.

10
00:00:44,800 --> 00:00:50,290
This is great for testing your Web site on a small screen like a phone or a tablet.

11
00:00:50,290 --> 00:00:55,080
Now there's one piece of technology that's going to make all three of these things possible.

12
00:00:55,270 --> 00:00:59,080
And that's a package named Web pack dev server.

13
00:00:59,380 --> 00:01:04,880
Just so you were aware web pack dev server is not an obscure package that I'm just a big fan of.

14
00:01:05,020 --> 00:01:11,770
Here on the NPM page for this package we can see that just in the last week it has five point three

15
00:01:11,770 --> 00:01:16,310
million downloads so it's definitely an industry standard.

16
00:01:16,310 --> 00:01:19,300
So right now let me show you how to begin using it.

17
00:01:19,360 --> 00:01:28,360
So first we need to jump into our command line and run the following command with me npm install the

18
00:01:28,360 --> 00:01:35,680
name of the packages web pack dash Dev dash server after that.

19
00:01:35,680 --> 00:01:40,060
Be sure to include dash dash save dash dev and then press enter

20
00:01:43,250 --> 00:01:43,610
OK.

21
00:01:43,620 --> 00:01:47,240
Now that we've installed the package we need to leverage it.

22
00:01:47,240 --> 00:01:55,530
So to do that we go into our web pack dot config dot J.S. file so down within this area where we have

23
00:01:55,530 --> 00:02:03,010
module dot exports equals and then we have different properties like entry output mode watch.

24
00:02:03,240 --> 00:02:05,070
We want to add a new property.

25
00:02:05,280 --> 00:02:11,850
So maybe right after the comma for this output area let's drop down and lets out a new property named

26
00:02:12,210 --> 00:02:15,660
Dev and then uppercase server.

27
00:02:15,660 --> 00:02:22,650
So all one word that's the property name dev server colon and then it's going to be an object.

28
00:02:22,770 --> 00:02:26,930
So a pair of curly brackets and then right after that include a comma.

29
00:02:27,130 --> 00:02:27,540
Okay.

30
00:02:27,570 --> 00:02:31,630
Within these curly brackets let's dropdown to stay organized.

31
00:02:31,860 --> 00:02:36,690
Let's give it a property named content uppercase base.

32
00:02:36,710 --> 00:02:38,530
So content base colon.

33
00:02:38,820 --> 00:02:44,260
And now this is where we point towards the folder or directory that we want web pack to serve up.

34
00:02:44,460 --> 00:02:46,880
So in our case that would be the app folder.

35
00:02:46,890 --> 00:02:47,130
Right.

36
00:02:47,130 --> 00:02:53,310
Because the app folder is where our index the HDL file lives right and that's what you would want to

37
00:02:53,310 --> 00:02:55,500
visit in the web browser.

38
00:02:55,500 --> 00:02:57,450
So we just want to point towards our app folder.

39
00:02:58,110 --> 00:03:07,830
So for content base after the colon let's say path dot join parentheses and then say underscore underscore

40
00:03:08,070 --> 00:03:15,740
Dern name comma and then quotes and then app at the very end of this line after the parentheses.

41
00:03:15,750 --> 00:03:18,380
Let's include a comma dropdown.

42
00:03:18,660 --> 00:03:23,100
Let's add another property named hot and set it to true.

43
00:03:23,550 --> 00:03:24,450
Let's add a comma.

44
00:03:24,450 --> 00:03:27,470
Let's add one more property named port.

45
00:03:27,780 --> 00:03:30,500
And set it to three thousand.

46
00:03:30,550 --> 00:03:36,630
So for a bit of an explanation for these two properties port is what's going to allow Web pack to inject

47
00:03:36,630 --> 00:03:42,870
our new sea SS and JavaScript into the browser's memory on the fly without even needing a reload or

48
00:03:42,870 --> 00:03:44,230
refresh.

49
00:03:44,230 --> 00:03:50,520
Westpac calls that hot module replacement or hot for short and then port.

50
00:03:50,520 --> 00:03:56,160
This would have a value of 80 80 by default but we're setting it to 3000 just because I think it's a

51
00:03:56,160 --> 00:03:57,900
bit easier to remember.

52
00:03:58,110 --> 00:04:01,660
You'll see where this number comes into play in just a moment.

53
00:04:01,700 --> 00:04:02,030
OK.

54
00:04:02,040 --> 00:04:07,620
For the time being that takes care of the dev server object but I do want you to look down just one

55
00:04:07,620 --> 00:04:10,810
or two lines and find our watch property.

56
00:04:10,810 --> 00:04:14,010
So right now it's set to watch true.

57
00:04:14,070 --> 00:04:19,950
Well the dev server is going to be watching for changes so we no longer need this watch property.

58
00:04:19,950 --> 00:04:24,610
So I would just delete this entire watch coal and true line like this.

59
00:04:25,490 --> 00:04:29,010
OK at this point let's go ahead and save this file.

60
00:04:29,160 --> 00:04:37,170
And right now I need you to jump into our package dot Jason File with me within package dot Jason I

61
00:04:37,170 --> 00:04:39,500
want you to find the scripts area.

62
00:04:39,630 --> 00:04:43,260
Remember we have this NPM script named Dev.

63
00:04:43,320 --> 00:04:46,220
Well we just want to change what it actually runs.

64
00:04:46,260 --> 00:04:50,730
So instead of calling Web back we want it to call Web pack dev server now.

65
00:04:51,120 --> 00:04:56,400
So within these quotes or after the K for web practice a dash Dev dash server.

66
00:04:56,490 --> 00:04:56,830
OK.

67
00:04:56,870 --> 00:05:02,640
Let's go ahead and save this file and now we just need to make one more change before we can test things

68
00:05:02,640 --> 00:05:03,620
out.

69
00:05:03,630 --> 00:05:10,440
Right now we need to go into our main JavaScript file and tell it to accept hot module replacements

70
00:05:10,910 --> 00:05:13,800
right or to accept updates on the fly.

71
00:05:13,980 --> 00:05:21,690
So let's dig into our app folder and then assets and then scripts and then jump into the file named

72
00:05:21,810 --> 00:05:30,660
app dot J.S. down at the bottom was add a new line and let's say if parentheses within the parentheses

73
00:05:30,660 --> 00:05:39,600
will say module dot hot after those parentheses curly brackets drop down in between say module dot hot

74
00:05:40,230 --> 00:05:44,970
dot except in parentheses to call the accept method.

75
00:05:44,970 --> 00:05:50,640
So essentially we're just saying except the hot updates if it makes sense to accept them.

76
00:05:50,790 --> 00:05:54,270
Let's go ahead and save this file and now we can test everything out.

77
00:05:54,750 --> 00:06:00,150
So just like before to tell Webb back to begin running or watching us we just go to the command line

78
00:06:00,980 --> 00:06:08,190
and type in the following command NPM run Dev go ahead and press enter.

79
00:06:08,300 --> 00:06:08,740
OK.

80
00:06:08,760 --> 00:06:15,000
And now to check things out in the web browser we do need to visit a different U.R.L. so go up into

81
00:06:15,000 --> 00:06:24,300
your address bar and completely clear it out and type this in with me load goal host colon.

82
00:06:24,300 --> 00:06:25,590
And then this is the port number.

83
00:06:25,590 --> 00:06:28,500
So after the colon it's just three thousand.

84
00:06:28,500 --> 00:06:31,180
Go ahead and press enter cool.

85
00:06:31,190 --> 00:06:32,470
So we see our Web site.

86
00:06:32,480 --> 00:06:33,590
But what's the big deal.

87
00:06:33,590 --> 00:06:37,010
What have we been working on for the last five or six minutes.

88
00:06:37,010 --> 00:06:43,070
Well to refresh your memory if we look at the overview for this lesson again remember our first task

89
00:06:43,160 --> 00:06:50,000
was to set things up so that when you save changes to a SS or JavaScript file it updates in the browser

90
00:06:50,000 --> 00:06:53,070
without a full page reload.

91
00:06:53,090 --> 00:06:56,450
So right now let's ask ourselves what is a full page reload.

92
00:06:57,020 --> 00:07:03,620
Well in your browser if you click this refresh icon here or if you press control are on a P.C. or command

93
00:07:03,620 --> 00:07:06,890
are on a Mac it reloads the page.

94
00:07:06,890 --> 00:07:12,330
Now a full page reload like that is very expensive in terms of performance or speed.

95
00:07:12,620 --> 00:07:19,490
It forces the web browser to completely reload and re render and repaint the entire page.

96
00:07:19,490 --> 00:07:23,380
So anytime we can avoid a full reload that's great.

97
00:07:23,420 --> 00:07:28,460
Just a quick tip so you can see if your browser is reloading or not if you select a bit of text right.

98
00:07:28,460 --> 00:07:30,790
If you click and drag on a headline.

99
00:07:30,920 --> 00:07:36,400
Well as soon as you reload the page that text selection that highlighted it is going to be lost.

100
00:07:36,410 --> 00:07:36,620
Right.

101
00:07:36,620 --> 00:07:40,230
So if I press command are it's gone.

102
00:07:40,250 --> 00:07:46,110
So now let's test things out to make sure web PAC can actually update our code without a full page reload.

103
00:07:46,130 --> 00:07:48,260
So go ahead and select a bit of text.

104
00:07:48,320 --> 00:07:52,800
Why don't you go ahead and click and drag and select this your clarity headline.

105
00:07:52,940 --> 00:07:53,230
OK.

106
00:07:53,240 --> 00:07:59,700
And let's go into our CSX file and change the font size for this headline to something ridiculous.

107
00:07:59,750 --> 00:08:08,390
So within our styles folder and then within our modules folder let's jump into large hero dot CSX.

108
00:08:08,390 --> 00:08:13,390
So here is that title selector right now font size is set to four point eight REM.

109
00:08:13,430 --> 00:08:16,820
Let's set it to something crazy like nine point eight REM.

110
00:08:16,820 --> 00:08:18,860
Now as soon as we hit save.

111
00:08:19,070 --> 00:08:24,260
Back in the browser we don't need to refresh and you can see the web browser itself didn't even refresh

112
00:08:24,290 --> 00:08:27,450
because our text selection is still in place.

113
00:08:27,470 --> 00:08:32,280
This proves to us that web pack is doing its job and doing it very well.

114
00:08:32,360 --> 00:08:37,880
It's bundling up our code and then it's injecting that latest code into the browser's memory on the

115
00:08:37,880 --> 00:08:38,930
fly.

116
00:08:38,990 --> 00:08:45,350
Not only is this fast but it's also convenient when we begin working with JavaScript and for example

117
00:08:45,350 --> 00:08:48,180
maybe you click something and it opens a menu.

118
00:08:48,290 --> 00:08:55,070
Well it will be nice to be able to change the CSX for that menu without having to refresh and keep closing

119
00:08:55,070 --> 00:08:57,400
and reopening that menu each time.

120
00:08:57,440 --> 00:08:57,680
Right.

121
00:08:57,680 --> 00:09:03,620
If we can keep the browsers current state and just inject our new code into memory that's going to save

122
00:09:03,620 --> 00:09:05,750
us a lot of trouble down the road.

123
00:09:05,750 --> 00:09:06,050
Cool.

124
00:09:06,050 --> 00:09:08,840
Let's go ahead and put this font size back to normal.

125
00:09:08,840 --> 00:09:12,950
So instead of nine point eight just put it back to four point eight hit save.

126
00:09:12,950 --> 00:09:14,530
We don't even need to refresh.

127
00:09:14,540 --> 00:09:16,940
It's just updated on the fly.

128
00:09:16,940 --> 00:09:17,790
Perfect.

129
00:09:17,900 --> 00:09:19,470
At this point let's change gears.

130
00:09:19,490 --> 00:09:25,490
So if we look at our lesson overview item number two is to set things up so that whenever we save a

131
00:09:25,490 --> 00:09:31,730
change to our each TMM file the browser reloads on its own to set that up.

132
00:09:31,730 --> 00:09:39,500
We just need to jump back into our web pack dot config dot J.S. file go ahead and find your dev server

133
00:09:39,500 --> 00:09:41,360
object within it.

134
00:09:41,360 --> 00:09:44,540
We have properties like content base hot in Port.

135
00:09:44,960 --> 00:09:49,750
So we just want to add one more property inside dev server named before.

136
00:09:50,120 --> 00:09:54,450
So before colon and we're actually going to give it a function.

137
00:09:54,590 --> 00:10:00,880
So as a function parentheses curly brackets now right after those curly brackets.

138
00:10:00,890 --> 00:10:02,150
Be sure to add a comma.

139
00:10:03,220 --> 00:10:03,590
OK.

140
00:10:03,590 --> 00:10:09,310
Now within the parentheses for our function let's give it two parameters app comma server.

141
00:10:10,220 --> 00:10:16,130
And then within our curly brackets or the body of our function we can dropdown and let's say server

142
00:10:16,430 --> 00:10:17,360
dot.

143
00:10:17,360 --> 00:10:22,400
And then there's a method named underscore watch within these parentheses.

144
00:10:22,400 --> 00:10:28,840
Let's give it quotes and let's tell it to watch for any file that ends with DOT HDMI out.

145
00:10:29,900 --> 00:10:37,850
So I would say dot slash look in the app folder slash and then asterisk asterisk will look for any sub

146
00:10:37,850 --> 00:10:44,870
folder if necessary slash and then asterisk any file that ends with DOT HDMI out.

147
00:10:45,250 --> 00:10:45,590
OK.

148
00:10:45,590 --> 00:10:50,360
At this point let's go ahead and save this file if you need to pause the video while you type this out.

149
00:10:50,360 --> 00:10:52,530
That's OK but let's test this out.

150
00:10:53,290 --> 00:11:00,440
So in our command line let's press control C to stop the old instance of web pack control C and then

151
00:11:00,440 --> 00:11:05,780
let's fire up a new instance of web pack that will use our latest web patch config code.

152
00:11:05,870 --> 00:11:09,390
So just NPM run Dev.

153
00:11:10,820 --> 00:11:11,130
OK.

154
00:11:11,150 --> 00:11:13,400
Back in the web browser I will give it a refresh.

155
00:11:13,400 --> 00:11:17,230
Now that we're using a new configuration and let's test something out.

156
00:11:17,540 --> 00:11:18,160
Let's do this.

157
00:11:18,170 --> 00:11:25,890
Let's go into our HDMI file and edit this headline to end with an exclamation point instead of a period.

158
00:11:25,970 --> 00:11:33,620
So within our app folder jump into index dot each CML for me it's around line number 26.

159
00:11:33,650 --> 00:11:41,330
So if I change the period add an exclamation point and then save this file back in the browser.

160
00:11:41,360 --> 00:11:41,700
Cool.

161
00:11:41,720 --> 00:11:47,780
I did not have to refresh it refreshed for me now just a quick note when it comes to our HDMI oil it

162
00:11:47,870 --> 00:11:51,130
is performing a full page reload.

163
00:11:51,440 --> 00:11:58,160
So if I select this text just as an example and if I put this back to a period and save.

164
00:11:58,160 --> 00:12:02,070
Notice that back in the browser my text selection or highlight is gone.

165
00:12:02,110 --> 00:12:02,680
That's OK.

166
00:12:02,690 --> 00:12:07,500
It does need to load the new HDMI page so a full reload is to be expected.

167
00:12:07,520 --> 00:12:11,260
Let's make sure that our CSF is still working without a full reload though.

168
00:12:11,270 --> 00:12:15,180
So if we select this go into our large hero.

169
00:12:15,290 --> 00:12:17,880
Change the font size.

170
00:12:18,170 --> 00:12:18,570
Cool.

171
00:12:18,570 --> 00:12:21,560
So that is still working without a reload.

172
00:12:21,740 --> 00:12:23,450
Let me put that back to four point eight.

173
00:12:25,460 --> 00:12:26,190
Perfect.

174
00:12:26,270 --> 00:12:31,130
At this point let's look at our overview again because we are ready to move on to our third and final

175
00:12:31,130 --> 00:12:32,270
task.

176
00:12:32,300 --> 00:12:38,740
We want to be able to view our website on any device connected to our Wi-Fi or our network this way.

177
00:12:38,750 --> 00:12:44,450
It's really simple to test our website on a small screen like a smartphone or tablet.

178
00:12:44,450 --> 00:12:46,430
Let me show you how we can set this up.

179
00:12:46,520 --> 00:12:53,810
So back in our text editor jump into our web pack config dot J.S. file within our dev server object

180
00:12:53,900 --> 00:12:59,840
maybe right below the port line lets out a comma at that line add a new line and we just need to give

181
00:12:59,840 --> 00:13:11,750
it a property of host colon and let's give it a value of quotes and then 0 dot 0 0 0 so for 0 separated

182
00:13:11,750 --> 00:13:13,680
with periods in between.

183
00:13:13,700 --> 00:13:19,460
This will allow devices on the same network to be able to access the web packed dev server from this

184
00:13:19,460 --> 00:13:20,720
computer.

185
00:13:20,720 --> 00:13:22,580
Let's go ahead and save this.

186
00:13:22,760 --> 00:13:27,410
And then since we have a new Web Pad configuration let's restart the web pack task.

187
00:13:27,510 --> 00:13:31,300
So in the command line press control C and then fire it up again.

188
00:13:31,330 --> 00:13:33,690
So NPM run Dev.

189
00:13:35,760 --> 00:13:40,730
OK now from the current computer you're working on you'll still be able to visit your Web site from

190
00:13:40,730 --> 00:13:41,680
local host.

191
00:13:41,690 --> 00:13:47,860
Colon three thousand however this address is not going to work on another device on your network.

192
00:13:47,870 --> 00:13:53,360
So for example the question becomes if you have a smartphone ready right now what address when you type

193
00:13:53,450 --> 00:13:57,890
in the smartphones web browser address bar to visit this site.

194
00:13:57,890 --> 00:14:04,670
Well in order to answer that question we need to find the local IP address of the computer you're working

195
00:14:04,670 --> 00:14:05,450
on.

196
00:14:05,450 --> 00:14:10,850
Now that's not the public IP address that a malicious user could take advantage of.

197
00:14:10,850 --> 00:14:18,140
We want the local IP address so unfortunately we can't just go to Google and type in what is my IP because

198
00:14:18,140 --> 00:14:22,160
that would give you your public IP to find your local IP address.

199
00:14:22,160 --> 00:14:26,120
It's a bit different depending on whether you're using Mac or Windows.

200
00:14:26,120 --> 00:14:26,930
Let's cover both.

201
00:14:26,930 --> 00:14:34,190
So if you're on Mac just go into your system preferences and then click on the network icon and then

202
00:14:34,190 --> 00:14:38,960
towards the top of the right hand column you should see a bit of text and it will say which network

203
00:14:38,990 --> 00:14:44,230
you're on and it will also include an IP address that's your local IP.

204
00:14:44,420 --> 00:14:50,780
It should begin with 1 9 2 dot 1 6 8 and then two other sets of numbers and they're all separated by

205
00:14:50,780 --> 00:14:51,810
periods.

206
00:14:52,040 --> 00:14:54,370
So remember that number take note of that number.

207
00:14:54,450 --> 00:14:54,840
OK.

208
00:14:54,950 --> 00:15:01,910
If you're on Windows to find your local IP address go to the command line and run the following command

209
00:15:02,360 --> 00:15:04,050
IP config.

210
00:15:04,250 --> 00:15:11,110
Press enter the command line will output a bunch of text you're looking for the one that's called IP

211
00:15:11,120 --> 00:15:18,440
V for address to the right of that you'll see an IP and again it should begin with 1 9 2 1 6 8 and then

212
00:15:18,440 --> 00:15:21,350
a number separated by a period and another number.

213
00:15:21,580 --> 00:15:26,900
Okay at this point whether you're using Windows or Mac you should have your computer's local IP address

214
00:15:27,530 --> 00:15:33,920
so on your smartphone type that IP address number that we just found into the address bar and at the

215
00:15:34,010 --> 00:15:40,910
end of it add in Colon three thousand right because that's the port number that our dev server is running

216
00:15:40,910 --> 00:15:44,020
on call once you type in that address and push enter.

217
00:15:44,120 --> 00:15:50,870
You can now view your website on your smartphone on your tablet on another computer whatever you wish.

218
00:15:50,870 --> 00:15:55,610
Not only is this great for seeing what things will look like on a small screen but it can also boost

219
00:15:55,610 --> 00:15:56,770
your productivity.

220
00:15:56,780 --> 00:16:02,600
For example if you have a tablet you can now basically use it as a second screen right like a second

221
00:16:02,600 --> 00:16:08,930
monitor during your development workflow so you can set your text editor to take up the full screen

222
00:16:08,930 --> 00:16:14,240
on your main computer and then you could position your tablet to the side of your screen and have the

223
00:16:14,240 --> 00:16:20,510
tablet with your website pulled up and it will show you the changes in real time right.

224
00:16:20,510 --> 00:16:27,200
So as soon as you save a CSF change just a few milliseconds later you will see the website update without

225
00:16:27,200 --> 00:16:29,630
a reload on the tablet or smartphone.

226
00:16:30,140 --> 00:16:33,650
OK so we've completed the third and final task for this lesson.

227
00:16:33,770 --> 00:16:37,930
But before we bring things to an end there is one thing I want to point out.

228
00:16:38,090 --> 00:16:43,210
So do this with me within your text editor or I should say within our project folder.

229
00:16:43,400 --> 00:16:49,610
Remember that web Park is creating this bundled dot J.S. file that lives within our app folder.

230
00:16:49,980 --> 00:16:50,630
Well check this out.

231
00:16:50,630 --> 00:16:52,220
Do this with me right now.

232
00:16:52,250 --> 00:16:54,590
I want you to delete this file.

233
00:16:54,710 --> 00:16:57,890
So right click on bundled J.S. and choose Delete

234
00:17:00,700 --> 00:17:05,920
now you might think that if we go to the web browser and refresh it wouldn't be able to load that code

235
00:17:05,950 --> 00:17:11,320
but you'll see that everything is still OK and even if we make a change to one of our CSF files right.

236
00:17:11,320 --> 00:17:18,370
So even if I go in and change the font size to something crazy and save it successfully bundles and

237
00:17:18,370 --> 00:17:24,220
injects into the browser and you'll notice in our folder structure that it did not regenerate a new

238
00:17:24,220 --> 00:17:26,030
file named bundled Dot.

239
00:17:26,040 --> 00:17:34,390
J Yes this is because web pack dev server does not actually output the bundled file to our file disk.

240
00:17:34,390 --> 00:17:40,870
The dev server actually just keeps the bundled file in RAM or in memory so it's super fast.

241
00:17:40,870 --> 00:17:45,540
In other words the dev server makes the file available from our address.

242
00:17:45,670 --> 00:17:52,510
So local host calling three thousand and then slash bundled dot J.S. so the file can be accessed from

243
00:17:52,510 --> 00:17:56,750
this U.R.L. but it doesn't actually exist on our hard drive.

244
00:17:56,980 --> 00:18:01,180
Anyways I just wanted to point that out to save you a bit of frustration if you're wondering what's

245
00:18:01,180 --> 00:18:02,330
going on now.

246
00:18:02,350 --> 00:18:07,960
Don't worry in the future when we're ready to actually push our files up onto the web so that other

247
00:18:07,960 --> 00:18:10,140
people from the public can view our Web site.

248
00:18:10,330 --> 00:18:15,320
We will set things up in a way where the bundled file actually is output to file disk.

249
00:18:15,520 --> 00:18:21,820
But for now let's not worry about it because this is the optimal workflow while we're building and creating

250
00:18:21,820 --> 00:18:23,410
a Web site really quick.

251
00:18:23,410 --> 00:18:29,130
Let's just set our font size back down from nine point eight to four point eight and go ahead and save.

252
00:18:29,220 --> 00:18:35,080
And that's going to bring this lesson to a close in our next lesson we're going to start a new chapter

253
00:18:35,350 --> 00:18:38,940
on responsive web design should be a lot of fun.

254
00:18:38,980 --> 00:18:40,360
Let's keep things rolling.

255
00:18:40,390 --> 00:18:41,230
I'll see you then.
