WEBVTT
1
00:00:05.650 --> 00:00:12.250
Hello everyone in this lesson we will learn how to work with a team of other developers without letting

2
00:00:12.250 --> 00:00:15.220
merge conflicts and get stresses out.

3
00:00:15.460 --> 00:00:17.730
Here's an overview of what we'll cover.

4
00:00:17.740 --> 00:00:22.290
First we'll answer the question of what is Amerge conflict.

5
00:00:22.300 --> 00:00:26.290
Next we'll learn how to fix or resolve Amerge conflict.

6
00:00:26.410 --> 00:00:31.520
And finally we will learn how to avoid a lot of merge conflicts in the first place.

7
00:00:31.540 --> 00:00:33.780
Let's start at the top with number one.

8
00:00:33.940 --> 00:00:36.380
What is a merge conflict.

9
00:00:36.680 --> 00:00:43.000
Well we know that get is really good at taking two versions or snapshots of a project in squishing or

10
00:00:43.000 --> 00:00:44.890
merging them together.

11
00:00:44.890 --> 00:00:49.000
Right so we've used the get merge command many times to do just that.

12
00:00:49.030 --> 00:00:54.490
So most of the time get can automatically merge our code from one commit state into another without

13
00:00:54.580 --> 00:00:55.860
any problems.

14
00:00:56.110 --> 00:01:03.740
But if we ask get to do the impossible and read our minds we'll run into something named a merge conflict.

15
00:01:03.760 --> 00:01:06.500
Let me show you a couple examples of what I'm talking about.

16
00:01:06.700 --> 00:01:11.030
So first we'll see an example of a successful merge that saves the day.

17
00:01:11.260 --> 00:01:19.490
And then secondly we'll see an example of a failed merge that runs into a conflict.

18
00:01:19.510 --> 00:01:25.360
Let's imagine we have an H DML file in our repo on get hub and let's say we have two developers on our

19
00:01:25.360 --> 00:01:27.430
team working on this project.

20
00:01:27.610 --> 00:01:29.110
John and Jane.

21
00:01:29.140 --> 00:01:34.750
Let's imagine John pulled down the master branch to his computer and begins working on a few changes.

22
00:01:34.750 --> 00:01:39.250
Let's say he adds a few new list item elements to the end of the unordered list.

23
00:01:39.250 --> 00:01:42.610
Now imagine at the same time that John is working on those changes.

24
00:01:42.760 --> 00:01:48.670
Jane also pulls down the master branch to her computer and before John can push his master branch back

25
00:01:48.670 --> 00:01:54.640
up to get hub Jane is able to quickly add a new list item elements to the very beginning of the unordered

26
00:01:54.640 --> 00:01:58.930
list and she successfully pushes her master branch back up to get hub.

27
00:01:59.080 --> 00:02:04.900
This would mean that John's copy of the master branch is now outdated compared to the copy on good hub.

28
00:02:05.110 --> 00:02:10.240
So when John tries to push his master branch to get hub he'll see an error message that his push failed

29
00:02:10.270 --> 00:02:12.050
because his Ribault is outdated.

30
00:02:12.190 --> 00:02:18.940
Now at that point all John needs to do to fix things is run a get pole to pull in the latest changes

31
00:02:18.940 --> 00:02:25.810
from get hub and then it can automatically merge his outdated commit with Jane's recent commit now if

32
00:02:25.810 --> 00:02:30.520
you're in the command line and get is trying to perform a merge you might be wondering what keys you're

33
00:02:30.520 --> 00:02:31.750
supposed to press.

34
00:02:31.750 --> 00:02:38.650
So from this screen we want to push the escape key and then type a colon and then W Q And then press

35
00:02:38.740 --> 00:02:39.960
enter.

36
00:02:40.300 --> 00:02:48.010
After that successful automatic merge John is now free to push his master branch up to get up get is

37
00:02:48.010 --> 00:02:53.350
able to save the day and merge for us here because the lines of code that each team member added are

38
00:02:53.350 --> 00:02:58.930
different from each other one added to the beginning of the list and the other added to the end.

39
00:02:58.930 --> 00:03:00.990
However let's imagine it's a new day.

40
00:03:01.210 --> 00:03:06.580
And on this day John pulls down the master branch to his computer and begins to work on adding his thoughts

41
00:03:06.580 --> 00:03:08.950
and opinions about each number.

42
00:03:09.070 --> 00:03:12.580
So he edits the four line to say that four is a good number.

43
00:03:12.760 --> 00:03:18.820
He edits the five line to say that 5 has been bad luck in my life and before John can finish his work

44
00:03:18.880 --> 00:03:21.100
and push his master branch up to get Herb.

45
00:03:21.220 --> 00:03:27.700
Jane also starts working on her master branch and she too is adding her opinions on numbers so she edits

46
00:03:27.700 --> 00:03:34.060
the four line to say four is unlucky and she edits the five line to say five is my favorite number and

47
00:03:34.060 --> 00:03:35.350
Jane is faster than John.

48
00:03:35.350 --> 00:03:41.380
So let's imagine that Jane is able to push her branch up to get hub before John finishes his work.

49
00:03:41.410 --> 00:03:47.260
So again when John does finish his work and tries to push it to get up his push will fail because his

50
00:03:47.260 --> 00:03:54.520
repot is now outdated but this time when John tries to fix things by running a get pole get will not

51
00:03:54.520 --> 00:03:57.780
be able to automatically merge and save the day.

52
00:03:57.880 --> 00:04:01.710
Instead John will run into a merge conflict.

53
00:04:01.780 --> 00:04:07.810
The conflict is that John and Jane both want to commit different changes to the same lines of code and

54
00:04:07.810 --> 00:04:08.200
get.

55
00:04:08.230 --> 00:04:11.630
Has no way of knowing who to listen to John or Jane.

56
00:04:11.920 --> 00:04:16.120
So in this case a computer can't decide for us as a human being.

57
00:04:16.120 --> 00:04:22.420
We need to step in and manually make a judgment call and choose which code to use for those lines.

58
00:04:22.690 --> 00:04:26.390
So the command line here is telling us which files have conflicts.

59
00:04:26.500 --> 00:04:33.410
So let's open this file up in our text editor and see how easy it is to resolve a merge conflict so

60
00:04:33.590 --> 00:04:37.740
the Get system automatically added a few lines of code to the file.

61
00:04:37.760 --> 00:04:41.810
This line this line and this line.

62
00:04:41.810 --> 00:04:48.290
So first head is the commit that John tried to push and following that are the matching lines of code

63
00:04:48.380 --> 00:04:49.980
from James recent comment.

64
00:04:50.000 --> 00:04:55.400
So we just need to do two things we need to remove the label lines that get added to the file and we

65
00:04:55.400 --> 00:05:00.120
also need to decide which conflicting winds to actually use.

66
00:05:00.170 --> 00:05:01.890
So let's make a judgment call.

67
00:05:01.910 --> 00:05:07.410
Why don't we say that John is right about the number four and Jane is right about the number five.

68
00:05:07.610 --> 00:05:13.010
So let's delete the line of code from Johns commit that was about five and let's delete the line of

69
00:05:13.010 --> 00:05:15.730
code from Jane's commit that was about four.

70
00:05:16.130 --> 00:05:19.330
And then let's also delete these lines that get automatically added

71
00:05:24.890 --> 00:05:30.240
and once we've cleaned up the file we just save it and then jump over to the command line and we can

72
00:05:30.240 --> 00:05:33.690
simply stage and commit our changes just like we normally would.

73
00:05:33.870 --> 00:05:40.050
And because we resolved the conflict John would now be free to push his master branch up to get up so

74
00:05:40.050 --> 00:05:41.130
you can see that emerge.

75
00:05:41.130 --> 00:05:43.350
Conflict is nothing to be afraid of.

76
00:05:43.590 --> 00:05:46.180
You just open up the file and make a judgment call.

77
00:05:46.320 --> 00:05:50.690
But in a perfect world we wouldn't run into conflicts in the first place.

78
00:05:50.850 --> 00:05:56.880
So now let's change gears in this lesson and review a few best practice tips we can follow to avoid

79
00:05:56.880 --> 00:05:59.000
merge conflicts in the future.

80
00:05:59.220 --> 00:06:03.760
Tip number one is to run the get pull command as often as possible.

81
00:06:03.870 --> 00:06:08.580
If you're working with a team of other developers you want to constantly be pulling in their commits

82
00:06:08.580 --> 00:06:13.590
from the server so that you're working with the latest code you want to make this part of your routine

83
00:06:13.800 --> 00:06:16.350
so running get pool just becomes a habit.

84
00:06:16.400 --> 00:06:22.620
Any time you sit down to work on your project before you actually edit any files run a get pull.

85
00:06:22.680 --> 00:06:26.990
So if you get into work at 8 AM first thing running get Paul.

86
00:06:27.090 --> 00:06:31.740
If you get called into a few meetings or phone calls and you don't actually get to work on the project

87
00:06:31.740 --> 00:06:34.270
until after lunch well after lunch.

88
00:06:34.290 --> 00:06:36.140
Run another get pool.

89
00:06:36.180 --> 00:06:39.000
Tip number two and this probably goes without saying.

90
00:06:39.020 --> 00:06:42.870
But simply communicating with your team can go a long way.

91
00:06:42.870 --> 00:06:47.870
Talk with each other about who is responsible for which changes and which parts of the project.

92
00:06:47.880 --> 00:06:53.340
Be aware of what each team member is working on for that day or week and you don't need to go overboard

93
00:06:53.340 --> 00:06:56.360
and waste a ton of time chatting about what you're working on.

94
00:06:56.490 --> 00:06:57.480
But you'd be surprised.

95
00:06:57.570 --> 00:07:03.030
Even just having a general idea of what each person is working on will put you in a position where you

96
00:07:03.030 --> 00:07:08.500
are far less likely to edit the same lines of code within the same file at the same time.

97
00:07:08.580 --> 00:07:10.820
And that means less conflicts.

98
00:07:10.830 --> 00:07:17.730
Tip number three is to get everyone on your team to agree on whitespace settings in your text editors.

99
00:07:17.850 --> 00:07:25.410
So for example if I jump into my text editor and I press the tab key we need to ask ourselves what exactly

100
00:07:25.410 --> 00:07:29.280
did my text editor do to create that space or that indebt.

101
00:07:29.310 --> 00:07:36.450
Is that a single tab space character or is it actually just for individual space bar spaces or to individual

102
00:07:36.450 --> 00:07:37.850
space bar spaces.

103
00:07:38.010 --> 00:07:38.840
What is it.

104
00:07:39.090 --> 00:07:44.910
Well in the bottom right corner of my text editor I can customize what happens when I push the tab key

105
00:07:45.540 --> 00:07:52.800
so I can choose to use space bar spaces or actual single character tabs spaces and I can also choose

106
00:07:52.800 --> 00:07:58.370
the tab width so whether I want to indent a little or a lot you get the idea.

107
00:07:58.440 --> 00:08:02.940
Now you want to make sure that everyone on your team uses consistent settings.

108
00:08:03.090 --> 00:08:08.540
Otherwise get will notice differences in you and your teammates code that you didn't even intend.

109
00:08:08.780 --> 00:08:11.160
All right let's move on to tip number four.

110
00:08:11.160 --> 00:08:17.160
Tip Four won't help you avoid conflicts outright but if you're working on a feature branch Tip 4 will

111
00:08:17.160 --> 00:08:22.940
help you deal with any potential conflicts before it's time to actually Merge feature branch back into

112
00:08:22.950 --> 00:08:23.740
Master.

113
00:08:23.970 --> 00:08:26.280
So let's imagine you're working on a new feature.

114
00:08:26.520 --> 00:08:32.550
Let's say on January 1st you create a new branch off of master named home page feature.

115
00:08:32.550 --> 00:08:35.840
Let's imagine this branch is taking you a couple of weeks to finish.

116
00:08:36.030 --> 00:08:41.660
So on January 15th you finish your feature and you want to merge your branch back in the master.

117
00:08:41.710 --> 00:08:48.870
However your home page feature branch is based off the January 1st state of the master branch and since

118
00:08:48.870 --> 00:08:52.810
then your teammates have been making all sorts of updates to the master branch.

119
00:08:52.920 --> 00:08:58.460
Which means when you try to merge your feature branch into Master you could very well run into conflicts

120
00:08:58.950 --> 00:09:05.210
and we typically want our merges into Master or our pool requests to not have any conflicts.

121
00:09:05.250 --> 00:09:09.910
So tip number four is to change the way we think about the get merge command.

122
00:09:10.050 --> 00:09:15.560
Let's stop viewing it as a one way street where we only merge feature branches into M..

123
00:09:15.720 --> 00:09:21.670
Let's view it as a two way street where we can also merge the master branch into our feature branches.

124
00:09:21.840 --> 00:09:28.470
So in our example between January 1st and January 15th every couple of days why don't we just pull down

125
00:09:28.470 --> 00:09:34.860
the latest copy of the master branch and while we have our feature branch checked out let's merge master

126
00:09:34.980 --> 00:09:36.310
into that branch.

127
00:09:36.480 --> 00:09:42.900
If we do this often enough we will likely avoid any conflicts and even if we do run into a few conflicts

128
00:09:42.930 --> 00:09:49.020
we can deal with them now so that when it comes time to actually merge our branch into master the process

129
00:09:49.020 --> 00:09:55.860
will be smooth and painless and that will actually wrap up our top four tips for avoiding conflicts.

130
00:09:55.860 --> 00:10:01.380
Obviously there are a ton of other strategies out there but these four are simple enough to follow and

131
00:10:01.380 --> 00:10:03.540
they will make a huge difference.

132
00:10:03.620 --> 00:10:07.350
Now in our next lesson we will be changing gears big time.

133
00:10:07.350 --> 00:10:12.990
We will learn how to get more job interviews and more importantly once we've gotten an interview we

134
00:10:12.990 --> 00:10:16.690
want to be sure that we interview well it should be a ton of fun.

135
00:10:16.740 --> 00:10:20.550
Let's keep things rolling and I will see you in the next lesson.
