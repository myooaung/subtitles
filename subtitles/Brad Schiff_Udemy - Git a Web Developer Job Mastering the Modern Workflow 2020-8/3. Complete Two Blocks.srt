1
00:00:05,340 --> 00:00:06,790
Hello everyone.

2
00:00:06,900 --> 00:00:13,500
In this lesson we will continue to write highly organized CSX to be more specific.

3
00:00:13,500 --> 00:00:21,480
We will complete the text styles for the large hero block and we will also begin and complete the button

4
00:00:21,480 --> 00:00:24,440
styles that are used throughout the design.

5
00:00:24,450 --> 00:00:25,710
This should be a lot of fun.

6
00:00:25,830 --> 00:00:27,310
Let's get started.

7
00:00:27,330 --> 00:00:30,950
All right to begin let's make sure that we have our index start.

8
00:00:30,990 --> 00:00:34,290
Each TMI file open within a web browser.

9
00:00:34,290 --> 00:00:40,260
To do that you just navigate to the project folder drill into the app folder and then drag index start

10
00:00:40,260 --> 00:00:43,370
each Timo on top of the browser.

11
00:00:43,380 --> 00:00:46,050
All right let's write some CSX.

12
00:00:46,050 --> 00:00:53,070
Let's jump over to our text editor and let's open up the CSX file that's dedicated to the large hero

13
00:00:53,070 --> 00:00:54,250
block.

14
00:00:54,540 --> 00:01:02,290
So that file lives in the app folder and then the assets folder styles folder and then the modules folder.

15
00:01:02,340 --> 00:01:03,510
There it is large hero.

16
00:01:03,990 --> 00:01:11,460
So the first thing that I want to do is to eliminate this spacing or margin between the different text

17
00:01:11,460 --> 00:01:12,540
elements.

18
00:01:12,540 --> 00:01:14,640
So let's completely remove that margin.

19
00:01:14,670 --> 00:01:19,970
So on this title element let's just say margin zero.

20
00:01:19,980 --> 00:01:25,320
Let's copy and paste that to the subtitle element as well.

21
00:01:25,470 --> 00:01:28,130
Go ahead and save this.

22
00:01:28,200 --> 00:01:29,510
That looks better.

23
00:01:29,520 --> 00:01:32,640
Let's compare what we have to the design file.

24
00:01:32,640 --> 00:01:39,090
So I think the next thing we should work on is making this text white and using a larger font size than

25
00:01:39,090 --> 00:01:40,760
what we currently have.

26
00:01:40,770 --> 00:01:49,230
So let's go ahead and locate this element in our H2 UML file our index start HMO file lives in the root

27
00:01:49,290 --> 00:01:51,270
of the app folder.

28
00:01:51,570 --> 00:01:53,480
Let's find the large hero block.

29
00:01:53,490 --> 00:01:54,280
Here it is.

30
00:01:54,720 --> 00:01:57,240
So here is the element in question.

31
00:01:57,270 --> 00:02:00,870
Let's go ahead and give it a bam class.

32
00:02:01,050 --> 00:02:08,160
So this element belongs to the large hero block to indicate that this is an element of that block we

33
00:02:08,220 --> 00:02:10,030
use to underscores.

34
00:02:10,110 --> 00:02:13,610
And now we can come up with any name we want for this element.

35
00:02:13,680 --> 00:02:16,550
Let's go with description.

36
00:02:16,650 --> 00:02:17,730
Let's save this.

37
00:02:17,760 --> 00:02:25,380
And jump over to our large hero dot CSX file and underneath the subtitle rule let's just create a brand

38
00:02:25,380 --> 00:02:26,160
new rule.

39
00:02:26,490 --> 00:02:33,570
Let's begin these selector with the ampersand because we are nested within the main large hero block

40
00:02:33,570 --> 00:02:38,920
rule the ampersand will actually be converted to large hero.

41
00:02:38,940 --> 00:02:47,020
So let's begin with Ampersand underscore underscore description and if you remember we want to make

42
00:02:47,020 --> 00:02:50,270
the text white and use a larger font size.

43
00:02:50,410 --> 00:03:00,610
So let's say color should be f f f for white and let's bump up the font size to maybe one point five

44
00:03:00,610 --> 00:03:01,050
REM.

45
00:03:01,570 --> 00:03:03,920
Let's see how that looks.

46
00:03:03,980 --> 00:03:07,580
It doesn't look terrible but it doesn't look quite right either.

47
00:03:07,580 --> 00:03:14,120
I think we need to fine tune the font size a bit which is the perfect segue way into talking about REM

48
00:03:14,630 --> 00:03:15,650
in this course.

49
00:03:15,650 --> 00:03:22,940
Whenever we declare a font size or a padding or margin value we want to do so in terms of RAM instead

50
00:03:22,940 --> 00:03:29,120
of pixels or percentages or E M we want to use Ram.

51
00:03:29,120 --> 00:03:33,200
So the question is what in the world is REM when we use Ram.

52
00:03:33,200 --> 00:03:42,230
Everything is relative to the root of the page and the root of any web page is always the h t AML element.

53
00:03:42,290 --> 00:03:50,180
So when we say one point five ram the browser will take whatever the font size of this main each TMM

54
00:03:50,210 --> 00:03:54,740
element is and multiply it by one point five.

55
00:03:54,740 --> 00:04:04,130
Most web browsers will have a default font size on the HDMI element of about the equivalent of 16 pixels.

56
00:04:04,160 --> 00:04:12,380
So when we say one point five let's get out our calculators 16 pixels time's one point five.

57
00:04:12,380 --> 00:04:18,760
In this specific instance this is really similar to saying font size of 24 pixels.

58
00:04:18,770 --> 00:04:24,550
So if I save this and refresh watch the white text it doesn't change at all.

59
00:04:24,580 --> 00:04:28,450
So you might be asking yourself why would we go through all that trouble of using REMS.

60
00:04:28,450 --> 00:04:30,910
Why wouldn't we just say 24 pixels.

61
00:04:30,910 --> 00:04:37,300
Well that's because not everyone in the world has their web browser configured exactly the same.

62
00:04:37,300 --> 00:04:45,490
So for example on my computer and maybe on your computer this HDMI font size is set to 16 pixels but

63
00:04:45,490 --> 00:04:52,180
for someone else who might be nearsighted or farsighted or maybe just wants to avoid eye strain their

64
00:04:52,180 --> 00:04:58,480
web browser might be configured to use a font size of 20 or 25 or even 30 pixels.

65
00:04:58,480 --> 00:05:04,960
And as a good web designer and developer we want to honor the users font size preferences and if we

66
00:05:04,960 --> 00:05:12,610
use ram for font size and padding and margin our entire web design and all of the whitespace and balance

67
00:05:13,030 --> 00:05:17,020
will scale accordingly to the user's font size preference.

68
00:05:17,110 --> 00:05:22,760
Whereas if we used pixels for everything our design would kind of be set in stone.

69
00:05:22,810 --> 00:05:28,870
And if a user had a larger default font size the text might feel too big for the layout surrounding

70
00:05:28,870 --> 00:05:33,910
it but we won't need to worry about that because in this course we will use rim.

71
00:05:33,910 --> 00:05:36,050
All right that's enough on RIM for now.

72
00:05:36,070 --> 00:05:40,120
Next let's focus on fine tuning this font size.

73
00:05:40,120 --> 00:05:45,730
So if we compare this to the design file it looks to me like we will need to increase this value of

74
00:05:45,730 --> 00:05:47,390
one point five a bit.

75
00:05:47,410 --> 00:05:50,980
So the question becomes how do we eliminate guesswork.

76
00:05:50,980 --> 00:05:54,400
How can we find out the exact value that this should be.

77
00:05:54,400 --> 00:06:01,020
Well normally we would just open this design file in a program like Photoshop or sketch or illustrator.

78
00:06:01,180 --> 00:06:06,340
But to keep things moving right along I will just say that the designer told me this text should be

79
00:06:06,550 --> 00:06:08,530
30 pixels.

80
00:06:08,530 --> 00:06:13,100
So over in our text editor let's change this from one point five.

81
00:06:13,180 --> 00:06:14,440
And what should we change it to.

82
00:06:14,440 --> 00:06:16,440
Well let's get out our calculator.

83
00:06:16,480 --> 00:06:23,980
So if we want a font size of 30 pixels and most browsers will use a default font size of 16 we just

84
00:06:23,980 --> 00:06:27,010
divide 30 by 16.

85
00:06:27,010 --> 00:06:30,640
And that gives us a value of one point eight seven five.

86
00:06:30,640 --> 00:06:37,150
So let's use one point eight seven five REM save that.

87
00:06:37,300 --> 00:06:38,940
That looks better next.

88
00:06:39,040 --> 00:06:44,500
Let's go ahead and edit this text to use a really thin font weight.

89
00:06:44,740 --> 00:06:51,170
Let's set the font way to 100.

90
00:06:51,260 --> 00:06:54,000
All right let's compare this to the design file.

91
00:06:54,470 --> 00:07:00,710
If we look really closely I see a super subtle shadow on this white text.

92
00:07:00,710 --> 00:07:02,960
So let's try.

93
00:07:02,960 --> 00:07:06,980
Text shadow square with a really small one.

94
00:07:06,980 --> 00:07:10,320
Just a two pixel offset zero blur.

95
00:07:11,140 --> 00:07:12,400
And what color should it be.

96
00:07:12,400 --> 00:07:13,360
Let's use a black.

97
00:07:13,360 --> 00:07:15,620
But a really transparent black.

98
00:07:16,060 --> 00:07:19,120
So we only want the black to be 10 percent visible.

99
00:07:19,120 --> 00:07:20,440
Let's save this.

100
00:07:20,440 --> 00:07:22,520
See how it looks.

101
00:07:22,570 --> 00:07:24,190
That looks good to me.

102
00:07:24,190 --> 00:07:29,920
If we compare this with the design file I think our last bit of business with this white headline is

103
00:07:29,920 --> 00:07:34,270
to make it drop to a second line after the word journeys.

104
00:07:34,270 --> 00:07:37,240
There are probably 500 different ways to achieve that.

105
00:07:37,240 --> 00:07:39,420
With each Allen CSX.

106
00:07:39,550 --> 00:07:42,120
Let me show you the way that I would do that.

107
00:07:42,310 --> 00:07:49,730
I would measure this and I would say that this has a width of about four hundred and eighty pixels as

108
00:07:49,730 --> 00:07:50,960
we can see here.

109
00:07:50,990 --> 00:08:02,950
So if we go into our CSX and give this element a max width of 480 pixels we see that that breaks the

110
00:08:02,950 --> 00:08:06,350
text onto a second line just like we wanted it to.

111
00:08:06,460 --> 00:08:11,840
And the text is still center aligned within that 480 pixel paragraph.

112
00:08:11,950 --> 00:08:17,860
But now we also want that four hundred and eighty pixel paragraph to be aligned center within the entire

113
00:08:17,860 --> 00:08:18,930
block.

114
00:08:19,030 --> 00:08:21,300
So to do that we can use margin.

115
00:08:21,370 --> 00:08:25,360
We can say margin left auto margin right.

116
00:08:25,510 --> 00:08:28,760
Auto.

117
00:08:28,890 --> 00:08:35,670
And there you have it now 480 pixels is the width that perfectly breaks this onto a second line.

118
00:08:35,670 --> 00:08:41,790
But if a user has customized their browser to use a larger than default font setting 480 pixels won't

119
00:08:41,790 --> 00:08:42,830
work.

120
00:08:42,840 --> 00:08:47,160
So instead of using pixels here Let's convert this to REM.

121
00:08:47,160 --> 00:08:49,040
So let's get out our calculator.

122
00:08:49,530 --> 00:08:53,090
Let's take 480 and divide it by 16.

123
00:08:53,370 --> 00:08:54,440
Gives us 30.

124
00:08:54,600 --> 00:09:01,040
So let's replace this with 30 REM excellent for the time being.

125
00:09:01,070 --> 00:09:08,230
Let's change gears let's transition from working on the large hero block to working on the button block.

126
00:09:08,750 --> 00:09:16,310
So if we look at the design file we see that there is a button style that is being used here here and

127
00:09:16,310 --> 00:09:24,080
in the very bottom in the footer being used here let's scroll back up to the top let's say that this

128
00:09:24,080 --> 00:09:28,960
medium sized blue button is the default state for the button block.

129
00:09:29,060 --> 00:09:30,910
So let's begin with it.

130
00:09:31,010 --> 00:09:43,580
So that element back in browser lives right here let's find this in our HDMI out in the HDMI file only

131
00:09:43,580 --> 00:09:49,730
a couple lines down from the opening body tag we see this link that reads get in touch.

132
00:09:49,730 --> 00:09:56,540
Let's go ahead and give this element a class so we can target it with our C Ss let's give it a class

133
00:09:56,570 --> 00:10:05,270
of B10 short for button let's save this file and then let's create a brand new C Ss file just for this

134
00:10:05,270 --> 00:10:11,660
button block so within our app folder and then the assets folder and then within these styles folder

135
00:10:11,720 --> 00:10:15,770
and within the modules folder let's create a new file.

136
00:10:16,160 --> 00:10:25,550
Let's begin the button rule and let's save this file let's name this file underscore t n dot CSX.

137
00:10:25,930 --> 00:10:30,970
If we look back at the design file the first thing we want to do is give the button a blue background

138
00:10:31,120 --> 00:10:36,300
and make it use white text so let's say a background color.

139
00:10:36,670 --> 00:10:38,500
Let's use a nice blue shade

140
00:10:41,650 --> 00:10:43,780
color should be white.

141
00:10:43,780 --> 00:10:51,280
Now if we save this file and refresh in the browser we won't see any change to this element and that

142
00:10:51,280 --> 00:10:58,570
is because we need to include or import this button block file into our main style sheet.

143
00:10:58,570 --> 00:11:05,830
So within app assets styles let's open up the main style sheet and let's add a new line where we import

144
00:11:05,830 --> 00:11:10,810
in the new button file that we just created.

145
00:11:10,810 --> 00:11:18,190
Save that refresh the browser there's a bit of progress and I'm thinking that this blue color that we

146
00:11:18,190 --> 00:11:23,770
are using as the background for the button is the exact same blue color we are using for this text.

147
00:11:23,770 --> 00:11:29,040
We don't want to have to keep remembering and typing out the hexadecimal code for that blue.

148
00:11:29,620 --> 00:11:36,810
So instead let's create a variable for this blue color that we can reuse in all of our blocks.

149
00:11:36,820 --> 00:11:37,530
So let's do this.

150
00:11:37,540 --> 00:11:40,980
Let's copy the code for this blue color and up at the top.

151
00:11:40,990 --> 00:11:47,500
We can create a variable named Main blue and it should equal that color code.

152
00:11:47,500 --> 00:11:55,120
So now we can replace this with main blue except there's no sense in keeping this variable definition

153
00:11:55,480 --> 00:11:57,630
in this button block file.

154
00:11:57,700 --> 00:12:05,500
Instead let's create a brand new file in these styles base folder that has the single responsibility

155
00:12:05,500 --> 00:12:07,420
of holding our variables.

156
00:12:07,420 --> 00:12:15,580
So within that styles base folder let's create a new file let's name this new file underscore variables

157
00:12:15,760 --> 00:12:24,580
dot CSX and let's just go ahead and cut this line where we defined the main blue variable and let's

158
00:12:24,580 --> 00:12:28,240
paste it into the new variables dot CSX file.

159
00:12:28,240 --> 00:12:37,240
Let's be sure to go into our main CSX file and import in that new variables file that we just created.

160
00:12:37,270 --> 00:12:43,600
So import go into the base folder and then grab the variables file.

161
00:12:43,600 --> 00:12:44,110
Excellent.

162
00:12:44,140 --> 00:12:46,370
So if we save and refresh.

163
00:12:46,540 --> 00:12:48,970
Nothing changes just like we were hoping.

164
00:12:49,090 --> 00:12:54,460
Now really quickly let's go back into our large hero block and update the rules for these two headings

165
00:12:54,640 --> 00:13:01,530
to use that blue variable back in the large hero block.

166
00:13:01,590 --> 00:13:04,420
Here is the rule for the large title.

167
00:13:04,420 --> 00:13:09,230
Let's change the color to main blue.

168
00:13:09,640 --> 00:13:16,180
Let's change it for the subtitle element as well.

169
00:13:16,250 --> 00:13:17,290
Perfect.

170
00:13:17,300 --> 00:13:19,720
Let's get back to styling the button.

171
00:13:20,150 --> 00:13:25,970
Let's go ahead and remove the text underline and also give the button a bit of spacing or padding.

172
00:13:25,970 --> 00:13:33,220
So in the text editor within the button file let's say text declaration.

173
00:13:33,350 --> 00:13:35,980
None that will remove the underline.

174
00:13:36,110 --> 00:13:38,120
Let's give it a bit of padding.

175
00:13:38,150 --> 00:13:42,650
Let's try one point two RAM and because we are giving it padding.

176
00:13:42,650 --> 00:13:47,560
Let's also make sure that we set it to be an inline block level element.

177
00:13:47,840 --> 00:13:52,160
That way it's parent and surrounding elements will be aware of its vertical padding.

178
00:13:52,850 --> 00:13:58,810
So let's save this I'm not seeing the change when I refresh.

179
00:13:58,810 --> 00:14:01,200
Let's check the command line.

180
00:14:01,780 --> 00:14:06,540
So I will actually leave this mistake of mine in the lesson so you can learn from it.

181
00:14:06,580 --> 00:14:13,180
I must have hit command s to save this button file before we had created and saved the new variables

182
00:14:13,180 --> 00:14:13,940
file.

183
00:14:14,080 --> 00:14:18,340
So the command line is complaining and saying that that variable is undefined.

184
00:14:18,340 --> 00:14:19,440
It's unknown.

185
00:14:19,510 --> 00:14:25,510
So now that we have the variable file in place and it definitely does exist we can just press control

186
00:14:25,510 --> 00:14:34,630
C to stop the old web pack task and then run NPM run Dev once again and go back to the button or actually

187
00:14:34,690 --> 00:14:40,240
any CSX file and save the file to trigger a rebuild or re bundle.

188
00:14:40,240 --> 00:14:47,420
And now let's go back to the browser and there are changes so if we compare what we have to the design

189
00:14:47,420 --> 00:14:51,080
file I think that our horizontal padding looks good.

190
00:14:51,110 --> 00:14:53,550
But I think we have too much vertical padding.

191
00:14:53,550 --> 00:14:58,150
So in our CSX we can use CSX shorthand.

192
00:14:58,310 --> 00:15:00,380
So first we provide a vertical value.

193
00:15:00,470 --> 00:15:04,220
So if one point to ram was too much let's try.

194
00:15:04,220 --> 00:15:06,160
Point seven five RAM.

195
00:15:06,200 --> 00:15:08,780
This will be used as the top and bottom padding.

196
00:15:08,810 --> 00:15:14,850
And this will be used as the left and right padding that looks better.

197
00:15:14,850 --> 00:15:20,220
So at this point I think our default state for the button block is good to go.

198
00:15:20,280 --> 00:15:23,630
Let's work on some of the other instances of the button.

199
00:15:23,730 --> 00:15:29,700
So if we scroll down to the very bottom of the design file we see that in the footer the button is orange

200
00:15:29,730 --> 00:15:30,930
instead of blue.

201
00:15:30,930 --> 00:15:33,620
Let's find that footer button in the web browser.

202
00:15:33,630 --> 00:15:37,280
So if we scroll down there is the get in touch link.

203
00:15:37,290 --> 00:15:40,650
Let's find that in our h t AML file.

204
00:15:40,650 --> 00:15:41,040
Here we are.

205
00:15:41,040 --> 00:15:45,780
Let's scroll down here is that link.

206
00:15:45,780 --> 00:15:55,390
Let's give it a class of button so if we save this file and refresh it receives the button style.

207
00:15:55,450 --> 00:15:58,420
Now we just want to make it orange instead of blue.

208
00:15:58,510 --> 00:16:00,160
So back in the H T memo.

209
00:16:00,340 --> 00:16:04,880
Let's leave that button class intact but let's give it a second class.

210
00:16:04,930 --> 00:16:11,920
That begins with the button block and we want to use a bam modifier to indicate a modifier and bam we

211
00:16:11,920 --> 00:16:15,210
use two dashes and then the name of the modifier.

212
00:16:15,280 --> 00:16:22,330
So let's go with button dash dash orange let's jump over to our button CSX file and create that modifier

213
00:16:22,330 --> 00:16:22,980
rule.

214
00:16:23,050 --> 00:16:32,290
So we will nested within the main button block rule ampersand is dash dash orange background color.

215
00:16:32,300 --> 00:16:36,000
Here is the orange color that we will use throughout the design.

216
00:16:36,070 --> 00:16:37,090
But you know the drill.

217
00:16:37,120 --> 00:16:39,550
We want to save this color as a variable.

218
00:16:39,550 --> 00:16:46,660
So let me actually cut this and let's head over to our variables dot CSX file.

219
00:16:46,660 --> 00:16:50,510
Let's create a brand new variable named Main orange.

220
00:16:50,800 --> 00:16:52,790
And then let's paste in that color code.

221
00:16:53,320 --> 00:16:59,260
OK let's save this file and then back in buttoned up CSX we can just say background color should be

222
00:16:59,260 --> 00:17:01,390
main orange.

223
00:17:01,450 --> 00:17:06,600
Let's test this out in the browser looks good.

224
00:17:06,610 --> 00:17:11,110
Let's scroll back up to the top of the page and let's work on this button.

225
00:17:11,110 --> 00:17:18,280
So we know from the design file that that should be orange and it should be quite a bit bigger than

226
00:17:18,280 --> 00:17:20,330
the buttons in the header in the footer.

227
00:17:20,350 --> 00:17:24,320
So let's find this element in our HDMI code.

228
00:17:24,700 --> 00:17:28,230
Then the large hero block here it is.

229
00:17:28,240 --> 00:17:31,570
So let's give it a class of button.

230
00:17:31,570 --> 00:17:38,680
Let's give it another class of button dash dash orange so just recycling those classes gets us half

231
00:17:38,680 --> 00:17:39,700
the way there.

232
00:17:39,700 --> 00:17:46,480
Now let's add on another modifier button dash dash and let's create a new one named large.

233
00:17:46,480 --> 00:17:54,490
Let's jump into our button dot CSX file and create a new modifier rule for large in this large version.

234
00:17:54,490 --> 00:17:55,450
Let's do two things.

235
00:17:55,450 --> 00:17:58,980
Let's bump up the font size and let's give it extra padding.

236
00:17:59,050 --> 00:18:06,070
So let's go with the font size of one point two five ram or in other words a font that is 25 percent

237
00:18:06,070 --> 00:18:08,100
larger than the pages default font.

238
00:18:08,830 --> 00:18:14,670
And let's bump up the padding a bit so if the normal button has point seven five vertical padding.

239
00:18:14,770 --> 00:18:16,900
Let's try one point one Ram.

240
00:18:16,900 --> 00:18:22,360
Vertical padding on this large version and for horizontal padding with bump it up from one point to

241
00:18:22,360 --> 00:18:28,210
ram to maybe one point nine Ram looks good.

242
00:18:28,230 --> 00:18:34,230
Now in future lessons we can fine tune these buttons dials a bit maybe add a super subtle text shadow

243
00:18:34,590 --> 00:18:37,530
or even a subtle hint of a gradient on hover.

244
00:18:37,530 --> 00:18:43,250
But for the time being that will bring this lesson to a close in our next lesson.

245
00:18:43,290 --> 00:18:46,170
We will take a quick web pack time out.

246
00:18:46,200 --> 00:18:52,470
We will learn how to configure web back to automatically refresh the browser for us when we save a change

247
00:18:52,470 --> 00:18:54,260
to our H T AML file.

248
00:18:54,360 --> 00:19:00,660
And beyond that when we save a change to a CSX file Westpac won't even need to refresh the browser at

249
00:19:00,660 --> 00:19:01,210
all.

250
00:19:01,350 --> 00:19:08,340
It will just auto inject the new CSX code into the browser's memory completely on the fly.

251
00:19:08,340 --> 00:19:13,440
This should be a lot of fun to set up and it should also provide us with a nice productivity or speed

252
00:19:13,440 --> 00:19:14,270
boost.

253
00:19:14,370 --> 00:19:18,290
So let's keep things rolling and I will see you in the next lesson.
