WEBVTT
1
00:00:05.070 --> 00:00:06.380
Hello everyone.

2
00:00:06.480 --> 00:00:12.690
In this lesson we will answer the question what does the phrase mobile first mean throughout this lesson.

3
00:00:12.690 --> 00:00:13.990
Here's what we will cover.

4
00:00:14.010 --> 00:00:20.220
So first I want to explain how the phrase mobile first can mean different things when it's used in different

5
00:00:20.220 --> 00:00:21.540
contexts.

6
00:00:21.570 --> 00:00:27.530
After that I want to talk about how we can apply the mobile first philosophy to our travel Web site.

7
00:00:27.570 --> 00:00:34.110
And finally you and I will work together to begin writing CSX the mobile first way.

8
00:00:34.110 --> 00:00:34.550
All right.

9
00:00:34.560 --> 00:00:40.800
So let's begin up at the top and ask the question what does the phrase mobile first even mean.

10
00:00:40.800 --> 00:00:46.950
We can answer that with a few other questions namely what is responsive web design and what are the

11
00:00:46.950 --> 00:00:50.610
shortcomings with traditional Responsive Web Design.

12
00:00:50.610 --> 00:00:52.030
Here's what I mean by that.

13
00:00:52.110 --> 00:00:54.150
Let's imagine a responsive Web site.

14
00:00:54.420 --> 00:01:00.480
So the layout and content of this hypothetical page are optimized for the size of the device that is

15
00:01:00.480 --> 00:01:00.990
viewing it.

16
00:01:01.290 --> 00:01:07.380
So maybe the page uses a three call them layout on a laptop or desktop maybe it uses a two column layout

17
00:01:07.410 --> 00:01:12.390
on a tablet and maybe things collapse to a single column layout on a smartphone.

18
00:01:12.390 --> 00:01:18.120
Now one Responsive Web Design first began we would build the desktop or the most advanced view of the

19
00:01:18.120 --> 00:01:24.080
site first and then adapt the layout to fit smaller and smaller screens as necessary.

20
00:01:24.090 --> 00:01:25.790
So we moved in this direction.

21
00:01:25.800 --> 00:01:32.760
We built in this direction eventually two big factors made the web design community reverse this and

22
00:01:32.760 --> 00:01:35.330
begin building in the opposite direction.

23
00:01:35.340 --> 00:01:37.220
So what were those two factors.

24
00:01:37.260 --> 00:01:39.410
Why did we decide that this was a good idea.

25
00:01:39.420 --> 00:01:41.160
Why is mobile first important.

26
00:01:41.190 --> 00:01:45.370
Well factor number one was that we had recently just witnessed a change.

27
00:01:45.510 --> 00:01:46.430
We're not even a change.

28
00:01:46.440 --> 00:01:49.900
A revolution in the way that people use the Internet.

29
00:01:49.920 --> 00:01:56.470
So now significantly more traffic comes from mobile devices than traditional desktops or laptops.

30
00:01:56.550 --> 00:01:59.850
And your primary source of traffic should not be an afterthought.

31
00:01:59.940 --> 00:02:03.480
You should design and build with it in mind from the beginning.

32
00:02:03.480 --> 00:02:10.530
Factor number two is that we eventually realized that traditional desktop first responsive design resulted

33
00:02:10.530 --> 00:02:17.520
in bloated slow loading Web sites because even though we used CSX to adapt and optimize the layout for

34
00:02:17.520 --> 00:02:24.540
different devices we were still forcing tiny smartphones to download huge image files that were intended

35
00:02:24.540 --> 00:02:26.370
for desktop monitors.

36
00:02:26.370 --> 00:02:31.770
So for example we might have had a large image that was 400 killer bytes and it was large enough to

37
00:02:31.770 --> 00:02:34.860
look good on a 27 inch desktop monitor.

38
00:02:35.040 --> 00:02:41.250
But sending that image to a smartphone user is a huge waste of their data plan because a way smaller

39
00:02:41.250 --> 00:02:47.310
image that weighs only 30 or 40 killer bytes still would have looked crisp and sharp on the smaller

40
00:02:47.310 --> 00:02:48.540
smartphone screen.

41
00:02:48.660 --> 00:02:51.470
And it also would have loaded way faster.

42
00:02:51.480 --> 00:02:53.100
Now that's just one example.

43
00:02:53.130 --> 00:02:59.160
The key concept behind factor number two is that we don't want anyone to have to download extra data

44
00:02:59.430 --> 00:03:01.040
that they won't even use.

45
00:03:01.050 --> 00:03:06.210
We want to build efficient Web sites that load as quickly as possible for everyone.

46
00:03:06.390 --> 00:03:12.210
And it just so happens that beginning with the most advanced view of our site as the baseline and trying

47
00:03:12.210 --> 00:03:15.500
to strip it down is not the best way of doing things.

48
00:03:15.540 --> 00:03:20.760
It no longer made sense and browser technology had advanced to the point where we could easily do better

49
00:03:21.180 --> 00:03:23.930
which is obviously where mobile first comes into play.

50
00:03:23.940 --> 00:03:29.850
The idea behind mobile first is that we begin with the most essential view of our site and we progressively

51
00:03:29.850 --> 00:03:36.240
enhance the layout and the assets only when necessary for larger and more advanced devices.

52
00:03:36.240 --> 00:03:36.720
All right.

53
00:03:36.740 --> 00:03:41.630
So at this point we have a general idea of what mobile first is referring to.

54
00:03:41.630 --> 00:03:45.680
Now let's talk about the different context that the phrase can be used in.

55
00:03:45.750 --> 00:03:49.780
So there's the design context and the development context.

56
00:03:49.830 --> 00:03:57.050
So when we think of mobile first design this refers to actually designing around a smaller screen first.

57
00:03:57.150 --> 00:04:03.030
This can be a good idea because smaller screens force us to really prioritize what we want to showcase.

58
00:04:03.030 --> 00:04:06.830
People also have a shorter attention span when using a mobile device.

59
00:04:06.840 --> 00:04:12.120
So this will force us to try and anticipate the most common actions that our visitors will want to take

60
00:04:12.450 --> 00:04:15.100
and place those front and center in our design.

61
00:04:15.120 --> 00:04:21.030
So when we think of who is involved in mobile first design it's the information architects it's the

62
00:04:21.030 --> 00:04:24.260
graphic designers and it's the usability experts.

63
00:04:24.360 --> 00:04:30.600
When we hear about mobile first development this refers to coding this site in such a way that devices

64
00:04:30.600 --> 00:04:32.970
won't download unnecessary data.

65
00:04:32.970 --> 00:04:38.730
It means that as a developer we treat the most essential view of our Web site as our baseline.

66
00:04:38.910 --> 00:04:45.150
And we code upwards from there as a mobile first developer it's our job to make the site load quickly

67
00:04:45.180 --> 00:04:46.270
for everyone.

68
00:04:46.290 --> 00:04:50.720
So obviously these two contexts are closely related to each other.

69
00:04:50.730 --> 00:04:55.830
The only reason I even bother to try and draw a distinction between the two is because now I want to

70
00:04:55.830 --> 00:05:01.740
talk about how mobile first can be applied to our travel Web site because you might have noticed that

71
00:05:01.740 --> 00:05:06.780
the designer on our team did not send us a design file for how the site should look.

72
00:05:06.790 --> 00:05:13.750
On a smaller mobile device I set the course up like this on purpose because in the real world a fair

73
00:05:13.750 --> 00:05:18.490
amount of the projects you work on will not include a design comp for the mobile view.

74
00:05:18.550 --> 00:05:25.600
And I see way too many developers using this as an excuse to many developers think in terms of all or

75
00:05:25.600 --> 00:05:26.380
nothing.

76
00:05:26.440 --> 00:05:31.960
They think oh well the information architect on my team or the graphic designer on my team did not provide

77
00:05:31.960 --> 00:05:34.180
me with a mobile first design view.

78
00:05:34.180 --> 00:05:38.350
So I'm just going to develop this Web site as if it was the year 2009.

79
00:05:38.380 --> 00:05:39.310
I don't like that.

80
00:05:39.370 --> 00:05:44.860
I don't think it's a valid excuse and I don't think that's fully embracing our job as a developer in

81
00:05:44.860 --> 00:05:45.820
my opinion.

82
00:05:45.820 --> 00:05:52.000
Even if you were only given a desktop design comp there is no reason to not make every Web site you

83
00:05:52.000 --> 00:05:54.640
develop a mobile first Web site.

84
00:05:54.640 --> 00:06:00.070
So even though we aren't working an absolutely ideal conditions we are not going to let anything get

85
00:06:00.070 --> 00:06:05.610
in the way of building a Web site that loads insanely fast on all devices.

86
00:06:05.620 --> 00:06:06.820
So where do we begin.

87
00:06:06.970 --> 00:06:12.550
When it comes to mobile first best practices there are things we can do in each of the Big Three languages

88
00:06:12.790 --> 00:06:15.850
HMO CSX and JavaScript.

89
00:06:15.970 --> 00:06:18.570
We are going to begin with CSX.

90
00:06:18.790 --> 00:06:25.180
So right now let's cut the intro and learn how to write CSX from a mobile first perspective.

91
00:06:25.180 --> 00:06:25.720
All right.

92
00:06:25.720 --> 00:06:31.900
So like always let's begin by jumping into the command line and let's make sure that our web pack task

93
00:06:31.930 --> 00:06:33.120
is up and running.

94
00:06:33.220 --> 00:06:41.560
So we're just going to run NPM run Dev once that's running that will allow us to view our Web site in

95
00:06:41.560 --> 00:06:47.530
the browser by visiting local host Colin 3000.

96
00:06:47.620 --> 00:06:54.010
Now earlier in the course when we wrote the CSX for this large hero block we were previewing things

97
00:06:54.010 --> 00:06:57.680
in our browser from a desktop or laptop perspective.

98
00:06:57.730 --> 00:07:03.520
But if I begin to make my browser window smaller to resemble the form factor of a smartphone I think

99
00:07:03.520 --> 00:07:08.830
it becomes immediately clear that the large hero text is too large for a smartphone.

100
00:07:09.070 --> 00:07:12.000
So let's adjust our CSF to fix that.

101
00:07:12.070 --> 00:07:21.460
So in our text editor within the app folder and then the assets folder styles and modules folder let's

102
00:07:21.460 --> 00:07:24.580
open up the large hero CSX file.

103
00:07:24.580 --> 00:07:27.340
Let's address the top main title first.

104
00:07:27.340 --> 00:07:32.310
So this element so here is the rule for that element.

105
00:07:32.380 --> 00:07:39.250
So we might be tempted to leave this font size declaration in place and write a new media query that

106
00:07:39.250 --> 00:07:41.050
targets smaller screens.

107
00:07:41.050 --> 00:07:48.400
But remember in the mobile first philosophy we want to treat the mobile view as our baseline and modify

108
00:07:48.400 --> 00:07:50.620
things from there as necessary.

109
00:07:50.710 --> 00:07:56.770
So to approach this from a mobile first perspective let's go ahead and cut this line into our clipboard

110
00:07:58.980 --> 00:08:04.650
and say that the baseline style for this element should have a font size of one point one rim and we

111
00:08:04.650 --> 00:08:06.630
can modify things from here.

112
00:08:06.690 --> 00:08:15.680
For larger screens so we can use a media query say media if a screen is larger than five hundred and

113
00:08:15.690 --> 00:08:19.780
thirty pixels then what do we want to do.

114
00:08:19.800 --> 00:08:23.930
We can just paste in the line that we copy to our clipboard a moment ago.

115
00:08:24.000 --> 00:08:29.970
Let's go ahead and save this file and if we jumped to the browser we see that this element now uses

116
00:08:29.970 --> 00:08:36.180
the baseline font size of one point one RAM and only want to make my web browser larger.

117
00:08:36.420 --> 00:08:39.010
Does it receive the media query style.

118
00:08:39.030 --> 00:08:40.080
Perfect.

119
00:08:40.080 --> 00:08:45.720
Now before we go ahead and adjust the font size of this element and this element I want to show you

120
00:08:45.750 --> 00:08:51.560
a quick post CSX tip that will make working with media queries much easier.

121
00:08:51.570 --> 00:08:54.660
I want us to leverage the power of mix ins.

122
00:08:54.810 --> 00:08:57.720
If you've never heard of a mixing before that's a OK.

123
00:08:57.720 --> 00:09:03.830
The first thing we want to do is configure our post CSF setup to support mix ins.

124
00:09:04.020 --> 00:09:10.110
So to do that let's jump to the command line and install a new package from NPM.

125
00:09:10.110 --> 00:09:15.030
So in the command line first we'll need to stop the current instance of web packets running so press

126
00:09:15.030 --> 00:09:15.870
control C.

127
00:09:16.500 --> 00:09:27.480
And now we can run the following command npm install in the name of the package is post CSX dash mix

128
00:09:27.480 --> 00:09:34.970
ins and then at the very end let's include dash dash save dash Dev go ahead and press enter.

129
00:09:35.820 --> 00:09:36.240
OK.

130
00:09:36.240 --> 00:09:43.860
And now to actually leverage that package we just need to jump into our web pack config J.S. file up

131
00:09:43.860 --> 00:09:44.610
towards the top.

132
00:09:44.610 --> 00:09:48.540
We created this array named post CSX plug ins.

133
00:09:48.630 --> 00:09:51.400
How about right after post CSX import.

134
00:09:51.420 --> 00:10:01.890
Let's just add a new line and let's require in require parentheses and its name is quotes post CSX dash

135
00:10:02.000 --> 00:10:07.780
mix ins and be sure to include a comma at the very end of this line.

136
00:10:07.800 --> 00:10:09.680
Let's go ahead and save this file.

137
00:10:09.840 --> 00:10:11.880
And now we can start Web pack up again.

138
00:10:11.910 --> 00:10:18.730
So in the command line NPM run Dev OK.

139
00:10:18.750 --> 00:10:26.400
At this point let's jump back into our large hero CSX file and let's create a new mix in that will make

140
00:10:26.400 --> 00:10:31.000
working with media queries throughout our entire Web site much easier.

141
00:10:31.020 --> 00:10:37.620
So a Mixon is really just a reusable bit of code so we don't want to store the mix in itself in this

142
00:10:37.620 --> 00:10:46.320
large hero block file instead in our app assets styles folder within the base folder let's create a

143
00:10:46.320 --> 00:10:53.520
new file and let's name this file underscore mix ins dot CSX.

144
00:10:53.730 --> 00:10:59.490
Let's create a mix end that passes styles along only to screens that are larger than what we typically

145
00:10:59.490 --> 00:11:01.840
consider a smartphone size.

146
00:11:01.860 --> 00:11:05.310
So to create a new mix in we just say at Symbol.

147
00:11:05.310 --> 00:11:07.310
Define Mixon.

148
00:11:07.440 --> 00:11:09.690
And then we can give our Mixon a name.

149
00:11:09.690 --> 00:11:13.770
Let's name this mix in at small.

150
00:11:14.280 --> 00:11:16.860
And now we get to say what the Mixon should do.

151
00:11:16.860 --> 00:11:23.220
So we just wanted to create a media query and this media query should only select screens that are five

152
00:11:23.220 --> 00:11:25.610
hundred and thirty pixels or larger.

153
00:11:25.620 --> 00:11:28.540
This is just a somewhat arbitrary number I'm choosing.

154
00:11:28.770 --> 00:11:30.210
But let's go ahead and stick with this.

155
00:11:30.210 --> 00:11:32.650
So you and I are on the same page.

156
00:11:32.910 --> 00:11:33.270
All right.

157
00:11:33.330 --> 00:11:35.760
And what should be placed within this media query.

158
00:11:35.790 --> 00:11:38.820
Let's just say mix in content.

159
00:11:38.820 --> 00:11:43.200
This line of code will make sense once we actually use this mix in.

160
00:11:43.200 --> 00:11:45.040
So let's go ahead and save this file.

161
00:11:45.360 --> 00:11:52.200
And before we can use this mix in in our large hero block file we need to open our main style sheet

162
00:11:52.500 --> 00:11:57.540
which lives in our styles folder and its named styles dot CSX.

163
00:11:57.540 --> 00:12:04.620
Now right after this variables line let's create a new line and go ahead and import that Mixon file

164
00:12:04.620 --> 00:12:06.180
that we just created.

165
00:12:06.180 --> 00:12:10.470
So it lives in the base folder and its name is underscore mix ins.

166
00:12:10.530 --> 00:12:10.740
All right.

167
00:12:10.740 --> 00:12:12.610
So let's save this main file.

168
00:12:12.810 --> 00:12:16.730
And now we can access the mix in from any of our files.

169
00:12:16.740 --> 00:12:20.090
So here we are in the large hero CSX file.

170
00:12:20.100 --> 00:12:24.740
Let's delete this media query and try using our mix in instead.

171
00:12:24.750 --> 00:12:31.740
So instead of typing at media to begin a media query we can type at mix in to begin using a mix in the

172
00:12:31.740 --> 00:12:37.590
name of the mixing that we want to use is at small curly brackets and then we can just say font size

173
00:12:37.590 --> 00:12:39.530
should be four point eight REM.

174
00:12:39.540 --> 00:12:42.270
All right let's try using our mix in again.

175
00:12:42.390 --> 00:12:44.650
So we've adjusted this element.

176
00:12:44.670 --> 00:12:51.070
Let's try adjusting this element so that element is named subtitle.

177
00:12:51.230 --> 00:12:53.280
So let's adjust this font size.

178
00:12:53.360 --> 00:12:58.850
Let's copy this to our clipboard and say that the baseline font size should only be one point one REM

179
00:13:00.060 --> 00:13:05.100
and now instead of having to type out a media query and remember the pixel threshold that we set of

180
00:13:05.110 --> 00:13:14.520
530 all we need to remember is at mix in small and then paste in that font size that we had just a moment

181
00:13:14.520 --> 00:13:15.020
ago.

182
00:13:15.120 --> 00:13:16.080
And there we have it.

183
00:13:16.080 --> 00:13:22.290
Now I realize that this mix in name that I chose at small might be a bit confusing because you might

184
00:13:22.290 --> 00:13:26.640
think aren't the baseline styles intended for small screens.

185
00:13:26.640 --> 00:13:35.970
Well it might help to think of our baseline styles as being called at smallest or at tiny or at microscopic

186
00:13:36.060 --> 00:13:36.330
right.

187
00:13:36.330 --> 00:13:42.640
We want these styles to be applied to every screen even if that screen is only one pixel wide.

188
00:13:42.690 --> 00:13:47.940
These styles are four screens so small we aren't even going to try to come up with a name for how small

189
00:13:47.940 --> 00:13:48.910
the screen is.

190
00:13:48.960 --> 00:13:55.730
And only once a screen is at least five hundred and thirty pixels wide will we consider it small.

191
00:13:55.740 --> 00:14:01.310
I think the best way to explain this system would be to just create another mix and really quick so

192
00:14:01.380 --> 00:14:10.970
intermix in file let's create another mix in the fine mix in and let's name this one at medium.

193
00:14:11.070 --> 00:14:13.850
So this will be almost identical to our first mix in.

194
00:14:13.860 --> 00:14:16.170
Let's just copy these lines and paste them in.

195
00:14:16.320 --> 00:14:21.900
Except at medium we'll have a min width of 800 pixels.

196
00:14:21.900 --> 00:14:24.970
And while we're at it why don't we create a third mix.

197
00:14:25.070 --> 00:14:28.330
Let's copy these lines paste them again.

198
00:14:28.530 --> 00:14:35.310
The third Mixon will be named at large and it will have a min width of twelve hundred pixels.

199
00:14:35.310 --> 00:14:40.530
Now let's save this file and let's try using all three mix ins on this top.

200
00:14:40.530 --> 00:14:45.780
Your clarity heading so in our large hero file.

201
00:14:45.960 --> 00:14:48.530
Here is the rule for that main title element.

202
00:14:48.620 --> 00:14:55.490
Let's say the baseline font size for super tiny screens should be one point one room beginning at the

203
00:14:55.490 --> 00:14:58.340
size of small at small.

204
00:14:58.340 --> 00:15:06.380
Let's try a font size of 2 Ram beginning at the size of medium at medium.

205
00:15:06.410 --> 00:15:13.530
Let's go with font size of three point two ram and beginning with the size of large.

206
00:15:13.640 --> 00:15:19.580
So at large screen sizes let's try a font size of four point eight Ram.

207
00:15:19.580 --> 00:15:20.600
So let's save this.

208
00:15:20.660 --> 00:15:24.880
And check out the browser so here is the baseline style.

209
00:15:24.900 --> 00:15:32.250
And if I make my browser a little bit larger this is what we consider a quote small screen size and

210
00:15:32.250 --> 00:15:34.550
we can see the font gets bumped up a bit.

211
00:15:34.590 --> 00:15:39.720
Make my browser a little bit larger.

212
00:15:39.770 --> 00:15:43.200
This is what we consider a quote medium screen.

213
00:15:43.340 --> 00:15:50.940
The font gets bumped up and if I make my screen resemble the size that we are considering quote large

214
00:15:51.270 --> 00:15:55.260
we see that our four point eight REM style is being observed.

215
00:15:55.260 --> 00:15:55.670
All right.

216
00:15:55.710 --> 00:16:01.410
So this is the mobile first CSF pattern that we are going to follow throughout the remainder of the

217
00:16:01.410 --> 00:16:02.420
course.

218
00:16:02.430 --> 00:16:09.120
We begin with the baseline styles that we want all screens to receive including super super tiny screens

219
00:16:09.470 --> 00:16:15.690
and we modify things for larger and larger screens progressively and that will bring this lesson to

220
00:16:15.690 --> 00:16:23.970
a close in our next lesson we will learn about responsive images which are absolutely vital to the mobile

221
00:16:23.970 --> 00:16:28.560
first idea of only sending users the data they actually need.

222
00:16:28.560 --> 00:16:32.430
It's going to be a lot of fun and I will see you in the next lesson.
