1
00:00:05,540 --> 00:00:09,750
Hello everyone in this lesson we will learn about node.

2
00:00:09,800 --> 00:00:13,880
J.S. This lesson has three main parts to it.

3
00:00:13,890 --> 00:00:17,400
Number one we will answer the question what is node.

4
00:00:17,430 --> 00:00:23,160
J.S. Number two I will help you install a node on your computer.

5
00:00:23,310 --> 00:00:26,560
And number three we will have a hands on demo.

6
00:00:26,820 --> 00:00:28,920
You and I will get to see node in action.

7
00:00:28,950 --> 00:00:33,200
We will write a bit of code together step by step should be a lot of fun.

8
00:00:33,240 --> 00:00:34,820
So lets start at the top.

9
00:00:34,830 --> 00:00:38,340
Number one what is node to answer that.

10
00:00:38,370 --> 00:00:43,490
Lets talk about javascript first and then circle back to node.

11
00:00:43,500 --> 00:00:50,820
So what is javascript we traditionally think of javascript as a language that only runs within the web

12
00:00:50,820 --> 00:00:59,190
browser which means Javascript can only do web browser ish things things like opening a modal window

13
00:00:59,190 --> 00:01:06,390
or a lightbox on a web page or opening or closing a toggle menu on a page or adding new content to a

14
00:01:06,390 --> 00:01:08,900
page without a hard refresh.

15
00:01:09,000 --> 00:01:12,330
Those are all very web browser ish tasks.

16
00:01:12,450 --> 00:01:21,270
We might call them front end tasks but what about less browser ish tasks and more computer ish or server

17
00:01:21,270 --> 00:01:29,040
ish tasks things we might call back end things like creating new folders and files on a computer or

18
00:01:29,040 --> 00:01:36,250
servers harddrive things like interacting directly with a database or triggering a server to send an

19
00:01:36,290 --> 00:01:43,920
e-mail traditionally to do any of those things you would need to use a language like THP or Ruby or

20
00:01:43,920 --> 00:01:45,030
Python.

21
00:01:45,030 --> 00:01:51,120
You would need a language that can run on a computer and not just run within a web browser which means

22
00:01:51,150 --> 00:02:00,720
javascript can't do any of these things until one day node J.S. came along and said hey javascript Yeah

23
00:02:01,200 --> 00:02:04,160
do you want to grow up and where are your big boy pants.

24
00:02:04,470 --> 00:02:04,940
Yes.

25
00:02:04,950 --> 00:02:06,360
Yes I'd like that.

26
00:02:06,420 --> 00:02:10,820
Great because you are a legitimate programming language just like any other.

27
00:02:10,890 --> 00:02:13,770
There's no reason you need to be limited to the browser.

28
00:02:13,770 --> 00:02:14,880
Do you agree.

29
00:02:14,880 --> 00:02:15,900
I agree.

30
00:02:15,900 --> 00:02:16,330
Cool.

31
00:02:16,410 --> 00:02:17,720
My name's Noad.

32
00:02:17,730 --> 00:02:23,430
I just took the javascript guts out of Google Chrome and I used those guts to build a new playground

33
00:02:23,430 --> 00:02:29,260
for you that is located on the computer or server itself and not in a web browser.

34
00:02:29,490 --> 00:02:32,080
Within this new playground you can do whatever you want.

35
00:02:32,160 --> 00:02:36,180
You have access to the file system you can create files delete files.

36
00:02:36,180 --> 00:02:39,230
You can talk directly to databases you can send e-mails.

37
00:02:39,360 --> 00:02:42,240
You can create and serve up your own API.

38
00:02:42,360 --> 00:02:44,470
You can do whatever you want.

39
00:02:44,700 --> 00:02:46,310
Sweet thinking node.

40
00:02:46,560 --> 00:02:48,720
So that's what no genius is.

41
00:02:48,800 --> 00:02:54,300
It is a javascript runtime that lets us do just about anything with javascript.

42
00:02:54,300 --> 00:03:00,060
Now you can do a lot of different things with Knode but I would say most things fall into one of two

43
00:03:00,060 --> 00:03:00,990
camps.

44
00:03:01,170 --> 00:03:04,720
The first camp is when you install node on a server.

45
00:03:04,950 --> 00:03:11,900
In this case when the users of your website or app request a bit of data node is what's actually taking

46
00:03:11,900 --> 00:03:18,510
that incoming request and then maybe hitting up a database or hitting up an API somewhere retrieving

47
00:03:18,510 --> 00:03:21,570
the data and then sending it back to the user.

48
00:03:21,570 --> 00:03:29,430
So in this case node is what is actually powering and serving up your public facing web site or app.

49
00:03:29,460 --> 00:03:38,700
The second camp or the other super popular usage of node is to install it on your own personal computer.

50
00:03:38,730 --> 00:03:42,660
In this case we are not using node to serve up anything.

51
00:03:42,690 --> 00:03:45,600
Instead we're just using node as a development tool.

52
00:03:45,600 --> 00:03:50,040
We are using it to basically create our own little robot assistant.

53
00:03:50,040 --> 00:03:57,510
We are using node to automate all sorts of web development tasks that can save us a ton of time.

54
00:03:57,660 --> 00:04:01,910
And in this course that is the way that we will leverage node.

55
00:04:02,160 --> 00:04:05,140
All right so now we know what node is.

56
00:04:05,310 --> 00:04:07,450
We know why we want to use it.

57
00:04:07,560 --> 00:04:11,580
Now we can go ahead and install it on our computers.

58
00:04:11,580 --> 00:04:18,000
So let's get started search for the Web site Noad J.S. dot org.

59
00:04:18,000 --> 00:04:24,140
You should see a few download links we are interested in the one that ends with L ts.

60
00:04:24,210 --> 00:04:28,240
We don't necessarily want the newest and most cutting edge version of Noad.

61
00:04:28,440 --> 00:04:31,440
We want the most stable version of node.

62
00:04:31,740 --> 00:04:33,300
So go ahead and click that.

63
00:04:33,300 --> 00:04:34,790
Begin the download.

64
00:04:34,980 --> 00:04:41,340
And once the download finishes whether you are on Windows or Mac just go ahead and double click the

65
00:04:41,340 --> 00:04:43,050
downloaded file.

66
00:04:43,080 --> 00:04:48,210
The installation process is self-explanatory you can just click next next next.

67
00:04:48,210 --> 00:04:52,250
Through the installer all of the default options are A-OK.

68
00:04:52,530 --> 00:04:58,380
Once the installer completes let's make sure that everything was set up correctly to do that I want

69
00:04:58,380 --> 00:05:00,720
you to open up your command line.

70
00:05:01,940 --> 00:05:08,070
Type in the following command node space and then dash V.

71
00:05:08,090 --> 00:05:09,440
Hit enter.

72
00:05:09,860 --> 00:05:16,310
Now your numbers may not match what you see here exactly but as long as you see V and then a few numbers

73
00:05:16,760 --> 00:05:19,130
everything's great you are in business.

74
00:05:19,130 --> 00:05:26,210
If instead your command line replies with a known command or command not found.

75
00:05:26,210 --> 00:05:26,890
Don't panic.

76
00:05:26,890 --> 00:05:30,800
That just means we might need to troubleshoot your node installation a bit.

77
00:05:30,980 --> 00:05:36,980
If that's the case for you go ahead and pause this video and check out the text description for this

78
00:05:36,980 --> 00:05:37,820
lesson.

79
00:05:37,880 --> 00:05:41,370
I've included a few common pitfalls and solutions.

80
00:05:41,390 --> 00:05:47,610
All right I will assume that anyone moving past this point in the lesson has Knode successfully installed.

81
00:05:47,810 --> 00:05:51,710
So at this point we can now move on to the exciting part of the lesson.

82
00:05:51,710 --> 00:05:57,770
The third part where we get to see node interaction and we write a bit of code together.

83
00:05:57,770 --> 00:06:04,410
So the first thing I want you to do is to navigate to the generic sites or projects folder that you

84
00:06:04,410 --> 00:06:10,050
created a few lessons ago and within that folder create a new folder and name it.

85
00:06:10,040 --> 00:06:16,520
Node experiment or something similar doesn't have to be exactly this name but once you create a new

86
00:06:16,520 --> 00:06:21,560
folder I want you to navigate to the new folder in your command line.

87
00:06:21,620 --> 00:06:27,620
So I'm just going to type CD space and then I'm going to drag that new folder on top of the command

88
00:06:27,620 --> 00:06:30,080
line and hit enter.

89
00:06:30,080 --> 00:06:37,280
Next we want to create a new empty javascript file where we can write a bit of code and then have node

90
00:06:37,400 --> 00:06:38,780
run that file.

91
00:06:39,140 --> 00:06:45,260
So you can use your favorite text editor to create a new javascript file in the new folder or since

92
00:06:45,260 --> 00:06:50,480
we have already navigated to that folder in the command line you could just type touch and then the

93
00:06:50,480 --> 00:06:51,290
name of the file.

94
00:06:51,320 --> 00:06:54,200
So let's create a new file named test.

95
00:06:54,260 --> 00:06:57,190
J.S..

96
00:06:57,260 --> 00:06:57,980
There it is.

97
00:06:57,980 --> 00:07:02,340
So now go ahead and open up this new empty file in your favorite text editor.

98
00:07:02,780 --> 00:07:06,200
And let's begin with a simple hello world example.

99
00:07:06,380 --> 00:07:15,010
So type Konsole log in parentheses quotes hello world at a semi-colon.

100
00:07:15,050 --> 00:07:16,410
Go ahead and save the file.

101
00:07:16,530 --> 00:07:22,060
Ok now we want to run this file through node we want node to run the file.

102
00:07:22,160 --> 00:07:31,790
So in our command line type node space and then if you are truly lazy you could drag this file on top

103
00:07:31,790 --> 00:07:33,130
of your command line.

104
00:07:33,230 --> 00:07:38,200
But since we know we are already in the right directory you can literally just type test.

105
00:07:38,320 --> 00:07:45,110
J.S. So this will force node to run that file that we just created and there we go.

106
00:07:45,110 --> 00:07:47,600
So the console replies with Hello world.

107
00:07:47,870 --> 00:07:54,130
Let's try something a little bit more exciting so clear out your text file and let's try instead.

108
00:07:54,170 --> 00:07:56,060
Console log.

109
00:07:56,060 --> 00:07:59,260
Parentheses two plus two.

110
00:07:59,690 --> 00:08:00,550
Riveting right.

111
00:08:00,560 --> 00:08:02,120
So go ahead and add the semi-colon.

112
00:08:02,120 --> 00:08:04,880
Hit save back in the command line.

113
00:08:04,880 --> 00:08:08,590
Just run the exact same command node test.

114
00:08:08,600 --> 00:08:10,110
J.S..

115
00:08:10,580 --> 00:08:14,840
You might be wondering why seeing the number 4 here is supposed to be exciting.

116
00:08:14,840 --> 00:08:15,740
Here's why.

117
00:08:15,890 --> 00:08:21,650
It's because it means that whatever we write in this file isn't merely getting repeated or echoed out

118
00:08:21,650 --> 00:08:29,090
to the command line but instead it means that node is actually interpreting and evaluating our Javascript

119
00:08:29,090 --> 00:08:29,770
code.

120
00:08:29,870 --> 00:08:36,130
Right so node actually ran the expression two plus two and it concluded that that equals four.

121
00:08:36,380 --> 00:08:41,110
So that's a nerdy way of saying that we can do whatever we want in this file.

122
00:08:41,110 --> 00:08:43,630
So let's try something a bit more exciting.

123
00:08:44,000 --> 00:08:52,310
Let's write a bit of code to programmatically have node create a new HTL file in this folder for us

124
00:08:53,000 --> 00:08:53,840
out of the box.

125
00:08:53,840 --> 00:08:57,970
Knode comes with a bunch of modules that can do things for us.

126
00:08:58,190 --> 00:09:04,700
So since we want to create a file we want to leverage the node module named FS which stands for file

127
00:09:04,700 --> 00:09:05,580
system.

128
00:09:05,720 --> 00:09:10,120
So let's create a variable and we can name it whatever we want.

129
00:09:10,130 --> 00:09:17,570
I will call it fs just to make sense but you could name it unicorn or pizza the name of the variable

130
00:09:17,570 --> 00:09:18,570
does not matter.

131
00:09:18,650 --> 00:09:24,920
Let's just say EF-S though and then we set it to equal and then we can say require.

132
00:09:25,160 --> 00:09:27,520
And then this is where the name does matter.

133
00:09:27,530 --> 00:09:34,660
So in quotes I will say FS and this is the name of a node module or package.

134
00:09:34,670 --> 00:09:42,110
OK so a semi-colon here and now on a new line we can access all of the tools and methods that live within

135
00:09:42,110 --> 00:09:43,940
this file system package.

136
00:09:44,150 --> 00:09:49,830
By just saying FS This is now referencing our variable name that we created.

137
00:09:49,850 --> 00:09:59,690
So FS Daut and then it contains a method named right file and we want to get this right file method

138
00:09:59,760 --> 00:10:01,360
3 things.

139
00:10:01,550 --> 00:10:07,690
So just as placeholders we could say a comma B comma C right.

140
00:10:07,700 --> 00:10:11,340
So we want to give this method three arguments.

141
00:10:11,360 --> 00:10:13,100
Now back to the task at hand.

142
00:10:13,220 --> 00:10:17,950
Remember we want to create in each DML file within our folder.

143
00:10:17,990 --> 00:10:23,760
Now the first argument is the location on your computer where you want to create the new file.

144
00:10:24,020 --> 00:10:32,560
So instead of a let's say underscore underscore Der. name which stands for directory name.

145
00:10:32,750 --> 00:10:40,430
This will tell node to look within the current folder and then right after Derg name we can add on and

146
00:10:40,430 --> 00:10:42,690
then quotes and then within the quotes.

147
00:10:42,710 --> 00:10:47,700
Let's say forward slash and then the name of the file that we want to create.

148
00:10:47,960 --> 00:10:50,940
So maybe index dot each TNL.

149
00:10:50,990 --> 00:10:53,300
OK so this is the first argument.

150
00:10:53,300 --> 00:10:57,320
The second argument is what you want to live within the file.

151
00:10:57,320 --> 00:11:04,280
So instead of this placeholder B I will provide a string of text so quotes and then let's imagine we

152
00:11:04,280 --> 00:11:11,510
want to create in each DML headline so heading level one close out the tagging within the tags.

153
00:11:11,510 --> 00:11:16,920
Let's just say each DML is great.

154
00:11:17,450 --> 00:11:24,140
OK and then finally for the third argument instead of this placeholder see we want to include a function

155
00:11:24,140 --> 00:11:29,960
that will run once our write file action has either succeeded or failed.

156
00:11:29,960 --> 00:11:33,430
This is commonly referred to as a callback function.

157
00:11:33,710 --> 00:11:41,800
So at the end where are placeholder C was let's say function and it gets its own set of parentheses

158
00:11:42,200 --> 00:11:48,950
and then right after those curly brackets within the curly brackets Let's drop down and let's write

159
00:11:48,950 --> 00:11:50,020
an IF statement.

160
00:11:50,060 --> 00:11:54,200
So if parentheses curly brackets.

161
00:11:54,200 --> 00:12:00,520
Let's say if there is an error so if something goes wrong and for some reason our file cannot be created

162
00:12:00,970 --> 00:12:12,160
if that's the case then within these curly brackets we can say return Konsole dot log parentheses error.

163
00:12:12,160 --> 00:12:17,410
So if there's a problem this way we can see the problem in the command line and then right after the

164
00:12:17,410 --> 00:12:25,780
closing curly bracket for our if statement we can say else otherwise if there's not a problem within

165
00:12:25,780 --> 00:12:33,220
these Charitha brackets we can just say return Konsole dot log and then quotes for a string of text

166
00:12:33,280 --> 00:12:39,590
and let's say contracts meaning everything worked perfectly and your file was created.

167
00:12:39,610 --> 00:12:45,640
And finally before we save this file if we're going to be referencing a potential error that occurred

168
00:12:46,030 --> 00:12:50,950
we want to be sure to include that as a parameter when we first say function.

169
00:12:51,010 --> 00:12:55,750
So within these parentheses let's include error as a parameter.

170
00:12:56,020 --> 00:12:59,340
And now let's save this file and test it out.

171
00:12:59,650 --> 00:13:07,750
So over in the command line node test dot J.S. contracts.

172
00:13:07,780 --> 00:13:14,770
And if I check my folder sitting alongside or test J.S. we now see index dot h DMO.

173
00:13:15,040 --> 00:13:21,320
And if I open it up in my text editor cool we can see that it contains our content.

174
00:13:21,320 --> 00:13:27,510
Now let's change gears and try one more note example before we bring this lesson to a close.

175
00:13:27,650 --> 00:13:35,570
So up next let's make it our goal to use node to programmatically download and save an image from the

176
00:13:35,570 --> 00:13:36,370
Internet.

177
00:13:36,620 --> 00:13:41,190
So for example we need a RL for an image that lives on the Internet.

178
00:13:41,210 --> 00:13:47,590
So if you want to follow along with me you can visit get hub dot com slash learn web code.

179
00:13:47,600 --> 00:13:52,370
Slash welcome dash to Dagget.

180
00:13:52,650 --> 00:14:00,330
And I'm just going to dig within this images folder and then click on dogs a pig and this you r l will

181
00:14:00,330 --> 00:14:02,750
not work because this is still a web page.

182
00:14:02,760 --> 00:14:11,310
But if you right click on the dog photograph and choose view image this is the type of you rl I'm looking

183
00:14:11,310 --> 00:14:11,960
for.

184
00:14:12,060 --> 00:14:15,530
Now you do not need to use this exact photo of a dog.

185
00:14:15,720 --> 00:14:19,260
Any image you Arel on the Internet will work just fine.

186
00:14:19,470 --> 00:14:26,880
So go ahead and copy an image you are l into your clipboard and let's say that our goal is to use node

187
00:14:26,970 --> 00:14:31,250
to programmatically save this file to live within our folder.

188
00:14:31,500 --> 00:14:39,510
So back in our code back in our test dodgiest file in order to send out a request onto the Internet

189
00:14:39,810 --> 00:14:44,220
I'm going to want to include another node module or package.

190
00:14:44,370 --> 00:14:51,000
So up towards the top let's create a new variable we can name it whatever we want but just to make sense

191
00:14:51,090 --> 00:14:51,940
I will name it.

192
00:14:52,170 --> 00:15:02,430
H t t p s and set it to equal and then I want to require in or include in parentheses quotes a node

193
00:15:02,430 --> 00:15:09,890
module named H TTP s and just a quick note on semi colons in javascript.

194
00:15:09,930 --> 00:15:16,170
99 percent of the time they are not necessary but a lot of developers consider it just a best practice

195
00:15:16,170 --> 00:15:20,340
to be consistent and include them at the end of a statement.

196
00:15:20,370 --> 00:15:25,760
It's a bit of a personal preference because some developers hardly ever use semi-colons.

197
00:15:26,040 --> 00:15:28,860
But if you're going to use them you should probably be consistent.

198
00:15:28,860 --> 00:15:33,260
So you'll notice that on this line I forgot to include one at the end.

199
00:15:33,270 --> 00:15:35,100
Nothing breaks without it.

200
00:15:35,100 --> 00:15:39,840
It's just something you want to be consistent with and technically you can include one at the end of

201
00:15:39,840 --> 00:15:41,350
this line as well.

202
00:15:41,560 --> 00:15:41,890
OK.

203
00:15:41,910 --> 00:15:43,560
Back to the task at hand.

204
00:15:43,620 --> 00:15:50,670
We want to leverage this HTP module to download and save this dog photo.

205
00:15:50,820 --> 00:15:58,770
So down at the bottom of our code now at the very bottom let's add a new line and let's say HTP s to

206
00:15:58,770 --> 00:16:06,320
leverage that new module and look inside it with a dot and it contains a tool or method named get.

207
00:16:06,540 --> 00:16:09,000
We want to give this method to things.

208
00:16:09,000 --> 00:16:13,190
So within the parentheses as a placeholder we could say a and b.

209
00:16:13,230 --> 00:16:13,530
Right.

210
00:16:13,530 --> 00:16:19,380
Two arguments the first argument is that you Arel that you want to work with.

211
00:16:19,740 --> 00:16:26,310
So technically we could include quotes here and then paste in our clipboard but R U R L is so long that

212
00:16:26,310 --> 00:16:29,100
it would take up almost the entire screen.

213
00:16:29,130 --> 00:16:32,180
So instead why don't we do this right before this line.

214
00:16:32,220 --> 00:16:34,010
We could create a variable.

215
00:16:34,140 --> 00:16:35,240
The name doesn't matter.

216
00:16:35,250 --> 00:16:45,390
But I'm going to name it my photo location and set that to equal and then quotes and now paste in your

217
00:16:45,390 --> 00:16:47,510
clipboard.

218
00:16:47,510 --> 00:16:48,020
Cool.

219
00:16:48,150 --> 00:16:50,690
So you can see that that path is really long.

220
00:16:50,850 --> 00:16:52,850
And just to keep this line of code clean.

221
00:16:52,860 --> 00:17:01,110
Now instead of the placeholder a we can just say my photo location right that variable will pull in

222
00:17:01,110 --> 00:17:07,680
the photo you Aro and then the second argument for this get method instead of the placeholder B.

223
00:17:07,770 --> 00:17:13,770
We want to include a function where we say what we want to actually do with the photo data.

224
00:17:14,160 --> 00:17:20,670
So let's say function parentheses curly brackets within those brackets.

225
00:17:20,670 --> 00:17:28,380
Let's drop down and this good method is going to pass along any data that lives that are you Arel into

226
00:17:28,380 --> 00:17:29,420
our function.

227
00:17:29,580 --> 00:17:33,670
So it within our parentheses lets out a parameter we can name it anything.

228
00:17:33,690 --> 00:17:36,500
But why don't we call it response.

229
00:17:36,990 --> 00:17:42,730
And now on this line within the body of our function we can do whatever we want with that data.

230
00:17:43,020 --> 00:17:47,840
So let's say response and then we want to pipe it or send it somewhere.

231
00:17:47,850 --> 00:17:52,380
So Dot pipe and what do we want to do with it.

232
00:17:52,470 --> 00:17:56,790
Well we just want to save it onto our computer within this same folder.

233
00:17:56,820 --> 00:18:03,650
So within these parentheses let's say EF-S to use the file system and then a dot to look inside it.

234
00:18:03,810 --> 00:18:06,770
And let's use a method named create.

235
00:18:07,020 --> 00:18:08,120
Right.

236
00:18:08,190 --> 00:18:15,540
Stream it gets its own set of parentheses and within the parentheses we just want to provide a path

237
00:18:15,750 --> 00:18:17,940
to where we want to create the file.

238
00:18:17,940 --> 00:18:25,050
So I will say underscore underscore dirth name to point at the current folder and then add on a string

239
00:18:25,050 --> 00:18:30,710
of text and save forward slash and then you can name the file whatever you want to name it.

240
00:18:30,870 --> 00:18:33,720
So I would just name it my dog die.

241
00:18:33,780 --> 00:18:35,670
JP cool.

242
00:18:35,670 --> 00:18:38,880
OK so now we can go ahead and save this file.

243
00:18:39,680 --> 00:18:47,040
And back in our command line let's run node test dot J.S. push enter.

244
00:18:47,450 --> 00:18:51,800
And if we go and check our folder cool there is our my dog photo.

245
00:18:51,800 --> 00:18:59,630
And if you open it up perfect and that marks the end of this hands on no demo we didn't do anything

246
00:18:59,690 --> 00:19:06,080
earth shattering with node but hopefully you can see the potential if node can access our file system

247
00:19:06,170 --> 00:19:13,140
and if node can go onto the Internet and grab files for us that means we can automate all sorts of things.

248
00:19:13,280 --> 00:19:18,740
And the good news is that we don't need to write a bunch of code to create that automation.

249
00:19:18,740 --> 00:19:24,890
We wrote code in this lesson just because I wanted you to see how Knode works at its most basic level

250
00:19:25,370 --> 00:19:32,300
but writing code for very basic tasks like we did here is not an efficient use of our time on Earth.

251
00:19:32,300 --> 00:19:38,990
Instead we can leverage code that other super intelligent people have already written and have already

252
00:19:38,990 --> 00:19:40,710
shared with the world.

253
00:19:40,820 --> 00:19:44,000
Which brings us to the topic of our next lesson.

254
00:19:44,000 --> 00:19:46,880
This is exactly where NPM comes into play.

255
00:19:47,180 --> 00:19:52,210
And in our next lesson we will learn what NPM is and how to get started using it.

256
00:19:52,220 --> 00:19:55,950
It's going to be a lot of fun and I will see you in the next lesson.
