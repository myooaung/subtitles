WEBVTT
1
00:00:02.470 --> 00:00:03.710
Hello everyone.

2
00:00:03.820 --> 00:00:10.720
In this lesson we are going to learn about cloud functions before we worry about what a cloud function

3
00:00:10.720 --> 00:00:11.530
is.

4
00:00:11.530 --> 00:00:14.240
Let's first give ourselves a goal.

5
00:00:14.260 --> 00:00:20.450
So right now we're looking at the finished product of what we're going to build together in this lesson.

6
00:00:20.920 --> 00:00:24.700
You can see down at the very bottom of my Web site even below the footer.

7
00:00:24.800 --> 00:00:31.870
I've added this new area named secret client area and there's this input so you can imagine that maybe

8
00:00:31.870 --> 00:00:37.240
we have clients and they can visit our Web site and they have a secret password that the general public

9
00:00:37.240 --> 00:00:38.980
doesn't have.

10
00:00:38.980 --> 00:00:45.850
So we want them to be able to come here type that value in and then be able to view content secret content

11
00:00:45.880 --> 00:00:49.300
that we don't want the public to be able to view.

12
00:00:49.300 --> 00:00:57.240
So if I type in a bogus incorrect password on purpose you can see a red error message.

13
00:00:57.310 --> 00:00:59.500
That secret phrase is not correct.

14
00:00:59.500 --> 00:01:00.990
Try again.

15
00:01:00.990 --> 00:01:06.090
So if I enter the correct secret phrase which is javascript super secure.

16
00:01:06.100 --> 00:01:06.690
Right.

17
00:01:06.730 --> 00:01:09.010
If I submit that you can see.

18
00:01:09.040 --> 00:01:11.620
Welcome to the secret area for you.

19
00:01:11.620 --> 00:01:16.410
Here we can tell you that the sky is blue in two plus two equals four.

20
00:01:16.420 --> 00:01:23.380
Now clearly this feature is not very impressive or complex but it's important for us to work on because

21
00:01:23.380 --> 00:01:28.750
it illustrates the need for back end or server side code.

22
00:01:28.750 --> 00:01:30.520
Let me refresh really quick.

23
00:01:30.610 --> 00:01:35.750
The idea is that the logic that determines if this password is correct or incorrect.

24
00:01:35.800 --> 00:01:40.490
Well that logic needs to be executed on the back end or the server side.

25
00:01:40.540 --> 00:01:44.250
It's not that a web browser can't execute that logic.

26
00:01:44.290 --> 00:01:49.350
It's that we absolutely would not be able to trust the web browser to execute it.

27
00:01:49.480 --> 00:01:49.690
Right.

28
00:01:49.690 --> 00:01:56.800
So technically we could write a javascript if statement to check if this input equals a certain value

29
00:01:56.800 --> 00:02:04.000
or not but if it's front and JavaScript we would have to send that code to the web browser for the web

30
00:02:04.000 --> 00:02:06.550
browser to actually run and execute.

31
00:02:06.550 --> 00:02:12.880
Now if we lived in a perfect world where everyone was a perfect citizen with zero evil intentions we

32
00:02:12.880 --> 00:02:14.900
could actually get away with that.

33
00:02:15.010 --> 00:02:21.640
But in the real world there are tons of malicious users and a malicious user could just take that javascript

34
00:02:21.640 --> 00:02:27.010
that you sent to their web browser and they would modify and manipulate it to do whatever they wanted

35
00:02:27.340 --> 00:02:32.080
so they could set it up so that no matter what you type into this field their web browser evaluates

36
00:02:32.080 --> 00:02:34.030
to true and lets them in.

37
00:02:34.030 --> 00:02:38.990
Or they could just dig through that browser based javascript and find the secret content.

38
00:02:39.100 --> 00:02:42.790
So big picture in order to do anything securely.

39
00:02:42.790 --> 00:02:47.830
We need to have a private and trusted environment where we can run code.

40
00:02:47.890 --> 00:02:51.820
So this is the whole point of a back end or these server side.

41
00:02:51.820 --> 00:02:58.390
The idea is even if I am a malicious user I type in my value whether it's correct or incorrect that

42
00:02:58.390 --> 00:03:05.110
value gets sent off to a server somewhere and it's up to that server that hardware to run the code that

43
00:03:05.110 --> 00:03:07.660
determines if that value is correct or not.

44
00:03:07.660 --> 00:03:12.880
Then it sends back its response and then that's what I see in my browser.

45
00:03:12.880 --> 00:03:19.200
So even if I'm a malicious user I didn't have the opportunity or the power to make anything bad happen.

46
00:03:19.210 --> 00:03:22.240
Now I realize none of this is earth shattering news.

47
00:03:22.240 --> 00:03:25.920
We all know that server side code exists for a reason.

48
00:03:25.930 --> 00:03:30.250
The issue is that our Web site is static HDMI.

49
00:03:30.910 --> 00:03:36.220
It's not like this is generated by P HP or Python or Ruby.

50
00:03:36.220 --> 00:03:41.320
It's just an HD CML file being served up by very basic servers.

51
00:03:41.410 --> 00:03:41.590
Right.

52
00:03:41.590 --> 00:03:47.890
Because whether it's GitHub pages or net Lafite servers they aren't actually running any server side

53
00:03:47.890 --> 00:03:55.300
or back in language they're just a simplistic file system server that literally just sends whatever

54
00:03:55.300 --> 00:03:57.790
files we tell it to send.

55
00:03:57.790 --> 00:04:05.740
So the question becomes how can we have the speed and security benefits of a static web site while still

56
00:04:05.740 --> 00:04:12.490
being able to perform actual actions that require server side logic.

57
00:04:12.490 --> 00:04:16.020
Well this is where cloud functions come into play.

58
00:04:16.090 --> 00:04:20.310
Now I realize I still haven't explained what a cloud function is.

59
00:04:20.380 --> 00:04:26.690
Instead of trying to use words to describe it let's just build the cloud function right here right now.

60
00:04:26.830 --> 00:04:29.690
So I will close this finished product preview.

61
00:04:29.770 --> 00:04:33.480
So now my Web site is exactly back to the way your Web site is.

62
00:04:33.710 --> 00:04:33.880
Right.

63
00:04:33.880 --> 00:04:39.640
There's no client area below the footer and let's go set up a cloud function so we can begin to understand

64
00:04:39.640 --> 00:04:41.020
what it is.

65
00:04:41.020 --> 00:04:46.360
So jump over to your text editor and with your travel site project open.

66
00:04:46.360 --> 00:04:48.270
We want to create a new folder.

67
00:04:48.460 --> 00:04:54.640
So not even within the app folder just within the root of the project folder I will right click choose

68
00:04:54.640 --> 00:04:55.790
New Folder.

69
00:04:56.050 --> 00:04:57.700
We could name it anything but.

70
00:04:57.700 --> 00:04:59.460
So you and I are on the same page.

71
00:04:59.470 --> 00:05:10.550
Let's name it cloud dash functions OK within this new folder let's create a new file and just so we're

72
00:05:10.550 --> 00:05:11.300
on the same page.

73
00:05:11.300 --> 00:05:19.090
Let's name this file secret dash area dot J It's OK.

74
00:05:19.100 --> 00:05:24.560
Now in this new file we're going to write a bit of code but I'm not going to explain the code in detail

75
00:05:24.590 --> 00:05:27.020
until we've got it up and running.

76
00:05:27.020 --> 00:05:30.520
So we will circle back to this to make sure we understand what's going on.

77
00:05:30.590 --> 00:05:32.730
But for now I just typed this in with me.

78
00:05:32.990 --> 00:05:44.060
Exports dot handler equals in anonymous functions function parentheses curly brackets inside the function

79
00:05:44.060 --> 00:05:44.710
parentheses.

80
00:05:44.720 --> 00:05:46.570
Let's include three parameters.

81
00:05:46.640 --> 00:05:53.120
Let's say event comma context comma callback.

82
00:05:53.120 --> 00:05:54.610
Inside the body of this function.

83
00:05:54.620 --> 00:05:56.380
Let's call the callbacks.

84
00:05:56.390 --> 00:06:03.450
Call back parentheses to run it we'll give it to arguments first we'll say no comma.

85
00:06:03.470 --> 00:06:10.160
The second argument will be an object so curly brackets inside the curly brackets we can drop down.

86
00:06:10.240 --> 00:06:14.520
Let's give it one property of status code.

87
00:06:14.980 --> 00:06:17.810
That's uppercase C colon.

88
00:06:17.880 --> 00:06:20.290
Two hundred comma.

89
00:06:20.350 --> 00:06:27.370
Let's give it another property of body and let's set this to a string of text that says Welcome to the

90
00:06:27.370 --> 00:06:29.880
super secret area.

91
00:06:30.650 --> 00:06:31.050
OK.

92
00:06:31.060 --> 00:06:31.750
And that's it.

93
00:06:31.750 --> 00:06:34.070
Let's go ahead and save this file.

94
00:06:34.570 --> 00:06:40.600
However before we push it up to get hub we do want to make one change within our net lo fi account.

95
00:06:40.630 --> 00:06:47.320
So right now open up the overview screen for your project on net lo fi and in the top navigation we're

96
00:06:47.320 --> 00:06:54.510
looking for settings to click into settings within this left hand sidebar of the settings screen we're

97
00:06:54.510 --> 00:07:03.120
looking for functions from this function settings screen we can click on edit settings and we just want

98
00:07:03.120 --> 00:07:07.710
to tell nullify what we named that folder that contains our cloud functions.

99
00:07:08.040 --> 00:07:13.170
So remember we gave it a name of cloud dash functions.

100
00:07:13.620 --> 00:07:17.130
Go ahead and save that call at this point.

101
00:07:17.130 --> 00:07:23.210
We are ready to now push our latest changes up to get hub and net fi we'll see our changes.

102
00:07:23.250 --> 00:07:28.280
So then we'll see what happens and we'll begin to understand what a cloud function is.

103
00:07:28.290 --> 00:07:34.350
So in your command line run this with me get add dash uppercase a.

104
00:07:34.410 --> 00:07:44.770
Then let's commit it commit dash M let's say created our first cloud function close up quote push enter

105
00:07:44.990 --> 00:07:50.020
let's push that up to get hubs so get push origin master

106
00:07:52.880 --> 00:07:59.600
we can jump back over the net lo fi and if you click on the deploys section we can see in real time

107
00:08:00.530 --> 00:08:05.110
it hasn't even started building yet but it should start in the next few seconds.

108
00:08:05.210 --> 00:08:10.400
Here we can see that commit message rent created our first cloud function through the magic of video

109
00:08:10.400 --> 00:08:11.660
editing and post-production.

110
00:08:11.660 --> 00:08:18.470
I just waited maybe 30 or 40 seconds and in real time I see that this just updated to published.

111
00:08:18.470 --> 00:08:25.070
So with that in place now we can scroll up and in the top navigation for this net MFI project we can

112
00:08:25.070 --> 00:08:32.810
click on functions awesome since we just push that one function we see one lambda function actively

113
00:08:32.810 --> 00:08:40.370
running in production and down here we see secret area dot J Yes so we can click on this to get a bit

114
00:08:40.370 --> 00:08:46.550
more information so functions secret area it's running in production and here's the cool part we see

115
00:08:46.640 --> 00:08:54.020
end point I want you to grab this U.R.L. and copy it into your clipboard obviously your U.R.L. will

116
00:08:54.020 --> 00:08:55.460
be a bit different than mine right.

117
00:08:55.460 --> 00:09:01.640
This is a randomly generated name but select your U.R.L. and then just open up a new browser tab and

118
00:09:01.820 --> 00:09:05.710
paste in that you are URL and visited when you do that you should see.

119
00:09:05.780 --> 00:09:08.510
Welcome to the super secret area.

120
00:09:08.510 --> 00:09:10.390
So right now we have a lot of questions.

121
00:09:10.460 --> 00:09:12.000
What in the world is going on.

122
00:09:12.020 --> 00:09:17.690
Why is this supposed to be impressive or powerful or interesting and still you're wondering what is

123
00:09:17.690 --> 00:09:18.590
a cloud function.

124
00:09:19.370 --> 00:09:26.030
Well what we do know is that we created this new JavaScript file and it includes a function but when

125
00:09:26.030 --> 00:09:33.620
we visit this U.R.L. our web browser is not executing any javascript code or any functions.

126
00:09:33.620 --> 00:09:38.780
Our web browser is just receiving a simple response a simple string of text.

127
00:09:38.810 --> 00:09:44.520
So the question becomes what is executing or running that function that we wrote.

128
00:09:44.570 --> 00:09:47.630
It's not our personal computer or web browser.

129
00:09:47.630 --> 00:09:53.810
And it's also not the net lo fi server that hosts star HDMI LCROSS and JavaScript.

130
00:09:53.810 --> 00:10:00.560
What's really going on is net lo fi takes the function that we wrote and they send it over to a private

131
00:10:00.620 --> 00:10:08.810
and trustworthy environment over on Amazon Web Services then net the fi sets up a convenient U.R.L.

132
00:10:09.470 --> 00:10:15.920
and whenever anyone sends a request to that you are all net the fi tells Amazon Web Services to run

133
00:10:16.010 --> 00:10:17.960
and execute our function.

134
00:10:18.260 --> 00:10:21.680
And within this function we are free to do anything.

135
00:10:22.070 --> 00:10:25.980
Typically you would actually do something before calling the callback.

136
00:10:26.060 --> 00:10:33.350
So right here you could talk to a database you could tell a third party service to send an email or

137
00:10:33.350 --> 00:10:39.350
if we think back to earlier in this video you could write an if statement to evaluate the incoming string

138
00:10:39.350 --> 00:10:42.830
of text that a visitor sent with their request.

139
00:10:42.830 --> 00:10:45.770
Then once you're done you can call callback.

140
00:10:45.770 --> 00:10:52.780
This is our way of saying our function has done its job so a status code of two hundred means success.

141
00:10:52.780 --> 00:10:53.000
Right.

142
00:10:53.000 --> 00:10:57.890
We all know that a status code of 4 0 4 means cannot be found.

143
00:10:57.890 --> 00:11:01.720
And then this is the actual value of our response.

144
00:11:01.790 --> 00:11:08.180
The whole idea is that within this function we are safe to perform typical back end or server side actions

145
00:11:08.660 --> 00:11:15.500
because the public including potentially malicious visitors of our Web site they will never see any

146
00:11:15.500 --> 00:11:18.450
actual function code that we type here.

147
00:11:18.890 --> 00:11:23.500
The public will only ever see the value that we respond with.

148
00:11:23.540 --> 00:11:27.770
So this function is our private trustworthy environment to run code.

149
00:11:28.360 --> 00:11:28.610
OK.

150
00:11:28.640 --> 00:11:31.940
But why do we call this a cloud function.

151
00:11:31.940 --> 00:11:36.690
Well it's because this function is not being executed by the web browser.

152
00:11:36.770 --> 00:11:40.050
It's not being executed by the static file host.

153
00:11:40.160 --> 00:11:45.800
And it's also not being executed on a server that we as the developer ever need to worry about or be

154
00:11:45.800 --> 00:11:47.000
aware of.

155
00:11:47.000 --> 00:11:53.030
Amazon Web Services will take care of the hardware that our function runs on and depending on how much

156
00:11:53.030 --> 00:11:55.730
traffic our net life eyesight receives.

157
00:11:55.730 --> 00:12:02.510
Amazon Web Services will use as few or as many of their computing resources to execute our function.

158
00:12:03.140 --> 00:12:10.520
So we as the developer don't need to care if Amazon is using one or 100 thousand computers to execute

159
00:12:10.520 --> 00:12:14.560
our function enough times to take care of all of our visitors.

160
00:12:14.600 --> 00:12:19.810
That's why we say it's a cloud function because it just sort of exists out there in the cloud.

161
00:12:19.850 --> 00:12:24.800
We don't need to care about the environment in which it runs in all we need to know is that it's going

162
00:12:24.800 --> 00:12:28.450
to be an environment that speaks the node language.

163
00:12:28.520 --> 00:12:28.730
Right.

164
00:12:28.730 --> 00:12:34.900
So this is javascript intended for the node environment not the web browser environment.

165
00:12:34.940 --> 00:12:37.850
Now to get back to the actual task at hand.

166
00:12:37.940 --> 00:12:43.030
Remember our goal is to add this area at the very bottom of our Web site.

167
00:12:43.250 --> 00:12:49.040
And in order to determine if the visitor typed in the correct secret phrase or not we need to leverage

168
00:12:49.040 --> 00:12:51.600
the power of a cloud function.

169
00:12:51.650 --> 00:12:58.180
So in the very next video we will continue this lesson by learning how to work with any data that the

170
00:12:58.190 --> 00:13:02.540
visitor might have sent along with their request to our cloud function.

171
00:13:02.540 --> 00:13:05.800
You are out if things aren't perfectly clear right now.

172
00:13:05.810 --> 00:13:06.850
That's OK.

173
00:13:06.860 --> 00:13:12.740
I think once we see how our cloud function can have different results or different outcomes depending

174
00:13:12.740 --> 00:13:17.440
on the incoming values I think that'll be a real aha moment.

175
00:13:17.450 --> 00:13:21.530
So let's keep our momentum rolling and I'll see you in the next video.
