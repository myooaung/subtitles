1
00:00:02,330 --> 00:00:03,530
Hello everyone.

2
00:00:03,710 --> 00:00:09,440
In this video we will pick up right where we left off our goal in this video is to write JavaScript

3
00:00:09,470 --> 00:00:12,110
to make this modal come to life.

4
00:00:12,110 --> 00:00:16,350
Let's begin by thinking about the HD PML that powers this.

5
00:00:16,400 --> 00:00:22,390
So back in our text editor if you open up your index start each demo and take a look at the modal HD

6
00:00:22,380 --> 00:00:23,320
PML.

7
00:00:23,390 --> 00:00:29,270
It's just my own personal preference but I actually want to move this HD PML that powers the model to

8
00:00:29,270 --> 00:00:35,150
live inside javascript because if we think about it the modal is going to be hidden when you first come

9
00:00:35,150 --> 00:00:36,320
to the page.

10
00:00:36,320 --> 00:00:40,780
And the only way to see it is if you use javascript to make it appear.

11
00:00:40,910 --> 00:00:46,760
So if for whatever reason javascript is disabled on a user's device there's no point in even sending

12
00:00:46,790 --> 00:00:48,620
them this HDMI all at all.

13
00:00:49,250 --> 00:00:53,650
So to get started let's do this towards the bottom of your HD CML file.

14
00:00:53,660 --> 00:01:01,490
I want you to select the entire overall modal div so it's an opening div with a class of modal and then

15
00:01:01,490 --> 00:01:07,220
just select down until the closing div and let's cut all of this into our clipboard

16
00:01:10,740 --> 00:01:11,160
okay.

17
00:01:11,170 --> 00:01:13,760
You can save your HDMI file.

18
00:01:14,260 --> 00:01:19,180
And now let's go create a new JavaScript file for our modal.

19
00:01:19,210 --> 00:01:28,830
So within app assets scripts let's right click on modules and create a new file let's name it uppercase

20
00:01:28,860 --> 00:01:37,460
modal dot J.S. let's create a class named modal and then outside of that class at the very bottom let's

21
00:01:37,460 --> 00:01:42,320
say export default modal and before we forget.

22
00:01:42,320 --> 00:01:46,090
Let's save this file and go import it within our main JavaScript file.

23
00:01:46,120 --> 00:01:48,910
So within scripts go into your main app.

24
00:01:48,910 --> 00:02:00,280
Got J.S. towards the top here that's imported in so import modal from quotes dot forward slash modules

25
00:02:00,340 --> 00:02:02,260
slash modal.

26
00:02:02,710 --> 00:02:07,870
And then on a new line let's just create a new instance of the modal class.

27
00:02:07,870 --> 00:02:08,380
Don't worry.

28
00:02:08,380 --> 00:02:14,710
By the very end of this lesson I will explain when we do and when we don't need to save the new instance

29
00:02:14,710 --> 00:02:16,670
of a class to a variable.

30
00:02:16,780 --> 00:02:21,660
But for now before we get to that explanation we can just have a new instance of modal.

31
00:02:21,970 --> 00:02:22,940
Let's save this.

32
00:02:23,050 --> 00:02:28,480
Now at the moment in the browser the modal is not visible right because we removed it from our H PML

33
00:02:28,480 --> 00:02:29,500
file.

34
00:02:29,500 --> 00:02:36,520
However with it's still in our clipboard let's jump back into our modal dot J.S. and let's do this within

35
00:02:36,520 --> 00:02:37,050
our class.

36
00:02:37,060 --> 00:02:44,290
Let's set up a constructor and blow the constructor but still within our class let's create a method

37
00:02:44,290 --> 00:02:52,800
named inject h t Gemmell inject HDMI all parentheses curly brackets.

38
00:02:52,950 --> 00:02:53,270
OK.

39
00:02:53,320 --> 00:02:58,480
And then within our constructor let's be sure to call this method right away as soon as an object is

40
00:02:58,480 --> 00:02:59,140
created.

41
00:02:59,140 --> 00:03:05,880
So within the constructor just this dot inject H T.A. In parentheses to execute it.

42
00:03:06,010 --> 00:03:12,300
Now within this actual method let's just add a bit of H PML towards the bottom of the document.

43
00:03:12,670 --> 00:03:18,400
So to do that we can say document and then we can begin working with the bodies or document dump body

44
00:03:18,700 --> 00:03:24,180
dot insert adjacent H CML.

45
00:03:24,220 --> 00:03:26,860
This is a method the browser makes available to us.

46
00:03:27,130 --> 00:03:28,720
We give it to arguments.

47
00:03:28,720 --> 00:03:34,930
The first argument is where in relation to this element do you want to insert your new H TMM let's say

48
00:03:34,930 --> 00:03:36,900
quotes before.

49
00:03:37,180 --> 00:03:44,750
And so all the letters here are lowercase even the E and end after these quotes we have a comma.

50
00:03:44,750 --> 00:03:50,150
Now the second argument is the H T AML that you want to add or insert.

51
00:03:50,260 --> 00:03:54,420
Now we could use quotes however instead of quotes here.

52
00:03:54,490 --> 00:03:56,760
Let's use to back ticks.

53
00:03:56,770 --> 00:04:01,770
So again this is the character to the left of the one key or right above your tab key.

54
00:04:01,840 --> 00:04:06,580
The cool thing about back ticks is that it creates a template literal and the cool thing about a template

55
00:04:06,580 --> 00:04:13,600
literal is that we can drop down in between the two back ticks whereas you cannot drop down in between

56
00:04:13,600 --> 00:04:20,590
two quotes that will break javascript but with tactics we can do this just to stay organized and as

57
00:04:20,590 --> 00:04:28,270
you might have guessed this is where you can paste back in your clipboard to just paste OK.

58
00:04:28,280 --> 00:04:34,260
And if we go ahead and save this file over in the browser we see our model again.

59
00:04:34,520 --> 00:04:38,900
Great except we don't want the model to be visible when you first come to the page.

60
00:04:38,900 --> 00:04:43,800
So let's write a bit of CSX so that the modal is hidden by default.

61
00:04:43,870 --> 00:04:54,950
So in our Ed go into app assets styles modules and open up the modal dot CSX file within the baseline

62
00:04:54,950 --> 00:04:56,670
rule up at the top here.

63
00:04:56,750 --> 00:04:58,400
Let's add a few new properties.

64
00:04:58,940 --> 00:05:02,000
So by default let's set the opacity to 0.

65
00:05:02,240 --> 00:05:06,180
Let's also set visibility to hidden.

66
00:05:06,350 --> 00:05:10,760
Let's also set its scale to be a bit larger than its natural size.

67
00:05:10,760 --> 00:05:16,050
So this way when we reveal it it looks like it's sort of doing a zoom out or zoom in scale effect.

68
00:05:16,190 --> 00:05:21,710
So it's say transform and usually scale function and let's put it to one point two.

69
00:05:21,710 --> 00:05:26,550
So it's 20 percent larger than its normal size semicolon.

70
00:05:26,660 --> 00:05:31,130
And then let's tell the browser to gradually transition these values.

71
00:05:31,250 --> 00:05:34,950
So it looks like it's animating in once we actually reveal it.

72
00:05:35,060 --> 00:05:37,160
So transition.

73
00:05:37,370 --> 00:05:43,950
So I want to transition all properties over the course of point three seconds and I will use ease out.

74
00:05:44,110 --> 00:05:44,380
OK.

75
00:05:44,390 --> 00:05:51,020
Now while we're in this file let's go ahead and create the CSX modifier class that would make the modal

76
00:05:51,020 --> 00:05:51,940
visible.

77
00:05:52,130 --> 00:05:53,740
So still within the baseline rule.

78
00:05:53,750 --> 00:06:00,830
But maybe right below this flex property that's dropdown and say Ampersand dash dash.

79
00:06:00,830 --> 00:06:07,070
And let's make up a modifier name of is visible within this rule.

80
00:06:07,070 --> 00:06:11,390
Let's just say opacity should be one fully visible.

81
00:06:11,390 --> 00:06:17,360
Let's set visibility to visible and let's set it scale or size back to normal.

82
00:06:17,360 --> 00:06:22,160
So transform used the scale function and give it a value of 1.

83
00:06:22,160 --> 00:06:23,980
Be sure to end that with a semicolon.

84
00:06:24,600 --> 00:06:24,890
OK.

85
00:06:24,920 --> 00:06:28,990
Let's go ahead and save this cool.

86
00:06:29,000 --> 00:06:30,730
So it's hidden by default.

87
00:06:30,740 --> 00:06:36,440
Now we just need to write a bit of JavaScript so that when you click this button or this button the

88
00:06:36,440 --> 00:06:40,070
modal gets that is visible modifier class.

89
00:06:40,070 --> 00:06:47,540
So let's jump back into our JavaScript file modal dot J.S. and right below the constructor let's create

90
00:06:47,630 --> 00:06:48,680
an events method.

91
00:06:48,710 --> 00:06:56,780
So events parentheses curly brackets within the constructor let's be sure to call it this dot events

92
00:06:57,800 --> 00:07:04,160
and the ordering of these lines matters in the sense that we need to inject the H2 PML before any of

93
00:07:04,160 --> 00:07:07,390
our other javascript can interact with that HDMI out.

94
00:07:08,020 --> 00:07:08,310
Okay.

95
00:07:08,330 --> 00:07:12,310
Now within our events method we would want to listen for two things.

96
00:07:12,320 --> 00:07:17,840
So we can even write comments to ourselves so first we would want to listen for the open modal button

97
00:07:17,840 --> 00:07:25,910
being clicked on so we could say slash slash listen for open click and then we could write another comment

98
00:07:26,000 --> 00:07:28,640
because we also want to listen for the closing click right.

99
00:07:28,670 --> 00:07:36,770
When you click the top right exe to close the modal so listen for close click and while we're at it

100
00:07:36,800 --> 00:07:42,170
let's listen for a third event and that is if the user presses the escape key that should close the

101
00:07:42,170 --> 00:07:43,090
modal.

102
00:07:43,340 --> 00:07:47,600
For now let's just write a comment that says pushes any key okay.

103
00:07:47,620 --> 00:07:53,990
At this point let's work on the opening the modal feature so let's begin by selecting the open button

104
00:07:53,990 --> 00:07:58,640
that you would click on From the DOM to up in the constructor we can create a property let's name it

105
00:07:58,670 --> 00:08:05,740
this dot let's call it open modal button and let's set it to equal.

106
00:08:05,740 --> 00:08:12,590
Document dot query selector all all is important here because there are multiple buttons you could click

107
00:08:12,590 --> 00:08:20,570
on and let's give it quotes dot open dash modal now at the moment I don't believe there are any elements

108
00:08:20,600 --> 00:08:25,060
in our HD PML file with this class so let's fix that right now.

109
00:08:25,130 --> 00:08:28,360
So in your HDL file up at the very top.

110
00:08:28,490 --> 00:08:31,240
For me it's around line number 23.

111
00:08:31,340 --> 00:08:32,560
Here is that top right.

112
00:08:32,570 --> 00:08:34,250
Get in touch button.

113
00:08:34,250 --> 00:08:41,170
So in addition to just the class of B10 let's also give it a second class of open modal okay.

114
00:08:41,180 --> 00:08:46,720
And then let's also find this orange button and give it a class of open modal.

115
00:08:46,850 --> 00:08:49,530
So for me that's around line number 50.

116
00:08:49,550 --> 00:08:50,630
Here it is button.

117
00:08:50,640 --> 00:08:52,970
Button orange button large.

118
00:08:52,970 --> 00:08:56,010
So I'll just give it another class of open modal.

119
00:08:56,630 --> 00:09:01,860
And then finally remember we have a button in our footer that also says get in touch.

120
00:09:02,030 --> 00:09:04,970
So down at the very bottom of our HDMI well.

121
00:09:05,260 --> 00:09:10,690
For me it's around line 166 at the end of this line instead of just button button orange.

122
00:09:10,760 --> 00:09:14,610
Let's also add open modal.

123
00:09:14,840 --> 00:09:16,430
Let's go ahead and save that.

124
00:09:16,470 --> 00:09:19,070
Okay now back in our javascript.

125
00:09:19,070 --> 00:09:24,440
Now we have this collection of all of the buttons that can get clicked on to open the modal so down

126
00:09:24,440 --> 00:09:25,180
in our events.

127
00:09:25,190 --> 00:09:28,240
We can say begin working with that collection.

128
00:09:28,250 --> 00:09:31,880
This doc open modal button.

129
00:09:31,880 --> 00:09:39,200
Actually why don't we make this name plural so adding S buttons and then down your open model buttons

130
00:09:39,680 --> 00:09:43,460
dot and we want to do something once for each item in the collection.

131
00:09:43,460 --> 00:09:50,480
So for each let's give it an arrow function with exactly one parameter some element and then the arrow

132
00:09:50,480 --> 00:09:55,790
symbol and then what we want to do is just add an event listener to that element.

133
00:09:55,820 --> 00:10:05,060
So l dot add event listener the type of event we're listening for is a click event after the quotes

134
00:10:05,120 --> 00:10:06,290
comma.

135
00:10:06,360 --> 00:10:09,170
This is what we want to do in response to a click.

136
00:10:09,290 --> 00:10:13,130
Let's give it an arrow function with exactly one parameter.

137
00:10:13,130 --> 00:10:14,760
This time the parameters E.

138
00:10:14,870 --> 00:10:17,440
I just made up this name it's short for event.

139
00:10:17,600 --> 00:10:20,810
You'll see how we're going to use that in just a minute but e.

140
00:10:21,350 --> 00:10:22,970
Arrow symbol.

141
00:10:22,970 --> 00:10:26,990
And then we haven't created this method yet but we will in just a moment.

142
00:10:26,990 --> 00:10:30,030
So let's call a method named open the modal.

143
00:10:30,040 --> 00:10:35,840
So this dot open the modal in parentheses to call it.

144
00:10:35,980 --> 00:10:41,330
Now in these parentheses when we're calling it let's pass it e for event.

145
00:10:41,430 --> 00:10:44,780
Okay now let's go create a method with this matching name.

146
00:10:45,020 --> 00:10:52,910
So right below our events method and right above this inject H TMM method we can say open the modal

147
00:10:53,480 --> 00:11:00,830
parentheses curly brackets within these parentheses let's receive that incoming parameter of E and then

148
00:11:00,830 --> 00:11:05,830
in the body of this method what we want to do is prevent the default behavior.

149
00:11:05,840 --> 00:11:10,850
So these buttons are a elements right links and they have h ref values.

150
00:11:10,850 --> 00:11:15,680
So currently if we clicked on one of these you'll see the hash tag appears at the end of the address

151
00:11:15,680 --> 00:11:21,670
bar and in a draft value of hash tag we'll also scroll you up to the very top of the page.

152
00:11:21,680 --> 00:11:25,280
So if I click the link in the footer notice it scrolls to the top.

153
00:11:25,280 --> 00:11:27,120
So that's not what we want.

154
00:11:27,230 --> 00:11:30,450
So we're going to prevent that default behavior.

155
00:11:30,560 --> 00:11:37,580
So within our open the modal we can just say e that is the current event that just happened the Click

156
00:11:37,580 --> 00:11:42,480
event and we want to say dot prevent default.

157
00:11:42,530 --> 00:11:44,570
We want to call that prevent default method.

158
00:11:45,140 --> 00:11:45,720
OK.

159
00:11:45,770 --> 00:11:47,390
Once that's been taken care of.

160
00:11:47,390 --> 00:11:49,640
Now we just want to actually open the modal.

161
00:11:50,000 --> 00:11:54,260
So we want to give that overall modal div the class that makes it visible.

162
00:11:54,260 --> 00:12:00,350
So within our constructor let's select the overall modal div so we can save it into property.

163
00:12:00,350 --> 00:12:08,960
This modal equals document query selector just dot modal is the selector.

164
00:12:09,010 --> 00:12:17,630
Okay then in our open the modal method we can just say this dot modal dot class list dot ad and remember

165
00:12:17,630 --> 00:12:19,390
our CSF modifier class.

166
00:12:19,490 --> 00:12:28,950
That makes it appear is modal Dash Dash is visible let's go ahead and save this and test it out.

167
00:12:29,380 --> 00:12:30,770
It's back in the browser.

168
00:12:30,850 --> 00:12:37,570
I will refresh just to make sure that any experimental event listeners are gone and if I click the button

169
00:12:38,740 --> 00:12:45,790
perfect next let's set things up so that you can click on the exe icon to close the modal.

170
00:12:45,790 --> 00:12:51,190
So first up in the constructor let's create a property that points towards that close icon.

171
00:12:51,290 --> 00:13:01,900
So we can say this dot closed icon equals document query selector and it has a class of modal underscore

172
00:13:01,930 --> 00:13:04,180
underscore close.

173
00:13:04,300 --> 00:13:04,810
OK.

174
00:13:04,810 --> 00:13:07,820
Now in the events area we already have this comment.

175
00:13:07,840 --> 00:13:09,750
Listen for close click.

176
00:13:09,770 --> 00:13:13,310
We can just say this dot closed icon.

177
00:13:13,450 --> 00:13:18,510
We want to add event listeners or dot add event listener.

178
00:13:18,580 --> 00:13:22,050
We're listening for a click event comma.

179
00:13:22,060 --> 00:13:27,280
And let's just give it an arrow function so parentheses arrow symbol.

180
00:13:27,280 --> 00:13:32,600
And then we haven't created the method yet but let's imagine it's called close the modal.

181
00:13:32,650 --> 00:13:37,650
So this dot close the modal parentheses to call it.

182
00:13:37,990 --> 00:13:42,980
And our HDL is set up so that this is not an A element or a link with an H ref.

183
00:13:43,060 --> 00:13:46,000
So we don't need to worry about preventing the default behavior.

184
00:13:46,870 --> 00:13:56,030
So we can just go create a method with this name closed the modal right here close the modal parentheses

185
00:13:56,060 --> 00:14:01,220
curly brackets and we can actually just copy and paste this line to save a bit of typing.

186
00:14:01,220 --> 00:14:04,840
Only now instead of adding this CSX class we would want to remove it.

187
00:14:05,360 --> 00:14:16,100
So let's copy this paste it into closed the model and just change add to remove let's save and test

188
00:14:16,100 --> 00:14:17,090
it out.

189
00:14:17,090 --> 00:14:22,580
I will refresh though just so our add event listeners aren't doubling up and having multiple handlers

190
00:14:23,000 --> 00:14:30,350
so I can open the model if I click this cool I can close the modal mean try the button in the footer

191
00:14:31,940 --> 00:14:33,170
perfect.

192
00:14:33,230 --> 00:14:39,980
Finally let's set things up so that if the motel is open you can close it by pressing the escape key

193
00:14:39,980 --> 00:14:44,710
on your keyboard instead of only being able to click the close icon.

194
00:14:44,750 --> 00:14:50,840
So back in our code within our events method we already have this comment pushes any key.

195
00:14:50,840 --> 00:14:55,910
So in this event listener we're not going to listen for the escape key because that's not the way the

196
00:14:55,910 --> 00:14:56,960
browser works.

197
00:14:56,990 --> 00:15:01,800
First you just need to listen for any key up or key down event.

198
00:15:01,940 --> 00:15:04,730
So I would say document right.

199
00:15:04,800 --> 00:15:13,680
So the overall page and then add event listener the type of event we are listening for is a key up event.

200
00:15:13,740 --> 00:15:19,780
So once someone presses a key and then releases it up what do we want to do in response.

201
00:15:19,800 --> 00:15:20,700
Well let's provide it.

202
00:15:20,700 --> 00:15:26,930
An arrow function with exactly one parameter the parameter will be e short for event.

203
00:15:27,030 --> 00:15:32,700
This will contain information about the event that just occurred in this case it contains which key

204
00:15:32,790 --> 00:15:34,170
was pressed.

205
00:15:34,170 --> 00:15:38,760
So in just a moment we're going to want to check this to see if it was the escape key that was pressed

206
00:15:39,150 --> 00:15:44,310
but let's include the arrow symbol and then let's call a method that doesn't exist yet but one that

207
00:15:44,310 --> 00:15:46,160
we can create in just a moment.

208
00:15:46,170 --> 00:15:53,630
So I would say this dot key press handler parentheses to call it.

209
00:15:53,670 --> 00:15:56,580
And when we call it be sure to give it that E.

210
00:15:57,210 --> 00:15:57,450
OK.

211
00:15:57,450 --> 00:16:05,780
Now let's create a method with this matching name so key press handler within these parentheses.

212
00:16:05,790 --> 00:16:10,740
Be sure to receive that incoming argument and then we can just write an if statement.

213
00:16:10,770 --> 00:16:17,310
So only if the key that was pressed was the escape key only in that situation would we want to close

214
00:16:17,310 --> 00:16:19,910
the modal if any other key was pressed.

215
00:16:19,910 --> 00:16:21,390
We can just ignore it.

216
00:16:21,420 --> 00:16:32,520
So if parentheses curly brackets for the condition if e dot key code double equal sign to check for

217
00:16:32,520 --> 00:16:33,240
equality.

218
00:16:33,240 --> 00:16:39,330
If that equals twenty seven so every key on the keyboard has a numeric value associated with it.

219
00:16:39,510 --> 00:16:44,470
And I just know from memory that the escape keys key code is twenty seven.

220
00:16:44,470 --> 00:16:48,860
So only if that's the case then in the if block just closed the modal.

221
00:16:48,870 --> 00:16:53,930
So this dot close the modal parentheses to call it.

222
00:16:54,210 --> 00:16:56,580
Let's go ahead and save this.

223
00:16:56,580 --> 00:16:58,330
Back in the browser I will refresh.

224
00:16:58,350 --> 00:17:05,650
So I have fresh event listeners and if I open up the model and then press escape on my keyboard.

225
00:17:05,850 --> 00:17:07,210
Perfect.

226
00:17:07,320 --> 00:17:11,970
At this point the user experience of our modal feature is complete.

227
00:17:11,970 --> 00:17:18,060
However if we think about it when the user first comes to the page there's a decent chance they might

228
00:17:18,060 --> 00:17:19,790
never open the modal.

229
00:17:19,860 --> 00:17:26,610
So with that in mind does it really make sense to force the visitor to download all of the modal javascript

230
00:17:27,000 --> 00:17:30,590
if they're never even going to click on the button to see the modal.

231
00:17:30,600 --> 00:17:37,200
I think it would be better for performance if the modal javascript lived in a separate file that's not

232
00:17:37,200 --> 00:17:44,550
part of our overall bundle and then only if someone clicks on a button to open the modal well then it

233
00:17:44,550 --> 00:17:49,930
will just take a few milliseconds to load that JavaScript in and then we can open the modal.

234
00:17:50,040 --> 00:17:55,890
Well what I just described splitting code out like that that is made possible by Web pack.

235
00:17:56,250 --> 00:18:01,080
In my opinion it's actually one of the coolest and most powerful features that web park offers to us

236
00:18:01,500 --> 00:18:07,450
and it's relatively simple to set up considering the huge performance benefits it can offer us.

237
00:18:07,470 --> 00:18:13,130
I'm very excited to set this up with you and it's exactly what we're going to work on in the next lesson.

238
00:18:13,320 --> 00:18:16,160
So let's keep things rolling and I'll see you then.
