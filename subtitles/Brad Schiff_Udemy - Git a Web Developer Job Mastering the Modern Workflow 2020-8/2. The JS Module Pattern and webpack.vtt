WEBVTT
1
00:00:02.320 --> 00:00:03.570
Hello everyone.

2
00:00:03.660 --> 00:00:10.480
In this lesson we are going to learn how to split our javascript up into multiple files so that we can

3
00:00:10.480 --> 00:00:12.640
stay super organized.

4
00:00:12.670 --> 00:00:13.960
Let's jump into the action.

5
00:00:13.990 --> 00:00:21.420
So right now I want you to open up your main JavaScript file so that lives in app Assets Scripts.

6
00:00:21.460 --> 00:00:25.210
So app dot J.S. let's give ourselves a goal.

7
00:00:25.300 --> 00:00:30.070
So we have this constructor function named person and then we're using it twice.

8
00:00:30.070 --> 00:00:35.650
Right here we're creating a new instance of person saving as John and then here we're creating a new

9
00:00:35.650 --> 00:00:38.740
instance of person and saving as Jane.

10
00:00:38.770 --> 00:00:43.660
So we can look at these four lines of code and they immediately make sense.

11
00:00:43.660 --> 00:00:49.120
Now in terms of organization wouldn't it be nice if the blueprint or this constructor function or this

12
00:00:49.120 --> 00:00:53.260
class could be tucked away into its own separate file.

13
00:00:53.500 --> 00:00:56.110
Well setting that up is actually very simple.

14
00:00:56.110 --> 00:01:03.060
So right now do this with me select this function the person function so highlight it and then cut it

15
00:01:03.060 --> 00:01:05.680
into your clipboard.

16
00:01:05.690 --> 00:01:09.460
All right now let's go create a brand new file the paste that code into.

17
00:01:09.860 --> 00:01:14.720
So within our scripts folder let's create a new sub folder.

18
00:01:14.780 --> 00:01:21.110
So right click on the scripts folder and choose New Folder and let's name this new folder modules we

19
00:01:21.110 --> 00:01:25.250
could name it anything but let's choose this so you and I are on the same page.

20
00:01:25.980 --> 00:01:26.330
OK.

21
00:01:26.330 --> 00:01:31.310
Now through the remainder of this course anytime we create a new feature using JavaScript.

22
00:01:31.790 --> 00:01:37.270
Well each new feature should have its own new separate file in this modules folder.

23
00:01:37.440 --> 00:01:37.640
Right.

24
00:01:37.640 --> 00:01:42.410
We want to continue this trend of each file having a single responsibility.

25
00:01:42.500 --> 00:01:45.200
So let's do this within the modules folder.

26
00:01:45.260 --> 00:01:54.600
Let's right click and choose new file and let's name the new file person dot j x within the new file

27
00:01:54.610 --> 00:02:00.320
go ahead and paste in your clipboard now at the very bottom of this file.

28
00:02:00.330 --> 00:02:06.200
So even after this closing curly bracket was dropped down to a new line and type this out with me.

29
00:02:06.360 --> 00:02:15.960
Export default person so export default allows us to choose what this file will export.

30
00:02:16.000 --> 00:02:20.930
If another file tries to import this file so then this final word here person.

31
00:02:20.950 --> 00:02:26.860
This just matches what we want to export write our function that has that matching name of person.

32
00:02:26.890 --> 00:02:31.570
So this function is what will be used if another file imports this file.

33
00:02:31.570 --> 00:02:37.200
Let's go ahead and save this and then jump back into our app dot J.S. file.

34
00:02:37.300 --> 00:02:43.000
Let's scroll to the very top of app dot J.S. and maybe right after this first line let's add a new line

35
00:02:43.030 --> 00:02:48.630
and say import person from.

36
00:02:48.830 --> 00:02:50.180
And then we give it a file path.

37
00:02:50.180 --> 00:02:58.460
So quotes dot slash to start in the current directory and then go into the modules directory Slash.

38
00:02:58.460 --> 00:03:03.130
And then just grab the file named person you could include the DOT J.

39
00:03:03.140 --> 00:03:06.490
Yes but it's actually not necessary.

40
00:03:06.530 --> 00:03:06.940
OK.

41
00:03:06.950 --> 00:03:12.380
And this line of code will take whatever was being exported from this file and make it available in

42
00:03:12.380 --> 00:03:14.540
this file from this name right.

43
00:03:14.610 --> 00:03:16.180
Uppercase person.

44
00:03:16.220 --> 00:03:22.730
This means that even though our blueprint for what a person should be no longer lives in this file this

45
00:03:22.730 --> 00:03:25.210
code still makes perfect sense.

46
00:03:25.400 --> 00:03:25.660
Right.

47
00:03:25.670 --> 00:03:29.460
Our person blueprint is made available by importing this file.

48
00:03:29.600 --> 00:03:35.270
So if we go ahead and save this file actually to make sure it's working let's change John Doe's favorite

49
00:03:35.270 --> 00:03:36.560
color to red.

50
00:03:38.150 --> 00:03:41.960
And now if we save this back in the browser.

51
00:03:41.960 --> 00:03:42.380
Cool.

52
00:03:42.530 --> 00:03:42.910
Hello.

53
00:03:42.920 --> 00:03:46.580
My name is John Doe and my favorite color is red.

54
00:03:46.580 --> 00:03:48.980
At this point let's change gears.

55
00:03:48.980 --> 00:03:55.190
So back in your text editor we've successfully learned how to split javascript code into separate files

56
00:03:55.670 --> 00:03:57.620
so we can cross that off our list.

57
00:03:57.650 --> 00:04:04.460
Now what I want to show you is an alternate way to create a blueprint to show you what I mean.

58
00:04:04.470 --> 00:04:08.260
I want you to jump back into our person dot J.S. file.

59
00:04:08.520 --> 00:04:13.390
So we have this person function and we can call this a constructor function.

60
00:04:13.590 --> 00:04:17.480
It is our blueprint for what a person object should be.

61
00:04:17.490 --> 00:04:24.470
However in JavaScript there are multiple ways to create a quote blueprint for an object.

62
00:04:24.480 --> 00:04:28.330
So this traditional constructor function is one way of doing it.

63
00:04:28.440 --> 00:04:35.070
Right now I want to show you another way of creating a blueprint that is known as class syntax.

64
00:04:35.070 --> 00:04:38.700
So within person dot J Yes we're going to delete this function.

65
00:04:38.700 --> 00:04:40.420
We can keep the export line.

66
00:04:40.470 --> 00:04:46.710
But before we delete this function let's copy the console dot log line into our clipboard to save us

67
00:04:46.710 --> 00:04:48.030
a good amount of typing.

68
00:04:48.060 --> 00:04:52.190
So just select this entire console dot log line until the very end.

69
00:04:52.200 --> 00:04:53.740
Copy that in your clipboard.

70
00:04:54.320 --> 00:05:01.980
OK with that copy Let's delete this entire function and we're going to recreate it using class syntax.

71
00:05:01.980 --> 00:05:09.180
If you've ever worked with a different programming language before like C++ or Java or BHP then you

72
00:05:09.180 --> 00:05:12.220
are familiar with the idea of a class right.

73
00:05:12.240 --> 00:05:14.080
It's a blueprint for an object.

74
00:05:14.100 --> 00:05:21.240
So in Javascript we can just say class and then the name of the class let's say person and then curly

75
00:05:21.240 --> 00:05:29.910
brackets within the curly brackets we want to provide it a constructor so he's say constructor parentheses

76
00:05:29.940 --> 00:05:34.540
curly brackets let's dropdown in between those curly brackets.

77
00:05:34.770 --> 00:05:38.860
Now within a class constructor is a reserved or special word.

78
00:05:38.970 --> 00:05:44.720
So javascript will know to call the constructor when a new object is created using our class.

79
00:05:44.790 --> 00:05:50.010
Now within the parentheses for constructor this is where we include our parameters.

80
00:05:50.040 --> 00:05:54.810
So this is where we would include name comma favorite color.

81
00:05:55.700 --> 00:05:56.100
OK.

82
00:05:56.100 --> 00:06:02.430
Now within the constructor curly brackets this is where we are free to create properties so we can say

83
00:06:02.970 --> 00:06:12.840
this dot name equals name and then in the new line we could say this dot favorite color equals favorite

84
00:06:13.020 --> 00:06:13.530
color.

85
00:06:14.280 --> 00:06:17.130
So the constructor is where you receive incoming values.

86
00:06:17.130 --> 00:06:17.370
Right.

87
00:06:17.370 --> 00:06:22.710
If we called the person class and said create a new person with the name of John Doe and then we also

88
00:06:22.710 --> 00:06:28.230
passed into a favorite color of red it's the constructors job to receive those values and perhaps do

89
00:06:28.230 --> 00:06:31.840
something interesting with them like store them at properties.

90
00:06:31.940 --> 00:06:32.220
OK.

91
00:06:32.250 --> 00:06:38.730
Now after the closing curly bracket for our constructor but still within the overall closing curly bracket

92
00:06:38.730 --> 00:06:39.860
for our class.

93
00:06:39.870 --> 00:06:41.770
So right where the cursor is blinking.

94
00:06:41.880 --> 00:06:44.280
This is where we are free to add a method.

95
00:06:44.280 --> 00:06:50.480
Now when we're using class syntax we don't need to say this dot and then a method name with class syntax

96
00:06:50.490 --> 00:06:55.620
you can simply just type the method name so you can actually just say greet.

97
00:06:55.820 --> 00:06:56.030
Right.

98
00:06:56.040 --> 00:06:57.840
That's the name of our method that we want.

99
00:06:57.840 --> 00:07:03.780
So Greek parentheses curly brackets and then within those curly brackets this is where you can paste

100
00:07:03.780 --> 00:07:07.450
back in your clipboard and that's it.

101
00:07:07.460 --> 00:07:11.510
We just created a blueprint using the class syntax.

102
00:07:11.510 --> 00:07:17.780
Now I do want to point out that technically behind the scenes javascript is still not using classes

103
00:07:17.810 --> 00:07:18.040
right.

104
00:07:18.050 --> 00:07:20.510
It's not using classical inheritance.

105
00:07:20.720 --> 00:07:25.720
Behind the scenes the guts of JavaScript are still running based on prototypes.

106
00:07:25.760 --> 00:07:31.970
However a few years ago javascript added the class syntax which is just a bit of syntactic sugar so

107
00:07:31.970 --> 00:07:36.850
that if you're already familiar with the idea of a class you can go ahead and use that in JavaScript.

108
00:07:36.850 --> 00:07:43.160
Now let's go ahead and save this file and then let's jump back into our app file to make sure things

109
00:07:43.160 --> 00:07:44.010
are working.

110
00:07:44.090 --> 00:07:48.790
So maybe change John Doe's favorite color to purple.

111
00:07:49.150 --> 00:07:52.540
Let's go ahead and save that as well and then back in the browser.

112
00:07:52.570 --> 00:07:52.980
Cool.

113
00:07:53.420 --> 00:07:57.800
Hello my name is John Doe and my favorite color is purple.

114
00:07:57.800 --> 00:08:01.890
Now while we're talking about classes I want to show you one of the coolest features.

115
00:08:01.970 --> 00:08:03.580
So let's jump back into apt.

116
00:08:03.640 --> 00:08:07.910
J.S. and classes make inheritance a piece of cake.

117
00:08:08.210 --> 00:08:10.670
But what in the world does inheritance.

118
00:08:10.670 --> 00:08:18.590
Well let's imagine that John is a baby and Jane is an adult now both a baby and an adult are both considered

119
00:08:18.620 --> 00:08:19.880
a person.

120
00:08:20.040 --> 00:08:20.290
Right.

121
00:08:20.300 --> 00:08:24.880
Both babies and adults have names and they can both have a favorite color.

122
00:08:24.980 --> 00:08:31.760
But what if we wanted to create a new class named adult and we want the adult class to have all the

123
00:08:31.760 --> 00:08:33.930
same abilities of the Person class.

124
00:08:34.040 --> 00:08:37.690
But maybe we want to add a new method named pay taxes.

125
00:08:37.820 --> 00:08:43.190
Right the only adult object should have access to and babies are just the generic person class should

126
00:08:43.190 --> 00:08:45.650
not have access to pay taxes.

127
00:08:45.650 --> 00:08:49.880
Well check this out since this file is importing the person class.

128
00:08:49.880 --> 00:08:50.960
We can leverage it.

129
00:08:50.960 --> 00:08:53.880
Check this out we can just say new class.

130
00:08:53.900 --> 00:08:54.800
Let's name it.

131
00:08:54.920 --> 00:09:02.930
Adult and then before we type in curly brackets we can say extends Person.

132
00:09:02.930 --> 00:09:06.050
And now add the curly brackets.

133
00:09:06.180 --> 00:09:13.110
So this is going to create a new class named adult and it's going to inherit everything from the Person

134
00:09:13.110 --> 00:09:14.020
class.

135
00:09:14.070 --> 00:09:16.170
This avoids a lot of duplication.

136
00:09:16.230 --> 00:09:22.030
So we don't need to re spell out the functionality of receiving the name and favorite color properties.

137
00:09:22.170 --> 00:09:25.310
We don't need to redefine the Greek method.

138
00:09:25.560 --> 00:09:29.260
The adult class just automatically gets access to all of that.

139
00:09:29.400 --> 00:09:35.610
And then if we want to add a new method that only adults should have pay taxes well within these curly

140
00:09:35.610 --> 00:09:42.960
brackets we can say pay taxes parentheses curly brackets let's drop down inside those curly brackets

141
00:09:43.680 --> 00:09:47.480
and we could say that this method should just console log.

142
00:09:47.950 --> 00:09:50.700
Let's output a message that begins with the person's names.

143
00:09:50.730 --> 00:09:55.620
This dot name plus a string of text at a space in there.

144
00:09:55.740 --> 00:09:59.280
Now owes zero taxes

145
00:10:01.860 --> 00:10:02.130
OK.

146
00:10:02.130 --> 00:10:06.030
Now let's test this out So John can remain just a person.

147
00:10:06.090 --> 00:10:11.600
But let's set things up so that Jane is a new instance of the adult class.

148
00:10:11.610 --> 00:10:15.870
So change this person to adult.

149
00:10:15.870 --> 00:10:18.850
So her name is still Jane Smith her favorite color is still green.

150
00:10:18.870 --> 00:10:24.360
We can still go ahead and let her call the green method that's being inherited from the Person class

151
00:10:24.390 --> 00:10:30.010
but maybe right below that let's say Jane dot pay taxes.

152
00:10:31.050 --> 00:10:32.670
Let's go ahead and save this.

153
00:10:32.670 --> 00:10:34.680
And back in the browser.

154
00:10:34.680 --> 00:10:35.340
Perfect.

155
00:10:35.340 --> 00:10:39.560
So here we see the hello message from John the hello message from Jane.

156
00:10:39.630 --> 00:10:44.490
And then we also see Jane Smith now owes zero taxes.

157
00:10:44.580 --> 00:10:44.930
Cool.

158
00:10:45.150 --> 00:10:51.240
So not only does the class syntax maybe feel a bit more familiar to us if we've used another language

159
00:10:51.240 --> 00:10:57.390
before but it also makes borrowing functionality from other classes a piece of cake right.

160
00:10:57.390 --> 00:11:01.320
It makes inheritance very easy to set up and work with.

161
00:11:01.320 --> 00:11:07.020
And that's actually going to bring this lesson to a close now really quickly I want to thank you for

162
00:11:07.020 --> 00:11:12.420
powering through the last several lessons we've been on a bit of a hypothetical streak right.

163
00:11:12.450 --> 00:11:18.810
So our object oriented programming lesson used hypothetical examples our separate file person module

164
00:11:18.810 --> 00:11:24.710
was hypothetical and our class syntax example was also for a hypothetical object.

165
00:11:24.720 --> 00:11:30.930
Well don't worry because everything from here on out is going to be one hundred percent practical.

166
00:11:30.960 --> 00:11:34.360
We've spent the time to take our javascript game to another level.

167
00:11:34.470 --> 00:11:40.440
And now we are ready to finally get back to finishing our travel Web site together to be more specific

168
00:11:40.530 --> 00:11:41.730
in our next lesson.

169
00:11:41.760 --> 00:11:45.940
We will work on adding the interactive menu for small screens.

170
00:11:45.960 --> 00:11:47.010
This should be a lot of fun.

171
00:11:47.010 --> 00:11:51.420
We are going to get to apply everything we've just learned from the last several lessons.

172
00:11:51.420 --> 00:11:54.000
It's gonna be nice to flex our javascript muscles a bit.

173
00:11:54.360 --> 00:11:58.110
Let's keep rolling along and I will see you in the next lesson.
