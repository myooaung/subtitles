1
00:00:02,380 --> 00:00:03,540
Hello everyone.

2
00:00:03,700 --> 00:00:07,180
In this video we are going to pick up right where we left off.

3
00:00:07,270 --> 00:00:12,700
We just have a few more details to take care of in terms of improving the performance or efficiency

4
00:00:13,030 --> 00:00:15,650
of our Reveal on scroll feature.

5
00:00:15,760 --> 00:00:21,710
Right now let's set things up so that if you're nowhere near an item that needs to be revealed.

6
00:00:21,780 --> 00:00:27,640
So if I'm way up at the top of the page here and an item that needs to be revealed if it's top edge

7
00:00:27,880 --> 00:00:32,560
has not even crossed the bottom edge of the browser's viewport yet.

8
00:00:33,010 --> 00:00:40,060
Well if that hasn't happened yet then let's not bother wasting resources calculating anything else.

9
00:00:40,060 --> 00:00:41,430
Let me show you what I mean.

10
00:00:41,710 --> 00:00:43,270
Back in our text editor.

11
00:00:43,270 --> 00:00:47,130
Find your calculator if scroll to method.

12
00:00:47,350 --> 00:00:52,030
And I want you to select or highlight the entire contents of this method.

13
00:00:52,090 --> 00:00:56,050
I want us to go ahead and cut this into our clipboard.

14
00:00:56,050 --> 00:01:02,310
So right now we've just got a completely empty calculated scroll to method and in the body of it.

15
00:01:02,350 --> 00:01:04,500
Let's set up an if statement.

16
00:01:04,600 --> 00:01:15,940
So if parentheses curly brackets for the condition let's say only if window dot scroll y.

17
00:01:16,000 --> 00:01:21,060
So this is measured in pixels and it's how far down you've scrolled from the very top of the page.

18
00:01:21,130 --> 00:01:27,370
Only if that plus window dot inner height.

19
00:01:27,370 --> 00:01:35,440
Only if these two combined are greater than the current elements top edge and we're talking about its

20
00:01:35,440 --> 00:01:41,200
top edge not in relation to the viewport but in relation to the total page height.

21
00:01:41,200 --> 00:01:44,300
So we would not use get bounding client rect here.

22
00:01:44,350 --> 00:01:48,190
Instead we can just say element offset top.

23
00:01:49,090 --> 00:01:55,620
So only if this is true then in the if curly brackets just paste back in your clipboard OK.

24
00:01:55,630 --> 00:01:58,870
Let's go ahead and save this and then back in the browser.

25
00:01:58,870 --> 00:02:03,410
Be sure to manually refresh now notice as I'm scrolling.

26
00:02:03,980 --> 00:02:10,530
We do see scroll function ran but we don't see any element was calculated messages.

27
00:02:10,550 --> 00:02:20,360
However once we scroll to the point where the top edge of an element has crossed the very bottom threshold

28
00:02:20,360 --> 00:02:24,620
of the browser but is not up high enough to actually be revealed yet.

29
00:02:24,870 --> 00:02:29,680
Well once that happens then you can see we are calculating if it should be revealed or not.

30
00:02:29,690 --> 00:02:29,930
Right.

31
00:02:29,930 --> 00:02:37,500
We see these element was calculated messages so we can continue to scroll until it's revealed perfect

32
00:02:38,250 --> 00:02:44,730
at this point we only have one more efficiency improvement that I want to make back in our text editor.

33
00:02:44,730 --> 00:02:49,860
I want to draw your attention to window dot inner height so this measures the height of the current

34
00:02:49,860 --> 00:02:52,910
browser viewport in pixels at this point.

35
00:02:52,910 --> 00:03:00,000
Not only are we using it twice within this function but remember this function runs every time we calculate

36
00:03:00,030 --> 00:03:01,740
an individual item.

37
00:03:01,890 --> 00:03:07,740
So it's probably not the most efficient thing to continually ask the browser how tall are you how tall

38
00:03:07,740 --> 00:03:09,090
are you how tall are you right.

39
00:03:09,750 --> 00:03:14,920
Instead we can save its answer in memory with one of our own properties.

40
00:03:14,940 --> 00:03:20,040
So here's what I would do up at the very top of our file within our constructor.

41
00:03:20,040 --> 00:03:29,300
I would just add a new line let's say this stock browser height and I would just set it to equal window

42
00:03:29,300 --> 00:03:32,080
dot inner height.

43
00:03:32,150 --> 00:03:35,970
Now down in our calculate curve we can just reference our property here.

44
00:03:36,110 --> 00:03:41,300
This way we're not continually asking the browser or the DOM for that extra little bit of information

45
00:03:41,950 --> 00:03:44,950
to back down in calculating scrolled to.

46
00:03:45,230 --> 00:03:53,420
Let's replace this first instance of window dot inner height instead with this dot browser typed.

47
00:03:53,720 --> 00:03:59,590
And then here as well let's replace window to enter height with this dot browser.

48
00:03:59,600 --> 00:04:00,700
Right.

49
00:04:00,860 --> 00:04:02,700
Let's go ahead and save this.

50
00:04:02,750 --> 00:04:08,530
I will refresh in the browser let's test to make sure things are still working.

51
00:04:08,710 --> 00:04:10,900
So things still work properly.

52
00:04:10,930 --> 00:04:18,130
However now that we're not asking the browser for its height in real time if I refresh and then make

53
00:04:18,130 --> 00:04:26,830
the browser window a lot shorter you'll notice that our calculations should be off yes see other items

54
00:04:26,830 --> 00:04:31,960
are already revealed we can easily get around this issue.

55
00:04:32,090 --> 00:04:37,850
So if we're going to reference our property instead of actually asking the browser for its height we

56
00:04:37,850 --> 00:04:40,010
just need to babysit this property a bit.

57
00:04:40,550 --> 00:04:43,770
Let me show you what I would do within our events method.

58
00:04:43,970 --> 00:04:49,690
Let's just set up a new event that listens for when the browser window gets resized.

59
00:04:49,700 --> 00:05:00,830
So after this line within our events method I would just say window dot ad event listener type of event

60
00:05:00,830 --> 00:05:05,550
that we're listening for is resize comma.

61
00:05:05,570 --> 00:05:09,280
Now we could include an anonymous or aero function right here.

62
00:05:09,290 --> 00:05:15,560
However I do want to let you know that as you resize your web browser window your web browser is not

63
00:05:15,560 --> 00:05:17,050
very efficient about it.

64
00:05:17,090 --> 00:05:24,140
It's going to fire this resize event many many times every web browser is slightly different but it

65
00:05:24,140 --> 00:05:30,290
seems like it almost calls it every pixel or every few milliseconds as you're dragging and resizing.

66
00:05:30,410 --> 00:05:32,420
This is not what we want right.

67
00:05:32,420 --> 00:05:38,640
We really only need to update our browser height value at the end of your resizing action.

68
00:05:38,690 --> 00:05:40,150
Just that one time.

69
00:05:40,190 --> 00:05:43,430
So luckily load dash can save the day here.

70
00:05:43,430 --> 00:05:50,390
Now instead of using throttle we're going to use a load Ash tool named D bounce up at the very top of

71
00:05:50,390 --> 00:05:50,900
our file.

72
00:05:50,900 --> 00:06:04,200
Do this with me say import D bounce from quotes and then it's in the low dash library slash D bounce.

73
00:06:04,200 --> 00:06:06,410
So what in the world is d bounce.

74
00:06:06,600 --> 00:06:10,080
It's similar to throttle but there's an important difference.

75
00:06:10,080 --> 00:06:17,790
So with throttle we wanted to run our function every 200 milliseconds continually right.

76
00:06:17,820 --> 00:06:22,040
As we're scrolling so throttling makes sense for scrolling.

77
00:06:22,110 --> 00:06:28,200
However when we are resizing the browser window we don't need to do anything during the middle of this

78
00:06:28,260 --> 00:06:29,420
action.

79
00:06:29,520 --> 00:06:36,180
We only need to do something once after we've finally stopped resizing so that's what D bounce lets

80
00:06:36,180 --> 00:06:36,940
us do.

81
00:06:36,960 --> 00:06:43,470
We can give it a value maybe 200 milliseconds or 300 milliseconds and the browser is only going to call

82
00:06:43,470 --> 00:06:45,090
our function once.

83
00:06:45,210 --> 00:06:50,370
After that many milliseconds have passed from your last iteration of performing that.

84
00:06:50,490 --> 00:06:53,180
So if I'm resizing I'm resizing and then I stop.

85
00:06:53,370 --> 00:06:59,850
But I only wait 50 milliseconds and keep resizing the browser is not going to actually call our function

86
00:06:59,880 --> 00:07:06,140
r d bounced function until you stop resizing and wait that many milliseconds.

87
00:07:06,150 --> 00:07:09,300
This is excellent for performance.

88
00:07:09,300 --> 00:07:19,290
So within our events method for resize for the second argument let's just say D bounce parentheses to

89
00:07:19,290 --> 00:07:19,690
call it.

90
00:07:19,710 --> 00:07:26,220
We're gonna give it to arguments for the first argument let's give it an arrow function so parentheses

91
00:07:26,310 --> 00:07:36,760
arrow symbol curly brackets let's drop down just as a test we can say console dot log resize just ran.

92
00:07:36,990 --> 00:07:38,760
So that's just for testing purposes.

93
00:07:38,760 --> 00:07:46,560
What we actually want to do is babysit this browser hype property so we can just say this dot browser

94
00:07:46,710 --> 00:07:52,560
height equals and we just want to update it so we can grab window dot inner height.

95
00:07:53,550 --> 00:07:53,870
OK.

96
00:07:53,910 --> 00:07:59,630
This is important after this closing curly bracket here for our arrow function we need to add a comma

97
00:08:00,180 --> 00:08:02,910
right because we want to give the balance a second argument.

98
00:08:02,940 --> 00:08:05,830
This is how many milliseconds we want to wait.

99
00:08:05,880 --> 00:08:06,710
Totally up to you.

100
00:08:06,720 --> 00:08:07,770
But why don't we wait.

101
00:08:07,800 --> 00:08:10,810
Three hundred and thirty three milliseconds.

102
00:08:11,100 --> 00:08:14,300
So let's go ahead and save this.

103
00:08:14,300 --> 00:08:16,820
And now back in the browser I will refresh.

104
00:08:16,890 --> 00:08:23,730
Now as I'm resizing my browser if I never stop resizing if I just continue resizing it nothing ever

105
00:08:23,730 --> 00:08:29,820
happens I'm not fast enough but if I stopped resizing for only 50 milliseconds nothing would happen

106
00:08:30,710 --> 00:08:36,450
but if I actually stopped resizing and then wait three hundred and thirty three milliseconds perfect

107
00:08:36,840 --> 00:08:41,070
only then do we see in the console resize just ran.

108
00:08:41,310 --> 00:08:47,270
So this way I can start out with the browser windows super small let me refresh but if I resize it

109
00:08:50,440 --> 00:08:57,360
and then test out our reveal and scroll functionality you can see our calculations are still correct.

110
00:08:57,430 --> 00:09:00,710
Only now we're not bothering to ask the browser for its height.

111
00:09:00,850 --> 00:09:02,760
Over and over and over again.

112
00:09:02,980 --> 00:09:08,860
Now before we switch gears and learn how to make our Reveal on scroll module recyclable so that we can

113
00:09:08,860 --> 00:09:11,620
use it on our testimonials as well.

114
00:09:11,650 --> 00:09:17,740
I first want to mention that technically we could improve the efficiency of our Reveal feature even

115
00:09:17,740 --> 00:09:23,420
further by storing our elements top offset in memory right.

116
00:09:23,440 --> 00:09:28,080
Instead of asking the browser for their position each and every scroll.

117
00:09:28,270 --> 00:09:32,770
However we would need to do quite a bit of babysitting of those values.

118
00:09:32,770 --> 00:09:39,430
For example if any javascript added new content to the page well that could push everything down further

119
00:09:39,700 --> 00:09:47,050
and then we would need to update their offset values or if we lazy loaded in images or if anything happened

120
00:09:47,260 --> 00:09:50,930
that changed the height of the page and pushed things down.

121
00:09:51,100 --> 00:09:54,170
You would need to continually babysit these values.

122
00:09:54,310 --> 00:09:57,300
So yes you could improve performance even further.

123
00:09:57,430 --> 00:10:03,810
The idea is anytime you can avoid asking the browser for fresh data that's a performance win.

124
00:10:03,940 --> 00:10:09,460
But in this case I think that would require a lot of attention to detail to make sure that the offsets

125
00:10:09,460 --> 00:10:11,800
were always updated and correct.

126
00:10:11,800 --> 00:10:17,180
So overall I am happy with our current setup and its performance and efficiency OK.

127
00:10:17,320 --> 00:10:23,260
At this point let's go ahead and make our review module recyclable and apply it to these testimonials

128
00:10:23,260 --> 00:10:24,130
as well.

129
00:10:24,210 --> 00:10:30,310
Right so we would want them to be invisible and then maybe once you scroll down this far then they would

130
00:10:30,550 --> 00:10:32,530
gradually fade into view.

131
00:10:32,530 --> 00:10:35,040
Let me show you how I would set that up.

132
00:10:35,110 --> 00:10:37,030
So back in our text editor.

133
00:10:37,030 --> 00:10:44,450
Currently we are in our Reveal on scroll file but I want you to jump into our main app dot J S file.

134
00:10:44,530 --> 00:10:47,730
Write the file that imports all of our other files.

135
00:10:47,920 --> 00:10:54,040
So this is where we import the reveal on scroll class and then we've created a new instance of it.

136
00:10:54,040 --> 00:10:57,820
Well let's actually create two new instances.

137
00:10:57,820 --> 00:11:03,520
You could make a new variable names but in this case we don't need to store this in a variable so we

138
00:11:03,520 --> 00:11:07,480
can get rid of the equal sign in the left hand side like this.

139
00:11:07,600 --> 00:11:13,410
So let's create one new instance of the reveal on scroll class and in these parentheses.

140
00:11:13,510 --> 00:11:16,060
Let's give it a dom selector.

141
00:11:16,060 --> 00:11:23,110
Let's give it a selector that selects these feature items and then we can create another new instance

142
00:11:23,110 --> 00:11:27,130
of that same class and give it a selector that selects these.

143
00:11:27,190 --> 00:11:30,910
Then we just need to go into the class and make it flexible.

144
00:11:30,910 --> 00:11:32,320
Let me show you what I'm talking about.

145
00:11:33,070 --> 00:11:38,800
So within these parentheses I would say document dot query selector.

146
00:11:38,800 --> 00:11:42,360
All quotes and then select the class.

147
00:11:42,370 --> 00:11:45,420
So a dot of feature item.

148
00:11:45,510 --> 00:11:45,790
Okay.

149
00:11:45,820 --> 00:11:49,380
And then let's just copy and paste and duplicate this line of code.

150
00:11:49,540 --> 00:11:56,600
And then on this copy we want the CSF selector that would grab these three testimonial boxes.

151
00:11:56,920 --> 00:12:00,940
So just change the selector to dot testimonial.

152
00:12:01,660 --> 00:12:08,140
Okay let's go ahead and save this file and now we just need to go into our Reveal on scroll module and

153
00:12:08,230 --> 00:12:14,470
in the constructor constructor has parentheses where we can have a parameter to receive that incoming

154
00:12:14,500 --> 00:12:21,110
argument we can name our parameter anything but let's name it ls short for elements.

155
00:12:21,170 --> 00:12:27,550
Okay then our first line in the constructor items to reveal instead of setting this to equal a selector.

156
00:12:27,550 --> 00:12:30,870
This is where we would just set it to equal that parameter.

157
00:12:30,970 --> 00:12:36,790
The incoming argument value let's go ahead and save this and then back in the browser

158
00:12:40,910 --> 00:12:48,410
our feature still work and now the testimonials work while we're at it let's make our module even more

159
00:12:48,410 --> 00:12:49,630
flexible.

160
00:12:49,790 --> 00:12:57,640
So down here within our calculate if scrolled to method remember we set the threshold to seventy five.

161
00:12:57,680 --> 00:13:03,620
To refresh your memory we can think of this number as a percentage and it means that once an element

162
00:13:03,620 --> 00:13:10,610
has been scrolled to so it crosses the bottom 25 percent of the browser viewport well that's when the

163
00:13:10,610 --> 00:13:13,790
element should begin to fade or appear in.

164
00:13:13,790 --> 00:13:18,230
So if you set it to 60 percent then the element wouldn't appear until you'd scrolled to maybe right

165
00:13:18,230 --> 00:13:19,100
here.

166
00:13:19,100 --> 00:13:23,720
Obviously if you set it to 50 percent then you would have to scroll an element halfway through your

167
00:13:23,720 --> 00:13:24,790
viewport height.

168
00:13:25,010 --> 00:13:25,790
So let's do this.

169
00:13:25,820 --> 00:13:33,250
Let's set things up so that back in app dot J.S. you could give 1 threshold number to feature item and

170
00:13:33,260 --> 00:13:36,190
then another threshold for testimonials.

171
00:13:36,200 --> 00:13:42,650
So on this first line for feature items in between the two closing parentheses you can add a comma and

172
00:13:42,650 --> 00:13:44,640
we can just have a second argument.

173
00:13:44,900 --> 00:13:52,400
So let's say for feature items we want it to be 75 but for testimonials maybe we want it to be 60.

174
00:13:52,490 --> 00:13:57,950
Let's save this and then back in reveal on scroll up in the constructor.

175
00:13:57,950 --> 00:14:06,130
We can just add a second parameter so comma after ls and then let's call it thresh hold percent.

176
00:14:06,600 --> 00:14:06,970
OK.

177
00:14:06,980 --> 00:14:10,770
Then within the body of the constructor let's save that as a property.

178
00:14:10,850 --> 00:14:17,210
This dot threshold percent equals the incoming value.

179
00:14:17,240 --> 00:14:20,070
So just thresh hold percent.

180
00:14:20,870 --> 00:14:21,370
Okay.

181
00:14:21,380 --> 00:14:30,290
And then down within our calculate if scrolled to method just remove the hardcoded 75 with this dot

182
00:14:30,770 --> 00:14:31,910
threshold.

183
00:14:31,910 --> 00:14:34,490
Percent let's save this.

184
00:14:34,490 --> 00:14:36,910
I will perform a manual refresh.

185
00:14:38,470 --> 00:14:38,780
Okay.

186
00:14:38,820 --> 00:14:44,610
So now the feature item should still fade in at the same time as before but testimonials should wait

187
00:14:44,700 --> 00:14:47,830
a little bit longer as you scroll to become visible.

188
00:14:48,830 --> 00:14:49,660
Cool.

189
00:14:49,760 --> 00:14:56,450
Hopefully at this point if we jump back into app dot J.S. you can see the benefit of creating a reusable

190
00:14:56,450 --> 00:14:58,620
class a blueprint.

191
00:14:58,760 --> 00:15:04,910
It allows you to set up your logic and functionality once but then you can leverage it multiple times

192
00:15:05,210 --> 00:15:09,050
and in different ways in different situations.

193
00:15:09,050 --> 00:15:09,630
Cool.

194
00:15:09,680 --> 00:15:14,480
Now before we bring this lesson to a close I do want to add one CSX effect.

195
00:15:14,960 --> 00:15:21,170
So instead of just fading in the opacity I think it would be cool if the elements sort of zoomed in

196
00:15:21,170 --> 00:15:22,290
or zoomed out right.

197
00:15:22,310 --> 00:15:26,850
If they sort of changed their size or scale as they faded into view.

198
00:15:27,020 --> 00:15:29,680
So let me show you how I would set that up.

199
00:15:29,690 --> 00:15:37,940
All we need to do is jump into our SS file that is named revealed dash item dot c SS and within the

200
00:15:37,940 --> 00:15:46,250
baseline styles here lets out a new property named transform and say that the scale should be 1 point

201
00:15:46,370 --> 00:15:48,710
1 5 by default.

202
00:15:48,710 --> 00:15:56,150
But then once an element is visible we can set it back to its natural size of just one transform scale

203
00:15:56,150 --> 00:16:03,470
1 and then to make sure that that value actually animates or transitions on this line we can just add

204
00:16:03,470 --> 00:16:10,670
a comma before the ending semicolon and say we also want to transition v transform property over the

205
00:16:10,670 --> 00:16:17,480
course of one and a half seconds and E's apt cool if you need to pause the video to type this out that's

206
00:16:17,480 --> 00:16:20,720
OK but let's go ahead and save this.

207
00:16:20,720 --> 00:16:24,980
And then again I will perform a manual refresh so that elements can fade in again.

208
00:16:26,390 --> 00:16:27,600
And let's test it out.

209
00:16:29,790 --> 00:16:30,300
Cool.

210
00:16:31,370 --> 00:16:36,600
Notice how they start out a bit larger and then they sort of zoom out into view.

211
00:16:36,620 --> 00:16:41,960
I think that looks nice and that's actually going to bring this lesson to a close.

212
00:16:41,960 --> 00:16:45,610
Looking ahead to our next lesson we will be changing gears a bit.

213
00:16:45,650 --> 00:16:50,710
We will be making a few enhancements to our header for larger screens right now.

214
00:16:50,720 --> 00:16:55,000
I will overlay footage of the finished product so you can see what I have in mind.

215
00:16:55,010 --> 00:17:01,160
But basically we will learn how to make our header bar sticky for desktop users and we will also learn

216
00:17:01,160 --> 00:17:06,160
how to highlight links in the header to correspond with the current section that is scrolled to and

217
00:17:06,160 --> 00:17:07,160
in view.

218
00:17:07,160 --> 00:17:09,580
These features should be a lot of fun to set up.

219
00:17:09,620 --> 00:17:13,460
Let's keep rolling along and I will see you in the next lesson.
