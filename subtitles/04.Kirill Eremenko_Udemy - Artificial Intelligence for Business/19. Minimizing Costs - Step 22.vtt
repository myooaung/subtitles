WEBVTT

00:00.840 --> 00:02.430
OK are you ready.

00:02.640 --> 00:03.690
Let's match this.

00:03.720 --> 00:09.450
So we're going to build our dequeue and model as you can see within a class and that's for the same

00:09.450 --> 00:10.950
reasons as before.

00:10.950 --> 00:16.560
That's because we want to be able to create easily several Dejuan objects that we would want to plug

00:16.620 --> 00:19.010
for different AI's on different servers.

00:19.110 --> 00:23.290
And again here I've highlighted the structure which is in three steps.

00:23.400 --> 00:29.880
First will introduce and initialize all the parameters and variables of the D-2 network and we'll do

00:29.880 --> 00:32.470
that of course within the init method.

00:32.550 --> 00:37.820
Then the second step will make a method that builds the memory and experience replay.

00:37.820 --> 00:43.660
You know the memory containing these transitions containing the current state the action played we won't

00:43.670 --> 00:44.270
receive.

00:44.420 --> 00:45.800
And the next date reached.

00:45.840 --> 00:52.740
And third step and final step will make the final method the most important one that will build two

00:52.740 --> 00:57.670
batches of 10 inputs and 10:38 by extracting 10 transitions.

00:57.690 --> 00:58.440
All right.

00:58.490 --> 01:04.950
So that's our plan of attack for the part 3 of this whole implementation implementing dequeue learning

01:05.130 --> 01:06.240
experience replay.

01:06.360 --> 01:08.990
And let's start right now with the first step.

01:09.000 --> 01:16.710
So as we understand the first step is to define all the parameters and variables of our dequeue in future

01:16.710 --> 01:22.570
model objects through the method and this method is going to take three arguments.

01:22.680 --> 01:27.330
The first one is going to be self of course because we're going to introduce all the variables of the

01:27.420 --> 01:29.580
object starting myself.

01:29.580 --> 01:36.400
Then remember here we have to input the variables which want to choose directly and easily the value

01:36.630 --> 01:43.800
when we create an object you know for different searches and when implementing the U.N. Well there are

01:43.800 --> 01:50.340
actually two parameters that are at the core of the algorithm which are first the maximum size of the

01:50.340 --> 01:51.130
memory.

01:51.210 --> 01:57.150
You know if you want to have some experience per play with a large size or smaller size Well you want

01:57.150 --> 02:03.310
to be able to change that easily by setting a max memory argument in the init method.

02:03.540 --> 02:09.240
And then the second important element and parameter is the discount factor in the computation of the

02:09.240 --> 02:10.600
toilet right here.

02:10.610 --> 02:15.460
You know that's the discount factor and you know if you're doing some hyper parameter Well you want

02:15.460 --> 02:22.650
to be able to test easily some different values and to do that the best way is to include that parameter

02:22.650 --> 02:23.790
in the init method.

02:23.960 --> 02:31.710
So let's do this first one we said is going to be the max memory so this is a normal name that I choose

02:31.710 --> 02:38.400
myself and by default we're going to say that they're equal to 100 which will be the maximum size of

02:38.400 --> 02:39.350
our memory.

02:39.480 --> 02:46.350
And then the discount factor which is a factor in that condition of the target and as DiVall value will

02:46.350 --> 02:48.100
give 4.9.

02:48.240 --> 02:49.170
All right.

02:49.170 --> 02:50.070
Perfect.

02:50.100 --> 02:52.270
And then Colleen and here we go.

02:52.290 --> 02:57.730
We are ready to define the variables of our future dequeue and model object.

02:57.840 --> 02:58.690
Okay.

02:58.770 --> 03:04.950
So there are going to be three object variables and actually to figure out what they're going to be.

03:04.950 --> 03:07.520
We can just look at the whole.

03:07.520 --> 03:09.190
Did you learn the algorithm.

03:09.300 --> 03:15.720
And of course what we have to look at is the first part that is initialization part because indeed how

03:15.720 --> 03:17.580
do we have to initialize this model.

03:17.700 --> 03:24.850
Well first we have to initialize the memory of the experience replay play as an empty list then we choose

03:24.850 --> 03:31.140
the maximum size we will have to initialize a maximum size object which is the maximum size of the memory.

03:31.260 --> 03:37.840
And then remember since we also have a discount factor Well it would be easier for us to create variables

03:37.860 --> 03:39.980
that will get this discount factor.

03:40.170 --> 03:41.430
OK so let's do this.

03:41.430 --> 03:46.770
We just have to follow this starting with the memory of the experience replay that we have to initialize

03:47.010 --> 03:48.530
as an analyst.

03:48.600 --> 03:55.770
And so we'll call that Vargo self that memory and to initialize that as mentalists.

03:55.860 --> 04:03.630
Well we're going to use the list function of Python which directly initialises that as an internist.

04:03.630 --> 04:04.560
All right.

04:04.560 --> 04:05.980
So that for the first day.

04:06.000 --> 04:09.340
Now let's see let's just follow that simply.

04:09.360 --> 04:15.330
The next step in this initialization first step is to choose a maximum size of the memory.

04:15.510 --> 04:21.930
So we actually already chose this maximum size because it is what will be given in this argument here.

04:22.110 --> 04:26.800
But remember we want to initialize all the object variables.

04:26.910 --> 04:28.550
So the second one.

04:28.550 --> 04:35.330
I'm introducing here and initialising is going to be as I choose to call it next memory.

04:35.670 --> 04:37.890
And that's going to be the maximum size of the memory.

04:37.980 --> 04:45.300
And so as we just said we're going to initialize this as the max memory value of the arguments provided

04:45.540 --> 04:47.720
when we created and objects.

04:48.060 --> 04:49.770
And so I'm basing this.

04:49.770 --> 04:55.920
And lastly the last one we have to initialize is of course the discount factor which would also have

04:55.920 --> 04:57.910
to introduce as an object variable.

04:58.050 --> 05:07.430
Ok so let's do this self discount which will be equal to of course the arguments provided in any method.

05:07.560 --> 05:10.440
So there we go basing them here.

05:10.650 --> 05:11.550
And perfect.

05:11.550 --> 05:19.560
We basically took care of this first big part of the learning algorithm initializing the memory and

05:19.560 --> 05:21.350
the maximum size of the memory.

05:21.600 --> 05:23.570
Perfect congratulation.

05:23.610 --> 05:29.370
Now we're going to move on to the second step of this to do an implementation which will be to make

05:29.370 --> 05:33.120
a method that builds the memory and experience replay.

05:33.120 --> 05:39.090
Basically that means that we'll have to make a method that will add the transitions into memory that

05:39.090 --> 05:44.730
we initialized here by making sure we never spend more than 100 transitions.

05:44.730 --> 05:51.660
So what will happen is that as soon as we go over 100 we'll delete the first element that is the first

05:51.990 --> 05:53.780
transition of the memory.

05:54.030 --> 05:56.340
So let's take care of all this in the next tutorial.

05:56.370 --> 05:57.830
And until then enjoy a.
