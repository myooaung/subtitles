WEBVTT

00:00.600 --> 00:06.510
All right here we go for the next step of the general framework which is always the same step that you

00:06.510 --> 00:11.500
have to do when building the environments after initializing all your variables.

00:11.530 --> 00:17.960
It is to make a method that updates the environment right after the plays in action.

00:18.000 --> 00:24.750
And so again I highlighted the whole structure inside this method that by the way I called a date and

00:24.980 --> 00:31.860
for date environment and remember all the section's titles in capital letters are the steps of the general

00:31.950 --> 00:38.100
AI framework which you have to follow for whatever environment you're building to solve whatever business

00:38.100 --> 00:44.340
problem with an AI and the titles and minimal is are only for our specific case study.

00:44.510 --> 00:45.230
Okay.

00:45.390 --> 00:48.500
And so speaking of our general AI framework.

00:48.510 --> 00:51.980
Well let's see what these next gen steps are.

00:52.140 --> 00:58.770
Well when I'm dating the environment right after the plays in action what you will always do first is

00:59.220 --> 01:05.030
get the reward then get the next date then get whether the game is over.

01:05.130 --> 01:08.420
And then scale the next date and return the next date.

01:08.520 --> 01:11.140
The reward and whether the game is over.

01:11.250 --> 01:17.400
These are the next steps of the general AI framework when updating the environment which you have to

01:17.400 --> 01:24.210
do right after introducing and initializing all the variables and parameters of your environment.

01:24.210 --> 01:27.530
And so now let's take care of the first step getting the reward.

01:27.630 --> 01:34.530
And now we're back into our specific case study because indeed to get the reward since the reward was

01:34.530 --> 01:39.450
defined remember by the difference between the energy spent by the surface cooling system when there

01:39.450 --> 01:46.780
is no AI and the energy spent by the AI when we had the AI Well here we go the first step would be indeed

01:46.800 --> 01:52.530
to compute the energy spent by the surface cooling system when there is no AI then we'll be able to

01:52.530 --> 01:53.460
get the reward.

01:53.490 --> 02:00.480
And finally we'll scale the reward as it is recommended to do in several research papers of deep reinforcement

02:00.480 --> 02:01.610
learning.

02:01.620 --> 02:02.050
All right.

02:02.070 --> 02:07.860
And before we tackle the first step here well let me explain the arguments that are entered here and

02:07.860 --> 02:09.570
this update function.

02:09.750 --> 02:14.950
Well the first argument is self of course because we are going to use many variables of the object.

02:15.030 --> 02:22.830
Then the second variable is the direction which is the direction of temperature change that our AI causes

02:23.010 --> 02:24.220
onto the server.

02:24.240 --> 02:29.710
So this will be equal to one if the AI heats up the server and equal to minus one.

02:29.730 --> 02:32.010
If the AI cools down the server.

02:32.130 --> 02:40.500
And that at a specific iteration then the next argument is of course the energy spent by the AI right

02:40.500 --> 02:48.190
after it plays the action and the last argument is the month we are in right now at that specific iteration.

02:48.260 --> 02:54.180
And now some of you might be wondering hey but Halcombe do we already have the energy spent by the AI

02:54.450 --> 02:56.070
and the direction of temperature change.

02:56.070 --> 03:02.960
That's because you have to understand that this update function is a function that will update the environment

03:03.390 --> 03:10.020
after the plays in action and after the AI plays an action will obviously we already have the energy

03:10.020 --> 03:12.290
spent by the ear and the direction.

03:12.450 --> 03:16.780
So you have to understand that we don't play the action inside this update function.

03:16.860 --> 03:19.720
We will play it at some point during the training.

03:19.800 --> 03:25.920
You know during each iteration of the training after which we'll get the energy spent by the AI because

03:25.920 --> 03:32.190
as soon as the AI AI plays an action it spends some energy onto the server and therefore will get the

03:32.190 --> 03:38.890
direction of usefully because we'll know if it's action heated up the environment or cooled it down.

03:39.150 --> 03:43.040
All right so that's the important thing to understand here and now that we all understand.

03:43.110 --> 03:46.880
Let's take care of the first step getting the reward and to do that.

03:46.890 --> 03:54.300
Well of course for us we have to compute the energy spent in this separate simulation when we have no

03:54.300 --> 04:00.740
AI energy spent by this alternative system that is the servers integrated cooling system.

04:00.900 --> 04:02.430
When indeed we have no AI.

04:02.610 --> 04:09.900
And that's why right now I'm going to initialize a new variable which is going to be the energy spent

04:10.320 --> 04:16.770
by this alternative cooling system when there is no AI and you have to understand that this is not a

04:16.770 --> 04:18.210
variable of the object.

04:18.210 --> 04:19.090
Why is that.

04:19.140 --> 04:23.650
Because we will only use this very well inside this update method.

04:23.910 --> 04:27.080
And that's the energy spent by the service cooling system.

04:27.120 --> 04:31.470
That is when we have no AI at that specific iteration.

04:31.470 --> 04:34.910
When we were updating the environment at a specific minute.

04:34.910 --> 04:35.690
All right.

04:35.730 --> 04:37.560
And so this energy no.

04:37.650 --> 04:43.320
Well first we'll have to initialize it and we'll initialize it to zero and then that's where we will

04:43.320 --> 04:47.760
compute it exactly you know get it's right value at this specific time.

04:47.760 --> 04:53.040
You know you have to understand that we're applying this update function at each iteration that is at

04:53.130 --> 04:54.140
each minute.

04:54.170 --> 05:00.730
Therefore each minute the service cooling system is going to apply some energy to change the temperature

05:00.730 --> 05:04.270
of the server and bring it back to the optimal range of temperature.

05:04.660 --> 05:09.040
And therefore what we have to do right now is consider two conditions.

05:09.040 --> 05:16.450
First if the temperature of this or when we have no AI is below the optimal range of temperature which

05:16.470 --> 05:21.310
negates the service cooling system we'll have to bring it back up to the lower bound of optimal range

05:21.310 --> 05:22.180
of temperature.

05:22.300 --> 05:28.840
And the other condition if the temperature of the server when we have no AI is above the optimal range

05:28.840 --> 05:34.180
of temperature which indicates a surface cooling system will have to bring it back down to the upper

05:34.180 --> 05:36.700
bound of the optimal range of temperature.

05:36.700 --> 05:42.400
All right so that's how we'll get the energy spent by this alternative system when we have no AI and

05:42.400 --> 05:46.330
therefore let's make these two conditions starting with the first one.

05:46.480 --> 05:49.790
If the temperature of the server.

05:49.930 --> 05:54.580
When we have no AI that is self that temperature no AI.

05:54.820 --> 06:02.140
Well if that temperature is lower than the lower bound of the optimal range of temperature which will

06:02.140 --> 06:09.250
get things to our self that optimal temperature which is a variable of our object but of which will

06:09.250 --> 06:12.480
have to take the lower bound which hasn't x zero.

06:12.490 --> 06:18.330
So if the temperature of this or when we have no AI is below the lower amount of optimal range of temperature

06:18.670 --> 06:27.130
well what will happen in that case the energy spent by this alternative system when we have no AI will

06:27.130 --> 06:34.270
be equal to the difference between self that optimal temperature that is the lower bound of the optimal

06:34.270 --> 06:36.620
range of temperature minus.

06:36.670 --> 06:41.440
Of course this lower temperature self that temperature.

06:41.450 --> 06:42.050
No.

06:42.100 --> 06:45.880
Because right now it is below that lower amount of temperature.

06:46.030 --> 06:53.650
And remember that assumption too says that the energy spent by any system whether it is AA or this alternative

06:53.650 --> 07:00.200
system is equal to the absolute value of the temperature change cursed onto the surface.

07:00.400 --> 07:05.710
And therefore here since the temperature of the Saroo when we have no AI is lower than the lower bound

07:05.710 --> 07:10.810
of the optimal range of temperature well the absolute value is exactly the difference.

07:10.810 --> 07:13.960
All right that's the energy spent when we have no AI.

07:14.290 --> 07:20.820
And now still in that same condition we'll of course have to update the temperature of the server and

07:20.870 --> 07:23.260
the separate simulation when we have no AI.

07:23.470 --> 07:30.010
Right after this alternative system spends its energy to change the temperature of the server.

07:30.070 --> 07:36.490
So we'll have to get the temperature and that variable for that temperature is self that temperature

07:36.490 --> 07:39.970
no AI and therefore here just below.

07:40.120 --> 07:47.680
I'm going to update that temperature saying that it is now equal to that lower bound up some more range

07:47.680 --> 07:55.130
of temperature because indeed this alternative system just brought it back up to the lower bound of

07:55.510 --> 07:56.850
optimal temperature.

07:57.250 --> 07:58.270
All right perfect.

07:58.270 --> 08:05.200
And now let's take care of the second condition which is if this time the temperature of the server

08:05.200 --> 08:14.370
when we have no AI is this time larger than not the lower bound but the upper bound of the optimal range

08:14.370 --> 08:14.980
of temperature.

08:14.980 --> 08:22.830
So I'm going to base that here and replace of course zero by the upper bound which has index one.

08:22.860 --> 08:23.410
All right.

08:23.490 --> 08:30.480
So if the temperature of this or when we have no AI is above the upper bound of the optimal range of

08:30.480 --> 08:36.780
temperature well what will happen in that case will same we'll have to compute the energy spent when

08:36.780 --> 08:41.940
we have no AI and get the new temperature after the energy spent to regulate the temperature of the

08:41.940 --> 08:42.670
server.

08:42.930 --> 08:45.260
And so I'm going to take again.

08:45.480 --> 08:53.580
Well this new variable here energy no AI and this time it will be equal to of course based on assumption

08:53.580 --> 08:58.090
to the energy spent is the absolute value of the temperature change.

08:58.140 --> 09:01.620
Cursed by this alternative system onto the server.

09:01.620 --> 09:06.450
And since this alternative system is now bringing it back from the previous temperature when we have

09:06.450 --> 09:13.080
no AI to the upper bound of the optimal range of temperature well that energy spent is going to be equal

09:13.080 --> 09:17.930
to the difference between the temperature when we have no AI.

09:18.210 --> 09:22.990
And of course that up about the optimal range of temperature.

09:22.990 --> 09:23.590
All right.

09:23.760 --> 09:25.740
So I'm facing that here and here we go.

09:25.800 --> 09:31.680
We have the energy spent by this alternative system when we have no AI.

09:31.770 --> 09:37.500
And now of course we're going to update the temperature the temperature of the server when we have no

09:37.500 --> 09:43.740
AI right after this alternative system spent its energy to regulate the temperature of the server.

09:43.870 --> 09:50.970
And now it is of course well that upper bound of optimal range of temperature because indeed this alternative

09:50.970 --> 09:56.010
system just brought it back down to the upper bound of this optimal range of temperature.
