WEBVTT

00:00.520 --> 00:01.060
All right.

00:01.120 --> 00:05.750
So now there's the toile we're going to create the whole simulation ourselves.

00:05.890 --> 00:13.720
So first of all let's get back to simulation slight I remind that we have nine strategies and each of

00:13.720 --> 00:16.510
them is supposed to have a conversion rate.

00:16.520 --> 00:22.620
This tragen has a 5 percent conversion rate strategy do has a 13 percent conversion rate.

00:22.810 --> 00:28.000
And of course the higher is the conversion rate the better is a strategy because the conversion rate

00:28.060 --> 00:32.410
is exactly the average rate of customers that are expected to be converted.

00:32.440 --> 00:36.330
That is to subscribe to the premium plan over a certain number of rounds.

00:36.340 --> 00:43.180
So for example here strategy 9 that has a 1 percent conversion rate is the worst strategy and the best

00:43.180 --> 00:50.680
strategy of them Strategy number 7 because it has a 20 percent conversion rate meaning that it is expecting

00:50.680 --> 00:57.540
to convert 20 percent of the customers of the online retail business and therefore that will maximize

00:57.540 --> 01:02.880
the revenues because each of these converted customers will pay a certain amount of money per month

01:02.920 --> 01:05.920
per year like let's say $100 per year.

01:05.950 --> 01:12.190
And so if you convert the maximum customers with this best charge here well you will maximize the revenues

01:12.490 --> 01:14.400
coming from this revenue stream.

01:14.440 --> 01:16.170
So that's why we have to figure it out.

01:16.180 --> 01:23.590
Strategy number 7 and now the most important thing about dissimilation is to understand that this is

01:23.740 --> 01:26.030
only what we know behind the scenes.

01:26.250 --> 01:31.840
But of course the Tompson sampling algorithm or you know each of the strategy team in the real life

01:31.840 --> 01:36.280
situation has no clue of what their conversion rates are.

01:36.400 --> 01:41.230
They will have a clue by the end of the experiment of course because they will only have to compute

01:41.320 --> 01:44.400
the number of successes divided by the number of rounds.

01:44.500 --> 01:50.650
But the goal also is to find the best strategy and a minimum number of rounds because the more rounds

01:50.650 --> 01:53.250
you do the more costly it is for the business.

01:53.260 --> 02:00.520
So thats why we have to find a strategy you know an algorithm that will find that best ad with the highest

02:00.520 --> 02:03.140
conversion rate the quickest as possible.

02:03.160 --> 02:08.180
That is with the minimum number of rounds and thats exactly what Thompson sampling will do.

02:08.440 --> 02:12.100
So keep in mind this is only what we have behind the scene in real life.

02:12.100 --> 02:16.870
We have no clue of what these conversions rates are and now we are going to make the simulation those

02:16.870 --> 02:22.120
were going to create a array of the 10000 rounds that is 10000 customers there are going to connect

02:22.120 --> 02:28.000
to the Web site one after the other and for each of them based on the conversion rate will simulate

02:28.120 --> 02:32.550
which strategy would convert them into the subscription.

02:32.590 --> 02:39.820
So let's do this let's go back to Python and let's create the simulation that is let's create this big

02:39.910 --> 02:45.630
array of the 10000 rounds in rows and the nine strategies in columns.

02:46.000 --> 02:53.390
So first before introducing this array will gather the conversion rates as we have them in the slides.

02:53.770 --> 02:59.800
So we're going to put them into a list where each element of this list will respond to each of the nine

02:59.800 --> 03:00.700
strategies.

03:00.970 --> 03:02.860
So let's start with the first conversion rate.

03:02.860 --> 03:05.150
The first one is 0.05.

03:05.200 --> 03:12.430
That's exactly what will enter here 0.05 as the first conversion rate then let's get the second one

03:12.550 --> 03:27.070
0.13 0.13 for the second strategy then 0.09 0.09 for the third strategy then 0.16 for the fourth one

03:27.460 --> 03:35.440
or point sixteen then or point eleven for the fifth one.

03:35.440 --> 03:40.370
So by the way the this one has a pretty good strategy not the best one but the second best one.

03:40.750 --> 03:49.040
And then all point 11 write for the for Strategy number five then Strategy number six has a 4 percent

03:49.070 --> 03:50.660
conversion rate.

03:50.660 --> 03:58.820
So 0.04 then Strategy number 7 is the best one with an old phone.

03:58.820 --> 04:07.650
Twenty conversion rate and then 0.08 and 0.01 for the last ones the last two ones are point 0 8 and

04:07.740 --> 04:09.040
0 point 0 1.

04:09.360 --> 04:13.630
All right so we have our conversion rates for our 9 strategies.

04:13.800 --> 04:18.620
And now let's simulate the conversions over 10000 rounds.

04:18.660 --> 04:22.860
That is we're going to simulate the fact that we're going to ask each of these users connecting one

04:22.860 --> 04:28.800
after the other to the online retail business web site and we'll simulate whether they convert that

04:28.800 --> 04:34.320
subscribes to premium plan based on these conversion rates and I'll show you how to do this.

04:34.320 --> 04:38.820
And in fact that's something we already did before in case study number two.

04:39.030 --> 04:42.480
We already used that trick of the Bernoulli distribution.

04:42.810 --> 04:43.750
So let's do this.

04:43.800 --> 04:49.440
I'm going to introduce this whole array of the ten thousand rounds in rows and the nine strategies and

04:49.440 --> 04:51.810
columns as X..

04:51.950 --> 04:52.930
All right.

04:52.950 --> 04:56.980
And then as we said it's going to be a nun by Array.

04:57.090 --> 04:58.590
So I'm getting the array function.

04:58.590 --> 04:59.700
By and by.

05:00.000 --> 05:01.250
And then inside.

05:01.260 --> 05:07.140
Well first we're going to initialize it with plenty of zeroes you know only zeroes because you know

05:07.200 --> 05:11.670
most of the cells will have zeroes and they will only get one when we have a conversion.

05:11.670 --> 05:19.040
So anyway let's initialize all the cells as zeros and let's replace the cells by 1 when we get a conversion

05:19.740 --> 05:24.240
and to initialize an array with only zeroes you know how to do this.

05:24.480 --> 05:31.320
You get first name by and then from them by you call the zeros function the zeros function that takes

05:31.590 --> 05:35.310
one argument which is the dimensions in brackets.

05:35.550 --> 05:38.030
And you know the dimensions of this array.

05:38.160 --> 05:45.660
Well we'll have and that is 10000 number of rows because the rows correspond to the round and we'll

05:45.660 --> 05:52.550
have d that is nine columns because the columns correspond to the strategies and that's it.

05:52.620 --> 05:55.750
Our array is well initialized.

05:56.520 --> 05:56.860
All right.

05:56.880 --> 05:57.480
Good.

05:57.570 --> 06:01.470
And now time to populate it with the right values.

06:01.500 --> 06:06.180
So first of all can you guess what we're about to do right now.

06:06.180 --> 06:09.740
Natural next step here is of course to Megaforce up.

06:10.110 --> 06:14.850
And actually we're going to make two for loops because we have to loop over the rows you know we want

06:14.850 --> 06:21.360
to populate each of the rows correctly and then we'll have to loop once again over the columns because

06:21.360 --> 06:27.210
in each of these rows we'll go over each one of the columns and we'll update the right value for each

06:27.210 --> 06:28.420
of these columns.

06:28.440 --> 06:33.900
So let's start with the first for loop looping over all the rows of the X array.

06:34.080 --> 06:41.010
And so I'm going to introduce the first looping variable here I naturally and then in range you know

06:41.010 --> 06:42.350
how to do it.

06:42.540 --> 06:48.900
And remember we only have to put the upper bound which is the total number of rows in the array and

06:48.900 --> 06:50.890
that is an OK.

06:50.900 --> 06:54.130
So now we're looping over all the rows of the array.

06:54.140 --> 06:54.790
Good.

06:55.140 --> 07:00.150
And now that we enter the loop that means that we are dealing with a specific row you know.

07:00.180 --> 07:03.060
So at first we're going to deal with the first row of the array.

07:03.210 --> 07:06.480
Then I will be incremented by 1 and we'll deal with the second row.

07:06.600 --> 07:11.850
But here in the loop we're dealing with a specific row and therefore this specific row.

07:11.850 --> 07:17.260
Well what we have to do now is to loop once again over the columns.

07:17.490 --> 07:23.460
So I'm introducing another looping variable J year that is going to take the values in the range going

07:23.460 --> 07:31.470
from zero the default lower bound to Z because we have nine columns each column corresponding to each

07:31.530 --> 07:33.270
of the nine strategies.

07:33.270 --> 07:34.770
All right perfect.

07:34.770 --> 07:41.430
And now we're dealing with a specific row and specific column that is we're dealing with a specific

07:41.430 --> 07:42.070
cell.

07:42.270 --> 07:44.920
And what are we going to do in that specific cell.

07:45.090 --> 07:47.660
Well let's ask the question that specific cell.

07:47.730 --> 07:49.170
What does it correspond to.

07:49.440 --> 07:57.360
Well it corresponds to a strategy one of our nine strategies that was selected for a specific user that

07:57.360 --> 08:02.660
is at a specific route and remember for this strategy selected.

08:02.820 --> 08:10.170
Well what we want to implement in this X matrix is whether or not this strategy is selected converted

08:10.440 --> 08:16.080
this specific user that is in this specific realm to the premium plan that is whether or not the customers

08:16.080 --> 08:23.370
subscribe to the premium plan if that specific customer you know in that specific group subscribed with

08:23.370 --> 08:26.900
the specific strategy that is in the specific column.

08:27.120 --> 08:35.400
Well the cell gets one otherwise it keeps it initialized value 0 and that's exactly what we must do

08:35.400 --> 08:36.210
here.

08:36.240 --> 08:43.350
But then how are we going to simulate the fact that we get either a zero or a one you over that specific

08:43.350 --> 08:45.690
strategy at that specific round.

08:45.990 --> 08:48.950
Well that's where the burningly distribution comes into play.
