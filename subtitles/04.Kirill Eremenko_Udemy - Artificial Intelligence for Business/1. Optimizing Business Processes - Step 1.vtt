WEBVTT

00:00.420 --> 00:03.420
Hello and welcome to case study number one.

00:03.510 --> 00:05.400
Optimizing wherehouse flows.

00:05.430 --> 00:12.000
So this is the first case study of this course and we will be solving our first problem with AI which

00:12.000 --> 00:19.110
will be obviously to optimize some flows in a warehouse but most importantly the AI solution which will

00:19.110 --> 00:22.360
solve this problem will be learning.

00:22.410 --> 00:30.030
This is the simplest but yet very effective model that you have to know when starting your journey into

00:30.060 --> 00:30.630
AI.

00:30.810 --> 00:32.480
So we have to start with this one.

00:32.610 --> 00:38.370
And even if you already know this one I recommend to refresh your basics with what we're going to do

00:38.370 --> 00:39.680
in this first case.

00:39.990 --> 00:43.120
All right so if you're ready let's get started.

00:43.500 --> 00:46.320
So how are we going to approach this.

00:46.320 --> 00:52.860
Well first of all I remind us we also have this e-book that we can follow along with the scores especially

00:52.860 --> 00:57.990
if you are more a visual person and you prefer to read than listening to a tutorial.

00:58.020 --> 01:04.380
You also have this book which explains everything including all the mathematical details for the different

01:04.710 --> 01:07.790
theories that we'll learn and implement in this course.

01:08.160 --> 01:11.700
And we're just going to follow the same approach as in the book.

01:11.700 --> 01:17.400
First we will explain the problem to solve then we'll build the environment with you know the states

01:17.670 --> 01:24.840
the actions and the reward and then we'll move onto the theory to explain the ai ai solution which we

01:24.840 --> 01:26.910
will implement from scratch.

01:26.910 --> 01:33.700
Step by step on Python and we will deliberate to go into production to solve the problem of this case.

01:34.050 --> 01:38.780
So first of all let's describe And let's explain what the problem is.

01:38.790 --> 01:45.390
So this is a warehouse and this warehouse belongs to an online retail company that sells products to

01:45.390 --> 01:46.630
its customers.

01:46.800 --> 01:53.370
And inside this warehouse the products are stored in 12 different locations 12 different locations from

01:53.460 --> 01:54.550
a to else.

01:54.600 --> 02:01.110
Each of these letters here are one specific location where the products are stored and of course they're

02:01.200 --> 02:02.930
grouped by similar categories.

02:02.940 --> 02:06.850
For example here location table contain some similar products.

02:07.260 --> 02:16.440
And as the orders are placed by the customers on line we have an autonomous warehouse robot that looks

02:16.620 --> 02:23.830
just like this that is collecting the products in these 12 different locations.

02:23.850 --> 02:25.780
So how does it know where it has to go.

02:25.950 --> 02:33.990
Well it is connected to two systems of first system which is not artificial intelligence which is a

02:33.990 --> 02:37.400
system that will rank in real time.

02:37.500 --> 02:43.920
The priorities of a collection of these two applications and then a second system which is of course

02:44.040 --> 02:46.070
the AI AI system that we have to build.

02:46.500 --> 02:51.060
And this second system will compute in real time as well.

02:51.120 --> 02:56.470
The shortest route from where our autonomous wherehouse robot is located.

02:56.490 --> 03:01.170
So let's say it's located at the to the prairie location.

03:01.180 --> 03:09.870
And so let's say for example that at a specific time we have this priority ranking that is at a specific

03:09.870 --> 03:10.230
time.

03:10.230 --> 03:17.490
This first system connected to the warehouse and to the uttermost warehouse robot is ranking the 12

03:17.490 --> 03:20.730
locations with respect to the priority ranks.

03:20.730 --> 03:27.140
And so here according to this Priority Ranking at this specific time well the application where the

03:27.210 --> 03:34.510
autonomous warehouse robot has to go is location because it has the priority rank number one.

03:34.830 --> 03:38.060
And then the second priority is location k.

03:38.100 --> 03:39.510
The third one is location.

03:39.990 --> 03:47.770
But we'll have to build an AI that will return the shortest route from where the ultimate warehouse

03:47.770 --> 03:48.990
row was located.

03:49.140 --> 03:54.500
Let's say location to this top priority location which is location.

03:55.200 --> 04:00.180
And therefore the AI has to figure out the shortest route to go to location.

04:00.510 --> 04:07.200
So here it is because this is a simple example and we need to check easily if the guy is right the shortest

04:07.200 --> 04:12.420
route is either i j k l h g or I J.

04:12.430 --> 04:14.100
F. B C G.

04:14.100 --> 04:20.370
Then you'll see at the end of the case that he will add some complexities will specify that it has to

04:20.640 --> 04:26.330
go by an intermediary location before going to the Priory location.

04:26.490 --> 04:32.730
And of course this intermediary location will have to be the location that has priority rank number

04:32.730 --> 04:34.950
two that is location.

04:35.130 --> 04:40.960
So first of all we will just solve the case only by returning the shortest route from either G.

04:40.980 --> 04:47.970
Then we'll see if the AI returns to two possible path passing by effervescing by K and then as a challenge

04:48.100 --> 04:54.420
to see in practice how we can play with Q learning we will tweak our eyes so that it passes by this

04:54.450 --> 04:57.700
intermediary location K that has the second priority.

04:57.960 --> 05:04.250
All right so this is the problem we have to solve the AI solution that will solve this problem is learning.

05:04.280 --> 05:06.090
I can't wait to implement that.

05:06.140 --> 05:10.500
And as usual we're going to do it step by step starting from the next tutorial.

05:10.580 --> 05:13.160
Until then enjoy artificial intelligence.
