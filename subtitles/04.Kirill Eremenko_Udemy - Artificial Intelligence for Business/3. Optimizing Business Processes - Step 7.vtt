WEBVTT

00:00.300 --> 00:05.730
Hello and welcome to the real beginning of our AI implementation.

00:05.730 --> 00:11.400
Indeed we've just taken care of the precepts here by importing the libraries and setting the parameters

00:11.490 --> 00:17.340
gemmen Alpha for the curing algorithm and now we're about to start the three essential parts of this

00:17.340 --> 00:18.780
implementation.

00:18.780 --> 00:22.180
So as you can see I already highlighted the structure here.

00:22.200 --> 00:28.110
It's an implementation and three part part one will be about defining the environment exactly as we

00:28.110 --> 00:30.100
did in the first section of this case study.

00:30.260 --> 00:35.300
So we'll define the states will define the actions and will define the words.

00:35.490 --> 00:39.320
Then Part 2 will be about building the solution with kerning.

00:39.330 --> 00:47.250
So here in this part 2 we will do nothing else than implementing the whole true learning algorithm which

00:47.250 --> 00:53.460
will not only build the curing model train it over many iterations as you saw either in intuitional

00:53.550 --> 00:55.330
lectures or in the ebook.

00:55.560 --> 01:02.280
And finally in part three will go into production and so will make a tool that will return the shortest

01:02.280 --> 01:08.950
route towards the top priority location which is location G from wherever we start.

01:09.150 --> 01:13.040
OK so if you're ready let's start with Part 1.

01:13.110 --> 01:15.290
Defining the environment.

01:15.450 --> 01:21.420
So I already prepared the structure of this Part 1 so I'm just going to paste it here is what we have

01:21.420 --> 01:26.960
to do in this part one for as defined in the states and then finding the actions and third defining

01:26.970 --> 01:27.790
the reward.

01:28.020 --> 01:29.420
So let's go with the states.

01:29.520 --> 01:34.570
We're going to do exactly the same as we did in the slides or in the ebook.

01:34.800 --> 01:42.600
We're going to make a dictionary dictionary that maps to locations names in letters to the states and

01:42.600 --> 01:43.480
indexes.

01:43.740 --> 01:46.110
Why do we do it this way with the dictionary.

01:46.140 --> 01:48.220
That's because it will be useful for us.

01:48.420 --> 01:55.020
And actually part 3 when going into production because in order to connect our Q learning model with

01:55.020 --> 02:00.270
what we want to do that is getting the shortest route the optimal route to the top priority location.

02:00.420 --> 02:03.680
Well this dictionary will make our life much easier.

02:03.690 --> 02:12.320
All right so let's make that dictionary and we're going to call it location to state right because we're

02:12.320 --> 02:18.680
mapping the locations names in letters to the state in indexes from 0 to 11.

02:18.680 --> 02:24.130
All right so now the question is how does a dictionary work in Python.

02:24.470 --> 02:32.000
Well it consists of making a mapping between the keys the key identifiers which are unique identifiers

02:32.390 --> 02:34.400
and the values of these keys.

02:34.690 --> 02:41.960
And so here the keys are going to be the locations names from a to L and the values of these keys are

02:41.960 --> 02:45.900
going to be the states from respectively 0 to 11.

02:46.120 --> 02:48.220
And so how do we implement that in Python.

02:48.470 --> 02:51.350
Well we start with brackets just like that.

02:51.470 --> 02:54.570
And then for us we specify the key in quotes.

02:54.800 --> 02:58.750
And inside these quotes we're going to put the name of that key identifier.

02:58.830 --> 03:03.830
And so the first one is going to be the location A because as we just said the keys in the dictionary

03:03.830 --> 03:12.230
other locations location A and the value for that location is going to be while the state corresponding

03:12.230 --> 03:13.320
to that location.

03:13.490 --> 03:15.730
And that is the state 0.

03:16.090 --> 03:16.460
All right.

03:16.460 --> 03:23.000
So remember that's the key identifier that's devalue and you separate the key identifier and the value

03:23.270 --> 03:32.180
by a column here and then you do the same for the other couples of key identifiers and their values.

03:32.180 --> 03:34.640
All right let's do this for the other ones.

03:34.640 --> 03:43.760
The second key and will be location the and value for location B will be the state 1 then the third

03:43.890 --> 03:51.510
key identify will be location C and the value will be the state to then next one is litigation and its

03:51.510 --> 03:53.690
value will be the state three.

03:54.240 --> 03:54.560
All right.

03:54.570 --> 03:59.570
And then I'm just going to do the same put the other keys and values all the way to location.

03:59.570 --> 04:02.990
Albert I'm going to accelerate because this is just the same until the end.

04:07.960 --> 04:10.000
And done with location.

04:10.210 --> 04:18.070
So here is our final dictionary mapping each of the 12 locations from 8 L to the corresponding states

04:18.160 --> 04:21.600
which are respectively the indexes from 0 to 11.

04:21.880 --> 04:22.660
Perfect.

04:22.840 --> 04:25.790
And now we're going to define the actions.

04:26.090 --> 04:30.710
So regarding the actions well let's just do exactly the same as what we did in the slides.

04:30.920 --> 04:37.570
We're going to define the actions this way with a list containing all the possible actions that can

04:37.570 --> 04:39.390
be played overall.

04:39.400 --> 04:44.920
So remember we'll specify the actions that cannot be played when being in a specific location.

04:45.010 --> 04:51.310
Thanks to the war matrix by attributing a zero when we can not play an action leading to the next location.

04:51.460 --> 04:56.410
When being in a specific state and otherwise if we can play an action from a state that will take us

04:56.410 --> 04:59.200
to a location next to it well we'll put away.

04:59.650 --> 04:59.890
All right.

04:59.890 --> 05:01.420
So let's do this.

05:01.420 --> 05:06.250
The actions are basically the indexes of the 12 locations where the uttermost were house Robert can

05:06.250 --> 05:06.830
go.

05:06.880 --> 05:16.990
That is the index is 0 1 2 3 4 5 6 7 8 9 10 and 11.

05:16.990 --> 05:17.920
All right perfect.

05:17.920 --> 05:19.770
So these are actions.

05:19.780 --> 05:21.710
And now let's define the rewards.

05:21.850 --> 05:26.860
We'll actually do that in next tutorial because we have a big matrix to make.

05:26.860 --> 05:32.010
It is exactly the same matrix as we made together in the first section of this case study.

05:32.230 --> 05:34.210
So let's make that again in the next tutorial.

05:34.230 --> 05:38.990
But this time in Python because in the end you will need it for the key learning algorithm.
