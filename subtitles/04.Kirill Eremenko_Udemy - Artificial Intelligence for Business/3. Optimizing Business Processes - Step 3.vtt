WEBVTT

00:00.360 --> 00:01.920
And here we go with the first part.

00:01.950 --> 00:03.390
Defining the environment.

00:03.480 --> 00:07.380
So will the final states will define the actions and will define the reward.

00:07.410 --> 00:14.040
That's always what we have to do when finding any environment for any model we build.

00:14.040 --> 00:18.410
So first of all what is the state what is the state in an A.M..

00:18.480 --> 00:20.010
That's always the same thing.

00:20.100 --> 00:25.440
The state is very simply the input of your amoral.

00:25.440 --> 00:33.450
It is exactly what will go into the model as input and then this will take the state as input and will

00:33.450 --> 00:39.760
return an output which is exactly the action to play and which will define afterwards.

00:40.140 --> 00:46.600
And so we're going to be at a stage we're all going to be the inputs of our IMO the early model.

00:46.860 --> 00:54.960
Well very simply this is going to be the location where our autonomous wherehouse robot is at a specific

00:54.960 --> 00:55.760
time.

00:55.920 --> 01:02.850
So for example let's say that at a specific time T are anonymous warehouse robot and location B then

01:02.850 --> 01:05.700
the state will be location B.

01:05.760 --> 01:11.850
However since we're going to build the current model which as you can imagine contains some mathematical

01:11.850 --> 01:12.750
equations.

01:12.940 --> 01:19.680
Well we cannot really work with letters here and therefore we have to do some coding to map each of

01:19.680 --> 01:22.430
these locations letters into indexes.

01:22.650 --> 01:29.190
And that's exactly what you see here a mapping between the locations and the state because in the states

01:29.310 --> 01:33.730
are going to be exactly the indexes and coding these locations.

01:34.110 --> 01:40.220
And there is actually a specific reason why we start from zero here and going one by one.

01:40.320 --> 01:45.390
That's because we're going to work with matrices because indeed the next step after defining the states

01:45.420 --> 01:51.440
and the actions will be to define a word function which is actually a function taking the state and

01:51.450 --> 01:52.760
actions as input.

01:52.800 --> 01:57.590
And since we have a finite number of states and you will see will have a finite number of actions.

01:57.750 --> 02:01.930
While the best way to define this word function is with a matrix.

02:01.980 --> 02:04.740
So that's why the indexes start from zero to 11.

02:04.740 --> 02:10.650
But what's most important to understand here is that the state which is the input of the killer in the

02:10.650 --> 02:17.910
model is the location where our autonomous wherehouse robot is at a specific time.

02:18.360 --> 02:25.650
So I'll give you a final example before you move onto the action if at a specific time T are autonomous

02:25.650 --> 02:28.440
warehouse robot is in location age.

02:28.680 --> 02:32.040
Well the state will be seven.

02:32.070 --> 02:32.910
All right.

02:32.910 --> 02:33.330
Perfect.

02:33.330 --> 02:35.840
Now let's move onto the actions.

02:36.510 --> 02:43.170
So again the actions are very simple to define here because we're dealing with Kuder in cloning is the

02:43.320 --> 02:46.610
easiest model to define an environment.

02:46.650 --> 02:48.240
So what is going to be the action here.

02:48.330 --> 02:53.310
I remind that the action is the output of the curity model.

02:53.310 --> 03:01.150
It takes a state as input for example state B and it returns an output which is the action to play.

03:01.170 --> 03:03.600
Can you guess what action might be here.

03:03.780 --> 03:12.860
Well very simply the action is the possible next location where our ultimate warehouse robot can go.

03:12.990 --> 03:19.350
So for example when input stages B when the item was warehouse robot is in location be the only locations

03:19.350 --> 03:26.670
where it can go or either location location see all location and therefore the possible actions here

03:26.700 --> 03:33.720
that can be the outputs of the killer and immoral are the actions leading to the action to see or the

03:33.720 --> 03:35.030
action leading to.

03:35.460 --> 03:41.760
And so we're going to take the same mapping as we took for the state and the action will be nothing

03:41.760 --> 03:46.200
else than the encoding index of the next location where it can go.

03:46.470 --> 03:52.590
So for example when being an input state be the location be if the next location of the robot is location

03:52.660 --> 03:58.670
A then the action played here is the index corresponding to a According to some previous mapping that

03:58.680 --> 03:59.970
is action 0.

04:00.300 --> 04:02.960
If it goes to see the action will be two.

04:03.120 --> 04:08.640
And if it goes to the action will be the next cories point f that is indexed 5.

04:08.910 --> 04:16.620
And that's why the possible actions that the AI can play overall are our actions from 0 to 11 because

04:16.620 --> 04:23.970
we have 12 locations encoded from 0 to 11 and that's the possible actions that you can play.

04:23.970 --> 04:29.310
But of course the AI cannot play any of these actions when being in a specific location.

04:29.580 --> 04:36.060
But we'll specify that by making a functionals you know implementation that will return the possible

04:36.120 --> 04:41.160
actions that the eye can play when being in a specific input state.

04:41.160 --> 04:43.350
That is when being in a specific location.

04:43.620 --> 04:49.530
So just keep in mind that the action is the next location where the eye can go encoded by these indexes

04:49.530 --> 04:50.040
here.

04:50.130 --> 04:56.310
And for each input state will specify what are the possible actions that the eye can play.

04:56.310 --> 04:58.070
All right so that's for the actions.

04:58.200 --> 05:03.580
Now we'll move onto the word actually do that in the next tutorial because it will take us a bit more

05:03.580 --> 05:05.850
time to build this reward function.
