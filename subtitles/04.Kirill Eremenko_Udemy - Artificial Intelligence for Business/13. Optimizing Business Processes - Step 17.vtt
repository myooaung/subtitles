WEBVTT

00:00.560 --> 00:03.900
All right let's continue with this root function.

00:04.130 --> 00:07.440
So we just reached the next date which is a very good step done.

00:07.580 --> 00:12.980
But now the problem is that the next date is actually the index of the row where we have to go that

00:12.980 --> 00:17.960
is the index of the row corresponding to the next location where we have to go and we would like a letter

00:18.110 --> 00:19.600
and therefore to get a letter.

00:19.730 --> 00:23.150
We have to make an inverse mapping from this dictionary.

00:23.240 --> 00:29.910
This is a dictionary mapping to location in letter to the location an index that is the state.

00:29.990 --> 00:36.860
And what we want to do is the inverse mapping mapping the state an index to the location in letter.

00:36.890 --> 00:43.610
And it's good that we're doing this because in versing a mapping is something you will often do and

00:43.610 --> 00:49.070
therefore you have to know the trick on how to convert a mapping very efficiently in just one line of

00:49.070 --> 00:49.470
code.

00:49.480 --> 00:53.740
You know we won't do the inverse mapping manually as we just did here.

00:53.840 --> 00:56.840
So let's do this let's get the trick.

00:56.840 --> 00:57.410
All right.

00:57.410 --> 01:02.870
And as I said in the previous Etoile in the end we're going to make that inverse mapping dictionary

01:03.080 --> 01:05.690
separte you know we don't have to do it inside the function.

01:05.690 --> 01:12.050
Let's leave the core of the function to what it has to do essentially and let's make the axonal tools

01:12.050 --> 01:14.140
we need separately.

01:14.150 --> 01:14.750
All right.

01:14.780 --> 01:17.780
And therefore here we're going to make something new.

01:17.900 --> 01:29.430
We're going to make therefore a mapping from the states to the locations and therefore we're going to

01:29.430 --> 01:38.460
introduce a new dictionary that obviously we're going to go state to location because this is dictionary

01:38.790 --> 01:43.490
mapping the states and indexes to the locations in letters.

01:43.500 --> 01:48.000
And so now the trick to inverse mapping is the following.

01:48.000 --> 01:50.660
So since we're still making a dictionary.

01:50.760 --> 01:58.470
Well we have to include brackets here because remember a dictionary has to be created inside brackets

01:58.590 --> 02:03.370
as opposed to for example list which is created inside square brackets.

02:03.450 --> 02:06.740
So we start with brackets inside as brackets.

02:06.780 --> 02:13.230
We're going to populate the following couple of key identifier and value which here has to be state

02:13.830 --> 02:19.580
as the key identifier and location as a value.

02:19.740 --> 02:26.850
We're going to populate that in a full hoop that will go over each of the location and state.

02:26.850 --> 02:29.510
Inside this dictionary.

02:29.850 --> 02:36.690
And since you know we already specified that the state goes as a key identifier and the location goes

02:36.750 --> 02:37.690
is the value.

02:37.890 --> 02:42.270
Well we'll get automatically this inversed dictionary.

02:42.340 --> 02:48.610
And so now what we have to do is just make that for loop that will go over all the locations and the

02:48.630 --> 02:50.630
states in.

02:51.090 --> 03:02.070
Well our previous dictionary which is location to state and now to get these locations and states Well

03:02.070 --> 03:09.900
we have to call something from this dictionary which is the items the items which is actually some sort

03:09.900 --> 03:13.480
of attribute of dislocation to state dictionary.

03:13.500 --> 03:21.390
So basically location to state that items don't forget parenthesis will return exactly the location

03:21.690 --> 03:22.730
and state.

03:22.740 --> 03:24.870
Inside this dictionary.

03:24.880 --> 03:25.550
All right.

03:25.770 --> 03:31.470
And therefore since we managed to get the location and the state and here that we made the right order

03:31.470 --> 03:34.760
with the state as the key and fire and the location as the value.

03:34.950 --> 03:38.670
Well we'll get exactly this inverse dictionary.

03:38.700 --> 03:40.380
I can actually show you what you want.

03:40.650 --> 03:42.280
Let's execute this.

03:42.300 --> 03:45.810
I just selected this line and now execute press control.

03:45.870 --> 03:51.040
And the four next are Windows users and command plus and two for Mac users.

03:51.240 --> 03:52.550
So here we go.

03:52.560 --> 03:53.530
All right.

03:53.530 --> 03:56.150
State location dictionaries created.

03:56.340 --> 04:02.340
And now that's just call it press enter.

04:02.640 --> 04:03.500
And here we go.

04:03.540 --> 04:05.030
We have exactly what we wanted.

04:05.040 --> 04:07.630
That is a dictionary mapping.

04:07.640 --> 04:15.600
This time the state indexes to the locations and therefore right now since we have the next date well

04:15.600 --> 04:22.770
we'll be able to get the next location in letter by just calling this new state to location dictionary

04:22.770 --> 04:25.220
that we just got with the next date.

04:25.500 --> 04:27.530
And that will give us the next location.

04:27.630 --> 04:33.390
So perfect Let's therefore finish this root function in the next Tauriel.

04:33.510 --> 04:36.120
You're going to see that we're going to finish this very easily.

04:36.120 --> 04:43.800
And then finally we'll get to the very exciting step of checking if indeed we get the optimal route.

04:43.800 --> 04:44.150
All right.

04:44.160 --> 04:45.880
I can't wait until then.

04:45.880 --> 04:46.650
Enjoy AI.
