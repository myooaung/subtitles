WEBVTT

00:00.440 --> 00:01.830
Are right here we go.

00:01.890 --> 00:08.490
Let's make this final function that will return the optimal route from any starting location to any

00:08.780 --> 00:10.380
ending location.

00:10.380 --> 00:16.500
So to make a function in Python to start with def which means define then you need to give a name to

00:16.500 --> 00:21.070
your function so you can call it either optimal route or simply route.

00:21.510 --> 00:26.260
And then in parenthesis you will specify the inputs of that function.

00:26.640 --> 00:28.690
So what I'm going to with the input.

00:28.830 --> 00:34.070
Well for starters they are going to be starting location and ending location.

00:34.070 --> 00:38.020
So these are just some names I'm giving to these two inputs.

00:38.130 --> 00:45.000
But clearly means that storing location will be where in which location or other warehouse robot will

00:45.000 --> 00:49.950
start its route and ending location will be of course the upper area location.

00:50.120 --> 00:56.010
But then remember at the end of this first part will improve our tool giving us the optimal route and

00:56.010 --> 01:02.220
we'll add the option to add an intermediary location so that the robot can actually go by the second

01:02.520 --> 01:06.450
briery location before going to the temporary location.

01:06.450 --> 01:09.510
And so we'll add this feature of course to optimize even more.

01:09.510 --> 01:15.150
The warehouse looks but that will be a second step so far we'll just make a system that will return

01:15.150 --> 01:23.790
the optimal route between the starting location and the ending location.

01:23.790 --> 01:24.590
All right.

01:24.810 --> 01:29.110
And that's all you need to do as a first step to define a function.

01:29.490 --> 01:32.130
So what will this function do.

01:32.280 --> 01:38.940
Well as we said it's going to return the list of the successive locations it has to go from the starting

01:38.940 --> 01:41.030
location to the ending location.

01:41.100 --> 01:45.400
And of course this list of success applications has to be the optimal route.

01:45.780 --> 01:49.260
And therefore since in the end this function will return a list.

01:49.260 --> 01:52.260
Well let's first initialize this list.

01:52.440 --> 01:57.870
And so we're going to introduce this list by creating a new variable which we're going to call route

01:58.800 --> 02:06.200
and that will initialize not as an empty list but of course as a list of one element.

02:06.300 --> 02:08.440
And can you guess what this one element will be.

02:08.640 --> 02:12.410
Well that's of course going to be the starting location.

02:12.480 --> 02:19.560
Of course we don't have a choice of first location or route is obviously the starting location and then

02:19.860 --> 02:27.150
we'll append to successive locations to lead our autonomous wherehouse robot to the ending to briery

02:27.150 --> 02:34.380
location and to do this we'll use of course the q values by taking each time the maximum Q value on

02:34.380 --> 02:38.360
the road corresponding to the location we are at a specific time.

02:38.760 --> 02:39.080
All right.

02:39.090 --> 02:39.670
Good.

02:39.690 --> 02:41.200
We initialized our route.

02:41.250 --> 02:45.020
That is our list which contains So far only the starting location.

02:45.330 --> 02:50.760
And then we're going to populate this list with the locations we have to go through in order to reach

02:50.760 --> 02:52.190
the ending location.

02:52.560 --> 03:00.570
So the next step will be to obviously make a loop you know loop that at each iteration will find the

03:00.570 --> 03:02.480
next location we have to go to.

03:02.670 --> 03:06.820
Well following this optimal path leading to the ending location.

03:06.880 --> 03:10.140
So now the question is which loop are we going to do.

03:10.140 --> 03:13.630
Is it going to be a full loop or is it going to be a while loop.

03:13.980 --> 03:19.770
Well the thing is that we actually don't know how many locations we will have to go through before reaching

03:19.770 --> 03:21.110
that ending location.

03:21.450 --> 03:25.860
And when we don't know exactly how many iterations there is going to be in the loop.

03:26.070 --> 03:29.250
Well we don't have a choice but to do a weld up.

03:29.460 --> 03:36.900
And that is why the next step now is to make this well loop that we'll find this next location that

03:36.900 --> 03:43.760
we have to figure out right now until this next location is actually the ending location.

03:43.770 --> 03:49.830
So you know we're going to find the next location iteration by iteration until we reach the final ending

03:49.890 --> 03:50.890
location.

03:50.970 --> 03:57.930
And so that's why the condition we have two inputs in the well loop here is just to say that well the

03:57.930 --> 04:05.540
next location is different than the ending location.

04:05.880 --> 04:12.030
Well we'll figure out where that next location is and once we reach the ending location that is once

04:12.240 --> 04:16.390
next location is equal to ending location well that will be the end of the game.

04:16.470 --> 04:22.230
We will have figured out the optimal route leading to that ending location but now.

04:22.230 --> 04:25.890
Be careful next location doesn't exist yet.

04:25.890 --> 04:31.140
We haven't introduced that variable and that most of the time what we have to do when starting well

04:31.140 --> 04:31.620
loop.

04:31.770 --> 04:37.930
So first before starting this well up here well let's introduce the next location of orbit.

04:38.460 --> 04:43.830
But the thing is that right now we don't know what this next location is because that's what we will

04:43.830 --> 04:45.380
compute in the well.

04:45.630 --> 04:48.380
And therefore since we don't know where we have to go right now.

04:48.510 --> 04:55.360
Well let's just stay where we are and therefore let's introduce next location as a starting location.

04:56.550 --> 04:56.920
All right.

04:56.940 --> 05:01.680
And then in this well loop we'll figure out what this next location is.

05:02.100 --> 05:04.570
So let's start this well loop next tutorial.

05:04.590 --> 05:06.290
And until then enjoy AI.
