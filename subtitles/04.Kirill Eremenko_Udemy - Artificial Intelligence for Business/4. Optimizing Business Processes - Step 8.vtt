WEBVTT

00:00.390 --> 00:07.530
Hello welcome back again to this artist on does for business course we are in the first case study optimizing

00:07.530 --> 00:13.980
warehouse flows with Q learning and we're about to finish the first part of our implementation part

00:13.980 --> 00:20.340
1 defining the environment where we already defined the states the actions and now we're about to define

00:20.710 --> 00:21.610
what we want.

00:21.900 --> 00:26.850
So remember what we explained in the first section of this case study what do we have to do in the first

00:26.850 --> 00:31.770
place is to define the reward function which is a function taking as inputs the couple of states in

00:31.770 --> 00:37.480
action at a specific time and returning the reward we get by playing that action in the state.

00:37.620 --> 00:43.320
And since we were dealing with Guler in here and also with finite number of states and a finite number

00:43.320 --> 00:45.310
of actions which are the same numbers.

00:45.540 --> 00:51.450
Well the best way to define this word function is to make a matrix where the rows correspond to the

00:51.450 --> 00:57.870
states from 0 to 11 and the columns correspond to the actions from 0 to 11.

00:57.870 --> 01:00.250
All right so let's make this matrix.

01:00.300 --> 01:05.000
It's going to be of course the exact same matrix as the one we made together in the slide.

01:05.190 --> 01:11.280
And as you can see speaking of the slides I included in our working directory folder the slide of the

01:11.280 --> 01:13.110
warehouse here it is.

01:13.110 --> 01:15.750
That's our warehouse with the 12 possible locations.

01:15.990 --> 01:20.460
And that is just to help us make again manually this reward matrix.

01:20.460 --> 01:26.250
We're going to do it again for the first three rows and then I'll just add by copy paste the whole reward

01:26.250 --> 01:26.960
matrix.

01:26.970 --> 01:27.320
All right.

01:27.330 --> 01:31.400
But you can practice of course to build it yourself fully from scratch.

01:31.410 --> 01:31.670
All right.

01:31.680 --> 01:38.930
So let's start by initializing the number array which will contain all the cells of this matrix of rewards.

01:39.150 --> 01:40.760
So let's go back to the code.

01:40.860 --> 01:42.100
Here it is.

01:42.630 --> 01:48.840
So first we have to give a name to this matrix of rewards and we're going to simply called R R will

01:48.840 --> 01:51.180
be this matrix of rewards.

01:51.200 --> 01:55.720
But remember that's exactly the same as in finding the word function.

01:55.830 --> 01:56.570
So our.

01:56.760 --> 02:03.230
And now we're going to introduce a 2D array and these two the array will be of course and number three.

02:03.330 --> 02:10.430
And that's where we will mostly use none by with our number library we will build our matrix of reward.

02:10.560 --> 02:13.850
And then later on our matrix of q values.

02:14.160 --> 02:14.520
All right.

02:14.520 --> 02:17.710
So let's do this first thing we have to do is call number.

02:17.760 --> 02:22.370
Which has a shortcut and P and then to create and then by array with and by.

02:22.500 --> 02:25.560
Well we are going to use the array function.

02:25.560 --> 02:30.710
Bind them by and then inside the parenthesis we're going to add some square brackets.

02:30.750 --> 02:32.490
A pair of square brackets.

02:32.490 --> 02:37.470
And then inside this pair of square brackets we're going to add the different rows of this matrix every

02:37.480 --> 02:38.030
word.

02:38.160 --> 02:42.170
Again each row will be in a new pair of square brackets.

02:42.330 --> 02:47.610
So for example here and adding a new pair of square brackets that corresponds to the first row.

02:47.790 --> 02:49.310
And speaking of the first row.

02:49.380 --> 02:51.120
Well let's populate it.

02:51.120 --> 02:57.150
So let's take again our warehouse slide and remember how we have to do it.

02:57.150 --> 03:04.710
The first row of our matrix of reward corresponds to the state of index 0 because in it the rows of

03:04.710 --> 03:10.830
the matrix correspond to the state and the state of index zero corresponds to location A and therefore

03:10.830 --> 03:17.030
what we have to see now since the columns correspond to the actions that we can play from location A.

03:17.190 --> 03:23.040
Well the only action that we can play from location A is the action leading us to location B because

03:23.040 --> 03:29.520
that's the only neighbor location of location A and therefore will only get a 1 for the action leading

03:29.520 --> 03:33.220
to B and the rest of the actions will get a zero we want.

03:33.240 --> 03:38.740
All right so that's exactly what we're going to populate now in this first row of our matrix.

03:38.940 --> 03:42.710
Since location B has index 1.

03:42.960 --> 03:49.710
Well we'll only put a 1 in the second column that is the column of the next one and that is why the

03:49.710 --> 03:55.200
first row of our reward Matrix is the following 0 1.

03:55.230 --> 03:56.360
That's where we can go.

03:56.580 --> 03:57.660
And then zero.

03:57.820 --> 04:04.050
And so now to be more efficient I'm going to use some copy paste because we just have to include nine

04:04.050 --> 04:07.840
more zeros corresponding to the nine remaining locations.

04:07.860 --> 04:10.390
So I'm just going to press base nine times now.

04:10.460 --> 04:17.880
1 2 three four five six seven eight nine great perfect we have the first row of our matrix of rewards

04:17.940 --> 04:18.700
are.

04:18.710 --> 04:20.830
And now let's take care of the second row.

04:21.120 --> 04:28.170
So to move onto the second row be we have to add a come here just to separate the rows in this matrix

04:28.230 --> 04:35.250
or in this number by array and then you can press enter to populate in some new pair of square brackets.

04:35.310 --> 04:38.690
This new row the second row you can see the structure here right.

04:38.790 --> 04:45.030
This pair of square brackets here there is the outer square brackets corresponds to the first dimension

04:45.030 --> 04:45.890
of this matrix.

04:45.900 --> 04:52.170
The first mention of this array which are the rows and then the second pair of square brackets correspond

04:52.170 --> 04:54.650
to the second dimension which are the columns.

04:54.840 --> 04:55.610
All right.

04:55.650 --> 04:57.200
Now let's play the second row.

04:57.300 --> 04:59.890
Let's go back to our warehouse.

05:00.040 --> 05:06.430
The second row corresponds to state B which is location B and from location B we can only go to location

05:06.490 --> 05:13.480
a location C or location f and therefore we can only play the action leading us to a that is action

05:13.480 --> 05:14.560
of index 0.

05:14.800 --> 05:18.330
Or we can only play the action leading us to see which has index 2.

05:18.520 --> 05:23.060
Or we can only play the action leading us to F which hasn't X5 right.

05:23.080 --> 05:26.440
0 1 2 3 4 and 5.

05:26.950 --> 05:33.090
And therefore in the second row of our matrix of words are we'll only get once in the columns of index

05:33.180 --> 05:35.950
0 2 and 5.

05:35.950 --> 05:38.620
All right so let's populate that.

05:38.710 --> 05:46.330
We said the columns of index 0 is the first column then the column and the next to that is the third

05:46.330 --> 05:50.300
column and the column of index 5.

05:50.320 --> 05:51.070
Here it is.

05:51.190 --> 05:52.710
And then all the rest is zero.

05:52.750 --> 05:58.920
So I just have to do another six based on the come to zero that I kept in before.

05:59.050 --> 06:01.390
So one two three four five six.

06:01.390 --> 06:02.340
Here we go.

06:02.510 --> 06:03.400
And perfect.

06:03.400 --> 06:04.930
We have our second row.

06:05.330 --> 06:11.080
And now just to finish one last row that we do manually the third row and then I'll just give you the

06:11.080 --> 06:12.200
end of the matrix.

06:12.280 --> 06:14.190
I will just copy paste.

06:14.200 --> 06:17.090
All right let's do this let's go back to our slide.

06:17.120 --> 06:24.070
So the third row of the matrix corresponds to location C and from location Z we can only go to location

06:24.080 --> 06:30.520
the obligations g the action that will lead us to location B is the action of the next one and the action

06:30.520 --> 06:36.320
that will lead us to location G is the action of index 6 because remember that had index 5.

06:36.340 --> 06:43.390
So in the third row of our matrix A reward will only get once in the columns of the next one and six.

06:43.390 --> 06:44.100
All right.

06:44.290 --> 06:48.140
So let's do this let's go back to our Python code.

06:48.520 --> 06:54.340
And again and adding some square brackets here corresponding to the third row of this matrix.

06:54.340 --> 06:55.160
And here we go.

06:55.180 --> 07:01.330
We said that in the third row of the matrix corresponding to the state of index 2 which corresponds

07:01.330 --> 07:06.570
to Legations the world will only get to 1 in the column of the next one.

07:06.820 --> 07:15.680
And then remember we said the column of index six perfect and all the rest gets zeros.

07:15.970 --> 07:16.470
All right.

07:16.480 --> 07:18.960
So these are the first rows of the matrix.

07:18.970 --> 07:22.850
We won't do the same for the other rows because you get the idea.

07:22.900 --> 07:26.920
But please practice and make the rest of the matrix yourself.

07:26.920 --> 07:32.040
You have it of course in the e-book all the code is provided in the e-book with all the explanations.

07:32.050 --> 07:34.230
But the more you practice the better.

07:34.390 --> 07:44.980
So right now I'm just going to get the matrix from the ebook and just copy it you know copy the full

07:44.980 --> 07:46.420
measure of reward.

07:46.870 --> 07:47.770
And here it is.

07:47.950 --> 07:49.130
All right perfect.

07:49.150 --> 07:55.750
We have our Matrix Awards which means that we have our reward function which will be use in the Q learning

07:55.810 --> 07:57.160
algorithm.

07:57.190 --> 08:03.140
Congratulations not only for publishing this matrix of awards but also for completing part 1.

08:03.130 --> 08:04.750
The funding the environment.

08:04.750 --> 08:09.250
And then we're going to move on to part two which will be the interesting part actually because that's

08:09.250 --> 08:14.610
where we're going to build the solution with Q learning the whole kit learning algorithm.

08:14.920 --> 08:17.920
So I can't wait to implement this next code section with you.

08:17.940 --> 08:19.710
And until then enjoy AI.
