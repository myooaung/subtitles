WEBVTT

00:00.450 --> 00:01.440
All right here we go.

00:01.470 --> 00:03.000
Let's scale the next date.

00:03.120 --> 00:06.570
Again this is a new step of the general AI framework.

00:06.570 --> 00:11.970
You always have to scale the next day when doing deep reinforcement learning because deeper in Forstmann

00:11.970 --> 00:14.980
learning implies the use of a neural network.

00:15.090 --> 00:18.720
And we should always scale the inputs that feed the new in that work.

00:18.720 --> 00:20.160
So that's why we're doing it now.

00:20.370 --> 00:25.770
And since a state is composed of the three elements the temperature of the server when we have the high

00:26.160 --> 00:31.530
number of users and the rate of data transmission Well we're first going to scale each of the three

00:31.530 --> 00:37.590
elements separately and we'll we'll gather the three of them inside a scaled vector which will be exactly

00:37.770 --> 00:40.890
our new state that will return here.

00:40.890 --> 00:41.910
All right let's do this.

00:41.970 --> 00:47.130
Let's start with the first element so I'm going to introduce here new voidable that I'm going to call

00:47.130 --> 00:53.550
a scaled temperature A.I. which is of course a temperature of the server.

00:53.630 --> 00:56.040
When we have the eye and that is scaled.

00:56.210 --> 00:59.030
And so now how are we going to scale that.

00:59.030 --> 01:03.540
So right now at this time you know when the next date is about to be killed.

01:03.830 --> 01:08.840
Well we have a certain temperature of the eye which is given by this very well self temperature that

01:08.900 --> 01:09.320
AI.

01:09.370 --> 01:13.780
So I'm just going to copy this because we will put that in the formula.

01:14.120 --> 01:19.130
And this is actually this variable self temperature that we have to scale.

01:19.220 --> 01:25.310
You know right now it has its original value and we are going to scale that by normalizing it which

01:25.310 --> 01:28.120
is a classic way of scaling your variable.

01:28.130 --> 01:29.550
So what is normalization.

01:29.610 --> 01:36.470
Normalization just consists of taking the values of your variable then subtracting them by the minimum

01:36.800 --> 01:42.230
value of this variable which will say it will be the minimum temperature of the server and then we'll

01:42.230 --> 01:49.070
divide the difference by the maximum delta of the values that this temperature a variable can take which

01:49.070 --> 01:53.800
will be the maximum temperature of the server minus the minimum temperature of the surface.

01:54.110 --> 02:01.310
So that then the outcome of this formula scale temperature AI will be a value between 0 and 1 which

02:01.310 --> 02:03.530
is exactly what we want for our neural network.

02:03.530 --> 02:08.530
You know it's going to work with values that are all scaled between 0 and 1.

02:08.540 --> 02:15.020
So let's do this let's get first the minimum temperature of the server which is selfmade temperature

02:16.110 --> 02:21.570
and then subtract that to the temperature of the Cirebon we have the selve the temperature A.i.

02:21.780 --> 02:28.440
And now we're going to divide all this by the maximum depth of temperature that can happen in the surface.

02:28.650 --> 02:30.950
That is we can use the following trick.

02:31.140 --> 02:37.110
I just keep it self-determine temperature so I'm going to paste that twice because indeed I'm just going

02:37.110 --> 02:46.110
to replace first of that mean temperature by itself that max temperature and then just add here minus

02:46.500 --> 02:49.450
and that's the maximum Delta I've been talking about.

02:49.620 --> 02:55.170
Know the maximum depth of temperature that can happen on the surface so that you know since the temperature

02:55.170 --> 03:00.870
of the server when we had the like never go beyond the maximum temperature and never go below the minimum

03:00.870 --> 03:04.770
temperature well the numerator here temperature.

03:04.850 --> 03:11.350
I mean temperature will always be lower than this denominator max temperature minus mean temperature

03:11.640 --> 03:17.760
and therefore this value here this fraction will always be a number between 0 and 1 which is the natural

03:17.760 --> 03:22.820
outcome of normalization and which is exactly what we want for new on that work.

03:22.890 --> 03:23.370
There we go.

03:23.370 --> 03:30.710
We did it we normalized the first element of our state the temperature of the server when we had the

03:30.710 --> 03:31.140
high.

03:31.500 --> 03:34.760
And now it's the same for the other two elements.

03:34.770 --> 03:42.070
So I'm going to introduce that new Horrible's skilled number of users and those same.

03:42.120 --> 03:49.220
Well what we want to scale is exactly this current number of users that we computed before some can

03:49.260 --> 03:50.860
get this very well.

03:50.920 --> 03:56.660
Then I'm going to base that here in the parenthesis of the numerator.

03:56.700 --> 04:02.970
Then of course we're going to subtract the minimum number of users that can be connected to the server

04:03.360 --> 04:08.400
which is right here minimum number of you yourself that many number users.

04:08.460 --> 04:14.700
So let's go back down and let's base that here and we're going to divide that of course by again the

04:14.700 --> 04:20.810
maximum Delta users there can be in the server which is well it's use the same trick.

04:20.840 --> 04:23.460
We're going to paste that twice.

04:23.640 --> 04:27.570
I'm going to replace these men here by Max.

04:27.900 --> 04:30.730
And here I'm just going to add a minus.

04:30.750 --> 04:31.540
Right.

04:31.540 --> 04:33.900
All that and efficiency then.

04:34.230 --> 04:38.740
So that scales are second element of the state.

04:38.790 --> 04:48.300
And now let's take care of the third one which is the scaled rate of data OK so exactly the same we're

04:48.300 --> 04:53.970
going to normalize the current rate of data that we computed before which is given by this variable

04:54.210 --> 04:56.490
self current rate of data.

04:56.870 --> 05:04.440
We cannot base that here for the numerator to which we're going to subtract the minimum rate of data

05:04.440 --> 05:07.160
that can be transmitted into the server.

05:07.410 --> 05:17.150
So this one is a year and then again using the same trick for the denominator we're going to paste that

05:17.150 --> 05:26.410
twice and can replace many here by Max and not for you of course the minus right Max read data minus

05:26.410 --> 05:30.770
mean rate data and that scales the rate of data transmission.

05:30.770 --> 05:31.510
Perfect.

05:31.520 --> 05:35.700
So now we have our three elements of the state all skilled.

05:35.700 --> 05:41.270
And so we're ready to make that final vector of these three elements which therefore will give us a

05:41.270 --> 05:42.880
skilled input vector.

05:43.040 --> 05:44.130
So let's do this.

05:44.130 --> 05:51.160
We're going to go that directly the next state because any way we always want our states scale than

05:51.160 --> 05:56.750
you know then we'll return that next date which skilled and then it will feed the neural network no

05:56.990 --> 05:58.920
being propagated into it.

05:59.120 --> 06:04.070
So next date an hour how are we going to create a vector with these three elements.

06:04.070 --> 06:08.910
Well we're going to use the classic following trick by them by I'm taking the shortcut.

06:08.980 --> 06:15.530
B and then we're just going to take the matrix function which to create a vector we can just put our

06:15.530 --> 06:20.090
three elements here that we just get into some square brackets and that's it.

06:20.090 --> 06:21.510
That will just create a vector.

06:21.660 --> 06:26.690
So it's good to know and if you want to create a matrix you know with several columns Well you would

06:26.690 --> 06:29.610
have to add some extra pair of square brackets.

06:29.810 --> 06:36.650
That's not what we want to do here so let's include these three elements of the state starting with

06:36.860 --> 06:43.960
the scale temperature of the server when we have the AI then the scaled number of users in the server

06:43.980 --> 06:46.010
at this specific time t..

06:46.040 --> 06:49.230
When we're updating the environment here we go.

06:49.340 --> 06:56.310
And finally the scaled rate of data transmission which is right here and here we go.

06:56.450 --> 07:05.570
We have our final scaled input state vector which means that now we are ready to return the ultimate

07:05.810 --> 07:10.340
outcome of this whole update on function that we've just made.

07:10.400 --> 07:16.540
That is we're ready to return the next date and therefore here to finish this to finish this whole bit

07:16.580 --> 07:19.520
of method I'm just returning.

07:19.610 --> 07:24.410
Well as we can see the next day the reward and whether the game is over.

07:24.450 --> 07:28.950
And so the next date is the variable next date that we just created.

07:29.000 --> 07:34.410
Then the reward is a variable of our objects so it is selve that reward.

07:34.460 --> 07:38.950
And finally same for gameworld is a variable of our object self.

07:39.110 --> 07:40.940
Game over.

07:41.150 --> 07:42.020
And here we go.

07:42.020 --> 07:43.460
Congratulations.

07:43.460 --> 07:44.430
You did it.

07:44.480 --> 07:51.560
Implementing the update on method updating the whole environment right after an action is played by

07:51.560 --> 07:52.400
the AI.

07:52.460 --> 07:56.000
Congratulations I think that was the biggest function of this case.

07:56.000 --> 07:57.740
Number two we had to implement.

07:57.770 --> 08:03.350
So we did it and now we're just going to finish this first step of the general framework.

08:03.350 --> 08:09.410
Building the environment by making method that seem to reset the environment and that will have to do

08:09.680 --> 08:14.970
before starting each new training book and also will quickly make a method that gives us at any time

08:15.200 --> 08:17.750
the current state the last word and whether the game is over.

08:17.960 --> 08:21.950
Because at some point we'll need that in the training that will be very quick.

08:21.950 --> 08:23.930
Nothing compared to what we just did here.

08:24.050 --> 08:26.750
So we'll do that quickly in the next two tutorials.

08:26.900 --> 08:28.640
And until then enjoy AI.
