WEBVTT

00:00.750 --> 00:03.140
Hello and welcome to this new Tauriel.

00:03.150 --> 00:03.450
All right.

00:03.450 --> 00:05.580
So we prepared our while loop.

00:05.580 --> 00:07.030
Now we're about to start it.

00:07.170 --> 00:08.190
And guess what.

00:08.250 --> 00:14.510
That's where of course our matrix of q values comes into play because we will figure out exactly what

00:14.510 --> 00:16.230
this next location is.

00:16.230 --> 00:23.550
Thanks to our matrix of values by taking in the row corresponding to the location we are right now the

00:23.550 --> 00:28.940
highest Q value and then get the action corresponding to that highest Q value.

00:29.220 --> 00:32.470
So the logical of what we're going to do now is very easy.

00:32.580 --> 00:35.470
But in order to make that even easier to understand.

00:35.610 --> 00:39.560
Well let's do it with an example in our warehouse.

00:39.920 --> 00:40.240
OK.

00:40.260 --> 00:44.760
So let's say first of all that the starting location location.

00:45.060 --> 00:50.460
And remember the top priority location where we have to go is location.

00:50.880 --> 00:58.260
And therefore what we did right now is just initialize a list which is our root list which so far only

00:58.260 --> 01:01.810
contains the starting location that is location.

01:02.160 --> 01:08.340
And right now what we have to do in this world loop as a first iteration is to figure out the next location

01:08.340 --> 01:09.430
where we have to go.

01:09.720 --> 01:12.570
And so here we have the warehouse in front of us.

01:12.580 --> 01:16.840
It's pretty obvious next location where we have to go is location.

01:17.190 --> 01:22.390
So how are we going to figure out that the next location where we have to go is location.

01:22.420 --> 01:26.290
I know in terms of queue values Well that's easy.

01:26.430 --> 01:31.440
Inside our matrix of key values we're going to find the row corresponding to location.

01:31.440 --> 01:36.450
Each distro is actually the row of index 0 1 2 3 and 4.

01:36.670 --> 01:38.550
That will be the row of index.

01:38.790 --> 01:44.380
And then in the row of index 4 which is 0 1 2 3 4.

01:44.460 --> 01:48.910
This row here in the row of index for corresponding to that location.

01:49.200 --> 01:57.600
Well what we're going to do is find the column that has the maximum Q value which is this column and

01:57.600 --> 02:04.320
this column corresponds to the action we have to play right now in order to reach the next location

02:04.710 --> 02:10.350
and that's how we figure out the next location because this column corresponds to let's see the column

02:10.350 --> 02:21.930
of index 0 1 2 3 4 5 6 7 8 that corresponds to the column with index 8 and the Culham index 8 corresponds

02:21.930 --> 02:26.470
to exactly as we can see no mapping the location.

02:26.820 --> 02:27.900
And here it is.

02:28.050 --> 02:29.730
That's exactly where we have to go.

02:29.940 --> 02:31.570
So you see that's how it works.

02:31.620 --> 02:36.590
We have to figure out on the matrix of q values the column that has the highest value.

02:36.780 --> 02:42.450
When we are in a specific row corresponding to the starting location and that's why right now what we

02:42.450 --> 02:45.330
have to do is find that highest Q value.

02:45.690 --> 02:51.260
So first of all let's get obviously the row where we are right now.

02:51.300 --> 02:58.140
That is the road corresponding to our starting location and therefore I'm going to introduce a new variable

02:58.140 --> 03:06.870
here that is going to be our starting state because indeed that starting state will be exactly the index

03:07.170 --> 03:10.600
of the Roker's on into the location we are right now.

03:10.620 --> 03:16.620
All right so remember starting location just as ending location will be the letter the letter of the

03:16.620 --> 03:18.900
location where we start.

03:18.900 --> 03:21.680
And therefore since right now I need an index.

03:21.840 --> 03:28.200
Well I need to convert that letter starting location into the index of the row corresponding to that

03:28.200 --> 03:34.170
starting location and to make that conversion of course I'm going to use the mapping we did here location

03:34.280 --> 03:35.110
to state.

03:35.140 --> 03:38.580
I'm going to get my location to say dictionary.

03:38.760 --> 03:47.630
I'm going to input the key value the letter E because we're starting from location B and then this dictionary

03:47.630 --> 03:49.990
will return exactly what we need right now.

03:50.090 --> 03:54.660
That is index of the row corresponding to the location we are right now.

03:54.950 --> 04:06.200
So let's do this let's get our location to state dictionary which takes as input the starting location

04:07.640 --> 04:11.150
where we are right now that is the letter so far.

04:11.330 --> 04:17.330
And this will return exactly the starting state because remember that the states are the indexes and

04:17.330 --> 04:18.710
not the letters.

04:18.700 --> 04:19.040
All right.

04:19.040 --> 04:19.500
Perfect.

04:19.490 --> 04:25.970
So first of all we just got the row in our matrix of q values and now the next step is to figure out

04:26.180 --> 04:28.280
the maximum Q value.

04:28.520 --> 04:29.620
Inside this row.

04:29.840 --> 04:34.520
And so now based on the Prue's tutorials Can you guess what we are going into.

04:34.520 --> 04:37.930
We're going to use a trick that we already used before.

04:38.310 --> 04:43.710
You remember how can we get the action that maximizes the values in this row.

04:43.880 --> 04:49.350
Well again we're going to use the very useful RMX function by name by.

04:49.790 --> 04:55.850
Because the arguments function functional my number by Will exactly give us the action that is the column

04:56.210 --> 04:59.750
that contains this highest Q value.

04:59.750 --> 05:06.440
And remember this our max function returns the index of the column that is this action that corresponds

05:06.440 --> 05:07.940
to this highest Q run.

05:07.970 --> 05:10.700
And again remember that the action is nothing else.

05:10.700 --> 05:16.970
And the next date that we reach by playing that action and therefore what we're going to return right

05:16.970 --> 05:24.900
now is exactly the next state we reach by playing that action and that action we get it.

05:24.980 --> 05:28.650
Thanks to the ARG max function.

05:28.700 --> 05:35.100
By and by and here it's exactly the same to figure out this action that corresponds to the maximum Q

05:35.140 --> 05:35.770
value.

05:35.990 --> 05:39.340
Well we just need to get exactly as we did here.

05:39.350 --> 05:47.370
But of course we are going to replace the next state by of course the starting state.

05:47.780 --> 05:48.070
Right.

05:48.080 --> 05:53.840
Because here we're getting the action that will give us the highest Q value in the row corresponding

05:53.840 --> 05:54.990
to the starting state.

05:55.040 --> 05:58.010
And here was the Roker's by into the next state.

05:58.100 --> 05:58.810
All right.

05:58.860 --> 06:00.350
And so that gives us the next date.

06:00.350 --> 06:01.460
Perfect.

06:01.460 --> 06:05.630
That gives us basically the next location where we have to go.

06:05.960 --> 06:13.340
But remember we want to return our roots in the form of successive letters and successive indexes so

06:13.340 --> 06:15.450
that we can read that easily.

06:15.460 --> 06:22.520
So now what we have to do is make an inverse mapping to convert this next date which is the index of

06:22.520 --> 06:26.440
the location where we have to go into the letter of the location.

06:26.570 --> 06:26.870
Right.

06:26.870 --> 06:29.930
That is in to the letter right now.

06:29.930 --> 06:35.790
Actually this next date is index corresponding to location that is indexed 8 actually.

06:36.170 --> 06:38.000
And we don't want to have x 8.

06:38.000 --> 06:39.610
We want to have the letter.

06:39.800 --> 06:47.520
So we'll have to make an inverse mapping mapping actually this time index this year to the letters.

06:47.750 --> 06:52.580
But we're not going to do that inside this function we're actually going to make a separate tool that

06:52.580 --> 06:57.200
we're going to put before that function that actually happens all the time you know when you're making

06:57.200 --> 06:59.290
a function and you need it to.

06:59.420 --> 07:05.660
Well you can make this tool either in the function but it's actually more clean and more clear to do

07:05.660 --> 07:06.900
that separately.

07:06.920 --> 07:11.390
So that's exactly what we're going to do in the next toile we're going to make that inversed mapping

07:11.390 --> 07:15.380
dictionary mapping the locations indexes to the locations names.

07:15.620 --> 07:21.500
And then we'll finish this well loop to figure out the next location and then eventually figure out

07:21.620 --> 07:23.060
the optimal route.

07:23.060 --> 07:23.710
All right.

07:23.810 --> 07:26.960
So let's do this in the next tutorial and until then enjoy.
