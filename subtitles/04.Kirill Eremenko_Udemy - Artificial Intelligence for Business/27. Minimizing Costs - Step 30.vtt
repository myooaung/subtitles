WEBVTT

00:00.630 --> 00:07.650
All right let's do this let's do the alternative way of playing an action this time not randomly but

00:07.710 --> 00:16.170
by inference meaning that we'll get the action from our brain and more precisely from the novel we got

00:16.170 --> 00:17.510
here from the brain.

00:17.640 --> 00:24.630
And so the else here is where we left off and corresponds to the situation where the random number extracted

00:24.720 --> 00:28.390
is above Epsilon that is 0.3 and therefore the.

00:28.400 --> 00:34.470
Else here as we explained in the Preuss tutorial will happen 70 percent of the time which means that

00:34.680 --> 00:39.230
70 percent of the time we'll play the next action by inference.

00:39.510 --> 00:40.840
All right so let's do this.

00:40.860 --> 00:46.730
It's going to be actually really really easy thanks of course to everything we've made before.

00:46.740 --> 00:53.370
And he of course thinks it's a brain class we made because Indie's right now we want to return an action

00:53.370 --> 01:00.510
by inference meaning that we want to return the prediction of this new network that we built here and

01:00.810 --> 01:08.070
luckily we build this model here with Claris right because the model is an object of the model class

01:08.340 --> 01:12.300
and this model class is a class defined in the Cara's API.

01:12.420 --> 01:16.740
And this class has a method which is to predict method.

01:16.740 --> 01:17.600
So good news.

01:17.610 --> 01:24.380
The only thing that we have to do right now is go to predict method from the model to get the prediction.

01:24.510 --> 01:31.500
And remember very important the prediction of the moral returned by this predict method is not the action

01:31.500 --> 01:35.970
directly but the q values for each of the five actions.

01:35.970 --> 01:41.760
So we'll get five key values one for the action of index 0 1 for the action of the next one then 2 3

01:41.850 --> 01:48.660
and 4 and then what we'll do as I explained in the book or as I probably said before we are going to

01:48.660 --> 01:52.020
select the action that has the maximum Q value.

01:52.170 --> 01:54.890
And this method is called the ARG Max method.

01:54.900 --> 02:00.980
So just a few words on why we choose to apply RMX method as opposed to the soft next method.

02:01.170 --> 02:07.770
Well that's because we're dealing with a business problem and a business problem is not as complex as

02:08.040 --> 02:13.380
the other specific problems you can encounter when doing the enforcement and in which are for example

02:13.560 --> 02:19.740
playing chess playing Go playing chorusing or playing some games like breakout or doom for them for

02:19.740 --> 02:26.700
these games you will need to do some more exploration and the soft Max method actually allows to do

02:26.700 --> 02:28.720
some more exploration here.

02:28.740 --> 02:34.140
That's not really necessary and you will see that the RMX method will work perfectly well and that's

02:34.140 --> 02:35.550
why we're going to go for it.

02:35.550 --> 02:36.190
All right.

02:36.300 --> 02:44.310
So we have all the elements we need and therefore let's run that inference at that specific time step

02:44.880 --> 02:49.920
and to do this the first thing we're going to do is introduce a new variable which are going to be our

02:49.920 --> 02:54.690
cube values returned at specific times that by tomorrow.

02:54.720 --> 02:58.100
And speaking of the model that's exactly what we need right now.

02:58.200 --> 03:05.580
So I'm going to get the model that we created here by extracting it from our brain because remember

03:05.760 --> 03:12.540
this model here is a variable of the brain class that is of our brain object.

03:12.660 --> 03:19.340
Indeed that's this variable here which we compiled with an atom optimizer and an embassy loss.

03:19.530 --> 03:22.420
And so I'm going to get this model.

03:22.590 --> 03:30.380
And again since this model is actually an object of the model class and since the middle class has a

03:30.390 --> 03:36.090
predefined and pre-build predict method you know all built in the Cara's API.

03:36.300 --> 03:42.630
Well we can directly take this pretty method and this method will exactly give us what we need.

03:42.630 --> 03:49.770
That is argue values but of course now in order to get these values we need to put the right state which

03:49.770 --> 03:52.920
is of course right now at this stage the current state.

03:53.040 --> 03:57.660
Then you will see we will update the current state but right now at this stage of the implementation

03:57.870 --> 04:01.660
we are dealing with the current state that was initialized here.

04:01.800 --> 04:04.880
So I'm copying this pasting in inside.

04:05.130 --> 04:07.970
And that gives us the core values that are.

04:08.010 --> 04:11.970
I predict when we are in this specific current state.

04:11.970 --> 04:12.730
Perfect.

04:12.750 --> 04:18.660
And so now that we have the q values Well we can get the action you know which is this time of course

04:18.660 --> 04:25.730
is going to be one action and that as we said is going to be the action that has the maximum of these

04:25.730 --> 04:28.450
key values predicted by our model.

04:28.560 --> 04:35.080
And so to get the maximum of these values Well we're going to use none by because indeed Nampa has the

04:35.180 --> 04:39.540
Oregon max function which will give us exactly what we need.

04:39.540 --> 04:44.590
That is the action that corresponds to the maximum of these values.

04:44.730 --> 04:50.940
And therefore here in the Argin Max method I just have to enter the queue values.

04:51.010 --> 04:53.670
However Duvalier's has a specific structure.

04:53.790 --> 04:59.130
It's actually an array of several columns instead of you know being a single can contain five key values

04:59.130 --> 05:00.140
and five rows.

05:00.140 --> 05:06.170
No it's actually an array but the queue values are in the first column at that rate and therefore to

05:06.170 --> 05:13.440
get why only 1 which are the q values Well I'm going to get the first index of this array that is zero.

05:13.520 --> 05:18.320
So that gives me the first column of that array which contains all the q values.

05:18.320 --> 05:19.040
Perfect.

05:19.040 --> 05:21.140
So now we have the action.

05:21.140 --> 05:21.830
And so.

05:21.980 --> 05:28.010
Well now we're going to do exactly the same as what we did here you know to get the energy spent by

05:28.010 --> 05:33.830
the AI on the server because indeed once we get the action well the only thing that we need to do is

05:33.830 --> 05:38.090
get the direction which we're going to get with the exact same method here.

05:38.210 --> 05:44.210
And then thanks to the direction we can compute the energy spent by the AI with this exact same formula.

05:44.210 --> 05:55.760
So what I only need to do here is just copy this here we go and paste it right here and there we go.

05:55.790 --> 05:59.680
The inference is done all in efficiency.

05:59.870 --> 06:06.110
Perfect So now we can really move onto the next step because we have our action and we have our direction

06:06.110 --> 06:07.190
of temperature change.

06:07.190 --> 06:08.950
And also we had energy spent.

06:09.020 --> 06:16.070
So basically we have everything we need to update the environment because indeed the update on method

06:16.460 --> 06:23.000
requires exactly what we just computed which are the direction and the energy spent by the AI and also

06:23.000 --> 06:23.410
the month.

06:23.420 --> 06:25.310
But we already got that before.

06:25.520 --> 06:30.890
So we can move on to the next step confidently and we'll do that in the next tutorial.

06:31.160 --> 06:32.810
Until then enjoy AI.
