WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.410
Hi, we finally reached our final JavaScript topic,

00:00:04.410 --> 00:00:08.355
a sink and sink code promises and async await.

00:00:08.355 --> 00:00:12.150
This is the most important topic in modern GS,

00:00:12.150 --> 00:00:14.970
knowledge of that topic is essential.

00:00:14.970 --> 00:00:16.335
Without that knowledge,

00:00:16.335 --> 00:00:19.605
JavaScript development will never feel complete for you.

00:00:19.605 --> 00:00:21.600
That is why I suggest to get as much

00:00:21.600 --> 00:00:24.150
comfortable with this topic as possible.

00:00:24.150 --> 00:00:28.485
To understand a sink and sink code and promises,

00:00:28.485 --> 00:00:31.124
you must understand more deeper topics,

00:00:31.124 --> 00:00:33.195
how GPS works under the hood,

00:00:33.195 --> 00:00:35.485
what is event loop and call stack?

00:00:35.485 --> 00:00:37.100
In this video, I will try to

00:00:37.100 --> 00:00:39.800
explain in simple terms how JavaScript

00:00:39.800 --> 00:00:41.720
works in order to then

00:00:41.720 --> 00:00:45.305
understand the concept of promises, let go.

00:00:45.305 --> 00:00:47.420
What you see on the screen right now is

00:00:47.420 --> 00:00:49.220
a high level overview of how

00:00:49.220 --> 00:00:51.275
JavaScript executes the code.

00:00:51.275 --> 00:00:54.935
This image describes how GS runs inside the browser.

00:00:54.935 --> 00:00:57.365
For NodeJS, it will be slightly different,

00:00:57.365 --> 00:00:59.765
but it's fine to use it for our use case.

00:00:59.765 --> 00:01:01.475
So in yellow frame,

00:01:01.475 --> 00:01:04.025
you can see parts of JavaScript engine

00:01:04.025 --> 00:01:06.950
which are called heap and call stack.

00:01:06.950 --> 00:01:10.325
Heap is in memory allocated space where

00:01:10.325 --> 00:01:14.030
all defined variables live during code execution.

00:01:14.030 --> 00:01:16.715
Call stack is that throughput place

00:01:16.715 --> 00:01:19.879
where JavaScript decides what to execute.

00:01:19.879 --> 00:01:22.820
Next, we will talk about call stack and a moment.

00:01:22.820 --> 00:01:24.635
Outside of the GS frame,

00:01:24.635 --> 00:01:26.945
you can see web APIs,

00:01:26.945 --> 00:01:29.045
callback, queue, and event loop.

00:01:29.045 --> 00:01:32.855
These all are not part of the JavaScript engine.

00:01:32.855 --> 00:01:34.760
It means that they are defined by

00:01:34.760 --> 00:01:37.580
the environment where JavaScript runs.

00:01:37.580 --> 00:01:41.224
We know two primary JavaScript execution environments,

00:01:41.224 --> 00:01:42.905
browser and NodeJS.

00:01:42.905 --> 00:01:45.680
For example, web APIs include

00:01:45.680 --> 00:01:49.550
things such as DOM API or Fetch API,

00:01:49.550 --> 00:01:52.024
which are part of the browser environment.

00:01:52.024 --> 00:01:56.420
Only, web APIs are not implemented in Node.JS.

00:01:56.420 --> 00:01:59.000
We don't have HTML manipulation features

00:01:59.000 --> 00:02:02.165
like document get element by ID and NodeJS.

00:02:02.165 --> 00:02:04.040
These are features implemented in

00:02:04.040 --> 00:02:06.695
the browser environment only know gs,

00:02:06.695 --> 00:02:10.055
however, implements a few things from web APIs.

00:02:10.055 --> 00:02:11.900
For instance, set a timeout.

00:02:11.900 --> 00:02:14.690
They look exactly the same in both environments,

00:02:14.690 --> 00:02:15.845
but under the hood,

00:02:15.845 --> 00:02:17.675
the implementation is different.

00:02:17.675 --> 00:02:19.835
You might have already heard that

00:02:19.835 --> 00:02:22.535
JavaScript is single threaded language.

00:02:22.535 --> 00:02:24.050
But what does this mean?

00:02:24.050 --> 00:02:26.885
It means that JavaScript has a single call stack.

00:02:26.885 --> 00:02:29.900
As single call stack means that the language can

00:02:29.900 --> 00:02:32.960
process only one operation at a time.

00:02:32.960 --> 00:02:35.060
Imagine a simple doorway.

00:02:35.060 --> 00:02:38.120
Few people around trying to go through

00:02:38.120 --> 00:02:41.405
the doorway can fit only one person at a time.

00:02:41.405 --> 00:02:43.400
It cannot fit to people at

00:02:43.400 --> 00:02:46.715
the same time when first-person goes into the doorway.

00:02:46.715 --> 00:02:48.620
And if that person gets taller

00:02:48.620 --> 00:02:50.660
than other people trying to get through

00:02:50.660 --> 00:02:53.810
the doorway will have to wait because they are unable to

00:02:53.810 --> 00:02:57.620
enter only after the stock person leaves the doorway,

00:02:57.620 --> 00:02:59.240
other people will be able to

00:02:59.240 --> 00:03:01.850
continue and go through the same with

00:03:01.850 --> 00:03:04.370
JavaScript engine if there are two lines

00:03:04.370 --> 00:03:06.949
of code going one after another,

00:03:06.949 --> 00:03:09.110
for instance, two console logs,

00:03:09.110 --> 00:03:11.840
we know that first line of code will always

00:03:11.840 --> 00:03:15.350
run first and only after first-line finishes,

00:03:15.350 --> 00:03:17.615
second line will be executed.

00:03:17.615 --> 00:03:19.805
It means that if first line of code

00:03:19.805 --> 00:03:22.310
will take five years to be executed,

00:03:22.310 --> 00:03:24.590
the second line of code will wait

00:03:24.590 --> 00:03:27.920
all those five years for the first operation to finish,

00:03:27.920 --> 00:03:30.650
and only after that it will be executed.

00:03:30.650 --> 00:03:32.750
So again, JavaScript is

00:03:32.750 --> 00:03:35.870
a single threaded language with the single call stack.

00:03:35.870 --> 00:03:37.580
Because of a single call stack,

00:03:37.580 --> 00:03:41.645
GS engine can process only one operation at a time.

00:03:41.645 --> 00:03:44.435
Call stack is a temporary storage for

00:03:44.435 --> 00:03:47.255
all pending functions to be executed.

00:03:47.255 --> 00:03:49.565
And it is organized as a stack,

00:03:49.565 --> 00:03:53.495
a structure which follows last first out method.

00:03:53.495 --> 00:03:56.315
Last in, first out means that

00:03:56.315 --> 00:03:57.890
last element added to

00:03:57.890 --> 00:04:00.755
the storage will always be removed first,

00:04:00.755 --> 00:04:04.445
a pile of plates is a perfect example of last in,

00:04:04.445 --> 00:04:06.920
first out, imagine a pile of plates.

00:04:06.920 --> 00:04:09.185
You stack plates on top of each other.

00:04:09.185 --> 00:04:11.930
Once you have templates on top of each other,

00:04:11.930 --> 00:04:13.280
Let's say you need to remove

00:04:13.280 --> 00:04:15.530
the very first plate from the bottom.

00:04:15.530 --> 00:04:17.780
You can't just take it from the bottom right?

00:04:17.780 --> 00:04:18.905
If you would do that,

00:04:18.905 --> 00:04:22.115
the pile will fall and plates will scatter.

00:04:22.115 --> 00:04:24.320
The only way for you to take that played

00:04:24.320 --> 00:04:27.080
off is to remove all the plates from the top,

00:04:27.080 --> 00:04:28.850
one by one until you reach

00:04:28.850 --> 00:04:30.875
the desired plate at the bottom,

00:04:30.875 --> 00:04:34.294
these type of organization is called stack.

00:04:34.294 --> 00:04:35.990
The last plate added to

00:04:35.990 --> 00:04:38.990
the pile will get off that pile first.

00:04:38.990 --> 00:04:42.590
Thus, the name last in first out.

00:04:42.590 --> 00:04:44.735
Java's could call stack follows

00:04:44.735 --> 00:04:46.865
exactly the same organization.

00:04:46.865 --> 00:04:48.499
Now imagine a container.

00:04:48.499 --> 00:04:51.005
That container is going to be the call stack.

00:04:51.005 --> 00:04:54.050
On the left, there is a simple piece of code.

00:04:54.050 --> 00:04:57.155
Let's see how JavaScript would protest that snippet.

00:04:57.155 --> 00:04:59.839
Javascript splits the code into functions.

00:04:59.839 --> 00:05:02.240
When JavaScript must execute a function,

00:05:02.240 --> 00:05:05.390
the function is added to the top of the call stack.

00:05:05.390 --> 00:05:08.825
Every time the function exits or returns,

00:05:08.825 --> 00:05:10.925
it is removed from the call stack.

00:05:10.925 --> 00:05:15.095
So first, JavaScript sees console.log. Are you ready?

00:05:15.095 --> 00:05:16.895
It is added to the call stack

00:05:16.895 --> 00:05:19.955
than executed and immediately removed.

00:05:19.955 --> 00:05:23.990
After that gs, Cs, print my bio,

00:05:23.990 --> 00:05:27.935
it gets added to the call stack inside print my bio,

00:05:27.935 --> 00:05:31.265
GS first sees, get first my name,

00:05:31.265 --> 00:05:32.990
which means it has been added

00:05:32.990 --> 00:05:34.820
to the top of the call stack.

00:05:34.820 --> 00:05:37.610
Gs looks inside, Get FirstName

00:05:37.610 --> 00:05:40.700
and sees that this function returns a value.

00:05:40.700 --> 00:05:42.454
Once the function returns,

00:05:42.454 --> 00:05:44.915
GS, removes it from the call stack.

00:05:44.915 --> 00:05:48.065
The execution of print my bio continues.

00:05:48.065 --> 00:05:51.995
Now gs, Cs function getAge, the same situation.

00:05:51.995 --> 00:05:54.755
Gs looks inside getAge,

00:05:54.755 --> 00:05:56.480
the function returns and

00:05:56.480 --> 00:05:58.355
gets removed from the call stack.

00:05:58.355 --> 00:06:00.665
Then there is final console.log.

00:06:00.665 --> 00:06:01.895
My name is Andrew,

00:06:01.895 --> 00:06:03.335
my age is 10,

00:06:03.335 --> 00:06:05.330
added and instantly removed.

00:06:05.330 --> 00:06:08.510
Print my bio exits and call stack is empty.

00:06:08.510 --> 00:06:13.235
Now the execution of main code or mainframe is finished.

00:06:13.235 --> 00:06:17.075
The notorious maximum call stack exceeded or

00:06:17.075 --> 00:06:21.200
stack overflow errors occur when call stack size is

00:06:21.200 --> 00:06:24.860
inflated and the number became ridiculously huge that

00:06:24.860 --> 00:06:26.630
the engine cannot process

00:06:26.630 --> 00:06:29.720
that number of operations inside the call stack.

00:06:29.720 --> 00:06:32.390
Because JavaScript has a single call stack

00:06:32.390 --> 00:06:35.120
which is organized in a way that you just saw.

00:06:35.120 --> 00:06:36.920
It is called blocking.

00:06:36.920 --> 00:06:39.605
Remember, one operation at a time,

00:06:39.605 --> 00:06:41.030
next function will not be

00:06:41.030 --> 00:06:43.489
executed until previous finishes.

00:06:43.489 --> 00:06:46.400
This leads us to the term synchronous,

00:06:46.400 --> 00:06:48.755
which basically means execution goes

00:06:48.755 --> 00:06:51.680
one by one as we see it in the code.

00:06:51.680 --> 00:06:53.645
The blocking behavior can be

00:06:53.645 --> 00:06:56.435
easily absorbed inside the browser environment.

00:06:56.435 --> 00:06:59.540
On any page, right-click, select,

00:06:59.540 --> 00:07:02.915
Inspect, and then open the console tab.

00:07:02.915 --> 00:07:05.734
Inside the console tab we're able to execute

00:07:05.734 --> 00:07:08.690
any valid JavaScript inside the browser.

00:07:08.690 --> 00:07:11.390
For example, console.log.

00:07:11.390 --> 00:07:16.265
Wow will produce wow printed in the console.

00:07:16.265 --> 00:07:17.930
Perfect. But what about

00:07:17.930 --> 00:07:20.690
the blocking behavior inside the browser environment,

00:07:20.690 --> 00:07:23.240
we have the alert function and it is

00:07:23.240 --> 00:07:26.645
a good example to demonstrate the blocking behavior.

00:07:26.645 --> 00:07:30.095
So I'm going to type Alert high.

00:07:30.095 --> 00:07:32.014
And once I press Enter,

00:07:32.014 --> 00:07:34.070
what happens is that first I

00:07:34.070 --> 00:07:37.145
see the pop-up which says high,

00:07:37.145 --> 00:07:39.155
but what happens under the hood?

00:07:39.155 --> 00:07:41.810
Under the hood, the alert function was

00:07:41.810 --> 00:07:45.470
added to the call stack and it haven't been

00:07:45.470 --> 00:07:48.410
removed yet because alert did not

00:07:48.410 --> 00:07:52.400
exit and alert did not return any value,

00:07:52.400 --> 00:07:54.485
which means that alert

00:07:54.485 --> 00:07:56.780
is still inside the call stack and it

00:07:56.780 --> 00:08:01.295
blocks the execution of all subsequent function calls.

00:08:01.295 --> 00:08:05.075
I'm going to console log anything.

00:08:05.075 --> 00:08:06.890
When I press Enter.

00:08:06.890 --> 00:08:10.940
Nothing happens because currently at this moment,

00:08:10.940 --> 00:08:13.235
alert is inside the call stack

00:08:13.235 --> 00:08:15.335
and it blocks the execution,

00:08:15.335 --> 00:08:18.035
and it will continue to block the execution

00:08:18.035 --> 00:08:21.035
until the alert function returns or exit.

00:08:21.035 --> 00:08:23.345
And that's going to happen what I'm going to press,

00:08:23.345 --> 00:08:26.405
Okay, so I'm going to press console.log.

00:08:26.405 --> 00:08:28.310
I'm going to execute console log two more

00:08:28.310 --> 00:08:30.815
times and then I'm going to press okay,

00:08:30.815 --> 00:08:32.960
Let's see what is going to happen.

00:08:32.960 --> 00:08:33.680
Now.

00:08:33.680 --> 00:08:37.685
You see how everything just unfrozen under the hood.

00:08:37.685 --> 00:08:40.370
The alert function was removed from

00:08:40.370 --> 00:08:43.474
the call stack and the execution continued.

00:08:43.474 --> 00:08:44.570
That's why I can see

00:08:44.570 --> 00:08:49.370
all my S3 console logs for which I pressed Enter earlier.

00:08:49.370 --> 00:08:50.210
Great.

00:08:50.210 --> 00:08:52.970
Now we understand the sync code.

00:08:52.970 --> 00:08:55.520
As you can see, it is not very convenient to

00:08:55.520 --> 00:08:58.370
always wait for one operation to finish.

00:08:58.370 --> 00:09:01.490
This is where a sync code comes to the rescue.

00:09:01.490 --> 00:09:04.955
When JavaScript reads a sink piece of code,

00:09:04.955 --> 00:09:07.295
it is processed, not executed,

00:09:07.295 --> 00:09:10.505
processed in the background, and once processed,

00:09:10.505 --> 00:09:14.345
it is then placed in a separate to waiting queue,

00:09:14.345 --> 00:09:18.365
which waits for the call stack to become empty when

00:09:18.365 --> 00:09:23.150
all sync code is executed and call stack becomes empty,

00:09:23.150 --> 00:09:26.585
async code, which was placed in the waiting queue,

00:09:26.585 --> 00:09:30.800
is pushed into the call stack and is now being executed.

00:09:30.800 --> 00:09:32.975
There are special language features which

00:09:32.975 --> 00:09:35.510
allow us to write async code.

00:09:35.510 --> 00:09:37.790
These are promises and callbacks,

00:09:37.790 --> 00:09:39.575
implementations of which are

00:09:39.575 --> 00:09:42.290
exposed to us by the environment.

00:09:42.290 --> 00:09:44.570
Browsers, web APIs process

00:09:44.570 --> 00:09:46.700
the code in the background and delay

00:09:46.700 --> 00:09:50.405
its execution event loop in this system is

00:09:50.405 --> 00:09:51.920
some sort of a watcher for

00:09:51.920 --> 00:09:54.740
the call stack and the awaiting Async queue,

00:09:54.740 --> 00:09:56.960
once called stack is empty.

00:09:56.960 --> 00:09:59.600
Event loop pulls items from

00:09:59.600 --> 00:10:03.380
the waiting queue and places them into the call stack.

00:10:03.380 --> 00:10:05.195
These concept introduces

00:10:05.195 --> 00:10:07.670
a non-blocking code execution model.

00:10:07.670 --> 00:10:10.115
It does not change the fact that call stack

00:10:10.115 --> 00:10:12.650
can process only one operation at a time,

00:10:12.650 --> 00:10:15.935
but it allows to run the code in a non-blocking manner.

00:10:15.935 --> 00:10:18.665
Let's consider a case with two operations.

00:10:18.665 --> 00:10:19.835
Send a request to

00:10:19.835 --> 00:10:22.490
a server and print hello to the console.

00:10:22.490 --> 00:10:23.990
The request would take

00:10:23.990 --> 00:10:27.920
500 milliseconds to finish while printing Hello would

00:10:27.920 --> 00:10:30.635
take only ten milliseconds if going

00:10:30.635 --> 00:10:33.680
with sync modal console log would have to

00:10:33.680 --> 00:10:36.650
wait 500 milliseconds for the request you

00:10:36.650 --> 00:10:39.830
finish and only then hello gets printed.

00:10:39.830 --> 00:10:41.750
With the non-blocking model,

00:10:41.750 --> 00:10:43.385
the request would be processed

00:10:43.385 --> 00:10:45.604
asynchronously in the background.

00:10:45.604 --> 00:10:49.025
Well, sync code continues its execution.

00:10:49.025 --> 00:10:52.145
We would see Hello gets printed right straight away

00:10:52.145 --> 00:10:55.580
after ten milliseconds and the request in the background,

00:10:55.580 --> 00:10:58.370
we'll finish its execution sometime in

00:10:58.370 --> 00:11:02.360
the future after 500 milliseconds under the hood,

00:11:02.360 --> 00:11:04.835
there are actually multiple waiting queues.

00:11:04.835 --> 00:11:09.590
One for timers, one for cold bags, 14 promises, etc.

00:11:09.590 --> 00:11:12.740
They have different priorities and certain order.

00:11:12.740 --> 00:11:15.410
For instance, promises have priority over

00:11:15.410 --> 00:11:18.245
callbacks to not over-complicate on this,

00:11:18.245 --> 00:11:19.310
let's imagine there is

00:11:19.310 --> 00:11:22.310
one single queue for all async code.

00:11:22.310 --> 00:11:25.445
One of the examples of async code is callbacks.

00:11:25.445 --> 00:11:27.350
Callback is a function that is

00:11:27.350 --> 00:11:30.065
passed as an argument to another function.

00:11:30.065 --> 00:11:32.810
Callbacks are not Async by default,

00:11:32.810 --> 00:11:36.560
but those exposed by the web APIs actually are.

00:11:36.560 --> 00:11:39.635
For example, let's take a look at setTimeout.

00:11:39.635 --> 00:11:43.400
It is available in both know gs and browser environments.

00:11:43.400 --> 00:11:45.425
We're going to take a look at two examples.

00:11:45.425 --> 00:11:48.035
One inside no GS and one inside the browser.

00:11:48.035 --> 00:11:49.580
It actually doesn't matter where

00:11:49.580 --> 00:11:51.335
we're going to use setTimeout.

00:11:51.335 --> 00:11:53.990
But the more the better, isn't it?

00:11:53.990 --> 00:11:56.555
The first example is going to be inside no GS.

00:11:56.555 --> 00:11:59.450
And I already have prepared this simple piece of

00:11:59.450 --> 00:12:02.975
code with two console logs and setTimeout.

00:12:02.975 --> 00:12:06.590
So setTimeout expects us to supply two arguments,

00:12:06.590 --> 00:12:09.440
where the first argument is the callback that will be

00:12:09.440 --> 00:12:13.610
executed after the number of milliseconds that we supply.

00:12:13.610 --> 00:12:14.990
As a second argument,

00:12:14.990 --> 00:12:17.420
in this case, I supply at 0 milliseconds,

00:12:17.420 --> 00:12:21.365
it means that the execution will not be delayed.

00:12:21.365 --> 00:12:24.065
But let's see how the code will be executed.

00:12:24.065 --> 00:12:25.625
Can you guess the outcome?

00:12:25.625 --> 00:12:27.080
What will come first?

00:12:27.080 --> 00:12:32.120
Let's see. I'm going to run the script and we see 1,

00:12:32.120 --> 00:12:35.464
2, and only then timeout fires.

00:12:35.464 --> 00:12:38.375
The thing is that setTimeout is asynchronous.

00:12:38.375 --> 00:12:40.550
It means that the timeout,

00:12:40.550 --> 00:12:42.545
the callback was added

00:12:42.545 --> 00:12:45.365
to the callback queue in the background.

00:12:45.365 --> 00:12:52.280
I'm going to supply 2504.52 seconds.

00:12:52.280 --> 00:12:55.100
Let's see how the picture will be different.

00:12:55.100 --> 00:12:58.685
I execute the script, I see 12.

00:12:58.685 --> 00:13:02.270
Then I see the delay of 2.5 seconds.

00:13:02.270 --> 00:13:06.230
And only then IC timeout fires under the hood.

00:13:06.230 --> 00:13:09.020
Settimeout was processed by the code.

00:13:09.020 --> 00:13:12.110
Settimeout was added to the call stack,

00:13:12.110 --> 00:13:16.415
but the callback and the timer execution were

00:13:16.415 --> 00:13:18.245
delegated to the Node.js

00:13:18.245 --> 00:13:20.825
APIs to be processed in the background,

00:13:20.825 --> 00:13:23.420
setTimeout was removed from the call stack.

00:13:23.420 --> 00:13:25.820
It means that the execution continues.

00:13:25.820 --> 00:13:27.020
Then we see console log

00:13:27.020 --> 00:13:30.080
one to the call stack and instantly removed.

00:13:30.080 --> 00:13:32.330
And the same with second console log

00:13:32.330 --> 00:13:34.955
added to the call stack and instantly removed.

00:13:34.955 --> 00:13:36.575
And once in the background,

00:13:36.575 --> 00:13:38.855
the timer is done processing

00:13:38.855 --> 00:13:41.705
after 2.5 seconds in the future.

00:13:41.705 --> 00:13:44.030
These callback will be added from

00:13:44.030 --> 00:13:46.040
the background callback queue

00:13:46.040 --> 00:13:48.470
into the call stack and then execute it.

00:13:48.470 --> 00:13:50.210
And it doesn't really matter how many

00:13:50.210 --> 00:13:53.210
milliseconds I'm going to supply for the second argument.

00:13:53.210 --> 00:13:56.105
It will be always protest in a non-blocking manner,

00:13:56.105 --> 00:13:59.150
and it will be pushed towards the callback queue.

00:13:59.150 --> 00:14:03.050
And only after the call stack will become empty,

00:14:03.050 --> 00:14:06.620
the event loop will pull that callback from

00:14:06.620 --> 00:14:08.870
the background callback queue

00:14:08.870 --> 00:14:10.955
and push it into the call stack.

00:14:10.955 --> 00:14:13.520
It doesn't matter how many milliseconds I

00:14:13.520 --> 00:14:16.475
supply or where I put this code,

00:14:16.475 --> 00:14:19.265
it will be always protest asynchronously.

00:14:19.265 --> 00:14:23.195
If I put it in between and I supply 0 milliseconds,

00:14:23.195 --> 00:14:25.400
the picture is the same.

00:14:25.400 --> 00:14:27.350
Let's take a look at second example.

00:14:27.350 --> 00:14:29.765
You can see a very basic index HTML,

00:14:29.765 --> 00:14:34.025
which has a single button element with id, btn.

00:14:34.025 --> 00:14:35.300
Then inside the script,

00:14:35.300 --> 00:14:38.810
I just pulled that button using the DOM API,

00:14:38.810 --> 00:14:42.890
documented credits selector, hashtag, my btn.

00:14:42.890 --> 00:14:44.450
Then to that button element,

00:14:44.450 --> 00:14:48.815
I attach a listener for the onClick event

00:14:48.815 --> 00:14:50.990
and for the onClick event on

00:14:50.990 --> 00:14:53.630
BET and click function will fire.

00:14:53.630 --> 00:14:55.160
Right now it is empty,

00:14:55.160 --> 00:14:59.525
but let's add something inside console log hello.

00:14:59.525 --> 00:15:01.430
And let me actually open that

00:15:01.430 --> 00:15:03.845
index.HTML inside the browser.

00:15:03.845 --> 00:15:07.115
Right-click reveal in File Explorer.

00:15:07.115 --> 00:15:10.070
Double-click on it and boom, here we go.

00:15:10.070 --> 00:15:12.185
Right-click Inspect.

00:15:12.185 --> 00:15:14.270
And I open the console tab,

00:15:14.270 --> 00:15:18.290
I press click me and I see hello gets printed just like

00:15:18.290 --> 00:15:22.565
we defined inside the handler for the onClick event.

00:15:22.565 --> 00:15:25.520
Perfect, let's actually copy and paste the code

00:15:25.520 --> 00:15:29.570
that we had in no GS to the handler.

00:15:29.570 --> 00:15:32.750
Now, is the behavior going

00:15:32.750 --> 00:15:35.390
to be the same as inside no, GS.

00:15:35.390 --> 00:15:36.770
Let's verify that.

00:15:36.770 --> 00:15:39.860
I go back to the browser, refresh the page.

00:15:39.860 --> 00:15:42.590
I press the button and as I can see,

00:15:42.590 --> 00:15:44.390
first goes 1, 2,

00:15:44.390 --> 00:15:47.345
and only then timeout fires,

00:15:47.345 --> 00:15:50.570
even though it is placed in between console logs.

00:15:50.570 --> 00:15:53.300
If I put it at the job and if I'm going

00:15:53.300 --> 00:15:56.794
to put let's say two seconds.

00:15:56.794 --> 00:15:59.060
I refresh the page.

00:15:59.060 --> 00:16:00.395
I click the bottom,

00:16:00.395 --> 00:16:05.135
one to two seconds passed in IC timeout fires.

00:16:05.135 --> 00:16:07.475
Well, the picture is the same.

00:16:07.475 --> 00:16:12.140
So what happens is that once JavaScript reads setTimeout,

00:16:12.140 --> 00:16:15.260
setTimeout is being added to the call stack again,

00:16:15.260 --> 00:16:17.600
but the callback and the timer where

00:16:17.600 --> 00:16:21.560
delegated this time to the web APIs inside the browser.

00:16:21.560 --> 00:16:24.620
It means that they are being processed in the background.

00:16:24.620 --> 00:16:26.585
The execution continues.

00:16:26.585 --> 00:16:29.600
Settimeout gets removed from the call stack.

00:16:29.600 --> 00:16:33.425
Console log added to the call stack, executed and remove.

00:16:33.425 --> 00:16:35.615
And the same with the second console log.

00:16:35.615 --> 00:16:37.565
Once the code finishes,

00:16:37.565 --> 00:16:40.385
the mainframe or the main code finishes,

00:16:40.385 --> 00:16:43.640
event loop will constantly check for the callback queue.

00:16:43.640 --> 00:16:47.510
So di callback is added to the callback queue.

00:16:47.510 --> 00:16:50.210
And then event loop sees that and

00:16:50.210 --> 00:16:52.970
pushes that callback into the call stack.

00:16:52.970 --> 00:16:55.880
And after that, the call backfires grade.

00:16:55.880 --> 00:16:58.775
But let's actually see it with the blocking example.

00:16:58.775 --> 00:17:01.880
What if I'm going to put alert instead of console log,

00:17:01.880 --> 00:17:04.625
I will just type alert high.

00:17:04.625 --> 00:17:07.100
And I'm going to remove the second console log.

00:17:07.100 --> 00:17:09.005
And now the question is,

00:17:09.005 --> 00:17:12.350
will set timeout be processed in the background

00:17:12.350 --> 00:17:17.000
once alert will start blocking the event loop, Let's see.

00:17:17.000 --> 00:17:18.845
I refresh the page.

00:17:18.845 --> 00:17:20.285
I press the button,

00:17:20.285 --> 00:17:23.885
alert fires, and now it blocks the event loop.

00:17:23.885 --> 00:17:27.170
But I see nothing inside the console.

00:17:27.170 --> 00:17:30.755
And if I'm going to press the OK button,

00:17:30.755 --> 00:17:32.960
only after that,

00:17:32.960 --> 00:17:36.410
the code will start processing the callback.

00:17:36.410 --> 00:17:41.525
Because setTimeout appears after the alert line.

00:17:41.525 --> 00:17:45.830
If we're going to put setTimeout before the alert line,

00:17:45.830 --> 00:17:47.900
then the picture will be different.

00:17:47.900 --> 00:17:49.580
For refresh the page.

00:17:49.580 --> 00:17:51.545
Click Me button again.

00:17:51.545 --> 00:17:54.170
Alert starts to block the event loop,

00:17:54.170 --> 00:17:57.350
but now setTimeout already

00:17:57.350 --> 00:18:01.834
delegated the processing of that callback to web APIs.

00:18:01.834 --> 00:18:05.990
It means that while alert blocks the event loop,

00:18:05.990 --> 00:18:07.730
callback is being processed by

00:18:07.730 --> 00:18:09.440
web APIs in the background.

00:18:09.440 --> 00:18:11.450
And now this callback is inside

00:18:11.450 --> 00:18:13.700
the callback queue waiting to be

00:18:13.700 --> 00:18:16.370
pushed towards the call stack.

00:18:16.370 --> 00:18:18.140
If I'm going to press Okay,

00:18:18.140 --> 00:18:21.755
I will instantly see timeout fires.

00:18:21.755 --> 00:18:23.120
Right?

00:18:23.120 --> 00:18:25.760
But if I'm going to press Okay,

00:18:25.760 --> 00:18:28.640
within those two seconds over here,

00:18:28.640 --> 00:18:30.485
the picture will change,

00:18:30.485 --> 00:18:34.535
refresh the page, click me, instantly hit Okay.

00:18:34.535 --> 00:18:36.245
And you can see it was

00:18:36.245 --> 00:18:37.805
even less than two seconds

00:18:37.805 --> 00:18:40.115
because once I click the button,

00:18:40.115 --> 00:18:43.024
this is instantly delegated to the web APIs.

00:18:43.024 --> 00:18:44.990
And it doesn't matter for how long

00:18:44.990 --> 00:18:48.300
the alert line will block the execution.

00:18:48.300 --> 00:18:51.445
This is already processed in the background.

00:18:51.445 --> 00:18:53.800
Great. So in simple terms,

00:18:53.800 --> 00:18:57.715
we can say that async code is that type of code

00:18:57.715 --> 00:19:02.020
which is always executed after all synchronous code.

00:19:02.020 --> 00:19:05.845
To easily remember that concept, imagine two columns,

00:19:05.845 --> 00:19:08.950
one for sync and 14 async code,

00:19:08.950 --> 00:19:12.100
let's say gs starts to read the code and then

00:19:12.100 --> 00:19:15.250
it sorts out the code into zinc and the zinc columns.

00:19:15.250 --> 00:19:17.665
And once it's time to execute the code,

00:19:17.665 --> 00:19:21.790
just place the async column below the sink column.

00:19:21.790 --> 00:19:22.900
And here you go.

00:19:22.900 --> 00:19:26.425
This is the order in which the code will be executed.

00:19:26.425 --> 00:19:28.915
Of course, this is oversimplified,

00:19:28.915 --> 00:19:30.780
but it gives the basic idea.

00:19:30.780 --> 00:19:34.040
In modern GAS, you will see promises everywhere.

00:19:34.040 --> 00:19:37.070
The basis for promises is async code.

00:19:37.070 --> 00:19:41.090
That is why it is so important to leverage these concept.

00:19:41.090 --> 00:19:42.455
Server requests,

00:19:42.455 --> 00:19:45.620
database operations, file read operations.

00:19:45.620 --> 00:19:46.955
For all of that,

00:19:46.955 --> 00:19:50.105
we would use promises and async code.

00:19:50.105 --> 00:19:52.760
I hope it was clear and now you have better

00:19:52.760 --> 00:19:56.150
understanding how GS interprets the code.

00:19:56.150 --> 00:19:58.190
Next time, we're going to talk about

00:19:58.190 --> 00:20:00.455
promises and async await.

00:20:00.455 --> 00:20:02.550
See other.
