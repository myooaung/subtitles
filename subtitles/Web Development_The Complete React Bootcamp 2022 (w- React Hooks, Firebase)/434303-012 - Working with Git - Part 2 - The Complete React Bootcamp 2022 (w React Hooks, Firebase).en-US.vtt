WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.540
Hi, Welcome to the second part of good series.

00:00:03.540 --> 00:00:06.600
In this video we're going to talk about GitHub.

00:00:06.600 --> 00:00:08.745
What is GitHub and why do we need it?

00:00:08.745 --> 00:00:11.040
Let's go as remember,

00:00:11.040 --> 00:00:14.520
I have the small good project from the first part where I

00:00:14.520 --> 00:00:18.225
have two files and a few Commits in the terminal,

00:00:18.225 --> 00:00:20.730
if I will get log,

00:00:20.730 --> 00:00:26.445
I will be able to view Git history of that project.

00:00:26.445 --> 00:00:29.115
Now, the question is,

00:00:29.115 --> 00:00:31.140
what will happen if I'm going to

00:00:31.140 --> 00:00:34.815
delete this test project folder from my PC,

00:00:34.815 --> 00:00:37.915
is my project going to be gone completely?

00:00:37.915 --> 00:00:41.420
And the answer to that question actually will be GitHub.

00:00:41.420 --> 00:00:43.894
It will come to our rescue.

00:00:43.894 --> 00:00:48.365
Github is a hosting service for good projects,

00:00:48.365 --> 00:00:51.035
just like we have hosting for websites,

00:00:51.035 --> 00:00:53.480
GitHub is a hosting service or

00:00:53.480 --> 00:00:56.435
platform for good projects.

00:00:56.435 --> 00:01:00.050
If I go to Google and look for a GitHub,

00:01:00.050 --> 00:01:02.585
it will bring me to the official website.

00:01:02.585 --> 00:01:04.700
If you don't have a GitHub account yet,

00:01:04.700 --> 00:01:08.285
I suggest to create one already right now,

00:01:08.285 --> 00:01:10.535
at this moment, I already logged in.

00:01:10.535 --> 00:01:12.140
I want to mention that there are

00:01:12.140 --> 00:01:15.830
some other popular hosting services for good projects,

00:01:15.830 --> 00:01:19.850
such as Git lab or maybe Bitbucket.

00:01:19.850 --> 00:01:23.150
The difference between them will be in features

00:01:23.150 --> 00:01:26.480
and integrations that they give to you.

00:01:26.480 --> 00:01:29.450
Github is the most common one.

00:01:29.450 --> 00:01:34.280
All right, now, we have our GitHub account over here,

00:01:34.280 --> 00:01:37.085
and we would like to host

00:01:37.085 --> 00:01:39.680
our good project that we have

00:01:39.680 --> 00:01:42.710
locally on our PC, on GitHub.

00:01:42.710 --> 00:01:44.075
How we can do that.

00:01:44.075 --> 00:01:47.915
So first we need to create a remote repository on GitHub.

00:01:47.915 --> 00:01:50.000
If I click on the plus sign and

00:01:50.000 --> 00:01:52.595
the top corner and click on new repository,

00:01:52.595 --> 00:01:55.910
it will prompt me for my new repository details.

00:01:55.910 --> 00:01:59.540
A repository is basically a project okay,

00:01:59.540 --> 00:02:01.685
that you Put on GitHub.

00:02:01.685 --> 00:02:04.625
So Repository means project,

00:02:04.625 --> 00:02:06.320
but on GitHub, so

00:02:06.320 --> 00:02:09.725
my repository name is going to be my project.

00:02:09.725 --> 00:02:13.010
I will leave description empty repository

00:02:13.010 --> 00:02:14.570
visibility that it might be

00:02:14.570 --> 00:02:16.325
public and private repository.

00:02:16.325 --> 00:02:17.600
If you choose public,

00:02:17.600 --> 00:02:21.019
your repository will be visible to everybody,

00:02:21.019 --> 00:02:23.600
but only authorized people will be able to

00:02:23.600 --> 00:02:26.449
contribute to that repository

00:02:26.449 --> 00:02:27.620
if it's going to be private,

00:02:27.620 --> 00:02:31.265
no one will ever know and see that repository.

00:02:31.265 --> 00:02:32.525
So let's choose private,

00:02:32.525 --> 00:02:35.375
then let's click on Create Repository.

00:02:35.375 --> 00:02:39.305
So at this step, we've created a new project on GitHub.

00:02:39.305 --> 00:02:44.300
Now, we need to associate hour Local good project that we

00:02:44.300 --> 00:02:49.235
have on our PC with a remote repository on GitHub.

00:02:49.235 --> 00:02:50.840
We can do it in two ways,

00:02:50.840 --> 00:02:54.725
either through HTTPS or through SSH tunnel.

00:02:54.725 --> 00:02:56.750
Ssh is an available option,

00:02:56.750 --> 00:02:59.720
but GitHub recommends HTTPS because it is

00:02:59.720 --> 00:03:03.575
more simpler and easier to set up, let's use HTTPS.

00:03:03.575 --> 00:03:05.750
You can already noticed that

00:03:05.750 --> 00:03:08.465
GitHub suggests a few steps how we can

00:03:08.465 --> 00:03:11.030
associate our local code or

00:03:11.030 --> 00:03:13.700
local project with remote repository.

00:03:13.700 --> 00:03:15.620
We're going to follow the second step to

00:03:15.620 --> 00:03:18.095
push an existing repository because

00:03:18.095 --> 00:03:20.090
our local good project can be

00:03:20.090 --> 00:03:22.760
called local Git repository.

00:03:22.760 --> 00:03:25.370
So let's just copy the first command from

00:03:25.370 --> 00:03:28.250
here and put it in the terminal.

00:03:28.250 --> 00:03:30.710
So what does git remote add origin?

00:03:30.710 --> 00:03:32.750
Let's first execute this command

00:03:32.750 --> 00:03:34.535
and let's see what is going to happen.

00:03:34.535 --> 00:03:37.610
Nothing gets printed and this is totally fine.

00:03:37.610 --> 00:03:40.775
But now our local good project

00:03:40.775 --> 00:03:44.120
knows about this remote repository.

00:03:44.120 --> 00:03:50.135
We can verify that by typing git remote dash v,

00:03:50.135 --> 00:03:52.940
you will see origin and you will see

00:03:52.940 --> 00:03:56.450
repository URL that we've copied from here.

00:03:56.450 --> 00:03:58.535
It is also available over here.

00:03:58.535 --> 00:04:02.435
Now, let's look one more time at this command.

00:04:02.435 --> 00:04:05.120
So we have git remote add.

00:04:05.120 --> 00:04:08.555
This is the command to associate our repositories.

00:04:08.555 --> 00:04:11.930
Origin is the name of an alias

00:04:11.930 --> 00:04:15.560
that we assign to this URL because it

00:04:15.560 --> 00:04:19.130
is easier to always refer to nickname or to

00:04:19.130 --> 00:04:22.820
an alias instead of URL all the time, which was origin.

00:04:22.820 --> 00:04:24.470
This is the most common name.

00:04:24.470 --> 00:04:25.400
Okay.

00:04:25.400 --> 00:04:28.325
Now, what do we need to do in order to

00:04:28.325 --> 00:04:32.090
applaud our local files to the hosting,

00:04:32.090 --> 00:04:35.330
we need to do git push than the alias that we

00:04:35.330 --> 00:04:38.720
associated with our repository URL,

00:04:38.720 --> 00:04:41.120
which is going to be origin and the name of

00:04:41.120 --> 00:04:43.820
branch that we want to deploy.

00:04:43.820 --> 00:04:46.040
So git push origin master.

00:04:46.040 --> 00:04:48.350
If we open again and Git Hub,

00:04:48.350 --> 00:04:50.585
we will see that it suggests good branch

00:04:50.585 --> 00:04:54.380
main and then git push origin main as remember I

00:04:54.380 --> 00:04:55.865
already mentioned that fuss

00:04:55.865 --> 00:04:58.250
about a year ago that community wants

00:04:58.250 --> 00:05:02.645
to shift default branch name from master to main,

00:05:02.645 --> 00:05:06.065
but we're going to keep using master right now.

00:05:06.065 --> 00:05:08.660
So we're going to use git push origin master

00:05:08.660 --> 00:05:11.060
instead of git push origin main.

00:05:11.060 --> 00:05:12.980
I'm going to execute it.

00:05:12.980 --> 00:05:15.680
And you will see that new branch was

00:05:15.680 --> 00:05:18.350
created on that URL rate.

00:05:18.350 --> 00:05:19.850
Let's get back to GitHub,

00:05:19.850 --> 00:05:22.310
refresh the page and boom,

00:05:22.310 --> 00:05:26.105
we can see everything is visible over here.

00:05:26.105 --> 00:05:28.040
So what we can do on GitHub.

00:05:28.040 --> 00:05:32.240
Github, we can view our complete good history.

00:05:32.240 --> 00:05:36.290
We can see all the files and we can see at the time when

00:05:36.290 --> 00:05:40.730
this command for that file was created, okay,

00:05:40.730 --> 00:05:43.070
So three hours ago was the latest commit for

00:05:43.070 --> 00:05:45.950
that file and for that file as well for tests,

00:05:45.950 --> 00:05:49.760
yes, we can click on Files to view the content.

00:05:49.760 --> 00:05:53.120
We can actually click on commits to

00:05:53.120 --> 00:05:56.360
see what changes were made on that commit.

00:05:56.360 --> 00:05:58.910
So for edited some file to recommit,

00:05:58.910 --> 00:06:00.860
we modified or remove

00:06:00.860 --> 00:06:03.620
that line and we added these two lines.

00:06:03.620 --> 00:06:06.020
Green is what was added.

00:06:06.020 --> 00:06:08.960
Red means something that was removed.

00:06:08.960 --> 00:06:11.630
Let's get back to repository here.

00:06:11.630 --> 00:06:13.460
We can also view

00:06:13.460 --> 00:06:16.250
full good history by clicking on that button.

00:06:16.250 --> 00:06:18.365
And we can see we have three commits.

00:06:18.365 --> 00:06:20.435
We can browse the repository

00:06:20.435 --> 00:06:22.730
at this point, at the history.

00:06:22.730 --> 00:06:24.980
If we click, we can see at this point

00:06:24.980 --> 00:06:27.440
there was only one file.

00:06:27.440 --> 00:06:29.720
Let's get back to main repository

00:06:29.720 --> 00:06:31.850
again answering the main question,

00:06:31.850 --> 00:06:34.595
why do we need GitHub?

00:06:34.595 --> 00:06:37.175
We need GitHub to collaborate with

00:06:37.175 --> 00:06:41.690
other people or to make our project portable.

00:06:41.690 --> 00:06:45.485
What I mean is that suppose that we accidentally

00:06:45.485 --> 00:06:50.330
lose this test project folder on our local PC.

00:06:50.330 --> 00:06:53.285
For some reason, it just does not exist.

00:06:53.285 --> 00:06:56.405
However, our project exists on GitHub.

00:06:56.405 --> 00:06:57.950
So what we can do, we can actually

00:06:57.950 --> 00:06:59.900
don't load our project from GitHub and

00:06:59.900 --> 00:07:03.740
put it in our local PC by clicking on this green button,

00:07:03.740 --> 00:07:05.450
we have a few options here.

00:07:05.450 --> 00:07:08.479
We can download zip or we can clone.

00:07:08.479 --> 00:07:11.120
So if we click on Download Zip,

00:07:11.120 --> 00:07:13.685
and if we're going to open that zip,

00:07:13.685 --> 00:07:16.895
you will see all of the files inside.

00:07:16.895 --> 00:07:18.305
So this is one way.

00:07:18.305 --> 00:07:22.775
The second way is to clone that repository using the CLI.

00:07:22.775 --> 00:07:25.595
So we're going to choose HTTPS connection.

00:07:25.595 --> 00:07:27.620
We're going to copy that URL.

00:07:27.620 --> 00:07:28.955
And now suppose that

00:07:28.955 --> 00:07:32.300
my test project here does not exist on PC.

00:07:32.300 --> 00:07:33.260
I lost it.

00:07:33.260 --> 00:07:36.710
So if I wanted to recover it or retrieve it back,

00:07:36.710 --> 00:07:42.305
I will do git clone and then the URL that I copied.

00:07:42.305 --> 00:07:43.820
So it will copy,

00:07:43.820 --> 00:07:46.550
it will create a new folder called my project,

00:07:46.550 --> 00:07:49.235
and it will put all the files inside.

00:07:49.235 --> 00:07:51.500
If I'm going to inspect my project folder,

00:07:51.500 --> 00:07:54.575
you will see some file.txt and test, yes.

00:07:54.575 --> 00:07:56.780
But also if I'm going to go to

00:07:56.780 --> 00:08:01.400
my Project folder and if I do alas F,

00:08:01.400 --> 00:08:02.870
to view hidden files,

00:08:02.870 --> 00:08:05.510
there will be another Git folder over here.

00:08:05.510 --> 00:08:09.875
So this is because when you clone a repository,

00:08:09.875 --> 00:08:14.165
it will come with good folder with Git setup already.

00:08:14.165 --> 00:08:18.020
Imagine that test project never existed on that PC.

00:08:18.020 --> 00:08:21.950
I clone the repository using HTTPS and git clone.

00:08:21.950 --> 00:08:25.130
And now my Git setup is already complete.

00:08:25.130 --> 00:08:26.480
I can just navigate to

00:08:26.480 --> 00:08:30.200
that my Project folder and everything is already there.

00:08:30.200 --> 00:08:31.160
Setup for me.

00:08:31.160 --> 00:08:34.715
I can now continue to do new commits,

00:08:34.715 --> 00:08:36.200
to do some changes,

00:08:36.200 --> 00:08:37.880
and then upload to GitHub again,

00:08:37.880 --> 00:08:40.310
let me delete my project folder.

00:08:40.310 --> 00:08:42.530
I don't actually need it.

00:08:42.530 --> 00:08:45.050
I will navigate back.

00:08:45.050 --> 00:08:46.280
Now.

00:08:46.280 --> 00:08:48.590
How can I actually continued to

00:08:48.590 --> 00:08:50.990
develop once I have my project on GitHub?

00:08:50.990 --> 00:08:52.280
That's a good question.

00:08:52.280 --> 00:08:53.915
Well, just like before,

00:08:53.915 --> 00:08:56.585
if I need to introduce new changes to the project,

00:08:56.585 --> 00:08:59.555
I will just keep doing my changes.

00:08:59.555 --> 00:09:01.715
Maybe I add another line

00:09:01.715 --> 00:09:04.400
with hello two over here and save it.

00:09:04.400 --> 00:09:05.914
Now as you remember,

00:09:05.914 --> 00:09:08.615
I have untracked changes.

00:09:08.615 --> 00:09:10.280
If I type git status,

00:09:10.280 --> 00:09:12.529
you will see that file is modified.

00:09:12.529 --> 00:09:16.100
So again, I need to add that file to the stage state.

00:09:16.100 --> 00:09:17.885
I'm going to put git add dot.

00:09:17.885 --> 00:09:19.145
You will see here it,

00:09:19.145 --> 00:09:20.285
it appears now in

00:09:20.285 --> 00:09:23.420
staged changes and now I'm able to commit.

00:09:23.420 --> 00:09:27.095
So git commit added hello two.

00:09:27.095 --> 00:09:28.925
Now if I type git log,

00:09:28.925 --> 00:09:32.345
I will be able to see new commit at the top.

00:09:32.345 --> 00:09:33.890
Now I have four commits,

00:09:33.890 --> 00:09:35.930
but if I go back to GitHub,

00:09:35.930 --> 00:09:39.320
I don't see it here because GitHub and Git,

00:09:39.320 --> 00:09:42.305
they are not magically synchronized with each other.

00:09:42.305 --> 00:09:46.790
Whenever you do new changes on your PC, they are local.

00:09:46.790 --> 00:09:49.325
They are available only on your PC.

00:09:49.325 --> 00:09:51.905
And if you want to see them at hosting,

00:09:51.905 --> 00:09:54.455
you have to upload them to hosting.

00:09:54.455 --> 00:09:56.045
And in order to do that,

00:09:56.045 --> 00:09:59.435
we again use command git, push,

00:09:59.435 --> 00:10:03.005
Good Push, and the name of LES and our alias.

00:10:03.005 --> 00:10:06.485
We can verify that with git remote dash v,

00:10:06.485 --> 00:10:08.600
our Ls is origin,

00:10:08.600 --> 00:10:12.065
which leads to this repository, which is correct.

00:10:12.065 --> 00:10:14.165
So I'm going to do git push

00:10:14.165 --> 00:10:19.090
origin and then master the name of branch.

00:10:19.090 --> 00:10:22.285
Now I see my changes are uploaded.

00:10:22.285 --> 00:10:23.920
I refresh the page.

00:10:23.920 --> 00:10:26.080
And other committee was added here

00:10:26.080 --> 00:10:29.200
one minute ago, which is correct.

00:10:29.200 --> 00:10:31.525
If I click on that commit message,

00:10:31.525 --> 00:10:33.730
you will see that these two lines

00:10:33.730 --> 00:10:36.010
for edit exactly what I just did.

00:10:36.010 --> 00:10:39.370
And one more time answering the main question,

00:10:39.370 --> 00:10:42.025
what GitHub does? Why do we need it?

00:10:42.025 --> 00:10:45.835
Github is needed for collaboration between people

00:10:45.835 --> 00:10:49.795
and to make our project as portable as possible.

00:10:49.795 --> 00:10:51.715
In the next video, we're going to talk

00:10:51.715 --> 00:10:53.740
about branches and how

00:10:53.740 --> 00:10:58.970
people are collaborating using GitHub. See you there.
