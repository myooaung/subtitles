WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.000
Hey there in this video bubble,

00:00:02.000 --> 00:00:04.510
talk about code splitting in react mode,

00:00:04.510 --> 00:00:08.500
splitting is tightly coupled with lazy loading in react,

00:00:08.500 --> 00:00:08.830
killed,

00:00:08.830 --> 00:00:12.110
splitting means to lazy load components,

00:00:12.110 --> 00:00:15.000
dependencies or maybe even CSS files.

00:00:15.000 --> 00:00:16.790
If we read through documentation,

00:00:16.790 --> 00:00:22.160
we can see this bundling section where it says that whenever we build an application,

00:00:22.160 --> 00:00:24.720
we have the final JavaScript file.

00:00:24.720 --> 00:00:25.680
And indeed,

00:00:25.680 --> 00:00:31.710
if we'll look inside our project and we go to the latest built static and jealous script

00:00:31.710 --> 00:00:33.470
here we confine a few jobs,

00:00:33.470 --> 00:00:34.240
great files.

00:00:34.240 --> 00:00:35.220
And as you can see,

00:00:35.220 --> 00:00:39.650
they are magnified and at the same time they are pretty large.

00:00:39.650 --> 00:00:42.610
So this is where our logic goes.

00:00:42.610 --> 00:00:44.360
But with laser loading,

00:00:44.360 --> 00:00:49.050
we are able to create more chunks off our application.

00:00:49.050 --> 00:00:55.900
And in this way we can lays a load our JavaScript chunks on Lee when they are needed.

00:00:55.900 --> 00:00:56.750
For example,

00:00:56.750 --> 00:00:58.950
if you look inside our application,

00:00:58.950 --> 00:01:02.120
we basically don't need sign in page right now.

00:01:02.120 --> 00:01:04.710
We need Onley when we are unauthorized,

00:01:04.710 --> 00:01:05.030
right?

00:01:05.030 --> 00:01:10.020
So it would make sense to lazy load sign and page component.

00:01:10.020 --> 00:01:16.860
So if we go to documentation and if we scroll down to the actual example with react,

00:01:16.860 --> 00:01:23.330
lazy react Lisi is a technique inside react to lazy load components.

00:01:23.330 --> 00:01:27.370
We can use this example to lazy load our sign in page.

00:01:27.370 --> 00:01:34.770
Let's copy this line of code than I'm going to navigate to Abla GS Place where we rendered

00:01:34.770 --> 00:01:36.750
the signing component here.

00:01:36.750 --> 00:01:41.690
I'm gonna pays this other component and I will replace it with Sinan.

00:01:41.690 --> 00:01:45.860
And then I will copy pass to sign in page.

00:01:45.860 --> 00:01:53.280
And then I will actually import lazy as well from react instead of using ink like that.

00:01:53.280 --> 00:01:59.660
And also I need to import suspects as we can see from documentation,

00:01:59.660 --> 00:02:00.950
because when we lazy,

00:02:00.950 --> 00:02:01.290
low,

00:02:01.290 --> 00:02:02.160
dim Ojul,

00:02:02.160 --> 00:02:07.200
it might take a few seconds or milliseconds to load this module.

00:02:07.200 --> 00:02:11.020
And while it is being loaded to avoid fleshing,

00:02:11.020 --> 00:02:12.560
we might use some fullback.

00:02:12.560 --> 00:02:14.570
You I something like loading.

00:02:14.570 --> 00:02:17.340
That's why we need to provide suspense always.

00:02:17.340 --> 00:02:18.990
So let me copy it,

00:02:18.990 --> 00:02:21.850
and my preacher is lacking.

00:02:21.850 --> 00:02:25.600
So let me cancel it and actually started the app.

00:02:25.600 --> 00:02:26.850
Maybe it will work.

00:02:26.850 --> 00:02:28.290
Okay,

00:02:28.290 --> 00:02:36.070
so I'm gonna pour suspects that I would sign in page and I'm gonna put it like that now I

00:02:36.070 --> 00:02:43.440
can lunch my application back again and let me save it and Now we must use sign in like

00:02:43.440 --> 00:02:48.290
that with suspects and let's remove the old import off sign in page.

00:02:48.290 --> 00:02:48.870
Now,

00:02:48.870 --> 00:02:50.150
if I save it,

00:02:50.150 --> 00:02:52.450
I also need to import suspense.

00:02:52.450 --> 00:02:59.200
Now if I say where and if I navigate back to the court if I refresh the app if I click on

00:02:59.200 --> 00:03:02.890
inspect and if I opened the network tap,

00:03:02.890 --> 00:03:05.880
let me sign out and pay attention.

00:03:05.880 --> 00:03:08.040
What file will be loaded?

00:03:08.040 --> 00:03:10.050
So if I click on this button,

00:03:10.050 --> 00:03:17.330
you saw this little flicker with loading def that we put as a full back over here while

00:03:17.330 --> 00:03:18.360
this fall back you.

00:03:18.360 --> 00:03:23.420
I was showing we actually loaded the chunk off our coat.

00:03:23.420 --> 00:03:24.770
And if we open it here,

00:03:24.770 --> 00:03:28.300
we confined our US or see pages signing.

00:03:28.300 --> 00:03:32.810
So this is what it means to code split our application.

00:03:32.810 --> 00:03:36.010
If you build a really large application,

00:03:36.010 --> 00:03:40.310
most probably when someone launches your website for the first time,

00:03:40.310 --> 00:03:43.660
most of your components are probably not needed.

00:03:43.660 --> 00:03:46.520
This technique is really important to understand.

00:03:46.520 --> 00:03:52.300
And a good example would be just to open Twitter rap side and to see that everywhere when

00:03:52.300 --> 00:03:54.260
you just load the website,

00:03:54.260 --> 00:04:01.740
you can see spinners they use lazy loading a lot so they lazy load all components to reduce

00:04:01.740 --> 00:04:05.560
the initial bundle size because it really matters.

00:04:05.560 --> 00:04:07.070
If I refresh the app,

00:04:07.070 --> 00:04:10.620
you can see that a lot of files have been loaded here,

00:04:10.620 --> 00:04:13.280
such as one chunk main chunk,

00:04:13.280 --> 00:04:19.930
and we want to keep main Chunk as small as possible because initial Lord off the website

00:04:19.930 --> 00:04:20.700
matters.

00:04:20.700 --> 00:04:21.250
All right,

00:04:21.250 --> 00:04:24.090
so this is it about laser loading?

00:04:24.090 --> 00:04:26.150
I hope it was comprehensive.

00:04:26.150 --> 00:04:29.820
Now let's actually commit our changes to the chat application.

00:04:29.820 --> 00:04:31.260
So let's pour,

00:04:31.260 --> 00:04:34.450
get at Dar and then get committed.

00:04:34.450 --> 00:04:40.740
Add lazy floating perfect CEO in the next one.

