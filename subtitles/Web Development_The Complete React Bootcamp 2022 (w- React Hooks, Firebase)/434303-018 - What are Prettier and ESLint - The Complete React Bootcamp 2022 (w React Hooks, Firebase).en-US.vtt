WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.520
Hey, in this video I would like to

00:00:02.520 --> 00:00:04.980
talk about preacher in ES lint.

00:00:04.980 --> 00:00:06.375
What are those tools?

00:00:06.375 --> 00:00:09.705
Why do we care and how they're going to help us?

00:00:09.705 --> 00:00:11.355
Let's find it out together.

00:00:11.355 --> 00:00:13.905
So first thing I want to mention that in this video,

00:00:13.905 --> 00:00:16.110
I'm going to reuse the same project that I

00:00:16.110 --> 00:00:18.690
created in the Node.JS introduction video.

00:00:18.690 --> 00:00:21.685
As you remember, it contains only one dependency,

00:00:21.685 --> 00:00:26.030
which is cowsay, and we use it inside just MGS.

00:00:26.030 --> 00:00:27.215
Let's start it off.

00:00:27.215 --> 00:00:29.060
Preachers a tool that is

00:00:29.060 --> 00:00:31.265
going to format all of our files.

00:00:31.265 --> 00:00:34.625
It has only one purpose to Format files.

00:00:34.625 --> 00:00:36.725
It gains the predefined conflict.

00:00:36.725 --> 00:00:39.935
So let's find out how we can use preacher.

00:00:39.935 --> 00:00:44.255
If we go to Google and we'll look for a preacher,

00:00:44.255 --> 00:00:47.195
you will end up on the official website.

00:00:47.195 --> 00:00:50.945
Let's go to the official installation documentation

00:00:50.945 --> 00:00:52.310
and let's just follow it.

00:00:52.310 --> 00:00:54.350
First installed preacher locally.

00:00:54.350 --> 00:00:56.900
Let's copy that command and let's

00:00:56.900 --> 00:00:59.779
put it inside the terminal.

00:00:59.779 --> 00:01:03.935
So save-dev flag inside the command means that

00:01:03.935 --> 00:01:06.380
that package preacher will be

00:01:06.380 --> 00:01:08.915
installed as a development dependency.

00:01:08.915 --> 00:01:10.640
If we're going to open package.json,

00:01:10.640 --> 00:01:12.350
we will see new section over here,

00:01:12.350 --> 00:01:15.064
dev dependencies, which is developer dependencies.

00:01:15.064 --> 00:01:17.960
And we will see preacher over here. Now.

00:01:17.960 --> 00:01:20.420
Let's continue on the dogs.

00:01:20.420 --> 00:01:22.910
And here we have created an empty conflict file.

00:01:22.910 --> 00:01:25.550
Again, I'm just going to copy the command.

00:01:25.550 --> 00:01:27.485
Put it in the terminal,

00:01:27.485 --> 00:01:31.430
and it will create an empty preacher RT JSON for me,

00:01:31.430 --> 00:01:33.560
each tool preacher and Eastland,

00:01:33.560 --> 00:01:35.915
requires a config file to

00:01:35.915 --> 00:01:38.660
understand what we want from that tool.

00:01:38.660 --> 00:01:42.200
And we can see all of this conflict options for

00:01:42.200 --> 00:01:47.105
preacher inside the documentation under Options link.

00:01:47.105 --> 00:01:48.335
If we're going to go here,

00:01:48.335 --> 00:01:51.200
we will see different options here that

00:01:51.200 --> 00:01:54.245
we can use inside picture RC Jason,

00:01:54.245 --> 00:01:56.090
for example, tab with.

00:01:56.090 --> 00:02:00.410
So I'm just going to go and use Tab width from here.

00:02:00.410 --> 00:02:02.150
I'm just going to copy it,

00:02:02.150 --> 00:02:04.445
put it inside the config.

00:02:04.445 --> 00:02:07.025
And we can see the default is two.

00:02:07.025 --> 00:02:09.605
So let me maybe put

00:02:09.605 --> 00:02:12.890
10 over here and let's see what is going to happen.

00:02:12.890 --> 00:02:14.405
I saved the file.

00:02:14.405 --> 00:02:17.135
I go back to test MGS.

00:02:17.135 --> 00:02:21.050
I press Control S to save the file.

00:02:21.050 --> 00:02:25.280
And boom, you see the indentation has changed.

00:02:25.280 --> 00:02:29.420
Now. It uses tap width of 10 empty lines.

00:02:29.420 --> 00:02:31.340
You're probably thinking how it is

00:02:31.340 --> 00:02:34.145
automatically like formatting that file.

00:02:34.145 --> 00:02:36.950
The thing is that what we've just installed

00:02:36.950 --> 00:02:40.475
inside our project under dev dependencies,

00:02:40.475 --> 00:02:42.740
we've installed preacher as a tool,

00:02:42.740 --> 00:02:44.810
but out of formatting, as we see,

00:02:44.810 --> 00:02:46.700
feature is available through

00:02:46.700 --> 00:02:48.860
the VS Code extension that you

00:02:48.860 --> 00:02:51.305
should have already installed by now.

00:02:51.305 --> 00:02:52.730
If you didn't do that,

00:02:52.730 --> 00:02:54.980
go to the Extensions tab.

00:02:54.980 --> 00:02:57.515
Look for preach here.

00:02:57.515 --> 00:02:59.990
This is the extension and install

00:02:59.990 --> 00:03:02.270
it and make sure it is already configured.

00:03:02.270 --> 00:03:04.340
If you didn't do that, to watch

00:03:04.340 --> 00:03:07.895
VS Code Configuration video from project to project,

00:03:07.895 --> 00:03:10.550
you want to reuse preacher.

00:03:10.550 --> 00:03:13.955
You don't want to always specify different options here.

00:03:13.955 --> 00:03:15.830
Trust me, there will be only a few.

00:03:15.830 --> 00:03:17.540
So for that reason, I'm going to share

00:03:17.540 --> 00:03:19.490
with you this gift and you will be able to

00:03:19.490 --> 00:03:21.020
just copy and paste

00:03:21.020 --> 00:03:24.095
that preacher conflict that I use everywhere.

00:03:24.095 --> 00:03:27.695
So let me put it here and let me save the file.

00:03:27.695 --> 00:03:29.495
As you can see, I use

00:03:29.495 --> 00:03:32.660
five commands and this is enough for a preacher to work.

00:03:32.660 --> 00:03:34.565
You can see if I'm going to save it.

00:03:34.565 --> 00:03:36.725
It uses that conflict now.

00:03:36.725 --> 00:03:37.580
Awesome.

00:03:37.580 --> 00:03:39.425
So answering the question,

00:03:39.425 --> 00:03:40.730
why do we need preacher?

00:03:40.730 --> 00:03:42.260
First of all, you need to understand

00:03:42.260 --> 00:03:44.780
that preacher is an optional tool,

00:03:44.780 --> 00:03:47.120
but it is highly recommended you to have

00:03:47.120 --> 00:03:49.715
preacher inside your JavaScript project.

00:03:49.715 --> 00:03:51.875
The reason for that is because we wanted to make

00:03:51.875 --> 00:03:56.060
our code as readable and maintainable as possible.

00:03:56.060 --> 00:03:58.250
And preacher will help us with that.

00:03:58.250 --> 00:03:59.870
Which one do you prefer?

00:03:59.870 --> 00:04:02.960
This weird formatting?

00:04:02.960 --> 00:04:08.480
Because for some reason you didn't end manual indentation

00:04:08.480 --> 00:04:13.865
or do you prefer very clean code achieved with preacher?

00:04:13.865 --> 00:04:16.070
I guess it is going to be the second option.

00:04:16.070 --> 00:04:19.820
At last, consider a situation when you have a lot of

00:04:19.820 --> 00:04:24.065
files inside the project and they are not formatted.

00:04:24.065 --> 00:04:24.725
Preacher.

00:04:24.725 --> 00:04:26.180
So what to do in this case?

00:04:26.180 --> 00:04:28.310
Well, the first option is of course,

00:04:28.310 --> 00:04:29.990
to go to every file,

00:04:29.990 --> 00:04:33.530
hit Control S to save each file manually,

00:04:33.530 --> 00:04:35.105
and then preacher will form at them.

00:04:35.105 --> 00:04:36.875
But this is not very convenient.

00:04:36.875 --> 00:04:39.245
It would be better to create

00:04:39.245 --> 00:04:43.910
a script that will format all of our files at once.

00:04:43.910 --> 00:04:45.530
And that script we'll use preacher,

00:04:45.530 --> 00:04:49.040
and this is where NPM scripts come in.

00:04:49.040 --> 00:04:53.015
Let's create an NPM script that will use preacher to

00:04:53.015 --> 00:04:55.385
format all of our files

00:04:55.385 --> 00:04:58.625
inside the project using preacher RC JSON.

00:04:58.625 --> 00:05:02.750
So if we go back to preacher documentation,

00:05:02.750 --> 00:05:06.345
let's go to the installation page.

00:05:06.345 --> 00:05:10.975
Let's scroll down and here we can see now format

00:05:10.975 --> 00:05:13.150
all files with preacher and we have

00:05:13.150 --> 00:05:16.975
that command and px preacher dash, dash right dot.

00:05:16.975 --> 00:05:19.075
Let me copy it.

00:05:19.075 --> 00:05:22.945
And let's navigate back to the NPM scripts.

00:05:22.945 --> 00:05:25.570
So here let's define and you NPM

00:05:25.570 --> 00:05:28.885
script that we will name format.

00:05:28.885 --> 00:05:32.005
Inside that script, I'm going to put n px,

00:05:32.005 --> 00:05:33.970
preacher dash, dash, right dot.

00:05:33.970 --> 00:05:37.015
However, we don't really need and Px here,

00:05:37.015 --> 00:05:41.395
you can read what is n px in this yellow alert.

00:05:41.395 --> 00:05:41.965
Are we sure?

00:05:41.965 --> 00:05:44.560
So n px is basically a tool that

00:05:44.560 --> 00:05:47.320
is shipped with no JS that allows to

00:05:47.320 --> 00:05:49.940
run packages directly from

00:05:49.940 --> 00:05:53.270
the NPM registry without installation.

00:05:53.270 --> 00:05:56.360
If I haven't installed preacher and

00:05:56.360 --> 00:05:59.690
then I would use n px preacher dash, dash Reidar.

00:05:59.690 --> 00:06:02.600
It would work because NP x will use

00:06:02.600 --> 00:06:05.690
preacher without installation directly

00:06:05.690 --> 00:06:06.950
from the NPM registry,

00:06:06.950 --> 00:06:08.900
but we don't need it at all.

00:06:08.900 --> 00:06:10.610
We have preacher installed.

00:06:10.610 --> 00:06:16.040
And when we write preacher here inside the NPM script,

00:06:16.040 --> 00:06:20.090
it will use preacher installed inside node modules.

00:06:20.090 --> 00:06:23.330
Let's try out that command that we've just defined.

00:06:23.330 --> 00:06:26.315
I'm going to go back to my terminal and I will

00:06:26.315 --> 00:06:30.950
execute npm run format.

00:06:30.950 --> 00:06:33.245
You will see something is happening.

00:06:33.245 --> 00:06:36.860
And now some files are affected,

00:06:36.860 --> 00:06:38.195
basically all of them.

00:06:38.195 --> 00:06:39.410
Let's shake them out.

00:06:39.410 --> 00:06:41.765
So we have that file formatted,

00:06:41.765 --> 00:06:44.495
that file formatted, that file formatted.

00:06:44.495 --> 00:06:46.220
So basically everything is now

00:06:46.220 --> 00:06:48.155
formatted using a preacher.

00:06:48.155 --> 00:06:50.870
Let's go back to preacher RC Jason,

00:06:50.870 --> 00:06:54.725
and let's maybe change it to 10 tablet.

00:06:54.725 --> 00:06:57.815
And let's rerun the command npm run format.

00:06:57.815 --> 00:07:01.535
And you will see that all files are now

00:07:01.535 --> 00:07:04.385
formatted against preacher conflict

00:07:04.385 --> 00:07:05.585
that we've just defined.

00:07:05.585 --> 00:07:06.290
That's it.

00:07:06.290 --> 00:07:09.725
Now you know what preacher does and why do we need it?

00:07:09.725 --> 00:07:11.120
Let's quickly summarize.

00:07:11.120 --> 00:07:13.250
Preacher is a tool that will format

00:07:13.250 --> 00:07:15.710
files inside our current project,

00:07:15.710 --> 00:07:18.005
prettier has a configuration file

00:07:18.005 --> 00:07:20.495
which is dot preacher RC JSON.

00:07:20.495 --> 00:07:24.770
We can use preacher through the NPM scripts or we can use

00:07:24.770 --> 00:07:26.165
preacher through

00:07:26.165 --> 00:07:29.450
the VS Code extension that we've installed.

00:07:29.450 --> 00:07:32.555
So that extension, the only thing it does,

00:07:32.555 --> 00:07:35.675
it just allows us to format files.

00:07:35.675 --> 00:07:38.405
When we hit the save button,

00:07:38.405 --> 00:07:39.590
If we're going to disable

00:07:39.590 --> 00:07:42.260
that extension or if we don't have it,

00:07:42.260 --> 00:07:45.410
preacher will not form at our files when we hit Save,

00:07:45.410 --> 00:07:48.590
the only opportunity for us to format

00:07:48.590 --> 00:07:52.610
the files will be through our custom NPM script,

00:07:52.610 --> 00:07:54.305
which we named format.

00:07:54.305 --> 00:07:58.130
But with extension, it is much, much more convenient.

00:07:58.130 --> 00:08:00.200
Now, let's move on to

00:08:00.200 --> 00:08:02.590
ES lint before we're going to jump to Eastland,

00:08:02.590 --> 00:08:04.820
let me just quickly fall back to

00:08:04.820 --> 00:08:09.110
our previous setting here and rerun the format command.

00:08:09.110 --> 00:08:09.830
Awesome.

00:08:09.830 --> 00:08:11.675
Now, what is Eastland?

00:08:11.675 --> 00:08:15.800
Eastland is also an optional tool that will

00:08:15.800 --> 00:08:17.315
allow us to check

00:08:17.315 --> 00:08:20.630
JavaScript against some common problems,

00:08:20.630 --> 00:08:24.245
against some predefined code guidelines.

00:08:24.245 --> 00:08:27.410
We will need ES lint to verify that we do

00:08:27.410 --> 00:08:31.505
not have very simple mistakes in our code,

00:08:31.505 --> 00:08:34.700
such as undefined variables, unused variables,

00:08:34.700 --> 00:08:38.060
or maybe we have some piece of code that is used in

00:08:38.060 --> 00:08:41.585
a wrong way and ES lint will let us know about that.

00:08:41.585 --> 00:08:43.535
So again, just like with pressure,

00:08:43.535 --> 00:08:47.270
Let's go to Google and let's look for ES lint.

00:08:47.270 --> 00:08:49.070
Let's click here.

00:08:49.070 --> 00:08:51.605
You can see that ES lint is a linear.

00:08:51.605 --> 00:08:53.660
So linear is a tool that

00:08:53.660 --> 00:08:56.360
actually checks the code against errors.

00:08:56.360 --> 00:08:58.339
Let's click on Get Started,

00:08:58.339 --> 00:09:01.085
and let's again simply follow the documentation.

00:09:01.085 --> 00:09:05.374
So npm install ES lint save-dev, copy.

00:09:05.374 --> 00:09:07.970
Let's put it into the terminal again.

00:09:07.970 --> 00:09:12.425
Dash, dash save dev flag will ensure that ES lint will be

00:09:12.425 --> 00:09:17.240
installed as a developer dependency in package Jason,

00:09:17.240 --> 00:09:19.309
again, water dev dependencies,

00:09:19.309 --> 00:09:22.235
dev dependencies are those tools

00:09:22.235 --> 00:09:24.785
that we use in the development environment.

00:09:24.785 --> 00:09:27.395
They are not part of the source code.

00:09:27.395 --> 00:09:29.945
So if I'm going to remove the Iceland and preacher,

00:09:29.945 --> 00:09:32.255
my project will still be able to run.

00:09:32.255 --> 00:09:32.705
Great.

00:09:32.705 --> 00:09:34.415
We have ES lint installed.

00:09:34.415 --> 00:09:37.565
Now let's follow the documentation.

00:09:37.565 --> 00:09:40.010
So it suggests us to use

00:09:40.010 --> 00:09:43.520
the init command to initialize the config file.

00:09:43.520 --> 00:09:45.860
So instead, let's create it manually.

00:09:45.860 --> 00:09:48.380
So I'm going to create a new file here,

00:09:48.380 --> 00:09:52.580
and I will name it dot ES lint RC.

00:09:52.580 --> 00:09:55.610
So this is going to be my ES lint config file.

00:09:55.610 --> 00:09:57.815
In order to configure ES lint,

00:09:57.815 --> 00:09:58.925
we have to follow

00:09:58.925 --> 00:10:02.060
exactly the same pattern as with preacher.

00:10:02.060 --> 00:10:04.880
You have to create a config file and we have to put

00:10:04.880 --> 00:10:06.740
a few commands to let

00:10:06.740 --> 00:10:09.410
Yes Lint understand what we want from it.

00:10:09.410 --> 00:10:11.420
Let's get back to the website and

00:10:11.420 --> 00:10:13.445
here we have configuration.

00:10:13.445 --> 00:10:16.505
So let's just maybe copy it.

00:10:16.505 --> 00:10:19.280
But we're going to change a few options here.

00:10:19.280 --> 00:10:20.750
I will put it here.

00:10:20.750 --> 00:10:23.570
I'm going to remove this and

00:10:23.570 --> 00:10:26.375
We end up with the rules section.

00:10:26.375 --> 00:10:29.780
Inside the rules section in Iceland, RC,

00:10:29.780 --> 00:10:33.815
we define ES lint rules that we would like to use

00:10:33.815 --> 00:10:35.929
inside our project against

00:10:35.929 --> 00:10:38.540
which our code will be checked.

00:10:38.540 --> 00:10:47.060
For example, I can type a rule called no unused virus,

00:10:47.060 --> 00:10:49.655
and we need to supply some options here.

00:10:49.655 --> 00:10:51.410
And you can see it even gives me

00:10:51.410 --> 00:10:54.125
auto-completion editor off and worn.

00:10:54.125 --> 00:10:55.115
So what are those?

00:10:55.115 --> 00:10:56.855
So if I'm going to put off,

00:10:56.855 --> 00:10:59.180
that rule will be disabled and

00:10:59.180 --> 00:11:02.330
my code will not be checked against that rule.

00:11:02.330 --> 00:11:04.085
If I'm going to put toward as

00:11:04.085 --> 00:11:06.215
an option for some ES lint rule.

00:11:06.215 --> 00:11:10.160
It means that when I go against that rule,

00:11:10.160 --> 00:11:12.800
ES lint will give me a warning.

00:11:12.800 --> 00:11:16.370
And I have a third option, which is error.

00:11:16.370 --> 00:11:20.405
It means that whenever I go against that role,

00:11:20.405 --> 00:11:22.625
Yes, Lint will produce an error.

00:11:22.625 --> 00:11:24.395
So there are some, let's say,

00:11:24.395 --> 00:11:26.630
crucial rules which I want

00:11:26.630 --> 00:11:29.090
to be reported for me as another.

00:11:29.090 --> 00:11:31.790
And there are some maybe minor rules that I want to

00:11:31.790 --> 00:11:34.715
be reported to me as warnings.

00:11:34.715 --> 00:11:39.170
We can find all these rules inside the documentation.

00:11:39.170 --> 00:11:42.380
I always suggest you to look inside the documentation.

00:11:42.380 --> 00:11:45.440
You can find everything there so you can even

00:11:45.440 --> 00:11:48.545
see off warn error options here,

00:11:48.545 --> 00:11:50.210
exactly what is said to you.

00:11:50.210 --> 00:11:55.055
Now, we can go to User Guide and we can go to rules.

00:11:55.055 --> 00:11:56.735
This is rules reference.

00:11:56.735 --> 00:12:00.140
You can always find all rules here.

00:12:00.140 --> 00:12:04.970
For example, if I'm going to look for no unused bars,

00:12:04.970 --> 00:12:06.815
you can see it here.

00:12:06.815 --> 00:12:07.910
Let's look for it.

00:12:07.910 --> 00:12:10.085
Yeah, disallow unused variables.

00:12:10.085 --> 00:12:11.600
So this is what the rule does,

00:12:11.600 --> 00:12:15.785
is this allows the usage of unused variables.

00:12:15.785 --> 00:12:17.120
So let's try it out.

00:12:17.120 --> 00:12:19.580
I'm going to get back to my code.

00:12:19.580 --> 00:12:22.040
And here what I have parsing error,

00:12:22.040 --> 00:12:23.900
the key input is reserved.

00:12:23.900 --> 00:12:26.780
Well, yeah, we first need to let ES lint

00:12:26.780 --> 00:12:28.775
understand that we are using

00:12:28.775 --> 00:12:31.535
the latest JavaScript syntax.

00:12:31.535 --> 00:12:33.890
In order to do that, we go to ES lint.

00:12:33.890 --> 00:12:35.090
In here, we add

00:12:35.090 --> 00:12:38.945
another option which is going to be parser options.

00:12:38.945 --> 00:12:43.655
So inside parser options we have to supply AVMA version.

00:12:43.655 --> 00:12:46.310
And let's put 2020

00:12:46.310 --> 00:12:49.639
here when I save the file and go back to test MGS,

00:12:49.639 --> 00:12:53.510
and I see another error saying import and export

00:12:53.510 --> 00:12:54.530
may appear only in

00:12:54.530 --> 00:12:57.710
source type module coming from ES lint again.

00:12:57.710 --> 00:13:00.560
So I go back to yes Lind and I can supply

00:13:00.560 --> 00:13:02.690
another option here is going to be

00:13:02.690 --> 00:13:05.015
source type, module grade.

00:13:05.015 --> 00:13:07.910
Now we don't have any errors or warnings,

00:13:07.910 --> 00:13:11.405
so we have no unused virus rule defined

00:13:11.405 --> 00:13:15.020
which will produce an error whenever we go against that,

00:13:15.020 --> 00:13:17.795
true, Let's go to test mgs.

00:13:17.795 --> 00:13:20.555
And here let's create an end-use variable.

00:13:20.555 --> 00:13:22.835
Maybe I will name it Hello.

00:13:22.835 --> 00:13:24.680
And what do we see here?

00:13:24.680 --> 00:13:28.850
We see that it is highlighted with red line.

00:13:28.850 --> 00:13:30.920
If I hover, you see how

00:13:30.920 --> 00:13:33.545
low is assigned a value but never used.

00:13:33.545 --> 00:13:35.585
And it comes, as you can see from

00:13:35.585 --> 00:13:37.925
ES lint, no unused variables.

00:13:37.925 --> 00:13:40.445
If I'm going to go back to ES lint RC,

00:13:40.445 --> 00:13:42.320
and if I'm going to disable that rule,

00:13:42.320 --> 00:13:45.845
to disable the checking against that rule.

00:13:45.845 --> 00:13:50.135
You will see now, I don't have any warning or an adder.

00:13:50.135 --> 00:13:54.110
So let's get back here and let's put it as a warning.

00:13:54.110 --> 00:13:58.415
And we can see it is yellow because it is a warning now.

00:13:58.415 --> 00:14:00.680
And if I put it back to utter,

00:14:00.680 --> 00:14:02.540
it will be turned red.

00:14:02.540 --> 00:14:03.470
Awesome.

00:14:03.470 --> 00:14:05.390
Let's maybe keep it a warning

00:14:05.390 --> 00:14:07.640
and let's get back to the documentation.

00:14:07.640 --> 00:14:12.140
So let's get back to the installation page.

00:14:12.140 --> 00:14:16.055
And here we can see at the very bottom that we can

00:14:16.055 --> 00:14:20.000
also put the extents option inside ES lint.

00:14:20.000 --> 00:14:21.905
The thing is that ES lint

00:14:21.905 --> 00:14:24.740
has a lot of different rules and

00:14:24.740 --> 00:14:26.825
writing all of those rules

00:14:26.825 --> 00:14:30.005
manually over here all the time.

00:14:30.005 --> 00:14:31.745
This is not very convenient because

00:14:31.745 --> 00:14:34.640
our ES lint ours is going to be pretty, pretty long.

00:14:34.640 --> 00:14:35.855
This is not convenient.

00:14:35.855 --> 00:14:37.340
So to solve that problem,

00:14:37.340 --> 00:14:39.935
ES lint has config files or

00:14:39.935 --> 00:14:42.620
let's say predefined conflicts that we

00:14:42.620 --> 00:14:44.975
can extend from ES lint comes

00:14:44.975 --> 00:14:47.870
built in ES lint recommended conflict.

00:14:47.870 --> 00:14:52.145
So let's just copy it and put it at the top.

00:14:52.145 --> 00:14:55.850
Now, we use the recommended convict.

00:14:55.850 --> 00:14:57.830
If we go back to test MGS,

00:14:57.830 --> 00:15:02.345
we see that we have console is not defined now.

00:15:02.345 --> 00:15:04.850
Well, this is because ES lint things

00:15:04.850 --> 00:15:07.325
that we are running inside the browser environment.

00:15:07.325 --> 00:15:08.990
And for that, we have to again

00:15:08.990 --> 00:15:12.185
specify that we are running inside no jazz.

00:15:12.185 --> 00:15:15.350
So for that, we have to put the ENV options

00:15:15.350 --> 00:15:20.645
here and we specify that we are inside.

00:15:20.645 --> 00:15:23.630
Note. And we will put true,

00:15:23.630 --> 00:15:26.615
we can actually put a lot of different options like

00:15:26.615 --> 00:15:28.580
ES6 to specify again that

00:15:28.580 --> 00:15:30.545
we're using the latest JavaScript syntax.

00:15:30.545 --> 00:15:32.225
And there are lots of different options.

00:15:32.225 --> 00:15:35.270
And trust me, you don't need to know all of them.

00:15:35.270 --> 00:15:36.500
Because you always have

00:15:36.500 --> 00:15:39.830
first documentation that you can use whenever you

00:15:39.830 --> 00:15:42.230
have problems with Eastland understanding

00:15:42.230 --> 00:15:44.660
or you can just copy and paste yes.

00:15:44.660 --> 00:15:48.335
Link conflict from somewhere and adjusted for your needs.

00:15:48.335 --> 00:15:49.895
This is a very basic one.

00:15:49.895 --> 00:15:51.215
Let's keep it as it is.

00:15:51.215 --> 00:15:53.045
One important note that I wanted to

00:15:53.045 --> 00:15:55.970
emphasize is that you can only see that

00:15:55.970 --> 00:15:58.700
yellow hovering or maybe you can see

00:15:58.700 --> 00:16:02.195
that red hovering over here.

00:16:02.195 --> 00:16:05.615
I mean, direct reporting inside VS Code,

00:16:05.615 --> 00:16:07.610
thanks to the extension.

00:16:07.610 --> 00:16:11.615
So I have ES lint extension installed.

00:16:11.615 --> 00:16:16.115
That one which integrates ES lint into VS code.

00:16:16.115 --> 00:16:19.355
That is why here I see this red line.

00:16:19.355 --> 00:16:21.589
If this extension was disabled

00:16:21.589 --> 00:16:24.920
than ES lint wouldn't actually reported to me,

00:16:24.920 --> 00:16:26.615
just like I see it right now.

00:16:26.615 --> 00:16:28.550
It wouldn't be turned red.

00:16:28.550 --> 00:16:31.100
The only way I would know about

00:16:31.100 --> 00:16:34.835
that error would be to running ES lint command,

00:16:34.835 --> 00:16:37.685
just like we did before with preacher.

00:16:37.685 --> 00:16:40.790
So maybe let's create another NPM script

00:16:40.790 --> 00:16:44.300
and let's define the command for Eastland.

00:16:44.300 --> 00:16:46.700
Let's get back to package.json.

00:16:46.700 --> 00:16:52.985
Here I'm going to put may be lint command and I will call

00:16:52.985 --> 00:16:57.260
ES lint asterix dot JS or since

00:16:57.260 --> 00:17:01.715
we have MGS extension I will put and gs over here,

00:17:01.715 --> 00:17:04.070
we're going to run to ES lint against

00:17:04.070 --> 00:17:07.519
all files with the MGS extension.

00:17:07.519 --> 00:17:10.490
Let's go into the integrated terminal and let's

00:17:10.490 --> 00:17:14.255
execute the script that we've defined,

00:17:14.255 --> 00:17:16.610
npm run lint, and you will

00:17:16.610 --> 00:17:19.880
see ES lint reports one problem.

00:17:19.880 --> 00:17:22.835
Hello is assigned a value but never used.

00:17:22.835 --> 00:17:24.050
So this is very

00:17:24.050 --> 00:17:26.720
convenient because in the production code,

00:17:26.720 --> 00:17:30.185
we apparently do not want to have and use variables.

00:17:30.185 --> 00:17:32.405
And there are lots of different errors

00:17:32.405 --> 00:17:34.910
and warnings that we might receive.

00:17:34.910 --> 00:17:38.060
But trust me, this is for our own good.

00:17:38.060 --> 00:17:40.670
Es lint will help us to maintain

00:17:40.670 --> 00:17:44.495
our codebase with fewer errors as possible.

00:17:44.495 --> 00:17:45.680
We're going to utilize

00:17:45.680 --> 00:17:48.200
ES lint combined with preacher a lot.

00:17:48.200 --> 00:17:52.100
However, there is one problem with ES lint and Preacher.

00:17:52.100 --> 00:17:53.165
The thing is that

00:17:53.165 --> 00:17:57.515
some preacher rules overlap with ES lint rules.

00:17:57.515 --> 00:17:59.150
And to fix that error,

00:17:59.150 --> 00:18:01.835
we need to navigate to ES lint.

00:18:01.835 --> 00:18:04.340
If we go to ES lint in

00:18:04.340 --> 00:18:07.760
we scroll to the summary here we can

00:18:07.760 --> 00:18:11.075
see use ES lint convict preacher

00:18:11.075 --> 00:18:14.105
to make preacher and ES link play nice together.

00:18:14.105 --> 00:18:17.314
Let's navigate to ES lean conflict preacher.

00:18:17.314 --> 00:18:20.675
And let's go to the installation part.

00:18:20.675 --> 00:18:22.655
We're going to copy it.

00:18:22.655 --> 00:18:24.170
We're going to put it here.

00:18:24.170 --> 00:18:25.940
And again, dash, dash,

00:18:25.940 --> 00:18:27.770
save dev flag for

00:18:27.770 --> 00:18:31.055
installing that package as a dev dependency.

00:18:31.055 --> 00:18:33.740
If you're going to look inside dev dependencies,

00:18:33.740 --> 00:18:35.930
you will see Eastern conflict preacher now.

00:18:35.930 --> 00:18:38.330
And let's see what we have to do at preacher to

00:18:38.330 --> 00:18:41.555
the extensive array in your Eastland RC file.

00:18:41.555 --> 00:18:44.540
So extends some other configures and pressure.

00:18:44.540 --> 00:18:47.659
All right, so let's put, let's copy preacher.

00:18:47.659 --> 00:18:50.885
Let's get back to ES lint extends.

00:18:50.885 --> 00:18:54.110
And you can see from the example it uses an array.

00:18:54.110 --> 00:18:56.900
So ES lint supports both.

00:18:56.900 --> 00:18:59.045
Let's turn it into an array.

00:18:59.045 --> 00:19:01.670
And let's put preacher here.

00:19:01.670 --> 00:19:02.300
Nice.

00:19:02.300 --> 00:19:06.035
Without that package, without that ESPN convict preacher,

00:19:06.035 --> 00:19:08.210
you will end up in a situation when you will have

00:19:08.210 --> 00:19:09.800
Eastland errors and you will not

00:19:09.800 --> 00:19:11.870
understand why are you having them.

00:19:11.870 --> 00:19:15.650
This package ensures that you do not have any conflicts.

00:19:15.650 --> 00:19:17.510
And I will see this is it.

00:19:17.510 --> 00:19:20.270
This is all I wanted to tell about ES lint and

00:19:20.270 --> 00:19:23.180
preacher to quickly summarize, what is Eastland?

00:19:23.180 --> 00:19:27.365
Eastland is a tool that will allow us to check our code,

00:19:27.365 --> 00:19:29.494
our JavaScript code, against

00:19:29.494 --> 00:19:32.360
some predefined common guidelines.

00:19:32.360 --> 00:19:36.545
It will eventually make our code less error prone,

00:19:36.545 --> 00:19:39.380
and it will ensure that our codebase,

00:19:39.380 --> 00:19:41.450
as clean as possible.

00:19:41.450 --> 00:19:44.390
Preacher will format our codebase

00:19:44.390 --> 00:19:47.300
so it becomes as readable as possible.

00:19:47.300 --> 00:19:49.220
Just one more time, I'm going to say that

00:19:49.220 --> 00:19:51.409
these tools are optional,

00:19:51.409 --> 00:19:53.525
but you will see preacher and

00:19:53.525 --> 00:19:56.330
ES lint in almost every JavaScript project

00:19:56.330 --> 00:19:58.970
because people want their projects to

00:19:58.970 --> 00:20:02.000
be readable and to be less error prone.

00:20:02.000 --> 00:20:02.855
That's it.

00:20:02.855 --> 00:20:05.430
See you in the next one.
