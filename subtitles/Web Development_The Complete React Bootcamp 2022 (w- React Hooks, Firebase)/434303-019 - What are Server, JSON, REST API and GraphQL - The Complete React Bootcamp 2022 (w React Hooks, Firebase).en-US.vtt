WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.830
Hey, in this video,

00:00:01.830 --> 00:00:04.695
I would like to talk about servers.

00:00:04.695 --> 00:00:06.015
What is a server?

00:00:06.015 --> 00:00:07.260
What is an API?

00:00:07.260 --> 00:00:08.865
What is a rest API?

00:00:08.865 --> 00:00:10.170
What is GraphQL?

00:00:10.170 --> 00:00:12.165
Let's find out it together.

00:00:12.165 --> 00:00:15.000
First, let's start off with server.

00:00:15.000 --> 00:00:16.860
What is a server?

00:00:16.860 --> 00:00:18.480
A server, it is

00:00:18.480 --> 00:00:22.545
just a computers somewhere out there on the Internet.

00:00:22.545 --> 00:00:24.870
It runs some software.

00:00:24.870 --> 00:00:26.220
And that software on

00:00:26.220 --> 00:00:30.390
that computer lessons for our incoming requests.

00:00:30.390 --> 00:00:34.155
So for example, when I navigate to any website,

00:00:34.155 --> 00:00:36.745
when I click on that link,

00:00:36.745 --> 00:00:41.120
my browser sends a request to that server.

00:00:41.120 --> 00:00:43.130
So on the left, this is my browser,

00:00:43.130 --> 00:00:46.430
and it sends that request to that server.

00:00:46.430 --> 00:00:50.045
This server handles the incoming request

00:00:50.045 --> 00:00:52.850
and sends back HTML,

00:00:52.850 --> 00:00:56.735
CSS, and JavaScript files.

00:00:56.735 --> 00:00:58.670
So again, a server,

00:00:58.670 --> 00:01:00.485
it is just a computer which runs

00:01:00.485 --> 00:01:02.570
some software that somehow

00:01:02.570 --> 00:01:06.980
handles our incoming requests and sends a response back.

00:01:06.980 --> 00:01:12.110
Now, what if I don't want to always receive HTML, CSS,

00:01:12.110 --> 00:01:14.600
and JavaScript files, maybe I just

00:01:14.600 --> 00:01:17.180
want to run some query on the website,

00:01:17.180 --> 00:01:18.995
like on the search bar.

00:01:18.995 --> 00:01:21.770
Do I need to return HTML again?

00:01:21.770 --> 00:01:22.655
No, you don't.

00:01:22.655 --> 00:01:24.485
You just need to get the data,

00:01:24.485 --> 00:01:27.725
the result of that query in the search bar.

00:01:27.725 --> 00:01:29.030
So in this case,

00:01:29.030 --> 00:01:33.530
data must be transferred in some other format.

00:01:33.530 --> 00:01:36.170
So some other format is usually

00:01:36.170 --> 00:01:38.840
JSON format or XML format.

00:01:38.840 --> 00:01:42.095
But XML is already obsolete,

00:01:42.095 --> 00:01:46.655
I would say on the web right now, everybody uses JSON.

00:01:46.655 --> 00:01:50.930
So let's look for JSON or maybe even for JSON

00:01:50.930 --> 00:01:55.940
placeholder free fake rest API.

00:01:55.940 --> 00:02:00.350
Alright, so first we need to find out what is JSON.

00:02:00.350 --> 00:02:03.275
I'm just going to click on Run script over here.

00:02:03.275 --> 00:02:06.110
And I receive this JSON is

00:02:06.110 --> 00:02:10.145
just format in which data is transferred over the web.

00:02:10.145 --> 00:02:12.065
It can be used not only on the web,

00:02:12.065 --> 00:02:14.450
but in any other scenario.

00:02:14.450 --> 00:02:16.790
It is just very easy to

00:02:16.790 --> 00:02:20.000
transfer information in this format.

00:02:20.000 --> 00:02:23.300
It looks very similar to a JavaScript object.

00:02:23.300 --> 00:02:26.105
Now, let's get back to our canvas.

00:02:26.105 --> 00:02:29.360
So how does it fit this scenario?

00:02:29.360 --> 00:02:31.340
So imagine I'm here on

00:02:31.340 --> 00:02:34.595
the website and I type something in the search bar,

00:02:34.595 --> 00:02:37.685
which is inside the website.

00:02:37.685 --> 00:02:42.515
And I want to get my search results back in JSON format,

00:02:42.515 --> 00:02:46.280
I would send another request to that server,

00:02:46.280 --> 00:02:49.865
and that server will handle my request, my query.

00:02:49.865 --> 00:02:51.740
It will look up for the database.

00:02:51.740 --> 00:02:53.345
It will retrieve the results,

00:02:53.345 --> 00:02:57.170
and it will send this data back to me in JSON format,

00:02:57.170 --> 00:02:59.510
which looks exactly like that.

00:02:59.510 --> 00:03:04.415
So no need for HTML, CSS or JavaScript.

00:03:04.415 --> 00:03:08.660
So these kind of server that hosts HTML,

00:03:08.660 --> 00:03:11.555
CSS and JavaScript files,

00:03:11.555 --> 00:03:13.925
usually called the hosting services.

00:03:13.925 --> 00:03:18.290
So they are used to host basic HTML pages.

00:03:18.290 --> 00:03:20.075
They just put your files,

00:03:20.075 --> 00:03:22.445
HTML and CSS on their machine,

00:03:22.445 --> 00:03:26.659
and they just serve these files on their computer.

00:03:26.659 --> 00:03:27.590
That's it.

00:03:27.590 --> 00:03:29.689
What about API servers?

00:03:29.689 --> 00:03:32.495
So what is an API in the first place,

00:03:32.495 --> 00:03:36.665
API stands for application programming interface,

00:03:36.665 --> 00:03:40.040
and it usually fits API servers only

00:03:40.040 --> 00:03:43.760
because most often API servers

00:03:43.760 --> 00:03:46.400
serve this purpose of

00:03:46.400 --> 00:03:50.960
a middleman between you and underlying database.

00:03:50.960 --> 00:03:52.865
But this is not only the case.

00:03:52.865 --> 00:03:54.740
Well, they are usually called

00:03:54.740 --> 00:03:56.810
API servers because they are

00:03:56.810 --> 00:04:01.535
interfaces for everything that is behind that server.

00:04:01.535 --> 00:04:04.595
That it is why they're called APIs

00:04:04.595 --> 00:04:08.600
or interfaces or whatever he called them.

00:04:08.600 --> 00:04:12.560
Let's take a look at this JSON placeholder one more time.

00:04:12.560 --> 00:04:16.670
So I send a request to this URL.

00:04:16.670 --> 00:04:21.260
I'm just going to copy it and put it here.

00:04:21.260 --> 00:04:23.930
If I access it, you will probably

00:04:23.930 --> 00:04:26.630
see this in raw format like that.

00:04:26.630 --> 00:04:28.895
This server acts as

00:04:28.895 --> 00:04:33.215
a rest API because it follows the rest format.

00:04:33.215 --> 00:04:36.125
So it is an API because

00:04:36.125 --> 00:04:39.065
it is a custom server implementation.

00:04:39.065 --> 00:04:43.550
So it is that custom software installed on

00:04:43.550 --> 00:04:46.160
the server which handles

00:04:46.160 --> 00:04:49.760
my request to it and sends back Jason,

00:04:49.760 --> 00:04:51.365
this is the API part.

00:04:51.365 --> 00:04:52.925
Now, what is rest?

00:04:52.925 --> 00:04:55.220
Rest means that it follows

00:04:55.220 --> 00:04:59.900
the rest design pattern on rest implementation.

00:04:59.900 --> 00:05:03.860
It means that the server JSON placeholder type code

00:05:03.860 --> 00:05:05.795
that calm exposes

00:05:05.795 --> 00:05:09.020
multiple endpoints that we're able to

00:05:09.020 --> 00:05:12.815
access in order to retrieve data. For example.

00:05:12.815 --> 00:05:15.695
Go to slash to do's slash one.

00:05:15.695 --> 00:05:17.480
This is todo id.

00:05:17.480 --> 00:05:22.310
We get data for to do with ID number 1.

00:05:22.310 --> 00:05:25.235
If I type seven here,

00:05:25.235 --> 00:05:28.475
you will see I have now user id one,

00:05:28.475 --> 00:05:30.530
id seven and different data.

00:05:30.530 --> 00:05:32.075
If it's going to be four,

00:05:32.075 --> 00:05:33.665
it will be different data.

00:05:33.665 --> 00:05:36.245
If it's going to be something like that,

00:05:36.245 --> 00:05:38.645
you will see nothing because it does not

00:05:38.645 --> 00:05:41.045
exist their API server,

00:05:41.045 --> 00:05:44.840
this one that we're accessing right now is actually

00:05:44.840 --> 00:05:48.709
an API for the underlying database

00:05:48.709 --> 00:05:51.080
that it uses on under the hood.

00:05:51.080 --> 00:05:54.320
Okay, and it follows the rest pattern.

00:05:54.320 --> 00:05:59.245
You can navigate to the main website over here.

00:05:59.245 --> 00:06:01.045
And you can look for

00:06:01.045 --> 00:06:05.440
other end points available on that resource.

00:06:05.440 --> 00:06:08.170
For example, you can see resources here.

00:06:08.170 --> 00:06:09.925
We can go to posts,

00:06:09.925 --> 00:06:11.620
we can go to users,

00:06:11.620 --> 00:06:13.435
we can go to albums.

00:06:13.435 --> 00:06:17.185
And you can see they all have different endpoints.

00:06:17.185 --> 00:06:20.830
Again, this is because it follows rest implementation.

00:06:20.830 --> 00:06:24.385
Imagine a big house with a lot of doors.

00:06:24.385 --> 00:06:28.165
So a big house is the server, the API server.

00:06:28.165 --> 00:06:31.269
And those doors are and points

00:06:31.269 --> 00:06:34.510
that you are accessing in order to get data.

00:06:34.510 --> 00:06:37.440
And that data is transferred in JSON format.

00:06:37.440 --> 00:06:41.705
Because it is very simple to understand that format.

00:06:41.705 --> 00:06:45.305
It is very lightweight and easy to read or write,

00:06:45.305 --> 00:06:46.955
but rest is not

00:06:46.955 --> 00:06:50.390
the only server implementation

00:06:50.390 --> 00:06:53.495
that might exist out there in the wild.

00:06:53.495 --> 00:06:56.540
There is another one really popular right now,

00:06:56.540 --> 00:06:58.610
which is called GraphQL.

00:06:58.610 --> 00:07:00.620
And there are obviously the others.

00:07:00.620 --> 00:07:03.230
So, but right now at the present,

00:07:03.230 --> 00:07:07.970
primarily two types, rest API and GraphQL API.

00:07:07.970 --> 00:07:11.240
Graphql is at the same time a language

00:07:11.240 --> 00:07:12.590
and at the same time

00:07:12.590 --> 00:07:15.230
the server implementation, the architecture.

00:07:15.230 --> 00:07:17.420
So let's look for

00:07:17.420 --> 00:07:22.925
GraphQL in Google or maybe GraphQL Explorer.

00:07:22.925 --> 00:07:28.100
It will bring us to this GitHub docs page GraphQL API.

00:07:28.100 --> 00:07:31.580
And it will, we will end up on that page.

00:07:31.580 --> 00:07:34.700
It will require me to sign in in order to use it.

00:07:34.700 --> 00:07:37.025
So I'm going to sign in with my account.

00:07:37.025 --> 00:07:40.100
If you don't have GitHub account for now, it's fine.

00:07:40.100 --> 00:07:41.810
Just look through the video.

00:07:41.810 --> 00:07:44.225
So this is GraphQL language.

00:07:44.225 --> 00:07:46.010
This is how it looks like.

00:07:46.010 --> 00:07:49.940
In order to request data from GraphQL server,

00:07:49.940 --> 00:07:52.595
we have to send a co-vary

00:07:52.595 --> 00:07:56.045
like Dad in that format following graph QL language.

00:07:56.045 --> 00:07:57.995
So if I'm going to send it,

00:07:57.995 --> 00:07:59.960
you will see I get data in

00:07:59.960 --> 00:08:03.530
this format and it is JSON format, as you can see.

00:08:03.530 --> 00:08:06.530
So what is the difference between graphical and rest?

00:08:06.530 --> 00:08:08.075
Well, first of all,

00:08:08.075 --> 00:08:09.740
just like I mentioned before,

00:08:09.740 --> 00:08:13.310
rest API has multiple endpoints.

00:08:13.310 --> 00:08:15.590
For example, slash todos.

00:08:15.590 --> 00:08:16.610
Where is it?

00:08:16.610 --> 00:08:19.265
Slash comments, albums, photos, and to-dos.

00:08:19.265 --> 00:08:21.560
To access data, your URL must

00:08:21.560 --> 00:08:24.275
be different to access different resources.

00:08:24.275 --> 00:08:27.590
But GraphQL, it is slightly different.

00:08:27.590 --> 00:08:32.780
If I click on Inspect and go to Network tab here,

00:08:32.780 --> 00:08:36.020
when I hit this play button,

00:08:36.020 --> 00:08:39.035
you can see the URL that is being accessed,

00:08:39.035 --> 00:08:42.005
which is slash GraphQL slash proxy.

00:08:42.005 --> 00:08:44.525
And if I execute another request,

00:08:44.525 --> 00:08:47.060
the URL does not change.

00:08:47.060 --> 00:08:50.330
Well, GraphQL server implementation

00:08:50.330 --> 00:08:52.760
has only one end point through

00:08:52.760 --> 00:08:55.655
which all requests go through

00:08:55.655 --> 00:08:58.925
to understand what the user declined,

00:08:58.925 --> 00:09:00.515
what we want from the server.

00:09:00.515 --> 00:09:03.395
We send that co-vary to the server.

00:09:03.395 --> 00:09:06.365
If, for example, we navigate to

00:09:06.365 --> 00:09:10.820
references and queries in a new tab.

00:09:10.820 --> 00:09:17.180
So let's look for user and it expects one argument.

00:09:17.180 --> 00:09:18.875
Let's try this query.

00:09:18.875 --> 00:09:21.545
So I'm going to remove all of that.

00:09:21.545 --> 00:09:22.895
I'm going to type user,

00:09:22.895 --> 00:09:24.425
just like it says here.

00:09:24.425 --> 00:09:26.360
And we need to supply an argument.

00:09:26.360 --> 00:09:27.230
You supply an argument.

00:09:27.230 --> 00:09:28.970
We have to open parenthesis and

00:09:28.970 --> 00:09:31.070
we put this argument over here.

00:09:31.070 --> 00:09:34.580
Login is the argument of type string.

00:09:34.580 --> 00:09:38.315
We're going to put my nickname over here.

00:09:38.315 --> 00:09:40.700
Now in curly brackets have to

00:09:40.700 --> 00:09:43.670
specify what kind of data we have to receive.

00:09:43.670 --> 00:09:45.935
So it is going to be login.

00:09:45.935 --> 00:09:47.795
If I put it like that.

00:09:47.795 --> 00:09:50.974
Well, I basically have the same information,

00:09:50.974 --> 00:09:54.500
but the query is different and at that point is the same.

00:09:54.500 --> 00:09:57.545
Now, have you spot the difference yet?

00:09:57.545 --> 00:09:59.330
Well, the difference, the main

00:09:59.330 --> 00:10:01.340
difference about GraphQL and rest

00:10:01.340 --> 00:10:04.580
API is that GraphQL only

00:10:04.580 --> 00:10:08.615
sends data that you ask for, right?

00:10:08.615 --> 00:10:12.890
So here I ask only for login in my query.

00:10:12.890 --> 00:10:16.505
So this query is actually called a schema,

00:10:16.505 --> 00:10:19.805
schema that you request from the server.

00:10:19.805 --> 00:10:22.805
All right, So I request this schema of

00:10:22.805 --> 00:10:27.215
only login and I get only login back to rest API.

00:10:27.215 --> 00:10:28.939
If we go to posts,

00:10:28.939 --> 00:10:30.875
I asked for posts.

00:10:30.875 --> 00:10:37.520
I don't specify what fields I want to retrieve from pose.

00:10:37.520 --> 00:10:40.130
This is up to the server to decide

00:10:40.130 --> 00:10:42.815
so that server centers title and body,

00:10:42.815 --> 00:10:44.990
and we cannot change that.

00:10:44.990 --> 00:10:49.520
All right, if I access posts with that ID,

00:10:49.520 --> 00:10:51.245
it gives me title and body.

00:10:51.245 --> 00:10:55.970
But with GraphQL, I'm able to specify what fields

00:10:55.970 --> 00:10:58.055
I want to retrieve from the server

00:10:58.055 --> 00:11:00.740
if we navigate to the dogs.

00:11:00.740 --> 00:11:05.299
So login, actually this query returns us type user.

00:11:05.299 --> 00:11:06.470
If we open it,

00:11:06.470 --> 00:11:09.290
user has a lot of fields

00:11:09.290 --> 00:11:12.875
and we can actually use intelligence from GraphQL.

00:11:12.875 --> 00:11:16.505
So I'm just going to press control space.

00:11:16.505 --> 00:11:20.420
And here I have bio control space here

00:11:20.420 --> 00:11:24.439
I have maybe name here I have login.

00:11:24.439 --> 00:11:27.020
So you can see I'm using the query language

00:11:27.020 --> 00:11:29.645
to specify what field I want to retrieve.

00:11:29.645 --> 00:11:32.975
And when I hit Play to send the query,

00:11:32.975 --> 00:11:35.090
you can see now I have

00:11:35.090 --> 00:11:39.110
my custom data shape that is specified in the query.

00:11:39.110 --> 00:11:40.220
Pretty cool.

00:11:40.220 --> 00:11:42.574
So this is the main difference.

00:11:42.574 --> 00:11:45.875
And you will probably think that GraphQL is,

00:11:45.875 --> 00:11:47.675
Oh my God, It is amazing.

00:11:47.675 --> 00:11:50.449
Why do we even need rest APIs?

00:11:50.449 --> 00:11:52.820
The problem is all about

00:11:52.820 --> 00:11:55.385
implementation and its complexity.

00:11:55.385 --> 00:11:58.400
Graphql was created by Facebook

00:11:58.400 --> 00:12:01.775
a few years ago and it became really popular.

00:12:01.775 --> 00:12:04.190
However, rest API is more

00:12:04.190 --> 00:12:08.449
mature and battle tested solution.

00:12:08.449 --> 00:12:09.965
Graphql is hard.

00:12:09.965 --> 00:12:11.225
It's not that easy.

00:12:11.225 --> 00:12:14.405
It is easy to consume Graph kill,

00:12:14.405 --> 00:12:16.775
but to implement GraphQL,

00:12:16.775 --> 00:12:18.830
it requires good knowledge.

00:12:18.830 --> 00:12:21.920
Rest API is simpler, easier to implement,

00:12:21.920 --> 00:12:27.200
and it is more intuitive compared to GraphQL congrats.

00:12:27.200 --> 00:12:29.450
Now you know what is an API.

00:12:29.450 --> 00:12:31.890
See you in the next one.
