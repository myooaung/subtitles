WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.670
Hi, In this video we're finally going to

00:00:02.670 --> 00:00:05.460
talk about promises and async await.

00:00:05.460 --> 00:00:06.390
Let's go.

00:00:06.390 --> 00:00:10.305
We know that the basis for promises is async code.

00:00:10.305 --> 00:00:12.315
But then what is a promise?

00:00:12.315 --> 00:00:14.910
A promise is an object and that will

00:00:14.910 --> 00:00:18.960
produce some value sometime in the future.

00:00:18.960 --> 00:00:21.810
In a non-blocking way asynchronously,

00:00:21.810 --> 00:00:26.235
a promise can be one of the three states pending state,

00:00:26.235 --> 00:00:29.310
results state and rejected state.

00:00:29.310 --> 00:00:32.370
While a promise is in the pending state,

00:00:32.370 --> 00:00:34.590
it means that the promise hasn't

00:00:34.590 --> 00:00:38.050
resolved or hasn't produced any value yet,

00:00:38.050 --> 00:00:39.800
one promise is resolved.

00:00:39.800 --> 00:00:43.325
It means that the promise already produced a value.

00:00:43.325 --> 00:00:44.930
And when promises rejected,

00:00:44.930 --> 00:00:47.390
it means that this promise has thrown

00:00:47.390 --> 00:00:50.195
and adder and it hasn't produced any value.

00:00:50.195 --> 00:00:53.870
All right, let's see how a very basic promise looks like,

00:00:53.870 --> 00:00:56.360
and let's see how we can start working with them.

00:00:56.360 --> 00:00:57.980
So let me create a variable.

00:00:57.980 --> 00:01:00.455
I'm going to call it do some.

00:01:00.455 --> 00:01:02.690
And inside that variable I'm just going

00:01:02.690 --> 00:01:04.790
to call promised constructor.

00:01:04.790 --> 00:01:08.060
To do that, I have to do new promise.

00:01:08.060 --> 00:01:09.965
And the promise constructor,

00:01:09.965 --> 00:01:12.710
I have to supply the executor or

00:01:12.710 --> 00:01:16.100
the callback that will initialize the promise.

00:01:16.100 --> 00:01:19.280
So I'm going to pass an empty callback.

00:01:19.280 --> 00:01:21.080
And that callback that I pass to

00:01:21.080 --> 00:01:23.930
the constructor always receives two arguments.

00:01:23.930 --> 00:01:27.380
The first argument is something called resolve.

00:01:27.380 --> 00:01:28.970
Second is reject.

00:01:28.970 --> 00:01:30.650
So the first argument is

00:01:30.650 --> 00:01:33.260
the function that we must call inside

00:01:33.260 --> 00:01:35.105
the callback in order to

00:01:35.105 --> 00:01:37.700
produce a value from that promise.

00:01:37.700 --> 00:01:39.245
And when we call reject,

00:01:39.245 --> 00:01:42.770
obviously we throw an error from that promise.

00:01:42.770 --> 00:01:44.675
We reject this promise.

00:01:44.675 --> 00:01:47.450
So for example, I'm just going to call resolve.

00:01:47.450 --> 00:01:49.429
And as you can see from the intelligence,

00:01:49.429 --> 00:01:51.815
I have value that I have to pass.

00:01:51.815 --> 00:01:53.885
We resolve a promise with

00:01:53.885 --> 00:01:57.110
some value because promise produces a value.

00:01:57.110 --> 00:01:59.060
So for example, hello.

00:01:59.060 --> 00:02:04.430
Now, let's try and just somehow use that promise.

00:02:04.430 --> 00:02:06.290
So remember that a promise,

00:02:06.290 --> 00:02:07.775
it is not a function.

00:02:07.775 --> 00:02:11.015
So it would be wrong to call it with parenthesis

00:02:11.015 --> 00:02:14.675
as if that do some valuable was a function.

00:02:14.675 --> 00:02:16.340
It is just enough to reference

00:02:16.340 --> 00:02:18.920
the promise in order to make it work.

00:02:18.920 --> 00:02:21.860
If I save the file and then I execute the script,

00:02:21.860 --> 00:02:24.620
you will see nothing is going to happen because well,

00:02:24.620 --> 00:02:26.885
we print nothing to the output.

00:02:26.885 --> 00:02:32.015
But if I'm going to console log do some,

00:02:32.015 --> 00:02:33.650
in this case, I will see

00:02:33.650 --> 00:02:35.990
the promise object will be printed.

00:02:35.990 --> 00:02:38.150
It is important to note that what you

00:02:38.150 --> 00:02:40.430
see here is the promise object.

00:02:40.430 --> 00:02:42.350
So it is the promise itself.

00:02:42.350 --> 00:02:45.695
It is not the value that the promise resolves.

00:02:45.695 --> 00:02:48.890
That callback that we pass to promise

00:02:48.890 --> 00:02:52.340
constructor is initialized synchronously.

00:02:52.340 --> 00:02:54.800
It means that whenever we reference to some,

00:02:54.800 --> 00:02:57.995
this callback will run in a blocking way.

00:02:57.995 --> 00:03:01.490
However, it, the value which will be resolved from

00:03:01.490 --> 00:03:05.585
that promise is resolved in a non-blocking way.

00:03:05.585 --> 00:03:08.090
And to resolve a value from

00:03:08.090 --> 00:03:11.360
that promise to get the actual string hello,

00:03:11.360 --> 00:03:13.775
I have to use this special promise syntax

00:03:13.775 --> 00:03:16.955
called then or just venerable syntax.

00:03:16.955 --> 00:03:18.500
It's called sometimes like that.

00:03:18.500 --> 00:03:21.320
So do some DOD.

00:03:21.320 --> 00:03:23.540
And from the intelligence you can see I have

00:03:23.540 --> 00:03:26.855
three options catch finally, and then,

00:03:26.855 --> 00:03:30.125
so to resolve a value from that promise,

00:03:30.125 --> 00:03:32.360
I have to call the dot then method on

00:03:32.360 --> 00:03:35.705
the promise object and 2D dot-dot-dot method,

00:03:35.705 --> 00:03:37.535
I have to pass a callback.

00:03:37.535 --> 00:03:40.475
And that callback as the first argument,

00:03:40.475 --> 00:03:43.535
will receive the result value from that promise,

00:03:43.535 --> 00:03:46.670
for example, resolved value.

00:03:46.670 --> 00:03:49.640
And if I try and console log result value,

00:03:49.640 --> 00:03:53.210
you will see that it will be our string Hello.

00:03:53.210 --> 00:03:54.875
If I run the script,

00:03:54.875 --> 00:03:56.870
you see Hello gets printed

00:03:56.870 --> 00:03:59.375
to the output, which is correct.

00:03:59.375 --> 00:04:02.630
Now, what about the reject function that we receive

00:04:02.630 --> 00:04:06.125
as the second argument in the initializer.

00:04:06.125 --> 00:04:09.769
So let's try and instead of Resolve,

00:04:09.769 --> 00:04:12.440
use reject, and once they call it,

00:04:12.440 --> 00:04:15.515
you can see an optional argument reason.

00:04:15.515 --> 00:04:17.705
So whenever we reject a promise,

00:04:17.705 --> 00:04:19.625
we rejected with some reason,

00:04:19.625 --> 00:04:21.035
most of the time,

00:04:21.035 --> 00:04:24.245
you're going to reject a promise with an error and

00:04:24.245 --> 00:04:26.150
other promises that you're going to

00:04:26.150 --> 00:04:28.460
let say encounter in the wild,

00:04:28.460 --> 00:04:31.580
they all will reject with an adder object.

00:04:31.580 --> 00:04:33.980
That's why instead of just passing reject

00:04:33.980 --> 00:04:36.575
with this promise failed.

00:04:36.575 --> 00:04:38.974
But the message like that, instead,

00:04:38.974 --> 00:04:42.470
we pass a new editor and message is

00:04:42.470 --> 00:04:46.040
going to be promise, failed grade.

00:04:46.040 --> 00:04:48.140
Now if I'm going to run this script,

00:04:48.140 --> 00:04:49.760
you will see error,

00:04:49.760 --> 00:04:51.530
promise failed and handled

00:04:51.530 --> 00:04:53.495
promise rejection warning and

00:04:53.495 --> 00:04:56.360
important note here that this then

00:04:56.360 --> 00:04:59.465
call back never fired because

00:04:59.465 --> 00:05:03.410
the promise rejected and we don't see any results value.

00:05:03.410 --> 00:05:05.780
It means that the promise throws an error and we

00:05:05.780 --> 00:05:09.080
don't do anything to handle that.

00:05:09.080 --> 00:05:12.514
Always try to catch errors from Promises.

00:05:12.514 --> 00:05:15.260
This is really important because otherwise you will

00:05:15.260 --> 00:05:18.125
see messages like that unhandled promise rejection,

00:05:18.125 --> 00:05:20.705
which can potentially crash the application.

00:05:20.705 --> 00:05:24.245
So in order to catch that rejection inside the promise,

00:05:24.245 --> 00:05:27.815
we have to use the catch block that we saw earlier.

00:05:27.815 --> 00:05:29.750
So I'm just gonna put DOD and

00:05:29.750 --> 00:05:31.925
then I'm just going to call catch method.

00:05:31.925 --> 00:05:34.670
And inside I have to also pass

00:05:34.670 --> 00:05:37.370
a callback as the first argument that call

00:05:37.370 --> 00:05:39.920
back to the catch method will

00:05:39.920 --> 00:05:43.595
receive whatever we reject that promise with.

00:05:43.595 --> 00:05:45.815
So since we rejected this promise with

00:05:45.815 --> 00:05:48.470
another object, new promise failed.

00:05:48.470 --> 00:05:49.475
Here.

00:05:49.475 --> 00:05:52.985
First argument, I'm going to receive the object.

00:05:52.985 --> 00:05:55.145
So I'm just going to console log.

00:05:55.145 --> 00:05:58.190
And I will say adder occurred.

00:05:58.190 --> 00:06:02.630
And then I'm just going to print out error message.

00:06:02.630 --> 00:06:05.765
Great, Let's try and execute the file.

00:06:05.765 --> 00:06:07.460
You will see we don't have

00:06:07.460 --> 00:06:09.425
any unhandled promise rejection warning.

00:06:09.425 --> 00:06:12.305
And this time we see our console log.

00:06:12.305 --> 00:06:14.900
So whenever we reject the promise,

00:06:14.900 --> 00:06:17.165
all dance that we defined

00:06:17.165 --> 00:06:19.865
to resolve from that promise will never be

00:06:19.865 --> 00:06:23.360
executed because promise throws an error and

00:06:23.360 --> 00:06:28.175
that error or rejection is handled by the catch block.

00:06:28.175 --> 00:06:33.295
Another great tip about promises is that dot dance.

00:06:33.295 --> 00:06:36.205
They can be chained as many times as we want,

00:06:36.205 --> 00:06:37.615
the same with catch blocks.

00:06:37.615 --> 00:06:39.250
So for example, if here I'm

00:06:39.250 --> 00:06:41.140
going to put another dot again,

00:06:41.140 --> 00:06:43.210
you will see the intelligent sketch finally.

00:06:43.210 --> 00:06:46.825
And then again I call the then method,

00:06:46.825 --> 00:06:48.310
I pass the call back.

00:06:48.310 --> 00:06:50.740
This time I received value, let's say,

00:06:50.740 --> 00:06:55.240
and I try and console log value in second them.

00:06:55.240 --> 00:06:58.855
And can you guess what is going to be that value?

00:06:58.855 --> 00:07:02.215
Let's try. And we see a promise failed.

00:07:02.215 --> 00:07:04.405
Aha, okay, So instead of reject,

00:07:04.405 --> 00:07:06.745
let's again use resolve to

00:07:06.745 --> 00:07:10.015
actually let say give the control to dot dance.

00:07:10.015 --> 00:07:13.920
We don't need to throw adder from this promise this time.

00:07:13.920 --> 00:07:15.650
So note file GS,

00:07:15.650 --> 00:07:17.120
you can see Hello first gets

00:07:17.120 --> 00:07:18.920
printed because this is what we do in

00:07:18.920 --> 00:07:20.750
the first call back and then we see

00:07:20.750 --> 00:07:23.405
value in second Dan is undefined.

00:07:23.405 --> 00:07:24.890
The thing is that when you

00:07:24.890 --> 00:07:27.335
chain multiples then arguments,

00:07:27.335 --> 00:07:30.020
the first argument in the subsequent Dan

00:07:30.020 --> 00:07:33.170
will be the returning value from the previous then,

00:07:33.170 --> 00:07:34.745
because from this first,

00:07:34.745 --> 00:07:36.800
then callback will ensure nothing.

00:07:36.800 --> 00:07:40.519
Second dot then first argument is going to be undefined.

00:07:40.519 --> 00:07:43.040
If I'm going to return five here,

00:07:43.040 --> 00:07:45.770
value here now will be five.

00:07:45.770 --> 00:07:47.000
Let's try.

00:07:47.000 --> 00:07:50.495
And you will see value in seconds then is five grade.

00:07:50.495 --> 00:07:53.975
So if I'm going to use another third Duck Dan,

00:07:53.975 --> 00:07:57.460
and this time let's say val three In

00:07:57.460 --> 00:08:02.695
third then is going to be three, right?

00:08:02.695 --> 00:08:04.750
It is going to be undefined, right?

00:08:04.750 --> 00:08:07.090
Because literature nothing from the previous.

00:08:07.090 --> 00:08:09.865
Then if I'm going to return 10,

00:08:09.865 --> 00:08:12.745
val three is going to be 10.

00:08:12.745 --> 00:08:14.335
I hope it's clear.

00:08:14.335 --> 00:08:15.580
And you might have a question,

00:08:15.580 --> 00:08:18.475
why do we need to chain multiple dance over here?

00:08:18.475 --> 00:08:20.500
The thing is that in the real world we're going to

00:08:20.500 --> 00:08:23.200
work with multiple promises at the same time.

00:08:23.200 --> 00:08:25.165
And inside one promise,

00:08:25.165 --> 00:08:26.950
we're going to call another promise

00:08:26.950 --> 00:08:29.410
something like do some dot then,

00:08:29.410 --> 00:08:32.785
then inside we will have something like return

00:08:32.785 --> 00:08:37.225
another promise and again then, and so on.

00:08:37.225 --> 00:08:39.470
That is why it is easier to

00:08:39.470 --> 00:08:42.245
pass the result of some logic to

00:08:42.245 --> 00:08:44.540
another then in order to simplify

00:08:44.540 --> 00:08:47.615
the code so it will make it more readable.

00:08:47.615 --> 00:08:49.760
I know it might be confusing because there is

00:08:49.760 --> 00:08:52.055
no like real example right now over here.

00:08:52.055 --> 00:08:54.200
But trust me, it's totally fine.

00:08:54.200 --> 00:08:55.745
You will see that in the future.

00:08:55.745 --> 00:08:57.905
Let's actually try and create

00:08:57.905 --> 00:09:01.295
a more real-world example using promises.

00:09:01.295 --> 00:09:03.335
So I'm just going to remove all of that.

00:09:03.335 --> 00:09:06.680
And instead, let's create a completely new promise that

00:09:06.680 --> 00:09:10.730
we'll wrap the setTimeout function that we already know.

00:09:10.730 --> 00:09:13.220
We would like convert setTimeout to,

00:09:13.220 --> 00:09:15.515
let's say promise based syntax.

00:09:15.515 --> 00:09:17.705
For example, I want to create a function,

00:09:17.705 --> 00:09:19.880
let's call it weight, sum.

00:09:19.880 --> 00:09:22.055
That function I would pass,

00:09:22.055 --> 00:09:24.065
let's say number of milliseconds,

00:09:24.065 --> 00:09:27.230
let's say 40000 for 40 seconds.

00:09:27.230 --> 00:09:28.400
And this is going to be

00:09:28.400 --> 00:09:30.470
a function that will return a promise.

00:09:30.470 --> 00:09:32.825
And after that function,

00:09:32.825 --> 00:09:36.380
once it resolves, once the promise resolves,

00:09:36.380 --> 00:09:38.270
this callback will be run.

00:09:38.270 --> 00:09:43.115
For example, console log, four seconds passed.

00:09:43.115 --> 00:09:46.505
It is some sort of a replacement for setTimeout,

00:09:46.505 --> 00:09:48.995
but using promised be syntax.

00:09:48.995 --> 00:09:51.350
So how we are able to implement that.

00:09:51.350 --> 00:09:52.970
So this is our mockup.

00:09:52.970 --> 00:09:54.935
Let's just actually commented out,

00:09:54.935 --> 00:09:57.590
and now let's start writing the promise.

00:09:57.590 --> 00:10:01.355
So weight sum is a function that receives one argument,

00:10:01.355 --> 00:10:03.560
which is number of milliseconds.

00:10:03.560 --> 00:10:06.260
So I'm just going to create weight sum.

00:10:06.260 --> 00:10:08.090
As an arrow function.

00:10:08.090 --> 00:10:12.470
That function receives one argument timeout

00:10:12.470 --> 00:10:15.800
in a mess like that.

00:10:15.800 --> 00:10:18.425
And that function returns a promise,

00:10:18.425 --> 00:10:22.745
that churn new promise to the promise constructor,

00:10:22.745 --> 00:10:25.025
I pass the callback.

00:10:25.025 --> 00:10:27.230
And that callback receives

00:10:27.230 --> 00:10:29.915
two arguments, result and reject.

00:10:29.915 --> 00:10:32.075
But since we don't meet reject here,

00:10:32.075 --> 00:10:34.610
I'm just going to use the resolve argument.

00:10:34.610 --> 00:10:37.400
So now we have to somehow

00:10:37.400 --> 00:10:40.730
delayed code execution will inside that promise,

00:10:40.730 --> 00:10:42.335
we can use setTimeout.

00:10:42.335 --> 00:10:45.245
So I'm just going to call setTimeout.

00:10:45.245 --> 00:10:48.860
First argument again is the callback that will fire after

00:10:48.860 --> 00:10:53.390
supplied number of milliseconds as a second argument.

00:10:53.390 --> 00:10:54.920
And for the second argument,

00:10:54.920 --> 00:10:57.095
I'm just going to pass the argument

00:10:57.095 --> 00:10:59.720
for weight some function itself,

00:10:59.720 --> 00:11:01.445
timeout in the mass.

00:11:01.445 --> 00:11:04.085
And once these cold backfires,

00:11:04.085 --> 00:11:06.500
I'm just going to call resolve to

00:11:06.500 --> 00:11:09.815
resolve from that promise. And that's it.

00:11:09.815 --> 00:11:11.915
This is our implementation.

00:11:11.915 --> 00:11:15.335
Let's comment out our usage of that promise,

00:11:15.335 --> 00:11:18.950
and let's just see how it works.

00:11:18.950 --> 00:11:25.460
Note file GS. I can see four seconds have passed,

00:11:25.460 --> 00:11:28.070
and I see my output four seconds past.

00:11:28.070 --> 00:11:29.840
Just to demonstrate to you how

00:11:29.840 --> 00:11:31.790
this is going to be non-blocking,

00:11:31.790 --> 00:11:33.080
we can actually use

00:11:33.080 --> 00:11:35.720
the same example from our previous videos,

00:11:35.720 --> 00:11:38.780
console log console log 2.

00:11:38.780 --> 00:11:43.310
It does not matter where I put some promise dot Dan,

00:11:43.310 --> 00:11:45.500
it will always be resolved

00:11:45.500 --> 00:11:48.395
using the dot syntax in a non-blocking way.

00:11:48.395 --> 00:11:50.465
It means that it will always appear

00:11:50.465 --> 00:11:52.760
after all synchronous code.

00:11:52.760 --> 00:11:54.455
To verify that, again,

00:11:54.455 --> 00:11:58.849
maybe let's make it a little bit shorter.

00:11:58.849 --> 00:12:00.395
A 100 grade.

00:12:00.395 --> 00:12:04.070
You see 12 and only then four seconds passed.

00:12:04.070 --> 00:12:05.540
And it doesn't matter if I put

00:12:05.540 --> 00:12:08.060
setTimeout or not over here.

00:12:08.060 --> 00:12:09.290
For example, I'm just going to

00:12:09.290 --> 00:12:11.360
resolve it without any logic.

00:12:11.360 --> 00:12:14.344
It will always be at the end because

00:12:14.344 --> 00:12:18.740
a promise is always resolve in a non-blocking way.

00:12:18.740 --> 00:12:19.955
I hope it's clear.

00:12:19.955 --> 00:12:23.734
Now, let's take a look at another real-world example

00:12:23.734 --> 00:12:25.820
using the Fetch API

00:12:25.820 --> 00:12:28.325
that we have available inside the browser.

00:12:28.325 --> 00:12:33.350
If when Google, I'm just going to type JSON placeholder,

00:12:33.350 --> 00:12:37.985
I end up on JSON placeholder dot type code.com.

00:12:37.985 --> 00:12:39.860
When I scroll down a little bit,

00:12:39.860 --> 00:12:43.475
you can find this section with an example.

00:12:43.475 --> 00:12:44.930
So I'm just going to copy

00:12:44.930 --> 00:12:51.890
that and paste it inside my NodeJS script.

00:12:51.890 --> 00:12:54.440
If I will try and execute the file,

00:12:54.440 --> 00:12:57.380
you will see Fetch is not defined because again,

00:12:57.380 --> 00:13:00.875
Fetch is available only inside the browser environment.

00:13:00.875 --> 00:13:03.844
It is part of browsers web APIs.

00:13:03.844 --> 00:13:07.414
It is not implemented natively in Node.JS.

00:13:07.414 --> 00:13:08.975
That's why this piece of code will

00:13:08.975 --> 00:13:10.985
only work inside the browser.

00:13:10.985 --> 00:13:12.710
So I copied again,

00:13:12.710 --> 00:13:16.805
I go to browser console, right?

00:13:16.805 --> 00:13:18.950
And here I execute the code.

00:13:18.950 --> 00:13:20.765
So let's break it down.

00:13:20.765 --> 00:13:21.920
What's happening here?

00:13:21.920 --> 00:13:24.260
So first of all, what fetched does,

00:13:24.260 --> 00:13:27.470
we supply a URL to that function,

00:13:27.470 --> 00:13:29.930
and that function sends a request to

00:13:29.930 --> 00:13:33.095
that URL and gives us the response back.

00:13:33.095 --> 00:13:36.470
This dot fetch is a function that returns a promise.

00:13:36.470 --> 00:13:39.080
That's why we have to use the dot Dense syntax

00:13:39.080 --> 00:13:41.765
in order to resolve that promise.

00:13:41.765 --> 00:13:43.880
So fetch sends a request to

00:13:43.880 --> 00:13:46.984
the URL in a non-blocking way in the background.

00:13:46.984 --> 00:13:49.175
And once the response for

00:13:49.175 --> 00:13:53.255
that request is ready and browser is ready to handle it,

00:13:53.255 --> 00:13:55.580
this promise resolves, that call

00:13:55.580 --> 00:13:59.795
backfires and we get access to the response object.

00:13:59.795 --> 00:14:01.010
And as you can see, this is

00:14:01.010 --> 00:14:04.160
our payload sense to us back from the server.

00:14:04.160 --> 00:14:07.640
And this is the promise which was pending Once

00:14:07.640 --> 00:14:11.210
it was cold and once it was resolved with first dot,

00:14:11.210 --> 00:14:14.375
then you see promised state is now fulfilled.

00:14:14.375 --> 00:14:15.770
As I mentioned earlier,

00:14:15.770 --> 00:14:18.815
that request will be processed in a non-blocking way.

00:14:18.815 --> 00:14:23.405
It means that if that request will take up to 10 seconds,

00:14:23.405 --> 00:14:26.300
then that callback inside the first dot,

00:14:26.300 --> 00:14:30.215
Dan will fire after 10 seconds in a non-blocking way.

00:14:30.215 --> 00:14:32.750
But what is this response over here?

00:14:32.750 --> 00:14:36.350
Let's try and rewrite that example a little bit.

00:14:36.350 --> 00:14:39.680
And instead of calling response JSON,

00:14:39.680 --> 00:14:44.435
we're just going to console.log

00:14:44.435 --> 00:14:47.420
response object that we have here.

00:14:47.420 --> 00:14:48.665
And as you can see,

00:14:48.665 --> 00:14:50.150
the response object has

00:14:50.150 --> 00:14:52.670
something buddy, buddy used headers.

00:14:52.670 --> 00:14:54.455
Well, that response object

00:14:54.455 --> 00:14:56.855
represents the response from the server.

00:14:56.855 --> 00:15:01.730
And on that object we have the dot JSON method that

00:15:01.730 --> 00:15:04.160
we must call on that object in order

00:15:04.160 --> 00:15:06.830
to get the payload in JSON format.

00:15:06.830 --> 00:15:08.990
So if we're just going to access

00:15:08.990 --> 00:15:12.440
that URL in a separate tab, right?

00:15:12.440 --> 00:15:14.480
This is all happening like manually.

00:15:14.480 --> 00:15:17.675
We do it manually using the browser search box,

00:15:17.675 --> 00:15:19.745
but to do it programmatically,

00:15:19.745 --> 00:15:22.280
we would use fetch and then we would call

00:15:22.280 --> 00:15:26.015
the dot JSON method available on the response object.

00:15:26.015 --> 00:15:29.660
This but JSON method also the Cerence us a promise.

00:15:29.660 --> 00:15:33.980
But since it is a single action within that call back,

00:15:33.980 --> 00:15:36.499
the value from that promise

00:15:36.499 --> 00:15:38.450
will be resolved automatically,

00:15:38.450 --> 00:15:41.840
and it will be the return value from that call back.

00:15:41.840 --> 00:15:44.600
What is happening here is that inside first dot

00:15:44.600 --> 00:15:47.645
then response.data isn't method is called,

00:15:47.645 --> 00:15:50.645
that promise is resolved and it is returned.

00:15:50.645 --> 00:15:53.165
From the first dot then callback

00:15:53.165 --> 00:15:55.970
because this is the shorthand for arrow functions,

00:15:55.970 --> 00:15:58.175
we already know that the returning value

00:15:58.175 --> 00:16:00.800
of the Dodge JSON method will be available as

00:16:00.800 --> 00:16:03.530
a first argument in the subsequent then

00:16:03.530 --> 00:16:06.620
that's why here we have argument called JSON.

00:16:06.620 --> 00:16:08.165
You can name it whatever you want,

00:16:08.165 --> 00:16:09.995
and then we just console it block.

00:16:09.995 --> 00:16:13.010
That's why if we're going to run that example,

00:16:13.010 --> 00:16:15.155
we will see our payload.

00:16:15.155 --> 00:16:18.290
But this time we did it programmatically instead of

00:16:18.290 --> 00:16:21.770
going to the browser and just accessing the Euro.

00:16:21.770 --> 00:16:24.500
Now this all happens programmatically using

00:16:24.500 --> 00:16:27.740
the Fetch API available in the browser.

00:16:27.740 --> 00:16:28.565
Great.

00:16:28.565 --> 00:16:30.575
I would say this is all about promises,

00:16:30.575 --> 00:16:32.195
but there is one more thing.

00:16:32.195 --> 00:16:36.350
We also have something called async await.

00:16:36.350 --> 00:16:37.700
And async await is

00:16:37.700 --> 00:16:42.050
just an alternative syntax to the dot then syntax,

00:16:42.050 --> 00:16:43.100
since we are going to work with

00:16:43.100 --> 00:16:45.245
multiple promises at the same time,

00:16:45.245 --> 00:16:49.625
dot dot syntax becomes really messy at some point.

00:16:49.625 --> 00:16:53.855
That's why an alternative to that syntax is async await.

00:16:53.855 --> 00:16:55.505
Let's see how it looks like,

00:16:55.505 --> 00:16:57.725
and let's actually try and rewrite

00:16:57.725 --> 00:17:00.185
this example with fetch using async await.

00:17:00.185 --> 00:17:02.435
So first of all, async await syntax

00:17:02.435 --> 00:17:04.850
is available only inside a function.

00:17:04.850 --> 00:17:06.785
It means that in order to use it,

00:17:06.785 --> 00:17:09.125
we have to create a function.

00:17:09.125 --> 00:17:11.420
So I'm just going to create a new function.

00:17:11.420 --> 00:17:14.285
Let's call it send request.

00:17:14.285 --> 00:17:17.315
And to make async await

00:17:17.315 --> 00:17:19.985
syntax available inside that function,

00:17:19.985 --> 00:17:22.850
we have to mark that function as a sink.

00:17:22.850 --> 00:17:25.475
So async function send request,

00:17:25.475 --> 00:17:27.604
if it was an arrow function,

00:17:27.604 --> 00:17:30.920
Const, let's say send request.

00:17:30.920 --> 00:17:33.560
It would be like that.

00:17:33.560 --> 00:17:36.620
Right before the arrow function,

00:17:36.620 --> 00:17:38.480
we would put the async keyword,

00:17:38.480 --> 00:17:40.070
but let's keep the

00:17:40.070 --> 00:17:42.755
regular function syntax so we know that.

00:17:42.755 --> 00:17:45.185
To resolve that promise, right,

00:17:45.185 --> 00:17:47.855
we have to call the dot Dan and supply

00:17:47.855 --> 00:17:50.915
a callback inside the async await syntax.

00:17:50.915 --> 00:17:52.130
We don't use dot,

00:17:52.130 --> 00:17:55.325
then we use the keyword await.

00:17:55.325 --> 00:17:56.645
Await.

00:17:56.645 --> 00:17:58.910
That's why the syntax name is

00:17:58.910 --> 00:18:00.980
called async await because well,

00:18:00.980 --> 00:18:02.600
it is just two keywords,

00:18:02.600 --> 00:18:05.285
async to mark function to be used with async,

00:18:05.285 --> 00:18:08.285
await syntax and a weight to resolve the promise.

00:18:08.285 --> 00:18:10.100
I'm just going to call fetch.

00:18:10.100 --> 00:18:11.945
Let me copy it.

00:18:11.945 --> 00:18:16.280
Fetch. And to wait for that promise to be resolved,

00:18:16.280 --> 00:18:20.540
I have to just put a weight in front and this

00:18:20.540 --> 00:18:22.700
will replace the dot then

00:18:22.700 --> 00:18:25.430
with it's called Back in front of a wait,

00:18:25.430 --> 00:18:27.725
I have to sign the result value

00:18:27.725 --> 00:18:29.405
from that promise to about Apple,

00:18:29.405 --> 00:18:31.040
for example, this is going to be

00:18:31.040 --> 00:18:34.294
response equals await, fetch.

00:18:34.294 --> 00:18:40.070
And the same we will do with the JSON method.

00:18:40.070 --> 00:18:42.935
So now we have access to the response object.

00:18:42.935 --> 00:18:45.575
And then we're going to create the new variable JSON.

00:18:45.575 --> 00:18:50.825
And it is going to be await response dot JSON,

00:18:50.825 --> 00:18:54.380
which is available on the response object.

00:18:54.380 --> 00:18:56.960
If you're not going to use the await keyword,

00:18:56.960 --> 00:19:00.155
the JSON variable will be the promise object,

00:19:00.155 --> 00:19:02.945
just like you saw at the beginning of the video.

00:19:02.945 --> 00:19:04.340
This is not what we want.

00:19:04.340 --> 00:19:07.640
We only want the result value from

00:19:07.640 --> 00:19:09.560
that promise if I'm going to remove

00:19:09.560 --> 00:19:12.080
the await keyword, right?

00:19:12.080 --> 00:19:14.045
And if I hover on the variable,

00:19:14.045 --> 00:19:17.210
I will see promise because this is the promise object.

00:19:17.210 --> 00:19:18.980
But if I keep await,

00:19:18.980 --> 00:19:20.255
I will have any,

00:19:20.255 --> 00:19:23.270
which means that this variable will hold any value,

00:19:23.270 --> 00:19:26.180
but it's definitely not a promise object.

00:19:26.180 --> 00:19:29.780
Now, we're going to try and console log JSON.

00:19:29.780 --> 00:19:32.300
And this piece of code will just

00:19:32.300 --> 00:19:35.015
completely replace these three lines.

00:19:35.015 --> 00:19:37.250
Yes, it a little bit more of lines,

00:19:37.250 --> 00:19:40.490
but this syntax is more easier to read.

00:19:40.490 --> 00:19:44.225
The async await syntax is built on top of promises,

00:19:44.225 --> 00:19:47.600
and its intention is to make promises to

00:19:47.600 --> 00:19:51.290
look more like regular synchronous code.

00:19:51.290 --> 00:19:52.790
Because you can see we can read

00:19:52.790 --> 00:19:54.950
this piece of code line by line,

00:19:54.950 --> 00:19:58.130
unlike with dot then one node to

00:19:58.130 --> 00:20:01.865
point here is that second line of code, right?

00:20:01.865 --> 00:20:05.870
Line number seven will not be executed before

00:20:05.870 --> 00:20:10.400
line number 6 results since we use the await keyword,

00:20:10.400 --> 00:20:12.770
it means that if this line of code, it,

00:20:12.770 --> 00:20:16.535
that promise takes 10 seconds to be executed,

00:20:16.535 --> 00:20:18.904
the code will not go further.

00:20:18.904 --> 00:20:23.255
It will wait all ten seconds until the promise resolves,

00:20:23.255 --> 00:20:25.115
because we use the await keyword,

00:20:25.115 --> 00:20:26.990
it awaits for the promise.

00:20:26.990 --> 00:20:28.970
The promise resolves and only

00:20:28.970 --> 00:20:31.460
then the execution continues.

00:20:31.460 --> 00:20:34.910
I hope it's clear to verify that let's call

00:20:34.910 --> 00:20:36.920
the function and let's execute

00:20:36.920 --> 00:20:39.545
this piece of code inside the browser.

00:20:39.545 --> 00:20:43.070
And you will see we will have exactly the same result.

00:20:43.070 --> 00:20:45.140
We're going to see our payload

00:20:45.140 --> 00:20:47.180
that we receive from the server.

00:20:47.180 --> 00:20:50.690
Alright, I guess that's all for this video.

00:20:50.690 --> 00:20:53.015
And I know that it was really hard

00:20:53.015 --> 00:20:55.535
to understand that amount of information.

00:20:55.535 --> 00:20:58.235
It was very confusing, but trust me,

00:20:58.235 --> 00:21:01.655
it does not that complicated as it might seem.

00:21:01.655 --> 00:21:03.110
We're going to attach the topic

00:21:03.110 --> 00:21:06.005
one more time in our React projects.

00:21:06.005 --> 00:21:08.780
And this is where I'm gonna see you next time.

00:21:08.780 --> 00:21:10.470
Bye-bye.
