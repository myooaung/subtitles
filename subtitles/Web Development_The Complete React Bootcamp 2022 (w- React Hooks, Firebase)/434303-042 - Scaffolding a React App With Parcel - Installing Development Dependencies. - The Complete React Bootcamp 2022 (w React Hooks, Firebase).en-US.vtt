WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.920
welcome to the starting point.

00:00:01.920 --> 00:00:07.200
Nowadays we are lucky because we don't need to reinvent the wheel.

00:00:07.200 --> 00:00:10.210
We don't need to implement everything on our own.

00:00:10.210 --> 00:00:15.750
That's why we always benefit from using some sort of a template when it comes to a new

00:00:15.750 --> 00:00:16.430
project.

00:00:16.430 --> 00:00:18.560
So for our application,

00:00:18.560 --> 00:00:22.050
we will use a template that you can see on this create.

00:00:22.050 --> 00:00:28.620
It is called Nana react up And I already opened the official get happy webpage.

00:00:28.620 --> 00:00:30.980
And from this documentation,

00:00:30.980 --> 00:00:32.680
I can see that I can execute.

00:00:32.680 --> 00:00:34.960
It was just one single command.

00:00:34.960 --> 00:00:42.250
So I'm gonna copy this command and I'm gonna open the folder where I want to put my project

00:00:42.250 --> 00:00:42.250
.

00:00:42.250 --> 00:00:44.060
And here I will run,

00:00:44.060 --> 00:00:50.540
need mash my terminal and I will paste this command and what I will do.

00:00:50.540 --> 00:00:56.620
I will remove my app and poor tick tack toe to run the script and what it will do,

00:00:56.620 --> 00:01:02.170
it will create a new folder and inside this cooler it will put all template files that we

00:01:02.170 --> 00:01:02.870
can use.

00:01:02.870 --> 00:01:03.820
By the way,

00:01:03.820 --> 00:01:06.850
we didn't use this and p x tool before,

00:01:06.850 --> 00:01:14.710
but this is a tool that comes from NPM and it basically allows us to execute NPM packages

00:01:14.710 --> 00:01:16.890
without direct installation.

00:01:16.890 --> 00:01:22.750
This is what we just did now was close and the terminal and opened this folder in V s code

00:01:22.750 --> 00:01:22.750
.

00:01:22.750 --> 00:01:24.230
So,

00:01:24.230 --> 00:01:29.110
like that and then what we have inside,

00:01:29.110 --> 00:01:32.410
we have a pile of files that we will overview one by one.

00:01:32.410 --> 00:01:33.950
But before we do this,

00:01:33.950 --> 00:01:39.220
let's install all dependencies that are already listed inside package to Jason.

00:01:39.220 --> 00:01:41.160
So in the integrated terminal,

00:01:41.160 --> 00:01:45.700
little run and PM in stuff and while it is in the stalling,

00:01:45.700 --> 00:01:47.350
let's go one by one.

00:01:47.350 --> 00:01:52.340
So first we have read me dot MD and this is just a documentation file.

00:01:52.340 --> 00:01:54.810
Nothing too special over here.

00:01:54.810 --> 00:02:01.300
Then we have package the Jason and here we are interested in the script section.

00:02:01.300 --> 00:02:06.870
So the start script will run a local development server for us that we will use during

00:02:06.870 --> 00:02:07.550
development.

00:02:07.550 --> 00:02:09.950
And this is our main script.

00:02:09.950 --> 00:02:16.320
Then we have the bill script that will bundle everything and put it into the production

00:02:16.320 --> 00:02:19.910
folder that we can deploy to a hosting server.

00:02:19.910 --> 00:02:21.720
Then we have dependency.

00:02:21.720 --> 00:02:27.940
Under dependence is we have reacts core package which is just react and then reacting dung

00:02:27.940 --> 00:02:27.940
,

00:02:27.940 --> 00:02:34.400
which is supplementary package only for react on the Bab under Devin Dependencies,

00:02:34.400 --> 00:02:35.590
We have Babel,

00:02:35.590 --> 00:02:42.530
and this Babel percent is a percent for does Babel Chul that will transpire.

00:02:42.530 --> 00:02:48.850
I'll or transform our latest JavaScript to the old JavaScript for good browser support.

00:02:48.850 --> 00:02:55.760
Then we have parcel and parcel is essentially a project bundler and what it will do,

00:02:55.760 --> 00:02:58.100
it will do all the magic in the background.

00:02:58.100 --> 00:03:01.130
It will give us the local development server.

00:03:01.130 --> 00:03:03.230
It will allow us to bundle.

00:03:03.230 --> 00:03:05.650
Everything was just one single command.

00:03:05.650 --> 00:03:11.590
And also all dependencies and different precepts are already managed by this parcel.

00:03:11.590 --> 00:03:12.000
Chill.

00:03:12.000 --> 00:03:14.560
And have you ever heard off map back?

00:03:14.560 --> 00:03:16.110
This is an alternative.

00:03:16.110 --> 00:03:17.120
It is related,

00:03:17.120 --> 00:03:17.280
Lee,

00:03:17.280 --> 00:03:20.090
new and still in the active development.

00:03:20.090 --> 00:03:20.750
Okay,

00:03:20.750 --> 00:03:23.100
Now we have package lock to look.

00:03:23.100 --> 00:03:31.280
Dependencies that get ignore that allows us to ignore files that will not be recognized by

00:03:31.280 --> 00:03:32.210
the get system.

00:03:32.210 --> 00:03:37.610
These are node moguls and the production built and also some cash files.

00:03:37.610 --> 00:03:40.530
Then we have index html an indexation.

00:03:40.530 --> 00:03:45.080
Milk is our skeleton or foundation for the react app.

00:03:45.080 --> 00:03:46.810
It is pretty simple right now,

00:03:46.810 --> 00:03:51.220
and we will extend it so but to significant lions.

00:03:51.220 --> 00:03:53.640
Here are this Deve and script.

00:03:53.640 --> 00:03:58.600
So script points to the Index gs file under source,

00:03:58.600 --> 00:04:06.280
which is our entry point for our react up or JavaScript And then we have this deep with the

00:04:06.280 --> 00:04:07.530
i d set to rule.

00:04:07.530 --> 00:04:12.850
This is our container or the mounting point for react application.

00:04:12.850 --> 00:04:14.150
Inside this div,

00:04:14.150 --> 00:04:18.760
we will mount or render our main route component,

00:04:18.760 --> 00:04:20.000
which is app.

00:04:20.000 --> 00:04:21.460
I guess that's clear.

00:04:21.460 --> 00:04:29.540
Let's take a look at index dot gs index cogs is our entry point and here we basically

00:04:29.540 --> 00:04:33.450
render the react up onto the web page.

00:04:33.450 --> 00:04:35.030
So as you can see,

00:04:35.030 --> 00:04:35.810
we import,

00:04:35.810 --> 00:04:38.350
react and react dome over here.

00:04:38.350 --> 00:04:41.150
So whenever we use react inside a file,

00:04:41.150 --> 00:04:43.290
we import the core package.

00:04:43.290 --> 00:04:45.680
But we also hear import react,

00:04:45.680 --> 00:04:46.040
um,

00:04:46.040 --> 00:04:51.950
to call this dot render method to render the app component on the vapid page.

00:04:51.950 --> 00:04:57.220
So it expects you Arguments that were first argument is the component that we want to run

00:04:57.220 --> 00:04:57.490
there.

00:04:57.490 --> 00:05:02.880
And the second argument is the element a container for the app.

00:05:02.880 --> 00:05:10.680
And as you can see it is this div with I d set to route that we have inside index html so

00:05:10.680 --> 00:05:11.830
they must match.

00:05:11.830 --> 00:05:16.860
If this has different i d and this has road,

00:05:16.860 --> 00:05:19.520
then the app will not be run.

00:05:19.520 --> 00:05:20.710
Dread on the weapon.

00:05:20.710 --> 00:05:23.210
Let's take a look at Abdel Gs,

00:05:23.210 --> 00:05:24.870
our main component,

00:05:24.870 --> 00:05:28.280
and maybe let's rewrite it a little bit,

00:05:28.280 --> 00:05:30.750
so it is more explicit.

00:05:30.750 --> 00:05:32.810
Instead of this in tax,

00:05:32.810 --> 00:05:38.360
I will do return this and export default app.

00:05:38.360 --> 00:05:39.830
What's that?

00:05:39.830 --> 00:05:41.230
So as you can see,

00:05:41.230 --> 00:05:45.370
this is just a simple function and this is a component,

00:05:45.370 --> 00:05:51.150
So a component is just a simple function that returns this strange syntax.

00:05:51.150 --> 00:05:53.010
What is this French syntax?

00:05:53.010 --> 00:05:56.190
It looks like HTML however it is not.

00:05:56.190 --> 00:05:58.110
It is called J six,

00:05:58.110 --> 00:06:00.600
and it is reacts syntax.

00:06:00.600 --> 00:06:03.640
It is backward compatible with HTML.

00:06:03.640 --> 00:06:07.820
But there are a few differences that we will see during development.

00:06:07.820 --> 00:06:11.450
And also remember the first rule off react.

00:06:11.450 --> 00:06:15.250
A component must always return a single element,

00:06:15.250 --> 00:06:18.450
as you can see here with this amity brackets.

00:06:18.450 --> 00:06:22.430
If I remove this empty brackets over here and it's safe,

00:06:22.430 --> 00:06:28.010
I will get another because a component must always return one single element.

00:06:28.010 --> 00:06:30.340
So if we have a markup like that,

00:06:30.340 --> 00:06:33.150
we can either wrap it in the deep attack.

00:06:33.150 --> 00:06:40.190
So it is a single element at the end of the day or when we don't need or don't want to use

00:06:40.190 --> 00:06:42.190
the rapper element like Dave,

00:06:42.190 --> 00:06:44.070
we can use react fragment,

00:06:44.070 --> 00:06:46.920
which is these empty brackets.

00:06:46.920 --> 00:06:54.150
We can explicitly say that this is react dot fragment over here and it will work.

00:06:54.150 --> 00:06:55.620
But then Dulic tous in Texas,

00:06:55.620 --> 00:07:00.890
we can meet that to make our code much cleaner and just put empty brackets.

00:07:00.890 --> 00:07:04.400
So this is basically a blank or empty element.

00:07:04.400 --> 00:07:09.800
I guess that that's clear and maybe less run the app since we already have all our

00:07:09.800 --> 00:07:11.630
dependencies and stopped.

00:07:11.630 --> 00:07:18.230
So I'm gonna do the start command defined in package Jason and PM Run,

00:07:18.230 --> 00:07:22.740
start and let's take a look at what we have on the output.

00:07:22.740 --> 00:07:25.130
So server running at local host.

00:07:25.130 --> 00:07:32.730
1234 Let's open browser and go to local host 1234 And here we have the market.

00:07:32.730 --> 00:07:34.170
Our reactor.

00:07:34.170 --> 00:07:34.760
Okay,

00:07:34.760 --> 00:07:35.300
cool.

00:07:35.300 --> 00:07:40.290
And this markup much is our mark up inside Abdel gs.

00:07:40.290 --> 00:07:43.150
And if I change something over here,

00:07:43.150 --> 00:07:47.210
it will be automatically changed for us inside the browser.

00:07:47.210 --> 00:07:49.140
Because of the local Web server,

00:07:49.140 --> 00:07:55.560
it is already configured to pick up all changes and automatically reload the webpage so we

00:07:55.560 --> 00:07:58.350
don't need to manually go every time and reload.

00:07:58.350 --> 00:07:59.590
Pretty cool,

00:07:59.590 --> 00:08:01.070
then also,

00:08:01.070 --> 00:08:02.440
what can we do?

00:08:02.440 --> 00:08:07.300
We can write any valid GS over here like low.

00:08:07.300 --> 00:08:08.250
This is me.

00:08:08.250 --> 00:08:09.960
And when I save it,

00:08:09.960 --> 00:08:12.030
it will be reflected over here.

00:08:12.030 --> 00:08:14.660
So this is it inside this AB GS.

00:08:14.660 --> 00:08:17.020
And when we will create more components,

00:08:17.020 --> 00:08:22.910
we will put all business logic here inside this functions something like that.

00:08:22.910 --> 00:08:23.900
Maybe.

00:08:23.900 --> 00:08:28.110
Let's also inspect our app in deaf tools.

00:08:28.110 --> 00:08:31.850
And if I open buddy and if I look inside crude,

00:08:31.850 --> 00:08:36.150
you can see I have my app being inserted over here.

00:08:36.150 --> 00:08:37.470
And as you can see,

00:08:37.470 --> 00:08:38.720
as I said before,

00:08:38.720 --> 00:08:45.580
we don't have a rapper element for H one n p Tax because we used react fragment.

00:08:45.580 --> 00:08:49.450
Now let's try and build the app to the production version.

00:08:49.450 --> 00:08:51.100
So what I will do?

00:08:51.100 --> 00:08:59.460
I will stop the script and I will run NPM built on Let's take a look on the outpour so we

00:08:59.460 --> 00:09:00.940
have a few warnings over here,

00:09:00.940 --> 00:09:01.850
but that's fine.

00:09:01.850 --> 00:09:04.070
Let's just avoid them.

00:09:04.070 --> 00:09:09.110
And at the end we have those dissed folder and built in nine seconds.

00:09:09.110 --> 00:09:15.460
So let's take a look under dissed and less take a look at files so index html.

00:09:15.460 --> 00:09:16.260
As you can see,

00:09:16.260 --> 00:09:19.550
it is magnified and ready for production.

00:09:19.550 --> 00:09:20.590
But also,

00:09:20.590 --> 00:09:22.850
if I look inside GS files,

00:09:22.850 --> 00:09:30.170
you can see that they are men ified and they are transpired or transformed to the latest

00:09:30.170 --> 00:09:32.450
and pretty strange syntax.

00:09:32.450 --> 00:09:33.380
But that's fine.

00:09:33.380 --> 00:09:36.340
It means that they are already ready for production.

00:09:36.340 --> 00:09:38.510
So if we had a server,

00:09:38.510 --> 00:09:41.120
we would deploy this dissed folder there,

00:09:41.120 --> 00:09:44.150
and it will work something like that.

00:09:44.150 --> 00:09:47.530
And I guess that's all for our first video.

00:09:47.530 --> 00:09:48.630
In the next tweet here,

00:09:48.630 --> 00:09:53.980
we will install more deaf dependencies such as preacher and if Flynn and also bubble

00:09:53.980 --> 00:09:54.470
connect,

00:09:54.470 --> 00:09:56.290
get and get up,

00:09:56.290 --> 00:09:57.280
See you there.

