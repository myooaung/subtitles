WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.800
Hey, in this video we're going to

00:00:01.800 --> 00:00:03.675
talk about a redox reduce,

00:00:03.675 --> 00:00:05.790
just like a radar map array

00:00:05.790 --> 00:00:09.330
dot reduce iterates over elements of an array.

00:00:09.330 --> 00:00:12.825
However, it does fundamentally a different thing if

00:00:12.825 --> 00:00:14.580
array dot map is used to

00:00:14.580 --> 00:00:17.865
map each array element to some other value,

00:00:17.865 --> 00:00:21.555
array dot reduce is used to compress or

00:00:21.555 --> 00:00:25.920
reduce all array elements into a single value.

00:00:25.920 --> 00:00:27.705
Let's see it on an example.

00:00:27.705 --> 00:00:30.120
If we're going to go back to File GS,

00:00:30.120 --> 00:00:32.085
we're going to create a new array here,

00:00:32.085 --> 00:00:35.815
hello, which will be seven.

00:00:35.815 --> 00:00:40.205
6945, maybe.

00:00:40.205 --> 00:00:41.000
Great.

00:00:41.000 --> 00:00:43.700
Now we can use the dot reduce method in

00:00:43.700 --> 00:00:46.460
the same way as we use the map method,

00:00:46.460 --> 00:00:49.700
which means we can type hello dot reduce.

00:00:49.700 --> 00:00:51.500
And just like with dot map,

00:00:51.500 --> 00:00:53.915
we have to supply a callback function.

00:00:53.915 --> 00:00:55.235
But this time,

00:00:55.235 --> 00:00:58.625
the callback function will receive different arguments.

00:00:58.625 --> 00:01:00.530
So we have previous value,

00:01:00.530 --> 00:01:03.125
current value, current index and array.

00:01:03.125 --> 00:01:05.645
So let's try and see what they are.

00:01:05.645 --> 00:01:08.480
So we supply the callback

00:01:08.480 --> 00:01:11.840
and we open parenthesis again for the IntelliSense.

00:01:11.840 --> 00:01:14.240
And we have first previous value,

00:01:14.240 --> 00:01:16.550
current value, current index and array.

00:01:16.550 --> 00:01:18.425
Just like with dot map,

00:01:18.425 --> 00:01:23.405
dot reduce will run that callback for each array element.

00:01:23.405 --> 00:01:25.325
It means that this callback will run

00:01:25.325 --> 00:01:28.325
five times for every element.

00:01:28.325 --> 00:01:31.550
That is why we know what are

00:01:31.550 --> 00:01:34.340
going to be current index and array.

00:01:34.340 --> 00:01:35.960
So just like in dark map,

00:01:35.960 --> 00:01:38.705
array is going to be the same array that

00:01:38.705 --> 00:01:41.945
we use for this.radius method.

00:01:41.945 --> 00:01:43.910
And current index is going to be

00:01:43.910 --> 00:01:46.895
the index of currently iterating element,

00:01:46.895 --> 00:01:51.020
which is going to be 01234.

00:01:51.020 --> 00:01:52.220
We don't need them.

00:01:52.220 --> 00:01:53.690
The only thing we need is

00:01:53.690 --> 00:01:56.990
previous value and current value.

00:01:56.990 --> 00:01:58.580
But most of the time,

00:01:58.580 --> 00:02:01.550
previous value is not cold previous value.

00:02:01.550 --> 00:02:03.290
It is called accumulator.

00:02:03.290 --> 00:02:04.429
What is accumulator?

00:02:04.429 --> 00:02:05.705
We're going to talk in a second.

00:02:05.705 --> 00:02:09.035
I just want to mention that the dots reduce method also

00:02:09.035 --> 00:02:12.680
expects a second argument next to the callback.

00:02:12.680 --> 00:02:14.345
The second argument is

00:02:14.345 --> 00:02:17.015
the initial value and it is optional.

00:02:17.015 --> 00:02:18.875
So let's put 0.

00:02:18.875 --> 00:02:19.955
Great.

00:02:19.955 --> 00:02:23.885
Now what is accumulator or what is that previous value?

00:02:23.885 --> 00:02:25.430
The thing is that dot reduce

00:02:25.430 --> 00:02:28.550
method works by compressing or

00:02:28.550 --> 00:02:31.940
actually accumulating each array element

00:02:31.940 --> 00:02:33.680
towards the final result.

00:02:33.680 --> 00:02:37.935
It means that we start with some initial value with 0.

00:02:37.935 --> 00:02:39.130
Okay?

00:02:39.130 --> 00:02:41.380
Then when all of

00:02:41.380 --> 00:02:45.025
these callbacks run for each array elements,

00:02:45.025 --> 00:02:49.090
it somehow modifies our initial value.

00:02:49.090 --> 00:02:50.215
Alright?

00:02:50.215 --> 00:02:51.490
And at the end,

00:02:51.490 --> 00:02:54.115
at the very last callback run,

00:02:54.115 --> 00:02:55.435
we have the result.

00:02:55.435 --> 00:02:57.070
It means that the dots reduce

00:02:57.070 --> 00:02:59.260
method also produces a value,

00:02:59.260 --> 00:03:01.210
but instead of a new array,

00:03:01.210 --> 00:03:03.430
it produces a single output.

00:03:03.430 --> 00:03:07.195
So maybe it's going to be 15, We don't know.

00:03:07.195 --> 00:03:10.090
So since it is produce a value,

00:03:10.090 --> 00:03:13.375
Let's place it, let's put it in a variable.

00:03:13.375 --> 00:03:17.200
So const result is going to be hello dot reduce,

00:03:17.200 --> 00:03:18.655
and at the end we're going to just

00:03:18.655 --> 00:03:22.690
console.log result. Great.

00:03:22.690 --> 00:03:26.030
Now if we're going to try and cancel

00:03:26.030 --> 00:03:29.020
log accumulator and next to it we're going to

00:03:29.020 --> 00:03:32.560
console log current value.

00:03:32.560 --> 00:03:36.175
And we're going to run this script.

00:03:36.175 --> 00:03:37.645
What we're going to see,

00:03:37.645 --> 00:03:40.210
the output is not pretty obvious.

00:03:40.210 --> 00:03:41.440
What do we have?

00:03:41.440 --> 00:03:44.425
We have first 0 and then

00:03:44.425 --> 00:03:47.499
Undefined, Undefined, Undefined amplifying.

00:03:47.499 --> 00:03:48.790
To not confuse ourselves,

00:03:48.790 --> 00:03:51.100
we actually have five console logs coming

00:03:51.100 --> 00:03:54.475
from the callbacks and the last one for the result.

00:03:54.475 --> 00:03:56.740
Let me put it like that.

00:03:56.740 --> 00:03:58.615
And we run it.

00:03:58.615 --> 00:04:00.040
Yeah, perfect.

00:04:00.040 --> 00:04:02.865
So why do we have a lot of undefined values?

00:04:02.865 --> 00:04:04.490
Well, on the first run,

00:04:04.490 --> 00:04:07.280
when this callback runs for the first element

00:04:07.280 --> 00:04:10.310
47 accumulator is going to

00:04:10.310 --> 00:04:13.595
be our initial value that we supplied over here.

00:04:13.595 --> 00:04:15.245
That's why we see

00:04:15.245 --> 00:04:17.450
0 current value is

00:04:17.450 --> 00:04:19.640
going to be current element, which is seven.

00:04:19.640 --> 00:04:22.250
That's why we see 07.

00:04:22.250 --> 00:04:26.960
Whatever we return from that callback will be

00:04:26.960 --> 00:04:32.210
sad as the accumulator value for the next call back run.

00:04:32.210 --> 00:04:35.555
Because we did not return anything from that function.

00:04:35.555 --> 00:04:37.895
By default, return value is undefined.

00:04:37.895 --> 00:04:40.445
That's why on the next run

00:04:40.445 --> 00:04:42.620
of that callback for the second element,

00:04:42.620 --> 00:04:46.505
which is six, accumulator undefined.

00:04:46.505 --> 00:04:49.775
If we're going to return one for

00:04:49.775 --> 00:04:54.335
every subsequent R1 accumulator will be always one,

00:04:54.335 --> 00:04:58.055
and the final value will be also one.

00:04:58.055 --> 00:05:00.230
If I execute the script,

00:05:00.230 --> 00:05:01.820
you can see it yourself.

00:05:01.820 --> 00:05:06.335
We always have accumulator set to one,

00:05:06.335 --> 00:05:08.045
but this is very dumped.

00:05:08.045 --> 00:05:11.045
We want to actually do something with that.

00:05:11.045 --> 00:05:14.225
How we can use dot reduced to do something real,

00:05:14.225 --> 00:05:17.255
we can actually use dots reduce method to

00:05:17.255 --> 00:05:21.365
find the sum of all our elements.

00:05:21.365 --> 00:05:27.065
We can actually type accumulator plus current value.

00:05:27.065 --> 00:05:30.155
And that's it. That will do the trick.

00:05:30.155 --> 00:05:34.250
Let's actually save it and let's see what gets printed.

00:05:34.250 --> 00:05:36.755
We see result is 31.

00:05:36.755 --> 00:05:38.720
But how we ended up with that,

00:05:38.720 --> 00:05:39.980
Let's break it down.

00:05:39.980 --> 00:05:41.555
For the first run.

00:05:41.555 --> 00:05:44.285
These callback has accumulator

00:05:44.285 --> 00:05:48.035
set to 0 because our initial value is 0,

00:05:48.035 --> 00:05:50.540
current value is going to be seven.

00:05:50.540 --> 00:05:54.395
So we have 0 plus 7.

00:05:54.395 --> 00:05:56.870
This is what we see over here.

00:05:56.870 --> 00:06:00.290
So from that callback will return seven.

00:06:00.290 --> 00:06:02.990
We're going to type first run is going

00:06:02.990 --> 00:06:05.900
to be a return seven.

00:06:05.900 --> 00:06:08.330
It means that on the second run of

00:06:08.330 --> 00:06:11.510
that callback for element six,

00:06:11.510 --> 00:06:13.640
accumulator is going to be

00:06:13.640 --> 00:06:16.415
this return value from the previous run.

00:06:16.415 --> 00:06:19.250
So we have accumulator

00:06:19.250 --> 00:06:22.700
equals 27 on the second run for the second element,

00:06:22.700 --> 00:06:26.255
and we have seven plus current value.

00:06:26.255 --> 00:06:28.669
So we have 7 plus 6,

00:06:28.669 --> 00:06:31.190
we have 13, which means

00:06:31.190 --> 00:06:35.730
from the second run, we return 13.

00:06:36.430 --> 00:06:41.300
On the third run of that callback for elements nine,

00:06:41.300 --> 00:06:45.290
accumulator is going to be 13 because this is what we are

00:06:45.290 --> 00:06:50.225
returned from the callback for the previous run.

00:06:50.225 --> 00:06:54.874
Four elements, 613, That's why now it is 13.

00:06:54.874 --> 00:06:58.025
So 13 plus current value

00:06:58.025 --> 00:07:01.955
is going to be 13 plus 9 is going to be 22.

00:07:01.955 --> 00:07:05.180
We returned 22.

00:07:05.180 --> 00:07:08.840
For the fourth element accumulator is

00:07:08.840 --> 00:07:14.165
2222 plus four is going to be 26.

00:07:14.165 --> 00:07:16.820
Return 26.

00:07:16.820 --> 00:07:21.125
And for the last element we have accumulator 26.

00:07:21.125 --> 00:07:26.930
26 plus five is going to be 31.

00:07:26.930 --> 00:07:29.120
And this is going to be our final value.

00:07:29.120 --> 00:07:31.835
So our final value that we have

00:07:31.835 --> 00:07:35.000
in the result variable is going to be the value

00:07:35.000 --> 00:07:36.200
that would return from

00:07:36.200 --> 00:07:38.660
the very last call back

00:07:38.660 --> 00:07:41.315
of the dots reduce method that is wide.

00:07:41.315 --> 00:07:42.905
This first argument is called

00:07:42.905 --> 00:07:46.520
accumulator because just like you observed right now,

00:07:46.520 --> 00:07:49.640
this value is accumulated across

00:07:49.640 --> 00:07:54.140
all callbacks that we have in the dot reduce method.

00:07:54.140 --> 00:07:57.110
It is a very flexible tool and at

00:07:57.110 --> 00:07:58.295
first it's really hard to

00:07:58.295 --> 00:08:00.605
understand how dots reduce works,

00:08:00.605 --> 00:08:03.154
but trust me, it is very flexible.

00:08:03.154 --> 00:08:06.185
Another example would be when we have to

00:08:06.185 --> 00:08:10.175
produce a new object from that array.

00:08:10.175 --> 00:08:14.180
For example, we wanted to have that object where key is

00:08:14.180 --> 00:08:15.500
going to be the index of

00:08:15.500 --> 00:08:18.080
the element and the value is going to be devalued.

00:08:18.080 --> 00:08:22.640
So for example, element 0 is going to be seven,

00:08:22.640 --> 00:08:25.910
element one is going to be 6,

00:08:25.910 --> 00:08:33.830
second element is going to be 934 and forth five, right?

00:08:33.830 --> 00:08:36.200
So suppose that we need

00:08:36.200 --> 00:08:38.900
to transform that array into that object.

00:08:38.900 --> 00:08:41.450
So this is our desired result.

00:08:41.450 --> 00:08:44.630
We can actually use dot reduced to achieve that.

00:08:44.630 --> 00:08:47.240
Let me remove those Commons

00:08:47.240 --> 00:08:49.295
and let's see how we can approach that.

00:08:49.295 --> 00:08:53.645
So we know that we need to receive an object at the end.

00:08:53.645 --> 00:08:56.315
So before when we calculated the sum,

00:08:56.315 --> 00:08:59.585
we know that our final value is going to be a number.

00:08:59.585 --> 00:09:01.640
That's why we put 0 over here.

00:09:01.640 --> 00:09:04.490
But now, since it is going to be an object,

00:09:04.490 --> 00:09:06.935
we're going to put an empty object here.

00:09:06.935 --> 00:09:09.500
This is going to be our starting point.

00:09:09.500 --> 00:09:12.125
Accumulator for the first run

00:09:12.125 --> 00:09:14.120
is going to be an empty object.

00:09:14.120 --> 00:09:16.265
Current value still stays

00:09:16.265 --> 00:09:19.250
the value that we have inside our array.

00:09:19.250 --> 00:09:22.115
So now, in order to achieve this result,

00:09:22.115 --> 00:09:27.215
we have to actually merge values inside this object.

00:09:27.215 --> 00:09:29.765
Since we need to work with objects,

00:09:29.765 --> 00:09:32.570
we need to return an object from

00:09:32.570 --> 00:09:35.360
that callback because this is our accumulator.

00:09:35.360 --> 00:09:37.955
Our final result again is an object.

00:09:37.955 --> 00:09:41.885
That's why our accumulator is an object.

00:09:41.885 --> 00:09:45.455
So we're going to return and we have to return an object.

00:09:45.455 --> 00:09:47.705
So in order to merge objects,

00:09:47.705 --> 00:09:51.680
we have to type object dot assign.

00:09:51.680 --> 00:09:54.320
So the first is the target.

00:09:54.320 --> 00:09:56.570
And here we're going to supply some value that

00:09:56.570 --> 00:09:59.090
will be merged into that object.

00:09:59.090 --> 00:10:00.530
But before we can merge it,

00:10:00.530 --> 00:10:02.915
we have to actually create the object, right?

00:10:02.915 --> 00:10:05.420
So we're gonna put const,

00:10:05.420 --> 00:10:10.250
let's say mapped current element.

00:10:10.250 --> 00:10:13.745
And let's put it as an empty object first.

00:10:13.745 --> 00:10:18.620
And then we have to create that single piece of value

00:10:18.620 --> 00:10:20.194
that will represent

00:10:20.194 --> 00:10:23.510
our current element inside final result.

00:10:23.510 --> 00:10:27.935
So we want this map current element to be that object.

00:10:27.935 --> 00:10:33.635
So for the first element it is going to be 0, 7.

00:10:33.635 --> 00:10:37.415
We want mapped current element to be of this shape,

00:10:37.415 --> 00:10:41.540
and we will merge this object into our accumulator.

00:10:41.540 --> 00:10:44.720
So we need to somehow achieved that we

00:10:44.720 --> 00:10:47.990
can actually type mapped current element.

00:10:47.990 --> 00:10:50.960
Then the index of our element,

00:10:50.960 --> 00:10:52.115
we have to use it.

00:10:52.115 --> 00:10:54.995
So now we can actually put

00:10:54.995 --> 00:10:58.670
our argument here and call it current index.

00:10:58.670 --> 00:11:00.575
Put it like that.

00:11:00.575 --> 00:11:04.400
So that way we can reference that mapped current element

00:11:04.400 --> 00:11:09.305
dot current index equals current value.

00:11:09.305 --> 00:11:13.580
And this line will bring us this result grid.

00:11:13.580 --> 00:11:15.560
Now we merged that result into

00:11:15.560 --> 00:11:20.570
our accumulator mapped current element,

00:11:20.570 --> 00:11:24.560
and now we will have our desired result.

00:11:24.560 --> 00:11:26.255
Let's check it out.

00:11:26.255 --> 00:11:29.015
Node file gs.

00:11:29.015 --> 00:11:34.850
And today we have 0 element value 7,

00:11:34.850 --> 00:11:37.535
first element value six seconds,

00:11:37.535 --> 00:11:41.540
9, third, fourth, 45, grade.

00:11:41.540 --> 00:11:43.355
Everything just like I wanted.

00:11:43.355 --> 00:11:45.305
What actually happened here?

00:11:45.305 --> 00:11:50.435
Let's try and console.log accumulator.

00:11:50.435 --> 00:11:53.150
Well, and as you can see actually this is

00:11:53.150 --> 00:11:55.640
a really great example from this output.

00:11:55.640 --> 00:11:59.330
You can see how accumulator is actually

00:11:59.330 --> 00:12:03.470
being accumulated over all of these callback runs.

00:12:03.470 --> 00:12:06.995
So first, for the first run of that callback,

00:12:06.995 --> 00:12:09.860
we held our empty object, right?

00:12:09.860 --> 00:12:12.080
That's why we see empty object here.

00:12:12.080 --> 00:12:15.275
Then we created that element here,

00:12:15.275 --> 00:12:17.330
which is this, and then we

00:12:17.330 --> 00:12:19.985
merged it into an empty object.

00:12:19.985 --> 00:12:23.915
So this is what we return from the first run.

00:12:23.915 --> 00:12:25.580
On the second run,

00:12:25.580 --> 00:12:29.165
we merged this into the first object,

00:12:29.165 --> 00:12:33.800
which resulted in this object with 76,

00:12:33.800 --> 00:12:36.815
and so on until the very last element.

00:12:36.815 --> 00:12:38.105
So at the end,

00:12:38.105 --> 00:12:40.805
we have our desired result.

00:12:40.805 --> 00:12:41.840
Pretty awesome.

00:12:41.840 --> 00:12:45.245
Dot reduce is really powerful and really flexible.

00:12:45.245 --> 00:12:48.650
It is crucial to understand that because Dr.

00:12:48.650 --> 00:12:50.030
US is pretty common,

00:12:50.030 --> 00:12:52.760
not that common as the dot map method,

00:12:52.760 --> 00:12:55.085
but still it is used very frequently.

00:12:55.085 --> 00:12:58.265
I know it is hard to understand.

00:12:58.265 --> 00:13:02.540
Dots reduce entirely when you first see it, but trust me,

00:13:02.540 --> 00:13:04.190
just take some time,

00:13:04.190 --> 00:13:07.535
experiment with it, play with the different values.

00:13:07.535 --> 00:13:11.060
Try it yourself, maybe try console logging values.

00:13:11.060 --> 00:13:14.120
Tried putting different values into a ray,

00:13:14.120 --> 00:13:16.415
tried to return different values from here.

00:13:16.415 --> 00:13:17.945
And you will see that

00:13:17.945 --> 00:13:19.790
after some time you will understand,

00:13:19.790 --> 00:13:21.695
you will have that aha moment.

00:13:21.695 --> 00:13:22.880
I'm pretty sure.

00:13:22.880 --> 00:13:26.270
I think this is all four dots reduce method.

00:13:26.270 --> 00:13:27.845
I hope it was clear.

00:13:27.845 --> 00:13:30.335
I tried to break it down as much as I

00:13:30.335 --> 00:13:33.035
could and the rest is on you.

00:13:33.035 --> 00:13:35.880
I'm gonna see you in the next one.
