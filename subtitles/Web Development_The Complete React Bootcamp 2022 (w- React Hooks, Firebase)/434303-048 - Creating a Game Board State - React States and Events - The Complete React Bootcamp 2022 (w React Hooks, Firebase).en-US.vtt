WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.860
Hey,

00:00:00.860 --> 00:00:02.160
welcome in this video,

00:00:02.160 --> 00:00:06.900
we will talk about react events and also about react State.

00:00:06.900 --> 00:00:08.010
Let's go.

00:00:08.010 --> 00:00:09.130
In the previous video,

00:00:09.130 --> 00:00:12.200
we got to know how to style the app.

00:00:12.200 --> 00:00:13.710
But what about functionality?

00:00:13.710 --> 00:00:15.900
If we want to add some functionality,

00:00:15.900 --> 00:00:17.470
what do we do?

00:00:17.470 --> 00:00:18.290
Well,

00:00:18.290 --> 00:00:23.250
we need to use state to keep track off our application logic.

00:00:23.250 --> 00:00:25.680
Or if it is our board component,

00:00:25.680 --> 00:00:30.170
we need to keep track over the board to see the actual game.

00:00:30.170 --> 00:00:31.220
So what do we do?

00:00:31.220 --> 00:00:31.860
Well,

00:00:31.860 --> 00:00:39.170
we need to use state and state is just the presentation off something at this particular

00:00:39.170 --> 00:00:39.880
moment.

00:00:39.880 --> 00:00:40.910
The game state,

00:00:40.910 --> 00:00:41.650
for example.

00:00:41.650 --> 00:00:42.450
All right,

00:00:42.450 --> 00:00:45.730
But how can we use state in our components?

00:00:45.730 --> 00:00:46.300
Well,

00:00:46.300 --> 00:00:48.070
we need to use react.

00:00:48.070 --> 00:00:55.380
Hooks and react hooks are just functions that are exported from the official react package

00:00:55.380 --> 00:00:55.380
,

00:00:55.380 --> 00:00:59.480
and they allow us to many pleat components in a different mother,

00:00:59.480 --> 00:01:02.950
and one of them is just manipulate the state.

00:01:02.950 --> 00:01:04.500
So from react,

00:01:04.500 --> 00:01:06.550
we are going to import,

00:01:06.550 --> 00:01:10.460
use state hook and all hooks.

00:01:10.460 --> 00:01:12.610
Start with the use keyword,

00:01:12.610 --> 00:01:15.820
and this is the convention said by the React team,

00:01:15.820 --> 00:01:20.130
to distinguish between normal functions and hook functions.

00:01:20.130 --> 00:01:22.130
So inside our component.

00:01:22.130 --> 00:01:27.650
We are going to create a new state that will represent the game aboard state.

00:01:27.650 --> 00:01:28.570
Let's go.

00:01:28.570 --> 00:01:30.460
So the thing we need to do,

00:01:30.460 --> 00:01:32.360
we need to define and you valuable.

00:01:32.360 --> 00:01:33.360
And for now,

00:01:33.360 --> 00:01:34.560
let's name it,

00:01:34.560 --> 00:01:35.060
dummy,

00:01:35.060 --> 00:01:36.130
something like that.

00:01:36.130 --> 00:01:41.580
And then we need to call this use state hook inside as argument.

00:01:41.580 --> 00:01:48.810
We need to pass the initial state that we want to see and how we're going to represent the

00:01:48.810 --> 00:01:50.370
state off our game.

00:01:50.370 --> 00:01:56.510
I prepared this small image for us to see how we're going to manage this state.

00:01:56.510 --> 00:01:58.060
So as you can see,

00:01:58.060 --> 00:02:00.050
our game board is just,

00:02:00.050 --> 00:02:00.730
let's say,

00:02:00.730 --> 00:02:03.310
nine elements from 0 to 8,

00:02:03.310 --> 00:02:03.730
actually,

00:02:03.730 --> 00:02:05.040
so we have nine elements.

00:02:05.040 --> 00:02:09.480
So our game board will be represented as an array off nine elements,

00:02:09.480 --> 00:02:12.760
and by default they all will be set to now,

00:02:12.760 --> 00:02:14.860
which means basically nothing.

00:02:14.860 --> 00:02:18.650
And then when we click on a particular square,

00:02:18.650 --> 00:02:22.950
the corresponding position in the array will be updated.

00:02:22.950 --> 00:02:24.300
So if we click,

00:02:24.300 --> 00:02:26.740
let's say on fifth element,

00:02:26.740 --> 00:02:32.700
then the element inside this array at position number five will be updated that this is

00:02:32.700 --> 00:02:36.950
said to ex war 20 So something like that,

00:02:36.950 --> 00:02:41.020
So our initial state we need to pass and way,

00:02:41.020 --> 00:02:44.090
which is filled by default with the now values.

00:02:44.090 --> 00:02:52.600
So let's put away off nine elements and then we can call Fill to fill this array by default

00:02:52.600 --> 00:02:52.600
,

00:02:52.600 --> 00:02:54.170
whether no elements.

00:02:54.170 --> 00:02:56.730
And now we're ready to go.

00:02:56.730 --> 00:02:57.640
However,

00:02:57.640 --> 00:03:00.420
if we have on this use state,

00:03:00.420 --> 00:03:05.150
we can see that it returns an array off exactly two elements,

00:03:05.150 --> 00:03:08.750
and the first element is going to be the state itself.

00:03:08.750 --> 00:03:11.860
And the second element is going to be the update function.

00:03:11.860 --> 00:03:12.750
When we call it,

00:03:12.750 --> 00:03:13.970
we can update the state.

00:03:13.970 --> 00:03:19.640
So weaken destructor this away where first element is going to be the state.

00:03:19.640 --> 00:03:25.150
Let's name it board and the second element is going to be the update function.

00:03:25.150 --> 00:03:32.090
Let's name it set aboard and let's come slug it and see what do we have?

00:03:32.090 --> 00:03:34.360
So if I go back,

00:03:34.360 --> 00:03:40.500
if I had fresh the app now we can see my state is just an array off nine elements filled

00:03:40.500 --> 00:03:41.730
with null values.

00:03:41.730 --> 00:03:42.450
OK,

00:03:42.450 --> 00:03:43.250
that's perfect.

00:03:43.250 --> 00:03:46.430
Now what do we do next?

00:03:46.430 --> 00:03:51.400
We need to somehow update the state when we click on a square.

00:03:51.400 --> 00:03:55.320
So this is where react events come in.

00:03:55.320 --> 00:04:01.100
So what are react events and these are simple events available on elements.

00:04:01.100 --> 00:04:03.850
Let's go to the square component.

00:04:03.850 --> 00:04:10.230
And here on this button we can put an event handler every built in HTML.

00:04:10.230 --> 00:04:13.910
Tak has a set of events available for us.

00:04:13.910 --> 00:04:15.770
And if inside attributes,

00:04:15.770 --> 00:04:17.130
if we type on,

00:04:17.130 --> 00:04:20.470
we can see a list off events available for us,

00:04:20.470 --> 00:04:25.280
and we can get use off any off this event as many times as we want.

00:04:25.280 --> 00:04:26.320
But here,

00:04:26.320 --> 00:04:27.570
inside this button,

00:04:27.570 --> 00:04:31.290
we are interested about on click event.

00:04:31.290 --> 00:04:34.920
So let's put on Click Over Here and yeah,

00:04:34.920 --> 00:04:37.440
we need to use again the camel case.

00:04:37.440 --> 00:04:39.690
And inside this own click,

00:04:39.690 --> 00:04:45.550
we need to pass a function that will be a handler for this event.

00:04:45.550 --> 00:04:48.110
So inside we need to pass a function,

00:04:48.110 --> 00:04:52.290
and this function gets one argument event object.

00:04:52.290 --> 00:04:55.600
So if we use this event object over here,

00:04:55.600 --> 00:05:01.560
if we put dot we can see we have set off things available for us and we will get use of

00:05:01.560 --> 00:05:03.140
them in future videos.

00:05:03.140 --> 00:05:03.840
But for now,

00:05:03.840 --> 00:05:05.590
we don't need this event object.

00:05:05.590 --> 00:05:07.650
So I'm gonna just get rid of that.

00:05:07.650 --> 00:05:14.260
And here let's just put console dot log and value and let's see what is going to happen.

00:05:14.260 --> 00:05:17.240
You would go back to our app if I had a fresh.

00:05:17.240 --> 00:05:20.590
And now whatever I click on a square,

00:05:20.590 --> 00:05:23.270
I will see now five is being consul.

00:05:23.270 --> 00:05:28.050
Lucked because we are consul logging the current belly off the square.

00:05:28.050 --> 00:05:29.500
If I click on one,

00:05:29.500 --> 00:05:31.410
I'll get one on eight.

00:05:31.410 --> 00:05:32.140
I get eight,

00:05:32.140 --> 00:05:33.040
etcetera.

00:05:33.040 --> 00:05:36.910
So this is how we can get used off react events.

00:05:36.910 --> 00:05:43.750
Now we need to somehow connect this state over here and this event handler over here.

00:05:43.750 --> 00:05:45.530
So when we click on a square,

00:05:45.530 --> 00:05:52.130
we update the state how we can actually get access to the state that is defined in the

00:05:52.130 --> 00:05:55.150
parent component or inside other element.

00:05:55.150 --> 00:05:55.880
Well,

00:05:55.880 --> 00:05:59.760
we need to pass a function the not the update function,

00:05:59.760 --> 00:06:02.510
but the function that will do some logic,

00:06:02.510 --> 00:06:08.610
as a custom attributes as a prop to this square so we can put it here as a handler.

00:06:08.610 --> 00:06:11.850
So what I mean is that first of all,

00:06:11.850 --> 00:06:13.480
let's associate ah,

00:06:13.480 --> 00:06:13.970
were,

00:06:13.970 --> 00:06:14.580
let's say,

00:06:14.580 --> 00:06:17.520
board state with the our squares.

00:06:17.520 --> 00:06:21.880
So instead of 01234 to get the actual state.

00:06:21.880 --> 00:06:23.040
So here,

00:06:23.040 --> 00:06:27.060
I'm gonna replace this like this.

00:06:27.060 --> 00:06:33.140
I'm gonna type board and then the current position off Correspondent Square.

00:06:33.140 --> 00:06:40.770
So now I have empty squares because values are now no values this why they are all empty

00:06:40.770 --> 00:06:41.600
now.

00:06:41.600 --> 00:06:44.670
What do I do to update the actual state?

00:06:44.670 --> 00:06:46.020
As I said before,

00:06:46.020 --> 00:06:49.650
we need to pass this on click handler over here.

00:06:49.650 --> 00:06:59.620
So we would pass on click custom prop to this square component that we can then a sign as a

00:06:59.620 --> 00:07:01.950
handler for this own click event.

00:07:01.950 --> 00:07:04.370
It doesn't matter how we named this,

00:07:04.370 --> 00:07:12.170
but just one click to match the corresponding event so we would pull on Click over here.

00:07:12.170 --> 00:07:19.860
So now we need to pass on click attribute here and poured a function here.

00:07:19.860 --> 00:07:22.090
So what can we do here?

00:07:22.090 --> 00:07:28.530
So let's great a costume function inside board that will handle the business logic for the

00:07:28.530 --> 00:07:29.450
on click event.

00:07:29.450 --> 00:07:32.290
So here we can do handle,

00:07:32.290 --> 00:07:34.590
square click,

00:07:34.590 --> 00:07:39.770
and this handle square click to protest.

00:07:39.770 --> 00:07:44.570
The logic needs to know the current position off the square.

00:07:44.570 --> 00:07:46.550
So what we can do?

00:07:46.550 --> 00:07:49.450
We can put it not like that.

00:07:49.450 --> 00:07:54.700
Handle square click because it simply will not work.

00:07:54.700 --> 00:08:01.570
We need to put it like that we need to put function inside and then we need inside call

00:08:01.570 --> 00:08:05.210
this function because this is just how Javascript works.

00:08:05.210 --> 00:08:11.030
And we can't do something like that if we reported like this.

00:08:11.030 --> 00:08:13.280
When we call directly function over here,

00:08:13.280 --> 00:08:17.490
it will not work because this function will be immediately executed.

00:08:17.490 --> 00:08:19.790
This is just the principles of javascript,

00:08:19.790 --> 00:08:20.500
not react.

00:08:20.500 --> 00:08:25.620
So we need to pass a function that will call another function in our case.

00:08:25.620 --> 00:08:26.320
So handle,

00:08:26.320 --> 00:08:27.130
square click.

00:08:27.130 --> 00:08:29.820
And as I said before two percents business logic,

00:08:29.820 --> 00:08:34.930
we need to know the position off the square that we click on.

00:08:34.930 --> 00:08:41.340
So here we need to pass zero and the same procedure we need to repeat for each off our

00:08:41.340 --> 00:08:42.040
squares.

00:08:42.040 --> 00:08:45.430
But this is a large and we will repeat ourselves.

00:08:45.430 --> 00:08:50.050
That's why we can create a custom function that will render our square.

00:08:50.050 --> 00:08:54.050
What I mean is that here we can define a custom function,

00:08:54.050 --> 00:09:01.510
something like render square and this custom function will receive one argument.

00:09:01.510 --> 00:09:09.080
Let's say position and then these custom function will return this square component.

00:09:09.080 --> 00:09:13.370
Let me Koppett and based it here and here.

00:09:13.370 --> 00:09:19.370
What we will do instead of directly Let's see hard coding values we will put board at the

00:09:19.370 --> 00:09:24.390
current position and then as on click handler,

00:09:24.390 --> 00:09:31.160
we will pour this function and then we will pour handle square click with the position that

00:09:31.160 --> 00:09:37.030
we pass as an argument now how we can get used off this render square now instead off

00:09:37.030 --> 00:09:38.510
directly Asian components.

00:09:38.510 --> 00:09:43.500
Over here we can replace all of them weather with this function.

00:09:43.500 --> 00:09:44.020
So,

00:09:44.020 --> 00:09:45.350
as I said before,

00:09:45.350 --> 00:09:47.100
inside Js six,

00:09:47.100 --> 00:09:48.290
if we need to use,

00:09:48.290 --> 00:09:51.700
let's say a function or we need to use any JavaScript,

00:09:51.700 --> 00:09:53.680
we need to open Carly brackets.

00:09:53.680 --> 00:09:56.730
So we need to open cuddle brackets Insight.

00:09:56.730 --> 00:10:02.850
We will call this function at under square and we will pass the position that we want to

00:10:02.850 --> 00:10:05.010
render the current square on.

00:10:05.010 --> 00:10:09.050
So we will call render square with zero,

00:10:09.050 --> 00:10:15.050
and whatever is returned from this function will be inserted at this position Insight,

00:10:15.050 --> 00:10:15.530
J.

00:10:15.530 --> 00:10:16.040
Essex.

00:10:16.040 --> 00:10:18.360
So this function returns square,

00:10:18.360 --> 00:10:21.100
so here the square will appear.

00:10:21.100 --> 00:10:24.310
So let's replace all of our squares over here.

00:10:24.310 --> 00:10:31.650
So I'm going to remove all of that and I will pour render square three times over here with

00:10:31.650 --> 00:10:36.280
one position two and the same for other squares.

00:10:36.280 --> 00:10:37.450
So three,

00:10:37.450 --> 00:10:39.650
four and five.

00:10:39.650 --> 00:10:43.150
And here I will pour the six,

00:10:43.150 --> 00:10:46.890
seven and eight.

00:10:46.890 --> 00:10:48.540
Something like that.

00:10:48.540 --> 00:10:49.270
All right,

00:10:49.270 --> 00:10:51.260
if I go back to my app,

00:10:51.260 --> 00:10:56.720
nothing has been changed because we just did a really simple re factor over here.

00:10:56.720 --> 00:10:57.580
Okay,

00:10:57.580 --> 00:10:58.730
quote Now,

00:10:58.730 --> 00:10:59.970
what do we do next?

00:10:59.970 --> 00:11:02.110
Inside this handle square click.

00:11:02.110 --> 00:11:05.050
We need to protests the business logic.

00:11:05.050 --> 00:11:05.720
Finally,

00:11:05.720 --> 00:11:10.170
we need to define the logic that will update our state.

00:11:10.170 --> 00:11:17.730
So let's time just said board and let's set it to let's say no for know what is going to

00:11:17.730 --> 00:11:18.210
happen.

00:11:18.210 --> 00:11:23.460
So when we call the update function said board inside as an argument,

00:11:23.460 --> 00:11:28.050
we need to pass a new value that will be set as a state.

00:11:28.050 --> 00:11:30.460
It will not be merged or anything.

00:11:30.460 --> 00:11:33.960
So if our state is currently an array of nine elements,

00:11:33.960 --> 00:11:35.350
and if we put it five,

00:11:35.350 --> 00:11:37.240
then the state will be set to five.

00:11:37.240 --> 00:11:39.460
So we need to be careful with that.

00:11:39.460 --> 00:11:42.750
So let's just put it like that for now.

00:11:42.750 --> 00:11:47.210
And let's consul log and see what will we have as a state?

00:11:47.210 --> 00:11:49.470
So I'm gonna save it.

00:11:49.470 --> 00:11:51.880
And now if I click on a square now,

00:11:51.880 --> 00:11:54.490
you can see my square is not my square.

00:11:54.490 --> 00:11:57.090
The state is set to five.

00:11:57.090 --> 00:11:57.710
OK,

00:11:57.710 --> 00:11:58.350
that's it.

00:11:58.350 --> 00:12:02.590
Let's continue Handle square click receives position as an argument.

00:12:02.590 --> 00:12:06.630
So what's put it here as well and fruit says the loci.

00:12:06.630 --> 00:12:08.210
So first of all,

00:12:08.210 --> 00:12:10.810
if we click on a square,

00:12:10.810 --> 00:12:12.270
something must happen.

00:12:12.270 --> 00:12:14.020
So what is going to happen?

00:12:14.020 --> 00:12:16.080
We need to obviously update the state,

00:12:16.080 --> 00:12:17.590
so we need to called,

00:12:17.590 --> 00:12:18.820
said Board.

00:12:18.820 --> 00:12:20.050
That's just we did,

00:12:20.050 --> 00:12:20.800
however,

00:12:20.800 --> 00:12:22.260
said Board comes,

00:12:22.260 --> 00:12:27.510
Let's say in a two Barents we can we can update the state just as I showed you with just

00:12:27.510 --> 00:12:29.830
passing value inside it on Bill,

00:12:29.830 --> 00:12:30.760
set as a state.

00:12:30.760 --> 00:12:33.150
Or if we want to update,

00:12:33.150 --> 00:12:34.910
let's say the previous state,

00:12:34.910 --> 00:12:38.740
we can pass a callback function inside this set board.

00:12:38.740 --> 00:12:40.490
So here what I will do,

00:12:40.490 --> 00:12:42.570
I will pass a callback function here.

00:12:42.570 --> 00:12:48.210
This callback function receives one argument the previous state.

00:12:48.210 --> 00:12:51.740
So let's put it previous over here.

00:12:51.740 --> 00:12:54.000
And what can we do?

00:12:54.000 --> 00:12:54.490
Hear?

00:12:54.490 --> 00:12:59.850
Whatever we return from this callback function will be set as a new state.

00:12:59.850 --> 00:13:02.770
So what logic should report inside?

00:13:02.770 --> 00:13:07.470
We know that our next state must be something like that.

00:13:07.470 --> 00:13:12.130
So what is going to be and you are a with the updated values.

00:13:12.130 --> 00:13:17.460
So we need to map the previous away to new values.

00:13:17.460 --> 00:13:25.890
So what we can do so we can time the next logical return previous dot map And inside this

00:13:25.890 --> 00:13:26.620
dark map,

00:13:26.620 --> 00:13:30.950
we have square and then position off the square.

00:13:30.950 --> 00:13:35.600
And what logic will report inside this dot map matter.

00:13:35.600 --> 00:13:42.230
So we are going to check if position off currently it treated square.

00:13:42.230 --> 00:13:50.080
Is the position off currently clicked Square We will return,

00:13:50.080 --> 00:13:57.990
Let's say X as otherwise in any other case we will just return the same square.

00:13:57.990 --> 00:14:00.400
So it is going to be just,

00:14:00.400 --> 00:14:03.390
let's say square something like that.

00:14:03.390 --> 00:14:04.400
Okay,

00:14:04.400 --> 00:14:06.410
Now let's check it out.

00:14:06.410 --> 00:14:11.560
And if I click on this square X will be set at this position.

00:14:11.560 --> 00:14:12.750
If I click here,

00:14:12.750 --> 00:14:14.270
I will see x here,

00:14:14.270 --> 00:14:15.110
etcetera,

00:14:15.110 --> 00:14:15.910
etcetera.

00:14:15.910 --> 00:14:18.210
But this is not exactly we wanted.

00:14:18.210 --> 00:14:20.850
We want either X or zero.

00:14:20.850 --> 00:14:26.940
That's why we need another state to keep track off the next player.

00:14:26.940 --> 00:14:28.850
So let's great one,

00:14:28.850 --> 00:14:32.080
and we will name it here.

00:14:32.080 --> 00:14:34.290
Let's say is ekes next.

00:14:34.290 --> 00:14:39.800
It is going to be a bowling value that will represent our current player.

00:14:39.800 --> 00:14:44.880
So is X Next basically means is EXT will be next as a player.

00:14:44.880 --> 00:14:53.380
So and the ugly function is going to be set is X next and it is going to be used state and

00:14:53.380 --> 00:14:55.120
by default is X.

00:14:55.120 --> 00:14:57.520
Next will be set to,

00:14:57.520 --> 00:14:58.050
let's say,

00:14:58.050 --> 00:14:58.940
two false.

00:14:58.940 --> 00:15:00.410
All right,

00:15:00.410 --> 00:15:01.890
cool now.

00:15:01.890 --> 00:15:05.460
So inside there's said Board update function.

00:15:05.460 --> 00:15:07.040
We can do the next logic.

00:15:07.040 --> 00:15:11.480
We can ask if is X next.

00:15:11.480 --> 00:15:14.670
Then we are going to return pigs.

00:15:14.670 --> 00:15:18.140
Otherwise we return zero,

00:15:18.140 --> 00:15:19.610
and that's basically it.

00:15:19.610 --> 00:15:20.600
However,

00:15:20.600 --> 00:15:25.220
if we save it and if we go back to our app if we click now,

00:15:25.220 --> 00:15:26.050
we have zero.

00:15:26.050 --> 00:15:27.340
If we click now,

00:15:27.340 --> 00:15:31.970
we have 0000 We don't have this logic that report here.

00:15:31.970 --> 00:15:35.660
That's because we didn't update the state.

00:15:35.660 --> 00:15:40.310
So right after we process all of this logic at the end,

00:15:40.310 --> 00:15:42.090
let's call the update function.

00:15:42.090 --> 00:15:42.750
Over here,

00:15:42.750 --> 00:15:45.560
let's revert the value.

00:15:45.560 --> 00:15:47.310
So again as before,

00:15:47.310 --> 00:15:53.850
we use the callback function and the cold like function receives the previous value.

00:15:53.850 --> 00:15:55.710
And since it is Bullen,

00:15:55.710 --> 00:15:58.430
we just need to revert it from true to false,

00:15:58.430 --> 00:15:59.650
from false to true.

00:15:59.650 --> 00:16:03.500
So we can just put negation and it will do its thing.

00:16:03.500 --> 00:16:05.600
Now let's save and let's see,

00:16:05.600 --> 00:16:06.430
what do we have?

00:16:06.430 --> 00:16:08.260
So if I click on a square,

00:16:08.260 --> 00:16:08.830
I have.

00:16:08.830 --> 00:16:09.450
You know,

00:16:09.450 --> 00:16:10.390
if I click,

00:16:10.390 --> 00:16:13.600
I have X and so one and so one.

00:16:13.600 --> 00:16:16.010
So everything works perfectly.

00:16:16.010 --> 00:16:17.010
However,

00:16:17.010 --> 00:16:22.040
if I click on the same square second time or just third time,

00:16:22.040 --> 00:16:23.690
it will still be protest.

00:16:23.690 --> 00:16:25.840
So we don't want this behavior.

00:16:25.840 --> 00:16:29.970
So amid this we can just put really simple condition.

00:16:29.970 --> 00:16:32.620
Right before we do the business logic,

00:16:32.620 --> 00:16:33.650
we can type.

00:16:33.650 --> 00:16:38.930
If we already have value at the click position,

00:16:38.930 --> 00:16:40.480
then we will return.

00:16:40.480 --> 00:16:47.060
Just exit the function so we will check if our value that we click on is set to know.

00:16:47.060 --> 00:16:48.020
So we will do.

00:16:48.020 --> 00:16:52.640
If board position exists,

00:16:52.640 --> 00:16:57.590
then we just returned from this function as simple as that.

00:16:57.590 --> 00:17:03.070
And now if I click on Squares and if I click on one square second time,

00:17:03.070 --> 00:17:04.570
nothing will be changed,

00:17:04.570 --> 00:17:06.960
and that's the behavior that we wanted.

00:17:06.960 --> 00:17:15.190
So that's a That's basically how can we handle state and events with the react?

00:17:15.190 --> 00:17:19.950
I guess it wasn't too complicated because this video was pretty long,

00:17:19.950 --> 00:17:23.030
but we did almost all the logic.

00:17:23.030 --> 00:17:26.040
We want it So let's commit our changes together.

00:17:26.040 --> 00:17:38.260
Get at then get commit and we will pour Adit board state and also react events.

00:17:38.260 --> 00:17:40.110
Something like this.

00:17:40.110 --> 00:17:41.300
Okay,

00:17:41.300 --> 00:17:41.970
Perfect.

00:17:41.970 --> 00:17:43.180
In the next video,

00:17:43.180 --> 00:17:49.350
we will observe this example a little bit more in details and talk about reacted life cycle

00:17:49.350 --> 00:17:49.870
events.

00:17:49.870 --> 00:17:50.850
See you there.

