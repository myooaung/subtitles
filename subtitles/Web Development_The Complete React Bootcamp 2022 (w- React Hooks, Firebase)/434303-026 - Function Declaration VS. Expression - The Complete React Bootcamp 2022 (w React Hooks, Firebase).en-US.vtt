WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.010
Hey, let's talk about

00:00:02.010 --> 00:00:04.935
function expression and function declaration.

00:00:04.935 --> 00:00:08.595
Why do we need to know the difference and what are those?

00:00:08.595 --> 00:00:10.770
This is going to be more of

00:00:10.770 --> 00:00:14.265
a theoretical video rather than the practical one.

00:00:14.265 --> 00:00:15.915
But I think this is

00:00:15.915 --> 00:00:18.135
important to understand the difference,

00:00:18.135 --> 00:00:20.655
even though B might not needed.

00:00:20.655 --> 00:00:22.530
Regardless, at the end of the day,

00:00:22.530 --> 00:00:24.659
it will make you a better developer.

00:00:24.659 --> 00:00:27.870
Let's go. So if I'm going to go back to File G,

00:00:27.870 --> 00:00:31.290
S here, I'm going to declare a function.

00:00:31.290 --> 00:00:33.435
I will call it Hello,

00:00:33.435 --> 00:00:37.015
and inside I will cancel log.

00:00:37.015 --> 00:00:39.485
My name is Andrew.

00:00:39.485 --> 00:00:41.855
And below I'm going to create

00:00:41.855 --> 00:00:46.745
a valuable hello to and to that variable.

00:00:46.745 --> 00:00:50.190
I'm going to assign a function.

00:00:50.290 --> 00:00:54.800
And inside I'm going to print.

00:00:54.800 --> 00:00:56.705
And you too.

00:00:56.705 --> 00:00:58.430
Now, as you can see,

00:00:58.430 --> 00:01:00.905
the both do the same thing.

00:01:00.905 --> 00:01:02.225
Let's call them.

00:01:02.225 --> 00:01:04.460
So first we're going to call hello,

00:01:04.460 --> 00:01:09.620
and then we're going to call hello to the terminal.

00:01:09.620 --> 00:01:13.310
I'm going to run the script and the output.

00:01:13.310 --> 00:01:16.100
Well, it's basically the same, right?

00:01:16.100 --> 00:01:17.645
So what is the difference?

00:01:17.645 --> 00:01:19.100
The difference is that

00:01:19.100 --> 00:01:22.655
the first example is a function declaration,

00:01:22.655 --> 00:01:26.150
and the second example is a function expression.

00:01:26.150 --> 00:01:29.825
The second example is actually a variable expression.

00:01:29.825 --> 00:01:35.810
So if I'm going to put any variable and give it a value,

00:01:35.810 --> 00:01:37.985
it will be an expression.

00:01:37.985 --> 00:01:41.180
So the same we can observe over here.

00:01:41.180 --> 00:01:45.740
We basically assign a function to a variable.

00:01:45.740 --> 00:01:47.435
Unlike over here.

00:01:47.435 --> 00:01:50.450
Here we do function declaration.

00:01:50.450 --> 00:01:52.640
The most important difference between these

00:01:52.640 --> 00:01:55.445
two is that with function declaration,

00:01:55.445 --> 00:01:59.390
it does not matter where we define the function weather.

00:01:59.390 --> 00:02:02.585
It is at the top or at the very bottom,

00:02:02.585 --> 00:02:06.035
but with function expression and actually matters.

00:02:06.035 --> 00:02:10.280
Let's put both of them at the end.

00:02:10.280 --> 00:02:13.010
And let's call them again.

00:02:13.010 --> 00:02:14.855
I'm going to run this script.

00:02:14.855 --> 00:02:17.510
And what I see, the first function,

00:02:17.510 --> 00:02:20.780
which is function declaration,

00:02:20.780 --> 00:02:23.360
went through and I can see the output.

00:02:23.360 --> 00:02:25.055
But the second example,

00:02:25.055 --> 00:02:27.695
failed reference error cannot

00:02:27.695 --> 00:02:30.605
access hello tube before initialization.

00:02:30.605 --> 00:02:33.545
The thing is that hello two

00:02:33.545 --> 00:02:37.130
is a function expression and JavaScript

00:02:37.130 --> 00:02:40.235
will only create that function

00:02:40.235 --> 00:02:44.135
when actually JavaScript goes to that line,

00:02:44.135 --> 00:02:46.535
function declaration will be

00:02:46.535 --> 00:02:50.555
created or it will be hoisted to the chop.

00:02:50.555 --> 00:02:54.650
In JavaScript, there is this concept of hoisting when

00:02:54.650 --> 00:02:58.010
function declarations are actually like

00:02:58.010 --> 00:03:01.730
moved to the top before the code runs.

00:03:01.730 --> 00:03:05.420
That is why it does not matter where we define them.

00:03:05.420 --> 00:03:07.684
The code will always,

00:03:07.684 --> 00:03:11.015
the language will always see this code as if

00:03:11.015 --> 00:03:14.990
function declaration was at the top, just like that.

00:03:14.990 --> 00:03:19.670
But function expression stays where it was defined.

00:03:19.670 --> 00:03:21.230
Just like with variables,

00:03:21.230 --> 00:03:23.824
we can actually reference variable.

00:03:23.824 --> 00:03:29.029
Let's say hi, before it was created.

00:03:29.029 --> 00:03:32.060
So if I'm going to create high below,

00:03:32.060 --> 00:03:38.555
and if I will try and execute this piece of code,

00:03:38.555 --> 00:03:41.480
I will give the same adder.

00:03:41.480 --> 00:03:45.005
Reference error cannot access high before initialization.

00:03:45.005 --> 00:03:47.270
So because this is an expression and the

00:03:47.270 --> 00:03:50.600
same we see with hello to,

00:03:50.600 --> 00:03:54.080
this is an expression and we cannot access

00:03:54.080 --> 00:03:59.030
that expression before it was created here at the top.

00:03:59.030 --> 00:04:02.975
So the only fix for that is, well,

00:04:02.975 --> 00:04:05.240
to actually access hello

00:04:05.240 --> 00:04:09.500
to after we created that variable.

00:04:09.500 --> 00:04:11.630
So now if I'm going to run it,

00:04:11.630 --> 00:04:14.390
I will not see any error in

00:04:14.390 --> 00:04:17.750
real-world in molar JavaScript projects.

00:04:17.750 --> 00:04:20.240
This is actually not a thing.

00:04:20.240 --> 00:04:24.200
You will not observe such behavior in the code.

00:04:24.200 --> 00:04:29.075
Well, because this mostly related to plain JavaScript

00:04:29.075 --> 00:04:31.340
and it is always good to

00:04:31.340 --> 00:04:34.040
know and understand the difference, right?

00:04:34.040 --> 00:04:35.690
But in modern projects,

00:04:35.690 --> 00:04:38.795
since we have tools that process our code,

00:04:38.795 --> 00:04:41.045
this thing will not take place,

00:04:41.045 --> 00:04:42.245
but as I said,

00:04:42.245 --> 00:04:44.825
it is good and I personally think

00:04:44.825 --> 00:04:47.630
important to understand the difference.

00:04:47.630 --> 00:04:49.100
So to quickly summarize,

00:04:49.100 --> 00:04:51.350
function expression is when you

00:04:51.350 --> 00:04:54.485
assign a function to a variable,

00:04:54.485 --> 00:04:57.005
it is easier to remember if you can think of it,

00:04:57.005 --> 00:05:00.095
is that function declaration always

00:05:00.095 --> 00:05:03.605
starts with function as the first word.

00:05:03.605 --> 00:05:06.440
And function expression does not have

00:05:06.440 --> 00:05:08.465
function as a first word

00:05:08.465 --> 00:05:11.105
because first word we have const over here,

00:05:11.105 --> 00:05:13.460
we assign it to a variable and function

00:05:13.460 --> 00:05:15.770
declarations are moved to

00:05:15.770 --> 00:05:18.080
the top regardless where they are

00:05:18.080 --> 00:05:21.395
defined just before the code runs.

00:05:21.395 --> 00:05:22.460
And that's it.

00:05:22.460 --> 00:05:25.140
I'm gonna see you in the next one.
