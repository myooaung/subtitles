WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.090
Hey there Now that we have complete search and we also created the show page,

00:00:06.090 --> 00:00:09.760
it is the time for us to manage the start page.

00:00:09.760 --> 00:00:13.040
So when we click on Stormy Button,

00:00:13.040 --> 00:00:18.370
the show is actually being added to the page and we can reference it in the future.

00:00:18.370 --> 00:00:21.460
But how we're able to manage it for this.

00:00:21.460 --> 00:00:23.210
We will use browsers,

00:00:23.210 --> 00:00:24.400
local storage,

00:00:24.400 --> 00:00:30.830
and we can located under application tap and then just click on local storage.

00:00:30.830 --> 00:00:38.770
So it is key value storage that allows us to persist data even if our website is close or

00:00:38.770 --> 00:00:41.350
even if our browser is close.

00:00:41.350 --> 00:00:44.190
So what we will do inside this local storage,

00:00:44.190 --> 00:00:49.550
we will store show ideas that we've added as our favorites.

00:00:49.550 --> 00:00:52.980
And then when we reference our start page,

00:00:52.980 --> 00:00:55.550
then we read from local storage.

00:00:55.550 --> 00:00:59.770
Read those ideas and we then fetch them from the a p I.

00:00:59.770 --> 00:01:01.060
So this is it.

00:01:01.060 --> 00:01:01.730
No,

00:01:01.730 --> 00:01:03.900
let's go for state management,

00:01:03.900 --> 00:01:11.210
we will use user reducer and because we also need to read and write to and from local

00:01:11.210 --> 00:01:11.750
storage,

00:01:11.750 --> 00:01:15.690
we will create our own custom hook on top of use reducer,

00:01:15.690 --> 00:01:16.830
and we will name it,

00:01:16.830 --> 00:01:20.470
use persistent reducer so under MISC,

00:01:20.470 --> 00:01:23.350
we're going to create new file custom hooks,

00:01:23.350 --> 00:01:26.820
custom hooks,

00:01:26.820 --> 00:01:30.670
GS and capable define our custom hook.

00:01:30.670 --> 00:01:34.910
So it is going to be a function because all hooks are functions regardless,

00:01:34.910 --> 00:01:37.270
they are normal or custom hooks,

00:01:37.270 --> 00:01:44.630
so use persisted reducer and it is going to resemble normal use reducer.

00:01:44.630 --> 00:01:48.320
But it will add one more additional argument,

00:01:48.320 --> 00:01:51.610
which is key for the local storage.

00:01:51.610 --> 00:01:53.690
So let's do it.

00:01:53.690 --> 00:01:59.250
So let's first import normal use reducer from react package,

00:01:59.250 --> 00:02:05.550
import use reducer and what normal use reducer does.

00:02:05.550 --> 00:02:14.530
So first it returns state dispatch and then we call it with the reducer and then we call it

00:02:14.530 --> 00:02:16.250
with initial state.

00:02:16.250 --> 00:02:19.170
So to our use persistent reducer,

00:02:19.170 --> 00:02:26.040
we also need to pass the reducer and initial state so curable specify reducer that we will

00:02:26.040 --> 00:02:30.440
use than initial state and also because we use local storage.

00:02:30.440 --> 00:02:34.090
We will pass the key and I didn't tell you before,

00:02:34.090 --> 00:02:41.300
But use reducer also comes with the third argument and third argument is the initial Isar

00:02:41.300 --> 00:02:42.090
function.

00:02:42.090 --> 00:02:45.330
So whenever we need to computation it,

00:02:45.330 --> 00:02:51.720
the initial state we should use this third argument and whatever is returned from this

00:02:51.720 --> 00:02:56.080
third function will be set as the initial state,

00:02:56.080 --> 00:03:00.210
regardless of what we pass as a second argument over here.

00:03:00.210 --> 00:03:07.150
So this third function first argument it receives the initial state that we pass as the

00:03:07.150 --> 00:03:08.220
second argument.

00:03:08.220 --> 00:03:13.900
So let's name it initial and capable read from local storage.

00:03:13.900 --> 00:03:15.090
So what we will do?

00:03:15.090 --> 00:03:20.570
Verbal create new battle persisted and not Paris did persisted.

00:03:20.570 --> 00:03:24.940
And here we will do local storage dot get item.

00:03:24.940 --> 00:03:29.260
And then we will specify the key that we receive as an argument.

00:03:29.260 --> 00:03:31.530
So get item honored this key.

00:03:31.530 --> 00:03:38.450
Then we will put return and then move will ask if persisted actually exists because we can

00:03:38.450 --> 00:03:41.890
read value and it can be undefined or empty.

00:03:41.890 --> 00:03:44.050
So if this value exists,

00:03:44.050 --> 00:03:47.120
then we will Jason dot parse.

00:03:47.120 --> 00:03:53.250
And we will use Jason Piedad parts because when we store data inside local storage with

00:03:53.250 --> 00:03:56.950
store only strings and when we store objects,

00:03:56.950 --> 00:04:00.700
we need to convert them from shrinks back to objects.

00:04:00.700 --> 00:04:03.270
And this is what Jason part does.

00:04:03.270 --> 00:04:05.190
So here we will pour,

00:04:05.190 --> 00:04:07.550
persisted as otherwise.

00:04:07.550 --> 00:04:10.400
If our persistent does not exist,

00:04:10.400 --> 00:04:16.310
venerable simply return the initial argument that we receive as a as an argument.

00:04:16.310 --> 00:04:16.950
All right,

00:04:16.950 --> 00:04:21.150
so in the show and we are done with the initialization.

00:04:21.150 --> 00:04:29.190
Now we need to also synchronize our state whenever we update it with local storage.

00:04:29.190 --> 00:04:30.560
So how can we do this?

00:04:30.560 --> 00:04:36.910
We will get used off use effect and we will rerun the effect the callback that we pass to

00:04:36.910 --> 00:04:40.620
use the fact every time our state is changed.

00:04:40.620 --> 00:04:43.300
So let's import use a fact.

00:04:43.300 --> 00:04:46.050
And here we will define use effect.

00:04:46.050 --> 00:04:48.370
And inside this cold back,

00:04:48.370 --> 00:04:50.040
we will now leave it empty.

00:04:50.040 --> 00:04:51.380
For our argument,

00:04:51.380 --> 00:04:55.980
we will specify state because we want to run it whenever state changes.

00:04:55.980 --> 00:05:00.630
So we will put local storage dot said I Tim.

00:05:00.630 --> 00:05:07.530
Then we will pass key that we receive as an argument and then also we will put Jason dot

00:05:07.530 --> 00:05:15.060
string defy and then we will pour our current state and also we will see that we have

00:05:15.060 --> 00:05:20.720
missing dependency key those This is fine because our key will not be changed.

00:05:20.720 --> 00:05:21.790
We are sure.

00:05:21.790 --> 00:05:27.550
So this is how we can achieve synchronisation with a local storage.

00:05:27.550 --> 00:05:35.080
Let's say now from this custom hook we will return state and dispatch and it is going to be

00:05:35.080 --> 00:05:36.940
an array off two elements.

00:05:36.940 --> 00:05:41.500
So now it does resemble the normal use reducer.

00:05:41.500 --> 00:05:44.490
Now what we will do from our code,

00:05:44.490 --> 00:05:47.650
we will call use persistent reducer.

00:05:47.650 --> 00:05:51.850
Then we will pass reducer that we will define initial state and key.

00:05:51.850 --> 00:05:56.730
But if we use this hook multiple times inside our code,

00:05:56.730 --> 00:06:00.490
every time we will need to pass a reducer for our shows.

00:06:00.490 --> 00:06:03.890
So what we can do to reuse the logic?

00:06:03.890 --> 00:06:07.110
We can create one more hook on top of use,

00:06:07.110 --> 00:06:11.680
persistent reducer and people namely something like use shows.

00:06:11.680 --> 00:06:13.390
So let's define it here.

00:06:13.390 --> 00:06:16.050
That is going to be used shows.

00:06:16.050 --> 00:06:20.670
And for this use shows instead of passing reducer initial state,

00:06:20.670 --> 00:06:22.450
we will only pass the key.

00:06:22.450 --> 00:06:25.180
And if it is undefined,

00:06:25.180 --> 00:06:26.790
we will fall back to show.

00:06:26.790 --> 00:06:32.540
So we will specify the default perimeter than from this youth shows.

00:06:32.540 --> 00:06:35.430
We will return use persistent reducer.

00:06:35.430 --> 00:06:37.420
So whatever is returned from use,

00:06:37.420 --> 00:06:41.550
persistent reducer will be returned from use shows.

00:06:41.550 --> 00:06:46.970
So here we will specify shows reducer that will create in a moment.

00:06:46.970 --> 00:06:53.520
Then we will put initial state and our initial state is going to be an array just an empty

00:06:53.520 --> 00:06:54.030
array.

00:06:54.030 --> 00:06:59.180
And then the key that again comes as the argument from use shows.

00:06:59.180 --> 00:06:59.810
All right,

00:06:59.810 --> 00:07:03.770
now we need to to export it from here.

00:07:03.770 --> 00:07:06.520
And we needed to define our reducer.

00:07:06.520 --> 00:07:10.040
So what actions will we have in our state?

00:07:10.040 --> 00:07:13.010
We can Onley add or remove shows.

00:07:13.010 --> 00:07:18.050
So these are our actions and let's create And you reducer over here,

00:07:18.050 --> 00:07:21.200
which is going to be shows reducer.

00:07:21.200 --> 00:07:25.060
So it expects previous state as an argument.

00:07:25.060 --> 00:07:32.190
Then it expects action and what we will do will put so which statement curable,

00:07:32.190 --> 00:07:43.270
specify action type and our default case will going to be return previous state If action

00:07:43.270 --> 00:07:44.100
is undefined,

00:07:44.100 --> 00:07:46.730
then we will put our actions so cased.

00:07:46.730 --> 00:07:54.450
First we will put ad and when we add item what were eligible return and Ray Then we are

00:07:54.450 --> 00:08:01.980
going to put spread operator too to merge our previous array and then on top over age we

00:08:01.980 --> 00:08:12.540
will add action dot show I d for right and then for remove case we will add return and we

00:08:12.540 --> 00:08:19.910
will filter our current state which is going to be previous ST dot filter And inside we

00:08:19.910 --> 00:08:26.960
will pass the next call back So we will receive our show i d as a night him And what we

00:08:26.960 --> 00:08:36.680
will do We will actually ask if show I d not equals action dot show I d and it will work.

00:08:36.680 --> 00:08:41.450
It will filter our current state so it seems fine.

00:08:41.450 --> 00:08:46.840
And I guess we are finished with creating our own custom hook in the next video,

00:08:46.840 --> 00:08:51.480
we will use it and we will see how easy it is to use it.

00:08:51.480 --> 00:08:52.070
All right,

00:08:52.070 --> 00:08:53.430
so But for now,

00:08:53.430 --> 00:08:56.960
let's commit our changes and finish this video.

00:08:56.960 --> 00:09:07.590
I will name Mike amid as created custom hook four shows and that's it.

00:09:07.590 --> 00:09:09.150
See you in the next one.

