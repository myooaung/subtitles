WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.975
Hi, Welcome to know GS introduction video.

00:00:03.975 --> 00:00:07.425
Right now we're going to talk about what is no GS.

00:00:07.425 --> 00:00:08.700
Why do we need it,

00:00:08.700 --> 00:00:11.310
and how we are able to use it?

00:00:11.310 --> 00:00:13.890
Let's go first things first,

00:00:13.890 --> 00:00:20.155
what is no GS know GS is JavaScript runtime environment.

00:00:20.155 --> 00:00:23.060
It means that it is something

00:00:23.060 --> 00:00:26.285
that allows us to run JavaScript.

00:00:26.285 --> 00:00:27.920
And you will probably thinking,

00:00:27.920 --> 00:00:29.525
why do we need no GS?

00:00:29.525 --> 00:00:31.490
Because we have JavaScript

00:00:31.490 --> 00:00:34.160
running in the browser and that's the point.

00:00:34.160 --> 00:00:36.965
Nowadays, we are able to run JavaScript

00:00:36.965 --> 00:00:40.040
outside of the browser with the help of NodeJS,

00:00:40.040 --> 00:00:43.730
we can use JavaScript to write mobile applications.

00:00:43.730 --> 00:00:46.760
We can use JavaScript to write desktop applications.

00:00:46.760 --> 00:00:49.940
We can basically do anything with JavaScript right now.

00:00:49.940 --> 00:00:51.395
Thanks to note, yes,

00:00:51.395 --> 00:00:53.150
because it allows us to run

00:00:53.150 --> 00:00:55.505
JavaScript outside of the browser.

00:00:55.505 --> 00:00:58.445
So for example, if I open browser here,

00:00:58.445 --> 00:01:02.450
I click Inspect, then I go to console.

00:01:02.450 --> 00:01:04.880
So this is browser environment.

00:01:04.880 --> 00:01:08.225
I'm able to write any JavaScript I want here.

00:01:08.225 --> 00:01:14.075
For example, if I want to type console.log 5 plus 2,

00:01:14.075 --> 00:01:16.115
it will print six for me.

00:01:16.115 --> 00:01:19.565
That's great, but this is inside the browser.

00:01:19.565 --> 00:01:21.920
If I wanted to execute it somewhere else,

00:01:21.920 --> 00:01:23.510
I wouldn't be allowed to do so.

00:01:23.510 --> 00:01:24.980
But with the help of nodes, yes,

00:01:24.980 --> 00:01:26.540
I will be able to do that.

00:01:26.540 --> 00:01:29.345
Let's go to VS code and let

00:01:29.345 --> 00:01:32.255
me create a new project folder.

00:01:32.255 --> 00:01:35.165
I will go to My Projects folder,

00:01:35.165 --> 00:01:39.350
and here I'm going to put test GS.

00:01:39.350 --> 00:01:40.940
I will select that folder.

00:01:40.940 --> 00:01:43.400
And now let's create a new file

00:01:43.400 --> 00:01:47.555
here we will call it test.js.

00:01:47.555 --> 00:01:49.655
Before we will write anything,

00:01:49.655 --> 00:01:52.700
Let's first ensure that we have no JS installed in.

00:01:52.700 --> 00:01:53.930
We're able to access it.

00:01:53.930 --> 00:01:56.584
For that, I will open my integrated terminal.

00:01:56.584 --> 00:01:58.880
And in order to access NodeJS,

00:01:58.880 --> 00:02:01.595
I just need to type node.

00:02:01.595 --> 00:02:04.205
Once they execute node command,

00:02:04.205 --> 00:02:06.965
I will enter the Node.JS environment.

00:02:06.965 --> 00:02:11.465
So here, I will be able to execute JavaScript.

00:02:11.465 --> 00:02:14.330
For example, the same thing what I did in

00:02:14.330 --> 00:02:18.050
the browser console log 2 plus 4. Pretty awesome.

00:02:18.050 --> 00:02:20.060
This is the proof that JavaScript

00:02:20.060 --> 00:02:22.310
was run outside of the browser.

00:02:22.310 --> 00:02:25.040
But this is not very convenient for us to

00:02:25.040 --> 00:02:28.190
always write JavaScript inside terminal.

00:02:28.190 --> 00:02:29.675
So to exit that mode,

00:02:29.675 --> 00:02:33.740
which is going to press Control plus C multiple times.

00:02:33.740 --> 00:02:34.550
Great.

00:02:34.550 --> 00:02:39.365
And now instead, let's write a few JavaScript files

00:02:39.365 --> 00:02:41.810
that we will later than execute with

00:02:41.810 --> 00:02:44.435
no JS before we're going to jump into files,

00:02:44.435 --> 00:02:46.910
I just want to mention that every file,

00:02:46.910 --> 00:02:48.740
every JavaScript file that is run

00:02:48.740 --> 00:02:51.725
inside Node.JS environment is going to be a module.

00:02:51.725 --> 00:02:55.415
A module is a JavaScript file that is self-contained.

00:02:55.415 --> 00:02:57.365
It means that it is not know about

00:02:57.365 --> 00:03:00.320
outside world only what is written inside.

00:03:00.320 --> 00:03:02.840
Let's first create maybe Am I audible?

00:03:02.840 --> 00:03:06.620
Const five equals five.

00:03:06.620 --> 00:03:11.480
And now let's console dot log 5 and hit Save.

00:03:11.480 --> 00:03:12.155
That's it.

00:03:12.155 --> 00:03:14.540
We've just created our first script.

00:03:14.540 --> 00:03:17.795
Now let's run it to execute a file,

00:03:17.795 --> 00:03:20.450
we have to type node and then the

00:03:20.450 --> 00:03:23.600
name of the script that we would like to execute.

00:03:23.600 --> 00:03:26.450
So this is going to be test GS.

00:03:26.450 --> 00:03:29.330
I run that command and you can see

00:03:29.330 --> 00:03:34.115
five in the console because I just console log 5.

00:03:34.115 --> 00:03:36.410
If I'm going to remove that line,

00:03:36.410 --> 00:03:37.835
I will comment it out.

00:03:37.835 --> 00:03:40.430
And I will try to run the script again.

00:03:40.430 --> 00:03:42.230
Nothing will be printed.

00:03:42.230 --> 00:03:46.205
And this is obvious because we don't do anything inside.

00:03:46.205 --> 00:03:49.744
Now, let's make our task a little bit harder.

00:03:49.744 --> 00:03:52.880
What if we have two files to modules?

00:03:52.880 --> 00:03:57.020
Let you create second dot here,

00:03:57.020 --> 00:03:59.180
and let's put a string here.

00:03:59.180 --> 00:04:04.520
Maybe my name, I will print Andrew.

00:04:04.520 --> 00:04:06.665
And what I want to do,

00:04:06.665 --> 00:04:08.720
I want to somehow share

00:04:08.720 --> 00:04:11.825
information between these two modules.

00:04:11.825 --> 00:04:13.895
So I wanted to pass my name

00:04:13.895 --> 00:04:17.255
from second gs into test. Yes.

00:04:17.255 --> 00:04:21.425
And I'm able to do that through import and export.

00:04:21.425 --> 00:04:27.725
So to export something from a module, we use module.

00:04:27.725 --> 00:04:32.555
So our experts than we export an object.

00:04:32.555 --> 00:04:34.085
And in this object,

00:04:34.085 --> 00:04:38.720
I will put my name variable like that.

00:04:38.720 --> 00:04:41.645
So I can do it actually like this.

00:04:41.645 --> 00:04:45.215
My name, then call on my name.

00:04:45.215 --> 00:04:48.110
But in JavaScript we can use a shorthand.

00:04:48.110 --> 00:04:51.440
We can just put it like that and it will work great.

00:04:51.440 --> 00:04:54.860
Now my name is exported from second gs.

00:04:54.860 --> 00:04:56.615
Let's try and import that.

00:04:56.615 --> 00:04:57.980
If I go back to Ts,

00:04:57.980 --> 00:05:00.080
gs, let me remove all of that.

00:05:00.080 --> 00:05:02.570
I will put a const that I

00:05:02.570 --> 00:05:05.255
will name my export something like.

00:05:05.255 --> 00:05:08.899
Imported my name, whatever.

00:05:08.899 --> 00:05:12.050
And in order to import what I exported from here,

00:05:12.050 --> 00:05:14.105
I need to type required.

00:05:14.105 --> 00:05:20.060
And inside require, I put path to that module,

00:05:20.060 --> 00:05:24.845
which is going to be just second GS.

00:05:24.845 --> 00:05:27.170
I don't need to specify the extension.

00:05:27.170 --> 00:05:30.545
So I put dot and slash over here to

00:05:30.545 --> 00:05:35.015
specify that this file is located at this folder.

00:05:35.015 --> 00:05:37.055
Now, what I will do,

00:05:37.055 --> 00:05:41.105
I will simply console log imported my name.

00:05:41.105 --> 00:05:42.515
I save the file,

00:05:42.515 --> 00:05:44.240
go back to the terminal,

00:05:44.240 --> 00:05:48.095
and then again, node, test, GS.

00:05:48.095 --> 00:05:49.805
Boom, what I see,

00:05:49.805 --> 00:05:51.619
I have an object.

00:05:51.619 --> 00:05:55.685
And this object contains my name key.

00:05:55.685 --> 00:05:59.615
Exactly what I exported from second, yes,

00:05:59.615 --> 00:06:05.570
actually we can rename that to imported second module.

00:06:05.570 --> 00:06:10.684
And then I can reference imported second module dot

00:06:10.684 --> 00:06:16.565
my name because this is an object and it has key my name.

00:06:16.565 --> 00:06:19.610
I save it, I execute the script again,

00:06:19.610 --> 00:06:21.950
and I have entered printed in the console.

00:06:21.950 --> 00:06:25.640
This is how NodeJS works by simply creating

00:06:25.640 --> 00:06:29.555
different modules that shared data between each other.

00:06:29.555 --> 00:06:33.005
That system with a require and with

00:06:33.005 --> 00:06:36.905
module exports is called common GS,

00:06:36.905 --> 00:06:38.450
which is written like that.

00:06:38.450 --> 00:06:39.995
Comma gs.

00:06:39.995 --> 00:06:44.420
This is native import export system in Node.JS.

00:06:44.420 --> 00:06:46.160
However, at this moment,

00:06:46.160 --> 00:06:50.240
NodeJS community is actively working on and

00:06:50.240 --> 00:06:54.724
use system which is called ECMO Script modules.

00:06:54.724 --> 00:06:59.045
So these modules are part of browser environment

00:06:59.045 --> 00:07:00.485
and at the moment they are

00:07:00.485 --> 00:07:03.889
experimental in a Node.JS environment.

00:07:03.889 --> 00:07:06.095
So they are slightly different

00:07:06.095 --> 00:07:09.425
from require and module exports,

00:07:09.425 --> 00:07:13.670
but they are more easier and intuitive to use.

00:07:13.670 --> 00:07:14.870
Let's try out them.

00:07:14.870 --> 00:07:16.985
What do you think in order to use

00:07:16.985 --> 00:07:20.765
ACML Script molecules in Node.JS environment,

00:07:20.765 --> 00:07:24.740
we have to add another extension to our modules.

00:07:24.740 --> 00:07:28.055
So instead of js, we need to use MGS,

00:07:28.055 --> 00:07:30.260
which is going to be module GS,

00:07:30.260 --> 00:07:33.635
MGS and rename that file as well,

00:07:33.635 --> 00:07:35.330
going to be mgs.

00:07:35.330 --> 00:07:37.280
So instead of required,

00:07:37.280 --> 00:07:39.170
I'm going to comment this line out

00:07:39.170 --> 00:07:41.525
by pressing Control Slash.

00:07:41.525 --> 00:07:45.319
And instead I will use Import.

00:07:45.319 --> 00:07:49.265
Then since we export an object,

00:07:49.265 --> 00:07:52.115
I will again put curly brackets.

00:07:52.115 --> 00:07:56.585
And I'm going to specify that I need to import my name.

00:07:56.585 --> 00:07:58.280
It is important to specify

00:07:58.280 --> 00:08:00.020
the same name because if I'm

00:08:00.020 --> 00:08:02.209
going to specify something different,

00:08:02.209 --> 00:08:05.555
it does not exist on the exported object, right?

00:08:05.555 --> 00:08:13.505
So I will put my name from second module.

00:08:13.505 --> 00:08:14.510
Great.

00:08:14.510 --> 00:08:17.900
And now I will console log my name.

00:08:17.900 --> 00:08:19.865
And in second MGS,

00:08:19.865 --> 00:08:21.590
instead of module exports,

00:08:21.590 --> 00:08:27.125
I simply type export my name.

00:08:27.125 --> 00:08:28.595
That's it.

00:08:28.595 --> 00:08:29.750
And it looks much,

00:08:29.750 --> 00:08:32.855
much cleaner than CommonJS.

00:08:32.855 --> 00:08:37.250
Now let's try an executed node test.

00:08:37.250 --> 00:08:39.125
Yes, and we will have,

00:08:39.125 --> 00:08:42.230
cannot find module aha IC.

00:08:42.230 --> 00:08:46.805
This is because I probably have to specify the extension.

00:08:46.805 --> 00:08:48.170
Let me try it out.

00:08:48.170 --> 00:08:49.400
Yeah, exactly.

00:08:49.400 --> 00:08:51.545
So there is one more drawback with

00:08:51.545 --> 00:08:54.035
the using ECMO scripts module

00:08:54.035 --> 00:08:55.895
at the current state of NodeJS,

00:08:55.895 --> 00:09:00.230
I have to always specify the extension with CommonJS,

00:09:00.230 --> 00:09:02.900
I can admit specifying the extension

00:09:02.900 --> 00:09:05.765
when a Import different modules like that,

00:09:05.765 --> 00:09:08.945
but with ECMO scripts module, I have to do that.

00:09:08.945 --> 00:09:10.745
The result is the same.

00:09:10.745 --> 00:09:11.990
I'm going to run the script.

00:09:11.990 --> 00:09:14.030
I have Andrew, but you can see now it

00:09:14.030 --> 00:09:16.475
uses ECMO scripts module in our project.

00:09:16.475 --> 00:09:19.010
When we gonna do all that development stuff,

00:09:19.010 --> 00:09:21.770
we're going to use Node.JS environment and we're going

00:09:21.770 --> 00:09:24.665
to utilize Achmat Script modules.

00:09:24.665 --> 00:09:27.770
You can see that this is a very simple example.

00:09:27.770 --> 00:09:31.010
It uses single scripts here, nothing complicated.

00:09:31.010 --> 00:09:33.860
However, we are obviously need something more

00:09:33.860 --> 00:09:37.955
complex and this is our topic for the next video.

00:09:37.955 --> 00:09:39.720
See you there.
