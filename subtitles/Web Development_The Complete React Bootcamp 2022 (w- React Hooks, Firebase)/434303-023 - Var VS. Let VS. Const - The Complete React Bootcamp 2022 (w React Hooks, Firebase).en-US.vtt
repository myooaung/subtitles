WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.350
Hi, In this video,

00:00:01.350 --> 00:00:03.300
we will talk about different types of

00:00:03.300 --> 00:00:05.430
variables that exist in JavaScript.

00:00:05.430 --> 00:00:08.010
These are var, let, and const.

00:00:08.010 --> 00:00:09.450
In this video, we will understand

00:00:09.450 --> 00:00:10.650
the difference between them

00:00:10.650 --> 00:00:14.250
and which type we have to use in this situation.

00:00:14.250 --> 00:00:17.430
Let's go. So how all of that is going to be organized?

00:00:17.430 --> 00:00:19.605
I'm going to create a single script

00:00:19.605 --> 00:00:22.260
that I will name file gs.

00:00:22.260 --> 00:00:23.760
And then I'm going to execute

00:00:23.760 --> 00:00:26.100
that script with examples through

00:00:26.100 --> 00:00:31.190
the integrated terminal using node file.js command.

00:00:31.190 --> 00:00:33.590
So bar, let and const.

00:00:33.590 --> 00:00:34.835
What is the difference?

00:00:34.835 --> 00:00:36.860
Let's maybe create a variable of

00:00:36.860 --> 00:00:40.580
type var and call it my name.

00:00:40.580 --> 00:00:46.205
Then I will just console.log that variable.

00:00:46.205 --> 00:00:48.275
And then let's execute the script.

00:00:48.275 --> 00:00:52.490
You will see Andrew gets printed, everything works.

00:00:52.490 --> 00:00:54.500
So what's the deal with that variable?

00:00:54.500 --> 00:00:58.129
They deal with var is that these type of variable

00:00:58.129 --> 00:01:03.155
is enclosed to the closest function scope.

00:01:03.155 --> 00:01:05.645
To understand that we have to create that

00:01:05.645 --> 00:01:08.210
variable inside of a function.

00:01:08.210 --> 00:01:11.025
So let's create a function.

00:01:11.025 --> 00:01:15.550
Print my name.

00:01:15.550 --> 00:01:17.305
And inside that function,

00:01:17.305 --> 00:01:18.805
I'm going to put var.

00:01:18.805 --> 00:01:22.480
And then I will console log my name inside.

00:01:22.480 --> 00:01:24.670
Now if I'm going to run the script,

00:01:24.670 --> 00:01:26.500
I will see you nothing because well,

00:01:26.500 --> 00:01:30.835
it is a function and I have to call it, print my name.

00:01:30.835 --> 00:01:32.065
Great.

00:01:32.065 --> 00:01:33.520
Now execute the script again.

00:01:33.520 --> 00:01:34.855
You will see Andrew,

00:01:34.855 --> 00:01:36.640
the result is the same.

00:01:36.640 --> 00:01:38.725
If I'm going to put console log

00:01:38.725 --> 00:01:41.335
outside of the function scope,

00:01:41.335 --> 00:01:43.615
I will get a reference error.

00:01:43.615 --> 00:01:48.820
Because my name is defined inside function scope.

00:01:48.820 --> 00:01:51.340
It is not visible outside of it.

00:01:51.340 --> 00:01:53.085
That's why we have reference error.

00:01:53.085 --> 00:01:54.905
Great, We understand that.

00:01:54.905 --> 00:01:56.600
Again, what's the deal with var?

00:01:56.600 --> 00:02:02.150
As a sad, it is enclosed to the closest function scope.

00:02:02.150 --> 00:02:04.415
It means that it doesn't matter

00:02:04.415 --> 00:02:08.090
how many scopes I have inside that function,

00:02:08.090 --> 00:02:10.475
it will be visible everywhere.

00:02:10.475 --> 00:02:13.535
What I mean is that if I'm going to put a lot of,

00:02:13.535 --> 00:02:15.020
let's say, if blocks here,

00:02:15.020 --> 00:02:17.270
if five is greater than one,

00:02:17.270 --> 00:02:19.700
then I'm going to create another in

00:02:19.700 --> 00:02:23.465
their blog just to create scopes, okay?

00:02:23.465 --> 00:02:26.570
If 10 is less than 20,

00:02:26.570 --> 00:02:29.135
if five is greater than three,

00:02:29.135 --> 00:02:31.010
it doesn't matter what I do here.

00:02:31.010 --> 00:02:35.285
I just want to create as many inner scopes as possible.

00:02:35.285 --> 00:02:37.025
And now what I will do,

00:02:37.025 --> 00:02:38.720
I will put var,

00:02:38.720 --> 00:02:42.364
my name inside the most in their scope,

00:02:42.364 --> 00:02:44.510
and then I will try and access

00:02:44.510 --> 00:02:46.745
my name inside that function.

00:02:46.745 --> 00:02:49.220
What do you think is this code go into work as

00:02:49.220 --> 00:02:52.295
expected and we will see entry in the terminal.

00:02:52.295 --> 00:02:53.525
Let's try it out.

00:02:53.525 --> 00:02:58.490
I'm going to rerun the script node file.js.

00:02:58.490 --> 00:03:00.665
And we see Andrew,

00:03:00.665 --> 00:03:03.050
well, this is unpredictable.

00:03:03.050 --> 00:03:07.010
We want this variable to behave to

00:03:07.010 --> 00:03:08.945
actually not be visible

00:03:08.945 --> 00:03:11.975
outside of the scope where it was defined.

00:03:11.975 --> 00:03:14.900
So the scope where that variable was

00:03:14.900 --> 00:03:19.220
defined is this most inner if block,

00:03:19.220 --> 00:03:21.350
if it was defined,

00:03:21.350 --> 00:03:24.020
let's say in this block,

00:03:24.020 --> 00:03:26.810
in this if over here,

00:03:26.810 --> 00:03:29.060
then it would be visible everywhere

00:03:29.060 --> 00:03:31.910
inside but not outside of it.

00:03:31.910 --> 00:03:38.345
Var is again, is enclosed to the closest function scope.

00:03:38.345 --> 00:03:41.525
It does not matter where or in what,

00:03:41.525 --> 00:03:43.655
in their most scope,

00:03:43.655 --> 00:03:47.585
I defined variable of type var inside a function,

00:03:47.585 --> 00:03:52.265
its visibility is always going to be function scope.

00:03:52.265 --> 00:03:55.490
And this is bad because it is unpredictable.

00:03:55.490 --> 00:03:59.540
We want to always ensure that our variable is always

00:03:59.540 --> 00:04:02.465
visible only within that scope

00:04:02.465 --> 00:04:04.790
where it was defined over here.

00:04:04.790 --> 00:04:06.935
So to fix that problem,

00:04:06.935 --> 00:04:10.445
we have variables of type, let and const.

00:04:10.445 --> 00:04:14.015
So if I'm going to put LED over here,

00:04:14.015 --> 00:04:17.210
and then I will try and execute the script.

00:04:17.210 --> 00:04:19.940
You will see reference error.

00:04:19.940 --> 00:04:24.770
Because now let is scoped to the closest scope,

00:04:24.770 --> 00:04:27.050
actually to the scope where it was defined.

00:04:27.050 --> 00:04:28.805
And the same with const.

00:04:28.805 --> 00:04:32.180
If I'm going to put const over here and run this script,

00:04:32.180 --> 00:04:33.890
you will see again the same thing.

00:04:33.890 --> 00:04:36.635
My name is not defined reference error.

00:04:36.635 --> 00:04:38.030
So to fix that,

00:04:38.030 --> 00:04:39.230
to fixed reference error,

00:04:39.230 --> 00:04:41.300
we have to reference

00:04:41.300 --> 00:04:44.240
my name in this scope where it is available,

00:04:44.240 --> 00:04:45.710
which is going to be this.

00:04:45.710 --> 00:04:48.665
Let's move console log to that scope.

00:04:48.665 --> 00:04:50.885
And let's try it again.

00:04:50.885 --> 00:04:53.315
You will see entry gets printed.

00:04:53.315 --> 00:04:54.740
And now this is

00:04:54.740 --> 00:04:57.560
predictable because we know that this variable is

00:04:57.560 --> 00:04:59.510
defined inside this scope and

00:04:59.510 --> 00:05:02.765
its visibility ends whenever we go outside,

00:05:02.765 --> 00:05:05.960
if I will put console log in this scope,

00:05:05.960 --> 00:05:08.765
you will see again the reference error.

00:05:08.765 --> 00:05:10.790
Oh, let me save the file.

00:05:10.790 --> 00:05:13.400
You will see reference error because

00:05:13.400 --> 00:05:17.165
this goes outside of the scope.

00:05:17.165 --> 00:05:19.955
Where my name is defined, right?

00:05:19.955 --> 00:05:22.640
This is the difference between lead const and

00:05:22.640 --> 00:05:25.445
var let and const type of fiber bowls.

00:05:25.445 --> 00:05:29.855
Visibility ends with the enclosing scope,

00:05:29.855 --> 00:05:34.715
while var ends with the closest function scope.

00:05:34.715 --> 00:05:39.560
So if I have another function inside of a function,

00:05:39.560 --> 00:05:41.660
Let's say function hello.

00:05:41.660 --> 00:05:45.559
And then I'm going to define the same thing.

00:05:45.559 --> 00:05:49.520
All of that inside Hello than var will be

00:05:49.520 --> 00:05:53.540
visible only inside hello function.

00:05:53.540 --> 00:05:57.680
It will not be visible to print my name but to Hello.

00:05:57.680 --> 00:05:59.570
All right, I guess it's clear.

00:05:59.570 --> 00:06:03.365
Now, what is the difference then between let and const?

00:06:03.365 --> 00:06:05.600
Let is this type of variable which

00:06:05.600 --> 00:06:08.225
tends to be reassigned.

00:06:08.225 --> 00:06:10.670
Let's say I created viable my name

00:06:10.670 --> 00:06:13.580
and then in the future I want to reassign it.

00:06:13.580 --> 00:06:15.110
Maybe I want to

00:06:15.110 --> 00:06:18.605
now how value not Andrew, but something else.

00:06:18.605 --> 00:06:21.755
So what I would do, I would reassign that valuable.

00:06:21.755 --> 00:06:25.175
So by name now becomes john.

00:06:25.175 --> 00:06:28.415
And if I'm going to console log John,

00:06:28.415 --> 00:06:30.410
you will see actually John

00:06:30.410 --> 00:06:32.915
not entry because now it has different value.

00:06:32.915 --> 00:06:35.960
Let's type that can be reassigned.

00:06:35.960 --> 00:06:40.085
However, with const, it's not.

00:06:40.085 --> 00:06:42.410
Let me save it and run the script.

00:06:42.410 --> 00:06:44.330
You will see assignment to

00:06:44.330 --> 00:06:48.125
constant variable because const means constant,

00:06:48.125 --> 00:06:51.050
something that does not change if I create it by

00:06:51.050 --> 00:06:54.155
double my name and put it as entry,

00:06:54.155 --> 00:06:55.925
it means that it won't change.

00:06:55.925 --> 00:06:58.400
It will always be Andrew.

00:06:58.400 --> 00:07:01.895
Again. Let can be reassigned.

00:07:01.895 --> 00:07:05.150
If you created a variable, my name,

00:07:05.150 --> 00:07:06.860
and then in the future, if you are

00:07:06.860 --> 00:07:09.080
sure that you are going to rename it,

00:07:09.080 --> 00:07:12.020
then use lead because lead can be

00:07:12.020 --> 00:07:16.265
reassigned if you don't want that variable to change,

00:07:16.265 --> 00:07:18.875
You sure that whatever value

00:07:18.875 --> 00:07:21.785
you assign to that variable will stay like that.

00:07:21.785 --> 00:07:23.060
Use const.

00:07:23.060 --> 00:07:26.585
In practice, most of the variables will have const type.

00:07:26.585 --> 00:07:28.130
And those variables that we

00:07:28.130 --> 00:07:29.825
know that we will reassign them.

00:07:29.825 --> 00:07:31.025
We're going to use lat,

00:07:31.025 --> 00:07:34.415
but otherwise const, and we never use var.

00:07:34.415 --> 00:07:36.019
So to quickly summarize,

00:07:36.019 --> 00:07:38.495
wire is datatype of itable,

00:07:38.495 --> 00:07:42.590
which was ability is the closest function scope.

00:07:42.590 --> 00:07:44.540
It does not matter how in there

00:07:44.540 --> 00:07:46.805
most would define that variable.

00:07:46.805 --> 00:07:49.715
It will be still visible in the function scope.

00:07:49.715 --> 00:07:51.890
And like let and const,

00:07:51.890 --> 00:07:54.530
let and const are scoped to

00:07:54.530 --> 00:07:58.985
the closest scope where they are defined.

00:07:58.985 --> 00:08:01.310
Let is this type of variable that can be

00:08:01.310 --> 00:08:04.190
reassigned and const is constant.

00:08:04.190 --> 00:08:06.230
If you're going to create a constant variable,

00:08:06.230 --> 00:08:08.255
it will not be changed later.

00:08:08.255 --> 00:08:12.020
However, there is one more small trick with const,

00:08:12.020 --> 00:08:13.835
and this trick is objects.

00:08:13.835 --> 00:08:18.140
So if My name is going to be an object,

00:08:18.140 --> 00:08:20.810
that object can be modified,

00:08:20.810 --> 00:08:22.880
but you cannot switch

00:08:22.880 --> 00:08:26.225
the type from object to something else.

00:08:26.225 --> 00:08:29.255
What I mean is that if my name,

00:08:29.255 --> 00:08:31.100
I define it as an object

00:08:31.100 --> 00:08:34.280
and later I want to change it to John.

00:08:34.280 --> 00:08:38.450
I will have assignment to constant battle.

00:08:38.450 --> 00:08:40.910
But if I want to let say,

00:08:40.910 --> 00:08:42.560
modify the object itself,

00:08:42.560 --> 00:08:44.780
for example, give it a new key.

00:08:44.780 --> 00:08:51.770
For example, my name dot something is going to be hello.

00:08:51.770 --> 00:08:54.320
And then I'm going to console log my name.

00:08:54.320 --> 00:08:57.440
You will see the object which has one key,

00:08:57.440 --> 00:08:59.540
something with value Hello.

00:08:59.540 --> 00:09:01.190
You have to remember that.

00:09:01.190 --> 00:09:03.245
So in this case you do not

00:09:03.245 --> 00:09:05.615
directly modified by double type,

00:09:05.615 --> 00:09:09.095
but rather you modify the object itself.

00:09:09.095 --> 00:09:10.670
Now you know the difference between

00:09:10.670 --> 00:09:12.170
different types of variables.

00:09:12.170 --> 00:09:13.670
I'm going to say it one more time.

00:09:13.670 --> 00:09:15.005
In practice, most of

00:09:15.005 --> 00:09:17.495
our variables are going to be of type const.

00:09:17.495 --> 00:09:20.360
And for those variables which tend to change,

00:09:20.360 --> 00:09:22.520
we're going to use the LED type.

00:09:22.520 --> 00:09:24.545
We will never use VAR.

00:09:24.545 --> 00:09:26.970
See you in the next one.
