WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.010
Hey,

00:00:01.010 --> 00:00:01.720
in this video,

00:00:01.720 --> 00:00:03.520
I would like to talk about context,

00:00:03.520 --> 00:00:05.760
a p I and global state management.

00:00:05.760 --> 00:00:09.900
When it comes to manage user profile how we can approach this,

00:00:09.900 --> 00:00:15.070
we know that it must be accessible globally most of the time inside every component.

00:00:15.070 --> 00:00:17.950
Imagine a very less component in the APP.

00:00:17.950 --> 00:00:24.190
This component needs to display user name that is currently signed in question is where we

00:00:24.190 --> 00:00:25.700
manage this user exactly.

00:00:25.700 --> 00:00:28.010
Let's suppose in the APP component.

00:00:28.010 --> 00:00:29.580
So to get user name,

00:00:29.580 --> 00:00:35.180
we must pass it through the props to every next component all the way down the tree.

00:00:35.180 --> 00:00:37.100
But this is not cool.

00:00:37.100 --> 00:00:37.620
We have,

00:00:37.620 --> 00:00:37.990
like,

00:00:37.990 --> 00:00:39.410
10 components above,

00:00:39.410 --> 00:00:44.760
and every component is playing a role in that this is called prop drilling.

00:00:44.760 --> 00:00:47.370
When some value is being passed down,

00:00:47.370 --> 00:00:49.660
the props on a lot off levels deep,

00:00:49.660 --> 00:00:53.910
this is no good and should be avoided to avoid problems kneeling.

00:00:53.910 --> 00:00:54.930
There is context,

00:00:54.930 --> 00:00:56.090
a P I in react.

00:00:56.090 --> 00:01:04.110
It introduces the concept off provider and consumer provider is a component that provides

00:01:04.110 --> 00:01:07.800
all its Children with some value or context.

00:01:07.800 --> 00:01:14.580
Consumer is a component that consumes the context and gets the value using context.

00:01:14.580 --> 00:01:15.130
AP I.

00:01:15.130 --> 00:01:19.960
We can easily manage our user in provider component and then consumers.

00:01:19.960 --> 00:01:21.250
In any component.

00:01:21.250 --> 00:01:25.350
We want to avoid probe drilling and intermediary components.

00:01:25.350 --> 00:01:29.660
We would create user context and put user name as its value.

00:01:29.660 --> 00:01:33.310
Then we would wrap up component around user provider.

00:01:33.310 --> 00:01:38.920
So basically all components get access to the user context to consume it inside the

00:01:38.920 --> 00:01:44.550
component where we need to get the context value we would call use context hook.

00:01:44.550 --> 00:01:45.460
In that way,

00:01:45.460 --> 00:01:49.550
we are able to get user name from any place inside our app.

00:01:49.550 --> 00:01:52.620
There are no limitations off context usage.

00:01:52.620 --> 00:01:59.170
We are able to put it anywhere in the APP component around home page around multi page form

00:01:59.170 --> 00:02:00.100
and so on.

00:02:00.100 --> 00:02:01.000
All right,

00:02:01.000 --> 00:02:06.940
let's actually see how context AP I works on the example off our chat application.

00:02:06.940 --> 00:02:07.750
Let's go.

00:02:07.750 --> 00:02:09.320
So on the resource folder,

00:02:09.320 --> 00:02:12.580
let's create another folder that we will call context.

00:02:12.580 --> 00:02:16.020
And here we're gonna put all of our created context.

00:02:16.020 --> 00:02:20.280
Let's create new file and mobile name it not maybe user context,

00:02:20.280 --> 00:02:21.930
but profile context.

00:02:21.930 --> 00:02:24.350
I think it is more suitable in our case,

00:02:24.350 --> 00:02:29.110
So let's put profile dot context doggy s.

00:02:29.110 --> 00:02:30.580
So what is our strategy?

00:02:30.580 --> 00:02:35.800
We're going to create this context and we will put it inside our APP component,

00:02:35.800 --> 00:02:40.950
so any other component inside our application can get access to it.

00:02:40.950 --> 00:02:43.700
So what do we need to dio to create a context?

00:02:43.700 --> 00:02:50.050
We simply need to call create context that comes from react package.

00:02:50.050 --> 00:02:52.730
So let's put it in available.

00:02:52.730 --> 00:02:58.250
And let's say it is going to be profile context just like that.

00:02:58.250 --> 00:03:01.110
Now we need to create a provider,

00:03:01.110 --> 00:03:01.980
a component,

00:03:01.980 --> 00:03:07.130
and that will provide all its Children with this profile context.

00:03:07.130 --> 00:03:10.870
So let's poor export CONST.

00:03:10.870 --> 00:03:13.180
Profile provider.

00:03:13.180 --> 00:03:15.230
And it is going to be a component.

00:03:15.230 --> 00:03:20.060
So this is going to be a function just like that.

00:03:20.060 --> 00:03:21.090
All right,

00:03:21.090 --> 00:03:23.790
now what's do we need to board here?

00:03:23.790 --> 00:03:26.200
What is going to return?

00:03:26.200 --> 00:03:33.220
It is going to return profile context dot provider And then inside this provider,

00:03:33.220 --> 00:03:36.070
we need support all off our components,

00:03:36.070 --> 00:03:37.660
whatever we pass inside.

00:03:37.660 --> 00:03:40.050
So it is going to be our Children.

00:03:40.050 --> 00:03:43.030
This profile provider is just a rapper,

00:03:43.030 --> 00:03:51.770
So let's destructor it as a prop over here and put it inside provider component just like

00:03:51.770 --> 00:03:52.050
that.

00:03:52.050 --> 00:03:53.190
All right,

00:03:53.190 --> 00:03:53.680
now,

00:03:53.680 --> 00:03:56.580
if we have or we can see react must be in scope.

00:03:56.580 --> 00:03:57.120
All right,

00:03:57.120 --> 00:03:59.630
let me import react.

00:03:59.630 --> 00:04:05.360
And some people get rid of this warning now how we're able to actually do anything.

00:04:05.360 --> 00:04:07.280
So because this is a component,

00:04:07.280 --> 00:04:11.640
we can do our state management directly over here.

00:04:11.640 --> 00:04:15.050
Let's navigate Teoh our private route,

00:04:15.050 --> 00:04:18.460
and here we know that we put this for now.

00:04:18.460 --> 00:04:19.830
We put this bull in value.

00:04:19.830 --> 00:04:21.860
This just falls by default.

00:04:21.860 --> 00:04:26.490
So let's get treat of that and he will consume our context.

00:04:26.490 --> 00:04:28.230
So let's put this.

00:04:28.230 --> 00:04:28.710
Let's say,

00:04:28.710 --> 00:04:29.340
bullion.

00:04:29.340 --> 00:04:30.620
Inside this context,

00:04:30.620 --> 00:04:31.600
we're gonna create,

00:04:31.600 --> 00:04:36.750
Let's see profile and said Profile as used state,

00:04:36.750 --> 00:04:38.650
which is going to be,

00:04:38.650 --> 00:04:39.070
let's say,

00:04:39.070 --> 00:04:40.560
Abul in value for now,

00:04:40.560 --> 00:04:47.170
just to demonstrate how context works in order to pass at value to these context,

00:04:47.170 --> 00:04:51.020
we need to put it as a prop to provide their component over here.

00:04:51.020 --> 00:04:57.750
And we need to pass our profile just like that and let's go meet set profile.

00:04:57.750 --> 00:05:00.620
Let's just not destructor it just like that.

00:05:00.620 --> 00:05:01.270
All right,

00:05:01.270 --> 00:05:02.440
we're ready to go.

00:05:02.440 --> 00:05:03.270
This is it.

00:05:03.270 --> 00:05:10.080
This is how we can manage our context now to actually use it inside our app inside our

00:05:10.080 --> 00:05:10.790
component.

00:05:10.790 --> 00:05:15.170
We need to put it here in app component just around switch.

00:05:15.170 --> 00:05:20.460
So let's type what we named it raw file provider.

00:05:20.460 --> 00:05:21.970
And that's it.

00:05:21.970 --> 00:05:28.370
And they will think about context that it can be very customizable because this is just a

00:05:28.370 --> 00:05:29.130
component.

00:05:29.130 --> 00:05:33.620
Let's say if we need to get user with specific I d.

00:05:33.620 --> 00:05:36.790
We can simply pass this user i D as a prop,

00:05:36.790 --> 00:05:42.750
and then we can grab it from props over here and then put our A P I call or any other state

00:05:42.750 --> 00:05:45.340
management related to this particular user i d.

00:05:45.340 --> 00:05:46.100
This is really,

00:05:46.100 --> 00:05:46.720
really cool,

00:05:46.720 --> 00:05:47.660
All right,

00:05:47.660 --> 00:05:53.650
now that we provided all of our components with profile provider without can consume it.

00:05:53.650 --> 00:05:55.560
So how we're able to do that?

00:05:55.560 --> 00:05:59.020
As you remember I mentioned use context hook.

00:05:59.020 --> 00:06:01.160
So inside our private route,

00:06:01.160 --> 00:06:02.840
Instead of doing this,

00:06:02.840 --> 00:06:12.070
we can simply do constant profile equals use context that comes from react package and then

00:06:12.070 --> 00:06:17.790
inside the records inside parent is is we need to specify context that we created.

00:06:17.790 --> 00:06:21.100
It is going to be this profile context,

00:06:21.100 --> 00:06:27.100
and it is really tedious to reference profile context every time we call it with use

00:06:27.100 --> 00:06:27.850
context.

00:06:27.850 --> 00:06:29.180
So to avoid that,

00:06:29.180 --> 00:06:30.980
we can create another hook,

00:06:30.980 --> 00:06:34.350
a rapper for profile context to make it more accessible.

00:06:34.350 --> 00:06:36.340
So from profile contacts Yes,

00:06:36.340 --> 00:06:36.670
file,

00:06:36.670 --> 00:06:38.380
we could export Const.

00:06:38.380 --> 00:06:41.100
Let's say Use profile Hook,

00:06:41.100 --> 00:06:43.500
which is going to be used context,

00:06:43.500 --> 00:06:47.550
profile context just like that.

00:06:47.550 --> 00:06:49.910
And now it says that cannot be called.

00:06:49.910 --> 00:06:50.190
Oh,

00:06:50.190 --> 00:06:50.940
excuse me.

00:06:50.940 --> 00:06:55.990
It is going to be a function that returns whatever this use context returns.

00:06:55.990 --> 00:06:59.110
And this use context returns us a value.

00:06:59.110 --> 00:07:01.410
So from our code,

00:07:01.410 --> 00:07:07.900
we can simply call use profile and let's remove use context from here.

00:07:07.900 --> 00:07:08.850
And right now,

00:07:08.850 --> 00:07:13.500
this profile is going to be this value that we passed over here.

00:07:13.500 --> 00:07:15.940
So now we can check if no profile,

00:07:15.940 --> 00:07:22.150
then we're going to redirect so and let's do exactly the same thing for public profile.

00:07:22.150 --> 00:07:23.430
So from here,

00:07:23.430 --> 00:07:24.380
instead of false,

00:07:24.380 --> 00:07:26.200
we gonna put use profile,

00:07:26.200 --> 00:07:28.520
and that's basically it.

00:07:28.520 --> 00:07:30.920
Now I already launched the app,

00:07:30.920 --> 00:07:32.430
So if I had a fresh,

00:07:32.430 --> 00:07:34.130
nothing has changed.

00:07:34.130 --> 00:07:34.980
As you can see,

00:07:34.980 --> 00:07:37.740
if I try and access the home page,

00:07:37.740 --> 00:07:41.050
I'm being redirected to sign in so nothing has been changed.

00:07:41.050 --> 00:07:41.740
However,

00:07:41.740 --> 00:07:50.310
now we manage our profile as let's a global state that we can access from any component not

00:07:50.310 --> 00:07:51.800
only from public crowd.

00:07:51.800 --> 00:07:59.180
So every component that is inside profile provider can access its context.

00:07:59.180 --> 00:07:59.800
All right,

00:07:59.800 --> 00:08:01.280
with use context,

00:08:01.280 --> 00:08:07.060
Hook and we created a wrapper around use context with profile context,

00:08:07.060 --> 00:08:08.350
which is used profile.

00:08:08.350 --> 00:08:13.160
So now it as even more user friendly for us to access.

00:08:13.160 --> 00:08:13.700
Also,

00:08:13.700 --> 00:08:18.680
it is very important to mention that let's say we created this profile context.

00:08:18.680 --> 00:08:22.450
Or maybe let's imagine we paraded something like counter context.

00:08:22.450 --> 00:08:24.760
Let's say 12345 all right,

00:08:24.760 --> 00:08:26.480
and inside our app.

00:08:26.480 --> 00:08:28.110
Instead of using it like this,

00:08:28.110 --> 00:08:29.680
we use it multiple times.

00:08:29.680 --> 00:08:32.760
So let's say for sign in page we have,

00:08:32.760 --> 00:08:39.170
let's say counter context counter provider like this all right,

00:08:39.170 --> 00:08:41.460
and the same goes for home.

00:08:41.460 --> 00:08:42.850
So we have it like this.

00:08:42.850 --> 00:08:45.270
We now have two different contacts.

00:08:45.270 --> 00:08:47.680
Their definition is the same,

00:08:47.680 --> 00:08:49.180
but they are different.

00:08:49.180 --> 00:08:51.530
So if inside sign in page,

00:08:51.530 --> 00:08:55.440
we let's say try and access context off counter,

00:08:55.440 --> 00:08:56.770
then we will get to one.

00:08:56.770 --> 00:08:57.040
Well,

00:08:57.040 --> 00:08:57.250
you,

00:08:57.250 --> 00:09:00.550
if we try and access the same context with use context,

00:09:00.550 --> 00:09:05.390
hook inside home page but will get another value because they too,

00:09:05.390 --> 00:09:06.970
have different states.

00:09:06.970 --> 00:09:07.490
All right,

00:09:07.490 --> 00:09:13.010
so it's like managing to separate states but with one definition does just to point out

00:09:13.010 --> 00:09:14.270
that it is different.

00:09:14.270 --> 00:09:16.730
So that's basically it in the next video,

00:09:16.730 --> 00:09:17.960
what we're going to do,

00:09:17.960 --> 00:09:25.280
we will continue working with our profile provider and people finally managed our signed in

00:09:25.280 --> 00:09:26.450
firebase user.

00:09:26.450 --> 00:09:27.450
See you there.

