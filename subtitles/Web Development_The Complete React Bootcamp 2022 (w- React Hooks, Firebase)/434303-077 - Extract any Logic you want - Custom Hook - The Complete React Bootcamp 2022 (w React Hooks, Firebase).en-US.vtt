WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.970
Hey there.

00:00:00.970 --> 00:00:01.740
In this video,

00:00:01.740 --> 00:00:04.170
we will continue to work with custom hooks,

00:00:04.170 --> 00:00:07.700
and we're going to add to new more of them.

00:00:07.700 --> 00:00:11.930
So the first hook is going to be about data persistence.

00:00:11.930 --> 00:00:16.770
So whenever we type anything inside the search bar and then refresh the page,

00:00:16.770 --> 00:00:18.920
the text will remain.

00:00:18.920 --> 00:00:22.340
And second Hook is going to be more about reusability,

00:00:22.340 --> 00:00:28.770
and we will extract some logic from the component and put it into Custom hook.

00:00:28.770 --> 00:00:34.490
Let's go so we will place our hooks inside custom hooks togs.

00:00:34.490 --> 00:00:36.250
So here at the bottom,

00:00:36.250 --> 00:00:38.920
we are going to export new function,

00:00:38.920 --> 00:00:40.970
which we will name to use.

00:00:40.970 --> 00:00:42.140
Last query.

00:00:42.140 --> 00:00:48.030
Then let's open home togs and let's see how we manage input State.

00:00:48.030 --> 00:00:53.790
So let's just copy this line of code and put it inside the hook.

00:00:53.790 --> 00:00:57.660
And also this hook will receive one argument,

00:00:57.660 --> 00:01:04.320
which is the key under which data will be stored inside session storage this time.

00:01:04.320 --> 00:01:07.350
So let it be last query by default,

00:01:07.350 --> 00:01:13.060
and let's also import use state into custom hooks doggy s.

00:01:13.060 --> 00:01:13.770
Now,

00:01:13.770 --> 00:01:16.620
instead of just passing empty shrink,

00:01:16.620 --> 00:01:21.400
we will pass the callback function to lazily evaluate the state.

00:01:21.400 --> 00:01:27.890
We did something similar when we used use reducer over here when we passed the third

00:01:27.890 --> 00:01:28.580
argument.

00:01:28.580 --> 00:01:30.720
So why do we need to do so?

00:01:30.720 --> 00:01:37.170
Whenever we perform some computation to set the value for initial state,

00:01:37.170 --> 00:01:41.920
we should use lazy evaluation or this initialization function.

00:01:41.920 --> 00:01:47.540
This is because whenever component updates or renters react,

00:01:47.540 --> 00:01:51.610
will try and recall Kuwait and re compute everything,

00:01:51.610 --> 00:01:53.190
whatever it has inside.

00:01:53.190 --> 00:01:59.200
So if we had this logic right before we set the state,

00:01:59.200 --> 00:02:02.190
then on every subsequent re render,

00:02:02.190 --> 00:02:04.690
this would be recalculated.

00:02:04.690 --> 00:02:07.050
This is why to avoid that,

00:02:07.050 --> 00:02:08.770
we use lazy evaluation.

00:02:08.770 --> 00:02:13.780
It will be calculated on Lee once when the state is initialized.

00:02:13.780 --> 00:02:16.200
So again as before,

00:02:16.200 --> 00:02:17.320
Inside this cold back,

00:02:17.320 --> 00:02:20.870
whatever we return will be set as initial stake.

00:02:20.870 --> 00:02:24.060
Let's copy this logic from here and here.

00:02:24.060 --> 00:02:27.620
Brazil replaced local storage with session storage,

00:02:27.620 --> 00:02:30.170
and instead of returning initial state,

00:02:30.170 --> 00:02:33.280
we're going to return just an empty shrink.

00:02:33.280 --> 00:02:34.200
Right after that,

00:02:34.200 --> 00:02:41.260
we will return input and said input because it is going to be a rapper and it will resemble

00:02:41.260 --> 00:02:43.400
the use state hook.

00:02:43.400 --> 00:02:48.800
But the problem that said input will not right to session storage.

00:02:48.800 --> 00:02:54.280
That's why we need to enhance it curable create our own custom function again.

00:02:54.280 --> 00:02:58.600
That bubble name set persisted input,

00:02:58.600 --> 00:03:01.500
and it will resemble set input.

00:03:01.500 --> 00:03:05.360
So it will receive new state as an argument.

00:03:05.360 --> 00:03:06.650
And inside,

00:03:06.650 --> 00:03:09.090
we will simply call set input,

00:03:09.090 --> 00:03:11.560
and we will pass new state inside.

00:03:11.560 --> 00:03:13.160
But also next to it,

00:03:13.160 --> 00:03:15.220
we will write a two session storage.

00:03:15.220 --> 00:03:23.530
So we gonna tell up said item under key that we passed and Jason dot string If I new state

00:03:23.530 --> 00:03:24.220
all right.

00:03:24.220 --> 00:03:26.270
Now instead of set import,

00:03:26.270 --> 00:03:28.430
eventually we're going to return.

00:03:28.430 --> 00:03:29.920
Set Persisted import.

00:03:29.920 --> 00:03:30.820
All right,

00:03:30.820 --> 00:03:32.820
Seems like our hook is ready.

00:03:32.820 --> 00:03:39.290
Let's go to home togs and instead of fuse state use last query All right,

00:03:39.290 --> 00:03:39.970
also,

00:03:39.970 --> 00:03:46.540
we will remove our argument if we say with Let's go back to the app ineffably open inspect

00:03:46.540 --> 00:03:49.210
than application sessions towards.

00:03:49.210 --> 00:03:50.900
If I type anything,

00:03:50.900 --> 00:03:54.320
I can see that now I have data synchronized,

00:03:54.320 --> 00:03:56.180
and if I refresh the page,

00:03:56.180 --> 00:03:59.670
text remains and everything is stored here.

00:03:59.670 --> 00:04:00.310
All right,

00:04:00.310 --> 00:04:01.560
so it actually worked.

00:04:01.560 --> 00:04:05.350
Now let's move on to our second hook.

00:04:05.350 --> 00:04:07.220
Let's close home loss gs.

00:04:07.220 --> 00:04:08.380
Let's open.

00:04:08.380 --> 00:04:09.040
Show those.

00:04:09.040 --> 00:04:09.520
Yes,

00:04:09.520 --> 00:04:12.110
and here what do we have?

00:04:12.110 --> 00:04:19.620
So we have used reducer use a fact and reducer itself defined so everything is managed here

00:04:19.620 --> 00:04:19.620
.

00:04:19.620 --> 00:04:24.800
Wouldn't it be nice if we could extract this logic to some other place?

00:04:24.800 --> 00:04:26.650
So it becomes reusable,

00:04:26.650 --> 00:04:29.080
even inside other components.

00:04:29.080 --> 00:04:29.560
So,

00:04:29.560 --> 00:04:29.970
yeah,

00:04:29.970 --> 00:04:31.900
we can do this with custom hooks.

00:04:31.900 --> 00:04:37.890
So inside custom hoax dgs file We're going to create new function,

00:04:37.890 --> 00:04:39.800
which we will name.

00:04:39.800 --> 00:04:46.750
Let's say use it show So this hook will receive one argument show I d.

00:04:46.750 --> 00:04:49.080
So we're going to extract,

00:04:49.080 --> 00:04:51.990
use reducer and use effect to the hook.

00:04:51.990 --> 00:04:53.500
So let's copy it.

00:04:53.500 --> 00:04:57.820
Let's remove it from here and paste inside the hook.

00:04:57.820 --> 00:04:59.190
Now let's take a look.

00:04:59.190 --> 00:05:01.400
Women's initial state.

00:05:01.400 --> 00:05:06.060
So let's copy this object from here and remove it,

00:05:06.060 --> 00:05:09.120
and then instead of initial state variable,

00:05:09.120 --> 00:05:11.570
we will put it directly over here.

00:05:11.570 --> 00:05:14.890
Then we also need the reducer itself.

00:05:14.890 --> 00:05:19.480
Let's just copy it and move it to the file.

00:05:19.480 --> 00:05:23.500
Right above we define the hook like that,

00:05:23.500 --> 00:05:25.380
then we don't have a P.

00:05:25.380 --> 00:05:27.450
I get so let's import it.

00:05:27.450 --> 00:05:28.760
And also,

00:05:28.760 --> 00:05:30.080
instead of I d,

00:05:30.080 --> 00:05:33.210
we will use show I d that we pass as an argument.

00:05:33.210 --> 00:05:36.900
So let's replace it and also here at the bottom,

00:05:36.900 --> 00:05:38.750
inside the array off dependencies,

00:05:38.750 --> 00:05:40.700
we will use show I d.

00:05:40.700 --> 00:05:41.620
All right.

00:05:41.620 --> 00:05:43.250
And also,

00:05:43.250 --> 00:05:47.140
we don't want to destruct chur this state over here.

00:05:47.140 --> 00:05:49.640
So we just gonna use state variable.

00:05:49.640 --> 00:05:51.170
And from this hook,

00:05:51.170 --> 00:05:57.960
we are going to return the state so we can destructor it inside the component.

00:05:57.960 --> 00:06:00.370
And we will not return these,

00:06:00.370 --> 00:06:06.800
Padgett because we only use it inside this use effect right now inside show component.

00:06:06.800 --> 00:06:14.050
But will simply called const venerable dis structure our values which is going to be show

00:06:14.050 --> 00:06:16.300
is loading and enter.

00:06:16.300 --> 00:06:24.290
And then we will use our own custom hook use show and inside we will pass show I d that we

00:06:24.290 --> 00:06:26.870
receive from use programs Hook.

00:06:26.870 --> 00:06:28.720
So we're gonna pass i d.

00:06:28.720 --> 00:06:31.130
And here we are done.

00:06:31.130 --> 00:06:33.260
But let me save custom hook.

00:06:33.260 --> 00:06:33.870
Smile.

00:06:33.870 --> 00:06:39.780
Then I'm going to get rid off unused imports over here,

00:06:39.780 --> 00:06:42.420
and it seems like we are ready.

00:06:42.420 --> 00:06:43.540
Let's check it out.

00:06:43.540 --> 00:06:46.360
If I navigate to any show page,

00:06:46.360 --> 00:06:48.980
I can see that nothing has been changed.

00:06:48.980 --> 00:06:52.310
But this is only from the user point of view,

00:06:52.310 --> 00:06:54.050
but from inside the code.

00:06:54.050 --> 00:07:00.480
Now we extracted logic to the custom hook and this is useful because now,

00:07:00.480 --> 00:07:08.070
inside any other component We can simply just use this one line of code to get this show by

00:07:08.070 --> 00:07:09.810
just providing the I.

00:07:09.810 --> 00:07:10.290
D.

00:07:10.290 --> 00:07:11.810
So this is it.

00:07:11.810 --> 00:07:14.750
That's the good time to commit our changes.

00:07:14.750 --> 00:07:17.720
Let's open terminal and let's pour,

00:07:17.720 --> 00:07:20.750
get at everything than get commit.

00:07:20.750 --> 00:07:24.180
Created two new,

00:07:24.180 --> 00:07:30.430
more hooks used last Cleary and use show.

00:07:30.430 --> 00:07:31.030
All right.

00:07:31.030 --> 00:07:32.250
Seems perfect.

00:07:32.250 --> 00:07:33.750
See you in the next one.

