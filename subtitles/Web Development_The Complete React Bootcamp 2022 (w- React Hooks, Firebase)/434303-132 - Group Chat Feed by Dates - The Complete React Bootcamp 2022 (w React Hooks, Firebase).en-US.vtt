WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.980
Hey there in this video mobile group chat messages by date,

00:00:03.980 --> 00:00:10.640
so we will be able to split chat fit into date related messages.

00:00:10.640 --> 00:00:11.200
All right,

00:00:11.200 --> 00:00:15.040
let's never get back to the code and let's see how we're going to approach that.

00:00:15.040 --> 00:00:15.670
So first of all,

00:00:15.670 --> 00:00:19.690
we need some sort of a function that will group our messages by dates.

00:00:19.690 --> 00:00:21.050
So let's create one.

00:00:21.050 --> 00:00:23.330
Let's open helpers togs.

00:00:23.330 --> 00:00:24.800
And here at the bottom,

00:00:24.800 --> 00:00:30.650
let's create new function that who will name group buy It will receive an array as the

00:00:30.650 --> 00:00:31.630
first argument,

00:00:31.630 --> 00:00:36.190
and then it is going to receive grouping key function.

00:00:36.190 --> 00:00:40.710
It is going to be a cold back and let me explain how we will use this girl by function.

00:00:40.710 --> 00:00:42.490
So we're gonna call it like this.

00:00:42.490 --> 00:00:44.730
The first argument we will pass messages,

00:00:44.730 --> 00:00:46.280
array and then grouping.

00:00:46.280 --> 00:00:51.560
Key function is a callback that will receive an item off this array.

00:00:51.560 --> 00:00:53.640
So in our case message item,

00:00:53.640 --> 00:00:57.730
then whatever we return from this callback is going to be our grouping key.

00:00:57.730 --> 00:00:59.450
So in our case,

00:00:59.450 --> 00:01:00.810
it is date.

00:01:00.810 --> 00:01:05.090
So we're going to turn message I term created at something like this.

00:01:05.090 --> 00:01:06.480
Then there's grew by,

00:01:06.480 --> 00:01:13.550
will return us an object where every key is going to be this grouping key that we return

00:01:13.550 --> 00:01:14.230
from this call back.

00:01:14.230 --> 00:01:18.550
So if we return date that it is going to group US messages by date.

00:01:18.550 --> 00:01:24.610
So let's say something like we have date like this and then we will have array off messages

00:01:24.610 --> 00:01:26.550
related to this date and so on,

00:01:26.550 --> 00:01:27.320
and so one.

00:01:27.320 --> 00:01:27.850
Okay,

00:01:27.850 --> 00:01:29.020
I guess that's clear.

00:01:29.020 --> 00:01:30.950
Now let's create that function.

00:01:30.950 --> 00:01:31.930
Let me uncommon,

00:01:31.930 --> 00:01:32.350
Dad,

00:01:32.350 --> 00:01:36.980
and we're gonna use array dot reduce so it don't reduce,

00:01:36.980 --> 00:01:38.320
receives a call back.

00:01:38.320 --> 00:01:42.840
And second argument is the initial state initial value.

00:01:42.840 --> 00:01:45.320
So it is going to be just an object.

00:01:45.320 --> 00:01:52.430
And for the co back first argument is accumulator we're gonna use Let's a result and then

00:01:52.430 --> 00:01:57.970
the current value current item just going to the item okay from every iteration we're gonna

00:01:57.970 --> 00:02:01.770
return result and then we will perform the next thing First,

00:02:01.770 --> 00:02:04.450
we're gonna pour grouping key valuable,

00:02:04.450 --> 00:02:09.180
and we will call grouping key function and we will pass item insight.

00:02:09.180 --> 00:02:09.840
So,

00:02:09.840 --> 00:02:10.430
in that way,

00:02:10.430 --> 00:02:14.050
we will be able to access message item inside this call back.

00:02:14.050 --> 00:02:14.420
Okay,

00:02:14.420 --> 00:02:14.760
Good.

00:02:14.760 --> 00:02:19.780
Now we're gonna check against the Null Valley or non existent valley.

00:02:19.780 --> 00:02:23.930
So if result grouping key property does not exist,

00:02:23.930 --> 00:02:26.330
then we will initialize it as otherwise.

00:02:26.330 --> 00:02:33.070
We will receive a warning or an error if we try to perform something on non existing object

00:02:33.070 --> 00:02:33.070
.

00:02:33.070 --> 00:02:39.250
So we're gonna put result grouping key and then we will quote it as an empty array.

00:02:39.250 --> 00:02:39.880
All right,

00:02:39.880 --> 00:02:40.440
then,

00:02:40.440 --> 00:02:42.280
if this does exist,

00:02:42.280 --> 00:02:48.140
then we're gonna put result grouping key dot push current item and this is it.

00:02:48.140 --> 00:02:49.950
Now we are able to use it.

00:02:49.950 --> 00:02:52.580
Let's open messages,

00:02:52.580 --> 00:02:53.790
index togs,

00:02:53.790 --> 00:02:55.980
and let's find the place where we render messages.

00:02:55.980 --> 00:02:59.080
So right now it is just this map function over here.

00:02:59.080 --> 00:03:02.700
Let's actually copy it and dilated.

00:03:02.700 --> 00:03:04.770
And instead of this map function,

00:03:04.770 --> 00:03:08.590
we're going to our own custom functional render messages.

00:03:08.590 --> 00:03:09.580
Death will create.

00:03:09.580 --> 00:03:15.500
So here lets were const grander messages and it is going to be a function,

00:03:15.500 --> 00:03:17.930
and inside of it will put this message map.

00:03:17.930 --> 00:03:19.510
But let's comment it for now.

00:03:19.510 --> 00:03:24.770
And here we will call group by So let's poor const groups.

00:03:24.770 --> 00:03:27.650
Then we will call group by.

00:03:27.650 --> 00:03:34.310
We will pass messages our state of the first argument and then group in key function so it

00:03:34.310 --> 00:03:37.880
will receive message item and trouble group by dates.

00:03:37.880 --> 00:03:43.730
So in to specify item created at but created ad as to remember,

00:03:43.730 --> 00:03:46.370
it is just a database time stamp.

00:03:46.370 --> 00:03:51.100
It is not a date object that we can use or display inside JavaScript.

00:03:51.100 --> 00:03:54.150
So let's convert it to late object,

00:03:54.150 --> 00:03:59.560
and then we conform at this date object with to date string.

00:03:59.560 --> 00:04:00.070
All right,

00:04:00.070 --> 00:04:06.850
so now we have groups and we need to create elements that we will push and display inside J

00:04:06.850 --> 00:04:08.150
six inside dog.

00:04:08.150 --> 00:04:10.560
So let's create object keys,

00:04:10.560 --> 00:04:14.230
then specify groups and for each method.

00:04:14.230 --> 00:04:19.760
So what is happening here that we're gonna loop over every date,

00:04:19.760 --> 00:04:22.460
every key inside groups object.

00:04:22.460 --> 00:04:27.590
So we're gonna have date over here and for every day.

00:04:27.590 --> 00:04:28.100
First,

00:04:28.100 --> 00:04:31.890
we're going to create items array.

00:04:31.890 --> 00:04:34.900
So let it be let items we will modify.

00:04:34.900 --> 00:04:36.540
And for this items,

00:04:36.540 --> 00:04:37.050
first,

00:04:37.050 --> 00:04:39.100
we're gonna push our first element.

00:04:39.100 --> 00:04:40.770
That is going to be a date.

00:04:40.770 --> 00:04:41.940
L I element.

00:04:41.940 --> 00:04:49.000
So let's create new l I inside rebel displayed date and class name is going to be text

00:04:49.000 --> 00:04:54.280
center margin wouldn't one and pad and also we need to specify key,

00:04:54.280 --> 00:04:55.580
which is going to be date,

00:04:55.580 --> 00:04:57.350
and it is unique within this.

00:04:57.350 --> 00:04:58.320
Groups arrange.

00:04:58.320 --> 00:04:58.900
All right.

00:04:58.900 --> 00:04:59.320
Now,

00:04:59.320 --> 00:05:05.380
we need to also push all messages related to this particular date so we can create new

00:05:05.380 --> 00:05:05.960
messages.

00:05:05.960 --> 00:05:09.400
Every and we're gonna use this map function over here.

00:05:09.400 --> 00:05:15.520
So we're gonna pour groups date to access all messages related to this particular date that

00:05:15.520 --> 00:05:17.780
we're currently iterating over.

00:05:17.780 --> 00:05:23.490
So group ST dot map and we're gonna map every message to message item from here.

00:05:23.490 --> 00:05:25.770
Let's copy it and let's delete it.

00:05:25.770 --> 00:05:27.130
We don't need it anymore,

00:05:27.130 --> 00:05:29.360
So we're gonna map it like that,

00:05:29.360 --> 00:05:30.960
And at the very end,

00:05:30.960 --> 00:05:35.780
we're gonna simply call items darkened cat and then messages,

00:05:35.780 --> 00:05:36.530
All right?

00:05:36.530 --> 00:05:38.370
And this is actually it.

00:05:38.370 --> 00:05:40.140
And at the end of this function,

00:05:40.140 --> 00:05:41.790
we're gonna return items,

00:05:41.790 --> 00:05:45.260
and they will be rendered to the dumb.

00:05:45.260 --> 00:05:48.650
So it says that items is never resigned.

00:05:48.650 --> 00:05:49.170
All right,

00:05:49.170 --> 00:05:50.630
so let's put const,

00:05:50.630 --> 00:05:52.650
Let's save it and let's take a look.

00:05:52.650 --> 00:05:53.180
Now,

00:05:53.180 --> 00:05:54.250
if we navigate,

00:05:54.250 --> 00:05:57.150
I don't see any message.

00:05:57.150 --> 00:06:00.560
Let me try slightly different syntax.

00:06:00.560 --> 00:06:01.690
Now,

00:06:01.690 --> 00:06:03.300
if we're fresh right,

00:06:03.300 --> 00:06:04.450
we can have Aikens.

00:06:04.450 --> 00:06:04.820
Okay,

00:06:04.820 --> 00:06:07.380
so let's use that one instead of can cat.

00:06:07.380 --> 00:06:12.490
So what we're doing here with spread all our every items into push.

00:06:12.490 --> 00:06:16.370
So they're treated as separate arguments to push.

00:06:16.370 --> 00:06:19.310
So instead of passing cower messages like that,

00:06:19.310 --> 00:06:20.850
we passed them like that.

00:06:20.850 --> 00:06:23.290
12345 All right,

00:06:23.290 --> 00:06:27.500
so this is what this spread operator does in this case.

00:06:27.500 --> 00:06:27.700
Okay,

00:06:27.700 --> 00:06:28.650
so now we have,

00:06:28.650 --> 00:06:29.120
let's say,

00:06:29.120 --> 00:06:29.960
Thursday,

00:06:29.960 --> 00:06:32.660
June 18 if I put hello.

00:06:32.660 --> 00:06:35.750
Now I have June 19 so it actually works.

00:06:35.750 --> 00:06:38.970
And now we have this pretty little neat grouping.

00:06:38.970 --> 00:06:39.630
All right,

00:06:39.630 --> 00:06:41.020
so this is it.

00:06:41.020 --> 00:06:42.880
And I guess we're done here.

00:06:42.880 --> 00:06:44.750
Let's finish our video.

00:06:44.750 --> 00:06:45.680
Let's pour,

00:06:45.680 --> 00:06:46.850
get everything,

00:06:46.850 --> 00:06:48.150
then you get a bit.

00:06:48.150 --> 00:06:55.200
And let's specify grouped messages by dates for effect.

00:06:55.200 --> 00:06:56.600
See you in the next one.

