WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.960
Hi, welcome to the third part of good series.

00:00:03.960 --> 00:00:05.415
In the last part,

00:00:05.415 --> 00:00:07.215
we've successfully deployed

00:00:07.215 --> 00:00:10.935
our local good project to GitHub.

00:00:10.935 --> 00:00:12.585
And we know what GitHub is.

00:00:12.585 --> 00:00:15.645
It is a hosting platform for

00:00:15.645 --> 00:00:17.940
collaboration and we use GitHub to make

00:00:17.940 --> 00:00:20.940
upper project as portable as possible.

00:00:20.940 --> 00:00:22.950
In this part, we're going to discover

00:00:22.950 --> 00:00:27.015
these main concepts of good cold branches.

00:00:27.015 --> 00:00:28.830
And we're going to talk how we're able

00:00:28.830 --> 00:00:31.345
to collaborate on GitHub.

00:00:31.345 --> 00:00:32.330
Let's go.

00:00:32.330 --> 00:00:35.465
First of all, let's talk about branches.

00:00:35.465 --> 00:00:37.940
This mysterious master branch

00:00:37.940 --> 00:00:39.905
was here from the very beginning.

00:00:39.905 --> 00:00:41.210
But what does it mean?

00:00:41.210 --> 00:00:44.360
If we're going to type git branch in the terminal,

00:00:44.360 --> 00:00:47.450
we will see you will have only master,

00:00:47.450 --> 00:00:51.410
but we're able to create as many branches as we want.

00:00:51.410 --> 00:00:57.229
So branch is just that another copy of our project.

00:00:57.229 --> 00:00:59.330
Let's look at that through an example.

00:00:59.330 --> 00:01:01.085
So let's create a new branch.

00:01:01.085 --> 00:01:02.120
To create a new branch,

00:01:02.120 --> 00:01:06.425
we have to type in git checkout than

00:01:06.425 --> 00:01:08.825
minus b and then

00:01:08.825 --> 00:01:11.555
the name of branch that we want to create,

00:01:11.555 --> 00:01:15.410
let's call it my dash feature.

00:01:15.410 --> 00:01:17.660
You can see switch to a new branch.

00:01:17.660 --> 00:01:21.035
My feature, again, I type git branch.

00:01:21.035 --> 00:01:25.955
I have master and I have my feature and a set of master.

00:01:25.955 --> 00:01:27.485
I see my feature now,

00:01:27.485 --> 00:01:31.070
this is because this is my active branch at this moment.

00:01:31.070 --> 00:01:34.640
So what you see here is your currently active branch.

00:01:34.640 --> 00:01:37.265
Now, what is the difference right now,

00:01:37.265 --> 00:01:39.965
these two branches are equal,

00:01:39.965 --> 00:01:41.930
but suppose that I want to

00:01:41.930 --> 00:01:45.395
develop a new feature into my app,

00:01:45.395 --> 00:01:49.670
but I don't want to touch my main code.

00:01:49.670 --> 00:01:52.070
My main code stays unchanged,

00:01:52.070 --> 00:01:54.530
but I wanted to develop a new feature.

00:01:54.530 --> 00:01:56.855
This is where branches come in.

00:01:56.855 --> 00:01:59.150
So my master branch contains

00:01:59.150 --> 00:02:03.635
my latest app to the code that is deployed to production.

00:02:03.635 --> 00:02:04.715
It works right now.

00:02:04.715 --> 00:02:07.865
And at the same time I wanted to develop a new feature.

00:02:07.865 --> 00:02:10.940
So I create a new branch called my feature,

00:02:10.940 --> 00:02:14.510
and now I start to develop on that new branch.

00:02:14.510 --> 00:02:17.450
Suppose that I'm on my feature branch,

00:02:17.450 --> 00:02:19.130
I create a new commit.

00:02:19.130 --> 00:02:22.235
My new feature is going to be a new console log,

00:02:22.235 --> 00:02:25.415
which is going to be hello three.

00:02:25.415 --> 00:02:26.600
Alright?

00:02:26.600 --> 00:02:28.760
Now I commit these changes.

00:02:28.760 --> 00:02:30.860
First I push to the stage state

00:02:30.860 --> 00:02:33.425
and then I do a new commit.

00:02:33.425 --> 00:02:38.780
I call it developed my new feature.

00:02:38.780 --> 00:02:40.460
Great.

00:02:40.460 --> 00:02:44.045
If I do git log to view the history,

00:02:44.045 --> 00:02:48.845
I can see my previous history and then my new commit,

00:02:48.845 --> 00:02:50.240
develop my new feature.

00:02:50.240 --> 00:02:53.150
Awesome, but how is it useful?

00:02:53.150 --> 00:02:57.395
Now, if i need for some reason to

00:02:57.395 --> 00:03:01.265
switch back to my main code and to see what was there.

00:03:01.265 --> 00:03:04.370
I'm now able to switch between branches.

00:03:04.370 --> 00:03:06.890
So I put git branch to see

00:03:06.890 --> 00:03:09.230
what branches do a half and then I can

00:03:09.230 --> 00:03:14.360
do git checkout master to switch between branches,

00:03:14.360 --> 00:03:17.465
but this time without minus B flag.

00:03:17.465 --> 00:03:19.595
Now I'm switched to branch master.

00:03:19.595 --> 00:03:22.130
And you can see how this change dr

00:03:22.130 --> 00:03:25.220
made on my feature branch has disappeared.

00:03:25.220 --> 00:03:29.750
This is because that change is part of my feature branch.

00:03:29.750 --> 00:03:34.655
It has no relation to master because if I put a git log,

00:03:34.655 --> 00:03:35.960
you will see I don't have

00:03:35.960 --> 00:03:38.870
this commit that I've freed it on my feature branch,

00:03:38.870 --> 00:03:41.570
on master branch, it's completely different.

00:03:41.570 --> 00:03:43.145
So as you can see,

00:03:43.145 --> 00:03:46.700
Master and my feature are some sort of

00:03:46.700 --> 00:03:50.345
a copies of my project that exist at the same time,

00:03:50.345 --> 00:03:52.924
I can manipulate those branches

00:03:52.924 --> 00:03:54.860
to develop different features.

00:03:54.860 --> 00:03:59.435
Now, how can I actually utilize this branch concept

00:03:59.435 --> 00:04:01.745
to make it useful for me or

00:04:01.745 --> 00:04:04.460
for people who I collaborate with.

00:04:04.460 --> 00:04:06.260
So suppose that there are

00:04:06.260 --> 00:04:09.890
10 people that work on the same project and to invite

00:04:09.890 --> 00:04:12.440
people to a repository and have to go

00:04:12.440 --> 00:04:15.590
to settings, manage access.

00:04:15.590 --> 00:04:18.860
And here you will usually invite collaborators.

00:04:18.860 --> 00:04:20.480
So people who have access to

00:04:20.480 --> 00:04:22.700
that private repository will be able

00:04:22.700 --> 00:04:24.934
to do changes to that repository.

00:04:24.934 --> 00:04:26.225
But if the, all,

00:04:26.225 --> 00:04:29.000
if all people working on a project going to push to

00:04:29.000 --> 00:04:31.805
the same master branch or main branch.

00:04:31.805 --> 00:04:34.295
This is going to be slightly a mess.

00:04:34.295 --> 00:04:36.380
We want to make it as structured,

00:04:36.380 --> 00:04:38.405
arised as possible to keep

00:04:38.405 --> 00:04:42.830
our good history clean, readable, and maintainable.

00:04:42.830 --> 00:04:45.185
And to do that, we will utilize branches.

00:04:45.185 --> 00:04:49.550
Suppose that our main code is on master branch,

00:04:49.550 --> 00:04:52.430
which has latest commit added hello

00:04:52.430 --> 00:04:55.835
to I am another person sitting somewhere out there.

00:04:55.835 --> 00:04:59.780
I'm a collaborator and I create a new branch,

00:04:59.780 --> 00:05:03.485
my feature that I already created,

00:05:03.485 --> 00:05:05.060
and I did some change.

00:05:05.060 --> 00:05:08.645
I want to push those changes to GitHub,

00:05:08.645 --> 00:05:12.695
and I want to merge those changes into the main code,

00:05:12.695 --> 00:05:16.475
which is located again on the master branch.

00:05:16.475 --> 00:05:20.285
So what I need to do, I need to first push that branch.

00:05:20.285 --> 00:05:21.380
To GitHub.

00:05:21.380 --> 00:05:23.990
To do that, I will do git push

00:05:23.990 --> 00:05:27.769
origin because this is our aliens for the repository.

00:05:27.769 --> 00:05:31.740
We remember that git push origin, my feature.

00:05:31.870 --> 00:05:34.130
Let's wait a second.

00:05:34.130 --> 00:05:37.550
And now it's pushed and it even suggests us

00:05:37.550 --> 00:05:39.230
create a pull request for

00:05:39.230 --> 00:05:41.375
my feature on GitHub by visiting.

00:05:41.375 --> 00:05:43.640
We're going to talk about that in a second.

00:05:43.640 --> 00:05:45.530
But if we go back to GitHub,

00:05:45.530 --> 00:05:47.660
we already see that my feature

00:05:47.660 --> 00:05:50.285
had recent pushes less than a minute ago.

00:05:50.285 --> 00:05:52.280
Compare and pull request.

00:05:52.280 --> 00:05:53.780
If I refresh the page,

00:05:53.780 --> 00:05:56.840
now here I'll see two branches.

00:05:56.840 --> 00:05:57.980
If I click here,

00:05:57.980 --> 00:06:02.420
I have default branch master and I have your branches,

00:06:02.420 --> 00:06:04.520
my feature update it for minutes ago by

00:06:04.520 --> 00:06:07.610
me and main branch of the CEU hours ago by me.

00:06:07.610 --> 00:06:10.235
And here I can see if I hover,

00:06:10.235 --> 00:06:13.145
I will see one commit ahead of master.

00:06:13.145 --> 00:06:15.770
Now, in order to push

00:06:15.770 --> 00:06:17.960
those changes that I have on

00:06:17.960 --> 00:06:20.554
my feature branch into master,

00:06:20.554 --> 00:06:24.230
I need to create a pull request directly on GitHub.

00:06:24.230 --> 00:06:28.790
A pull request is that developer request when you ask

00:06:28.790 --> 00:06:31.730
project maintainers to merge

00:06:31.730 --> 00:06:34.025
your branch into the main branch.

00:06:34.025 --> 00:06:36.830
So basically you want to contribute and you would

00:06:36.830 --> 00:06:39.890
like to push those changes to the main code.

00:06:39.890 --> 00:06:42.890
We're going to click on new pull request.

00:06:42.890 --> 00:06:45.530
We will name it developed.

00:06:45.530 --> 00:06:47.915
My new feature will leave a comment that,

00:06:47.915 --> 00:06:51.650
hey, I just did that great change.

00:06:51.650 --> 00:06:53.315
And here we select that.

00:06:53.315 --> 00:06:55.625
We want to push,

00:06:55.625 --> 00:07:00.275
we want to merge my feature branch into master.

00:07:00.275 --> 00:07:04.670
These are all the commits that I've made on that branch.

00:07:04.670 --> 00:07:07.235
I can create as many commits as possible.

00:07:07.235 --> 00:07:11.885
For example, if I add another commit, maybe console.log,

00:07:11.885 --> 00:07:16.969
hello for, again, I stage those changes,

00:07:16.969 --> 00:07:20.420
I commit them again, new change.

00:07:20.420 --> 00:07:25.655
Again, I push, Good Push origin, my feature.

00:07:25.655 --> 00:07:28.265
The branch will be updated.

00:07:28.265 --> 00:07:30.530
Even if I created a pull request already,

00:07:30.530 --> 00:07:31.880
I haven't created it yet.

00:07:31.880 --> 00:07:33.950
But anyways, so I'm going to click

00:07:33.950 --> 00:07:36.455
on create, pull, request.

00:07:36.455 --> 00:07:38.780
And let's see what do we have here.

00:07:38.780 --> 00:07:42.094
So first we see Checking ability to merge

00:07:42.094 --> 00:07:45.335
because there might be conflicts in those changes.

00:07:45.335 --> 00:07:47.750
But since we don't have any conflicts, it's fine.

00:07:47.750 --> 00:07:51.125
So we will see our pull requests over here.

00:07:51.125 --> 00:07:53.330
So now what is going to happen?

00:07:53.330 --> 00:07:54.935
I'm that person that sitting

00:07:54.935 --> 00:07:57.005
over there creating that pull request,

00:07:57.005 --> 00:08:01.370
then project leader or project maintainer comes

00:08:01.370 --> 00:08:03.530
in and that person responsible

00:08:03.530 --> 00:08:06.050
for pull request goes here and it sees that,

00:08:06.050 --> 00:08:10.145
hey, that person wanted to merge those changes.

00:08:10.145 --> 00:08:12.395
So he clicks on that pull request.

00:08:12.395 --> 00:08:15.335
Okay, great, That guy did that great change. Oh my god.

00:08:15.335 --> 00:08:17.480
I want to merge those changes.

00:08:17.480 --> 00:08:21.305
So that person merges that pull request.

00:08:21.305 --> 00:08:23.615
So he selects one of the options here.

00:08:23.615 --> 00:08:25.370
Let me click on merge pull request

00:08:25.370 --> 00:08:26.915
and let's see what is going to happen.

00:08:26.915 --> 00:08:29.630
So merge pull requests from that person,

00:08:29.630 --> 00:08:31.475
that branch developed my new feature,

00:08:31.475 --> 00:08:35.765
confirm merge, merging, poll request,

00:08:35.765 --> 00:08:39.125
successful emerged and closed delete branch.

00:08:39.125 --> 00:08:41.300
We're going to click on that branch

00:08:41.300 --> 00:08:43.655
was deleted, pull requests, merge.

00:08:43.655 --> 00:08:46.790
If I go back to my project here,

00:08:46.790 --> 00:08:50.240
I can see merge pull requests from Sherlock 16,

00:08:50.240 --> 00:08:53.165
my feature, and it is now part of good history.

00:08:53.165 --> 00:08:55.189
If I click on commits,

00:08:55.189 --> 00:08:58.175
I will see that first I have

00:08:58.175 --> 00:09:02.030
these two commits that I had on my feature branch.

00:09:02.030 --> 00:09:03.845
And on top of that I have

00:09:03.845 --> 00:09:06.349
another commit merge pull request.

00:09:06.349 --> 00:09:09.320
Now all these changes that were on

00:09:09.320 --> 00:09:11.210
my feature branch were

00:09:11.210 --> 00:09:14.630
merged into the main code and they're available here.

00:09:14.630 --> 00:09:16.010
This is how people usually

00:09:16.010 --> 00:09:18.425
contribute through pull request one,

00:09:18.425 --> 00:09:20.825
all of these changes are on GitHub.

00:09:20.825 --> 00:09:23.675
We will have discrepancies because we have

00:09:23.675 --> 00:09:26.690
seven commits on master branch,

00:09:26.690 --> 00:09:30.815
on remote repository, on GitHub in our local project,

00:09:30.815 --> 00:09:33.785
we're still having my feature branch.

00:09:33.785 --> 00:09:39.094
And if we go to master by using git checkout master.

00:09:39.094 --> 00:09:41.345
And if we do git log,

00:09:41.345 --> 00:09:44.900
we see the latest commit here is added hello two,

00:09:44.900 --> 00:09:47.195
while here it is,

00:09:47.195 --> 00:09:48.920
merge pull requests to one.

00:09:48.920 --> 00:09:51.830
To fix that, we have to download

00:09:51.830 --> 00:09:54.500
the latest changes from GitHub into

00:09:54.500 --> 00:09:57.935
our local code to synchronize the history.

00:09:57.935 --> 00:09:59.240
In order to do that,

00:09:59.240 --> 00:10:01.685
the command is very similar to git push,

00:10:01.685 --> 00:10:03.560
but instead of git push,

00:10:03.560 --> 00:10:06.095
we will use git pull.

00:10:06.095 --> 00:10:09.620
So again, we get pull than

00:10:09.620 --> 00:10:14.090
the repository areas and then the name of branch to pull.

00:10:14.090 --> 00:10:17.840
So we want to pull master from origin.

00:10:17.840 --> 00:10:19.610
I'm going to execute it.

00:10:19.610 --> 00:10:23.735
And you will see that great, something happened.

00:10:23.735 --> 00:10:25.520
And as you can see,

00:10:25.520 --> 00:10:27.440
now, all my changes are here.

00:10:27.440 --> 00:10:29.660
The latest commit introduced,

00:10:29.660 --> 00:10:31.325
hello four and I,

00:10:31.325 --> 00:10:33.875
and now I have hello for in my code.

00:10:33.875 --> 00:10:37.610
Pretty cool to verify that I do git log again.

00:10:37.610 --> 00:10:39.845
And you see that I have

00:10:39.845 --> 00:10:42.650
multiple requests bomb from Sherlock 16,

00:10:42.650 --> 00:10:44.825
by the way, to exit this state when,

00:10:44.825 --> 00:10:46.955
when good history overflows,

00:10:46.955 --> 00:10:48.230
you can just type

00:10:48.230 --> 00:10:52.130
q and it will bring you to the terminal.

00:10:52.130 --> 00:10:56.180
All right, I would say that this is probably it,

00:10:56.180 --> 00:11:00.920
this is how people use GitHub to collaborate.

00:11:00.920 --> 00:11:03.830
The model would be a little bit different if it is

00:11:03.830 --> 00:11:05.840
a public repository and you want to

00:11:05.840 --> 00:11:08.255
contribute to an open source project.

00:11:08.255 --> 00:11:11.465
But we not going to cover that in this series.

00:11:11.465 --> 00:11:14.390
This is more than enough for us to understand how Git

00:11:14.390 --> 00:11:17.660
works and how people do collaborate with each other.

00:11:17.660 --> 00:11:19.130
So again, I'm going to repeat

00:11:19.130 --> 00:11:21.950
the flow one more time usually.

00:11:21.950 --> 00:11:23.555
And if you wanted to create

00:11:23.555 --> 00:11:26.239
a new change and you're working on a project.

00:11:26.239 --> 00:11:30.605
First, you create a new branch by using git

00:11:30.605 --> 00:11:35.350
checkout minus b and the name of branch,

00:11:35.350 --> 00:11:37.015
it can be anything.

00:11:37.015 --> 00:11:40.180
Alright, so these copy,

00:11:40.180 --> 00:11:43.615
this new branch will be created from the branch

00:11:43.615 --> 00:11:47.050
that was active at the moment when you run that command.

00:11:47.050 --> 00:11:49.840
So these branch now will contain

00:11:49.840 --> 00:11:51.310
all the commits that you've

00:11:51.310 --> 00:11:53.680
had when you run this command,

00:11:53.680 --> 00:11:56.800
okay, you keep developing conduct branch,

00:11:56.800 --> 00:12:00.535
do as many commits as you need to complete the feature.

00:12:00.535 --> 00:12:04.570
Then you push that branch to GitHub by using good Push.

00:12:04.570 --> 00:12:08.125
Then it appears on the repository.

00:12:08.125 --> 00:12:10.570
Then you go to your pull requests and

00:12:10.570 --> 00:12:12.730
you create a new pull request to

00:12:12.730 --> 00:12:14.800
merge that branch that you've

00:12:14.800 --> 00:12:17.690
just published on GitHub into the main code,

00:12:17.690 --> 00:12:19.415
into the main branch.

00:12:19.415 --> 00:12:22.550
And then a responsible person will come and see that,

00:12:22.550 --> 00:12:23.840
Hey, that guy wants to

00:12:23.840 --> 00:12:25.625
merge that branch into the main code.

00:12:25.625 --> 00:12:29.240
And once this pull request is merged or accepted,

00:12:29.240 --> 00:12:31.835
your changes will be merged into the main code.

00:12:31.835 --> 00:12:35.014
After that, everybody who's working on a project,

00:12:35.014 --> 00:12:37.940
they will be required to pull

00:12:37.940 --> 00:12:39.950
the latest changes from

00:12:39.950 --> 00:12:43.535
the main branch by using git pull command.

00:12:43.535 --> 00:12:45.935
And that's it. This is the basic flow of

00:12:45.935 --> 00:12:48.469
Git and GitHub collaboration congrats.

00:12:48.469 --> 00:12:51.905
I think this is our finished for good series,

00:12:51.905 --> 00:12:55.140
and I'm gonna see you in the next one.
