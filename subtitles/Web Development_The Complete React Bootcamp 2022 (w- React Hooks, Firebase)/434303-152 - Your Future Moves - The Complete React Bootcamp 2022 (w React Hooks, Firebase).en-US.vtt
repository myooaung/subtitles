WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.520
Hello.

00:00:01.520 --> 00:00:05.080
Let's talk about your next steps after discourse.

00:00:05.080 --> 00:00:07.740
There is no certain Web developer roadmap,

00:00:07.740 --> 00:00:11.050
but here are my suggestions and recommendations.

00:00:11.050 --> 00:00:12.220
First of all,

00:00:12.220 --> 00:00:13.800
learn typescript.

00:00:13.800 --> 00:00:16.220
It is a language built on top of JavaScript.

00:00:16.220 --> 00:00:18.450
It brings type system to the project,

00:00:18.450 --> 00:00:20.030
and at the end of the day,

00:00:20.030 --> 00:00:22.150
it will increase code reliability.

00:00:22.150 --> 00:00:28.870
Google four React typescript articles and start with these integrated into a simple react

00:00:28.870 --> 00:00:32.120
project to understand why it is amazing.

00:00:32.120 --> 00:00:34.120
Then take a look at re ducks.

00:00:34.120 --> 00:00:35.920
You already know the use.

00:00:35.920 --> 00:00:41.760
Reducer Hook Read Acts is a global state management library that uses the same approach as

00:00:41.760 --> 00:00:42.650
used reducer.

00:00:42.650 --> 00:00:44.140
It has a learning curve,

00:00:44.140 --> 00:00:47.180
but with react hooks and redox to kid,

00:00:47.180 --> 00:00:49.290
Redox has become more comprehensive.

00:00:49.290 --> 00:00:52.020
Lots of tutorials and forced ease Redox,

00:00:52.020 --> 00:00:54.130
but most of the time you don't need it.

00:00:54.130 --> 00:00:55.240
At the same time,

00:00:55.240 --> 00:00:59.120
it will be a really good practice to increase your value as a developer.

00:00:59.120 --> 00:01:03.820
Google for any article about modern reduction with three ducks toolkit.

00:01:03.820 --> 00:01:06.550
If you want to grow as a react developer,

00:01:06.550 --> 00:01:11.520
you must definitely start looking towards next GS and Gatsby.

00:01:11.520 --> 00:01:14.580
These two are frameworks built on top of react,

00:01:14.580 --> 00:01:17.750
and they both intended for server side rendering.

00:01:17.750 --> 00:01:19.640
Amazing eco system,

00:01:19.640 --> 00:01:20.960
good tutorials.

00:01:20.960 --> 00:01:26.210
They have everything to give you as comfortable as possible development and force yourself

00:01:26.210 --> 00:01:28.570
to build an A p I with no GS,

00:01:28.570 --> 00:01:31.220
no Jess knowledge is required everywhere,

00:01:31.220 --> 00:01:35.050
whether it is a JavaScript back end or just background script.

00:01:35.050 --> 00:01:39.500
Find any article on how to set up express GS and no GS.

00:01:39.500 --> 00:01:45.150
Do it yourself that increased that knowledge by doing more practice at the end of the day.

00:01:45.150 --> 00:01:48.330
Learn about testing when making you changes.

00:01:48.330 --> 00:01:51.710
To decode it is important not to break anything.

00:01:51.710 --> 00:01:54.960
That's why tests exist with modern tools.

00:01:54.960 --> 00:01:57.630
Testing is very simplified and enjoyable.

00:01:57.630 --> 00:01:59.050
Testing is important,

00:01:59.050 --> 00:02:00.390
but more importantly,

00:02:00.390 --> 00:02:03.370
is to test on Lee what actually needs to be tested.

00:02:03.370 --> 00:02:08.620
Google For any article related to jest or enzyme react testing.

00:02:08.620 --> 00:02:12.090
Read more about security off Web application,

00:02:12.090 --> 00:02:14.450
especially about Jason Webb tokens,

00:02:14.450 --> 00:02:16.500
cookies and local storage.

00:02:16.500 --> 00:02:18.980
Protecting backend is also a thing,

00:02:18.980 --> 00:02:21.650
but for that start lowering togs,

00:02:21.650 --> 00:02:24.230
no SQL databases such as Mongo,

00:02:24.230 --> 00:02:26.340
DB or firebase are easy,

00:02:26.340 --> 00:02:29.530
but they like powerful queries and structures when building.

00:02:29.530 --> 00:02:29.860
And no,

00:02:29.860 --> 00:02:32.620
she has back and wisely decide on the DB.

00:02:32.620 --> 00:02:36.950
Ask your databases are more preferable at large scale pose dress.

00:02:36.950 --> 00:02:40.660
Ask you L and Mongo db are quite popular nowadays.

00:02:40.660 --> 00:02:43.690
More attention is also given to graft ul.

00:02:43.690 --> 00:02:48.920
Once you feel comfortable with no chess and rest AP eyes start thinking about graft.

00:02:48.920 --> 00:02:54.310
You'll It is more flexible when there are lots of request with dynamic data shape Warren

00:02:54.310 --> 00:02:58.650
Cloud Computing and development off wraps using cloud services,

00:02:58.650 --> 00:03:01.540
it will not change the underlying development stack,

00:03:01.540 --> 00:03:02.440
for example,

00:03:02.440 --> 00:03:04.310
React and note GS,

00:03:04.310 --> 00:03:08.560
but it will give you services that allow you to deploy and manage the APP.

00:03:08.560 --> 00:03:13.140
Serverless deployment or cloud storage are examples of cloud services.

00:03:13.140 --> 00:03:16.250
Take a look at popular cloud providers and choose one.

00:03:16.250 --> 00:03:22.380
Make everything automated with continuous integration and continues delivery continues.

00:03:22.380 --> 00:03:25.890
Delivery allows it to automate the deployment process.

00:03:25.890 --> 00:03:26.630
For example,

00:03:26.630 --> 00:03:28.640
when you push a new change and get up,

00:03:28.640 --> 00:03:31.940
the APP will be deployed automatically continues.

00:03:31.940 --> 00:03:35.150
Integration goes before continues delivery.

00:03:35.150 --> 00:03:40.320
It basically defines the model off new code Push to the main code.

00:03:40.320 --> 00:03:43.280
This topic is not that easy to understand.

00:03:43.280 --> 00:03:47.870
So feel free to read any article and have a lot of questions.

00:03:47.870 --> 00:03:50.210
These are my recommendations.

00:03:50.210 --> 00:03:52.560
Feel free to choose your own direction.

00:03:52.560 --> 00:03:54.050
See you next time

