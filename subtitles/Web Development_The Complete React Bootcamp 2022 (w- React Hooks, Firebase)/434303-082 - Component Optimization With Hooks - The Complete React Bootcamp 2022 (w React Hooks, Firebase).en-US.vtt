WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.790
Hey,

00:00:00.790 --> 00:00:01.530
welcome.

00:00:01.530 --> 00:00:04.790
Right now our application is up and running.

00:00:04.790 --> 00:00:06.450
Everything works fine,

00:00:06.450 --> 00:00:09.980
but our components are not optimized.

00:00:09.980 --> 00:00:10.380
What?

00:00:10.380 --> 00:00:10.650
I mean?

00:00:10.650 --> 00:00:11.250
Why that?

00:00:11.250 --> 00:00:12.610
Let's take a look.

00:00:12.610 --> 00:00:14.090
Let's open our app.

00:00:14.090 --> 00:00:15.780
Lets start the local server.

00:00:15.780 --> 00:00:18.180
And then let's open home togs.

00:00:18.180 --> 00:00:20.470
What kind of components do have insight?

00:00:20.470 --> 00:00:21.170
First,

00:00:21.170 --> 00:00:22.970
we have main page layout.

00:00:22.970 --> 00:00:24.190
Let's open it.

00:00:24.190 --> 00:00:27.690
And then from here we can see we have title and loves.

00:00:27.690 --> 00:00:29.310
So let's open title.

00:00:29.310 --> 00:00:34.040
And here we're going to put simple council log where we will type.

00:00:34.040 --> 00:00:40.750
Just render to inspect how many times the title component is being rendered on the webpage

00:00:40.750 --> 00:00:40.750
.

00:00:40.750 --> 00:00:45.070
Let's inspect go to council and on the first render,

00:00:45.070 --> 00:00:47.570
we will see that we have only one comes a look.

00:00:47.570 --> 00:00:48.300
But now,

00:00:48.300 --> 00:00:51.710
whenever I type something inside the sore Jabbar,

00:00:51.710 --> 00:00:53.650
we will see a lot of consul logs.

00:00:53.650 --> 00:00:56.680
So whenever our short bar is updated,

00:00:56.680 --> 00:01:00.670
the title is also being re rendered and updated.

00:01:00.670 --> 00:01:08.310
This is happening because of the flocks architecture that react has so whatever is updated

00:01:08.310 --> 00:01:14.100
inside home component in the state or something changes all its Children.

00:01:14.100 --> 00:01:19.170
Components that come insight will also be updated were re rendered,

00:01:19.170 --> 00:01:24.990
so the title component because it is here under main page layout.

00:01:24.990 --> 00:01:30.080
So what we can do to prevent it react has this tool,

00:01:30.080 --> 00:01:31.840
which is mammal,

00:01:31.840 --> 00:01:38.420
and it is a function and that will try to optimize cases like that to prevent components

00:01:38.420 --> 00:01:40.590
from unnecessary re vendors.

00:01:40.590 --> 00:01:43.270
So before we export this component,

00:01:43.270 --> 00:01:49.410
we will slim plea rapids around this memo function and what dysfunctional will do.

00:01:49.410 --> 00:01:56.080
It will try to compare previous props that are passed to these components to current props

00:01:56.080 --> 00:01:57.460
or to the next probes.

00:01:57.460 --> 00:01:59.370
And if they are the same,

00:01:59.370 --> 00:02:01.700
the component will not be rendered.

00:02:01.700 --> 00:02:03.110
Let's say what right now,

00:02:03.110 --> 00:02:04.720
now we have one,

00:02:04.720 --> 00:02:05.390
Virender.

00:02:05.390 --> 00:02:08.020
And if I tried and type something,

00:02:08.020 --> 00:02:11.740
I can see that I still have only one consul.

00:02:11.740 --> 00:02:13.570
Luck so would actually work,

00:02:13.570 --> 00:02:17.930
and it does only shallow comparison off the props.

00:02:17.930 --> 00:02:26.640
It means that objects will not be compared because objects are not compared by value and we

00:02:26.640 --> 00:02:28.710
will take a look at that just in a moment.

00:02:28.710 --> 00:02:33.340
Let's also perform optimization is with Mama for other components.

00:02:33.340 --> 00:02:35.930
So inside main page layout,

00:02:35.930 --> 00:02:37.850
we also have knobs,

00:02:37.850 --> 00:02:39.700
so let's open knobs.

00:02:39.700 --> 00:02:45.880
And here let's also import mammal and wrap nasty yes,

00:02:45.880 --> 00:02:48.730
around Mama just like that.

00:02:48.730 --> 00:02:53.200
So now we ensure that our component will be rendered it only once.

00:02:53.200 --> 00:02:56.440
All right now inside main specially out.

00:02:56.440 --> 00:02:58.090
We have no more components.

00:02:58.090 --> 00:02:59.700
So we are done here.

00:02:59.700 --> 00:03:05.690
Let's remove this consular from title Gs and let's take a look inside home togs.

00:03:05.690 --> 00:03:08.150
What other components do we have here?

00:03:08.150 --> 00:03:10.340
We have custom radio.

00:03:10.340 --> 00:03:11.530
Let's open it.

00:03:11.530 --> 00:03:12.680
And also,

00:03:12.680 --> 00:03:13.870
let's put this Consul,

00:03:13.870 --> 00:03:14.760
Look over here.

00:03:14.760 --> 00:03:16.650
We're gonna put render.

00:03:16.650 --> 00:03:23.720
Now we can see we have only two consul logs because we have only two radio buttons.

00:03:23.720 --> 00:03:26.520
But if I change in the state,

00:03:26.520 --> 00:03:28.210
it is being updated.

00:03:28.210 --> 00:03:34.380
So let's import mammal and then we will wrap it around.

00:03:34.380 --> 00:03:35.220
Exported,

00:03:35.220 --> 00:03:38.190
value exported component just like that.

00:03:38.190 --> 00:03:43.910
Now let's take a look if it really work now we have again to counsel logs.

00:03:43.910 --> 00:03:45.330
But if I change,

00:03:45.330 --> 00:03:48.770
I will see that I will still have Consul Lux.

00:03:48.770 --> 00:03:50.550
So what is happening?

00:03:50.550 --> 00:03:51.720
Let's take a look.

00:03:51.720 --> 00:03:55.710
What kind of props do we pass to custom radio.

00:03:55.710 --> 00:03:57.370
So we pass strings.

00:03:57.370 --> 00:03:57.950
All right,

00:03:57.950 --> 00:03:58.790
that's fine.

00:03:58.790 --> 00:04:03.410
We have bowling value and then we have on radio change,

00:04:03.410 --> 00:04:07.950
which is function and functions and javascript are objects.

00:04:07.950 --> 00:04:14.200
So what is happening over here every time when the component is updated,

00:04:14.200 --> 00:04:18.680
which is home component on the every next re render,

00:04:18.680 --> 00:04:25.620
it will create a new copy off this own radio change function and because it is a new copy

00:04:25.620 --> 00:04:27.390
and function is an object,

00:04:27.390 --> 00:04:36.950
react will try to compare those two copies by using this mammal and objects are compared by

00:04:36.950 --> 00:04:39.270
reference not by value.

00:04:39.270 --> 00:04:44.080
It means that every object comparison will return polls.

00:04:44.080 --> 00:04:51.790
So if inside Consul here we will try to compare empty object to just empty object,

00:04:51.790 --> 00:04:54.900
we will receive false and that's fine.

00:04:54.900 --> 00:05:02.130
So what we can do to prevent this and to ensure that we received only one copy off on radio

00:05:02.130 --> 00:05:02.660
change,

00:05:02.660 --> 00:05:09.700
we will use another hook from react which is used call back and this use Colback will

00:05:09.700 --> 00:05:14.540
ensure that we will have only one copy off on radio change.

00:05:14.540 --> 00:05:18.700
So we need to wrap on radio change around use call back.

00:05:18.700 --> 00:05:21.120
So we're gonna pour use cold back.

00:05:21.120 --> 00:05:23.770
We will call this function and insight.

00:05:23.770 --> 00:05:25.450
We're going to pass ah,

00:05:25.450 --> 00:05:32.580
work function and then it also expects second argument array off dependencies exactly the

00:05:32.580 --> 00:05:34.420
same as for use.

00:05:34.420 --> 00:05:34.970
In fact,

00:05:34.970 --> 00:05:37.720
so inside this array of dependencies,

00:05:37.720 --> 00:05:42.580
we will pour values that change that are dependencies off.

00:05:42.580 --> 00:05:48.530
This function that we use inside and if dependency inside this every changes react will

00:05:48.530 --> 00:05:51.380
create a new copy off this function.

00:05:51.380 --> 00:05:55.940
But in our case for this function would don't have any dependency.

00:05:55.940 --> 00:05:59.720
Now let's save it and let's take a look at our app.

00:05:59.720 --> 00:06:01.330
Now if we're a fresh,

00:06:01.330 --> 00:06:03.170
we have to re renders.

00:06:03.170 --> 00:06:05.790
And if I type anything right now,

00:06:05.790 --> 00:06:07.890
there will be no consul looks.

00:06:07.890 --> 00:06:14.260
So it worked and react keeps only one copy off on radio change function.

00:06:14.260 --> 00:06:15.580
All right now,

00:06:15.580 --> 00:06:21.970
let's also optimize other functions such us on key down and on import change.

00:06:21.970 --> 00:06:24.170
So let's start with on import change.

00:06:24.170 --> 00:06:32.110
First we have used call back over here inside were going to pass our function and then we

00:06:32.110 --> 00:06:38.480
will put just empty brackets and right now we will see that we have amazing independency,

00:06:38.480 --> 00:06:39.290
that input.

00:06:39.290 --> 00:06:45.150
Let's put it over here because said input comes from our custom hook,

00:06:45.150 --> 00:06:46.720
which is used last query.

00:06:46.720 --> 00:06:54.640
Now how can we actually test if there's on input changes because on radio change is passed

00:06:54.640 --> 00:06:59.460
down to custom radio so we can see if custom radio renders.

00:06:59.460 --> 00:07:01.370
But what about on import change?

00:07:01.370 --> 00:07:05.320
It is used directly inside this home component.

00:07:05.320 --> 00:07:13.720
Well inside Google Weaken type use A Y de to update it is another hook that will allow us

00:07:13.720 --> 00:07:18.670
to check what props change in the rear enders.

00:07:18.670 --> 00:07:24.430
So let's open the first your l from use hooks dot com and let's just copy it.

00:07:24.430 --> 00:07:27.140
So here will grab this function.

00:07:27.140 --> 00:07:27.560
Use.

00:07:27.560 --> 00:07:28.810
Why did you update?

00:07:28.810 --> 00:07:36.650
And then we'll put it inside custom hooks right at the very bottom and also let's exported

00:07:36.650 --> 00:07:37.460
from here.

00:07:37.460 --> 00:07:40.400
And then we need to also import use roughly,

00:07:40.400 --> 00:07:41.900
which is another hook.

00:07:41.900 --> 00:07:42.580
That's fine.

00:07:42.580 --> 00:07:44.760
We will cover it in the next project.

00:07:44.760 --> 00:07:46.180
Now let's save it.

00:07:46.180 --> 00:07:48.430
And inside home Gs,

00:07:48.430 --> 00:07:50.280
let's call this use.

00:07:50.280 --> 00:07:53.530
Why did you update and inside?

00:07:53.530 --> 00:07:58.280
First argument is going to be Just name that we will see inside council.

00:07:58.280 --> 00:08:00.010
So it is going to be just,

00:08:00.010 --> 00:08:00.460
let's say,

00:08:00.460 --> 00:08:02.330
home and second,

00:08:02.330 --> 00:08:04.070
we need to pass object,

00:08:04.070 --> 00:08:05.390
and inside this object,

00:08:05.390 --> 00:08:11.800
we need to pass props that change over the time that we want to test against the rear

00:08:11.800 --> 00:08:12.280
enders.

00:08:12.280 --> 00:08:15.150
So we want to test on input change.

00:08:15.150 --> 00:08:20.380
So now let's pass on input change and also to see the difference.

00:08:20.380 --> 00:08:22.250
Let's pass on key down.

00:08:22.250 --> 00:08:28.720
So let's put on key down over here and we will see this warning because it is here on the

00:08:28.720 --> 00:08:29.370
job.

00:08:29.370 --> 00:08:32.410
Let's move it to the very bottom over here.

00:08:32.410 --> 00:08:34.360
Now let's save it.

00:08:34.360 --> 00:08:36.690
Now let's get back to the APP.

00:08:36.690 --> 00:08:37.760
If we refresh,

00:08:37.760 --> 00:08:40.420
we can see elites you re renders.

00:08:40.420 --> 00:08:42.150
But let's just remove it.

00:08:42.150 --> 00:08:43.060
All right?

00:08:43.060 --> 00:08:43.460
Now,

00:08:43.460 --> 00:08:45.650
if I change the input,

00:08:45.650 --> 00:08:48.160
you can see why did you update?

00:08:48.160 --> 00:08:53.630
And then I can see that two off the functions actually change.

00:08:53.630 --> 00:08:55.580
So it didn't work.

00:08:55.580 --> 00:08:57.930
Even though we put use call back,

00:08:57.930 --> 00:09:04.370
this function is still being updated and on key down is also being updated because we I

00:09:04.370 --> 00:09:06.070
didn't use any use Cal back.

00:09:06.070 --> 00:09:08.240
So what is happening over here?

00:09:08.240 --> 00:09:14.200
Let's take a look at this set input over here that we have inside years last query.

00:09:14.200 --> 00:09:16.920
So as we can see from this hook,

00:09:16.920 --> 00:09:24.250
it is our own custom function which is set persisted hook and we also have state inside.

00:09:24.250 --> 00:09:27.650
So it means that whenever the state changes,

00:09:27.650 --> 00:09:30.730
this function will have a new copy.

00:09:30.730 --> 00:09:32.060
So what do we need to do.

00:09:32.060 --> 00:09:34.550
We need to also wrap this set,

00:09:34.550 --> 00:09:36.430
persisted in port around,

00:09:36.430 --> 00:09:38.270
use cold back to prevent that.

00:09:38.270 --> 00:09:39.790
So from here,

00:09:39.790 --> 00:09:45.450
let's import use call back and then for set persistent input,

00:09:45.450 --> 00:09:47.450
we will use use call back.

00:09:47.450 --> 00:09:50.370
And as the second argument,

00:09:50.370 --> 00:09:52.090
we are going to pass.

00:09:52.090 --> 00:09:53.350
If we hover,

00:09:53.350 --> 00:09:54.770
we miss only keep.

00:09:54.770 --> 00:09:55.690
But that's fine.

00:09:55.690 --> 00:09:57.870
Our key will be static.

00:09:57.870 --> 00:09:58.920
Let's save it.

00:09:58.920 --> 00:10:00.860
And now let's take a look.

00:10:00.860 --> 00:10:05.410
If I type anything inside the sore Jabbar right now,

00:10:05.410 --> 00:10:07.690
I have only on key down.

00:10:07.690 --> 00:10:13.710
I don't have the on input change function that I already optimized.

00:10:13.710 --> 00:10:21.160
This is because we have only one copy and it changes on Lee when SAT input changes.

00:10:21.160 --> 00:10:22.730
But said import,

00:10:22.730 --> 00:10:24.560
if we take a look inside us,

00:10:24.560 --> 00:10:29.670
last query will only be changed Onley when the key is changed.

00:10:29.670 --> 00:10:32.900
But the key will not be changed because it's static.

00:10:32.900 --> 00:10:37.380
So in this way we optimize our own input change function.

00:10:37.380 --> 00:10:38.080
All right,

00:10:38.080 --> 00:10:38.780
then,

00:10:38.780 --> 00:10:41.340
what other functions do we have here?

00:10:41.340 --> 00:10:42.840
We have on search?

00:10:42.840 --> 00:10:50.880
But since our own sword inside uses our input that changes whenever we type anything,

00:10:50.880 --> 00:10:54.740
it doesn't make any sense to wrap it around.

00:10:54.740 --> 00:11:01.890
Youth callback because on every rear ender it will be updated because input will be one off

00:11:01.890 --> 00:11:07.670
our dependencies for use Colback and the same applies to on key down.

00:11:07.670 --> 00:11:14.810
So if we will have new copy off on new search and on key down has on search as its

00:11:14.810 --> 00:11:15.720
dependency.

00:11:15.720 --> 00:11:19.040
So if we will try and put use callback for on key down,

00:11:19.040 --> 00:11:21.730
we need to put on search as a dependency.

00:11:21.730 --> 00:11:26.290
But we will receive on every subsequent re render in you copy.

00:11:26.290 --> 00:11:30.750
So it does not make any sense to put use callback for these two.

00:11:30.750 --> 00:11:36.980
But what about Orender results So inside we have only results here.

00:11:36.980 --> 00:11:41.200
So what we can actually do to optimize this render results?

00:11:41.200 --> 00:11:44.550
We can put it out off the component.

00:11:44.550 --> 00:11:48.550
We can put it right before we define home.

00:11:48.550 --> 00:11:51.040
And now we don't have access to results.

00:11:51.040 --> 00:11:52.020
But that's fine,

00:11:52.020 --> 00:11:56.950
because what we can do when we render results to this function,

00:11:56.950 --> 00:12:00.520
we can pass it as an argument right over here.

00:12:00.520 --> 00:12:03.240
And now when we call this function,

00:12:03.240 --> 00:12:08.080
we will simply put the results insight and everything will be fine.

00:12:08.080 --> 00:12:08.500
Now,

00:12:08.500 --> 00:12:14.630
we don't need to optimize it because it is not a part off the home component.

00:12:14.630 --> 00:12:15.230
All right.

00:12:15.230 --> 00:12:16.420
If I save it,

00:12:16.420 --> 00:12:17.780
everything looks fine.

00:12:17.780 --> 00:12:19.320
Now let's remove use.

00:12:19.320 --> 00:12:20.540
Why did you update?

00:12:20.540 --> 00:12:23.050
And also let's remove the import.

00:12:23.050 --> 00:12:24.000
Now,

00:12:24.000 --> 00:12:26.310
if we take a look inside the component,

00:12:26.310 --> 00:12:30.630
everything is optimized and we did everything we wanted.

00:12:30.630 --> 00:12:32.920
But what about other components?

00:12:32.920 --> 00:12:34.820
What about show component?

00:12:34.820 --> 00:12:38.890
And what about start for inside show component?

00:12:38.890 --> 00:12:45.490
We don't have anything that we could optimized because we don't do too much things over

00:12:45.490 --> 00:12:45.890
here.

00:12:45.890 --> 00:12:47.390
But what about started?

00:12:47.390 --> 00:12:48.000
Component?

00:12:48.000 --> 00:12:49.280
Let's take a look.

00:12:49.280 --> 00:12:54.510
So here we render the show grid and inside show Great.

00:12:54.510 --> 00:12:55.390
Let's open it.

00:12:55.390 --> 00:12:56.380
And actually,

00:12:56.380 --> 00:13:01.040
let's take a look inside show great more and then inside start component.

00:13:01.040 --> 00:13:01.980
So here,

00:13:01.980 --> 00:13:07.030
What is happening for each off the data We map show card.

00:13:07.030 --> 00:13:10.980
Let's open show card and hear what we will do.

00:13:10.980 --> 00:13:13.810
We will just again poured Simple Consul.

00:13:13.810 --> 00:13:14.270
Look,

00:13:14.270 --> 00:13:15.670
let's put surrender.

00:13:15.670 --> 00:13:16.770
All right,

00:13:16.770 --> 00:13:18.650
now what we're going to do,

00:13:18.650 --> 00:13:20.880
let's render our cards all right?

00:13:20.880 --> 00:13:21.770
Maybe less sports.

00:13:21.770 --> 00:13:22.390
Robert.

00:13:22.390 --> 00:13:26.280
So we have 10 consul locks because we have town the cart.

00:13:26.280 --> 00:13:29.160
But if I let me clear the consul,

00:13:29.160 --> 00:13:33.950
if I try and add one of the cars to the start state.

00:13:33.950 --> 00:13:38.160
You will see that now we have again 10 rear enders.

00:13:38.160 --> 00:13:43.590
But we wanted to render Onley these card because only these card is updated.

00:13:43.590 --> 00:13:45.170
So what is happening?

00:13:45.170 --> 00:13:46.800
Let's take a look at props.

00:13:46.800 --> 00:13:47.790
What do we have?

00:13:47.790 --> 00:13:53.690
So first let's import mammal and then let's rap show card around memo.

00:13:53.690 --> 00:13:59.380
But it will not work because let's take a look at the props we have I D,

00:13:59.380 --> 00:14:00.170
which is.

00:14:00.170 --> 00:14:04.450
I guess it is string than or number than we have Image,

00:14:04.450 --> 00:14:05.180
String,

00:14:05.180 --> 00:14:05.930
String,

00:14:05.930 --> 00:14:07.930
String on Star Click,

00:14:07.930 --> 00:14:09.470
which is a function.

00:14:09.470 --> 00:14:11.310
And then we have bullying.

00:14:11.310 --> 00:14:17.460
So the problem here why mammal will not work because we have on Star Click,

00:14:17.460 --> 00:14:18.560
which is a function.

00:14:18.560 --> 00:14:20.970
So let's take a look inside show.

00:14:20.970 --> 00:14:21.410
Great.

00:14:21.410 --> 00:14:25.150
And here we define on star Click like that.

00:14:25.150 --> 00:14:26.010
So again,

00:14:26.010 --> 00:14:28.170
on every next rear ender,

00:14:28.170 --> 00:14:32.850
react will create a new copy off this own star click function.

00:14:32.850 --> 00:14:37.640
So again we need to use youth callback to prevent react from doing that.

00:14:37.640 --> 00:14:47.960
So let's import use call back and then we will simply wrap on star click around use call

00:14:47.960 --> 00:14:50.770
back and as a ray of dependencies.

00:14:50.770 --> 00:14:55.350
If we hover we have is start and shoulder I d.

00:14:55.350 --> 00:14:56.650
So that's fine.

00:14:56.650 --> 00:14:58.920
Let's put it now.

00:14:58.920 --> 00:14:59.980
It seems fine,

00:14:59.980 --> 00:15:01.960
but we have react use.

00:15:01.960 --> 00:15:04.720
Colbert cannot be called inside a call back.

00:15:04.720 --> 00:15:08.050
This is because we used this DOT map,

00:15:08.050 --> 00:15:12.970
and whenever we used this dot map and try to use hooks inside this,

00:15:12.970 --> 00:15:17.830
let's a callback function that we pass to dot map it.

00:15:17.830 --> 00:15:22.980
We will see this warning because we need to actually create a component because hooks are

00:15:22.980 --> 00:15:25.740
allowed on Lee inside components.

00:15:25.740 --> 00:15:29.740
But it is still fine because it is a component.

00:15:29.740 --> 00:15:30.300
Actually,

00:15:30.300 --> 00:15:32.520
it does not just explicitly defined.

00:15:32.520 --> 00:15:36.510
So let's just ignore this warning by fixing it.

00:15:36.510 --> 00:15:40.200
And let's just select disabled for the entire file.

00:15:40.200 --> 00:15:41.260
Let's save it.

00:15:41.260 --> 00:15:43.240
And now let's take a look.

00:15:43.240 --> 00:15:46.050
So now we have consular grender over here.

00:15:46.050 --> 00:15:48.360
If I inspect my consul,

00:15:48.360 --> 00:15:50.390
if I render my card,

00:15:50.390 --> 00:15:51.940
I have 10 consul looks.

00:15:51.940 --> 00:15:53.980
So let me clear the console.

00:15:53.980 --> 00:15:59.250
Then I will update again exactly the same card as before,

00:15:59.250 --> 00:16:05.930
But right now I will have only one rendered so other cards are unchanged.

00:16:05.930 --> 00:16:08.670
So it actually worked so perfect.

00:16:08.670 --> 00:16:16.810
Now we optimized our components to make them even more faster to prevent unnecessary rear

00:16:16.810 --> 00:16:17.390
enders.

00:16:17.390 --> 00:16:18.200
All right,

00:16:18.200 --> 00:16:22.460
so let's now remove these Consul log and let's take a look.

00:16:22.460 --> 00:16:23.240
Or maybe,

00:16:23.240 --> 00:16:23.950
you know,

00:16:23.950 --> 00:16:29.970
let's try and find any possible optimization is for our components yourself.

00:16:29.970 --> 00:16:32.210
But don't go too much with that.

00:16:32.210 --> 00:16:34.890
It is important to know the limits.

00:16:34.890 --> 00:16:37.380
We don't want to optimize everything,

00:16:37.380 --> 00:16:40.760
because react is already doing its part.

00:16:40.760 --> 00:16:41.460
All right,

00:16:41.460 --> 00:16:42.560
But for now,

00:16:42.560 --> 00:16:44.250
this video is over.

00:16:44.250 --> 00:16:47.190
Let's commit our changes and move on.

00:16:47.190 --> 00:16:50.600
So we're gonna add everything to the stage state,

00:16:50.600 --> 00:16:56.850
and then we're gonna commit our changes by saying optimized react components.

00:16:56.850 --> 00:16:58.580
All right,

00:16:58.580 --> 00:16:59.650
Perfect.

00:16:59.650 --> 00:17:01.150
See you in the next one.

