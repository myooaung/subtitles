WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.620
Hey, in this video,

00:00:01.620 --> 00:00:02.970
I would like to talk about

00:00:02.970 --> 00:00:05.190
client-side and server-side apps.

00:00:05.190 --> 00:00:07.380
Why do we care and why it is

00:00:07.380 --> 00:00:10.065
important to understand the difference?

00:00:10.065 --> 00:00:11.790
Let's go First.

00:00:11.790 --> 00:00:14.835
Let me open my small canvas that I prepared.

00:00:14.835 --> 00:00:16.560
At the top here we have

00:00:16.560 --> 00:00:19.500
three main types of rendering on the web.

00:00:19.500 --> 00:00:22.350
First one is server-side rendering,

00:00:22.350 --> 00:00:24.015
which is a server-side routing.

00:00:24.015 --> 00:00:26.235
Then we have client-side rendering,

00:00:26.235 --> 00:00:28.140
which uses client-side routing.

00:00:28.140 --> 00:00:30.120
And then we have hybrid approach,

00:00:30.120 --> 00:00:32.220
which combines both of those.

00:00:32.220 --> 00:00:34.800
The best way to understand the difference between

00:00:34.800 --> 00:00:37.905
those three is looking at the examples.

00:00:37.905 --> 00:00:40.660
And this is exactly what we gonna do.

00:00:40.660 --> 00:00:44.600
If I go to browser here I prepared two websites,

00:00:44.600 --> 00:00:47.645
steam website and Netlify.

00:00:47.645 --> 00:00:51.125
Both of them are server-side rendering apps.

00:00:51.125 --> 00:00:53.660
And how do we know about that?

00:00:53.660 --> 00:00:57.710
If we right-click on the page and go to view page source,

00:00:57.710 --> 00:01:00.890
here, we can see the markup.

00:01:00.890 --> 00:01:03.650
So if we see the markup in page source,

00:01:03.650 --> 00:01:07.550
it means that the page is server-side rendering.

00:01:07.550 --> 00:01:09.905
So this is what you see here,

00:01:09.905 --> 00:01:14.930
was returned from the server when I access that URL.

00:01:14.930 --> 00:01:19.175
Also, each page contains unique met attacks.

00:01:19.175 --> 00:01:21.725
It means if I go to

00:01:21.725 --> 00:01:24.275
a different page and if I

00:01:24.275 --> 00:01:27.485
inspect page source of that page,

00:01:27.485 --> 00:01:30.470
the Meta tags will be different and

00:01:30.470 --> 00:01:34.550
the markup will be unique for each page on the website.

00:01:34.550 --> 00:01:38.659
Now, we have a second example, Netlify.

00:01:38.659 --> 00:01:41.300
It also uses server-side rendering.

00:01:41.300 --> 00:01:43.025
If I inspect the page,

00:01:43.025 --> 00:01:45.140
I have exactly the same picture.

00:01:45.140 --> 00:01:50.030
I have unique meta tags and I have the markup. Alright?

00:01:50.030 --> 00:01:52.550
But Netlify is different.

00:01:52.550 --> 00:01:55.175
The thing is that Netlify uses

00:01:55.175 --> 00:01:58.805
static pages or static server-side rendering,

00:01:58.805 --> 00:02:00.635
while steam uses

00:02:00.635 --> 00:02:04.025
dynamic server-side rendering, what is the difference?

00:02:04.025 --> 00:02:07.010
The difference is that in case of Netlify,

00:02:07.010 --> 00:02:10.190
all these pages are just static,

00:02:10.190 --> 00:02:11.855
they do not change.

00:02:11.855 --> 00:02:14.825
It also means that every page on

00:02:14.825 --> 00:02:18.995
Netlify website has its own HTML file.

00:02:18.995 --> 00:02:21.020
If I go to pricing page,

00:02:21.020 --> 00:02:24.365
pricing page has its own HTML file,

00:02:24.365 --> 00:02:28.640
just like homepage or any other page.

00:02:28.640 --> 00:02:31.055
Now, what about steam?

00:02:31.055 --> 00:02:33.755
Steam, slightly different.

00:02:33.755 --> 00:02:36.410
It uses dynamic server-side rendering.

00:02:36.410 --> 00:02:38.990
It means that this page, for example,

00:02:38.990 --> 00:02:42.860
game page, this is just a skeleton page.

00:02:42.860 --> 00:02:47.075
It has the template that it uses to render games.

00:02:47.075 --> 00:02:50.285
So if I go to any other page,

00:02:50.285 --> 00:02:53.975
you can see that it looks exactly the same.

00:02:53.975 --> 00:02:56.045
The only thing that was changed

00:02:56.045 --> 00:02:58.190
is the information on the page,

00:02:58.190 --> 00:03:00.230
but the layout is the same.

00:03:00.230 --> 00:03:03.590
And this layout is the skeleton used to

00:03:03.590 --> 00:03:07.325
dynamically insert data into that skeleton.

00:03:07.325 --> 00:03:09.410
And this is exactly what steam doing.

00:03:09.410 --> 00:03:12.785
So for all these pages of games,

00:03:12.785 --> 00:03:16.130
they have only one skeleton.

00:03:16.130 --> 00:03:18.395
And this skeleton is reused

00:03:18.395 --> 00:03:20.510
to dynamically insert the data.

00:03:20.510 --> 00:03:23.390
It is called dynamic because every time

00:03:23.390 --> 00:03:26.975
I send a request to access that page,

00:03:26.975 --> 00:03:29.975
the server dynamically creates

00:03:29.975 --> 00:03:33.980
HTML markup and then it sends back to me to decline.

00:03:33.980 --> 00:03:38.060
That is why each page each page is different.

00:03:38.060 --> 00:03:41.120
It has unique markup because it was

00:03:41.120 --> 00:03:45.200
dynamically created or assembled on the server.

00:03:45.200 --> 00:03:47.300
Unlike with static pages,

00:03:47.300 --> 00:03:49.580
HTML markup is not assembled at

00:03:49.580 --> 00:03:52.580
the request time when I access this page.

00:03:52.580 --> 00:03:56.645
Markup was assembled when the application was built.

00:03:56.645 --> 00:03:59.180
So it was created once and now

00:03:59.180 --> 00:04:01.820
every time I access this pricing page,

00:04:01.820 --> 00:04:03.890
it just sends the static markup

00:04:03.890 --> 00:04:06.530
because it does not tend to change.

00:04:06.530 --> 00:04:10.325
All right, The drawback with static pages is that

00:04:10.325 --> 00:04:14.330
if we need to change something in our static content,

00:04:14.330 --> 00:04:16.460
we have to rebuild the app,

00:04:16.460 --> 00:04:18.755
regenerate HTML pages and then

00:04:18.755 --> 00:04:21.470
upload them to hosting again.

00:04:21.470 --> 00:04:24.260
So now they are considered to be updated.

00:04:24.260 --> 00:04:27.995
With server-side rendering, this is not the case.

00:04:27.995 --> 00:04:29.720
You have the skeleton and

00:04:29.720 --> 00:04:32.255
the data is dynamically inserted.

00:04:32.255 --> 00:04:35.090
This means that data retrieved from

00:04:35.090 --> 00:04:37.520
the database and then based on

00:04:37.520 --> 00:04:40.085
that data, HTML is returned.

00:04:40.085 --> 00:04:41.795
You don't need to change anything.

00:04:41.795 --> 00:04:44.675
You don't need to regenerate pages or do anything.

00:04:44.675 --> 00:04:48.185
Only if you need to change the layout or the skeleton.

00:04:48.185 --> 00:04:49.460
Only in this case,

00:04:49.460 --> 00:04:51.785
it must be redeployed

00:04:51.785 --> 00:04:55.505
to reflect all the changes to that skeleton.

00:04:55.505 --> 00:04:58.625
Let's go to second type,

00:04:58.625 --> 00:05:01.505
which is client side rendering,

00:05:01.505 --> 00:05:08.495
or more often called single page apps as PA. Now,

00:05:08.495 --> 00:05:10.775
what are those websites?

00:05:10.775 --> 00:05:13.610
Here I prepared also two examples.

00:05:13.610 --> 00:05:16.025
Telegram, web version.

00:05:16.025 --> 00:05:18.470
And this snapshot website

00:05:18.470 --> 00:05:20.690
which was built with React by the way.

00:05:20.690 --> 00:05:25.100
So if I inspect telegram, View Page Source,

00:05:25.100 --> 00:05:30.395
I can see that I don't have anything here at all.

00:05:30.395 --> 00:05:34.355
If I go to the body tag, it's totally empty.

00:05:34.355 --> 00:05:38.195
However, if I inspect elements of the page,

00:05:38.195 --> 00:05:40.010
the markup is there.

00:05:40.010 --> 00:05:41.945
So what is happening here?

00:05:41.945 --> 00:05:43.490
From the server?

00:05:43.490 --> 00:05:50.720
I get this bear HTML file only with JavaScript bundles.

00:05:50.720 --> 00:05:55.445
And JavaScript is the one who will render my page,

00:05:55.445 --> 00:05:56.720
who will create the markup?

00:05:56.720 --> 00:06:00.535
Who will create the HTML inside the browser.

00:06:00.535 --> 00:06:03.400
This is why it is called client-side rendering,

00:06:03.400 --> 00:06:08.785
because JavaScript is the one who will render the page

00:06:08.785 --> 00:06:11.050
inside the browser once we have

00:06:11.050 --> 00:06:14.680
that HTML from the server, this is the difference.

00:06:14.680 --> 00:06:16.795
So in server-side rendering,

00:06:16.795 --> 00:06:19.330
we have markup already

00:06:19.330 --> 00:06:23.245
assembled and returned from the server upfront.

00:06:23.245 --> 00:06:25.630
But with single-page apps or

00:06:25.630 --> 00:06:28.645
with client-side rendering, we don't have that.

00:06:28.645 --> 00:06:32.770
We have very bare minimum of HTML and

00:06:32.770 --> 00:06:37.104
the rest is assembled inside the browser by JavaScript.

00:06:37.104 --> 00:06:39.895
That's it. But there is

00:06:39.895 --> 00:06:42.965
one very crucial drawback

00:06:42.965 --> 00:06:45.635
about single-page apps or client-side rendering.

00:06:45.635 --> 00:06:47.690
It is bad for SEO,

00:06:47.690 --> 00:06:50.915
which stands for search engine optimization.

00:06:50.915 --> 00:06:54.260
The thing is that if you want this page to be ranked

00:06:54.260 --> 00:06:57.950
and crawled by Google or by Facebook,

00:06:57.950 --> 00:07:00.650
it is always better to server-side rendering.

00:07:00.650 --> 00:07:03.965
Because crawlers, what the sea,

00:07:03.965 --> 00:07:06.560
they see exactly this, this page source.

00:07:06.560 --> 00:07:07.940
They see the markup,

00:07:07.940 --> 00:07:09.215
they see Matt attacks.

00:07:09.215 --> 00:07:11.495
And based on that markup and Meta tags,

00:07:11.495 --> 00:07:15.500
they can run and understand what is this page all about.

00:07:15.500 --> 00:07:18.680
However, but single-page apps,

00:07:18.680 --> 00:07:23.015
crawlers, they do not see any of those.

00:07:23.015 --> 00:07:25.520
They do not wait for JavaScript in

00:07:25.520 --> 00:07:28.370
the browser to assemble and render the page.

00:07:28.370 --> 00:07:31.310
They just see this empty body tag

00:07:31.310 --> 00:07:34.895
and those basic math attacks.

00:07:34.895 --> 00:07:39.995
So if you need good SEO, use server-side rendering.

00:07:39.995 --> 00:07:43.235
All right, now we have this concept of

00:07:43.235 --> 00:07:46.580
server-side routing and client-side routing.

00:07:46.580 --> 00:07:48.245
What are those?

00:07:48.245 --> 00:07:50.075
And single-page app.

00:07:50.075 --> 00:07:53.930
You can see that if I navigate through pages,

00:07:53.930 --> 00:07:56.870
the URL changes, but my page,

00:07:56.870 --> 00:07:58.325
it does not refresh.

00:07:58.325 --> 00:08:01.700
This is called client-side routing because it

00:08:01.700 --> 00:08:05.195
has handled on the client by JavaScript.

00:08:05.195 --> 00:08:07.340
It means that the JavaScript is

00:08:07.340 --> 00:08:09.830
the one who changes the URL.

00:08:09.830 --> 00:08:14.735
Javascript is the one who renders the page.

00:08:14.735 --> 00:08:15.515
Okay?

00:08:15.515 --> 00:08:19.055
It does not send any additional requests to the server.

00:08:19.055 --> 00:08:21.920
It is all done inside the browser.

00:08:21.920 --> 00:08:25.250
Unlike with server-side the routing,

00:08:25.250 --> 00:08:27.695
if I go to any other page,

00:08:27.695 --> 00:08:29.705
you can see it is being refreshed

00:08:29.705 --> 00:08:31.955
because what I do basically,

00:08:31.955 --> 00:08:36.440
I ask the server to provide me with this page.

00:08:36.440 --> 00:08:37.850
And this is the difference.

00:08:37.850 --> 00:08:39.710
So server-side routing is

00:08:39.710 --> 00:08:42.680
when you send another request to

00:08:42.680 --> 00:08:44.780
the server and you ask for

00:08:44.780 --> 00:08:48.680
this page with single-page apps with client-side routing.

00:08:48.680 --> 00:08:50.150
This is all done inside

00:08:50.150 --> 00:08:53.075
the browser without additional requests.

00:08:53.075 --> 00:08:55.790
Okay, great.

00:08:55.790 --> 00:09:00.695
Now, third way of rendering is called hybrid approach.

00:09:00.695 --> 00:09:05.225
Hybrid approach is best of two worlds are combined.

00:09:05.225 --> 00:09:07.355
We have server-side rendering,

00:09:07.355 --> 00:09:12.230
and we have client side navigation, client-side routing.

00:09:12.230 --> 00:09:17.525
Now, an example would be documentation of Netlify.

00:09:17.525 --> 00:09:21.020
So if I inspect page source,

00:09:21.020 --> 00:09:25.915
I can see the markup and I can see unique met attacks.

00:09:25.915 --> 00:09:27.055
Pretty cool.

00:09:27.055 --> 00:09:31.344
But if I try to navigate to any other page,

00:09:31.344 --> 00:09:34.195
you can see the URL changes.

00:09:34.195 --> 00:09:37.540
However, the page does not refresh.

00:09:37.540 --> 00:09:39.145
So on the first request,

00:09:39.145 --> 00:09:42.145
when you access this website at first like that,

00:09:42.145 --> 00:09:44.980
it will send already assembled markup

00:09:44.980 --> 00:09:46.135
from the server to you,

00:09:46.135 --> 00:09:48.445
which means it is server-side rendering.

00:09:48.445 --> 00:09:51.535
However, after that, once page is loaded,

00:09:51.535 --> 00:09:54.865
then JavaScript takes over and you have this

00:09:54.865 --> 00:09:58.450
in-app like feeling when you browse the web page.

00:09:58.450 --> 00:09:59.755
Pretty cool, right?

00:09:59.755 --> 00:10:02.305
So at the moment in the present,

00:10:02.305 --> 00:10:04.000
hybrid approach is very,

00:10:04.000 --> 00:10:06.125
very popular because again,

00:10:06.125 --> 00:10:08.705
it combines the best of two worlds.

00:10:08.705 --> 00:10:11.030
You can have good SEO optimization

00:10:11.030 --> 00:10:12.980
due to server-side rendering,

00:10:12.980 --> 00:10:14.690
and you can have an app like

00:10:14.690 --> 00:10:17.885
feeling with client-side routing.

00:10:17.885 --> 00:10:19.265
Pretty cool.

00:10:19.265 --> 00:10:24.275
Now, what are the cons and pros of each approach?

00:10:24.275 --> 00:10:26.210
So I already mentioned that,

00:10:26.210 --> 00:10:27.725
but I'm gonna do that again.

00:10:27.725 --> 00:10:29.285
The first one is C0,

00:10:29.285 --> 00:10:32.195
which stands for search engine optimization

00:10:32.195 --> 00:10:33.965
with server-side rendering,

00:10:33.965 --> 00:10:37.280
COO is the best outcome

00:10:37.280 --> 00:10:41.164
because you already have meant attacks assembled.

00:10:41.164 --> 00:10:45.365
You already have the markup assembled page content.

00:10:45.365 --> 00:10:48.350
And based on that information, crawlers,

00:10:48.350 --> 00:10:50.030
like Google crawler, Facebook,

00:10:50.030 --> 00:10:52.625
Twitter trawlers, and any other trollers.

00:10:52.625 --> 00:10:57.290
They can analyze your page based on that information and

00:10:57.290 --> 00:11:02.315
rank your page appropriately with single-page apps.

00:11:02.315 --> 00:11:04.025
This is not the case.

00:11:04.025 --> 00:11:05.735
If I inspect the page,

00:11:05.735 --> 00:11:10.310
I can only see very bare minimum.

00:11:10.310 --> 00:11:14.165
However, there is a modern solution

00:11:14.165 --> 00:11:17.810
to solve this single-page apps problem.

00:11:17.810 --> 00:11:21.725
And the solution is to pre-render single-page app.

00:11:21.725 --> 00:11:26.090
It means, it means that each page in single-page app in

00:11:26.090 --> 00:11:28.790
client-side app will be pre-rendered

00:11:28.790 --> 00:11:31.835
into a static HTML file.

00:11:31.835 --> 00:11:34.339
So each page will have its own HTML.

00:11:34.339 --> 00:11:36.245
And when you access this page,

00:11:36.245 --> 00:11:37.895
it will bring you,

00:11:37.895 --> 00:11:42.290
it will give you the static HTML that was generated.

00:11:42.290 --> 00:11:43.955
This is what Netlify does.

00:11:43.955 --> 00:11:47.330
Netlify is a hosting service and they do pre-render

00:11:47.330 --> 00:11:51.185
single-page apps to make them more SEO optimized.

00:11:51.185 --> 00:11:53.270
This is a really great solution.

00:11:53.270 --> 00:11:56.494
So next we have an app like feel.

00:11:56.494 --> 00:11:58.715
So server-side rendering apps,

00:11:58.715 --> 00:12:01.850
or more specifically, server side routing,

00:12:01.850 --> 00:12:04.190
does not have this feature

00:12:04.190 --> 00:12:06.260
because you can see whenever you navigate,

00:12:06.260 --> 00:12:08.420
the page is refreshed and you instantly

00:12:08.420 --> 00:12:10.715
understand that this is a website.

00:12:10.715 --> 00:12:12.770
However, with client-side routing,

00:12:12.770 --> 00:12:14.600
you receive an app like

00:12:14.600 --> 00:12:17.674
feeling because the page is not refreshed,

00:12:17.674 --> 00:12:21.140
just like we are browsing mobile application.

00:12:21.140 --> 00:12:24.735
And the last point is, requires JS,

00:12:24.735 --> 00:12:27.565
server-side rendered app or

00:12:27.565 --> 00:12:29.815
more specifically static pages.

00:12:29.815 --> 00:12:32.335
They might not mean JavaScript at all.

00:12:32.335 --> 00:12:36.250
It might be a static content with HTML and CSS only,

00:12:36.250 --> 00:12:38.230
which does not need JavaScript.

00:12:38.230 --> 00:12:42.580
But single-page apps or client-side apps always

00:12:42.580 --> 00:12:46.765
need JavaScript because everything is done by JavaScript.

00:12:46.765 --> 00:12:49.540
It's like the core of client-side apps.

00:12:49.540 --> 00:12:51.460
And if you disable JavaScript or

00:12:51.460 --> 00:12:53.470
if it is an unavailable for

00:12:53.470 --> 00:12:55.360
some reason than the apple

00:12:55.360 --> 00:12:57.655
simply not work in the training.

00:12:57.655 --> 00:12:59.830
We're going to target ourselves at building

00:12:59.830 --> 00:13:02.784
single page apps with React.

00:13:02.784 --> 00:13:07.370
I hope it was clear and I'll see you in the next one.
