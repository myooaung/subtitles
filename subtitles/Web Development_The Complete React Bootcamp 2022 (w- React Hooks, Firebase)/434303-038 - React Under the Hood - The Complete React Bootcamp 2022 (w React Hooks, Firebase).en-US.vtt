WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.455
Hello again.

00:00:01.455 --> 00:00:03.915
Let's see how React works under the hood.

00:00:03.915 --> 00:00:06.600
On the example of a single-page application,

00:00:06.600 --> 00:00:09.180
the best way to think of a React app as if

00:00:09.180 --> 00:00:11.700
a tree of components in React,

00:00:11.700 --> 00:00:14.400
there is a thing called the mounting point

00:00:14.400 --> 00:00:17.280
in which React application is being inserted,

00:00:17.280 --> 00:00:18.555
or better to say,

00:00:18.555 --> 00:00:23.145
mounted by default, it is a div tag with ID rude.

00:00:23.145 --> 00:00:24.855
At the top of the tree,

00:00:24.855 --> 00:00:26.535
there is the app component,

00:00:26.535 --> 00:00:29.950
which is the wrapper for all components in the app.

00:00:29.950 --> 00:00:33.560
Inside the app component lay top-level components.

00:00:33.560 --> 00:00:36.215
Inside them, lay nested components,

00:00:36.215 --> 00:00:39.304
and so on until the very nested component.

00:00:39.304 --> 00:00:41.555
If we would think of that for a moment,

00:00:41.555 --> 00:00:43.550
it is pretty much the same as

00:00:43.550 --> 00:00:46.790
the HTML DOM structure, isn't it?

00:00:46.790 --> 00:00:49.670
The Document Object Model or DOM is

00:00:49.670 --> 00:00:54.065
the representation of HTML page in form of a tag tree.

00:00:54.065 --> 00:00:58.550
Dom is how browsers see and interpret HTML markup.

00:00:58.550 --> 00:01:01.040
When we do basic things in JavaScript

00:01:01.040 --> 00:01:04.280
such as document.getElementByID id.

00:01:04.280 --> 00:01:07.010
That document object is part of

00:01:07.010 --> 00:01:10.385
the DOM API which is exposed by the browser.

00:01:10.385 --> 00:01:13.295
React creates in memory representation

00:01:13.295 --> 00:01:15.830
of component tree called virtual DOM.

00:01:15.830 --> 00:01:18.110
It is the same as browser's DOM,

00:01:18.110 --> 00:01:21.125
but it is used only internally by react.

00:01:21.125 --> 00:01:23.360
When React app being rendered on

00:01:23.360 --> 00:01:25.550
the page component tree is

00:01:25.550 --> 00:01:26.780
being translated from

00:01:26.780 --> 00:01:30.095
virtual dominant presentation into HTML markup.

00:01:30.095 --> 00:01:32.645
That HTML markup is then being

00:01:32.645 --> 00:01:36.215
inserted into the mounting element on the web page.

00:01:36.215 --> 00:01:39.380
Remember that all of that is done through JavaScript.

00:01:39.380 --> 00:01:42.905
When data are components need to be updated,

00:01:42.905 --> 00:01:44.780
react always operates with

00:01:44.780 --> 00:01:47.030
the virtual DOM in the first place.

00:01:47.030 --> 00:01:50.600
It takes previously captured state of the virtual DOM,

00:01:50.600 --> 00:01:53.180
compares it to the newly created one

00:01:53.180 --> 00:01:55.895
with updates and calculates the difference.

00:01:55.895 --> 00:01:57.770
If there is any difference,

00:01:57.770 --> 00:02:02.075
react computes what data and components must be updated.

00:02:02.075 --> 00:02:05.015
And those changes are called 3D renders.

00:02:05.015 --> 00:02:07.385
Every render basically represents

00:02:07.385 --> 00:02:09.620
virtual DOM state at a moment,

00:02:09.620 --> 00:02:12.240
the process of calculating the difference between

00:02:12.240 --> 00:02:14.915
renders is called reconciliation.

00:02:14.915 --> 00:02:19.310
And the algorithm name for that process is React Fiber.

00:02:19.310 --> 00:02:21.455
In simple terms, React Fiber

00:02:21.455 --> 00:02:25.085
detects what must be updated in between re-renders.

00:02:25.085 --> 00:02:26.540
You might have a question,

00:02:26.540 --> 00:02:28.610
why use virtual DOM?

00:02:28.610 --> 00:02:32.165
Isn't it adding an extra step and more complexity?

00:02:32.165 --> 00:02:33.830
Well, it depends.

00:02:33.830 --> 00:02:35.780
Virtual DOM changes or more

00:02:35.780 --> 00:02:38.450
lightweight because they are all in memory,

00:02:38.450 --> 00:02:40.610
unlike changes in a real DOM,

00:02:40.610 --> 00:02:42.620
when HTML markup is changed,

00:02:42.620 --> 00:02:45.335
browsers usually recalculate the layout

00:02:45.335 --> 00:02:47.255
and repaint the webpage.

00:02:47.255 --> 00:02:50.450
It is better to have 100 updates in virtual DOM,

00:02:50.450 --> 00:02:52.250
which eventually will result in

00:02:52.250 --> 00:02:54.260
a single real dom update and patch

00:02:54.260 --> 00:02:56.255
repaint greater than applying

00:02:56.255 --> 00:02:59.600
all 100 updates directly on real DOM.

00:02:59.600 --> 00:03:02.795
When we navigate through a website under the hood,

00:03:02.795 --> 00:03:05.315
HTML is constantly being updated.

00:03:05.315 --> 00:03:08.000
React ensures that these updates

00:03:08.000 --> 00:03:10.985
are done in the most efficient way possible.

00:03:10.985 --> 00:03:13.580
The idea behind virtual dome is to

00:03:13.580 --> 00:03:16.265
reduce the number of real DOM updates.

00:03:16.265 --> 00:03:18.080
I know it might be hard to

00:03:18.080 --> 00:03:20.450
perceive that amount of information,

00:03:20.450 --> 00:03:21.800
but it's totally fine.

00:03:21.800 --> 00:03:24.649
You are not required to know all the details.

00:03:24.649 --> 00:03:27.230
Now, we know how React works internally.

00:03:27.230 --> 00:03:31.025
That is one where a missing piece about its architecture,

00:03:31.025 --> 00:03:33.710
these peas is one way data flow,

00:03:33.710 --> 00:03:35.405
which is called flux.

00:03:35.405 --> 00:03:39.470
Flux is the name of a reacts internal architecture.

00:03:39.470 --> 00:03:42.680
Flux implies that data in the app always

00:03:42.680 --> 00:03:46.115
flows in one direction from top to bottom.

00:03:46.115 --> 00:03:49.535
For example, when data inside a component is updated,

00:03:49.535 --> 00:03:53.120
the component and all its children are rendered as well.

00:03:53.120 --> 00:03:55.565
Should children be updated or not,

00:03:55.565 --> 00:03:59.000
is the work for the previously mentioned React Fiber,

00:03:59.000 --> 00:04:00.695
the algorithm which computes

00:04:00.695 --> 00:04:02.510
what exactly needs to be updated.

00:04:02.510 --> 00:04:04.730
But the fact is that updates

00:04:04.730 --> 00:04:07.430
move from parent components to children.

00:04:07.430 --> 00:04:08.960
It is impossible to have

00:04:08.960 --> 00:04:11.510
data flow going from bottom to top.

00:04:11.510 --> 00:04:13.580
I think you will be able to sense

00:04:13.580 --> 00:04:15.740
that when we going to write React code.

00:04:15.740 --> 00:04:18.560
All right, let's sum up under the hood,

00:04:18.560 --> 00:04:21.785
react uses its own HTML DOM representation

00:04:21.785 --> 00:04:23.300
called virtual DOM.

00:04:23.300 --> 00:04:25.370
Virtual DOM goal is to reduce

00:04:25.370 --> 00:04:27.545
the number of real DOM updates.

00:04:27.545 --> 00:04:29.885
React core algorithm is called

00:04:29.885 --> 00:04:33.650
React Fiber and its main task is to calculate what

00:04:33.650 --> 00:04:35.810
exactly must be updated in between the

00:04:35.810 --> 00:04:40.039
re-renders react architecture design is called flux,

00:04:40.039 --> 00:04:42.170
which implies the data flows only in

00:04:42.170 --> 00:04:45.440
one direction from parent components to children.

00:04:45.440 --> 00:04:48.635
Well, this is the all information about React.

00:04:48.635 --> 00:04:50.720
Don't worry if that was confusing.

00:04:50.720 --> 00:04:52.610
Just rewatch the video or seek

00:04:52.610 --> 00:04:54.605
for more information if needed.

00:04:54.605 --> 00:04:56.670
See you next.
