WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.950
Hi, In this video we're going to

00:00:01.950 --> 00:00:04.155
talk about string templates,

00:00:04.155 --> 00:00:06.120
or actually they are called

00:00:06.120 --> 00:00:09.405
template strings and string interpolation.

00:00:09.405 --> 00:00:12.015
Let's go in file.js.

00:00:12.015 --> 00:00:16.235
Suppose that I wanted to print out my name in a sentence.

00:00:16.235 --> 00:00:18.785
I want to say my name is Andrew,

00:00:18.785 --> 00:00:20.375
my h is 10.

00:00:20.375 --> 00:00:22.834
For that, I'm going to create three variables.

00:00:22.834 --> 00:00:25.475
The first variable is going to be name,

00:00:25.475 --> 00:00:27.515
which is going to be Andrew.

00:00:27.515 --> 00:00:31.940
The second one is going to be h, is going to be 10.

00:00:31.940 --> 00:00:33.845
And the third one will be the result

00:00:33.845 --> 00:00:36.035
that I will print to the console.

00:00:36.035 --> 00:00:39.305
So in order to make a sentence,

00:00:39.305 --> 00:00:41.690
I will have to concatenate strings

00:00:41.690 --> 00:00:44.630
because I'm going to use dynamic values,

00:00:44.630 --> 00:00:46.535
which are name and age.

00:00:46.535 --> 00:00:47.765
In programming.

00:00:47.765 --> 00:00:49.429
In other programming languages,

00:00:49.429 --> 00:00:52.610
this is usually done by using the plus operator.

00:00:52.610 --> 00:01:00.650
So this is going to look like my name is plus name.

00:01:00.650 --> 00:01:03.455
This will yield entry.

00:01:03.455 --> 00:01:05.630
Then again, plus.

00:01:05.630 --> 00:01:09.020
And now the string dot that I have to type

00:01:09.020 --> 00:01:13.670
my age is again then plus h.

00:01:13.670 --> 00:01:17.435
And we also have to take care of the spaces.

00:01:17.435 --> 00:01:20.615
Here. I have to add a space and here as well.

00:01:20.615 --> 00:01:21.365
Great.

00:01:21.365 --> 00:01:23.990
Now let's try and print it

00:01:23.990 --> 00:01:29.510
out and run this script, node file gs.

00:01:29.510 --> 00:01:30.965
My name is Andrew may,

00:01:30.965 --> 00:01:32.315
h is 10 grade.

00:01:32.315 --> 00:01:34.040
This is our desired result.

00:01:34.040 --> 00:01:35.540
But as you can see,

00:01:35.540 --> 00:01:37.850
this is not very practical because,

00:01:37.850 --> 00:01:42.185
well, this syntax, it is actually not convenient.

00:01:42.185 --> 00:01:44.540
What if we have a lot of variables and we

00:01:44.540 --> 00:01:46.880
have a really long string,

00:01:46.880 --> 00:01:48.980
then it will become unreadable.

00:01:48.980 --> 00:01:51.500
What if there is a better way of doing that?

00:01:51.500 --> 00:01:53.495
Well, through actually is,

00:01:53.495 --> 00:01:55.205
this is string templates,

00:01:55.205 --> 00:01:57.679
or usually called template strings.

00:01:57.679 --> 00:01:59.660
Let's try and rerun this line of

00:01:59.660 --> 00:02:02.150
code using string template.

00:02:02.150 --> 00:02:05.600
So we're gonna create another variable results to.

00:02:05.600 --> 00:02:07.730
And we're going to use string template.

00:02:07.730 --> 00:02:09.785
In order to use string template,

00:02:09.785 --> 00:02:11.585
we have to use backticks.

00:02:11.585 --> 00:02:13.445
So for regular strings,

00:02:13.445 --> 00:02:15.440
we use regular quotes, right?

00:02:15.440 --> 00:02:18.005
Either a single reclose or double-quotes.

00:02:18.005 --> 00:02:21.905
For string templates, we use backticks.

00:02:21.905 --> 00:02:24.530
So I'm going to toggle quotes using

00:02:24.530 --> 00:02:26.360
the toggle quotes extension that

00:02:26.360 --> 00:02:28.295
I have installed in VS Code.

00:02:28.295 --> 00:02:30.890
You can find it in VS Code marketplace.

00:02:30.890 --> 00:02:33.830
This extension toggle quotes, that one.

00:02:33.830 --> 00:02:36.890
Then I'm pressing the key binding to switch

00:02:36.890 --> 00:02:40.055
quotes and I stop on backticks.

00:02:40.055 --> 00:02:43.865
Backticks, the string is evaluated as it is,

00:02:43.865 --> 00:02:46.460
as it appears in the code.

00:02:46.460 --> 00:02:47.750
So I'm going to type,

00:02:47.750 --> 00:02:51.545
my name is space.

00:02:51.545 --> 00:02:53.750
And here I wanted to dynamically,

00:02:53.750 --> 00:02:56.315
let's say inject a value.

00:02:56.315 --> 00:02:57.875
In order to do that, we have to

00:02:57.875 --> 00:03:01.250
interpellate that value into a string.

00:03:01.250 --> 00:03:04.595
String templates allow us to do so by using

00:03:04.595 --> 00:03:07.984
the dollar sign and curly brackets syntax.

00:03:07.984 --> 00:03:09.620
So when we put the dollar sign

00:03:09.620 --> 00:03:11.045
followed by curly brackets,

00:03:11.045 --> 00:03:13.145
inside curly brackets, we can put

00:03:13.145 --> 00:03:16.475
any JavaScript expression which produces a value.

00:03:16.475 --> 00:03:20.135
This value will be interpolated into that string,

00:03:20.135 --> 00:03:22.325
into that place in that string.

00:03:22.325 --> 00:03:24.800
So we wanted to put names here.

00:03:24.800 --> 00:03:27.035
My name is name.

00:03:27.035 --> 00:03:28.445
I put Dodd.

00:03:28.445 --> 00:03:32.090
My age is again,

00:03:32.090 --> 00:03:33.710
the dollar sign followed by

00:03:33.710 --> 00:03:37.490
curly brackets h. I'm going to save it.

00:03:37.490 --> 00:03:40.865
I'm going to console log it next to our first result.

00:03:40.865 --> 00:03:42.815
And let's compare those two.

00:03:42.815 --> 00:03:44.990
As you can see, they are the same.

00:03:44.990 --> 00:03:46.670
But the difference is in

00:03:46.670 --> 00:03:50.195
the syntax result to uses string templates

00:03:50.195 --> 00:03:52.610
and the first one uses just the plus operator

00:03:52.610 --> 00:03:55.490
and concatenate strings have ever result to.

00:03:55.490 --> 00:03:59.450
This is much nicer and more comprehensive syntax,

00:03:59.450 --> 00:04:03.349
and this syntax is preferred in modern JavaScript.

00:04:03.349 --> 00:04:06.680
Nobody actually uses concatenation

00:04:06.680 --> 00:04:09.785
to concatenate strings, maybe very rarely,

00:04:09.785 --> 00:04:11.000
most of the time,

00:04:11.000 --> 00:04:13.565
you will see string interpolation

00:04:13.565 --> 00:04:16.685
using string templates with backticks.

00:04:16.685 --> 00:04:18.140
As I mentioned earlier,

00:04:18.140 --> 00:04:20.630
the string that appears

00:04:20.630 --> 00:04:24.290
within backticks is evaluated as it is.

00:04:24.290 --> 00:04:25.580
It means that if I'm going to

00:04:25.580 --> 00:04:28.595
put a lot of empty spaces here,

00:04:28.595 --> 00:04:30.470
and maybe over here,

00:04:30.470 --> 00:04:34.460
they all will be included into the final string.

00:04:34.460 --> 00:04:37.010
So if I put blank spaces here,

00:04:37.010 --> 00:04:40.835
blank strings, they will be blank strings in the output.

00:04:40.835 --> 00:04:42.125
Let's see it.

00:04:42.125 --> 00:04:46.685
You can see the spacing is all retained.

00:04:46.685 --> 00:04:49.310
I put three empty lines here,

00:04:49.310 --> 00:04:51.425
they appear in the output.

00:04:51.425 --> 00:04:55.070
We cannot do that with the plus operator.

00:04:55.070 --> 00:04:58.775
If I'm going to put blank spaces here,

00:04:58.775 --> 00:05:00.905
I will have syntax error.

00:05:00.905 --> 00:05:03.560
And if I will try and execute the script,

00:05:03.560 --> 00:05:05.960
I will have syntax error,

00:05:05.960 --> 00:05:09.170
invalid or unexpected token if we want to

00:05:09.170 --> 00:05:10.565
use empty lines in

00:05:10.565 --> 00:05:13.070
our string and we wanted to retain them,

00:05:13.070 --> 00:05:16.265
we are required to use string templates.

00:05:16.265 --> 00:05:19.220
So these will lead to invalid syntax.

00:05:19.220 --> 00:05:21.500
Let's put it back as it was before.

00:05:21.500 --> 00:05:24.395
All right, Now we understand string templates,

00:05:24.395 --> 00:05:25.969
as I mentioned earlier,

00:05:25.969 --> 00:05:28.160
inside curly brackets, we are

00:05:28.160 --> 00:05:30.965
able to put any JavaScript expression.

00:05:30.965 --> 00:05:32.179
And as we remember,

00:05:32.179 --> 00:05:36.275
expression is an entity which produces a value.

00:05:36.275 --> 00:05:39.305
So we have name which is available expression,

00:05:39.305 --> 00:05:41.855
it yields Andrew a string.

00:05:41.855 --> 00:05:43.850
What I want to say is that we are not

00:05:43.850 --> 00:05:46.445
limited to only putting variables here.

00:05:46.445 --> 00:05:49.340
We can put any JavaScript expression inside.

00:05:49.340 --> 00:05:52.070
For example, we're going to use the ternary operator.

00:05:52.070 --> 00:05:55.145
If 10 is greater than five,

00:05:55.145 --> 00:05:58.025
then we're going to put name variable.

00:05:58.025 --> 00:06:00.215
Otherwise we will use age

00:06:00.215 --> 00:06:03.530
because 10 is always greater than five,

00:06:03.530 --> 00:06:05.600
we will always have name.

00:06:05.600 --> 00:06:07.955
So let's try and see.

00:06:07.955 --> 00:06:10.310
And we have My name is Andrew, my age is 10.

00:06:10.310 --> 00:06:11.210
Great works.

00:06:11.210 --> 00:06:14.570
Let's change the operator.

00:06:14.570 --> 00:06:18.110
And now we will have, my name is 10 because well,

00:06:18.110 --> 00:06:20.000
we have false here,

00:06:20.000 --> 00:06:23.315
and that's why we receive H at the end.

00:06:23.315 --> 00:06:26.840
So we can actually put a function of each year.

00:06:26.840 --> 00:06:31.940
Let's create const and get my name.

00:06:31.940 --> 00:06:35.990
And it will return John over here, right?

00:06:35.990 --> 00:06:40.610
And inside curly brackets using string interpolation,

00:06:40.610 --> 00:06:42.920
I'm going to call that function.

00:06:42.920 --> 00:06:47.030
At that function will return me the string.

00:06:47.030 --> 00:06:48.785
Let's try it out.

00:06:48.785 --> 00:06:50.885
We're going to see my name is John.

00:06:50.885 --> 00:06:53.090
My age is 10, and that's it.

00:06:53.090 --> 00:06:55.025
That's all we need to know about

00:06:55.025 --> 00:06:56.540
string templates or

00:06:56.540 --> 00:06:59.060
a string literals and string interpolation.

00:06:59.060 --> 00:07:00.785
At the end, you have to remember

00:07:00.785 --> 00:07:03.679
three things about string templates.

00:07:03.679 --> 00:07:06.710
So the first one is that they use backticks.

00:07:06.710 --> 00:07:08.705
They do not use regular quotes.

00:07:08.705 --> 00:07:11.270
If you're going to put regular quotes over here,

00:07:11.270 --> 00:07:13.175
this will not work.

00:07:13.175 --> 00:07:15.725
String interpolation will not work.

00:07:15.725 --> 00:07:18.470
If I check it out, you will see I will have

00:07:18.470 --> 00:07:22.250
the dollar sign and curly brackets gets printed.

00:07:22.250 --> 00:07:25.040
I have to change my quotes to backticks,

00:07:25.040 --> 00:07:27.065
so string interpolation will work.

00:07:27.065 --> 00:07:29.030
The second thing to remember is

00:07:29.030 --> 00:07:31.595
that inside string interpolation,

00:07:31.595 --> 00:07:34.130
we can put any JavaScript expression.

00:07:34.130 --> 00:07:35.750
We are not limited.

00:07:35.750 --> 00:07:38.015
And the third thing to remember is that

00:07:38.015 --> 00:07:42.530
the string within backticks is evaluated as it is.

00:07:42.530 --> 00:07:45.335
It means that if we put empty spaces here,

00:07:45.335 --> 00:07:47.795
they will be included to the string.

00:07:47.795 --> 00:07:49.325
They will not be omitted.

00:07:49.325 --> 00:07:52.620
That's it. See you in the next one.
