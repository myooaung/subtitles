WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.710
Hi, In this video,

00:00:01.710 --> 00:00:04.260
let's talk about array dot map.

00:00:04.260 --> 00:00:06.210
The array dot map method is

00:00:06.210 --> 00:00:09.030
available on all JavaScript arrays.

00:00:09.030 --> 00:00:13.365
It is used to iterate over array of elements,

00:00:13.365 --> 00:00:16.155
and it is used to transform

00:00:16.155 --> 00:00:19.395
each array element to something else.

00:00:19.395 --> 00:00:22.470
That is why the name array dot map.

00:00:22.470 --> 00:00:24.525
Let's see it on an example.

00:00:24.525 --> 00:00:25.890
In file.js.

00:00:25.890 --> 00:00:27.795
I'm going to create a new array,

00:00:27.795 --> 00:00:36.100
which I will name hello and let it be 4326.

00:00:36.100 --> 00:00:39.500
Now, let's say I want to iterate over that array.

00:00:39.500 --> 00:00:42.890
I want you to simply console log each array element.

00:00:42.890 --> 00:00:45.350
Generally speaking, I can achieve that with

00:00:45.350 --> 00:00:49.865
the traditional way of doing that using the for loop,

00:00:49.865 --> 00:00:52.190
but we can now use a radar map.

00:00:52.190 --> 00:00:56.675
So I'm going to put hello dot map.

00:00:56.675 --> 00:00:59.165
And once I open parenthesis

00:00:59.165 --> 00:01:02.780
VS code will give me the description.

00:01:02.780 --> 00:01:05.285
You can see that the dot map method

00:01:05.285 --> 00:01:07.715
receives callback function.

00:01:07.715 --> 00:01:10.760
And the second argument is this arc.

00:01:10.760 --> 00:01:13.685
This arc is about the,

00:01:13.685 --> 00:01:15.305
this keyword in JavaScript.

00:01:15.305 --> 00:01:16.775
We're not going to touch that.

00:01:16.775 --> 00:01:18.365
We're interested in.

00:01:18.365 --> 00:01:20.015
The callback function.

00:01:20.015 --> 00:01:22.280
Callback is that function that is being

00:01:22.280 --> 00:01:25.759
passed as an argument to some other function.

00:01:25.759 --> 00:01:30.605
So since we're going to pass a function to map function,

00:01:30.605 --> 00:01:33.050
that is why we call it, call back.

00:01:33.050 --> 00:01:35.090
All right, I think it's clear we're going to

00:01:35.090 --> 00:01:37.535
use word callback a lot.

00:01:37.535 --> 00:01:41.075
So that callback receives three arguments.

00:01:41.075 --> 00:01:43.790
The first argument is value,

00:01:43.790 --> 00:01:46.160
then we have index and array.

00:01:46.160 --> 00:01:49.710
And let's type it function.

00:01:50.920 --> 00:01:54.080
And if I'm going to open parenthesis again,

00:01:54.080 --> 00:01:56.315
I will see value, index and array.

00:01:56.315 --> 00:02:00.395
So value is the value of the current element.

00:02:00.395 --> 00:02:04.985
The thing is the dot map method iterates over an array.

00:02:04.985 --> 00:02:07.490
So that callback that we pass to

00:02:07.490 --> 00:02:11.720
the dot map method will run for each array element.

00:02:11.720 --> 00:02:15.530
So if we have four elements in total in that array,

00:02:15.530 --> 00:02:18.575
it means that these callback function will run four

00:02:18.575 --> 00:02:22.415
times for each array element and value.

00:02:22.415 --> 00:02:26.360
The first argument in the callback is going to

00:02:26.360 --> 00:02:30.755
be current value that we are iterating over.

00:02:30.755 --> 00:02:32.900
So for the first time that callback

00:02:32.900 --> 00:02:35.180
will run, value will be,

00:02:35.180 --> 00:02:38.945
for the second time it will run value will be three,

00:02:38.945 --> 00:02:42.320
and so on up until the very last element.

00:02:42.320 --> 00:02:45.365
The second argument here is the index,

00:02:45.365 --> 00:02:49.835
and it is going to be the index of current array element.

00:02:49.835 --> 00:02:52.190
So for the first element,

00:02:52.190 --> 00:02:54.860
it is going to be 0 because arrays in

00:02:54.860 --> 00:02:57.695
programming start with 0 index.

00:02:57.695 --> 00:02:59.555
So it is going to be 0,

00:02:59.555 --> 00:03:02.720
1, 2, and 3.

00:03:02.720 --> 00:03:05.330
Let's call it idx.

00:03:05.330 --> 00:03:08.345
And the third argument is going to be the array.

00:03:08.345 --> 00:03:11.000
And it is going to be the same array

00:03:11.000 --> 00:03:15.305
for which we applied these dot map method.

00:03:15.305 --> 00:03:17.945
So let's put it are,

00:03:17.945 --> 00:03:21.275
and I'll inside that callback inside that function.

00:03:21.275 --> 00:03:28.445
Let's actually console.log, value, index and array.

00:03:28.445 --> 00:03:34.775
And now let's try and execute the script node file HGS.

00:03:34.775 --> 00:03:36.065
And what we see,

00:03:36.065 --> 00:03:38.525
so first goes the value.

00:03:38.525 --> 00:03:43.160
As you can see for three to six,

00:03:43.160 --> 00:03:46.340
we see all our array elements,

00:03:46.340 --> 00:03:48.395
which is correct because again,

00:03:48.395 --> 00:03:52.520
that callback runs for all array elements.

00:03:52.520 --> 00:03:57.275
The second column we see is the index of that element.

00:03:57.275 --> 00:03:59.990
So for has 0 index,

00:03:59.990 --> 00:04:02.780
this is what you see in the terminal.

00:04:02.780 --> 00:04:05.240
And the last element will have

00:04:05.240 --> 00:04:08.300
index three, because, well,

00:04:08.300 --> 00:04:10.970
this is the last element and we know that

00:04:10.970 --> 00:04:14.615
arrays start with 0 index, which is correct.

00:04:14.615 --> 00:04:18.095
And the third value is going to be the array itself on

00:04:18.095 --> 00:04:21.875
which this dot map method was applied on.

00:04:21.875 --> 00:04:25.415
But this is not the true power of the dot-plot method.

00:04:25.415 --> 00:04:27.785
It is used to transform

00:04:27.785 --> 00:04:30.485
each array element into something else.

00:04:30.485 --> 00:04:33.275
And they took map method produces a new value.

00:04:33.275 --> 00:04:35.090
It produces a new array.

00:04:35.090 --> 00:04:37.985
It means that I can write it into a variable.

00:04:37.985 --> 00:04:42.470
So I'm going to put const result equals hello.mat.

00:04:42.470 --> 00:04:45.620
And then I can actually console.log

00:04:45.620 --> 00:04:50.660
result to see what I have.

00:04:50.660 --> 00:04:52.250
If I'm going to run this script,

00:04:52.250 --> 00:04:53.900
I will have an array of

00:04:53.900 --> 00:04:57.305
four elements where every element is undefined.

00:04:57.305 --> 00:04:58.970
Why it is undefined?

00:04:58.970 --> 00:05:02.210
Well, the thing is that the map method expects us

00:05:02.210 --> 00:05:04.220
to return some value

00:05:04.220 --> 00:05:06.560
from that function, from that callback.

00:05:06.560 --> 00:05:09.800
And that value that we return will be

00:05:09.800 --> 00:05:14.195
set as a new value for the current element.

00:05:14.195 --> 00:05:16.595
By default, when we did not return

00:05:16.595 --> 00:05:18.905
anything from a function,

00:05:18.905 --> 00:05:21.230
that function returns undefined.

00:05:21.230 --> 00:05:24.260
This is why we have undefined everywhere.

00:05:24.260 --> 00:05:30.185
Let's try and put return for from the callback.

00:05:30.185 --> 00:05:32.600
Can you guess what is going to be the value?

00:05:32.600 --> 00:05:34.730
I'm going to run this script and now it

00:05:34.730 --> 00:05:37.115
is going to be 4, 4, 4, 4.

00:05:37.115 --> 00:05:38.705
Well, again,

00:05:38.705 --> 00:05:42.035
that callback function runs for each array element.

00:05:42.035 --> 00:05:45.950
And for each array element, we return for,

00:05:45.950 --> 00:05:50.585
if I'm going to put value multiplied by two,

00:05:50.585 --> 00:05:52.940
can you guess the result now?

00:05:52.940 --> 00:05:58.190
Let's see. Now we have 864 and 12.

00:05:58.190 --> 00:05:59.750
Basically what we did,

00:05:59.750 --> 00:06:03.650
we just multiplied each array element by two.

00:06:03.650 --> 00:06:05.990
Because one more time that

00:06:05.990 --> 00:06:08.450
callback runs for each array element.

00:06:08.450 --> 00:06:09.905
For the first time.

00:06:09.905 --> 00:06:13.235
It will run for the first element which is four,

00:06:13.235 --> 00:06:15.635
value is going to be for,

00:06:15.635 --> 00:06:18.545
value's going to be multiplied by two,

00:06:18.545 --> 00:06:22.250
we return eight, which means that in

00:06:22.250 --> 00:06:23.870
the returning value for

00:06:23.870 --> 00:06:26.375
the map method for the first element,

00:06:26.375 --> 00:06:28.115
we have value 8.

00:06:28.115 --> 00:06:29.615
This is what we see.

00:06:29.615 --> 00:06:32.195
The same goes for the second element.

00:06:32.195 --> 00:06:33.995
That callback runs.

00:06:33.995 --> 00:06:36.230
Value's going to be 3.

00:06:36.230 --> 00:06:40.235
3 multiplied by 2 is 6 for the second element.

00:06:40.235 --> 00:06:41.885
Now we have six,

00:06:41.885 --> 00:06:45.065
and so on up until the very last element.

00:06:45.065 --> 00:06:46.430
And That's it.

00:06:46.430 --> 00:06:49.550
This is word array dot map is used for,

00:06:49.550 --> 00:06:51.800
we're going to utilize it a lot,

00:06:51.800 --> 00:06:54.740
especially in React, but we'll have to map

00:06:54.740 --> 00:06:57.785
some array to react markup.

00:06:57.785 --> 00:06:59.615
That's why it is very important

00:06:59.615 --> 00:07:01.910
to understand the map method.

00:07:01.910 --> 00:07:02.720
That's it.

00:07:02.720 --> 00:07:05.730
And I'm gonna see you in the next one.
