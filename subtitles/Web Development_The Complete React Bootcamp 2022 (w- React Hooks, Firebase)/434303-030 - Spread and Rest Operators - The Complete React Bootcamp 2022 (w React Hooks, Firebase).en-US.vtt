WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.235
Hi, This time we're going to talk

00:00:02.235 --> 00:00:05.145
about the rest and spread operators.

00:00:05.145 --> 00:00:07.695
These two are tightly coupled to

00:00:07.695 --> 00:00:11.295
object in race and are used a lot in modern js.

00:00:11.295 --> 00:00:13.455
Let's find out what they do.

00:00:13.455 --> 00:00:15.600
If I go back to File GAS,

00:00:15.600 --> 00:00:18.000
let me maybe create a function and

00:00:18.000 --> 00:00:21.075
the top that I will name some function.

00:00:21.075 --> 00:00:24.630
It is going to receive argument number one,

00:00:24.630 --> 00:00:26.940
argument number 2 and 4.

00:00:26.940 --> 00:00:32.485
Now religious console log arg1, arg2, perfect.

00:00:32.485 --> 00:00:35.330
Below, let me call that function and let me

00:00:35.330 --> 00:00:38.255
supply hello as the first argument.

00:00:38.255 --> 00:00:40.550
Second argument is going to be n to

00:00:40.550 --> 00:00:44.165
the third is going to be 15 forth,

00:00:44.165 --> 00:00:47.285
maybe just an empty arrow function,

00:00:47.285 --> 00:00:50.090
and then let it be just number 5.

00:00:50.090 --> 00:00:51.110
Great.

00:00:51.110 --> 00:00:53.150
If I'm going to run this script,

00:00:53.150 --> 00:00:57.649
I will see that I have Hello Andrea, first two arguments.

00:00:57.649 --> 00:01:01.670
Now, how can we actually achieve the rest of

00:01:01.670 --> 00:01:03.950
the arguments and how we can

00:01:03.950 --> 00:01:06.365
accumulate them into a single unit,

00:01:06.365 --> 00:01:07.760
into S and Google bearable,

00:01:07.760 --> 00:01:11.449
this is why the rest operator exist.

00:01:11.449 --> 00:01:14.750
It accumulates the rest,

00:01:14.750 --> 00:01:17.150
the arguments over the rest of

00:01:17.150 --> 00:01:19.730
something into a single barrel.

00:01:19.730 --> 00:01:21.500
So at the top,

00:01:21.500 --> 00:01:25.415
I'm just going to put a quick reference for us.

00:01:25.415 --> 00:01:29.795
So rest operator accumulates or

00:01:29.795 --> 00:01:34.265
let's say false values into a single variable.

00:01:34.265 --> 00:01:35.960
Faults. Great.

00:01:35.960 --> 00:01:38.330
So to use the rest operator,

00:01:38.330 --> 00:01:41.450
we have to put the three dots and the name of

00:01:41.450 --> 00:01:45.155
variable in which the rest will be written into.

00:01:45.155 --> 00:01:47.885
So let it be erast of arcs.

00:01:47.885 --> 00:01:49.325
It can be any name.

00:01:49.325 --> 00:01:54.875
Now let me try and console log rest of arcs.

00:01:54.875 --> 00:02:00.080
And now we have 15 anonymous function and 5,

00:02:00.080 --> 00:02:02.150
we'll basically the rest of

00:02:02.150 --> 00:02:05.105
the arguments that we did not define.

00:02:05.105 --> 00:02:08.765
So we can see our first two arguments are hello and NGO,

00:02:08.765 --> 00:02:10.969
and the rest is 15,

00:02:10.969 --> 00:02:13.670
the function and five, great,

00:02:13.670 --> 00:02:16.895
if I'm going to remove R2 over here,

00:02:16.895 --> 00:02:20.675
can you guess how rest of RX will change?

00:02:20.675 --> 00:02:22.640
Let's try it out, right?

00:02:22.640 --> 00:02:24.770
So we have now Andrew at

00:02:24.770 --> 00:02:27.215
the beginning than 15 function and five.

00:02:27.215 --> 00:02:29.660
And this is how the rest operator works.

00:02:29.660 --> 00:02:33.155
It just takes the rest of the values and

00:02:33.155 --> 00:02:37.790
folds them all into a single variable, just like that.

00:02:37.790 --> 00:02:39.830
Now, let's see how we can use

00:02:39.830 --> 00:02:43.610
the rest operator inside objects and arrays.

00:02:43.610 --> 00:02:45.350
Let me comment that out.

00:02:45.350 --> 00:02:47.840
And I'm going to create an object,

00:02:47.840 --> 00:02:49.370
would say it is going to be

00:02:49.370 --> 00:02:53.840
person and name is going to be Andrew.

00:02:53.840 --> 00:02:56.435
Maybe age is going to be 10.

00:02:56.435 --> 00:03:01.840
And suppose that I have object is structuring over here.

00:03:01.840 --> 00:03:03.685
And I'd like to grab

00:03:03.685 --> 00:03:07.000
maybe name from that

00:03:07.000 --> 00:03:09.805
person object that I'm going to cancel luggage.

00:03:09.805 --> 00:03:12.475
We can receive angio grade.

00:03:12.475 --> 00:03:14.695
Maybe let's add more keys there.

00:03:14.695 --> 00:03:17.605
Let's say hobby games, perfect.

00:03:17.605 --> 00:03:21.010
Now, what if I want to somehow

00:03:21.010 --> 00:03:24.625
retrieve only the name key and the rest of the keys,

00:03:24.625 --> 00:03:29.665
I would like to fold into a new, completely new object.

00:03:29.665 --> 00:03:31.105
We'll in this case, again,

00:03:31.105 --> 00:03:33.775
I can use the rest operator.

00:03:33.775 --> 00:03:36.205
So just like in function,

00:03:36.205 --> 00:03:37.780
I'm just going to use three dots

00:03:37.780 --> 00:03:39.730
inside object does structuring and

00:03:39.730 --> 00:03:41.260
the name of the object in

00:03:41.260 --> 00:03:44.060
which the rest will be written into.

00:03:44.060 --> 00:03:48.545
So let it be the rest of person.

00:03:48.545 --> 00:03:51.980
Now let me try and console log the rest of person.

00:03:51.980 --> 00:03:55.565
And what I will get, I will get a new object

00:03:55.565 --> 00:04:00.020
with the rest of the keys that I did not destructure.

00:04:00.020 --> 00:04:02.285
So I destructured only name.

00:04:02.285 --> 00:04:04.670
And the rest is h and hobby.

00:04:04.670 --> 00:04:06.395
That's why in the new object,

00:04:06.395 --> 00:04:07.865
which is the rest of person,

00:04:07.865 --> 00:04:10.370
I'm going to see H and hobby if I'm

00:04:10.370 --> 00:04:13.070
going to add H over here.

00:04:13.070 --> 00:04:15.230
Now, the rest of person will

00:04:15.230 --> 00:04:18.545
contain only hobby because this is the rest.

00:04:18.545 --> 00:04:19.625
What is left?

00:04:19.625 --> 00:04:21.080
Let's verify that.

00:04:21.080 --> 00:04:23.045
Perfect hobby games.

00:04:23.045 --> 00:04:25.415
If I'm going to destructure hobby as well,

00:04:25.415 --> 00:04:27.665
can you guess the value now?

00:04:27.665 --> 00:04:28.475
Right?

00:04:28.475 --> 00:04:30.440
It is going to be an empty object.

00:04:30.440 --> 00:04:32.915
If I'm going to remove all of the keys,

00:04:32.915 --> 00:04:35.390
can you guess the value now?

00:04:35.390 --> 00:04:36.515
Correct.

00:04:36.515 --> 00:04:39.005
It is going to be exactly the same object

00:04:39.005 --> 00:04:40.715
because the rest, well,

00:04:40.715 --> 00:04:42.350
is all the keys that we haven't

00:04:42.350 --> 00:04:45.185
destructured since we haven't heard anything.

00:04:45.185 --> 00:04:47.690
The rest is basically everything here.

00:04:47.690 --> 00:04:50.045
The same rule applies to erase.

00:04:50.045 --> 00:04:51.965
Let me comment that out.

00:04:51.965 --> 00:04:55.430
And at the bottom, I'm going to create some array.

00:04:55.430 --> 00:04:57.395
And I'm going to put 5, 4,

00:04:57.395 --> 00:05:00.620
3, 10, and 8, right?

00:05:00.620 --> 00:05:03.214
And I'm going to apply a raid restructuring.

00:05:03.214 --> 00:05:06.995
So const bogs brackets from some array,

00:05:06.995 --> 00:05:09.050
from some re, I'd like to grab

00:05:09.050 --> 00:05:11.540
first element and the rest.

00:05:11.540 --> 00:05:15.095
I would like to write into a completely new variable.

00:05:15.095 --> 00:05:16.280
So again, I'm going to put

00:05:16.280 --> 00:05:18.125
three dots and the name of variable,

00:05:18.125 --> 00:05:23.315
which is going to be the rest of some array.

00:05:23.315 --> 00:05:25.130
Let's verify that I'm going to

00:05:25.130 --> 00:05:27.035
console log the rest of some ray.

00:05:27.035 --> 00:05:29.660
And I'm going to get 4, 3, 10, and 8,

00:05:29.660 --> 00:05:31.475
which is the rest of

00:05:31.475 --> 00:05:34.190
the array that I did not destructure.

00:05:34.190 --> 00:05:36.830
If I'm going to destruct your second element.

00:05:36.830 --> 00:05:39.860
Now, the rest is going to be 3, 10,

00:05:39.860 --> 00:05:41.360
and eight because well,

00:05:41.360 --> 00:05:45.470
I have first two elements and the rest is 310 and 8.

00:05:45.470 --> 00:05:50.105
If I verify that correct, everything works perfect.

00:05:50.105 --> 00:05:54.410
Now, we haven't talked about the spread operator,

00:05:54.410 --> 00:05:57.155
but we can see it also has the three dots.

00:05:57.155 --> 00:06:00.290
Well, the thing is that the rest and spread operators,

00:06:00.290 --> 00:06:01.775
they have the same syntax,

00:06:01.775 --> 00:06:03.785
but they are used in different contexts

00:06:03.785 --> 00:06:06.005
and it is very easy to miss confused them.

00:06:06.005 --> 00:06:09.365
As we know, the rest operator accumulates or

00:06:09.365 --> 00:06:13.160
false the rest of something into a single variable.

00:06:13.160 --> 00:06:15.965
They spread operator does exactly the opposite.

00:06:15.965 --> 00:06:18.425
It unfolds some value.

00:06:18.425 --> 00:06:21.155
So let me demonstrate it to you.

00:06:21.155 --> 00:06:24.680
So suppose that we have an object.

00:06:24.680 --> 00:06:26.765
All right, where is it?

00:06:26.765 --> 00:06:29.870
Let's, let's reuse this person object.

00:06:29.870 --> 00:06:32.990
And let's say I have another object which

00:06:32.990 --> 00:06:36.124
is called some other object.

00:06:36.124 --> 00:06:39.410
And it has some fields such as

00:06:39.410 --> 00:06:44.000
AI genome are their name is going to be Alex,

00:06:44.000 --> 00:06:48.845
and maybe car is going to be BMW.

00:06:48.845 --> 00:06:49.595
Great.

00:06:49.595 --> 00:06:53.060
Now what if I want to merge these two objects?

00:06:53.060 --> 00:06:56.555
We can use the spread operator to achieve that.

00:06:56.555 --> 00:06:59.510
So below we're going to create a completely new object,

00:06:59.510 --> 00:07:02.389
which we'll call merged object.

00:07:02.389 --> 00:07:04.760
It is going to be an empty object.

00:07:04.760 --> 00:07:07.130
And in that empty object,

00:07:07.130 --> 00:07:09.590
we're going to first spread

00:07:09.590 --> 00:07:11.420
the person object and then we're going

00:07:11.420 --> 00:07:13.235
to spread some other object.

00:07:13.235 --> 00:07:15.920
So we first spread person and

00:07:15.920 --> 00:07:18.785
then we spread some other object.

00:07:18.785 --> 00:07:20.810
Can you guess what is going to be

00:07:20.810 --> 00:07:23.285
the valley of Merced object.

00:07:23.285 --> 00:07:28.445
Let's verify marched object.

00:07:28.445 --> 00:07:33.095
And we see that the new object has all the keys

00:07:33.095 --> 00:07:37.789
that we have in person and in some other object combined.

00:07:37.789 --> 00:07:40.580
Well, just like I told you before,

00:07:40.580 --> 00:07:44.105
the spread operator unfolds values.

00:07:44.105 --> 00:07:45.395
So in this case,

00:07:45.395 --> 00:07:48.155
it unfolded first the person object,

00:07:48.155 --> 00:07:51.560
and then it unfolded some other object.

00:07:51.560 --> 00:07:52.700
On top of that,

00:07:52.700 --> 00:07:54.155
as you might already notice,

00:07:54.155 --> 00:07:56.645
it has exactly the same syntax,

00:07:56.645 --> 00:07:59.315
three dots as the rest operator,

00:07:59.315 --> 00:08:03.410
but they have both the underlying difference that again,

00:08:03.410 --> 00:08:05.300
the spread operator unfolds

00:08:05.300 --> 00:08:08.195
values while the rest operator folds them.

00:08:08.195 --> 00:08:11.450
Let's take a look at another example with objects.

00:08:11.450 --> 00:08:13.535
What if, instead of that,

00:08:13.535 --> 00:08:16.340
I'm just going to directly merge

00:08:16.340 --> 00:08:19.610
some other object inside person.

00:08:19.610 --> 00:08:22.610
I can easily do it like that.

00:08:22.610 --> 00:08:25.205
Some other object.

00:08:25.205 --> 00:08:29.525
And of course I have to put it at the top.

00:08:29.525 --> 00:08:33.140
And now I don't need merged object.

00:08:33.140 --> 00:08:37.505
And now our new person object will contain

00:08:37.505 --> 00:08:42.395
all the keys from bowl itself and from some other object.

00:08:42.395 --> 00:08:45.560
This is very flexible because now you can use

00:08:45.560 --> 00:08:49.265
the spread operator to manage objects as you want.

00:08:49.265 --> 00:08:51.215
You can merge objects together.

00:08:51.215 --> 00:08:53.930
You can merge one object into another.

00:08:53.930 --> 00:08:55.970
And there are a few some other use cases

00:08:55.970 --> 00:08:57.650
that allow you to somehow use

00:08:57.650 --> 00:08:59.390
this spread to unfold

00:08:59.390 --> 00:09:02.855
the keys of an object into some other place.

00:09:02.855 --> 00:09:04.550
In our case, what we just did,

00:09:04.550 --> 00:09:06.710
we unfolded all the keys of

00:09:06.710 --> 00:09:09.470
that object into the Person object.

00:09:09.470 --> 00:09:11.900
If I'm going to remove the spread operator,

00:09:11.900 --> 00:09:14.645
Let's see what is going to be devalued.

00:09:14.645 --> 00:09:20.074
We will have some other object as a key insight person.

00:09:20.074 --> 00:09:25.685
And that key will hold the value of object with keys,

00:09:25.685 --> 00:09:27.215
other name, and car.

00:09:27.215 --> 00:09:28.805
Why do we have it like that?

00:09:28.805 --> 00:09:31.520
Well, that syntax that you see here is

00:09:31.520 --> 00:09:35.495
basically the shorthand of some other object,

00:09:35.495 --> 00:09:37.325
colon, some other object.

00:09:37.325 --> 00:09:39.815
This is the key, this is the value.

00:09:39.815 --> 00:09:41.780
But when we have a situation,

00:09:41.780 --> 00:09:44.390
when key is going to have

00:09:44.390 --> 00:09:47.585
the same name as the variable that holds devalue,

00:09:47.585 --> 00:09:49.445
which is some other object.

00:09:49.445 --> 00:09:52.985
We can use the shorthand and it will work.

00:09:52.985 --> 00:09:54.035
Perfect.

00:09:54.035 --> 00:09:58.595
Now let's see the spread operator on the erase.

00:09:58.595 --> 00:10:01.055
I'm going to comment that out.

00:10:01.055 --> 00:10:04.505
And I'm gonna uncommon to our sum array.

00:10:04.505 --> 00:10:07.025
So here we have the rest of some array.

00:10:07.025 --> 00:10:08.885
Let's actually remove that.

00:10:08.885 --> 00:10:11.210
And let's use this example.

00:10:11.210 --> 00:10:15.455
Y is, let's create a new variable and neither array,

00:10:15.455 --> 00:10:17.780
and let it be 123.

00:10:17.780 --> 00:10:18.650
Good.

00:10:18.650 --> 00:10:22.295
Now, in the same way as we just merged

00:10:22.295 --> 00:10:25.205
objects and exactly the same manner

00:10:25.205 --> 00:10:28.220
we are able to merge erase, right?

00:10:28.220 --> 00:10:31.130
So here I'm going to create a completely new array.

00:10:31.130 --> 00:10:32.600
I'm going to call it result.

00:10:32.600 --> 00:10:34.340
And in that new array,

00:10:34.340 --> 00:10:37.745
I'm going to first unfold summary,

00:10:37.745 --> 00:10:40.175
and then I'm going to unfold another array.

00:10:40.175 --> 00:10:41.420
So at the end,

00:10:41.420 --> 00:10:45.875
we're just going to concatenate both of these arrays.

00:10:45.875 --> 00:10:50.480
Summary and don't forget three dots.

00:10:50.480 --> 00:10:54.215
And then another array with three dots.

00:10:54.215 --> 00:10:59.180
Now we're just console log results and

00:10:59.180 --> 00:11:04.400
eventually will receive two arrays combined. Awesome.

00:11:04.400 --> 00:11:06.230
This is a spatially flexible with

00:11:06.230 --> 00:11:08.480
arrays because we are able to

00:11:08.480 --> 00:11:13.160
unfold some array into another array in any place.

00:11:13.160 --> 00:11:16.985
It means that if I'm going to just replace them,

00:11:16.985 --> 00:11:19.835
I'm just going to swap them, right?

00:11:19.835 --> 00:11:22.550
I will have completely different ordering because

00:11:22.550 --> 00:11:25.475
now another array goes first.

00:11:25.475 --> 00:11:29.855
That's why I see 123 and the resulting array.

00:11:29.855 --> 00:11:34.790
If I'm going to remove the spread operator from both.

00:11:34.790 --> 00:11:37.280
Now, our array has

00:11:37.280 --> 00:11:42.575
only two elements where every element is an array itself.

00:11:42.575 --> 00:11:46.295
Right? So we have an array of two elements.

00:11:46.295 --> 00:11:47.735
First element is an array,

00:11:47.735 --> 00:11:49.070
second is an array,

00:11:49.070 --> 00:11:51.215
but this is not exactly what we want.

00:11:51.215 --> 00:11:54.440
We normally do not want these nested arrays.

00:11:54.440 --> 00:11:56.105
We wanted to work with

00:11:56.105 --> 00:11:59.240
flatter race because this is convenient and well,

00:11:59.240 --> 00:12:00.815
this is just normal to see.

00:12:00.815 --> 00:12:03.170
There will be lots of situations when we will have

00:12:03.170 --> 00:12:06.215
to use the spread operator in arrays.

00:12:06.215 --> 00:12:08.060
And we would like to strictly follow

00:12:08.060 --> 00:12:10.130
some ordering with the spread operator,

00:12:10.130 --> 00:12:15.140
we are able to place any values anywhere we want.

00:12:15.140 --> 00:12:18.965
Just like I'm doing right now, right?

00:12:18.965 --> 00:12:22.595
So can you guess the value, the resulting value,

00:12:22.595 --> 00:12:26.585
if I put this line of code, Let me see.

00:12:26.585 --> 00:12:29.480
So first, I will have another array.

00:12:29.480 --> 00:12:33.200
After all the values of another array which is 1, 2,

00:12:33.200 --> 00:12:37.265
3, I'm going to have 15, 16, and 12.

00:12:37.265 --> 00:12:40.640
After that, I will have all the values of summary.

00:12:40.640 --> 00:12:44.555
And at the end I'm going to have 16, 1, and 0.

00:12:44.555 --> 00:12:46.790
Pretty cool. I guess this is all

00:12:46.790 --> 00:12:49.715
about the spread and rest operators.

00:12:49.715 --> 00:12:51.575
We're going to use them a lot.

00:12:51.575 --> 00:12:53.525
They are very, very useful.

00:12:53.525 --> 00:12:55.340
So I advise you to get

00:12:55.340 --> 00:12:57.935
comfortable with these and practice a little bit.

00:12:57.935 --> 00:12:59.570
They might be confusing,

00:12:59.570 --> 00:13:02.180
but they are eventually very easy.

00:13:02.180 --> 00:13:04.520
So trust me, just take some time,

00:13:04.520 --> 00:13:08.580
get used to it and I'm gonna see you in the next one.
