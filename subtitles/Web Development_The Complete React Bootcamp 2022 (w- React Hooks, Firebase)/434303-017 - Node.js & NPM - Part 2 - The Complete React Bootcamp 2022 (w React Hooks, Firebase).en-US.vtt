WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.490
Hey, welcome to the second part of

00:00:02.490 --> 00:00:04.950
NodeJS introduction and the last part

00:00:04.950 --> 00:00:06.630
we discussed what is don't yes,

00:00:06.630 --> 00:00:09.240
and how we're able to run single scripts.

00:00:09.240 --> 00:00:12.900
In this video, we're going to talk about NPM and

00:00:12.900 --> 00:00:14.700
how we can use npm to

00:00:14.700 --> 00:00:17.039
manage project and project dependencies.

00:00:17.039 --> 00:00:17.850
Let's go.

00:00:17.850 --> 00:00:20.595
First of all, what is npm?

00:00:20.595 --> 00:00:24.465
Npm stands for Node Package Manager

00:00:24.465 --> 00:00:27.450
and it comes already bundled with NodeJS.

00:00:27.450 --> 00:00:29.535
So if you have no JSON installed,

00:00:29.535 --> 00:00:31.800
you already have NPM to verify

00:00:31.800 --> 00:00:35.670
that inside the terminal, just type npm.

00:00:35.670 --> 00:00:38.520
There's dash version and

00:00:38.520 --> 00:00:41.340
it will print currently installed NPM version.

00:00:41.340 --> 00:00:45.935
Now how we can use npm or what it does for us?

00:00:45.935 --> 00:00:49.790
Well, the thing is that in real JavaScript projects,

00:00:49.790 --> 00:00:53.135
there are dependencies or project packages.

00:00:53.135 --> 00:00:55.655
So these are those libraries,

00:00:55.655 --> 00:00:57.980
different modules from the Internet or

00:00:57.980 --> 00:01:02.240
different tools that we install into our project.

00:01:02.240 --> 00:01:06.110
And npm is the tool that will allow us to do that.

00:01:06.110 --> 00:01:09.350
So in order to install those packages, but first,

00:01:09.350 --> 00:01:13.610
how to initialize npm inside our project folder.

00:01:13.610 --> 00:01:14.765
In order to do that,

00:01:14.765 --> 00:01:18.425
we have to use npm init command.

00:01:18.425 --> 00:01:20.360
And once you execute this command,

00:01:20.360 --> 00:01:23.570
it will prompt you for a few things such as package name,

00:01:23.570 --> 00:01:25.385
version and some other things.

00:01:25.385 --> 00:01:29.760
Just skip that by pressing enter all the time.

00:01:30.010 --> 00:01:33.020
Once the command is finished.

00:01:33.020 --> 00:01:35.210
In the project route,

00:01:35.210 --> 00:01:38.270
you will see package.json file package Jason is

00:01:38.270 --> 00:01:40.940
that manifest file which describes

00:01:40.940 --> 00:01:43.910
our project inside we can see project name,

00:01:43.910 --> 00:01:46.250
maybe project version description.

00:01:46.250 --> 00:01:47.300
If we're going to put that

00:01:47.300 --> 00:01:49.340
author lights and see if we have

00:01:49.340 --> 00:01:52.325
any scripts and a few other sections

00:01:52.325 --> 00:01:54.425
that we're going to talk about in a second.

00:01:54.425 --> 00:01:57.950
The question is, what package JSON does for us?

00:01:57.950 --> 00:01:59.405
How it can be useful?

00:01:59.405 --> 00:02:01.925
Well, let's go to the browser.

00:02:01.925 --> 00:02:04.670
Let's look for NPM in Google and we

00:02:04.670 --> 00:02:07.385
will end up on the official npm website.

00:02:07.385 --> 00:02:10.205
Npm has the NPM registry.

00:02:10.205 --> 00:02:13.295
So Node Package Manager is a tool that

00:02:13.295 --> 00:02:16.445
allows us to manage packages inside our project.

00:02:16.445 --> 00:02:19.685
But where do those packages come from?

00:02:19.685 --> 00:02:22.865
They come from the NPM registry.

00:02:22.865 --> 00:02:27.230
The NPM registry is that ocean of different packages,

00:02:27.230 --> 00:02:29.840
tools, and libraries that we can

00:02:29.840 --> 00:02:33.065
install into our project using npm.

00:02:33.065 --> 00:02:36.020
So on this website you can search for different packages.

00:02:36.020 --> 00:02:37.760
There are millions, billions of

00:02:37.760 --> 00:02:39.905
different libraries that we can use.

00:02:39.905 --> 00:02:42.200
But for now, let's just look for the one that I

00:02:42.200 --> 00:02:45.200
prepared, which is cowsay.

00:02:45.200 --> 00:02:47.000
Let's click on that one.

00:02:47.000 --> 00:02:48.260
And now we can see

00:02:48.260 --> 00:02:51.560
the official webpage for these packaged on that page,

00:02:51.560 --> 00:02:53.585
we can find its documentation,

00:02:53.585 --> 00:02:55.445
how we can install that package,

00:02:55.445 --> 00:02:57.710
what it does, how we can use it,

00:02:57.710 --> 00:02:58.925
and all other things.

00:02:58.925 --> 00:03:01.700
We can see that it has for dependencies.

00:03:01.700 --> 00:03:04.490
The thing is that packages published to

00:03:04.490 --> 00:03:07.265
the NPM registry have dependencies,

00:03:07.265 --> 00:03:10.684
and those dependencies are also published packages.

00:03:10.684 --> 00:03:13.130
And those packages might also have Dependencies.

00:03:13.130 --> 00:03:15.650
Dependencies, dependencies,

00:03:15.650 --> 00:03:17.600
and dependencies of dependencies

00:03:17.600 --> 00:03:20.000
are called peer dependencies.

00:03:20.000 --> 00:03:22.160
On that page, we can also find

00:03:22.160 --> 00:03:25.880
some matter information like version,

00:03:25.880 --> 00:03:28.475
how many weekly downloads it has

00:03:28.475 --> 00:03:32.255
the author last published, and some other things.

00:03:32.255 --> 00:03:34.670
Let's read the documentation. What do we see here?

00:03:34.670 --> 00:03:36.680
First of all, what this package does?

00:03:36.680 --> 00:03:39.695
Well, this package is basically very simple.

00:03:39.695 --> 00:03:41.900
Its sole purpose is to just print

00:03:41.900 --> 00:03:44.150
that cow into the terminal.

00:03:44.150 --> 00:03:46.220
So let's see the installation part,

00:03:46.220 --> 00:03:49.580
npm install minus g cowsay.

00:03:49.580 --> 00:03:51.890
Let's copy that command and

00:03:51.890 --> 00:03:54.680
let's put it into our terminal.

00:03:54.680 --> 00:03:56.720
Let's see what is going to happen.

00:03:56.720 --> 00:03:58.580
So we can see something is happening.

00:03:58.580 --> 00:04:01.955
Can we can see that installation was successful already.

00:04:01.955 --> 00:04:04.475
We can see Edit 41 packages

00:04:04.475 --> 00:04:07.130
and the version that we've installed,

00:04:07.130 --> 00:04:10.850
which is 1.5. Why 41 package?

00:04:10.850 --> 00:04:12.755
Just like I mentioned earlier,

00:04:12.755 --> 00:04:15.335
packages have their own dependencies,

00:04:15.335 --> 00:04:18.455
and those dependencies have their own dependencies.

00:04:18.455 --> 00:04:21.095
And eventually we have this dependency tree.

00:04:21.095 --> 00:04:25.205
That's why at the end we have 41 packages in total.

00:04:25.205 --> 00:04:28.145
We have npm installed cowsay.

00:04:28.145 --> 00:04:29.960
What did it do?

00:04:29.960 --> 00:04:32.285
Well, it just installed cowsay

00:04:32.285 --> 00:04:35.435
into our system as a global package.

00:04:35.435 --> 00:04:36.800
As a global package because

00:04:36.800 --> 00:04:39.590
we minus g flag to verify that we

00:04:39.590 --> 00:04:44.135
can type npm list minus g,

00:04:44.135 --> 00:04:48.170
then dash, dash depth equals 0.

00:04:48.170 --> 00:04:50.000
Let's execute that command and

00:04:50.000 --> 00:04:52.010
let's see what gets printed.

00:04:52.010 --> 00:04:55.565
I already have a few packages installed here globally,

00:04:55.565 --> 00:04:58.910
but in your list you will see cowsay.

00:04:58.910 --> 00:05:00.215
So what does it mean?

00:05:00.215 --> 00:05:01.535
What it gives us?

00:05:01.535 --> 00:05:04.295
It means that now we can use the package

00:05:04.295 --> 00:05:07.880
as a CLI globally in our system.

00:05:07.880 --> 00:05:11.614
Let's see the usage park, cowsay JavaScript.

00:05:11.614 --> 00:05:14.960
Let's copy it. And let's

00:05:14.960 --> 00:05:17.240
try and execute it in the terminal.

00:05:17.240 --> 00:05:21.590
I have this small pretty cow here saying JavaScript.

00:05:21.590 --> 00:05:23.885
So this is exactly what this package does,

00:05:23.885 --> 00:05:28.190
and we can use it as a CLA in our terminal.

00:05:28.190 --> 00:05:29.660
And it doesn't matter from

00:05:29.660 --> 00:05:31.820
where it is available globally.

00:05:31.820 --> 00:05:36.890
If I open another Git Bash instance over here,

00:05:36.890 --> 00:05:39.140
I will still be able to use cowsay.

00:05:39.140 --> 00:05:44.360
Because again, we installed cowsay as a global package.

00:05:44.360 --> 00:05:46.805
It means that we can use it anywhere.

00:05:46.805 --> 00:05:48.410
There are two types of packages,

00:05:48.410 --> 00:05:51.695
or I would say two ways how we can install a package.

00:05:51.695 --> 00:05:53.330
First, we can install it globally,

00:05:53.330 --> 00:05:54.680
just like you see here.

00:05:54.680 --> 00:05:57.080
So when a package is installed globally,

00:05:57.080 --> 00:06:00.019
it is not bounded to any project,

00:06:00.019 --> 00:06:03.260
is just installed globally in your system.

00:06:03.260 --> 00:06:04.820
The second way is to install

00:06:04.820 --> 00:06:06.994
a package as a project dependency.

00:06:06.994 --> 00:06:09.635
When a packages installed as a project dependency,

00:06:09.635 --> 00:06:11.870
first of all, it is not available globally.

00:06:11.870 --> 00:06:13.610
It becomes available only in

00:06:13.610 --> 00:06:16.070
that project where it was installed into,

00:06:16.070 --> 00:06:19.205
Let's first uninstalled cowsay as a global package,

00:06:19.205 --> 00:06:22.595
and let's instead install it as a project dependency.

00:06:22.595 --> 00:06:24.485
So first we're going to type npm

00:06:24.485 --> 00:06:28.430
install minus g cow sake.

00:06:28.430 --> 00:06:32.705
You will see at the end removed 41 package grade.

00:06:32.705 --> 00:06:36.395
Now to install cowsay as a project dependency,

00:06:36.395 --> 00:06:40.265
we have to do npm installed cowsay,

00:06:40.265 --> 00:06:42.575
but this time without minus g flag,

00:06:42.575 --> 00:06:44.150
let's execute that command and

00:06:44.150 --> 00:06:45.845
let's see what is going to happen.

00:06:45.845 --> 00:06:48.935
What is new in side File Explorer.

00:06:48.935 --> 00:06:51.620
So first, if we open package Jason,

00:06:51.620 --> 00:06:55.100
we will see new dependency section.

00:06:55.100 --> 00:06:58.475
So because package Jason is our manifest file,

00:06:58.475 --> 00:07:00.275
it will contain, it will

00:07:00.275 --> 00:07:03.425
list all the dependencies that we've installed.

00:07:03.425 --> 00:07:04.730
So we've installed only one

00:07:04.730 --> 00:07:07.490
dependency cowsay of that version.

00:07:07.490 --> 00:07:10.145
Now we also see package.json.

00:07:10.145 --> 00:07:12.680
And package.json appears whenever you

00:07:12.680 --> 00:07:15.695
install any dependency package.json purpose

00:07:15.695 --> 00:07:17.900
is to look versions of

00:07:17.900 --> 00:07:20.015
the installed dependencies

00:07:20.015 --> 00:07:22.430
and dependencies of dependencies.

00:07:22.430 --> 00:07:24.110
This way we can avoid

00:07:24.110 --> 00:07:27.440
different problems with version resolutions.

00:07:27.440 --> 00:07:29.510
And we also have node modules folder.

00:07:29.510 --> 00:07:31.790
Node modules folder is that folder

00:07:31.790 --> 00:07:35.060
where all packages were installed into.

00:07:35.060 --> 00:07:36.695
If we open that folder,

00:07:36.695 --> 00:07:38.810
we will see a bunch of

00:07:38.810 --> 00:07:42.455
different packages here along with cowsay.

00:07:42.455 --> 00:07:47.690
These are those 41 packages that we saw were installed.

00:07:47.690 --> 00:07:50.825
They are here under Node modules.

00:07:50.825 --> 00:07:52.490
If we're going to delete this folder,

00:07:52.490 --> 00:07:53.825
they will be deleted.

00:07:53.825 --> 00:07:56.990
Now, let's go back to cowsay and let's

00:07:56.990 --> 00:08:00.410
see how we can actually use that package.

00:08:00.410 --> 00:08:02.105
So if we scroll down,

00:08:02.105 --> 00:08:04.490
we can see usage as a module.

00:08:04.490 --> 00:08:09.290
Remember that I told ones that all files in Node.JS,

00:08:09.290 --> 00:08:11.825
our modules the same with packages.

00:08:11.825 --> 00:08:14.390
Because packages in the NPM registry

00:08:14.390 --> 00:08:16.085
are also JavaScript files,

00:08:16.085 --> 00:08:17.465
it means that there are modules.

00:08:17.465 --> 00:08:20.060
So let's see how we can use it as a module.

00:08:20.060 --> 00:08:21.680
And looking at this code snippet,

00:08:21.680 --> 00:08:24.335
I can say that this example uses require,

00:08:24.335 --> 00:08:27.095
which means it uses CommonJS import system.

00:08:27.095 --> 00:08:28.880
But now we know that there is

00:08:28.880 --> 00:08:32.105
CommonJS and there's also ECMO Script modules.

00:08:32.105 --> 00:08:34.415
So instead we're going to use atmospheric modules.

00:08:34.415 --> 00:08:36.635
So let's copy this example.

00:08:36.635 --> 00:08:41.015
And let's put it inside our test mgs.

00:08:41.015 --> 00:08:43.115
But instead of require,

00:08:43.115 --> 00:08:45.200
I use at my script import.

00:08:45.200 --> 00:08:52.235
So we will type import cowsay from cowsay.

00:08:52.235 --> 00:08:55.010
And here I have to specify package name,

00:08:55.010 --> 00:08:57.605
where dependency name from package JSON.

00:08:57.605 --> 00:08:59.675
I don't need to specify the path

00:08:59.675 --> 00:09:02.015
where I don't need to reference node modules.

00:09:02.015 --> 00:09:04.925
I just need to type dependency name,

00:09:04.925 --> 00:09:06.215
which is going to be cowsay.

00:09:06.215 --> 00:09:07.910
Now, let's delete this and

00:09:07.910 --> 00:09:10.070
let's delete this, and let's save it.

00:09:10.070 --> 00:09:12.275
And let's try and execute that script.

00:09:12.275 --> 00:09:16.010
I'm going to type node test.js.

00:09:16.010 --> 00:09:18.110
And let's see, again we have

00:09:18.110 --> 00:09:21.170
that cow saying I'm a Moodle,

00:09:21.170 --> 00:09:25.370
but now cowsay is part of our project.

00:09:25.370 --> 00:09:29.120
When we installed it globally, it was independent.

00:09:29.120 --> 00:09:30.890
It was just a tool in

00:09:30.890 --> 00:09:33.620
our system that we can use through the terminal.

00:09:33.620 --> 00:09:36.950
But since now cowsay is part of our project,

00:09:36.950 --> 00:09:40.955
we are bounded to cowsay in this specific project.

00:09:40.955 --> 00:09:44.030
If I am going to remove node modules folder,

00:09:44.030 --> 00:09:47.540
let's go forward and deleted completely.

00:09:47.540 --> 00:09:50.375
And if I'm going to try and execute that file again,

00:09:50.375 --> 00:09:51.830
you will see cannot find

00:09:51.830 --> 00:09:54.395
package cowsay because we just deleted

00:09:54.395 --> 00:09:58.595
all required files needed to execute cowsay.

00:09:58.595 --> 00:10:01.205
So in order to re-install packages

00:10:01.205 --> 00:10:04.115
listed in package Jason listed in our project,

00:10:04.115 --> 00:10:06.710
we have to just type npm installed whenever

00:10:06.710 --> 00:10:09.305
we don't have node modules folder,

00:10:09.305 --> 00:10:11.105
but we need to install the packages.

00:10:11.105 --> 00:10:12.665
We just type npm install.

00:10:12.665 --> 00:10:15.515
So what it will do, it will look inside package Jason.

00:10:15.515 --> 00:10:17.465
It will look for the dependency section

00:10:17.465 --> 00:10:19.385
and it will install missing packages.

00:10:19.385 --> 00:10:19.985
That's it.

00:10:19.985 --> 00:10:22.700
Now you can see again at it 41 package,

00:10:22.700 --> 00:10:24.860
if I execute the script again,

00:10:24.860 --> 00:10:26.540
the cow was there.

00:10:26.540 --> 00:10:28.985
Awesome. Let's inspect package JSON,

00:10:28.985 --> 00:10:32.240
and let's find the scripts section over here.

00:10:32.240 --> 00:10:34.310
I want to talk about this section now,

00:10:34.310 --> 00:10:35.975
the thing is that in the projects,

00:10:35.975 --> 00:10:39.005
there are a few projects specific scripts.

00:10:39.005 --> 00:10:42.065
So this section is called NPM scripts.

00:10:42.065 --> 00:10:45.215
So usually project-specific scripts

00:10:45.215 --> 00:10:48.245
are defined through NPM scripts.

00:10:48.245 --> 00:10:51.035
We already have test script defined here,

00:10:51.035 --> 00:10:54.395
but let's remove it and let's define our own script.

00:10:54.395 --> 00:10:55.895
It can be anything,

00:10:55.895 --> 00:10:57.710
we can name it whatever we want.

00:10:57.710 --> 00:11:02.180
For example, my test script.

00:11:02.180 --> 00:11:06.095
And here we need to type what the script will do.

00:11:06.095 --> 00:11:08.210
For example, if in the terminal to

00:11:08.210 --> 00:11:11.014
print something into the output,

00:11:11.014 --> 00:11:13.745
I would use the echo command,

00:11:13.745 --> 00:11:17.540
echo, hello, and hello gets printed.

00:11:17.540 --> 00:11:20.795
So well, here we can define the same thing.

00:11:20.795 --> 00:11:26.165
For example, my test script will execute echo hello,

00:11:26.165 --> 00:11:29.450
for example, at code hello.

00:11:29.450 --> 00:11:32.615
Now in order to run that NPM script,

00:11:32.615 --> 00:11:37.745
I have to type npm run and the name of script,

00:11:37.745 --> 00:11:41.060
which is going to be my test script.

00:11:41.060 --> 00:11:42.980
Once they execute that command,

00:11:42.980 --> 00:11:47.780
that command will look for package JSON in this folder,

00:11:47.780 --> 00:11:50.660
and it will look inside this script section,

00:11:50.660 --> 00:11:52.640
and it will find my test script,

00:11:52.640 --> 00:11:55.280
and then it will just run whatever is written here.

00:11:55.280 --> 00:11:56.870
Let's try it out.

00:11:56.870 --> 00:11:58.805
You can see I have Hello,

00:11:58.805 --> 00:12:00.515
basically the same result.

00:12:00.515 --> 00:12:02.735
That's it, why it might be useful.

00:12:02.735 --> 00:12:05.120
Well, there are some situations

00:12:05.120 --> 00:12:06.980
when we might have a really,

00:12:06.980 --> 00:12:09.470
really long script over here.

00:12:09.470 --> 00:12:12.950
Imagine it goes like that.

00:12:12.950 --> 00:12:17.255
And now, instead of writing all of that, all the time,

00:12:17.255 --> 00:12:19.310
we can just run npm,

00:12:19.310 --> 00:12:20.585
run my test script,

00:12:20.585 --> 00:12:22.985
and it will do the thing. That's it.

00:12:22.985 --> 00:12:26.900
We're going to talk about NPM scripts more in details

00:12:26.900 --> 00:12:30.770
once we going to scaffold a real React project for now,

00:12:30.770 --> 00:12:32.090
let's just leave it empty.

00:12:32.090 --> 00:12:35.360
One more thing that I want to mention here is that

00:12:35.360 --> 00:12:39.080
project dependencies can be of two types.

00:12:39.080 --> 00:12:41.780
Actually, there are regular dependencies

00:12:41.780 --> 00:12:44.705
that we use in our source code,

00:12:44.705 --> 00:12:46.955
and there might be dev dependencies.

00:12:46.955 --> 00:12:50.585
So dev dependencies are also part of the project,

00:12:50.585 --> 00:12:54.575
but they are not referenced inside the source code.

00:12:54.575 --> 00:12:57.785
They are used only for development.

00:12:57.785 --> 00:13:00.110
So these packages that we're going to install for

00:13:00.110 --> 00:13:03.470
development are going to be preacher and ES lint.

00:13:03.470 --> 00:13:06.230
And we're going to install them as deaf dependencies.

00:13:06.230 --> 00:13:08.450
We will talk about them in the upcoming videos.

00:13:08.450 --> 00:13:11.510
They will be used to facilitate our development,

00:13:11.510 --> 00:13:12.980
but they are optional.

00:13:12.980 --> 00:13:15.830
If we're going to remove dev dependencies,

00:13:15.830 --> 00:13:19.160
the project will still be able to run.

00:13:19.160 --> 00:13:22.970
However, if we remove that dependency from here,

00:13:22.970 --> 00:13:25.399
if we're going to remove node modules,

00:13:25.399 --> 00:13:27.665
the project will not be able to run

00:13:27.665 --> 00:13:31.340
because it depends on cowsay.

00:13:31.340 --> 00:13:34.025
So if we remove dev dependencies,

00:13:34.025 --> 00:13:36.140
the project will still be able to run.

00:13:36.140 --> 00:13:38.825
But if we remove the main dependency,

00:13:38.825 --> 00:13:41.300
the project will not run because now

00:13:41.300 --> 00:13:43.340
the dependency is missing

00:13:43.340 --> 00:13:45.575
because our project depends on it.

00:13:45.575 --> 00:13:47.765
But dev dependencies are

00:13:47.765 --> 00:13:50.825
only dependencies for our development environment.

00:13:50.825 --> 00:13:55.085
It does not have direct influence on the source code.

00:13:55.085 --> 00:13:56.840
We're going to talk about that one more time

00:13:56.840 --> 00:13:59.090
Once we're going to talk about preacher in the gasoline.

00:13:59.090 --> 00:14:01.025
But for now, I think it's enough.

00:14:01.025 --> 00:14:03.245
All JavaScript projects are

00:14:03.245 --> 00:14:06.275
managed just like that using npm,

00:14:06.275 --> 00:14:08.810
the NPM registry packages,

00:14:08.810 --> 00:14:12.380
you're going to have packaged JSON in your root folder.

00:14:12.380 --> 00:14:13.730
You will have dependencies

00:14:13.730 --> 00:14:16.610
installed from the NPM registry.

00:14:16.610 --> 00:14:17.825
Then you're going to reference

00:14:17.825 --> 00:14:20.210
those dependencies in your source code.

00:14:20.210 --> 00:14:22.580
At the end of the day, when you have to either

00:14:22.580 --> 00:14:25.205
develop the project or you have to build the project,

00:14:25.205 --> 00:14:27.350
you will have NPM scripts

00:14:27.350 --> 00:14:30.905
defined here in package Jason. And that's it.

00:14:30.905 --> 00:14:34.160
This is how all JavaScript projects look like.

00:14:34.160 --> 00:14:35.570
That's it for NodeJS.

00:14:35.570 --> 00:14:39.480
And I will see you in ES lint and preacher video.
