WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.300
hallow.

00:00:01.300 --> 00:00:02.310
In this video,

00:00:02.310 --> 00:00:07.090
we will create our own plowed function to send notification messages.

00:00:07.090 --> 00:00:07.830
Let's go.

00:00:07.830 --> 00:00:08.630
First of all,

00:00:08.630 --> 00:00:12.320
let's open these code than let's go to functions,

00:00:12.320 --> 00:00:13.830
index togs and,

00:00:13.830 --> 00:00:14.820
let's uncommon,

00:00:14.820 --> 00:00:19.180
this de fold cloud function that already pretty find for us.

00:00:19.180 --> 00:00:20.660
Let's save this file.

00:00:20.660 --> 00:00:26.160
Then let's open terminal and navigate to Functions folder in packages and we have NPM run

00:00:26.160 --> 00:00:27.010
start script.

00:00:27.010 --> 00:00:31.160
So let's run it and let's take a look what is going to happen?

00:00:31.160 --> 00:00:32.490
So first of all,

00:00:32.490 --> 00:00:38.500
it will don't lower all needed emulators for different services off fireplace,

00:00:38.500 --> 00:00:41.050
such as AM a leader for functions.

00:00:41.050 --> 00:00:41.840
That's fine.

00:00:41.840 --> 00:00:42.590
After that,

00:00:42.590 --> 00:00:44.760
you will see this sort of message,

00:00:44.760 --> 00:00:51.370
and it will say that first http function is initialized and available on these Ural and

00:00:51.370 --> 00:00:55.140
also we have this local host for 1000 functions.

00:00:55.140 --> 00:00:56.820
So let's copy that one.

00:00:56.820 --> 00:01:02.220
Let's go to browser and let's open this rural to check what is going to happen.

00:01:02.220 --> 00:01:07.610
This is like a dashboard where we control what services we developed locally.

00:01:07.610 --> 00:01:09.310
So right now we have only functions.

00:01:09.310 --> 00:01:12.440
Am a leader and it is available on these port,

00:01:12.440 --> 00:01:14.050
and if we go to logs,

00:01:14.050 --> 00:01:15.460
we can see that.

00:01:15.460 --> 00:01:19.730
Now we have one http function initialized so we can copy this year.

00:01:19.730 --> 00:01:22.780
L And then we can access this function.

00:01:22.780 --> 00:01:24.190
And from response,

00:01:24.190 --> 00:01:26.630
we can see hello from fire base.

00:01:26.630 --> 00:01:28.830
This is what we have inside this function.

00:01:28.830 --> 00:01:29.390
Defiant.

00:01:29.390 --> 00:01:30.820
So this is it.

00:01:30.820 --> 00:01:33.430
This is what our cloud functions.

00:01:33.430 --> 00:01:34.950
But right now,

00:01:34.950 --> 00:01:36.970
let's stop the emulator.

00:01:36.970 --> 00:01:37.850
We don't need it.

00:01:37.850 --> 00:01:42.500
And let's also delete these kind of function because this is a two fold one and we don't

00:01:42.500 --> 00:01:42.910
need it.

00:01:42.910 --> 00:01:44.070
But before we do this,

00:01:44.070 --> 00:01:49.340
I just want to point out that every function that exported from indexed oci yes,

00:01:49.340 --> 00:01:51.410
is treated as a function.

00:01:51.410 --> 00:01:54.330
So what it will do inside functions.

00:01:54.330 --> 00:01:58.160
We're gonna create new folder called a ser C Inside.

00:01:58.160 --> 00:02:02.380
We're gonna pour new file FC M doggy s From here,

00:02:02.380 --> 00:02:07.720
we will export our function and then we will re export it from here.

00:02:07.720 --> 00:02:08.340
Okay,

00:02:08.340 --> 00:02:10.780
so let's keep it as it is.

00:02:10.780 --> 00:02:13.520
Maybe we will name this function in advance.

00:02:13.520 --> 00:02:15.720
Let's say send FC M.

00:02:15.720 --> 00:02:16.440
And for now,

00:02:16.440 --> 00:02:17.360
let's comment it.

00:02:17.360 --> 00:02:17.900
Okay.

00:02:17.900 --> 00:02:18.320
Good.

00:02:18.320 --> 00:02:20.300
Now inside FC M.

00:02:20.300 --> 00:02:22.760
Let's import functions and admin.

00:02:22.760 --> 00:02:23.890
And from here,

00:02:23.890 --> 00:02:25.930
we're gonna export our first function.

00:02:25.930 --> 00:02:26.760
Will name it.

00:02:26.760 --> 00:02:30.390
Exports exports sand fc M.

00:02:30.390 --> 00:02:32.520
So we need to call functions.

00:02:32.520 --> 00:02:35.120
Then we need to pour https,

00:02:35.120 --> 00:02:37.410
and then we need to put on call.

00:02:37.410 --> 00:02:43.020
So this function that comes by default was on request type of function they want,

00:02:43.020 --> 00:02:45.180
but we will create is going to be on call.

00:02:45.180 --> 00:02:45.730
Okay,

00:02:45.730 --> 00:02:49.420
so this on cold function receives two arguments.

00:02:49.420 --> 00:02:50.560
So if we however,

00:02:50.560 --> 00:02:52.550
we can see data and contacts,

00:02:52.550 --> 00:02:59.980
So data is this data that we pass along with request and we can access it inside context

00:02:59.980 --> 00:03:07.170
contains some context information such as user information and user JWT Token.

00:03:07.170 --> 00:03:07.610
Go.

00:03:07.610 --> 00:03:08.050
Now.

00:03:08.050 --> 00:03:12.080
Since we export this function from FC M Dodgy s file,

00:03:12.080 --> 00:03:14.850
we can imported inside index togs.

00:03:14.850 --> 00:03:16.990
So here we can type Const.

00:03:16.990 --> 00:03:26.370
Let me type f equals require than we're gonna reference source folder and then f c M g s.

00:03:26.370 --> 00:03:27.590
So from dysfunction,

00:03:27.590 --> 00:03:31.340
we exports and FC M Now we need to destructor it.

00:03:31.340 --> 00:03:34.160
And then from this index togs,

00:03:34.160 --> 00:03:36.190
we're gonna re export it like this.

00:03:36.190 --> 00:03:42.760
So exports sand FC M is going to be sent FC M function that we get from FC M file.

00:03:42.760 --> 00:03:43.300
All right.

00:03:43.300 --> 00:03:47.250
And we have this warning saying expected one empty line.

00:03:47.250 --> 00:03:47.780
Okay,

00:03:47.780 --> 00:03:49.140
let me put it like this.

00:03:49.140 --> 00:03:51.000
Now we need to write our function.

00:03:51.000 --> 00:03:51.300
Okay,

00:03:51.300 --> 00:03:52.340
So first of all,

00:03:52.340 --> 00:03:56.620
we need to check if our user is present.

00:03:56.620 --> 00:04:02.720
If the person that tries to access this function is actually authenticated,

00:04:02.720 --> 00:04:09.640
we already have user parsed and validated by this type of function,

00:04:09.640 --> 00:04:10.560
which is culpable.

00:04:10.560 --> 00:04:14.140
Now we need to only check if the user is actually parsed.

00:04:14.140 --> 00:04:16.400
So if the user is not parsed,

00:04:16.400 --> 00:04:18.270
it means that user is not present.

00:04:18.270 --> 00:04:18.700
Okay,

00:04:18.700 --> 00:04:24.710
for that we can create a helper function here that we will name check if off check.

00:04:24.710 --> 00:04:27.060
If authenticated inside this function,

00:04:27.060 --> 00:04:28.650
we're gonna pass context,

00:04:28.650 --> 00:04:32.160
and then we're gonna call it from our function like this.

00:04:32.160 --> 00:04:35.900
Check if off and then we're gonna pass context.

00:04:35.900 --> 00:04:37.770
And from this check if off,

00:04:37.770 --> 00:04:39.060
we will do the next.

00:04:39.060 --> 00:04:43.500
If context dot auth it has off object inside.

00:04:43.500 --> 00:04:48.120
So if I pour context and then dar here confined off.

00:04:48.120 --> 00:04:52.210
So if this context not off is undefined.

00:04:52.210 --> 00:04:54.870
So if we don't have any off object,

00:04:54.870 --> 00:04:58.050
then we're gonna throw new functions.

00:04:58.050 --> 00:05:00.120
Dar Https.

00:05:00.120 --> 00:05:03.140
Http error So this is Paschall.

00:05:03.140 --> 00:05:10.590
Let's say syntax that will give an error to decline our reason will be on authenticated and

00:05:10.590 --> 00:05:12.360
message is going to be.

00:05:12.360 --> 00:05:15.020
You have to be signed in.

00:05:15.020 --> 00:05:15.780
Okay,

00:05:15.780 --> 00:05:16.270
good.

00:05:16.270 --> 00:05:17.800
Here we are done.

00:05:17.800 --> 00:05:22.150
Our next step is to access data that we get from the request.

00:05:22.150 --> 00:05:24.740
It is available under this data object.

00:05:24.740 --> 00:05:25.360
Over here.

00:05:25.360 --> 00:05:27.170
It is already parsed for us.

00:05:27.170 --> 00:05:28.750
So from this object,

00:05:28.750 --> 00:05:30.850
we can destructor next values,

00:05:30.850 --> 00:05:32.400
we will sand Chad.

00:05:32.400 --> 00:05:37.090
I d then title off the room or lets the title of the message.

00:05:37.090 --> 00:05:38.810
And then also,

00:05:38.810 --> 00:05:40.270
we're gonna send message.

00:05:40.270 --> 00:05:40.700
Okay,

00:05:40.700 --> 00:05:41.090
Good.

00:05:41.090 --> 00:05:45.470
Now we need to get our room data using this chair.

00:05:45.470 --> 00:05:47.080
I d or room I d.

00:05:47.080 --> 00:05:47.640
Okay,

00:05:47.640 --> 00:05:48.750
so from here,

00:05:48.750 --> 00:05:51.150
we're gonna have room snapshot.

00:05:51.150 --> 00:05:52.360
And now we need to access.

00:05:52.360 --> 00:05:57.740
Our database database can be accessed from server environment using firebase admin as

00:05:57.740 --> 00:05:58.180
decayed.

00:05:58.180 --> 00:05:59.950
So here at the top,

00:05:59.950 --> 00:06:02.380
let's put new viable database,

00:06:02.380 --> 00:06:05.010
and then we're gonna call admin database.

00:06:05.010 --> 00:06:10.800
Using database from server environment is very similar to how we access it from declined.

00:06:10.800 --> 00:06:11.350
Okay,

00:06:11.350 --> 00:06:13.260
so now we can call database,

00:06:13.260 --> 00:06:15.050
then we put rough,

00:06:15.050 --> 00:06:17.540
and now we need to access from data.

00:06:17.540 --> 00:06:21.350
So we have passed rooms than slash room I D.

00:06:21.350 --> 00:06:22.830
Which is going to be chat,

00:06:22.830 --> 00:06:23.220
i d.

00:06:23.220 --> 00:06:24.210
In our case,

00:06:24.210 --> 00:06:25.590
it returns the promise.

00:06:25.590 --> 00:06:28.040
That's why we can put away over here.

00:06:28.040 --> 00:06:30.940
And also let's put a sink to make it valid.

00:06:30.940 --> 00:06:32.860
So after we have reference,

00:06:32.860 --> 00:06:36.160
we call once and then we poor value.

00:06:36.160 --> 00:06:38.450
Now we get room snapshot,

00:06:38.450 --> 00:06:42.550
Then we can do the simple check if room snap shore exists.

00:06:42.550 --> 00:06:45.560
So if it does not exist,

00:06:45.560 --> 00:06:47.190
then we're gonna return False.

00:06:47.190 --> 00:06:47.740
Okay.

00:06:47.740 --> 00:06:48.740
From this function,

00:06:48.740 --> 00:06:51.740
it will send just false request back to the client.

00:06:51.740 --> 00:06:53.550
When we will call this function,

00:06:53.550 --> 00:06:56.430
then we need to get room data to get a user ID's.

00:06:56.430 --> 00:06:57.260
So for that,

00:06:57.260 --> 00:07:02.030
let's courtroom data and then we're gonna record from snapshot door value.

00:07:02.030 --> 00:07:02.710
Now,

00:07:02.710 --> 00:07:07.250
we need to check if our current user is an admin.

00:07:07.250 --> 00:07:15.290
So we can actually send the message because this function can be called by some user inside

00:07:15.290 --> 00:07:15.890
Chad.

00:07:15.890 --> 00:07:18.050
But this user is not an admin,

00:07:18.050 --> 00:07:22.250
and therefore this user is not able to send the message.

00:07:22.250 --> 00:07:23.300
Okay for that,

00:07:23.300 --> 00:07:26.920
we need to check against user admits so first,

00:07:26.920 --> 00:07:27.830
As you remember,

00:07:27.830 --> 00:07:31.260
all of our a race in the labors are stored are objects,

00:07:31.260 --> 00:07:36.980
so we need to transform them to normal javascript arrays for that Inside helpers.

00:07:36.980 --> 00:07:40.010
We already have dysfunction transformed to array.

00:07:40.010 --> 00:07:43.850
Let's just copy it from here and put it here at the bottom.

00:07:43.850 --> 00:07:49.740
Now we can create a helper function to check if the user actually can send the message.

00:07:49.740 --> 00:07:52.250
We can create a new function at the bottom again,

00:07:52.250 --> 00:07:54.420
and we will name it.

00:07:54.420 --> 00:07:56.070
Check if allowed.

00:07:56.070 --> 00:07:59.030
And again it will receive context.

00:07:59.030 --> 00:08:01.950
And also it will receive chat admits.

00:08:01.950 --> 00:08:03.310
Okay.

00:08:03.310 --> 00:08:06.830
And here we will do almost the same check.

00:08:06.830 --> 00:08:08.590
So if no,

00:08:08.590 --> 00:08:09.920
let's say Chad,

00:08:09.920 --> 00:08:15.010
add Mons dog includes context off,

00:08:15.010 --> 00:08:16.720
and then you i d.

00:08:16.720 --> 00:08:23.830
So if user that is trying to access this cloud function is in list off Chad Adnan's.

00:08:23.830 --> 00:08:25.720
So if this is not the case,

00:08:25.720 --> 00:08:29.750
then again we're gonna send exactly the same message over here.

00:08:29.750 --> 00:08:33.720
And maybe we're gonna say restricted access.

00:08:33.720 --> 00:08:34.710
All right,

00:08:34.710 --> 00:08:35.310
Good.

00:08:35.310 --> 00:08:38.500
Now we can call this function over here.

00:08:38.500 --> 00:08:39.960
Check if allowed,

00:08:39.960 --> 00:08:41.950
we will pass context inside,

00:08:41.950 --> 00:08:47.090
along with transform to array room data admits.

00:08:47.090 --> 00:08:47.660
Okay,

00:08:47.660 --> 00:08:48.240
perfect.

00:08:48.240 --> 00:08:53.200
Our next step is to get actual user ideas that will receive notifications.

00:08:53.200 --> 00:08:53.850
For that.

00:08:53.850 --> 00:08:57.150
We're gonna put a new valuable FC M users.

00:08:57.150 --> 00:08:58.220
And again,

00:08:58.220 --> 00:09:00.620
we're gonna call transform to array,

00:09:00.620 --> 00:09:04.200
and we're gonna put room data FC M users.

00:09:04.200 --> 00:09:04.930
Okay,

00:09:04.930 --> 00:09:08.780
now we will get all user tokens.

00:09:08.780 --> 00:09:09.470
For that.

00:09:09.470 --> 00:09:15.300
I proposed to again create a helper function that we will call get user tokens.

00:09:15.300 --> 00:09:16.950
So let's scroll to the bottom.

00:09:16.950 --> 00:09:19.100
And here we're going to create a new function,

00:09:19.100 --> 00:09:24.220
get user tokens so it will receive user I D.

00:09:24.220 --> 00:09:26.680
And he will get all user tokens.

00:09:26.680 --> 00:09:28.620
So we're gonna call our data ways,

00:09:28.620 --> 00:09:31.250
and we will receive user tokens.

00:09:31.250 --> 00:09:32.100
Snapshot.

00:09:32.100 --> 00:09:32.670
Okay,

00:09:32.670 --> 00:09:36.410
so it is going to be innocent function and logic will be the next.

00:09:36.410 --> 00:09:39.100
So we're gonna call database ref.

00:09:39.100 --> 00:09:41.600
Then we're gonna reference FC M tokens.

00:09:41.600 --> 00:09:44.960
Then we're gonna order by value,

00:09:44.960 --> 00:09:48.610
and we're gonna put equal to user I d.

00:09:48.610 --> 00:09:50.580
And then to get old tokens,

00:09:50.580 --> 00:09:52.660
we will call once value.

00:09:52.660 --> 00:09:53.000
Okay,

00:09:53.000 --> 00:09:53.460
Perfect.

00:09:53.460 --> 00:09:56.470
And don't forget to put a wait at the beginning.

00:09:56.470 --> 00:09:58.680
Now we have user token snap shirt.

00:09:58.680 --> 00:10:02.040
So if we don't have user tokens,

00:10:02.040 --> 00:10:04.150
snap short has Children.

00:10:04.150 --> 00:10:11.190
So here we check if actually this particular user has any tokens.

00:10:11.190 --> 00:10:14.320
If this user doesn't have any Children,

00:10:14.320 --> 00:10:17.800
it means this user doesn't have any tokens.

00:10:17.800 --> 00:10:19.920
So we can simply return an empty,

00:10:19.920 --> 00:10:20.260
Eric.

00:10:20.260 --> 00:10:22.760
So if user has tokens,

00:10:22.760 --> 00:10:28.290
then we call object dot keys and then user token snapshot dot value.

00:10:28.290 --> 00:10:28.850
Because,

00:10:28.850 --> 00:10:29.850
as you remember,

00:10:29.850 --> 00:10:33.160
we store our A raise in the railways as objects.

00:10:33.160 --> 00:10:35.640
And by calling this object of keys,

00:10:35.640 --> 00:10:38.470
we get the actual user tokens.

00:10:38.470 --> 00:10:39.100
Okay,

00:10:39.100 --> 00:10:39.480
Good.

00:10:39.480 --> 00:10:44.550
Now we can call this get user tokens from our cloud function and for dad,

00:10:44.550 --> 00:10:50.790
because we need to get user tokens for multiple users we need to use Promise that all to

00:10:50.790 --> 00:10:53.440
make it as optimized as possible.

00:10:53.440 --> 00:10:55.070
Okay for that Here,

00:10:55.070 --> 00:10:57.350
we're going to create a new valuable user.

00:10:57.350 --> 00:10:58.590
Tokens,

00:10:58.590 --> 00:10:59.560
promises.

00:10:59.560 --> 00:11:00.970
And what we will do.

00:11:00.970 --> 00:11:03.600
We will map every FC M user.

00:11:03.600 --> 00:11:04.560
We will map it.

00:11:04.560 --> 00:11:10.100
So every user i d is going to be mapped to get user tokens promised.

00:11:10.100 --> 00:11:12.350
And inside of it will has this user I d.

00:11:12.350 --> 00:11:12.790
Okay,

00:11:12.790 --> 00:11:13.150
good.

00:11:13.150 --> 00:11:15.830
Now we will receive our result.

00:11:15.830 --> 00:11:21.410
Or let's say we're going to receive user tokens result and we're gonna call,

00:11:21.410 --> 00:11:22.840
await promise.

00:11:22.840 --> 00:11:26.510
Not all user tokens promises,

00:11:26.510 --> 00:11:34.390
but the thing is that promise that all returns us an array off results like that and our

00:11:34.390 --> 00:11:36.270
user tokens promises,

00:11:36.270 --> 00:11:43.500
so every get user tokens promise returns us an array off user tokens.

00:11:43.500 --> 00:11:44.760
So in this way,

00:11:44.760 --> 00:11:47.280
we will end up with nested array like that.

00:11:47.280 --> 00:11:48.490
So for the first user,

00:11:48.490 --> 00:11:50.110
we will have these tokens.

00:11:50.110 --> 00:11:51.540
So for second,

00:11:51.540 --> 00:11:53.720
we can get these and so one and so on.

00:11:53.720 --> 00:11:54.950
So to avoid that,

00:11:54.950 --> 00:11:57.690
we need to flatten our Eric.

00:11:57.690 --> 00:11:58.360
For that,

00:11:58.360 --> 00:12:03.750
we can call dot reduce method available on a race and flatten the area.

00:12:03.750 --> 00:12:04.340
Okay.

00:12:04.340 --> 00:12:05.110
For that,

00:12:05.110 --> 00:12:09.280
we're gonna call user tokens result then reduced,

00:12:09.280 --> 00:12:11.930
so it will receive a callback function.

00:12:11.930 --> 00:12:14.550
And the second argument is the initial value.

00:12:14.550 --> 00:12:17.390
So initial well is going to be an empty array.

00:12:17.390 --> 00:12:21.450
And this doctrine use first is the accumulator value,

00:12:21.450 --> 00:12:22.760
which is going to be,

00:12:22.760 --> 00:12:23.620
Let's say,

00:12:23.620 --> 00:12:24.770
accumulated,

00:12:24.770 --> 00:12:25.420
Filkins.

00:12:25.420 --> 00:12:28.430
And second is going to be current value,

00:12:28.430 --> 00:12:30.160
which is user tokens.

00:12:30.160 --> 00:12:37.730
So this function will be run for every user tokens for every every element.

00:12:37.730 --> 00:12:38.380
OK,

00:12:38.380 --> 00:12:40.870
and here we will simply merge.

00:12:40.870 --> 00:12:44.250
These two erase using the spread operator.

00:12:44.250 --> 00:12:47.640
So we're gonna call accumulator tokens,

00:12:47.640 --> 00:12:49.530
plus user tokens.

00:12:49.530 --> 00:12:55.930
So in this way we will end up with one flat and array where every token like is a normal

00:12:55.930 --> 00:12:56.490
value.

00:12:56.490 --> 00:12:57.190
Okay,

00:12:57.190 --> 00:12:58.440
go it Now.

00:12:58.440 --> 00:12:59.290
Let's move on,

00:12:59.290 --> 00:13:06.900
then we're going to check if tokens dot length is equal to zero that will return from this

00:13:06.900 --> 00:13:10.820
function because we don't have any tokens to send two.

00:13:10.820 --> 00:13:13.660
And how the question is that we have tokens,

00:13:13.660 --> 00:13:21.570
how we're able to send our messages for that we can navigate to fire by his documentation.

00:13:21.570 --> 00:13:24.640
So this the one I have from previous videos.

00:13:24.640 --> 00:13:30.620
But if I go to server environment on the left and then built sent requests here,

00:13:30.620 --> 00:13:32.460
you can find multiple ways.

00:13:32.460 --> 00:13:36.880
How can I send a message to specify device?

00:13:36.880 --> 00:13:37.680
However,

00:13:37.680 --> 00:13:44.950
we need only one which is sent messages to multiple devices because we have multiple tokens

00:13:44.950 --> 00:13:47.050
and we have one message to send.

00:13:47.050 --> 00:13:48.940
So let me just copy message,

00:13:48.940 --> 00:13:49.640
actually,

00:13:49.640 --> 00:13:50.920
and I'm gonna put it here,

00:13:50.920 --> 00:13:54.220
and I'm gonna call it F c M message.

00:13:54.220 --> 00:14:01.210
So I were data will not look like this because every message can also have different

00:14:01.210 --> 00:14:01.870
structure.

00:14:01.870 --> 00:14:09.480
It can have this type of object with data topic and tokens have ever This is Onley for

00:14:09.480 --> 00:14:11.160
custom notifications.

00:14:11.160 --> 00:14:13.070
We don't need anything custom.

00:14:13.070 --> 00:14:15.550
We need a normal notification for that.

00:14:15.550 --> 00:14:17.960
We need to slightly modify this object.

00:14:17.960 --> 00:14:19.370
So instead of data,

00:14:19.370 --> 00:14:22.460
we're gonna poor notification object inside.

00:14:22.460 --> 00:14:25.880
And this notification object has two keys,

00:14:25.880 --> 00:14:28.910
which is title and also body,

00:14:28.910 --> 00:14:31.440
which is the actual notification message.

00:14:31.440 --> 00:14:32.540
So for body,

00:14:32.540 --> 00:14:37.480
we're gonna see pacify message that we get from data object inside this cloud function.

00:14:37.480 --> 00:14:38.850
So let's put message.

00:14:38.850 --> 00:14:39.940
And for title,

00:14:39.940 --> 00:14:42.500
we can pour our custom title,

00:14:42.500 --> 00:14:47.500
which is going to be titled that we sent with requests and also room name.

00:14:47.500 --> 00:14:48.000
Okay,

00:14:48.000 --> 00:14:51.050
so let's poor room title.

00:14:51.050 --> 00:14:56.050
So let's put title and then from data door name.

00:14:56.050 --> 00:14:59.710
So in this way we will have title and from name next to it.

00:14:59.710 --> 00:15:04.830
But let's put maybe room name in parent eases so it looks more aesthetic.

00:15:04.830 --> 00:15:05.160
Okay,

00:15:05.160 --> 00:15:05.520
go it.

00:15:05.520 --> 00:15:09.690
Now let's take a look on how we're able to send this.

00:15:09.690 --> 00:15:11.790
We can use admin dot messaging done,

00:15:11.790 --> 00:15:12.970
said multicast,

00:15:12.970 --> 00:15:13.880
and then message.

00:15:13.880 --> 00:15:14.220
Okay,

00:15:14.220 --> 00:15:14.590
good.

00:15:14.590 --> 00:15:17.530
So we need to use admin dot messaging.

00:15:17.530 --> 00:15:21.470
Let's create available over here called Messaging on.

00:15:21.470 --> 00:15:23.970
Let's call admin messaging.

00:15:23.970 --> 00:15:24.350
Okay.

00:15:24.350 --> 00:15:24.880
Perfect.

00:15:24.880 --> 00:15:27.140
Now we can actually copy this code.

00:15:27.140 --> 00:15:31.620
Let me copy only the first line because we're not going to use the promises in Texas.

00:15:31.620 --> 00:15:33.420
We will use a think away.

00:15:33.420 --> 00:15:36.770
So let me call const admin messaging.

00:15:36.770 --> 00:15:39.070
I'm gonna replace it with messaging,

00:15:39.070 --> 00:15:43.680
Then send multi cast and we're gonna send FC M message,

00:15:43.680 --> 00:15:45.830
and we're gonna put it in a veritable,

00:15:45.830 --> 00:15:48.520
which called Batch responds,

00:15:48.520 --> 00:15:50.940
and then we will await this command.

00:15:50.940 --> 00:15:51.380
Okay,

00:15:51.380 --> 00:15:51.750
Good.

00:15:51.750 --> 00:15:58.940
Now the thing is that tokens can be invalid or tokens can expire because,

00:15:58.940 --> 00:15:59.850
as you remember,

00:15:59.850 --> 00:16:02.360
on decline token can be refreshed.

00:16:02.360 --> 00:16:04.130
So when the token is refreshed,

00:16:04.130 --> 00:16:07.030
the previous token is not valid anymore.

00:16:07.030 --> 00:16:10.170
So this is the case when we have failed tokens.

00:16:10.170 --> 00:16:16.480
So we can actually use this snippet of code to detect which tokens are failing,

00:16:16.480 --> 00:16:18.430
and then we can deliver them from the database.

00:16:18.430 --> 00:16:20.730
Let me copy this snippet of code,

00:16:20.730 --> 00:16:23.190
and I can call it like this,

00:16:23.190 --> 00:16:28.590
so we will have much responds and we check if much responds.

00:16:28.590 --> 00:16:35.200
Failure count is greater than zero than for every buttery scones responses.

00:16:35.200 --> 00:16:41.720
We look over responses and we check if our responds was unsuccessful.

00:16:41.720 --> 00:16:43.260
So this is the case.

00:16:43.260 --> 00:16:47.310
We have all failed tokens pushed to this failed tokens rate.

00:16:47.310 --> 00:16:47.920
However,

00:16:47.920 --> 00:16:50.490
we want to do something with them.

00:16:50.490 --> 00:16:50.840
Right?

00:16:50.840 --> 00:16:53.170
We want to clear our database as well.

00:16:53.170 --> 00:16:53.960
For that,

00:16:53.960 --> 00:16:57.410
let's pull this failed tokens here to the top,

00:16:57.410 --> 00:16:59.460
and we will do the next thing.

00:16:59.460 --> 00:17:02.340
So we will update our failed tokens.

00:17:02.340 --> 00:17:04.400
With this push inside,

00:17:04.400 --> 00:17:06.260
we will remove this consul lock.

00:17:06.260 --> 00:17:08.500
And now that we have all failed tokens,

00:17:08.500 --> 00:17:14.230
we can actually call our data ways until it all of these tokens here at the end,

00:17:14.230 --> 00:17:19.480
we're going to create a new array off promises that we will execute with promise dot all

00:17:19.480 --> 00:17:23.410
again because we can until it multiple tokens from the database.

00:17:23.410 --> 00:17:27.410
For that we can create remove promises valuable.

00:17:27.410 --> 00:17:33.860
And we're gonna map every failed token to promise so failed tokens dot map.

00:17:33.860 --> 00:17:35.590
Then we will have token,

00:17:35.590 --> 00:17:39.400
and we're gonna call database dot draft.

00:17:39.400 --> 00:17:48.160
Then we're gonna call FC M Jokinen's than Tokcan and then door removed.

00:17:48.160 --> 00:17:48.950
Okay,

00:17:48.950 --> 00:17:49.590
Perfect.

00:17:49.590 --> 00:17:51.160
So in this way,

00:17:51.160 --> 00:17:53.640
we will end up with a ray off,

00:17:53.640 --> 00:17:54.990
remove promises,

00:17:54.990 --> 00:17:58.030
and at the very end off our cloud function,

00:17:58.030 --> 00:18:05.210
we can call return promise thought all and we will pour him of promises and then in case

00:18:05.210 --> 00:18:10.920
off any error we can use actually dot catch Syntex over here instead of a think await.

00:18:10.920 --> 00:18:16.280
Because this is our last operation and it looks more readable in this case.

00:18:16.280 --> 00:18:17.930
So in case of any other,

00:18:17.930 --> 00:18:20.510
we're gonna return error dot Message.

00:18:20.510 --> 00:18:21.020
Okay,

00:18:21.020 --> 00:18:21.890
Perfect.

00:18:21.890 --> 00:18:23.690
So this is it.

00:18:23.690 --> 00:18:25.580
This is our function,

00:18:25.580 --> 00:18:28.660
and this is how we're going to manage it.

00:18:28.660 --> 00:18:31.490
I guess that's it for this video.

00:18:31.490 --> 00:18:33.040
And in the next video,

00:18:33.040 --> 00:18:35.710
we'll we will start updating our client.

00:18:35.710 --> 00:18:39.620
We will test this function and what I proposed to do.

00:18:39.620 --> 00:18:41.180
As you can see in files.

00:18:41.180 --> 00:18:41.610
Here,

00:18:41.610 --> 00:18:43.470
we have you I d.

00:18:43.470 --> 00:18:44.180
Bach.

00:18:44.180 --> 00:18:46.310
Let's add this file to get ignored.

00:18:46.310 --> 00:18:50.530
You I or maybe we will add all look files to get ignored.

00:18:50.530 --> 00:18:51.660
We don't need them.

00:18:51.660 --> 00:18:51.910
Okay,

00:18:51.910 --> 00:18:52.360
cool.

00:18:52.360 --> 00:18:56.500
And we have this warning saying that expected to return at value.

00:18:56.500 --> 00:18:56.940
Okay,

00:18:56.940 --> 00:19:03.000
maybe we can actually update our yes lint so we can put a consistent,

00:19:03.000 --> 00:19:06.260
consistent return was going to be zero.

00:19:06.260 --> 00:19:06.820
Okay.

00:19:06.820 --> 00:19:09.980
And it seems like we already have a somewhere here.

00:19:09.980 --> 00:19:11.870
Let's put it to zero.

00:19:11.870 --> 00:19:19.310
And let's deliver it here to avoid this kind of warning inside our file and also for Islam

00:19:19.310 --> 00:19:19.310
,

00:19:19.310 --> 00:19:20.050
Darcy,

00:19:20.050 --> 00:19:24.640
because we have multiple es ling files inside our project.

00:19:24.640 --> 00:19:26.850
One in the root folder and one here.

00:19:26.850 --> 00:19:31.820
We also want to make sure that we add option route equals two.

00:19:31.820 --> 00:19:32.300
True.

00:19:32.300 --> 00:19:34.980
So now it is recognised by decode.

00:19:34.980 --> 00:19:35.530
Okay,

00:19:35.530 --> 00:19:36.110
perfect.

00:19:36.110 --> 00:19:38.120
So for now we're finished.

00:19:38.120 --> 00:19:39.690
Let's commit our changes.

00:19:39.690 --> 00:19:42.070
So let's never get back to the root folder.

00:19:42.070 --> 00:19:43.300
Then let's call,

00:19:43.300 --> 00:19:53.320
get everything and then get commit and let's say edit cloud function to sent FC M messages

00:19:53.320 --> 00:19:53.320
.

00:19:53.320 --> 00:19:54.420
Perfect.

00:19:54.420 --> 00:19:55.910
See you in the next one.

