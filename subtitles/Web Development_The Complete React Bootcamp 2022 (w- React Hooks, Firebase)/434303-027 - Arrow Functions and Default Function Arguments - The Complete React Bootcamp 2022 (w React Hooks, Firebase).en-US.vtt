WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.380
Hey, in this video,

00:00:01.380 --> 00:00:04.860
let's talk about arrow functions and default arguments.

00:00:04.860 --> 00:00:08.325
Let's go. If I'm going to navigate to file.js,

00:00:08.325 --> 00:00:12.135
let's create a simple function declaration

00:00:12.135 --> 00:00:15.165
that we will call my name.

00:00:15.165 --> 00:00:20.085
And it will print Andrea, which is my name.

00:00:20.085 --> 00:00:22.905
And let's create a second example

00:00:22.905 --> 00:00:24.675
which uses an arrow function.

00:00:24.675 --> 00:00:26.370
And arrow function is

00:00:26.370 --> 00:00:28.470
a function expression in the first place,

00:00:28.470 --> 00:00:31.170
which means it will be assigned to a variable.

00:00:31.170 --> 00:00:34.295
So I'm going to put const, my name,

00:00:34.295 --> 00:00:39.725
2 equals parentheses, then the arrow function,

00:00:39.725 --> 00:00:43.459
or sometimes it's called a fat function.

00:00:43.459 --> 00:00:45.860
And after that function body,

00:00:45.860 --> 00:00:50.840
I'm going to put console.log and drew two.

00:00:50.840 --> 00:00:53.225
Now, if I'm going to call my name,

00:00:53.225 --> 00:00:55.220
we know what is going to be the result.

00:00:55.220 --> 00:00:58.445
But if I'm going to call my name to,

00:00:58.445 --> 00:00:59.795
will it be the same?

00:00:59.795 --> 00:01:03.395
Let's check it out. Node file.js.

00:01:03.395 --> 00:01:08.030
And we see that the output is predicted because,

00:01:08.030 --> 00:01:09.740
well, it is just a function,

00:01:09.740 --> 00:01:11.780
but it is now an arrow function.

00:01:11.780 --> 00:01:13.025
So what is the difference?

00:01:13.025 --> 00:01:16.340
The first difference is that arrow functions have

00:01:16.340 --> 00:01:18.785
more lightweight syntax

00:01:18.785 --> 00:01:21.185
compared to function declarations.

00:01:21.185 --> 00:01:22.700
Well, the thing is that we're going to

00:01:22.700 --> 00:01:24.575
use arrow functions a lot,

00:01:24.575 --> 00:01:26.600
especially in modern JavaScript.

00:01:26.600 --> 00:01:29.435
They are even more preferred than

00:01:29.435 --> 00:01:31.520
function declarations that start

00:01:31.520 --> 00:01:33.080
with the function keyword.

00:01:33.080 --> 00:01:35.975
There isn't because the syntax is more lightweight,

00:01:35.975 --> 00:01:37.700
especially when we are going to

00:01:37.700 --> 00:01:40.444
supply callbacks, two different methods.

00:01:40.444 --> 00:01:44.240
It is more easier to supply an arrow function.

00:01:44.240 --> 00:01:46.010
So if I'm going to, for example,

00:01:46.010 --> 00:01:47.645
going to use array dot map,

00:01:47.645 --> 00:01:52.010
it is easier for me to supply an arrow function.

00:01:52.010 --> 00:01:55.175
It is more lightweight to write an arrow function

00:01:55.175 --> 00:01:58.925
instead of using function, then parentheses.

00:01:58.925 --> 00:02:00.845
And then now it looks like dad,

00:02:00.845 --> 00:02:02.735
it even might confuse some people.

00:02:02.735 --> 00:02:06.425
So eventually, it really does not matter which one,

00:02:06.425 --> 00:02:08.870
whether it is function expression

00:02:08.870 --> 00:02:10.340
or function declaration.

00:02:10.340 --> 00:02:12.620
It does not matter because at the end of the day,

00:02:12.620 --> 00:02:14.540
our code will be processed by

00:02:14.540 --> 00:02:16.610
the build tools that will take

00:02:16.610 --> 00:02:19.175
care about all of that under the hood.

00:02:19.175 --> 00:02:21.650
The second difference has something to do

00:02:21.650 --> 00:02:24.410
with these keyword in JavaScript.

00:02:24.410 --> 00:02:25.910
We're not going to cover

00:02:25.910 --> 00:02:27.815
this use case with the this keyword.

00:02:27.815 --> 00:02:29.780
But I would say that you should really

00:02:29.780 --> 00:02:32.045
go to Google and check it out yourself.

00:02:32.045 --> 00:02:35.450
Just look for arrow functions, these keyword.

00:02:35.450 --> 00:02:39.410
And the third difference is that arrow functions allow us

00:02:39.410 --> 00:02:43.699
to use even more shorter syntax than this.

00:02:43.699 --> 00:02:45.095
When we need to return

00:02:45.095 --> 00:02:48.440
a single value from an arrow function,

00:02:48.440 --> 00:02:50.645
we can omit using

00:02:50.645 --> 00:02:53.720
the curly brackets to specify function body.

00:02:53.720 --> 00:03:00.875
So for example, if my name to returns a string,

00:03:00.875 --> 00:03:03.590
Andrew, we can actually write it like that,

00:03:03.590 --> 00:03:07.040
the same we will have in my name. So let me write it.

00:03:07.040 --> 00:03:12.755
Return Andrew, and there will be no difference, right?

00:03:12.755 --> 00:03:14.285
But with arrow functions,

00:03:14.285 --> 00:03:16.025
we can even make it shorter.

00:03:16.025 --> 00:03:19.940
So I'm going to just copy string Andrew.

00:03:19.940 --> 00:03:22.369
I'm gonna remove curly brackets.

00:03:22.369 --> 00:03:24.290
And I'm just going to put a string,

00:03:24.290 --> 00:03:26.645
and now nothing will be changed,

00:03:26.645 --> 00:03:29.420
but the syntax is much, much shorter.

00:03:29.420 --> 00:03:33.575
Let's verify that my name to actually returns a string,

00:03:33.575 --> 00:03:35.765
Andrew, since it returns a value,

00:03:35.765 --> 00:03:38.660
I'm going to write it to another variable.

00:03:38.660 --> 00:03:43.910
Let's call it m and then console.log M.

00:03:43.910 --> 00:03:44.675
Great.

00:03:44.675 --> 00:03:46.220
Then I'm going to run the script

00:03:46.220 --> 00:03:48.875
again and you will see angio, correct.

00:03:48.875 --> 00:03:53.210
This is what gets returned from my name to it is very

00:03:53.210 --> 00:03:55.430
important to understand that if you're going

00:03:55.430 --> 00:03:58.760
to write it like that,

00:03:58.760 --> 00:04:01.730
the function will return nothing,

00:04:01.730 --> 00:04:04.100
which means it will return undefined.

00:04:04.100 --> 00:04:07.100
Let me run this script and you will see undefined.

00:04:07.100 --> 00:04:11.015
Well, because this is not a short syntax,

00:04:11.015 --> 00:04:13.025
this is the same as writing this,

00:04:13.025 --> 00:04:15.620
but without the return keyword.

00:04:15.620 --> 00:04:18.140
So it is important to understand that if you

00:04:18.140 --> 00:04:21.980
need or if you want to use shorter syntax,

00:04:21.980 --> 00:04:25.759
always remember to delete curly brackets.

00:04:25.759 --> 00:04:27.770
And also it is important to understand that

00:04:27.770 --> 00:04:31.400
shorter syntax only returns a single value.

00:04:31.400 --> 00:04:35.000
If you need to do some action within a function,

00:04:35.000 --> 00:04:38.330
you will not be able to use the short syntax

00:04:38.330 --> 00:04:39.845
because in this case you have

00:04:39.845 --> 00:04:42.515
nowhere to actually write your code.

00:04:42.515 --> 00:04:44.255
So in this case you are

00:04:44.255 --> 00:04:47.930
required to do some operation here, right?

00:04:47.930 --> 00:04:50.630
Right, your custom code, and then the end,

00:04:50.630 --> 00:04:53.855
you would return a value just like that.

00:04:53.855 --> 00:04:57.110
So there is no difference whether you do it like with

00:04:57.110 --> 00:04:58.970
the return keyword or you do it with

00:04:58.970 --> 00:05:01.310
the shorter syntax is the same.

00:05:01.310 --> 00:05:03.440
This is just your way how

00:05:03.440 --> 00:05:05.645
you write the code whenever possible,

00:05:05.645 --> 00:05:08.060
try to use shorter syntax because well.

00:05:08.060 --> 00:05:09.500
It is shorter.

00:05:09.500 --> 00:05:11.540
There is one thing that I want to mention about

00:05:11.540 --> 00:05:14.585
this short syntax is when you need to return an object.

00:05:14.585 --> 00:05:16.040
So when we have a situation,

00:05:16.040 --> 00:05:18.005
when we need to return an object,

00:05:18.005 --> 00:05:20.570
for example, name, entry.

00:05:20.570 --> 00:05:24.905
So this object I want to return from this arrow function.

00:05:24.905 --> 00:05:26.615
Well, with the return keyword,

00:05:26.615 --> 00:05:27.845
it looks like that.

00:05:27.845 --> 00:05:29.750
But how it is going to

00:05:29.750 --> 00:05:31.910
look like without the return keyword,

00:05:31.910 --> 00:05:34.835
will objects also have curly brackets

00:05:34.835 --> 00:05:37.955
and function body also have curly brackets.

00:05:37.955 --> 00:05:40.565
If we're going to put it like that.

00:05:40.565 --> 00:05:43.730
You will see syntax error because well,

00:05:43.730 --> 00:05:48.680
this is wrong JavaScript things that this is function,

00:05:48.680 --> 00:05:50.270
but it is not an object.

00:05:50.270 --> 00:05:52.445
To actually fix that problem,

00:05:52.445 --> 00:05:53.765
you have to wrap

00:05:53.765 --> 00:05:58.070
the returning object in parenthesis just like that.

00:05:58.070 --> 00:06:00.350
So this way it will understand that you want

00:06:00.350 --> 00:06:02.630
to return a single value that you

00:06:02.630 --> 00:06:05.645
want to use shorter syntax and you're returning

00:06:05.645 --> 00:06:09.560
an object to verify that lets you run the script.

00:06:09.560 --> 00:06:13.070
And we see that now we have our object returned.

00:06:13.070 --> 00:06:16.040
Great, so well, that sit about arrow functions.

00:06:16.040 --> 00:06:17.525
We're going to utilize them a lot.

00:06:17.525 --> 00:06:21.035
Let's talk about default function arguments.

00:06:21.035 --> 00:06:22.955
Well, that one is actually easy.

00:06:22.955 --> 00:06:24.860
There are lots of situations when we need to

00:06:24.860 --> 00:06:27.245
pass arguments to our functions.

00:06:27.245 --> 00:06:28.910
For example, my name to

00:06:28.910 --> 00:06:32.645
the only thing that function will do.

00:06:32.645 --> 00:06:34.760
It is going to console log

00:06:34.760 --> 00:06:36.695
the first argument that we are going to supply.

00:06:36.695 --> 00:06:38.795
And let's call that argument my name.

00:06:38.795 --> 00:06:40.460
So on the receiving side we have

00:06:40.460 --> 00:06:42.515
my name and then we print

00:06:42.515 --> 00:06:46.340
my name is my name. Great.

00:06:46.340 --> 00:06:49.880
Now if I'm going to call my name to,

00:06:49.880 --> 00:06:53.075
let me remove unneeded code.

00:06:53.075 --> 00:06:55.760
If I'm going to run my name to without

00:06:55.760 --> 00:06:58.955
supplying the parameter for that argument.

00:06:58.955 --> 00:07:00.665
Well, in this case,

00:07:00.665 --> 00:07:03.590
My name is going to be undefined because,

00:07:03.590 --> 00:07:05.240
well, we did not supply it, right?

00:07:05.240 --> 00:07:08.435
We did not provide any value for my name.

00:07:08.435 --> 00:07:12.754
To verify that we can see my name is undefined.

00:07:12.754 --> 00:07:14.720
And there are lots of situations when we have

00:07:14.720 --> 00:07:18.110
different circumstances in our code and variables.

00:07:18.110 --> 00:07:20.765
They do not produce expected values.

00:07:20.765 --> 00:07:22.985
They do not produce expected outcome, right?

00:07:22.985 --> 00:07:24.155
So in this case,

00:07:24.155 --> 00:07:25.715
we want to ensure that we

00:07:25.715 --> 00:07:27.770
always have some fallback value to

00:07:27.770 --> 00:07:32.300
supply the default value for that function argument.

00:07:32.300 --> 00:07:34.490
We need to just put equals

00:07:34.490 --> 00:07:36.920
and then provide a default value.

00:07:36.920 --> 00:07:38.465
I don't know, John.

00:07:38.465 --> 00:07:41.030
All right, now, whenever I do not

00:07:41.030 --> 00:07:43.295
pass any value for that,

00:07:43.295 --> 00:07:46.040
my name argument, John,

00:07:46.040 --> 00:07:49.429
will take place and will be used as a fallback.

00:07:49.429 --> 00:07:52.340
Now let's try and execute the script and you will

00:07:52.340 --> 00:07:55.190
see my name is John, right?

00:07:55.190 --> 00:07:57.905
Because I pass nothing.

00:07:57.905 --> 00:08:00.890
This was picked up and now it

00:08:00.890 --> 00:08:03.845
uses John and John gets printed.

00:08:03.845 --> 00:08:06.500
If I'm going to supply angio,

00:08:06.500 --> 00:08:09.995
John will not be used instead of

00:08:09.995 --> 00:08:13.295
Andrew because Andrew is not undefined.

00:08:13.295 --> 00:08:18.065
It is a value that we pass for that argument, right?

00:08:18.065 --> 00:08:19.730
Either run the script.

00:08:19.730 --> 00:08:21.710
Now I see my name is Andrew.

00:08:21.710 --> 00:08:23.750
Everything works great.

00:08:23.750 --> 00:08:26.615
So if I'm going to pass undefined,

00:08:26.615 --> 00:08:28.370
what will get printed?

00:08:28.370 --> 00:08:29.270
Correct?

00:08:29.270 --> 00:08:30.215
John?

00:08:30.215 --> 00:08:32.630
To verify we're under script again,

00:08:32.630 --> 00:08:34.130
my name is John.

00:08:34.130 --> 00:08:35.000
Perfect.

00:08:35.000 --> 00:08:36.740
Imagine the situations when we have

00:08:36.740 --> 00:08:38.839
multiple arguments in a function.

00:08:38.839 --> 00:08:42.230
Let's say my name and my age,

00:08:42.230 --> 00:08:47.060
and I'm going to print my name is and my age is going to

00:08:47.060 --> 00:08:52.010
be my h. If I do not supply any arguments,

00:08:52.010 --> 00:08:53.975
My name is going to be undefined.

00:08:53.975 --> 00:08:56.120
My h is going to be undefined.

00:08:56.120 --> 00:08:59.300
To verify undefined, undefined, perfect.

00:08:59.300 --> 00:09:02.945
Now, I can actually supply a default value

00:09:02.945 --> 00:09:07.219
for either all of them or only for one argument.

00:09:07.219 --> 00:09:09.140
So let it be my age

00:09:09.140 --> 00:09:12.020
and by default it will be equal to 10.

00:09:12.020 --> 00:09:13.820
So now if I rerun,

00:09:13.820 --> 00:09:15.620
you will see that my name stays

00:09:15.620 --> 00:09:18.320
undefined because we don't have any fallback value.

00:09:18.320 --> 00:09:20.045
And my age is 10.

00:09:20.045 --> 00:09:20.750
Maybe.

00:09:20.750 --> 00:09:24.425
Let's put it to john.

00:09:24.425 --> 00:09:27.725
Let's pour Andrew here.

00:09:27.725 --> 00:09:31.715
And let's put undefined to finalize our thoughts to,

00:09:31.715 --> 00:09:33.620
let's say straight and our knowledge.

00:09:33.620 --> 00:09:36.935
So for my name and you will be picked up,

00:09:36.935 --> 00:09:38.705
and for my age,

00:09:38.705 --> 00:09:41.795
10 will be picked up because we supply undefined.

00:09:41.795 --> 00:09:46.040
This is the same as not supplying a value at all, right?

00:09:46.040 --> 00:09:47.405
If I'm going to write it,

00:09:47.405 --> 00:09:50.510
my name is Andrew and my age is Stan.

00:09:50.510 --> 00:09:51.485
Perfect.

00:09:51.485 --> 00:09:52.700
Well, that's it.

00:09:52.700 --> 00:09:55.760
Now you know how we're going to utilize arrow functions.

00:09:55.760 --> 00:09:57.605
What are those? And now you know

00:09:57.605 --> 00:09:59.705
about default function arguments.

00:09:59.705 --> 00:10:02.010
See you in the next one.
