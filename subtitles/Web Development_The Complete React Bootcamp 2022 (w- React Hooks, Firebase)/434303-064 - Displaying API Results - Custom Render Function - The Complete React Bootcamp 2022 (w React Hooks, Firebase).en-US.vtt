WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.900
Hey,

00:00:00.900 --> 00:00:02.380
welcome in this video.

00:00:02.380 --> 00:00:04.990
Mobile display results from the A.

00:00:04.990 --> 00:00:05.360
P I.

00:00:05.360 --> 00:00:08.370
Let's go inside our code.

00:00:08.370 --> 00:00:09.870
The first thing we will do,

00:00:09.870 --> 00:00:16.330
we will pour our results our array of results into the state so we can access it within our

00:00:16.330 --> 00:00:19.900
component here I will define in your state.

00:00:19.900 --> 00:00:25.480
I will name it results and the update function is going to be set results.

00:00:25.480 --> 00:00:27.160
And by default,

00:00:27.160 --> 00:00:30.330
this state is going to be no.

00:00:30.330 --> 00:00:34.510
We can put an empty array to define it in advance.

00:00:34.510 --> 00:00:36.810
But I prefer to put now values.

00:00:36.810 --> 00:00:42.090
So we know that this value by default is not completely defined.

00:00:42.090 --> 00:00:44.870
And when we have our results,

00:00:44.870 --> 00:00:51.300
will call set results for with here in verbal put result eventually.

00:00:51.300 --> 00:00:52.060
All right.

00:00:52.060 --> 00:00:52.710
Now,

00:00:52.710 --> 00:01:00.180
our next step will be to conditionally render those results this state over here,

00:01:00.180 --> 00:01:03.220
right below the button so we can put our conditions.

00:01:03.220 --> 00:01:04.470
If we have ah,

00:01:04.470 --> 00:01:05.490
results,

00:01:05.490 --> 00:01:07.970
then we will display something.

00:01:07.970 --> 00:01:11.250
But instead of directly put in logic over here,

00:01:11.250 --> 00:01:18.030
we can put this logic into a custom render function and that we can call from here so we

00:01:18.030 --> 00:01:24.890
will call render results and whatever is return from this function will be displayed here.

00:01:24.890 --> 00:01:27.630
Some from this function we need to return market.

00:01:27.630 --> 00:01:31.050
Let's define this function over here.

00:01:31.050 --> 00:01:32.780
So what is going to be rendered?

00:01:32.780 --> 00:01:36.850
Results and he livable define a few conditions.

00:01:36.850 --> 00:01:43.160
So our first condition to be If we have results and results,

00:01:43.160 --> 00:01:46.460
Dutch length equals zero.

00:01:46.460 --> 00:01:50.930
So this condition will take place when we search for something.

00:01:50.930 --> 00:01:54.200
But a P I didn't return any result.

00:01:54.200 --> 00:01:57.210
So if we put something gibberish over here,

00:01:57.210 --> 00:01:58.610
this will be our case.

00:01:58.610 --> 00:01:59.990
So as you can see,

00:01:59.990 --> 00:02:01.750
we have an empty All right,

00:02:01.750 --> 00:02:03.730
so this will be uppercase.

00:02:03.730 --> 00:02:04.440
Now.

00:02:04.440 --> 00:02:13.860
Our second condition is going to be if we have results and results dot length greater than

00:02:13.860 --> 00:02:14.410
zero.

00:02:14.410 --> 00:02:16.640
So this is our main condition.

00:02:16.640 --> 00:02:17.750
And by default,

00:02:17.750 --> 00:02:20.850
when none off this conditions take place,

00:02:20.850 --> 00:02:22.900
we will return now.

00:02:22.900 --> 00:02:26.950
And whenever we try to display now inside j six,

00:02:26.950 --> 00:02:29.400
it will always just display nothing.

00:02:29.400 --> 00:02:31.190
So this is just empty.

00:02:31.190 --> 00:02:31.950
All right.

00:02:31.950 --> 00:02:33.570
So for the first condition,

00:02:33.570 --> 00:02:39.490
we will return a simple div with let's say no results.

00:02:39.490 --> 00:02:41.570
And for our main condition,

00:02:41.570 --> 00:02:42.580
we will return.

00:02:42.580 --> 00:02:43.970
Also idea.

00:02:43.970 --> 00:02:50.100
But here we will map our array off results to J six elements.

00:02:50.100 --> 00:02:56.680
So results dot map and inside we will put a callback function.

00:02:56.680 --> 00:02:58.800
And from this callback function,

00:02:58.800 --> 00:03:00.350
we will return Deve.

00:03:00.350 --> 00:03:04.850
And here we will receive item.

00:03:04.850 --> 00:03:09.220
And for this dif inside,

00:03:09.220 --> 00:03:16.890
we will put itim dot Let's see what to be received from the a p e.

00:03:16.890 --> 00:03:21.810
So we hav i turn dot show dot name.

00:03:21.810 --> 00:03:22.420
All right,

00:03:22.420 --> 00:03:30.130
so item that show dot name And don't forget to put the key prop to the wrapper elements.

00:03:30.130 --> 00:03:35.010
So I term dot show and let it be i d.

00:03:35.010 --> 00:03:37.120
So it is going to be unique.

00:03:37.120 --> 00:03:39.300
So this is the perfect case,

00:03:39.300 --> 00:03:39.960
all right.

00:03:39.960 --> 00:03:44.440
And let's remove those empty spaces now.

00:03:44.440 --> 00:03:45.280
It looks fine.

00:03:45.280 --> 00:03:47.340
Let's see what to do we have.

00:03:47.340 --> 00:03:50.210
So if I type girls and when I do search,

00:03:50.210 --> 00:03:53.270
I can see that my results is being displayed.

00:03:53.270 --> 00:03:55.860
And now if I type something gibberish,

00:03:55.860 --> 00:03:59.950
you can see we have no results because our array is empty.

00:03:59.950 --> 00:04:00.620
All right.

00:04:00.620 --> 00:04:01.120
Perfect.

00:04:01.120 --> 00:04:02.570
Everything seems fine.

00:04:02.570 --> 00:04:04.650
And we are almost there.

00:04:04.650 --> 00:04:10.740
One thing I want to do here is I want to re factor this fetch over here a little bit.

00:04:10.740 --> 00:04:13.750
I want to encapsulate and reuse this logic.

00:04:13.750 --> 00:04:14.340
So,

00:04:14.340 --> 00:04:15.300
under source,

00:04:15.300 --> 00:04:17.090
I will create in your folder.

00:04:17.090 --> 00:04:18.770
I will name it MISC.

00:04:18.770 --> 00:04:23.490
And here I will pour in your file named Conflict Orgs.

00:04:23.490 --> 00:04:26.280
And here we will put next things first.

00:04:26.280 --> 00:04:35.930
We will copy the base AP I your l from here and we will put it here A p I base your l and

00:04:35.930 --> 00:04:37.810
we will define it here.

00:04:37.810 --> 00:04:38.580
All right,

00:04:38.580 --> 00:04:39.480
next thing.

00:04:39.480 --> 00:04:44.340
But will you hear able to create a new function which is going to be in a sink function in

00:04:44.340 --> 00:04:45.860
order to use a sink,

00:04:45.860 --> 00:04:47.120
await syntax.

00:04:47.120 --> 00:04:49.420
So a sink function,

00:04:49.420 --> 00:04:58.020
Let's say a P I get and it will be just a wrapper around this fetch So a p I get and here

00:04:58.020 --> 00:04:59.450
we will put the next logic.

00:04:59.450 --> 00:05:01.190
So let's copy all of that.

00:05:01.190 --> 00:05:03.880
And here we will do so.

00:05:03.880 --> 00:05:06.230
Const responds,

00:05:06.230 --> 00:05:08.710
Let's say is going to be,

00:05:08.710 --> 00:05:10.750
Let's say this batch,

00:05:10.750 --> 00:05:18.850
we will put it over here and instead of directly using this strings over here first,

00:05:18.850 --> 00:05:23.230
we will use our AP I base euro.

00:05:23.230 --> 00:05:23.890
And then,

00:05:23.890 --> 00:05:25.930
instead of this query string,

00:05:25.930 --> 00:05:28.250
we will receive it as an argument over here.

00:05:28.250 --> 00:05:33.950
So we will put query string and instead off all of that,

00:05:33.950 --> 00:05:39.820
we will pour query string than response Responds there,

00:05:39.820 --> 00:05:40.640
Jason.

00:05:40.640 --> 00:05:46.960
And because it returns a promise we need to await it because we are using a sinker weights

00:05:46.960 --> 00:05:51.350
in Texas and we will simply return Greece poems.

00:05:51.350 --> 00:05:52.290
All right,

00:05:52.290 --> 00:05:53.400
something like that.

00:05:53.400 --> 00:05:57.720
Now we can remove all of that and we are ready to use our function.

00:05:57.720 --> 00:05:58.330
But also,

00:05:58.330 --> 00:06:00.710
don't forget to export it from here.

00:06:00.710 --> 00:06:03.040
Now what we will do here,

00:06:03.040 --> 00:06:12.200
we will import AP I get from from from misc con thick.

00:06:12.200 --> 00:06:14.650
And instead of using this fetch like that,

00:06:14.650 --> 00:06:22.660
we will simply do a p I yet and inside we need to pour the query string so we will copy it

00:06:22.660 --> 00:06:22.660
.

00:06:22.660 --> 00:06:30.730
This starting from here and we will put it like that and again it returns a promise.

00:06:30.730 --> 00:06:33.650
A sink function always returns a promise.

00:06:33.650 --> 00:06:36.250
So we will need to awaited.

00:06:36.250 --> 00:06:37.770
And as before,

00:06:37.770 --> 00:06:42.750
we will get our results and we will put him like this.

00:06:42.750 --> 00:06:50.030
We can get rid of that one and we are ready to go now What we did we let's they

00:06:50.030 --> 00:06:57.880
encapsulated the fetch logic Inside this custom a p I get function which gets results from

00:06:57.880 --> 00:07:00.520
the a p I that we define all right.

00:07:00.520 --> 00:07:02.440
Everything seems clean.

00:07:02.440 --> 00:07:02.850
Now.

00:07:02.850 --> 00:07:04.620
Let's commit our changes.

00:07:04.620 --> 00:07:05.850
So we will port,

00:07:05.850 --> 00:07:08.600
get at everything and get commit.

00:07:08.600 --> 00:07:17.900
And for the commit message displayed show results and small fetch re factor.

00:07:17.900 --> 00:07:19.650
Okay,

00:07:19.650 --> 00:07:20.370
Perfect.

00:07:20.370 --> 00:07:21.850
See you in the next one.

