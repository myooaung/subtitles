WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.055
Hey, there In previous video,

00:00:02.055 --> 00:00:04.980
I mentioned components and component-based approach.

00:00:04.980 --> 00:00:06.615
But what is the component?

00:00:06.615 --> 00:00:08.535
A component is just a block of

00:00:08.535 --> 00:00:11.280
HTML that can't be reduced in the future.

00:00:11.280 --> 00:00:13.110
Component-based approach is when

00:00:13.110 --> 00:00:16.125
an application is being built with components,

00:00:16.125 --> 00:00:18.480
better to think of a component as of

00:00:18.480 --> 00:00:21.465
a custom user created HTML tag.

00:00:21.465 --> 00:00:22.680
But on top of that,

00:00:22.680 --> 00:00:26.055
components can also include logic and state.

00:00:26.055 --> 00:00:28.170
For example, a component can be

00:00:28.170 --> 00:00:30.435
a button that changes color.

00:00:30.435 --> 00:00:34.110
Once clicked, the button changes its background color.

00:00:34.110 --> 00:00:37.110
We can name this component as color button.

00:00:37.110 --> 00:00:40.090
And later on in any part of HTML code,

00:00:40.090 --> 00:00:43.295
Use Color button as many times as we want.

00:00:43.295 --> 00:00:45.995
This is basically what we do with HTML tags.

00:00:45.995 --> 00:00:48.155
Components are no different.

00:00:48.155 --> 00:00:50.405
It has makes sense to think of them

00:00:50.405 --> 00:00:52.850
as building blocks for the app.

00:00:52.850 --> 00:00:56.885
Component-based approach forms a tree of components.

00:00:56.885 --> 00:00:58.280
On top of that tree,

00:00:58.280 --> 00:01:02.255
there is a root component which nests other components

00:01:02.255 --> 00:01:06.545
in React root component is almost always called app,

00:01:06.545 --> 00:01:10.715
or other components are nested within the app component.

00:01:10.715 --> 00:01:13.025
Components that lay on top

00:01:13.025 --> 00:01:15.695
are called top-level components.

00:01:15.695 --> 00:01:17.510
These are usually pages.

00:01:17.510 --> 00:01:20.030
Components that appear higher

00:01:20.030 --> 00:01:22.340
in the tree are called parents.

00:01:22.340 --> 00:01:25.640
Once that lay below are called children.

00:01:25.640 --> 00:01:28.400
Let's take a look at official Facebook page.

00:01:28.400 --> 00:01:30.890
Facebook is the creator of React,

00:01:30.890 --> 00:01:32.240
and that's why it is

00:01:32.240 --> 00:01:34.505
the best possible example to observe.

00:01:34.505 --> 00:01:36.350
I will try and split the space into

00:01:36.350 --> 00:01:39.545
components to give you a basic idea, Let's go.

00:01:39.545 --> 00:01:42.980
The entire website itself is the App component.

00:01:42.980 --> 00:01:44.780
At the top, we would have

00:01:44.780 --> 00:01:48.065
Navbar component and Navbar in the center,

00:01:48.065 --> 00:01:50.270
there is navigation component and

00:01:50.270 --> 00:01:53.195
every button inside is another component as well.

00:01:53.195 --> 00:01:56.735
On the right, it can be profiled navigation component,

00:01:56.735 --> 00:01:58.985
where every similar button is

00:01:58.985 --> 00:02:02.045
the same component but reused multiple times.

00:02:02.045 --> 00:02:04.520
Try it yourself and split the drop down

00:02:04.520 --> 00:02:07.730
below into components below now bar,

00:02:07.730 --> 00:02:09.890
it can be a homepage component.

00:02:09.890 --> 00:02:12.485
Homepage includes three components.

00:02:12.485 --> 00:02:14.060
Sidebar on the left,

00:02:14.060 --> 00:02:15.635
sidebar on the right,

00:02:15.635 --> 00:02:20.345
and feed in the center sidebar component includes menu.

00:02:20.345 --> 00:02:23.195
Feed component includes list of posts

00:02:23.195 --> 00:02:26.405
and sidebar on the right includes something else.

00:02:26.405 --> 00:02:28.535
It is totally up to the developers

00:02:28.535 --> 00:02:30.965
how to structure and create components.

00:02:30.965 --> 00:02:32.900
It is certainly possible to

00:02:32.900 --> 00:02:34.790
keep all the markup and all the

00:02:34.790 --> 00:02:36.725
logic in a single component

00:02:36.725 --> 00:02:38.929
without creating other components.

00:02:38.929 --> 00:02:40.340
But then the idea of

00:02:40.340 --> 00:02:43.640
component-based approach would be totally compromised.

00:02:43.640 --> 00:02:47.090
And it will be the same as not using components at all.

00:02:47.090 --> 00:02:48.320
At the end of the day,

00:02:48.320 --> 00:02:51.260
we end up with tree of components.

00:02:51.260 --> 00:02:53.000
And that tree has always

00:02:53.000 --> 00:02:55.850
one direction from top to bottom.

00:02:55.850 --> 00:02:58.444
If there are some changes in a parent component,

00:02:58.444 --> 00:03:01.160
all children of that component will also

00:03:01.160 --> 00:03:03.965
be affected simply because they are part of it.

00:03:03.965 --> 00:03:05.120
Let's conclude.

00:03:05.120 --> 00:03:06.740
Development with React is

00:03:06.740 --> 00:03:09.530
based around component-based approach.

00:03:09.530 --> 00:03:13.880
React app can be visualized as a tree of components.

00:03:13.880 --> 00:03:17.105
Components are reusable pieces of the app.

00:03:17.105 --> 00:03:19.130
Advantages of components are

00:03:19.130 --> 00:03:22.430
reusability and consistency across the application.

00:03:22.430 --> 00:03:25.550
Whether usability user post component can be

00:03:25.550 --> 00:03:27.590
inserted into any place in

00:03:27.590 --> 00:03:30.095
the app was just a single line of code.

00:03:30.095 --> 00:03:34.295
With consistency, user post component will always behave

00:03:34.295 --> 00:03:36.530
exactly the same regardless of

00:03:36.530 --> 00:03:39.290
the page or the place where it is used.

00:03:39.290 --> 00:03:40.880
Well, that's it.

00:03:40.880 --> 00:03:43.160
That's how all modern apps are

00:03:43.160 --> 00:03:45.485
built nowadays with components.

00:03:45.485 --> 00:03:47.165
I hope it makes sense.

00:03:47.165 --> 00:03:48.900
Cia.
