WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.845
Hey, in this video,

00:00:01.845 --> 00:00:04.950
we're going to talk about, good, Let's go.

00:00:04.950 --> 00:00:07.860
First of all, what is Git?

00:00:07.860 --> 00:00:11.820
Git is a project management tool that will allow

00:00:11.820 --> 00:00:16.485
us to keep track of all of our project files.

00:00:16.485 --> 00:00:19.350
For example, we're going to do a lot of changes to

00:00:19.350 --> 00:00:22.830
our source code when we're going to develop our projects.

00:00:22.830 --> 00:00:24.465
Maybe it will take one year.

00:00:24.465 --> 00:00:27.495
Maybe it will take two years to develop that project.

00:00:27.495 --> 00:00:30.060
After one year, I will probably not

00:00:30.060 --> 00:00:33.495
remember what I did in the past, how fear ago.

00:00:33.495 --> 00:00:38.760
And in order to have this project history Good exists.

00:00:38.760 --> 00:00:42.250
It will allow us to view what changes we made,

00:00:42.250 --> 00:00:46.130
what exactly went wrong at this particular step.

00:00:46.130 --> 00:00:48.305
Maybe we would like to change something.

00:00:48.305 --> 00:00:51.380
Maybe we would like to contribute with other people

00:00:51.380 --> 00:00:56.480
and in order to manage all of that, good exists.

00:00:56.480 --> 00:00:59.225
Now, let's see all of that in practice.

00:00:59.225 --> 00:01:02.240
First, I will create a new project folder.

00:01:02.240 --> 00:01:04.130
I already open VS Code.

00:01:04.130 --> 00:01:06.560
Now we need to open a project folder.

00:01:06.560 --> 00:01:10.160
I'm going to click File Open Folder.

00:01:10.160 --> 00:01:13.280
Then I'm going to navigate to

00:01:13.280 --> 00:01:16.880
a folder where I want to create another folder.

00:01:16.880 --> 00:01:19.760
This is going to be my test project,

00:01:19.760 --> 00:01:22.670
and I will open it in VS Code.

00:01:22.670 --> 00:01:23.795
Great.

00:01:23.795 --> 00:01:26.075
Now let's open integrated terminal.

00:01:26.075 --> 00:01:29.195
I'm going to press Control plus j.

00:01:29.195 --> 00:01:31.925
And it will open Git Bash for me.

00:01:31.925 --> 00:01:35.975
And as you can see, it is already in project folder.

00:01:35.975 --> 00:01:36.920
Great.

00:01:36.920 --> 00:01:39.590
Now, we need to initialize

00:01:39.590 --> 00:01:42.260
good in this project folder first.

00:01:42.260 --> 00:01:45.980
To do that, we need to type git in it.

00:01:45.980 --> 00:01:48.199
And you will see this message initialized

00:01:48.199 --> 00:01:51.095
empty git repository at this folder.

00:01:51.095 --> 00:01:54.440
And important point here that it will create

00:01:54.440 --> 00:01:56.900
a hidden folder dot

00:01:56.900 --> 00:01:59.690
get an order to view that hidden folder,

00:01:59.690 --> 00:02:02.735
we need to type ls minus a.

00:02:02.735 --> 00:02:05.840
It will show all files and folders in

00:02:05.840 --> 00:02:08.855
the current folder plus hidden folders.

00:02:08.855 --> 00:02:09.695
So good.

00:02:09.695 --> 00:02:11.690
And we can actually navigate to

00:02:11.690 --> 00:02:15.230
that folder by using cd to change directory.

00:02:15.230 --> 00:02:17.210
And then we can type

00:02:17.210 --> 00:02:21.335
ls again to view all files and folders.

00:02:21.335 --> 00:02:24.005
And you can see a bunch of things here,

00:02:24.005 --> 00:02:26.840
but we are not interested in them.

00:02:26.840 --> 00:02:28.640
Important point here that if we're

00:02:28.640 --> 00:02:30.605
going to delete this folder,

00:02:30.605 --> 00:02:34.400
all of our good project details gonna be deleted.

00:02:34.400 --> 00:02:38.825
So if I navigate back to the main folder,

00:02:38.825 --> 00:02:41.765
I will use CD and two dots,

00:02:41.765 --> 00:02:43.820
and now I will delete it.

00:02:43.820 --> 00:02:48.290
So I'm going to type a RAM than our F and

00:02:48.290 --> 00:02:52.985
folder name to delete all files and folders inside good,

00:02:52.985 --> 00:02:54.965
and get folder itself.

00:02:54.965 --> 00:02:57.110
Now you can see this master,

00:02:57.110 --> 00:02:59.180
master title disappeared here.

00:02:59.180 --> 00:03:04.130
It means that now get is fully deleted from this folder.

00:03:04.130 --> 00:03:06.365
Now let me type git in it again.

00:03:06.365 --> 00:03:10.085
And boom, good, is now initialized one more time.

00:03:10.085 --> 00:03:11.060
Great.

00:03:11.060 --> 00:03:14.720
Now, what about this master title over here?

00:03:14.720 --> 00:03:17.900
What is that? This is our current branch.

00:03:17.900 --> 00:03:20.285
We're going to talk about branches later.

00:03:20.285 --> 00:03:21.035
Right now.

00:03:21.035 --> 00:03:22.925
Do not focus on this.

00:03:22.925 --> 00:03:26.225
We're interested in get itself what it does.

00:03:26.225 --> 00:03:28.175
So what, what are the benefits?

00:03:28.175 --> 00:03:31.070
First, let's create a file over here.

00:03:31.070 --> 00:03:35.150
We're going to call it some file dot TXT.

00:03:35.150 --> 00:03:37.175
Here we're going to type hello.

00:03:37.175 --> 00:03:41.015
Maybe this is going to be our main project file,

00:03:41.015 --> 00:03:43.385
pretty dump, but it will do the trick.

00:03:43.385 --> 00:03:45.875
Now in order to use good,

00:03:45.875 --> 00:03:49.880
we can type git status in the first place to

00:03:49.880 --> 00:03:52.430
understand what is going on

00:03:52.430 --> 00:03:55.235
at this particular moment in a good project.

00:03:55.235 --> 00:03:57.290
So you can see no commits yet.

00:03:57.290 --> 00:04:00.230
We are currently on branch master and we

00:04:00.230 --> 00:04:03.590
have a bunch of untracked files to be more specific.

00:04:03.590 --> 00:04:07.070
For one file, some file.txt,

00:04:07.070 --> 00:04:10.340
nothing added to commit but untracked files present in

00:04:10.340 --> 00:04:14.750
a good project files can be in three different states.

00:04:14.750 --> 00:04:17.330
First state is untracked state,

00:04:17.330 --> 00:04:20.705
second state is stage state.

00:04:20.705 --> 00:04:24.080
Third state is when files are committed.

00:04:24.080 --> 00:04:27.560
So right now we are in untracked state.

00:04:27.560 --> 00:04:28.550
What does it mean?

00:04:28.550 --> 00:04:31.505
It means that get detected that we

00:04:31.505 --> 00:04:34.610
have some new files in our project,

00:04:34.610 --> 00:04:38.015
but they are not part of this good project yet.

00:04:38.015 --> 00:04:40.010
In order to add these files,

00:04:40.010 --> 00:04:42.920
to get to let them know that we want to

00:04:42.920 --> 00:04:44.150
track these files to

00:04:44.150 --> 00:04:46.535
include them as part of our good project,

00:04:46.535 --> 00:04:50.720
we need to add them to the stage state.

00:04:50.720 --> 00:04:52.820
To do that, we need to type just

00:04:52.820 --> 00:04:55.295
like it says here, git add file.

00:04:55.295 --> 00:05:00.200
So we can type git, add some file.txt.

00:05:00.200 --> 00:05:03.200
I pressed tab for auto-completion.

00:05:03.200 --> 00:05:06.545
So I just type some file,

00:05:06.545 --> 00:05:08.750
some F, then press Tab and it

00:05:08.750 --> 00:05:10.940
will allow to complete filename for me.

00:05:10.940 --> 00:05:14.420
But I can also do git add dot to add

00:05:14.420 --> 00:05:18.440
all files in this folder to the stage state.

00:05:18.440 --> 00:05:21.725
So the dot represents all files in the current directory.

00:05:21.725 --> 00:05:24.755
I'm going to use that command because it's shorter.

00:05:24.755 --> 00:05:25.835
Git add dot.

00:05:25.835 --> 00:05:30.035
Now you can see the color changed to blue over here.

00:05:30.035 --> 00:05:32.315
And what is happening.

00:05:32.315 --> 00:05:35.000
Let's type git status again to

00:05:35.000 --> 00:05:37.580
see what do we have no commits yet,

00:05:37.580 --> 00:05:39.200
changes to be committed.

00:05:39.200 --> 00:05:43.625
Now you can see we have new file, some file.txt.

00:05:43.625 --> 00:05:48.440
Great. It means that our file is in the stage state.

00:05:48.440 --> 00:05:50.300
And since we are using VS Code,

00:05:50.300 --> 00:05:53.405
VS Code has built in Git integration

00:05:53.405 --> 00:05:57.140
and disintegration is a really powerful tool.

00:05:57.140 --> 00:05:59.480
That's why here on the left panel we have

00:05:59.480 --> 00:06:02.630
this icon with one number inside it.

00:06:02.630 --> 00:06:03.755
Let's click on that.

00:06:03.755 --> 00:06:08.390
So these tab represents get integration.

00:06:08.390 --> 00:06:11.705
So you can see we have two dropdowns here,

00:06:11.705 --> 00:06:14.539
staged changes and changes.

00:06:14.539 --> 00:06:16.670
You can see that now our sum

00:06:16.670 --> 00:06:20.240
file.txt inside staged changes.

00:06:20.240 --> 00:06:23.150
So you can see on the left what was before,

00:06:23.150 --> 00:06:24.845
and on the right with green,

00:06:24.845 --> 00:06:27.590
what was added, since it is a new file,

00:06:27.590 --> 00:06:30.245
we see nothing and red on the left.

00:06:30.245 --> 00:06:33.155
Now, if you are struggling

00:06:33.155 --> 00:06:34.760
with all this good commands

00:06:34.760 --> 00:06:36.575
or I don't know For some reason,

00:06:36.575 --> 00:06:39.140
it's hard for you to remember all of them.

00:06:39.140 --> 00:06:41.540
You could always use Git integration here.

00:06:41.540 --> 00:06:44.615
So if I click minus here,

00:06:44.615 --> 00:06:46.940
it will delete this file from

00:06:46.940 --> 00:06:48.470
the stage state and it will

00:06:48.470 --> 00:06:50.840
revert it back to untracked state.

00:06:50.840 --> 00:06:53.525
Now, if I type git status,

00:06:53.525 --> 00:06:56.090
the terminal again, you can see

00:06:56.090 --> 00:06:58.535
untracked files, some file.txt.

00:06:58.535 --> 00:07:01.520
Now if I want to add this file to the stage state,

00:07:01.520 --> 00:07:03.485
I just click the plus sign.

00:07:03.485 --> 00:07:05.735
Boom, it, it is,

00:07:05.735 --> 00:07:08.165
it is in staged again. Great.

00:07:08.165 --> 00:07:10.370
Now, what is the stage state?

00:07:10.370 --> 00:07:13.730
Well, this stage state is basically that

00:07:13.730 --> 00:07:18.965
pre-operational stage at which files can be committed.

00:07:18.965 --> 00:07:20.720
So what is a commit?

00:07:20.720 --> 00:07:22.970
A commit is just a record in

00:07:22.970 --> 00:07:24.920
Git history and it

00:07:24.920 --> 00:07:27.185
represents changes made to the project.

00:07:27.185 --> 00:07:32.030
Now let's commit that file to our good history.

00:07:32.030 --> 00:07:33.950
So what we can do,

00:07:33.950 --> 00:07:37.280
we can type git commit and

00:07:37.280 --> 00:07:41.360
then we need to type minus M for commit message.

00:07:41.360 --> 00:07:46.220
And we will type added some file.txt.

00:07:46.220 --> 00:07:48.245
I'm going to execute that command.

00:07:48.245 --> 00:07:50.210
And you will see treated mode,

00:07:50.210 --> 00:07:52.460
one file changed, one insertion, great.

00:07:52.460 --> 00:07:57.200
And all changes on the left have disappear. That is fine.

00:07:57.200 --> 00:08:00.290
Now, if we're going to type git status again,

00:08:00.290 --> 00:08:02.495
you will see nothing to commit.

00:08:02.495 --> 00:08:05.135
This is because commit is gun.

00:08:05.135 --> 00:08:06.740
It's in the past already.

00:08:06.740 --> 00:08:08.765
Good keeps track of all of

00:08:08.765 --> 00:08:11.405
our commits that we've made in the past.

00:08:11.405 --> 00:08:14.750
In order to view Git history and the terminal,

00:08:14.750 --> 00:08:18.065
we have to type git log.

00:08:18.065 --> 00:08:23.540
We have one commit which we named edit some file.txt.

00:08:23.540 --> 00:08:26.885
Date is this and the author,

00:08:26.885 --> 00:08:29.840
my nickname and my e-mail and

00:08:29.840 --> 00:08:33.515
commit hash on master branch.

00:08:33.515 --> 00:08:37.325
Let's say I want to add new changes to that file.

00:08:37.325 --> 00:08:40.640
I'm just going to go ahead and modify this file.

00:08:40.640 --> 00:08:43.790
I'm going to type something dumped and save the file.

00:08:43.790 --> 00:08:45.950
On the left, you will see that we have

00:08:45.950 --> 00:08:48.125
again new changes to the file.

00:08:48.125 --> 00:08:50.645
And this is what we've added,

00:08:50.645 --> 00:08:52.835
this is what we had before.

00:08:52.835 --> 00:08:55.700
Now, the same steps.

00:08:55.700 --> 00:08:59.270
We need to first add these changes or that file

00:08:59.270 --> 00:09:02.990
that was changed to the stage state, right?

00:09:02.990 --> 00:09:05.825
And after that, we will be able to commit that file.

00:09:05.825 --> 00:09:08.270
Because now if I'm gonna do git

00:09:08.270 --> 00:09:11.405
commit and type something,

00:09:11.405 --> 00:09:13.460
you will see an error message.

00:09:13.460 --> 00:09:14.810
Well, it's not an error message,

00:09:14.810 --> 00:09:18.035
but it will not commit anything because

00:09:18.035 --> 00:09:21.845
good can only commit staged files.

00:09:21.845 --> 00:09:25.115
For example, if I'm going to create a new file,

00:09:25.115 --> 00:09:28.370
test.js and I'm going to type,

00:09:28.370 --> 00:09:30.425
I don't know, very basic

00:09:30.425 --> 00:09:32.900
thing in JavaScript, console log.

00:09:32.900 --> 00:09:33.830
Hello.

00:09:33.830 --> 00:09:35.825
I am going to go back to that tab.

00:09:35.825 --> 00:09:37.610
I'm going to type git status.

00:09:37.610 --> 00:09:40.130
You will see one file is modified,

00:09:40.130 --> 00:09:41.870
one file is untracked.

00:09:41.870 --> 00:09:44.915
Now I want to stage all of those files.

00:09:44.915 --> 00:09:48.470
I'm going to do git add dot.

00:09:48.470 --> 00:09:51.215
And you will see all of them are now staged.

00:09:51.215 --> 00:09:53.405
And if I'm going to type git commit,

00:09:53.405 --> 00:09:57.680
those staged files will be added to the new commit.

00:09:57.680 --> 00:09:58.475
All right?

00:09:58.475 --> 00:10:00.380
However, what if I don't

00:10:00.380 --> 00:10:02.660
want all of these files to be committed?

00:10:02.660 --> 00:10:04.550
Maybe I created that file,

00:10:04.550 --> 00:10:07.190
but I'm not ready to commit it yet.

00:10:07.190 --> 00:10:11.625
I just want to commit those changes to the history.

00:10:11.625 --> 00:10:14.080
So what I will do, I will

00:10:14.080 --> 00:10:17.890
remove test.js from this stage state,

00:10:17.890 --> 00:10:20.650
and I will leave only some file in this stage.

00:10:20.650 --> 00:10:22.930
So as I said before,

00:10:22.930 --> 00:10:25.600
git commits only staged files.

00:10:25.600 --> 00:10:29.320
So if I'm going to type git commit and I

00:10:29.320 --> 00:10:34.225
will type edited some file.txt.

00:10:34.225 --> 00:10:36.160
I will execute it.

00:10:36.160 --> 00:10:38.470
You will see test just stays because it

00:10:38.470 --> 00:10:41.320
is still untracked, uncommitted.

00:10:41.320 --> 00:10:43.375
And if I type git log,

00:10:43.375 --> 00:10:47.050
I will see now I have to commit grade.

00:10:47.050 --> 00:10:49.840
Now if I want to add test.js,

00:10:49.840 --> 00:10:54.270
I will type again git add dot, then git commit.

00:10:54.270 --> 00:10:57.170
And I will type edit, test.

00:10:57.170 --> 00:10:58.730
Yes, cool.

00:10:58.730 --> 00:11:00.350
Again, good luck.

00:11:00.350 --> 00:11:04.100
And I have my Git history over there.

00:11:04.100 --> 00:11:06.080
This is what good does.

00:11:06.080 --> 00:11:08.359
It allows us to create

00:11:08.359 --> 00:11:12.185
that project history through commit messages.

00:11:12.185 --> 00:11:14.990
But, okay, this seem useful,

00:11:14.990 --> 00:11:19.114
but I don't see the main point here to see all the files,

00:11:19.114 --> 00:11:21.470
all the changes that you've made

00:11:21.470 --> 00:11:24.230
to get project or different commands,

00:11:24.230 --> 00:11:27.560
like good show for example.

00:11:27.560 --> 00:11:30.950
So we can type git show and then commit

00:11:30.950 --> 00:11:33.080
hash in order to view the changes

00:11:33.080 --> 00:11:35.390
made on this particular commit.

00:11:35.390 --> 00:11:40.385
So I will just copy that and put good show cash message.

00:11:40.385 --> 00:11:42.020
We have that commit.

00:11:42.020 --> 00:11:43.790
This is the difference.

00:11:43.790 --> 00:11:45.890
In file.

00:11:45.890 --> 00:11:49.249
Some file.txt, we have

00:11:49.249 --> 00:11:53.090
one line edited and the second line edited.

00:11:53.090 --> 00:11:56.360
This is it. So now I agreed that

00:11:56.360 --> 00:11:57.710
this is not convenient to

00:11:57.710 --> 00:11:59.630
view everything through the terminal.

00:11:59.630 --> 00:12:01.145
That's why there are lots of

00:12:01.145 --> 00:12:03.995
VS Code extensions that we can

00:12:03.995 --> 00:12:08.900
install in order to visualize this process.

00:12:08.900 --> 00:12:12.320
So if I type git in extension search,

00:12:12.320 --> 00:12:14.630
you will see a lot of different extensions

00:12:14.630 --> 00:12:17.270
like good history,

00:12:17.270 --> 00:12:19.775
get lands, good graph.

00:12:19.775 --> 00:12:23.150
And all of them will help you to work with the good.

00:12:23.150 --> 00:12:26.270
They will allow you to visualize, reuse,

00:12:26.270 --> 00:12:31.355
and make your kit development as comfortable as possible.

00:12:31.355 --> 00:12:35.840
I personally do not use any of those because I think

00:12:35.840 --> 00:12:37.820
that this integration is more than

00:12:37.820 --> 00:12:40.955
enough and the rest will go on GitHub.

00:12:40.955 --> 00:12:42.395
In the second part,

00:12:42.395 --> 00:12:44.809
we're going to talk about the GitHub.

00:12:44.809 --> 00:12:48.800
Github is related to get what is GitHub.

00:12:48.800 --> 00:12:51.575
You will know all of that in the next video.

00:12:51.575 --> 00:12:53.340
See you there.
