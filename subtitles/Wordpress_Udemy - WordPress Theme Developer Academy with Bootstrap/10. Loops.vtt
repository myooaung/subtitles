WEBVTT

00:03.160 --> 00:07.900
In programming we can use loops to make repetitive tasks much easier.

00:07.900 --> 00:13.850
For example with a loop through all your friends names inside a database and then display them onto

00:13.870 --> 00:14.830
the screen.

00:15.280 --> 00:20.080
This saves type not the same line of code over and over again for each friend.

00:20.700 --> 00:26.120
In this video taken a look at the four types of loops we can use in pitch p.

00:26.280 --> 00:28.960
I'm going to begin with what's called a while loop.

00:29.920 --> 00:35.650
And while loops are basically rún a block of cold so long as a condition is true.

00:35.720 --> 00:44.110
So let's take a look AARD while while loop looks like in page B some when a create a variable set to

00:44.110 --> 00:45.050
be one.

00:47.680 --> 00:53.830
And a while loop is set out a little bit similar to a if statements that were looked at a few videos

00:53.830 --> 00:54.470
ago.

00:54.880 --> 01:03.130
So what the while key word the condition would in the brackets to test and then the outcome to perform

01:03.580 --> 01:05.320
between the curly braces.

01:06.110 --> 01:10.250
So I would start by check in if I were a variable of number.

01:11.830 --> 01:14.330
Is less than 10.

01:14.370 --> 01:19.130
So while our number is less than 10 you're going to create a echo.

01:21.280 --> 01:30.390
No and the retiled itself first and then I'll explain what to do when so is less than 10.

01:31.480 --> 01:33.360
I will also need a brain scan there.

01:33.390 --> 01:35.100
Can you see why in just a moment.

01:36.650 --> 01:41.770
And then the variable number were on two increments with D plus plus.

01:43.950 --> 01:47.000
OK so you may be looking at this and wondering what is going on.

01:47.550 --> 01:56.130
So basically were creating a loop amistad to test if the number is less than 10 which it is.

01:56.130 --> 01:59.000
So in that case you want to print out a number.

01:59.310 --> 02:01.850
So being number one is less than 10.

02:02.310 --> 02:09.030
And then once this is printed will it going to increment the number by using the plus plus size will

02:09.030 --> 02:11.890
change the value of number 2 and 2.

02:13.620 --> 02:17.950
So then this condition is still true because number two is still less than 10.

02:18.940 --> 02:21.460
So then the second time round on the loop will she get printed.

02:21.460 --> 02:24.230
Number two is less than 10.

02:26.060 --> 02:30.680
And then again it's incremented And then number becomes the value of free.

02:31.410 --> 02:34.290
Which again is still less than 10.

02:35.130 --> 02:37.450
So we'll get the text printed as screen.

02:37.820 --> 02:39.980
No free is less than 10.

02:40.800 --> 02:41.680
And so on.

02:41.890 --> 02:47.730
And this keeps repeating until the condition is no longer true or in our case until we get up to the

02:47.730 --> 02:49.050
number nine.

02:49.720 --> 02:51.290
So let's change it back to warn.

02:52.910 --> 02:56.870
Save and then refresh.

02:56.940 --> 03:03.440
Then we also get number one all the way through to 9 to be less than 10 and that's why we needed to

03:03.470 --> 03:09.010
insert a break tag just so each one of these is on a separate line and it's more readable.

03:10.150 --> 03:14.580
And the next one to take a look at a variance of the while loop.

03:14.690 --> 03:21.730
This is called a do while loop so the while loop that would just looked up will only work while a condition

03:22.120 --> 03:23.100
is true.

03:24.320 --> 03:30.720
However the Do While loop will always rule wants first before checking if a condition is true.

03:30.800 --> 03:35.050
So the code between the curly braces will always run a minimum of once.

03:36.220 --> 03:40.790
So let's take a look at how we can do a do while loop impact B.

03:42.300 --> 03:44.760
So we start with the do keyword.

03:46.880 --> 03:48.740
I never can just delete the brackets.

03:49.430 --> 03:51.940
Because if you go into to ruin once whether we do.

03:53.140 --> 03:55.030
So going to print to the screen.

03:55.450 --> 03:58.260
The value of the variable number.

03:58.750 --> 04:00.650
And then a break tag.

04:00.670 --> 04:01.960
So it's on its own line.

04:03.340 --> 04:09.190
So this section will always run and then the can provide a while and this is the condition we're going

04:09.190 --> 04:10.560
to test against.

04:10.810 --> 04:15.080
So while number again is less than 10.

04:16.560 --> 04:16.840
OK.

04:16.890 --> 04:22.590
So whatever we do will always get number printed to screen and then the loop will continue while the

04:22.590 --> 04:23.990
condition is true.

04:24.420 --> 04:30.260
So because this condition is true we should get a loop through all the way through to 9.

04:30.690 --> 04:35.210
If I need to put the increments inside there.

04:36.600 --> 04:38.290
So no plus plus.

04:39.300 --> 04:40.360
And save.

04:40.760 --> 04:41.930
And then refresh.

04:43.020 --> 04:43.280
Okay.

04:43.320 --> 04:45.670
So we get the values all the way through to 9.

04:47.830 --> 04:51.960
So let's see what happens if we changes to be greater than symbol.

04:52.860 --> 04:55.830
So of course one is not greater than 10.

04:55.830 --> 04:57.610
So this is false.

04:57.630 --> 05:01.650
So using a while loop won't get any from printed at all.

05:01.680 --> 05:07.240
The dew section will always run once and then we shouldn't get any fin after that.

05:07.950 --> 05:14.180
So let's test this and we just get the number one because the loop does not repeat.

05:16.030 --> 05:16.250
OK.

05:16.270 --> 05:17.540
So there's two more types.

05:17.550 --> 05:24.110
Aleve so we can look at impact P the for loop and the for each loop.

05:24.130 --> 05:30.430
So next one to take a look at the follow up for loops are useful when we know how many times we want

05:30.430 --> 05:37.840
to repeat the loop a while loop will run until a condition is no longer true whereas a for loop when

05:37.840 --> 05:40.290
it sets how many times the loop will run.

05:41.460 --> 05:43.740
So let's take a look at the for loop.

05:44.190 --> 05:48.450
So we use the four key word and then the brackets.

05:48.660 --> 05:52.620
And of course the curly races just like the other loops.

05:53.300 --> 05:57.730
But this time when it's pass in free parameters into the brackets.

05:59.170 --> 06:06.220
So the first volume need to enter is the initializer and this is effectively going to be like all variable

06:06.640 --> 06:08.290
that were used in the while loop.

06:09.410 --> 06:17.340
So we set the variable once more of number and then went to initializes to be zero.

06:19.060 --> 06:22.170
And then each one of these prompter's need to be separated.

06:22.270 --> 06:23.580
Weird is senechal on.

06:25.350 --> 06:29.700
The second prometa is our condition to test against.

06:29.700 --> 06:31.940
So when is the number variable.

06:32.370 --> 06:38.180
And want to test if this is less than or equal to the value of five.

06:39.100 --> 06:40.520
Once again a semicolon.

06:42.170 --> 06:45.510
And the third one we're going to use for incrementing.

06:46.590 --> 06:54.460
So every time go through the loop going to increments the variable of number by one on each loop.

06:54.540 --> 06:56.290
So no plus plus.

06:57.400 --> 07:03.260
So just like the other loops between the car races going to equal number.

07:04.060 --> 07:05.260
So no.

07:05.870 --> 07:10.110
And then the variable number and then the breaktime.

07:11.420 --> 07:13.550
And of the semicolon at the end.

07:14.160 --> 07:14.470
OK.

07:14.500 --> 07:16.530
That's what a for loop looks like.

07:16.540 --> 07:21.600
So once again we begin by Sir in a initial value of zero.

07:22.560 --> 07:24.270
And every time we loop around we check in.

07:24.270 --> 07:34.860
If the value is less than or equal to five it is going to echo the number and also increment by one

07:35.040 --> 07:35.920
on each loop.

07:37.360 --> 07:40.290
So let's save and then refresh.

07:41.430 --> 07:41.730
Great.

07:41.730 --> 07:47.650
So got all the value so what the initial value of zero and then we'll loop through until we get to the

07:47.650 --> 07:48.870
value of five.

07:52.170 --> 07:55.680
OK so the last type of loop will look in his video is the.

07:55.700 --> 07:57.190
For each loop.

07:57.450 --> 07:59.990
It's designed to work on arrays.

08:00.330 --> 08:06.750
So in the arrays video we looked at how to create a array and how to print a value to the browser by

08:06.750 --> 08:10.620
selecting it by its index number just like this.

08:13.560 --> 08:25.470
So you had an array named shapes our said that equal to an array with the values of square.

08:27.730 --> 08:28.830
Circle.

08:30.870 --> 08:41.010
And also triangle and they wanted to display any of these values inside the browser when needed to echo

08:41.610 --> 08:43.990
the array of shapes.

08:44.400 --> 08:49.380
And then inside the square brackets we needed to select the shape by it index number.

08:49.530 --> 08:52.410
So 0 1 and 2.

08:53.240 --> 08:55.180
So a triangle would be number two.

08:59.760 --> 09:06.840
So it the value of triangle created a new école for each array item can be a long boring task and in

09:06.840 --> 09:09.420
program we should always try to avoid repetition.

09:11.350 --> 09:11.570
OK.

09:11.620 --> 09:17.110
So let's take a look at how we can create a for each loop so we don't need this echo because we're going

09:17.110 --> 09:20.680
to do this inside the loop.

09:20.680 --> 09:28.660
So again if for each loop with the for each keyword and like the other loops have a set of brackets

09:29.110 --> 09:30.650
and then the curly braces.

09:32.440 --> 09:36.520
So the first we need to do is pass in the name of the array.

09:37.060 --> 09:39.430
So that is the name of shapes.

09:40.700 --> 09:47.520
And then every time we loop through the shapes array we need to store the values inside a new variable.

09:47.570 --> 09:52.620
So do this by declaring us and then a new variable name.

09:52.980 --> 09:54.480
So when a call is value.

09:56.290 --> 09:58.680
And then that creates our echo.

10:00.680 --> 10:08.540
So because of the new values stored in to our value variable when it's echo out the value variable and

10:08.540 --> 10:14.040
then we put a brake tag inside there and a semicolon.

10:15.020 --> 10:17.760
So that's how for each loop is laid out.

10:17.870 --> 10:25.700
So every time we loop through the shapes array will install these values inside a new variable which

10:25.700 --> 10:26.830
have called value.

10:27.820 --> 10:33.370
And also at each pass of the loop it also moves on to the next item in the array.

10:33.370 --> 10:38.500
This means that the loop will continue to live through all the values of the array until it finds the

10:38.500 --> 10:39.230
last one.

10:40.620 --> 10:44.250
So let's say this and then refresh the browser.

10:45.400 --> 10:48.160
I never got so loop through the first item.

10:48.360 --> 10:50.540
The second item on the third.

10:54.310 --> 10:59.490
And that's a lot more convenient way of printing out all the values of an array rather than selecting

10:59.530 --> 11:01.560
each individual index number.

11:02.390 --> 11:06.500
Okay so I hope this video leaves you with a better understanding of how loops work.

11:06.550 --> 11:07.820
MP HP.
