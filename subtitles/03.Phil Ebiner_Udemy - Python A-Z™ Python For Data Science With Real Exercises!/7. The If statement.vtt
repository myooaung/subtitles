WEBVTT
1

00:00:05.220  -->  00:00:05.670
Hello.

2

00:00:05.720  -->  00:00:07.710
Welcome back to the course of Python programming.

3

00:00:07.710  -->  00:00:10.170
Today we're going to learn about the if statement.

4

00:00:10.350  -->  00:00:14.730
In fact we're going to learn much more we're going to learn about the if statement the statement that

5

00:00:14.740  -->  00:00:20.580
Elif statement how to nest those statements and how to change those statements is going to be quite

6

00:00:20.580  -->  00:00:24.780
an interesting to toil and don't worry even though sounds like a lot will get through all of it.

7

00:00:24.780  -->  00:00:25.920
No problem.

8

00:00:25.920  -->  00:00:28.400
All right so let's get straight into it.

9

00:00:28.410  -->  00:00:30.950
We're going to take this to full screen mode.

10

00:00:31.080  -->  00:00:37.730
There we go and let's save this work book or notebook as the if statement.

11

00:00:38.070  -->  00:00:38.870
All right.

12

00:00:39.030  -->  00:00:40.380
So what do I have over here.

13

00:00:40.470  -->  00:00:45.990
Well what we're going to be doing is we're going to be generating random variables or random numbers

14

00:00:46.260  -->  00:00:51.960
that are normally distributed and we're going to be checking where those random numbers fall so they

15

00:00:51.960  -->  00:00:56.970
can either fall towards the left of 0 or towards the right of zero to the right of ones that can be

16

00:00:56.970  -->  00:01:00.150
greater than 1 less than 1 in the grid and to less than 2 and so on.

17

00:01:00.150  -->  00:01:05.850
So we're going to be using this as our guiding scale in terms of what's going on and we're going to

18

00:01:05.850  -->  00:01:12.060
be using the F F L F and L statements to create the code that's going to help us determine where those

19

00:01:12.060  -->  00:01:14.350
random numbers are falling is going to be quite exciting.

20

00:01:14.360  -->  00:01:16.410
Tural a bit of stats going to be in-wall.

21

00:01:16.470  -->  00:01:22.110
All right the first thing we need to do is we're going to need to import some pie and some pie is a

22

00:01:22.110  -->  00:01:26.530
package for scientific computations or calculations in Python.

23

00:01:26.640  -->  00:01:33.520
And usually it's imported as MP So basically we're importing some pie and we're doing it this alias

24

00:01:33.570  -->  00:01:34.540
so it's shorter.

25

00:01:34.620  -->  00:01:41.400
MP also by the way because we installed Python through Anaconda we already have an umpire and we can

26

00:01:41.400  -->  00:01:42.380
just import like that.

27

00:01:42.390  -->  00:01:47.880
If you install Python another way then you might not have it and you will need to first install this

28

00:01:47.880  -->  00:01:52.640
package into onto your machine and then you'll be able to import it.

29

00:01:52.650  -->  00:01:58.710
So we'll talk about how to install packages further down in the course so hopefully you already know

30

00:01:58.710  -->  00:02:03.570
either how to install them or you followed along with the tutorials at the start so you are also using

31

00:02:03.630  -->  00:02:05.520
Anaconda distribution.

32

00:02:05.520  -->  00:02:06.930
All right so there we go.

33

00:02:06.930  -->  00:02:13.510
Now let's say Braam and some PI dot random We need a specific function which is called Rand.

34

00:02:13.530  -->  00:02:19.400
So once again Rand and we'll talk about how all of this works further down in this course.

35

00:02:19.410  -->  00:02:24.810
But for now let's just use this because that will give us this function which will create these random

36

00:02:24.810  -->  00:02:25.840
variables for us.

37

00:02:26.130  -->  00:02:27.160
Let's run that.

38

00:02:27.210  -->  00:02:31.980
And now what we can do is we can say Arend and and just brackets.

39

00:02:32.010  -->  00:02:37.440
So once again we haven't spoken about functions and how they work but basically what this does is it

40

00:02:37.440  -->  00:02:43.920
creates a random number which is part of a set of normally distributed numbers so if we run that you'll

41

00:02:43.920  -->  00:02:50.070
see that there's a random number and that's normally just pure numbers that it's picking it out from

42

00:02:50.070  -->  00:02:56.790
are normally distributed with a mean of zeros standard deviation of 1 so hence that number will always

43

00:02:56.790  -->  00:02:59.820
be somewhere around zero it can be to the left to the right.

44

00:02:59.820  -->  00:03:03.540
But as you go further away it is less and less likely to be further away.

45

00:03:03.540  -->  00:03:05.410
So let's run this again.

46

00:03:05.490  -->  00:03:12.140
And by the way if you want to run and just not go to the next line which will be doing quite a lot in

47

00:03:12.140  -->  00:03:16.770
today's tutorial sort of pressing shift enter press control enter.

48

00:03:16.860  -->  00:03:20.790
So like that you're staying on the same line as you can see it's generating and you number every time

49

00:03:20.810  -->  00:03:21.060
.

50

00:03:21.300  -->  00:03:29.880
So what we want to do is we want to now use this in our exploration of the if else and elif elif statements

51

00:03:29.880  -->  00:03:29.940
.

52

00:03:29.940  -->  00:03:31.120
Let's dive straight into it.

53

00:03:31.120  -->  00:03:34.780
So I'm going to copy this bar up at the top because it's going to be handy for us.

54

00:03:34.920  -->  00:03:39.930
And what are we going to do is we're going to create a variable we're going to say X equals around end

55

00:03:39.950  -->  00:03:40.300
.

56

00:03:40.350  -->  00:03:44.400
And so basically we're putting a random number into that Birbal and then what we want to do is we want

57

00:03:44.400  -->  00:03:48.170
to check if x is greater than 1 we want to say.

58

00:03:48.240  -->  00:03:54.760
We want to create a variable called answer and we want to say it is greater than 1 right.

59

00:03:54.870  -->  00:03:56.760
And then we want to go here.

60

00:03:56.820  -->  00:03:58.930
We want to print x.

61

00:03:58.950  -->  00:04:03.680
So this is really not part of the of the if statement so this is the if statement.

62

00:04:03.750  -->  00:04:07.240
This is after the if statement want to print X and we want to also print.

63

00:04:07.290  -->  00:04:08.100
Answer.

64

00:04:08.130  -->  00:04:09.510
So let's have a look at this card.

65

00:04:09.510  -->  00:04:10.490
What did we just do.

66

00:04:10.590  -->  00:04:15.240
So basically we're saying we know that our number falls somewhere over here we can actually be very

67

00:04:15.240  -->  00:04:20.310
high or very low but most likely normally just with variables for some way here and even more likely

68

00:04:20.310  -->  00:04:25.290
if they fall here even more likely they fold here and so the closer you get to zero the more likely

69

00:04:25.590  -->  00:04:27.210
that that number is going to be there.

70

00:04:27.210  -->  00:04:30.690
So we're checking is our number that we're generating here.

71

00:04:30.690  -->  00:04:32.370
Did it happen to fall.

72

00:04:32.370  -->  00:04:35.600
Did it happen to be greater than once or is it over here on this side.

73

00:04:35.700  -->  00:04:40.110
So we're say if x is greater than 1 then we want to create a variable called answer.

74

00:04:40.170  -->  00:04:43.360
We want to say greater than 1 and then we want to print X..

75

00:04:43.370  -->  00:04:47.220
Just for verification purposes and we want to print the answer right.

76

00:04:47.250  -->  00:04:53.170
So let's see what happens if we just run this code so you'll see here something strange happened.

77

00:04:53.290  -->  00:05:00.040
First of all this is a number and it looks like X because we only have two prints so print x gave us

78

00:05:00.040  -->  00:05:04.520
this number so our X is actually lying somewhere in here between 0 and 1.

79

00:05:04.570  -->  00:05:07.150
So that means that this statement is false.

80

00:05:07.180  -->  00:05:11.940
And this code does not get executed and therefore we get this error.

81

00:05:12.160  -->  00:05:14.190
What does it say at the bottom name.

82

00:05:14.220  -->  00:05:15.790
Answer is not defined.

83

00:05:15.790  -->  00:05:18.850
That is correct because we've never created this variable answer.

84

00:05:18.940  -->  00:05:22.550
At the very start we never created it and therefore we got this error.

85

00:05:22.570  -->  00:05:27.910
So let's just run this code again I'm going to press control enter and let's wait until x is greater

86

00:05:27.910  -->  00:05:29.410
than 1 and see what happens.

87

00:05:29.410  -->  00:05:30.820
Then you add a second.

88

00:05:30.820  -->  00:05:31.180
There we go.

89

00:05:31.180  -->  00:05:33.100
So x is greater than 1.

90

00:05:33.250  -->  00:05:36.700
And as you can see the variable answer was created.

91

00:05:36.700  -->  00:05:40.500
It was set to greater 1 and then was X's printed and answers print.

92

00:05:40.540  -->  00:05:46.420
So what happens if I run the line again now this s'elp what will happen is X has been generated to a

93

00:05:46.420  -->  00:05:49.240
new number but answer is still the same why is that.

94

00:05:49.250  -->  00:05:53.530
Well because answer is left over from the previous time around the cell.

95

00:05:53.530  -->  00:05:58.060
And that means we need to get a read of answers so at the very start we are going to say answer equals

96

00:05:58.080  -->  00:05:58.550
none.

97

00:05:58.720  -->  00:06:01.150
And in Python a non is like a.

98

00:06:01.150  -->  00:06:03.290
In other programming languages.

99

00:06:03.310  -->  00:06:07.650
So basically what it does is here we're going to reset answer to none.

100

00:06:07.840  -->  00:06:12.450
Let's try run this now so you can see that there it's none none none.

101

00:06:12.460  -->  00:06:13.750
And now it's greater than 1 again.

102

00:06:13.790  -->  00:06:14.870
And now it's not again.

103

00:06:14.890  -->  00:06:15.720
All right so there you go.

104

00:06:15.720  -->  00:06:19.440
That's a great example of around it using the if statement.

105

00:06:19.450  -->  00:06:25.480
And it was so trivial that we actually didn't discuss how the if statement work so let's quickly go

106

00:06:25.480  -->  00:06:25.850
through it.

107

00:06:25.840  -->  00:06:27.990
So it's very similar to the While loop.

108

00:06:28.000  -->  00:06:29.710
If you look at it so this is the keyword.

109

00:06:29.710  -->  00:06:33.960
If then we've got the logical condition and then we've got the call on.

110

00:06:34.000  -->  00:06:36.140
And after that we've got the executable code.

111

00:06:36.160  -->  00:06:39.370
So if this condition is true then the code gets executed.

112

00:06:39.380  -->  00:06:43.390
The only difference to the while loop is that it doesn't come back and recheck that just keeps going

113

00:06:43.390  -->  00:06:43.420
.

114

00:06:43.420  -->  00:06:48.160
So once it's executed one the python keeps going further down along the code.

115

00:06:48.430  -->  00:06:50.410
So that's how the if statement works.

116

00:06:50.410  -->  00:06:54.280
Now let's have a look at the next statement the else statement.

117

00:06:54.280  -->  00:07:01.220
So we're actually going to copy all of this code put it in here and this time we're going to say here

118

00:07:01.270  -->  00:07:01.740
we're going to say.

119

00:07:01.750  -->  00:07:05.980
Else answer equals less than 1 right.

120

00:07:06.010  -->  00:07:12.550
So basically what we're saying if x is greater than once if X is like Lizer a here then you should put

121

00:07:12.550  -->  00:07:15.380
this value in to the variable answer else.

122

00:07:15.400  -->  00:07:22.180
So in all other situations which essentially means that X is lying over here answer should be said to

123

00:07:22.300  -->  00:07:25.570
the string less than 1 and then print x print answer.

124

00:07:25.600  -->  00:07:30.220
Once again indentation helps you understand where each of these modules ends.

125

00:07:30.220  -->  00:07:34.930
So let's run this and you can see that it's less than 1 so just visually compare that we are getting

126

00:07:34.930  -->  00:07:36.190
the correct result here.

127

00:07:36.500  -->  00:07:38.290
Yep does look correct.

128

00:07:38.290  -->  00:07:38.530
Right.

129

00:07:38.530  -->  00:07:40.840
So there's one less than 1.

130

00:07:41.000  -->  00:07:47.320
Again less than one and you can just keep going and see what happens so they get greater than 1.

131

00:07:47.560  -->  00:07:47.910
OK.

132

00:07:47.920  -->  00:07:54.100
So that's that if Steven L. statements so so far so good they all make complete sense and they're very

133

00:07:54.130  -->  00:07:55.240
very logical.

134

00:07:55.330  -->  00:08:00.860
And what we're going to do now is we're going to copy this and we're going to look at the next step

135

00:08:00.850  -->  00:08:01.790
up from there.

136

00:08:01.810  -->  00:08:04.400
We're going to look at the nested statements.

137

00:08:04.450  -->  00:08:06.820
So let's say nested statements.

138

00:08:06.820  -->  00:08:08.450
So what are we going to be looking at.

139

00:08:08.470  -->  00:08:14.320
Well first of all we already know we can distinguish if it's greater than 1 or less than or equal to

140

00:08:14.320  -->  00:08:15.130
1.

141

00:08:15.130  -->  00:08:19.890
Well now what we want to do is we want to find out three situations is it here greater than 1.

142

00:08:19.900  -->  00:08:23.820
Is it less than minus 1 or is it between minus 1 and 1.

143

00:08:23.830  -->  00:08:28.730
So it's probably the better way to raise it is is it greater is the variable greater than 1.

144

00:08:28.780  -->  00:08:32.320
Is it between minus 1 and 1 or is it less than minus 1.

145

00:08:32.320  -->  00:08:35.730
So let's try and do that where we have if x is greater than 1.

146

00:08:35.750  -->  00:08:37.620
So that's the first part right.

147

00:08:37.660  -->  00:08:44.190
And so now in the rest of the situations in this Else part which we got here in the rest of situations

148

00:08:44.200  -->  00:08:45.940
we've got to break them down into two.

149

00:08:45.940  -->  00:08:50.300
There is one situation where the variable happens to be here and the other situation when the variable

150

00:08:50.290  -->  00:08:51.370
happens to be here.

151

00:08:51.400  -->  00:08:55.040
So let's create a nother else if statement right.

152

00:08:55.100  -->  00:08:56.890
So we don't need that.

153

00:08:56.920  -->  00:09:05.590
We need to split it up into two here will say if x is greater than or equal to minus 1 then answer is

154

00:09:05.650  -->  00:09:09.170
between minus 1 and 1 else.

155

00:09:09.190  -->  00:09:12.390
Answer equals less than minus 1.

156

00:09:12.400  -->  00:09:14.230
So let's have a look at what was going on here.

157

00:09:14.230  -->  00:09:19.580
So this first part represents when x falls greater than 1 when x falls over here.

158

00:09:19.630  -->  00:09:26.320
Right then this whole second part this big second part are presents when x falls over here and is broken

159

00:09:26.330  -->  00:09:27.310
down into two bits.

160

00:09:27.320  -->  00:09:30.000
So here if x is greater than minus 1.

161

00:09:30.010  -->  00:09:32.360
So basically greater equal to than minus 1.

162

00:09:32.570  -->  00:09:33.140
There we go.

163

00:09:33.130  -->  00:09:35.660
It goes up to here then answers like that.

164

00:09:35.650  -->  00:09:42.220
And then while we're still in here we've got this other bit this second subpart which presents all the

165

00:09:42.220  -->  00:09:45.060
situations where an answer is less than minus 1.

166

00:09:45.080  -->  00:09:50.380
I know it can be a bit confusing or quite quite cumbersome at the start when you look at it but it's

167

00:09:50.380  -->  00:09:56.420
all quite logical it's just broken down into these nested if statements and hence that's what they are

168

00:09:56.410  -->  00:09:58.170
called Neston statements.

169

00:09:58.210  -->  00:10:00.560
So if we're on this line now let's give it a go.

170

00:10:00.590  -->  00:10:07.300
You'll see that 0.3 4 is indeed between minus 1 and 1 was due to a few more tries.

171

00:10:07.370  -->  00:10:08.750
There you go that's greater than 1.

172

00:10:08.770  -->  00:10:09.710
Correct.

173

00:10:09.980  -->  00:10:11.410
Let's have a look again.

174

00:10:11.740  -->  00:10:14.150
Let's go straight and let's see if we can get a small one.

175

00:10:14.170  -->  00:10:15.220
A less than minus 1.

176

00:10:15.280  -->  00:10:15.760
That's great.

177

00:10:15.760  -->  00:10:18.650
And one there's also greater than one.

178

00:10:18.660  -->  00:10:19.000
There we go.

179

00:10:19.000  -->  00:10:23.430
So minus one point ninety four is less than 1 so it is working correctly.

180

00:10:23.440  -->  00:10:24.750
That's a great start.

181

00:10:25.030  -->  00:10:29.640
And finally to answer this kind of concern that it is starting to look cumbersome.

182

00:10:29.710  -->  00:10:33.980
Imagine if we wanted to nest more and more you could keep doing it but it would look more and more it

183

00:10:33.970  -->  00:10:36.340
would be harder to read this type of code.

184

00:10:36.350  -->  00:10:39.260
That's why we've got a different type of approach.

185

00:10:39.350  -->  00:10:44.860
Let's create a new cell here and this one is going to be called chained statements.

186

00:10:45.010  -->  00:10:48.370
Now often even experienced programmers get this wrong.

187

00:10:48.380  -->  00:10:54.090
They think that what we're going to call chain statements is actually called nested That is not correct

188

00:10:54.110  -->  00:10:57.070
but let's first create it to see what's going on.

189

00:10:57.080  -->  00:11:03.730
So what we can do here is we can actually combine this else and this if into one operator which in other

190

00:11:03.730  -->  00:11:05.180
programming languages is called else.

191

00:11:05.200  -->  00:11:09.450
If in python like that or something got in Python is called elif.

192

00:11:09.590  -->  00:11:15.850
So if we combine them we can just do that and move that back so I press shift tab there to move two

193

00:11:15.860  -->  00:11:16.730
lines back.

194

00:11:16.780  -->  00:11:17.320
So there we go.

195

00:11:17.330  -->  00:11:24.560
So now we've got these three conditions and they're all nicely line by line under each other so if x

196

00:11:24.550  -->  00:11:32.320
is greater than one then l f which is basically else if x is greater than mine or equal to then minus

197

00:11:32.330  -->  00:11:36.830
1 so that means it's automatically up to here and then else it's less than minus 1.

198

00:11:36.860  -->  00:11:38.260
It goes all the way here.

199

00:11:38.260  -->  00:11:40.510
So as you can see these are chain statements.

200

00:11:40.540  -->  00:11:45.670
A lot of the time programmers get them wrong and can call them nested nested is this.

201

00:11:45.670  -->  00:11:46.810
This is chained.

202

00:11:46.900  -->  00:11:53.030
And let's see how this works as run this as you can see greater than 1 between minus 1 and 1.

203

00:11:53.120  -->  00:11:55.040
Again let's try get one.

204

00:11:55.080  -->  00:11:58.530
There's another greater than 1 there go less than minus 1.

205

00:11:58.610  -->  00:11:58.910
Great.

206

00:11:58.900  -->  00:12:05.620
So again the result is the same but this is much neater much easier to code faster and easier to read

207

00:12:05.620  -->  00:12:06.320
as well.

208

00:12:06.700  -->  00:12:13.740
And that is how we create if and else if statements or if elif and else statements in Python.

209

00:12:13.900  -->  00:12:15.070
It was quite a big tutorial.

210

00:12:15.080  -->  00:12:21.140
Hope you were able to follow along and definitely give them some practice so that you can see all of

211

00:12:21.130  -->  00:12:23.240
this in action and look for your next step.

212

00:12:23.360  -->  00:12:24.650
Until then be coding
