WEBVTT
1

00:00:05.180  -->  00:00:08.640
Hello and welcome back to the course by the program in two days.

2

00:00:08.650  -->  00:00:11.510
Tauriel we're going to talk about filtering doorframes.

3

00:00:11.640  -->  00:00:16.920
It's going to be a quite interesting tutorial and at the same time a very useful one because filtering

4

00:00:16.920  -->  00:00:23.250
doorframes That's a lot of data science is about filtering and being able to find the insides and subsetting

5

00:00:23.250  -->  00:00:23.970
in that way.

6

00:00:23.970  -->  00:00:29.760
Your daughter from so let's have a look at it this tutorial is going to be filter its own filtering

7

00:00:29.760  -->  00:00:30.090
.

8

00:00:30.280  -->  00:00:31.950
And I just asked her about filtering.

9

00:00:32.040  -->  00:00:35.120
All in all it's about Rose right.

10

00:00:35.130  -->  00:00:37.980
Don't filter by columns will be filtered by the columns.

11

00:00:37.980  -->  00:00:41.720
But what we are filtering the target or filter is Rose.

12

00:00:41.730  -->  00:00:47.910
So just think of filtering in the way you see filtering and Axelrad see that drove down and you select

13

00:00:47.910  -->  00:00:52.530
which let's say which countries you want to or which income groups you want you just one high income

14

00:00:52.530  -->  00:00:53.380
group and then excel.

15

00:00:53.400  -->  00:00:58.140
And very quickly just removes all other income groups and leaves you for table just with the high income

16

00:00:58.140  -->  00:00:58.680
groups.

17

00:00:58.680  -->  00:01:05.010
Or you can say all we're afraid that are less than two or all countries with or older phrase that are

18

00:01:05.190  -->  00:01:11.430
greater than 40 or all Internet users less than two or all countries starting with a something that

19

00:01:11.700  -->  00:01:14.050
does what we're going to be talking about today.

20

00:01:14.400  -->  00:01:15.840
Let's get into it.

21

00:01:15.880  -->  00:01:18.390
That's our favorite function stats head.

22

00:01:18.480  -->  00:01:19.530
There it is.

23

00:01:19.590  -->  00:01:20.680
What do we see.

24

00:01:20.730  -->  00:01:21.430
Our data set.

25

00:01:21.430  -->  00:01:23.540
We've seen this a million times.

26

00:01:23.610  -->  00:01:25.860
Let's get to the fun stuff stats.

27

00:01:25.920  -->  00:01:32.280
Daut Internet to type up something very strange and then you can tell me what we will see here.

28

00:01:32.280  -->  00:01:36.700
So we are saying stats dot Internet users is less than 2.

29

00:01:36.720  -->  00:01:37.810
What does that going to do.

30

00:01:37.840  -->  00:01:39.150
Was I going to keep us.

31

00:01:39.180  -->  00:01:39.800
Let's see.

32

00:01:39.860  -->  00:01:41.980
Let's have a look around that.

33

00:01:42.000  -->  00:01:42.620
Interesting.

34

00:01:42.630  -->  00:01:45.820
We've got some values and here we've got.

35

00:01:45.900  -->  00:01:52.620
False false false false false true false false false false false and then false walls falls et cetera

36

00:01:52.640  -->  00:01:52.760
.

37

00:01:52.860  -->  00:01:55.360
So we've got a few trues in here and a lot of false.

38

00:01:55.380  -->  00:01:55.970
Right.

39

00:01:55.980  -->  00:01:57.300
So what does this do.

40

00:01:57.300  -->  00:01:59.960
What does this give us.

41

00:01:59.970  -->  00:02:01.990
All right so we've got this object.

42

00:02:02.010  -->  00:02:04.260
And what is it going to be used for.

43

00:02:04.290  -->  00:02:05.470
How is it useful to us.

44

00:02:05.490  -->  00:02:11.400
Well basically what it's saying is in which Rose of this column is this condition met.

45

00:02:11.430  -->  00:02:12.810
And in which it isn't met.

46

00:02:12.810  -->  00:02:17.050
So what I'm saying is in the first row it's not meant this value's not less than two.

47

00:02:17.340  -->  00:02:18.930
The second row it's also not met.

48

00:02:18.960  -->  00:02:20.310
This value is not less than two.

49

00:02:20.490  -->  00:02:26.850
So Droste not mad or let's call them correctly so in the 0 0 number 0 in row number one in all of these

50

00:02:26.850  -->  00:02:29.250
it's not met and row number 11 it's met.

51

00:02:29.250  -->  00:02:35.340
So the number of Internet users a percentage of Internet users in rhÃ´ne number 11 is less than less

52

00:02:35.330  -->  00:02:39.010
than two than its met not met or not met but met and so on.

53

00:02:39.270  -->  00:02:40.230
OK beautiful.

54

00:02:40.230  -->  00:02:44.260
That's lovely Carol but what are we going to use this for how is this useful to us.

55

00:02:44.490  -->  00:02:50.400
Well let's say we take this and we do something even stranger will say filter will create a new object

56

00:02:50.670  -->  00:02:55.450
and put this value into filters so we don't have to spell we could specify brackets here we could run

57

00:02:55.470  -->  00:03:00.720
like that but Python knows right away that first you run something over here.

58

00:03:00.720  -->  00:03:03.910
Then you run the equals operator and then you put it in there.

59

00:03:03.930  -->  00:03:05.320
You can run it like that as well.

60

00:03:05.340  -->  00:03:09.350
So if I look at filter now you'll see that we've got those values in there.

61

00:03:09.660  -->  00:03:12.090
OK so things are getting very strange here.

62

00:03:12.090  -->  00:03:16.120
Why do we need this object called Filter what are we going to use it for.

63

00:03:16.410  -->  00:03:22.490
Well let's have a look what we're going to use it for is we going to say stats and remember how we would

64

00:03:22.500  -->  00:03:29.280
we would slice by the rows and columns and would say for it would slide by Rosen would say third row

65

00:03:29.370  -->  00:03:33.700
to the seventh row and it would extract the third row to the central.

66

00:03:33.990  -->  00:03:39.420
Or would say we want the 30 or fro to the hundred and thirty a row.

67

00:03:39.650  -->  00:03:45.070
That's what too much to say 30 or fro two I just don't want to sprint too much on the screen 30 to 40

68

00:03:45.100  -->  00:03:45.600
for all right.

69

00:03:45.600  -->  00:03:47.470
It would extract those values.

70

00:03:47.620  -->  00:03:54.150
Well you don't have to specify exactly the row numbers in the square brackets which you also can specify

71

00:03:54.150  -->  00:04:02.790
is the true false values so you can specify a list of true false values and then that way tell Python

72

00:04:02.820  -->  00:04:05.790
which exactly rows you want to extract.

73

00:04:05.790  -->  00:04:10.230
So here what I'm going to do is I'm going to put our filter in here so you know that filter.

74

00:04:10.230  -->  00:04:12.900
Is this object with true and false.

75

00:04:13.020  -->  00:04:15.010
And now we're going to parse it to stats.

76

00:04:15.030  -->  00:04:16.610
Let's see how states react.

77

00:04:16.770  -->  00:04:19.960
As you can see what happened is stats looks up.

78

00:04:20.070  -->  00:04:24.920
Whatever was unfilter and wherever it said false it did not take that trial so it said.

79

00:04:24.930  -->  00:04:30.240
All right so this falls corresponds to the row in place 0.

80

00:04:30.240  -->  00:04:35.670
This falls corresponds to the wrong place once so wherever it found a false It did not take that trial

81

00:04:35.880  -->  00:04:37.090
whenever it found it true.

82

00:04:37.140  -->  00:04:38.270
It did take Cattrell.

83

00:04:38.280  -->  00:04:39.120
So let's have a look.

84

00:04:39.120  -->  00:04:43.100
Eleven is true then we don't see how many entries are in the dot dot dot that's fine.

85

00:04:43.110  -->  00:04:45.840
But we also know that 172 is true.

86

00:04:45.870  -->  00:04:46.140
Right.

87

00:04:46.140  -->  00:04:47.220
So let's have a look here.

88

00:04:47.310  -->  00:04:51.660
We see 11 true and 172 is true.

89

00:04:51.660  -->  00:04:57.290
And notice that in all of these countries the percentage of Internet users is less than two.

90

00:04:57.480  -->  00:05:01.380
So to quickly recap what we did is we created a filter to check.

91

00:05:01.380  -->  00:05:05.890
So we used our doorframe to create a filter or we call it a filter.

92

00:05:05.940  -->  00:05:06.180
Right.

93

00:05:06.180  -->  00:05:07.410
So it's just between us.

94

00:05:07.410  -->  00:05:09.250
In this course we're calling it a filter.

95

00:05:09.420  -->  00:05:15.760
We created an object called Filter to see in which positions Internet users is less and.

96

00:05:15.870  -->  00:05:22.890
Then we took this filter and we put it back into that same data set to select those rows where the filter

97

00:05:22.890  -->  00:05:23.590
is true.

98

00:05:23.820  -->  00:05:25.460
And that's exactly what happened.

99

00:05:25.740  -->  00:05:27.170
How great is that.

100

00:05:27.600  -->  00:05:34.010
And what's even greater is conceptually this is just like our.

101

00:05:34.270  -->  00:05:35.450
So congratulations.

102

00:05:35.460  -->  00:05:42.520
If you don't know or if you haven't learned before you already know conceptually how to create filters

103

00:05:42.520  -->  00:05:44.760
and are exactly the same process.

104

00:05:44.770  -->  00:05:50.050
And when you get to are you'll be able to do this if you've taken before you've learned are or if you

105

00:05:50.050  -->  00:05:51.140
know a bit of art.

106

00:05:51.280  -->  00:05:56.390
Then you'll find this concept very familiar and very easy to grasp and part of as well.

107

00:05:56.470  -->  00:05:58.480
That's one of the beauties about these two languages.

108

00:05:58.480  -->  00:06:00.310
There is a lot of similarities.

109

00:06:00.310  -->  00:06:00.700
All right.

110

00:06:00.700  -->  00:06:03.460
So now I can help myself but say awesome.

111

00:06:03.460  -->  00:06:05.620
That was so inspiring.

112

00:06:05.620  -->  00:06:11.900
And now we're going to let's use this in practice now.

113

00:06:11.920  -->  00:06:12.710
All right.

114

00:06:13.000  -->  00:06:18.690
We're going to say stat's dot birth rate is great and 40 right.

115

00:06:18.700  -->  00:06:23.660
So if we run that we'll get all the countries where the birth rate is greater than 40.

116

00:06:24.070  -->  00:06:24.920
OK.

117

00:06:25.060  -->  00:06:25.990
Very interesting.

118

00:06:26.140  -->  00:06:31.630
Let's now find out which countries these are so let's do the same thing put it in here.

119

00:06:31.630  -->  00:06:34.430
So say filter two equals.

120

00:06:34.690  -->  00:06:35.040
All right.

121

00:06:35.050  -->  00:06:43.930
And now if we put that into our stats doorframe we'll get all the countries where birth rate is greater

122

00:06:43.930  -->  00:06:44.670
than 40.

123

00:06:44.710  -->  00:06:52.900
So as we recall that is 40 more than 40 or more doses for more than 40 children are born per every thousand

124

00:06:52.900  -->  00:06:55.270
people of the population per year.

125

00:06:55.270  -->  00:06:56.340
That's what that means.

126

00:06:56.590  -->  00:06:57.520
So there we go.

127

00:06:57.520  -->  00:07:05.270
Those are the countries as you can see a lot of these countries are actually in Africa and that is our

128

00:07:05.470  -->  00:07:09.820
filter too what I want to show here is that we don't actually have to do this step we don't have to

129

00:07:09.820  -->  00:07:11.970
create the filter and then put it in here.

130

00:07:11.980  -->  00:07:17.050
That is just for us to understand the concept how it works what we would really do is we would just

131

00:07:17.050  -->  00:07:19.440
put this in here around this.

132

00:07:19.510  -->  00:07:22.290
You can see I get the same result exact same result.

133

00:07:22.480  -->  00:07:28.360
Now this might come off as a bit confusing because we hear about stats and here we've got stats but

134

00:07:28.360  -->  00:07:32.080
think of it always separately whenever you see something like this or especially at the start just think

135

00:07:32.080  -->  00:07:35.920
of it in this sense think that we're creating the filter first.

136

00:07:36.070  -->  00:07:39.270
So separate the two things we're creating the filter first grade.

137

00:07:39.280  -->  00:07:40.330
That's what happened in here.

138

00:07:40.540  -->  00:07:46.630
And now we're putting the filter inside starts to use it to find the rows that we're looking for.

139

00:07:46.630  -->  00:07:49.450
If you think of it that way it will it will never confuse you.

140

00:07:49.740  -->  00:07:54.650
It's very straightforward when you remember the way we learned it in the first place.

141

00:07:54.910  -->  00:07:55.250
All right.

142

00:07:55.270  -->  00:07:56.110
Beautiful.

143

00:07:56.380  -->  00:08:02.850
So now we're going to look at an even more important and interesting concept even more interesting.

144

00:08:03.100  -->  00:08:10.150
So let's say you want to combine those two filters that say you want to create a object or a door frame

145

00:08:10.150  -->  00:08:13.130
where you have introduces less than two.

146

00:08:13.300  -->  00:08:16.300
And at the same time birth rate greater than 40.

147

00:08:16.510  -->  00:08:16.750
Right.

148

00:08:16.750  -->  00:08:17.720
So how do you do that.

149

00:08:17.860  -->  00:08:23.550
Well the first idea first intention would be birth rate greater than 40.

150

00:08:23.920  -->  00:08:33.490
And we use our logical and operator in Python and stats enter and Internet users is less than 21 or

151

00:08:33.490  -->  00:08:33.900
20.

152

00:08:33.970  -->  00:08:35.690
Less than two and two.

153

00:08:35.960  -->  00:08:39.060
So if I run this you'll see that we actually get an error.

154

00:08:39.370  -->  00:08:40.440
Why do we get an error.

155

00:08:40.440  -->  00:08:42.220
Why does that happen.

156

00:08:42.220  -->  00:08:45.100
Very interesting concept because in our we wouldn't get an error.

157

00:08:45.100  -->  00:08:48.630
That's exactly how you do it and are what is going on here.

158

00:08:48.670  -->  00:08:49.180
Error.

159

00:08:49.180  -->  00:08:50.790
Why.

160

00:08:50.800  -->  00:08:53.160
All right let's have a look let's try to get to the bottom of this.

161

00:08:53.200  -->  00:08:56.150
All right so where did you know that you can separate these two things as do.

162

00:08:56.210  -->  00:08:56.790
Let's do that.

163

00:08:56.800  -->  00:09:00.700
Let's go and see if the error lies in this bit in this first step.

164

00:09:00.700  -->  00:09:03.910
It's not that yes indeed the error is here.

165

00:09:03.910  -->  00:09:05.560
So again error.

166

00:09:05.710  -->  00:09:07.150
Why.

167

00:09:07.270  -->  00:09:09.630
Why do we have an error what's going on.

168

00:09:09.940  -->  00:09:15.890
Well what is going on is Python is not a big surprise programming language.

169

00:09:16.060  -->  00:09:24.400
And by default what this and means is it is trying to work with two single values so it's saying this

170

00:09:24.430  -->  00:09:32.230
and is waiting it's expecting for a single true or false to be here and a single true or false to be

171

00:09:32.230  -->  00:09:32.810
here.

172

00:09:32.950  -->  00:09:37.140
And then it will combine them into either a true or a false.

173

00:09:37.150  -->  00:09:41.930
So this hand doesn't know how to work with objects like this.

174

00:09:41.950  -->  00:09:47.560
It doesn't know how to work with lists or doesn't know how to work with objects that have lots of values

175

00:09:47.560  -->  00:09:50.100
in them which we have on either side.

176

00:09:50.110  -->  00:09:56.020
So basically the error that we're getting here the truth value of a series is ambiguous.

177

00:09:56.050  -->  00:10:01.110
So these are a series and the truth value of a series and because.

178

00:10:01.120  -->  00:10:04.580
And what does that tell is telling us about the era that we've put the wrong thing here.

179

00:10:04.750  -->  00:10:05.070
No.

180

00:10:05.080  -->  00:10:07.690
Python is assuming that we did the right thing here.

181

00:10:07.720  -->  00:10:14.140
It's saying that it cannot sell what we have here and what we have said here so let me replace it.

182

00:10:14.140  -->  00:10:18.820
We already have filter one so we know that that is filter that is filter too.

183

00:10:18.860  -->  00:10:21.980
So just for simplicity's sake let's replace them here.

184

00:10:22.250  -->  00:10:26.240
And so we'll get the same error because that's exactly the same objects the way we just created them

185

00:10:26.270  -->  00:10:26.790
here right.

186

00:10:26.840  -->  00:10:32.870
So this filter to where you know what that object and filter what we also know that we've got that object

187

00:10:32.880  -->  00:10:33.290
.

188

00:10:33.290  -->  00:10:38.240
So basically what Python is saying here the truth value the three this care for the true failure of

189

00:10:38.240  -->  00:10:43.790
a series is ambiguous and by the way we're learning a bit quite a bit how to deal with errors here right

190

00:10:44.360  -->  00:10:45.160
how to understand them.

191

00:10:45.160  -->  00:10:47.630
So filter is a series right.

192

00:10:47.630  -->  00:10:50.940
It's got all these true and false filter too is also serious.

193

00:10:50.990  -->  00:10:52.450
True and False as well.

194

00:10:52.490  -->  00:10:59.160
So this and expects a true single true or false value here and a single true or false value here.

195

00:10:59.240  -->  00:11:04.790
Let me just move this a bit and therefore what is it's doing so implicitly what you're doing you're

196

00:11:04.790  -->  00:11:05.930
saying by putting this.

197

00:11:05.930  -->  00:11:07.380
And you're saying OK.

198

00:11:07.700  -->  00:11:10.440
Python says that this should be a single value.

199

00:11:10.460  -->  00:11:15.080
Let's try to convert this filter to a single value just this series to a single value.

200

00:11:15.190  -->  00:11:16.120
And same thing here.

201

00:11:16.220  -->  00:11:23.340
This series has to be converted to a single value but in reality that is not a straightforward operation

202

00:11:23.340  -->  00:11:23.360
.

203

00:11:23.370  -->  00:11:24.650
First of all it's not what we want right.

204

00:11:24.650  -->  00:11:30.680
We want this to be done on a vectorized level or on an element by element level like we did with addition

205

00:11:30.680  -->  00:11:32.900
and subtraction and division multiplication.

206

00:11:33.080  -->  00:11:34.370
Even the comparisons here.

207

00:11:34.380  -->  00:11:38.660
They've been done on a level on an A level by level on a element by element level.

208

00:11:38.660  -->  00:11:41.970
Right so every single element is being compared to 40.

209

00:11:42.120  -->  00:11:44.160
Every single element has been compared to two.

210

00:11:44.330  -->  00:11:45.460
So that's what we want.

211

00:11:45.560  -->  00:11:46.820
The behavior we want here.

212

00:11:47.090  -->  00:11:48.770
But that's not what's going to happen.

213

00:11:48.770  -->  00:11:54.620
And moreover while Python is trying to convert the series to a true a single true false value it can

214

00:11:54.620  -->  00:11:56.400
see that this series does have a look at it.

215

00:11:56.420  -->  00:11:59.230
You can see that the series has falses and trues.

216

00:11:59.390  -->  00:12:04.170
And how do you convert a series of falses and trews into a single true or false value.

217

00:12:04.380  -->  00:12:10.670
So on one hand somebody might speculate that if everything is true then the series should be true.

218

00:12:10.730  -->  00:12:15.380
Somebody else might speculate that if there is at least one true then the series should be true and

219

00:12:15.380  -->  00:12:16.520
that's what it means.

220

00:12:16.550  -->  00:12:21.050
Where we get this error the truth value is used is ambiguous.

221

00:12:21.050  -->  00:12:25.250
So it's not even warning us that we put the wrong thing here it's saying that OK assuming you put the

222

00:12:25.250  -->  00:12:30.350
right thing here I can get this to be a single true or false value I can't get this to be a single true

223

00:12:30.350  -->  00:12:31.090
or false.

224

00:12:31.520  -->  00:12:33.400
So how do we deal with this error.

225

00:12:33.620  -->  00:12:40.730
Well in python we need to specify different operation different ampersand or different and logical aberration

226

00:12:40.850  -->  00:12:42.640
which is the ampersand which is a bit.

227

00:12:42.660  -->  00:12:45.520
Why is unperson and this one will do it.

228

00:12:45.600  -->  00:12:50.320
Elmander elements if I run that you will see we've got filter and filter too.

229

00:12:50.540  -->  00:12:55.360
And in this case what's going on is only when both conditions are met.

230

00:12:55.490  -->  00:12:57.250
We'll get a true.

231

00:12:57.290  -->  00:13:05.410
So let's go ahead and try to put this into our stats out of frame stats for on this.

232

00:13:05.470  -->  00:13:10.910
You'll see now I've got countries with birthrate or 40 Internet users under 2.

233

00:13:11.000  -->  00:13:12.060
Now first of all this.

234

00:13:12.060  -->  00:13:12.630
Verify.

235

00:13:12.680  -->  00:13:13.520
Let's see.

236

00:13:13.550  -->  00:13:15.470
We know that here we've got over 40.

237

00:13:15.470  -->  00:13:15.710
Right.

238

00:13:15.710  -->  00:13:17.690
So let's see how many it is under 2.

239

00:13:17.690  -->  00:13:18.950
This one's under 2.

240

00:13:19.070  -->  00:13:21.530
This one's under two and this one's under two.

241

00:13:21.530  -->  00:13:22.790
So there's three and that's correct.

242

00:13:22.800  -->  00:13:24.680
That's good verification.

243

00:13:24.680  -->  00:13:28.220
Now let's go ahead and try use this approach.

244

00:13:28.220  -->  00:13:28.660
Right.

245

00:13:28.670  -->  00:13:33.480
Let's go stat's square brackets this approach and let's replace this for the ampersand.

246

00:13:33.530  -->  00:13:34.450
Again we get an error.

247

00:13:34.450  -->  00:13:36.460
What's going on why so many errors.

248

00:13:36.740  -->  00:13:43.130
Well in this case counters Complera a float array with a scalar or type of type Boolean.

249

00:13:43.130  -->  00:13:47.230
So basically what it's doing it's actually it's running one of these verses doing that.

250

00:13:47.240  -->  00:13:48.620
And then is doing the comparison.

251

00:13:48.620  -->  00:13:49.870
So that's what it's doing.

252

00:13:49.880  -->  00:13:56.450
So in order to specify the order of operations we need to put the brackets and that will help us solve

253

00:13:56.450  -->  00:13:57.980
this problem.

254

00:13:58.010  -->  00:14:04.550
So if we specify the brackets it will tell Python to do this first then do this and then only compare

255

00:14:04.550  -->  00:14:05.830
the results.

256

00:14:06.120  -->  00:14:09.040
And that's as you can see exactly the same.

257

00:14:09.050  -->  00:14:14.390
So it's a bit more involved than in our you'd need to know that that you need to specify a different

258

00:14:14.390  -->  00:14:16.190
logical operator here.

259

00:14:16.330  -->  00:14:21.650
The bitwise operator because this is not a vectorized programming language and Python by default doesn't

260

00:14:21.650  -->  00:14:26.060
know how to do boolean comparisons between two series of data.

261

00:14:26.150  -->  00:14:30.620
And also you need to specify these brackets because of Python.

262

00:14:30.630  -->  00:14:36.320
Otherwise mix takes from these actions or operations in the wrong sequence.

263

00:14:36.440  -->  00:14:42.090
But other than that very very similar to our the code that conceptually it's exactly the same.

264

00:14:42.100  -->  00:14:45.240
We're applying two filters in our data frame.

265

00:14:45.260  -->  00:14:46.070
So there we go.

266

00:14:46.110  -->  00:14:51.740
We get this result exactly the result that we are looking for.

267

00:14:51.740  -->  00:14:52.150
All right.

268

00:14:52.160  -->  00:14:57.650
I know this has been a quite a quite an intense tutorial we learned a very very powerful skill today

269

00:14:57.660  -->  00:14:57.890
.

270

00:14:58.130  -->  00:15:03.350
Let's take it to what one notch higher than I'll give you a quick exercise and then we'll wrap up for

271

00:15:03.360  -->  00:15:03.930
today.

272

00:15:04.220  -->  00:15:05.790
All right so another one.

273

00:15:05.930  -->  00:15:10.660
Just to recap and kind of look at a bit of a different example we'll say stats.

274

00:15:10.920  -->  00:15:12.930
And now let's say you know.

275

00:15:13.250  -->  00:15:15.510
Well let's look at stats or Ted.

276

00:15:15.670  -->  00:15:16.340
Right.

277

00:15:16.620  -->  00:15:17.260
Let's look at.

278

00:15:17.300  -->  00:15:23.010
And now we want to extract all of the ones that have just high income group STATS.

279

00:15:23.030  -->  00:15:29.020
And here again is stats dot income group remember logical operators.

280

00:15:29.030  -->  00:15:32.430
It's a double equal sign high income.

281

00:15:32.570  -->  00:15:35.630
And don't forget the capitalization of words matters.

282

00:15:35.690  -->  00:15:39.720
If I run that I'll get all the countries with high income there's quite a lot.

283

00:15:39.740  -->  00:15:43.330
Sixty seven countries when the high income group.

284

00:15:43.400  -->  00:15:49.910
Very simple so very simple approach isn't creating a logical series through stats income growth or comparing

285

00:15:49.910  -->  00:15:55.220
it to higher income repulsing into the stats data frame or a beautiful.

286

00:15:55.430  -->  00:15:57.570
And now what else.

287

00:15:57.620  -->  00:16:04.050
I wanted to show you quickly here is how to get the unique categories.

288

00:16:04.060  -->  00:16:06.090
This is a categorical variable obviously.

289

00:16:06.110  -->  00:16:07.680
How do we get the unique categories.

290

00:16:07.860  -->  00:16:14.590
Well very simple we say stats income group and there is a function unique.

291

00:16:14.600  -->  00:16:19.670
If you run that it will actually give you the value so sometimes in a doorframe you might have so many

292

00:16:19.670  -->  00:16:23.030
of them you might not be able to pull them out just by looking at it.

293

00:16:23.150  -->  00:16:25.750
If you want to get the uniques just get it take it like that.

294

00:16:25.880  -->  00:16:29.090
High income low income upper middle income and lower middle income.

295

00:16:29.100  -->  00:16:30.650
So go ahead and give us a go.

296

00:16:30.650  -->  00:16:33.830
Try using one of these instead of high income.

297

00:16:33.830  -->  00:16:35.110
That would be a good exercise.

298

00:16:35.300  -->  00:16:38.140
But the quick exercise that I did have in mind.

299

00:16:38.510  -->  00:16:39.700
Exercise.

300

00:16:39.800  -->  00:16:45.500
Find out everything about maltol from this data set.

301

00:16:45.500  -->  00:16:47.480
So there's a country there Multa.

302

00:16:47.630  -->  00:16:51.270
How would you find the row that corresponds to this country.

303

00:16:51.560  -->  00:16:55.590
Knowing what we've learned so far in this tutorial you'll be able to do that.

304

00:16:55.750  -->  00:16:59.330
Click pause on this video and go ahead and give it a try.

305

00:16:59.450  -->  00:17:02.750
And in three to one I'm going to show you how I would do it.

306

00:17:02.750  -->  00:17:09.130
I would say stats stats again create the filter country name brand name.

307

00:17:09.140  -->  00:17:11.630
And we're going to say Malta equals double equals.

308

00:17:11.620  -->  00:17:13.250
Forget that was Multa.

309

00:17:13.280  -->  00:17:14.930
Run that and there you go.

310

00:17:14.930  -->  00:17:17.560
You've got the row corresponding to Malta.

311

00:17:17.690  -->  00:17:23.030
So apparently the country code for multis MLT or the birthrate in Malta is 9.5.

312

00:17:23.030  -->  00:17:25.570
So per every thousand people every year.

313

00:17:25.620  -->  00:17:27.410
Nine point five people born.

314

00:17:27.410  -->  00:17:28.430
So not that many.

315

00:17:28.460  -->  00:17:33.160
Not 40 as we saw there was a few countries there were few countries with 40 and Internet users.

316

00:17:33.170  -->  00:17:34.490
The percentage is quite high.

317

00:17:34.550  -->  00:17:41.670
Sixty eight point nine percent and multiple longs to the high income group of countries they have castles

318

00:17:41.690  -->  00:17:43.290
and yachts on Malta.

319

00:17:43.300  -->  00:17:47.570
Malta on that island in Mediterranean.

320

00:17:47.930  -->  00:17:49.280
All right there we go.

321

00:17:49.280  -->  00:17:53.170
So hopefully you enjoyed the sartorial and you learn quite a bit.

322

00:17:53.210  -->  00:17:58.730
The main focus of today's Statoil was filtering our doorframes and that is selecting the rows that we

323

00:17:58.730  -->  00:17:59.010
want.

324

00:17:59.030  -->  00:18:05.010
So basically recreating the filters that we can use in Excel if you think of it that way in Python.

325

00:18:05.000  -->  00:18:08.640
Very powerful technique especially because we're using Python for data science.

326

00:18:08.630  -->  00:18:14.560
We're going to be needing this quite a lot this is a special type of subsetting we are subsetting are

327

00:18:14.570  -->  00:18:21.500
done a frame but it is a special type because we're doing it through the filtering approach where we're

328

00:18:21.500  -->  00:18:26.840
looking for certain values that meet certain criteria or rose that means certain criteria is in certain

329

00:18:26.850  -->  00:18:28.120
columns.

330

00:18:28.140  -->  00:18:29.920
OK so differently.

331

00:18:29.930  -->  00:18:30.860
Practice that.

332

00:18:30.870  -->  00:18:37.760
It's very valid it's a very valuable skill and it needs some practice to sink into your mind and for

333

00:18:37.760  -->  00:18:42.390
you to get good very comes off so that it's an on an intuitive level.

334

00:18:42.650  -->  00:18:44.090
And I'll leave you at that.

335

00:18:44.100  -->  00:18:45.760
I'll see you on the next tutorial.

336

00:18:45.770  -->  00:18:48.010
Until then happy coding
