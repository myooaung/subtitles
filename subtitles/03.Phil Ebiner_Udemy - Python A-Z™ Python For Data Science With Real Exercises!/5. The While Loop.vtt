WEBVTT
1

00:00:05.670  -->  00:00:07.620
Welcome back to A Course in Python programming.

2

00:00:07.690  -->  00:00:10.040
Today I've got a very exciting tutorial prepared for you.

3

00:00:10.050  -->  00:00:11.860
We're talking about the While loop.

4

00:00:12.090  -->  00:00:13.800
So let's dive straight into it.

5

00:00:13.800  -->  00:00:16.600
I've got a new computer notebook opened.

6

00:00:16.680  -->  00:00:18.890
Let's give this one a name.

7

00:00:18.900  -->  00:00:21.900
This is going to be the while loop.

8

00:00:21.960  -->  00:00:28.010
So go ahead and create one of these as well so we can follow along with the code as you can see here

9

00:00:28.030  -->  00:00:28.080
.

10

00:00:28.090  -->  00:00:31.100
Very remove the toolbar because we don't need it.

11

00:00:31.140  -->  00:00:35.530
We're going to be using shortcuts and we need to save some space and if we really need to you can also

12

00:00:35.550  -->  00:00:37.500
remove this top hitter as well.

13

00:00:37.500  -->  00:00:40.770
All right so what is the while loop and what is it used for.

14

00:00:40.770  -->  00:00:46.440
So first thing I wanted to mention that if you're taking this course for learning Python for data science

15

00:00:46.440  -->  00:00:51.510
and darn it looks think then chances are that you've heard about the our programming language maybe

16

00:00:51.510  -->  00:00:53.830
you've even taken my course in our programming.

17

00:00:53.850  -->  00:00:59.280
So here I wanted to mention that there is a difference between Python and are there actually many differences

18

00:00:59.310  -->  00:01:02.820
even though both tools can be used for data science.

19

00:01:02.850  -->  00:01:07.980
There are many differences and one of them is that Python is not a vectorized programming language so

20

00:01:08.100  -->  00:01:14.340
our is a vectorize programming language and a lot of the operations there all of the analytics and data

21

00:01:14.340  -->  00:01:21.810
mining and visualization of things are done through a vectorized approach and that is a great advantage

22

00:01:21.810  -->  00:01:27.130
of our programming language and it allows you to avoid creating loops all the time so you can use the

23

00:01:27.150  -->  00:01:31.740
Apply family functions and you can just work with vectors throughout the whole programming language

24

00:01:31.740  -->  00:01:32.320
of our.

25

00:01:32.460  -->  00:01:37.560
And most of the times you'll be able to avoid working with Fluke's whereas Python is an object oriented

26

00:01:37.560  -->  00:01:40.980
programming language and unfortunately we can have best of both worlds.

27

00:01:41.010  -->  00:01:45.990
You have to it's like a tradeoff and you have to choose one or the other either vectorized or Object-Oriented

28

00:01:46.020  -->  00:01:51.030
and therefore in Python you don't have that luxury of working with vectors although you do have lots

29

00:01:51.030  -->  00:01:55.050
of other advantages will which you will see throughout the course but at the same time you don't have

30

00:01:55.050  -->  00:01:59.190
that advantage of working with vectors and therefore you'll find yourself working or creating loops

31

00:01:59.190  -->  00:02:00.830
more often than you would in are.

32

00:02:00.840  -->  00:02:05.850
So therefore this tutorial is very important to understand the basis of what loop's artist is going

33

00:02:05.850  -->  00:02:07.410
to be our first loop the while loop.

34

00:02:07.560  -->  00:02:10.880
Then we'll look at other loops throughout this course.

35

00:02:11.100  -->  00:02:16.290
But at the same time story is important and we're going to look at the While loop now and I'll show

36

00:02:16.290  -->  00:02:22.200
you how it works in Python so it's important to get your head around it to understand the concept of

37

00:02:22.200  -->  00:02:22.920
lives.

38

00:02:22.920  -->  00:02:27.780
All right so first thing I'm going to do is I'm going to demonstrate what a WHILE loop would normally

39

00:02:27.780  -->  00:02:28.950
look in a programming language.

40

00:02:28.950  -->  00:02:34.290
So we're talking like languages like R or C C++ or in Java.

41

00:02:34.290  -->  00:02:39.480
So you know all the standard more common programming language so let's have a look at this.

42

00:02:39.480  -->  00:02:44.370
Normally you see a WHILE loop look like this a while than normal brackets than here.

43

00:02:44.490  -->  00:02:49.920
And then curly braces inside the normal brackets you would have a condition and then inside the curly

44

00:02:49.920  -->  00:02:54.410
braces you would have executable code is a horrible code line one.

45

00:02:54.600  -->  00:02:57.190
And then you would have line to line three.

46

00:02:57.390  -->  00:03:00.530
All right so this is how it would look like in other programming languages.

47

00:03:00.540  -->  00:03:05.520
And before we move on to how it looks like in Python let's try to understand what this construction

48

00:03:05.520  -->  00:03:05.800
does.

49

00:03:05.850  -->  00:03:10.330
So what this construction does is once it is executed this condition is checked.

50

00:03:10.350  -->  00:03:16.050
So Python or the programming language will check this condition and then it will go through the curly

51

00:03:16.050  -->  00:03:18.080
braces and execute all of the code here.

52

00:03:18.090  -->  00:03:22.090
If the condition is true then one Sig's action is complete.

53

00:03:22.080  -->  00:03:28.860
What'll happen is if you have more code here let's say executable code for what will happen is Python

54

00:03:28.860  -->  00:03:33.190
won't or the programming language won't move forward to the next exhibit usable code.

55

00:03:33.210  -->  00:03:38.490
It will actually go back to the start of this block and will check the condition again if the condition

56

00:03:38.490  -->  00:03:39.250
is true again.

57

00:03:39.300  -->  00:03:44.320
It will execute this code and then once it gets to this curly bracket it will come back again.

58

00:03:44.320  -->  00:03:45.090
Ill check the condition.

59

00:03:45.090  -->  00:03:46.690
So that's what's going to keep happening.

60

00:03:46.780  -->  00:03:49.230
The programming language will keep coming back.

61

00:03:49.230  -->  00:03:53.940
Checking the condition executing the code checking the condition executing the code checking the condition

62

00:03:53.990  -->  00:03:56.520
exit Kennicott and that will keep going and that's what's called the loop.

63

00:03:56.700  -->  00:04:01.500
And as soon as the condition becomes false or whenever it finds that the condition is false it will

64

00:04:01.500  -->  00:04:06.370
not execute the code it will proceed to further lines of code which follow.

65

00:04:06.540  -->  00:04:08.520
So that is how a while loop works.

66

00:04:08.520  -->  00:04:14.160
Now let's have a look at how the while loop is structured in Python in Python a while loop is structured

67

00:04:14.160  -->  00:04:14.980
differently.

68

00:04:15.150  -->  00:04:20.310
The reason behind it is because that is one of the ideas of Python to make everything super simple to

69

00:04:20.310  -->  00:04:24.750
make everything very legible to make the code look very static.

70

00:04:24.780  -->  00:04:26.800
So this is what it looks like in Python.

71

00:04:26.820  -->  00:04:33.480
While condition colon and no curly braces so no normal braces no curly braces just a colon after the

72

00:04:33.480  -->  00:04:34.150
condition.

73

00:04:34.260  -->  00:04:43.800
And the question here is how does Python know when our while loop ends where our the body of the while

74

00:04:43.800  -->  00:04:44.000
loop.

75

00:04:44.010  -->  00:04:50.010
And how does it distinguish between this executable code for an executable code 3 2 and one so let's

76

00:04:50.010  -->  00:04:55.200
say the condition is part is true so Python will execute this line this line this line and then I'll

77

00:04:55.200  -->  00:04:58.440
go back and check the condition and then execute these lines again.

78

00:04:58.790  -->  00:05:04.220
How does it know where to stop is that curly braces right so this is a very interesting thing and a

79

00:05:04.220  -->  00:05:07.380
lot of time of the times when programmers just start using Python.

80

00:05:07.400  -->  00:05:09.080
They get very surprised by this.

81

00:05:09.130  -->  00:05:15.660
And the reason that Python does now is because of these tabulations or because of these indentations

82

00:05:15.670  -->  00:05:15.740
.

83

00:05:15.860  -->  00:05:21.080
And this is where we come to the concept which is very unique for Python among programming languages

84

00:05:21.210  -->  00:05:21.420
.

85

00:05:21.680  -->  00:05:24.100
Tabulation or the proper term here is.

86

00:05:24.110  -->  00:05:31.420
Indentation is important indentation is a part of the syntax of this programming language so very important

87

00:05:31.430  -->  00:05:37.550
to understand that if I for instance remove the indentation here then the body of the while loop has

88

00:05:37.550  -->  00:05:40.670
been reduced to just these two lines of code.

89

00:05:40.730  -->  00:05:47.830
So that is why it's important to observe indentation and to maintain it properly as per your code whereas

90

00:05:48.050  -->  00:05:49.550
in other programming language it doesn't matter.

91

00:05:49.550  -->  00:05:53.630
You could put more in detail than you could with less indentation as long as the curly braces are there

92

00:05:53.620  -->  00:05:53.840
.

93

00:05:53.870  -->  00:05:55.600
Everything makes sense in Python.

94

00:05:55.620  -->  00:05:56.950
There's no curly braces.

95

00:05:56.960  -->  00:05:58.590
This is one of those situations.

96

00:05:58.610  -->  00:06:01.240
So it's important to observe indentation.

97

00:06:01.250  -->  00:06:03.190
All right so hopefully all that makes sense.

98

00:06:03.190  -->  00:06:08.480
I know it might be very new if this is your first time working with Python but we'll get used to it

99

00:06:08.500  -->  00:06:09.680
as we go through the code.

100

00:06:09.860  -->  00:06:12.030
Let's look at an example.

101

00:06:12.130  -->  00:06:12.400
All right.

102

00:06:12.410  -->  00:06:19.010
So I'm going to remove this template and here we'll just look at our first while we'll say while false

103

00:06:19.170  -->  00:06:20.070
call on.

104

00:06:20.180  -->  00:06:23.420
And you can see as soon as I put the colon and press enter.

105

00:06:23.500  -->  00:06:26.480
The invitation is set there for me by Jupiter.

106

00:06:26.480  -->  00:06:29.590
So now I'm going to say print and hello.

107

00:06:29.660  -->  00:06:33.320
And what will happen is Python will take this condition because it's false.

108

00:06:33.310  -->  00:06:35.100
It won't even go inside the loop.

109

00:06:35.120  -->  00:06:37.440
So basically spins around this nothing will happen.

110

00:06:37.510  -->  00:06:39.370
As you can see nothing happened there.

111

00:06:39.380  -->  00:06:46.040
Now if I take the opposite loop if I say true what we've created here is effectively an infinite loop

112

00:06:46.040  -->  00:06:46.490
.

113

00:06:46.490  -->  00:06:51.140
If I were on this line what will happen is Python will check this condition it's true it'll print the

114

00:06:51.160  -->  00:06:51.770
hello.

115

00:06:51.920  -->  00:06:56.480
They don't check the condition it's true will print hello and I will keep doing that and will actually

116

00:06:56.500  -->  00:06:57.320
get stuck.

117

00:06:57.310  -->  00:07:02.300
So let's go ahead and just for interest sake let's run this and see what happens.

118

00:07:02.330  -->  00:07:04.090
So you can see we've got all these halos.

119

00:07:04.100  -->  00:07:05.450
You can see it's running.

120

00:07:05.450  -->  00:07:07.610
If you look up here you see it's busy.

121

00:07:07.610  -->  00:07:07.900
Right.

122

00:07:07.910  -->  00:07:10.560
So your tab is busy your browser is probably hung.

123

00:07:10.580  -->  00:07:12.950
I can't even scroll here I can't do anything.

124

00:07:13.120  -->  00:07:14.450
So basically it just keeps running.

125

00:07:14.450  -->  00:07:20.040
So one way to stop it is to press double zero on your machine or on your keyboard.

126

00:07:20.120  -->  00:07:21.480
That should stop it actually.

127

00:07:21.500  -->  00:07:23.180
As you can see there we go.

128

00:07:23.180  -->  00:07:27.120
So I was able to restart the kernel that's by pressing double zero.

129

00:07:27.130  -->  00:07:28.400
Hopefully this will work.

130

00:07:28.390  -->  00:07:32.400
This is always a mess so try to avoid creating infinite loops.

131

00:07:32.410  -->  00:07:34.990
All right I'm going to kind of like scroll down.

132

00:07:35.000  -->  00:07:37.480
Well there's no point in scroll down because there's so many of them.

133

00:07:37.580  -->  00:07:39.370
So I'm going to get rid of the cell.

134

00:07:39.380  -->  00:07:43.760
In fact the best way I found is to just refresh this page.

135

00:07:43.750  -->  00:07:49.490
That's the beauty of working in a browser on your local machine so hopefully that will bring us something

136

00:07:49.490  -->  00:07:50.170
up.

137

00:07:50.180  -->  00:07:51.770
All right so there we go.

138

00:07:51.860  -->  00:07:55.560
Let's just try and now get rid of this line.

139

00:07:55.790  -->  00:07:57.610
So there we go we got rid of that line.

140

00:07:57.640  -->  00:07:59.130
And always a bad idea.

141

00:07:59.160  -->  00:08:03.920
Taran infinite loops Let's try create a proper loop that actually makes sense.

142

00:08:03.920  -->  00:08:10.390
So let's say while let's create a counter a variable called counter and let's say equal 0 and then we'll

143

00:08:10.390  -->  00:08:17.450
say while counter is less than 12 call on and then we'll print the value of counter that'll say counter

144

00:08:17.540  -->  00:08:19.750
equals counter plus 1.

145

00:08:19.750  -->  00:08:21.000
So what's going on here.

146

00:08:21.110  -->  00:08:23.890
We've got a variable called counter which starts at zero.

147

00:08:23.890  -->  00:08:29.460
By the way indexation in Python starts at zero so it's also a good idea to stand start counters at zero

148

00:08:29.460  -->  00:08:29.700
.

149

00:08:29.720  -->  00:08:34.320
That's another difference to our programming language where indexation starts at 1.

150

00:08:34.580  -->  00:08:37.440
So here we've got a while counter's less than 12.

151

00:08:37.610  -->  00:08:42.710
We want to print the value of this variable and at the same time we want to increase this variable by

152

00:08:42.710  -->  00:08:47.120
one so we take its current value plus 1 and then we put it into that same variable.

153

00:08:47.140  -->  00:08:52.790
And so basically the program or Python will come here or see that culture 0 is less than 12 correct

154

00:08:52.790  -->  00:08:52.830
.

155

00:08:52.830  -->  00:08:55.760
It'll exhibit this code then Connor has already become one.

156

00:08:55.750  -->  00:08:57.070
One is still less than 12 legs.

157

00:08:57.090  -->  00:09:02.900
Get this code and I'll keep doing that until color becomes 12 12 is not less than 12 we'll stop.

158

00:09:02.890  -->  00:09:03.790
So let's have a look at that.

159

00:09:03.820  -->  00:09:08.600
I'll press shift center as you can see zero one two three four five up to 11.

160

00:09:08.810  -->  00:09:09.230
OK.

161

00:09:09.230  -->  00:09:13.510
So that is how our while loop works.

162

00:09:13.550  -->  00:09:19.720
You can experiment with that you can change the value of counter or this condition and maybe put other

163

00:09:19.730  -->  00:09:24.800
parameters inside the while loop so I can show you an example that are works of indentation so here

164

00:09:24.800  -->  00:09:26.660
I say print hello.

165

00:09:26.750  -->  00:09:29.030
You'll see that hello will only get printed once.

166

00:09:29.030  -->  00:09:33.020
If I run that you'll see 0 up to 11 and then it prints hello because.

167

00:09:33.050  -->  00:09:39.400
First thing is counted gets its value then this loop is executed many many many times and then once

168

00:09:39.400  -->  00:09:41.750
that is done then only Helo's printed.

169

00:09:41.990  -->  00:09:46.400
So hopefully you enjoyed the story will have a play around with that to try creating your own loops

170

00:09:46.390  -->  00:09:49.610
and experiment with for a while and I'll look for you next time.

171

00:09:49.630  -->  00:09:51.150
Until then heavy coding
