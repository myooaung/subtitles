WEBVTT
1

00:00:04.920  -->  00:00:05.440
Alone.

2

00:00:05.550  -->  00:00:07.580
Welcome back to the program.

3

00:00:07.680  -->  00:00:12.420
And today we're talking about matrices and you might ask curial are matrices really that important that

4

00:00:12.420  -->  00:00:15.990
we have to devote a whole section of the Course to this topic.

5

00:00:16.050  -->  00:00:22.350
And the answer is yes because as you can see from the previous tutorial a lot of the world's data is

6

00:00:22.410  -->  00:00:28.730
stored in form of tables and matrices is one of the ways to work with tables in Python.

7

00:00:28.890  -->  00:00:34.200
And moreover as you'll see further from the course we'll be working with doorframes and matrices are

8

00:00:34.200  -->  00:00:36.800
a great stepping stone towards doorframes.

9

00:00:37.020  -->  00:00:41.110
So let's get started and understand how matrices work in Python.

10

00:00:41.460  -->  00:00:44.710
Here at the top we have not so much a matrix not yet.

11

00:00:44.910  -->  00:00:47.840
This is just a list so we're familiar of lists.

12

00:00:47.940  -->  00:00:53.520
Just a simple list in Python and it's got one dimension and therefore that one indexation 0 1 2 3 4

13

00:00:53.530  -->  00:00:53.810
.

14

00:00:54.090  -->  00:00:58.350
So that's our decision as we can see from previous Sterle tables that actually have a second dimension

15

00:00:58.350  -->  00:00:58.770
.

16

00:00:58.770  -->  00:00:59.940
And what happens then.

17

00:00:59.940  -->  00:01:01.840
So what does the table look like.

18

00:01:01.860  -->  00:01:08.340
In this case for instance it's a 5:23 table or three by five table through three rows and five columns

19

00:01:08.340  -->  00:01:08.500
.

20

00:01:08.610  -->  00:01:12.010
And let's say it's populated with the number 50 in every single cell.

21

00:01:12.240  -->  00:01:17.070
Well in this case we need another set of indexation to help us with the other dimension.

22

00:01:17.220  -->  00:01:21.280
It's very similar to what we learned about Liszt's It's just that it has two dimensions.

23

00:01:21.330  -->  00:01:23.550
Inevitably we're going to run into a problem.

24

00:01:23.760  -->  00:01:28.130
And the problem is how do we do indexation in a two dimensional object.

25

00:01:28.140  -->  00:01:31.620
For example we have this table here or this matrix.

26

00:01:31.620  -->  00:01:39.360
And how do we get to and say this matrix called a how do we get to this number zero in our matrix.

27

00:01:39.600  -->  00:01:42.150
Well we could try things that we know about lists already.

28

00:01:42.150  -->  00:01:45.090
Right so we could say how about a number three.

29

00:01:45.090  -->  00:01:50.400
Assuming that this is our third column so trying to access them with 3Com But then we don't know which

30

00:01:50.490  -->  00:01:55.640
element it is we can just tell from there it's still ambiguous which elements we're trying to access

31

00:01:56.040  -->  00:02:02.070
or we could say so that doesn't work or we could say to for instance to signify that this is the second

32

00:02:02.070  -->  00:02:02.610
row.

33

00:02:02.790  -->  00:02:07.380
But again we just from this notation we can really tell whether we're talking about the second row or

34

00:02:07.380  -->  00:02:08.360
the second column.

35

00:02:08.490  -->  00:02:13.120
And if we're talking about either then which element inside are we referring to.

36

00:02:13.380  -->  00:02:17.710
So the correct approach here would be a to three a.

37

00:02:17.820  -->  00:02:23.370
And then in square brackets we have two and three and two represents that we are looking at the second

38

00:02:23.370  -->  00:02:27.440
row three represents a third column where intersection starts at zero.

39

00:02:27.480  -->  00:02:32.760
So it's always like that the first digit represents or first number presents the row and the second

40

00:02:32.760  -->  00:02:35.820
one represents the call that is also why in pi.

41

00:02:35.830  -->  00:02:40.230
And you can reference the individual rows in this following fashion.

42

00:02:40.230  -->  00:02:48.300
So if you say a zero comma colon where the colon just means everything basically in that Rozsa no limitation

43

00:02:48.720  -->  00:02:49.590
what you'll get.

44

00:02:49.620  -->  00:02:54.510
So in this case you will get that top row and same thing for the columns.

45

00:02:54.540  -->  00:02:57.320
We can just put this nominal notation here.

46

00:02:57.360  -->  00:03:02.200
And so if you say a square brackets colon come up for which we're going to get.

47

00:03:02.220  -->  00:03:04.980
That's correct you're going to get the last column over here.

48

00:03:05.130  -->  00:03:11.580
So that is how you can index whole rows and columns and if you want individual elements then that is

49

00:03:11.580  -->  00:03:12.630
the approach to go.

50

00:03:12.630  -->  00:03:18.450
So we'll be working with this a bit more throughout this course will be coming up quite a bit and we'll

51

00:03:18.450  -->  00:03:21.930
get used to this type of indexation with time.

52

00:03:21.930  -->  00:03:25.100
Hope you enjoy this tural and I look forward to see you next time.

53

00:03:25.170  -->  00:03:26.690
Until then coding
