1

00:00:05,160  -->  00:00:08,130
Hello and welcome back to the course on Python programming.

2

00:00:08,280  -->  00:00:13,560
Previously we spoke about functions in Python and today we're going to even further expand that topic

3

00:00:13,560  -->  00:00:16,210
and we're going to talk about packages in Python.

4

00:00:16,230  -->  00:00:17,420
All right let's get started.

5

00:00:17,670  -->  00:00:21,950
So what is in these packages these so-called packages.

6

00:00:21,950  -->  00:00:26,190
There is a package there's a package there's another package what's inside them while what's inside

7

00:00:26,220  -->  00:00:27,670
is Blender's.

8

00:00:27,690  -->  00:00:32,910
And you're right you guessed that we when we say Blender's we actually mean functions and sometimes

9

00:00:32,910  -->  00:00:39,120
there's other things like maybe Klaas's or dadda and maybe some other things as well but mostly what's

10

00:00:39,120  -->  00:00:43,830
in these packages is different functions which we want to import.

11

00:00:43,830  -->  00:00:48,110
We want to add onto our program onto our code that we're creating.

12

00:00:48,180  -->  00:00:54,900
So we can use them because as we discussed the core of Python comes with a very limited set of functions

13

00:00:54,900  -->  00:01:00,510
so you have the minimum the maximum or you have some other functions but you don't even have things

14

00:01:00,510  -->  00:01:06,480
like that you can to take a square root out of a number without including a package first and that is

15

00:01:06,480  -->  00:01:07,950
how Python was designed.

16

00:01:08,100  -->  00:01:10,800
And it's just something that you kind of get used to have time.

17

00:01:10,800  -->  00:01:17,280
So whenever you need a certain functionality you just include that package and package will implement

18

00:01:17,310  -->  00:01:21,960
certain things that you might in your code for instance package on the left might be for working with

19

00:01:21,960  -->  00:01:25,550
big data sets a package in the middle might be or processing.

20

00:01:25,620  -->  00:01:32,370
Twitter data the package on the right might be for creating bezels nations packages of in their purpose

21

00:01:32,640  -->  00:01:37,320
and therefore it's actually quite good because you don't have the packages and the functions that you

22

00:01:37,320  -->  00:01:42,900
don't need in your code you only include the ones that you actually need and makes your coding a very

23

00:01:42,900  -->  00:01:44,410
lean process.

24

00:01:44,430  -->  00:01:44,700
All right.

25

00:01:44,700  -->  00:01:49,590
So solidify this let's look at the official definitions because we actually have two things that we're

26

00:01:49,590  -->  00:01:50,630
going to be talking about.

27

00:01:50,640  -->  00:01:53,590
We have modules and package are the words that are going to be hearing.

28

00:01:53,730  -->  00:01:58,590
So you know how I don't like text on my slides but this is the one time when it's definitions it's a

29

00:01:58,590  -->  00:02:00,280
good idea to look through it.

30

00:02:00,300  -->  00:02:05,520
So a module is simply a file containing Python definitions functions and statements putting code into

31

00:02:05,520  -->  00:02:10,770
modules is useful because of the ability to import the module functionality into your script a Python

32

00:02:10,770  -->  00:02:11,730
session.

33

00:02:11,730  -->  00:02:18,030
And here I Python's I see Jupiter notebooks now a package is just a way of collecting related modules

34

00:02:18,030  -->  00:02:24,090
together within a single tree like hierarchy very complex package like an umpire scrapie have hundreds

35

00:02:24,090  -->  00:02:29,100
of individual modules so putting them into a directory like structure keeps things organized and avoids

36

00:02:29,220  -->  00:02:30,440
name collisions.

37

00:02:30,750  -->  00:02:31,560
So there we go.

38

00:02:31,580  -->  00:02:36,600
It's just a difference between modules or packages which is going to stick with the term package just

39

00:02:36,600  -->  00:02:38,100
to make things simple.

40

00:02:38,100  -->  00:02:44,340
All right so what are the steps of putting a package into your code including that functionality that

41

00:02:44,340  -->  00:02:44,930
you're after.

42

00:02:45,090  -->  00:02:50,730
Well the steps are actually very very trivial very simple and Erina want us to get this down pat so

43

00:02:50,730  -->  00:02:53,510
that going forward we're very confident with what we're doing.

44

00:02:53,640  -->  00:02:57,570
And we understand it very well because there's nothing complicated about it at all.

45

00:02:57,570  -->  00:03:03,110
So step one find the package and it's an optional step because if you already know what package you

46

00:03:03,120  -->  00:03:07,620
need like if you're just after cell functionality then you'll need to find what package your office

47

00:03:07,620  -->  00:03:09,860
or what package implements that functionality.

48

00:03:09,960  -->  00:03:15,270
If you already know what package you're after for instance it's numb pie or Pandurs or some other package

49

00:03:15,300  -->  00:03:19,650
then you don't need to perform their superior know what package you need then you need to install the

50

00:03:19,650  -->  00:03:21,190
package onto a machine.

51

00:03:21,390  -->  00:03:27,300
That's step two and step three is you either import the package or you just import a certain function

52

00:03:27,300  -->  00:03:30,070
from that package that your office or if you don't need the whole package.

53

00:03:30,330  -->  00:03:31,590
As simple as that.

54

00:03:31,590  -->  00:03:33,840
Now let's go through the steps one by one.

55

00:03:33,840  -->  00:03:38,640
All right so step one find the package where would you find a package let's say you know that you need

56

00:03:39,060  -->  00:03:45,620
a package for processing videos or for a package for analyzing handwritten text or something like that

57

00:03:45,630  -->  00:03:47,000
where would you go looking for it.

58

00:03:47,130  -->  00:03:50,240
Well the best place to start looking for a package is good hub.

59

00:03:50,390  -->  00:03:57,060
Good how is a repository of code where people in simple terms they just code together and they develop

60

00:03:57,060  -->  00:04:01,410
projects and work on different programming languages and packages for those programming languages and

61

00:04:01,410  -->  00:04:01,710
so on.

62

00:04:01,710  -->  00:04:05,910
So you can go to get help and look for a package there and we'll see how to do it.

63

00:04:05,910  -->  00:04:10,980
I know it might sound a bit scary at the start and you might have heard about her before but don't worry

64

00:04:10,980  -->  00:04:16,710
I'll show you around just now I'll show you in practice how to perform a search there and then step

65

00:04:16,710  -->  00:04:18,230
two is install the package.

66

00:04:18,300  -->  00:04:21,590
And there's two different approaches one for Windows one for Mac.

67

00:04:21,600  -->  00:04:26,490
They're actually the same approach but just because of the different operating systems it looks a bit

68

00:04:26,490  -->  00:04:33,010
different so for on windows you need to go to your start menu and in the search start typing in Anaconda

69

00:04:33,450  -->  00:04:38,640
and this is if you installed Python through the method that we discussed at the start of the course

70

00:04:38,790  -->  00:04:40,650
through the Anaconda installation.

71

00:04:40,650  -->  00:04:46,280
If you didn't then you would need to in sort of an icon to look for your command line.

72

00:04:46,290  -->  00:04:48,780
So just type in a command instead of an icon.

73

00:04:48,810  -->  00:04:54,610
But if you installed how we installed the distribution of and at the start of a course and then just

74

00:04:54,620  -->  00:04:55,870
follow along here.

75

00:04:56,140  -->  00:05:01,720
Type in Anaconda into your search and what you will see is a Anaconda command prompt.

76

00:05:01,730  -->  00:05:05,060
So I'm just going to zoom in here so you can see better there is Anaconda.

77

00:05:05,300  -->  00:05:08,510
That sort of started typing and then that's what we got that it called the command prompt.

78

00:05:08,500  -->  00:05:11,860
So if you select that then you'll get a black screen like this.

79

00:05:11,870  -->  00:05:16,510
So don't worry about typing in kind of that Conder don't worry about that which you will need to type

80

00:05:16,550  -->  00:05:21,920
in is either Khanda install package name and package name should be replaced with the package teacher

81

00:05:21,920  -->  00:05:22,320
.

82

00:05:22,330  -->  00:05:25,240
After that you won't install or if that doesn't work.

83

00:05:25,250  -->  00:05:29,620
So if you can install it through Quander that's your first resort if that doesn't work then your second

84

00:05:29,620  -->  00:05:30,400
resort.

85

00:05:30,500  -->  00:05:33,400
You should try pip install package name and that should work.

86

00:05:33,400  -->  00:05:34,490
Most of the time.

87

00:05:34,830  -->  00:05:39,460
OK so that's how it's use or package on Windows and that's installing it onto your machine so you have

88

00:05:39,460  -->  00:05:44,360
to have it on your computer in your python distribution on your computer or for you to actually be able

89

00:05:44,360  -->  00:05:46,540
to then imported into your code.

90

00:05:46,690  -->  00:05:53,340
So this is still step two and step two on a Mac you look for in sort of the Konda command prompt which

91

00:05:53,350  -->  00:06:00,010
you look for is the terminal so just press comment space on your Mac and start typing in terminal.

92

00:06:00,010  -->  00:06:01,690
This should come up once again.

93

00:06:01,690  -->  00:06:07,720
Click that screen and section or black it's white on a Mac and there you go in that command prompt.

94

00:06:07,850  -->  00:06:14,900
You need to type in again once again Conda install package name or you should type in people install

95

00:06:14,890  -->  00:06:18,990
package name so try the first one and then if that doesn't work try the second one.

96

00:06:19,060  -->  00:06:21,840
A quick note on the terminal in Mac.

97

00:06:21,850  -->  00:06:27,560
If you are running Jabra or notebooks and so if you want cheaper notebooks using the terminal then you'll

98

00:06:27,560  -->  00:06:32,980
find that it's actually occupying the terminal and you can't type in more stuff into the terminal in

99

00:06:32,990  -->  00:06:35,750
order to create a second window for your terminal.

100

00:06:35,750  -->  00:06:41,530
When you are in the terminal press command t on your MacBook and I'll create a second window and there

101

00:06:41,530  -->  00:06:44,730
you will be able to type in these instructions.

102

00:06:44,750  -->  00:06:48,200
All right so that's step two and step three import.

103

00:06:48,440  -->  00:06:53,230
So as we discussed you cannot import the package or import it just a certain function and to do that

104

00:06:53,410  -->  00:06:58,830
you either type in the code import scrape the for instance scrape is the name of the package so import

105

00:06:59,000  -->  00:07:05,820
and the name of the package that you're after or as an example you type in from that package or package

106

00:07:05,840  -->  00:07:11,150
dot something in the package important the function that your after says a bit more advanced but that

107

00:07:11,410  -->  00:07:14,280
helps you avoid importing the whole package just imports.

108

00:07:14,290  -->  00:07:17,800
The one specific thing that you need from the package.

109

00:07:17,810  -->  00:07:22,160
All right so hopefully that all makes sense as you can it's a pretty straightforward process.

110

00:07:22,150  -->  00:07:25,040
So let's go ahead and try it out in practice now.

111

00:07:25,030  -->  00:07:25,370
All right.

112

00:07:25,370  -->  00:07:26,710
First things first.

113

00:07:26,750  -->  00:07:33,160
So here's good hub and let's say I want to look for something that is a package to do a web scraping

114

00:07:33,160  -->  00:07:40,120
so hero type in web scraping and then I'll just click enter to search and as you can see here now I've

115

00:07:40,120  -->  00:07:42,190
got all these different packages now.

116

00:07:42,230  -->  00:07:47,960
So like Python at the top or just find Python here to make sure you're looking for Python packages and

117

00:07:47,950  -->  00:07:52,990
then just select something from here so I'm going to scrape quite a popular Web scraping package here

118

00:07:53,000  -->  00:07:57,960
it's got some information I know it can be quite a bit overwhelming all the things you see on good hub

119

00:07:58,030  -->  00:07:58,410
whoops.

120

00:07:58,440  -->  00:08:00,230
I clicked there by accident.

121

00:08:00,350  -->  00:08:03,540
So all the things that can get good help can be quite overwhelming.

122

00:08:03,790  -->  00:08:05,340
But nevertheless if you scroll down.

123

00:08:05,480  -->  00:08:09,670
Usually they have quite a good description on how to install the package and things like that.

124

00:08:09,670  -->  00:08:12,400
So here you got the quick way pip install Scrappy so when.

125

00:08:12,400  -->  00:08:13,380
We talked about.

126

00:08:13,510  -->  00:08:18,760
Also you can go to the Web site just check out scray p here they've got a whole Web site here and you

127

00:08:18,760  -->  00:08:20,080
can see them.

128

00:08:20,120  -->  00:08:21,660
They're using imported scrape.

129

00:08:21,700  -->  00:08:27,210
What we talked about and here they've got to install scrape is instructions are all over the place.

130

00:08:27,520  -->  00:08:27,770
OK.

131

00:08:27,760  -->  00:08:28,570
So that's a good start.

132

00:08:28,570  -->  00:08:29,910
We found the package that we want.

133

00:08:29,920  -->  00:08:32,260
Now let's go and install it on a machine.

134

00:08:32,250  -->  00:08:33,620
Remember Windows and Mac is different.

135

00:08:33,620  -->  00:08:39,340
I'm going to be doing this on a Mac so I'm going to go to the terminal Here's the terminal window as

136

00:08:39,350  -->  00:08:45,470
you can see it's currently used to around my Jupiter notebook so let's zoom in here a little bit so

137

00:08:45,470  -->  00:08:51,110
we can see better here it's running Megilp in a notebook cycle really type in anything more so I'm just

138

00:08:51,110  -->  00:08:56,180
going to click inside and press commentary and that creates a second window and I can use this.

139

00:08:56,170  -->  00:09:03,910
So first thing I'm going to try is I'm going to say Khanda install scrapin just to see if that runs

140

00:09:03,910  -->  00:09:04,970
.

141

00:09:05,020  -->  00:09:06,130
Let's have a look.

142

00:09:06,230  -->  00:09:12,630
So you can see now we're just going to click yes here because it's just asking for an update.

143

00:09:12,910  -->  00:09:19,690
And as you can see it's actually installing this package through Conda is give it some time.

144

00:09:19,690  -->  00:09:20,180
There we go.

145

00:09:20,170  -->  00:09:28,570
So now if I tried doing the same thing Khanda install Scray be as good a second you can see that the

146

00:09:28,580  -->  00:09:29,610
second time it didn't go.

147

00:09:29,620  -->  00:09:34,430
It didn't run because all rechristen packages already installed so that's a good way to check if the

148

00:09:34,420  -->  00:09:35,630
package is installed.

149

00:09:35,750  -->  00:09:40,750
And so basically what happened is we installed that package through the Konda distribution.

150

00:09:40,880  -->  00:09:42,650
Sometimes that works and that's great.

151

00:09:42,670  -->  00:09:49,120
If it doesn't work then you resort research the second method which is just pip install scrapin.

152

00:09:49,360  -->  00:09:56,320
And so if I run that again you can see that all of this code is just here but it says requirements are

153

00:09:56,330  -->  00:09:57,420
already satisfied.

154

00:09:57,590  -->  00:10:01,290
Meaning that all of these elements have been installed already.

155

00:10:01,580  -->  00:10:02,000
OK.

156

00:10:02,120  -->  00:10:03,780
So that's how you install the machine.

157

00:10:03,800  -->  00:10:07,120
Hopefully you are able to follow along even if you're using Windows.

158

00:10:07,120  -->  00:10:10,950
It's very similar you just use the Konda command line.

159

00:10:10,960  -->  00:10:13,420
All right so that is installing onto the machine.

160

00:10:13,440  -->  00:10:15,650
Now let's go to Jupiter.

161

00:10:15,640  -->  00:10:18,470
And here we going to see how we can import it.

162

00:10:18,500  -->  00:10:23,070
So let's say this is a program which we are creating some script that we're writing.

163

00:10:23,080  -->  00:10:28,760
How do we import the package that we just install what we need to do is we need to type in import scraping

164

00:10:28,770  -->  00:10:28,980
.

165

00:10:29,170  -->  00:10:31,660
And if you're on shift enter just give to a second.

166

00:10:31,660  -->  00:10:33,500
You see that that ran successfully.

167

00:10:33,500  -->  00:10:39,700
So if I didn't have the names or if I had if I typed in scrape the test one two three if I run a try

168

00:10:39,730  -->  00:10:43,960
around that you'll see I'll get an error because that package does not exist or that module does not

169

00:10:43,960  -->  00:10:49,760
exist but because it ran well that means scrape it was imported successfully or the other way that we

170

00:10:49,750  -->  00:10:57,560
talked about we can say import scrape the crawler from EMP scrape pleuro cruller or import Karole or

171

00:10:57,760  -->  00:10:58,770
process.

172

00:10:58,820  -->  00:11:07,090
So inside scray P There is a module or a called crawler and inside that module there is a function in

173

00:11:07,100  -->  00:11:11,720
this case that are actually a functions a class that we're importing but that doesn't really matter

174

00:11:11,710  -->  00:11:12,010
.

175

00:11:12,010  -->  00:11:15,530
The same process as you can see that got imported as well.

176

00:11:15,520  -->  00:11:19,200
Now what we Al-Samoud do we can just to check that everything is done.

177

00:11:19,250  -->  00:11:25,910
Well we can say scray P for example Daut and then press tab and as he can see he'll come up with all

178

00:11:25,900  -->  00:11:27,830
of these different suggestions.

179

00:11:27,830  -->  00:11:34,280
So Spider field form request core Krol are and so so you can see cruller is that same Krol that we have

180

00:11:34,270  -->  00:11:35,390
there.

181

00:11:35,410  -->  00:11:40,820
So as you can see the suggestions are coming up so that means that your kernel that is running now can

182

00:11:40,820  -->  00:11:48,160
actually see that module and it's working and you can work with it or you can try cruller process and

183

00:11:48,670  -->  00:11:54,730
you press dot and you'll see all these methods inside that Clauss spiders crawl crawlers and so on.

184

00:11:54,800  -->  00:11:56,260
Start stop.

185

00:11:56,260  -->  00:11:58,660
So it's actually seeing what's going on.

186

00:11:58,660  -->  00:12:01,060
And so you can start working with that in your code.

187

00:12:01,070  -->  00:12:05,840
There we go that's how we import packages into our code.

188

00:12:06,010  -->  00:12:12,580
And another thing I want to mention is that first of all if you are using an I.D. The good news is so

189

00:12:12,760  -->  00:12:20,590
in an integrated development environment for like for example pi charme or Eclipse or some other environment

190

00:12:20,600  -->  00:12:25,480
where you're actually coding so if you're not coding in Jupiter notebooks but in ID the good news is

191

00:12:25,490  -->  00:12:27,690
that the steps are exactly the same.

192

00:12:27,680  -->  00:12:34,280
So in order to find install and import the package you just perform exactly the same steps and also

193

00:12:34,780  -->  00:12:39,380
a lot of the time these packages are already included in the content distribution.

194

00:12:39,380  -->  00:12:45,260
So I can easily just go and say imports and umpire right now I don't need to install it because it is

195

00:12:45,250  -->  00:12:47,840
included in the Anaconda distribution.

196

00:12:47,840  -->  00:12:53,540
That's beauty of Anaconda because it already aggregates those most popular packages so you don't have

197

00:12:53,530  -->  00:12:57,170
to go around looking for them installing them and only then importing them.

198

00:12:57,460  -->  00:13:02,980
But now that you know this whole process the three steps it's not a big problem anymore it's comparable

199

00:13:03,050  -->  00:13:05,760
at all even if it's not included in Anaconda.

200

00:13:05,770  -->  00:13:10,680
You can just go and install the package onto your machine just like we did now and then import it.

201

00:13:10,780  -->  00:13:12,380
Hopefully you found this tutorial useful.

202

00:13:12,380  -->  00:13:17,960
And my goal for this tutorial was to make sure that going forward you're 100 percent comfortable with

203

00:13:17,950  -->  00:13:23,080
packages in Python you completely know the ins and outs and what's going on when you install when you

204

00:13:23,160  -->  00:13:25,110
port and things like that.

205

00:13:25,120  -->  00:13:30,790
Hopefully we achieved that goal and going forward you will be 100 percent confident dealing of packages

206

00:13:31,120  -->  00:13:32,870
and look forward to seeing next turtle.

207

00:13:32,960  -->  00:13:34,870
Until then heavy coding
