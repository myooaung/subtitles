1

00:00:05,160  -->  00:00:07,980
Hello and welcome back to a course of Python programming.

2

00:00:08,190  -->  00:00:11,010
Today we're talking about arrays in Python.

3

00:00:11,010  -->  00:00:15,780
Now this is going to be a short tutorial because we're going to be working with arrays in much more

4

00:00:15,780  -->  00:00:18,010
depth in the further sections of this course.

5

00:00:18,150  -->  00:00:22,620
But for now it's important for us to get a basic understanding of this concept.

6

00:00:22,620  -->  00:00:22,890
All right.

7

00:00:22,890  -->  00:00:27,660
So let's quickly create a list very talked about lists and we know them quite well so just create a

8

00:00:27,660  -->  00:00:30,190
list of totally random numbers.

9

00:00:30,210  -->  00:00:31,740
There you go so there is a list.

10

00:00:31,770  -->  00:00:34,620
So if I press shift enter I have that list there.

11

00:00:34,830  -->  00:00:40,110
And we've already discussed that lists in Python are very similar to arrays in other programming languages

12

00:00:40,110  -->  00:00:44,290
like C C++ or two vectors in our.

13

00:00:44,400  -->  00:00:49,830
But at the same time lists have that property that they can store any mix of data types so into this

14

00:00:49,830  -->  00:00:54,660
list that could have easily put words that could have put floating numbers as well as integers and it

15

00:00:54,660  -->  00:00:57,070
could have put logical values and so on.

16

00:00:57,300  -->  00:01:02,340
But in Python there's another concept which is actually called arrays so let's say another data structure

17

00:01:02,570  -->  00:01:05,980
is different to list it's similar in many ways but it's actually different.

18

00:01:06,000  -->  00:01:07,770
And that's what we're going to explore today.

19

00:01:07,770  -->  00:01:09,710
So how do we create an array.

20

00:01:09,810  -->  00:01:13,670
Well in python there are two types of arrays that you can use.

21

00:01:13,710  -->  00:01:19,060
There's arrays that are built into the core of Python they're called the array arrays.

22

00:01:19,090  -->  00:01:20,640
There's also the name Pyra.

23

00:01:20,680  -->  00:01:24,650
So numb pie is a package that comes pretty distributed with Anaconda.

24

00:01:24,670  -->  00:01:26,260
It's a package that you'll be using.

25

00:01:26,290  -->  00:01:31,000
We very actually touched on some pie in the previous section on the course already when we were working

26

00:01:31,010  -->  00:01:32,670
with random numbers.

27

00:01:32,670  -->  00:01:37,380
Generally speaking you'll be working non-pilots is basically a package that you include in most of your

28

00:01:37,380  -->  00:01:40,450
code especially as a data scientist or data analyst.

29

00:01:40,530  -->  00:01:48,330
Pi is just included pretty much all the time and therefore using array arrays that exist in python in

30

00:01:48,330  -->  00:01:53,220
the core isn't the best option when you have the numpad raise which are much more versatile and they

31

00:01:53,220  -->  00:01:56,680
have much more flexibility to them and much more control.

32

00:01:56,700  -->  00:02:00,600
So that's why we're not even going to bother with the array arrays in Python which is going to go to

33

00:02:00,600  -->  00:02:02,810
the non-players array arrays right away.

34

00:02:02,910  -->  00:02:08,400
So I'm going to add to the pie package so I'm going to say imports NUMP pie.

35

00:02:08,460  -->  00:02:15,090
As we discussed previously but here I'm actually going to say as MP that's convention for dumpsite basically

36

00:02:15,090  -->  00:02:19,860
So we don't have to type up and NUMP every single time we could just use N.P. and you'll find that in

37

00:02:19,860  -->  00:02:24,710
most scripts that are written you will find that end p is used instead of NUMP.

38

00:02:24,720  -->  00:02:26,830
So which is going to run that code.

39

00:02:26,880  -->  00:02:33,540
And now if I say P Daut array I have this function that will convert a list into an array.

40

00:02:33,540  -->  00:02:37,980
So if I pass in our list L you will see that as an output I have an array.

41

00:02:37,980  -->  00:02:42,170
So let's give it a name let's say a equals an array of L.

42

00:02:42,180  -->  00:02:46,150
And now if I type in a here you'll see that that is our array.

43

00:02:46,320  -->  00:02:51,090
So now what's the main difference between lists and arrays so why would we use arrays instead of lists

44

00:02:51,090  -->  00:02:51,530
.

45

00:02:51,540  -->  00:02:56,440
Number one very important difference is that you cannot have an array of different data types.

46

00:02:56,490  -->  00:02:58,630
So an array is like a vector an R.

47

00:02:58,650  -->  00:03:00,930
You cannot have different data types on an array.

48

00:03:00,930  -->  00:03:04,050
Let's have a look let's say we have a array called B.

49

00:03:04,110  -->  00:03:08,820
And we'll say and P-Dog array and into this array we want to parse the following list.

50

00:03:08,820  -->  00:03:13,030
We want to say 12 4:55 than 60.

51

00:03:13,150  -->  00:03:15,710
That is the sixty three point three.

52

00:03:15,750  -->  00:03:17,620
So we've got integers we've got a flow.

53

00:03:17,640  -->  00:03:21,870
Let's say a logical and let's say a word so letter A.

54

00:03:22,050  -->  00:03:24,030
Or ABC for instance.

55

00:03:24,030  -->  00:03:24,880
So for on that.

56

00:03:24,900  -->  00:03:28,460
And now we look at B you will see that it is an array.

57

00:03:28,600  -->  00:03:35,340
But if I print B you'll see that actually they've all been put into quotation marks meaning that they

58

00:03:35,340  -->  00:03:41,160
have all been converted to characters or two strings because they had one string in there already so

59

00:03:41,160  -->  00:03:43,140
everything was converted to strings.

60

00:03:43,200  -->  00:03:46,740
That's because you cannot have different data types and Center-Right everything has to be of the same

61

00:03:46,740  -->  00:03:47,500
data type.

62

00:03:47,580  -->  00:03:48,460
So that's number one.

63

00:03:48,510  -->  00:03:53,130
And then the question is will Kiril why would we use an array if it's less flexible than a list in a

64

00:03:53,130  -->  00:03:56,940
list we can have different data types and array we Collin's or why wouldn't we just stick with lists

65

00:03:57,190  -->  00:04:01,710
all the answer that question is there's a few benefits of using arrays and they're quite substantial

66

00:04:01,710  -->  00:04:02,070
.

67

00:04:02,070  -->  00:04:09,330
For example if I take my list and I press l and then press Dot and I press tab because the list isn't

68

00:04:09,570  -->  00:04:11,670
we aren't an object oriented programming language.

69

00:04:11,670  -->  00:04:17,970
Well what happens is they are functions or methods that are included in this object that they're being

70

00:04:17,970  -->  00:04:19,680
stored alongside with the data.

71

00:04:19,680  -->  00:04:22,530
So the data that we have let's just press escape.

72

00:04:22,800  -->  00:04:24,050
We have this data in the list.

73

00:04:24,070  -->  00:04:24,640
Right.

74

00:04:24,870  -->  00:04:32,280
Well actual alongside the data because it's a list inside Python it also stores these functions inside

75

00:04:32,280  -->  00:04:33,100
this object.

76

00:04:33,210  -->  00:04:38,400
So I can actually call these functions right now from inside this list so let's say for instance I could

77

00:04:38,670  -->  00:04:41,450
say l dot pop What will that do.

78

00:04:41,670  -->  00:04:47,190
So if I run this function you'll see that it gives me a minus 1 two 3 4 it gives me the last value of

79

00:04:47,190  -->  00:04:50,340
this list so it shows it to me and it actually pops it out of the list.

80

00:04:50,340  -->  00:04:51,750
That's why it's called pop.

81

00:04:51,760  -->  00:04:55,260
So if I look at Al now you'll see that it doesn't have that value anymore.

82

00:04:55,350  -->  00:04:58,000
So I actually called a function from a the list.

83

00:04:58,020  -->  00:05:04,170
Well arrays have the same thing so if I look at a dot tab but you'll see that they have way more functions

84

00:05:04,200  -->  00:05:07,880
and that well actually they're called methods way Mumbai that's available.

85

00:05:08,010  -->  00:05:11,880
So for instance I could write a way say a max or a means.

86

00:05:11,880  -->  00:05:15,990
So let's try it the mean I can just calculate the mean like that very quickly.

87

00:05:16,080  -->  00:05:19,190
I have the mean of this array that I have created here.

88

00:05:19,200  -->  00:05:27,420
So the average of those values is 4 5 5 9 very versatile and very powerful functions available inside

89

00:05:27,510  -->  00:05:33,130
arrays or for a race that's come with Nampa and so because you have that very strong package of NUMP

90

00:05:33,130  -->  00:05:39,510
by backing this whole concept of arrays that means that you have all these powerful tools at your disposal

91

00:05:39,510  -->  00:05:39,870
.

92

00:05:39,870  -->  00:05:45,330
That's number one and number two is that further down the course you'll see that we will start creating

93

00:05:45,330  -->  00:05:50,010
multidimensional objects or start creating specifically two dimensional objects which don't go much

94

00:05:50,010  -->  00:05:50,910
further than that.

95

00:05:50,910  -->  00:05:55,930
Don't worry I won't go into five dimensions and so on we'll be creating multidimensional objects and

96

00:05:56,090  -->  00:06:01,180
and specifically we'll be creating matrices and a matrix is a two dimensional array.

97

00:06:01,380  -->  00:06:03,290
And we'll talk more about that further down the course.

98

00:06:03,300  -->  00:06:09,720
But it's just important to understand that we will need to work rephrase just because we want to start

99

00:06:09,720  -->  00:06:15,540
working of tables and then eventually we want to move on to that will help us move on to doorframes

100

00:06:15,540  -->  00:06:16,020
and so on.

101

00:06:16,020  -->  00:06:21,210
So just for data analytics purposes it's inevitable for us to start looking for ways that's a good thing

102

00:06:21,270  -->  00:06:22,710
to get introduced to them here.

103

00:06:22,890  -->  00:06:27,850
So that's how you create arrays to just basically take a list and you parse it into NPR-A.

104

00:06:27,930  -->  00:06:28,850
There you have it there.

105

00:06:28,860  -->  00:06:31,050
After that you have an array that you can work with.

106

00:06:31,050  -->  00:06:36,390
So just to get familiar of the concept I encourage you to quickly practice this and maybe create a few

107

00:06:36,390  -->  00:06:40,590
different REZO see for yourself example for example what happens if you don't include a string.

108

00:06:40,680  -->  00:06:46,690
What will happen if you include a mix of data types that are just integers floats and logicals what

109

00:06:46,770  -->  00:06:49,650
will that array converts all those values to.

110

00:06:49,650  -->  00:06:51,690
So things like that and just practice create some arrays.

111

00:06:51,690  -->  00:06:57,030
Check out some other functions that exist in there and that will help us get a head start into the concept

112

00:06:57,030  -->  00:06:58,410
of multidimensional arrays.

113

00:06:58,410  -->  00:06:59,560
When we get to it.

114

00:06:59,670  -->  00:07:02,290
Hope enjoyed this tutorial and I look forward scenics them.

115

00:07:02,400  -->  00:07:03,660
Until then happy coding
