WEBVTT

00:04.250 --> 00:06.040
Hello and welcome back.

00:06.050 --> 00:09.510
Let's have a look at what is a sprite sheet.

00:09.620 --> 00:15.050
So in this lecture we're going to have a look at some terminology as well to make sure that we're all

00:15.050 --> 00:17.090
talking about the same thing.

00:17.330 --> 00:21.600
So Sprite itself is an image that's integrated into a larger scene.

00:21.620 --> 00:26.930
Essentially you could almost see your layers when you working guimpe as sprites that you're building

00:26.930 --> 00:31.490
up upon one another to create a a much larger image.

00:31.520 --> 00:32.940
By the end of it.

00:33.080 --> 00:38.120
Now of course in games This allows you to move characters independently of the background et cetera

00:38.120 --> 00:38.750
et cetera.

00:38.870 --> 00:45.470
Now a sprite sheet is simply many of the sprites combined onto one image and there are several ways

00:45.470 --> 00:53.000
that you can go about cutting a sprites up and whether an eye has an opaque or transparent background

00:53.000 --> 00:58.010
and we'll get into that more in the next lecture when we go about creating our own spreadsheets.

00:58.010 --> 01:05.780
Now typically Sprite sheets themselves are associated with the 2d animations and the G UI elements the

01:05.780 --> 01:13.350
graphical user interface elements like buttons and menu options and things along those lines a texture.

01:13.360 --> 01:18.630
ATLAS is something you may have come across before and is essentially the same thing.

01:18.680 --> 01:22.030
However it is used differently it has a different use.

01:22.100 --> 01:28.100
It is essentially a series of textures all combined onto one image rather than having them as separate

01:28.100 --> 01:29.210
images.

01:29.210 --> 01:34.310
Now before we move on to sprite's sheets themselves we do need to discuss the power of two.

01:34.310 --> 01:36.740
It comes up a lot on forums.

01:36.740 --> 01:38.770
People are very confused about it.

01:38.820 --> 01:47.050
Essentially we're talking about the pixel to pixels ratio of a particular image or Sprite itself.

01:47.270 --> 01:53.900
And it's where you've got two to the power of a particular number that is a whole number a positive

01:53.960 --> 01:55.190
integer.

01:55.190 --> 02:02.370
Now typical ranges in graphics are from two to the zero which is one pixel in width or height to two

02:02.390 --> 02:08.680
to the 12 which is around 4000 when it is 4000 and ninety six pixels in width or height.

02:08.960 --> 02:13.430
Now these are quite large and the other one is obviously quite small.

02:13.490 --> 02:17.350
The x y dimensions themselves can actually be different.

02:17.480 --> 02:25.340
That is important to know so if you need a rectangular texture you can make it by having maybe 256 by

02:25.340 --> 02:29.360
five hadn't done 12 or even one by 512.

02:29.360 --> 02:35.570
If that happens to be what you need now it is usually not necessary these days to have your textures

02:35.630 --> 02:37.110
as a power of two.

02:37.250 --> 02:44.150
But it is still recommended and you'll find it everywhere to prevent uncontrolled blurring or border

02:44.180 --> 02:44.990
issues.

02:44.990 --> 02:48.930
If you've made your images and sprite's a power of two.

02:48.950 --> 02:55.930
You can help avoid these issues especially when it comes to optimization like MIT mapping which do decrease

02:55.920 --> 02:57.010
the image sizes.

02:57.200 --> 03:02.090
One good example here is that if you have an image that's nine pixels wide and you need to divide it

03:02.090 --> 03:06.530
in two where do you divide it divide it four or five.

03:06.920 --> 03:16.200
That's where some blurring or border issues can occur and not power of two is referred to as n pot.

03:16.220 --> 03:19.040
And that's simply anything that's not power of two.

03:19.550 --> 03:26.690
So a quick example here of a optimized spreadsheet where we've got four cars we've got four tiles making

03:26.690 --> 03:27.880
up those roads.

03:27.950 --> 03:35.390
And then we've got an animation consisting of eight individual sprite's and let's have a look at that

03:35.390 --> 03:36.570
in more detail.

03:36.680 --> 03:43.490
We call the combination of images onto one image the packing of those sprites and I'd recommend that

03:43.490 --> 03:51.250
you always go for ease of use for both you and others and organisation rather than going for optimization.

03:51.300 --> 03:53.220
And we'll have a look back in a second.

03:53.390 --> 03:56.180
So think about how your sprite's sheet is going to be read.

03:56.180 --> 03:57.920
Is it clear what is happening.

03:57.920 --> 04:01.040
Is it clear how you're going to chop those images up.

04:01.040 --> 04:03.640
Is it easy that you're going to chop those images up.

04:03.650 --> 04:08.750
It's very easy to combine multiple different sizes onto one sheet and that will cause you a headache

04:08.750 --> 04:10.240
further down the line.

04:10.640 --> 04:15.890
Now Know your target platforms matched at maximum Textus I see you've got this Sprite she would lots

04:15.890 --> 04:16.740
of textures on it.

04:16.850 --> 04:22.160
But if you make that too large you are going to have a problem especially when it comes to the mobile

04:22.190 --> 04:23.070
environment.

04:23.180 --> 04:26.660
So I recommend no larger than 248 by 248.

04:26.690 --> 04:32.040
In general there will be some exceptions to this depending on what you're working on of course.

04:32.420 --> 04:38.570
I would personally avoid mixing different sprite's sizes so if you've got some sprite's that 8 by 8

04:38.870 --> 04:44.870
Don't mix them with something that's 16 by 16 32 by 32 or any other size.

04:44.990 --> 04:50.840
What that will mean is that it is easy to chop the images up later and you can do that really quickly

04:50.900 --> 04:55.300
rather than having to manually do it which can be a real pain to do.

04:55.790 --> 04:58.670
So here is this image again this Sprite sheet.

04:58.670 --> 05:02.850
This is an optimized Sprite sheet where multiple images have been put in.

05:03.090 --> 05:07.840
1 and that's not always a good thing it's great for optimization because your game will only have to

05:07.840 --> 05:10.770
load up one image so that's quite quick.

05:10.880 --> 05:16.840
However when it comes to splitting them out this is far more usable and you can see there are actually

05:16.840 --> 05:21.560
some more parts to that explosion animation to that sprite sheet there.

05:21.610 --> 05:29.230
Now this is far easier for me to read and far easier for me to make in the extreme example of this is

05:29.230 --> 05:35.050
if I was to give you each image individually and that can be difficult because it doesn't make any sense.

05:35.050 --> 05:37.850
It's very easy unless you've got numbers on the end.

05:37.960 --> 05:41.230
It's very easy to not put things in the right order.

05:41.230 --> 05:46.610
This is explicit if you chopping up from left to right going down like you would read a book.

05:46.660 --> 05:50.100
This happens to be very readable now.

05:50.110 --> 05:56.860
The other two examples the cars and the road are an example of game elements that can be packed into

05:56.860 --> 06:00.030
a sprite sheets rather than animations.

06:00.040 --> 06:03.380
And of course you could have menu items there as well.

06:04.730 --> 06:07.750
Now a line in your work is critical.

06:07.760 --> 06:13.460
If you get it out of alignment when you go and chop up your Sprite sheet it will cause you issues.

06:13.460 --> 06:19.340
So the power of two as we've mentioned before for the image itself the Sprite sheet or an individual

06:19.340 --> 06:25.540
Sprite isn't actually necessary you will hear lots of people saying yes it is yes it is but it's not.

06:25.850 --> 06:30.790
Unfortunately not using power of two can cause some issues.

06:30.860 --> 06:33.210
If you're aware of them you can work around it.

06:33.290 --> 06:39.740
So be aware that the not parity sprite's can bleed into one another and have border issues so as you

06:39.740 --> 06:46.100
put them next to one another if the Sprite itself is going to be mismatched that's a form of optimization

06:46.610 --> 06:52.050
that compresses the image when it comes to the level of detail so you don't have to display full size

06:52.070 --> 06:54.680
textures far away from the viewer.

06:54.950 --> 07:00.100
Well that can end up bleeding and making your sprite's not look how you intended to.

07:01.260 --> 07:09.840
Now consider if you don't have power of two sprites packing them into power two cells so an environment

07:09.870 --> 07:15.060
or extra padding around there that gives the Sprite power of two border around it and this just means

07:15.060 --> 07:18.930
it's going to be easy to chop up later for sanity.

07:18.930 --> 07:24.700
I still recommend sticking with power of two sprites and Sprite sheets as well.

07:24.750 --> 07:28.280
Everything fits together properly and easily.

07:28.290 --> 07:32.490
Let's have a quick look at how you could arrange a couple of Sprite sheets.

07:33.080 --> 07:37.850
Okay so I'm going to draw this one out so we get an idea of what's happening.

07:37.850 --> 07:45.490
So if you have a series of textures and I'm literally just drawing this really quick and let's say there

07:45.490 --> 07:51.130
are eight by eight you can put them these sprites here.

07:51.920 --> 07:58.330
You can put them into an image that would be 32 by eight in total.

07:58.460 --> 08:01.790
So that's packing those sprites and its power of two.

08:01.830 --> 08:07.880
And when it comes to chopping it up later we can say that these are all eight by eight and in most game

08:07.880 --> 08:14.950
engines you can chop them up automatically using that and that's a lot quicker for you to use them then.

08:15.200 --> 08:21.230
Now if you've got odd sized one so if we also had one that was that say this was this is going to be

08:21.530 --> 08:23.200
16 by 16 here.

08:23.300 --> 08:30.090
I would put them as a separate image and depending on how many you've got would depend on how you pack

08:30.110 --> 08:32.960
them so you could go in a straight line like this.

08:32.960 --> 08:41.360
I mean if you like that explosion animation I've decided to pack them into a square which is basically

08:41.690 --> 08:43.960
a 16 by 16 grid.

08:44.060 --> 08:46.280
It's not stop 16 by 16 pixels.

08:46.280 --> 08:50.140
In this case and I've filled all of these here.

08:51.200 --> 09:00.260
As we go down I think that many but there's some wasted space here now it's not wasted if you decide

09:00.260 --> 09:06.710
to optimize further in and put other stuff in that sprite sheet then it's going to be harder later on

09:06.710 --> 09:08.270
to utilize that sprites.

09:08.300 --> 09:10.710
Because you will have to chop it up manually.

09:10.970 --> 09:18.530
It also means that you can name your image appropriately so if this was an explosion then unless these

09:18.590 --> 09:23.060
extra bits that you put in were also related to something explosive.

09:23.060 --> 09:28.150
It can be hard to organize your work and understand where things are stored.

09:28.160 --> 09:36.650
So finally here if you had four eight by eight images this is a perfect image size that's fine.

09:36.650 --> 09:40.030
This is also perfectly valid as well.

09:40.100 --> 09:47.510
It doesn't matter how you orientate them providing it can be read by both a human looking at the Sprite

09:47.510 --> 09:53.530
sheet or a computer cutting up that sprite sheet that is absolutely fine.

09:53.720 --> 10:00.560
Now you will see some Sprite sheets out there that have big images little ones et cetera et cetera and

10:00.560 --> 10:03.110
it looks like they've been randomly placed.

10:03.110 --> 10:06.970
You may be looking at a texture Atlas if that's the case.

10:06.980 --> 10:12.680
The other thing that you might be looking at is an optimized Sprite sheet which is often done at the

10:12.680 --> 10:21.320
very end packing all of the sprites you can into is small a space as possible for optimization.

10:21.320 --> 10:27.110
Now at this stage during the creative process you should not be thinking too hard about optimization

10:27.110 --> 10:31.810
it should all be about how quickly you can iterate through your work.

10:31.910 --> 10:38.840
And this is of course one of the reasons why games in our foreign beta classes are optimize because

10:38.870 --> 10:44.540
often things like the textures won't all be packaged in a neat and sensible manner because we're not

10:44.540 --> 10:46.330
at final release yet.

10:46.370 --> 10:52.370
We are just going through the process of generating all of these once they're all done and dusted and

10:52.370 --> 10:54.030
you're not touching them again.

10:54.050 --> 10:57.550
That would be the time to start the optimization process.

10:57.560 --> 11:03.860
Once you're happy with that being the final product and that now leads us nicely on to the challenge

11:03.860 --> 11:04.990
for this lecture.

11:05.270 --> 11:11.660
So uh I would like you to think about what the minimum power of two size Sprite sheet will be for for

11:11.660 --> 11:13.430
the following sprite's.

11:13.430 --> 11:18.350
Now the reason why I say minimum is of course you could just have a separate sheet that was large enough

11:18.350 --> 11:24.380
to fit them all on out being at all optimized and B want to avoid that as well because that is just

11:24.380 --> 11:26.300
a waste of text space.

11:26.330 --> 11:29.180
So the first one is eight sprites that are eight by eight.

11:29.180 --> 11:36.710
How would you pack phones in into a sprite sheet that also matched power to 11 sprites that are 16 by

11:36.710 --> 11:41.440
16 five Sprites that 8 by 16.

11:42.180 --> 11:45.980
How about seven sprites that are 12 by 15 in size.

11:45.990 --> 11:48.130
What would you do in that case.

11:48.150 --> 11:52.590
And finally he had quite a few sprite's to put in but they were seven by nine.

11:52.620 --> 11:54.710
How would that work out.

11:54.720 --> 11:55.200
Go ahead.

11:55.200 --> 11:57.840
Pause video now and give that a go.

12:00.350 --> 12:02.000
OK everyone welcome back.

12:02.000 --> 12:08.000
Now of course you probably realized whilst doing this exercise that there was more than one correct

12:08.120 --> 12:09.710
answer.

12:09.710 --> 12:15.500
So with that in mind let's go through some of the options that you could have had during this challenge.

12:15.870 --> 12:16.930
Okay welcome back.

12:16.940 --> 12:18.910
In this challenge example.

12:18.920 --> 12:23.910
I'm not gonna do every single one of these you'll see that it will become quite repetitive.

12:23.930 --> 12:29.480
We'll do the eight sprite's there to eight by eight and then we'll do the five Sprites that are eight

12:29.510 --> 12:37.250
by 16 and then the seven sprite's to 12 by 15 the same premice on each one will apply.

12:37.250 --> 12:40.950
So let's start off with the eight sprites that eight by eight.

12:41.240 --> 12:49.350
So when we have eight lots of eight by eight sprites we know that we can have one column.

12:50.100 --> 12:52.400
And eight rows if we wanted to.

12:52.410 --> 12:59.530
So that would make an image that looks like this or similar to this excuse them not being actual squares.

12:59.760 --> 13:03.020
And this is going to be a power of two on each side.

13:03.120 --> 13:10.380
So this would be 64 pixels a cross that's eight by eight and this is going to be a sieve that satisfies

13:10.770 --> 13:12.600
both the requirements.

13:12.600 --> 13:19.230
Now what you can do when you do this in your notice this on all of the examples we've got here is the

13:19.230 --> 13:25.590
other Sprite sheet sizes there are also power off to you simply increase the power of two or one side

13:25.620 --> 13:27.520
and decrease on the other.

13:27.810 --> 13:35.730
So if we go for the next value of a power of two which is 16 we can have 16 by 32.

13:36.080 --> 13:42.730
And at this point it will inflects and become 32 by 16.

13:42.900 --> 13:46.610
So there is an example of almost the complete set.

13:46.620 --> 13:52.620
Until we get all the way back to in this case eight by one they've got to think about readability as

13:52.620 --> 13:54.160
well when it comes to this.

13:54.390 --> 13:59.240
At a picture eight images long being red cross is not going to be too difficult.

13:59.370 --> 14:07.320
But if this was more a cross it may be better to shove it down onto a second row further down so that

14:07.320 --> 14:11.630
it is easier to read especially in thumbnail format when it's smaller.

14:11.640 --> 14:16.590
Obviously when you got it blown up and it's the only thing you see on the screen is a lot easier to

14:16.590 --> 14:17.120
read.

14:17.160 --> 14:20.990
But is it still readable when it's in a thumbnail when you're previewing it.

14:21.000 --> 14:22.910
That is also quite important.

14:23.070 --> 14:26.690
So five Sprites four to eight by 16.

14:26.700 --> 14:28.830
So this is a slightly different tact.

14:28.830 --> 14:30.900
It's eight by 16 and there's five of them.

14:30.900 --> 14:32.400
Let's have a closer look.

14:33.890 --> 14:36.160
So five lots of eight by 16.

14:36.170 --> 14:38.800
I'm just writing this down so I don't forget.

14:38.810 --> 14:40.790
So again we've got here.

14:42.330 --> 14:45.780
A shape four is similar to this an 8 by 16.

14:45.870 --> 14:51.390
And we've got five lots of them so we could go along five times and create something like this like

14:51.390 --> 14:52.770
we did before.

14:52.800 --> 14:54.920
So let's have a look at that five.

14:54.930 --> 14:56.520
Yes I can count brillion.

14:56.760 --> 14:58.570
Okay so we've got this here.

14:58.650 --> 15:04.140
If we do eight times five will soon see that that is not a power of two.

15:04.140 --> 15:05.820
It's 40.

15:06.270 --> 15:07.380
So what do we do.

15:07.530 --> 15:15.570
Well in this case we would enlarge it and we'd have some wasted space and that is okay if that happens.

15:15.570 --> 15:18.400
So in here you'd have another 16 pixels.

15:18.400 --> 15:26.220
No I can't add up another 24 pixels of wasted space going along here that just wouldn't be used.

15:26.280 --> 15:29.010
But that is absolutely fine at this point in time.

15:29.010 --> 15:32.070
Again we're not thinking heavily about optimization.

15:32.070 --> 15:39.090
Of course she need to be aware of it but don't make it your goal your goal at this point in time is

15:39.090 --> 15:44.750
to create sprite's and Sprite sheets and not optimize them.

15:45.650 --> 15:52.380
Finally we've got 20 or sorry seven sprites that are 12 by 15.

15:52.490 --> 15:56.350
I don't want to do the 20 because it's a large number and I can't draw that many.

15:56.390 --> 16:01.730
So we have seven sprites that are 12 by 15.

16:01.730 --> 16:09.290
So the easiest thing to do here if you have a texture is 12 pixels high by 15 pixels wide.

16:09.290 --> 16:11.420
This is going to be a rough representation.

16:11.420 --> 16:19.070
There we go is to pad it out so that when you're chopping it up and placing it it is evenly distributed.

16:19.070 --> 16:21.320
And also as a power of two.

16:21.320 --> 16:26.780
So what we can do is this with here we can add on a pixel just one pixel just there.

16:26.780 --> 16:33.410
So we would in fact just increase the image size itself we wouldn't scale the image with scale the canvas

16:33.740 --> 16:37.880
that the image or the sprite in this case was on that is important.

16:37.880 --> 16:43.670
And on the other side well you could just go straight down and have it in the top corner if you wanted

16:43.700 --> 16:46.130
and have four more pixels here.

16:46.280 --> 16:53.210
Now we can stack them together as 16 by sixteens and then we can follow exactly the same process we've

16:53.210 --> 16:56.120
done before well you've got seven lots of those.

16:56.120 --> 16:57.890
So we could have seven times six.

16:57.890 --> 16:59.410
That's not going to work.

16:59.420 --> 17:04.970
So in this case again this is going to be squares you'd probably end up with something that looks like

17:05.000 --> 17:06.720
this.

17:06.950 --> 17:16.700
With this being 32 this being 64 and of course with there being 7 by the time we get here we've got

17:16.700 --> 17:19.970
a little bit of wasted space at the end.

17:19.970 --> 17:21.260
How did you guys get on.

17:21.320 --> 17:22.580
How did you organize yours.

17:22.580 --> 17:27.710
Did you come to the same conclusion about padding around the images or did you try to fit them in in

17:27.710 --> 17:29.760
slightly different ways.

17:29.780 --> 17:34.830
Please post your results over in the discussions and I will see well in the next lecture.
