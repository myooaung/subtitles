WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.290
by the for mongo.

00:00:01.290 --> 00:00:05.890
DB scans every document in a collection to select those which matched the query condition.

00:00:05.890 --> 00:00:11.810
If you have a query that uses a particular field on the queries used by the client's quite

00:00:11.810 --> 00:00:12.240
often,

00:00:12.240 --> 00:00:16.440
then we can create an index for the field so that the performance of the query can be

00:00:16.440 --> 00:00:16.980
increased.

00:00:16.980 --> 00:00:22.950
Mongo DB offers different kinds of indexes On the most common one is the single feel index

00:00:22.950 --> 00:00:22.950
.

00:00:22.950 --> 00:00:25.140
Before we create this index,

00:00:25.140 --> 00:00:26.700
let's have a look at this command.

00:00:26.700 --> 00:00:30.050
We are searching a contact using a phone number.

00:00:30.050 --> 00:00:36.860
We can ask mongo db as How did it arrive at this particular result by calling the explain

00:00:36.860 --> 00:00:38.640
function on the find.

00:00:38.640 --> 00:00:44.780
The result shows which one is a winning plan on the winning plants is that it is called

00:00:44.780 --> 00:00:45.210
scan.

00:00:45.210 --> 00:00:45.800
Basically,

00:00:45.800 --> 00:00:46.360
it is.

00:00:46.360 --> 00:00:52.830
The phone number was searched by matching this phone number for every document until it

00:00:52.830 --> 00:00:54.920
phoned Are it is not found.

00:00:54.920 --> 00:00:56.590
This is quite inefficient.

00:00:56.590 --> 00:00:58.590
If the quality is repeatedly being used,

00:00:58.590 --> 00:01:00.270
you are like this.

00:01:00.270 --> 00:01:02.940
We can now use index first.

00:01:02.940 --> 00:01:07.750
Let's see what other indexes that are currently available by giving db dot contact,

00:01:07.750 --> 00:01:08.220
start,

00:01:08.220 --> 00:01:15.360
get in excess and It says that there is only one single index on the field.

00:01:15.360 --> 00:01:15.920
Underscore.

00:01:15.920 --> 00:01:17.010
80 underscored.

00:01:17.010 --> 00:01:18.660
The property is indexed,

00:01:18.660 --> 00:01:20.380
ready for for all collections.

00:01:20.380 --> 00:01:21.140
For example,

00:01:21.140 --> 00:01:28.050
debido our employees dart get indexes also shows me that there is one index on the

00:01:28.050 --> 00:01:31.880
Underscore 80 and we can go and check for all the collections.

00:01:31.880 --> 00:01:33.840
And the story is saying now,

00:01:33.840 --> 00:01:41.150
let's create a new index for the phone Property of contacts To do so db dot context dot

00:01:41.150 --> 00:01:46.150
create index and then we have to say phone to be indexed.

00:01:46.150 --> 00:01:51.800
Now it gives me a message saying that number of indexes before was one.

00:01:51.800 --> 00:01:53.890
A number of indexes after is,

00:01:53.890 --> 00:01:54.210
too.

00:01:54.210 --> 00:01:59.460
We can verify the same thing by issuing the client again to get the indexes,

00:01:59.460 --> 00:02:02.850
and we do see that there are two off them now.

00:02:02.850 --> 00:02:04.810
We can also ask mongo db toe,

00:02:04.810 --> 00:02:08.280
explain the quality If we executed no.

00:02:08.280 --> 00:02:14.340
And now you can see that out off many plans it came across with.

00:02:14.340 --> 00:02:17.340
It Now uses an I X scan,

00:02:17.340 --> 00:02:19.200
which is nothing but index can.

00:02:19.200 --> 00:02:21.070
If you want to drop the index,

00:02:21.070 --> 00:02:29.930
db dot contacts dot drop index and then specify which is the property on which you want to

00:02:29.930 --> 00:02:30.890
drop the index,

00:02:30.890 --> 00:02:37.180
so I have here for as the property and then I can just say drop indexes.

00:02:37.180 --> 00:02:39.600
It says number of indexes waas too,

00:02:39.600 --> 00:02:41.860
which means now it should be only one.

00:02:41.860 --> 00:02:45.180
We can also check it out by getting the index is listed,

00:02:45.180 --> 00:02:47.050
which is that there is only one,

00:02:47.050 --> 00:02:50.250
and also we can check the explain functions result,

00:02:50.250 --> 00:02:52.100
which is now going back to the call scan.

