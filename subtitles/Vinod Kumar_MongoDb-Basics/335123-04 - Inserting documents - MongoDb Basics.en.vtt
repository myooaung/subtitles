WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.050
you know that we have created a contacts collection.

00:00:03.050 --> 00:00:05.640
We can also add arbitrary values.

00:00:05.640 --> 00:00:06.220
For example,

00:00:06.220 --> 00:00:11.840
I can clear the job was variable that there will be one equals to an empty object they will

00:00:11.840 --> 00:00:14.070
not name because toe Come on,

00:00:14.070 --> 00:00:15.890
they wondered.

00:00:15.890 --> 00:00:23.250
Email equals toe Come on at you know dot co we wondered City equals toe kangaroo.

00:00:23.250 --> 00:00:27.160
And now I can add this to the existing collection,

00:00:27.160 --> 00:00:29.000
which is contacts like until now,

00:00:29.000 --> 00:00:30.160
debido or contact,

00:00:30.160 --> 00:00:30.560
start,

00:00:30.560 --> 00:00:36.620
insert And then I can say the one and I will have a second record Now,

00:00:36.620 --> 00:00:43.050
in mongo db terminologies a record is termed as document and the reason is very simple.

00:00:43.050 --> 00:00:49.950
In arguments at a car consist off rows and columns where every role is off similar columns

00:00:49.950 --> 00:00:49.950
.

00:00:49.950 --> 00:00:52.540
But in case off mongo db,

00:00:52.540 --> 00:00:53.350
that's not so.

00:00:53.350 --> 00:01:03.080
Now if I say db dot context art find dot pretty you will see that there are two documents

00:01:03.080 --> 00:01:06.610
that exist with the different schema are different structure.

00:01:06.610 --> 00:01:08.820
And if you also have observed,

00:01:08.820 --> 00:01:15.160
we created the contacts collection without having to define a skim off that so this is one

00:01:15.160 --> 00:01:18.550
advantage off mongo db Are any no sequel?

00:01:18.550 --> 00:01:23.870
Databases engine you can also add a raise off objects.

00:01:23.870 --> 00:01:24.760
For example,

00:01:24.760 --> 00:01:28.800
if I can create war be underscored.

00:01:28.800 --> 00:01:31.580
Error equals toe on a day,

00:01:31.580 --> 00:01:33.360
which is like a square bracket.

00:01:33.360 --> 00:01:44.610
And then a cuddly record and then of a name is John Doe Onda and City is the last 2nd 1

00:01:44.610 --> 00:01:49.350
Probably name is Gender City.

00:01:49.350 --> 00:01:51.250
That's in Chicago.

00:01:51.250 --> 00:01:55.260
Andi closed bracket.

00:01:55.260 --> 00:02:02.950
So no PR is in a hurry so I can check that out and the scenery and I liken entered this by

00:02:02.950 --> 00:02:04.280
using the same command again.

00:02:04.280 --> 00:02:07.100
So db dot contact start insult.

00:02:07.100 --> 00:02:07.950
And then I said,

00:02:07.950 --> 00:02:09.770
Be a are now,

00:02:09.770 --> 00:02:11.400
Since I given Ari,

00:02:11.400 --> 00:02:16.030
it's going to say that there are two documents that got inserted and it also gives me a

00:02:16.030 --> 00:02:19.850
different response this time that says that bulk a right result.

00:02:19.850 --> 00:02:21.850
There are no errors.

00:02:21.850 --> 00:02:26.350
Onda number off documents inserted is too,

00:02:26.350 --> 00:02:29.050
and some other useful information.

00:02:29.050 --> 00:02:33.210
Now I can just say here that d be dark Contact.

00:02:33.210 --> 00:02:36.460
Start find dot Pretty on.

00:02:36.460 --> 00:02:42.590
You'll see all the four documents are intact if you don't use the pretty function and then

00:02:42.590 --> 00:02:44.270
just I believe you got contacts.

00:02:44.270 --> 00:02:50.960
Start find you'll see that the output is not so pretty now this is true,

00:02:50.960 --> 00:02:56.680
especially if your document structure is very complex and nested and all the stuff the find

00:02:56.680 --> 00:02:58.960
function returns the cursor on.

00:02:58.960 --> 00:03:00.490
Since we're not collecting that,

00:03:00.490 --> 00:03:03.750
the Mongo shell displays the 1st 20 documents,

00:03:03.750 --> 00:03:06.050
and since we don't have enough documents,

00:03:06.050 --> 00:03:07.550
we're not seeing that of a difference.

