WEBVTT
1
00:00:01.323 --> 00:00:06.926
Now let's turn our attention to a subject that's still very popular now in 2018,

2
00:00:06.926 --> 00:00:10.412
Server Message Block file sharing.

3
00:00:10.412 --> 00:00:15.372
This slide makes me laugh a little bit because the graphic dates back to

4
00:00:15.372 --> 00:00:19.684
before the year 2000 or probably around the year 2000.

5
00:00:19.684 --> 00:00:23.275
It's a Microsoft graphic that's appeared in their official curriculum training,

6
00:00:23.275 --> 00:00:26.225
and I've taught using this graphic for almost as

7
00:00:26.225 --> 00:00:28.542
long as I've been in the industry,

8
00:00:28.542 --> 00:00:31.866
and I've been in the industry full time since 1997.

9
00:00:31.866 --> 00:00:34.752
By the way, the attribution again is in the lower left.

10
00:00:34.752 --> 00:00:38.325
I want to teach the SMB file sharing predominantly through a demo,

11
00:00:38.325 --> 00:00:41.713
but here I just want to get you started with the use case.

12
00:00:41.713 --> 00:00:44.062
In a business environment of practically any size,

13
00:00:44.062 --> 00:00:47.010
you want to make it convenient to share files.

14
00:00:47.010 --> 00:00:49.599
You don't want to email file copies.

15
00:00:49.599 --> 00:00:51.962
I know that that still happens in 2018,

16
00:00:51.962 --> 00:00:55.049
and it's very unfortunate because when you have multiple

17
00:00:55.049 --> 00:00:57.197
file versions going across different users,

18
00:00:57.197 --> 00:00:58.907
and they're sending them back and forth,

19
00:00:58.907 --> 00:01:01.681
you're going to have version control problems,

20
00:01:01.681 --> 00:01:02.879
almost guaranteed.

21
00:01:02.879 --> 00:01:07.969
So the idea is in Windows you can use the SMB protocol,

22
00:01:07.969 --> 00:01:10.082
that's the Server Message Block Protocol that's

23
00:01:10.082 --> 00:01:12.964
been around in Windows for a long, long,

24
00:01:12.964 --> 00:01:15.477
long time, to conveniently share folders.

25
00:01:15.477 --> 00:01:19.175
Now you can share entire drives, specifically volumes,

26
00:01:19.175 --> 00:01:20.038
but more commonly,

27
00:01:20.038 --> 00:01:23.971
you have a folder that contains one or more resources that you want to

28
00:01:23.971 --> 00:01:27.165
share with one or more users in your local area network,

29
00:01:27.165 --> 00:01:31.050
so you can set shared folder permissions on that resource.

30
00:01:31.050 --> 00:01:33.189
By the process of inheritance,

31
00:01:33.189 --> 00:01:37.087
all of the resources inside that folder pick up the

32
00:01:37.087 --> 00:01:39.195
permissions that are set on the folder.

33
00:01:39.195 --> 00:01:42.877
But what you do in the business world is you can customize the

34
00:01:42.877 --> 00:01:47.321
permissions on the contents of a shared folder on a file-by-file

35
00:01:47.321 --> 00:01:48.592
or subfolder-by-subfolder basis.

36
00:01:48.592 --> 00:01:53.698
This is one of the great benefits of the NTFS file system.

37
00:01:53.698 --> 00:01:54.107
Hopefully,

38
00:01:54.107 --> 00:01:57.470
you've already covered that module earlier in the

39
00:01:57.470 --> 00:02:00.107
course so you're familiar with NTFS.

40
00:02:00.107 --> 00:02:02.892
So in this example, we have a folder, Public,

41
00:02:02.892 --> 00:02:06.367
that's shared out with full control permission for all network users,

42
00:02:06.367 --> 00:02:10.892
but there may be a sensitive file in there that you want users who

43
00:02:10.892 --> 00:02:13.961
are in that users group to read but not write.

44
00:02:13.961 --> 00:02:15.434
You see what I mean?

45
00:02:15.434 --> 00:02:20.430
Full control happens to be the widest possible permission in Windows.

46
00:02:20.430 --> 00:02:24.402
So if we set the NTFS permission read-only on file,

47
00:02:24.402 --> 00:02:27.965
the most restrictive permission becomes the effective permission,

48
00:02:27.965 --> 00:02:32.384
and those users will be able to read/write anything else in that folder,

49
00:02:32.384 --> 00:02:33.926
but only read FileA.

50
00:02:33.926 --> 00:02:35.852
You see what I mean?

51
00:02:35.852 --> 00:02:41.402
So to sum up, NTFS permissions are always there on NTFS volumes.

52
00:02:41.402 --> 00:02:43.707
You may need to customize them though if,

53
00:02:43.707 --> 00:02:44.284
for instance,

54
00:02:44.284 --> 00:02:48.834
you set a shared folder permission that gives a user or a group higher

55
00:02:48.834 --> 00:02:51.848
permission than they would have at the NTFS level.

56
00:02:51.848 --> 00:02:54.049
If you're thinking to yourself, Tim, wow,

57
00:02:54.049 --> 00:02:57.327
determining a user's effective permissions can be problematic,

58
00:02:57.327 --> 00:02:59.975
you're absolutely right, and you're thinking properly.

59
00:02:59.975 --> 00:03:00.910
For that reason,

60
00:03:00.910 --> 00:03:04.726
there's some general best practices with how to set these permissions.

61
00:03:04.726 --> 00:03:06.560
I'm going to show you that in the demo.

62
00:03:06.560 --> 00:03:10.084
And there's also built into Windows Client and Windows Server a mechanism

63
00:03:10.084 --> 00:03:13.222
for examining the effective permissions that a user has.

64
00:03:13.222 --> 00:03:22.000
That's something that you wind up doing from a troubleshooting perspective all the time as a systems administrator.

