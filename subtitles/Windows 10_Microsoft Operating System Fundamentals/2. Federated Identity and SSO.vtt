WEBVTT
1
00:00:00.502 --> 00:00:04.199
Federated identity.

2
00:00:04.199 --> 00:00:07.719
Now federated identity, also called single sign-on,

3
00:00:07.719 --> 00:00:08.814
is a complex subject,

4
00:00:08.814 --> 00:00:12.069
so we can't treat it to too much depth due to our

5
00:00:12.069 --> 00:00:13.282
scope constraints in this course,

6
00:00:13.282 --> 00:00:16.616
but when you look at it from a bird's eye perspective it

7
00:00:16.616 --> 00:00:18.709
becomes a little easier to understand,

8
00:00:18.709 --> 00:00:21.867
because I can essentially guarantee you that you use SSO

9
00:00:21.867 --> 00:00:23.868
even if you're not consciously aware of it.

10
00:00:23.868 --> 00:00:27.611
Here's the problem that we're trying to solve in a hybrid cloud environment.

11
00:00:27.611 --> 00:00:31.289
Your users will log on to the Active Directory domain

12
00:00:31.289 --> 00:00:32.878
using their username and password.

13
00:00:32.878 --> 00:00:36.058
In Active directory you have what's called the user principle name,

14
00:00:36.058 --> 00:00:40.136
that is the user's name @, and then their Active Directory DNS domain,

15
00:00:40.136 --> 00:00:42.959
and oftentimes they match to their email address,

16
00:00:42.959 --> 00:00:43.790
but not always.

17
00:00:43.790 --> 00:00:44.622
Bottom line is,

18
00:00:44.622 --> 00:00:48.237
the user signs into his or her computer at the beginning of the day,

19
00:00:48.237 --> 00:00:51.117
and they don't have to authenticate again against any

20
00:00:51.117 --> 00:00:53.223
local resources in that environment.

21
00:00:53.223 --> 00:00:56.831
Things change when we go to Software as a Service apps in the cloud,

22
00:00:56.831 --> 00:01:02.736
for example, Office 365 which uses Azure Active Directory as its identity store,

23
00:01:02.736 --> 00:01:07.535
you can use Microsoft Azure to build your own Software as a Service apps,

24
00:01:07.535 --> 00:01:09.054
again, relying upon Azure AD.

25
00:01:09.054 --> 00:01:13.574
So what a lot of businesses will do is go one of many

26
00:01:13.574 --> 00:01:16.697
approaches to simplify authentication to cloud apps.

27
00:01:16.697 --> 00:01:20.234
The worst-case scenario is what you see on the slide right now where the

28
00:01:20.234 --> 00:01:23.524
user has two totally separate sets of credentials.

29
00:01:23.524 --> 00:01:25.106
That's never a good experience,

30
00:01:25.106 --> 00:01:28.581
especially if the passwords are different or otherwise fall out of sync.

31
00:01:28.581 --> 00:01:29.895
What you want is this,

32
00:01:29.895 --> 00:01:34.882
where you're on-premises identity matches the identity up in the cloud.

33
00:01:34.882 --> 00:01:37.477
We're concerning ourselves with the Microsoft cloud here,

34
00:01:37.477 --> 00:01:38.907
so that's Azure Active Directory.

35
00:01:38.907 --> 00:01:40.623
And there's many ways to go,

36
00:01:40.623 --> 00:01:44.647
you can actually replicate or copy the accounts to Azure AD,

37
00:01:44.647 --> 00:01:47.124
but identity federation goes one step beyond,

38
00:01:47.124 --> 00:01:51.600
and I want to discuss that in a little bit more detail.

39
00:01:51.600 --> 00:01:55.892
With federation, you have the user to repeat one more time,

40
00:01:55.892 --> 00:01:58.652
log on once to on-premises Active Directory,

41
00:01:58.652 --> 00:02:03.215
and they need access through Azure Active Directory to a cloud application.

42
00:02:03.215 --> 00:02:07.839
First, the authentication request is from the user to the SaaS app,

43
00:02:07.839 --> 00:02:10.433
maybe the user opens up their web browser and tries

44
00:02:10.433 --> 00:02:12.702
to access their Office 365 assets.

45
00:02:12.702 --> 00:02:15.683
Instead of being prompted for credentials,

46
00:02:15.683 --> 00:02:19.752
they're passed back, this should happen seamlessly under the hood,

47
00:02:19.752 --> 00:02:23.617
back to their source of authority, which is on-premises Active Directory.

48
00:02:23.617 --> 00:02:24.243
Active Directory,

49
00:02:24.243 --> 00:02:27.058
if you've configured it with an SSO solution like

50
00:02:27.058 --> 00:02:28.936
Active Directory Federation Services,

51
00:02:28.936 --> 00:02:33.939
AD can send a token representing the user back to Azure AD,

52
00:02:33.939 --> 00:02:37.902
and Azure AD actually doesn't do any authentication of its own,

53
00:02:37.902 --> 00:02:41.544
it trusts that accounts that have been properly validated on the

54
00:02:41.544 --> 00:02:44.768
other end of that channel are who they claim to be,

55
00:02:44.768 --> 00:02:47.291
and then access is granted to the SaaS app.

56
00:02:47.291 --> 00:02:48.347
That's the SSO scenario.

57
00:02:48.347 --> 00:02:51.673
Now how does that affect us in Windows 10 you're wondering?

58
00:02:51.673 --> 00:02:53.574
Well, let's keep going.

59
00:02:53.574 --> 00:02:55.454
This is a simple workflow.

60
00:02:55.454 --> 00:02:58.503
If you're logging into Microsoft Azure at portal.

61
00:02:58.503 --> 00:02:58.921
azure.

62
00:02:58.921 --> 00:03:01.008
com, you're prompted for credentials,

63
00:03:01.008 --> 00:03:04.375
and this could be an Azure AD native account,

64
00:03:04.375 --> 00:03:06.753
or it could be a Microsoft account.

65
00:03:06.753 --> 00:03:11.371
Now a Microsoft account is a separate identity from an Azure AD account

66
00:03:11.371 --> 00:03:14.024
because Microsoft accounts have been around for many,

67
00:03:14.024 --> 00:03:15.019
many, many years.

68
00:03:15.019 --> 00:03:17.032
They've gone through so many different names.

69
00:03:17.032 --> 00:03:20.616
For a long time, they were called Windows Live IDs,

70
00:03:20.616 --> 00:03:23.526
but now because the new Microsoft plays well with

71
00:03:23.526 --> 00:03:25.056
other vendors and other products,

72
00:03:25.056 --> 00:03:27.987
it's just generically known as a Microsoft account.

73
00:03:27.987 --> 00:03:28.962
So what happens,

74
00:03:28.962 --> 00:03:31.889
if you put in your Microsoft account credentials here

75
00:03:31.889 --> 00:03:34.003
at the Azure portal sign-in page,

76
00:03:34.003 --> 00:03:37.623
you'll actually see the browser redirect as you see here.

77
00:03:37.623 --> 00:03:39.110
This is that federation.

78
00:03:39.110 --> 00:03:39.479
Basically,

79
00:03:39.479 --> 00:03:43.410
what's happening is that Azure recognizes that there's somebody knocking on

80
00:03:43.410 --> 00:03:46.681
the door with not a native Azure Active Directory account,

81
00:03:46.681 --> 00:03:48.049
but from another service.

82
00:03:48.049 --> 00:03:51.508
Now that other service technically could be anywhere, you know.

83
00:03:51.508 --> 00:03:54.759
You might log into Hootsuite using your twitter ID,

84
00:03:54.759 --> 00:03:58.266
or you might log into Concur using a LinkedIn account.

85
00:03:58.266 --> 00:04:01.052
Those are just examples that popped off the top of my head.

86
00:04:01.052 --> 00:04:04.457
They all deal with federated trust that's configured behind the

87
00:04:04.457 --> 00:04:06.639
scenes between those two different environments.

88
00:04:06.639 --> 00:04:09.600
So in this environment we're brought back to live.

89
00:04:09.600 --> 00:04:14.020
com, which is where Microsoft maintains its Microsoft account database,

90
00:04:14.020 --> 00:04:18.604
and you are asked to provide credentials here in the browser.

91
00:04:18.604 --> 00:04:21.440
If you're doing a hybrid cloud, there's ways around this,

92
00:04:21.440 --> 00:04:24.247
like I said, to make it totally SSO,

93
00:04:24.247 --> 00:04:26.986
but we authenticate once to Microsoft account,

94
00:04:26.986 --> 00:04:33.000
and then we're passed forward into Azure. I hope that that makes some semblance of sense.

