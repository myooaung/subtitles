WEBVTT

00:02.080 --> 00:07.720
Before starting with actually setting up and configuring firebase I want to highlight how authentication

00:07.720 --> 00:14.620
works and how it differs to a normal web page as authentication in a normal web page and with that this

00:14.620 --> 00:15.210
is important.

00:15.220 --> 00:23.530
I do not mean angular web app but I basically mean a normal web page where you have your back and code

00:23.560 --> 00:29.110
and where you render some views from that code there you typically use a session based approach for

00:29.110 --> 00:30.280
authenticating the user.

00:30.310 --> 00:33.250
So your server and your client are connected for a session.

00:33.250 --> 00:39.230
You could say now for a web app like a single page application related with angular or react or view.

00:39.260 --> 00:39.770
Yes.

00:39.910 --> 00:45.380
And for a mobile app with a different approach we still obviously have a server and a client though

00:45.390 --> 00:49.240
declined of course is not only a browser but could also be a mobile device.

00:49.630 --> 00:53.860
But there we don't have a strong connection between client and server.

00:54.010 --> 00:55.850
And I think this is kind of intuitive.

00:55.870 --> 01:01.870
If you look at it like this if you're opening the app on your mobile phone you might not even have internet

01:01.870 --> 01:07.120
connection and even if you do have connection you might install that app with the same account on multiple

01:07.120 --> 01:08.050
devices.

01:08.050 --> 01:14.190
Maybe you also have a back end which is able to handle both web apps and mobile device apps.

01:14.260 --> 01:17.590
So there really is not that strong of a connection.

01:17.590 --> 01:23.130
Its not like a web page which is always rendered if you visit a certain domain if you are a certain

01:23.140 --> 01:24.070
you are l.

01:24.100 --> 01:32.090
But instead you really are flexible on how this data may be retrieved on how your service may be used.

01:32.290 --> 01:34.830
And therefore we dont have a session based approach.

01:34.900 --> 01:38.760
We don't want is a strong connection between server and client.

01:38.950 --> 01:46.120
Instead we have a number approach you offend Tecate yourselves by sending the authentication data to

01:46.120 --> 01:46.720
the server.

01:46.720 --> 01:52.240
So for example if we enter something and you sign in component and you sign it page we enter our email

01:52.240 --> 01:55.980
and password we sent that data to the server on the server.

01:55.990 --> 02:02.470
We will check if we do have a user which kind of uses to state if you entered a valid password the same

02:02.470 --> 02:04.310
we would do the session based approach.

02:04.510 --> 02:09.170
But now we're not setting up a session and returning the session key which is stored in a cookie.

02:09.400 --> 02:15.020
Instead we now generate a new token and this token has now returned to decline.

02:15.130 --> 02:21.850
You can now store does tokened for example in a web app in your local storage and on each request to

02:21.850 --> 02:27.020
a protected resource you would re send the token to the server.

02:27.310 --> 02:30.300
And is a major difference with this.

02:30.340 --> 02:36.100
The server does not store any information about your client in any session based approach the Server

02:36.100 --> 02:38.280
stores the session not the client.

02:38.380 --> 02:41.910
Here no one stores a session because there is no session.

02:42.100 --> 02:48.490
Instead you only have a token which kind of says hey I offended good at myself with you the server a

02:48.490 --> 02:51.920
couple of minutes ago maybe and here is the token.

02:51.940 --> 02:54.670
You can check if its valid if it is valid.

02:54.670 --> 02:59.150
Please give me access to whatever protected resource I'm trying to access.

02:59.170 --> 03:04.040
This is the key difference and therefore such tokens typically also invalidate.

03:04.050 --> 03:10.520
After a couple of minutes or hours because you kind of don't want to keep them live on forever.

03:10.770 --> 03:15.820
Does this approach you use in single page applications and also in mobile apps.

03:15.820 --> 03:21.790
And does the approach we will use in this app now actually firebase will make it very easy to use this

03:21.790 --> 03:26.210
approach but it will always work like this no matter what your back and is.

03:26.350 --> 03:31.990
So let's dive into setting up our firebase app now first or learn a bit more about how this works and

03:31.990 --> 03:35.840
firebase and then actually implemented in our mobile app
