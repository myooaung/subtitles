WEBVTT

00:02.310 --> 00:07.680
Storing places in the database is nice but the problem is we got two places there.

00:07.680 --> 00:13.620
But when a reload they're all lost and I only see the freedom places we start with in our code which

00:13.620 --> 00:18.290
are the hard coded places there in which we want to remove eventually of course.

00:18.360 --> 00:23.820
So we now need a way of fetching places instead of just storing them.

00:23.820 --> 00:30.150
And of course we'll do this again by sending an H TTP request to our back end for dad however we'll

00:30.150 --> 00:36.270
need to add a new method because right now we do have that places to gather here.

00:36.330 --> 00:40.880
But the problem with that is this is not really suitable for sending an H request.

00:40.950 --> 00:47.090
I used as in way too many places where I just want to get my current snapshot of the places I have locally.

00:47.130 --> 00:50.840
I don't want to make a new HDP request all these times.

00:51.060 --> 00:58.590
So instead we'll add a new method which will name fetch places here and fetch places should do just

00:58.590 --> 01:01.370
add it should fetch our existing places.

01:01.410 --> 01:08.220
So here we can again use the H to be client and now we'll set a GET request and that gets request of

01:08.220 --> 01:10.470
course should be sent to the same U.R.L..

01:10.560 --> 01:17.400
We send our post request to so the same place where we saw it the same year l we used for creating a

01:17.400 --> 01:24.030
new place so I'll copy that you l and used it up here and we don't need to add a second argument here

01:24.060 --> 01:25.830
because we're not sending any data along.

01:25.830 --> 01:28.210
We also need no special configuration.

01:28.410 --> 01:34.680
So instead we can continue using that response and for that I'll add the pipe method since I will certainly

01:34.680 --> 01:37.050
use a couple of operators here.

01:37.050 --> 01:40.790
For example one thing I want to do for sure is one at the tap.

01:40.800 --> 01:44.010
Operator and then use my place as data.

01:44.010 --> 01:50.850
So my response data here to update the existing list of places I'm working with in his application for

01:50.850 --> 01:57.190
that let's first of all output rest data here to see what's inside so that we can plan our next steps.

01:57.240 --> 01:59.270
We just need to call fetch places somewhere.

01:59.370 --> 02:02.520
And of course we need to make sure that we subscribe here.

02:02.550 --> 02:09.100
So let me return this year so that we can subscribe from inside a component.

02:09.300 --> 02:12.860
And now let's set aside where we want to fetch places.

02:12.870 --> 02:18.870
Well obviously one place where we want to fetch places isn't the offers page here when there's loads

02:18.960 --> 02:21.370
I want to fetch places for sure.

02:21.660 --> 02:26.770
To be precise I don't just want to fetch places your windows loads for the first time but whenever the

02:26.770 --> 02:28.090
view becomes active.

02:28.170 --> 02:36.220
So here I will add I and you will enter it in their I'll reach out to the place's service and call fetch

02:36.220 --> 02:37.830
places.

02:37.910 --> 02:42.530
It doesn't hurt by way that we set up the subscription here because this ensures that whenever we update

02:42.530 --> 02:49.100
the places in our behaviour subject will get notified in this component here and fetch places.

02:49.220 --> 02:54.270
Right now doesn't but soon will update that list of places it will use that behaviour subject.

02:54.290 --> 03:00.260
So this listener does subscription here and our trigger here to fetch new places will work to gather

03:00.260 --> 03:01.400
later.

03:01.400 --> 03:04.780
So here I call fetch places and synced his returns and observable.

03:04.910 --> 03:06.440
We have to call subscribe here.

03:06.440 --> 03:12.220
Otherwise angular will not go ahead and make the H2 DP request if no one is subscribing to the response.

03:12.230 --> 03:16.800
There is no sense in sending the request so we can't just call it like this.

03:16.800 --> 03:19.350
You don't even need to pass some effort here to subscribe.

03:19.350 --> 03:22.650
You could of course but just calling it like this will do.

03:22.960 --> 03:24.570
And therefore let's save this.

03:24.570 --> 03:30.030
And when does page reloads we hopefully soon see some out here on the right that shows us what was fetched

03:30.420 --> 03:31.660
and we do.

03:31.660 --> 03:35.370
And what do you see here is that you get back a javascript object and that's important.

03:35.370 --> 03:36.340
It's not an array.

03:36.360 --> 03:42.840
It's a javascript object where the keys are these unique ideas firebase generated and the values for

03:42.840 --> 03:47.450
the Keys then are these objects that were stored under that idea.

03:47.460 --> 03:53.400
Please note that that's an object without an I.D. field so we'll have to manually extract that key here

03:53.790 --> 03:56.660
and merged with our our data.

03:56.880 --> 04:02.050
So put in our words this state and we fetch your doesn't have the form if we want.

04:02.130 --> 04:06.340
Good thing is we can of course change that and it's not too hard to do so.

04:06.660 --> 04:12.690
Back in the places service we can certainly tap into our data and do something with it but first of

04:12.690 --> 04:15.300
all we need to restructure and change it.

04:15.360 --> 04:22.590
So what I actually will use here is the map operator which takes the response off the observable.

04:22.590 --> 04:29.070
So here our response data and then allows us to return new data that will be wrapped into an observable

04:29.370 --> 04:35.160
difference to switch map by the way that switch map returns a new observable map returns non observable

04:35.160 --> 04:41.060
data that still can be used in the upcoming steps of the observable pipe though.

04:41.160 --> 04:44.750
So here we in the end get our response data.

04:44.760 --> 04:49.950
You can of course always named as whoever you want and get like poses a generic type where we can find

04:50.220 --> 04:52.550
the structure of the data we get back.

04:52.560 --> 04:55.260
Now we learned that this is a javascript object.

04:55.260 --> 05:01.350
In the end we have keys in that object which we don't know in advance because the keys in there are

05:01.380 --> 05:03.710
our unique ideas in typescript.

05:03.710 --> 05:08.960
You tell typescript that you have keys with any name you don't know by adding square brackets here than

05:09.000 --> 05:13.350
any name of your choice like key coal and string.

05:13.350 --> 05:17.620
And then on the then a colon and then on the right side the type of these keys.

05:17.670 --> 05:21.420
So that just means keys with names I don't know you could say.

05:21.420 --> 05:27.660
And then on the right side you have the type of the value inside the key now that in our case is a javascript

05:27.660 --> 05:28.100
object.

05:28.110 --> 05:33.320
So it's that part in here to jobs could object with a way lable from a whale to description image your

05:33.320 --> 05:35.060
l price title and user I.D..

05:36.270 --> 05:45.660
So we could say it's almost our place object here so we could almost say this but what will be missing

05:45.660 --> 05:51.180
is the I.D. field we have everything else but we don't have any ideas in there at all to some of our

05:51.180 --> 05:56.350
types would be wrong for example dates are stored as a string here and not as a date object.

05:56.640 --> 05:59.750
So therefore I will not use my place here.

05:59.850 --> 06:09.000
Instead at the top here all create a new interface to describe that place data could be a name you choose

06:09.270 --> 06:17.390
but the name is totally up to you and then I'll just copy that here and put it in here and replace these

06:17.390 --> 06:23.840
concrete values with their types and this is of course optional you don't have to do that.

06:23.860 --> 06:30.430
I'm doing this to get better order completion and that the typescript compiler yells at me when I start

06:30.430 --> 06:32.050
using data incorrectly.

06:32.320 --> 06:40.680
So I'm simply defining how my response data for places will look like and how we can use to place data

06:40.680 --> 06:43.930
interface in our type definition down there.

06:43.950 --> 06:50.360
So instead of an empty object here we get back various Keys where we don't know the name where each

06:50.360 --> 06:51.880
key will hold place date idea.

06:52.670 --> 06:59.450
Now we get response data which has exactly that format here in the map method and since this is an object

06:59.510 --> 07:05.570
I first of all want to transform this to an array so I'll add a new places array in here and then a

07:05.570 --> 07:15.540
for in loop where I go through my keys in the response data I can add if check here where we see if

07:15.960 --> 07:21.630
rest data has own property key.

07:21.630 --> 07:29.610
This is a recommended practice when having a for in loop and then we can push this object as element

07:29.670 --> 07:37.360
onto our places array to be precise and when I push a new place here and that place now we'll also get

07:37.360 --> 07:38.020
the idea.

07:38.020 --> 07:43.820
The idea here is the key because remember the keys are our unique ideas here.

07:43.840 --> 07:45.020
As return by firebase.

07:45.400 --> 07:48.130
So I pass the key as the first argument.

07:48.130 --> 07:49.500
Second argument is the title.

07:49.510 --> 07:57.490
So that would be rest data for the given key which we access with square brackets because it's a dynamic

07:57.490 --> 07:57.910
value.

07:57.910 --> 08:06.150
Key changes from iteration to duration and then title and then we basically repeat this for the description

08:06.430 --> 08:07.810
and all the other parts.

08:07.810 --> 08:10.000
So for the image you are L etc..

08:10.240 --> 08:13.120
So we access all that data and edit here

08:16.310 --> 08:24.160
here for the price now for the dates I will create new Date object with the date constructor and pass

08:24.160 --> 08:28.210
my available from an available to field values in there.

08:28.360 --> 08:38.090
So let's do this for both dates of course rest data key available to and with that the user I.D. missing

08:38.090 --> 08:40.610
that of course should be added as well.

08:40.610 --> 08:41.980
So here we go.

08:42.140 --> 08:47.690
And now we're constructing a valid place and we're pushing this into our places array so did once we're

08:47.690 --> 08:50.780
done looping through all the keys in our response data.

08:50.780 --> 08:57.120
So through all the objects we fetched essentially we'll have a place as an array with all our well places.

08:57.200 --> 09:02.630
So we're done with everything here and then we just return places.

09:02.630 --> 09:09.050
So the map operator here in our observable chain in the end gets the response data and returns the restructured

09:09.050 --> 09:10.520
response data.

09:10.520 --> 09:15.920
Note this is helpful because it is not allows us to add a next step in that pipe method.

09:15.920 --> 09:21.800
So a new operator which is the tap operator and there will get places and this now is just our array

09:21.800 --> 09:29.040
of places we can now use these places to update our places list here in the service our places behavior

09:29.060 --> 09:33.770
subject by emitting a new event with the places we generated in map.

09:33.770 --> 09:39.790
And does this now making sure that all the places in the app that did subscribe get the latest places.

09:39.860 --> 09:46.010
So if we save that this will now reload and you see here are our places.

09:46.010 --> 09:52.280
Now of course you saw the dummy places at the beginning so let's now actually remove these

09:54.960 --> 10:01.740
and I will just initialize my behavior subject with an empty array then and to still keep the places

10:01.740 --> 10:02.520
around.

10:02.730 --> 10:08.310
I will add them up there commented out so that we still have them if we want to copy some data from

10:08.310 --> 10:10.710
there etc. but we're not using them anymore.

10:10.870 --> 10:14.100
Therefore now if this reloads we start with an empty page.

10:14.100 --> 10:16.180
But once the data is loaded we see it.

10:16.380 --> 10:19.290
Now of course seeing that empty page is not that beautiful.

10:19.290 --> 10:24.930
So adding a spinner makes sense and that is all what we discussed in the last course module with the

10:24.930 --> 10:26.200
UI state.

10:26.250 --> 10:27.840
So let's go to the

10:30.390 --> 10:33.970
offers page where we are fetching places.

10:34.200 --> 10:39.050
Essentially here I want a set loading to true and I want to set it back to faults.

10:39.060 --> 10:45.330
Once we're in the subscribe function so once we have a response so time to add to is loading property

10:46.020 --> 10:51.570
and set it to falls initially that's say and by the way of course you could also inject the loading

10:51.570 --> 10:57.010
controller and set up this overlay loading indicator if you want.

10:57.030 --> 10:59.050
Here I just want to show a spinner on the page.

10:59.100 --> 11:04.530
Hence I'm doing this with is loading and then I will use energy if in the template but both would work

11:05.130 --> 11:07.430
here and I and you will enter with my approach.

11:07.440 --> 11:13.460
I will now set is loading to true and then as I mentioned we pass a function to subscribe.

11:13.500 --> 11:16.860
This will run whenever we have our data.

11:16.890 --> 11:23.220
So once the observable is done so in there all set is loading to falls and thousands we switch is loading

11:23.250 --> 11:30.510
we can use it in our template there to basically hide our row here.

11:30.510 --> 11:33.080
So let's add energy.

11:33.300 --> 11:38.420
If actually doesn't have to be the row should suffice.

11:39.400 --> 11:41.080
To hide the list here.

11:41.080 --> 11:43.830
So here end Jeff only showed us.

11:43.860 --> 11:52.710
If we're not loading and if we have a offers length that is greater than zero.

11:52.870 --> 12:01.900
So we're not loading and we found offers otherwise I want to show a paragraph where all centered a text

12:03.480 --> 12:13.790
where I say no offers found create please create one first.

12:15.180 --> 12:25.200
This should show up if we're not loading and if offers length is smaller or equal than zero.

12:25.620 --> 12:29.940
So this makes sure that we show an appropriate message if we're not loading but we simply didn't fetch

12:29.970 --> 12:32.030
any data because there is none.

12:32.040 --> 12:34.730
And last but not least I'll add the I and spinner a year

12:39.090 --> 12:45.550
for cases where we are loading so is loading is true with that if we go back and we let this reload

12:45.560 --> 12:47.640
we should see the spinner here initially.

12:47.720 --> 12:53.480
Here it is and of course we only see it for a short fraction of a second because firebase is so fast.

12:53.540 --> 12:58.830
But then here is our data now to make this a bit more beautiful.

12:58.860 --> 13:07.910
Also that the color of the spinner to primary and I also want to center this here in my column.

13:07.910 --> 13:13.700
Therefore I'll simply add a div where I put my spinner in and I'll add the NGO for the spinner on that

13:13.790 --> 13:20.840
div because now on the div I can add text center to make sure that that spinner is actually centered

13:20.840 --> 13:26.660
here here is now to see that case where we don't have data.

13:27.880 --> 13:35.350
Let's fake this by going back to the place service and they're temporarily in my map.

13:35.350 --> 13:40.510
Operator I will return an empty array and this basically is the same as if we hadn't fetched any data

13:40.790 --> 13:42.810
and therefore now we should also see the spinner.

13:42.910 --> 13:44.260
But then we see no offers found.

13:44.260 --> 13:45.820
Please create one first.

13:45.970 --> 13:48.740
And of course you can get more fancy there as well.

13:48.760 --> 14:00.120
So here on the offers page we could also convert this paragraph here actually to a div and then still

14:00.120 --> 14:09.100
have our text here but below the text you could add ie and button with a color of primary where you

14:09.100 --> 14:18.120
say offer and you place and then you add Roger link on their website doesn't have to be a dynamic one

14:18.350 --> 14:19.950
router linked like this.

14:19.950 --> 14:32.850
Which leads to places tabs offers new and now that maybe leads to a nicer user experience because now

14:32.850 --> 14:33.380
we can click.

14:33.390 --> 14:36.580
Often you play some were taken to that page right away.

14:36.960 --> 14:42.500
And with that let's go back to the service and comment dissolved and returned to real places instead.

14:42.540 --> 14:47.710
So if we do show the data we actually have so this is how we can fetch data.
