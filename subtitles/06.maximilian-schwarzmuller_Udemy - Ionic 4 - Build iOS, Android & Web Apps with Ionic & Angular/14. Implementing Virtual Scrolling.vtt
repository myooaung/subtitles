WEBVTT

00:02.260 --> 00:06.860
Now we got no list where it would make super much sense to be very honest,

00:06.940 --> 00:08.830
we got very short lists here,

00:08.830 --> 00:15.850
so in reality in this application, you would probably not use virtual scrolling for any list but as

00:15.850 --> 00:19.660
this app grows, you could argue that more and more places are offered,

00:19.660 --> 00:25.720
so maybe you want to work virtually render those and therefore let me demonstrate virtual scrolling

00:25.780 --> 00:28.680
at the example of the discover page here.

00:28.690 --> 00:31.440
Now how do you use virtual scrolling?

00:31.720 --> 00:37.780
You replace your ion-list here with ion-virtual-scroll,

00:37.780 --> 00:41.590
so instead of ion-list, you're using ion-virtual-scroll

00:41.680 --> 00:44.040
and of course therefore you also close 

00:44.070 --> 00:50.800
ion-virtual-scroll down there and ion-virtual-scroll is a separate component shipping with Ionic which you

00:50.800 --> 00:53.680
find here under the list section,

00:53.680 --> 00:54.810
here it is.

00:54.850 --> 01:00.220
There you can also learn more about the technique that gets used and how to configure it and what you

01:00.220 --> 01:03.870
can now do is here on ion-virtual-scroll,

01:03.880 --> 01:09.310
you still have your ion-item in there but it works a bit different now, you're not using ngFor

01:09.310 --> 01:14.560
because ngFor it would automatically render all items.

01:14.560 --> 01:19.570
So instead, here we can remove ngFor and on ion-virtual-scroll,

01:19.600 --> 01:30.280
you have to bind an items property. Now the items property then takes the array which you want to render

01:30.700 --> 01:37.090
and it needs to get that array because it can then efficiently render the items which should be rendered

01:37.180 --> 01:39.760
because they're about to get visible.

01:39.760 --> 01:48.790
So here I'm passing in my sliced array, so all the items but the first one and on the ion-item, you now

01:48.790 --> 01:51.280
still want to get access to every single item,

01:51.280 --> 01:51.570
right,

01:51.580 --> 01:57.550
because we're also outputting data for it and therefore here, you add *virtualItem, that's a

01:57.550 --> 02:05.920
custom structural directive provided by Ionic Angular. So *virtualItem then has to be bound to let

02:06.190 --> 02:12.490
and then any name of your choice, for example let place and then you have the place variable available

02:12.480 --> 02:12.850
again,

02:12.940 --> 02:17.830
so this is just a syntax you can memorize or view in the official docs.

02:17.830 --> 02:29.190
With that if we save that and we go back to our list here, it reloads and it's missing and here, the slice

02:29.190 --> 02:30.520
one is the problem,

02:30.540 --> 02:36.120
such a dynamically calculated list, it will not work here.

02:36.150 --> 02:41.940
Now what you can do to circumvent this since we're not changing this dynamically, the amount of items

02:41.940 --> 02:51.690
we want to slice of, we can adjust this such that here in this discovery page component class, we add listed

02:51.700 --> 02:59.010
loaded places as another property for example, like this and in ngOnInit where we load everything,

02:59.040 --> 03:08.080
I set this listed loaded places equal to this loaded places slice and if we do that and we go back

03:08.080 --> 03:16.150
to discovery page, to the template, then here we can point items at listed loaded places and now as this

03:16.150 --> 03:20.000
reloads, it will render our list of places correctly again,

03:20.080 --> 03:26.380
here they are. Now this list of course is not super long and therefore we can't see that scrolling effect

03:26.450 --> 03:31.110
and you actually shouldn't see it because it will render items before they scroll into view

03:31.180 --> 03:34.650
but now if this were a longer list, you would have optimized it.

03:34.870 --> 03:44.480
One important other note, to optimize the way this loads the elements and to let the logic behind this

03:44.480 --> 03:52.340
component know when to pre-render a new item, you should actually approximate the height of a list item,

03:52.520 --> 03:55.880
which you can do here for example with the help of the dev tools.

03:55.880 --> 03:59.550
I can see that here, an item is roughly around 70 pixels high.

03:59.570 --> 04:02.970
Now you don't need the exact value but a rough estimation,

04:03.080 --> 04:07.430
it assumes a default of 40 pixels which is certainly not the case here

04:07.580 --> 04:15.920
and if you deviate from that assumed height by more than let's say just 4 pixels or anything like

04:15.920 --> 04:25.730
that, you should add the approx item height attribute here and set that to the value you are approximating

04:25.730 --> 04:31.520
because this behind the scenes allows the virtual scroll component to efficiently prepare the items

04:31.520 --> 04:39.170
before they come into view because it knows how far you have to scroll down or how many items fit into

04:39.170 --> 04:47.310
a single scrolling action so to say and therefore, how many items in advance it should prepare, the items.

04:49.290 --> 04:52.740
So that is how you should use virtual scrolling.

04:52.740 --> 04:58.440
Again, keep in mind that you should not use it on every single list you have but on lists that may become

04:58.440 --> 05:02.810
very long and where you can't predict how many items might be on them.

05:02.820 --> 05:08.640
So if you have a page where you restrict the amount of items you're rendering or let's say you have

05:08.910 --> 05:14.610
a list where you're gathering user input and you do that with an ion-list, with a lot of ion-items, with

05:14.830 --> 05:20.400
ion-inputs in them, then you don't need virtual scrolling but for unpredictable long lists, it can be

05:20.400 --> 05:20.990
pretty good.
