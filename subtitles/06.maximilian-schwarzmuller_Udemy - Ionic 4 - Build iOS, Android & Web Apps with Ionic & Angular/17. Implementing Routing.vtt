WEBVTT

00:02.140 --> 00:09.130
Now with the custom event in place, we got the core features of Angular covered. Now Angular is a huge

00:09.130 --> 00:15.010
framework with a lot of features and I'll not cover them all in this refresher which is just that,

00:15.220 --> 00:16.120
a refresher

00:16.240 --> 00:20.710
but there are two other major features I want to cover. Right now,

00:21.520 --> 00:25.180
we have two components on the same page here,

00:25.180 --> 00:31.690
person input and persons and this kind of makes sense for our very simple application here but you could

00:31.690 --> 00:35.500
also have a setup where you want to have them on different pages

00:35.890 --> 00:41.590
and technically, you still only have one page, that index.html file but you want to give the user of

00:41.590 --> 00:45.090
your app the illusion of having multiple pages.

00:45.160 --> 00:50.680
Now you can do this with a feature Angular offers which is called routing.

00:50.680 --> 00:56.020
This essentially allows Angular to read the URL of your browser and render different components

00:56.020 --> 01:01.690
based on that URL to again kind of replicates that feeling of having different parts in your app.

01:02.770 --> 01:04.300
To set up routing,

01:04.420 --> 01:10.750
you typically add new module which is normally named app-routing.module.ts,

01:10.840 --> 01:19.730
that's the file name and there we export our app routing module. As all Angular modules, you need

01:19.730 --> 01:30.140
to add ngModule, this decorator here and ngModule needs to be imported from @angular/core,

01:30.140 --> 01:34.230
like that. Now in this module,

01:34.520 --> 01:41.420
I want to set up routing, I want to set up the routes my Angular app knows, so the URLs it understands

01:41.450 --> 01:47.270
and for which it knows which component to render. I'll define these routes here in a new constant

01:47.630 --> 01:54.980
and the type of that constant will be the routes type which again is a type in this case which we can

01:54.980 --> 02:05.940
import from an Angular package, here that is the @angular/router package. Now routes is an array, an array

02:05.940 --> 02:12.750
of Javascript object where every object is the definition of a route the Angular router is then able

02:12.750 --> 02:21.290
to pass and handle. Now a route definition in its simplest form has a path which is the path,

02:21.300 --> 02:28.740
so the part after your domain you want to load a certain page for and you start this path you define

02:28.740 --> 02:30.320
here without a leading slash,

02:30.450 --> 02:37.170
so if you want to define something for your root page, your main page, like here http://localhost:4200/,

02:37.200 --> 02:44.640
there is like invisible slash here, then you just have an empty path here. The second part then is

02:44.670 --> 02:50.850
the component, that defines which component you want to render and that could be our persons component

02:50.850 --> 02:51.470
there

02:51.570 --> 02:55.420
and if you're referencing it here, you need to import it as well.

02:55.530 --> 03:05.280
So let's import persons component from this persons folder and there, the persons component file.

03:05.340 --> 03:08.610
Now that's one path but I want to have another path here too,

03:08.610 --> 03:15.630
so let's add a second object to the routes array and that is let's say to be found under input.

03:15.630 --> 03:20.160
So technically that would be http://localhost:4200/input,

03:20.160 --> 03:25.910
this route here would then reach or this path would then reach this route and there

03:25.910 --> 03:32.940
I want to render another component, the person input component.

03:32.940 --> 03:36.050
So again, we need to add our input up here,

03:36.180 --> 03:44.540
person input component from ./persons/person-input.component, like this.

03:44.640 --> 03:49.890
These are the routes we have but of course just defining a constant like this which we never use

03:50.090 --> 03:51.770
doesn't help Angular.

03:51.990 --> 03:56.910
So in this ngModule here, we actually now need to do something,

03:56.910 --> 03:59.860
we need to tell Angular about our routes.

04:00.000 --> 04:06.300
We do that by adding the imports key where we can import other modules and from the @angular/router

04:06.300 --> 04:11.700
package, I'll import the router module and I imported that here too,

04:11.700 --> 04:13.260
router module.

04:13.260 --> 04:18.960
Now this module can take some configuration and it does so with a special method it gives us, the for

04:19.050 --> 04:21.850
root method where we can define the root,

04:21.900 --> 04:28.050
so the main routes of our application and we pass in an array of routes which is exactly what I have

04:28.050 --> 04:28.460
up here,

04:28.800 --> 04:31.520
so we pass in routes there.

04:31.650 --> 04:36.390
Now we could have done that directly in the app module and that wouldn't have been wrong but it's a

04:36.390 --> 04:43.080
nice way of outsourcing this into a separate file to keep the app module clean but to use these routes

04:43.110 --> 04:49.440
in our app module which is the first entry point of our app, we now need to export something by adding

04:49.440 --> 04:56.460
an exports array here and we export a router module but this now is the configured router module you could

04:56.460 --> 04:56.910
say.

04:57.000 --> 05:00.730
So it's a router module with our root routes registered.

05:00.780 --> 05:04.430
Now with that and you can ignore that error which it's showing here,

05:04.440 --> 05:12.310
that's a bug in the IDE. Now with that, we can import our app routing module in the app module. We can add

05:12.310 --> 05:19.470
it here to the imports array, the app routing module and of course since we want to use it here, we have

05:19.470 --> 05:26.220
to add an import statement up there and by the way, the import statements here are Typescript features, they

05:26.220 --> 05:33.150
are not to be mistaken with the imports array here which is an Angular feature. So here I import from

05:33.630 --> 05:44.380
app-routing, not component but module, so this module will be created here. With that, the routes are registered,

05:44.710 --> 05:50.050
to render the content of our routes, we now need to tell Angular where to render them and for that, I'll get

05:50.050 --> 05:57.340
rid of my components in the app.component.html file and I'll add a new one, the router outlet element.

05:57.760 --> 06:04.660
That is an element, a component, to be precise a directive Angular ships with which is available thanks

06:04.660 --> 06:13.720
to us using router module. If I now save that, you will see that as the page reloads, we don't see anything,

06:13.720 --> 06:14.450
right?

06:14.740 --> 06:22.150
Well we also have no error and we actually only don't see anything because our passing data route logic

06:22.630 --> 06:28.750
doesn't work anymore. If in the developer tools, we have a look at the elements tab, we can see that we do

06:28.750 --> 06:34.360
have that router outlet and next to it, Angular did indeed add the right component, the persons component

06:34.810 --> 06:41.680
but our list is empty because we have no data in there because you have to remember that we get our persons

06:42.100 --> 06:48.010
through property binding but now that we're using routing, this doesn't work anymore because we're not directly

06:48.010 --> 06:53.710
using our component tag anymore and hence we can't use the square brackets. We can't add them here on

06:53.710 --> 06:58.000
the router outlet because that will load multiple routes actually, not just add one component all

06:58.000 --> 06:58.510
the time.

06:59.260 --> 07:05.710
So how can we now still pass data around? Well that is something we can solve with services, the other

07:05.710 --> 07:08.800
major feature you got to know when working with Angular.
