WEBVTT

00:02.140 --> 00:09.040
So we want to pass our entered name up to the app component from inside our person input component

00:09.220 --> 00:15.400
and for this, we can set up our own event binding or our own bindable event to be precise.

00:16.150 --> 00:24.460
Now for our own property binding, we used input as a decorator, for our own event binding,

00:24.460 --> 00:25.830
we use output.

00:26.440 --> 00:31.530
So let's import output from @angular/core in the person input component

00:31.660 --> 00:38.830
and now we just need to use a property which will basically be turned into our own event transmitter

00:38.830 --> 00:45.980
you could say, our own event emitter. I'll add this property here as the first property maybe

00:46.310 --> 00:48.910
but that's up to you, the order doesn't matter

00:49.160 --> 00:51.020
and I'll name it person

00:51.140 --> 00:53.710
create, the name is totally up to you.

00:54.330 --> 00:59.250
Now in front of that, I'll add @output with parentheses

00:59.250 --> 01:04.340
and now I will initialize this with a default value which we also have to import from @angular/core

01:04.470 --> 01:07.440
and that's the event emitter object.

01:07.440 --> 01:13.440
This actually is a class or a constructor function and therefore we can use the new keyword to create

01:13.440 --> 01:16.810
a new event emitter object based on that class,

01:16.980 --> 01:20.450
that is what we store in person create.

01:20.640 --> 01:27.840
Now this is a so-called generic type which means we can add this strange smaller than, greater than signs

01:27.840 --> 01:35.950
here and in between, we defined the type of data our event will eventually hold as data when we emit

01:35.950 --> 01:36.300
it

01:36.390 --> 01:43.110
because you can pass some data along with your event and I want to pass a string because I want to pass

01:43.110 --> 01:48.900
the entered name with my event and that is what we defined with this syntax here.

01:48.900 --> 01:56.370
Now down there before we reset the input, I can therefore then call this person create and then call

01:56.430 --> 01:57.060
emit

01:57.060 --> 02:02.940
and this is a method made available by the event emitter and then as an argument here, we pass the

02:03.010 --> 02:06.200
data we want to pass along with our event and here,

02:06.360 --> 02:12.230
this is our enteredPersonName.

02:12.330 --> 02:15.780
Now we're emitting this and thanks to @output,

02:15.780 --> 02:18.380
we can listen to this from outside,

02:18.390 --> 02:24.720
so from the parent component of this component, the component where we use this selector.

02:24.720 --> 02:28.500
So let's go to the app component where we do use it

02:28.500 --> 02:33.330
and now here with the parentheses syntax, we can listen to person create

02:33.330 --> 02:42.850
and then again, execute a function like onPersonCreated. Let's add this here in app.component.ts,

02:42.850 --> 02:44.750
onPersonCreated

02:44.890 --> 02:48.970
and of course we now want to get that name that was created.

02:48.970 --> 02:56.590
We do pass it in person input, I do pass it to the emit method and in app component, to pass it along

02:56.650 --> 03:03.970
as an argument to this method, we can use a special reserved variable name, $event and that

03:03.970 --> 03:11.220
is a name automatically created by Angular, it holds the data our event carries. If we don't pass it, our

03:11.220 --> 03:18.510
data will basically be lost, if we pass this special name here, Angular will forward the data of the event

03:18.510 --> 03:19.650
to which you're listening,

03:19.650 --> 03:23.160
so the data of the person create event in this case.

03:23.160 --> 03:29.220
This means our data will now reach our method here and there, it will be the name of that person which

03:29.220 --> 03:37.530
will be a string in the end. Well and here, we can now simply use persons and push, that's a default Javascript

03:37.530 --> 03:46.930
method, push the name onto this array. And with this if we go back and I add Michael here, you see it's added

03:46.930 --> 03:53.130
and the DOM automatically updates and the page never reloads. All of that happens behind the scenes

03:53.370 --> 03:55.830
through Javascript, thanks to Angular.
