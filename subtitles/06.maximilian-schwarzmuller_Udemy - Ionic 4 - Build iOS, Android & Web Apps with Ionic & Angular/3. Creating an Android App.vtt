WEBVTT

00:02.280 --> 00:08.620
Now I want to start with Android development and to build your app for Android or iOS, I will use Capacitor.

00:08.640 --> 00:11.420
Now you can't actually use Capacitor or Cordova,

00:11.490 --> 00:16.360
both are tools that in the end can take a web app and wrap it into a native app.

00:16.500 --> 00:21.640
Cordova has been around for a couple of years and in the past, Ionic only used Cordova,

00:21.780 --> 00:27.450
it still fully supports it but the Ionic team now also built their own tool, Capacitor, which does

00:27.450 --> 00:31.470
essentially the same but gives you, in my opinion, nicer API.

00:31.920 --> 00:37.980
And in this course, we'll use Capacitor which is under heavy development and will probably see quite

00:37.980 --> 00:39.590
an exciting future.

00:39.750 --> 00:46.680
You can learn more about Capacitor on capacitor.ionicframework.com and there in the docs,

00:46.680 --> 00:51.930
you also learn all about how to use it, how to tap into native device features and so on, things we'll

00:51.930 --> 00:59.100
do later but you also learn how to setup your machine to be able to build for Android and iOS. To

00:59.100 --> 01:01.290
start with Android, here under Android,

01:01.290 --> 01:06.940
click on getting started and there, you'll learn how to configure your machine to build Android apps.

01:07.090 --> 01:14.460
And what you'll learn here is that you need to install the Android SDK, the Android SDK tools or build tools

01:14.460 --> 01:15.770
in this version or higher

01:15.780 --> 01:21.990
and this might change over time, so definitely check this page out and you need the Android SDK platform,

01:22.260 --> 01:23.850
API 21 or greater.

01:24.330 --> 01:30.390
Now this is all installed automatically or you're asked to install it automatically when you do install

01:30.420 --> 01:34.870
Android Studio and Android Studio is a tool you need as well.

01:34.890 --> 01:41.070
You can google for Android Studio to find a link to its official page and there, you can download Android

01:41.070 --> 01:46.920
Studio onto your machine and then walk through the installer. Android Studio is the official Android

01:46.950 --> 01:53.510
development environment and we'll not write code in Android Studio but we will use it as a build tool,

01:53.580 --> 02:01.050
so Ionic Capacitor will use it behind the scenes to create that native app wrapper into which it injects

02:01.050 --> 02:01.860
your mobile app

02:01.860 --> 02:09.060
you could say. So therefore you should download Android Studio from this Android Studio page and this

02:09.060 --> 02:13.890
will give you an installer for Mac and Windows and Linux through which you can walk.

02:13.890 --> 02:19.980
Now when going through that installer, make sure you do install the Android SDK tools and the Android

02:19.980 --> 02:22.770
SDK platform as instructed here

02:22.770 --> 02:27.990
and if you don't do that during the installation, you can still do it thereafter from inside Android

02:27.990 --> 02:34.750
Studio, I already do have it installed, by going to configure SDK manager there

02:36.400 --> 02:42.910
and then here, you want to choose an SDK which has at least version 21 or higher and under SDK

02:42.910 --> 02:47.200
tools, you want to install these Android SDK build tools here.

02:47.350 --> 02:52.900
You also want to install the Android SDK tools here in the latest where you see and the platform

02:52.900 --> 02:54.730
tools as well.

02:54.760 --> 03:01.440
I also recommend installing that emulator, that HAXM installer here, to speed up your emulator

03:01.450 --> 03:06.850
if you're running an Android emulator to test your app on. Basically you can also set all the other

03:06.850 --> 03:12.670
check marks you see here and also make sure you do install the Android emulator,

03:12.670 --> 03:17.800
I do have a slightly outdated version here, so I'll update it now but you should simply tick this box here

03:17.980 --> 03:24.130
and then when you press apply, this will install all the things you checked onto your machine and this

03:24.130 --> 03:32.380
will install all the tools you therefore need to build Android apps. With that all installed, you can

03:32.380 --> 03:38.650
go back to the Ionic documentation to see the rest of the steps, we can use the Ionic CLI to basically

03:38.710 --> 03:46.180
add Android as a supported platform in our project and you do this by in a terminal, navigate it into your

03:46.180 --> 03:53.980
project, running Ionic Capacitor, add and then either iOS or in our case here,

03:54.190 --> 04:00.670
Android and this will now set this project up such that you can build an Android app with it, to put

04:00.670 --> 04:06.730
it simple. It will install an extra package, @capacitor/core and do a couple of other things and configurations

04:06.880 --> 04:11.890
and actually add a brand new folder with your Android app inside of it.

04:11.890 --> 04:18.460
Now I actually got an error here, that Capacitor could not find the web as it's directory and then this

04:18.460 --> 04:25.510
path here. Now this is pretty normal if you never built your app, simply run ng build to fix this. ng

04:25.510 --> 04:31.630
build will now build your Angular app and you always need to do that before you can turn it into a native

04:31.630 --> 04:37.420
mobile app because you will wrap your finished built app into that native mobile app.

04:37.750 --> 04:43.390
So once this build processed finished, you got this www folder and that is exactly the folder that

04:43.390 --> 04:44.410
was missing,

04:44.410 --> 04:52.340
so let's now rerun ionic capacitor add android and now this should succeed, so let's wait for that to

04:52.340 --> 04:55.370
finish and here it is.

04:55.400 --> 04:59.780
So now this finished and you should now have a new Android folder in there,

04:59.900 --> 05:06.230
now this is the Android app and this is actually a folder you could now open in Android Studio to launch

05:06.230 --> 05:07.120
your app.

05:07.160 --> 05:14.420
This is the native app so to say, it holds all the code for the native app and it also will hold your web

05:14.420 --> 05:21.770
app bundled into that native app. Now if you have a look at the official docs, you also see what you

05:21.770 --> 05:27.350
would do if you were to use Cordova which I'll not cover here though. For us, the next important step

05:27.350 --> 05:32.420
is that we want to set the package ID for this app and you can set that in the capacitor.config.json

05:32.420 --> 05:33.450
file,

05:33.620 --> 05:42.320
here is this app ID and I will name this here to com.udemy-course.ionic-angular.

05:42.320 --> 05:45.010
You typically use an identifier that looks like a reverse

05:45.020 --> 05:49.460
URL here and you're free to use any identifier you want,

05:49.460 --> 05:54.950
the idea here is that your app has a unique identifier that differentiates it from all the other apps

05:54.950 --> 05:55.580
in the App Store. 

05:58.710 --> 06:03.460
Now with this set up, what we can do is we can run ionic capacitor copy android.

06:03.630 --> 06:05.010
Now this is a command

06:05.010 --> 06:11.790
you should always execute after you've created a new build with ng build because ionic capacitor

06:13.950 --> 06:21.840
copy android will basically copy your www folder into this native app and bundle it into that again

06:21.840 --> 06:27.970
so to say. This is a command you have to run before you can run your native app and see it.

06:28.080 --> 06:36.210
You can also type ionic capacitor run android and what this will do is it will execute all these previous

06:36.210 --> 06:37.150
steps for you,

06:37.260 --> 06:44.580
it will run ng build essentially and thereafter, it will copy the www folder into the native app

06:44.580 --> 06:45.080
for you,

06:45.090 --> 06:51.900
so it does all of that and it then even opens the Android folder in Android Studio and that is important

06:51.900 --> 06:56.140
because you can launch your app from inside there now.

06:56.220 --> 07:00.650
So when this opens for the first time, let it finish all its tasks

07:00.660 --> 07:01.860
it's executing there,

07:01.890 --> 07:04.200
they should all finish without errors,

07:04.230 --> 07:07.720
so let's wait for that to finish. On the first load,

07:07.720 --> 07:09.130
this will take a little longer,

07:09.130 --> 07:10.840
subsequent loads will be faster,

07:10.840 --> 07:17.470
no worries. And here it did finish, this error here actually is just a warning, we should be fine

07:17.570 --> 07:19.940
and now we can launch our app. Now for that

07:19.940 --> 07:26.380
we need an emulator up and running and you can go to tools avd manager here to create one.

07:26.570 --> 07:31.100
Now I already created a couple of virtual devices, here on the bottom left

07:31.100 --> 07:34.040
you can click on create virtual device to build a new one,

07:34.250 --> 07:42.980
then choose any of these blueprints like the Pixel 2, click next, choose the latest stable version of

07:43.010 --> 07:44.070
Android here

07:45.520 --> 07:46.810
and then simply finish this,

07:46.810 --> 07:49.780
you should be able to use all the default settings.

07:49.810 --> 07:55.390
Now you can launch such an emulator by clicking that green play button there and this will now open

07:55.390 --> 07:57.010
up that emulator,

07:57.010 --> 08:00.790
here it is and there, you can see your app.

08:00.790 --> 08:08.940
Now you can also connect your real device to your computer and turn on the developer options there,

08:08.980 --> 08:15.220
after this lecture here you'll find a lecture where I explain how it works and then run the app on your

08:15.370 --> 08:17.620
real device, that works as well.

08:17.620 --> 08:19.080
Here I'll go with the emulator,

08:19.090 --> 08:23.640
let's wait for the emulator to finish booting up. So here it did

08:23.630 --> 08:26.740
now finish booting and now back in Android Studio,

08:26.810 --> 08:32.330
remember this is the Android folder from our project which was opened there for us by Capacitor.

08:32.330 --> 08:34.710
You can now click that green play icon

08:34.730 --> 08:40.990
here and then choose the emulator or connected device you want to run the app on and here,

08:41.000 --> 08:46.910
I'll use that connected emulator which is already up and running and press OK. And this will now actually

08:46.910 --> 08:53.600
build the native app that wraps your web app and then automatically install it on that emulator or real

08:53.600 --> 08:55.740
device and launch it there.

08:55.790 --> 09:03.880
So let's wait for that to finish, the build process succeeded, it's now installing this app on the emulator,

09:03.880 --> 09:05.280
on the connected device here

09:07.170 --> 09:13.980
and here the app is. Now the start up time here on my machine is not super fast because I'm also recording

09:13.980 --> 09:17.510
and everything, so this machine here is pretty on its limit,

09:17.610 --> 09:23.490
it actually does start of quite fast and you can demo this by connecting a real device because emulators

09:23.550 --> 09:25.620
also always are a bit slower.

09:25.920 --> 09:33.870
Now here what we can see though and again, any lag here is really just caused by me recording,

09:34.060 --> 09:41.080
we can see this application works exactly as it should work and exactly as we saw it in the browser

09:41.170 --> 09:50.930
but now, this is a real native app on our emulator here, installed as a native app there. Now for the majority

09:50.930 --> 09:51.520
of the course,

09:51.560 --> 09:57.140
I will actually keep on developing here with the help of the browser simply because that's easier to debug,

09:57.260 --> 10:03.110
it updates faster and so on but being able to build that native app and see it run here of course is

10:03.110 --> 10:08.280
a core part of Ionic and this is how you do go through that process.

10:08.510 --> 10:14.300
Now one note, of course when you run ionic capacitor run android,

10:14.300 --> 10:19.880
all these steps are executed for you and with the emulator up and running, all you have to do is press

10:19.880 --> 10:28.220
that play button but you can also execute ionic capacitor run android with -l after it which stands

10:28.220 --> 10:29.810
for live reload.

10:29.810 --> 10:36.020
Now what this will do is it will actually not build the app but run ng serve and therefore run

10:36.020 --> 10:41.420
the same command we used before for having these server to visit it here in the browser and then it

10:41.420 --> 10:48.850
gives you a native app that actually talks to that server running on your Mac or Windows machine and

10:48.850 --> 10:55.340
it will automatically update the app on the native device when your code changes, so you'll get the same

10:55.340 --> 11:01.850
behavior as you do in the browser with live updates on the native device now and you don't have to rebuild

11:01.910 --> 11:05.960
the app after every change you want to see reflected here.

11:06.080 --> 11:14.450
Now from my experience, this live reload process is a bit clunky and sometimes doesn't work perfectly

11:14.840 --> 11:20.510
but generally, this is a nice thing to have and definitely something you should experiment with because

11:20.510 --> 11:29.170
it can be really useful and can speed up your development flow. If I now start this app again

11:29.170 --> 11:29.680
here

11:29.740 --> 11:37.900
after I started this live reload process when I built my app with that and now with that app running

11:37.900 --> 11:38.650
again,

11:38.980 --> 11:46.670
if I now change something in code, let's say on the recipe page here where I have recipes as a

11:46.730 --> 11:47.330
title,

11:47.330 --> 11:53.510
if I add an exclamation mark and I save that, it will now rebuild because I have that server up and running

11:53.510 --> 12:01.130
which was started by ionic capacitor run android -l and by the way, you can therefore for now also

12:01.130 --> 12:05.520
connect to that on your browser again and you will see your changes there

12:05.600 --> 12:12.170
but now this also live updated as you can tell here in the native mobile app and that can speed

12:12.170 --> 12:17.600
up the workflow when you want to preview your changes inside of your real native mobile app and not

12:17.600 --> 12:18.930
just in the browser.

12:18.960 --> 12:20.820
And let me also emphasize one more time,

12:20.900 --> 12:24.350
this is a mobile app as you could install it from the App Store.

12:24.350 --> 12:27.950
This is not the browser on the mobile app hosting the web app,

12:27.950 --> 12:30.530
this is a custom native mobile app.
