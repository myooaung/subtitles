WEBVTT

00:02.170 --> 00:08.800
Of course I want to try to retrieve data whenever the app restarts and therefore I'll add a new method

00:09.070 --> 00:11.690
auto log and you can name it whatever you want.

00:11.710 --> 00:17.650
This is a method that simply tries to fetch data from the storage and if it finds data that is valid

00:18.040 --> 00:28.210
it actually well logs as in raw data access plug in storage or plug ins excuse me storage get and I'll

00:28.210 --> 00:35.740
get takes an object where we find a key for which you want to get our data and that is the key I find

00:35.740 --> 00:37.030
when I stored data.

00:37.360 --> 00:40.450
So that's all data in this case here.

00:40.510 --> 00:46.430
So up there in auto log in off data is the key which I want to search for in my storage.

00:46.460 --> 00:48.650
It does returns a promise.

00:48.730 --> 00:54.190
Now we could work with a promise here but I actually want to turn this into an observable and hence

00:54.190 --> 01:02.380
I will return and observable here by using the from creation operator which is simply import from our

01:02.380 --> 01:11.920
X J S so you import from here and from takes for example a promise and it automatically manages the

01:12.010 --> 01:18.310
listening to that promise response so to say and converts it into an observable.

01:18.340 --> 01:24.700
Now of course I don't just want to return the raw data I want to return the information whenever to

01:24.700 --> 01:27.130
succeed it or not.

01:27.130 --> 01:33.370
So I want to return true or false here because later we can then for example use that in the off guard

01:33.550 --> 01:41.450
but more on that in a second hence it's time to add the pipe method here and execute a couple of steps

01:41.870 --> 01:47.990
and I will need the map operator to convert dad data I'm extracting from the storage to something I

01:47.990 --> 01:58.660
can use for actually creating a user object so we get our stored data here and that stored data could

01:58.660 --> 01:59.850
of course not be set.

01:59.890 --> 02:08.050
If we have restored data before so if we don't have stored data or if this stored data does not have

02:08.050 --> 02:13.930
a value field which it normally should have then it will return null here then it was not able to extract

02:13.960 --> 02:17.010
any useful data otherwise we can continue.

02:17.140 --> 02:23.470
And the fact that we have a value field on the stored data simply stems from the storage plugin giving

02:23.470 --> 02:27.950
us such a value field on the data it returns from the storage.

02:28.000 --> 02:35.530
So here I will then get my my past data you can name as however you want of course by using Jason pass

02:35.530 --> 02:44.050
to convert Dad's stored string back into a javascript object by using store by passing stored data value

02:44.050 --> 02:51.880
in there and this will actually give us an object that has a token and do this with the ass operator

02:51.880 --> 02:57.370
here to tell typescript which kind of data is returned by this so we'll have a token which is a string

02:57.860 --> 02:59.590
we'll have let's have a look.

02:59.590 --> 03:02.340
What did a name it will have a token expiration date.

03:02.410 --> 03:10.440
So we'll have to field a stored down there will have a token expiration date which is also stirring.

03:10.450 --> 03:11.560
Not a date object.

03:11.600 --> 03:18.700
It said it was converted to a string before in our store of data method and we'll have our user I.D.

03:18.730 --> 03:26.680
which is a string so exactly that data you did store down there though the order of the properties does

03:26.680 --> 03:33.890
not matter so that is the data we get back by passing the stored data.

03:33.900 --> 03:41.640
Now I need to convert my expiration time into a data object and for that we can simply create a new

03:42.330 --> 03:54.720
new Date object and pass in the past data token expiration date field value because data is a string

03:54.930 --> 03:59.940
that actually has the ISO format that can be used by the date constructor.

03:59.940 --> 04:04.850
Now of course that is a date now but it might already be an expired token.

04:04.920 --> 04:12.390
So if the expiration time is smaller or equal than the current time then this means it is in the past

04:12.390 --> 04:14.500
and therefore that token expired.

04:14.820 --> 04:21.030
So then I will all the return null because I was able to retrieve data but it will not be useful data.

04:21.270 --> 04:25.110
If we make it past as a check then we can actually create a new user.

04:25.110 --> 04:31.430
So I'll create a new user and there I need to store my I.D. email and so on.

04:31.440 --> 04:37.980
Well since I need that email actually I should store that email in my storage as well.

04:37.980 --> 04:44.850
So in store of data all stored email now and I expect to get the email here as a string.

04:44.850 --> 04:51.480
So let's store email since I expect that as a string here we need to pass it here.

04:51.490 --> 05:00.300
When we call the we're off date of course there are 1 to pass in my email and now when we extract our

05:00.300 --> 05:01.740
data up there.

05:01.740 --> 05:07.170
Well that past data of course now we'll have an email field as well because we're now storing this as

05:07.170 --> 05:07.990
well.

05:08.070 --> 05:18.160
Now we can create our new user here and that user gets the I.D. from past data user I.D. the email from

05:18.160 --> 05:30.070
past data email of course all the token from past data token and for the expiration time it's our expiration

05:30.730 --> 05:34.330
time object Date object we're creating up there.

05:34.330 --> 05:36.510
This is now at a user we're creating.

05:36.670 --> 05:39.450
And now I will return my user here.

05:39.460 --> 05:46.090
So we even return null if we have invalid data or we were not able to retrieve data or we return a user

05:46.120 --> 05:47.180
object.

05:47.200 --> 05:49.160
Now it is this just in this map.

05:49.240 --> 05:51.120
Operator I had a two pipe.

05:51.250 --> 05:54.540
It's not the only operator I want to have in this chain though.

05:54.850 --> 05:55.990
I'll also add a tap.

05:55.990 --> 05:58.750
Operator Where I get this user object now.

05:58.960 --> 06:03.940
And of course only if the user is set I will then emit as user.

06:03.940 --> 06:10.630
So my private user property I will call next and forward this user because I want to emit dead user

06:10.720 --> 06:12.820
in case I have it.

06:12.820 --> 06:18.380
And last but not least does observable change should not return a user object but true or false.

06:18.620 --> 06:20.150
So add never map.

06:20.170 --> 06:26.380
Operator Where I also get that user because tap never consumes the data but just taps it but doesn't

06:26.380 --> 06:27.340
change it.

06:27.340 --> 06:32.730
So I get a user object here and I want to return a boolean so I'll use that double exclamation mark

06:32.740 --> 06:35.120
trick to force that into a boolean.

06:35.230 --> 06:39.520
And now we return true if we have a user or if the return null before.

06:39.520 --> 06:41.670
Well we return false here.

06:42.160 --> 06:44.160
Does this you ought to log in method.

06:44.190 --> 06:45.960
Now where do I want to use that.
