WEBVTT

00:02.450 --> 00:04.370
Now did we add it sign up and sign in.

00:04.430 --> 00:11.200
It's important to all the managed to log in state in our application correctly.

00:11.300 --> 00:17.000
Now we'll need a couple things for example we'll need that token and therefore here I will actually

00:17.000 --> 00:23.440
add a new private property token which is null initially where I want to store that token now and get

00:23.450 --> 00:25.060
user is authenticated.

00:25.100 --> 00:29.300
I actually now don't want to use my private user is authenticated variable anymore.

00:29.300 --> 00:30.530
Instead I'll remove that.

00:30.620 --> 00:36.710
But here the existence of a token of a valid token will actually determine whether we should be locked

00:36.710 --> 00:38.360
in or not.

00:38.360 --> 00:43.910
So for now what I can return here is simply do you answer to the question whether we have a token or

00:43.910 --> 00:44.630
not.

00:44.690 --> 00:51.980
However the token should not be managed like this but instead in a behavior subject so whenever it changes

00:52.010 --> 00:54.580
we can tell is to the entire application.

00:54.590 --> 01:00.190
And for example log us out and automatically redirect us which I would want to do.

01:01.250 --> 01:07.100
So let's create a new behavior subject here which actually will yield a string because the token is

01:07.100 --> 01:11.540
a string and behavior subject needs to be imported from our ex J.S.

01:14.640 --> 01:22.320
and let's do the same for the user I.D. and therefore we could actually merge both into one user object.

01:22.320 --> 01:30.720
So let's add a U new user model here where we can export a class user and then there I'll add a constructor

01:31.230 --> 01:39.690
and dead constructor will set a public property I.D. which is a string so that user I.D. we also can

01:39.690 --> 01:41.770
stored e-mail in here.

01:41.880 --> 01:44.250
So that would also be a string.

01:44.380 --> 01:49.590
Now all the ones stored in token but in a private property that will be a string.

01:49.590 --> 01:54.860
And I also want to store the token expiration date because that will be important.

01:54.870 --> 02:02.070
Token is not valid forever it will expire and the dad will be a date now.

02:02.100 --> 02:08.240
Next to all these fields I'll also add a getter for a token property.

02:08.250 --> 02:09.870
So this one is named underscore token.

02:09.870 --> 02:14.510
This one is the one we can publicly access and we can only get that in here.

02:14.520 --> 02:22.540
I basically want to check if we're not having an expiration date in which case the token would be invalid

02:22.630 --> 02:30.250
or if this token expiration date is smaller or equal than the current date new date gives us a current

02:30.250 --> 02:33.030
timestamp not just a date but also of time.

02:33.100 --> 02:40.760
In that case I would return null year for to token so then the token would be invalid otherwise I will

02:40.760 --> 02:41.270
return.

02:41.270 --> 02:49.190
This underscore token and now with that user model added which manages its own basic token validation

02:49.190 --> 02:56.900
checks if it's still valid or is still up to date with that we can add a new private property new office

02:56.920 --> 03:02.510
service underscore a user which now is the actual new behavior subject I want to use and therefore I'll

03:02.510 --> 03:06.950
get rid of the token here as well and that will eventually yield as a user.

03:06.950 --> 03:08.630
So that is the generic type.

03:08.630 --> 03:16.220
Sign here and of course I import user from the User model I just added and now it's this user I want

03:16.220 --> 03:17.640
to manage in here.

03:17.780 --> 03:23.750
Now we can still have our get users authenticated helper and there in the end it depends and we need

03:23.750 --> 03:32.120
to find out whether our current user has a valid token or not now we'll initialize the user here with

03:32.120 --> 03:33.440
null by the way.

03:33.440 --> 03:36.070
And then here and get user is authenticated.

03:36.380 --> 03:47.170
I will return this user as observable pipe because I want to not return to full user here but only the

03:47.170 --> 03:49.870
information whether it is users authenticated or not.

03:50.050 --> 03:55.240
And therefore I'll pipe the map operator here to transform the data and the user subject which is a

03:55.240 --> 03:56.070
user object.

03:56.110 --> 03:58.210
I want to transform it to a Boolean.

03:58.210 --> 04:04.900
Therefore this map operator is imported from our x j as operators and then down there in the map operator

04:04.900 --> 04:10.690
we get that full User object and I want to return the answer to the question whether Dad users of Fenwick

04:10.720 --> 04:11.760
header or not.

04:11.770 --> 04:15.550
Well that simply depends on whether we have a valid token or not.

04:15.550 --> 04:19.660
So I can return user token here.

04:19.660 --> 04:25.570
However I will actually add two exclamation marks here which will convert is to a Boolean because the

04:25.570 --> 04:27.390
token by default is a string.

04:27.520 --> 04:34.000
That would add one exclamation mark I would return true if the token is invalid and false if it is valid

04:34.180 --> 04:35.220
via Add to.

04:35.230 --> 04:39.070
I basically just force a conversion to a Boolean.

04:39.070 --> 04:45.520
So this now returns and observable that will eventually yield True or false depending on whether we

04:45.520 --> 04:47.340
have a token or not.

04:47.350 --> 04:54.130
Now for the user I.D. if we need that then I can just return.

04:54.170 --> 05:05.580
This user has observable and there are also map the response and I'll get for my full user object here.

05:05.610 --> 05:12.780
But I actually only want to get the I.D. so I can just access user I.D. and return that now to avoid

05:12.780 --> 05:13.250
errors.

05:13.260 --> 05:19.980
If user is undefined or is null as it is at the beginning here I should of all call resolve to take

05:19.980 --> 05:27.980
care about such scenarios therefore I will actually wrap these checks here so not just use the short

05:28.010 --> 05:34.700
inline notation but I will eventually return this but only if we have a user objects I'll check if user

05:34.700 --> 05:35.530
is set.

05:35.750 --> 05:41.720
In which case I then return this token which I tried to access.

05:41.780 --> 05:45.740
Otherwise if we have no user then I just return false.

05:45.740 --> 05:48.760
Because because then the user certainly is not often you get it.

05:48.770 --> 05:52.190
If we have no user they'll do the same here for the user I.D..

05:52.760 --> 05:59.330
I will actually not use the short notation where I have everything in line I do return my user I.D.

05:59.330 --> 06:01.580
here but only if we have a user.

06:01.940 --> 06:15.020
So if user then I tried to return the user I.D. alts I will just return null here.

06:15.050 --> 06:22.540
So now we adjusted D to getters and we are now using the user model to also manage our estate.

06:22.630 --> 06:28.130
Therefore here and log out what I of course want to do is I want to reach out to my users subject and

06:28.130 --> 06:31.390
emit a new event where I is reset the user to now.

06:31.400 --> 06:35.270
But of course all all they have to make sure that I do actually set a user.

06:35.270 --> 06:38.870
After we logged in or signed up and that will be the next step.
