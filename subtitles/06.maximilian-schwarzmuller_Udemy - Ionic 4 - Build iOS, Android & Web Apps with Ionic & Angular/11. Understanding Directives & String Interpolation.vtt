WEBVTT

00:02.090 --> 00:09.440
I introduced you to property binding and we can set up our own bindable properties with @input in front

00:09.440 --> 00:10.560
of them.

00:10.580 --> 00:17.310
Now I told you that we would be receiving our person list data here in our persons component,

00:17.390 --> 00:25.220
thanks to our custom property binding but how can we now render our persons to our actual DOM?

00:25.250 --> 00:31.460
Well for that in the persons component, we want to go to the persons.component.html file and output

00:31.460 --> 00:37.860
the content of this person list. Let's say we want to create an unordered list here with a bunch of

00:37.860 --> 00:44.620
list items and we want to repeat that list item for every element in our person list.

00:44.670 --> 00:51.540
Now in traditional Javascript, we would write a for loop but here, we are in HTML code

00:51.540 --> 00:55.100
and yes this will be converted to Javascript kind of

00:55.200 --> 00:58.070
but here we still are in HTML.

00:58.350 --> 01:04.370
Well we can use another important feature provided by Angular which is called a directive.

01:04.440 --> 01:11.670
We can add a directive to HTML elements and a directive is basically an instruction inside of

01:11.670 --> 01:16.890
our HTML code which will be understood by Angular to do something

01:17.070 --> 01:24.940
and here, one of the built-in directives is *ngFor and the star is important here.

01:24.960 --> 01:31.890
This is a directive which ships with Angular and which is actually unlocked by importing browser module

01:31.890 --> 01:32.150
here.

01:34.260 --> 01:41.520
ngFor can be used to setup a for loop in HTML code so to say, it's only available in Angular

01:41.520 --> 01:48.120
templates but there we can use it. We add an equal sign and then double quotes and between the double

01:48.120 --> 01:56.680
quotes, we write our looping logic and this syntax is close to the normal Javascript for loop. We use

01:56.700 --> 02:05.250
let and then any variable name you want, like person but that name is up to you, of and now you need

02:05.250 --> 02:14.640
to reference either a value like an array or just as we did it in app component, a property of this persons

02:14.640 --> 02:15.570
component.

02:15.570 --> 02:19.210
So person list is a property of the persons component,

02:19.470 --> 02:27.960
so in the persons component template, we can reference it, person list. What this will do is it will create

02:27.960 --> 02:36.690
a new list item for every element in person list, it will actually store this element it's currently

02:36.690 --> 02:43.740
looking at for every iteration in this person variable and we can use this person variable inside of

02:43.740 --> 02:50.160
this repeated element and if we want to output the person which is just a string here in the end because

02:50.160 --> 02:57.570
we have a list of strings, then we can use another binding syntax, we saw property binding with the square

02:57.570 --> 03:05.160
brackets, now another binding syntax Angular offers is so-called string interpolation and that uses double

03:05.310 --> 03:12.690
curly braces and you use that anywhere where you can output text in HTML, like here between the opening

03:12.690 --> 03:20.070
and closing tag. You could enter any text here like hello or since you can use text here, you use the double

03:20.070 --> 03:27.720
quotes and then you can reference either a property of a component, like person list but that wouldn't

03:27.720 --> 03:33.000
work because it's an array and we don't want output the full array here, we instead want to output the

03:33.120 --> 03:40.680
element for which we recreated this list item, so we can output person, this variable here. And if we

03:40.680 --> 03:45.780
now save this, what you will see is if you go back to your page, it should have automatically reloaded

03:46.080 --> 03:53.340
and you have three bullet points for the three items in your persons list which is in the app component

03:53.610 --> 04:00.660
which is passed down to persons thanks to property binding and which is then output thanks to this directive

04:01.050 --> 04:02.820
and string interpolation.
