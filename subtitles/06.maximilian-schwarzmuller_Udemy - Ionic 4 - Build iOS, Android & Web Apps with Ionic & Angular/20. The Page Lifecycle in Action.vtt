WEBVTT

00:02.090 --> 00:04.660
We learned about all those different lifecycle hooks.

00:04.790 --> 00:06.230
Let's now see them in action.

00:06.440 --> 00:11.130
And I will actually show them in the user's page here.

00:11.240 --> 00:17.510
You simply add such a hook by adding I-N view and then the names so let's say can enter as does the

00:17.510 --> 00:19.390
first of which gets executed.

00:19.690 --> 00:26.540
Now you can enter will be executed by ionic to automatically unlike the angler to life cycle.

00:26.540 --> 00:29.330
You don't need to implement some interface.

00:29.450 --> 00:35.360
And as I already mentioned the English to life cycle it's important that both life cycles coexist.

00:35.630 --> 00:37.780
There still is a component in the end right.

00:37.910 --> 00:42.630
So D-NC are two component lifecycle still applies with on in it and so on.

00:42.830 --> 00:46.780
But additionally ionic will call its own methods.

00:46.820 --> 00:52.550
You can enter will enter and so on the ones you saw on the slide and those will only be called four

00:52.550 --> 00:59.530
components which are used as pages which means all are loaded frood the navigation stack the nav controller.

00:59.600 --> 01:05.450
If you create another component and simply unbaptised in the template fruit's selector you will get

01:05.450 --> 01:09.140
the dangler to lifecycle but not the page lifecycle.

01:09.140 --> 01:13.610
This is important to keep in mind so you can enter.

01:13.610 --> 01:15.310
I will simply log.

01:15.480 --> 01:22.080
I am Buchanon Drew so that we can see that we reach this hook and this hook here actually needs to do

01:22.280 --> 01:33.110
return something a Boolean or a promise wrapping a boolean therefore here we should return TRUE TO Drent

01:33.140 --> 01:39.120
excess or let's change this and rent excess depending on the result of a random number.

01:39.230 --> 01:44.750
So we can store data we can create it Moff random has a built in function which gives us a random number

01:44.750 --> 01:54.260
between 0 and 1 and then we can simply return and allow access if random is graters lets say Dot 2 or

01:54.260 --> 02:00.560
lets make a dot 5 to see a difference so we have a 50/50 chance of being allowed to access this page.

02:00.560 --> 02:07.910
Now if I save this lets see what happens this will recompile our application and if I click on users

02:08.330 --> 02:12.410
while we are successful Let's try again until we fail or we fail.

02:12.620 --> 02:16.440
Now we get an error because we're not allowed to access this page.

02:16.610 --> 02:25.580
But on the home page where I push this page here we're not handling the case that we fail now with Neph

02:25.580 --> 02:27.800
push it's hard to handle this case.

02:28.010 --> 02:36.130
So let's instead add a click listener again and let's say on go to users and let me quickly rewind this

02:36.150 --> 02:40.270
whole duplicators and Calment this out so that you can see old the old code.

02:40.340 --> 02:45.830
So let's add a click listener on go to users and it's implemented here again.

02:45.830 --> 02:49.750
So we already did this before on go to users.

02:50.180 --> 02:54.020
Again make sure to inject the NAF controller.

02:54.020 --> 02:56.970
This should all be fairly familiar until now.

02:57.020 --> 02:59.700
So they have controller make sure to at the import.

02:59.720 --> 03:03.610
And this is the wrong imp or don't know why the idea is doing that.

03:03.620 --> 03:07.470
So make sure to add the right import from ionic angler.

03:07.550 --> 03:08.210
And what doesn't.

03:08.330 --> 03:09.050
That again.

03:09.160 --> 03:12.490
Control or push note not pop push.

03:12.740 --> 03:16.660
And then user this user page.

03:16.700 --> 03:23.510
So if I'm pushing this page and to handle the case that we're not allowed to access this I can catch

03:23.750 --> 03:24.800
any error.

03:25.010 --> 03:32.510
So in the end this will return us a promise which resolves when we see the page or when the push request

03:32.510 --> 03:34.300
was rejected.

03:34.580 --> 03:46.010
So here we can simply catch the error and this will simply be false and console log Access Denied argument

03:46.010 --> 03:46.900
was.

03:47.120 --> 03:51.790
And now here simply error and again error will simply be false in the end.

03:52.070 --> 04:00.230
So if this if we save this we have ongoing users hooked up your lead our app reload and let's try again

04:00.230 --> 04:02.010
until this fails.

04:02.450 --> 04:03.940
Well I'm pretty lucky here.

04:03.980 --> 04:07.390
Now Access Denied argument was false.

04:07.430 --> 04:14.320
So this is the first took I can answer which allows you to control access and we will see examples connected

04:14.320 --> 04:19.230
to offense occasional later in the course after you can enter if you were successful.

04:19.240 --> 04:22.620
We will reach I can view dead load.

04:22.660 --> 04:25.010
Now this won't return anything here.

04:25.050 --> 04:26.700
Does can block access.

04:26.740 --> 04:30.870
We can simply run some code we want to do or we want to run here to initialize things.

04:30.880 --> 04:33.440
For example we could fetch the NAF parents here.

04:33.440 --> 04:37.010
Q So I view debt load as the hook.

04:37.090 --> 04:43.510
I'm logging it to the console so that we can see we're reached as hook and I'm lowering does hurdle

04:43.510 --> 04:49.000
here 2.1 so that it's more probable that we actually get through.

04:49.180 --> 04:57.350
Now after I interviewed ad load we will reach I and you will enter and you will enter is executed right

04:57.350 --> 05:00.810
before we see the view right before it did become active.

05:00.950 --> 05:04.670
So I and you will enter and that will add all the other hooks.

05:04.670 --> 05:05.800
I don't want to bore you.

05:05.810 --> 05:08.060
So I will quickly skip forward.

05:08.060 --> 05:09.610
I just want to pause for a second.

05:09.620 --> 05:12.170
I'm adding I-and you can leave here.

05:12.170 --> 05:20.450
I did already enter at I.m you did enter now can leave again needs to return a boolean or a promise

05:20.450 --> 05:22.030
resolving to a boolean.

05:22.280 --> 05:31.430
So here what I will do is I will create a promise a new promise like this and in this promise I need

05:31.430 --> 05:39.460
to pass in a method which has resolve and reject as arguments these are functions we can execute you

05:39.470 --> 05:46.000
resolve or reject a promise and indeed the Colbeck or excuse me in the body of the function.

05:46.010 --> 05:55.520
I simply want to set a time out set time and let's say one second and after that second I will resolve

05:57.020 --> 05:57.800
and resolve.

05:57.800 --> 06:03.940
True but you could also resolve nothing so the promise can always return with it.

06:03.980 --> 06:09.240
So that's all fine and resolve means you are allowed to exercise as we check would mean you're not.

06:09.500 --> 06:14.810
So with this we are resolving this after one second and here I will return the promise.

06:14.990 --> 06:18.810
So when we try to leave it should actually wait for it one second.

06:19.010 --> 06:24.030
And then this resolves well and this will simply allow us to leave.

06:24.040 --> 06:28.110
And again this should be executed in the callback function of sets time out.

06:28.280 --> 06:30.820
So make sure to make it as a function

06:33.820 --> 06:39.140
like this so now so time is a real function.

06:39.150 --> 06:43.300
First argument is a function which is executed after one second.

06:43.330 --> 06:48.750
And in this function I simply rissoles the promise so normal promise code here returning the promise

06:49.030 --> 06:53.710
after one second we should be allowed to leave now quickly entered the other hooks and then we can see

06:53.710 --> 06:55.220
this all in action.

06:55.240 --> 06:57.080
I've finished adding all the hooks.

06:57.100 --> 06:59.490
I also added a console lock lock to the end.

06:59.500 --> 07:03.090
You can leave Methot And with that advice save this.

07:03.250 --> 07:05.010
Let's see this all in action.

07:05.010 --> 07:06.360
A running application.

07:06.490 --> 07:10.710
Or clean the console for click on users can enter.

07:10.720 --> 07:13.020
Did load will enter did enter.

07:13.240 --> 07:18.720
If I click on max now you can leave and after one second we aren't allowed to leave.

07:18.730 --> 07:25.990
We will leave and we did leave but you don't see will unload and those important will unload was not

07:25.990 --> 07:31.780
cold because our page is cached it is still on our stack of pages.

07:31.780 --> 07:35.740
It's just not the top most one so therefore it's still in the cache.

07:35.980 --> 07:40.060
And if I go back you actually see can enter.

07:40.090 --> 07:42.000
Will enter and did enter.

07:42.040 --> 07:45.580
But you don't see dead load because it wasn't newly created.

07:45.580 --> 07:51.790
It was taken from the stack of pages from the cache so that is what I was mentioning earlier about that

07:51.820 --> 07:54.350
some of the pages are cached.

07:54.400 --> 07:58.610
If I go back here though you see would take 1 second.

07:58.690 --> 08:03.040
Then we execute will leave did leave and then all the will unload.

08:03.040 --> 08:08.340
So now it was removed from the cache because we removed it from the stack of pages.

08:08.380 --> 08:13.930
If I clear this again and go to users again we there for all to see did load again because it was created

08:13.930 --> 08:14.490
again.

08:14.560 --> 08:18.430
It wasn't on the stack of pages it wasn't in the cache.

08:18.460 --> 08:21.940
These are those page lifecycle hooks in action.

08:21.940 --> 08:26.940
Again keep in mind you can use them to Gabr with the normal angler lifecycle hooks.

08:27.040 --> 08:29.470
The difference is angler to lifecycle.

08:29.470 --> 08:32.820
Hooks are executed on every component.

08:33.130 --> 08:40.240
Those I don't view whatever lifecycle hooks are only executed on components which are loaded frood the

08:40.240 --> 08:41.320
nav controller.

08:41.350 --> 08:45.350
So which are pushed to the stack or popped off it.

08:45.370 --> 08:48.710
These are the lifecycle acts and that's a core concept.

08:48.760 --> 08:54.430
You will see from time to time throughout the course especially the navigation guards can leave and

08:54.430 --> 08:57.110
can enter when we work with of indication
