WEBVTT

00:02.620 --> 00:08.050
So let's take advantage of our users subject up there with the user model and let's set the user.

00:08.080 --> 00:10.900
When we signed up or when we logged in.

00:10.900 --> 00:18.430
Now I subscribe to sign up and log in and the off page but of course we can add pipe here to still do

00:18.430 --> 00:21.150
something in the off service with the tap.

00:21.160 --> 00:27.310
Operator The Tab operator is imported from our exchange as operators of course.

00:27.310 --> 00:33.640
Now if you remember tap allows us to well tap into that observable chain and execute some code.

00:33.640 --> 00:36.560
We get the same data the rest of the observable chain gets.

00:36.580 --> 00:45.100
So we get our response data where our user data actually and they are we get things like the user I.D.

00:45.100 --> 00:46.590
and that's token.

00:46.870 --> 00:54.130
Therefore here I can actually use the user variable and emit a new event where I create a new user for

00:54.130 --> 01:00.310
Dad we need to import the user from our user model that's important and I create a new user.

01:00.310 --> 01:06.280
And now I need to forward things like the I.D. the email the token and the token expiration date.

01:06.360 --> 01:09.020
Now the I.D. can be retrieved from user data.

01:09.030 --> 01:15.750
There it's that local I.D. the email can also be retrieved from the response from the user data because

01:15.770 --> 01:25.120
there I get that email now that token can also be retrieved from there because in my user data I do

01:25.120 --> 01:27.640
get that I.D. token.

01:27.640 --> 01:33.080
But what about apps that shouldn't be email coded but just user data e-mail.

01:33.130 --> 01:36.660
But what about the token expiration date now.

01:36.700 --> 01:40.640
Well for this we need to calculate that token expiration date.

01:40.780 --> 01:47.580
We get these expires in data back from the API and that will actually be a string that looks like this.

01:47.610 --> 01:51.850
It's an amount in milliseconds and then you can find that new little box number.

01:51.940 --> 01:52.410
Excuse me.

01:52.420 --> 01:56.660
In the mountain seconds the number of seconds in which the I.D. token expires.

01:56.690 --> 02:00.450
So 3600 seconds is the default as you can see the dogs.

02:00.520 --> 02:02.890
And that means it expires in one hour.

02:02.890 --> 02:13.310
So now we need to generate a timestamp that is now in one hour so expiration time is new date which

02:13.310 --> 02:20.340
is the current time stamp gets time which is the current timestamp in milliseconds plus.

02:20.340 --> 02:27.900
And now we need to convert that expires in a thing that expires in string to a number and two milliseconds

02:27.990 --> 02:30.210
because we're having milliseconds here as well.

02:30.960 --> 02:36.860
So now I can use my user data expires in field.

02:36.960 --> 02:39.540
That is a string with a plus in front of it.

02:39.540 --> 02:42.420
We can convert it to a number.

02:42.420 --> 02:50.380
And now we need to multiply this with 1000 to convert it from seconds to milliseconds this now is the

02:50.380 --> 02:52.990
expiration time in milliseconds.

02:52.990 --> 02:59.260
I want to get a date object though and therefore I'll wrap this entire calculated millisecond thing

02:59.470 --> 03:05.620
with a no date constructor call and we pass that milliseconds timestamp to it and they have this now

03:05.620 --> 03:11.890
really is a data object that marks the time of expiration of our token and therefore I can now pass

03:11.950 --> 03:15.510
expiration time here.

03:15.560 --> 03:21.530
Now that is what I do here for signing up I'll do the exact same thing for logging in.

03:21.530 --> 03:27.590
Hence we can simply grab that whole method I passed to tap here and add it as a private method here

03:29.090 --> 03:37.760
set user data for example there I just need to get that user data which should be our off response data

03:38.240 --> 03:48.510
and then in here I can just use the code I just cut of course remove the curly braces and the argument

03:49.140 --> 03:51.600
and now here I am again setting expiration time.

03:51.600 --> 03:58.970
And then I admit my new user object now set user date as the function I want to call in here set ups.

03:59.190 --> 04:08.430
This set user data without parentheses because I don't want to execute when this code gets passed instead

04:08.430 --> 04:12.050
i'll pass a reference to this method to the tap method here.

04:12.060 --> 04:19.750
So then this gets executed for this to work correctly we should bind this though so that this inside

04:19.750 --> 04:27.610
of set user data still refers to our all service class and not to the tap function and then we can simply

04:27.610 --> 04:32.900
copy that line here and add it down there as well for logging in.

04:32.950 --> 04:40.360
So Dad here we also set our user data and now we're storing that token in memory we're using that token

04:40.360 --> 04:48.600
in our getters year over one step closer to our correct implementation of dead user authentication state.

04:48.790 --> 04:52.990
But we have errors in this application we'll take care about them in the next lecture.
