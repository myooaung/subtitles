
00:02.100 --> 00:07.950
So now that we set up this Angular project and you had a brief look at what ngServe does behind

00:07.950 --> 00:10.210
the scenes and why we use the CLI

00:10.230 --> 00:12.850
because it gives us this bundled up code,

00:12.930 --> 00:18.180
let's have a look at the code we actually work on and for that, I'll bring ngServe back up so that

00:18.180 --> 00:20.700
we can change stuff and see it in the browser

00:20.700 --> 00:27.270
and let me now walk you through that source sub-folder because all the other files and folders can basically

00:27.270 --> 00:28.600
be ignored for now,

00:28.650 --> 00:30.540
the only interesting one is package.json

00:30.570 --> 00:34.220
where you can see all the dependencies of this project

00:34.260 --> 00:40.320
and that basically are the sub-packages of the Angular framework and you can have a look at the angular.json

00:40.350 --> 00:41.490
file,

00:41.490 --> 00:45.070
this is used to configure the Angular CLI project

00:45.120 --> 00:50.250
and you can leave the default settings here but that is basically used by the CLI behind the scenes

00:50.400 --> 00:56.270
so that it knows how to build your project and which things it should keep in mind there

00:56.280 --> 01:02.160
but you can leave the defaults. Other than that, we work in the source folder and there we got a couple

01:02.160 --> 01:05.970
of files, many of them can be ignored as well

01:05.970 --> 01:08.970
but our interesting first file is 

01:08.990 --> 01:09.560
main.ts, 

01:09.630 --> 01:15.840
this is what Angular will evaluate first or what Angular needs being executed first so that the entire

01:16.170 --> 01:21.970
Angular application starts up and so that Angular can do its job in your browser.

01:22.020 --> 01:27.130
What we basically do here or what the important thing is is this line of code here.

01:27.340 --> 01:30.930
This uses something which is exposed from the Angular framework,

01:30.930 --> 01:34.050
we are importing it here from the Angular framework,

01:34.140 --> 01:37.570
this import syntax is a feature provided by Typescript,

01:37.680 --> 01:45.270
it's compiled down into Javascript by simply merging all the code from different files into one file

01:45.270 --> 01:51.300
you could say. So here, we simply import to declare a dependency to another file and then the build

01:51.300 --> 01:57.750
process will take all these dependencies and merge them together because the import feature we use here

01:58.020 --> 02:00.090
is not supported by all browsers,

02:00.090 --> 02:02.860
therefore this has to be handled differently there

02:03.030 --> 02:04.970
but that happens behind the scenes.

02:05.010 --> 02:10.050
We know that we use something from the Angular framework and we can rely on this being available

02:10.110 --> 02:11.670
in the code that runs on the web

02:11.670 --> 02:19.470
because of that merging process and what this does is, in the end, it gives us object which has this 

02:19.470 --> 02:27.600
bootstrapModule method to which we pass a module here, the appModule which we import from the app module file

02:27.720 --> 02:29.900
in the app sub-folder.

02:29.910 --> 02:33.450
Now let's have a look at that file to understand what this does,

02:33.450 --> 02:39.450
so let's go into that app folder here and there we have this app.module.ts file.

02:39.570 --> 02:47.040
Now the file extension, .ts is omitted here because Typescript or the build tool which compiles

02:47.040 --> 02:49.430
this behind the scenes automatically adds this

02:49.440 --> 02:57.120
so to say but it will import this file or it will import appModule from this file and we can see it

02:57.120 --> 02:57.840
here.

02:57.840 --> 03:00.870
We export a class, app module here.

03:00.870 --> 03:04.510
Classes are another feature provided by Typescript,

03:04.620 --> 03:08.820
classes are basically blueprints for Javascript objects you could say

03:08.920 --> 03:15.600
and here we export a class, the export keyword here simply makes sure that we can use this class not

03:15.600 --> 03:20.730
only in this file but also in other files which import it

03:20.730 --> 03:22.250
and that's exactly what we're doing here,

03:22.280 --> 03:22.720
right,

03:22.740 --> 03:24.960
we are importing app module.

03:25.110 --> 03:28.980
This is only possible because we export it here.

03:29.010 --> 03:31.380
Now what is the app module though?

03:31.530 --> 03:33.830
Now first of all, it's a normal class

03:33.960 --> 03:39.080
and behind the scenes this is compiled to a constructor function in Javascript.

03:39.370 --> 03:46.480
Now the interesting thing is this @ngModule thing. Now ngModule is imported again from the

03:46.570 --> 03:50.210
Angular framework and there from the core sub-package

03:50.220 --> 04:01.510
you could say. Angular thinks in modules and now module is simply a bundle of features, a bundle of components

04:01.570 --> 04:07.930
and other things Angular knows which I'll come back to later. You would need to have at least one such

04:07.930 --> 04:10.390
module per Angular app

04:10.390 --> 04:19.480
and for this app, we have exactly this one module. A module is declared to Angular by adding this so-called

04:19.540 --> 04:26.350
decorator, that is something that starts with the @ and then uses essentially a function, that is what

04:26.350 --> 04:30.910
it is behind the scenes, you can't tell by just looking at this but I can tell you.

04:31.030 --> 04:32.790
So we add such a function,

04:32.800 --> 04:39.880
in this case the ngModule function with the @ sign in front of something and you can't use anything

04:39.880 --> 04:48.220
and add it in front of anything, Angular has a couple of so-called decorators which you can import and which

04:48.220 --> 04:53.530
you can then add to certain things and ngModule is one of these decorators, you can learn about all

04:53.530 --> 04:59.920
decorators in the official docs and about a lot of them in this refresher module here and ngModule

04:59.920 --> 05:02.640
can only be added in front of a class.

05:02.920 --> 05:09.970
It then essentially adds metadata behind the scenes, the build process will do this for us to be precise

05:10.180 --> 05:17.440
and this metadata allows Angular to turn this otherwise empty class and therefore the otherwise empty

05:17.470 --> 05:24.730
compiled constructor function into a class which contains definitions of different Angular features

05:24.730 --> 05:26.580
that should work together

05:26.860 --> 05:29.860
and each ngModule has a couple of fields

05:29.860 --> 05:34.570
we can set on the object which we pass to ngModule.

05:34.570 --> 05:42.340
Now I know that this is getting very complex but think of this as a global configuration for your Angular

05:42.430 --> 05:45.150
app or for a part of your Angular app,

05:45.280 --> 05:47.300
a module of your Angular app,

05:47.320 --> 05:55.900
in this case the only module we have in Angular. What we can configure there are for example with declarations

05:55.900 --> 06:01.720
which takes an array, are for example the components we can use in our app.

06:01.720 --> 06:04.870
Remember that I said that Angular uses components,

06:04.870 --> 06:10.630
well here we have to define all the components we want to use inside of this module.

06:10.630 --> 06:16.940
If we have multiple modules, each module can define its own components we can use inside of that module.

06:16.960 --> 06:23.980
So here in this main app module, we can use the app component. App component is again something we import

06:24.130 --> 06:25.830
from the app component file,

06:26.170 --> 06:30.600
so that is this app.component.ts file here actually.

06:30.730 --> 06:33.020
I'll come back to that file in a second, for now

06:33.070 --> 06:39.820
keep in mind this is this component thing I mentioned earlier and we can use it inside of ngModule.

06:39.820 --> 06:42.340
We then also have the imports array here.

06:42.330 --> 06:49.990
Here we can import other modules into this module and we import the browser module which is provided by

06:49.990 --> 06:51.480
the Angular framework,

06:51.520 --> 06:55.930
it's a module built into Angular and it's simply a module,

06:55.960 --> 07:00.370
I mentioned that Angular uses multiple modules or things in modules,

07:00.430 --> 07:05.210
it's a module that unlocks certain features to be used in our application.

07:05.230 --> 07:11.110
I'll come back to which features these are later but this is a core set of Angular functionality that

07:11.110 --> 07:14.300
is now made available to us, this is how you can think about it.

07:14.380 --> 07:18.020
It's also required to start the Angular app correctly,

07:18.070 --> 07:25.640
so our main app module depends on this built-in browser module. Providers is empty and we can ignore

07:25.640 --> 07:26.260
that for now,

07:26.300 --> 07:32.210
I'll come back to this later and Bootstrap is a special key and you typically only use that on your

07:32.210 --> 07:38.060
app module to define your root app component,

07:38.060 --> 07:44.600
so the root component that should be mounted into your browser when the app starts. You typically only

07:44.600 --> 07:46.570
have one such root component,

07:46.670 --> 07:53.480
you have multiple components per Angular app but all other components are somehow used inside of that

07:53.480 --> 07:59.480
root component or inside other components which are in turn used in the root component or in other

07:59.510 --> 08:05.900
components of the root component. So only one root component and that is defined here in Bootstrap

08:06.800 --> 08:11.900
and now something interesting happens or something interesting can be seen when we have a look at the

08:11.900 --> 08:12.650
app component.
