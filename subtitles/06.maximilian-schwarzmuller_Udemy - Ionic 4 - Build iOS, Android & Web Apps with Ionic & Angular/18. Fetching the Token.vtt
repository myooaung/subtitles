WEBVTT

00:02.320 --> 00:04.330
We added does pop over.

00:04.330 --> 00:10.990
Now it's time to finally start submitting HTP requests to our firebase server so that we can store our

00:10.990 --> 00:11.760
data.

00:11.890 --> 00:17.410
Now to do this we will need some information about the offending Kelud user though because we will need

00:17.410 --> 00:23.830
this token firebase stores for us to authenticate the user with firebase because only authenticated

00:23.830 --> 00:26.460
users are allowed to access our firebase back.

00:26.470 --> 00:28.960
And this is the default setting.

00:28.960 --> 00:36.840
And as a side note you can check this under database and then rules here this might look a bit triptych.

00:36.850 --> 00:43.090
But what this is saying is read and write access is only granted to offene credit users.

00:43.120 --> 00:47.170
So where off is not null which would mean they are not of indicated.

00:47.260 --> 00:53.450
So only a Finnikin that users are allowed to read and write are data or no data right now in a database.

00:53.740 --> 01:00.460
So therefore we need to get our token and send it with an HTP request to confirm to firebase to our

01:00.640 --> 01:05.440
backend that we actually are allowed to read or write so that we are offending say that.

01:05.530 --> 01:12.040
So in order to do this we need to get access to this token and we actually do get access to this token

01:12.250 --> 01:14.990
through the user firebase knows.

01:15.170 --> 01:24.640
Now this user is extract that in the app component here where we check the user when our indication

01:24.680 --> 01:26.350
of state changes.

01:26.350 --> 01:27.670
This is our user.

01:27.730 --> 01:32.720
However we can also conveniently get access to it with the help or method firebase gives us.

01:32.800 --> 01:39.700
And I'm going to implement this here as a helper method in my own office service get active user would

01:39.700 --> 01:41.130
be a fitting name I guess.

01:41.200 --> 01:45.150
And here I simply want to return this.

01:45.250 --> 01:48.640
No not this just firebase off.

01:48.760 --> 01:54.700
And then there is a current user property which will give me the currently authenticated user.

01:54.850 --> 01:57.610
So this gives me my user.

01:57.760 --> 02:06.640
And now back in the shopping list service here in on show options I now want to handle the case that

02:06.640 --> 02:12.550
I click on the story button first because storing is more important than loading because we can't load

02:12.580 --> 02:21.790
anything if nothing is stored and in order to handle this click I now need to listen to the data I get

02:21.820 --> 02:29.080
when we dismiss the pop over remember in Essel options we dismissed the pop over and we pass on the

02:29.080 --> 02:30.740
action to user selected.

02:30.820 --> 02:37.300
So a string in the end load or store this is passed to this method when you click a button and this

02:37.300 --> 02:39.670
method then dismisses the view controller.

02:39.680 --> 02:43.680
You pop over therefore and pass this to stated to the view below it.

02:43.720 --> 02:45.640
So do the shopping list component.

02:45.940 --> 02:50.450
Therefore here we should implement pop over on that dismiss.

02:50.470 --> 02:55.390
And you might know this pattern from the motile where we all receive data like this.

02:55.660 --> 03:00.060
And here I know that I get the data which is an object in the end.

03:01.310 --> 03:07.630
And I can now check if the data action remember actionless the property name we chose here.

03:07.670 --> 03:10.910
And does this you Optik we're getting into a state object in the end.

03:11.420 --> 03:16.980
So it can check if data action equals load.

03:17.100 --> 03:21.840
In which case we should reach out to server and load something we'll cover this later or if it's something

03:21.840 --> 03:24.110
else which would be stored in this case.

03:24.180 --> 03:31.620
Now if it is stored I need to reach out to my office service and get the currently active user to get

03:31.680 --> 03:33.450
the token off that user.

03:33.450 --> 03:39.180
So for this I will inject be of service year like this.

03:39.180 --> 03:47.530
Make sure to also at the amp or to the file with that and check that I can now reach out to offer service

03:47.800 --> 03:49.600
and get the active user.

03:49.900 --> 03:56.590
And on this user I'm again interested in the tokenized conveniently firebase office Astor's gets token

03:56.590 --> 03:59.440
method on the currently active user.

03:59.650 --> 04:05.980
Now get token however will not give us back a string representation of this token.

04:06.280 --> 04:10.200
Instead get token actually returns a promise.

04:10.210 --> 04:16.900
The reason for this is that get token will first of all have a look at our local storage and retrieve

04:16.900 --> 04:18.340
the token.

04:18.560 --> 04:24.380
And once it does this it will check if the token is still valid if the token expired.

04:24.470 --> 04:27.950
It will automatically try to refresh the token for us.

04:27.950 --> 04:30.470
So it does a lot of different things behind the scenes.

04:30.470 --> 04:36.350
And if you're using your own backend you might need to implement this on your own or you simply don't

04:36.350 --> 04:44.180
care about invalid token send this token and then get the error by the server who recognizes this token

04:44.180 --> 04:45.200
it's not valid.

04:45.200 --> 04:51.730
So whatever your set up is again firebase conveniently does this all in just get token method.

04:51.950 --> 04:58.790
Therefore does is a promise which will give us the token once it ever got it or refreshed it or it will

04:58.790 --> 05:02.710
throw an error which we can handle with catch you if there is no valid token.

05:02.990 --> 05:05.170
I will not handle this right now.

05:05.600 --> 05:11.400
So then I know I have the token and the token in the end.

05:11.560 --> 05:21.560
Just a string and we can now use this token to actually finally reach out to the web and fetch our data

05:21.560 --> 05:23.810
or in this case storing the data.

05:23.960 --> 05:29.480
Now storing shopping lists data sounds like a shop for the shopping list service.

05:29.480 --> 05:34.900
So this is where in the next lecture I will actually implement our HTP call.

05:34.940 --> 05:41.090
Q Our firebase service use that token to offend teacake myself and store the data on firebase
