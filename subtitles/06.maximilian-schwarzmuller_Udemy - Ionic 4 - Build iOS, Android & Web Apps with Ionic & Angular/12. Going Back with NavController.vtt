WEBVTT

00:02.790 --> 00:06.420
So how can we go back from let's say our place detail page?

00:06.600 --> 00:10.910
Now one easy way of course is to add an ion back button,

00:10.980 --> 00:13.110
do you remember how that worked?

00:13.110 --> 00:19.590
You don't just add it like this, you instead wrap it into ion buttons where you should set the slot to

00:19.590 --> 00:21.830
start which positions it

00:22.050 --> 00:26.970
most of the time on the left but start really depends on the device you're running on and also in the

00:26.970 --> 00:34.370
region settings but wrapped in there, you now add your ion back button and that ion back button now

00:34.410 --> 00:35.160
by default,

00:35.190 --> 00:36.960
well takes you back.

00:36.990 --> 00:41.070
Now let me also adjust the title here a little bit,

00:41.100 --> 00:44.160
we can later display the actual title of the place we loaded,

00:44.160 --> 00:52.020
for now I'll just at least set it to this a little bit nicer looking title and now when we go to a

00:52.020 --> 00:56.280
page, we do have the back button and it does take us back.

00:56.340 --> 01:01.470
Now one problem we have is when we reload this page, we don't have the back button because Ionic detects

01:01.470 --> 01:04.230
that it doesn't know where to take us.

01:04.320 --> 01:09.930
As this page reloaded, the app restarted and therefore this stack of pages is removed,

01:09.930 --> 01:10.530
it's cleared,

01:10.560 --> 01:15.870
that's just how Javascript works, if you reload the app restarts and all the other memory or what you

01:15.870 --> 01:21.870
had in memory is lost and therefore Ionic can't really go back because it doesn't know which page came

01:21.870 --> 01:23.580
before this page

01:23.580 --> 01:29.070
and that is why on the ion back button, you can add that default the ref attribute, by the way you could

01:29.070 --> 01:32.600
also add default ref like this and set this to the path

01:32.610 --> 01:36.840
you want to go to in case Ionic doesn't know where to go to

01:37.050 --> 01:44.180
and then that would be in our case places tabs discover. And if you add this now, when display detail

01:44.190 --> 01:50.520
page reloads which is of course a reasonable scenario in a web app where you can load any page by entering

01:50.520 --> 01:51.470
the right URL,

01:51.510 --> 01:53.770
now we have the back button here too.

01:54.030 --> 02:00.340
However, doesn't work right? Well that's just the thing here in Angular.

02:00.340 --> 02:06.940
There you indeed have to use default ref like this, default ref with a slash in between works if you're

02:06.940 --> 02:13.180
using Ionic components in a vanilla Javascript application, when using the Angular one, it should be default

02:13.180 --> 02:14.860
ref like this in camel case

02:14.860 --> 02:20.170
notation and now with that, that will reload and then this button will take us back.

02:20.200 --> 02:21.220
Here we go.

02:21.220 --> 02:23.530
How else could we go back when we're on this page?

02:23.530 --> 02:29.370
Let's say on place detail, we do have our bookings button to book this place.

02:29.530 --> 02:39.370
So in there, I'll add an ion button and put just book onto it as label and give it a color of primary,

02:39.540 --> 02:44.280
something like that and maybe add a little margin around this button with the margin

02:44.350 --> 02:47.000
CSS utility attribute.

02:47.080 --> 02:51.370
Now we should see a nice button on the page as it reloads,

02:51.370 --> 02:52.630
here it is

02:52.630 --> 02:56.220
and this button when we tap it of course does nothing at the moment.

02:56.350 --> 02:58.350
It can't because we haven't added any logic, so

02:58.760 --> 03:03.670
let's add a click listener and there I'll execute onBookPlace.

03:03.670 --> 03:10.570
Now later we'll open a modal there which will later then allow us to add our user details for booking

03:10.570 --> 03:12.390
that place, for the moment

03:12.790 --> 03:14.430
I just want to execute this method,

03:14.440 --> 03:21.590
so let's add onBookPlace here to the Typescript file and in onBookPlace at the moment,

03:21.600 --> 03:22.890
I just want to go back.

03:22.990 --> 03:26.540
Now we have a couple of different options for going back,

03:26.620 --> 03:30.010
one of them is that we inject the Angular router.

03:30.010 --> 03:32.140
We do it like this,

03:32.560 --> 03:33.900
import router from 

03:33.900 --> 03:40.330
@angular/router and with that injected here, we can call this router navigate and then enter the 

03:40.330 --> 03:40.590
URL to

03:40.600 --> 03:41.660
which we want to navigate

03:41.740 --> 03:52.270
like places tabs discover, like that, should be navigate by URL if you're using a full URL,

03:52.370 --> 04:01.060
otherwise you have to pass in an array with all the segments. With that if this app reloads and I click book,

04:01.830 --> 04:02.850
we go there.

04:04.570 --> 04:10.330
Now what you noticed and that by the way is also still the case on the back button if we reload,

04:10.390 --> 04:15.420
it's playing the wrong animation, it plays the animation it normally plays when adding a page, where the

04:15.460 --> 04:16.990
page slides up from the bottom.

04:17.020 --> 04:22.540
It should play this down sliding animation but when this page is reloaded, even for the back button, it

04:22.540 --> 04:23.800
placed the wrong one.

04:23.800 --> 04:26.200
Now that you'll just be a bug with the back button

04:26.200 --> 04:29.020
but for our own navigation, it's not a bug,

04:29.020 --> 04:36.160
instead Ionic by default plays the forward animation if it doesn't know what the previous page was, if there

04:36.160 --> 04:41.710
is no previous page on the stack because it correctly assumes that any navigation you're doing with

04:41.710 --> 04:47.140
an empty stack of pages is a forward navigation and hence it doesn't know it should actually play the backward

04:47.410 --> 04:52.170
animation for this navigation. For the book button when we do go back,

04:52.180 --> 04:53.100
it should though

04:53.260 --> 04:56.190
and here, the nav controller can help us.

04:56.380 --> 05:04.330
You inject it like this, simply by referencing nav controller as a type and that is imported from @ionic/angular

05:04.330 --> 05:10.750
so it's important to add this import and now the nav controller can be used for navigating around.

05:10.750 --> 05:18.280
You can use this nav controller and then here, you have navigate back and navigate forward methods and

05:18.280 --> 05:27.610
navigate back then takes either an array with these different segments or just a URL to recipes,

05:27.760 --> 05:34.480
not recipes, to places tabs discover. And now the difference is under the hood,

05:34.480 --> 05:41.080
this will use the Angular router, so this doesn't use any fancy new Ionic router, it uses the Angular router

05:41.410 --> 05:47.520
but it set some internal metadata or configuration so that the right animation is played.

05:47.590 --> 05:55.270
So now if I click book, this plays the back animation here instead of the forward navigation. Another way

05:55.390 --> 06:02.590
of navigating back is to use the nav controller and call the pop method there, this will pop the last page

06:02.680 --> 06:04.320
of the stack.

06:04.330 --> 06:06.360
Now this has one problem though,

06:06.430 --> 06:08.370
let me show you what the problem is.

06:08.450 --> 06:12.490
Let's wait for this app to reload and if I go forward and I click book,

06:12.490 --> 06:13.350
I go backward,

06:13.360 --> 06:14.560
perfect.

06:14.590 --> 06:18.210
Now let's say we loaded this detail page as our first page,

06:18.250 --> 06:19.280
so I reload the page

06:19.280 --> 06:23.270
whilst I'm on that. If I now click book,

06:23.360 --> 06:28.230
this does not work because popping doesn't work if the stack of pages is empty.

06:28.340 --> 06:29.980
So this is unreliable

06:29.990 --> 06:36.140
if you can't guarantee there that there is something on the stack of pages. If you can guarantee that

06:36.170 --> 06:41.960
though because it is a page which doesn't really have a route people will use to start into your app

06:41.990 --> 06:45.940
or something like that, then you can use that as well,

06:45.950 --> 06:49.970
otherwise simply use this mechanism.

06:49.970 --> 06:54.650
The advantage of pop of course would have been that we don't need to specify the path we 

06:54.650 --> 06:59.170
want to go to but the disadvantage of course is that we have to guarantee that there is a previous page.
