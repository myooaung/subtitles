WEBVTT

00:01.980 --> 00:04.900
So we saw two arrows at the end of last lecture.

00:04.980 --> 00:10.350
If we store a recipe without ingredients and we then fetch it we get an error if we try to view the

00:10.350 --> 00:13.720
details because no ingredients is present.

00:13.920 --> 00:19.640
And if we close the pup over by clicking somewhere else this also grows an error.

00:19.680 --> 00:22.560
So this is something we need to fix.

00:22.590 --> 00:27.700
Let's start with the loading of a recipe which has no ingredients.

00:27.750 --> 00:34.740
This is a great shop for the recipe service and I'll leave it to your creativity to come up with a solution

00:35.270 --> 00:36.240
in a couple of seconds.

00:36.240 --> 00:41.600
I will tell you my approach of solving this issue.

00:41.700 --> 00:44.480
Did you find a fitting solution to kind of adjust.

00:44.490 --> 00:51.390
Day they are getting back to make sure that we always have ingredients even if there is an empty array.

00:51.510 --> 00:56.550
I'd do it in the map method because it is the perfect place to transform the data we're getting back

00:56.970 --> 00:57.630
here.

00:57.660 --> 01:07.380
First one to retrieve my recipes so recipes is an array of recipes like this and I can get it by calling

01:07.380 --> 01:13.170
Jason on response or extracting the body which I know will be the array of recipes and I'm transferring

01:13.170 --> 01:15.160
it into regular Javascript code.

01:15.420 --> 01:21.570
So I got my recipes here on these recipes I need to check if there's any recipe or multiple recipes

01:21.580 --> 01:32.150
maybe which don't have the ingredients property so I will simply loop through those recipes not order

01:32.150 --> 01:33.710
to be able to loop through them.

01:33.770 --> 01:39.560
I will change this here and not only assigned is to or not necessarily assign this to the array I get

01:39.560 --> 01:44.760
back but I will first check if there's a set because maybe there are no recipes on the server.

01:44.780 --> 01:48.070
In this case recipe Chaisson would give me undefined.

01:48.140 --> 01:51.060
It would not be an empty array it would be undefined.

01:51.140 --> 01:55.940
So if it is not undefined then I want to get the result I got back.

01:56.120 --> 01:59.110
Otherwise I will set it to an empty array.

01:59.120 --> 02:02.580
This is necessary because I now try to loop through this array.

02:02.750 --> 02:10.700
So with this four off loop I try to loop through my recipes and again if I would not check if response

02:10.700 --> 02:17.860
Chaisson is well something at least I would try to loop through and the find which will give me an error.

02:18.260 --> 02:27.800
So now looping through all the recipes and for each recipe I'll simply check if this item does not have

02:28.680 --> 02:29.740
a special property.

02:29.750 --> 02:36.780
So with has own property a bolt in Chavis map method I can check if the ingredients property is present

02:37.200 --> 02:37.790
and the first.

02:37.830 --> 02:44.400
If this is not the case which is why I have this exclamation mark if this is not the case well then

02:44.490 --> 02:49.750
I simply want to override the ingredients property and set it to an empty array.

02:50.010 --> 02:54.870
So if that or I'm initializing the egregious property in this case I should say I'm adding it.

02:54.870 --> 03:00.510
So if I'm just checking if it doesn't have ingredients then I'm setting it to an empty array and with

03:00.510 --> 03:04.990
that I'm making sure that the ingredients property is always present.

03:05.520 --> 03:09.470
Well then in the end I return these recipes.

03:09.470 --> 03:11.020
Array.

03:11.160 --> 03:14.980
Now with the items adjusted if necessary.

03:15.180 --> 03:21.840
So that is the data transformation I need to add to make sure that we actually use the right data and

03:21.840 --> 03:30.090
that we always have the ingredients property now the other issue we had is to pop over so the pop overhead.

03:30.100 --> 03:33.490
The issue that here we try to check if action is.

03:33.790 --> 03:39.280
But if we dismiss the pop over by clicking somewhere else we have no data at all.

03:39.280 --> 03:42.810
So this data object here is then not existent.

03:42.820 --> 03:44.040
It's undefined.

03:44.140 --> 03:47.510
So therefore calling action on it will not work.

03:48.670 --> 03:51.020
Well we can add a simple check here.

03:51.280 --> 03:57.220
If Deda if not data to be precise which will be triggered if it is undefined so if it is null.

03:57.490 --> 04:03.850
Well in this case I simply want to return nothing else to be done here and this should handle the case

04:03.850 --> 04:06.650
that we did dismiss it without clicking somewhere else.

04:06.730 --> 04:09.160
I'm also going to copy this to the shopping list.

04:09.160 --> 04:13.710
Pop over here at the beginning to check if data is present.

04:14.550 --> 04:20.350
And with that in place can now go back to the running application and read it let it recompile here.

04:20.730 --> 04:23.110
Let's now check the pop over first.

04:23.280 --> 04:26.660
This seems to work and let's now load the data.

04:27.710 --> 04:30.050
And now this doesn't have any ingredients.

04:30.110 --> 04:38.660
But we still can load it because we replaced the nonexisting ingredient array or property with the empty

04:38.660 --> 04:40.030
array at least.

04:40.040 --> 04:47.930
So if this does is working and now we get this working functionality of allowing the user to log out

04:48.140 --> 04:55.760
then to sign up and sign in and if the user is signed in or they sign up we redirect him.

04:55.790 --> 04:59.120
We're now able to store and fetch our data.

04:59.120 --> 05:02.280
So this is all working as we wanted it to work.

05:02.420 --> 05:07.520
Let's now also see if it works like that on a real device.

05:07.550 --> 05:11.670
So we're pushing it on a real device and see if we get the same behavior there.

05:11.750 --> 05:13.710
I'll be back with that in the next lecture
