WEBVTT

00:02.280 --> 00:07.560
The problem we're facing currently in the app is that we're not always seeing our latest place and that

00:07.560 --> 00:12.600
has something to do with a behavior by ionic pages which I covered earlier in the course.

00:12.600 --> 00:19.050
They are cached and therefore if I reload the app while someone in new app offer page the other pages

00:19.050 --> 00:25.500
haven't been visited yet and therefore they're not cached and hence if I add a new place here we don't

00:25.500 --> 00:32.430
have that problem we have otherwise because now if I submit this we actually reached cyber pages for

00:32.430 --> 00:39.540
the first time and they offer for our offers page and all the four to discover page NGO on and it will

00:39.540 --> 00:41.230
run when we visit them.

00:41.280 --> 00:48.300
If we however reload the app vaults we're on this page here on the Discover page and then we go to offers

00:48.300 --> 00:50.100
and then we add a new place.

00:50.100 --> 00:56.160
Then we have visited both discovered and offers and they're both in the cache because we never pop them

00:56.160 --> 00:57.870
off of our page stack.

00:57.870 --> 01:03.900
We only added new pages on top and hence when we add a new place here and we come back we don't see

01:03.900 --> 01:09.420
our place here or here because we're still using the old cached worsen and they have four engine and

01:09.420 --> 01:14.290
it never runs again and check the routing module in this cause if that doesn't tell you anything.

01:14.310 --> 01:23.290
I did cover it there so we'll have to make sure we fetch our data differently or we handle our updating

01:23.290 --> 01:24.870
mechanism differently.

01:24.870 --> 01:29.880
And then the routing module I just mentioned I showed you that you can use iron.

01:29.990 --> 01:37.870
You did enter and will enter to basically control when you fetch data here.

01:37.990 --> 01:40.410
I want to use a different approach and approach.

01:40.420 --> 01:44.490
I would actually recommend overly iron you did to enter approach.

01:44.650 --> 01:47.180
You can use subjects.

01:47.200 --> 01:51.550
Now what's the subject a subject is an object construct.

01:51.550 --> 01:58.020
You can import from our exchanges are extra as a dependency of angular you'll find it in your package

01:58.030 --> 02:04.840
Doug Jason File we are using the r x j ust package here and this is a package which is all about observable

02:04.870 --> 02:11.190
which in turn is a javascript construct that is about passing data around in streams of data.

02:11.200 --> 02:18.070
You could say now attached you'll find a link to a serious I made on YouTube where I explained more

02:18.070 --> 02:25.180
about that here will use it in one construct are extra us gives us is the so-called subject.

02:25.180 --> 02:30.850
Now this is simply an event a bitter where in one place we can emit any event and in another place we

02:30.850 --> 02:34.620
can subscribe to it and then do something when an event occurs.

02:34.880 --> 02:40.210
And this allows us to emit events let's say here in the places service and then the different pages

02:40.210 --> 02:45.790
we have an NGO in it we can set up a subscription and they offer NGO and then it doesn't need to run

02:45.790 --> 02:48.930
again because we only want to have one subscription at a time.

02:49.090 --> 02:55.630
But that subscription will keep ongoing even if the page is not visible or if it has been cached and

02:55.630 --> 03:00.230
therefore whenever something changes regarding that subscription and we emit a new place.

03:00.250 --> 03:03.160
So to say we'll get it automatically here.

03:03.310 --> 03:04.150
Now that's the theory.

03:04.150 --> 03:05.370
Let's see it in practice.

03:05.920 --> 03:14.110
So for the places service I will actually replace my places array here which displaces object and not

03:14.110 --> 03:18.920
just store an array in there but instead a new behavior subject.

03:19.090 --> 03:24.000
Now behavior a subject is a construct imported from that our extremes package.

03:24.010 --> 03:29.770
I just mentioned it's a special kind of subject that is exactly that event amateur that I described

03:30.100 --> 03:37.630
but that when we subscribe to it always gives us the latest previously emitted value so that we basically

03:37.630 --> 03:39.970
get the most recent data point.

03:40.060 --> 03:45.400
Even if we set up a new subscription instead of just future events because if we're listening to our

03:45.400 --> 03:52.940
places we immediately want to have the current list and not just future updates behavior subject is

03:52.940 --> 03:54.930
created theater with the constructor function.

03:54.980 --> 03:59.810
It's a so-called generic type which simply means that in typescript we can add these angled brackets

03:59.810 --> 04:05.830
here to describe which kind of data it will eventually give us and that will be that array of places.

04:05.870 --> 04:11.810
So you add this type annotation in these angled brackets and you therefore remove it here because the

04:11.810 --> 04:18.710
type of places now is behavior subject which will eventually give us an array of places and an array

04:18.710 --> 04:20.810
of starting places we had here.

04:20.840 --> 04:27.950
Well you can just cut that and add as an argument to the behavior subject constructor here with Dad

04:27.950 --> 04:34.560
we're creating a new behavior subject that will start with our default list of places now when we add

04:34.560 --> 04:41.470
a new place here we don't push it to the places array because places is no longer in the right.

04:41.500 --> 04:49.550
It's that that is our behavior subject and there we instead call next and next emits a new event that

04:49.550 --> 04:52.150
new event will basically be our new data.

04:52.190 --> 04:58.430
And of course that should be our old array of places with that new place added to it.

04:58.670 --> 05:02.570
And verdad we first of all need to get our current array of places.

05:02.570 --> 05:08.000
And for this will can we can change our gather here because we are not returning a copy of this places

05:08.030 --> 05:10.460
because this places is a subject now.

05:10.730 --> 05:15.960
Instead here we return this places as observable.

05:15.970 --> 05:22.040
This simply gives us a subscriber able object so that from outside we can subscribe to places.

05:22.040 --> 05:27.440
This will however not allow us to emit new events so new events can only be emitted here by directly

05:27.440 --> 05:32.600
accessing the subject not by accessing D observable we're returning here.

05:32.600 --> 05:35.890
So this is really just a subscription only part of the subject.

05:35.900 --> 05:39.450
You could say now we can get our places here day for.

05:39.450 --> 05:44.900
So this places without the underscore gives us that subscribe a little part though we could all use

05:44.930 --> 05:53.660
underscore this has underscored places has both the middle part with next and subscribed part with subscribe

05:54.170 --> 06:00.260
but we can also use the non underscore worship which is just that subscribe a part so subscribe works

06:00.260 --> 06:00.710
here.

06:00.710 --> 06:02.510
Next would not work here.

06:02.750 --> 06:08.750
Now enough of the talking I can subscribe here and in that subscribe function I pass a number function

06:08.750 --> 06:14.900
as an argument which will execute whenever we set up the subscription because it's a behavior subject

06:14.900 --> 06:20.330
and we therefore get the latest value and whenever a new value is emitted.

06:20.420 --> 06:24.200
Now of course I don't want to get all future updates.

06:24.290 --> 06:30.230
I only want to get the current array of places in here and for this we can use yet the never asks J

06:30.270 --> 06:37.760
as concept which our operators operators allow us to perform certain operations on our observable and

06:37.760 --> 06:44.810
a subject is just an observable we add such operators by calling the pipe method which exists on every

06:44.810 --> 06:47.540
observable and therefore all is on the subject.

06:47.540 --> 06:54.920
And here we can add as many operators as we want and I will add the take operator here which we need

06:54.920 --> 07:03.530
to import up here we import to take from our exchange S slash operators so you add this import at the

07:03.530 --> 07:04.430
top.

07:04.430 --> 07:07.320
So it's also coming from that our express package.

07:07.520 --> 07:11.510
And then here we can call Take 1.

07:11.580 --> 07:12.720
And what this means.

07:12.720 --> 07:18.660
I know it looks strange initially but what this means is Please have a look at my places subject which

07:18.660 --> 07:26.160
is this thing up there which in the end holds or wraps our array of places and please subscribe to it

07:26.880 --> 07:32.040
but only take one object and then automatically cancel the description.

07:32.040 --> 07:38.070
So did I only get the current latest list of places that I don't listen to future places.

07:38.070 --> 07:43.680
Therefore here in this function I pass to subscribe we get that places array and places here is now

07:43.680 --> 07:48.930
not my place as property but a local variable or an argument that I can use instead of this function

07:48.930 --> 07:50.510
passed to subscribe.

07:50.850 --> 07:53.410
And in there I can they offer an alcohol.

07:53.420 --> 08:01.530
This place is next and basically omit places which is now just an array of places where I can call comcast

08:01.560 --> 08:05.710
to add a new place on it and that would be my new place.

08:05.760 --> 08:12.000
Now Comcast is a default javascript array method which takes the old array on which we call it adds

08:12.000 --> 08:16.410
a new place and returns a new array and that new Array is what we then emit.

08:16.470 --> 08:22.560
With the help of next I know that this whole observable stuff can be really intimidating and therefore

08:22.560 --> 08:24.810
definitely check out that attached.

08:25.050 --> 08:30.330
Serious I mentioned if you want to learn more about that it does in the end allow us to write very elegant

08:30.330 --> 08:36.220
code that ensures that our application stays in sync and is updated correctly everywhere.

08:36.240 --> 08:41.340
Now of course we're not done yet though I'm emitting a new event where I take my old places into account

08:41.640 --> 08:43.170
and we've got a couple of errors here.

08:43.170 --> 08:50.010
For example when I find a specific place and I also of course need to subscribe to that in the parts

08:50.010 --> 08:51.000
of my application.

08:51.090 --> 08:56.820
So in the components and pages that need are a place array and we'll finish all that up in the next

08:56.820 --> 08:57.210
lecture.
