WEBVTT

00:02.190 --> 00:09.330
Let's continue with the Ionic grid layout because that Ionic grid is a crucial component that helps

00:09.330 --> 00:16.410
you with composing your complex user interfaces and with composing, I mean ordering and layout in them.

00:17.160 --> 00:24.680
The Ionic grid layout is all about three core Ionic components which you combine together and it uses the

00:24.680 --> 00:27.810
CSS flexbox specification under the hood,

00:27.910 --> 00:33.510
so in case you know see as as flexbox, by the way always a concept worth learning, for example my

00:33.510 --> 00:39.150
Complete CSS Guide, if you know of that, then you have a good idea of what the grid does under the

00:39.150 --> 00:45.350
hood. It abstracts the complexity away from you though, you don't have to write any CSS code to

00:45.350 --> 00:46.360
use the grid.

00:46.520 --> 00:48.180
Now how does it work?

00:48.790 --> 00:52.510
As I mentioned, it's all about three components working together.

00:52.690 --> 01:01.090
We always have this ion-grid component that wraps the entire area or that entire component tree which

01:01.090 --> 01:03.880
you want to layout with the help of the grid.

01:04.000 --> 01:09.670
Now it is important to highlight that you don't have to use the Ionic grid at all and you certainly

01:09.670 --> 01:12.580
don't have to use it on every page you're creating,

01:12.880 --> 01:18.790
you just want to use it whenever you want to layout items, not just top to bottom taking the full width

01:18.790 --> 01:24.490
of the screen but when you want to restrict the width, when you want to have multiple items sit next

01:24.490 --> 01:27.140
to each other or anything like that.

01:27.310 --> 01:34.930
Now in your grid, you then have a couple of ion-rows because a grid thinks in rows. You can have as

01:34.930 --> 01:38.710
many rows as you want and they don't have to be of equal height,

01:38.710 --> 01:44.170
indeed you don't set the height explicitly, instead the height is determined by the content that goes

01:44.170 --> 01:48.310
into the rows and each row is just as tall as its highest

01:48.310 --> 01:56.070
child. You don't place your content right into a row though, instead the grid also requires columns to

01:56.070 --> 01:57.940
turn it into a grid.

01:58.140 --> 02:03.570
And now ion-col, that is actually the component which will then hold your content you want to place in

02:03.570 --> 02:10.590
your grid because it's the combinations of rows and columns that makes up how your content is structured.

02:10.590 --> 02:18.630
It allows you to structure your content across multiple columns and multiple rows and the columns can

02:18.630 --> 02:20.140
be sized by you.

02:20.160 --> 02:25.590
We already did this a bit in this course but now we'll learn all the details about how you can assign

02:25.590 --> 02:32.670
different sizes for different device screens, so let's have a look. In our running application on the

02:32.670 --> 02:36.350
discover places page here, we are using grid already.

02:36.420 --> 02:43.470
This is our mobile view but if I untoggle this here and I go into the normal desktop view and I increase

02:43.470 --> 02:49.080
the site width here a little bit, you'll see that this image becomes very large but still it does not

02:49.080 --> 02:55.170
take the full width of the page because we're already using a grid here. We're using a grid which we

02:55.170 --> 03:01.050
construct here with ion-grid and then ion-row and inside of the ion-row, we have a column and in that

03:01.050 --> 03:06.630
column is our actual content and we control the size by setting a default size which you by the way

03:06.630 --> 03:09.810
could omit because 12 is the default.

03:09.930 --> 03:11.060
Why is it 12?

03:11.100 --> 03:18.420
Because the Ionic grid thinks in 12 columns you can use to control the width of your items and by

03:18.420 --> 03:24.330
default, if you only have one column, that will automatically take all 12 columns that are available,

03:24.870 --> 03:30.300
if you have more than one column in one row, they will automatically split that into six columns each.

03:30.330 --> 03:32.360
Here we have only one column in that row,

03:32.550 --> 03:37.530
if you scroll down here we close that row and the column we close is still the same column we open up

03:37.530 --> 03:44.700
here and then you can control the size for different breakpoints with these responsive attributes that

03:44.700 --> 03:48.750
use the built-in breakpoint definitions.

03:48.750 --> 03:53.890
Now let's explore our different options here with a little dummy grid

03:53.880 --> 03:59.010
and for that, I'll go to offers and then a new offer page because here I have a blank screen which we

03:59.010 --> 04:05.160
will later fill with some useful content but for now, this is perfect for playing around with the grid,

04:05.270 --> 04:07.060
so let's do just that.

04:07.170 --> 04:11.950
Let's go to offers, new offer and then there in the content,

04:11.970 --> 04:14.600
let me remove that padding and in here,

04:14.610 --> 04:21.120
let's add an ion-grid. Now as I mentioned, the ion-grid then needs at least one ion-row and in that ion-row,

04:21.120 --> 04:23.570
you add your column.

04:23.790 --> 04:29.850
Now to make it a bit easier to see which size a column occupies,

04:29.970 --> 04:36.420
I'll go into the scss file here and give the ion-col selector here some styling.

04:36.420 --> 04:42.990
Now since we're using Angular here, the styles we assign to ion-col here in this scss file will only

04:42.990 --> 04:46.590
apply to ion columns used in this component.

04:46.590 --> 04:55.040
Now here I want to give them a border of one pixel solid and red. If I do that and I then also add some

04:55.040 --> 05:06.890
content here like row one, column one, then let's save this and let's wait for this to reload, login,

05:09.130 --> 05:14.520
offers and here it is and by the way to speed this up a little bit,

05:14.650 --> 05:21.470
I'll go to my auth service and set user is authenticated to true so that we are logged in by default

05:21.520 --> 05:27.540
and if I now reload, we automatically start on this page and I don't have to navigate back here.

05:27.580 --> 05:33.940
So what we can see is that by default, this takes the full available width of this page, just a little

05:33.940 --> 05:40.360
bit of padding which this grid automatically adds and which you by the way can get rid of by simply adding

05:40.570 --> 05:42.900
no-padding

05:42.970 --> 05:50.200
and with that if I now save this, you will see it reloads here and now it actually takes the full width

05:50.200 --> 05:51.760
and there is no padding left.

05:51.970 --> 05:57.280
So that is a setting you can add in case you want to take that full available space, for example for

05:57.280 --> 05:59.940
showing a big image at the top of the page,

06:00.010 --> 06:04.930
I will remove that because I want to have a padding but still what we can see even with that padding

06:05.020 --> 06:10.410
generally, this one row with that one column takes the full width and that is what I meant.

06:10.450 --> 06:16.480
If you add an ion column, by default it takes the full available 12 columns.

06:16.570 --> 06:19.530
Now with that, let's actually add 12 columns.

06:19.600 --> 06:22.800
So let's add a second column here, in this first row still,

06:22.810 --> 06:28.270
we don't add a new row because in that same row, I want to have a new column and you can have different

06:28.270 --> 06:35.900
columns in every row. Let's add column three, four and so on and I'll quickly fill this up all the way

06:36.020 --> 06:42.710
to 12, so that we can see all 12 columns here in action,

06:42.750 --> 06:47.010
so here's 10, 11 and 12.

06:47.020 --> 06:55.810
Now with that saved, what you will see as this reloads is that here we have our 12 columns sitting next

06:55.810 --> 07:02.110
to each other in that row and they take up the full width and they distribute the available space equally.

07:03.340 --> 07:14.120
If we add a new column, a 13th column here, that actually still fits in but we're now reaching a point

07:14.120 --> 07:20.990
where the grid is not optimized for and where also your response of breakpoints will not be usable in

07:20.990 --> 07:21.930
a perfect way,

07:21.980 --> 07:29.150
so you should restrict yourself to twelve columns and to be honest, you very rarely have layouts where

07:29.150 --> 07:32.980
you would need more than 12 items in the same row.

07:33.080 --> 07:39.890
Now of course if you go to a small device, you see here we get a problem because we still try to squeeze

07:39.960 --> 07:47.990
12 items into one row and you can see that automatically, a break is added here and the line wraps at

07:47.990 --> 07:54.770
the point of time where it can't shrink the items anymore since the lowest amount that it can shrink them which

07:54.770 --> 07:56.100
it does automatically

07:56.150 --> 07:57.970
is that the row fits in there,

07:57.970 --> 08:03.980
the word row and it wouldn't be able to shrink that anymore because it can't wrap it into a new line

08:04.340 --> 08:07.760
and therefore it now starts wrapping the items into new lines,

08:07.880 --> 08:12.910
still it then takes up the full width. So this is how this generally works with the columns thing

08:12.920 --> 08:19.550
but of course you rarely use twelve columns and you've got many options for configuring how broad your

08:19.550 --> 08:25.400
columns should be in case you're using less than 12 columns because the far more common use case is

08:25.400 --> 08:30.770
not that you want to have twelve items sit next to each other but that you have a couple of items that

08:30.770 --> 08:33.030
should be broader than one column.
