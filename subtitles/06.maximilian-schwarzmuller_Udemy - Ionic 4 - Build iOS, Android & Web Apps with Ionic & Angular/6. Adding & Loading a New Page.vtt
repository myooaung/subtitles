WEBVTT

00:02.250 --> 00:07.800
I did spend a lot of time talking about how Angular and Ionic work together but it is super important

00:07.920 --> 00:14.100
to understand that and to be aware of how the two parts do work together,

00:14.130 --> 00:16.650
now it's time to get our hands dirty.

00:16.680 --> 00:19.580
We do have that home component here as a default

00:19.710 --> 00:23.480
and I will actually delete that and build an app from scratch.

00:23.760 --> 00:26.840
Now for that, I'll open a new tab in my terminal,

00:26.940 --> 00:32.880
the other tab should be kept open because this process needs to be kept running,

00:32.910 --> 00:38.550
it will automatically watch your code for changes and rebuild and reload the app when it changes. In

00:38.550 --> 00:39.360
the second window, 

00:39.360 --> 00:43.580
we can now use the Angular CLI to generate components,

00:43.650 --> 00:50.700
so with ng generate component or shortcut, ng g c, you can generate a new component in your app.

00:50.700 --> 00:51.990
You can also do this by hand

00:51.990 --> 00:54.020
but this of course is faster.

00:54.060 --> 00:59.420
Now I want to build a very simple recipe book implementation,

00:59.520 --> 01:05.280
I basically want to have a list of recipes and if we tap one, we can view the details about this recipe.

01:07.200 --> 01:11.850
Therefore I'll add a new component which I'll call recipes,

01:11.850 --> 01:16.110
however I want to load this as a page,

01:16.140 --> 01:22.410
so I want to basically use the Angular Router to replace the entire content of the current page, of what

01:22.410 --> 01:26.100
we currently see on the page with the content of this component.

01:26.130 --> 01:32.910
Now obviously, pages in Angular are just components but we can also use the Ionic CLI to generate

01:32.910 --> 01:39.800
it, Ionic generate and then if we hit enter, you can actually select from different things you can build.

01:39.870 --> 01:43.020
You can also build a component there and under the hood,

01:43.020 --> 01:48.620
this just uses ng generate but you do have a special page element.

01:48.630 --> 01:55.170
you can select here. So I will choose page and then I'll give it a name, which is recipes and this now

01:55.170 --> 01:58.320
executes ng generate page recipes,

01:58.380 --> 02:04.230
this is a new command added by Ionic, so that's another part where it kind of adjusts the default behavior

02:04.290 --> 02:10.200
of the Angular project and it gives us this recipes folder and now the special thing is the naming here

02:10.560 --> 02:17.070
and that it automatically gives us a module which sets up a route for these recipes page so that we can

02:17.070 --> 02:24.480
load the entire module lazily and actually, it even adjusted the app routing module already to include

02:24.480 --> 02:30.340
the path recipes where it does include lazy loading for that recipes module.

02:30.570 --> 02:31.840
So that's very convenient,

02:31.890 --> 02:38.100
we get lazy loading for our pages out of the box with this command which is why I'll use it for the creation

02:38.100 --> 02:41.000
of new components that will be used as pages.

02:41.010 --> 02:46.590
Now I did delete the home component, so I will also delete that path in the routing setup so that I

02:46.590 --> 02:52.380
only have that root path where I now want to redirect to recipes and then the recipes path where I do

02:52.380 --> 02:57.510
have my lazy loading in place that points at the recipes page module which should be loaded when we

02:57.510 --> 03:03.110
try to reach that path here and in the recipes module, we simply rendered the recipes page component.

03:03.720 --> 03:09.840
The recipes page component is a normal Angular component though and we can use it as a normal Angular

03:09.840 --> 03:18.140
component, in the recipes.page.html file we get to this setup out of the box by Ionic, we got our

03:18.180 --> 03:23.580
ion-header with a toolbar and a title, I'll set the title to recipes and we have the ion-content with some

03:23.580 --> 03:30.550
padding added to it, I'll get rid of it for now and add a paragraph where I say recipes page works.

03:30.870 --> 03:37.020
Now this page is loaded through the Angular Router, as you can tell we're using the normal Angular router module

03:37.020 --> 03:41.930
here in the app routing module and that is then included here in the app module,

03:42.060 --> 03:43.670
so nothing special there.

03:43.740 --> 03:46.750
One special thing can be seen in the app component though,

03:47.100 --> 03:53.310
there we have that ion-app-wrapper which I mentioned should be there around your entire application

03:53.640 --> 03:59.220
and therefore the root component of our application of course is the right place to include it

03:59.450 --> 04:05.340
and in there, we have this ion-router-outlet. Now that is interesting because in the normal Angular

04:05.340 --> 04:08.710
app, we would have just a router outlet.

04:08.730 --> 04:15.780
Now let's go with a router outlet and save all files and then back here, the home path doesn't exist anymore

04:15.780 --> 04:24.090
so let's reload the main path, it loads recipes and I see recipes here at the bottom now,

04:24.210 --> 04:29.830
so this doesn't look right, does it? The reason for that is the way we load this.

04:29.840 --> 04:35.600
The router outlet can be used theoretically because again and I will hammer this into your head,

04:35.600 --> 04:42.380
this is a normal Angular project and therefore we can use normal Angular features like Angular's routing

04:43.160 --> 04:50.390
but to get nice page transitions and the page being displayed correctly on the screen which requires

04:50.390 --> 04:57.230
things like the CSS height consumption of the page being set to 100% and so on, to get all of

04:57.230 --> 05:05.090
that, you should use the ion-router-outlet which in the end wraps the Angular Router outlet and adds some

05:05.090 --> 05:06.820
extra stylings and features

05:07.040 --> 05:14.120
and when you do that, as this page reloads, you will see that all of a sudden, this looks correct.

05:14.150 --> 05:20.720
So both works but ion-router-outlet is built to be used with Ionic-driven pages,

05:20.720 --> 05:28.620
so with Angular components that create an Ionic page by having a header, a content and so on.

05:28.880 --> 05:33.110
So ion-router-outlet it is, we'll use ion-router-outlet in this course

05:33.110 --> 05:33.530
therefore.
