WEBVTT

00:02.480 --> 00:11.110
On our offers page where I output my offer item India from which we manage and HERE READ NOW OUR DATE

00:11.110 --> 00:11.980
IS HARD.

00:12.220 --> 00:14.170
IT'S JUST dummy date which were all raised.

00:14.170 --> 00:21.100
Returning gets dummy date because we're not really using our place and here our place data now that

00:21.100 --> 00:22.500
can change of course.

00:22.660 --> 00:28.720
A place of course has a date in our application now and therefore here instead of get timely data we

00:28.720 --> 00:32.650
can just use place as we use it for our data like the title too.

00:32.650 --> 00:38.860
Excuse me it's called offer and there we have a way Little from which as formidable as a date.

00:38.860 --> 00:44.500
And we have a whale Q and A with this simple change will lose the place we lost.

00:44.500 --> 00:50.570
Edit because again it's only managed in memory but now we're displaying the right dates here at least.

00:50.890 --> 00:57.460
The more interesting part that I want to focus on instead loading spinner for dead I will simulate that

00:57.610 --> 01:01.680
creation off that place takes a little bit longer.

01:01.850 --> 01:07.000
So when we add a place here of course right now everything happens instantly because it happens in memory

01:07.000 --> 01:08.020
only.

01:08.050 --> 01:15.910
Now let's simply fake that it takes a bit longer by adding set time out here inside of that function

01:15.910 --> 01:19.600
where we get our current list of places in the place a service.

01:19.930 --> 01:27.970
Let's wait for one second and execute this code inside of the function that fires after this one second

01:28.090 --> 01:34.240
so same logic as before but the creation takes a bit longer and later this will be more realistic once

01:34.240 --> 01:37.370
we add a real age to DP network request.

01:37.380 --> 01:42.100
Now if I enter any data here doesn't really matter just any data.

01:42.100 --> 01:49.210
As noted we can add this as a new place we see it occur here after one second.

01:49.270 --> 01:53.750
Of course not bad but not ideal or maybe not what we want.

01:54.820 --> 02:00.000
You learned what you can do in such cases because we're already doing it on the off page.

02:00.160 --> 02:06.070
You just learned that this is actually something I like to call you I state because it only affects

02:06.070 --> 02:07.360
this page.

02:07.360 --> 02:11.300
The same would be the case just as a side note for is log in on the off page.

02:11.320 --> 02:13.490
This affects what we display on the off page.

02:13.540 --> 02:14.690
What our button says.

02:14.710 --> 02:18.830
What's in the title ends on does not affect other parts of the app.

02:18.850 --> 02:20.140
Now we need a similar.

02:20.200 --> 02:27.130
You will I'd state thing on the new offer page here when we're trading on you offer.

02:27.130 --> 02:37.050
I want to show some loading spinner or maybe the same loading overlay as I'm showing it on my off page.

02:37.270 --> 02:41.220
We can of course use the same approach day for in the new offer page.

02:41.230 --> 02:52.990
I will inject a news service and that will be the loader controller which is the loading controller.

02:52.990 --> 02:57.850
Maybe we should name the property loading controller too then though that does not matter and loading

02:57.850 --> 03:02.250
controller is imported from at a ionic angular.

03:02.260 --> 03:10.470
Now with that inject it here and on create offer of course before we call at plays we can do this.

03:11.380 --> 03:19.980
Loading controller create until a message creating plays for example

03:22.990 --> 03:29.050
and then this gives us a promise we get our loading element and in this function here I want to use

03:29.050 --> 03:32.620
that loading element to present it so to show it on the screen.

03:32.680 --> 03:34.890
Now we just need to know when to hide it.

03:34.960 --> 03:37.130
And that of course should be the case once to places.

03:37.200 --> 03:46.240
Edit now to know about that and the place a service when I have at place we can simply return because

03:46.270 --> 03:49.310
it's a bit different than in the off page and you off page.

03:49.540 --> 03:54.410
I managed is loading as a prop. because I set my time out in here.

03:54.490 --> 04:00.400
Now that time out or departs that takes longer isn't a different file it's in the place service so to

04:00.400 --> 04:02.650
know when this is done.

04:02.680 --> 04:08.530
I want somebody you return this year and I will actually not subscribe in here because that will consume

04:08.590 --> 04:10.540
your observable here.

04:10.630 --> 04:17.500
Instead I will add a new operator the tap operator which is imported from our extra as operators.

04:17.510 --> 04:23.860
Here it is and that allows us to execute some action in this observable operator chain that will not

04:23.860 --> 04:29.820
change today to we're passing through the chain but that will also not complete the observable subscribe

04:29.830 --> 04:31.600
on the other hand will complete it.

04:31.630 --> 04:37.570
So if I want to tap into the observable from a of place that will not be possible after subscribe and

04:37.570 --> 04:45.190
since I want to tap into it from inside my new offer page and I want to return the observable here I

04:45.200 --> 04:51.750
therefore have to get rid of subscribe here and run that code instead of the function you pass to tap

04:51.750 --> 05:00.480
your tap will in my case here receive the places that does not change.

05:00.490 --> 05:06.490
So we get the same data we would get in the subscribe function but it will not stop the observable.

05:06.490 --> 05:15.380
So we still execute that code but now we return to full observable here and they are 4 in our offers.

05:15.400 --> 05:18.120
Excuse me in our new offer page here.

05:18.280 --> 05:23.450
This places service at place now gives us an observable to which we can subscribe.

05:23.840 --> 05:30.940
And I'm only interested in when this fire is because this means we're done because when I'm done here

05:31.270 --> 05:37.960
then I will reset my form and navigate because then I'll alter the list dismissed as loading element

05:38.400 --> 05:43.840
where it is I need to move dead entire logic into this then block where a half does loading element

05:44.140 --> 05:48.710
so didn't the subscriber block I can actually dismissed it.

05:49.080 --> 05:57.120
Now this logic almost works but it has one flaw this time out here will not block or delay the completion

05:57.120 --> 05:58.230
of the observable.

05:58.290 --> 06:03.600
It will execute as often as timeout but subscribe will be called or the function we pass to subscribe

06:03.840 --> 06:06.390
will be called even before this is done.

06:06.630 --> 06:08.130
And what can we do.

06:08.190 --> 06:13.980
Thankfully there is a delay operator which we can use to fake this delay is all they imported from our

06:13.980 --> 06:25.190
x j as operators and delay can be added here and we added delay in milliseconds like 1000 and therefore

06:25.190 --> 06:30.470
we can now get rid of set time out here because now the entire observable chain will essentially pause

06:30.740 --> 06:31.850
for one second.

06:31.850 --> 06:37.400
So we have the same effect as before but now on the whole observable net for now when we add a new place

06:37.410 --> 06:41.770
so I go here we add this place

06:44.990 --> 06:49.120
just like this.

06:49.170 --> 06:55.230
Now you see we have the nice loading spinner before we enter this page again using that observable magic

06:55.230 --> 06:59.970
which can be intimidating at the beginning I know but which really isn't that hard.

07:00.030 --> 07:06.300
It's just a nice way of funneling data through a chain of steps and making sure that one step executes

07:06.420 --> 07:07.630
after another.

07:07.800 --> 07:11.370
And therefore this is now another way of managing our local UI state.

07:11.370 --> 07:17.040
You could say we're managing it not directly in this component not through a property at least.

07:17.190 --> 07:24.660
But we do manage it in our new offer a component when it comes to manipulating the UI and when it comes

07:24.660 --> 07:30.180
to defining when to do what we present are a loading element here when we start sending the data we

07:30.180 --> 07:31.030
clear it here.

07:31.080 --> 07:32.340
Once we're done with it.

07:32.340 --> 07:36.500
So we manage that state in this component and not somewhere else.

07:36.510 --> 07:42.210
Now of course you can discuss where exactly that state forward in you all four pages managed is it here

07:42.210 --> 07:47.530
and the new all four page or since the data actually is handled in the play service is the state managed

07:47.540 --> 07:48.320
there.

07:48.450 --> 07:53.930
I'll argue both is the case but what happens on this page that we showed a loading spinner and that

07:53.930 --> 07:58.230
the conditions for when we show it in my opinion clearly is only managed here.

07:58.230 --> 08:00.800
The more important takeaway is that we do both here.

08:00.870 --> 08:05.690
We do save our place data and we also change something here on the UI.

08:05.760 --> 08:07.860
Until that saving process is done.
