WEBVTT

00:02.190 --> 00:04.290
Let's add an Angular service

00:04.290 --> 00:09.120
and again, I do assume that you know what Angular services are and why we would use them.

00:09.480 --> 00:13.840
We can generate it with the Ionic generate command again, if you hit enter,

00:13.890 --> 00:17.940
you'll see that in there you can select a service,

00:18.030 --> 00:23.280
of course you can also type Ionic generate service and then the name or the path of the service

00:23.280 --> 00:25.400
but for now I'll go with the dropdown.

00:25.530 --> 00:28.830
So now I'm asked for the name or path of the service

00:28.830 --> 00:31.140
and I want to create a recipes service,

00:31.140 --> 00:36.470
so I'll create it in the recipes folder and then the name of the service will also be recipes.

00:36.480 --> 00:38.300
So recipes/recipes

00:38.310 --> 00:39.170
it is

00:39.570 --> 00:44.590
and this gives me a new recipes service in the recipes folder.

00:44.670 --> 00:50.350
Now this automatically gets @injectable provided in route which ensures that this is provided

00:50.370 --> 00:57.090
application-wide, we can use the same instance of the service in any component, any page of the entire

00:57.090 --> 00:57.750
app

00:57.750 --> 01:02.850
and of course here it's important that we use the same instance, so that if our recipes data would change,

01:03.150 --> 01:09.660
it is reflected in all components and not just in components using that specific service instance

01:09.660 --> 01:12.030
and therefore, now this is our service.

01:12.030 --> 01:19.530
I will now take my recipes I have set up in the recipes page and cut them from there and instead, add

01:19.530 --> 01:22.740
them here to the recipes service.

01:22.860 --> 01:28.130
Now having the recipes in here is of course nice but now we need them back in the recipes page,

01:28.140 --> 01:30.820
right, now how do we do that?

01:30.820 --> 01:36.010
Well it is a public property so we could just access it like this,

01:36.010 --> 01:39.250
however I will turn it into a private property

01:39.280 --> 01:47.120
so that we can't just access it like this and instead I'll add a method which I'll name getAllRecipes,

01:47.480 --> 01:50.690
you can name it whoever you want and there, I will return

01:50.690 --> 01:57.620
let's say a copy of that recipe array, so that if we then would edit the array returned by this method

01:57.800 --> 02:02.250
inside of the component, we wouldn't edit the original array

02:02.360 --> 02:08.660
and this is simply related to how arrays and objects work in Javascript and that they are reference

02:08.660 --> 02:15.110
types and not primitives. Attached, you find an article and video where I dive a bit deeper into that

02:15.110 --> 02:16.550
in case you're interested.

02:16.670 --> 02:21.560
So here I'll create a copy with the spread operator by pointing at this recipes.

02:21.560 --> 02:28.850
Now what this does is it pulls all the elements of this array out of it and then adds it to a new array

02:28.970 --> 02:34.220
down there and then I return this new array which is a perfect copy of the old array, not of the objects

02:34.220 --> 02:39.100
in the array but of the array itself at least. Now

02:39.270 --> 02:46.710
I can also already add a getRecipe method which requires a recipeId as an argument and this will

02:46.710 --> 02:49.310
return a single recipe for that ID.

02:49.440 --> 02:55.830
So here, I want to return this recipes and then I can use the find method which is a default Javascript

02:55.830 --> 03:02.370
method I can use on arrays and this method takes a function which will execute on every element in the

03:02.370 --> 03:08.490
array and then if this function returns true, we basically tell find that this is the object we were

03:08.490 --> 03:14.100
looking for and it will stop execution and not run find on any other element in the array and give us

03:14.100 --> 03:15.270
back that element

03:15.330 --> 03:22.320
it was running on instead. So the function I pass here gets the recipe as an input because again, it executes

03:22.650 --> 03:24.860
this function on every element in the array

03:24.960 --> 03:26.390
and this is an array of recipes,

03:26.400 --> 03:30.120
so what we get in every function execution is a single recipe

03:30.480 --> 03:35.430
and there, I want to return true if this is the recipe I'm looking for and false otherwise

03:35.630 --> 03:41.010
and therefore here in this condition, I will compare the ID of the recipe I'm looking at with the recipeId

03:41.010 --> 03:42.510
I got as an argument

03:42.510 --> 03:47.980
and if these are equal, then I have the recipe I want the return and then I do return it.

03:48.000 --> 03:55.260
Now here just as with the array, I will create a copy of that object by wrapping this whole call here

03:55.680 --> 03:59.680
in curly braces and then I can use the spread operator here as well

03:59.730 --> 04:05.520
and this will pull out all the properties of the return recipe object and add them into a new object.

04:06.700 --> 04:12.400
So this is now the service we can use in the recipes page and the recipe detail page

04:12.400 --> 04:16.960
and this is already Angular's state management in action.

04:17.020 --> 04:24.580
It isn't very complex here but writing a similar logic in your vanilla Javascript app would already

04:24.580 --> 04:30.130
be more complicated and it will become more complicated throughout the course where we will have more and

04:30.130 --> 04:32.800
more complex state management.

04:32.800 --> 04:38.050
So now the recipe service is what I want to use in my components and as you know, we can get access to

04:38.050 --> 04:41.200
a service by injecting it into a component.

04:41.200 --> 04:49.240
So here in the recipes page component, I want to inject the recipes service and for that, you need to

04:49.240 --> 04:57.070
define the type here, recipes service and you need to import that from your recipe service file, by the

04:57.070 --> 04:58.600
way in the recipe service,

04:58.600 --> 05:01.800
you should also make sure you're importing that recipe model,

05:01.870 --> 05:06.850
so let's add this, we can click the light bulb here to get help with that.

05:06.850 --> 05:11.670
So the recipe model is required because we're referencing it here in the service but back to the page

05:11.680 --> 05:17.440
now. In the page I'm now injecting the recipes service and I'm using that Typescript shortcut where I

05:17.440 --> 05:23.920
automatically assign the argument I'm getting here to a private property of this entire class, so that

05:23.920 --> 05:29.950
I can use the recipe service anywhere in the class and not just in the constructor. ngOnInit then

05:30.040 --> 05:33.140
always is a great place for initialization work,

05:33.160 --> 05:37.080
so here, I want to call recipe service getAllRecipes,

05:37.210 --> 05:43.630
this returns an array of recipes and I want to store this in this component and therefore here, I will re-add

05:43.630 --> 05:48.090
add my recipes array like this

05:48.300 --> 05:52.530
but initially this is undefined and it will be set here.

05:52.530 --> 05:55.320
So I will set recipes, this recipes,

05:55.320 --> 06:02.370
so my local property here equal to the recipes returned by getAllRecipes.

06:02.570 --> 06:02.900
Now what

06:02.920 --> 06:09.970
all that gives us is that if I now save this, it will recompile and give us the exact same look as before

06:12.750 --> 06:18.420
but now we'll also be able to tap into a single recipe on the recipe detail page.

06:18.420 --> 06:19.550
Let's do that next.
