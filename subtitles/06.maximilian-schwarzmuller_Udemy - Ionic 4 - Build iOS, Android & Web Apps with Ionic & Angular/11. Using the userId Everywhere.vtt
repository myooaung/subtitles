WEBVTT

00:02.480 --> 00:09.440
So we spent quite some time on managing all that user I.D. stuff and it can look very complicated to

00:09.440 --> 00:15.200
do it like this huge advantage simply is that you now have a very dynamic system where anywhere in your

00:15.200 --> 00:20.570
application you can subscribe to your user I.D. to always get the latest user I.D. and the same for

00:20.570 --> 00:25.580
the general information whether a user is authenticated or not which is the more important thing for

00:25.580 --> 00:31.460
us if we have a look at our off guard we're already using that user is authenticated observable here

00:31.970 --> 00:33.460
or not.

00:33.740 --> 00:35.030
We're actually not using it.

00:35.030 --> 00:40.670
We're reaching out to user is authenticate it and I'm using it like we're a boolean but it is no boolean

00:40.670 --> 00:41.370
anymore.

00:41.400 --> 00:48.190
Instead there's not all the returns and observable hence we should adjust our guard as well here.

00:48.230 --> 00:54.500
I do return users authenticated which is fine because you may return an observable that yields a boolean

00:54.560 --> 00:57.560
which is just what user is authenticated does.

00:57.560 --> 01:06.920
But if I want to redirect here well then I can just add a pipe method call here at the Take one operator.

01:06.950 --> 01:08.210
That's important.

01:08.210 --> 01:13.460
So import that from our exchange as operators because you don't want to set up an ongoing subscription

01:13.730 --> 01:17.720
that leads to strange redirection later when your app runs.

01:17.720 --> 01:21.050
Instead you want to check the off state at the time.

01:21.050 --> 01:29.690
This guard runs and then they're after all at the tap operator imported from our exchange as operators

01:29.870 --> 01:30.830
as well.

01:30.980 --> 01:33.910
And that tap operator there.

01:34.130 --> 01:36.500
I want to redirect if we're not authenticated.

01:36.500 --> 01:40.400
So here all get is authenticated or whatever you want to name it.

01:40.400 --> 01:47.210
And then here I add my f check and check if we're not authenticated.

01:47.220 --> 01:53.400
Dan I want to navigate by you are L and I'll still let this observable do its job thereafter because

01:53.480 --> 02:00.100
we can load method automatically subscribes to it and finds out whoever we are offending had or not.

02:00.150 --> 02:07.830
So if I save this the result would actually be that if this reloads and I manually try to access slash

02:07.830 --> 02:16.950
play says taps offers I get redirected to off because our observable excuse me our guard using that

02:16.950 --> 02:26.370
observable now still does its job if I do try to log in here we get redirected though and we are allowed

02:26.370 --> 02:29.840
to access this page because now I am authenticated.

02:30.060 --> 02:33.260
And now let's all quickly try adding a new place.

02:33.480 --> 02:35.330
Does this work.

02:35.370 --> 02:46.280
It should let's pick an availability date set a prize select a location on the map let's say let's try

02:46.290 --> 02:54.130
it taking an image we'll actually use to match picture here chose Munich and I'll try adding this

02:58.650 --> 02:59.730
and this looks quite good.

02:59.760 --> 03:04.330
Let's check it on firebase to be sure that our user I.D. really was added there.

03:07.420 --> 03:09.280
And this looks like our user I.D..

03:10.030 --> 03:17.080
Now if I go to the Discover page indeed now under book places I don't find that place but the two places

03:17.080 --> 03:20.850
which have that dummy I.D. which I hardcoded before.

03:21.130 --> 03:28.570
Therefore if I now visit this and I book that on some random date Max shoe arts and a click book here

03:29.410 --> 03:30.880
booking also seems to work.

03:30.880 --> 03:33.670
Let's check our bookings.

03:33.670 --> 03:42.600
I'm not sure if it work to conceive their under bookings it's there though but I'm probably trying to

03:42.600 --> 03:49.740
extract my bookings incorrectly on that bookings page so let's quickly go to the bookings page here

03:51.780 --> 04:00.710
and let us see what's wrong with how we fetch our bookings yeah in fetch bookings and a booking service.

04:00.730 --> 04:03.800
I'm still using the user I.D. incorrectly.

04:03.900 --> 04:10.850
Are of course is also dead observable so user I.D. here should be merged with that observable chain

04:10.850 --> 04:11.550
down there.

04:11.560 --> 04:22.280
So again at my pipe method and then switch map and here I get my user I.D. and I want to return this

04:22.730 --> 04:29.330
HDP request here where I need or where I use that user I.D. I'm now getting from my user I.D. observable

04:29.870 --> 04:36.590
Of course if that should not be set for whatever reason then I'll do the same I did before and throw

04:36.590 --> 04:47.600
a new error user not found otherwise I returned as get request and now ask before I merge my obvious

04:47.600 --> 04:58.160
steps in the pipe method I had before into this no and therefore this should not work if I now safeties

04:58.910 --> 05:04.740
and we wait for his app to reload we already see one annoying thing I always have to log in again we'll

05:04.750 --> 05:08.990
change this soon if I now log in though and I go to my bookings

05:11.790 --> 05:16.960
I should also return the observable here in fetch bookings of course.

05:16.980 --> 05:21.480
So let's fix this that you return this new observable chain.

05:21.750 --> 05:24.150
And now if I try logging in again

05:27.660 --> 05:32.890
now it is looks way better but now cancel this all looks good.

05:32.910 --> 05:34.770
All that was deleted on firebase.

05:34.770 --> 05:36.960
So this is all looking good and seems to work.

05:36.960 --> 05:42.450
The big issue we have is that whenever we reload the app we lose our state and we start on the log in

05:42.450 --> 05:43.500
page again.

05:43.500 --> 05:50.550
Now we should use some on the vice storage or in browser storage in case we're running on a normal desktop

05:50.550 --> 05:51.220
P.C..

05:51.300 --> 05:53.970
So did we persist that token.
