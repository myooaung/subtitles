WEBVTT

00:02.400 --> 00:07.930
In the last lecture, we had a look at getting the app up and running with Android.

00:07.950 --> 00:13.710
Now maybe you're not developing for Android or at least not exclusively but also for iOS and for this

00:13.710 --> 00:17.070
in the official Ionic docs under Ionic guide here,

00:17.130 --> 00:20.540
you should also check out running on iOS. Now

00:20.670 --> 00:22.540
again I will use Capacitor,

00:22.560 --> 00:28.890
you could use Cordova and here you will also find steps on how to use Cordova but Capacitor is developed

00:28.890 --> 00:34.410
by the Ionic team and I see the brighter future for that and therefore, I will go with Capacitor in this

00:34.410 --> 00:35.580
course.

00:35.580 --> 00:41.150
Now you can run these commands to set up your app for iOS and run it on an iOS device

00:41.160 --> 00:47.550
but first of all, you need to make sure that you have the iOS development environment setup. Since we

00:47.550 --> 00:48.440
use Capacitor,

00:48.440 --> 00:54.600
you can visit capacitor.ionicframework.com and then go to the docs there and there, you'll find

00:54.600 --> 00:56.370
an iOS section.

00:56.490 --> 01:02.100
Here you find a detailed description of what you need to have setup on your machine to build iOS

01:02.100 --> 01:09.120
apps and in detail, that is Xcode version 9 or higher and you should check these docs for updates if that

01:09.120 --> 01:12.800
changes and the Xcode command line tools.

01:12.840 --> 01:20.070
Now you get Xcode from the App Store on your Mac and as I mentioned before, you need a Mac to build

01:20.730 --> 01:27.870
iOS apps on your system. In the App Store, you can search for Xcode and I already do have it installed,

01:27.870 --> 01:30.990
if you don't, install it from there, it's free,

01:30.990 --> 01:37.380
you also don't need a paid Apple Developer account for this. With Xcode installed,

01:37.380 --> 01:45.040
you need the Xcode command line tools and you get these by opening your terminal on your Mac and then

01:45.040 --> 01:48.600
you can type xcode-select.

01:48.690 --> 01:53.910
Now if this gives you something like this, so maybe an error but just an error that you didn't choose

01:53.910 --> 01:55.100
a specific command,

01:55.260 --> 02:01.260
you already got them installed. Only if it tells you something like command not found or operation not found,

02:01.260 --> 02:07.290
then you don't have it installed and you can then simply install them by typing xcode-select --install

02:07.470 --> 02:13.590
nd this will now install the Xcode command line tools.

02:13.650 --> 02:18.690
Now I already have them installed, hence I don't need to do that but if you don't, well then this command

02:18.690 --> 02:24.070
here gives you the Xcode command line tools. With all of that installed,

02:24.240 --> 02:30.660
you can go back to the Ionic docs and use the commands here to add iOS as a platform to your project

02:30.840 --> 02:36.200
and then also run your app on iOS. So back in the project,

02:36.220 --> 02:42.110
I'll start with ionic capacitor add ios,

02:42.180 --> 02:47.460
this command enables iOS as a platform in this project.

02:47.460 --> 02:50.460
Here however, I get an error regarding my app ID,

02:51.720 --> 03:01.200
dashes are not wanted here actually, so make sure to remove them.

03:01.210 --> 03:07.540
Now let me try this command again and what this command does is just as before, we got the extra Android

03:07.540 --> 03:08.050
folder,

03:08.050 --> 03:14.650
now we get the iOS folder and this is a folder you can open with Xcode and it has the native Xcode

03:14.650 --> 03:19.310
app in there which will wrap your web app, your Ionic app.

03:20.270 --> 03:27.470
Now with that created, the next step is that you build your project with ng build because you can

03:27.470 --> 03:32.730
only ship that built project into your native app wrapper

03:32.780 --> 03:34.180
so to say.

03:34.550 --> 03:41.450
You will also learn how to have a dynamically reloaded app up and running and connect it to your iOS device

03:41.480 --> 03:42.800
by the end of this video here

03:43.010 --> 03:50.320
but for now, let's go with that build process, this spits out a www folder and that contains your built

03:50.380 --> 03:51.960
Angular project.

03:52.150 --> 04:01.870
You can now run ionic capacitor copy ios and this will copy this www folder into your iOS folder

04:01.960 --> 04:08.470
and basically into the place where it needs to be for it to be wrappable by this native app you get out

04:08.470 --> 04:18.250
of the box by Capacitor. You can also run ionic capacitor run ios and this will combine the build process

04:18.310 --> 04:20.330
and the copy process for you and

04:20.470 --> 04:22.830
that of course is the more convenient command therefore.

04:23.320 --> 04:24.570
So this is the command

04:24.580 --> 04:31.580
I will from now on use but behind the scenes, it does the two steps you saw before. Now it does not only

04:31.580 --> 04:32.870
copy your files, 

04:32.870 --> 04:40.660
it also should open Xcode for you now and it does not only open Xcode but it opens Xcode with

04:40.660 --> 04:43.510
your iOS folder already selected there,

04:43.510 --> 04:46.890
so this is inside of your iOS folder now.

04:46.900 --> 04:52.970
Now for this to work, you should select app in Xcode and then here under sign-in,

04:53.110 --> 04:55.330
make sure you select a team.

04:55.330 --> 05:02.200
If you don't see a team here, add an account and simply login with your Apple ID here and make sure

05:02.200 --> 05:03.460
you do also create an

05:03.490 --> 05:10.600
Apple Developer account for this ID. You can do that on developer.apple.com and then you sign

05:10.600 --> 05:14.740
in with your Apple ID and basically sign up to be an Apple Developer.

05:14.770 --> 05:15.670
This is free,

05:15.670 --> 05:20.820
there is a paid version but you'll only need that once you plan on shipping your app to the App Store,

05:20.920 --> 05:23.530
as long as you're only developing, you don't need to pay.

05:24.340 --> 05:28.600
So thereafter, select your team here and now the error here should go away,

05:28.600 --> 05:33.880
if there still are errors, there also should be a description on how to get rid of them.

05:33.910 --> 05:41.920
Now with that set up and you will need to do that whenever you delete the iOS folder and re-add it with

05:41.990 --> 05:44.480
ionic capacitor add ios,

05:44.590 --> 05:47.120
so with that setup, you can now run your app.

05:47.290 --> 05:52.540
Here you can choose a simulator you want to run the app on and if you have a real device connected to

05:52.540 --> 05:55.130
your machine, you'll be able to choose that here as well,

05:55.150 --> 05:56.010
a real iPhone

05:56.020 --> 06:01.240
I mean and then you click that play button and this will now build the app,

06:01.270 --> 06:03.250
you can ignore any warnings you see here.

06:03.310 --> 06:08.050
It will build the native app, the real native app you're getting, I want to emphasize this, we're talking about

06:08.050 --> 06:09.310
a real app here.

06:09.400 --> 06:11.650
It will start a simulator

06:11.650 --> 06:18.070
if that isn't running already, the simulator you selected basically and it will then start the native

06:18.070 --> 06:24.190
app in that simulator and that native app is that wrapper around your Ionic app in the end.

06:24.370 --> 06:31.590
So let's wait for this to start up and here's our application coming up and the first start can always

06:31.590 --> 06:33.350
take a bit longer here,

06:33.360 --> 06:40.800
don't worry about that, it will be super fast once you do deploy it onto a real device and test it there.

06:40.950 --> 06:47.220
And now here we get the behavior we saw before and we also see of course that we got the iOS specific

06:47.220 --> 06:48.600
back button and so on,

06:48.600 --> 06:51.140
so this looks really really nice,

06:51.150 --> 06:57.000
we do get the look and feel we would expect it to have from the web app we built before.

06:58.050 --> 07:05.550
So now this is our app running on a native device, on iOS but of course it's a bit cumbersome if we

07:05.610 --> 07:12.480
always have to rerun ionic capacitor run ios and then press the play button here whenever we change

07:12.480 --> 07:17.980
something in the code we want to see here and indeed, there is a simpler method.

07:18.190 --> 07:27.400
You can run ionic capacitor run ios with -l added after it, l stands for live reload and now this will

07:27.400 --> 07:33.310
not run ng build but ng serve actually and it will bring up that development server we already

07:33.310 --> 07:34.690
connected to before

07:34.720 --> 07:42.010
from our web app and you can indeed connect again from the web app and it will do the exact same steps

07:42.040 --> 07:42.750
as before

07:42.760 --> 07:43.530
otherwise

07:43.660 --> 07:48.940
but now if you start the app and you have to restart it once now, stop the old process, restart the new

07:48.940 --> 07:49.580
app,

07:49.840 --> 07:53.950
now this app will be connected to your live reload server.

07:53.950 --> 07:58.780
So now whenever you change anything in your code, the app here will automatically reload,

07:58.780 --> 08:00.980
just as the app in the browser does,

08:01.120 --> 08:02.470
let me demonstrate this.

08:02.590 --> 08:10.390
If I go to my recipes page here and I add two exclamation marks after recipes in the title, then here's

08:10.390 --> 08:11.370
our web app,

08:11.410 --> 08:16.990
I have one exclamation mark here from before when I showed this in the Android video.

08:17.380 --> 08:18.930
We can reload this too by the way,

08:18.940 --> 08:24.610
this is connected to the same development server and here we do see the two exclamation marks

08:24.820 --> 08:30.370
but we also see them in the native device on the emulator and this of course can speed up your development

08:30.370 --> 08:36.670
workflow because now you can write your code, change it and have your changes reflected on the emulator

08:36.670 --> 08:40.780
or the real device instantly or pretty fast at least. Now to my experience,

08:40.780 --> 08:46.390
this can be a bit clunky and sometimes you get results that actually differ from the results you get

08:46.390 --> 08:48.980
when building it and then running it manually,

08:49.090 --> 08:53.110
so therefore this will not be my primarily development process,

08:53.110 --> 08:58.930
instead I will stick to the browser app simply because it's faster and easier to debug but now you know

08:58.930 --> 09:05.260
how you get that native app too, how you can test your app on the native device and obviously we'll test

09:05.260 --> 09:08.040
it there from time to time in the course as well.
