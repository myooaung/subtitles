WEBVTT

00:02.250 --> 00:08.310
We already made sure that the grid behaves differently on different screen sizes on the discover page.

00:08.770 --> 00:09.170
There

00:09.180 --> 00:15.420
I did assign size and set it equal to 12 which you could remove because that's the default anyways

00:15.870 --> 00:18.880
but then I set this strange size-sm

00:18.960 --> 00:26.300
and offset-sm and then we assign different values and now we just have to find out what this

00:26.300 --> 00:28.760
-sm stands for.

00:28.800 --> 00:31.060
Indeed the Ionic grid gives you

00:31.060 --> 00:37.740
different breakpoints for which you can set the size and offset and also push and pull which I'll

00:37.740 --> 00:39.910
not dive in deeply

00:39.990 --> 00:46.530
attributes and you'll find that in the official docs. Push and pull would allow you to change the order

00:46.710 --> 00:49.810
of items based on different screen sizes,

00:49.830 --> 00:52.760
you can learn that in the official docs, size and offset are

00:52.770 --> 00:55.170
the more important attributes though

00:55.170 --> 00:56.220
and there you learn

00:56.220 --> 01:05.400
you have xs, sm, md, lg and xl as breakpoints and you see the values which are basically the pixel

01:05.400 --> 01:09.380
values of screen width for which they will become active.

01:09.630 --> 01:15.700
So you can just assign size and offset without any value and then this means for all screen sizes,

01:15.780 --> 01:23.690
this column will have this size and this offset but if you add size-sm for example or offset-sm, then

01:23.690 --> 01:31.920
you are saying for any page that has at least this width of viewport available, this size and offset

01:31.920 --> 01:33.370
will take effect

01:33.450 --> 01:34.500
and that's important,

01:34.500 --> 01:35.990
this acts as a minimum.

01:36.180 --> 01:45.300
So if you set size-sm to a column value of 6, then this means on devices that have at least a width

01:45.420 --> 01:47.040
of this pixel value,

01:47.250 --> 01:53.610
this size will have an effect. So desktop devices which have way more will also take that but of course

01:53.610 --> 02:01.200
you can also add multiple breakpoint specific sizes and offsets to a fine-grained control.

02:01.200 --> 02:07.580
So back to our new offer page here, to demonstrate this

02:07.580 --> 02:18.950
if I set size-sm to 4 and here also size-sm to 4 and then I also add size let's say md to 2 and

02:19.040 --> 02:36.380
I add here size-md to 3 and then I also add offset-sm of 2 and offset-md to let's say 4,

02:36.730 --> 02:41.610
if I set all of that and this now reloads,

02:41.810 --> 02:43.790
you will see that on a big screen

02:44.810 --> 02:51.710
they're a bit smaller because what I basically set is that for medium-sized devices or higher and we

02:51.710 --> 02:58.910
can see that medium-sized starts at 768 pixels of screen width, we'll actually

02:58.910 --> 03:08.920
just occupy two of the available columns. Only if we are below these 768 pixels, we'll jump to this set

03:08.920 --> 03:11.710
up here where we will take four columns.

03:11.710 --> 03:19.360
So therefore now if I shrink that width here quite a bit and then at some point, I'm below that breakpoint

03:19.870 --> 03:25.110
and by the way that pixel value here in the top right corner can be ignored, I'm zoomed in for recording

03:25.120 --> 03:27.560
so these pixel values are not correct,

03:27.640 --> 03:34.420
so if I basically at some point here, you'll see that certainly changed. Right here it's pretty stuffed

03:34.840 --> 03:36.320
and we have more space.

03:36.370 --> 03:44.710
So this is the 768 pixel breakpoint below which we'll make it into this for column with setup.

03:44.770 --> 03:49.690
Now it is worth pointing out that this also only applies for size-sm,

03:49.810 --> 03:57.580
so for devices that have at least 576 pixels of screen width. If we go even lower than that,

04:01.090 --> 04:03.490
you see now we take the full available width,

04:03.520 --> 04:08.830
so these two columns which are still next to each other in one row split the full available width. The

04:08.830 --> 04:18.130
reason for that is that size-sm 4 only kicks in for screen sizes wider than 576 pixels and anything

04:18.130 --> 04:28.600
below that takes the default of size 12. Now if I would set size-xs or just size here to let's say 5

04:28.960 --> 04:35.770
and here size to 1, then we would not take the full available width but instead for the first column,

04:35.800 --> 04:40.090
we would take five columns of width and for the last column, only 1

04:40.180 --> 04:46.600
and that leads us to this layout which is of course not super beautiful. But this showcases how you can

04:46.600 --> 04:54.520
control this and if you would now add a new ion-row with new ion-columns in there, these columns can

04:54.520 --> 04:59.270
now be styled and sized totally independent of that first row.

04:59.320 --> 05:01.840
So every row works on its own,

05:01.840 --> 05:04.540
that is also important to understand.

05:04.660 --> 05:08.290
You can size columns equally across rows but you don't have to.
