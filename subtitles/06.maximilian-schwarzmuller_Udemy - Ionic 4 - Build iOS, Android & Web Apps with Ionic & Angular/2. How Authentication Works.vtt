WEBVTT

00:02.210 --> 00:05.810
How does authentication work in an ionic app.

00:05.980 --> 00:12.680
An eye on a gap typically is a single page application using a front end framework like angular but

00:12.680 --> 00:17.080
you could also use react or view or build everything with vanilla javascript.

00:17.360 --> 00:20.050
But typically all the magic happens in the browser.

00:20.060 --> 00:26.210
We're not constantly refactoring each team and pages still of course we communicate with a server which

00:26.600 --> 00:32.510
has contact to the database where we manage our user sense on and which might also manage our avid data

00:32.690 --> 00:35.000
as we're doing it in this course.

00:35.090 --> 00:41.390
Now when we authenticate from our eye on a gap we're sending a request to that server and that request

00:41.390 --> 00:47.520
of course contains things like the user email and password and we expect some response.

00:47.690 --> 00:55.640
Now in a traditional web app where we render all our H2 male pages on the server we would manage authentication

00:55.640 --> 01:02.000
with a sash and because we always would have a server who which basically knows whether we're authenticated

01:02.030 --> 01:03.220
and so on.

01:03.230 --> 01:10.330
Now however with an eye on a gap and server which is stateless which is a RESTful API or a raft you

01:10.330 --> 01:17.270
al API there a session is not the solution because the server doesn't know us it doesn't know decline

01:17.270 --> 01:19.220
and it doesn't care about the client.

01:19.880 --> 01:25.310
Instead we'll get back a so-called token which in the end is just a string but a string with a lot of

01:25.310 --> 01:32.450
data encoded into it and that token is generated on the server in a way that only the server can validate

01:32.660 --> 01:37.630
whatever that token is well valid which will become important in a second.

01:37.670 --> 01:43.400
So we get that token back after the server determined that our email and password is correct and on

01:43.400 --> 01:49.900
the client we can save that token in storage and for dad of course I'll show you a how to access storage.

01:49.910 --> 01:57.500
That also works on native apps so we stored at token and now the idea behind that token is that whenever

01:57.500 --> 02:00.980
we have to access some protected resource on the server.

02:00.980 --> 02:06.920
So whenever we want to send the request to some and point dead requires and authenticate user like for

02:06.920 --> 02:13.520
example when we create a new event that in such cases we have to attach the token to that request which

02:13.520 --> 02:17.110
we can do because we stored it on the front end in that storage.

02:17.690 --> 02:23.630
And now the server can check that token and basically find out if it is the token it originally generated

02:23.810 --> 02:26.000
so that we can send any string.

02:26.090 --> 02:31.490
It has to be that token which we got back and this token is generated in a way that only the server

02:31.490 --> 02:37.000
can tell whether it is valid and that works by using a private key on the server.

02:37.010 --> 02:39.860
So this is the way of vindication works.

02:39.860 --> 02:44.190
Now the heavy lifting on the server will be done by firebase for us here.

02:44.240 --> 02:48.950
If you are building your own server side solution you of course will manage that on your own and you

02:48.950 --> 02:54.890
could learn that in courses like my note J asked a complete guide coords if you want you will focus

02:54.890 --> 02:57.880
on the front and part on the ionic app part here.
