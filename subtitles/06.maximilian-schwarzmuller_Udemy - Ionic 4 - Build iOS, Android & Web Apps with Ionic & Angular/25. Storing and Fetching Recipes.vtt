WEBVTT

00:02.490 --> 00:03.810
So were you successful.

00:03.810 --> 00:08.020
Did you successfully implement the same for the recipes as I mentioned.

00:08.040 --> 00:14.540
It is pretty much the same and therefore you could also reuse certain parts like the component here.

00:14.580 --> 00:22.230
The pop over component I mean that page could also be re-used for the recipes here because we're all

00:22.290 --> 00:25.750
pretty much use the same pop over with load and store.

00:25.770 --> 00:26.630
Right.

00:26.670 --> 00:28.720
So it will actually we use it.

00:28.920 --> 00:35.130
This of course means that I will take it and put it in the top level of our pétrus here.

00:35.190 --> 00:39.630
And of course you could implement the separate pop overas for shopping list and recipes.

00:39.630 --> 00:44.400
That is why I showed you how you might also nested because maybe you want to have different patterns

00:44.400 --> 00:49.300
for the recipes and for the shopping list hero ever it will be the same.

00:49.380 --> 01:00.480
Therefore I will rename this page to just database options and rename the folder like this rename the

01:00.480 --> 01:05.320
file name to database options rename the page itself of course.

01:05.340 --> 01:11.580
So here this should now be named database options page and there's of course also means that we have

01:11.580 --> 01:14.710
to just add in our app module here.

01:14.730 --> 01:27.870
You should just as options page to data base options page and make sure to import it like this from

01:27.870 --> 01:30.540
the database options page remove the old import.

01:30.540 --> 01:37.440
So make sure to adjust your import basically to the new path in your file name and you MFX using a class

01:37.440 --> 01:39.440
name database options page.

01:39.480 --> 01:42.460
So this is now the app module adjusted.

01:42.510 --> 01:47.820
Of course we also need to adjust our shopping list page where we were using our shopping list options

01:47.820 --> 01:48.430
page.

01:48.540 --> 01:55.920
Does this now the database options page and we find it now under database options and the file name

01:55.920 --> 01:57.990
as database options.

01:57.990 --> 01:59.690
So this all needs to be adjusted.

01:59.760 --> 02:01.980
It's all in a different POV.

02:02.130 --> 02:06.370
We have to go up one level now to reach our database options.

02:07.050 --> 02:11.520
And of course we also need to adjust names on here when we create pop over.

02:11.670 --> 02:15.340
So some changes to make this more generic to make it reusable.

02:15.390 --> 02:19.080
We can now reuse it in our recipe component.

02:19.090 --> 02:26.010
I will actually copy the whole on show options method and the handle error method and method in-between

02:26.100 --> 02:27.260
which I'll delete.

02:27.390 --> 02:29.360
And I'll put it into the recipe's file.

02:29.430 --> 02:32.100
And again you can centralize this.

02:32.160 --> 02:35.240
You can centralize this this is so important to stress.

02:35.340 --> 02:40.590
I'm just not doing this here because I really want to be explicit about this and I wanted to make it

02:40.650 --> 02:46.920
easy to understand where the code lives but putting this into its own service and therefore centralizing

02:46.920 --> 02:49.590
it certainly is a great idea.

02:49.980 --> 02:56.810
So I'm going to do it in this file though I need to inject a couple of things here in the recipe service

02:56.900 --> 02:58.200
excuse me the recipe page.

02:58.200 --> 03:02.210
Now since I will also need to pop over control there there.

03:02.310 --> 03:09.090
So let's add the pop over control or property of type pop over control that we injected.

03:09.270 --> 03:14.520
Let's also add the loading controllers since I want to display that too.

03:14.730 --> 03:19.880
And let's finally add the urge controller to be able to present alerts.

03:19.980 --> 03:26.270
Make sure to add all those imports at the top from ionic angular like this.

03:26.280 --> 03:29.270
Restructuring it to make it a bit easier to read here.

03:29.310 --> 03:33.240
So make sure to add all those imports from ionic angular.

03:33.630 --> 03:43.350
And with that and we're able to now use these tools to create the pop over to create our alerts and

03:43.350 --> 03:44.400
the loading.

03:44.400 --> 03:52.080
However we still also have to add it to the template and we have to add this database options page import.

03:52.140 --> 03:59.100
So make sure to add this import and make sure to all inject the off service so that you can get access

03:59.100 --> 04:05.220
to the active user and therefore to the token just the same logic as for the shopping list page.

04:05.250 --> 04:12.600
So if that's all injected missing pieces now dead we have to replace shopping lists service year with

04:12.600 --> 04:19.020
recipe's service and add those methods there of course they also don't need that type assignment.

04:19.020 --> 04:20.590
I will fix this soon.

04:20.610 --> 04:28.200
I will start with showing the dropdown those the pop over I should say in the template and I could copy

04:28.200 --> 04:31.220
those from the shopping list file but I will do it manually again.

04:31.220 --> 04:34.490
So that is really something you keep in mind here.

04:34.500 --> 04:37.810
We already have and I unbuttons blog.

04:38.070 --> 04:46.270
I will simply add another button here and this should be the button which allows me to view my pop over.

04:46.470 --> 04:49.120
So here again this will receive the on button directive.

04:49.170 --> 04:56.940
I can only because it only is a button and click I'm executing on show options an important past event

04:56.990 --> 05:02.960
angler gives you the Stiefel Chalion mouse event which holds the coordinates inside the button.

05:02.970 --> 05:09.750
Let's add the I and I can element and the name was more those three dots that were able to pre-sent

05:09.750 --> 05:10.290
that.

05:10.290 --> 05:12.370
However we still have some arrows.

05:12.420 --> 05:19.190
We need to reach out to the recipe service for example to well fetch the right data.

05:19.350 --> 05:22.350
And we even need to implement those methods in that service for us.

05:22.380 --> 05:24.110
We don't do this as of now.

05:24.480 --> 05:31.980
So let's go to the recipe service and just like I did it in the shopping list service I'll add two new

05:31.980 --> 05:32.630
methods.

05:32.670 --> 05:38.480
Store list which will take a token which is a string as an argument.

05:39.930 --> 05:45.490
And then also fetch list which also receives a token as an argument.

05:45.510 --> 05:48.080
Let's start with storing again here.

05:48.090 --> 05:53.730
I want to return something I want to really turn the observable the angular HTP service gives me and

05:53.730 --> 05:56.010
four days I need the HD service right.

05:56.220 --> 06:03.690
So again let's add injectable to the recipe service to make sure that we can inject a service into the

06:03.690 --> 06:10.430
service make sure imported from an angular core So this is the first step.

06:10.430 --> 06:15.240
Now we can inject the HTP service here otherwise you would get an error.

06:15.590 --> 06:19.190
So let's inject angler age to deep service here.

06:19.370 --> 06:28.640
Make sure to import this from an angular age to DP and with the HDP service inject that we can now return

06:28.910 --> 06:36.210
this age to Depay and now you're also put with the same logic as the shopping component to override

06:36.230 --> 06:37.640
old data.

06:38.120 --> 06:44.920
And I will copy to you or else from the shopping service for you are l including the token.

06:44.960 --> 06:46.990
However I will change something about it.

06:48.200 --> 06:51.440
Of course I don't want to target the shopping list node.

06:51.590 --> 06:59.540
I will treat a new recipes note here to save the data there and then also need to get my user ID for

06:59.540 --> 07:01.400
which I'll need the office service.

07:01.400 --> 07:07.860
So let's inject the off service year of service like this.

07:07.860 --> 07:11.930
Also make sure to add this import and wifi off service added.

07:12.140 --> 07:18.620
I can now reach out to the off service get my active user and get the unique ID which I use in my l.

07:18.860 --> 07:26.150
Well and finally I need to pass a body and this body is simply my list of recipes which I'm already

07:26.150 --> 07:28.580
storing in the service here.

07:28.600 --> 07:32.770
This is all this allows me to store recipes knowledge.

07:32.810 --> 07:37.050
Also implement the method to get recipes for this.

07:37.130 --> 07:47.250
I will again reach out or get my user ID I should say and then return this age to dippie get with that

07:47.420 --> 07:52.320
or else that same Ural with the token of course get this data.

07:52.560 --> 07:54.150
And that's basically all.

07:54.180 --> 08:02.520
However as before I will unlock some operators with our X chairs are x added as an import up here so

08:02.520 --> 08:05.270
that they can use some observable operators.

08:05.520 --> 08:14.790
For example the map operator to take the response I get which is a type response and you need to import

08:14.850 --> 08:19.910
this response type from an angler HTP to just like before.

08:20.370 --> 08:26.930
So to take this response and extract the data and transform it into a javascript object with the Jason

08:26.960 --> 08:30.800
method we have on this response object.

08:31.100 --> 08:37.220
And then I also want to execute to do Meffert I know did I get some recipes here.

08:37.400 --> 08:40.540
So an array of recipes that is.

08:40.750 --> 08:44.170
And I want to assign that to my recipe array here.

08:44.230 --> 08:53.050
So this recipes is equal to recipes and one extra thing we should add here is a little check if recipe

08:53.050 --> 08:54.690
is actually set.

08:54.750 --> 08:59.790
Otherwise I don't want to set my recipes year to null.

08:59.890 --> 09:05.000
I instead want to set the recipes stored in the service to an empty array.

09:05.110 --> 09:12.960
And as mentioned before you could change this logic to orzo instead not touched them if you prefer this.

09:13.080 --> 09:14.890
This is also a little tweak.

09:14.890 --> 09:17.590
I want to add the shopping list here here.

09:17.610 --> 09:22.390
I also want to check if it did get ingredients and actually we can rename this because we know that

09:22.390 --> 09:24.640
it will be an array of ingredients.

09:24.640 --> 09:29.420
So here I want to check if we actually did receive ingredients

09:32.540 --> 09:39.670
and only if we did get ingredients only in this case I'll assign them to my existing ingredients Arbor

09:39.710 --> 09:43.130
wise I will set these ingredients to an empty area again.

09:43.130 --> 09:45.520
I could also leave us untouched in this case.

09:45.560 --> 09:48.720
So that's a tiny tweak to the shopping list.

09:48.740 --> 09:52.210
Now any recipes here I am fetching the data.

09:52.220 --> 09:53.140
I'm mapping it.

09:53.150 --> 09:55.050
I'm retrieving it here.

09:55.070 --> 10:04.010
I also want to map the data here on the store list Meffert I also want to extract the content of the

10:04.010 --> 10:06.540
response you're simply with.

10:06.670 --> 10:09.290
Responds Jason like this.

10:09.380 --> 10:15.290
Putting it all into one line here therefore I can omit the return statement does this 6 syntax.

10:15.740 --> 10:19.010
So that I set up my recipe service.

10:19.010 --> 10:28.480
Now let's go back to the recipes page and here I can replace s l service with recipe service of course.

10:28.480 --> 10:31.640
I do have fecche list in there and do pass the token.

10:31.780 --> 10:35.070
I know that my list will actually hold some recipes.

10:35.140 --> 10:41.020
So let's change the type assignments and I'm storing this in our recipes property.

10:41.140 --> 10:46.710
This refers to the recipe property here dicere of recipes on this page.

10:46.750 --> 10:52.000
So with that I'm now replacing the correct thing and up and storing of course also when I reach out

10:52.000 --> 10:57.340
to the recipe service call store or list and the rest is OK as it is.

10:57.340 --> 11:03.160
So that was rather fast but it blurred the same steps as before implementing those store and fetch methods

11:03.190 --> 11:09.460
in the recipe service injecting the service injecting HTP into the recipe service reaching out to the

11:09.460 --> 11:13.810
user or getting the token storing data and fetching that data.

11:14.230 --> 11:18.060
And with this all in place let's see overlooked something.

11:18.190 --> 11:25.750
But I think it should work as I expect that Icesave does now let it recompile so that our app reloads

11:26.240 --> 11:33.700
and ifort go to recipe's network on load see the loader nothing changes because I don't have any recipes

11:33.760 --> 11:34.970
stored.

11:35.020 --> 11:37.060
Now let's create a new recipe here.

11:37.060 --> 11:40.920
A schnitzel which is of course very tasty.

11:40.930 --> 11:51.560
Let's set it to easy and also add a new ingredient like meat and oils and Gnabry ingredient like French

11:51.560 --> 11:52.190
fries.

11:52.200 --> 11:54.690
I bet you never saw that example before.

11:54.950 --> 12:03.380
Let's head new recipe and now Elliott hit save let's have a look at our fire was console looks promising.

12:03.380 --> 12:10.490
We got this new recipe note with one element which is a schnitzel very tasty difficulty easy and it

12:10.490 --> 12:16.420
get two ingredients mead and French fries so this looks pretty good.

12:16.430 --> 12:24.170
Now if I reload this application so that the data is gone and I head load last year it actually fetches

12:24.170 --> 12:28.740
the schnitzel and we can start working on it for example.

12:28.850 --> 12:35.370
Not that for example simply remove all ingredients save days so that the ingredients are gone.

12:35.570 --> 12:41.840
And now if I had saved list again since I used to put it simply overrides the old data.

12:41.840 --> 12:47.820
So now the ingredients is gone and this will now lead to an issue.

12:47.820 --> 12:54.130
Let's go to recipes and hit load we get an error.

12:54.140 --> 12:57.240
Now do you know why we didn't get an error.

12:59.290 --> 13:07.810
The problem is if you have a look at our firebase data it was now saved with no ingredients and therefore

13:07.810 --> 13:11.590
if we fetch it we don't have to add ingredients property.

13:11.680 --> 13:14.740
It's OK if it's an empty array but if it's nonexistent.

13:14.830 --> 13:15.900
This is an issue.

13:15.970 --> 13:17.480
So we need to solve this.

13:17.650 --> 13:24.440
And we also have a number if you let's open it pop over and close it by clicking somewhere else.

13:24.700 --> 13:26.440
We get a number error.

13:26.500 --> 13:34.660
Now action is not found or that the property action cannot read cannot be read on a null object.

13:34.720 --> 13:37.320
So that's also something we have to handle.

13:37.360 --> 13:41.420
Let's fix those two errors in the next lectures.
