WEBVTT

00:02.530 --> 00:04.620
Now that we created this component,

00:04.720 --> 00:08.260
it's important to understand how components can communicate with each other.

00:08.950 --> 00:15.640
Let's say we have a list of persons here in our app component, in our root component.

00:15.640 --> 00:23.320
So here I'll add a persons property to this class and I'll turn this into a list and this list will

00:23.320 --> 00:33.680
simply have a couple of names - Max, Manuel, Anna. By the way, Typescript has its name because it depends

00:33.680 --> 00:40.720
heavily on types and it kind of yells at you by throwing an error down there in the terminal

00:40.850 --> 00:46.220
when you violate types. Now it is able to infer a lot of type,

00:46.250 --> 00:54.110
for example Typescript will already know that persons is of type array which in turn holds strings and

00:54.110 --> 00:59.450
you can see it if you hover over it, here you see it's a string array,

00:59.450 --> 01:05.590
this is kind of how Typescript defines a list of strings.

01:05.630 --> 01:12.740
You can also set your own types by adding a colon after the property name here or after the function

01:12.830 --> 01:18.470
or after your variable and then define your own type, like string array.

01:18.470 --> 01:23.420
This is a bit redundant here because Typescript was able to infer this but you can still do

01:23.420 --> 01:24.610
it manually if you want.

01:25.400 --> 01:27.130
If I change this to number array

01:27.140 --> 01:32.860
for example, you see I get an error here because the type string is not assignable to type

01:32.870 --> 01:33.620
number

01:33.740 --> 01:37.990
and if I would save this, I would also get an error down there as you can see.

01:38.060 --> 01:40.770
So that's pretty sweet about Typescript,

01:40.880 --> 01:45.320
so let me change this back to a string and let's come back to your original question,

01:45.320 --> 01:51.020
how can we pass that data down to the other component and use it there?

01:51.020 --> 01:53.070
Well, nothing easier than that.

01:53.180 --> 02:01.400
Angular has a couple of powerful data binding features and one of these binding features is property

02:01.400 --> 02:02.600
binding.

02:02.600 --> 02:10.040
We have our property here in app component and in the template, we want to pass it on to persons.

02:10.040 --> 02:19.160
So in persons component, we probably also want to have a persons or maybe person list, you can name it

02:19.160 --> 02:20.090
however you want,

02:20.090 --> 02:24.500
I'm naming it differently here to make it easier to differentiate the different properties

02:24.500 --> 02:29.280
but here I'm basically adding a new property to my persons component and I know that this should also

02:29.330 --> 02:31.170
be a list of strings, let's say

02:31.270 --> 02:36.650
and here I should define my type because here Typescript is not able to infer the type because I'm not

02:36.650 --> 02:39.110
setting a default value.

02:39.110 --> 02:44.750
Now it's nice that I know that I want to have a list of persons but the data for that list needs to

02:44.750 --> 02:46.490
come from outside

02:46.490 --> 02:49.280
you could say, it's not inside this component

02:49.460 --> 02:55.400
we actually have the data in here, maybe let's say because we fetched it here with a HTTP request or

02:55.400 --> 02:56.590
for whichever reason.

02:57.170 --> 03:02.000
So how can we pass the data from app component to persons component?

03:02.030 --> 03:09.520
Well we can set up our own bindable property and we do this by importing something from @angular/core,

03:09.560 --> 03:17.250
you add a comma after component and then you import input. Input is again a decorator

03:17.250 --> 03:23.190
but this time not a decorator you add in front of a class but instead one which you add in front of

03:23.190 --> 03:27.450
a property, again with @ and then the name, input

03:27.540 --> 03:29.850
and then you also need parentheses.

03:29.850 --> 03:40.140
Now what this does is it tells Angular that this property of this component can be bound from outside

03:40.500 --> 03:42.630
but what do I mean with this?

03:42.630 --> 03:48.330
It means that we can now go to our app.component.html file where we use that tag

03:48.390 --> 03:54.840
and here, we can set this just as we can set attributes on normal HTML elements,

03:54.990 --> 03:57.580
at least it's kind of comparable to that.

03:57.760 --> 04:04.320
There's just one special thing, for property binding to tell Angular that you are now binding the property

04:04.320 --> 04:10.950
of that other component, you add square brackets here and then the name of the property you want to bind

04:11.490 --> 04:15.910
and there I'll bind to person list which is the name of the property

04:15.960 --> 04:18.150
I have in person component, this one.

04:21.370 --> 04:28.870
Then here between double quotes, I can pass in my value and I could define a new array here, should be

04:28.900 --> 04:36.790
an array of strings of course because I'm expecting a list of strings here and I could parse Michael

04:36.790 --> 04:37.450
here

04:37.780 --> 04:44.590
but of course I already have my own list here in the app component, I have it here in this persons property.

04:44.890 --> 04:51.140
Now conveniently, I can access any properties I have in here inside of the template of the component.

04:51.250 --> 04:56.110
So if I have something in a Typescript file of a component, of the app component, I can use it in the

04:56.110 --> 04:58.090
template of that same component.

04:58.090 --> 05:05.650
So here I can just type persons and reference the values which are inside my persons array here, inside

05:05.650 --> 05:07.950
of this persons property.

05:08.140 --> 05:10.800
And now if I save this, this will actually work

05:10.810 --> 05:15.940
but of course we'll not see anything, we're not rendering this person list but it will be passed down,

05:16.060 --> 05:18.130
we don't get any errors here.

05:18.460 --> 05:21.310
But how can we now output this list of persons?
