WEBVTT

00:02.260 --> 00:07.090
So we implemented all that user of indication logic.

00:07.090 --> 00:12.690
The one thing we haven't done yet is we're not protecting our back and we're not really using that token

00:12.920 --> 00:16.750
other than for finding out whether we're authenticated or not.

00:16.750 --> 00:21.000
In reality you would have roots on your back and that simply don't work.

00:21.070 --> 00:24.600
If you are not authenticated and we can simulate this here.

00:24.600 --> 00:27.480
Q Back on firebase on the database tab.

00:27.490 --> 00:33.040
If you go to rules you can enforce that the user needs to be authenticated by setting off not equal

00:33.040 --> 00:35.450
to null here for both read and write.

00:35.440 --> 00:41.440
You're ensuring that only users where the authentication state and off as a internal variable managed

00:41.440 --> 00:46.810
by firebase so only worthy authentication said it's not null are allowed to read and write and this

00:46.810 --> 00:53.890
will be set to true or to a valid value by far eBay's automatically when you do pass and a valid off

00:53.890 --> 00:55.720
token along with the request.

00:55.810 --> 01:02.530
So we'll have to use our token to all is appended to requests that reach our back at the same for storing

01:02.530 --> 01:02.830
data.

01:02.840 --> 01:09.370
If we upload an image there on storage we also have a rules tab and we can change the rules here to

01:09.370 --> 01:14.220
make sure that users have to be authenticated for this instead of saying this.

01:14.260 --> 01:22.720
If true you should check whether request which is an object passed in or provided by a firebase off

01:22.960 --> 01:24.730
is on equal to null.

01:24.760 --> 01:33.070
So same logic as in the database case in the end and now only users who added a token are allowed to

01:33.190 --> 01:35.260
upload data for Dad.

01:35.260 --> 01:40.960
We also now need to change our iCloud function a little bit because dad is the thing which in the end

01:40.960 --> 01:49.960
interacts with our backend and with the storage and there we now need to add logic to extract that token

01:51.150 --> 02:00.080
for this will add a new import up there FP admin which requires you firebase admin package which already

02:00.080 --> 02:08.560
was added to package Jason before then year after storage where we defined that storage constant you

02:08.560 --> 02:15.310
call FBI admin initialize app and pass an object to it where you have to set a credential.

02:15.310 --> 02:16.810
And now that's important.

02:16.930 --> 02:24.660
You need to create that credential or a credentials file in your project settings here in your firebase

02:24.660 --> 02:27.320
web console under.

02:27.320 --> 02:31.950
Service Accounts firebase admin SDK here.

02:32.190 --> 02:38.040
Once it is loaded you leave no trace checked and you generate a new private key here.

02:39.660 --> 02:46.400
Which gives you a downloadable file and you should download that and store that in your cloud functions

02:46.400 --> 02:53.490
file and you can rename it to whatever you want I'll name it ironic app Jason but you can named as follow

02:53.490 --> 02:54.280
whatever you want.

02:55.480 --> 03:04.240
Now back in your cloud function code here in the project you set credential equal to FP admin credential

03:04.840 --> 03:10.460
cert and then you require a pointer at this file.

03:10.460 --> 03:16.910
So in my case a relative path pointing at ionic dash app dot Jason and this basically employed stat

03:16.910 --> 03:20.720
key for you and sets up that firebase admin package.

03:20.720 --> 03:22.580
Now what do we need this package for.

03:22.700 --> 03:27.690
We'll need it for using that token later and for authenticating ourselves now.

03:27.710 --> 03:35.150
First of all inside of our function code here though after checking the request method I'll check whether

03:35.150 --> 03:40.650
a token was added and for this we check if specific headers were set.

03:40.730 --> 03:47.540
If an authorization header exists or in this case if it does not exist because I want to block dysfunction

03:47.540 --> 03:57.170
from executing then or if it does exist does offer a station header but it does not start with bearer

03:57.230 --> 04:00.920
which it should because we'll store the token on such a bearer.

04:00.920 --> 04:07.430
Key if either of these two things is true then we know we'll have no token and therefore I'll return

04:07.440 --> 04:10.680
a response with the state as a 401.

04:10.710 --> 04:17.040
With some Jason data where I set an error of an authorized and this is now all no J.S. code of course

04:17.040 --> 04:22.020
attached you also find that finished function where you only need to change your credential file name

04:22.260 --> 04:23.750
and your project name.

04:24.210 --> 04:30.240
So we'll read it together here though I'm checking whether such a token was added to the request if

04:30.240 --> 04:32.720
it was added I'll retrieve it here.

04:33.790 --> 04:41.010
By setting I.D. token equal to request headers authorization.

04:41.200 --> 04:47.500
Splitting this on that bearer identifier and then taking the second value which will be the actual token

04:47.610 --> 04:51.540
the first value would be that bearer identifier string here.

04:52.060 --> 04:58.210
With that token extract it we can continue down to that finish handler

05:01.500 --> 05:02.150
and there.

05:02.550 --> 05:11.970
I will now return a call to FBI admin using that firebase admin package of where I verify the token

05:11.970 --> 05:19.280
the I.D. token we just extracted and if that is valid then we actually would get the decoded token here.

05:20.980 --> 05:24.560
And now all the logic we had in there before

05:28.260 --> 05:31.950
up to this point where we have to first then block goes into here

05:34.780 --> 05:36.940
and we add our then block thereafter.

05:36.940 --> 05:39.930
So now we basically just start by verifying the token.

05:39.940 --> 05:45.790
Then we get the token we know yes we are authenticated and then we simply upload the image as before

05:46.030 --> 05:48.000
and we proceed as before.

05:48.000 --> 05:48.990
That has not changed.

05:49.000 --> 05:58.810
So we simply added this extra check here and the rest of the function can stay the way it is now after

05:58.810 --> 06:00.970
this change.

06:01.030 --> 06:07.940
You should run fire based deploy again after saving this fall to upload this new firebase function.

06:08.140 --> 06:15.310
And now both the cloud function as well as our normal database require a token to be added to the requests

06:15.610 --> 06:17.840
to successfully do their job.

06:17.960 --> 06:20.320
That will be what we do in the next lectures.
