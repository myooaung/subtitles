WEBVTT

00:01.960 --> 00:06.780
In the last lecture we had a look at how to run our app on our iOS device.

00:06.790 --> 00:09.340
Let's now consider Android here.

00:09.370 --> 00:14.770
We also have some requirements we have to meet first of all it's important to understand which Android

00:14.800 --> 00:17.220
API levels are supported by quarterbacked.

00:17.230 --> 00:22.180
This will become important in a second and then we have a couple of software requirements.

00:22.180 --> 00:28.090
The good news are you can build Android apps on both Mac Linux and Windows.

00:28.090 --> 00:32.340
Technically that's not both I guess but yeah that works on all platforms.

00:32.350 --> 00:34.630
You need to install the Java development kit though.

00:34.660 --> 00:41.170
You can find a link on this code of a documentation page here or you can simply google for JDK 7 or

00:41.170 --> 00:43.780
KDK in general to get the latest version.

00:43.780 --> 00:49.840
Then you need to Android SDK and for that you can even download the standalone SDK tools or Android

00:49.840 --> 00:54.640
studio which is a complete id e where you could also create native and Android apps with Java if you

00:54.640 --> 00:55.540
want to look into this.

00:55.540 --> 01:02.740
So one of the two options and once you did install even the standalone SDK tools or Android studio you

01:02.740 --> 01:04.090
should open them.

01:04.390 --> 01:10.600
So here I open Android studio and there you can simply go to the STK manager or if you download the

01:10.600 --> 01:16.930
standalone tools simply go into the tools launch the standalone manager here and then you need a couple

01:16.930 --> 01:21.240
of tools here you can find it on the official documentation.

01:21.340 --> 01:29.080
You need the platform tools for the STK of your targeted Android Werben DSK book tools and the support

01:29.080 --> 01:30.040
repository.

01:30.040 --> 01:35.710
So first of all the STK Boltt tools I installed them already as you can tell.

01:35.800 --> 01:37.430
So definitely make sure to check this.

01:37.450 --> 01:44.570
If this is not installed for you then you should also pick your Android Werben and your latest version

01:44.580 --> 01:46.500
might not be supported by Cordova.

01:46.510 --> 01:49.240
So definitely have a look at the quarterback documentation though.

01:49.270 --> 01:57.400
Sadly one in seven is supported even though the documentation here does it state it at SES its answer

01:57.400 --> 01:59.020
to version 23.

01:59.050 --> 02:01.890
But I can tell you 20:4 is also supported.

02:01.990 --> 02:04.270
Though I noticed 25 is not supported.

02:04.270 --> 02:08.630
You're going to see it when you try to build it if it doesn't work it's not supported and important.

02:08.680 --> 02:10.790
Pick the highest version you want to support here.

02:10.840 --> 02:12.710
Not the lowest version.

02:12.790 --> 02:20.200
I already got android 7 and therefore API level 24 installed and finally the support repository you

02:20.200 --> 02:21.900
can find under extras.

02:21.970 --> 02:23.280
I already got installed.

02:23.290 --> 02:25.470
Make sure to check Tizen to install it too.

02:25.480 --> 02:27.260
So did you get this too disabled.

02:27.280 --> 02:31.420
This is needed to support older devices then the target Android level.

02:31.420 --> 02:37.770
So for example to OSes aboard Android six devices even though your target Android level is Android 7.

02:38.140 --> 02:44.860
So after all installed Again check the checkboxes and click Install you might need to accept some terms

02:44.860 --> 02:46.840
of views and thereafter.

02:46.840 --> 02:53.680
Once this is installed you are prepared to run your application on Android and you can either run it

02:53.680 --> 02:57.370
on a native device or in the Android emulator.

02:57.640 --> 03:03.430
Now I do have a native Android device but unfortunately it's so old that capturing the screen would

03:03.430 --> 03:04.850
be an absolute mess.

03:04.900 --> 03:09.880
So I would show you the Android simulator now to show you death simulator.

03:09.990 --> 03:15.930
I will first of all treat a build so I will run ionic build Android and important.

03:15.940 --> 03:18.800
Of course you need to have that Android platform added.

03:19.030 --> 03:26.880
If you don't have it added You need to run ionic platform at Android and this will.

03:26.890 --> 03:30.830
You guessed it at the Android platform and it will also run an initial build.

03:30.970 --> 03:36.940
If you are getting an error during this platform addition your SDK tools are not set up correctly or

03:36.940 --> 03:38.370
you didn't install the right packages.

03:38.380 --> 03:42.320
In this case make sure that you really fulfil those requirements here.

03:42.400 --> 03:45.130
Also you might have issues with environment variables.

03:45.130 --> 03:51.160
Normally they are set up correctly automatically but that can go wrong and if you are encountering any

03:51.160 --> 03:56.470
error basically try to make sure that you fulfill those requirements and that your environment variables

03:56.530 --> 03:57.460
are set up correctly.

03:57.460 --> 04:00.660
You can learn how to set them here in this documentation.

04:00.660 --> 04:04.400
In this article for both Linux and Windows.

04:04.600 --> 04:10.270
So if that is all set correctly and the platform has been added successfully you can run ionic build

04:10.360 --> 04:17.040
Android and others only need a year once because I want to load loaded in Android studio to show you

04:17.040 --> 04:24.690
something there if you already got a virtual device set up and you'll notice you can simply run emulate

04:24.720 --> 04:26.660
command right away which would be ironic.

04:26.670 --> 04:27.760
Emulate Android.

04:27.840 --> 04:29.330
Going to show this in a second.

04:29.670 --> 04:35.080
So I created the build and now I can open an existing and project here for a dozen navigate it into

04:35.100 --> 04:42.090
my on a two course project folder and they're under platforms I load the Android folder as a project

04:42.120 --> 04:43.650
because this is where do you build.

04:43.770 --> 04:46.530
I just create it will be stored.

04:46.530 --> 04:51.490
So this will now load up in Android stood you amongst a lot of helpful pop ups I guess.

04:51.490 --> 04:58.740
And then here you need to go to Tools Android abt manager to create a new virtual device.

04:58.740 --> 05:00.390
Now I already have one.

05:00.480 --> 05:06.120
If you don't have one click on Create ORGILL device and you can pick from a couple of blueprints and

05:06.120 --> 05:07.590
then simply go through the desert.

05:07.590 --> 05:11.550
It's really straightforward and you don't need to change anything most of the time.

05:11.550 --> 05:16.740
So make sure you have such a virtual device set up here and then you could run the boat from within

05:16.860 --> 05:23.310
your Android studio which might also be nice for debugging since this will open up a helpful interface

05:23.340 --> 05:25.930
and a way a way that we do that.

05:25.980 --> 05:27.510
So let's hit play here.

05:28.490 --> 05:29.790
And picked that emulator.

05:29.810 --> 05:34.970
Since I haven't a device connected this will open up this lock screen which will also print error messages

05:35.000 --> 05:36.590
or your console lock statement.

05:36.590 --> 05:38.750
So again great for debugging.

05:39.170 --> 05:45.990
And now it will launch an emulator and I'll be back once it's launched successfully it opens up the

05:45.990 --> 05:47.670
app automatically.

05:47.940 --> 05:54.450
And now this app might be a bit slow here since this emulator is really taking quite a lot of resources

05:54.450 --> 05:57.060
on the system and I'm also recording my system.

05:57.090 --> 06:00.610
It runs fine on a real app I can't have you decided to test it.

06:02.550 --> 06:05.910
And there let's go to quote's works.

06:06.090 --> 06:09.480
Let's load our quote here favorite and this is what I meant.

06:09.480 --> 06:12.840
It's a bit slow but that's only due to the emulator here.

06:12.990 --> 06:14.910
Go to favorites.

06:14.940 --> 06:16.480
The year looks good.

06:16.480 --> 06:17.370
Let's unfavored it.

06:17.370 --> 06:23.550
So it is working again a bit slow due to the heavy load on my system and it is faster if you're not

06:23.550 --> 06:28.200
recording your screen and it will probably all be faster on your real device.

06:28.200 --> 06:33.570
Speaking of this let's shut down this emulator and let's see the commands we can trigger from the command

06:33.570 --> 06:39.750
line because as before with ISIS starting your app from Android stood us only one option.

06:39.810 --> 06:45.890
Especially useful if you want to have this command line log here at the bottom or does this log in general.

06:45.890 --> 06:47.360
Or you can see arrows and so on.

06:47.460 --> 06:52.980
But you can also run it from the command line here in your project in your normal terminal by running

06:53.040 --> 07:00.230
ionic emulate Android to start the emulator or push it to an existing one if you already have one running.

07:00.420 --> 07:07.060
Or I want to run Android dasht as a device to run it on a connected Android device unlike for iOS.

07:07.110 --> 07:09.040
You don't need to sign your app to do this.

07:09.050 --> 07:13.150
This will be done automatically so you don't need to do this in Android studio.

07:13.230 --> 07:19.500
So this is how you push your app to an Android device or emulator and run it there you also saw how

07:19.500 --> 07:22.080
you could debug it in Android stood you.

07:22.140 --> 07:27.220
And with that nothing should stop you from seeing your app run on the real Android device.
