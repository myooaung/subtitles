1
00:00:01,340 --> 00:00:04,630
So now that we've taken a closer look at Kinesis producers,

2
00:00:04,630 --> 00:00:07,640
let's look over some of the ways we can read or consume

3
00:00:07,640 --> 00:00:11,440
data from Kinesis using Kinesis consumers.

4
00:00:11,440 --> 00:00:15,410
There are a few common consumers that we can use to read data from Kinesis.

5
00:00:15,410 --> 00:00:17,810
We'll start by looking at the Kinesis Client

6
00:00:17,810 --> 00:00:20,540
Libraries and when we might use them.

7
00:00:20,540 --> 00:00:22,920
So what are the Kinesis Client Libraries?

8
00:00:22,920 --> 00:00:25,570
As much as we love the AWS documentation,

9
00:00:25,570 --> 00:00:29,080
there are not entire buildings filled with books on Amazon Kinesis.

10
00:00:29,080 --> 00:00:32,620
The Kinesis Client Libraries, or KCLs for short,

11
00:00:32,620 --> 00:00:36,890
are a tool designed to help consume and process data from Kinesis Streams.

12
00:00:36,890 --> 00:00:41,740
It's also possible you hear them referred to as Kinesis Consumer Libraries.

13
00:00:41,740 --> 00:00:45,340
The KCLs also support several different programming languages,

14
00:00:45,340 --> 00:00:47,600
and you'll frequently see them used to help build

15
00:00:47,600 --> 00:00:50,580
applications without having to write custom code to solve

16
00:00:50,580 --> 00:00:54,540
common problems like handling failures.

17
00:00:54,540 --> 00:00:56,970
The client libraries come with support for many different

18
00:00:56,970 --> 00:00:58,860
programming languages like I mentioned.

19
00:00:58,860 --> 00:01:03,670
These include Ruby, .NET, Node.js, Java, and Python.

20
00:01:03,670 --> 00:01:07,790
One of the first major benefits of the Kinesis Client Libraries is that

21
00:01:07,790 --> 00:01:11,340
they can be used seamlessly with Kinesis Producer Libraries in order to

22
00:01:11,340 --> 00:01:15,130
handle the aggregated record data that we sent in a single collection of

23
00:01:15,130 --> 00:01:17,510
records through to the Kinesis data stream.

24
00:01:17,510 --> 00:01:21,350
Now as data is sent in from the Kinesis Producer Library

25
00:01:21,350 --> 00:01:22,940
through to the Kinesis data stream,

26
00:01:22,940 --> 00:01:26,100
and then it's actually processed inside of those shards

27
00:01:26,100 --> 00:01:28,390
and retrieved by the client library,

28
00:01:28,390 --> 00:01:31,780
the client library will then be able to take that aggregated

29
00:01:31,780 --> 00:01:35,410
data and then de‑aggregate it into its constituent records

30
00:01:35,410 --> 00:01:37,430
inside of the Kinesis data record.

31
00:01:37,430 --> 00:01:40,270
So when the client library gets the data back from the stream,

32
00:01:40,270 --> 00:01:42,620
it can then take it into each of these individual

33
00:01:42,620 --> 00:01:45,340
records we stuffed into it earlier.

34
00:01:45,340 --> 00:01:49,160
Before we move on, I want to make a quick note about throughput options.

35
00:01:49,160 --> 00:01:52,880
When working with Kinesis Data Streams, there are two options for throughput.

36
00:01:52,880 --> 00:01:56,720
The default of shared throughput is what we've been discussing up to this point.

37
00:01:56,720 --> 00:01:59,820
All of the consumers can share throughput that is proportional to

38
00:01:59,820 --> 00:02:01,960
the number of shards in the Kinesis data stream.

39
00:02:01,960 --> 00:02:05,760
This scales linearly with 2 MB of reads per second

40
00:02:05,760 --> 00:02:08,340
and 5 read transactions per second.

41
00:02:08,340 --> 00:02:11,750
However, there's also another option called dedicated throughput,

42
00:02:11,750 --> 00:02:13,940
also known as enhanced fan‑out.

43
00:02:13,940 --> 00:02:16,880
This allows consumers to have the same capacity per shard,

44
00:02:16,880 --> 00:02:20,510
dedicated explicitly just for that particular consumer.

45
00:02:20,510 --> 00:02:24,620
So when you're using Kinesis and you want to use Kinesis Client Libraries,

46
00:02:24,620 --> 00:02:26,970
there's an option to use the version 2 of the Kinesis

47
00:02:26,970 --> 00:02:29,220
Client Libraries to get enhanced fan‑out,

48
00:02:29,220 --> 00:02:31,410
and it's implemented by default.

49
00:02:31,410 --> 00:02:41,000
You can use enhanced fan‑out when using the AWS SDKs and the APIs directly. However, using the Kinesis Client Libraries makes this much easier to do.

