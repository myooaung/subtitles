WEBVTT
1
00:00:01.140 --> 00:00:05.640
Now let's look at some basic concepts surrounding Kinesis Data Firehose.

2
00:00:05.640 --> 00:00:08.860
We'll start by looking at records, data retention, and destination.

3
00:00:08.860 --> 00:00:11.210
With records, or data records,

4
00:00:11.210 --> 00:00:14.230
this will be what stores the information that goes into

5
00:00:14.230 --> 00:00:17.790
Amazon Kinesis delivery streams and to the delivery firehose

6
00:00:17.790 --> 00:00:19.640
that we're talking about right now.

7
00:00:19.640 --> 00:00:19.830
Now,

8
00:00:19.830 --> 00:00:22.480
there's a slight difference between what the data looks like between

9
00:00:22.480 --> 00:00:25.020
Kinesis Data Streams and Kinesis Data Firehose.

10
00:00:25.020 --> 00:00:26.340
With Kinesis Data Streams,

11
00:00:26.340 --> 00:00:29.060
there'll be a bit more metadata surrounding the shards

12
00:00:29.060 --> 00:00:30.530
that we're storing our data inside.

13
00:00:30.530 --> 00:00:30.890
of.

14
00:00:30.890 --> 00:00:32.270
With Firehose, however,

15
00:00:32.270 --> 00:00:35.130
there'll be more of a focus on what the data actually looks

16
00:00:35.130 --> 00:00:37.940
like without that unnecessary metadata.

17
00:00:37.940 --> 00:00:41.200
In addition to data records differing from Kinesis Data Streams,

18
00:00:41.200 --> 00:00:44.190
we also have a different way of dealing with data retention.

19
00:00:44.190 --> 00:00:45.730
In Kinesis Firehose,

20
00:00:45.730 --> 00:00:48.980
there's a 24‑hour maximum window on how long the data can

21
00:00:48.980 --> 00:00:51.630
stay around inside of Kinesis Firehose.

22
00:00:51.630 --> 00:00:55.500
That's if it fails to be delivered to a destination, for example.

23
00:00:55.500 --> 00:00:59.460
Now, while Kinesis Data Streams have the concept of a consumer,

24
00:00:59.460 --> 00:01:01.400
Kinesis Data Firehose doesn't.

25
00:01:01.400 --> 00:01:03.810
It only has the concept of destinations,

26
00:01:03.810 --> 00:01:07.530
and these are going to be where we want our data to end up after

27
00:01:07.530 --> 00:01:10.350
it's done being put through a Kinesis Firehose.

28
00:01:10.350 --> 00:01:13.510
Now in this case, some destinations might be Amazon S3,

29
00:01:13.510 --> 00:01:16.550
Splunk, Elasticsearch, and many other destinations,

30
00:01:16.550 --> 00:01:20.340
but we'll look at those later on and how those process the data.

31
00:01:20.340 --> 00:01:24.650
Next, let's talk about the Kinesis Firehose buffer size and interval.

32
00:01:24.650 --> 00:01:25.950
With the buffer size,

33
00:01:25.950 --> 00:01:29.240
there is a certain amount of data that Kinesis Firehose can

34
00:01:29.240 --> 00:01:32.650
buffer before it sends it all over to a destination or

35
00:01:32.650 --> 00:01:34.740
processes it and then sends it over.

36
00:01:34.740 --> 00:01:39.650
For Kinesis Firehose, it's between 1 MB and 128 MB,

37
00:01:39.650 --> 00:01:42.880
depending on the destination that we're working with and the settings that

38
00:01:42.880 --> 00:01:46.340
we've configured for our Kinesis Firehose delivery stream.

39
00:01:46.340 --> 00:01:48.560
In addition to the buffer size is another

40
00:01:48.560 --> 00:01:51.040
characteristic called a buffer interval.

41
00:01:51.040 --> 00:01:51.280
Now,

42
00:01:51.280 --> 00:01:55.180
both of these work in tandem to determine how frequently the data is

43
00:01:55.180 --> 00:01:57.750
sent over from Kinesis Firehose to the destination.

44
00:01:57.750 --> 00:01:59.700
With a buffer interval, though,

45
00:01:59.700 --> 00:02:03.350
it's the amount of time that's waited before sending a

46
00:02:03.350 --> 00:02:05.470
package of data over to its destination.

47
00:02:05.470 --> 00:02:09.440
Now because the buffer interval is between 60 and 900 seconds,

48
00:02:09.440 --> 00:02:12.600
you might be realizing that Firehose is less appropriate for

49
00:02:12.600 --> 00:02:16.720
real‑time streaming data needs and is more appropriate when you're

50
00:02:16.720 --> 00:02:20.610
able to wait between 60 and potentially a few more seconds for the

51
00:02:20.610 --> 00:02:22.740
data to arrive in the destination.

52
00:02:22.740 --> 00:02:24.530
That's not to say it can't arrive faster.

53
00:02:24.530 --> 00:02:26.630
If it hits the buffer size really quickly,

54
00:02:26.630 --> 00:02:31.540
it might indeed go over into its destination before the buffer interval happens.

55
00:02:31.540 --> 00:02:34.120
But let's explain this better with a visualization.

56
00:02:34.120 --> 00:02:37.200
Imagine we have our Kinesis delivery firehose right here,

57
00:02:37.200 --> 00:02:40.400
and inside of it we have a 1 MB buffer size.

58
00:02:40.400 --> 00:02:43.610
Now what'll happen is, data will come into the Kinesis Firehose,

59
00:02:43.610 --> 00:02:46.950
and when that buffer is filled up and there's no more room for any

60
00:02:46.950 --> 00:02:50.330
records in the buffer because the 1 MB limit has been hit,

61
00:02:50.330 --> 00:02:54.400
the Kinesis Firehose will then send all that data over to its destination.

62
00:02:54.400 --> 00:02:56.840
Now, this might be a bit of an oversimplification,

63
00:02:56.840 --> 00:03:01.140
but this'll happen multiple times, and whenever the data hits the buffer,

64
00:03:01.140 --> 00:03:03.290
it'll then be moved over to the destination.

65
00:03:03.290 --> 00:03:06.870
Now this all by itself isn't everything that's happening

66
00:03:06.870 --> 00:03:08.590
because we also have the buffer interval.

67
00:03:08.590 --> 00:03:10.090
With a buffer interval,

68
00:03:10.090 --> 00:03:13.290
we'll count down until we get to a certain time and

69
00:03:13.290 --> 00:03:15.040
then the data will move over.

70
00:03:15.040 --> 00:03:17.560
So if the buffer interval gets to the end,

71
00:03:17.560 --> 00:03:20.120
when there's only two‑thirds of the data filled up,

72
00:03:20.120 --> 00:03:22.500
for example, it'll still move everything over.

73
00:03:22.500 --> 00:03:27.840
Even though it hasn't hit the buffer size, it has hit the buffer interval.

74
00:03:27.840 --> 00:03:29.340
Now this is a little bit misleading,

75
00:03:29.340 --> 00:03:32.220
because they'll both happen at the same time consistently.

76
00:03:32.220 --> 00:03:34.850
So whenever the buffer interval runs out,

77
00:03:34.850 --> 00:03:36.240
the data will be moved over,

78
00:03:36.240 --> 00:03:39.090
or if the buffer interval hasn't been hit yet but the

79
00:03:39.090 --> 00:03:40.820
data just happens to be filled up,

80
00:03:40.820 --> 00:03:45.140
it'll still move over before the buffer interval is over.

81
00:03:45.140 --> 00:03:48.300
So now that we understand the buffer size and interval,

82
00:03:48.300 --> 00:03:51.600
as well as other concepts specifically related to Kinesis Data

83
00:03:51.600 --> 00:03:54.770
Firehose and how they differ from Kinesis Data Streams,

84
00:03:54.770 --> 00:03:58.500
let's look at some of the limitations of Kinesis Data Firehose.

85
00:03:58.500 --> 00:04:02.930
First, there's a limit of 1000 to 5000 records per second,

86
00:04:02.930 --> 00:04:07.670
and this is the soft limit that's implemented by region in AWS.

87
00:04:07.670 --> 00:04:09.790
Now, this means that depending on the region,

88
00:04:09.790 --> 00:04:13.220
if you just create a Kinesis Data Firehose delivery stream,

89
00:04:13.220 --> 00:04:15.280
you're going to be limited to these numbers unless

90
00:04:15.280 --> 00:04:17.510
you request an increase from AWS.

91
00:04:17.510 --> 00:04:18.750
With that being said,

92
00:04:18.750 --> 00:04:22.490
you can definitely request lots of increases to the amount that Kinesis Data

93
00:04:22.490 --> 00:04:27.780
Firehose can process. Now, in addition to this 1k to 5k soft limit of the

94
00:04:27.780 --> 00:04:32.090
records per second, there's also a limit of 1000 to 2000 transactions per

95
00:04:32.090 --> 00:04:35.070
second by region, but this is another soft limit.

96
00:04:35.070 --> 00:04:36.250
So for example,

97
00:04:36.250 --> 00:04:42.080
this might be 1000 put operations into a Kinesis Data Firehose delivery stream.

98
00:04:42.080 --> 00:04:45.820
Another common limit that people run into initially is a 1 MiB

99
00:04:45.820 --> 00:04:49.030
to 5 MiB data ingestion per second limit.

100
00:04:49.030 --> 00:04:50.990
Again, this is dependent on the region.

101
00:04:50.990 --> 00:04:54.330
You'll have higher levels of capacity in certain AWS regions

102
00:04:54.330 --> 00:04:56.960
by default, but for all these regions,

103
00:04:56.960 --> 00:05:00.650
you can still request limit increases onto this as well.

104
00:05:00.650 --> 00:05:03.840
Aside from these soft limits, a hard limit we'll have to look

105
00:05:03.840 --> 00:05:07.300
at is a 1000 KiB max record size.

106
00:05:07.300 --> 00:05:11.370
Now, this can't be extended or expanded upon. When you're

107
00:05:11.370 --> 00:05:13.930
sending records into Kinesis Data Firehose,

108
00:05:13.930 --> 00:05:16.990
you're going to need to make sure you stay within this 1000

109
00:05:16.990 --> 00:05:20.840
KiB, or approximately 1 MB, max record size.

110
00:05:20.840 --> 00:05:22.560
If you try and stuff more data in there,

111
00:05:22.560 --> 00:05:25.560
it's simply going to fail, and you might need to reevaluate how

112
00:05:25.560 --> 00:05:28.500
you're sending data into Kinesis Data Firehose.

113
00:05:28.500 --> 00:05:31.640
One last thing to point out is that Kinesis Data Stream

114
00:05:31.640 --> 00:05:34.310
producers don't have an ingestion limit.

115
00:05:34.310 --> 00:05:38.700
So if you're sending data into Kinesis Data Streams and then forwarding that

116
00:05:38.700 --> 00:05:42.970
along to Kinesis Data Firehose in order for it to deliver and potentially

117
00:05:42.970 --> 00:05:46.220
process the data before delivery into a destination,

118
00:05:46.220 --> 00:05:50.040
then you don't have to worry about the limits that I've just reported above.

119
00:05:50.040 --> 00:05:53.370
So now that we understand basic concepts around Kinesis Data

120
00:05:53.370 --> 00:05:55.920
Firehose, how it differs from Kinesis Data Streams,

121
00:05:55.920 --> 00:05:58.640
how the buffer size and the intervals work, and some

122
00:05:58.640 --> 00:06:05.000
of the limits that Firehose poses, let's take a closer look at transformations in Kinesis Data Firehose.

