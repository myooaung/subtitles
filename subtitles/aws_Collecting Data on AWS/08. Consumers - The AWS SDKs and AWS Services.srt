1
00:00:00,840 --> 00:00:05,840
Now let's look at using the AWS SDKs to create consumers.

2
00:00:05,840 --> 00:00:09,200
Why would we use the AWS SDKs in order to build our

3
00:00:09,200 --> 00:00:11,240
consumers for Kinesis streams?

4
00:00:11,240 --> 00:00:16,100
Well, to start, it'll give us complete control over the specific API actions,

5
00:00:16,100 --> 00:00:17,750
which may be something we prefer if we're

6
00:00:17,750 --> 00:00:19,960
customizing our application significantly.

7
00:00:19,960 --> 00:00:25,640
We can also use the AWS SDK in any programming languages of our choice.

8
00:00:25,640 --> 00:00:29,850
There's a variety of support for many, many different programming languages.

9
00:00:29,850 --> 00:00:36,970
And because the underlying AWS HTTP requests are all set up as HTTP requests,

10
00:00:36,970 --> 00:00:40,640
you can really use any language that could support that protocol.

11
00:00:40,640 --> 00:00:41,300
Finally,

12
00:00:41,300 --> 00:00:43,640
we can run our consumer application anywhere we

13
00:00:43,640 --> 00:00:47,860
want in Amazon EC2 or AWS Lambda, in containers,

14
00:00:47,860 --> 00:00:51,780
or really anywhere else, whereas for some of the other consumer options,

15
00:00:51,780 --> 00:00:55,600
there might be more limitations on where we could use them.

16
00:00:55,600 --> 00:00:57,370
In addition to the AWS SDKs,

17
00:00:57,370 --> 00:01:02,600
we can also use other AWS services to act as consumers of a Kinesis data stream.

18
00:01:02,600 --> 00:01:07,070
Some common AWS services that we might use as consumers of a Kinesis data

19
00:01:07,070 --> 00:01:10,710
stream might be AWS Lambda or Kinesis Data Analytics,

20
00:01:10,710 --> 00:01:12,030
which we talked about a little earlier.

21
00:01:12,030 --> 00:01:15,330
We could also use Kinesis Delivery Firehose as a consumer,

22
00:01:15,330 --> 00:01:19,840
and we'll talk about this service in more detail in later modules.

23
00:01:19,840 --> 00:01:22,770
AWS Lambda is a serverless compute option.

24
00:01:22,770 --> 00:01:25,530
This means that Lambda doesn't require the developer to have

25
00:01:25,530 --> 00:01:29,190
persistent servers that they have to manage and maintain.

26
00:01:29,190 --> 00:01:30,740
Instead, you upload your code,

27
00:01:30,740 --> 00:01:33,940
and AWS handles running the code for you when needed.

28
00:01:33,940 --> 00:01:36,970
The code usually runs in response to incoming events,

29
00:01:36,970 --> 00:01:40,180
like API requests, file uploads, or, in this case,

30
00:01:40,180 --> 00:01:42,780
when data is added to a Kinesis stream.

31
00:01:42,780 --> 00:01:45,120
Now when new records enter the Kinesis stream,

32
00:01:45,120 --> 00:01:48,390
they're going to be batched up and then sent over to AWS Lambda in

33
00:01:48,390 --> 00:01:51,630
order so that that function can process them.

34
00:01:51,630 --> 00:01:53,740
So let's look at how this works.

35
00:01:53,740 --> 00:01:56,600
When we have a Kinesis data stream that has new records

36
00:01:56,600 --> 00:01:58,730
coming into the Kinesis data stream,

37
00:01:58,730 --> 00:02:01,410
we can configure a Lambda function to process this data.

38
00:02:01,410 --> 00:02:04,890
You can write your function in a variety of different programming languages,

39
00:02:04,890 --> 00:02:07,880
and as the Kinesis data stream is ingesting this data,

40
00:02:07,880 --> 00:02:11,410
it will start to batch some of these records together into an event

41
00:02:11,410 --> 00:02:14,320
that will then be sent over to the Lambda function.

42
00:02:14,320 --> 00:02:18,310
This will then trigger the function to process the new incoming data.

43
00:02:18,310 --> 00:02:21,880
At this point, the Lambda function can do a variety of things to the data.

44
00:02:21,880 --> 00:02:25,170
It could process the data that comes in and then send

45
00:02:25,170 --> 00:02:28,240
it over to a service like Amazon S3.

46
00:02:28,240 --> 00:02:31,020
It could also take an action on the records coming in like

47
00:02:31,020 --> 00:02:34,470
triggering an alert or sending out a notification through email

48
00:02:34,470 --> 00:02:37,180
or maybe through SMS as a text message.

49
00:02:37,180 --> 00:02:39,540
And there are lots of different options for what AWS Lambda

50
00:02:39,540 --> 00:02:41,990
could do as it processes the data because,

51
00:02:41,990 --> 00:02:44,350
essentially, you can write any code in here that you'd like,

52
00:02:44,350 --> 00:02:49,040
take action on other AWS services or thirdâ€‘party APIs.

53
00:02:49,040 --> 00:02:51,810
So now let's look at the Kinesis Data Analytics option.

54
00:02:51,810 --> 00:02:54,240
We already kind of peeked at this earlier.

55
00:02:54,240 --> 00:02:58,050
You can stream data into Kinesis Data Analytics from a Kinesis data

56
00:02:58,050 --> 00:03:01,170
stream. And then you can run things like SQL queries on top of that

57
00:03:01,170 --> 00:03:03,120
streaming data to generate insights.

58
00:03:03,120 --> 00:03:03,910
And, finally,

59
00:03:03,910 --> 00:03:07,610
you can also review it live or send the output queries to other streams.

60
00:03:07,610 --> 00:03:11,110
We'll look in much more detail at Kinesis Data Firehose later on.

61
00:03:11,110 --> 00:03:11,940
But for now,

62
00:03:11,940 --> 00:03:13,800
just keep in mind that you can have data from a

63
00:03:13,800 --> 00:03:16,650
Kinesis data stream sent into Firehose.

64
00:03:16,650 --> 00:03:19,590
Then Firehose can process and transform that data if

65
00:03:19,590 --> 00:03:22,820
required by using AWS Lambda. And, finally,

66
00:03:22,820 --> 00:03:27,160
Firehose can send that data along to another destination like Amazon S3,

67
00:03:27,160 --> 00:03:31,410
ElasticSearch, and a variety of other configured destinations.

68
00:03:31,410 --> 00:03:40,000
So now that we understand both the producer side and consumers of Kinesis Data Streams, let's take a look at a demo in the next video.

