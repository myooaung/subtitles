WEBVTT
1
00:00:08.400 --> 00:00:11.310
Was this easier or harder than you expected?

2
00:00:11.610 --> 00:00:14.170
If you manage to do it and it works.

3
00:00:14.190 --> 00:00:17.010
Congratulations from the bottom of my heart.

4
00:00:18.290 --> 00:00:24.410
Oh, when you see our solution, it might be a little bit different than yours, but hopefully your

5
00:00:24.410 --> 00:00:25.340
solution works.

6
00:00:25.340 --> 00:00:26.420
So congrats.

7
00:00:26.750 --> 00:00:31.610
If you have not been able to solve it and you felt a little overwhelmed, don't worry about it.

8
00:00:31.610 --> 00:00:32.570
It's normal.

9
00:00:32.600 --> 00:00:38.300
The important thing is that you tried, that you identified which aspects caused your problem.

10
00:00:38.300 --> 00:00:41.330
So now we can work on it together and get it working.

11
00:00:41.330 --> 00:00:47.210
There's nothing better to learn Python deeply than encountering and fixing our problems.

12
00:00:47.420 --> 00:00:52.610
All right, I'm going to pass it over to Federico to solve your commission problem over in pitch time.

13
00:00:53.480 --> 00:00:56.900
And now we're in Python, ready to start solving our challenge.

14
00:00:56.900 --> 00:01:02.190
For that, we're going to start from scratch by creating the file, but this time we're not going through

15
00:01:02.210 --> 00:01:03.200
project here.

16
00:01:03.200 --> 00:01:06.920
I'm going to right click directly up here where I have my folder path.

17
00:01:06.920 --> 00:01:09.530
We're going to choose day two to right click.

18
00:01:09.530 --> 00:01:12.080
We choose new file and it's the same thing.

19
00:01:12.820 --> 00:01:17.080
This one will be named Commission's dot p y.

20
00:01:17.620 --> 00:01:22.900
Never forget the p ext and we already have our blank sheet to start programming.

21
00:01:23.290 --> 00:01:24.790
And what are we going to program?

22
00:01:25.390 --> 00:01:27.670
Let's start by creating two questions.

23
00:01:28.180 --> 00:01:32.530
We want the user to give us his name and how many sales he's had this month.

24
00:01:32.530 --> 00:01:38.200
So we're going to store the name in a variable called name, and that variable is going to store the

25
00:01:38.200 --> 00:01:39.280
input of the user.

26
00:01:39.280 --> 00:01:45.340
When we ask him, please tell me your name, colon space.

27
00:01:45.670 --> 00:01:48.580
And the second variable is going to be the sales.

28
00:01:48.820 --> 00:01:51.610
And this is also going to come from an input.

29
00:01:51.810 --> 00:02:01.150
It is going to be what the user enters when we ask him, please input your total month sales colon space

30
00:02:01.150 --> 00:02:05.080
and we already have the two questions and the two answers stored in variables.

31
00:02:05.080 --> 00:02:06.760
But here we need to do something.

32
00:02:06.760 --> 00:02:09.010
One of these variables sales.

33
00:02:09.010 --> 00:02:15.310
We need to transform its data into an integer because as you should remember, users inputs always come

34
00:02:15.310 --> 00:02:16.240
as strings.

35
00:02:16.480 --> 00:02:24.250
So let's overwrite sales by making it equal to an integer which is generated from the sales value.

36
00:02:24.790 --> 00:02:27.340
Remember that this is how we do casting.

37
00:02:27.340 --> 00:02:34.240
We say what type of data we want to get, and then in brackets the original data that we want to transform.

38
00:02:34.390 --> 00:02:38.710
If in this case the user would enter a text, for example, hello.

39
00:02:39.040 --> 00:02:44.320
When we're asking for their sales, which will be a number, then the conversion would give back an

40
00:02:44.320 --> 00:02:48.250
error because we cannot transform a text to like hello in a number.

41
00:02:48.250 --> 00:02:49.570
So that would give an error.

42
00:02:50.140 --> 00:02:55.690
Later on we're going to see how to handle the errors and also how to make it so the user can only enter

43
00:02:55.690 --> 00:03:00.520
numbers if that's what we want, but we're going to see that later on in the course.

44
00:03:00.520 --> 00:03:05.950
In the meantime, we're going to have to deal with trusting that the user is going to enter the text

45
00:03:05.950 --> 00:03:07.990
exactly in the way we ask for.

46
00:03:07.990 --> 00:03:14.770
Well, we already have our sales value transformed into an integer and now we can do operations with

47
00:03:14.770 --> 00:03:15.160
it.

48
00:03:15.250 --> 00:03:21.010
Then we can calculate that commission, which we're going to store in a new variable with that name,

49
00:03:21.010 --> 00:03:27.310
and we're going to make commission equal to sales whatever the user entered times 13, which is the

50
00:03:27.310 --> 00:03:30.520
percentage we want and divided by 100.

51
00:03:30.610 --> 00:03:32.560
And there we have the percentage.

52
00:03:32.590 --> 00:03:38.890
Remember that if I had not made this conversion here, I could not in any way make calculations based

53
00:03:38.890 --> 00:03:42.130
on the sales content because the system would give me an error.

54
00:03:42.130 --> 00:03:44.080
It would not allow me to move forward.

55
00:03:44.080 --> 00:03:46.690
But here I was able to because of the conversion.

56
00:03:46.810 --> 00:03:52.060
And now that I've done that, I need to make sure the user gets a rounded number with two decimal places.

57
00:03:52.150 --> 00:03:57.430
So we're going to override the variable commission and this time we're going to make it equal to the

58
00:03:57.430 --> 00:03:59.560
round of commission.

59
00:04:00.250 --> 00:04:03.310
And then what we have here is the result of this operation.

60
00:04:03.310 --> 00:04:09.070
But round it now we're able to print on the screen a sentence that we're going to create using a little

61
00:04:09.070 --> 00:04:09.640
string.

62
00:04:09.640 --> 00:04:12.670
So we put the F to be able to compose it easily.

63
00:04:12.910 --> 00:04:19.270
And as we said, the first thing we have to do is greet the user using their name somewhere in the sentence.

64
00:04:19.270 --> 00:04:25.150
So I'm going to write Hello and between the brackets name, which is the variable that contains the

65
00:04:25.150 --> 00:04:26.680
name comma.

66
00:04:26.680 --> 00:04:34.000
And then I'm going to say your commissions this month are then I put the dollar sign, I open another

67
00:04:34.000 --> 00:04:39.400
bracket and there I can now put commission, which is the calculated value of their commissions.

68
00:04:39.790 --> 00:04:40.840
Will my program run?

69
00:04:40.840 --> 00:04:42.100
Fine, let's see.

70
00:04:42.100 --> 00:04:43.060
Let's go to run.

71
00:04:43.060 --> 00:04:44.110
And we choose commissions.

72
00:04:44.110 --> 00:04:45.940
And it says, please tell me your name.

73
00:04:45.940 --> 00:04:47.800
Well, my name is Federico.

74
00:04:48.880 --> 00:04:53.290
Please input your total month sales, let's say 5000.

75
00:04:53.290 --> 00:04:57.370
And it says, Hello, Federico, your commissions this month are 650.

76
00:04:57.790 --> 00:05:04.090
I notice now that here I have made a rounding where I didn't ask for any amount of decimals, so by

77
00:05:04.090 --> 00:05:06.400
default Python rounded it to a whole number.

78
00:05:06.400 --> 00:05:10.630
But if I say here that I want two decimals, I can run it again.

79
00:05:10.870 --> 00:05:17.950
And we say Federico again, we say 5000 again, and that tells me 650.0.

80
00:05:18.100 --> 00:05:23.650
Well, this code works and it's effective, but it's not quite efficient because it could be better.

81
00:05:23.710 --> 00:05:29.590
In fact, I could, for example, abbreviate here a line instead of doing the conversion after the input,

82
00:05:29.590 --> 00:05:35.200
I can eliminate this and ask directly that when the sales variable is generated, there's not only the

83
00:05:35.200 --> 00:05:42.640
user's input but also the conversion is made here that is in an integer generated by the user's input.

84
00:05:42.760 --> 00:05:46.150
So now I've saved the line by making it all on the same line.

85
00:05:47.140 --> 00:05:52.030
I could also save something else if I have a line here that calculates the commission and then another

86
00:05:52.030 --> 00:05:58.150
one that rounds to it, how about if I eliminate this one that rounds and I do the rounding right here?

87
00:05:58.780 --> 00:06:05.020
I want commission to be equal to the rounding of sales by 13 divided by 100.

88
00:06:05.500 --> 00:06:09.250
Let's sell it to two decimal places here and we close the brackets.

89
00:06:09.910 --> 00:06:11.950
So we're rounding in the same act that I do.

90
00:06:11.950 --> 00:06:17.560
The calculation and this has also saved me another line if I run this, it will work exactly the same

91
00:06:17.650 --> 00:06:23.230
35,000 and it tells me, hello fella, your commission for this month is etcetera.

92
00:06:23.470 --> 00:06:24.640
So it's the same.

93
00:06:24.640 --> 00:06:26.650
You could have done it one way or the other.

94
00:06:26.920 --> 00:06:32.170
The advantage of this way is doing it is the code is more efficient because it takes up less space.

95
00:06:32.350 --> 00:06:37.660
The disadvantage that it is less readable, it's a little bit less readable than the previous one because

96
00:06:37.660 --> 00:06:41.200
the steps grouped in a few lines, but they're all good code.

97
00:06:41.650 --> 00:06:45.280
So whichever one you did and it worked, it's valid.

98
00:06:45.310 --> 00:06:46.540
Congratulations.

99
00:06:46.840 --> 00:06:51.670
So don't miss the next lecture, which is one of those special lectures I love to have, so I'll expect

100
00:06:51.670 --> 00:06:52.180
you there.
