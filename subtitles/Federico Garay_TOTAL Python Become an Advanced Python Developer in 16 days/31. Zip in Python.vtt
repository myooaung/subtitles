WEBVTT
1
00:00:07.610 --> 00:00:12.980
When you first learn the zip function, it may seem like a lot of fun and you may think it's irrelevant

2
00:00:12.980 --> 00:00:16.400
since you won't notice a very practical use for it right away.

3
00:00:16.520 --> 00:00:22.980
But if you trust us after learning it, I will show you in which situations it can be super practical.

4
00:00:23.000 --> 00:00:28.910
What zip basically does is combine two or more lists, interlinking their elements in tuples.

5
00:00:29.330 --> 00:00:35.120
Let's suppose that I have the names list on the side, in the age list on the other.

6
00:00:35.540 --> 00:00:41.960
If I use zip and pass as arguments the names of my two lists, what I will obtain is a list of tuples

7
00:00:41.960 --> 00:00:46.500
in which one element of each list has been put together in order.

8
00:00:46.520 --> 00:00:51.590
There are some considerations to take into account, but Federico will be able to explain them better

9
00:00:51.590 --> 00:00:52.520
in PY charm.

10
00:00:52.790 --> 00:00:55.820
And the best way to explain things is usually with examples.

11
00:00:55.910 --> 00:00:59.690
So here we are in charm inside our file called Zip.

12
00:00:59.780 --> 00:01:06.050
And I have two lists, one file with three names Hannah, Bruce and Tony, and another list with three

13
00:01:06.050 --> 00:01:06.710
ages.

14
00:01:07.040 --> 00:01:11.840
Well, we're going to use zip, as we said, to be able to integrate these two lists in one that has

15
00:01:11.840 --> 00:01:13.850
a table for each pair of values.

16
00:01:13.880 --> 00:01:17.900
Hannah with the first stage, Bruce with the second and Tony with the third.

17
00:01:18.470 --> 00:01:21.350
The way we're going to do it is by implementing a variable.

18
00:01:21.350 --> 00:01:23.330
This is going to be called combination.

19
00:01:23.630 --> 00:01:27.680
It is going to be equal to zip, which is the magic word in this lecture.

20
00:01:27.890 --> 00:01:32.420
And the arguments that zip demands are the names of the lists that we're going to combine.

21
00:01:32.750 --> 00:01:35.930
Actually, the names of any collectible we want to continue.

22
00:01:36.530 --> 00:01:38.960
They can be tables or it can be a dictionary.

23
00:01:39.290 --> 00:01:42.500
So we say that the first list is names, a comma.

24
00:01:42.530 --> 00:01:46.100
The second one is ages, and we already have our combination ready.

25
00:01:47.240 --> 00:01:50.450
What do you think it will look like, this combination, once we print it?

26
00:01:50.840 --> 00:01:55.220
I think you're going to be surprised if you expect to see it ready, because actually it is not going

27
00:01:55.220 --> 00:01:56.090
to be like that.

28
00:01:56.480 --> 00:01:57.800
So let's run zip.

29
00:01:58.070 --> 00:02:03.170
And what we get is a mention here from Python telling us there's a zip object in such and such place.

30
00:02:04.030 --> 00:02:06.400
Of course, this is not what we wanted to see.

31
00:02:06.550 --> 00:02:08.650
This is not what our object should look like.

32
00:02:08.740 --> 00:02:11.980
What we have to do is to be able to see it as cast into a list.

33
00:02:12.010 --> 00:02:17.140
We're going to enclose all of this in a parenthesis, and we're going to say that this is a list.

34
00:02:17.560 --> 00:02:18.880
We want to see a list.

35
00:02:19.510 --> 00:02:22.780
And now if we print it, we have a list that has three tables.

36
00:02:22.930 --> 00:02:28.930
And the first one there is Hannah with 65, Bruce with 29, and Tony with 42.

37
00:02:29.470 --> 00:02:35.560
Something interesting to see is this If I add one more element to any of these lists, for example,

38
00:02:35.560 --> 00:02:39.070
if I add one more number in age, what do you think will happen?

39
00:02:39.250 --> 00:02:40.200
Let's see.

40
00:02:40.210 --> 00:02:41.110
Let's run it.

41
00:02:42.010 --> 00:02:47.380
So actually nothing happened because what Zipp does is to go to the length of the shortest list.

42
00:02:47.980 --> 00:02:53.920
If we have a list of three elements and another of four, it is going to make three tables and the remaining

43
00:02:53.920 --> 00:02:56.710
ones in the longest list, it is going to ignore them.

44
00:02:57.490 --> 00:03:03.100
Also, as Phil told you in the introduction, it cannot be only two, but even more lists that can be

45
00:03:03.100 --> 00:03:04.180
combined with zip.

46
00:03:04.510 --> 00:03:07.480
So we will create here a variable called cities.

47
00:03:07.690 --> 00:03:09.970
And let's include cities like New York.

48
00:03:09.970 --> 00:03:10.960
What a city.

49
00:03:11.140 --> 00:03:15.520
And I'd London one of my favorites of course, and also Berlin.

50
00:03:15.610 --> 00:03:19.390
Amazing days I've spent in that incredible place, actually.

51
00:03:19.390 --> 00:03:23.620
I know we have tons of students in those cities and so many other areas.

52
00:03:23.920 --> 00:03:26.410
And I want to say I love all you guys and girls.

53
00:03:26.410 --> 00:03:28.090
Thank you for being here with us.

54
00:03:28.690 --> 00:03:30.490
Well, let's continue here.

55
00:03:30.490 --> 00:03:32.320
We have three beautiful cities.

56
00:03:32.560 --> 00:03:35.380
And what if I combine these three lists using zip?

57
00:03:36.040 --> 00:03:38.920
I also have to add here cities and I print them.

58
00:03:39.010 --> 00:03:41.260
And now we want longer tables.

59
00:03:41.620 --> 00:03:48.850
We have Hannah, 65, New York, Bruce, 29, London, and Tony, 42, Berlin.

60
00:03:49.120 --> 00:03:55.000
And this may seem just like an interesting curiosity, but you may think that it has not much real life

61
00:03:55.000 --> 00:03:59.410
use for it, because it does not seem that it has something that we're going to use frequently in our

62
00:03:59.410 --> 00:03:59.980
code.

63
00:04:00.250 --> 00:04:04.660
But I'm going to show you that this becomes really useful if you want to create it.

64
00:04:04.660 --> 00:04:10.150
For example, a loop where we're going to print phrases that continue all the elements of our lists.

65
00:04:10.450 --> 00:04:12.880
Well, look how easy it's going to be to make this.

66
00:04:12.880 --> 00:04:19.150
If I write that for each name, age and city that exists inside combination, we're going to be able

67
00:04:19.150 --> 00:04:20.080
to print it.

68
00:04:20.350 --> 00:04:26.440
And we're going to build a literal chain, a chain that says, for example, the name of the person

69
00:04:26.440 --> 00:04:28.110
name is.

70
00:04:28.120 --> 00:04:34.480
And here we put the age and we complete the sentence with the words years old and lives in, and we

71
00:04:34.480 --> 00:04:35.500
put the city here.

72
00:04:36.670 --> 00:04:42.730
So if I print this, what we get is three sentences that say Hannah is 65 years old and lives in New

73
00:04:42.730 --> 00:04:43.330
York.

74
00:04:43.420 --> 00:04:49.690
Bruce is 29 years old and lives in London, and Tony is 42 years old and lives in Berlin.

75
00:04:50.800 --> 00:04:55.480
So look how easily and elegantly we've been able to create a system that doesn't require us to look

76
00:04:55.480 --> 00:04:59.990
up in the indexes of each of the elements as we would have had to do if we didn't know zip.

77
00:05:00.010 --> 00:05:05.950
And it actually does it once we've declared the variables in two short lines, this is really, really,

78
00:05:05.950 --> 00:05:06.940
really useful.

79
00:05:07.030 --> 00:05:11.230
So zip, learn it and then practice it in the exercises that follow.

80
00:05:11.470 --> 00:05:16.000
And I'm already going to the next lecture waiting to teach you other things that are just as interesting.

81
00:05:16.120 --> 00:05:17.080
See you there.
