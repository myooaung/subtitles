WEBVTT
1
00:00:08.300 --> 00:00:12.740
In this lesson, we're going to learn how to make our code, listen to our voice through the microphone

2
00:00:12.740 --> 00:00:19.850
we've installed and transform what we say into text or in a string so we can work with it.

3
00:00:20.240 --> 00:00:27.290
So we're going to start by making a declaration that this is going to be dedicated to hear the microphone

4
00:00:27.290 --> 00:00:29.510
and return the audio as text.

5
00:00:29.840 --> 00:00:37.250
So let's create a function that does this, which shall be called transform audio into text is long

6
00:00:37.250 --> 00:00:38.390
yet very clear.

7
00:00:39.050 --> 00:00:41.540
So this doesn't need any parameters.

8
00:00:41.780 --> 00:00:48.020
And first you're going to have a declaration that says we're going to store recogniser in variable.

9
00:00:48.410 --> 00:00:52.130
So let's create a variable called R to keep it simple.

10
00:00:52.130 --> 00:00:56.090
I will be equal to an object of speech recognition for short.

11
00:00:56.090 --> 00:01:00.380
We'll call it ASR through the method recogniser.

12
00:01:01.700 --> 00:01:02.840
Now that we have the object.

13
00:01:02.840 --> 00:01:05.360
Ah, let's go to the set microphone.

14
00:01:06.020 --> 00:01:14.030
Let's put it with so we can do everything together and we say that speech recognition microphone will

15
00:01:14.030 --> 00:01:15.020
be the source.

16
00:01:15.170 --> 00:01:20.840
So let's call it source from now on and let's establish a waiting time.

17
00:01:20.840 --> 00:01:25.430
So we have a little moment from when the microphone activates to when it starts to listen.

18
00:01:25.790 --> 00:01:29.870
This often helps resolve some of the problems with volume or sound.

19
00:01:30.170 --> 00:01:32.960
This waiting time is going to be very small.

20
00:01:33.230 --> 00:01:40.910
It will be equal to our dot pause threshold, equal to 0.8, which is less than a second.

21
00:01:41.390 --> 00:01:46.880
Now, let's do something that isn't necessary for the code, but for us programmers so we can test if

22
00:01:46.880 --> 00:01:48.080
everything is okay.

23
00:01:48.920 --> 00:01:56.060
Let's report that recording has begun to know that the microphone is connected and that it's functioning.

24
00:01:56.870 --> 00:02:02.090
So here we're going to print on the console something that says you can now speak.

25
00:02:02.660 --> 00:02:08.510
This is going to help us test as the code progresses, if we enter in the moment where we can broadcast

26
00:02:08.510 --> 00:02:09.200
our voice.

27
00:02:09.350 --> 00:02:15.080
So yes, we can talk and now it's going to save the audio we've recorded inside a variable.

28
00:02:15.770 --> 00:02:21.770
So now we can generate this variable we put save what you hear as audio.

29
00:02:23.040 --> 00:02:28.860
And we're going to save it in a variable that we can call audio that is equal to our dot.

30
00:02:28.920 --> 00:02:29.670
Listen.

31
00:02:29.670 --> 00:02:32.220
That will listen to what is in source.

32
00:02:33.170 --> 00:02:33.740
Okay.

33
00:02:33.740 --> 00:02:34.820
Let's keep going.

34
00:02:35.480 --> 00:02:40.580
Now we need to be prepared for errors because there could be some difficulties with the microphone when

35
00:02:40.580 --> 00:02:41.660
saving our audio.

36
00:02:41.720 --> 00:02:46.100
And if it doesn't function how we want, we're going to have some unexpected errors.

37
00:02:46.220 --> 00:02:50.810
So let's make a try so we can manage these circumstances.

38
00:02:51.200 --> 00:02:57.830
Our code will try to search on Google what it is heard so it can put it into text.

39
00:02:58.310 --> 00:03:02.720
So let's save this request transformed into text inside a variable.

40
00:03:02.960 --> 00:03:08.180
We're going to call it request and let's establish that this request is equal to our dot.

41
00:03:08.180 --> 00:03:09.500
Recognize Google.

42
00:03:10.070 --> 00:03:12.540
This method has a very promising name.

43
00:03:12.560 --> 00:03:14.240
So what does this method need?

44
00:03:14.900 --> 00:03:17.990
First, the source of the audio or audio.

45
00:03:18.140 --> 00:03:21.470
Then we have the option to select the language we want to use.

46
00:03:22.220 --> 00:03:29.750
Here, I'm going to put language that in my case shall be e n for English, hyphen g b for Great Britain.

47
00:03:30.260 --> 00:03:34.910
To be sure, it clearly understands the way I talk, which is British English.

48
00:03:35.930 --> 00:03:42.140
If you live in the USA, maybe you prefer n hyphen us and if you speak another language, you must search

49
00:03:42.140 --> 00:03:43.640
for the corresponding code.

50
00:03:44.480 --> 00:03:49.730
So now we're going to make another declaration so we can print the written version in console only,

51
00:03:49.730 --> 00:03:51.630
so we can see it as developers.

52
00:03:51.650 --> 00:03:57.890
This won't be necessary in the final version of our program only to test testing, speech to text.

53
00:03:57.980 --> 00:04:05.420
So we put print and here we can say you said space and we concatenate with request, and you should

54
00:04:05.420 --> 00:04:07.640
now have the string of what we've said.

55
00:04:08.720 --> 00:04:13.310
And as this function has to return as the request to pass the order to our assistant, we're going to

56
00:04:13.310 --> 00:04:18.380
need return request and we're going to make return request.

57
00:04:19.310 --> 00:04:24.530
With this, it seems we've completed everything we need so that our code works, but in the case that

58
00:04:24.530 --> 00:04:25.520
it can't do it.

59
00:04:25.520 --> 00:04:32.630
In other words, in case it doesn't understand audio, which is something that can happen in these cases

60
00:04:32.630 --> 00:04:39.170
except will take charge and see if S.R. registers an error known as unknown value error.

61
00:04:39.890 --> 00:04:46.460
So if this happens, then what we need to do so it doesn't interrupt our program is show proof that

62
00:04:46.460 --> 00:04:48.620
it didn't understand the audio.

63
00:04:49.330 --> 00:04:51.770
And we'll do it with a print that warns us.

64
00:04:51.790 --> 00:04:54.280
Oops, I didn't understand.

65
00:04:54.760 --> 00:04:59.320
So we can do this in case it doesn't understand what we say in the program doesn't collapse.

66
00:04:59.320 --> 00:05:04.780
So we know there was an error and it has to return as something because the function has skipped a previous

67
00:05:04.780 --> 00:05:05.230
step.

68
00:05:05.830 --> 00:05:11.440
So here it's going to return error and it's going to say, I am still waiting.

69
00:05:12.890 --> 00:05:19.250
There are also other types of error that I'd like us to control, so there would be in case the request

70
00:05:19.250 --> 00:05:21.260
cannot be resolved.

71
00:05:21.380 --> 00:05:27.170
In other words, that the audio was recorded, but it was unable to transform it into a string.

72
00:05:27.800 --> 00:05:30.110
So this is going to be another type of accept.

73
00:05:30.830 --> 00:05:37.440
It will be an s ah dot request error in the case that we get this type of error.

74
00:05:37.460 --> 00:05:39.230
We should do the same as before.

75
00:05:39.590 --> 00:05:41.170
Copy and paste this.

76
00:05:41.180 --> 00:05:45.660
And like this we test that it wasn't understood and let's return.

77
00:05:45.680 --> 00:05:47.210
I am still waiting.

78
00:05:47.900 --> 00:05:53.360
And in the case of other unexpected errors, those we cannot anticipate which there will be.

79
00:05:53.870 --> 00:05:59.960
Let's put the unexpected error, because when we work with something so delicate, like recognizing

80
00:05:59.960 --> 00:06:03.980
audio and transforming it to text, many things can happen.

81
00:06:04.100 --> 00:06:08.240
So we also put a general except without specifying the error.

82
00:06:09.320 --> 00:06:16.070
Paste everything and we have to change the messages, including the accept from before where it would

83
00:06:16.070 --> 00:06:20.030
be better than it said something like Whoops, there is no service.

84
00:06:21.290 --> 00:06:24.830
And the last one can say Whoops, something went wrong.

85
00:06:25.950 --> 00:06:28.650
So we have the error under control.

86
00:06:29.220 --> 00:06:31.080
So let's see if this works.

87
00:06:31.980 --> 00:06:37.710
Leaving the function and writing here a call to transform our the into text.

88
00:06:38.690 --> 00:06:45.650
Remember that it doesn't ask for parameters so we can execute and we choose the archive and here arrives

89
00:06:45.650 --> 00:06:46.610
our assistant.

90
00:06:47.900 --> 00:06:52.040
I am talking with my assistant to see if they understand what I say.

91
00:06:53.770 --> 00:06:55.780
And here they write it perfectly.

92
00:06:55.930 --> 00:06:57.760
They understood what I said.

93
00:06:58.060 --> 00:07:03.430
So now we know that we can make our program, listen to our voice, and transform it into text.

94
00:07:03.820 --> 00:07:05.650
So what are we going to do with this?

95
00:07:06.070 --> 00:07:08.140
Let's see in the next lesson.
