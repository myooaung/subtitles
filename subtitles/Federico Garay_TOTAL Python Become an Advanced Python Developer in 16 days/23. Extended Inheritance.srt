1
00:00:07,850 --> 00:00:10,430
Let's talk a little more about inheritance.

2
00:00:10,550 --> 00:00:16,430
Just because you inherit your father's eyes or way of walking doesn't mean you are the same as him in

3
00:00:16,430 --> 00:00:17,480
everything else.

4
00:00:17,840 --> 00:00:24,530
The same is true for inheritance in Python and object oriented programming, for instance, when one

5
00:00:24,530 --> 00:00:26,930
class inherits its methods from another.

6
00:00:26,960 --> 00:00:30,050
Not everything is necessarily going to be the same.

7
00:00:30,260 --> 00:00:37,700
The child class can have three types of methods inherited methods identical to those of the parent class.

8
00:00:37,880 --> 00:00:42,410
Inherited methods that are modified or completely new.

9
00:00:42,410 --> 00:00:45,410
Methods that did not exist in the parent class.

10
00:00:45,710 --> 00:00:48,080
We will see all this in the code in a moment.

11
00:00:48,110 --> 00:00:50,180
The same goes for attributes.

12
00:00:50,180 --> 00:00:57,170
The child class can simply keep the inherited attributes or it can also have its own extra attributes.

13
00:00:57,260 --> 00:01:02,270
This can be done in two ways in the code, and we will also see this in just a moment.

14
00:01:02,450 --> 00:01:06,650
Finally, in this lecture, we are going to talk about the multiple inheritance.

15
00:01:06,830 --> 00:01:07,930
What is this?

16
00:01:07,940 --> 00:01:13,610
While going back to the example of Brian, who inherited Kevin's, his father's eyes.

17
00:01:14,060 --> 00:01:17,960
He may have also inherited Michelle's, knows his mom.

18
00:01:18,470 --> 00:01:23,690
So it is also possible for a class to inherit from many classes at the same time.

19
00:01:24,200 --> 00:01:31,670
And not only that, if Brian has a child, he can pass on the eyes and nose to be inherited from his

20
00:01:31,670 --> 00:01:32,390
parents.

21
00:01:32,720 --> 00:01:38,210
In Python code, it is also possible for the inheritance to be passed through several generations of

22
00:01:38,210 --> 00:01:39,860
classes downwards.

23
00:01:39,890 --> 00:01:46,160
This is great because inheritance is extended and multiplied, but this also will lead to another problem.

24
00:01:46,190 --> 00:01:54,590
If the animal class has a method called TOK and the bird class has modified that method in a third class

25
00:01:54,590 --> 00:01:58,670
called Canary inherits that from bird.

26
00:01:59,240 --> 00:02:00,650
Which talk method?

27
00:02:00,650 --> 00:02:03,890
Is it going to inherit the animals or the birds?

28
00:02:04,250 --> 00:02:13,610
What if bird inherits from animal and living being, which is another class and both have a different

29
00:02:13,610 --> 00:02:15,050
born method?

30
00:02:15,200 --> 00:02:23,390
Which type of birth method is going to be applied to the bird when born is being executed?

31
00:02:23,690 --> 00:02:29,360
There are ways to figure this out in programs and we are going to show you how to code it as well.

32
00:02:29,510 --> 00:02:31,640
So this is going to be a loaded lecture.

33
00:02:31,640 --> 00:02:34,160
So let's head over to py charm right now.

34
00:02:34,970 --> 00:02:40,190
So since there's a lot to cover, we'll start by analyzing the classes from the previous lesson.

35
00:02:40,580 --> 00:02:47,480
We have the animal class that contains two attributes age and color, and we have the born method which

36
00:02:47,480 --> 00:02:54,530
simply says The animal has been born and we have the talk method, the one we just added, which says

37
00:02:54,530 --> 00:03:02,090
This animal makes a sound as the bird class, the one we created down here inherits from animal.

38
00:03:02,120 --> 00:03:06,230
It's supposed it contains all the attributes and methods from animal.

39
00:03:06,920 --> 00:03:13,580
And we've instantiated our first bird object here, which is Tweetie, which is a three year old yellow

40
00:03:13,580 --> 00:03:14,150
bird.

41
00:03:14,960 --> 00:03:20,240
So we said that bird, which inherits from animal, can have three types of methods.

42
00:03:20,600 --> 00:03:24,860
There are the ones inherited from the father class, the ones that we already have.

43
00:03:25,130 --> 00:03:31,940
And if I apply one of these methods to Tweetie, such as Born and execute this code, the software says

44
00:03:31,940 --> 00:03:33,800
this animal has been born.

45
00:03:34,100 --> 00:03:37,400
That's an inherited method without any changes.

46
00:03:38,630 --> 00:03:42,020
Yet we can also have inherited methods that have been modified.

47
00:03:42,260 --> 00:03:47,660
So in our class animal we have a talk method which says this animal makes a sound.

48
00:03:47,990 --> 00:03:54,320
So if we create a new talk method here that is using the same name as the method this inherits from,

49
00:03:54,590 --> 00:03:57,350
and we put something different such as chirp.

50
00:03:57,590 --> 00:03:59,990
What will happen when we execute this method?

51
00:04:01,490 --> 00:04:07,010
Will it execute the method that says Chirp or the one that says This animal makes a sound?

52
00:04:08,120 --> 00:04:09,680
So let's find out.

53
00:04:10,130 --> 00:04:17,000
And it said Chirp, which means this class did inherit a method, but it overrode it so as not to say

54
00:04:17,000 --> 00:04:18,970
this animal makes a sound.

55
00:04:18,980 --> 00:04:20,870
Instead it said chirp.

56
00:04:21,350 --> 00:04:24,890
That method was inherited, yet modified.

57
00:04:26,240 --> 00:04:30,650
Our class can also have new methods which don't exist in the father class.

58
00:04:31,070 --> 00:04:38,210
So bearing in mind that birds fly, we can have a fly method here which says the altitude, which is

59
00:04:38,210 --> 00:04:40,010
the same way we saw the last lesson.

60
00:04:40,340 --> 00:04:47,870
It's a string literal and this bird flies and we can call feet so as to complete the sentence.

61
00:04:48,620 --> 00:04:54,710
So if I call the method that belongs to Tweetie, which is fly, it will require me to type a number

62
00:04:54,710 --> 00:04:55,480
of feet.

63
00:04:55,490 --> 00:04:58,040
So let's put the 328.

64
00:04:58,400 --> 00:05:02,780
And so it will say the bird flies 328 feet.

65
00:05:03,350 --> 00:05:09,140
This was another type of method applied to inheritance, a method that doesn't exist in the father class,

66
00:05:09,140 --> 00:05:11,750
and it's completely new in the child class.

67
00:05:11,990 --> 00:05:16,550
So this was all as regards to methods, but what about the attributes?

68
00:05:16,880 --> 00:05:21,260
So we already know that Tweetie inherits an age and a color.

69
00:05:21,830 --> 00:05:28,010
That's why when creating Tweetie, we had to add the attributes required to the animal class, which

70
00:05:28,010 --> 00:05:30,350
is the one in charge of the inheritance.

71
00:05:30,650 --> 00:05:37,370
But in this case, birds have attributes that other animals don't, such as the altitude they fly at.

72
00:05:37,940 --> 00:05:41,030
This attribute would apply only to birds.

73
00:05:41,360 --> 00:05:46,070
Well, there are two ways of adding attributes to a subclass or a child class.

74
00:05:46,430 --> 00:05:49,280
One is to create its own init method.

75
00:05:49,490 --> 00:05:54,290
We'll do that now and we have to add the same attributes it had before.

76
00:05:54,530 --> 00:06:04,790
Besides self, we have age and color, so here we can add the new one which is altitude will declare

77
00:06:04,790 --> 00:06:05,900
everything again.

78
00:06:05,900 --> 00:06:11,360
Self is equal to age and self color is equal to color.

79
00:06:12,470 --> 00:06:20,120
Then we'll enter the new attribute that's typical of bird's self at altitude, which is equal to altitude.

80
00:06:21,260 --> 00:06:23,180
So this is one way to do it.

81
00:06:23,330 --> 00:06:29,810
And due to the fact that we did it like this, Tweetie now needs a third attribute that is not in animal.

82
00:06:30,530 --> 00:06:32,330
So we'll add to the altitude.

83
00:06:32,330 --> 00:06:33,200
It flies out.

84
00:06:33,260 --> 00:06:37,250
Let's suppose that Tweetie flies at 196 feet high.

85
00:06:37,670 --> 00:06:38,630
So that's it.

86
00:06:38,660 --> 00:06:40,100
No more complaint.

87
00:06:40,760 --> 00:06:47,180
If we create an animal named my animal, which is equal to animal class and not bird, it will only

88
00:06:47,180 --> 00:06:48,890
require age and color.

89
00:06:49,220 --> 00:06:53,450
Altitude is not included because only birds have that attribute.

90
00:06:53,840 --> 00:06:58,260
So let's suppose it is five years old and black and that's it.

91
00:06:58,280 --> 00:07:01,010
This animal doesn't require anything else.

92
00:07:01,490 --> 00:07:03,380
So let's verify something.

93
00:07:03,680 --> 00:07:10,310
If we want my animal to execute, some method will notice that the fly method is not an option since

94
00:07:10,310 --> 00:07:12,500
my animal is not a bird.

95
00:07:13,070 --> 00:07:16,940
So if we try to call that method, we get an error because it doesn't exist.

96
00:07:17,570 --> 00:07:21,770
So we can only add that method to instances of a bird object.

97
00:07:21,890 --> 00:07:24,340
That's why we're allowed to add it to Tweetie.

98
00:07:24,350 --> 00:07:27,500
So this is one way to add attributes to a child class.

99
00:07:28,070 --> 00:07:33,920
The other way is to leave the init method as it is without retyping all the attributes we already have

100
00:07:33,920 --> 00:07:35,090
in the animal class.

101
00:07:35,390 --> 00:07:38,660
Instead, we can use a keyword that is super.

102
00:07:38,990 --> 00:07:43,790
Let's add brackets and a dot so as to use its methods and properties.

103
00:07:44,180 --> 00:07:49,340
And here we have in it, which, as you can see, contains age and color.

104
00:07:49,820 --> 00:07:56,000
So if we call this init method and just type age and color, we no longer need to type self.

105
00:07:56,300 --> 00:07:58,430
Age equals age and self.

106
00:07:58,640 --> 00:08:00,020
Color equals color.

107
00:08:00,440 --> 00:08:02,750
That structure is already inherited.

108
00:08:03,020 --> 00:08:07,100
Notice that there are no complaints and everything works just fine.

109
00:08:07,550 --> 00:08:13,520
So this comes in handy when you have a lot of parameters and don't want to type like 15 new lines to

110
00:08:13,520 --> 00:08:19,460
add all the features you have here by means of super, you can add all the inherited properties and

111
00:08:19,460 --> 00:08:20,990
just type the new ones.

112
00:08:21,110 --> 00:08:26,750
So now let's delete this because we're going to let birds and animals rest for a little while and we're

113
00:08:26,750 --> 00:08:29,540
going to see what multiple inheritance is about.

114
00:08:29,930 --> 00:08:37,310
Let's create three classes, a further class, a child class that will inherit from father and a grandchild

115
00:08:37,730 --> 00:08:38,030
which.

116
00:08:38,200 --> 00:08:39,640
Inherit from child.

117
00:08:39,880 --> 00:08:41,230
They're all empty.

118
00:08:42,250 --> 00:08:47,950
So as you can see, there are no errors because characteristics are passed down indefinitely from generation

119
00:08:47,950 --> 00:08:48,790
to generation.

120
00:08:49,510 --> 00:08:54,820
Grandchild inherits everything from father, though not directly, because it inherits from child,

121
00:08:54,820 --> 00:08:56,620
which does inherit from father.

122
00:08:57,160 --> 00:09:00,760
So now let's imagine that father has a method.

123
00:09:01,120 --> 00:09:05,110
Let's create the talk method which doesn't receive parameters.

124
00:09:05,110 --> 00:09:06,850
It only says hello.

125
00:09:07,180 --> 00:09:10,780
So when father needs to talk, it says hello.

126
00:09:11,560 --> 00:09:18,340
So let's create an instance of the grandchild class which will be named my grandchild and will be equal

127
00:09:18,340 --> 00:09:19,420
to grandchild.

128
00:09:21,220 --> 00:09:27,550
Let's make my grandchild use the talk method and remember it belongs to father and if we execute, this

129
00:09:27,550 --> 00:09:34,780
grandchild is able to talk and say hello, though it doesn't inherit directly from father but from child.

130
00:09:36,220 --> 00:09:37,780
Let's complicate this a bit.

131
00:09:37,780 --> 00:09:40,900
Besides Father, there will be another class named Mother.

132
00:09:41,260 --> 00:09:42,400
And look at this.

133
00:09:42,430 --> 00:09:45,220
It will have a method of its own, which is laugh.

134
00:09:45,460 --> 00:09:49,030
Mother knows how to laugh and it says Haha, piece of cake.

135
00:09:49,600 --> 00:09:54,310
We want it to be a class capable of inheriting properties from father and mother.

136
00:09:54,730 --> 00:09:56,710
So here we'll add comma.

137
00:09:56,740 --> 00:10:04,360
Mother and child will inherit from both of therefore grandchild which inherits from child will have

138
00:10:04,360 --> 00:10:07,630
all the methods and attributes of mother and father.

139
00:10:07,750 --> 00:10:14,650
Then if we want grandchild to be able to laugh, which is very healthy and I recommend you always do

140
00:10:14,650 --> 00:10:16,750
it so we'll have to execute it.

141
00:10:16,750 --> 00:10:21,490
And grandchild says ha ha since it inherited from mother.

142
00:10:23,020 --> 00:10:26,860
And this doesn't mean that grandchild can't inherit methods from father as well.

143
00:10:26,950 --> 00:10:30,130
Grandchild is capable of talking and laughing.

144
00:10:32,920 --> 00:10:35,780
So multiple inheritance is very interesting.

145
00:10:35,800 --> 00:10:42,820
You can inherit from several classes at once and you could add if there were more classes aunts, grandfathers,

146
00:10:43,210 --> 00:10:44,290
anything you want.

147
00:10:44,530 --> 00:10:46,540
So let's complicate this some more.

148
00:10:46,900 --> 00:10:51,360
What if mother besides laugh has its own talk method?

149
00:10:51,370 --> 00:10:54,160
So let's create another talk method for mother.

150
00:10:54,670 --> 00:10:56,890
That method doesn't receive parameters.

151
00:10:56,890 --> 00:11:01,900
So Mother talks, but it says, How are you instead of Hello?

152
00:11:03,190 --> 00:11:03,550
All right.

153
00:11:03,550 --> 00:11:04,860
What's going to happen?

154
00:11:04,870 --> 00:11:07,790
So child inherits from mother and father.

155
00:11:07,810 --> 00:11:11,290
Meaning it inherits the talk method that says hello.

156
00:11:11,560 --> 00:11:14,260
And the other method that says, How are you?

157
00:11:14,470 --> 00:11:20,470
So what will happen if grandchild wants to talk since it inherits from child, father and mother?

158
00:11:20,860 --> 00:11:25,150
So let's make grandchild stop laughing and talk instead.

159
00:11:25,780 --> 00:11:27,460
So what do you think it will do?

160
00:11:27,700 --> 00:11:30,610
Will it say hello or how are you?

161
00:11:31,300 --> 00:11:32,740
So let's execute it.

162
00:11:32,740 --> 00:11:34,180
And it said hello.

163
00:11:34,540 --> 00:11:35,540
So why so?

164
00:11:35,560 --> 00:11:39,590
Because first inherited from father and then from mother.

165
00:11:39,610 --> 00:11:41,190
So let's do the opposite.

166
00:11:41,200 --> 00:11:44,740
Let's put mother and then father execute.

167
00:11:44,740 --> 00:11:47,950
And instead of saying hello, it will say, How are you?

168
00:11:48,250 --> 00:11:49,840
Which is a method of mother.

169
00:11:50,470 --> 00:11:54,070
So this is because elements are searched for in ascending order.

170
00:11:54,220 --> 00:12:00,430
We'll check this out by deleting this talk method and we'll print the grandchild class using one of

171
00:12:00,430 --> 00:12:01,750
the special methods.

172
00:12:02,080 --> 00:12:06,970
So remember, all methods containing double underscore are known as special methods.

173
00:12:07,540 --> 00:12:12,520
So I want to use MRO, which stands for Method Resolution Order.

174
00:12:13,090 --> 00:12:17,710
It is the order in which Python looks for a method in hierarchy of classes.

175
00:12:18,590 --> 00:12:22,190
So what happens if I print the marrow of grandchild?

176
00:12:22,760 --> 00:12:24,410
This is quite riveting.

177
00:12:24,410 --> 00:12:26,060
So I want you to notice it.

178
00:12:26,150 --> 00:12:31,640
Let's make some space here, and we'll see how grandchild searches for things as we ask for them.

179
00:12:31,790 --> 00:12:33,710
For instance, the talk method.

180
00:12:35,250 --> 00:12:37,650
I'll look for it in the grandchild class itself.

181
00:12:38,190 --> 00:12:44,070
That is, if grandchild had a method named talk that says good morning instead of hello and how are

182
00:12:44,070 --> 00:12:44,580
you?

183
00:12:44,610 --> 00:12:49,650
It would print good morning since it would be the first place in which it would look for the talk method.

184
00:12:50,310 --> 00:12:54,870
And if grandchild doesn't find that method there, it will try to find it in child.

185
00:12:55,230 --> 00:12:58,110
That's the method resolution or the grandchild has.

186
00:12:58,140 --> 00:12:59,430
It will go to child.

187
00:12:59,430 --> 00:13:02,240
And if child has the talk method, it will be executed.

188
00:13:02,250 --> 00:13:05,180
If not, grandchild will go up to the mother class.

189
00:13:05,190 --> 00:13:05,870
Why?

190
00:13:05,880 --> 00:13:08,100
Because mother inherits before father.

191
00:13:08,100 --> 00:13:11,430
So that's where grandchild will look for the talk method.

192
00:13:11,610 --> 00:13:13,740
If it finds the method there, it will print.

193
00:13:13,740 --> 00:13:14,550
How are you?

194
00:13:14,670 --> 00:13:20,010
And if grandchild didn't find the method there, it will continue with the father class, which is the

195
00:13:20,010 --> 00:13:22,530
next in its hierarchy and print.

196
00:13:22,560 --> 00:13:23,250
Hello.

197
00:13:23,670 --> 00:13:29,400
And if it didn't find the method in that class it will go to class object which is there even if we

198
00:13:29,400 --> 00:13:30,150
don't see it.

199
00:13:30,420 --> 00:13:33,900
Class object is a class that organizes all classes below.

200
00:13:34,800 --> 00:13:38,820
So notice that we have grandchild, child, mother and father.

201
00:13:38,850 --> 00:13:44,250
And if we change this putting father first and then mother and we executed Maro.

202
00:13:44,430 --> 00:13:50,910
We have grandchild, child, father and mother, thereby changing the hierarchical order.

203
00:13:51,510 --> 00:13:53,010
So I find this captivating.

204
00:13:53,010 --> 00:13:58,710
So as I told you earlier, this will help you reduce the need to type repetitive code, making your

205
00:13:58,710 --> 00:14:00,960
programs lighter and more coherent.

206
00:14:01,080 --> 00:14:06,300
In addition, you can do numerous things you wouldn't be able to do without inheritance.

207
00:14:06,600 --> 00:14:11,210
So inheritance is one of the core concepts of object orientated programming.

208
00:14:11,220 --> 00:14:15,600
We'll get to cover and develop the other concepts, but this is all for now.

209
00:14:15,630 --> 00:14:19,500
So let's solve some exercises and see each other in the next lesson.
