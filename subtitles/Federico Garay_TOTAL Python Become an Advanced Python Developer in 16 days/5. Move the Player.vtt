WEBVTT
1
00:00:08.520 --> 00:00:11.850
So far, we've adjusted our screen resolution and color.

2
00:00:12.360 --> 00:00:15.510
We've also added and placed our player where we wanted.

3
00:00:16.340 --> 00:00:18.530
Now it's time to learn about the players.

4
00:00:18.530 --> 00:00:25.190
Dynamics will enable our player to move to the right and left on the x axis and up and down on the y

5
00:00:25.190 --> 00:00:25.910
axis.

6
00:00:26.510 --> 00:00:31.580
To do so, we need to modify these coordinates a little by adding or subtracting values.

7
00:00:32.450 --> 00:00:34.790
So let's start with our modifications.

8
00:00:35.690 --> 00:00:36.920
Go to the player function.

9
00:00:36.920 --> 00:00:42.260
We created the one that didn't pass parameters to since these were definite values.

10
00:00:42.680 --> 00:00:49.430
Now we'll pass some parameters to our function, which can be X and Y, so that it contains a value

11
00:00:49.430 --> 00:00:51.140
that can constantly change.

12
00:00:52.010 --> 00:00:55.730
And instead of entering these two values here, we'll put X and Y.

13
00:00:56.330 --> 00:00:59.840
This would allow us to have values that can change dynamically.

14
00:01:00.830 --> 00:01:07.010
So now that we've changed this, we need to go to player, which started to complain so as to add values.

15
00:01:07.640 --> 00:01:12.860
We'll pass the coordinates we have in player X and player y and that's it.

16
00:01:13.160 --> 00:01:14.920
Nothing's changing yet.

17
00:01:14.930 --> 00:01:20.390
And if we execute this, our player will stay in the same position because we only change the way in

18
00:01:20.390 --> 00:01:22.180
which its location is created.

19
00:01:22.190 --> 00:01:25.670
That is through a parameter passed to the player function.

20
00:01:27.680 --> 00:01:33.440
So we'll take advantage of our function being called inside the loop, which is constantly updated because

21
00:01:33.440 --> 00:01:36.080
there's always checking if an event takes place.

22
00:01:36.470 --> 00:01:43.100
So up here we'll make Player X, which is the variable determining the player's position on the x axis

23
00:01:43.190 --> 00:01:48.260
increase for each iteration of the loop so that we can see our player's movement.

24
00:01:48.500 --> 00:01:51.020
Let's add 0.1 pixels.

25
00:01:52.100 --> 00:01:58.100
So if we execute this, we'll notice that our player moves to the right every time the loop iterates.

26
00:01:59.000 --> 00:02:04.790
We'll also notice that it keeps on moving even when it reaches the end of the window and it adds values

27
00:02:04.790 --> 00:02:06.860
that are not visible on our screen.

28
00:02:07.310 --> 00:02:12.140
So that's what happens when we modify the player's location on the axes inside a loop.

29
00:02:12.770 --> 00:02:18.350
The game loop is the game's backbone because it's an iteration that is constantly checking if there

30
00:02:18.350 --> 00:02:20.090
is some change taking place.

31
00:02:21.320 --> 00:02:26.630
If I type minus here and I execute this, I'll make the player move to the left.

32
00:02:27.200 --> 00:02:34.340
Or if instead of modifying player x, I modify player y and execute this, the player will go up because

33
00:02:34.340 --> 00:02:36.920
I subtracted values from the y axis.

34
00:02:37.550 --> 00:02:39.830
If I added, the player would go down.

35
00:02:40.610 --> 00:02:43.080
So this is a part of the game dynamics.

36
00:02:43.100 --> 00:02:49.220
We're controlling the movements as we program our game, and we're not going to do it during its execution

37
00:02:49.220 --> 00:02:49.820
yet.

38
00:02:50.480 --> 00:02:52.370
We'll do that in the next lesson.

39
00:02:52.910 --> 00:02:58.520
So we're going to learn how to move our character through user inputs and how to set limits so that

40
00:02:58.520 --> 00:03:01.040
our rocket doesn't disappear from the screen.

41
00:03:01.580 --> 00:03:02.930
So I'll see you there.
