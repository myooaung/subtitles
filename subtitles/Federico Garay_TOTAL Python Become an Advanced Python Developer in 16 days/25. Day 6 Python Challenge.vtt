WEBVTT
1
00:00:08.150 --> 00:00:12.260
And it's time to put everything we've learned into a real world project.

2
00:00:12.470 --> 00:00:18.680
And today's project is going to take some time because although it's relatively simple, there's a lot

3
00:00:18.680 --> 00:00:25.310
of code, many functions, and it's essential that you have an idea for what the order that you need

4
00:00:25.310 --> 00:00:25.670
to do.

5
00:00:25.670 --> 00:00:27.790
Everything is ahead of time.

6
00:00:27.800 --> 00:00:31.340
Today you are going to create a recipe manager.

7
00:00:31.640 --> 00:00:38.420
Basically, it's a program by which a user can recreate and delete recipes from a database.

8
00:00:38.420 --> 00:00:46.250
Before you start, you need to create a folder directory like this in the base folder of your computer.

9
00:00:46.790 --> 00:00:54.650
It is a folder called Recipes, which contains four subfolders and each of them contains two text files

10
00:00:54.650 --> 00:00:55.850
inside the files.

11
00:00:55.850 --> 00:00:57.350
You can write whatever you want.

12
00:00:57.350 --> 00:01:02.690
It's not important what it says in each in each text file for this exercise.

13
00:01:03.050 --> 00:01:10.130
Or if you prefer, you can download and unzip the file that we've attached to this lecture and place

14
00:01:10.130 --> 00:01:11.900
it in the root directory.

15
00:01:11.900 --> 00:01:17.930
If you don't feel like building out that structure yourself, once you have done that, here comes your

16
00:01:17.930 --> 00:01:18.680
task.

17
00:01:18.680 --> 00:01:26.150
Your code will first welcome the user, tell them the path to the directory where our recipes folder

18
00:01:26.150 --> 00:01:27.230
is located.

19
00:01:27.560 --> 00:01:35.630
Tell them how many recipes there are inside the folder and then ask them to choose one of these options

20
00:01:35.630 --> 00:01:37.040
that we have over here.

21
00:01:37.910 --> 00:01:43.010
The first option will ask them Which category do you choose?

22
00:01:43.130 --> 00:01:47.750
Meats, salads, desserts, whatever categories you want.

23
00:01:48.200 --> 00:01:54.860
And once the user chooses a category, it will ask them Which recipe do you want to read?

24
00:01:55.310 --> 00:01:59.120
And then it will show the content of that recipe.

25
00:01:59.150 --> 00:02:06.020
In option number two, it will also ask the user to choose a category, but then it will ask the user

26
00:02:06.020 --> 00:02:11.810
to write the name and content of a new recipe, and it will create that file in the correct place.

27
00:02:11.810 --> 00:02:18.290
So basically option two is getting the user to create a new recipe in a specific category.

28
00:02:19.070 --> 00:02:25.910
Option three will ask for the name of the category the user wants to create and will generate a brand

29
00:02:25.910 --> 00:02:28.850
new folder, a new category with that name.

30
00:02:29.660 --> 00:02:36.170
Option four will do the same as option one, but instead of reading the recipe, it will delete it.

31
00:02:36.950 --> 00:02:42.890
So deleting recipes Option five will ask Which category do you want to delete?

32
00:02:42.890 --> 00:02:49.220
So if you want the user to be able to delete a category and option six will end the execution of the

33
00:02:49.220 --> 00:02:50.870
code, just end the program.

34
00:02:50.960 --> 00:02:54.230
Now, this program has some very important things to consider.

35
00:02:54.620 --> 00:03:01.850
First, every time the user successfully performs any of their choices, the program will ask them to

36
00:03:01.850 --> 00:03:05.240
press some letter to go back to the beginning.

37
00:03:05.420 --> 00:03:12.050
So the code will repeat over and over until the user chooses Option six to actually exit.

38
00:03:12.650 --> 00:03:19.640
This implies that the whole menu should be inside a while loop that repeats over and over again until

39
00:03:19.640 --> 00:03:23.990
the condition that the user's choice is six is not met.

40
00:03:25.250 --> 00:03:32.270
Second, it would be great if every time the user returns to the initial menu, the console clears the

41
00:03:32.270 --> 00:03:35.960
screen so that the previous executions do not accumulate.

42
00:03:35.960 --> 00:03:37.160
So it's cleaner.

43
00:03:37.610 --> 00:03:43.310
Remember that you have system to reset the screen and start displaying from scratch.

44
00:03:44.240 --> 00:03:50.900
Third, although I have taught you many methods to manage files for this exercise, you will need some

45
00:03:50.900 --> 00:03:55.940
that you have not seen yet but are included in the objects we have been working on.

46
00:03:56.360 --> 00:04:00.860
So sometimes you will have to search among the methods that path brings.

47
00:04:00.860 --> 00:04:04.880
For example, reading the documentation and learning how to implement them.

48
00:04:05.480 --> 00:04:10.280
I know it would be much easier if we could just teach you every single thing you need to know.

49
00:04:10.280 --> 00:04:16.700
But remember, it's important to know as a programmer to be able to learn and discover and find and

50
00:04:16.700 --> 00:04:18.230
fix things yourself.

51
00:04:18.230 --> 00:04:20.300
This is how it's going to work in the real world.

52
00:04:20.300 --> 00:04:28.670
So this is a great time to practice this skill for you will use many functions, as many as you think.

53
00:04:28.670 --> 00:04:34.610
Necessary functions help to compartmentalize the code and make it more dynamic, maintainable and repeatable.

54
00:04:35.060 --> 00:04:40.820
Some tasks in this project, such as asking the user which category to choose, are repeated in two

55
00:04:40.820 --> 00:04:42.170
or more menu items.

56
00:04:42.410 --> 00:04:47.660
So having it as a function allows you to write it once and then invoke it from a different place.

57
00:04:48.970 --> 00:04:49.410
Fifth.

58
00:04:49.750 --> 00:04:56.450
Remember to start with a flow chart or a hand-drawn graph that allows you to easily visualize the the

59
00:04:56.500 --> 00:05:01.060
decision tree, the path that your code needs to execute.

60
00:05:01.450 --> 00:05:05.080
Without that, you'll get all tangled up faster than you think.

61
00:05:05.830 --> 00:05:10.270
And last but not least, don't get frustrated if you don't get it done.

62
00:05:10.780 --> 00:05:17.260
If you manage to do just one part or a couple of functions or you don't manage to do everything, it

63
00:05:17.260 --> 00:05:18.130
is fine.

64
00:05:18.520 --> 00:05:22.240
We are always learning and part of learning is just not knowing.

65
00:05:22.600 --> 00:05:29.560
Our challenge will always be placed at the edge of our capabilities, taking us out of our comfort zone

66
00:05:29.560 --> 00:05:33.640
so that our brains have to puzzle and figure out how to do something new.

67
00:05:34.420 --> 00:05:36.550
Go ahead as far as you can get.

68
00:05:36.580 --> 00:05:39.070
Give it all the twists and turns that you can.

69
00:05:39.070 --> 00:05:45.760
And when you see that you finally can't just can't figure it out, that's when you ultimately will find

70
00:05:45.760 --> 00:05:47.150
out your solution.

71
00:05:47.190 --> 00:05:54.580
I'm that edge of just being able to quit, but don't quit when you see those solutions.

72
00:05:54.730 --> 00:05:55.840
And maybe it will come.

73
00:05:55.840 --> 00:06:00.370
When you watch our solution videos, you'll realize, Oh, I was so close.

74
00:06:00.370 --> 00:06:02.710
Why didn't I think of that myself?

75
00:06:03.100 --> 00:06:09.220
And by pushing through and trying yourself, that's when you're going to be able to fully comprehend

76
00:06:09.220 --> 00:06:11.620
and memorize it for your future.

77
00:06:11.620 --> 00:06:13.010
Work as a programmer.

78
00:06:13.030 --> 00:06:18.520
I'm not going to keep you any longer, so put on some good music, grab something nice to drink, crack

79
00:06:18.520 --> 00:06:21.280
those fingers and let's start programming.
