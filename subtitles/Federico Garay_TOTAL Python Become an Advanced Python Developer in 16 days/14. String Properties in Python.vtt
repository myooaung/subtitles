WEBVTT
1
00:00:07.730 --> 00:00:09.740
Now you understand the string methods.

2
00:00:09.740 --> 00:00:15.900
But in order to finish learning everything about strings, we need to learn a bit more about their properties.

3
00:00:15.920 --> 00:00:21.980
First of all, strings are immutable, which means that once they have been constructed, you cannot

4
00:00:21.980 --> 00:00:25.580
change their internal order or alter their contents.

5
00:00:25.580 --> 00:00:31.970
Maybe it's confusing because you have already been able to extract some strings from a larger string,

6
00:00:32.060 --> 00:00:37.160
alter their order, and even replace part of their content with another one.

7
00:00:37.280 --> 00:00:44.270
But keep in mind that we have done all this by using other variables where we apply the transformation

8
00:00:44.270 --> 00:00:47.240
and even by rewriting the same variable.

9
00:00:47.690 --> 00:00:53.060
Remember that we are not talking about variables because they can vary.

10
00:00:53.240 --> 00:01:00.800
We are talking about the string itself, which is immutable and we will check it in the code in a moment.

11
00:01:00.800 --> 00:01:04.100
Another feature of strings is that they can be concatenated.

12
00:01:04.100 --> 00:01:10.130
We have already checked this by using the plus sign and we're going to link that with the next property

13
00:01:10.130 --> 00:01:14.240
because if we use the asterisk sign, we can multiply strings.

14
00:01:14.240 --> 00:01:16.730
We'll also see that in the code and you'll be surprised.

15
00:01:16.730 --> 00:01:23.120
On the other hand, strings can have more than one line, but I don't mean using the backslash and the

16
00:01:23.120 --> 00:01:25.340
PN as we have done so far.

17
00:01:25.610 --> 00:01:31.970
Instead, at the moment of creating the string, we will do it using three opening and closing quotes.

18
00:01:32.150 --> 00:01:38.480
They can be double or single and that allows you to make line breaks directly with the enter key.

19
00:01:38.480 --> 00:01:46.160
Another thing you can do with strings is to check if a given substring is inside its content and Python

20
00:01:46.160 --> 00:01:49.070
will tell you if it is true or false.

21
00:01:49.070 --> 00:01:57.020
Finally, you can calculate the length of a string, how many characters it has using the Len Len function

22
00:01:57.020 --> 00:02:00.110
that we will also see in the code in a moment.

23
00:02:00.110 --> 00:02:01.730
Actually, let's not delay any more.

24
00:02:01.730 --> 00:02:04.250
Let's go to Pi Charm right now to learn.

25
00:02:04.250 --> 00:02:08.420
And here we come to Pi Charm and we're ready to see these string properties in action.

26
00:02:08.840 --> 00:02:12.380
Let's start with a situation where I have a variable called name.

27
00:02:13.140 --> 00:02:15.450
And the name in this variable is Harry.

28
00:02:16.170 --> 00:02:20.940
But then I found out that Harry is not really Harry but Gary with a G.

29
00:02:20.970 --> 00:02:26.040
Then I propose a method to replace the content of this variable to transform the H to a g.

30
00:02:26.070 --> 00:02:31.590
Then I say, well, I can make name at zero index equal to the capital letter G.

31
00:02:32.490 --> 00:02:35.700
Now I want to print the name and see how it's changed.

32
00:02:36.180 --> 00:02:38.440
Let's go to run and let's go here.

33
00:02:38.460 --> 00:02:45.540
Let's choose this file called Properties and I get an error and pay attention to what the error says.

34
00:02:45.750 --> 00:02:46.980
It's a typo error.

35
00:02:47.010 --> 00:02:50.600
It tells me that string objects do not support item assignment.

36
00:02:50.610 --> 00:02:52.170
And this is fundamental.

37
00:02:52.380 --> 00:02:55.270
One of the properties of strings is that immutability.

38
00:02:55.290 --> 00:03:00.360
As Phil told you in the introduction of this lecture, neither their contents nor their order can be

39
00:03:00.360 --> 00:03:01.020
changed.

40
00:03:01.050 --> 00:03:03.450
Of course, you have seen that throughout this course.

41
00:03:03.450 --> 00:03:06.010
We have done things like rewriting a variable.

42
00:03:06.030 --> 00:03:12.140
So here I can say name again and I write Gary and this is not given me any problem.

43
00:03:12.150 --> 00:03:13.560
It is going to let me do it.

44
00:03:13.800 --> 00:03:16.080
I execute it and see it changed.

45
00:03:16.590 --> 00:03:18.270
But let's not get confused.

46
00:03:18.360 --> 00:03:24.990
What I changed here is the content of the variable, because the variables can vary, but the string

47
00:03:24.990 --> 00:03:26.100
has not changed.

48
00:03:26.130 --> 00:03:30.990
Now I've created a new string that I've hosted in the same variable, and now it shows me the string.

49
00:03:30.990 --> 00:03:35.880
Gary with G but the string Harry I wasn't able to modify in any way.

50
00:03:36.270 --> 00:03:38.040
The next property we already know it.

51
00:03:38.340 --> 00:03:40.080
Strings can be concatenated.

52
00:03:40.270 --> 00:03:47.130
So if I have, for example, the variable and one that says G A and the variable end to that has content

53
00:03:47.130 --> 00:03:48.180
are Y.

54
00:03:48.480 --> 00:03:54.030
Now I can create a concatenation of variables that is NW one plus NW two.

55
00:03:54.330 --> 00:03:55.500
And then I print this.

56
00:03:55.500 --> 00:04:02.280
We're going to see here, Gary, in a concatenation of two strings that were transformed into one here.

57
00:04:02.490 --> 00:04:06.690
I could have even housed it in a new variable that contains this concatenation.

58
00:04:06.840 --> 00:04:12.510
Now, this we already knew, but let's queue this up for the next property, which is that strings can

59
00:04:12.510 --> 00:04:13.500
be multiplied.

60
00:04:14.040 --> 00:04:16.680
You know that we can use the plus sign to concatenate.

61
00:04:16.680 --> 00:04:19.140
What happens if we use the multiplication sign?

62
00:04:19.710 --> 00:04:24.270
We're going to put this asterisks after and one and we're going to put the value ten.

63
00:04:24.300 --> 00:04:31.710
If I run this, we have ga ga ga ga repeated up to ten times and you can do this because it's a property

64
00:04:31.710 --> 00:04:32.760
of the strings.

65
00:04:32.790 --> 00:04:34.350
Let's move on to what follows.

66
00:04:34.650 --> 00:04:39.990
Another thing that Phil told you a few minutes ago is that a string can contain several lines of code

67
00:04:39.990 --> 00:04:45.780
and not necessarily through the spacebar and the end to indicate a line break, but write it directly

68
00:04:45.780 --> 00:04:49.500
by using three pairs of double quotes or three single quotes.

69
00:04:49.680 --> 00:04:51.630
And let's put this to the test with a poem.

70
00:04:52.110 --> 00:04:55.800
Poems, you know, sometimes require line breaks in order to be written.

71
00:04:56.070 --> 00:04:58.940
We're going to write it first without quotation marks.

72
00:04:58.950 --> 00:05:04.110
We're going to write one that says Thousand Little White Fish.

73
00:05:04.440 --> 00:05:13.800
We do the line break and enter it as follows As if boiled, enter the color of the water.

74
00:05:14.400 --> 00:05:21.090
This poem is a haiku type poem that belongs to Konishi Reisen, and it is short but beautiful.

75
00:05:21.690 --> 00:05:23.220
Let's select all of this.

76
00:05:23.250 --> 00:05:27.360
Let's press the double quotation marks once, twice, and three times.

77
00:05:27.690 --> 00:05:30.510
As you can see now, I don't get any errors.

78
00:05:30.870 --> 00:05:36.450
And if I want to print the poem, what I'm going to get is the poem in its three lines as I expected

79
00:05:36.450 --> 00:05:37.140
it to happen.

80
00:05:37.140 --> 00:05:40.770
So this is another way to make line breaks in your strings.

81
00:05:40.800 --> 00:05:42.330
Let's see one more thing.

82
00:05:42.360 --> 00:05:45.810
I can check if a certain word or character exists in a string.

83
00:05:46.200 --> 00:05:52.620
If I do it here inside print, we're going to ask for the word water exists in poem.

84
00:05:52.980 --> 00:06:00.570
So I'm saying print the answer to the question Does water exist in poem as it is a question that is

85
00:06:00.570 --> 00:06:02.160
answered with yes or no?

86
00:06:02.190 --> 00:06:08.460
This is a Boolean type data type one that can only tell me true or false.

87
00:06:08.490 --> 00:06:13.830
Actually, when printing it it's going to say true because water it is found in poem.

88
00:06:13.860 --> 00:06:18.600
And if I were to look for sun, which is not found in poem, I will get false.

89
00:06:18.930 --> 00:06:23.550
I can also ask it if a certain word or character or whatever it is not in my string.

90
00:06:24.150 --> 00:06:30.510
I do this by asking it if sun is not in poem and it will give me back true.

91
00:06:30.510 --> 00:06:33.300
Because it is true that sun is not in poem.

92
00:06:33.750 --> 00:06:40.680
If I look for water, which it is in my haiku, I will receive false because it is false that water

93
00:06:40.680 --> 00:06:41.860
is not in the poem.

94
00:06:41.880 --> 00:06:44.610
I hope you understand this logic of double negation.

95
00:06:44.610 --> 00:06:47.400
So these are the most important properties of strings.

96
00:06:47.400 --> 00:06:51.600
We're going to get to something new in the next lecture because we're going to get to the other types

97
00:06:51.600 --> 00:06:53.100
of data that we don't know yet.

98
00:06:53.100 --> 00:06:54.450
So let's get to it.
