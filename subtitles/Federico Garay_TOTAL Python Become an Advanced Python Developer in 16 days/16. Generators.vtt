WEBVTT
1
00:00:07.850 --> 00:00:10.940
In this lecture, we are going to talk about generators.

2
00:00:10.970 --> 00:00:17.870
Generators are a special type of function that produces a value little by little, as we need, instead

3
00:00:17.870 --> 00:00:19.890
of returning a finished value.

4
00:00:19.910 --> 00:00:26.030
For example, if I ask a normal function to return the list of numbers from 1 to 5, it will return

5
00:00:26.030 --> 00:00:29.360
a complete finish list with all the numbers inside.

6
00:00:29.570 --> 00:00:35.000
Therefore, that list will occupy a space that will be equal to its size in my computer memory.

7
00:00:35.000 --> 00:00:40.850
But if we ask this to a generator function, instead of returning all the numbers in the list, it will

8
00:00:40.850 --> 00:00:42.670
simply say, okay, fill.

9
00:00:42.680 --> 00:00:44.120
Do you want the numbers?

10
00:00:44.120 --> 00:00:45.800
1 to 5?

11
00:00:45.950 --> 00:00:47.870
Don't worry, I'll take care of it.

12
00:00:47.870 --> 00:00:53.540
But I'm not going to give them all together so as not to take up as much space in your memory.

13
00:00:53.750 --> 00:00:57.140
Instead, I will produce them one by one as you need them.

14
00:00:57.200 --> 00:01:02.510
You may continue with the rest of the code and when you need the next number, I will remember where

15
00:01:02.690 --> 00:01:04.940
we left off and I will produce it.

16
00:01:05.330 --> 00:01:11.810
So if I give it this command and I ask it to give me the first number of the range, the generator function

17
00:01:11.810 --> 00:01:17.180
will remember the recipe it has to use in order to produce each number.

18
00:01:17.300 --> 00:01:23.330
Produce the first of them, give it to me and wait for me to ask for the next one to produce it when

19
00:01:23.330 --> 00:01:24.290
it is needed.

20
00:01:24.500 --> 00:01:27.860
All this instead of creating the whole list at one time.

21
00:01:28.220 --> 00:01:33.830
In this way, what the generating functions do is take care of the space in my computer memory.

22
00:01:33.830 --> 00:01:40.160
Because if I ask a normal function to create the square of each number from 1 to 1 million, that list

23
00:01:40.160 --> 00:01:41.960
will take up a lot of space.

24
00:01:41.960 --> 00:01:49.130
Whereas if I ask a generating function to produce each square as it is needed, its performance will

25
00:01:49.130 --> 00:01:51.430
be much higher in terms of space.

26
00:01:51.440 --> 00:01:53.870
How do we write a generating function?

27
00:01:54.020 --> 00:01:59.720
The main difference is that instead of using the keyword return to return its finished product, we

28
00:01:59.720 --> 00:02:03.170
use yield to produce our series as we need it.

29
00:02:03.350 --> 00:02:08.900
Of course there are many more details and we're going to get into all of it right in Pi Charm right

30
00:02:08.900 --> 00:02:14.510
now to highlight the key difference between a basic function and an object, we're going to include

31
00:02:14.510 --> 00:02:16.910
one example of each concept.

32
00:02:17.120 --> 00:02:19.790
We need a function that returns number four.

33
00:02:19.790 --> 00:02:26.480
Well, in the case of a basic function, we only have to name it e.g. my function and make it return

34
00:02:26.480 --> 00:02:28.540
four and that will be it.

35
00:02:28.550 --> 00:02:30.230
It returns the number we need.

36
00:02:31.370 --> 00:02:38.060
A generator is practically the same because it is defined with death, followed by a name such as my

37
00:02:38.060 --> 00:02:38.870
generator.

38
00:02:39.380 --> 00:02:42.110
If it requires arguments, we add brackets.

39
00:02:42.110 --> 00:02:48.620
But instead of using the word return, we use the key word yield and we add number four.

40
00:02:49.220 --> 00:02:53.600
This is quite similar, and yet there's another important difference.

41
00:02:54.380 --> 00:03:01.400
On the one hand, return produces and returns number four, but on the other hand, my generator produces

42
00:03:01.400 --> 00:03:03.110
the number when we ask for it.

43
00:03:03.260 --> 00:03:05.000
So let's see this on screen.

44
00:03:05.600 --> 00:03:09.110
If we print my function and my generator.

45
00:03:10.330 --> 00:03:11.680
And we execute it.

46
00:03:13.380 --> 00:03:14.010
We'll see.

47
00:03:14.010 --> 00:03:16.890
Number four as a result of printing my function.

48
00:03:17.220 --> 00:03:20.190
But my generator hasn't produced number four.

49
00:03:20.610 --> 00:03:24.750
It's just showing us that there's an existing generator object located here.

50
00:03:25.260 --> 00:03:29.040
A generator hasn't produced them before since we haven't asked for it.

51
00:03:29.680 --> 00:03:36.790
To do so will store our generator in a variable named G, which will be equal to my generator.

52
00:03:37.090 --> 00:03:42.520
Now we'll print adding the keyword next and g in brackets.

53
00:03:43.090 --> 00:03:46.030
This means I want to print the next G.

54
00:03:46.870 --> 00:03:52.960
So if we print this, we see number four because next allows us to access my generator and command it

55
00:03:52.960 --> 00:03:56.650
to produce the next number in a series of numbers that you must produce.

56
00:03:57.410 --> 00:04:00.140
In this case, we only have one number.

57
00:04:00.500 --> 00:04:03.080
So yield remembers where it left off.

58
00:04:03.080 --> 00:04:06.680
So if we required it to return the next number, it would do it.

59
00:04:07.010 --> 00:04:10.280
In this case, there's no next number as there's only four.

60
00:04:10.670 --> 00:04:14.330
Therefore, if we require the next number, we'll get an error message.

61
00:04:14.330 --> 00:04:14.870
Reading.

62
00:04:14.870 --> 00:04:16.220
Stop iteration.

63
00:04:17.020 --> 00:04:19.180
There was one number and it already used it.

64
00:04:19.420 --> 00:04:22.240
Now we'll cite a more complex example.

65
00:04:22.480 --> 00:04:29.080
Suppose I need this function to return a list of numbers from 1 to 4 that are all multiplied by ten.

66
00:04:29.320 --> 00:04:33.130
In the case of a basic function, we'd have to create an empty list.

67
00:04:33.220 --> 00:04:38.320
Then we'd have to start a four loop for each number in range 1 to 5.

68
00:04:38.620 --> 00:04:42.640
And finally we'd add that number to the list multiplied by ten.

69
00:04:43.310 --> 00:04:44.870
This would create the list.

70
00:04:44.870 --> 00:04:51.500
We'd just be missing return so that this returns the list and that would be the whole function.

71
00:04:51.650 --> 00:04:52.880
So we'll do the same.

72
00:04:52.880 --> 00:04:55.490
But using a generator, which will be easier.

73
00:04:56.030 --> 00:05:01.700
We don't need to create the list since we're not producing the complete list and we'll use a for loop

74
00:05:01.700 --> 00:05:06.950
for each number in range 1 to 5, basically the same as before.

75
00:05:07.220 --> 00:05:11.840
And this loop should produce yield that number multiplied by ten.

76
00:05:13.130 --> 00:05:14.060
So that's it.

77
00:05:14.090 --> 00:05:20.330
Not only is this more practical in terms of code, since we only use two lines of code instead of four,

78
00:05:20.420 --> 00:05:26.900
but it's also practical in terms of memory space because our generator doesn't produce the four numbers

79
00:05:26.900 --> 00:05:28.250
multiplied by ten.

80
00:05:28.550 --> 00:05:32.900
It remembers where it stops in order to return the numbers as we ask for them.

81
00:05:33.080 --> 00:05:34.070
So look at this.

82
00:05:34.070 --> 00:05:37.490
We'll print the function first and then the generator.

83
00:05:37.580 --> 00:05:43.040
After that, we'll store the latter in a variable and will require it to return the first two numbers.

84
00:05:43.430 --> 00:05:45.140
So let's execute this.

85
00:05:45.530 --> 00:05:51.940
Here we have the whole list, which is my function, and we also have my generator number ten, which

86
00:05:51.950 --> 00:05:57.080
the first number produced by my generator and number 20, which is the next number.

87
00:05:57.410 --> 00:06:00.530
So this should be followed by 30 and 40.

88
00:06:00.530 --> 00:06:02.550
But those numbers don't exist.

89
00:06:02.570 --> 00:06:04.790
They're not taking up memory space.

90
00:06:05.300 --> 00:06:09.710
In contrast, my function is taking up space with the numbers from the list.

91
00:06:10.070 --> 00:06:18.230
So if I require it to print the next G here, it will return number 30, starting to take up space.

92
00:06:18.740 --> 00:06:22.010
So now we'll print two more G to see what happens.

93
00:06:23.300 --> 00:06:30.200
Well, it printed ten, 20, 30 and 40, but then it says, Hey, I don't have any numbers left and

94
00:06:30.200 --> 00:06:31.580
the iteration stops.

95
00:06:32.150 --> 00:06:34.760
This allows us to understand generators better.

96
00:06:34.970 --> 00:06:37.880
It basically produced results as we ask for them.

97
00:06:38.540 --> 00:06:40.880
Okay, now we'll draw another example.

98
00:06:40.910 --> 00:06:45.380
First, let's delete this, which will give us a clear picture of generators.

99
00:06:45.890 --> 00:06:48.110
Let's define my generator again.

100
00:06:48.260 --> 00:06:49.790
No arguments needed.

101
00:06:49.910 --> 00:06:56.630
And now we'll do something that differentiates it from basic functions in basic functions when return

102
00:06:56.630 --> 00:06:57.680
is executed.

103
00:06:57.710 --> 00:06:59.990
It means there's no more code to run.

104
00:07:00.500 --> 00:07:06.050
In the case of generators, we can add several fields, and this won't interrupt the execution.

105
00:07:06.140 --> 00:07:12.770
So let's create a variable named X that's equal to one, and we'll add X so that it can be produced

106
00:07:12.770 --> 00:07:14.000
when we ask for it.

107
00:07:14.450 --> 00:07:22.070
Then we'll call the x variable again, but now we'll add plus equals one will increase a value and we'll

108
00:07:22.070 --> 00:07:24.170
also produce X again.

109
00:07:24.620 --> 00:07:31.160
Now we'll do the same once again, x plus equals one x.

110
00:07:31.580 --> 00:07:33.590
This is our generator function.

111
00:07:33.860 --> 00:07:37.970
So let's get out of here and create a variable which contains my generator.

112
00:07:38.240 --> 00:07:42.410
This variable will be named G and will be equal to my generator.

113
00:07:42.920 --> 00:07:46.370
Now we'll print the first three values produced by G.

114
00:07:46.520 --> 00:07:48.410
And this might surprise you.

115
00:07:49.400 --> 00:07:51.140
Let's print those three values.

116
00:07:51.290 --> 00:07:52.790
Execute, and we'll see.

117
00:07:52.790 --> 00:07:55.670
It produced one, two and three.

118
00:07:55.970 --> 00:08:02.630
The first next g printed this yield x whose value was one, therefore it printed one.

119
00:08:03.110 --> 00:08:06.320
Then our generator stopped since we didn't ask for anything.

120
00:08:06.710 --> 00:08:13.040
The generator continued with the next yield in order to return a new result, which was two then did

121
00:08:13.040 --> 00:08:15.050
the same until reaching three.

122
00:08:15.350 --> 00:08:21.290
So the generator doesn't interrupt its execution, as in the case of basic functions, but it stops

123
00:08:21.290 --> 00:08:21.800
here.

124
00:08:22.790 --> 00:08:25.430
It says, okay, I remember where we were.

125
00:08:25.460 --> 00:08:27.770
I'll give you the next result when you come back.

126
00:08:28.190 --> 00:08:31.550
The interesting part is that you can add anything you want here.

127
00:08:31.670 --> 00:08:34.700
Let's add something simple like Hello World.

128
00:08:35.420 --> 00:08:39.290
There could be anything such as functions, modules, and so on.

129
00:08:39.680 --> 00:08:41.630
Let's make it print the next G.

130
00:08:42.050 --> 00:08:43.910
This won't interrupt the execution.

131
00:08:43.910 --> 00:08:48.950
The generator will start right where it left off and the generator function says, okay, Ferdie, I'll

132
00:08:48.950 --> 00:08:51.060
give you the next number when you get back.

133
00:08:51.080 --> 00:08:55.700
I don't need to produce this result in advance so I won't take up memory space or anything.

134
00:08:56.060 --> 00:09:00.950
I remember where I left off and you just ask for a number and I'll produce it on the spot.

135
00:09:01.190 --> 00:09:03.650
So this is the basis of generators.

136
00:09:04.130 --> 00:09:09.110
If you want to delve deeper into them, download the attachment documents or go to the official ones

137
00:09:09.110 --> 00:09:10.610
and do the exercises.

138
00:09:11.060 --> 00:09:13.250
So we'll see each other in the next lesson.
