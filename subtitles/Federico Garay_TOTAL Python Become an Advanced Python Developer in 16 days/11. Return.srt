1
00:00:07,850 --> 00:00:14,090
In the previous lecture, we saw the first part of how to create an how to invoke functions.

2
00:00:14,090 --> 00:00:21,110
We saw that this is the typical function syntax, but we have left a part unexplained so that we can

3
00:00:21,110 --> 00:00:22,910
see it all step by step.

4
00:00:23,420 --> 00:00:28,130
In this example, we made the internal code of the function print something on the screen.

5
00:00:28,130 --> 00:00:32,990
But normally what we want is that the functions return something as a result.

6
00:00:33,650 --> 00:00:40,130
So although this function is well written, we usually include the keyword return to return the result

7
00:00:40,130 --> 00:00:43,430
of the function instead of printing something on the screen.

8
00:00:43,970 --> 00:00:50,120
If we use return, we can take advantage of what the function returns to store it in a variable.

9
00:00:50,510 --> 00:00:53,510
Let's see it with a very simple example.

10
00:00:53,510 --> 00:00:59,120
Here we have a function called sum which asks for two numbers as parameters.

11
00:00:59,420 --> 00:01:04,370
What this function does is return the results of the sum of those two numbers.

12
00:01:04,370 --> 00:01:09,950
This is great because although this function does not print anything on the screen, that is to say

13
00:01:09,950 --> 00:01:11,720
visually it does nothing.

14
00:01:11,720 --> 00:01:15,680
It does return a value that we could store in a variable.

15
00:01:16,430 --> 00:01:20,780
This opens the door to many more applications that you can imagine right now.

16
00:01:20,780 --> 00:01:24,440
And Federico is waiting for you in pitch time to put it into practice.

17
00:01:25,130 --> 00:01:29,600
And now we're going to put into practice the functions using the return keyword.

18
00:01:29,960 --> 00:01:33,890
We're going to use a similar example, the one that Phil showed you in the previous video.

19
00:01:34,640 --> 00:01:36,800
We create a function with the word death.

20
00:01:37,010 --> 00:01:42,230
We're going to name it multiply because that is my function is going to do and it is going to ask the

21
00:01:42,230 --> 00:01:44,150
user to pass two parameters.

22
00:01:44,420 --> 00:01:50,270
The first one will be number one, and the second, number two, we put the colon and we're in the proper

23
00:01:50,270 --> 00:01:53,390
indentation to start writing the contents of my function.

24
00:01:53,900 --> 00:01:56,230
This time I'm not going to put a print function.

25
00:01:56,240 --> 00:02:01,340
Instead, I'm going to write the return, which is the most normal thing that you find in all functions.

26
00:02:01,640 --> 00:02:05,720
A word return in some place of its code generally at the end.

27
00:02:06,290 --> 00:02:11,510
And what this function is going to return is the result of multiplying number one times number two.

28
00:02:11,840 --> 00:02:14,150
And with this, we already have our function finished.

29
00:02:15,080 --> 00:02:19,910
So if I execute this, we're going to see, as we saw in the previous lecture, that because we did

30
00:02:19,910 --> 00:02:23,120
not invoke this function, we have only declared it.

31
00:02:23,150 --> 00:02:24,890
There is nothing to show in screen.

32
00:02:25,340 --> 00:02:27,410
But now pay attention to this.

33
00:02:27,680 --> 00:02:34,550
Even if I invoke it calling, multiply and pass it to values, for example, five and ten and then execute

34
00:02:34,550 --> 00:02:35,000
it.

35
00:02:35,000 --> 00:02:37,670
We are not going to have anything on the screen either.

36
00:02:37,850 --> 00:02:38,570
Why?

37
00:02:39,020 --> 00:02:42,770
Because this function does not have any code that shows something on the screen.

38
00:02:43,010 --> 00:02:48,890
It only has a return that what it does is to return some information, as we have not done anything

39
00:02:48,890 --> 00:02:49,990
with that information.

40
00:02:50,000 --> 00:02:51,890
It is not seen on the screen.

41
00:02:52,370 --> 00:02:59,270
But if, for example, what I would do with this is to print this declaration of the function and execute

42
00:02:59,270 --> 00:02:59,660
it.

43
00:03:00,020 --> 00:03:06,740
Now we see the result on screen because multiply returns a value that I'm passing it to a print statement.

44
00:03:07,720 --> 00:03:11,050
But this is not the most common use of functions either.

45
00:03:11,080 --> 00:03:16,600
Normally what we do with a function is to store it in a variable so that we can do whatever we want

46
00:03:16,600 --> 00:03:17,470
with it later.

47
00:03:17,500 --> 00:03:24,520
So this could be called result, and now a result is in a variable and I can print result.

48
00:03:24,730 --> 00:03:30,460
And then we are going to see on the screen 50 is the consequence of having printed the variable that

49
00:03:30,460 --> 00:03:36,880
contains my function to which I've passed the numbers five and ten in this case, as I could have passed

50
00:03:36,880 --> 00:03:43,180
five and 200, and it will continue working because this function is prepared to work with any value

51
00:03:43,180 --> 00:03:45,160
that I pass in my parameters.

52
00:03:46,260 --> 00:03:51,660
Sometimes you will also see that the functions, instead of having only the return, can have the operation

53
00:03:51,660 --> 00:03:54,930
or all of its code inside internal variables.

54
00:03:55,610 --> 00:04:03,020
So let's suppose here the variable total, that total is the one that stores the multiplication and

55
00:04:03,020 --> 00:04:07,430
then what the function returns is total and it will work exactly the same.

56
00:04:08,440 --> 00:04:14,560
So this lecture complements the previous one where we learn the structure, the syntax of a function.

57
00:04:14,560 --> 00:04:20,680
But now we're also working with return, which although it is not a technical requirement that has to

58
00:04:20,680 --> 00:04:24,640
be there, it is the most common actually.

59
00:04:24,640 --> 00:04:28,510
That is what functions are for to make a process and obtain a result.

60
00:04:28,810 --> 00:04:30,310
The result is return.

61
00:04:31,120 --> 00:04:36,640
So many students ask, what is the difference between printing inside a function or putting return?

62
00:04:37,000 --> 00:04:42,790
Well, print is only going to show something on the screen to the user, but then that information dies.

63
00:04:42,820 --> 00:04:44,920
This is not possible to use it anymore.

64
00:04:44,950 --> 00:04:46,450
It is only on the screen.

65
00:04:46,480 --> 00:04:48,100
It is not stored anywhere.

66
00:04:48,910 --> 00:04:51,130
On the other hand, return when returning.

67
00:04:51,130 --> 00:04:57,030
As a result, any type of result like a string, a float, an integer or a dictionary, whatever.

68
00:04:57,040 --> 00:04:59,490
We can use that information as we want.

69
00:04:59,500 --> 00:05:05,320
We can print it, for example, or store it in a variable, use it in future operations, in future

70
00:05:05,320 --> 00:05:06,850
functions, and so on.

71
00:05:07,930 --> 00:05:13,780
I also want you to know that it's not common, but if you want to use it also in addition to return,

72
00:05:13,780 --> 00:05:16,060
you can also print something on the screen.

73
00:05:16,790 --> 00:05:20,450
You can just say in here also print total.

74
00:05:20,840 --> 00:05:26,780
And now even if I don't print the result of my function as inside the function, there is a print command.

75
00:05:26,810 --> 00:05:29,690
The result will be printed and also stored.

76
00:05:29,720 --> 00:05:32,990
This is technically possible, but it is not common to see.

77
00:05:33,840 --> 00:05:38,740
Perhaps the beginners usually do it to be able to go checking as they construct their code.

78
00:05:38,760 --> 00:05:41,730
So what is happening here and be able to see its result?

79
00:05:41,940 --> 00:05:45,720
But the typical thing is that functions only return something.

80
00:05:46,590 --> 00:05:51,510
There is a problem that we are going to solve later is that this function does not establish what type

81
00:05:51,510 --> 00:05:53,520
of data I need the user to enter.

82
00:05:53,580 --> 00:05:59,190
My function is set up to work with integers and floats because I can multiply those data types.

83
00:05:59,310 --> 00:06:04,020
But what if the user, instead of giving me a five or any of the number, he gave me a string.

84
00:06:04,920 --> 00:06:07,950
Let's do that with 202 and I run this.

85
00:06:08,580 --> 00:06:13,950
I get an error because it tells me that they cannot multiply sequences of elements that are not integers

86
00:06:13,950 --> 00:06:14,970
like strings.

87
00:06:15,450 --> 00:06:17,040
So here I have a problem.

88
00:06:18,330 --> 00:06:24,000
I'm trusting that the user is going to know what to do, so I'm allowing him to do what he wants and

89
00:06:24,000 --> 00:06:26,790
if he does what he wants, the program is going to crash.

90
00:06:27,300 --> 00:06:33,060
So right now, let's keep this in mind because we're going to learn how to solve it later, how to handle

91
00:06:33,060 --> 00:06:35,380
that these variables or parameters set.

92
00:06:35,400 --> 00:06:37,560
What types of data I need in here?

93
00:06:37,800 --> 00:06:39,180
We will see it later.

94
00:06:39,870 --> 00:06:41,880
So I thank you very much for joining us.

95
00:06:41,880 --> 00:06:47,340
Step by step in this process of learning the functions, there is still a lot to find out.

96
00:06:47,340 --> 00:06:50,220
So after the practices, we'll see you in the next lecture.
