WEBVTT
1
00:00:08.090 --> 00:00:11.990
You already know what a function is and how we build a basic function.

2
00:00:12.020 --> 00:00:18.050
You already know that functions are blocks of code that you can invoke from anywhere in your code and

3
00:00:18.050 --> 00:00:23.150
have them execute in different situations depending on the parameters we pass to them.

4
00:00:23.390 --> 00:00:28.550
In this lecture, I want to show you how to make many functions interact with each other because it

5
00:00:28.550 --> 00:00:32.240
is normal for programs to have several functions that do this.

6
00:00:32.660 --> 00:00:38.840
So we can execute a function and use its result as a parameter of a different function.

7
00:00:39.320 --> 00:00:43.420
And we're going to put it into practice with a little game called Pick the Stick.

8
00:00:43.430 --> 00:00:44.630
You may already know it.

9
00:00:44.660 --> 00:00:47.570
So one shows you four sticks in their fist.

10
00:00:47.780 --> 00:00:53.930
You pick one of the sticks and if you get the shortest stick, then you lose and you have to take the

11
00:00:53.930 --> 00:00:55.730
garbage out or do the dishes.

12
00:00:56.120 --> 00:00:58.100
Well, our code is going to do that.

13
00:00:58.100 --> 00:01:04.910
It's going to tell the user to pick one of four sticks and tell them if they get the shortest one or

14
00:01:04.910 --> 00:01:06.770
if they're safe at this time.

15
00:01:06.950 --> 00:01:13.430
Of course, we can't visually show this with our code right now, but we can simulate it by relaying

16
00:01:13.430 --> 00:01:14.480
what happens.

17
00:01:14.720 --> 00:01:20.540
The goal of this lecture is to show you the interaction between different functions and how we are going

18
00:01:20.540 --> 00:01:23.870
to make one function pass an object to another.

19
00:01:24.050 --> 00:01:25.490
So let's go to the code.

20
00:01:26.060 --> 00:01:31.880
As we're going to generate a code that requires a lot of functions, let's first create kind of a script

21
00:01:31.880 --> 00:01:34.040
about how to use with this code.

22
00:01:34.370 --> 00:01:39.920
First, we're going to need an initial list, including the little sticks the user will need.

23
00:01:40.750 --> 00:01:46.540
Then we need to create a function in charge of mixing the sticks so that they are not in order.

24
00:01:46.570 --> 00:01:49.960
Otherwise, it will be easy to identify which is which.

25
00:01:50.410 --> 00:01:56.470
After that, we'll need another function that asks the user to choose one of the four numbers.

26
00:01:57.220 --> 00:02:02.440
And finally, once the user has chosen their number, another function is needed to check.

27
00:02:02.790 --> 00:02:09.250
That's to check the player's try, whether it is the first, second, third or fourth, and who's going

28
00:02:09.250 --> 00:02:11.470
to have to wash the dishes or not.

29
00:02:11.860 --> 00:02:17.360
Remember that we use the hash sign to write the line which will not be executed.

30
00:02:17.380 --> 00:02:22.810
That way we can write inoffensive comments that won't damage the program and will help us understand

31
00:02:22.810 --> 00:02:24.250
the functioning of our code.

32
00:02:24.280 --> 00:02:26.170
So far, so good, right?

33
00:02:26.470 --> 00:02:29.320
So now we know how to proceed.

34
00:02:29.620 --> 00:02:33.970
To begin with, we have to create an initial list, which is very simple.

35
00:02:34.240 --> 00:02:41.850
This list is called sticks, and we'll put a sequence of numbers from 1 to 4, all to make it even funnier.

36
00:02:41.860 --> 00:02:45.010
A graphic representation with dashes.

37
00:02:45.160 --> 00:02:51.080
The smallest stick is going to have just one dash and the next one, two dashes.

38
00:02:51.100 --> 00:02:55.120
Then we have another one with three dashes, and finally, one with four.

39
00:02:55.420 --> 00:02:58.330
These are the four elements we have in our list.

40
00:02:58.720 --> 00:03:02.770
Let's move on to the next step, which will make all the little sticks up.

41
00:03:02.950 --> 00:03:08.560
May I remind you that we use the shuffle method to mix, but this method will not be present within

42
00:03:08.560 --> 00:03:11.590
our library if we forget to import it first.

43
00:03:12.040 --> 00:03:19.990
So at the top of our code we can type that from random the class with the shuffle method import and

44
00:03:19.990 --> 00:03:21.820
then we right here shuffle.

45
00:03:22.510 --> 00:03:28.060
In case you don't remember how to write it or look for it, just press control and the spacebar at the

46
00:03:28.060 --> 00:03:28.780
same time.

47
00:03:28.780 --> 00:03:30.580
And you will see all the options.

48
00:03:30.820 --> 00:03:34.270
And here you have shuffle so that you can import it.

49
00:03:35.390 --> 00:03:37.370
So we're ready to mix the list.

50
00:03:37.430 --> 00:03:43.190
If we did it outside the function, we would have to simply type shuffle and then type in parentheses

51
00:03:43.190 --> 00:03:45.650
the name of our list, which is sticks.

52
00:03:46.040 --> 00:03:47.000
And that's all.

53
00:03:48.020 --> 00:03:51.490
Keep in mind, the shuffle won't send you anything back.

54
00:03:51.500 --> 00:03:53.810
We can't put it within a variable.

55
00:03:53.870 --> 00:04:00.080
Shuffle only has a function there and would be better to include it inside a function to obtain the

56
00:04:00.080 --> 00:04:01.820
mix the sticks outcome.

57
00:04:03.190 --> 00:04:04.930
And we do it in the following way.

58
00:04:05.200 --> 00:04:08.490
The function may be called mix within its parameters.

59
00:04:08.500 --> 00:04:12.100
Obviously the function will need for us to pass a list to it.

60
00:04:12.370 --> 00:04:19.150
That's the name for now, a variable that later will be the occupied by a list we pass to it, in this

61
00:04:19.150 --> 00:04:20.410
case sticks.

62
00:04:21.850 --> 00:04:24.790
Will have two very simple lines in the function.

63
00:04:24.790 --> 00:04:30.850
One saying Shuffle, which is responsible for mixing the list that has been passed and that will later

64
00:04:30.850 --> 00:04:33.190
return list with a different name.

65
00:04:33.970 --> 00:04:37.310
Our second step is done and to verify it is working properly.

66
00:04:37.330 --> 00:04:43.210
We're going to call mix and pass sticks to it and print this to be able to see it on the screen.

67
00:04:43.540 --> 00:04:50.650
So let's execute it from run, run and interact function to see here that our list appears randomly

68
00:04:50.650 --> 00:04:52.300
every time we execute it.

69
00:04:52.990 --> 00:04:53.580
Great.

70
00:04:53.590 --> 00:04:54.400
It works.

71
00:04:54.670 --> 00:04:56.140
So we could delete that line.

72
00:04:56.140 --> 00:05:00.430
Whose function is just to verify and move on to the third step.

73
00:05:00.490 --> 00:05:03.160
Ask the player to play and try their luck.

74
00:05:03.190 --> 00:05:05.390
That's how we'll entitle this function.

75
00:05:05.410 --> 00:05:09.520
Try your look, which won't require any parameter.

76
00:05:09.520 --> 00:05:13.050
So let's go straight into the function where we need to do what?

77
00:05:13.570 --> 00:05:17.110
Ask the user to pick a number between one and four.

78
00:05:17.260 --> 00:05:20.050
We will store in a variable the number they choose.

79
00:05:20.050 --> 00:05:26.290
So the variable will be called try and we'll initialize empty in order to save their the player's choice.

80
00:05:27.340 --> 00:05:32.920
We're going to ask the user a number and to make sure the number they pick is not any number or letter,

81
00:05:32.920 --> 00:05:35.080
but a number between one and four.

82
00:05:35.110 --> 00:05:42.400
We put this command within a while that verifies whether what has been introduced is right or not.

83
00:05:42.760 --> 00:05:52.330
So while try is not on a list with the numbers ranging from one to 2 to 3 and four like strings, what

84
00:05:52.330 --> 00:05:58.600
the system is going to do is to ask the user to choose a number between one and four again by means

85
00:05:58.600 --> 00:06:02.380
of an input stored in the variable try.

86
00:06:03.100 --> 00:06:08.560
Here we type colon and a space for the user to have enough room to write their choice.

87
00:06:09.670 --> 00:06:14.110
So you may wonder why I'm writing the numbers as strings and not as integers.

88
00:06:14.440 --> 00:06:15.520
Well, because what?

89
00:06:15.520 --> 00:06:19.450
The only user types, although it is a number, it will be a string.

90
00:06:19.750 --> 00:06:25.690
So the easiest thing to do is to check directly with the strings before converting what the user typed

91
00:06:25.690 --> 00:06:26.590
to an integer.

92
00:06:26.830 --> 00:06:32.380
The thing is that this loop is going to repeat itself as many times as necessary until the user enters

93
00:06:32.380 --> 00:06:33.310
the right number.

94
00:06:33.980 --> 00:06:39.860
Once they get out of the loop after having entering a right number, it's going to send us back the

95
00:06:39.860 --> 00:06:44.630
number, but not as it appears the number will be cast to an integer.

96
00:06:45.980 --> 00:06:52.340
Now we have to check whether this function works or not by saving the try one just to put a name to

97
00:06:52.340 --> 00:06:57.620
it, to the invocation of try your look and then let's print, try one.

98
00:06:57.800 --> 00:06:59.610
And here we have the request.

99
00:06:59.630 --> 00:07:02.300
Choose a number between one and four.

100
00:07:03.090 --> 00:07:04.230
I write ten.

101
00:07:04.680 --> 00:07:06.060
Ask me the same again.

102
00:07:06.330 --> 00:07:12.660
I type five and again now I type R and the same happens once again.

103
00:07:13.290 --> 00:07:18.060
Now I'm try typing one, but with written letters it doesn't work.

104
00:07:18.150 --> 00:07:24.990
But if I type three now it does print three because I've asked it to do so outside of the function and

105
00:07:24.990 --> 00:07:26.850
we've gotten out of the code.

106
00:07:27.120 --> 00:07:32.370
So we're going to delete these two lines here to work in an orderly manner that lets you follow how

107
00:07:32.370 --> 00:07:33.540
your code works.

108
00:07:33.720 --> 00:07:39.480
Here you'll see that alongside each of these functions you have these buttons which allows you to compress

109
00:07:39.480 --> 00:07:40.650
what is in the code.

110
00:07:40.920 --> 00:07:42.180
So don't panic.

111
00:07:42.270 --> 00:07:43.680
It hasn't disappeared.

112
00:07:43.710 --> 00:07:47.640
It is simply compressed here and you can open it again to see it better.

113
00:07:47.880 --> 00:07:51.420
However, look here we have everything more organized.

114
00:07:51.600 --> 00:07:53.850
Our three steps already completed.

115
00:07:54.660 --> 00:08:01.020
Now let's continue with the last step, which is to check whether the users try coincides with the shortest

116
00:08:01.020 --> 00:08:02.160
stick or not.

117
00:08:02.960 --> 00:08:08.750
We'll call this function, verify, try, and it will require information in order to carry out its

118
00:08:08.750 --> 00:08:09.440
task.

119
00:08:09.830 --> 00:08:15.320
Since this function is going to check, it needs a list, which is the original list containing the

120
00:08:15.320 --> 00:08:19.550
elements, and it also needs the try the user has had.

121
00:08:20.210 --> 00:08:24.200
Remember that these are internal variables because they are parameters.

122
00:08:24.560 --> 00:08:26.240
We'll see where to get them from.

123
00:08:26.270 --> 00:08:28.340
Now we're going to go to verify.

124
00:08:28.370 --> 00:08:37.070
We start with an F which checks where the list in its location equal to try minus one Y minus one because

125
00:08:37.070 --> 00:08:39.510
lists are index from zero onwards.

126
00:08:39.530 --> 00:08:46.400
I mean, our list will have the indices zero, one, two and three, while the user will enter the number

127
00:08:46.400 --> 00:08:48.650
one, two, three or four.

128
00:08:48.860 --> 00:08:55.280
So by writing minus one, we can transform the user's try into a number with a unit lower than the one

129
00:08:55.280 --> 00:08:59.840
that has been entered that way, making it match the index numbers.

130
00:09:00.110 --> 00:09:00.980
Am I clear?

131
00:09:01.490 --> 00:09:09.110
If that users try coincides with the value of the shortest stick, the one having only one dash colon,

132
00:09:09.410 --> 00:09:11.980
it will inform about its printing here.

133
00:09:11.990 --> 00:09:14.900
Something like wash the dishes.

134
00:09:14.930 --> 00:09:19.490
Otherwise, if the user got any of the other two sticks it will print.

135
00:09:19.490 --> 00:09:21.530
This time you are safe.

136
00:09:22.790 --> 00:09:28.550
Once he is over here, we are going to print the stick to let the user know which stick they got.

137
00:09:29.150 --> 00:09:37.700
So we write a string literal that reads you got and then we call list in its location as we have already

138
00:09:37.700 --> 00:09:38.300
seen.

139
00:09:38.300 --> 00:09:39.950
Try minus one.

140
00:09:41.060 --> 00:09:42.980
Now we have a last function.

141
00:09:43.370 --> 00:09:47.360
This one does not send anything back because it is the last one of our code.

142
00:09:47.810 --> 00:09:49.460
It just prints on screen.

143
00:09:49.460 --> 00:09:52.010
The result we can close it.

144
00:09:53.360 --> 00:09:58.910
Though we cannot check it because we need a result from Try Your Luck because it needs a try.

145
00:09:59.390 --> 00:10:01.880
And this is the central part of our lesson.

146
00:10:02.150 --> 00:10:06.740
We'll see how this function will need the results of the other function to work properly.

147
00:10:07.100 --> 00:10:11.750
Here is where we're going to write our code, because so far this code is useless.

148
00:10:12.410 --> 00:10:14.450
See what happens when our executed.

149
00:10:14.480 --> 00:10:19.580
Nothing happens, although it is full of functions because we haven't invoked any function yet.

150
00:10:20.090 --> 00:10:23.060
It is simply here to be used whenever we want it.

151
00:10:23.210 --> 00:10:25.670
And that's exactly what we're going to do now.

152
00:10:25.790 --> 00:10:29.210
Let's start by giving it the command of mixing the sticks up.

153
00:10:29.450 --> 00:10:36.920
So we'll store the invocation of the function mix in mixed sticks, to which we'll pass sticks.

154
00:10:37.520 --> 00:10:41.000
This is already a line to be executed and showed on screen.

155
00:10:41.150 --> 00:10:44.960
Then let's call a second function, which is try your look.

156
00:10:45.380 --> 00:10:52.430
We will store it in a variable named selection and it will have try your look, which doesn't have parameters.

157
00:10:53.600 --> 00:10:59.810
And finally, we're going to call, verify, try, which doesn't need to be stored in any variable since

158
00:10:59.810 --> 00:11:01.520
it doesn't return anything.

159
00:11:01.910 --> 00:11:04.570
So keep in mind it requires two parameters.

160
00:11:04.580 --> 00:11:06.760
First, the mix sticks list.

161
00:11:06.770 --> 00:11:10.130
That is to say, the outcome of having mixed the sticks.

162
00:11:10.640 --> 00:11:17.840
And the second parameter is try, which we got from the selection variable if you remember, and this

163
00:11:17.840 --> 00:11:22.910
is the interesting part, selection contains the result of this function.

164
00:11:23.090 --> 00:11:29.480
So it is paramount for the functions to be executed in order otherwise verify.

165
00:11:29.480 --> 00:11:32.330
Try would not have anything for the selection.

166
00:11:32.660 --> 00:11:37.370
So now we can execute it and it tells us to pick a number between one and four.

167
00:11:37.970 --> 00:11:39.290
I'll choose five.

168
00:11:39.380 --> 00:11:40.460
It's invalid.

169
00:11:40.460 --> 00:11:43.880
I choose one this time and this is my result.

170
00:11:44.630 --> 00:11:46.310
I can't escape my destiny.

171
00:11:46.610 --> 00:11:48.410
I'm doomed to wash the dishes.

172
00:11:48.530 --> 00:11:51.620
I'm bound to always pick the shortest stick.

173
00:11:51.950 --> 00:11:54.760
So I'm going to honor my promise and do the dishes.

174
00:11:54.770 --> 00:11:57.950
And in the meantime, you can solve the activities that follow.

175
00:11:58.400 --> 00:12:00.830
I'll be waiting for you in our next lesson.

176
00:12:00.860 --> 00:12:01.730
See you there.
