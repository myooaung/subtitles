WEBVTT
1
00:00:07.910 --> 00:00:10.880
We already know two specific string methods.

2
00:00:10.880 --> 00:00:16.670
The index method, which allows us to identify at which index a given character is found.

3
00:00:16.670 --> 00:00:22.370
And the format method we saw yesterday which allows us to format combine strings.

4
00:00:22.370 --> 00:00:28.550
In this lecture, we are going to quickly learn six more methods that are very simple to use and they

5
00:00:28.550 --> 00:00:36.980
are upper for uppercase, lower for lowercase split, which is used to transform an entire string into

6
00:00:36.980 --> 00:00:42.650
a list of words or set of characters join which does the opposite of split.

7
00:00:42.650 --> 00:00:48.500
It takes a list of strings and joins them together by adding the separators of your choice.

8
00:00:48.500 --> 00:00:51.770
This is very useful and we'll see it in a minute.

9
00:00:52.070 --> 00:00:59.210
Find which is very similar to index but with a small difference we'll see pretty soon and replace this

10
00:00:59.210 --> 00:01:01.750
one allows us to replace parts of a string.

11
00:01:01.760 --> 00:01:05.840
These are just six of more than 30 methods that string has.

12
00:01:05.960 --> 00:01:11.150
It doesn't make sense to go through them one by one in these video lectures, since some of them are

13
00:01:11.150 --> 00:01:13.700
too specific or too infrequently used.

14
00:01:13.700 --> 00:01:20.390
But you'll find a list in the PDF notes next to this lecture containing all of the methods for strings

15
00:01:20.390 --> 00:01:21.620
that exist in Python.

16
00:01:21.620 --> 00:01:27.190
In case you want to have it handy, be sure to download it so you have it available if you need it for

17
00:01:27.230 --> 00:01:32.510
right now, let's go to Pi Charm and see how to apply these six methods in our code.

18
00:01:32.990 --> 00:01:36.440
And now we're in the code ready to see how these methods work.

19
00:01:36.770 --> 00:01:40.010
First, we're going to create the conditions in which we're going to work.

20
00:01:40.490 --> 00:01:44.000
We're going to do it with a variable that is also going to be called text.

21
00:01:44.000 --> 00:01:48.830
And this time it is going to say we are going to learn six methods today.

22
00:01:49.670 --> 00:01:51.020
This is just an example.

23
00:01:51.020 --> 00:01:55.130
I missed the quotation marks here, so okay, otherwise it will not work.

24
00:01:55.430 --> 00:02:00.830
And we're also going to create a variable called result and this variable is going to store the variable

25
00:02:00.830 --> 00:02:03.710
text now, but we will change that later.

26
00:02:04.340 --> 00:02:08.450
Now we're going to print result to see on the screen what we're doing.

27
00:02:08.780 --> 00:02:12.140
Let's execute this and we see our text.

28
00:02:12.140 --> 00:02:14.690
We are going to learn six methods today.

29
00:02:14.900 --> 00:02:15.650
Excellent.

30
00:02:16.130 --> 00:02:22.970
What we will now do is to begin to apply methods and we're going to do it here inside the variable result.

31
00:02:23.420 --> 00:02:28.190
First, we're going to know a method that allows to transform all the characters of a string into capital

32
00:02:28.190 --> 00:02:28.730
letters.

33
00:02:29.510 --> 00:02:35.420
And this is none other than the upper method, which we can see if we press the dot and see the entire

34
00:02:35.420 --> 00:02:41.240
list of methods, I write the letter you to shrink it and here I see upper and we choose it.

35
00:02:41.960 --> 00:02:47.090
As you can see, the methods are written with a pair of brackets that open and close, and this warns

36
00:02:47.090 --> 00:02:49.130
the system that we are working with a method.

37
00:02:49.490 --> 00:02:52.910
Many times these brackets are not going to have anything inside.

38
00:02:52.910 --> 00:02:55.880
It means that the method does not need more information to work.

39
00:02:55.880 --> 00:03:01.880
As in this case in which I click and here I have we're going to learn six methods today, all in capital

40
00:03:01.880 --> 00:03:07.190
letters, but you'll also see some methods that you may need to enter, some parameters that allow you

41
00:03:07.190 --> 00:03:09.260
to determine how this method will work.

42
00:03:09.440 --> 00:03:14.180
Still, when you don't need to give the parameters, the brackets should be written always.

43
00:03:14.420 --> 00:03:19.670
Actually, if I take out the brackets here and we want to run this, as you see, it doesn't throw me

44
00:03:19.670 --> 00:03:20.240
an error.

45
00:03:20.390 --> 00:03:26.720
It's simply telling me now that what result has is a built in method which is upper, and it belongs

46
00:03:26.720 --> 00:03:28.880
to the string object as this location.

47
00:03:29.180 --> 00:03:32.540
It just gives us some information, but it doesn't execute the method.

48
00:03:32.990 --> 00:03:35.450
It just tells us what the results contains.

49
00:03:36.660 --> 00:03:38.100
If I put the brackets again.

50
00:03:38.100 --> 00:03:39.030
Now it does.

51
00:03:39.630 --> 00:03:45.210
Another thing we can do if given the case that we don't want, for example, to transform all the text

52
00:03:45.210 --> 00:03:51.630
into uppercase inside result, we can determine, as we saw in the previous lecture, a particular index.

53
00:03:51.780 --> 00:03:57.840
So inside the braces I will put the example the index for, and I'm telling it that the results will

54
00:03:57.840 --> 00:04:03.540
be equal to only the index four, which in this case is the letter R, but in uppercase.

55
00:04:03.750 --> 00:04:07.560
And as you can see now, only the R is printed in a capital letter.

56
00:04:07.830 --> 00:04:12.210
Well, also, if there is a method that makes everything in uppercase, there must be another method

57
00:04:12.210 --> 00:04:13.830
to make everything in lowercase.

58
00:04:14.430 --> 00:04:15.870
This method is called lower.

59
00:04:16.470 --> 00:04:19.410
We execute it and here we have that.

60
00:04:19.410 --> 00:04:24.750
We're going to learn six methods today without the capital letter of the beginning, all in lowercase.

61
00:04:24.750 --> 00:04:26.550
So let's move on to another method.

62
00:04:26.550 --> 00:04:32.610
The split method split allows us to split our strings in several pieces and it is going to save all

63
00:04:32.610 --> 00:04:33.900
of them inside a list.

64
00:04:34.320 --> 00:04:39.210
So if I execute this now, what I'm going to have is that the result is equal to a list.

65
00:04:39.480 --> 00:04:40.410
What is a list?

66
00:04:40.410 --> 00:04:43.080
We're going to see list later on in a couple of lectures.

67
00:04:43.080 --> 00:04:48.180
But in the meantime, I want you to know that lists are a collection of items and we store its contents

68
00:04:48.180 --> 00:04:49.890
inside square brackets.

69
00:04:49.890 --> 00:04:54.000
And here we have then a list composed by all the words that are in my text.

70
00:04:54.000 --> 00:04:57.690
Now it's separated in as many elements as words have my sentence.

71
00:04:58.110 --> 00:05:00.390
We will see later how we work with lists.

72
00:05:00.390 --> 00:05:03.390
Don't worry about that now, but you can understand this for now.

73
00:05:03.750 --> 00:05:08.760
I also want you to know that what split does is to separate the elements using the empty spaces as a

74
00:05:08.760 --> 00:05:09.450
separate.

75
00:05:10.150 --> 00:05:11.620
This is why it does by default.

76
00:05:11.620 --> 00:05:17.230
But if I pass a different separator as a parameter between its parentheses, for example, I put here

77
00:05:17.230 --> 00:05:18.160
the letter O.

78
00:05:18.490 --> 00:05:23.830
Now my list will be composed by all the elements that are formed taking O as a separator.

79
00:05:24.880 --> 00:05:29.620
Then the first group is we are G because the next letter should be an O.

80
00:05:29.650 --> 00:05:31.060
And that's a separator.

81
00:05:31.420 --> 00:05:34.270
The next group says I and g t.

82
00:05:34.540 --> 00:05:40.780
The next one learn six math, then DST and finally day.

83
00:05:41.200 --> 00:05:46.840
So that's how you determine what the split criteria is going to be and how groups will be created.

84
00:05:46.900 --> 00:05:48.270
Let's learn one more method.

85
00:05:48.280 --> 00:05:49.600
We've already seen three.

86
00:05:49.900 --> 00:05:55.000
Now we're going to look at the fourth one, which is join and join is the opposite of split.

87
00:05:55.030 --> 00:05:57.340
We're going to create something different down here.

88
00:05:57.370 --> 00:05:59.470
We're going to make a couple of variables.

89
00:05:59.500 --> 00:06:02.350
The first one is going to have the text learning.

90
00:06:02.440 --> 00:06:05.140
The second variable is going to have the text python.

91
00:06:05.470 --> 00:06:07.870
And the third variable will be is.

92
00:06:07.990 --> 00:06:10.330
And the last variable is going to have.

93
00:06:10.360 --> 00:06:11.260
Amazing.

94
00:06:12.390 --> 00:06:18.510
As you can see, I chose four words that can form a sentence, and now I'm going to create a fifth variable,

95
00:06:18.540 --> 00:06:23.760
the variable E, to which I will simply generate the space that I want to be used to join all these

96
00:06:23.760 --> 00:06:26.340
words that would be separated by space.

97
00:06:26.610 --> 00:06:31.710
So E equals a space which is also a string, and I put my join method to it.

98
00:06:32.160 --> 00:06:33.990
What is join going to do here?

99
00:06:34.200 --> 00:06:39.600
Let's open the parenthesis and it's going to take all the elements that we include inside the parentheses,

100
00:06:39.600 --> 00:06:41.730
and it's going to separate them with a space.

101
00:06:42.150 --> 00:06:46.840
Of course, the elements that must go inside the parentheses have to be from a list.

102
00:06:46.860 --> 00:06:51.660
Since you don't know how to handle lists yet, I'm going to build a list from the elements we have here.

103
00:06:52.050 --> 00:06:53.910
We simply open the square brackets.

104
00:06:53.910 --> 00:07:00.600
As I told you, the lists go in square brackets, and here we're going to put A, B, C and D, which

105
00:07:00.600 --> 00:07:02.640
are the four elements that I have here.

106
00:07:03.600 --> 00:07:03.870
Here.

107
00:07:03.870 --> 00:07:08.100
I'm creating a list with four elements and I'm joining them with a space between each one of them.

108
00:07:08.520 --> 00:07:12.360
Now, I asked Python to print eight and we run it.

109
00:07:13.730 --> 00:07:15.170
The first line doesn't matter.

110
00:07:15.170 --> 00:07:16.190
It's from before.

111
00:07:16.520 --> 00:07:19.370
But here you can see learning python is amazing.

112
00:07:19.550 --> 00:07:25.400
This has been formed from print E, which has here the union of spaces with the words If I change this

113
00:07:25.400 --> 00:07:29.660
space to something else, for example, hyphen and print it well.

114
00:07:29.690 --> 00:07:32.960
Learning hyphen python hyphen is hyphen amazing.

115
00:07:33.170 --> 00:07:35.600
So it's very simple thing to do.

116
00:07:35.630 --> 00:07:37.610
Still any questions you have?

117
00:07:37.610 --> 00:07:42.320
Remember, you can ask your questions here in this lecture and we'll answer them as soon as possible.

118
00:07:42.530 --> 00:07:43.760
Let's get this out of the way.

119
00:07:43.760 --> 00:07:46.070
And now we're going to look at two more methods.

120
00:07:46.700 --> 00:07:49.010
The penultimate one is find.

121
00:07:49.010 --> 00:07:54.050
And this is not going to be new to you at all because it's exactly the same as the index method, which

122
00:07:54.050 --> 00:07:56.090
we've already seen in the previous lecture.

123
00:07:56.480 --> 00:07:58.160
Well, fine does that.

124
00:07:58.160 --> 00:08:00.680
It looks for a certain character inside my string.

125
00:08:00.800 --> 00:08:05.510
So here I put, for example, the letter S, and it's going to look for it and it's going to find it

126
00:08:05.510 --> 00:08:06.470
inside the index.

127
00:08:06.470 --> 00:08:12.950
22 You may be saying, okay, y then we have find when we also have index.

128
00:08:13.130 --> 00:08:18.590
Well, the only difference between these methods is this when fine doesn't find the substring in your

129
00:08:18.590 --> 00:08:20.150
string as for example.

130
00:08:20.150 --> 00:08:23.480
Q That does not exist in my string and execute it.

131
00:08:24.190 --> 00:08:29.350
Instead of giving me an error as index would do, it just gives me the value minus one.

132
00:08:29.350 --> 00:08:33.490
So when Fine does not find what you're looking for in your text, it will turn minus one.

133
00:08:34.410 --> 00:08:37.470
And finally, we have one more method, which is the replace method.

134
00:08:37.500 --> 00:08:41.820
As you can imagine, this method serves to take a fragment of your text and replace it with another

135
00:08:41.820 --> 00:08:42.210
one.

136
00:08:42.630 --> 00:08:44.820
This method, of course, needs parameters.

137
00:08:45.030 --> 00:08:47.040
In fact, it needs to parameters.

138
00:08:47.220 --> 00:08:50.520
The first is the text that I want to remove, let's say six.

139
00:08:50.820 --> 00:08:56.070
Then the comma to go to the second argument, which is the case is going to be a lot of.

140
00:08:56.580 --> 00:09:00.870
And if I run this, it's going to tell us that we are going to learn a lot of methods today, which

141
00:09:00.870 --> 00:09:01.770
is also true.

142
00:09:02.040 --> 00:09:05.910
And let's suppose now that I want to replace all the E letters by X letters.

143
00:09:06.210 --> 00:09:10.140
If I do this, I'm going to get this impossible to pronounce sentence.

144
00:09:10.590 --> 00:09:14.940
Well, this has been all about the most frequently used methods that we're going to use throughout the

145
00:09:14.940 --> 00:09:15.540
course.

146
00:09:16.050 --> 00:09:18.350
Remember that there are many more methods.

147
00:09:18.360 --> 00:09:19.980
Some are too specific.

148
00:09:19.980 --> 00:09:23.250
We will hardly use them, but some may be useful to you.

149
00:09:23.580 --> 00:09:29.190
I recommend you download the notes that come with this lecture so you can have them handy and know everything

150
00:09:29.190 --> 00:09:30.150
about strings.

151
00:09:30.300 --> 00:09:36.000
Now please do the exercises below and we'll move on to the next lecture to continue growing and learning.
