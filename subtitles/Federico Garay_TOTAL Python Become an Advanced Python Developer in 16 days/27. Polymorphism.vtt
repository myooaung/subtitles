WEBVTT
1
00:00:07.700 --> 00:00:14.210
Polymorphism is another characteristic of object oriented programming, and we've said it is the second

2
00:00:14.210 --> 00:00:15.080
of the pillars.

3
00:00:15.080 --> 00:00:22.010
Its name comes from poly meaning many and morph shapes applied to programming.

4
00:00:22.010 --> 00:00:25.100
It refers to the fact that objects can take different shapes.

5
00:00:25.100 --> 00:00:26.310
But what does this mean?

6
00:00:26.330 --> 00:00:30.920
Well, somehow we have all already been applying polymorphism without knowing it.

7
00:00:30.920 --> 00:00:37.310
In Python, polymorphism means that objects of different classes, for example, those that have different

8
00:00:37.310 --> 00:00:40.760
shapes, can share the same name of methods.

9
00:00:40.760 --> 00:00:46.820
And then you can call those methods of the same name from the same place, but applied to different

10
00:00:46.820 --> 00:00:47.570
objects.

11
00:00:47.570 --> 00:00:50.990
I think explaining is way more confusing than showing it.

12
00:00:50.990 --> 00:00:53.900
I'm kind of confused just saying it right now.

13
00:00:53.900 --> 00:00:56.690
So let's go over to py charm to make it clear.

14
00:00:57.260 --> 00:01:00.840
So let me tell you that polymorphism is not quite intricate yet.

15
00:01:00.890 --> 00:01:05.480
It is very necessary to put into practice so as to understand it better.

16
00:01:05.960 --> 00:01:07.820
So let's create two classes.

17
00:01:07.850 --> 00:01:14.630
The first one will be CAO and it will have its attributes which are self unavoidable and a name and

18
00:01:14.630 --> 00:01:15.410
nothing more.

19
00:01:16.100 --> 00:01:21.350
Our cows will be created with a name, so let's add self name equals name.

20
00:01:21.650 --> 00:01:27.680
We already have a constructor and now we'll create the talk method, the one we have already used.

21
00:01:27.830 --> 00:01:34.670
It won't include other parameters than self, which will say the name of the Cao self name and it will

22
00:01:34.670 --> 00:01:36.680
be concatenated with mus.

23
00:01:37.220 --> 00:01:38.540
What else can a cow say?

24
00:01:38.540 --> 00:01:39.050
Right.

25
00:01:39.920 --> 00:01:43.760
Anyway, the second class will be sheep and we'll copy everything.

26
00:01:43.760 --> 00:01:49.340
Cao has to make it easier because our sheep will basically have a name and the talk method.

27
00:01:49.340 --> 00:01:53.900
But instead of mooing it will bleat, since it is a sheep, of course.

28
00:01:55.020 --> 00:01:56.880
So we have two different classes.

29
00:01:56.880 --> 00:02:00.060
We can create different cow and sheep objects with.

30
00:02:00.540 --> 00:02:04.680
Bear in mind that each one of these objects can have plenty of different methods.

31
00:02:05.130 --> 00:02:09.810
So cows produce milk, sheep produce wool, they have different features.

32
00:02:10.020 --> 00:02:14.660
So let's keep it simple since this method is slightly different for every class.

33
00:02:14.670 --> 00:02:19.400
So now we'll create an instance or object of each of these classes.

34
00:02:19.410 --> 00:02:24.690
So let's create cow one that's equal to cow, and we're required a name.

35
00:02:24.690 --> 00:02:26.730
So it'll be Mandy.

36
00:02:29.100 --> 00:02:32.430
Now we have to create the sheep, one which is equal to sheep.

37
00:02:33.450 --> 00:02:35.460
This one will be named Cloud.

38
00:02:36.340 --> 00:02:38.320
So we created two objects.

39
00:02:38.320 --> 00:02:45.100
Both animals are able to talk as they have their talk methods, meaning that if we call cow one talk

40
00:02:45.100 --> 00:02:48.310
and sheep one talk and we execute it.

41
00:02:48.340 --> 00:02:53.110
Clicking on Run, Run and polymorphism, it reads.

42
00:02:53.110 --> 00:02:54.220
Mandy moves.

43
00:02:55.420 --> 00:02:56.500
Cloud bleeds.

44
00:02:57.160 --> 00:03:03.280
So even though this isn't something astonishing as it is expected to happen, it is the clearest example

45
00:03:03.280 --> 00:03:05.320
of polymorphism I can give you.

46
00:03:05.560 --> 00:03:12.370
So polymorphism two different objects execute a method that has the same name but different functions,

47
00:03:12.610 --> 00:03:15.130
and it all works effectively.

48
00:03:15.310 --> 00:03:20.710
You may not think it is something exceptional and engaging, but is quite simple when we look at our

49
00:03:20.710 --> 00:03:21.370
code.

50
00:03:21.370 --> 00:03:27.940
But this is the basis of polymorphism, so I'll demonstrate it using an iteration which will help you

51
00:03:27.940 --> 00:03:30.400
see what's interesting about this.

52
00:03:30.520 --> 00:03:34.150
So let's delete these lines and create a list named animals.

53
00:03:34.660 --> 00:03:41.950
Animals will contain cow one and sheep one, so it will have two objects of different types, since

54
00:03:41.950 --> 00:03:44.860
the form is a cow and the latter is a sheep.

55
00:03:46.030 --> 00:03:51.790
So we'll start a for loop for each animal in animal's colon.

56
00:03:52.030 --> 00:03:54.460
It will call animal talk.

57
00:03:54.490 --> 00:03:57.130
That is the talk method of each animal.

58
00:03:57.310 --> 00:03:59.500
So here comes the interesting part.

59
00:03:59.680 --> 00:04:05.500
This works as we expect, but think about the reason why polymorphism is a core concept.

60
00:04:05.980 --> 00:04:12.580
This list contains different objects and for each of them has a different method using the same name.

61
00:04:13.420 --> 00:04:19.480
When iterating, polymorphism allows us to call each of these objects differently and make them execute

62
00:04:19.480 --> 00:04:23.650
methods that are named the same and carry out different functions.

63
00:04:23.800 --> 00:04:30.340
So although this is a way of understanding the importance of polymorphism in object orientated programming,

64
00:04:30.610 --> 00:04:34.050
demonstrating it with functions will be much better.

65
00:04:34.060 --> 00:04:38.770
So let's delete all this and create a function named animal talks.

66
00:04:39.800 --> 00:04:42.080
Animal talks will ask for an animal.

67
00:04:42.080 --> 00:04:46.160
But here, the type of object used as a parameter won't matter.

68
00:04:51.590 --> 00:04:56.780
So let's open a call for this function and call it with different objects.

69
00:04:56.780 --> 00:05:02.270
So first we'll call animal talks and pass the cow one object to it.

70
00:05:02.510 --> 00:05:09.650
Now we'll execute it and see that Mandy moves because this object found its talk method and was able

71
00:05:09.650 --> 00:05:16.400
to execute it and let's execute it once again using sheep one which is a different object.

72
00:05:16.850 --> 00:05:18.830
Now cloud bleeds.

73
00:05:19.310 --> 00:05:25.220
And here we can also see the importance of polymorphism in programming languages that support it.

74
00:05:25.220 --> 00:05:26.270
Like Python.

75
00:05:26.690 --> 00:05:32.330
Regardless of the animal you pass here, you can execute methods that share the same name.

76
00:05:32.720 --> 00:05:36.860
And let me repeat this cow and sheep are different classes.

77
00:05:37.040 --> 00:05:41.780
They could be different in hundreds of ways, and yet they share the same name of method.

78
00:05:42.350 --> 00:05:48.110
So as programmers we can take advantage of polymorphism to iterate through objects that are different

79
00:05:48.110 --> 00:05:52.100
in order to call methods that share a name and do different things.

80
00:05:52.720 --> 00:05:58.210
So we can also create functions that execute different methods regardless of the type of object we pass

81
00:05:58.210 --> 00:05:58.810
to them.

82
00:05:59.170 --> 00:06:05.800
So polymorphism is a central feature of object orientated programming, and this was the second major

83
00:06:05.800 --> 00:06:06.520
feature.

84
00:06:06.610 --> 00:06:12.790
The first one was Inheritance, and before calling it a day and Starting, today's project will learn

85
00:06:12.790 --> 00:06:14.950
how to perform some other tasks.

86
00:06:15.160 --> 00:06:21.430
So tomorrow we'll keep on covering the other fundamental concepts of object orientated programming.

87
00:06:21.820 --> 00:06:23.650
So I'll see you in the next lesson.
