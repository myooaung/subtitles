1
00:00:08,300 --> 00:00:13,220
For starters, I want to introduce you to the starring role, which is pie game.

2
00:00:13,760 --> 00:00:20,990
This tool is very powerful and allows us to create any games that we want and we can find it at pi p

3
00:00:20,990 --> 00:00:21,890
dot org.

4
00:00:22,490 --> 00:00:26,600
Here we have the instructions to install PI game in our computer.

5
00:00:27,410 --> 00:00:29,390
This is the newest pi game version.

6
00:00:29,570 --> 00:00:33,950
However, it's likely that a newer version will exist by the time you watch this video.

7
00:00:34,400 --> 00:00:38,240
Hey, we can see some descriptions that help us know more about PI Game.

8
00:00:38,240 --> 00:00:43,100
And there's an access to its documents which I advise you to read.

9
00:00:44,480 --> 00:00:48,320
Remember that nobody reads all the documents before starting to work.

10
00:00:48,560 --> 00:00:52,820
People only read the most important characteristics in order to use a program.

11
00:00:53,210 --> 00:00:57,080
Then when you need help, you can come back here and broaden your knowledge.

12
00:00:58,370 --> 00:01:03,110
So in today's lecture, I'm going to teach you how to use it in order to create the basic game.

13
00:01:03,620 --> 00:01:06,530
From then on, you can keep on researching.

14
00:01:07,310 --> 00:01:09,230
Well, let's install this program.

15
00:01:09,230 --> 00:01:14,870
And as you already know, we use pip install pi game and I've already got it.

16
00:01:14,870 --> 00:01:20,240
So I won't be seeing the same things on our screens and you'll see the installation process.

17
00:01:20,810 --> 00:01:25,100
We can close this and go to Pi Charm, where we can begin with a new file.

18
00:01:26,060 --> 00:01:31,370
I've created one named Main and now I'm going to import PI game in order to access it.

19
00:01:32,510 --> 00:01:33,770
So first things first.

20
00:01:33,770 --> 00:01:41,090
I have to run PI game inside my program, so I'll call PI Game Dot so as to see all its resources,

21
00:01:41,090 --> 00:01:46,010
methods and properties and I'll call in it, which allows me to run it.

22
00:01:46,910 --> 00:01:50,000
By doing this, we can use every PI game tool.

23
00:01:50,510 --> 00:01:56,540
And in this lesson, we'll set up our screen resolution and we'll learn how to show the screen to the

24
00:01:56,540 --> 00:01:57,050
user.

25
00:01:57,620 --> 00:02:05,330
To do so, we'll create a variable named screen which will store pi game dot display dot set mode.

26
00:02:06,410 --> 00:02:11,780
Here we're basically saying, well, I want the screen to be equal to set mode of PI game.

27
00:02:12,230 --> 00:02:14,450
So what is my screen resolution?

28
00:02:15,080 --> 00:02:18,440
Here we have to add a value that represents the resolution.

29
00:02:18,800 --> 00:02:22,910
We'll add height and width, but we have to add them to a tuple.

30
00:02:23,210 --> 00:02:26,030
So we'll type brackets in order to create one.

31
00:02:26,030 --> 00:02:30,170
And it requires two integers, one for height and another for width.

32
00:02:30,290 --> 00:02:35,270
So I want height to be 800 pixels and width to be 600 pixels.

33
00:02:36,050 --> 00:02:38,180
This is for the game I want to create.

34
00:02:38,450 --> 00:02:43,370
I know it's the right size, so when you create games, you'll choose the size you want.

35
00:02:43,910 --> 00:02:49,160
We could execute this program to see what happens because I've created a screen that should be visible.

36
00:02:50,000 --> 00:02:53,360
So we execute this and the screen appears and disappears.

37
00:02:53,510 --> 00:02:56,420
I don't know if you could see it, but let's do it again.

38
00:02:56,420 --> 00:02:58,550
So the screen comes and goes.

39
00:02:58,940 --> 00:03:00,260
Why is this happening?

40
00:03:00,680 --> 00:03:02,780
Because that's what it has to do.

41
00:03:02,960 --> 00:03:04,220
Display itself.

42
00:03:04,460 --> 00:03:10,070
Since we don't have code down here, the process ends and we no longer have our screen, which depends

43
00:03:10,070 --> 00:03:11,930
on the execution of this code.

44
00:03:12,320 --> 00:03:17,360
So in order to keep on seeing our screen, we need our code to keep on executing itself.

45
00:03:18,050 --> 00:03:24,500
So to show the solution, I'm going to do something I shouldn't, which is to create an infinite while

46
00:03:24,500 --> 00:03:25,100
loop.

47
00:03:25,100 --> 00:03:27,500
So true pass.

48
00:03:28,370 --> 00:03:33,020
This is like poison to programs because we're talking about a loop that never ends.

49
00:03:33,350 --> 00:03:38,870
I only do this in order to teach you some things, and I want you to see what happens now.

50
00:03:39,170 --> 00:03:43,520
So I'll execute this program and the screen appears and stays there.

51
00:03:43,820 --> 00:03:45,350
But I can't do anything.

52
00:03:45,680 --> 00:03:48,860
If I positioned myself here, I can't move it either.

53
00:03:49,340 --> 00:03:54,050
The program is not responding and we can tell that by looking at the mouse.

54
00:03:55,010 --> 00:04:00,830
So that's why I have my task manager at hand and it allows me to access Python and end this task.

55
00:04:01,160 --> 00:04:03,350
So I was able to stop the execution.

56
00:04:03,350 --> 00:04:05,840
But that's not the way we want to see our screen.

57
00:04:06,320 --> 00:04:09,770
Now we're going to start a loop that allows us to display our screen.

58
00:04:10,310 --> 00:04:13,610
This loop will wait for some event to happen.

59
00:04:14,000 --> 00:04:15,020
But what events?

60
00:04:15,620 --> 00:04:19,100
Well, anything that occurs in the PI game screen is an event.

61
00:04:19,100 --> 00:04:24,260
So when you click or press your keyboard, when a character from a game does something or when an object

62
00:04:24,260 --> 00:04:30,080
crashes into another, all of these are events, and as a programmer, you can decide what's going to

63
00:04:30,080 --> 00:04:32,000
happen at code level.

64
00:04:32,360 --> 00:04:36,440
So we'll program whatever happens when the quick event occurs.

65
00:04:37,340 --> 00:04:42,110
Quit is the event in which a user clicks on X in order to close the PI game screen.

66
00:04:42,560 --> 00:04:48,830
So let's create a variable here before the loop named is running, which will be equal to true.

67
00:04:49,490 --> 00:04:54,590
So our loop will say while is running and what will happen inside our loop.

68
00:04:55,130 --> 00:04:59,540
It will iterate over all the events taking place inside pi game.

69
00:05:00,200 --> 00:05:00,860
If we bump.

70
00:05:00,960 --> 00:05:04,380
Into the quit event will make it is running be false.

71
00:05:05,310 --> 00:05:08,760
So remember that quit happens when someone clicks on x.

72
00:05:09,330 --> 00:05:12,480
That's when we get out of the loop and finish our code.

73
00:05:12,780 --> 00:05:19,170
So for each event in pi game dot, event dot get what is going to happen.

74
00:05:19,980 --> 00:05:27,990
Well, if that event contains a type that's equal to PI game dot quit capital Q otherwise it won't work

75
00:05:28,410 --> 00:05:35,160
is running will have false as value and that's how we'll be able to get out of the loop safely.

76
00:05:36,390 --> 00:05:38,160
So I'll explain it once more.

77
00:05:38,610 --> 00:05:44,940
We have a loop which will access once it is displayed on the screen and this loop will repeat itself.

78
00:05:44,940 --> 00:05:47,340
As long as is running is true.

79
00:05:47,970 --> 00:05:52,620
This loop will verify each event taking place inside the PI game naming.

80
00:05:53,280 --> 00:06:00,030
If it's a quit type event, which is the one that occurs when someone clicks on x, the is running variable

81
00:06:00,030 --> 00:06:05,220
will change to false and we'll be able to get out of the loop after that.

82
00:06:05,220 --> 00:06:10,950
Our program will close and that's when the screen will disappear, when we want it to disappear.

83
00:06:11,580 --> 00:06:14,190
So let's execute this in order to see it better.

84
00:06:14,970 --> 00:06:18,780
Here we have our screen which is now responding and I can move it.

85
00:06:18,780 --> 00:06:19,440
That's it.

86
00:06:19,440 --> 00:06:20,790
It's working properly.

87
00:06:21,390 --> 00:06:27,780
Well, I can execute the quit event, which is this one, and I'll get out of the loop and the code

88
00:06:27,780 --> 00:06:30,360
will end and the screen will disappear.

89
00:06:31,620 --> 00:06:34,680
So this is how we can install and run PI game.

90
00:06:35,250 --> 00:06:40,980
We were able to create a screen with a specific resolution and we could also create a loop that verifies

91
00:06:40,980 --> 00:06:44,310
events and allows us to close our screen whenever we want to.

92
00:06:44,850 --> 00:06:50,850
So soon we'll delve deeper into events because every event happening in our game will also happen inside

93
00:06:50,850 --> 00:06:56,160
a loop, which will always verify if any preset event is being executed.

94
00:06:56,370 --> 00:07:00,240
And as a result we'll be able to use the code we created for each event.

95
00:07:00,480 --> 00:07:01,800
So this is all for now.

96
00:07:01,800 --> 00:07:03,120
So I'll see you later.
