WEBVTT
1
00:00:08.370 --> 00:00:11.640
The moment has arrived to create the request centre.

2
00:00:11.880 --> 00:00:16.940
So let's delete this call here and we're going to create possibly the most important function.

3
00:00:16.950 --> 00:00:20.730
So let's put it as main function of the assistant.

4
00:00:22.060 --> 00:00:26.710
The function can be called my assistant and it doesn't need to receive any parameters.

5
00:00:27.520 --> 00:00:32.770
And the first thing my assistant is going to do is activate the initial greeting.

6
00:00:33.280 --> 00:00:36.640
So from here, let's call initial greeting.

7
00:00:38.050 --> 00:00:43.240
Once we call the function my assistant, the first thing it's going to do is greet us.

8
00:00:43.780 --> 00:00:48.220
Then we're going to enter in a loop so that the system always continues to function.

9
00:00:48.340 --> 00:00:52.660
It will answer all our requests and always be waiting that we say something else.

10
00:00:52.690 --> 00:00:55.870
In other words, this function will constantly be working.

11
00:00:56.630 --> 00:01:02.420
For this, we're going to enter in a wild loop, which won't stop until we say we want to finish with

12
00:01:02.420 --> 00:01:06.080
the program so that the while loop can function adequately.

13
00:01:06.080 --> 00:01:13.340
We need a cut off variable, a variable that starts true and only passes the false when we want to finish

14
00:01:13.340 --> 00:01:14.150
the program.

15
00:01:15.260 --> 00:01:19.880
The variable will be called go on and will be equal to true.

16
00:01:21.750 --> 00:01:28.790
So now we come to the main loop which will say while go on and two dots and we enter in the loop.

17
00:01:28.800 --> 00:01:35.100
Ladies and gentlemen, this loop will activate the microphone and save the request in a string.

18
00:01:36.090 --> 00:01:43.260
This, as we know, will do it through the variable transform audio into test, which we have here.

19
00:01:43.560 --> 00:01:46.890
But we're going to save this in a variable that we can manipulate.

20
00:01:48.060 --> 00:01:51.510
It will be called my request and will be equal to all of this.

21
00:01:52.350 --> 00:01:59.160
Also, we will make all of this appear in lowercase with the method lower to avoid possible conflicts.

22
00:02:00.390 --> 00:02:05.610
Now that we can see what my request contains in order to establish what it does.

23
00:02:06.600 --> 00:02:14.250
For example, if the expression open YouTube is found inside my request, what will the system do?

24
00:02:15.000 --> 00:02:17.970
First, it's going to tell us that the request is complete.

25
00:02:18.390 --> 00:02:27.840
How with speak and it's going to say Sure, I'm opening YouTube and this is only an expression.

26
00:02:27.870 --> 00:02:29.580
Now it has to do it.

27
00:02:29.820 --> 00:02:31.170
So how does it do it?

28
00:02:31.380 --> 00:02:33.210
So we call web browser.

29
00:02:33.240 --> 00:02:40.530
The library were installed at the start with the method open which serves to open the browser and in

30
00:02:40.530 --> 00:02:43.710
the parameters we say which site we want to open.

31
00:02:43.950 --> 00:02:53.460
So between speech marks we put HTTP forward slash w the window and here I put youtube.com.

32
00:02:54.310 --> 00:02:56.320
Although you can put whatever you want.

33
00:02:56.620 --> 00:02:58.480
So now we put continue.

34
00:02:58.510 --> 00:03:01.630
So the loop can continue and return to the start.

35
00:03:02.080 --> 00:03:07.270
So before we try it, let's make our assistant able to open the browser when we ask it.

36
00:03:07.390 --> 00:03:14.050
So let's verify with Elif if the expression open browser is found in my request.

37
00:03:14.980 --> 00:03:21.370
If this is so, we're going to call speak so that it says something nice, like, of course I'm on it.

38
00:03:21.940 --> 00:03:31.920
And then web browser open and here we can put the opens for default on https hyphen forward slash WWE

39
00:03:31.930 --> 00:03:34.090
w google.com.

40
00:03:34.120 --> 00:03:38.950
As this seems to be the start page of most browsers and then continue.

41
00:03:39.640 --> 00:03:44.680
So to test this, we need to call my assistant and we can see how it works.

42
00:03:48.040 --> 00:03:48.400
Hello.

43
00:03:48.400 --> 00:03:49.360
I am Hazel.

44
00:03:49.780 --> 00:03:51.220
How can I help you?

45
00:03:51.250 --> 00:03:52.030
Hello, Hazel.

46
00:03:52.060 --> 00:03:52.930
Good morning.

47
00:03:53.320 --> 00:03:55.360
I need to open YouTube, please.

48
00:03:56.020 --> 00:03:56.950
Thank you very much.

49
00:03:57.100 --> 00:03:57.600
Sure.

50
00:03:57.610 --> 00:03:59.140
I am opening YouTube.

51
00:04:00.790 --> 00:04:03.370
And like that, Hazel completes my request.

52
00:04:03.370 --> 00:04:07.510
And as we noted, it wasn't necessary to only say the expression.

53
00:04:07.840 --> 00:04:12.760
You could say a large phrase which contains the search phrase because Hazel is listening to me all the

54
00:04:12.760 --> 00:04:14.470
time, including now.

55
00:04:14.770 --> 00:04:19.930
And she will disregard everything I say except the phrases that are of interest to her.

56
00:04:20.920 --> 00:04:25.300
So now, as the loop has not yet finished yet, I can give the following order.

57
00:04:25.300 --> 00:04:27.010
Open browser, please.

58
00:04:27.370 --> 00:04:28.960
Of course I am on it.

59
00:04:30.790 --> 00:04:36.760
They could hear me and Google is opened so the loop continues to execute, including now.

60
00:04:36.760 --> 00:04:41.770
And this allows me to continue giving orders and I can have my assistant working constantly.

61
00:04:42.520 --> 00:04:47.830
So let's make the most of the fact that we have some other functions also created to add to more.

62
00:04:48.580 --> 00:04:56.860
So Elif, if they hear what I ask, so what day is today inside my request?

63
00:04:57.460 --> 00:05:02.590
This time we aren't going to call speak because we've already have the function configured for this.

64
00:05:02.980 --> 00:05:12.310
So we're going to call ask day and also put continue and now another elif to check if what time it is

65
00:05:12.310 --> 00:05:14.590
is found inside my request.

66
00:05:15.520 --> 00:05:19.690
If this is heard, we're going to call, ask time and continue.

67
00:05:20.350 --> 00:05:21.700
And we call again.

68
00:05:22.720 --> 00:05:23.050
Hello.

69
00:05:23.050 --> 00:05:24.010
I am Hazel.

70
00:05:24.430 --> 00:05:25.900
How can I help you?

71
00:05:25.930 --> 00:05:26.950
Hello again, Hazel.

72
00:05:26.950 --> 00:05:28.570
And thank you for all your help.

73
00:05:28.780 --> 00:05:31.960
I would like to know what day is today, please.

74
00:05:32.170 --> 00:05:33.400
Today is Wednesday.

75
00:05:33.850 --> 00:05:35.020
Thank you, Hazel.

76
00:05:35.140 --> 00:05:36.730
Now, I have a doubt.

77
00:05:36.760 --> 00:05:40.010
Do you know what time it is in this precise moment?

78
00:05:40.030 --> 00:05:42.890
At this moment, it is 8 hours and 22 minutes.

79
00:05:42.910 --> 00:05:44.290
Thank you very much, Hazel.

80
00:05:44.410 --> 00:05:49.510
So Hazel listens to me all of the time and can resolve everything I request without needing that.

81
00:05:49.510 --> 00:05:51.820
We execute the program again and again.

82
00:05:52.840 --> 00:05:58.690
We have added four functions, yet we can add many, many more and we're going to do just so in the

83
00:05:58.690 --> 00:05:59.500
next lesson.

84
00:05:59.860 --> 00:06:00.940
So I'll see you there.
